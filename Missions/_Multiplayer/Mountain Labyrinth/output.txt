// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 360
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 ] , [ 5 , 6 , 7 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 5
 344: PUSH
 345: LD_INT 6
 347: PUSH
 348: LD_INT 7
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 360: LD_ADDR_EXP 36
 364: PUSH
 365: LD_EXP 31
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: DIFF
 376: PUSH
 377: LD_INT 1
 379: GREATER
 380: ST_TO_ADDR
// if Multiplayer then
 381: LD_OWVAR 4
 385: IFFALSE 592
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 387: LD_ADDR_EXP 1
 391: PUSH
 392: LD_INT 0
 394: PPUSH
 395: CALL_OW 426
 399: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 400: LD_ADDR_EXP 2
 404: PUSH
 405: LD_INT 1
 407: PPUSH
 408: CALL_OW 426
 412: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 413: LD_ADDR_EXP 3
 417: PUSH
 418: LD_INT 2
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 426: LD_ADDR_EXP 4
 430: PUSH
 431: LD_INT 3
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 439: LD_ADDR_EXP 5
 443: PUSH
 444: LD_INT 4
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 452: LD_ADDR_EXP 6
 456: PUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 465: LD_ADDR_EXP 7
 469: PUSH
 470: LD_INT 6
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 478: LD_ADDR_EXP 8
 482: PUSH
 483: LD_INT 10
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 491: LD_ADDR_EXP 9
 495: PUSH
 496: LD_INT 11
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 504: LD_ADDR_EXP 10
 508: PUSH
 509: LD_INT 12
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 517: LD_ADDR_EXP 11
 521: PUSH
 522: LD_INT 13
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 530: LD_ADDR_EXP 12
 534: PUSH
 535: LD_INT 14
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 543: LD_ADDR_EXP 13
 547: PUSH
 548: LD_INT 17
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 556: LD_ADDR_EXP 14
 560: PUSH
 561: LD_INT 20
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 569: LD_ADDR_VAR 0 3
 573: PUSH
 574: LD_INT 22
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// def_win_rules = 0 ;
 582: LD_ADDR_EXP 30
 586: PUSH
 587: LD_INT 0
 589: ST_TO_ADDR
// end else
 590: GO 724
// begin Randomize ;
 592: CALL_OW 10
// def_base_level := 2 ;
 596: LD_ADDR_EXP 1
 600: PUSH
 601: LD_INT 2
 603: ST_TO_ADDR
// def_amount_of_people := 2 ;
 604: LD_ADDR_EXP 2
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_skill_level := 1 ;
 612: LD_ADDR_EXP 3
 616: PUSH
 617: LD_INT 1
 619: ST_TO_ADDR
// def_starting_resources := 2 ;
 620: LD_ADDR_EXP 4
 624: PUSH
 625: LD_INT 2
 627: ST_TO_ADDR
// def_shipments_density := 50 ;
 628: LD_ADDR_EXP 5
 632: PUSH
 633: LD_INT 50
 635: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 636: LD_ADDR_EXP 6
 640: PUSH
 641: LD_INT 2
 643: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 644: LD_ADDR_EXP 7
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_shared_vision := 1 ;
 652: LD_ADDR_EXP 8
 656: PUSH
 657: LD_INT 1
 659: ST_TO_ADDR
// def_morale_flags := 1 ;
 660: LD_ADDR_EXP 9
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_siberite_detection := 1 ;
 668: LD_ADDR_EXP 10
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_people_respawning := 2 ;
 676: LD_ADDR_EXP 11
 680: PUSH
 681: LD_INT 2
 683: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 684: LD_ADDR_EXP 12
 688: PUSH
 689: LD_INT 3
 691: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 692: LD_ADDR_EXP 13
 696: PUSH
 697: LD_INT 2
 699: ST_TO_ADDR
// def_builduptime := 1 ;
 700: LD_ADDR_EXP 14
 704: PUSH
 705: LD_INT 1
 707: ST_TO_ADDR
// tech_level = 4 ;
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_INT 4
 715: ST_TO_ADDR
// def_win_rules = 0 ;
 716: LD_ADDR_EXP 30
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// end ; if isSGUI then
 724: LD_OWVAR 83
 728: IFFALSE 736
// setMpTechs ( ) else
 730: CALL 8745 0 0
 734: GO 749
// SetMpTechLevel ( tech_level + 1 ) ;
 736: LD_VAR 0 3
 740: PUSH
 741: LD_INT 1
 743: PLUS
 744: PPUSH
 745: CALL 8892 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 749: LD_ADDR_EXP 17
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 1
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: PUSH
 768: LD_EXP 1
 772: PUSH
 773: LD_INT 1
 775: PLUS
 776: ARRAY
 777: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 778: LD_ADDR_EXP 18
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PUSH
 797: LD_EXP 1
 801: PUSH
 802: LD_INT 1
 804: PLUS
 805: ARRAY
 806: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 807: LD_ADDR_EXP 19
 811: PUSH
 812: LD_INT 9
 814: PUSH
 815: LD_INT 12
 817: PUSH
 818: LD_INT 15
 820: PUSH
 821: LD_INT 24
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_EXP 2
 834: PUSH
 835: LD_INT 1
 837: PLUS
 838: ARRAY
 839: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 840: LD_ADDR_EXP 20
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: LD_INT 3
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 5
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: LD_EXP 3
 867: PUSH
 868: LD_INT 1
 870: PLUS
 871: ARRAY
 872: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 873: LD_ADDR_EXP 22
 877: PUSH
 878: LD_INT 0
 880: PUSH
 881: LD_INT 0
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 30
 894: PUSH
 895: LD_INT 0
 897: PUSH
 898: LD_INT 0
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 50
 908: PUSH
 909: LD_INT 20
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_INT 80
 922: PUSH
 923: LD_INT 40
 925: PUSH
 926: LD_INT 20
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_EXP 4
 944: PUSH
 945: LD_INT 1
 947: PLUS
 948: ARRAY
 949: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 950: LD_ADDR_EXP 21
 954: PUSH
 955: LD_INT 10
 957: PUSH
 958: EMPTY
 959: LIST
 960: PUSH
 961: LD_INT 7
 963: PUSH
 964: LD_INT 14
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 6
 973: PUSH
 974: LD_INT 12
 976: PUSH
 977: LD_INT 18
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 5
 987: PUSH
 988: LD_INT 10
 990: PUSH
 991: LD_INT 15
 993: PUSH
 994: LD_INT 20
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: LD_EXP 4
1013: PUSH
1014: LD_INT 1
1016: PLUS
1017: ARRAY
1018: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1019: LD_ADDR_EXP 23
1023: PUSH
1024: LD_INT 150
1026: PUSH
1027: LD_EXP 5
1031: MINUS
1032: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1033: LD_ADDR_EXP 27
1037: PUSH
1038: LD_INT 0
1040: PUSH
1041: LD_INT 10500
1043: PUSH
1044: LD_INT 6300
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_EXP 11
1056: PUSH
1057: LD_INT 1
1059: PLUS
1060: ARRAY
1061: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1062: LD_ADDR_EXP 28
1066: PUSH
1067: LD_INT 0
1069: PUSH
1070: LD_INT 31500
1072: PUSH
1073: LD_INT 10500
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_EXP 11
1085: PUSH
1086: LD_INT 1
1088: PLUS
1089: ARRAY
1090: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1091: LD_ADDR_EXP 25
1095: PUSH
1096: LD_INT 0
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 2
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_EXP 12
1118: PUSH
1119: LD_INT 1
1121: PLUS
1122: ARRAY
1123: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1124: LD_ADDR_EXP 24
1128: PUSH
1129: LD_INT 1
1131: NEG
1132: PUSH
1133: LD_INT 350
1135: PUSH
1136: LD_INT 700
1138: PUSH
1139: LD_INT 1400
1141: PUSH
1142: LD_INT 0
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_EXP 9
1156: PUSH
1157: LD_INT 1
1159: PLUS
1160: ARRAY
1161: ST_TO_ADDR
// battle_flags_id := [ ] ;
1162: LD_ADDR_EXP 44
1166: PUSH
1167: EMPTY
1168: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1169: LD_ADDR_EXP 29
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 63000
1182: PUSH
1183: LD_INT 126000
1185: PUSH
1186: LD_INT 189000
1188: PUSH
1189: LD_INT 252000
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: PUSH
1200: LD_EXP 13
1204: PUSH
1205: LD_INT 1
1207: PLUS
1208: ARRAY
1209: ST_TO_ADDR
// end ;
1210: LD_VAR 0 1
1214: RET
// function init_map ; var i , j ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
1219: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 8 ] , [ 38 , 59 ] , [ 72 , 135 ] , [ 218 , 13 ] , [ 241 , 57 ] , [ 265 , 135 ] ] ;
1220: LD_ADDR_EXP 40
1224: PUSH
1225: LD_INT 12
1227: PUSH
1228: LD_INT 8
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: LD_INT 38
1237: PUSH
1238: LD_INT 59
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 72
1247: PUSH
1248: LD_INT 135
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PUSH
1255: LD_INT 218
1257: PUSH
1258: LD_INT 13
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PUSH
1265: LD_INT 241
1267: PUSH
1268: LD_INT 57
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 265
1277: PUSH
1278: LD_INT 135
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 18 , 6 ] , [ 50 , 89 ] , [ 82 , 140 ] , [ 207 , 6 ] , [ 255 , 85 ] , [ 272 , 138 ] ] ;
1293: LD_ADDR_EXP 41
1297: PUSH
1298: LD_INT 18
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 50
1310: PUSH
1311: LD_INT 89
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 82
1320: PUSH
1321: LD_INT 140
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: LD_INT 207
1330: PUSH
1331: LD_INT 6
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 255
1340: PUSH
1341: LD_INT 85
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: LD_INT 272
1350: PUSH
1351: LD_INT 138
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 41 , 33 ] , [ 54 , 56 ] , [ 79 , 104 ] , [ 206 , 40 ] , [ 228 , 82 ] , [ 239 , 107 ] ] ;
1366: LD_ADDR_EXP 42
1370: PUSH
1371: LD_INT 41
1373: PUSH
1374: LD_INT 33
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 54
1383: PUSH
1384: LD_INT 56
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 79
1393: PUSH
1394: LD_INT 104
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 206
1403: PUSH
1404: LD_INT 40
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 228
1413: PUSH
1414: LD_INT 82
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PUSH
1421: LD_INT 239
1423: PUSH
1424: LD_INT 107
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 29 , 7 ] , [ 68 , 85 ] , [ 95 , 134 ] , [ 188 , 13 ] , [ 215 , 56 ] , [ 254 , 137 ] ] ;
1439: LD_ADDR_EXP 43
1443: PUSH
1444: LD_INT 29
1446: PUSH
1447: LD_INT 7
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 68
1456: PUSH
1457: LD_INT 85
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 95
1466: PUSH
1467: LD_INT 134
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 188
1476: PUSH
1477: LD_INT 13
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 215
1486: PUSH
1487: LD_INT 56
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 254
1496: PUSH
1497: LD_INT 137
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: ST_TO_ADDR
// depot_def := [ [ 22 , 20 , 1 ] , [ 48 , 71 , 1 ] , [ 74 , 122 , 1 ] , [ 213 , 22 , 4 ] , [ 238 , 69 , 4 ] , [ 262 , 122 , 4 ] ] ;
1512: LD_ADDR_EXP 37
1516: PUSH
1517: LD_INT 22
1519: PUSH
1520: LD_INT 20
1522: PUSH
1523: LD_INT 1
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 48
1533: PUSH
1534: LD_INT 71
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 74
1547: PUSH
1548: LD_INT 122
1550: PUSH
1551: LD_INT 1
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 213
1561: PUSH
1562: LD_INT 22
1564: PUSH
1565: LD_INT 4
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 238
1575: PUSH
1576: LD_INT 69
1578: PUSH
1579: LD_INT 4
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 262
1589: PUSH
1590: LD_INT 122
1592: PUSH
1593: LD_INT 4
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// for i in depot_def do
1609: LD_ADDR_VAR 0 2
1613: PUSH
1614: LD_EXP 37
1618: PUSH
1619: FOR_IN
1620: IFFALSE 1696
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1622: LD_ADDR_EXP 39
1626: PUSH
1627: LD_EXP 39
1631: PUSH
1632: LD_VAR 0 2
1636: PUSH
1637: LD_INT 1
1639: ARRAY
1640: PPUSH
1641: LD_VAR 0 2
1645: PUSH
1646: LD_INT 3
1648: ARRAY
1649: PPUSH
1650: LD_INT 4
1652: NEG
1653: PPUSH
1654: CALL_OW 272
1658: PUSH
1659: LD_VAR 0 2
1663: PUSH
1664: LD_INT 2
1666: ARRAY
1667: PPUSH
1668: LD_VAR 0 2
1672: PUSH
1673: LD_INT 3
1675: ARRAY
1676: PPUSH
1677: LD_INT 4
1679: NEG
1680: PPUSH
1681: CALL_OW 273
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: EMPTY
1691: LIST
1692: ADD
1693: ST_TO_ADDR
1694: GO 1619
1696: POP
1697: POP
// breastworks_def := [ [ [ 29 , 14 , 4 ] , [ 36 , 28 , 4 ] ] , [ [ 54 , 62 , 4 ] , [ 63 , 79 , 4 ] ] , [ [ 88 , 129 , 4 ] , [ 78 , 110 , 4 ] ] , [ [ 197 , 16 , 1 ] , [ 208 , 35 , 1 ] ] , [ [ 223 , 62 , 1 ] , [ 231 , 78 , 1 ] ] , [ [ 256 , 132 , 1 ] , [ 248 , 115 , 1 ] ] ] ;
1698: LD_ADDR_EXP 38
1702: PUSH
1703: LD_INT 29
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: LIST
1716: PUSH
1717: LD_INT 36
1719: PUSH
1720: LD_INT 28
1722: PUSH
1723: LD_INT 4
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 54
1737: PUSH
1738: LD_INT 62
1740: PUSH
1741: LD_INT 4
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 63
1751: PUSH
1752: LD_INT 79
1754: PUSH
1755: LD_INT 4
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 88
1769: PUSH
1770: LD_INT 129
1772: PUSH
1773: LD_INT 4
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 78
1783: PUSH
1784: LD_INT 110
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 197
1801: PUSH
1802: LD_INT 16
1804: PUSH
1805: LD_INT 1
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 208
1815: PUSH
1816: LD_INT 35
1818: PUSH
1819: LD_INT 1
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 223
1833: PUSH
1834: LD_INT 62
1836: PUSH
1837: LD_INT 1
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 231
1847: PUSH
1848: LD_INT 78
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 256
1865: PUSH
1866: LD_INT 132
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 248
1879: PUSH
1880: LD_INT 115
1882: PUSH
1883: LD_INT 1
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// for i = 1 to Side_Positions do
1903: LD_ADDR_VAR 0 2
1907: PUSH
1908: DOUBLE
1909: LD_INT 1
1911: DEC
1912: ST_TO_ADDR
1913: LD_EXP 34
1917: PUSH
1918: FOR_TO
1919: IFFALSE 2042
// begin if not Side_Positions [ i ] then
1921: LD_EXP 34
1925: PUSH
1926: LD_VAR 0 2
1930: ARRAY
1931: NOT
1932: IFFALSE 1936
// continue ;
1934: GO 1918
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1936: LD_EXP 40
1940: PUSH
1941: LD_EXP 34
1945: PUSH
1946: LD_VAR 0 2
1950: ARRAY
1951: ARRAY
1952: PUSH
1953: LD_INT 1
1955: ARRAY
1956: PPUSH
1957: LD_EXP 40
1961: PUSH
1962: LD_EXP 34
1966: PUSH
1967: LD_VAR 0 2
1971: ARRAY
1972: ARRAY
1973: PUSH
1974: LD_INT 2
1976: ARRAY
1977: PPUSH
1978: LD_INT 2
1980: PPUSH
1981: CALL_OW 62
// if def_extra_oil_deposits then
1985: LD_EXP 6
1989: IFFALSE 2040
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1991: LD_EXP 41
1995: PUSH
1996: LD_EXP 34
2000: PUSH
2001: LD_VAR 0 2
2005: ARRAY
2006: ARRAY
2007: PUSH
2008: LD_INT 1
2010: ARRAY
2011: PPUSH
2012: LD_EXP 41
2016: PUSH
2017: LD_EXP 34
2021: PUSH
2022: LD_VAR 0 2
2026: ARRAY
2027: ARRAY
2028: PUSH
2029: LD_INT 2
2031: ARRAY
2032: PPUSH
2033: LD_INT 2
2035: PPUSH
2036: CALL_OW 62
// end ;
2040: GO 1918
2042: POP
2043: POP
// if def_extra_sib_deposits then
2044: LD_EXP 7
2048: IFFALSE 2195
// for i = 1 to Side_Positions do
2050: LD_ADDR_VAR 0 2
2054: PUSH
2055: DOUBLE
2056: LD_INT 1
2058: DEC
2059: ST_TO_ADDR
2060: LD_EXP 34
2064: PUSH
2065: FOR_TO
2066: IFFALSE 2193
// begin if not Side_Positions [ i ] then
2068: LD_EXP 34
2072: PUSH
2073: LD_VAR 0 2
2077: ARRAY
2078: NOT
2079: IFFALSE 2083
// continue ;
2081: GO 2065
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2083: LD_EXP 42
2087: PUSH
2088: LD_EXP 34
2092: PUSH
2093: LD_VAR 0 2
2097: ARRAY
2098: ARRAY
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_EXP 42
2108: PUSH
2109: LD_EXP 34
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: ARRAY
2120: PUSH
2121: LD_INT 2
2123: ARRAY
2124: PPUSH
2125: LD_INT 3
2127: PPUSH
2128: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2132: LD_EXP 7
2136: PUSH
2137: LD_INT 2
2139: EQUAL
2140: IFFALSE 2191
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2142: LD_EXP 43
2146: PUSH
2147: LD_EXP 34
2151: PUSH
2152: LD_VAR 0 2
2156: ARRAY
2157: ARRAY
2158: PUSH
2159: LD_INT 1
2161: ARRAY
2162: PPUSH
2163: LD_EXP 43
2167: PUSH
2168: LD_EXP 34
2172: PUSH
2173: LD_VAR 0 2
2177: ARRAY
2178: ARRAY
2179: PUSH
2180: LD_INT 2
2182: ARRAY
2183: PPUSH
2184: LD_INT 3
2186: PPUSH
2187: CALL_OW 62
// end ;
2191: GO 2065
2193: POP
2194: POP
// end ;
2195: LD_VAR 0 1
2199: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
// if not Team_Game then
2205: LD_EXP 36
2209: NOT
2210: IFFALSE 2308
// begin for i = 1 to 8 do
2212: LD_ADDR_VAR 0 2
2216: PUSH
2217: DOUBLE
2218: LD_INT 1
2220: DEC
2221: ST_TO_ADDR
2222: LD_INT 8
2224: PUSH
2225: FOR_TO
2226: IFFALSE 2304
// for j = 1 to 8 do
2228: LD_ADDR_VAR 0 3
2232: PUSH
2233: DOUBLE
2234: LD_INT 1
2236: DEC
2237: ST_TO_ADDR
2238: LD_INT 8
2240: PUSH
2241: FOR_TO
2242: IFFALSE 2300
// if i <> j then
2244: LD_VAR 0 2
2248: PUSH
2249: LD_VAR 0 3
2253: NONEQUAL
2254: IFFALSE 2278
// SetAttitude ( i , j , att_neutral , true ) else
2256: LD_VAR 0 2
2260: PPUSH
2261: LD_VAR 0 3
2265: PPUSH
2266: LD_INT 0
2268: PPUSH
2269: LD_INT 1
2271: PPUSH
2272: CALL_OW 80
2276: GO 2298
// SetAttitude ( i , j , att_friend , true ) ;
2278: LD_VAR 0 2
2282: PPUSH
2283: LD_VAR 0 3
2287: PPUSH
2288: LD_INT 1
2290: PPUSH
2291: LD_INT 1
2293: PPUSH
2294: CALL_OW 80
2298: GO 2241
2300: POP
2301: POP
2302: GO 2225
2304: POP
2305: POP
// end else
2306: GO 2483
// begin if def_shared_vision then
2308: LD_EXP 8
2312: IFFALSE 2377
// begin for i in Teams do
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_EXP 32
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2375
// for j = 2 to i do
2327: LD_ADDR_VAR 0 3
2331: PUSH
2332: DOUBLE
2333: LD_INT 2
2335: DEC
2336: ST_TO_ADDR
2337: LD_VAR 0 2
2341: PUSH
2342: FOR_TO
2343: IFFALSE 2371
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2345: LD_VAR 0 2
2349: PUSH
2350: LD_VAR 0 3
2354: ARRAY
2355: PPUSH
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 1
2363: ARRAY
2364: PPUSH
2365: CALL_OW 343
2369: GO 2342
2371: POP
2372: POP
2373: GO 2324
2375: POP
2376: POP
// end ; for i = 1 to 8 do
2377: LD_ADDR_VAR 0 2
2381: PUSH
2382: DOUBLE
2383: LD_INT 1
2385: DEC
2386: ST_TO_ADDR
2387: LD_INT 8
2389: PUSH
2390: FOR_TO
2391: IFFALSE 2481
// for j = 1 to 8 do
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: DOUBLE
2399: LD_INT 1
2401: DEC
2402: ST_TO_ADDR
2403: LD_INT 8
2405: PUSH
2406: FOR_TO
2407: IFFALSE 2477
// if Side_Teams [ i ] = Side_Teams [ j ] then
2409: LD_EXP 31
2413: PUSH
2414: LD_VAR 0 2
2418: ARRAY
2419: PUSH
2420: LD_EXP 31
2424: PUSH
2425: LD_VAR 0 3
2429: ARRAY
2430: EQUAL
2431: IFFALSE 2455
// SetAttitude ( i , j , att_friend , true ) else
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_VAR 0 3
2442: PPUSH
2443: LD_INT 1
2445: PPUSH
2446: LD_INT 1
2448: PPUSH
2449: CALL_OW 80
2453: GO 2475
// SetAttitude ( i , j , att_enemy , true ) ;
2455: LD_VAR 0 2
2459: PPUSH
2460: LD_VAR 0 3
2464: PPUSH
2465: LD_INT 2
2467: PPUSH
2468: LD_INT 1
2470: PPUSH
2471: CALL_OW 80
2475: GO 2406
2477: POP
2478: POP
2479: GO 2390
2481: POP
2482: POP
// end ; end ;
2483: LD_VAR 0 1
2487: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2488: LD_INT 0
2490: PPUSH
2491: PPUSH
2492: PPUSH
2493: PPUSH
// result := [ ] ;
2494: LD_ADDR_VAR 0 7
2498: PUSH
2499: EMPTY
2500: ST_TO_ADDR
// for i := 1 to count do
2501: LD_ADDR_VAR 0 8
2505: PUSH
2506: DOUBLE
2507: LD_INT 1
2509: DEC
2510: ST_TO_ADDR
2511: LD_VAR 0 1
2515: PUSH
2516: FOR_TO
2517: IFFALSE 2962
// begin uc_direction := Rand ( 0 , 5 ) ;
2519: LD_ADDR_OWVAR 24
2523: PUSH
2524: LD_INT 0
2526: PPUSH
2527: LD_INT 5
2529: PPUSH
2530: CALL_OW 12
2534: ST_TO_ADDR
// if commander then
2535: LD_LOC 1
2539: IFFALSE 2648
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2541: LD_ADDR_OWVAR 26
2545: PUSH
2546: LD_OWVAR 19
2550: PUSH
2551: LD_OWVAR 20
2555: ARRAY
2556: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2557: LD_INT 1
2559: PPUSH
2560: LD_INT 2
2562: PPUSH
2563: CALL_OW 12
2567: PPUSH
2568: LD_VAR 0 2
2572: PPUSH
2573: LD_EXP 20
2577: PUSH
2578: LD_INT 2
2580: PLUS
2581: PPUSH
2582: CALL_OW 380
// hc_importance := 105 ;
2586: LD_ADDR_OWVAR 32
2590: PUSH
2591: LD_INT 105
2593: ST_TO_ADDR
// commander := false ;
2594: LD_ADDR_LOC 1
2598: PUSH
2599: LD_INT 0
2601: ST_TO_ADDR
// if Multiplayer then
2602: LD_OWVAR 4
2606: IFFALSE 2646
// begin hc_gallery := MULTIAVATARS ;
2608: LD_ADDR_OWVAR 33
2612: PUSH
2613: LD_STRING MULTIAVATARS
2615: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2616: LD_ADDR_OWVAR 34
2620: PUSH
2621: LD_OWVAR 20
2625: PPUSH
2626: CALL_OW 525
2630: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2631: LD_ADDR_OWVAR 27
2635: PUSH
2636: LD_OWVAR 20
2640: PPUSH
2641: CALL_OW 526
2645: ST_TO_ADDR
// end ; end else
2646: GO 2711
// begin hc_name :=  ;
2648: LD_ADDR_OWVAR 26
2652: PUSH
2653: LD_STRING 
2655: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2656: LD_INT 1
2658: PPUSH
2659: LD_INT 2
2661: PPUSH
2662: CALL_OW 12
2666: PPUSH
2667: LD_VAR 0 2
2671: PPUSH
2672: LD_EXP 20
2676: PPUSH
2677: CALL_OW 380
// hc_importance := 0 ;
2681: LD_ADDR_OWVAR 32
2685: PUSH
2686: LD_INT 0
2688: ST_TO_ADDR
// if Multiplayer then
2689: LD_OWVAR 4
2693: IFFALSE 2711
// begin hc_gallery :=  ;
2695: LD_ADDR_OWVAR 33
2699: PUSH
2700: LD_STRING 
2702: ST_TO_ADDR
// hc_face_number := 0 ;
2703: LD_ADDR_OWVAR 34
2707: PUSH
2708: LD_INT 0
2710: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2711: LD_ADDR_VAR 0 10
2715: PUSH
2716: CALL_OW 44
2720: ST_TO_ADDR
// if global_defined then
2721: LD_LOC 3
2725: IFFALSE 2865
// begin if ( cl = class_soldier ) then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 1
2734: EQUAL
2735: IFFALSE 2755
// j := i + soldiers_created else
2737: LD_ADDR_VAR 0 9
2741: PUSH
2742: LD_VAR 0 8
2746: PUSH
2747: LD_LOC 4
2751: PLUS
2752: ST_TO_ADDR
2753: GO 2765
// j := i ;
2755: LD_ADDR_VAR 0 9
2759: PUSH
2760: LD_VAR 0 8
2764: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2765: LD_LOC 2
2769: PUSH
2770: LD_VAR 0 2
2774: ARRAY
2775: PUSH
2776: LD_VAR 0 9
2780: ARRAY
2781: PPUSH
2782: LD_VAR 0 10
2786: PPUSH
2787: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2791: LD_VAR 0 10
2795: PPUSH
2796: LD_INT 2
2798: PPUSH
2799: LD_LOC 2
2803: PUSH
2804: LD_VAR 0 2
2808: ARRAY
2809: PUSH
2810: LD_VAR 0 9
2814: ARRAY
2815: PPUSH
2816: LD_INT 2
2818: PPUSH
2819: CALL_OW 260
2823: PPUSH
2824: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2828: LD_VAR 0 10
2832: PPUSH
2833: LD_INT 1
2835: PPUSH
2836: LD_LOC 2
2840: PUSH
2841: LD_VAR 0 2
2845: ARRAY
2846: PUSH
2847: LD_VAR 0 9
2851: ARRAY
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: CALL_OW 260
2860: PPUSH
2861: CALL_OW 239
// end ; if building then
2865: LD_VAR 0 6
2869: IFFALSE 2914
// begin SetDir ( un , ( GetDir ( building ) + 3 ) mod 6 ) ;
2871: LD_VAR 0 10
2875: PPUSH
2876: LD_VAR 0 6
2880: PPUSH
2881: CALL_OW 254
2885: PUSH
2886: LD_INT 3
2888: PLUS
2889: PUSH
2890: LD_INT 6
2892: MOD
2893: PPUSH
2894: CALL_OW 233
// PlaceHumanInUnit ( un , building ) end else
2898: LD_VAR 0 10
2902: PPUSH
2903: LD_VAR 0 6
2907: PPUSH
2908: CALL_OW 52
2912: GO 2941
// PlaceUnitXYR ( un , x , y , r , false ) ;
2914: LD_VAR 0 10
2918: PPUSH
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_VAR 0 4
2928: PPUSH
2929: LD_VAR 0 5
2933: PPUSH
2934: LD_INT 0
2936: PPUSH
2937: CALL_OW 50
// result := result ^ [ un ] ;
2941: LD_ADDR_VAR 0 7
2945: PUSH
2946: LD_VAR 0 7
2950: PUSH
2951: LD_VAR 0 10
2955: PUSH
2956: EMPTY
2957: LIST
2958: ADD
2959: ST_TO_ADDR
// end ;
2960: GO 2516
2962: POP
2963: POP
// if not global_defined then
2964: LD_LOC 3
2968: NOT
2969: IFFALSE 3047
// if ( global_units >= cl ) then
2971: LD_LOC 2
2975: PUSH
2976: LD_VAR 0 2
2980: GREATEREQUAL
2981: IFFALSE 3022
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2983: LD_ADDR_LOC 2
2987: PUSH
2988: LD_LOC 2
2992: PPUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: LD_LOC 2
3002: PUSH
3003: LD_VAR 0 2
3007: ARRAY
3008: PUSH
3009: LD_VAR 0 7
3013: ADD
3014: PPUSH
3015: CALL_OW 1
3019: ST_TO_ADDR
3020: GO 3047
// global_units := Replace ( global_units , cl , result ) ;
3022: LD_ADDR_LOC 2
3026: PUSH
3027: LD_LOC 2
3031: PPUSH
3032: LD_VAR 0 2
3036: PPUSH
3037: LD_VAR 0 7
3041: PPUSH
3042: CALL_OW 1
3046: ST_TO_ADDR
// if commander then
3047: LD_LOC 1
3051: IFFALSE 3098
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3053: LD_ADDR_EXP 45
3057: PUSH
3058: LD_EXP 45
3062: PPUSH
3063: LD_OWVAR 20
3067: PPUSH
3068: LD_EXP 45
3072: PUSH
3073: LD_OWVAR 20
3077: ARRAY
3078: PUSH
3079: LD_VAR 0 10
3083: ADD
3084: PPUSH
3085: CALL_OW 1
3089: ST_TO_ADDR
// commander := false ;
3090: LD_ADDR_LOC 1
3094: PUSH
3095: LD_INT 0
3097: ST_TO_ADDR
// end ; end ;
3098: LD_VAR 0 7
3102: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3103: LD_INT 0
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
// if side in [ 0 , 9 ] then
3114: LD_VAR 0 1
3118: PUSH
3119: LD_INT 0
3121: PUSH
3122: LD_INT 9
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: IN
3129: IFFALSE 3133
// exit ;
3131: GO 4183
// pos := Side_Positions [ side ] ;
3133: LD_ADDR_VAR 0 3
3137: PUSH
3138: LD_EXP 34
3142: PUSH
3143: LD_VAR 0 1
3147: ARRAY
3148: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3149: LD_ADDR_OWVAR 21
3153: PUSH
3154: LD_EXP 35
3158: PUSH
3159: LD_VAR 0 1
3163: ARRAY
3164: ST_TO_ADDR
// uc_side := side ;
3165: LD_ADDR_OWVAR 20
3169: PUSH
3170: LD_VAR 0 1
3174: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: LD_EXP 37
3184: PUSH
3185: LD_VAR 0 3
3189: ARRAY
3190: PUSH
3191: LD_INT 1
3193: ARRAY
3194: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3195: LD_ADDR_VAR 0 5
3199: PUSH
3200: LD_EXP 37
3204: PUSH
3205: LD_VAR 0 3
3209: ARRAY
3210: PUSH
3211: LD_INT 2
3213: ARRAY
3214: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3215: LD_ADDR_VAR 0 6
3219: PUSH
3220: LD_EXP 37
3224: PUSH
3225: LD_VAR 0 3
3229: ARRAY
3230: PUSH
3231: LD_INT 3
3233: ARRAY
3234: ST_TO_ADDR
// if is_depot then
3235: LD_EXP 17
3239: IFFALSE 3372
// begin bc_type = b_depot ;
3241: LD_ADDR_OWVAR 42
3245: PUSH
3246: LD_INT 0
3248: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3249: LD_ADDR_VAR 0 10
3253: PUSH
3254: LD_VAR 0 4
3258: PPUSH
3259: LD_VAR 0 5
3263: PPUSH
3264: LD_VAR 0 6
3268: PPUSH
3269: CALL_OW 47
3273: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3274: LD_VAR 0 10
3278: PPUSH
3279: LD_STRING @
3281: PUSH
3282: LD_VAR 0 1
3286: STR
3287: PPUSH
3288: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3292: LD_VAR 0 10
3296: PPUSH
3297: CALL_OW 274
3301: PPUSH
3302: LD_INT 1
3304: PPUSH
3305: LD_EXP 22
3309: PUSH
3310: LD_INT 1
3312: ARRAY
3313: PPUSH
3314: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3318: LD_VAR 0 10
3322: PPUSH
3323: CALL_OW 274
3327: PPUSH
3328: LD_INT 2
3330: PPUSH
3331: LD_EXP 22
3335: PUSH
3336: LD_INT 2
3338: ARRAY
3339: PPUSH
3340: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3344: LD_VAR 0 10
3348: PPUSH
3349: CALL_OW 274
3353: PPUSH
3354: LD_INT 3
3356: PPUSH
3357: LD_EXP 22
3361: PUSH
3362: LD_INT 3
3364: ARRAY
3365: PPUSH
3366: CALL_OW 277
// end else
3370: GO 3516
// begin for i := 1 to 3 do
3372: LD_ADDR_VAR 0 7
3376: PUSH
3377: DOUBLE
3378: LD_INT 1
3380: DEC
3381: ST_TO_ADDR
3382: LD_INT 3
3384: PUSH
3385: FOR_TO
3386: IFFALSE 3514
// begin r := starting_resources [ i ] ;
3388: LD_ADDR_VAR 0 8
3392: PUSH
3393: LD_EXP 22
3397: PUSH
3398: LD_VAR 0 7
3402: ARRAY
3403: ST_TO_ADDR
// while r >= 10 do
3404: LD_VAR 0 8
3408: PUSH
3409: LD_INT 10
3411: GREATEREQUAL
3412: IFFALSE 3512
// if r > 50 then
3414: LD_VAR 0 8
3418: PUSH
3419: LD_INT 50
3421: GREATER
3422: IFFALSE 3468
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3424: LD_VAR 0 7
3428: PPUSH
3429: LD_INT 5
3431: PPUSH
3432: LD_VAR 0 4
3436: PPUSH
3437: LD_VAR 0 5
3441: PPUSH
3442: LD_INT 4
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 60
// r := r - 50 ;
3452: LD_ADDR_VAR 0 8
3456: PUSH
3457: LD_VAR 0 8
3461: PUSH
3462: LD_INT 50
3464: MINUS
3465: ST_TO_ADDR
// end else
3466: GO 3510
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3468: LD_VAR 0 7
3472: PPUSH
3473: LD_VAR 0 8
3477: PUSH
3478: LD_INT 10
3480: DIV
3481: PPUSH
3482: LD_VAR 0 4
3486: PPUSH
3487: LD_VAR 0 5
3491: PPUSH
3492: LD_INT 4
3494: PPUSH
3495: LD_INT 0
3497: PPUSH
3498: CALL_OW 60
// r := 0 ;
3502: LD_ADDR_VAR 0 8
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
// end ;
3510: GO 3404
// end ;
3512: GO 3385
3514: POP
3515: POP
// end ; for r in starting_crates do
3516: LD_ADDR_VAR 0 8
3520: PUSH
3521: LD_EXP 21
3525: PUSH
3526: FOR_IN
3527: IFFALSE 3559
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3529: LD_INT 1
3531: PPUSH
3532: LD_INT 5
3534: PPUSH
3535: LD_VAR 0 4
3539: PPUSH
3540: LD_VAR 0 5
3544: PPUSH
3545: LD_VAR 0 8
3549: PPUSH
3550: LD_INT 0
3552: PPUSH
3553: CALL_OW 60
3557: GO 3526
3559: POP
3560: POP
// if def_morale_flags then
3561: LD_EXP 9
3565: IFFALSE 3704
// begin x := start_def [ pos ] [ 1 ] ;
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: LD_EXP 39
3576: PUSH
3577: LD_VAR 0 3
3581: ARRAY
3582: PUSH
3583: LD_INT 1
3585: ARRAY
3586: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3587: LD_ADDR_VAR 0 5
3591: PUSH
3592: LD_EXP 39
3596: PUSH
3597: LD_VAR 0 3
3601: ARRAY
3602: PUSH
3603: LD_INT 2
3605: ARRAY
3606: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3607: LD_VAR 0 4
3611: PPUSH
3612: LD_VAR 0 5
3616: PPUSH
3617: LD_INT 12
3619: PPUSH
3620: LD_INT 2
3622: PPUSH
3623: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3627: LD_ADDR_EXP 44
3631: PUSH
3632: LD_EXP 44
3636: PUSH
3637: LD_VAR 0 1
3641: PPUSH
3642: LD_VAR 0 4
3646: PPUSH
3647: LD_VAR 0 5
3651: PPUSH
3652: LD_INT 1
3654: PUSH
3655: LD_INT 100
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: LD_INT 2
3664: PUSH
3665: LD_INT 50
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 3
3674: PUSH
3675: LD_INT 20
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: LD_INT 20
3684: PUSH
3685: LD_INT 100
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: PPUSH
3698: CALL_OW 418
3702: ADD
3703: ST_TO_ADDR
// end ; commander := true ;
3704: LD_ADDR_LOC 1
3708: PUSH
3709: LD_INT 1
3711: ST_TO_ADDR
// soldiers_created := 0 ;
3712: LD_ADDR_LOC 4
3716: PUSH
3717: LD_INT 0
3719: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3720: LD_ADDR_VAR 0 7
3724: PUSH
3725: DOUBLE
3726: LD_INT 1
3728: DEC
3729: ST_TO_ADDR
3730: LD_EXP 18
3734: PUSH
3735: FOR_TO
3736: IFFALSE 3889
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3738: LD_ADDR_VAR 0 4
3742: PUSH
3743: LD_EXP 38
3747: PUSH
3748: LD_VAR 0 3
3752: ARRAY
3753: PUSH
3754: LD_VAR 0 7
3758: ARRAY
3759: PUSH
3760: LD_INT 1
3762: ARRAY
3763: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3764: LD_ADDR_VAR 0 5
3768: PUSH
3769: LD_EXP 38
3773: PUSH
3774: LD_VAR 0 3
3778: ARRAY
3779: PUSH
3780: LD_VAR 0 7
3784: ARRAY
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3790: LD_ADDR_VAR 0 6
3794: PUSH
3795: LD_EXP 38
3799: PUSH
3800: LD_VAR 0 3
3804: ARRAY
3805: PUSH
3806: LD_VAR 0 7
3810: ARRAY
3811: PUSH
3812: LD_INT 3
3814: ARRAY
3815: ST_TO_ADDR
// bc_type := b_breastwork ;
3816: LD_ADDR_OWVAR 42
3820: PUSH
3821: LD_INT 31
3823: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3824: LD_ADDR_VAR 0 9
3828: PUSH
3829: LD_VAR 0 4
3833: PPUSH
3834: LD_VAR 0 5
3838: PPUSH
3839: LD_VAR 0 6
3843: PPUSH
3844: CALL_OW 47
3848: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3849: LD_INT 1
3851: PPUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_INT 0
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: LD_INT 0
3863: PPUSH
3864: LD_VAR 0 9
3868: PPUSH
3869: CALL 2488 0 6
// soldiers_created := soldiers_created + 1 ;
3873: LD_ADDR_LOC 4
3877: PUSH
3878: LD_LOC 4
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ST_TO_ADDR
// end ;
3887: GO 3735
3889: POP
3890: POP
// x := start_def [ pos ] [ 1 ] ;
3891: LD_ADDR_VAR 0 4
3895: PUSH
3896: LD_EXP 39
3900: PUSH
3901: LD_VAR 0 3
3905: ARRAY
3906: PUSH
3907: LD_INT 1
3909: ARRAY
3910: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3911: LD_ADDR_VAR 0 5
3915: PUSH
3916: LD_EXP 39
3920: PUSH
3921: LD_VAR 0 3
3925: ARRAY
3926: PUSH
3927: LD_INT 2
3929: ARRAY
3930: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3931: LD_LOC 8
3935: PUSH
3936: LD_EXP 18
3940: MINUS
3941: PPUSH
3942: LD_INT 1
3944: PPUSH
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_VAR 0 5
3954: PPUSH
3955: LD_INT 5
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL 2488 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3965: LD_LOC 5
3969: PPUSH
3970: LD_INT 2
3972: PPUSH
3973: LD_VAR 0 4
3977: PPUSH
3978: LD_VAR 0 5
3982: PPUSH
3983: LD_INT 5
3985: PPUSH
3986: LD_INT 0
3988: PPUSH
3989: CALL 2488 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3993: LD_LOC 7
3997: PPUSH
3998: LD_INT 3
4000: PPUSH
4001: LD_VAR 0 4
4005: PPUSH
4006: LD_VAR 0 5
4010: PPUSH
4011: LD_INT 5
4013: PPUSH
4014: LD_INT 0
4016: PPUSH
4017: CALL 2488 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4021: LD_LOC 6
4025: PPUSH
4026: LD_INT 4
4028: PPUSH
4029: LD_VAR 0 4
4033: PPUSH
4034: LD_VAR 0 5
4038: PPUSH
4039: LD_INT 5
4041: PPUSH
4042: LD_INT 0
4044: PPUSH
4045: CALL 2488 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4049: LD_EXP 10
4053: PUSH
4054: LD_INT 20
4056: PPUSH
4057: LD_VAR 0 1
4061: PPUSH
4062: CALL_OW 321
4066: PUSH
4067: LD_INT 1
4069: EQUAL
4070: AND
4071: IFFALSE 4088
// SetTech ( tech_SibDet , side , state_researched ) ;
4073: LD_INT 20
4075: PPUSH
4076: LD_VAR 0 1
4080: PPUSH
4081: LD_INT 2
4083: PPUSH
4084: CALL_OW 322
// if def_siberite_bomb = 1 then
4088: LD_EXP 13
4092: PUSH
4093: LD_INT 1
4095: EQUAL
4096: IFFALSE 4130
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4098: LD_INT 25
4100: PPUSH
4101: LD_VAR 0 1
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4113: LD_INT 73
4115: PPUSH
4116: LD_VAR 0 1
4120: PPUSH
4121: LD_INT 1
4123: PPUSH
4124: CALL_OW 322
// end else
4128: GO 4160
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4130: LD_INT 25
4132: PPUSH
4133: LD_VAR 0 1
4137: PPUSH
4138: LD_INT 0
4140: PPUSH
4141: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4145: LD_INT 73
4147: PPUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: LD_INT 0
4155: PPUSH
4156: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4160: LD_INT 24
4162: PPUSH
4163: LD_VAR 0 1
4167: PPUSH
4168: LD_INT 0
4170: PPUSH
4171: CALL_OW 322
// global_defined := true ;
4175: LD_ADDR_LOC 3
4179: PUSH
4180: LD_INT 1
4182: ST_TO_ADDR
// end ;
4183: LD_VAR 0 2
4187: RET
// function prepare_sides ; var i ; begin
4188: LD_INT 0
4190: PPUSH
4191: PPUSH
// global_units := [ ] ;
4192: LD_ADDR_LOC 2
4196: PUSH
4197: EMPTY
4198: ST_TO_ADDR
// global_defined := false ;
4199: LD_ADDR_LOC 3
4203: PUSH
4204: LD_INT 0
4206: ST_TO_ADDR
// CountClassMembers ;
4207: CALL 4257 0 0
// for i := 1 to 8 do
4211: LD_ADDR_VAR 0 2
4215: PUSH
4216: DOUBLE
4217: LD_INT 1
4219: DEC
4220: ST_TO_ADDR
4221: LD_INT 8
4223: PUSH
4224: FOR_TO
4225: IFFALSE 4250
// if Side_Positions [ i ] then
4227: LD_EXP 34
4231: PUSH
4232: LD_VAR 0 2
4236: ARRAY
4237: IFFALSE 4248
// prepare_side ( i ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: CALL 3103 0 1
4248: GO 4224
4250: POP
4251: POP
// end ;
4252: LD_VAR 0 1
4256: RET
// function CountClassMembers ; var Mode ; begin
4257: LD_INT 0
4259: PPUSH
4260: PPUSH
// if No_Mechs then
4261: LD_EXP 15
4265: IFFALSE 4277
// Mode := 2 else
4267: LD_ADDR_VAR 0 2
4271: PUSH
4272: LD_INT 2
4274: ST_TO_ADDR
4275: GO 4285
// Mode := 1 ;
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: LD_INT 1
4284: ST_TO_ADDR
// neng := number_of_people ;
4285: LD_ADDR_LOC 5
4289: PUSH
4290: LD_EXP 19
4294: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4295: LD_ADDR_LOC 8
4299: PUSH
4300: LD_LOC 5
4304: PUSH
4305: LD_INT 4
4307: PUSH
4308: LD_INT 3
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: LD_VAR 0 2
4319: ARRAY
4320: DIV
4321: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4322: LD_LOC 8
4326: PUSH
4327: LD_EXP 18
4331: LESS
4332: IFFALSE 4344
// nsol := number_of_breastworks ;
4334: LD_ADDR_LOC 8
4338: PUSH
4339: LD_EXP 18
4343: ST_TO_ADDR
// neng := neng - nsol ;
4344: LD_ADDR_LOC 5
4348: PUSH
4349: LD_LOC 5
4353: PUSH
4354: LD_LOC 8
4358: MINUS
4359: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4360: LD_ADDR_LOC 6
4364: PUSH
4365: LD_LOC 5
4369: PUSH
4370: LD_INT 3
4372: PUSH
4373: LD_INT 2
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: LD_VAR 0 2
4384: ARRAY
4385: DIV
4386: ST_TO_ADDR
// if ( nsci < 1 ) then
4387: LD_LOC 6
4391: PUSH
4392: LD_INT 1
4394: LESS
4395: IFFALSE 4405
// nsci := 1 ;
4397: LD_ADDR_LOC 6
4401: PUSH
4402: LD_INT 1
4404: ST_TO_ADDR
// neng := neng - nsci ;
4405: LD_ADDR_LOC 5
4409: PUSH
4410: LD_LOC 5
4414: PUSH
4415: LD_LOC 6
4419: MINUS
4420: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4421: LD_ADDR_LOC 7
4425: PUSH
4426: LD_LOC 5
4430: PUSH
4431: LD_INT 2
4433: DIV
4434: PUSH
4435: LD_INT 0
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: LD_VAR 0 2
4446: ARRAY
4447: ST_TO_ADDR
// neng := neng - nmech ;
4448: LD_ADDR_LOC 5
4452: PUSH
4453: LD_LOC 5
4457: PUSH
4458: LD_LOC 7
4462: MINUS
4463: ST_TO_ADDR
// if ( neng < 1 ) then
4464: LD_LOC 5
4468: PUSH
4469: LD_INT 1
4471: LESS
4472: IFFALSE 4482
// neng := 1 ;
4474: LD_ADDR_LOC 5
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// end ;
4482: LD_VAR 0 1
4486: RET
// starting begin disable ( 98 ) ;
4487: LD_INT 98
4489: DISABLE_MARKED
// disable ( 99 ) ;
4490: LD_INT 99
4492: DISABLE_MARKED
// disable ( 400 ) ;
4493: LD_INT 400
4495: DISABLE_MARKED
// disable ( 401 ) ;
4496: LD_INT 401
4498: DISABLE_MARKED
// mp_selectmsg := true ;
4499: LD_ADDR_OWVAR 13
4503: PUSH
4504: LD_INT 1
4506: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4507: CALL 68 0 0
// init_map ;
4511: CALL 1215 0 0
// init_respawning ;
4515: CALL 13469 0 0
// set_shared_visions_and_alliances ;
4519: CALL 2200 0 0
// ResetFog ;
4523: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4527: LD_OWVAR 2
4531: PPUSH
4532: CALL_OW 520
// AnimateTrees ( true ) ;
4536: LD_INT 1
4538: PPUSH
4539: CALL_OW 573
// prepare_sides ;
4543: CALL 4188 0 0
// Init_Win_Condition ;
4547: CALL 7450 0 0
// ShowTimer ;
4551: CALL 7028 0 0
// music_nat := Side_Nations [ your_side ] ;
4555: LD_ADDR_OWVAR 71
4559: PUSH
4560: LD_EXP 35
4564: PUSH
4565: LD_OWVAR 2
4569: ARRAY
4570: ST_TO_ADDR
// if IAmSpec then
4571: CALL_OW 531
4575: IFFALSE 4599
// begin fogoff ( true ) ;
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4584: LD_INT 130
4586: PPUSH
4587: LD_INT 100
4589: PPUSH
4590: CALL_OW 86
// enable ( 400 ) ;
4594: LD_INT 400
4596: ENABLE_MARKED
// end else
4597: GO 4645
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4599: LD_EXP 39
4603: PUSH
4604: LD_EXP 34
4608: PUSH
4609: LD_OWVAR 2
4613: ARRAY
4614: ARRAY
4615: PUSH
4616: LD_INT 1
4618: ARRAY
4619: PPUSH
4620: LD_EXP 39
4624: PUSH
4625: LD_EXP 34
4629: PUSH
4630: LD_OWVAR 2
4634: ARRAY
4635: ARRAY
4636: PUSH
4637: LD_INT 2
4639: ARRAY
4640: PPUSH
4641: CALL_OW 86
// end ; InitApeman ;
4645: CALL 5566 0 0
// BuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
4649: LD_ADDR_EXP 55
4653: PUSH
4654: LD_INT 7
4656: PUSH
4657: LD_INT 8
4659: PUSH
4660: LD_INT 9
4662: PUSH
4663: LD_INT 10
4665: PUSH
4666: LD_INT 11
4668: PUSH
4669: LD_INT 12
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: ST_TO_ADDR
// BeginBuildUp ;
4680: CALL 13963 0 0
// end ;
4684: END
// every 0 0$1 do
4685: GO 4687
4687: DISABLE
// if ( def_siberite_bomb > 1 ) then
4688: LD_EXP 13
4692: PUSH
4693: LD_INT 1
4695: GREATER
4696: IFFALSE 4711
// begin wait ( siberite_bomb_Delay ) ;
4698: LD_EXP 29
4702: PPUSH
4703: CALL_OW 67
// EnableSibFiss ;
4707: CALL 4712 0 0
// end ;
4711: END
// function EnableSibFiss ; var i ; begin
4712: LD_INT 0
4714: PPUSH
4715: PPUSH
// for i := 1 to 8 do
4716: LD_ADDR_VAR 0 2
4720: PUSH
4721: DOUBLE
4722: LD_INT 1
4724: DEC
4725: ST_TO_ADDR
4726: LD_INT 8
4728: PUSH
4729: FOR_TO
4730: IFFALSE 4776
// if Side_Positions [ i ] then
4732: LD_EXP 34
4736: PUSH
4737: LD_VAR 0 2
4741: ARRAY
4742: IFFALSE 4774
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4744: LD_INT 25
4746: PPUSH
4747: LD_VAR 0 2
4751: PPUSH
4752: LD_INT 1
4754: PPUSH
4755: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4759: LD_INT 73
4761: PPUSH
4762: LD_VAR 0 2
4766: PPUSH
4767: LD_INT 1
4769: PPUSH
4770: CALL_OW 322
// end ;
4774: GO 4729
4776: POP
4777: POP
// end ; end_of_file
4778: LD_VAR 0 1
4782: RET
// every 0 0$25 + 0 0$1.0 do
4783: GO 4785
4785: DISABLE
// begin if GetResourceArea ( Center1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4786: LD_INT 13
4788: PPUSH
4789: LD_INT 1
4791: PPUSH
4792: CALL_OW 287
4796: PUSH
4797: LD_INT 200
4799: PUSH
4800: LD_EXP 23
4804: MINUS
4805: PUSH
4806: LD_INT 25
4808: DIVREAL
4809: PUSH
4810: LD_INT 5
4812: MUL
4813: LESS
4814: IFFALSE 4829
// CreateCratesArea ( 5 , Center1 , true ) ;
4816: LD_INT 5
4818: PPUSH
4819: LD_INT 13
4821: PPUSH
4822: LD_INT 1
4824: PPUSH
4825: CALL_OW 55
// if GetResourceArea ( Center2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4829: LD_INT 14
4831: PPUSH
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 287
4839: PUSH
4840: LD_INT 200
4842: PUSH
4843: LD_EXP 23
4847: MINUS
4848: PUSH
4849: LD_INT 25
4851: DIVREAL
4852: PUSH
4853: LD_INT 5
4855: MUL
4856: LESS
4857: IFFALSE 4872
// CreateCratesArea ( 5 , Center2 , true ) ;
4859: LD_INT 5
4861: PPUSH
4862: LD_INT 14
4864: PPUSH
4865: LD_INT 1
4867: PPUSH
4868: CALL_OW 55
// if GetResourceArea ( Center3 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4872: LD_INT 15
4874: PPUSH
4875: LD_INT 1
4877: PPUSH
4878: CALL_OW 287
4882: PUSH
4883: LD_INT 200
4885: PUSH
4886: LD_EXP 23
4890: MINUS
4891: PUSH
4892: LD_INT 25
4894: DIVREAL
4895: PUSH
4896: LD_INT 5
4898: MUL
4899: LESS
4900: IFFALSE 4915
// CreateCratesArea ( 5 , Center3 , true ) ;
4902: LD_INT 5
4904: PPUSH
4905: LD_INT 15
4907: PPUSH
4908: LD_INT 1
4910: PPUSH
4911: CALL_OW 55
// CreateCratesArea ( 5 , BuildUpEscape , true ) ;
4915: LD_INT 5
4917: PPUSH
4918: LD_INT 16
4920: PPUSH
4921: LD_INT 1
4923: PPUSH
4924: CALL_OW 55
// enable ;
4928: ENABLE
// end ;
4929: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4930: GO 4932
4932: DISABLE
4933: LD_INT 0
4935: PPUSH
4936: PPUSH
// begin case tick of 1 .. 1 1$0 :
4937: LD_OWVAR 1
4941: PUSH
4942: LD_INT 1
4944: DOUBLE
4945: GREATEREQUAL
4946: IFFALSE 4954
4948: LD_INT 2100
4950: DOUBLE
4951: LESSEQUAL
4952: IFTRUE 4956
4954: GO 4984
4956: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4957: LD_EXP 23
4961: PUSH
4962: LD_INT 100
4964: DIVREAL
4965: PUSH
4966: LD_INT 525
4968: PPUSH
4969: LD_INT 1050
4971: PPUSH
4972: CALL_OW 12
4976: MUL
4977: PPUSH
4978: CALL_OW 67
4982: GO 5286
4984: LD_INT 2100
4986: PUSH
4987: LD_INT 1
4989: PLUS
4990: DOUBLE
4991: GREATEREQUAL
4992: IFFALSE 5000
4994: LD_INT 10500
4996: DOUBLE
4997: LESSEQUAL
4998: IFTRUE 5002
5000: GO 5030
5002: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5003: LD_EXP 23
5007: PUSH
5008: LD_INT 100
5010: DIVREAL
5011: PUSH
5012: LD_INT 1050
5014: PPUSH
5015: LD_INT 1750
5017: PPUSH
5018: CALL_OW 12
5022: MUL
5023: PPUSH
5024: CALL_OW 67
5028: GO 5286
5030: LD_INT 10500
5032: PUSH
5033: LD_INT 1
5035: PLUS
5036: DOUBLE
5037: GREATEREQUAL
5038: IFFALSE 5046
5040: LD_INT 21000
5042: DOUBLE
5043: LESSEQUAL
5044: IFTRUE 5048
5046: GO 5076
5048: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5049: LD_EXP 23
5053: PUSH
5054: LD_INT 100
5056: DIVREAL
5057: PUSH
5058: LD_INT 1750
5060: PPUSH
5061: LD_INT 2100
5063: PPUSH
5064: CALL_OW 12
5068: MUL
5069: PPUSH
5070: CALL_OW 67
5074: GO 5286
5076: LD_INT 21000
5078: PUSH
5079: LD_INT 1
5081: PLUS
5082: DOUBLE
5083: GREATEREQUAL
5084: IFFALSE 5092
5086: LD_INT 42000
5088: DOUBLE
5089: LESSEQUAL
5090: IFTRUE 5094
5092: GO 5122
5094: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5095: LD_EXP 23
5099: PUSH
5100: LD_INT 100
5102: DIVREAL
5103: PUSH
5104: LD_INT 2100
5106: PPUSH
5107: LD_INT 2275
5109: PPUSH
5110: CALL_OW 12
5114: MUL
5115: PPUSH
5116: CALL_OW 67
5120: GO 5286
5122: LD_INT 42000
5124: PUSH
5125: LD_INT 1
5127: PLUS
5128: DOUBLE
5129: GREATEREQUAL
5130: IFFALSE 5138
5132: LD_INT 63000
5134: DOUBLE
5135: LESSEQUAL
5136: IFTRUE 5140
5138: GO 5168
5140: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5141: LD_EXP 23
5145: PUSH
5146: LD_INT 100
5148: DIVREAL
5149: PUSH
5150: LD_INT 2275
5152: PPUSH
5153: LD_INT 2450
5155: PPUSH
5156: CALL_OW 12
5160: MUL
5161: PPUSH
5162: CALL_OW 67
5166: GO 5286
5168: LD_INT 63000
5170: PUSH
5171: LD_INT 1
5173: PLUS
5174: DOUBLE
5175: GREATEREQUAL
5176: IFFALSE 5184
5178: LD_INT 105000
5180: DOUBLE
5181: LESSEQUAL
5182: IFTRUE 5186
5184: GO 5214
5186: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5187: LD_EXP 23
5191: PUSH
5192: LD_INT 100
5194: DIVREAL
5195: PUSH
5196: LD_INT 2450
5198: PPUSH
5199: LD_INT 2800
5201: PPUSH
5202: CALL_OW 12
5206: MUL
5207: PPUSH
5208: CALL_OW 67
5212: GO 5286
5214: LD_INT 105000
5216: PUSH
5217: LD_INT 1
5219: PLUS
5220: DOUBLE
5221: GREATEREQUAL
5222: IFFALSE 5230
5224: LD_INT 630000
5226: DOUBLE
5227: LESSEQUAL
5228: IFTRUE 5232
5230: GO 5260
5232: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5233: LD_EXP 23
5237: PUSH
5238: LD_INT 100
5240: DIVREAL
5241: PUSH
5242: LD_INT 2800
5244: PPUSH
5245: LD_INT 3500
5247: PPUSH
5248: CALL_OW 12
5252: MUL
5253: PPUSH
5254: CALL_OW 67
5258: GO 5286
5260: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5261: LD_EXP 23
5265: PUSH
5266: LD_INT 100
5268: DIVREAL
5269: PUSH
5270: LD_INT 3500
5272: PPUSH
5273: LD_INT 3850
5275: PPUSH
5276: CALL_OW 12
5280: MUL
5281: PPUSH
5282: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5286: LD_ADDR_VAR 0 2
5290: PUSH
5291: LD_INT 3
5293: PPUSH
5294: LD_INT 5
5296: PPUSH
5297: CALL_OW 12
5301: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5302: LD_ADDR_VAR 0 1
5306: PUSH
5307: LD_EXP 34
5311: PUSH
5312: LD_INT 0
5314: PUSH
5315: EMPTY
5316: LIST
5317: DIFF
5318: PUSH
5319: FOR_IN
5320: IFFALSE 5369
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5322: LD_VAR 0 2
5326: PPUSH
5327: LD_EXP 39
5331: PUSH
5332: LD_VAR 0 1
5336: ARRAY
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: LD_EXP 39
5346: PUSH
5347: LD_VAR 0 1
5351: ARRAY
5352: PUSH
5353: LD_INT 2
5355: ARRAY
5356: PPUSH
5357: LD_INT 20
5359: PPUSH
5360: LD_INT 1
5362: PPUSH
5363: CALL_OW 56
5367: GO 5319
5369: POP
5370: POP
// enable ;
5371: ENABLE
// end ; end_of_file
5372: PPOPN 2
5374: END
// every 20 20$00 trigger apemanNumber do
5375: LD_EXP 46
5379: IFFALSE 5412
5381: GO 5383
5383: DISABLE
// begin enable ;
5384: ENABLE
// if apeLevel >= 8 then
5385: LD_EXP 51
5389: PUSH
5390: LD_INT 8
5392: GREATEREQUAL
5393: IFFALSE 5398
// disable else
5395: DISABLE
5396: GO 5412
// apeLevel := apeLevel + 1 ;
5398: LD_ADDR_EXP 51
5402: PUSH
5403: LD_EXP 51
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: ST_TO_ADDR
// end ;
5412: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5413: LD_EXP 46
5417: PUSH
5418: LD_EXP 47
5422: LESS
5423: IFFALSE 5563
5425: GO 5427
5427: DISABLE
5428: LD_INT 0
5430: PPUSH
5431: PPUSH
5432: PPUSH
5433: PPUSH
// begin enable ;
5434: ENABLE
// for i := 1 to apemanPos do
5435: LD_ADDR_VAR 0 1
5439: PUSH
5440: DOUBLE
5441: LD_INT 1
5443: DEC
5444: ST_TO_ADDR
5445: LD_EXP 49
5449: PUSH
5450: FOR_TO
5451: IFFALSE 5561
// begin if apemanPlayerCount [ i ] then
5453: LD_EXP 50
5457: PUSH
5458: LD_VAR 0 1
5462: ARRAY
5463: IFFALSE 5559
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5465: LD_EXP 50
5469: PUSH
5470: LD_VAR 0 1
5474: ARRAY
5475: PUSH
5476: LD_EXP 49
5480: PUSH
5481: LD_VAR 0 1
5485: ARRAY
5486: GREATER
5487: IFFALSE 5559
// begin ape := PrepareApeman ;
5489: LD_ADDR_VAR 0 2
5493: PUSH
5494: CALL 6074 0 0
5498: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5499: LD_VAR 0 2
5503: PPUSH
5504: LD_EXP 52
5508: PUSH
5509: LD_VAR 0 1
5513: ARRAY
5514: PPUSH
5515: LD_INT 0
5517: PPUSH
5518: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5522: LD_ADDR_EXP 49
5526: PUSH
5527: LD_EXP 49
5531: PPUSH
5532: LD_VAR 0 1
5536: PPUSH
5537: LD_EXP 49
5541: PUSH
5542: LD_VAR 0 1
5546: ARRAY
5547: PUSH
5548: LD_VAR 0 2
5552: UNION
5553: PPUSH
5554: CALL_OW 1
5558: ST_TO_ADDR
// end ; end ; end ;
5559: GO 5450
5561: POP
5562: POP
// end ;
5563: PPOPN 4
5565: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
5570: PPUSH
5571: PPUSH
5572: PPUSH
5573: PPUSH
5574: PPUSH
// playersAmount := 0 ;
5575: LD_ADDR_VAR 0 3
5579: PUSH
5580: LD_INT 0
5582: ST_TO_ADDR
// _apeAreas := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 , ] ;
5583: LD_ADDR_VAR 0 7
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: LD_INT 2
5593: PUSH
5594: LD_INT 3
5596: PUSH
5597: LD_INT 4
5599: PUSH
5600: LD_INT 5
5602: PUSH
5603: LD_INT 6
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5614: LD_ADDR_EXP 52
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: LD_INT 0
5624: PUSH
5625: LD_INT 0
5627: PUSH
5628: LD_INT 0
5630: PUSH
5631: LD_INT 0
5633: PUSH
5634: LD_INT 0
5636: PUSH
5637: LD_INT 0
5639: PUSH
5640: LD_INT 0
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: ST_TO_ADDR
// for j = 1 to Side_Positions do
5653: LD_ADDR_VAR 0 4
5657: PUSH
5658: DOUBLE
5659: LD_INT 1
5661: DEC
5662: ST_TO_ADDR
5663: LD_EXP 34
5667: PUSH
5668: FOR_TO
5669: IFFALSE 5736
// if Side_Positions [ j ] then
5671: LD_EXP 34
5675: PUSH
5676: LD_VAR 0 4
5680: ARRAY
5681: IFFALSE 5734
// begin playersAmount := playersAmount + 1 ;
5683: LD_ADDR_VAR 0 3
5687: PUSH
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 1
5695: PLUS
5696: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5697: LD_ADDR_EXP 52
5701: PUSH
5702: LD_EXP 52
5706: PPUSH
5707: LD_VAR 0 4
5711: PPUSH
5712: LD_VAR 0 7
5716: PUSH
5717: LD_EXP 34
5721: PUSH
5722: LD_VAR 0 4
5726: ARRAY
5727: ARRAY
5728: PPUSH
5729: CALL_OW 1
5733: ST_TO_ADDR
// end ;
5734: GO 5668
5736: POP
5737: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5738: LD_ADDR_EXP 48
5742: PUSH
5743: LD_INT 3
5745: PUSH
5746: LD_EXP 25
5750: MUL
5751: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5752: LD_ADDR_EXP 46
5756: PUSH
5757: LD_VAR 0 3
5761: PUSH
5762: LD_EXP 48
5766: MUL
5767: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5768: LD_ADDR_EXP 47
5772: PUSH
5773: LD_EXP 46
5777: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5778: LD_ADDR_EXP 49
5782: PUSH
5783: LD_INT 0
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: LD_INT 0
5791: PUSH
5792: LD_INT 0
5794: PUSH
5795: LD_INT 0
5797: PUSH
5798: LD_INT 0
5800: PUSH
5801: LD_INT 0
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5817: LD_ADDR_EXP 50
5821: PUSH
5822: LD_INT 0
5824: PUSH
5825: LD_INT 0
5827: PUSH
5828: LD_INT 0
5830: PUSH
5831: LD_INT 0
5833: PUSH
5834: LD_INT 0
5836: PUSH
5837: LD_INT 0
5839: PUSH
5840: LD_INT 0
5842: PUSH
5843: LD_INT 0
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: ST_TO_ADDR
// apeLevel := 1 ;
5856: LD_ADDR_EXP 51
5860: PUSH
5861: LD_INT 1
5863: ST_TO_ADDR
// if not apemanNumber then
5864: LD_EXP 46
5868: NOT
5869: IFFALSE 5873
// exit ;
5871: GO 6069
// for i := 1 to apemanPerPlayer do
5873: LD_ADDR_VAR 0 2
5877: PUSH
5878: DOUBLE
5879: LD_INT 1
5881: DEC
5882: ST_TO_ADDR
5883: LD_EXP 48
5887: PUSH
5888: FOR_TO
5889: IFFALSE 6067
// begin for j := 1 to Side_Positions do
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_EXP 34
5905: PUSH
5906: FOR_TO
5907: IFFALSE 6063
// if Side_Positions [ j ] then
5909: LD_EXP 34
5913: PUSH
5914: LD_VAR 0 4
5918: ARRAY
5919: IFFALSE 6061
// begin pos := Side_Positions [ j ] ;
5921: LD_ADDR_VAR 0 6
5925: PUSH
5926: LD_EXP 34
5930: PUSH
5931: LD_VAR 0 4
5935: ARRAY
5936: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5937: LD_ADDR_EXP 50
5941: PUSH
5942: LD_EXP 50
5946: PPUSH
5947: LD_VAR 0 4
5951: PPUSH
5952: LD_EXP 50
5956: PUSH
5957: LD_VAR 0 4
5961: ARRAY
5962: PUSH
5963: LD_INT 1
5965: PLUS
5966: PPUSH
5967: CALL_OW 1
5971: ST_TO_ADDR
// ape := PrepareApeman ;
5972: LD_ADDR_VAR 0 5
5976: PUSH
5977: CALL 6074 0 0
5981: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5982: LD_ADDR_EXP 49
5986: PUSH
5987: LD_EXP 49
5991: PPUSH
5992: LD_VAR 0 4
5996: PPUSH
5997: LD_EXP 49
6001: PUSH
6002: LD_VAR 0 4
6006: ARRAY
6007: PPUSH
6008: LD_EXP 49
6012: PUSH
6013: LD_VAR 0 4
6017: ARRAY
6018: PUSH
6019: LD_INT 1
6021: PLUS
6022: PPUSH
6023: LD_VAR 0 5
6027: PPUSH
6028: CALL_OW 1
6032: PPUSH
6033: CALL_OW 1
6037: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6038: LD_VAR 0 5
6042: PPUSH
6043: LD_EXP 52
6047: PUSH
6048: LD_VAR 0 4
6052: ARRAY
6053: PPUSH
6054: LD_INT 0
6056: PPUSH
6057: CALL_OW 49
// end ;
6061: GO 5906
6063: POP
6064: POP
// end ;
6065: GO 5888
6067: POP
6068: POP
// end ;
6069: LD_VAR 0 1
6073: RET
// export function PrepareApeman ; var bonus ; begin
6074: LD_INT 0
6076: PPUSH
6077: PPUSH
// uc_side := 0 ;
6078: LD_ADDR_OWVAR 20
6082: PUSH
6083: LD_INT 0
6085: ST_TO_ADDR
// uc_nation := 0 ;
6086: LD_ADDR_OWVAR 21
6090: PUSH
6091: LD_INT 0
6093: ST_TO_ADDR
// InitHc ;
6094: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6098: LD_ADDR_VAR 0 2
6102: PUSH
6103: LD_INT 1
6105: NEG
6106: PUSH
6107: LD_INT 0
6109: PUSH
6110: LD_INT 1
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 25
6120: PUSH
6121: LD_INT 12
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PPUSH
6128: CALL_OW 69
6132: PUSH
6133: LD_INT 3
6135: MOD
6136: PUSH
6137: LD_INT 1
6139: PLUS
6140: ARRAY
6141: ST_TO_ADDR
// hc_class := class_apeman ;
6142: LD_ADDR_OWVAR 28
6146: PUSH
6147: LD_INT 12
6149: ST_TO_ADDR
// hc_gallery :=  ;
6150: LD_ADDR_OWVAR 33
6154: PUSH
6155: LD_STRING 
6157: ST_TO_ADDR
// hc_name :=  ;
6158: LD_ADDR_OWVAR 26
6162: PUSH
6163: LD_STRING 
6165: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6166: LD_ADDR_OWVAR 31
6170: PUSH
6171: LD_EXP 51
6175: PUSH
6176: LD_VAR 0 2
6180: PLUS
6181: PUSH
6182: LD_EXP 51
6186: PUSH
6187: LD_VAR 0 2
6191: PLUS
6192: PUSH
6193: LD_EXP 51
6197: PUSH
6198: LD_VAR 0 2
6202: PLUS
6203: PUSH
6204: LD_EXP 51
6208: PUSH
6209: LD_VAR 0 2
6213: PLUS
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6221: LD_ADDR_OWVAR 35
6225: PUSH
6226: LD_INT 10
6228: PUSH
6229: LD_VAR 0 2
6233: MUL
6234: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6235: LD_ADDR_OWVAR 29
6239: PUSH
6240: LD_INT 12
6242: PUSH
6243: LD_INT 12
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: ST_TO_ADDR
// result := CreateHuman ;
6250: LD_ADDR_VAR 0 1
6254: PUSH
6255: CALL_OW 44
6259: ST_TO_ADDR
// end ;
6260: LD_VAR 0 1
6264: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
6265: LD_INT 0
6267: PPUSH
6268: PPUSH
6269: PPUSH
// if not ape then
6270: LD_VAR 0 1
6274: NOT
6275: IFFALSE 6279
// exit ;
6277: GO 6382
// for i = 1 to apemanPos do
6279: LD_ADDR_VAR 0 4
6283: PUSH
6284: DOUBLE
6285: LD_INT 1
6287: DEC
6288: ST_TO_ADDR
6289: LD_EXP 49
6293: PUSH
6294: FOR_TO
6295: IFFALSE 6329
// if ape in apemanPos [ i ] then
6297: LD_VAR 0 1
6301: PUSH
6302: LD_EXP 49
6306: PUSH
6307: LD_VAR 0 4
6311: ARRAY
6312: IN
6313: IFFALSE 6327
// begin s := i ;
6315: LD_ADDR_VAR 0 3
6319: PUSH
6320: LD_VAR 0 4
6324: ST_TO_ADDR
// break ;
6325: GO 6329
// end ;
6327: GO 6294
6329: POP
6330: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
6331: LD_ADDR_EXP 49
6335: PUSH
6336: LD_EXP 49
6340: PPUSH
6341: LD_VAR 0 3
6345: PPUSH
6346: LD_EXP 49
6350: PUSH
6351: LD_VAR 0 3
6355: ARRAY
6356: PUSH
6357: LD_VAR 0 1
6361: DIFF
6362: PPUSH
6363: CALL_OW 1
6367: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6368: LD_ADDR_EXP 46
6372: PUSH
6373: LD_EXP 46
6377: PUSH
6378: LD_INT 1
6380: MINUS
6381: ST_TO_ADDR
// end ; end_of_file
6382: LD_VAR 0 2
6386: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6387: LD_VAR 0 1
6391: PPUSH
6392: CALL_OW 266
6396: PUSH
6397: LD_INT 0
6399: PUSH
6400: LD_INT 1
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: IN
6407: IFFALSE 6432
// SetBName ( b , @ & GetSide ( b ) ) ;
6409: LD_VAR 0 1
6413: PPUSH
6414: LD_STRING @
6416: PUSH
6417: LD_VAR 0 1
6421: PPUSH
6422: CALL_OW 255
6426: STR
6427: PPUSH
6428: CALL_OW 500
// end ;
6432: PPOPN 2
6434: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 266
6444: PUSH
6445: LD_INT 0
6447: PUSH
6448: LD_INT 1
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: IN
6455: IFFALSE 6480
// SetBName ( b , @ & GetSide ( b ) ) ;
6457: LD_VAR 0 1
6461: PPUSH
6462: LD_STRING @
6464: PUSH
6465: LD_VAR 0 1
6469: PPUSH
6470: CALL_OW 255
6474: STR
6475: PPUSH
6476: CALL_OW 500
// end ;
6480: PPOPN 3
6482: END
// on VehicleConstructed ( veh , fac ) do var side ;
6483: LD_INT 0
6485: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6486: LD_VAR 0 1
6490: PPUSH
6491: CALL_OW 263
6495: PUSH
6496: LD_INT 5
6498: EQUAL
6499: IFFALSE 6641
// begin side := GetSide ( veh ) ;
6501: LD_ADDR_VAR 0 3
6505: PUSH
6506: LD_VAR 0 1
6510: PPUSH
6511: CALL_OW 255
6515: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6516: LD_ADDR_EXP 49
6520: PUSH
6521: LD_EXP 49
6525: PPUSH
6526: LD_VAR 0 3
6530: PPUSH
6531: LD_EXP 49
6535: PUSH
6536: LD_VAR 0 3
6540: ARRAY
6541: PPUSH
6542: LD_INT 52
6544: PUSH
6545: EMPTY
6546: LIST
6547: PPUSH
6548: CALL_OW 72
6552: PUSH
6553: LD_INT 22
6555: PUSH
6556: LD_VAR 0 3
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 33
6570: PUSH
6571: LD_INT 5
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 25
6580: PUSH
6581: LD_INT 12
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 25
6590: PUSH
6591: LD_INT 15
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: LD_INT 25
6600: PUSH
6601: LD_INT 16
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: PUSH
6608: LD_INT 25
6610: PUSH
6611: LD_INT 17
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PPUSH
6630: CALL_OW 69
6634: UNION
6635: PPUSH
6636: CALL_OW 1
6640: ST_TO_ADDR
// end ; end ;
6641: PPOPN 3
6643: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6644: LD_INT 0
6646: PPUSH
6647: PPUSH
6648: PPUSH
6649: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 257
6659: PUSH
6660: LD_INT 12
6662: PUSH
6663: LD_INT 15
6665: PUSH
6666: LD_INT 17
6668: PUSH
6669: LD_INT 16
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: IN
6678: PUSH
6679: LD_VAR 0 1
6683: PPUSH
6684: CALL_OW 263
6688: PUSH
6689: LD_INT 5
6691: EQUAL
6692: OR
6693: IFFALSE 6704
// ApeKilled ( j ) ;
6695: LD_VAR 0 1
6699: PPUSH
6700: CALL 6265 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6704: LD_VAR 0 1
6708: PPUSH
6709: CALL_OW 266
6713: PUSH
6714: LD_INT 0
6716: PUSH
6717: LD_INT 1
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: IN
6724: IFFALSE 6806
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6726: LD_ADDR_VAR 0 4
6730: PUSH
6731: LD_EXP 34
6735: PUSH
6736: LD_VAR 0 1
6740: PPUSH
6741: CALL_OW 255
6745: ARRAY
6746: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6747: LD_ADDR_VAR 0 2
6751: PUSH
6752: LD_EXP 39
6756: PUSH
6757: LD_VAR 0 4
6761: ARRAY
6762: PUSH
6763: LD_INT 1
6765: ARRAY
6766: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6767: LD_ADDR_VAR 0 3
6771: PUSH
6772: LD_EXP 39
6776: PUSH
6777: LD_VAR 0 4
6781: ARRAY
6782: PUSH
6783: LD_INT 2
6785: ARRAY
6786: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6787: LD_VAR 0 2
6791: PPUSH
6792: LD_VAR 0 3
6796: PPUSH
6797: CALL_OW 420
6801: PPUSH
6802: CALL_OW 419
// end ; end ;
6806: PPOPN 5
6808: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6809: LD_VAR 0 1
6813: PPUSH
6814: LD_VAR 0 2
6818: PPUSH
6819: LD_VAR 0 3
6823: PPUSH
6824: LD_OWVAR 2
6828: PPUSH
6829: CALL 7211 0 4
6833: PPOPN 3
6835: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6836: LD_INT 0
6838: PPUSH
6839: PPUSH
// for un in battle_flags_id do
6840: LD_ADDR_VAR 0 2
6844: PUSH
6845: LD_EXP 44
6849: PUSH
6850: FOR_IN
6851: IFFALSE 6926
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6853: LD_VAR 0 2
6857: PPUSH
6858: LD_INT 1
6860: PUSH
6861: LD_LOC 9
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: LD_LOC 9
6877: PUSH
6878: LD_INT 2
6880: DIV
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 3
6888: PUSH
6889: LD_LOC 9
6893: PUSH
6894: LD_INT 5
6896: DIV
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: LD_INT 20
6904: PUSH
6905: LD_LOC 9
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 423
6924: GO 6850
6926: POP
6927: POP
// end ;
6928: LD_VAR 0 1
6932: RET
// every 1 do var un ;
6933: GO 6935
6935: DISABLE
6936: LD_INT 0
6938: PPUSH
// begin if not def_morale_flags then
6939: LD_EXP 9
6943: NOT
6944: IFFALSE 6948
// exit ;
6946: GO 7025
// if not morale_decreasing_time then
6948: LD_EXP 24
6952: NOT
6953: IFFALSE 6957
// exit ;
6955: GO 7025
// strength = 100 ;
6957: LD_ADDR_LOC 9
6961: PUSH
6962: LD_INT 100
6964: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6965: LD_EXP 24
6969: PPUSH
6970: CALL_OW 67
// strength := strength - 1 ;
6974: LD_ADDR_LOC 9
6978: PUSH
6979: LD_LOC 9
6983: PUSH
6984: LD_INT 1
6986: MINUS
6987: ST_TO_ADDR
// Update_Flags ;
6988: CALL 6836 0 0
// until not strength ;
6992: LD_LOC 9
6996: NOT
6997: IFFALSE 6965
// for un in battle_flags_id do
6999: LD_ADDR_VAR 0 1
7003: PUSH
7004: LD_EXP 44
7008: PUSH
7009: FOR_IN
7010: IFFALSE 7023
// KillBattleFlag ( un ) ;
7012: LD_VAR 0 1
7016: PPUSH
7017: CALL_OW 419
7021: GO 7009
7023: POP
7024: POP
// end ; end_of_file
7025: PPOPN 1
7027: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7028: LD_INT 0
7030: PPUSH
7031: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7032: LD_ADDR_VAR 0 2
7036: PUSH
7037: LD_STRING #Multi1x1-Time
7039: PUSH
7040: LD_OWVAR 1
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: ST_TO_ADDR
// if WaitServerStrings then
7049: LD_EXP 54
7053: IFFALSE 7071
// AllStrings = AllStrings ^ WaitServerStrings ;
7055: LD_ADDR_VAR 0 2
7059: PUSH
7060: LD_VAR 0 2
7064: PUSH
7065: LD_EXP 54
7069: ADD
7070: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7071: LD_INT 0
7073: PUSH
7074: LD_EXP 29
7078: PUSH
7079: LD_OWVAR 1
7083: MINUS
7084: LESSEQUAL
7085: IFFALSE 7116
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7087: LD_ADDR_VAR 0 2
7091: PUSH
7092: LD_VAR 0 2
7096: PUSH
7097: LD_STRING #allowedsibbomb
7099: PUSH
7100: LD_EXP 29
7104: PUSH
7105: LD_OWVAR 1
7109: MINUS
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: ADD
7115: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7116: LD_INT 0
7118: PUSH
7119: LD_EXP 57
7123: PUSH
7124: LD_OWVAR 1
7128: MINUS
7129: LESSEQUAL
7130: IFFALSE 7161
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7132: LD_ADDR_VAR 0 2
7136: PUSH
7137: LD_VAR 0 2
7141: PUSH
7142: LD_STRING #builduptime
7144: PUSH
7145: LD_EXP 57
7149: PUSH
7150: LD_OWVAR 1
7154: MINUS
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: ADD
7160: ST_TO_ADDR
// if ( ExtraStrings ) then
7161: LD_EXP 53
7165: IFFALSE 7187
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7167: LD_ADDR_VAR 0 2
7171: PUSH
7172: LD_VAR 0 2
7176: PUSH
7177: LD_STRING 
7179: ADD
7180: PUSH
7181: LD_EXP 53
7185: ADD
7186: ST_TO_ADDR
// Display_Strings := AllStrings ;
7187: LD_ADDR_OWVAR 47
7191: PUSH
7192: LD_VAR 0 2
7196: ST_TO_ADDR
// end ;
7197: LD_VAR 0 1
7201: RET
// every 0 0$1 do
7202: GO 7204
7204: DISABLE
// begin ShowTimer ;
7205: CALL 7028 0 0
// enable ;
7209: ENABLE
// end ; end_of_file
7210: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7211: LD_INT 0
7213: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7214: LD_VAR 0 1
7218: PPUSH
7219: CALL_OW 255
7223: PUSH
7224: LD_VAR 0 4
7228: EQUAL
7229: IFFALSE 7248
// begin SetAchievement ( ACH_RAD ) ;
7231: LD_STRING ACH_RAD
7233: PPUSH
7234: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7238: LD_STRING ACH_NL
7240: PPUSH
7241: LD_INT 1
7243: PPUSH
7244: CALL_OW 564
// end end ;
7248: LD_VAR 0 5
7252: RET
// export function SA_Win ( side ) ; begin
7253: LD_INT 0
7255: PPUSH
// case side of 1 :
7256: LD_VAR 0 1
7260: PUSH
7261: LD_INT 1
7263: DOUBLE
7264: EQUAL
7265: IFTRUE 7269
7267: GO 7282
7269: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7270: LD_STRING ACH_AH
7272: PPUSH
7273: LD_INT 1
7275: PPUSH
7276: CALL_OW 564
7280: GO 7445
7282: LD_INT 2
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7303
7290: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7291: LD_STRING ACH_E
7293: PPUSH
7294: LD_INT 1
7296: PPUSH
7297: CALL_OW 564
7301: GO 7445
7303: LD_INT 3
7305: DOUBLE
7306: EQUAL
7307: IFTRUE 7311
7309: GO 7324
7311: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7312: LD_STRING ACH_OOL
7314: PPUSH
7315: LD_INT 1
7317: PPUSH
7318: CALL_OW 564
7322: GO 7445
7324: LD_INT 1
7326: PUSH
7327: LD_INT 2
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: DOUBLE
7334: EQUAL
7335: IFTRUE 7339
7337: GO 7364
7339: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7340: LD_STRING ACH_AH
7342: PPUSH
7343: LD_REAL  5.00000000000000E-0001
7346: PPUSH
7347: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7351: LD_STRING ACH_E
7353: PPUSH
7354: LD_REAL  5.00000000000000E-0001
7357: PPUSH
7358: CALL_OW 564
// end ; [ 2 , 3 ] :
7362: GO 7445
7364: LD_INT 2
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: DOUBLE
7374: EQUAL
7375: IFTRUE 7379
7377: GO 7404
7379: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7380: LD_STRING ACH_OOL
7382: PPUSH
7383: LD_REAL  5.00000000000000E-0001
7386: PPUSH
7387: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7391: LD_STRING ACH_E
7393: PPUSH
7394: LD_REAL  5.00000000000000E-0001
7397: PPUSH
7398: CALL_OW 564
// end ; [ 3 , 1 ] :
7402: GO 7445
7404: LD_INT 3
7406: PUSH
7407: LD_INT 1
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: DOUBLE
7414: EQUAL
7415: IFTRUE 7419
7417: GO 7444
7419: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7420: LD_STRING ACH_AH
7422: PPUSH
7423: LD_REAL  5.00000000000000E-0001
7426: PPUSH
7427: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7431: LD_STRING ACH_OOL
7433: PPUSH
7434: LD_REAL  5.00000000000000E-0001
7437: PPUSH
7438: CALL_OW 564
// end ; end ;
7442: GO 7445
7444: POP
// end ; end_of_file
7445: LD_VAR 0 2
7449: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7450: LD_INT 0
7452: PPUSH
7453: PPUSH
// enable ( 98 ) ;
7454: LD_INT 98
7456: ENABLE_MARKED
// GameEnded = false ;
7457: LD_ADDR_LOC 15
7461: PUSH
7462: LD_INT 0
7464: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7465: LD_ADDR_LOC 14
7469: PUSH
7470: LD_INT 0
7472: PUSH
7473: LD_INT 0
7475: PUSH
7476: LD_INT 0
7478: PUSH
7479: LD_INT 0
7481: PUSH
7482: LD_INT 0
7484: PUSH
7485: LD_INT 0
7487: PUSH
7488: LD_INT 0
7490: PUSH
7491: LD_INT 0
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: LIST
7503: ST_TO_ADDR
// unfoged = false ;
7504: LD_ADDR_LOC 16
7508: PUSH
7509: LD_INT 0
7511: ST_TO_ADDR
// defeated_specs := [ ] ;
7512: LD_ADDR_LOC 17
7516: PUSH
7517: EMPTY
7518: ST_TO_ADDR
// for i = 1 to side_positions do
7519: LD_ADDR_VAR 0 2
7523: PUSH
7524: DOUBLE
7525: LD_INT 1
7527: DEC
7528: ST_TO_ADDR
7529: LD_EXP 34
7533: PUSH
7534: FOR_TO
7535: IFFALSE 7575
// if not side_positions [ i ] then
7537: LD_EXP 34
7541: PUSH
7542: LD_VAR 0 2
7546: ARRAY
7547: NOT
7548: IFFALSE 7573
// defeated = replace ( defeated , i , true ) ;
7550: LD_ADDR_LOC 14
7554: PUSH
7555: LD_LOC 14
7559: PPUSH
7560: LD_VAR 0 2
7564: PPUSH
7565: LD_INT 1
7567: PPUSH
7568: CALL_OW 1
7572: ST_TO_ADDR
7573: GO 7534
7575: POP
7576: POP
// end ;
7577: LD_VAR 0 1
7581: RET
// function CanWinLoose ; begin
7582: LD_INT 0
7584: PPUSH
// Result := true ;
7585: LD_ADDR_VAR 0 1
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7593: CALL_OW 518
7597: PUSH
7598: CALL_OW 519
7602: PUSH
7603: LD_INT 0
7605: GREATER
7606: AND
7607: IFFALSE 7617
// Result := false ;
7609: LD_ADDR_VAR 0 1
7613: PUSH
7614: LD_INT 0
7616: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7617: CALL_OW 531
7621: PUSH
7622: CALL_OW 519
7626: PUSH
7627: LD_INT 1
7629: GREATER
7630: AND
7631: IFFALSE 7641
// Result := false ;
7633: LD_ADDR_VAR 0 1
7637: PUSH
7638: LD_INT 0
7640: ST_TO_ADDR
// end ;
7641: LD_VAR 0 1
7645: RET
// export function HasPower ( i ) ; var k , h ; begin
7646: LD_INT 0
7648: PPUSH
7649: PPUSH
7650: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7651: LD_VAR 0 1
7655: PPUSH
7656: CALL_OW 108
7660: NOT
7661: PUSH
7662: LD_EXP 33
7666: PUSH
7667: LD_VAR 0 1
7671: ARRAY
7672: NOT
7673: AND
7674: PUSH
7675: LD_OWVAR 4
7679: AND
7680: IFFALSE 7692
// begin result = false ;
7682: LD_ADDR_VAR 0 2
7686: PUSH
7687: LD_INT 0
7689: ST_TO_ADDR
// end else
7690: GO 7987
// case def_win_rules of 0 :
7692: LD_EXP 30
7696: PUSH
7697: LD_INT 0
7699: DOUBLE
7700: EQUAL
7701: IFTRUE 7705
7703: GO 7868
7705: POP
// if def_people_respawning then
7706: LD_EXP 11
7710: IFFALSE 7801
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7712: LD_ADDR_VAR 0 2
7716: PUSH
7717: LD_INT 22
7719: PUSH
7720: LD_VAR 0 1
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 2
7731: PUSH
7732: LD_INT 21
7734: PUSH
7735: LD_INT 1
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 33
7744: PUSH
7745: LD_INT 3
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: LD_INT 33
7754: PUSH
7755: LD_INT 5
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 30
7764: PUSH
7765: LD_INT 0
7767: PUSH
7768: EMPTY
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 30
7774: PUSH
7775: LD_INT 1
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PPUSH
7794: CALL_OW 69
7798: ST_TO_ADDR
7799: GO 7866
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7801: LD_ADDR_VAR 0 2
7805: PUSH
7806: LD_INT 22
7808: PUSH
7809: LD_VAR 0 1
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 2
7820: PUSH
7821: LD_INT 21
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 33
7833: PUSH
7834: LD_INT 3
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 33
7843: PUSH
7844: LD_INT 5
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: PPUSH
7861: CALL_OW 69
7865: ST_TO_ADDR
7866: GO 7987
7868: LD_INT 1
7870: DOUBLE
7871: EQUAL
7872: IFTRUE 7876
7874: GO 7915
7876: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7877: LD_ADDR_VAR 0 2
7881: PUSH
7882: LD_INT 22
7884: PUSH
7885: LD_VAR 0 1
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 21
7896: PUSH
7897: LD_INT 1
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: PPUSH
7908: CALL_OW 69
7912: ST_TO_ADDR
7913: GO 7987
7915: LD_INT 2
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 7986
7923: POP
// begin h = false ;
7924: LD_ADDR_VAR 0 4
7928: PUSH
7929: LD_INT 0
7931: ST_TO_ADDR
// for k in heroes [ i ] do
7932: LD_ADDR_VAR 0 3
7936: PUSH
7937: LD_EXP 45
7941: PUSH
7942: LD_VAR 0 1
7946: ARRAY
7947: PUSH
7948: FOR_IN
7949: IFFALSE 7972
// if IsLive ( k ) then
7951: LD_VAR 0 3
7955: PPUSH
7956: CALL_OW 300
7960: IFFALSE 7970
// h = true ;
7962: LD_ADDR_VAR 0 4
7966: PUSH
7967: LD_INT 1
7969: ST_TO_ADDR
7970: GO 7948
7972: POP
7973: POP
// Result := h ;
7974: LD_ADDR_VAR 0 2
7978: PUSH
7979: LD_VAR 0 4
7983: ST_TO_ADDR
// end ; end ;
7984: GO 7987
7986: POP
// end ;
7987: LD_VAR 0 2
7991: RET
// function AlliedSides ( i , j ) ; begin
7992: LD_INT 0
7994: PPUSH
// Result := false ;
7995: LD_ADDR_VAR 0 3
7999: PUSH
8000: LD_INT 0
8002: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8003: LD_VAR 0 1
8007: PPUSH
8008: LD_VAR 0 2
8012: PPUSH
8013: CALL_OW 81
8017: PUSH
8018: LD_INT 1
8020: EQUAL
8021: PUSH
8022: LD_VAR 0 2
8026: PPUSH
8027: LD_VAR 0 1
8031: PPUSH
8032: CALL_OW 81
8036: PUSH
8037: LD_INT 1
8039: EQUAL
8040: AND
8041: PUSH
8042: LD_VAR 0 1
8046: PPUSH
8047: CALL_OW 83
8051: AND
8052: PUSH
8053: LD_VAR 0 2
8057: PPUSH
8058: CALL_OW 83
8062: AND
8063: IFFALSE 8073
// Result := true ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: LD_INT 1
8072: ST_TO_ADDR
// end ;
8073: LD_VAR 0 3
8077: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8078: CALL 7582 0 0
8082: PUSH
8083: LD_LOC 15
8087: NOT
8088: AND
8089: IFFALSE 8105
8091: GO 8093
8093: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8094: LD_ADDR_EXP 54
8098: PUSH
8099: LD_STRING #Player-Ended
8101: PUSH
8102: EMPTY
8103: LIST
8104: ST_TO_ADDR
8105: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8106: CALL 7582 0 0
8110: PUSH
8111: LD_LOC 15
8115: AND
8116: IFFALSE 8125
8118: GO 8120
8120: DISABLE
// YouLostInMultiplayer ;
8121: CALL_OW 107
8125: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8126: CALL 7582 0 0
8130: NOT
8131: PUSH
8132: CALL_OW 531
8136: NOT
8137: AND
8138: IFFALSE 8154
8140: GO 8142
8142: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8143: LD_ADDR_EXP 54
8147: PUSH
8148: LD_STRING #server-wait
8150: PUSH
8151: EMPTY
8152: LIST
8153: ST_TO_ADDR
8154: END
// every 100 trigger IAmSpec do
8155: CALL_OW 531
8159: IFFALSE 8175
8161: GO 8163
8163: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8164: LD_ADDR_EXP 54
8168: PUSH
8169: LD_STRING #Player-IAmSpec
8171: PUSH
8172: EMPTY
8173: LIST
8174: ST_TO_ADDR
8175: END
// every 100 trigger GameEnded and IAmSpec do
8176: LD_LOC 15
8180: PUSH
8181: CALL_OW 531
8185: AND
8186: IFFALSE 8195
8188: GO 8190
8190: DISABLE
// YouLostInMultiplayer ;
8191: CALL_OW 107
8195: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8196: CALL 7582 0 0
8200: PUSH
8201: LD_LOC 15
8205: NOT
8206: AND
8207: IFFALSE 8223
8209: GO 8211
8211: DISABLE
// WaitServerStrings = [ $player-win ] ;
8212: LD_ADDR_EXP 54
8216: PUSH
8217: LD_STRING $player-win
8219: PUSH
8220: EMPTY
8221: LIST
8222: ST_TO_ADDR
8223: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8224: CALL 7582 0 0
8228: PUSH
8229: LD_LOC 15
8233: AND
8234: IFFALSE 8258
8236: GO 8238
8238: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8239: LD_EXP 35
8243: PUSH
8244: LD_OWVAR 7
8248: ARRAY
8249: PPUSH
8250: CALL 7253 0 1
// YouWinInMultiplayer ;
8254: CALL_OW 106
// end ;
8258: END
// every 100 trigger isEditor marked 401 do
8259: LD_OWVAR 84
8263: IFFALSE 8279
8265: GO 8267
8267: DISABLE
// Debug_Strings = [ You won ] ;
8268: LD_ADDR_OWVAR 48
8272: PUSH
8273: LD_STRING You won
8275: PUSH
8276: EMPTY
8277: LIST
8278: ST_TO_ADDR
8279: END
// every 100 trigger isEditor marked 400 do
8280: LD_OWVAR 84
8284: IFFALSE 8300
8286: GO 8288
8288: DISABLE
// Debug_Strings = [ You loss ] ;
8289: LD_ADDR_OWVAR 48
8293: PUSH
8294: LD_STRING You loss
8296: PUSH
8297: EMPTY
8298: LIST
8299: ST_TO_ADDR
8300: END
// every 100 marked 98 do var i , un ;
8301: GO 8303
8303: DISABLE
8304: LD_INT 0
8306: PPUSH
8307: PPUSH
// begin for i = 1 to side_positions do
8308: LD_ADDR_VAR 0 1
8312: PUSH
8313: DOUBLE
8314: LD_INT 1
8316: DEC
8317: ST_TO_ADDR
8318: LD_EXP 34
8322: PUSH
8323: FOR_TO
8324: IFFALSE 8411
// begin if side_positions [ i ] then
8326: LD_EXP 34
8330: PUSH
8331: LD_VAR 0 1
8335: ARRAY
8336: IFFALSE 8409
// if not HasPower ( i ) and not defeated [ i ] then
8338: LD_VAR 0 1
8342: PPUSH
8343: CALL 7646 0 1
8347: NOT
8348: PUSH
8349: LD_LOC 14
8353: PUSH
8354: LD_VAR 0 1
8358: ARRAY
8359: NOT
8360: AND
8361: IFFALSE 8409
// begin defeated = replace ( defeated , i , true ) ;
8363: LD_ADDR_LOC 14
8367: PUSH
8368: LD_LOC 14
8372: PPUSH
8373: LD_VAR 0 1
8377: PPUSH
8378: LD_INT 1
8380: PPUSH
8381: CALL_OW 1
8385: ST_TO_ADDR
// if i = mp_player_side then
8386: LD_VAR 0 1
8390: PUSH
8391: LD_OWVAR 7
8395: EQUAL
8396: IFFALSE 8409
// begin Multiplayer_Loose_Message ;
8398: CALL_OW 521
// SetPlayerSpectator ( ) ;
8402: CALL_OW 572
// enable ( 400 ) ;
8406: LD_INT 400
8408: ENABLE_MARKED
// end ; end ; end ;
8409: GO 8323
8411: POP
8412: POP
// DidGameEnd ;
8413: CALL 8428 0 0
// if not GameEnded then
8417: LD_LOC 15
8421: NOT
8422: IFFALSE 8425
// enable ;
8424: ENABLE
// end ;
8425: PPOPN 2
8427: END
// function DidGameEnd ; var i , k , enemy ; begin
8428: LD_INT 0
8430: PPUSH
8431: PPUSH
8432: PPUSH
8433: PPUSH
// enemy = [ ] ;
8434: LD_ADDR_VAR 0 4
8438: PUSH
8439: EMPTY
8440: ST_TO_ADDR
// for i = 1 to side_positions do
8441: LD_ADDR_VAR 0 2
8445: PUSH
8446: DOUBLE
8447: LD_INT 1
8449: DEC
8450: ST_TO_ADDR
8451: LD_EXP 34
8455: PUSH
8456: FOR_TO
8457: IFFALSE 8551
// if not defeated [ i ] then
8459: LD_LOC 14
8463: PUSH
8464: LD_VAR 0 2
8468: ARRAY
8469: NOT
8470: IFFALSE 8549
// for k = 1 to side_positions do
8472: LD_ADDR_VAR 0 3
8476: PUSH
8477: DOUBLE
8478: LD_INT 1
8480: DEC
8481: ST_TO_ADDR
8482: LD_EXP 34
8486: PUSH
8487: FOR_TO
8488: IFFALSE 8547
// if not defeated [ k ] then
8490: LD_LOC 14
8494: PUSH
8495: LD_VAR 0 3
8499: ARRAY
8500: NOT
8501: IFFALSE 8545
// if not AlliedSides ( i , k ) then
8503: LD_VAR 0 2
8507: PPUSH
8508: LD_VAR 0 3
8512: PPUSH
8513: CALL 7992 0 2
8517: NOT
8518: IFFALSE 8545
// enemy = enemy ^ [ i , k ] ;
8520: LD_ADDR_VAR 0 4
8524: PUSH
8525: LD_VAR 0 4
8529: PUSH
8530: LD_VAR 0 2
8534: PUSH
8535: LD_VAR 0 3
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: ADD
8544: ST_TO_ADDR
8545: GO 8487
8547: POP
8548: POP
8549: GO 8456
8551: POP
8552: POP
// if not enemy then
8553: LD_VAR 0 4
8557: NOT
8558: IFFALSE 8584
// begin GameEnded = true ;
8560: LD_ADDR_LOC 15
8564: PUSH
8565: LD_INT 1
8567: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8568: LD_LOC 14
8572: PUSH
8573: LD_OWVAR 7
8577: ARRAY
8578: NOT
8579: IFFALSE 8584
// enable ( 401 ) ;
8581: LD_INT 401
8583: ENABLE_MARKED
// end ; end ;
8584: LD_VAR 0 1
8588: RET
// function unfog ; var k , friends ; begin
8589: LD_INT 0
8591: PPUSH
8592: PPUSH
8593: PPUSH
// for k = 1 to side_positions do
8594: LD_ADDR_VAR 0 2
8598: PUSH
8599: DOUBLE
8600: LD_INT 1
8602: DEC
8603: ST_TO_ADDR
8604: LD_EXP 34
8608: PUSH
8609: FOR_TO
8610: IFFALSE 8666
// if not defeated [ k ] then
8612: LD_LOC 14
8616: PUSH
8617: LD_VAR 0 2
8621: ARRAY
8622: NOT
8623: IFFALSE 8664
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8625: LD_OWVAR 7
8629: PPUSH
8630: LD_VAR 0 2
8634: PPUSH
8635: CALL_OW 81
8639: PUSH
8640: LD_INT 1
8642: PUSH
8643: EMPTY
8644: LIST
8645: IN
8646: IFFALSE 8664
// friends = friends ^ k ;
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_VAR 0 3
8657: PUSH
8658: LD_VAR 0 2
8662: ADD
8663: ST_TO_ADDR
8664: GO 8609
8666: POP
8667: POP
// if not friends then
8668: LD_VAR 0 3
8672: NOT
8673: IFFALSE 8687
// begin SetPlayerSpectator ( ) ;
8675: CALL_OW 572
// unfoged = true ;
8679: LD_ADDR_LOC 16
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// end ; end ;
8687: LD_VAR 0 1
8691: RET
// export function MakeGameEnd ; begin
8692: LD_INT 0
8694: PPUSH
// SetPlayerSpectator ( ) ;
8695: CALL_OW 572
// unfoged = true ;
8699: LD_ADDR_LOC 16
8703: PUSH
8704: LD_INT 1
8706: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8707: LD_INT 175
8709: PPUSH
8710: CALL_OW 67
// GameEnded = true ;
8714: LD_ADDR_LOC 15
8718: PUSH
8719: LD_INT 1
8721: ST_TO_ADDR
// end ;
8722: LD_VAR 0 1
8726: RET
// export function GetGameEnded ; begin
8727: LD_INT 0
8729: PPUSH
// result = GameEnded ;
8730: LD_ADDR_VAR 0 1
8734: PUSH
8735: LD_LOC 15
8739: ST_TO_ADDR
// end ; end_of_file
8740: LD_VAR 0 1
8744: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8745: LD_INT 0
8747: PPUSH
8748: PPUSH
8749: PPUSH
// for side = 1 to 8 do
8750: LD_ADDR_VAR 0 2
8754: PUSH
8755: DOUBLE
8756: LD_INT 1
8758: DEC
8759: ST_TO_ADDR
8760: LD_INT 8
8762: PUSH
8763: FOR_TO
8764: IFFALSE 8885
// begin for i = 1 to 72 do
8766: LD_ADDR_VAR 0 3
8770: PUSH
8771: DOUBLE
8772: LD_INT 1
8774: DEC
8775: ST_TO_ADDR
8776: LD_INT 72
8778: PUSH
8779: FOR_TO
8780: IFFALSE 8811
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8782: LD_VAR 0 3
8786: PPUSH
8787: LD_VAR 0 2
8791: PPUSH
8792: LD_INT 0
8794: PPUSH
8795: LD_VAR 0 3
8799: PPUSH
8800: CALL_OW 565
8804: PPUSH
8805: CALL_OW 322
8809: GO 8779
8811: POP
8812: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8813: LD_INT 73
8815: PPUSH
8816: LD_VAR 0 2
8820: PPUSH
8821: LD_INT 0
8823: PPUSH
8824: LD_INT 25
8826: PPUSH
8827: CALL_OW 565
8831: PPUSH
8832: CALL_OW 322
// for i = 0 to 40 do
8836: LD_ADDR_VAR 0 3
8840: PUSH
8841: DOUBLE
8842: LD_INT 0
8844: DEC
8845: ST_TO_ADDR
8846: LD_INT 40
8848: PUSH
8849: FOR_TO
8850: IFFALSE 8881
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8852: LD_VAR 0 3
8856: PPUSH
8857: LD_VAR 0 2
8861: PPUSH
8862: LD_INT 1
8864: PPUSH
8865: LD_VAR 0 3
8869: PPUSH
8870: CALL_OW 565
8874: PPUSH
8875: CALL_OW 324
8879: GO 8849
8881: POP
8882: POP
// end ;
8883: GO 8763
8885: POP
8886: POP
// end ;
8887: LD_VAR 0 1
8891: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8892: LD_INT 0
8894: PPUSH
8895: PPUSH
8896: PPUSH
// for side = 1 to 8 do
8897: LD_ADDR_VAR 0 3
8901: PUSH
8902: DOUBLE
8903: LD_INT 1
8905: DEC
8906: ST_TO_ADDR
8907: LD_INT 8
8909: PUSH
8910: FOR_TO
8911: IFFALSE 12907
// begin for i = 1 to 73 do
8913: LD_ADDR_VAR 0 4
8917: PUSH
8918: DOUBLE
8919: LD_INT 1
8921: DEC
8922: ST_TO_ADDR
8923: LD_INT 73
8925: PUSH
8926: FOR_TO
8927: IFFALSE 8948
// SetTech ( i , side , state_disabled ) ;
8929: LD_VAR 0 4
8933: PPUSH
8934: LD_VAR 0 3
8938: PPUSH
8939: LD_INT 0
8941: PPUSH
8942: CALL_OW 322
8946: GO 8926
8948: POP
8949: POP
// for i = 0 to 40 do
8950: LD_ADDR_VAR 0 4
8954: PUSH
8955: DOUBLE
8956: LD_INT 0
8958: DEC
8959: ST_TO_ADDR
8960: LD_INT 40
8962: PUSH
8963: FOR_TO
8964: IFFALSE 8985
// SetRestrict ( i , side , false ) ;
8966: LD_VAR 0 4
8970: PPUSH
8971: LD_VAR 0 3
8975: PPUSH
8976: LD_INT 0
8978: PPUSH
8979: CALL_OW 324
8983: GO 8963
8985: POP
8986: POP
// case level of 1 :
8987: LD_VAR 0 1
8991: PUSH
8992: LD_INT 1
8994: DOUBLE
8995: EQUAL
8996: IFTRUE 9000
8998: GO 9153
9000: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9001: LD_INT 35
9003: PPUSH
9004: LD_VAR 0 3
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9016: LD_INT 45
9018: PPUSH
9019: LD_VAR 0 3
9023: PPUSH
9024: LD_INT 1
9026: PPUSH
9027: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9031: LD_INT 46
9033: PPUSH
9034: LD_VAR 0 3
9038: PPUSH
9039: LD_INT 1
9041: PPUSH
9042: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9046: LD_INT 47
9048: PPUSH
9049: LD_VAR 0 3
9053: PPUSH
9054: LD_INT 1
9056: PPUSH
9057: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9061: LD_INT 0
9063: PPUSH
9064: LD_VAR 0 3
9068: PPUSH
9069: LD_INT 1
9071: PPUSH
9072: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9076: LD_INT 2
9078: PPUSH
9079: LD_VAR 0 3
9083: PPUSH
9084: LD_INT 1
9086: PPUSH
9087: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9091: LD_INT 4
9093: PPUSH
9094: LD_VAR 0 3
9098: PPUSH
9099: LD_INT 1
9101: PPUSH
9102: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9106: LD_INT 6
9108: PPUSH
9109: LD_VAR 0 3
9113: PPUSH
9114: LD_INT 1
9116: PPUSH
9117: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9121: LD_INT 29
9123: PPUSH
9124: LD_VAR 0 3
9128: PPUSH
9129: LD_INT 1
9131: PPUSH
9132: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9136: LD_INT 31
9138: PPUSH
9139: LD_VAR 0 3
9143: PPUSH
9144: LD_INT 1
9146: PPUSH
9147: CALL_OW 324
// end ; 2 :
9151: GO 12905
9153: LD_INT 2
9155: DOUBLE
9156: EQUAL
9157: IFTRUE 9161
9159: GO 9359
9161: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9162: LD_INT 35
9164: PPUSH
9165: LD_VAR 0 3
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9177: LD_INT 45
9179: PPUSH
9180: LD_VAR 0 3
9184: PPUSH
9185: LD_INT 1
9187: PPUSH
9188: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9192: LD_INT 46
9194: PPUSH
9195: LD_VAR 0 3
9199: PPUSH
9200: LD_INT 1
9202: PPUSH
9203: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9207: LD_INT 47
9209: PPUSH
9210: LD_VAR 0 3
9214: PPUSH
9215: LD_INT 1
9217: PPUSH
9218: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9222: LD_INT 1
9224: PPUSH
9225: LD_VAR 0 3
9229: PPUSH
9230: LD_INT 1
9232: PPUSH
9233: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9237: LD_INT 2
9239: PPUSH
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_INT 1
9247: PPUSH
9248: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9252: LD_INT 11
9254: PPUSH
9255: LD_VAR 0 3
9259: PPUSH
9260: LD_INT 1
9262: PPUSH
9263: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9267: LD_INT 0
9269: PPUSH
9270: LD_VAR 0 3
9274: PPUSH
9275: LD_INT 1
9277: PPUSH
9278: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9282: LD_INT 2
9284: PPUSH
9285: LD_VAR 0 3
9289: PPUSH
9290: LD_INT 1
9292: PPUSH
9293: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9297: LD_INT 4
9299: PPUSH
9300: LD_VAR 0 3
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9312: LD_INT 6
9314: PPUSH
9315: LD_VAR 0 3
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9327: LD_INT 29
9329: PPUSH
9330: LD_VAR 0 3
9334: PPUSH
9335: LD_INT 1
9337: PPUSH
9338: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9342: LD_INT 31
9344: PPUSH
9345: LD_VAR 0 3
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 324
// end ; 3 :
9357: GO 12905
9359: LD_INT 3
9361: DOUBLE
9362: EQUAL
9363: IFTRUE 9367
9365: GO 9820
9367: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9368: LD_INT 35
9370: PPUSH
9371: LD_VAR 0 3
9375: PPUSH
9376: LD_INT 1
9378: PPUSH
9379: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9383: LD_INT 45
9385: PPUSH
9386: LD_VAR 0 3
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9398: LD_INT 46
9400: PPUSH
9401: LD_VAR 0 3
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9413: LD_INT 47
9415: PPUSH
9416: LD_VAR 0 3
9420: PPUSH
9421: LD_INT 1
9423: PPUSH
9424: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9428: LD_INT 1
9430: PPUSH
9431: LD_VAR 0 3
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9443: LD_INT 2
9445: PPUSH
9446: LD_VAR 0 3
9450: PPUSH
9451: LD_INT 1
9453: PPUSH
9454: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9458: LD_INT 11
9460: PPUSH
9461: LD_VAR 0 3
9465: PPUSH
9466: LD_INT 1
9468: PPUSH
9469: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9473: LD_INT 48
9475: PPUSH
9476: LD_VAR 0 3
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9488: LD_INT 69
9490: PPUSH
9491: LD_VAR 0 3
9495: PPUSH
9496: LD_INT 1
9498: PPUSH
9499: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9503: LD_INT 39
9505: PPUSH
9506: LD_VAR 0 3
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9518: LD_INT 43
9520: PPUSH
9521: LD_VAR 0 3
9525: PPUSH
9526: LD_INT 1
9528: PPUSH
9529: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9533: LD_INT 51
9535: PPUSH
9536: LD_VAR 0 3
9540: PPUSH
9541: LD_INT 1
9543: PPUSH
9544: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9548: LD_INT 6
9550: PPUSH
9551: LD_VAR 0 3
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9563: LD_INT 0
9565: PPUSH
9566: LD_VAR 0 3
9570: PPUSH
9571: LD_INT 1
9573: PPUSH
9574: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9578: LD_INT 2
9580: PPUSH
9581: LD_VAR 0 3
9585: PPUSH
9586: LD_INT 1
9588: PPUSH
9589: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9593: LD_INT 3
9595: PPUSH
9596: LD_VAR 0 3
9600: PPUSH
9601: LD_INT 1
9603: PPUSH
9604: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9608: LD_INT 4
9610: PPUSH
9611: LD_VAR 0 3
9615: PPUSH
9616: LD_INT 1
9618: PPUSH
9619: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9623: LD_INT 6
9625: PPUSH
9626: LD_VAR 0 3
9630: PPUSH
9631: LD_INT 1
9633: PPUSH
9634: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9638: LD_INT 7
9640: PPUSH
9641: LD_VAR 0 3
9645: PPUSH
9646: LD_INT 1
9648: PPUSH
9649: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9653: LD_INT 8
9655: PPUSH
9656: LD_VAR 0 3
9660: PPUSH
9661: LD_INT 1
9663: PPUSH
9664: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9668: LD_INT 10
9670: PPUSH
9671: LD_VAR 0 3
9675: PPUSH
9676: LD_INT 1
9678: PPUSH
9679: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9683: LD_INT 15
9685: PPUSH
9686: LD_VAR 0 3
9690: PPUSH
9691: LD_INT 1
9693: PPUSH
9694: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9698: LD_INT 16
9700: PPUSH
9701: LD_VAR 0 3
9705: PPUSH
9706: LD_INT 1
9708: PPUSH
9709: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9713: LD_INT 17
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: LD_INT 1
9723: PPUSH
9724: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9728: LD_INT 20
9730: PPUSH
9731: LD_VAR 0 3
9735: PPUSH
9736: LD_INT 1
9738: PPUSH
9739: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9743: LD_INT 26
9745: PPUSH
9746: LD_VAR 0 3
9750: PPUSH
9751: LD_INT 1
9753: PPUSH
9754: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9758: LD_INT 27
9760: PPUSH
9761: LD_VAR 0 3
9765: PPUSH
9766: LD_INT 1
9768: PPUSH
9769: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9773: LD_INT 29
9775: PPUSH
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_INT 1
9783: PPUSH
9784: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9788: LD_INT 31
9790: PPUSH
9791: LD_VAR 0 3
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9803: LD_INT 32
9805: PPUSH
9806: LD_VAR 0 3
9810: PPUSH
9811: LD_INT 1
9813: PPUSH
9814: CALL_OW 324
// end ; 4 :
9818: GO 12905
9820: LD_INT 4
9822: DOUBLE
9823: EQUAL
9824: IFTRUE 9828
9826: GO 10776
9828: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9829: LD_INT 35
9831: PPUSH
9832: LD_VAR 0 3
9836: PPUSH
9837: LD_INT 1
9839: PPUSH
9840: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9844: LD_INT 45
9846: PPUSH
9847: LD_VAR 0 3
9851: PPUSH
9852: LD_INT 1
9854: PPUSH
9855: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9859: LD_INT 46
9861: PPUSH
9862: LD_VAR 0 3
9866: PPUSH
9867: LD_INT 1
9869: PPUSH
9870: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9874: LD_INT 47
9876: PPUSH
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_INT 1
9884: PPUSH
9885: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9889: LD_INT 1
9891: PPUSH
9892: LD_VAR 0 3
9896: PPUSH
9897: LD_INT 1
9899: PPUSH
9900: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9904: LD_INT 2
9906: PPUSH
9907: LD_VAR 0 3
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9919: LD_INT 11
9921: PPUSH
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9934: LD_INT 20
9936: PPUSH
9937: LD_VAR 0 3
9941: PPUSH
9942: LD_INT 1
9944: PPUSH
9945: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9949: LD_INT 48
9951: PPUSH
9952: LD_VAR 0 3
9956: PPUSH
9957: LD_INT 1
9959: PPUSH
9960: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9964: LD_INT 49
9966: PPUSH
9967: LD_VAR 0 3
9971: PPUSH
9972: LD_INT 1
9974: PPUSH
9975: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9979: LD_INT 69
9981: PPUSH
9982: LD_VAR 0 3
9986: PPUSH
9987: LD_INT 1
9989: PPUSH
9990: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9994: LD_INT 39
9996: PPUSH
9997: LD_VAR 0 3
10001: PPUSH
10002: LD_INT 1
10004: PPUSH
10005: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10009: LD_INT 34
10011: PPUSH
10012: LD_VAR 0 3
10016: PPUSH
10017: LD_INT 1
10019: PPUSH
10020: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10024: LD_INT 42
10026: PPUSH
10027: LD_VAR 0 3
10031: PPUSH
10032: LD_INT 1
10034: PPUSH
10035: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10039: LD_INT 44
10041: PPUSH
10042: LD_VAR 0 3
10046: PPUSH
10047: LD_INT 1
10049: PPUSH
10050: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10054: LD_INT 41
10056: PPUSH
10057: LD_VAR 0 3
10061: PPUSH
10062: LD_INT 1
10064: PPUSH
10065: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10069: LD_INT 43
10071: PPUSH
10072: LD_VAR 0 3
10076: PPUSH
10077: LD_INT 1
10079: PPUSH
10080: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10084: LD_INT 70
10086: PPUSH
10087: LD_VAR 0 3
10091: PPUSH
10092: LD_INT 1
10094: PPUSH
10095: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10099: LD_INT 51
10101: PPUSH
10102: LD_VAR 0 3
10106: PPUSH
10107: LD_INT 1
10109: PPUSH
10110: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10114: LD_INT 52
10116: PPUSH
10117: LD_VAR 0 3
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10129: LD_INT 6
10131: PPUSH
10132: LD_VAR 0 3
10136: PPUSH
10137: LD_INT 1
10139: PPUSH
10140: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10144: LD_INT 15
10146: PPUSH
10147: LD_VAR 0 3
10151: PPUSH
10152: LD_INT 1
10154: PPUSH
10155: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10159: LD_INT 7
10161: PPUSH
10162: LD_VAR 0 3
10166: PPUSH
10167: LD_INT 1
10169: PPUSH
10170: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10174: LD_INT 12
10176: PPUSH
10177: LD_VAR 0 3
10181: PPUSH
10182: LD_INT 1
10184: PPUSH
10185: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10189: LD_INT 18
10191: PPUSH
10192: LD_VAR 0 3
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10204: LD_INT 60
10206: PPUSH
10207: LD_VAR 0 3
10211: PPUSH
10212: LD_INT 1
10214: PPUSH
10215: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10219: LD_INT 9
10221: PPUSH
10222: LD_VAR 0 3
10226: PPUSH
10227: LD_INT 1
10229: PPUSH
10230: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10234: LD_INT 30
10236: PPUSH
10237: LD_VAR 0 3
10241: PPUSH
10242: LD_INT 1
10244: PPUSH
10245: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10249: LD_INT 37
10251: PPUSH
10252: LD_VAR 0 3
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10264: LD_INT 5
10266: PPUSH
10267: LD_VAR 0 3
10271: PPUSH
10272: LD_INT 1
10274: PPUSH
10275: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10279: LD_INT 66
10281: PPUSH
10282: LD_VAR 0 3
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10294: LD_INT 21
10296: PPUSH
10297: LD_VAR 0 3
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10309: LD_INT 22
10311: PPUSH
10312: LD_VAR 0 3
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10324: LD_INT 54
10326: PPUSH
10327: LD_VAR 0 3
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10339: LD_INT 0
10341: PPUSH
10342: LD_VAR 0 3
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10354: LD_INT 1
10356: PPUSH
10357: LD_VAR 0 3
10361: PPUSH
10362: LD_INT 1
10364: PPUSH
10365: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10369: LD_INT 2
10371: PPUSH
10372: LD_VAR 0 3
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10384: LD_INT 3
10386: PPUSH
10387: LD_VAR 0 3
10391: PPUSH
10392: LD_INT 1
10394: PPUSH
10395: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10399: LD_INT 4
10401: PPUSH
10402: LD_VAR 0 3
10406: PPUSH
10407: LD_INT 1
10409: PPUSH
10410: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10414: LD_INT 5
10416: PPUSH
10417: LD_VAR 0 3
10421: PPUSH
10422: LD_INT 1
10424: PPUSH
10425: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10429: LD_INT 6
10431: PPUSH
10432: LD_VAR 0 3
10436: PPUSH
10437: LD_INT 1
10439: PPUSH
10440: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10444: LD_INT 7
10446: PPUSH
10447: LD_VAR 0 3
10451: PPUSH
10452: LD_INT 1
10454: PPUSH
10455: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10459: LD_INT 8
10461: PPUSH
10462: LD_VAR 0 3
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10474: LD_INT 10
10476: PPUSH
10477: LD_VAR 0 3
10481: PPUSH
10482: LD_INT 1
10484: PPUSH
10485: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10489: LD_INT 11
10491: PPUSH
10492: LD_VAR 0 3
10496: PPUSH
10497: LD_INT 1
10499: PPUSH
10500: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10504: LD_INT 12
10506: PPUSH
10507: LD_VAR 0 3
10511: PPUSH
10512: LD_INT 1
10514: PPUSH
10515: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10519: LD_INT 13
10521: PPUSH
10522: LD_VAR 0 3
10526: PPUSH
10527: LD_INT 1
10529: PPUSH
10530: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10534: LD_INT 14
10536: PPUSH
10537: LD_VAR 0 3
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10549: LD_INT 15
10551: PPUSH
10552: LD_VAR 0 3
10556: PPUSH
10557: LD_INT 1
10559: PPUSH
10560: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10564: LD_INT 16
10566: PPUSH
10567: LD_VAR 0 3
10571: PPUSH
10572: LD_INT 1
10574: PPUSH
10575: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10579: LD_INT 17
10581: PPUSH
10582: LD_VAR 0 3
10586: PPUSH
10587: LD_INT 1
10589: PPUSH
10590: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10594: LD_INT 19
10596: PPUSH
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 1
10604: PPUSH
10605: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10609: LD_INT 20
10611: PPUSH
10612: LD_VAR 0 3
10616: PPUSH
10617: LD_INT 1
10619: PPUSH
10620: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10624: LD_INT 21
10626: PPUSH
10627: LD_VAR 0 3
10631: PPUSH
10632: LD_INT 1
10634: PPUSH
10635: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10639: LD_INT 23
10641: PPUSH
10642: LD_VAR 0 3
10646: PPUSH
10647: LD_INT 1
10649: PPUSH
10650: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10654: LD_INT 26
10656: PPUSH
10657: LD_VAR 0 3
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10669: LD_INT 27
10671: PPUSH
10672: LD_VAR 0 3
10676: PPUSH
10677: LD_INT 1
10679: PPUSH
10680: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10684: LD_INT 28
10686: PPUSH
10687: LD_VAR 0 3
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10699: LD_INT 29
10701: PPUSH
10702: LD_VAR 0 3
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10714: LD_INT 30
10716: PPUSH
10717: LD_VAR 0 3
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10729: LD_INT 31
10731: PPUSH
10732: LD_VAR 0 3
10736: PPUSH
10737: LD_INT 1
10739: PPUSH
10740: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10744: LD_INT 32
10746: PPUSH
10747: LD_VAR 0 3
10751: PPUSH
10752: LD_INT 1
10754: PPUSH
10755: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10759: LD_INT 36
10761: PPUSH
10762: LD_VAR 0 3
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 324
// end ; 5 :
10774: GO 12905
10776: LD_INT 5
10778: DOUBLE
10779: EQUAL
10780: IFTRUE 10784
10782: GO 11897
10784: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10785: LD_INT 35
10787: PPUSH
10788: LD_VAR 0 3
10792: PPUSH
10793: LD_INT 1
10795: PPUSH
10796: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10800: LD_INT 45
10802: PPUSH
10803: LD_VAR 0 3
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10815: LD_INT 46
10817: PPUSH
10818: LD_VAR 0 3
10822: PPUSH
10823: LD_INT 1
10825: PPUSH
10826: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10830: LD_INT 47
10832: PPUSH
10833: LD_VAR 0 3
10837: PPUSH
10838: LD_INT 1
10840: PPUSH
10841: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10845: LD_INT 1
10847: PPUSH
10848: LD_VAR 0 3
10852: PPUSH
10853: LD_INT 1
10855: PPUSH
10856: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10860: LD_INT 2
10862: PPUSH
10863: LD_VAR 0 3
10867: PPUSH
10868: LD_INT 1
10870: PPUSH
10871: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10875: LD_INT 11
10877: PPUSH
10878: LD_VAR 0 3
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10890: LD_INT 20
10892: PPUSH
10893: LD_VAR 0 3
10897: PPUSH
10898: LD_INT 1
10900: PPUSH
10901: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10905: LD_INT 48
10907: PPUSH
10908: LD_VAR 0 3
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10920: LD_INT 49
10922: PPUSH
10923: LD_VAR 0 3
10927: PPUSH
10928: LD_INT 1
10930: PPUSH
10931: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10935: LD_INT 69
10937: PPUSH
10938: LD_VAR 0 3
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10950: LD_INT 39
10952: PPUSH
10953: LD_VAR 0 3
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10965: LD_INT 34
10967: PPUSH
10968: LD_VAR 0 3
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10980: LD_INT 42
10982: PPUSH
10983: LD_VAR 0 3
10987: PPUSH
10988: LD_INT 1
10990: PPUSH
10991: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10995: LD_INT 44
10997: PPUSH
10998: LD_VAR 0 3
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11010: LD_INT 41
11012: PPUSH
11013: LD_VAR 0 3
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11025: LD_INT 40
11027: PPUSH
11028: LD_VAR 0 3
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11040: LD_INT 43
11042: PPUSH
11043: LD_VAR 0 3
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11055: LD_INT 70
11057: PPUSH
11058: LD_VAR 0 3
11062: PPUSH
11063: LD_INT 1
11065: PPUSH
11066: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11070: LD_INT 51
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: LD_INT 1
11080: PPUSH
11081: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11085: LD_INT 52
11087: PPUSH
11088: LD_VAR 0 3
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11100: LD_INT 6
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: LD_INT 1
11110: PPUSH
11111: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11115: LD_INT 15
11117: PPUSH
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11130: LD_INT 7
11132: PPUSH
11133: LD_VAR 0 3
11137: PPUSH
11138: LD_INT 1
11140: PPUSH
11141: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11145: LD_INT 12
11147: PPUSH
11148: LD_VAR 0 3
11152: PPUSH
11153: LD_INT 1
11155: PPUSH
11156: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11160: LD_INT 17
11162: PPUSH
11163: LD_VAR 0 3
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11175: LD_INT 18
11177: PPUSH
11178: LD_VAR 0 3
11182: PPUSH
11183: LD_INT 1
11185: PPUSH
11186: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11190: LD_INT 60
11192: PPUSH
11193: LD_VAR 0 3
11197: PPUSH
11198: LD_INT 1
11200: PPUSH
11201: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11205: LD_INT 32
11207: PPUSH
11208: LD_VAR 0 3
11212: PPUSH
11213: LD_INT 1
11215: PPUSH
11216: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11220: LD_INT 9
11222: PPUSH
11223: LD_VAR 0 3
11227: PPUSH
11228: LD_INT 1
11230: PPUSH
11231: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11235: LD_INT 57
11237: PPUSH
11238: LD_VAR 0 3
11242: PPUSH
11243: LD_INT 1
11245: PPUSH
11246: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11250: LD_INT 30
11252: PPUSH
11253: LD_VAR 0 3
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11265: LD_INT 37
11267: PPUSH
11268: LD_VAR 0 3
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11280: LD_INT 63
11282: PPUSH
11283: LD_VAR 0 3
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11295: LD_INT 3
11297: PPUSH
11298: LD_VAR 0 3
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11310: LD_INT 4
11312: PPUSH
11313: LD_VAR 0 3
11317: PPUSH
11318: LD_INT 1
11320: PPUSH
11321: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11325: LD_INT 5
11327: PPUSH
11328: LD_VAR 0 3
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11340: LD_INT 66
11342: PPUSH
11343: LD_VAR 0 3
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11355: LD_INT 21
11357: PPUSH
11358: LD_VAR 0 3
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11370: LD_INT 22
11372: PPUSH
11373: LD_VAR 0 3
11377: PPUSH
11378: LD_INT 1
11380: PPUSH
11381: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11385: LD_INT 19
11387: PPUSH
11388: LD_VAR 0 3
11392: PPUSH
11393: LD_INT 1
11395: PPUSH
11396: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11400: LD_INT 54
11402: PPUSH
11403: LD_VAR 0 3
11407: PPUSH
11408: LD_INT 1
11410: PPUSH
11411: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11415: LD_INT 55
11417: PPUSH
11418: LD_VAR 0 3
11422: PPUSH
11423: LD_INT 1
11425: PPUSH
11426: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11430: LD_INT 0
11432: PPUSH
11433: LD_VAR 0 3
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11445: LD_INT 1
11447: PPUSH
11448: LD_VAR 0 3
11452: PPUSH
11453: LD_INT 1
11455: PPUSH
11456: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11460: LD_INT 2
11462: PPUSH
11463: LD_VAR 0 3
11467: PPUSH
11468: LD_INT 1
11470: PPUSH
11471: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11475: LD_INT 3
11477: PPUSH
11478: LD_VAR 0 3
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11490: LD_INT 4
11492: PPUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 1
11500: PPUSH
11501: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11505: LD_INT 5
11507: PPUSH
11508: LD_VAR 0 3
11512: PPUSH
11513: LD_INT 1
11515: PPUSH
11516: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11520: LD_INT 6
11522: PPUSH
11523: LD_VAR 0 3
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11535: LD_INT 7
11537: PPUSH
11538: LD_VAR 0 3
11542: PPUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11550: LD_INT 8
11552: PPUSH
11553: LD_VAR 0 3
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11565: LD_INT 10
11567: PPUSH
11568: LD_VAR 0 3
11572: PPUSH
11573: LD_INT 1
11575: PPUSH
11576: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11580: LD_INT 11
11582: PPUSH
11583: LD_VAR 0 3
11587: PPUSH
11588: LD_INT 1
11590: PPUSH
11591: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11595: LD_INT 12
11597: PPUSH
11598: LD_VAR 0 3
11602: PPUSH
11603: LD_INT 1
11605: PPUSH
11606: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11610: LD_INT 13
11612: PPUSH
11613: LD_VAR 0 3
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11625: LD_INT 14
11627: PPUSH
11628: LD_VAR 0 3
11632: PPUSH
11633: LD_INT 1
11635: PPUSH
11636: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11640: LD_INT 15
11642: PPUSH
11643: LD_VAR 0 3
11647: PPUSH
11648: LD_INT 1
11650: PPUSH
11651: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11655: LD_INT 16
11657: PPUSH
11658: LD_VAR 0 3
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11670: LD_INT 17
11672: PPUSH
11673: LD_VAR 0 3
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11685: LD_INT 18
11687: PPUSH
11688: LD_VAR 0 3
11692: PPUSH
11693: LD_INT 1
11695: PPUSH
11696: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11700: LD_INT 19
11702: PPUSH
11703: LD_VAR 0 3
11707: PPUSH
11708: LD_INT 1
11710: PPUSH
11711: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11715: LD_INT 20
11717: PPUSH
11718: LD_VAR 0 3
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11730: LD_INT 21
11732: PPUSH
11733: LD_VAR 0 3
11737: PPUSH
11738: LD_INT 1
11740: PPUSH
11741: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11745: LD_INT 23
11747: PPUSH
11748: LD_VAR 0 3
11752: PPUSH
11753: LD_INT 1
11755: PPUSH
11756: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11760: LD_INT 26
11762: PPUSH
11763: LD_VAR 0 3
11767: PPUSH
11768: LD_INT 1
11770: PPUSH
11771: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11775: LD_INT 27
11777: PPUSH
11778: LD_VAR 0 3
11782: PPUSH
11783: LD_INT 1
11785: PPUSH
11786: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11790: LD_INT 28
11792: PPUSH
11793: LD_VAR 0 3
11797: PPUSH
11798: LD_INT 1
11800: PPUSH
11801: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11805: LD_INT 29
11807: PPUSH
11808: LD_VAR 0 3
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11820: LD_INT 30
11822: PPUSH
11823: LD_VAR 0 3
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11835: LD_INT 31
11837: PPUSH
11838: LD_VAR 0 3
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11850: LD_INT 32
11852: PPUSH
11853: LD_VAR 0 3
11857: PPUSH
11858: LD_INT 1
11860: PPUSH
11861: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11865: LD_INT 33
11867: PPUSH
11868: LD_VAR 0 3
11872: PPUSH
11873: LD_INT 1
11875: PPUSH
11876: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11880: LD_INT 36
11882: PPUSH
11883: LD_VAR 0 3
11887: PPUSH
11888: LD_INT 1
11890: PPUSH
11891: CALL_OW 324
// end ; 6 :
11895: GO 12905
11897: LD_INT 6
11899: DOUBLE
11900: EQUAL
11901: IFTRUE 11905
11903: GO 12830
11905: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11906: LD_INT 35
11908: PPUSH
11909: LD_VAR 0 3
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11921: LD_INT 45
11923: PPUSH
11924: LD_VAR 0 3
11928: PPUSH
11929: LD_INT 1
11931: PPUSH
11932: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11936: LD_INT 46
11938: PPUSH
11939: LD_VAR 0 3
11943: PPUSH
11944: LD_INT 1
11946: PPUSH
11947: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11951: LD_INT 47
11953: PPUSH
11954: LD_VAR 0 3
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11966: LD_INT 1
11968: PPUSH
11969: LD_VAR 0 3
11973: PPUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11981: LD_INT 2
11983: PPUSH
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 1
11991: PPUSH
11992: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11996: LD_INT 11
11998: PPUSH
11999: LD_VAR 0 3
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12011: LD_INT 20
12013: PPUSH
12014: LD_VAR 0 3
12018: PPUSH
12019: LD_INT 1
12021: PPUSH
12022: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12026: LD_INT 48
12028: PPUSH
12029: LD_VAR 0 3
12033: PPUSH
12034: LD_INT 1
12036: PPUSH
12037: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12041: LD_INT 49
12043: PPUSH
12044: LD_VAR 0 3
12048: PPUSH
12049: LD_INT 1
12051: PPUSH
12052: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12056: LD_INT 50
12058: PPUSH
12059: LD_VAR 0 3
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12071: LD_INT 69
12073: PPUSH
12074: LD_VAR 0 3
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12086: LD_INT 39
12088: PPUSH
12089: LD_VAR 0 3
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12101: LD_INT 34
12103: PPUSH
12104: LD_VAR 0 3
12108: PPUSH
12109: LD_INT 1
12111: PPUSH
12112: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12116: LD_INT 42
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12131: LD_INT 44
12133: PPUSH
12134: LD_VAR 0 3
12138: PPUSH
12139: LD_INT 1
12141: PPUSH
12142: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12146: LD_INT 41
12148: PPUSH
12149: LD_VAR 0 3
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12161: LD_INT 13
12163: PPUSH
12164: LD_VAR 0 3
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12176: LD_INT 40
12178: PPUSH
12179: LD_VAR 0 3
12183: PPUSH
12184: LD_INT 1
12186: PPUSH
12187: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12191: LD_INT 43
12193: PPUSH
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12206: LD_INT 70
12208: PPUSH
12209: LD_VAR 0 3
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12221: LD_INT 23
12223: PPUSH
12224: LD_VAR 0 3
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12236: LD_INT 51
12238: PPUSH
12239: LD_VAR 0 3
12243: PPUSH
12244: LD_INT 1
12246: PPUSH
12247: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12251: LD_INT 52
12253: PPUSH
12254: LD_VAR 0 3
12258: PPUSH
12259: LD_INT 1
12261: PPUSH
12262: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12266: LD_INT 6
12268: PPUSH
12269: LD_VAR 0 3
12273: PPUSH
12274: LD_INT 1
12276: PPUSH
12277: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12281: LD_INT 15
12283: PPUSH
12284: LD_VAR 0 3
12288: PPUSH
12289: LD_INT 1
12291: PPUSH
12292: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12296: LD_INT 7
12298: PPUSH
12299: LD_VAR 0 3
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12311: LD_INT 12
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12326: LD_INT 10
12328: PPUSH
12329: LD_VAR 0 3
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12341: LD_INT 17
12343: PPUSH
12344: LD_VAR 0 3
12348: PPUSH
12349: LD_INT 1
12351: PPUSH
12352: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12356: LD_INT 18
12358: PPUSH
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 1
12366: PPUSH
12367: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12371: LD_INT 60
12373: PPUSH
12374: LD_VAR 0 3
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12386: LD_INT 61
12388: PPUSH
12389: LD_VAR 0 3
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12401: LD_INT 32
12403: PPUSH
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12416: LD_INT 27
12418: PPUSH
12419: LD_VAR 0 3
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12431: LD_INT 36
12433: PPUSH
12434: LD_VAR 0 3
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12446: LD_INT 33
12448: PPUSH
12449: LD_VAR 0 3
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12461: LD_INT 9
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12476: LD_INT 38
12478: PPUSH
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12491: LD_INT 57
12493: PPUSH
12494: LD_VAR 0 3
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12506: LD_INT 58
12508: PPUSH
12509: LD_VAR 0 3
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12521: LD_INT 28
12523: PPUSH
12524: LD_VAR 0 3
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12536: LD_INT 29
12538: PPUSH
12539: LD_VAR 0 3
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12551: LD_INT 30
12553: PPUSH
12554: LD_VAR 0 3
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12566: LD_INT 37
12568: PPUSH
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12581: LD_INT 63
12583: PPUSH
12584: LD_VAR 0 3
12588: PPUSH
12589: LD_INT 1
12591: PPUSH
12592: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12596: LD_INT 64
12598: PPUSH
12599: LD_VAR 0 3
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12611: LD_INT 3
12613: PPUSH
12614: LD_VAR 0 3
12618: PPUSH
12619: LD_INT 1
12621: PPUSH
12622: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12626: LD_INT 4
12628: PPUSH
12629: LD_VAR 0 3
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12641: LD_INT 5
12643: PPUSH
12644: LD_VAR 0 3
12648: PPUSH
12649: LD_INT 1
12651: PPUSH
12652: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12656: LD_INT 8
12658: PPUSH
12659: LD_VAR 0 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12671: LD_INT 66
12673: PPUSH
12674: LD_VAR 0 3
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12686: LD_INT 67
12688: PPUSH
12689: LD_VAR 0 3
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12701: LD_INT 21
12703: PPUSH
12704: LD_VAR 0 3
12708: PPUSH
12709: LD_INT 1
12711: PPUSH
12712: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12716: LD_INT 22
12718: PPUSH
12719: LD_VAR 0 3
12723: PPUSH
12724: LD_INT 1
12726: PPUSH
12727: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12731: LD_INT 19
12733: PPUSH
12734: LD_VAR 0 3
12738: PPUSH
12739: LD_INT 1
12741: PPUSH
12742: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12746: LD_INT 26
12748: PPUSH
12749: LD_VAR 0 3
12753: PPUSH
12754: LD_INT 1
12756: PPUSH
12757: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12761: LD_INT 54
12763: PPUSH
12764: LD_VAR 0 3
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12776: LD_INT 55
12778: PPUSH
12779: LD_VAR 0 3
12783: PPUSH
12784: LD_INT 1
12786: PPUSH
12787: CALL_OW 322
// for i = 0 to 39 do
12791: LD_ADDR_VAR 0 4
12795: PUSH
12796: DOUBLE
12797: LD_INT 0
12799: DEC
12800: ST_TO_ADDR
12801: LD_INT 39
12803: PUSH
12804: FOR_TO
12805: IFFALSE 12826
// SetRestrict ( i , side , true ) ;
12807: LD_VAR 0 4
12811: PPUSH
12812: LD_VAR 0 3
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: CALL_OW 324
12824: GO 12804
12826: POP
12827: POP
// end ; else
12828: GO 12905
12830: POP
// begin for i = 1 to 73 do
12831: LD_ADDR_VAR 0 4
12835: PUSH
12836: DOUBLE
12837: LD_INT 1
12839: DEC
12840: ST_TO_ADDR
12841: LD_INT 73
12843: PUSH
12844: FOR_TO
12845: IFFALSE 12866
// SetTech ( i , side , state_enabled ) ;
12847: LD_VAR 0 4
12851: PPUSH
12852: LD_VAR 0 3
12856: PPUSH
12857: LD_INT 1
12859: PPUSH
12860: CALL_OW 322
12864: GO 12844
12866: POP
12867: POP
// for i = 0 to 39 do
12868: LD_ADDR_VAR 0 4
12872: PUSH
12873: DOUBLE
12874: LD_INT 0
12876: DEC
12877: ST_TO_ADDR
12878: LD_INT 39
12880: PUSH
12881: FOR_TO
12882: IFFALSE 12903
// SetRestrict ( i , side , true ) ;
12884: LD_VAR 0 4
12888: PPUSH
12889: LD_VAR 0 3
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: CALL_OW 324
12901: GO 12881
12903: POP
12904: POP
// end ; end ; end ;
12905: GO 8910
12907: POP
12908: POP
// end ; end_of_file
12909: LD_VAR 0 2
12913: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12914: LD_INT 0
12916: PPUSH
12917: PPUSH
12918: PPUSH
12919: PPUSH
12920: PPUSH
12921: PPUSH
12922: PPUSH
12923: PPUSH
12924: PPUSH
// for i := 1 to 8 do
12925: LD_ADDR_VAR 0 2
12929: PUSH
12930: DOUBLE
12931: LD_INT 1
12933: DEC
12934: ST_TO_ADDR
12935: LD_INT 8
12937: PUSH
12938: FOR_TO
12939: IFFALSE 13323
// begin if Side_Positions [ i ] then
12941: LD_EXP 34
12945: PUSH
12946: LD_VAR 0 2
12950: ARRAY
12951: IFFALSE 13321
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12953: LD_ADDR_VAR 0 7
12957: PUSH
12958: LD_INT 22
12960: PUSH
12961: LD_VAR 0 2
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 21
12972: PUSH
12973: LD_INT 1
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PPUSH
12984: CALL_OW 69
12988: PUSH
12989: LD_INT 0
12991: PLUS
12992: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12993: LD_ADDR_VAR 0 9
12997: PUSH
12998: LD_INT 22
13000: PUSH
13001: LD_VAR 0 2
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 2
13012: PUSH
13013: LD_INT 30
13015: PUSH
13016: LD_INT 0
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PUSH
13023: LD_INT 30
13025: PUSH
13026: LD_INT 1
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PPUSH
13042: CALL_OW 69
13046: ST_TO_ADDR
// crates := 0 ;
13047: LD_ADDR_VAR 0 4
13051: PUSH
13052: LD_INT 0
13054: ST_TO_ADDR
// oil := 0 ;
13055: LD_ADDR_VAR 0 5
13059: PUSH
13060: LD_INT 0
13062: ST_TO_ADDR
// sib := 0 ;
13063: LD_ADDR_VAR 0 6
13067: PUSH
13068: LD_INT 0
13070: ST_TO_ADDR
// if bases then
13071: LD_VAR 0 9
13075: IFFALSE 13181
// begin for j in bases do
13077: LD_ADDR_VAR 0 3
13081: PUSH
13082: LD_VAR 0 9
13086: PUSH
13087: FOR_IN
13088: IFFALSE 13179
// begin base := GetBase ( j ) ;
13090: LD_ADDR_VAR 0 8
13094: PUSH
13095: LD_VAR 0 3
13099: PPUSH
13100: CALL_OW 274
13104: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13105: LD_ADDR_VAR 0 4
13109: PUSH
13110: LD_VAR 0 4
13114: PUSH
13115: LD_VAR 0 8
13119: PPUSH
13120: LD_INT 1
13122: PPUSH
13123: CALL_OW 275
13127: PLUS
13128: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13129: LD_ADDR_VAR 0 5
13133: PUSH
13134: LD_VAR 0 5
13138: PUSH
13139: LD_VAR 0 8
13143: PPUSH
13144: LD_INT 2
13146: PPUSH
13147: CALL_OW 275
13151: PLUS
13152: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13153: LD_ADDR_VAR 0 6
13157: PUSH
13158: LD_VAR 0 6
13162: PUSH
13163: LD_VAR 0 8
13167: PPUSH
13168: LD_INT 3
13170: PPUSH
13171: CALL_OW 275
13175: PLUS
13176: ST_TO_ADDR
// end ;
13177: GO 13087
13179: POP
13180: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13181: LD_STRING setSpecText(
13183: PUSH
13184: LD_VAR 0 2
13188: STR
13189: PUSH
13190: LD_STRING ,
13192: STR
13193: PUSH
13194: LD_INT 2
13196: STR
13197: PUSH
13198: LD_STRING ,
13200: STR
13201: PUSH
13202: LD_VAR 0 4
13206: STR
13207: PUSH
13208: LD_STRING )
13210: STR
13211: PPUSH
13212: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13216: LD_STRING setSpecText(
13218: PUSH
13219: LD_VAR 0 2
13223: STR
13224: PUSH
13225: LD_STRING ,
13227: STR
13228: PUSH
13229: LD_INT 3
13231: STR
13232: PUSH
13233: LD_STRING ,
13235: STR
13236: PUSH
13237: LD_VAR 0 5
13241: STR
13242: PUSH
13243: LD_STRING )
13245: STR
13246: PPUSH
13247: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13251: LD_STRING setSpecText(
13253: PUSH
13254: LD_VAR 0 2
13258: STR
13259: PUSH
13260: LD_STRING ,
13262: STR
13263: PUSH
13264: LD_INT 4
13266: STR
13267: PUSH
13268: LD_STRING ,
13270: STR
13271: PUSH
13272: LD_VAR 0 6
13276: STR
13277: PUSH
13278: LD_STRING )
13280: STR
13281: PPUSH
13282: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13286: LD_STRING setSpecText(
13288: PUSH
13289: LD_VAR 0 2
13293: STR
13294: PUSH
13295: LD_STRING ,
13297: STR
13298: PUSH
13299: LD_INT 5
13301: STR
13302: PUSH
13303: LD_STRING ,
13305: STR
13306: PUSH
13307: LD_VAR 0 7
13311: STR
13312: PUSH
13313: LD_STRING )
13315: STR
13316: PPUSH
13317: CALL_OW 559
// end ; end ;
13321: GO 12938
13323: POP
13324: POP
// end ;
13325: LD_VAR 0 1
13329: RET
// every 0 0$1 do
13330: GO 13332
13332: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13333: LD_STRING setSpecLogoNumber(
13335: PUSH
13336: LD_INT 2
13338: STR
13339: PUSH
13340: LD_STRING ,
13342: STR
13343: PUSH
13344: LD_INT 1
13346: STR
13347: PUSH
13348: LD_STRING )
13350: STR
13351: PPUSH
13352: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13356: LD_STRING setSpecLogoNumber(
13358: PUSH
13359: LD_INT 3
13361: STR
13362: PUSH
13363: LD_STRING ,
13365: STR
13366: PUSH
13367: LD_INT 2
13369: STR
13370: PUSH
13371: LD_STRING )
13373: STR
13374: PPUSH
13375: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13379: LD_STRING setSpecLogoNumber(
13381: PUSH
13382: LD_INT 4
13384: STR
13385: PUSH
13386: LD_STRING ,
13388: STR
13389: PUSH
13390: LD_INT 3
13392: STR
13393: PUSH
13394: LD_STRING )
13396: STR
13397: PPUSH
13398: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13402: LD_STRING setSpecLogoNumber(
13404: PUSH
13405: LD_INT 5
13407: STR
13408: PUSH
13409: LD_STRING ,
13411: STR
13412: PUSH
13413: LD_INT 4
13415: STR
13416: PUSH
13417: LD_STRING )
13419: STR
13420: PPUSH
13421: CALL_OW 559
// end ;
13425: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13426: LD_INT 2
13428: PUSH
13429: LD_INT 30
13431: PUSH
13432: LD_INT 0
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 30
13441: PUSH
13442: LD_INT 1
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: PPUSH
13454: CALL_OW 69
13458: IFFALSE 13468
13460: GO 13462
13462: DISABLE
// begin enable ;
13463: ENABLE
// UpdateSpectatorBar ;
13464: CALL 12914 0 0
// end ; end_of_file
13468: END
// var respawn , inqueue ; export function init_respawning ; begin
13469: LD_INT 0
13471: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13472: LD_ADDR_LOC 18
13476: PUSH
13477: LD_INT 1
13479: PPUSH
13480: LD_INT 8
13482: PPUSH
13483: CALL_OW 12
13487: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13488: LD_ADDR_LOC 19
13492: PUSH
13493: LD_INT 0
13495: PUSH
13496: LD_INT 0
13498: PUSH
13499: LD_INT 0
13501: PUSH
13502: LD_INT 0
13504: PUSH
13505: LD_INT 0
13507: PUSH
13508: LD_INT 0
13510: PUSH
13511: LD_INT 0
13513: PUSH
13514: LD_INT 0
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: ST_TO_ADDR
// end ;
13527: LD_VAR 0 1
13531: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13532: GO 13534
13534: DISABLE
13535: LD_INT 0
13537: PPUSH
13538: PPUSH
13539: PPUSH
// begin if respawning_time_max = 0 then
13540: LD_EXP 28
13544: PUSH
13545: LD_INT 0
13547: EQUAL
13548: IFFALSE 13552
// exit ;
13550: GO 13960
// if respawn = 8 then
13552: LD_LOC 18
13556: PUSH
13557: LD_INT 8
13559: EQUAL
13560: IFFALSE 13572
// respawn := 1 else
13562: LD_ADDR_LOC 18
13566: PUSH
13567: LD_INT 1
13569: ST_TO_ADDR
13570: GO 13586
// respawn := respawn + 1 ;
13572: LD_ADDR_LOC 18
13576: PUSH
13577: LD_LOC 18
13581: PUSH
13582: LD_INT 1
13584: PLUS
13585: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13586: LD_EXP 34
13590: PUSH
13591: LD_LOC 18
13595: ARRAY
13596: PUSH
13597: LD_LOC 19
13601: PUSH
13602: LD_LOC 18
13606: ARRAY
13607: NOT
13608: AND
13609: IFFALSE 13959
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13611: LD_ADDR_VAR 0 1
13615: PUSH
13616: LD_INT 21
13618: PUSH
13619: LD_INT 1
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 22
13628: PUSH
13629: LD_LOC 18
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: LD_INT 3
13640: PUSH
13641: LD_INT 23
13643: PUSH
13644: LD_INT 0
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PPUSH
13657: CALL_OW 69
13661: ST_TO_ADDR
// if n < number_of_people then
13662: LD_VAR 0 1
13666: PUSH
13667: LD_EXP 19
13671: LESS
13672: IFFALSE 13956
// begin aktresp := respawn ;
13674: LD_ADDR_VAR 0 3
13678: PUSH
13679: LD_LOC 18
13683: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13684: LD_ADDR_LOC 19
13688: PUSH
13689: LD_LOC 19
13693: PPUSH
13694: LD_VAR 0 3
13698: PPUSH
13699: LD_INT 1
13701: PPUSH
13702: CALL_OW 1
13706: ST_TO_ADDR
// enable ;
13707: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13708: LD_EXP 27
13712: PPUSH
13713: LD_EXP 28
13717: PPUSH
13718: CALL_OW 12
13722: PPUSH
13723: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13727: LD_ADDR_LOC 19
13731: PUSH
13732: LD_LOC 19
13736: PPUSH
13737: LD_VAR 0 3
13741: PPUSH
13742: LD_INT 0
13744: PPUSH
13745: CALL_OW 1
13749: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13750: LD_ADDR_VAR 0 2
13754: PUSH
13755: LD_INT 21
13757: PUSH
13758: LD_INT 3
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 2
13767: PUSH
13768: LD_INT 30
13770: PUSH
13771: LD_INT 0
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 30
13780: PUSH
13781: LD_INT 1
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 50
13795: PUSH
13796: EMPTY
13797: LIST
13798: PUSH
13799: LD_INT 22
13801: PUSH
13802: LD_VAR 0 3
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: PPUSH
13817: CALL_OW 69
13821: ST_TO_ADDR
// if dep = 0 then
13822: LD_VAR 0 2
13826: PUSH
13827: LD_INT 0
13829: EQUAL
13830: IFFALSE 13834
// exit ;
13832: GO 13960
// hc_name :=  ;
13834: LD_ADDR_OWVAR 26
13838: PUSH
13839: LD_STRING 
13841: ST_TO_ADDR
// hc_importance := 0 ;
13842: LD_ADDR_OWVAR 32
13846: PUSH
13847: LD_INT 0
13849: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13850: LD_INT 0
13852: PPUSH
13853: LD_INT 0
13855: PPUSH
13856: LD_EXP 20
13860: PUSH
13861: LD_INT 2
13863: DIV
13864: PPUSH
13865: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13869: LD_ADDR_OWVAR 21
13873: PUSH
13874: LD_EXP 35
13878: PUSH
13879: LD_VAR 0 3
13883: ARRAY
13884: ST_TO_ADDR
// uc_side := aktresp ;
13885: LD_ADDR_OWVAR 20
13889: PUSH
13890: LD_VAR 0 3
13894: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13895: LD_ADDR_VAR 0 2
13899: PUSH
13900: LD_VAR 0 2
13904: PUSH
13905: LD_INT 1
13907: PPUSH
13908: LD_VAR 0 2
13912: PPUSH
13913: CALL_OW 12
13917: ARRAY
13918: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13919: CALL_OW 44
13923: PPUSH
13924: LD_VAR 0 2
13928: PPUSH
13929: CALL_OW 250
13933: PPUSH
13934: LD_VAR 0 2
13938: PPUSH
13939: CALL_OW 251
13943: PPUSH
13944: LD_INT 7
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: CALL_OW 50
// end else
13954: GO 13957
// enable ;
13956: ENABLE
// end else
13957: GO 13960
// enable ;
13959: ENABLE
// end ; end_of_file
13960: PPOPN 3
13962: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13963: LD_INT 0
13965: PPUSH
13966: PPUSH
13967: PPUSH
// BuildUpTime_Delay = 0 ;
13968: LD_ADDR_EXP 57
13972: PUSH
13973: LD_INT 0
13975: ST_TO_ADDR
// if not def_builduptime then
13976: LD_EXP 14
13980: NOT
13981: IFFALSE 13985
// exit ;
13983: GO 14168
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13985: LD_ADDR_EXP 57
13989: PUSH
13990: LD_INT 8400
13992: PUSH
13993: LD_INT 2100
13995: PUSH
13996: LD_EXP 14
14000: MUL
14001: PLUS
14002: ST_TO_ADDR
// BuildUpTimeActive := true ;
14003: LD_ADDR_EXP 56
14007: PUSH
14008: LD_INT 1
14010: ST_TO_ADDR
// for i := 1 to 8 do
14011: LD_ADDR_VAR 0 2
14015: PUSH
14016: DOUBLE
14017: LD_INT 1
14019: DEC
14020: ST_TO_ADDR
14021: LD_INT 8
14023: PUSH
14024: FOR_TO
14025: IFFALSE 14166
// if Side_Positions [ i ] then
14027: LD_EXP 34
14031: PUSH
14032: LD_VAR 0 2
14036: ARRAY
14037: IFFALSE 14164
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14039: LD_EXP 55
14043: PUSH
14044: LD_EXP 34
14048: PUSH
14049: LD_VAR 0 2
14053: ARRAY
14054: ARRAY
14055: PPUSH
14056: LD_INT 5
14058: PPUSH
14059: CALL_OW 424
// for j := 1 to 8 do
14063: LD_ADDR_VAR 0 3
14067: PUSH
14068: DOUBLE
14069: LD_INT 1
14071: DEC
14072: ST_TO_ADDR
14073: LD_INT 8
14075: PUSH
14076: FOR_TO
14077: IFFALSE 14162
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14079: LD_EXP 34
14083: PUSH
14084: LD_VAR 0 3
14088: ARRAY
14089: PUSH
14090: LD_EXP 31
14094: PUSH
14095: LD_VAR 0 2
14099: ARRAY
14100: PUSH
14101: LD_EXP 31
14105: PUSH
14106: LD_VAR 0 3
14110: ARRAY
14111: NONEQUAL
14112: PUSH
14113: LD_EXP 36
14117: NOT
14118: PUSH
14119: LD_VAR 0 2
14123: PUSH
14124: LD_VAR 0 3
14128: NONEQUAL
14129: AND
14130: OR
14131: AND
14132: IFFALSE 14160
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14134: LD_VAR 0 3
14138: PPUSH
14139: LD_EXP 55
14143: PUSH
14144: LD_EXP 34
14148: PUSH
14149: LD_VAR 0 2
14153: ARRAY
14154: ARRAY
14155: PPUSH
14156: CALL_OW 333
14160: GO 14076
14162: POP
14163: POP
// end ;
14164: GO 14024
14166: POP
14167: POP
// end ;
14168: LD_VAR 0 1
14172: RET
// export function EndBuildUp ; var i , j ; begin
14173: LD_INT 0
14175: PPUSH
14176: PPUSH
14177: PPUSH
// BuildUpTimeActive := false ;
14178: LD_ADDR_EXP 56
14182: PUSH
14183: LD_INT 0
14185: ST_TO_ADDR
// for i := 1 to 8 do
14186: LD_ADDR_VAR 0 2
14190: PUSH
14191: DOUBLE
14192: LD_INT 1
14194: DEC
14195: ST_TO_ADDR
14196: LD_INT 8
14198: PUSH
14199: FOR_TO
14200: IFFALSE 14341
// if Side_Positions [ i ] then
14202: LD_EXP 34
14206: PUSH
14207: LD_VAR 0 2
14211: ARRAY
14212: IFFALSE 14339
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14214: LD_EXP 55
14218: PUSH
14219: LD_EXP 34
14223: PUSH
14224: LD_VAR 0 2
14228: ARRAY
14229: ARRAY
14230: PPUSH
14231: LD_INT 0
14233: PPUSH
14234: CALL_OW 424
// for j := 1 to 8 do
14238: LD_ADDR_VAR 0 3
14242: PUSH
14243: DOUBLE
14244: LD_INT 1
14246: DEC
14247: ST_TO_ADDR
14248: LD_INT 8
14250: PUSH
14251: FOR_TO
14252: IFFALSE 14337
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14254: LD_EXP 34
14258: PUSH
14259: LD_VAR 0 3
14263: ARRAY
14264: PUSH
14265: LD_EXP 31
14269: PUSH
14270: LD_VAR 0 2
14274: ARRAY
14275: PUSH
14276: LD_EXP 31
14280: PUSH
14281: LD_VAR 0 3
14285: ARRAY
14286: NONEQUAL
14287: PUSH
14288: LD_EXP 36
14292: NOT
14293: PUSH
14294: LD_VAR 0 2
14298: PUSH
14299: LD_VAR 0 3
14303: NONEQUAL
14304: AND
14305: OR
14306: AND
14307: IFFALSE 14335
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14309: LD_VAR 0 3
14313: PPUSH
14314: LD_EXP 55
14318: PUSH
14319: LD_EXP 34
14323: PUSH
14324: LD_VAR 0 2
14328: ARRAY
14329: ARRAY
14330: PPUSH
14331: CALL_OW 334
14335: GO 14251
14337: POP
14338: POP
// end ;
14339: GO 14199
14341: POP
14342: POP
// end ;
14343: LD_VAR 0 1
14347: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14348: LD_EXP 56
14352: IFFALSE 14527
14354: GO 14356
14356: DISABLE
14357: LD_INT 0
14359: PPUSH
14360: PPUSH
// begin for i := 1 to 8 do
14361: LD_ADDR_VAR 0 1
14365: PUSH
14366: DOUBLE
14367: LD_INT 1
14369: DEC
14370: ST_TO_ADDR
14371: LD_INT 8
14373: PUSH
14374: FOR_TO
14375: IFFALSE 14524
// if Side_Positions [ i ] then
14377: LD_EXP 34
14381: PUSH
14382: LD_VAR 0 1
14386: ARRAY
14387: IFFALSE 14522
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_EXP 55
14398: PUSH
14399: LD_EXP 34
14403: PUSH
14404: LD_VAR 0 1
14408: ARRAY
14409: ARRAY
14410: PPUSH
14411: LD_INT 2
14413: PUSH
14414: LD_INT 21
14416: PUSH
14417: LD_INT 1
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: LD_INT 21
14426: PUSH
14427: LD_INT 2
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 22
14441: PUSH
14442: LD_OWVAR 2
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PPUSH
14455: CALL_OW 70
14459: PUSH
14460: FOR_IN
14461: IFFALSE 14520
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14463: LD_EXP 31
14467: PUSH
14468: LD_VAR 0 1
14472: ARRAY
14473: PUSH
14474: LD_EXP 31
14478: PUSH
14479: LD_OWVAR 2
14483: ARRAY
14484: NONEQUAL
14485: PUSH
14486: LD_EXP 36
14490: NOT
14491: PUSH
14492: LD_VAR 0 1
14496: PUSH
14497: LD_OWVAR 2
14501: NONEQUAL
14502: AND
14503: OR
14504: IFFALSE 14518
// ComMoveToArea ( un , BuildUpEscape ) ;
14506: LD_VAR 0 2
14510: PPUSH
14511: LD_INT 16
14513: PPUSH
14514: CALL_OW 113
14518: GO 14460
14520: POP
14521: POP
14522: GO 14374
14524: POP
14525: POP
// enable ;
14526: ENABLE
// end ;
14527: PPOPN 2
14529: END
// every 0 0$1 trigger def_builduptime do
14530: LD_EXP 14
14534: IFFALSE 14560
14536: GO 14538
14538: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14539: LD_INT 8400
14541: PUSH
14542: LD_EXP 14
14546: PUSH
14547: LD_INT 2100
14549: MUL
14550: PLUS
14551: PPUSH
14552: CALL_OW 67
// EndBuildUp ;
14556: CALL 14173 0 0
// end ;
14560: END
