// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 360
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 ] , [ 5 , 6 , 7 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 5
 344: PUSH
 345: LD_INT 6
 347: PUSH
 348: LD_INT 7
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 360: LD_ADDR_EXP 36
 364: PUSH
 365: LD_EXP 31
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: DIFF
 376: PUSH
 377: LD_INT 1
 379: GREATER
 380: ST_TO_ADDR
// if Multiplayer then
 381: LD_OWVAR 4
 385: IFFALSE 592
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 387: LD_ADDR_EXP 1
 391: PUSH
 392: LD_INT 0
 394: PPUSH
 395: CALL_OW 426
 399: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 400: LD_ADDR_EXP 2
 404: PUSH
 405: LD_INT 1
 407: PPUSH
 408: CALL_OW 426
 412: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 413: LD_ADDR_EXP 3
 417: PUSH
 418: LD_INT 2
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 426: LD_ADDR_EXP 4
 430: PUSH
 431: LD_INT 3
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 439: LD_ADDR_EXP 5
 443: PUSH
 444: LD_INT 4
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 452: LD_ADDR_EXP 6
 456: PUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 465: LD_ADDR_EXP 7
 469: PUSH
 470: LD_INT 6
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 478: LD_ADDR_EXP 8
 482: PUSH
 483: LD_INT 10
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 491: LD_ADDR_EXP 9
 495: PUSH
 496: LD_INT 11
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 504: LD_ADDR_EXP 10
 508: PUSH
 509: LD_INT 12
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 517: LD_ADDR_EXP 11
 521: PUSH
 522: LD_INT 13
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 530: LD_ADDR_EXP 12
 534: PUSH
 535: LD_INT 14
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 543: LD_ADDR_EXP 13
 547: PUSH
 548: LD_INT 17
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 556: LD_ADDR_EXP 14
 560: PUSH
 561: LD_INT 20
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 569: LD_ADDR_VAR 0 3
 573: PUSH
 574: LD_INT 22
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// def_win_rules = 0 ;
 582: LD_ADDR_EXP 30
 586: PUSH
 587: LD_INT 0
 589: ST_TO_ADDR
// end else
 590: GO 724
// begin Randomize ;
 592: CALL_OW 10
// def_base_level := 2 ;
 596: LD_ADDR_EXP 1
 600: PUSH
 601: LD_INT 2
 603: ST_TO_ADDR
// def_amount_of_people := 2 ;
 604: LD_ADDR_EXP 2
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_skill_level := 1 ;
 612: LD_ADDR_EXP 3
 616: PUSH
 617: LD_INT 1
 619: ST_TO_ADDR
// def_starting_resources := 2 ;
 620: LD_ADDR_EXP 4
 624: PUSH
 625: LD_INT 2
 627: ST_TO_ADDR
// def_shipments_density := 50 ;
 628: LD_ADDR_EXP 5
 632: PUSH
 633: LD_INT 50
 635: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 636: LD_ADDR_EXP 6
 640: PUSH
 641: LD_INT 2
 643: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 644: LD_ADDR_EXP 7
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_shared_vision := 1 ;
 652: LD_ADDR_EXP 8
 656: PUSH
 657: LD_INT 1
 659: ST_TO_ADDR
// def_morale_flags := 1 ;
 660: LD_ADDR_EXP 9
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_siberite_detection := 1 ;
 668: LD_ADDR_EXP 10
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_people_respawning := 2 ;
 676: LD_ADDR_EXP 11
 680: PUSH
 681: LD_INT 2
 683: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 684: LD_ADDR_EXP 12
 688: PUSH
 689: LD_INT 3
 691: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 692: LD_ADDR_EXP 13
 696: PUSH
 697: LD_INT 2
 699: ST_TO_ADDR
// def_builduptime := 1 ;
 700: LD_ADDR_EXP 14
 704: PUSH
 705: LD_INT 1
 707: ST_TO_ADDR
// tech_level = 4 ;
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_INT 4
 715: ST_TO_ADDR
// def_win_rules = 0 ;
 716: LD_ADDR_EXP 30
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// end ; if isSGUI then
 724: LD_OWVAR 83
 728: IFFALSE 736
// setMpTechs ( ) else
 730: CALL 8767 0 0
 734: GO 749
// SetMpTechLevel ( tech_level + 1 ) ;
 736: LD_VAR 0 3
 740: PUSH
 741: LD_INT 1
 743: PLUS
 744: PPUSH
 745: CALL 8914 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 749: LD_ADDR_EXP 17
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 1
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: PUSH
 768: LD_EXP 1
 772: PUSH
 773: LD_INT 1
 775: PLUS
 776: ARRAY
 777: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 778: LD_ADDR_EXP 18
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PUSH
 797: LD_EXP 1
 801: PUSH
 802: LD_INT 1
 804: PLUS
 805: ARRAY
 806: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 807: LD_ADDR_EXP 19
 811: PUSH
 812: LD_INT 9
 814: PUSH
 815: LD_INT 12
 817: PUSH
 818: LD_INT 15
 820: PUSH
 821: LD_INT 24
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_EXP 2
 834: PUSH
 835: LD_INT 1
 837: PLUS
 838: ARRAY
 839: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 840: LD_ADDR_EXP 20
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: LD_INT 3
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 5
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: LD_EXP 3
 867: PUSH
 868: LD_INT 1
 870: PLUS
 871: ARRAY
 872: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 873: LD_ADDR_EXP 22
 877: PUSH
 878: LD_INT 0
 880: PUSH
 881: LD_INT 0
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 30
 894: PUSH
 895: LD_INT 0
 897: PUSH
 898: LD_INT 0
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 50
 908: PUSH
 909: LD_INT 20
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_INT 80
 922: PUSH
 923: LD_INT 40
 925: PUSH
 926: LD_INT 20
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_EXP 4
 944: PUSH
 945: LD_INT 1
 947: PLUS
 948: ARRAY
 949: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 950: LD_ADDR_EXP 21
 954: PUSH
 955: LD_INT 10
 957: PUSH
 958: EMPTY
 959: LIST
 960: PUSH
 961: LD_INT 7
 963: PUSH
 964: LD_INT 14
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 6
 973: PUSH
 974: LD_INT 12
 976: PUSH
 977: LD_INT 18
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 5
 987: PUSH
 988: LD_INT 10
 990: PUSH
 991: LD_INT 15
 993: PUSH
 994: LD_INT 20
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: LD_EXP 4
1013: PUSH
1014: LD_INT 1
1016: PLUS
1017: ARRAY
1018: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1019: LD_ADDR_EXP 23
1023: PUSH
1024: LD_INT 150
1026: PUSH
1027: LD_EXP 5
1031: MINUS
1032: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1033: LD_ADDR_EXP 27
1037: PUSH
1038: LD_INT 0
1040: PUSH
1041: LD_INT 10500
1043: PUSH
1044: LD_INT 6300
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_EXP 11
1056: PUSH
1057: LD_INT 1
1059: PLUS
1060: ARRAY
1061: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1062: LD_ADDR_EXP 28
1066: PUSH
1067: LD_INT 0
1069: PUSH
1070: LD_INT 31500
1072: PUSH
1073: LD_INT 10500
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_EXP 11
1085: PUSH
1086: LD_INT 1
1088: PLUS
1089: ARRAY
1090: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1091: LD_ADDR_EXP 25
1095: PUSH
1096: LD_INT 0
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 2
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_EXP 12
1118: PUSH
1119: LD_INT 1
1121: PLUS
1122: ARRAY
1123: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1124: LD_ADDR_EXP 24
1128: PUSH
1129: LD_INT 1
1131: NEG
1132: PUSH
1133: LD_INT 350
1135: PUSH
1136: LD_INT 700
1138: PUSH
1139: LD_INT 1400
1141: PUSH
1142: LD_INT 0
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_EXP 9
1156: PUSH
1157: LD_INT 1
1159: PLUS
1160: ARRAY
1161: ST_TO_ADDR
// battle_flags_id := [ ] ;
1162: LD_ADDR_EXP 44
1166: PUSH
1167: EMPTY
1168: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1169: LD_ADDR_EXP 29
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: LD_INT 63000
1182: PUSH
1183: LD_INT 126000
1185: PUSH
1186: LD_INT 189000
1188: PUSH
1189: LD_INT 252000
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: LIST
1199: PUSH
1200: LD_EXP 13
1204: PUSH
1205: LD_INT 1
1207: PLUS
1208: ARRAY
1209: ST_TO_ADDR
// end ;
1210: LD_VAR 0 1
1214: RET
// function init_map ; var i , j ; begin
1215: LD_INT 0
1217: PPUSH
1218: PPUSH
1219: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 8 ] , [ 38 , 59 ] , [ 72 , 135 ] , [ 218 , 13 ] , [ 241 , 57 ] , [ 265 , 135 ] ] ;
1220: LD_ADDR_EXP 40
1224: PUSH
1225: LD_INT 12
1227: PUSH
1228: LD_INT 8
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: PUSH
1235: LD_INT 38
1237: PUSH
1238: LD_INT 59
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PUSH
1245: LD_INT 72
1247: PUSH
1248: LD_INT 135
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PUSH
1255: LD_INT 218
1257: PUSH
1258: LD_INT 13
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PUSH
1265: LD_INT 241
1267: PUSH
1268: LD_INT 57
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 265
1277: PUSH
1278: LD_INT 135
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 18 , 6 ] , [ 50 , 89 ] , [ 82 , 140 ] , [ 207 , 6 ] , [ 255 , 85 ] , [ 272 , 138 ] ] ;
1293: LD_ADDR_EXP 41
1297: PUSH
1298: LD_INT 18
1300: PUSH
1301: LD_INT 6
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 50
1310: PUSH
1311: LD_INT 89
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 82
1320: PUSH
1321: LD_INT 140
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: PUSH
1328: LD_INT 207
1330: PUSH
1331: LD_INT 6
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 255
1340: PUSH
1341: LD_INT 85
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: LD_INT 272
1350: PUSH
1351: LD_INT 138
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 41 , 33 ] , [ 54 , 56 ] , [ 79 , 104 ] , [ 206 , 40 ] , [ 228 , 82 ] , [ 239 , 107 ] ] ;
1366: LD_ADDR_EXP 42
1370: PUSH
1371: LD_INT 41
1373: PUSH
1374: LD_INT 33
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 54
1383: PUSH
1384: LD_INT 56
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 79
1393: PUSH
1394: LD_INT 104
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 206
1403: PUSH
1404: LD_INT 40
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 228
1413: PUSH
1414: LD_INT 82
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PUSH
1421: LD_INT 239
1423: PUSH
1424: LD_INT 107
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 29 , 7 ] , [ 68 , 85 ] , [ 95 , 134 ] , [ 188 , 13 ] , [ 215 , 56 ] , [ 254 , 137 ] ] ;
1439: LD_ADDR_EXP 43
1443: PUSH
1444: LD_INT 29
1446: PUSH
1447: LD_INT 7
1449: PUSH
1450: EMPTY
1451: LIST
1452: LIST
1453: PUSH
1454: LD_INT 68
1456: PUSH
1457: LD_INT 85
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 95
1466: PUSH
1467: LD_INT 134
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 188
1476: PUSH
1477: LD_INT 13
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: LD_INT 215
1486: PUSH
1487: LD_INT 56
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 254
1496: PUSH
1497: LD_INT 137
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: ST_TO_ADDR
// depot_def := [ [ 22 , 20 , 1 ] , [ 48 , 71 , 1 ] , [ 74 , 122 , 1 ] , [ 213 , 22 , 4 ] , [ 238 , 69 , 4 ] , [ 262 , 122 , 4 ] ] ;
1512: LD_ADDR_EXP 37
1516: PUSH
1517: LD_INT 22
1519: PUSH
1520: LD_INT 20
1522: PUSH
1523: LD_INT 1
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 48
1533: PUSH
1534: LD_INT 71
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 74
1547: PUSH
1548: LD_INT 122
1550: PUSH
1551: LD_INT 1
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 213
1561: PUSH
1562: LD_INT 22
1564: PUSH
1565: LD_INT 4
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 238
1575: PUSH
1576: LD_INT 69
1578: PUSH
1579: LD_INT 4
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 262
1589: PUSH
1590: LD_INT 122
1592: PUSH
1593: LD_INT 4
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// for i in depot_def do
1609: LD_ADDR_VAR 0 2
1613: PUSH
1614: LD_EXP 37
1618: PUSH
1619: FOR_IN
1620: IFFALSE 1696
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1622: LD_ADDR_EXP 39
1626: PUSH
1627: LD_EXP 39
1631: PUSH
1632: LD_VAR 0 2
1636: PUSH
1637: LD_INT 1
1639: ARRAY
1640: PPUSH
1641: LD_VAR 0 2
1645: PUSH
1646: LD_INT 3
1648: ARRAY
1649: PPUSH
1650: LD_INT 4
1652: NEG
1653: PPUSH
1654: CALL_OW 272
1658: PUSH
1659: LD_VAR 0 2
1663: PUSH
1664: LD_INT 2
1666: ARRAY
1667: PPUSH
1668: LD_VAR 0 2
1672: PUSH
1673: LD_INT 3
1675: ARRAY
1676: PPUSH
1677: LD_INT 4
1679: NEG
1680: PPUSH
1681: CALL_OW 273
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: EMPTY
1691: LIST
1692: ADD
1693: ST_TO_ADDR
1694: GO 1619
1696: POP
1697: POP
// breastworks_def := [ [ [ 29 , 14 , 4 ] , [ 36 , 28 , 4 ] ] , [ [ 54 , 62 , 4 ] , [ 63 , 79 , 4 ] ] , [ [ 88 , 129 , 4 ] , [ 78 , 110 , 4 ] ] , [ [ 197 , 16 , 1 ] , [ 208 , 35 , 1 ] ] , [ [ 223 , 62 , 1 ] , [ 231 , 78 , 1 ] ] , [ [ 256 , 132 , 1 ] , [ 248 , 115 , 1 ] ] ] ;
1698: LD_ADDR_EXP 38
1702: PUSH
1703: LD_INT 29
1705: PUSH
1706: LD_INT 14
1708: PUSH
1709: LD_INT 4
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: LIST
1716: PUSH
1717: LD_INT 36
1719: PUSH
1720: LD_INT 28
1722: PUSH
1723: LD_INT 4
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: LIST
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 54
1737: PUSH
1738: LD_INT 62
1740: PUSH
1741: LD_INT 4
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 63
1751: PUSH
1752: LD_INT 79
1754: PUSH
1755: LD_INT 4
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 88
1769: PUSH
1770: LD_INT 129
1772: PUSH
1773: LD_INT 4
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 78
1783: PUSH
1784: LD_INT 110
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: PUSH
1799: LD_INT 197
1801: PUSH
1802: LD_INT 16
1804: PUSH
1805: LD_INT 1
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 208
1815: PUSH
1816: LD_INT 35
1818: PUSH
1819: LD_INT 1
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 223
1833: PUSH
1834: LD_INT 62
1836: PUSH
1837: LD_INT 1
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 231
1847: PUSH
1848: LD_INT 78
1850: PUSH
1851: LD_INT 1
1853: PUSH
1854: EMPTY
1855: LIST
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 256
1865: PUSH
1866: LD_INT 132
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 248
1879: PUSH
1880: LD_INT 115
1882: PUSH
1883: LD_INT 1
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: EMPTY
1892: LIST
1893: LIST
1894: PUSH
1895: EMPTY
1896: LIST
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// for i = 1 to Side_Positions do
1903: LD_ADDR_VAR 0 2
1907: PUSH
1908: DOUBLE
1909: LD_INT 1
1911: DEC
1912: ST_TO_ADDR
1913: LD_EXP 34
1917: PUSH
1918: FOR_TO
1919: IFFALSE 2042
// begin if not Side_Positions [ i ] then
1921: LD_EXP 34
1925: PUSH
1926: LD_VAR 0 2
1930: ARRAY
1931: NOT
1932: IFFALSE 1936
// continue ;
1934: GO 1918
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1936: LD_EXP 40
1940: PUSH
1941: LD_EXP 34
1945: PUSH
1946: LD_VAR 0 2
1950: ARRAY
1951: ARRAY
1952: PUSH
1953: LD_INT 1
1955: ARRAY
1956: PPUSH
1957: LD_EXP 40
1961: PUSH
1962: LD_EXP 34
1966: PUSH
1967: LD_VAR 0 2
1971: ARRAY
1972: ARRAY
1973: PUSH
1974: LD_INT 2
1976: ARRAY
1977: PPUSH
1978: LD_INT 2
1980: PPUSH
1981: CALL_OW 62
// if def_extra_oil_deposits then
1985: LD_EXP 6
1989: IFFALSE 2040
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1991: LD_EXP 41
1995: PUSH
1996: LD_EXP 34
2000: PUSH
2001: LD_VAR 0 2
2005: ARRAY
2006: ARRAY
2007: PUSH
2008: LD_INT 1
2010: ARRAY
2011: PPUSH
2012: LD_EXP 41
2016: PUSH
2017: LD_EXP 34
2021: PUSH
2022: LD_VAR 0 2
2026: ARRAY
2027: ARRAY
2028: PUSH
2029: LD_INT 2
2031: ARRAY
2032: PPUSH
2033: LD_INT 2
2035: PPUSH
2036: CALL_OW 62
// end ;
2040: GO 1918
2042: POP
2043: POP
// if def_extra_sib_deposits then
2044: LD_EXP 7
2048: IFFALSE 2195
// for i = 1 to Side_Positions do
2050: LD_ADDR_VAR 0 2
2054: PUSH
2055: DOUBLE
2056: LD_INT 1
2058: DEC
2059: ST_TO_ADDR
2060: LD_EXP 34
2064: PUSH
2065: FOR_TO
2066: IFFALSE 2193
// begin if not Side_Positions [ i ] then
2068: LD_EXP 34
2072: PUSH
2073: LD_VAR 0 2
2077: ARRAY
2078: NOT
2079: IFFALSE 2083
// continue ;
2081: GO 2065
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2083: LD_EXP 42
2087: PUSH
2088: LD_EXP 34
2092: PUSH
2093: LD_VAR 0 2
2097: ARRAY
2098: ARRAY
2099: PUSH
2100: LD_INT 1
2102: ARRAY
2103: PPUSH
2104: LD_EXP 42
2108: PUSH
2109: LD_EXP 34
2113: PUSH
2114: LD_VAR 0 2
2118: ARRAY
2119: ARRAY
2120: PUSH
2121: LD_INT 2
2123: ARRAY
2124: PPUSH
2125: LD_INT 3
2127: PPUSH
2128: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2132: LD_EXP 7
2136: PUSH
2137: LD_INT 2
2139: EQUAL
2140: IFFALSE 2191
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2142: LD_EXP 43
2146: PUSH
2147: LD_EXP 34
2151: PUSH
2152: LD_VAR 0 2
2156: ARRAY
2157: ARRAY
2158: PUSH
2159: LD_INT 1
2161: ARRAY
2162: PPUSH
2163: LD_EXP 43
2167: PUSH
2168: LD_EXP 34
2172: PUSH
2173: LD_VAR 0 2
2177: ARRAY
2178: ARRAY
2179: PUSH
2180: LD_INT 2
2182: ARRAY
2183: PPUSH
2184: LD_INT 3
2186: PPUSH
2187: CALL_OW 62
// end ;
2191: GO 2065
2193: POP
2194: POP
// end ;
2195: LD_VAR 0 1
2199: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
// if not Team_Game then
2205: LD_EXP 36
2209: NOT
2210: IFFALSE 2308
// begin for i = 1 to 8 do
2212: LD_ADDR_VAR 0 2
2216: PUSH
2217: DOUBLE
2218: LD_INT 1
2220: DEC
2221: ST_TO_ADDR
2222: LD_INT 8
2224: PUSH
2225: FOR_TO
2226: IFFALSE 2304
// for j = 1 to 8 do
2228: LD_ADDR_VAR 0 3
2232: PUSH
2233: DOUBLE
2234: LD_INT 1
2236: DEC
2237: ST_TO_ADDR
2238: LD_INT 8
2240: PUSH
2241: FOR_TO
2242: IFFALSE 2300
// if i <> j then
2244: LD_VAR 0 2
2248: PUSH
2249: LD_VAR 0 3
2253: NONEQUAL
2254: IFFALSE 2278
// SetAttitude ( i , j , att_neutral , true ) else
2256: LD_VAR 0 2
2260: PPUSH
2261: LD_VAR 0 3
2265: PPUSH
2266: LD_INT 0
2268: PPUSH
2269: LD_INT 1
2271: PPUSH
2272: CALL_OW 80
2276: GO 2298
// SetAttitude ( i , j , att_friend , true ) ;
2278: LD_VAR 0 2
2282: PPUSH
2283: LD_VAR 0 3
2287: PPUSH
2288: LD_INT 1
2290: PPUSH
2291: LD_INT 1
2293: PPUSH
2294: CALL_OW 80
2298: GO 2241
2300: POP
2301: POP
2302: GO 2225
2304: POP
2305: POP
// end else
2306: GO 2483
// begin if def_shared_vision then
2308: LD_EXP 8
2312: IFFALSE 2377
// begin for i in Teams do
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_EXP 32
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2375
// for j = 2 to i do
2327: LD_ADDR_VAR 0 3
2331: PUSH
2332: DOUBLE
2333: LD_INT 2
2335: DEC
2336: ST_TO_ADDR
2337: LD_VAR 0 2
2341: PUSH
2342: FOR_TO
2343: IFFALSE 2371
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2345: LD_VAR 0 2
2349: PUSH
2350: LD_VAR 0 3
2354: ARRAY
2355: PPUSH
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 1
2363: ARRAY
2364: PPUSH
2365: CALL_OW 343
2369: GO 2342
2371: POP
2372: POP
2373: GO 2324
2375: POP
2376: POP
// end ; for i = 1 to 8 do
2377: LD_ADDR_VAR 0 2
2381: PUSH
2382: DOUBLE
2383: LD_INT 1
2385: DEC
2386: ST_TO_ADDR
2387: LD_INT 8
2389: PUSH
2390: FOR_TO
2391: IFFALSE 2481
// for j = 1 to 8 do
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: DOUBLE
2399: LD_INT 1
2401: DEC
2402: ST_TO_ADDR
2403: LD_INT 8
2405: PUSH
2406: FOR_TO
2407: IFFALSE 2477
// if Side_Teams [ i ] = Side_Teams [ j ] then
2409: LD_EXP 31
2413: PUSH
2414: LD_VAR 0 2
2418: ARRAY
2419: PUSH
2420: LD_EXP 31
2424: PUSH
2425: LD_VAR 0 3
2429: ARRAY
2430: EQUAL
2431: IFFALSE 2455
// SetAttitude ( i , j , att_friend , true ) else
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_VAR 0 3
2442: PPUSH
2443: LD_INT 1
2445: PPUSH
2446: LD_INT 1
2448: PPUSH
2449: CALL_OW 80
2453: GO 2475
// SetAttitude ( i , j , att_enemy , true ) ;
2455: LD_VAR 0 2
2459: PPUSH
2460: LD_VAR 0 3
2464: PPUSH
2465: LD_INT 2
2467: PPUSH
2468: LD_INT 1
2470: PPUSH
2471: CALL_OW 80
2475: GO 2406
2477: POP
2478: POP
2479: GO 2390
2481: POP
2482: POP
// end ; end ;
2483: LD_VAR 0 1
2487: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2488: LD_INT 0
2490: PPUSH
2491: PPUSH
2492: PPUSH
2493: PPUSH
// result := [ ] ;
2494: LD_ADDR_VAR 0 7
2498: PUSH
2499: EMPTY
2500: ST_TO_ADDR
// for i := 1 to count do
2501: LD_ADDR_VAR 0 8
2505: PUSH
2506: DOUBLE
2507: LD_INT 1
2509: DEC
2510: ST_TO_ADDR
2511: LD_VAR 0 1
2515: PUSH
2516: FOR_TO
2517: IFFALSE 2962
// begin uc_direction := Rand ( 0 , 5 ) ;
2519: LD_ADDR_OWVAR 24
2523: PUSH
2524: LD_INT 0
2526: PPUSH
2527: LD_INT 5
2529: PPUSH
2530: CALL_OW 12
2534: ST_TO_ADDR
// if commander then
2535: LD_LOC 1
2539: IFFALSE 2648
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2541: LD_ADDR_OWVAR 26
2545: PUSH
2546: LD_OWVAR 19
2550: PUSH
2551: LD_OWVAR 20
2555: ARRAY
2556: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2557: LD_INT 1
2559: PPUSH
2560: LD_INT 2
2562: PPUSH
2563: CALL_OW 12
2567: PPUSH
2568: LD_VAR 0 2
2572: PPUSH
2573: LD_EXP 20
2577: PUSH
2578: LD_INT 2
2580: PLUS
2581: PPUSH
2582: CALL_OW 380
// hc_importance := 105 ;
2586: LD_ADDR_OWVAR 32
2590: PUSH
2591: LD_INT 105
2593: ST_TO_ADDR
// commander := false ;
2594: LD_ADDR_LOC 1
2598: PUSH
2599: LD_INT 0
2601: ST_TO_ADDR
// if Multiplayer then
2602: LD_OWVAR 4
2606: IFFALSE 2646
// begin hc_gallery := MULTIAVATARS ;
2608: LD_ADDR_OWVAR 33
2612: PUSH
2613: LD_STRING MULTIAVATARS
2615: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2616: LD_ADDR_OWVAR 34
2620: PUSH
2621: LD_OWVAR 20
2625: PPUSH
2626: CALL_OW 525
2630: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2631: LD_ADDR_OWVAR 27
2635: PUSH
2636: LD_OWVAR 20
2640: PPUSH
2641: CALL_OW 526
2645: ST_TO_ADDR
// end ; end else
2646: GO 2711
// begin hc_name :=  ;
2648: LD_ADDR_OWVAR 26
2652: PUSH
2653: LD_STRING 
2655: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2656: LD_INT 1
2658: PPUSH
2659: LD_INT 2
2661: PPUSH
2662: CALL_OW 12
2666: PPUSH
2667: LD_VAR 0 2
2671: PPUSH
2672: LD_EXP 20
2676: PPUSH
2677: CALL_OW 380
// hc_importance := 0 ;
2681: LD_ADDR_OWVAR 32
2685: PUSH
2686: LD_INT 0
2688: ST_TO_ADDR
// if Multiplayer then
2689: LD_OWVAR 4
2693: IFFALSE 2711
// begin hc_gallery :=  ;
2695: LD_ADDR_OWVAR 33
2699: PUSH
2700: LD_STRING 
2702: ST_TO_ADDR
// hc_face_number := 0 ;
2703: LD_ADDR_OWVAR 34
2707: PUSH
2708: LD_INT 0
2710: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2711: LD_ADDR_VAR 0 10
2715: PUSH
2716: CALL_OW 44
2720: ST_TO_ADDR
// if global_defined then
2721: LD_LOC 3
2725: IFFALSE 2865
// begin if ( cl = class_soldier ) then
2727: LD_VAR 0 2
2731: PUSH
2732: LD_INT 1
2734: EQUAL
2735: IFFALSE 2755
// j := i + soldiers_created else
2737: LD_ADDR_VAR 0 9
2741: PUSH
2742: LD_VAR 0 8
2746: PUSH
2747: LD_LOC 4
2751: PLUS
2752: ST_TO_ADDR
2753: GO 2765
// j := i ;
2755: LD_ADDR_VAR 0 9
2759: PUSH
2760: LD_VAR 0 8
2764: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2765: LD_LOC 2
2769: PUSH
2770: LD_VAR 0 2
2774: ARRAY
2775: PUSH
2776: LD_VAR 0 9
2780: ARRAY
2781: PPUSH
2782: LD_VAR 0 10
2786: PPUSH
2787: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2791: LD_VAR 0 10
2795: PPUSH
2796: LD_INT 2
2798: PPUSH
2799: LD_LOC 2
2803: PUSH
2804: LD_VAR 0 2
2808: ARRAY
2809: PUSH
2810: LD_VAR 0 9
2814: ARRAY
2815: PPUSH
2816: LD_INT 2
2818: PPUSH
2819: CALL_OW 260
2823: PPUSH
2824: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2828: LD_VAR 0 10
2832: PPUSH
2833: LD_INT 1
2835: PPUSH
2836: LD_LOC 2
2840: PUSH
2841: LD_VAR 0 2
2845: ARRAY
2846: PUSH
2847: LD_VAR 0 9
2851: ARRAY
2852: PPUSH
2853: LD_INT 1
2855: PPUSH
2856: CALL_OW 260
2860: PPUSH
2861: CALL_OW 239
// end ; if building then
2865: LD_VAR 0 6
2869: IFFALSE 2914
// begin SetDir ( un , ( GetDir ( building ) + 3 ) mod 6 ) ;
2871: LD_VAR 0 10
2875: PPUSH
2876: LD_VAR 0 6
2880: PPUSH
2881: CALL_OW 254
2885: PUSH
2886: LD_INT 3
2888: PLUS
2889: PUSH
2890: LD_INT 6
2892: MOD
2893: PPUSH
2894: CALL_OW 233
// PlaceHumanInUnit ( un , building ) end else
2898: LD_VAR 0 10
2902: PPUSH
2903: LD_VAR 0 6
2907: PPUSH
2908: CALL_OW 52
2912: GO 2941
// PlaceUnitXYR ( un , x , y , r , false ) ;
2914: LD_VAR 0 10
2918: PPUSH
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_VAR 0 4
2928: PPUSH
2929: LD_VAR 0 5
2933: PPUSH
2934: LD_INT 0
2936: PPUSH
2937: CALL_OW 50
// result := result ^ [ un ] ;
2941: LD_ADDR_VAR 0 7
2945: PUSH
2946: LD_VAR 0 7
2950: PUSH
2951: LD_VAR 0 10
2955: PUSH
2956: EMPTY
2957: LIST
2958: ADD
2959: ST_TO_ADDR
// end ;
2960: GO 2516
2962: POP
2963: POP
// if not global_defined then
2964: LD_LOC 3
2968: NOT
2969: IFFALSE 3047
// if ( global_units >= cl ) then
2971: LD_LOC 2
2975: PUSH
2976: LD_VAR 0 2
2980: GREATEREQUAL
2981: IFFALSE 3022
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2983: LD_ADDR_LOC 2
2987: PUSH
2988: LD_LOC 2
2992: PPUSH
2993: LD_VAR 0 2
2997: PPUSH
2998: LD_LOC 2
3002: PUSH
3003: LD_VAR 0 2
3007: ARRAY
3008: PUSH
3009: LD_VAR 0 7
3013: ADD
3014: PPUSH
3015: CALL_OW 1
3019: ST_TO_ADDR
3020: GO 3047
// global_units := Replace ( global_units , cl , result ) ;
3022: LD_ADDR_LOC 2
3026: PUSH
3027: LD_LOC 2
3031: PPUSH
3032: LD_VAR 0 2
3036: PPUSH
3037: LD_VAR 0 7
3041: PPUSH
3042: CALL_OW 1
3046: ST_TO_ADDR
// if commander then
3047: LD_LOC 1
3051: IFFALSE 3098
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3053: LD_ADDR_EXP 45
3057: PUSH
3058: LD_EXP 45
3062: PPUSH
3063: LD_OWVAR 20
3067: PPUSH
3068: LD_EXP 45
3072: PUSH
3073: LD_OWVAR 20
3077: ARRAY
3078: PUSH
3079: LD_VAR 0 10
3083: ADD
3084: PPUSH
3085: CALL_OW 1
3089: ST_TO_ADDR
// commander := false ;
3090: LD_ADDR_LOC 1
3094: PUSH
3095: LD_INT 0
3097: ST_TO_ADDR
// end ; end ;
3098: LD_VAR 0 7
3102: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3103: LD_INT 0
3105: PPUSH
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
// if side in [ 0 , 9 ] then
3114: LD_VAR 0 1
3118: PUSH
3119: LD_INT 0
3121: PUSH
3122: LD_INT 9
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: IN
3129: IFFALSE 3133
// exit ;
3131: GO 4183
// pos := Side_Positions [ side ] ;
3133: LD_ADDR_VAR 0 3
3137: PUSH
3138: LD_EXP 34
3142: PUSH
3143: LD_VAR 0 1
3147: ARRAY
3148: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3149: LD_ADDR_OWVAR 21
3153: PUSH
3154: LD_EXP 35
3158: PUSH
3159: LD_VAR 0 1
3163: ARRAY
3164: ST_TO_ADDR
// uc_side := side ;
3165: LD_ADDR_OWVAR 20
3169: PUSH
3170: LD_VAR 0 1
3174: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: LD_EXP 37
3184: PUSH
3185: LD_VAR 0 3
3189: ARRAY
3190: PUSH
3191: LD_INT 1
3193: ARRAY
3194: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3195: LD_ADDR_VAR 0 5
3199: PUSH
3200: LD_EXP 37
3204: PUSH
3205: LD_VAR 0 3
3209: ARRAY
3210: PUSH
3211: LD_INT 2
3213: ARRAY
3214: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3215: LD_ADDR_VAR 0 6
3219: PUSH
3220: LD_EXP 37
3224: PUSH
3225: LD_VAR 0 3
3229: ARRAY
3230: PUSH
3231: LD_INT 3
3233: ARRAY
3234: ST_TO_ADDR
// if is_depot then
3235: LD_EXP 17
3239: IFFALSE 3372
// begin bc_type = b_depot ;
3241: LD_ADDR_OWVAR 42
3245: PUSH
3246: LD_INT 0
3248: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3249: LD_ADDR_VAR 0 10
3253: PUSH
3254: LD_VAR 0 4
3258: PPUSH
3259: LD_VAR 0 5
3263: PPUSH
3264: LD_VAR 0 6
3268: PPUSH
3269: CALL_OW 47
3273: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3274: LD_VAR 0 10
3278: PPUSH
3279: LD_STRING @
3281: PUSH
3282: LD_VAR 0 1
3286: STR
3287: PPUSH
3288: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3292: LD_VAR 0 10
3296: PPUSH
3297: CALL_OW 274
3301: PPUSH
3302: LD_INT 1
3304: PPUSH
3305: LD_EXP 22
3309: PUSH
3310: LD_INT 1
3312: ARRAY
3313: PPUSH
3314: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3318: LD_VAR 0 10
3322: PPUSH
3323: CALL_OW 274
3327: PPUSH
3328: LD_INT 2
3330: PPUSH
3331: LD_EXP 22
3335: PUSH
3336: LD_INT 2
3338: ARRAY
3339: PPUSH
3340: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3344: LD_VAR 0 10
3348: PPUSH
3349: CALL_OW 274
3353: PPUSH
3354: LD_INT 3
3356: PPUSH
3357: LD_EXP 22
3361: PUSH
3362: LD_INT 3
3364: ARRAY
3365: PPUSH
3366: CALL_OW 277
// end else
3370: GO 3516
// begin for i := 1 to 3 do
3372: LD_ADDR_VAR 0 7
3376: PUSH
3377: DOUBLE
3378: LD_INT 1
3380: DEC
3381: ST_TO_ADDR
3382: LD_INT 3
3384: PUSH
3385: FOR_TO
3386: IFFALSE 3514
// begin r := starting_resources [ i ] ;
3388: LD_ADDR_VAR 0 8
3392: PUSH
3393: LD_EXP 22
3397: PUSH
3398: LD_VAR 0 7
3402: ARRAY
3403: ST_TO_ADDR
// while r >= 10 do
3404: LD_VAR 0 8
3408: PUSH
3409: LD_INT 10
3411: GREATEREQUAL
3412: IFFALSE 3512
// if r > 50 then
3414: LD_VAR 0 8
3418: PUSH
3419: LD_INT 50
3421: GREATER
3422: IFFALSE 3468
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3424: LD_VAR 0 7
3428: PPUSH
3429: LD_INT 5
3431: PPUSH
3432: LD_VAR 0 4
3436: PPUSH
3437: LD_VAR 0 5
3441: PPUSH
3442: LD_INT 4
3444: PPUSH
3445: LD_INT 0
3447: PPUSH
3448: CALL_OW 60
// r := r - 50 ;
3452: LD_ADDR_VAR 0 8
3456: PUSH
3457: LD_VAR 0 8
3461: PUSH
3462: LD_INT 50
3464: MINUS
3465: ST_TO_ADDR
// end else
3466: GO 3510
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3468: LD_VAR 0 7
3472: PPUSH
3473: LD_VAR 0 8
3477: PUSH
3478: LD_INT 10
3480: DIV
3481: PPUSH
3482: LD_VAR 0 4
3486: PPUSH
3487: LD_VAR 0 5
3491: PPUSH
3492: LD_INT 4
3494: PPUSH
3495: LD_INT 0
3497: PPUSH
3498: CALL_OW 60
// r := 0 ;
3502: LD_ADDR_VAR 0 8
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
// end ;
3510: GO 3404
// end ;
3512: GO 3385
3514: POP
3515: POP
// end ; for r in starting_crates do
3516: LD_ADDR_VAR 0 8
3520: PUSH
3521: LD_EXP 21
3525: PUSH
3526: FOR_IN
3527: IFFALSE 3559
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3529: LD_INT 1
3531: PPUSH
3532: LD_INT 5
3534: PPUSH
3535: LD_VAR 0 4
3539: PPUSH
3540: LD_VAR 0 5
3544: PPUSH
3545: LD_VAR 0 8
3549: PPUSH
3550: LD_INT 0
3552: PPUSH
3553: CALL_OW 60
3557: GO 3526
3559: POP
3560: POP
// if def_morale_flags then
3561: LD_EXP 9
3565: IFFALSE 3704
// begin x := start_def [ pos ] [ 1 ] ;
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: LD_EXP 39
3576: PUSH
3577: LD_VAR 0 3
3581: ARRAY
3582: PUSH
3583: LD_INT 1
3585: ARRAY
3586: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3587: LD_ADDR_VAR 0 5
3591: PUSH
3592: LD_EXP 39
3596: PUSH
3597: LD_VAR 0 3
3601: ARRAY
3602: PUSH
3603: LD_INT 2
3605: ARRAY
3606: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3607: LD_VAR 0 4
3611: PPUSH
3612: LD_VAR 0 5
3616: PPUSH
3617: LD_INT 12
3619: PPUSH
3620: LD_INT 2
3622: PPUSH
3623: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3627: LD_ADDR_EXP 44
3631: PUSH
3632: LD_EXP 44
3636: PUSH
3637: LD_VAR 0 1
3641: PPUSH
3642: LD_VAR 0 4
3646: PPUSH
3647: LD_VAR 0 5
3651: PPUSH
3652: LD_INT 1
3654: PUSH
3655: LD_INT 100
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: LD_INT 2
3664: PUSH
3665: LD_INT 50
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 3
3674: PUSH
3675: LD_INT 20
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: LD_INT 20
3684: PUSH
3685: LD_INT 100
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: PPUSH
3698: CALL_OW 418
3702: ADD
3703: ST_TO_ADDR
// end ; commander := true ;
3704: LD_ADDR_LOC 1
3708: PUSH
3709: LD_INT 1
3711: ST_TO_ADDR
// soldiers_created := 0 ;
3712: LD_ADDR_LOC 4
3716: PUSH
3717: LD_INT 0
3719: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3720: LD_ADDR_VAR 0 7
3724: PUSH
3725: DOUBLE
3726: LD_INT 1
3728: DEC
3729: ST_TO_ADDR
3730: LD_EXP 18
3734: PUSH
3735: FOR_TO
3736: IFFALSE 3889
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3738: LD_ADDR_VAR 0 4
3742: PUSH
3743: LD_EXP 38
3747: PUSH
3748: LD_VAR 0 3
3752: ARRAY
3753: PUSH
3754: LD_VAR 0 7
3758: ARRAY
3759: PUSH
3760: LD_INT 1
3762: ARRAY
3763: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3764: LD_ADDR_VAR 0 5
3768: PUSH
3769: LD_EXP 38
3773: PUSH
3774: LD_VAR 0 3
3778: ARRAY
3779: PUSH
3780: LD_VAR 0 7
3784: ARRAY
3785: PUSH
3786: LD_INT 2
3788: ARRAY
3789: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3790: LD_ADDR_VAR 0 6
3794: PUSH
3795: LD_EXP 38
3799: PUSH
3800: LD_VAR 0 3
3804: ARRAY
3805: PUSH
3806: LD_VAR 0 7
3810: ARRAY
3811: PUSH
3812: LD_INT 3
3814: ARRAY
3815: ST_TO_ADDR
// bc_type := b_breastwork ;
3816: LD_ADDR_OWVAR 42
3820: PUSH
3821: LD_INT 31
3823: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3824: LD_ADDR_VAR 0 9
3828: PUSH
3829: LD_VAR 0 4
3833: PPUSH
3834: LD_VAR 0 5
3838: PPUSH
3839: LD_VAR 0 6
3843: PPUSH
3844: CALL_OW 47
3848: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3849: LD_INT 1
3851: PPUSH
3852: LD_INT 1
3854: PPUSH
3855: LD_INT 0
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: LD_INT 0
3863: PPUSH
3864: LD_VAR 0 9
3868: PPUSH
3869: CALL 2488 0 6
// soldiers_created := soldiers_created + 1 ;
3873: LD_ADDR_LOC 4
3877: PUSH
3878: LD_LOC 4
3882: PUSH
3883: LD_INT 1
3885: PLUS
3886: ST_TO_ADDR
// end ;
3887: GO 3735
3889: POP
3890: POP
// x := start_def [ pos ] [ 1 ] ;
3891: LD_ADDR_VAR 0 4
3895: PUSH
3896: LD_EXP 39
3900: PUSH
3901: LD_VAR 0 3
3905: ARRAY
3906: PUSH
3907: LD_INT 1
3909: ARRAY
3910: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3911: LD_ADDR_VAR 0 5
3915: PUSH
3916: LD_EXP 39
3920: PUSH
3921: LD_VAR 0 3
3925: ARRAY
3926: PUSH
3927: LD_INT 2
3929: ARRAY
3930: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3931: LD_LOC 8
3935: PUSH
3936: LD_EXP 18
3940: MINUS
3941: PPUSH
3942: LD_INT 1
3944: PPUSH
3945: LD_VAR 0 4
3949: PPUSH
3950: LD_VAR 0 5
3954: PPUSH
3955: LD_INT 5
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL 2488 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3965: LD_LOC 5
3969: PPUSH
3970: LD_INT 2
3972: PPUSH
3973: LD_VAR 0 4
3977: PPUSH
3978: LD_VAR 0 5
3982: PPUSH
3983: LD_INT 5
3985: PPUSH
3986: LD_INT 0
3988: PPUSH
3989: CALL 2488 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3993: LD_LOC 7
3997: PPUSH
3998: LD_INT 3
4000: PPUSH
4001: LD_VAR 0 4
4005: PPUSH
4006: LD_VAR 0 5
4010: PPUSH
4011: LD_INT 5
4013: PPUSH
4014: LD_INT 0
4016: PPUSH
4017: CALL 2488 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4021: LD_LOC 6
4025: PPUSH
4026: LD_INT 4
4028: PPUSH
4029: LD_VAR 0 4
4033: PPUSH
4034: LD_VAR 0 5
4038: PPUSH
4039: LD_INT 5
4041: PPUSH
4042: LD_INT 0
4044: PPUSH
4045: CALL 2488 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4049: LD_EXP 10
4053: PUSH
4054: LD_INT 20
4056: PPUSH
4057: LD_VAR 0 1
4061: PPUSH
4062: CALL_OW 321
4066: PUSH
4067: LD_INT 1
4069: EQUAL
4070: AND
4071: IFFALSE 4088
// SetTech ( tech_SibDet , side , state_researched ) ;
4073: LD_INT 20
4075: PPUSH
4076: LD_VAR 0 1
4080: PPUSH
4081: LD_INT 2
4083: PPUSH
4084: CALL_OW 322
// if def_siberite_bomb = 1 then
4088: LD_EXP 13
4092: PUSH
4093: LD_INT 1
4095: EQUAL
4096: IFFALSE 4130
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4098: LD_INT 25
4100: PPUSH
4101: LD_VAR 0 1
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4113: LD_INT 73
4115: PPUSH
4116: LD_VAR 0 1
4120: PPUSH
4121: LD_INT 1
4123: PPUSH
4124: CALL_OW 322
// end else
4128: GO 4160
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4130: LD_INT 25
4132: PPUSH
4133: LD_VAR 0 1
4137: PPUSH
4138: LD_INT 0
4140: PPUSH
4141: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4145: LD_INT 73
4147: PPUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: LD_INT 0
4155: PPUSH
4156: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4160: LD_INT 24
4162: PPUSH
4163: LD_VAR 0 1
4167: PPUSH
4168: LD_INT 0
4170: PPUSH
4171: CALL_OW 322
// global_defined := true ;
4175: LD_ADDR_LOC 3
4179: PUSH
4180: LD_INT 1
4182: ST_TO_ADDR
// end ;
4183: LD_VAR 0 2
4187: RET
// function prepare_sides ; var i ; begin
4188: LD_INT 0
4190: PPUSH
4191: PPUSH
// global_units := [ ] ;
4192: LD_ADDR_LOC 2
4196: PUSH
4197: EMPTY
4198: ST_TO_ADDR
// global_defined := false ;
4199: LD_ADDR_LOC 3
4203: PUSH
4204: LD_INT 0
4206: ST_TO_ADDR
// CountClassMembers ;
4207: CALL 4257 0 0
// for i := 1 to 8 do
4211: LD_ADDR_VAR 0 2
4215: PUSH
4216: DOUBLE
4217: LD_INT 1
4219: DEC
4220: ST_TO_ADDR
4221: LD_INT 8
4223: PUSH
4224: FOR_TO
4225: IFFALSE 4250
// if Side_Positions [ i ] then
4227: LD_EXP 34
4231: PUSH
4232: LD_VAR 0 2
4236: ARRAY
4237: IFFALSE 4248
// prepare_side ( i ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: CALL 3103 0 1
4248: GO 4224
4250: POP
4251: POP
// end ;
4252: LD_VAR 0 1
4256: RET
// function CountClassMembers ; var Mode ; begin
4257: LD_INT 0
4259: PPUSH
4260: PPUSH
// if No_Mechs then
4261: LD_EXP 15
4265: IFFALSE 4277
// Mode := 2 else
4267: LD_ADDR_VAR 0 2
4271: PUSH
4272: LD_INT 2
4274: ST_TO_ADDR
4275: GO 4285
// Mode := 1 ;
4277: LD_ADDR_VAR 0 2
4281: PUSH
4282: LD_INT 1
4284: ST_TO_ADDR
// neng := number_of_people ;
4285: LD_ADDR_LOC 5
4289: PUSH
4290: LD_EXP 19
4294: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4295: LD_ADDR_LOC 8
4299: PUSH
4300: LD_LOC 5
4304: PUSH
4305: LD_INT 4
4307: PUSH
4308: LD_INT 3
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: LD_VAR 0 2
4319: ARRAY
4320: DIV
4321: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4322: LD_LOC 8
4326: PUSH
4327: LD_EXP 18
4331: LESS
4332: IFFALSE 4344
// nsol := number_of_breastworks ;
4334: LD_ADDR_LOC 8
4338: PUSH
4339: LD_EXP 18
4343: ST_TO_ADDR
// neng := neng - nsol ;
4344: LD_ADDR_LOC 5
4348: PUSH
4349: LD_LOC 5
4353: PUSH
4354: LD_LOC 8
4358: MINUS
4359: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4360: LD_ADDR_LOC 6
4364: PUSH
4365: LD_LOC 5
4369: PUSH
4370: LD_INT 3
4372: PUSH
4373: LD_INT 2
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: LD_VAR 0 2
4384: ARRAY
4385: DIV
4386: ST_TO_ADDR
// if ( nsci < 1 ) then
4387: LD_LOC 6
4391: PUSH
4392: LD_INT 1
4394: LESS
4395: IFFALSE 4405
// nsci := 1 ;
4397: LD_ADDR_LOC 6
4401: PUSH
4402: LD_INT 1
4404: ST_TO_ADDR
// neng := neng - nsci ;
4405: LD_ADDR_LOC 5
4409: PUSH
4410: LD_LOC 5
4414: PUSH
4415: LD_LOC 6
4419: MINUS
4420: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4421: LD_ADDR_LOC 7
4425: PUSH
4426: LD_LOC 5
4430: PUSH
4431: LD_INT 2
4433: DIV
4434: PUSH
4435: LD_INT 0
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PUSH
4442: LD_VAR 0 2
4446: ARRAY
4447: ST_TO_ADDR
// neng := neng - nmech ;
4448: LD_ADDR_LOC 5
4452: PUSH
4453: LD_LOC 5
4457: PUSH
4458: LD_LOC 7
4462: MINUS
4463: ST_TO_ADDR
// if ( neng < 1 ) then
4464: LD_LOC 5
4468: PUSH
4469: LD_INT 1
4471: LESS
4472: IFFALSE 4482
// neng := 1 ;
4474: LD_ADDR_LOC 5
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// end ;
4482: LD_VAR 0 1
4486: RET
// starting begin disable ( 98 ) ;
4487: LD_INT 98
4489: DISABLE_MARKED
// disable ( 99 ) ;
4490: LD_INT 99
4492: DISABLE_MARKED
// disable ( 400 ) ;
4493: LD_INT 400
4495: DISABLE_MARKED
// disable ( 401 ) ;
4496: LD_INT 401
4498: DISABLE_MARKED
// mp_selectmsg := true ;
4499: LD_ADDR_OWVAR 13
4503: PUSH
4504: LD_INT 1
4506: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4507: CALL 68 0 0
// init_map ;
4511: CALL 1215 0 0
// init_respawning ;
4515: CALL 13491 0 0
// set_shared_visions_and_alliances ;
4519: CALL 2200 0 0
// ResetFog ;
4523: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4527: LD_OWVAR 2
4531: PPUSH
4532: CALL_OW 520
// AnimateTrees ( true ) ;
4536: LD_INT 1
4538: PPUSH
4539: CALL_OW 573
// prepare_sides ;
4543: CALL 4188 0 0
// Init_Win_Condition ;
4547: CALL 7472 0 0
// ShowTimer ;
4551: CALL 7050 0 0
// music_nat := Side_Nations [ your_side ] ;
4555: LD_ADDR_OWVAR 71
4559: PUSH
4560: LD_EXP 35
4564: PUSH
4565: LD_OWVAR 2
4569: ARRAY
4570: ST_TO_ADDR
// if IAmSpec then
4571: CALL_OW 531
4575: IFFALSE 4599
// begin fogoff ( true ) ;
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4584: LD_INT 130
4586: PPUSH
4587: LD_INT 100
4589: PPUSH
4590: CALL_OW 86
// enable ( 400 ) ;
4594: LD_INT 400
4596: ENABLE_MARKED
// end else
4597: GO 4645
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4599: LD_EXP 39
4603: PUSH
4604: LD_EXP 34
4608: PUSH
4609: LD_OWVAR 2
4613: ARRAY
4614: ARRAY
4615: PUSH
4616: LD_INT 1
4618: ARRAY
4619: PPUSH
4620: LD_EXP 39
4624: PUSH
4625: LD_EXP 34
4629: PUSH
4630: LD_OWVAR 2
4634: ARRAY
4635: ARRAY
4636: PUSH
4637: LD_INT 2
4639: ARRAY
4640: PPUSH
4641: CALL_OW 86
// end ; InitApeman ;
4645: CALL 5566 0 0
// BuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
4649: LD_ADDR_EXP 55
4653: PUSH
4654: LD_INT 7
4656: PUSH
4657: LD_INT 8
4659: PUSH
4660: LD_INT 9
4662: PUSH
4663: LD_INT 10
4665: PUSH
4666: LD_INT 11
4668: PUSH
4669: LD_INT 12
4671: PUSH
4672: EMPTY
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: ST_TO_ADDR
// BeginBuildUp ;
4680: CALL 13985 0 0
// end ;
4684: END
// every 0 0$1 do
4685: GO 4687
4687: DISABLE
// if ( def_siberite_bomb > 1 ) then
4688: LD_EXP 13
4692: PUSH
4693: LD_INT 1
4695: GREATER
4696: IFFALSE 4711
// begin wait ( siberite_bomb_Delay ) ;
4698: LD_EXP 29
4702: PPUSH
4703: CALL_OW 67
// EnableSibFiss ;
4707: CALL 4712 0 0
// end ;
4711: END
// function EnableSibFiss ; var i ; begin
4712: LD_INT 0
4714: PPUSH
4715: PPUSH
// for i := 1 to 8 do
4716: LD_ADDR_VAR 0 2
4720: PUSH
4721: DOUBLE
4722: LD_INT 1
4724: DEC
4725: ST_TO_ADDR
4726: LD_INT 8
4728: PUSH
4729: FOR_TO
4730: IFFALSE 4776
// if Side_Positions [ i ] then
4732: LD_EXP 34
4736: PUSH
4737: LD_VAR 0 2
4741: ARRAY
4742: IFFALSE 4774
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4744: LD_INT 25
4746: PPUSH
4747: LD_VAR 0 2
4751: PPUSH
4752: LD_INT 1
4754: PPUSH
4755: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4759: LD_INT 73
4761: PPUSH
4762: LD_VAR 0 2
4766: PPUSH
4767: LD_INT 1
4769: PPUSH
4770: CALL_OW 322
// end ;
4774: GO 4729
4776: POP
4777: POP
// end ; end_of_file
4778: LD_VAR 0 1
4782: RET
// every 0 0$25 + 0 0$1.0 do
4783: GO 4785
4785: DISABLE
// begin if GetResourceArea ( Center1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4786: LD_INT 13
4788: PPUSH
4789: LD_INT 1
4791: PPUSH
4792: CALL_OW 287
4796: PUSH
4797: LD_INT 200
4799: PUSH
4800: LD_EXP 23
4804: MINUS
4805: PUSH
4806: LD_INT 25
4808: DIVREAL
4809: PUSH
4810: LD_INT 5
4812: MUL
4813: LESS
4814: IFFALSE 4829
// CreateCratesArea ( 5 , Center1 , true ) ;
4816: LD_INT 5
4818: PPUSH
4819: LD_INT 13
4821: PPUSH
4822: LD_INT 1
4824: PPUSH
4825: CALL_OW 55
// if GetResourceArea ( Center2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4829: LD_INT 14
4831: PPUSH
4832: LD_INT 1
4834: PPUSH
4835: CALL_OW 287
4839: PUSH
4840: LD_INT 200
4842: PUSH
4843: LD_EXP 23
4847: MINUS
4848: PUSH
4849: LD_INT 25
4851: DIVREAL
4852: PUSH
4853: LD_INT 5
4855: MUL
4856: LESS
4857: IFFALSE 4872
// CreateCratesArea ( 5 , Center2 , true ) ;
4859: LD_INT 5
4861: PPUSH
4862: LD_INT 14
4864: PPUSH
4865: LD_INT 1
4867: PPUSH
4868: CALL_OW 55
// if GetResourceArea ( Center3 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4872: LD_INT 15
4874: PPUSH
4875: LD_INT 1
4877: PPUSH
4878: CALL_OW 287
4882: PUSH
4883: LD_INT 200
4885: PUSH
4886: LD_EXP 23
4890: MINUS
4891: PUSH
4892: LD_INT 25
4894: DIVREAL
4895: PUSH
4896: LD_INT 5
4898: MUL
4899: LESS
4900: IFFALSE 4915
// CreateCratesArea ( 5 , Center3 , true ) ;
4902: LD_INT 5
4904: PPUSH
4905: LD_INT 15
4907: PPUSH
4908: LD_INT 1
4910: PPUSH
4911: CALL_OW 55
// CreateCratesArea ( 5 , BuildUpEscape , true ) ;
4915: LD_INT 5
4917: PPUSH
4918: LD_INT 16
4920: PPUSH
4921: LD_INT 1
4923: PPUSH
4924: CALL_OW 55
// enable ;
4928: ENABLE
// end ;
4929: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4930: GO 4932
4932: DISABLE
4933: LD_INT 0
4935: PPUSH
4936: PPUSH
// begin case tick of 1 .. 1 1$0 :
4937: LD_OWVAR 1
4941: PUSH
4942: LD_INT 1
4944: DOUBLE
4945: GREATEREQUAL
4946: IFFALSE 4954
4948: LD_INT 2100
4950: DOUBLE
4951: LESSEQUAL
4952: IFTRUE 4956
4954: GO 4984
4956: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4957: LD_EXP 23
4961: PUSH
4962: LD_INT 100
4964: DIVREAL
4965: PUSH
4966: LD_INT 525
4968: PPUSH
4969: LD_INT 1050
4971: PPUSH
4972: CALL_OW 12
4976: MUL
4977: PPUSH
4978: CALL_OW 67
4982: GO 5286
4984: LD_INT 2100
4986: PUSH
4987: LD_INT 1
4989: PLUS
4990: DOUBLE
4991: GREATEREQUAL
4992: IFFALSE 5000
4994: LD_INT 10500
4996: DOUBLE
4997: LESSEQUAL
4998: IFTRUE 5002
5000: GO 5030
5002: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5003: LD_EXP 23
5007: PUSH
5008: LD_INT 100
5010: DIVREAL
5011: PUSH
5012: LD_INT 1050
5014: PPUSH
5015: LD_INT 1750
5017: PPUSH
5018: CALL_OW 12
5022: MUL
5023: PPUSH
5024: CALL_OW 67
5028: GO 5286
5030: LD_INT 10500
5032: PUSH
5033: LD_INT 1
5035: PLUS
5036: DOUBLE
5037: GREATEREQUAL
5038: IFFALSE 5046
5040: LD_INT 21000
5042: DOUBLE
5043: LESSEQUAL
5044: IFTRUE 5048
5046: GO 5076
5048: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5049: LD_EXP 23
5053: PUSH
5054: LD_INT 100
5056: DIVREAL
5057: PUSH
5058: LD_INT 1750
5060: PPUSH
5061: LD_INT 2100
5063: PPUSH
5064: CALL_OW 12
5068: MUL
5069: PPUSH
5070: CALL_OW 67
5074: GO 5286
5076: LD_INT 21000
5078: PUSH
5079: LD_INT 1
5081: PLUS
5082: DOUBLE
5083: GREATEREQUAL
5084: IFFALSE 5092
5086: LD_INT 42000
5088: DOUBLE
5089: LESSEQUAL
5090: IFTRUE 5094
5092: GO 5122
5094: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5095: LD_EXP 23
5099: PUSH
5100: LD_INT 100
5102: DIVREAL
5103: PUSH
5104: LD_INT 2100
5106: PPUSH
5107: LD_INT 2275
5109: PPUSH
5110: CALL_OW 12
5114: MUL
5115: PPUSH
5116: CALL_OW 67
5120: GO 5286
5122: LD_INT 42000
5124: PUSH
5125: LD_INT 1
5127: PLUS
5128: DOUBLE
5129: GREATEREQUAL
5130: IFFALSE 5138
5132: LD_INT 63000
5134: DOUBLE
5135: LESSEQUAL
5136: IFTRUE 5140
5138: GO 5168
5140: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5141: LD_EXP 23
5145: PUSH
5146: LD_INT 100
5148: DIVREAL
5149: PUSH
5150: LD_INT 2275
5152: PPUSH
5153: LD_INT 2450
5155: PPUSH
5156: CALL_OW 12
5160: MUL
5161: PPUSH
5162: CALL_OW 67
5166: GO 5286
5168: LD_INT 63000
5170: PUSH
5171: LD_INT 1
5173: PLUS
5174: DOUBLE
5175: GREATEREQUAL
5176: IFFALSE 5184
5178: LD_INT 105000
5180: DOUBLE
5181: LESSEQUAL
5182: IFTRUE 5186
5184: GO 5214
5186: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5187: LD_EXP 23
5191: PUSH
5192: LD_INT 100
5194: DIVREAL
5195: PUSH
5196: LD_INT 2450
5198: PPUSH
5199: LD_INT 2800
5201: PPUSH
5202: CALL_OW 12
5206: MUL
5207: PPUSH
5208: CALL_OW 67
5212: GO 5286
5214: LD_INT 105000
5216: PUSH
5217: LD_INT 1
5219: PLUS
5220: DOUBLE
5221: GREATEREQUAL
5222: IFFALSE 5230
5224: LD_INT 630000
5226: DOUBLE
5227: LESSEQUAL
5228: IFTRUE 5232
5230: GO 5260
5232: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5233: LD_EXP 23
5237: PUSH
5238: LD_INT 100
5240: DIVREAL
5241: PUSH
5242: LD_INT 2800
5244: PPUSH
5245: LD_INT 3500
5247: PPUSH
5248: CALL_OW 12
5252: MUL
5253: PPUSH
5254: CALL_OW 67
5258: GO 5286
5260: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5261: LD_EXP 23
5265: PUSH
5266: LD_INT 100
5268: DIVREAL
5269: PUSH
5270: LD_INT 3500
5272: PPUSH
5273: LD_INT 3850
5275: PPUSH
5276: CALL_OW 12
5280: MUL
5281: PPUSH
5282: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5286: LD_ADDR_VAR 0 2
5290: PUSH
5291: LD_INT 3
5293: PPUSH
5294: LD_INT 5
5296: PPUSH
5297: CALL_OW 12
5301: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5302: LD_ADDR_VAR 0 1
5306: PUSH
5307: LD_EXP 34
5311: PUSH
5312: LD_INT 0
5314: PUSH
5315: EMPTY
5316: LIST
5317: DIFF
5318: PUSH
5319: FOR_IN
5320: IFFALSE 5369
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5322: LD_VAR 0 2
5326: PPUSH
5327: LD_EXP 39
5331: PUSH
5332: LD_VAR 0 1
5336: ARRAY
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: LD_EXP 39
5346: PUSH
5347: LD_VAR 0 1
5351: ARRAY
5352: PUSH
5353: LD_INT 2
5355: ARRAY
5356: PPUSH
5357: LD_INT 20
5359: PPUSH
5360: LD_INT 1
5362: PPUSH
5363: CALL_OW 56
5367: GO 5319
5369: POP
5370: POP
// enable ;
5371: ENABLE
// end ; end_of_file
5372: PPOPN 2
5374: END
// every 20 20$00 trigger apemanNumber do
5375: LD_EXP 46
5379: IFFALSE 5412
5381: GO 5383
5383: DISABLE
// begin enable ;
5384: ENABLE
// if apeLevel >= 8 then
5385: LD_EXP 51
5389: PUSH
5390: LD_INT 8
5392: GREATEREQUAL
5393: IFFALSE 5398
// disable else
5395: DISABLE
5396: GO 5412
// apeLevel := apeLevel + 1 ;
5398: LD_ADDR_EXP 51
5402: PUSH
5403: LD_EXP 51
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: ST_TO_ADDR
// end ;
5412: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5413: LD_EXP 46
5417: PUSH
5418: LD_EXP 47
5422: LESS
5423: IFFALSE 5563
5425: GO 5427
5427: DISABLE
5428: LD_INT 0
5430: PPUSH
5431: PPUSH
5432: PPUSH
5433: PPUSH
// begin enable ;
5434: ENABLE
// for i := 1 to apemanPos do
5435: LD_ADDR_VAR 0 1
5439: PUSH
5440: DOUBLE
5441: LD_INT 1
5443: DEC
5444: ST_TO_ADDR
5445: LD_EXP 49
5449: PUSH
5450: FOR_TO
5451: IFFALSE 5561
// begin if apemanPlayerCount [ i ] then
5453: LD_EXP 50
5457: PUSH
5458: LD_VAR 0 1
5462: ARRAY
5463: IFFALSE 5559
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5465: LD_EXP 50
5469: PUSH
5470: LD_VAR 0 1
5474: ARRAY
5475: PUSH
5476: LD_EXP 49
5480: PUSH
5481: LD_VAR 0 1
5485: ARRAY
5486: GREATER
5487: IFFALSE 5559
// begin ape := PrepareApeman ;
5489: LD_ADDR_VAR 0 2
5493: PUSH
5494: CALL 6074 0 0
5498: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5499: LD_VAR 0 2
5503: PPUSH
5504: LD_EXP 52
5508: PUSH
5509: LD_VAR 0 1
5513: ARRAY
5514: PPUSH
5515: LD_INT 0
5517: PPUSH
5518: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5522: LD_ADDR_EXP 49
5526: PUSH
5527: LD_EXP 49
5531: PPUSH
5532: LD_VAR 0 1
5536: PPUSH
5537: LD_EXP 49
5541: PUSH
5542: LD_VAR 0 1
5546: ARRAY
5547: PUSH
5548: LD_VAR 0 2
5552: UNION
5553: PPUSH
5554: CALL_OW 1
5558: ST_TO_ADDR
// end ; end ; end ;
5559: GO 5450
5561: POP
5562: POP
// end ;
5563: PPOPN 4
5565: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
5570: PPUSH
5571: PPUSH
5572: PPUSH
5573: PPUSH
5574: PPUSH
// playersAmount := 0 ;
5575: LD_ADDR_VAR 0 3
5579: PUSH
5580: LD_INT 0
5582: ST_TO_ADDR
// _apeAreas := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 , ] ;
5583: LD_ADDR_VAR 0 7
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: LD_INT 2
5593: PUSH
5594: LD_INT 3
5596: PUSH
5597: LD_INT 4
5599: PUSH
5600: LD_INT 5
5602: PUSH
5603: LD_INT 6
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5614: LD_ADDR_EXP 52
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: LD_INT 0
5624: PUSH
5625: LD_INT 0
5627: PUSH
5628: LD_INT 0
5630: PUSH
5631: LD_INT 0
5633: PUSH
5634: LD_INT 0
5636: PUSH
5637: LD_INT 0
5639: PUSH
5640: LD_INT 0
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: ST_TO_ADDR
// for j = 1 to Side_Positions do
5653: LD_ADDR_VAR 0 4
5657: PUSH
5658: DOUBLE
5659: LD_INT 1
5661: DEC
5662: ST_TO_ADDR
5663: LD_EXP 34
5667: PUSH
5668: FOR_TO
5669: IFFALSE 5736
// if Side_Positions [ j ] then
5671: LD_EXP 34
5675: PUSH
5676: LD_VAR 0 4
5680: ARRAY
5681: IFFALSE 5734
// begin playersAmount := playersAmount + 1 ;
5683: LD_ADDR_VAR 0 3
5687: PUSH
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 1
5695: PLUS
5696: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5697: LD_ADDR_EXP 52
5701: PUSH
5702: LD_EXP 52
5706: PPUSH
5707: LD_VAR 0 4
5711: PPUSH
5712: LD_VAR 0 7
5716: PUSH
5717: LD_EXP 34
5721: PUSH
5722: LD_VAR 0 4
5726: ARRAY
5727: ARRAY
5728: PPUSH
5729: CALL_OW 1
5733: ST_TO_ADDR
// end ;
5734: GO 5668
5736: POP
5737: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5738: LD_ADDR_EXP 48
5742: PUSH
5743: LD_INT 3
5745: PUSH
5746: LD_EXP 25
5750: MUL
5751: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5752: LD_ADDR_EXP 46
5756: PUSH
5757: LD_VAR 0 3
5761: PUSH
5762: LD_EXP 48
5766: MUL
5767: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5768: LD_ADDR_EXP 47
5772: PUSH
5773: LD_EXP 46
5777: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5778: LD_ADDR_EXP 49
5782: PUSH
5783: LD_INT 0
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: LD_INT 0
5791: PUSH
5792: LD_INT 0
5794: PUSH
5795: LD_INT 0
5797: PUSH
5798: LD_INT 0
5800: PUSH
5801: LD_INT 0
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5817: LD_ADDR_EXP 50
5821: PUSH
5822: LD_INT 0
5824: PUSH
5825: LD_INT 0
5827: PUSH
5828: LD_INT 0
5830: PUSH
5831: LD_INT 0
5833: PUSH
5834: LD_INT 0
5836: PUSH
5837: LD_INT 0
5839: PUSH
5840: LD_INT 0
5842: PUSH
5843: LD_INT 0
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: ST_TO_ADDR
// apeLevel := 1 ;
5856: LD_ADDR_EXP 51
5860: PUSH
5861: LD_INT 1
5863: ST_TO_ADDR
// if not apemanNumber then
5864: LD_EXP 46
5868: NOT
5869: IFFALSE 5873
// exit ;
5871: GO 6069
// for i := 1 to apemanPerPlayer do
5873: LD_ADDR_VAR 0 2
5877: PUSH
5878: DOUBLE
5879: LD_INT 1
5881: DEC
5882: ST_TO_ADDR
5883: LD_EXP 48
5887: PUSH
5888: FOR_TO
5889: IFFALSE 6067
// begin for j := 1 to Side_Positions do
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: DOUBLE
5897: LD_INT 1
5899: DEC
5900: ST_TO_ADDR
5901: LD_EXP 34
5905: PUSH
5906: FOR_TO
5907: IFFALSE 6063
// if Side_Positions [ j ] then
5909: LD_EXP 34
5913: PUSH
5914: LD_VAR 0 4
5918: ARRAY
5919: IFFALSE 6061
// begin pos := Side_Positions [ j ] ;
5921: LD_ADDR_VAR 0 6
5925: PUSH
5926: LD_EXP 34
5930: PUSH
5931: LD_VAR 0 4
5935: ARRAY
5936: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5937: LD_ADDR_EXP 50
5941: PUSH
5942: LD_EXP 50
5946: PPUSH
5947: LD_VAR 0 4
5951: PPUSH
5952: LD_EXP 50
5956: PUSH
5957: LD_VAR 0 4
5961: ARRAY
5962: PUSH
5963: LD_INT 1
5965: PLUS
5966: PPUSH
5967: CALL_OW 1
5971: ST_TO_ADDR
// ape := PrepareApeman ;
5972: LD_ADDR_VAR 0 5
5976: PUSH
5977: CALL 6074 0 0
5981: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5982: LD_ADDR_EXP 49
5986: PUSH
5987: LD_EXP 49
5991: PPUSH
5992: LD_VAR 0 4
5996: PPUSH
5997: LD_EXP 49
6001: PUSH
6002: LD_VAR 0 4
6006: ARRAY
6007: PPUSH
6008: LD_EXP 49
6012: PUSH
6013: LD_VAR 0 4
6017: ARRAY
6018: PUSH
6019: LD_INT 1
6021: PLUS
6022: PPUSH
6023: LD_VAR 0 5
6027: PPUSH
6028: CALL_OW 1
6032: PPUSH
6033: CALL_OW 1
6037: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6038: LD_VAR 0 5
6042: PPUSH
6043: LD_EXP 52
6047: PUSH
6048: LD_VAR 0 4
6052: ARRAY
6053: PPUSH
6054: LD_INT 0
6056: PPUSH
6057: CALL_OW 49
// end ;
6061: GO 5906
6063: POP
6064: POP
// end ;
6065: GO 5888
6067: POP
6068: POP
// end ;
6069: LD_VAR 0 1
6073: RET
// export function PrepareApeman ; var bonus ; begin
6074: LD_INT 0
6076: PPUSH
6077: PPUSH
// uc_side := 0 ;
6078: LD_ADDR_OWVAR 20
6082: PUSH
6083: LD_INT 0
6085: ST_TO_ADDR
// uc_nation := 0 ;
6086: LD_ADDR_OWVAR 21
6090: PUSH
6091: LD_INT 0
6093: ST_TO_ADDR
// InitHc ;
6094: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6098: LD_ADDR_VAR 0 2
6102: PUSH
6103: LD_INT 1
6105: NEG
6106: PUSH
6107: LD_INT 0
6109: PUSH
6110: LD_INT 1
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 25
6120: PUSH
6121: LD_INT 12
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PPUSH
6128: CALL_OW 69
6132: PUSH
6133: LD_INT 3
6135: MOD
6136: PUSH
6137: LD_INT 1
6139: PLUS
6140: ARRAY
6141: ST_TO_ADDR
// hc_class := class_apeman ;
6142: LD_ADDR_OWVAR 28
6146: PUSH
6147: LD_INT 12
6149: ST_TO_ADDR
// hc_gallery :=  ;
6150: LD_ADDR_OWVAR 33
6154: PUSH
6155: LD_STRING 
6157: ST_TO_ADDR
// hc_name :=  ;
6158: LD_ADDR_OWVAR 26
6162: PUSH
6163: LD_STRING 
6165: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6166: LD_ADDR_OWVAR 31
6170: PUSH
6171: LD_EXP 51
6175: PUSH
6176: LD_VAR 0 2
6180: PLUS
6181: PUSH
6182: LD_EXP 51
6186: PUSH
6187: LD_VAR 0 2
6191: PLUS
6192: PUSH
6193: LD_EXP 51
6197: PUSH
6198: LD_VAR 0 2
6202: PLUS
6203: PUSH
6204: LD_EXP 51
6208: PUSH
6209: LD_VAR 0 2
6213: PLUS
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6221: LD_ADDR_OWVAR 35
6225: PUSH
6226: LD_INT 10
6228: PUSH
6229: LD_VAR 0 2
6233: MUL
6234: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6235: LD_ADDR_OWVAR 29
6239: PUSH
6240: LD_INT 12
6242: PUSH
6243: LD_INT 12
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: ST_TO_ADDR
// result := CreateHuman ;
6250: LD_ADDR_VAR 0 1
6254: PUSH
6255: CALL_OW 44
6259: ST_TO_ADDR
// end ;
6260: LD_VAR 0 1
6264: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6265: LD_INT 0
6267: PPUSH
6268: PPUSH
6269: PPUSH
// if not ape then
6270: LD_VAR 0 1
6274: NOT
6275: IFFALSE 6279
// exit ;
6277: GO 6404
// side := GetSide ( ape ) ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 1
6288: PPUSH
6289: CALL_OW 255
6293: ST_TO_ADDR
// if not side then
6294: LD_VAR 0 3
6298: NOT
6299: IFFALSE 6353
// begin for i = 1 to apemanPos do
6301: LD_ADDR_VAR 0 4
6305: PUSH
6306: DOUBLE
6307: LD_INT 1
6309: DEC
6310: ST_TO_ADDR
6311: LD_EXP 49
6315: PUSH
6316: FOR_TO
6317: IFFALSE 6351
// if ape in apemanPos [ i ] then
6319: LD_VAR 0 1
6323: PUSH
6324: LD_EXP 49
6328: PUSH
6329: LD_VAR 0 4
6333: ARRAY
6334: IN
6335: IFFALSE 6349
// begin side := i ;
6337: LD_ADDR_VAR 0 3
6341: PUSH
6342: LD_VAR 0 4
6346: ST_TO_ADDR
// break ;
6347: GO 6351
// end ;
6349: GO 6316
6351: POP
6352: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6353: LD_ADDR_EXP 49
6357: PUSH
6358: LD_EXP 49
6362: PPUSH
6363: LD_VAR 0 3
6367: PPUSH
6368: LD_EXP 49
6372: PUSH
6373: LD_VAR 0 3
6377: ARRAY
6378: PUSH
6379: LD_VAR 0 1
6383: DIFF
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6390: LD_ADDR_EXP 46
6394: PUSH
6395: LD_EXP 46
6399: PUSH
6400: LD_INT 1
6402: MINUS
6403: ST_TO_ADDR
// end ; end_of_file
6404: LD_VAR 0 2
6408: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6409: LD_VAR 0 1
6413: PPUSH
6414: CALL_OW 266
6418: PUSH
6419: LD_INT 0
6421: PUSH
6422: LD_INT 1
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: IN
6429: IFFALSE 6454
// SetBName ( b , @ & GetSide ( b ) ) ;
6431: LD_VAR 0 1
6435: PPUSH
6436: LD_STRING @
6438: PUSH
6439: LD_VAR 0 1
6443: PPUSH
6444: CALL_OW 255
6448: STR
6449: PPUSH
6450: CALL_OW 500
// end ;
6454: PPOPN 2
6456: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6457: LD_VAR 0 1
6461: PPUSH
6462: CALL_OW 266
6466: PUSH
6467: LD_INT 0
6469: PUSH
6470: LD_INT 1
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: IN
6477: IFFALSE 6502
// SetBName ( b , @ & GetSide ( b ) ) ;
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_STRING @
6486: PUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 255
6496: STR
6497: PPUSH
6498: CALL_OW 500
// end ;
6502: PPOPN 3
6504: END
// on VehicleConstructed ( veh , fac ) do var side ;
6505: LD_INT 0
6507: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6508: LD_VAR 0 1
6512: PPUSH
6513: CALL_OW 263
6517: PUSH
6518: LD_INT 5
6520: EQUAL
6521: IFFALSE 6663
// begin side := GetSide ( veh ) ;
6523: LD_ADDR_VAR 0 3
6527: PUSH
6528: LD_VAR 0 1
6532: PPUSH
6533: CALL_OW 255
6537: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6538: LD_ADDR_EXP 49
6542: PUSH
6543: LD_EXP 49
6547: PPUSH
6548: LD_VAR 0 3
6552: PPUSH
6553: LD_EXP 49
6557: PUSH
6558: LD_VAR 0 3
6562: ARRAY
6563: PPUSH
6564: LD_INT 52
6566: PUSH
6567: EMPTY
6568: LIST
6569: PPUSH
6570: CALL_OW 72
6574: PUSH
6575: LD_INT 22
6577: PUSH
6578: LD_VAR 0 3
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 2
6589: PUSH
6590: LD_INT 33
6592: PUSH
6593: LD_INT 5
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 25
6602: PUSH
6603: LD_INT 12
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 25
6612: PUSH
6613: LD_INT 15
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 25
6622: PUSH
6623: LD_INT 16
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 25
6632: PUSH
6633: LD_INT 17
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: PPUSH
6652: CALL_OW 69
6656: UNION
6657: PPUSH
6658: CALL_OW 1
6662: ST_TO_ADDR
// end ; end ;
6663: PPOPN 3
6665: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6666: LD_INT 0
6668: PPUSH
6669: PPUSH
6670: PPUSH
6671: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6672: LD_VAR 0 1
6676: PPUSH
6677: CALL_OW 257
6681: PUSH
6682: LD_INT 12
6684: PUSH
6685: LD_INT 15
6687: PUSH
6688: LD_INT 17
6690: PUSH
6691: LD_INT 16
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: IN
6700: PUSH
6701: LD_VAR 0 1
6705: PPUSH
6706: CALL_OW 263
6710: PUSH
6711: LD_INT 5
6713: EQUAL
6714: OR
6715: IFFALSE 6726
// ApeKilled ( j ) ;
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL 6265 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6726: LD_VAR 0 1
6730: PPUSH
6731: CALL_OW 266
6735: PUSH
6736: LD_INT 0
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: IN
6746: IFFALSE 6828
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6748: LD_ADDR_VAR 0 4
6752: PUSH
6753: LD_EXP 34
6757: PUSH
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 255
6767: ARRAY
6768: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6769: LD_ADDR_VAR 0 2
6773: PUSH
6774: LD_EXP 39
6778: PUSH
6779: LD_VAR 0 4
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6789: LD_ADDR_VAR 0 3
6793: PUSH
6794: LD_EXP 39
6798: PUSH
6799: LD_VAR 0 4
6803: ARRAY
6804: PUSH
6805: LD_INT 2
6807: ARRAY
6808: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6809: LD_VAR 0 2
6813: PPUSH
6814: LD_VAR 0 3
6818: PPUSH
6819: CALL_OW 420
6823: PPUSH
6824: CALL_OW 419
// end ; end ;
6828: PPOPN 5
6830: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6831: LD_VAR 0 1
6835: PPUSH
6836: LD_VAR 0 2
6840: PPUSH
6841: LD_VAR 0 3
6845: PPUSH
6846: LD_OWVAR 2
6850: PPUSH
6851: CALL 7233 0 4
6855: PPOPN 3
6857: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6858: LD_INT 0
6860: PPUSH
6861: PPUSH
// for un in battle_flags_id do
6862: LD_ADDR_VAR 0 2
6866: PUSH
6867: LD_EXP 44
6871: PUSH
6872: FOR_IN
6873: IFFALSE 6948
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6875: LD_VAR 0 2
6879: PPUSH
6880: LD_INT 1
6882: PUSH
6883: LD_LOC 9
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 2
6894: PUSH
6895: LD_LOC 9
6899: PUSH
6900: LD_INT 2
6902: DIV
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PUSH
6908: LD_INT 3
6910: PUSH
6911: LD_LOC 9
6915: PUSH
6916: LD_INT 5
6918: DIV
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 20
6926: PUSH
6927: LD_LOC 9
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: PPUSH
6942: CALL_OW 423
6946: GO 6872
6948: POP
6949: POP
// end ;
6950: LD_VAR 0 1
6954: RET
// every 1 do var un ;
6955: GO 6957
6957: DISABLE
6958: LD_INT 0
6960: PPUSH
// begin if not def_morale_flags then
6961: LD_EXP 9
6965: NOT
6966: IFFALSE 6970
// exit ;
6968: GO 7047
// if not morale_decreasing_time then
6970: LD_EXP 24
6974: NOT
6975: IFFALSE 6979
// exit ;
6977: GO 7047
// strength = 100 ;
6979: LD_ADDR_LOC 9
6983: PUSH
6984: LD_INT 100
6986: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6987: LD_EXP 24
6991: PPUSH
6992: CALL_OW 67
// strength := strength - 1 ;
6996: LD_ADDR_LOC 9
7000: PUSH
7001: LD_LOC 9
7005: PUSH
7006: LD_INT 1
7008: MINUS
7009: ST_TO_ADDR
// Update_Flags ;
7010: CALL 6858 0 0
// until not strength ;
7014: LD_LOC 9
7018: NOT
7019: IFFALSE 6987
// for un in battle_flags_id do
7021: LD_ADDR_VAR 0 1
7025: PUSH
7026: LD_EXP 44
7030: PUSH
7031: FOR_IN
7032: IFFALSE 7045
// KillBattleFlag ( un ) ;
7034: LD_VAR 0 1
7038: PPUSH
7039: CALL_OW 419
7043: GO 7031
7045: POP
7046: POP
// end ; end_of_file
7047: PPOPN 1
7049: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7050: LD_INT 0
7052: PPUSH
7053: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7054: LD_ADDR_VAR 0 2
7058: PUSH
7059: LD_STRING #Multi1x1-Time
7061: PUSH
7062: LD_OWVAR 1
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: ST_TO_ADDR
// if WaitServerStrings then
7071: LD_EXP 54
7075: IFFALSE 7093
// AllStrings = AllStrings ^ WaitServerStrings ;
7077: LD_ADDR_VAR 0 2
7081: PUSH
7082: LD_VAR 0 2
7086: PUSH
7087: LD_EXP 54
7091: ADD
7092: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7093: LD_INT 0
7095: PUSH
7096: LD_EXP 29
7100: PUSH
7101: LD_OWVAR 1
7105: MINUS
7106: LESSEQUAL
7107: IFFALSE 7138
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7109: LD_ADDR_VAR 0 2
7113: PUSH
7114: LD_VAR 0 2
7118: PUSH
7119: LD_STRING #allowedsibbomb
7121: PUSH
7122: LD_EXP 29
7126: PUSH
7127: LD_OWVAR 1
7131: MINUS
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: ADD
7137: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7138: LD_INT 0
7140: PUSH
7141: LD_EXP 57
7145: PUSH
7146: LD_OWVAR 1
7150: MINUS
7151: LESSEQUAL
7152: IFFALSE 7183
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7154: LD_ADDR_VAR 0 2
7158: PUSH
7159: LD_VAR 0 2
7163: PUSH
7164: LD_STRING #builduptime
7166: PUSH
7167: LD_EXP 57
7171: PUSH
7172: LD_OWVAR 1
7176: MINUS
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: ADD
7182: ST_TO_ADDR
// if ( ExtraStrings ) then
7183: LD_EXP 53
7187: IFFALSE 7209
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7189: LD_ADDR_VAR 0 2
7193: PUSH
7194: LD_VAR 0 2
7198: PUSH
7199: LD_STRING 
7201: ADD
7202: PUSH
7203: LD_EXP 53
7207: ADD
7208: ST_TO_ADDR
// Display_Strings := AllStrings ;
7209: LD_ADDR_OWVAR 47
7213: PUSH
7214: LD_VAR 0 2
7218: ST_TO_ADDR
// end ;
7219: LD_VAR 0 1
7223: RET
// every 0 0$1 do
7224: GO 7226
7226: DISABLE
// begin ShowTimer ;
7227: CALL 7050 0 0
// enable ;
7231: ENABLE
// end ; end_of_file
7232: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7233: LD_INT 0
7235: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7236: LD_VAR 0 1
7240: PPUSH
7241: CALL_OW 255
7245: PUSH
7246: LD_VAR 0 4
7250: EQUAL
7251: IFFALSE 7270
// begin SetAchievement ( ACH_RAD ) ;
7253: LD_STRING ACH_RAD
7255: PPUSH
7256: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7260: LD_STRING ACH_NL
7262: PPUSH
7263: LD_INT 1
7265: PPUSH
7266: CALL_OW 564
// end end ;
7270: LD_VAR 0 5
7274: RET
// export function SA_Win ( side ) ; begin
7275: LD_INT 0
7277: PPUSH
// case side of 1 :
7278: LD_VAR 0 1
7282: PUSH
7283: LD_INT 1
7285: DOUBLE
7286: EQUAL
7287: IFTRUE 7291
7289: GO 7304
7291: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7292: LD_STRING ACH_AH
7294: PPUSH
7295: LD_INT 1
7297: PPUSH
7298: CALL_OW 564
7302: GO 7467
7304: LD_INT 2
7306: DOUBLE
7307: EQUAL
7308: IFTRUE 7312
7310: GO 7325
7312: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7313: LD_STRING ACH_E
7315: PPUSH
7316: LD_INT 1
7318: PPUSH
7319: CALL_OW 564
7323: GO 7467
7325: LD_INT 3
7327: DOUBLE
7328: EQUAL
7329: IFTRUE 7333
7331: GO 7346
7333: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7334: LD_STRING ACH_OOL
7336: PPUSH
7337: LD_INT 1
7339: PPUSH
7340: CALL_OW 564
7344: GO 7467
7346: LD_INT 1
7348: PUSH
7349: LD_INT 2
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: DOUBLE
7356: EQUAL
7357: IFTRUE 7361
7359: GO 7386
7361: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7362: LD_STRING ACH_AH
7364: PPUSH
7365: LD_REAL  5.00000000000000E-0001
7368: PPUSH
7369: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7373: LD_STRING ACH_E
7375: PPUSH
7376: LD_REAL  5.00000000000000E-0001
7379: PPUSH
7380: CALL_OW 564
// end ; [ 2 , 3 ] :
7384: GO 7467
7386: LD_INT 2
7388: PUSH
7389: LD_INT 3
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: DOUBLE
7396: EQUAL
7397: IFTRUE 7401
7399: GO 7426
7401: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7402: LD_STRING ACH_OOL
7404: PPUSH
7405: LD_REAL  5.00000000000000E-0001
7408: PPUSH
7409: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7413: LD_STRING ACH_E
7415: PPUSH
7416: LD_REAL  5.00000000000000E-0001
7419: PPUSH
7420: CALL_OW 564
// end ; [ 3 , 1 ] :
7424: GO 7467
7426: LD_INT 3
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: DOUBLE
7436: EQUAL
7437: IFTRUE 7441
7439: GO 7466
7441: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7442: LD_STRING ACH_AH
7444: PPUSH
7445: LD_REAL  5.00000000000000E-0001
7448: PPUSH
7449: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7453: LD_STRING ACH_OOL
7455: PPUSH
7456: LD_REAL  5.00000000000000E-0001
7459: PPUSH
7460: CALL_OW 564
// end ; end ;
7464: GO 7467
7466: POP
// end ; end_of_file
7467: LD_VAR 0 2
7471: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7472: LD_INT 0
7474: PPUSH
7475: PPUSH
// enable ( 98 ) ;
7476: LD_INT 98
7478: ENABLE_MARKED
// GameEnded = false ;
7479: LD_ADDR_LOC 15
7483: PUSH
7484: LD_INT 0
7486: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7487: LD_ADDR_LOC 14
7491: PUSH
7492: LD_INT 0
7494: PUSH
7495: LD_INT 0
7497: PUSH
7498: LD_INT 0
7500: PUSH
7501: LD_INT 0
7503: PUSH
7504: LD_INT 0
7506: PUSH
7507: LD_INT 0
7509: PUSH
7510: LD_INT 0
7512: PUSH
7513: LD_INT 0
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: ST_TO_ADDR
// unfoged = false ;
7526: LD_ADDR_LOC 16
7530: PUSH
7531: LD_INT 0
7533: ST_TO_ADDR
// defeated_specs := [ ] ;
7534: LD_ADDR_LOC 17
7538: PUSH
7539: EMPTY
7540: ST_TO_ADDR
// for i = 1 to side_positions do
7541: LD_ADDR_VAR 0 2
7545: PUSH
7546: DOUBLE
7547: LD_INT 1
7549: DEC
7550: ST_TO_ADDR
7551: LD_EXP 34
7555: PUSH
7556: FOR_TO
7557: IFFALSE 7597
// if not side_positions [ i ] then
7559: LD_EXP 34
7563: PUSH
7564: LD_VAR 0 2
7568: ARRAY
7569: NOT
7570: IFFALSE 7595
// defeated = replace ( defeated , i , true ) ;
7572: LD_ADDR_LOC 14
7576: PUSH
7577: LD_LOC 14
7581: PPUSH
7582: LD_VAR 0 2
7586: PPUSH
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 1
7594: ST_TO_ADDR
7595: GO 7556
7597: POP
7598: POP
// end ;
7599: LD_VAR 0 1
7603: RET
// function CanWinLoose ; begin
7604: LD_INT 0
7606: PPUSH
// Result := true ;
7607: LD_ADDR_VAR 0 1
7611: PUSH
7612: LD_INT 1
7614: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7615: CALL_OW 518
7619: PUSH
7620: CALL_OW 519
7624: PUSH
7625: LD_INT 0
7627: GREATER
7628: AND
7629: IFFALSE 7639
// Result := false ;
7631: LD_ADDR_VAR 0 1
7635: PUSH
7636: LD_INT 0
7638: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7639: CALL_OW 531
7643: PUSH
7644: CALL_OW 519
7648: PUSH
7649: LD_INT 1
7651: GREATER
7652: AND
7653: IFFALSE 7663
// Result := false ;
7655: LD_ADDR_VAR 0 1
7659: PUSH
7660: LD_INT 0
7662: ST_TO_ADDR
// end ;
7663: LD_VAR 0 1
7667: RET
// export function HasPower ( i ) ; var k , h ; begin
7668: LD_INT 0
7670: PPUSH
7671: PPUSH
7672: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7673: LD_VAR 0 1
7677: PPUSH
7678: CALL_OW 108
7682: NOT
7683: PUSH
7684: LD_EXP 33
7688: PUSH
7689: LD_VAR 0 1
7693: ARRAY
7694: NOT
7695: AND
7696: PUSH
7697: LD_OWVAR 4
7701: AND
7702: IFFALSE 7714
// begin result = false ;
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: LD_INT 0
7711: ST_TO_ADDR
// end else
7712: GO 8009
// case def_win_rules of 0 :
7714: LD_EXP 30
7718: PUSH
7719: LD_INT 0
7721: DOUBLE
7722: EQUAL
7723: IFTRUE 7727
7725: GO 7890
7727: POP
// if def_people_respawning then
7728: LD_EXP 11
7732: IFFALSE 7823
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7734: LD_ADDR_VAR 0 2
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_VAR 0 1
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 2
7753: PUSH
7754: LD_INT 21
7756: PUSH
7757: LD_INT 1
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 33
7766: PUSH
7767: LD_INT 3
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 33
7776: PUSH
7777: LD_INT 5
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 30
7786: PUSH
7787: LD_INT 0
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 30
7796: PUSH
7797: LD_INT 1
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PPUSH
7816: CALL_OW 69
7820: ST_TO_ADDR
7821: GO 7888
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7823: LD_ADDR_VAR 0 2
7827: PUSH
7828: LD_INT 22
7830: PUSH
7831: LD_VAR 0 1
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: LD_INT 2
7842: PUSH
7843: LD_INT 21
7845: PUSH
7846: LD_INT 1
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 33
7855: PUSH
7856: LD_INT 3
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: PUSH
7863: LD_INT 33
7865: PUSH
7866: LD_INT 5
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PPUSH
7883: CALL_OW 69
7887: ST_TO_ADDR
7888: GO 8009
7890: LD_INT 1
7892: DOUBLE
7893: EQUAL
7894: IFTRUE 7898
7896: GO 7937
7898: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7899: LD_ADDR_VAR 0 2
7903: PUSH
7904: LD_INT 22
7906: PUSH
7907: LD_VAR 0 1
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: PUSH
7916: LD_INT 21
7918: PUSH
7919: LD_INT 1
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PPUSH
7930: CALL_OW 69
7934: ST_TO_ADDR
7935: GO 8009
7937: LD_INT 2
7939: DOUBLE
7940: EQUAL
7941: IFTRUE 7945
7943: GO 8008
7945: POP
// begin h = false ;
7946: LD_ADDR_VAR 0 4
7950: PUSH
7951: LD_INT 0
7953: ST_TO_ADDR
// for k in heroes [ i ] do
7954: LD_ADDR_VAR 0 3
7958: PUSH
7959: LD_EXP 45
7963: PUSH
7964: LD_VAR 0 1
7968: ARRAY
7969: PUSH
7970: FOR_IN
7971: IFFALSE 7994
// if IsLive ( k ) then
7973: LD_VAR 0 3
7977: PPUSH
7978: CALL_OW 300
7982: IFFALSE 7992
// h = true ;
7984: LD_ADDR_VAR 0 4
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
7992: GO 7970
7994: POP
7995: POP
// Result := h ;
7996: LD_ADDR_VAR 0 2
8000: PUSH
8001: LD_VAR 0 4
8005: ST_TO_ADDR
// end ; end ;
8006: GO 8009
8008: POP
// end ;
8009: LD_VAR 0 2
8013: RET
// function AlliedSides ( i , j ) ; begin
8014: LD_INT 0
8016: PPUSH
// Result := false ;
8017: LD_ADDR_VAR 0 3
8021: PUSH
8022: LD_INT 0
8024: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8025: LD_VAR 0 1
8029: PPUSH
8030: LD_VAR 0 2
8034: PPUSH
8035: CALL_OW 81
8039: PUSH
8040: LD_INT 1
8042: EQUAL
8043: PUSH
8044: LD_VAR 0 2
8048: PPUSH
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 81
8058: PUSH
8059: LD_INT 1
8061: EQUAL
8062: AND
8063: PUSH
8064: LD_VAR 0 1
8068: PPUSH
8069: CALL_OW 83
8073: AND
8074: PUSH
8075: LD_VAR 0 2
8079: PPUSH
8080: CALL_OW 83
8084: AND
8085: IFFALSE 8095
// Result := true ;
8087: LD_ADDR_VAR 0 3
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// end ;
8095: LD_VAR 0 3
8099: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8100: CALL 7604 0 0
8104: PUSH
8105: LD_LOC 15
8109: NOT
8110: AND
8111: IFFALSE 8127
8113: GO 8115
8115: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8116: LD_ADDR_EXP 54
8120: PUSH
8121: LD_STRING #Player-Ended
8123: PUSH
8124: EMPTY
8125: LIST
8126: ST_TO_ADDR
8127: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8128: CALL 7604 0 0
8132: PUSH
8133: LD_LOC 15
8137: AND
8138: IFFALSE 8147
8140: GO 8142
8142: DISABLE
// YouLostInMultiplayer ;
8143: CALL_OW 107
8147: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8148: CALL 7604 0 0
8152: NOT
8153: PUSH
8154: CALL_OW 531
8158: NOT
8159: AND
8160: IFFALSE 8176
8162: GO 8164
8164: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8165: LD_ADDR_EXP 54
8169: PUSH
8170: LD_STRING #server-wait
8172: PUSH
8173: EMPTY
8174: LIST
8175: ST_TO_ADDR
8176: END
// every 100 trigger IAmSpec do
8177: CALL_OW 531
8181: IFFALSE 8197
8183: GO 8185
8185: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8186: LD_ADDR_EXP 54
8190: PUSH
8191: LD_STRING #Player-IAmSpec
8193: PUSH
8194: EMPTY
8195: LIST
8196: ST_TO_ADDR
8197: END
// every 100 trigger GameEnded and IAmSpec do
8198: LD_LOC 15
8202: PUSH
8203: CALL_OW 531
8207: AND
8208: IFFALSE 8217
8210: GO 8212
8212: DISABLE
// YouLostInMultiplayer ;
8213: CALL_OW 107
8217: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8218: CALL 7604 0 0
8222: PUSH
8223: LD_LOC 15
8227: NOT
8228: AND
8229: IFFALSE 8245
8231: GO 8233
8233: DISABLE
// WaitServerStrings = [ $player-win ] ;
8234: LD_ADDR_EXP 54
8238: PUSH
8239: LD_STRING $player-win
8241: PUSH
8242: EMPTY
8243: LIST
8244: ST_TO_ADDR
8245: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8246: CALL 7604 0 0
8250: PUSH
8251: LD_LOC 15
8255: AND
8256: IFFALSE 8280
8258: GO 8260
8260: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8261: LD_EXP 35
8265: PUSH
8266: LD_OWVAR 7
8270: ARRAY
8271: PPUSH
8272: CALL 7275 0 1
// YouWinInMultiplayer ;
8276: CALL_OW 106
// end ;
8280: END
// every 100 trigger isEditor marked 401 do
8281: LD_OWVAR 84
8285: IFFALSE 8301
8287: GO 8289
8289: DISABLE
// Debug_Strings = [ You won ] ;
8290: LD_ADDR_OWVAR 48
8294: PUSH
8295: LD_STRING You won
8297: PUSH
8298: EMPTY
8299: LIST
8300: ST_TO_ADDR
8301: END
// every 100 trigger isEditor marked 400 do
8302: LD_OWVAR 84
8306: IFFALSE 8322
8308: GO 8310
8310: DISABLE
// Debug_Strings = [ You loss ] ;
8311: LD_ADDR_OWVAR 48
8315: PUSH
8316: LD_STRING You loss
8318: PUSH
8319: EMPTY
8320: LIST
8321: ST_TO_ADDR
8322: END
// every 100 marked 98 do var i , un ;
8323: GO 8325
8325: DISABLE
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
// begin for i = 1 to side_positions do
8330: LD_ADDR_VAR 0 1
8334: PUSH
8335: DOUBLE
8336: LD_INT 1
8338: DEC
8339: ST_TO_ADDR
8340: LD_EXP 34
8344: PUSH
8345: FOR_TO
8346: IFFALSE 8433
// begin if side_positions [ i ] then
8348: LD_EXP 34
8352: PUSH
8353: LD_VAR 0 1
8357: ARRAY
8358: IFFALSE 8431
// if not HasPower ( i ) and not defeated [ i ] then
8360: LD_VAR 0 1
8364: PPUSH
8365: CALL 7668 0 1
8369: NOT
8370: PUSH
8371: LD_LOC 14
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: NOT
8382: AND
8383: IFFALSE 8431
// begin defeated = replace ( defeated , i , true ) ;
8385: LD_ADDR_LOC 14
8389: PUSH
8390: LD_LOC 14
8394: PPUSH
8395: LD_VAR 0 1
8399: PPUSH
8400: LD_INT 1
8402: PPUSH
8403: CALL_OW 1
8407: ST_TO_ADDR
// if i = mp_player_side then
8408: LD_VAR 0 1
8412: PUSH
8413: LD_OWVAR 7
8417: EQUAL
8418: IFFALSE 8431
// begin Multiplayer_Loose_Message ;
8420: CALL_OW 521
// SetPlayerSpectator ( ) ;
8424: CALL_OW 572
// enable ( 400 ) ;
8428: LD_INT 400
8430: ENABLE_MARKED
// end ; end ; end ;
8431: GO 8345
8433: POP
8434: POP
// DidGameEnd ;
8435: CALL 8450 0 0
// if not GameEnded then
8439: LD_LOC 15
8443: NOT
8444: IFFALSE 8447
// enable ;
8446: ENABLE
// end ;
8447: PPOPN 2
8449: END
// function DidGameEnd ; var i , k , enemy ; begin
8450: LD_INT 0
8452: PPUSH
8453: PPUSH
8454: PPUSH
8455: PPUSH
// enemy = [ ] ;
8456: LD_ADDR_VAR 0 4
8460: PUSH
8461: EMPTY
8462: ST_TO_ADDR
// for i = 1 to side_positions do
8463: LD_ADDR_VAR 0 2
8467: PUSH
8468: DOUBLE
8469: LD_INT 1
8471: DEC
8472: ST_TO_ADDR
8473: LD_EXP 34
8477: PUSH
8478: FOR_TO
8479: IFFALSE 8573
// if not defeated [ i ] then
8481: LD_LOC 14
8485: PUSH
8486: LD_VAR 0 2
8490: ARRAY
8491: NOT
8492: IFFALSE 8571
// for k = 1 to side_positions do
8494: LD_ADDR_VAR 0 3
8498: PUSH
8499: DOUBLE
8500: LD_INT 1
8502: DEC
8503: ST_TO_ADDR
8504: LD_EXP 34
8508: PUSH
8509: FOR_TO
8510: IFFALSE 8569
// if not defeated [ k ] then
8512: LD_LOC 14
8516: PUSH
8517: LD_VAR 0 3
8521: ARRAY
8522: NOT
8523: IFFALSE 8567
// if not AlliedSides ( i , k ) then
8525: LD_VAR 0 2
8529: PPUSH
8530: LD_VAR 0 3
8534: PPUSH
8535: CALL 8014 0 2
8539: NOT
8540: IFFALSE 8567
// enemy = enemy ^ [ i , k ] ;
8542: LD_ADDR_VAR 0 4
8546: PUSH
8547: LD_VAR 0 4
8551: PUSH
8552: LD_VAR 0 2
8556: PUSH
8557: LD_VAR 0 3
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: ADD
8566: ST_TO_ADDR
8567: GO 8509
8569: POP
8570: POP
8571: GO 8478
8573: POP
8574: POP
// if not enemy then
8575: LD_VAR 0 4
8579: NOT
8580: IFFALSE 8606
// begin GameEnded = true ;
8582: LD_ADDR_LOC 15
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8590: LD_LOC 14
8594: PUSH
8595: LD_OWVAR 7
8599: ARRAY
8600: NOT
8601: IFFALSE 8606
// enable ( 401 ) ;
8603: LD_INT 401
8605: ENABLE_MARKED
// end ; end ;
8606: LD_VAR 0 1
8610: RET
// function unfog ; var k , friends ; begin
8611: LD_INT 0
8613: PPUSH
8614: PPUSH
8615: PPUSH
// for k = 1 to side_positions do
8616: LD_ADDR_VAR 0 2
8620: PUSH
8621: DOUBLE
8622: LD_INT 1
8624: DEC
8625: ST_TO_ADDR
8626: LD_EXP 34
8630: PUSH
8631: FOR_TO
8632: IFFALSE 8688
// if not defeated [ k ] then
8634: LD_LOC 14
8638: PUSH
8639: LD_VAR 0 2
8643: ARRAY
8644: NOT
8645: IFFALSE 8686
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8647: LD_OWVAR 7
8651: PPUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL_OW 81
8661: PUSH
8662: LD_INT 1
8664: PUSH
8665: EMPTY
8666: LIST
8667: IN
8668: IFFALSE 8686
// friends = friends ^ k ;
8670: LD_ADDR_VAR 0 3
8674: PUSH
8675: LD_VAR 0 3
8679: PUSH
8680: LD_VAR 0 2
8684: ADD
8685: ST_TO_ADDR
8686: GO 8631
8688: POP
8689: POP
// if not friends then
8690: LD_VAR 0 3
8694: NOT
8695: IFFALSE 8709
// begin SetPlayerSpectator ( ) ;
8697: CALL_OW 572
// unfoged = true ;
8701: LD_ADDR_LOC 16
8705: PUSH
8706: LD_INT 1
8708: ST_TO_ADDR
// end ; end ;
8709: LD_VAR 0 1
8713: RET
// export function MakeGameEnd ; begin
8714: LD_INT 0
8716: PPUSH
// SetPlayerSpectator ( ) ;
8717: CALL_OW 572
// unfoged = true ;
8721: LD_ADDR_LOC 16
8725: PUSH
8726: LD_INT 1
8728: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8729: LD_INT 175
8731: PPUSH
8732: CALL_OW 67
// GameEnded = true ;
8736: LD_ADDR_LOC 15
8740: PUSH
8741: LD_INT 1
8743: ST_TO_ADDR
// end ;
8744: LD_VAR 0 1
8748: RET
// export function GetGameEnded ; begin
8749: LD_INT 0
8751: PPUSH
// result = GameEnded ;
8752: LD_ADDR_VAR 0 1
8756: PUSH
8757: LD_LOC 15
8761: ST_TO_ADDR
// end ; end_of_file
8762: LD_VAR 0 1
8766: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8767: LD_INT 0
8769: PPUSH
8770: PPUSH
8771: PPUSH
// for side = 1 to 8 do
8772: LD_ADDR_VAR 0 2
8776: PUSH
8777: DOUBLE
8778: LD_INT 1
8780: DEC
8781: ST_TO_ADDR
8782: LD_INT 8
8784: PUSH
8785: FOR_TO
8786: IFFALSE 8907
// begin for i = 1 to 72 do
8788: LD_ADDR_VAR 0 3
8792: PUSH
8793: DOUBLE
8794: LD_INT 1
8796: DEC
8797: ST_TO_ADDR
8798: LD_INT 72
8800: PUSH
8801: FOR_TO
8802: IFFALSE 8833
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8804: LD_VAR 0 3
8808: PPUSH
8809: LD_VAR 0 2
8813: PPUSH
8814: LD_INT 0
8816: PPUSH
8817: LD_VAR 0 3
8821: PPUSH
8822: CALL_OW 565
8826: PPUSH
8827: CALL_OW 322
8831: GO 8801
8833: POP
8834: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8835: LD_INT 73
8837: PPUSH
8838: LD_VAR 0 2
8842: PPUSH
8843: LD_INT 0
8845: PPUSH
8846: LD_INT 25
8848: PPUSH
8849: CALL_OW 565
8853: PPUSH
8854: CALL_OW 322
// for i = 0 to 40 do
8858: LD_ADDR_VAR 0 3
8862: PUSH
8863: DOUBLE
8864: LD_INT 0
8866: DEC
8867: ST_TO_ADDR
8868: LD_INT 40
8870: PUSH
8871: FOR_TO
8872: IFFALSE 8903
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8874: LD_VAR 0 3
8878: PPUSH
8879: LD_VAR 0 2
8883: PPUSH
8884: LD_INT 1
8886: PPUSH
8887: LD_VAR 0 3
8891: PPUSH
8892: CALL_OW 565
8896: PPUSH
8897: CALL_OW 324
8901: GO 8871
8903: POP
8904: POP
// end ;
8905: GO 8785
8907: POP
8908: POP
// end ;
8909: LD_VAR 0 1
8913: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8914: LD_INT 0
8916: PPUSH
8917: PPUSH
8918: PPUSH
// for side = 1 to 8 do
8919: LD_ADDR_VAR 0 3
8923: PUSH
8924: DOUBLE
8925: LD_INT 1
8927: DEC
8928: ST_TO_ADDR
8929: LD_INT 8
8931: PUSH
8932: FOR_TO
8933: IFFALSE 12929
// begin for i = 1 to 73 do
8935: LD_ADDR_VAR 0 4
8939: PUSH
8940: DOUBLE
8941: LD_INT 1
8943: DEC
8944: ST_TO_ADDR
8945: LD_INT 73
8947: PUSH
8948: FOR_TO
8949: IFFALSE 8970
// SetTech ( i , side , state_disabled ) ;
8951: LD_VAR 0 4
8955: PPUSH
8956: LD_VAR 0 3
8960: PPUSH
8961: LD_INT 0
8963: PPUSH
8964: CALL_OW 322
8968: GO 8948
8970: POP
8971: POP
// for i = 0 to 40 do
8972: LD_ADDR_VAR 0 4
8976: PUSH
8977: DOUBLE
8978: LD_INT 0
8980: DEC
8981: ST_TO_ADDR
8982: LD_INT 40
8984: PUSH
8985: FOR_TO
8986: IFFALSE 9007
// SetRestrict ( i , side , false ) ;
8988: LD_VAR 0 4
8992: PPUSH
8993: LD_VAR 0 3
8997: PPUSH
8998: LD_INT 0
9000: PPUSH
9001: CALL_OW 324
9005: GO 8985
9007: POP
9008: POP
// case level of 1 :
9009: LD_VAR 0 1
9013: PUSH
9014: LD_INT 1
9016: DOUBLE
9017: EQUAL
9018: IFTRUE 9022
9020: GO 9175
9022: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9023: LD_INT 35
9025: PPUSH
9026: LD_VAR 0 3
9030: PPUSH
9031: LD_INT 1
9033: PPUSH
9034: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9038: LD_INT 45
9040: PPUSH
9041: LD_VAR 0 3
9045: PPUSH
9046: LD_INT 1
9048: PPUSH
9049: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9053: LD_INT 46
9055: PPUSH
9056: LD_VAR 0 3
9060: PPUSH
9061: LD_INT 1
9063: PPUSH
9064: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9068: LD_INT 47
9070: PPUSH
9071: LD_VAR 0 3
9075: PPUSH
9076: LD_INT 1
9078: PPUSH
9079: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9083: LD_INT 0
9085: PPUSH
9086: LD_VAR 0 3
9090: PPUSH
9091: LD_INT 1
9093: PPUSH
9094: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9098: LD_INT 2
9100: PPUSH
9101: LD_VAR 0 3
9105: PPUSH
9106: LD_INT 1
9108: PPUSH
9109: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9113: LD_INT 4
9115: PPUSH
9116: LD_VAR 0 3
9120: PPUSH
9121: LD_INT 1
9123: PPUSH
9124: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9128: LD_INT 6
9130: PPUSH
9131: LD_VAR 0 3
9135: PPUSH
9136: LD_INT 1
9138: PPUSH
9139: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9143: LD_INT 29
9145: PPUSH
9146: LD_VAR 0 3
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9158: LD_INT 31
9160: PPUSH
9161: LD_VAR 0 3
9165: PPUSH
9166: LD_INT 1
9168: PPUSH
9169: CALL_OW 324
// end ; 2 :
9173: GO 12927
9175: LD_INT 2
9177: DOUBLE
9178: EQUAL
9179: IFTRUE 9183
9181: GO 9381
9183: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9184: LD_INT 35
9186: PPUSH
9187: LD_VAR 0 3
9191: PPUSH
9192: LD_INT 1
9194: PPUSH
9195: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9199: LD_INT 45
9201: PPUSH
9202: LD_VAR 0 3
9206: PPUSH
9207: LD_INT 1
9209: PPUSH
9210: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9214: LD_INT 46
9216: PPUSH
9217: LD_VAR 0 3
9221: PPUSH
9222: LD_INT 1
9224: PPUSH
9225: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9229: LD_INT 47
9231: PPUSH
9232: LD_VAR 0 3
9236: PPUSH
9237: LD_INT 1
9239: PPUSH
9240: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9244: LD_INT 1
9246: PPUSH
9247: LD_VAR 0 3
9251: PPUSH
9252: LD_INT 1
9254: PPUSH
9255: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9259: LD_INT 2
9261: PPUSH
9262: LD_VAR 0 3
9266: PPUSH
9267: LD_INT 1
9269: PPUSH
9270: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9274: LD_INT 11
9276: PPUSH
9277: LD_VAR 0 3
9281: PPUSH
9282: LD_INT 1
9284: PPUSH
9285: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9289: LD_INT 0
9291: PPUSH
9292: LD_VAR 0 3
9296: PPUSH
9297: LD_INT 1
9299: PPUSH
9300: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9304: LD_INT 2
9306: PPUSH
9307: LD_VAR 0 3
9311: PPUSH
9312: LD_INT 1
9314: PPUSH
9315: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9319: LD_INT 4
9321: PPUSH
9322: LD_VAR 0 3
9326: PPUSH
9327: LD_INT 1
9329: PPUSH
9330: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9334: LD_INT 6
9336: PPUSH
9337: LD_VAR 0 3
9341: PPUSH
9342: LD_INT 1
9344: PPUSH
9345: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9349: LD_INT 29
9351: PPUSH
9352: LD_VAR 0 3
9356: PPUSH
9357: LD_INT 1
9359: PPUSH
9360: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9364: LD_INT 31
9366: PPUSH
9367: LD_VAR 0 3
9371: PPUSH
9372: LD_INT 1
9374: PPUSH
9375: CALL_OW 324
// end ; 3 :
9379: GO 12927
9381: LD_INT 3
9383: DOUBLE
9384: EQUAL
9385: IFTRUE 9389
9387: GO 9842
9389: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9390: LD_INT 35
9392: PPUSH
9393: LD_VAR 0 3
9397: PPUSH
9398: LD_INT 1
9400: PPUSH
9401: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9405: LD_INT 45
9407: PPUSH
9408: LD_VAR 0 3
9412: PPUSH
9413: LD_INT 1
9415: PPUSH
9416: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9420: LD_INT 46
9422: PPUSH
9423: LD_VAR 0 3
9427: PPUSH
9428: LD_INT 1
9430: PPUSH
9431: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9435: LD_INT 47
9437: PPUSH
9438: LD_VAR 0 3
9442: PPUSH
9443: LD_INT 1
9445: PPUSH
9446: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9450: LD_INT 1
9452: PPUSH
9453: LD_VAR 0 3
9457: PPUSH
9458: LD_INT 1
9460: PPUSH
9461: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9465: LD_INT 2
9467: PPUSH
9468: LD_VAR 0 3
9472: PPUSH
9473: LD_INT 1
9475: PPUSH
9476: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9480: LD_INT 11
9482: PPUSH
9483: LD_VAR 0 3
9487: PPUSH
9488: LD_INT 1
9490: PPUSH
9491: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9495: LD_INT 48
9497: PPUSH
9498: LD_VAR 0 3
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9510: LD_INT 69
9512: PPUSH
9513: LD_VAR 0 3
9517: PPUSH
9518: LD_INT 1
9520: PPUSH
9521: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9525: LD_INT 39
9527: PPUSH
9528: LD_VAR 0 3
9532: PPUSH
9533: LD_INT 1
9535: PPUSH
9536: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9540: LD_INT 43
9542: PPUSH
9543: LD_VAR 0 3
9547: PPUSH
9548: LD_INT 1
9550: PPUSH
9551: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9555: LD_INT 51
9557: PPUSH
9558: LD_VAR 0 3
9562: PPUSH
9563: LD_INT 1
9565: PPUSH
9566: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9570: LD_INT 6
9572: PPUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: LD_INT 1
9580: PPUSH
9581: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9585: LD_INT 0
9587: PPUSH
9588: LD_VAR 0 3
9592: PPUSH
9593: LD_INT 1
9595: PPUSH
9596: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9600: LD_INT 2
9602: PPUSH
9603: LD_VAR 0 3
9607: PPUSH
9608: LD_INT 1
9610: PPUSH
9611: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9615: LD_INT 3
9617: PPUSH
9618: LD_VAR 0 3
9622: PPUSH
9623: LD_INT 1
9625: PPUSH
9626: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9630: LD_INT 4
9632: PPUSH
9633: LD_VAR 0 3
9637: PPUSH
9638: LD_INT 1
9640: PPUSH
9641: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9645: LD_INT 6
9647: PPUSH
9648: LD_VAR 0 3
9652: PPUSH
9653: LD_INT 1
9655: PPUSH
9656: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9660: LD_INT 7
9662: PPUSH
9663: LD_VAR 0 3
9667: PPUSH
9668: LD_INT 1
9670: PPUSH
9671: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9675: LD_INT 8
9677: PPUSH
9678: LD_VAR 0 3
9682: PPUSH
9683: LD_INT 1
9685: PPUSH
9686: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9690: LD_INT 10
9692: PPUSH
9693: LD_VAR 0 3
9697: PPUSH
9698: LD_INT 1
9700: PPUSH
9701: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9705: LD_INT 15
9707: PPUSH
9708: LD_VAR 0 3
9712: PPUSH
9713: LD_INT 1
9715: PPUSH
9716: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9720: LD_INT 16
9722: PPUSH
9723: LD_VAR 0 3
9727: PPUSH
9728: LD_INT 1
9730: PPUSH
9731: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9735: LD_INT 17
9737: PPUSH
9738: LD_VAR 0 3
9742: PPUSH
9743: LD_INT 1
9745: PPUSH
9746: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9750: LD_INT 20
9752: PPUSH
9753: LD_VAR 0 3
9757: PPUSH
9758: LD_INT 1
9760: PPUSH
9761: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9765: LD_INT 26
9767: PPUSH
9768: LD_VAR 0 3
9772: PPUSH
9773: LD_INT 1
9775: PPUSH
9776: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9780: LD_INT 27
9782: PPUSH
9783: LD_VAR 0 3
9787: PPUSH
9788: LD_INT 1
9790: PPUSH
9791: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9795: LD_INT 29
9797: PPUSH
9798: LD_VAR 0 3
9802: PPUSH
9803: LD_INT 1
9805: PPUSH
9806: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9810: LD_INT 31
9812: PPUSH
9813: LD_VAR 0 3
9817: PPUSH
9818: LD_INT 1
9820: PPUSH
9821: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9825: LD_INT 32
9827: PPUSH
9828: LD_VAR 0 3
9832: PPUSH
9833: LD_INT 1
9835: PPUSH
9836: CALL_OW 324
// end ; 4 :
9840: GO 12927
9842: LD_INT 4
9844: DOUBLE
9845: EQUAL
9846: IFTRUE 9850
9848: GO 10798
9850: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9851: LD_INT 35
9853: PPUSH
9854: LD_VAR 0 3
9858: PPUSH
9859: LD_INT 1
9861: PPUSH
9862: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9866: LD_INT 45
9868: PPUSH
9869: LD_VAR 0 3
9873: PPUSH
9874: LD_INT 1
9876: PPUSH
9877: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9881: LD_INT 46
9883: PPUSH
9884: LD_VAR 0 3
9888: PPUSH
9889: LD_INT 1
9891: PPUSH
9892: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9896: LD_INT 47
9898: PPUSH
9899: LD_VAR 0 3
9903: PPUSH
9904: LD_INT 1
9906: PPUSH
9907: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9911: LD_INT 1
9913: PPUSH
9914: LD_VAR 0 3
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9926: LD_INT 2
9928: PPUSH
9929: LD_VAR 0 3
9933: PPUSH
9934: LD_INT 1
9936: PPUSH
9937: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9941: LD_INT 11
9943: PPUSH
9944: LD_VAR 0 3
9948: PPUSH
9949: LD_INT 1
9951: PPUSH
9952: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9956: LD_INT 20
9958: PPUSH
9959: LD_VAR 0 3
9963: PPUSH
9964: LD_INT 1
9966: PPUSH
9967: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9971: LD_INT 48
9973: PPUSH
9974: LD_VAR 0 3
9978: PPUSH
9979: LD_INT 1
9981: PPUSH
9982: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9986: LD_INT 49
9988: PPUSH
9989: LD_VAR 0 3
9993: PPUSH
9994: LD_INT 1
9996: PPUSH
9997: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10001: LD_INT 69
10003: PPUSH
10004: LD_VAR 0 3
10008: PPUSH
10009: LD_INT 1
10011: PPUSH
10012: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10016: LD_INT 39
10018: PPUSH
10019: LD_VAR 0 3
10023: PPUSH
10024: LD_INT 1
10026: PPUSH
10027: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10031: LD_INT 34
10033: PPUSH
10034: LD_VAR 0 3
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10046: LD_INT 42
10048: PPUSH
10049: LD_VAR 0 3
10053: PPUSH
10054: LD_INT 1
10056: PPUSH
10057: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10061: LD_INT 44
10063: PPUSH
10064: LD_VAR 0 3
10068: PPUSH
10069: LD_INT 1
10071: PPUSH
10072: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10076: LD_INT 41
10078: PPUSH
10079: LD_VAR 0 3
10083: PPUSH
10084: LD_INT 1
10086: PPUSH
10087: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10091: LD_INT 43
10093: PPUSH
10094: LD_VAR 0 3
10098: PPUSH
10099: LD_INT 1
10101: PPUSH
10102: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10106: LD_INT 70
10108: PPUSH
10109: LD_VAR 0 3
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10121: LD_INT 51
10123: PPUSH
10124: LD_VAR 0 3
10128: PPUSH
10129: LD_INT 1
10131: PPUSH
10132: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10136: LD_INT 52
10138: PPUSH
10139: LD_VAR 0 3
10143: PPUSH
10144: LD_INT 1
10146: PPUSH
10147: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10151: LD_INT 6
10153: PPUSH
10154: LD_VAR 0 3
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10166: LD_INT 15
10168: PPUSH
10169: LD_VAR 0 3
10173: PPUSH
10174: LD_INT 1
10176: PPUSH
10177: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10181: LD_INT 7
10183: PPUSH
10184: LD_VAR 0 3
10188: PPUSH
10189: LD_INT 1
10191: PPUSH
10192: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10196: LD_INT 12
10198: PPUSH
10199: LD_VAR 0 3
10203: PPUSH
10204: LD_INT 1
10206: PPUSH
10207: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10211: LD_INT 18
10213: PPUSH
10214: LD_VAR 0 3
10218: PPUSH
10219: LD_INT 1
10221: PPUSH
10222: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10226: LD_INT 60
10228: PPUSH
10229: LD_VAR 0 3
10233: PPUSH
10234: LD_INT 1
10236: PPUSH
10237: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10241: LD_INT 9
10243: PPUSH
10244: LD_VAR 0 3
10248: PPUSH
10249: LD_INT 1
10251: PPUSH
10252: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10256: LD_INT 30
10258: PPUSH
10259: LD_VAR 0 3
10263: PPUSH
10264: LD_INT 1
10266: PPUSH
10267: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10271: LD_INT 37
10273: PPUSH
10274: LD_VAR 0 3
10278: PPUSH
10279: LD_INT 1
10281: PPUSH
10282: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10286: LD_INT 5
10288: PPUSH
10289: LD_VAR 0 3
10293: PPUSH
10294: LD_INT 1
10296: PPUSH
10297: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10301: LD_INT 66
10303: PPUSH
10304: LD_VAR 0 3
10308: PPUSH
10309: LD_INT 1
10311: PPUSH
10312: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10316: LD_INT 21
10318: PPUSH
10319: LD_VAR 0 3
10323: PPUSH
10324: LD_INT 1
10326: PPUSH
10327: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10331: LD_INT 22
10333: PPUSH
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 1
10341: PPUSH
10342: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10346: LD_INT 54
10348: PPUSH
10349: LD_VAR 0 3
10353: PPUSH
10354: LD_INT 1
10356: PPUSH
10357: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10361: LD_INT 0
10363: PPUSH
10364: LD_VAR 0 3
10368: PPUSH
10369: LD_INT 1
10371: PPUSH
10372: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10376: LD_INT 1
10378: PPUSH
10379: LD_VAR 0 3
10383: PPUSH
10384: LD_INT 1
10386: PPUSH
10387: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10391: LD_INT 2
10393: PPUSH
10394: LD_VAR 0 3
10398: PPUSH
10399: LD_INT 1
10401: PPUSH
10402: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10406: LD_INT 3
10408: PPUSH
10409: LD_VAR 0 3
10413: PPUSH
10414: LD_INT 1
10416: PPUSH
10417: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10421: LD_INT 4
10423: PPUSH
10424: LD_VAR 0 3
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10436: LD_INT 5
10438: PPUSH
10439: LD_VAR 0 3
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10451: LD_INT 6
10453: PPUSH
10454: LD_VAR 0 3
10458: PPUSH
10459: LD_INT 1
10461: PPUSH
10462: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10466: LD_INT 7
10468: PPUSH
10469: LD_VAR 0 3
10473: PPUSH
10474: LD_INT 1
10476: PPUSH
10477: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10481: LD_INT 8
10483: PPUSH
10484: LD_VAR 0 3
10488: PPUSH
10489: LD_INT 1
10491: PPUSH
10492: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10496: LD_INT 10
10498: PPUSH
10499: LD_VAR 0 3
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10511: LD_INT 11
10513: PPUSH
10514: LD_VAR 0 3
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10526: LD_INT 12
10528: PPUSH
10529: LD_VAR 0 3
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10541: LD_INT 13
10543: PPUSH
10544: LD_VAR 0 3
10548: PPUSH
10549: LD_INT 1
10551: PPUSH
10552: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10556: LD_INT 14
10558: PPUSH
10559: LD_VAR 0 3
10563: PPUSH
10564: LD_INT 1
10566: PPUSH
10567: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10571: LD_INT 15
10573: PPUSH
10574: LD_VAR 0 3
10578: PPUSH
10579: LD_INT 1
10581: PPUSH
10582: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10586: LD_INT 16
10588: PPUSH
10589: LD_VAR 0 3
10593: PPUSH
10594: LD_INT 1
10596: PPUSH
10597: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10601: LD_INT 17
10603: PPUSH
10604: LD_VAR 0 3
10608: PPUSH
10609: LD_INT 1
10611: PPUSH
10612: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10616: LD_INT 19
10618: PPUSH
10619: LD_VAR 0 3
10623: PPUSH
10624: LD_INT 1
10626: PPUSH
10627: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10631: LD_INT 20
10633: PPUSH
10634: LD_VAR 0 3
10638: PPUSH
10639: LD_INT 1
10641: PPUSH
10642: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10646: LD_INT 21
10648: PPUSH
10649: LD_VAR 0 3
10653: PPUSH
10654: LD_INT 1
10656: PPUSH
10657: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10661: LD_INT 23
10663: PPUSH
10664: LD_VAR 0 3
10668: PPUSH
10669: LD_INT 1
10671: PPUSH
10672: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10676: LD_INT 26
10678: PPUSH
10679: LD_VAR 0 3
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10691: LD_INT 27
10693: PPUSH
10694: LD_VAR 0 3
10698: PPUSH
10699: LD_INT 1
10701: PPUSH
10702: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10706: LD_INT 28
10708: PPUSH
10709: LD_VAR 0 3
10713: PPUSH
10714: LD_INT 1
10716: PPUSH
10717: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10721: LD_INT 29
10723: PPUSH
10724: LD_VAR 0 3
10728: PPUSH
10729: LD_INT 1
10731: PPUSH
10732: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10736: LD_INT 30
10738: PPUSH
10739: LD_VAR 0 3
10743: PPUSH
10744: LD_INT 1
10746: PPUSH
10747: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10751: LD_INT 31
10753: PPUSH
10754: LD_VAR 0 3
10758: PPUSH
10759: LD_INT 1
10761: PPUSH
10762: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10766: LD_INT 32
10768: PPUSH
10769: LD_VAR 0 3
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10781: LD_INT 36
10783: PPUSH
10784: LD_VAR 0 3
10788: PPUSH
10789: LD_INT 1
10791: PPUSH
10792: CALL_OW 324
// end ; 5 :
10796: GO 12927
10798: LD_INT 5
10800: DOUBLE
10801: EQUAL
10802: IFTRUE 10806
10804: GO 11919
10806: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10807: LD_INT 35
10809: PPUSH
10810: LD_VAR 0 3
10814: PPUSH
10815: LD_INT 1
10817: PPUSH
10818: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10822: LD_INT 45
10824: PPUSH
10825: LD_VAR 0 3
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10837: LD_INT 46
10839: PPUSH
10840: LD_VAR 0 3
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10852: LD_INT 47
10854: PPUSH
10855: LD_VAR 0 3
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10867: LD_INT 1
10869: PPUSH
10870: LD_VAR 0 3
10874: PPUSH
10875: LD_INT 1
10877: PPUSH
10878: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10882: LD_INT 2
10884: PPUSH
10885: LD_VAR 0 3
10889: PPUSH
10890: LD_INT 1
10892: PPUSH
10893: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10897: LD_INT 11
10899: PPUSH
10900: LD_VAR 0 3
10904: PPUSH
10905: LD_INT 1
10907: PPUSH
10908: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10912: LD_INT 20
10914: PPUSH
10915: LD_VAR 0 3
10919: PPUSH
10920: LD_INT 1
10922: PPUSH
10923: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10927: LD_INT 48
10929: PPUSH
10930: LD_VAR 0 3
10934: PPUSH
10935: LD_INT 1
10937: PPUSH
10938: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10942: LD_INT 49
10944: PPUSH
10945: LD_VAR 0 3
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10957: LD_INT 69
10959: PPUSH
10960: LD_VAR 0 3
10964: PPUSH
10965: LD_INT 1
10967: PPUSH
10968: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10972: LD_INT 39
10974: PPUSH
10975: LD_VAR 0 3
10979: PPUSH
10980: LD_INT 1
10982: PPUSH
10983: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10987: LD_INT 34
10989: PPUSH
10990: LD_VAR 0 3
10994: PPUSH
10995: LD_INT 1
10997: PPUSH
10998: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11002: LD_INT 42
11004: PPUSH
11005: LD_VAR 0 3
11009: PPUSH
11010: LD_INT 1
11012: PPUSH
11013: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11017: LD_INT 44
11019: PPUSH
11020: LD_VAR 0 3
11024: PPUSH
11025: LD_INT 1
11027: PPUSH
11028: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11032: LD_INT 41
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: LD_INT 1
11042: PPUSH
11043: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11047: LD_INT 40
11049: PPUSH
11050: LD_VAR 0 3
11054: PPUSH
11055: LD_INT 1
11057: PPUSH
11058: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11062: LD_INT 43
11064: PPUSH
11065: LD_VAR 0 3
11069: PPUSH
11070: LD_INT 1
11072: PPUSH
11073: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11077: LD_INT 70
11079: PPUSH
11080: LD_VAR 0 3
11084: PPUSH
11085: LD_INT 1
11087: PPUSH
11088: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11092: LD_INT 51
11094: PPUSH
11095: LD_VAR 0 3
11099: PPUSH
11100: LD_INT 1
11102: PPUSH
11103: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11107: LD_INT 52
11109: PPUSH
11110: LD_VAR 0 3
11114: PPUSH
11115: LD_INT 1
11117: PPUSH
11118: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11122: LD_INT 6
11124: PPUSH
11125: LD_VAR 0 3
11129: PPUSH
11130: LD_INT 1
11132: PPUSH
11133: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11137: LD_INT 15
11139: PPUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: LD_INT 1
11147: PPUSH
11148: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11152: LD_INT 7
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11167: LD_INT 12
11169: PPUSH
11170: LD_VAR 0 3
11174: PPUSH
11175: LD_INT 1
11177: PPUSH
11178: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11182: LD_INT 17
11184: PPUSH
11185: LD_VAR 0 3
11189: PPUSH
11190: LD_INT 1
11192: PPUSH
11193: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11197: LD_INT 18
11199: PPUSH
11200: LD_VAR 0 3
11204: PPUSH
11205: LD_INT 1
11207: PPUSH
11208: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11212: LD_INT 60
11214: PPUSH
11215: LD_VAR 0 3
11219: PPUSH
11220: LD_INT 1
11222: PPUSH
11223: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11227: LD_INT 32
11229: PPUSH
11230: LD_VAR 0 3
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11242: LD_INT 9
11244: PPUSH
11245: LD_VAR 0 3
11249: PPUSH
11250: LD_INT 1
11252: PPUSH
11253: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11257: LD_INT 57
11259: PPUSH
11260: LD_VAR 0 3
11264: PPUSH
11265: LD_INT 1
11267: PPUSH
11268: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11272: LD_INT 30
11274: PPUSH
11275: LD_VAR 0 3
11279: PPUSH
11280: LD_INT 1
11282: PPUSH
11283: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11287: LD_INT 37
11289: PPUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: LD_INT 1
11297: PPUSH
11298: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11302: LD_INT 63
11304: PPUSH
11305: LD_VAR 0 3
11309: PPUSH
11310: LD_INT 1
11312: PPUSH
11313: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11317: LD_INT 3
11319: PPUSH
11320: LD_VAR 0 3
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11332: LD_INT 4
11334: PPUSH
11335: LD_VAR 0 3
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11347: LD_INT 5
11349: PPUSH
11350: LD_VAR 0 3
11354: PPUSH
11355: LD_INT 1
11357: PPUSH
11358: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11362: LD_INT 66
11364: PPUSH
11365: LD_VAR 0 3
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11377: LD_INT 21
11379: PPUSH
11380: LD_VAR 0 3
11384: PPUSH
11385: LD_INT 1
11387: PPUSH
11388: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11392: LD_INT 22
11394: PPUSH
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 1
11402: PPUSH
11403: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11407: LD_INT 19
11409: PPUSH
11410: LD_VAR 0 3
11414: PPUSH
11415: LD_INT 1
11417: PPUSH
11418: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11422: LD_INT 54
11424: PPUSH
11425: LD_VAR 0 3
11429: PPUSH
11430: LD_INT 1
11432: PPUSH
11433: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11437: LD_INT 55
11439: PPUSH
11440: LD_VAR 0 3
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11452: LD_INT 0
11454: PPUSH
11455: LD_VAR 0 3
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11467: LD_INT 1
11469: PPUSH
11470: LD_VAR 0 3
11474: PPUSH
11475: LD_INT 1
11477: PPUSH
11478: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11482: LD_INT 2
11484: PPUSH
11485: LD_VAR 0 3
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11497: LD_INT 3
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: LD_INT 1
11507: PPUSH
11508: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11512: LD_INT 4
11514: PPUSH
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 1
11522: PPUSH
11523: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11527: LD_INT 5
11529: PPUSH
11530: LD_VAR 0 3
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11542: LD_INT 6
11544: PPUSH
11545: LD_VAR 0 3
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11557: LD_INT 7
11559: PPUSH
11560: LD_VAR 0 3
11564: PPUSH
11565: LD_INT 1
11567: PPUSH
11568: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11572: LD_INT 8
11574: PPUSH
11575: LD_VAR 0 3
11579: PPUSH
11580: LD_INT 1
11582: PPUSH
11583: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11587: LD_INT 10
11589: PPUSH
11590: LD_VAR 0 3
11594: PPUSH
11595: LD_INT 1
11597: PPUSH
11598: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11602: LD_INT 11
11604: PPUSH
11605: LD_VAR 0 3
11609: PPUSH
11610: LD_INT 1
11612: PPUSH
11613: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11617: LD_INT 12
11619: PPUSH
11620: LD_VAR 0 3
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11632: LD_INT 13
11634: PPUSH
11635: LD_VAR 0 3
11639: PPUSH
11640: LD_INT 1
11642: PPUSH
11643: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11647: LD_INT 14
11649: PPUSH
11650: LD_VAR 0 3
11654: PPUSH
11655: LD_INT 1
11657: PPUSH
11658: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11662: LD_INT 15
11664: PPUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11677: LD_INT 16
11679: PPUSH
11680: LD_VAR 0 3
11684: PPUSH
11685: LD_INT 1
11687: PPUSH
11688: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11692: LD_INT 17
11694: PPUSH
11695: LD_VAR 0 3
11699: PPUSH
11700: LD_INT 1
11702: PPUSH
11703: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11707: LD_INT 18
11709: PPUSH
11710: LD_VAR 0 3
11714: PPUSH
11715: LD_INT 1
11717: PPUSH
11718: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11722: LD_INT 19
11724: PPUSH
11725: LD_VAR 0 3
11729: PPUSH
11730: LD_INT 1
11732: PPUSH
11733: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11737: LD_INT 20
11739: PPUSH
11740: LD_VAR 0 3
11744: PPUSH
11745: LD_INT 1
11747: PPUSH
11748: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11752: LD_INT 21
11754: PPUSH
11755: LD_VAR 0 3
11759: PPUSH
11760: LD_INT 1
11762: PPUSH
11763: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11767: LD_INT 23
11769: PPUSH
11770: LD_VAR 0 3
11774: PPUSH
11775: LD_INT 1
11777: PPUSH
11778: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11782: LD_INT 26
11784: PPUSH
11785: LD_VAR 0 3
11789: PPUSH
11790: LD_INT 1
11792: PPUSH
11793: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11797: LD_INT 27
11799: PPUSH
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_INT 1
11807: PPUSH
11808: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11812: LD_INT 28
11814: PPUSH
11815: LD_VAR 0 3
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11827: LD_INT 29
11829: PPUSH
11830: LD_VAR 0 3
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11842: LD_INT 30
11844: PPUSH
11845: LD_VAR 0 3
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11857: LD_INT 31
11859: PPUSH
11860: LD_VAR 0 3
11864: PPUSH
11865: LD_INT 1
11867: PPUSH
11868: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11872: LD_INT 32
11874: PPUSH
11875: LD_VAR 0 3
11879: PPUSH
11880: LD_INT 1
11882: PPUSH
11883: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11887: LD_INT 33
11889: PPUSH
11890: LD_VAR 0 3
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11902: LD_INT 36
11904: PPUSH
11905: LD_VAR 0 3
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 324
// end ; 6 :
11917: GO 12927
11919: LD_INT 6
11921: DOUBLE
11922: EQUAL
11923: IFTRUE 11927
11925: GO 12852
11927: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11928: LD_INT 35
11930: PPUSH
11931: LD_VAR 0 3
11935: PPUSH
11936: LD_INT 1
11938: PPUSH
11939: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11943: LD_INT 45
11945: PPUSH
11946: LD_VAR 0 3
11950: PPUSH
11951: LD_INT 1
11953: PPUSH
11954: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11958: LD_INT 46
11960: PPUSH
11961: LD_VAR 0 3
11965: PPUSH
11966: LD_INT 1
11968: PPUSH
11969: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11973: LD_INT 47
11975: PPUSH
11976: LD_VAR 0 3
11980: PPUSH
11981: LD_INT 1
11983: PPUSH
11984: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11988: LD_INT 1
11990: PPUSH
11991: LD_VAR 0 3
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12003: LD_INT 2
12005: PPUSH
12006: LD_VAR 0 3
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12018: LD_INT 11
12020: PPUSH
12021: LD_VAR 0 3
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12033: LD_INT 20
12035: PPUSH
12036: LD_VAR 0 3
12040: PPUSH
12041: LD_INT 1
12043: PPUSH
12044: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12048: LD_INT 48
12050: PPUSH
12051: LD_VAR 0 3
12055: PPUSH
12056: LD_INT 1
12058: PPUSH
12059: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12063: LD_INT 49
12065: PPUSH
12066: LD_VAR 0 3
12070: PPUSH
12071: LD_INT 1
12073: PPUSH
12074: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12078: LD_INT 50
12080: PPUSH
12081: LD_VAR 0 3
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12093: LD_INT 69
12095: PPUSH
12096: LD_VAR 0 3
12100: PPUSH
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12108: LD_INT 39
12110: PPUSH
12111: LD_VAR 0 3
12115: PPUSH
12116: LD_INT 1
12118: PPUSH
12119: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12123: LD_INT 34
12125: PPUSH
12126: LD_VAR 0 3
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12138: LD_INT 42
12140: PPUSH
12141: LD_VAR 0 3
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12153: LD_INT 44
12155: PPUSH
12156: LD_VAR 0 3
12160: PPUSH
12161: LD_INT 1
12163: PPUSH
12164: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12168: LD_INT 41
12170: PPUSH
12171: LD_VAR 0 3
12175: PPUSH
12176: LD_INT 1
12178: PPUSH
12179: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12183: LD_INT 13
12185: PPUSH
12186: LD_VAR 0 3
12190: PPUSH
12191: LD_INT 1
12193: PPUSH
12194: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12198: LD_INT 40
12200: PPUSH
12201: LD_VAR 0 3
12205: PPUSH
12206: LD_INT 1
12208: PPUSH
12209: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12213: LD_INT 43
12215: PPUSH
12216: LD_VAR 0 3
12220: PPUSH
12221: LD_INT 1
12223: PPUSH
12224: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12228: LD_INT 70
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: LD_INT 1
12238: PPUSH
12239: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12243: LD_INT 23
12245: PPUSH
12246: LD_VAR 0 3
12250: PPUSH
12251: LD_INT 1
12253: PPUSH
12254: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12258: LD_INT 51
12260: PPUSH
12261: LD_VAR 0 3
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12273: LD_INT 52
12275: PPUSH
12276: LD_VAR 0 3
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12288: LD_INT 6
12290: PPUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12303: LD_INT 15
12305: PPUSH
12306: LD_VAR 0 3
12310: PPUSH
12311: LD_INT 1
12313: PPUSH
12314: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12318: LD_INT 7
12320: PPUSH
12321: LD_VAR 0 3
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12333: LD_INT 12
12335: PPUSH
12336: LD_VAR 0 3
12340: PPUSH
12341: LD_INT 1
12343: PPUSH
12344: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12348: LD_INT 10
12350: PPUSH
12351: LD_VAR 0 3
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12363: LD_INT 17
12365: PPUSH
12366: LD_VAR 0 3
12370: PPUSH
12371: LD_INT 1
12373: PPUSH
12374: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12378: LD_INT 18
12380: PPUSH
12381: LD_VAR 0 3
12385: PPUSH
12386: LD_INT 1
12388: PPUSH
12389: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12393: LD_INT 60
12395: PPUSH
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 1
12403: PPUSH
12404: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12408: LD_INT 61
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12423: LD_INT 32
12425: PPUSH
12426: LD_VAR 0 3
12430: PPUSH
12431: LD_INT 1
12433: PPUSH
12434: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12438: LD_INT 27
12440: PPUSH
12441: LD_VAR 0 3
12445: PPUSH
12446: LD_INT 1
12448: PPUSH
12449: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12453: LD_INT 36
12455: PPUSH
12456: LD_VAR 0 3
12460: PPUSH
12461: LD_INT 1
12463: PPUSH
12464: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12468: LD_INT 33
12470: PPUSH
12471: LD_VAR 0 3
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12483: LD_INT 9
12485: PPUSH
12486: LD_VAR 0 3
12490: PPUSH
12491: LD_INT 1
12493: PPUSH
12494: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12498: LD_INT 38
12500: PPUSH
12501: LD_VAR 0 3
12505: PPUSH
12506: LD_INT 1
12508: PPUSH
12509: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12513: LD_INT 57
12515: PPUSH
12516: LD_VAR 0 3
12520: PPUSH
12521: LD_INT 1
12523: PPUSH
12524: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12528: LD_INT 58
12530: PPUSH
12531: LD_VAR 0 3
12535: PPUSH
12536: LD_INT 1
12538: PPUSH
12539: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12543: LD_INT 28
12545: PPUSH
12546: LD_VAR 0 3
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12558: LD_INT 29
12560: PPUSH
12561: LD_VAR 0 3
12565: PPUSH
12566: LD_INT 1
12568: PPUSH
12569: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12573: LD_INT 30
12575: PPUSH
12576: LD_VAR 0 3
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12588: LD_INT 37
12590: PPUSH
12591: LD_VAR 0 3
12595: PPUSH
12596: LD_INT 1
12598: PPUSH
12599: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12603: LD_INT 63
12605: PPUSH
12606: LD_VAR 0 3
12610: PPUSH
12611: LD_INT 1
12613: PPUSH
12614: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12618: LD_INT 64
12620: PPUSH
12621: LD_VAR 0 3
12625: PPUSH
12626: LD_INT 1
12628: PPUSH
12629: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12633: LD_INT 3
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: LD_INT 1
12643: PPUSH
12644: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12648: LD_INT 4
12650: PPUSH
12651: LD_VAR 0 3
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12663: LD_INT 5
12665: PPUSH
12666: LD_VAR 0 3
12670: PPUSH
12671: LD_INT 1
12673: PPUSH
12674: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12678: LD_INT 8
12680: PPUSH
12681: LD_VAR 0 3
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12693: LD_INT 66
12695: PPUSH
12696: LD_VAR 0 3
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12708: LD_INT 67
12710: PPUSH
12711: LD_VAR 0 3
12715: PPUSH
12716: LD_INT 1
12718: PPUSH
12719: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12723: LD_INT 21
12725: PPUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: LD_INT 1
12733: PPUSH
12734: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12738: LD_INT 22
12740: PPUSH
12741: LD_VAR 0 3
12745: PPUSH
12746: LD_INT 1
12748: PPUSH
12749: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12753: LD_INT 19
12755: PPUSH
12756: LD_VAR 0 3
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12768: LD_INT 26
12770: PPUSH
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12783: LD_INT 54
12785: PPUSH
12786: LD_VAR 0 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12798: LD_INT 55
12800: PPUSH
12801: LD_VAR 0 3
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 322
// for i = 0 to 39 do
12813: LD_ADDR_VAR 0 4
12817: PUSH
12818: DOUBLE
12819: LD_INT 0
12821: DEC
12822: ST_TO_ADDR
12823: LD_INT 39
12825: PUSH
12826: FOR_TO
12827: IFFALSE 12848
// SetRestrict ( i , side , true ) ;
12829: LD_VAR 0 4
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 324
12846: GO 12826
12848: POP
12849: POP
// end ; else
12850: GO 12927
12852: POP
// begin for i = 1 to 73 do
12853: LD_ADDR_VAR 0 4
12857: PUSH
12858: DOUBLE
12859: LD_INT 1
12861: DEC
12862: ST_TO_ADDR
12863: LD_INT 73
12865: PUSH
12866: FOR_TO
12867: IFFALSE 12888
// SetTech ( i , side , state_enabled ) ;
12869: LD_VAR 0 4
12873: PPUSH
12874: LD_VAR 0 3
12878: PPUSH
12879: LD_INT 1
12881: PPUSH
12882: CALL_OW 322
12886: GO 12866
12888: POP
12889: POP
// for i = 0 to 39 do
12890: LD_ADDR_VAR 0 4
12894: PUSH
12895: DOUBLE
12896: LD_INT 0
12898: DEC
12899: ST_TO_ADDR
12900: LD_INT 39
12902: PUSH
12903: FOR_TO
12904: IFFALSE 12925
// SetRestrict ( i , side , true ) ;
12906: LD_VAR 0 4
12910: PPUSH
12911: LD_VAR 0 3
12915: PPUSH
12916: LD_INT 1
12918: PPUSH
12919: CALL_OW 324
12923: GO 12903
12925: POP
12926: POP
// end ; end ; end ;
12927: GO 8932
12929: POP
12930: POP
// end ; end_of_file
12931: LD_VAR 0 2
12935: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12936: LD_INT 0
12938: PPUSH
12939: PPUSH
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
12945: PPUSH
12946: PPUSH
// for i := 1 to 8 do
12947: LD_ADDR_VAR 0 2
12951: PUSH
12952: DOUBLE
12953: LD_INT 1
12955: DEC
12956: ST_TO_ADDR
12957: LD_INT 8
12959: PUSH
12960: FOR_TO
12961: IFFALSE 13345
// begin if Side_Positions [ i ] then
12963: LD_EXP 34
12967: PUSH
12968: LD_VAR 0 2
12972: ARRAY
12973: IFFALSE 13343
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12975: LD_ADDR_VAR 0 7
12979: PUSH
12980: LD_INT 22
12982: PUSH
12983: LD_VAR 0 2
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 21
12994: PUSH
12995: LD_INT 1
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PPUSH
13006: CALL_OW 69
13010: PUSH
13011: LD_INT 0
13013: PLUS
13014: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13015: LD_ADDR_VAR 0 9
13019: PUSH
13020: LD_INT 22
13022: PUSH
13023: LD_VAR 0 2
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 2
13034: PUSH
13035: LD_INT 30
13037: PUSH
13038: LD_INT 0
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 30
13047: PUSH
13048: LD_INT 1
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: LIST
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PPUSH
13064: CALL_OW 69
13068: ST_TO_ADDR
// crates := 0 ;
13069: LD_ADDR_VAR 0 4
13073: PUSH
13074: LD_INT 0
13076: ST_TO_ADDR
// oil := 0 ;
13077: LD_ADDR_VAR 0 5
13081: PUSH
13082: LD_INT 0
13084: ST_TO_ADDR
// sib := 0 ;
13085: LD_ADDR_VAR 0 6
13089: PUSH
13090: LD_INT 0
13092: ST_TO_ADDR
// if bases then
13093: LD_VAR 0 9
13097: IFFALSE 13203
// begin for j in bases do
13099: LD_ADDR_VAR 0 3
13103: PUSH
13104: LD_VAR 0 9
13108: PUSH
13109: FOR_IN
13110: IFFALSE 13201
// begin base := GetBase ( j ) ;
13112: LD_ADDR_VAR 0 8
13116: PUSH
13117: LD_VAR 0 3
13121: PPUSH
13122: CALL_OW 274
13126: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13127: LD_ADDR_VAR 0 4
13131: PUSH
13132: LD_VAR 0 4
13136: PUSH
13137: LD_VAR 0 8
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 275
13149: PLUS
13150: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13151: LD_ADDR_VAR 0 5
13155: PUSH
13156: LD_VAR 0 5
13160: PUSH
13161: LD_VAR 0 8
13165: PPUSH
13166: LD_INT 2
13168: PPUSH
13169: CALL_OW 275
13173: PLUS
13174: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13175: LD_ADDR_VAR 0 6
13179: PUSH
13180: LD_VAR 0 6
13184: PUSH
13185: LD_VAR 0 8
13189: PPUSH
13190: LD_INT 3
13192: PPUSH
13193: CALL_OW 275
13197: PLUS
13198: ST_TO_ADDR
// end ;
13199: GO 13109
13201: POP
13202: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13203: LD_STRING setSpecText(
13205: PUSH
13206: LD_VAR 0 2
13210: STR
13211: PUSH
13212: LD_STRING ,
13214: STR
13215: PUSH
13216: LD_INT 2
13218: STR
13219: PUSH
13220: LD_STRING ,
13222: STR
13223: PUSH
13224: LD_VAR 0 4
13228: STR
13229: PUSH
13230: LD_STRING )
13232: STR
13233: PPUSH
13234: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13238: LD_STRING setSpecText(
13240: PUSH
13241: LD_VAR 0 2
13245: STR
13246: PUSH
13247: LD_STRING ,
13249: STR
13250: PUSH
13251: LD_INT 3
13253: STR
13254: PUSH
13255: LD_STRING ,
13257: STR
13258: PUSH
13259: LD_VAR 0 5
13263: STR
13264: PUSH
13265: LD_STRING )
13267: STR
13268: PPUSH
13269: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13273: LD_STRING setSpecText(
13275: PUSH
13276: LD_VAR 0 2
13280: STR
13281: PUSH
13282: LD_STRING ,
13284: STR
13285: PUSH
13286: LD_INT 4
13288: STR
13289: PUSH
13290: LD_STRING ,
13292: STR
13293: PUSH
13294: LD_VAR 0 6
13298: STR
13299: PUSH
13300: LD_STRING )
13302: STR
13303: PPUSH
13304: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13308: LD_STRING setSpecText(
13310: PUSH
13311: LD_VAR 0 2
13315: STR
13316: PUSH
13317: LD_STRING ,
13319: STR
13320: PUSH
13321: LD_INT 5
13323: STR
13324: PUSH
13325: LD_STRING ,
13327: STR
13328: PUSH
13329: LD_VAR 0 7
13333: STR
13334: PUSH
13335: LD_STRING )
13337: STR
13338: PPUSH
13339: CALL_OW 559
// end ; end ;
13343: GO 12960
13345: POP
13346: POP
// end ;
13347: LD_VAR 0 1
13351: RET
// every 0 0$1 do
13352: GO 13354
13354: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13355: LD_STRING setSpecLogoNumber(
13357: PUSH
13358: LD_INT 2
13360: STR
13361: PUSH
13362: LD_STRING ,
13364: STR
13365: PUSH
13366: LD_INT 1
13368: STR
13369: PUSH
13370: LD_STRING )
13372: STR
13373: PPUSH
13374: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13378: LD_STRING setSpecLogoNumber(
13380: PUSH
13381: LD_INT 3
13383: STR
13384: PUSH
13385: LD_STRING ,
13387: STR
13388: PUSH
13389: LD_INT 2
13391: STR
13392: PUSH
13393: LD_STRING )
13395: STR
13396: PPUSH
13397: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13401: LD_STRING setSpecLogoNumber(
13403: PUSH
13404: LD_INT 4
13406: STR
13407: PUSH
13408: LD_STRING ,
13410: STR
13411: PUSH
13412: LD_INT 3
13414: STR
13415: PUSH
13416: LD_STRING )
13418: STR
13419: PPUSH
13420: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13424: LD_STRING setSpecLogoNumber(
13426: PUSH
13427: LD_INT 5
13429: STR
13430: PUSH
13431: LD_STRING ,
13433: STR
13434: PUSH
13435: LD_INT 4
13437: STR
13438: PUSH
13439: LD_STRING )
13441: STR
13442: PPUSH
13443: CALL_OW 559
// end ;
13447: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13448: LD_INT 2
13450: PUSH
13451: LD_INT 30
13453: PUSH
13454: LD_INT 0
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 30
13463: PUSH
13464: LD_INT 1
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: LIST
13475: PPUSH
13476: CALL_OW 69
13480: IFFALSE 13490
13482: GO 13484
13484: DISABLE
// begin enable ;
13485: ENABLE
// UpdateSpectatorBar ;
13486: CALL 12936 0 0
// end ; end_of_file
13490: END
// var respawn , inqueue ; export function init_respawning ; begin
13491: LD_INT 0
13493: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13494: LD_ADDR_LOC 18
13498: PUSH
13499: LD_INT 1
13501: PPUSH
13502: LD_INT 8
13504: PPUSH
13505: CALL_OW 12
13509: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13510: LD_ADDR_LOC 19
13514: PUSH
13515: LD_INT 0
13517: PUSH
13518: LD_INT 0
13520: PUSH
13521: LD_INT 0
13523: PUSH
13524: LD_INT 0
13526: PUSH
13527: LD_INT 0
13529: PUSH
13530: LD_INT 0
13532: PUSH
13533: LD_INT 0
13535: PUSH
13536: LD_INT 0
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: ST_TO_ADDR
// end ;
13549: LD_VAR 0 1
13553: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13554: GO 13556
13556: DISABLE
13557: LD_INT 0
13559: PPUSH
13560: PPUSH
13561: PPUSH
// begin if respawning_time_max = 0 then
13562: LD_EXP 28
13566: PUSH
13567: LD_INT 0
13569: EQUAL
13570: IFFALSE 13574
// exit ;
13572: GO 13982
// if respawn = 8 then
13574: LD_LOC 18
13578: PUSH
13579: LD_INT 8
13581: EQUAL
13582: IFFALSE 13594
// respawn := 1 else
13584: LD_ADDR_LOC 18
13588: PUSH
13589: LD_INT 1
13591: ST_TO_ADDR
13592: GO 13608
// respawn := respawn + 1 ;
13594: LD_ADDR_LOC 18
13598: PUSH
13599: LD_LOC 18
13603: PUSH
13604: LD_INT 1
13606: PLUS
13607: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13608: LD_EXP 34
13612: PUSH
13613: LD_LOC 18
13617: ARRAY
13618: PUSH
13619: LD_LOC 19
13623: PUSH
13624: LD_LOC 18
13628: ARRAY
13629: NOT
13630: AND
13631: IFFALSE 13981
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13633: LD_ADDR_VAR 0 1
13637: PUSH
13638: LD_INT 21
13640: PUSH
13641: LD_INT 1
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PUSH
13648: LD_INT 22
13650: PUSH
13651: LD_LOC 18
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 3
13662: PUSH
13663: LD_INT 23
13665: PUSH
13666: LD_INT 0
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: PPUSH
13679: CALL_OW 69
13683: ST_TO_ADDR
// if n < number_of_people then
13684: LD_VAR 0 1
13688: PUSH
13689: LD_EXP 19
13693: LESS
13694: IFFALSE 13978
// begin aktresp := respawn ;
13696: LD_ADDR_VAR 0 3
13700: PUSH
13701: LD_LOC 18
13705: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13706: LD_ADDR_LOC 19
13710: PUSH
13711: LD_LOC 19
13715: PPUSH
13716: LD_VAR 0 3
13720: PPUSH
13721: LD_INT 1
13723: PPUSH
13724: CALL_OW 1
13728: ST_TO_ADDR
// enable ;
13729: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13730: LD_EXP 27
13734: PPUSH
13735: LD_EXP 28
13739: PPUSH
13740: CALL_OW 12
13744: PPUSH
13745: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13749: LD_ADDR_LOC 19
13753: PUSH
13754: LD_LOC 19
13758: PPUSH
13759: LD_VAR 0 3
13763: PPUSH
13764: LD_INT 0
13766: PPUSH
13767: CALL_OW 1
13771: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13772: LD_ADDR_VAR 0 2
13776: PUSH
13777: LD_INT 21
13779: PUSH
13780: LD_INT 3
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: LD_INT 30
13792: PUSH
13793: LD_INT 0
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 30
13802: PUSH
13803: LD_INT 1
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 50
13817: PUSH
13818: EMPTY
13819: LIST
13820: PUSH
13821: LD_INT 22
13823: PUSH
13824: LD_VAR 0 3
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PPUSH
13839: CALL_OW 69
13843: ST_TO_ADDR
// if dep = 0 then
13844: LD_VAR 0 2
13848: PUSH
13849: LD_INT 0
13851: EQUAL
13852: IFFALSE 13856
// exit ;
13854: GO 13982
// hc_name :=  ;
13856: LD_ADDR_OWVAR 26
13860: PUSH
13861: LD_STRING 
13863: ST_TO_ADDR
// hc_importance := 0 ;
13864: LD_ADDR_OWVAR 32
13868: PUSH
13869: LD_INT 0
13871: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13872: LD_INT 0
13874: PPUSH
13875: LD_INT 0
13877: PPUSH
13878: LD_EXP 20
13882: PUSH
13883: LD_INT 2
13885: DIV
13886: PPUSH
13887: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13891: LD_ADDR_OWVAR 21
13895: PUSH
13896: LD_EXP 35
13900: PUSH
13901: LD_VAR 0 3
13905: ARRAY
13906: ST_TO_ADDR
// uc_side := aktresp ;
13907: LD_ADDR_OWVAR 20
13911: PUSH
13912: LD_VAR 0 3
13916: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13917: LD_ADDR_VAR 0 2
13921: PUSH
13922: LD_VAR 0 2
13926: PUSH
13927: LD_INT 1
13929: PPUSH
13930: LD_VAR 0 2
13934: PPUSH
13935: CALL_OW 12
13939: ARRAY
13940: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13941: CALL_OW 44
13945: PPUSH
13946: LD_VAR 0 2
13950: PPUSH
13951: CALL_OW 250
13955: PPUSH
13956: LD_VAR 0 2
13960: PPUSH
13961: CALL_OW 251
13965: PPUSH
13966: LD_INT 7
13968: PPUSH
13969: LD_INT 1
13971: PPUSH
13972: CALL_OW 50
// end else
13976: GO 13979
// enable ;
13978: ENABLE
// end else
13979: GO 13982
// enable ;
13981: ENABLE
// end ; end_of_file
13982: PPOPN 3
13984: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13985: LD_INT 0
13987: PPUSH
13988: PPUSH
13989: PPUSH
// BuildUpTime_Delay = 0 ;
13990: LD_ADDR_EXP 57
13994: PUSH
13995: LD_INT 0
13997: ST_TO_ADDR
// if not def_builduptime then
13998: LD_EXP 14
14002: NOT
14003: IFFALSE 14007
// exit ;
14005: GO 14190
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14007: LD_ADDR_EXP 57
14011: PUSH
14012: LD_INT 8400
14014: PUSH
14015: LD_INT 2100
14017: PUSH
14018: LD_EXP 14
14022: MUL
14023: PLUS
14024: ST_TO_ADDR
// BuildUpTimeActive := true ;
14025: LD_ADDR_EXP 56
14029: PUSH
14030: LD_INT 1
14032: ST_TO_ADDR
// for i := 1 to 8 do
14033: LD_ADDR_VAR 0 2
14037: PUSH
14038: DOUBLE
14039: LD_INT 1
14041: DEC
14042: ST_TO_ADDR
14043: LD_INT 8
14045: PUSH
14046: FOR_TO
14047: IFFALSE 14188
// if Side_Positions [ i ] then
14049: LD_EXP 34
14053: PUSH
14054: LD_VAR 0 2
14058: ARRAY
14059: IFFALSE 14186
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14061: LD_EXP 55
14065: PUSH
14066: LD_EXP 34
14070: PUSH
14071: LD_VAR 0 2
14075: ARRAY
14076: ARRAY
14077: PPUSH
14078: LD_INT 5
14080: PPUSH
14081: CALL_OW 424
// for j := 1 to 8 do
14085: LD_ADDR_VAR 0 3
14089: PUSH
14090: DOUBLE
14091: LD_INT 1
14093: DEC
14094: ST_TO_ADDR
14095: LD_INT 8
14097: PUSH
14098: FOR_TO
14099: IFFALSE 14184
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14101: LD_EXP 34
14105: PUSH
14106: LD_VAR 0 3
14110: ARRAY
14111: PUSH
14112: LD_EXP 31
14116: PUSH
14117: LD_VAR 0 2
14121: ARRAY
14122: PUSH
14123: LD_EXP 31
14127: PUSH
14128: LD_VAR 0 3
14132: ARRAY
14133: NONEQUAL
14134: PUSH
14135: LD_EXP 36
14139: NOT
14140: PUSH
14141: LD_VAR 0 2
14145: PUSH
14146: LD_VAR 0 3
14150: NONEQUAL
14151: AND
14152: OR
14153: AND
14154: IFFALSE 14182
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14156: LD_VAR 0 3
14160: PPUSH
14161: LD_EXP 55
14165: PUSH
14166: LD_EXP 34
14170: PUSH
14171: LD_VAR 0 2
14175: ARRAY
14176: ARRAY
14177: PPUSH
14178: CALL_OW 333
14182: GO 14098
14184: POP
14185: POP
// end ;
14186: GO 14046
14188: POP
14189: POP
// end ;
14190: LD_VAR 0 1
14194: RET
// export function EndBuildUp ; var i , j ; begin
14195: LD_INT 0
14197: PPUSH
14198: PPUSH
14199: PPUSH
// BuildUpTimeActive := false ;
14200: LD_ADDR_EXP 56
14204: PUSH
14205: LD_INT 0
14207: ST_TO_ADDR
// for i := 1 to 8 do
14208: LD_ADDR_VAR 0 2
14212: PUSH
14213: DOUBLE
14214: LD_INT 1
14216: DEC
14217: ST_TO_ADDR
14218: LD_INT 8
14220: PUSH
14221: FOR_TO
14222: IFFALSE 14363
// if Side_Positions [ i ] then
14224: LD_EXP 34
14228: PUSH
14229: LD_VAR 0 2
14233: ARRAY
14234: IFFALSE 14361
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14236: LD_EXP 55
14240: PUSH
14241: LD_EXP 34
14245: PUSH
14246: LD_VAR 0 2
14250: ARRAY
14251: ARRAY
14252: PPUSH
14253: LD_INT 0
14255: PPUSH
14256: CALL_OW 424
// for j := 1 to 8 do
14260: LD_ADDR_VAR 0 3
14264: PUSH
14265: DOUBLE
14266: LD_INT 1
14268: DEC
14269: ST_TO_ADDR
14270: LD_INT 8
14272: PUSH
14273: FOR_TO
14274: IFFALSE 14359
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14276: LD_EXP 34
14280: PUSH
14281: LD_VAR 0 3
14285: ARRAY
14286: PUSH
14287: LD_EXP 31
14291: PUSH
14292: LD_VAR 0 2
14296: ARRAY
14297: PUSH
14298: LD_EXP 31
14302: PUSH
14303: LD_VAR 0 3
14307: ARRAY
14308: NONEQUAL
14309: PUSH
14310: LD_EXP 36
14314: NOT
14315: PUSH
14316: LD_VAR 0 2
14320: PUSH
14321: LD_VAR 0 3
14325: NONEQUAL
14326: AND
14327: OR
14328: AND
14329: IFFALSE 14357
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14331: LD_VAR 0 3
14335: PPUSH
14336: LD_EXP 55
14340: PUSH
14341: LD_EXP 34
14345: PUSH
14346: LD_VAR 0 2
14350: ARRAY
14351: ARRAY
14352: PPUSH
14353: CALL_OW 334
14357: GO 14273
14359: POP
14360: POP
// end ;
14361: GO 14221
14363: POP
14364: POP
// end ;
14365: LD_VAR 0 1
14369: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14370: LD_EXP 56
14374: IFFALSE 14549
14376: GO 14378
14378: DISABLE
14379: LD_INT 0
14381: PPUSH
14382: PPUSH
// begin for i := 1 to 8 do
14383: LD_ADDR_VAR 0 1
14387: PUSH
14388: DOUBLE
14389: LD_INT 1
14391: DEC
14392: ST_TO_ADDR
14393: LD_INT 8
14395: PUSH
14396: FOR_TO
14397: IFFALSE 14546
// if Side_Positions [ i ] then
14399: LD_EXP 34
14403: PUSH
14404: LD_VAR 0 1
14408: ARRAY
14409: IFFALSE 14544
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14411: LD_ADDR_VAR 0 2
14415: PUSH
14416: LD_EXP 55
14420: PUSH
14421: LD_EXP 34
14425: PUSH
14426: LD_VAR 0 1
14430: ARRAY
14431: ARRAY
14432: PPUSH
14433: LD_INT 2
14435: PUSH
14436: LD_INT 21
14438: PUSH
14439: LD_INT 1
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 21
14448: PUSH
14449: LD_INT 2
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 22
14463: PUSH
14464: LD_OWVAR 2
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PPUSH
14477: CALL_OW 70
14481: PUSH
14482: FOR_IN
14483: IFFALSE 14542
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14485: LD_EXP 31
14489: PUSH
14490: LD_VAR 0 1
14494: ARRAY
14495: PUSH
14496: LD_EXP 31
14500: PUSH
14501: LD_OWVAR 2
14505: ARRAY
14506: NONEQUAL
14507: PUSH
14508: LD_EXP 36
14512: NOT
14513: PUSH
14514: LD_VAR 0 1
14518: PUSH
14519: LD_OWVAR 2
14523: NONEQUAL
14524: AND
14525: OR
14526: IFFALSE 14540
// ComMoveToArea ( un , BuildUpEscape ) ;
14528: LD_VAR 0 2
14532: PPUSH
14533: LD_INT 16
14535: PPUSH
14536: CALL_OW 113
14540: GO 14482
14542: POP
14543: POP
14544: GO 14396
14546: POP
14547: POP
// enable ;
14548: ENABLE
// end ;
14549: PPOPN 2
14551: END
// every 0 0$1 trigger def_builduptime do
14552: LD_EXP 14
14556: IFFALSE 14582
14558: GO 14560
14560: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14561: LD_INT 8400
14563: PUSH
14564: LD_EXP 14
14568: PUSH
14569: LD_INT 2100
14571: MUL
14572: PLUS
14573: PPUSH
14574: CALL_OW 67
// EndBuildUp ;
14578: CALL 14195 0 0
// end ;
14582: END
