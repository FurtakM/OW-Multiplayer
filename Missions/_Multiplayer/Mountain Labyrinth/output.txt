// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 360
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 1 , 1 , 2 , 2 , 2 , 0 , 0 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: LD_INT 2
 222: PUSH
 223: LD_INT 2
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 0
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 , 2 , 3 ] , [ 5 , 6 , 7 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: LD_INT 3
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 5
 344: PUSH
 345: LD_INT 6
 347: PUSH
 348: LD_INT 7
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: LIST
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 360: LD_ADDR_EXP 36
 364: PUSH
 365: LD_EXP 31
 369: PUSH
 370: LD_INT 0
 372: PUSH
 373: EMPTY
 374: LIST
 375: DIFF
 376: PUSH
 377: LD_INT 1
 379: GREATER
 380: ST_TO_ADDR
// if Multiplayer then
 381: LD_OWVAR 4
 385: IFFALSE 592
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 387: LD_ADDR_EXP 1
 391: PUSH
 392: LD_INT 0
 394: PPUSH
 395: CALL_OW 426
 399: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 400: LD_ADDR_EXP 2
 404: PUSH
 405: LD_INT 1
 407: PPUSH
 408: CALL_OW 426
 412: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 413: LD_ADDR_EXP 3
 417: PUSH
 418: LD_INT 2
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 426: LD_ADDR_EXP 4
 430: PUSH
 431: LD_INT 3
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 439: LD_ADDR_EXP 5
 443: PUSH
 444: LD_INT 4
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 452: LD_ADDR_EXP 6
 456: PUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 465: LD_ADDR_EXP 7
 469: PUSH
 470: LD_INT 6
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 478: LD_ADDR_EXP 8
 482: PUSH
 483: LD_INT 10
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 491: LD_ADDR_EXP 9
 495: PUSH
 496: LD_INT 11
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 504: LD_ADDR_EXP 10
 508: PUSH
 509: LD_INT 12
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 517: LD_ADDR_EXP 11
 521: PUSH
 522: LD_INT 13
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 530: LD_ADDR_EXP 12
 534: PUSH
 535: LD_INT 14
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 543: LD_ADDR_EXP 13
 547: PUSH
 548: LD_INT 17
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 556: LD_ADDR_EXP 14
 560: PUSH
 561: LD_INT 20
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 569: LD_ADDR_VAR 0 3
 573: PUSH
 574: LD_INT 22
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// def_win_rules = 0 ;
 582: LD_ADDR_EXP 30
 586: PUSH
 587: LD_INT 0
 589: ST_TO_ADDR
// end else
 590: GO 724
// begin Randomize ;
 592: CALL_OW 10
// def_base_level := 2 ;
 596: LD_ADDR_EXP 1
 600: PUSH
 601: LD_INT 2
 603: ST_TO_ADDR
// def_amount_of_people := 2 ;
 604: LD_ADDR_EXP 2
 608: PUSH
 609: LD_INT 2
 611: ST_TO_ADDR
// def_skill_level := 1 ;
 612: LD_ADDR_EXP 3
 616: PUSH
 617: LD_INT 1
 619: ST_TO_ADDR
// def_starting_resources := 2 ;
 620: LD_ADDR_EXP 4
 624: PUSH
 625: LD_INT 2
 627: ST_TO_ADDR
// def_shipments_density := 50 ;
 628: LD_ADDR_EXP 5
 632: PUSH
 633: LD_INT 50
 635: ST_TO_ADDR
// def_extra_oil_deposits := 2 ;
 636: LD_ADDR_EXP 6
 640: PUSH
 641: LD_INT 2
 643: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
 644: LD_ADDR_EXP 7
 648: PUSH
 649: LD_INT 2
 651: ST_TO_ADDR
// def_shared_vision := 1 ;
 652: LD_ADDR_EXP 8
 656: PUSH
 657: LD_INT 1
 659: ST_TO_ADDR
// def_morale_flags := 1 ;
 660: LD_ADDR_EXP 9
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// def_siberite_detection := 1 ;
 668: LD_ADDR_EXP 10
 672: PUSH
 673: LD_INT 1
 675: ST_TO_ADDR
// def_people_respawning := 2 ;
 676: LD_ADDR_EXP 11
 680: PUSH
 681: LD_INT 2
 683: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 684: LD_ADDR_EXP 12
 688: PUSH
 689: LD_INT 3
 691: ST_TO_ADDR
// def_siberite_bomb := 2 ;
 692: LD_ADDR_EXP 13
 696: PUSH
 697: LD_INT 2
 699: ST_TO_ADDR
// def_builduptime := 1 ;
 700: LD_ADDR_EXP 14
 704: PUSH
 705: LD_INT 1
 707: ST_TO_ADDR
// tech_level = 4 ;
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_INT 4
 715: ST_TO_ADDR
// def_win_rules = 0 ;
 716: LD_ADDR_EXP 30
 720: PUSH
 721: LD_INT 0
 723: ST_TO_ADDR
// end ; if isSGUI then
 724: LD_OWVAR 83
 728: IFFALSE 736
// setMpTechs ( ) else
 730: CALL 8768 0 0
 734: GO 749
// SetMpTechLevel ( tech_level + 1 ) ;
 736: LD_VAR 0 3
 740: PUSH
 741: LD_INT 1
 743: PLUS
 744: PPUSH
 745: CALL 8915 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 749: LD_ADDR_EXP 17
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 1
 759: PUSH
 760: LD_INT 1
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: PUSH
 768: LD_EXP 1
 772: PUSH
 773: LD_INT 1
 775: PLUS
 776: ARRAY
 777: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 ] [ def_base_level + 1 ] ;
 778: LD_ADDR_EXP 18
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: LD_INT 0
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: LIST
 796: PUSH
 797: LD_EXP 1
 801: PUSH
 802: LD_INT 1
 804: PLUS
 805: ARRAY
 806: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 807: LD_ADDR_EXP 19
 811: PUSH
 812: LD_INT 9
 814: PUSH
 815: LD_INT 12
 817: PUSH
 818: LD_INT 15
 820: PUSH
 821: LD_INT 24
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_EXP 2
 834: PUSH
 835: LD_INT 1
 837: PLUS
 838: ARRAY
 839: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 840: LD_ADDR_EXP 20
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: LD_INT 3
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: LD_INT 5
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: LD_EXP 3
 867: PUSH
 868: LD_INT 1
 870: PLUS
 871: ARRAY
 872: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 873: LD_ADDR_EXP 22
 877: PUSH
 878: LD_INT 0
 880: PUSH
 881: LD_INT 0
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: LIST
 891: PUSH
 892: LD_INT 30
 894: PUSH
 895: LD_INT 0
 897: PUSH
 898: LD_INT 0
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 50
 908: PUSH
 909: LD_INT 20
 911: PUSH
 912: LD_INT 0
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_INT 80
 922: PUSH
 923: LD_INT 40
 925: PUSH
 926: LD_INT 20
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: LIST
 938: LIST
 939: PUSH
 940: LD_EXP 4
 944: PUSH
 945: LD_INT 1
 947: PLUS
 948: ARRAY
 949: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 950: LD_ADDR_EXP 21
 954: PUSH
 955: LD_INT 10
 957: PUSH
 958: EMPTY
 959: LIST
 960: PUSH
 961: LD_INT 7
 963: PUSH
 964: LD_INT 14
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 6
 973: PUSH
 974: LD_INT 12
 976: PUSH
 977: LD_INT 18
 979: PUSH
 980: EMPTY
 981: LIST
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 5
 987: PUSH
 988: LD_INT 10
 990: PUSH
 991: LD_INT 15
 993: PUSH
 994: LD_INT 20
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: LD_EXP 4
1013: PUSH
1014: LD_INT 1
1016: PLUS
1017: ARRAY
1018: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1019: LD_ADDR_EXP 23
1023: PUSH
1024: LD_INT 150
1026: PUSH
1027: LD_EXP 5
1031: MINUS
1032: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1033: LD_ADDR_EXP 27
1037: PUSH
1038: LD_INT 0
1040: PUSH
1041: LD_INT 10500
1043: PUSH
1044: LD_INT 6300
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_EXP 11
1056: PUSH
1057: LD_INT 1
1059: PLUS
1060: ARRAY
1061: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1062: LD_ADDR_EXP 28
1066: PUSH
1067: LD_INT 0
1069: PUSH
1070: LD_INT 31500
1072: PUSH
1073: LD_INT 10500
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: PUSH
1081: LD_EXP 11
1085: PUSH
1086: LD_INT 1
1088: PLUS
1089: ARRAY
1090: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1091: LD_ADDR_EXP 25
1095: PUSH
1096: LD_INT 0
1098: PUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 2
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: PUSH
1114: LD_EXP 12
1118: PUSH
1119: LD_INT 1
1121: PLUS
1122: ARRAY
1123: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1124: LD_ADDR_EXP 24
1128: PUSH
1129: LD_INT 1
1131: NEG
1132: PUSH
1133: LD_INT 350
1135: PUSH
1136: LD_INT 700
1138: PUSH
1139: LD_INT 1400
1141: PUSH
1142: LD_INT 0
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: PUSH
1152: LD_EXP 9
1156: PUSH
1157: LD_INT 1
1159: PLUS
1160: ARRAY
1161: ST_TO_ADDR
// battle_flags_id := [ ] ;
1162: LD_ADDR_EXP 44
1166: PUSH
1167: EMPTY
1168: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1169: LD_EXP 13
1173: PUSH
1174: LD_INT 0
1176: EQUAL
1177: IFFALSE 1189
// siberite_bomb_Delay = 0 else
1179: LD_ADDR_EXP 29
1183: PUSH
1184: LD_INT 0
1186: ST_TO_ADDR
1187: GO 1211
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1189: LD_ADDR_EXP 29
1193: PUSH
1194: LD_EXP 13
1198: PUSH
1199: LD_INT 1
1201: MINUS
1202: PUSH
1203: LD_INT 21000
1205: MUL
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ST_TO_ADDR
// end ;
1211: LD_VAR 0 1
1215: RET
// function init_map ; var i , j ; begin
1216: LD_INT 0
1218: PPUSH
1219: PPUSH
1220: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 8 ] , [ 38 , 59 ] , [ 72 , 135 ] , [ 218 , 13 ] , [ 241 , 57 ] , [ 265 , 135 ] ] ;
1221: LD_ADDR_EXP 40
1225: PUSH
1226: LD_INT 12
1228: PUSH
1229: LD_INT 8
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 38
1238: PUSH
1239: LD_INT 59
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: LD_INT 72
1248: PUSH
1249: LD_INT 135
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PUSH
1256: LD_INT 218
1258: PUSH
1259: LD_INT 13
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 241
1268: PUSH
1269: LD_INT 57
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: LD_INT 265
1278: PUSH
1279: LD_INT 135
1281: PUSH
1282: EMPTY
1283: LIST
1284: LIST
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ 18 , 6 ] , [ 50 , 89 ] , [ 82 , 140 ] , [ 207 , 6 ] , [ 255 , 85 ] , [ 272 , 138 ] ] ;
1294: LD_ADDR_EXP 41
1298: PUSH
1299: LD_INT 18
1301: PUSH
1302: LD_INT 6
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 50
1311: PUSH
1312: LD_INT 89
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 82
1321: PUSH
1322: LD_INT 140
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 207
1331: PUSH
1332: LD_INT 6
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 255
1341: PUSH
1342: LD_INT 85
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 272
1351: PUSH
1352: LD_INT 138
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: EMPTY
1360: LIST
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 41 , 33 ] , [ 54 , 56 ] , [ 79 , 104 ] , [ 206 , 40 ] , [ 228 , 82 ] , [ 239 , 107 ] ] ;
1367: LD_ADDR_EXP 42
1371: PUSH
1372: LD_INT 41
1374: PUSH
1375: LD_INT 33
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 54
1384: PUSH
1385: LD_INT 56
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 79
1394: PUSH
1395: LD_INT 104
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: LD_INT 206
1404: PUSH
1405: LD_INT 40
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 228
1414: PUSH
1415: LD_INT 82
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 239
1424: PUSH
1425: LD_INT 107
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: LIST
1438: LIST
1439: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ 29 , 7 ] , [ 68 , 85 ] , [ 95 , 134 ] , [ 188 , 13 ] , [ 215 , 56 ] , [ 254 , 137 ] ] ;
1440: LD_ADDR_EXP 43
1444: PUSH
1445: LD_INT 29
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 68
1457: PUSH
1458: LD_INT 85
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PUSH
1465: LD_INT 95
1467: PUSH
1468: LD_INT 134
1470: PUSH
1471: EMPTY
1472: LIST
1473: LIST
1474: PUSH
1475: LD_INT 188
1477: PUSH
1478: LD_INT 13
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: PUSH
1485: LD_INT 215
1487: PUSH
1488: LD_INT 56
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PUSH
1495: LD_INT 254
1497: PUSH
1498: LD_INT 137
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: ST_TO_ADDR
// depot_def := [ [ 22 , 20 , 1 ] , [ 48 , 71 , 1 ] , [ 74 , 122 , 1 ] , [ 213 , 22 , 4 ] , [ 238 , 69 , 4 ] , [ 262 , 122 , 4 ] ] ;
1513: LD_ADDR_EXP 37
1517: PUSH
1518: LD_INT 22
1520: PUSH
1521: LD_INT 20
1523: PUSH
1524: LD_INT 1
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 48
1534: PUSH
1535: LD_INT 71
1537: PUSH
1538: LD_INT 1
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 74
1548: PUSH
1549: LD_INT 122
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 213
1562: PUSH
1563: LD_INT 22
1565: PUSH
1566: LD_INT 4
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: PUSH
1574: LD_INT 238
1576: PUSH
1577: LD_INT 69
1579: PUSH
1580: LD_INT 4
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 262
1590: PUSH
1591: LD_INT 122
1593: PUSH
1594: LD_INT 4
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: LIST
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: ST_TO_ADDR
// for i in depot_def do
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: LD_EXP 37
1619: PUSH
1620: FOR_IN
1621: IFFALSE 1697
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1623: LD_ADDR_EXP 39
1627: PUSH
1628: LD_EXP 39
1632: PUSH
1633: LD_VAR 0 2
1637: PUSH
1638: LD_INT 1
1640: ARRAY
1641: PPUSH
1642: LD_VAR 0 2
1646: PUSH
1647: LD_INT 3
1649: ARRAY
1650: PPUSH
1651: LD_INT 4
1653: NEG
1654: PPUSH
1655: CALL_OW 272
1659: PUSH
1660: LD_VAR 0 2
1664: PUSH
1665: LD_INT 2
1667: ARRAY
1668: PPUSH
1669: LD_VAR 0 2
1673: PUSH
1674: LD_INT 3
1676: ARRAY
1677: PPUSH
1678: LD_INT 4
1680: NEG
1681: PPUSH
1682: CALL_OW 273
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: EMPTY
1692: LIST
1693: ADD
1694: ST_TO_ADDR
1695: GO 1620
1697: POP
1698: POP
// breastworks_def := [ [ [ 29 , 14 , 4 ] , [ 36 , 28 , 4 ] ] , [ [ 54 , 62 , 4 ] , [ 63 , 79 , 4 ] ] , [ [ 88 , 129 , 4 ] , [ 78 , 110 , 4 ] ] , [ [ 197 , 16 , 1 ] , [ 208 , 35 , 1 ] ] , [ [ 223 , 62 , 1 ] , [ 231 , 78 , 1 ] ] , [ [ 256 , 132 , 1 ] , [ 248 , 115 , 1 ] ] ] ;
1699: LD_ADDR_EXP 38
1703: PUSH
1704: LD_INT 29
1706: PUSH
1707: LD_INT 14
1709: PUSH
1710: LD_INT 4
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 36
1720: PUSH
1721: LD_INT 28
1723: PUSH
1724: LD_INT 4
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 54
1738: PUSH
1739: LD_INT 62
1741: PUSH
1742: LD_INT 4
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 63
1752: PUSH
1753: LD_INT 79
1755: PUSH
1756: LD_INT 4
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 88
1770: PUSH
1771: LD_INT 129
1773: PUSH
1774: LD_INT 4
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: PUSH
1782: LD_INT 78
1784: PUSH
1785: LD_INT 110
1787: PUSH
1788: LD_INT 4
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 197
1802: PUSH
1803: LD_INT 16
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 208
1816: PUSH
1817: LD_INT 35
1819: PUSH
1820: LD_INT 1
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 223
1834: PUSH
1835: LD_INT 62
1837: PUSH
1838: LD_INT 1
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: LIST
1845: PUSH
1846: LD_INT 231
1848: PUSH
1849: LD_INT 78
1851: PUSH
1852: LD_INT 1
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: LD_INT 256
1866: PUSH
1867: LD_INT 132
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 248
1880: PUSH
1881: LD_INT 115
1883: PUSH
1884: LD_INT 1
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: ST_TO_ADDR
// for i = 1 to Side_Positions do
1904: LD_ADDR_VAR 0 2
1908: PUSH
1909: DOUBLE
1910: LD_INT 1
1912: DEC
1913: ST_TO_ADDR
1914: LD_EXP 34
1918: PUSH
1919: FOR_TO
1920: IFFALSE 2043
// begin if not Side_Positions [ i ] then
1922: LD_EXP 34
1926: PUSH
1927: LD_VAR 0 2
1931: ARRAY
1932: NOT
1933: IFFALSE 1937
// continue ;
1935: GO 1919
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1937: LD_EXP 40
1941: PUSH
1942: LD_EXP 34
1946: PUSH
1947: LD_VAR 0 2
1951: ARRAY
1952: ARRAY
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_EXP 40
1962: PUSH
1963: LD_EXP 34
1967: PUSH
1968: LD_VAR 0 2
1972: ARRAY
1973: ARRAY
1974: PUSH
1975: LD_INT 2
1977: ARRAY
1978: PPUSH
1979: LD_INT 2
1981: PPUSH
1982: CALL_OW 62
// if def_extra_oil_deposits then
1986: LD_EXP 6
1990: IFFALSE 2041
// CreateDepositXY ( extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
1992: LD_EXP 41
1996: PUSH
1997: LD_EXP 34
2001: PUSH
2002: LD_VAR 0 2
2006: ARRAY
2007: ARRAY
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: PPUSH
2013: LD_EXP 41
2017: PUSH
2018: LD_EXP 34
2022: PUSH
2023: LD_VAR 0 2
2027: ARRAY
2028: ARRAY
2029: PUSH
2030: LD_INT 2
2032: ARRAY
2033: PPUSH
2034: LD_INT 2
2036: PPUSH
2037: CALL_OW 62
// end ;
2041: GO 1919
2043: POP
2044: POP
// if def_extra_sib_deposits then
2045: LD_EXP 7
2049: IFFALSE 2196
// for i = 1 to Side_Positions do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_EXP 34
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2194
// begin if not Side_Positions [ i ] then
2069: LD_EXP 34
2073: PUSH
2074: LD_VAR 0 2
2078: ARRAY
2079: NOT
2080: IFFALSE 2084
// continue ;
2082: GO 2066
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2084: LD_EXP 42
2088: PUSH
2089: LD_EXP 34
2093: PUSH
2094: LD_VAR 0 2
2098: ARRAY
2099: ARRAY
2100: PUSH
2101: LD_INT 1
2103: ARRAY
2104: PPUSH
2105: LD_EXP 42
2109: PUSH
2110: LD_EXP 34
2114: PUSH
2115: LD_VAR 0 2
2119: ARRAY
2120: ARRAY
2121: PUSH
2122: LD_INT 2
2124: ARRAY
2125: PPUSH
2126: LD_INT 3
2128: PPUSH
2129: CALL_OW 62
// if def_extra_sib_deposits = 2 then
2133: LD_EXP 7
2137: PUSH
2138: LD_INT 2
2140: EQUAL
2141: IFFALSE 2192
// CreateDepositXY ( extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , extra_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2143: LD_EXP 43
2147: PUSH
2148: LD_EXP 34
2152: PUSH
2153: LD_VAR 0 2
2157: ARRAY
2158: ARRAY
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: LD_EXP 43
2168: PUSH
2169: LD_EXP 34
2173: PUSH
2174: LD_VAR 0 2
2178: ARRAY
2179: ARRAY
2180: PUSH
2181: LD_INT 2
2183: ARRAY
2184: PPUSH
2185: LD_INT 3
2187: PPUSH
2188: CALL_OW 62
// end ;
2192: GO 2066
2194: POP
2195: POP
// end ;
2196: LD_VAR 0 1
2200: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2201: LD_INT 0
2203: PPUSH
2204: PPUSH
2205: PPUSH
// if not Team_Game then
2206: LD_EXP 36
2210: NOT
2211: IFFALSE 2309
// begin for i = 1 to 8 do
2213: LD_ADDR_VAR 0 2
2217: PUSH
2218: DOUBLE
2219: LD_INT 1
2221: DEC
2222: ST_TO_ADDR
2223: LD_INT 8
2225: PUSH
2226: FOR_TO
2227: IFFALSE 2305
// for j = 1 to 8 do
2229: LD_ADDR_VAR 0 3
2233: PUSH
2234: DOUBLE
2235: LD_INT 1
2237: DEC
2238: ST_TO_ADDR
2239: LD_INT 8
2241: PUSH
2242: FOR_TO
2243: IFFALSE 2301
// if i <> j then
2245: LD_VAR 0 2
2249: PUSH
2250: LD_VAR 0 3
2254: NONEQUAL
2255: IFFALSE 2279
// SetAttitude ( i , j , att_neutral , true ) else
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_VAR 0 3
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: LD_INT 1
2272: PPUSH
2273: CALL_OW 80
2277: GO 2299
// SetAttitude ( i , j , att_friend , true ) ;
2279: LD_VAR 0 2
2283: PPUSH
2284: LD_VAR 0 3
2288: PPUSH
2289: LD_INT 1
2291: PPUSH
2292: LD_INT 1
2294: PPUSH
2295: CALL_OW 80
2299: GO 2242
2301: POP
2302: POP
2303: GO 2226
2305: POP
2306: POP
// end else
2307: GO 2484
// begin if def_shared_vision then
2309: LD_EXP 8
2313: IFFALSE 2378
// begin for i in Teams do
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: LD_EXP 32
2324: PUSH
2325: FOR_IN
2326: IFFALSE 2376
// for j = 2 to i do
2328: LD_ADDR_VAR 0 3
2332: PUSH
2333: DOUBLE
2334: LD_INT 2
2336: DEC
2337: ST_TO_ADDR
2338: LD_VAR 0 2
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2372
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2346: LD_VAR 0 2
2350: PUSH
2351: LD_VAR 0 3
2355: ARRAY
2356: PPUSH
2357: LD_VAR 0 2
2361: PUSH
2362: LD_INT 1
2364: ARRAY
2365: PPUSH
2366: CALL_OW 343
2370: GO 2343
2372: POP
2373: POP
2374: GO 2325
2376: POP
2377: POP
// end ; for i = 1 to 8 do
2378: LD_ADDR_VAR 0 2
2382: PUSH
2383: DOUBLE
2384: LD_INT 1
2386: DEC
2387: ST_TO_ADDR
2388: LD_INT 8
2390: PUSH
2391: FOR_TO
2392: IFFALSE 2482
// for j = 1 to 8 do
2394: LD_ADDR_VAR 0 3
2398: PUSH
2399: DOUBLE
2400: LD_INT 1
2402: DEC
2403: ST_TO_ADDR
2404: LD_INT 8
2406: PUSH
2407: FOR_TO
2408: IFFALSE 2478
// if Side_Teams [ i ] = Side_Teams [ j ] then
2410: LD_EXP 31
2414: PUSH
2415: LD_VAR 0 2
2419: ARRAY
2420: PUSH
2421: LD_EXP 31
2425: PUSH
2426: LD_VAR 0 3
2430: ARRAY
2431: EQUAL
2432: IFFALSE 2456
// SetAttitude ( i , j , att_friend , true ) else
2434: LD_VAR 0 2
2438: PPUSH
2439: LD_VAR 0 3
2443: PPUSH
2444: LD_INT 1
2446: PPUSH
2447: LD_INT 1
2449: PPUSH
2450: CALL_OW 80
2454: GO 2476
// SetAttitude ( i , j , att_enemy , true ) ;
2456: LD_VAR 0 2
2460: PPUSH
2461: LD_VAR 0 3
2465: PPUSH
2466: LD_INT 2
2468: PPUSH
2469: LD_INT 1
2471: PPUSH
2472: CALL_OW 80
2476: GO 2407
2478: POP
2479: POP
2480: GO 2391
2482: POP
2483: POP
// end ; end ;
2484: LD_VAR 0 1
2488: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2489: LD_INT 0
2491: PPUSH
2492: PPUSH
2493: PPUSH
2494: PPUSH
// result := [ ] ;
2495: LD_ADDR_VAR 0 7
2499: PUSH
2500: EMPTY
2501: ST_TO_ADDR
// for i := 1 to count do
2502: LD_ADDR_VAR 0 8
2506: PUSH
2507: DOUBLE
2508: LD_INT 1
2510: DEC
2511: ST_TO_ADDR
2512: LD_VAR 0 1
2516: PUSH
2517: FOR_TO
2518: IFFALSE 2963
// begin uc_direction := Rand ( 0 , 5 ) ;
2520: LD_ADDR_OWVAR 24
2524: PUSH
2525: LD_INT 0
2527: PPUSH
2528: LD_INT 5
2530: PPUSH
2531: CALL_OW 12
2535: ST_TO_ADDR
// if commander then
2536: LD_LOC 1
2540: IFFALSE 2649
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2542: LD_ADDR_OWVAR 26
2546: PUSH
2547: LD_OWVAR 19
2551: PUSH
2552: LD_OWVAR 20
2556: ARRAY
2557: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2558: LD_INT 1
2560: PPUSH
2561: LD_INT 2
2563: PPUSH
2564: CALL_OW 12
2568: PPUSH
2569: LD_VAR 0 2
2573: PPUSH
2574: LD_EXP 20
2578: PUSH
2579: LD_INT 2
2581: PLUS
2582: PPUSH
2583: CALL_OW 380
// hc_importance := 105 ;
2587: LD_ADDR_OWVAR 32
2591: PUSH
2592: LD_INT 105
2594: ST_TO_ADDR
// commander := false ;
2595: LD_ADDR_LOC 1
2599: PUSH
2600: LD_INT 0
2602: ST_TO_ADDR
// if Multiplayer then
2603: LD_OWVAR 4
2607: IFFALSE 2647
// begin hc_gallery := MULTIAVATARS ;
2609: LD_ADDR_OWVAR 33
2613: PUSH
2614: LD_STRING MULTIAVATARS
2616: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2617: LD_ADDR_OWVAR 34
2621: PUSH
2622: LD_OWVAR 20
2626: PPUSH
2627: CALL_OW 525
2631: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2632: LD_ADDR_OWVAR 27
2636: PUSH
2637: LD_OWVAR 20
2641: PPUSH
2642: CALL_OW 526
2646: ST_TO_ADDR
// end ; end else
2647: GO 2712
// begin hc_name :=  ;
2649: LD_ADDR_OWVAR 26
2653: PUSH
2654: LD_STRING 
2656: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 2
2662: PPUSH
2663: CALL_OW 12
2667: PPUSH
2668: LD_VAR 0 2
2672: PPUSH
2673: LD_EXP 20
2677: PPUSH
2678: CALL_OW 380
// hc_importance := 0 ;
2682: LD_ADDR_OWVAR 32
2686: PUSH
2687: LD_INT 0
2689: ST_TO_ADDR
// if Multiplayer then
2690: LD_OWVAR 4
2694: IFFALSE 2712
// begin hc_gallery :=  ;
2696: LD_ADDR_OWVAR 33
2700: PUSH
2701: LD_STRING 
2703: ST_TO_ADDR
// hc_face_number := 0 ;
2704: LD_ADDR_OWVAR 34
2708: PUSH
2709: LD_INT 0
2711: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2712: LD_ADDR_VAR 0 10
2716: PUSH
2717: CALL_OW 44
2721: ST_TO_ADDR
// if global_defined then
2722: LD_LOC 3
2726: IFFALSE 2866
// begin if ( cl = class_soldier ) then
2728: LD_VAR 0 2
2732: PUSH
2733: LD_INT 1
2735: EQUAL
2736: IFFALSE 2756
// j := i + soldiers_created else
2738: LD_ADDR_VAR 0 9
2742: PUSH
2743: LD_VAR 0 8
2747: PUSH
2748: LD_LOC 4
2752: PLUS
2753: ST_TO_ADDR
2754: GO 2766
// j := i ;
2756: LD_ADDR_VAR 0 9
2760: PUSH
2761: LD_VAR 0 8
2765: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2766: LD_LOC 2
2770: PUSH
2771: LD_VAR 0 2
2775: ARRAY
2776: PUSH
2777: LD_VAR 0 9
2781: ARRAY
2782: PPUSH
2783: LD_VAR 0 10
2787: PPUSH
2788: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2792: LD_VAR 0 10
2796: PPUSH
2797: LD_INT 2
2799: PPUSH
2800: LD_LOC 2
2804: PUSH
2805: LD_VAR 0 2
2809: ARRAY
2810: PUSH
2811: LD_VAR 0 9
2815: ARRAY
2816: PPUSH
2817: LD_INT 2
2819: PPUSH
2820: CALL_OW 260
2824: PPUSH
2825: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2829: LD_VAR 0 10
2833: PPUSH
2834: LD_INT 1
2836: PPUSH
2837: LD_LOC 2
2841: PUSH
2842: LD_VAR 0 2
2846: ARRAY
2847: PUSH
2848: LD_VAR 0 9
2852: ARRAY
2853: PPUSH
2854: LD_INT 1
2856: PPUSH
2857: CALL_OW 260
2861: PPUSH
2862: CALL_OW 239
// end ; if building then
2866: LD_VAR 0 6
2870: IFFALSE 2915
// begin SetDir ( un , ( GetDir ( building ) + 3 ) mod 6 ) ;
2872: LD_VAR 0 10
2876: PPUSH
2877: LD_VAR 0 6
2881: PPUSH
2882: CALL_OW 254
2886: PUSH
2887: LD_INT 3
2889: PLUS
2890: PUSH
2891: LD_INT 6
2893: MOD
2894: PPUSH
2895: CALL_OW 233
// PlaceHumanInUnit ( un , building ) end else
2899: LD_VAR 0 10
2903: PPUSH
2904: LD_VAR 0 6
2908: PPUSH
2909: CALL_OW 52
2913: GO 2942
// PlaceUnitXYR ( un , x , y , r , false ) ;
2915: LD_VAR 0 10
2919: PPUSH
2920: LD_VAR 0 3
2924: PPUSH
2925: LD_VAR 0 4
2929: PPUSH
2930: LD_VAR 0 5
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 50
// result := result ^ [ un ] ;
2942: LD_ADDR_VAR 0 7
2946: PUSH
2947: LD_VAR 0 7
2951: PUSH
2952: LD_VAR 0 10
2956: PUSH
2957: EMPTY
2958: LIST
2959: ADD
2960: ST_TO_ADDR
// end ;
2961: GO 2517
2963: POP
2964: POP
// if not global_defined then
2965: LD_LOC 3
2969: NOT
2970: IFFALSE 3048
// if ( global_units >= cl ) then
2972: LD_LOC 2
2976: PUSH
2977: LD_VAR 0 2
2981: GREATEREQUAL
2982: IFFALSE 3023
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2984: LD_ADDR_LOC 2
2988: PUSH
2989: LD_LOC 2
2993: PPUSH
2994: LD_VAR 0 2
2998: PPUSH
2999: LD_LOC 2
3003: PUSH
3004: LD_VAR 0 2
3008: ARRAY
3009: PUSH
3010: LD_VAR 0 7
3014: ADD
3015: PPUSH
3016: CALL_OW 1
3020: ST_TO_ADDR
3021: GO 3048
// global_units := Replace ( global_units , cl , result ) ;
3023: LD_ADDR_LOC 2
3027: PUSH
3028: LD_LOC 2
3032: PPUSH
3033: LD_VAR 0 2
3037: PPUSH
3038: LD_VAR 0 7
3042: PPUSH
3043: CALL_OW 1
3047: ST_TO_ADDR
// if commander then
3048: LD_LOC 1
3052: IFFALSE 3099
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3054: LD_ADDR_EXP 45
3058: PUSH
3059: LD_EXP 45
3063: PPUSH
3064: LD_OWVAR 20
3068: PPUSH
3069: LD_EXP 45
3073: PUSH
3074: LD_OWVAR 20
3078: ARRAY
3079: PUSH
3080: LD_VAR 0 10
3084: ADD
3085: PPUSH
3086: CALL_OW 1
3090: ST_TO_ADDR
// commander := false ;
3091: LD_ADDR_LOC 1
3095: PUSH
3096: LD_INT 0
3098: ST_TO_ADDR
// end ; end ;
3099: LD_VAR 0 7
3103: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3104: LD_INT 0
3106: PPUSH
3107: PPUSH
3108: PPUSH
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
3113: PPUSH
3114: PPUSH
// if side in [ 0 , 9 ] then
3115: LD_VAR 0 1
3119: PUSH
3120: LD_INT 0
3122: PUSH
3123: LD_INT 9
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: IN
3130: IFFALSE 3134
// exit ;
3132: GO 4184
// pos := Side_Positions [ side ] ;
3134: LD_ADDR_VAR 0 3
3138: PUSH
3139: LD_EXP 34
3143: PUSH
3144: LD_VAR 0 1
3148: ARRAY
3149: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3150: LD_ADDR_OWVAR 21
3154: PUSH
3155: LD_EXP 35
3159: PUSH
3160: LD_VAR 0 1
3164: ARRAY
3165: ST_TO_ADDR
// uc_side := side ;
3166: LD_ADDR_OWVAR 20
3170: PUSH
3171: LD_VAR 0 1
3175: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3176: LD_ADDR_VAR 0 4
3180: PUSH
3181: LD_EXP 37
3185: PUSH
3186: LD_VAR 0 3
3190: ARRAY
3191: PUSH
3192: LD_INT 1
3194: ARRAY
3195: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3196: LD_ADDR_VAR 0 5
3200: PUSH
3201: LD_EXP 37
3205: PUSH
3206: LD_VAR 0 3
3210: ARRAY
3211: PUSH
3212: LD_INT 2
3214: ARRAY
3215: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3216: LD_ADDR_VAR 0 6
3220: PUSH
3221: LD_EXP 37
3225: PUSH
3226: LD_VAR 0 3
3230: ARRAY
3231: PUSH
3232: LD_INT 3
3234: ARRAY
3235: ST_TO_ADDR
// if is_depot then
3236: LD_EXP 17
3240: IFFALSE 3373
// begin bc_type = b_depot ;
3242: LD_ADDR_OWVAR 42
3246: PUSH
3247: LD_INT 0
3249: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3250: LD_ADDR_VAR 0 10
3254: PUSH
3255: LD_VAR 0 4
3259: PPUSH
3260: LD_VAR 0 5
3264: PPUSH
3265: LD_VAR 0 6
3269: PPUSH
3270: CALL_OW 47
3274: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3275: LD_VAR 0 10
3279: PPUSH
3280: LD_STRING @
3282: PUSH
3283: LD_VAR 0 1
3287: STR
3288: PPUSH
3289: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3293: LD_VAR 0 10
3297: PPUSH
3298: CALL_OW 274
3302: PPUSH
3303: LD_INT 1
3305: PPUSH
3306: LD_EXP 22
3310: PUSH
3311: LD_INT 1
3313: ARRAY
3314: PPUSH
3315: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3319: LD_VAR 0 10
3323: PPUSH
3324: CALL_OW 274
3328: PPUSH
3329: LD_INT 2
3331: PPUSH
3332: LD_EXP 22
3336: PUSH
3337: LD_INT 2
3339: ARRAY
3340: PPUSH
3341: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3345: LD_VAR 0 10
3349: PPUSH
3350: CALL_OW 274
3354: PPUSH
3355: LD_INT 3
3357: PPUSH
3358: LD_EXP 22
3362: PUSH
3363: LD_INT 3
3365: ARRAY
3366: PPUSH
3367: CALL_OW 277
// end else
3371: GO 3517
// begin for i := 1 to 3 do
3373: LD_ADDR_VAR 0 7
3377: PUSH
3378: DOUBLE
3379: LD_INT 1
3381: DEC
3382: ST_TO_ADDR
3383: LD_INT 3
3385: PUSH
3386: FOR_TO
3387: IFFALSE 3515
// begin r := starting_resources [ i ] ;
3389: LD_ADDR_VAR 0 8
3393: PUSH
3394: LD_EXP 22
3398: PUSH
3399: LD_VAR 0 7
3403: ARRAY
3404: ST_TO_ADDR
// while r >= 10 do
3405: LD_VAR 0 8
3409: PUSH
3410: LD_INT 10
3412: GREATEREQUAL
3413: IFFALSE 3513
// if r > 50 then
3415: LD_VAR 0 8
3419: PUSH
3420: LD_INT 50
3422: GREATER
3423: IFFALSE 3469
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3425: LD_VAR 0 7
3429: PPUSH
3430: LD_INT 5
3432: PPUSH
3433: LD_VAR 0 4
3437: PPUSH
3438: LD_VAR 0 5
3442: PPUSH
3443: LD_INT 4
3445: PPUSH
3446: LD_INT 0
3448: PPUSH
3449: CALL_OW 60
// r := r - 50 ;
3453: LD_ADDR_VAR 0 8
3457: PUSH
3458: LD_VAR 0 8
3462: PUSH
3463: LD_INT 50
3465: MINUS
3466: ST_TO_ADDR
// end else
3467: GO 3511
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3469: LD_VAR 0 7
3473: PPUSH
3474: LD_VAR 0 8
3478: PUSH
3479: LD_INT 10
3481: DIV
3482: PPUSH
3483: LD_VAR 0 4
3487: PPUSH
3488: LD_VAR 0 5
3492: PPUSH
3493: LD_INT 4
3495: PPUSH
3496: LD_INT 0
3498: PPUSH
3499: CALL_OW 60
// r := 0 ;
3503: LD_ADDR_VAR 0 8
3507: PUSH
3508: LD_INT 0
3510: ST_TO_ADDR
// end ;
3511: GO 3405
// end ;
3513: GO 3386
3515: POP
3516: POP
// end ; for r in starting_crates do
3517: LD_ADDR_VAR 0 8
3521: PUSH
3522: LD_EXP 21
3526: PUSH
3527: FOR_IN
3528: IFFALSE 3560
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3530: LD_INT 1
3532: PPUSH
3533: LD_INT 5
3535: PPUSH
3536: LD_VAR 0 4
3540: PPUSH
3541: LD_VAR 0 5
3545: PPUSH
3546: LD_VAR 0 8
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: CALL_OW 60
3558: GO 3527
3560: POP
3561: POP
// if def_morale_flags then
3562: LD_EXP 9
3566: IFFALSE 3705
// begin x := start_def [ pos ] [ 1 ] ;
3568: LD_ADDR_VAR 0 4
3572: PUSH
3573: LD_EXP 39
3577: PUSH
3578: LD_VAR 0 3
3582: ARRAY
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3588: LD_ADDR_VAR 0 5
3592: PUSH
3593: LD_EXP 39
3597: PUSH
3598: LD_VAR 0 3
3602: ARRAY
3603: PUSH
3604: LD_INT 2
3606: ARRAY
3607: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3608: LD_VAR 0 4
3612: PPUSH
3613: LD_VAR 0 5
3617: PPUSH
3618: LD_INT 12
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3628: LD_ADDR_EXP 44
3632: PUSH
3633: LD_EXP 44
3637: PUSH
3638: LD_VAR 0 1
3642: PPUSH
3643: LD_VAR 0 4
3647: PPUSH
3648: LD_VAR 0 5
3652: PPUSH
3653: LD_INT 1
3655: PUSH
3656: LD_INT 100
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 2
3665: PUSH
3666: LD_INT 50
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: PUSH
3673: LD_INT 3
3675: PUSH
3676: LD_INT 20
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 20
3685: PUSH
3686: LD_INT 100
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: PPUSH
3699: CALL_OW 418
3703: ADD
3704: ST_TO_ADDR
// end ; commander := true ;
3705: LD_ADDR_LOC 1
3709: PUSH
3710: LD_INT 1
3712: ST_TO_ADDR
// soldiers_created := 0 ;
3713: LD_ADDR_LOC 4
3717: PUSH
3718: LD_INT 0
3720: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3721: LD_ADDR_VAR 0 7
3725: PUSH
3726: DOUBLE
3727: LD_INT 1
3729: DEC
3730: ST_TO_ADDR
3731: LD_EXP 18
3735: PUSH
3736: FOR_TO
3737: IFFALSE 3890
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3739: LD_ADDR_VAR 0 4
3743: PUSH
3744: LD_EXP 38
3748: PUSH
3749: LD_VAR 0 3
3753: ARRAY
3754: PUSH
3755: LD_VAR 0 7
3759: ARRAY
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3765: LD_ADDR_VAR 0 5
3769: PUSH
3770: LD_EXP 38
3774: PUSH
3775: LD_VAR 0 3
3779: ARRAY
3780: PUSH
3781: LD_VAR 0 7
3785: ARRAY
3786: PUSH
3787: LD_INT 2
3789: ARRAY
3790: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3791: LD_ADDR_VAR 0 6
3795: PUSH
3796: LD_EXP 38
3800: PUSH
3801: LD_VAR 0 3
3805: ARRAY
3806: PUSH
3807: LD_VAR 0 7
3811: ARRAY
3812: PUSH
3813: LD_INT 3
3815: ARRAY
3816: ST_TO_ADDR
// bc_type := b_breastwork ;
3817: LD_ADDR_OWVAR 42
3821: PUSH
3822: LD_INT 31
3824: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3825: LD_ADDR_VAR 0 9
3829: PUSH
3830: LD_VAR 0 4
3834: PPUSH
3835: LD_VAR 0 5
3839: PPUSH
3840: LD_VAR 0 6
3844: PPUSH
3845: CALL_OW 47
3849: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3850: LD_INT 1
3852: PPUSH
3853: LD_INT 1
3855: PPUSH
3856: LD_INT 0
3858: PPUSH
3859: LD_INT 0
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: LD_VAR 0 9
3869: PPUSH
3870: CALL 2489 0 6
// soldiers_created := soldiers_created + 1 ;
3874: LD_ADDR_LOC 4
3878: PUSH
3879: LD_LOC 4
3883: PUSH
3884: LD_INT 1
3886: PLUS
3887: ST_TO_ADDR
// end ;
3888: GO 3736
3890: POP
3891: POP
// x := start_def [ pos ] [ 1 ] ;
3892: LD_ADDR_VAR 0 4
3896: PUSH
3897: LD_EXP 39
3901: PUSH
3902: LD_VAR 0 3
3906: ARRAY
3907: PUSH
3908: LD_INT 1
3910: ARRAY
3911: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3912: LD_ADDR_VAR 0 5
3916: PUSH
3917: LD_EXP 39
3921: PUSH
3922: LD_VAR 0 3
3926: ARRAY
3927: PUSH
3928: LD_INT 2
3930: ARRAY
3931: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3932: LD_LOC 8
3936: PUSH
3937: LD_EXP 18
3941: MINUS
3942: PPUSH
3943: LD_INT 1
3945: PPUSH
3946: LD_VAR 0 4
3950: PPUSH
3951: LD_VAR 0 5
3955: PPUSH
3956: LD_INT 5
3958: PPUSH
3959: LD_INT 0
3961: PPUSH
3962: CALL 2489 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3966: LD_LOC 5
3970: PPUSH
3971: LD_INT 2
3973: PPUSH
3974: LD_VAR 0 4
3978: PPUSH
3979: LD_VAR 0 5
3983: PPUSH
3984: LD_INT 5
3986: PPUSH
3987: LD_INT 0
3989: PPUSH
3990: CALL 2489 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3994: LD_LOC 7
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: LD_VAR 0 4
4006: PPUSH
4007: LD_VAR 0 5
4011: PPUSH
4012: LD_INT 5
4014: PPUSH
4015: LD_INT 0
4017: PPUSH
4018: CALL 2489 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4022: LD_LOC 6
4026: PPUSH
4027: LD_INT 4
4029: PPUSH
4030: LD_VAR 0 4
4034: PPUSH
4035: LD_VAR 0 5
4039: PPUSH
4040: LD_INT 5
4042: PPUSH
4043: LD_INT 0
4045: PPUSH
4046: CALL 2489 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4050: LD_EXP 10
4054: PUSH
4055: LD_INT 20
4057: PPUSH
4058: LD_VAR 0 1
4062: PPUSH
4063: CALL_OW 321
4067: PUSH
4068: LD_INT 1
4070: EQUAL
4071: AND
4072: IFFALSE 4089
// SetTech ( tech_SibDet , side , state_researched ) ;
4074: LD_INT 20
4076: PPUSH
4077: LD_VAR 0 1
4081: PPUSH
4082: LD_INT 2
4084: PPUSH
4085: CALL_OW 322
// if def_siberite_bomb = 1 then
4089: LD_EXP 13
4093: PUSH
4094: LD_INT 1
4096: EQUAL
4097: IFFALSE 4131
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4099: LD_INT 25
4101: PPUSH
4102: LD_VAR 0 1
4106: PPUSH
4107: LD_INT 1
4109: PPUSH
4110: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4114: LD_INT 73
4116: PPUSH
4117: LD_VAR 0 1
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: CALL_OW 322
// end else
4129: GO 4161
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4131: LD_INT 25
4133: PPUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: LD_INT 0
4141: PPUSH
4142: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4146: LD_INT 73
4148: PPUSH
4149: LD_VAR 0 1
4153: PPUSH
4154: LD_INT 0
4156: PPUSH
4157: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4161: LD_INT 24
4163: PPUSH
4164: LD_VAR 0 1
4168: PPUSH
4169: LD_INT 0
4171: PPUSH
4172: CALL_OW 322
// global_defined := true ;
4176: LD_ADDR_LOC 3
4180: PUSH
4181: LD_INT 1
4183: ST_TO_ADDR
// end ;
4184: LD_VAR 0 2
4188: RET
// function prepare_sides ; var i ; begin
4189: LD_INT 0
4191: PPUSH
4192: PPUSH
// global_units := [ ] ;
4193: LD_ADDR_LOC 2
4197: PUSH
4198: EMPTY
4199: ST_TO_ADDR
// global_defined := false ;
4200: LD_ADDR_LOC 3
4204: PUSH
4205: LD_INT 0
4207: ST_TO_ADDR
// CountClassMembers ;
4208: CALL 4258 0 0
// for i := 1 to 8 do
4212: LD_ADDR_VAR 0 2
4216: PUSH
4217: DOUBLE
4218: LD_INT 1
4220: DEC
4221: ST_TO_ADDR
4222: LD_INT 8
4224: PUSH
4225: FOR_TO
4226: IFFALSE 4251
// if Side_Positions [ i ] then
4228: LD_EXP 34
4232: PUSH
4233: LD_VAR 0 2
4237: ARRAY
4238: IFFALSE 4249
// prepare_side ( i ) ;
4240: LD_VAR 0 2
4244: PPUSH
4245: CALL 3104 0 1
4249: GO 4225
4251: POP
4252: POP
// end ;
4253: LD_VAR 0 1
4257: RET
// function CountClassMembers ; var Mode ; begin
4258: LD_INT 0
4260: PPUSH
4261: PPUSH
// if No_Mechs then
4262: LD_EXP 15
4266: IFFALSE 4278
// Mode := 2 else
4268: LD_ADDR_VAR 0 2
4272: PUSH
4273: LD_INT 2
4275: ST_TO_ADDR
4276: GO 4286
// Mode := 1 ;
4278: LD_ADDR_VAR 0 2
4282: PUSH
4283: LD_INT 1
4285: ST_TO_ADDR
// neng := number_of_people ;
4286: LD_ADDR_LOC 5
4290: PUSH
4291: LD_EXP 19
4295: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4296: LD_ADDR_LOC 8
4300: PUSH
4301: LD_LOC 5
4305: PUSH
4306: LD_INT 4
4308: PUSH
4309: LD_INT 3
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: LD_VAR 0 2
4320: ARRAY
4321: DIV
4322: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4323: LD_LOC 8
4327: PUSH
4328: LD_EXP 18
4332: LESS
4333: IFFALSE 4345
// nsol := number_of_breastworks ;
4335: LD_ADDR_LOC 8
4339: PUSH
4340: LD_EXP 18
4344: ST_TO_ADDR
// neng := neng - nsol ;
4345: LD_ADDR_LOC 5
4349: PUSH
4350: LD_LOC 5
4354: PUSH
4355: LD_LOC 8
4359: MINUS
4360: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4361: LD_ADDR_LOC 6
4365: PUSH
4366: LD_LOC 5
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: LD_INT 2
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_VAR 0 2
4385: ARRAY
4386: DIV
4387: ST_TO_ADDR
// if ( nsci < 1 ) then
4388: LD_LOC 6
4392: PUSH
4393: LD_INT 1
4395: LESS
4396: IFFALSE 4406
// nsci := 1 ;
4398: LD_ADDR_LOC 6
4402: PUSH
4403: LD_INT 1
4405: ST_TO_ADDR
// neng := neng - nsci ;
4406: LD_ADDR_LOC 5
4410: PUSH
4411: LD_LOC 5
4415: PUSH
4416: LD_LOC 6
4420: MINUS
4421: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4422: LD_ADDR_LOC 7
4426: PUSH
4427: LD_LOC 5
4431: PUSH
4432: LD_INT 2
4434: DIV
4435: PUSH
4436: LD_INT 0
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: LD_VAR 0 2
4447: ARRAY
4448: ST_TO_ADDR
// neng := neng - nmech ;
4449: LD_ADDR_LOC 5
4453: PUSH
4454: LD_LOC 5
4458: PUSH
4459: LD_LOC 7
4463: MINUS
4464: ST_TO_ADDR
// if ( neng < 1 ) then
4465: LD_LOC 5
4469: PUSH
4470: LD_INT 1
4472: LESS
4473: IFFALSE 4483
// neng := 1 ;
4475: LD_ADDR_LOC 5
4479: PUSH
4480: LD_INT 1
4482: ST_TO_ADDR
// end ;
4483: LD_VAR 0 1
4487: RET
// starting begin disable ( 98 ) ;
4488: LD_INT 98
4490: DISABLE_MARKED
// disable ( 99 ) ;
4491: LD_INT 99
4493: DISABLE_MARKED
// disable ( 400 ) ;
4494: LD_INT 400
4496: DISABLE_MARKED
// disable ( 401 ) ;
4497: LD_INT 401
4499: DISABLE_MARKED
// mp_selectmsg := true ;
4500: LD_ADDR_OWVAR 13
4504: PUSH
4505: LD_INT 1
4507: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4508: CALL 68 0 0
// init_map ;
4512: CALL 1216 0 0
// init_respawning ;
4516: CALL 13492 0 0
// set_shared_visions_and_alliances ;
4520: CALL 2201 0 0
// ResetFog ;
4524: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4528: LD_OWVAR 2
4532: PPUSH
4533: CALL_OW 520
// AnimateTrees ( true ) ;
4537: LD_INT 1
4539: PPUSH
4540: CALL_OW 573
// prepare_sides ;
4544: CALL 4189 0 0
// Init_Win_Condition ;
4548: CALL 7473 0 0
// ShowTimer ;
4552: CALL 7051 0 0
// music_nat := Side_Nations [ your_side ] ;
4556: LD_ADDR_OWVAR 71
4560: PUSH
4561: LD_EXP 35
4565: PUSH
4566: LD_OWVAR 2
4570: ARRAY
4571: ST_TO_ADDR
// if IAmSpec then
4572: CALL_OW 531
4576: IFFALSE 4600
// begin fogoff ( true ) ;
4578: LD_INT 1
4580: PPUSH
4581: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4585: LD_INT 130
4587: PPUSH
4588: LD_INT 100
4590: PPUSH
4591: CALL_OW 86
// enable ( 400 ) ;
4595: LD_INT 400
4597: ENABLE_MARKED
// end else
4598: GO 4646
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4600: LD_EXP 39
4604: PUSH
4605: LD_EXP 34
4609: PUSH
4610: LD_OWVAR 2
4614: ARRAY
4615: ARRAY
4616: PUSH
4617: LD_INT 1
4619: ARRAY
4620: PPUSH
4621: LD_EXP 39
4625: PUSH
4626: LD_EXP 34
4630: PUSH
4631: LD_OWVAR 2
4635: ARRAY
4636: ARRAY
4637: PUSH
4638: LD_INT 2
4640: ARRAY
4641: PPUSH
4642: CALL_OW 86
// end ; InitApeman ;
4646: CALL 5567 0 0
// BuildUpAreas := [ BaseArea1 , BaseArea2 , BaseArea3 , BaseArea4 , BaseArea5 , BaseArea6 ] ;
4650: LD_ADDR_EXP 55
4654: PUSH
4655: LD_INT 7
4657: PUSH
4658: LD_INT 8
4660: PUSH
4661: LD_INT 9
4663: PUSH
4664: LD_INT 10
4666: PUSH
4667: LD_INT 11
4669: PUSH
4670: LD_INT 12
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: ST_TO_ADDR
// BeginBuildUp ;
4681: CALL 13986 0 0
// end ;
4685: END
// every 0 0$1 do
4686: GO 4688
4688: DISABLE
// if ( def_siberite_bomb > 1 ) then
4689: LD_EXP 13
4693: PUSH
4694: LD_INT 1
4696: GREATER
4697: IFFALSE 4712
// begin wait ( siberite_bomb_Delay ) ;
4699: LD_EXP 29
4703: PPUSH
4704: CALL_OW 67
// EnableSibFiss ;
4708: CALL 4713 0 0
// end ;
4712: END
// function EnableSibFiss ; var i ; begin
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
// for i := 1 to 8 do
4717: LD_ADDR_VAR 0 2
4721: PUSH
4722: DOUBLE
4723: LD_INT 1
4725: DEC
4726: ST_TO_ADDR
4727: LD_INT 8
4729: PUSH
4730: FOR_TO
4731: IFFALSE 4777
// if Side_Positions [ i ] then
4733: LD_EXP 34
4737: PUSH
4738: LD_VAR 0 2
4742: ARRAY
4743: IFFALSE 4775
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4745: LD_INT 25
4747: PPUSH
4748: LD_VAR 0 2
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4760: LD_INT 73
4762: PPUSH
4763: LD_VAR 0 2
4767: PPUSH
4768: LD_INT 1
4770: PPUSH
4771: CALL_OW 322
// end ;
4775: GO 4730
4777: POP
4778: POP
// end ; end_of_file
4779: LD_VAR 0 1
4783: RET
// every 0 0$25 + 0 0$1.0 do
4784: GO 4786
4786: DISABLE
// begin if GetResourceArea ( Center1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4787: LD_INT 13
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: CALL_OW 287
4797: PUSH
4798: LD_INT 200
4800: PUSH
4801: LD_EXP 23
4805: MINUS
4806: PUSH
4807: LD_INT 25
4809: DIVREAL
4810: PUSH
4811: LD_INT 5
4813: MUL
4814: LESS
4815: IFFALSE 4830
// CreateCratesArea ( 5 , Center1 , true ) ;
4817: LD_INT 5
4819: PPUSH
4820: LD_INT 13
4822: PPUSH
4823: LD_INT 1
4825: PPUSH
4826: CALL_OW 55
// if GetResourceArea ( Center2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4830: LD_INT 14
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL_OW 287
4840: PUSH
4841: LD_INT 200
4843: PUSH
4844: LD_EXP 23
4848: MINUS
4849: PUSH
4850: LD_INT 25
4852: DIVREAL
4853: PUSH
4854: LD_INT 5
4856: MUL
4857: LESS
4858: IFFALSE 4873
// CreateCratesArea ( 5 , Center2 , true ) ;
4860: LD_INT 5
4862: PPUSH
4863: LD_INT 14
4865: PPUSH
4866: LD_INT 1
4868: PPUSH
4869: CALL_OW 55
// if GetResourceArea ( Center3 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
4873: LD_INT 15
4875: PPUSH
4876: LD_INT 1
4878: PPUSH
4879: CALL_OW 287
4883: PUSH
4884: LD_INT 200
4886: PUSH
4887: LD_EXP 23
4891: MINUS
4892: PUSH
4893: LD_INT 25
4895: DIVREAL
4896: PUSH
4897: LD_INT 5
4899: MUL
4900: LESS
4901: IFFALSE 4916
// CreateCratesArea ( 5 , Center3 , true ) ;
4903: LD_INT 5
4905: PPUSH
4906: LD_INT 15
4908: PPUSH
4909: LD_INT 1
4911: PPUSH
4912: CALL_OW 55
// CreateCratesArea ( 5 , BuildUpEscape , true ) ;
4916: LD_INT 5
4918: PPUSH
4919: LD_INT 16
4921: PPUSH
4922: LD_INT 1
4924: PPUSH
4925: CALL_OW 55
// enable ;
4929: ENABLE
// end ;
4930: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4931: GO 4933
4933: DISABLE
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
// begin case tick of 1 .. 1 1$0 :
4938: LD_OWVAR 1
4942: PUSH
4943: LD_INT 1
4945: DOUBLE
4946: GREATEREQUAL
4947: IFFALSE 4955
4949: LD_INT 2100
4951: DOUBLE
4952: LESSEQUAL
4953: IFTRUE 4957
4955: GO 4985
4957: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4958: LD_EXP 23
4962: PUSH
4963: LD_INT 100
4965: DIVREAL
4966: PUSH
4967: LD_INT 525
4969: PPUSH
4970: LD_INT 1050
4972: PPUSH
4973: CALL_OW 12
4977: MUL
4978: PPUSH
4979: CALL_OW 67
4983: GO 5287
4985: LD_INT 2100
4987: PUSH
4988: LD_INT 1
4990: PLUS
4991: DOUBLE
4992: GREATEREQUAL
4993: IFFALSE 5001
4995: LD_INT 10500
4997: DOUBLE
4998: LESSEQUAL
4999: IFTRUE 5003
5001: GO 5031
5003: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5004: LD_EXP 23
5008: PUSH
5009: LD_INT 100
5011: DIVREAL
5012: PUSH
5013: LD_INT 1050
5015: PPUSH
5016: LD_INT 1750
5018: PPUSH
5019: CALL_OW 12
5023: MUL
5024: PPUSH
5025: CALL_OW 67
5029: GO 5287
5031: LD_INT 10500
5033: PUSH
5034: LD_INT 1
5036: PLUS
5037: DOUBLE
5038: GREATEREQUAL
5039: IFFALSE 5047
5041: LD_INT 21000
5043: DOUBLE
5044: LESSEQUAL
5045: IFTRUE 5049
5047: GO 5077
5049: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5050: LD_EXP 23
5054: PUSH
5055: LD_INT 100
5057: DIVREAL
5058: PUSH
5059: LD_INT 1750
5061: PPUSH
5062: LD_INT 2100
5064: PPUSH
5065: CALL_OW 12
5069: MUL
5070: PPUSH
5071: CALL_OW 67
5075: GO 5287
5077: LD_INT 21000
5079: PUSH
5080: LD_INT 1
5082: PLUS
5083: DOUBLE
5084: GREATEREQUAL
5085: IFFALSE 5093
5087: LD_INT 42000
5089: DOUBLE
5090: LESSEQUAL
5091: IFTRUE 5095
5093: GO 5123
5095: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5096: LD_EXP 23
5100: PUSH
5101: LD_INT 100
5103: DIVREAL
5104: PUSH
5105: LD_INT 2100
5107: PPUSH
5108: LD_INT 2275
5110: PPUSH
5111: CALL_OW 12
5115: MUL
5116: PPUSH
5117: CALL_OW 67
5121: GO 5287
5123: LD_INT 42000
5125: PUSH
5126: LD_INT 1
5128: PLUS
5129: DOUBLE
5130: GREATEREQUAL
5131: IFFALSE 5139
5133: LD_INT 63000
5135: DOUBLE
5136: LESSEQUAL
5137: IFTRUE 5141
5139: GO 5169
5141: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5142: LD_EXP 23
5146: PUSH
5147: LD_INT 100
5149: DIVREAL
5150: PUSH
5151: LD_INT 2275
5153: PPUSH
5154: LD_INT 2450
5156: PPUSH
5157: CALL_OW 12
5161: MUL
5162: PPUSH
5163: CALL_OW 67
5167: GO 5287
5169: LD_INT 63000
5171: PUSH
5172: LD_INT 1
5174: PLUS
5175: DOUBLE
5176: GREATEREQUAL
5177: IFFALSE 5185
5179: LD_INT 105000
5181: DOUBLE
5182: LESSEQUAL
5183: IFTRUE 5187
5185: GO 5215
5187: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5188: LD_EXP 23
5192: PUSH
5193: LD_INT 100
5195: DIVREAL
5196: PUSH
5197: LD_INT 2450
5199: PPUSH
5200: LD_INT 2800
5202: PPUSH
5203: CALL_OW 12
5207: MUL
5208: PPUSH
5209: CALL_OW 67
5213: GO 5287
5215: LD_INT 105000
5217: PUSH
5218: LD_INT 1
5220: PLUS
5221: DOUBLE
5222: GREATEREQUAL
5223: IFFALSE 5231
5225: LD_INT 630000
5227: DOUBLE
5228: LESSEQUAL
5229: IFTRUE 5233
5231: GO 5261
5233: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5234: LD_EXP 23
5238: PUSH
5239: LD_INT 100
5241: DIVREAL
5242: PUSH
5243: LD_INT 2800
5245: PPUSH
5246: LD_INT 3500
5248: PPUSH
5249: CALL_OW 12
5253: MUL
5254: PPUSH
5255: CALL_OW 67
5259: GO 5287
5261: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5262: LD_EXP 23
5266: PUSH
5267: LD_INT 100
5269: DIVREAL
5270: PUSH
5271: LD_INT 3500
5273: PPUSH
5274: LD_INT 3850
5276: PPUSH
5277: CALL_OW 12
5281: MUL
5282: PPUSH
5283: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5287: LD_ADDR_VAR 0 2
5291: PUSH
5292: LD_INT 3
5294: PPUSH
5295: LD_INT 5
5297: PPUSH
5298: CALL_OW 12
5302: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5303: LD_ADDR_VAR 0 1
5307: PUSH
5308: LD_EXP 34
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: EMPTY
5317: LIST
5318: DIFF
5319: PUSH
5320: FOR_IN
5321: IFFALSE 5370
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5323: LD_VAR 0 2
5327: PPUSH
5328: LD_EXP 39
5332: PUSH
5333: LD_VAR 0 1
5337: ARRAY
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_EXP 39
5347: PUSH
5348: LD_VAR 0 1
5352: ARRAY
5353: PUSH
5354: LD_INT 2
5356: ARRAY
5357: PPUSH
5358: LD_INT 20
5360: PPUSH
5361: LD_INT 1
5363: PPUSH
5364: CALL_OW 56
5368: GO 5320
5370: POP
5371: POP
// enable ;
5372: ENABLE
// end ; end_of_file
5373: PPOPN 2
5375: END
// every 20 20$00 trigger apemanNumber do
5376: LD_EXP 46
5380: IFFALSE 5413
5382: GO 5384
5384: DISABLE
// begin enable ;
5385: ENABLE
// if apeLevel >= 8 then
5386: LD_EXP 51
5390: PUSH
5391: LD_INT 8
5393: GREATEREQUAL
5394: IFFALSE 5399
// disable else
5396: DISABLE
5397: GO 5413
// apeLevel := apeLevel + 1 ;
5399: LD_ADDR_EXP 51
5403: PUSH
5404: LD_EXP 51
5408: PUSH
5409: LD_INT 1
5411: PLUS
5412: ST_TO_ADDR
// end ;
5413: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5414: LD_EXP 46
5418: PUSH
5419: LD_EXP 47
5423: LESS
5424: IFFALSE 5564
5426: GO 5428
5428: DISABLE
5429: LD_INT 0
5431: PPUSH
5432: PPUSH
5433: PPUSH
5434: PPUSH
// begin enable ;
5435: ENABLE
// for i := 1 to apemanPos do
5436: LD_ADDR_VAR 0 1
5440: PUSH
5441: DOUBLE
5442: LD_INT 1
5444: DEC
5445: ST_TO_ADDR
5446: LD_EXP 49
5450: PUSH
5451: FOR_TO
5452: IFFALSE 5562
// begin if apemanPlayerCount [ i ] then
5454: LD_EXP 50
5458: PUSH
5459: LD_VAR 0 1
5463: ARRAY
5464: IFFALSE 5560
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5466: LD_EXP 50
5470: PUSH
5471: LD_VAR 0 1
5475: ARRAY
5476: PUSH
5477: LD_EXP 49
5481: PUSH
5482: LD_VAR 0 1
5486: ARRAY
5487: GREATER
5488: IFFALSE 5560
// begin ape := PrepareApeman ;
5490: LD_ADDR_VAR 0 2
5494: PUSH
5495: CALL 6075 0 0
5499: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5500: LD_VAR 0 2
5504: PPUSH
5505: LD_EXP 52
5509: PUSH
5510: LD_VAR 0 1
5514: ARRAY
5515: PPUSH
5516: LD_INT 0
5518: PPUSH
5519: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5523: LD_ADDR_EXP 49
5527: PUSH
5528: LD_EXP 49
5532: PPUSH
5533: LD_VAR 0 1
5537: PPUSH
5538: LD_EXP 49
5542: PUSH
5543: LD_VAR 0 1
5547: ARRAY
5548: PUSH
5549: LD_VAR 0 2
5553: UNION
5554: PPUSH
5555: CALL_OW 1
5559: ST_TO_ADDR
// end ; end ; end ;
5560: GO 5451
5562: POP
5563: POP
// end ;
5564: PPOPN 4
5566: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
5571: PPUSH
5572: PPUSH
5573: PPUSH
5574: PPUSH
5575: PPUSH
// playersAmount := 0 ;
5576: LD_ADDR_VAR 0 3
5580: PUSH
5581: LD_INT 0
5583: ST_TO_ADDR
// _apeAreas := [ ApeArea1 , ApeArea2 , ApeArea3 , ApeArea4 , ApeArea5 , ApeArea6 , ] ;
5584: LD_ADDR_VAR 0 7
5588: PUSH
5589: LD_INT 1
5591: PUSH
5592: LD_INT 2
5594: PUSH
5595: LD_INT 3
5597: PUSH
5598: LD_INT 4
5600: PUSH
5601: LD_INT 5
5603: PUSH
5604: LD_INT 6
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5615: LD_ADDR_EXP 52
5619: PUSH
5620: LD_INT 0
5622: PUSH
5623: LD_INT 0
5625: PUSH
5626: LD_INT 0
5628: PUSH
5629: LD_INT 0
5631: PUSH
5632: LD_INT 0
5634: PUSH
5635: LD_INT 0
5637: PUSH
5638: LD_INT 0
5640: PUSH
5641: LD_INT 0
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: ST_TO_ADDR
// for j = 1 to Side_Positions do
5654: LD_ADDR_VAR 0 4
5658: PUSH
5659: DOUBLE
5660: LD_INT 1
5662: DEC
5663: ST_TO_ADDR
5664: LD_EXP 34
5668: PUSH
5669: FOR_TO
5670: IFFALSE 5737
// if Side_Positions [ j ] then
5672: LD_EXP 34
5676: PUSH
5677: LD_VAR 0 4
5681: ARRAY
5682: IFFALSE 5735
// begin playersAmount := playersAmount + 1 ;
5684: LD_ADDR_VAR 0 3
5688: PUSH
5689: LD_VAR 0 3
5693: PUSH
5694: LD_INT 1
5696: PLUS
5697: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5698: LD_ADDR_EXP 52
5702: PUSH
5703: LD_EXP 52
5707: PPUSH
5708: LD_VAR 0 4
5712: PPUSH
5713: LD_VAR 0 7
5717: PUSH
5718: LD_EXP 34
5722: PUSH
5723: LD_VAR 0 4
5727: ARRAY
5728: ARRAY
5729: PPUSH
5730: CALL_OW 1
5734: ST_TO_ADDR
// end ;
5735: GO 5669
5737: POP
5738: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5739: LD_ADDR_EXP 48
5743: PUSH
5744: LD_INT 3
5746: PUSH
5747: LD_EXP 25
5751: MUL
5752: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5753: LD_ADDR_EXP 46
5757: PUSH
5758: LD_VAR 0 3
5762: PUSH
5763: LD_EXP 48
5767: MUL
5768: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5769: LD_ADDR_EXP 47
5773: PUSH
5774: LD_EXP 46
5778: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5779: LD_ADDR_EXP 49
5783: PUSH
5784: LD_INT 0
5786: PUSH
5787: LD_INT 0
5789: PUSH
5790: LD_INT 0
5792: PUSH
5793: LD_INT 0
5795: PUSH
5796: LD_INT 0
5798: PUSH
5799: LD_INT 0
5801: PUSH
5802: LD_INT 0
5804: PUSH
5805: LD_INT 0
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5818: LD_ADDR_EXP 50
5822: PUSH
5823: LD_INT 0
5825: PUSH
5826: LD_INT 0
5828: PUSH
5829: LD_INT 0
5831: PUSH
5832: LD_INT 0
5834: PUSH
5835: LD_INT 0
5837: PUSH
5838: LD_INT 0
5840: PUSH
5841: LD_INT 0
5843: PUSH
5844: LD_INT 0
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: ST_TO_ADDR
// apeLevel := 1 ;
5857: LD_ADDR_EXP 51
5861: PUSH
5862: LD_INT 1
5864: ST_TO_ADDR
// if not apemanNumber then
5865: LD_EXP 46
5869: NOT
5870: IFFALSE 5874
// exit ;
5872: GO 6070
// for i := 1 to apemanPerPlayer do
5874: LD_ADDR_VAR 0 2
5878: PUSH
5879: DOUBLE
5880: LD_INT 1
5882: DEC
5883: ST_TO_ADDR
5884: LD_EXP 48
5888: PUSH
5889: FOR_TO
5890: IFFALSE 6068
// begin for j := 1 to Side_Positions do
5892: LD_ADDR_VAR 0 4
5896: PUSH
5897: DOUBLE
5898: LD_INT 1
5900: DEC
5901: ST_TO_ADDR
5902: LD_EXP 34
5906: PUSH
5907: FOR_TO
5908: IFFALSE 6064
// if Side_Positions [ j ] then
5910: LD_EXP 34
5914: PUSH
5915: LD_VAR 0 4
5919: ARRAY
5920: IFFALSE 6062
// begin pos := Side_Positions [ j ] ;
5922: LD_ADDR_VAR 0 6
5926: PUSH
5927: LD_EXP 34
5931: PUSH
5932: LD_VAR 0 4
5936: ARRAY
5937: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5938: LD_ADDR_EXP 50
5942: PUSH
5943: LD_EXP 50
5947: PPUSH
5948: LD_VAR 0 4
5952: PPUSH
5953: LD_EXP 50
5957: PUSH
5958: LD_VAR 0 4
5962: ARRAY
5963: PUSH
5964: LD_INT 1
5966: PLUS
5967: PPUSH
5968: CALL_OW 1
5972: ST_TO_ADDR
// ape := PrepareApeman ;
5973: LD_ADDR_VAR 0 5
5977: PUSH
5978: CALL 6075 0 0
5982: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5983: LD_ADDR_EXP 49
5987: PUSH
5988: LD_EXP 49
5992: PPUSH
5993: LD_VAR 0 4
5997: PPUSH
5998: LD_EXP 49
6002: PUSH
6003: LD_VAR 0 4
6007: ARRAY
6008: PPUSH
6009: LD_EXP 49
6013: PUSH
6014: LD_VAR 0 4
6018: ARRAY
6019: PUSH
6020: LD_INT 1
6022: PLUS
6023: PPUSH
6024: LD_VAR 0 5
6028: PPUSH
6029: CALL_OW 1
6033: PPUSH
6034: CALL_OW 1
6038: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6039: LD_VAR 0 5
6043: PPUSH
6044: LD_EXP 52
6048: PUSH
6049: LD_VAR 0 4
6053: ARRAY
6054: PPUSH
6055: LD_INT 0
6057: PPUSH
6058: CALL_OW 49
// end ;
6062: GO 5907
6064: POP
6065: POP
// end ;
6066: GO 5889
6068: POP
6069: POP
// end ;
6070: LD_VAR 0 1
6074: RET
// export function PrepareApeman ; var bonus ; begin
6075: LD_INT 0
6077: PPUSH
6078: PPUSH
// uc_side := 0 ;
6079: LD_ADDR_OWVAR 20
6083: PUSH
6084: LD_INT 0
6086: ST_TO_ADDR
// uc_nation := 0 ;
6087: LD_ADDR_OWVAR 21
6091: PUSH
6092: LD_INT 0
6094: ST_TO_ADDR
// InitHc ;
6095: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6099: LD_ADDR_VAR 0 2
6103: PUSH
6104: LD_INT 1
6106: NEG
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: LD_INT 1
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 25
6121: PUSH
6122: LD_INT 12
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PPUSH
6129: CALL_OW 69
6133: PUSH
6134: LD_INT 3
6136: MOD
6137: PUSH
6138: LD_INT 1
6140: PLUS
6141: ARRAY
6142: ST_TO_ADDR
// hc_class := class_apeman ;
6143: LD_ADDR_OWVAR 28
6147: PUSH
6148: LD_INT 12
6150: ST_TO_ADDR
// hc_gallery :=  ;
6151: LD_ADDR_OWVAR 33
6155: PUSH
6156: LD_STRING 
6158: ST_TO_ADDR
// hc_name :=  ;
6159: LD_ADDR_OWVAR 26
6163: PUSH
6164: LD_STRING 
6166: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6167: LD_ADDR_OWVAR 31
6171: PUSH
6172: LD_EXP 51
6176: PUSH
6177: LD_VAR 0 2
6181: PLUS
6182: PUSH
6183: LD_EXP 51
6187: PUSH
6188: LD_VAR 0 2
6192: PLUS
6193: PUSH
6194: LD_EXP 51
6198: PUSH
6199: LD_VAR 0 2
6203: PLUS
6204: PUSH
6205: LD_EXP 51
6209: PUSH
6210: LD_VAR 0 2
6214: PLUS
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6222: LD_ADDR_OWVAR 35
6226: PUSH
6227: LD_INT 10
6229: PUSH
6230: LD_VAR 0 2
6234: MUL
6235: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6236: LD_ADDR_OWVAR 29
6240: PUSH
6241: LD_INT 12
6243: PUSH
6244: LD_INT 12
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: ST_TO_ADDR
// result := CreateHuman ;
6251: LD_ADDR_VAR 0 1
6255: PUSH
6256: CALL_OW 44
6260: ST_TO_ADDR
// end ;
6261: LD_VAR 0 1
6265: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6266: LD_INT 0
6268: PPUSH
6269: PPUSH
6270: PPUSH
// if not ape then
6271: LD_VAR 0 1
6275: NOT
6276: IFFALSE 6280
// exit ;
6278: GO 6405
// side := GetSide ( ape ) ;
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_VAR 0 1
6289: PPUSH
6290: CALL_OW 255
6294: ST_TO_ADDR
// if not side then
6295: LD_VAR 0 3
6299: NOT
6300: IFFALSE 6354
// begin for i = 1 to apemanPos do
6302: LD_ADDR_VAR 0 4
6306: PUSH
6307: DOUBLE
6308: LD_INT 1
6310: DEC
6311: ST_TO_ADDR
6312: LD_EXP 49
6316: PUSH
6317: FOR_TO
6318: IFFALSE 6352
// if ape in apemanPos [ i ] then
6320: LD_VAR 0 1
6324: PUSH
6325: LD_EXP 49
6329: PUSH
6330: LD_VAR 0 4
6334: ARRAY
6335: IN
6336: IFFALSE 6350
// begin side := i ;
6338: LD_ADDR_VAR 0 3
6342: PUSH
6343: LD_VAR 0 4
6347: ST_TO_ADDR
// break ;
6348: GO 6352
// end ;
6350: GO 6317
6352: POP
6353: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6354: LD_ADDR_EXP 49
6358: PUSH
6359: LD_EXP 49
6363: PPUSH
6364: LD_VAR 0 3
6368: PPUSH
6369: LD_EXP 49
6373: PUSH
6374: LD_VAR 0 3
6378: ARRAY
6379: PUSH
6380: LD_VAR 0 1
6384: DIFF
6385: PPUSH
6386: CALL_OW 1
6390: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6391: LD_ADDR_EXP 46
6395: PUSH
6396: LD_EXP 46
6400: PUSH
6401: LD_INT 1
6403: MINUS
6404: ST_TO_ADDR
// end ; end_of_file
6405: LD_VAR 0 2
6409: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6410: LD_VAR 0 1
6414: PPUSH
6415: CALL_OW 266
6419: PUSH
6420: LD_INT 0
6422: PUSH
6423: LD_INT 1
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: IN
6430: IFFALSE 6455
// SetBName ( b , @ & GetSide ( b ) ) ;
6432: LD_VAR 0 1
6436: PPUSH
6437: LD_STRING @
6439: PUSH
6440: LD_VAR 0 1
6444: PPUSH
6445: CALL_OW 255
6449: STR
6450: PPUSH
6451: CALL_OW 500
// end ;
6455: PPOPN 2
6457: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6458: LD_VAR 0 1
6462: PPUSH
6463: CALL_OW 266
6467: PUSH
6468: LD_INT 0
6470: PUSH
6471: LD_INT 1
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: IN
6478: IFFALSE 6503
// SetBName ( b , @ & GetSide ( b ) ) ;
6480: LD_VAR 0 1
6484: PPUSH
6485: LD_STRING @
6487: PUSH
6488: LD_VAR 0 1
6492: PPUSH
6493: CALL_OW 255
6497: STR
6498: PPUSH
6499: CALL_OW 500
// end ;
6503: PPOPN 3
6505: END
// on VehicleConstructed ( veh , fac ) do var side ;
6506: LD_INT 0
6508: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6509: LD_VAR 0 1
6513: PPUSH
6514: CALL_OW 263
6518: PUSH
6519: LD_INT 5
6521: EQUAL
6522: IFFALSE 6664
// begin side := GetSide ( veh ) ;
6524: LD_ADDR_VAR 0 3
6528: PUSH
6529: LD_VAR 0 1
6533: PPUSH
6534: CALL_OW 255
6538: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6539: LD_ADDR_EXP 49
6543: PUSH
6544: LD_EXP 49
6548: PPUSH
6549: LD_VAR 0 3
6553: PPUSH
6554: LD_EXP 49
6558: PUSH
6559: LD_VAR 0 3
6563: ARRAY
6564: PPUSH
6565: LD_INT 52
6567: PUSH
6568: EMPTY
6569: LIST
6570: PPUSH
6571: CALL_OW 72
6575: PUSH
6576: LD_INT 22
6578: PUSH
6579: LD_VAR 0 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 2
6590: PUSH
6591: LD_INT 33
6593: PUSH
6594: LD_INT 5
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 25
6603: PUSH
6604: LD_INT 12
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 25
6613: PUSH
6614: LD_INT 15
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: LD_INT 25
6623: PUSH
6624: LD_INT 16
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 25
6633: PUSH
6634: LD_INT 17
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 69
6657: UNION
6658: PPUSH
6659: CALL_OW 1
6663: ST_TO_ADDR
// end ; end ;
6664: PPOPN 3
6666: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
6671: PPUSH
6672: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6673: LD_VAR 0 1
6677: PPUSH
6678: CALL_OW 257
6682: PUSH
6683: LD_INT 12
6685: PUSH
6686: LD_INT 15
6688: PUSH
6689: LD_INT 17
6691: PUSH
6692: LD_INT 16
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: IN
6701: PUSH
6702: LD_VAR 0 1
6706: PPUSH
6707: CALL_OW 263
6711: PUSH
6712: LD_INT 5
6714: EQUAL
6715: OR
6716: IFFALSE 6727
// ApeKilled ( j ) ;
6718: LD_VAR 0 1
6722: PPUSH
6723: CALL 6266 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6727: LD_VAR 0 1
6731: PPUSH
6732: CALL_OW 266
6736: PUSH
6737: LD_INT 0
6739: PUSH
6740: LD_INT 1
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: IN
6747: IFFALSE 6829
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6749: LD_ADDR_VAR 0 4
6753: PUSH
6754: LD_EXP 34
6758: PUSH
6759: LD_VAR 0 1
6763: PPUSH
6764: CALL_OW 255
6768: ARRAY
6769: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6770: LD_ADDR_VAR 0 2
6774: PUSH
6775: LD_EXP 39
6779: PUSH
6780: LD_VAR 0 4
6784: ARRAY
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6790: LD_ADDR_VAR 0 3
6794: PUSH
6795: LD_EXP 39
6799: PUSH
6800: LD_VAR 0 4
6804: ARRAY
6805: PUSH
6806: LD_INT 2
6808: ARRAY
6809: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6810: LD_VAR 0 2
6814: PPUSH
6815: LD_VAR 0 3
6819: PPUSH
6820: CALL_OW 420
6824: PPUSH
6825: CALL_OW 419
// end ; end ;
6829: PPOPN 5
6831: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6832: LD_VAR 0 1
6836: PPUSH
6837: LD_VAR 0 2
6841: PPUSH
6842: LD_VAR 0 3
6846: PPUSH
6847: LD_OWVAR 2
6851: PPUSH
6852: CALL 7234 0 4
6856: PPOPN 3
6858: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6859: LD_INT 0
6861: PPUSH
6862: PPUSH
// for un in battle_flags_id do
6863: LD_ADDR_VAR 0 2
6867: PUSH
6868: LD_EXP 44
6872: PUSH
6873: FOR_IN
6874: IFFALSE 6949
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
6876: LD_VAR 0 2
6880: PPUSH
6881: LD_INT 1
6883: PUSH
6884: LD_LOC 9
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 2
6895: PUSH
6896: LD_LOC 9
6900: PUSH
6901: LD_INT 2
6903: DIV
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: LD_INT 3
6911: PUSH
6912: LD_LOC 9
6916: PUSH
6917: LD_INT 5
6919: DIV
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: LD_INT 20
6927: PUSH
6928: LD_LOC 9
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 423
6947: GO 6873
6949: POP
6950: POP
// end ;
6951: LD_VAR 0 1
6955: RET
// every 1 do var un ;
6956: GO 6958
6958: DISABLE
6959: LD_INT 0
6961: PPUSH
// begin if not def_morale_flags then
6962: LD_EXP 9
6966: NOT
6967: IFFALSE 6971
// exit ;
6969: GO 7048
// if not morale_decreasing_time then
6971: LD_EXP 24
6975: NOT
6976: IFFALSE 6980
// exit ;
6978: GO 7048
// strength = 100 ;
6980: LD_ADDR_LOC 9
6984: PUSH
6985: LD_INT 100
6987: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
6988: LD_EXP 24
6992: PPUSH
6993: CALL_OW 67
// strength := strength - 1 ;
6997: LD_ADDR_LOC 9
7001: PUSH
7002: LD_LOC 9
7006: PUSH
7007: LD_INT 1
7009: MINUS
7010: ST_TO_ADDR
// Update_Flags ;
7011: CALL 6859 0 0
// until not strength ;
7015: LD_LOC 9
7019: NOT
7020: IFFALSE 6988
// for un in battle_flags_id do
7022: LD_ADDR_VAR 0 1
7026: PUSH
7027: LD_EXP 44
7031: PUSH
7032: FOR_IN
7033: IFFALSE 7046
// KillBattleFlag ( un ) ;
7035: LD_VAR 0 1
7039: PPUSH
7040: CALL_OW 419
7044: GO 7032
7046: POP
7047: POP
// end ; end_of_file
7048: PPOPN 1
7050: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7051: LD_INT 0
7053: PPUSH
7054: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7055: LD_ADDR_VAR 0 2
7059: PUSH
7060: LD_STRING #Multi1x1-Time
7062: PUSH
7063: LD_OWVAR 1
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: ST_TO_ADDR
// if WaitServerStrings then
7072: LD_EXP 54
7076: IFFALSE 7094
// AllStrings = AllStrings ^ WaitServerStrings ;
7078: LD_ADDR_VAR 0 2
7082: PUSH
7083: LD_VAR 0 2
7087: PUSH
7088: LD_EXP 54
7092: ADD
7093: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7094: LD_INT 0
7096: PUSH
7097: LD_EXP 29
7101: PUSH
7102: LD_OWVAR 1
7106: MINUS
7107: LESSEQUAL
7108: IFFALSE 7139
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_STRING #allowedsibbomb
7122: PUSH
7123: LD_EXP 29
7127: PUSH
7128: LD_OWVAR 1
7132: MINUS
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: ADD
7138: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7139: LD_INT 0
7141: PUSH
7142: LD_EXP 57
7146: PUSH
7147: LD_OWVAR 1
7151: MINUS
7152: LESSEQUAL
7153: IFFALSE 7184
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7155: LD_ADDR_VAR 0 2
7159: PUSH
7160: LD_VAR 0 2
7164: PUSH
7165: LD_STRING #builduptime
7167: PUSH
7168: LD_EXP 57
7172: PUSH
7173: LD_OWVAR 1
7177: MINUS
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: ADD
7183: ST_TO_ADDR
// if ( ExtraStrings ) then
7184: LD_EXP 53
7188: IFFALSE 7210
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7190: LD_ADDR_VAR 0 2
7194: PUSH
7195: LD_VAR 0 2
7199: PUSH
7200: LD_STRING 
7202: ADD
7203: PUSH
7204: LD_EXP 53
7208: ADD
7209: ST_TO_ADDR
// Display_Strings := AllStrings ;
7210: LD_ADDR_OWVAR 47
7214: PUSH
7215: LD_VAR 0 2
7219: ST_TO_ADDR
// end ;
7220: LD_VAR 0 1
7224: RET
// every 0 0$1 do
7225: GO 7227
7227: DISABLE
// begin ShowTimer ;
7228: CALL 7051 0 0
// enable ;
7232: ENABLE
// end ; end_of_file
7233: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7234: LD_INT 0
7236: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7237: LD_VAR 0 1
7241: PPUSH
7242: CALL_OW 255
7246: PUSH
7247: LD_VAR 0 4
7251: EQUAL
7252: IFFALSE 7271
// begin SetAchievement ( ACH_RAD ) ;
7254: LD_STRING ACH_RAD
7256: PPUSH
7257: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7261: LD_STRING ACH_NL
7263: PPUSH
7264: LD_INT 1
7266: PPUSH
7267: CALL_OW 564
// end end ;
7271: LD_VAR 0 5
7275: RET
// export function SA_Win ( side ) ; begin
7276: LD_INT 0
7278: PPUSH
// case side of 1 :
7279: LD_VAR 0 1
7283: PUSH
7284: LD_INT 1
7286: DOUBLE
7287: EQUAL
7288: IFTRUE 7292
7290: GO 7305
7292: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7293: LD_STRING ACH_AH
7295: PPUSH
7296: LD_INT 1
7298: PPUSH
7299: CALL_OW 564
7303: GO 7468
7305: LD_INT 2
7307: DOUBLE
7308: EQUAL
7309: IFTRUE 7313
7311: GO 7326
7313: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7314: LD_STRING ACH_E
7316: PPUSH
7317: LD_INT 1
7319: PPUSH
7320: CALL_OW 564
7324: GO 7468
7326: LD_INT 3
7328: DOUBLE
7329: EQUAL
7330: IFTRUE 7334
7332: GO 7347
7334: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7335: LD_STRING ACH_OOL
7337: PPUSH
7338: LD_INT 1
7340: PPUSH
7341: CALL_OW 564
7345: GO 7468
7347: LD_INT 1
7349: PUSH
7350: LD_INT 2
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: DOUBLE
7357: EQUAL
7358: IFTRUE 7362
7360: GO 7387
7362: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7363: LD_STRING ACH_AH
7365: PPUSH
7366: LD_REAL  5.00000000000000E-0001
7369: PPUSH
7370: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7374: LD_STRING ACH_E
7376: PPUSH
7377: LD_REAL  5.00000000000000E-0001
7380: PPUSH
7381: CALL_OW 564
// end ; [ 2 , 3 ] :
7385: GO 7468
7387: LD_INT 2
7389: PUSH
7390: LD_INT 3
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: DOUBLE
7397: EQUAL
7398: IFTRUE 7402
7400: GO 7427
7402: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7403: LD_STRING ACH_OOL
7405: PPUSH
7406: LD_REAL  5.00000000000000E-0001
7409: PPUSH
7410: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7414: LD_STRING ACH_E
7416: PPUSH
7417: LD_REAL  5.00000000000000E-0001
7420: PPUSH
7421: CALL_OW 564
// end ; [ 3 , 1 ] :
7425: GO 7468
7427: LD_INT 3
7429: PUSH
7430: LD_INT 1
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: DOUBLE
7437: EQUAL
7438: IFTRUE 7442
7440: GO 7467
7442: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7443: LD_STRING ACH_AH
7445: PPUSH
7446: LD_REAL  5.00000000000000E-0001
7449: PPUSH
7450: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7454: LD_STRING ACH_OOL
7456: PPUSH
7457: LD_REAL  5.00000000000000E-0001
7460: PPUSH
7461: CALL_OW 564
// end ; end ;
7465: GO 7468
7467: POP
// end ; end_of_file
7468: LD_VAR 0 2
7472: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7473: LD_INT 0
7475: PPUSH
7476: PPUSH
// enable ( 98 ) ;
7477: LD_INT 98
7479: ENABLE_MARKED
// GameEnded = false ;
7480: LD_ADDR_LOC 15
7484: PUSH
7485: LD_INT 0
7487: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7488: LD_ADDR_LOC 14
7492: PUSH
7493: LD_INT 0
7495: PUSH
7496: LD_INT 0
7498: PUSH
7499: LD_INT 0
7501: PUSH
7502: LD_INT 0
7504: PUSH
7505: LD_INT 0
7507: PUSH
7508: LD_INT 0
7510: PUSH
7511: LD_INT 0
7513: PUSH
7514: LD_INT 0
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: ST_TO_ADDR
// unfoged = false ;
7527: LD_ADDR_LOC 16
7531: PUSH
7532: LD_INT 0
7534: ST_TO_ADDR
// defeated_specs := [ ] ;
7535: LD_ADDR_LOC 17
7539: PUSH
7540: EMPTY
7541: ST_TO_ADDR
// for i = 1 to side_positions do
7542: LD_ADDR_VAR 0 2
7546: PUSH
7547: DOUBLE
7548: LD_INT 1
7550: DEC
7551: ST_TO_ADDR
7552: LD_EXP 34
7556: PUSH
7557: FOR_TO
7558: IFFALSE 7598
// if not side_positions [ i ] then
7560: LD_EXP 34
7564: PUSH
7565: LD_VAR 0 2
7569: ARRAY
7570: NOT
7571: IFFALSE 7596
// defeated = replace ( defeated , i , true ) ;
7573: LD_ADDR_LOC 14
7577: PUSH
7578: LD_LOC 14
7582: PPUSH
7583: LD_VAR 0 2
7587: PPUSH
7588: LD_INT 1
7590: PPUSH
7591: CALL_OW 1
7595: ST_TO_ADDR
7596: GO 7557
7598: POP
7599: POP
// end ;
7600: LD_VAR 0 1
7604: RET
// function CanWinLoose ; begin
7605: LD_INT 0
7607: PPUSH
// Result := true ;
7608: LD_ADDR_VAR 0 1
7612: PUSH
7613: LD_INT 1
7615: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7616: CALL_OW 518
7620: PUSH
7621: CALL_OW 519
7625: PUSH
7626: LD_INT 0
7628: GREATER
7629: AND
7630: IFFALSE 7640
// Result := false ;
7632: LD_ADDR_VAR 0 1
7636: PUSH
7637: LD_INT 0
7639: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7640: CALL_OW 531
7644: PUSH
7645: CALL_OW 519
7649: PUSH
7650: LD_INT 1
7652: GREATER
7653: AND
7654: IFFALSE 7664
// Result := false ;
7656: LD_ADDR_VAR 0 1
7660: PUSH
7661: LD_INT 0
7663: ST_TO_ADDR
// end ;
7664: LD_VAR 0 1
7668: RET
// export function HasPower ( i ) ; var k , h ; begin
7669: LD_INT 0
7671: PPUSH
7672: PPUSH
7673: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7674: LD_VAR 0 1
7678: PPUSH
7679: CALL_OW 108
7683: NOT
7684: PUSH
7685: LD_EXP 33
7689: PUSH
7690: LD_VAR 0 1
7694: ARRAY
7695: NOT
7696: AND
7697: PUSH
7698: LD_OWVAR 4
7702: AND
7703: IFFALSE 7715
// begin result = false ;
7705: LD_ADDR_VAR 0 2
7709: PUSH
7710: LD_INT 0
7712: ST_TO_ADDR
// end else
7713: GO 8010
// case def_win_rules of 0 :
7715: LD_EXP 30
7719: PUSH
7720: LD_INT 0
7722: DOUBLE
7723: EQUAL
7724: IFTRUE 7728
7726: GO 7891
7728: POP
// if def_people_respawning then
7729: LD_EXP 11
7733: IFFALSE 7824
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7735: LD_ADDR_VAR 0 2
7739: PUSH
7740: LD_INT 22
7742: PUSH
7743: LD_VAR 0 1
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: LD_INT 2
7754: PUSH
7755: LD_INT 21
7757: PUSH
7758: LD_INT 1
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 33
7767: PUSH
7768: LD_INT 3
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 33
7777: PUSH
7778: LD_INT 5
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 30
7787: PUSH
7788: LD_INT 0
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 30
7797: PUSH
7798: LD_INT 1
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 69
7821: ST_TO_ADDR
7822: GO 7889
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
7824: LD_ADDR_VAR 0 2
7828: PUSH
7829: LD_INT 22
7831: PUSH
7832: LD_VAR 0 1
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 2
7843: PUSH
7844: LD_INT 21
7846: PUSH
7847: LD_INT 1
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 33
7856: PUSH
7857: LD_INT 3
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: PUSH
7864: LD_INT 33
7866: PUSH
7867: LD_INT 5
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: PPUSH
7884: CALL_OW 69
7888: ST_TO_ADDR
7889: GO 8010
7891: LD_INT 1
7893: DOUBLE
7894: EQUAL
7895: IFTRUE 7899
7897: GO 7938
7899: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
7900: LD_ADDR_VAR 0 2
7904: PUSH
7905: LD_INT 22
7907: PUSH
7908: LD_VAR 0 1
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 21
7919: PUSH
7920: LD_INT 1
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: PUSH
7927: EMPTY
7928: LIST
7929: LIST
7930: PPUSH
7931: CALL_OW 69
7935: ST_TO_ADDR
7936: GO 8010
7938: LD_INT 2
7940: DOUBLE
7941: EQUAL
7942: IFTRUE 7946
7944: GO 8009
7946: POP
// begin h = false ;
7947: LD_ADDR_VAR 0 4
7951: PUSH
7952: LD_INT 0
7954: ST_TO_ADDR
// for k in heroes [ i ] do
7955: LD_ADDR_VAR 0 3
7959: PUSH
7960: LD_EXP 45
7964: PUSH
7965: LD_VAR 0 1
7969: ARRAY
7970: PUSH
7971: FOR_IN
7972: IFFALSE 7995
// if IsLive ( k ) then
7974: LD_VAR 0 3
7978: PPUSH
7979: CALL_OW 300
7983: IFFALSE 7993
// h = true ;
7985: LD_ADDR_VAR 0 4
7989: PUSH
7990: LD_INT 1
7992: ST_TO_ADDR
7993: GO 7971
7995: POP
7996: POP
// Result := h ;
7997: LD_ADDR_VAR 0 2
8001: PUSH
8002: LD_VAR 0 4
8006: ST_TO_ADDR
// end ; end ;
8007: GO 8010
8009: POP
// end ;
8010: LD_VAR 0 2
8014: RET
// function AlliedSides ( i , j ) ; begin
8015: LD_INT 0
8017: PPUSH
// Result := false ;
8018: LD_ADDR_VAR 0 3
8022: PUSH
8023: LD_INT 0
8025: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8026: LD_VAR 0 1
8030: PPUSH
8031: LD_VAR 0 2
8035: PPUSH
8036: CALL_OW 81
8040: PUSH
8041: LD_INT 1
8043: EQUAL
8044: PUSH
8045: LD_VAR 0 2
8049: PPUSH
8050: LD_VAR 0 1
8054: PPUSH
8055: CALL_OW 81
8059: PUSH
8060: LD_INT 1
8062: EQUAL
8063: AND
8064: PUSH
8065: LD_VAR 0 1
8069: PPUSH
8070: CALL_OW 83
8074: AND
8075: PUSH
8076: LD_VAR 0 2
8080: PPUSH
8081: CALL_OW 83
8085: AND
8086: IFFALSE 8096
// Result := true ;
8088: LD_ADDR_VAR 0 3
8092: PUSH
8093: LD_INT 1
8095: ST_TO_ADDR
// end ;
8096: LD_VAR 0 3
8100: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8101: CALL 7605 0 0
8105: PUSH
8106: LD_LOC 15
8110: NOT
8111: AND
8112: IFFALSE 8128
8114: GO 8116
8116: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8117: LD_ADDR_EXP 54
8121: PUSH
8122: LD_STRING #Player-Ended
8124: PUSH
8125: EMPTY
8126: LIST
8127: ST_TO_ADDR
8128: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8129: CALL 7605 0 0
8133: PUSH
8134: LD_LOC 15
8138: AND
8139: IFFALSE 8148
8141: GO 8143
8143: DISABLE
// YouLostInMultiplayer ;
8144: CALL_OW 107
8148: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8149: CALL 7605 0 0
8153: NOT
8154: PUSH
8155: CALL_OW 531
8159: NOT
8160: AND
8161: IFFALSE 8177
8163: GO 8165
8165: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8166: LD_ADDR_EXP 54
8170: PUSH
8171: LD_STRING #server-wait
8173: PUSH
8174: EMPTY
8175: LIST
8176: ST_TO_ADDR
8177: END
// every 100 trigger IAmSpec do
8178: CALL_OW 531
8182: IFFALSE 8198
8184: GO 8186
8186: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8187: LD_ADDR_EXP 54
8191: PUSH
8192: LD_STRING #Player-IAmSpec
8194: PUSH
8195: EMPTY
8196: LIST
8197: ST_TO_ADDR
8198: END
// every 100 trigger GameEnded and IAmSpec do
8199: LD_LOC 15
8203: PUSH
8204: CALL_OW 531
8208: AND
8209: IFFALSE 8218
8211: GO 8213
8213: DISABLE
// YouLostInMultiplayer ;
8214: CALL_OW 107
8218: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8219: CALL 7605 0 0
8223: PUSH
8224: LD_LOC 15
8228: NOT
8229: AND
8230: IFFALSE 8246
8232: GO 8234
8234: DISABLE
// WaitServerStrings = [ $player-win ] ;
8235: LD_ADDR_EXP 54
8239: PUSH
8240: LD_STRING $player-win
8242: PUSH
8243: EMPTY
8244: LIST
8245: ST_TO_ADDR
8246: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8247: CALL 7605 0 0
8251: PUSH
8252: LD_LOC 15
8256: AND
8257: IFFALSE 8281
8259: GO 8261
8261: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8262: LD_EXP 35
8266: PUSH
8267: LD_OWVAR 7
8271: ARRAY
8272: PPUSH
8273: CALL 7276 0 1
// YouWinInMultiplayer ;
8277: CALL_OW 106
// end ;
8281: END
// every 100 trigger isEditor marked 401 do
8282: LD_OWVAR 84
8286: IFFALSE 8302
8288: GO 8290
8290: DISABLE
// Debug_Strings = [ You won ] ;
8291: LD_ADDR_OWVAR 48
8295: PUSH
8296: LD_STRING You won
8298: PUSH
8299: EMPTY
8300: LIST
8301: ST_TO_ADDR
8302: END
// every 100 trigger isEditor marked 400 do
8303: LD_OWVAR 84
8307: IFFALSE 8323
8309: GO 8311
8311: DISABLE
// Debug_Strings = [ You loss ] ;
8312: LD_ADDR_OWVAR 48
8316: PUSH
8317: LD_STRING You loss
8319: PUSH
8320: EMPTY
8321: LIST
8322: ST_TO_ADDR
8323: END
// every 100 marked 98 do var i , un ;
8324: GO 8326
8326: DISABLE
8327: LD_INT 0
8329: PPUSH
8330: PPUSH
// begin for i = 1 to side_positions do
8331: LD_ADDR_VAR 0 1
8335: PUSH
8336: DOUBLE
8337: LD_INT 1
8339: DEC
8340: ST_TO_ADDR
8341: LD_EXP 34
8345: PUSH
8346: FOR_TO
8347: IFFALSE 8434
// begin if side_positions [ i ] then
8349: LD_EXP 34
8353: PUSH
8354: LD_VAR 0 1
8358: ARRAY
8359: IFFALSE 8432
// if not HasPower ( i ) and not defeated [ i ] then
8361: LD_VAR 0 1
8365: PPUSH
8366: CALL 7669 0 1
8370: NOT
8371: PUSH
8372: LD_LOC 14
8376: PUSH
8377: LD_VAR 0 1
8381: ARRAY
8382: NOT
8383: AND
8384: IFFALSE 8432
// begin defeated = replace ( defeated , i , true ) ;
8386: LD_ADDR_LOC 14
8390: PUSH
8391: LD_LOC 14
8395: PPUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: LD_INT 1
8403: PPUSH
8404: CALL_OW 1
8408: ST_TO_ADDR
// if i = mp_player_side then
8409: LD_VAR 0 1
8413: PUSH
8414: LD_OWVAR 7
8418: EQUAL
8419: IFFALSE 8432
// begin Multiplayer_Loose_Message ;
8421: CALL_OW 521
// SetPlayerSpectator ( ) ;
8425: CALL_OW 572
// enable ( 400 ) ;
8429: LD_INT 400
8431: ENABLE_MARKED
// end ; end ; end ;
8432: GO 8346
8434: POP
8435: POP
// DidGameEnd ;
8436: CALL 8451 0 0
// if not GameEnded then
8440: LD_LOC 15
8444: NOT
8445: IFFALSE 8448
// enable ;
8447: ENABLE
// end ;
8448: PPOPN 2
8450: END
// function DidGameEnd ; var i , k , enemy ; begin
8451: LD_INT 0
8453: PPUSH
8454: PPUSH
8455: PPUSH
8456: PPUSH
// enemy = [ ] ;
8457: LD_ADDR_VAR 0 4
8461: PUSH
8462: EMPTY
8463: ST_TO_ADDR
// for i = 1 to side_positions do
8464: LD_ADDR_VAR 0 2
8468: PUSH
8469: DOUBLE
8470: LD_INT 1
8472: DEC
8473: ST_TO_ADDR
8474: LD_EXP 34
8478: PUSH
8479: FOR_TO
8480: IFFALSE 8574
// if not defeated [ i ] then
8482: LD_LOC 14
8486: PUSH
8487: LD_VAR 0 2
8491: ARRAY
8492: NOT
8493: IFFALSE 8572
// for k = 1 to side_positions do
8495: LD_ADDR_VAR 0 3
8499: PUSH
8500: DOUBLE
8501: LD_INT 1
8503: DEC
8504: ST_TO_ADDR
8505: LD_EXP 34
8509: PUSH
8510: FOR_TO
8511: IFFALSE 8570
// if not defeated [ k ] then
8513: LD_LOC 14
8517: PUSH
8518: LD_VAR 0 3
8522: ARRAY
8523: NOT
8524: IFFALSE 8568
// if not AlliedSides ( i , k ) then
8526: LD_VAR 0 2
8530: PPUSH
8531: LD_VAR 0 3
8535: PPUSH
8536: CALL 8015 0 2
8540: NOT
8541: IFFALSE 8568
// enemy = enemy ^ [ i , k ] ;
8543: LD_ADDR_VAR 0 4
8547: PUSH
8548: LD_VAR 0 4
8552: PUSH
8553: LD_VAR 0 2
8557: PUSH
8558: LD_VAR 0 3
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: ADD
8567: ST_TO_ADDR
8568: GO 8510
8570: POP
8571: POP
8572: GO 8479
8574: POP
8575: POP
// if not enemy then
8576: LD_VAR 0 4
8580: NOT
8581: IFFALSE 8607
// begin GameEnded = true ;
8583: LD_ADDR_LOC 15
8587: PUSH
8588: LD_INT 1
8590: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8591: LD_LOC 14
8595: PUSH
8596: LD_OWVAR 7
8600: ARRAY
8601: NOT
8602: IFFALSE 8607
// enable ( 401 ) ;
8604: LD_INT 401
8606: ENABLE_MARKED
// end ; end ;
8607: LD_VAR 0 1
8611: RET
// function unfog ; var k , friends ; begin
8612: LD_INT 0
8614: PPUSH
8615: PPUSH
8616: PPUSH
// for k = 1 to side_positions do
8617: LD_ADDR_VAR 0 2
8621: PUSH
8622: DOUBLE
8623: LD_INT 1
8625: DEC
8626: ST_TO_ADDR
8627: LD_EXP 34
8631: PUSH
8632: FOR_TO
8633: IFFALSE 8689
// if not defeated [ k ] then
8635: LD_LOC 14
8639: PUSH
8640: LD_VAR 0 2
8644: ARRAY
8645: NOT
8646: IFFALSE 8687
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8648: LD_OWVAR 7
8652: PPUSH
8653: LD_VAR 0 2
8657: PPUSH
8658: CALL_OW 81
8662: PUSH
8663: LD_INT 1
8665: PUSH
8666: EMPTY
8667: LIST
8668: IN
8669: IFFALSE 8687
// friends = friends ^ k ;
8671: LD_ADDR_VAR 0 3
8675: PUSH
8676: LD_VAR 0 3
8680: PUSH
8681: LD_VAR 0 2
8685: ADD
8686: ST_TO_ADDR
8687: GO 8632
8689: POP
8690: POP
// if not friends then
8691: LD_VAR 0 3
8695: NOT
8696: IFFALSE 8710
// begin SetPlayerSpectator ( ) ;
8698: CALL_OW 572
// unfoged = true ;
8702: LD_ADDR_LOC 16
8706: PUSH
8707: LD_INT 1
8709: ST_TO_ADDR
// end ; end ;
8710: LD_VAR 0 1
8714: RET
// export function MakeGameEnd ; begin
8715: LD_INT 0
8717: PPUSH
// SetPlayerSpectator ( ) ;
8718: CALL_OW 572
// unfoged = true ;
8722: LD_ADDR_LOC 16
8726: PUSH
8727: LD_INT 1
8729: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8730: LD_INT 175
8732: PPUSH
8733: CALL_OW 67
// GameEnded = true ;
8737: LD_ADDR_LOC 15
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// end ;
8745: LD_VAR 0 1
8749: RET
// export function GetGameEnded ; begin
8750: LD_INT 0
8752: PPUSH
// result = GameEnded ;
8753: LD_ADDR_VAR 0 1
8757: PUSH
8758: LD_LOC 15
8762: ST_TO_ADDR
// end ; end_of_file
8763: LD_VAR 0 1
8767: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8768: LD_INT 0
8770: PPUSH
8771: PPUSH
8772: PPUSH
// for side = 1 to 8 do
8773: LD_ADDR_VAR 0 2
8777: PUSH
8778: DOUBLE
8779: LD_INT 1
8781: DEC
8782: ST_TO_ADDR
8783: LD_INT 8
8785: PUSH
8786: FOR_TO
8787: IFFALSE 8908
// begin for i = 1 to 72 do
8789: LD_ADDR_VAR 0 3
8793: PUSH
8794: DOUBLE
8795: LD_INT 1
8797: DEC
8798: ST_TO_ADDR
8799: LD_INT 72
8801: PUSH
8802: FOR_TO
8803: IFFALSE 8834
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8805: LD_VAR 0 3
8809: PPUSH
8810: LD_VAR 0 2
8814: PPUSH
8815: LD_INT 0
8817: PPUSH
8818: LD_VAR 0 3
8822: PPUSH
8823: CALL_OW 565
8827: PPUSH
8828: CALL_OW 322
8832: GO 8802
8834: POP
8835: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8836: LD_INT 73
8838: PPUSH
8839: LD_VAR 0 2
8843: PPUSH
8844: LD_INT 0
8846: PPUSH
8847: LD_INT 25
8849: PPUSH
8850: CALL_OW 565
8854: PPUSH
8855: CALL_OW 322
// for i = 0 to 40 do
8859: LD_ADDR_VAR 0 3
8863: PUSH
8864: DOUBLE
8865: LD_INT 0
8867: DEC
8868: ST_TO_ADDR
8869: LD_INT 40
8871: PUSH
8872: FOR_TO
8873: IFFALSE 8904
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8875: LD_VAR 0 3
8879: PPUSH
8880: LD_VAR 0 2
8884: PPUSH
8885: LD_INT 1
8887: PPUSH
8888: LD_VAR 0 3
8892: PPUSH
8893: CALL_OW 565
8897: PPUSH
8898: CALL_OW 324
8902: GO 8872
8904: POP
8905: POP
// end ;
8906: GO 8786
8908: POP
8909: POP
// end ;
8910: LD_VAR 0 1
8914: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8915: LD_INT 0
8917: PPUSH
8918: PPUSH
8919: PPUSH
// for side = 1 to 8 do
8920: LD_ADDR_VAR 0 3
8924: PUSH
8925: DOUBLE
8926: LD_INT 1
8928: DEC
8929: ST_TO_ADDR
8930: LD_INT 8
8932: PUSH
8933: FOR_TO
8934: IFFALSE 12930
// begin for i = 1 to 73 do
8936: LD_ADDR_VAR 0 4
8940: PUSH
8941: DOUBLE
8942: LD_INT 1
8944: DEC
8945: ST_TO_ADDR
8946: LD_INT 73
8948: PUSH
8949: FOR_TO
8950: IFFALSE 8971
// SetTech ( i , side , state_disabled ) ;
8952: LD_VAR 0 4
8956: PPUSH
8957: LD_VAR 0 3
8961: PPUSH
8962: LD_INT 0
8964: PPUSH
8965: CALL_OW 322
8969: GO 8949
8971: POP
8972: POP
// for i = 0 to 40 do
8973: LD_ADDR_VAR 0 4
8977: PUSH
8978: DOUBLE
8979: LD_INT 0
8981: DEC
8982: ST_TO_ADDR
8983: LD_INT 40
8985: PUSH
8986: FOR_TO
8987: IFFALSE 9008
// SetRestrict ( i , side , false ) ;
8989: LD_VAR 0 4
8993: PPUSH
8994: LD_VAR 0 3
8998: PPUSH
8999: LD_INT 0
9001: PPUSH
9002: CALL_OW 324
9006: GO 8986
9008: POP
9009: POP
// case level of 1 :
9010: LD_VAR 0 1
9014: PUSH
9015: LD_INT 1
9017: DOUBLE
9018: EQUAL
9019: IFTRUE 9023
9021: GO 9176
9023: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9024: LD_INT 35
9026: PPUSH
9027: LD_VAR 0 3
9031: PPUSH
9032: LD_INT 1
9034: PPUSH
9035: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9039: LD_INT 45
9041: PPUSH
9042: LD_VAR 0 3
9046: PPUSH
9047: LD_INT 1
9049: PPUSH
9050: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9054: LD_INT 46
9056: PPUSH
9057: LD_VAR 0 3
9061: PPUSH
9062: LD_INT 1
9064: PPUSH
9065: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9069: LD_INT 47
9071: PPUSH
9072: LD_VAR 0 3
9076: PPUSH
9077: LD_INT 1
9079: PPUSH
9080: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9084: LD_INT 0
9086: PPUSH
9087: LD_VAR 0 3
9091: PPUSH
9092: LD_INT 1
9094: PPUSH
9095: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9099: LD_INT 2
9101: PPUSH
9102: LD_VAR 0 3
9106: PPUSH
9107: LD_INT 1
9109: PPUSH
9110: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9114: LD_INT 4
9116: PPUSH
9117: LD_VAR 0 3
9121: PPUSH
9122: LD_INT 1
9124: PPUSH
9125: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9129: LD_INT 6
9131: PPUSH
9132: LD_VAR 0 3
9136: PPUSH
9137: LD_INT 1
9139: PPUSH
9140: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9144: LD_INT 29
9146: PPUSH
9147: LD_VAR 0 3
9151: PPUSH
9152: LD_INT 1
9154: PPUSH
9155: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9159: LD_INT 31
9161: PPUSH
9162: LD_VAR 0 3
9166: PPUSH
9167: LD_INT 1
9169: PPUSH
9170: CALL_OW 324
// end ; 2 :
9174: GO 12928
9176: LD_INT 2
9178: DOUBLE
9179: EQUAL
9180: IFTRUE 9184
9182: GO 9382
9184: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9185: LD_INT 35
9187: PPUSH
9188: LD_VAR 0 3
9192: PPUSH
9193: LD_INT 1
9195: PPUSH
9196: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9200: LD_INT 45
9202: PPUSH
9203: LD_VAR 0 3
9207: PPUSH
9208: LD_INT 1
9210: PPUSH
9211: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9215: LD_INT 46
9217: PPUSH
9218: LD_VAR 0 3
9222: PPUSH
9223: LD_INT 1
9225: PPUSH
9226: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9230: LD_INT 47
9232: PPUSH
9233: LD_VAR 0 3
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9245: LD_INT 1
9247: PPUSH
9248: LD_VAR 0 3
9252: PPUSH
9253: LD_INT 1
9255: PPUSH
9256: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9260: LD_INT 2
9262: PPUSH
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_INT 1
9270: PPUSH
9271: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9275: LD_INT 11
9277: PPUSH
9278: LD_VAR 0 3
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9290: LD_INT 0
9292: PPUSH
9293: LD_VAR 0 3
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9305: LD_INT 2
9307: PPUSH
9308: LD_VAR 0 3
9312: PPUSH
9313: LD_INT 1
9315: PPUSH
9316: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9320: LD_INT 4
9322: PPUSH
9323: LD_VAR 0 3
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9335: LD_INT 6
9337: PPUSH
9338: LD_VAR 0 3
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9350: LD_INT 29
9352: PPUSH
9353: LD_VAR 0 3
9357: PPUSH
9358: LD_INT 1
9360: PPUSH
9361: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9365: LD_INT 31
9367: PPUSH
9368: LD_VAR 0 3
9372: PPUSH
9373: LD_INT 1
9375: PPUSH
9376: CALL_OW 324
// end ; 3 :
9380: GO 12928
9382: LD_INT 3
9384: DOUBLE
9385: EQUAL
9386: IFTRUE 9390
9388: GO 9843
9390: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9391: LD_INT 35
9393: PPUSH
9394: LD_VAR 0 3
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9406: LD_INT 45
9408: PPUSH
9409: LD_VAR 0 3
9413: PPUSH
9414: LD_INT 1
9416: PPUSH
9417: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9421: LD_INT 46
9423: PPUSH
9424: LD_VAR 0 3
9428: PPUSH
9429: LD_INT 1
9431: PPUSH
9432: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9436: LD_INT 47
9438: PPUSH
9439: LD_VAR 0 3
9443: PPUSH
9444: LD_INT 1
9446: PPUSH
9447: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9451: LD_INT 1
9453: PPUSH
9454: LD_VAR 0 3
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9466: LD_INT 2
9468: PPUSH
9469: LD_VAR 0 3
9473: PPUSH
9474: LD_INT 1
9476: PPUSH
9477: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9481: LD_INT 11
9483: PPUSH
9484: LD_VAR 0 3
9488: PPUSH
9489: LD_INT 1
9491: PPUSH
9492: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9496: LD_INT 48
9498: PPUSH
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9511: LD_INT 69
9513: PPUSH
9514: LD_VAR 0 3
9518: PPUSH
9519: LD_INT 1
9521: PPUSH
9522: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9526: LD_INT 39
9528: PPUSH
9529: LD_VAR 0 3
9533: PPUSH
9534: LD_INT 1
9536: PPUSH
9537: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9541: LD_INT 43
9543: PPUSH
9544: LD_VAR 0 3
9548: PPUSH
9549: LD_INT 1
9551: PPUSH
9552: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9556: LD_INT 51
9558: PPUSH
9559: LD_VAR 0 3
9563: PPUSH
9564: LD_INT 1
9566: PPUSH
9567: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9571: LD_INT 6
9573: PPUSH
9574: LD_VAR 0 3
9578: PPUSH
9579: LD_INT 1
9581: PPUSH
9582: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9586: LD_INT 0
9588: PPUSH
9589: LD_VAR 0 3
9593: PPUSH
9594: LD_INT 1
9596: PPUSH
9597: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9601: LD_INT 2
9603: PPUSH
9604: LD_VAR 0 3
9608: PPUSH
9609: LD_INT 1
9611: PPUSH
9612: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9616: LD_INT 3
9618: PPUSH
9619: LD_VAR 0 3
9623: PPUSH
9624: LD_INT 1
9626: PPUSH
9627: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9631: LD_INT 4
9633: PPUSH
9634: LD_VAR 0 3
9638: PPUSH
9639: LD_INT 1
9641: PPUSH
9642: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9646: LD_INT 6
9648: PPUSH
9649: LD_VAR 0 3
9653: PPUSH
9654: LD_INT 1
9656: PPUSH
9657: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9661: LD_INT 7
9663: PPUSH
9664: LD_VAR 0 3
9668: PPUSH
9669: LD_INT 1
9671: PPUSH
9672: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9676: LD_INT 8
9678: PPUSH
9679: LD_VAR 0 3
9683: PPUSH
9684: LD_INT 1
9686: PPUSH
9687: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9691: LD_INT 10
9693: PPUSH
9694: LD_VAR 0 3
9698: PPUSH
9699: LD_INT 1
9701: PPUSH
9702: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9706: LD_INT 15
9708: PPUSH
9709: LD_VAR 0 3
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9721: LD_INT 16
9723: PPUSH
9724: LD_VAR 0 3
9728: PPUSH
9729: LD_INT 1
9731: PPUSH
9732: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9736: LD_INT 17
9738: PPUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9751: LD_INT 20
9753: PPUSH
9754: LD_VAR 0 3
9758: PPUSH
9759: LD_INT 1
9761: PPUSH
9762: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9766: LD_INT 26
9768: PPUSH
9769: LD_VAR 0 3
9773: PPUSH
9774: LD_INT 1
9776: PPUSH
9777: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9781: LD_INT 27
9783: PPUSH
9784: LD_VAR 0 3
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9796: LD_INT 29
9798: PPUSH
9799: LD_VAR 0 3
9803: PPUSH
9804: LD_INT 1
9806: PPUSH
9807: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9811: LD_INT 31
9813: PPUSH
9814: LD_VAR 0 3
9818: PPUSH
9819: LD_INT 1
9821: PPUSH
9822: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9826: LD_INT 32
9828: PPUSH
9829: LD_VAR 0 3
9833: PPUSH
9834: LD_INT 1
9836: PPUSH
9837: CALL_OW 324
// end ; 4 :
9841: GO 12928
9843: LD_INT 4
9845: DOUBLE
9846: EQUAL
9847: IFTRUE 9851
9849: GO 10799
9851: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9852: LD_INT 35
9854: PPUSH
9855: LD_VAR 0 3
9859: PPUSH
9860: LD_INT 1
9862: PPUSH
9863: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9867: LD_INT 45
9869: PPUSH
9870: LD_VAR 0 3
9874: PPUSH
9875: LD_INT 1
9877: PPUSH
9878: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9882: LD_INT 46
9884: PPUSH
9885: LD_VAR 0 3
9889: PPUSH
9890: LD_INT 1
9892: PPUSH
9893: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9897: LD_INT 47
9899: PPUSH
9900: LD_VAR 0 3
9904: PPUSH
9905: LD_INT 1
9907: PPUSH
9908: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9912: LD_INT 1
9914: PPUSH
9915: LD_VAR 0 3
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9927: LD_INT 2
9929: PPUSH
9930: LD_VAR 0 3
9934: PPUSH
9935: LD_INT 1
9937: PPUSH
9938: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9942: LD_INT 11
9944: PPUSH
9945: LD_VAR 0 3
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9957: LD_INT 20
9959: PPUSH
9960: LD_VAR 0 3
9964: PPUSH
9965: LD_INT 1
9967: PPUSH
9968: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9972: LD_INT 48
9974: PPUSH
9975: LD_VAR 0 3
9979: PPUSH
9980: LD_INT 1
9982: PPUSH
9983: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9987: LD_INT 49
9989: PPUSH
9990: LD_VAR 0 3
9994: PPUSH
9995: LD_INT 1
9997: PPUSH
9998: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10002: LD_INT 69
10004: PPUSH
10005: LD_VAR 0 3
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10017: LD_INT 39
10019: PPUSH
10020: LD_VAR 0 3
10024: PPUSH
10025: LD_INT 1
10027: PPUSH
10028: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10032: LD_INT 34
10034: PPUSH
10035: LD_VAR 0 3
10039: PPUSH
10040: LD_INT 1
10042: PPUSH
10043: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10047: LD_INT 42
10049: PPUSH
10050: LD_VAR 0 3
10054: PPUSH
10055: LD_INT 1
10057: PPUSH
10058: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10062: LD_INT 44
10064: PPUSH
10065: LD_VAR 0 3
10069: PPUSH
10070: LD_INT 1
10072: PPUSH
10073: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10077: LD_INT 41
10079: PPUSH
10080: LD_VAR 0 3
10084: PPUSH
10085: LD_INT 1
10087: PPUSH
10088: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10092: LD_INT 43
10094: PPUSH
10095: LD_VAR 0 3
10099: PPUSH
10100: LD_INT 1
10102: PPUSH
10103: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10107: LD_INT 70
10109: PPUSH
10110: LD_VAR 0 3
10114: PPUSH
10115: LD_INT 1
10117: PPUSH
10118: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10122: LD_INT 51
10124: PPUSH
10125: LD_VAR 0 3
10129: PPUSH
10130: LD_INT 1
10132: PPUSH
10133: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10137: LD_INT 52
10139: PPUSH
10140: LD_VAR 0 3
10144: PPUSH
10145: LD_INT 1
10147: PPUSH
10148: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10152: LD_INT 6
10154: PPUSH
10155: LD_VAR 0 3
10159: PPUSH
10160: LD_INT 1
10162: PPUSH
10163: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10167: LD_INT 15
10169: PPUSH
10170: LD_VAR 0 3
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10182: LD_INT 7
10184: PPUSH
10185: LD_VAR 0 3
10189: PPUSH
10190: LD_INT 1
10192: PPUSH
10193: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10197: LD_INT 12
10199: PPUSH
10200: LD_VAR 0 3
10204: PPUSH
10205: LD_INT 1
10207: PPUSH
10208: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10212: LD_INT 18
10214: PPUSH
10215: LD_VAR 0 3
10219: PPUSH
10220: LD_INT 1
10222: PPUSH
10223: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10227: LD_INT 60
10229: PPUSH
10230: LD_VAR 0 3
10234: PPUSH
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10242: LD_INT 9
10244: PPUSH
10245: LD_VAR 0 3
10249: PPUSH
10250: LD_INT 1
10252: PPUSH
10253: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10257: LD_INT 30
10259: PPUSH
10260: LD_VAR 0 3
10264: PPUSH
10265: LD_INT 1
10267: PPUSH
10268: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10272: LD_INT 37
10274: PPUSH
10275: LD_VAR 0 3
10279: PPUSH
10280: LD_INT 1
10282: PPUSH
10283: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10287: LD_INT 5
10289: PPUSH
10290: LD_VAR 0 3
10294: PPUSH
10295: LD_INT 1
10297: PPUSH
10298: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10302: LD_INT 66
10304: PPUSH
10305: LD_VAR 0 3
10309: PPUSH
10310: LD_INT 1
10312: PPUSH
10313: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10317: LD_INT 21
10319: PPUSH
10320: LD_VAR 0 3
10324: PPUSH
10325: LD_INT 1
10327: PPUSH
10328: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10332: LD_INT 22
10334: PPUSH
10335: LD_VAR 0 3
10339: PPUSH
10340: LD_INT 1
10342: PPUSH
10343: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10347: LD_INT 54
10349: PPUSH
10350: LD_VAR 0 3
10354: PPUSH
10355: LD_INT 1
10357: PPUSH
10358: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10362: LD_INT 0
10364: PPUSH
10365: LD_VAR 0 3
10369: PPUSH
10370: LD_INT 1
10372: PPUSH
10373: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10377: LD_INT 1
10379: PPUSH
10380: LD_VAR 0 3
10384: PPUSH
10385: LD_INT 1
10387: PPUSH
10388: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10392: LD_INT 2
10394: PPUSH
10395: LD_VAR 0 3
10399: PPUSH
10400: LD_INT 1
10402: PPUSH
10403: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10407: LD_INT 3
10409: PPUSH
10410: LD_VAR 0 3
10414: PPUSH
10415: LD_INT 1
10417: PPUSH
10418: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10422: LD_INT 4
10424: PPUSH
10425: LD_VAR 0 3
10429: PPUSH
10430: LD_INT 1
10432: PPUSH
10433: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10437: LD_INT 5
10439: PPUSH
10440: LD_VAR 0 3
10444: PPUSH
10445: LD_INT 1
10447: PPUSH
10448: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10452: LD_INT 6
10454: PPUSH
10455: LD_VAR 0 3
10459: PPUSH
10460: LD_INT 1
10462: PPUSH
10463: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10467: LD_INT 7
10469: PPUSH
10470: LD_VAR 0 3
10474: PPUSH
10475: LD_INT 1
10477: PPUSH
10478: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10482: LD_INT 8
10484: PPUSH
10485: LD_VAR 0 3
10489: PPUSH
10490: LD_INT 1
10492: PPUSH
10493: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10497: LD_INT 10
10499: PPUSH
10500: LD_VAR 0 3
10504: PPUSH
10505: LD_INT 1
10507: PPUSH
10508: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10512: LD_INT 11
10514: PPUSH
10515: LD_VAR 0 3
10519: PPUSH
10520: LD_INT 1
10522: PPUSH
10523: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10527: LD_INT 12
10529: PPUSH
10530: LD_VAR 0 3
10534: PPUSH
10535: LD_INT 1
10537: PPUSH
10538: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10542: LD_INT 13
10544: PPUSH
10545: LD_VAR 0 3
10549: PPUSH
10550: LD_INT 1
10552: PPUSH
10553: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10557: LD_INT 14
10559: PPUSH
10560: LD_VAR 0 3
10564: PPUSH
10565: LD_INT 1
10567: PPUSH
10568: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10572: LD_INT 15
10574: PPUSH
10575: LD_VAR 0 3
10579: PPUSH
10580: LD_INT 1
10582: PPUSH
10583: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10587: LD_INT 16
10589: PPUSH
10590: LD_VAR 0 3
10594: PPUSH
10595: LD_INT 1
10597: PPUSH
10598: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10602: LD_INT 17
10604: PPUSH
10605: LD_VAR 0 3
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10617: LD_INT 19
10619: PPUSH
10620: LD_VAR 0 3
10624: PPUSH
10625: LD_INT 1
10627: PPUSH
10628: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10632: LD_INT 20
10634: PPUSH
10635: LD_VAR 0 3
10639: PPUSH
10640: LD_INT 1
10642: PPUSH
10643: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10647: LD_INT 21
10649: PPUSH
10650: LD_VAR 0 3
10654: PPUSH
10655: LD_INT 1
10657: PPUSH
10658: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10662: LD_INT 23
10664: PPUSH
10665: LD_VAR 0 3
10669: PPUSH
10670: LD_INT 1
10672: PPUSH
10673: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10677: LD_INT 26
10679: PPUSH
10680: LD_VAR 0 3
10684: PPUSH
10685: LD_INT 1
10687: PPUSH
10688: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10692: LD_INT 27
10694: PPUSH
10695: LD_VAR 0 3
10699: PPUSH
10700: LD_INT 1
10702: PPUSH
10703: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10707: LD_INT 28
10709: PPUSH
10710: LD_VAR 0 3
10714: PPUSH
10715: LD_INT 1
10717: PPUSH
10718: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10722: LD_INT 29
10724: PPUSH
10725: LD_VAR 0 3
10729: PPUSH
10730: LD_INT 1
10732: PPUSH
10733: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10737: LD_INT 30
10739: PPUSH
10740: LD_VAR 0 3
10744: PPUSH
10745: LD_INT 1
10747: PPUSH
10748: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10752: LD_INT 31
10754: PPUSH
10755: LD_VAR 0 3
10759: PPUSH
10760: LD_INT 1
10762: PPUSH
10763: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10767: LD_INT 32
10769: PPUSH
10770: LD_VAR 0 3
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10782: LD_INT 36
10784: PPUSH
10785: LD_VAR 0 3
10789: PPUSH
10790: LD_INT 1
10792: PPUSH
10793: CALL_OW 324
// end ; 5 :
10797: GO 12928
10799: LD_INT 5
10801: DOUBLE
10802: EQUAL
10803: IFTRUE 10807
10805: GO 11920
10807: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10808: LD_INT 35
10810: PPUSH
10811: LD_VAR 0 3
10815: PPUSH
10816: LD_INT 1
10818: PPUSH
10819: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10823: LD_INT 45
10825: PPUSH
10826: LD_VAR 0 3
10830: PPUSH
10831: LD_INT 1
10833: PPUSH
10834: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10838: LD_INT 46
10840: PPUSH
10841: LD_VAR 0 3
10845: PPUSH
10846: LD_INT 1
10848: PPUSH
10849: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10853: LD_INT 47
10855: PPUSH
10856: LD_VAR 0 3
10860: PPUSH
10861: LD_INT 1
10863: PPUSH
10864: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10868: LD_INT 1
10870: PPUSH
10871: LD_VAR 0 3
10875: PPUSH
10876: LD_INT 1
10878: PPUSH
10879: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10883: LD_INT 2
10885: PPUSH
10886: LD_VAR 0 3
10890: PPUSH
10891: LD_INT 1
10893: PPUSH
10894: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10898: LD_INT 11
10900: PPUSH
10901: LD_VAR 0 3
10905: PPUSH
10906: LD_INT 1
10908: PPUSH
10909: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10913: LD_INT 20
10915: PPUSH
10916: LD_VAR 0 3
10920: PPUSH
10921: LD_INT 1
10923: PPUSH
10924: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10928: LD_INT 48
10930: PPUSH
10931: LD_VAR 0 3
10935: PPUSH
10936: LD_INT 1
10938: PPUSH
10939: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10943: LD_INT 49
10945: PPUSH
10946: LD_VAR 0 3
10950: PPUSH
10951: LD_INT 1
10953: PPUSH
10954: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10958: LD_INT 69
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: LD_INT 1
10968: PPUSH
10969: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10973: LD_INT 39
10975: PPUSH
10976: LD_VAR 0 3
10980: PPUSH
10981: LD_INT 1
10983: PPUSH
10984: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10988: LD_INT 34
10990: PPUSH
10991: LD_VAR 0 3
10995: PPUSH
10996: LD_INT 1
10998: PPUSH
10999: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11003: LD_INT 42
11005: PPUSH
11006: LD_VAR 0 3
11010: PPUSH
11011: LD_INT 1
11013: PPUSH
11014: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11018: LD_INT 44
11020: PPUSH
11021: LD_VAR 0 3
11025: PPUSH
11026: LD_INT 1
11028: PPUSH
11029: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11033: LD_INT 41
11035: PPUSH
11036: LD_VAR 0 3
11040: PPUSH
11041: LD_INT 1
11043: PPUSH
11044: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11048: LD_INT 40
11050: PPUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: LD_INT 1
11058: PPUSH
11059: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11063: LD_INT 43
11065: PPUSH
11066: LD_VAR 0 3
11070: PPUSH
11071: LD_INT 1
11073: PPUSH
11074: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11078: LD_INT 70
11080: PPUSH
11081: LD_VAR 0 3
11085: PPUSH
11086: LD_INT 1
11088: PPUSH
11089: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11093: LD_INT 51
11095: PPUSH
11096: LD_VAR 0 3
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11108: LD_INT 52
11110: PPUSH
11111: LD_VAR 0 3
11115: PPUSH
11116: LD_INT 1
11118: PPUSH
11119: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11123: LD_INT 6
11125: PPUSH
11126: LD_VAR 0 3
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11138: LD_INT 15
11140: PPUSH
11141: LD_VAR 0 3
11145: PPUSH
11146: LD_INT 1
11148: PPUSH
11149: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11153: LD_INT 7
11155: PPUSH
11156: LD_VAR 0 3
11160: PPUSH
11161: LD_INT 1
11163: PPUSH
11164: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11168: LD_INT 12
11170: PPUSH
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_INT 1
11178: PPUSH
11179: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11183: LD_INT 17
11185: PPUSH
11186: LD_VAR 0 3
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11198: LD_INT 18
11200: PPUSH
11201: LD_VAR 0 3
11205: PPUSH
11206: LD_INT 1
11208: PPUSH
11209: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11213: LD_INT 60
11215: PPUSH
11216: LD_VAR 0 3
11220: PPUSH
11221: LD_INT 1
11223: PPUSH
11224: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11228: LD_INT 32
11230: PPUSH
11231: LD_VAR 0 3
11235: PPUSH
11236: LD_INT 1
11238: PPUSH
11239: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11243: LD_INT 9
11245: PPUSH
11246: LD_VAR 0 3
11250: PPUSH
11251: LD_INT 1
11253: PPUSH
11254: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11258: LD_INT 57
11260: PPUSH
11261: LD_VAR 0 3
11265: PPUSH
11266: LD_INT 1
11268: PPUSH
11269: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11273: LD_INT 30
11275: PPUSH
11276: LD_VAR 0 3
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11288: LD_INT 37
11290: PPUSH
11291: LD_VAR 0 3
11295: PPUSH
11296: LD_INT 1
11298: PPUSH
11299: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11303: LD_INT 63
11305: PPUSH
11306: LD_VAR 0 3
11310: PPUSH
11311: LD_INT 1
11313: PPUSH
11314: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11318: LD_INT 3
11320: PPUSH
11321: LD_VAR 0 3
11325: PPUSH
11326: LD_INT 1
11328: PPUSH
11329: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11333: LD_INT 4
11335: PPUSH
11336: LD_VAR 0 3
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11348: LD_INT 5
11350: PPUSH
11351: LD_VAR 0 3
11355: PPUSH
11356: LD_INT 1
11358: PPUSH
11359: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11363: LD_INT 66
11365: PPUSH
11366: LD_VAR 0 3
11370: PPUSH
11371: LD_INT 1
11373: PPUSH
11374: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11378: LD_INT 21
11380: PPUSH
11381: LD_VAR 0 3
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11393: LD_INT 22
11395: PPUSH
11396: LD_VAR 0 3
11400: PPUSH
11401: LD_INT 1
11403: PPUSH
11404: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11408: LD_INT 19
11410: PPUSH
11411: LD_VAR 0 3
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11423: LD_INT 54
11425: PPUSH
11426: LD_VAR 0 3
11430: PPUSH
11431: LD_INT 1
11433: PPUSH
11434: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11438: LD_INT 55
11440: PPUSH
11441: LD_VAR 0 3
11445: PPUSH
11446: LD_INT 1
11448: PPUSH
11449: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11453: LD_INT 0
11455: PPUSH
11456: LD_VAR 0 3
11460: PPUSH
11461: LD_INT 1
11463: PPUSH
11464: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11468: LD_INT 1
11470: PPUSH
11471: LD_VAR 0 3
11475: PPUSH
11476: LD_INT 1
11478: PPUSH
11479: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11483: LD_INT 2
11485: PPUSH
11486: LD_VAR 0 3
11490: PPUSH
11491: LD_INT 1
11493: PPUSH
11494: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11498: LD_INT 3
11500: PPUSH
11501: LD_VAR 0 3
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11513: LD_INT 4
11515: PPUSH
11516: LD_VAR 0 3
11520: PPUSH
11521: LD_INT 1
11523: PPUSH
11524: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11528: LD_INT 5
11530: PPUSH
11531: LD_VAR 0 3
11535: PPUSH
11536: LD_INT 1
11538: PPUSH
11539: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11543: LD_INT 6
11545: PPUSH
11546: LD_VAR 0 3
11550: PPUSH
11551: LD_INT 1
11553: PPUSH
11554: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11558: LD_INT 7
11560: PPUSH
11561: LD_VAR 0 3
11565: PPUSH
11566: LD_INT 1
11568: PPUSH
11569: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11573: LD_INT 8
11575: PPUSH
11576: LD_VAR 0 3
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11588: LD_INT 10
11590: PPUSH
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_INT 1
11598: PPUSH
11599: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11603: LD_INT 11
11605: PPUSH
11606: LD_VAR 0 3
11610: PPUSH
11611: LD_INT 1
11613: PPUSH
11614: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11618: LD_INT 12
11620: PPUSH
11621: LD_VAR 0 3
11625: PPUSH
11626: LD_INT 1
11628: PPUSH
11629: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11633: LD_INT 13
11635: PPUSH
11636: LD_VAR 0 3
11640: PPUSH
11641: LD_INT 1
11643: PPUSH
11644: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11648: LD_INT 14
11650: PPUSH
11651: LD_VAR 0 3
11655: PPUSH
11656: LD_INT 1
11658: PPUSH
11659: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11663: LD_INT 15
11665: PPUSH
11666: LD_VAR 0 3
11670: PPUSH
11671: LD_INT 1
11673: PPUSH
11674: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11678: LD_INT 16
11680: PPUSH
11681: LD_VAR 0 3
11685: PPUSH
11686: LD_INT 1
11688: PPUSH
11689: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11693: LD_INT 17
11695: PPUSH
11696: LD_VAR 0 3
11700: PPUSH
11701: LD_INT 1
11703: PPUSH
11704: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11708: LD_INT 18
11710: PPUSH
11711: LD_VAR 0 3
11715: PPUSH
11716: LD_INT 1
11718: PPUSH
11719: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11723: LD_INT 19
11725: PPUSH
11726: LD_VAR 0 3
11730: PPUSH
11731: LD_INT 1
11733: PPUSH
11734: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11738: LD_INT 20
11740: PPUSH
11741: LD_VAR 0 3
11745: PPUSH
11746: LD_INT 1
11748: PPUSH
11749: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11753: LD_INT 21
11755: PPUSH
11756: LD_VAR 0 3
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11768: LD_INT 23
11770: PPUSH
11771: LD_VAR 0 3
11775: PPUSH
11776: LD_INT 1
11778: PPUSH
11779: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11783: LD_INT 26
11785: PPUSH
11786: LD_VAR 0 3
11790: PPUSH
11791: LD_INT 1
11793: PPUSH
11794: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11798: LD_INT 27
11800: PPUSH
11801: LD_VAR 0 3
11805: PPUSH
11806: LD_INT 1
11808: PPUSH
11809: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11813: LD_INT 28
11815: PPUSH
11816: LD_VAR 0 3
11820: PPUSH
11821: LD_INT 1
11823: PPUSH
11824: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11828: LD_INT 29
11830: PPUSH
11831: LD_VAR 0 3
11835: PPUSH
11836: LD_INT 1
11838: PPUSH
11839: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11843: LD_INT 30
11845: PPUSH
11846: LD_VAR 0 3
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11858: LD_INT 31
11860: PPUSH
11861: LD_VAR 0 3
11865: PPUSH
11866: LD_INT 1
11868: PPUSH
11869: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11873: LD_INT 32
11875: PPUSH
11876: LD_VAR 0 3
11880: PPUSH
11881: LD_INT 1
11883: PPUSH
11884: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11888: LD_INT 33
11890: PPUSH
11891: LD_VAR 0 3
11895: PPUSH
11896: LD_INT 1
11898: PPUSH
11899: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11903: LD_INT 36
11905: PPUSH
11906: LD_VAR 0 3
11910: PPUSH
11911: LD_INT 1
11913: PPUSH
11914: CALL_OW 324
// end ; 6 :
11918: GO 12928
11920: LD_INT 6
11922: DOUBLE
11923: EQUAL
11924: IFTRUE 11928
11926: GO 12853
11928: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11929: LD_INT 35
11931: PPUSH
11932: LD_VAR 0 3
11936: PPUSH
11937: LD_INT 1
11939: PPUSH
11940: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11944: LD_INT 45
11946: PPUSH
11947: LD_VAR 0 3
11951: PPUSH
11952: LD_INT 1
11954: PPUSH
11955: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11959: LD_INT 46
11961: PPUSH
11962: LD_VAR 0 3
11966: PPUSH
11967: LD_INT 1
11969: PPUSH
11970: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11974: LD_INT 47
11976: PPUSH
11977: LD_VAR 0 3
11981: PPUSH
11982: LD_INT 1
11984: PPUSH
11985: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11989: LD_INT 1
11991: PPUSH
11992: LD_VAR 0 3
11996: PPUSH
11997: LD_INT 1
11999: PPUSH
12000: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12004: LD_INT 2
12006: PPUSH
12007: LD_VAR 0 3
12011: PPUSH
12012: LD_INT 1
12014: PPUSH
12015: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12019: LD_INT 11
12021: PPUSH
12022: LD_VAR 0 3
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12034: LD_INT 20
12036: PPUSH
12037: LD_VAR 0 3
12041: PPUSH
12042: LD_INT 1
12044: PPUSH
12045: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12049: LD_INT 48
12051: PPUSH
12052: LD_VAR 0 3
12056: PPUSH
12057: LD_INT 1
12059: PPUSH
12060: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12064: LD_INT 49
12066: PPUSH
12067: LD_VAR 0 3
12071: PPUSH
12072: LD_INT 1
12074: PPUSH
12075: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12079: LD_INT 50
12081: PPUSH
12082: LD_VAR 0 3
12086: PPUSH
12087: LD_INT 1
12089: PPUSH
12090: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12094: LD_INT 69
12096: PPUSH
12097: LD_VAR 0 3
12101: PPUSH
12102: LD_INT 1
12104: PPUSH
12105: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12109: LD_INT 39
12111: PPUSH
12112: LD_VAR 0 3
12116: PPUSH
12117: LD_INT 1
12119: PPUSH
12120: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12124: LD_INT 34
12126: PPUSH
12127: LD_VAR 0 3
12131: PPUSH
12132: LD_INT 1
12134: PPUSH
12135: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12139: LD_INT 42
12141: PPUSH
12142: LD_VAR 0 3
12146: PPUSH
12147: LD_INT 1
12149: PPUSH
12150: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12154: LD_INT 44
12156: PPUSH
12157: LD_VAR 0 3
12161: PPUSH
12162: LD_INT 1
12164: PPUSH
12165: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12169: LD_INT 41
12171: PPUSH
12172: LD_VAR 0 3
12176: PPUSH
12177: LD_INT 1
12179: PPUSH
12180: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12184: LD_INT 13
12186: PPUSH
12187: LD_VAR 0 3
12191: PPUSH
12192: LD_INT 1
12194: PPUSH
12195: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12199: LD_INT 40
12201: PPUSH
12202: LD_VAR 0 3
12206: PPUSH
12207: LD_INT 1
12209: PPUSH
12210: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12214: LD_INT 43
12216: PPUSH
12217: LD_VAR 0 3
12221: PPUSH
12222: LD_INT 1
12224: PPUSH
12225: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12229: LD_INT 70
12231: PPUSH
12232: LD_VAR 0 3
12236: PPUSH
12237: LD_INT 1
12239: PPUSH
12240: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12244: LD_INT 23
12246: PPUSH
12247: LD_VAR 0 3
12251: PPUSH
12252: LD_INT 1
12254: PPUSH
12255: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12259: LD_INT 51
12261: PPUSH
12262: LD_VAR 0 3
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12274: LD_INT 52
12276: PPUSH
12277: LD_VAR 0 3
12281: PPUSH
12282: LD_INT 1
12284: PPUSH
12285: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12289: LD_INT 6
12291: PPUSH
12292: LD_VAR 0 3
12296: PPUSH
12297: LD_INT 1
12299: PPUSH
12300: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12304: LD_INT 15
12306: PPUSH
12307: LD_VAR 0 3
12311: PPUSH
12312: LD_INT 1
12314: PPUSH
12315: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12319: LD_INT 7
12321: PPUSH
12322: LD_VAR 0 3
12326: PPUSH
12327: LD_INT 1
12329: PPUSH
12330: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12334: LD_INT 12
12336: PPUSH
12337: LD_VAR 0 3
12341: PPUSH
12342: LD_INT 1
12344: PPUSH
12345: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12349: LD_INT 10
12351: PPUSH
12352: LD_VAR 0 3
12356: PPUSH
12357: LD_INT 1
12359: PPUSH
12360: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12364: LD_INT 17
12366: PPUSH
12367: LD_VAR 0 3
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12379: LD_INT 18
12381: PPUSH
12382: LD_VAR 0 3
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12394: LD_INT 60
12396: PPUSH
12397: LD_VAR 0 3
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12409: LD_INT 61
12411: PPUSH
12412: LD_VAR 0 3
12416: PPUSH
12417: LD_INT 1
12419: PPUSH
12420: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12424: LD_INT 32
12426: PPUSH
12427: LD_VAR 0 3
12431: PPUSH
12432: LD_INT 1
12434: PPUSH
12435: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12439: LD_INT 27
12441: PPUSH
12442: LD_VAR 0 3
12446: PPUSH
12447: LD_INT 1
12449: PPUSH
12450: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12454: LD_INT 36
12456: PPUSH
12457: LD_VAR 0 3
12461: PPUSH
12462: LD_INT 1
12464: PPUSH
12465: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12469: LD_INT 33
12471: PPUSH
12472: LD_VAR 0 3
12476: PPUSH
12477: LD_INT 1
12479: PPUSH
12480: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12484: LD_INT 9
12486: PPUSH
12487: LD_VAR 0 3
12491: PPUSH
12492: LD_INT 1
12494: PPUSH
12495: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12499: LD_INT 38
12501: PPUSH
12502: LD_VAR 0 3
12506: PPUSH
12507: LD_INT 1
12509: PPUSH
12510: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12514: LD_INT 57
12516: PPUSH
12517: LD_VAR 0 3
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12529: LD_INT 58
12531: PPUSH
12532: LD_VAR 0 3
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12544: LD_INT 28
12546: PPUSH
12547: LD_VAR 0 3
12551: PPUSH
12552: LD_INT 1
12554: PPUSH
12555: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12559: LD_INT 29
12561: PPUSH
12562: LD_VAR 0 3
12566: PPUSH
12567: LD_INT 1
12569: PPUSH
12570: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12574: LD_INT 30
12576: PPUSH
12577: LD_VAR 0 3
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12589: LD_INT 37
12591: PPUSH
12592: LD_VAR 0 3
12596: PPUSH
12597: LD_INT 1
12599: PPUSH
12600: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12604: LD_INT 63
12606: PPUSH
12607: LD_VAR 0 3
12611: PPUSH
12612: LD_INT 1
12614: PPUSH
12615: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12619: LD_INT 64
12621: PPUSH
12622: LD_VAR 0 3
12626: PPUSH
12627: LD_INT 1
12629: PPUSH
12630: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12634: LD_INT 3
12636: PPUSH
12637: LD_VAR 0 3
12641: PPUSH
12642: LD_INT 1
12644: PPUSH
12645: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12649: LD_INT 4
12651: PPUSH
12652: LD_VAR 0 3
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12664: LD_INT 5
12666: PPUSH
12667: LD_VAR 0 3
12671: PPUSH
12672: LD_INT 1
12674: PPUSH
12675: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12679: LD_INT 8
12681: PPUSH
12682: LD_VAR 0 3
12686: PPUSH
12687: LD_INT 1
12689: PPUSH
12690: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12694: LD_INT 66
12696: PPUSH
12697: LD_VAR 0 3
12701: PPUSH
12702: LD_INT 1
12704: PPUSH
12705: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12709: LD_INT 67
12711: PPUSH
12712: LD_VAR 0 3
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12724: LD_INT 21
12726: PPUSH
12727: LD_VAR 0 3
12731: PPUSH
12732: LD_INT 1
12734: PPUSH
12735: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12739: LD_INT 22
12741: PPUSH
12742: LD_VAR 0 3
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12754: LD_INT 19
12756: PPUSH
12757: LD_VAR 0 3
12761: PPUSH
12762: LD_INT 1
12764: PPUSH
12765: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12769: LD_INT 26
12771: PPUSH
12772: LD_VAR 0 3
12776: PPUSH
12777: LD_INT 1
12779: PPUSH
12780: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12784: LD_INT 54
12786: PPUSH
12787: LD_VAR 0 3
12791: PPUSH
12792: LD_INT 1
12794: PPUSH
12795: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12799: LD_INT 55
12801: PPUSH
12802: LD_VAR 0 3
12806: PPUSH
12807: LD_INT 1
12809: PPUSH
12810: CALL_OW 322
// for i = 0 to 39 do
12814: LD_ADDR_VAR 0 4
12818: PUSH
12819: DOUBLE
12820: LD_INT 0
12822: DEC
12823: ST_TO_ADDR
12824: LD_INT 39
12826: PUSH
12827: FOR_TO
12828: IFFALSE 12849
// SetRestrict ( i , side , true ) ;
12830: LD_VAR 0 4
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: CALL_OW 324
12847: GO 12827
12849: POP
12850: POP
// end ; else
12851: GO 12928
12853: POP
// begin for i = 1 to 73 do
12854: LD_ADDR_VAR 0 4
12858: PUSH
12859: DOUBLE
12860: LD_INT 1
12862: DEC
12863: ST_TO_ADDR
12864: LD_INT 73
12866: PUSH
12867: FOR_TO
12868: IFFALSE 12889
// SetTech ( i , side , state_enabled ) ;
12870: LD_VAR 0 4
12874: PPUSH
12875: LD_VAR 0 3
12879: PPUSH
12880: LD_INT 1
12882: PPUSH
12883: CALL_OW 322
12887: GO 12867
12889: POP
12890: POP
// for i = 0 to 39 do
12891: LD_ADDR_VAR 0 4
12895: PUSH
12896: DOUBLE
12897: LD_INT 0
12899: DEC
12900: ST_TO_ADDR
12901: LD_INT 39
12903: PUSH
12904: FOR_TO
12905: IFFALSE 12926
// SetRestrict ( i , side , true ) ;
12907: LD_VAR 0 4
12911: PPUSH
12912: LD_VAR 0 3
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: CALL_OW 324
12924: GO 12904
12926: POP
12927: POP
// end ; end ; end ;
12928: GO 8933
12930: POP
12931: POP
// end ; end_of_file
12932: LD_VAR 0 2
12936: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12937: LD_INT 0
12939: PPUSH
12940: PPUSH
12941: PPUSH
12942: PPUSH
12943: PPUSH
12944: PPUSH
12945: PPUSH
12946: PPUSH
12947: PPUSH
// for i := 1 to 8 do
12948: LD_ADDR_VAR 0 2
12952: PUSH
12953: DOUBLE
12954: LD_INT 1
12956: DEC
12957: ST_TO_ADDR
12958: LD_INT 8
12960: PUSH
12961: FOR_TO
12962: IFFALSE 13346
// begin if Side_Positions [ i ] then
12964: LD_EXP 34
12968: PUSH
12969: LD_VAR 0 2
12973: ARRAY
12974: IFFALSE 13344
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12976: LD_ADDR_VAR 0 7
12980: PUSH
12981: LD_INT 22
12983: PUSH
12984: LD_VAR 0 2
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 21
12995: PUSH
12996: LD_INT 1
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PPUSH
13007: CALL_OW 69
13011: PUSH
13012: LD_INT 0
13014: PLUS
13015: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13016: LD_ADDR_VAR 0 9
13020: PUSH
13021: LD_INT 22
13023: PUSH
13024: LD_VAR 0 2
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: LD_INT 2
13035: PUSH
13036: LD_INT 30
13038: PUSH
13039: LD_INT 0
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 30
13048: PUSH
13049: LD_INT 1
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 69
13069: ST_TO_ADDR
// crates := 0 ;
13070: LD_ADDR_VAR 0 4
13074: PUSH
13075: LD_INT 0
13077: ST_TO_ADDR
// oil := 0 ;
13078: LD_ADDR_VAR 0 5
13082: PUSH
13083: LD_INT 0
13085: ST_TO_ADDR
// sib := 0 ;
13086: LD_ADDR_VAR 0 6
13090: PUSH
13091: LD_INT 0
13093: ST_TO_ADDR
// if bases then
13094: LD_VAR 0 9
13098: IFFALSE 13204
// begin for j in bases do
13100: LD_ADDR_VAR 0 3
13104: PUSH
13105: LD_VAR 0 9
13109: PUSH
13110: FOR_IN
13111: IFFALSE 13202
// begin base := GetBase ( j ) ;
13113: LD_ADDR_VAR 0 8
13117: PUSH
13118: LD_VAR 0 3
13122: PPUSH
13123: CALL_OW 274
13127: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13128: LD_ADDR_VAR 0 4
13132: PUSH
13133: LD_VAR 0 4
13137: PUSH
13138: LD_VAR 0 8
13142: PPUSH
13143: LD_INT 1
13145: PPUSH
13146: CALL_OW 275
13150: PLUS
13151: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13152: LD_ADDR_VAR 0 5
13156: PUSH
13157: LD_VAR 0 5
13161: PUSH
13162: LD_VAR 0 8
13166: PPUSH
13167: LD_INT 2
13169: PPUSH
13170: CALL_OW 275
13174: PLUS
13175: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13176: LD_ADDR_VAR 0 6
13180: PUSH
13181: LD_VAR 0 6
13185: PUSH
13186: LD_VAR 0 8
13190: PPUSH
13191: LD_INT 3
13193: PPUSH
13194: CALL_OW 275
13198: PLUS
13199: ST_TO_ADDR
// end ;
13200: GO 13110
13202: POP
13203: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13204: LD_STRING setSpecText(
13206: PUSH
13207: LD_VAR 0 2
13211: STR
13212: PUSH
13213: LD_STRING ,
13215: STR
13216: PUSH
13217: LD_INT 2
13219: STR
13220: PUSH
13221: LD_STRING ,
13223: STR
13224: PUSH
13225: LD_VAR 0 4
13229: STR
13230: PUSH
13231: LD_STRING )
13233: STR
13234: PPUSH
13235: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13239: LD_STRING setSpecText(
13241: PUSH
13242: LD_VAR 0 2
13246: STR
13247: PUSH
13248: LD_STRING ,
13250: STR
13251: PUSH
13252: LD_INT 3
13254: STR
13255: PUSH
13256: LD_STRING ,
13258: STR
13259: PUSH
13260: LD_VAR 0 5
13264: STR
13265: PUSH
13266: LD_STRING )
13268: STR
13269: PPUSH
13270: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13274: LD_STRING setSpecText(
13276: PUSH
13277: LD_VAR 0 2
13281: STR
13282: PUSH
13283: LD_STRING ,
13285: STR
13286: PUSH
13287: LD_INT 4
13289: STR
13290: PUSH
13291: LD_STRING ,
13293: STR
13294: PUSH
13295: LD_VAR 0 6
13299: STR
13300: PUSH
13301: LD_STRING )
13303: STR
13304: PPUSH
13305: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13309: LD_STRING setSpecText(
13311: PUSH
13312: LD_VAR 0 2
13316: STR
13317: PUSH
13318: LD_STRING ,
13320: STR
13321: PUSH
13322: LD_INT 5
13324: STR
13325: PUSH
13326: LD_STRING ,
13328: STR
13329: PUSH
13330: LD_VAR 0 7
13334: STR
13335: PUSH
13336: LD_STRING )
13338: STR
13339: PPUSH
13340: CALL_OW 559
// end ; end ;
13344: GO 12961
13346: POP
13347: POP
// end ;
13348: LD_VAR 0 1
13352: RET
// every 0 0$1 do
13353: GO 13355
13355: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13356: LD_STRING setSpecLogoNumber(
13358: PUSH
13359: LD_INT 2
13361: STR
13362: PUSH
13363: LD_STRING ,
13365: STR
13366: PUSH
13367: LD_INT 1
13369: STR
13370: PUSH
13371: LD_STRING )
13373: STR
13374: PPUSH
13375: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13379: LD_STRING setSpecLogoNumber(
13381: PUSH
13382: LD_INT 3
13384: STR
13385: PUSH
13386: LD_STRING ,
13388: STR
13389: PUSH
13390: LD_INT 2
13392: STR
13393: PUSH
13394: LD_STRING )
13396: STR
13397: PPUSH
13398: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13402: LD_STRING setSpecLogoNumber(
13404: PUSH
13405: LD_INT 4
13407: STR
13408: PUSH
13409: LD_STRING ,
13411: STR
13412: PUSH
13413: LD_INT 3
13415: STR
13416: PUSH
13417: LD_STRING )
13419: STR
13420: PPUSH
13421: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13425: LD_STRING setSpecLogoNumber(
13427: PUSH
13428: LD_INT 5
13430: STR
13431: PUSH
13432: LD_STRING ,
13434: STR
13435: PUSH
13436: LD_INT 4
13438: STR
13439: PUSH
13440: LD_STRING )
13442: STR
13443: PPUSH
13444: CALL_OW 559
// end ;
13448: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13449: LD_INT 2
13451: PUSH
13452: LD_INT 30
13454: PUSH
13455: LD_INT 0
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 30
13464: PUSH
13465: LD_INT 1
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: PPUSH
13477: CALL_OW 69
13481: IFFALSE 13491
13483: GO 13485
13485: DISABLE
// begin enable ;
13486: ENABLE
// UpdateSpectatorBar ;
13487: CALL 12937 0 0
// end ; end_of_file
13491: END
// var respawn , inqueue ; export function init_respawning ; begin
13492: LD_INT 0
13494: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13495: LD_ADDR_LOC 18
13499: PUSH
13500: LD_INT 1
13502: PPUSH
13503: LD_INT 8
13505: PPUSH
13506: CALL_OW 12
13510: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13511: LD_ADDR_LOC 19
13515: PUSH
13516: LD_INT 0
13518: PUSH
13519: LD_INT 0
13521: PUSH
13522: LD_INT 0
13524: PUSH
13525: LD_INT 0
13527: PUSH
13528: LD_INT 0
13530: PUSH
13531: LD_INT 0
13533: PUSH
13534: LD_INT 0
13536: PUSH
13537: LD_INT 0
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: ST_TO_ADDR
// end ;
13550: LD_VAR 0 1
13554: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13555: GO 13557
13557: DISABLE
13558: LD_INT 0
13560: PPUSH
13561: PPUSH
13562: PPUSH
// begin if respawning_time_max = 0 then
13563: LD_EXP 28
13567: PUSH
13568: LD_INT 0
13570: EQUAL
13571: IFFALSE 13575
// exit ;
13573: GO 13983
// if respawn = 8 then
13575: LD_LOC 18
13579: PUSH
13580: LD_INT 8
13582: EQUAL
13583: IFFALSE 13595
// respawn := 1 else
13585: LD_ADDR_LOC 18
13589: PUSH
13590: LD_INT 1
13592: ST_TO_ADDR
13593: GO 13609
// respawn := respawn + 1 ;
13595: LD_ADDR_LOC 18
13599: PUSH
13600: LD_LOC 18
13604: PUSH
13605: LD_INT 1
13607: PLUS
13608: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13609: LD_EXP 34
13613: PUSH
13614: LD_LOC 18
13618: ARRAY
13619: PUSH
13620: LD_LOC 19
13624: PUSH
13625: LD_LOC 18
13629: ARRAY
13630: NOT
13631: AND
13632: IFFALSE 13982
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13634: LD_ADDR_VAR 0 1
13638: PUSH
13639: LD_INT 21
13641: PUSH
13642: LD_INT 1
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 22
13651: PUSH
13652: LD_LOC 18
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 3
13663: PUSH
13664: LD_INT 23
13666: PUSH
13667: LD_INT 0
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: PPUSH
13680: CALL_OW 69
13684: ST_TO_ADDR
// if n < number_of_people then
13685: LD_VAR 0 1
13689: PUSH
13690: LD_EXP 19
13694: LESS
13695: IFFALSE 13979
// begin aktresp := respawn ;
13697: LD_ADDR_VAR 0 3
13701: PUSH
13702: LD_LOC 18
13706: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13707: LD_ADDR_LOC 19
13711: PUSH
13712: LD_LOC 19
13716: PPUSH
13717: LD_VAR 0 3
13721: PPUSH
13722: LD_INT 1
13724: PPUSH
13725: CALL_OW 1
13729: ST_TO_ADDR
// enable ;
13730: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13731: LD_EXP 27
13735: PPUSH
13736: LD_EXP 28
13740: PPUSH
13741: CALL_OW 12
13745: PPUSH
13746: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13750: LD_ADDR_LOC 19
13754: PUSH
13755: LD_LOC 19
13759: PPUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 0
13767: PPUSH
13768: CALL_OW 1
13772: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13773: LD_ADDR_VAR 0 2
13777: PUSH
13778: LD_INT 21
13780: PUSH
13781: LD_INT 3
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 2
13790: PUSH
13791: LD_INT 30
13793: PUSH
13794: LD_INT 0
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 30
13803: PUSH
13804: LD_INT 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: PUSH
13816: LD_INT 50
13818: PUSH
13819: EMPTY
13820: LIST
13821: PUSH
13822: LD_INT 22
13824: PUSH
13825: LD_VAR 0 3
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: PPUSH
13840: CALL_OW 69
13844: ST_TO_ADDR
// if dep = 0 then
13845: LD_VAR 0 2
13849: PUSH
13850: LD_INT 0
13852: EQUAL
13853: IFFALSE 13857
// exit ;
13855: GO 13983
// hc_name :=  ;
13857: LD_ADDR_OWVAR 26
13861: PUSH
13862: LD_STRING 
13864: ST_TO_ADDR
// hc_importance := 0 ;
13865: LD_ADDR_OWVAR 32
13869: PUSH
13870: LD_INT 0
13872: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13873: LD_INT 0
13875: PPUSH
13876: LD_INT 0
13878: PPUSH
13879: LD_EXP 20
13883: PUSH
13884: LD_INT 2
13886: DIV
13887: PPUSH
13888: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13892: LD_ADDR_OWVAR 21
13896: PUSH
13897: LD_EXP 35
13901: PUSH
13902: LD_VAR 0 3
13906: ARRAY
13907: ST_TO_ADDR
// uc_side := aktresp ;
13908: LD_ADDR_OWVAR 20
13912: PUSH
13913: LD_VAR 0 3
13917: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13918: LD_ADDR_VAR 0 2
13922: PUSH
13923: LD_VAR 0 2
13927: PUSH
13928: LD_INT 1
13930: PPUSH
13931: LD_VAR 0 2
13935: PPUSH
13936: CALL_OW 12
13940: ARRAY
13941: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13942: CALL_OW 44
13946: PPUSH
13947: LD_VAR 0 2
13951: PPUSH
13952: CALL_OW 250
13956: PPUSH
13957: LD_VAR 0 2
13961: PPUSH
13962: CALL_OW 251
13966: PPUSH
13967: LD_INT 7
13969: PPUSH
13970: LD_INT 1
13972: PPUSH
13973: CALL_OW 50
// end else
13977: GO 13980
// enable ;
13979: ENABLE
// end else
13980: GO 13983
// enable ;
13982: ENABLE
// end ; end_of_file
13983: PPOPN 3
13985: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13986: LD_INT 0
13988: PPUSH
13989: PPUSH
13990: PPUSH
// BuildUpTime_Delay = 0 ;
13991: LD_ADDR_EXP 57
13995: PUSH
13996: LD_INT 0
13998: ST_TO_ADDR
// if not def_builduptime then
13999: LD_EXP 14
14003: NOT
14004: IFFALSE 14008
// exit ;
14006: GO 14191
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14008: LD_ADDR_EXP 57
14012: PUSH
14013: LD_INT 8400
14015: PUSH
14016: LD_INT 2100
14018: PUSH
14019: LD_EXP 14
14023: MUL
14024: PLUS
14025: ST_TO_ADDR
// BuildUpTimeActive := true ;
14026: LD_ADDR_EXP 56
14030: PUSH
14031: LD_INT 1
14033: ST_TO_ADDR
// for i := 1 to 8 do
14034: LD_ADDR_VAR 0 2
14038: PUSH
14039: DOUBLE
14040: LD_INT 1
14042: DEC
14043: ST_TO_ADDR
14044: LD_INT 8
14046: PUSH
14047: FOR_TO
14048: IFFALSE 14189
// if Side_Positions [ i ] then
14050: LD_EXP 34
14054: PUSH
14055: LD_VAR 0 2
14059: ARRAY
14060: IFFALSE 14187
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14062: LD_EXP 55
14066: PUSH
14067: LD_EXP 34
14071: PUSH
14072: LD_VAR 0 2
14076: ARRAY
14077: ARRAY
14078: PPUSH
14079: LD_INT 5
14081: PPUSH
14082: CALL_OW 424
// for j := 1 to 8 do
14086: LD_ADDR_VAR 0 3
14090: PUSH
14091: DOUBLE
14092: LD_INT 1
14094: DEC
14095: ST_TO_ADDR
14096: LD_INT 8
14098: PUSH
14099: FOR_TO
14100: IFFALSE 14185
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14102: LD_EXP 34
14106: PUSH
14107: LD_VAR 0 3
14111: ARRAY
14112: PUSH
14113: LD_EXP 31
14117: PUSH
14118: LD_VAR 0 2
14122: ARRAY
14123: PUSH
14124: LD_EXP 31
14128: PUSH
14129: LD_VAR 0 3
14133: ARRAY
14134: NONEQUAL
14135: PUSH
14136: LD_EXP 36
14140: NOT
14141: PUSH
14142: LD_VAR 0 2
14146: PUSH
14147: LD_VAR 0 3
14151: NONEQUAL
14152: AND
14153: OR
14154: AND
14155: IFFALSE 14183
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14157: LD_VAR 0 3
14161: PPUSH
14162: LD_EXP 55
14166: PUSH
14167: LD_EXP 34
14171: PUSH
14172: LD_VAR 0 2
14176: ARRAY
14177: ARRAY
14178: PPUSH
14179: CALL_OW 333
14183: GO 14099
14185: POP
14186: POP
// end ;
14187: GO 14047
14189: POP
14190: POP
// end ;
14191: LD_VAR 0 1
14195: RET
// export function EndBuildUp ; var i , j ; begin
14196: LD_INT 0
14198: PPUSH
14199: PPUSH
14200: PPUSH
// BuildUpTimeActive := false ;
14201: LD_ADDR_EXP 56
14205: PUSH
14206: LD_INT 0
14208: ST_TO_ADDR
// for i := 1 to 8 do
14209: LD_ADDR_VAR 0 2
14213: PUSH
14214: DOUBLE
14215: LD_INT 1
14217: DEC
14218: ST_TO_ADDR
14219: LD_INT 8
14221: PUSH
14222: FOR_TO
14223: IFFALSE 14364
// if Side_Positions [ i ] then
14225: LD_EXP 34
14229: PUSH
14230: LD_VAR 0 2
14234: ARRAY
14235: IFFALSE 14362
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14237: LD_EXP 55
14241: PUSH
14242: LD_EXP 34
14246: PUSH
14247: LD_VAR 0 2
14251: ARRAY
14252: ARRAY
14253: PPUSH
14254: LD_INT 0
14256: PPUSH
14257: CALL_OW 424
// for j := 1 to 8 do
14261: LD_ADDR_VAR 0 3
14265: PUSH
14266: DOUBLE
14267: LD_INT 1
14269: DEC
14270: ST_TO_ADDR
14271: LD_INT 8
14273: PUSH
14274: FOR_TO
14275: IFFALSE 14360
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14277: LD_EXP 34
14281: PUSH
14282: LD_VAR 0 3
14286: ARRAY
14287: PUSH
14288: LD_EXP 31
14292: PUSH
14293: LD_VAR 0 2
14297: ARRAY
14298: PUSH
14299: LD_EXP 31
14303: PUSH
14304: LD_VAR 0 3
14308: ARRAY
14309: NONEQUAL
14310: PUSH
14311: LD_EXP 36
14315: NOT
14316: PUSH
14317: LD_VAR 0 2
14321: PUSH
14322: LD_VAR 0 3
14326: NONEQUAL
14327: AND
14328: OR
14329: AND
14330: IFFALSE 14358
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14332: LD_VAR 0 3
14336: PPUSH
14337: LD_EXP 55
14341: PUSH
14342: LD_EXP 34
14346: PUSH
14347: LD_VAR 0 2
14351: ARRAY
14352: ARRAY
14353: PPUSH
14354: CALL_OW 334
14358: GO 14274
14360: POP
14361: POP
// end ;
14362: GO 14222
14364: POP
14365: POP
// end ;
14366: LD_VAR 0 1
14370: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14371: LD_EXP 56
14375: IFFALSE 14550
14377: GO 14379
14379: DISABLE
14380: LD_INT 0
14382: PPUSH
14383: PPUSH
// begin for i := 1 to 8 do
14384: LD_ADDR_VAR 0 1
14388: PUSH
14389: DOUBLE
14390: LD_INT 1
14392: DEC
14393: ST_TO_ADDR
14394: LD_INT 8
14396: PUSH
14397: FOR_TO
14398: IFFALSE 14547
// if Side_Positions [ i ] then
14400: LD_EXP 34
14404: PUSH
14405: LD_VAR 0 1
14409: ARRAY
14410: IFFALSE 14545
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14412: LD_ADDR_VAR 0 2
14416: PUSH
14417: LD_EXP 55
14421: PUSH
14422: LD_EXP 34
14426: PUSH
14427: LD_VAR 0 1
14431: ARRAY
14432: ARRAY
14433: PPUSH
14434: LD_INT 2
14436: PUSH
14437: LD_INT 21
14439: PUSH
14440: LD_INT 1
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 21
14449: PUSH
14450: LD_INT 2
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: PUSH
14462: LD_INT 22
14464: PUSH
14465: LD_OWVAR 2
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PPUSH
14478: CALL_OW 70
14482: PUSH
14483: FOR_IN
14484: IFFALSE 14543
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14486: LD_EXP 31
14490: PUSH
14491: LD_VAR 0 1
14495: ARRAY
14496: PUSH
14497: LD_EXP 31
14501: PUSH
14502: LD_OWVAR 2
14506: ARRAY
14507: NONEQUAL
14508: PUSH
14509: LD_EXP 36
14513: NOT
14514: PUSH
14515: LD_VAR 0 1
14519: PUSH
14520: LD_OWVAR 2
14524: NONEQUAL
14525: AND
14526: OR
14527: IFFALSE 14541
// ComMoveToArea ( un , BuildUpEscape ) ;
14529: LD_VAR 0 2
14533: PPUSH
14534: LD_INT 16
14536: PPUSH
14537: CALL_OW 113
14541: GO 14483
14543: POP
14544: POP
14545: GO 14397
14547: POP
14548: POP
// enable ;
14549: ENABLE
// end ;
14550: PPOPN 2
14552: END
// every 0 0$1 trigger def_builduptime do
14553: LD_EXP 14
14557: IFFALSE 14583
14559: GO 14561
14561: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14562: LD_INT 8400
14564: PUSH
14565: LD_EXP 14
14569: PUSH
14570: LD_INT 2100
14572: MUL
14573: PLUS
14574: PPUSH
14575: CALL_OW 67
// EndBuildUp ;
14579: CALL 14196 0 0
// end ;
14583: END
