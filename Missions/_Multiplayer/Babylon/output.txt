// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export Position_Sides ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 49
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 3 ;
 151: LD_ADDR_EXP 49
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// for i := 1 to 8 do
 356: LD_ADDR_VAR 0 2
 360: PUSH
 361: DOUBLE
 362: LD_INT 1
 364: DEC
 365: ST_TO_ADDR
 366: LD_INT 8
 368: PUSH
 369: FOR_TO
 370: IFFALSE 457
// if Multiplayer_GetPlayerIsSpec ( i ) then
 372: LD_VAR 0 2
 376: PPUSH
 377: CALL_OW 530
 381: IFFALSE 455
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 383: LD_ADDR_EXP 23
 387: PUSH
 388: LD_EXP 23
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: LD_INT 0
 400: PPUSH
 401: CALL_OW 1
 405: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 406: LD_ADDR_EXP 22
 410: PUSH
 411: LD_EXP 22
 415: PPUSH
 416: LD_EXP 21
 420: PUSH
 421: LD_VAR 0 2
 425: ARRAY
 426: PPUSH
 427: LD_EXP 22
 431: PUSH
 432: LD_EXP 21
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: ARRAY
 443: PUSH
 444: LD_VAR 0 2
 448: DIFF
 449: PPUSH
 450: CALL_OW 1
 454: ST_TO_ADDR
// end ;
 455: GO 369
 457: POP
 458: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 459: LD_ADDR_EXP 29
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// for i := 1 to 8 do
 482: LD_ADDR_VAR 0 2
 486: PUSH
 487: DOUBLE
 488: LD_INT 1
 490: DEC
 491: ST_TO_ADDR
 492: LD_INT 8
 494: PUSH
 495: FOR_TO
 496: IFFALSE 543
// if Side_Positions [ i ] then
 498: LD_EXP 23
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: IFFALSE 541
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 510: LD_ADDR_EXP 29
 514: PUSH
 515: LD_EXP 29
 519: PPUSH
 520: LD_EXP 23
 524: PUSH
 525: LD_VAR 0 2
 529: ARRAY
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: CALL_OW 1
 540: ST_TO_ADDR
 541: GO 495
 543: POP
 544: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_EXP 21
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: EMPTY
 559: LIST
 560: DIFF
 561: PUSH
 562: LD_INT 1
 564: GREATER
 565: ST_TO_ADDR
// if Multiplayer then
 566: LD_OWVAR 4
 570: IFFALSE 842
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 572: LD_ADDR_EXP 51
 576: PUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 426
 584: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 585: LD_ADDR_EXP 52
 589: PUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 426
 597: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 598: LD_ADDR_EXP 53
 602: PUSH
 603: LD_INT 2
 605: PPUSH
 606: CALL_OW 426
 610: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 611: LD_ADDR_EXP 54
 615: PUSH
 616: LD_INT 3
 618: PPUSH
 619: CALL_OW 426
 623: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 624: LD_ADDR_EXP 55
 628: PUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 426
 636: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 637: LD_ADDR_EXP 56
 641: PUSH
 642: LD_INT 5
 644: PPUSH
 645: CALL_OW 426
 649: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 650: LD_ADDR_EXP 58
 654: PUSH
 655: LD_INT 10
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 663: LD_ADDR_EXP 59
 667: PUSH
 668: LD_INT 11
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 676: LD_ADDR_EXP 60
 680: PUSH
 681: LD_INT 12
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 689: LD_ADDR_EXP 62
 693: PUSH
 694: LD_INT 13
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 702: LD_ADDR_EXP 61
 706: PUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 715: LD_ADDR_EXP 63
 719: PUSH
 720: LD_INT 15
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 728: LD_ADDR_EXP 1
 732: PUSH
 733: LD_INT 6
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 741: LD_ADDR_EXP 2
 745: PUSH
 746: LD_INT 7
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 754: LD_ADDR_EXP 4
 758: PUSH
 759: LD_INT 8
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 767: LD_ADDR_EXP 3
 771: PUSH
 772: LD_INT 9
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 780: LD_ADDR_EXP 5
 784: PUSH
 785: LD_INT 16
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 17
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 806: LD_ADDR_EXP 64
 810: PUSH
 811: LD_INT 20
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 819: LD_ADDR_VAR 0 3
 823: PUSH
 824: LD_INT 22
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_win_rules = 0 ;
 832: LD_ADDR_EXP 19
 836: PUSH
 837: LD_INT 0
 839: ST_TO_ADDR
// end else
 840: GO 1014
// begin Randomize ;
 842: CALL_OW 10
// def_base_level := 2 ;
 846: LD_ADDR_EXP 51
 850: PUSH
 851: LD_INT 2
 853: ST_TO_ADDR
// def_amount_of_people := 1 ;
 854: LD_ADDR_EXP 52
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// def_skill_level := 1 ;
 862: LD_ADDR_EXP 53
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// def_starting_resources := 2 ;
 870: LD_ADDR_EXP 54
 874: PUSH
 875: LD_INT 2
 877: ST_TO_ADDR
// def_shipments_density := 1 ;
 878: LD_ADDR_EXP 55
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 886: LD_ADDR_EXP 56
 890: PUSH
 891: LD_INT 0
 893: ST_TO_ADDR
// def_shared_vision := 1 ;
 894: LD_ADDR_EXP 58
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// def_morale_flags := 1 ;
 902: LD_ADDR_EXP 59
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// def_siberite_detection := 1 ;
 910: LD_ADDR_EXP 60
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 918: LD_ADDR_EXP 62
 922: PUSH
 923: LD_INT 3
 925: ST_TO_ADDR
// def_people_respawning := 2 ;
 926: LD_ADDR_EXP 61
 930: PUSH
 931: LD_INT 2
 933: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 934: LD_ADDR_EXP 63
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// def_artefact_one := 1 ;
 942: LD_ADDR_EXP 1
 946: PUSH
 947: LD_INT 1
 949: ST_TO_ADDR
// def_artefact_two := 1 ;
 950: LD_ADDR_EXP 2
 954: PUSH
 955: LD_INT 1
 957: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 958: LD_ADDR_EXP 4
 962: PUSH
 963: LD_INT 2
 965: ST_TO_ADDR
// def_artefact_three := 1 ;
 966: LD_ADDR_EXP 3
 970: PUSH
 971: LD_INT 1
 973: ST_TO_ADDR
// def_kings_age := 1 ;
 974: LD_ADDR_EXP 5
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// def_public_score := 0 ;
 982: LD_ADDR_EXP 6
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// def_builduptime := 1 ;
 990: LD_ADDR_EXP 64
 994: PUSH
 995: LD_INT 1
 997: ST_TO_ADDR
// tech_level = 4 ;
 998: LD_ADDR_VAR 0 3
1002: PUSH
1003: LD_INT 4
1005: ST_TO_ADDR
// def_win_rules = 0 ;
1006: LD_ADDR_EXP 19
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// end ; InitGameRules ;
1014: CALL 14255 0 0
// if def_game_rules = 0 then
1018: LD_EXP 50
1022: PUSH
1023: LD_INT 0
1025: EQUAL
1026: IFFALSE 1053
// begin if isSGUI then
1028: LD_OWVAR 83
1032: IFFALSE 1040
// setMpTechs ( ) else
1034: CALL 22047 0 0
1038: GO 1053
// begin SetMpTechLevel ( tech_level + 1 ) ;
1040: LD_VAR 0 3
1044: PUSH
1045: LD_INT 1
1047: PLUS
1048: PPUSH
1049: CALL 22194 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1053: LD_ADDR_EXP 7
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 51
1080: PUSH
1081: LD_INT 1
1083: PLUS
1084: ARRAY
1085: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
1086: LD_ADDR_EXP 8
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 2
1099: PUSH
1100: LD_INT 3
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_EXP 51
1113: PUSH
1114: LD_INT 1
1116: PLUS
1117: ARRAY
1118: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1119: LD_ADDR_EXP 9
1123: PUSH
1124: LD_EXP 52
1128: PUSH
1129: LD_INT 4
1131: PLUS
1132: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: LD_INT 4
1146: PUSH
1147: LD_INT 5
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: PUSH
1156: LD_EXP 53
1160: PUSH
1161: LD_INT 1
1163: PLUS
1164: ARRAY
1165: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1166: LD_ADDR_EXP 12
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: LD_INT 0
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 30
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: LD_INT 0
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 50
1201: PUSH
1202: LD_INT 20
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 80
1215: PUSH
1216: LD_INT 40
1218: PUSH
1219: LD_INT 20
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: LD_EXP 54
1237: PUSH
1238: LD_INT 1
1240: PLUS
1241: ARRAY
1242: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1243: LD_ADDR_EXP 11
1247: PUSH
1248: LD_INT 10
1250: PUSH
1251: EMPTY
1252: LIST
1253: PUSH
1254: LD_INT 7
1256: PUSH
1257: LD_INT 14
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 6
1266: PUSH
1267: LD_INT 12
1269: PUSH
1270: LD_INT 18
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 5
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: LD_INT 15
1286: PUSH
1287: LD_INT 20
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_EXP 54
1306: PUSH
1307: LD_INT 1
1309: PLUS
1310: ARRAY
1311: ST_TO_ADDR
// shipments_density := 720 - ( def_shipments_density * 2 ) ;
1312: LD_ADDR_EXP 13
1316: PUSH
1317: LD_INT 720
1319: PUSH
1320: LD_EXP 55
1324: PUSH
1325: LD_INT 2
1327: MUL
1328: MINUS
1329: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1330: LD_ADDR_EXP 15
1334: PUSH
1335: LD_INT 0
1337: PUSH
1338: LD_INT 1
1340: PUSH
1341: LD_INT 2
1343: PUSH
1344: LD_INT 3
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: PUSH
1353: LD_EXP 62
1357: PUSH
1358: LD_INT 1
1360: PLUS
1361: ARRAY
1362: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1363: LD_ADDR_EXP 16
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 12600
1373: PUSH
1374: LD_INT 2100
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_EXP 61
1386: PUSH
1387: LD_INT 1
1389: PLUS
1390: ARRAY
1391: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1392: LD_ADDR_EXP 17
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 21000
1402: PUSH
1403: LD_INT 4200
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 61
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_INT 1
1428: NEG
1429: PUSH
1430: LD_INT 350
1432: PUSH
1433: LD_INT 700
1435: PUSH
1436: LD_INT 1400
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_EXP 59
1453: PUSH
1454: LD_INT 1
1456: PLUS
1457: ARRAY
1458: ST_TO_ADDR
// battle_flags_id := [ ] ;
1459: LD_ADDR_EXP 34
1463: PUSH
1464: EMPTY
1465: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1466: LD_ADDR_EXP 18
1470: PUSH
1471: LD_INT 0
1473: PUSH
1474: LD_INT 1
1476: PUSH
1477: LD_INT 63000
1479: PUSH
1480: LD_INT 126000
1482: PUSH
1483: LD_INT 189000
1485: PUSH
1486: LD_INT 252000
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_EXP 63
1501: PUSH
1502: LD_INT 1
1504: PLUS
1505: ARRAY
1506: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1507: LD_ADDR_EXP 20
1511: PUSH
1512: LD_INT 500
1514: PUSH
1515: LD_INT 1000
1517: PUSH
1518: LD_INT 1500
1520: PUSH
1521: LD_INT 2000
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 5
1534: PUSH
1535: LD_INT 1
1537: PLUS
1538: ARRAY
1539: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1540: LD_ADDR_EXP 47
1544: PUSH
1545: LD_INT 21
1547: PUSH
1548: LD_INT 23
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 22
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 1
1567: RET
// function init_map ; var i ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1572: LD_ADDR_EXP 33
1576: PUSH
1577: LD_INT 43
1579: PUSH
1580: LD_INT 9
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 123
1589: PUSH
1590: LD_INT 10
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 113
1599: PUSH
1600: LD_INT 155
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 186
1609: PUSH
1610: LD_INT 133
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1623: LD_ADDR_EXP 30
1627: PUSH
1628: LD_INT 18
1630: PUSH
1631: LD_INT 17
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 156
1644: PUSH
1645: LD_INT 20
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 83
1658: PUSH
1659: LD_INT 140
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 216
1672: PUSH
1673: LD_INT 143
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: ST_TO_ADDR
// for i in depot_def do
1690: LD_ADDR_VAR 0 2
1694: PUSH
1695: LD_EXP 30
1699: PUSH
1700: FOR_IN
1701: IFFALSE 1775
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1703: LD_ADDR_EXP 32
1707: PUSH
1708: LD_EXP 32
1712: PUSH
1713: LD_VAR 0 2
1717: PUSH
1718: LD_INT 1
1720: ARRAY
1721: PPUSH
1722: LD_VAR 0 2
1726: PUSH
1727: LD_INT 3
1729: ARRAY
1730: PPUSH
1731: LD_INT 6
1733: PPUSH
1734: CALL_OW 272
1738: PUSH
1739: LD_VAR 0 2
1743: PUSH
1744: LD_INT 2
1746: ARRAY
1747: PPUSH
1748: LD_VAR 0 2
1752: PUSH
1753: LD_INT 3
1755: ARRAY
1756: PPUSH
1757: LD_INT 6
1759: PPUSH
1760: CALL_OW 273
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: EMPTY
1770: LIST
1771: ADD
1772: ST_TO_ADDR
1773: GO 1700
1775: POP
1776: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1777: LD_ADDR_EXP 31
1781: PUSH
1782: LD_INT 30
1784: PUSH
1785: LD_INT 36
1787: PUSH
1788: LD_INT 0
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 44
1798: PUSH
1799: LD_INT 21
1801: PUSH
1802: LD_INT 4
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 43
1812: PUSH
1813: LD_INT 33
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 165
1831: PUSH
1832: LD_INT 34
1834: PUSH
1835: LD_INT 0
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 137
1845: PUSH
1846: LD_INT 18
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 153
1859: PUSH
1860: LD_INT 37
1862: PUSH
1863: LD_INT 0
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 86
1878: PUSH
1879: LD_INT 120
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 105
1892: PUSH
1893: LD_INT 147
1895: PUSH
1896: LD_INT 4
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 68
1906: PUSH
1907: LD_INT 118
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 199
1925: PUSH
1926: LD_INT 144
1928: PUSH
1929: LD_INT 1
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 207
1939: PUSH
1940: LD_INT 119
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 195
1953: PUSH
1954: LD_INT 118
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: ST_TO_ADDR
// if not def_extra_oil_deposits then
1976: LD_EXP 56
1980: NOT
1981: IFFALSE 2022
// for i in extra_oil_deposits_locations do
1983: LD_ADDR_VAR 0 2
1987: PUSH
1988: LD_EXP 33
1992: PUSH
1993: FOR_IN
1994: IFFALSE 2020
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1996: LD_VAR 0 2
2000: PUSH
2001: LD_INT 1
2003: ARRAY
2004: PPUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_INT 2
2012: ARRAY
2013: PPUSH
2014: CALL_OW 63
2018: GO 1993
2020: POP
2021: POP
// end ;
2022: LD_VAR 0 1
2026: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2027: LD_INT 0
2029: PPUSH
2030: PPUSH
2031: PPUSH
// if not Team_Game then
2032: LD_EXP 25
2036: NOT
2037: IFFALSE 2135
// begin for i = 1 to 8 do
2039: LD_ADDR_VAR 0 2
2043: PUSH
2044: DOUBLE
2045: LD_INT 1
2047: DEC
2048: ST_TO_ADDR
2049: LD_INT 8
2051: PUSH
2052: FOR_TO
2053: IFFALSE 2131
// for j = 1 to 8 do
2055: LD_ADDR_VAR 0 3
2059: PUSH
2060: DOUBLE
2061: LD_INT 1
2063: DEC
2064: ST_TO_ADDR
2065: LD_INT 8
2067: PUSH
2068: FOR_TO
2069: IFFALSE 2127
// if i <> j then
2071: LD_VAR 0 2
2075: PUSH
2076: LD_VAR 0 3
2080: NONEQUAL
2081: IFFALSE 2105
// SetAttitude ( i , j , att_neutral , true ) else
2083: LD_VAR 0 2
2087: PPUSH
2088: LD_VAR 0 3
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 80
2103: GO 2125
// SetAttitude ( i , j , att_friend , true ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 80
2125: GO 2068
2127: POP
2128: POP
2129: GO 2052
2131: POP
2132: POP
// end else
2133: GO 2310
// begin if def_shared_vision then
2135: LD_EXP 58
2139: IFFALSE 2204
// begin for i in Teams do
2141: LD_ADDR_VAR 0 2
2145: PUSH
2146: LD_EXP 22
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2202
// for j = 2 to i do
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: DOUBLE
2160: LD_INT 2
2162: DEC
2163: ST_TO_ADDR
2164: LD_VAR 0 2
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2198
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2172: LD_VAR 0 2
2176: PUSH
2177: LD_VAR 0 3
2181: ARRAY
2182: PPUSH
2183: LD_VAR 0 2
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: CALL_OW 343
2196: GO 2169
2198: POP
2199: POP
2200: GO 2151
2202: POP
2203: POP
// end ; for i = 1 to 8 do
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: DOUBLE
2210: LD_INT 1
2212: DEC
2213: ST_TO_ADDR
2214: LD_INT 8
2216: PUSH
2217: FOR_TO
2218: IFFALSE 2308
// for j = 1 to 8 do
2220: LD_ADDR_VAR 0 3
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2304
// if Side_Teams [ i ] = Side_Teams [ j ] then
2236: LD_EXP 21
2240: PUSH
2241: LD_VAR 0 2
2245: ARRAY
2246: PUSH
2247: LD_EXP 21
2251: PUSH
2252: LD_VAR 0 3
2256: ARRAY
2257: EQUAL
2258: IFFALSE 2282
// SetAttitude ( i , j , att_friend , true ) else
2260: LD_VAR 0 2
2264: PPUSH
2265: LD_VAR 0 3
2269: PPUSH
2270: LD_INT 1
2272: PPUSH
2273: LD_INT 1
2275: PPUSH
2276: CALL_OW 80
2280: GO 2302
// SetAttitude ( i , j , att_enemy , true ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 3
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL_OW 80
2302: GO 2233
2304: POP
2305: POP
2306: GO 2217
2308: POP
2309: POP
// end ; end ;
2310: LD_VAR 0 1
2314: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2315: LD_INT 0
2317: PPUSH
2318: PPUSH
2319: PPUSH
2320: PPUSH
// result := [ ] ;
2321: LD_ADDR_VAR 0 7
2325: PUSH
2326: EMPTY
2327: ST_TO_ADDR
// for i := 1 to count do
2328: LD_ADDR_VAR 0 8
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_VAR 0 1
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2762
// begin uc_direction := Rand ( 0 , 5 ) ;
2346: LD_ADDR_OWVAR 24
2350: PUSH
2351: LD_INT 0
2353: PPUSH
2354: LD_INT 5
2356: PPUSH
2357: CALL_OW 12
2361: ST_TO_ADDR
// if commander then
2362: LD_LOC 1
2366: IFFALSE 2475
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2368: LD_ADDR_OWVAR 26
2372: PUSH
2373: LD_OWVAR 19
2377: PUSH
2378: LD_OWVAR 20
2382: ARRAY
2383: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2384: LD_INT 1
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: CALL_OW 12
2394: PPUSH
2395: LD_VAR 0 2
2399: PPUSH
2400: LD_EXP 10
2404: PUSH
2405: LD_INT 2
2407: PLUS
2408: PPUSH
2409: CALL_OW 380
// hc_importance := 105 ;
2413: LD_ADDR_OWVAR 32
2417: PUSH
2418: LD_INT 105
2420: ST_TO_ADDR
// commander := false ;
2421: LD_ADDR_LOC 1
2425: PUSH
2426: LD_INT 0
2428: ST_TO_ADDR
// if Multiplayer then
2429: LD_OWVAR 4
2433: IFFALSE 2473
// begin hc_gallery := MULTIAVATARS ;
2435: LD_ADDR_OWVAR 33
2439: PUSH
2440: LD_STRING MULTIAVATARS
2442: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2443: LD_ADDR_OWVAR 34
2447: PUSH
2448: LD_OWVAR 20
2452: PPUSH
2453: CALL_OW 525
2457: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2458: LD_ADDR_OWVAR 27
2462: PUSH
2463: LD_OWVAR 20
2467: PPUSH
2468: CALL_OW 526
2472: ST_TO_ADDR
// end ; end else
2473: GO 2538
// begin hc_name :=  ;
2475: LD_ADDR_OWVAR 26
2479: PUSH
2480: LD_STRING 
2482: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2483: LD_INT 1
2485: PPUSH
2486: LD_INT 2
2488: PPUSH
2489: CALL_OW 12
2493: PPUSH
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_EXP 10
2503: PPUSH
2504: CALL_OW 380
// hc_importance := 0 ;
2508: LD_ADDR_OWVAR 32
2512: PUSH
2513: LD_INT 0
2515: ST_TO_ADDR
// if Multiplayer then
2516: LD_OWVAR 4
2520: IFFALSE 2538
// begin hc_gallery :=  ;
2522: LD_ADDR_OWVAR 33
2526: PUSH
2527: LD_STRING 
2529: ST_TO_ADDR
// hc_face_number := 0 ;
2530: LD_ADDR_OWVAR 34
2534: PUSH
2535: LD_INT 0
2537: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2538: LD_ADDR_VAR 0 10
2542: PUSH
2543: CALL_OW 44
2547: ST_TO_ADDR
// if global_defined then
2548: LD_LOC 3
2552: IFFALSE 2692
// begin if ( cl = class_soldier ) then
2554: LD_VAR 0 2
2558: PUSH
2559: LD_INT 1
2561: EQUAL
2562: IFFALSE 2582
// j := i + soldiers_created else
2564: LD_ADDR_VAR 0 9
2568: PUSH
2569: LD_VAR 0 8
2573: PUSH
2574: LD_LOC 4
2578: PLUS
2579: ST_TO_ADDR
2580: GO 2592
// j := i ;
2582: LD_ADDR_VAR 0 9
2586: PUSH
2587: LD_VAR 0 8
2591: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2592: LD_LOC 2
2596: PUSH
2597: LD_VAR 0 2
2601: ARRAY
2602: PUSH
2603: LD_VAR 0 9
2607: ARRAY
2608: PPUSH
2609: LD_VAR 0 10
2613: PPUSH
2614: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2618: LD_VAR 0 10
2622: PPUSH
2623: LD_INT 2
2625: PPUSH
2626: LD_LOC 2
2630: PUSH
2631: LD_VAR 0 2
2635: ARRAY
2636: PUSH
2637: LD_VAR 0 9
2641: ARRAY
2642: PPUSH
2643: LD_INT 2
2645: PPUSH
2646: CALL_OW 260
2650: PPUSH
2651: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2655: LD_VAR 0 10
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: LD_LOC 2
2667: PUSH
2668: LD_VAR 0 2
2672: ARRAY
2673: PUSH
2674: LD_VAR 0 9
2678: ARRAY
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL_OW 260
2687: PPUSH
2688: CALL_OW 239
// end ; if building then
2692: LD_VAR 0 6
2696: IFFALSE 2714
// PlaceHumanInUnit ( un , building ) else
2698: LD_VAR 0 10
2702: PPUSH
2703: LD_VAR 0 6
2707: PPUSH
2708: CALL_OW 52
2712: GO 2741
// PlaceUnitXYR ( un , x , y , r , false ) ;
2714: LD_VAR 0 10
2718: PPUSH
2719: LD_VAR 0 3
2723: PPUSH
2724: LD_VAR 0 4
2728: PPUSH
2729: LD_VAR 0 5
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL_OW 50
// result := result ^ [ un ] ;
2741: LD_ADDR_VAR 0 7
2745: PUSH
2746: LD_VAR 0 7
2750: PUSH
2751: LD_VAR 0 10
2755: PUSH
2756: EMPTY
2757: LIST
2758: ADD
2759: ST_TO_ADDR
// end ;
2760: GO 2343
2762: POP
2763: POP
// if not global_defined then
2764: LD_LOC 3
2768: NOT
2769: IFFALSE 2847
// if ( global_units >= cl ) then
2771: LD_LOC 2
2775: PUSH
2776: LD_VAR 0 2
2780: GREATEREQUAL
2781: IFFALSE 2822
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2783: LD_ADDR_LOC 2
2787: PUSH
2788: LD_LOC 2
2792: PPUSH
2793: LD_VAR 0 2
2797: PPUSH
2798: LD_LOC 2
2802: PUSH
2803: LD_VAR 0 2
2807: ARRAY
2808: PUSH
2809: LD_VAR 0 7
2813: ADD
2814: PPUSH
2815: CALL_OW 1
2819: ST_TO_ADDR
2820: GO 2847
// global_units := Replace ( global_units , cl , result ) ;
2822: LD_ADDR_LOC 2
2826: PUSH
2827: LD_LOC 2
2831: PPUSH
2832: LD_VAR 0 2
2836: PPUSH
2837: LD_VAR 0 7
2841: PPUSH
2842: CALL_OW 1
2846: ST_TO_ADDR
// if commander then
2847: LD_LOC 1
2851: IFFALSE 2898
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2853: LD_ADDR_EXP 35
2857: PUSH
2858: LD_EXP 35
2862: PPUSH
2863: LD_OWVAR 20
2867: PPUSH
2868: LD_EXP 35
2872: PUSH
2873: LD_OWVAR 20
2877: ARRAY
2878: PUSH
2879: LD_VAR 0 10
2883: ADD
2884: PPUSH
2885: CALL_OW 1
2889: ST_TO_ADDR
// commander := false ;
2890: LD_ADDR_LOC 1
2894: PUSH
2895: LD_INT 0
2897: ST_TO_ADDR
// end ; end ;
2898: LD_VAR 0 7
2902: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2903: LD_INT 0
2905: PPUSH
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
2913: PPUSH
// if side in [ 0 , 9 ] then
2914: LD_VAR 0 1
2918: PUSH
2919: LD_INT 0
2921: PUSH
2922: LD_INT 9
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: IN
2929: IFFALSE 2933
// exit ;
2931: GO 4008
// pos := Side_Positions [ side ] ;
2933: LD_ADDR_VAR 0 3
2937: PUSH
2938: LD_EXP 23
2942: PUSH
2943: LD_VAR 0 1
2947: ARRAY
2948: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_EXP 24
2958: PUSH
2959: LD_VAR 0 1
2963: ARRAY
2964: ST_TO_ADDR
// uc_side := side ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_VAR 0 1
2974: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2975: LD_ADDR_VAR 0 4
2979: PUSH
2980: LD_EXP 30
2984: PUSH
2985: LD_VAR 0 3
2989: ARRAY
2990: PUSH
2991: LD_INT 1
2993: ARRAY
2994: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2995: LD_ADDR_VAR 0 5
2999: PUSH
3000: LD_EXP 30
3004: PUSH
3005: LD_VAR 0 3
3009: ARRAY
3010: PUSH
3011: LD_INT 2
3013: ARRAY
3014: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3015: LD_ADDR_VAR 0 6
3019: PUSH
3020: LD_EXP 30
3024: PUSH
3025: LD_VAR 0 3
3029: ARRAY
3030: PUSH
3031: LD_INT 3
3033: ARRAY
3034: ST_TO_ADDR
// if is_depot then
3035: LD_EXP 7
3039: IFFALSE 3172
// begin bc_type = b_depot ;
3041: LD_ADDR_OWVAR 42
3045: PUSH
3046: LD_INT 0
3048: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3049: LD_ADDR_VAR 0 10
3053: PUSH
3054: LD_VAR 0 4
3058: PPUSH
3059: LD_VAR 0 5
3063: PPUSH
3064: LD_VAR 0 6
3068: PPUSH
3069: CALL_OW 47
3073: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3074: LD_VAR 0 10
3078: PPUSH
3079: LD_STRING @
3081: PUSH
3082: LD_VAR 0 1
3086: STR
3087: PPUSH
3088: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3092: LD_VAR 0 10
3096: PPUSH
3097: CALL_OW 274
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: LD_EXP 12
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: PPUSH
3114: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3118: LD_VAR 0 10
3122: PPUSH
3123: CALL_OW 274
3127: PPUSH
3128: LD_INT 2
3130: PPUSH
3131: LD_EXP 12
3135: PUSH
3136: LD_INT 2
3138: ARRAY
3139: PPUSH
3140: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3144: LD_VAR 0 10
3148: PPUSH
3149: CALL_OW 274
3153: PPUSH
3154: LD_INT 3
3156: PPUSH
3157: LD_EXP 12
3161: PUSH
3162: LD_INT 3
3164: ARRAY
3165: PPUSH
3166: CALL_OW 277
// end else
3170: GO 3316
// begin for i := 1 to 3 do
3172: LD_ADDR_VAR 0 7
3176: PUSH
3177: DOUBLE
3178: LD_INT 1
3180: DEC
3181: ST_TO_ADDR
3182: LD_INT 3
3184: PUSH
3185: FOR_TO
3186: IFFALSE 3314
// begin r := starting_resources [ i ] ;
3188: LD_ADDR_VAR 0 8
3192: PUSH
3193: LD_EXP 12
3197: PUSH
3198: LD_VAR 0 7
3202: ARRAY
3203: ST_TO_ADDR
// while r >= 10 do
3204: LD_VAR 0 8
3208: PUSH
3209: LD_INT 10
3211: GREATEREQUAL
3212: IFFALSE 3312
// if r > 50 then
3214: LD_VAR 0 8
3218: PUSH
3219: LD_INT 50
3221: GREATER
3222: IFFALSE 3268
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3224: LD_VAR 0 7
3228: PPUSH
3229: LD_INT 5
3231: PPUSH
3232: LD_VAR 0 4
3236: PPUSH
3237: LD_VAR 0 5
3241: PPUSH
3242: LD_INT 4
3244: PPUSH
3245: LD_INT 0
3247: PPUSH
3248: CALL_OW 60
// r := r - 50 ;
3252: LD_ADDR_VAR 0 8
3256: PUSH
3257: LD_VAR 0 8
3261: PUSH
3262: LD_INT 50
3264: MINUS
3265: ST_TO_ADDR
// end else
3266: GO 3310
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3268: LD_VAR 0 7
3272: PPUSH
3273: LD_VAR 0 8
3277: PUSH
3278: LD_INT 10
3280: DIV
3281: PPUSH
3282: LD_VAR 0 4
3286: PPUSH
3287: LD_VAR 0 5
3291: PPUSH
3292: LD_INT 4
3294: PPUSH
3295: LD_INT 0
3297: PPUSH
3298: CALL_OW 60
// r := 0 ;
3302: LD_ADDR_VAR 0 8
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// end ;
3310: GO 3204
// end ;
3312: GO 3185
3314: POP
3315: POP
// end ; for r in starting_crates do
3316: LD_ADDR_VAR 0 8
3320: PUSH
3321: LD_EXP 11
3325: PUSH
3326: FOR_IN
3327: IFFALSE 3359
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3329: LD_INT 1
3331: PPUSH
3332: LD_INT 5
3334: PPUSH
3335: LD_VAR 0 4
3339: PPUSH
3340: LD_VAR 0 5
3344: PPUSH
3345: LD_VAR 0 8
3349: PPUSH
3350: LD_INT 0
3352: PPUSH
3353: CALL_OW 60
3357: GO 3326
3359: POP
3360: POP
// if def_morale_flags then
3361: LD_EXP 59
3365: IFFALSE 3504
// begin x := start_def [ pos ] [ 1 ] ;
3367: LD_ADDR_VAR 0 4
3371: PUSH
3372: LD_EXP 32
3376: PUSH
3377: LD_VAR 0 3
3381: ARRAY
3382: PUSH
3383: LD_INT 1
3385: ARRAY
3386: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3387: LD_ADDR_VAR 0 5
3391: PUSH
3392: LD_EXP 32
3396: PUSH
3397: LD_VAR 0 3
3401: ARRAY
3402: PUSH
3403: LD_INT 2
3405: ARRAY
3406: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3407: LD_VAR 0 4
3411: PPUSH
3412: LD_VAR 0 5
3416: PPUSH
3417: LD_INT 12
3419: PPUSH
3420: LD_INT 2
3422: PPUSH
3423: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3427: LD_ADDR_EXP 34
3431: PUSH
3432: LD_EXP 34
3436: PUSH
3437: LD_VAR 0 1
3441: PPUSH
3442: LD_VAR 0 4
3446: PPUSH
3447: LD_VAR 0 5
3451: PPUSH
3452: LD_INT 1
3454: PUSH
3455: LD_INT 100
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: LD_INT 2
3464: PUSH
3465: LD_INT 50
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 3
3474: PUSH
3475: LD_INT 20
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 20
3484: PUSH
3485: LD_INT 100
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 418
3502: ADD
3503: ST_TO_ADDR
// end ; commander := true ;
3504: LD_ADDR_LOC 1
3508: PUSH
3509: LD_INT 1
3511: ST_TO_ADDR
// soldiers_created := 0 ;
3512: LD_ADDR_LOC 4
3516: PUSH
3517: LD_INT 0
3519: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3520: LD_ADDR_VAR 0 7
3524: PUSH
3525: DOUBLE
3526: LD_INT 1
3528: DEC
3529: ST_TO_ADDR
3530: LD_EXP 8
3534: PUSH
3535: FOR_TO
3536: IFFALSE 3689
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3538: LD_ADDR_VAR 0 4
3542: PUSH
3543: LD_EXP 31
3547: PUSH
3548: LD_VAR 0 3
3552: ARRAY
3553: PUSH
3554: LD_VAR 0 7
3558: ARRAY
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3564: LD_ADDR_VAR 0 5
3568: PUSH
3569: LD_EXP 31
3573: PUSH
3574: LD_VAR 0 3
3578: ARRAY
3579: PUSH
3580: LD_VAR 0 7
3584: ARRAY
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3590: LD_ADDR_VAR 0 6
3594: PUSH
3595: LD_EXP 31
3599: PUSH
3600: LD_VAR 0 3
3604: ARRAY
3605: PUSH
3606: LD_VAR 0 7
3610: ARRAY
3611: PUSH
3612: LD_INT 3
3614: ARRAY
3615: ST_TO_ADDR
// bc_type := b_breastwork ;
3616: LD_ADDR_OWVAR 42
3620: PUSH
3621: LD_INT 31
3623: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3624: LD_ADDR_VAR 0 9
3628: PUSH
3629: LD_VAR 0 4
3633: PPUSH
3634: LD_VAR 0 5
3638: PPUSH
3639: LD_VAR 0 6
3643: PPUSH
3644: CALL_OW 47
3648: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3649: LD_INT 1
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_INT 0
3657: PPUSH
3658: LD_INT 0
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: LD_VAR 0 9
3668: PPUSH
3669: CALL 2315 0 6
// soldiers_created := soldiers_created + 1 ;
3673: LD_ADDR_LOC 4
3677: PUSH
3678: LD_LOC 4
3682: PUSH
3683: LD_INT 1
3685: PLUS
3686: ST_TO_ADDR
// end ;
3687: GO 3535
3689: POP
3690: POP
// x := start_def [ pos ] [ 1 ] ;
3691: LD_ADDR_VAR 0 4
3695: PUSH
3696: LD_EXP 32
3700: PUSH
3701: LD_VAR 0 3
3705: ARRAY
3706: PUSH
3707: LD_INT 1
3709: ARRAY
3710: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3711: LD_ADDR_VAR 0 5
3715: PUSH
3716: LD_EXP 32
3720: PUSH
3721: LD_VAR 0 3
3725: ARRAY
3726: PUSH
3727: LD_INT 2
3729: ARRAY
3730: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3731: LD_LOC 8
3735: PUSH
3736: LD_EXP 8
3740: MINUS
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: LD_VAR 0 4
3749: PPUSH
3750: LD_VAR 0 5
3754: PPUSH
3755: LD_INT 5
3757: PPUSH
3758: LD_INT 0
3760: PPUSH
3761: CALL 2315 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3765: LD_LOC 5
3769: PPUSH
3770: LD_INT 2
3772: PPUSH
3773: LD_VAR 0 4
3777: PPUSH
3778: LD_VAR 0 5
3782: PPUSH
3783: LD_INT 5
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: CALL 2315 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3793: LD_LOC 7
3797: PPUSH
3798: LD_INT 3
3800: PPUSH
3801: LD_VAR 0 4
3805: PPUSH
3806: LD_VAR 0 5
3810: PPUSH
3811: LD_INT 5
3813: PPUSH
3814: LD_INT 0
3816: PPUSH
3817: CALL 2315 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3821: LD_LOC 6
3825: PPUSH
3826: LD_INT 4
3828: PPUSH
3829: LD_VAR 0 4
3833: PPUSH
3834: LD_VAR 0 5
3838: PPUSH
3839: LD_INT 5
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: CALL 2315 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3849: LD_EXP 60
3853: PUSH
3854: LD_INT 20
3856: PPUSH
3857: LD_VAR 0 1
3861: PPUSH
3862: CALL_OW 321
3866: PUSH
3867: LD_INT 1
3869: EQUAL
3870: AND
3871: IFFALSE 3888
// SetTech ( tech_SibDet , side , state_researched ) ;
3873: LD_INT 20
3875: PPUSH
3876: LD_VAR 0 1
3880: PPUSH
3881: LD_INT 2
3883: PPUSH
3884: CALL_OW 322
// if def_siberite_bomb = 1 then
3888: LD_EXP 63
3892: PUSH
3893: LD_INT 1
3895: EQUAL
3896: IFFALSE 3930
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3898: LD_INT 25
3900: PPUSH
3901: LD_VAR 0 1
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3913: LD_INT 73
3915: PPUSH
3916: LD_VAR 0 1
3920: PPUSH
3921: LD_INT 1
3923: PPUSH
3924: CALL_OW 322
// end else
3928: GO 3960
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3930: LD_INT 25
3932: PPUSH
3933: LD_VAR 0 1
3937: PPUSH
3938: LD_INT 0
3940: PPUSH
3941: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3945: LD_INT 73
3947: PPUSH
3948: LD_VAR 0 1
3952: PPUSH
3953: LD_INT 0
3955: PPUSH
3956: CALL_OW 322
// end ; if Game_Type = 3 then
3960: LD_EXP 49
3964: PUSH
3965: LD_INT 3
3967: EQUAL
3968: IFFALSE 3985
// SetTech ( tech_partinvis , side , state_disabled ) ;
3970: LD_INT 16
3972: PPUSH
3973: LD_VAR 0 1
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3985: LD_INT 24
3987: PPUSH
3988: LD_VAR 0 1
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: CALL_OW 322
// global_defined := true ;
4000: LD_ADDR_LOC 3
4004: PUSH
4005: LD_INT 1
4007: ST_TO_ADDR
// end ;
4008: LD_VAR 0 2
4012: RET
// every 0 0$1 do
4013: GO 4015
4015: DISABLE
// if ( def_siberite_bomb > 1 ) then
4016: LD_EXP 63
4020: PUSH
4021: LD_INT 1
4023: GREATER
4024: IFFALSE 4039
// begin wait ( siberite_bomb_Delay ) ;
4026: LD_EXP 18
4030: PPUSH
4031: CALL_OW 67
// EnableSibFiss ;
4035: CALL 4040 0 0
// end ;
4039: END
// function EnableSibFiss ; var i ; begin
4040: LD_INT 0
4042: PPUSH
4043: PPUSH
// for i := 1 to 8 do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_INT 8
4056: PUSH
4057: FOR_TO
4058: IFFALSE 4104
// if Side_Positions [ i ] then
4060: LD_EXP 23
4064: PUSH
4065: LD_VAR 0 2
4069: ARRAY
4070: IFFALSE 4102
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4072: LD_INT 25
4074: PPUSH
4075: LD_VAR 0 2
4079: PPUSH
4080: LD_INT 1
4082: PPUSH
4083: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4087: LD_INT 73
4089: PPUSH
4090: LD_VAR 0 2
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: CALL_OW 322
// end ;
4102: GO 4057
4104: POP
4105: POP
// end ;
4106: LD_VAR 0 1
4110: RET
// function prepare_sides ; var i ; begin
4111: LD_INT 0
4113: PPUSH
4114: PPUSH
// global_units := [ ] ;
4115: LD_ADDR_LOC 2
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// global_defined := false ;
4122: LD_ADDR_LOC 3
4126: PUSH
4127: LD_INT 0
4129: ST_TO_ADDR
// CountClassMembers ;
4130: CALL 4180 0 0
// for i := 1 to 8 do
4134: LD_ADDR_VAR 0 2
4138: PUSH
4139: DOUBLE
4140: LD_INT 1
4142: DEC
4143: ST_TO_ADDR
4144: LD_INT 8
4146: PUSH
4147: FOR_TO
4148: IFFALSE 4173
// if Side_Positions [ i ] then
4150: LD_EXP 23
4154: PUSH
4155: LD_VAR 0 2
4159: ARRAY
4160: IFFALSE 4171
// prepare_side ( i ) ;
4162: LD_VAR 0 2
4166: PPUSH
4167: CALL 2903 0 1
4171: GO 4147
4173: POP
4174: POP
// end ;
4175: LD_VAR 0 1
4179: RET
// function CountClassMembers ; var Mode ; begin
4180: LD_INT 0
4182: PPUSH
4183: PPUSH
// if No_Mechs then
4184: LD_EXP 65
4188: IFFALSE 4200
// Mode := 2 else
4190: LD_ADDR_VAR 0 2
4194: PUSH
4195: LD_INT 2
4197: ST_TO_ADDR
4198: GO 4208
// Mode := 1 ;
4200: LD_ADDR_VAR 0 2
4204: PUSH
4205: LD_INT 1
4207: ST_TO_ADDR
// neng := number_of_people ;
4208: LD_ADDR_LOC 5
4212: PUSH
4213: LD_EXP 9
4217: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4218: LD_ADDR_LOC 8
4222: PUSH
4223: LD_LOC 5
4227: PUSH
4228: LD_INT 4
4230: PUSH
4231: LD_INT 3
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: LD_VAR 0 2
4242: ARRAY
4243: DIV
4244: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4245: LD_LOC 8
4249: PUSH
4250: LD_EXP 8
4254: LESS
4255: IFFALSE 4267
// nsol := number_of_breastworks ;
4257: LD_ADDR_LOC 8
4261: PUSH
4262: LD_EXP 8
4266: ST_TO_ADDR
// neng := neng - nsol ;
4267: LD_ADDR_LOC 5
4271: PUSH
4272: LD_LOC 5
4276: PUSH
4277: LD_LOC 8
4281: MINUS
4282: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4283: LD_ADDR_LOC 6
4287: PUSH
4288: LD_LOC 5
4292: PUSH
4293: LD_INT 3
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_VAR 0 2
4307: ARRAY
4308: DIV
4309: ST_TO_ADDR
// if ( nsci < 1 ) then
4310: LD_LOC 6
4314: PUSH
4315: LD_INT 1
4317: LESS
4318: IFFALSE 4328
// nsci := 1 ;
4320: LD_ADDR_LOC 6
4324: PUSH
4325: LD_INT 1
4327: ST_TO_ADDR
// neng := neng - nsci ;
4328: LD_ADDR_LOC 5
4332: PUSH
4333: LD_LOC 5
4337: PUSH
4338: LD_LOC 6
4342: MINUS
4343: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4344: LD_ADDR_LOC 7
4348: PUSH
4349: LD_LOC 5
4353: PUSH
4354: LD_INT 2
4356: DIV
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: ST_TO_ADDR
// neng := neng - nmech ;
4371: LD_ADDR_LOC 5
4375: PUSH
4376: LD_LOC 5
4380: PUSH
4381: LD_LOC 7
4385: MINUS
4386: ST_TO_ADDR
// if ( neng < 1 ) then
4387: LD_LOC 5
4391: PUSH
4392: LD_INT 1
4394: LESS
4395: IFFALSE 4405
// neng := 1 ;
4397: LD_ADDR_LOC 5
4401: PUSH
4402: LD_INT 1
4404: ST_TO_ADDR
// end ;
4405: LD_VAR 0 1
4409: RET
// starting begin disable ( 1 ) ;
4410: LD_INT 1
4412: DISABLE_MARKED
// disable ( 2 ) ;
4413: LD_INT 2
4415: DISABLE_MARKED
// disable ( 3 ) ;
4416: LD_INT 3
4418: DISABLE_MARKED
// disable ( 4 ) ;
4419: LD_INT 4
4421: DISABLE_MARKED
// disable ( 5 ) ;
4422: LD_INT 5
4424: DISABLE_MARKED
// disable ( 6 ) ;
4425: LD_INT 6
4427: DISABLE_MARKED
// disable ( 7 ) ;
4428: LD_INT 7
4430: DISABLE_MARKED
// disable ( 10 ) ;
4431: LD_INT 10
4433: DISABLE_MARKED
// disable ( 20 ) ;
4434: LD_INT 20
4436: DISABLE_MARKED
// disable ( 98 ) ;
4437: LD_INT 98
4439: DISABLE_MARKED
// disable ( 99 ) ;
4440: LD_INT 99
4442: DISABLE_MARKED
// disable ( 400 ) ;
4443: LD_INT 400
4445: DISABLE_MARKED
// disable ( 401 ) ;
4446: LD_INT 401
4448: DISABLE_MARKED
// disable ( 600 ) ;
4449: LD_INT 600
4451: DISABLE_MARKED
// mp_selectmsg := true ;
4452: LD_ADDR_OWVAR 13
4456: PUSH
4457: LD_INT 1
4459: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4460: CALL 68 0 0
// init_map ;
4464: CALL 1568 0 0
// init_shipments ;
4468: CALL 4654 0 0
// init_respawn ;
4472: CALL 6337 0 0
// set_shared_visions_and_alliances ;
4476: CALL 2027 0 0
// ResetFog ;
4480: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4484: LD_OWVAR 2
4488: PPUSH
4489: CALL_OW 520
// prepare_sides ;
4493: CALL 4111 0 0
// Init_Win_Condition ;
4497: CALL 18514 0 0
// InitLimits ;
4501: CALL 16387 0 0
// ShowTimer ;
4505: CALL 17324 0 0
// case Game_Type of 2 :
4509: LD_EXP 49
4513: PUSH
4514: LD_INT 2
4516: DOUBLE
4517: EQUAL
4518: IFTRUE 4522
4520: GO 4529
4522: POP
// init_alien_research ; 3 :
4523: CALL 7567 0 0
4527: GO 4549
4529: LD_INT 3
4531: DOUBLE
4532: EQUAL
4533: IFTRUE 4537
4535: GO 4548
4537: POP
// begin InitPoints ( ) ;
4538: CALL 17517 0 0
// init_kings_counting ;
4542: CALL 19877 0 0
// end ; end ;
4546: GO 4549
4548: POP
// music_nat := Side_Nations [ your_side ] ;
4549: LD_ADDR_OWVAR 71
4553: PUSH
4554: LD_EXP 24
4558: PUSH
4559: LD_OWVAR 2
4563: ARRAY
4564: ST_TO_ADDR
// if IAmSpec then
4565: CALL_OW 531
4569: IFFALSE 4593
// begin fogOff ( true ) ;
4571: LD_INT 1
4573: PPUSH
4574: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4578: LD_INT 119
4580: PPUSH
4581: LD_INT 79
4583: PPUSH
4584: CALL_OW 86
// enable ( 400 ) ;
4588: LD_INT 400
4590: ENABLE_MARKED
// end else
4591: GO 4639
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4593: LD_EXP 32
4597: PUSH
4598: LD_EXP 23
4602: PUSH
4603: LD_OWVAR 2
4607: ARRAY
4608: ARRAY
4609: PUSH
4610: LD_INT 1
4612: ARRAY
4613: PPUSH
4614: LD_EXP 32
4618: PUSH
4619: LD_EXP 23
4623: PUSH
4624: LD_OWVAR 2
4628: ARRAY
4629: ARRAY
4630: PUSH
4631: LD_INT 2
4633: ARRAY
4634: PPUSH
4635: CALL_OW 86
// end ; InitApeman ;
4639: CALL 5512 0 0
// if def_builduptime then
4643: LD_EXP 64
4647: IFFALSE 4653
// BeginBuildUp ;
4649: CALL 13561 0 0
// end ; end_of_file
4653: END
// var shipment , tictac ; export function init_shipments ; begin
4654: LD_INT 0
4656: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4657: LD_ADDR_LOC 9
4661: PUSH
4662: LD_INT 0
4664: PPUSH
4665: LD_INT 3
4667: PPUSH
4668: CALL_OW 12
4672: ST_TO_ADDR
// tictac := 0 ;
4673: LD_ADDR_LOC 10
4677: PUSH
4678: LD_INT 0
4680: ST_TO_ADDR
// end ;
4681: LD_VAR 0 1
4685: RET
// every 1 1$0 + 0 0$0.3 do
4686: GO 4688
4688: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
4689: LD_INT 4
4691: PPUSH
4692: LD_INT 5
4694: PPUSH
4695: CALL_OW 12
4699: PPUSH
4700: LD_INT 1
4702: PPUSH
4703: CALL_OW 57
// enable ;
4707: ENABLE
// end ;
4708: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4709: GO 4711
4711: DISABLE
4712: LD_INT 0
4714: PPUSH
4715: PPUSH
// begin case tick of 1 .. 1 1$0 :
4716: LD_OWVAR 1
4720: PUSH
4721: LD_INT 1
4723: DOUBLE
4724: GREATEREQUAL
4725: IFFALSE 4733
4727: LD_INT 2100
4729: DOUBLE
4730: LESSEQUAL
4731: IFTRUE 4735
4733: GO 4763
4735: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4736: LD_EXP 13
4740: PUSH
4741: LD_INT 100
4743: DIVREAL
4744: PUSH
4745: LD_INT 525
4747: PPUSH
4748: LD_INT 1050
4750: PPUSH
4751: CALL_OW 12
4755: MUL
4756: PPUSH
4757: CALL_OW 67
4761: GO 5065
4763: LD_INT 2100
4765: PUSH
4766: LD_INT 1
4768: PLUS
4769: DOUBLE
4770: GREATEREQUAL
4771: IFFALSE 4779
4773: LD_INT 10500
4775: DOUBLE
4776: LESSEQUAL
4777: IFTRUE 4781
4779: GO 4809
4781: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4782: LD_EXP 13
4786: PUSH
4787: LD_INT 100
4789: DIVREAL
4790: PUSH
4791: LD_INT 1050
4793: PPUSH
4794: LD_INT 1225
4796: PPUSH
4797: CALL_OW 12
4801: MUL
4802: PPUSH
4803: CALL_OW 67
4807: GO 5065
4809: LD_INT 10500
4811: PUSH
4812: LD_INT 1
4814: PLUS
4815: DOUBLE
4816: GREATEREQUAL
4817: IFFALSE 4825
4819: LD_INT 21000
4821: DOUBLE
4822: LESSEQUAL
4823: IFTRUE 4827
4825: GO 4855
4827: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4828: LD_EXP 13
4832: PUSH
4833: LD_INT 100
4835: DIVREAL
4836: PUSH
4837: LD_INT 1225
4839: PPUSH
4840: LD_INT 1750
4842: PPUSH
4843: CALL_OW 12
4847: MUL
4848: PPUSH
4849: CALL_OW 67
4853: GO 5065
4855: LD_INT 21000
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: DOUBLE
4862: GREATEREQUAL
4863: IFFALSE 4871
4865: LD_INT 42000
4867: DOUBLE
4868: LESSEQUAL
4869: IFTRUE 4873
4871: GO 4901
4873: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4874: LD_EXP 13
4878: PUSH
4879: LD_INT 100
4881: DIVREAL
4882: PUSH
4883: LD_INT 1750
4885: PPUSH
4886: LD_INT 2450
4888: PPUSH
4889: CALL_OW 12
4893: MUL
4894: PPUSH
4895: CALL_OW 67
4899: GO 5065
4901: LD_INT 42000
4903: PUSH
4904: LD_INT 1
4906: PLUS
4907: DOUBLE
4908: GREATEREQUAL
4909: IFFALSE 4917
4911: LD_INT 63000
4913: DOUBLE
4914: LESSEQUAL
4915: IFTRUE 4919
4917: GO 4947
4919: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4920: LD_EXP 13
4924: PUSH
4925: LD_INT 100
4927: DIVREAL
4928: PUSH
4929: LD_INT 2450
4931: PPUSH
4932: LD_INT 2800
4934: PPUSH
4935: CALL_OW 12
4939: MUL
4940: PPUSH
4941: CALL_OW 67
4945: GO 5065
4947: LD_INT 63000
4949: PUSH
4950: LD_INT 1
4952: PLUS
4953: DOUBLE
4954: GREATEREQUAL
4955: IFFALSE 4963
4957: LD_INT 105000
4959: DOUBLE
4960: LESSEQUAL
4961: IFTRUE 4965
4963: GO 4993
4965: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4966: LD_EXP 13
4970: PUSH
4971: LD_INT 100
4973: DIVREAL
4974: PUSH
4975: LD_INT 2800
4977: PPUSH
4978: LD_INT 3325
4980: PPUSH
4981: CALL_OW 12
4985: MUL
4986: PPUSH
4987: CALL_OW 67
4991: GO 5065
4993: LD_INT 105000
4995: PUSH
4996: LD_INT 1
4998: PLUS
4999: DOUBLE
5000: GREATEREQUAL
5001: IFFALSE 5009
5003: LD_INT 630000
5005: DOUBLE
5006: LESSEQUAL
5007: IFTRUE 5011
5009: GO 5039
5011: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
5012: LD_EXP 13
5016: PUSH
5017: LD_INT 100
5019: DIVREAL
5020: PUSH
5021: LD_INT 3325
5023: PPUSH
5024: LD_INT 4200
5026: PPUSH
5027: CALL_OW 12
5031: MUL
5032: PPUSH
5033: CALL_OW 67
5037: GO 5065
5039: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5040: LD_EXP 13
5044: PUSH
5045: LD_INT 100
5047: DIVREAL
5048: PUSH
5049: LD_INT 4200
5051: PPUSH
5052: LD_INT 5250
5054: PPUSH
5055: CALL_OW 12
5059: MUL
5060: PPUSH
5061: CALL_OW 67
// amount := Rand ( 1 , 5 ) ;
5065: LD_ADDR_VAR 0 2
5069: PUSH
5070: LD_INT 1
5072: PPUSH
5073: LD_INT 5
5075: PPUSH
5076: CALL_OW 12
5080: ST_TO_ADDR
// for i = 1 to 4 do
5081: LD_ADDR_VAR 0 1
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 4
5093: PUSH
5094: FOR_TO
5095: IFFALSE 5142
// begin wait ( 0 0$3 ) ;
5097: LD_INT 105
5099: PPUSH
5100: CALL_OW 67
// CreateCratesArea ( amount , [ north_east , north_west , south_east , south_west ] [ i ] , true ) ;
5104: LD_VAR 0 2
5108: PPUSH
5109: LD_INT 5
5111: PUSH
5112: LD_INT 4
5114: PUSH
5115: LD_INT 6
5117: PUSH
5118: LD_INT 7
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: PUSH
5127: LD_VAR 0 1
5131: ARRAY
5132: PPUSH
5133: LD_INT 1
5135: PPUSH
5136: CALL_OW 55
// end ;
5140: GO 5094
5142: POP
5143: POP
// enable ;
5144: ENABLE
// end ;
5145: PPOPN 2
5147: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount , is_in ;
5148: LD_OWVAR 1
5152: PUSH
5153: LD_INT 6300
5155: PUSH
5156: LD_LOC 10
5160: MUL
5161: PUSH
5162: LD_LOC 10
5166: PUSH
5167: LD_INT 3150
5169: PUSH
5170: LD_EXP 13
5174: PUSH
5175: LD_INT 70
5177: MUL
5178: MINUS
5179: MUL
5180: PLUS
5181: GREATER
5182: IFFALSE 5318
5184: GO 5186
5186: DISABLE
5187: LD_INT 0
5189: PPUSH
5190: PPUSH
5191: PPUSH
// begin tictac := tictac + 1 ;
5192: LD_ADDR_LOC 10
5196: PUSH
5197: LD_LOC 10
5201: PUSH
5202: LD_INT 1
5204: PLUS
5205: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5206: LD_ADDR_VAR 0 2
5210: PUSH
5211: LD_INT 3
5213: PPUSH
5214: LD_INT 5
5216: PPUSH
5217: CALL_OW 12
5221: ST_TO_ADDR
// for i = 0 to 3 do
5222: LD_ADDR_VAR 0 1
5226: PUSH
5227: DOUBLE
5228: LD_INT 0
5230: DEC
5231: ST_TO_ADDR
5232: LD_INT 3
5234: PUSH
5235: FOR_TO
5236: IFFALSE 5315
// begin is_in := GetResourceArea ( north_west + i , mat_cans ) ;
5238: LD_ADDR_VAR 0 3
5242: PUSH
5243: LD_INT 4
5245: PUSH
5246: LD_VAR 0 1
5250: PLUS
5251: PPUSH
5252: LD_INT 1
5254: PPUSH
5255: CALL_OW 287
5259: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5260: LD_VAR 0 3
5264: PUSH
5265: LD_INT 500
5267: LESS
5268: PUSH
5269: LD_INT 1
5271: PPUSH
5272: LD_INT 10
5274: PPUSH
5275: CALL_OW 12
5279: PUSH
5280: LD_VAR 0 3
5284: PUSH
5285: LD_INT 100
5287: DIV
5288: GREATER
5289: OR
5290: IFFALSE 5313
// CreateCratesArea ( amount , north_west + i , true ) ;
5292: LD_VAR 0 2
5296: PPUSH
5297: LD_INT 4
5299: PUSH
5300: LD_VAR 0 1
5304: PLUS
5305: PPUSH
5306: LD_INT 1
5308: PPUSH
5309: CALL_OW 55
// end ;
5313: GO 5235
5315: POP
5316: POP
// enable ;
5317: ENABLE
// end ; end_of_file
5318: PPOPN 3
5320: END
// every 20 20$00 trigger apemanNumber do
5321: LD_EXP 36
5325: IFFALSE 5358
5327: GO 5329
5329: DISABLE
// begin enable ;
5330: ENABLE
// if apeLevel >= 8 then
5331: LD_EXP 41
5335: PUSH
5336: LD_INT 8
5338: GREATEREQUAL
5339: IFFALSE 5344
// disable else
5341: DISABLE
5342: GO 5358
// apeLevel := apeLevel + 1 ;
5344: LD_ADDR_EXP 41
5348: PUSH
5349: LD_EXP 41
5353: PUSH
5354: LD_INT 1
5356: PLUS
5357: ST_TO_ADDR
// end ;
5358: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5359: LD_EXP 36
5363: PUSH
5364: LD_EXP 37
5368: LESS
5369: IFFALSE 5509
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
5378: PPUSH
5379: PPUSH
// begin enable ;
5380: ENABLE
// for i := 1 to apemanPos do
5381: LD_ADDR_VAR 0 1
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_EXP 39
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5507
// begin if apemanPlayerCount [ i ] then
5399: LD_EXP 40
5403: PUSH
5404: LD_VAR 0 1
5408: ARRAY
5409: IFFALSE 5505
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5411: LD_EXP 40
5415: PUSH
5416: LD_VAR 0 1
5420: ARRAY
5421: PUSH
5422: LD_EXP 39
5426: PUSH
5427: LD_VAR 0 1
5431: ARRAY
5432: GREATER
5433: IFFALSE 5505
// begin ape := PrepareApeman ;
5435: LD_ADDR_VAR 0 2
5439: PUSH
5440: CALL 6012 0 0
5444: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5445: LD_VAR 0 2
5449: PPUSH
5450: LD_EXP 42
5454: PUSH
5455: LD_VAR 0 1
5459: ARRAY
5460: PPUSH
5461: LD_INT 0
5463: PPUSH
5464: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5468: LD_ADDR_EXP 39
5472: PUSH
5473: LD_EXP 39
5477: PPUSH
5478: LD_VAR 0 1
5482: PPUSH
5483: LD_EXP 39
5487: PUSH
5488: LD_VAR 0 1
5492: ARRAY
5493: PUSH
5494: LD_VAR 0 2
5498: UNION
5499: PPUSH
5500: CALL_OW 1
5504: ST_TO_ADDR
// end ; end ; end ;
5505: GO 5396
5507: POP
5508: POP
// end ;
5509: PPOPN 4
5511: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5512: LD_INT 0
5514: PPUSH
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
// playersAmount := 0 ;
5521: LD_ADDR_VAR 0 3
5525: PUSH
5526: LD_INT 0
5528: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5529: LD_ADDR_VAR 0 7
5533: PUSH
5534: LD_INT 8
5536: PUSH
5537: LD_INT 9
5539: PUSH
5540: LD_INT 11
5542: PUSH
5543: LD_INT 10
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5552: LD_ADDR_EXP 42
5556: PUSH
5557: LD_INT 0
5559: PUSH
5560: LD_INT 0
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: LD_INT 0
5568: PUSH
5569: LD_INT 0
5571: PUSH
5572: LD_INT 0
5574: PUSH
5575: LD_INT 0
5577: PUSH
5578: LD_INT 0
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: ST_TO_ADDR
// for j = 1 to Side_Positions do
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: DOUBLE
5597: LD_INT 1
5599: DEC
5600: ST_TO_ADDR
5601: LD_EXP 23
5605: PUSH
5606: FOR_TO
5607: IFFALSE 5674
// if Side_Positions [ j ] then
5609: LD_EXP 23
5613: PUSH
5614: LD_VAR 0 4
5618: ARRAY
5619: IFFALSE 5672
// begin playersAmount := playersAmount + 1 ;
5621: LD_ADDR_VAR 0 3
5625: PUSH
5626: LD_VAR 0 3
5630: PUSH
5631: LD_INT 1
5633: PLUS
5634: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5635: LD_ADDR_EXP 42
5639: PUSH
5640: LD_EXP 42
5644: PPUSH
5645: LD_VAR 0 4
5649: PPUSH
5650: LD_VAR 0 7
5654: PUSH
5655: LD_EXP 23
5659: PUSH
5660: LD_VAR 0 4
5664: ARRAY
5665: ARRAY
5666: PPUSH
5667: CALL_OW 1
5671: ST_TO_ADDR
// end ;
5672: GO 5606
5674: POP
5675: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5676: LD_ADDR_EXP 38
5680: PUSH
5681: LD_INT 3
5683: PUSH
5684: LD_EXP 15
5688: MUL
5689: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5690: LD_ADDR_EXP 36
5694: PUSH
5695: LD_VAR 0 3
5699: PUSH
5700: LD_EXP 38
5704: MUL
5705: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5706: LD_ADDR_EXP 37
5710: PUSH
5711: LD_EXP 36
5715: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5716: LD_ADDR_EXP 39
5720: PUSH
5721: LD_INT 0
5723: PUSH
5724: LD_INT 0
5726: PUSH
5727: LD_INT 0
5729: PUSH
5730: LD_INT 0
5732: PUSH
5733: LD_INT 0
5735: PUSH
5736: LD_INT 0
5738: PUSH
5739: LD_INT 0
5741: PUSH
5742: LD_INT 0
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5755: LD_ADDR_EXP 40
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: LD_INT 0
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: LD_INT 0
5780: PUSH
5781: LD_INT 0
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: ST_TO_ADDR
// apeLevel := 1 ;
5794: LD_ADDR_EXP 41
5798: PUSH
5799: LD_INT 1
5801: ST_TO_ADDR
// if not apemanNumber then
5802: LD_EXP 36
5806: NOT
5807: IFFALSE 5811
// exit ;
5809: GO 6007
// for i := 1 to apemanPerPlayer do
5811: LD_ADDR_VAR 0 2
5815: PUSH
5816: DOUBLE
5817: LD_INT 1
5819: DEC
5820: ST_TO_ADDR
5821: LD_EXP 38
5825: PUSH
5826: FOR_TO
5827: IFFALSE 6005
// begin for j := 1 to Side_Positions do
5829: LD_ADDR_VAR 0 4
5833: PUSH
5834: DOUBLE
5835: LD_INT 1
5837: DEC
5838: ST_TO_ADDR
5839: LD_EXP 23
5843: PUSH
5844: FOR_TO
5845: IFFALSE 6001
// if Side_Positions [ j ] then
5847: LD_EXP 23
5851: PUSH
5852: LD_VAR 0 4
5856: ARRAY
5857: IFFALSE 5999
// begin pos := Side_Positions [ j ] ;
5859: LD_ADDR_VAR 0 6
5863: PUSH
5864: LD_EXP 23
5868: PUSH
5869: LD_VAR 0 4
5873: ARRAY
5874: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5875: LD_ADDR_EXP 40
5879: PUSH
5880: LD_EXP 40
5884: PPUSH
5885: LD_VAR 0 4
5889: PPUSH
5890: LD_EXP 40
5894: PUSH
5895: LD_VAR 0 4
5899: ARRAY
5900: PUSH
5901: LD_INT 1
5903: PLUS
5904: PPUSH
5905: CALL_OW 1
5909: ST_TO_ADDR
// ape := PrepareApeman ;
5910: LD_ADDR_VAR 0 5
5914: PUSH
5915: CALL 6012 0 0
5919: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5920: LD_ADDR_EXP 39
5924: PUSH
5925: LD_EXP 39
5929: PPUSH
5930: LD_VAR 0 4
5934: PPUSH
5935: LD_EXP 39
5939: PUSH
5940: LD_VAR 0 4
5944: ARRAY
5945: PPUSH
5946: LD_EXP 39
5950: PUSH
5951: LD_VAR 0 4
5955: ARRAY
5956: PUSH
5957: LD_INT 1
5959: PLUS
5960: PPUSH
5961: LD_VAR 0 5
5965: PPUSH
5966: CALL_OW 1
5970: PPUSH
5971: CALL_OW 1
5975: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5976: LD_VAR 0 5
5980: PPUSH
5981: LD_EXP 42
5985: PUSH
5986: LD_VAR 0 4
5990: ARRAY
5991: PPUSH
5992: LD_INT 0
5994: PPUSH
5995: CALL_OW 49
// end ;
5999: GO 5844
6001: POP
6002: POP
// end ;
6003: GO 5826
6005: POP
6006: POP
// end ;
6007: LD_VAR 0 1
6011: RET
// export function PrepareApeman ; var bonus ; begin
6012: LD_INT 0
6014: PPUSH
6015: PPUSH
// uc_side := 0 ;
6016: LD_ADDR_OWVAR 20
6020: PUSH
6021: LD_INT 0
6023: ST_TO_ADDR
// uc_nation := 0 ;
6024: LD_ADDR_OWVAR 21
6028: PUSH
6029: LD_INT 0
6031: ST_TO_ADDR
// InitHc ;
6032: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6036: LD_ADDR_VAR 0 2
6040: PUSH
6041: LD_INT 1
6043: NEG
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 1
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: PUSH
6056: LD_OWVAR 1
6060: PUSH
6061: LD_INT 3
6063: MOD
6064: PUSH
6065: LD_INT 1
6067: PLUS
6068: ARRAY
6069: ST_TO_ADDR
// hc_class := class_apeman ;
6070: LD_ADDR_OWVAR 28
6074: PUSH
6075: LD_INT 12
6077: ST_TO_ADDR
// hc_gallery :=  ;
6078: LD_ADDR_OWVAR 33
6082: PUSH
6083: LD_STRING 
6085: ST_TO_ADDR
// hc_name :=  ;
6086: LD_ADDR_OWVAR 26
6090: PUSH
6091: LD_STRING 
6093: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6094: LD_ADDR_OWVAR 31
6098: PUSH
6099: LD_EXP 41
6103: PUSH
6104: LD_VAR 0 2
6108: PLUS
6109: PUSH
6110: LD_EXP 41
6114: PUSH
6115: LD_VAR 0 2
6119: PLUS
6120: PUSH
6121: LD_EXP 41
6125: PUSH
6126: LD_VAR 0 2
6130: PLUS
6131: PUSH
6132: LD_EXP 41
6136: PUSH
6137: LD_VAR 0 2
6141: PLUS
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6149: LD_ADDR_OWVAR 35
6153: PUSH
6154: LD_INT 10
6156: PUSH
6157: LD_VAR 0 2
6161: MUL
6162: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6163: LD_ADDR_OWVAR 29
6167: PUSH
6168: LD_INT 12
6170: PUSH
6171: LD_INT 10
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: ST_TO_ADDR
// result := CreateHuman ;
6178: LD_ADDR_VAR 0 1
6182: PUSH
6183: CALL_OW 44
6187: ST_TO_ADDR
// end ;
6188: LD_VAR 0 1
6192: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6193: LD_INT 0
6195: PPUSH
6196: PPUSH
6197: PPUSH
// if not ape then
6198: LD_VAR 0 1
6202: NOT
6203: IFFALSE 6207
// exit ;
6205: GO 6332
// side := GetSide ( ape ) ;
6207: LD_ADDR_VAR 0 3
6211: PUSH
6212: LD_VAR 0 1
6216: PPUSH
6217: CALL_OW 255
6221: ST_TO_ADDR
// if not side then
6222: LD_VAR 0 3
6226: NOT
6227: IFFALSE 6281
// begin for i = 1 to apemanPos do
6229: LD_ADDR_VAR 0 4
6233: PUSH
6234: DOUBLE
6235: LD_INT 1
6237: DEC
6238: ST_TO_ADDR
6239: LD_EXP 39
6243: PUSH
6244: FOR_TO
6245: IFFALSE 6279
// if ape in apemanPos [ i ] then
6247: LD_VAR 0 1
6251: PUSH
6252: LD_EXP 39
6256: PUSH
6257: LD_VAR 0 4
6261: ARRAY
6262: IN
6263: IFFALSE 6277
// begin side := i ;
6265: LD_ADDR_VAR 0 3
6269: PUSH
6270: LD_VAR 0 4
6274: ST_TO_ADDR
// break ;
6275: GO 6279
// end ;
6277: GO 6244
6279: POP
6280: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6281: LD_ADDR_EXP 39
6285: PUSH
6286: LD_EXP 39
6290: PPUSH
6291: LD_VAR 0 3
6295: PPUSH
6296: LD_EXP 39
6300: PUSH
6301: LD_VAR 0 3
6305: ARRAY
6306: PUSH
6307: LD_VAR 0 1
6311: DIFF
6312: PPUSH
6313: CALL_OW 1
6317: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6318: LD_ADDR_EXP 36
6322: PUSH
6323: LD_EXP 36
6327: PUSH
6328: LD_INT 1
6330: MINUS
6331: ST_TO_ADDR
// end ; end_of_file
6332: LD_VAR 0 2
6336: RET
// var respawn_queue ; export function init_respawn ; begin
6337: LD_INT 0
6339: PPUSH
// if not def_people_respawning then
6340: LD_EXP 61
6344: NOT
6345: IFFALSE 6349
// exit ;
6347: GO 6391
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6349: LD_ADDR_LOC 11
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: LD_INT 0
6365: PUSH
6366: LD_INT 0
6368: PUSH
6369: LD_INT 0
6371: PUSH
6372: LD_INT 0
6374: PUSH
6375: LD_INT 0
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: ST_TO_ADDR
// enable ( 10 ) ;
6388: LD_INT 10
6390: ENABLE_MARKED
// end ;
6391: LD_VAR 0 1
6395: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6396: GO 6398
6398: DISABLE
6399: LD_INT 0
6401: PPUSH
6402: PPUSH
6403: PPUSH
6404: PPUSH
// begin for side = 1 to Side_Positions do
6405: LD_ADDR_VAR 0 4
6409: PUSH
6410: DOUBLE
6411: LD_INT 1
6413: DEC
6414: ST_TO_ADDR
6415: LD_EXP 23
6419: PUSH
6420: FOR_TO
6421: IFFALSE 6587
// if Side_Positions [ side ] then
6423: LD_EXP 23
6427: PUSH
6428: LD_VAR 0 4
6432: ARRAY
6433: IFFALSE 6585
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6435: LD_ADDR_VAR 0 2
6439: PUSH
6440: LD_INT 22
6442: PUSH
6443: LD_VAR 0 4
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PUSH
6452: LD_INT 21
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 3
6464: PUSH
6465: LD_INT 23
6467: PUSH
6468: LD_INT 0
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: PPUSH
6481: CALL_OW 69
6485: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6486: LD_VAR 0 2
6490: PUSH
6491: LD_EXP 9
6495: LESS
6496: PUSH
6497: LD_LOC 11
6501: PUSH
6502: LD_VAR 0 4
6506: ARRAY
6507: NOT
6508: AND
6509: IFFALSE 6525
// set_queue ( side , TICK ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_OWVAR 1
6520: PPUSH
6521: CALL 6824 0 2
// time := TICK - respawn_queue [ side ] ;
6525: LD_ADDR_VAR 0 3
6529: PUSH
6530: LD_OWVAR 1
6534: PUSH
6535: LD_LOC 11
6539: PUSH
6540: LD_VAR 0 4
6544: ARRAY
6545: MINUS
6546: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6547: LD_LOC 11
6551: PUSH
6552: LD_VAR 0 4
6556: ARRAY
6557: PUSH
6558: LD_VAR 0 3
6562: PUSH
6563: LD_EXP 16
6567: GREATER
6568: AND
6569: IFFALSE 6585
// respawn_character ( side , time ) ;
6571: LD_VAR 0 4
6575: PPUSH
6576: LD_VAR 0 3
6580: PPUSH
6581: CALL 6593 0 2
// end ;
6585: GO 6420
6587: POP
6588: POP
// enable ;
6589: ENABLE
// end ;
6590: PPOPN 4
6592: END
// function respawn_character ( side , time ) ; var dep ; begin
6593: LD_INT 0
6595: PPUSH
6596: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6597: LD_INT 0
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: CALL_OW 12
6607: PUSH
6608: LD_VAR 0 2
6612: PUSH
6613: LD_EXP 17
6617: LESS
6618: AND
6619: IFFALSE 6623
// exit ;
6621: GO 6819
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6623: LD_ADDR_VAR 0 4
6627: PUSH
6628: LD_INT 22
6630: PUSH
6631: LD_VAR 0 1
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: PUSH
6640: LD_INT 2
6642: PUSH
6643: LD_INT 30
6645: PUSH
6646: LD_INT 0
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 30
6655: PUSH
6656: LD_INT 1
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 50
6670: PUSH
6671: EMPTY
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 69
6683: ST_TO_ADDR
// if not dep then
6684: LD_VAR 0 4
6688: NOT
6689: IFFALSE 6695
// exit else
6691: GO 6819
6693: GO 6719
// dep := dep [ Rand ( 1 , dep ) ] ;
6695: LD_ADDR_VAR 0 4
6699: PUSH
6700: LD_VAR 0 4
6704: PUSH
6705: LD_INT 1
6707: PPUSH
6708: LD_VAR 0 4
6712: PPUSH
6713: CALL_OW 12
6717: ARRAY
6718: ST_TO_ADDR
// uc_side := side ;
6719: LD_ADDR_OWVAR 20
6723: PUSH
6724: LD_VAR 0 1
6728: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6729: LD_ADDR_OWVAR 21
6733: PUSH
6734: LD_EXP 24
6738: PUSH
6739: LD_VAR 0 1
6743: ARRAY
6744: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6745: LD_INT 0
6747: PPUSH
6748: LD_INT 0
6750: PPUSH
6751: LD_EXP 10
6755: PUSH
6756: LD_INT 2
6758: DIV
6759: PPUSH
6760: CALL_OW 380
// hc_importance := 0 ;
6764: LD_ADDR_OWVAR 32
6768: PUSH
6769: LD_INT 0
6771: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6772: CALL_OW 44
6776: PPUSH
6777: LD_VAR 0 4
6781: PPUSH
6782: CALL_OW 250
6786: PPUSH
6787: LD_VAR 0 4
6791: PPUSH
6792: CALL_OW 251
6796: PPUSH
6797: LD_INT 10
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: CALL_OW 50
// set_queue ( side , 0 ) ;
6807: LD_VAR 0 1
6811: PPUSH
6812: LD_INT 0
6814: PPUSH
6815: CALL 6824 0 2
// end ;
6819: LD_VAR 0 3
6823: RET
// function set_queue ( side , time ) ; begin
6824: LD_INT 0
6826: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6827: LD_ADDR_LOC 11
6831: PUSH
6832: LD_LOC 11
6836: PPUSH
6837: LD_VAR 0 1
6841: PPUSH
6842: CALL_OW 3
6846: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6847: LD_ADDR_LOC 11
6851: PUSH
6852: LD_LOC 11
6856: PPUSH
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_VAR 0 2
6866: PPUSH
6867: CALL_OW 2
6871: ST_TO_ADDR
// end ; end_of_file
6872: LD_VAR 0 3
6876: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6877: LD_VAR 0 1
6881: PPUSH
6882: CALL_OW 266
6886: PUSH
6887: LD_INT 0
6889: PUSH
6890: LD_INT 1
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: IN
6897: IFFALSE 6922
// SetBName ( b , @ & GetSide ( b ) ) ;
6899: LD_VAR 0 1
6903: PPUSH
6904: LD_STRING @
6906: PUSH
6907: LD_VAR 0 1
6911: PPUSH
6912: CALL_OW 255
6916: STR
6917: PPUSH
6918: CALL_OW 500
// if def_game_rules then
6922: LD_EXP 50
6926: IFFALSE 6963
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6928: LD_VAR 0 1
6932: PPUSH
6933: LD_VAR 0 1
6937: PPUSH
6938: CALL_OW 266
6942: PPUSH
6943: LD_VAR 0 1
6947: PPUSH
6948: CALL_OW 255
6952: PPUSH
6953: LD_INT 0
6955: PPUSH
6956: LD_INT 1
6958: PPUSH
6959: CALL 16788 0 5
// end ;
6963: PPOPN 2
6965: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6966: LD_VAR 0 1
6970: PPUSH
6971: CALL_OW 266
6975: PUSH
6976: LD_INT 0
6978: PUSH
6979: LD_INT 1
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: IN
6986: IFFALSE 7011
// SetBName ( b , @ & GetSide ( b ) ) ;
6988: LD_VAR 0 1
6992: PPUSH
6993: LD_STRING @
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 255
7005: STR
7006: PPUSH
7007: CALL_OW 500
// if def_game_rules then
7011: LD_EXP 50
7015: IFFALSE 7054
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_VAR 0 1
7026: PPUSH
7027: CALL_OW 266
7031: PPUSH
7032: LD_VAR 0 1
7036: PPUSH
7037: CALL_OW 255
7041: PPUSH
7042: LD_VAR 0 2
7046: PPUSH
7047: LD_INT 1
7049: PPUSH
7050: CALL 16788 0 5
// end ;
7054: PPOPN 3
7056: END
// on VehicleConstructed ( veh , fac ) do var side ;
7057: LD_INT 0
7059: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 263
7069: PUSH
7070: LD_INT 5
7072: EQUAL
7073: IFFALSE 7215
// begin side := GetSide ( veh ) ;
7075: LD_ADDR_VAR 0 3
7079: PUSH
7080: LD_VAR 0 1
7084: PPUSH
7085: CALL_OW 255
7089: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7090: LD_ADDR_EXP 39
7094: PUSH
7095: LD_EXP 39
7099: PPUSH
7100: LD_VAR 0 3
7104: PPUSH
7105: LD_EXP 39
7109: PUSH
7110: LD_VAR 0 3
7114: ARRAY
7115: PPUSH
7116: LD_INT 52
7118: PUSH
7119: EMPTY
7120: LIST
7121: PPUSH
7122: CALL_OW 72
7126: PUSH
7127: LD_INT 22
7129: PUSH
7130: LD_VAR 0 3
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 2
7141: PUSH
7142: LD_INT 33
7144: PUSH
7145: LD_INT 5
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 25
7154: PUSH
7155: LD_INT 12
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 25
7164: PUSH
7165: LD_INT 15
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 25
7174: PUSH
7175: LD_INT 16
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 25
7184: PUSH
7185: LD_INT 17
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PPUSH
7204: CALL_OW 69
7208: UNION
7209: PPUSH
7210: CALL_OW 1
7214: ST_TO_ADDR
// end ; end ;
7215: PPOPN 3
7217: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7218: LD_INT 0
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7224: LD_VAR 0 1
7228: PPUSH
7229: CALL_OW 257
7233: PUSH
7234: LD_INT 12
7236: PUSH
7237: LD_INT 15
7239: PUSH
7240: LD_INT 17
7242: PUSH
7243: LD_INT 16
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: IN
7252: PUSH
7253: LD_VAR 0 1
7257: PPUSH
7258: CALL_OW 263
7262: PUSH
7263: LD_INT 5
7265: EQUAL
7266: OR
7267: IFFALSE 7278
// ApeKilled ( j ) ;
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL 6193 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 266
7287: PUSH
7288: LD_INT 0
7290: PUSH
7291: LD_INT 1
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: IN
7298: IFFALSE 7380
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7300: LD_ADDR_VAR 0 4
7304: PUSH
7305: LD_EXP 23
7309: PUSH
7310: LD_VAR 0 1
7314: PPUSH
7315: CALL_OW 255
7319: ARRAY
7320: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7321: LD_ADDR_VAR 0 2
7325: PUSH
7326: LD_EXP 32
7330: PUSH
7331: LD_VAR 0 4
7335: ARRAY
7336: PUSH
7337: LD_INT 1
7339: ARRAY
7340: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_EXP 32
7350: PUSH
7351: LD_VAR 0 4
7355: ARRAY
7356: PUSH
7357: LD_INT 2
7359: ARRAY
7360: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7361: LD_VAR 0 2
7365: PPUSH
7366: LD_VAR 0 3
7370: PPUSH
7371: CALL_OW 420
7375: PPUSH
7376: CALL_OW 419
// end ; if def_game_rules then
7380: LD_EXP 50
7384: IFFALSE 7483
// if ( GetType ( j ) = 3 ) then
7386: LD_VAR 0 1
7390: PPUSH
7391: CALL_OW 247
7395: PUSH
7396: LD_INT 3
7398: EQUAL
7399: IFFALSE 7439
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7401: LD_VAR 0 1
7405: PPUSH
7406: LD_VAR 0 1
7410: PPUSH
7411: CALL_OW 266
7415: PPUSH
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 255
7425: PPUSH
7426: LD_INT 0
7428: PPUSH
7429: LD_INT 1
7431: NEG
7432: PPUSH
7433: CALL 16788 0 5
7437: GO 7483
// if ( GetChassis ( j ) = 25 ) then
7439: LD_VAR 0 1
7443: PPUSH
7444: CALL_OW 265
7448: PUSH
7449: LD_INT 25
7451: EQUAL
7452: IFFALSE 7483
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7454: LD_VAR 0 1
7458: PPUSH
7459: LD_INT 37
7461: PPUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 255
7471: PPUSH
7472: LD_INT 0
7474: PPUSH
7475: LD_INT 1
7477: NEG
7478: PPUSH
7479: CALL 16788 0 5
// end ;
7483: PPOPN 5
7485: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7486: LD_EXP 50
7490: PUSH
7491: LD_VAR 0 1
7495: PPUSH
7496: CALL_OW 265
7500: PUSH
7501: LD_INT 25
7503: EQUAL
7504: AND
7505: IFFALSE 7537
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7507: LD_VAR 0 1
7511: PPUSH
7512: LD_INT 37
7514: PPUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 255
7524: PPUSH
7525: LD_VAR 0 3
7529: PPUSH
7530: LD_INT 1
7532: PPUSH
7533: CALL 16788 0 5
// end ;
7537: PPOPN 4
7539: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7540: LD_VAR 0 1
7544: PPUSH
7545: LD_VAR 0 2
7549: PPUSH
7550: LD_VAR 0 3
7554: PPUSH
7555: LD_OWVAR 2
7559: PPUSH
7560: CALL 18275 0 4
7564: PPOPN 3
7566: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
7567: LD_INT 0
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
// artefact_number := 3 ;
7575: LD_ADDR_EXP 43
7579: PUSH
7580: LD_INT 3
7582: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
7583: LD_ADDR_EXP 44
7587: PUSH
7588: LD_INT 1
7590: PUSH
7591: LD_INT 0
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: LD_INT 0
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
7610: LD_ADDR_EXP 45
7614: PUSH
7615: LD_INT 1
7617: PUSH
7618: LD_INT 3
7620: PUSH
7621: LD_INT 5
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: LIST
7628: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
7629: LD_ADDR_VAR 0 2
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: LD_INT 4
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 2
7646: PUSH
7647: LD_INT 5
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: LD_INT 3
7656: PUSH
7657: LD_INT 9
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
7669: LD_ADDR_VAR 0 3
7673: PUSH
7674: LD_INT 3
7676: PUSH
7677: LD_INT 4
7679: PUSH
7680: LD_INT 3
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: LIST
7687: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
7688: LD_ADDR_VAR 0 4
7692: PUSH
7693: LD_INT 150
7695: PUSH
7696: LD_INT 250
7698: PUSH
7699: LD_INT 400
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
7707: LD_ADDR_VAR 0 5
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: LD_INT 10
7717: PUSH
7718: LD_INT 20
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: LIST
7725: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
7726: LD_ADDR_VAR 0 6
7730: PUSH
7731: LD_INT 6
7733: PUSH
7734: LD_INT 18
7736: PUSH
7737: LD_INT 50
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
7745: LD_VAR 0 2
7749: PPUSH
7750: LD_VAR 0 3
7754: PPUSH
7755: LD_VAR 0 4
7759: PPUSH
7760: LD_VAR 0 5
7764: PPUSH
7765: LD_VAR 0 6
7769: PPUSH
7770: CALL 7779 0 5
// end ;
7774: LD_VAR 0 1
7778: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
7779: LD_INT 0
7781: PPUSH
7782: PPUSH
7783: PPUSH
7784: PPUSH
7785: PPUSH
// disable ( 1 ) ;
7786: LD_INT 1
7788: DISABLE_MARKED
// disable ( 5 ) ;
7789: LD_INT 5
7791: DISABLE_MARKED
// disable ( 6 ) ;
7792: LD_INT 6
7794: DISABLE_MARKED
// disable ( 7 ) ;
7795: LD_INT 7
7797: DISABLE_MARKED
// for side = 1 to 8 do
7798: LD_ADDR_VAR 0 9
7802: PUSH
7803: DOUBLE
7804: LD_INT 1
7806: DEC
7807: ST_TO_ADDR
7808: LD_INT 8
7810: PUSH
7811: FOR_TO
7812: IFFALSE 7828
// SetArtifactRes ( side , state_enabled ) ;
7814: LD_VAR 0 9
7818: PPUSH
7819: LD_INT 1
7821: PPUSH
7822: CALL_OW 467
7826: GO 7811
7828: POP
7829: POP
// for un = 0 to ( artefact_number - 1 ) do
7830: LD_ADDR_VAR 0 7
7834: PUSH
7835: DOUBLE
7836: LD_INT 0
7838: DEC
7839: ST_TO_ADDR
7840: LD_EXP 43
7844: PUSH
7845: LD_INT 1
7847: MINUS
7848: PUSH
7849: FOR_TO
7850: IFFALSE 8248
// begin base := un * 100 ;
7852: LD_ADDR_VAR 0 10
7856: PUSH
7857: LD_VAR 0 7
7861: PUSH
7862: LD_INT 100
7864: MUL
7865: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
7866: LD_VAR 0 10
7870: PUSH
7871: LD_INT 1
7873: PLUS
7874: PPUSH
7875: LD_VAR 0 1
7879: PUSH
7880: LD_VAR 0 7
7884: PUSH
7885: LD_INT 1
7887: PLUS
7888: ARRAY
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: PPUSH
7894: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7898: LD_VAR 0 10
7902: PUSH
7903: LD_INT 2
7905: PLUS
7906: PPUSH
7907: LD_VAR 0 1
7911: PUSH
7912: LD_VAR 0 7
7916: PUSH
7917: LD_INT 1
7919: PLUS
7920: ARRAY
7921: PUSH
7922: LD_INT 2
7924: ARRAY
7925: PPUSH
7926: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7930: LD_VAR 0 10
7934: PUSH
7935: LD_INT 3
7937: PLUS
7938: PPUSH
7939: LD_VAR 0 2
7943: PUSH
7944: LD_VAR 0 7
7948: PUSH
7949: LD_INT 1
7951: PLUS
7952: ARRAY
7953: PPUSH
7954: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7958: LD_VAR 0 10
7962: PUSH
7963: LD_INT 5
7965: PLUS
7966: PPUSH
7967: LD_VAR 0 3
7971: PUSH
7972: LD_VAR 0 7
7976: PUSH
7977: LD_INT 1
7979: PLUS
7980: ARRAY
7981: PPUSH
7982: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7986: LD_VAR 0 10
7990: PUSH
7991: LD_INT 6
7993: PLUS
7994: PPUSH
7995: LD_VAR 0 4
7999: PUSH
8000: LD_VAR 0 7
8004: PUSH
8005: LD_INT 1
8007: PLUS
8008: ARRAY
8009: PPUSH
8010: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
8014: LD_VAR 0 10
8018: PUSH
8019: LD_INT 7
8021: PLUS
8022: PPUSH
8023: LD_VAR 0 5
8027: PUSH
8028: LD_VAR 0 7
8032: PUSH
8033: LD_INT 1
8035: PLUS
8036: ARRAY
8037: PPUSH
8038: CALL_OW 109
// SetTag ( base + 08 , false ) ;
8042: LD_VAR 0 10
8046: PUSH
8047: LD_INT 8
8049: PLUS
8050: PPUSH
8051: LD_INT 0
8053: PPUSH
8054: CALL_OW 109
// SetTag ( base + 09 , false ) ;
8058: LD_VAR 0 10
8062: PUSH
8063: LD_INT 9
8065: PLUS
8066: PPUSH
8067: LD_INT 0
8069: PPUSH
8070: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
8074: LD_VAR 0 10
8078: PUSH
8079: LD_INT 11
8081: PLUS
8082: PPUSH
8083: LD_INT 0
8085: PPUSH
8086: CALL_OW 109
// SetTag ( base + 12 , false ) ;
8090: LD_VAR 0 10
8094: PUSH
8095: LD_INT 12
8097: PLUS
8098: PPUSH
8099: LD_INT 0
8101: PPUSH
8102: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8106: LD_VAR 0 10
8110: PUSH
8111: LD_INT 13
8113: PLUS
8114: PPUSH
8115: LD_INT 0
8117: PPUSH
8118: CALL_OW 109
// for i = 0 to 7 do
8122: LD_ADDR_VAR 0 8
8126: PUSH
8127: DOUBLE
8128: LD_INT 0
8130: DEC
8131: ST_TO_ADDR
8132: LD_INT 7
8134: PUSH
8135: FOR_TO
8136: IFFALSE 8244
// begin SetTag ( base + i * 10 + 21 , false ) ;
8138: LD_VAR 0 10
8142: PUSH
8143: LD_VAR 0 8
8147: PUSH
8148: LD_INT 10
8150: MUL
8151: PLUS
8152: PUSH
8153: LD_INT 21
8155: PLUS
8156: PPUSH
8157: LD_INT 0
8159: PPUSH
8160: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
8164: LD_VAR 0 10
8168: PUSH
8169: LD_VAR 0 8
8173: PUSH
8174: LD_INT 10
8176: MUL
8177: PLUS
8178: PUSH
8179: LD_INT 22
8181: PLUS
8182: PPUSH
8183: LD_INT 0
8185: PPUSH
8186: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
8190: LD_VAR 0 10
8194: PUSH
8195: LD_VAR 0 8
8199: PUSH
8200: LD_INT 10
8202: MUL
8203: PLUS
8204: PUSH
8205: LD_INT 23
8207: PLUS
8208: PPUSH
8209: LD_INT 0
8211: PPUSH
8212: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
8216: LD_VAR 0 10
8220: PUSH
8221: LD_VAR 0 8
8225: PUSH
8226: LD_INT 10
8228: MUL
8229: PLUS
8230: PUSH
8231: LD_INT 25
8233: PLUS
8234: PPUSH
8235: LD_INT 0
8237: PPUSH
8238: CALL_OW 109
// end ;
8242: GO 8135
8244: POP
8245: POP
// end ;
8246: GO 7849
8248: POP
8249: POP
// enable ( 20 ) ;
8250: LD_INT 20
8252: ENABLE_MARKED
// labs_in_use := [ ] ;
8253: LD_ADDR_EXP 46
8257: PUSH
8258: EMPTY
8259: ST_TO_ADDR
// if def_artefact_one then
8260: LD_EXP 1
8264: IFFALSE 8291
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
8266: LD_INT 4
8268: PPUSH
8269: LD_EXP 45
8273: PUSH
8274: LD_INT 1
8276: ARRAY
8277: PPUSH
8278: LD_INT 16
8280: PPUSH
8281: LD_INT 0
8283: PPUSH
8284: CALL_OW 59
// enable ( 5 ) ;
8288: LD_INT 5
8290: ENABLE_MARKED
// end ; if def_artefact_two then
8291: LD_EXP 2
8295: IFFALSE 8322
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
8297: LD_INT 4
8299: PPUSH
8300: LD_EXP 45
8304: PUSH
8305: LD_INT 2
8307: ARRAY
8308: PPUSH
8309: LD_INT 16
8311: PPUSH
8312: LD_INT 0
8314: PPUSH
8315: CALL_OW 59
// enable ( 6 ) ;
8319: LD_INT 6
8321: ENABLE_MARKED
// end ; if def_artefact_three then
8322: LD_EXP 3
8326: IFFALSE 8353
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
8328: LD_INT 4
8330: PPUSH
8331: LD_EXP 45
8335: PUSH
8336: LD_INT 3
8338: ARRAY
8339: PPUSH
8340: LD_INT 16
8342: PPUSH
8343: LD_INT 0
8345: PPUSH
8346: CALL_OW 59
// enable ( 7 ) ;
8350: LD_INT 7
8352: ENABLE_MARKED
// end ; end ;
8353: LD_VAR 0 6
8357: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
8358: LD_INT 0
8360: PPUSH
8361: PPUSH
// begin art := artefact_num [ size ] ;
8362: LD_ADDR_VAR 0 3
8366: PUSH
8367: LD_EXP 44
8371: PUSH
8372: LD_VAR 0 2
8376: ARRAY
8377: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8378: LD_ADDR_VAR 0 4
8382: PUSH
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 1
8390: MINUS
8391: PUSH
8392: LD_INT 100
8394: MUL
8395: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
8396: LD_VAR 0 4
8400: PUSH
8401: LD_INT 9
8403: PLUS
8404: PPUSH
8405: LD_INT 0
8407: PPUSH
8408: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8412: LD_VAR 0 4
8416: PUSH
8417: LD_INT 13
8419: PLUS
8420: PPUSH
8421: LD_INT 0
8423: PPUSH
8424: CALL_OW 109
// Init_Lab ( art ) ;
8428: LD_VAR 0 3
8432: PPUSH
8433: CALL 9909 0 1
// end ;
8437: PPOPN 4
8439: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
8440: LD_INT 0
8442: PPUSH
8443: PPUSH
8444: PPUSH
// begin art := artefact_num [ size ] ;
8445: LD_ADDR_VAR 0 3
8449: PUSH
8450: LD_EXP 44
8454: PUSH
8455: LD_VAR 0 2
8459: ARRAY
8460: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8461: LD_ADDR_VAR 0 4
8465: PUSH
8466: LD_VAR 0 3
8470: PUSH
8471: LD_INT 1
8473: MINUS
8474: PUSH
8475: LD_INT 100
8477: MUL
8478: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
8479: LD_VAR 0 4
8483: PUSH
8484: LD_INT 9
8486: PLUS
8487: PPUSH
8488: LD_INT 1
8490: PPUSH
8491: CALL_OW 109
// SetTag ( base + 13 , un ) ;
8495: LD_VAR 0 4
8499: PUSH
8500: LD_INT 13
8502: PLUS
8503: PPUSH
8504: LD_VAR 0 1
8508: PPUSH
8509: CALL_OW 109
// if GetTag ( base + 11 ) then
8513: LD_VAR 0 4
8517: PUSH
8518: LD_INT 11
8520: PLUS
8521: PPUSH
8522: CALL_OW 110
8526: IFFALSE 8689
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
8528: LD_ADDR_VAR 0 5
8532: PUSH
8533: LD_VAR 0 4
8537: PUSH
8538: LD_INT 11
8540: PLUS
8541: PPUSH
8542: CALL_OW 110
8546: PPUSH
8547: CALL_OW 255
8551: ST_TO_ADDR
// if GetTag ( base + 12 ) then
8552: LD_VAR 0 4
8556: PUSH
8557: LD_INT 12
8559: PLUS
8560: PPUSH
8561: CALL_OW 110
8565: IFFALSE 8633
// begin ComCancel ( GetTag ( base + 11 ) ) ;
8567: LD_VAR 0 4
8571: PUSH
8572: LD_INT 11
8574: PLUS
8575: PPUSH
8576: CALL_OW 110
8580: PPUSH
8581: CALL_OW 127
// wait ( 5 ) ;
8585: LD_INT 5
8587: PPUSH
8588: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
8592: LD_ADDR_EXP 46
8596: PUSH
8597: LD_EXP 46
8601: PUSH
8602: LD_VAR 0 4
8606: PUSH
8607: LD_INT 11
8609: PLUS
8610: PPUSH
8611: CALL_OW 110
8615: DIFF
8616: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
8617: LD_VAR 0 4
8621: PUSH
8622: LD_INT 12
8624: PLUS
8625: PPUSH
8626: LD_INT 0
8628: PPUSH
8629: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
8633: LD_VAR 0 4
8637: PUSH
8638: LD_VAR 0 5
8642: PUSH
8643: LD_INT 10
8645: MUL
8646: PLUS
8647: PUSH
8648: LD_INT 11
8650: PLUS
8651: PPUSH
8652: CALL_OW 110
8656: NOT
8657: IFFALSE 8673
// DeInit_Lab ( side , art ) ;
8659: LD_VAR 0 5
8663: PPUSH
8664: LD_VAR 0 3
8668: PPUSH
8669: CALL 10445 0 2
// SetTag ( base + 11 , 0 ) ;
8673: LD_VAR 0 4
8677: PUSH
8678: LD_INT 11
8680: PLUS
8681: PPUSH
8682: LD_INT 0
8684: PPUSH
8685: CALL_OW 109
// end ; end ;
8689: PPOPN 5
8691: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
8692: LD_INT 0
8694: PPUSH
8695: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8696: LD_ADDR_VAR 0 3
8700: PUSH
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 255
8710: PUSH
8711: LD_INT 1
8713: MINUS
8714: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8715: LD_ADDR_VAR 0 2
8719: PUSH
8720: DOUBLE
8721: LD_INT 0
8723: DEC
8724: ST_TO_ADDR
8725: LD_EXP 43
8729: PUSH
8730: LD_INT 1
8732: MINUS
8733: PUSH
8734: FOR_TO
8735: IFFALSE 8777
// if lab = GetTag ( un * 100 + 11 ) then
8737: LD_VAR 0 1
8741: PUSH
8742: LD_VAR 0 2
8746: PUSH
8747: LD_INT 100
8749: MUL
8750: PUSH
8751: LD_INT 11
8753: PLUS
8754: PPUSH
8755: CALL_OW 110
8759: EQUAL
8760: IFFALSE 8775
// Init_Lab ( un + 1 ) ;
8762: LD_VAR 0 2
8766: PUSH
8767: LD_INT 1
8769: PLUS
8770: PPUSH
8771: CALL 9909 0 1
8775: GO 8734
8777: POP
8778: POP
// end ;
8779: PPOPN 3
8781: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
8782: LD_INT 0
8784: PPUSH
8785: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8786: LD_ADDR_VAR 0 4
8790: PUSH
8791: LD_VAR 0 1
8795: PPUSH
8796: CALL_OW 255
8800: PUSH
8801: LD_INT 1
8803: MINUS
8804: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8805: LD_ADDR_VAR 0 3
8809: PUSH
8810: DOUBLE
8811: LD_INT 0
8813: DEC
8814: ST_TO_ADDR
8815: LD_EXP 43
8819: PUSH
8820: LD_INT 1
8822: MINUS
8823: PUSH
8824: FOR_TO
8825: IFFALSE 8943
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8827: LD_VAR 0 3
8831: PUSH
8832: LD_INT 100
8834: MUL
8835: PUSH
8836: LD_INT 11
8838: PLUS
8839: PPUSH
8840: CALL_OW 110
8844: PUSH
8845: LD_VAR 0 1
8849: EQUAL
8850: PUSH
8851: LD_VAR 0 3
8855: PUSH
8856: LD_INT 100
8858: MUL
8859: PUSH
8860: LD_INT 12
8862: PLUS
8863: PPUSH
8864: CALL_OW 110
8868: AND
8869: IFFALSE 8941
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
8871: LD_VAR 0 3
8875: PUSH
8876: LD_INT 100
8878: MUL
8879: PUSH
8880: LD_VAR 0 4
8884: PUSH
8885: LD_INT 10
8887: MUL
8888: PLUS
8889: PUSH
8890: LD_INT 22
8892: PLUS
8893: PPUSH
8894: LD_VAR 0 2
8898: PPUSH
8899: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8903: LD_VAR 0 3
8907: PUSH
8908: LD_INT 100
8910: MUL
8911: PUSH
8912: LD_INT 12
8914: PLUS
8915: PPUSH
8916: LD_INT 0
8918: PPUSH
8919: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8923: LD_ADDR_EXP 46
8927: PUSH
8928: LD_EXP 46
8932: PUSH
8933: LD_VAR 0 1
8937: DIFF
8938: ST_TO_ADDR
// break ;
8939: GO 8943
// end ;
8941: GO 8824
8943: POP
8944: POP
// Update_Artefact ( lab ) ;
8945: LD_VAR 0 1
8949: PPUSH
8950: CALL 10584 0 1
// end ;
8954: PPOPN 4
8956: END
// on SpecResearchComplete ( lab ) do var un , side ;
8957: LD_INT 0
8959: PPUSH
8960: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8961: LD_ADDR_VAR 0 3
8965: PUSH
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 255
8975: PUSH
8976: LD_INT 1
8978: MINUS
8979: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8980: LD_ADDR_VAR 0 2
8984: PUSH
8985: DOUBLE
8986: LD_INT 0
8988: DEC
8989: ST_TO_ADDR
8990: LD_EXP 43
8994: PUSH
8995: LD_INT 1
8997: MINUS
8998: PUSH
8999: FOR_TO
9000: IFFALSE 9146
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
9002: LD_VAR 0 2
9006: PUSH
9007: LD_INT 100
9009: MUL
9010: PUSH
9011: LD_INT 11
9013: PLUS
9014: PPUSH
9015: CALL_OW 110
9019: PUSH
9020: LD_VAR 0 1
9024: EQUAL
9025: PUSH
9026: LD_VAR 0 2
9030: PUSH
9031: LD_INT 100
9033: MUL
9034: PUSH
9035: LD_INT 12
9037: PLUS
9038: PPUSH
9039: CALL_OW 110
9043: AND
9044: IFFALSE 9144
// begin SetTag ( un * 100 + 12 , false ) ;
9046: LD_VAR 0 2
9050: PUSH
9051: LD_INT 100
9053: MUL
9054: PUSH
9055: LD_INT 12
9057: PLUS
9058: PPUSH
9059: LD_INT 0
9061: PPUSH
9062: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
9066: LD_VAR 0 2
9070: PUSH
9071: LD_INT 100
9073: MUL
9074: PUSH
9075: LD_VAR 0 3
9079: PUSH
9080: LD_INT 10
9082: MUL
9083: PLUS
9084: PUSH
9085: LD_INT 21
9087: PLUS
9088: PPUSH
9089: LD_INT 1
9091: PPUSH
9092: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
9096: LD_VAR 0 2
9100: PUSH
9101: LD_INT 100
9103: MUL
9104: PUSH
9105: LD_VAR 0 3
9109: PUSH
9110: LD_INT 10
9112: MUL
9113: PLUS
9114: PUSH
9115: LD_INT 25
9117: PLUS
9118: PPUSH
9119: LD_VAR 0 1
9123: PPUSH
9124: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
9128: LD_ADDR_EXP 46
9132: PUSH
9133: LD_EXP 46
9137: PUSH
9138: LD_VAR 0 1
9142: DIFF
9143: ST_TO_ADDR
// end ;
9144: GO 8999
9146: POP
9147: POP
// Update_Artefact ( lab ) ;
9148: LD_VAR 0 1
9152: PPUSH
9153: CALL 10584 0 1
// end ;
9157: PPOPN 3
9159: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
9160: LD_INT 0
9162: PPUSH
9163: PPUSH
9164: PPUSH
9165: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
9166: LD_ADDR_VAR 0 7
9170: PUSH
9171: LD_VAR 0 2
9175: PUSH
9176: LD_INT 1
9178: MINUS
9179: PUSH
9180: LD_INT 3
9182: MOD
9183: PUSH
9184: LD_INT 1
9186: PLUS
9187: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
9188: LD_ADDR_VAR 0 8
9192: PUSH
9193: LD_VAR 0 7
9197: PUSH
9198: LD_INT 1
9200: MINUS
9201: PUSH
9202: LD_INT 100
9204: MUL
9205: ST_TO_ADDR
// if number <= 3 then
9206: LD_VAR 0 2
9210: PUSH
9211: LD_INT 3
9213: LESSEQUAL
9214: IFFALSE 9446
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
9216: LD_VAR 0 8
9220: PUSH
9221: LD_INT 11
9223: PLUS
9224: PPUSH
9225: CALL_OW 110
9229: PPUSH
9230: LD_VAR 0 8
9234: PUSH
9235: LD_INT 5
9237: PLUS
9238: PPUSH
9239: CALL_OW 110
9243: PPUSH
9244: LD_INT 1
9246: PPUSH
9247: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
9251: LD_VAR 0 8
9255: PUSH
9256: LD_INT 11
9258: PLUS
9259: PPUSH
9260: CALL_OW 110
9264: PPUSH
9265: LD_VAR 0 8
9269: PUSH
9270: LD_VAR 0 1
9274: PUSH
9275: LD_INT 10
9277: MUL
9278: PLUS
9279: PUSH
9280: LD_INT 12
9282: PLUS
9283: PPUSH
9284: CALL_OW 110
9288: PPUSH
9289: CALL_OW 329
// SetTag ( base + 12 , true ) ;
9293: LD_VAR 0 8
9297: PUSH
9298: LD_INT 12
9300: PLUS
9301: PPUSH
9302: LD_INT 1
9304: PPUSH
9305: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
9309: LD_ADDR_EXP 46
9313: PUSH
9314: LD_EXP 46
9318: PUSH
9319: LD_VAR 0 8
9323: PUSH
9324: LD_INT 11
9326: PLUS
9327: PPUSH
9328: CALL_OW 110
9332: ADD
9333: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9334: LD_ADDR_VAR 0 5
9338: PUSH
9339: DOUBLE
9340: LD_INT 0
9342: DEC
9343: ST_TO_ADDR
9344: LD_EXP 43
9348: PUSH
9349: LD_INT 1
9351: MINUS
9352: PUSH
9353: FOR_TO
9354: IFFALSE 9442
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9356: LD_VAR 0 8
9360: PUSH
9361: LD_INT 11
9363: PLUS
9364: PPUSH
9365: CALL_OW 110
9369: PUSH
9370: LD_VAR 0 5
9374: PUSH
9375: LD_INT 100
9377: MUL
9378: PUSH
9379: LD_INT 11
9381: PLUS
9382: PPUSH
9383: CALL_OW 110
9387: PUSH
9388: LD_VAR 0 5
9392: PUSH
9393: LD_INT 100
9395: MUL
9396: PUSH
9397: LD_VAR 0 1
9401: PUSH
9402: LD_INT 10
9404: MUL
9405: PLUS
9406: PUSH
9407: LD_INT 15
9409: PLUS
9410: PPUSH
9411: CALL_OW 110
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: IN
9420: IFFALSE 9440
// DeInit_Lab ( side , un + 1 ) ;
9422: LD_VAR 0 1
9426: PPUSH
9427: LD_VAR 0 5
9431: PUSH
9432: LD_INT 1
9434: PLUS
9435: PPUSH
9436: CALL 10445 0 2
9440: GO 9353
9442: POP
9443: POP
// end else
9444: GO 9620
// begin succes := false ;
9446: LD_ADDR_VAR 0 6
9450: PUSH
9451: LD_INT 0
9453: ST_TO_ADDR
// case art of 1 :
9454: LD_VAR 0 7
9458: PUSH
9459: LD_INT 1
9461: DOUBLE
9462: EQUAL
9463: IFTRUE 9467
9465: GO 9495
9467: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
9468: LD_ADDR_VAR 0 6
9472: PUSH
9473: LD_VAR 0 1
9477: PPUSH
9478: LD_VAR 0 3
9482: PPUSH
9483: LD_VAR 0 4
9487: PPUSH
9488: CALL 11017 0 3
9492: ST_TO_ADDR
9493: GO 9563
9495: LD_INT 2
9497: DOUBLE
9498: EQUAL
9499: IFTRUE 9503
9501: GO 9526
9503: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
9504: LD_ADDR_VAR 0 6
9508: PUSH
9509: LD_VAR 0 1
9513: PPUSH
9514: LD_VAR 0 3
9518: PPUSH
9519: CALL 11255 0 2
9523: ST_TO_ADDR
9524: GO 9563
9526: LD_INT 3
9528: DOUBLE
9529: EQUAL
9530: IFTRUE 9534
9532: GO 9562
9534: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
9535: LD_ADDR_VAR 0 6
9539: PUSH
9540: LD_VAR 0 1
9544: PPUSH
9545: LD_VAR 0 3
9549: PPUSH
9550: LD_VAR 0 4
9554: PPUSH
9555: CALL 11651 0 3
9559: ST_TO_ADDR
9560: GO 9563
9562: POP
// if succes then
9563: LD_VAR 0 6
9567: IFFALSE 9620
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
9569: LD_VAR 0 8
9573: PUSH
9574: LD_VAR 0 1
9578: PUSH
9579: LD_INT 10
9581: MUL
9582: PLUS
9583: PUSH
9584: LD_INT 13
9586: PLUS
9587: PPUSH
9588: LD_VAR 0 8
9592: PUSH
9593: LD_INT 7
9595: PLUS
9596: PPUSH
9597: CALL_OW 110
9601: PPUSH
9602: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
9606: LD_VAR 0 1
9610: PPUSH
9611: LD_VAR 0 7
9615: PPUSH
9616: CALL 9623 0 2
// end ; end ; end ;
9620: PPOPN 8
9622: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
9623: LD_INT 0
9625: PPUSH
9626: PPUSH
9627: PPUSH
// base := ( art - 1 ) * 100 ;
9628: LD_ADDR_VAR 0 4
9632: PUSH
9633: LD_VAR 0 2
9637: PUSH
9638: LD_INT 1
9640: MINUS
9641: PUSH
9642: LD_INT 100
9644: MUL
9645: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9646: LD_ADDR_VAR 0 5
9650: PUSH
9651: LD_VAR 0 4
9655: PUSH
9656: LD_VAR 0 1
9660: PUSH
9661: LD_INT 10
9663: MUL
9664: PLUS
9665: PUSH
9666: LD_INT 15
9668: PLUS
9669: PPUSH
9670: CALL_OW 110
9674: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 5
9684: PUSH
9685: LD_EXP 46
9689: IN
9690: NOT
9691: AND
9692: IFFALSE 9750
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
9694: LD_VAR 0 1
9698: PPUSH
9699: LD_VAR 0 4
9703: PUSH
9704: LD_INT 1
9706: PLUS
9707: PUSH
9708: LD_VAR 0 4
9712: PUSH
9713: LD_VAR 0 1
9717: PUSH
9718: LD_INT 10
9720: MUL
9721: PLUS
9722: PUSH
9723: LD_INT 11
9725: PLUS
9726: PPUSH
9727: CALL_OW 110
9731: PLUS
9732: PPUSH
9733: CALL_OW 110
9737: PPUSH
9738: LD_INT 1
9740: PPUSH
9741: LD_VAR 0 5
9745: PPUSH
9746: CALL_OW 468
// end ;
9750: LD_VAR 0 3
9754: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
9755: LD_INT 0
9757: PPUSH
9758: PPUSH
9759: PPUSH
// base := ( art - 1 ) * 100 ;
9760: LD_ADDR_VAR 0 4
9764: PUSH
9765: LD_VAR 0 2
9769: PUSH
9770: LD_INT 1
9772: MINUS
9773: PUSH
9774: LD_INT 100
9776: MUL
9777: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9778: LD_ADDR_VAR 0 5
9782: PUSH
9783: LD_VAR 0 4
9787: PUSH
9788: LD_VAR 0 1
9792: PUSH
9793: LD_INT 10
9795: MUL
9796: PLUS
9797: PUSH
9798: LD_INT 15
9800: PLUS
9801: PPUSH
9802: CALL_OW 110
9806: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
9807: LD_VAR 0 5
9811: PUSH
9812: LD_VAR 0 5
9816: PUSH
9817: LD_EXP 46
9821: IN
9822: NOT
9823: AND
9824: PUSH
9825: LD_VAR 0 5
9829: PPUSH
9830: CALL_OW 313
9834: AND
9835: IFFALSE 9904
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
9837: LD_VAR 0 1
9841: PPUSH
9842: LD_VAR 0 4
9846: PUSH
9847: LD_INT 1
9849: PLUS
9850: PUSH
9851: LD_VAR 0 4
9855: PUSH
9856: LD_VAR 0 1
9860: PUSH
9861: LD_INT 10
9863: MUL
9864: PLUS
9865: PUSH
9866: LD_INT 11
9868: PLUS
9869: PPUSH
9870: CALL_OW 110
9874: PLUS
9875: PPUSH
9876: CALL_OW 110
9880: PPUSH
9881: LD_VAR 0 4
9885: PUSH
9886: LD_INT 3
9888: PLUS
9889: PPUSH
9890: CALL_OW 110
9894: PPUSH
9895: LD_VAR 0 5
9899: PPUSH
9900: CALL_OW 468
// end ;
9904: LD_VAR 0 3
9908: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9909: LD_INT 0
9911: PPUSH
9912: PPUSH
9913: PPUSH
9914: PPUSH
9915: PPUSH
9916: PPUSH
9917: PPUSH
9918: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9919: LD_ADDR_VAR 0 8
9923: PUSH
9924: LD_EXP 45
9928: PUSH
9929: LD_VAR 0 1
9933: ARRAY
9934: PPUSH
9935: CALL_OW 469
9939: ST_TO_ADDR
// if not art_hex then
9940: LD_VAR 0 8
9944: NOT
9945: IFFALSE 9949
// exit ;
9947: GO 10440
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9949: LD_ADDR_VAR 0 3
9953: PUSH
9954: LD_INT 2
9956: PUSH
9957: LD_INT 30
9959: PUSH
9960: LD_INT 6
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 30
9969: PUSH
9970: LD_INT 7
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 30
9979: PUSH
9980: LD_INT 8
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: PPUSH
9996: CALL_OW 69
10000: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
10001: LD_ADDR_VAR 0 9
10005: PUSH
10006: LD_VAR 0 3
10010: PPUSH
10011: LD_VAR 0 8
10015: PUSH
10016: LD_INT 1
10018: ARRAY
10019: PPUSH
10020: LD_VAR 0 8
10024: PUSH
10025: LD_INT 2
10027: ARRAY
10028: PPUSH
10029: CALL_OW 73
10033: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
10034: LD_ADDR_VAR 0 6
10038: PUSH
10039: LD_VAR 0 9
10043: PPUSH
10044: LD_VAR 0 8
10048: PUSH
10049: LD_INT 1
10051: ARRAY
10052: PPUSH
10053: LD_VAR 0 8
10057: PUSH
10058: LD_INT 2
10060: ARRAY
10061: PPUSH
10062: CALL_OW 297
10066: ST_TO_ADDR
// if dist < 9 then
10067: LD_VAR 0 6
10071: PUSH
10072: LD_INT 9
10074: LESS
10075: IFFALSE 10440
// begin side := GetSide ( nearest_lab ) ;
10077: LD_ADDR_VAR 0 4
10081: PUSH
10082: LD_VAR 0 9
10086: PPUSH
10087: CALL_OW 255
10091: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
10092: LD_VAR 0 4
10096: PPUSH
10097: LD_VAR 0 1
10101: PPUSH
10102: CALL 10445 0 2
// base := ( art - 1 ) * 100 ;
10106: LD_ADDR_VAR 0 5
10110: PUSH
10111: LD_VAR 0 1
10115: PUSH
10116: LD_INT 1
10118: MINUS
10119: PUSH
10120: LD_INT 100
10122: MUL
10123: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
10124: LD_INT 24
10126: PPUSH
10127: LD_VAR 0 4
10131: PPUSH
10132: CALL_OW 321
10136: PUSH
10137: LD_INT 2
10139: EQUAL
10140: PUSH
10141: LD_VAR 0 9
10145: PPUSH
10146: CALL_OW 313
10150: AND
10151: IFFALSE 10343
// begin if GetTag ( base + side * 10 + 11 ) then
10153: LD_VAR 0 5
10157: PUSH
10158: LD_VAR 0 4
10162: PUSH
10163: LD_INT 10
10165: MUL
10166: PLUS
10167: PUSH
10168: LD_INT 11
10170: PLUS
10171: PPUSH
10172: CALL_OW 110
10176: IFFALSE 10333
// begin if not GetTag ( base + side * 10 + 13 ) then
10178: LD_VAR 0 5
10182: PUSH
10183: LD_VAR 0 4
10187: PUSH
10188: LD_INT 10
10190: MUL
10191: PLUS
10192: PUSH
10193: LD_INT 13
10195: PLUS
10196: PPUSH
10197: CALL_OW 110
10201: NOT
10202: IFFALSE 10225
// state := GetTag ( base + 03 ) else
10204: LD_ADDR_VAR 0 7
10208: PUSH
10209: LD_VAR 0 5
10213: PUSH
10214: LD_INT 3
10216: PLUS
10217: PPUSH
10218: CALL_OW 110
10222: ST_TO_ADDR
10223: GO 10233
// state := art_gray ;
10225: LD_ADDR_VAR 0 7
10229: PUSH
10230: LD_INT 1
10232: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
10233: LD_VAR 0 5
10237: PUSH
10238: LD_VAR 0 4
10242: PUSH
10243: LD_INT 10
10245: MUL
10246: PLUS
10247: PUSH
10248: LD_INT 15
10250: PLUS
10251: PPUSH
10252: CALL_OW 110
10256: PUSH
10257: LD_VAR 0 5
10261: PUSH
10262: LD_VAR 0 4
10266: PUSH
10267: LD_INT 10
10269: MUL
10270: PLUS
10271: PUSH
10272: LD_INT 15
10274: PLUS
10275: PPUSH
10276: CALL_OW 110
10280: PUSH
10281: LD_VAR 0 9
10285: NONEQUAL
10286: AND
10287: IFFALSE 10303
// DeInit_Lab ( side , art ) ;
10289: LD_VAR 0 4
10293: PPUSH
10294: LD_VAR 0 1
10298: PPUSH
10299: CALL 10445 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
10303: LD_VAR 0 5
10307: PUSH
10308: LD_VAR 0 4
10312: PUSH
10313: LD_INT 10
10315: MUL
10316: PLUS
10317: PUSH
10318: LD_INT 15
10320: PLUS
10321: PPUSH
10322: LD_VAR 0 9
10326: PPUSH
10327: CALL_OW 109
// end else
10331: GO 10341
// state := art_instant ;
10333: LD_ADDR_VAR 0 7
10337: PUSH
10338: LD_INT 2
10340: ST_TO_ADDR
// end else
10341: GO 10351
// state := art_gray ;
10343: LD_ADDR_VAR 0 7
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
10351: LD_VAR 0 5
10355: PUSH
10356: LD_INT 11
10358: PLUS
10359: PPUSH
10360: LD_VAR 0 9
10364: PPUSH
10365: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
10369: LD_VAR 0 9
10373: PUSH
10374: LD_EXP 46
10378: IN
10379: NOT
10380: IFFALSE 10440
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
10382: LD_VAR 0 4
10386: PPUSH
10387: LD_VAR 0 5
10391: PUSH
10392: LD_INT 1
10394: PLUS
10395: PUSH
10396: LD_VAR 0 5
10400: PUSH
10401: LD_VAR 0 4
10405: PUSH
10406: LD_INT 10
10408: MUL
10409: PLUS
10410: PUSH
10411: LD_INT 11
10413: PLUS
10414: PPUSH
10415: CALL_OW 110
10419: PLUS
10420: PPUSH
10421: CALL_OW 110
10425: PPUSH
10426: LD_VAR 0 7
10430: PPUSH
10431: LD_VAR 0 9
10435: PPUSH
10436: CALL_OW 468
// end ; end ;
10440: LD_VAR 0 2
10444: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
10445: LD_INT 0
10447: PPUSH
10448: PPUSH
10449: PPUSH
// base := ( art - 1 ) * 100 ;
10450: LD_ADDR_VAR 0 4
10454: PUSH
10455: LD_VAR 0 2
10459: PUSH
10460: LD_INT 1
10462: MINUS
10463: PUSH
10464: LD_INT 100
10466: MUL
10467: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
10468: LD_ADDR_VAR 0 5
10472: PUSH
10473: LD_VAR 0 4
10477: PUSH
10478: LD_VAR 0 1
10482: PUSH
10483: LD_INT 10
10485: MUL
10486: PLUS
10487: PUSH
10488: LD_INT 15
10490: PLUS
10491: PPUSH
10492: CALL_OW 110
10496: ST_TO_ADDR
// if not lab then
10497: LD_VAR 0 5
10501: NOT
10502: IFFALSE 10523
// lab := GetTag ( base + 11 ) ;
10504: LD_ADDR_VAR 0 5
10508: PUSH
10509: LD_VAR 0 4
10513: PUSH
10514: LD_INT 11
10516: PLUS
10517: PPUSH
10518: CALL_OW 110
10522: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
10523: LD_VAR 0 1
10527: PPUSH
10528: LD_VAR 0 4
10532: PUSH
10533: LD_INT 1
10535: PLUS
10536: PUSH
10537: LD_VAR 0 4
10541: PUSH
10542: LD_VAR 0 1
10546: PUSH
10547: LD_INT 10
10549: MUL
10550: PLUS
10551: PUSH
10552: LD_INT 11
10554: PLUS
10555: PPUSH
10556: CALL_OW 110
10560: PLUS
10561: PPUSH
10562: CALL_OW 110
10566: PPUSH
10567: LD_INT 0
10569: PPUSH
10570: LD_VAR 0 5
10574: PPUSH
10575: CALL_OW 468
// end ;
10579: LD_VAR 0 3
10583: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
10584: LD_INT 0
10586: PPUSH
10587: PPUSH
10588: PPUSH
10589: PPUSH
// side := GetSide ( lab ) ;
10590: LD_ADDR_VAR 0 4
10594: PUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 255
10604: ST_TO_ADDR
// for art = 1 to artefact_number do
10605: LD_ADDR_VAR 0 3
10609: PUSH
10610: DOUBLE
10611: LD_INT 1
10613: DEC
10614: ST_TO_ADDR
10615: LD_EXP 43
10619: PUSH
10620: FOR_TO
10621: IFFALSE 10777
// begin base := ( art - 1 ) * 100 ;
10623: LD_ADDR_VAR 0 5
10627: PUSH
10628: LD_VAR 0 3
10632: PUSH
10633: LD_INT 1
10635: MINUS
10636: PUSH
10637: LD_INT 100
10639: MUL
10640: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
10641: LD_VAR 0 5
10645: PUSH
10646: LD_INT 11
10648: PLUS
10649: PPUSH
10650: CALL_OW 110
10654: PUSH
10655: LD_VAR 0 1
10659: EQUAL
10660: IFFALSE 10673
// Init_Lab ( art ) else
10662: LD_VAR 0 3
10666: PPUSH
10667: CALL 9909 0 1
10671: GO 10775
// begin if lab = GetTag ( base + side * 10 + 15 ) then
10673: LD_VAR 0 1
10677: PUSH
10678: LD_VAR 0 5
10682: PUSH
10683: LD_VAR 0 4
10687: PUSH
10688: LD_INT 10
10690: MUL
10691: PLUS
10692: PUSH
10693: LD_INT 15
10695: PLUS
10696: PPUSH
10697: CALL_OW 110
10701: EQUAL
10702: IFFALSE 10775
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
10704: LD_VAR 0 5
10708: PUSH
10709: LD_VAR 0 4
10713: PUSH
10714: LD_INT 10
10716: MUL
10717: PLUS
10718: PUSH
10719: LD_INT 13
10721: PLUS
10722: PPUSH
10723: CALL_OW 110
10727: PUSH
10728: LD_INT 0
10730: GREATER
10731: PUSH
10732: LD_VAR 0 1
10736: PPUSH
10737: CALL_OW 313
10741: NOT
10742: OR
10743: IFFALSE 10761
// Shadow_Artefact ( side , art ) else
10745: LD_VAR 0 4
10749: PPUSH
10750: LD_VAR 0 3
10754: PPUSH
10755: CALL 9623 0 2
10759: GO 10775
// Highlight_Artefact ( side , art ) ;
10761: LD_VAR 0 4
10765: PPUSH
10766: LD_VAR 0 3
10770: PPUSH
10771: CALL 9755 0 2
// end ; end ; end ;
10775: GO 10620
10777: POP
10778: POP
// end ; end_of_file
10779: LD_VAR 0 2
10783: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
10784: LD_INT 10
10786: PPUSH
10787: CALL_OW 67
// if not IsBusy ( lab ) then
10791: LD_VAR 0 2
10795: PPUSH
10796: CALL_OW 315
10800: NOT
10801: IFFALSE 10828
// begin labs_in_use := labs_in_use diff lab ;
10803: LD_ADDR_EXP 46
10807: PUSH
10808: LD_EXP 46
10812: PUSH
10813: LD_VAR 0 2
10817: DIFF
10818: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10819: LD_VAR 0 2
10823: PPUSH
10824: CALL 10584 0 1
// end ; end ;
10828: PPOPN 2
10830: END
// on ResearchStarted ( tech , lab ) do var un , side ;
10831: LD_INT 0
10833: PPUSH
10834: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
10835: LD_ADDR_EXP 46
10839: PUSH
10840: LD_EXP 46
10844: PUSH
10845: LD_VAR 0 2
10849: ADD
10850: ST_TO_ADDR
// side := GetSide ( lab ) ;
10851: LD_ADDR_VAR 0 4
10855: PUSH
10856: LD_VAR 0 2
10860: PPUSH
10861: CALL_OW 255
10865: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
10866: LD_ADDR_VAR 0 3
10870: PUSH
10871: DOUBLE
10872: LD_INT 0
10874: DEC
10875: ST_TO_ADDR
10876: LD_EXP 43
10880: PUSH
10881: LD_INT 1
10883: MINUS
10884: PUSH
10885: FOR_TO
10886: IFFALSE 10965
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10888: LD_VAR 0 2
10892: PUSH
10893: LD_VAR 0 3
10897: PUSH
10898: LD_INT 100
10900: MUL
10901: PUSH
10902: LD_INT 11
10904: PLUS
10905: PPUSH
10906: CALL_OW 110
10910: PUSH
10911: LD_VAR 0 3
10915: PUSH
10916: LD_INT 100
10918: MUL
10919: PUSH
10920: LD_VAR 0 4
10924: PUSH
10925: LD_INT 10
10927: MUL
10928: PLUS
10929: PUSH
10930: LD_INT 15
10932: PLUS
10933: PPUSH
10934: CALL_OW 110
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: IN
10943: IFFALSE 10963
// DeInit_Lab ( side , un + 1 ) ;
10945: LD_VAR 0 4
10949: PPUSH
10950: LD_VAR 0 3
10954: PUSH
10955: LD_INT 1
10957: PLUS
10958: PPUSH
10959: CALL 10445 0 2
10963: GO 10885
10965: POP
10966: POP
// end ;
10967: PPOPN 4
10969: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10970: LD_INT 10
10972: PPUSH
10973: CALL_OW 67
// if not IsBusy ( lab ) then
10977: LD_VAR 0 2
10981: PPUSH
10982: CALL_OW 315
10986: NOT
10987: IFFALSE 11014
// begin labs_in_use := labs_in_use diff lab ;
10989: LD_ADDR_EXP 46
10993: PUSH
10994: LD_EXP 46
10998: PUSH
10999: LD_VAR 0 2
11003: DIFF
11004: ST_TO_ADDR
// Update_Artefact ( lab ) ;
11005: LD_VAR 0 2
11009: PPUSH
11010: CALL 10584 0 1
// end ; end ; end_of_file
11014: PPOPN 2
11016: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
11017: LD_INT 0
11019: PPUSH
11020: PPUSH
11021: PPUSH
// vysledek := true ;
11022: LD_ADDR_VAR 0 5
11026: PUSH
11027: LD_INT 1
11029: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
11030: LD_ADDR_VAR 0 6
11034: PUSH
11035: LD_VAR 0 1
11039: PUSH
11040: LD_INT 10
11042: MUL
11043: PUSH
11044: LD_INT 15
11046: PLUS
11047: PPUSH
11048: CALL_OW 110
11052: PPUSH
11053: CALL_OW 274
11057: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
11058: LD_VAR 0 6
11062: PUSH
11063: LD_VAR 0 6
11067: PPUSH
11068: CALL_OW 279
11072: PUSH
11073: LD_INT 3
11075: ARRAY
11076: PUSH
11077: LD_INT 6
11079: PPUSH
11080: CALL_OW 110
11084: GREATEREQUAL
11085: AND
11086: IFFALSE 11176
// begin PlaceSeeing ( x , y , side , - 15 ) ;
11088: LD_VAR 0 2
11092: PPUSH
11093: LD_VAR 0 3
11097: PPUSH
11098: LD_VAR 0 1
11102: PPUSH
11103: LD_INT 15
11105: NEG
11106: PPUSH
11107: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
11111: LD_VAR 0 6
11115: PPUSH
11116: LD_INT 3
11118: PPUSH
11119: LD_VAR 0 6
11123: PPUSH
11124: CALL_OW 279
11128: PUSH
11129: LD_INT 3
11131: ARRAY
11132: PUSH
11133: LD_INT 6
11135: PPUSH
11136: CALL_OW 110
11140: MINUS
11141: PPUSH
11142: CALL_OW 277
// view_data := [ x , y , side ] ;
11146: LD_ADDR_LOC 12
11150: PUSH
11151: LD_VAR 0 2
11155: PUSH
11156: LD_VAR 0 3
11160: PUSH
11161: LD_VAR 0 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: ST_TO_ADDR
// enable ( 1 ) ;
11171: LD_INT 1
11173: ENABLE_MARKED
// end else
11174: GO 11184
// vysledek := false ;
11176: LD_ADDR_VAR 0 5
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// result := vysledek ;
11184: LD_ADDR_VAR 0 4
11188: PUSH
11189: LD_VAR 0 5
11193: ST_TO_ADDR
// end ;
11194: LD_VAR 0 4
11198: RET
// every 0 0$2 trigger view_data marked 1 do
11199: LD_LOC 12
11203: IFFALSE 11254
11205: GO 11207
11207: DISABLE
// begin wait ( 0 0$30 ) ;
11208: LD_INT 1050
11210: PPUSH
11211: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
11215: LD_LOC 12
11219: PUSH
11220: LD_INT 1
11222: ARRAY
11223: PPUSH
11224: LD_LOC 12
11228: PUSH
11229: LD_INT 2
11231: ARRAY
11232: PPUSH
11233: LD_LOC 12
11237: PUSH
11238: LD_INT 3
11240: ARRAY
11241: PPUSH
11242: CALL_OW 331
// view_data := 0 ;
11246: LD_ADDR_LOC 12
11250: PUSH
11251: LD_INT 0
11253: ST_TO_ADDR
// end ;
11254: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
11255: LD_INT 0
11257: PPUSH
11258: PPUSH
11259: PPUSH
11260: PPUSH
11261: PPUSH
11262: PPUSH
11263: PPUSH
11264: PPUSH
// vysledek := true ;
11265: LD_ADDR_VAR 0 4
11269: PUSH
11270: LD_INT 1
11272: ST_TO_ADDR
// it_can := false ;
11273: LD_ADDR_VAR 0 8
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
11281: LD_ADDR_VAR 0 9
11285: PUSH
11286: LD_INT 30
11288: PUSH
11289: LD_INT 28
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
11296: LD_ADDR_VAR 0 10
11300: PUSH
11301: LD_INT 8
11303: PUSH
11304: LD_INT 48
11306: PUSH
11307: LD_INT 29
11309: PUSH
11310: LD_INT 49
11312: PUSH
11313: LD_INT 10
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
11323: LD_ADDR_VAR 0 7
11327: PUSH
11328: LD_VAR 0 2
11332: PPUSH
11333: CALL_OW 247
11337: PUSH
11338: LD_INT 3
11340: EQUAL
11341: PUSH
11342: LD_VAR 0 2
11346: PPUSH
11347: CALL_OW 266
11351: PUSH
11352: LD_VAR 0 9
11356: IN
11357: PUSH
11358: LD_VAR 0 2
11362: PPUSH
11363: CALL_OW 269
11367: PUSH
11368: LD_VAR 0 10
11372: IN
11373: OR
11374: AND
11375: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
11376: LD_ADDR_VAR 0 6
11380: PUSH
11381: LD_VAR 0 2
11385: PPUSH
11386: CALL_OW 247
11390: PUSH
11391: LD_INT 2
11393: EQUAL
11394: PUSH
11395: LD_VAR 0 2
11399: PPUSH
11400: CALL_OW 264
11404: PUSH
11405: LD_VAR 0 10
11409: IN
11410: PUSH
11411: LD_VAR 0 2
11415: PPUSH
11416: CALL_OW 262
11420: PUSH
11421: LD_INT 3
11423: EQUAL
11424: OR
11425: AND
11426: ST_TO_ADDR
// case def_artefact_two of 1 :
11427: LD_EXP 2
11431: PUSH
11432: LD_INT 1
11434: DOUBLE
11435: EQUAL
11436: IFTRUE 11440
11438: GO 11457
11440: POP
// if b_can then
11441: LD_VAR 0 7
11445: IFFALSE 11455
// it_can := true ; 2 :
11447: LD_ADDR_VAR 0 8
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
11455: GO 11514
11457: LD_INT 2
11459: DOUBLE
11460: EQUAL
11461: IFTRUE 11465
11463: GO 11482
11465: POP
// if v_can then
11466: LD_VAR 0 6
11470: IFFALSE 11480
// it_can := true ; 3 :
11472: LD_ADDR_VAR 0 8
11476: PUSH
11477: LD_INT 1
11479: ST_TO_ADDR
11480: GO 11514
11482: LD_INT 3
11484: DOUBLE
11485: EQUAL
11486: IFTRUE 11490
11488: GO 11513
11490: POP
// if b_can or v_can then
11491: LD_VAR 0 7
11495: PUSH
11496: LD_VAR 0 6
11500: OR
11501: IFFALSE 11511
// it_can := true ; end ;
11503: LD_ADDR_VAR 0 8
11507: PUSH
11508: LD_INT 1
11510: ST_TO_ADDR
11511: GO 11514
11513: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
11514: LD_ADDR_VAR 0 5
11518: PUSH
11519: LD_INT 100
11521: PUSH
11522: LD_VAR 0 1
11526: PUSH
11527: LD_INT 10
11529: MUL
11530: PLUS
11531: PUSH
11532: LD_INT 15
11534: PLUS
11535: PPUSH
11536: CALL_OW 110
11540: PPUSH
11541: CALL_OW 274
11545: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
11546: LD_VAR 0 5
11550: PUSH
11551: LD_VAR 0 8
11555: AND
11556: PUSH
11557: LD_VAR 0 5
11561: PPUSH
11562: CALL_OW 279
11566: PUSH
11567: LD_INT 3
11569: ARRAY
11570: PUSH
11571: LD_INT 106
11573: PPUSH
11574: CALL_OW 110
11578: GREATEREQUAL
11579: AND
11580: IFFALSE 11628
// begin KillUnit ( un ) ;
11582: LD_VAR 0 2
11586: PPUSH
11587: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
11591: LD_VAR 0 5
11595: PPUSH
11596: LD_INT 3
11598: PPUSH
11599: LD_VAR 0 5
11603: PPUSH
11604: CALL_OW 279
11608: PUSH
11609: LD_INT 3
11611: ARRAY
11612: PUSH
11613: LD_INT 106
11615: PPUSH
11616: CALL_OW 110
11620: MINUS
11621: PPUSH
11622: CALL_OW 277
// end else
11626: GO 11636
// vysledek := false ;
11628: LD_ADDR_VAR 0 4
11632: PUSH
11633: LD_INT 0
11635: ST_TO_ADDR
// result := vysledek ;
11636: LD_ADDR_VAR 0 3
11640: PUSH
11641: LD_VAR 0 4
11645: ST_TO_ADDR
// end ;
11646: LD_VAR 0 3
11650: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
11651: LD_INT 0
11653: PPUSH
11654: PPUSH
11655: PPUSH
11656: PPUSH
// vysledek := true ;
11657: LD_ADDR_VAR 0 5
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
11665: LD_ADDR_VAR 0 7
11669: PUSH
11670: LD_INT 200
11672: PUSH
11673: LD_VAR 0 1
11677: PUSH
11678: LD_INT 10
11680: MUL
11681: PLUS
11682: PUSH
11683: LD_INT 15
11685: PLUS
11686: PPUSH
11687: CALL_OW 110
11691: PPUSH
11692: CALL_OW 274
11696: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
11697: LD_VAR 0 7
11701: PUSH
11702: LD_VAR 0 7
11706: PPUSH
11707: CALL_OW 279
11711: PUSH
11712: LD_INT 3
11714: ARRAY
11715: PUSH
11716: LD_INT 206
11718: PPUSH
11719: CALL_OW 110
11723: GREATEREQUAL
11724: AND
11725: IFFALSE 11781
// begin ArtContamination ( p1 , p2 , 15 ) ;
11727: LD_VAR 0 2
11731: PPUSH
11732: LD_VAR 0 3
11736: PPUSH
11737: LD_INT 15
11739: PPUSH
11740: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
11744: LD_VAR 0 7
11748: PPUSH
11749: LD_INT 3
11751: PPUSH
11752: LD_VAR 0 7
11756: PPUSH
11757: CALL_OW 279
11761: PUSH
11762: LD_INT 3
11764: ARRAY
11765: PUSH
11766: LD_INT 206
11768: PPUSH
11769: CALL_OW 110
11773: MINUS
11774: PPUSH
11775: CALL_OW 277
// end else
11779: GO 11789
// vysledek := false ;
11781: LD_ADDR_VAR 0 5
11785: PUSH
11786: LD_INT 0
11788: ST_TO_ADDR
// result := vysledek ;
11789: LD_ADDR_VAR 0 4
11793: PUSH
11794: LD_VAR 0 5
11798: ST_TO_ADDR
// end ;
11799: LD_VAR 0 4
11803: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
11804: GO 11806
11806: DISABLE
11807: LD_INT 0
11809: PPUSH
11810: PPUSH
11811: PPUSH
// begin for art = 0 to artefact_number do
11812: LD_ADDR_VAR 0 1
11816: PUSH
11817: DOUBLE
11818: LD_INT 0
11820: DEC
11821: ST_TO_ADDR
11822: LD_EXP 43
11826: PUSH
11827: FOR_TO
11828: IFFALSE 11962
// for side = 1 to Side_Positions do
11830: LD_ADDR_VAR 0 2
11834: PUSH
11835: DOUBLE
11836: LD_INT 1
11838: DEC
11839: ST_TO_ADDR
11840: LD_EXP 23
11844: PUSH
11845: FOR_TO
11846: IFFALSE 11958
// begin recharge := art * 100 + side * 10 + 13 ;
11848: LD_ADDR_VAR 0 3
11852: PUSH
11853: LD_VAR 0 1
11857: PUSH
11858: LD_INT 100
11860: MUL
11861: PUSH
11862: LD_VAR 0 2
11866: PUSH
11867: LD_INT 10
11869: MUL
11870: PLUS
11871: PUSH
11872: LD_INT 13
11874: PLUS
11875: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
11876: LD_EXP 23
11880: PUSH
11881: LD_VAR 0 2
11885: ARRAY
11886: PUSH
11887: LD_VAR 0 3
11891: PPUSH
11892: CALL_OW 110
11896: PUSH
11897: LD_INT 0
11899: GREATER
11900: AND
11901: IFFALSE 11956
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11903: LD_VAR 0 3
11907: PPUSH
11908: LD_VAR 0 3
11912: PPUSH
11913: CALL_OW 110
11917: PUSH
11918: LD_INT 1
11920: MINUS
11921: PPUSH
11922: CALL_OW 109
// if not GetTag ( recharge ) then
11926: LD_VAR 0 3
11930: PPUSH
11931: CALL_OW 110
11935: NOT
11936: IFFALSE 11956
// Highlight_Artefact ( side , art + 1 ) ;
11938: LD_VAR 0 2
11942: PPUSH
11943: LD_VAR 0 1
11947: PUSH
11948: LD_INT 1
11950: PLUS
11951: PPUSH
11952: CALL 9755 0 2
// end ; end ;
11956: GO 11845
11958: POP
11959: POP
11960: GO 11827
11962: POP
11963: POP
// enable ;
11964: ENABLE
// end ; end_of_file
11965: PPOPN 3
11967: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11968: LD_INT 0
11970: PPUSH
11971: PPUSH
11972: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11973: LD_INT 18
11975: PPUSH
11976: LD_VAR 0 1
11980: PUSH
11981: LD_INT 1
11983: ARRAY
11984: PPUSH
11985: LD_VAR 0 1
11989: PUSH
11990: LD_INT 2
11992: ARRAY
11993: PPUSH
11994: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11998: LD_VAR 0 1
12002: PUSH
12003: LD_INT 1
12005: ARRAY
12006: PPUSH
12007: LD_VAR 0 1
12011: PUSH
12012: LD_INT 2
12014: ARRAY
12015: PPUSH
12016: CALL_OW 494
// Wait ( 30 ) ;
12020: LD_INT 30
12022: PPUSH
12023: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
12027: LD_INT 18
12029: PPUSH
12030: LD_INT 4
12032: PPUSH
12033: CALL_OW 286
// base := ( art - 1 ) * 100 ;
12037: LD_ADDR_VAR 0 4
12041: PUSH
12042: LD_VAR 0 2
12046: PUSH
12047: LD_INT 1
12049: MINUS
12050: PUSH
12051: LD_INT 100
12053: MUL
12054: ST_TO_ADDR
// if GetTag ( base + 11 ) then
12055: LD_VAR 0 4
12059: PUSH
12060: LD_INT 11
12062: PLUS
12063: PPUSH
12064: CALL_OW 110
12068: IFFALSE 12206
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
12070: LD_ADDR_VAR 0 5
12074: PUSH
12075: LD_VAR 0 4
12079: PUSH
12080: LD_INT 11
12082: PLUS
12083: PPUSH
12084: CALL_OW 110
12088: PPUSH
12089: CALL_OW 255
12093: ST_TO_ADDR
// if GetTag ( base + 12 ) then
12094: LD_VAR 0 4
12098: PUSH
12099: LD_INT 12
12101: PLUS
12102: PPUSH
12103: CALL_OW 110
12107: IFFALSE 12150
// begin ComCancel ( GetTag ( base + 11 ) ) ;
12109: LD_VAR 0 4
12113: PUSH
12114: LD_INT 11
12116: PLUS
12117: PPUSH
12118: CALL_OW 110
12122: PPUSH
12123: CALL_OW 127
// Wait ( 10 ) ;
12127: LD_INT 10
12129: PPUSH
12130: CALL_OW 67
// SetTag ( base + 12 , false ) ;
12134: LD_VAR 0 4
12138: PUSH
12139: LD_INT 12
12141: PLUS
12142: PPUSH
12143: LD_INT 0
12145: PPUSH
12146: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
12150: LD_VAR 0 4
12154: PUSH
12155: LD_VAR 0 5
12159: PUSH
12160: LD_INT 10
12162: MUL
12163: PLUS
12164: PUSH
12165: LD_INT 11
12167: PLUS
12168: PPUSH
12169: CALL_OW 110
12173: NOT
12174: IFFALSE 12190
// DeInit_Lab ( side , art ) ;
12176: LD_VAR 0 5
12180: PPUSH
12181: LD_VAR 0 2
12185: PPUSH
12186: CALL 10445 0 2
// SetTag ( base + 11 , 0 ) ;
12190: LD_VAR 0 4
12194: PUSH
12195: LD_INT 11
12197: PLUS
12198: PPUSH
12199: LD_INT 0
12201: PPUSH
12202: CALL_OW 109
// end ; end ;
12206: LD_VAR 0 3
12210: RET
// every 0 0$5 marked 5 do var hex , un ;
12211: GO 12213
12213: DISABLE
12214: LD_INT 0
12216: PPUSH
12217: PPUSH
// begin wait ( 3 3$0 ) ;
12218: LD_INT 6300
12220: PPUSH
12221: CALL_OW 67
// if GetTag ( 09 ) then
12225: LD_INT 9
12227: PPUSH
12228: CALL_OW 110
12232: IFFALSE 12271
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
12234: LD_ADDR_VAR 0 1
12238: PUSH
12239: LD_INT 13
12241: PPUSH
12242: CALL_OW 110
12246: PPUSH
12247: CALL_OW 250
12251: PUSH
12252: LD_INT 13
12254: PPUSH
12255: CALL_OW 110
12259: PPUSH
12260: CALL_OW 251
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: ST_TO_ADDR
12269: GO 12290
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
12271: LD_ADDR_VAR 0 1
12275: PUSH
12276: LD_EXP 45
12280: PUSH
12281: LD_INT 1
12283: ARRAY
12284: PPUSH
12285: CALL_OW 469
12289: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12290: LD_VAR 0 1
12294: PUSH
12295: LD_INT 1
12297: ARRAY
12298: PPUSH
12299: LD_VAR 0 1
12303: PUSH
12304: LD_INT 2
12306: ARRAY
12307: PPUSH
12308: LD_INT 16
12310: PPUSH
12311: CALL_OW 309
12315: NOT
12316: IFFALSE 12593
// begin if GetTag ( 09 ) then
12318: LD_INT 9
12320: PPUSH
12321: CALL_OW 110
12325: IFFALSE 12372
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12327: LD_INT 13
12329: PPUSH
12330: CALL_OW 110
12334: PPUSH
12335: LD_INT 4
12337: PPUSH
12338: LD_EXP 45
12342: PUSH
12343: LD_INT 1
12345: ARRAY
12346: NEG
12347: PPUSH
12348: CALL_OW 290
// SetTag ( 09 , 0 ) ;
12352: LD_INT 9
12354: PPUSH
12355: LD_INT 0
12357: PPUSH
12358: CALL_OW 109
// SetTag ( 13 , 0 ) ;
12362: LD_INT 13
12364: PPUSH
12365: LD_INT 0
12367: PPUSH
12368: CALL_OW 109
// end ; DestroyArtefact ( hex , 1 ) ;
12372: LD_VAR 0 1
12376: PPUSH
12377: LD_INT 1
12379: PPUSH
12380: CALL 11968 0 2
// wait ( 5 ) ;
12384: LD_INT 5
12386: PPUSH
12387: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12391: LD_ADDR_VAR 0 1
12395: PUSH
12396: LD_INT 16
12398: PPUSH
12399: LD_INT 0
12401: PPUSH
12402: CALL_OW 16
12406: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12407: LD_ADDR_VAR 0 2
12411: PUSH
12412: LD_VAR 0 1
12416: PUSH
12417: LD_INT 1
12419: ARRAY
12420: PPUSH
12421: LD_VAR 0 1
12425: PUSH
12426: LD_INT 2
12428: ARRAY
12429: PPUSH
12430: CALL_OW 428
12434: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12435: LD_VAR 0 2
12439: PUSH
12440: LD_INT 0
12442: GREATER
12443: PUSH
12444: LD_VAR 0 2
12448: PPUSH
12449: CALL_OW 247
12453: PUSH
12454: LD_INT 3
12456: EQUAL
12457: AND
12458: IFFALSE 12502
// begin KillUnit ( un ) ;
12460: LD_VAR 0 2
12464: PPUSH
12465: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12469: LD_VAR 0 1
12473: PUSH
12474: LD_INT 1
12476: ARRAY
12477: PPUSH
12478: LD_VAR 0 1
12482: PUSH
12483: LD_INT 2
12485: ARRAY
12486: PPUSH
12487: CALL_OW 428
12491: IFFALSE 12502
// wait ( 10 ) ;
12493: LD_INT 10
12495: PPUSH
12496: CALL_OW 67
12500: GO 12469
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12502: LD_VAR 0 1
12506: PUSH
12507: LD_INT 1
12509: ARRAY
12510: PPUSH
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 2
12518: ARRAY
12519: PPUSH
12520: CALL_OW 428
12524: NOT
12525: IFFALSE 12391
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12527: LD_VAR 0 1
12531: PUSH
12532: LD_INT 1
12534: ARRAY
12535: PPUSH
12536: LD_VAR 0 1
12540: PUSH
12541: LD_INT 2
12543: ARRAY
12544: PPUSH
12545: CALL_OW 494
// wait ( 30 ) ;
12549: LD_INT 30
12551: PPUSH
12552: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12556: LD_INT 4
12558: PPUSH
12559: LD_EXP 45
12563: PUSH
12564: LD_INT 1
12566: ARRAY
12567: PPUSH
12568: LD_VAR 0 1
12572: PUSH
12573: LD_INT 1
12575: ARRAY
12576: PPUSH
12577: LD_VAR 0 1
12581: PUSH
12582: LD_INT 2
12584: ARRAY
12585: PPUSH
12586: LD_INT 0
12588: PPUSH
12589: CALL_OW 58
// end ; enable ;
12593: ENABLE
// end ;
12594: PPOPN 2
12596: END
// every 0 0$5 marked 6 do var hex , un ;
12597: GO 12599
12599: DISABLE
12600: LD_INT 0
12602: PPUSH
12603: PPUSH
// begin wait ( 3 3$30 ) ;
12604: LD_INT 7350
12606: PPUSH
12607: CALL_OW 67
// if GetTag ( 109 ) then
12611: LD_INT 109
12613: PPUSH
12614: CALL_OW 110
12618: IFFALSE 12657
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
12620: LD_ADDR_VAR 0 1
12624: PUSH
12625: LD_INT 113
12627: PPUSH
12628: CALL_OW 110
12632: PPUSH
12633: CALL_OW 250
12637: PUSH
12638: LD_INT 113
12640: PPUSH
12641: CALL_OW 110
12645: PPUSH
12646: CALL_OW 251
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: ST_TO_ADDR
12655: GO 12676
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: LD_EXP 45
12666: PUSH
12667: LD_INT 2
12669: ARRAY
12670: PPUSH
12671: CALL_OW 469
12675: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12676: LD_VAR 0 1
12680: PUSH
12681: LD_INT 1
12683: ARRAY
12684: PPUSH
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 2
12692: ARRAY
12693: PPUSH
12694: LD_INT 16
12696: PPUSH
12697: CALL_OW 309
12701: NOT
12702: IFFALSE 12979
// begin if GetTag ( 109 ) then
12704: LD_INT 109
12706: PPUSH
12707: CALL_OW 110
12711: IFFALSE 12758
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12713: LD_INT 113
12715: PPUSH
12716: CALL_OW 110
12720: PPUSH
12721: LD_INT 4
12723: PPUSH
12724: LD_EXP 45
12728: PUSH
12729: LD_INT 1
12731: ARRAY
12732: NEG
12733: PPUSH
12734: CALL_OW 290
// SetTag ( 109 , 0 ) ;
12738: LD_INT 109
12740: PPUSH
12741: LD_INT 0
12743: PPUSH
12744: CALL_OW 109
// SetTag ( 113 , 0 ) ;
12748: LD_INT 113
12750: PPUSH
12751: LD_INT 0
12753: PPUSH
12754: CALL_OW 109
// end ; DestroyArtefact ( hex , 2 ) ;
12758: LD_VAR 0 1
12762: PPUSH
12763: LD_INT 2
12765: PPUSH
12766: CALL 11968 0 2
// wait ( 5 ) ;
12770: LD_INT 5
12772: PPUSH
12773: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12777: LD_ADDR_VAR 0 1
12781: PUSH
12782: LD_INT 16
12784: PPUSH
12785: LD_INT 0
12787: PPUSH
12788: CALL_OW 16
12792: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12793: LD_ADDR_VAR 0 2
12797: PUSH
12798: LD_VAR 0 1
12802: PUSH
12803: LD_INT 1
12805: ARRAY
12806: PPUSH
12807: LD_VAR 0 1
12811: PUSH
12812: LD_INT 2
12814: ARRAY
12815: PPUSH
12816: CALL_OW 428
12820: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12821: LD_VAR 0 2
12825: PUSH
12826: LD_INT 0
12828: GREATER
12829: PUSH
12830: LD_VAR 0 2
12834: PPUSH
12835: CALL_OW 247
12839: PUSH
12840: LD_INT 3
12842: EQUAL
12843: AND
12844: IFFALSE 12888
// begin KillUnit ( un ) ;
12846: LD_VAR 0 2
12850: PPUSH
12851: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12855: LD_VAR 0 1
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PPUSH
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 2
12871: ARRAY
12872: PPUSH
12873: CALL_OW 428
12877: IFFALSE 12888
// wait ( 10 ) ;
12879: LD_INT 10
12881: PPUSH
12882: CALL_OW 67
12886: GO 12855
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12888: LD_VAR 0 1
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: PPUSH
12897: LD_VAR 0 1
12901: PUSH
12902: LD_INT 2
12904: ARRAY
12905: PPUSH
12906: CALL_OW 428
12910: NOT
12911: IFFALSE 12777
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12913: LD_VAR 0 1
12917: PUSH
12918: LD_INT 1
12920: ARRAY
12921: PPUSH
12922: LD_VAR 0 1
12926: PUSH
12927: LD_INT 2
12929: ARRAY
12930: PPUSH
12931: CALL_OW 494
// wait ( 30 ) ;
12935: LD_INT 30
12937: PPUSH
12938: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12942: LD_INT 4
12944: PPUSH
12945: LD_EXP 45
12949: PUSH
12950: LD_INT 2
12952: ARRAY
12953: PPUSH
12954: LD_VAR 0 1
12958: PUSH
12959: LD_INT 1
12961: ARRAY
12962: PPUSH
12963: LD_VAR 0 1
12967: PUSH
12968: LD_INT 2
12970: ARRAY
12971: PPUSH
12972: LD_INT 0
12974: PPUSH
12975: CALL_OW 58
// end ; enable ;
12979: ENABLE
// end ;
12980: PPOPN 2
12982: END
// every 0 0$5 marked 7 do var hex , un ;
12983: GO 12985
12985: DISABLE
12986: LD_INT 0
12988: PPUSH
12989: PPUSH
// begin wait ( 4 4$0 ) ;
12990: LD_INT 8400
12992: PPUSH
12993: CALL_OW 67
// if GetTag ( 209 ) then
12997: LD_INT 209
12999: PPUSH
13000: CALL_OW 110
13004: IFFALSE 13043
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
13006: LD_ADDR_VAR 0 1
13010: PUSH
13011: LD_INT 213
13013: PPUSH
13014: CALL_OW 110
13018: PPUSH
13019: CALL_OW 250
13023: PUSH
13024: LD_INT 213
13026: PPUSH
13027: CALL_OW 110
13031: PPUSH
13032: CALL_OW 251
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: ST_TO_ADDR
13041: GO 13062
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
13043: LD_ADDR_VAR 0 1
13047: PUSH
13048: LD_EXP 45
13052: PUSH
13053: LD_INT 3
13055: ARRAY
13056: PPUSH
13057: CALL_OW 469
13061: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
13062: LD_VAR 0 1
13066: PUSH
13067: LD_INT 1
13069: ARRAY
13070: PPUSH
13071: LD_VAR 0 1
13075: PUSH
13076: LD_INT 2
13078: ARRAY
13079: PPUSH
13080: LD_INT 16
13082: PPUSH
13083: CALL_OW 309
13087: NOT
13088: IFFALSE 13365
// begin if GetTag ( 209 ) then
13090: LD_INT 209
13092: PPUSH
13093: CALL_OW 110
13097: IFFALSE 13144
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 1 ] ) ;
13099: LD_INT 213
13101: PPUSH
13102: CALL_OW 110
13106: PPUSH
13107: LD_INT 4
13109: PPUSH
13110: LD_EXP 45
13114: PUSH
13115: LD_INT 1
13117: ARRAY
13118: NEG
13119: PPUSH
13120: CALL_OW 290
// SetTag ( 209 , 0 ) ;
13124: LD_INT 209
13126: PPUSH
13127: LD_INT 0
13129: PPUSH
13130: CALL_OW 109
// SetTag ( 213 , 0 ) ;
13134: LD_INT 213
13136: PPUSH
13137: LD_INT 0
13139: PPUSH
13140: CALL_OW 109
// end ; DestroyArtefact ( hex , 3 ) ;
13144: LD_VAR 0 1
13148: PPUSH
13149: LD_INT 3
13151: PPUSH
13152: CALL 11968 0 2
// wait ( 5 ) ;
13156: LD_INT 5
13158: PPUSH
13159: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
13163: LD_ADDR_VAR 0 1
13167: PUSH
13168: LD_INT 16
13170: PPUSH
13171: LD_INT 0
13173: PPUSH
13174: CALL_OW 16
13178: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13179: LD_ADDR_VAR 0 2
13183: PUSH
13184: LD_VAR 0 1
13188: PUSH
13189: LD_INT 1
13191: ARRAY
13192: PPUSH
13193: LD_VAR 0 1
13197: PUSH
13198: LD_INT 2
13200: ARRAY
13201: PPUSH
13202: CALL_OW 428
13206: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
13207: LD_VAR 0 2
13211: PUSH
13212: LD_INT 0
13214: GREATER
13215: PUSH
13216: LD_VAR 0 2
13220: PPUSH
13221: CALL_OW 247
13225: PUSH
13226: LD_INT 3
13228: EQUAL
13229: AND
13230: IFFALSE 13274
// begin KillUnit ( un ) ;
13232: LD_VAR 0 2
13236: PPUSH
13237: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
13241: LD_VAR 0 1
13245: PUSH
13246: LD_INT 1
13248: ARRAY
13249: PPUSH
13250: LD_VAR 0 1
13254: PUSH
13255: LD_INT 2
13257: ARRAY
13258: PPUSH
13259: CALL_OW 428
13263: IFFALSE 13274
// wait ( 10 ) ;
13265: LD_INT 10
13267: PPUSH
13268: CALL_OW 67
13272: GO 13241
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13274: LD_VAR 0 1
13278: PUSH
13279: LD_INT 1
13281: ARRAY
13282: PPUSH
13283: LD_VAR 0 1
13287: PUSH
13288: LD_INT 2
13290: ARRAY
13291: PPUSH
13292: CALL_OW 428
13296: NOT
13297: IFFALSE 13163
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13299: LD_VAR 0 1
13303: PUSH
13304: LD_INT 1
13306: ARRAY
13307: PPUSH
13308: LD_VAR 0 1
13312: PUSH
13313: LD_INT 2
13315: ARRAY
13316: PPUSH
13317: CALL_OW 494
// wait ( 30 ) ;
13321: LD_INT 30
13323: PPUSH
13324: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13328: LD_INT 4
13330: PPUSH
13331: LD_EXP 45
13335: PUSH
13336: LD_INT 3
13338: ARRAY
13339: PPUSH
13340: LD_VAR 0 1
13344: PUSH
13345: LD_INT 1
13347: ARRAY
13348: PPUSH
13349: LD_VAR 0 1
13353: PUSH
13354: LD_INT 2
13356: ARRAY
13357: PPUSH
13358: LD_INT 0
13360: PPUSH
13361: CALL_OW 58
// end ; enable ;
13365: ENABLE
// end ; end_of_file
13366: PPOPN 2
13368: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13369: LD_INT 0
13371: PPUSH
13372: PPUSH
// for un in battle_flags_id do
13373: LD_ADDR_VAR 0 2
13377: PUSH
13378: LD_EXP 34
13382: PUSH
13383: FOR_IN
13384: IFFALSE 13459
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13386: LD_VAR 0 2
13390: PPUSH
13391: LD_INT 1
13393: PUSH
13394: LD_LOC 14
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: LD_LOC 14
13410: PUSH
13411: LD_INT 2
13413: DIV
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 3
13421: PUSH
13422: LD_LOC 14
13426: PUSH
13427: LD_INT 5
13429: DIV
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 20
13437: PUSH
13438: LD_LOC 14
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 423
13457: GO 13383
13459: POP
13460: POP
// end ;
13461: LD_VAR 0 1
13465: RET
// every 0 0$0.1 do var un ;
13466: GO 13468
13468: DISABLE
13469: LD_INT 0
13471: PPUSH
// begin if not def_morale_flags then
13472: LD_EXP 59
13476: NOT
13477: IFFALSE 13481
// exit ;
13479: GO 13558
// if not morale_decreasing_time then
13481: LD_EXP 14
13485: NOT
13486: IFFALSE 13490
// exit ;
13488: GO 13558
// strength = 100 ;
13490: LD_ADDR_LOC 14
13494: PUSH
13495: LD_INT 100
13497: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13498: LD_EXP 14
13502: PPUSH
13503: CALL_OW 67
// strength := strength - 1 ;
13507: LD_ADDR_LOC 14
13511: PUSH
13512: LD_LOC 14
13516: PUSH
13517: LD_INT 1
13519: MINUS
13520: ST_TO_ADDR
// Update_Flags ;
13521: CALL 13369 0 0
// until not strength ;
13525: LD_LOC 14
13529: NOT
13530: IFFALSE 13498
// for un in battle_flags_id do
13532: LD_ADDR_VAR 0 1
13536: PUSH
13537: LD_EXP 34
13541: PUSH
13542: FOR_IN
13543: IFFALSE 13556
// KillBattleFlag ( un ) ;
13545: LD_VAR 0 1
13549: PPUSH
13550: CALL_OW 419
13554: GO 13542
13556: POP
13557: POP
// end ; end_of_file
13558: PPOPN 1
13560: END
// export BuildUpAreas ; export buildUpTimeActive ; export function BeginBuildUp ; var i , j ; begin
13561: LD_INT 0
13563: PPUSH
13564: PPUSH
13565: PPUSH
// buildUpTimeActive := true ;
13566: LD_ADDR_EXP 48
13570: PUSH
13571: LD_INT 1
13573: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13574: LD_ADDR_VAR 0 2
13578: PUSH
13579: DOUBLE
13580: LD_INT 1
13582: DEC
13583: ST_TO_ADDR
13584: LD_EXP 47
13588: PUSH
13589: FOR_TO
13590: IFFALSE 13745
// if Position_Sides [ i ] then
13592: LD_EXP 29
13596: PUSH
13597: LD_VAR 0 2
13601: ARRAY
13602: IFFALSE 13743
// for j := 1 to 8 do
13604: LD_ADDR_VAR 0 3
13608: PUSH
13609: DOUBLE
13610: LD_INT 1
13612: DEC
13613: ST_TO_ADDR
13614: LD_INT 8
13616: PUSH
13617: FOR_TO
13618: IFFALSE 13741
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13620: LD_EXP 23
13624: PUSH
13625: LD_VAR 0 3
13629: ARRAY
13630: PUSH
13631: LD_EXP 21
13635: PUSH
13636: LD_EXP 29
13640: PUSH
13641: LD_VAR 0 2
13645: ARRAY
13646: ARRAY
13647: PUSH
13648: LD_EXP 21
13652: PUSH
13653: LD_VAR 0 3
13657: ARRAY
13658: NONEQUAL
13659: PUSH
13660: LD_EXP 25
13664: NOT
13665: PUSH
13666: LD_EXP 29
13670: PUSH
13671: LD_VAR 0 2
13675: ARRAY
13676: PUSH
13677: LD_VAR 0 3
13681: NONEQUAL
13682: AND
13683: OR
13684: AND
13685: IFFALSE 13709
// HideArea ( j , BuildUpAreas [ i ] ) else
13687: LD_VAR 0 3
13691: PPUSH
13692: LD_EXP 47
13696: PUSH
13697: LD_VAR 0 2
13701: ARRAY
13702: PPUSH
13703: CALL_OW 333
13707: GO 13739
// if ( j = your_side ) then
13709: LD_VAR 0 3
13713: PUSH
13714: LD_OWVAR 2
13718: EQUAL
13719: IFFALSE 13739
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13721: LD_EXP 47
13725: PUSH
13726: LD_VAR 0 2
13730: ARRAY
13731: PPUSH
13732: LD_INT 5
13734: PPUSH
13735: CALL_OW 424
13739: GO 13617
13741: POP
13742: POP
13743: GO 13589
13745: POP
13746: POP
// end ;
13747: LD_VAR 0 1
13751: RET
// export function EndBuildUp ; var i , j ; begin
13752: LD_INT 0
13754: PPUSH
13755: PPUSH
13756: PPUSH
// buildUpTimeActive := false ;
13757: LD_ADDR_EXP 48
13761: PUSH
13762: LD_INT 0
13764: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13765: LD_ADDR_VAR 0 2
13769: PUSH
13770: DOUBLE
13771: LD_INT 1
13773: DEC
13774: ST_TO_ADDR
13775: LD_EXP 47
13779: PUSH
13780: FOR_TO
13781: IFFALSE 13936
// if Position_Sides [ i ] then
13783: LD_EXP 29
13787: PUSH
13788: LD_VAR 0 2
13792: ARRAY
13793: IFFALSE 13934
// for j := 1 to 8 do
13795: LD_ADDR_VAR 0 3
13799: PUSH
13800: DOUBLE
13801: LD_INT 1
13803: DEC
13804: ST_TO_ADDR
13805: LD_INT 8
13807: PUSH
13808: FOR_TO
13809: IFFALSE 13932
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13811: LD_EXP 23
13815: PUSH
13816: LD_VAR 0 3
13820: ARRAY
13821: PUSH
13822: LD_EXP 21
13826: PUSH
13827: LD_EXP 29
13831: PUSH
13832: LD_VAR 0 2
13836: ARRAY
13837: ARRAY
13838: PUSH
13839: LD_EXP 21
13843: PUSH
13844: LD_VAR 0 3
13848: ARRAY
13849: NONEQUAL
13850: PUSH
13851: LD_EXP 25
13855: NOT
13856: PUSH
13857: LD_EXP 29
13861: PUSH
13862: LD_VAR 0 2
13866: ARRAY
13867: PUSH
13868: LD_VAR 0 3
13872: NONEQUAL
13873: AND
13874: OR
13875: AND
13876: IFFALSE 13900
// ShowArea ( j , BuildUpAreas [ i ] ) else
13878: LD_VAR 0 3
13882: PPUSH
13883: LD_EXP 47
13887: PUSH
13888: LD_VAR 0 2
13892: ARRAY
13893: PPUSH
13894: CALL_OW 334
13898: GO 13930
// if ( j = your_side ) then
13900: LD_VAR 0 3
13904: PUSH
13905: LD_OWVAR 2
13909: EQUAL
13910: IFFALSE 13930
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13912: LD_EXP 47
13916: PUSH
13917: LD_VAR 0 2
13921: ARRAY
13922: PPUSH
13923: LD_INT 0
13925: PPUSH
13926: CALL_OW 424
13930: GO 13808
13932: POP
13933: POP
13934: GO 13780
13936: POP
13937: POP
// end ;
13938: LD_VAR 0 1
13942: RET
// every 5 trigger buildUpTimeActive do var i , un ;
13943: LD_EXP 48
13947: IFFALSE 14130
13949: GO 13951
13951: DISABLE
13952: LD_INT 0
13954: PPUSH
13955: PPUSH
// begin for i := 1 to BuildUpAreas do
13956: LD_ADDR_VAR 0 1
13960: PUSH
13961: DOUBLE
13962: LD_INT 1
13964: DEC
13965: ST_TO_ADDR
13966: LD_EXP 47
13970: PUSH
13971: FOR_TO
13972: IFFALSE 14127
// if Position_Sides [ i ] then
13974: LD_EXP 29
13978: PUSH
13979: LD_VAR 0 1
13983: ARRAY
13984: IFFALSE 14125
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13986: LD_ADDR_VAR 0 2
13990: PUSH
13991: LD_EXP 47
13995: PUSH
13996: LD_VAR 0 1
14000: ARRAY
14001: PPUSH
14002: LD_INT 2
14004: PUSH
14005: LD_INT 21
14007: PUSH
14008: LD_INT 1
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 21
14017: PUSH
14018: LD_INT 2
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_OWVAR 2
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PPUSH
14046: CALL_OW 70
14050: PUSH
14051: FOR_IN
14052: IFFALSE 14123
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
14054: LD_EXP 21
14058: PUSH
14059: LD_EXP 29
14063: PUSH
14064: LD_VAR 0 1
14068: ARRAY
14069: ARRAY
14070: PUSH
14071: LD_EXP 21
14075: PUSH
14076: LD_OWVAR 2
14080: ARRAY
14081: NONEQUAL
14082: PUSH
14083: LD_EXP 25
14087: NOT
14088: PUSH
14089: LD_EXP 29
14093: PUSH
14094: LD_VAR 0 1
14098: ARRAY
14099: PUSH
14100: LD_OWVAR 2
14104: NONEQUAL
14105: AND
14106: OR
14107: IFFALSE 14121
// ComMoveToArea ( un , BuildUpEscape ) ;
14109: LD_VAR 0 2
14113: PPUSH
14114: LD_INT 24
14116: PPUSH
14117: CALL_OW 113
14121: GO 14051
14123: POP
14124: POP
14125: GO 13971
14127: POP
14128: POP
// enable ;
14129: ENABLE
// end ;
14130: PPOPN 2
14132: END
// every 0 0$1 trigger def_builduptime do
14133: LD_EXP 64
14137: IFFALSE 14163
14139: GO 14141
14141: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14142: LD_INT 8400
14144: PUSH
14145: LD_EXP 64
14149: PUSH
14150: LD_INT 2100
14152: MUL
14153: PLUS
14154: PPUSH
14155: CALL_OW 67
// EndBuildUp ;
14159: CALL 13752 0 0
// end ; end_of_file
14163: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
14164: LD_INT 0
14166: PPUSH
14167: PPUSH
// if ( not IAmSpec ) then
14168: CALL_OW 531
14172: NOT
14173: IFFALSE 14189
// Result := Limits_Info ^  ;
14175: LD_ADDR_VAR 0 1
14179: PUSH
14180: LD_LOC 26
14184: PUSH
14185: LD_STRING 
14187: ADD
14188: ST_TO_ADDR
// for i := 1 to 8 do
14189: LD_ADDR_VAR 0 2
14193: PUSH
14194: DOUBLE
14195: LD_INT 1
14197: DEC
14198: ST_TO_ADDR
14199: LD_INT 8
14201: PUSH
14202: FOR_TO
14203: IFFALSE 14248
// if Cheaters [ i ] then
14205: LD_LOC 27
14209: PUSH
14210: LD_VAR 0 2
14214: ARRAY
14215: IFFALSE 14246
// Result := Result ^ [ #Cheater , i , i ] ;
14217: LD_ADDR_VAR 0 1
14221: PUSH
14222: LD_VAR 0 1
14226: PUSH
14227: LD_STRING #Cheater
14229: PUSH
14230: LD_VAR 0 2
14234: PUSH
14235: LD_VAR 0 2
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: ADD
14245: ST_TO_ADDR
14246: GO 14202
14248: POP
14249: POP
// end ;
14250: LD_VAR 0 1
14254: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14255: LD_INT 0
14257: PPUSH
14258: PPUSH
14259: PPUSH
14260: PPUSH
14261: PPUSH
// case Game_Type of 10 :
14262: LD_EXP 49
14266: PUSH
14267: LD_INT 10
14269: DOUBLE
14270: EQUAL
14271: IFTRUE 14275
14273: GO 14286
14275: POP
// def_game_rules := 1 ; 11 :
14276: LD_ADDR_EXP 50
14280: PUSH
14281: LD_INT 1
14283: ST_TO_ADDR
14284: GO 14306
14286: LD_INT 11
14288: DOUBLE
14289: EQUAL
14290: IFTRUE 14294
14292: GO 14305
14294: POP
// def_game_rules := 3 ; end ;
14295: LD_ADDR_EXP 50
14299: PUSH
14300: LD_INT 3
14302: ST_TO_ADDR
14303: GO 14306
14305: POP
// case def_game_rules of 0 :
14306: LD_EXP 50
14310: PUSH
14311: LD_INT 0
14313: DOUBLE
14314: EQUAL
14315: IFTRUE 14319
14317: GO 14324
14319: POP
// exit ; 1 :
14320: GO 16382
14322: GO 16282
14324: LD_INT 1
14326: DOUBLE
14327: EQUAL
14328: IFTRUE 14332
14330: GO 14548
14332: POP
// begin def_base_level := 2 ;
14333: LD_ADDR_EXP 51
14337: PUSH
14338: LD_INT 2
14340: ST_TO_ADDR
// def_amount_of_people := 2 ;
14341: LD_ADDR_EXP 52
14345: PUSH
14346: LD_INT 2
14348: ST_TO_ADDR
// def_skill_level := 1 ;
14349: LD_ADDR_EXP 53
14353: PUSH
14354: LD_INT 1
14356: ST_TO_ADDR
// def_starting_resources := 2 ;
14357: LD_ADDR_EXP 54
14361: PUSH
14362: LD_INT 2
14364: ST_TO_ADDR
// def_shipments_density := 1 ;
14365: LD_ADDR_EXP 55
14369: PUSH
14370: LD_INT 1
14372: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14373: LD_ADDR_EXP 56
14377: PUSH
14378: LD_INT 0
14380: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14381: LD_ADDR_EXP 57
14385: PUSH
14386: LD_INT 1
14388: ST_TO_ADDR
// def_shared_vision := 1 ;
14389: LD_ADDR_EXP 58
14393: PUSH
14394: LD_INT 1
14396: ST_TO_ADDR
// def_morale_flags := 3 ;
14397: LD_ADDR_EXP 59
14401: PUSH
14402: LD_INT 3
14404: ST_TO_ADDR
// def_siberite_detection := 1 ;
14405: LD_ADDR_EXP 60
14409: PUSH
14410: LD_INT 1
14412: ST_TO_ADDR
// def_people_respawning := 1 ;
14413: LD_ADDR_EXP 61
14417: PUSH
14418: LD_INT 1
14420: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14421: LD_ADDR_EXP 62
14425: PUSH
14426: LD_INT 1
14428: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14429: LD_ADDR_EXP 63
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// def_builduptime := 2 ;
14437: LD_ADDR_EXP 64
14441: PUSH
14442: LD_INT 2
14444: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14445: LD_ADDR_VAR 0 2
14449: PUSH
14450: EMPTY
14451: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14452: LD_ADDR_VAR 0 3
14456: PUSH
14457: EMPTY
14458: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14459: LD_ADDR_LOC 21
14463: PUSH
14464: EMPTY
14465: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14466: LD_ADDR_LOC 22
14470: PUSH
14471: EMPTY
14472: ST_TO_ADDR
// Banned_Controls := [ ] ;
14473: LD_ADDR_LOC 23
14477: PUSH
14478: EMPTY
14479: ST_TO_ADDR
// Banned_Engines := [ ] ;
14480: LD_ADDR_LOC 24
14484: PUSH
14485: EMPTY
14486: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14487: LD_ADDR_LOC 19
14491: PUSH
14492: LD_INT 37
14494: PUSH
14495: EMPTY
14496: LIST
14497: PUSH
14498: LD_INT 4
14500: PUSH
14501: LD_INT 5
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: LD_INT 31
14510: PUSH
14511: LD_INT 32
14513: PUSH
14514: LD_INT 33
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: LIST
14526: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14527: LD_ADDR_LOC 20
14531: PUSH
14532: LD_INT 2
14534: PUSH
14535: LD_INT 2
14537: PUSH
14538: LD_INT 4
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: LIST
14545: ST_TO_ADDR
// end ; 2 :
14546: GO 16282
14548: LD_INT 2
14550: DOUBLE
14551: EQUAL
14552: IFTRUE 14556
14554: GO 14765
14556: POP
// begin def_base_level := 1 ;
14557: LD_ADDR_EXP 51
14561: PUSH
14562: LD_INT 1
14564: ST_TO_ADDR
// def_amount_of_people := 2 ;
14565: LD_ADDR_EXP 52
14569: PUSH
14570: LD_INT 2
14572: ST_TO_ADDR
// def_skill_level := 3 ;
14573: LD_ADDR_EXP 53
14577: PUSH
14578: LD_INT 3
14580: ST_TO_ADDR
// def_starting_resources := 3 ;
14581: LD_ADDR_EXP 54
14585: PUSH
14586: LD_INT 3
14588: ST_TO_ADDR
// def_shipments_density := 2 ;
14589: LD_ADDR_EXP 55
14593: PUSH
14594: LD_INT 2
14596: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14597: LD_ADDR_EXP 56
14601: PUSH
14602: LD_INT 1
14604: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14605: LD_ADDR_EXP 57
14609: PUSH
14610: LD_INT 2
14612: ST_TO_ADDR
// def_shared_vision := 1 ;
14613: LD_ADDR_EXP 58
14617: PUSH
14618: LD_INT 1
14620: ST_TO_ADDR
// def_morale_flags := 0 ;
14621: LD_ADDR_EXP 59
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// def_siberite_detection := 1 ;
14629: LD_ADDR_EXP 60
14633: PUSH
14634: LD_INT 1
14636: ST_TO_ADDR
// def_people_respawning := 0 ;
14637: LD_ADDR_EXP 61
14641: PUSH
14642: LD_INT 0
14644: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14645: LD_ADDR_EXP 62
14649: PUSH
14650: LD_INT 0
14652: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14653: LD_ADDR_EXP 63
14657: PUSH
14658: LD_INT 0
14660: ST_TO_ADDR
// def_builduptime := 2 ;
14661: LD_ADDR_EXP 64
14665: PUSH
14666: LD_INT 2
14668: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14669: LD_ADDR_VAR 0 2
14673: PUSH
14674: LD_INT 1
14676: PUSH
14677: EMPTY
14678: LIST
14679: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14680: LD_ADDR_VAR 0 3
14684: PUSH
14685: EMPTY
14686: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14687: LD_ADDR_LOC 21
14691: PUSH
14692: EMPTY
14693: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14694: LD_ADDR_LOC 22
14698: PUSH
14699: EMPTY
14700: ST_TO_ADDR
// Banned_Controls := [ ] ;
14701: LD_ADDR_LOC 23
14705: PUSH
14706: EMPTY
14707: ST_TO_ADDR
// Banned_Engines := [ ] ;
14708: LD_ADDR_LOC 24
14712: PUSH
14713: EMPTY
14714: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14715: LD_ADDR_LOC 19
14719: PUSH
14720: LD_INT 4
14722: PUSH
14723: LD_INT 5
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 31
14732: PUSH
14733: LD_INT 32
14735: PUSH
14736: LD_INT 33
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
14748: LD_ADDR_LOC 20
14752: PUSH
14753: LD_INT 1
14755: PUSH
14756: LD_INT 2
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: ST_TO_ADDR
// end ; 3 :
14763: GO 16282
14765: LD_INT 3
14767: DOUBLE
14768: EQUAL
14769: IFTRUE 14773
14771: GO 15016
14773: POP
// begin def_base_level := 1 ;
14774: LD_ADDR_EXP 51
14778: PUSH
14779: LD_INT 1
14781: ST_TO_ADDR
// def_amount_of_people := 2 ;
14782: LD_ADDR_EXP 52
14786: PUSH
14787: LD_INT 2
14789: ST_TO_ADDR
// def_skill_level := 3 ;
14790: LD_ADDR_EXP 53
14794: PUSH
14795: LD_INT 3
14797: ST_TO_ADDR
// def_starting_resources := 3 ;
14798: LD_ADDR_EXP 54
14802: PUSH
14803: LD_INT 3
14805: ST_TO_ADDR
// def_shipments_density := 1 ;
14806: LD_ADDR_EXP 55
14810: PUSH
14811: LD_INT 1
14813: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14814: LD_ADDR_EXP 56
14818: PUSH
14819: LD_INT 0
14821: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14822: LD_ADDR_EXP 57
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// def_shared_vision := 1 ;
14830: LD_ADDR_EXP 58
14834: PUSH
14835: LD_INT 1
14837: ST_TO_ADDR
// def_morale_flags := 0 ;
14838: LD_ADDR_EXP 59
14842: PUSH
14843: LD_INT 0
14845: ST_TO_ADDR
// def_siberite_detection := 1 ;
14846: LD_ADDR_EXP 60
14850: PUSH
14851: LD_INT 1
14853: ST_TO_ADDR
// def_people_respawning := 0 ;
14854: LD_ADDR_EXP 61
14858: PUSH
14859: LD_INT 0
14861: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14862: LD_ADDR_EXP 62
14866: PUSH
14867: LD_INT 2
14869: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14870: LD_ADDR_EXP 63
14874: PUSH
14875: LD_INT 0
14877: ST_TO_ADDR
// def_builduptime := 1 ;
14878: LD_ADDR_EXP 64
14882: PUSH
14883: LD_INT 1
14885: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14886: LD_ADDR_VAR 0 2
14890: PUSH
14891: LD_INT 23
14893: PUSH
14894: EMPTY
14895: LIST
14896: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14897: LD_ADDR_VAR 0 3
14901: PUSH
14902: LD_INT 2
14904: PUSH
14905: LD_INT 37
14907: PUSH
14908: LD_INT 32
14910: PUSH
14911: LD_INT 33
14913: PUSH
14914: LD_INT 36
14916: PUSH
14917: LD_INT 16
14919: PUSH
14920: LD_INT 23
14922: PUSH
14923: LD_INT 21
14925: PUSH
14926: LD_INT 18
14928: PUSH
14929: LD_INT 22
14931: PUSH
14932: LD_INT 20
14934: PUSH
14935: LD_INT 19
14937: PUSH
14938: LD_INT 25
14940: PUSH
14941: LD_INT 17
14943: PUSH
14944: LD_INT 24
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14964: LD_ADDR_LOC 21
14968: PUSH
14969: EMPTY
14970: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14971: LD_ADDR_LOC 22
14975: PUSH
14976: EMPTY
14977: ST_TO_ADDR
// Banned_Controls := [ ] ;
14978: LD_ADDR_LOC 23
14982: PUSH
14983: EMPTY
14984: ST_TO_ADDR
// Banned_Engines := [ ] ;
14985: LD_ADDR_LOC 24
14989: PUSH
14990: EMPTY
14991: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14992: LD_ADDR_LOC 19
14996: PUSH
14997: EMPTY
14998: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14999: LD_ADDR_LOC 20
15003: PUSH
15004: EMPTY
15005: ST_TO_ADDR
// No_Mechs := true ;
15006: LD_ADDR_EXP 65
15010: PUSH
15011: LD_INT 1
15013: ST_TO_ADDR
// end ; 4 :
15014: GO 16282
15016: LD_INT 4
15018: DOUBLE
15019: EQUAL
15020: IFTRUE 15024
15022: GO 15199
15024: POP
// begin def_base_level := 1 ;
15025: LD_ADDR_EXP 51
15029: PUSH
15030: LD_INT 1
15032: ST_TO_ADDR
// def_amount_of_people := 2 ;
15033: LD_ADDR_EXP 52
15037: PUSH
15038: LD_INT 2
15040: ST_TO_ADDR
// def_skill_level := 3 ;
15041: LD_ADDR_EXP 53
15045: PUSH
15046: LD_INT 3
15048: ST_TO_ADDR
// def_starting_resources := 3 ;
15049: LD_ADDR_EXP 54
15053: PUSH
15054: LD_INT 3
15056: ST_TO_ADDR
// def_shipments_density := 2 ;
15057: LD_ADDR_EXP 55
15061: PUSH
15062: LD_INT 2
15064: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15065: LD_ADDR_EXP 56
15069: PUSH
15070: LD_INT 1
15072: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15073: LD_ADDR_EXP 57
15077: PUSH
15078: LD_INT 2
15080: ST_TO_ADDR
// def_shared_vision := 1 ;
15081: LD_ADDR_EXP 58
15085: PUSH
15086: LD_INT 1
15088: ST_TO_ADDR
// def_morale_flags := 0 ;
15089: LD_ADDR_EXP 59
15093: PUSH
15094: LD_INT 0
15096: ST_TO_ADDR
// def_siberite_detection := 1 ;
15097: LD_ADDR_EXP 60
15101: PUSH
15102: LD_INT 1
15104: ST_TO_ADDR
// def_people_respawning := 0 ;
15105: LD_ADDR_EXP 61
15109: PUSH
15110: LD_INT 0
15112: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
15113: LD_ADDR_EXP 62
15117: PUSH
15118: LD_INT 0
15120: ST_TO_ADDR
// def_siberite_bomb := 1 ;
15121: LD_ADDR_EXP 63
15125: PUSH
15126: LD_INT 1
15128: ST_TO_ADDR
// def_builduptime := 3 ;
15129: LD_ADDR_EXP 64
15133: PUSH
15134: LD_INT 3
15136: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
15137: LD_ADDR_VAR 0 2
15141: PUSH
15142: LD_INT 1
15144: PUSH
15145: EMPTY
15146: LIST
15147: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
15148: LD_ADDR_VAR 0 3
15152: PUSH
15153: EMPTY
15154: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15155: LD_ADDR_LOC 21
15159: PUSH
15160: EMPTY
15161: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15162: LD_ADDR_LOC 22
15166: PUSH
15167: EMPTY
15168: ST_TO_ADDR
// Banned_Controls := [ ] ;
15169: LD_ADDR_LOC 23
15173: PUSH
15174: EMPTY
15175: ST_TO_ADDR
// Banned_Engines := [ ] ;
15176: LD_ADDR_LOC 24
15180: PUSH
15181: EMPTY
15182: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15183: LD_ADDR_LOC 19
15187: PUSH
15188: EMPTY
15189: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15190: LD_ADDR_LOC 20
15194: PUSH
15195: EMPTY
15196: ST_TO_ADDR
// end ; 5 :
15197: GO 16282
15199: LD_INT 5
15201: DOUBLE
15202: EQUAL
15203: IFTRUE 15207
15205: GO 15456
15207: POP
// begin def_base_level := 0 ;
15208: LD_ADDR_EXP 51
15212: PUSH
15213: LD_INT 0
15215: ST_TO_ADDR
// def_amount_of_people := 0 ;
15216: LD_ADDR_EXP 52
15220: PUSH
15221: LD_INT 0
15223: ST_TO_ADDR
// def_skill_level := 0 ;
15224: LD_ADDR_EXP 53
15228: PUSH
15229: LD_INT 0
15231: ST_TO_ADDR
// def_starting_resources := 0 ;
15232: LD_ADDR_EXP 54
15236: PUSH
15237: LD_INT 0
15239: ST_TO_ADDR
// def_shipments_density := 0 ;
15240: LD_ADDR_EXP 55
15244: PUSH
15245: LD_INT 0
15247: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15248: LD_ADDR_EXP 56
15252: PUSH
15253: LD_INT 0
15255: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15256: LD_ADDR_EXP 57
15260: PUSH
15261: LD_INT 0
15263: ST_TO_ADDR
// def_shared_vision := 1 ;
15264: LD_ADDR_EXP 58
15268: PUSH
15269: LD_INT 1
15271: ST_TO_ADDR
// def_morale_flags := 0 ;
15272: LD_ADDR_EXP 59
15276: PUSH
15277: LD_INT 0
15279: ST_TO_ADDR
// def_siberite_detection := 0 ;
15280: LD_ADDR_EXP 60
15284: PUSH
15285: LD_INT 0
15287: ST_TO_ADDR
// def_people_respawning := 1 ;
15288: LD_ADDR_EXP 61
15292: PUSH
15293: LD_INT 1
15295: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15296: LD_ADDR_EXP 62
15300: PUSH
15301: LD_INT 1
15303: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15304: LD_ADDR_EXP 63
15308: PUSH
15309: LD_INT 0
15311: ST_TO_ADDR
// def_builduptime := 0 ;
15312: LD_ADDR_EXP 64
15316: PUSH
15317: LD_INT 0
15319: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
15320: LD_ADDR_VAR 0 2
15324: PUSH
15325: LD_INT 10
15327: PUSH
15328: LD_INT 3
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
15335: LD_ADDR_VAR 0 3
15339: PUSH
15340: LD_INT 12
15342: PUSH
15343: LD_INT 11
15345: PUSH
15346: LD_INT 14
15348: PUSH
15349: LD_INT 13
15351: PUSH
15352: LD_INT 5
15354: PUSH
15355: LD_INT 24
15357: PUSH
15358: LD_INT 21
15360: PUSH
15361: LD_INT 33
15363: PUSH
15364: LD_INT 36
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
15378: LD_ADDR_LOC 21
15382: PUSH
15383: LD_INT 31
15385: PUSH
15386: EMPTY
15387: LIST
15388: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15389: LD_ADDR_LOC 22
15393: PUSH
15394: EMPTY
15395: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
15396: LD_ADDR_LOC 23
15400: PUSH
15401: LD_INT 2
15403: PUSH
15404: EMPTY
15405: LIST
15406: ST_TO_ADDR
// Banned_Engines := [ ] ;
15407: LD_ADDR_LOC 24
15411: PUSH
15412: EMPTY
15413: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
15414: LD_ADDR_LOC 19
15418: PUSH
15419: LD_INT 4
15421: PUSH
15422: EMPTY
15423: LIST
15424: PUSH
15425: LD_INT 31
15427: PUSH
15428: LD_INT 32
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
15439: LD_ADDR_LOC 20
15443: PUSH
15444: LD_INT 1
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: ST_TO_ADDR
// end ; 6 :
15454: GO 16282
15456: LD_INT 6
15458: DOUBLE
15459: EQUAL
15460: IFTRUE 15464
15462: GO 15667
15464: POP
// begin def_base_level := 1 ;
15465: LD_ADDR_EXP 51
15469: PUSH
15470: LD_INT 1
15472: ST_TO_ADDR
// def_amount_of_people := 2 ;
15473: LD_ADDR_EXP 52
15477: PUSH
15478: LD_INT 2
15480: ST_TO_ADDR
// def_skill_level := 3 ;
15481: LD_ADDR_EXP 53
15485: PUSH
15486: LD_INT 3
15488: ST_TO_ADDR
// def_starting_resources := 3 ;
15489: LD_ADDR_EXP 54
15493: PUSH
15494: LD_INT 3
15496: ST_TO_ADDR
// def_shipments_density := 1 ;
15497: LD_ADDR_EXP 55
15501: PUSH
15502: LD_INT 1
15504: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15505: LD_ADDR_EXP 56
15509: PUSH
15510: LD_INT 0
15512: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15513: LD_ADDR_EXP 57
15517: PUSH
15518: LD_INT 1
15520: ST_TO_ADDR
// def_shared_vision := 1 ;
15521: LD_ADDR_EXP 58
15525: PUSH
15526: LD_INT 1
15528: ST_TO_ADDR
// def_morale_flags := 0 ;
15529: LD_ADDR_EXP 59
15533: PUSH
15534: LD_INT 0
15536: ST_TO_ADDR
// def_siberite_detection := 1 ;
15537: LD_ADDR_EXP 60
15541: PUSH
15542: LD_INT 1
15544: ST_TO_ADDR
// def_people_respawning := 2 ;
15545: LD_ADDR_EXP 61
15549: PUSH
15550: LD_INT 2
15552: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15553: LD_ADDR_EXP 62
15557: PUSH
15558: LD_INT 1
15560: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15561: LD_ADDR_EXP 63
15565: PUSH
15566: LD_INT 0
15568: ST_TO_ADDR
// def_builduptime := 1 ;
15569: LD_ADDR_EXP 64
15573: PUSH
15574: LD_INT 1
15576: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15577: LD_ADDR_VAR 0 2
15581: PUSH
15582: LD_INT 23
15584: PUSH
15585: EMPTY
15586: LIST
15587: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
15588: LD_ADDR_VAR 0 3
15592: PUSH
15593: LD_INT 2
15595: PUSH
15596: LD_INT 37
15598: PUSH
15599: LD_INT 31
15601: PUSH
15602: LD_INT 32
15604: PUSH
15605: LD_INT 33
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15615: LD_ADDR_LOC 21
15619: PUSH
15620: EMPTY
15621: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15622: LD_ADDR_LOC 22
15626: PUSH
15627: EMPTY
15628: ST_TO_ADDR
// Banned_Controls := [ ] ;
15629: LD_ADDR_LOC 23
15633: PUSH
15634: EMPTY
15635: ST_TO_ADDR
// Banned_Engines := [ ] ;
15636: LD_ADDR_LOC 24
15640: PUSH
15641: EMPTY
15642: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15643: LD_ADDR_LOC 19
15647: PUSH
15648: EMPTY
15649: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15650: LD_ADDR_LOC 20
15654: PUSH
15655: EMPTY
15656: ST_TO_ADDR
// No_Mechs := true ;
15657: LD_ADDR_EXP 65
15661: PUSH
15662: LD_INT 1
15664: ST_TO_ADDR
// end ; 7 :
15665: GO 16282
15667: LD_INT 7
15669: DOUBLE
15670: EQUAL
15671: IFTRUE 15675
15673: GO 15873
15675: POP
// begin def_base_level := 1 ;
15676: LD_ADDR_EXP 51
15680: PUSH
15681: LD_INT 1
15683: ST_TO_ADDR
// def_amount_of_people := 2 ;
15684: LD_ADDR_EXP 52
15688: PUSH
15689: LD_INT 2
15691: ST_TO_ADDR
// def_skill_level := 3 ;
15692: LD_ADDR_EXP 53
15696: PUSH
15697: LD_INT 3
15699: ST_TO_ADDR
// def_starting_resources := 3 ;
15700: LD_ADDR_EXP 54
15704: PUSH
15705: LD_INT 3
15707: ST_TO_ADDR
// def_shipments_density := 1 ;
15708: LD_ADDR_EXP 55
15712: PUSH
15713: LD_INT 1
15715: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15716: LD_ADDR_EXP 56
15720: PUSH
15721: LD_INT 1
15723: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15724: LD_ADDR_EXP 57
15728: PUSH
15729: LD_INT 2
15731: ST_TO_ADDR
// def_shared_vision := 1 ;
15732: LD_ADDR_EXP 58
15736: PUSH
15737: LD_INT 1
15739: ST_TO_ADDR
// def_morale_flags := 0 ;
15740: LD_ADDR_EXP 59
15744: PUSH
15745: LD_INT 0
15747: ST_TO_ADDR
// def_siberite_detection := 1 ;
15748: LD_ADDR_EXP 60
15752: PUSH
15753: LD_INT 1
15755: ST_TO_ADDR
// def_people_respawning := 0 ;
15756: LD_ADDR_EXP 61
15760: PUSH
15761: LD_INT 0
15763: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15764: LD_ADDR_EXP 62
15768: PUSH
15769: LD_INT 1
15771: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15772: LD_ADDR_EXP 63
15776: PUSH
15777: LD_INT 0
15779: ST_TO_ADDR
// def_builduptime := 3 ;
15780: LD_ADDR_EXP 64
15784: PUSH
15785: LD_INT 3
15787: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: LD_INT 23
15795: PUSH
15796: EMPTY
15797: LIST
15798: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
15799: LD_ADDR_VAR 0 3
15803: PUSH
15804: LD_INT 37
15806: PUSH
15807: EMPTY
15808: LIST
15809: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15810: LD_ADDR_LOC 21
15814: PUSH
15815: EMPTY
15816: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15817: LD_ADDR_LOC 22
15821: PUSH
15822: EMPTY
15823: ST_TO_ADDR
// Banned_Controls := [ ] ;
15824: LD_ADDR_LOC 23
15828: PUSH
15829: EMPTY
15830: ST_TO_ADDR
// Banned_Engines := [ ] ;
15831: LD_ADDR_LOC 24
15835: PUSH
15836: EMPTY
15837: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15838: LD_ADDR_LOC 19
15842: PUSH
15843: LD_INT 31
15845: PUSH
15846: LD_INT 32
15848: PUSH
15849: LD_INT 33
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
15860: LD_ADDR_LOC 20
15864: PUSH
15865: LD_INT 10
15867: PUSH
15868: EMPTY
15869: LIST
15870: ST_TO_ADDR
// end ; 8 :
15871: GO 16282
15873: LD_INT 8
15875: DOUBLE
15876: EQUAL
15877: IFTRUE 15881
15879: GO 16281
15881: POP
// begin def_base_level := 0 ;
15882: LD_ADDR_EXP 51
15886: PUSH
15887: LD_INT 0
15889: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
15890: LD_ADDR_EXP 52
15894: PUSH
15895: LD_INT 0
15897: PPUSH
15898: LD_INT 1
15900: PPUSH
15901: CALL_OW 12
15905: ST_TO_ADDR
// def_skill_level := 0 ;
15906: LD_ADDR_EXP 53
15910: PUSH
15911: LD_INT 0
15913: ST_TO_ADDR
// def_starting_resources := 2 ;
15914: LD_ADDR_EXP 54
15918: PUSH
15919: LD_INT 2
15921: ST_TO_ADDR
// def_shipments_density := 1 ;
15922: LD_ADDR_EXP 55
15926: PUSH
15927: LD_INT 1
15929: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15930: LD_ADDR_EXP 56
15934: PUSH
15935: LD_INT 0
15937: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15938: LD_ADDR_EXP 57
15942: PUSH
15943: LD_INT 0
15945: ST_TO_ADDR
// def_shared_vision := 1 ;
15946: LD_ADDR_EXP 58
15950: PUSH
15951: LD_INT 1
15953: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
15954: LD_ADDR_EXP 59
15958: PUSH
15959: LD_INT 0
15961: PPUSH
15962: LD_INT 2
15964: PPUSH
15965: CALL_OW 12
15969: ST_TO_ADDR
// def_siberite_detection := 0 ;
15970: LD_ADDR_EXP 60
15974: PUSH
15975: LD_INT 0
15977: ST_TO_ADDR
// def_people_respawning := 0 ;
15978: LD_ADDR_EXP 61
15982: PUSH
15983: LD_INT 0
15985: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
15986: LD_ADDR_EXP 62
15990: PUSH
15991: LD_INT 2
15993: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15994: LD_ADDR_EXP 63
15998: PUSH
15999: LD_INT 0
16001: ST_TO_ADDR
// def_builduptime := 0 ;
16002: LD_ADDR_EXP 64
16006: PUSH
16007: LD_INT 0
16009: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
16010: LD_ADDR_VAR 0 2
16014: PUSH
16015: LD_INT 23
16017: PUSH
16018: LD_INT 20
16020: PUSH
16021: LD_INT 40
16023: PUSH
16024: LD_INT 47
16026: PUSH
16027: LD_INT 46
16029: PUSH
16030: LD_INT 39
16032: PUSH
16033: LD_INT 71
16035: PUSH
16036: LD_INT 34
16038: PUSH
16039: LD_INT 41
16041: PUSH
16042: LD_INT 44
16044: PUSH
16045: LD_INT 17
16047: PUSH
16048: LD_INT 16
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
16065: LD_ADDR_VAR 0 3
16069: PUSH
16070: LD_INT 37
16072: PUSH
16073: LD_INT 5
16075: PUSH
16076: LD_INT 13
16078: PUSH
16079: LD_INT 34
16081: PUSH
16082: LD_INT 12
16084: PUSH
16085: LD_INT 15
16087: PUSH
16088: LD_INT 11
16090: PUSH
16091: LD_INT 14
16093: PUSH
16094: LD_INT 29
16096: PUSH
16097: LD_INT 30
16099: PUSH
16100: LD_INT 28
16102: PUSH
16103: LD_INT 24
16105: PUSH
16106: LD_INT 25
16108: PUSH
16109: LD_INT 20
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 22
16117: PUSH
16118: LD_INT 36
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16140: LD_ADDR_LOC 21
16144: PUSH
16145: EMPTY
16146: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
16147: LD_ADDR_LOC 22
16151: PUSH
16152: LD_INT 14
16154: PUSH
16155: EMPTY
16156: LIST
16157: ST_TO_ADDR
// Banned_Controls := [ ] ;
16158: LD_ADDR_LOC 23
16162: PUSH
16163: EMPTY
16164: ST_TO_ADDR
// Banned_Engines := [ ] ;
16165: LD_ADDR_LOC 24
16169: PUSH
16170: EMPTY
16171: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
16172: LD_ADDR_LOC 19
16176: PUSH
16177: LD_INT 31
16179: PUSH
16180: LD_INT 32
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 4
16189: PUSH
16190: EMPTY
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
16197: LD_ADDR_LOC 20
16201: PUSH
16202: LD_INT 2
16204: PUSH
16205: LD_INT 1
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: ST_TO_ADDR
// for i := 1 to 8 do
16212: LD_ADDR_VAR 0 4
16216: PUSH
16217: DOUBLE
16218: LD_INT 1
16220: DEC
16221: ST_TO_ADDR
16222: LD_INT 8
16224: PUSH
16225: FOR_TO
16226: IFFALSE 16277
// if ( Side_Nations [ i ] = 3 ) then
16228: LD_EXP 24
16232: PUSH
16233: LD_VAR 0 4
16237: ARRAY
16238: PUSH
16239: LD_INT 3
16241: EQUAL
16242: IFFALSE 16275
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
16244: LD_ADDR_EXP 24
16248: PUSH
16249: LD_EXP 24
16253: PPUSH
16254: LD_VAR 0 4
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: LD_INT 2
16264: PPUSH
16265: CALL_OW 12
16269: PPUSH
16270: CALL_OW 1
16274: ST_TO_ADDR
16275: GO 16225
16277: POP
16278: POP
// end ; end ;
16279: GO 16282
16281: POP
// for i := 1 to 8 do
16282: LD_ADDR_VAR 0 4
16286: PUSH
16287: DOUBLE
16288: LD_INT 1
16290: DEC
16291: ST_TO_ADDR
16292: LD_INT 8
16294: PUSH
16295: FOR_TO
16296: IFFALSE 16380
// if Side_Positions [ i ] then
16298: LD_EXP 23
16302: PUSH
16303: LD_VAR 0 4
16307: ARRAY
16308: IFFALSE 16378
// begin for j in Unavailable_Techs do
16310: LD_ADDR_VAR 0 5
16314: PUSH
16315: LD_VAR 0 2
16319: PUSH
16320: FOR_IN
16321: IFFALSE 16342
// SetTech ( j , i , 0 ) ;
16323: LD_VAR 0 5
16327: PPUSH
16328: LD_VAR 0 4
16332: PPUSH
16333: LD_INT 0
16335: PPUSH
16336: CALL_OW 322
16340: GO 16320
16342: POP
16343: POP
// for j in Unavailable_Builds do
16344: LD_ADDR_VAR 0 5
16348: PUSH
16349: LD_VAR 0 3
16353: PUSH
16354: FOR_IN
16355: IFFALSE 16376
// SetRestrict ( j , i , 0 ) ;
16357: LD_VAR 0 5
16361: PPUSH
16362: LD_VAR 0 4
16366: PPUSH
16367: LD_INT 0
16369: PPUSH
16370: CALL_OW 324
16374: GO 16354
16376: POP
16377: POP
// end ;
16378: GO 16295
16380: POP
16381: POP
// end ;
16382: LD_VAR 0 1
16386: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
16387: LD_INT 0
16389: PPUSH
16390: PPUSH
16391: PPUSH
16392: PPUSH
16393: PPUSH
16394: PPUSH
16395: PPUSH
// for i := 1 to Restricted_Builds do
16396: LD_ADDR_VAR 0 2
16400: PUSH
16401: DOUBLE
16402: LD_INT 1
16404: DEC
16405: ST_TO_ADDR
16406: LD_LOC 19
16410: PUSH
16411: FOR_TO
16412: IFFALSE 16722
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
16414: LD_LOC 19
16418: PUSH
16419: LD_VAR 0 2
16423: ARRAY
16424: PUSH
16425: LD_INT 1
16427: ARRAY
16428: PUSH
16429: LD_INT 31
16431: DOUBLE
16432: EQUAL
16433: IFTRUE 16449
16435: LD_INT 32
16437: DOUBLE
16438: EQUAL
16439: IFTRUE 16449
16441: LD_INT 33
16443: DOUBLE
16444: EQUAL
16445: IFTRUE 16449
16447: GO 16460
16449: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
16450: LD_ADDR_VAR 0 6
16454: PUSH
16455: LD_STRING #Turrets
16457: ST_TO_ADDR
16458: GO 16505
16460: LD_INT 4
16462: DOUBLE
16463: EQUAL
16464: IFTRUE 16474
16466: LD_INT 5
16468: DOUBLE
16469: EQUAL
16470: IFTRUE 16474
16472: GO 16485
16474: POP
// btype := #Armouries ; b_Behemoth :
16475: LD_ADDR_VAR 0 6
16479: PUSH
16480: LD_STRING #Armouries
16482: ST_TO_ADDR
16483: GO 16505
16485: LD_INT 37
16487: DOUBLE
16488: EQUAL
16489: IFTRUE 16493
16491: GO 16504
16493: POP
// btype := #Behemoths ; end ;
16494: LD_ADDR_VAR 0 6
16498: PUSH
16499: LD_STRING #Behemoths
16501: ST_TO_ADDR
16502: GO 16505
16504: POP
// list := [ ] ;
16505: LD_ADDR_VAR 0 7
16509: PUSH
16510: EMPTY
16511: ST_TO_ADDR
// for j := 1 to 8 do
16512: LD_ADDR_VAR 0 3
16516: PUSH
16517: DOUBLE
16518: LD_INT 1
16520: DEC
16521: ST_TO_ADDR
16522: LD_INT 8
16524: PUSH
16525: FOR_TO
16526: IFFALSE 16619
// if Side_Positions [ j ] then
16528: LD_EXP 23
16532: PUSH
16533: LD_VAR 0 3
16537: ARRAY
16538: IFFALSE 16617
// begin amount := 0 ;
16540: LD_ADDR_VAR 0 5
16544: PUSH
16545: LD_INT 0
16547: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
16548: LD_ADDR_VAR 0 4
16552: PUSH
16553: LD_LOC 19
16557: PUSH
16558: LD_VAR 0 2
16562: ARRAY
16563: PUSH
16564: FOR_IN
16565: IFFALSE 16613
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
16567: LD_ADDR_VAR 0 5
16571: PUSH
16572: LD_VAR 0 5
16576: PUSH
16577: LD_INT 22
16579: PUSH
16580: LD_VAR 0 3
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 30
16591: PUSH
16592: LD_VAR 0 4
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: PLUS
16610: ST_TO_ADDR
16611: GO 16564
16613: POP
16614: POP
// break ;
16615: GO 16619
// end ;
16617: GO 16525
16619: POP
16620: POP
// list := [ ] ;
16621: LD_ADDR_VAR 0 7
16625: PUSH
16626: EMPTY
16627: ST_TO_ADDR
// for j := 1 to 8 do
16628: LD_ADDR_VAR 0 3
16632: PUSH
16633: DOUBLE
16634: LD_INT 1
16636: DEC
16637: ST_TO_ADDR
16638: LD_INT 8
16640: PUSH
16641: FOR_TO
16642: IFFALSE 16662
// list := list ^ amount ;
16644: LD_ADDR_VAR 0 7
16648: PUSH
16649: LD_VAR 0 7
16653: PUSH
16654: LD_VAR 0 5
16658: ADD
16659: ST_TO_ADDR
16660: GO 16641
16662: POP
16663: POP
// Already_Built := Already_Built ^ [ list ] ;
16664: LD_ADDR_LOC 25
16668: PUSH
16669: LD_LOC 25
16673: PUSH
16674: LD_VAR 0 7
16678: PUSH
16679: EMPTY
16680: LIST
16681: ADD
16682: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
16683: LD_ADDR_LOC 26
16687: PUSH
16688: LD_LOC 26
16692: PUSH
16693: LD_VAR 0 6
16697: PUSH
16698: LD_VAR 0 5
16702: PUSH
16703: LD_LOC 20
16707: PUSH
16708: LD_VAR 0 2
16712: ARRAY
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: LIST
16718: ADD
16719: ST_TO_ADDR
// end ;
16720: GO 16411
16722: POP
16723: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16724: LD_ADDR_LOC 27
16728: PUSH
16729: LD_INT 0
16731: PUSH
16732: LD_INT 0
16734: PUSH
16735: LD_INT 0
16737: PUSH
16738: LD_INT 0
16740: PUSH
16741: LD_INT 0
16743: PUSH
16744: LD_INT 0
16746: PUSH
16747: LD_INT 0
16749: PUSH
16750: LD_INT 0
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: ST_TO_ADDR
// if Limits_Info then
16763: LD_LOC 26
16767: IFFALSE 16783
// Limits_Info := #Limits ^ Limits_Info ;
16769: LD_ADDR_LOC 26
16773: PUSH
16774: LD_STRING #Limits
16776: PUSH
16777: LD_LOC 26
16781: ADD
16782: ST_TO_ADDR
// end ;
16783: LD_VAR 0 1
16787: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
16788: LD_INT 0
16790: PPUSH
16791: PPUSH
16792: PPUSH
16793: PPUSH
// for i := 1 to Restricted_Builds do
16794: LD_ADDR_VAR 0 7
16798: PUSH
16799: DOUBLE
16800: LD_INT 1
16802: DEC
16803: ST_TO_ADDR
16804: LD_LOC 19
16808: PUSH
16809: FOR_TO
16810: IFFALSE 17233
// if BType in Restricted_Builds [ i ] then
16812: LD_VAR 0 2
16816: PUSH
16817: LD_LOC 19
16821: PUSH
16822: LD_VAR 0 7
16826: ARRAY
16827: IN
16828: IFFALSE 17231
// begin if old_side then
16830: LD_VAR 0 4
16834: IFFALSE 16960
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
16836: LD_LOC 25
16840: PUSH
16841: LD_VAR 0 7
16845: ARRAY
16846: PUSH
16847: LD_VAR 0 3
16851: ARRAY
16852: PUSH
16853: LD_VAR 0 5
16857: PLUS
16858: PUSH
16859: LD_LOC 20
16863: PUSH
16864: LD_VAR 0 7
16868: ARRAY
16869: GREATER
16870: IFFALSE 16896
// begin SetSide ( un , old_side ) ;
16872: LD_VAR 0 1
16876: PPUSH
16877: LD_VAR 0 4
16881: PPUSH
16882: CALL_OW 235
// count := 0 ;
16886: LD_ADDR_VAR 0 5
16890: PUSH
16891: LD_INT 0
16893: ST_TO_ADDR
// end else
16894: GO 16960
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
16896: LD_ADDR_LOC 25
16900: PUSH
16901: LD_LOC 25
16905: PPUSH
16906: LD_VAR 0 7
16910: PPUSH
16911: LD_LOC 25
16915: PUSH
16916: LD_VAR 0 7
16920: ARRAY
16921: PPUSH
16922: LD_VAR 0 4
16926: PPUSH
16927: LD_LOC 25
16931: PUSH
16932: LD_VAR 0 7
16936: ARRAY
16937: PUSH
16938: LD_VAR 0 4
16942: ARRAY
16943: PUSH
16944: LD_VAR 0 5
16948: MINUS
16949: PPUSH
16950: CALL_OW 1
16954: PPUSH
16955: CALL_OW 1
16959: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
16960: LD_ADDR_LOC 25
16964: PUSH
16965: LD_LOC 25
16969: PPUSH
16970: LD_VAR 0 7
16974: PPUSH
16975: LD_LOC 25
16979: PUSH
16980: LD_VAR 0 7
16984: ARRAY
16985: PPUSH
16986: LD_VAR 0 3
16990: PPUSH
16991: LD_LOC 25
16995: PUSH
16996: LD_VAR 0 7
17000: ARRAY
17001: PUSH
17002: LD_VAR 0 3
17006: ARRAY
17007: PUSH
17008: LD_VAR 0 5
17012: PLUS
17013: PPUSH
17014: CALL_OW 1
17018: PPUSH
17019: CALL_OW 1
17023: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
17024: LD_VAR 0 5
17028: PUSH
17029: LD_INT 0
17031: NONEQUAL
17032: PUSH
17033: LD_VAR 0 3
17037: PUSH
17038: LD_OWVAR 2
17042: EQUAL
17043: AND
17044: IFFALSE 17087
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
17046: LD_ADDR_LOC 26
17050: PUSH
17051: LD_LOC 26
17055: PPUSH
17056: LD_INT 3
17058: PUSH
17059: LD_VAR 0 7
17063: MUL
17064: PPUSH
17065: LD_LOC 25
17069: PUSH
17070: LD_VAR 0 7
17074: ARRAY
17075: PUSH
17076: LD_VAR 0 3
17080: ARRAY
17081: PPUSH
17082: CALL_OW 1
17086: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
17087: LD_LOC 25
17091: PUSH
17092: LD_VAR 0 7
17096: ARRAY
17097: PUSH
17098: LD_VAR 0 3
17102: ARRAY
17103: PUSH
17104: LD_LOC 20
17108: PUSH
17109: LD_VAR 0 7
17113: ARRAY
17114: GREATER
17115: IFFALSE 17142
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
17117: LD_ADDR_LOC 27
17121: PUSH
17122: LD_LOC 27
17126: PPUSH
17127: LD_VAR 0 3
17131: PPUSH
17132: LD_INT 1
17134: PPUSH
17135: CALL_OW 1
17139: ST_TO_ADDR
// end else
17140: GO 17229
// begin for j := 1 to Restricted_Builds do
17142: LD_ADDR_VAR 0 8
17146: PUSH
17147: DOUBLE
17148: LD_INT 1
17150: DEC
17151: ST_TO_ADDR
17152: LD_LOC 19
17156: PUSH
17157: FOR_TO
17158: IFFALSE 17202
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
17160: LD_LOC 25
17164: PUSH
17165: LD_VAR 0 8
17169: ARRAY
17170: PUSH
17171: LD_VAR 0 3
17175: ARRAY
17176: PUSH
17177: LD_LOC 20
17181: PUSH
17182: LD_VAR 0 8
17186: ARRAY
17187: GREATER
17188: IFFALSE 17200
// begin Is_Cheater := true ;
17190: LD_ADDR_VAR 0 9
17194: PUSH
17195: LD_INT 1
17197: ST_TO_ADDR
// break ;
17198: GO 17202
// end ;
17200: GO 17157
17202: POP
17203: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
17204: LD_ADDR_LOC 27
17208: PUSH
17209: LD_LOC 27
17213: PPUSH
17214: LD_VAR 0 3
17218: PPUSH
17219: LD_VAR 0 9
17223: PPUSH
17224: CALL_OW 1
17228: ST_TO_ADDR
// end ; break ;
17229: GO 17233
// end ;
17231: GO 16809
17233: POP
17234: POP
// end ;
17235: LD_VAR 0 6
17239: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
17240: LD_VAR 0 5
17244: PUSH
17245: LD_LOC 21
17249: IN
17250: PUSH
17251: LD_VAR 0 2
17255: PUSH
17256: LD_LOC 22
17260: IN
17261: OR
17262: PUSH
17263: LD_VAR 0 4
17267: PUSH
17268: LD_LOC 23
17272: IN
17273: OR
17274: PUSH
17275: LD_VAR 0 3
17279: PUSH
17280: LD_LOC 24
17284: IN
17285: OR
17286: IFFALSE 17297
// ComCancel ( factory ) ;
17288: LD_VAR 0 1
17292: PPUSH
17293: CALL_OW 127
// end ;
17297: PPOPN 5
17299: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
17300: LD_VAR 0 2
17304: PUSH
17305: LD_LOC 21
17309: IN
17310: IFFALSE 17321
// ComCancel ( building ) ;
17312: LD_VAR 0 1
17316: PPUSH
17317: CALL_OW 127
// end ; end_of_file
17321: PPOPN 2
17323: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
17324: LD_INT 0
17326: PPUSH
17327: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
17328: LD_ADDR_VAR 0 2
17332: PUSH
17333: LD_STRING #Multi1x1-Time
17335: PUSH
17336: LD_OWVAR 1
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: ST_TO_ADDR
// if WaitServerStrings then
17345: LD_EXP 67
17349: IFFALSE 17367
// AllStrings = AllStrings ^ WaitServerStrings ;
17351: LD_ADDR_VAR 0 2
17355: PUSH
17356: LD_VAR 0 2
17360: PUSH
17361: LD_EXP 67
17365: ADD
17366: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
17367: LD_INT 0
17369: PUSH
17370: LD_EXP 18
17374: PUSH
17375: LD_OWVAR 1
17379: MINUS
17380: LESSEQUAL
17381: IFFALSE 17412
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
17383: LD_ADDR_VAR 0 2
17387: PUSH
17388: LD_VAR 0 2
17392: PUSH
17393: LD_STRING #allowedsibbomb
17395: PUSH
17396: LD_EXP 18
17400: PUSH
17401: LD_OWVAR 1
17405: MINUS
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: ADD
17411: ST_TO_ADDR
// if ( ExtraStrings ) then
17412: LD_EXP 66
17416: IFFALSE 17438
// AllStrings := AllStrings ^  ^ ExtraStrings ;
17418: LD_ADDR_VAR 0 2
17422: PUSH
17423: LD_VAR 0 2
17427: PUSH
17428: LD_STRING 
17430: ADD
17431: PUSH
17432: LD_EXP 66
17436: ADD
17437: ST_TO_ADDR
// if Display_kings and not isSGUI then
17438: LD_EXP 68
17442: PUSH
17443: LD_OWVAR 83
17447: NOT
17448: AND
17449: IFFALSE 17467
// AllStrings = AllStrings ^ Display_kings ;
17451: LD_ADDR_VAR 0 2
17455: PUSH
17456: LD_VAR 0 2
17460: PUSH
17461: LD_EXP 68
17465: ADD
17466: ST_TO_ADDR
// if ( LimitsStrings ) then
17467: CALL 14164 0 0
17471: IFFALSE 17493
// AllStrings := AllStrings ^  ^ LimitsStrings ;
17473: LD_ADDR_VAR 0 2
17477: PUSH
17478: LD_VAR 0 2
17482: PUSH
17483: LD_STRING 
17485: ADD
17486: PUSH
17487: CALL 14164 0 0
17491: ADD
17492: ST_TO_ADDR
// Display_Strings := AllStrings ;
17493: LD_ADDR_OWVAR 47
17497: PUSH
17498: LD_VAR 0 2
17502: ST_TO_ADDR
// end ;
17503: LD_VAR 0 1
17507: RET
// every 0 0$1 do
17508: GO 17510
17510: DISABLE
// begin ShowTimer ;
17511: CALL 17324 0 0
// enable ;
17515: ENABLE
// end ; end_of_file
17516: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
17517: LD_INT 0
17519: PPUSH
17520: PPUSH
17521: PPUSH
// sharedPoints1 = [ ] ;
17522: LD_ADDR_LOC 28
17526: PUSH
17527: EMPTY
17528: ST_TO_ADDR
// sharedPoints2 = [ ] ;
17529: LD_ADDR_LOC 29
17533: PUSH
17534: EMPTY
17535: ST_TO_ADDR
// sharedPoints3 = [ ] ;
17536: LD_ADDR_LOC 30
17540: PUSH
17541: EMPTY
17542: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
17543: LD_ADDR_VAR 0 2
17547: PUSH
17548: DOUBLE
17549: LD_INT 1
17551: DEC
17552: ST_TO_ADDR
17553: LD_EXP 23
17557: PUSH
17558: LD_INT 0
17560: PLUS
17561: PUSH
17562: FOR_TO
17563: IFFALSE 17665
// begin if not Side_Positions [ i ] = 0 then
17565: LD_EXP 23
17569: PUSH
17570: LD_VAR 0 2
17574: ARRAY
17575: PUSH
17576: LD_INT 0
17578: EQUAL
17579: NOT
17580: IFFALSE 17594
// SetMultiScore ( i , 0 ) ;
17582: LD_VAR 0 2
17586: PPUSH
17587: LD_INT 0
17589: PPUSH
17590: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
17594: LD_ADDR_LOC 28
17598: PUSH
17599: LD_LOC 28
17603: PPUSH
17604: LD_VAR 0 2
17608: PPUSH
17609: LD_INT 0
17611: PPUSH
17612: CALL_OW 1
17616: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
17617: LD_ADDR_LOC 29
17621: PUSH
17622: LD_LOC 29
17626: PPUSH
17627: LD_VAR 0 2
17631: PPUSH
17632: LD_INT 0
17634: PPUSH
17635: CALL_OW 1
17639: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
17640: LD_ADDR_LOC 30
17644: PUSH
17645: LD_LOC 30
17649: PPUSH
17650: LD_VAR 0 2
17654: PPUSH
17655: LD_INT 0
17657: PPUSH
17658: CALL_OW 1
17662: ST_TO_ADDR
// end ;
17663: GO 17562
17665: POP
17666: POP
// pointGame = true ;
17667: LD_ADDR_LOC 31
17671: PUSH
17672: LD_INT 1
17674: ST_TO_ADDR
// end ;
17675: LD_VAR 0 1
17679: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
17680: LD_LOC 31
17684: IFFALSE 18095
17686: GO 17688
17688: DISABLE
17689: LD_INT 0
17691: PPUSH
17692: PPUSH
17693: PPUSH
17694: PPUSH
17695: PPUSH
17696: PPUSH
17697: PPUSH
17698: PPUSH
17699: PPUSH
17700: PPUSH
17701: PPUSH
17702: PPUSH
17703: PPUSH
// begin if isSGUI then
17704: LD_OWVAR 83
17708: IFFALSE 18095
// begin if Teams [ 1 ] then
17710: LD_EXP 22
17714: PUSH
17715: LD_INT 1
17717: ARRAY
17718: IFFALSE 17730
// red = true else
17720: LD_ADDR_VAR 0 2
17724: PUSH
17725: LD_INT 1
17727: ST_TO_ADDR
17728: GO 17738
// red = false ;
17730: LD_ADDR_VAR 0 2
17734: PUSH
17735: LD_INT 0
17737: ST_TO_ADDR
// if Teams [ 2 ] then
17738: LD_EXP 22
17742: PUSH
17743: LD_INT 2
17745: ARRAY
17746: IFFALSE 17758
// blue = true else
17748: LD_ADDR_VAR 0 3
17752: PUSH
17753: LD_INT 1
17755: ST_TO_ADDR
17756: GO 17766
// blue = false ;
17758: LD_ADDR_VAR 0 3
17762: PUSH
17763: LD_INT 0
17765: ST_TO_ADDR
// if Teams [ 3 ] then
17766: LD_EXP 22
17770: PUSH
17771: LD_INT 3
17773: ARRAY
17774: IFFALSE 17786
// yel = true else
17776: LD_ADDR_VAR 0 4
17780: PUSH
17781: LD_INT 1
17783: ST_TO_ADDR
17784: GO 17794
// yel = false ;
17786: LD_ADDR_VAR 0 4
17790: PUSH
17791: LD_INT 0
17793: ST_TO_ADDR
// if Teams [ 4 ] then
17794: LD_EXP 22
17798: PUSH
17799: LD_INT 4
17801: ARRAY
17802: IFFALSE 17814
// green = true else
17804: LD_ADDR_VAR 0 5
17808: PUSH
17809: LD_INT 1
17811: ST_TO_ADDR
17812: GO 17822
// green = false ;
17814: LD_ADDR_VAR 0 5
17818: PUSH
17819: LD_INT 0
17821: ST_TO_ADDR
// if def_public_score then
17822: LD_EXP 6
17826: IFFALSE 17838
// p = true else
17828: LD_ADDR_VAR 0 12
17832: PUSH
17833: LD_INT 1
17835: ST_TO_ADDR
17836: GO 17846
// p = false ;
17838: LD_ADDR_VAR 0 12
17842: PUSH
17843: LD_INT 0
17845: ST_TO_ADDR
// if team_game then
17846: LD_EXP 25
17850: IFFALSE 17931
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
17852: LD_ADDR_VAR 0 13
17856: PUSH
17857: LD_INT 3
17859: PUSH
17860: LD_INT 1
17862: PUSH
17863: LD_INT 2
17865: PUSH
17866: LD_INT 7
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: PUSH
17875: LD_EXP 28
17879: ARRAY
17880: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
17881: LD_ADDR_VAR 0 10
17885: PUSH
17886: LD_STRING {
17888: PUSH
17889: LD_VAR 0 3
17893: STR
17894: PUSH
17895: LD_STRING ,
17897: STR
17898: PUSH
17899: LD_VAR 0 4
17903: STR
17904: PUSH
17905: LD_STRING ,
17907: STR
17908: PUSH
17909: LD_VAR 0 2
17913: STR
17914: PUSH
17915: LD_STRING ,0,0,0,
17917: STR
17918: PUSH
17919: LD_VAR 0 5
17923: STR
17924: PUSH
17925: LD_STRING ,0}
17927: STR
17928: ST_TO_ADDR
// end else
17929: GO 18031
// begin you = your_side ;
17931: LD_ADDR_VAR 0 13
17935: PUSH
17936: LD_OWVAR 2
17940: ST_TO_ADDR
// s = { ;
17941: LD_ADDR_VAR 0 10
17945: PUSH
17946: LD_STRING {
17948: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
17949: LD_ADDR_VAR 0 1
17953: PUSH
17954: DOUBLE
17955: LD_INT 1
17957: DEC
17958: ST_TO_ADDR
17959: LD_EXP 23
17963: PUSH
17964: LD_INT 0
17966: PLUS
17967: PUSH
17968: FOR_TO
17969: IFFALSE 18015
// if side_positions [ i ] then
17971: LD_EXP 23
17975: PUSH
17976: LD_VAR 0 1
17980: ARRAY
17981: IFFALSE 17999
// s = s & 1, else
17983: LD_ADDR_VAR 0 10
17987: PUSH
17988: LD_VAR 0 10
17992: PUSH
17993: LD_STRING 1,
17995: STR
17996: ST_TO_ADDR
17997: GO 18013
// s = s & 0, ;
17999: LD_ADDR_VAR 0 10
18003: PUSH
18004: LD_VAR 0 10
18008: PUSH
18009: LD_STRING 0,
18011: STR
18012: ST_TO_ADDR
18013: GO 17968
18015: POP
18016: POP
// s = s & } ;
18017: LD_ADDR_VAR 0 10
18021: PUSH
18022: LD_VAR 0 10
18026: PUSH
18027: LD_STRING }
18029: STR
18030: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
18031: LD_STRING initScore(
18033: PUSH
18034: LD_VAR 0 10
18038: STR
18039: PUSH
18040: LD_STRING ,
18042: STR
18043: PUSH
18044: LD_VAR 0 12
18048: STR
18049: PUSH
18050: LD_STRING ,
18052: STR
18053: PUSH
18054: LD_VAR 0 13
18058: STR
18059: PUSH
18060: LD_STRING  );
18062: STR
18063: PPUSH
18064: CALL_OW 559
// if game_type = 3 then
18068: LD_EXP 49
18072: PUSH
18073: LD_INT 3
18075: EQUAL
18076: IFFALSE 18095
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
18078: LD_STRING AddScorePoints(2,2,
18080: PUSH
18081: LD_EXP 20
18085: STR
18086: PUSH
18087: LD_STRING  );
18089: STR
18090: PPUSH
18091: CALL_OW 559
// end ; end ;
18095: PPOPN 13
18097: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
18098: LD_INT 0
18100: PPUSH
18101: PPUSH
// case typ of 1 :
18102: LD_VAR 0 3
18106: PUSH
18107: LD_INT 1
18109: DOUBLE
18110: EQUAL
18111: IFTRUE 18115
18113: GO 18143
18115: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
18116: LD_ADDR_LOC 28
18120: PUSH
18121: LD_LOC 28
18125: PPUSH
18126: LD_VAR 0 1
18130: PPUSH
18131: LD_VAR 0 2
18135: PPUSH
18136: CALL_OW 1
18140: ST_TO_ADDR
18141: GO 18216
18143: LD_INT 2
18145: DOUBLE
18146: EQUAL
18147: IFTRUE 18151
18149: GO 18179
18151: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
18152: LD_ADDR_LOC 29
18156: PUSH
18157: LD_LOC 29
18161: PPUSH
18162: LD_VAR 0 1
18166: PPUSH
18167: LD_VAR 0 2
18171: PPUSH
18172: CALL_OW 1
18176: ST_TO_ADDR
18177: GO 18216
18179: LD_INT 3
18181: DOUBLE
18182: EQUAL
18183: IFTRUE 18187
18185: GO 18215
18187: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
18188: LD_ADDR_LOC 30
18192: PUSH
18193: LD_LOC 30
18197: PPUSH
18198: LD_VAR 0 1
18202: PPUSH
18203: LD_VAR 0 2
18207: PPUSH
18208: CALL_OW 1
18212: ST_TO_ADDR
18213: GO 18216
18215: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
18216: LD_ADDR_VAR 0 5
18220: PUSH
18221: LD_LOC 28
18225: PUSH
18226: LD_VAR 0 1
18230: ARRAY
18231: PUSH
18232: LD_LOC 29
18236: PUSH
18237: LD_VAR 0 1
18241: ARRAY
18242: PLUS
18243: PUSH
18244: LD_LOC 30
18248: PUSH
18249: LD_VAR 0 1
18253: ARRAY
18254: PLUS
18255: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
18256: LD_VAR 0 1
18260: PPUSH
18261: LD_VAR 0 5
18265: PPUSH
18266: CALL_OW 506
// end ; end_of_file
18270: LD_VAR 0 4
18274: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
18275: LD_INT 0
18277: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
18278: LD_VAR 0 1
18282: PPUSH
18283: CALL_OW 255
18287: PUSH
18288: LD_VAR 0 4
18292: EQUAL
18293: IFFALSE 18312
// begin SetAchievement ( ACH_RAD ) ;
18295: LD_STRING ACH_RAD
18297: PPUSH
18298: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
18302: LD_STRING ACH_NL
18304: PPUSH
18305: LD_INT 1
18307: PPUSH
18308: CALL_OW 564
// end end ;
18312: LD_VAR 0 5
18316: RET
// export function SA_Win ( side ) ; begin
18317: LD_INT 0
18319: PPUSH
// case side of 1 :
18320: LD_VAR 0 1
18324: PUSH
18325: LD_INT 1
18327: DOUBLE
18328: EQUAL
18329: IFTRUE 18333
18331: GO 18346
18333: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18334: LD_STRING ACH_AH
18336: PPUSH
18337: LD_INT 1
18339: PPUSH
18340: CALL_OW 564
18344: GO 18509
18346: LD_INT 2
18348: DOUBLE
18349: EQUAL
18350: IFTRUE 18354
18352: GO 18367
18354: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18355: LD_STRING ACH_E
18357: PPUSH
18358: LD_INT 1
18360: PPUSH
18361: CALL_OW 564
18365: GO 18509
18367: LD_INT 3
18369: DOUBLE
18370: EQUAL
18371: IFTRUE 18375
18373: GO 18388
18375: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18376: LD_STRING ACH_OOL
18378: PPUSH
18379: LD_INT 1
18381: PPUSH
18382: CALL_OW 564
18386: GO 18509
18388: LD_INT 1
18390: PUSH
18391: LD_INT 2
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: DOUBLE
18398: EQUAL
18399: IFTRUE 18403
18401: GO 18428
18403: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18404: LD_STRING ACH_AH
18406: PPUSH
18407: LD_REAL  5.00000000000000E-0001
18410: PPUSH
18411: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18415: LD_STRING ACH_E
18417: PPUSH
18418: LD_REAL  5.00000000000000E-0001
18421: PPUSH
18422: CALL_OW 564
// end ; [ 2 , 3 ] :
18426: GO 18509
18428: LD_INT 2
18430: PUSH
18431: LD_INT 3
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: DOUBLE
18438: EQUAL
18439: IFTRUE 18443
18441: GO 18468
18443: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18444: LD_STRING ACH_OOL
18446: PPUSH
18447: LD_REAL  5.00000000000000E-0001
18450: PPUSH
18451: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18455: LD_STRING ACH_E
18457: PPUSH
18458: LD_REAL  5.00000000000000E-0001
18461: PPUSH
18462: CALL_OW 564
// end ; [ 3 , 1 ] :
18466: GO 18509
18468: LD_INT 3
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: DOUBLE
18478: EQUAL
18479: IFTRUE 18483
18481: GO 18508
18483: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18484: LD_STRING ACH_AH
18486: PPUSH
18487: LD_REAL  5.00000000000000E-0001
18490: PPUSH
18491: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18495: LD_STRING ACH_OOL
18497: PPUSH
18498: LD_REAL  5.00000000000000E-0001
18501: PPUSH
18502: CALL_OW 564
// end ; end ;
18506: GO 18509
18508: POP
// end ; end_of_file
18509: LD_VAR 0 2
18513: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
18514: LD_INT 0
18516: PPUSH
18517: PPUSH
// enable ( 98 ) ;
18518: LD_INT 98
18520: ENABLE_MARKED
// GameEnded = false ;
18521: LD_ADDR_LOC 33
18525: PUSH
18526: LD_INT 0
18528: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18529: LD_ADDR_LOC 32
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: LD_INT 0
18539: PUSH
18540: LD_INT 0
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: LD_INT 0
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: ST_TO_ADDR
// unfoged = false ;
18568: LD_ADDR_LOC 34
18572: PUSH
18573: LD_INT 0
18575: ST_TO_ADDR
// for i = 1 to side_positions do
18576: LD_ADDR_VAR 0 2
18580: PUSH
18581: DOUBLE
18582: LD_INT 1
18584: DEC
18585: ST_TO_ADDR
18586: LD_EXP 23
18590: PUSH
18591: FOR_TO
18592: IFFALSE 18632
// if not side_positions [ i ] then
18594: LD_EXP 23
18598: PUSH
18599: LD_VAR 0 2
18603: ARRAY
18604: NOT
18605: IFFALSE 18630
// defaited = replace ( defaited , i , true ) ;
18607: LD_ADDR_LOC 32
18611: PUSH
18612: LD_LOC 32
18616: PPUSH
18617: LD_VAR 0 2
18621: PPUSH
18622: LD_INT 1
18624: PPUSH
18625: CALL_OW 1
18629: ST_TO_ADDR
18630: GO 18591
18632: POP
18633: POP
// end ;
18634: LD_VAR 0 1
18638: RET
// function CanWinLoose ; begin
18639: LD_INT 0
18641: PPUSH
// Result := true ;
18642: LD_ADDR_VAR 0 1
18646: PUSH
18647: LD_INT 1
18649: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
18650: CALL_OW 518
18654: PUSH
18655: CALL_OW 519
18659: PUSH
18660: LD_INT 0
18662: GREATER
18663: AND
18664: IFFALSE 18674
// Result := false ;
18666: LD_ADDR_VAR 0 1
18670: PUSH
18671: LD_INT 0
18673: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18674: CALL_OW 531
18678: PUSH
18679: CALL_OW 519
18683: PUSH
18684: LD_INT 1
18686: GREATER
18687: AND
18688: IFFALSE 18698
// Result := false ;
18690: LD_ADDR_VAR 0 1
18694: PUSH
18695: LD_INT 0
18697: ST_TO_ADDR
// end ;
18698: LD_VAR 0 1
18702: RET
// export function HasPower ( i ) ; var k , h ; begin
18703: LD_INT 0
18705: PPUSH
18706: PPUSH
18707: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18708: LD_VAR 0 1
18712: PPUSH
18713: CALL_OW 108
18717: NOT
18718: PUSH
18719: LD_EXP 26
18723: PUSH
18724: LD_VAR 0 1
18728: ARRAY
18729: NOT
18730: AND
18731: PUSH
18732: LD_OWVAR 4
18736: AND
18737: IFFALSE 18749
// begin result = false ;
18739: LD_ADDR_VAR 0 2
18743: PUSH
18744: LD_INT 0
18746: ST_TO_ADDR
// end else
18747: GO 19044
// case def_win_rules of 0 :
18749: LD_EXP 19
18753: PUSH
18754: LD_INT 0
18756: DOUBLE
18757: EQUAL
18758: IFTRUE 18762
18760: GO 18925
18762: POP
// if def_people_respawning then
18763: LD_EXP 61
18767: IFFALSE 18858
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
18769: LD_ADDR_VAR 0 2
18773: PUSH
18774: LD_INT 22
18776: PUSH
18777: LD_VAR 0 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 33
18801: PUSH
18802: LD_INT 3
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 33
18811: PUSH
18812: LD_INT 5
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 30
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 30
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PPUSH
18851: CALL_OW 69
18855: ST_TO_ADDR
18856: GO 18923
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18858: LD_ADDR_VAR 0 2
18862: PUSH
18863: LD_INT 22
18865: PUSH
18866: LD_VAR 0 1
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 2
18877: PUSH
18878: LD_INT 21
18880: PUSH
18881: LD_INT 1
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 33
18890: PUSH
18891: LD_INT 3
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 33
18900: PUSH
18901: LD_INT 5
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PPUSH
18918: CALL_OW 69
18922: ST_TO_ADDR
18923: GO 19044
18925: LD_INT 1
18927: DOUBLE
18928: EQUAL
18929: IFTRUE 18933
18931: GO 18972
18933: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
18934: LD_ADDR_VAR 0 2
18938: PUSH
18939: LD_INT 22
18941: PUSH
18942: LD_VAR 0 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 21
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PPUSH
18965: CALL_OW 69
18969: ST_TO_ADDR
18970: GO 19044
18972: LD_INT 2
18974: DOUBLE
18975: EQUAL
18976: IFTRUE 18980
18978: GO 19043
18980: POP
// begin h = false ;
18981: LD_ADDR_VAR 0 4
18985: PUSH
18986: LD_INT 0
18988: ST_TO_ADDR
// for k in heroes [ i ] do
18989: LD_ADDR_VAR 0 3
18993: PUSH
18994: LD_EXP 35
18998: PUSH
18999: LD_VAR 0 1
19003: ARRAY
19004: PUSH
19005: FOR_IN
19006: IFFALSE 19029
// if IsLive ( k ) then
19008: LD_VAR 0 3
19012: PPUSH
19013: CALL_OW 300
19017: IFFALSE 19027
// h = true ;
19019: LD_ADDR_VAR 0 4
19023: PUSH
19024: LD_INT 1
19026: ST_TO_ADDR
19027: GO 19005
19029: POP
19030: POP
// Result := h ;
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: LD_VAR 0 4
19040: ST_TO_ADDR
// end ; end ;
19041: GO 19044
19043: POP
// end ;
19044: LD_VAR 0 2
19048: RET
// function AlliedSides ( i , j ) ; begin
19049: LD_INT 0
19051: PPUSH
// Result := false ;
19052: LD_ADDR_VAR 0 3
19056: PUSH
19057: LD_INT 0
19059: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_VAR 0 2
19069: PPUSH
19070: CALL_OW 81
19074: PUSH
19075: LD_INT 1
19077: EQUAL
19078: PUSH
19079: LD_VAR 0 2
19083: PPUSH
19084: LD_VAR 0 1
19088: PPUSH
19089: CALL_OW 81
19093: PUSH
19094: LD_INT 1
19096: EQUAL
19097: AND
19098: PUSH
19099: LD_VAR 0 1
19103: PPUSH
19104: CALL_OW 83
19108: AND
19109: PUSH
19110: LD_VAR 0 2
19114: PPUSH
19115: CALL_OW 83
19119: AND
19120: IFFALSE 19130
// Result := true ;
19122: LD_ADDR_VAR 0 3
19126: PUSH
19127: LD_INT 1
19129: ST_TO_ADDR
// end ;
19130: LD_VAR 0 3
19134: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
19135: CALL 18639 0 0
19139: PUSH
19140: LD_LOC 33
19144: NOT
19145: AND
19146: IFFALSE 19162
19148: GO 19150
19150: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
19151: LD_ADDR_EXP 67
19155: PUSH
19156: LD_STRING #Player-Ended
19158: PUSH
19159: EMPTY
19160: LIST
19161: ST_TO_ADDR
19162: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
19163: CALL 18639 0 0
19167: PUSH
19168: LD_LOC 33
19172: AND
19173: IFFALSE 19182
19175: GO 19177
19177: DISABLE
// YouLostInMultiplayer ;
19178: CALL_OW 107
19182: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
19183: CALL 18639 0 0
19187: NOT
19188: PUSH
19189: CALL_OW 531
19193: NOT
19194: AND
19195: IFFALSE 19211
19197: GO 19199
19199: DISABLE
// WaitServerStrings = [ #server-wait ] ;
19200: LD_ADDR_EXP 67
19204: PUSH
19205: LD_STRING #server-wait
19207: PUSH
19208: EMPTY
19209: LIST
19210: ST_TO_ADDR
19211: END
// every 100 trigger IAmSpec do
19212: CALL_OW 531
19216: IFFALSE 19232
19218: GO 19220
19220: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
19221: LD_ADDR_EXP 67
19225: PUSH
19226: LD_STRING #Player-IAmSpec
19228: PUSH
19229: EMPTY
19230: LIST
19231: ST_TO_ADDR
19232: END
// every 100 trigger GameEnded and IAmSpec do
19233: LD_LOC 33
19237: PUSH
19238: CALL_OW 531
19242: AND
19243: IFFALSE 19252
19245: GO 19247
19247: DISABLE
// YouLostInMultiplayer ;
19248: CALL_OW 107
19252: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
19253: CALL 18639 0 0
19257: PUSH
19258: LD_LOC 33
19262: NOT
19263: AND
19264: IFFALSE 19280
19266: GO 19268
19268: DISABLE
// WaitServerStrings = [ $player-win ] ;
19269: LD_ADDR_EXP 67
19273: PUSH
19274: LD_STRING $player-win
19276: PUSH
19277: EMPTY
19278: LIST
19279: ST_TO_ADDR
19280: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
19281: CALL 18639 0 0
19285: PUSH
19286: LD_LOC 33
19290: AND
19291: IFFALSE 19315
19293: GO 19295
19295: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
19296: LD_EXP 24
19300: PUSH
19301: LD_OWVAR 2
19305: ARRAY
19306: PPUSH
19307: CALL 18317 0 1
// YouWinInMultiplayer ;
19311: CALL_OW 106
// end ;
19315: END
// every 100 trigger isEditor marked 401 do
19316: LD_OWVAR 84
19320: IFFALSE 19336
19322: GO 19324
19324: DISABLE
// Debug_Strings = [ You won ] ;
19325: LD_ADDR_OWVAR 48
19329: PUSH
19330: LD_STRING You won
19332: PUSH
19333: EMPTY
19334: LIST
19335: ST_TO_ADDR
19336: END
// every 100 trigger isEditor marked 400 do
19337: LD_OWVAR 84
19341: IFFALSE 19357
19343: GO 19345
19345: DISABLE
// Debug_Strings = [ You loss ] ;
19346: LD_ADDR_OWVAR 48
19350: PUSH
19351: LD_STRING You loss
19353: PUSH
19354: EMPTY
19355: LIST
19356: ST_TO_ADDR
19357: END
// every 100 marked 98 do var i , un ;
19358: GO 19360
19360: DISABLE
19361: LD_INT 0
19363: PPUSH
19364: PPUSH
// begin for i = 1 to side_positions do
19365: LD_ADDR_VAR 0 1
19369: PUSH
19370: DOUBLE
19371: LD_INT 1
19373: DEC
19374: ST_TO_ADDR
19375: LD_EXP 23
19379: PUSH
19380: FOR_TO
19381: IFFALSE 19504
// if side_positions [ i ] then
19383: LD_EXP 23
19387: PUSH
19388: LD_VAR 0 1
19392: ARRAY
19393: IFFALSE 19502
// if not HasPower ( i ) and not Defaited [ i ] then
19395: LD_VAR 0 1
19399: PPUSH
19400: CALL 18703 0 1
19404: NOT
19405: PUSH
19406: LD_LOC 32
19410: PUSH
19411: LD_VAR 0 1
19415: ARRAY
19416: NOT
19417: AND
19418: IFFALSE 19502
// begin un = filterallunits ( [ f_side , i ] ) ;
19420: LD_ADDR_VAR 0 2
19424: PUSH
19425: LD_INT 22
19427: PUSH
19428: LD_VAR 0 1
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PPUSH
19437: CALL_OW 69
19441: ST_TO_ADDR
// if un then
19442: LD_VAR 0 2
19446: IFFALSE 19460
// SetSide ( un , 0 ) ;
19448: LD_VAR 0 2
19452: PPUSH
19453: LD_INT 0
19455: PPUSH
19456: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
19460: LD_ADDR_LOC 32
19464: PUSH
19465: LD_LOC 32
19469: PPUSH
19470: LD_VAR 0 1
19474: PPUSH
19475: LD_INT 1
19477: PPUSH
19478: CALL_OW 1
19482: ST_TO_ADDR
// if i = your_side then
19483: LD_VAR 0 1
19487: PUSH
19488: LD_OWVAR 2
19492: EQUAL
19493: IFFALSE 19502
// begin Multiplayer_Loose_Message ;
19495: CALL_OW 521
// enable ( 400 ) ;
19499: LD_INT 400
19501: ENABLE_MARKED
// end ; end ;
19502: GO 19380
19504: POP
19505: POP
// if not Unfoged and defaited [ your_side ] then
19506: LD_LOC 34
19510: NOT
19511: PUSH
19512: LD_LOC 32
19516: PUSH
19517: LD_OWVAR 2
19521: ARRAY
19522: AND
19523: IFFALSE 19529
// Unfog ;
19525: CALL 19715 0 0
// DidGameEnd ;
19529: CALL 19544 0 0
// if not GameEnded then
19533: LD_LOC 33
19537: NOT
19538: IFFALSE 19541
// enable ;
19540: ENABLE
// end ;
19541: PPOPN 2
19543: END
// function DidGameEnd ; var i , k , enemy ; begin
19544: LD_INT 0
19546: PPUSH
19547: PPUSH
19548: PPUSH
19549: PPUSH
// enemy = [ ] ;
19550: LD_ADDR_VAR 0 4
19554: PUSH
19555: EMPTY
19556: ST_TO_ADDR
// for i = 1 to side_positions do
19557: LD_ADDR_VAR 0 2
19561: PUSH
19562: DOUBLE
19563: LD_INT 1
19565: DEC
19566: ST_TO_ADDR
19567: LD_EXP 23
19571: PUSH
19572: FOR_TO
19573: IFFALSE 19677
// if not defaited [ i ] then
19575: LD_LOC 32
19579: PUSH
19580: LD_VAR 0 2
19584: ARRAY
19585: NOT
19586: IFFALSE 19675
// for k = 1 to side_positions do
19588: LD_ADDR_VAR 0 3
19592: PUSH
19593: DOUBLE
19594: LD_INT 1
19596: DEC
19597: ST_TO_ADDR
19598: LD_EXP 23
19602: PUSH
19603: FOR_TO
19604: IFFALSE 19673
// if not defaited [ k ] then
19606: LD_LOC 32
19610: PUSH
19611: LD_VAR 0 3
19615: ARRAY
19616: NOT
19617: IFFALSE 19671
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
19619: LD_VAR 0 2
19623: PPUSH
19624: LD_VAR 0 3
19628: PPUSH
19629: CALL_OW 81
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: LD_INT 0
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: IN
19644: IFFALSE 19671
// enemy = enemy ^ [ i , k ] ;
19646: LD_ADDR_VAR 0 4
19650: PUSH
19651: LD_VAR 0 4
19655: PUSH
19656: LD_VAR 0 2
19660: PUSH
19661: LD_VAR 0 3
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: ADD
19670: ST_TO_ADDR
19671: GO 19603
19673: POP
19674: POP
19675: GO 19572
19677: POP
19678: POP
// if not enemy then
19679: LD_VAR 0 4
19683: NOT
19684: IFFALSE 19710
// begin GameEnded = true ;
19686: LD_ADDR_LOC 33
19690: PUSH
19691: LD_INT 1
19693: ST_TO_ADDR
// if not defaited [ your_side ] then
19694: LD_LOC 32
19698: PUSH
19699: LD_OWVAR 2
19703: ARRAY
19704: NOT
19705: IFFALSE 19710
// enable ( 401 ) ;
19707: LD_INT 401
19709: ENABLE_MARKED
// end ; end ;
19710: LD_VAR 0 1
19714: RET
// function unfog ; var k , friends ; begin
19715: LD_INT 0
19717: PPUSH
19718: PPUSH
19719: PPUSH
// for k = 1 to side_positions do
19720: LD_ADDR_VAR 0 2
19724: PUSH
19725: DOUBLE
19726: LD_INT 1
19728: DEC
19729: ST_TO_ADDR
19730: LD_EXP 23
19734: PUSH
19735: FOR_TO
19736: IFFALSE 19792
// if not defaited [ k ] then
19738: LD_LOC 32
19742: PUSH
19743: LD_VAR 0 2
19747: ARRAY
19748: NOT
19749: IFFALSE 19790
// if GetAttitude ( your_side , k ) in [ att_friend ] then
19751: LD_OWVAR 2
19755: PPUSH
19756: LD_VAR 0 2
19760: PPUSH
19761: CALL_OW 81
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: IN
19772: IFFALSE 19790
// friends = friends ^ k ;
19774: LD_ADDR_VAR 0 3
19778: PUSH
19779: LD_VAR 0 3
19783: PUSH
19784: LD_VAR 0 2
19788: ADD
19789: ST_TO_ADDR
19790: GO 19735
19792: POP
19793: POP
// if not friends then
19794: LD_VAR 0 3
19798: NOT
19799: IFFALSE 19816
// begin fogoff ( true ) ;
19801: LD_INT 1
19803: PPUSH
19804: CALL_OW 344
// unfoged = true ;
19808: LD_ADDR_LOC 34
19812: PUSH
19813: LD_INT 1
19815: ST_TO_ADDR
// end ; end ;
19816: LD_VAR 0 1
19820: RET
// export function MakeGameEnd ; begin
19821: LD_INT 0
19823: PPUSH
// fogoff ( true ) ;
19824: LD_INT 1
19826: PPUSH
19827: CALL_OW 344
// unfoged = true ;
19831: LD_ADDR_LOC 34
19835: PUSH
19836: LD_INT 1
19838: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19839: LD_INT 175
19841: PPUSH
19842: CALL_OW 67
// GameEnded = true ;
19846: LD_ADDR_LOC 33
19850: PUSH
19851: LD_INT 1
19853: ST_TO_ADDR
// end ;
19854: LD_VAR 0 1
19858: RET
// export function GetGameEnded ; begin
19859: LD_INT 0
19861: PPUSH
// result = GameEnded ;
19862: LD_ADDR_VAR 0 1
19866: PUSH
19867: LD_LOC 33
19871: ST_TO_ADDR
// end ; end_of_file
19872: LD_VAR 0 1
19876: RET
// var win ; export function init_kings_counting ; var i ; begin
19877: LD_INT 0
19879: PPUSH
19880: PPUSH
// mp_with_score := true ;
19881: LD_ADDR_OWVAR 14
19885: PUSH
19886: LD_INT 1
19888: ST_TO_ADDR
// ResetMultiScore ;
19889: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19893: LD_INT 19
19895: PPUSH
19896: LD_INT 1
19898: PPUSH
19899: CALL_OW 424
// enable ( 2 ) ;
19903: LD_INT 2
19905: ENABLE_MARKED
// end ;
19906: LD_VAR 0 1
19910: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19911: LD_INT 0
19913: PPUSH
19914: PPUSH
19915: PPUSH
19916: PPUSH
19917: PPUSH
19918: PPUSH
19919: PPUSH
19920: PPUSH
19921: PPUSH
// vypis := [ ] ;
19922: LD_ADDR_VAR 0 3
19926: PUSH
19927: EMPTY
19928: ST_TO_ADDR
// red = 0 ;
19929: LD_ADDR_VAR 0 5
19933: PUSH
19934: LD_INT 0
19936: ST_TO_ADDR
// blue = 0 ;
19937: LD_ADDR_VAR 0 6
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
// yel = 0 ;
19945: LD_ADDR_VAR 0 7
19949: PUSH
19950: LD_INT 0
19952: ST_TO_ADDR
// green = 0 ;
19953: LD_ADDR_VAR 0 8
19957: PUSH
19958: LD_INT 0
19960: ST_TO_ADDR
// if def_public_score or isSGUI then
19961: LD_EXP 6
19965: PUSH
19966: LD_OWVAR 83
19970: OR
19971: IFFALSE 20586
// if not Team_Game then
19973: LD_EXP 25
19977: NOT
19978: IFFALSE 20110
// begin for side = 1 to Side_Positions do
19980: LD_ADDR_VAR 0 2
19984: PUSH
19985: DOUBLE
19986: LD_INT 1
19988: DEC
19989: ST_TO_ADDR
19990: LD_EXP 23
19994: PUSH
19995: FOR_TO
19996: IFFALSE 20106
// if Side_Positions [ side ] then
19998: LD_EXP 23
20002: PUSH
20003: LD_VAR 0 2
20007: ARRAY
20008: IFFALSE 20104
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
20010: LD_ADDR_VAR 0 3
20014: PUSH
20015: LD_VAR 0 3
20019: PUSH
20020: LD_STRING #KingoftheHill-Public
20022: PUSH
20023: LD_VAR 0 2
20027: PUSH
20028: LD_VAR 0 2
20032: PUSH
20033: LD_VAR 0 2
20037: PUSH
20038: LD_INT 10
20040: PLUS
20041: PPUSH
20042: CALL_OW 110
20046: PUSH
20047: LD_INT 3
20049: DIV
20050: PUSH
20051: LD_EXP 20
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: ADD
20063: ST_TO_ADDR
// ToLua ( updateScorePoints(2, & side & , & ( GetTag ( side + 10 ) div 3 ) & ); ) ;
20064: LD_STRING updateScorePoints(2,
20066: PUSH
20067: LD_VAR 0 2
20071: STR
20072: PUSH
20073: LD_STRING ,
20075: STR
20076: PUSH
20077: LD_VAR 0 2
20081: PUSH
20082: LD_INT 10
20084: PLUS
20085: PPUSH
20086: CALL_OW 110
20090: PUSH
20091: LD_INT 3
20093: DIV
20094: STR
20095: PUSH
20096: LD_STRING );
20098: STR
20099: PPUSH
20100: CALL_OW 559
// end ;
20104: GO 19995
20106: POP
20107: POP
// end else
20108: GO 20584
// begin if Teams [ 1 ] then
20110: LD_EXP 22
20114: PUSH
20115: LD_INT 1
20117: ARRAY
20118: IFFALSE 20170
// for i in Teams [ 1 ] do
20120: LD_ADDR_VAR 0 4
20124: PUSH
20125: LD_EXP 22
20129: PUSH
20130: LD_INT 1
20132: ARRAY
20133: PUSH
20134: FOR_IN
20135: IFFALSE 20168
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20137: LD_ADDR_VAR 0 5
20141: PUSH
20142: LD_VAR 0 5
20146: PUSH
20147: LD_VAR 0 4
20151: PUSH
20152: LD_INT 10
20154: PLUS
20155: PPUSH
20156: CALL_OW 110
20160: PUSH
20161: LD_INT 3
20163: DIV
20164: PLUS
20165: ST_TO_ADDR
20166: GO 20134
20168: POP
20169: POP
// if Teams [ 2 ] then
20170: LD_EXP 22
20174: PUSH
20175: LD_INT 2
20177: ARRAY
20178: IFFALSE 20230
// for i in Teams [ 2 ] do
20180: LD_ADDR_VAR 0 4
20184: PUSH
20185: LD_EXP 22
20189: PUSH
20190: LD_INT 2
20192: ARRAY
20193: PUSH
20194: FOR_IN
20195: IFFALSE 20228
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20197: LD_ADDR_VAR 0 6
20201: PUSH
20202: LD_VAR 0 6
20206: PUSH
20207: LD_VAR 0 4
20211: PUSH
20212: LD_INT 10
20214: PLUS
20215: PPUSH
20216: CALL_OW 110
20220: PUSH
20221: LD_INT 3
20223: DIV
20224: PLUS
20225: ST_TO_ADDR
20226: GO 20194
20228: POP
20229: POP
// if Teams [ 3 ] then
20230: LD_EXP 22
20234: PUSH
20235: LD_INT 3
20237: ARRAY
20238: IFFALSE 20290
// for i in Teams [ 3 ] do
20240: LD_ADDR_VAR 0 4
20244: PUSH
20245: LD_EXP 22
20249: PUSH
20250: LD_INT 3
20252: ARRAY
20253: PUSH
20254: FOR_IN
20255: IFFALSE 20288
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20257: LD_ADDR_VAR 0 7
20261: PUSH
20262: LD_VAR 0 7
20266: PUSH
20267: LD_VAR 0 4
20271: PUSH
20272: LD_INT 10
20274: PLUS
20275: PPUSH
20276: CALL_OW 110
20280: PUSH
20281: LD_INT 3
20283: DIV
20284: PLUS
20285: ST_TO_ADDR
20286: GO 20254
20288: POP
20289: POP
// if Teams [ 4 ] then
20290: LD_EXP 22
20294: PUSH
20295: LD_INT 4
20297: ARRAY
20298: IFFALSE 20350
// for i in Teams [ 4 ] do
20300: LD_ADDR_VAR 0 4
20304: PUSH
20305: LD_EXP 22
20309: PUSH
20310: LD_INT 4
20312: ARRAY
20313: PUSH
20314: FOR_IN
20315: IFFALSE 20348
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20317: LD_ADDR_VAR 0 8
20321: PUSH
20322: LD_VAR 0 8
20326: PUSH
20327: LD_VAR 0 4
20331: PUSH
20332: LD_INT 10
20334: PLUS
20335: PPUSH
20336: CALL_OW 110
20340: PUSH
20341: LD_INT 3
20343: DIV
20344: PLUS
20345: ST_TO_ADDR
20346: GO 20314
20348: POP
20349: POP
// if Teams [ 1 ] then
20350: LD_EXP 22
20354: PUSH
20355: LD_INT 1
20357: ARRAY
20358: IFFALSE 20387
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20360: LD_ADDR_VAR 0 3
20364: PUSH
20365: LD_STRING #KingoftheHill-Public-red
20367: PUSH
20368: LD_INT 3
20370: PUSH
20371: LD_VAR 0 5
20375: PUSH
20376: LD_EXP 20
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: ST_TO_ADDR
// if Teams [ 2 ] then
20387: LD_EXP 22
20391: PUSH
20392: LD_INT 2
20394: ARRAY
20395: IFFALSE 20430
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20397: LD_ADDR_VAR 0 3
20401: PUSH
20402: LD_VAR 0 3
20406: PUSH
20407: LD_STRING #KingoftheHill-Public-blue
20409: PUSH
20410: LD_INT 1
20412: PUSH
20413: LD_VAR 0 6
20417: PUSH
20418: LD_EXP 20
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: ADD
20429: ST_TO_ADDR
// if Teams [ 3 ] then
20430: LD_EXP 22
20434: PUSH
20435: LD_INT 3
20437: ARRAY
20438: IFFALSE 20473
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20440: LD_ADDR_VAR 0 3
20444: PUSH
20445: LD_VAR 0 3
20449: PUSH
20450: LD_STRING #KingoftheHill-Public-yell
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_VAR 0 7
20460: PUSH
20461: LD_EXP 20
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: ADD
20472: ST_TO_ADDR
// if Teams [ 4 ] then
20473: LD_EXP 22
20477: PUSH
20478: LD_INT 4
20480: ARRAY
20481: IFFALSE 20516
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20483: LD_ADDR_VAR 0 3
20487: PUSH
20488: LD_VAR 0 3
20492: PUSH
20493: LD_STRING #KingoftheHill-Public-green
20495: PUSH
20496: LD_INT 7
20498: PUSH
20499: LD_VAR 0 8
20503: PUSH
20504: LD_EXP 20
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: ADD
20515: ST_TO_ADDR
// ToLua ( updateScorePoints(2,3, & red & ); ) ;
20516: LD_STRING updateScorePoints(2,3,
20518: PUSH
20519: LD_VAR 0 5
20523: STR
20524: PUSH
20525: LD_STRING );
20527: STR
20528: PPUSH
20529: CALL_OW 559
// ToLua ( updateScorePoints(2,1, & blue & ); ) ;
20533: LD_STRING updateScorePoints(2,1,
20535: PUSH
20536: LD_VAR 0 6
20540: STR
20541: PUSH
20542: LD_STRING );
20544: STR
20545: PPUSH
20546: CALL_OW 559
// ToLua ( updateScorePoints(2,2, & yel & ); ) ;
20550: LD_STRING updateScorePoints(2,2,
20552: PUSH
20553: LD_VAR 0 7
20557: STR
20558: PUSH
20559: LD_STRING );
20561: STR
20562: PPUSH
20563: CALL_OW 559
// ToLua ( updateScorePoints(2,7, & green & ); ) ;
20567: LD_STRING updateScorePoints(2,7,
20569: PUSH
20570: LD_VAR 0 8
20574: STR
20575: PUSH
20576: LD_STRING );
20578: STR
20579: PPUSH
20580: CALL_OW 559
// end else
20584: GO 21021
// if not Team_Game then
20586: LD_EXP 25
20590: NOT
20591: IFFALSE 20649
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
20593: LD_ADDR_VAR 0 3
20597: PUSH
20598: LD_VAR 0 3
20602: PUSH
20603: LD_STRING #KingoftheHill-Private
20605: PUSH
20606: LD_OWVAR 2
20610: PUSH
20611: LD_OWVAR 2
20615: PUSH
20616: LD_VAR 0 2
20620: PUSH
20621: LD_INT 10
20623: PLUS
20624: PPUSH
20625: CALL_OW 110
20629: PUSH
20630: LD_INT 3
20632: DIV
20633: PUSH
20634: LD_EXP 20
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: ADD
20646: ST_TO_ADDR
20647: GO 21021
// begin for i in Teams [ 1 ] do
20649: LD_ADDR_VAR 0 4
20653: PUSH
20654: LD_EXP 22
20658: PUSH
20659: LD_INT 1
20661: ARRAY
20662: PUSH
20663: FOR_IN
20664: IFFALSE 20697
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20666: LD_ADDR_VAR 0 5
20670: PUSH
20671: LD_VAR 0 5
20675: PUSH
20676: LD_VAR 0 4
20680: PUSH
20681: LD_INT 10
20683: PLUS
20684: PPUSH
20685: CALL_OW 110
20689: PUSH
20690: LD_INT 3
20692: DIV
20693: PLUS
20694: ST_TO_ADDR
20695: GO 20663
20697: POP
20698: POP
// for i in Teams [ 2 ] do
20699: LD_ADDR_VAR 0 4
20703: PUSH
20704: LD_EXP 22
20708: PUSH
20709: LD_INT 2
20711: ARRAY
20712: PUSH
20713: FOR_IN
20714: IFFALSE 20747
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20716: LD_ADDR_VAR 0 6
20720: PUSH
20721: LD_VAR 0 6
20725: PUSH
20726: LD_VAR 0 4
20730: PUSH
20731: LD_INT 10
20733: PLUS
20734: PPUSH
20735: CALL_OW 110
20739: PUSH
20740: LD_INT 3
20742: DIV
20743: PLUS
20744: ST_TO_ADDR
20745: GO 20713
20747: POP
20748: POP
// for i in Teams [ 3 ] do
20749: LD_ADDR_VAR 0 4
20753: PUSH
20754: LD_EXP 22
20758: PUSH
20759: LD_INT 3
20761: ARRAY
20762: PUSH
20763: FOR_IN
20764: IFFALSE 20797
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20766: LD_ADDR_VAR 0 7
20770: PUSH
20771: LD_VAR 0 7
20775: PUSH
20776: LD_VAR 0 4
20780: PUSH
20781: LD_INT 10
20783: PLUS
20784: PPUSH
20785: CALL_OW 110
20789: PUSH
20790: LD_INT 3
20792: DIV
20793: PLUS
20794: ST_TO_ADDR
20795: GO 20763
20797: POP
20798: POP
// for i in Teams [ 4 ] do
20799: LD_ADDR_VAR 0 4
20803: PUSH
20804: LD_EXP 22
20808: PUSH
20809: LD_INT 4
20811: ARRAY
20812: PUSH
20813: FOR_IN
20814: IFFALSE 20847
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20816: LD_ADDR_VAR 0 8
20820: PUSH
20821: LD_VAR 0 8
20825: PUSH
20826: LD_VAR 0 4
20830: PUSH
20831: LD_INT 10
20833: PLUS
20834: PPUSH
20835: CALL_OW 110
20839: PUSH
20840: LD_INT 3
20842: DIV
20843: PLUS
20844: ST_TO_ADDR
20845: GO 20813
20847: POP
20848: POP
// if your_side in Teams [ 1 ] then
20849: LD_OWVAR 2
20853: PUSH
20854: LD_EXP 22
20858: PUSH
20859: LD_INT 1
20861: ARRAY
20862: IN
20863: IFFALSE 20892
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20865: LD_ADDR_VAR 0 3
20869: PUSH
20870: LD_STRING #KingoftheHill-Public-red
20872: PUSH
20873: LD_INT 3
20875: PUSH
20876: LD_VAR 0 5
20880: PUSH
20881: LD_EXP 20
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
20892: LD_OWVAR 2
20896: PUSH
20897: LD_EXP 22
20901: PUSH
20902: LD_INT 2
20904: ARRAY
20905: IN
20906: IFFALSE 20935
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20908: LD_ADDR_VAR 0 3
20912: PUSH
20913: LD_STRING #KingoftheHill-Public-blue
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: LD_VAR 0 6
20923: PUSH
20924: LD_EXP 20
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
20935: LD_OWVAR 2
20939: PUSH
20940: LD_EXP 22
20944: PUSH
20945: LD_INT 3
20947: ARRAY
20948: IN
20949: IFFALSE 20978
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20951: LD_ADDR_VAR 0 3
20955: PUSH
20956: LD_STRING #KingoftheHill-Public-yell
20958: PUSH
20959: LD_INT 2
20961: PUSH
20962: LD_VAR 0 7
20966: PUSH
20967: LD_EXP 20
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
20978: LD_OWVAR 2
20982: PUSH
20983: LD_EXP 22
20987: PUSH
20988: LD_INT 4
20990: ARRAY
20991: IN
20992: IFFALSE 21021
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20994: LD_ADDR_VAR 0 3
20998: PUSH
20999: LD_STRING #KingoftheHill-Public-green
21001: PUSH
21002: LD_INT 7
21004: PUSH
21005: LD_VAR 0 8
21009: PUSH
21010: LD_EXP 20
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: ST_TO_ADDR
// end ; Display_kings := vypis ;
21021: LD_ADDR_EXP 68
21025: PUSH
21026: LD_VAR 0 3
21030: ST_TO_ADDR
// end ;
21031: LD_VAR 0 1
21035: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
21036: LD_INT 0
21038: PPUSH
21039: PPUSH
21040: PPUSH
21041: PPUSH
21042: PPUSH
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
// side := [ ] ;
21047: LD_ADDR_VAR 0 2
21051: PUSH
21052: EMPTY
21053: ST_TO_ADDR
// red = 0 ;
21054: LD_ADDR_VAR 0 5
21058: PUSH
21059: LD_INT 0
21061: ST_TO_ADDR
// blue = 0 ;
21062: LD_ADDR_VAR 0 6
21066: PUSH
21067: LD_INT 0
21069: ST_TO_ADDR
// yel = 0 ;
21070: LD_ADDR_VAR 0 7
21074: PUSH
21075: LD_INT 0
21077: ST_TO_ADDR
// green = 0 ;
21078: LD_ADDR_VAR 0 8
21082: PUSH
21083: LD_INT 0
21085: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
21086: LD_ADDR_VAR 0 3
21090: PUSH
21091: LD_INT 19
21093: PPUSH
21094: LD_INT 21
21096: PUSH
21097: LD_INT 3
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 53
21106: PUSH
21107: EMPTY
21108: LIST
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PPUSH
21114: CALL_OW 70
21118: ST_TO_ADDR
// for un in list do
21119: LD_ADDR_VAR 0 4
21123: PUSH
21124: LD_VAR 0 3
21128: PUSH
21129: FOR_IN
21130: IFFALSE 21155
// side := side union GetSide ( un ) ;
21132: LD_ADDR_VAR 0 2
21136: PUSH
21137: LD_VAR 0 2
21141: PUSH
21142: LD_VAR 0 4
21146: PPUSH
21147: CALL_OW 255
21151: UNION
21152: ST_TO_ADDR
21153: GO 21129
21155: POP
21156: POP
// if side <> 1 then
21157: LD_VAR 0 2
21161: PUSH
21162: LD_INT 1
21164: NONEQUAL
21165: IFFALSE 21169
// exit ;
21167: GO 21532
// side := side [ 1 ] ;
21169: LD_ADDR_VAR 0 2
21173: PUSH
21174: LD_VAR 0 2
21178: PUSH
21179: LD_INT 1
21181: ARRAY
21182: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
21183: LD_VAR 0 2
21187: PUSH
21188: LD_INT 10
21190: PLUS
21191: PPUSH
21192: LD_VAR 0 2
21196: PUSH
21197: LD_INT 10
21199: PLUS
21200: PPUSH
21201: CALL_OW 110
21205: PUSH
21206: LD_INT 1
21208: PLUS
21209: PPUSH
21210: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
21214: LD_VAR 0 2
21218: PPUSH
21219: LD_VAR 0 2
21223: PUSH
21224: LD_INT 10
21226: PLUS
21227: PPUSH
21228: CALL_OW 110
21232: PUSH
21233: LD_INT 3
21235: DIV
21236: PPUSH
21237: LD_INT 2
21239: PPUSH
21240: CALL 18098 0 3
// if not Team_Game then
21244: LD_EXP 25
21248: NOT
21249: IFFALSE 21532
// if GetTag ( side + 10 ) >= final_count * 3 then
21251: LD_VAR 0 2
21255: PUSH
21256: LD_INT 10
21258: PLUS
21259: PPUSH
21260: CALL_OW 110
21264: PUSH
21265: LD_EXP 20
21269: PUSH
21270: LD_INT 3
21272: MUL
21273: GREATEREQUAL
21274: IFFALSE 21281
// enable ( 3 ) else
21276: LD_INT 3
21278: ENABLE_MARKED
21279: GO 21532
// begin for i in Teams [ 1 ] do
21281: LD_ADDR_VAR 0 9
21285: PUSH
21286: LD_EXP 22
21290: PUSH
21291: LD_INT 1
21293: ARRAY
21294: PUSH
21295: FOR_IN
21296: IFFALSE 21329
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21298: LD_ADDR_VAR 0 5
21302: PUSH
21303: LD_VAR 0 5
21307: PUSH
21308: LD_VAR 0 9
21312: PUSH
21313: LD_INT 10
21315: PLUS
21316: PPUSH
21317: CALL_OW 110
21321: PUSH
21322: LD_INT 3
21324: DIV
21325: PLUS
21326: ST_TO_ADDR
21327: GO 21295
21329: POP
21330: POP
// for i in Teams [ 2 ] do
21331: LD_ADDR_VAR 0 9
21335: PUSH
21336: LD_EXP 22
21340: PUSH
21341: LD_INT 2
21343: ARRAY
21344: PUSH
21345: FOR_IN
21346: IFFALSE 21379
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21348: LD_ADDR_VAR 0 6
21352: PUSH
21353: LD_VAR 0 6
21357: PUSH
21358: LD_VAR 0 9
21362: PUSH
21363: LD_INT 10
21365: PLUS
21366: PPUSH
21367: CALL_OW 110
21371: PUSH
21372: LD_INT 3
21374: DIV
21375: PLUS
21376: ST_TO_ADDR
21377: GO 21345
21379: POP
21380: POP
// for i in Teams [ 3 ] do
21381: LD_ADDR_VAR 0 9
21385: PUSH
21386: LD_EXP 22
21390: PUSH
21391: LD_INT 3
21393: ARRAY
21394: PUSH
21395: FOR_IN
21396: IFFALSE 21429
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21398: LD_ADDR_VAR 0 7
21402: PUSH
21403: LD_VAR 0 7
21407: PUSH
21408: LD_VAR 0 9
21412: PUSH
21413: LD_INT 10
21415: PLUS
21416: PPUSH
21417: CALL_OW 110
21421: PUSH
21422: LD_INT 3
21424: DIV
21425: PLUS
21426: ST_TO_ADDR
21427: GO 21395
21429: POP
21430: POP
// for i in Teams [ 4 ] do
21431: LD_ADDR_VAR 0 9
21435: PUSH
21436: LD_EXP 22
21440: PUSH
21441: LD_INT 4
21443: ARRAY
21444: PUSH
21445: FOR_IN
21446: IFFALSE 21479
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21448: LD_ADDR_VAR 0 8
21452: PUSH
21453: LD_VAR 0 8
21457: PUSH
21458: LD_VAR 0 9
21462: PUSH
21463: LD_INT 10
21465: PLUS
21466: PPUSH
21467: CALL_OW 110
21471: PUSH
21472: LD_INT 3
21474: DIV
21475: PLUS
21476: ST_TO_ADDR
21477: GO 21445
21479: POP
21480: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
21481: LD_VAR 0 5
21485: PUSH
21486: LD_EXP 20
21490: GREATEREQUAL
21491: PUSH
21492: LD_VAR 0 6
21496: PUSH
21497: LD_EXP 20
21501: GREATEREQUAL
21502: OR
21503: PUSH
21504: LD_VAR 0 7
21508: PUSH
21509: LD_EXP 20
21513: GREATEREQUAL
21514: OR
21515: PUSH
21516: LD_VAR 0 8
21520: PUSH
21521: LD_EXP 20
21525: GREATEREQUAL
21526: OR
21527: IFFALSE 21532
// enable ( 3 ) ;
21529: LD_INT 3
21531: ENABLE_MARKED
// end ; end ;
21532: LD_VAR 0 1
21536: RET
// every 0 0$1 marked 2 do
21537: GO 21539
21539: DISABLE
// begin count_king ;
21540: CALL 21036 0 0
// show_public_points ;
21544: CALL 19911 0 0
// enable ;
21548: ENABLE
// end ;
21549: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
21550: GO 21552
21552: DISABLE
21553: LD_INT 0
21555: PPUSH
21556: PPUSH
21557: PPUSH
21558: PPUSH
21559: PPUSH
21560: PPUSH
// begin win := [ ] ;
21561: LD_ADDR_LOC 35
21565: PUSH
21566: EMPTY
21567: ST_TO_ADDR
// red = 0 ;
21568: LD_ADDR_VAR 0 2
21572: PUSH
21573: LD_INT 0
21575: ST_TO_ADDR
// blue = 0 ;
21576: LD_ADDR_VAR 0 3
21580: PUSH
21581: LD_INT 0
21583: ST_TO_ADDR
// yel = 0 ;
21584: LD_ADDR_VAR 0 4
21588: PUSH
21589: LD_INT 0
21591: ST_TO_ADDR
// green = 0 ;
21592: LD_ADDR_VAR 0 5
21596: PUSH
21597: LD_INT 0
21599: ST_TO_ADDR
// if not Team_Game then
21600: LD_EXP 25
21604: NOT
21605: IFFALSE 21682
// begin for side = 1 to 8 do
21607: LD_ADDR_VAR 0 1
21611: PUSH
21612: DOUBLE
21613: LD_INT 1
21615: DEC
21616: ST_TO_ADDR
21617: LD_INT 8
21619: PUSH
21620: FOR_TO
21621: IFFALSE 21666
// if GetTag ( side + 10 ) >= final_count * 3 then
21623: LD_VAR 0 1
21627: PUSH
21628: LD_INT 10
21630: PLUS
21631: PPUSH
21632: CALL_OW 110
21636: PUSH
21637: LD_EXP 20
21641: PUSH
21642: LD_INT 3
21644: MUL
21645: GREATEREQUAL
21646: IFFALSE 21664
// win := win ^ side ;
21648: LD_ADDR_LOC 35
21652: PUSH
21653: LD_LOC 35
21657: PUSH
21658: LD_VAR 0 1
21662: ADD
21663: ST_TO_ADDR
21664: GO 21620
21666: POP
21667: POP
// if win then
21668: LD_LOC 35
21672: IFFALSE 21679
// enable ( 4 ) else
21674: LD_INT 4
21676: ENABLE_MARKED
21677: GO 21680
// enable ;
21679: ENABLE
// end else
21680: GO 21998
// begin for i in Teams [ 1 ] do
21682: LD_ADDR_VAR 0 6
21686: PUSH
21687: LD_EXP 22
21691: PUSH
21692: LD_INT 1
21694: ARRAY
21695: PUSH
21696: FOR_IN
21697: IFFALSE 21730
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21699: LD_ADDR_VAR 0 2
21703: PUSH
21704: LD_VAR 0 2
21708: PUSH
21709: LD_VAR 0 6
21713: PUSH
21714: LD_INT 10
21716: PLUS
21717: PPUSH
21718: CALL_OW 110
21722: PUSH
21723: LD_INT 3
21725: DIV
21726: PLUS
21727: ST_TO_ADDR
21728: GO 21696
21730: POP
21731: POP
// for i in Teams [ 2 ] do
21732: LD_ADDR_VAR 0 6
21736: PUSH
21737: LD_EXP 22
21741: PUSH
21742: LD_INT 2
21744: ARRAY
21745: PUSH
21746: FOR_IN
21747: IFFALSE 21780
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21749: LD_ADDR_VAR 0 3
21753: PUSH
21754: LD_VAR 0 3
21758: PUSH
21759: LD_VAR 0 6
21763: PUSH
21764: LD_INT 10
21766: PLUS
21767: PPUSH
21768: CALL_OW 110
21772: PUSH
21773: LD_INT 3
21775: DIV
21776: PLUS
21777: ST_TO_ADDR
21778: GO 21746
21780: POP
21781: POP
// for i in Teams [ 3 ] do
21782: LD_ADDR_VAR 0 6
21786: PUSH
21787: LD_EXP 22
21791: PUSH
21792: LD_INT 3
21794: ARRAY
21795: PUSH
21796: FOR_IN
21797: IFFALSE 21830
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21799: LD_ADDR_VAR 0 4
21803: PUSH
21804: LD_VAR 0 4
21808: PUSH
21809: LD_VAR 0 6
21813: PUSH
21814: LD_INT 10
21816: PLUS
21817: PPUSH
21818: CALL_OW 110
21822: PUSH
21823: LD_INT 3
21825: DIV
21826: PLUS
21827: ST_TO_ADDR
21828: GO 21796
21830: POP
21831: POP
// for i in Teams [ 4 ] do
21832: LD_ADDR_VAR 0 6
21836: PUSH
21837: LD_EXP 22
21841: PUSH
21842: LD_INT 4
21844: ARRAY
21845: PUSH
21846: FOR_IN
21847: IFFALSE 21880
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21849: LD_ADDR_VAR 0 5
21853: PUSH
21854: LD_VAR 0 5
21858: PUSH
21859: LD_VAR 0 6
21863: PUSH
21864: LD_INT 10
21866: PLUS
21867: PPUSH
21868: CALL_OW 110
21872: PUSH
21873: LD_INT 3
21875: DIV
21876: PLUS
21877: ST_TO_ADDR
21878: GO 21846
21880: POP
21881: POP
// if red >= final_count then
21882: LD_VAR 0 2
21886: PUSH
21887: LD_EXP 20
21891: GREATEREQUAL
21892: IFFALSE 21908
// win = teams [ 1 ] ;
21894: LD_ADDR_LOC 35
21898: PUSH
21899: LD_EXP 22
21903: PUSH
21904: LD_INT 1
21906: ARRAY
21907: ST_TO_ADDR
// if blue >= final_count then
21908: LD_VAR 0 3
21912: PUSH
21913: LD_EXP 20
21917: GREATEREQUAL
21918: IFFALSE 21934
// win = teams [ 2 ] ;
21920: LD_ADDR_LOC 35
21924: PUSH
21925: LD_EXP 22
21929: PUSH
21930: LD_INT 2
21932: ARRAY
21933: ST_TO_ADDR
// if yel >= final_count then
21934: LD_VAR 0 4
21938: PUSH
21939: LD_EXP 20
21943: GREATEREQUAL
21944: IFFALSE 21960
// win = teams [ 3 ] ;
21946: LD_ADDR_LOC 35
21950: PUSH
21951: LD_EXP 22
21955: PUSH
21956: LD_INT 3
21958: ARRAY
21959: ST_TO_ADDR
// if green >= final_count then
21960: LD_VAR 0 5
21964: PUSH
21965: LD_EXP 20
21969: GREATEREQUAL
21970: IFFALSE 21986
// win = teams [ 4 ] ;
21972: LD_ADDR_LOC 35
21976: PUSH
21977: LD_EXP 22
21981: PUSH
21982: LD_INT 4
21984: ARRAY
21985: ST_TO_ADDR
// if win then
21986: LD_LOC 35
21990: IFFALSE 21997
// enable ( 4 ) else
21992: LD_INT 4
21994: ENABLE_MARKED
21995: GO 21998
// enable ;
21997: ENABLE
// end ; end ;
21998: PPOPN 6
22000: END
// every 0 0$1 marked 4 do
22001: GO 22003
22003: DISABLE
// begin if Player_Side in win then
22004: LD_EXP 27
22008: PUSH
22009: LD_LOC 35
22013: IN
22014: IFFALSE 22030
// begin wait ( 0 0$2 ) ;
22016: LD_INT 70
22018: PPUSH
22019: CALL_OW 67
// enable ( 401 ) ;
22023: LD_INT 401
22025: ENABLE_MARKED
// exit ;
22026: GO 22046
// end else
22028: GO 22046
// begin wait ( 0 0$2 ) ;
22030: LD_INT 70
22032: PPUSH
22033: CALL_OW 67
// Multiplayer_Loose_Message ;
22037: CALL_OW 521
// enable ( 400 ) ;
22041: LD_INT 400
22043: ENABLE_MARKED
// exit ;
22044: GO 22046
// end ; end ; end_of_file
22046: END
// export function SetMpTechs ( ) ; var side , i ; begin
22047: LD_INT 0
22049: PPUSH
22050: PPUSH
22051: PPUSH
// for side = 1 to 8 do
22052: LD_ADDR_VAR 0 2
22056: PUSH
22057: DOUBLE
22058: LD_INT 1
22060: DEC
22061: ST_TO_ADDR
22062: LD_INT 8
22064: PUSH
22065: FOR_TO
22066: IFFALSE 22187
// begin for i = 1 to 72 do
22068: LD_ADDR_VAR 0 3
22072: PUSH
22073: DOUBLE
22074: LD_INT 1
22076: DEC
22077: ST_TO_ADDR
22078: LD_INT 72
22080: PUSH
22081: FOR_TO
22082: IFFALSE 22113
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
22084: LD_VAR 0 3
22088: PPUSH
22089: LD_VAR 0 2
22093: PPUSH
22094: LD_INT 0
22096: PPUSH
22097: LD_VAR 0 3
22101: PPUSH
22102: CALL_OW 565
22106: PPUSH
22107: CALL_OW 322
22111: GO 22081
22113: POP
22114: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
22115: LD_INT 73
22117: PPUSH
22118: LD_VAR 0 2
22122: PPUSH
22123: LD_INT 0
22125: PPUSH
22126: LD_INT 25
22128: PPUSH
22129: CALL_OW 565
22133: PPUSH
22134: CALL_OW 322
// for i = 0 to 40 do
22138: LD_ADDR_VAR 0 3
22142: PUSH
22143: DOUBLE
22144: LD_INT 0
22146: DEC
22147: ST_TO_ADDR
22148: LD_INT 40
22150: PUSH
22151: FOR_TO
22152: IFFALSE 22183
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
22154: LD_VAR 0 3
22158: PPUSH
22159: LD_VAR 0 2
22163: PPUSH
22164: LD_INT 1
22166: PPUSH
22167: LD_VAR 0 3
22171: PPUSH
22172: CALL_OW 565
22176: PPUSH
22177: CALL_OW 324
22181: GO 22151
22183: POP
22184: POP
// end ;
22185: GO 22065
22187: POP
22188: POP
// end ;
22189: LD_VAR 0 1
22193: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
22194: LD_INT 0
22196: PPUSH
22197: PPUSH
22198: PPUSH
// for side = 1 to 8 do
22199: LD_ADDR_VAR 0 3
22203: PUSH
22204: DOUBLE
22205: LD_INT 1
22207: DEC
22208: ST_TO_ADDR
22209: LD_INT 8
22211: PUSH
22212: FOR_TO
22213: IFFALSE 26209
// begin for i = 1 to 73 do
22215: LD_ADDR_VAR 0 4
22219: PUSH
22220: DOUBLE
22221: LD_INT 1
22223: DEC
22224: ST_TO_ADDR
22225: LD_INT 73
22227: PUSH
22228: FOR_TO
22229: IFFALSE 22250
// SetTech ( i , side , state_disabled ) ;
22231: LD_VAR 0 4
22235: PPUSH
22236: LD_VAR 0 3
22240: PPUSH
22241: LD_INT 0
22243: PPUSH
22244: CALL_OW 322
22248: GO 22228
22250: POP
22251: POP
// for i = 0 to 40 do
22252: LD_ADDR_VAR 0 4
22256: PUSH
22257: DOUBLE
22258: LD_INT 0
22260: DEC
22261: ST_TO_ADDR
22262: LD_INT 40
22264: PUSH
22265: FOR_TO
22266: IFFALSE 22287
// SetRestrict ( i , side , false ) ;
22268: LD_VAR 0 4
22272: PPUSH
22273: LD_VAR 0 3
22277: PPUSH
22278: LD_INT 0
22280: PPUSH
22281: CALL_OW 324
22285: GO 22265
22287: POP
22288: POP
// case level of 1 :
22289: LD_VAR 0 1
22293: PUSH
22294: LD_INT 1
22296: DOUBLE
22297: EQUAL
22298: IFTRUE 22302
22300: GO 22455
22302: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22303: LD_INT 35
22305: PPUSH
22306: LD_VAR 0 3
22310: PPUSH
22311: LD_INT 1
22313: PPUSH
22314: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22318: LD_INT 45
22320: PPUSH
22321: LD_VAR 0 3
22325: PPUSH
22326: LD_INT 1
22328: PPUSH
22329: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22333: LD_INT 46
22335: PPUSH
22336: LD_VAR 0 3
22340: PPUSH
22341: LD_INT 1
22343: PPUSH
22344: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22348: LD_INT 47
22350: PPUSH
22351: LD_VAR 0 3
22355: PPUSH
22356: LD_INT 1
22358: PPUSH
22359: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22363: LD_INT 0
22365: PPUSH
22366: LD_VAR 0 3
22370: PPUSH
22371: LD_INT 1
22373: PPUSH
22374: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22378: LD_INT 2
22380: PPUSH
22381: LD_VAR 0 3
22385: PPUSH
22386: LD_INT 1
22388: PPUSH
22389: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22393: LD_INT 4
22395: PPUSH
22396: LD_VAR 0 3
22400: PPUSH
22401: LD_INT 1
22403: PPUSH
22404: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22408: LD_INT 6
22410: PPUSH
22411: LD_VAR 0 3
22415: PPUSH
22416: LD_INT 1
22418: PPUSH
22419: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22423: LD_INT 29
22425: PPUSH
22426: LD_VAR 0 3
22430: PPUSH
22431: LD_INT 1
22433: PPUSH
22434: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22438: LD_INT 31
22440: PPUSH
22441: LD_VAR 0 3
22445: PPUSH
22446: LD_INT 1
22448: PPUSH
22449: CALL_OW 324
// end ; 2 :
22453: GO 26207
22455: LD_INT 2
22457: DOUBLE
22458: EQUAL
22459: IFTRUE 22463
22461: GO 22661
22463: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22464: LD_INT 35
22466: PPUSH
22467: LD_VAR 0 3
22471: PPUSH
22472: LD_INT 1
22474: PPUSH
22475: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22479: LD_INT 45
22481: PPUSH
22482: LD_VAR 0 3
22486: PPUSH
22487: LD_INT 1
22489: PPUSH
22490: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22494: LD_INT 46
22496: PPUSH
22497: LD_VAR 0 3
22501: PPUSH
22502: LD_INT 1
22504: PPUSH
22505: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22509: LD_INT 47
22511: PPUSH
22512: LD_VAR 0 3
22516: PPUSH
22517: LD_INT 1
22519: PPUSH
22520: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22524: LD_INT 1
22526: PPUSH
22527: LD_VAR 0 3
22531: PPUSH
22532: LD_INT 1
22534: PPUSH
22535: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22539: LD_INT 2
22541: PPUSH
22542: LD_VAR 0 3
22546: PPUSH
22547: LD_INT 1
22549: PPUSH
22550: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22554: LD_INT 11
22556: PPUSH
22557: LD_VAR 0 3
22561: PPUSH
22562: LD_INT 1
22564: PPUSH
22565: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22569: LD_INT 0
22571: PPUSH
22572: LD_VAR 0 3
22576: PPUSH
22577: LD_INT 1
22579: PPUSH
22580: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22584: LD_INT 2
22586: PPUSH
22587: LD_VAR 0 3
22591: PPUSH
22592: LD_INT 1
22594: PPUSH
22595: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22599: LD_INT 4
22601: PPUSH
22602: LD_VAR 0 3
22606: PPUSH
22607: LD_INT 1
22609: PPUSH
22610: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22614: LD_INT 6
22616: PPUSH
22617: LD_VAR 0 3
22621: PPUSH
22622: LD_INT 1
22624: PPUSH
22625: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22629: LD_INT 29
22631: PPUSH
22632: LD_VAR 0 3
22636: PPUSH
22637: LD_INT 1
22639: PPUSH
22640: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22644: LD_INT 31
22646: PPUSH
22647: LD_VAR 0 3
22651: PPUSH
22652: LD_INT 1
22654: PPUSH
22655: CALL_OW 324
// end ; 3 :
22659: GO 26207
22661: LD_INT 3
22663: DOUBLE
22664: EQUAL
22665: IFTRUE 22669
22667: GO 23122
22669: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22670: LD_INT 35
22672: PPUSH
22673: LD_VAR 0 3
22677: PPUSH
22678: LD_INT 1
22680: PPUSH
22681: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22685: LD_INT 45
22687: PPUSH
22688: LD_VAR 0 3
22692: PPUSH
22693: LD_INT 1
22695: PPUSH
22696: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22700: LD_INT 46
22702: PPUSH
22703: LD_VAR 0 3
22707: PPUSH
22708: LD_INT 1
22710: PPUSH
22711: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22715: LD_INT 47
22717: PPUSH
22718: LD_VAR 0 3
22722: PPUSH
22723: LD_INT 1
22725: PPUSH
22726: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22730: LD_INT 1
22732: PPUSH
22733: LD_VAR 0 3
22737: PPUSH
22738: LD_INT 1
22740: PPUSH
22741: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22745: LD_INT 2
22747: PPUSH
22748: LD_VAR 0 3
22752: PPUSH
22753: LD_INT 1
22755: PPUSH
22756: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22760: LD_INT 11
22762: PPUSH
22763: LD_VAR 0 3
22767: PPUSH
22768: LD_INT 1
22770: PPUSH
22771: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22775: LD_INT 48
22777: PPUSH
22778: LD_VAR 0 3
22782: PPUSH
22783: LD_INT 1
22785: PPUSH
22786: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22790: LD_INT 69
22792: PPUSH
22793: LD_VAR 0 3
22797: PPUSH
22798: LD_INT 1
22800: PPUSH
22801: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22805: LD_INT 39
22807: PPUSH
22808: LD_VAR 0 3
22812: PPUSH
22813: LD_INT 1
22815: PPUSH
22816: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22820: LD_INT 43
22822: PPUSH
22823: LD_VAR 0 3
22827: PPUSH
22828: LD_INT 1
22830: PPUSH
22831: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22835: LD_INT 51
22837: PPUSH
22838: LD_VAR 0 3
22842: PPUSH
22843: LD_INT 1
22845: PPUSH
22846: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22850: LD_INT 6
22852: PPUSH
22853: LD_VAR 0 3
22857: PPUSH
22858: LD_INT 1
22860: PPUSH
22861: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22865: LD_INT 0
22867: PPUSH
22868: LD_VAR 0 3
22872: PPUSH
22873: LD_INT 1
22875: PPUSH
22876: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22880: LD_INT 2
22882: PPUSH
22883: LD_VAR 0 3
22887: PPUSH
22888: LD_INT 1
22890: PPUSH
22891: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22895: LD_INT 3
22897: PPUSH
22898: LD_VAR 0 3
22902: PPUSH
22903: LD_INT 1
22905: PPUSH
22906: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22910: LD_INT 4
22912: PPUSH
22913: LD_VAR 0 3
22917: PPUSH
22918: LD_INT 1
22920: PPUSH
22921: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22925: LD_INT 6
22927: PPUSH
22928: LD_VAR 0 3
22932: PPUSH
22933: LD_INT 1
22935: PPUSH
22936: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22940: LD_INT 7
22942: PPUSH
22943: LD_VAR 0 3
22947: PPUSH
22948: LD_INT 1
22950: PPUSH
22951: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22955: LD_INT 8
22957: PPUSH
22958: LD_VAR 0 3
22962: PPUSH
22963: LD_INT 1
22965: PPUSH
22966: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22970: LD_INT 10
22972: PPUSH
22973: LD_VAR 0 3
22977: PPUSH
22978: LD_INT 1
22980: PPUSH
22981: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22985: LD_INT 15
22987: PPUSH
22988: LD_VAR 0 3
22992: PPUSH
22993: LD_INT 1
22995: PPUSH
22996: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23000: LD_INT 16
23002: PPUSH
23003: LD_VAR 0 3
23007: PPUSH
23008: LD_INT 1
23010: PPUSH
23011: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23015: LD_INT 17
23017: PPUSH
23018: LD_VAR 0 3
23022: PPUSH
23023: LD_INT 1
23025: PPUSH
23026: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23030: LD_INT 20
23032: PPUSH
23033: LD_VAR 0 3
23037: PPUSH
23038: LD_INT 1
23040: PPUSH
23041: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23045: LD_INT 26
23047: PPUSH
23048: LD_VAR 0 3
23052: PPUSH
23053: LD_INT 1
23055: PPUSH
23056: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23060: LD_INT 27
23062: PPUSH
23063: LD_VAR 0 3
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23075: LD_INT 29
23077: PPUSH
23078: LD_VAR 0 3
23082: PPUSH
23083: LD_INT 1
23085: PPUSH
23086: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23090: LD_INT 31
23092: PPUSH
23093: LD_VAR 0 3
23097: PPUSH
23098: LD_INT 1
23100: PPUSH
23101: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23105: LD_INT 32
23107: PPUSH
23108: LD_VAR 0 3
23112: PPUSH
23113: LD_INT 1
23115: PPUSH
23116: CALL_OW 324
// end ; 4 :
23120: GO 26207
23122: LD_INT 4
23124: DOUBLE
23125: EQUAL
23126: IFTRUE 23130
23128: GO 24078
23130: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23131: LD_INT 35
23133: PPUSH
23134: LD_VAR 0 3
23138: PPUSH
23139: LD_INT 1
23141: PPUSH
23142: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23146: LD_INT 45
23148: PPUSH
23149: LD_VAR 0 3
23153: PPUSH
23154: LD_INT 1
23156: PPUSH
23157: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23161: LD_INT 46
23163: PPUSH
23164: LD_VAR 0 3
23168: PPUSH
23169: LD_INT 1
23171: PPUSH
23172: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23176: LD_INT 47
23178: PPUSH
23179: LD_VAR 0 3
23183: PPUSH
23184: LD_INT 1
23186: PPUSH
23187: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23191: LD_INT 1
23193: PPUSH
23194: LD_VAR 0 3
23198: PPUSH
23199: LD_INT 1
23201: PPUSH
23202: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23206: LD_INT 2
23208: PPUSH
23209: LD_VAR 0 3
23213: PPUSH
23214: LD_INT 1
23216: PPUSH
23217: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23221: LD_INT 11
23223: PPUSH
23224: LD_VAR 0 3
23228: PPUSH
23229: LD_INT 1
23231: PPUSH
23232: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23236: LD_INT 20
23238: PPUSH
23239: LD_VAR 0 3
23243: PPUSH
23244: LD_INT 1
23246: PPUSH
23247: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23251: LD_INT 48
23253: PPUSH
23254: LD_VAR 0 3
23258: PPUSH
23259: LD_INT 1
23261: PPUSH
23262: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23266: LD_INT 49
23268: PPUSH
23269: LD_VAR 0 3
23273: PPUSH
23274: LD_INT 1
23276: PPUSH
23277: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23281: LD_INT 69
23283: PPUSH
23284: LD_VAR 0 3
23288: PPUSH
23289: LD_INT 1
23291: PPUSH
23292: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23296: LD_INT 39
23298: PPUSH
23299: LD_VAR 0 3
23303: PPUSH
23304: LD_INT 1
23306: PPUSH
23307: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23311: LD_INT 34
23313: PPUSH
23314: LD_VAR 0 3
23318: PPUSH
23319: LD_INT 1
23321: PPUSH
23322: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23326: LD_INT 42
23328: PPUSH
23329: LD_VAR 0 3
23333: PPUSH
23334: LD_INT 1
23336: PPUSH
23337: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23341: LD_INT 44
23343: PPUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: LD_INT 1
23351: PPUSH
23352: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23356: LD_INT 41
23358: PPUSH
23359: LD_VAR 0 3
23363: PPUSH
23364: LD_INT 1
23366: PPUSH
23367: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23371: LD_INT 43
23373: PPUSH
23374: LD_VAR 0 3
23378: PPUSH
23379: LD_INT 1
23381: PPUSH
23382: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23386: LD_INT 70
23388: PPUSH
23389: LD_VAR 0 3
23393: PPUSH
23394: LD_INT 1
23396: PPUSH
23397: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23401: LD_INT 51
23403: PPUSH
23404: LD_VAR 0 3
23408: PPUSH
23409: LD_INT 1
23411: PPUSH
23412: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23416: LD_INT 52
23418: PPUSH
23419: LD_VAR 0 3
23423: PPUSH
23424: LD_INT 1
23426: PPUSH
23427: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23431: LD_INT 6
23433: PPUSH
23434: LD_VAR 0 3
23438: PPUSH
23439: LD_INT 1
23441: PPUSH
23442: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23446: LD_INT 15
23448: PPUSH
23449: LD_VAR 0 3
23453: PPUSH
23454: LD_INT 1
23456: PPUSH
23457: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23461: LD_INT 7
23463: PPUSH
23464: LD_VAR 0 3
23468: PPUSH
23469: LD_INT 1
23471: PPUSH
23472: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23476: LD_INT 12
23478: PPUSH
23479: LD_VAR 0 3
23483: PPUSH
23484: LD_INT 1
23486: PPUSH
23487: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23491: LD_INT 18
23493: PPUSH
23494: LD_VAR 0 3
23498: PPUSH
23499: LD_INT 1
23501: PPUSH
23502: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23506: LD_INT 60
23508: PPUSH
23509: LD_VAR 0 3
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23521: LD_INT 9
23523: PPUSH
23524: LD_VAR 0 3
23528: PPUSH
23529: LD_INT 1
23531: PPUSH
23532: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23536: LD_INT 30
23538: PPUSH
23539: LD_VAR 0 3
23543: PPUSH
23544: LD_INT 1
23546: PPUSH
23547: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23551: LD_INT 37
23553: PPUSH
23554: LD_VAR 0 3
23558: PPUSH
23559: LD_INT 1
23561: PPUSH
23562: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23566: LD_INT 5
23568: PPUSH
23569: LD_VAR 0 3
23573: PPUSH
23574: LD_INT 1
23576: PPUSH
23577: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23581: LD_INT 66
23583: PPUSH
23584: LD_VAR 0 3
23588: PPUSH
23589: LD_INT 1
23591: PPUSH
23592: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23596: LD_INT 21
23598: PPUSH
23599: LD_VAR 0 3
23603: PPUSH
23604: LD_INT 1
23606: PPUSH
23607: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23611: LD_INT 22
23613: PPUSH
23614: LD_VAR 0 3
23618: PPUSH
23619: LD_INT 1
23621: PPUSH
23622: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23626: LD_INT 54
23628: PPUSH
23629: LD_VAR 0 3
23633: PPUSH
23634: LD_INT 1
23636: PPUSH
23637: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23641: LD_INT 0
23643: PPUSH
23644: LD_VAR 0 3
23648: PPUSH
23649: LD_INT 1
23651: PPUSH
23652: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23656: LD_INT 1
23658: PPUSH
23659: LD_VAR 0 3
23663: PPUSH
23664: LD_INT 1
23666: PPUSH
23667: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23671: LD_INT 2
23673: PPUSH
23674: LD_VAR 0 3
23678: PPUSH
23679: LD_INT 1
23681: PPUSH
23682: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23686: LD_INT 3
23688: PPUSH
23689: LD_VAR 0 3
23693: PPUSH
23694: LD_INT 1
23696: PPUSH
23697: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23701: LD_INT 4
23703: PPUSH
23704: LD_VAR 0 3
23708: PPUSH
23709: LD_INT 1
23711: PPUSH
23712: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23716: LD_INT 5
23718: PPUSH
23719: LD_VAR 0 3
23723: PPUSH
23724: LD_INT 1
23726: PPUSH
23727: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23731: LD_INT 6
23733: PPUSH
23734: LD_VAR 0 3
23738: PPUSH
23739: LD_INT 1
23741: PPUSH
23742: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23746: LD_INT 7
23748: PPUSH
23749: LD_VAR 0 3
23753: PPUSH
23754: LD_INT 1
23756: PPUSH
23757: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23761: LD_INT 8
23763: PPUSH
23764: LD_VAR 0 3
23768: PPUSH
23769: LD_INT 1
23771: PPUSH
23772: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23776: LD_INT 10
23778: PPUSH
23779: LD_VAR 0 3
23783: PPUSH
23784: LD_INT 1
23786: PPUSH
23787: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23791: LD_INT 11
23793: PPUSH
23794: LD_VAR 0 3
23798: PPUSH
23799: LD_INT 1
23801: PPUSH
23802: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23806: LD_INT 12
23808: PPUSH
23809: LD_VAR 0 3
23813: PPUSH
23814: LD_INT 1
23816: PPUSH
23817: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23821: LD_INT 13
23823: PPUSH
23824: LD_VAR 0 3
23828: PPUSH
23829: LD_INT 1
23831: PPUSH
23832: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23836: LD_INT 14
23838: PPUSH
23839: LD_VAR 0 3
23843: PPUSH
23844: LD_INT 1
23846: PPUSH
23847: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23851: LD_INT 15
23853: PPUSH
23854: LD_VAR 0 3
23858: PPUSH
23859: LD_INT 1
23861: PPUSH
23862: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23866: LD_INT 16
23868: PPUSH
23869: LD_VAR 0 3
23873: PPUSH
23874: LD_INT 1
23876: PPUSH
23877: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23881: LD_INT 17
23883: PPUSH
23884: LD_VAR 0 3
23888: PPUSH
23889: LD_INT 1
23891: PPUSH
23892: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23896: LD_INT 19
23898: PPUSH
23899: LD_VAR 0 3
23903: PPUSH
23904: LD_INT 1
23906: PPUSH
23907: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23911: LD_INT 20
23913: PPUSH
23914: LD_VAR 0 3
23918: PPUSH
23919: LD_INT 1
23921: PPUSH
23922: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23926: LD_INT 21
23928: PPUSH
23929: LD_VAR 0 3
23933: PPUSH
23934: LD_INT 1
23936: PPUSH
23937: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23941: LD_INT 23
23943: PPUSH
23944: LD_VAR 0 3
23948: PPUSH
23949: LD_INT 1
23951: PPUSH
23952: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23956: LD_INT 26
23958: PPUSH
23959: LD_VAR 0 3
23963: PPUSH
23964: LD_INT 1
23966: PPUSH
23967: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23971: LD_INT 27
23973: PPUSH
23974: LD_VAR 0 3
23978: PPUSH
23979: LD_INT 1
23981: PPUSH
23982: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23986: LD_INT 28
23988: PPUSH
23989: LD_VAR 0 3
23993: PPUSH
23994: LD_INT 1
23996: PPUSH
23997: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
24001: LD_INT 29
24003: PPUSH
24004: LD_VAR 0 3
24008: PPUSH
24009: LD_INT 1
24011: PPUSH
24012: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24016: LD_INT 30
24018: PPUSH
24019: LD_VAR 0 3
24023: PPUSH
24024: LD_INT 1
24026: PPUSH
24027: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24031: LD_INT 31
24033: PPUSH
24034: LD_VAR 0 3
24038: PPUSH
24039: LD_INT 1
24041: PPUSH
24042: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24046: LD_INT 32
24048: PPUSH
24049: LD_VAR 0 3
24053: PPUSH
24054: LD_INT 1
24056: PPUSH
24057: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
24061: LD_INT 36
24063: PPUSH
24064: LD_VAR 0 3
24068: PPUSH
24069: LD_INT 1
24071: PPUSH
24072: CALL_OW 324
// end ; 5 :
24076: GO 26207
24078: LD_INT 5
24080: DOUBLE
24081: EQUAL
24082: IFTRUE 24086
24084: GO 25199
24086: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
24087: LD_INT 35
24089: PPUSH
24090: LD_VAR 0 3
24094: PPUSH
24095: LD_INT 1
24097: PPUSH
24098: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
24102: LD_INT 45
24104: PPUSH
24105: LD_VAR 0 3
24109: PPUSH
24110: LD_INT 1
24112: PPUSH
24113: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
24117: LD_INT 46
24119: PPUSH
24120: LD_VAR 0 3
24124: PPUSH
24125: LD_INT 1
24127: PPUSH
24128: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
24132: LD_INT 47
24134: PPUSH
24135: LD_VAR 0 3
24139: PPUSH
24140: LD_INT 1
24142: PPUSH
24143: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
24147: LD_INT 1
24149: PPUSH
24150: LD_VAR 0 3
24154: PPUSH
24155: LD_INT 1
24157: PPUSH
24158: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
24162: LD_INT 2
24164: PPUSH
24165: LD_VAR 0 3
24169: PPUSH
24170: LD_INT 1
24172: PPUSH
24173: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
24177: LD_INT 11
24179: PPUSH
24180: LD_VAR 0 3
24184: PPUSH
24185: LD_INT 1
24187: PPUSH
24188: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24192: LD_INT 20
24194: PPUSH
24195: LD_VAR 0 3
24199: PPUSH
24200: LD_INT 1
24202: PPUSH
24203: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24207: LD_INT 48
24209: PPUSH
24210: LD_VAR 0 3
24214: PPUSH
24215: LD_INT 1
24217: PPUSH
24218: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24222: LD_INT 49
24224: PPUSH
24225: LD_VAR 0 3
24229: PPUSH
24230: LD_INT 1
24232: PPUSH
24233: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24237: LD_INT 69
24239: PPUSH
24240: LD_VAR 0 3
24244: PPUSH
24245: LD_INT 1
24247: PPUSH
24248: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24252: LD_INT 39
24254: PPUSH
24255: LD_VAR 0 3
24259: PPUSH
24260: LD_INT 1
24262: PPUSH
24263: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24267: LD_INT 34
24269: PPUSH
24270: LD_VAR 0 3
24274: PPUSH
24275: LD_INT 1
24277: PPUSH
24278: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24282: LD_INT 42
24284: PPUSH
24285: LD_VAR 0 3
24289: PPUSH
24290: LD_INT 1
24292: PPUSH
24293: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24297: LD_INT 44
24299: PPUSH
24300: LD_VAR 0 3
24304: PPUSH
24305: LD_INT 1
24307: PPUSH
24308: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24312: LD_INT 41
24314: PPUSH
24315: LD_VAR 0 3
24319: PPUSH
24320: LD_INT 1
24322: PPUSH
24323: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24327: LD_INT 40
24329: PPUSH
24330: LD_VAR 0 3
24334: PPUSH
24335: LD_INT 1
24337: PPUSH
24338: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24342: LD_INT 43
24344: PPUSH
24345: LD_VAR 0 3
24349: PPUSH
24350: LD_INT 1
24352: PPUSH
24353: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24357: LD_INT 70
24359: PPUSH
24360: LD_VAR 0 3
24364: PPUSH
24365: LD_INT 1
24367: PPUSH
24368: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24372: LD_INT 51
24374: PPUSH
24375: LD_VAR 0 3
24379: PPUSH
24380: LD_INT 1
24382: PPUSH
24383: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24387: LD_INT 52
24389: PPUSH
24390: LD_VAR 0 3
24394: PPUSH
24395: LD_INT 1
24397: PPUSH
24398: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24402: LD_INT 6
24404: PPUSH
24405: LD_VAR 0 3
24409: PPUSH
24410: LD_INT 1
24412: PPUSH
24413: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24417: LD_INT 15
24419: PPUSH
24420: LD_VAR 0 3
24424: PPUSH
24425: LD_INT 1
24427: PPUSH
24428: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24432: LD_INT 7
24434: PPUSH
24435: LD_VAR 0 3
24439: PPUSH
24440: LD_INT 1
24442: PPUSH
24443: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24447: LD_INT 12
24449: PPUSH
24450: LD_VAR 0 3
24454: PPUSH
24455: LD_INT 1
24457: PPUSH
24458: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24462: LD_INT 17
24464: PPUSH
24465: LD_VAR 0 3
24469: PPUSH
24470: LD_INT 1
24472: PPUSH
24473: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24477: LD_INT 18
24479: PPUSH
24480: LD_VAR 0 3
24484: PPUSH
24485: LD_INT 1
24487: PPUSH
24488: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24492: LD_INT 60
24494: PPUSH
24495: LD_VAR 0 3
24499: PPUSH
24500: LD_INT 1
24502: PPUSH
24503: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24507: LD_INT 32
24509: PPUSH
24510: LD_VAR 0 3
24514: PPUSH
24515: LD_INT 1
24517: PPUSH
24518: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24522: LD_INT 9
24524: PPUSH
24525: LD_VAR 0 3
24529: PPUSH
24530: LD_INT 1
24532: PPUSH
24533: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24537: LD_INT 57
24539: PPUSH
24540: LD_VAR 0 3
24544: PPUSH
24545: LD_INT 1
24547: PPUSH
24548: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24552: LD_INT 30
24554: PPUSH
24555: LD_VAR 0 3
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24567: LD_INT 37
24569: PPUSH
24570: LD_VAR 0 3
24574: PPUSH
24575: LD_INT 1
24577: PPUSH
24578: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24582: LD_INT 63
24584: PPUSH
24585: LD_VAR 0 3
24589: PPUSH
24590: LD_INT 1
24592: PPUSH
24593: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24597: LD_INT 3
24599: PPUSH
24600: LD_VAR 0 3
24604: PPUSH
24605: LD_INT 1
24607: PPUSH
24608: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24612: LD_INT 4
24614: PPUSH
24615: LD_VAR 0 3
24619: PPUSH
24620: LD_INT 1
24622: PPUSH
24623: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24627: LD_INT 5
24629: PPUSH
24630: LD_VAR 0 3
24634: PPUSH
24635: LD_INT 1
24637: PPUSH
24638: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24642: LD_INT 66
24644: PPUSH
24645: LD_VAR 0 3
24649: PPUSH
24650: LD_INT 1
24652: PPUSH
24653: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24657: LD_INT 21
24659: PPUSH
24660: LD_VAR 0 3
24664: PPUSH
24665: LD_INT 1
24667: PPUSH
24668: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24672: LD_INT 22
24674: PPUSH
24675: LD_VAR 0 3
24679: PPUSH
24680: LD_INT 1
24682: PPUSH
24683: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24687: LD_INT 19
24689: PPUSH
24690: LD_VAR 0 3
24694: PPUSH
24695: LD_INT 1
24697: PPUSH
24698: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24702: LD_INT 54
24704: PPUSH
24705: LD_VAR 0 3
24709: PPUSH
24710: LD_INT 1
24712: PPUSH
24713: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24717: LD_INT 55
24719: PPUSH
24720: LD_VAR 0 3
24724: PPUSH
24725: LD_INT 1
24727: PPUSH
24728: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
24732: LD_INT 0
24734: PPUSH
24735: LD_VAR 0 3
24739: PPUSH
24740: LD_INT 1
24742: PPUSH
24743: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
24747: LD_INT 1
24749: PPUSH
24750: LD_VAR 0 3
24754: PPUSH
24755: LD_INT 1
24757: PPUSH
24758: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24762: LD_INT 2
24764: PPUSH
24765: LD_VAR 0 3
24769: PPUSH
24770: LD_INT 1
24772: PPUSH
24773: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24777: LD_INT 3
24779: PPUSH
24780: LD_VAR 0 3
24784: PPUSH
24785: LD_INT 1
24787: PPUSH
24788: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24792: LD_INT 4
24794: PPUSH
24795: LD_VAR 0 3
24799: PPUSH
24800: LD_INT 1
24802: PPUSH
24803: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24807: LD_INT 5
24809: PPUSH
24810: LD_VAR 0 3
24814: PPUSH
24815: LD_INT 1
24817: PPUSH
24818: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24822: LD_INT 6
24824: PPUSH
24825: LD_VAR 0 3
24829: PPUSH
24830: LD_INT 1
24832: PPUSH
24833: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24837: LD_INT 7
24839: PPUSH
24840: LD_VAR 0 3
24844: PPUSH
24845: LD_INT 1
24847: PPUSH
24848: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24852: LD_INT 8
24854: PPUSH
24855: LD_VAR 0 3
24859: PPUSH
24860: LD_INT 1
24862: PPUSH
24863: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24867: LD_INT 10
24869: PPUSH
24870: LD_VAR 0 3
24874: PPUSH
24875: LD_INT 1
24877: PPUSH
24878: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24882: LD_INT 11
24884: PPUSH
24885: LD_VAR 0 3
24889: PPUSH
24890: LD_INT 1
24892: PPUSH
24893: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24897: LD_INT 12
24899: PPUSH
24900: LD_VAR 0 3
24904: PPUSH
24905: LD_INT 1
24907: PPUSH
24908: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24912: LD_INT 13
24914: PPUSH
24915: LD_VAR 0 3
24919: PPUSH
24920: LD_INT 1
24922: PPUSH
24923: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24927: LD_INT 14
24929: PPUSH
24930: LD_VAR 0 3
24934: PPUSH
24935: LD_INT 1
24937: PPUSH
24938: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24942: LD_INT 15
24944: PPUSH
24945: LD_VAR 0 3
24949: PPUSH
24950: LD_INT 1
24952: PPUSH
24953: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24957: LD_INT 16
24959: PPUSH
24960: LD_VAR 0 3
24964: PPUSH
24965: LD_INT 1
24967: PPUSH
24968: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24972: LD_INT 17
24974: PPUSH
24975: LD_VAR 0 3
24979: PPUSH
24980: LD_INT 1
24982: PPUSH
24983: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24987: LD_INT 18
24989: PPUSH
24990: LD_VAR 0 3
24994: PPUSH
24995: LD_INT 1
24997: PPUSH
24998: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
25002: LD_INT 19
25004: PPUSH
25005: LD_VAR 0 3
25009: PPUSH
25010: LD_INT 1
25012: PPUSH
25013: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
25017: LD_INT 20
25019: PPUSH
25020: LD_VAR 0 3
25024: PPUSH
25025: LD_INT 1
25027: PPUSH
25028: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
25032: LD_INT 21
25034: PPUSH
25035: LD_VAR 0 3
25039: PPUSH
25040: LD_INT 1
25042: PPUSH
25043: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
25047: LD_INT 23
25049: PPUSH
25050: LD_VAR 0 3
25054: PPUSH
25055: LD_INT 1
25057: PPUSH
25058: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
25062: LD_INT 26
25064: PPUSH
25065: LD_VAR 0 3
25069: PPUSH
25070: LD_INT 1
25072: PPUSH
25073: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
25077: LD_INT 27
25079: PPUSH
25080: LD_VAR 0 3
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
25092: LD_INT 28
25094: PPUSH
25095: LD_VAR 0 3
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
25107: LD_INT 29
25109: PPUSH
25110: LD_VAR 0 3
25114: PPUSH
25115: LD_INT 1
25117: PPUSH
25118: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
25122: LD_INT 30
25124: PPUSH
25125: LD_VAR 0 3
25129: PPUSH
25130: LD_INT 1
25132: PPUSH
25133: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
25137: LD_INT 31
25139: PPUSH
25140: LD_VAR 0 3
25144: PPUSH
25145: LD_INT 1
25147: PPUSH
25148: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
25152: LD_INT 32
25154: PPUSH
25155: LD_VAR 0 3
25159: PPUSH
25160: LD_INT 1
25162: PPUSH
25163: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
25167: LD_INT 33
25169: PPUSH
25170: LD_VAR 0 3
25174: PPUSH
25175: LD_INT 1
25177: PPUSH
25178: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
25182: LD_INT 36
25184: PPUSH
25185: LD_VAR 0 3
25189: PPUSH
25190: LD_INT 1
25192: PPUSH
25193: CALL_OW 324
// end ; 6 :
25197: GO 26207
25199: LD_INT 6
25201: DOUBLE
25202: EQUAL
25203: IFTRUE 25207
25205: GO 26132
25207: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
25208: LD_INT 35
25210: PPUSH
25211: LD_VAR 0 3
25215: PPUSH
25216: LD_INT 1
25218: PPUSH
25219: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
25223: LD_INT 45
25225: PPUSH
25226: LD_VAR 0 3
25230: PPUSH
25231: LD_INT 1
25233: PPUSH
25234: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
25238: LD_INT 46
25240: PPUSH
25241: LD_VAR 0 3
25245: PPUSH
25246: LD_INT 1
25248: PPUSH
25249: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
25253: LD_INT 47
25255: PPUSH
25256: LD_VAR 0 3
25260: PPUSH
25261: LD_INT 1
25263: PPUSH
25264: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
25268: LD_INT 1
25270: PPUSH
25271: LD_VAR 0 3
25275: PPUSH
25276: LD_INT 1
25278: PPUSH
25279: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
25283: LD_INT 2
25285: PPUSH
25286: LD_VAR 0 3
25290: PPUSH
25291: LD_INT 1
25293: PPUSH
25294: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
25298: LD_INT 11
25300: PPUSH
25301: LD_VAR 0 3
25305: PPUSH
25306: LD_INT 1
25308: PPUSH
25309: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
25313: LD_INT 20
25315: PPUSH
25316: LD_VAR 0 3
25320: PPUSH
25321: LD_INT 1
25323: PPUSH
25324: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
25328: LD_INT 48
25330: PPUSH
25331: LD_VAR 0 3
25335: PPUSH
25336: LD_INT 1
25338: PPUSH
25339: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
25343: LD_INT 49
25345: PPUSH
25346: LD_VAR 0 3
25350: PPUSH
25351: LD_INT 1
25353: PPUSH
25354: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
25358: LD_INT 50
25360: PPUSH
25361: LD_VAR 0 3
25365: PPUSH
25366: LD_INT 1
25368: PPUSH
25369: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
25373: LD_INT 69
25375: PPUSH
25376: LD_VAR 0 3
25380: PPUSH
25381: LD_INT 1
25383: PPUSH
25384: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
25388: LD_INT 39
25390: PPUSH
25391: LD_VAR 0 3
25395: PPUSH
25396: LD_INT 1
25398: PPUSH
25399: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
25403: LD_INT 34
25405: PPUSH
25406: LD_VAR 0 3
25410: PPUSH
25411: LD_INT 1
25413: PPUSH
25414: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
25418: LD_INT 42
25420: PPUSH
25421: LD_VAR 0 3
25425: PPUSH
25426: LD_INT 1
25428: PPUSH
25429: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
25433: LD_INT 44
25435: PPUSH
25436: LD_VAR 0 3
25440: PPUSH
25441: LD_INT 1
25443: PPUSH
25444: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
25448: LD_INT 41
25450: PPUSH
25451: LD_VAR 0 3
25455: PPUSH
25456: LD_INT 1
25458: PPUSH
25459: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
25463: LD_INT 13
25465: PPUSH
25466: LD_VAR 0 3
25470: PPUSH
25471: LD_INT 1
25473: PPUSH
25474: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
25478: LD_INT 40
25480: PPUSH
25481: LD_VAR 0 3
25485: PPUSH
25486: LD_INT 1
25488: PPUSH
25489: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
25493: LD_INT 43
25495: PPUSH
25496: LD_VAR 0 3
25500: PPUSH
25501: LD_INT 1
25503: PPUSH
25504: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
25508: LD_INT 70
25510: PPUSH
25511: LD_VAR 0 3
25515: PPUSH
25516: LD_INT 1
25518: PPUSH
25519: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
25523: LD_INT 23
25525: PPUSH
25526: LD_VAR 0 3
25530: PPUSH
25531: LD_INT 1
25533: PPUSH
25534: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
25538: LD_INT 51
25540: PPUSH
25541: LD_VAR 0 3
25545: PPUSH
25546: LD_INT 1
25548: PPUSH
25549: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
25553: LD_INT 52
25555: PPUSH
25556: LD_VAR 0 3
25560: PPUSH
25561: LD_INT 1
25563: PPUSH
25564: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
25568: LD_INT 6
25570: PPUSH
25571: LD_VAR 0 3
25575: PPUSH
25576: LD_INT 1
25578: PPUSH
25579: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
25583: LD_INT 15
25585: PPUSH
25586: LD_VAR 0 3
25590: PPUSH
25591: LD_INT 1
25593: PPUSH
25594: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
25598: LD_INT 7
25600: PPUSH
25601: LD_VAR 0 3
25605: PPUSH
25606: LD_INT 1
25608: PPUSH
25609: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
25613: LD_INT 12
25615: PPUSH
25616: LD_VAR 0 3
25620: PPUSH
25621: LD_INT 1
25623: PPUSH
25624: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
25628: LD_INT 10
25630: PPUSH
25631: LD_VAR 0 3
25635: PPUSH
25636: LD_INT 1
25638: PPUSH
25639: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
25643: LD_INT 17
25645: PPUSH
25646: LD_VAR 0 3
25650: PPUSH
25651: LD_INT 1
25653: PPUSH
25654: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
25658: LD_INT 18
25660: PPUSH
25661: LD_VAR 0 3
25665: PPUSH
25666: LD_INT 1
25668: PPUSH
25669: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
25673: LD_INT 60
25675: PPUSH
25676: LD_VAR 0 3
25680: PPUSH
25681: LD_INT 1
25683: PPUSH
25684: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
25688: LD_INT 61
25690: PPUSH
25691: LD_VAR 0 3
25695: PPUSH
25696: LD_INT 1
25698: PPUSH
25699: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
25703: LD_INT 32
25705: PPUSH
25706: LD_VAR 0 3
25710: PPUSH
25711: LD_INT 1
25713: PPUSH
25714: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
25718: LD_INT 27
25720: PPUSH
25721: LD_VAR 0 3
25725: PPUSH
25726: LD_INT 1
25728: PPUSH
25729: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
25733: LD_INT 36
25735: PPUSH
25736: LD_VAR 0 3
25740: PPUSH
25741: LD_INT 1
25743: PPUSH
25744: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
25748: LD_INT 33
25750: PPUSH
25751: LD_VAR 0 3
25755: PPUSH
25756: LD_INT 1
25758: PPUSH
25759: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25763: LD_INT 9
25765: PPUSH
25766: LD_VAR 0 3
25770: PPUSH
25771: LD_INT 1
25773: PPUSH
25774: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25778: LD_INT 38
25780: PPUSH
25781: LD_VAR 0 3
25785: PPUSH
25786: LD_INT 1
25788: PPUSH
25789: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25793: LD_INT 57
25795: PPUSH
25796: LD_VAR 0 3
25800: PPUSH
25801: LD_INT 1
25803: PPUSH
25804: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25808: LD_INT 58
25810: PPUSH
25811: LD_VAR 0 3
25815: PPUSH
25816: LD_INT 1
25818: PPUSH
25819: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25823: LD_INT 28
25825: PPUSH
25826: LD_VAR 0 3
25830: PPUSH
25831: LD_INT 1
25833: PPUSH
25834: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25838: LD_INT 29
25840: PPUSH
25841: LD_VAR 0 3
25845: PPUSH
25846: LD_INT 1
25848: PPUSH
25849: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25853: LD_INT 30
25855: PPUSH
25856: LD_VAR 0 3
25860: PPUSH
25861: LD_INT 1
25863: PPUSH
25864: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25868: LD_INT 37
25870: PPUSH
25871: LD_VAR 0 3
25875: PPUSH
25876: LD_INT 1
25878: PPUSH
25879: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25883: LD_INT 63
25885: PPUSH
25886: LD_VAR 0 3
25890: PPUSH
25891: LD_INT 1
25893: PPUSH
25894: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25898: LD_INT 64
25900: PPUSH
25901: LD_VAR 0 3
25905: PPUSH
25906: LD_INT 1
25908: PPUSH
25909: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25913: LD_INT 3
25915: PPUSH
25916: LD_VAR 0 3
25920: PPUSH
25921: LD_INT 1
25923: PPUSH
25924: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25928: LD_INT 4
25930: PPUSH
25931: LD_VAR 0 3
25935: PPUSH
25936: LD_INT 1
25938: PPUSH
25939: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25943: LD_INT 5
25945: PPUSH
25946: LD_VAR 0 3
25950: PPUSH
25951: LD_INT 1
25953: PPUSH
25954: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25958: LD_INT 8
25960: PPUSH
25961: LD_VAR 0 3
25965: PPUSH
25966: LD_INT 1
25968: PPUSH
25969: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25973: LD_INT 66
25975: PPUSH
25976: LD_VAR 0 3
25980: PPUSH
25981: LD_INT 1
25983: PPUSH
25984: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25988: LD_INT 67
25990: PPUSH
25991: LD_VAR 0 3
25995: PPUSH
25996: LD_INT 1
25998: PPUSH
25999: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
26003: LD_INT 21
26005: PPUSH
26006: LD_VAR 0 3
26010: PPUSH
26011: LD_INT 1
26013: PPUSH
26014: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
26018: LD_INT 22
26020: PPUSH
26021: LD_VAR 0 3
26025: PPUSH
26026: LD_INT 1
26028: PPUSH
26029: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
26033: LD_INT 19
26035: PPUSH
26036: LD_VAR 0 3
26040: PPUSH
26041: LD_INT 1
26043: PPUSH
26044: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
26048: LD_INT 26
26050: PPUSH
26051: LD_VAR 0 3
26055: PPUSH
26056: LD_INT 1
26058: PPUSH
26059: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
26063: LD_INT 54
26065: PPUSH
26066: LD_VAR 0 3
26070: PPUSH
26071: LD_INT 1
26073: PPUSH
26074: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
26078: LD_INT 55
26080: PPUSH
26081: LD_VAR 0 3
26085: PPUSH
26086: LD_INT 1
26088: PPUSH
26089: CALL_OW 322
// for i = 0 to 39 do
26093: LD_ADDR_VAR 0 4
26097: PUSH
26098: DOUBLE
26099: LD_INT 0
26101: DEC
26102: ST_TO_ADDR
26103: LD_INT 39
26105: PUSH
26106: FOR_TO
26107: IFFALSE 26128
// SetRestrict ( i , side , true ) ;
26109: LD_VAR 0 4
26113: PPUSH
26114: LD_VAR 0 3
26118: PPUSH
26119: LD_INT 1
26121: PPUSH
26122: CALL_OW 324
26126: GO 26106
26128: POP
26129: POP
// end ; else
26130: GO 26207
26132: POP
// begin for i = 1 to 73 do
26133: LD_ADDR_VAR 0 4
26137: PUSH
26138: DOUBLE
26139: LD_INT 1
26141: DEC
26142: ST_TO_ADDR
26143: LD_INT 73
26145: PUSH
26146: FOR_TO
26147: IFFALSE 26168
// SetTech ( i , side , state_enabled ) ;
26149: LD_VAR 0 4
26153: PPUSH
26154: LD_VAR 0 3
26158: PPUSH
26159: LD_INT 1
26161: PPUSH
26162: CALL_OW 322
26166: GO 26146
26168: POP
26169: POP
// for i = 0 to 39 do
26170: LD_ADDR_VAR 0 4
26174: PUSH
26175: DOUBLE
26176: LD_INT 0
26178: DEC
26179: ST_TO_ADDR
26180: LD_INT 39
26182: PUSH
26183: FOR_TO
26184: IFFALSE 26205
// SetRestrict ( i , side , true ) ;
26186: LD_VAR 0 4
26190: PPUSH
26191: LD_VAR 0 3
26195: PPUSH
26196: LD_INT 1
26198: PPUSH
26199: CALL_OW 324
26203: GO 26183
26205: POP
26206: POP
// end ; end ; end ;
26207: GO 22212
26209: POP
26210: POP
// end ;
26211: LD_VAR 0 2
26215: RET
