// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 46
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 46
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 356: LD_ADDR_EXP 25
 360: PUSH
 361: LD_EXP 21
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: EMPTY
 370: LIST
 371: DIFF
 372: PUSH
 373: LD_INT 1
 375: GREATER
 376: ST_TO_ADDR
// if Multiplayer then
 377: LD_OWVAR 4
 381: IFFALSE 653
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 383: LD_ADDR_EXP 48
 387: PUSH
 388: LD_INT 0
 390: PPUSH
 391: CALL_OW 426
 395: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 396: LD_ADDR_EXP 49
 400: PUSH
 401: LD_INT 1
 403: PPUSH
 404: CALL_OW 426
 408: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 409: LD_ADDR_EXP 50
 413: PUSH
 414: LD_INT 2
 416: PPUSH
 417: CALL_OW 426
 421: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 422: LD_ADDR_EXP 51
 426: PUSH
 427: LD_INT 3
 429: PPUSH
 430: CALL_OW 426
 434: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 435: LD_ADDR_EXP 52
 439: PUSH
 440: LD_INT 4
 442: PPUSH
 443: CALL_OW 426
 447: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 448: LD_ADDR_EXP 53
 452: PUSH
 453: LD_INT 5
 455: PPUSH
 456: CALL_OW 426
 460: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 461: LD_ADDR_EXP 55
 465: PUSH
 466: LD_INT 10
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 474: LD_ADDR_EXP 56
 478: PUSH
 479: LD_INT 11
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 487: LD_ADDR_EXP 57
 491: PUSH
 492: LD_INT 12
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 500: LD_ADDR_EXP 59
 504: PUSH
 505: LD_INT 13
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 513: LD_ADDR_EXP 58
 517: PUSH
 518: LD_INT 14
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 526: LD_ADDR_EXP 60
 530: PUSH
 531: LD_INT 15
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 539: LD_ADDR_EXP 1
 543: PUSH
 544: LD_INT 6
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 552: LD_ADDR_EXP 2
 556: PUSH
 557: LD_INT 7
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 565: LD_ADDR_EXP 4
 569: PUSH
 570: LD_INT 8
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 578: LD_ADDR_EXP 3
 582: PUSH
 583: LD_INT 9
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 591: LD_ADDR_EXP 5
 595: PUSH
 596: LD_INT 16
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 604: LD_ADDR_EXP 6
 608: PUSH
 609: LD_INT 17
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 617: LD_ADDR_EXP 61
 621: PUSH
 622: LD_INT 20
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 630: LD_ADDR_VAR 0 3
 634: PUSH
 635: LD_INT 22
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_win_rules = 0 ;
 643: LD_ADDR_EXP 19
 647: PUSH
 648: LD_INT 0
 650: ST_TO_ADDR
// end else
 651: GO 825
// begin Randomize ;
 653: CALL_OW 10
// def_base_level := 2 ;
 657: LD_ADDR_EXP 48
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_amount_of_people := 10 ;
 665: LD_ADDR_EXP 49
 669: PUSH
 670: LD_INT 10
 672: ST_TO_ADDR
// def_skill_level := 1 ;
 673: LD_ADDR_EXP 50
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_starting_resources := 2 ;
 681: LD_ADDR_EXP 51
 685: PUSH
 686: LD_INT 2
 688: ST_TO_ADDR
// def_shipments_density := 50 ;
 689: LD_ADDR_EXP 52
 693: PUSH
 694: LD_INT 50
 696: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 697: LD_ADDR_EXP 53
 701: PUSH
 702: LD_INT 0
 704: ST_TO_ADDR
// def_shared_vision := 1 ;
 705: LD_ADDR_EXP 55
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_morale_flags := 1 ;
 713: LD_ADDR_EXP 56
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// def_siberite_detection := 1 ;
 721: LD_ADDR_EXP 57
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 729: LD_ADDR_EXP 59
 733: PUSH
 734: LD_INT 3
 736: ST_TO_ADDR
// def_people_respawning := 2 ;
 737: LD_ADDR_EXP 58
 741: PUSH
 742: LD_INT 2
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 60
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_artefact_one := 1 ;
 753: LD_ADDR_EXP 1
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_artefact_two := 1 ;
 761: LD_ADDR_EXP 2
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 769: LD_ADDR_EXP 4
 773: PUSH
 774: LD_INT 2
 776: ST_TO_ADDR
// def_artefact_three := 1 ;
 777: LD_ADDR_EXP 3
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// def_kings_age := 1 ;
 785: LD_ADDR_EXP 5
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_public_score := 0 ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 0
 800: ST_TO_ADDR
// def_builduptime := 1 ;
 801: LD_ADDR_EXP 61
 805: PUSH
 806: LD_INT 1
 808: ST_TO_ADDR
// tech_level = 4 ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// def_win_rules = 0 ;
 817: LD_ADDR_EXP 19
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// end ; InitGameRules ;
 825: CALL 12952 0 0
// if def_game_rules = 0 then
 829: LD_EXP 47
 833: PUSH
 834: LD_INT 0
 836: EQUAL
 837: IFFALSE 864
// begin if isSGUI then
 839: LD_OWVAR 83
 843: IFFALSE 851
// setMpTechs ( ) else
 845: CALL 20703 0 0
 849: GO 864
// begin SetMpTechLevel ( tech_level + 1 ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: PPUSH
 860: CALL 20850 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 864: LD_ADDR_EXP 7
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: LD_INT 1
 874: PUSH
 875: LD_INT 1
 877: PUSH
 878: LD_INT 1
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: PUSH
 887: LD_EXP 48
 891: PUSH
 892: LD_INT 1
 894: PLUS
 895: ARRAY
 896: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 897: LD_ADDR_EXP 8
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: LD_INT 2
 910: PUSH
 911: LD_INT 3
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_EXP 48
 924: PUSH
 925: LD_INT 1
 927: PLUS
 928: ARRAY
 929: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 930: LD_ADDR_EXP 9
 934: PUSH
 935: LD_EXP 49
 939: PUSH
 940: LD_INT 4
 942: PLUS
 943: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 944: LD_ADDR_EXP 10
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: LD_INT 3
 954: PUSH
 955: LD_INT 4
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: PUSH
 967: LD_EXP 50
 971: PUSH
 972: LD_INT 1
 974: PLUS
 975: ARRAY
 976: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 977: LD_ADDR_EXP 12
 981: PUSH
 982: LD_INT 0
 984: PUSH
 985: LD_INT 0
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 0
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 50
1012: PUSH
1013: LD_INT 20
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 40
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_EXP 51
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1054: LD_ADDR_EXP 11
1058: PUSH
1059: LD_INT 10
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: LD_INT 7
1067: PUSH
1068: LD_INT 14
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 6
1077: PUSH
1078: LD_INT 12
1080: PUSH
1081: LD_INT 18
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 5
1091: PUSH
1092: LD_INT 10
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_EXP 51
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: ARRAY
1122: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1123: LD_ADDR_EXP 13
1127: PUSH
1128: LD_INT 150
1130: PUSH
1131: LD_EXP 52
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: MINUS
1140: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1141: LD_ADDR_EXP 15
1145: PUSH
1146: LD_INT 0
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 2
1154: PUSH
1155: LD_INT 3
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 59
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1174: LD_ADDR_EXP 16
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 12600
1184: PUSH
1185: LD_INT 2100
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 58
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1203: LD_ADDR_EXP 17
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 21000
1213: PUSH
1214: LD_INT 4200
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_EXP 58
1226: PUSH
1227: LD_INT 1
1229: PLUS
1230: ARRAY
1231: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1232: LD_ADDR_EXP 14
1236: PUSH
1237: LD_INT 1
1239: NEG
1240: PUSH
1241: LD_INT 350
1243: PUSH
1244: LD_INT 700
1246: PUSH
1247: LD_INT 1400
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 56
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// battle_flags_id := [ ] ;
1270: LD_ADDR_EXP 33
1274: PUSH
1275: EMPTY
1276: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1277: LD_ADDR_EXP 18
1281: PUSH
1282: LD_INT 0
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 63000
1290: PUSH
1291: LD_INT 126000
1293: PUSH
1294: LD_INT 189000
1296: PUSH
1297: LD_INT 252000
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: PUSH
1308: LD_EXP 60
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1318: LD_ADDR_EXP 20
1322: PUSH
1323: LD_INT 500
1325: PUSH
1326: LD_INT 1000
1328: PUSH
1329: LD_INT 1500
1331: PUSH
1332: LD_INT 2000
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 5
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1351: LD_EXP 60
1355: PUSH
1356: LD_INT 0
1358: EQUAL
1359: IFFALSE 1371
// siberite_bomb_Delay = 0 else
1361: LD_ADDR_EXP 18
1365: PUSH
1366: LD_INT 0
1368: ST_TO_ADDR
1369: GO 1393
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1371: LD_ADDR_EXP 18
1375: PUSH
1376: LD_EXP 60
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: LD_INT 21000
1387: MUL
1388: PUSH
1389: LD_INT 1
1391: PLUS
1392: ST_TO_ADDR
// end ;
1393: LD_VAR 0 1
1397: RET
// function init_map ; var i ; begin
1398: LD_INT 0
1400: PPUSH
1401: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1402: LD_ADDR_EXP 32
1406: PUSH
1407: LD_INT 43
1409: PUSH
1410: LD_INT 9
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 123
1419: PUSH
1420: LD_INT 10
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 113
1429: PUSH
1430: LD_INT 155
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PUSH
1437: LD_INT 186
1439: PUSH
1440: LD_INT 133
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1453: LD_ADDR_EXP 29
1457: PUSH
1458: LD_INT 18
1460: PUSH
1461: LD_INT 17
1463: PUSH
1464: LD_INT 2
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 156
1474: PUSH
1475: LD_INT 20
1477: PUSH
1478: LD_INT 3
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 83
1488: PUSH
1489: LD_INT 140
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 216
1502: PUSH
1503: LD_INT 143
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// for i in depot_def do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: LD_EXP 29
1529: PUSH
1530: FOR_IN
1531: IFFALSE 1605
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1533: LD_ADDR_EXP 31
1537: PUSH
1538: LD_EXP 31
1542: PUSH
1543: LD_VAR 0 2
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 2
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 6
1563: PPUSH
1564: CALL_OW 272
1568: PUSH
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 2
1576: ARRAY
1577: PPUSH
1578: LD_VAR 0 2
1582: PUSH
1583: LD_INT 3
1585: ARRAY
1586: PPUSH
1587: LD_INT 6
1589: PPUSH
1590: CALL_OW 273
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: ADD
1602: ST_TO_ADDR
1603: GO 1530
1605: POP
1606: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1607: LD_ADDR_EXP 30
1611: PUSH
1612: LD_INT 30
1614: PUSH
1615: LD_INT 36
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 44
1628: PUSH
1629: LD_INT 21
1631: PUSH
1632: LD_INT 4
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 43
1642: PUSH
1643: LD_INT 33
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 165
1661: PUSH
1662: LD_INT 34
1664: PUSH
1665: LD_INT 0
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 137
1675: PUSH
1676: LD_INT 18
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 153
1689: PUSH
1690: LD_INT 37
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 86
1708: PUSH
1709: LD_INT 120
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 105
1722: PUSH
1723: LD_INT 147
1725: PUSH
1726: LD_INT 4
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 68
1736: PUSH
1737: LD_INT 118
1739: PUSH
1740: LD_INT 2
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 199
1755: PUSH
1756: LD_INT 144
1758: PUSH
1759: LD_INT 1
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 207
1769: PUSH
1770: LD_INT 119
1772: PUSH
1773: LD_INT 3
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 195
1783: PUSH
1784: LD_INT 118
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: ST_TO_ADDR
// if def_extra_oil_deposits then
1806: LD_EXP 53
1810: IFFALSE 1854
// for i in extra_oil_deposits_locations do
1812: LD_ADDR_VAR 0 2
1816: PUSH
1817: LD_EXP 32
1821: PUSH
1822: FOR_IN
1823: IFFALSE 1852
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1825: LD_VAR 0 2
1829: PUSH
1830: LD_INT 1
1832: ARRAY
1833: PPUSH
1834: LD_VAR 0 2
1838: PUSH
1839: LD_INT 2
1841: ARRAY
1842: PPUSH
1843: LD_INT 2
1845: PPUSH
1846: CALL_OW 62
1850: GO 1822
1852: POP
1853: POP
// end ;
1854: LD_VAR 0 1
1858: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
1863: PPUSH
// if not Team_Game then
1864: LD_EXP 25
1868: NOT
1869: IFFALSE 1967
// begin for i = 1 to 8 do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_INT 8
1883: PUSH
1884: FOR_TO
1885: IFFALSE 1963
// for j = 1 to 8 do
1887: LD_ADDR_VAR 0 3
1891: PUSH
1892: DOUBLE
1893: LD_INT 1
1895: DEC
1896: ST_TO_ADDR
1897: LD_INT 8
1899: PUSH
1900: FOR_TO
1901: IFFALSE 1959
// if i <> j then
1903: LD_VAR 0 2
1907: PUSH
1908: LD_VAR 0 3
1912: NONEQUAL
1913: IFFALSE 1937
// SetAttitude ( i , j , att_neutral , true ) else
1915: LD_VAR 0 2
1919: PPUSH
1920: LD_VAR 0 3
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: CALL_OW 80
1935: GO 1957
// SetAttitude ( i , j , att_friend , true ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_VAR 0 3
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_INT 1
1952: PPUSH
1953: CALL_OW 80
1957: GO 1900
1959: POP
1960: POP
1961: GO 1884
1963: POP
1964: POP
// end else
1965: GO 2142
// begin if def_shared_vision then
1967: LD_EXP 55
1971: IFFALSE 2036
// begin for i in Teams do
1973: LD_ADDR_VAR 0 2
1977: PUSH
1978: LD_EXP 22
1982: PUSH
1983: FOR_IN
1984: IFFALSE 2034
// for j = 2 to i do
1986: LD_ADDR_VAR 0 3
1990: PUSH
1991: DOUBLE
1992: LD_INT 2
1994: DEC
1995: ST_TO_ADDR
1996: LD_VAR 0 2
2000: PUSH
2001: FOR_TO
2002: IFFALSE 2030
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2004: LD_VAR 0 2
2008: PUSH
2009: LD_VAR 0 3
2013: ARRAY
2014: PPUSH
2015: LD_VAR 0 2
2019: PUSH
2020: LD_INT 1
2022: ARRAY
2023: PPUSH
2024: CALL_OW 343
2028: GO 2001
2030: POP
2031: POP
2032: GO 1983
2034: POP
2035: POP
// end ; for i = 1 to 8 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_INT 1
2044: DEC
2045: ST_TO_ADDR
2046: LD_INT 8
2048: PUSH
2049: FOR_TO
2050: IFFALSE 2140
// for j = 1 to 8 do
2052: LD_ADDR_VAR 0 3
2056: PUSH
2057: DOUBLE
2058: LD_INT 1
2060: DEC
2061: ST_TO_ADDR
2062: LD_INT 8
2064: PUSH
2065: FOR_TO
2066: IFFALSE 2136
// if Side_Teams [ i ] = Side_Teams [ j ] then
2068: LD_EXP 21
2072: PUSH
2073: LD_VAR 0 2
2077: ARRAY
2078: PUSH
2079: LD_EXP 21
2083: PUSH
2084: LD_VAR 0 3
2088: ARRAY
2089: EQUAL
2090: IFFALSE 2114
// SetAttitude ( i , j , att_friend , true ) else
2092: LD_VAR 0 2
2096: PPUSH
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 1
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: CALL_OW 80
2112: GO 2134
// SetAttitude ( i , j , att_enemy , true ) ;
2114: LD_VAR 0 2
2118: PPUSH
2119: LD_VAR 0 3
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: CALL_OW 80
2134: GO 2065
2136: POP
2137: POP
2138: GO 2049
2140: POP
2141: POP
// end ; end ;
2142: LD_VAR 0 1
2146: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2147: LD_INT 0
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// result := [ ] ;
2153: LD_ADDR_VAR 0 7
2157: PUSH
2158: EMPTY
2159: ST_TO_ADDR
// for i := 1 to count do
2160: LD_ADDR_VAR 0 8
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_VAR 0 1
2174: PUSH
2175: FOR_TO
2176: IFFALSE 2594
// begin uc_direction := Rand ( 0 , 5 ) ;
2178: LD_ADDR_OWVAR 24
2182: PUSH
2183: LD_INT 0
2185: PPUSH
2186: LD_INT 5
2188: PPUSH
2189: CALL_OW 12
2193: ST_TO_ADDR
// if commander then
2194: LD_LOC 1
2198: IFFALSE 2307
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_OWVAR 19
2209: PUSH
2210: LD_OWVAR 20
2214: ARRAY
2215: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2216: LD_INT 1
2218: PPUSH
2219: LD_INT 2
2221: PPUSH
2222: CALL_OW 12
2226: PPUSH
2227: LD_VAR 0 2
2231: PPUSH
2232: LD_EXP 10
2236: PUSH
2237: LD_INT 2
2239: PLUS
2240: PPUSH
2241: CALL_OW 380
// hc_importance := 105 ;
2245: LD_ADDR_OWVAR 32
2249: PUSH
2250: LD_INT 105
2252: ST_TO_ADDR
// commander := false ;
2253: LD_ADDR_LOC 1
2257: PUSH
2258: LD_INT 0
2260: ST_TO_ADDR
// if Multiplayer then
2261: LD_OWVAR 4
2265: IFFALSE 2305
// begin hc_gallery := MULTIAVATARS ;
2267: LD_ADDR_OWVAR 33
2271: PUSH
2272: LD_STRING MULTIAVATARS
2274: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2275: LD_ADDR_OWVAR 34
2279: PUSH
2280: LD_OWVAR 20
2284: PPUSH
2285: CALL_OW 525
2289: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2290: LD_ADDR_OWVAR 27
2294: PUSH
2295: LD_OWVAR 20
2299: PPUSH
2300: CALL_OW 526
2304: ST_TO_ADDR
// end ; end else
2305: GO 2370
// begin hc_name :=  ;
2307: LD_ADDR_OWVAR 26
2311: PUSH
2312: LD_STRING 
2314: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2315: LD_INT 1
2317: PPUSH
2318: LD_INT 2
2320: PPUSH
2321: CALL_OW 12
2325: PPUSH
2326: LD_VAR 0 2
2330: PPUSH
2331: LD_EXP 10
2335: PPUSH
2336: CALL_OW 380
// hc_importance := 0 ;
2340: LD_ADDR_OWVAR 32
2344: PUSH
2345: LD_INT 0
2347: ST_TO_ADDR
// if Multiplayer then
2348: LD_OWVAR 4
2352: IFFALSE 2370
// begin hc_gallery :=  ;
2354: LD_ADDR_OWVAR 33
2358: PUSH
2359: LD_STRING 
2361: ST_TO_ADDR
// hc_face_number := 0 ;
2362: LD_ADDR_OWVAR 34
2366: PUSH
2367: LD_INT 0
2369: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2370: LD_ADDR_VAR 0 10
2374: PUSH
2375: CALL_OW 44
2379: ST_TO_ADDR
// if global_defined then
2380: LD_LOC 3
2384: IFFALSE 2524
// begin if ( cl = class_soldier ) then
2386: LD_VAR 0 2
2390: PUSH
2391: LD_INT 1
2393: EQUAL
2394: IFFALSE 2414
// j := i + soldiers_created else
2396: LD_ADDR_VAR 0 9
2400: PUSH
2401: LD_VAR 0 8
2405: PUSH
2406: LD_LOC 4
2410: PLUS
2411: ST_TO_ADDR
2412: GO 2424
// j := i ;
2414: LD_ADDR_VAR 0 9
2418: PUSH
2419: LD_VAR 0 8
2423: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2424: LD_LOC 2
2428: PUSH
2429: LD_VAR 0 2
2433: ARRAY
2434: PUSH
2435: LD_VAR 0 9
2439: ARRAY
2440: PPUSH
2441: LD_VAR 0 10
2445: PPUSH
2446: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2450: LD_VAR 0 10
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_LOC 2
2462: PUSH
2463: LD_VAR 0 2
2467: ARRAY
2468: PUSH
2469: LD_VAR 0 9
2473: ARRAY
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: CALL_OW 260
2482: PPUSH
2483: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2487: LD_VAR 0 10
2491: PPUSH
2492: LD_INT 1
2494: PPUSH
2495: LD_LOC 2
2499: PUSH
2500: LD_VAR 0 2
2504: ARRAY
2505: PUSH
2506: LD_VAR 0 9
2510: ARRAY
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 260
2519: PPUSH
2520: CALL_OW 239
// end ; if building then
2524: LD_VAR 0 6
2528: IFFALSE 2546
// PlaceHumanInUnit ( un , building ) else
2530: LD_VAR 0 10
2534: PPUSH
2535: LD_VAR 0 6
2539: PPUSH
2540: CALL_OW 52
2544: GO 2573
// PlaceUnitXYR ( un , x , y , r , false ) ;
2546: LD_VAR 0 10
2550: PPUSH
2551: LD_VAR 0 3
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 5
2565: PPUSH
2566: LD_INT 0
2568: PPUSH
2569: CALL_OW 50
// result := result ^ [ un ] ;
2573: LD_ADDR_VAR 0 7
2577: PUSH
2578: LD_VAR 0 7
2582: PUSH
2583: LD_VAR 0 10
2587: PUSH
2588: EMPTY
2589: LIST
2590: ADD
2591: ST_TO_ADDR
// end ;
2592: GO 2175
2594: POP
2595: POP
// if not global_defined then
2596: LD_LOC 3
2600: NOT
2601: IFFALSE 2679
// if ( global_units >= cl ) then
2603: LD_LOC 2
2607: PUSH
2608: LD_VAR 0 2
2612: GREATEREQUAL
2613: IFFALSE 2654
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2615: LD_ADDR_LOC 2
2619: PUSH
2620: LD_LOC 2
2624: PPUSH
2625: LD_VAR 0 2
2629: PPUSH
2630: LD_LOC 2
2634: PUSH
2635: LD_VAR 0 2
2639: ARRAY
2640: PUSH
2641: LD_VAR 0 7
2645: ADD
2646: PPUSH
2647: CALL_OW 1
2651: ST_TO_ADDR
2652: GO 2679
// global_units := Replace ( global_units , cl , result ) ;
2654: LD_ADDR_LOC 2
2658: PUSH
2659: LD_LOC 2
2663: PPUSH
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_VAR 0 7
2673: PPUSH
2674: CALL_OW 1
2678: ST_TO_ADDR
// if commander then
2679: LD_LOC 1
2683: IFFALSE 2730
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2685: LD_ADDR_EXP 34
2689: PUSH
2690: LD_EXP 34
2694: PPUSH
2695: LD_OWVAR 20
2699: PPUSH
2700: LD_EXP 34
2704: PUSH
2705: LD_OWVAR 20
2709: ARRAY
2710: PUSH
2711: LD_VAR 0 10
2715: ADD
2716: PPUSH
2717: CALL_OW 1
2721: ST_TO_ADDR
// commander := false ;
2722: LD_ADDR_LOC 1
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// end ; end ;
2730: LD_VAR 0 7
2734: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2735: LD_INT 0
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
2744: PPUSH
2745: PPUSH
// if side in [ 0 , 9 ] then
2746: LD_VAR 0 1
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 9
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: IN
2761: IFFALSE 2765
// exit ;
2763: GO 3840
// pos := Side_Positions [ side ] ;
2765: LD_ADDR_VAR 0 3
2769: PUSH
2770: LD_EXP 23
2774: PUSH
2775: LD_VAR 0 1
2779: ARRAY
2780: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2781: LD_ADDR_OWVAR 21
2785: PUSH
2786: LD_EXP 24
2790: PUSH
2791: LD_VAR 0 1
2795: ARRAY
2796: ST_TO_ADDR
// uc_side := side ;
2797: LD_ADDR_OWVAR 20
2801: PUSH
2802: LD_VAR 0 1
2806: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2807: LD_ADDR_VAR 0 4
2811: PUSH
2812: LD_EXP 29
2816: PUSH
2817: LD_VAR 0 3
2821: ARRAY
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2827: LD_ADDR_VAR 0 5
2831: PUSH
2832: LD_EXP 29
2836: PUSH
2837: LD_VAR 0 3
2841: ARRAY
2842: PUSH
2843: LD_INT 2
2845: ARRAY
2846: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2847: LD_ADDR_VAR 0 6
2851: PUSH
2852: LD_EXP 29
2856: PUSH
2857: LD_VAR 0 3
2861: ARRAY
2862: PUSH
2863: LD_INT 3
2865: ARRAY
2866: ST_TO_ADDR
// if is_depot then
2867: LD_EXP 7
2871: IFFALSE 3004
// begin bc_type = b_depot ;
2873: LD_ADDR_OWVAR 42
2877: PUSH
2878: LD_INT 0
2880: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2881: LD_ADDR_VAR 0 10
2885: PUSH
2886: LD_VAR 0 4
2890: PPUSH
2891: LD_VAR 0 5
2895: PPUSH
2896: LD_VAR 0 6
2900: PPUSH
2901: CALL_OW 47
2905: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2906: LD_VAR 0 10
2910: PPUSH
2911: LD_STRING @
2913: PUSH
2914: LD_VAR 0 1
2918: STR
2919: PPUSH
2920: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2924: LD_VAR 0 10
2928: PPUSH
2929: CALL_OW 274
2933: PPUSH
2934: LD_INT 1
2936: PPUSH
2937: LD_EXP 12
2941: PUSH
2942: LD_INT 1
2944: ARRAY
2945: PPUSH
2946: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2950: LD_VAR 0 10
2954: PPUSH
2955: CALL_OW 274
2959: PPUSH
2960: LD_INT 2
2962: PPUSH
2963: LD_EXP 12
2967: PUSH
2968: LD_INT 2
2970: ARRAY
2971: PPUSH
2972: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2976: LD_VAR 0 10
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 3
2988: PPUSH
2989: LD_EXP 12
2993: PUSH
2994: LD_INT 3
2996: ARRAY
2997: PPUSH
2998: CALL_OW 277
// end else
3002: GO 3148
// begin for i := 1 to 3 do
3004: LD_ADDR_VAR 0 7
3008: PUSH
3009: DOUBLE
3010: LD_INT 1
3012: DEC
3013: ST_TO_ADDR
3014: LD_INT 3
3016: PUSH
3017: FOR_TO
3018: IFFALSE 3146
// begin r := starting_resources [ i ] ;
3020: LD_ADDR_VAR 0 8
3024: PUSH
3025: LD_EXP 12
3029: PUSH
3030: LD_VAR 0 7
3034: ARRAY
3035: ST_TO_ADDR
// while r >= 10 do
3036: LD_VAR 0 8
3040: PUSH
3041: LD_INT 10
3043: GREATEREQUAL
3044: IFFALSE 3144
// if r > 50 then
3046: LD_VAR 0 8
3050: PUSH
3051: LD_INT 50
3053: GREATER
3054: IFFALSE 3100
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3056: LD_VAR 0 7
3060: PPUSH
3061: LD_INT 5
3063: PPUSH
3064: LD_VAR 0 4
3068: PPUSH
3069: LD_VAR 0 5
3073: PPUSH
3074: LD_INT 4
3076: PPUSH
3077: LD_INT 0
3079: PPUSH
3080: CALL_OW 60
// r := r - 50 ;
3084: LD_ADDR_VAR 0 8
3088: PUSH
3089: LD_VAR 0 8
3093: PUSH
3094: LD_INT 50
3096: MINUS
3097: ST_TO_ADDR
// end else
3098: GO 3142
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3100: LD_VAR 0 7
3104: PPUSH
3105: LD_VAR 0 8
3109: PUSH
3110: LD_INT 10
3112: DIV
3113: PPUSH
3114: LD_VAR 0 4
3118: PPUSH
3119: LD_VAR 0 5
3123: PPUSH
3124: LD_INT 4
3126: PPUSH
3127: LD_INT 0
3129: PPUSH
3130: CALL_OW 60
// r := 0 ;
3134: LD_ADDR_VAR 0 8
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// end ;
3142: GO 3036
// end ;
3144: GO 3017
3146: POP
3147: POP
// end ; for r in starting_crates do
3148: LD_ADDR_VAR 0 8
3152: PUSH
3153: LD_EXP 11
3157: PUSH
3158: FOR_IN
3159: IFFALSE 3191
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3161: LD_INT 1
3163: PPUSH
3164: LD_INT 5
3166: PPUSH
3167: LD_VAR 0 4
3171: PPUSH
3172: LD_VAR 0 5
3176: PPUSH
3177: LD_VAR 0 8
3181: PPUSH
3182: LD_INT 0
3184: PPUSH
3185: CALL_OW 60
3189: GO 3158
3191: POP
3192: POP
// if def_morale_flags then
3193: LD_EXP 56
3197: IFFALSE 3336
// begin x := start_def [ pos ] [ 1 ] ;
3199: LD_ADDR_VAR 0 4
3203: PUSH
3204: LD_EXP 31
3208: PUSH
3209: LD_VAR 0 3
3213: ARRAY
3214: PUSH
3215: LD_INT 1
3217: ARRAY
3218: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3219: LD_ADDR_VAR 0 5
3223: PUSH
3224: LD_EXP 31
3228: PUSH
3229: LD_VAR 0 3
3233: ARRAY
3234: PUSH
3235: LD_INT 2
3237: ARRAY
3238: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3239: LD_VAR 0 4
3243: PPUSH
3244: LD_VAR 0 5
3248: PPUSH
3249: LD_INT 12
3251: PPUSH
3252: LD_INT 2
3254: PPUSH
3255: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3259: LD_ADDR_EXP 33
3263: PUSH
3264: LD_EXP 33
3268: PUSH
3269: LD_VAR 0 1
3273: PPUSH
3274: LD_VAR 0 4
3278: PPUSH
3279: LD_VAR 0 5
3283: PPUSH
3284: LD_INT 1
3286: PUSH
3287: LD_INT 100
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: LD_INT 2
3296: PUSH
3297: LD_INT 50
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 20
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 20
3316: PUSH
3317: LD_INT 100
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PPUSH
3330: CALL_OW 418
3334: ADD
3335: ST_TO_ADDR
// end ; commander := true ;
3336: LD_ADDR_LOC 1
3340: PUSH
3341: LD_INT 1
3343: ST_TO_ADDR
// soldiers_created := 0 ;
3344: LD_ADDR_LOC 4
3348: PUSH
3349: LD_INT 0
3351: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3352: LD_ADDR_VAR 0 7
3356: PUSH
3357: DOUBLE
3358: LD_INT 1
3360: DEC
3361: ST_TO_ADDR
3362: LD_EXP 8
3366: PUSH
3367: FOR_TO
3368: IFFALSE 3521
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3370: LD_ADDR_VAR 0 4
3374: PUSH
3375: LD_EXP 30
3379: PUSH
3380: LD_VAR 0 3
3384: ARRAY
3385: PUSH
3386: LD_VAR 0 7
3390: ARRAY
3391: PUSH
3392: LD_INT 1
3394: ARRAY
3395: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3396: LD_ADDR_VAR 0 5
3400: PUSH
3401: LD_EXP 30
3405: PUSH
3406: LD_VAR 0 3
3410: ARRAY
3411: PUSH
3412: LD_VAR 0 7
3416: ARRAY
3417: PUSH
3418: LD_INT 2
3420: ARRAY
3421: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3422: LD_ADDR_VAR 0 6
3426: PUSH
3427: LD_EXP 30
3431: PUSH
3432: LD_VAR 0 3
3436: ARRAY
3437: PUSH
3438: LD_VAR 0 7
3442: ARRAY
3443: PUSH
3444: LD_INT 3
3446: ARRAY
3447: ST_TO_ADDR
// bc_type := b_breastwork ;
3448: LD_ADDR_OWVAR 42
3452: PUSH
3453: LD_INT 31
3455: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3456: LD_ADDR_VAR 0 9
3460: PUSH
3461: LD_VAR 0 4
3465: PPUSH
3466: LD_VAR 0 5
3470: PPUSH
3471: LD_VAR 0 6
3475: PPUSH
3476: CALL_OW 47
3480: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3481: LD_INT 1
3483: PPUSH
3484: LD_INT 1
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: LD_INT 0
3492: PPUSH
3493: LD_INT 0
3495: PPUSH
3496: LD_VAR 0 9
3500: PPUSH
3501: CALL 2147 0 6
// soldiers_created := soldiers_created + 1 ;
3505: LD_ADDR_LOC 4
3509: PUSH
3510: LD_LOC 4
3514: PUSH
3515: LD_INT 1
3517: PLUS
3518: ST_TO_ADDR
// end ;
3519: GO 3367
3521: POP
3522: POP
// x := start_def [ pos ] [ 1 ] ;
3523: LD_ADDR_VAR 0 4
3527: PUSH
3528: LD_EXP 31
3532: PUSH
3533: LD_VAR 0 3
3537: ARRAY
3538: PUSH
3539: LD_INT 1
3541: ARRAY
3542: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3543: LD_ADDR_VAR 0 5
3547: PUSH
3548: LD_EXP 31
3552: PUSH
3553: LD_VAR 0 3
3557: ARRAY
3558: PUSH
3559: LD_INT 2
3561: ARRAY
3562: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3563: LD_LOC 8
3567: PUSH
3568: LD_EXP 8
3572: MINUS
3573: PPUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_VAR 0 4
3581: PPUSH
3582: LD_VAR 0 5
3586: PPUSH
3587: LD_INT 5
3589: PPUSH
3590: LD_INT 0
3592: PPUSH
3593: CALL 2147 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3597: LD_LOC 5
3601: PPUSH
3602: LD_INT 2
3604: PPUSH
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_VAR 0 5
3614: PPUSH
3615: LD_INT 5
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL 2147 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3625: LD_LOC 7
3629: PPUSH
3630: LD_INT 3
3632: PPUSH
3633: LD_VAR 0 4
3637: PPUSH
3638: LD_VAR 0 5
3642: PPUSH
3643: LD_INT 5
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL 2147 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3653: LD_LOC 6
3657: PPUSH
3658: LD_INT 4
3660: PPUSH
3661: LD_VAR 0 4
3665: PPUSH
3666: LD_VAR 0 5
3670: PPUSH
3671: LD_INT 5
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL 2147 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3681: LD_EXP 57
3685: PUSH
3686: LD_INT 20
3688: PPUSH
3689: LD_VAR 0 1
3693: PPUSH
3694: CALL_OW 321
3698: PUSH
3699: LD_INT 1
3701: EQUAL
3702: AND
3703: IFFALSE 3720
// SetTech ( tech_SibDet , side , state_researched ) ;
3705: LD_INT 20
3707: PPUSH
3708: LD_VAR 0 1
3712: PPUSH
3713: LD_INT 2
3715: PPUSH
3716: CALL_OW 322
// if def_siberite_bomb = 1 then
3720: LD_EXP 60
3724: PUSH
3725: LD_INT 1
3727: EQUAL
3728: IFFALSE 3762
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3730: LD_INT 25
3732: PPUSH
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 1
3740: PPUSH
3741: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3745: LD_INT 73
3747: PPUSH
3748: LD_VAR 0 1
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: CALL_OW 322
// end else
3760: GO 3792
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3762: LD_INT 25
3764: PPUSH
3765: LD_VAR 0 1
3769: PPUSH
3770: LD_INT 0
3772: PPUSH
3773: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3777: LD_INT 73
3779: PPUSH
3780: LD_VAR 0 1
3784: PPUSH
3785: LD_INT 0
3787: PPUSH
3788: CALL_OW 322
// end ; if Game_Type = 3 then
3792: LD_EXP 46
3796: PUSH
3797: LD_INT 3
3799: EQUAL
3800: IFFALSE 3817
// SetTech ( tech_partinvis , side , state_disabled ) ;
3802: LD_INT 16
3804: PPUSH
3805: LD_VAR 0 1
3809: PPUSH
3810: LD_INT 0
3812: PPUSH
3813: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3817: LD_INT 24
3819: PPUSH
3820: LD_VAR 0 1
3824: PPUSH
3825: LD_INT 1
3827: PPUSH
3828: CALL_OW 322
// global_defined := true ;
3832: LD_ADDR_LOC 3
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// end ;
3840: LD_VAR 0 2
3844: RET
// every 0 0$1 do
3845: GO 3847
3847: DISABLE
// if ( def_siberite_bomb > 1 ) then
3848: LD_EXP 60
3852: PUSH
3853: LD_INT 1
3855: GREATER
3856: IFFALSE 3871
// begin wait ( siberite_bomb_Delay ) ;
3858: LD_EXP 18
3862: PPUSH
3863: CALL_OW 67
// EnableSibFiss ;
3867: CALL 3872 0 0
// end ;
3871: END
// function EnableSibFiss ; var i ; begin
3872: LD_INT 0
3874: PPUSH
3875: PPUSH
// for i := 1 to 8 do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_INT 8
3888: PUSH
3889: FOR_TO
3890: IFFALSE 3936
// if Side_Positions [ i ] then
3892: LD_EXP 23
3896: PUSH
3897: LD_VAR 0 2
3901: ARRAY
3902: IFFALSE 3934
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3904: LD_INT 25
3906: PPUSH
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 1
3914: PPUSH
3915: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3919: LD_INT 73
3921: PPUSH
3922: LD_VAR 0 2
3926: PPUSH
3927: LD_INT 1
3929: PPUSH
3930: CALL_OW 322
// end ;
3934: GO 3889
3936: POP
3937: POP
// end ;
3938: LD_VAR 0 1
3942: RET
// function prepare_sides ; var i ; begin
3943: LD_INT 0
3945: PPUSH
3946: PPUSH
// global_units := [ ] ;
3947: LD_ADDR_LOC 2
3951: PUSH
3952: EMPTY
3953: ST_TO_ADDR
// global_defined := false ;
3954: LD_ADDR_LOC 3
3958: PUSH
3959: LD_INT 0
3961: ST_TO_ADDR
// CountClassMembers ;
3962: CALL 4012 0 0
// for i := 1 to 8 do
3966: LD_ADDR_VAR 0 2
3970: PUSH
3971: DOUBLE
3972: LD_INT 1
3974: DEC
3975: ST_TO_ADDR
3976: LD_INT 8
3978: PUSH
3979: FOR_TO
3980: IFFALSE 4005
// if Side_Positions [ i ] then
3982: LD_EXP 23
3986: PUSH
3987: LD_VAR 0 2
3991: ARRAY
3992: IFFALSE 4003
// prepare_side ( i ) ;
3994: LD_VAR 0 2
3998: PPUSH
3999: CALL 2735 0 1
4003: GO 3979
4005: POP
4006: POP
// end ;
4007: LD_VAR 0 1
4011: RET
// function CountClassMembers ; var Mode ; begin
4012: LD_INT 0
4014: PPUSH
4015: PPUSH
// if No_Mechs then
4016: LD_EXP 62
4020: IFFALSE 4032
// Mode := 2 else
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: LD_INT 2
4029: ST_TO_ADDR
4030: GO 4040
// Mode := 1 ;
4032: LD_ADDR_VAR 0 2
4036: PUSH
4037: LD_INT 1
4039: ST_TO_ADDR
// neng := number_of_people ;
4040: LD_ADDR_LOC 5
4044: PUSH
4045: LD_EXP 9
4049: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4050: LD_ADDR_LOC 8
4054: PUSH
4055: LD_LOC 5
4059: PUSH
4060: LD_INT 4
4062: PUSH
4063: LD_INT 3
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PUSH
4070: LD_VAR 0 2
4074: ARRAY
4075: DIV
4076: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4077: LD_LOC 8
4081: PUSH
4082: LD_EXP 8
4086: LESS
4087: IFFALSE 4099
// nsol := number_of_breastworks ;
4089: LD_ADDR_LOC 8
4093: PUSH
4094: LD_EXP 8
4098: ST_TO_ADDR
// neng := neng - nsol ;
4099: LD_ADDR_LOC 5
4103: PUSH
4104: LD_LOC 5
4108: PUSH
4109: LD_LOC 8
4113: MINUS
4114: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4115: LD_ADDR_LOC 6
4119: PUSH
4120: LD_LOC 5
4124: PUSH
4125: LD_INT 3
4127: PUSH
4128: LD_INT 2
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PUSH
4135: LD_VAR 0 2
4139: ARRAY
4140: DIV
4141: ST_TO_ADDR
// if ( nsci < 1 ) then
4142: LD_LOC 6
4146: PUSH
4147: LD_INT 1
4149: LESS
4150: IFFALSE 4160
// nsci := 1 ;
4152: LD_ADDR_LOC 6
4156: PUSH
4157: LD_INT 1
4159: ST_TO_ADDR
// neng := neng - nsci ;
4160: LD_ADDR_LOC 5
4164: PUSH
4165: LD_LOC 5
4169: PUSH
4170: LD_LOC 6
4174: MINUS
4175: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4176: LD_ADDR_LOC 7
4180: PUSH
4181: LD_LOC 5
4185: PUSH
4186: LD_INT 2
4188: DIV
4189: PUSH
4190: LD_INT 0
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PUSH
4197: LD_VAR 0 2
4201: ARRAY
4202: ST_TO_ADDR
// neng := neng - nmech ;
4203: LD_ADDR_LOC 5
4207: PUSH
4208: LD_LOC 5
4212: PUSH
4213: LD_LOC 7
4217: MINUS
4218: ST_TO_ADDR
// if ( neng < 1 ) then
4219: LD_LOC 5
4223: PUSH
4224: LD_INT 1
4226: LESS
4227: IFFALSE 4237
// neng := 1 ;
4229: LD_ADDR_LOC 5
4233: PUSH
4234: LD_INT 1
4236: ST_TO_ADDR
// end ;
4237: LD_VAR 0 1
4241: RET
// starting begin disable ( 1 ) ;
4242: LD_INT 1
4244: DISABLE_MARKED
// disable ( 2 ) ;
4245: LD_INT 2
4247: DISABLE_MARKED
// disable ( 3 ) ;
4248: LD_INT 3
4250: DISABLE_MARKED
// disable ( 4 ) ;
4251: LD_INT 4
4253: DISABLE_MARKED
// disable ( 5 ) ;
4254: LD_INT 5
4256: DISABLE_MARKED
// disable ( 6 ) ;
4257: LD_INT 6
4259: DISABLE_MARKED
// disable ( 7 ) ;
4260: LD_INT 7
4262: DISABLE_MARKED
// disable ( 10 ) ;
4263: LD_INT 10
4265: DISABLE_MARKED
// disable ( 20 ) ;
4266: LD_INT 20
4268: DISABLE_MARKED
// disable ( 98 ) ;
4269: LD_INT 98
4271: DISABLE_MARKED
// disable ( 99 ) ;
4272: LD_INT 99
4274: DISABLE_MARKED
// disable ( 400 ) ;
4275: LD_INT 400
4277: DISABLE_MARKED
// disable ( 401 ) ;
4278: LD_INT 401
4280: DISABLE_MARKED
// disable ( 600 ) ;
4281: LD_INT 600
4283: DISABLE_MARKED
// mp_selectmsg := true ;
4284: LD_ADDR_OWVAR 13
4288: PUSH
4289: LD_INT 1
4291: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4292: CALL 68 0 0
// init_map ;
4296: CALL 1398 0 0
// set_shared_visions_and_alliances ;
4300: CALL 1859 0 0
// ResetFog ;
4304: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4308: LD_OWVAR 2
4312: PPUSH
4313: CALL_OW 520
// prepare_sides ;
4317: CALL 3943 0 0
// init_respawning ;
4321: CALL 26869 0 0
// Init_Win_Condition ;
4325: CALL 17256 0 0
// InitLimits ;
4329: CALL 15084 0 0
// ShowTimer ;
4333: CALL 16021 0 0
// case Game_Type of 2 :
4337: LD_EXP 46
4341: PUSH
4342: LD_INT 2
4344: DOUBLE
4345: EQUAL
4346: IFTRUE 4350
4348: GO 4357
4350: POP
// init_alien_research ; 3 :
4351: CALL 6684 0 0
4355: GO 4377
4357: LD_INT 3
4359: DOUBLE
4360: EQUAL
4361: IFTRUE 4365
4363: GO 4376
4365: POP
// begin InitPoints ( ) ;
4366: CALL 16259 0 0
// init_kings_counting ;
4370: CALL 18551 0 0
// end ; end ;
4374: GO 4377
4376: POP
// music_nat := Side_Nations [ your_side ] ;
4377: LD_ADDR_OWVAR 71
4381: PUSH
4382: LD_EXP 24
4386: PUSH
4387: LD_OWVAR 2
4391: ARRAY
4392: ST_TO_ADDR
// if IAmSpec then
4393: CALL_OW 531
4397: IFFALSE 4421
// begin fogOff ( true ) ;
4399: LD_INT 1
4401: PPUSH
4402: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4406: LD_INT 119
4408: PPUSH
4409: LD_INT 79
4411: PPUSH
4412: CALL_OW 86
// enable ( 400 ) ;
4416: LD_INT 400
4418: ENABLE_MARKED
// end else
4419: GO 4467
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4421: LD_EXP 31
4425: PUSH
4426: LD_EXP 23
4430: PUSH
4431: LD_OWVAR 2
4435: ARRAY
4436: ARRAY
4437: PUSH
4438: LD_INT 1
4440: ARRAY
4441: PPUSH
4442: LD_EXP 31
4446: PUSH
4447: LD_EXP 23
4451: PUSH
4452: LD_OWVAR 2
4456: ARRAY
4457: ARRAY
4458: PUSH
4459: LD_INT 2
4461: ARRAY
4462: PPUSH
4463: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4467: LD_INT 1
4469: PPUSH
4470: CALL_OW 573
// InitApeman ;
4474: CALL 5159 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4478: LD_ADDR_EXP 66
4482: PUSH
4483: LD_INT 21
4485: PUSH
4486: LD_INT 23
4488: PUSH
4489: LD_INT 20
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: ST_TO_ADDR
// BeginBuildUp ;
4501: CALL 27363 0 0
// end ; end_of_file
4505: END
// every 1 1$0 + 0 0$0.3 do
4506: GO 4508
4508: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
4509: LD_INT 4
4511: PPUSH
4512: LD_INT 5
4514: PPUSH
4515: CALL_OW 12
4519: PPUSH
4520: LD_INT 25
4522: PPUSH
4523: LD_INT 1
4525: PPUSH
4526: CALL_OW 55
// enable ;
4530: ENABLE
// end ;
4531: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
// begin case tick of 1 .. 1 1$0 :
4539: LD_OWVAR 1
4543: PUSH
4544: LD_INT 1
4546: DOUBLE
4547: GREATEREQUAL
4548: IFFALSE 4556
4550: LD_INT 2100
4552: DOUBLE
4553: LESSEQUAL
4554: IFTRUE 4558
4556: GO 4586
4558: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4559: LD_EXP 13
4563: PUSH
4564: LD_INT 100
4566: DIVREAL
4567: PUSH
4568: LD_INT 525
4570: PPUSH
4571: LD_INT 1050
4573: PPUSH
4574: CALL_OW 12
4578: MUL
4579: PPUSH
4580: CALL_OW 67
4584: GO 4888
4586: LD_INT 2100
4588: PUSH
4589: LD_INT 1
4591: PLUS
4592: DOUBLE
4593: GREATEREQUAL
4594: IFFALSE 4602
4596: LD_INT 10500
4598: DOUBLE
4599: LESSEQUAL
4600: IFTRUE 4604
4602: GO 4632
4604: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4605: LD_EXP 13
4609: PUSH
4610: LD_INT 100
4612: DIVREAL
4613: PUSH
4614: LD_INT 1050
4616: PPUSH
4617: LD_INT 1750
4619: PPUSH
4620: CALL_OW 12
4624: MUL
4625: PPUSH
4626: CALL_OW 67
4630: GO 4888
4632: LD_INT 10500
4634: PUSH
4635: LD_INT 1
4637: PLUS
4638: DOUBLE
4639: GREATEREQUAL
4640: IFFALSE 4648
4642: LD_INT 21000
4644: DOUBLE
4645: LESSEQUAL
4646: IFTRUE 4650
4648: GO 4678
4650: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4651: LD_EXP 13
4655: PUSH
4656: LD_INT 100
4658: DIVREAL
4659: PUSH
4660: LD_INT 1750
4662: PPUSH
4663: LD_INT 2100
4665: PPUSH
4666: CALL_OW 12
4670: MUL
4671: PPUSH
4672: CALL_OW 67
4676: GO 4888
4678: LD_INT 21000
4680: PUSH
4681: LD_INT 1
4683: PLUS
4684: DOUBLE
4685: GREATEREQUAL
4686: IFFALSE 4694
4688: LD_INT 42000
4690: DOUBLE
4691: LESSEQUAL
4692: IFTRUE 4696
4694: GO 4724
4696: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4697: LD_EXP 13
4701: PUSH
4702: LD_INT 100
4704: DIVREAL
4705: PUSH
4706: LD_INT 2100
4708: PPUSH
4709: LD_INT 2275
4711: PPUSH
4712: CALL_OW 12
4716: MUL
4717: PPUSH
4718: CALL_OW 67
4722: GO 4888
4724: LD_INT 42000
4726: PUSH
4727: LD_INT 1
4729: PLUS
4730: DOUBLE
4731: GREATEREQUAL
4732: IFFALSE 4740
4734: LD_INT 63000
4736: DOUBLE
4737: LESSEQUAL
4738: IFTRUE 4742
4740: GO 4770
4742: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4743: LD_EXP 13
4747: PUSH
4748: LD_INT 100
4750: DIVREAL
4751: PUSH
4752: LD_INT 2275
4754: PPUSH
4755: LD_INT 2450
4757: PPUSH
4758: CALL_OW 12
4762: MUL
4763: PPUSH
4764: CALL_OW 67
4768: GO 4888
4770: LD_INT 63000
4772: PUSH
4773: LD_INT 1
4775: PLUS
4776: DOUBLE
4777: GREATEREQUAL
4778: IFFALSE 4786
4780: LD_INT 105000
4782: DOUBLE
4783: LESSEQUAL
4784: IFTRUE 4788
4786: GO 4816
4788: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4789: LD_EXP 13
4793: PUSH
4794: LD_INT 100
4796: DIVREAL
4797: PUSH
4798: LD_INT 2450
4800: PPUSH
4801: LD_INT 2800
4803: PPUSH
4804: CALL_OW 12
4808: MUL
4809: PPUSH
4810: CALL_OW 67
4814: GO 4888
4816: LD_INT 105000
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: DOUBLE
4823: GREATEREQUAL
4824: IFFALSE 4832
4826: LD_INT 630000
4828: DOUBLE
4829: LESSEQUAL
4830: IFTRUE 4834
4832: GO 4862
4834: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
4835: LD_EXP 13
4839: PUSH
4840: LD_INT 100
4842: DIVREAL
4843: PUSH
4844: LD_INT 2800
4846: PPUSH
4847: LD_INT 3500
4849: PPUSH
4850: CALL_OW 12
4854: MUL
4855: PPUSH
4856: CALL_OW 67
4860: GO 4888
4862: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
4863: LD_EXP 13
4867: PUSH
4868: LD_INT 100
4870: DIVREAL
4871: PUSH
4872: LD_INT 3500
4874: PPUSH
4875: LD_INT 3850
4877: PPUSH
4878: CALL_OW 12
4882: MUL
4883: PPUSH
4884: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
4888: LD_ADDR_VAR 0 2
4892: PUSH
4893: LD_INT 3
4895: PPUSH
4896: LD_INT 5
4898: PPUSH
4899: CALL_OW 12
4903: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
4904: LD_ADDR_VAR 0 1
4908: PUSH
4909: LD_EXP 23
4913: PUSH
4914: LD_INT 0
4916: PUSH
4917: EMPTY
4918: LIST
4919: DIFF
4920: PUSH
4921: FOR_IN
4922: IFFALSE 4962
// CreateCratesArea ( amount , [ north_west , north_east , south_west , south_east ] [ i ] , true ) ;
4924: LD_VAR 0 2
4928: PPUSH
4929: LD_INT 4
4931: PUSH
4932: LD_INT 5
4934: PUSH
4935: LD_INT 7
4937: PUSH
4938: LD_INT 6
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: PUSH
4947: LD_VAR 0 1
4951: ARRAY
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 55
4960: GO 4921
4962: POP
4963: POP
// enable ;
4964: ENABLE
// end ; end_of_file
4965: PPOPN 2
4967: END
// every 20 20$00 trigger apemanNumber do
4968: LD_EXP 35
4972: IFFALSE 5005
4974: GO 4976
4976: DISABLE
// begin enable ;
4977: ENABLE
// if apeLevel >= 8 then
4978: LD_EXP 40
4982: PUSH
4983: LD_INT 8
4985: GREATEREQUAL
4986: IFFALSE 4991
// disable else
4988: DISABLE
4989: GO 5005
// apeLevel := apeLevel + 1 ;
4991: LD_ADDR_EXP 40
4995: PUSH
4996: LD_EXP 40
5000: PUSH
5001: LD_INT 1
5003: PLUS
5004: ST_TO_ADDR
// end ;
5005: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5006: LD_EXP 35
5010: PUSH
5011: LD_EXP 36
5015: LESS
5016: IFFALSE 5156
5018: GO 5020
5020: DISABLE
5021: LD_INT 0
5023: PPUSH
5024: PPUSH
5025: PPUSH
5026: PPUSH
// begin enable ;
5027: ENABLE
// for i := 1 to apemanPos do
5028: LD_ADDR_VAR 0 1
5032: PUSH
5033: DOUBLE
5034: LD_INT 1
5036: DEC
5037: ST_TO_ADDR
5038: LD_EXP 38
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5154
// begin if apemanPlayerCount [ i ] then
5046: LD_EXP 39
5050: PUSH
5051: LD_VAR 0 1
5055: ARRAY
5056: IFFALSE 5152
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5058: LD_EXP 39
5062: PUSH
5063: LD_VAR 0 1
5067: ARRAY
5068: PUSH
5069: LD_EXP 38
5073: PUSH
5074: LD_VAR 0 1
5078: ARRAY
5079: GREATER
5080: IFFALSE 5152
// begin ape := PrepareApeman ;
5082: LD_ADDR_VAR 0 2
5086: PUSH
5087: CALL 5659 0 0
5091: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5092: LD_VAR 0 2
5096: PPUSH
5097: LD_EXP 41
5101: PUSH
5102: LD_VAR 0 1
5106: ARRAY
5107: PPUSH
5108: LD_INT 0
5110: PPUSH
5111: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5115: LD_ADDR_EXP 38
5119: PUSH
5120: LD_EXP 38
5124: PPUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: LD_EXP 38
5134: PUSH
5135: LD_VAR 0 1
5139: ARRAY
5140: PUSH
5141: LD_VAR 0 2
5145: UNION
5146: PPUSH
5147: CALL_OW 1
5151: ST_TO_ADDR
// end ; end ; end ;
5152: GO 5043
5154: POP
5155: POP
// end ;
5156: PPOPN 4
5158: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5159: LD_INT 0
5161: PPUSH
5162: PPUSH
5163: PPUSH
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
// playersAmount := 0 ;
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_INT 0
5175: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5176: LD_ADDR_VAR 0 7
5180: PUSH
5181: LD_INT 8
5183: PUSH
5184: LD_INT 9
5186: PUSH
5187: LD_INT 11
5189: PUSH
5190: LD_INT 10
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5199: LD_ADDR_EXP 41
5203: PUSH
5204: LD_INT 0
5206: PUSH
5207: LD_INT 0
5209: PUSH
5210: LD_INT 0
5212: PUSH
5213: LD_INT 0
5215: PUSH
5216: LD_INT 0
5218: PUSH
5219: LD_INT 0
5221: PUSH
5222: LD_INT 0
5224: PUSH
5225: LD_INT 0
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: ST_TO_ADDR
// for j = 1 to Side_Positions do
5238: LD_ADDR_VAR 0 4
5242: PUSH
5243: DOUBLE
5244: LD_INT 1
5246: DEC
5247: ST_TO_ADDR
5248: LD_EXP 23
5252: PUSH
5253: FOR_TO
5254: IFFALSE 5321
// if Side_Positions [ j ] then
5256: LD_EXP 23
5260: PUSH
5261: LD_VAR 0 4
5265: ARRAY
5266: IFFALSE 5319
// begin playersAmount := playersAmount + 1 ;
5268: LD_ADDR_VAR 0 3
5272: PUSH
5273: LD_VAR 0 3
5277: PUSH
5278: LD_INT 1
5280: PLUS
5281: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5282: LD_ADDR_EXP 41
5286: PUSH
5287: LD_EXP 41
5291: PPUSH
5292: LD_VAR 0 4
5296: PPUSH
5297: LD_VAR 0 7
5301: PUSH
5302: LD_EXP 23
5306: PUSH
5307: LD_VAR 0 4
5311: ARRAY
5312: ARRAY
5313: PPUSH
5314: CALL_OW 1
5318: ST_TO_ADDR
// end ;
5319: GO 5253
5321: POP
5322: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5323: LD_ADDR_EXP 37
5327: PUSH
5328: LD_INT 3
5330: PUSH
5331: LD_EXP 15
5335: MUL
5336: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5337: LD_ADDR_EXP 35
5341: PUSH
5342: LD_VAR 0 3
5346: PUSH
5347: LD_EXP 37
5351: MUL
5352: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5353: LD_ADDR_EXP 36
5357: PUSH
5358: LD_EXP 35
5362: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5363: LD_ADDR_EXP 38
5367: PUSH
5368: LD_INT 0
5370: PUSH
5371: LD_INT 0
5373: PUSH
5374: LD_INT 0
5376: PUSH
5377: LD_INT 0
5379: PUSH
5380: LD_INT 0
5382: PUSH
5383: LD_INT 0
5385: PUSH
5386: LD_INT 0
5388: PUSH
5389: LD_INT 0
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5402: LD_ADDR_EXP 39
5406: PUSH
5407: LD_INT 0
5409: PUSH
5410: LD_INT 0
5412: PUSH
5413: LD_INT 0
5415: PUSH
5416: LD_INT 0
5418: PUSH
5419: LD_INT 0
5421: PUSH
5422: LD_INT 0
5424: PUSH
5425: LD_INT 0
5427: PUSH
5428: LD_INT 0
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: ST_TO_ADDR
// apeLevel := 1 ;
5441: LD_ADDR_EXP 40
5445: PUSH
5446: LD_INT 1
5448: ST_TO_ADDR
// if not apemanNumber then
5449: LD_EXP 35
5453: NOT
5454: IFFALSE 5458
// exit ;
5456: GO 5654
// for i := 1 to apemanPerPlayer do
5458: LD_ADDR_VAR 0 2
5462: PUSH
5463: DOUBLE
5464: LD_INT 1
5466: DEC
5467: ST_TO_ADDR
5468: LD_EXP 37
5472: PUSH
5473: FOR_TO
5474: IFFALSE 5652
// begin for j := 1 to Side_Positions do
5476: LD_ADDR_VAR 0 4
5480: PUSH
5481: DOUBLE
5482: LD_INT 1
5484: DEC
5485: ST_TO_ADDR
5486: LD_EXP 23
5490: PUSH
5491: FOR_TO
5492: IFFALSE 5648
// if Side_Positions [ j ] then
5494: LD_EXP 23
5498: PUSH
5499: LD_VAR 0 4
5503: ARRAY
5504: IFFALSE 5646
// begin pos := Side_Positions [ j ] ;
5506: LD_ADDR_VAR 0 6
5510: PUSH
5511: LD_EXP 23
5515: PUSH
5516: LD_VAR 0 4
5520: ARRAY
5521: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5522: LD_ADDR_EXP 39
5526: PUSH
5527: LD_EXP 39
5531: PPUSH
5532: LD_VAR 0 4
5536: PPUSH
5537: LD_EXP 39
5541: PUSH
5542: LD_VAR 0 4
5546: ARRAY
5547: PUSH
5548: LD_INT 1
5550: PLUS
5551: PPUSH
5552: CALL_OW 1
5556: ST_TO_ADDR
// ape := PrepareApeman ;
5557: LD_ADDR_VAR 0 5
5561: PUSH
5562: CALL 5659 0 0
5566: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5567: LD_ADDR_EXP 38
5571: PUSH
5572: LD_EXP 38
5576: PPUSH
5577: LD_VAR 0 4
5581: PPUSH
5582: LD_EXP 38
5586: PUSH
5587: LD_VAR 0 4
5591: ARRAY
5592: PPUSH
5593: LD_EXP 38
5597: PUSH
5598: LD_VAR 0 4
5602: ARRAY
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: PPUSH
5608: LD_VAR 0 5
5612: PPUSH
5613: CALL_OW 1
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5623: LD_VAR 0 5
5627: PPUSH
5628: LD_EXP 41
5632: PUSH
5633: LD_VAR 0 4
5637: ARRAY
5638: PPUSH
5639: LD_INT 0
5641: PPUSH
5642: CALL_OW 49
// end ;
5646: GO 5491
5648: POP
5649: POP
// end ;
5650: GO 5473
5652: POP
5653: POP
// end ;
5654: LD_VAR 0 1
5658: RET
// export function PrepareApeman ; var bonus ; begin
5659: LD_INT 0
5661: PPUSH
5662: PPUSH
// uc_side := 0 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 0
5670: ST_TO_ADDR
// uc_nation := 0 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 0
5678: ST_TO_ADDR
// InitHc ;
5679: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
5683: LD_ADDR_VAR 0 2
5687: PUSH
5688: LD_INT 1
5690: NEG
5691: PUSH
5692: LD_INT 0
5694: PUSH
5695: LD_INT 1
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_INT 25
5705: PUSH
5706: LD_INT 12
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PPUSH
5713: CALL_OW 69
5717: PUSH
5718: LD_INT 3
5720: MOD
5721: PUSH
5722: LD_INT 1
5724: PLUS
5725: ARRAY
5726: ST_TO_ADDR
// hc_class := class_apeman ;
5727: LD_ADDR_OWVAR 28
5731: PUSH
5732: LD_INT 12
5734: ST_TO_ADDR
// hc_gallery :=  ;
5735: LD_ADDR_OWVAR 33
5739: PUSH
5740: LD_STRING 
5742: ST_TO_ADDR
// hc_name :=  ;
5743: LD_ADDR_OWVAR 26
5747: PUSH
5748: LD_STRING 
5750: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5751: LD_ADDR_OWVAR 31
5755: PUSH
5756: LD_EXP 40
5760: PUSH
5761: LD_VAR 0 2
5765: PLUS
5766: PUSH
5767: LD_EXP 40
5771: PUSH
5772: LD_VAR 0 2
5776: PLUS
5777: PUSH
5778: LD_EXP 40
5782: PUSH
5783: LD_VAR 0 2
5787: PLUS
5788: PUSH
5789: LD_EXP 40
5793: PUSH
5794: LD_VAR 0 2
5798: PLUS
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5806: LD_ADDR_OWVAR 35
5810: PUSH
5811: LD_INT 10
5813: PUSH
5814: LD_VAR 0 2
5818: MUL
5819: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
5820: LD_ADDR_OWVAR 29
5824: PUSH
5825: LD_INT 12
5827: PUSH
5828: LD_INT 12
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: ST_TO_ADDR
// result := CreateHuman ;
5835: LD_ADDR_VAR 0 1
5839: PUSH
5840: CALL_OW 44
5844: ST_TO_ADDR
// end ;
5845: LD_VAR 0 1
5849: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5850: LD_INT 0
5852: PPUSH
5853: PPUSH
5854: PPUSH
// if not ape then
5855: LD_VAR 0 1
5859: NOT
5860: IFFALSE 5864
// exit ;
5862: GO 5989
// side := GetSide ( ape ) ;
5864: LD_ADDR_VAR 0 3
5868: PUSH
5869: LD_VAR 0 1
5873: PPUSH
5874: CALL_OW 255
5878: ST_TO_ADDR
// if not side then
5879: LD_VAR 0 3
5883: NOT
5884: IFFALSE 5938
// begin for i = 1 to apemanPos do
5886: LD_ADDR_VAR 0 4
5890: PUSH
5891: DOUBLE
5892: LD_INT 1
5894: DEC
5895: ST_TO_ADDR
5896: LD_EXP 38
5900: PUSH
5901: FOR_TO
5902: IFFALSE 5936
// if ape in apemanPos [ i ] then
5904: LD_VAR 0 1
5908: PUSH
5909: LD_EXP 38
5913: PUSH
5914: LD_VAR 0 4
5918: ARRAY
5919: IN
5920: IFFALSE 5934
// begin side := i ;
5922: LD_ADDR_VAR 0 3
5926: PUSH
5927: LD_VAR 0 4
5931: ST_TO_ADDR
// break ;
5932: GO 5936
// end ;
5934: GO 5901
5936: POP
5937: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5938: LD_ADDR_EXP 38
5942: PUSH
5943: LD_EXP 38
5947: PPUSH
5948: LD_VAR 0 3
5952: PPUSH
5953: LD_EXP 38
5957: PUSH
5958: LD_VAR 0 3
5962: ARRAY
5963: PUSH
5964: LD_VAR 0 1
5968: DIFF
5969: PPUSH
5970: CALL_OW 1
5974: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5975: LD_ADDR_EXP 35
5979: PUSH
5980: LD_EXP 35
5984: PUSH
5985: LD_INT 1
5987: MINUS
5988: ST_TO_ADDR
// end ; end_of_file
5989: LD_VAR 0 2
5993: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5994: LD_VAR 0 1
5998: PPUSH
5999: CALL_OW 266
6003: PUSH
6004: LD_INT 0
6006: PUSH
6007: LD_INT 1
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: IN
6014: IFFALSE 6039
// SetBName ( b , @ & GetSide ( b ) ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_STRING @
6023: PUSH
6024: LD_VAR 0 1
6028: PPUSH
6029: CALL_OW 255
6033: STR
6034: PPUSH
6035: CALL_OW 500
// if def_game_rules then
6039: LD_EXP 47
6043: IFFALSE 6080
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6045: LD_VAR 0 1
6049: PPUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: CALL_OW 266
6059: PPUSH
6060: LD_VAR 0 1
6064: PPUSH
6065: CALL_OW 255
6069: PPUSH
6070: LD_INT 0
6072: PPUSH
6073: LD_INT 1
6075: PPUSH
6076: CALL 15485 0 5
// end ;
6080: PPOPN 2
6082: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6083: LD_VAR 0 1
6087: PPUSH
6088: CALL_OW 266
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: IN
6103: IFFALSE 6128
// SetBName ( b , @ & GetSide ( b ) ) ;
6105: LD_VAR 0 1
6109: PPUSH
6110: LD_STRING @
6112: PUSH
6113: LD_VAR 0 1
6117: PPUSH
6118: CALL_OW 255
6122: STR
6123: PPUSH
6124: CALL_OW 500
// if def_game_rules then
6128: LD_EXP 47
6132: IFFALSE 6171
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6134: LD_VAR 0 1
6138: PPUSH
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL_OW 266
6148: PPUSH
6149: LD_VAR 0 1
6153: PPUSH
6154: CALL_OW 255
6158: PPUSH
6159: LD_VAR 0 2
6163: PPUSH
6164: LD_INT 1
6166: PPUSH
6167: CALL 15485 0 5
// end ;
6171: PPOPN 3
6173: END
// on VehicleConstructed ( veh , fac ) do var side ;
6174: LD_INT 0
6176: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6177: LD_VAR 0 1
6181: PPUSH
6182: CALL_OW 263
6186: PUSH
6187: LD_INT 5
6189: EQUAL
6190: IFFALSE 6332
// begin side := GetSide ( veh ) ;
6192: LD_ADDR_VAR 0 3
6196: PUSH
6197: LD_VAR 0 1
6201: PPUSH
6202: CALL_OW 255
6206: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6207: LD_ADDR_EXP 38
6211: PUSH
6212: LD_EXP 38
6216: PPUSH
6217: LD_VAR 0 3
6221: PPUSH
6222: LD_EXP 38
6226: PUSH
6227: LD_VAR 0 3
6231: ARRAY
6232: PPUSH
6233: LD_INT 52
6235: PUSH
6236: EMPTY
6237: LIST
6238: PPUSH
6239: CALL_OW 72
6243: PUSH
6244: LD_INT 22
6246: PUSH
6247: LD_VAR 0 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 2
6258: PUSH
6259: LD_INT 33
6261: PUSH
6262: LD_INT 5
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: LD_INT 25
6271: PUSH
6272: LD_INT 12
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: LD_INT 25
6281: PUSH
6282: LD_INT 15
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: LD_INT 25
6291: PUSH
6292: LD_INT 16
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 25
6301: PUSH
6302: LD_INT 17
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PPUSH
6321: CALL_OW 69
6325: UNION
6326: PPUSH
6327: CALL_OW 1
6331: ST_TO_ADDR
// end ; end ;
6332: PPOPN 3
6334: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
6339: PPUSH
6340: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6341: LD_VAR 0 1
6345: PPUSH
6346: CALL_OW 257
6350: PUSH
6351: LD_INT 12
6353: PUSH
6354: LD_INT 15
6356: PUSH
6357: LD_INT 17
6359: PUSH
6360: LD_INT 16
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: IN
6369: PUSH
6370: LD_VAR 0 1
6374: PPUSH
6375: CALL_OW 263
6379: PUSH
6380: LD_INT 5
6382: EQUAL
6383: OR
6384: IFFALSE 6395
// ApeKilled ( j ) ;
6386: LD_VAR 0 1
6390: PPUSH
6391: CALL 5850 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6395: LD_VAR 0 1
6399: PPUSH
6400: CALL_OW 266
6404: PUSH
6405: LD_INT 0
6407: PUSH
6408: LD_INT 1
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: IN
6415: IFFALSE 6497
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6417: LD_ADDR_VAR 0 4
6421: PUSH
6422: LD_EXP 23
6426: PUSH
6427: LD_VAR 0 1
6431: PPUSH
6432: CALL_OW 255
6436: ARRAY
6437: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6438: LD_ADDR_VAR 0 2
6442: PUSH
6443: LD_EXP 31
6447: PUSH
6448: LD_VAR 0 4
6452: ARRAY
6453: PUSH
6454: LD_INT 1
6456: ARRAY
6457: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6458: LD_ADDR_VAR 0 3
6462: PUSH
6463: LD_EXP 31
6467: PUSH
6468: LD_VAR 0 4
6472: ARRAY
6473: PUSH
6474: LD_INT 2
6476: ARRAY
6477: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6478: LD_VAR 0 2
6482: PPUSH
6483: LD_VAR 0 3
6487: PPUSH
6488: CALL_OW 420
6492: PPUSH
6493: CALL_OW 419
// end ; if def_game_rules then
6497: LD_EXP 47
6501: IFFALSE 6600
// if ( GetType ( j ) = 3 ) then
6503: LD_VAR 0 1
6507: PPUSH
6508: CALL_OW 247
6512: PUSH
6513: LD_INT 3
6515: EQUAL
6516: IFFALSE 6556
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6518: LD_VAR 0 1
6522: PPUSH
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL_OW 266
6532: PPUSH
6533: LD_VAR 0 1
6537: PPUSH
6538: CALL_OW 255
6542: PPUSH
6543: LD_INT 0
6545: PPUSH
6546: LD_INT 1
6548: NEG
6549: PPUSH
6550: CALL 15485 0 5
6554: GO 6600
// if ( GetChassis ( j ) = 25 ) then
6556: LD_VAR 0 1
6560: PPUSH
6561: CALL_OW 265
6565: PUSH
6566: LD_INT 25
6568: EQUAL
6569: IFFALSE 6600
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6571: LD_VAR 0 1
6575: PPUSH
6576: LD_INT 37
6578: PPUSH
6579: LD_VAR 0 1
6583: PPUSH
6584: CALL_OW 255
6588: PPUSH
6589: LD_INT 0
6591: PPUSH
6592: LD_INT 1
6594: NEG
6595: PPUSH
6596: CALL 15485 0 5
// end ;
6600: PPOPN 5
6602: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6603: LD_EXP 47
6607: PUSH
6608: LD_VAR 0 1
6612: PPUSH
6613: CALL_OW 265
6617: PUSH
6618: LD_INT 25
6620: EQUAL
6621: AND
6622: IFFALSE 6654
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6624: LD_VAR 0 1
6628: PPUSH
6629: LD_INT 37
6631: PPUSH
6632: LD_VAR 0 1
6636: PPUSH
6637: CALL_OW 255
6641: PPUSH
6642: LD_VAR 0 3
6646: PPUSH
6647: LD_INT 1
6649: PPUSH
6650: CALL 15485 0 5
// end ;
6654: PPOPN 4
6656: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6657: LD_VAR 0 1
6661: PPUSH
6662: LD_VAR 0 2
6666: PPUSH
6667: LD_VAR 0 3
6671: PPUSH
6672: LD_OWVAR 2
6676: PPUSH
6677: CALL 17017 0 4
6681: PPOPN 3
6683: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
6684: LD_INT 0
6686: PPUSH
6687: PPUSH
6688: PPUSH
6689: PPUSH
6690: PPUSH
6691: PPUSH
// artefact_number := 3 ;
6692: LD_ADDR_EXP 42
6696: PUSH
6697: LD_INT 3
6699: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
6700: LD_ADDR_EXP 43
6704: PUSH
6705: LD_INT 1
6707: PUSH
6708: LD_INT 0
6710: PUSH
6711: LD_INT 2
6713: PUSH
6714: LD_INT 0
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
6727: LD_ADDR_EXP 44
6731: PUSH
6732: LD_INT 1
6734: PUSH
6735: LD_INT 3
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: LIST
6745: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_INT 1
6753: PUSH
6754: LD_INT 4
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 2
6763: PUSH
6764: LD_INT 5
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 3
6773: PUSH
6774: LD_INT 9
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
6786: LD_ADDR_VAR 0 3
6790: PUSH
6791: LD_INT 3
6793: PUSH
6794: LD_INT 4
6796: PUSH
6797: LD_INT 3
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: LIST
6804: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
6805: LD_ADDR_VAR 0 4
6809: PUSH
6810: LD_INT 150
6812: PUSH
6813: LD_INT 250
6815: PUSH
6816: LD_INT 400
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
6824: LD_ADDR_VAR 0 5
6828: PUSH
6829: LD_INT 2
6831: PUSH
6832: LD_INT 10
6834: PUSH
6835: LD_INT 20
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
6843: LD_ADDR_VAR 0 6
6847: PUSH
6848: LD_INT 6
6850: PUSH
6851: LD_INT 18
6853: PUSH
6854: LD_INT 50
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
6862: LD_VAR 0 2
6866: PPUSH
6867: LD_VAR 0 3
6871: PPUSH
6872: LD_VAR 0 4
6876: PPUSH
6877: LD_VAR 0 5
6881: PPUSH
6882: LD_VAR 0 6
6886: PPUSH
6887: CALL 6896 0 5
// end ;
6891: LD_VAR 0 1
6895: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
// disable ( 1 ) ;
6903: LD_INT 1
6905: DISABLE_MARKED
// disable ( 5 ) ;
6906: LD_INT 5
6908: DISABLE_MARKED
// disable ( 6 ) ;
6909: LD_INT 6
6911: DISABLE_MARKED
// disable ( 7 ) ;
6912: LD_INT 7
6914: DISABLE_MARKED
// for side = 1 to 8 do
6915: LD_ADDR_VAR 0 9
6919: PUSH
6920: DOUBLE
6921: LD_INT 1
6923: DEC
6924: ST_TO_ADDR
6925: LD_INT 8
6927: PUSH
6928: FOR_TO
6929: IFFALSE 6945
// SetArtifactRes ( side , state_enabled ) ;
6931: LD_VAR 0 9
6935: PPUSH
6936: LD_INT 1
6938: PPUSH
6939: CALL_OW 467
6943: GO 6928
6945: POP
6946: POP
// for un = 0 to ( artefact_number - 1 ) do
6947: LD_ADDR_VAR 0 7
6951: PUSH
6952: DOUBLE
6953: LD_INT 0
6955: DEC
6956: ST_TO_ADDR
6957: LD_EXP 42
6961: PUSH
6962: LD_INT 1
6964: MINUS
6965: PUSH
6966: FOR_TO
6967: IFFALSE 7365
// begin base := un * 100 ;
6969: LD_ADDR_VAR 0 10
6973: PUSH
6974: LD_VAR 0 7
6978: PUSH
6979: LD_INT 100
6981: MUL
6982: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
6983: LD_VAR 0 10
6987: PUSH
6988: LD_INT 1
6990: PLUS
6991: PPUSH
6992: LD_VAR 0 1
6996: PUSH
6997: LD_VAR 0 7
7001: PUSH
7002: LD_INT 1
7004: PLUS
7005: ARRAY
7006: PUSH
7007: LD_INT 1
7009: ARRAY
7010: PPUSH
7011: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7015: LD_VAR 0 10
7019: PUSH
7020: LD_INT 2
7022: PLUS
7023: PPUSH
7024: LD_VAR 0 1
7028: PUSH
7029: LD_VAR 0 7
7033: PUSH
7034: LD_INT 1
7036: PLUS
7037: ARRAY
7038: PUSH
7039: LD_INT 2
7041: ARRAY
7042: PPUSH
7043: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7047: LD_VAR 0 10
7051: PUSH
7052: LD_INT 3
7054: PLUS
7055: PPUSH
7056: LD_VAR 0 2
7060: PUSH
7061: LD_VAR 0 7
7065: PUSH
7066: LD_INT 1
7068: PLUS
7069: ARRAY
7070: PPUSH
7071: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7075: LD_VAR 0 10
7079: PUSH
7080: LD_INT 5
7082: PLUS
7083: PPUSH
7084: LD_VAR 0 3
7088: PUSH
7089: LD_VAR 0 7
7093: PUSH
7094: LD_INT 1
7096: PLUS
7097: ARRAY
7098: PPUSH
7099: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7103: LD_VAR 0 10
7107: PUSH
7108: LD_INT 6
7110: PLUS
7111: PPUSH
7112: LD_VAR 0 4
7116: PUSH
7117: LD_VAR 0 7
7121: PUSH
7122: LD_INT 1
7124: PLUS
7125: ARRAY
7126: PPUSH
7127: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7131: LD_VAR 0 10
7135: PUSH
7136: LD_INT 7
7138: PLUS
7139: PPUSH
7140: LD_VAR 0 5
7144: PUSH
7145: LD_VAR 0 7
7149: PUSH
7150: LD_INT 1
7152: PLUS
7153: ARRAY
7154: PPUSH
7155: CALL_OW 109
// SetTag ( base + 08 , false ) ;
7159: LD_VAR 0 10
7163: PUSH
7164: LD_INT 8
7166: PLUS
7167: PPUSH
7168: LD_INT 0
7170: PPUSH
7171: CALL_OW 109
// SetTag ( base + 09 , false ) ;
7175: LD_VAR 0 10
7179: PUSH
7180: LD_INT 9
7182: PLUS
7183: PPUSH
7184: LD_INT 0
7186: PPUSH
7187: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
7191: LD_VAR 0 10
7195: PUSH
7196: LD_INT 11
7198: PLUS
7199: PPUSH
7200: LD_INT 0
7202: PPUSH
7203: CALL_OW 109
// SetTag ( base + 12 , false ) ;
7207: LD_VAR 0 10
7211: PUSH
7212: LD_INT 12
7214: PLUS
7215: PPUSH
7216: LD_INT 0
7218: PPUSH
7219: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7223: LD_VAR 0 10
7227: PUSH
7228: LD_INT 13
7230: PLUS
7231: PPUSH
7232: LD_INT 0
7234: PPUSH
7235: CALL_OW 109
// for i = 0 to 7 do
7239: LD_ADDR_VAR 0 8
7243: PUSH
7244: DOUBLE
7245: LD_INT 0
7247: DEC
7248: ST_TO_ADDR
7249: LD_INT 7
7251: PUSH
7252: FOR_TO
7253: IFFALSE 7361
// begin SetTag ( base + i * 10 + 21 , false ) ;
7255: LD_VAR 0 10
7259: PUSH
7260: LD_VAR 0 8
7264: PUSH
7265: LD_INT 10
7267: MUL
7268: PLUS
7269: PUSH
7270: LD_INT 21
7272: PLUS
7273: PPUSH
7274: LD_INT 0
7276: PPUSH
7277: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
7281: LD_VAR 0 10
7285: PUSH
7286: LD_VAR 0 8
7290: PUSH
7291: LD_INT 10
7293: MUL
7294: PLUS
7295: PUSH
7296: LD_INT 22
7298: PLUS
7299: PPUSH
7300: LD_INT 0
7302: PPUSH
7303: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
7307: LD_VAR 0 10
7311: PUSH
7312: LD_VAR 0 8
7316: PUSH
7317: LD_INT 10
7319: MUL
7320: PLUS
7321: PUSH
7322: LD_INT 23
7324: PLUS
7325: PPUSH
7326: LD_INT 0
7328: PPUSH
7329: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
7333: LD_VAR 0 10
7337: PUSH
7338: LD_VAR 0 8
7342: PUSH
7343: LD_INT 10
7345: MUL
7346: PLUS
7347: PUSH
7348: LD_INT 25
7350: PLUS
7351: PPUSH
7352: LD_INT 0
7354: PPUSH
7355: CALL_OW 109
// end ;
7359: GO 7252
7361: POP
7362: POP
// end ;
7363: GO 6966
7365: POP
7366: POP
// enable ( 20 ) ;
7367: LD_INT 20
7369: ENABLE_MARKED
// labs_in_use := [ ] ;
7370: LD_ADDR_EXP 45
7374: PUSH
7375: EMPTY
7376: ST_TO_ADDR
// if def_artefact_one then
7377: LD_EXP 1
7381: IFFALSE 7408
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
7383: LD_INT 4
7385: PPUSH
7386: LD_EXP 44
7390: PUSH
7391: LD_INT 1
7393: ARRAY
7394: PPUSH
7395: LD_INT 16
7397: PPUSH
7398: LD_INT 0
7400: PPUSH
7401: CALL_OW 59
// enable ( 5 ) ;
7405: LD_INT 5
7407: ENABLE_MARKED
// end ; if def_artefact_two then
7408: LD_EXP 2
7412: IFFALSE 7439
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
7414: LD_INT 4
7416: PPUSH
7417: LD_EXP 44
7421: PUSH
7422: LD_INT 2
7424: ARRAY
7425: PPUSH
7426: LD_INT 16
7428: PPUSH
7429: LD_INT 0
7431: PPUSH
7432: CALL_OW 59
// enable ( 6 ) ;
7436: LD_INT 6
7438: ENABLE_MARKED
// end ; if def_artefact_three then
7439: LD_EXP 3
7443: IFFALSE 7470
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
7445: LD_INT 4
7447: PPUSH
7448: LD_EXP 44
7452: PUSH
7453: LD_INT 3
7455: ARRAY
7456: PPUSH
7457: LD_INT 16
7459: PPUSH
7460: LD_INT 0
7462: PPUSH
7463: CALL_OW 59
// enable ( 7 ) ;
7467: LD_INT 7
7469: ENABLE_MARKED
// end ; end ;
7470: LD_VAR 0 6
7474: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
7475: LD_INT 0
7477: PPUSH
7478: PPUSH
// begin art := artefact_num [ size ] ;
7479: LD_ADDR_VAR 0 3
7483: PUSH
7484: LD_EXP 43
7488: PUSH
7489: LD_VAR 0 2
7493: ARRAY
7494: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7495: LD_ADDR_VAR 0 4
7499: PUSH
7500: LD_VAR 0 3
7504: PUSH
7505: LD_INT 1
7507: MINUS
7508: PUSH
7509: LD_INT 100
7511: MUL
7512: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
7513: LD_VAR 0 4
7517: PUSH
7518: LD_INT 9
7520: PLUS
7521: PPUSH
7522: LD_INT 0
7524: PPUSH
7525: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7529: LD_VAR 0 4
7533: PUSH
7534: LD_INT 13
7536: PLUS
7537: PPUSH
7538: LD_INT 0
7540: PPUSH
7541: CALL_OW 109
// Init_Lab ( art ) ;
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL 9026 0 1
// end ;
7554: PPOPN 4
7556: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
7557: LD_INT 0
7559: PPUSH
7560: PPUSH
7561: PPUSH
// begin art := artefact_num [ size ] ;
7562: LD_ADDR_VAR 0 3
7566: PUSH
7567: LD_EXP 43
7571: PUSH
7572: LD_VAR 0 2
7576: ARRAY
7577: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7578: LD_ADDR_VAR 0 4
7582: PUSH
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 1
7590: MINUS
7591: PUSH
7592: LD_INT 100
7594: MUL
7595: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
7596: LD_VAR 0 4
7600: PUSH
7601: LD_INT 9
7603: PLUS
7604: PPUSH
7605: LD_INT 1
7607: PPUSH
7608: CALL_OW 109
// SetTag ( base + 13 , un ) ;
7612: LD_VAR 0 4
7616: PUSH
7617: LD_INT 13
7619: PLUS
7620: PPUSH
7621: LD_VAR 0 1
7625: PPUSH
7626: CALL_OW 109
// if GetTag ( base + 11 ) then
7630: LD_VAR 0 4
7634: PUSH
7635: LD_INT 11
7637: PLUS
7638: PPUSH
7639: CALL_OW 110
7643: IFFALSE 7806
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
7645: LD_ADDR_VAR 0 5
7649: PUSH
7650: LD_VAR 0 4
7654: PUSH
7655: LD_INT 11
7657: PLUS
7658: PPUSH
7659: CALL_OW 110
7663: PPUSH
7664: CALL_OW 255
7668: ST_TO_ADDR
// if GetTag ( base + 12 ) then
7669: LD_VAR 0 4
7673: PUSH
7674: LD_INT 12
7676: PLUS
7677: PPUSH
7678: CALL_OW 110
7682: IFFALSE 7750
// begin ComCancel ( GetTag ( base + 11 ) ) ;
7684: LD_VAR 0 4
7688: PUSH
7689: LD_INT 11
7691: PLUS
7692: PPUSH
7693: CALL_OW 110
7697: PPUSH
7698: CALL_OW 127
// wait ( 5 ) ;
7702: LD_INT 5
7704: PPUSH
7705: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
7709: LD_ADDR_EXP 45
7713: PUSH
7714: LD_EXP 45
7718: PUSH
7719: LD_VAR 0 4
7723: PUSH
7724: LD_INT 11
7726: PLUS
7727: PPUSH
7728: CALL_OW 110
7732: DIFF
7733: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
7734: LD_VAR 0 4
7738: PUSH
7739: LD_INT 12
7741: PLUS
7742: PPUSH
7743: LD_INT 0
7745: PPUSH
7746: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
7750: LD_VAR 0 4
7754: PUSH
7755: LD_VAR 0 5
7759: PUSH
7760: LD_INT 10
7762: MUL
7763: PLUS
7764: PUSH
7765: LD_INT 11
7767: PLUS
7768: PPUSH
7769: CALL_OW 110
7773: NOT
7774: IFFALSE 7790
// DeInit_Lab ( side , art ) ;
7776: LD_VAR 0 5
7780: PPUSH
7781: LD_VAR 0 3
7785: PPUSH
7786: CALL 9562 0 2
// SetTag ( base + 11 , 0 ) ;
7790: LD_VAR 0 4
7794: PUSH
7795: LD_INT 11
7797: PLUS
7798: PPUSH
7799: LD_INT 0
7801: PPUSH
7802: CALL_OW 109
// end ; end ;
7806: PPOPN 5
7808: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
7809: LD_INT 0
7811: PPUSH
7812: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7813: LD_ADDR_VAR 0 3
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: CALL_OW 255
7827: PUSH
7828: LD_INT 1
7830: MINUS
7831: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7832: LD_ADDR_VAR 0 2
7836: PUSH
7837: DOUBLE
7838: LD_INT 0
7840: DEC
7841: ST_TO_ADDR
7842: LD_EXP 42
7846: PUSH
7847: LD_INT 1
7849: MINUS
7850: PUSH
7851: FOR_TO
7852: IFFALSE 7894
// if lab = GetTag ( un * 100 + 11 ) then
7854: LD_VAR 0 1
7858: PUSH
7859: LD_VAR 0 2
7863: PUSH
7864: LD_INT 100
7866: MUL
7867: PUSH
7868: LD_INT 11
7870: PLUS
7871: PPUSH
7872: CALL_OW 110
7876: EQUAL
7877: IFFALSE 7892
// Init_Lab ( un + 1 ) ;
7879: LD_VAR 0 2
7883: PUSH
7884: LD_INT 1
7886: PLUS
7887: PPUSH
7888: CALL 9026 0 1
7892: GO 7851
7894: POP
7895: POP
// end ;
7896: PPOPN 3
7898: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
7899: LD_INT 0
7901: PPUSH
7902: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7903: LD_ADDR_VAR 0 4
7907: PUSH
7908: LD_VAR 0 1
7912: PPUSH
7913: CALL_OW 255
7917: PUSH
7918: LD_INT 1
7920: MINUS
7921: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7922: LD_ADDR_VAR 0 3
7926: PUSH
7927: DOUBLE
7928: LD_INT 0
7930: DEC
7931: ST_TO_ADDR
7932: LD_EXP 42
7936: PUSH
7937: LD_INT 1
7939: MINUS
7940: PUSH
7941: FOR_TO
7942: IFFALSE 8060
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
7944: LD_VAR 0 3
7948: PUSH
7949: LD_INT 100
7951: MUL
7952: PUSH
7953: LD_INT 11
7955: PLUS
7956: PPUSH
7957: CALL_OW 110
7961: PUSH
7962: LD_VAR 0 1
7966: EQUAL
7967: PUSH
7968: LD_VAR 0 3
7972: PUSH
7973: LD_INT 100
7975: MUL
7976: PUSH
7977: LD_INT 12
7979: PLUS
7980: PPUSH
7981: CALL_OW 110
7985: AND
7986: IFFALSE 8058
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
7988: LD_VAR 0 3
7992: PUSH
7993: LD_INT 100
7995: MUL
7996: PUSH
7997: LD_VAR 0 4
8001: PUSH
8002: LD_INT 10
8004: MUL
8005: PLUS
8006: PUSH
8007: LD_INT 22
8009: PLUS
8010: PPUSH
8011: LD_VAR 0 2
8015: PPUSH
8016: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8020: LD_VAR 0 3
8024: PUSH
8025: LD_INT 100
8027: MUL
8028: PUSH
8029: LD_INT 12
8031: PLUS
8032: PPUSH
8033: LD_INT 0
8035: PPUSH
8036: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8040: LD_ADDR_EXP 45
8044: PUSH
8045: LD_EXP 45
8049: PUSH
8050: LD_VAR 0 1
8054: DIFF
8055: ST_TO_ADDR
// break ;
8056: GO 8060
// end ;
8058: GO 7941
8060: POP
8061: POP
// Update_Artefact ( lab ) ;
8062: LD_VAR 0 1
8066: PPUSH
8067: CALL 9701 0 1
// end ;
8071: PPOPN 4
8073: END
// on SpecResearchComplete ( lab ) do var un , side ;
8074: LD_INT 0
8076: PPUSH
8077: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8078: LD_ADDR_VAR 0 3
8082: PUSH
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 255
8092: PUSH
8093: LD_INT 1
8095: MINUS
8096: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8097: LD_ADDR_VAR 0 2
8101: PUSH
8102: DOUBLE
8103: LD_INT 0
8105: DEC
8106: ST_TO_ADDR
8107: LD_EXP 42
8111: PUSH
8112: LD_INT 1
8114: MINUS
8115: PUSH
8116: FOR_TO
8117: IFFALSE 8263
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8119: LD_VAR 0 2
8123: PUSH
8124: LD_INT 100
8126: MUL
8127: PUSH
8128: LD_INT 11
8130: PLUS
8131: PPUSH
8132: CALL_OW 110
8136: PUSH
8137: LD_VAR 0 1
8141: EQUAL
8142: PUSH
8143: LD_VAR 0 2
8147: PUSH
8148: LD_INT 100
8150: MUL
8151: PUSH
8152: LD_INT 12
8154: PLUS
8155: PPUSH
8156: CALL_OW 110
8160: AND
8161: IFFALSE 8261
// begin SetTag ( un * 100 + 12 , false ) ;
8163: LD_VAR 0 2
8167: PUSH
8168: LD_INT 100
8170: MUL
8171: PUSH
8172: LD_INT 12
8174: PLUS
8175: PPUSH
8176: LD_INT 0
8178: PPUSH
8179: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
8183: LD_VAR 0 2
8187: PUSH
8188: LD_INT 100
8190: MUL
8191: PUSH
8192: LD_VAR 0 3
8196: PUSH
8197: LD_INT 10
8199: MUL
8200: PLUS
8201: PUSH
8202: LD_INT 21
8204: PLUS
8205: PPUSH
8206: LD_INT 1
8208: PPUSH
8209: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
8213: LD_VAR 0 2
8217: PUSH
8218: LD_INT 100
8220: MUL
8221: PUSH
8222: LD_VAR 0 3
8226: PUSH
8227: LD_INT 10
8229: MUL
8230: PLUS
8231: PUSH
8232: LD_INT 25
8234: PLUS
8235: PPUSH
8236: LD_VAR 0 1
8240: PPUSH
8241: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8245: LD_ADDR_EXP 45
8249: PUSH
8250: LD_EXP 45
8254: PUSH
8255: LD_VAR 0 1
8259: DIFF
8260: ST_TO_ADDR
// end ;
8261: GO 8116
8263: POP
8264: POP
// Update_Artefact ( lab ) ;
8265: LD_VAR 0 1
8269: PPUSH
8270: CALL 9701 0 1
// end ;
8274: PPOPN 3
8276: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
8277: LD_INT 0
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
8283: LD_ADDR_VAR 0 7
8287: PUSH
8288: LD_VAR 0 2
8292: PUSH
8293: LD_INT 1
8295: MINUS
8296: PUSH
8297: LD_INT 3
8299: MOD
8300: PUSH
8301: LD_INT 1
8303: PLUS
8304: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8305: LD_ADDR_VAR 0 8
8309: PUSH
8310: LD_VAR 0 7
8314: PUSH
8315: LD_INT 1
8317: MINUS
8318: PUSH
8319: LD_INT 100
8321: MUL
8322: ST_TO_ADDR
// if number <= 3 then
8323: LD_VAR 0 2
8327: PUSH
8328: LD_INT 3
8330: LESSEQUAL
8331: IFFALSE 8563
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
8333: LD_VAR 0 8
8337: PUSH
8338: LD_INT 11
8340: PLUS
8341: PPUSH
8342: CALL_OW 110
8346: PPUSH
8347: LD_VAR 0 8
8351: PUSH
8352: LD_INT 5
8354: PLUS
8355: PPUSH
8356: CALL_OW 110
8360: PPUSH
8361: LD_INT 1
8363: PPUSH
8364: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
8368: LD_VAR 0 8
8372: PUSH
8373: LD_INT 11
8375: PLUS
8376: PPUSH
8377: CALL_OW 110
8381: PPUSH
8382: LD_VAR 0 8
8386: PUSH
8387: LD_VAR 0 1
8391: PUSH
8392: LD_INT 10
8394: MUL
8395: PLUS
8396: PUSH
8397: LD_INT 12
8399: PLUS
8400: PPUSH
8401: CALL_OW 110
8405: PPUSH
8406: CALL_OW 329
// SetTag ( base + 12 , true ) ;
8410: LD_VAR 0 8
8414: PUSH
8415: LD_INT 12
8417: PLUS
8418: PPUSH
8419: LD_INT 1
8421: PPUSH
8422: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
8426: LD_ADDR_EXP 45
8430: PUSH
8431: LD_EXP 45
8435: PUSH
8436: LD_VAR 0 8
8440: PUSH
8441: LD_INT 11
8443: PLUS
8444: PPUSH
8445: CALL_OW 110
8449: ADD
8450: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8451: LD_ADDR_VAR 0 5
8455: PUSH
8456: DOUBLE
8457: LD_INT 0
8459: DEC
8460: ST_TO_ADDR
8461: LD_EXP 42
8465: PUSH
8466: LD_INT 1
8468: MINUS
8469: PUSH
8470: FOR_TO
8471: IFFALSE 8559
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
8473: LD_VAR 0 8
8477: PUSH
8478: LD_INT 11
8480: PLUS
8481: PPUSH
8482: CALL_OW 110
8486: PUSH
8487: LD_VAR 0 5
8491: PUSH
8492: LD_INT 100
8494: MUL
8495: PUSH
8496: LD_INT 11
8498: PLUS
8499: PPUSH
8500: CALL_OW 110
8504: PUSH
8505: LD_VAR 0 5
8509: PUSH
8510: LD_INT 100
8512: MUL
8513: PUSH
8514: LD_VAR 0 1
8518: PUSH
8519: LD_INT 10
8521: MUL
8522: PLUS
8523: PUSH
8524: LD_INT 15
8526: PLUS
8527: PPUSH
8528: CALL_OW 110
8532: PUSH
8533: EMPTY
8534: LIST
8535: LIST
8536: IN
8537: IFFALSE 8557
// DeInit_Lab ( side , un + 1 ) ;
8539: LD_VAR 0 1
8543: PPUSH
8544: LD_VAR 0 5
8548: PUSH
8549: LD_INT 1
8551: PLUS
8552: PPUSH
8553: CALL 9562 0 2
8557: GO 8470
8559: POP
8560: POP
// end else
8561: GO 8737
// begin succes := false ;
8563: LD_ADDR_VAR 0 6
8567: PUSH
8568: LD_INT 0
8570: ST_TO_ADDR
// case art of 1 :
8571: LD_VAR 0 7
8575: PUSH
8576: LD_INT 1
8578: DOUBLE
8579: EQUAL
8580: IFTRUE 8584
8582: GO 8612
8584: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
8585: LD_ADDR_VAR 0 6
8589: PUSH
8590: LD_VAR 0 1
8594: PPUSH
8595: LD_VAR 0 3
8599: PPUSH
8600: LD_VAR 0 4
8604: PPUSH
8605: CALL 10134 0 3
8609: ST_TO_ADDR
8610: GO 8680
8612: LD_INT 2
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8643
8620: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
8621: LD_ADDR_VAR 0 6
8625: PUSH
8626: LD_VAR 0 1
8630: PPUSH
8631: LD_VAR 0 3
8635: PPUSH
8636: CALL 10372 0 2
8640: ST_TO_ADDR
8641: GO 8680
8643: LD_INT 3
8645: DOUBLE
8646: EQUAL
8647: IFTRUE 8651
8649: GO 8679
8651: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
8652: LD_ADDR_VAR 0 6
8656: PUSH
8657: LD_VAR 0 1
8661: PPUSH
8662: LD_VAR 0 3
8666: PPUSH
8667: LD_VAR 0 4
8671: PPUSH
8672: CALL 10768 0 3
8676: ST_TO_ADDR
8677: GO 8680
8679: POP
// if succes then
8680: LD_VAR 0 6
8684: IFFALSE 8737
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
8686: LD_VAR 0 8
8690: PUSH
8691: LD_VAR 0 1
8695: PUSH
8696: LD_INT 10
8698: MUL
8699: PLUS
8700: PUSH
8701: LD_INT 13
8703: PLUS
8704: PPUSH
8705: LD_VAR 0 8
8709: PUSH
8710: LD_INT 7
8712: PLUS
8713: PPUSH
8714: CALL_OW 110
8718: PPUSH
8719: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_VAR 0 7
8732: PPUSH
8733: CALL 8740 0 2
// end ; end ; end ;
8737: PPOPN 8
8739: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
8740: LD_INT 0
8742: PPUSH
8743: PPUSH
8744: PPUSH
// base := ( art - 1 ) * 100 ;
8745: LD_ADDR_VAR 0 4
8749: PUSH
8750: LD_VAR 0 2
8754: PUSH
8755: LD_INT 1
8757: MINUS
8758: PUSH
8759: LD_INT 100
8761: MUL
8762: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8763: LD_ADDR_VAR 0 5
8767: PUSH
8768: LD_VAR 0 4
8772: PUSH
8773: LD_VAR 0 1
8777: PUSH
8778: LD_INT 10
8780: MUL
8781: PLUS
8782: PUSH
8783: LD_INT 15
8785: PLUS
8786: PPUSH
8787: CALL_OW 110
8791: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
8792: LD_VAR 0 5
8796: PUSH
8797: LD_VAR 0 5
8801: PUSH
8802: LD_EXP 45
8806: IN
8807: NOT
8808: AND
8809: IFFALSE 8867
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
8811: LD_VAR 0 1
8815: PPUSH
8816: LD_VAR 0 4
8820: PUSH
8821: LD_INT 1
8823: PLUS
8824: PUSH
8825: LD_VAR 0 4
8829: PUSH
8830: LD_VAR 0 1
8834: PUSH
8835: LD_INT 10
8837: MUL
8838: PLUS
8839: PUSH
8840: LD_INT 11
8842: PLUS
8843: PPUSH
8844: CALL_OW 110
8848: PLUS
8849: PPUSH
8850: CALL_OW 110
8854: PPUSH
8855: LD_INT 1
8857: PPUSH
8858: LD_VAR 0 5
8862: PPUSH
8863: CALL_OW 468
// end ;
8867: LD_VAR 0 3
8871: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
8872: LD_INT 0
8874: PPUSH
8875: PPUSH
8876: PPUSH
// base := ( art - 1 ) * 100 ;
8877: LD_ADDR_VAR 0 4
8881: PUSH
8882: LD_VAR 0 2
8886: PUSH
8887: LD_INT 1
8889: MINUS
8890: PUSH
8891: LD_INT 100
8893: MUL
8894: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8895: LD_ADDR_VAR 0 5
8899: PUSH
8900: LD_VAR 0 4
8904: PUSH
8905: LD_VAR 0 1
8909: PUSH
8910: LD_INT 10
8912: MUL
8913: PLUS
8914: PUSH
8915: LD_INT 15
8917: PLUS
8918: PPUSH
8919: CALL_OW 110
8923: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
8924: LD_VAR 0 5
8928: PUSH
8929: LD_VAR 0 5
8933: PUSH
8934: LD_EXP 45
8938: IN
8939: NOT
8940: AND
8941: PUSH
8942: LD_VAR 0 5
8946: PPUSH
8947: CALL_OW 313
8951: AND
8952: IFFALSE 9021
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
8954: LD_VAR 0 1
8958: PPUSH
8959: LD_VAR 0 4
8963: PUSH
8964: LD_INT 1
8966: PLUS
8967: PUSH
8968: LD_VAR 0 4
8972: PUSH
8973: LD_VAR 0 1
8977: PUSH
8978: LD_INT 10
8980: MUL
8981: PLUS
8982: PUSH
8983: LD_INT 11
8985: PLUS
8986: PPUSH
8987: CALL_OW 110
8991: PLUS
8992: PPUSH
8993: CALL_OW 110
8997: PPUSH
8998: LD_VAR 0 4
9002: PUSH
9003: LD_INT 3
9005: PLUS
9006: PPUSH
9007: CALL_OW 110
9011: PPUSH
9012: LD_VAR 0 5
9016: PPUSH
9017: CALL_OW 468
// end ;
9021: LD_VAR 0 3
9025: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9026: LD_INT 0
9028: PPUSH
9029: PPUSH
9030: PPUSH
9031: PPUSH
9032: PPUSH
9033: PPUSH
9034: PPUSH
9035: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9036: LD_ADDR_VAR 0 8
9040: PUSH
9041: LD_EXP 44
9045: PUSH
9046: LD_VAR 0 1
9050: ARRAY
9051: PPUSH
9052: CALL_OW 469
9056: ST_TO_ADDR
// if not art_hex then
9057: LD_VAR 0 8
9061: NOT
9062: IFFALSE 9066
// exit ;
9064: GO 9557
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9066: LD_ADDR_VAR 0 3
9070: PUSH
9071: LD_INT 2
9073: PUSH
9074: LD_INT 30
9076: PUSH
9077: LD_INT 6
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 30
9086: PUSH
9087: LD_INT 7
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 30
9096: PUSH
9097: LD_INT 8
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: PUSH
9110: EMPTY
9111: LIST
9112: PPUSH
9113: CALL_OW 69
9117: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9118: LD_ADDR_VAR 0 9
9122: PUSH
9123: LD_VAR 0 3
9127: PPUSH
9128: LD_VAR 0 8
9132: PUSH
9133: LD_INT 1
9135: ARRAY
9136: PPUSH
9137: LD_VAR 0 8
9141: PUSH
9142: LD_INT 2
9144: ARRAY
9145: PPUSH
9146: CALL_OW 73
9150: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9151: LD_ADDR_VAR 0 6
9155: PUSH
9156: LD_VAR 0 9
9160: PPUSH
9161: LD_VAR 0 8
9165: PUSH
9166: LD_INT 1
9168: ARRAY
9169: PPUSH
9170: LD_VAR 0 8
9174: PUSH
9175: LD_INT 2
9177: ARRAY
9178: PPUSH
9179: CALL_OW 297
9183: ST_TO_ADDR
// if dist < 9 then
9184: LD_VAR 0 6
9188: PUSH
9189: LD_INT 9
9191: LESS
9192: IFFALSE 9557
// begin side := GetSide ( nearest_lab ) ;
9194: LD_ADDR_VAR 0 4
9198: PUSH
9199: LD_VAR 0 9
9203: PPUSH
9204: CALL_OW 255
9208: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
9209: LD_VAR 0 4
9213: PPUSH
9214: LD_VAR 0 1
9218: PPUSH
9219: CALL 9562 0 2
// base := ( art - 1 ) * 100 ;
9223: LD_ADDR_VAR 0 5
9227: PUSH
9228: LD_VAR 0 1
9232: PUSH
9233: LD_INT 1
9235: MINUS
9236: PUSH
9237: LD_INT 100
9239: MUL
9240: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
9241: LD_INT 24
9243: PPUSH
9244: LD_VAR 0 4
9248: PPUSH
9249: CALL_OW 321
9253: PUSH
9254: LD_INT 2
9256: EQUAL
9257: PUSH
9258: LD_VAR 0 9
9262: PPUSH
9263: CALL_OW 313
9267: AND
9268: IFFALSE 9460
// begin if GetTag ( base + side * 10 + 11 ) then
9270: LD_VAR 0 5
9274: PUSH
9275: LD_VAR 0 4
9279: PUSH
9280: LD_INT 10
9282: MUL
9283: PLUS
9284: PUSH
9285: LD_INT 11
9287: PLUS
9288: PPUSH
9289: CALL_OW 110
9293: IFFALSE 9450
// begin if not GetTag ( base + side * 10 + 13 ) then
9295: LD_VAR 0 5
9299: PUSH
9300: LD_VAR 0 4
9304: PUSH
9305: LD_INT 10
9307: MUL
9308: PLUS
9309: PUSH
9310: LD_INT 13
9312: PLUS
9313: PPUSH
9314: CALL_OW 110
9318: NOT
9319: IFFALSE 9342
// state := GetTag ( base + 03 ) else
9321: LD_ADDR_VAR 0 7
9325: PUSH
9326: LD_VAR 0 5
9330: PUSH
9331: LD_INT 3
9333: PLUS
9334: PPUSH
9335: CALL_OW 110
9339: ST_TO_ADDR
9340: GO 9350
// state := art_gray ;
9342: LD_ADDR_VAR 0 7
9346: PUSH
9347: LD_INT 1
9349: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
9350: LD_VAR 0 5
9354: PUSH
9355: LD_VAR 0 4
9359: PUSH
9360: LD_INT 10
9362: MUL
9363: PLUS
9364: PUSH
9365: LD_INT 15
9367: PLUS
9368: PPUSH
9369: CALL_OW 110
9373: PUSH
9374: LD_VAR 0 5
9378: PUSH
9379: LD_VAR 0 4
9383: PUSH
9384: LD_INT 10
9386: MUL
9387: PLUS
9388: PUSH
9389: LD_INT 15
9391: PLUS
9392: PPUSH
9393: CALL_OW 110
9397: PUSH
9398: LD_VAR 0 9
9402: NONEQUAL
9403: AND
9404: IFFALSE 9420
// DeInit_Lab ( side , art ) ;
9406: LD_VAR 0 4
9410: PPUSH
9411: LD_VAR 0 1
9415: PPUSH
9416: CALL 9562 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
9420: LD_VAR 0 5
9424: PUSH
9425: LD_VAR 0 4
9429: PUSH
9430: LD_INT 10
9432: MUL
9433: PLUS
9434: PUSH
9435: LD_INT 15
9437: PLUS
9438: PPUSH
9439: LD_VAR 0 9
9443: PPUSH
9444: CALL_OW 109
// end else
9448: GO 9458
// state := art_instant ;
9450: LD_ADDR_VAR 0 7
9454: PUSH
9455: LD_INT 2
9457: ST_TO_ADDR
// end else
9458: GO 9468
// state := art_gray ;
9460: LD_ADDR_VAR 0 7
9464: PUSH
9465: LD_INT 1
9467: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
9468: LD_VAR 0 5
9472: PUSH
9473: LD_INT 11
9475: PLUS
9476: PPUSH
9477: LD_VAR 0 9
9481: PPUSH
9482: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
9486: LD_VAR 0 9
9490: PUSH
9491: LD_EXP 45
9495: IN
9496: NOT
9497: IFFALSE 9557
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
9499: LD_VAR 0 4
9503: PPUSH
9504: LD_VAR 0 5
9508: PUSH
9509: LD_INT 1
9511: PLUS
9512: PUSH
9513: LD_VAR 0 5
9517: PUSH
9518: LD_VAR 0 4
9522: PUSH
9523: LD_INT 10
9525: MUL
9526: PLUS
9527: PUSH
9528: LD_INT 11
9530: PLUS
9531: PPUSH
9532: CALL_OW 110
9536: PLUS
9537: PPUSH
9538: CALL_OW 110
9542: PPUSH
9543: LD_VAR 0 7
9547: PPUSH
9548: LD_VAR 0 9
9552: PPUSH
9553: CALL_OW 468
// end ; end ;
9557: LD_VAR 0 2
9561: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
9562: LD_INT 0
9564: PPUSH
9565: PPUSH
9566: PPUSH
// base := ( art - 1 ) * 100 ;
9567: LD_ADDR_VAR 0 4
9571: PUSH
9572: LD_VAR 0 2
9576: PUSH
9577: LD_INT 1
9579: MINUS
9580: PUSH
9581: LD_INT 100
9583: MUL
9584: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9585: LD_ADDR_VAR 0 5
9589: PUSH
9590: LD_VAR 0 4
9594: PUSH
9595: LD_VAR 0 1
9599: PUSH
9600: LD_INT 10
9602: MUL
9603: PLUS
9604: PUSH
9605: LD_INT 15
9607: PLUS
9608: PPUSH
9609: CALL_OW 110
9613: ST_TO_ADDR
// if not lab then
9614: LD_VAR 0 5
9618: NOT
9619: IFFALSE 9640
// lab := GetTag ( base + 11 ) ;
9621: LD_ADDR_VAR 0 5
9625: PUSH
9626: LD_VAR 0 4
9630: PUSH
9631: LD_INT 11
9633: PLUS
9634: PPUSH
9635: CALL_OW 110
9639: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
9640: LD_VAR 0 1
9644: PPUSH
9645: LD_VAR 0 4
9649: PUSH
9650: LD_INT 1
9652: PLUS
9653: PUSH
9654: LD_VAR 0 4
9658: PUSH
9659: LD_VAR 0 1
9663: PUSH
9664: LD_INT 10
9666: MUL
9667: PLUS
9668: PUSH
9669: LD_INT 11
9671: PLUS
9672: PPUSH
9673: CALL_OW 110
9677: PLUS
9678: PPUSH
9679: CALL_OW 110
9683: PPUSH
9684: LD_INT 0
9686: PPUSH
9687: LD_VAR 0 5
9691: PPUSH
9692: CALL_OW 468
// end ;
9696: LD_VAR 0 3
9700: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
9701: LD_INT 0
9703: PPUSH
9704: PPUSH
9705: PPUSH
9706: PPUSH
// side := GetSide ( lab ) ;
9707: LD_ADDR_VAR 0 4
9711: PUSH
9712: LD_VAR 0 1
9716: PPUSH
9717: CALL_OW 255
9721: ST_TO_ADDR
// for art = 1 to artefact_number do
9722: LD_ADDR_VAR 0 3
9726: PUSH
9727: DOUBLE
9728: LD_INT 1
9730: DEC
9731: ST_TO_ADDR
9732: LD_EXP 42
9736: PUSH
9737: FOR_TO
9738: IFFALSE 9894
// begin base := ( art - 1 ) * 100 ;
9740: LD_ADDR_VAR 0 5
9744: PUSH
9745: LD_VAR 0 3
9749: PUSH
9750: LD_INT 1
9752: MINUS
9753: PUSH
9754: LD_INT 100
9756: MUL
9757: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
9758: LD_VAR 0 5
9762: PUSH
9763: LD_INT 11
9765: PLUS
9766: PPUSH
9767: CALL_OW 110
9771: PUSH
9772: LD_VAR 0 1
9776: EQUAL
9777: IFFALSE 9790
// Init_Lab ( art ) else
9779: LD_VAR 0 3
9783: PPUSH
9784: CALL 9026 0 1
9788: GO 9892
// begin if lab = GetTag ( base + side * 10 + 15 ) then
9790: LD_VAR 0 1
9794: PUSH
9795: LD_VAR 0 5
9799: PUSH
9800: LD_VAR 0 4
9804: PUSH
9805: LD_INT 10
9807: MUL
9808: PLUS
9809: PUSH
9810: LD_INT 15
9812: PLUS
9813: PPUSH
9814: CALL_OW 110
9818: EQUAL
9819: IFFALSE 9892
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
9821: LD_VAR 0 5
9825: PUSH
9826: LD_VAR 0 4
9830: PUSH
9831: LD_INT 10
9833: MUL
9834: PLUS
9835: PUSH
9836: LD_INT 13
9838: PLUS
9839: PPUSH
9840: CALL_OW 110
9844: PUSH
9845: LD_INT 0
9847: GREATER
9848: PUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 313
9858: NOT
9859: OR
9860: IFFALSE 9878
// Shadow_Artefact ( side , art ) else
9862: LD_VAR 0 4
9866: PPUSH
9867: LD_VAR 0 3
9871: PPUSH
9872: CALL 8740 0 2
9876: GO 9892
// Highlight_Artefact ( side , art ) ;
9878: LD_VAR 0 4
9882: PPUSH
9883: LD_VAR 0 3
9887: PPUSH
9888: CALL 8872 0 2
// end ; end ; end ;
9892: GO 9737
9894: POP
9895: POP
// end ; end_of_file
9896: LD_VAR 0 2
9900: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
9901: LD_INT 10
9903: PPUSH
9904: CALL_OW 67
// if not IsBusy ( lab ) then
9908: LD_VAR 0 2
9912: PPUSH
9913: CALL_OW 315
9917: NOT
9918: IFFALSE 9945
// begin labs_in_use := labs_in_use diff lab ;
9920: LD_ADDR_EXP 45
9924: PUSH
9925: LD_EXP 45
9929: PUSH
9930: LD_VAR 0 2
9934: DIFF
9935: ST_TO_ADDR
// Update_Artefact ( lab ) ;
9936: LD_VAR 0 2
9940: PPUSH
9941: CALL 9701 0 1
// end ; end ;
9945: PPOPN 2
9947: END
// on ResearchStarted ( tech , lab ) do var un , side ;
9948: LD_INT 0
9950: PPUSH
9951: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
9952: LD_ADDR_EXP 45
9956: PUSH
9957: LD_EXP 45
9961: PUSH
9962: LD_VAR 0 2
9966: ADD
9967: ST_TO_ADDR
// side := GetSide ( lab ) ;
9968: LD_ADDR_VAR 0 4
9972: PUSH
9973: LD_VAR 0 2
9977: PPUSH
9978: CALL_OW 255
9982: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9983: LD_ADDR_VAR 0 3
9987: PUSH
9988: DOUBLE
9989: LD_INT 0
9991: DEC
9992: ST_TO_ADDR
9993: LD_EXP 42
9997: PUSH
9998: LD_INT 1
10000: MINUS
10001: PUSH
10002: FOR_TO
10003: IFFALSE 10082
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10005: LD_VAR 0 2
10009: PUSH
10010: LD_VAR 0 3
10014: PUSH
10015: LD_INT 100
10017: MUL
10018: PUSH
10019: LD_INT 11
10021: PLUS
10022: PPUSH
10023: CALL_OW 110
10027: PUSH
10028: LD_VAR 0 3
10032: PUSH
10033: LD_INT 100
10035: MUL
10036: PUSH
10037: LD_VAR 0 4
10041: PUSH
10042: LD_INT 10
10044: MUL
10045: PLUS
10046: PUSH
10047: LD_INT 15
10049: PLUS
10050: PPUSH
10051: CALL_OW 110
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: IN
10060: IFFALSE 10080
// DeInit_Lab ( side , un + 1 ) ;
10062: LD_VAR 0 4
10066: PPUSH
10067: LD_VAR 0 3
10071: PUSH
10072: LD_INT 1
10074: PLUS
10075: PPUSH
10076: CALL 9562 0 2
10080: GO 10002
10082: POP
10083: POP
// end ;
10084: PPOPN 4
10086: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10087: LD_INT 10
10089: PPUSH
10090: CALL_OW 67
// if not IsBusy ( lab ) then
10094: LD_VAR 0 2
10098: PPUSH
10099: CALL_OW 315
10103: NOT
10104: IFFALSE 10131
// begin labs_in_use := labs_in_use diff lab ;
10106: LD_ADDR_EXP 45
10110: PUSH
10111: LD_EXP 45
10115: PUSH
10116: LD_VAR 0 2
10120: DIFF
10121: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10122: LD_VAR 0 2
10126: PPUSH
10127: CALL 9701 0 1
// end ; end ; end_of_file
10131: PPOPN 2
10133: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10134: LD_INT 0
10136: PPUSH
10137: PPUSH
10138: PPUSH
// vysledek := true ;
10139: LD_ADDR_VAR 0 5
10143: PUSH
10144: LD_INT 1
10146: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
10147: LD_ADDR_VAR 0 6
10151: PUSH
10152: LD_VAR 0 1
10156: PUSH
10157: LD_INT 10
10159: MUL
10160: PUSH
10161: LD_INT 15
10163: PLUS
10164: PPUSH
10165: CALL_OW 110
10169: PPUSH
10170: CALL_OW 274
10174: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
10175: LD_VAR 0 6
10179: PUSH
10180: LD_VAR 0 6
10184: PPUSH
10185: CALL_OW 279
10189: PUSH
10190: LD_INT 3
10192: ARRAY
10193: PUSH
10194: LD_INT 6
10196: PPUSH
10197: CALL_OW 110
10201: GREATEREQUAL
10202: AND
10203: IFFALSE 10293
// begin PlaceSeeing ( x , y , side , - 15 ) ;
10205: LD_VAR 0 2
10209: PPUSH
10210: LD_VAR 0 3
10214: PPUSH
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_INT 15
10222: NEG
10223: PPUSH
10224: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
10228: LD_VAR 0 6
10232: PPUSH
10233: LD_INT 3
10235: PPUSH
10236: LD_VAR 0 6
10240: PPUSH
10241: CALL_OW 279
10245: PUSH
10246: LD_INT 3
10248: ARRAY
10249: PUSH
10250: LD_INT 6
10252: PPUSH
10253: CALL_OW 110
10257: MINUS
10258: PPUSH
10259: CALL_OW 277
// view_data := [ x , y , side ] ;
10263: LD_ADDR_LOC 9
10267: PUSH
10268: LD_VAR 0 2
10272: PUSH
10273: LD_VAR 0 3
10277: PUSH
10278: LD_VAR 0 1
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: ST_TO_ADDR
// enable ( 1 ) ;
10288: LD_INT 1
10290: ENABLE_MARKED
// end else
10291: GO 10301
// vysledek := false ;
10293: LD_ADDR_VAR 0 5
10297: PUSH
10298: LD_INT 0
10300: ST_TO_ADDR
// result := vysledek ;
10301: LD_ADDR_VAR 0 4
10305: PUSH
10306: LD_VAR 0 5
10310: ST_TO_ADDR
// end ;
10311: LD_VAR 0 4
10315: RET
// every 0 0$2 trigger view_data marked 1 do
10316: LD_LOC 9
10320: IFFALSE 10371
10322: GO 10324
10324: DISABLE
// begin wait ( 0 0$30 ) ;
10325: LD_INT 1050
10327: PPUSH
10328: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
10332: LD_LOC 9
10336: PUSH
10337: LD_INT 1
10339: ARRAY
10340: PPUSH
10341: LD_LOC 9
10345: PUSH
10346: LD_INT 2
10348: ARRAY
10349: PPUSH
10350: LD_LOC 9
10354: PUSH
10355: LD_INT 3
10357: ARRAY
10358: PPUSH
10359: CALL_OW 331
// view_data := 0 ;
10363: LD_ADDR_LOC 9
10367: PUSH
10368: LD_INT 0
10370: ST_TO_ADDR
// end ;
10371: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
10372: LD_INT 0
10374: PPUSH
10375: PPUSH
10376: PPUSH
10377: PPUSH
10378: PPUSH
10379: PPUSH
10380: PPUSH
10381: PPUSH
// vysledek := true ;
10382: LD_ADDR_VAR 0 4
10386: PUSH
10387: LD_INT 1
10389: ST_TO_ADDR
// it_can := false ;
10390: LD_ADDR_VAR 0 8
10394: PUSH
10395: LD_INT 0
10397: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
10398: LD_ADDR_VAR 0 9
10402: PUSH
10403: LD_INT 30
10405: PUSH
10406: LD_INT 28
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
10413: LD_ADDR_VAR 0 10
10417: PUSH
10418: LD_INT 8
10420: PUSH
10421: LD_INT 48
10423: PUSH
10424: LD_INT 29
10426: PUSH
10427: LD_INT 49
10429: PUSH
10430: LD_INT 10
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
10440: LD_ADDR_VAR 0 7
10444: PUSH
10445: LD_VAR 0 2
10449: PPUSH
10450: CALL_OW 247
10454: PUSH
10455: LD_INT 3
10457: EQUAL
10458: PUSH
10459: LD_VAR 0 2
10463: PPUSH
10464: CALL_OW 266
10468: PUSH
10469: LD_VAR 0 9
10473: IN
10474: PUSH
10475: LD_VAR 0 2
10479: PPUSH
10480: CALL_OW 269
10484: PUSH
10485: LD_VAR 0 10
10489: IN
10490: OR
10491: AND
10492: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
10493: LD_ADDR_VAR 0 6
10497: PUSH
10498: LD_VAR 0 2
10502: PPUSH
10503: CALL_OW 247
10507: PUSH
10508: LD_INT 2
10510: EQUAL
10511: PUSH
10512: LD_VAR 0 2
10516: PPUSH
10517: CALL_OW 264
10521: PUSH
10522: LD_VAR 0 10
10526: IN
10527: PUSH
10528: LD_VAR 0 2
10532: PPUSH
10533: CALL_OW 262
10537: PUSH
10538: LD_INT 3
10540: EQUAL
10541: OR
10542: AND
10543: ST_TO_ADDR
// case def_artefact_two of 1 :
10544: LD_EXP 2
10548: PUSH
10549: LD_INT 1
10551: DOUBLE
10552: EQUAL
10553: IFTRUE 10557
10555: GO 10574
10557: POP
// if b_can then
10558: LD_VAR 0 7
10562: IFFALSE 10572
// it_can := true ; 2 :
10564: LD_ADDR_VAR 0 8
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
10572: GO 10631
10574: LD_INT 2
10576: DOUBLE
10577: EQUAL
10578: IFTRUE 10582
10580: GO 10599
10582: POP
// if v_can then
10583: LD_VAR 0 6
10587: IFFALSE 10597
// it_can := true ; 3 :
10589: LD_ADDR_VAR 0 8
10593: PUSH
10594: LD_INT 1
10596: ST_TO_ADDR
10597: GO 10631
10599: LD_INT 3
10601: DOUBLE
10602: EQUAL
10603: IFTRUE 10607
10605: GO 10630
10607: POP
// if b_can or v_can then
10608: LD_VAR 0 7
10612: PUSH
10613: LD_VAR 0 6
10617: OR
10618: IFFALSE 10628
// it_can := true ; end ;
10620: LD_ADDR_VAR 0 8
10624: PUSH
10625: LD_INT 1
10627: ST_TO_ADDR
10628: GO 10631
10630: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
10631: LD_ADDR_VAR 0 5
10635: PUSH
10636: LD_INT 100
10638: PUSH
10639: LD_VAR 0 1
10643: PUSH
10644: LD_INT 10
10646: MUL
10647: PLUS
10648: PUSH
10649: LD_INT 15
10651: PLUS
10652: PPUSH
10653: CALL_OW 110
10657: PPUSH
10658: CALL_OW 274
10662: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
10663: LD_VAR 0 5
10667: PUSH
10668: LD_VAR 0 8
10672: AND
10673: PUSH
10674: LD_VAR 0 5
10678: PPUSH
10679: CALL_OW 279
10683: PUSH
10684: LD_INT 3
10686: ARRAY
10687: PUSH
10688: LD_INT 106
10690: PPUSH
10691: CALL_OW 110
10695: GREATEREQUAL
10696: AND
10697: IFFALSE 10745
// begin KillUnit ( un ) ;
10699: LD_VAR 0 2
10703: PPUSH
10704: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
10708: LD_VAR 0 5
10712: PPUSH
10713: LD_INT 3
10715: PPUSH
10716: LD_VAR 0 5
10720: PPUSH
10721: CALL_OW 279
10725: PUSH
10726: LD_INT 3
10728: ARRAY
10729: PUSH
10730: LD_INT 106
10732: PPUSH
10733: CALL_OW 110
10737: MINUS
10738: PPUSH
10739: CALL_OW 277
// end else
10743: GO 10753
// vysledek := false ;
10745: LD_ADDR_VAR 0 4
10749: PUSH
10750: LD_INT 0
10752: ST_TO_ADDR
// result := vysledek ;
10753: LD_ADDR_VAR 0 3
10757: PUSH
10758: LD_VAR 0 4
10762: ST_TO_ADDR
// end ;
10763: LD_VAR 0 3
10767: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
10768: LD_INT 0
10770: PPUSH
10771: PPUSH
10772: PPUSH
10773: PPUSH
// vysledek := true ;
10774: LD_ADDR_VAR 0 5
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
10782: LD_ADDR_VAR 0 7
10786: PUSH
10787: LD_INT 200
10789: PUSH
10790: LD_VAR 0 1
10794: PUSH
10795: LD_INT 10
10797: MUL
10798: PLUS
10799: PUSH
10800: LD_INT 15
10802: PLUS
10803: PPUSH
10804: CALL_OW 110
10808: PPUSH
10809: CALL_OW 274
10813: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
10814: LD_VAR 0 7
10818: PUSH
10819: LD_VAR 0 7
10823: PPUSH
10824: CALL_OW 279
10828: PUSH
10829: LD_INT 3
10831: ARRAY
10832: PUSH
10833: LD_INT 206
10835: PPUSH
10836: CALL_OW 110
10840: GREATEREQUAL
10841: AND
10842: IFFALSE 10898
// begin ArtContamination ( p1 , p2 , 15 ) ;
10844: LD_VAR 0 2
10848: PPUSH
10849: LD_VAR 0 3
10853: PPUSH
10854: LD_INT 15
10856: PPUSH
10857: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
10861: LD_VAR 0 7
10865: PPUSH
10866: LD_INT 3
10868: PPUSH
10869: LD_VAR 0 7
10873: PPUSH
10874: CALL_OW 279
10878: PUSH
10879: LD_INT 3
10881: ARRAY
10882: PUSH
10883: LD_INT 206
10885: PPUSH
10886: CALL_OW 110
10890: MINUS
10891: PPUSH
10892: CALL_OW 277
// end else
10896: GO 10906
// vysledek := false ;
10898: LD_ADDR_VAR 0 5
10902: PUSH
10903: LD_INT 0
10905: ST_TO_ADDR
// result := vysledek ;
10906: LD_ADDR_VAR 0 4
10910: PUSH
10911: LD_VAR 0 5
10915: ST_TO_ADDR
// end ;
10916: LD_VAR 0 4
10920: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
10921: GO 10923
10923: DISABLE
10924: LD_INT 0
10926: PPUSH
10927: PPUSH
10928: PPUSH
// begin for art = 0 to artefact_number do
10929: LD_ADDR_VAR 0 1
10933: PUSH
10934: DOUBLE
10935: LD_INT 0
10937: DEC
10938: ST_TO_ADDR
10939: LD_EXP 42
10943: PUSH
10944: FOR_TO
10945: IFFALSE 11079
// for side = 1 to Side_Positions do
10947: LD_ADDR_VAR 0 2
10951: PUSH
10952: DOUBLE
10953: LD_INT 1
10955: DEC
10956: ST_TO_ADDR
10957: LD_EXP 23
10961: PUSH
10962: FOR_TO
10963: IFFALSE 11075
// begin recharge := art * 100 + side * 10 + 13 ;
10965: LD_ADDR_VAR 0 3
10969: PUSH
10970: LD_VAR 0 1
10974: PUSH
10975: LD_INT 100
10977: MUL
10978: PUSH
10979: LD_VAR 0 2
10983: PUSH
10984: LD_INT 10
10986: MUL
10987: PLUS
10988: PUSH
10989: LD_INT 13
10991: PLUS
10992: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
10993: LD_EXP 23
10997: PUSH
10998: LD_VAR 0 2
11002: ARRAY
11003: PUSH
11004: LD_VAR 0 3
11008: PPUSH
11009: CALL_OW 110
11013: PUSH
11014: LD_INT 0
11016: GREATER
11017: AND
11018: IFFALSE 11073
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11020: LD_VAR 0 3
11024: PPUSH
11025: LD_VAR 0 3
11029: PPUSH
11030: CALL_OW 110
11034: PUSH
11035: LD_INT 1
11037: MINUS
11038: PPUSH
11039: CALL_OW 109
// if not GetTag ( recharge ) then
11043: LD_VAR 0 3
11047: PPUSH
11048: CALL_OW 110
11052: NOT
11053: IFFALSE 11073
// Highlight_Artefact ( side , art + 1 ) ;
11055: LD_VAR 0 2
11059: PPUSH
11060: LD_VAR 0 1
11064: PUSH
11065: LD_INT 1
11067: PLUS
11068: PPUSH
11069: CALL 8872 0 2
// end ; end ;
11073: GO 10962
11075: POP
11076: POP
11077: GO 10944
11079: POP
11080: POP
// enable ;
11081: ENABLE
// end ; end_of_file
11082: PPOPN 3
11084: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11085: LD_INT 0
11087: PPUSH
11088: PPUSH
11089: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11090: LD_INT 18
11092: PPUSH
11093: LD_VAR 0 1
11097: PUSH
11098: LD_INT 1
11100: ARRAY
11101: PPUSH
11102: LD_VAR 0 1
11106: PUSH
11107: LD_INT 2
11109: ARRAY
11110: PPUSH
11111: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11115: LD_VAR 0 1
11119: PUSH
11120: LD_INT 1
11122: ARRAY
11123: PPUSH
11124: LD_VAR 0 1
11128: PUSH
11129: LD_INT 2
11131: ARRAY
11132: PPUSH
11133: CALL_OW 494
// Wait ( 30 ) ;
11137: LD_INT 30
11139: PPUSH
11140: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
11144: LD_INT 18
11146: PPUSH
11147: LD_INT 4
11149: PPUSH
11150: CALL_OW 286
// base := ( art - 1 ) * 100 ;
11154: LD_ADDR_VAR 0 4
11158: PUSH
11159: LD_VAR 0 2
11163: PUSH
11164: LD_INT 1
11166: MINUS
11167: PUSH
11168: LD_INT 100
11170: MUL
11171: ST_TO_ADDR
// if GetTag ( base + 11 ) then
11172: LD_VAR 0 4
11176: PUSH
11177: LD_INT 11
11179: PLUS
11180: PPUSH
11181: CALL_OW 110
11185: IFFALSE 11323
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
11187: LD_ADDR_VAR 0 5
11191: PUSH
11192: LD_VAR 0 4
11196: PUSH
11197: LD_INT 11
11199: PLUS
11200: PPUSH
11201: CALL_OW 110
11205: PPUSH
11206: CALL_OW 255
11210: ST_TO_ADDR
// if GetTag ( base + 12 ) then
11211: LD_VAR 0 4
11215: PUSH
11216: LD_INT 12
11218: PLUS
11219: PPUSH
11220: CALL_OW 110
11224: IFFALSE 11267
// begin ComCancel ( GetTag ( base + 11 ) ) ;
11226: LD_VAR 0 4
11230: PUSH
11231: LD_INT 11
11233: PLUS
11234: PPUSH
11235: CALL_OW 110
11239: PPUSH
11240: CALL_OW 127
// Wait ( 10 ) ;
11244: LD_INT 10
11246: PPUSH
11247: CALL_OW 67
// SetTag ( base + 12 , false ) ;
11251: LD_VAR 0 4
11255: PUSH
11256: LD_INT 12
11258: PLUS
11259: PPUSH
11260: LD_INT 0
11262: PPUSH
11263: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
11267: LD_VAR 0 4
11271: PUSH
11272: LD_VAR 0 5
11276: PUSH
11277: LD_INT 10
11279: MUL
11280: PLUS
11281: PUSH
11282: LD_INT 11
11284: PLUS
11285: PPUSH
11286: CALL_OW 110
11290: NOT
11291: IFFALSE 11307
// DeInit_Lab ( side , art ) ;
11293: LD_VAR 0 5
11297: PPUSH
11298: LD_VAR 0 2
11302: PPUSH
11303: CALL 9562 0 2
// SetTag ( base + 11 , 0 ) ;
11307: LD_VAR 0 4
11311: PUSH
11312: LD_INT 11
11314: PLUS
11315: PPUSH
11316: LD_INT 0
11318: PPUSH
11319: CALL_OW 109
// end ; end ;
11323: LD_VAR 0 3
11327: RET
// every 0 0$5 marked 5 do var hex , un ;
11328: GO 11330
11330: DISABLE
11331: LD_INT 0
11333: PPUSH
11334: PPUSH
// begin if GetTag ( 09 ) then
11335: LD_INT 9
11337: PPUSH
11338: CALL_OW 110
11342: IFFALSE 11381
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
11344: LD_ADDR_VAR 0 1
11348: PUSH
11349: LD_INT 13
11351: PPUSH
11352: CALL_OW 110
11356: PPUSH
11357: CALL_OW 250
11361: PUSH
11362: LD_INT 13
11364: PPUSH
11365: CALL_OW 110
11369: PPUSH
11370: CALL_OW 251
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: ST_TO_ADDR
11379: GO 11400
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
11381: LD_ADDR_VAR 0 1
11385: PUSH
11386: LD_EXP 44
11390: PUSH
11391: LD_INT 1
11393: ARRAY
11394: PPUSH
11395: CALL_OW 469
11399: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11400: LD_VAR 0 1
11404: PUSH
11405: LD_INT 1
11407: ARRAY
11408: PPUSH
11409: LD_VAR 0 1
11413: PUSH
11414: LD_INT 2
11416: ARRAY
11417: PPUSH
11418: LD_INT 16
11420: PPUSH
11421: CALL_OW 309
11425: NOT
11426: IFFALSE 11771
// begin wait ( 3 3$0 ) ;
11428: LD_INT 6300
11430: PPUSH
11431: CALL_OW 67
// if GetTag ( 09 ) then
11435: LD_INT 9
11437: PPUSH
11438: CALL_OW 110
11442: IFFALSE 11489
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
11444: LD_INT 13
11446: PPUSH
11447: CALL_OW 110
11451: PPUSH
11452: LD_INT 4
11454: PPUSH
11455: LD_EXP 44
11459: PUSH
11460: LD_INT 1
11462: ARRAY
11463: NEG
11464: PPUSH
11465: CALL_OW 290
// SetTag ( 09 , 0 ) ;
11469: LD_INT 9
11471: PPUSH
11472: LD_INT 0
11474: PPUSH
11475: CALL_OW 109
// SetTag ( 13 , 0 ) ;
11479: LD_INT 13
11481: PPUSH
11482: LD_INT 0
11484: PPUSH
11485: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 1 ] ) ;
11489: LD_ADDR_VAR 0 1
11493: PUSH
11494: LD_EXP 44
11498: PUSH
11499: LD_INT 1
11501: ARRAY
11502: PPUSH
11503: CALL_OW 469
11507: ST_TO_ADDR
// if not hex then
11508: LD_VAR 0 1
11512: NOT
11513: IFFALSE 11550
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
11515: LD_ADDR_VAR 0 1
11519: PUSH
11520: LD_INT 13
11522: PPUSH
11523: CALL_OW 110
11527: PPUSH
11528: CALL_OW 250
11532: PUSH
11533: LD_INT 13
11535: PPUSH
11536: CALL_OW 110
11540: PPUSH
11541: CALL_OW 251
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: ST_TO_ADDR
// DestroyArtefact ( hex , 1 ) ;
11550: LD_VAR 0 1
11554: PPUSH
11555: LD_INT 1
11557: PPUSH
11558: CALL 11085 0 2
// wait ( 5 ) ;
11562: LD_INT 5
11564: PPUSH
11565: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
11569: LD_ADDR_VAR 0 1
11573: PUSH
11574: LD_INT 16
11576: PPUSH
11577: LD_INT 0
11579: PPUSH
11580: CALL_OW 16
11584: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11585: LD_ADDR_VAR 0 2
11589: PUSH
11590: LD_VAR 0 1
11594: PUSH
11595: LD_INT 1
11597: ARRAY
11598: PPUSH
11599: LD_VAR 0 1
11603: PUSH
11604: LD_INT 2
11606: ARRAY
11607: PPUSH
11608: CALL_OW 428
11612: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
11613: LD_VAR 0 2
11617: PUSH
11618: LD_INT 0
11620: GREATER
11621: PUSH
11622: LD_VAR 0 2
11626: PPUSH
11627: CALL_OW 247
11631: PUSH
11632: LD_INT 3
11634: EQUAL
11635: AND
11636: IFFALSE 11680
// begin KillUnit ( un ) ;
11638: LD_VAR 0 2
11642: PPUSH
11643: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
11647: LD_VAR 0 1
11651: PUSH
11652: LD_INT 1
11654: ARRAY
11655: PPUSH
11656: LD_VAR 0 1
11660: PUSH
11661: LD_INT 2
11663: ARRAY
11664: PPUSH
11665: CALL_OW 428
11669: IFFALSE 11680
// wait ( 10 ) ;
11671: LD_INT 10
11673: PPUSH
11674: CALL_OW 67
11678: GO 11647
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11680: LD_VAR 0 1
11684: PUSH
11685: LD_INT 1
11687: ARRAY
11688: PPUSH
11689: LD_VAR 0 1
11693: PUSH
11694: LD_INT 2
11696: ARRAY
11697: PPUSH
11698: CALL_OW 428
11702: NOT
11703: IFFALSE 11569
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11705: LD_VAR 0 1
11709: PUSH
11710: LD_INT 1
11712: ARRAY
11713: PPUSH
11714: LD_VAR 0 1
11718: PUSH
11719: LD_INT 2
11721: ARRAY
11722: PPUSH
11723: CALL_OW 494
// wait ( 30 ) ;
11727: LD_INT 30
11729: PPUSH
11730: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
11734: LD_INT 4
11736: PPUSH
11737: LD_EXP 44
11741: PUSH
11742: LD_INT 1
11744: ARRAY
11745: PPUSH
11746: LD_VAR 0 1
11750: PUSH
11751: LD_INT 1
11753: ARRAY
11754: PPUSH
11755: LD_VAR 0 1
11759: PUSH
11760: LD_INT 2
11762: ARRAY
11763: PPUSH
11764: LD_INT 0
11766: PPUSH
11767: CALL_OW 58
// end ; enable ;
11771: ENABLE
// end ;
11772: PPOPN 2
11774: END
// every 0 0$5 marked 6 do var hex , un ;
11775: GO 11777
11777: DISABLE
11778: LD_INT 0
11780: PPUSH
11781: PPUSH
// begin if GetTag ( 109 ) then
11782: LD_INT 109
11784: PPUSH
11785: CALL_OW 110
11789: IFFALSE 11828
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
11791: LD_ADDR_VAR 0 1
11795: PUSH
11796: LD_INT 113
11798: PPUSH
11799: CALL_OW 110
11803: PPUSH
11804: CALL_OW 250
11808: PUSH
11809: LD_INT 113
11811: PPUSH
11812: CALL_OW 110
11816: PPUSH
11817: CALL_OW 251
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: ST_TO_ADDR
11826: GO 11847
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
11828: LD_ADDR_VAR 0 1
11832: PUSH
11833: LD_EXP 44
11837: PUSH
11838: LD_INT 2
11840: ARRAY
11841: PPUSH
11842: CALL_OW 469
11846: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11847: LD_VAR 0 1
11851: PUSH
11852: LD_INT 1
11854: ARRAY
11855: PPUSH
11856: LD_VAR 0 1
11860: PUSH
11861: LD_INT 2
11863: ARRAY
11864: PPUSH
11865: LD_INT 16
11867: PPUSH
11868: CALL_OW 309
11872: NOT
11873: IFFALSE 12218
// begin wait ( 3 3$30 ) ;
11875: LD_INT 7350
11877: PPUSH
11878: CALL_OW 67
// if GetTag ( 109 ) then
11882: LD_INT 109
11884: PPUSH
11885: CALL_OW 110
11889: IFFALSE 11936
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 2 ] ) ;
11891: LD_INT 113
11893: PPUSH
11894: CALL_OW 110
11898: PPUSH
11899: LD_INT 4
11901: PPUSH
11902: LD_EXP 44
11906: PUSH
11907: LD_INT 2
11909: ARRAY
11910: NEG
11911: PPUSH
11912: CALL_OW 290
// SetTag ( 109 , 0 ) ;
11916: LD_INT 109
11918: PPUSH
11919: LD_INT 0
11921: PPUSH
11922: CALL_OW 109
// SetTag ( 113 , 0 ) ;
11926: LD_INT 113
11928: PPUSH
11929: LD_INT 0
11931: PPUSH
11932: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 2 ] ) ;
11936: LD_ADDR_VAR 0 1
11940: PUSH
11941: LD_EXP 44
11945: PUSH
11946: LD_INT 2
11948: ARRAY
11949: PPUSH
11950: CALL_OW 469
11954: ST_TO_ADDR
// if not hex then
11955: LD_VAR 0 1
11959: NOT
11960: IFFALSE 11997
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
11962: LD_ADDR_VAR 0 1
11966: PUSH
11967: LD_INT 13
11969: PPUSH
11970: CALL_OW 110
11974: PPUSH
11975: CALL_OW 250
11979: PUSH
11980: LD_INT 13
11982: PPUSH
11983: CALL_OW 110
11987: PPUSH
11988: CALL_OW 251
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: ST_TO_ADDR
// DestroyArtefact ( hex , 2 ) ;
11997: LD_VAR 0 1
12001: PPUSH
12002: LD_INT 2
12004: PPUSH
12005: CALL 11085 0 2
// wait ( 5 ) ;
12009: LD_INT 5
12011: PPUSH
12012: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12016: LD_ADDR_VAR 0 1
12020: PUSH
12021: LD_INT 16
12023: PPUSH
12024: LD_INT 0
12026: PPUSH
12027: CALL_OW 16
12031: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12032: LD_ADDR_VAR 0 2
12036: PUSH
12037: LD_VAR 0 1
12041: PUSH
12042: LD_INT 1
12044: ARRAY
12045: PPUSH
12046: LD_VAR 0 1
12050: PUSH
12051: LD_INT 2
12053: ARRAY
12054: PPUSH
12055: CALL_OW 428
12059: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12060: LD_VAR 0 2
12064: PUSH
12065: LD_INT 0
12067: GREATER
12068: PUSH
12069: LD_VAR 0 2
12073: PPUSH
12074: CALL_OW 247
12078: PUSH
12079: LD_INT 3
12081: EQUAL
12082: AND
12083: IFFALSE 12127
// begin KillUnit ( un ) ;
12085: LD_VAR 0 2
12089: PPUSH
12090: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12094: LD_VAR 0 1
12098: PUSH
12099: LD_INT 1
12101: ARRAY
12102: PPUSH
12103: LD_VAR 0 1
12107: PUSH
12108: LD_INT 2
12110: ARRAY
12111: PPUSH
12112: CALL_OW 428
12116: IFFALSE 12127
// wait ( 10 ) ;
12118: LD_INT 10
12120: PPUSH
12121: CALL_OW 67
12125: GO 12094
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12127: LD_VAR 0 1
12131: PUSH
12132: LD_INT 1
12134: ARRAY
12135: PPUSH
12136: LD_VAR 0 1
12140: PUSH
12141: LD_INT 2
12143: ARRAY
12144: PPUSH
12145: CALL_OW 428
12149: NOT
12150: IFFALSE 12016
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12152: LD_VAR 0 1
12156: PUSH
12157: LD_INT 1
12159: ARRAY
12160: PPUSH
12161: LD_VAR 0 1
12165: PUSH
12166: LD_INT 2
12168: ARRAY
12169: PPUSH
12170: CALL_OW 494
// wait ( 30 ) ;
12174: LD_INT 30
12176: PPUSH
12177: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12181: LD_INT 4
12183: PPUSH
12184: LD_EXP 44
12188: PUSH
12189: LD_INT 2
12191: ARRAY
12192: PPUSH
12193: LD_VAR 0 1
12197: PUSH
12198: LD_INT 1
12200: ARRAY
12201: PPUSH
12202: LD_VAR 0 1
12206: PUSH
12207: LD_INT 2
12209: ARRAY
12210: PPUSH
12211: LD_INT 0
12213: PPUSH
12214: CALL_OW 58
// end ; enable ;
12218: ENABLE
// end ;
12219: PPOPN 2
12221: END
// every 0 0$5 marked 7 do var hex , un ;
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
// begin if GetTag ( 209 ) then
12229: LD_INT 209
12231: PPUSH
12232: CALL_OW 110
12236: IFFALSE 12275
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12238: LD_ADDR_VAR 0 1
12242: PUSH
12243: LD_INT 213
12245: PPUSH
12246: CALL_OW 110
12250: PPUSH
12251: CALL_OW 250
12255: PUSH
12256: LD_INT 213
12258: PPUSH
12259: CALL_OW 110
12263: PPUSH
12264: CALL_OW 251
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: ST_TO_ADDR
12273: GO 12294
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
12275: LD_ADDR_VAR 0 1
12279: PUSH
12280: LD_EXP 44
12284: PUSH
12285: LD_INT 3
12287: ARRAY
12288: PPUSH
12289: CALL_OW 469
12293: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12294: LD_VAR 0 1
12298: PUSH
12299: LD_INT 1
12301: ARRAY
12302: PPUSH
12303: LD_VAR 0 1
12307: PUSH
12308: LD_INT 2
12310: ARRAY
12311: PPUSH
12312: LD_INT 16
12314: PPUSH
12315: CALL_OW 309
12319: NOT
12320: IFFALSE 12665
// begin wait ( 4 4$0 ) ;
12322: LD_INT 8400
12324: PPUSH
12325: CALL_OW 67
// if GetTag ( 209 ) then
12329: LD_INT 209
12331: PPUSH
12332: CALL_OW 110
12336: IFFALSE 12383
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 3 ] ) ;
12338: LD_INT 213
12340: PPUSH
12341: CALL_OW 110
12345: PPUSH
12346: LD_INT 4
12348: PPUSH
12349: LD_EXP 44
12353: PUSH
12354: LD_INT 3
12356: ARRAY
12357: NEG
12358: PPUSH
12359: CALL_OW 290
// SetTag ( 209 , 0 ) ;
12363: LD_INT 209
12365: PPUSH
12366: LD_INT 0
12368: PPUSH
12369: CALL_OW 109
// SetTag ( 213 , 0 ) ;
12373: LD_INT 213
12375: PPUSH
12376: LD_INT 0
12378: PPUSH
12379: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 3 ] ) ;
12383: LD_ADDR_VAR 0 1
12387: PUSH
12388: LD_EXP 44
12392: PUSH
12393: LD_INT 3
12395: ARRAY
12396: PPUSH
12397: CALL_OW 469
12401: ST_TO_ADDR
// if not hex then
12402: LD_VAR 0 1
12406: NOT
12407: IFFALSE 12444
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
12409: LD_ADDR_VAR 0 1
12413: PUSH
12414: LD_INT 13
12416: PPUSH
12417: CALL_OW 110
12421: PPUSH
12422: CALL_OW 250
12426: PUSH
12427: LD_INT 13
12429: PPUSH
12430: CALL_OW 110
12434: PPUSH
12435: CALL_OW 251
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: ST_TO_ADDR
// DestroyArtefact ( hex , 3 ) ;
12444: LD_VAR 0 1
12448: PPUSH
12449: LD_INT 3
12451: PPUSH
12452: CALL 11085 0 2
// wait ( 5 ) ;
12456: LD_INT 5
12458: PPUSH
12459: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12463: LD_ADDR_VAR 0 1
12467: PUSH
12468: LD_INT 16
12470: PPUSH
12471: LD_INT 0
12473: PPUSH
12474: CALL_OW 16
12478: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12479: LD_ADDR_VAR 0 2
12483: PUSH
12484: LD_VAR 0 1
12488: PUSH
12489: LD_INT 1
12491: ARRAY
12492: PPUSH
12493: LD_VAR 0 1
12497: PUSH
12498: LD_INT 2
12500: ARRAY
12501: PPUSH
12502: CALL_OW 428
12506: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12507: LD_VAR 0 2
12511: PUSH
12512: LD_INT 0
12514: GREATER
12515: PUSH
12516: LD_VAR 0 2
12520: PPUSH
12521: CALL_OW 247
12525: PUSH
12526: LD_INT 3
12528: EQUAL
12529: AND
12530: IFFALSE 12574
// begin KillUnit ( un ) ;
12532: LD_VAR 0 2
12536: PPUSH
12537: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12541: LD_VAR 0 1
12545: PUSH
12546: LD_INT 1
12548: ARRAY
12549: PPUSH
12550: LD_VAR 0 1
12554: PUSH
12555: LD_INT 2
12557: ARRAY
12558: PPUSH
12559: CALL_OW 428
12563: IFFALSE 12574
// wait ( 10 ) ;
12565: LD_INT 10
12567: PPUSH
12568: CALL_OW 67
12572: GO 12541
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12574: LD_VAR 0 1
12578: PUSH
12579: LD_INT 1
12581: ARRAY
12582: PPUSH
12583: LD_VAR 0 1
12587: PUSH
12588: LD_INT 2
12590: ARRAY
12591: PPUSH
12592: CALL_OW 428
12596: NOT
12597: IFFALSE 12463
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12599: LD_VAR 0 1
12603: PUSH
12604: LD_INT 1
12606: ARRAY
12607: PPUSH
12608: LD_VAR 0 1
12612: PUSH
12613: LD_INT 2
12615: ARRAY
12616: PPUSH
12617: CALL_OW 494
// wait ( 30 ) ;
12621: LD_INT 30
12623: PPUSH
12624: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12628: LD_INT 4
12630: PPUSH
12631: LD_EXP 44
12635: PUSH
12636: LD_INT 3
12638: ARRAY
12639: PPUSH
12640: LD_VAR 0 1
12644: PUSH
12645: LD_INT 1
12647: ARRAY
12648: PPUSH
12649: LD_VAR 0 1
12653: PUSH
12654: LD_INT 2
12656: ARRAY
12657: PPUSH
12658: LD_INT 0
12660: PPUSH
12661: CALL_OW 58
// end ; enable ;
12665: ENABLE
// end ; end_of_file
12666: PPOPN 2
12668: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
12669: LD_INT 0
12671: PPUSH
12672: PPUSH
// for un in battle_flags_id do
12673: LD_ADDR_VAR 0 2
12677: PUSH
12678: LD_EXP 33
12682: PUSH
12683: FOR_IN
12684: IFFALSE 12759
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
12686: LD_VAR 0 2
12690: PPUSH
12691: LD_INT 1
12693: PUSH
12694: LD_LOC 11
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 2
12705: PUSH
12706: LD_LOC 11
12710: PUSH
12711: LD_INT 2
12713: DIV
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 3
12721: PUSH
12722: LD_LOC 11
12726: PUSH
12727: LD_INT 5
12729: DIV
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 20
12737: PUSH
12738: LD_LOC 11
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: PPUSH
12753: CALL_OW 423
12757: GO 12683
12759: POP
12760: POP
// end ;
12761: LD_VAR 0 1
12765: RET
// every 0 0$0.1 do var un ;
12766: GO 12768
12768: DISABLE
12769: LD_INT 0
12771: PPUSH
// begin if not def_morale_flags then
12772: LD_EXP 56
12776: NOT
12777: IFFALSE 12781
// exit ;
12779: GO 12858
// if not morale_decreasing_time then
12781: LD_EXP 14
12785: NOT
12786: IFFALSE 12790
// exit ;
12788: GO 12858
// strength = 100 ;
12790: LD_ADDR_LOC 11
12794: PUSH
12795: LD_INT 100
12797: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
12798: LD_EXP 14
12802: PPUSH
12803: CALL_OW 67
// strength := strength - 1 ;
12807: LD_ADDR_LOC 11
12811: PUSH
12812: LD_LOC 11
12816: PUSH
12817: LD_INT 1
12819: MINUS
12820: ST_TO_ADDR
// Update_Flags ;
12821: CALL 12669 0 0
// until not strength ;
12825: LD_LOC 11
12829: NOT
12830: IFFALSE 12798
// for un in battle_flags_id do
12832: LD_ADDR_VAR 0 1
12836: PUSH
12837: LD_EXP 33
12841: PUSH
12842: FOR_IN
12843: IFFALSE 12856
// KillBattleFlag ( un ) ;
12845: LD_VAR 0 1
12849: PPUSH
12850: CALL_OW 419
12854: GO 12842
12856: POP
12857: POP
// end ; end_of_file
12858: PPOPN 1
12860: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
12861: LD_INT 0
12863: PPUSH
12864: PPUSH
// if ( not IAmSpec ) then
12865: CALL_OW 531
12869: NOT
12870: IFFALSE 12886
// Result := Limits_Info ^  ;
12872: LD_ADDR_VAR 0 1
12876: PUSH
12877: LD_LOC 23
12881: PUSH
12882: LD_STRING 
12884: ADD
12885: ST_TO_ADDR
// for i := 1 to 8 do
12886: LD_ADDR_VAR 0 2
12890: PUSH
12891: DOUBLE
12892: LD_INT 1
12894: DEC
12895: ST_TO_ADDR
12896: LD_INT 8
12898: PUSH
12899: FOR_TO
12900: IFFALSE 12945
// if Cheaters [ i ] then
12902: LD_LOC 24
12906: PUSH
12907: LD_VAR 0 2
12911: ARRAY
12912: IFFALSE 12943
// Result := Result ^ [ #Cheater , i , i ] ;
12914: LD_ADDR_VAR 0 1
12918: PUSH
12919: LD_VAR 0 1
12923: PUSH
12924: LD_STRING #Cheater
12926: PUSH
12927: LD_VAR 0 2
12931: PUSH
12932: LD_VAR 0 2
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: LIST
12941: ADD
12942: ST_TO_ADDR
12943: GO 12899
12945: POP
12946: POP
// end ;
12947: LD_VAR 0 1
12951: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
12952: LD_INT 0
12954: PPUSH
12955: PPUSH
12956: PPUSH
12957: PPUSH
12958: PPUSH
// case Game_Type of 10 :
12959: LD_EXP 46
12963: PUSH
12964: LD_INT 10
12966: DOUBLE
12967: EQUAL
12968: IFTRUE 12972
12970: GO 12983
12972: POP
// def_game_rules := 1 ; 11 :
12973: LD_ADDR_EXP 47
12977: PUSH
12978: LD_INT 1
12980: ST_TO_ADDR
12981: GO 13003
12983: LD_INT 11
12985: DOUBLE
12986: EQUAL
12987: IFTRUE 12991
12989: GO 13002
12991: POP
// def_game_rules := 3 ; end ;
12992: LD_ADDR_EXP 47
12996: PUSH
12997: LD_INT 3
12999: ST_TO_ADDR
13000: GO 13003
13002: POP
// case def_game_rules of 0 :
13003: LD_EXP 47
13007: PUSH
13008: LD_INT 0
13010: DOUBLE
13011: EQUAL
13012: IFTRUE 13016
13014: GO 13021
13016: POP
// exit ; 1 :
13017: GO 15079
13019: GO 14979
13021: LD_INT 1
13023: DOUBLE
13024: EQUAL
13025: IFTRUE 13029
13027: GO 13245
13029: POP
// begin def_base_level := 2 ;
13030: LD_ADDR_EXP 48
13034: PUSH
13035: LD_INT 2
13037: ST_TO_ADDR
// def_amount_of_people := 2 ;
13038: LD_ADDR_EXP 49
13042: PUSH
13043: LD_INT 2
13045: ST_TO_ADDR
// def_skill_level := 1 ;
13046: LD_ADDR_EXP 50
13050: PUSH
13051: LD_INT 1
13053: ST_TO_ADDR
// def_starting_resources := 2 ;
13054: LD_ADDR_EXP 51
13058: PUSH
13059: LD_INT 2
13061: ST_TO_ADDR
// def_shipments_density := 1 ;
13062: LD_ADDR_EXP 52
13066: PUSH
13067: LD_INT 1
13069: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13070: LD_ADDR_EXP 53
13074: PUSH
13075: LD_INT 0
13077: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13078: LD_ADDR_EXP 54
13082: PUSH
13083: LD_INT 1
13085: ST_TO_ADDR
// def_shared_vision := 1 ;
13086: LD_ADDR_EXP 55
13090: PUSH
13091: LD_INT 1
13093: ST_TO_ADDR
// def_morale_flags := 3 ;
13094: LD_ADDR_EXP 56
13098: PUSH
13099: LD_INT 3
13101: ST_TO_ADDR
// def_siberite_detection := 1 ;
13102: LD_ADDR_EXP 57
13106: PUSH
13107: LD_INT 1
13109: ST_TO_ADDR
// def_people_respawning := 1 ;
13110: LD_ADDR_EXP 58
13114: PUSH
13115: LD_INT 1
13117: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13118: LD_ADDR_EXP 59
13122: PUSH
13123: LD_INT 1
13125: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13126: LD_ADDR_EXP 60
13130: PUSH
13131: LD_INT 0
13133: ST_TO_ADDR
// def_builduptime := 2 ;
13134: LD_ADDR_EXP 61
13138: PUSH
13139: LD_INT 2
13141: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13142: LD_ADDR_VAR 0 2
13146: PUSH
13147: EMPTY
13148: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13149: LD_ADDR_VAR 0 3
13153: PUSH
13154: EMPTY
13155: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13156: LD_ADDR_LOC 18
13160: PUSH
13161: EMPTY
13162: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13163: LD_ADDR_LOC 19
13167: PUSH
13168: EMPTY
13169: ST_TO_ADDR
// Banned_Controls := [ ] ;
13170: LD_ADDR_LOC 20
13174: PUSH
13175: EMPTY
13176: ST_TO_ADDR
// Banned_Engines := [ ] ;
13177: LD_ADDR_LOC 21
13181: PUSH
13182: EMPTY
13183: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13184: LD_ADDR_LOC 16
13188: PUSH
13189: LD_INT 37
13191: PUSH
13192: EMPTY
13193: LIST
13194: PUSH
13195: LD_INT 4
13197: PUSH
13198: LD_INT 5
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 31
13207: PUSH
13208: LD_INT 32
13210: PUSH
13211: LD_INT 33
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
13224: LD_ADDR_LOC 17
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: LD_INT 2
13234: PUSH
13235: LD_INT 4
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: ST_TO_ADDR
// end ; 2 :
13243: GO 14979
13245: LD_INT 2
13247: DOUBLE
13248: EQUAL
13249: IFTRUE 13253
13251: GO 13462
13253: POP
// begin def_base_level := 1 ;
13254: LD_ADDR_EXP 48
13258: PUSH
13259: LD_INT 1
13261: ST_TO_ADDR
// def_amount_of_people := 2 ;
13262: LD_ADDR_EXP 49
13266: PUSH
13267: LD_INT 2
13269: ST_TO_ADDR
// def_skill_level := 3 ;
13270: LD_ADDR_EXP 50
13274: PUSH
13275: LD_INT 3
13277: ST_TO_ADDR
// def_starting_resources := 3 ;
13278: LD_ADDR_EXP 51
13282: PUSH
13283: LD_INT 3
13285: ST_TO_ADDR
// def_shipments_density := 2 ;
13286: LD_ADDR_EXP 52
13290: PUSH
13291: LD_INT 2
13293: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13294: LD_ADDR_EXP 53
13298: PUSH
13299: LD_INT 1
13301: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13302: LD_ADDR_EXP 54
13306: PUSH
13307: LD_INT 2
13309: ST_TO_ADDR
// def_shared_vision := 1 ;
13310: LD_ADDR_EXP 55
13314: PUSH
13315: LD_INT 1
13317: ST_TO_ADDR
// def_morale_flags := 0 ;
13318: LD_ADDR_EXP 56
13322: PUSH
13323: LD_INT 0
13325: ST_TO_ADDR
// def_siberite_detection := 1 ;
13326: LD_ADDR_EXP 57
13330: PUSH
13331: LD_INT 1
13333: ST_TO_ADDR
// def_people_respawning := 0 ;
13334: LD_ADDR_EXP 58
13338: PUSH
13339: LD_INT 0
13341: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13342: LD_ADDR_EXP 59
13346: PUSH
13347: LD_INT 0
13349: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13350: LD_ADDR_EXP 60
13354: PUSH
13355: LD_INT 0
13357: ST_TO_ADDR
// def_builduptime := 2 ;
13358: LD_ADDR_EXP 61
13362: PUSH
13363: LD_INT 2
13365: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13366: LD_ADDR_VAR 0 2
13370: PUSH
13371: LD_INT 1
13373: PUSH
13374: EMPTY
13375: LIST
13376: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13377: LD_ADDR_VAR 0 3
13381: PUSH
13382: EMPTY
13383: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13384: LD_ADDR_LOC 18
13388: PUSH
13389: EMPTY
13390: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13391: LD_ADDR_LOC 19
13395: PUSH
13396: EMPTY
13397: ST_TO_ADDR
// Banned_Controls := [ ] ;
13398: LD_ADDR_LOC 20
13402: PUSH
13403: EMPTY
13404: ST_TO_ADDR
// Banned_Engines := [ ] ;
13405: LD_ADDR_LOC 21
13409: PUSH
13410: EMPTY
13411: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13412: LD_ADDR_LOC 16
13416: PUSH
13417: LD_INT 4
13419: PUSH
13420: LD_INT 5
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 31
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 33
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: LIST
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
13445: LD_ADDR_LOC 17
13449: PUSH
13450: LD_INT 1
13452: PUSH
13453: LD_INT 2
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: ST_TO_ADDR
// end ; 3 :
13460: GO 14979
13462: LD_INT 3
13464: DOUBLE
13465: EQUAL
13466: IFTRUE 13470
13468: GO 13713
13470: POP
// begin def_base_level := 1 ;
13471: LD_ADDR_EXP 48
13475: PUSH
13476: LD_INT 1
13478: ST_TO_ADDR
// def_amount_of_people := 2 ;
13479: LD_ADDR_EXP 49
13483: PUSH
13484: LD_INT 2
13486: ST_TO_ADDR
// def_skill_level := 3 ;
13487: LD_ADDR_EXP 50
13491: PUSH
13492: LD_INT 3
13494: ST_TO_ADDR
// def_starting_resources := 3 ;
13495: LD_ADDR_EXP 51
13499: PUSH
13500: LD_INT 3
13502: ST_TO_ADDR
// def_shipments_density := 1 ;
13503: LD_ADDR_EXP 52
13507: PUSH
13508: LD_INT 1
13510: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13511: LD_ADDR_EXP 53
13515: PUSH
13516: LD_INT 0
13518: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13519: LD_ADDR_EXP 54
13523: PUSH
13524: LD_INT 1
13526: ST_TO_ADDR
// def_shared_vision := 1 ;
13527: LD_ADDR_EXP 55
13531: PUSH
13532: LD_INT 1
13534: ST_TO_ADDR
// def_morale_flags := 0 ;
13535: LD_ADDR_EXP 56
13539: PUSH
13540: LD_INT 0
13542: ST_TO_ADDR
// def_siberite_detection := 1 ;
13543: LD_ADDR_EXP 57
13547: PUSH
13548: LD_INT 1
13550: ST_TO_ADDR
// def_people_respawning := 0 ;
13551: LD_ADDR_EXP 58
13555: PUSH
13556: LD_INT 0
13558: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
13559: LD_ADDR_EXP 59
13563: PUSH
13564: LD_INT 2
13566: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13567: LD_ADDR_EXP 60
13571: PUSH
13572: LD_INT 0
13574: ST_TO_ADDR
// def_builduptime := 1 ;
13575: LD_ADDR_EXP 61
13579: PUSH
13580: LD_INT 1
13582: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_INT 23
13590: PUSH
13591: EMPTY
13592: LIST
13593: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
13594: LD_ADDR_VAR 0 3
13598: PUSH
13599: LD_INT 2
13601: PUSH
13602: LD_INT 37
13604: PUSH
13605: LD_INT 32
13607: PUSH
13608: LD_INT 33
13610: PUSH
13611: LD_INT 36
13613: PUSH
13614: LD_INT 16
13616: PUSH
13617: LD_INT 23
13619: PUSH
13620: LD_INT 21
13622: PUSH
13623: LD_INT 18
13625: PUSH
13626: LD_INT 22
13628: PUSH
13629: LD_INT 20
13631: PUSH
13632: LD_INT 19
13634: PUSH
13635: LD_INT 25
13637: PUSH
13638: LD_INT 17
13640: PUSH
13641: LD_INT 24
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13661: LD_ADDR_LOC 18
13665: PUSH
13666: EMPTY
13667: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13668: LD_ADDR_LOC 19
13672: PUSH
13673: EMPTY
13674: ST_TO_ADDR
// Banned_Controls := [ ] ;
13675: LD_ADDR_LOC 20
13679: PUSH
13680: EMPTY
13681: ST_TO_ADDR
// Banned_Engines := [ ] ;
13682: LD_ADDR_LOC 21
13686: PUSH
13687: EMPTY
13688: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13689: LD_ADDR_LOC 16
13693: PUSH
13694: EMPTY
13695: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13696: LD_ADDR_LOC 17
13700: PUSH
13701: EMPTY
13702: ST_TO_ADDR
// No_Mechs := true ;
13703: LD_ADDR_EXP 62
13707: PUSH
13708: LD_INT 1
13710: ST_TO_ADDR
// end ; 4 :
13711: GO 14979
13713: LD_INT 4
13715: DOUBLE
13716: EQUAL
13717: IFTRUE 13721
13719: GO 13896
13721: POP
// begin def_base_level := 1 ;
13722: LD_ADDR_EXP 48
13726: PUSH
13727: LD_INT 1
13729: ST_TO_ADDR
// def_amount_of_people := 2 ;
13730: LD_ADDR_EXP 49
13734: PUSH
13735: LD_INT 2
13737: ST_TO_ADDR
// def_skill_level := 3 ;
13738: LD_ADDR_EXP 50
13742: PUSH
13743: LD_INT 3
13745: ST_TO_ADDR
// def_starting_resources := 3 ;
13746: LD_ADDR_EXP 51
13750: PUSH
13751: LD_INT 3
13753: ST_TO_ADDR
// def_shipments_density := 2 ;
13754: LD_ADDR_EXP 52
13758: PUSH
13759: LD_INT 2
13761: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13762: LD_ADDR_EXP 53
13766: PUSH
13767: LD_INT 1
13769: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13770: LD_ADDR_EXP 54
13774: PUSH
13775: LD_INT 2
13777: ST_TO_ADDR
// def_shared_vision := 1 ;
13778: LD_ADDR_EXP 55
13782: PUSH
13783: LD_INT 1
13785: ST_TO_ADDR
// def_morale_flags := 0 ;
13786: LD_ADDR_EXP 56
13790: PUSH
13791: LD_INT 0
13793: ST_TO_ADDR
// def_siberite_detection := 1 ;
13794: LD_ADDR_EXP 57
13798: PUSH
13799: LD_INT 1
13801: ST_TO_ADDR
// def_people_respawning := 0 ;
13802: LD_ADDR_EXP 58
13806: PUSH
13807: LD_INT 0
13809: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13810: LD_ADDR_EXP 59
13814: PUSH
13815: LD_INT 0
13817: ST_TO_ADDR
// def_siberite_bomb := 1 ;
13818: LD_ADDR_EXP 60
13822: PUSH
13823: LD_INT 1
13825: ST_TO_ADDR
// def_builduptime := 3 ;
13826: LD_ADDR_EXP 61
13830: PUSH
13831: LD_INT 3
13833: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13834: LD_ADDR_VAR 0 2
13838: PUSH
13839: LD_INT 1
13841: PUSH
13842: EMPTY
13843: LIST
13844: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13845: LD_ADDR_VAR 0 3
13849: PUSH
13850: EMPTY
13851: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13852: LD_ADDR_LOC 18
13856: PUSH
13857: EMPTY
13858: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13859: LD_ADDR_LOC 19
13863: PUSH
13864: EMPTY
13865: ST_TO_ADDR
// Banned_Controls := [ ] ;
13866: LD_ADDR_LOC 20
13870: PUSH
13871: EMPTY
13872: ST_TO_ADDR
// Banned_Engines := [ ] ;
13873: LD_ADDR_LOC 21
13877: PUSH
13878: EMPTY
13879: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13880: LD_ADDR_LOC 16
13884: PUSH
13885: EMPTY
13886: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13887: LD_ADDR_LOC 17
13891: PUSH
13892: EMPTY
13893: ST_TO_ADDR
// end ; 5 :
13894: GO 14979
13896: LD_INT 5
13898: DOUBLE
13899: EQUAL
13900: IFTRUE 13904
13902: GO 14153
13904: POP
// begin def_base_level := 0 ;
13905: LD_ADDR_EXP 48
13909: PUSH
13910: LD_INT 0
13912: ST_TO_ADDR
// def_amount_of_people := 0 ;
13913: LD_ADDR_EXP 49
13917: PUSH
13918: LD_INT 0
13920: ST_TO_ADDR
// def_skill_level := 0 ;
13921: LD_ADDR_EXP 50
13925: PUSH
13926: LD_INT 0
13928: ST_TO_ADDR
// def_starting_resources := 0 ;
13929: LD_ADDR_EXP 51
13933: PUSH
13934: LD_INT 0
13936: ST_TO_ADDR
// def_shipments_density := 0 ;
13937: LD_ADDR_EXP 52
13941: PUSH
13942: LD_INT 0
13944: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13945: LD_ADDR_EXP 53
13949: PUSH
13950: LD_INT 0
13952: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
13953: LD_ADDR_EXP 54
13957: PUSH
13958: LD_INT 0
13960: ST_TO_ADDR
// def_shared_vision := 1 ;
13961: LD_ADDR_EXP 55
13965: PUSH
13966: LD_INT 1
13968: ST_TO_ADDR
// def_morale_flags := 0 ;
13969: LD_ADDR_EXP 56
13973: PUSH
13974: LD_INT 0
13976: ST_TO_ADDR
// def_siberite_detection := 0 ;
13977: LD_ADDR_EXP 57
13981: PUSH
13982: LD_INT 0
13984: ST_TO_ADDR
// def_people_respawning := 1 ;
13985: LD_ADDR_EXP 58
13989: PUSH
13990: LD_INT 1
13992: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13993: LD_ADDR_EXP 59
13997: PUSH
13998: LD_INT 1
14000: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14001: LD_ADDR_EXP 60
14005: PUSH
14006: LD_INT 0
14008: ST_TO_ADDR
// def_builduptime := 0 ;
14009: LD_ADDR_EXP 61
14013: PUSH
14014: LD_INT 0
14016: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
14017: LD_ADDR_VAR 0 2
14021: PUSH
14022: LD_INT 10
14024: PUSH
14025: LD_INT 3
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
14032: LD_ADDR_VAR 0 3
14036: PUSH
14037: LD_INT 12
14039: PUSH
14040: LD_INT 11
14042: PUSH
14043: LD_INT 14
14045: PUSH
14046: LD_INT 13
14048: PUSH
14049: LD_INT 5
14051: PUSH
14052: LD_INT 24
14054: PUSH
14055: LD_INT 21
14057: PUSH
14058: LD_INT 33
14060: PUSH
14061: LD_INT 36
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
14075: LD_ADDR_LOC 18
14079: PUSH
14080: LD_INT 31
14082: PUSH
14083: EMPTY
14084: LIST
14085: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14086: LD_ADDR_LOC 19
14090: PUSH
14091: EMPTY
14092: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
14093: LD_ADDR_LOC 20
14097: PUSH
14098: LD_INT 2
14100: PUSH
14101: EMPTY
14102: LIST
14103: ST_TO_ADDR
// Banned_Engines := [ ] ;
14104: LD_ADDR_LOC 21
14108: PUSH
14109: EMPTY
14110: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
14111: LD_ADDR_LOC 16
14115: PUSH
14116: LD_INT 4
14118: PUSH
14119: EMPTY
14120: LIST
14121: PUSH
14122: LD_INT 31
14124: PUSH
14125: LD_INT 32
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
14136: LD_ADDR_LOC 17
14140: PUSH
14141: LD_INT 1
14143: PUSH
14144: LD_INT 1
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: ST_TO_ADDR
// end ; 6 :
14151: GO 14979
14153: LD_INT 6
14155: DOUBLE
14156: EQUAL
14157: IFTRUE 14161
14159: GO 14364
14161: POP
// begin def_base_level := 1 ;
14162: LD_ADDR_EXP 48
14166: PUSH
14167: LD_INT 1
14169: ST_TO_ADDR
// def_amount_of_people := 2 ;
14170: LD_ADDR_EXP 49
14174: PUSH
14175: LD_INT 2
14177: ST_TO_ADDR
// def_skill_level := 3 ;
14178: LD_ADDR_EXP 50
14182: PUSH
14183: LD_INT 3
14185: ST_TO_ADDR
// def_starting_resources := 3 ;
14186: LD_ADDR_EXP 51
14190: PUSH
14191: LD_INT 3
14193: ST_TO_ADDR
// def_shipments_density := 1 ;
14194: LD_ADDR_EXP 52
14198: PUSH
14199: LD_INT 1
14201: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14202: LD_ADDR_EXP 53
14206: PUSH
14207: LD_INT 0
14209: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14210: LD_ADDR_EXP 54
14214: PUSH
14215: LD_INT 1
14217: ST_TO_ADDR
// def_shared_vision := 1 ;
14218: LD_ADDR_EXP 55
14222: PUSH
14223: LD_INT 1
14225: ST_TO_ADDR
// def_morale_flags := 0 ;
14226: LD_ADDR_EXP 56
14230: PUSH
14231: LD_INT 0
14233: ST_TO_ADDR
// def_siberite_detection := 1 ;
14234: LD_ADDR_EXP 57
14238: PUSH
14239: LD_INT 1
14241: ST_TO_ADDR
// def_people_respawning := 2 ;
14242: LD_ADDR_EXP 58
14246: PUSH
14247: LD_INT 2
14249: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14250: LD_ADDR_EXP 59
14254: PUSH
14255: LD_INT 1
14257: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14258: LD_ADDR_EXP 60
14262: PUSH
14263: LD_INT 0
14265: ST_TO_ADDR
// def_builduptime := 1 ;
14266: LD_ADDR_EXP 61
14270: PUSH
14271: LD_INT 1
14273: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14274: LD_ADDR_VAR 0 2
14278: PUSH
14279: LD_INT 23
14281: PUSH
14282: EMPTY
14283: LIST
14284: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
14285: LD_ADDR_VAR 0 3
14289: PUSH
14290: LD_INT 2
14292: PUSH
14293: LD_INT 37
14295: PUSH
14296: LD_INT 31
14298: PUSH
14299: LD_INT 32
14301: PUSH
14302: LD_INT 33
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14312: LD_ADDR_LOC 18
14316: PUSH
14317: EMPTY
14318: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14319: LD_ADDR_LOC 19
14323: PUSH
14324: EMPTY
14325: ST_TO_ADDR
// Banned_Controls := [ ] ;
14326: LD_ADDR_LOC 20
14330: PUSH
14331: EMPTY
14332: ST_TO_ADDR
// Banned_Engines := [ ] ;
14333: LD_ADDR_LOC 21
14337: PUSH
14338: EMPTY
14339: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14340: LD_ADDR_LOC 16
14344: PUSH
14345: EMPTY
14346: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14347: LD_ADDR_LOC 17
14351: PUSH
14352: EMPTY
14353: ST_TO_ADDR
// No_Mechs := true ;
14354: LD_ADDR_EXP 62
14358: PUSH
14359: LD_INT 1
14361: ST_TO_ADDR
// end ; 7 :
14362: GO 14979
14364: LD_INT 7
14366: DOUBLE
14367: EQUAL
14368: IFTRUE 14372
14370: GO 14570
14372: POP
// begin def_base_level := 1 ;
14373: LD_ADDR_EXP 48
14377: PUSH
14378: LD_INT 1
14380: ST_TO_ADDR
// def_amount_of_people := 2 ;
14381: LD_ADDR_EXP 49
14385: PUSH
14386: LD_INT 2
14388: ST_TO_ADDR
// def_skill_level := 3 ;
14389: LD_ADDR_EXP 50
14393: PUSH
14394: LD_INT 3
14396: ST_TO_ADDR
// def_starting_resources := 3 ;
14397: LD_ADDR_EXP 51
14401: PUSH
14402: LD_INT 3
14404: ST_TO_ADDR
// def_shipments_density := 1 ;
14405: LD_ADDR_EXP 52
14409: PUSH
14410: LD_INT 1
14412: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14413: LD_ADDR_EXP 53
14417: PUSH
14418: LD_INT 1
14420: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14421: LD_ADDR_EXP 54
14425: PUSH
14426: LD_INT 2
14428: ST_TO_ADDR
// def_shared_vision := 1 ;
14429: LD_ADDR_EXP 55
14433: PUSH
14434: LD_INT 1
14436: ST_TO_ADDR
// def_morale_flags := 0 ;
14437: LD_ADDR_EXP 56
14441: PUSH
14442: LD_INT 0
14444: ST_TO_ADDR
// def_siberite_detection := 1 ;
14445: LD_ADDR_EXP 57
14449: PUSH
14450: LD_INT 1
14452: ST_TO_ADDR
// def_people_respawning := 0 ;
14453: LD_ADDR_EXP 58
14457: PUSH
14458: LD_INT 0
14460: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14461: LD_ADDR_EXP 59
14465: PUSH
14466: LD_INT 1
14468: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14469: LD_ADDR_EXP 60
14473: PUSH
14474: LD_INT 0
14476: ST_TO_ADDR
// def_builduptime := 3 ;
14477: LD_ADDR_EXP 61
14481: PUSH
14482: LD_INT 3
14484: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14485: LD_ADDR_VAR 0 2
14489: PUSH
14490: LD_INT 23
14492: PUSH
14493: EMPTY
14494: LIST
14495: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
14496: LD_ADDR_VAR 0 3
14500: PUSH
14501: LD_INT 37
14503: PUSH
14504: EMPTY
14505: LIST
14506: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14507: LD_ADDR_LOC 18
14511: PUSH
14512: EMPTY
14513: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14514: LD_ADDR_LOC 19
14518: PUSH
14519: EMPTY
14520: ST_TO_ADDR
// Banned_Controls := [ ] ;
14521: LD_ADDR_LOC 20
14525: PUSH
14526: EMPTY
14527: ST_TO_ADDR
// Banned_Engines := [ ] ;
14528: LD_ADDR_LOC 21
14532: PUSH
14533: EMPTY
14534: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14535: LD_ADDR_LOC 16
14539: PUSH
14540: LD_INT 31
14542: PUSH
14543: LD_INT 32
14545: PUSH
14546: LD_INT 33
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: PUSH
14554: EMPTY
14555: LIST
14556: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
14557: LD_ADDR_LOC 17
14561: PUSH
14562: LD_INT 10
14564: PUSH
14565: EMPTY
14566: LIST
14567: ST_TO_ADDR
// end ; 8 :
14568: GO 14979
14570: LD_INT 8
14572: DOUBLE
14573: EQUAL
14574: IFTRUE 14578
14576: GO 14978
14578: POP
// begin def_base_level := 0 ;
14579: LD_ADDR_EXP 48
14583: PUSH
14584: LD_INT 0
14586: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
14587: LD_ADDR_EXP 49
14591: PUSH
14592: LD_INT 0
14594: PPUSH
14595: LD_INT 1
14597: PPUSH
14598: CALL_OW 12
14602: ST_TO_ADDR
// def_skill_level := 0 ;
14603: LD_ADDR_EXP 50
14607: PUSH
14608: LD_INT 0
14610: ST_TO_ADDR
// def_starting_resources := 2 ;
14611: LD_ADDR_EXP 51
14615: PUSH
14616: LD_INT 2
14618: ST_TO_ADDR
// def_shipments_density := 1 ;
14619: LD_ADDR_EXP 52
14623: PUSH
14624: LD_INT 1
14626: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14627: LD_ADDR_EXP 53
14631: PUSH
14632: LD_INT 0
14634: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
14635: LD_ADDR_EXP 54
14639: PUSH
14640: LD_INT 0
14642: ST_TO_ADDR
// def_shared_vision := 1 ;
14643: LD_ADDR_EXP 55
14647: PUSH
14648: LD_INT 1
14650: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
14651: LD_ADDR_EXP 56
14655: PUSH
14656: LD_INT 0
14658: PPUSH
14659: LD_INT 2
14661: PPUSH
14662: CALL_OW 12
14666: ST_TO_ADDR
// def_siberite_detection := 0 ;
14667: LD_ADDR_EXP 57
14671: PUSH
14672: LD_INT 0
14674: ST_TO_ADDR
// def_people_respawning := 0 ;
14675: LD_ADDR_EXP 58
14679: PUSH
14680: LD_INT 0
14682: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14683: LD_ADDR_EXP 59
14687: PUSH
14688: LD_INT 2
14690: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14691: LD_ADDR_EXP 60
14695: PUSH
14696: LD_INT 0
14698: ST_TO_ADDR
// def_builduptime := 0 ;
14699: LD_ADDR_EXP 61
14703: PUSH
14704: LD_INT 0
14706: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
14707: LD_ADDR_VAR 0 2
14711: PUSH
14712: LD_INT 23
14714: PUSH
14715: LD_INT 20
14717: PUSH
14718: LD_INT 40
14720: PUSH
14721: LD_INT 47
14723: PUSH
14724: LD_INT 46
14726: PUSH
14727: LD_INT 39
14729: PUSH
14730: LD_INT 71
14732: PUSH
14733: LD_INT 34
14735: PUSH
14736: LD_INT 41
14738: PUSH
14739: LD_INT 44
14741: PUSH
14742: LD_INT 17
14744: PUSH
14745: LD_INT 16
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
14762: LD_ADDR_VAR 0 3
14766: PUSH
14767: LD_INT 37
14769: PUSH
14770: LD_INT 5
14772: PUSH
14773: LD_INT 13
14775: PUSH
14776: LD_INT 34
14778: PUSH
14779: LD_INT 12
14781: PUSH
14782: LD_INT 15
14784: PUSH
14785: LD_INT 11
14787: PUSH
14788: LD_INT 14
14790: PUSH
14791: LD_INT 29
14793: PUSH
14794: LD_INT 30
14796: PUSH
14797: LD_INT 28
14799: PUSH
14800: LD_INT 24
14802: PUSH
14803: LD_INT 25
14805: PUSH
14806: LD_INT 20
14808: PUSH
14809: LD_INT 21
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_INT 36
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14837: LD_ADDR_LOC 18
14841: PUSH
14842: EMPTY
14843: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
14844: LD_ADDR_LOC 19
14848: PUSH
14849: LD_INT 14
14851: PUSH
14852: EMPTY
14853: LIST
14854: ST_TO_ADDR
// Banned_Controls := [ ] ;
14855: LD_ADDR_LOC 20
14859: PUSH
14860: EMPTY
14861: ST_TO_ADDR
// Banned_Engines := [ ] ;
14862: LD_ADDR_LOC 21
14866: PUSH
14867: EMPTY
14868: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
14869: LD_ADDR_LOC 16
14873: PUSH
14874: LD_INT 31
14876: PUSH
14877: LD_INT 32
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 4
14886: PUSH
14887: EMPTY
14888: LIST
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
14894: LD_ADDR_LOC 17
14898: PUSH
14899: LD_INT 2
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: ST_TO_ADDR
// for i := 1 to 8 do
14909: LD_ADDR_VAR 0 4
14913: PUSH
14914: DOUBLE
14915: LD_INT 1
14917: DEC
14918: ST_TO_ADDR
14919: LD_INT 8
14921: PUSH
14922: FOR_TO
14923: IFFALSE 14974
// if ( Side_Nations [ i ] = 3 ) then
14925: LD_EXP 24
14929: PUSH
14930: LD_VAR 0 4
14934: ARRAY
14935: PUSH
14936: LD_INT 3
14938: EQUAL
14939: IFFALSE 14972
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
14941: LD_ADDR_EXP 24
14945: PUSH
14946: LD_EXP 24
14950: PPUSH
14951: LD_VAR 0 4
14955: PPUSH
14956: LD_INT 1
14958: PPUSH
14959: LD_INT 2
14961: PPUSH
14962: CALL_OW 12
14966: PPUSH
14967: CALL_OW 1
14971: ST_TO_ADDR
14972: GO 14922
14974: POP
14975: POP
// end ; end ;
14976: GO 14979
14978: POP
// for i := 1 to 8 do
14979: LD_ADDR_VAR 0 4
14983: PUSH
14984: DOUBLE
14985: LD_INT 1
14987: DEC
14988: ST_TO_ADDR
14989: LD_INT 8
14991: PUSH
14992: FOR_TO
14993: IFFALSE 15077
// if Side_Positions [ i ] then
14995: LD_EXP 23
14999: PUSH
15000: LD_VAR 0 4
15004: ARRAY
15005: IFFALSE 15075
// begin for j in Unavailable_Techs do
15007: LD_ADDR_VAR 0 5
15011: PUSH
15012: LD_VAR 0 2
15016: PUSH
15017: FOR_IN
15018: IFFALSE 15039
// SetTech ( j , i , 0 ) ;
15020: LD_VAR 0 5
15024: PPUSH
15025: LD_VAR 0 4
15029: PPUSH
15030: LD_INT 0
15032: PPUSH
15033: CALL_OW 322
15037: GO 15017
15039: POP
15040: POP
// for j in Unavailable_Builds do
15041: LD_ADDR_VAR 0 5
15045: PUSH
15046: LD_VAR 0 3
15050: PUSH
15051: FOR_IN
15052: IFFALSE 15073
// SetRestrict ( j , i , 0 ) ;
15054: LD_VAR 0 5
15058: PPUSH
15059: LD_VAR 0 4
15063: PPUSH
15064: LD_INT 0
15066: PPUSH
15067: CALL_OW 324
15071: GO 15051
15073: POP
15074: POP
// end ;
15075: GO 14992
15077: POP
15078: POP
// end ;
15079: LD_VAR 0 1
15083: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
15084: LD_INT 0
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
// for i := 1 to Restricted_Builds do
15093: LD_ADDR_VAR 0 2
15097: PUSH
15098: DOUBLE
15099: LD_INT 1
15101: DEC
15102: ST_TO_ADDR
15103: LD_LOC 16
15107: PUSH
15108: FOR_TO
15109: IFFALSE 15419
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
15111: LD_LOC 16
15115: PUSH
15116: LD_VAR 0 2
15120: ARRAY
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: PUSH
15126: LD_INT 31
15128: DOUBLE
15129: EQUAL
15130: IFTRUE 15146
15132: LD_INT 32
15134: DOUBLE
15135: EQUAL
15136: IFTRUE 15146
15138: LD_INT 33
15140: DOUBLE
15141: EQUAL
15142: IFTRUE 15146
15144: GO 15157
15146: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
15147: LD_ADDR_VAR 0 6
15151: PUSH
15152: LD_STRING #Turrets
15154: ST_TO_ADDR
15155: GO 15202
15157: LD_INT 4
15159: DOUBLE
15160: EQUAL
15161: IFTRUE 15171
15163: LD_INT 5
15165: DOUBLE
15166: EQUAL
15167: IFTRUE 15171
15169: GO 15182
15171: POP
// btype := #Armouries ; b_Behemoth :
15172: LD_ADDR_VAR 0 6
15176: PUSH
15177: LD_STRING #Armouries
15179: ST_TO_ADDR
15180: GO 15202
15182: LD_INT 37
15184: DOUBLE
15185: EQUAL
15186: IFTRUE 15190
15188: GO 15201
15190: POP
// btype := #Behemoths ; end ;
15191: LD_ADDR_VAR 0 6
15195: PUSH
15196: LD_STRING #Behemoths
15198: ST_TO_ADDR
15199: GO 15202
15201: POP
// list := [ ] ;
15202: LD_ADDR_VAR 0 7
15206: PUSH
15207: EMPTY
15208: ST_TO_ADDR
// for j := 1 to 8 do
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: DOUBLE
15215: LD_INT 1
15217: DEC
15218: ST_TO_ADDR
15219: LD_INT 8
15221: PUSH
15222: FOR_TO
15223: IFFALSE 15316
// if Side_Positions [ j ] then
15225: LD_EXP 23
15229: PUSH
15230: LD_VAR 0 3
15234: ARRAY
15235: IFFALSE 15314
// begin amount := 0 ;
15237: LD_ADDR_VAR 0 5
15241: PUSH
15242: LD_INT 0
15244: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
15245: LD_ADDR_VAR 0 4
15249: PUSH
15250: LD_LOC 16
15254: PUSH
15255: LD_VAR 0 2
15259: ARRAY
15260: PUSH
15261: FOR_IN
15262: IFFALSE 15310
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
15264: LD_ADDR_VAR 0 5
15268: PUSH
15269: LD_VAR 0 5
15273: PUSH
15274: LD_INT 22
15276: PUSH
15277: LD_VAR 0 3
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 30
15288: PUSH
15289: LD_VAR 0 4
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PPUSH
15302: CALL_OW 69
15306: PLUS
15307: ST_TO_ADDR
15308: GO 15261
15310: POP
15311: POP
// break ;
15312: GO 15316
// end ;
15314: GO 15222
15316: POP
15317: POP
// list := [ ] ;
15318: LD_ADDR_VAR 0 7
15322: PUSH
15323: EMPTY
15324: ST_TO_ADDR
// for j := 1 to 8 do
15325: LD_ADDR_VAR 0 3
15329: PUSH
15330: DOUBLE
15331: LD_INT 1
15333: DEC
15334: ST_TO_ADDR
15335: LD_INT 8
15337: PUSH
15338: FOR_TO
15339: IFFALSE 15359
// list := list ^ amount ;
15341: LD_ADDR_VAR 0 7
15345: PUSH
15346: LD_VAR 0 7
15350: PUSH
15351: LD_VAR 0 5
15355: ADD
15356: ST_TO_ADDR
15357: GO 15338
15359: POP
15360: POP
// Already_Built := Already_Built ^ [ list ] ;
15361: LD_ADDR_LOC 22
15365: PUSH
15366: LD_LOC 22
15370: PUSH
15371: LD_VAR 0 7
15375: PUSH
15376: EMPTY
15377: LIST
15378: ADD
15379: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15380: LD_ADDR_LOC 23
15384: PUSH
15385: LD_LOC 23
15389: PUSH
15390: LD_VAR 0 6
15394: PUSH
15395: LD_VAR 0 5
15399: PUSH
15400: LD_LOC 17
15404: PUSH
15405: LD_VAR 0 2
15409: ARRAY
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: LIST
15415: ADD
15416: ST_TO_ADDR
// end ;
15417: GO 15108
15419: POP
15420: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15421: LD_ADDR_LOC 24
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: LD_INT 0
15431: PUSH
15432: LD_INT 0
15434: PUSH
15435: LD_INT 0
15437: PUSH
15438: LD_INT 0
15440: PUSH
15441: LD_INT 0
15443: PUSH
15444: LD_INT 0
15446: PUSH
15447: LD_INT 0
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: ST_TO_ADDR
// if Limits_Info then
15460: LD_LOC 23
15464: IFFALSE 15480
// Limits_Info := #Limits ^ Limits_Info ;
15466: LD_ADDR_LOC 23
15470: PUSH
15471: LD_STRING #Limits
15473: PUSH
15474: LD_LOC 23
15478: ADD
15479: ST_TO_ADDR
// end ;
15480: LD_VAR 0 1
15484: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15485: LD_INT 0
15487: PPUSH
15488: PPUSH
15489: PPUSH
15490: PPUSH
// for i := 1 to Restricted_Builds do
15491: LD_ADDR_VAR 0 7
15495: PUSH
15496: DOUBLE
15497: LD_INT 1
15499: DEC
15500: ST_TO_ADDR
15501: LD_LOC 16
15505: PUSH
15506: FOR_TO
15507: IFFALSE 15930
// if BType in Restricted_Builds [ i ] then
15509: LD_VAR 0 2
15513: PUSH
15514: LD_LOC 16
15518: PUSH
15519: LD_VAR 0 7
15523: ARRAY
15524: IN
15525: IFFALSE 15928
// begin if old_side then
15527: LD_VAR 0 4
15531: IFFALSE 15657
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15533: LD_LOC 22
15537: PUSH
15538: LD_VAR 0 7
15542: ARRAY
15543: PUSH
15544: LD_VAR 0 3
15548: ARRAY
15549: PUSH
15550: LD_VAR 0 5
15554: PLUS
15555: PUSH
15556: LD_LOC 17
15560: PUSH
15561: LD_VAR 0 7
15565: ARRAY
15566: GREATER
15567: IFFALSE 15593
// begin SetSide ( un , old_side ) ;
15569: LD_VAR 0 1
15573: PPUSH
15574: LD_VAR 0 4
15578: PPUSH
15579: CALL_OW 235
// count := 0 ;
15583: LD_ADDR_VAR 0 5
15587: PUSH
15588: LD_INT 0
15590: ST_TO_ADDR
// end else
15591: GO 15657
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15593: LD_ADDR_LOC 22
15597: PUSH
15598: LD_LOC 22
15602: PPUSH
15603: LD_VAR 0 7
15607: PPUSH
15608: LD_LOC 22
15612: PUSH
15613: LD_VAR 0 7
15617: ARRAY
15618: PPUSH
15619: LD_VAR 0 4
15623: PPUSH
15624: LD_LOC 22
15628: PUSH
15629: LD_VAR 0 7
15633: ARRAY
15634: PUSH
15635: LD_VAR 0 4
15639: ARRAY
15640: PUSH
15641: LD_VAR 0 5
15645: MINUS
15646: PPUSH
15647: CALL_OW 1
15651: PPUSH
15652: CALL_OW 1
15656: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15657: LD_ADDR_LOC 22
15661: PUSH
15662: LD_LOC 22
15666: PPUSH
15667: LD_VAR 0 7
15671: PPUSH
15672: LD_LOC 22
15676: PUSH
15677: LD_VAR 0 7
15681: ARRAY
15682: PPUSH
15683: LD_VAR 0 3
15687: PPUSH
15688: LD_LOC 22
15692: PUSH
15693: LD_VAR 0 7
15697: ARRAY
15698: PUSH
15699: LD_VAR 0 3
15703: ARRAY
15704: PUSH
15705: LD_VAR 0 5
15709: PLUS
15710: PPUSH
15711: CALL_OW 1
15715: PPUSH
15716: CALL_OW 1
15720: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15721: LD_VAR 0 5
15725: PUSH
15726: LD_INT 0
15728: NONEQUAL
15729: PUSH
15730: LD_VAR 0 3
15734: PUSH
15735: LD_OWVAR 2
15739: EQUAL
15740: AND
15741: IFFALSE 15784
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15743: LD_ADDR_LOC 23
15747: PUSH
15748: LD_LOC 23
15752: PPUSH
15753: LD_INT 3
15755: PUSH
15756: LD_VAR 0 7
15760: MUL
15761: PPUSH
15762: LD_LOC 22
15766: PUSH
15767: LD_VAR 0 7
15771: ARRAY
15772: PUSH
15773: LD_VAR 0 3
15777: ARRAY
15778: PPUSH
15779: CALL_OW 1
15783: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15784: LD_LOC 22
15788: PUSH
15789: LD_VAR 0 7
15793: ARRAY
15794: PUSH
15795: LD_VAR 0 3
15799: ARRAY
15800: PUSH
15801: LD_LOC 17
15805: PUSH
15806: LD_VAR 0 7
15810: ARRAY
15811: GREATER
15812: IFFALSE 15839
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15814: LD_ADDR_LOC 24
15818: PUSH
15819: LD_LOC 24
15823: PPUSH
15824: LD_VAR 0 3
15828: PPUSH
15829: LD_INT 1
15831: PPUSH
15832: CALL_OW 1
15836: ST_TO_ADDR
// end else
15837: GO 15926
// begin for j := 1 to Restricted_Builds do
15839: LD_ADDR_VAR 0 8
15843: PUSH
15844: DOUBLE
15845: LD_INT 1
15847: DEC
15848: ST_TO_ADDR
15849: LD_LOC 16
15853: PUSH
15854: FOR_TO
15855: IFFALSE 15899
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15857: LD_LOC 22
15861: PUSH
15862: LD_VAR 0 8
15866: ARRAY
15867: PUSH
15868: LD_VAR 0 3
15872: ARRAY
15873: PUSH
15874: LD_LOC 17
15878: PUSH
15879: LD_VAR 0 8
15883: ARRAY
15884: GREATER
15885: IFFALSE 15897
// begin Is_Cheater := true ;
15887: LD_ADDR_VAR 0 9
15891: PUSH
15892: LD_INT 1
15894: ST_TO_ADDR
// break ;
15895: GO 15899
// end ;
15897: GO 15854
15899: POP
15900: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15901: LD_ADDR_LOC 24
15905: PUSH
15906: LD_LOC 24
15910: PPUSH
15911: LD_VAR 0 3
15915: PPUSH
15916: LD_VAR 0 9
15920: PPUSH
15921: CALL_OW 1
15925: ST_TO_ADDR
// end ; break ;
15926: GO 15930
// end ;
15928: GO 15506
15930: POP
15931: POP
// end ;
15932: LD_VAR 0 6
15936: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15937: LD_VAR 0 5
15941: PUSH
15942: LD_LOC 18
15946: IN
15947: PUSH
15948: LD_VAR 0 2
15952: PUSH
15953: LD_LOC 19
15957: IN
15958: OR
15959: PUSH
15960: LD_VAR 0 4
15964: PUSH
15965: LD_LOC 20
15969: IN
15970: OR
15971: PUSH
15972: LD_VAR 0 3
15976: PUSH
15977: LD_LOC 21
15981: IN
15982: OR
15983: IFFALSE 15994
// ComCancel ( factory ) ;
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 127
// end ;
15994: PPOPN 5
15996: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15997: LD_VAR 0 2
16001: PUSH
16002: LD_LOC 18
16006: IN
16007: IFFALSE 16018
// ComCancel ( building ) ;
16009: LD_VAR 0 1
16013: PPUSH
16014: CALL_OW 127
// end ; end_of_file
16018: PPOPN 2
16020: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
16021: LD_INT 0
16023: PPUSH
16024: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
16025: LD_ADDR_VAR 0 2
16029: PUSH
16030: LD_STRING #Multi1x1-Time
16032: PUSH
16033: LD_OWVAR 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: ST_TO_ADDR
// if WaitServerStrings then
16042: LD_EXP 64
16046: IFFALSE 16064
// AllStrings = AllStrings ^ WaitServerStrings ;
16048: LD_ADDR_VAR 0 2
16052: PUSH
16053: LD_VAR 0 2
16057: PUSH
16058: LD_EXP 64
16062: ADD
16063: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
16064: LD_INT 0
16066: PUSH
16067: LD_EXP 18
16071: PUSH
16072: LD_OWVAR 1
16076: MINUS
16077: LESSEQUAL
16078: IFFALSE 16109
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
16080: LD_ADDR_VAR 0 2
16084: PUSH
16085: LD_VAR 0 2
16089: PUSH
16090: LD_STRING #allowedsibbomb
16092: PUSH
16093: LD_EXP 18
16097: PUSH
16098: LD_OWVAR 1
16102: MINUS
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: ADD
16108: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
16109: LD_INT 0
16111: PUSH
16112: LD_EXP 68
16116: PUSH
16117: LD_OWVAR 1
16121: MINUS
16122: LESSEQUAL
16123: IFFALSE 16154
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
16125: LD_ADDR_VAR 0 2
16129: PUSH
16130: LD_VAR 0 2
16134: PUSH
16135: LD_STRING #builduptime
16137: PUSH
16138: LD_EXP 68
16142: PUSH
16143: LD_OWVAR 1
16147: MINUS
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: ADD
16153: ST_TO_ADDR
// if ( ExtraStrings ) then
16154: LD_EXP 63
16158: IFFALSE 16180
// AllStrings := AllStrings ^  ^ ExtraStrings ;
16160: LD_ADDR_VAR 0 2
16164: PUSH
16165: LD_VAR 0 2
16169: PUSH
16170: LD_STRING 
16172: ADD
16173: PUSH
16174: LD_EXP 63
16178: ADD
16179: ST_TO_ADDR
// if Display_kings and not isSGUI then
16180: LD_EXP 65
16184: PUSH
16185: LD_OWVAR 83
16189: NOT
16190: AND
16191: IFFALSE 16209
// AllStrings = AllStrings ^ Display_kings ;
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: LD_VAR 0 2
16202: PUSH
16203: LD_EXP 65
16207: ADD
16208: ST_TO_ADDR
// if ( LimitsStrings ) then
16209: CALL 12861 0 0
16213: IFFALSE 16235
// AllStrings := AllStrings ^  ^ LimitsStrings ;
16215: LD_ADDR_VAR 0 2
16219: PUSH
16220: LD_VAR 0 2
16224: PUSH
16225: LD_STRING 
16227: ADD
16228: PUSH
16229: CALL 12861 0 0
16233: ADD
16234: ST_TO_ADDR
// Display_Strings := AllStrings ;
16235: LD_ADDR_OWVAR 47
16239: PUSH
16240: LD_VAR 0 2
16244: ST_TO_ADDR
// end ;
16245: LD_VAR 0 1
16249: RET
// every 0 0$1 do
16250: GO 16252
16252: DISABLE
// begin ShowTimer ;
16253: CALL 16021 0 0
// enable ;
16257: ENABLE
// end ; end_of_file
16258: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
16259: LD_INT 0
16261: PPUSH
16262: PPUSH
16263: PPUSH
// sharedPoints1 = [ ] ;
16264: LD_ADDR_LOC 25
16268: PUSH
16269: EMPTY
16270: ST_TO_ADDR
// sharedPoints2 = [ ] ;
16271: LD_ADDR_LOC 26
16275: PUSH
16276: EMPTY
16277: ST_TO_ADDR
// sharedPoints3 = [ ] ;
16278: LD_ADDR_LOC 27
16282: PUSH
16283: EMPTY
16284: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
16285: LD_ADDR_VAR 0 2
16289: PUSH
16290: DOUBLE
16291: LD_INT 1
16293: DEC
16294: ST_TO_ADDR
16295: LD_EXP 23
16299: PUSH
16300: LD_INT 0
16302: PLUS
16303: PUSH
16304: FOR_TO
16305: IFFALSE 16407
// begin if not Side_Positions [ i ] = 0 then
16307: LD_EXP 23
16311: PUSH
16312: LD_VAR 0 2
16316: ARRAY
16317: PUSH
16318: LD_INT 0
16320: EQUAL
16321: NOT
16322: IFFALSE 16336
// SetMultiScore ( i , 0 ) ;
16324: LD_VAR 0 2
16328: PPUSH
16329: LD_INT 0
16331: PPUSH
16332: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
16336: LD_ADDR_LOC 25
16340: PUSH
16341: LD_LOC 25
16345: PPUSH
16346: LD_VAR 0 2
16350: PPUSH
16351: LD_INT 0
16353: PPUSH
16354: CALL_OW 1
16358: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
16359: LD_ADDR_LOC 26
16363: PUSH
16364: LD_LOC 26
16368: PPUSH
16369: LD_VAR 0 2
16373: PPUSH
16374: LD_INT 0
16376: PPUSH
16377: CALL_OW 1
16381: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
16382: LD_ADDR_LOC 27
16386: PUSH
16387: LD_LOC 27
16391: PPUSH
16392: LD_VAR 0 2
16396: PPUSH
16397: LD_INT 0
16399: PPUSH
16400: CALL_OW 1
16404: ST_TO_ADDR
// end ;
16405: GO 16304
16407: POP
16408: POP
// pointGame = true ;
16409: LD_ADDR_LOC 28
16413: PUSH
16414: LD_INT 1
16416: ST_TO_ADDR
// end ;
16417: LD_VAR 0 1
16421: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
16422: LD_LOC 28
16426: IFFALSE 16837
16428: GO 16430
16430: DISABLE
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
16437: PPUSH
16438: PPUSH
16439: PPUSH
16440: PPUSH
16441: PPUSH
16442: PPUSH
16443: PPUSH
16444: PPUSH
16445: PPUSH
// begin if isSGUI then
16446: LD_OWVAR 83
16450: IFFALSE 16837
// begin if Teams [ 1 ] then
16452: LD_EXP 22
16456: PUSH
16457: LD_INT 1
16459: ARRAY
16460: IFFALSE 16472
// red = true else
16462: LD_ADDR_VAR 0 2
16466: PUSH
16467: LD_INT 1
16469: ST_TO_ADDR
16470: GO 16480
// red = false ;
16472: LD_ADDR_VAR 0 2
16476: PUSH
16477: LD_INT 0
16479: ST_TO_ADDR
// if Teams [ 2 ] then
16480: LD_EXP 22
16484: PUSH
16485: LD_INT 2
16487: ARRAY
16488: IFFALSE 16500
// blue = true else
16490: LD_ADDR_VAR 0 3
16494: PUSH
16495: LD_INT 1
16497: ST_TO_ADDR
16498: GO 16508
// blue = false ;
16500: LD_ADDR_VAR 0 3
16504: PUSH
16505: LD_INT 0
16507: ST_TO_ADDR
// if Teams [ 3 ] then
16508: LD_EXP 22
16512: PUSH
16513: LD_INT 3
16515: ARRAY
16516: IFFALSE 16528
// yel = true else
16518: LD_ADDR_VAR 0 4
16522: PUSH
16523: LD_INT 1
16525: ST_TO_ADDR
16526: GO 16536
// yel = false ;
16528: LD_ADDR_VAR 0 4
16532: PUSH
16533: LD_INT 0
16535: ST_TO_ADDR
// if Teams [ 4 ] then
16536: LD_EXP 22
16540: PUSH
16541: LD_INT 4
16543: ARRAY
16544: IFFALSE 16556
// green = true else
16546: LD_ADDR_VAR 0 5
16550: PUSH
16551: LD_INT 1
16553: ST_TO_ADDR
16554: GO 16564
// green = false ;
16556: LD_ADDR_VAR 0 5
16560: PUSH
16561: LD_INT 0
16563: ST_TO_ADDR
// if def_public_score then
16564: LD_EXP 6
16568: IFFALSE 16580
// p = true else
16570: LD_ADDR_VAR 0 12
16574: PUSH
16575: LD_INT 1
16577: ST_TO_ADDR
16578: GO 16588
// p = false ;
16580: LD_ADDR_VAR 0 12
16584: PUSH
16585: LD_INT 0
16587: ST_TO_ADDR
// if team_game then
16588: LD_EXP 25
16592: IFFALSE 16673
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
16594: LD_ADDR_VAR 0 13
16598: PUSH
16599: LD_INT 3
16601: PUSH
16602: LD_INT 1
16604: PUSH
16605: LD_INT 2
16607: PUSH
16608: LD_INT 7
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: PUSH
16617: LD_EXP 28
16621: ARRAY
16622: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
16623: LD_ADDR_VAR 0 10
16627: PUSH
16628: LD_STRING {
16630: PUSH
16631: LD_VAR 0 3
16635: STR
16636: PUSH
16637: LD_STRING ,
16639: STR
16640: PUSH
16641: LD_VAR 0 4
16645: STR
16646: PUSH
16647: LD_STRING ,
16649: STR
16650: PUSH
16651: LD_VAR 0 2
16655: STR
16656: PUSH
16657: LD_STRING ,0,0,0,
16659: STR
16660: PUSH
16661: LD_VAR 0 5
16665: STR
16666: PUSH
16667: LD_STRING ,0}
16669: STR
16670: ST_TO_ADDR
// end else
16671: GO 16773
// begin you = your_side ;
16673: LD_ADDR_VAR 0 13
16677: PUSH
16678: LD_OWVAR 2
16682: ST_TO_ADDR
// s = { ;
16683: LD_ADDR_VAR 0 10
16687: PUSH
16688: LD_STRING {
16690: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
16691: LD_ADDR_VAR 0 1
16695: PUSH
16696: DOUBLE
16697: LD_INT 1
16699: DEC
16700: ST_TO_ADDR
16701: LD_EXP 23
16705: PUSH
16706: LD_INT 0
16708: PLUS
16709: PUSH
16710: FOR_TO
16711: IFFALSE 16757
// if side_positions [ i ] then
16713: LD_EXP 23
16717: PUSH
16718: LD_VAR 0 1
16722: ARRAY
16723: IFFALSE 16741
// s = s & 1, else
16725: LD_ADDR_VAR 0 10
16729: PUSH
16730: LD_VAR 0 10
16734: PUSH
16735: LD_STRING 1,
16737: STR
16738: ST_TO_ADDR
16739: GO 16755
// s = s & 0, ;
16741: LD_ADDR_VAR 0 10
16745: PUSH
16746: LD_VAR 0 10
16750: PUSH
16751: LD_STRING 0,
16753: STR
16754: ST_TO_ADDR
16755: GO 16710
16757: POP
16758: POP
// s = s & } ;
16759: LD_ADDR_VAR 0 10
16763: PUSH
16764: LD_VAR 0 10
16768: PUSH
16769: LD_STRING }
16771: STR
16772: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
16773: LD_STRING initScore(
16775: PUSH
16776: LD_VAR 0 10
16780: STR
16781: PUSH
16782: LD_STRING ,
16784: STR
16785: PUSH
16786: LD_VAR 0 12
16790: STR
16791: PUSH
16792: LD_STRING ,
16794: STR
16795: PUSH
16796: LD_VAR 0 13
16800: STR
16801: PUSH
16802: LD_STRING  );
16804: STR
16805: PPUSH
16806: CALL_OW 559
// if game_type = 3 then
16810: LD_EXP 46
16814: PUSH
16815: LD_INT 3
16817: EQUAL
16818: IFFALSE 16837
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
16820: LD_STRING AddScorePoints(2,2,
16822: PUSH
16823: LD_EXP 20
16827: STR
16828: PUSH
16829: LD_STRING  );
16831: STR
16832: PPUSH
16833: CALL_OW 559
// end ; end ;
16837: PPOPN 13
16839: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
16840: LD_INT 0
16842: PPUSH
16843: PPUSH
// case typ of 1 :
16844: LD_VAR 0 3
16848: PUSH
16849: LD_INT 1
16851: DOUBLE
16852: EQUAL
16853: IFTRUE 16857
16855: GO 16885
16857: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
16858: LD_ADDR_LOC 25
16862: PUSH
16863: LD_LOC 25
16867: PPUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: LD_VAR 0 2
16877: PPUSH
16878: CALL_OW 1
16882: ST_TO_ADDR
16883: GO 16958
16885: LD_INT 2
16887: DOUBLE
16888: EQUAL
16889: IFTRUE 16893
16891: GO 16921
16893: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
16894: LD_ADDR_LOC 26
16898: PUSH
16899: LD_LOC 26
16903: PPUSH
16904: LD_VAR 0 1
16908: PPUSH
16909: LD_VAR 0 2
16913: PPUSH
16914: CALL_OW 1
16918: ST_TO_ADDR
16919: GO 16958
16921: LD_INT 3
16923: DOUBLE
16924: EQUAL
16925: IFTRUE 16929
16927: GO 16957
16929: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
16930: LD_ADDR_LOC 27
16934: PUSH
16935: LD_LOC 27
16939: PPUSH
16940: LD_VAR 0 1
16944: PPUSH
16945: LD_VAR 0 2
16949: PPUSH
16950: CALL_OW 1
16954: ST_TO_ADDR
16955: GO 16958
16957: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
16958: LD_ADDR_VAR 0 5
16962: PUSH
16963: LD_LOC 25
16967: PUSH
16968: LD_VAR 0 1
16972: ARRAY
16973: PUSH
16974: LD_LOC 26
16978: PUSH
16979: LD_VAR 0 1
16983: ARRAY
16984: PLUS
16985: PUSH
16986: LD_LOC 27
16990: PUSH
16991: LD_VAR 0 1
16995: ARRAY
16996: PLUS
16997: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
16998: LD_VAR 0 1
17002: PPUSH
17003: LD_VAR 0 5
17007: PPUSH
17008: CALL_OW 506
// end ; end_of_file
17012: LD_VAR 0 4
17016: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
17017: LD_INT 0
17019: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
17020: LD_VAR 0 1
17024: PPUSH
17025: CALL_OW 255
17029: PUSH
17030: LD_VAR 0 4
17034: EQUAL
17035: IFFALSE 17054
// begin SetAchievement ( ACH_RAD ) ;
17037: LD_STRING ACH_RAD
17039: PPUSH
17040: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
17044: LD_STRING ACH_NL
17046: PPUSH
17047: LD_INT 1
17049: PPUSH
17050: CALL_OW 564
// end end ;
17054: LD_VAR 0 5
17058: RET
// export function SA_Win ( side ) ; begin
17059: LD_INT 0
17061: PPUSH
// case side of 1 :
17062: LD_VAR 0 1
17066: PUSH
17067: LD_INT 1
17069: DOUBLE
17070: EQUAL
17071: IFTRUE 17075
17073: GO 17088
17075: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
17076: LD_STRING ACH_AH
17078: PPUSH
17079: LD_INT 1
17081: PPUSH
17082: CALL_OW 564
17086: GO 17251
17088: LD_INT 2
17090: DOUBLE
17091: EQUAL
17092: IFTRUE 17096
17094: GO 17109
17096: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
17097: LD_STRING ACH_E
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL_OW 564
17107: GO 17251
17109: LD_INT 3
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17130
17117: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
17118: LD_STRING ACH_OOL
17120: PPUSH
17121: LD_INT 1
17123: PPUSH
17124: CALL_OW 564
17128: GO 17251
17130: LD_INT 1
17132: PUSH
17133: LD_INT 2
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: DOUBLE
17140: EQUAL
17141: IFTRUE 17145
17143: GO 17170
17145: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17146: LD_STRING ACH_AH
17148: PPUSH
17149: LD_REAL  5.00000000000000E-0001
17152: PPUSH
17153: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17157: LD_STRING ACH_E
17159: PPUSH
17160: LD_REAL  5.00000000000000E-0001
17163: PPUSH
17164: CALL_OW 564
// end ; [ 2 , 3 ] :
17168: GO 17251
17170: LD_INT 2
17172: PUSH
17173: LD_INT 3
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: DOUBLE
17180: EQUAL
17181: IFTRUE 17185
17183: GO 17210
17185: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
17186: LD_STRING ACH_OOL
17188: PPUSH
17189: LD_REAL  5.00000000000000E-0001
17192: PPUSH
17193: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17197: LD_STRING ACH_E
17199: PPUSH
17200: LD_REAL  5.00000000000000E-0001
17203: PPUSH
17204: CALL_OW 564
// end ; [ 3 , 1 ] :
17208: GO 17251
17210: LD_INT 3
17212: PUSH
17213: LD_INT 1
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: DOUBLE
17220: EQUAL
17221: IFTRUE 17225
17223: GO 17250
17225: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17226: LD_STRING ACH_AH
17228: PPUSH
17229: LD_REAL  5.00000000000000E-0001
17232: PPUSH
17233: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
17237: LD_STRING ACH_OOL
17239: PPUSH
17240: LD_REAL  5.00000000000000E-0001
17243: PPUSH
17244: CALL_OW 564
// end ; end ;
17248: GO 17251
17250: POP
// end ; end_of_file
17251: LD_VAR 0 2
17255: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
17256: LD_INT 0
17258: PPUSH
17259: PPUSH
// enable ( 98 ) ;
17260: LD_INT 98
17262: ENABLE_MARKED
// GameEnded = false ;
17263: LD_ADDR_LOC 30
17267: PUSH
17268: LD_INT 0
17270: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
17271: LD_ADDR_LOC 29
17275: PUSH
17276: LD_INT 0
17278: PUSH
17279: LD_INT 0
17281: PUSH
17282: LD_INT 0
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: LD_INT 0
17290: PUSH
17291: LD_INT 0
17293: PUSH
17294: LD_INT 0
17296: PUSH
17297: LD_INT 0
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: ST_TO_ADDR
// unfoged = false ;
17310: LD_ADDR_LOC 31
17314: PUSH
17315: LD_INT 0
17317: ST_TO_ADDR
// defeated_specs := [ ] ;
17318: LD_ADDR_LOC 32
17322: PUSH
17323: EMPTY
17324: ST_TO_ADDR
// for i = 1 to side_positions do
17325: LD_ADDR_VAR 0 2
17329: PUSH
17330: DOUBLE
17331: LD_INT 1
17333: DEC
17334: ST_TO_ADDR
17335: LD_EXP 23
17339: PUSH
17340: FOR_TO
17341: IFFALSE 17381
// if not side_positions [ i ] then
17343: LD_EXP 23
17347: PUSH
17348: LD_VAR 0 2
17352: ARRAY
17353: NOT
17354: IFFALSE 17379
// defeated = replace ( defeated , i , true ) ;
17356: LD_ADDR_LOC 29
17360: PUSH
17361: LD_LOC 29
17365: PPUSH
17366: LD_VAR 0 2
17370: PPUSH
17371: LD_INT 1
17373: PPUSH
17374: CALL_OW 1
17378: ST_TO_ADDR
17379: GO 17340
17381: POP
17382: POP
// end ;
17383: LD_VAR 0 1
17387: RET
// function CanWinLoose ; begin
17388: LD_INT 0
17390: PPUSH
// Result := true ;
17391: LD_ADDR_VAR 0 1
17395: PUSH
17396: LD_INT 1
17398: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
17399: CALL_OW 518
17403: PUSH
17404: CALL_OW 519
17408: PUSH
17409: LD_INT 0
17411: GREATER
17412: AND
17413: IFFALSE 17423
// Result := false ;
17415: LD_ADDR_VAR 0 1
17419: PUSH
17420: LD_INT 0
17422: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
17423: CALL_OW 531
17427: PUSH
17428: CALL_OW 519
17432: PUSH
17433: LD_INT 1
17435: GREATER
17436: AND
17437: IFFALSE 17447
// Result := false ;
17439: LD_ADDR_VAR 0 1
17443: PUSH
17444: LD_INT 0
17446: ST_TO_ADDR
// end ;
17447: LD_VAR 0 1
17451: RET
// export function HasPower ( i ) ; var k , h ; begin
17452: LD_INT 0
17454: PPUSH
17455: PPUSH
17456: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
17457: LD_VAR 0 1
17461: PPUSH
17462: CALL_OW 108
17466: NOT
17467: PUSH
17468: LD_EXP 26
17472: PUSH
17473: LD_VAR 0 1
17477: ARRAY
17478: NOT
17479: AND
17480: PUSH
17481: LD_OWVAR 4
17485: AND
17486: IFFALSE 17498
// begin result = false ;
17488: LD_ADDR_VAR 0 2
17492: PUSH
17493: LD_INT 0
17495: ST_TO_ADDR
// end else
17496: GO 17793
// case def_win_rules of 0 :
17498: LD_EXP 19
17502: PUSH
17503: LD_INT 0
17505: DOUBLE
17506: EQUAL
17507: IFTRUE 17511
17509: GO 17674
17511: POP
// if def_people_respawning then
17512: LD_EXP 58
17516: IFFALSE 17607
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
17518: LD_ADDR_VAR 0 2
17522: PUSH
17523: LD_INT 22
17525: PUSH
17526: LD_VAR 0 1
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 2
17537: PUSH
17538: LD_INT 21
17540: PUSH
17541: LD_INT 1
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 33
17550: PUSH
17551: LD_INT 3
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 33
17560: PUSH
17561: LD_INT 5
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 30
17570: PUSH
17571: LD_INT 0
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 30
17580: PUSH
17581: LD_INT 1
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PPUSH
17600: CALL_OW 69
17604: ST_TO_ADDR
17605: GO 17672
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
17607: LD_ADDR_VAR 0 2
17611: PUSH
17612: LD_INT 22
17614: PUSH
17615: LD_VAR 0 1
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PUSH
17624: LD_INT 2
17626: PUSH
17627: LD_INT 21
17629: PUSH
17630: LD_INT 1
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 33
17639: PUSH
17640: LD_INT 3
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 33
17649: PUSH
17650: LD_INT 5
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PPUSH
17667: CALL_OW 69
17671: ST_TO_ADDR
17672: GO 17793
17674: LD_INT 1
17676: DOUBLE
17677: EQUAL
17678: IFTRUE 17682
17680: GO 17721
17682: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
17683: LD_ADDR_VAR 0 2
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_VAR 0 1
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 21
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PPUSH
17714: CALL_OW 69
17718: ST_TO_ADDR
17719: GO 17793
17721: LD_INT 2
17723: DOUBLE
17724: EQUAL
17725: IFTRUE 17729
17727: GO 17792
17729: POP
// begin h = false ;
17730: LD_ADDR_VAR 0 4
17734: PUSH
17735: LD_INT 0
17737: ST_TO_ADDR
// for k in heroes [ i ] do
17738: LD_ADDR_VAR 0 3
17742: PUSH
17743: LD_EXP 34
17747: PUSH
17748: LD_VAR 0 1
17752: ARRAY
17753: PUSH
17754: FOR_IN
17755: IFFALSE 17778
// if IsLive ( k ) then
17757: LD_VAR 0 3
17761: PPUSH
17762: CALL_OW 300
17766: IFFALSE 17776
// h = true ;
17768: LD_ADDR_VAR 0 4
17772: PUSH
17773: LD_INT 1
17775: ST_TO_ADDR
17776: GO 17754
17778: POP
17779: POP
// Result := h ;
17780: LD_ADDR_VAR 0 2
17784: PUSH
17785: LD_VAR 0 4
17789: ST_TO_ADDR
// end ; end ;
17790: GO 17793
17792: POP
// end ;
17793: LD_VAR 0 2
17797: RET
// function AlliedSides ( i , j ) ; begin
17798: LD_INT 0
17800: PPUSH
// Result := false ;
17801: LD_ADDR_VAR 0 3
17805: PUSH
17806: LD_INT 0
17808: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
17809: LD_VAR 0 1
17813: PPUSH
17814: LD_VAR 0 2
17818: PPUSH
17819: CALL_OW 81
17823: PUSH
17824: LD_INT 1
17826: EQUAL
17827: PUSH
17828: LD_VAR 0 2
17832: PPUSH
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 81
17842: PUSH
17843: LD_INT 1
17845: EQUAL
17846: AND
17847: PUSH
17848: LD_VAR 0 1
17852: PPUSH
17853: CALL_OW 83
17857: AND
17858: PUSH
17859: LD_VAR 0 2
17863: PPUSH
17864: CALL_OW 83
17868: AND
17869: IFFALSE 17879
// Result := true ;
17871: LD_ADDR_VAR 0 3
17875: PUSH
17876: LD_INT 1
17878: ST_TO_ADDR
// end ;
17879: LD_VAR 0 3
17883: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
17884: CALL 17388 0 0
17888: PUSH
17889: LD_LOC 30
17893: NOT
17894: AND
17895: IFFALSE 17911
17897: GO 17899
17899: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
17900: LD_ADDR_EXP 64
17904: PUSH
17905: LD_STRING #Player-Ended
17907: PUSH
17908: EMPTY
17909: LIST
17910: ST_TO_ADDR
17911: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
17912: CALL 17388 0 0
17916: PUSH
17917: LD_LOC 30
17921: AND
17922: IFFALSE 17931
17924: GO 17926
17926: DISABLE
// YouLostInMultiplayer ;
17927: CALL_OW 107
17931: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
17932: CALL 17388 0 0
17936: NOT
17937: PUSH
17938: CALL_OW 531
17942: NOT
17943: AND
17944: IFFALSE 17960
17946: GO 17948
17948: DISABLE
// WaitServerStrings = [ #server-wait ] ;
17949: LD_ADDR_EXP 64
17953: PUSH
17954: LD_STRING #server-wait
17956: PUSH
17957: EMPTY
17958: LIST
17959: ST_TO_ADDR
17960: END
// every 100 trigger IAmSpec do
17961: CALL_OW 531
17965: IFFALSE 17981
17967: GO 17969
17969: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
17970: LD_ADDR_EXP 64
17974: PUSH
17975: LD_STRING #Player-IAmSpec
17977: PUSH
17978: EMPTY
17979: LIST
17980: ST_TO_ADDR
17981: END
// every 100 trigger GameEnded and IAmSpec do
17982: LD_LOC 30
17986: PUSH
17987: CALL_OW 531
17991: AND
17992: IFFALSE 18001
17994: GO 17996
17996: DISABLE
// YouLostInMultiplayer ;
17997: CALL_OW 107
18001: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
18002: CALL 17388 0 0
18006: PUSH
18007: LD_LOC 30
18011: NOT
18012: AND
18013: IFFALSE 18029
18015: GO 18017
18017: DISABLE
// WaitServerStrings = [ $player-win ] ;
18018: LD_ADDR_EXP 64
18022: PUSH
18023: LD_STRING $player-win
18025: PUSH
18026: EMPTY
18027: LIST
18028: ST_TO_ADDR
18029: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
18030: CALL 17388 0 0
18034: PUSH
18035: LD_LOC 30
18039: AND
18040: IFFALSE 18064
18042: GO 18044
18044: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
18045: LD_EXP 24
18049: PUSH
18050: LD_OWVAR 7
18054: ARRAY
18055: PPUSH
18056: CALL 17059 0 1
// YouWinInMultiplayer ;
18060: CALL_OW 106
// end ;
18064: END
// every 100 trigger isEditor marked 401 do
18065: LD_OWVAR 84
18069: IFFALSE 18085
18071: GO 18073
18073: DISABLE
// Debug_Strings = [ You won ] ;
18074: LD_ADDR_OWVAR 48
18078: PUSH
18079: LD_STRING You won
18081: PUSH
18082: EMPTY
18083: LIST
18084: ST_TO_ADDR
18085: END
// every 100 trigger isEditor marked 400 do
18086: LD_OWVAR 84
18090: IFFALSE 18106
18092: GO 18094
18094: DISABLE
// Debug_Strings = [ You loss ] ;
18095: LD_ADDR_OWVAR 48
18099: PUSH
18100: LD_STRING You loss
18102: PUSH
18103: EMPTY
18104: LIST
18105: ST_TO_ADDR
18106: END
// every 100 marked 98 do var i , un ;
18107: GO 18109
18109: DISABLE
18110: LD_INT 0
18112: PPUSH
18113: PPUSH
// begin for i = 1 to side_positions do
18114: LD_ADDR_VAR 0 1
18118: PUSH
18119: DOUBLE
18120: LD_INT 1
18122: DEC
18123: ST_TO_ADDR
18124: LD_EXP 23
18128: PUSH
18129: FOR_TO
18130: IFFALSE 18217
// begin if side_positions [ i ] then
18132: LD_EXP 23
18136: PUSH
18137: LD_VAR 0 1
18141: ARRAY
18142: IFFALSE 18215
// if not HasPower ( i ) and not defeated [ i ] then
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL 17452 0 1
18153: NOT
18154: PUSH
18155: LD_LOC 29
18159: PUSH
18160: LD_VAR 0 1
18164: ARRAY
18165: NOT
18166: AND
18167: IFFALSE 18215
// begin defeated = replace ( defeated , i , true ) ;
18169: LD_ADDR_LOC 29
18173: PUSH
18174: LD_LOC 29
18178: PPUSH
18179: LD_VAR 0 1
18183: PPUSH
18184: LD_INT 1
18186: PPUSH
18187: CALL_OW 1
18191: ST_TO_ADDR
// if i = mp_player_side then
18192: LD_VAR 0 1
18196: PUSH
18197: LD_OWVAR 7
18201: EQUAL
18202: IFFALSE 18215
// begin Multiplayer_Loose_Message ;
18204: CALL_OW 521
// SetPlayerSpectator ( ) ;
18208: CALL_OW 572
// enable ( 400 ) ;
18212: LD_INT 400
18214: ENABLE_MARKED
// end ; end ; end ;
18215: GO 18129
18217: POP
18218: POP
// DidGameEnd ;
18219: CALL 18234 0 0
// if not GameEnded then
18223: LD_LOC 30
18227: NOT
18228: IFFALSE 18231
// enable ;
18230: ENABLE
// end ;
18231: PPOPN 2
18233: END
// function DidGameEnd ; var i , k , enemy ; begin
18234: LD_INT 0
18236: PPUSH
18237: PPUSH
18238: PPUSH
18239: PPUSH
// enemy = [ ] ;
18240: LD_ADDR_VAR 0 4
18244: PUSH
18245: EMPTY
18246: ST_TO_ADDR
// for i = 1 to side_positions do
18247: LD_ADDR_VAR 0 2
18251: PUSH
18252: DOUBLE
18253: LD_INT 1
18255: DEC
18256: ST_TO_ADDR
18257: LD_EXP 23
18261: PUSH
18262: FOR_TO
18263: IFFALSE 18357
// if not defeated [ i ] then
18265: LD_LOC 29
18269: PUSH
18270: LD_VAR 0 2
18274: ARRAY
18275: NOT
18276: IFFALSE 18355
// for k = 1 to side_positions do
18278: LD_ADDR_VAR 0 3
18282: PUSH
18283: DOUBLE
18284: LD_INT 1
18286: DEC
18287: ST_TO_ADDR
18288: LD_EXP 23
18292: PUSH
18293: FOR_TO
18294: IFFALSE 18353
// if not defeated [ k ] then
18296: LD_LOC 29
18300: PUSH
18301: LD_VAR 0 3
18305: ARRAY
18306: NOT
18307: IFFALSE 18351
// if not AlliedSides ( i , k ) then
18309: LD_VAR 0 2
18313: PPUSH
18314: LD_VAR 0 3
18318: PPUSH
18319: CALL 17798 0 2
18323: NOT
18324: IFFALSE 18351
// enemy = enemy ^ [ i , k ] ;
18326: LD_ADDR_VAR 0 4
18330: PUSH
18331: LD_VAR 0 4
18335: PUSH
18336: LD_VAR 0 2
18340: PUSH
18341: LD_VAR 0 3
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: ADD
18350: ST_TO_ADDR
18351: GO 18293
18353: POP
18354: POP
18355: GO 18262
18357: POP
18358: POP
// if not enemy then
18359: LD_VAR 0 4
18363: NOT
18364: IFFALSE 18390
// begin GameEnded = true ;
18366: LD_ADDR_LOC 30
18370: PUSH
18371: LD_INT 1
18373: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
18374: LD_LOC 29
18378: PUSH
18379: LD_OWVAR 7
18383: ARRAY
18384: NOT
18385: IFFALSE 18390
// enable ( 401 ) ;
18387: LD_INT 401
18389: ENABLE_MARKED
// end ; end ;
18390: LD_VAR 0 1
18394: RET
// function unfog ; var k , friends ; begin
18395: LD_INT 0
18397: PPUSH
18398: PPUSH
18399: PPUSH
// for k = 1 to side_positions do
18400: LD_ADDR_VAR 0 2
18404: PUSH
18405: DOUBLE
18406: LD_INT 1
18408: DEC
18409: ST_TO_ADDR
18410: LD_EXP 23
18414: PUSH
18415: FOR_TO
18416: IFFALSE 18472
// if not defeated [ k ] then
18418: LD_LOC 29
18422: PUSH
18423: LD_VAR 0 2
18427: ARRAY
18428: NOT
18429: IFFALSE 18470
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
18431: LD_OWVAR 7
18435: PPUSH
18436: LD_VAR 0 2
18440: PPUSH
18441: CALL_OW 81
18445: PUSH
18446: LD_INT 1
18448: PUSH
18449: EMPTY
18450: LIST
18451: IN
18452: IFFALSE 18470
// friends = friends ^ k ;
18454: LD_ADDR_VAR 0 3
18458: PUSH
18459: LD_VAR 0 3
18463: PUSH
18464: LD_VAR 0 2
18468: ADD
18469: ST_TO_ADDR
18470: GO 18415
18472: POP
18473: POP
// if not friends then
18474: LD_VAR 0 3
18478: NOT
18479: IFFALSE 18493
// begin SetPlayerSpectator ( ) ;
18481: CALL_OW 572
// unfoged = true ;
18485: LD_ADDR_LOC 31
18489: PUSH
18490: LD_INT 1
18492: ST_TO_ADDR
// end ; end ;
18493: LD_VAR 0 1
18497: RET
// export function MakeGameEnd ; begin
18498: LD_INT 0
18500: PPUSH
// SetPlayerSpectator ( ) ;
18501: CALL_OW 572
// unfoged = true ;
18505: LD_ADDR_LOC 31
18509: PUSH
18510: LD_INT 1
18512: ST_TO_ADDR
// wait ( 0 0$5 ) ;
18513: LD_INT 175
18515: PPUSH
18516: CALL_OW 67
// GameEnded = true ;
18520: LD_ADDR_LOC 30
18524: PUSH
18525: LD_INT 1
18527: ST_TO_ADDR
// end ;
18528: LD_VAR 0 1
18532: RET
// export function GetGameEnded ; begin
18533: LD_INT 0
18535: PPUSH
// result = GameEnded ;
18536: LD_ADDR_VAR 0 1
18540: PUSH
18541: LD_LOC 30
18545: ST_TO_ADDR
// end ; end_of_file
18546: LD_VAR 0 1
18550: RET
// var win ; export function init_kings_counting ; var i ; begin
18551: LD_INT 0
18553: PPUSH
18554: PPUSH
// mp_with_score := true ;
18555: LD_ADDR_OWVAR 14
18559: PUSH
18560: LD_INT 1
18562: ST_TO_ADDR
// ResetMultiScore ;
18563: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
18567: LD_INT 19
18569: PPUSH
18570: LD_INT 1
18572: PPUSH
18573: CALL_OW 424
// enable ( 2 ) ;
18577: LD_INT 2
18579: ENABLE_MARKED
// end ;
18580: LD_VAR 0 1
18584: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
18585: LD_INT 0
18587: PPUSH
18588: PPUSH
18589: PPUSH
18590: PPUSH
18591: PPUSH
18592: PPUSH
18593: PPUSH
18594: PPUSH
18595: PPUSH
// vypis := [ ] ;
18596: LD_ADDR_VAR 0 3
18600: PUSH
18601: EMPTY
18602: ST_TO_ADDR
// red = 0 ;
18603: LD_ADDR_VAR 0 5
18607: PUSH
18608: LD_INT 0
18610: ST_TO_ADDR
// blue = 0 ;
18611: LD_ADDR_VAR 0 6
18615: PUSH
18616: LD_INT 0
18618: ST_TO_ADDR
// yel = 0 ;
18619: LD_ADDR_VAR 0 7
18623: PUSH
18624: LD_INT 0
18626: ST_TO_ADDR
// green = 0 ;
18627: LD_ADDR_VAR 0 8
18631: PUSH
18632: LD_INT 0
18634: ST_TO_ADDR
// if def_public_score or isSGUI then
18635: LD_EXP 6
18639: PUSH
18640: LD_OWVAR 83
18644: OR
18645: IFFALSE 19242
// if not Team_Game then
18647: LD_EXP 25
18651: NOT
18652: IFFALSE 18774
// begin for side = 1 to Side_Positions do
18654: LD_ADDR_VAR 0 2
18658: PUSH
18659: DOUBLE
18660: LD_INT 1
18662: DEC
18663: ST_TO_ADDR
18664: LD_EXP 23
18668: PUSH
18669: FOR_TO
18670: IFFALSE 18770
// if Side_Positions [ side ] then
18672: LD_EXP 23
18676: PUSH
18677: LD_VAR 0 2
18681: ARRAY
18682: IFFALSE 18768
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
18684: LD_ADDR_VAR 0 3
18688: PUSH
18689: LD_VAR 0 3
18693: PUSH
18694: LD_STRING #KingoftheHill-Public
18696: PUSH
18697: LD_VAR 0 2
18701: PUSH
18702: LD_VAR 0 2
18706: PUSH
18707: LD_VAR 0 2
18711: PUSH
18712: LD_INT 10
18714: PLUS
18715: PPUSH
18716: CALL_OW 110
18720: PUSH
18721: LD_INT 3
18723: DIV
18724: PUSH
18725: LD_EXP 20
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: ADD
18737: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
18738: LD_INT 2
18740: PPUSH
18741: LD_VAR 0 2
18745: PPUSH
18746: LD_VAR 0 2
18750: PUSH
18751: LD_INT 10
18753: PLUS
18754: PPUSH
18755: CALL_OW 110
18759: PUSH
18760: LD_INT 3
18762: DIV
18763: PPUSH
18764: CALL 26144 0 3
// end ;
18768: GO 18669
18770: POP
18771: POP
// end else
18772: GO 19240
// begin if Teams [ 1 ] then
18774: LD_EXP 22
18778: PUSH
18779: LD_INT 1
18781: ARRAY
18782: IFFALSE 18834
// for i in Teams [ 1 ] do
18784: LD_ADDR_VAR 0 4
18788: PUSH
18789: LD_EXP 22
18793: PUSH
18794: LD_INT 1
18796: ARRAY
18797: PUSH
18798: FOR_IN
18799: IFFALSE 18832
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
18801: LD_ADDR_VAR 0 5
18805: PUSH
18806: LD_VAR 0 5
18810: PUSH
18811: LD_VAR 0 4
18815: PUSH
18816: LD_INT 10
18818: PLUS
18819: PPUSH
18820: CALL_OW 110
18824: PUSH
18825: LD_INT 3
18827: DIV
18828: PLUS
18829: ST_TO_ADDR
18830: GO 18798
18832: POP
18833: POP
// if Teams [ 2 ] then
18834: LD_EXP 22
18838: PUSH
18839: LD_INT 2
18841: ARRAY
18842: IFFALSE 18894
// for i in Teams [ 2 ] do
18844: LD_ADDR_VAR 0 4
18848: PUSH
18849: LD_EXP 22
18853: PUSH
18854: LD_INT 2
18856: ARRAY
18857: PUSH
18858: FOR_IN
18859: IFFALSE 18892
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
18861: LD_ADDR_VAR 0 6
18865: PUSH
18866: LD_VAR 0 6
18870: PUSH
18871: LD_VAR 0 4
18875: PUSH
18876: LD_INT 10
18878: PLUS
18879: PPUSH
18880: CALL_OW 110
18884: PUSH
18885: LD_INT 3
18887: DIV
18888: PLUS
18889: ST_TO_ADDR
18890: GO 18858
18892: POP
18893: POP
// if Teams [ 3 ] then
18894: LD_EXP 22
18898: PUSH
18899: LD_INT 3
18901: ARRAY
18902: IFFALSE 18954
// for i in Teams [ 3 ] do
18904: LD_ADDR_VAR 0 4
18908: PUSH
18909: LD_EXP 22
18913: PUSH
18914: LD_INT 3
18916: ARRAY
18917: PUSH
18918: FOR_IN
18919: IFFALSE 18952
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
18921: LD_ADDR_VAR 0 7
18925: PUSH
18926: LD_VAR 0 7
18930: PUSH
18931: LD_VAR 0 4
18935: PUSH
18936: LD_INT 10
18938: PLUS
18939: PPUSH
18940: CALL_OW 110
18944: PUSH
18945: LD_INT 3
18947: DIV
18948: PLUS
18949: ST_TO_ADDR
18950: GO 18918
18952: POP
18953: POP
// if Teams [ 4 ] then
18954: LD_EXP 22
18958: PUSH
18959: LD_INT 4
18961: ARRAY
18962: IFFALSE 19014
// for i in Teams [ 4 ] do
18964: LD_ADDR_VAR 0 4
18968: PUSH
18969: LD_EXP 22
18973: PUSH
18974: LD_INT 4
18976: ARRAY
18977: PUSH
18978: FOR_IN
18979: IFFALSE 19012
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
18981: LD_ADDR_VAR 0 8
18985: PUSH
18986: LD_VAR 0 8
18990: PUSH
18991: LD_VAR 0 4
18995: PUSH
18996: LD_INT 10
18998: PLUS
18999: PPUSH
19000: CALL_OW 110
19004: PUSH
19005: LD_INT 3
19007: DIV
19008: PLUS
19009: ST_TO_ADDR
19010: GO 18978
19012: POP
19013: POP
// if Teams [ 1 ] then
19014: LD_EXP 22
19018: PUSH
19019: LD_INT 1
19021: ARRAY
19022: IFFALSE 19051
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
19024: LD_ADDR_VAR 0 3
19028: PUSH
19029: LD_STRING #KingoftheHill-Public-red
19031: PUSH
19032: LD_INT 3
19034: PUSH
19035: LD_VAR 0 5
19039: PUSH
19040: LD_EXP 20
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: ST_TO_ADDR
// if Teams [ 2 ] then
19051: LD_EXP 22
19055: PUSH
19056: LD_INT 2
19058: ARRAY
19059: IFFALSE 19094
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
19061: LD_ADDR_VAR 0 3
19065: PUSH
19066: LD_VAR 0 3
19070: PUSH
19071: LD_STRING #KingoftheHill-Public-blue
19073: PUSH
19074: LD_INT 1
19076: PUSH
19077: LD_VAR 0 6
19081: PUSH
19082: LD_EXP 20
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: ADD
19093: ST_TO_ADDR
// if Teams [ 3 ] then
19094: LD_EXP 22
19098: PUSH
19099: LD_INT 3
19101: ARRAY
19102: IFFALSE 19137
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
19104: LD_ADDR_VAR 0 3
19108: PUSH
19109: LD_VAR 0 3
19113: PUSH
19114: LD_STRING #KingoftheHill-Public-yell
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: LD_VAR 0 7
19124: PUSH
19125: LD_EXP 20
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: ADD
19136: ST_TO_ADDR
// if Teams [ 4 ] then
19137: LD_EXP 22
19141: PUSH
19142: LD_INT 4
19144: ARRAY
19145: IFFALSE 19180
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
19147: LD_ADDR_VAR 0 3
19151: PUSH
19152: LD_VAR 0 3
19156: PUSH
19157: LD_STRING #KingoftheHill-Public-green
19159: PUSH
19160: LD_INT 7
19162: PUSH
19163: LD_VAR 0 8
19167: PUSH
19168: LD_EXP 20
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: ADD
19179: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
19180: LD_INT 2
19182: PPUSH
19183: LD_INT 3
19185: PPUSH
19186: LD_VAR 0 5
19190: PPUSH
19191: CALL 26144 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
19195: LD_INT 2
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: LD_VAR 0 6
19205: PPUSH
19206: CALL 26144 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
19210: LD_INT 2
19212: PPUSH
19213: LD_INT 2
19215: PPUSH
19216: LD_VAR 0 7
19220: PPUSH
19221: CALL 26144 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
19225: LD_INT 2
19227: PPUSH
19228: LD_INT 7
19230: PPUSH
19231: LD_VAR 0 8
19235: PPUSH
19236: CALL 26144 0 3
// end else
19240: GO 19677
// if not Team_Game then
19242: LD_EXP 25
19246: NOT
19247: IFFALSE 19305
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
19249: LD_ADDR_VAR 0 3
19253: PUSH
19254: LD_VAR 0 3
19258: PUSH
19259: LD_STRING #KingoftheHill-Private
19261: PUSH
19262: LD_OWVAR 7
19266: PUSH
19267: LD_OWVAR 7
19271: PUSH
19272: LD_VAR 0 2
19276: PUSH
19277: LD_INT 10
19279: PLUS
19280: PPUSH
19281: CALL_OW 110
19285: PUSH
19286: LD_INT 3
19288: DIV
19289: PUSH
19290: LD_EXP 20
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: ADD
19302: ST_TO_ADDR
19303: GO 19677
// begin for i in Teams [ 1 ] do
19305: LD_ADDR_VAR 0 4
19309: PUSH
19310: LD_EXP 22
19314: PUSH
19315: LD_INT 1
19317: ARRAY
19318: PUSH
19319: FOR_IN
19320: IFFALSE 19353
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19322: LD_ADDR_VAR 0 5
19326: PUSH
19327: LD_VAR 0 5
19331: PUSH
19332: LD_VAR 0 4
19336: PUSH
19337: LD_INT 10
19339: PLUS
19340: PPUSH
19341: CALL_OW 110
19345: PUSH
19346: LD_INT 3
19348: DIV
19349: PLUS
19350: ST_TO_ADDR
19351: GO 19319
19353: POP
19354: POP
// for i in Teams [ 2 ] do
19355: LD_ADDR_VAR 0 4
19359: PUSH
19360: LD_EXP 22
19364: PUSH
19365: LD_INT 2
19367: ARRAY
19368: PUSH
19369: FOR_IN
19370: IFFALSE 19403
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19372: LD_ADDR_VAR 0 6
19376: PUSH
19377: LD_VAR 0 6
19381: PUSH
19382: LD_VAR 0 4
19386: PUSH
19387: LD_INT 10
19389: PLUS
19390: PPUSH
19391: CALL_OW 110
19395: PUSH
19396: LD_INT 3
19398: DIV
19399: PLUS
19400: ST_TO_ADDR
19401: GO 19369
19403: POP
19404: POP
// for i in Teams [ 3 ] do
19405: LD_ADDR_VAR 0 4
19409: PUSH
19410: LD_EXP 22
19414: PUSH
19415: LD_INT 3
19417: ARRAY
19418: PUSH
19419: FOR_IN
19420: IFFALSE 19453
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
19422: LD_ADDR_VAR 0 7
19426: PUSH
19427: LD_VAR 0 7
19431: PUSH
19432: LD_VAR 0 4
19436: PUSH
19437: LD_INT 10
19439: PLUS
19440: PPUSH
19441: CALL_OW 110
19445: PUSH
19446: LD_INT 3
19448: DIV
19449: PLUS
19450: ST_TO_ADDR
19451: GO 19419
19453: POP
19454: POP
// for i in Teams [ 4 ] do
19455: LD_ADDR_VAR 0 4
19459: PUSH
19460: LD_EXP 22
19464: PUSH
19465: LD_INT 4
19467: ARRAY
19468: PUSH
19469: FOR_IN
19470: IFFALSE 19503
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
19472: LD_ADDR_VAR 0 8
19476: PUSH
19477: LD_VAR 0 8
19481: PUSH
19482: LD_VAR 0 4
19486: PUSH
19487: LD_INT 10
19489: PLUS
19490: PPUSH
19491: CALL_OW 110
19495: PUSH
19496: LD_INT 3
19498: DIV
19499: PLUS
19500: ST_TO_ADDR
19501: GO 19469
19503: POP
19504: POP
// if mp_player_side in Teams [ 1 ] then
19505: LD_OWVAR 7
19509: PUSH
19510: LD_EXP 22
19514: PUSH
19515: LD_INT 1
19517: ARRAY
19518: IN
19519: IFFALSE 19548
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
19521: LD_ADDR_VAR 0 3
19525: PUSH
19526: LD_STRING #KingoftheHill-Public-red
19528: PUSH
19529: LD_INT 3
19531: PUSH
19532: LD_VAR 0 5
19536: PUSH
19537: LD_EXP 20
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
19548: LD_OWVAR 7
19552: PUSH
19553: LD_EXP 22
19557: PUSH
19558: LD_INT 2
19560: ARRAY
19561: IN
19562: IFFALSE 19591
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
19564: LD_ADDR_VAR 0 3
19568: PUSH
19569: LD_STRING #KingoftheHill-Public-blue
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: LD_VAR 0 6
19579: PUSH
19580: LD_EXP 20
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
19591: LD_OWVAR 7
19595: PUSH
19596: LD_EXP 22
19600: PUSH
19601: LD_INT 3
19603: ARRAY
19604: IN
19605: IFFALSE 19634
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
19607: LD_ADDR_VAR 0 3
19611: PUSH
19612: LD_STRING #KingoftheHill-Public-yell
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: LD_VAR 0 7
19622: PUSH
19623: LD_EXP 20
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
19634: LD_OWVAR 7
19638: PUSH
19639: LD_EXP 22
19643: PUSH
19644: LD_INT 4
19646: ARRAY
19647: IN
19648: IFFALSE 19677
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
19650: LD_ADDR_VAR 0 3
19654: PUSH
19655: LD_STRING #KingoftheHill-Public-green
19657: PUSH
19658: LD_INT 7
19660: PUSH
19661: LD_VAR 0 8
19665: PUSH
19666: LD_EXP 20
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: ST_TO_ADDR
// end ; Display_kings := vypis ;
19677: LD_ADDR_EXP 65
19681: PUSH
19682: LD_VAR 0 3
19686: ST_TO_ADDR
// end ;
19687: LD_VAR 0 1
19691: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
19692: LD_INT 0
19694: PPUSH
19695: PPUSH
19696: PPUSH
19697: PPUSH
19698: PPUSH
19699: PPUSH
19700: PPUSH
19701: PPUSH
19702: PPUSH
// side := [ ] ;
19703: LD_ADDR_VAR 0 2
19707: PUSH
19708: EMPTY
19709: ST_TO_ADDR
// red = 0 ;
19710: LD_ADDR_VAR 0 5
19714: PUSH
19715: LD_INT 0
19717: ST_TO_ADDR
// blue = 0 ;
19718: LD_ADDR_VAR 0 6
19722: PUSH
19723: LD_INT 0
19725: ST_TO_ADDR
// yel = 0 ;
19726: LD_ADDR_VAR 0 7
19730: PUSH
19731: LD_INT 0
19733: ST_TO_ADDR
// green = 0 ;
19734: LD_ADDR_VAR 0 8
19738: PUSH
19739: LD_INT 0
19741: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
19742: LD_ADDR_VAR 0 3
19746: PUSH
19747: LD_INT 19
19749: PPUSH
19750: LD_INT 21
19752: PUSH
19753: LD_INT 3
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 53
19762: PUSH
19763: EMPTY
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PPUSH
19770: CALL_OW 70
19774: ST_TO_ADDR
// for un in list do
19775: LD_ADDR_VAR 0 4
19779: PUSH
19780: LD_VAR 0 3
19784: PUSH
19785: FOR_IN
19786: IFFALSE 19811
// side := side union GetSide ( un ) ;
19788: LD_ADDR_VAR 0 2
19792: PUSH
19793: LD_VAR 0 2
19797: PUSH
19798: LD_VAR 0 4
19802: PPUSH
19803: CALL_OW 255
19807: UNION
19808: ST_TO_ADDR
19809: GO 19785
19811: POP
19812: POP
// if side <> 1 then
19813: LD_VAR 0 2
19817: PUSH
19818: LD_INT 1
19820: NONEQUAL
19821: IFFALSE 19825
// exit ;
19823: GO 20188
// side := side [ 1 ] ;
19825: LD_ADDR_VAR 0 2
19829: PUSH
19830: LD_VAR 0 2
19834: PUSH
19835: LD_INT 1
19837: ARRAY
19838: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
19839: LD_VAR 0 2
19843: PUSH
19844: LD_INT 10
19846: PLUS
19847: PPUSH
19848: LD_VAR 0 2
19852: PUSH
19853: LD_INT 10
19855: PLUS
19856: PPUSH
19857: CALL_OW 110
19861: PUSH
19862: LD_INT 1
19864: PLUS
19865: PPUSH
19866: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
19870: LD_VAR 0 2
19874: PPUSH
19875: LD_VAR 0 2
19879: PUSH
19880: LD_INT 10
19882: PLUS
19883: PPUSH
19884: CALL_OW 110
19888: PUSH
19889: LD_INT 3
19891: DIV
19892: PPUSH
19893: LD_INT 2
19895: PPUSH
19896: CALL 16840 0 3
// if not Team_Game then
19900: LD_EXP 25
19904: NOT
19905: IFFALSE 20188
// if GetTag ( side + 10 ) >= final_count * 3 then
19907: LD_VAR 0 2
19911: PUSH
19912: LD_INT 10
19914: PLUS
19915: PPUSH
19916: CALL_OW 110
19920: PUSH
19921: LD_EXP 20
19925: PUSH
19926: LD_INT 3
19928: MUL
19929: GREATEREQUAL
19930: IFFALSE 19937
// enable ( 3 ) else
19932: LD_INT 3
19934: ENABLE_MARKED
19935: GO 20188
// begin for i in Teams [ 1 ] do
19937: LD_ADDR_VAR 0 9
19941: PUSH
19942: LD_EXP 22
19946: PUSH
19947: LD_INT 1
19949: ARRAY
19950: PUSH
19951: FOR_IN
19952: IFFALSE 19985
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19954: LD_ADDR_VAR 0 5
19958: PUSH
19959: LD_VAR 0 5
19963: PUSH
19964: LD_VAR 0 9
19968: PUSH
19969: LD_INT 10
19971: PLUS
19972: PPUSH
19973: CALL_OW 110
19977: PUSH
19978: LD_INT 3
19980: DIV
19981: PLUS
19982: ST_TO_ADDR
19983: GO 19951
19985: POP
19986: POP
// for i in Teams [ 2 ] do
19987: LD_ADDR_VAR 0 9
19991: PUSH
19992: LD_EXP 22
19996: PUSH
19997: LD_INT 2
19999: ARRAY
20000: PUSH
20001: FOR_IN
20002: IFFALSE 20035
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20004: LD_ADDR_VAR 0 6
20008: PUSH
20009: LD_VAR 0 6
20013: PUSH
20014: LD_VAR 0 9
20018: PUSH
20019: LD_INT 10
20021: PLUS
20022: PPUSH
20023: CALL_OW 110
20027: PUSH
20028: LD_INT 3
20030: DIV
20031: PLUS
20032: ST_TO_ADDR
20033: GO 20001
20035: POP
20036: POP
// for i in Teams [ 3 ] do
20037: LD_ADDR_VAR 0 9
20041: PUSH
20042: LD_EXP 22
20046: PUSH
20047: LD_INT 3
20049: ARRAY
20050: PUSH
20051: FOR_IN
20052: IFFALSE 20085
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20054: LD_ADDR_VAR 0 7
20058: PUSH
20059: LD_VAR 0 7
20063: PUSH
20064: LD_VAR 0 9
20068: PUSH
20069: LD_INT 10
20071: PLUS
20072: PPUSH
20073: CALL_OW 110
20077: PUSH
20078: LD_INT 3
20080: DIV
20081: PLUS
20082: ST_TO_ADDR
20083: GO 20051
20085: POP
20086: POP
// for i in Teams [ 4 ] do
20087: LD_ADDR_VAR 0 9
20091: PUSH
20092: LD_EXP 22
20096: PUSH
20097: LD_INT 4
20099: ARRAY
20100: PUSH
20101: FOR_IN
20102: IFFALSE 20135
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20104: LD_ADDR_VAR 0 8
20108: PUSH
20109: LD_VAR 0 8
20113: PUSH
20114: LD_VAR 0 9
20118: PUSH
20119: LD_INT 10
20121: PLUS
20122: PPUSH
20123: CALL_OW 110
20127: PUSH
20128: LD_INT 3
20130: DIV
20131: PLUS
20132: ST_TO_ADDR
20133: GO 20101
20135: POP
20136: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
20137: LD_VAR 0 5
20141: PUSH
20142: LD_EXP 20
20146: GREATEREQUAL
20147: PUSH
20148: LD_VAR 0 6
20152: PUSH
20153: LD_EXP 20
20157: GREATEREQUAL
20158: OR
20159: PUSH
20160: LD_VAR 0 7
20164: PUSH
20165: LD_EXP 20
20169: GREATEREQUAL
20170: OR
20171: PUSH
20172: LD_VAR 0 8
20176: PUSH
20177: LD_EXP 20
20181: GREATEREQUAL
20182: OR
20183: IFFALSE 20188
// enable ( 3 ) ;
20185: LD_INT 3
20187: ENABLE_MARKED
// end ; end ;
20188: LD_VAR 0 1
20192: RET
// every 0 0$1 marked 2 do
20193: GO 20195
20195: DISABLE
// begin count_king ;
20196: CALL 19692 0 0
// show_public_points ;
20200: CALL 18585 0 0
// enable ;
20204: ENABLE
// end ;
20205: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
20206: GO 20208
20208: DISABLE
20209: LD_INT 0
20211: PPUSH
20212: PPUSH
20213: PPUSH
20214: PPUSH
20215: PPUSH
20216: PPUSH
// begin win := [ ] ;
20217: LD_ADDR_LOC 33
20221: PUSH
20222: EMPTY
20223: ST_TO_ADDR
// red = 0 ;
20224: LD_ADDR_VAR 0 2
20228: PUSH
20229: LD_INT 0
20231: ST_TO_ADDR
// blue = 0 ;
20232: LD_ADDR_VAR 0 3
20236: PUSH
20237: LD_INT 0
20239: ST_TO_ADDR
// yel = 0 ;
20240: LD_ADDR_VAR 0 4
20244: PUSH
20245: LD_INT 0
20247: ST_TO_ADDR
// green = 0 ;
20248: LD_ADDR_VAR 0 5
20252: PUSH
20253: LD_INT 0
20255: ST_TO_ADDR
// if not Team_Game then
20256: LD_EXP 25
20260: NOT
20261: IFFALSE 20338
// begin for side = 1 to 8 do
20263: LD_ADDR_VAR 0 1
20267: PUSH
20268: DOUBLE
20269: LD_INT 1
20271: DEC
20272: ST_TO_ADDR
20273: LD_INT 8
20275: PUSH
20276: FOR_TO
20277: IFFALSE 20322
// if GetTag ( side + 10 ) >= final_count * 3 then
20279: LD_VAR 0 1
20283: PUSH
20284: LD_INT 10
20286: PLUS
20287: PPUSH
20288: CALL_OW 110
20292: PUSH
20293: LD_EXP 20
20297: PUSH
20298: LD_INT 3
20300: MUL
20301: GREATEREQUAL
20302: IFFALSE 20320
// win := win ^ side ;
20304: LD_ADDR_LOC 33
20308: PUSH
20309: LD_LOC 33
20313: PUSH
20314: LD_VAR 0 1
20318: ADD
20319: ST_TO_ADDR
20320: GO 20276
20322: POP
20323: POP
// if win then
20324: LD_LOC 33
20328: IFFALSE 20335
// enable ( 4 ) else
20330: LD_INT 4
20332: ENABLE_MARKED
20333: GO 20336
// enable ;
20335: ENABLE
// end else
20336: GO 20654
// begin for i in Teams [ 1 ] do
20338: LD_ADDR_VAR 0 6
20342: PUSH
20343: LD_EXP 22
20347: PUSH
20348: LD_INT 1
20350: ARRAY
20351: PUSH
20352: FOR_IN
20353: IFFALSE 20386
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20355: LD_ADDR_VAR 0 2
20359: PUSH
20360: LD_VAR 0 2
20364: PUSH
20365: LD_VAR 0 6
20369: PUSH
20370: LD_INT 10
20372: PLUS
20373: PPUSH
20374: CALL_OW 110
20378: PUSH
20379: LD_INT 3
20381: DIV
20382: PLUS
20383: ST_TO_ADDR
20384: GO 20352
20386: POP
20387: POP
// for i in Teams [ 2 ] do
20388: LD_ADDR_VAR 0 6
20392: PUSH
20393: LD_EXP 22
20397: PUSH
20398: LD_INT 2
20400: ARRAY
20401: PUSH
20402: FOR_IN
20403: IFFALSE 20436
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20405: LD_ADDR_VAR 0 3
20409: PUSH
20410: LD_VAR 0 3
20414: PUSH
20415: LD_VAR 0 6
20419: PUSH
20420: LD_INT 10
20422: PLUS
20423: PPUSH
20424: CALL_OW 110
20428: PUSH
20429: LD_INT 3
20431: DIV
20432: PLUS
20433: ST_TO_ADDR
20434: GO 20402
20436: POP
20437: POP
// for i in Teams [ 3 ] do
20438: LD_ADDR_VAR 0 6
20442: PUSH
20443: LD_EXP 22
20447: PUSH
20448: LD_INT 3
20450: ARRAY
20451: PUSH
20452: FOR_IN
20453: IFFALSE 20486
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20455: LD_ADDR_VAR 0 4
20459: PUSH
20460: LD_VAR 0 4
20464: PUSH
20465: LD_VAR 0 6
20469: PUSH
20470: LD_INT 10
20472: PLUS
20473: PPUSH
20474: CALL_OW 110
20478: PUSH
20479: LD_INT 3
20481: DIV
20482: PLUS
20483: ST_TO_ADDR
20484: GO 20452
20486: POP
20487: POP
// for i in Teams [ 4 ] do
20488: LD_ADDR_VAR 0 6
20492: PUSH
20493: LD_EXP 22
20497: PUSH
20498: LD_INT 4
20500: ARRAY
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20536
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20505: LD_ADDR_VAR 0 5
20509: PUSH
20510: LD_VAR 0 5
20514: PUSH
20515: LD_VAR 0 6
20519: PUSH
20520: LD_INT 10
20522: PLUS
20523: PPUSH
20524: CALL_OW 110
20528: PUSH
20529: LD_INT 3
20531: DIV
20532: PLUS
20533: ST_TO_ADDR
20534: GO 20502
20536: POP
20537: POP
// if red >= final_count then
20538: LD_VAR 0 2
20542: PUSH
20543: LD_EXP 20
20547: GREATEREQUAL
20548: IFFALSE 20564
// win = teams [ 1 ] ;
20550: LD_ADDR_LOC 33
20554: PUSH
20555: LD_EXP 22
20559: PUSH
20560: LD_INT 1
20562: ARRAY
20563: ST_TO_ADDR
// if blue >= final_count then
20564: LD_VAR 0 3
20568: PUSH
20569: LD_EXP 20
20573: GREATEREQUAL
20574: IFFALSE 20590
// win = teams [ 2 ] ;
20576: LD_ADDR_LOC 33
20580: PUSH
20581: LD_EXP 22
20585: PUSH
20586: LD_INT 2
20588: ARRAY
20589: ST_TO_ADDR
// if yel >= final_count then
20590: LD_VAR 0 4
20594: PUSH
20595: LD_EXP 20
20599: GREATEREQUAL
20600: IFFALSE 20616
// win = teams [ 3 ] ;
20602: LD_ADDR_LOC 33
20606: PUSH
20607: LD_EXP 22
20611: PUSH
20612: LD_INT 3
20614: ARRAY
20615: ST_TO_ADDR
// if green >= final_count then
20616: LD_VAR 0 5
20620: PUSH
20621: LD_EXP 20
20625: GREATEREQUAL
20626: IFFALSE 20642
// win = teams [ 4 ] ;
20628: LD_ADDR_LOC 33
20632: PUSH
20633: LD_EXP 22
20637: PUSH
20638: LD_INT 4
20640: ARRAY
20641: ST_TO_ADDR
// if win then
20642: LD_LOC 33
20646: IFFALSE 20653
// enable ( 4 ) else
20648: LD_INT 4
20650: ENABLE_MARKED
20651: GO 20654
// enable ;
20653: ENABLE
// end ; end ;
20654: PPOPN 6
20656: END
// every 0 0$1 marked 4 do
20657: GO 20659
20659: DISABLE
// begin if Player_Side in win then
20660: LD_EXP 27
20664: PUSH
20665: LD_LOC 33
20669: IN
20670: IFFALSE 20686
// begin wait ( 0 0$2 ) ;
20672: LD_INT 70
20674: PPUSH
20675: CALL_OW 67
// enable ( 401 ) ;
20679: LD_INT 401
20681: ENABLE_MARKED
// exit ;
20682: GO 20702
// end else
20684: GO 20702
// begin wait ( 0 0$2 ) ;
20686: LD_INT 70
20688: PPUSH
20689: CALL_OW 67
// Multiplayer_Loose_Message ;
20693: CALL_OW 521
// enable ( 400 ) ;
20697: LD_INT 400
20699: ENABLE_MARKED
// exit ;
20700: GO 20702
// end ; end ; end_of_file
20702: END
// export function SetMpTechs ( ) ; var side , i ; begin
20703: LD_INT 0
20705: PPUSH
20706: PPUSH
20707: PPUSH
// for side = 1 to 8 do
20708: LD_ADDR_VAR 0 2
20712: PUSH
20713: DOUBLE
20714: LD_INT 1
20716: DEC
20717: ST_TO_ADDR
20718: LD_INT 8
20720: PUSH
20721: FOR_TO
20722: IFFALSE 20843
// begin for i = 1 to 72 do
20724: LD_ADDR_VAR 0 3
20728: PUSH
20729: DOUBLE
20730: LD_INT 1
20732: DEC
20733: ST_TO_ADDR
20734: LD_INT 72
20736: PUSH
20737: FOR_TO
20738: IFFALSE 20769
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
20740: LD_VAR 0 3
20744: PPUSH
20745: LD_VAR 0 2
20749: PPUSH
20750: LD_INT 0
20752: PPUSH
20753: LD_VAR 0 3
20757: PPUSH
20758: CALL_OW 565
20762: PPUSH
20763: CALL_OW 322
20767: GO 20737
20769: POP
20770: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
20771: LD_INT 73
20773: PPUSH
20774: LD_VAR 0 2
20778: PPUSH
20779: LD_INT 0
20781: PPUSH
20782: LD_INT 25
20784: PPUSH
20785: CALL_OW 565
20789: PPUSH
20790: CALL_OW 322
// for i = 0 to 40 do
20794: LD_ADDR_VAR 0 3
20798: PUSH
20799: DOUBLE
20800: LD_INT 0
20802: DEC
20803: ST_TO_ADDR
20804: LD_INT 40
20806: PUSH
20807: FOR_TO
20808: IFFALSE 20839
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
20810: LD_VAR 0 3
20814: PPUSH
20815: LD_VAR 0 2
20819: PPUSH
20820: LD_INT 1
20822: PPUSH
20823: LD_VAR 0 3
20827: PPUSH
20828: CALL_OW 565
20832: PPUSH
20833: CALL_OW 324
20837: GO 20807
20839: POP
20840: POP
// end ;
20841: GO 20721
20843: POP
20844: POP
// end ;
20845: LD_VAR 0 1
20849: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
20850: LD_INT 0
20852: PPUSH
20853: PPUSH
20854: PPUSH
// for side = 1 to 8 do
20855: LD_ADDR_VAR 0 3
20859: PUSH
20860: DOUBLE
20861: LD_INT 1
20863: DEC
20864: ST_TO_ADDR
20865: LD_INT 8
20867: PUSH
20868: FOR_TO
20869: IFFALSE 24865
// begin for i = 1 to 73 do
20871: LD_ADDR_VAR 0 4
20875: PUSH
20876: DOUBLE
20877: LD_INT 1
20879: DEC
20880: ST_TO_ADDR
20881: LD_INT 73
20883: PUSH
20884: FOR_TO
20885: IFFALSE 20906
// SetTech ( i , side , state_disabled ) ;
20887: LD_VAR 0 4
20891: PPUSH
20892: LD_VAR 0 3
20896: PPUSH
20897: LD_INT 0
20899: PPUSH
20900: CALL_OW 322
20904: GO 20884
20906: POP
20907: POP
// for i = 0 to 40 do
20908: LD_ADDR_VAR 0 4
20912: PUSH
20913: DOUBLE
20914: LD_INT 0
20916: DEC
20917: ST_TO_ADDR
20918: LD_INT 40
20920: PUSH
20921: FOR_TO
20922: IFFALSE 20943
// SetRestrict ( i , side , false ) ;
20924: LD_VAR 0 4
20928: PPUSH
20929: LD_VAR 0 3
20933: PPUSH
20934: LD_INT 0
20936: PPUSH
20937: CALL_OW 324
20941: GO 20921
20943: POP
20944: POP
// case level of 1 :
20945: LD_VAR 0 1
20949: PUSH
20950: LD_INT 1
20952: DOUBLE
20953: EQUAL
20954: IFTRUE 20958
20956: GO 21111
20958: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20959: LD_INT 35
20961: PPUSH
20962: LD_VAR 0 3
20966: PPUSH
20967: LD_INT 1
20969: PPUSH
20970: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20974: LD_INT 45
20976: PPUSH
20977: LD_VAR 0 3
20981: PPUSH
20982: LD_INT 1
20984: PPUSH
20985: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20989: LD_INT 46
20991: PPUSH
20992: LD_VAR 0 3
20996: PPUSH
20997: LD_INT 1
20999: PPUSH
21000: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21004: LD_INT 47
21006: PPUSH
21007: LD_VAR 0 3
21011: PPUSH
21012: LD_INT 1
21014: PPUSH
21015: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21019: LD_INT 0
21021: PPUSH
21022: LD_VAR 0 3
21026: PPUSH
21027: LD_INT 1
21029: PPUSH
21030: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21034: LD_INT 2
21036: PPUSH
21037: LD_VAR 0 3
21041: PPUSH
21042: LD_INT 1
21044: PPUSH
21045: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21049: LD_INT 4
21051: PPUSH
21052: LD_VAR 0 3
21056: PPUSH
21057: LD_INT 1
21059: PPUSH
21060: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21064: LD_INT 6
21066: PPUSH
21067: LD_VAR 0 3
21071: PPUSH
21072: LD_INT 1
21074: PPUSH
21075: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21079: LD_INT 29
21081: PPUSH
21082: LD_VAR 0 3
21086: PPUSH
21087: LD_INT 1
21089: PPUSH
21090: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21094: LD_INT 31
21096: PPUSH
21097: LD_VAR 0 3
21101: PPUSH
21102: LD_INT 1
21104: PPUSH
21105: CALL_OW 324
// end ; 2 :
21109: GO 24863
21111: LD_INT 2
21113: DOUBLE
21114: EQUAL
21115: IFTRUE 21119
21117: GO 21317
21119: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21120: LD_INT 35
21122: PPUSH
21123: LD_VAR 0 3
21127: PPUSH
21128: LD_INT 1
21130: PPUSH
21131: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21135: LD_INT 45
21137: PPUSH
21138: LD_VAR 0 3
21142: PPUSH
21143: LD_INT 1
21145: PPUSH
21146: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21150: LD_INT 46
21152: PPUSH
21153: LD_VAR 0 3
21157: PPUSH
21158: LD_INT 1
21160: PPUSH
21161: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21165: LD_INT 47
21167: PPUSH
21168: LD_VAR 0 3
21172: PPUSH
21173: LD_INT 1
21175: PPUSH
21176: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21180: LD_INT 1
21182: PPUSH
21183: LD_VAR 0 3
21187: PPUSH
21188: LD_INT 1
21190: PPUSH
21191: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21195: LD_INT 2
21197: PPUSH
21198: LD_VAR 0 3
21202: PPUSH
21203: LD_INT 1
21205: PPUSH
21206: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21210: LD_INT 11
21212: PPUSH
21213: LD_VAR 0 3
21217: PPUSH
21218: LD_INT 1
21220: PPUSH
21221: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21225: LD_INT 0
21227: PPUSH
21228: LD_VAR 0 3
21232: PPUSH
21233: LD_INT 1
21235: PPUSH
21236: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21240: LD_INT 2
21242: PPUSH
21243: LD_VAR 0 3
21247: PPUSH
21248: LD_INT 1
21250: PPUSH
21251: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21255: LD_INT 4
21257: PPUSH
21258: LD_VAR 0 3
21262: PPUSH
21263: LD_INT 1
21265: PPUSH
21266: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21270: LD_INT 6
21272: PPUSH
21273: LD_VAR 0 3
21277: PPUSH
21278: LD_INT 1
21280: PPUSH
21281: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21285: LD_INT 29
21287: PPUSH
21288: LD_VAR 0 3
21292: PPUSH
21293: LD_INT 1
21295: PPUSH
21296: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21300: LD_INT 31
21302: PPUSH
21303: LD_VAR 0 3
21307: PPUSH
21308: LD_INT 1
21310: PPUSH
21311: CALL_OW 324
// end ; 3 :
21315: GO 24863
21317: LD_INT 3
21319: DOUBLE
21320: EQUAL
21321: IFTRUE 21325
21323: GO 21778
21325: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21326: LD_INT 35
21328: PPUSH
21329: LD_VAR 0 3
21333: PPUSH
21334: LD_INT 1
21336: PPUSH
21337: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21341: LD_INT 45
21343: PPUSH
21344: LD_VAR 0 3
21348: PPUSH
21349: LD_INT 1
21351: PPUSH
21352: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21356: LD_INT 46
21358: PPUSH
21359: LD_VAR 0 3
21363: PPUSH
21364: LD_INT 1
21366: PPUSH
21367: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21371: LD_INT 47
21373: PPUSH
21374: LD_VAR 0 3
21378: PPUSH
21379: LD_INT 1
21381: PPUSH
21382: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21386: LD_INT 1
21388: PPUSH
21389: LD_VAR 0 3
21393: PPUSH
21394: LD_INT 1
21396: PPUSH
21397: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21401: LD_INT 2
21403: PPUSH
21404: LD_VAR 0 3
21408: PPUSH
21409: LD_INT 1
21411: PPUSH
21412: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21416: LD_INT 11
21418: PPUSH
21419: LD_VAR 0 3
21423: PPUSH
21424: LD_INT 1
21426: PPUSH
21427: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21431: LD_INT 48
21433: PPUSH
21434: LD_VAR 0 3
21438: PPUSH
21439: LD_INT 1
21441: PPUSH
21442: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21446: LD_INT 69
21448: PPUSH
21449: LD_VAR 0 3
21453: PPUSH
21454: LD_INT 1
21456: PPUSH
21457: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21461: LD_INT 39
21463: PPUSH
21464: LD_VAR 0 3
21468: PPUSH
21469: LD_INT 1
21471: PPUSH
21472: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21476: LD_INT 43
21478: PPUSH
21479: LD_VAR 0 3
21483: PPUSH
21484: LD_INT 1
21486: PPUSH
21487: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21491: LD_INT 51
21493: PPUSH
21494: LD_VAR 0 3
21498: PPUSH
21499: LD_INT 1
21501: PPUSH
21502: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21506: LD_INT 6
21508: PPUSH
21509: LD_VAR 0 3
21513: PPUSH
21514: LD_INT 1
21516: PPUSH
21517: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21521: LD_INT 0
21523: PPUSH
21524: LD_VAR 0 3
21528: PPUSH
21529: LD_INT 1
21531: PPUSH
21532: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21536: LD_INT 2
21538: PPUSH
21539: LD_VAR 0 3
21543: PPUSH
21544: LD_INT 1
21546: PPUSH
21547: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21551: LD_INT 3
21553: PPUSH
21554: LD_VAR 0 3
21558: PPUSH
21559: LD_INT 1
21561: PPUSH
21562: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21566: LD_INT 4
21568: PPUSH
21569: LD_VAR 0 3
21573: PPUSH
21574: LD_INT 1
21576: PPUSH
21577: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21581: LD_INT 6
21583: PPUSH
21584: LD_VAR 0 3
21588: PPUSH
21589: LD_INT 1
21591: PPUSH
21592: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21596: LD_INT 7
21598: PPUSH
21599: LD_VAR 0 3
21603: PPUSH
21604: LD_INT 1
21606: PPUSH
21607: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21611: LD_INT 8
21613: PPUSH
21614: LD_VAR 0 3
21618: PPUSH
21619: LD_INT 1
21621: PPUSH
21622: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21626: LD_INT 10
21628: PPUSH
21629: LD_VAR 0 3
21633: PPUSH
21634: LD_INT 1
21636: PPUSH
21637: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21641: LD_INT 15
21643: PPUSH
21644: LD_VAR 0 3
21648: PPUSH
21649: LD_INT 1
21651: PPUSH
21652: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21656: LD_INT 16
21658: PPUSH
21659: LD_VAR 0 3
21663: PPUSH
21664: LD_INT 1
21666: PPUSH
21667: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21671: LD_INT 17
21673: PPUSH
21674: LD_VAR 0 3
21678: PPUSH
21679: LD_INT 1
21681: PPUSH
21682: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21686: LD_INT 20
21688: PPUSH
21689: LD_VAR 0 3
21693: PPUSH
21694: LD_INT 1
21696: PPUSH
21697: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21701: LD_INT 26
21703: PPUSH
21704: LD_VAR 0 3
21708: PPUSH
21709: LD_INT 1
21711: PPUSH
21712: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21716: LD_INT 27
21718: PPUSH
21719: LD_VAR 0 3
21723: PPUSH
21724: LD_INT 1
21726: PPUSH
21727: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21731: LD_INT 29
21733: PPUSH
21734: LD_VAR 0 3
21738: PPUSH
21739: LD_INT 1
21741: PPUSH
21742: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21746: LD_INT 31
21748: PPUSH
21749: LD_VAR 0 3
21753: PPUSH
21754: LD_INT 1
21756: PPUSH
21757: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21761: LD_INT 32
21763: PPUSH
21764: LD_VAR 0 3
21768: PPUSH
21769: LD_INT 1
21771: PPUSH
21772: CALL_OW 324
// end ; 4 :
21776: GO 24863
21778: LD_INT 4
21780: DOUBLE
21781: EQUAL
21782: IFTRUE 21786
21784: GO 22734
21786: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21787: LD_INT 35
21789: PPUSH
21790: LD_VAR 0 3
21794: PPUSH
21795: LD_INT 1
21797: PPUSH
21798: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21802: LD_INT 45
21804: PPUSH
21805: LD_VAR 0 3
21809: PPUSH
21810: LD_INT 1
21812: PPUSH
21813: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21817: LD_INT 46
21819: PPUSH
21820: LD_VAR 0 3
21824: PPUSH
21825: LD_INT 1
21827: PPUSH
21828: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21832: LD_INT 47
21834: PPUSH
21835: LD_VAR 0 3
21839: PPUSH
21840: LD_INT 1
21842: PPUSH
21843: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21847: LD_INT 1
21849: PPUSH
21850: LD_VAR 0 3
21854: PPUSH
21855: LD_INT 1
21857: PPUSH
21858: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21862: LD_INT 2
21864: PPUSH
21865: LD_VAR 0 3
21869: PPUSH
21870: LD_INT 1
21872: PPUSH
21873: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21877: LD_INT 11
21879: PPUSH
21880: LD_VAR 0 3
21884: PPUSH
21885: LD_INT 1
21887: PPUSH
21888: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21892: LD_INT 20
21894: PPUSH
21895: LD_VAR 0 3
21899: PPUSH
21900: LD_INT 1
21902: PPUSH
21903: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21907: LD_INT 48
21909: PPUSH
21910: LD_VAR 0 3
21914: PPUSH
21915: LD_INT 1
21917: PPUSH
21918: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21922: LD_INT 49
21924: PPUSH
21925: LD_VAR 0 3
21929: PPUSH
21930: LD_INT 1
21932: PPUSH
21933: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21937: LD_INT 69
21939: PPUSH
21940: LD_VAR 0 3
21944: PPUSH
21945: LD_INT 1
21947: PPUSH
21948: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21952: LD_INT 39
21954: PPUSH
21955: LD_VAR 0 3
21959: PPUSH
21960: LD_INT 1
21962: PPUSH
21963: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21967: LD_INT 34
21969: PPUSH
21970: LD_VAR 0 3
21974: PPUSH
21975: LD_INT 1
21977: PPUSH
21978: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21982: LD_INT 42
21984: PPUSH
21985: LD_VAR 0 3
21989: PPUSH
21990: LD_INT 1
21992: PPUSH
21993: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21997: LD_INT 44
21999: PPUSH
22000: LD_VAR 0 3
22004: PPUSH
22005: LD_INT 1
22007: PPUSH
22008: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22012: LD_INT 41
22014: PPUSH
22015: LD_VAR 0 3
22019: PPUSH
22020: LD_INT 1
22022: PPUSH
22023: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22027: LD_INT 43
22029: PPUSH
22030: LD_VAR 0 3
22034: PPUSH
22035: LD_INT 1
22037: PPUSH
22038: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22042: LD_INT 70
22044: PPUSH
22045: LD_VAR 0 3
22049: PPUSH
22050: LD_INT 1
22052: PPUSH
22053: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22057: LD_INT 51
22059: PPUSH
22060: LD_VAR 0 3
22064: PPUSH
22065: LD_INT 1
22067: PPUSH
22068: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22072: LD_INT 52
22074: PPUSH
22075: LD_VAR 0 3
22079: PPUSH
22080: LD_INT 1
22082: PPUSH
22083: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22087: LD_INT 6
22089: PPUSH
22090: LD_VAR 0 3
22094: PPUSH
22095: LD_INT 1
22097: PPUSH
22098: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22102: LD_INT 15
22104: PPUSH
22105: LD_VAR 0 3
22109: PPUSH
22110: LD_INT 1
22112: PPUSH
22113: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22117: LD_INT 7
22119: PPUSH
22120: LD_VAR 0 3
22124: PPUSH
22125: LD_INT 1
22127: PPUSH
22128: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22132: LD_INT 12
22134: PPUSH
22135: LD_VAR 0 3
22139: PPUSH
22140: LD_INT 1
22142: PPUSH
22143: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22147: LD_INT 18
22149: PPUSH
22150: LD_VAR 0 3
22154: PPUSH
22155: LD_INT 1
22157: PPUSH
22158: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
22162: LD_INT 60
22164: PPUSH
22165: LD_VAR 0 3
22169: PPUSH
22170: LD_INT 1
22172: PPUSH
22173: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
22177: LD_INT 9
22179: PPUSH
22180: LD_VAR 0 3
22184: PPUSH
22185: LD_INT 1
22187: PPUSH
22188: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
22192: LD_INT 30
22194: PPUSH
22195: LD_VAR 0 3
22199: PPUSH
22200: LD_INT 1
22202: PPUSH
22203: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
22207: LD_INT 37
22209: PPUSH
22210: LD_VAR 0 3
22214: PPUSH
22215: LD_INT 1
22217: PPUSH
22218: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
22222: LD_INT 5
22224: PPUSH
22225: LD_VAR 0 3
22229: PPUSH
22230: LD_INT 1
22232: PPUSH
22233: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
22237: LD_INT 66
22239: PPUSH
22240: LD_VAR 0 3
22244: PPUSH
22245: LD_INT 1
22247: PPUSH
22248: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
22252: LD_INT 21
22254: PPUSH
22255: LD_VAR 0 3
22259: PPUSH
22260: LD_INT 1
22262: PPUSH
22263: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22267: LD_INT 22
22269: PPUSH
22270: LD_VAR 0 3
22274: PPUSH
22275: LD_INT 1
22277: PPUSH
22278: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22282: LD_INT 54
22284: PPUSH
22285: LD_VAR 0 3
22289: PPUSH
22290: LD_INT 1
22292: PPUSH
22293: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22297: LD_INT 0
22299: PPUSH
22300: LD_VAR 0 3
22304: PPUSH
22305: LD_INT 1
22307: PPUSH
22308: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22312: LD_INT 1
22314: PPUSH
22315: LD_VAR 0 3
22319: PPUSH
22320: LD_INT 1
22322: PPUSH
22323: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22327: LD_INT 2
22329: PPUSH
22330: LD_VAR 0 3
22334: PPUSH
22335: LD_INT 1
22337: PPUSH
22338: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22342: LD_INT 3
22344: PPUSH
22345: LD_VAR 0 3
22349: PPUSH
22350: LD_INT 1
22352: PPUSH
22353: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22357: LD_INT 4
22359: PPUSH
22360: LD_VAR 0 3
22364: PPUSH
22365: LD_INT 1
22367: PPUSH
22368: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22372: LD_INT 5
22374: PPUSH
22375: LD_VAR 0 3
22379: PPUSH
22380: LD_INT 1
22382: PPUSH
22383: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22387: LD_INT 6
22389: PPUSH
22390: LD_VAR 0 3
22394: PPUSH
22395: LD_INT 1
22397: PPUSH
22398: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22402: LD_INT 7
22404: PPUSH
22405: LD_VAR 0 3
22409: PPUSH
22410: LD_INT 1
22412: PPUSH
22413: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22417: LD_INT 8
22419: PPUSH
22420: LD_VAR 0 3
22424: PPUSH
22425: LD_INT 1
22427: PPUSH
22428: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22432: LD_INT 10
22434: PPUSH
22435: LD_VAR 0 3
22439: PPUSH
22440: LD_INT 1
22442: PPUSH
22443: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22447: LD_INT 11
22449: PPUSH
22450: LD_VAR 0 3
22454: PPUSH
22455: LD_INT 1
22457: PPUSH
22458: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22462: LD_INT 12
22464: PPUSH
22465: LD_VAR 0 3
22469: PPUSH
22470: LD_INT 1
22472: PPUSH
22473: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22477: LD_INT 13
22479: PPUSH
22480: LD_VAR 0 3
22484: PPUSH
22485: LD_INT 1
22487: PPUSH
22488: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22492: LD_INT 14
22494: PPUSH
22495: LD_VAR 0 3
22499: PPUSH
22500: LD_INT 1
22502: PPUSH
22503: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22507: LD_INT 15
22509: PPUSH
22510: LD_VAR 0 3
22514: PPUSH
22515: LD_INT 1
22517: PPUSH
22518: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22522: LD_INT 16
22524: PPUSH
22525: LD_VAR 0 3
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22537: LD_INT 17
22539: PPUSH
22540: LD_VAR 0 3
22544: PPUSH
22545: LD_INT 1
22547: PPUSH
22548: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22552: LD_INT 19
22554: PPUSH
22555: LD_VAR 0 3
22559: PPUSH
22560: LD_INT 1
22562: PPUSH
22563: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22567: LD_INT 20
22569: PPUSH
22570: LD_VAR 0 3
22574: PPUSH
22575: LD_INT 1
22577: PPUSH
22578: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22582: LD_INT 21
22584: PPUSH
22585: LD_VAR 0 3
22589: PPUSH
22590: LD_INT 1
22592: PPUSH
22593: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22597: LD_INT 23
22599: PPUSH
22600: LD_VAR 0 3
22604: PPUSH
22605: LD_INT 1
22607: PPUSH
22608: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22612: LD_INT 26
22614: PPUSH
22615: LD_VAR 0 3
22619: PPUSH
22620: LD_INT 1
22622: PPUSH
22623: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22627: LD_INT 27
22629: PPUSH
22630: LD_VAR 0 3
22634: PPUSH
22635: LD_INT 1
22637: PPUSH
22638: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22642: LD_INT 28
22644: PPUSH
22645: LD_VAR 0 3
22649: PPUSH
22650: LD_INT 1
22652: PPUSH
22653: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22657: LD_INT 29
22659: PPUSH
22660: LD_VAR 0 3
22664: PPUSH
22665: LD_INT 1
22667: PPUSH
22668: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22672: LD_INT 30
22674: PPUSH
22675: LD_VAR 0 3
22679: PPUSH
22680: LD_INT 1
22682: PPUSH
22683: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22687: LD_INT 31
22689: PPUSH
22690: LD_VAR 0 3
22694: PPUSH
22695: LD_INT 1
22697: PPUSH
22698: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22702: LD_INT 32
22704: PPUSH
22705: LD_VAR 0 3
22709: PPUSH
22710: LD_INT 1
22712: PPUSH
22713: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22717: LD_INT 36
22719: PPUSH
22720: LD_VAR 0 3
22724: PPUSH
22725: LD_INT 1
22727: PPUSH
22728: CALL_OW 324
// end ; 5 :
22732: GO 24863
22734: LD_INT 5
22736: DOUBLE
22737: EQUAL
22738: IFTRUE 22742
22740: GO 23855
22742: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22743: LD_INT 35
22745: PPUSH
22746: LD_VAR 0 3
22750: PPUSH
22751: LD_INT 1
22753: PPUSH
22754: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22758: LD_INT 45
22760: PPUSH
22761: LD_VAR 0 3
22765: PPUSH
22766: LD_INT 1
22768: PPUSH
22769: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22773: LD_INT 46
22775: PPUSH
22776: LD_VAR 0 3
22780: PPUSH
22781: LD_INT 1
22783: PPUSH
22784: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22788: LD_INT 47
22790: PPUSH
22791: LD_VAR 0 3
22795: PPUSH
22796: LD_INT 1
22798: PPUSH
22799: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22803: LD_INT 1
22805: PPUSH
22806: LD_VAR 0 3
22810: PPUSH
22811: LD_INT 1
22813: PPUSH
22814: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22818: LD_INT 2
22820: PPUSH
22821: LD_VAR 0 3
22825: PPUSH
22826: LD_INT 1
22828: PPUSH
22829: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22833: LD_INT 11
22835: PPUSH
22836: LD_VAR 0 3
22840: PPUSH
22841: LD_INT 1
22843: PPUSH
22844: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22848: LD_INT 20
22850: PPUSH
22851: LD_VAR 0 3
22855: PPUSH
22856: LD_INT 1
22858: PPUSH
22859: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22863: LD_INT 48
22865: PPUSH
22866: LD_VAR 0 3
22870: PPUSH
22871: LD_INT 1
22873: PPUSH
22874: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22878: LD_INT 49
22880: PPUSH
22881: LD_VAR 0 3
22885: PPUSH
22886: LD_INT 1
22888: PPUSH
22889: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22893: LD_INT 69
22895: PPUSH
22896: LD_VAR 0 3
22900: PPUSH
22901: LD_INT 1
22903: PPUSH
22904: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22908: LD_INT 39
22910: PPUSH
22911: LD_VAR 0 3
22915: PPUSH
22916: LD_INT 1
22918: PPUSH
22919: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22923: LD_INT 34
22925: PPUSH
22926: LD_VAR 0 3
22930: PPUSH
22931: LD_INT 1
22933: PPUSH
22934: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22938: LD_INT 42
22940: PPUSH
22941: LD_VAR 0 3
22945: PPUSH
22946: LD_INT 1
22948: PPUSH
22949: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22953: LD_INT 44
22955: PPUSH
22956: LD_VAR 0 3
22960: PPUSH
22961: LD_INT 1
22963: PPUSH
22964: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22968: LD_INT 41
22970: PPUSH
22971: LD_VAR 0 3
22975: PPUSH
22976: LD_INT 1
22978: PPUSH
22979: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22983: LD_INT 40
22985: PPUSH
22986: LD_VAR 0 3
22990: PPUSH
22991: LD_INT 1
22993: PPUSH
22994: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22998: LD_INT 43
23000: PPUSH
23001: LD_VAR 0 3
23005: PPUSH
23006: LD_INT 1
23008: PPUSH
23009: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23013: LD_INT 70
23015: PPUSH
23016: LD_VAR 0 3
23020: PPUSH
23021: LD_INT 1
23023: PPUSH
23024: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23028: LD_INT 51
23030: PPUSH
23031: LD_VAR 0 3
23035: PPUSH
23036: LD_INT 1
23038: PPUSH
23039: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23043: LD_INT 52
23045: PPUSH
23046: LD_VAR 0 3
23050: PPUSH
23051: LD_INT 1
23053: PPUSH
23054: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23058: LD_INT 6
23060: PPUSH
23061: LD_VAR 0 3
23065: PPUSH
23066: LD_INT 1
23068: PPUSH
23069: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23073: LD_INT 15
23075: PPUSH
23076: LD_VAR 0 3
23080: PPUSH
23081: LD_INT 1
23083: PPUSH
23084: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23088: LD_INT 7
23090: PPUSH
23091: LD_VAR 0 3
23095: PPUSH
23096: LD_INT 1
23098: PPUSH
23099: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23103: LD_INT 12
23105: PPUSH
23106: LD_VAR 0 3
23110: PPUSH
23111: LD_INT 1
23113: PPUSH
23114: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
23118: LD_INT 17
23120: PPUSH
23121: LD_VAR 0 3
23125: PPUSH
23126: LD_INT 1
23128: PPUSH
23129: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23133: LD_INT 18
23135: PPUSH
23136: LD_VAR 0 3
23140: PPUSH
23141: LD_INT 1
23143: PPUSH
23144: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23148: LD_INT 60
23150: PPUSH
23151: LD_VAR 0 3
23155: PPUSH
23156: LD_INT 1
23158: PPUSH
23159: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23163: LD_INT 32
23165: PPUSH
23166: LD_VAR 0 3
23170: PPUSH
23171: LD_INT 1
23173: PPUSH
23174: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23178: LD_INT 9
23180: PPUSH
23181: LD_VAR 0 3
23185: PPUSH
23186: LD_INT 1
23188: PPUSH
23189: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23193: LD_INT 57
23195: PPUSH
23196: LD_VAR 0 3
23200: PPUSH
23201: LD_INT 1
23203: PPUSH
23204: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23208: LD_INT 30
23210: PPUSH
23211: LD_VAR 0 3
23215: PPUSH
23216: LD_INT 1
23218: PPUSH
23219: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23223: LD_INT 37
23225: PPUSH
23226: LD_VAR 0 3
23230: PPUSH
23231: LD_INT 1
23233: PPUSH
23234: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23238: LD_INT 63
23240: PPUSH
23241: LD_VAR 0 3
23245: PPUSH
23246: LD_INT 1
23248: PPUSH
23249: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23253: LD_INT 3
23255: PPUSH
23256: LD_VAR 0 3
23260: PPUSH
23261: LD_INT 1
23263: PPUSH
23264: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23268: LD_INT 4
23270: PPUSH
23271: LD_VAR 0 3
23275: PPUSH
23276: LD_INT 1
23278: PPUSH
23279: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23283: LD_INT 5
23285: PPUSH
23286: LD_VAR 0 3
23290: PPUSH
23291: LD_INT 1
23293: PPUSH
23294: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23298: LD_INT 66
23300: PPUSH
23301: LD_VAR 0 3
23305: PPUSH
23306: LD_INT 1
23308: PPUSH
23309: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23313: LD_INT 21
23315: PPUSH
23316: LD_VAR 0 3
23320: PPUSH
23321: LD_INT 1
23323: PPUSH
23324: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23328: LD_INT 22
23330: PPUSH
23331: LD_VAR 0 3
23335: PPUSH
23336: LD_INT 1
23338: PPUSH
23339: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23343: LD_INT 19
23345: PPUSH
23346: LD_VAR 0 3
23350: PPUSH
23351: LD_INT 1
23353: PPUSH
23354: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23358: LD_INT 54
23360: PPUSH
23361: LD_VAR 0 3
23365: PPUSH
23366: LD_INT 1
23368: PPUSH
23369: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23373: LD_INT 55
23375: PPUSH
23376: LD_VAR 0 3
23380: PPUSH
23381: LD_INT 1
23383: PPUSH
23384: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23388: LD_INT 0
23390: PPUSH
23391: LD_VAR 0 3
23395: PPUSH
23396: LD_INT 1
23398: PPUSH
23399: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23403: LD_INT 1
23405: PPUSH
23406: LD_VAR 0 3
23410: PPUSH
23411: LD_INT 1
23413: PPUSH
23414: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23418: LD_INT 2
23420: PPUSH
23421: LD_VAR 0 3
23425: PPUSH
23426: LD_INT 1
23428: PPUSH
23429: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23433: LD_INT 3
23435: PPUSH
23436: LD_VAR 0 3
23440: PPUSH
23441: LD_INT 1
23443: PPUSH
23444: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23448: LD_INT 4
23450: PPUSH
23451: LD_VAR 0 3
23455: PPUSH
23456: LD_INT 1
23458: PPUSH
23459: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23463: LD_INT 5
23465: PPUSH
23466: LD_VAR 0 3
23470: PPUSH
23471: LD_INT 1
23473: PPUSH
23474: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23478: LD_INT 6
23480: PPUSH
23481: LD_VAR 0 3
23485: PPUSH
23486: LD_INT 1
23488: PPUSH
23489: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23493: LD_INT 7
23495: PPUSH
23496: LD_VAR 0 3
23500: PPUSH
23501: LD_INT 1
23503: PPUSH
23504: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23508: LD_INT 8
23510: PPUSH
23511: LD_VAR 0 3
23515: PPUSH
23516: LD_INT 1
23518: PPUSH
23519: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23523: LD_INT 10
23525: PPUSH
23526: LD_VAR 0 3
23530: PPUSH
23531: LD_INT 1
23533: PPUSH
23534: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23538: LD_INT 11
23540: PPUSH
23541: LD_VAR 0 3
23545: PPUSH
23546: LD_INT 1
23548: PPUSH
23549: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23553: LD_INT 12
23555: PPUSH
23556: LD_VAR 0 3
23560: PPUSH
23561: LD_INT 1
23563: PPUSH
23564: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23568: LD_INT 13
23570: PPUSH
23571: LD_VAR 0 3
23575: PPUSH
23576: LD_INT 1
23578: PPUSH
23579: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23583: LD_INT 14
23585: PPUSH
23586: LD_VAR 0 3
23590: PPUSH
23591: LD_INT 1
23593: PPUSH
23594: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23598: LD_INT 15
23600: PPUSH
23601: LD_VAR 0 3
23605: PPUSH
23606: LD_INT 1
23608: PPUSH
23609: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23613: LD_INT 16
23615: PPUSH
23616: LD_VAR 0 3
23620: PPUSH
23621: LD_INT 1
23623: PPUSH
23624: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23628: LD_INT 17
23630: PPUSH
23631: LD_VAR 0 3
23635: PPUSH
23636: LD_INT 1
23638: PPUSH
23639: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
23643: LD_INT 18
23645: PPUSH
23646: LD_VAR 0 3
23650: PPUSH
23651: LD_INT 1
23653: PPUSH
23654: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23658: LD_INT 19
23660: PPUSH
23661: LD_VAR 0 3
23665: PPUSH
23666: LD_INT 1
23668: PPUSH
23669: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23673: LD_INT 20
23675: PPUSH
23676: LD_VAR 0 3
23680: PPUSH
23681: LD_INT 1
23683: PPUSH
23684: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23688: LD_INT 21
23690: PPUSH
23691: LD_VAR 0 3
23695: PPUSH
23696: LD_INT 1
23698: PPUSH
23699: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23703: LD_INT 23
23705: PPUSH
23706: LD_VAR 0 3
23710: PPUSH
23711: LD_INT 1
23713: PPUSH
23714: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23718: LD_INT 26
23720: PPUSH
23721: LD_VAR 0 3
23725: PPUSH
23726: LD_INT 1
23728: PPUSH
23729: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23733: LD_INT 27
23735: PPUSH
23736: LD_VAR 0 3
23740: PPUSH
23741: LD_INT 1
23743: PPUSH
23744: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23748: LD_INT 28
23750: PPUSH
23751: LD_VAR 0 3
23755: PPUSH
23756: LD_INT 1
23758: PPUSH
23759: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23763: LD_INT 29
23765: PPUSH
23766: LD_VAR 0 3
23770: PPUSH
23771: LD_INT 1
23773: PPUSH
23774: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23778: LD_INT 30
23780: PPUSH
23781: LD_VAR 0 3
23785: PPUSH
23786: LD_INT 1
23788: PPUSH
23789: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23793: LD_INT 31
23795: PPUSH
23796: LD_VAR 0 3
23800: PPUSH
23801: LD_INT 1
23803: PPUSH
23804: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23808: LD_INT 32
23810: PPUSH
23811: LD_VAR 0 3
23815: PPUSH
23816: LD_INT 1
23818: PPUSH
23819: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
23823: LD_INT 33
23825: PPUSH
23826: LD_VAR 0 3
23830: PPUSH
23831: LD_INT 1
23833: PPUSH
23834: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23838: LD_INT 36
23840: PPUSH
23841: LD_VAR 0 3
23845: PPUSH
23846: LD_INT 1
23848: PPUSH
23849: CALL_OW 324
// end ; 6 :
23853: GO 24863
23855: LD_INT 6
23857: DOUBLE
23858: EQUAL
23859: IFTRUE 23863
23861: GO 24788
23863: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23864: LD_INT 35
23866: PPUSH
23867: LD_VAR 0 3
23871: PPUSH
23872: LD_INT 1
23874: PPUSH
23875: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23879: LD_INT 45
23881: PPUSH
23882: LD_VAR 0 3
23886: PPUSH
23887: LD_INT 1
23889: PPUSH
23890: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23894: LD_INT 46
23896: PPUSH
23897: LD_VAR 0 3
23901: PPUSH
23902: LD_INT 1
23904: PPUSH
23905: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23909: LD_INT 47
23911: PPUSH
23912: LD_VAR 0 3
23916: PPUSH
23917: LD_INT 1
23919: PPUSH
23920: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23924: LD_INT 1
23926: PPUSH
23927: LD_VAR 0 3
23931: PPUSH
23932: LD_INT 1
23934: PPUSH
23935: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23939: LD_INT 2
23941: PPUSH
23942: LD_VAR 0 3
23946: PPUSH
23947: LD_INT 1
23949: PPUSH
23950: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23954: LD_INT 11
23956: PPUSH
23957: LD_VAR 0 3
23961: PPUSH
23962: LD_INT 1
23964: PPUSH
23965: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23969: LD_INT 20
23971: PPUSH
23972: LD_VAR 0 3
23976: PPUSH
23977: LD_INT 1
23979: PPUSH
23980: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23984: LD_INT 48
23986: PPUSH
23987: LD_VAR 0 3
23991: PPUSH
23992: LD_INT 1
23994: PPUSH
23995: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23999: LD_INT 49
24001: PPUSH
24002: LD_VAR 0 3
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
24014: LD_INT 50
24016: PPUSH
24017: LD_VAR 0 3
24021: PPUSH
24022: LD_INT 1
24024: PPUSH
24025: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24029: LD_INT 69
24031: PPUSH
24032: LD_VAR 0 3
24036: PPUSH
24037: LD_INT 1
24039: PPUSH
24040: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24044: LD_INT 39
24046: PPUSH
24047: LD_VAR 0 3
24051: PPUSH
24052: LD_INT 1
24054: PPUSH
24055: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24059: LD_INT 34
24061: PPUSH
24062: LD_VAR 0 3
24066: PPUSH
24067: LD_INT 1
24069: PPUSH
24070: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24074: LD_INT 42
24076: PPUSH
24077: LD_VAR 0 3
24081: PPUSH
24082: LD_INT 1
24084: PPUSH
24085: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24089: LD_INT 44
24091: PPUSH
24092: LD_VAR 0 3
24096: PPUSH
24097: LD_INT 1
24099: PPUSH
24100: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24104: LD_INT 41
24106: PPUSH
24107: LD_VAR 0 3
24111: PPUSH
24112: LD_INT 1
24114: PPUSH
24115: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
24119: LD_INT 13
24121: PPUSH
24122: LD_VAR 0 3
24126: PPUSH
24127: LD_INT 1
24129: PPUSH
24130: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24134: LD_INT 40
24136: PPUSH
24137: LD_VAR 0 3
24141: PPUSH
24142: LD_INT 1
24144: PPUSH
24145: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24149: LD_INT 43
24151: PPUSH
24152: LD_VAR 0 3
24156: PPUSH
24157: LD_INT 1
24159: PPUSH
24160: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24164: LD_INT 70
24166: PPUSH
24167: LD_VAR 0 3
24171: PPUSH
24172: LD_INT 1
24174: PPUSH
24175: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
24179: LD_INT 23
24181: PPUSH
24182: LD_VAR 0 3
24186: PPUSH
24187: LD_INT 1
24189: PPUSH
24190: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24194: LD_INT 51
24196: PPUSH
24197: LD_VAR 0 3
24201: PPUSH
24202: LD_INT 1
24204: PPUSH
24205: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24209: LD_INT 52
24211: PPUSH
24212: LD_VAR 0 3
24216: PPUSH
24217: LD_INT 1
24219: PPUSH
24220: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24224: LD_INT 6
24226: PPUSH
24227: LD_VAR 0 3
24231: PPUSH
24232: LD_INT 1
24234: PPUSH
24235: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24239: LD_INT 15
24241: PPUSH
24242: LD_VAR 0 3
24246: PPUSH
24247: LD_INT 1
24249: PPUSH
24250: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24254: LD_INT 7
24256: PPUSH
24257: LD_VAR 0 3
24261: PPUSH
24262: LD_INT 1
24264: PPUSH
24265: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24269: LD_INT 12
24271: PPUSH
24272: LD_VAR 0 3
24276: PPUSH
24277: LD_INT 1
24279: PPUSH
24280: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
24284: LD_INT 10
24286: PPUSH
24287: LD_VAR 0 3
24291: PPUSH
24292: LD_INT 1
24294: PPUSH
24295: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24299: LD_INT 17
24301: PPUSH
24302: LD_VAR 0 3
24306: PPUSH
24307: LD_INT 1
24309: PPUSH
24310: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24314: LD_INT 18
24316: PPUSH
24317: LD_VAR 0 3
24321: PPUSH
24322: LD_INT 1
24324: PPUSH
24325: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24329: LD_INT 60
24331: PPUSH
24332: LD_VAR 0 3
24336: PPUSH
24337: LD_INT 1
24339: PPUSH
24340: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
24344: LD_INT 61
24346: PPUSH
24347: LD_VAR 0 3
24351: PPUSH
24352: LD_INT 1
24354: PPUSH
24355: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24359: LD_INT 32
24361: PPUSH
24362: LD_VAR 0 3
24366: PPUSH
24367: LD_INT 1
24369: PPUSH
24370: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
24374: LD_INT 27
24376: PPUSH
24377: LD_VAR 0 3
24381: PPUSH
24382: LD_INT 1
24384: PPUSH
24385: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
24389: LD_INT 36
24391: PPUSH
24392: LD_VAR 0 3
24396: PPUSH
24397: LD_INT 1
24399: PPUSH
24400: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
24404: LD_INT 33
24406: PPUSH
24407: LD_VAR 0 3
24411: PPUSH
24412: LD_INT 1
24414: PPUSH
24415: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24419: LD_INT 9
24421: PPUSH
24422: LD_VAR 0 3
24426: PPUSH
24427: LD_INT 1
24429: PPUSH
24430: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
24434: LD_INT 38
24436: PPUSH
24437: LD_VAR 0 3
24441: PPUSH
24442: LD_INT 1
24444: PPUSH
24445: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24449: LD_INT 57
24451: PPUSH
24452: LD_VAR 0 3
24456: PPUSH
24457: LD_INT 1
24459: PPUSH
24460: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
24464: LD_INT 58
24466: PPUSH
24467: LD_VAR 0 3
24471: PPUSH
24472: LD_INT 1
24474: PPUSH
24475: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
24479: LD_INT 28
24481: PPUSH
24482: LD_VAR 0 3
24486: PPUSH
24487: LD_INT 1
24489: PPUSH
24490: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
24494: LD_INT 29
24496: PPUSH
24497: LD_VAR 0 3
24501: PPUSH
24502: LD_INT 1
24504: PPUSH
24505: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24509: LD_INT 30
24511: PPUSH
24512: LD_VAR 0 3
24516: PPUSH
24517: LD_INT 1
24519: PPUSH
24520: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24524: LD_INT 37
24526: PPUSH
24527: LD_VAR 0 3
24531: PPUSH
24532: LD_INT 1
24534: PPUSH
24535: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24539: LD_INT 63
24541: PPUSH
24542: LD_VAR 0 3
24546: PPUSH
24547: LD_INT 1
24549: PPUSH
24550: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
24554: LD_INT 64
24556: PPUSH
24557: LD_VAR 0 3
24561: PPUSH
24562: LD_INT 1
24564: PPUSH
24565: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24569: LD_INT 3
24571: PPUSH
24572: LD_VAR 0 3
24576: PPUSH
24577: LD_INT 1
24579: PPUSH
24580: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24584: LD_INT 4
24586: PPUSH
24587: LD_VAR 0 3
24591: PPUSH
24592: LD_INT 1
24594: PPUSH
24595: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24599: LD_INT 5
24601: PPUSH
24602: LD_VAR 0 3
24606: PPUSH
24607: LD_INT 1
24609: PPUSH
24610: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
24614: LD_INT 8
24616: PPUSH
24617: LD_VAR 0 3
24621: PPUSH
24622: LD_INT 1
24624: PPUSH
24625: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24629: LD_INT 66
24631: PPUSH
24632: LD_VAR 0 3
24636: PPUSH
24637: LD_INT 1
24639: PPUSH
24640: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
24644: LD_INT 67
24646: PPUSH
24647: LD_VAR 0 3
24651: PPUSH
24652: LD_INT 1
24654: PPUSH
24655: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24659: LD_INT 21
24661: PPUSH
24662: LD_VAR 0 3
24666: PPUSH
24667: LD_INT 1
24669: PPUSH
24670: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24674: LD_INT 22
24676: PPUSH
24677: LD_VAR 0 3
24681: PPUSH
24682: LD_INT 1
24684: PPUSH
24685: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24689: LD_INT 19
24691: PPUSH
24692: LD_VAR 0 3
24696: PPUSH
24697: LD_INT 1
24699: PPUSH
24700: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
24704: LD_INT 26
24706: PPUSH
24707: LD_VAR 0 3
24711: PPUSH
24712: LD_INT 1
24714: PPUSH
24715: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24719: LD_INT 54
24721: PPUSH
24722: LD_VAR 0 3
24726: PPUSH
24727: LD_INT 1
24729: PPUSH
24730: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24734: LD_INT 55
24736: PPUSH
24737: LD_VAR 0 3
24741: PPUSH
24742: LD_INT 1
24744: PPUSH
24745: CALL_OW 322
// for i = 0 to 39 do
24749: LD_ADDR_VAR 0 4
24753: PUSH
24754: DOUBLE
24755: LD_INT 0
24757: DEC
24758: ST_TO_ADDR
24759: LD_INT 39
24761: PUSH
24762: FOR_TO
24763: IFFALSE 24784
// SetRestrict ( i , side , true ) ;
24765: LD_VAR 0 4
24769: PPUSH
24770: LD_VAR 0 3
24774: PPUSH
24775: LD_INT 1
24777: PPUSH
24778: CALL_OW 324
24782: GO 24762
24784: POP
24785: POP
// end ; else
24786: GO 24863
24788: POP
// begin for i = 1 to 73 do
24789: LD_ADDR_VAR 0 4
24793: PUSH
24794: DOUBLE
24795: LD_INT 1
24797: DEC
24798: ST_TO_ADDR
24799: LD_INT 73
24801: PUSH
24802: FOR_TO
24803: IFFALSE 24824
// SetTech ( i , side , state_enabled ) ;
24805: LD_VAR 0 4
24809: PPUSH
24810: LD_VAR 0 3
24814: PPUSH
24815: LD_INT 1
24817: PPUSH
24818: CALL_OW 322
24822: GO 24802
24824: POP
24825: POP
// for i = 0 to 39 do
24826: LD_ADDR_VAR 0 4
24830: PUSH
24831: DOUBLE
24832: LD_INT 0
24834: DEC
24835: ST_TO_ADDR
24836: LD_INT 39
24838: PUSH
24839: FOR_TO
24840: IFFALSE 24861
// SetRestrict ( i , side , true ) ;
24842: LD_VAR 0 4
24846: PPUSH
24847: LD_VAR 0 3
24851: PPUSH
24852: LD_INT 1
24854: PPUSH
24855: CALL_OW 324
24859: GO 24839
24861: POP
24862: POP
// end ; end ; end ;
24863: GO 20868
24865: POP
24866: POP
// end ; end_of_file
24867: LD_VAR 0 2
24871: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
24872: LD_INT 0
24874: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
24875: LD_VAR 0 1
24879: PPUSH
24880: LD_VAR 0 2
24884: PPUSH
24885: LD_VAR 0 3
24889: PPUSH
24890: LD_INT 0
24892: PPUSH
24893: CALL 24902 0 4
// end ;
24897: LD_VAR 0 4
24901: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
24902: LD_INT 0
24904: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
24905: LD_STRING initScore({
24907: PUSH
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 1
24915: ARRAY
24916: STR
24917: PUSH
24918: LD_STRING ,
24920: STR
24921: PUSH
24922: LD_VAR 0 1
24926: PUSH
24927: LD_INT 2
24929: ARRAY
24930: STR
24931: PUSH
24932: LD_STRING ,
24934: STR
24935: PUSH
24936: LD_VAR 0 1
24940: PUSH
24941: LD_INT 3
24943: ARRAY
24944: STR
24945: PUSH
24946: LD_STRING ,
24948: STR
24949: PUSH
24950: LD_VAR 0 1
24954: PUSH
24955: LD_INT 4
24957: ARRAY
24958: STR
24959: PUSH
24960: LD_STRING ,
24962: STR
24963: PUSH
24964: LD_VAR 0 1
24968: PUSH
24969: LD_INT 5
24971: ARRAY
24972: STR
24973: PUSH
24974: LD_STRING ,
24976: STR
24977: PUSH
24978: LD_VAR 0 1
24982: PUSH
24983: LD_INT 6
24985: ARRAY
24986: STR
24987: PUSH
24988: LD_STRING ,
24990: STR
24991: PUSH
24992: LD_VAR 0 1
24996: PUSH
24997: LD_INT 7
24999: ARRAY
25000: STR
25001: PUSH
25002: LD_STRING ,
25004: STR
25005: PUSH
25006: LD_VAR 0 1
25010: PUSH
25011: LD_INT 8
25013: ARRAY
25014: STR
25015: PUSH
25016: LD_STRING },
25018: STR
25019: PUSH
25020: LD_VAR 0 2
25024: STR
25025: PUSH
25026: LD_STRING ,
25028: STR
25029: PUSH
25030: LD_VAR 0 3
25034: STR
25035: PUSH
25036: LD_STRING ,
25038: STR
25039: PUSH
25040: LD_VAR 0 4
25044: STR
25045: PUSH
25046: LD_STRING );
25048: STR
25049: PPUSH
25050: CALL_OW 559
// end ;
25054: LD_VAR 0 5
25058: RET
// export function LScore_Reset ( ) ; begin
25059: LD_INT 0
25061: PPUSH
// ToLua ( ResetScorebar(); ) ;
25062: LD_STRING ResetScorebar();
25064: PPUSH
25065: CALL_OW 559
// end ;
25069: LD_VAR 0 1
25073: RET
// export function LScore_Delete ( ID ) ; begin
25074: LD_INT 0
25076: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
25077: LD_STRING deleteScore(
25079: PUSH
25080: LD_VAR 0 1
25084: STR
25085: PUSH
25086: LD_STRING );
25088: STR
25089: PPUSH
25090: CALL_OW 559
// end ;
25094: LD_VAR 0 2
25098: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
25099: LD_INT 0
25101: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
25102: LD_STRING AST(
25104: PUSH
25105: LD_VAR 0 1
25109: STR
25110: PUSH
25111: LD_STRING ,
25113: STR
25114: PUSH
25115: LD_VAR 0 2
25119: STR
25120: PUSH
25121: LD_STRING ,
25123: STR
25124: PUSH
25125: LD_VAR 0 3
25129: STR
25130: PUSH
25131: LD_STRING ,);
25133: STR
25134: PPUSH
25135: CALL_OW 559
// end ;
25139: LD_VAR 0 4
25143: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
25144: LD_INT 0
25146: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
25147: LD_STRING AST(
25149: PUSH
25150: LD_VAR 0 1
25154: STR
25155: PUSH
25156: LD_STRING ,
25158: STR
25159: PUSH
25160: LD_VAR 0 2
25164: STR
25165: PUSH
25166: LD_STRING ,
25168: STR
25169: PUSH
25170: LD_VAR 0 3
25174: STR
25175: PUSH
25176: LD_STRING ,
25178: STR
25179: PUSH
25180: LD_VAR 0 4
25184: STR
25185: PUSH
25186: LD_STRING );
25188: STR
25189: PPUSH
25190: CALL_OW 559
// end ;
25194: LD_VAR 0 5
25198: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
25199: LD_INT 0
25201: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
25202: LD_STRING AST(
25204: PUSH
25205: LD_VAR 0 1
25209: STR
25210: PUSH
25211: LD_STRING ,
25213: STR
25214: PUSH
25215: LD_VAR 0 2
25219: STR
25220: PUSH
25221: LD_STRING ,
25223: STR
25224: PUSH
25225: LD_VAR 0 3
25229: STR
25230: PUSH
25231: LD_STRING ,
25233: STR
25234: PUSH
25235: LD_VAR 0 4
25239: STR
25240: PUSH
25241: LD_STRING ,
25243: STR
25244: PUSH
25245: LD_VAR 0 5
25249: STR
25250: PUSH
25251: LD_STRING );
25253: STR
25254: PPUSH
25255: CALL_OW 559
// end ;
25259: LD_VAR 0 6
25263: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
25264: LD_INT 0
25266: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
25267: LD_STRING ASRT(
25269: PUSH
25270: LD_VAR 0 1
25274: STR
25275: PUSH
25276: LD_STRING ,
25278: STR
25279: PUSH
25280: LD_VAR 0 2
25284: STR
25285: PUSH
25286: LD_STRING ,
25288: STR
25289: PUSH
25290: LD_VAR 0 3
25294: STR
25295: PUSH
25296: LD_STRING ,);
25298: STR
25299: PPUSH
25300: CALL_OW 559
// end ;
25304: LD_VAR 0 4
25308: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
25309: LD_INT 0
25311: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
25312: LD_STRING ASRT(
25314: PUSH
25315: LD_VAR 0 1
25319: STR
25320: PUSH
25321: LD_STRING ,
25323: STR
25324: PUSH
25325: LD_VAR 0 2
25329: STR
25330: PUSH
25331: LD_STRING ,
25333: STR
25334: PUSH
25335: LD_VAR 0 3
25339: STR
25340: PUSH
25341: LD_STRING ,
25343: STR
25344: PUSH
25345: LD_VAR 0 4
25349: STR
25350: PUSH
25351: LD_STRING );
25353: STR
25354: PPUSH
25355: CALL_OW 559
// end ;
25359: LD_VAR 0 5
25363: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
25364: LD_INT 0
25366: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
25367: LD_STRING ASRT(
25369: PUSH
25370: LD_VAR 0 1
25374: STR
25375: PUSH
25376: LD_STRING ,
25378: STR
25379: PUSH
25380: LD_VAR 0 2
25384: STR
25385: PUSH
25386: LD_STRING ,
25388: STR
25389: PUSH
25390: LD_VAR 0 3
25394: STR
25395: PUSH
25396: LD_STRING ,
25398: STR
25399: PUSH
25400: LD_VAR 0 4
25404: STR
25405: PUSH
25406: LD_STRING ,
25408: STR
25409: PUSH
25410: LD_VAR 0 5
25414: STR
25415: PUSH
25416: LD_STRING );
25418: STR
25419: PPUSH
25420: CALL_OW 559
// end ;
25424: LD_VAR 0 6
25428: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
25429: LD_INT 0
25431: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
25432: LD_STRING UST(
25434: PUSH
25435: LD_VAR 0 1
25439: STR
25440: PUSH
25441: LD_STRING ,
25443: STR
25444: PUSH
25445: LD_VAR 0 2
25449: STR
25450: PUSH
25451: LD_STRING );
25453: STR
25454: PPUSH
25455: CALL_OW 559
// end ;
25459: LD_VAR 0 3
25463: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
25464: LD_INT 0
25466: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
25467: LD_STRING UST(
25469: PUSH
25470: LD_VAR 0 1
25474: STR
25475: PUSH
25476: LD_STRING ,
25478: STR
25479: PUSH
25480: LD_VAR 0 2
25484: STR
25485: PUSH
25486: LD_STRING ,
25488: STR
25489: PUSH
25490: LD_VAR 0 3
25494: STR
25495: PUSH
25496: LD_STRING );
25498: STR
25499: PPUSH
25500: CALL_OW 559
// end ;
25504: LD_VAR 0 4
25508: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
25509: LD_INT 0
25511: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
25512: LD_STRING CCST(
25514: PUSH
25515: LD_VAR 0 1
25519: STR
25520: PUSH
25521: LD_STRING ,{
25523: STR
25524: PUSH
25525: LD_VAR 0 2
25529: STR
25530: PUSH
25531: LD_STRING ,
25533: STR
25534: PUSH
25535: LD_VAR 0 3
25539: STR
25540: PUSH
25541: LD_STRING ,
25543: STR
25544: PUSH
25545: LD_VAR 0 4
25549: STR
25550: PUSH
25551: LD_STRING });
25553: STR
25554: PPUSH
25555: CALL_OW 559
// end ;
25559: LD_VAR 0 5
25563: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
25564: LD_INT 0
25566: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
25567: LD_STRING CCST(
25569: PUSH
25570: LD_VAR 0 1
25574: STR
25575: PUSH
25576: LD_STRING ,
25578: STR
25579: PUSH
25580: LD_VAR 0 2
25584: STR
25585: PUSH
25586: LD_STRING );
25588: STR
25589: PPUSH
25590: CALL_OW 559
// end ;
25594: LD_VAR 0 3
25598: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
25599: LD_INT 0
25601: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
25602: LD_STRING ASSP(
25604: PUSH
25605: LD_VAR 0 1
25609: STR
25610: PUSH
25611: LD_STRING ,
25613: STR
25614: PUSH
25615: LD_VAR 0 2
25619: STR
25620: PUSH
25621: LD_STRING ,
25623: STR
25624: PUSH
25625: LD_VAR 0 3
25629: STR
25630: PUSH
25631: LD_STRING ,);
25633: STR
25634: PPUSH
25635: CALL_OW 559
// end ;
25639: LD_VAR 0 4
25643: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
25644: LD_INT 0
25646: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
25647: LD_STRING ASSP(
25649: PUSH
25650: LD_VAR 0 1
25654: STR
25655: PUSH
25656: LD_STRING ,
25658: STR
25659: PUSH
25660: LD_VAR 0 2
25664: STR
25665: PUSH
25666: LD_STRING ,
25668: STR
25669: PUSH
25670: LD_VAR 0 3
25674: STR
25675: PUSH
25676: LD_STRING ,
25678: STR
25679: PUSH
25680: LD_VAR 0 4
25684: STR
25685: PUSH
25686: LD_STRING );
25688: STR
25689: PPUSH
25690: CALL_OW 559
// end ;
25694: LD_VAR 0 5
25698: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
25699: LD_INT 0
25701: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
25702: LD_STRING ASSP(
25704: PUSH
25705: LD_VAR 0 1
25709: STR
25710: PUSH
25711: LD_STRING ,
25713: STR
25714: PUSH
25715: LD_VAR 0 2
25719: STR
25720: PUSH
25721: LD_STRING ,
25723: STR
25724: PUSH
25725: LD_VAR 0 3
25729: STR
25730: PUSH
25731: LD_STRING ,
25733: STR
25734: PUSH
25735: LD_VAR 0 4
25739: STR
25740: PUSH
25741: LD_STRING ,
25743: STR
25744: PUSH
25745: LD_VAR 0 5
25749: STR
25750: PUSH
25751: LD_STRING );
25753: STR
25754: PPUSH
25755: CALL_OW 559
// end ;
25759: LD_VAR 0 6
25763: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
25764: LD_INT 0
25766: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
25767: LD_STRING ASRSP(
25769: PUSH
25770: LD_VAR 0 1
25774: STR
25775: PUSH
25776: LD_STRING ,
25778: STR
25779: PUSH
25780: LD_VAR 0 2
25784: STR
25785: PUSH
25786: LD_STRING ,
25788: STR
25789: PUSH
25790: LD_VAR 0 3
25794: STR
25795: PUSH
25796: LD_STRING ,);
25798: STR
25799: PPUSH
25800: CALL_OW 559
// end ;
25804: LD_VAR 0 4
25808: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
25809: LD_INT 0
25811: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
25812: LD_STRING ASRSP(
25814: PUSH
25815: LD_VAR 0 1
25819: STR
25820: PUSH
25821: LD_STRING ,
25823: STR
25824: PUSH
25825: LD_VAR 0 2
25829: STR
25830: PUSH
25831: LD_STRING ,
25833: STR
25834: PUSH
25835: LD_VAR 0 3
25839: STR
25840: PUSH
25841: LD_STRING ,
25843: STR
25844: PUSH
25845: LD_VAR 0 4
25849: STR
25850: PUSH
25851: LD_STRING );
25853: STR
25854: PPUSH
25855: CALL_OW 559
// end ;
25859: LD_VAR 0 5
25863: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
25864: LD_INT 0
25866: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
25867: LD_STRING ASRSP(
25869: PUSH
25870: LD_VAR 0 1
25874: STR
25875: PUSH
25876: LD_STRING ,
25878: STR
25879: PUSH
25880: LD_VAR 0 2
25884: STR
25885: PUSH
25886: LD_STRING ,
25888: STR
25889: PUSH
25890: LD_VAR 0 3
25894: STR
25895: PUSH
25896: LD_STRING ,
25898: STR
25899: PUSH
25900: LD_VAR 0 4
25904: STR
25905: PUSH
25906: LD_STRING ,
25908: STR
25909: PUSH
25910: LD_VAR 0 5
25914: STR
25915: PUSH
25916: LD_STRING );
25918: STR
25919: PPUSH
25920: CALL_OW 559
// end ;
25924: LD_VAR 0 6
25928: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
25929: LD_INT 0
25931: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
25932: LD_STRING USSP(
25934: PUSH
25935: LD_VAR 0 1
25939: STR
25940: PUSH
25941: LD_STRING ,
25943: STR
25944: PUSH
25945: LD_VAR 0 2
25949: STR
25950: PUSH
25951: LD_STRING );
25953: STR
25954: PPUSH
25955: CALL_OW 559
// end ;
25959: LD_VAR 0 3
25963: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
25964: LD_INT 0
25966: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
25967: LD_STRING USSP(
25969: PUSH
25970: LD_VAR 0 1
25974: STR
25975: PUSH
25976: LD_STRING ,
25978: STR
25979: PUSH
25980: LD_VAR 0 2
25984: STR
25985: PUSH
25986: LD_STRING ,
25988: STR
25989: PUSH
25990: LD_VAR 0 3
25994: STR
25995: PUSH
25996: LD_STRING );
25998: STR
25999: PPUSH
26000: CALL_OW 559
// end ;
26004: LD_VAR 0 4
26008: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
26009: LD_INT 0
26011: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
26012: LD_STRING CCSSP(
26014: PUSH
26015: LD_VAR 0 1
26019: STR
26020: PUSH
26021: LD_STRING ,{
26023: STR
26024: PUSH
26025: LD_VAR 0 2
26029: STR
26030: PUSH
26031: LD_STRING ,
26033: STR
26034: PUSH
26035: LD_VAR 0 3
26039: STR
26040: PUSH
26041: LD_STRING ,
26043: STR
26044: PUSH
26045: LD_VAR 0 4
26049: STR
26050: PUSH
26051: LD_STRING });
26053: STR
26054: PPUSH
26055: CALL_OW 559
// end ;
26059: LD_VAR 0 5
26063: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
26064: LD_INT 0
26066: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
26067: LD_STRING CCSSP(
26069: PUSH
26070: LD_VAR 0 1
26074: STR
26075: PUSH
26076: LD_STRING ,
26078: STR
26079: PUSH
26080: LD_VAR 0 2
26084: STR
26085: PUSH
26086: LD_STRING );
26088: STR
26089: PPUSH
26090: CALL_OW 559
// end ;
26094: LD_VAR 0 3
26098: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
26099: LD_INT 0
26101: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
26102: LD_STRING ASP(
26104: PUSH
26105: LD_VAR 0 1
26109: STR
26110: PUSH
26111: LD_STRING ,
26113: STR
26114: PUSH
26115: LD_VAR 0 2
26119: STR
26120: PUSH
26121: LD_STRING ,
26123: STR
26124: PUSH
26125: LD_VAR 0 3
26129: STR
26130: PUSH
26131: LD_STRING );
26133: STR
26134: PPUSH
26135: CALL_OW 559
// end ;
26139: LD_VAR 0 4
26143: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
26144: LD_INT 0
26146: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
26147: LD_STRING USP(
26149: PUSH
26150: LD_VAR 0 1
26154: STR
26155: PUSH
26156: LD_STRING ,
26158: STR
26159: PUSH
26160: LD_VAR 0 2
26164: STR
26165: PUSH
26166: LD_STRING ,
26168: STR
26169: PUSH
26170: LD_VAR 0 3
26174: STR
26175: PUSH
26176: LD_STRING );
26178: STR
26179: PPUSH
26180: CALL_OW 559
// end ;
26184: LD_VAR 0 4
26188: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
26189: LD_INT 0
26191: PPUSH
26192: PPUSH
// for i = 1 to 8 do
26193: LD_ADDR_VAR 0 4
26197: PUSH
26198: DOUBLE
26199: LD_INT 1
26201: DEC
26202: ST_TO_ADDR
26203: LD_INT 8
26205: PUSH
26206: FOR_TO
26207: IFFALSE 26254
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
26209: LD_STRING USP(
26211: PUSH
26212: LD_VAR 0 1
26216: STR
26217: PUSH
26218: LD_STRING ,
26220: STR
26221: PUSH
26222: LD_VAR 0 4
26226: STR
26227: PUSH
26228: LD_STRING ,
26230: STR
26231: PUSH
26232: LD_VAR 0 2
26236: PUSH
26237: LD_VAR 0 4
26241: ARRAY
26242: STR
26243: PUSH
26244: LD_STRING );
26246: STR
26247: PPUSH
26248: CALL_OW 559
26252: GO 26206
26254: POP
26255: POP
// end ;
26256: LD_VAR 0 3
26260: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
26261: LD_INT 0
26263: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
26264: LD_STRING ASC(
26266: PUSH
26267: LD_VAR 0 1
26271: STR
26272: PUSH
26273: LD_STRING ,
26275: STR
26276: PUSH
26277: LD_VAR 0 2
26281: STR
26282: PUSH
26283: LD_STRING ,
26285: STR
26286: PUSH
26287: LD_VAR 0 3
26291: STR
26292: PUSH
26293: LD_STRING ,
26295: STR
26296: PUSH
26297: LD_VAR 0 4
26301: STR
26302: PUSH
26303: LD_STRING );
26305: STR
26306: PPUSH
26307: CALL_OW 559
// end ;
26311: LD_VAR 0 5
26315: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
26316: LD_INT 0
26318: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
26319: LD_STRING USC(
26321: PUSH
26322: LD_VAR 0 1
26326: STR
26327: PUSH
26328: LD_STRING ,{
26330: STR
26331: PUSH
26332: LD_VAR 0 2
26336: PUSH
26337: LD_INT 1
26339: ARRAY
26340: STR
26341: PUSH
26342: LD_STRING ,
26344: STR
26345: PUSH
26346: LD_VAR 0 2
26350: PUSH
26351: LD_INT 2
26353: ARRAY
26354: STR
26355: PUSH
26356: LD_STRING ,
26358: STR
26359: PUSH
26360: LD_VAR 0 2
26364: PUSH
26365: LD_INT 3
26367: ARRAY
26368: STR
26369: PUSH
26370: LD_STRING ,
26372: STR
26373: PUSH
26374: LD_VAR 0 2
26378: PUSH
26379: LD_INT 4
26381: ARRAY
26382: STR
26383: PUSH
26384: LD_STRING ,
26386: STR
26387: PUSH
26388: LD_VAR 0 2
26392: PUSH
26393: LD_INT 5
26395: ARRAY
26396: STR
26397: PUSH
26398: LD_STRING ,
26400: STR
26401: PUSH
26402: LD_VAR 0 2
26406: PUSH
26407: LD_INT 6
26409: ARRAY
26410: STR
26411: PUSH
26412: LD_STRING ,
26414: STR
26415: PUSH
26416: LD_VAR 0 2
26420: PUSH
26421: LD_INT 7
26423: ARRAY
26424: STR
26425: PUSH
26426: LD_STRING ,
26428: STR
26429: PUSH
26430: LD_VAR 0 2
26434: PUSH
26435: LD_INT 8
26437: ARRAY
26438: STR
26439: PUSH
26440: LD_STRING });
26442: STR
26443: PPUSH
26444: CALL_OW 559
// end ; end_of_file
26448: LD_VAR 0 3
26452: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
26453: LD_INT 0
26455: PPUSH
26456: PPUSH
26457: PPUSH
26458: PPUSH
26459: PPUSH
26460: PPUSH
26461: PPUSH
26462: PPUSH
26463: PPUSH
// for i := 1 to 8 do
26464: LD_ADDR_VAR 0 2
26468: PUSH
26469: DOUBLE
26470: LD_INT 1
26472: DEC
26473: ST_TO_ADDR
26474: LD_INT 8
26476: PUSH
26477: FOR_TO
26478: IFFALSE 26862
// begin if Side_Positions [ i ] then
26480: LD_EXP 23
26484: PUSH
26485: LD_VAR 0 2
26489: ARRAY
26490: IFFALSE 26860
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
26492: LD_ADDR_VAR 0 7
26496: PUSH
26497: LD_INT 22
26499: PUSH
26500: LD_VAR 0 2
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 21
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PPUSH
26523: CALL_OW 69
26527: PUSH
26528: LD_INT 0
26530: PLUS
26531: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26532: LD_ADDR_VAR 0 9
26536: PUSH
26537: LD_INT 22
26539: PUSH
26540: LD_VAR 0 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 2
26551: PUSH
26552: LD_INT 30
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 30
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: LIST
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PPUSH
26581: CALL_OW 69
26585: ST_TO_ADDR
// crates := 0 ;
26586: LD_ADDR_VAR 0 4
26590: PUSH
26591: LD_INT 0
26593: ST_TO_ADDR
// oil := 0 ;
26594: LD_ADDR_VAR 0 5
26598: PUSH
26599: LD_INT 0
26601: ST_TO_ADDR
// sib := 0 ;
26602: LD_ADDR_VAR 0 6
26606: PUSH
26607: LD_INT 0
26609: ST_TO_ADDR
// if bases then
26610: LD_VAR 0 9
26614: IFFALSE 26720
// begin for j in bases do
26616: LD_ADDR_VAR 0 3
26620: PUSH
26621: LD_VAR 0 9
26625: PUSH
26626: FOR_IN
26627: IFFALSE 26718
// begin base := GetBase ( j ) ;
26629: LD_ADDR_VAR 0 8
26633: PUSH
26634: LD_VAR 0 3
26638: PPUSH
26639: CALL_OW 274
26643: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
26644: LD_ADDR_VAR 0 4
26648: PUSH
26649: LD_VAR 0 4
26653: PUSH
26654: LD_VAR 0 8
26658: PPUSH
26659: LD_INT 1
26661: PPUSH
26662: CALL_OW 275
26666: PLUS
26667: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
26668: LD_ADDR_VAR 0 5
26672: PUSH
26673: LD_VAR 0 5
26677: PUSH
26678: LD_VAR 0 8
26682: PPUSH
26683: LD_INT 2
26685: PPUSH
26686: CALL_OW 275
26690: PLUS
26691: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
26692: LD_ADDR_VAR 0 6
26696: PUSH
26697: LD_VAR 0 6
26701: PUSH
26702: LD_VAR 0 8
26706: PPUSH
26707: LD_INT 3
26709: PPUSH
26710: CALL_OW 275
26714: PLUS
26715: ST_TO_ADDR
// end ;
26716: GO 26626
26718: POP
26719: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
26720: LD_STRING setSpecText(
26722: PUSH
26723: LD_VAR 0 2
26727: STR
26728: PUSH
26729: LD_STRING ,
26731: STR
26732: PUSH
26733: LD_INT 2
26735: STR
26736: PUSH
26737: LD_STRING ,
26739: STR
26740: PUSH
26741: LD_VAR 0 4
26745: STR
26746: PUSH
26747: LD_STRING )
26749: STR
26750: PPUSH
26751: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
26755: LD_STRING setSpecText(
26757: PUSH
26758: LD_VAR 0 2
26762: STR
26763: PUSH
26764: LD_STRING ,
26766: STR
26767: PUSH
26768: LD_INT 3
26770: STR
26771: PUSH
26772: LD_STRING ,
26774: STR
26775: PUSH
26776: LD_VAR 0 5
26780: STR
26781: PUSH
26782: LD_STRING )
26784: STR
26785: PPUSH
26786: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
26790: LD_STRING setSpecText(
26792: PUSH
26793: LD_VAR 0 2
26797: STR
26798: PUSH
26799: LD_STRING ,
26801: STR
26802: PUSH
26803: LD_INT 4
26805: STR
26806: PUSH
26807: LD_STRING ,
26809: STR
26810: PUSH
26811: LD_VAR 0 6
26815: STR
26816: PUSH
26817: LD_STRING )
26819: STR
26820: PPUSH
26821: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
26825: LD_STRING setSpecText(
26827: PUSH
26828: LD_VAR 0 2
26832: STR
26833: PUSH
26834: LD_STRING ,
26836: STR
26837: PUSH
26838: LD_INT 5
26840: STR
26841: PUSH
26842: LD_STRING ,
26844: STR
26845: PUSH
26846: LD_VAR 0 7
26850: STR
26851: PUSH
26852: LD_STRING )
26854: STR
26855: PPUSH
26856: CALL_OW 559
// end ; end ;
26860: GO 26477
26862: POP
26863: POP
// end ; end_of_file
26864: LD_VAR 0 1
26868: RET
// var respawn , inqueue ; export function init_respawning ; begin
26869: LD_INT 0
26871: PPUSH
// respawn := Rand ( 1 , 8 ) ;
26872: LD_ADDR_LOC 34
26876: PUSH
26877: LD_INT 1
26879: PPUSH
26880: LD_INT 8
26882: PPUSH
26883: CALL_OW 12
26887: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
26888: LD_ADDR_LOC 35
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 0
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: LD_INT 0
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: ST_TO_ADDR
// end ;
26927: LD_VAR 0 1
26931: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
26932: GO 26934
26934: DISABLE
26935: LD_INT 0
26937: PPUSH
26938: PPUSH
26939: PPUSH
// begin if respawning_time_max = 0 then
26940: LD_EXP 17
26944: PUSH
26945: LD_INT 0
26947: EQUAL
26948: IFFALSE 26952
// exit ;
26950: GO 27360
// if respawn = 8 then
26952: LD_LOC 34
26956: PUSH
26957: LD_INT 8
26959: EQUAL
26960: IFFALSE 26972
// respawn := 1 else
26962: LD_ADDR_LOC 34
26966: PUSH
26967: LD_INT 1
26969: ST_TO_ADDR
26970: GO 26986
// respawn := respawn + 1 ;
26972: LD_ADDR_LOC 34
26976: PUSH
26977: LD_LOC 34
26981: PUSH
26982: LD_INT 1
26984: PLUS
26985: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
26986: LD_EXP 23
26990: PUSH
26991: LD_LOC 34
26995: ARRAY
26996: PUSH
26997: LD_LOC 35
27001: PUSH
27002: LD_LOC 34
27006: ARRAY
27007: NOT
27008: AND
27009: IFFALSE 27359
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
27011: LD_ADDR_VAR 0 1
27015: PUSH
27016: LD_INT 21
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 22
27028: PUSH
27029: LD_LOC 34
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 3
27040: PUSH
27041: LD_INT 23
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: PPUSH
27057: CALL_OW 69
27061: ST_TO_ADDR
// if n < number_of_people then
27062: LD_VAR 0 1
27066: PUSH
27067: LD_EXP 9
27071: LESS
27072: IFFALSE 27356
// begin aktresp := respawn ;
27074: LD_ADDR_VAR 0 3
27078: PUSH
27079: LD_LOC 34
27083: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
27084: LD_ADDR_LOC 35
27088: PUSH
27089: LD_LOC 35
27093: PPUSH
27094: LD_VAR 0 3
27098: PPUSH
27099: LD_INT 1
27101: PPUSH
27102: CALL_OW 1
27106: ST_TO_ADDR
// enable ;
27107: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
27108: LD_EXP 16
27112: PPUSH
27113: LD_EXP 17
27117: PPUSH
27118: CALL_OW 12
27122: PPUSH
27123: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
27127: LD_ADDR_LOC 35
27131: PUSH
27132: LD_LOC 35
27136: PPUSH
27137: LD_VAR 0 3
27141: PPUSH
27142: LD_INT 0
27144: PPUSH
27145: CALL_OW 1
27149: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
27150: LD_ADDR_VAR 0 2
27154: PUSH
27155: LD_INT 21
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 2
27167: PUSH
27168: LD_INT 30
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 30
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 50
27195: PUSH
27196: EMPTY
27197: LIST
27198: PUSH
27199: LD_INT 22
27201: PUSH
27202: LD_VAR 0 3
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: PPUSH
27217: CALL_OW 69
27221: ST_TO_ADDR
// if dep = 0 then
27222: LD_VAR 0 2
27226: PUSH
27227: LD_INT 0
27229: EQUAL
27230: IFFALSE 27234
// exit ;
27232: GO 27360
// hc_name :=  ;
27234: LD_ADDR_OWVAR 26
27238: PUSH
27239: LD_STRING 
27241: ST_TO_ADDR
// hc_importance := 0 ;
27242: LD_ADDR_OWVAR 32
27246: PUSH
27247: LD_INT 0
27249: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
27250: LD_INT 0
27252: PPUSH
27253: LD_INT 0
27255: PPUSH
27256: LD_EXP 10
27260: PUSH
27261: LD_INT 2
27263: DIV
27264: PPUSH
27265: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
27269: LD_ADDR_OWVAR 21
27273: PUSH
27274: LD_EXP 24
27278: PUSH
27279: LD_VAR 0 3
27283: ARRAY
27284: ST_TO_ADDR
// uc_side := aktresp ;
27285: LD_ADDR_OWVAR 20
27289: PUSH
27290: LD_VAR 0 3
27294: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
27295: LD_ADDR_VAR 0 2
27299: PUSH
27300: LD_VAR 0 2
27304: PUSH
27305: LD_INT 1
27307: PPUSH
27308: LD_VAR 0 2
27312: PPUSH
27313: CALL_OW 12
27317: ARRAY
27318: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
27319: CALL_OW 44
27323: PPUSH
27324: LD_VAR 0 2
27328: PPUSH
27329: CALL_OW 250
27333: PPUSH
27334: LD_VAR 0 2
27338: PPUSH
27339: CALL_OW 251
27343: PPUSH
27344: LD_INT 7
27346: PPUSH
27347: LD_INT 1
27349: PPUSH
27350: CALL_OW 50
// end else
27354: GO 27357
// enable ;
27356: ENABLE
// end else
27357: GO 27360
// enable ;
27359: ENABLE
// end ; end_of_file
27360: PPOPN 3
27362: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
27363: LD_INT 0
27365: PPUSH
27366: PPUSH
27367: PPUSH
// BuildUpTime_Delay = 0 ;
27368: LD_ADDR_EXP 68
27372: PUSH
27373: LD_INT 0
27375: ST_TO_ADDR
// if not def_builduptime then
27376: LD_EXP 61
27380: NOT
27381: IFFALSE 27385
// exit ;
27383: GO 27568
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
27385: LD_ADDR_EXP 68
27389: PUSH
27390: LD_INT 8400
27392: PUSH
27393: LD_INT 2100
27395: PUSH
27396: LD_EXP 61
27400: MUL
27401: PLUS
27402: ST_TO_ADDR
// BuildUpTimeActive := true ;
27403: LD_ADDR_EXP 67
27407: PUSH
27408: LD_INT 1
27410: ST_TO_ADDR
// for i := 1 to 8 do
27411: LD_ADDR_VAR 0 2
27415: PUSH
27416: DOUBLE
27417: LD_INT 1
27419: DEC
27420: ST_TO_ADDR
27421: LD_INT 8
27423: PUSH
27424: FOR_TO
27425: IFFALSE 27566
// if Side_Positions [ i ] then
27427: LD_EXP 23
27431: PUSH
27432: LD_VAR 0 2
27436: ARRAY
27437: IFFALSE 27564
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
27439: LD_EXP 66
27443: PUSH
27444: LD_EXP 23
27448: PUSH
27449: LD_VAR 0 2
27453: ARRAY
27454: ARRAY
27455: PPUSH
27456: LD_INT 5
27458: PPUSH
27459: CALL_OW 424
// for j := 1 to 8 do
27463: LD_ADDR_VAR 0 3
27467: PUSH
27468: DOUBLE
27469: LD_INT 1
27471: DEC
27472: ST_TO_ADDR
27473: LD_INT 8
27475: PUSH
27476: FOR_TO
27477: IFFALSE 27562
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
27479: LD_EXP 23
27483: PUSH
27484: LD_VAR 0 3
27488: ARRAY
27489: PUSH
27490: LD_EXP 21
27494: PUSH
27495: LD_VAR 0 2
27499: ARRAY
27500: PUSH
27501: LD_EXP 21
27505: PUSH
27506: LD_VAR 0 3
27510: ARRAY
27511: NONEQUAL
27512: PUSH
27513: LD_EXP 25
27517: NOT
27518: PUSH
27519: LD_VAR 0 2
27523: PUSH
27524: LD_VAR 0 3
27528: NONEQUAL
27529: AND
27530: OR
27531: AND
27532: IFFALSE 27560
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
27534: LD_VAR 0 3
27538: PPUSH
27539: LD_EXP 66
27543: PUSH
27544: LD_EXP 23
27548: PUSH
27549: LD_VAR 0 2
27553: ARRAY
27554: ARRAY
27555: PPUSH
27556: CALL_OW 333
27560: GO 27476
27562: POP
27563: POP
// end ;
27564: GO 27424
27566: POP
27567: POP
// end ;
27568: LD_VAR 0 1
27572: RET
// export function EndBuildUp ; var i , j ; begin
27573: LD_INT 0
27575: PPUSH
27576: PPUSH
27577: PPUSH
// BuildUpTimeActive := false ;
27578: LD_ADDR_EXP 67
27582: PUSH
27583: LD_INT 0
27585: ST_TO_ADDR
// for i := 1 to 8 do
27586: LD_ADDR_VAR 0 2
27590: PUSH
27591: DOUBLE
27592: LD_INT 1
27594: DEC
27595: ST_TO_ADDR
27596: LD_INT 8
27598: PUSH
27599: FOR_TO
27600: IFFALSE 27741
// if Side_Positions [ i ] then
27602: LD_EXP 23
27606: PUSH
27607: LD_VAR 0 2
27611: ARRAY
27612: IFFALSE 27739
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
27614: LD_EXP 66
27618: PUSH
27619: LD_EXP 23
27623: PUSH
27624: LD_VAR 0 2
27628: ARRAY
27629: ARRAY
27630: PPUSH
27631: LD_INT 0
27633: PPUSH
27634: CALL_OW 424
// for j := 1 to 8 do
27638: LD_ADDR_VAR 0 3
27642: PUSH
27643: DOUBLE
27644: LD_INT 1
27646: DEC
27647: ST_TO_ADDR
27648: LD_INT 8
27650: PUSH
27651: FOR_TO
27652: IFFALSE 27737
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
27654: LD_EXP 23
27658: PUSH
27659: LD_VAR 0 3
27663: ARRAY
27664: PUSH
27665: LD_EXP 21
27669: PUSH
27670: LD_VAR 0 2
27674: ARRAY
27675: PUSH
27676: LD_EXP 21
27680: PUSH
27681: LD_VAR 0 3
27685: ARRAY
27686: NONEQUAL
27687: PUSH
27688: LD_EXP 25
27692: NOT
27693: PUSH
27694: LD_VAR 0 2
27698: PUSH
27699: LD_VAR 0 3
27703: NONEQUAL
27704: AND
27705: OR
27706: AND
27707: IFFALSE 27735
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
27709: LD_VAR 0 3
27713: PPUSH
27714: LD_EXP 66
27718: PUSH
27719: LD_EXP 23
27723: PUSH
27724: LD_VAR 0 2
27728: ARRAY
27729: ARRAY
27730: PPUSH
27731: CALL_OW 334
27735: GO 27651
27737: POP
27738: POP
// end ;
27739: GO 27599
27741: POP
27742: POP
// end ;
27743: LD_VAR 0 1
27747: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
27748: LD_EXP 67
27752: IFFALSE 27927
27754: GO 27756
27756: DISABLE
27757: LD_INT 0
27759: PPUSH
27760: PPUSH
// begin for i := 1 to 8 do
27761: LD_ADDR_VAR 0 1
27765: PUSH
27766: DOUBLE
27767: LD_INT 1
27769: DEC
27770: ST_TO_ADDR
27771: LD_INT 8
27773: PUSH
27774: FOR_TO
27775: IFFALSE 27924
// if Side_Positions [ i ] then
27777: LD_EXP 23
27781: PUSH
27782: LD_VAR 0 1
27786: ARRAY
27787: IFFALSE 27922
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
27789: LD_ADDR_VAR 0 2
27793: PUSH
27794: LD_EXP 66
27798: PUSH
27799: LD_EXP 23
27803: PUSH
27804: LD_VAR 0 1
27808: ARRAY
27809: ARRAY
27810: PPUSH
27811: LD_INT 2
27813: PUSH
27814: LD_INT 21
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PUSH
27824: LD_INT 21
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 22
27841: PUSH
27842: LD_OWVAR 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PPUSH
27855: CALL_OW 70
27859: PUSH
27860: FOR_IN
27861: IFFALSE 27920
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
27863: LD_EXP 21
27867: PUSH
27868: LD_VAR 0 1
27872: ARRAY
27873: PUSH
27874: LD_EXP 21
27878: PUSH
27879: LD_OWVAR 2
27883: ARRAY
27884: NONEQUAL
27885: PUSH
27886: LD_EXP 25
27890: NOT
27891: PUSH
27892: LD_VAR 0 1
27896: PUSH
27897: LD_OWVAR 2
27901: NONEQUAL
27902: AND
27903: OR
27904: IFFALSE 27918
// ComMoveToArea ( un , BuildUpEscape ) ;
27906: LD_VAR 0 2
27910: PPUSH
27911: LD_INT 24
27913: PPUSH
27914: CALL_OW 113
27918: GO 27860
27920: POP
27921: POP
27922: GO 27774
27924: POP
27925: POP
// enable ;
27926: ENABLE
// end ;
27927: PPOPN 2
27929: END
// every 0 0$1 trigger def_builduptime do
27930: LD_EXP 61
27934: IFFALSE 27960
27936: GO 27938
27938: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
27939: LD_INT 8400
27941: PUSH
27942: LD_EXP 61
27946: PUSH
27947: LD_INT 2100
27949: MUL
27950: PLUS
27951: PPUSH
27952: CALL_OW 67
// EndBuildUp ;
27956: CALL 27573 0 0
// end ;
27960: END
