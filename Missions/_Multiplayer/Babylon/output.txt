// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 46
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 46
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 356: LD_ADDR_EXP 25
 360: PUSH
 361: LD_EXP 21
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: EMPTY
 370: LIST
 371: DIFF
 372: PUSH
 373: LD_INT 1
 375: GREATER
 376: ST_TO_ADDR
// if Multiplayer then
 377: LD_OWVAR 4
 381: IFFALSE 653
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 383: LD_ADDR_EXP 48
 387: PUSH
 388: LD_INT 0
 390: PPUSH
 391: CALL_OW 426
 395: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 396: LD_ADDR_EXP 49
 400: PUSH
 401: LD_INT 1
 403: PPUSH
 404: CALL_OW 426
 408: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 409: LD_ADDR_EXP 50
 413: PUSH
 414: LD_INT 2
 416: PPUSH
 417: CALL_OW 426
 421: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 422: LD_ADDR_EXP 51
 426: PUSH
 427: LD_INT 3
 429: PPUSH
 430: CALL_OW 426
 434: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 435: LD_ADDR_EXP 52
 439: PUSH
 440: LD_INT 4
 442: PPUSH
 443: CALL_OW 426
 447: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 448: LD_ADDR_EXP 53
 452: PUSH
 453: LD_INT 5
 455: PPUSH
 456: CALL_OW 426
 460: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 461: LD_ADDR_EXP 55
 465: PUSH
 466: LD_INT 10
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 474: LD_ADDR_EXP 56
 478: PUSH
 479: LD_INT 11
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 487: LD_ADDR_EXP 57
 491: PUSH
 492: LD_INT 12
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 500: LD_ADDR_EXP 59
 504: PUSH
 505: LD_INT 13
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 513: LD_ADDR_EXP 58
 517: PUSH
 518: LD_INT 14
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 526: LD_ADDR_EXP 60
 530: PUSH
 531: LD_INT 15
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 539: LD_ADDR_EXP 1
 543: PUSH
 544: LD_INT 6
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 552: LD_ADDR_EXP 2
 556: PUSH
 557: LD_INT 7
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 565: LD_ADDR_EXP 4
 569: PUSH
 570: LD_INT 8
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 578: LD_ADDR_EXP 3
 582: PUSH
 583: LD_INT 9
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 591: LD_ADDR_EXP 5
 595: PUSH
 596: LD_INT 16
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 604: LD_ADDR_EXP 6
 608: PUSH
 609: LD_INT 17
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 617: LD_ADDR_EXP 61
 621: PUSH
 622: LD_INT 20
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 630: LD_ADDR_VAR 0 3
 634: PUSH
 635: LD_INT 22
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_win_rules = 0 ;
 643: LD_ADDR_EXP 19
 647: PUSH
 648: LD_INT 0
 650: ST_TO_ADDR
// end else
 651: GO 825
// begin Randomize ;
 653: CALL_OW 10
// def_base_level := 2 ;
 657: LD_ADDR_EXP 48
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_amount_of_people := 10 ;
 665: LD_ADDR_EXP 49
 669: PUSH
 670: LD_INT 10
 672: ST_TO_ADDR
// def_skill_level := 1 ;
 673: LD_ADDR_EXP 50
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_starting_resources := 2 ;
 681: LD_ADDR_EXP 51
 685: PUSH
 686: LD_INT 2
 688: ST_TO_ADDR
// def_shipments_density := 50 ;
 689: LD_ADDR_EXP 52
 693: PUSH
 694: LD_INT 50
 696: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 697: LD_ADDR_EXP 53
 701: PUSH
 702: LD_INT 0
 704: ST_TO_ADDR
// def_shared_vision := 1 ;
 705: LD_ADDR_EXP 55
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_morale_flags := 1 ;
 713: LD_ADDR_EXP 56
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// def_siberite_detection := 1 ;
 721: LD_ADDR_EXP 57
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 729: LD_ADDR_EXP 59
 733: PUSH
 734: LD_INT 3
 736: ST_TO_ADDR
// def_people_respawning := 2 ;
 737: LD_ADDR_EXP 58
 741: PUSH
 742: LD_INT 2
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 60
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_artefact_one := 1 ;
 753: LD_ADDR_EXP 1
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_artefact_two := 1 ;
 761: LD_ADDR_EXP 2
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 769: LD_ADDR_EXP 4
 773: PUSH
 774: LD_INT 2
 776: ST_TO_ADDR
// def_artefact_three := 1 ;
 777: LD_ADDR_EXP 3
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// def_kings_age := 1 ;
 785: LD_ADDR_EXP 5
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_public_score := 0 ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 0
 800: ST_TO_ADDR
// def_builduptime := 1 ;
 801: LD_ADDR_EXP 61
 805: PUSH
 806: LD_INT 1
 808: ST_TO_ADDR
// tech_level = 4 ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// def_win_rules = 0 ;
 817: LD_ADDR_EXP 19
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// end ; InitGameRules ;
 825: CALL 12930 0 0
// if def_game_rules = 0 then
 829: LD_EXP 47
 833: PUSH
 834: LD_INT 0
 836: EQUAL
 837: IFFALSE 864
// begin if isSGUI then
 839: LD_OWVAR 83
 843: IFFALSE 851
// setMpTechs ( ) else
 845: CALL 20681 0 0
 849: GO 864
// begin SetMpTechLevel ( tech_level + 1 ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: PPUSH
 860: CALL 20828 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 864: LD_ADDR_EXP 7
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: LD_INT 1
 874: PUSH
 875: LD_INT 1
 877: PUSH
 878: LD_INT 1
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: PUSH
 887: LD_EXP 48
 891: PUSH
 892: LD_INT 1
 894: PLUS
 895: ARRAY
 896: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 897: LD_ADDR_EXP 8
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: LD_INT 2
 910: PUSH
 911: LD_INT 3
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_EXP 48
 924: PUSH
 925: LD_INT 1
 927: PLUS
 928: ARRAY
 929: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 930: LD_ADDR_EXP 9
 934: PUSH
 935: LD_EXP 49
 939: PUSH
 940: LD_INT 4
 942: PLUS
 943: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 944: LD_ADDR_EXP 10
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: LD_INT 3
 954: PUSH
 955: LD_INT 4
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: PUSH
 967: LD_EXP 50
 971: PUSH
 972: LD_INT 1
 974: PLUS
 975: ARRAY
 976: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 977: LD_ADDR_EXP 12
 981: PUSH
 982: LD_INT 0
 984: PUSH
 985: LD_INT 0
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 0
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 50
1012: PUSH
1013: LD_INT 20
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 40
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_EXP 51
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1054: LD_ADDR_EXP 11
1058: PUSH
1059: LD_INT 10
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: LD_INT 7
1067: PUSH
1068: LD_INT 14
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 6
1077: PUSH
1078: LD_INT 12
1080: PUSH
1081: LD_INT 18
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 5
1091: PUSH
1092: LD_INT 10
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_EXP 51
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: ARRAY
1122: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1123: LD_ADDR_EXP 13
1127: PUSH
1128: LD_INT 150
1130: PUSH
1131: LD_EXP 52
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: MINUS
1140: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1141: LD_ADDR_EXP 15
1145: PUSH
1146: LD_INT 0
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 2
1154: PUSH
1155: LD_INT 3
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 59
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1174: LD_ADDR_EXP 16
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 12600
1184: PUSH
1185: LD_INT 2100
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 58
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1203: LD_ADDR_EXP 17
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 21000
1213: PUSH
1214: LD_INT 4200
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_EXP 58
1226: PUSH
1227: LD_INT 1
1229: PLUS
1230: ARRAY
1231: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1232: LD_ADDR_EXP 14
1236: PUSH
1237: LD_INT 1
1239: NEG
1240: PUSH
1241: LD_INT 350
1243: PUSH
1244: LD_INT 700
1246: PUSH
1247: LD_INT 1400
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 56
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// battle_flags_id := [ ] ;
1270: LD_ADDR_EXP 33
1274: PUSH
1275: EMPTY
1276: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1277: LD_ADDR_EXP 18
1281: PUSH
1282: LD_INT 0
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 63000
1290: PUSH
1291: LD_INT 126000
1293: PUSH
1294: LD_INT 189000
1296: PUSH
1297: LD_INT 252000
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: PUSH
1308: LD_EXP 60
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1318: LD_ADDR_EXP 20
1322: PUSH
1323: LD_INT 500
1325: PUSH
1326: LD_INT 1000
1328: PUSH
1329: LD_INT 1500
1331: PUSH
1332: LD_INT 2000
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 5
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1351: LD_EXP 60
1355: PUSH
1356: LD_INT 0
1358: EQUAL
1359: IFFALSE 1371
// siberite_bomb_Delay = 0 else
1361: LD_ADDR_EXP 18
1365: PUSH
1366: LD_INT 0
1368: ST_TO_ADDR
1369: GO 1393
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1371: LD_ADDR_EXP 18
1375: PUSH
1376: LD_EXP 60
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: LD_INT 21000
1387: MUL
1388: PUSH
1389: LD_INT 1
1391: PLUS
1392: ST_TO_ADDR
// end ;
1393: LD_VAR 0 1
1397: RET
// function init_map ; var i ; begin
1398: LD_INT 0
1400: PPUSH
1401: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1402: LD_ADDR_EXP 32
1406: PUSH
1407: LD_INT 43
1409: PUSH
1410: LD_INT 9
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 123
1419: PUSH
1420: LD_INT 10
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 113
1429: PUSH
1430: LD_INT 155
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PUSH
1437: LD_INT 186
1439: PUSH
1440: LD_INT 133
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1453: LD_ADDR_EXP 29
1457: PUSH
1458: LD_INT 18
1460: PUSH
1461: LD_INT 17
1463: PUSH
1464: LD_INT 2
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 156
1474: PUSH
1475: LD_INT 20
1477: PUSH
1478: LD_INT 3
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 83
1488: PUSH
1489: LD_INT 140
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 216
1502: PUSH
1503: LD_INT 143
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// for i in depot_def do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: LD_EXP 29
1529: PUSH
1530: FOR_IN
1531: IFFALSE 1605
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1533: LD_ADDR_EXP 31
1537: PUSH
1538: LD_EXP 31
1542: PUSH
1543: LD_VAR 0 2
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 2
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 6
1563: PPUSH
1564: CALL_OW 272
1568: PUSH
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 2
1576: ARRAY
1577: PPUSH
1578: LD_VAR 0 2
1582: PUSH
1583: LD_INT 3
1585: ARRAY
1586: PPUSH
1587: LD_INT 6
1589: PPUSH
1590: CALL_OW 273
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: ADD
1602: ST_TO_ADDR
1603: GO 1530
1605: POP
1606: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1607: LD_ADDR_EXP 30
1611: PUSH
1612: LD_INT 30
1614: PUSH
1615: LD_INT 36
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 44
1628: PUSH
1629: LD_INT 21
1631: PUSH
1632: LD_INT 4
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 43
1642: PUSH
1643: LD_INT 33
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 165
1661: PUSH
1662: LD_INT 34
1664: PUSH
1665: LD_INT 0
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 137
1675: PUSH
1676: LD_INT 18
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 153
1689: PUSH
1690: LD_INT 37
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 86
1708: PUSH
1709: LD_INT 120
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 105
1722: PUSH
1723: LD_INT 147
1725: PUSH
1726: LD_INT 4
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 68
1736: PUSH
1737: LD_INT 118
1739: PUSH
1740: LD_INT 2
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 199
1755: PUSH
1756: LD_INT 144
1758: PUSH
1759: LD_INT 1
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 207
1769: PUSH
1770: LD_INT 119
1772: PUSH
1773: LD_INT 3
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 195
1783: PUSH
1784: LD_INT 118
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: ST_TO_ADDR
// if def_extra_oil_deposits then
1806: LD_EXP 53
1810: IFFALSE 1854
// for i in extra_oil_deposits_locations do
1812: LD_ADDR_VAR 0 2
1816: PUSH
1817: LD_EXP 32
1821: PUSH
1822: FOR_IN
1823: IFFALSE 1852
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1825: LD_VAR 0 2
1829: PUSH
1830: LD_INT 1
1832: ARRAY
1833: PPUSH
1834: LD_VAR 0 2
1838: PUSH
1839: LD_INT 2
1841: ARRAY
1842: PPUSH
1843: LD_INT 2
1845: PPUSH
1846: CALL_OW 62
1850: GO 1822
1852: POP
1853: POP
// end ;
1854: LD_VAR 0 1
1858: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
1863: PPUSH
// if not Team_Game then
1864: LD_EXP 25
1868: NOT
1869: IFFALSE 1967
// begin for i = 1 to 8 do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_INT 8
1883: PUSH
1884: FOR_TO
1885: IFFALSE 1963
// for j = 1 to 8 do
1887: LD_ADDR_VAR 0 3
1891: PUSH
1892: DOUBLE
1893: LD_INT 1
1895: DEC
1896: ST_TO_ADDR
1897: LD_INT 8
1899: PUSH
1900: FOR_TO
1901: IFFALSE 1959
// if i <> j then
1903: LD_VAR 0 2
1907: PUSH
1908: LD_VAR 0 3
1912: NONEQUAL
1913: IFFALSE 1937
// SetAttitude ( i , j , att_neutral , true ) else
1915: LD_VAR 0 2
1919: PPUSH
1920: LD_VAR 0 3
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: CALL_OW 80
1935: GO 1957
// SetAttitude ( i , j , att_friend , true ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_VAR 0 3
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_INT 1
1952: PPUSH
1953: CALL_OW 80
1957: GO 1900
1959: POP
1960: POP
1961: GO 1884
1963: POP
1964: POP
// end else
1965: GO 2142
// begin if def_shared_vision then
1967: LD_EXP 55
1971: IFFALSE 2036
// begin for i in Teams do
1973: LD_ADDR_VAR 0 2
1977: PUSH
1978: LD_EXP 22
1982: PUSH
1983: FOR_IN
1984: IFFALSE 2034
// for j = 2 to i do
1986: LD_ADDR_VAR 0 3
1990: PUSH
1991: DOUBLE
1992: LD_INT 2
1994: DEC
1995: ST_TO_ADDR
1996: LD_VAR 0 2
2000: PUSH
2001: FOR_TO
2002: IFFALSE 2030
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2004: LD_VAR 0 2
2008: PUSH
2009: LD_VAR 0 3
2013: ARRAY
2014: PPUSH
2015: LD_VAR 0 2
2019: PUSH
2020: LD_INT 1
2022: ARRAY
2023: PPUSH
2024: CALL_OW 343
2028: GO 2001
2030: POP
2031: POP
2032: GO 1983
2034: POP
2035: POP
// end ; for i = 1 to 8 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_INT 1
2044: DEC
2045: ST_TO_ADDR
2046: LD_INT 8
2048: PUSH
2049: FOR_TO
2050: IFFALSE 2140
// for j = 1 to 8 do
2052: LD_ADDR_VAR 0 3
2056: PUSH
2057: DOUBLE
2058: LD_INT 1
2060: DEC
2061: ST_TO_ADDR
2062: LD_INT 8
2064: PUSH
2065: FOR_TO
2066: IFFALSE 2136
// if Side_Teams [ i ] = Side_Teams [ j ] then
2068: LD_EXP 21
2072: PUSH
2073: LD_VAR 0 2
2077: ARRAY
2078: PUSH
2079: LD_EXP 21
2083: PUSH
2084: LD_VAR 0 3
2088: ARRAY
2089: EQUAL
2090: IFFALSE 2114
// SetAttitude ( i , j , att_friend , true ) else
2092: LD_VAR 0 2
2096: PPUSH
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 1
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: CALL_OW 80
2112: GO 2134
// SetAttitude ( i , j , att_enemy , true ) ;
2114: LD_VAR 0 2
2118: PPUSH
2119: LD_VAR 0 3
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: CALL_OW 80
2134: GO 2065
2136: POP
2137: POP
2138: GO 2049
2140: POP
2141: POP
// end ; end ;
2142: LD_VAR 0 1
2146: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2147: LD_INT 0
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// result := [ ] ;
2153: LD_ADDR_VAR 0 7
2157: PUSH
2158: EMPTY
2159: ST_TO_ADDR
// for i := 1 to count do
2160: LD_ADDR_VAR 0 8
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_VAR 0 1
2174: PUSH
2175: FOR_TO
2176: IFFALSE 2594
// begin uc_direction := Rand ( 0 , 5 ) ;
2178: LD_ADDR_OWVAR 24
2182: PUSH
2183: LD_INT 0
2185: PPUSH
2186: LD_INT 5
2188: PPUSH
2189: CALL_OW 12
2193: ST_TO_ADDR
// if commander then
2194: LD_LOC 1
2198: IFFALSE 2307
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_OWVAR 19
2209: PUSH
2210: LD_OWVAR 20
2214: ARRAY
2215: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2216: LD_INT 1
2218: PPUSH
2219: LD_INT 2
2221: PPUSH
2222: CALL_OW 12
2226: PPUSH
2227: LD_VAR 0 2
2231: PPUSH
2232: LD_EXP 10
2236: PUSH
2237: LD_INT 2
2239: PLUS
2240: PPUSH
2241: CALL_OW 380
// hc_importance := 105 ;
2245: LD_ADDR_OWVAR 32
2249: PUSH
2250: LD_INT 105
2252: ST_TO_ADDR
// commander := false ;
2253: LD_ADDR_LOC 1
2257: PUSH
2258: LD_INT 0
2260: ST_TO_ADDR
// if Multiplayer then
2261: LD_OWVAR 4
2265: IFFALSE 2305
// begin hc_gallery := MULTIAVATARS ;
2267: LD_ADDR_OWVAR 33
2271: PUSH
2272: LD_STRING MULTIAVATARS
2274: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2275: LD_ADDR_OWVAR 34
2279: PUSH
2280: LD_OWVAR 20
2284: PPUSH
2285: CALL_OW 525
2289: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2290: LD_ADDR_OWVAR 27
2294: PUSH
2295: LD_OWVAR 20
2299: PPUSH
2300: CALL_OW 526
2304: ST_TO_ADDR
// end ; end else
2305: GO 2370
// begin hc_name :=  ;
2307: LD_ADDR_OWVAR 26
2311: PUSH
2312: LD_STRING 
2314: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2315: LD_INT 1
2317: PPUSH
2318: LD_INT 2
2320: PPUSH
2321: CALL_OW 12
2325: PPUSH
2326: LD_VAR 0 2
2330: PPUSH
2331: LD_EXP 10
2335: PPUSH
2336: CALL_OW 380
// hc_importance := 0 ;
2340: LD_ADDR_OWVAR 32
2344: PUSH
2345: LD_INT 0
2347: ST_TO_ADDR
// if Multiplayer then
2348: LD_OWVAR 4
2352: IFFALSE 2370
// begin hc_gallery :=  ;
2354: LD_ADDR_OWVAR 33
2358: PUSH
2359: LD_STRING 
2361: ST_TO_ADDR
// hc_face_number := 0 ;
2362: LD_ADDR_OWVAR 34
2366: PUSH
2367: LD_INT 0
2369: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2370: LD_ADDR_VAR 0 10
2374: PUSH
2375: CALL_OW 44
2379: ST_TO_ADDR
// if global_defined then
2380: LD_LOC 3
2384: IFFALSE 2524
// begin if ( cl = class_soldier ) then
2386: LD_VAR 0 2
2390: PUSH
2391: LD_INT 1
2393: EQUAL
2394: IFFALSE 2414
// j := i + soldiers_created else
2396: LD_ADDR_VAR 0 9
2400: PUSH
2401: LD_VAR 0 8
2405: PUSH
2406: LD_LOC 4
2410: PLUS
2411: ST_TO_ADDR
2412: GO 2424
// j := i ;
2414: LD_ADDR_VAR 0 9
2418: PUSH
2419: LD_VAR 0 8
2423: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2424: LD_LOC 2
2428: PUSH
2429: LD_VAR 0 2
2433: ARRAY
2434: PUSH
2435: LD_VAR 0 9
2439: ARRAY
2440: PPUSH
2441: LD_VAR 0 10
2445: PPUSH
2446: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2450: LD_VAR 0 10
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_LOC 2
2462: PUSH
2463: LD_VAR 0 2
2467: ARRAY
2468: PUSH
2469: LD_VAR 0 9
2473: ARRAY
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: CALL_OW 260
2482: PPUSH
2483: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2487: LD_VAR 0 10
2491: PPUSH
2492: LD_INT 1
2494: PPUSH
2495: LD_LOC 2
2499: PUSH
2500: LD_VAR 0 2
2504: ARRAY
2505: PUSH
2506: LD_VAR 0 9
2510: ARRAY
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 260
2519: PPUSH
2520: CALL_OW 239
// end ; if building then
2524: LD_VAR 0 6
2528: IFFALSE 2546
// PlaceHumanInUnit ( un , building ) else
2530: LD_VAR 0 10
2534: PPUSH
2535: LD_VAR 0 6
2539: PPUSH
2540: CALL_OW 52
2544: GO 2573
// PlaceUnitXYR ( un , x , y , r , false ) ;
2546: LD_VAR 0 10
2550: PPUSH
2551: LD_VAR 0 3
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 5
2565: PPUSH
2566: LD_INT 0
2568: PPUSH
2569: CALL_OW 50
// result := result ^ [ un ] ;
2573: LD_ADDR_VAR 0 7
2577: PUSH
2578: LD_VAR 0 7
2582: PUSH
2583: LD_VAR 0 10
2587: PUSH
2588: EMPTY
2589: LIST
2590: ADD
2591: ST_TO_ADDR
// end ;
2592: GO 2175
2594: POP
2595: POP
// if not global_defined then
2596: LD_LOC 3
2600: NOT
2601: IFFALSE 2679
// if ( global_units >= cl ) then
2603: LD_LOC 2
2607: PUSH
2608: LD_VAR 0 2
2612: GREATEREQUAL
2613: IFFALSE 2654
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2615: LD_ADDR_LOC 2
2619: PUSH
2620: LD_LOC 2
2624: PPUSH
2625: LD_VAR 0 2
2629: PPUSH
2630: LD_LOC 2
2634: PUSH
2635: LD_VAR 0 2
2639: ARRAY
2640: PUSH
2641: LD_VAR 0 7
2645: ADD
2646: PPUSH
2647: CALL_OW 1
2651: ST_TO_ADDR
2652: GO 2679
// global_units := Replace ( global_units , cl , result ) ;
2654: LD_ADDR_LOC 2
2658: PUSH
2659: LD_LOC 2
2663: PPUSH
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_VAR 0 7
2673: PPUSH
2674: CALL_OW 1
2678: ST_TO_ADDR
// if commander then
2679: LD_LOC 1
2683: IFFALSE 2730
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2685: LD_ADDR_EXP 34
2689: PUSH
2690: LD_EXP 34
2694: PPUSH
2695: LD_OWVAR 20
2699: PPUSH
2700: LD_EXP 34
2704: PUSH
2705: LD_OWVAR 20
2709: ARRAY
2710: PUSH
2711: LD_VAR 0 10
2715: ADD
2716: PPUSH
2717: CALL_OW 1
2721: ST_TO_ADDR
// commander := false ;
2722: LD_ADDR_LOC 1
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// end ; end ;
2730: LD_VAR 0 7
2734: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2735: LD_INT 0
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
2744: PPUSH
2745: PPUSH
// if side in [ 0 , 9 ] then
2746: LD_VAR 0 1
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 9
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: IN
2761: IFFALSE 2765
// exit ;
2763: GO 3840
// pos := Side_Positions [ side ] ;
2765: LD_ADDR_VAR 0 3
2769: PUSH
2770: LD_EXP 23
2774: PUSH
2775: LD_VAR 0 1
2779: ARRAY
2780: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2781: LD_ADDR_OWVAR 21
2785: PUSH
2786: LD_EXP 24
2790: PUSH
2791: LD_VAR 0 1
2795: ARRAY
2796: ST_TO_ADDR
// uc_side := side ;
2797: LD_ADDR_OWVAR 20
2801: PUSH
2802: LD_VAR 0 1
2806: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2807: LD_ADDR_VAR 0 4
2811: PUSH
2812: LD_EXP 29
2816: PUSH
2817: LD_VAR 0 3
2821: ARRAY
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2827: LD_ADDR_VAR 0 5
2831: PUSH
2832: LD_EXP 29
2836: PUSH
2837: LD_VAR 0 3
2841: ARRAY
2842: PUSH
2843: LD_INT 2
2845: ARRAY
2846: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2847: LD_ADDR_VAR 0 6
2851: PUSH
2852: LD_EXP 29
2856: PUSH
2857: LD_VAR 0 3
2861: ARRAY
2862: PUSH
2863: LD_INT 3
2865: ARRAY
2866: ST_TO_ADDR
// if is_depot then
2867: LD_EXP 7
2871: IFFALSE 3004
// begin bc_type = b_depot ;
2873: LD_ADDR_OWVAR 42
2877: PUSH
2878: LD_INT 0
2880: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2881: LD_ADDR_VAR 0 10
2885: PUSH
2886: LD_VAR 0 4
2890: PPUSH
2891: LD_VAR 0 5
2895: PPUSH
2896: LD_VAR 0 6
2900: PPUSH
2901: CALL_OW 47
2905: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2906: LD_VAR 0 10
2910: PPUSH
2911: LD_STRING @
2913: PUSH
2914: LD_VAR 0 1
2918: STR
2919: PPUSH
2920: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2924: LD_VAR 0 10
2928: PPUSH
2929: CALL_OW 274
2933: PPUSH
2934: LD_INT 1
2936: PPUSH
2937: LD_EXP 12
2941: PUSH
2942: LD_INT 1
2944: ARRAY
2945: PPUSH
2946: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2950: LD_VAR 0 10
2954: PPUSH
2955: CALL_OW 274
2959: PPUSH
2960: LD_INT 2
2962: PPUSH
2963: LD_EXP 12
2967: PUSH
2968: LD_INT 2
2970: ARRAY
2971: PPUSH
2972: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2976: LD_VAR 0 10
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 3
2988: PPUSH
2989: LD_EXP 12
2993: PUSH
2994: LD_INT 3
2996: ARRAY
2997: PPUSH
2998: CALL_OW 277
// end else
3002: GO 3148
// begin for i := 1 to 3 do
3004: LD_ADDR_VAR 0 7
3008: PUSH
3009: DOUBLE
3010: LD_INT 1
3012: DEC
3013: ST_TO_ADDR
3014: LD_INT 3
3016: PUSH
3017: FOR_TO
3018: IFFALSE 3146
// begin r := starting_resources [ i ] ;
3020: LD_ADDR_VAR 0 8
3024: PUSH
3025: LD_EXP 12
3029: PUSH
3030: LD_VAR 0 7
3034: ARRAY
3035: ST_TO_ADDR
// while r >= 10 do
3036: LD_VAR 0 8
3040: PUSH
3041: LD_INT 10
3043: GREATEREQUAL
3044: IFFALSE 3144
// if r > 50 then
3046: LD_VAR 0 8
3050: PUSH
3051: LD_INT 50
3053: GREATER
3054: IFFALSE 3100
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3056: LD_VAR 0 7
3060: PPUSH
3061: LD_INT 5
3063: PPUSH
3064: LD_VAR 0 4
3068: PPUSH
3069: LD_VAR 0 5
3073: PPUSH
3074: LD_INT 4
3076: PPUSH
3077: LD_INT 0
3079: PPUSH
3080: CALL_OW 60
// r := r - 50 ;
3084: LD_ADDR_VAR 0 8
3088: PUSH
3089: LD_VAR 0 8
3093: PUSH
3094: LD_INT 50
3096: MINUS
3097: ST_TO_ADDR
// end else
3098: GO 3142
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3100: LD_VAR 0 7
3104: PPUSH
3105: LD_VAR 0 8
3109: PUSH
3110: LD_INT 10
3112: DIV
3113: PPUSH
3114: LD_VAR 0 4
3118: PPUSH
3119: LD_VAR 0 5
3123: PPUSH
3124: LD_INT 4
3126: PPUSH
3127: LD_INT 0
3129: PPUSH
3130: CALL_OW 60
// r := 0 ;
3134: LD_ADDR_VAR 0 8
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// end ;
3142: GO 3036
// end ;
3144: GO 3017
3146: POP
3147: POP
// end ; for r in starting_crates do
3148: LD_ADDR_VAR 0 8
3152: PUSH
3153: LD_EXP 11
3157: PUSH
3158: FOR_IN
3159: IFFALSE 3191
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3161: LD_INT 1
3163: PPUSH
3164: LD_INT 5
3166: PPUSH
3167: LD_VAR 0 4
3171: PPUSH
3172: LD_VAR 0 5
3176: PPUSH
3177: LD_VAR 0 8
3181: PPUSH
3182: LD_INT 0
3184: PPUSH
3185: CALL_OW 60
3189: GO 3158
3191: POP
3192: POP
// if def_morale_flags then
3193: LD_EXP 56
3197: IFFALSE 3336
// begin x := start_def [ pos ] [ 1 ] ;
3199: LD_ADDR_VAR 0 4
3203: PUSH
3204: LD_EXP 31
3208: PUSH
3209: LD_VAR 0 3
3213: ARRAY
3214: PUSH
3215: LD_INT 1
3217: ARRAY
3218: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3219: LD_ADDR_VAR 0 5
3223: PUSH
3224: LD_EXP 31
3228: PUSH
3229: LD_VAR 0 3
3233: ARRAY
3234: PUSH
3235: LD_INT 2
3237: ARRAY
3238: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3239: LD_VAR 0 4
3243: PPUSH
3244: LD_VAR 0 5
3248: PPUSH
3249: LD_INT 12
3251: PPUSH
3252: LD_INT 2
3254: PPUSH
3255: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3259: LD_ADDR_EXP 33
3263: PUSH
3264: LD_EXP 33
3268: PUSH
3269: LD_VAR 0 1
3273: PPUSH
3274: LD_VAR 0 4
3278: PPUSH
3279: LD_VAR 0 5
3283: PPUSH
3284: LD_INT 1
3286: PUSH
3287: LD_INT 100
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: LD_INT 2
3296: PUSH
3297: LD_INT 50
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 20
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 20
3316: PUSH
3317: LD_INT 100
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PPUSH
3330: CALL_OW 418
3334: ADD
3335: ST_TO_ADDR
// end ; commander := true ;
3336: LD_ADDR_LOC 1
3340: PUSH
3341: LD_INT 1
3343: ST_TO_ADDR
// soldiers_created := 0 ;
3344: LD_ADDR_LOC 4
3348: PUSH
3349: LD_INT 0
3351: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3352: LD_ADDR_VAR 0 7
3356: PUSH
3357: DOUBLE
3358: LD_INT 1
3360: DEC
3361: ST_TO_ADDR
3362: LD_EXP 8
3366: PUSH
3367: FOR_TO
3368: IFFALSE 3521
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3370: LD_ADDR_VAR 0 4
3374: PUSH
3375: LD_EXP 30
3379: PUSH
3380: LD_VAR 0 3
3384: ARRAY
3385: PUSH
3386: LD_VAR 0 7
3390: ARRAY
3391: PUSH
3392: LD_INT 1
3394: ARRAY
3395: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3396: LD_ADDR_VAR 0 5
3400: PUSH
3401: LD_EXP 30
3405: PUSH
3406: LD_VAR 0 3
3410: ARRAY
3411: PUSH
3412: LD_VAR 0 7
3416: ARRAY
3417: PUSH
3418: LD_INT 2
3420: ARRAY
3421: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3422: LD_ADDR_VAR 0 6
3426: PUSH
3427: LD_EXP 30
3431: PUSH
3432: LD_VAR 0 3
3436: ARRAY
3437: PUSH
3438: LD_VAR 0 7
3442: ARRAY
3443: PUSH
3444: LD_INT 3
3446: ARRAY
3447: ST_TO_ADDR
// bc_type := b_breastwork ;
3448: LD_ADDR_OWVAR 42
3452: PUSH
3453: LD_INT 31
3455: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3456: LD_ADDR_VAR 0 9
3460: PUSH
3461: LD_VAR 0 4
3465: PPUSH
3466: LD_VAR 0 5
3470: PPUSH
3471: LD_VAR 0 6
3475: PPUSH
3476: CALL_OW 47
3480: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3481: LD_INT 1
3483: PPUSH
3484: LD_INT 1
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: LD_INT 0
3492: PPUSH
3493: LD_INT 0
3495: PPUSH
3496: LD_VAR 0 9
3500: PPUSH
3501: CALL 2147 0 6
// soldiers_created := soldiers_created + 1 ;
3505: LD_ADDR_LOC 4
3509: PUSH
3510: LD_LOC 4
3514: PUSH
3515: LD_INT 1
3517: PLUS
3518: ST_TO_ADDR
// end ;
3519: GO 3367
3521: POP
3522: POP
// x := start_def [ pos ] [ 1 ] ;
3523: LD_ADDR_VAR 0 4
3527: PUSH
3528: LD_EXP 31
3532: PUSH
3533: LD_VAR 0 3
3537: ARRAY
3538: PUSH
3539: LD_INT 1
3541: ARRAY
3542: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3543: LD_ADDR_VAR 0 5
3547: PUSH
3548: LD_EXP 31
3552: PUSH
3553: LD_VAR 0 3
3557: ARRAY
3558: PUSH
3559: LD_INT 2
3561: ARRAY
3562: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3563: LD_LOC 8
3567: PUSH
3568: LD_EXP 8
3572: MINUS
3573: PPUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_VAR 0 4
3581: PPUSH
3582: LD_VAR 0 5
3586: PPUSH
3587: LD_INT 5
3589: PPUSH
3590: LD_INT 0
3592: PPUSH
3593: CALL 2147 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3597: LD_LOC 5
3601: PPUSH
3602: LD_INT 2
3604: PPUSH
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_VAR 0 5
3614: PPUSH
3615: LD_INT 5
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL 2147 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3625: LD_LOC 7
3629: PPUSH
3630: LD_INT 3
3632: PPUSH
3633: LD_VAR 0 4
3637: PPUSH
3638: LD_VAR 0 5
3642: PPUSH
3643: LD_INT 5
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL 2147 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3653: LD_LOC 6
3657: PPUSH
3658: LD_INT 4
3660: PPUSH
3661: LD_VAR 0 4
3665: PPUSH
3666: LD_VAR 0 5
3670: PPUSH
3671: LD_INT 5
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL 2147 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3681: LD_EXP 57
3685: PUSH
3686: LD_INT 20
3688: PPUSH
3689: LD_VAR 0 1
3693: PPUSH
3694: CALL_OW 321
3698: PUSH
3699: LD_INT 1
3701: EQUAL
3702: AND
3703: IFFALSE 3720
// SetTech ( tech_SibDet , side , state_researched ) ;
3705: LD_INT 20
3707: PPUSH
3708: LD_VAR 0 1
3712: PPUSH
3713: LD_INT 2
3715: PPUSH
3716: CALL_OW 322
// if def_siberite_bomb = 1 then
3720: LD_EXP 60
3724: PUSH
3725: LD_INT 1
3727: EQUAL
3728: IFFALSE 3762
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3730: LD_INT 25
3732: PPUSH
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 1
3740: PPUSH
3741: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3745: LD_INT 73
3747: PPUSH
3748: LD_VAR 0 1
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: CALL_OW 322
// end else
3760: GO 3792
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3762: LD_INT 25
3764: PPUSH
3765: LD_VAR 0 1
3769: PPUSH
3770: LD_INT 0
3772: PPUSH
3773: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3777: LD_INT 73
3779: PPUSH
3780: LD_VAR 0 1
3784: PPUSH
3785: LD_INT 0
3787: PPUSH
3788: CALL_OW 322
// end ; if Game_Type = 3 then
3792: LD_EXP 46
3796: PUSH
3797: LD_INT 3
3799: EQUAL
3800: IFFALSE 3817
// SetTech ( tech_partinvis , side , state_disabled ) ;
3802: LD_INT 16
3804: PPUSH
3805: LD_VAR 0 1
3809: PPUSH
3810: LD_INT 0
3812: PPUSH
3813: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3817: LD_INT 24
3819: PPUSH
3820: LD_VAR 0 1
3824: PPUSH
3825: LD_INT 1
3827: PPUSH
3828: CALL_OW 322
// global_defined := true ;
3832: LD_ADDR_LOC 3
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// end ;
3840: LD_VAR 0 2
3844: RET
// every 0 0$1 do
3845: GO 3847
3847: DISABLE
// if ( def_siberite_bomb > 1 ) then
3848: LD_EXP 60
3852: PUSH
3853: LD_INT 1
3855: GREATER
3856: IFFALSE 3871
// begin wait ( siberite_bomb_Delay ) ;
3858: LD_EXP 18
3862: PPUSH
3863: CALL_OW 67
// EnableSibFiss ;
3867: CALL 3872 0 0
// end ;
3871: END
// function EnableSibFiss ; var i ; begin
3872: LD_INT 0
3874: PPUSH
3875: PPUSH
// for i := 1 to 8 do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_INT 8
3888: PUSH
3889: FOR_TO
3890: IFFALSE 3936
// if Side_Positions [ i ] then
3892: LD_EXP 23
3896: PUSH
3897: LD_VAR 0 2
3901: ARRAY
3902: IFFALSE 3934
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3904: LD_INT 25
3906: PPUSH
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 1
3914: PPUSH
3915: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3919: LD_INT 73
3921: PPUSH
3922: LD_VAR 0 2
3926: PPUSH
3927: LD_INT 1
3929: PPUSH
3930: CALL_OW 322
// end ;
3934: GO 3889
3936: POP
3937: POP
// end ;
3938: LD_VAR 0 1
3942: RET
// function prepare_sides ; var i ; begin
3943: LD_INT 0
3945: PPUSH
3946: PPUSH
// global_units := [ ] ;
3947: LD_ADDR_LOC 2
3951: PUSH
3952: EMPTY
3953: ST_TO_ADDR
// global_defined := false ;
3954: LD_ADDR_LOC 3
3958: PUSH
3959: LD_INT 0
3961: ST_TO_ADDR
// CountClassMembers ;
3962: CALL 4012 0 0
// for i := 1 to 8 do
3966: LD_ADDR_VAR 0 2
3970: PUSH
3971: DOUBLE
3972: LD_INT 1
3974: DEC
3975: ST_TO_ADDR
3976: LD_INT 8
3978: PUSH
3979: FOR_TO
3980: IFFALSE 4005
// if Side_Positions [ i ] then
3982: LD_EXP 23
3986: PUSH
3987: LD_VAR 0 2
3991: ARRAY
3992: IFFALSE 4003
// prepare_side ( i ) ;
3994: LD_VAR 0 2
3998: PPUSH
3999: CALL 2735 0 1
4003: GO 3979
4005: POP
4006: POP
// end ;
4007: LD_VAR 0 1
4011: RET
// function CountClassMembers ; var Mode ; begin
4012: LD_INT 0
4014: PPUSH
4015: PPUSH
// if No_Mechs then
4016: LD_EXP 62
4020: IFFALSE 4032
// Mode := 2 else
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: LD_INT 2
4029: ST_TO_ADDR
4030: GO 4040
// Mode := 1 ;
4032: LD_ADDR_VAR 0 2
4036: PUSH
4037: LD_INT 1
4039: ST_TO_ADDR
// neng := number_of_people ;
4040: LD_ADDR_LOC 5
4044: PUSH
4045: LD_EXP 9
4049: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4050: LD_ADDR_LOC 8
4054: PUSH
4055: LD_LOC 5
4059: PUSH
4060: LD_INT 4
4062: PUSH
4063: LD_INT 3
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PUSH
4070: LD_VAR 0 2
4074: ARRAY
4075: DIV
4076: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4077: LD_LOC 8
4081: PUSH
4082: LD_EXP 8
4086: LESS
4087: IFFALSE 4099
// nsol := number_of_breastworks ;
4089: LD_ADDR_LOC 8
4093: PUSH
4094: LD_EXP 8
4098: ST_TO_ADDR
// neng := neng - nsol ;
4099: LD_ADDR_LOC 5
4103: PUSH
4104: LD_LOC 5
4108: PUSH
4109: LD_LOC 8
4113: MINUS
4114: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4115: LD_ADDR_LOC 6
4119: PUSH
4120: LD_LOC 5
4124: PUSH
4125: LD_INT 3
4127: PUSH
4128: LD_INT 2
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PUSH
4135: LD_VAR 0 2
4139: ARRAY
4140: DIV
4141: ST_TO_ADDR
// if ( nsci < 1 ) then
4142: LD_LOC 6
4146: PUSH
4147: LD_INT 1
4149: LESS
4150: IFFALSE 4160
// nsci := 1 ;
4152: LD_ADDR_LOC 6
4156: PUSH
4157: LD_INT 1
4159: ST_TO_ADDR
// neng := neng - nsci ;
4160: LD_ADDR_LOC 5
4164: PUSH
4165: LD_LOC 5
4169: PUSH
4170: LD_LOC 6
4174: MINUS
4175: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4176: LD_ADDR_LOC 7
4180: PUSH
4181: LD_LOC 5
4185: PUSH
4186: LD_INT 2
4188: DIV
4189: PUSH
4190: LD_INT 0
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PUSH
4197: LD_VAR 0 2
4201: ARRAY
4202: ST_TO_ADDR
// neng := neng - nmech ;
4203: LD_ADDR_LOC 5
4207: PUSH
4208: LD_LOC 5
4212: PUSH
4213: LD_LOC 7
4217: MINUS
4218: ST_TO_ADDR
// if ( neng < 1 ) then
4219: LD_LOC 5
4223: PUSH
4224: LD_INT 1
4226: LESS
4227: IFFALSE 4237
// neng := 1 ;
4229: LD_ADDR_LOC 5
4233: PUSH
4234: LD_INT 1
4236: ST_TO_ADDR
// end ;
4237: LD_VAR 0 1
4241: RET
// starting begin disable ( 1 ) ;
4242: LD_INT 1
4244: DISABLE_MARKED
// disable ( 2 ) ;
4245: LD_INT 2
4247: DISABLE_MARKED
// disable ( 3 ) ;
4248: LD_INT 3
4250: DISABLE_MARKED
// disable ( 4 ) ;
4251: LD_INT 4
4253: DISABLE_MARKED
// disable ( 5 ) ;
4254: LD_INT 5
4256: DISABLE_MARKED
// disable ( 6 ) ;
4257: LD_INT 6
4259: DISABLE_MARKED
// disable ( 7 ) ;
4260: LD_INT 7
4262: DISABLE_MARKED
// disable ( 10 ) ;
4263: LD_INT 10
4265: DISABLE_MARKED
// disable ( 20 ) ;
4266: LD_INT 20
4268: DISABLE_MARKED
// disable ( 98 ) ;
4269: LD_INT 98
4271: DISABLE_MARKED
// disable ( 99 ) ;
4272: LD_INT 99
4274: DISABLE_MARKED
// disable ( 400 ) ;
4275: LD_INT 400
4277: DISABLE_MARKED
// disable ( 401 ) ;
4278: LD_INT 401
4280: DISABLE_MARKED
// disable ( 600 ) ;
4281: LD_INT 600
4283: DISABLE_MARKED
// mp_selectmsg := true ;
4284: LD_ADDR_OWVAR 13
4288: PUSH
4289: LD_INT 1
4291: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4292: CALL 68 0 0
// init_map ;
4296: CALL 1398 0 0
// set_shared_visions_and_alliances ;
4300: CALL 1859 0 0
// ResetFog ;
4304: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4308: LD_OWVAR 2
4312: PPUSH
4313: CALL_OW 520
// prepare_sides ;
4317: CALL 3943 0 0
// init_respawning ;
4321: CALL 26986 0 0
// Init_Win_Condition ;
4325: CALL 17234 0 0
// InitLimits ;
4329: CALL 15062 0 0
// ShowTimer ;
4333: CALL 15999 0 0
// case Game_Type of 2 :
4337: LD_EXP 46
4341: PUSH
4342: LD_INT 2
4344: DOUBLE
4345: EQUAL
4346: IFTRUE 4350
4348: GO 4357
4350: POP
// init_alien_research ; 3 :
4351: CALL 6662 0 0
4355: GO 4377
4357: LD_INT 3
4359: DOUBLE
4360: EQUAL
4361: IFTRUE 4365
4363: GO 4376
4365: POP
// begin InitPoints ( ) ;
4366: CALL 16237 0 0
// init_kings_counting ;
4370: CALL 18529 0 0
// end ; end ;
4374: GO 4377
4376: POP
// music_nat := Side_Nations [ your_side ] ;
4377: LD_ADDR_OWVAR 71
4381: PUSH
4382: LD_EXP 24
4386: PUSH
4387: LD_OWVAR 2
4391: ARRAY
4392: ST_TO_ADDR
// if IAmSpec then
4393: CALL_OW 531
4397: IFFALSE 4421
// begin fogOff ( true ) ;
4399: LD_INT 1
4401: PPUSH
4402: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4406: LD_INT 119
4408: PPUSH
4409: LD_INT 79
4411: PPUSH
4412: CALL_OW 86
// enable ( 400 ) ;
4416: LD_INT 400
4418: ENABLE_MARKED
// end else
4419: GO 4467
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4421: LD_EXP 31
4425: PUSH
4426: LD_EXP 23
4430: PUSH
4431: LD_OWVAR 2
4435: ARRAY
4436: ARRAY
4437: PUSH
4438: LD_INT 1
4440: ARRAY
4441: PPUSH
4442: LD_EXP 31
4446: PUSH
4447: LD_EXP 23
4451: PUSH
4452: LD_OWVAR 2
4456: ARRAY
4457: ARRAY
4458: PUSH
4459: LD_INT 2
4461: ARRAY
4462: PPUSH
4463: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4467: LD_INT 1
4469: PPUSH
4470: CALL_OW 573
// InitApeman ;
4474: CALL 5159 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4478: LD_ADDR_EXP 66
4482: PUSH
4483: LD_INT 21
4485: PUSH
4486: LD_INT 23
4488: PUSH
4489: LD_INT 20
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: ST_TO_ADDR
// BeginBuildUp ;
4501: CALL 27480 0 0
// end ; end_of_file
4505: END
// every 1 1$0 + 0 0$0.3 do
4506: GO 4508
4508: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
4509: LD_INT 4
4511: PPUSH
4512: LD_INT 5
4514: PPUSH
4515: CALL_OW 12
4519: PPUSH
4520: LD_INT 25
4522: PPUSH
4523: LD_INT 1
4525: PPUSH
4526: CALL_OW 55
// enable ;
4530: ENABLE
// end ;
4531: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
// begin case tick of 1 .. 1 1$0 :
4539: LD_OWVAR 1
4543: PUSH
4544: LD_INT 1
4546: DOUBLE
4547: GREATEREQUAL
4548: IFFALSE 4556
4550: LD_INT 2100
4552: DOUBLE
4553: LESSEQUAL
4554: IFTRUE 4558
4556: GO 4586
4558: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4559: LD_EXP 13
4563: PUSH
4564: LD_INT 100
4566: DIVREAL
4567: PUSH
4568: LD_INT 525
4570: PPUSH
4571: LD_INT 1050
4573: PPUSH
4574: CALL_OW 12
4578: MUL
4579: PPUSH
4580: CALL_OW 67
4584: GO 4888
4586: LD_INT 2100
4588: PUSH
4589: LD_INT 1
4591: PLUS
4592: DOUBLE
4593: GREATEREQUAL
4594: IFFALSE 4602
4596: LD_INT 10500
4598: DOUBLE
4599: LESSEQUAL
4600: IFTRUE 4604
4602: GO 4632
4604: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4605: LD_EXP 13
4609: PUSH
4610: LD_INT 100
4612: DIVREAL
4613: PUSH
4614: LD_INT 1050
4616: PPUSH
4617: LD_INT 1750
4619: PPUSH
4620: CALL_OW 12
4624: MUL
4625: PPUSH
4626: CALL_OW 67
4630: GO 4888
4632: LD_INT 10500
4634: PUSH
4635: LD_INT 1
4637: PLUS
4638: DOUBLE
4639: GREATEREQUAL
4640: IFFALSE 4648
4642: LD_INT 21000
4644: DOUBLE
4645: LESSEQUAL
4646: IFTRUE 4650
4648: GO 4678
4650: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4651: LD_EXP 13
4655: PUSH
4656: LD_INT 100
4658: DIVREAL
4659: PUSH
4660: LD_INT 1750
4662: PPUSH
4663: LD_INT 2100
4665: PPUSH
4666: CALL_OW 12
4670: MUL
4671: PPUSH
4672: CALL_OW 67
4676: GO 4888
4678: LD_INT 21000
4680: PUSH
4681: LD_INT 1
4683: PLUS
4684: DOUBLE
4685: GREATEREQUAL
4686: IFFALSE 4694
4688: LD_INT 42000
4690: DOUBLE
4691: LESSEQUAL
4692: IFTRUE 4696
4694: GO 4724
4696: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4697: LD_EXP 13
4701: PUSH
4702: LD_INT 100
4704: DIVREAL
4705: PUSH
4706: LD_INT 2100
4708: PPUSH
4709: LD_INT 2275
4711: PPUSH
4712: CALL_OW 12
4716: MUL
4717: PPUSH
4718: CALL_OW 67
4722: GO 4888
4724: LD_INT 42000
4726: PUSH
4727: LD_INT 1
4729: PLUS
4730: DOUBLE
4731: GREATEREQUAL
4732: IFFALSE 4740
4734: LD_INT 63000
4736: DOUBLE
4737: LESSEQUAL
4738: IFTRUE 4742
4740: GO 4770
4742: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4743: LD_EXP 13
4747: PUSH
4748: LD_INT 100
4750: DIVREAL
4751: PUSH
4752: LD_INT 2275
4754: PPUSH
4755: LD_INT 2450
4757: PPUSH
4758: CALL_OW 12
4762: MUL
4763: PPUSH
4764: CALL_OW 67
4768: GO 4888
4770: LD_INT 63000
4772: PUSH
4773: LD_INT 1
4775: PLUS
4776: DOUBLE
4777: GREATEREQUAL
4778: IFFALSE 4786
4780: LD_INT 105000
4782: DOUBLE
4783: LESSEQUAL
4784: IFTRUE 4788
4786: GO 4816
4788: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4789: LD_EXP 13
4793: PUSH
4794: LD_INT 100
4796: DIVREAL
4797: PUSH
4798: LD_INT 2450
4800: PPUSH
4801: LD_INT 2800
4803: PPUSH
4804: CALL_OW 12
4808: MUL
4809: PPUSH
4810: CALL_OW 67
4814: GO 4888
4816: LD_INT 105000
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: DOUBLE
4823: GREATEREQUAL
4824: IFFALSE 4832
4826: LD_INT 630000
4828: DOUBLE
4829: LESSEQUAL
4830: IFTRUE 4834
4832: GO 4862
4834: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
4835: LD_EXP 13
4839: PUSH
4840: LD_INT 100
4842: DIVREAL
4843: PUSH
4844: LD_INT 2800
4846: PPUSH
4847: LD_INT 3500
4849: PPUSH
4850: CALL_OW 12
4854: MUL
4855: PPUSH
4856: CALL_OW 67
4860: GO 4888
4862: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
4863: LD_EXP 13
4867: PUSH
4868: LD_INT 100
4870: DIVREAL
4871: PUSH
4872: LD_INT 3500
4874: PPUSH
4875: LD_INT 3850
4877: PPUSH
4878: CALL_OW 12
4882: MUL
4883: PPUSH
4884: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
4888: LD_ADDR_VAR 0 2
4892: PUSH
4893: LD_INT 3
4895: PPUSH
4896: LD_INT 5
4898: PPUSH
4899: CALL_OW 12
4903: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
4904: LD_ADDR_VAR 0 1
4908: PUSH
4909: LD_EXP 23
4913: PUSH
4914: LD_INT 0
4916: PUSH
4917: EMPTY
4918: LIST
4919: DIFF
4920: PUSH
4921: FOR_IN
4922: IFFALSE 4962
// CreateCratesArea ( amount , [ north_west , north_east , south_west , south_east ] [ i ] , true ) ;
4924: LD_VAR 0 2
4928: PPUSH
4929: LD_INT 4
4931: PUSH
4932: LD_INT 5
4934: PUSH
4935: LD_INT 7
4937: PUSH
4938: LD_INT 6
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: PUSH
4947: LD_VAR 0 1
4951: ARRAY
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 55
4960: GO 4921
4962: POP
4963: POP
// enable ;
4964: ENABLE
// end ; end_of_file
4965: PPOPN 2
4967: END
// every 20 20$00 trigger apemanNumber do
4968: LD_EXP 35
4972: IFFALSE 5005
4974: GO 4976
4976: DISABLE
// begin enable ;
4977: ENABLE
// if apeLevel >= 8 then
4978: LD_EXP 40
4982: PUSH
4983: LD_INT 8
4985: GREATEREQUAL
4986: IFFALSE 4991
// disable else
4988: DISABLE
4989: GO 5005
// apeLevel := apeLevel + 1 ;
4991: LD_ADDR_EXP 40
4995: PUSH
4996: LD_EXP 40
5000: PUSH
5001: LD_INT 1
5003: PLUS
5004: ST_TO_ADDR
// end ;
5005: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5006: LD_EXP 35
5010: PUSH
5011: LD_EXP 36
5015: LESS
5016: IFFALSE 5156
5018: GO 5020
5020: DISABLE
5021: LD_INT 0
5023: PPUSH
5024: PPUSH
5025: PPUSH
5026: PPUSH
// begin enable ;
5027: ENABLE
// for i := 1 to apemanPos do
5028: LD_ADDR_VAR 0 1
5032: PUSH
5033: DOUBLE
5034: LD_INT 1
5036: DEC
5037: ST_TO_ADDR
5038: LD_EXP 38
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5154
// begin if apemanPlayerCount [ i ] then
5046: LD_EXP 39
5050: PUSH
5051: LD_VAR 0 1
5055: ARRAY
5056: IFFALSE 5152
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5058: LD_EXP 39
5062: PUSH
5063: LD_VAR 0 1
5067: ARRAY
5068: PUSH
5069: LD_EXP 38
5073: PUSH
5074: LD_VAR 0 1
5078: ARRAY
5079: GREATER
5080: IFFALSE 5152
// begin ape := PrepareApeman ;
5082: LD_ADDR_VAR 0 2
5086: PUSH
5087: CALL 5659 0 0
5091: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5092: LD_VAR 0 2
5096: PPUSH
5097: LD_EXP 41
5101: PUSH
5102: LD_VAR 0 1
5106: ARRAY
5107: PPUSH
5108: LD_INT 0
5110: PPUSH
5111: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5115: LD_ADDR_EXP 38
5119: PUSH
5120: LD_EXP 38
5124: PPUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: LD_EXP 38
5134: PUSH
5135: LD_VAR 0 1
5139: ARRAY
5140: PUSH
5141: LD_VAR 0 2
5145: UNION
5146: PPUSH
5147: CALL_OW 1
5151: ST_TO_ADDR
// end ; end ; end ;
5152: GO 5043
5154: POP
5155: POP
// end ;
5156: PPOPN 4
5158: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5159: LD_INT 0
5161: PPUSH
5162: PPUSH
5163: PPUSH
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
// playersAmount := 0 ;
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_INT 0
5175: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5176: LD_ADDR_VAR 0 7
5180: PUSH
5181: LD_INT 8
5183: PUSH
5184: LD_INT 9
5186: PUSH
5187: LD_INT 11
5189: PUSH
5190: LD_INT 10
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5199: LD_ADDR_EXP 41
5203: PUSH
5204: LD_INT 0
5206: PUSH
5207: LD_INT 0
5209: PUSH
5210: LD_INT 0
5212: PUSH
5213: LD_INT 0
5215: PUSH
5216: LD_INT 0
5218: PUSH
5219: LD_INT 0
5221: PUSH
5222: LD_INT 0
5224: PUSH
5225: LD_INT 0
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: ST_TO_ADDR
// for j = 1 to Side_Positions do
5238: LD_ADDR_VAR 0 4
5242: PUSH
5243: DOUBLE
5244: LD_INT 1
5246: DEC
5247: ST_TO_ADDR
5248: LD_EXP 23
5252: PUSH
5253: FOR_TO
5254: IFFALSE 5321
// if Side_Positions [ j ] then
5256: LD_EXP 23
5260: PUSH
5261: LD_VAR 0 4
5265: ARRAY
5266: IFFALSE 5319
// begin playersAmount := playersAmount + 1 ;
5268: LD_ADDR_VAR 0 3
5272: PUSH
5273: LD_VAR 0 3
5277: PUSH
5278: LD_INT 1
5280: PLUS
5281: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5282: LD_ADDR_EXP 41
5286: PUSH
5287: LD_EXP 41
5291: PPUSH
5292: LD_VAR 0 4
5296: PPUSH
5297: LD_VAR 0 7
5301: PUSH
5302: LD_EXP 23
5306: PUSH
5307: LD_VAR 0 4
5311: ARRAY
5312: ARRAY
5313: PPUSH
5314: CALL_OW 1
5318: ST_TO_ADDR
// end ;
5319: GO 5253
5321: POP
5322: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5323: LD_ADDR_EXP 37
5327: PUSH
5328: LD_INT 3
5330: PUSH
5331: LD_EXP 15
5335: MUL
5336: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5337: LD_ADDR_EXP 35
5341: PUSH
5342: LD_VAR 0 3
5346: PUSH
5347: LD_EXP 37
5351: MUL
5352: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5353: LD_ADDR_EXP 36
5357: PUSH
5358: LD_EXP 35
5362: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5363: LD_ADDR_EXP 38
5367: PUSH
5368: LD_INT 0
5370: PUSH
5371: LD_INT 0
5373: PUSH
5374: LD_INT 0
5376: PUSH
5377: LD_INT 0
5379: PUSH
5380: LD_INT 0
5382: PUSH
5383: LD_INT 0
5385: PUSH
5386: LD_INT 0
5388: PUSH
5389: LD_INT 0
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5402: LD_ADDR_EXP 39
5406: PUSH
5407: LD_INT 0
5409: PUSH
5410: LD_INT 0
5412: PUSH
5413: LD_INT 0
5415: PUSH
5416: LD_INT 0
5418: PUSH
5419: LD_INT 0
5421: PUSH
5422: LD_INT 0
5424: PUSH
5425: LD_INT 0
5427: PUSH
5428: LD_INT 0
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: ST_TO_ADDR
// apeLevel := 1 ;
5441: LD_ADDR_EXP 40
5445: PUSH
5446: LD_INT 1
5448: ST_TO_ADDR
// if not apemanNumber then
5449: LD_EXP 35
5453: NOT
5454: IFFALSE 5458
// exit ;
5456: GO 5654
// for i := 1 to apemanPerPlayer do
5458: LD_ADDR_VAR 0 2
5462: PUSH
5463: DOUBLE
5464: LD_INT 1
5466: DEC
5467: ST_TO_ADDR
5468: LD_EXP 37
5472: PUSH
5473: FOR_TO
5474: IFFALSE 5652
// begin for j := 1 to Side_Positions do
5476: LD_ADDR_VAR 0 4
5480: PUSH
5481: DOUBLE
5482: LD_INT 1
5484: DEC
5485: ST_TO_ADDR
5486: LD_EXP 23
5490: PUSH
5491: FOR_TO
5492: IFFALSE 5648
// if Side_Positions [ j ] then
5494: LD_EXP 23
5498: PUSH
5499: LD_VAR 0 4
5503: ARRAY
5504: IFFALSE 5646
// begin pos := Side_Positions [ j ] ;
5506: LD_ADDR_VAR 0 6
5510: PUSH
5511: LD_EXP 23
5515: PUSH
5516: LD_VAR 0 4
5520: ARRAY
5521: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5522: LD_ADDR_EXP 39
5526: PUSH
5527: LD_EXP 39
5531: PPUSH
5532: LD_VAR 0 4
5536: PPUSH
5537: LD_EXP 39
5541: PUSH
5542: LD_VAR 0 4
5546: ARRAY
5547: PUSH
5548: LD_INT 1
5550: PLUS
5551: PPUSH
5552: CALL_OW 1
5556: ST_TO_ADDR
// ape := PrepareApeman ;
5557: LD_ADDR_VAR 0 5
5561: PUSH
5562: CALL 5659 0 0
5566: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5567: LD_ADDR_EXP 38
5571: PUSH
5572: LD_EXP 38
5576: PPUSH
5577: LD_VAR 0 4
5581: PPUSH
5582: LD_EXP 38
5586: PUSH
5587: LD_VAR 0 4
5591: ARRAY
5592: PPUSH
5593: LD_EXP 38
5597: PUSH
5598: LD_VAR 0 4
5602: ARRAY
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: PPUSH
5608: LD_VAR 0 5
5612: PPUSH
5613: CALL_OW 1
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5623: LD_VAR 0 5
5627: PPUSH
5628: LD_EXP 41
5632: PUSH
5633: LD_VAR 0 4
5637: ARRAY
5638: PPUSH
5639: LD_INT 0
5641: PPUSH
5642: CALL_OW 49
// end ;
5646: GO 5491
5648: POP
5649: POP
// end ;
5650: GO 5473
5652: POP
5653: POP
// end ;
5654: LD_VAR 0 1
5658: RET
// export function PrepareApeman ; var bonus ; begin
5659: LD_INT 0
5661: PPUSH
5662: PPUSH
// uc_side := 0 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 0
5670: ST_TO_ADDR
// uc_nation := 0 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 0
5678: ST_TO_ADDR
// InitHc ;
5679: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
5683: LD_ADDR_VAR 0 2
5687: PUSH
5688: LD_INT 1
5690: NEG
5691: PUSH
5692: LD_INT 0
5694: PUSH
5695: LD_INT 1
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_INT 25
5705: PUSH
5706: LD_INT 12
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PPUSH
5713: CALL_OW 69
5717: PUSH
5718: LD_INT 3
5720: MOD
5721: PUSH
5722: LD_INT 1
5724: PLUS
5725: ARRAY
5726: ST_TO_ADDR
// hc_class := class_apeman ;
5727: LD_ADDR_OWVAR 28
5731: PUSH
5732: LD_INT 12
5734: ST_TO_ADDR
// hc_gallery :=  ;
5735: LD_ADDR_OWVAR 33
5739: PUSH
5740: LD_STRING 
5742: ST_TO_ADDR
// hc_name :=  ;
5743: LD_ADDR_OWVAR 26
5747: PUSH
5748: LD_STRING 
5750: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5751: LD_ADDR_OWVAR 31
5755: PUSH
5756: LD_EXP 40
5760: PUSH
5761: LD_VAR 0 2
5765: PLUS
5766: PUSH
5767: LD_EXP 40
5771: PUSH
5772: LD_VAR 0 2
5776: PLUS
5777: PUSH
5778: LD_EXP 40
5782: PUSH
5783: LD_VAR 0 2
5787: PLUS
5788: PUSH
5789: LD_EXP 40
5793: PUSH
5794: LD_VAR 0 2
5798: PLUS
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5806: LD_ADDR_OWVAR 35
5810: PUSH
5811: LD_INT 10
5813: PUSH
5814: LD_VAR 0 2
5818: MUL
5819: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
5820: LD_ADDR_OWVAR 29
5824: PUSH
5825: LD_INT 12
5827: PUSH
5828: LD_INT 12
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: ST_TO_ADDR
// result := CreateHuman ;
5835: LD_ADDR_VAR 0 1
5839: PUSH
5840: CALL_OW 44
5844: ST_TO_ADDR
// end ;
5845: LD_VAR 0 1
5849: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
5850: LD_INT 0
5852: PPUSH
5853: PPUSH
5854: PPUSH
// if not ape then
5855: LD_VAR 0 1
5859: NOT
5860: IFFALSE 5864
// exit ;
5862: GO 5967
// for i = 1 to apemanPos do
5864: LD_ADDR_VAR 0 4
5868: PUSH
5869: DOUBLE
5870: LD_INT 1
5872: DEC
5873: ST_TO_ADDR
5874: LD_EXP 38
5878: PUSH
5879: FOR_TO
5880: IFFALSE 5914
// if ape in apemanPos [ i ] then
5882: LD_VAR 0 1
5886: PUSH
5887: LD_EXP 38
5891: PUSH
5892: LD_VAR 0 4
5896: ARRAY
5897: IN
5898: IFFALSE 5912
// begin s := i ;
5900: LD_ADDR_VAR 0 3
5904: PUSH
5905: LD_VAR 0 4
5909: ST_TO_ADDR
// break ;
5910: GO 5914
// end ;
5912: GO 5879
5914: POP
5915: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
5916: LD_ADDR_EXP 38
5920: PUSH
5921: LD_EXP 38
5925: PPUSH
5926: LD_VAR 0 3
5930: PPUSH
5931: LD_EXP 38
5935: PUSH
5936: LD_VAR 0 3
5940: ARRAY
5941: PUSH
5942: LD_VAR 0 1
5946: DIFF
5947: PPUSH
5948: CALL_OW 1
5952: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5953: LD_ADDR_EXP 35
5957: PUSH
5958: LD_EXP 35
5962: PUSH
5963: LD_INT 1
5965: MINUS
5966: ST_TO_ADDR
// end ; end_of_file
5967: LD_VAR 0 2
5971: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 266
5981: PUSH
5982: LD_INT 0
5984: PUSH
5985: LD_INT 1
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: IN
5992: IFFALSE 6017
// SetBName ( b , @ & GetSide ( b ) ) ;
5994: LD_VAR 0 1
5998: PPUSH
5999: LD_STRING @
6001: PUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 255
6011: STR
6012: PPUSH
6013: CALL_OW 500
// if def_game_rules then
6017: LD_EXP 47
6021: IFFALSE 6058
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6023: LD_VAR 0 1
6027: PPUSH
6028: LD_VAR 0 1
6032: PPUSH
6033: CALL_OW 266
6037: PPUSH
6038: LD_VAR 0 1
6042: PPUSH
6043: CALL_OW 255
6047: PPUSH
6048: LD_INT 0
6050: PPUSH
6051: LD_INT 1
6053: PPUSH
6054: CALL 15463 0 5
// end ;
6058: PPOPN 2
6060: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6061: LD_VAR 0 1
6065: PPUSH
6066: CALL_OW 266
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 1
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: IN
6081: IFFALSE 6106
// SetBName ( b , @ & GetSide ( b ) ) ;
6083: LD_VAR 0 1
6087: PPUSH
6088: LD_STRING @
6090: PUSH
6091: LD_VAR 0 1
6095: PPUSH
6096: CALL_OW 255
6100: STR
6101: PPUSH
6102: CALL_OW 500
// if def_game_rules then
6106: LD_EXP 47
6110: IFFALSE 6149
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6112: LD_VAR 0 1
6116: PPUSH
6117: LD_VAR 0 1
6121: PPUSH
6122: CALL_OW 266
6126: PPUSH
6127: LD_VAR 0 1
6131: PPUSH
6132: CALL_OW 255
6136: PPUSH
6137: LD_VAR 0 2
6141: PPUSH
6142: LD_INT 1
6144: PPUSH
6145: CALL 15463 0 5
// end ;
6149: PPOPN 3
6151: END
// on VehicleConstructed ( veh , fac ) do var side ;
6152: LD_INT 0
6154: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6155: LD_VAR 0 1
6159: PPUSH
6160: CALL_OW 263
6164: PUSH
6165: LD_INT 5
6167: EQUAL
6168: IFFALSE 6310
// begin side := GetSide ( veh ) ;
6170: LD_ADDR_VAR 0 3
6174: PUSH
6175: LD_VAR 0 1
6179: PPUSH
6180: CALL_OW 255
6184: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6185: LD_ADDR_EXP 38
6189: PUSH
6190: LD_EXP 38
6194: PPUSH
6195: LD_VAR 0 3
6199: PPUSH
6200: LD_EXP 38
6204: PUSH
6205: LD_VAR 0 3
6209: ARRAY
6210: PPUSH
6211: LD_INT 52
6213: PUSH
6214: EMPTY
6215: LIST
6216: PPUSH
6217: CALL_OW 72
6221: PUSH
6222: LD_INT 22
6224: PUSH
6225: LD_VAR 0 3
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 2
6236: PUSH
6237: LD_INT 33
6239: PUSH
6240: LD_INT 5
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 25
6249: PUSH
6250: LD_INT 12
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 15
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 16
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 17
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PPUSH
6299: CALL_OW 69
6303: UNION
6304: PPUSH
6305: CALL_OW 1
6309: ST_TO_ADDR
// end ; end ;
6310: PPOPN 3
6312: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6313: LD_INT 0
6315: PPUSH
6316: PPUSH
6317: PPUSH
6318: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 257
6328: PUSH
6329: LD_INT 12
6331: PUSH
6332: LD_INT 15
6334: PUSH
6335: LD_INT 17
6337: PUSH
6338: LD_INT 16
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: IN
6347: PUSH
6348: LD_VAR 0 1
6352: PPUSH
6353: CALL_OW 263
6357: PUSH
6358: LD_INT 5
6360: EQUAL
6361: OR
6362: IFFALSE 6373
// ApeKilled ( j ) ;
6364: LD_VAR 0 1
6368: PPUSH
6369: CALL 5850 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6373: LD_VAR 0 1
6377: PPUSH
6378: CALL_OW 266
6382: PUSH
6383: LD_INT 0
6385: PUSH
6386: LD_INT 1
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: IN
6393: IFFALSE 6475
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6395: LD_ADDR_VAR 0 4
6399: PUSH
6400: LD_EXP 23
6404: PUSH
6405: LD_VAR 0 1
6409: PPUSH
6410: CALL_OW 255
6414: ARRAY
6415: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6416: LD_ADDR_VAR 0 2
6420: PUSH
6421: LD_EXP 31
6425: PUSH
6426: LD_VAR 0 4
6430: ARRAY
6431: PUSH
6432: LD_INT 1
6434: ARRAY
6435: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6436: LD_ADDR_VAR 0 3
6440: PUSH
6441: LD_EXP 31
6445: PUSH
6446: LD_VAR 0 4
6450: ARRAY
6451: PUSH
6452: LD_INT 2
6454: ARRAY
6455: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6456: LD_VAR 0 2
6460: PPUSH
6461: LD_VAR 0 3
6465: PPUSH
6466: CALL_OW 420
6470: PPUSH
6471: CALL_OW 419
// end ; if def_game_rules then
6475: LD_EXP 47
6479: IFFALSE 6578
// if ( GetType ( j ) = 3 ) then
6481: LD_VAR 0 1
6485: PPUSH
6486: CALL_OW 247
6490: PUSH
6491: LD_INT 3
6493: EQUAL
6494: IFFALSE 6534
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 266
6510: PPUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 255
6520: PPUSH
6521: LD_INT 0
6523: PPUSH
6524: LD_INT 1
6526: NEG
6527: PPUSH
6528: CALL 15463 0 5
6532: GO 6578
// if ( GetChassis ( j ) = 25 ) then
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 265
6543: PUSH
6544: LD_INT 25
6546: EQUAL
6547: IFFALSE 6578
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6549: LD_VAR 0 1
6553: PPUSH
6554: LD_INT 37
6556: PPUSH
6557: LD_VAR 0 1
6561: PPUSH
6562: CALL_OW 255
6566: PPUSH
6567: LD_INT 0
6569: PPUSH
6570: LD_INT 1
6572: NEG
6573: PPUSH
6574: CALL 15463 0 5
// end ;
6578: PPOPN 5
6580: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6581: LD_EXP 47
6585: PUSH
6586: LD_VAR 0 1
6590: PPUSH
6591: CALL_OW 265
6595: PUSH
6596: LD_INT 25
6598: EQUAL
6599: AND
6600: IFFALSE 6632
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6602: LD_VAR 0 1
6606: PPUSH
6607: LD_INT 37
6609: PPUSH
6610: LD_VAR 0 1
6614: PPUSH
6615: CALL_OW 255
6619: PPUSH
6620: LD_VAR 0 3
6624: PPUSH
6625: LD_INT 1
6627: PPUSH
6628: CALL 15463 0 5
// end ;
6632: PPOPN 4
6634: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6635: LD_VAR 0 1
6639: PPUSH
6640: LD_VAR 0 2
6644: PPUSH
6645: LD_VAR 0 3
6649: PPUSH
6650: LD_OWVAR 2
6654: PPUSH
6655: CALL 16995 0 4
6659: PPOPN 3
6661: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
6662: LD_INT 0
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
// artefact_number := 3 ;
6670: LD_ADDR_EXP 42
6674: PUSH
6675: LD_INT 3
6677: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
6678: LD_ADDR_EXP 43
6682: PUSH
6683: LD_INT 1
6685: PUSH
6686: LD_INT 0
6688: PUSH
6689: LD_INT 2
6691: PUSH
6692: LD_INT 0
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
6705: LD_ADDR_EXP 44
6709: PUSH
6710: LD_INT 1
6712: PUSH
6713: LD_INT 3
6715: PUSH
6716: LD_INT 5
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
6724: LD_ADDR_VAR 0 2
6728: PUSH
6729: LD_INT 1
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 2
6741: PUSH
6742: LD_INT 5
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 3
6751: PUSH
6752: LD_INT 9
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: LIST
6763: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
6764: LD_ADDR_VAR 0 3
6768: PUSH
6769: LD_INT 3
6771: PUSH
6772: LD_INT 4
6774: PUSH
6775: LD_INT 3
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
6783: LD_ADDR_VAR 0 4
6787: PUSH
6788: LD_INT 150
6790: PUSH
6791: LD_INT 250
6793: PUSH
6794: LD_INT 400
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
6802: LD_ADDR_VAR 0 5
6806: PUSH
6807: LD_INT 2
6809: PUSH
6810: LD_INT 10
6812: PUSH
6813: LD_INT 20
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
6821: LD_ADDR_VAR 0 6
6825: PUSH
6826: LD_INT 6
6828: PUSH
6829: LD_INT 18
6831: PUSH
6832: LD_INT 50
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
6840: LD_VAR 0 2
6844: PPUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: LD_VAR 0 4
6854: PPUSH
6855: LD_VAR 0 5
6859: PPUSH
6860: LD_VAR 0 6
6864: PPUSH
6865: CALL 6874 0 5
// end ;
6869: LD_VAR 0 1
6873: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
6874: LD_INT 0
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
// disable ( 1 ) ;
6881: LD_INT 1
6883: DISABLE_MARKED
// disable ( 5 ) ;
6884: LD_INT 5
6886: DISABLE_MARKED
// disable ( 6 ) ;
6887: LD_INT 6
6889: DISABLE_MARKED
// disable ( 7 ) ;
6890: LD_INT 7
6892: DISABLE_MARKED
// for side = 1 to 8 do
6893: LD_ADDR_VAR 0 9
6897: PUSH
6898: DOUBLE
6899: LD_INT 1
6901: DEC
6902: ST_TO_ADDR
6903: LD_INT 8
6905: PUSH
6906: FOR_TO
6907: IFFALSE 6923
// SetArtifactRes ( side , state_enabled ) ;
6909: LD_VAR 0 9
6913: PPUSH
6914: LD_INT 1
6916: PPUSH
6917: CALL_OW 467
6921: GO 6906
6923: POP
6924: POP
// for un = 0 to ( artefact_number - 1 ) do
6925: LD_ADDR_VAR 0 7
6929: PUSH
6930: DOUBLE
6931: LD_INT 0
6933: DEC
6934: ST_TO_ADDR
6935: LD_EXP 42
6939: PUSH
6940: LD_INT 1
6942: MINUS
6943: PUSH
6944: FOR_TO
6945: IFFALSE 7343
// begin base := un * 100 ;
6947: LD_ADDR_VAR 0 10
6951: PUSH
6952: LD_VAR 0 7
6956: PUSH
6957: LD_INT 100
6959: MUL
6960: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
6961: LD_VAR 0 10
6965: PUSH
6966: LD_INT 1
6968: PLUS
6969: PPUSH
6970: LD_VAR 0 1
6974: PUSH
6975: LD_VAR 0 7
6979: PUSH
6980: LD_INT 1
6982: PLUS
6983: ARRAY
6984: PUSH
6985: LD_INT 1
6987: ARRAY
6988: PPUSH
6989: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
6993: LD_VAR 0 10
6997: PUSH
6998: LD_INT 2
7000: PLUS
7001: PPUSH
7002: LD_VAR 0 1
7006: PUSH
7007: LD_VAR 0 7
7011: PUSH
7012: LD_INT 1
7014: PLUS
7015: ARRAY
7016: PUSH
7017: LD_INT 2
7019: ARRAY
7020: PPUSH
7021: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7025: LD_VAR 0 10
7029: PUSH
7030: LD_INT 3
7032: PLUS
7033: PPUSH
7034: LD_VAR 0 2
7038: PUSH
7039: LD_VAR 0 7
7043: PUSH
7044: LD_INT 1
7046: PLUS
7047: ARRAY
7048: PPUSH
7049: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7053: LD_VAR 0 10
7057: PUSH
7058: LD_INT 5
7060: PLUS
7061: PPUSH
7062: LD_VAR 0 3
7066: PUSH
7067: LD_VAR 0 7
7071: PUSH
7072: LD_INT 1
7074: PLUS
7075: ARRAY
7076: PPUSH
7077: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7081: LD_VAR 0 10
7085: PUSH
7086: LD_INT 6
7088: PLUS
7089: PPUSH
7090: LD_VAR 0 4
7094: PUSH
7095: LD_VAR 0 7
7099: PUSH
7100: LD_INT 1
7102: PLUS
7103: ARRAY
7104: PPUSH
7105: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7109: LD_VAR 0 10
7113: PUSH
7114: LD_INT 7
7116: PLUS
7117: PPUSH
7118: LD_VAR 0 5
7122: PUSH
7123: LD_VAR 0 7
7127: PUSH
7128: LD_INT 1
7130: PLUS
7131: ARRAY
7132: PPUSH
7133: CALL_OW 109
// SetTag ( base + 08 , false ) ;
7137: LD_VAR 0 10
7141: PUSH
7142: LD_INT 8
7144: PLUS
7145: PPUSH
7146: LD_INT 0
7148: PPUSH
7149: CALL_OW 109
// SetTag ( base + 09 , false ) ;
7153: LD_VAR 0 10
7157: PUSH
7158: LD_INT 9
7160: PLUS
7161: PPUSH
7162: LD_INT 0
7164: PPUSH
7165: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
7169: LD_VAR 0 10
7173: PUSH
7174: LD_INT 11
7176: PLUS
7177: PPUSH
7178: LD_INT 0
7180: PPUSH
7181: CALL_OW 109
// SetTag ( base + 12 , false ) ;
7185: LD_VAR 0 10
7189: PUSH
7190: LD_INT 12
7192: PLUS
7193: PPUSH
7194: LD_INT 0
7196: PPUSH
7197: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7201: LD_VAR 0 10
7205: PUSH
7206: LD_INT 13
7208: PLUS
7209: PPUSH
7210: LD_INT 0
7212: PPUSH
7213: CALL_OW 109
// for i = 0 to 7 do
7217: LD_ADDR_VAR 0 8
7221: PUSH
7222: DOUBLE
7223: LD_INT 0
7225: DEC
7226: ST_TO_ADDR
7227: LD_INT 7
7229: PUSH
7230: FOR_TO
7231: IFFALSE 7339
// begin SetTag ( base + i * 10 + 21 , false ) ;
7233: LD_VAR 0 10
7237: PUSH
7238: LD_VAR 0 8
7242: PUSH
7243: LD_INT 10
7245: MUL
7246: PLUS
7247: PUSH
7248: LD_INT 21
7250: PLUS
7251: PPUSH
7252: LD_INT 0
7254: PPUSH
7255: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
7259: LD_VAR 0 10
7263: PUSH
7264: LD_VAR 0 8
7268: PUSH
7269: LD_INT 10
7271: MUL
7272: PLUS
7273: PUSH
7274: LD_INT 22
7276: PLUS
7277: PPUSH
7278: LD_INT 0
7280: PPUSH
7281: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
7285: LD_VAR 0 10
7289: PUSH
7290: LD_VAR 0 8
7294: PUSH
7295: LD_INT 10
7297: MUL
7298: PLUS
7299: PUSH
7300: LD_INT 23
7302: PLUS
7303: PPUSH
7304: LD_INT 0
7306: PPUSH
7307: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
7311: LD_VAR 0 10
7315: PUSH
7316: LD_VAR 0 8
7320: PUSH
7321: LD_INT 10
7323: MUL
7324: PLUS
7325: PUSH
7326: LD_INT 25
7328: PLUS
7329: PPUSH
7330: LD_INT 0
7332: PPUSH
7333: CALL_OW 109
// end ;
7337: GO 7230
7339: POP
7340: POP
// end ;
7341: GO 6944
7343: POP
7344: POP
// enable ( 20 ) ;
7345: LD_INT 20
7347: ENABLE_MARKED
// labs_in_use := [ ] ;
7348: LD_ADDR_EXP 45
7352: PUSH
7353: EMPTY
7354: ST_TO_ADDR
// if def_artefact_one then
7355: LD_EXP 1
7359: IFFALSE 7386
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
7361: LD_INT 4
7363: PPUSH
7364: LD_EXP 44
7368: PUSH
7369: LD_INT 1
7371: ARRAY
7372: PPUSH
7373: LD_INT 16
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 59
// enable ( 5 ) ;
7383: LD_INT 5
7385: ENABLE_MARKED
// end ; if def_artefact_two then
7386: LD_EXP 2
7390: IFFALSE 7417
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
7392: LD_INT 4
7394: PPUSH
7395: LD_EXP 44
7399: PUSH
7400: LD_INT 2
7402: ARRAY
7403: PPUSH
7404: LD_INT 16
7406: PPUSH
7407: LD_INT 0
7409: PPUSH
7410: CALL_OW 59
// enable ( 6 ) ;
7414: LD_INT 6
7416: ENABLE_MARKED
// end ; if def_artefact_three then
7417: LD_EXP 3
7421: IFFALSE 7448
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
7423: LD_INT 4
7425: PPUSH
7426: LD_EXP 44
7430: PUSH
7431: LD_INT 3
7433: ARRAY
7434: PPUSH
7435: LD_INT 16
7437: PPUSH
7438: LD_INT 0
7440: PPUSH
7441: CALL_OW 59
// enable ( 7 ) ;
7445: LD_INT 7
7447: ENABLE_MARKED
// end ; end ;
7448: LD_VAR 0 6
7452: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
7453: LD_INT 0
7455: PPUSH
7456: PPUSH
// begin art := artefact_num [ size ] ;
7457: LD_ADDR_VAR 0 3
7461: PUSH
7462: LD_EXP 43
7466: PUSH
7467: LD_VAR 0 2
7471: ARRAY
7472: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7473: LD_ADDR_VAR 0 4
7477: PUSH
7478: LD_VAR 0 3
7482: PUSH
7483: LD_INT 1
7485: MINUS
7486: PUSH
7487: LD_INT 100
7489: MUL
7490: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
7491: LD_VAR 0 4
7495: PUSH
7496: LD_INT 9
7498: PLUS
7499: PPUSH
7500: LD_INT 0
7502: PPUSH
7503: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7507: LD_VAR 0 4
7511: PUSH
7512: LD_INT 13
7514: PLUS
7515: PPUSH
7516: LD_INT 0
7518: PPUSH
7519: CALL_OW 109
// Init_Lab ( art ) ;
7523: LD_VAR 0 3
7527: PPUSH
7528: CALL 9004 0 1
// end ;
7532: PPOPN 4
7534: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
7535: LD_INT 0
7537: PPUSH
7538: PPUSH
7539: PPUSH
// begin art := artefact_num [ size ] ;
7540: LD_ADDR_VAR 0 3
7544: PUSH
7545: LD_EXP 43
7549: PUSH
7550: LD_VAR 0 2
7554: ARRAY
7555: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7556: LD_ADDR_VAR 0 4
7560: PUSH
7561: LD_VAR 0 3
7565: PUSH
7566: LD_INT 1
7568: MINUS
7569: PUSH
7570: LD_INT 100
7572: MUL
7573: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
7574: LD_VAR 0 4
7578: PUSH
7579: LD_INT 9
7581: PLUS
7582: PPUSH
7583: LD_INT 1
7585: PPUSH
7586: CALL_OW 109
// SetTag ( base + 13 , un ) ;
7590: LD_VAR 0 4
7594: PUSH
7595: LD_INT 13
7597: PLUS
7598: PPUSH
7599: LD_VAR 0 1
7603: PPUSH
7604: CALL_OW 109
// if GetTag ( base + 11 ) then
7608: LD_VAR 0 4
7612: PUSH
7613: LD_INT 11
7615: PLUS
7616: PPUSH
7617: CALL_OW 110
7621: IFFALSE 7784
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
7623: LD_ADDR_VAR 0 5
7627: PUSH
7628: LD_VAR 0 4
7632: PUSH
7633: LD_INT 11
7635: PLUS
7636: PPUSH
7637: CALL_OW 110
7641: PPUSH
7642: CALL_OW 255
7646: ST_TO_ADDR
// if GetTag ( base + 12 ) then
7647: LD_VAR 0 4
7651: PUSH
7652: LD_INT 12
7654: PLUS
7655: PPUSH
7656: CALL_OW 110
7660: IFFALSE 7728
// begin ComCancel ( GetTag ( base + 11 ) ) ;
7662: LD_VAR 0 4
7666: PUSH
7667: LD_INT 11
7669: PLUS
7670: PPUSH
7671: CALL_OW 110
7675: PPUSH
7676: CALL_OW 127
// wait ( 5 ) ;
7680: LD_INT 5
7682: PPUSH
7683: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
7687: LD_ADDR_EXP 45
7691: PUSH
7692: LD_EXP 45
7696: PUSH
7697: LD_VAR 0 4
7701: PUSH
7702: LD_INT 11
7704: PLUS
7705: PPUSH
7706: CALL_OW 110
7710: DIFF
7711: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
7712: LD_VAR 0 4
7716: PUSH
7717: LD_INT 12
7719: PLUS
7720: PPUSH
7721: LD_INT 0
7723: PPUSH
7724: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
7728: LD_VAR 0 4
7732: PUSH
7733: LD_VAR 0 5
7737: PUSH
7738: LD_INT 10
7740: MUL
7741: PLUS
7742: PUSH
7743: LD_INT 11
7745: PLUS
7746: PPUSH
7747: CALL_OW 110
7751: NOT
7752: IFFALSE 7768
// DeInit_Lab ( side , art ) ;
7754: LD_VAR 0 5
7758: PPUSH
7759: LD_VAR 0 3
7763: PPUSH
7764: CALL 9540 0 2
// SetTag ( base + 11 , 0 ) ;
7768: LD_VAR 0 4
7772: PUSH
7773: LD_INT 11
7775: PLUS
7776: PPUSH
7777: LD_INT 0
7779: PPUSH
7780: CALL_OW 109
// end ; end ;
7784: PPOPN 5
7786: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
7787: LD_INT 0
7789: PPUSH
7790: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7791: LD_ADDR_VAR 0 3
7795: PUSH
7796: LD_VAR 0 1
7800: PPUSH
7801: CALL_OW 255
7805: PUSH
7806: LD_INT 1
7808: MINUS
7809: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7810: LD_ADDR_VAR 0 2
7814: PUSH
7815: DOUBLE
7816: LD_INT 0
7818: DEC
7819: ST_TO_ADDR
7820: LD_EXP 42
7824: PUSH
7825: LD_INT 1
7827: MINUS
7828: PUSH
7829: FOR_TO
7830: IFFALSE 7872
// if lab = GetTag ( un * 100 + 11 ) then
7832: LD_VAR 0 1
7836: PUSH
7837: LD_VAR 0 2
7841: PUSH
7842: LD_INT 100
7844: MUL
7845: PUSH
7846: LD_INT 11
7848: PLUS
7849: PPUSH
7850: CALL_OW 110
7854: EQUAL
7855: IFFALSE 7870
// Init_Lab ( un + 1 ) ;
7857: LD_VAR 0 2
7861: PUSH
7862: LD_INT 1
7864: PLUS
7865: PPUSH
7866: CALL 9004 0 1
7870: GO 7829
7872: POP
7873: POP
// end ;
7874: PPOPN 3
7876: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
7877: LD_INT 0
7879: PPUSH
7880: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7881: LD_ADDR_VAR 0 4
7885: PUSH
7886: LD_VAR 0 1
7890: PPUSH
7891: CALL_OW 255
7895: PUSH
7896: LD_INT 1
7898: MINUS
7899: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7900: LD_ADDR_VAR 0 3
7904: PUSH
7905: DOUBLE
7906: LD_INT 0
7908: DEC
7909: ST_TO_ADDR
7910: LD_EXP 42
7914: PUSH
7915: LD_INT 1
7917: MINUS
7918: PUSH
7919: FOR_TO
7920: IFFALSE 8038
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
7922: LD_VAR 0 3
7926: PUSH
7927: LD_INT 100
7929: MUL
7930: PUSH
7931: LD_INT 11
7933: PLUS
7934: PPUSH
7935: CALL_OW 110
7939: PUSH
7940: LD_VAR 0 1
7944: EQUAL
7945: PUSH
7946: LD_VAR 0 3
7950: PUSH
7951: LD_INT 100
7953: MUL
7954: PUSH
7955: LD_INT 12
7957: PLUS
7958: PPUSH
7959: CALL_OW 110
7963: AND
7964: IFFALSE 8036
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
7966: LD_VAR 0 3
7970: PUSH
7971: LD_INT 100
7973: MUL
7974: PUSH
7975: LD_VAR 0 4
7979: PUSH
7980: LD_INT 10
7982: MUL
7983: PLUS
7984: PUSH
7985: LD_INT 22
7987: PLUS
7988: PPUSH
7989: LD_VAR 0 2
7993: PPUSH
7994: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
7998: LD_VAR 0 3
8002: PUSH
8003: LD_INT 100
8005: MUL
8006: PUSH
8007: LD_INT 12
8009: PLUS
8010: PPUSH
8011: LD_INT 0
8013: PPUSH
8014: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8018: LD_ADDR_EXP 45
8022: PUSH
8023: LD_EXP 45
8027: PUSH
8028: LD_VAR 0 1
8032: DIFF
8033: ST_TO_ADDR
// break ;
8034: GO 8038
// end ;
8036: GO 7919
8038: POP
8039: POP
// Update_Artefact ( lab ) ;
8040: LD_VAR 0 1
8044: PPUSH
8045: CALL 9679 0 1
// end ;
8049: PPOPN 4
8051: END
// on SpecResearchComplete ( lab ) do var un , side ;
8052: LD_INT 0
8054: PPUSH
8055: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8056: LD_ADDR_VAR 0 3
8060: PUSH
8061: LD_VAR 0 1
8065: PPUSH
8066: CALL_OW 255
8070: PUSH
8071: LD_INT 1
8073: MINUS
8074: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8075: LD_ADDR_VAR 0 2
8079: PUSH
8080: DOUBLE
8081: LD_INT 0
8083: DEC
8084: ST_TO_ADDR
8085: LD_EXP 42
8089: PUSH
8090: LD_INT 1
8092: MINUS
8093: PUSH
8094: FOR_TO
8095: IFFALSE 8241
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8097: LD_VAR 0 2
8101: PUSH
8102: LD_INT 100
8104: MUL
8105: PUSH
8106: LD_INT 11
8108: PLUS
8109: PPUSH
8110: CALL_OW 110
8114: PUSH
8115: LD_VAR 0 1
8119: EQUAL
8120: PUSH
8121: LD_VAR 0 2
8125: PUSH
8126: LD_INT 100
8128: MUL
8129: PUSH
8130: LD_INT 12
8132: PLUS
8133: PPUSH
8134: CALL_OW 110
8138: AND
8139: IFFALSE 8239
// begin SetTag ( un * 100 + 12 , false ) ;
8141: LD_VAR 0 2
8145: PUSH
8146: LD_INT 100
8148: MUL
8149: PUSH
8150: LD_INT 12
8152: PLUS
8153: PPUSH
8154: LD_INT 0
8156: PPUSH
8157: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
8161: LD_VAR 0 2
8165: PUSH
8166: LD_INT 100
8168: MUL
8169: PUSH
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 10
8177: MUL
8178: PLUS
8179: PUSH
8180: LD_INT 21
8182: PLUS
8183: PPUSH
8184: LD_INT 1
8186: PPUSH
8187: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
8191: LD_VAR 0 2
8195: PUSH
8196: LD_INT 100
8198: MUL
8199: PUSH
8200: LD_VAR 0 3
8204: PUSH
8205: LD_INT 10
8207: MUL
8208: PLUS
8209: PUSH
8210: LD_INT 25
8212: PLUS
8213: PPUSH
8214: LD_VAR 0 1
8218: PPUSH
8219: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8223: LD_ADDR_EXP 45
8227: PUSH
8228: LD_EXP 45
8232: PUSH
8233: LD_VAR 0 1
8237: DIFF
8238: ST_TO_ADDR
// end ;
8239: GO 8094
8241: POP
8242: POP
// Update_Artefact ( lab ) ;
8243: LD_VAR 0 1
8247: PPUSH
8248: CALL 9679 0 1
// end ;
8252: PPOPN 3
8254: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
8255: LD_INT 0
8257: PPUSH
8258: PPUSH
8259: PPUSH
8260: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
8261: LD_ADDR_VAR 0 7
8265: PUSH
8266: LD_VAR 0 2
8270: PUSH
8271: LD_INT 1
8273: MINUS
8274: PUSH
8275: LD_INT 3
8277: MOD
8278: PUSH
8279: LD_INT 1
8281: PLUS
8282: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8283: LD_ADDR_VAR 0 8
8287: PUSH
8288: LD_VAR 0 7
8292: PUSH
8293: LD_INT 1
8295: MINUS
8296: PUSH
8297: LD_INT 100
8299: MUL
8300: ST_TO_ADDR
// if number <= 3 then
8301: LD_VAR 0 2
8305: PUSH
8306: LD_INT 3
8308: LESSEQUAL
8309: IFFALSE 8541
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
8311: LD_VAR 0 8
8315: PUSH
8316: LD_INT 11
8318: PLUS
8319: PPUSH
8320: CALL_OW 110
8324: PPUSH
8325: LD_VAR 0 8
8329: PUSH
8330: LD_INT 5
8332: PLUS
8333: PPUSH
8334: CALL_OW 110
8338: PPUSH
8339: LD_INT 1
8341: PPUSH
8342: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
8346: LD_VAR 0 8
8350: PUSH
8351: LD_INT 11
8353: PLUS
8354: PPUSH
8355: CALL_OW 110
8359: PPUSH
8360: LD_VAR 0 8
8364: PUSH
8365: LD_VAR 0 1
8369: PUSH
8370: LD_INT 10
8372: MUL
8373: PLUS
8374: PUSH
8375: LD_INT 12
8377: PLUS
8378: PPUSH
8379: CALL_OW 110
8383: PPUSH
8384: CALL_OW 329
// SetTag ( base + 12 , true ) ;
8388: LD_VAR 0 8
8392: PUSH
8393: LD_INT 12
8395: PLUS
8396: PPUSH
8397: LD_INT 1
8399: PPUSH
8400: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
8404: LD_ADDR_EXP 45
8408: PUSH
8409: LD_EXP 45
8413: PUSH
8414: LD_VAR 0 8
8418: PUSH
8419: LD_INT 11
8421: PLUS
8422: PPUSH
8423: CALL_OW 110
8427: ADD
8428: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8429: LD_ADDR_VAR 0 5
8433: PUSH
8434: DOUBLE
8435: LD_INT 0
8437: DEC
8438: ST_TO_ADDR
8439: LD_EXP 42
8443: PUSH
8444: LD_INT 1
8446: MINUS
8447: PUSH
8448: FOR_TO
8449: IFFALSE 8537
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
8451: LD_VAR 0 8
8455: PUSH
8456: LD_INT 11
8458: PLUS
8459: PPUSH
8460: CALL_OW 110
8464: PUSH
8465: LD_VAR 0 5
8469: PUSH
8470: LD_INT 100
8472: MUL
8473: PUSH
8474: LD_INT 11
8476: PLUS
8477: PPUSH
8478: CALL_OW 110
8482: PUSH
8483: LD_VAR 0 5
8487: PUSH
8488: LD_INT 100
8490: MUL
8491: PUSH
8492: LD_VAR 0 1
8496: PUSH
8497: LD_INT 10
8499: MUL
8500: PLUS
8501: PUSH
8502: LD_INT 15
8504: PLUS
8505: PPUSH
8506: CALL_OW 110
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: IN
8515: IFFALSE 8535
// DeInit_Lab ( side , un + 1 ) ;
8517: LD_VAR 0 1
8521: PPUSH
8522: LD_VAR 0 5
8526: PUSH
8527: LD_INT 1
8529: PLUS
8530: PPUSH
8531: CALL 9540 0 2
8535: GO 8448
8537: POP
8538: POP
// end else
8539: GO 8715
// begin succes := false ;
8541: LD_ADDR_VAR 0 6
8545: PUSH
8546: LD_INT 0
8548: ST_TO_ADDR
// case art of 1 :
8549: LD_VAR 0 7
8553: PUSH
8554: LD_INT 1
8556: DOUBLE
8557: EQUAL
8558: IFTRUE 8562
8560: GO 8590
8562: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
8563: LD_ADDR_VAR 0 6
8567: PUSH
8568: LD_VAR 0 1
8572: PPUSH
8573: LD_VAR 0 3
8577: PPUSH
8578: LD_VAR 0 4
8582: PPUSH
8583: CALL 10112 0 3
8587: ST_TO_ADDR
8588: GO 8658
8590: LD_INT 2
8592: DOUBLE
8593: EQUAL
8594: IFTRUE 8598
8596: GO 8621
8598: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
8599: LD_ADDR_VAR 0 6
8603: PUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: LD_VAR 0 3
8613: PPUSH
8614: CALL 10350 0 2
8618: ST_TO_ADDR
8619: GO 8658
8621: LD_INT 3
8623: DOUBLE
8624: EQUAL
8625: IFTRUE 8629
8627: GO 8657
8629: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
8630: LD_ADDR_VAR 0 6
8634: PUSH
8635: LD_VAR 0 1
8639: PPUSH
8640: LD_VAR 0 3
8644: PPUSH
8645: LD_VAR 0 4
8649: PPUSH
8650: CALL 10746 0 3
8654: ST_TO_ADDR
8655: GO 8658
8657: POP
// if succes then
8658: LD_VAR 0 6
8662: IFFALSE 8715
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
8664: LD_VAR 0 8
8668: PUSH
8669: LD_VAR 0 1
8673: PUSH
8674: LD_INT 10
8676: MUL
8677: PLUS
8678: PUSH
8679: LD_INT 13
8681: PLUS
8682: PPUSH
8683: LD_VAR 0 8
8687: PUSH
8688: LD_INT 7
8690: PLUS
8691: PPUSH
8692: CALL_OW 110
8696: PPUSH
8697: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
8701: LD_VAR 0 1
8705: PPUSH
8706: LD_VAR 0 7
8710: PPUSH
8711: CALL 8718 0 2
// end ; end ; end ;
8715: PPOPN 8
8717: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
8718: LD_INT 0
8720: PPUSH
8721: PPUSH
8722: PPUSH
// base := ( art - 1 ) * 100 ;
8723: LD_ADDR_VAR 0 4
8727: PUSH
8728: LD_VAR 0 2
8732: PUSH
8733: LD_INT 1
8735: MINUS
8736: PUSH
8737: LD_INT 100
8739: MUL
8740: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8741: LD_ADDR_VAR 0 5
8745: PUSH
8746: LD_VAR 0 4
8750: PUSH
8751: LD_VAR 0 1
8755: PUSH
8756: LD_INT 10
8758: MUL
8759: PLUS
8760: PUSH
8761: LD_INT 15
8763: PLUS
8764: PPUSH
8765: CALL_OW 110
8769: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
8770: LD_VAR 0 5
8774: PUSH
8775: LD_VAR 0 5
8779: PUSH
8780: LD_EXP 45
8784: IN
8785: NOT
8786: AND
8787: IFFALSE 8845
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
8789: LD_VAR 0 1
8793: PPUSH
8794: LD_VAR 0 4
8798: PUSH
8799: LD_INT 1
8801: PLUS
8802: PUSH
8803: LD_VAR 0 4
8807: PUSH
8808: LD_VAR 0 1
8812: PUSH
8813: LD_INT 10
8815: MUL
8816: PLUS
8817: PUSH
8818: LD_INT 11
8820: PLUS
8821: PPUSH
8822: CALL_OW 110
8826: PLUS
8827: PPUSH
8828: CALL_OW 110
8832: PPUSH
8833: LD_INT 1
8835: PPUSH
8836: LD_VAR 0 5
8840: PPUSH
8841: CALL_OW 468
// end ;
8845: LD_VAR 0 3
8849: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
8850: LD_INT 0
8852: PPUSH
8853: PPUSH
8854: PPUSH
// base := ( art - 1 ) * 100 ;
8855: LD_ADDR_VAR 0 4
8859: PUSH
8860: LD_VAR 0 2
8864: PUSH
8865: LD_INT 1
8867: MINUS
8868: PUSH
8869: LD_INT 100
8871: MUL
8872: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8873: LD_ADDR_VAR 0 5
8877: PUSH
8878: LD_VAR 0 4
8882: PUSH
8883: LD_VAR 0 1
8887: PUSH
8888: LD_INT 10
8890: MUL
8891: PLUS
8892: PUSH
8893: LD_INT 15
8895: PLUS
8896: PPUSH
8897: CALL_OW 110
8901: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
8902: LD_VAR 0 5
8906: PUSH
8907: LD_VAR 0 5
8911: PUSH
8912: LD_EXP 45
8916: IN
8917: NOT
8918: AND
8919: PUSH
8920: LD_VAR 0 5
8924: PPUSH
8925: CALL_OW 313
8929: AND
8930: IFFALSE 8999
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
8932: LD_VAR 0 1
8936: PPUSH
8937: LD_VAR 0 4
8941: PUSH
8942: LD_INT 1
8944: PLUS
8945: PUSH
8946: LD_VAR 0 4
8950: PUSH
8951: LD_VAR 0 1
8955: PUSH
8956: LD_INT 10
8958: MUL
8959: PLUS
8960: PUSH
8961: LD_INT 11
8963: PLUS
8964: PPUSH
8965: CALL_OW 110
8969: PLUS
8970: PPUSH
8971: CALL_OW 110
8975: PPUSH
8976: LD_VAR 0 4
8980: PUSH
8981: LD_INT 3
8983: PLUS
8984: PPUSH
8985: CALL_OW 110
8989: PPUSH
8990: LD_VAR 0 5
8994: PPUSH
8995: CALL_OW 468
// end ;
8999: LD_VAR 0 3
9003: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9004: LD_INT 0
9006: PPUSH
9007: PPUSH
9008: PPUSH
9009: PPUSH
9010: PPUSH
9011: PPUSH
9012: PPUSH
9013: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9014: LD_ADDR_VAR 0 8
9018: PUSH
9019: LD_EXP 44
9023: PUSH
9024: LD_VAR 0 1
9028: ARRAY
9029: PPUSH
9030: CALL_OW 469
9034: ST_TO_ADDR
// if not art_hex then
9035: LD_VAR 0 8
9039: NOT
9040: IFFALSE 9044
// exit ;
9042: GO 9535
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9044: LD_ADDR_VAR 0 3
9048: PUSH
9049: LD_INT 2
9051: PUSH
9052: LD_INT 30
9054: PUSH
9055: LD_INT 6
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PUSH
9062: LD_INT 30
9064: PUSH
9065: LD_INT 7
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 30
9074: PUSH
9075: LD_INT 8
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: PPUSH
9091: CALL_OW 69
9095: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9096: LD_ADDR_VAR 0 9
9100: PUSH
9101: LD_VAR 0 3
9105: PPUSH
9106: LD_VAR 0 8
9110: PUSH
9111: LD_INT 1
9113: ARRAY
9114: PPUSH
9115: LD_VAR 0 8
9119: PUSH
9120: LD_INT 2
9122: ARRAY
9123: PPUSH
9124: CALL_OW 73
9128: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9129: LD_ADDR_VAR 0 6
9133: PUSH
9134: LD_VAR 0 9
9138: PPUSH
9139: LD_VAR 0 8
9143: PUSH
9144: LD_INT 1
9146: ARRAY
9147: PPUSH
9148: LD_VAR 0 8
9152: PUSH
9153: LD_INT 2
9155: ARRAY
9156: PPUSH
9157: CALL_OW 297
9161: ST_TO_ADDR
// if dist < 9 then
9162: LD_VAR 0 6
9166: PUSH
9167: LD_INT 9
9169: LESS
9170: IFFALSE 9535
// begin side := GetSide ( nearest_lab ) ;
9172: LD_ADDR_VAR 0 4
9176: PUSH
9177: LD_VAR 0 9
9181: PPUSH
9182: CALL_OW 255
9186: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
9187: LD_VAR 0 4
9191: PPUSH
9192: LD_VAR 0 1
9196: PPUSH
9197: CALL 9540 0 2
// base := ( art - 1 ) * 100 ;
9201: LD_ADDR_VAR 0 5
9205: PUSH
9206: LD_VAR 0 1
9210: PUSH
9211: LD_INT 1
9213: MINUS
9214: PUSH
9215: LD_INT 100
9217: MUL
9218: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
9219: LD_INT 24
9221: PPUSH
9222: LD_VAR 0 4
9226: PPUSH
9227: CALL_OW 321
9231: PUSH
9232: LD_INT 2
9234: EQUAL
9235: PUSH
9236: LD_VAR 0 9
9240: PPUSH
9241: CALL_OW 313
9245: AND
9246: IFFALSE 9438
// begin if GetTag ( base + side * 10 + 11 ) then
9248: LD_VAR 0 5
9252: PUSH
9253: LD_VAR 0 4
9257: PUSH
9258: LD_INT 10
9260: MUL
9261: PLUS
9262: PUSH
9263: LD_INT 11
9265: PLUS
9266: PPUSH
9267: CALL_OW 110
9271: IFFALSE 9428
// begin if not GetTag ( base + side * 10 + 13 ) then
9273: LD_VAR 0 5
9277: PUSH
9278: LD_VAR 0 4
9282: PUSH
9283: LD_INT 10
9285: MUL
9286: PLUS
9287: PUSH
9288: LD_INT 13
9290: PLUS
9291: PPUSH
9292: CALL_OW 110
9296: NOT
9297: IFFALSE 9320
// state := GetTag ( base + 03 ) else
9299: LD_ADDR_VAR 0 7
9303: PUSH
9304: LD_VAR 0 5
9308: PUSH
9309: LD_INT 3
9311: PLUS
9312: PPUSH
9313: CALL_OW 110
9317: ST_TO_ADDR
9318: GO 9328
// state := art_gray ;
9320: LD_ADDR_VAR 0 7
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
9328: LD_VAR 0 5
9332: PUSH
9333: LD_VAR 0 4
9337: PUSH
9338: LD_INT 10
9340: MUL
9341: PLUS
9342: PUSH
9343: LD_INT 15
9345: PLUS
9346: PPUSH
9347: CALL_OW 110
9351: PUSH
9352: LD_VAR 0 5
9356: PUSH
9357: LD_VAR 0 4
9361: PUSH
9362: LD_INT 10
9364: MUL
9365: PLUS
9366: PUSH
9367: LD_INT 15
9369: PLUS
9370: PPUSH
9371: CALL_OW 110
9375: PUSH
9376: LD_VAR 0 9
9380: NONEQUAL
9381: AND
9382: IFFALSE 9398
// DeInit_Lab ( side , art ) ;
9384: LD_VAR 0 4
9388: PPUSH
9389: LD_VAR 0 1
9393: PPUSH
9394: CALL 9540 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
9398: LD_VAR 0 5
9402: PUSH
9403: LD_VAR 0 4
9407: PUSH
9408: LD_INT 10
9410: MUL
9411: PLUS
9412: PUSH
9413: LD_INT 15
9415: PLUS
9416: PPUSH
9417: LD_VAR 0 9
9421: PPUSH
9422: CALL_OW 109
// end else
9426: GO 9436
// state := art_instant ;
9428: LD_ADDR_VAR 0 7
9432: PUSH
9433: LD_INT 2
9435: ST_TO_ADDR
// end else
9436: GO 9446
// state := art_gray ;
9438: LD_ADDR_VAR 0 7
9442: PUSH
9443: LD_INT 1
9445: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
9446: LD_VAR 0 5
9450: PUSH
9451: LD_INT 11
9453: PLUS
9454: PPUSH
9455: LD_VAR 0 9
9459: PPUSH
9460: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
9464: LD_VAR 0 9
9468: PUSH
9469: LD_EXP 45
9473: IN
9474: NOT
9475: IFFALSE 9535
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
9477: LD_VAR 0 4
9481: PPUSH
9482: LD_VAR 0 5
9486: PUSH
9487: LD_INT 1
9489: PLUS
9490: PUSH
9491: LD_VAR 0 5
9495: PUSH
9496: LD_VAR 0 4
9500: PUSH
9501: LD_INT 10
9503: MUL
9504: PLUS
9505: PUSH
9506: LD_INT 11
9508: PLUS
9509: PPUSH
9510: CALL_OW 110
9514: PLUS
9515: PPUSH
9516: CALL_OW 110
9520: PPUSH
9521: LD_VAR 0 7
9525: PPUSH
9526: LD_VAR 0 9
9530: PPUSH
9531: CALL_OW 468
// end ; end ;
9535: LD_VAR 0 2
9539: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
9540: LD_INT 0
9542: PPUSH
9543: PPUSH
9544: PPUSH
// base := ( art - 1 ) * 100 ;
9545: LD_ADDR_VAR 0 4
9549: PUSH
9550: LD_VAR 0 2
9554: PUSH
9555: LD_INT 1
9557: MINUS
9558: PUSH
9559: LD_INT 100
9561: MUL
9562: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9563: LD_ADDR_VAR 0 5
9567: PUSH
9568: LD_VAR 0 4
9572: PUSH
9573: LD_VAR 0 1
9577: PUSH
9578: LD_INT 10
9580: MUL
9581: PLUS
9582: PUSH
9583: LD_INT 15
9585: PLUS
9586: PPUSH
9587: CALL_OW 110
9591: ST_TO_ADDR
// if not lab then
9592: LD_VAR 0 5
9596: NOT
9597: IFFALSE 9618
// lab := GetTag ( base + 11 ) ;
9599: LD_ADDR_VAR 0 5
9603: PUSH
9604: LD_VAR 0 4
9608: PUSH
9609: LD_INT 11
9611: PLUS
9612: PPUSH
9613: CALL_OW 110
9617: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
9618: LD_VAR 0 1
9622: PPUSH
9623: LD_VAR 0 4
9627: PUSH
9628: LD_INT 1
9630: PLUS
9631: PUSH
9632: LD_VAR 0 4
9636: PUSH
9637: LD_VAR 0 1
9641: PUSH
9642: LD_INT 10
9644: MUL
9645: PLUS
9646: PUSH
9647: LD_INT 11
9649: PLUS
9650: PPUSH
9651: CALL_OW 110
9655: PLUS
9656: PPUSH
9657: CALL_OW 110
9661: PPUSH
9662: LD_INT 0
9664: PPUSH
9665: LD_VAR 0 5
9669: PPUSH
9670: CALL_OW 468
// end ;
9674: LD_VAR 0 3
9678: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
9679: LD_INT 0
9681: PPUSH
9682: PPUSH
9683: PPUSH
9684: PPUSH
// side := GetSide ( lab ) ;
9685: LD_ADDR_VAR 0 4
9689: PUSH
9690: LD_VAR 0 1
9694: PPUSH
9695: CALL_OW 255
9699: ST_TO_ADDR
// for art = 1 to artefact_number do
9700: LD_ADDR_VAR 0 3
9704: PUSH
9705: DOUBLE
9706: LD_INT 1
9708: DEC
9709: ST_TO_ADDR
9710: LD_EXP 42
9714: PUSH
9715: FOR_TO
9716: IFFALSE 9872
// begin base := ( art - 1 ) * 100 ;
9718: LD_ADDR_VAR 0 5
9722: PUSH
9723: LD_VAR 0 3
9727: PUSH
9728: LD_INT 1
9730: MINUS
9731: PUSH
9732: LD_INT 100
9734: MUL
9735: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
9736: LD_VAR 0 5
9740: PUSH
9741: LD_INT 11
9743: PLUS
9744: PPUSH
9745: CALL_OW 110
9749: PUSH
9750: LD_VAR 0 1
9754: EQUAL
9755: IFFALSE 9768
// Init_Lab ( art ) else
9757: LD_VAR 0 3
9761: PPUSH
9762: CALL 9004 0 1
9766: GO 9870
// begin if lab = GetTag ( base + side * 10 + 15 ) then
9768: LD_VAR 0 1
9772: PUSH
9773: LD_VAR 0 5
9777: PUSH
9778: LD_VAR 0 4
9782: PUSH
9783: LD_INT 10
9785: MUL
9786: PLUS
9787: PUSH
9788: LD_INT 15
9790: PLUS
9791: PPUSH
9792: CALL_OW 110
9796: EQUAL
9797: IFFALSE 9870
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
9799: LD_VAR 0 5
9803: PUSH
9804: LD_VAR 0 4
9808: PUSH
9809: LD_INT 10
9811: MUL
9812: PLUS
9813: PUSH
9814: LD_INT 13
9816: PLUS
9817: PPUSH
9818: CALL_OW 110
9822: PUSH
9823: LD_INT 0
9825: GREATER
9826: PUSH
9827: LD_VAR 0 1
9831: PPUSH
9832: CALL_OW 313
9836: NOT
9837: OR
9838: IFFALSE 9856
// Shadow_Artefact ( side , art ) else
9840: LD_VAR 0 4
9844: PPUSH
9845: LD_VAR 0 3
9849: PPUSH
9850: CALL 8718 0 2
9854: GO 9870
// Highlight_Artefact ( side , art ) ;
9856: LD_VAR 0 4
9860: PPUSH
9861: LD_VAR 0 3
9865: PPUSH
9866: CALL 8850 0 2
// end ; end ; end ;
9870: GO 9715
9872: POP
9873: POP
// end ; end_of_file
9874: LD_VAR 0 2
9878: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
9879: LD_INT 10
9881: PPUSH
9882: CALL_OW 67
// if not IsBusy ( lab ) then
9886: LD_VAR 0 2
9890: PPUSH
9891: CALL_OW 315
9895: NOT
9896: IFFALSE 9923
// begin labs_in_use := labs_in_use diff lab ;
9898: LD_ADDR_EXP 45
9902: PUSH
9903: LD_EXP 45
9907: PUSH
9908: LD_VAR 0 2
9912: DIFF
9913: ST_TO_ADDR
// Update_Artefact ( lab ) ;
9914: LD_VAR 0 2
9918: PPUSH
9919: CALL 9679 0 1
// end ; end ;
9923: PPOPN 2
9925: END
// on ResearchStarted ( tech , lab ) do var un , side ;
9926: LD_INT 0
9928: PPUSH
9929: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
9930: LD_ADDR_EXP 45
9934: PUSH
9935: LD_EXP 45
9939: PUSH
9940: LD_VAR 0 2
9944: ADD
9945: ST_TO_ADDR
// side := GetSide ( lab ) ;
9946: LD_ADDR_VAR 0 4
9950: PUSH
9951: LD_VAR 0 2
9955: PPUSH
9956: CALL_OW 255
9960: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9961: LD_ADDR_VAR 0 3
9965: PUSH
9966: DOUBLE
9967: LD_INT 0
9969: DEC
9970: ST_TO_ADDR
9971: LD_EXP 42
9975: PUSH
9976: LD_INT 1
9978: MINUS
9979: PUSH
9980: FOR_TO
9981: IFFALSE 10060
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9983: LD_VAR 0 2
9987: PUSH
9988: LD_VAR 0 3
9992: PUSH
9993: LD_INT 100
9995: MUL
9996: PUSH
9997: LD_INT 11
9999: PLUS
10000: PPUSH
10001: CALL_OW 110
10005: PUSH
10006: LD_VAR 0 3
10010: PUSH
10011: LD_INT 100
10013: MUL
10014: PUSH
10015: LD_VAR 0 4
10019: PUSH
10020: LD_INT 10
10022: MUL
10023: PLUS
10024: PUSH
10025: LD_INT 15
10027: PLUS
10028: PPUSH
10029: CALL_OW 110
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: IN
10038: IFFALSE 10058
// DeInit_Lab ( side , un + 1 ) ;
10040: LD_VAR 0 4
10044: PPUSH
10045: LD_VAR 0 3
10049: PUSH
10050: LD_INT 1
10052: PLUS
10053: PPUSH
10054: CALL 9540 0 2
10058: GO 9980
10060: POP
10061: POP
// end ;
10062: PPOPN 4
10064: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10065: LD_INT 10
10067: PPUSH
10068: CALL_OW 67
// if not IsBusy ( lab ) then
10072: LD_VAR 0 2
10076: PPUSH
10077: CALL_OW 315
10081: NOT
10082: IFFALSE 10109
// begin labs_in_use := labs_in_use diff lab ;
10084: LD_ADDR_EXP 45
10088: PUSH
10089: LD_EXP 45
10093: PUSH
10094: LD_VAR 0 2
10098: DIFF
10099: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10100: LD_VAR 0 2
10104: PPUSH
10105: CALL 9679 0 1
// end ; end ; end_of_file
10109: PPOPN 2
10111: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10112: LD_INT 0
10114: PPUSH
10115: PPUSH
10116: PPUSH
// vysledek := true ;
10117: LD_ADDR_VAR 0 5
10121: PUSH
10122: LD_INT 1
10124: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
10125: LD_ADDR_VAR 0 6
10129: PUSH
10130: LD_VAR 0 1
10134: PUSH
10135: LD_INT 10
10137: MUL
10138: PUSH
10139: LD_INT 15
10141: PLUS
10142: PPUSH
10143: CALL_OW 110
10147: PPUSH
10148: CALL_OW 274
10152: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
10153: LD_VAR 0 6
10157: PUSH
10158: LD_VAR 0 6
10162: PPUSH
10163: CALL_OW 279
10167: PUSH
10168: LD_INT 3
10170: ARRAY
10171: PUSH
10172: LD_INT 6
10174: PPUSH
10175: CALL_OW 110
10179: GREATEREQUAL
10180: AND
10181: IFFALSE 10271
// begin PlaceSeeing ( x , y , side , - 15 ) ;
10183: LD_VAR 0 2
10187: PPUSH
10188: LD_VAR 0 3
10192: PPUSH
10193: LD_VAR 0 1
10197: PPUSH
10198: LD_INT 15
10200: NEG
10201: PPUSH
10202: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
10206: LD_VAR 0 6
10210: PPUSH
10211: LD_INT 3
10213: PPUSH
10214: LD_VAR 0 6
10218: PPUSH
10219: CALL_OW 279
10223: PUSH
10224: LD_INT 3
10226: ARRAY
10227: PUSH
10228: LD_INT 6
10230: PPUSH
10231: CALL_OW 110
10235: MINUS
10236: PPUSH
10237: CALL_OW 277
// view_data := [ x , y , side ] ;
10241: LD_ADDR_LOC 9
10245: PUSH
10246: LD_VAR 0 2
10250: PUSH
10251: LD_VAR 0 3
10255: PUSH
10256: LD_VAR 0 1
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: LIST
10265: ST_TO_ADDR
// enable ( 1 ) ;
10266: LD_INT 1
10268: ENABLE_MARKED
// end else
10269: GO 10279
// vysledek := false ;
10271: LD_ADDR_VAR 0 5
10275: PUSH
10276: LD_INT 0
10278: ST_TO_ADDR
// result := vysledek ;
10279: LD_ADDR_VAR 0 4
10283: PUSH
10284: LD_VAR 0 5
10288: ST_TO_ADDR
// end ;
10289: LD_VAR 0 4
10293: RET
// every 0 0$2 trigger view_data marked 1 do
10294: LD_LOC 9
10298: IFFALSE 10349
10300: GO 10302
10302: DISABLE
// begin wait ( 0 0$30 ) ;
10303: LD_INT 1050
10305: PPUSH
10306: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
10310: LD_LOC 9
10314: PUSH
10315: LD_INT 1
10317: ARRAY
10318: PPUSH
10319: LD_LOC 9
10323: PUSH
10324: LD_INT 2
10326: ARRAY
10327: PPUSH
10328: LD_LOC 9
10332: PUSH
10333: LD_INT 3
10335: ARRAY
10336: PPUSH
10337: CALL_OW 331
// view_data := 0 ;
10341: LD_ADDR_LOC 9
10345: PUSH
10346: LD_INT 0
10348: ST_TO_ADDR
// end ;
10349: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
10350: LD_INT 0
10352: PPUSH
10353: PPUSH
10354: PPUSH
10355: PPUSH
10356: PPUSH
10357: PPUSH
10358: PPUSH
10359: PPUSH
// vysledek := true ;
10360: LD_ADDR_VAR 0 4
10364: PUSH
10365: LD_INT 1
10367: ST_TO_ADDR
// it_can := false ;
10368: LD_ADDR_VAR 0 8
10372: PUSH
10373: LD_INT 0
10375: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
10376: LD_ADDR_VAR 0 9
10380: PUSH
10381: LD_INT 30
10383: PUSH
10384: LD_INT 28
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
10391: LD_ADDR_VAR 0 10
10395: PUSH
10396: LD_INT 8
10398: PUSH
10399: LD_INT 48
10401: PUSH
10402: LD_INT 29
10404: PUSH
10405: LD_INT 49
10407: PUSH
10408: LD_INT 10
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
10418: LD_ADDR_VAR 0 7
10422: PUSH
10423: LD_VAR 0 2
10427: PPUSH
10428: CALL_OW 247
10432: PUSH
10433: LD_INT 3
10435: EQUAL
10436: PUSH
10437: LD_VAR 0 2
10441: PPUSH
10442: CALL_OW 266
10446: PUSH
10447: LD_VAR 0 9
10451: IN
10452: PUSH
10453: LD_VAR 0 2
10457: PPUSH
10458: CALL_OW 269
10462: PUSH
10463: LD_VAR 0 10
10467: IN
10468: OR
10469: AND
10470: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
10471: LD_ADDR_VAR 0 6
10475: PUSH
10476: LD_VAR 0 2
10480: PPUSH
10481: CALL_OW 247
10485: PUSH
10486: LD_INT 2
10488: EQUAL
10489: PUSH
10490: LD_VAR 0 2
10494: PPUSH
10495: CALL_OW 264
10499: PUSH
10500: LD_VAR 0 10
10504: IN
10505: PUSH
10506: LD_VAR 0 2
10510: PPUSH
10511: CALL_OW 262
10515: PUSH
10516: LD_INT 3
10518: EQUAL
10519: OR
10520: AND
10521: ST_TO_ADDR
// case def_artefact_two of 1 :
10522: LD_EXP 2
10526: PUSH
10527: LD_INT 1
10529: DOUBLE
10530: EQUAL
10531: IFTRUE 10535
10533: GO 10552
10535: POP
// if b_can then
10536: LD_VAR 0 7
10540: IFFALSE 10550
// it_can := true ; 2 :
10542: LD_ADDR_VAR 0 8
10546: PUSH
10547: LD_INT 1
10549: ST_TO_ADDR
10550: GO 10609
10552: LD_INT 2
10554: DOUBLE
10555: EQUAL
10556: IFTRUE 10560
10558: GO 10577
10560: POP
// if v_can then
10561: LD_VAR 0 6
10565: IFFALSE 10575
// it_can := true ; 3 :
10567: LD_ADDR_VAR 0 8
10571: PUSH
10572: LD_INT 1
10574: ST_TO_ADDR
10575: GO 10609
10577: LD_INT 3
10579: DOUBLE
10580: EQUAL
10581: IFTRUE 10585
10583: GO 10608
10585: POP
// if b_can or v_can then
10586: LD_VAR 0 7
10590: PUSH
10591: LD_VAR 0 6
10595: OR
10596: IFFALSE 10606
// it_can := true ; end ;
10598: LD_ADDR_VAR 0 8
10602: PUSH
10603: LD_INT 1
10605: ST_TO_ADDR
10606: GO 10609
10608: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
10609: LD_ADDR_VAR 0 5
10613: PUSH
10614: LD_INT 100
10616: PUSH
10617: LD_VAR 0 1
10621: PUSH
10622: LD_INT 10
10624: MUL
10625: PLUS
10626: PUSH
10627: LD_INT 15
10629: PLUS
10630: PPUSH
10631: CALL_OW 110
10635: PPUSH
10636: CALL_OW 274
10640: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
10641: LD_VAR 0 5
10645: PUSH
10646: LD_VAR 0 8
10650: AND
10651: PUSH
10652: LD_VAR 0 5
10656: PPUSH
10657: CALL_OW 279
10661: PUSH
10662: LD_INT 3
10664: ARRAY
10665: PUSH
10666: LD_INT 106
10668: PPUSH
10669: CALL_OW 110
10673: GREATEREQUAL
10674: AND
10675: IFFALSE 10723
// begin KillUnit ( un ) ;
10677: LD_VAR 0 2
10681: PPUSH
10682: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
10686: LD_VAR 0 5
10690: PPUSH
10691: LD_INT 3
10693: PPUSH
10694: LD_VAR 0 5
10698: PPUSH
10699: CALL_OW 279
10703: PUSH
10704: LD_INT 3
10706: ARRAY
10707: PUSH
10708: LD_INT 106
10710: PPUSH
10711: CALL_OW 110
10715: MINUS
10716: PPUSH
10717: CALL_OW 277
// end else
10721: GO 10731
// vysledek := false ;
10723: LD_ADDR_VAR 0 4
10727: PUSH
10728: LD_INT 0
10730: ST_TO_ADDR
// result := vysledek ;
10731: LD_ADDR_VAR 0 3
10735: PUSH
10736: LD_VAR 0 4
10740: ST_TO_ADDR
// end ;
10741: LD_VAR 0 3
10745: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
10746: LD_INT 0
10748: PPUSH
10749: PPUSH
10750: PPUSH
10751: PPUSH
// vysledek := true ;
10752: LD_ADDR_VAR 0 5
10756: PUSH
10757: LD_INT 1
10759: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
10760: LD_ADDR_VAR 0 7
10764: PUSH
10765: LD_INT 200
10767: PUSH
10768: LD_VAR 0 1
10772: PUSH
10773: LD_INT 10
10775: MUL
10776: PLUS
10777: PUSH
10778: LD_INT 15
10780: PLUS
10781: PPUSH
10782: CALL_OW 110
10786: PPUSH
10787: CALL_OW 274
10791: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
10792: LD_VAR 0 7
10796: PUSH
10797: LD_VAR 0 7
10801: PPUSH
10802: CALL_OW 279
10806: PUSH
10807: LD_INT 3
10809: ARRAY
10810: PUSH
10811: LD_INT 206
10813: PPUSH
10814: CALL_OW 110
10818: GREATEREQUAL
10819: AND
10820: IFFALSE 10876
// begin ArtContamination ( p1 , p2 , 15 ) ;
10822: LD_VAR 0 2
10826: PPUSH
10827: LD_VAR 0 3
10831: PPUSH
10832: LD_INT 15
10834: PPUSH
10835: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
10839: LD_VAR 0 7
10843: PPUSH
10844: LD_INT 3
10846: PPUSH
10847: LD_VAR 0 7
10851: PPUSH
10852: CALL_OW 279
10856: PUSH
10857: LD_INT 3
10859: ARRAY
10860: PUSH
10861: LD_INT 206
10863: PPUSH
10864: CALL_OW 110
10868: MINUS
10869: PPUSH
10870: CALL_OW 277
// end else
10874: GO 10884
// vysledek := false ;
10876: LD_ADDR_VAR 0 5
10880: PUSH
10881: LD_INT 0
10883: ST_TO_ADDR
// result := vysledek ;
10884: LD_ADDR_VAR 0 4
10888: PUSH
10889: LD_VAR 0 5
10893: ST_TO_ADDR
// end ;
10894: LD_VAR 0 4
10898: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
10899: GO 10901
10901: DISABLE
10902: LD_INT 0
10904: PPUSH
10905: PPUSH
10906: PPUSH
// begin for art = 0 to artefact_number do
10907: LD_ADDR_VAR 0 1
10911: PUSH
10912: DOUBLE
10913: LD_INT 0
10915: DEC
10916: ST_TO_ADDR
10917: LD_EXP 42
10921: PUSH
10922: FOR_TO
10923: IFFALSE 11057
// for side = 1 to Side_Positions do
10925: LD_ADDR_VAR 0 2
10929: PUSH
10930: DOUBLE
10931: LD_INT 1
10933: DEC
10934: ST_TO_ADDR
10935: LD_EXP 23
10939: PUSH
10940: FOR_TO
10941: IFFALSE 11053
// begin recharge := art * 100 + side * 10 + 13 ;
10943: LD_ADDR_VAR 0 3
10947: PUSH
10948: LD_VAR 0 1
10952: PUSH
10953: LD_INT 100
10955: MUL
10956: PUSH
10957: LD_VAR 0 2
10961: PUSH
10962: LD_INT 10
10964: MUL
10965: PLUS
10966: PUSH
10967: LD_INT 13
10969: PLUS
10970: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
10971: LD_EXP 23
10975: PUSH
10976: LD_VAR 0 2
10980: ARRAY
10981: PUSH
10982: LD_VAR 0 3
10986: PPUSH
10987: CALL_OW 110
10991: PUSH
10992: LD_INT 0
10994: GREATER
10995: AND
10996: IFFALSE 11051
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
10998: LD_VAR 0 3
11002: PPUSH
11003: LD_VAR 0 3
11007: PPUSH
11008: CALL_OW 110
11012: PUSH
11013: LD_INT 1
11015: MINUS
11016: PPUSH
11017: CALL_OW 109
// if not GetTag ( recharge ) then
11021: LD_VAR 0 3
11025: PPUSH
11026: CALL_OW 110
11030: NOT
11031: IFFALSE 11051
// Highlight_Artefact ( side , art + 1 ) ;
11033: LD_VAR 0 2
11037: PPUSH
11038: LD_VAR 0 1
11042: PUSH
11043: LD_INT 1
11045: PLUS
11046: PPUSH
11047: CALL 8850 0 2
// end ; end ;
11051: GO 10940
11053: POP
11054: POP
11055: GO 10922
11057: POP
11058: POP
// enable ;
11059: ENABLE
// end ; end_of_file
11060: PPOPN 3
11062: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11063: LD_INT 0
11065: PPUSH
11066: PPUSH
11067: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11068: LD_INT 18
11070: PPUSH
11071: LD_VAR 0 1
11075: PUSH
11076: LD_INT 1
11078: ARRAY
11079: PPUSH
11080: LD_VAR 0 1
11084: PUSH
11085: LD_INT 2
11087: ARRAY
11088: PPUSH
11089: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11093: LD_VAR 0 1
11097: PUSH
11098: LD_INT 1
11100: ARRAY
11101: PPUSH
11102: LD_VAR 0 1
11106: PUSH
11107: LD_INT 2
11109: ARRAY
11110: PPUSH
11111: CALL_OW 494
// Wait ( 30 ) ;
11115: LD_INT 30
11117: PPUSH
11118: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
11122: LD_INT 18
11124: PPUSH
11125: LD_INT 4
11127: PPUSH
11128: CALL_OW 286
// base := ( art - 1 ) * 100 ;
11132: LD_ADDR_VAR 0 4
11136: PUSH
11137: LD_VAR 0 2
11141: PUSH
11142: LD_INT 1
11144: MINUS
11145: PUSH
11146: LD_INT 100
11148: MUL
11149: ST_TO_ADDR
// if GetTag ( base + 11 ) then
11150: LD_VAR 0 4
11154: PUSH
11155: LD_INT 11
11157: PLUS
11158: PPUSH
11159: CALL_OW 110
11163: IFFALSE 11301
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
11165: LD_ADDR_VAR 0 5
11169: PUSH
11170: LD_VAR 0 4
11174: PUSH
11175: LD_INT 11
11177: PLUS
11178: PPUSH
11179: CALL_OW 110
11183: PPUSH
11184: CALL_OW 255
11188: ST_TO_ADDR
// if GetTag ( base + 12 ) then
11189: LD_VAR 0 4
11193: PUSH
11194: LD_INT 12
11196: PLUS
11197: PPUSH
11198: CALL_OW 110
11202: IFFALSE 11245
// begin ComCancel ( GetTag ( base + 11 ) ) ;
11204: LD_VAR 0 4
11208: PUSH
11209: LD_INT 11
11211: PLUS
11212: PPUSH
11213: CALL_OW 110
11217: PPUSH
11218: CALL_OW 127
// Wait ( 10 ) ;
11222: LD_INT 10
11224: PPUSH
11225: CALL_OW 67
// SetTag ( base + 12 , false ) ;
11229: LD_VAR 0 4
11233: PUSH
11234: LD_INT 12
11236: PLUS
11237: PPUSH
11238: LD_INT 0
11240: PPUSH
11241: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
11245: LD_VAR 0 4
11249: PUSH
11250: LD_VAR 0 5
11254: PUSH
11255: LD_INT 10
11257: MUL
11258: PLUS
11259: PUSH
11260: LD_INT 11
11262: PLUS
11263: PPUSH
11264: CALL_OW 110
11268: NOT
11269: IFFALSE 11285
// DeInit_Lab ( side , art ) ;
11271: LD_VAR 0 5
11275: PPUSH
11276: LD_VAR 0 2
11280: PPUSH
11281: CALL 9540 0 2
// SetTag ( base + 11 , 0 ) ;
11285: LD_VAR 0 4
11289: PUSH
11290: LD_INT 11
11292: PLUS
11293: PPUSH
11294: LD_INT 0
11296: PPUSH
11297: CALL_OW 109
// end ; end ;
11301: LD_VAR 0 3
11305: RET
// every 0 0$5 marked 5 do var hex , un ;
11306: GO 11308
11308: DISABLE
11309: LD_INT 0
11311: PPUSH
11312: PPUSH
// begin if GetTag ( 09 ) then
11313: LD_INT 9
11315: PPUSH
11316: CALL_OW 110
11320: IFFALSE 11359
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
11322: LD_ADDR_VAR 0 1
11326: PUSH
11327: LD_INT 13
11329: PPUSH
11330: CALL_OW 110
11334: PPUSH
11335: CALL_OW 250
11339: PUSH
11340: LD_INT 13
11342: PPUSH
11343: CALL_OW 110
11347: PPUSH
11348: CALL_OW 251
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: ST_TO_ADDR
11357: GO 11378
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
11359: LD_ADDR_VAR 0 1
11363: PUSH
11364: LD_EXP 44
11368: PUSH
11369: LD_INT 1
11371: ARRAY
11372: PPUSH
11373: CALL_OW 469
11377: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11378: LD_VAR 0 1
11382: PUSH
11383: LD_INT 1
11385: ARRAY
11386: PPUSH
11387: LD_VAR 0 1
11391: PUSH
11392: LD_INT 2
11394: ARRAY
11395: PPUSH
11396: LD_INT 16
11398: PPUSH
11399: CALL_OW 309
11403: NOT
11404: IFFALSE 11749
// begin wait ( 3 3$0 ) ;
11406: LD_INT 6300
11408: PPUSH
11409: CALL_OW 67
// if GetTag ( 09 ) then
11413: LD_INT 9
11415: PPUSH
11416: CALL_OW 110
11420: IFFALSE 11467
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
11422: LD_INT 13
11424: PPUSH
11425: CALL_OW 110
11429: PPUSH
11430: LD_INT 4
11432: PPUSH
11433: LD_EXP 44
11437: PUSH
11438: LD_INT 1
11440: ARRAY
11441: NEG
11442: PPUSH
11443: CALL_OW 290
// SetTag ( 09 , 0 ) ;
11447: LD_INT 9
11449: PPUSH
11450: LD_INT 0
11452: PPUSH
11453: CALL_OW 109
// SetTag ( 13 , 0 ) ;
11457: LD_INT 13
11459: PPUSH
11460: LD_INT 0
11462: PPUSH
11463: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 1 ] ) ;
11467: LD_ADDR_VAR 0 1
11471: PUSH
11472: LD_EXP 44
11476: PUSH
11477: LD_INT 1
11479: ARRAY
11480: PPUSH
11481: CALL_OW 469
11485: ST_TO_ADDR
// if not hex then
11486: LD_VAR 0 1
11490: NOT
11491: IFFALSE 11528
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
11493: LD_ADDR_VAR 0 1
11497: PUSH
11498: LD_INT 13
11500: PPUSH
11501: CALL_OW 110
11505: PPUSH
11506: CALL_OW 250
11510: PUSH
11511: LD_INT 13
11513: PPUSH
11514: CALL_OW 110
11518: PPUSH
11519: CALL_OW 251
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: ST_TO_ADDR
// DestroyArtefact ( hex , 1 ) ;
11528: LD_VAR 0 1
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL 11063 0 2
// wait ( 5 ) ;
11540: LD_INT 5
11542: PPUSH
11543: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
11547: LD_ADDR_VAR 0 1
11551: PUSH
11552: LD_INT 16
11554: PPUSH
11555: LD_INT 0
11557: PPUSH
11558: CALL_OW 16
11562: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11563: LD_ADDR_VAR 0 2
11567: PUSH
11568: LD_VAR 0 1
11572: PUSH
11573: LD_INT 1
11575: ARRAY
11576: PPUSH
11577: LD_VAR 0 1
11581: PUSH
11582: LD_INT 2
11584: ARRAY
11585: PPUSH
11586: CALL_OW 428
11590: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
11591: LD_VAR 0 2
11595: PUSH
11596: LD_INT 0
11598: GREATER
11599: PUSH
11600: LD_VAR 0 2
11604: PPUSH
11605: CALL_OW 247
11609: PUSH
11610: LD_INT 3
11612: EQUAL
11613: AND
11614: IFFALSE 11658
// begin KillUnit ( un ) ;
11616: LD_VAR 0 2
11620: PPUSH
11621: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
11625: LD_VAR 0 1
11629: PUSH
11630: LD_INT 1
11632: ARRAY
11633: PPUSH
11634: LD_VAR 0 1
11638: PUSH
11639: LD_INT 2
11641: ARRAY
11642: PPUSH
11643: CALL_OW 428
11647: IFFALSE 11658
// wait ( 10 ) ;
11649: LD_INT 10
11651: PPUSH
11652: CALL_OW 67
11656: GO 11625
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11658: LD_VAR 0 1
11662: PUSH
11663: LD_INT 1
11665: ARRAY
11666: PPUSH
11667: LD_VAR 0 1
11671: PUSH
11672: LD_INT 2
11674: ARRAY
11675: PPUSH
11676: CALL_OW 428
11680: NOT
11681: IFFALSE 11547
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11683: LD_VAR 0 1
11687: PUSH
11688: LD_INT 1
11690: ARRAY
11691: PPUSH
11692: LD_VAR 0 1
11696: PUSH
11697: LD_INT 2
11699: ARRAY
11700: PPUSH
11701: CALL_OW 494
// wait ( 30 ) ;
11705: LD_INT 30
11707: PPUSH
11708: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
11712: LD_INT 4
11714: PPUSH
11715: LD_EXP 44
11719: PUSH
11720: LD_INT 1
11722: ARRAY
11723: PPUSH
11724: LD_VAR 0 1
11728: PUSH
11729: LD_INT 1
11731: ARRAY
11732: PPUSH
11733: LD_VAR 0 1
11737: PUSH
11738: LD_INT 2
11740: ARRAY
11741: PPUSH
11742: LD_INT 0
11744: PPUSH
11745: CALL_OW 58
// end ; enable ;
11749: ENABLE
// end ;
11750: PPOPN 2
11752: END
// every 0 0$5 marked 6 do var hex , un ;
11753: GO 11755
11755: DISABLE
11756: LD_INT 0
11758: PPUSH
11759: PPUSH
// begin if GetTag ( 109 ) then
11760: LD_INT 109
11762: PPUSH
11763: CALL_OW 110
11767: IFFALSE 11806
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
11769: LD_ADDR_VAR 0 1
11773: PUSH
11774: LD_INT 113
11776: PPUSH
11777: CALL_OW 110
11781: PPUSH
11782: CALL_OW 250
11786: PUSH
11787: LD_INT 113
11789: PPUSH
11790: CALL_OW 110
11794: PPUSH
11795: CALL_OW 251
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: ST_TO_ADDR
11804: GO 11825
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
11806: LD_ADDR_VAR 0 1
11810: PUSH
11811: LD_EXP 44
11815: PUSH
11816: LD_INT 2
11818: ARRAY
11819: PPUSH
11820: CALL_OW 469
11824: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11825: LD_VAR 0 1
11829: PUSH
11830: LD_INT 1
11832: ARRAY
11833: PPUSH
11834: LD_VAR 0 1
11838: PUSH
11839: LD_INT 2
11841: ARRAY
11842: PPUSH
11843: LD_INT 16
11845: PPUSH
11846: CALL_OW 309
11850: NOT
11851: IFFALSE 12196
// begin wait ( 3 3$30 ) ;
11853: LD_INT 7350
11855: PPUSH
11856: CALL_OW 67
// if GetTag ( 109 ) then
11860: LD_INT 109
11862: PPUSH
11863: CALL_OW 110
11867: IFFALSE 11914
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 2 ] ) ;
11869: LD_INT 113
11871: PPUSH
11872: CALL_OW 110
11876: PPUSH
11877: LD_INT 4
11879: PPUSH
11880: LD_EXP 44
11884: PUSH
11885: LD_INT 2
11887: ARRAY
11888: NEG
11889: PPUSH
11890: CALL_OW 290
// SetTag ( 109 , 0 ) ;
11894: LD_INT 109
11896: PPUSH
11897: LD_INT 0
11899: PPUSH
11900: CALL_OW 109
// SetTag ( 113 , 0 ) ;
11904: LD_INT 113
11906: PPUSH
11907: LD_INT 0
11909: PPUSH
11910: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 2 ] ) ;
11914: LD_ADDR_VAR 0 1
11918: PUSH
11919: LD_EXP 44
11923: PUSH
11924: LD_INT 2
11926: ARRAY
11927: PPUSH
11928: CALL_OW 469
11932: ST_TO_ADDR
// if not hex then
11933: LD_VAR 0 1
11937: NOT
11938: IFFALSE 11975
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
11940: LD_ADDR_VAR 0 1
11944: PUSH
11945: LD_INT 13
11947: PPUSH
11948: CALL_OW 110
11952: PPUSH
11953: CALL_OW 250
11957: PUSH
11958: LD_INT 13
11960: PPUSH
11961: CALL_OW 110
11965: PPUSH
11966: CALL_OW 251
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: ST_TO_ADDR
// DestroyArtefact ( hex , 2 ) ;
11975: LD_VAR 0 1
11979: PPUSH
11980: LD_INT 2
11982: PPUSH
11983: CALL 11063 0 2
// wait ( 5 ) ;
11987: LD_INT 5
11989: PPUSH
11990: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
11994: LD_ADDR_VAR 0 1
11998: PUSH
11999: LD_INT 16
12001: PPUSH
12002: LD_INT 0
12004: PPUSH
12005: CALL_OW 16
12009: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12010: LD_ADDR_VAR 0 2
12014: PUSH
12015: LD_VAR 0 1
12019: PUSH
12020: LD_INT 1
12022: ARRAY
12023: PPUSH
12024: LD_VAR 0 1
12028: PUSH
12029: LD_INT 2
12031: ARRAY
12032: PPUSH
12033: CALL_OW 428
12037: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12038: LD_VAR 0 2
12042: PUSH
12043: LD_INT 0
12045: GREATER
12046: PUSH
12047: LD_VAR 0 2
12051: PPUSH
12052: CALL_OW 247
12056: PUSH
12057: LD_INT 3
12059: EQUAL
12060: AND
12061: IFFALSE 12105
// begin KillUnit ( un ) ;
12063: LD_VAR 0 2
12067: PPUSH
12068: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12072: LD_VAR 0 1
12076: PUSH
12077: LD_INT 1
12079: ARRAY
12080: PPUSH
12081: LD_VAR 0 1
12085: PUSH
12086: LD_INT 2
12088: ARRAY
12089: PPUSH
12090: CALL_OW 428
12094: IFFALSE 12105
// wait ( 10 ) ;
12096: LD_INT 10
12098: PPUSH
12099: CALL_OW 67
12103: GO 12072
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12105: LD_VAR 0 1
12109: PUSH
12110: LD_INT 1
12112: ARRAY
12113: PPUSH
12114: LD_VAR 0 1
12118: PUSH
12119: LD_INT 2
12121: ARRAY
12122: PPUSH
12123: CALL_OW 428
12127: NOT
12128: IFFALSE 11994
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12130: LD_VAR 0 1
12134: PUSH
12135: LD_INT 1
12137: ARRAY
12138: PPUSH
12139: LD_VAR 0 1
12143: PUSH
12144: LD_INT 2
12146: ARRAY
12147: PPUSH
12148: CALL_OW 494
// wait ( 30 ) ;
12152: LD_INT 30
12154: PPUSH
12155: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12159: LD_INT 4
12161: PPUSH
12162: LD_EXP 44
12166: PUSH
12167: LD_INT 2
12169: ARRAY
12170: PPUSH
12171: LD_VAR 0 1
12175: PUSH
12176: LD_INT 1
12178: ARRAY
12179: PPUSH
12180: LD_VAR 0 1
12184: PUSH
12185: LD_INT 2
12187: ARRAY
12188: PPUSH
12189: LD_INT 0
12191: PPUSH
12192: CALL_OW 58
// end ; enable ;
12196: ENABLE
// end ;
12197: PPOPN 2
12199: END
// every 0 0$5 marked 7 do var hex , un ;
12200: GO 12202
12202: DISABLE
12203: LD_INT 0
12205: PPUSH
12206: PPUSH
// begin if GetTag ( 209 ) then
12207: LD_INT 209
12209: PPUSH
12210: CALL_OW 110
12214: IFFALSE 12253
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12216: LD_ADDR_VAR 0 1
12220: PUSH
12221: LD_INT 213
12223: PPUSH
12224: CALL_OW 110
12228: PPUSH
12229: CALL_OW 250
12233: PUSH
12234: LD_INT 213
12236: PPUSH
12237: CALL_OW 110
12241: PPUSH
12242: CALL_OW 251
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: ST_TO_ADDR
12251: GO 12272
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
12253: LD_ADDR_VAR 0 1
12257: PUSH
12258: LD_EXP 44
12262: PUSH
12263: LD_INT 3
12265: ARRAY
12266: PPUSH
12267: CALL_OW 469
12271: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12272: LD_VAR 0 1
12276: PUSH
12277: LD_INT 1
12279: ARRAY
12280: PPUSH
12281: LD_VAR 0 1
12285: PUSH
12286: LD_INT 2
12288: ARRAY
12289: PPUSH
12290: LD_INT 16
12292: PPUSH
12293: CALL_OW 309
12297: NOT
12298: IFFALSE 12643
// begin wait ( 4 4$0 ) ;
12300: LD_INT 8400
12302: PPUSH
12303: CALL_OW 67
// if GetTag ( 209 ) then
12307: LD_INT 209
12309: PPUSH
12310: CALL_OW 110
12314: IFFALSE 12361
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 3 ] ) ;
12316: LD_INT 213
12318: PPUSH
12319: CALL_OW 110
12323: PPUSH
12324: LD_INT 4
12326: PPUSH
12327: LD_EXP 44
12331: PUSH
12332: LD_INT 3
12334: ARRAY
12335: NEG
12336: PPUSH
12337: CALL_OW 290
// SetTag ( 209 , 0 ) ;
12341: LD_INT 209
12343: PPUSH
12344: LD_INT 0
12346: PPUSH
12347: CALL_OW 109
// SetTag ( 213 , 0 ) ;
12351: LD_INT 213
12353: PPUSH
12354: LD_INT 0
12356: PPUSH
12357: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 3 ] ) ;
12361: LD_ADDR_VAR 0 1
12365: PUSH
12366: LD_EXP 44
12370: PUSH
12371: LD_INT 3
12373: ARRAY
12374: PPUSH
12375: CALL_OW 469
12379: ST_TO_ADDR
// if not hex then
12380: LD_VAR 0 1
12384: NOT
12385: IFFALSE 12422
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
12387: LD_ADDR_VAR 0 1
12391: PUSH
12392: LD_INT 13
12394: PPUSH
12395: CALL_OW 110
12399: PPUSH
12400: CALL_OW 250
12404: PUSH
12405: LD_INT 13
12407: PPUSH
12408: CALL_OW 110
12412: PPUSH
12413: CALL_OW 251
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: ST_TO_ADDR
// DestroyArtefact ( hex , 3 ) ;
12422: LD_VAR 0 1
12426: PPUSH
12427: LD_INT 3
12429: PPUSH
12430: CALL 11063 0 2
// wait ( 5 ) ;
12434: LD_INT 5
12436: PPUSH
12437: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12441: LD_ADDR_VAR 0 1
12445: PUSH
12446: LD_INT 16
12448: PPUSH
12449: LD_INT 0
12451: PPUSH
12452: CALL_OW 16
12456: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12457: LD_ADDR_VAR 0 2
12461: PUSH
12462: LD_VAR 0 1
12466: PUSH
12467: LD_INT 1
12469: ARRAY
12470: PPUSH
12471: LD_VAR 0 1
12475: PUSH
12476: LD_INT 2
12478: ARRAY
12479: PPUSH
12480: CALL_OW 428
12484: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12485: LD_VAR 0 2
12489: PUSH
12490: LD_INT 0
12492: GREATER
12493: PUSH
12494: LD_VAR 0 2
12498: PPUSH
12499: CALL_OW 247
12503: PUSH
12504: LD_INT 3
12506: EQUAL
12507: AND
12508: IFFALSE 12552
// begin KillUnit ( un ) ;
12510: LD_VAR 0 2
12514: PPUSH
12515: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12519: LD_VAR 0 1
12523: PUSH
12524: LD_INT 1
12526: ARRAY
12527: PPUSH
12528: LD_VAR 0 1
12532: PUSH
12533: LD_INT 2
12535: ARRAY
12536: PPUSH
12537: CALL_OW 428
12541: IFFALSE 12552
// wait ( 10 ) ;
12543: LD_INT 10
12545: PPUSH
12546: CALL_OW 67
12550: GO 12519
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12552: LD_VAR 0 1
12556: PUSH
12557: LD_INT 1
12559: ARRAY
12560: PPUSH
12561: LD_VAR 0 1
12565: PUSH
12566: LD_INT 2
12568: ARRAY
12569: PPUSH
12570: CALL_OW 428
12574: NOT
12575: IFFALSE 12441
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12577: LD_VAR 0 1
12581: PUSH
12582: LD_INT 1
12584: ARRAY
12585: PPUSH
12586: LD_VAR 0 1
12590: PUSH
12591: LD_INT 2
12593: ARRAY
12594: PPUSH
12595: CALL_OW 494
// wait ( 30 ) ;
12599: LD_INT 30
12601: PPUSH
12602: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12606: LD_INT 4
12608: PPUSH
12609: LD_EXP 44
12613: PUSH
12614: LD_INT 3
12616: ARRAY
12617: PPUSH
12618: LD_VAR 0 1
12622: PUSH
12623: LD_INT 1
12625: ARRAY
12626: PPUSH
12627: LD_VAR 0 1
12631: PUSH
12632: LD_INT 2
12634: ARRAY
12635: PPUSH
12636: LD_INT 0
12638: PPUSH
12639: CALL_OW 58
// end ; enable ;
12643: ENABLE
// end ; end_of_file
12644: PPOPN 2
12646: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
12647: LD_INT 0
12649: PPUSH
12650: PPUSH
// for un in battle_flags_id do
12651: LD_ADDR_VAR 0 2
12655: PUSH
12656: LD_EXP 33
12660: PUSH
12661: FOR_IN
12662: IFFALSE 12737
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
12664: LD_VAR 0 2
12668: PPUSH
12669: LD_INT 1
12671: PUSH
12672: LD_LOC 11
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 2
12683: PUSH
12684: LD_LOC 11
12688: PUSH
12689: LD_INT 2
12691: DIV
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: LD_INT 3
12699: PUSH
12700: LD_LOC 11
12704: PUSH
12705: LD_INT 5
12707: DIV
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 20
12715: PUSH
12716: LD_LOC 11
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: PPUSH
12731: CALL_OW 423
12735: GO 12661
12737: POP
12738: POP
// end ;
12739: LD_VAR 0 1
12743: RET
// every 0 0$0.1 do var un ;
12744: GO 12746
12746: DISABLE
12747: LD_INT 0
12749: PPUSH
// begin if not def_morale_flags then
12750: LD_EXP 56
12754: NOT
12755: IFFALSE 12759
// exit ;
12757: GO 12836
// if not morale_decreasing_time then
12759: LD_EXP 14
12763: NOT
12764: IFFALSE 12768
// exit ;
12766: GO 12836
// strength = 100 ;
12768: LD_ADDR_LOC 11
12772: PUSH
12773: LD_INT 100
12775: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
12776: LD_EXP 14
12780: PPUSH
12781: CALL_OW 67
// strength := strength - 1 ;
12785: LD_ADDR_LOC 11
12789: PUSH
12790: LD_LOC 11
12794: PUSH
12795: LD_INT 1
12797: MINUS
12798: ST_TO_ADDR
// Update_Flags ;
12799: CALL 12647 0 0
// until not strength ;
12803: LD_LOC 11
12807: NOT
12808: IFFALSE 12776
// for un in battle_flags_id do
12810: LD_ADDR_VAR 0 1
12814: PUSH
12815: LD_EXP 33
12819: PUSH
12820: FOR_IN
12821: IFFALSE 12834
// KillBattleFlag ( un ) ;
12823: LD_VAR 0 1
12827: PPUSH
12828: CALL_OW 419
12832: GO 12820
12834: POP
12835: POP
// end ; end_of_file
12836: PPOPN 1
12838: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
12839: LD_INT 0
12841: PPUSH
12842: PPUSH
// if ( not IAmSpec ) then
12843: CALL_OW 531
12847: NOT
12848: IFFALSE 12864
// Result := Limits_Info ^  ;
12850: LD_ADDR_VAR 0 1
12854: PUSH
12855: LD_LOC 23
12859: PUSH
12860: LD_STRING 
12862: ADD
12863: ST_TO_ADDR
// for i := 1 to 8 do
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: DOUBLE
12870: LD_INT 1
12872: DEC
12873: ST_TO_ADDR
12874: LD_INT 8
12876: PUSH
12877: FOR_TO
12878: IFFALSE 12923
// if Cheaters [ i ] then
12880: LD_LOC 24
12884: PUSH
12885: LD_VAR 0 2
12889: ARRAY
12890: IFFALSE 12921
// Result := Result ^ [ #Cheater , i , i ] ;
12892: LD_ADDR_VAR 0 1
12896: PUSH
12897: LD_VAR 0 1
12901: PUSH
12902: LD_STRING #Cheater
12904: PUSH
12905: LD_VAR 0 2
12909: PUSH
12910: LD_VAR 0 2
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: ADD
12920: ST_TO_ADDR
12921: GO 12877
12923: POP
12924: POP
// end ;
12925: LD_VAR 0 1
12929: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
12930: LD_INT 0
12932: PPUSH
12933: PPUSH
12934: PPUSH
12935: PPUSH
12936: PPUSH
// case Game_Type of 10 :
12937: LD_EXP 46
12941: PUSH
12942: LD_INT 10
12944: DOUBLE
12945: EQUAL
12946: IFTRUE 12950
12948: GO 12961
12950: POP
// def_game_rules := 1 ; 11 :
12951: LD_ADDR_EXP 47
12955: PUSH
12956: LD_INT 1
12958: ST_TO_ADDR
12959: GO 12981
12961: LD_INT 11
12963: DOUBLE
12964: EQUAL
12965: IFTRUE 12969
12967: GO 12980
12969: POP
// def_game_rules := 3 ; end ;
12970: LD_ADDR_EXP 47
12974: PUSH
12975: LD_INT 3
12977: ST_TO_ADDR
12978: GO 12981
12980: POP
// case def_game_rules of 0 :
12981: LD_EXP 47
12985: PUSH
12986: LD_INT 0
12988: DOUBLE
12989: EQUAL
12990: IFTRUE 12994
12992: GO 12999
12994: POP
// exit ; 1 :
12995: GO 15057
12997: GO 14957
12999: LD_INT 1
13001: DOUBLE
13002: EQUAL
13003: IFTRUE 13007
13005: GO 13223
13007: POP
// begin def_base_level := 2 ;
13008: LD_ADDR_EXP 48
13012: PUSH
13013: LD_INT 2
13015: ST_TO_ADDR
// def_amount_of_people := 2 ;
13016: LD_ADDR_EXP 49
13020: PUSH
13021: LD_INT 2
13023: ST_TO_ADDR
// def_skill_level := 1 ;
13024: LD_ADDR_EXP 50
13028: PUSH
13029: LD_INT 1
13031: ST_TO_ADDR
// def_starting_resources := 2 ;
13032: LD_ADDR_EXP 51
13036: PUSH
13037: LD_INT 2
13039: ST_TO_ADDR
// def_shipments_density := 1 ;
13040: LD_ADDR_EXP 52
13044: PUSH
13045: LD_INT 1
13047: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13048: LD_ADDR_EXP 53
13052: PUSH
13053: LD_INT 0
13055: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13056: LD_ADDR_EXP 54
13060: PUSH
13061: LD_INT 1
13063: ST_TO_ADDR
// def_shared_vision := 1 ;
13064: LD_ADDR_EXP 55
13068: PUSH
13069: LD_INT 1
13071: ST_TO_ADDR
// def_morale_flags := 3 ;
13072: LD_ADDR_EXP 56
13076: PUSH
13077: LD_INT 3
13079: ST_TO_ADDR
// def_siberite_detection := 1 ;
13080: LD_ADDR_EXP 57
13084: PUSH
13085: LD_INT 1
13087: ST_TO_ADDR
// def_people_respawning := 1 ;
13088: LD_ADDR_EXP 58
13092: PUSH
13093: LD_INT 1
13095: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13096: LD_ADDR_EXP 59
13100: PUSH
13101: LD_INT 1
13103: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13104: LD_ADDR_EXP 60
13108: PUSH
13109: LD_INT 0
13111: ST_TO_ADDR
// def_builduptime := 2 ;
13112: LD_ADDR_EXP 61
13116: PUSH
13117: LD_INT 2
13119: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13120: LD_ADDR_VAR 0 2
13124: PUSH
13125: EMPTY
13126: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13127: LD_ADDR_VAR 0 3
13131: PUSH
13132: EMPTY
13133: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13134: LD_ADDR_LOC 18
13138: PUSH
13139: EMPTY
13140: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13141: LD_ADDR_LOC 19
13145: PUSH
13146: EMPTY
13147: ST_TO_ADDR
// Banned_Controls := [ ] ;
13148: LD_ADDR_LOC 20
13152: PUSH
13153: EMPTY
13154: ST_TO_ADDR
// Banned_Engines := [ ] ;
13155: LD_ADDR_LOC 21
13159: PUSH
13160: EMPTY
13161: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13162: LD_ADDR_LOC 16
13166: PUSH
13167: LD_INT 37
13169: PUSH
13170: EMPTY
13171: LIST
13172: PUSH
13173: LD_INT 4
13175: PUSH
13176: LD_INT 5
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 31
13185: PUSH
13186: LD_INT 32
13188: PUSH
13189: LD_INT 33
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
13202: LD_ADDR_LOC 17
13206: PUSH
13207: LD_INT 2
13209: PUSH
13210: LD_INT 2
13212: PUSH
13213: LD_INT 4
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: ST_TO_ADDR
// end ; 2 :
13221: GO 14957
13223: LD_INT 2
13225: DOUBLE
13226: EQUAL
13227: IFTRUE 13231
13229: GO 13440
13231: POP
// begin def_base_level := 1 ;
13232: LD_ADDR_EXP 48
13236: PUSH
13237: LD_INT 1
13239: ST_TO_ADDR
// def_amount_of_people := 2 ;
13240: LD_ADDR_EXP 49
13244: PUSH
13245: LD_INT 2
13247: ST_TO_ADDR
// def_skill_level := 3 ;
13248: LD_ADDR_EXP 50
13252: PUSH
13253: LD_INT 3
13255: ST_TO_ADDR
// def_starting_resources := 3 ;
13256: LD_ADDR_EXP 51
13260: PUSH
13261: LD_INT 3
13263: ST_TO_ADDR
// def_shipments_density := 2 ;
13264: LD_ADDR_EXP 52
13268: PUSH
13269: LD_INT 2
13271: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13272: LD_ADDR_EXP 53
13276: PUSH
13277: LD_INT 1
13279: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13280: LD_ADDR_EXP 54
13284: PUSH
13285: LD_INT 2
13287: ST_TO_ADDR
// def_shared_vision := 1 ;
13288: LD_ADDR_EXP 55
13292: PUSH
13293: LD_INT 1
13295: ST_TO_ADDR
// def_morale_flags := 0 ;
13296: LD_ADDR_EXP 56
13300: PUSH
13301: LD_INT 0
13303: ST_TO_ADDR
// def_siberite_detection := 1 ;
13304: LD_ADDR_EXP 57
13308: PUSH
13309: LD_INT 1
13311: ST_TO_ADDR
// def_people_respawning := 0 ;
13312: LD_ADDR_EXP 58
13316: PUSH
13317: LD_INT 0
13319: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13320: LD_ADDR_EXP 59
13324: PUSH
13325: LD_INT 0
13327: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13328: LD_ADDR_EXP 60
13332: PUSH
13333: LD_INT 0
13335: ST_TO_ADDR
// def_builduptime := 2 ;
13336: LD_ADDR_EXP 61
13340: PUSH
13341: LD_INT 2
13343: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13344: LD_ADDR_VAR 0 2
13348: PUSH
13349: LD_INT 1
13351: PUSH
13352: EMPTY
13353: LIST
13354: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13355: LD_ADDR_VAR 0 3
13359: PUSH
13360: EMPTY
13361: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13362: LD_ADDR_LOC 18
13366: PUSH
13367: EMPTY
13368: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13369: LD_ADDR_LOC 19
13373: PUSH
13374: EMPTY
13375: ST_TO_ADDR
// Banned_Controls := [ ] ;
13376: LD_ADDR_LOC 20
13380: PUSH
13381: EMPTY
13382: ST_TO_ADDR
// Banned_Engines := [ ] ;
13383: LD_ADDR_LOC 21
13387: PUSH
13388: EMPTY
13389: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13390: LD_ADDR_LOC 16
13394: PUSH
13395: LD_INT 4
13397: PUSH
13398: LD_INT 5
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 31
13407: PUSH
13408: LD_INT 32
13410: PUSH
13411: LD_INT 33
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
13423: LD_ADDR_LOC 17
13427: PUSH
13428: LD_INT 1
13430: PUSH
13431: LD_INT 2
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: ST_TO_ADDR
// end ; 3 :
13438: GO 14957
13440: LD_INT 3
13442: DOUBLE
13443: EQUAL
13444: IFTRUE 13448
13446: GO 13691
13448: POP
// begin def_base_level := 1 ;
13449: LD_ADDR_EXP 48
13453: PUSH
13454: LD_INT 1
13456: ST_TO_ADDR
// def_amount_of_people := 2 ;
13457: LD_ADDR_EXP 49
13461: PUSH
13462: LD_INT 2
13464: ST_TO_ADDR
// def_skill_level := 3 ;
13465: LD_ADDR_EXP 50
13469: PUSH
13470: LD_INT 3
13472: ST_TO_ADDR
// def_starting_resources := 3 ;
13473: LD_ADDR_EXP 51
13477: PUSH
13478: LD_INT 3
13480: ST_TO_ADDR
// def_shipments_density := 1 ;
13481: LD_ADDR_EXP 52
13485: PUSH
13486: LD_INT 1
13488: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13489: LD_ADDR_EXP 53
13493: PUSH
13494: LD_INT 0
13496: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13497: LD_ADDR_EXP 54
13501: PUSH
13502: LD_INT 1
13504: ST_TO_ADDR
// def_shared_vision := 1 ;
13505: LD_ADDR_EXP 55
13509: PUSH
13510: LD_INT 1
13512: ST_TO_ADDR
// def_morale_flags := 0 ;
13513: LD_ADDR_EXP 56
13517: PUSH
13518: LD_INT 0
13520: ST_TO_ADDR
// def_siberite_detection := 1 ;
13521: LD_ADDR_EXP 57
13525: PUSH
13526: LD_INT 1
13528: ST_TO_ADDR
// def_people_respawning := 0 ;
13529: LD_ADDR_EXP 58
13533: PUSH
13534: LD_INT 0
13536: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
13537: LD_ADDR_EXP 59
13541: PUSH
13542: LD_INT 2
13544: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13545: LD_ADDR_EXP 60
13549: PUSH
13550: LD_INT 0
13552: ST_TO_ADDR
// def_builduptime := 1 ;
13553: LD_ADDR_EXP 61
13557: PUSH
13558: LD_INT 1
13560: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
13561: LD_ADDR_VAR 0 2
13565: PUSH
13566: LD_INT 23
13568: PUSH
13569: EMPTY
13570: LIST
13571: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
13572: LD_ADDR_VAR 0 3
13576: PUSH
13577: LD_INT 2
13579: PUSH
13580: LD_INT 37
13582: PUSH
13583: LD_INT 32
13585: PUSH
13586: LD_INT 33
13588: PUSH
13589: LD_INT 36
13591: PUSH
13592: LD_INT 16
13594: PUSH
13595: LD_INT 23
13597: PUSH
13598: LD_INT 21
13600: PUSH
13601: LD_INT 18
13603: PUSH
13604: LD_INT 22
13606: PUSH
13607: LD_INT 20
13609: PUSH
13610: LD_INT 19
13612: PUSH
13613: LD_INT 25
13615: PUSH
13616: LD_INT 17
13618: PUSH
13619: LD_INT 24
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13639: LD_ADDR_LOC 18
13643: PUSH
13644: EMPTY
13645: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13646: LD_ADDR_LOC 19
13650: PUSH
13651: EMPTY
13652: ST_TO_ADDR
// Banned_Controls := [ ] ;
13653: LD_ADDR_LOC 20
13657: PUSH
13658: EMPTY
13659: ST_TO_ADDR
// Banned_Engines := [ ] ;
13660: LD_ADDR_LOC 21
13664: PUSH
13665: EMPTY
13666: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13667: LD_ADDR_LOC 16
13671: PUSH
13672: EMPTY
13673: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13674: LD_ADDR_LOC 17
13678: PUSH
13679: EMPTY
13680: ST_TO_ADDR
// No_Mechs := true ;
13681: LD_ADDR_EXP 62
13685: PUSH
13686: LD_INT 1
13688: ST_TO_ADDR
// end ; 4 :
13689: GO 14957
13691: LD_INT 4
13693: DOUBLE
13694: EQUAL
13695: IFTRUE 13699
13697: GO 13874
13699: POP
// begin def_base_level := 1 ;
13700: LD_ADDR_EXP 48
13704: PUSH
13705: LD_INT 1
13707: ST_TO_ADDR
// def_amount_of_people := 2 ;
13708: LD_ADDR_EXP 49
13712: PUSH
13713: LD_INT 2
13715: ST_TO_ADDR
// def_skill_level := 3 ;
13716: LD_ADDR_EXP 50
13720: PUSH
13721: LD_INT 3
13723: ST_TO_ADDR
// def_starting_resources := 3 ;
13724: LD_ADDR_EXP 51
13728: PUSH
13729: LD_INT 3
13731: ST_TO_ADDR
// def_shipments_density := 2 ;
13732: LD_ADDR_EXP 52
13736: PUSH
13737: LD_INT 2
13739: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13740: LD_ADDR_EXP 53
13744: PUSH
13745: LD_INT 1
13747: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13748: LD_ADDR_EXP 54
13752: PUSH
13753: LD_INT 2
13755: ST_TO_ADDR
// def_shared_vision := 1 ;
13756: LD_ADDR_EXP 55
13760: PUSH
13761: LD_INT 1
13763: ST_TO_ADDR
// def_morale_flags := 0 ;
13764: LD_ADDR_EXP 56
13768: PUSH
13769: LD_INT 0
13771: ST_TO_ADDR
// def_siberite_detection := 1 ;
13772: LD_ADDR_EXP 57
13776: PUSH
13777: LD_INT 1
13779: ST_TO_ADDR
// def_people_respawning := 0 ;
13780: LD_ADDR_EXP 58
13784: PUSH
13785: LD_INT 0
13787: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13788: LD_ADDR_EXP 59
13792: PUSH
13793: LD_INT 0
13795: ST_TO_ADDR
// def_siberite_bomb := 1 ;
13796: LD_ADDR_EXP 60
13800: PUSH
13801: LD_INT 1
13803: ST_TO_ADDR
// def_builduptime := 3 ;
13804: LD_ADDR_EXP 61
13808: PUSH
13809: LD_INT 3
13811: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13812: LD_ADDR_VAR 0 2
13816: PUSH
13817: LD_INT 1
13819: PUSH
13820: EMPTY
13821: LIST
13822: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13823: LD_ADDR_VAR 0 3
13827: PUSH
13828: EMPTY
13829: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13830: LD_ADDR_LOC 18
13834: PUSH
13835: EMPTY
13836: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13837: LD_ADDR_LOC 19
13841: PUSH
13842: EMPTY
13843: ST_TO_ADDR
// Banned_Controls := [ ] ;
13844: LD_ADDR_LOC 20
13848: PUSH
13849: EMPTY
13850: ST_TO_ADDR
// Banned_Engines := [ ] ;
13851: LD_ADDR_LOC 21
13855: PUSH
13856: EMPTY
13857: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13858: LD_ADDR_LOC 16
13862: PUSH
13863: EMPTY
13864: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13865: LD_ADDR_LOC 17
13869: PUSH
13870: EMPTY
13871: ST_TO_ADDR
// end ; 5 :
13872: GO 14957
13874: LD_INT 5
13876: DOUBLE
13877: EQUAL
13878: IFTRUE 13882
13880: GO 14131
13882: POP
// begin def_base_level := 0 ;
13883: LD_ADDR_EXP 48
13887: PUSH
13888: LD_INT 0
13890: ST_TO_ADDR
// def_amount_of_people := 0 ;
13891: LD_ADDR_EXP 49
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// def_skill_level := 0 ;
13899: LD_ADDR_EXP 50
13903: PUSH
13904: LD_INT 0
13906: ST_TO_ADDR
// def_starting_resources := 0 ;
13907: LD_ADDR_EXP 51
13911: PUSH
13912: LD_INT 0
13914: ST_TO_ADDR
// def_shipments_density := 0 ;
13915: LD_ADDR_EXP 52
13919: PUSH
13920: LD_INT 0
13922: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13923: LD_ADDR_EXP 53
13927: PUSH
13928: LD_INT 0
13930: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
13931: LD_ADDR_EXP 54
13935: PUSH
13936: LD_INT 0
13938: ST_TO_ADDR
// def_shared_vision := 1 ;
13939: LD_ADDR_EXP 55
13943: PUSH
13944: LD_INT 1
13946: ST_TO_ADDR
// def_morale_flags := 0 ;
13947: LD_ADDR_EXP 56
13951: PUSH
13952: LD_INT 0
13954: ST_TO_ADDR
// def_siberite_detection := 0 ;
13955: LD_ADDR_EXP 57
13959: PUSH
13960: LD_INT 0
13962: ST_TO_ADDR
// def_people_respawning := 1 ;
13963: LD_ADDR_EXP 58
13967: PUSH
13968: LD_INT 1
13970: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13971: LD_ADDR_EXP 59
13975: PUSH
13976: LD_INT 1
13978: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13979: LD_ADDR_EXP 60
13983: PUSH
13984: LD_INT 0
13986: ST_TO_ADDR
// def_builduptime := 0 ;
13987: LD_ADDR_EXP 61
13991: PUSH
13992: LD_INT 0
13994: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
13995: LD_ADDR_VAR 0 2
13999: PUSH
14000: LD_INT 10
14002: PUSH
14003: LD_INT 3
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
14010: LD_ADDR_VAR 0 3
14014: PUSH
14015: LD_INT 12
14017: PUSH
14018: LD_INT 11
14020: PUSH
14021: LD_INT 14
14023: PUSH
14024: LD_INT 13
14026: PUSH
14027: LD_INT 5
14029: PUSH
14030: LD_INT 24
14032: PUSH
14033: LD_INT 21
14035: PUSH
14036: LD_INT 33
14038: PUSH
14039: LD_INT 36
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
14053: LD_ADDR_LOC 18
14057: PUSH
14058: LD_INT 31
14060: PUSH
14061: EMPTY
14062: LIST
14063: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14064: LD_ADDR_LOC 19
14068: PUSH
14069: EMPTY
14070: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
14071: LD_ADDR_LOC 20
14075: PUSH
14076: LD_INT 2
14078: PUSH
14079: EMPTY
14080: LIST
14081: ST_TO_ADDR
// Banned_Engines := [ ] ;
14082: LD_ADDR_LOC 21
14086: PUSH
14087: EMPTY
14088: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
14089: LD_ADDR_LOC 16
14093: PUSH
14094: LD_INT 4
14096: PUSH
14097: EMPTY
14098: LIST
14099: PUSH
14100: LD_INT 31
14102: PUSH
14103: LD_INT 32
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
14114: LD_ADDR_LOC 17
14118: PUSH
14119: LD_INT 1
14121: PUSH
14122: LD_INT 1
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: ST_TO_ADDR
// end ; 6 :
14129: GO 14957
14131: LD_INT 6
14133: DOUBLE
14134: EQUAL
14135: IFTRUE 14139
14137: GO 14342
14139: POP
// begin def_base_level := 1 ;
14140: LD_ADDR_EXP 48
14144: PUSH
14145: LD_INT 1
14147: ST_TO_ADDR
// def_amount_of_people := 2 ;
14148: LD_ADDR_EXP 49
14152: PUSH
14153: LD_INT 2
14155: ST_TO_ADDR
// def_skill_level := 3 ;
14156: LD_ADDR_EXP 50
14160: PUSH
14161: LD_INT 3
14163: ST_TO_ADDR
// def_starting_resources := 3 ;
14164: LD_ADDR_EXP 51
14168: PUSH
14169: LD_INT 3
14171: ST_TO_ADDR
// def_shipments_density := 1 ;
14172: LD_ADDR_EXP 52
14176: PUSH
14177: LD_INT 1
14179: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14180: LD_ADDR_EXP 53
14184: PUSH
14185: LD_INT 0
14187: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14188: LD_ADDR_EXP 54
14192: PUSH
14193: LD_INT 1
14195: ST_TO_ADDR
// def_shared_vision := 1 ;
14196: LD_ADDR_EXP 55
14200: PUSH
14201: LD_INT 1
14203: ST_TO_ADDR
// def_morale_flags := 0 ;
14204: LD_ADDR_EXP 56
14208: PUSH
14209: LD_INT 0
14211: ST_TO_ADDR
// def_siberite_detection := 1 ;
14212: LD_ADDR_EXP 57
14216: PUSH
14217: LD_INT 1
14219: ST_TO_ADDR
// def_people_respawning := 2 ;
14220: LD_ADDR_EXP 58
14224: PUSH
14225: LD_INT 2
14227: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14228: LD_ADDR_EXP 59
14232: PUSH
14233: LD_INT 1
14235: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14236: LD_ADDR_EXP 60
14240: PUSH
14241: LD_INT 0
14243: ST_TO_ADDR
// def_builduptime := 1 ;
14244: LD_ADDR_EXP 61
14248: PUSH
14249: LD_INT 1
14251: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14252: LD_ADDR_VAR 0 2
14256: PUSH
14257: LD_INT 23
14259: PUSH
14260: EMPTY
14261: LIST
14262: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
14263: LD_ADDR_VAR 0 3
14267: PUSH
14268: LD_INT 2
14270: PUSH
14271: LD_INT 37
14273: PUSH
14274: LD_INT 31
14276: PUSH
14277: LD_INT 32
14279: PUSH
14280: LD_INT 33
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14290: LD_ADDR_LOC 18
14294: PUSH
14295: EMPTY
14296: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14297: LD_ADDR_LOC 19
14301: PUSH
14302: EMPTY
14303: ST_TO_ADDR
// Banned_Controls := [ ] ;
14304: LD_ADDR_LOC 20
14308: PUSH
14309: EMPTY
14310: ST_TO_ADDR
// Banned_Engines := [ ] ;
14311: LD_ADDR_LOC 21
14315: PUSH
14316: EMPTY
14317: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14318: LD_ADDR_LOC 16
14322: PUSH
14323: EMPTY
14324: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14325: LD_ADDR_LOC 17
14329: PUSH
14330: EMPTY
14331: ST_TO_ADDR
// No_Mechs := true ;
14332: LD_ADDR_EXP 62
14336: PUSH
14337: LD_INT 1
14339: ST_TO_ADDR
// end ; 7 :
14340: GO 14957
14342: LD_INT 7
14344: DOUBLE
14345: EQUAL
14346: IFTRUE 14350
14348: GO 14548
14350: POP
// begin def_base_level := 1 ;
14351: LD_ADDR_EXP 48
14355: PUSH
14356: LD_INT 1
14358: ST_TO_ADDR
// def_amount_of_people := 2 ;
14359: LD_ADDR_EXP 49
14363: PUSH
14364: LD_INT 2
14366: ST_TO_ADDR
// def_skill_level := 3 ;
14367: LD_ADDR_EXP 50
14371: PUSH
14372: LD_INT 3
14374: ST_TO_ADDR
// def_starting_resources := 3 ;
14375: LD_ADDR_EXP 51
14379: PUSH
14380: LD_INT 3
14382: ST_TO_ADDR
// def_shipments_density := 1 ;
14383: LD_ADDR_EXP 52
14387: PUSH
14388: LD_INT 1
14390: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14391: LD_ADDR_EXP 53
14395: PUSH
14396: LD_INT 1
14398: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14399: LD_ADDR_EXP 54
14403: PUSH
14404: LD_INT 2
14406: ST_TO_ADDR
// def_shared_vision := 1 ;
14407: LD_ADDR_EXP 55
14411: PUSH
14412: LD_INT 1
14414: ST_TO_ADDR
// def_morale_flags := 0 ;
14415: LD_ADDR_EXP 56
14419: PUSH
14420: LD_INT 0
14422: ST_TO_ADDR
// def_siberite_detection := 1 ;
14423: LD_ADDR_EXP 57
14427: PUSH
14428: LD_INT 1
14430: ST_TO_ADDR
// def_people_respawning := 0 ;
14431: LD_ADDR_EXP 58
14435: PUSH
14436: LD_INT 0
14438: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14439: LD_ADDR_EXP 59
14443: PUSH
14444: LD_INT 1
14446: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14447: LD_ADDR_EXP 60
14451: PUSH
14452: LD_INT 0
14454: ST_TO_ADDR
// def_builduptime := 3 ;
14455: LD_ADDR_EXP 61
14459: PUSH
14460: LD_INT 3
14462: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14463: LD_ADDR_VAR 0 2
14467: PUSH
14468: LD_INT 23
14470: PUSH
14471: EMPTY
14472: LIST
14473: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
14474: LD_ADDR_VAR 0 3
14478: PUSH
14479: LD_INT 37
14481: PUSH
14482: EMPTY
14483: LIST
14484: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14485: LD_ADDR_LOC 18
14489: PUSH
14490: EMPTY
14491: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14492: LD_ADDR_LOC 19
14496: PUSH
14497: EMPTY
14498: ST_TO_ADDR
// Banned_Controls := [ ] ;
14499: LD_ADDR_LOC 20
14503: PUSH
14504: EMPTY
14505: ST_TO_ADDR
// Banned_Engines := [ ] ;
14506: LD_ADDR_LOC 21
14510: PUSH
14511: EMPTY
14512: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14513: LD_ADDR_LOC 16
14517: PUSH
14518: LD_INT 31
14520: PUSH
14521: LD_INT 32
14523: PUSH
14524: LD_INT 33
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: LIST
14531: PUSH
14532: EMPTY
14533: LIST
14534: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
14535: LD_ADDR_LOC 17
14539: PUSH
14540: LD_INT 10
14542: PUSH
14543: EMPTY
14544: LIST
14545: ST_TO_ADDR
// end ; 8 :
14546: GO 14957
14548: LD_INT 8
14550: DOUBLE
14551: EQUAL
14552: IFTRUE 14556
14554: GO 14956
14556: POP
// begin def_base_level := 0 ;
14557: LD_ADDR_EXP 48
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
14565: LD_ADDR_EXP 49
14569: PUSH
14570: LD_INT 0
14572: PPUSH
14573: LD_INT 1
14575: PPUSH
14576: CALL_OW 12
14580: ST_TO_ADDR
// def_skill_level := 0 ;
14581: LD_ADDR_EXP 50
14585: PUSH
14586: LD_INT 0
14588: ST_TO_ADDR
// def_starting_resources := 2 ;
14589: LD_ADDR_EXP 51
14593: PUSH
14594: LD_INT 2
14596: ST_TO_ADDR
// def_shipments_density := 1 ;
14597: LD_ADDR_EXP 52
14601: PUSH
14602: LD_INT 1
14604: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14605: LD_ADDR_EXP 53
14609: PUSH
14610: LD_INT 0
14612: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
14613: LD_ADDR_EXP 54
14617: PUSH
14618: LD_INT 0
14620: ST_TO_ADDR
// def_shared_vision := 1 ;
14621: LD_ADDR_EXP 55
14625: PUSH
14626: LD_INT 1
14628: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
14629: LD_ADDR_EXP 56
14633: PUSH
14634: LD_INT 0
14636: PPUSH
14637: LD_INT 2
14639: PPUSH
14640: CALL_OW 12
14644: ST_TO_ADDR
// def_siberite_detection := 0 ;
14645: LD_ADDR_EXP 57
14649: PUSH
14650: LD_INT 0
14652: ST_TO_ADDR
// def_people_respawning := 0 ;
14653: LD_ADDR_EXP 58
14657: PUSH
14658: LD_INT 0
14660: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14661: LD_ADDR_EXP 59
14665: PUSH
14666: LD_INT 2
14668: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14669: LD_ADDR_EXP 60
14673: PUSH
14674: LD_INT 0
14676: ST_TO_ADDR
// def_builduptime := 0 ;
14677: LD_ADDR_EXP 61
14681: PUSH
14682: LD_INT 0
14684: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
14685: LD_ADDR_VAR 0 2
14689: PUSH
14690: LD_INT 23
14692: PUSH
14693: LD_INT 20
14695: PUSH
14696: LD_INT 40
14698: PUSH
14699: LD_INT 47
14701: PUSH
14702: LD_INT 46
14704: PUSH
14705: LD_INT 39
14707: PUSH
14708: LD_INT 71
14710: PUSH
14711: LD_INT 34
14713: PUSH
14714: LD_INT 41
14716: PUSH
14717: LD_INT 44
14719: PUSH
14720: LD_INT 17
14722: PUSH
14723: LD_INT 16
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
14740: LD_ADDR_VAR 0 3
14744: PUSH
14745: LD_INT 37
14747: PUSH
14748: LD_INT 5
14750: PUSH
14751: LD_INT 13
14753: PUSH
14754: LD_INT 34
14756: PUSH
14757: LD_INT 12
14759: PUSH
14760: LD_INT 15
14762: PUSH
14763: LD_INT 11
14765: PUSH
14766: LD_INT 14
14768: PUSH
14769: LD_INT 29
14771: PUSH
14772: LD_INT 30
14774: PUSH
14775: LD_INT 28
14777: PUSH
14778: LD_INT 24
14780: PUSH
14781: LD_INT 25
14783: PUSH
14784: LD_INT 20
14786: PUSH
14787: LD_INT 21
14789: PUSH
14790: LD_INT 22
14792: PUSH
14793: LD_INT 36
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14815: LD_ADDR_LOC 18
14819: PUSH
14820: EMPTY
14821: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
14822: LD_ADDR_LOC 19
14826: PUSH
14827: LD_INT 14
14829: PUSH
14830: EMPTY
14831: LIST
14832: ST_TO_ADDR
// Banned_Controls := [ ] ;
14833: LD_ADDR_LOC 20
14837: PUSH
14838: EMPTY
14839: ST_TO_ADDR
// Banned_Engines := [ ] ;
14840: LD_ADDR_LOC 21
14844: PUSH
14845: EMPTY
14846: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
14847: LD_ADDR_LOC 16
14851: PUSH
14852: LD_INT 31
14854: PUSH
14855: LD_INT 32
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 4
14864: PUSH
14865: EMPTY
14866: LIST
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
14872: LD_ADDR_LOC 17
14876: PUSH
14877: LD_INT 2
14879: PUSH
14880: LD_INT 1
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: ST_TO_ADDR
// for i := 1 to 8 do
14887: LD_ADDR_VAR 0 4
14891: PUSH
14892: DOUBLE
14893: LD_INT 1
14895: DEC
14896: ST_TO_ADDR
14897: LD_INT 8
14899: PUSH
14900: FOR_TO
14901: IFFALSE 14952
// if ( Side_Nations [ i ] = 3 ) then
14903: LD_EXP 24
14907: PUSH
14908: LD_VAR 0 4
14912: ARRAY
14913: PUSH
14914: LD_INT 3
14916: EQUAL
14917: IFFALSE 14950
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
14919: LD_ADDR_EXP 24
14923: PUSH
14924: LD_EXP 24
14928: PPUSH
14929: LD_VAR 0 4
14933: PPUSH
14934: LD_INT 1
14936: PPUSH
14937: LD_INT 2
14939: PPUSH
14940: CALL_OW 12
14944: PPUSH
14945: CALL_OW 1
14949: ST_TO_ADDR
14950: GO 14900
14952: POP
14953: POP
// end ; end ;
14954: GO 14957
14956: POP
// for i := 1 to 8 do
14957: LD_ADDR_VAR 0 4
14961: PUSH
14962: DOUBLE
14963: LD_INT 1
14965: DEC
14966: ST_TO_ADDR
14967: LD_INT 8
14969: PUSH
14970: FOR_TO
14971: IFFALSE 15055
// if Side_Positions [ i ] then
14973: LD_EXP 23
14977: PUSH
14978: LD_VAR 0 4
14982: ARRAY
14983: IFFALSE 15053
// begin for j in Unavailable_Techs do
14985: LD_ADDR_VAR 0 5
14989: PUSH
14990: LD_VAR 0 2
14994: PUSH
14995: FOR_IN
14996: IFFALSE 15017
// SetTech ( j , i , 0 ) ;
14998: LD_VAR 0 5
15002: PPUSH
15003: LD_VAR 0 4
15007: PPUSH
15008: LD_INT 0
15010: PPUSH
15011: CALL_OW 322
15015: GO 14995
15017: POP
15018: POP
// for j in Unavailable_Builds do
15019: LD_ADDR_VAR 0 5
15023: PUSH
15024: LD_VAR 0 3
15028: PUSH
15029: FOR_IN
15030: IFFALSE 15051
// SetRestrict ( j , i , 0 ) ;
15032: LD_VAR 0 5
15036: PPUSH
15037: LD_VAR 0 4
15041: PPUSH
15042: LD_INT 0
15044: PPUSH
15045: CALL_OW 324
15049: GO 15029
15051: POP
15052: POP
// end ;
15053: GO 14970
15055: POP
15056: POP
// end ;
15057: LD_VAR 0 1
15061: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
15062: LD_INT 0
15064: PPUSH
15065: PPUSH
15066: PPUSH
15067: PPUSH
15068: PPUSH
15069: PPUSH
15070: PPUSH
// for i := 1 to Restricted_Builds do
15071: LD_ADDR_VAR 0 2
15075: PUSH
15076: DOUBLE
15077: LD_INT 1
15079: DEC
15080: ST_TO_ADDR
15081: LD_LOC 16
15085: PUSH
15086: FOR_TO
15087: IFFALSE 15397
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
15089: LD_LOC 16
15093: PUSH
15094: LD_VAR 0 2
15098: ARRAY
15099: PUSH
15100: LD_INT 1
15102: ARRAY
15103: PUSH
15104: LD_INT 31
15106: DOUBLE
15107: EQUAL
15108: IFTRUE 15124
15110: LD_INT 32
15112: DOUBLE
15113: EQUAL
15114: IFTRUE 15124
15116: LD_INT 33
15118: DOUBLE
15119: EQUAL
15120: IFTRUE 15124
15122: GO 15135
15124: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
15125: LD_ADDR_VAR 0 6
15129: PUSH
15130: LD_STRING #Turrets
15132: ST_TO_ADDR
15133: GO 15180
15135: LD_INT 4
15137: DOUBLE
15138: EQUAL
15139: IFTRUE 15149
15141: LD_INT 5
15143: DOUBLE
15144: EQUAL
15145: IFTRUE 15149
15147: GO 15160
15149: POP
// btype := #Armouries ; b_Behemoth :
15150: LD_ADDR_VAR 0 6
15154: PUSH
15155: LD_STRING #Armouries
15157: ST_TO_ADDR
15158: GO 15180
15160: LD_INT 37
15162: DOUBLE
15163: EQUAL
15164: IFTRUE 15168
15166: GO 15179
15168: POP
// btype := #Behemoths ; end ;
15169: LD_ADDR_VAR 0 6
15173: PUSH
15174: LD_STRING #Behemoths
15176: ST_TO_ADDR
15177: GO 15180
15179: POP
// list := [ ] ;
15180: LD_ADDR_VAR 0 7
15184: PUSH
15185: EMPTY
15186: ST_TO_ADDR
// for j := 1 to 8 do
15187: LD_ADDR_VAR 0 3
15191: PUSH
15192: DOUBLE
15193: LD_INT 1
15195: DEC
15196: ST_TO_ADDR
15197: LD_INT 8
15199: PUSH
15200: FOR_TO
15201: IFFALSE 15294
// if Side_Positions [ j ] then
15203: LD_EXP 23
15207: PUSH
15208: LD_VAR 0 3
15212: ARRAY
15213: IFFALSE 15292
// begin amount := 0 ;
15215: LD_ADDR_VAR 0 5
15219: PUSH
15220: LD_INT 0
15222: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
15223: LD_ADDR_VAR 0 4
15227: PUSH
15228: LD_LOC 16
15232: PUSH
15233: LD_VAR 0 2
15237: ARRAY
15238: PUSH
15239: FOR_IN
15240: IFFALSE 15288
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
15242: LD_ADDR_VAR 0 5
15246: PUSH
15247: LD_VAR 0 5
15251: PUSH
15252: LD_INT 22
15254: PUSH
15255: LD_VAR 0 3
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 30
15266: PUSH
15267: LD_VAR 0 4
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PPUSH
15280: CALL_OW 69
15284: PLUS
15285: ST_TO_ADDR
15286: GO 15239
15288: POP
15289: POP
// break ;
15290: GO 15294
// end ;
15292: GO 15200
15294: POP
15295: POP
// list := [ ] ;
15296: LD_ADDR_VAR 0 7
15300: PUSH
15301: EMPTY
15302: ST_TO_ADDR
// for j := 1 to 8 do
15303: LD_ADDR_VAR 0 3
15307: PUSH
15308: DOUBLE
15309: LD_INT 1
15311: DEC
15312: ST_TO_ADDR
15313: LD_INT 8
15315: PUSH
15316: FOR_TO
15317: IFFALSE 15337
// list := list ^ amount ;
15319: LD_ADDR_VAR 0 7
15323: PUSH
15324: LD_VAR 0 7
15328: PUSH
15329: LD_VAR 0 5
15333: ADD
15334: ST_TO_ADDR
15335: GO 15316
15337: POP
15338: POP
// Already_Built := Already_Built ^ [ list ] ;
15339: LD_ADDR_LOC 22
15343: PUSH
15344: LD_LOC 22
15348: PUSH
15349: LD_VAR 0 7
15353: PUSH
15354: EMPTY
15355: LIST
15356: ADD
15357: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15358: LD_ADDR_LOC 23
15362: PUSH
15363: LD_LOC 23
15367: PUSH
15368: LD_VAR 0 6
15372: PUSH
15373: LD_VAR 0 5
15377: PUSH
15378: LD_LOC 17
15382: PUSH
15383: LD_VAR 0 2
15387: ARRAY
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: LIST
15393: ADD
15394: ST_TO_ADDR
// end ;
15395: GO 15086
15397: POP
15398: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15399: LD_ADDR_LOC 24
15403: PUSH
15404: LD_INT 0
15406: PUSH
15407: LD_INT 0
15409: PUSH
15410: LD_INT 0
15412: PUSH
15413: LD_INT 0
15415: PUSH
15416: LD_INT 0
15418: PUSH
15419: LD_INT 0
15421: PUSH
15422: LD_INT 0
15424: PUSH
15425: LD_INT 0
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: ST_TO_ADDR
// if Limits_Info then
15438: LD_LOC 23
15442: IFFALSE 15458
// Limits_Info := #Limits ^ Limits_Info ;
15444: LD_ADDR_LOC 23
15448: PUSH
15449: LD_STRING #Limits
15451: PUSH
15452: LD_LOC 23
15456: ADD
15457: ST_TO_ADDR
// end ;
15458: LD_VAR 0 1
15462: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15463: LD_INT 0
15465: PPUSH
15466: PPUSH
15467: PPUSH
15468: PPUSH
// for i := 1 to Restricted_Builds do
15469: LD_ADDR_VAR 0 7
15473: PUSH
15474: DOUBLE
15475: LD_INT 1
15477: DEC
15478: ST_TO_ADDR
15479: LD_LOC 16
15483: PUSH
15484: FOR_TO
15485: IFFALSE 15908
// if BType in Restricted_Builds [ i ] then
15487: LD_VAR 0 2
15491: PUSH
15492: LD_LOC 16
15496: PUSH
15497: LD_VAR 0 7
15501: ARRAY
15502: IN
15503: IFFALSE 15906
// begin if old_side then
15505: LD_VAR 0 4
15509: IFFALSE 15635
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15511: LD_LOC 22
15515: PUSH
15516: LD_VAR 0 7
15520: ARRAY
15521: PUSH
15522: LD_VAR 0 3
15526: ARRAY
15527: PUSH
15528: LD_VAR 0 5
15532: PLUS
15533: PUSH
15534: LD_LOC 17
15538: PUSH
15539: LD_VAR 0 7
15543: ARRAY
15544: GREATER
15545: IFFALSE 15571
// begin SetSide ( un , old_side ) ;
15547: LD_VAR 0 1
15551: PPUSH
15552: LD_VAR 0 4
15556: PPUSH
15557: CALL_OW 235
// count := 0 ;
15561: LD_ADDR_VAR 0 5
15565: PUSH
15566: LD_INT 0
15568: ST_TO_ADDR
// end else
15569: GO 15635
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15571: LD_ADDR_LOC 22
15575: PUSH
15576: LD_LOC 22
15580: PPUSH
15581: LD_VAR 0 7
15585: PPUSH
15586: LD_LOC 22
15590: PUSH
15591: LD_VAR 0 7
15595: ARRAY
15596: PPUSH
15597: LD_VAR 0 4
15601: PPUSH
15602: LD_LOC 22
15606: PUSH
15607: LD_VAR 0 7
15611: ARRAY
15612: PUSH
15613: LD_VAR 0 4
15617: ARRAY
15618: PUSH
15619: LD_VAR 0 5
15623: MINUS
15624: PPUSH
15625: CALL_OW 1
15629: PPUSH
15630: CALL_OW 1
15634: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15635: LD_ADDR_LOC 22
15639: PUSH
15640: LD_LOC 22
15644: PPUSH
15645: LD_VAR 0 7
15649: PPUSH
15650: LD_LOC 22
15654: PUSH
15655: LD_VAR 0 7
15659: ARRAY
15660: PPUSH
15661: LD_VAR 0 3
15665: PPUSH
15666: LD_LOC 22
15670: PUSH
15671: LD_VAR 0 7
15675: ARRAY
15676: PUSH
15677: LD_VAR 0 3
15681: ARRAY
15682: PUSH
15683: LD_VAR 0 5
15687: PLUS
15688: PPUSH
15689: CALL_OW 1
15693: PPUSH
15694: CALL_OW 1
15698: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15699: LD_VAR 0 5
15703: PUSH
15704: LD_INT 0
15706: NONEQUAL
15707: PUSH
15708: LD_VAR 0 3
15712: PUSH
15713: LD_OWVAR 2
15717: EQUAL
15718: AND
15719: IFFALSE 15762
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15721: LD_ADDR_LOC 23
15725: PUSH
15726: LD_LOC 23
15730: PPUSH
15731: LD_INT 3
15733: PUSH
15734: LD_VAR 0 7
15738: MUL
15739: PPUSH
15740: LD_LOC 22
15744: PUSH
15745: LD_VAR 0 7
15749: ARRAY
15750: PUSH
15751: LD_VAR 0 3
15755: ARRAY
15756: PPUSH
15757: CALL_OW 1
15761: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15762: LD_LOC 22
15766: PUSH
15767: LD_VAR 0 7
15771: ARRAY
15772: PUSH
15773: LD_VAR 0 3
15777: ARRAY
15778: PUSH
15779: LD_LOC 17
15783: PUSH
15784: LD_VAR 0 7
15788: ARRAY
15789: GREATER
15790: IFFALSE 15817
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15792: LD_ADDR_LOC 24
15796: PUSH
15797: LD_LOC 24
15801: PPUSH
15802: LD_VAR 0 3
15806: PPUSH
15807: LD_INT 1
15809: PPUSH
15810: CALL_OW 1
15814: ST_TO_ADDR
// end else
15815: GO 15904
// begin for j := 1 to Restricted_Builds do
15817: LD_ADDR_VAR 0 8
15821: PUSH
15822: DOUBLE
15823: LD_INT 1
15825: DEC
15826: ST_TO_ADDR
15827: LD_LOC 16
15831: PUSH
15832: FOR_TO
15833: IFFALSE 15877
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15835: LD_LOC 22
15839: PUSH
15840: LD_VAR 0 8
15844: ARRAY
15845: PUSH
15846: LD_VAR 0 3
15850: ARRAY
15851: PUSH
15852: LD_LOC 17
15856: PUSH
15857: LD_VAR 0 8
15861: ARRAY
15862: GREATER
15863: IFFALSE 15875
// begin Is_Cheater := true ;
15865: LD_ADDR_VAR 0 9
15869: PUSH
15870: LD_INT 1
15872: ST_TO_ADDR
// break ;
15873: GO 15877
// end ;
15875: GO 15832
15877: POP
15878: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15879: LD_ADDR_LOC 24
15883: PUSH
15884: LD_LOC 24
15888: PPUSH
15889: LD_VAR 0 3
15893: PPUSH
15894: LD_VAR 0 9
15898: PPUSH
15899: CALL_OW 1
15903: ST_TO_ADDR
// end ; break ;
15904: GO 15908
// end ;
15906: GO 15484
15908: POP
15909: POP
// end ;
15910: LD_VAR 0 6
15914: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15915: LD_VAR 0 5
15919: PUSH
15920: LD_LOC 18
15924: IN
15925: PUSH
15926: LD_VAR 0 2
15930: PUSH
15931: LD_LOC 19
15935: IN
15936: OR
15937: PUSH
15938: LD_VAR 0 4
15942: PUSH
15943: LD_LOC 20
15947: IN
15948: OR
15949: PUSH
15950: LD_VAR 0 3
15954: PUSH
15955: LD_LOC 21
15959: IN
15960: OR
15961: IFFALSE 15972
// ComCancel ( factory ) ;
15963: LD_VAR 0 1
15967: PPUSH
15968: CALL_OW 127
// end ;
15972: PPOPN 5
15974: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15975: LD_VAR 0 2
15979: PUSH
15980: LD_LOC 18
15984: IN
15985: IFFALSE 15996
// ComCancel ( building ) ;
15987: LD_VAR 0 1
15991: PPUSH
15992: CALL_OW 127
// end ; end_of_file
15996: PPOPN 2
15998: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
15999: LD_INT 0
16001: PPUSH
16002: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
16003: LD_ADDR_VAR 0 2
16007: PUSH
16008: LD_STRING #Multi1x1-Time
16010: PUSH
16011: LD_OWVAR 1
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: ST_TO_ADDR
// if WaitServerStrings then
16020: LD_EXP 64
16024: IFFALSE 16042
// AllStrings = AllStrings ^ WaitServerStrings ;
16026: LD_ADDR_VAR 0 2
16030: PUSH
16031: LD_VAR 0 2
16035: PUSH
16036: LD_EXP 64
16040: ADD
16041: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
16042: LD_INT 0
16044: PUSH
16045: LD_EXP 18
16049: PUSH
16050: LD_OWVAR 1
16054: MINUS
16055: LESSEQUAL
16056: IFFALSE 16087
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
16058: LD_ADDR_VAR 0 2
16062: PUSH
16063: LD_VAR 0 2
16067: PUSH
16068: LD_STRING #allowedsibbomb
16070: PUSH
16071: LD_EXP 18
16075: PUSH
16076: LD_OWVAR 1
16080: MINUS
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: ADD
16086: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
16087: LD_INT 0
16089: PUSH
16090: LD_EXP 68
16094: PUSH
16095: LD_OWVAR 1
16099: MINUS
16100: LESSEQUAL
16101: IFFALSE 16132
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
16103: LD_ADDR_VAR 0 2
16107: PUSH
16108: LD_VAR 0 2
16112: PUSH
16113: LD_STRING #builduptime
16115: PUSH
16116: LD_EXP 68
16120: PUSH
16121: LD_OWVAR 1
16125: MINUS
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: ADD
16131: ST_TO_ADDR
// if ( ExtraStrings ) then
16132: LD_EXP 63
16136: IFFALSE 16158
// AllStrings := AllStrings ^  ^ ExtraStrings ;
16138: LD_ADDR_VAR 0 2
16142: PUSH
16143: LD_VAR 0 2
16147: PUSH
16148: LD_STRING 
16150: ADD
16151: PUSH
16152: LD_EXP 63
16156: ADD
16157: ST_TO_ADDR
// if Display_kings and not isSGUI then
16158: LD_EXP 65
16162: PUSH
16163: LD_OWVAR 83
16167: NOT
16168: AND
16169: IFFALSE 16187
// AllStrings = AllStrings ^ Display_kings ;
16171: LD_ADDR_VAR 0 2
16175: PUSH
16176: LD_VAR 0 2
16180: PUSH
16181: LD_EXP 65
16185: ADD
16186: ST_TO_ADDR
// if ( LimitsStrings ) then
16187: CALL 12839 0 0
16191: IFFALSE 16213
// AllStrings := AllStrings ^  ^ LimitsStrings ;
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: LD_VAR 0 2
16202: PUSH
16203: LD_STRING 
16205: ADD
16206: PUSH
16207: CALL 12839 0 0
16211: ADD
16212: ST_TO_ADDR
// Display_Strings := AllStrings ;
16213: LD_ADDR_OWVAR 47
16217: PUSH
16218: LD_VAR 0 2
16222: ST_TO_ADDR
// end ;
16223: LD_VAR 0 1
16227: RET
// every 0 0$1 do
16228: GO 16230
16230: DISABLE
// begin ShowTimer ;
16231: CALL 15999 0 0
// enable ;
16235: ENABLE
// end ; end_of_file
16236: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
16237: LD_INT 0
16239: PPUSH
16240: PPUSH
16241: PPUSH
// sharedPoints1 = [ ] ;
16242: LD_ADDR_LOC 25
16246: PUSH
16247: EMPTY
16248: ST_TO_ADDR
// sharedPoints2 = [ ] ;
16249: LD_ADDR_LOC 26
16253: PUSH
16254: EMPTY
16255: ST_TO_ADDR
// sharedPoints3 = [ ] ;
16256: LD_ADDR_LOC 27
16260: PUSH
16261: EMPTY
16262: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
16263: LD_ADDR_VAR 0 2
16267: PUSH
16268: DOUBLE
16269: LD_INT 1
16271: DEC
16272: ST_TO_ADDR
16273: LD_EXP 23
16277: PUSH
16278: LD_INT 0
16280: PLUS
16281: PUSH
16282: FOR_TO
16283: IFFALSE 16385
// begin if not Side_Positions [ i ] = 0 then
16285: LD_EXP 23
16289: PUSH
16290: LD_VAR 0 2
16294: ARRAY
16295: PUSH
16296: LD_INT 0
16298: EQUAL
16299: NOT
16300: IFFALSE 16314
// SetMultiScore ( i , 0 ) ;
16302: LD_VAR 0 2
16306: PPUSH
16307: LD_INT 0
16309: PPUSH
16310: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
16314: LD_ADDR_LOC 25
16318: PUSH
16319: LD_LOC 25
16323: PPUSH
16324: LD_VAR 0 2
16328: PPUSH
16329: LD_INT 0
16331: PPUSH
16332: CALL_OW 1
16336: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
16337: LD_ADDR_LOC 26
16341: PUSH
16342: LD_LOC 26
16346: PPUSH
16347: LD_VAR 0 2
16351: PPUSH
16352: LD_INT 0
16354: PPUSH
16355: CALL_OW 1
16359: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
16360: LD_ADDR_LOC 27
16364: PUSH
16365: LD_LOC 27
16369: PPUSH
16370: LD_VAR 0 2
16374: PPUSH
16375: LD_INT 0
16377: PPUSH
16378: CALL_OW 1
16382: ST_TO_ADDR
// end ;
16383: GO 16282
16385: POP
16386: POP
// pointGame = true ;
16387: LD_ADDR_LOC 28
16391: PUSH
16392: LD_INT 1
16394: ST_TO_ADDR
// end ;
16395: LD_VAR 0 1
16399: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
16400: LD_LOC 28
16404: IFFALSE 16815
16406: GO 16408
16408: DISABLE
16409: LD_INT 0
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
16417: PPUSH
16418: PPUSH
16419: PPUSH
16420: PPUSH
16421: PPUSH
16422: PPUSH
16423: PPUSH
// begin if isSGUI then
16424: LD_OWVAR 83
16428: IFFALSE 16815
// begin if Teams [ 1 ] then
16430: LD_EXP 22
16434: PUSH
16435: LD_INT 1
16437: ARRAY
16438: IFFALSE 16450
// red = true else
16440: LD_ADDR_VAR 0 2
16444: PUSH
16445: LD_INT 1
16447: ST_TO_ADDR
16448: GO 16458
// red = false ;
16450: LD_ADDR_VAR 0 2
16454: PUSH
16455: LD_INT 0
16457: ST_TO_ADDR
// if Teams [ 2 ] then
16458: LD_EXP 22
16462: PUSH
16463: LD_INT 2
16465: ARRAY
16466: IFFALSE 16478
// blue = true else
16468: LD_ADDR_VAR 0 3
16472: PUSH
16473: LD_INT 1
16475: ST_TO_ADDR
16476: GO 16486
// blue = false ;
16478: LD_ADDR_VAR 0 3
16482: PUSH
16483: LD_INT 0
16485: ST_TO_ADDR
// if Teams [ 3 ] then
16486: LD_EXP 22
16490: PUSH
16491: LD_INT 3
16493: ARRAY
16494: IFFALSE 16506
// yel = true else
16496: LD_ADDR_VAR 0 4
16500: PUSH
16501: LD_INT 1
16503: ST_TO_ADDR
16504: GO 16514
// yel = false ;
16506: LD_ADDR_VAR 0 4
16510: PUSH
16511: LD_INT 0
16513: ST_TO_ADDR
// if Teams [ 4 ] then
16514: LD_EXP 22
16518: PUSH
16519: LD_INT 4
16521: ARRAY
16522: IFFALSE 16534
// green = true else
16524: LD_ADDR_VAR 0 5
16528: PUSH
16529: LD_INT 1
16531: ST_TO_ADDR
16532: GO 16542
// green = false ;
16534: LD_ADDR_VAR 0 5
16538: PUSH
16539: LD_INT 0
16541: ST_TO_ADDR
// if def_public_score then
16542: LD_EXP 6
16546: IFFALSE 16558
// p = true else
16548: LD_ADDR_VAR 0 12
16552: PUSH
16553: LD_INT 1
16555: ST_TO_ADDR
16556: GO 16566
// p = false ;
16558: LD_ADDR_VAR 0 12
16562: PUSH
16563: LD_INT 0
16565: ST_TO_ADDR
// if team_game then
16566: LD_EXP 25
16570: IFFALSE 16651
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
16572: LD_ADDR_VAR 0 13
16576: PUSH
16577: LD_INT 3
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: LD_INT 2
16585: PUSH
16586: LD_INT 7
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: PUSH
16595: LD_EXP 28
16599: ARRAY
16600: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
16601: LD_ADDR_VAR 0 10
16605: PUSH
16606: LD_STRING {
16608: PUSH
16609: LD_VAR 0 3
16613: STR
16614: PUSH
16615: LD_STRING ,
16617: STR
16618: PUSH
16619: LD_VAR 0 4
16623: STR
16624: PUSH
16625: LD_STRING ,
16627: STR
16628: PUSH
16629: LD_VAR 0 2
16633: STR
16634: PUSH
16635: LD_STRING ,0,0,0,
16637: STR
16638: PUSH
16639: LD_VAR 0 5
16643: STR
16644: PUSH
16645: LD_STRING ,0}
16647: STR
16648: ST_TO_ADDR
// end else
16649: GO 16751
// begin you = your_side ;
16651: LD_ADDR_VAR 0 13
16655: PUSH
16656: LD_OWVAR 2
16660: ST_TO_ADDR
// s = { ;
16661: LD_ADDR_VAR 0 10
16665: PUSH
16666: LD_STRING {
16668: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
16669: LD_ADDR_VAR 0 1
16673: PUSH
16674: DOUBLE
16675: LD_INT 1
16677: DEC
16678: ST_TO_ADDR
16679: LD_EXP 23
16683: PUSH
16684: LD_INT 0
16686: PLUS
16687: PUSH
16688: FOR_TO
16689: IFFALSE 16735
// if side_positions [ i ] then
16691: LD_EXP 23
16695: PUSH
16696: LD_VAR 0 1
16700: ARRAY
16701: IFFALSE 16719
// s = s & 1, else
16703: LD_ADDR_VAR 0 10
16707: PUSH
16708: LD_VAR 0 10
16712: PUSH
16713: LD_STRING 1,
16715: STR
16716: ST_TO_ADDR
16717: GO 16733
// s = s & 0, ;
16719: LD_ADDR_VAR 0 10
16723: PUSH
16724: LD_VAR 0 10
16728: PUSH
16729: LD_STRING 0,
16731: STR
16732: ST_TO_ADDR
16733: GO 16688
16735: POP
16736: POP
// s = s & } ;
16737: LD_ADDR_VAR 0 10
16741: PUSH
16742: LD_VAR 0 10
16746: PUSH
16747: LD_STRING }
16749: STR
16750: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
16751: LD_STRING initScore(
16753: PUSH
16754: LD_VAR 0 10
16758: STR
16759: PUSH
16760: LD_STRING ,
16762: STR
16763: PUSH
16764: LD_VAR 0 12
16768: STR
16769: PUSH
16770: LD_STRING ,
16772: STR
16773: PUSH
16774: LD_VAR 0 13
16778: STR
16779: PUSH
16780: LD_STRING  );
16782: STR
16783: PPUSH
16784: CALL_OW 559
// if game_type = 3 then
16788: LD_EXP 46
16792: PUSH
16793: LD_INT 3
16795: EQUAL
16796: IFFALSE 16815
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
16798: LD_STRING AddScorePoints(2,2,
16800: PUSH
16801: LD_EXP 20
16805: STR
16806: PUSH
16807: LD_STRING  );
16809: STR
16810: PPUSH
16811: CALL_OW 559
// end ; end ;
16815: PPOPN 13
16817: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
16818: LD_INT 0
16820: PPUSH
16821: PPUSH
// case typ of 1 :
16822: LD_VAR 0 3
16826: PUSH
16827: LD_INT 1
16829: DOUBLE
16830: EQUAL
16831: IFTRUE 16835
16833: GO 16863
16835: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
16836: LD_ADDR_LOC 25
16840: PUSH
16841: LD_LOC 25
16845: PPUSH
16846: LD_VAR 0 1
16850: PPUSH
16851: LD_VAR 0 2
16855: PPUSH
16856: CALL_OW 1
16860: ST_TO_ADDR
16861: GO 16936
16863: LD_INT 2
16865: DOUBLE
16866: EQUAL
16867: IFTRUE 16871
16869: GO 16899
16871: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
16872: LD_ADDR_LOC 26
16876: PUSH
16877: LD_LOC 26
16881: PPUSH
16882: LD_VAR 0 1
16886: PPUSH
16887: LD_VAR 0 2
16891: PPUSH
16892: CALL_OW 1
16896: ST_TO_ADDR
16897: GO 16936
16899: LD_INT 3
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 16935
16907: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
16908: LD_ADDR_LOC 27
16912: PUSH
16913: LD_LOC 27
16917: PPUSH
16918: LD_VAR 0 1
16922: PPUSH
16923: LD_VAR 0 2
16927: PPUSH
16928: CALL_OW 1
16932: ST_TO_ADDR
16933: GO 16936
16935: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
16936: LD_ADDR_VAR 0 5
16940: PUSH
16941: LD_LOC 25
16945: PUSH
16946: LD_VAR 0 1
16950: ARRAY
16951: PUSH
16952: LD_LOC 26
16956: PUSH
16957: LD_VAR 0 1
16961: ARRAY
16962: PLUS
16963: PUSH
16964: LD_LOC 27
16968: PUSH
16969: LD_VAR 0 1
16973: ARRAY
16974: PLUS
16975: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_VAR 0 5
16985: PPUSH
16986: CALL_OW 506
// end ; end_of_file
16990: LD_VAR 0 4
16994: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
16995: LD_INT 0
16997: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
16998: LD_VAR 0 1
17002: PPUSH
17003: CALL_OW 255
17007: PUSH
17008: LD_VAR 0 4
17012: EQUAL
17013: IFFALSE 17032
// begin SetAchievement ( ACH_RAD ) ;
17015: LD_STRING ACH_RAD
17017: PPUSH
17018: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
17022: LD_STRING ACH_NL
17024: PPUSH
17025: LD_INT 1
17027: PPUSH
17028: CALL_OW 564
// end end ;
17032: LD_VAR 0 5
17036: RET
// export function SA_Win ( side ) ; begin
17037: LD_INT 0
17039: PPUSH
// case side of 1 :
17040: LD_VAR 0 1
17044: PUSH
17045: LD_INT 1
17047: DOUBLE
17048: EQUAL
17049: IFTRUE 17053
17051: GO 17066
17053: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
17054: LD_STRING ACH_AH
17056: PPUSH
17057: LD_INT 1
17059: PPUSH
17060: CALL_OW 564
17064: GO 17229
17066: LD_INT 2
17068: DOUBLE
17069: EQUAL
17070: IFTRUE 17074
17072: GO 17087
17074: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
17075: LD_STRING ACH_E
17077: PPUSH
17078: LD_INT 1
17080: PPUSH
17081: CALL_OW 564
17085: GO 17229
17087: LD_INT 3
17089: DOUBLE
17090: EQUAL
17091: IFTRUE 17095
17093: GO 17108
17095: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
17096: LD_STRING ACH_OOL
17098: PPUSH
17099: LD_INT 1
17101: PPUSH
17102: CALL_OW 564
17106: GO 17229
17108: LD_INT 1
17110: PUSH
17111: LD_INT 2
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: DOUBLE
17118: EQUAL
17119: IFTRUE 17123
17121: GO 17148
17123: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17124: LD_STRING ACH_AH
17126: PPUSH
17127: LD_REAL  5.00000000000000E-0001
17130: PPUSH
17131: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17135: LD_STRING ACH_E
17137: PPUSH
17138: LD_REAL  5.00000000000000E-0001
17141: PPUSH
17142: CALL_OW 564
// end ; [ 2 , 3 ] :
17146: GO 17229
17148: LD_INT 2
17150: PUSH
17151: LD_INT 3
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: DOUBLE
17158: EQUAL
17159: IFTRUE 17163
17161: GO 17188
17163: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
17164: LD_STRING ACH_OOL
17166: PPUSH
17167: LD_REAL  5.00000000000000E-0001
17170: PPUSH
17171: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17175: LD_STRING ACH_E
17177: PPUSH
17178: LD_REAL  5.00000000000000E-0001
17181: PPUSH
17182: CALL_OW 564
// end ; [ 3 , 1 ] :
17186: GO 17229
17188: LD_INT 3
17190: PUSH
17191: LD_INT 1
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: DOUBLE
17198: EQUAL
17199: IFTRUE 17203
17201: GO 17228
17203: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17204: LD_STRING ACH_AH
17206: PPUSH
17207: LD_REAL  5.00000000000000E-0001
17210: PPUSH
17211: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
17215: LD_STRING ACH_OOL
17217: PPUSH
17218: LD_REAL  5.00000000000000E-0001
17221: PPUSH
17222: CALL_OW 564
// end ; end ;
17226: GO 17229
17228: POP
// end ; end_of_file
17229: LD_VAR 0 2
17233: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
17234: LD_INT 0
17236: PPUSH
17237: PPUSH
// enable ( 98 ) ;
17238: LD_INT 98
17240: ENABLE_MARKED
// GameEnded = false ;
17241: LD_ADDR_LOC 30
17245: PUSH
17246: LD_INT 0
17248: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
17249: LD_ADDR_LOC 29
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: LD_INT 0
17259: PUSH
17260: LD_INT 0
17262: PUSH
17263: LD_INT 0
17265: PUSH
17266: LD_INT 0
17268: PUSH
17269: LD_INT 0
17271: PUSH
17272: LD_INT 0
17274: PUSH
17275: LD_INT 0
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: ST_TO_ADDR
// unfoged = false ;
17288: LD_ADDR_LOC 31
17292: PUSH
17293: LD_INT 0
17295: ST_TO_ADDR
// defeated_specs := [ ] ;
17296: LD_ADDR_LOC 32
17300: PUSH
17301: EMPTY
17302: ST_TO_ADDR
// for i = 1 to side_positions do
17303: LD_ADDR_VAR 0 2
17307: PUSH
17308: DOUBLE
17309: LD_INT 1
17311: DEC
17312: ST_TO_ADDR
17313: LD_EXP 23
17317: PUSH
17318: FOR_TO
17319: IFFALSE 17359
// if not side_positions [ i ] then
17321: LD_EXP 23
17325: PUSH
17326: LD_VAR 0 2
17330: ARRAY
17331: NOT
17332: IFFALSE 17357
// defeated = replace ( defeated , i , true ) ;
17334: LD_ADDR_LOC 29
17338: PUSH
17339: LD_LOC 29
17343: PPUSH
17344: LD_VAR 0 2
17348: PPUSH
17349: LD_INT 1
17351: PPUSH
17352: CALL_OW 1
17356: ST_TO_ADDR
17357: GO 17318
17359: POP
17360: POP
// end ;
17361: LD_VAR 0 1
17365: RET
// function CanWinLoose ; begin
17366: LD_INT 0
17368: PPUSH
// Result := true ;
17369: LD_ADDR_VAR 0 1
17373: PUSH
17374: LD_INT 1
17376: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
17377: CALL_OW 518
17381: PUSH
17382: CALL_OW 519
17386: PUSH
17387: LD_INT 0
17389: GREATER
17390: AND
17391: IFFALSE 17401
// Result := false ;
17393: LD_ADDR_VAR 0 1
17397: PUSH
17398: LD_INT 0
17400: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
17401: CALL_OW 531
17405: PUSH
17406: CALL_OW 519
17410: PUSH
17411: LD_INT 1
17413: GREATER
17414: AND
17415: IFFALSE 17425
// Result := false ;
17417: LD_ADDR_VAR 0 1
17421: PUSH
17422: LD_INT 0
17424: ST_TO_ADDR
// end ;
17425: LD_VAR 0 1
17429: RET
// export function HasPower ( i ) ; var k , h ; begin
17430: LD_INT 0
17432: PPUSH
17433: PPUSH
17434: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 108
17444: NOT
17445: PUSH
17446: LD_EXP 26
17450: PUSH
17451: LD_VAR 0 1
17455: ARRAY
17456: NOT
17457: AND
17458: PUSH
17459: LD_OWVAR 4
17463: AND
17464: IFFALSE 17476
// begin result = false ;
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: LD_INT 0
17473: ST_TO_ADDR
// end else
17474: GO 17771
// case def_win_rules of 0 :
17476: LD_EXP 19
17480: PUSH
17481: LD_INT 0
17483: DOUBLE
17484: EQUAL
17485: IFTRUE 17489
17487: GO 17652
17489: POP
// if def_people_respawning then
17490: LD_EXP 58
17494: IFFALSE 17585
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
17496: LD_ADDR_VAR 0 2
17500: PUSH
17501: LD_INT 22
17503: PUSH
17504: LD_VAR 0 1
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 2
17515: PUSH
17516: LD_INT 21
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 33
17528: PUSH
17529: LD_INT 3
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 33
17538: PUSH
17539: LD_INT 5
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 30
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 30
17558: PUSH
17559: LD_INT 1
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL_OW 69
17582: ST_TO_ADDR
17583: GO 17650
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: LD_INT 22
17592: PUSH
17593: LD_VAR 0 1
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 2
17604: PUSH
17605: LD_INT 21
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 33
17617: PUSH
17618: LD_INT 3
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 33
17627: PUSH
17628: LD_INT 5
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PPUSH
17645: CALL_OW 69
17649: ST_TO_ADDR
17650: GO 17771
17652: LD_INT 1
17654: DOUBLE
17655: EQUAL
17656: IFTRUE 17660
17658: GO 17699
17660: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
17661: LD_ADDR_VAR 0 2
17665: PUSH
17666: LD_INT 22
17668: PUSH
17669: LD_VAR 0 1
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 21
17680: PUSH
17681: LD_INT 1
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PPUSH
17692: CALL_OW 69
17696: ST_TO_ADDR
17697: GO 17771
17699: LD_INT 2
17701: DOUBLE
17702: EQUAL
17703: IFTRUE 17707
17705: GO 17770
17707: POP
// begin h = false ;
17708: LD_ADDR_VAR 0 4
17712: PUSH
17713: LD_INT 0
17715: ST_TO_ADDR
// for k in heroes [ i ] do
17716: LD_ADDR_VAR 0 3
17720: PUSH
17721: LD_EXP 34
17725: PUSH
17726: LD_VAR 0 1
17730: ARRAY
17731: PUSH
17732: FOR_IN
17733: IFFALSE 17756
// if IsLive ( k ) then
17735: LD_VAR 0 3
17739: PPUSH
17740: CALL_OW 300
17744: IFFALSE 17754
// h = true ;
17746: LD_ADDR_VAR 0 4
17750: PUSH
17751: LD_INT 1
17753: ST_TO_ADDR
17754: GO 17732
17756: POP
17757: POP
// Result := h ;
17758: LD_ADDR_VAR 0 2
17762: PUSH
17763: LD_VAR 0 4
17767: ST_TO_ADDR
// end ; end ;
17768: GO 17771
17770: POP
// end ;
17771: LD_VAR 0 2
17775: RET
// function AlliedSides ( i , j ) ; begin
17776: LD_INT 0
17778: PPUSH
// Result := false ;
17779: LD_ADDR_VAR 0 3
17783: PUSH
17784: LD_INT 0
17786: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
17787: LD_VAR 0 1
17791: PPUSH
17792: LD_VAR 0 2
17796: PPUSH
17797: CALL_OW 81
17801: PUSH
17802: LD_INT 1
17804: EQUAL
17805: PUSH
17806: LD_VAR 0 2
17810: PPUSH
17811: LD_VAR 0 1
17815: PPUSH
17816: CALL_OW 81
17820: PUSH
17821: LD_INT 1
17823: EQUAL
17824: AND
17825: PUSH
17826: LD_VAR 0 1
17830: PPUSH
17831: CALL_OW 83
17835: AND
17836: PUSH
17837: LD_VAR 0 2
17841: PPUSH
17842: CALL_OW 83
17846: AND
17847: IFFALSE 17857
// Result := true ;
17849: LD_ADDR_VAR 0 3
17853: PUSH
17854: LD_INT 1
17856: ST_TO_ADDR
// end ;
17857: LD_VAR 0 3
17861: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
17862: CALL 17366 0 0
17866: PUSH
17867: LD_LOC 30
17871: NOT
17872: AND
17873: IFFALSE 17889
17875: GO 17877
17877: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
17878: LD_ADDR_EXP 64
17882: PUSH
17883: LD_STRING #Player-Ended
17885: PUSH
17886: EMPTY
17887: LIST
17888: ST_TO_ADDR
17889: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
17890: CALL 17366 0 0
17894: PUSH
17895: LD_LOC 30
17899: AND
17900: IFFALSE 17909
17902: GO 17904
17904: DISABLE
// YouLostInMultiplayer ;
17905: CALL_OW 107
17909: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
17910: CALL 17366 0 0
17914: NOT
17915: PUSH
17916: CALL_OW 531
17920: NOT
17921: AND
17922: IFFALSE 17938
17924: GO 17926
17926: DISABLE
// WaitServerStrings = [ #server-wait ] ;
17927: LD_ADDR_EXP 64
17931: PUSH
17932: LD_STRING #server-wait
17934: PUSH
17935: EMPTY
17936: LIST
17937: ST_TO_ADDR
17938: END
// every 100 trigger IAmSpec do
17939: CALL_OW 531
17943: IFFALSE 17959
17945: GO 17947
17947: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
17948: LD_ADDR_EXP 64
17952: PUSH
17953: LD_STRING #Player-IAmSpec
17955: PUSH
17956: EMPTY
17957: LIST
17958: ST_TO_ADDR
17959: END
// every 100 trigger GameEnded and IAmSpec do
17960: LD_LOC 30
17964: PUSH
17965: CALL_OW 531
17969: AND
17970: IFFALSE 17979
17972: GO 17974
17974: DISABLE
// YouLostInMultiplayer ;
17975: CALL_OW 107
17979: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
17980: CALL 17366 0 0
17984: PUSH
17985: LD_LOC 30
17989: NOT
17990: AND
17991: IFFALSE 18007
17993: GO 17995
17995: DISABLE
// WaitServerStrings = [ $player-win ] ;
17996: LD_ADDR_EXP 64
18000: PUSH
18001: LD_STRING $player-win
18003: PUSH
18004: EMPTY
18005: LIST
18006: ST_TO_ADDR
18007: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
18008: CALL 17366 0 0
18012: PUSH
18013: LD_LOC 30
18017: AND
18018: IFFALSE 18042
18020: GO 18022
18022: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
18023: LD_EXP 24
18027: PUSH
18028: LD_OWVAR 7
18032: ARRAY
18033: PPUSH
18034: CALL 17037 0 1
// YouWinInMultiplayer ;
18038: CALL_OW 106
// end ;
18042: END
// every 100 trigger isEditor marked 401 do
18043: LD_OWVAR 84
18047: IFFALSE 18063
18049: GO 18051
18051: DISABLE
// Debug_Strings = [ You won ] ;
18052: LD_ADDR_OWVAR 48
18056: PUSH
18057: LD_STRING You won
18059: PUSH
18060: EMPTY
18061: LIST
18062: ST_TO_ADDR
18063: END
// every 100 trigger isEditor marked 400 do
18064: LD_OWVAR 84
18068: IFFALSE 18084
18070: GO 18072
18072: DISABLE
// Debug_Strings = [ You loss ] ;
18073: LD_ADDR_OWVAR 48
18077: PUSH
18078: LD_STRING You loss
18080: PUSH
18081: EMPTY
18082: LIST
18083: ST_TO_ADDR
18084: END
// every 100 marked 98 do var i , un ;
18085: GO 18087
18087: DISABLE
18088: LD_INT 0
18090: PPUSH
18091: PPUSH
// begin for i = 1 to side_positions do
18092: LD_ADDR_VAR 0 1
18096: PUSH
18097: DOUBLE
18098: LD_INT 1
18100: DEC
18101: ST_TO_ADDR
18102: LD_EXP 23
18106: PUSH
18107: FOR_TO
18108: IFFALSE 18195
// begin if side_positions [ i ] then
18110: LD_EXP 23
18114: PUSH
18115: LD_VAR 0 1
18119: ARRAY
18120: IFFALSE 18193
// if not HasPower ( i ) and not defeated [ i ] then
18122: LD_VAR 0 1
18126: PPUSH
18127: CALL 17430 0 1
18131: NOT
18132: PUSH
18133: LD_LOC 29
18137: PUSH
18138: LD_VAR 0 1
18142: ARRAY
18143: NOT
18144: AND
18145: IFFALSE 18193
// begin defeated = replace ( defeated , i , true ) ;
18147: LD_ADDR_LOC 29
18151: PUSH
18152: LD_LOC 29
18156: PPUSH
18157: LD_VAR 0 1
18161: PPUSH
18162: LD_INT 1
18164: PPUSH
18165: CALL_OW 1
18169: ST_TO_ADDR
// if i = mp_player_side then
18170: LD_VAR 0 1
18174: PUSH
18175: LD_OWVAR 7
18179: EQUAL
18180: IFFALSE 18193
// begin Multiplayer_Loose_Message ;
18182: CALL_OW 521
// SetPlayerSpectator ( ) ;
18186: CALL_OW 572
// enable ( 400 ) ;
18190: LD_INT 400
18192: ENABLE_MARKED
// end ; end ; end ;
18193: GO 18107
18195: POP
18196: POP
// DidGameEnd ;
18197: CALL 18212 0 0
// if not GameEnded then
18201: LD_LOC 30
18205: NOT
18206: IFFALSE 18209
// enable ;
18208: ENABLE
// end ;
18209: PPOPN 2
18211: END
// function DidGameEnd ; var i , k , enemy ; begin
18212: LD_INT 0
18214: PPUSH
18215: PPUSH
18216: PPUSH
18217: PPUSH
// enemy = [ ] ;
18218: LD_ADDR_VAR 0 4
18222: PUSH
18223: EMPTY
18224: ST_TO_ADDR
// for i = 1 to side_positions do
18225: LD_ADDR_VAR 0 2
18229: PUSH
18230: DOUBLE
18231: LD_INT 1
18233: DEC
18234: ST_TO_ADDR
18235: LD_EXP 23
18239: PUSH
18240: FOR_TO
18241: IFFALSE 18335
// if not defeated [ i ] then
18243: LD_LOC 29
18247: PUSH
18248: LD_VAR 0 2
18252: ARRAY
18253: NOT
18254: IFFALSE 18333
// for k = 1 to side_positions do
18256: LD_ADDR_VAR 0 3
18260: PUSH
18261: DOUBLE
18262: LD_INT 1
18264: DEC
18265: ST_TO_ADDR
18266: LD_EXP 23
18270: PUSH
18271: FOR_TO
18272: IFFALSE 18331
// if not defeated [ k ] then
18274: LD_LOC 29
18278: PUSH
18279: LD_VAR 0 3
18283: ARRAY
18284: NOT
18285: IFFALSE 18329
// if not AlliedSides ( i , k ) then
18287: LD_VAR 0 2
18291: PPUSH
18292: LD_VAR 0 3
18296: PPUSH
18297: CALL 17776 0 2
18301: NOT
18302: IFFALSE 18329
// enemy = enemy ^ [ i , k ] ;
18304: LD_ADDR_VAR 0 4
18308: PUSH
18309: LD_VAR 0 4
18313: PUSH
18314: LD_VAR 0 2
18318: PUSH
18319: LD_VAR 0 3
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: ADD
18328: ST_TO_ADDR
18329: GO 18271
18331: POP
18332: POP
18333: GO 18240
18335: POP
18336: POP
// if not enemy then
18337: LD_VAR 0 4
18341: NOT
18342: IFFALSE 18368
// begin GameEnded = true ;
18344: LD_ADDR_LOC 30
18348: PUSH
18349: LD_INT 1
18351: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
18352: LD_LOC 29
18356: PUSH
18357: LD_OWVAR 7
18361: ARRAY
18362: NOT
18363: IFFALSE 18368
// enable ( 401 ) ;
18365: LD_INT 401
18367: ENABLE_MARKED
// end ; end ;
18368: LD_VAR 0 1
18372: RET
// function unfog ; var k , friends ; begin
18373: LD_INT 0
18375: PPUSH
18376: PPUSH
18377: PPUSH
// for k = 1 to side_positions do
18378: LD_ADDR_VAR 0 2
18382: PUSH
18383: DOUBLE
18384: LD_INT 1
18386: DEC
18387: ST_TO_ADDR
18388: LD_EXP 23
18392: PUSH
18393: FOR_TO
18394: IFFALSE 18450
// if not defeated [ k ] then
18396: LD_LOC 29
18400: PUSH
18401: LD_VAR 0 2
18405: ARRAY
18406: NOT
18407: IFFALSE 18448
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
18409: LD_OWVAR 7
18413: PPUSH
18414: LD_VAR 0 2
18418: PPUSH
18419: CALL_OW 81
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: EMPTY
18428: LIST
18429: IN
18430: IFFALSE 18448
// friends = friends ^ k ;
18432: LD_ADDR_VAR 0 3
18436: PUSH
18437: LD_VAR 0 3
18441: PUSH
18442: LD_VAR 0 2
18446: ADD
18447: ST_TO_ADDR
18448: GO 18393
18450: POP
18451: POP
// if not friends then
18452: LD_VAR 0 3
18456: NOT
18457: IFFALSE 18471
// begin SetPlayerSpectator ( ) ;
18459: CALL_OW 572
// unfoged = true ;
18463: LD_ADDR_LOC 31
18467: PUSH
18468: LD_INT 1
18470: ST_TO_ADDR
// end ; end ;
18471: LD_VAR 0 1
18475: RET
// export function MakeGameEnd ; begin
18476: LD_INT 0
18478: PPUSH
// SetPlayerSpectator ( ) ;
18479: CALL_OW 572
// unfoged = true ;
18483: LD_ADDR_LOC 31
18487: PUSH
18488: LD_INT 1
18490: ST_TO_ADDR
// wait ( 0 0$5 ) ;
18491: LD_INT 175
18493: PPUSH
18494: CALL_OW 67
// GameEnded = true ;
18498: LD_ADDR_LOC 30
18502: PUSH
18503: LD_INT 1
18505: ST_TO_ADDR
// end ;
18506: LD_VAR 0 1
18510: RET
// export function GetGameEnded ; begin
18511: LD_INT 0
18513: PPUSH
// result = GameEnded ;
18514: LD_ADDR_VAR 0 1
18518: PUSH
18519: LD_LOC 30
18523: ST_TO_ADDR
// end ; end_of_file
18524: LD_VAR 0 1
18528: RET
// var win ; export function init_kings_counting ; var i ; begin
18529: LD_INT 0
18531: PPUSH
18532: PPUSH
// mp_with_score := true ;
18533: LD_ADDR_OWVAR 14
18537: PUSH
18538: LD_INT 1
18540: ST_TO_ADDR
// ResetMultiScore ;
18541: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
18545: LD_INT 19
18547: PPUSH
18548: LD_INT 1
18550: PPUSH
18551: CALL_OW 424
// enable ( 2 ) ;
18555: LD_INT 2
18557: ENABLE_MARKED
// end ;
18558: LD_VAR 0 1
18562: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
18563: LD_INT 0
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
18572: PPUSH
18573: PPUSH
// vypis := [ ] ;
18574: LD_ADDR_VAR 0 3
18578: PUSH
18579: EMPTY
18580: ST_TO_ADDR
// red = 0 ;
18581: LD_ADDR_VAR 0 5
18585: PUSH
18586: LD_INT 0
18588: ST_TO_ADDR
// blue = 0 ;
18589: LD_ADDR_VAR 0 6
18593: PUSH
18594: LD_INT 0
18596: ST_TO_ADDR
// yel = 0 ;
18597: LD_ADDR_VAR 0 7
18601: PUSH
18602: LD_INT 0
18604: ST_TO_ADDR
// green = 0 ;
18605: LD_ADDR_VAR 0 8
18609: PUSH
18610: LD_INT 0
18612: ST_TO_ADDR
// if def_public_score or isSGUI then
18613: LD_EXP 6
18617: PUSH
18618: LD_OWVAR 83
18622: OR
18623: IFFALSE 19220
// if not Team_Game then
18625: LD_EXP 25
18629: NOT
18630: IFFALSE 18752
// begin for side = 1 to Side_Positions do
18632: LD_ADDR_VAR 0 2
18636: PUSH
18637: DOUBLE
18638: LD_INT 1
18640: DEC
18641: ST_TO_ADDR
18642: LD_EXP 23
18646: PUSH
18647: FOR_TO
18648: IFFALSE 18748
// if Side_Positions [ side ] then
18650: LD_EXP 23
18654: PUSH
18655: LD_VAR 0 2
18659: ARRAY
18660: IFFALSE 18746
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
18662: LD_ADDR_VAR 0 3
18666: PUSH
18667: LD_VAR 0 3
18671: PUSH
18672: LD_STRING #KingoftheHill-Public
18674: PUSH
18675: LD_VAR 0 2
18679: PUSH
18680: LD_VAR 0 2
18684: PUSH
18685: LD_VAR 0 2
18689: PUSH
18690: LD_INT 10
18692: PLUS
18693: PPUSH
18694: CALL_OW 110
18698: PUSH
18699: LD_INT 3
18701: DIV
18702: PUSH
18703: LD_EXP 20
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: ADD
18715: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
18716: LD_INT 2
18718: PPUSH
18719: LD_VAR 0 2
18723: PPUSH
18724: LD_VAR 0 2
18728: PUSH
18729: LD_INT 10
18731: PLUS
18732: PPUSH
18733: CALL_OW 110
18737: PUSH
18738: LD_INT 3
18740: DIV
18741: PPUSH
18742: CALL 26122 0 3
// end ;
18746: GO 18647
18748: POP
18749: POP
// end else
18750: GO 19218
// begin if Teams [ 1 ] then
18752: LD_EXP 22
18756: PUSH
18757: LD_INT 1
18759: ARRAY
18760: IFFALSE 18812
// for i in Teams [ 1 ] do
18762: LD_ADDR_VAR 0 4
18766: PUSH
18767: LD_EXP 22
18771: PUSH
18772: LD_INT 1
18774: ARRAY
18775: PUSH
18776: FOR_IN
18777: IFFALSE 18810
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
18779: LD_ADDR_VAR 0 5
18783: PUSH
18784: LD_VAR 0 5
18788: PUSH
18789: LD_VAR 0 4
18793: PUSH
18794: LD_INT 10
18796: PLUS
18797: PPUSH
18798: CALL_OW 110
18802: PUSH
18803: LD_INT 3
18805: DIV
18806: PLUS
18807: ST_TO_ADDR
18808: GO 18776
18810: POP
18811: POP
// if Teams [ 2 ] then
18812: LD_EXP 22
18816: PUSH
18817: LD_INT 2
18819: ARRAY
18820: IFFALSE 18872
// for i in Teams [ 2 ] do
18822: LD_ADDR_VAR 0 4
18826: PUSH
18827: LD_EXP 22
18831: PUSH
18832: LD_INT 2
18834: ARRAY
18835: PUSH
18836: FOR_IN
18837: IFFALSE 18870
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
18839: LD_ADDR_VAR 0 6
18843: PUSH
18844: LD_VAR 0 6
18848: PUSH
18849: LD_VAR 0 4
18853: PUSH
18854: LD_INT 10
18856: PLUS
18857: PPUSH
18858: CALL_OW 110
18862: PUSH
18863: LD_INT 3
18865: DIV
18866: PLUS
18867: ST_TO_ADDR
18868: GO 18836
18870: POP
18871: POP
// if Teams [ 3 ] then
18872: LD_EXP 22
18876: PUSH
18877: LD_INT 3
18879: ARRAY
18880: IFFALSE 18932
// for i in Teams [ 3 ] do
18882: LD_ADDR_VAR 0 4
18886: PUSH
18887: LD_EXP 22
18891: PUSH
18892: LD_INT 3
18894: ARRAY
18895: PUSH
18896: FOR_IN
18897: IFFALSE 18930
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
18899: LD_ADDR_VAR 0 7
18903: PUSH
18904: LD_VAR 0 7
18908: PUSH
18909: LD_VAR 0 4
18913: PUSH
18914: LD_INT 10
18916: PLUS
18917: PPUSH
18918: CALL_OW 110
18922: PUSH
18923: LD_INT 3
18925: DIV
18926: PLUS
18927: ST_TO_ADDR
18928: GO 18896
18930: POP
18931: POP
// if Teams [ 4 ] then
18932: LD_EXP 22
18936: PUSH
18937: LD_INT 4
18939: ARRAY
18940: IFFALSE 18992
// for i in Teams [ 4 ] do
18942: LD_ADDR_VAR 0 4
18946: PUSH
18947: LD_EXP 22
18951: PUSH
18952: LD_INT 4
18954: ARRAY
18955: PUSH
18956: FOR_IN
18957: IFFALSE 18990
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
18959: LD_ADDR_VAR 0 8
18963: PUSH
18964: LD_VAR 0 8
18968: PUSH
18969: LD_VAR 0 4
18973: PUSH
18974: LD_INT 10
18976: PLUS
18977: PPUSH
18978: CALL_OW 110
18982: PUSH
18983: LD_INT 3
18985: DIV
18986: PLUS
18987: ST_TO_ADDR
18988: GO 18956
18990: POP
18991: POP
// if Teams [ 1 ] then
18992: LD_EXP 22
18996: PUSH
18997: LD_INT 1
18999: ARRAY
19000: IFFALSE 19029
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
19002: LD_ADDR_VAR 0 3
19006: PUSH
19007: LD_STRING #KingoftheHill-Public-red
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: LD_VAR 0 5
19017: PUSH
19018: LD_EXP 20
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: ST_TO_ADDR
// if Teams [ 2 ] then
19029: LD_EXP 22
19033: PUSH
19034: LD_INT 2
19036: ARRAY
19037: IFFALSE 19072
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
19039: LD_ADDR_VAR 0 3
19043: PUSH
19044: LD_VAR 0 3
19048: PUSH
19049: LD_STRING #KingoftheHill-Public-blue
19051: PUSH
19052: LD_INT 1
19054: PUSH
19055: LD_VAR 0 6
19059: PUSH
19060: LD_EXP 20
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: ADD
19071: ST_TO_ADDR
// if Teams [ 3 ] then
19072: LD_EXP 22
19076: PUSH
19077: LD_INT 3
19079: ARRAY
19080: IFFALSE 19115
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
19082: LD_ADDR_VAR 0 3
19086: PUSH
19087: LD_VAR 0 3
19091: PUSH
19092: LD_STRING #KingoftheHill-Public-yell
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: LD_VAR 0 7
19102: PUSH
19103: LD_EXP 20
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: ADD
19114: ST_TO_ADDR
// if Teams [ 4 ] then
19115: LD_EXP 22
19119: PUSH
19120: LD_INT 4
19122: ARRAY
19123: IFFALSE 19158
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
19125: LD_ADDR_VAR 0 3
19129: PUSH
19130: LD_VAR 0 3
19134: PUSH
19135: LD_STRING #KingoftheHill-Public-green
19137: PUSH
19138: LD_INT 7
19140: PUSH
19141: LD_VAR 0 8
19145: PUSH
19146: LD_EXP 20
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: ADD
19157: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
19158: LD_INT 2
19160: PPUSH
19161: LD_INT 3
19163: PPUSH
19164: LD_VAR 0 5
19168: PPUSH
19169: CALL 26122 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
19173: LD_INT 2
19175: PPUSH
19176: LD_INT 1
19178: PPUSH
19179: LD_VAR 0 6
19183: PPUSH
19184: CALL 26122 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
19188: LD_INT 2
19190: PPUSH
19191: LD_INT 2
19193: PPUSH
19194: LD_VAR 0 7
19198: PPUSH
19199: CALL 26122 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
19203: LD_INT 2
19205: PPUSH
19206: LD_INT 7
19208: PPUSH
19209: LD_VAR 0 8
19213: PPUSH
19214: CALL 26122 0 3
// end else
19218: GO 19655
// if not Team_Game then
19220: LD_EXP 25
19224: NOT
19225: IFFALSE 19283
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
19227: LD_ADDR_VAR 0 3
19231: PUSH
19232: LD_VAR 0 3
19236: PUSH
19237: LD_STRING #KingoftheHill-Private
19239: PUSH
19240: LD_OWVAR 7
19244: PUSH
19245: LD_OWVAR 7
19249: PUSH
19250: LD_VAR 0 2
19254: PUSH
19255: LD_INT 10
19257: PLUS
19258: PPUSH
19259: CALL_OW 110
19263: PUSH
19264: LD_INT 3
19266: DIV
19267: PUSH
19268: LD_EXP 20
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: ADD
19280: ST_TO_ADDR
19281: GO 19655
// begin for i in Teams [ 1 ] do
19283: LD_ADDR_VAR 0 4
19287: PUSH
19288: LD_EXP 22
19292: PUSH
19293: LD_INT 1
19295: ARRAY
19296: PUSH
19297: FOR_IN
19298: IFFALSE 19331
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19300: LD_ADDR_VAR 0 5
19304: PUSH
19305: LD_VAR 0 5
19309: PUSH
19310: LD_VAR 0 4
19314: PUSH
19315: LD_INT 10
19317: PLUS
19318: PPUSH
19319: CALL_OW 110
19323: PUSH
19324: LD_INT 3
19326: DIV
19327: PLUS
19328: ST_TO_ADDR
19329: GO 19297
19331: POP
19332: POP
// for i in Teams [ 2 ] do
19333: LD_ADDR_VAR 0 4
19337: PUSH
19338: LD_EXP 22
19342: PUSH
19343: LD_INT 2
19345: ARRAY
19346: PUSH
19347: FOR_IN
19348: IFFALSE 19381
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19350: LD_ADDR_VAR 0 6
19354: PUSH
19355: LD_VAR 0 6
19359: PUSH
19360: LD_VAR 0 4
19364: PUSH
19365: LD_INT 10
19367: PLUS
19368: PPUSH
19369: CALL_OW 110
19373: PUSH
19374: LD_INT 3
19376: DIV
19377: PLUS
19378: ST_TO_ADDR
19379: GO 19347
19381: POP
19382: POP
// for i in Teams [ 3 ] do
19383: LD_ADDR_VAR 0 4
19387: PUSH
19388: LD_EXP 22
19392: PUSH
19393: LD_INT 3
19395: ARRAY
19396: PUSH
19397: FOR_IN
19398: IFFALSE 19431
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
19400: LD_ADDR_VAR 0 7
19404: PUSH
19405: LD_VAR 0 7
19409: PUSH
19410: LD_VAR 0 4
19414: PUSH
19415: LD_INT 10
19417: PLUS
19418: PPUSH
19419: CALL_OW 110
19423: PUSH
19424: LD_INT 3
19426: DIV
19427: PLUS
19428: ST_TO_ADDR
19429: GO 19397
19431: POP
19432: POP
// for i in Teams [ 4 ] do
19433: LD_ADDR_VAR 0 4
19437: PUSH
19438: LD_EXP 22
19442: PUSH
19443: LD_INT 4
19445: ARRAY
19446: PUSH
19447: FOR_IN
19448: IFFALSE 19481
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
19450: LD_ADDR_VAR 0 8
19454: PUSH
19455: LD_VAR 0 8
19459: PUSH
19460: LD_VAR 0 4
19464: PUSH
19465: LD_INT 10
19467: PLUS
19468: PPUSH
19469: CALL_OW 110
19473: PUSH
19474: LD_INT 3
19476: DIV
19477: PLUS
19478: ST_TO_ADDR
19479: GO 19447
19481: POP
19482: POP
// if mp_player_side in Teams [ 1 ] then
19483: LD_OWVAR 7
19487: PUSH
19488: LD_EXP 22
19492: PUSH
19493: LD_INT 1
19495: ARRAY
19496: IN
19497: IFFALSE 19526
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
19499: LD_ADDR_VAR 0 3
19503: PUSH
19504: LD_STRING #KingoftheHill-Public-red
19506: PUSH
19507: LD_INT 3
19509: PUSH
19510: LD_VAR 0 5
19514: PUSH
19515: LD_EXP 20
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
19526: LD_OWVAR 7
19530: PUSH
19531: LD_EXP 22
19535: PUSH
19536: LD_INT 2
19538: ARRAY
19539: IN
19540: IFFALSE 19569
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
19542: LD_ADDR_VAR 0 3
19546: PUSH
19547: LD_STRING #KingoftheHill-Public-blue
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: LD_VAR 0 6
19557: PUSH
19558: LD_EXP 20
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
19569: LD_OWVAR 7
19573: PUSH
19574: LD_EXP 22
19578: PUSH
19579: LD_INT 3
19581: ARRAY
19582: IN
19583: IFFALSE 19612
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
19585: LD_ADDR_VAR 0 3
19589: PUSH
19590: LD_STRING #KingoftheHill-Public-yell
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: LD_VAR 0 7
19600: PUSH
19601: LD_EXP 20
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
19612: LD_OWVAR 7
19616: PUSH
19617: LD_EXP 22
19621: PUSH
19622: LD_INT 4
19624: ARRAY
19625: IN
19626: IFFALSE 19655
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
19628: LD_ADDR_VAR 0 3
19632: PUSH
19633: LD_STRING #KingoftheHill-Public-green
19635: PUSH
19636: LD_INT 7
19638: PUSH
19639: LD_VAR 0 8
19643: PUSH
19644: LD_EXP 20
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: ST_TO_ADDR
// end ; Display_kings := vypis ;
19655: LD_ADDR_EXP 65
19659: PUSH
19660: LD_VAR 0 3
19664: ST_TO_ADDR
// end ;
19665: LD_VAR 0 1
19669: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
19670: LD_INT 0
19672: PPUSH
19673: PPUSH
19674: PPUSH
19675: PPUSH
19676: PPUSH
19677: PPUSH
19678: PPUSH
19679: PPUSH
19680: PPUSH
// side := [ ] ;
19681: LD_ADDR_VAR 0 2
19685: PUSH
19686: EMPTY
19687: ST_TO_ADDR
// red = 0 ;
19688: LD_ADDR_VAR 0 5
19692: PUSH
19693: LD_INT 0
19695: ST_TO_ADDR
// blue = 0 ;
19696: LD_ADDR_VAR 0 6
19700: PUSH
19701: LD_INT 0
19703: ST_TO_ADDR
// yel = 0 ;
19704: LD_ADDR_VAR 0 7
19708: PUSH
19709: LD_INT 0
19711: ST_TO_ADDR
// green = 0 ;
19712: LD_ADDR_VAR 0 8
19716: PUSH
19717: LD_INT 0
19719: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
19720: LD_ADDR_VAR 0 3
19724: PUSH
19725: LD_INT 19
19727: PPUSH
19728: LD_INT 21
19730: PUSH
19731: LD_INT 3
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 53
19740: PUSH
19741: EMPTY
19742: LIST
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PPUSH
19748: CALL_OW 70
19752: ST_TO_ADDR
// for un in list do
19753: LD_ADDR_VAR 0 4
19757: PUSH
19758: LD_VAR 0 3
19762: PUSH
19763: FOR_IN
19764: IFFALSE 19789
// side := side union GetSide ( un ) ;
19766: LD_ADDR_VAR 0 2
19770: PUSH
19771: LD_VAR 0 2
19775: PUSH
19776: LD_VAR 0 4
19780: PPUSH
19781: CALL_OW 255
19785: UNION
19786: ST_TO_ADDR
19787: GO 19763
19789: POP
19790: POP
// if side <> 1 then
19791: LD_VAR 0 2
19795: PUSH
19796: LD_INT 1
19798: NONEQUAL
19799: IFFALSE 19803
// exit ;
19801: GO 20166
// side := side [ 1 ] ;
19803: LD_ADDR_VAR 0 2
19807: PUSH
19808: LD_VAR 0 2
19812: PUSH
19813: LD_INT 1
19815: ARRAY
19816: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
19817: LD_VAR 0 2
19821: PUSH
19822: LD_INT 10
19824: PLUS
19825: PPUSH
19826: LD_VAR 0 2
19830: PUSH
19831: LD_INT 10
19833: PLUS
19834: PPUSH
19835: CALL_OW 110
19839: PUSH
19840: LD_INT 1
19842: PLUS
19843: PPUSH
19844: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
19848: LD_VAR 0 2
19852: PPUSH
19853: LD_VAR 0 2
19857: PUSH
19858: LD_INT 10
19860: PLUS
19861: PPUSH
19862: CALL_OW 110
19866: PUSH
19867: LD_INT 3
19869: DIV
19870: PPUSH
19871: LD_INT 2
19873: PPUSH
19874: CALL 16818 0 3
// if not Team_Game then
19878: LD_EXP 25
19882: NOT
19883: IFFALSE 20166
// if GetTag ( side + 10 ) >= final_count * 3 then
19885: LD_VAR 0 2
19889: PUSH
19890: LD_INT 10
19892: PLUS
19893: PPUSH
19894: CALL_OW 110
19898: PUSH
19899: LD_EXP 20
19903: PUSH
19904: LD_INT 3
19906: MUL
19907: GREATEREQUAL
19908: IFFALSE 19915
// enable ( 3 ) else
19910: LD_INT 3
19912: ENABLE_MARKED
19913: GO 20166
// begin for i in Teams [ 1 ] do
19915: LD_ADDR_VAR 0 9
19919: PUSH
19920: LD_EXP 22
19924: PUSH
19925: LD_INT 1
19927: ARRAY
19928: PUSH
19929: FOR_IN
19930: IFFALSE 19963
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19932: LD_ADDR_VAR 0 5
19936: PUSH
19937: LD_VAR 0 5
19941: PUSH
19942: LD_VAR 0 9
19946: PUSH
19947: LD_INT 10
19949: PLUS
19950: PPUSH
19951: CALL_OW 110
19955: PUSH
19956: LD_INT 3
19958: DIV
19959: PLUS
19960: ST_TO_ADDR
19961: GO 19929
19963: POP
19964: POP
// for i in Teams [ 2 ] do
19965: LD_ADDR_VAR 0 9
19969: PUSH
19970: LD_EXP 22
19974: PUSH
19975: LD_INT 2
19977: ARRAY
19978: PUSH
19979: FOR_IN
19980: IFFALSE 20013
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19982: LD_ADDR_VAR 0 6
19986: PUSH
19987: LD_VAR 0 6
19991: PUSH
19992: LD_VAR 0 9
19996: PUSH
19997: LD_INT 10
19999: PLUS
20000: PPUSH
20001: CALL_OW 110
20005: PUSH
20006: LD_INT 3
20008: DIV
20009: PLUS
20010: ST_TO_ADDR
20011: GO 19979
20013: POP
20014: POP
// for i in Teams [ 3 ] do
20015: LD_ADDR_VAR 0 9
20019: PUSH
20020: LD_EXP 22
20024: PUSH
20025: LD_INT 3
20027: ARRAY
20028: PUSH
20029: FOR_IN
20030: IFFALSE 20063
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20032: LD_ADDR_VAR 0 7
20036: PUSH
20037: LD_VAR 0 7
20041: PUSH
20042: LD_VAR 0 9
20046: PUSH
20047: LD_INT 10
20049: PLUS
20050: PPUSH
20051: CALL_OW 110
20055: PUSH
20056: LD_INT 3
20058: DIV
20059: PLUS
20060: ST_TO_ADDR
20061: GO 20029
20063: POP
20064: POP
// for i in Teams [ 4 ] do
20065: LD_ADDR_VAR 0 9
20069: PUSH
20070: LD_EXP 22
20074: PUSH
20075: LD_INT 4
20077: ARRAY
20078: PUSH
20079: FOR_IN
20080: IFFALSE 20113
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20082: LD_ADDR_VAR 0 8
20086: PUSH
20087: LD_VAR 0 8
20091: PUSH
20092: LD_VAR 0 9
20096: PUSH
20097: LD_INT 10
20099: PLUS
20100: PPUSH
20101: CALL_OW 110
20105: PUSH
20106: LD_INT 3
20108: DIV
20109: PLUS
20110: ST_TO_ADDR
20111: GO 20079
20113: POP
20114: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
20115: LD_VAR 0 5
20119: PUSH
20120: LD_EXP 20
20124: GREATEREQUAL
20125: PUSH
20126: LD_VAR 0 6
20130: PUSH
20131: LD_EXP 20
20135: GREATEREQUAL
20136: OR
20137: PUSH
20138: LD_VAR 0 7
20142: PUSH
20143: LD_EXP 20
20147: GREATEREQUAL
20148: OR
20149: PUSH
20150: LD_VAR 0 8
20154: PUSH
20155: LD_EXP 20
20159: GREATEREQUAL
20160: OR
20161: IFFALSE 20166
// enable ( 3 ) ;
20163: LD_INT 3
20165: ENABLE_MARKED
// end ; end ;
20166: LD_VAR 0 1
20170: RET
// every 0 0$1 marked 2 do
20171: GO 20173
20173: DISABLE
// begin count_king ;
20174: CALL 19670 0 0
// show_public_points ;
20178: CALL 18563 0 0
// enable ;
20182: ENABLE
// end ;
20183: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
20184: GO 20186
20186: DISABLE
20187: LD_INT 0
20189: PPUSH
20190: PPUSH
20191: PPUSH
20192: PPUSH
20193: PPUSH
20194: PPUSH
// begin win := [ ] ;
20195: LD_ADDR_LOC 33
20199: PUSH
20200: EMPTY
20201: ST_TO_ADDR
// red = 0 ;
20202: LD_ADDR_VAR 0 2
20206: PUSH
20207: LD_INT 0
20209: ST_TO_ADDR
// blue = 0 ;
20210: LD_ADDR_VAR 0 3
20214: PUSH
20215: LD_INT 0
20217: ST_TO_ADDR
// yel = 0 ;
20218: LD_ADDR_VAR 0 4
20222: PUSH
20223: LD_INT 0
20225: ST_TO_ADDR
// green = 0 ;
20226: LD_ADDR_VAR 0 5
20230: PUSH
20231: LD_INT 0
20233: ST_TO_ADDR
// if not Team_Game then
20234: LD_EXP 25
20238: NOT
20239: IFFALSE 20316
// begin for side = 1 to 8 do
20241: LD_ADDR_VAR 0 1
20245: PUSH
20246: DOUBLE
20247: LD_INT 1
20249: DEC
20250: ST_TO_ADDR
20251: LD_INT 8
20253: PUSH
20254: FOR_TO
20255: IFFALSE 20300
// if GetTag ( side + 10 ) >= final_count * 3 then
20257: LD_VAR 0 1
20261: PUSH
20262: LD_INT 10
20264: PLUS
20265: PPUSH
20266: CALL_OW 110
20270: PUSH
20271: LD_EXP 20
20275: PUSH
20276: LD_INT 3
20278: MUL
20279: GREATEREQUAL
20280: IFFALSE 20298
// win := win ^ side ;
20282: LD_ADDR_LOC 33
20286: PUSH
20287: LD_LOC 33
20291: PUSH
20292: LD_VAR 0 1
20296: ADD
20297: ST_TO_ADDR
20298: GO 20254
20300: POP
20301: POP
// if win then
20302: LD_LOC 33
20306: IFFALSE 20313
// enable ( 4 ) else
20308: LD_INT 4
20310: ENABLE_MARKED
20311: GO 20314
// enable ;
20313: ENABLE
// end else
20314: GO 20632
// begin for i in Teams [ 1 ] do
20316: LD_ADDR_VAR 0 6
20320: PUSH
20321: LD_EXP 22
20325: PUSH
20326: LD_INT 1
20328: ARRAY
20329: PUSH
20330: FOR_IN
20331: IFFALSE 20364
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20333: LD_ADDR_VAR 0 2
20337: PUSH
20338: LD_VAR 0 2
20342: PUSH
20343: LD_VAR 0 6
20347: PUSH
20348: LD_INT 10
20350: PLUS
20351: PPUSH
20352: CALL_OW 110
20356: PUSH
20357: LD_INT 3
20359: DIV
20360: PLUS
20361: ST_TO_ADDR
20362: GO 20330
20364: POP
20365: POP
// for i in Teams [ 2 ] do
20366: LD_ADDR_VAR 0 6
20370: PUSH
20371: LD_EXP 22
20375: PUSH
20376: LD_INT 2
20378: ARRAY
20379: PUSH
20380: FOR_IN
20381: IFFALSE 20414
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20383: LD_ADDR_VAR 0 3
20387: PUSH
20388: LD_VAR 0 3
20392: PUSH
20393: LD_VAR 0 6
20397: PUSH
20398: LD_INT 10
20400: PLUS
20401: PPUSH
20402: CALL_OW 110
20406: PUSH
20407: LD_INT 3
20409: DIV
20410: PLUS
20411: ST_TO_ADDR
20412: GO 20380
20414: POP
20415: POP
// for i in Teams [ 3 ] do
20416: LD_ADDR_VAR 0 6
20420: PUSH
20421: LD_EXP 22
20425: PUSH
20426: LD_INT 3
20428: ARRAY
20429: PUSH
20430: FOR_IN
20431: IFFALSE 20464
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20433: LD_ADDR_VAR 0 4
20437: PUSH
20438: LD_VAR 0 4
20442: PUSH
20443: LD_VAR 0 6
20447: PUSH
20448: LD_INT 10
20450: PLUS
20451: PPUSH
20452: CALL_OW 110
20456: PUSH
20457: LD_INT 3
20459: DIV
20460: PLUS
20461: ST_TO_ADDR
20462: GO 20430
20464: POP
20465: POP
// for i in Teams [ 4 ] do
20466: LD_ADDR_VAR 0 6
20470: PUSH
20471: LD_EXP 22
20475: PUSH
20476: LD_INT 4
20478: ARRAY
20479: PUSH
20480: FOR_IN
20481: IFFALSE 20514
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20483: LD_ADDR_VAR 0 5
20487: PUSH
20488: LD_VAR 0 5
20492: PUSH
20493: LD_VAR 0 6
20497: PUSH
20498: LD_INT 10
20500: PLUS
20501: PPUSH
20502: CALL_OW 110
20506: PUSH
20507: LD_INT 3
20509: DIV
20510: PLUS
20511: ST_TO_ADDR
20512: GO 20480
20514: POP
20515: POP
// if red >= final_count then
20516: LD_VAR 0 2
20520: PUSH
20521: LD_EXP 20
20525: GREATEREQUAL
20526: IFFALSE 20542
// win = teams [ 1 ] ;
20528: LD_ADDR_LOC 33
20532: PUSH
20533: LD_EXP 22
20537: PUSH
20538: LD_INT 1
20540: ARRAY
20541: ST_TO_ADDR
// if blue >= final_count then
20542: LD_VAR 0 3
20546: PUSH
20547: LD_EXP 20
20551: GREATEREQUAL
20552: IFFALSE 20568
// win = teams [ 2 ] ;
20554: LD_ADDR_LOC 33
20558: PUSH
20559: LD_EXP 22
20563: PUSH
20564: LD_INT 2
20566: ARRAY
20567: ST_TO_ADDR
// if yel >= final_count then
20568: LD_VAR 0 4
20572: PUSH
20573: LD_EXP 20
20577: GREATEREQUAL
20578: IFFALSE 20594
// win = teams [ 3 ] ;
20580: LD_ADDR_LOC 33
20584: PUSH
20585: LD_EXP 22
20589: PUSH
20590: LD_INT 3
20592: ARRAY
20593: ST_TO_ADDR
// if green >= final_count then
20594: LD_VAR 0 5
20598: PUSH
20599: LD_EXP 20
20603: GREATEREQUAL
20604: IFFALSE 20620
// win = teams [ 4 ] ;
20606: LD_ADDR_LOC 33
20610: PUSH
20611: LD_EXP 22
20615: PUSH
20616: LD_INT 4
20618: ARRAY
20619: ST_TO_ADDR
// if win then
20620: LD_LOC 33
20624: IFFALSE 20631
// enable ( 4 ) else
20626: LD_INT 4
20628: ENABLE_MARKED
20629: GO 20632
// enable ;
20631: ENABLE
// end ; end ;
20632: PPOPN 6
20634: END
// every 0 0$1 marked 4 do
20635: GO 20637
20637: DISABLE
// begin if Player_Side in win then
20638: LD_EXP 27
20642: PUSH
20643: LD_LOC 33
20647: IN
20648: IFFALSE 20664
// begin wait ( 0 0$2 ) ;
20650: LD_INT 70
20652: PPUSH
20653: CALL_OW 67
// enable ( 401 ) ;
20657: LD_INT 401
20659: ENABLE_MARKED
// exit ;
20660: GO 20680
// end else
20662: GO 20680
// begin wait ( 0 0$2 ) ;
20664: LD_INT 70
20666: PPUSH
20667: CALL_OW 67
// Multiplayer_Loose_Message ;
20671: CALL_OW 521
// enable ( 400 ) ;
20675: LD_INT 400
20677: ENABLE_MARKED
// exit ;
20678: GO 20680
// end ; end ; end_of_file
20680: END
// export function SetMpTechs ( ) ; var side , i ; begin
20681: LD_INT 0
20683: PPUSH
20684: PPUSH
20685: PPUSH
// for side = 1 to 8 do
20686: LD_ADDR_VAR 0 2
20690: PUSH
20691: DOUBLE
20692: LD_INT 1
20694: DEC
20695: ST_TO_ADDR
20696: LD_INT 8
20698: PUSH
20699: FOR_TO
20700: IFFALSE 20821
// begin for i = 1 to 72 do
20702: LD_ADDR_VAR 0 3
20706: PUSH
20707: DOUBLE
20708: LD_INT 1
20710: DEC
20711: ST_TO_ADDR
20712: LD_INT 72
20714: PUSH
20715: FOR_TO
20716: IFFALSE 20747
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
20718: LD_VAR 0 3
20722: PPUSH
20723: LD_VAR 0 2
20727: PPUSH
20728: LD_INT 0
20730: PPUSH
20731: LD_VAR 0 3
20735: PPUSH
20736: CALL_OW 565
20740: PPUSH
20741: CALL_OW 322
20745: GO 20715
20747: POP
20748: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
20749: LD_INT 73
20751: PPUSH
20752: LD_VAR 0 2
20756: PPUSH
20757: LD_INT 0
20759: PPUSH
20760: LD_INT 25
20762: PPUSH
20763: CALL_OW 565
20767: PPUSH
20768: CALL_OW 322
// for i = 0 to 40 do
20772: LD_ADDR_VAR 0 3
20776: PUSH
20777: DOUBLE
20778: LD_INT 0
20780: DEC
20781: ST_TO_ADDR
20782: LD_INT 40
20784: PUSH
20785: FOR_TO
20786: IFFALSE 20817
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
20788: LD_VAR 0 3
20792: PPUSH
20793: LD_VAR 0 2
20797: PPUSH
20798: LD_INT 1
20800: PPUSH
20801: LD_VAR 0 3
20805: PPUSH
20806: CALL_OW 565
20810: PPUSH
20811: CALL_OW 324
20815: GO 20785
20817: POP
20818: POP
// end ;
20819: GO 20699
20821: POP
20822: POP
// end ;
20823: LD_VAR 0 1
20827: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
20828: LD_INT 0
20830: PPUSH
20831: PPUSH
20832: PPUSH
// for side = 1 to 8 do
20833: LD_ADDR_VAR 0 3
20837: PUSH
20838: DOUBLE
20839: LD_INT 1
20841: DEC
20842: ST_TO_ADDR
20843: LD_INT 8
20845: PUSH
20846: FOR_TO
20847: IFFALSE 24843
// begin for i = 1 to 73 do
20849: LD_ADDR_VAR 0 4
20853: PUSH
20854: DOUBLE
20855: LD_INT 1
20857: DEC
20858: ST_TO_ADDR
20859: LD_INT 73
20861: PUSH
20862: FOR_TO
20863: IFFALSE 20884
// SetTech ( i , side , state_disabled ) ;
20865: LD_VAR 0 4
20869: PPUSH
20870: LD_VAR 0 3
20874: PPUSH
20875: LD_INT 0
20877: PPUSH
20878: CALL_OW 322
20882: GO 20862
20884: POP
20885: POP
// for i = 0 to 40 do
20886: LD_ADDR_VAR 0 4
20890: PUSH
20891: DOUBLE
20892: LD_INT 0
20894: DEC
20895: ST_TO_ADDR
20896: LD_INT 40
20898: PUSH
20899: FOR_TO
20900: IFFALSE 20921
// SetRestrict ( i , side , false ) ;
20902: LD_VAR 0 4
20906: PPUSH
20907: LD_VAR 0 3
20911: PPUSH
20912: LD_INT 0
20914: PPUSH
20915: CALL_OW 324
20919: GO 20899
20921: POP
20922: POP
// case level of 1 :
20923: LD_VAR 0 1
20927: PUSH
20928: LD_INT 1
20930: DOUBLE
20931: EQUAL
20932: IFTRUE 20936
20934: GO 21089
20936: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20937: LD_INT 35
20939: PPUSH
20940: LD_VAR 0 3
20944: PPUSH
20945: LD_INT 1
20947: PPUSH
20948: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20952: LD_INT 45
20954: PPUSH
20955: LD_VAR 0 3
20959: PPUSH
20960: LD_INT 1
20962: PPUSH
20963: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20967: LD_INT 46
20969: PPUSH
20970: LD_VAR 0 3
20974: PPUSH
20975: LD_INT 1
20977: PPUSH
20978: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20982: LD_INT 47
20984: PPUSH
20985: LD_VAR 0 3
20989: PPUSH
20990: LD_INT 1
20992: PPUSH
20993: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
20997: LD_INT 0
20999: PPUSH
21000: LD_VAR 0 3
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21012: LD_INT 2
21014: PPUSH
21015: LD_VAR 0 3
21019: PPUSH
21020: LD_INT 1
21022: PPUSH
21023: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21027: LD_INT 4
21029: PPUSH
21030: LD_VAR 0 3
21034: PPUSH
21035: LD_INT 1
21037: PPUSH
21038: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21042: LD_INT 6
21044: PPUSH
21045: LD_VAR 0 3
21049: PPUSH
21050: LD_INT 1
21052: PPUSH
21053: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21057: LD_INT 29
21059: PPUSH
21060: LD_VAR 0 3
21064: PPUSH
21065: LD_INT 1
21067: PPUSH
21068: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21072: LD_INT 31
21074: PPUSH
21075: LD_VAR 0 3
21079: PPUSH
21080: LD_INT 1
21082: PPUSH
21083: CALL_OW 324
// end ; 2 :
21087: GO 24841
21089: LD_INT 2
21091: DOUBLE
21092: EQUAL
21093: IFTRUE 21097
21095: GO 21295
21097: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21098: LD_INT 35
21100: PPUSH
21101: LD_VAR 0 3
21105: PPUSH
21106: LD_INT 1
21108: PPUSH
21109: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21113: LD_INT 45
21115: PPUSH
21116: LD_VAR 0 3
21120: PPUSH
21121: LD_INT 1
21123: PPUSH
21124: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21128: LD_INT 46
21130: PPUSH
21131: LD_VAR 0 3
21135: PPUSH
21136: LD_INT 1
21138: PPUSH
21139: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21143: LD_INT 47
21145: PPUSH
21146: LD_VAR 0 3
21150: PPUSH
21151: LD_INT 1
21153: PPUSH
21154: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21158: LD_INT 1
21160: PPUSH
21161: LD_VAR 0 3
21165: PPUSH
21166: LD_INT 1
21168: PPUSH
21169: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21173: LD_INT 2
21175: PPUSH
21176: LD_VAR 0 3
21180: PPUSH
21181: LD_INT 1
21183: PPUSH
21184: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21188: LD_INT 11
21190: PPUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: LD_INT 1
21198: PPUSH
21199: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21203: LD_INT 0
21205: PPUSH
21206: LD_VAR 0 3
21210: PPUSH
21211: LD_INT 1
21213: PPUSH
21214: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21218: LD_INT 2
21220: PPUSH
21221: LD_VAR 0 3
21225: PPUSH
21226: LD_INT 1
21228: PPUSH
21229: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21233: LD_INT 4
21235: PPUSH
21236: LD_VAR 0 3
21240: PPUSH
21241: LD_INT 1
21243: PPUSH
21244: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21248: LD_INT 6
21250: PPUSH
21251: LD_VAR 0 3
21255: PPUSH
21256: LD_INT 1
21258: PPUSH
21259: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21263: LD_INT 29
21265: PPUSH
21266: LD_VAR 0 3
21270: PPUSH
21271: LD_INT 1
21273: PPUSH
21274: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21278: LD_INT 31
21280: PPUSH
21281: LD_VAR 0 3
21285: PPUSH
21286: LD_INT 1
21288: PPUSH
21289: CALL_OW 324
// end ; 3 :
21293: GO 24841
21295: LD_INT 3
21297: DOUBLE
21298: EQUAL
21299: IFTRUE 21303
21301: GO 21756
21303: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21304: LD_INT 35
21306: PPUSH
21307: LD_VAR 0 3
21311: PPUSH
21312: LD_INT 1
21314: PPUSH
21315: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21319: LD_INT 45
21321: PPUSH
21322: LD_VAR 0 3
21326: PPUSH
21327: LD_INT 1
21329: PPUSH
21330: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21334: LD_INT 46
21336: PPUSH
21337: LD_VAR 0 3
21341: PPUSH
21342: LD_INT 1
21344: PPUSH
21345: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21349: LD_INT 47
21351: PPUSH
21352: LD_VAR 0 3
21356: PPUSH
21357: LD_INT 1
21359: PPUSH
21360: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21364: LD_INT 1
21366: PPUSH
21367: LD_VAR 0 3
21371: PPUSH
21372: LD_INT 1
21374: PPUSH
21375: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21379: LD_INT 2
21381: PPUSH
21382: LD_VAR 0 3
21386: PPUSH
21387: LD_INT 1
21389: PPUSH
21390: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21394: LD_INT 11
21396: PPUSH
21397: LD_VAR 0 3
21401: PPUSH
21402: LD_INT 1
21404: PPUSH
21405: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21409: LD_INT 48
21411: PPUSH
21412: LD_VAR 0 3
21416: PPUSH
21417: LD_INT 1
21419: PPUSH
21420: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21424: LD_INT 69
21426: PPUSH
21427: LD_VAR 0 3
21431: PPUSH
21432: LD_INT 1
21434: PPUSH
21435: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21439: LD_INT 39
21441: PPUSH
21442: LD_VAR 0 3
21446: PPUSH
21447: LD_INT 1
21449: PPUSH
21450: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21454: LD_INT 43
21456: PPUSH
21457: LD_VAR 0 3
21461: PPUSH
21462: LD_INT 1
21464: PPUSH
21465: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21469: LD_INT 51
21471: PPUSH
21472: LD_VAR 0 3
21476: PPUSH
21477: LD_INT 1
21479: PPUSH
21480: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21484: LD_INT 6
21486: PPUSH
21487: LD_VAR 0 3
21491: PPUSH
21492: LD_INT 1
21494: PPUSH
21495: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21499: LD_INT 0
21501: PPUSH
21502: LD_VAR 0 3
21506: PPUSH
21507: LD_INT 1
21509: PPUSH
21510: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21514: LD_INT 2
21516: PPUSH
21517: LD_VAR 0 3
21521: PPUSH
21522: LD_INT 1
21524: PPUSH
21525: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21529: LD_INT 3
21531: PPUSH
21532: LD_VAR 0 3
21536: PPUSH
21537: LD_INT 1
21539: PPUSH
21540: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21544: LD_INT 4
21546: PPUSH
21547: LD_VAR 0 3
21551: PPUSH
21552: LD_INT 1
21554: PPUSH
21555: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21559: LD_INT 6
21561: PPUSH
21562: LD_VAR 0 3
21566: PPUSH
21567: LD_INT 1
21569: PPUSH
21570: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21574: LD_INT 7
21576: PPUSH
21577: LD_VAR 0 3
21581: PPUSH
21582: LD_INT 1
21584: PPUSH
21585: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21589: LD_INT 8
21591: PPUSH
21592: LD_VAR 0 3
21596: PPUSH
21597: LD_INT 1
21599: PPUSH
21600: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21604: LD_INT 10
21606: PPUSH
21607: LD_VAR 0 3
21611: PPUSH
21612: LD_INT 1
21614: PPUSH
21615: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21619: LD_INT 15
21621: PPUSH
21622: LD_VAR 0 3
21626: PPUSH
21627: LD_INT 1
21629: PPUSH
21630: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21634: LD_INT 16
21636: PPUSH
21637: LD_VAR 0 3
21641: PPUSH
21642: LD_INT 1
21644: PPUSH
21645: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21649: LD_INT 17
21651: PPUSH
21652: LD_VAR 0 3
21656: PPUSH
21657: LD_INT 1
21659: PPUSH
21660: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21664: LD_INT 20
21666: PPUSH
21667: LD_VAR 0 3
21671: PPUSH
21672: LD_INT 1
21674: PPUSH
21675: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21679: LD_INT 26
21681: PPUSH
21682: LD_VAR 0 3
21686: PPUSH
21687: LD_INT 1
21689: PPUSH
21690: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21694: LD_INT 27
21696: PPUSH
21697: LD_VAR 0 3
21701: PPUSH
21702: LD_INT 1
21704: PPUSH
21705: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21709: LD_INT 29
21711: PPUSH
21712: LD_VAR 0 3
21716: PPUSH
21717: LD_INT 1
21719: PPUSH
21720: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21724: LD_INT 31
21726: PPUSH
21727: LD_VAR 0 3
21731: PPUSH
21732: LD_INT 1
21734: PPUSH
21735: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21739: LD_INT 32
21741: PPUSH
21742: LD_VAR 0 3
21746: PPUSH
21747: LD_INT 1
21749: PPUSH
21750: CALL_OW 324
// end ; 4 :
21754: GO 24841
21756: LD_INT 4
21758: DOUBLE
21759: EQUAL
21760: IFTRUE 21764
21762: GO 22712
21764: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21765: LD_INT 35
21767: PPUSH
21768: LD_VAR 0 3
21772: PPUSH
21773: LD_INT 1
21775: PPUSH
21776: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21780: LD_INT 45
21782: PPUSH
21783: LD_VAR 0 3
21787: PPUSH
21788: LD_INT 1
21790: PPUSH
21791: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21795: LD_INT 46
21797: PPUSH
21798: LD_VAR 0 3
21802: PPUSH
21803: LD_INT 1
21805: PPUSH
21806: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21810: LD_INT 47
21812: PPUSH
21813: LD_VAR 0 3
21817: PPUSH
21818: LD_INT 1
21820: PPUSH
21821: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21825: LD_INT 1
21827: PPUSH
21828: LD_VAR 0 3
21832: PPUSH
21833: LD_INT 1
21835: PPUSH
21836: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21840: LD_INT 2
21842: PPUSH
21843: LD_VAR 0 3
21847: PPUSH
21848: LD_INT 1
21850: PPUSH
21851: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21855: LD_INT 11
21857: PPUSH
21858: LD_VAR 0 3
21862: PPUSH
21863: LD_INT 1
21865: PPUSH
21866: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21870: LD_INT 20
21872: PPUSH
21873: LD_VAR 0 3
21877: PPUSH
21878: LD_INT 1
21880: PPUSH
21881: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21885: LD_INT 48
21887: PPUSH
21888: LD_VAR 0 3
21892: PPUSH
21893: LD_INT 1
21895: PPUSH
21896: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21900: LD_INT 49
21902: PPUSH
21903: LD_VAR 0 3
21907: PPUSH
21908: LD_INT 1
21910: PPUSH
21911: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21915: LD_INT 69
21917: PPUSH
21918: LD_VAR 0 3
21922: PPUSH
21923: LD_INT 1
21925: PPUSH
21926: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21930: LD_INT 39
21932: PPUSH
21933: LD_VAR 0 3
21937: PPUSH
21938: LD_INT 1
21940: PPUSH
21941: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21945: LD_INT 34
21947: PPUSH
21948: LD_VAR 0 3
21952: PPUSH
21953: LD_INT 1
21955: PPUSH
21956: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21960: LD_INT 42
21962: PPUSH
21963: LD_VAR 0 3
21967: PPUSH
21968: LD_INT 1
21970: PPUSH
21971: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21975: LD_INT 44
21977: PPUSH
21978: LD_VAR 0 3
21982: PPUSH
21983: LD_INT 1
21985: PPUSH
21986: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
21990: LD_INT 41
21992: PPUSH
21993: LD_VAR 0 3
21997: PPUSH
21998: LD_INT 1
22000: PPUSH
22001: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22005: LD_INT 43
22007: PPUSH
22008: LD_VAR 0 3
22012: PPUSH
22013: LD_INT 1
22015: PPUSH
22016: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22020: LD_INT 70
22022: PPUSH
22023: LD_VAR 0 3
22027: PPUSH
22028: LD_INT 1
22030: PPUSH
22031: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22035: LD_INT 51
22037: PPUSH
22038: LD_VAR 0 3
22042: PPUSH
22043: LD_INT 1
22045: PPUSH
22046: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22050: LD_INT 52
22052: PPUSH
22053: LD_VAR 0 3
22057: PPUSH
22058: LD_INT 1
22060: PPUSH
22061: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22065: LD_INT 6
22067: PPUSH
22068: LD_VAR 0 3
22072: PPUSH
22073: LD_INT 1
22075: PPUSH
22076: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22080: LD_INT 15
22082: PPUSH
22083: LD_VAR 0 3
22087: PPUSH
22088: LD_INT 1
22090: PPUSH
22091: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22095: LD_INT 7
22097: PPUSH
22098: LD_VAR 0 3
22102: PPUSH
22103: LD_INT 1
22105: PPUSH
22106: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22110: LD_INT 12
22112: PPUSH
22113: LD_VAR 0 3
22117: PPUSH
22118: LD_INT 1
22120: PPUSH
22121: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22125: LD_INT 18
22127: PPUSH
22128: LD_VAR 0 3
22132: PPUSH
22133: LD_INT 1
22135: PPUSH
22136: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
22140: LD_INT 60
22142: PPUSH
22143: LD_VAR 0 3
22147: PPUSH
22148: LD_INT 1
22150: PPUSH
22151: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
22155: LD_INT 9
22157: PPUSH
22158: LD_VAR 0 3
22162: PPUSH
22163: LD_INT 1
22165: PPUSH
22166: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
22170: LD_INT 30
22172: PPUSH
22173: LD_VAR 0 3
22177: PPUSH
22178: LD_INT 1
22180: PPUSH
22181: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
22185: LD_INT 37
22187: PPUSH
22188: LD_VAR 0 3
22192: PPUSH
22193: LD_INT 1
22195: PPUSH
22196: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
22200: LD_INT 5
22202: PPUSH
22203: LD_VAR 0 3
22207: PPUSH
22208: LD_INT 1
22210: PPUSH
22211: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
22215: LD_INT 66
22217: PPUSH
22218: LD_VAR 0 3
22222: PPUSH
22223: LD_INT 1
22225: PPUSH
22226: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
22230: LD_INT 21
22232: PPUSH
22233: LD_VAR 0 3
22237: PPUSH
22238: LD_INT 1
22240: PPUSH
22241: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22245: LD_INT 22
22247: PPUSH
22248: LD_VAR 0 3
22252: PPUSH
22253: LD_INT 1
22255: PPUSH
22256: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22260: LD_INT 54
22262: PPUSH
22263: LD_VAR 0 3
22267: PPUSH
22268: LD_INT 1
22270: PPUSH
22271: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22275: LD_INT 0
22277: PPUSH
22278: LD_VAR 0 3
22282: PPUSH
22283: LD_INT 1
22285: PPUSH
22286: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22290: LD_INT 1
22292: PPUSH
22293: LD_VAR 0 3
22297: PPUSH
22298: LD_INT 1
22300: PPUSH
22301: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22305: LD_INT 2
22307: PPUSH
22308: LD_VAR 0 3
22312: PPUSH
22313: LD_INT 1
22315: PPUSH
22316: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22320: LD_INT 3
22322: PPUSH
22323: LD_VAR 0 3
22327: PPUSH
22328: LD_INT 1
22330: PPUSH
22331: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22335: LD_INT 4
22337: PPUSH
22338: LD_VAR 0 3
22342: PPUSH
22343: LD_INT 1
22345: PPUSH
22346: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22350: LD_INT 5
22352: PPUSH
22353: LD_VAR 0 3
22357: PPUSH
22358: LD_INT 1
22360: PPUSH
22361: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22365: LD_INT 6
22367: PPUSH
22368: LD_VAR 0 3
22372: PPUSH
22373: LD_INT 1
22375: PPUSH
22376: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22380: LD_INT 7
22382: PPUSH
22383: LD_VAR 0 3
22387: PPUSH
22388: LD_INT 1
22390: PPUSH
22391: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22395: LD_INT 8
22397: PPUSH
22398: LD_VAR 0 3
22402: PPUSH
22403: LD_INT 1
22405: PPUSH
22406: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22410: LD_INT 10
22412: PPUSH
22413: LD_VAR 0 3
22417: PPUSH
22418: LD_INT 1
22420: PPUSH
22421: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22425: LD_INT 11
22427: PPUSH
22428: LD_VAR 0 3
22432: PPUSH
22433: LD_INT 1
22435: PPUSH
22436: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22440: LD_INT 12
22442: PPUSH
22443: LD_VAR 0 3
22447: PPUSH
22448: LD_INT 1
22450: PPUSH
22451: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22455: LD_INT 13
22457: PPUSH
22458: LD_VAR 0 3
22462: PPUSH
22463: LD_INT 1
22465: PPUSH
22466: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22470: LD_INT 14
22472: PPUSH
22473: LD_VAR 0 3
22477: PPUSH
22478: LD_INT 1
22480: PPUSH
22481: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22485: LD_INT 15
22487: PPUSH
22488: LD_VAR 0 3
22492: PPUSH
22493: LD_INT 1
22495: PPUSH
22496: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22500: LD_INT 16
22502: PPUSH
22503: LD_VAR 0 3
22507: PPUSH
22508: LD_INT 1
22510: PPUSH
22511: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22515: LD_INT 17
22517: PPUSH
22518: LD_VAR 0 3
22522: PPUSH
22523: LD_INT 1
22525: PPUSH
22526: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22530: LD_INT 19
22532: PPUSH
22533: LD_VAR 0 3
22537: PPUSH
22538: LD_INT 1
22540: PPUSH
22541: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22545: LD_INT 20
22547: PPUSH
22548: LD_VAR 0 3
22552: PPUSH
22553: LD_INT 1
22555: PPUSH
22556: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22560: LD_INT 21
22562: PPUSH
22563: LD_VAR 0 3
22567: PPUSH
22568: LD_INT 1
22570: PPUSH
22571: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22575: LD_INT 23
22577: PPUSH
22578: LD_VAR 0 3
22582: PPUSH
22583: LD_INT 1
22585: PPUSH
22586: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22590: LD_INT 26
22592: PPUSH
22593: LD_VAR 0 3
22597: PPUSH
22598: LD_INT 1
22600: PPUSH
22601: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22605: LD_INT 27
22607: PPUSH
22608: LD_VAR 0 3
22612: PPUSH
22613: LD_INT 1
22615: PPUSH
22616: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22620: LD_INT 28
22622: PPUSH
22623: LD_VAR 0 3
22627: PPUSH
22628: LD_INT 1
22630: PPUSH
22631: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22635: LD_INT 29
22637: PPUSH
22638: LD_VAR 0 3
22642: PPUSH
22643: LD_INT 1
22645: PPUSH
22646: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22650: LD_INT 30
22652: PPUSH
22653: LD_VAR 0 3
22657: PPUSH
22658: LD_INT 1
22660: PPUSH
22661: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22665: LD_INT 31
22667: PPUSH
22668: LD_VAR 0 3
22672: PPUSH
22673: LD_INT 1
22675: PPUSH
22676: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22680: LD_INT 32
22682: PPUSH
22683: LD_VAR 0 3
22687: PPUSH
22688: LD_INT 1
22690: PPUSH
22691: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22695: LD_INT 36
22697: PPUSH
22698: LD_VAR 0 3
22702: PPUSH
22703: LD_INT 1
22705: PPUSH
22706: CALL_OW 324
// end ; 5 :
22710: GO 24841
22712: LD_INT 5
22714: DOUBLE
22715: EQUAL
22716: IFTRUE 22720
22718: GO 23833
22720: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22721: LD_INT 35
22723: PPUSH
22724: LD_VAR 0 3
22728: PPUSH
22729: LD_INT 1
22731: PPUSH
22732: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22736: LD_INT 45
22738: PPUSH
22739: LD_VAR 0 3
22743: PPUSH
22744: LD_INT 1
22746: PPUSH
22747: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22751: LD_INT 46
22753: PPUSH
22754: LD_VAR 0 3
22758: PPUSH
22759: LD_INT 1
22761: PPUSH
22762: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22766: LD_INT 47
22768: PPUSH
22769: LD_VAR 0 3
22773: PPUSH
22774: LD_INT 1
22776: PPUSH
22777: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22781: LD_INT 1
22783: PPUSH
22784: LD_VAR 0 3
22788: PPUSH
22789: LD_INT 1
22791: PPUSH
22792: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22796: LD_INT 2
22798: PPUSH
22799: LD_VAR 0 3
22803: PPUSH
22804: LD_INT 1
22806: PPUSH
22807: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22811: LD_INT 11
22813: PPUSH
22814: LD_VAR 0 3
22818: PPUSH
22819: LD_INT 1
22821: PPUSH
22822: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22826: LD_INT 20
22828: PPUSH
22829: LD_VAR 0 3
22833: PPUSH
22834: LD_INT 1
22836: PPUSH
22837: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22841: LD_INT 48
22843: PPUSH
22844: LD_VAR 0 3
22848: PPUSH
22849: LD_INT 1
22851: PPUSH
22852: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22856: LD_INT 49
22858: PPUSH
22859: LD_VAR 0 3
22863: PPUSH
22864: LD_INT 1
22866: PPUSH
22867: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22871: LD_INT 69
22873: PPUSH
22874: LD_VAR 0 3
22878: PPUSH
22879: LD_INT 1
22881: PPUSH
22882: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22886: LD_INT 39
22888: PPUSH
22889: LD_VAR 0 3
22893: PPUSH
22894: LD_INT 1
22896: PPUSH
22897: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22901: LD_INT 34
22903: PPUSH
22904: LD_VAR 0 3
22908: PPUSH
22909: LD_INT 1
22911: PPUSH
22912: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22916: LD_INT 42
22918: PPUSH
22919: LD_VAR 0 3
22923: PPUSH
22924: LD_INT 1
22926: PPUSH
22927: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22931: LD_INT 44
22933: PPUSH
22934: LD_VAR 0 3
22938: PPUSH
22939: LD_INT 1
22941: PPUSH
22942: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22946: LD_INT 41
22948: PPUSH
22949: LD_VAR 0 3
22953: PPUSH
22954: LD_INT 1
22956: PPUSH
22957: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22961: LD_INT 40
22963: PPUSH
22964: LD_VAR 0 3
22968: PPUSH
22969: LD_INT 1
22971: PPUSH
22972: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22976: LD_INT 43
22978: PPUSH
22979: LD_VAR 0 3
22983: PPUSH
22984: LD_INT 1
22986: PPUSH
22987: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22991: LD_INT 70
22993: PPUSH
22994: LD_VAR 0 3
22998: PPUSH
22999: LD_INT 1
23001: PPUSH
23002: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23006: LD_INT 51
23008: PPUSH
23009: LD_VAR 0 3
23013: PPUSH
23014: LD_INT 1
23016: PPUSH
23017: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23021: LD_INT 52
23023: PPUSH
23024: LD_VAR 0 3
23028: PPUSH
23029: LD_INT 1
23031: PPUSH
23032: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23036: LD_INT 6
23038: PPUSH
23039: LD_VAR 0 3
23043: PPUSH
23044: LD_INT 1
23046: PPUSH
23047: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23051: LD_INT 15
23053: PPUSH
23054: LD_VAR 0 3
23058: PPUSH
23059: LD_INT 1
23061: PPUSH
23062: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23066: LD_INT 7
23068: PPUSH
23069: LD_VAR 0 3
23073: PPUSH
23074: LD_INT 1
23076: PPUSH
23077: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23081: LD_INT 12
23083: PPUSH
23084: LD_VAR 0 3
23088: PPUSH
23089: LD_INT 1
23091: PPUSH
23092: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
23096: LD_INT 17
23098: PPUSH
23099: LD_VAR 0 3
23103: PPUSH
23104: LD_INT 1
23106: PPUSH
23107: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23111: LD_INT 18
23113: PPUSH
23114: LD_VAR 0 3
23118: PPUSH
23119: LD_INT 1
23121: PPUSH
23122: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23126: LD_INT 60
23128: PPUSH
23129: LD_VAR 0 3
23133: PPUSH
23134: LD_INT 1
23136: PPUSH
23137: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23141: LD_INT 32
23143: PPUSH
23144: LD_VAR 0 3
23148: PPUSH
23149: LD_INT 1
23151: PPUSH
23152: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23156: LD_INT 9
23158: PPUSH
23159: LD_VAR 0 3
23163: PPUSH
23164: LD_INT 1
23166: PPUSH
23167: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23171: LD_INT 57
23173: PPUSH
23174: LD_VAR 0 3
23178: PPUSH
23179: LD_INT 1
23181: PPUSH
23182: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23186: LD_INT 30
23188: PPUSH
23189: LD_VAR 0 3
23193: PPUSH
23194: LD_INT 1
23196: PPUSH
23197: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23201: LD_INT 37
23203: PPUSH
23204: LD_VAR 0 3
23208: PPUSH
23209: LD_INT 1
23211: PPUSH
23212: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23216: LD_INT 63
23218: PPUSH
23219: LD_VAR 0 3
23223: PPUSH
23224: LD_INT 1
23226: PPUSH
23227: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23231: LD_INT 3
23233: PPUSH
23234: LD_VAR 0 3
23238: PPUSH
23239: LD_INT 1
23241: PPUSH
23242: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23246: LD_INT 4
23248: PPUSH
23249: LD_VAR 0 3
23253: PPUSH
23254: LD_INT 1
23256: PPUSH
23257: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23261: LD_INT 5
23263: PPUSH
23264: LD_VAR 0 3
23268: PPUSH
23269: LD_INT 1
23271: PPUSH
23272: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23276: LD_INT 66
23278: PPUSH
23279: LD_VAR 0 3
23283: PPUSH
23284: LD_INT 1
23286: PPUSH
23287: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23291: LD_INT 21
23293: PPUSH
23294: LD_VAR 0 3
23298: PPUSH
23299: LD_INT 1
23301: PPUSH
23302: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23306: LD_INT 22
23308: PPUSH
23309: LD_VAR 0 3
23313: PPUSH
23314: LD_INT 1
23316: PPUSH
23317: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23321: LD_INT 19
23323: PPUSH
23324: LD_VAR 0 3
23328: PPUSH
23329: LD_INT 1
23331: PPUSH
23332: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23336: LD_INT 54
23338: PPUSH
23339: LD_VAR 0 3
23343: PPUSH
23344: LD_INT 1
23346: PPUSH
23347: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23351: LD_INT 55
23353: PPUSH
23354: LD_VAR 0 3
23358: PPUSH
23359: LD_INT 1
23361: PPUSH
23362: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23366: LD_INT 0
23368: PPUSH
23369: LD_VAR 0 3
23373: PPUSH
23374: LD_INT 1
23376: PPUSH
23377: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23381: LD_INT 1
23383: PPUSH
23384: LD_VAR 0 3
23388: PPUSH
23389: LD_INT 1
23391: PPUSH
23392: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23396: LD_INT 2
23398: PPUSH
23399: LD_VAR 0 3
23403: PPUSH
23404: LD_INT 1
23406: PPUSH
23407: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23411: LD_INT 3
23413: PPUSH
23414: LD_VAR 0 3
23418: PPUSH
23419: LD_INT 1
23421: PPUSH
23422: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23426: LD_INT 4
23428: PPUSH
23429: LD_VAR 0 3
23433: PPUSH
23434: LD_INT 1
23436: PPUSH
23437: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23441: LD_INT 5
23443: PPUSH
23444: LD_VAR 0 3
23448: PPUSH
23449: LD_INT 1
23451: PPUSH
23452: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23456: LD_INT 6
23458: PPUSH
23459: LD_VAR 0 3
23463: PPUSH
23464: LD_INT 1
23466: PPUSH
23467: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23471: LD_INT 7
23473: PPUSH
23474: LD_VAR 0 3
23478: PPUSH
23479: LD_INT 1
23481: PPUSH
23482: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23486: LD_INT 8
23488: PPUSH
23489: LD_VAR 0 3
23493: PPUSH
23494: LD_INT 1
23496: PPUSH
23497: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23501: LD_INT 10
23503: PPUSH
23504: LD_VAR 0 3
23508: PPUSH
23509: LD_INT 1
23511: PPUSH
23512: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23516: LD_INT 11
23518: PPUSH
23519: LD_VAR 0 3
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23531: LD_INT 12
23533: PPUSH
23534: LD_VAR 0 3
23538: PPUSH
23539: LD_INT 1
23541: PPUSH
23542: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23546: LD_INT 13
23548: PPUSH
23549: LD_VAR 0 3
23553: PPUSH
23554: LD_INT 1
23556: PPUSH
23557: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23561: LD_INT 14
23563: PPUSH
23564: LD_VAR 0 3
23568: PPUSH
23569: LD_INT 1
23571: PPUSH
23572: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23576: LD_INT 15
23578: PPUSH
23579: LD_VAR 0 3
23583: PPUSH
23584: LD_INT 1
23586: PPUSH
23587: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23591: LD_INT 16
23593: PPUSH
23594: LD_VAR 0 3
23598: PPUSH
23599: LD_INT 1
23601: PPUSH
23602: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23606: LD_INT 17
23608: PPUSH
23609: LD_VAR 0 3
23613: PPUSH
23614: LD_INT 1
23616: PPUSH
23617: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
23621: LD_INT 18
23623: PPUSH
23624: LD_VAR 0 3
23628: PPUSH
23629: LD_INT 1
23631: PPUSH
23632: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23636: LD_INT 19
23638: PPUSH
23639: LD_VAR 0 3
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23651: LD_INT 20
23653: PPUSH
23654: LD_VAR 0 3
23658: PPUSH
23659: LD_INT 1
23661: PPUSH
23662: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23666: LD_INT 21
23668: PPUSH
23669: LD_VAR 0 3
23673: PPUSH
23674: LD_INT 1
23676: PPUSH
23677: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23681: LD_INT 23
23683: PPUSH
23684: LD_VAR 0 3
23688: PPUSH
23689: LD_INT 1
23691: PPUSH
23692: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23696: LD_INT 26
23698: PPUSH
23699: LD_VAR 0 3
23703: PPUSH
23704: LD_INT 1
23706: PPUSH
23707: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23711: LD_INT 27
23713: PPUSH
23714: LD_VAR 0 3
23718: PPUSH
23719: LD_INT 1
23721: PPUSH
23722: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23726: LD_INT 28
23728: PPUSH
23729: LD_VAR 0 3
23733: PPUSH
23734: LD_INT 1
23736: PPUSH
23737: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23741: LD_INT 29
23743: PPUSH
23744: LD_VAR 0 3
23748: PPUSH
23749: LD_INT 1
23751: PPUSH
23752: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23756: LD_INT 30
23758: PPUSH
23759: LD_VAR 0 3
23763: PPUSH
23764: LD_INT 1
23766: PPUSH
23767: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23771: LD_INT 31
23773: PPUSH
23774: LD_VAR 0 3
23778: PPUSH
23779: LD_INT 1
23781: PPUSH
23782: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23786: LD_INT 32
23788: PPUSH
23789: LD_VAR 0 3
23793: PPUSH
23794: LD_INT 1
23796: PPUSH
23797: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
23801: LD_INT 33
23803: PPUSH
23804: LD_VAR 0 3
23808: PPUSH
23809: LD_INT 1
23811: PPUSH
23812: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23816: LD_INT 36
23818: PPUSH
23819: LD_VAR 0 3
23823: PPUSH
23824: LD_INT 1
23826: PPUSH
23827: CALL_OW 324
// end ; 6 :
23831: GO 24841
23833: LD_INT 6
23835: DOUBLE
23836: EQUAL
23837: IFTRUE 23841
23839: GO 24766
23841: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23842: LD_INT 35
23844: PPUSH
23845: LD_VAR 0 3
23849: PPUSH
23850: LD_INT 1
23852: PPUSH
23853: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23857: LD_INT 45
23859: PPUSH
23860: LD_VAR 0 3
23864: PPUSH
23865: LD_INT 1
23867: PPUSH
23868: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23872: LD_INT 46
23874: PPUSH
23875: LD_VAR 0 3
23879: PPUSH
23880: LD_INT 1
23882: PPUSH
23883: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23887: LD_INT 47
23889: PPUSH
23890: LD_VAR 0 3
23894: PPUSH
23895: LD_INT 1
23897: PPUSH
23898: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23902: LD_INT 1
23904: PPUSH
23905: LD_VAR 0 3
23909: PPUSH
23910: LD_INT 1
23912: PPUSH
23913: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23917: LD_INT 2
23919: PPUSH
23920: LD_VAR 0 3
23924: PPUSH
23925: LD_INT 1
23927: PPUSH
23928: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23932: LD_INT 11
23934: PPUSH
23935: LD_VAR 0 3
23939: PPUSH
23940: LD_INT 1
23942: PPUSH
23943: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23947: LD_INT 20
23949: PPUSH
23950: LD_VAR 0 3
23954: PPUSH
23955: LD_INT 1
23957: PPUSH
23958: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23962: LD_INT 48
23964: PPUSH
23965: LD_VAR 0 3
23969: PPUSH
23970: LD_INT 1
23972: PPUSH
23973: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23977: LD_INT 49
23979: PPUSH
23980: LD_VAR 0 3
23984: PPUSH
23985: LD_INT 1
23987: PPUSH
23988: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
23992: LD_INT 50
23994: PPUSH
23995: LD_VAR 0 3
23999: PPUSH
24000: LD_INT 1
24002: PPUSH
24003: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24007: LD_INT 69
24009: PPUSH
24010: LD_VAR 0 3
24014: PPUSH
24015: LD_INT 1
24017: PPUSH
24018: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24022: LD_INT 39
24024: PPUSH
24025: LD_VAR 0 3
24029: PPUSH
24030: LD_INT 1
24032: PPUSH
24033: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24037: LD_INT 34
24039: PPUSH
24040: LD_VAR 0 3
24044: PPUSH
24045: LD_INT 1
24047: PPUSH
24048: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24052: LD_INT 42
24054: PPUSH
24055: LD_VAR 0 3
24059: PPUSH
24060: LD_INT 1
24062: PPUSH
24063: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24067: LD_INT 44
24069: PPUSH
24070: LD_VAR 0 3
24074: PPUSH
24075: LD_INT 1
24077: PPUSH
24078: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24082: LD_INT 41
24084: PPUSH
24085: LD_VAR 0 3
24089: PPUSH
24090: LD_INT 1
24092: PPUSH
24093: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
24097: LD_INT 13
24099: PPUSH
24100: LD_VAR 0 3
24104: PPUSH
24105: LD_INT 1
24107: PPUSH
24108: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24112: LD_INT 40
24114: PPUSH
24115: LD_VAR 0 3
24119: PPUSH
24120: LD_INT 1
24122: PPUSH
24123: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24127: LD_INT 43
24129: PPUSH
24130: LD_VAR 0 3
24134: PPUSH
24135: LD_INT 1
24137: PPUSH
24138: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24142: LD_INT 70
24144: PPUSH
24145: LD_VAR 0 3
24149: PPUSH
24150: LD_INT 1
24152: PPUSH
24153: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
24157: LD_INT 23
24159: PPUSH
24160: LD_VAR 0 3
24164: PPUSH
24165: LD_INT 1
24167: PPUSH
24168: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24172: LD_INT 51
24174: PPUSH
24175: LD_VAR 0 3
24179: PPUSH
24180: LD_INT 1
24182: PPUSH
24183: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24187: LD_INT 52
24189: PPUSH
24190: LD_VAR 0 3
24194: PPUSH
24195: LD_INT 1
24197: PPUSH
24198: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24202: LD_INT 6
24204: PPUSH
24205: LD_VAR 0 3
24209: PPUSH
24210: LD_INT 1
24212: PPUSH
24213: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24217: LD_INT 15
24219: PPUSH
24220: LD_VAR 0 3
24224: PPUSH
24225: LD_INT 1
24227: PPUSH
24228: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24232: LD_INT 7
24234: PPUSH
24235: LD_VAR 0 3
24239: PPUSH
24240: LD_INT 1
24242: PPUSH
24243: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24247: LD_INT 12
24249: PPUSH
24250: LD_VAR 0 3
24254: PPUSH
24255: LD_INT 1
24257: PPUSH
24258: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
24262: LD_INT 10
24264: PPUSH
24265: LD_VAR 0 3
24269: PPUSH
24270: LD_INT 1
24272: PPUSH
24273: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24277: LD_INT 17
24279: PPUSH
24280: LD_VAR 0 3
24284: PPUSH
24285: LD_INT 1
24287: PPUSH
24288: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24292: LD_INT 18
24294: PPUSH
24295: LD_VAR 0 3
24299: PPUSH
24300: LD_INT 1
24302: PPUSH
24303: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24307: LD_INT 60
24309: PPUSH
24310: LD_VAR 0 3
24314: PPUSH
24315: LD_INT 1
24317: PPUSH
24318: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
24322: LD_INT 61
24324: PPUSH
24325: LD_VAR 0 3
24329: PPUSH
24330: LD_INT 1
24332: PPUSH
24333: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24337: LD_INT 32
24339: PPUSH
24340: LD_VAR 0 3
24344: PPUSH
24345: LD_INT 1
24347: PPUSH
24348: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
24352: LD_INT 27
24354: PPUSH
24355: LD_VAR 0 3
24359: PPUSH
24360: LD_INT 1
24362: PPUSH
24363: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
24367: LD_INT 36
24369: PPUSH
24370: LD_VAR 0 3
24374: PPUSH
24375: LD_INT 1
24377: PPUSH
24378: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
24382: LD_INT 33
24384: PPUSH
24385: LD_VAR 0 3
24389: PPUSH
24390: LD_INT 1
24392: PPUSH
24393: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24397: LD_INT 9
24399: PPUSH
24400: LD_VAR 0 3
24404: PPUSH
24405: LD_INT 1
24407: PPUSH
24408: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
24412: LD_INT 38
24414: PPUSH
24415: LD_VAR 0 3
24419: PPUSH
24420: LD_INT 1
24422: PPUSH
24423: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24427: LD_INT 57
24429: PPUSH
24430: LD_VAR 0 3
24434: PPUSH
24435: LD_INT 1
24437: PPUSH
24438: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
24442: LD_INT 58
24444: PPUSH
24445: LD_VAR 0 3
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
24457: LD_INT 28
24459: PPUSH
24460: LD_VAR 0 3
24464: PPUSH
24465: LD_INT 1
24467: PPUSH
24468: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
24472: LD_INT 29
24474: PPUSH
24475: LD_VAR 0 3
24479: PPUSH
24480: LD_INT 1
24482: PPUSH
24483: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24487: LD_INT 30
24489: PPUSH
24490: LD_VAR 0 3
24494: PPUSH
24495: LD_INT 1
24497: PPUSH
24498: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24502: LD_INT 37
24504: PPUSH
24505: LD_VAR 0 3
24509: PPUSH
24510: LD_INT 1
24512: PPUSH
24513: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24517: LD_INT 63
24519: PPUSH
24520: LD_VAR 0 3
24524: PPUSH
24525: LD_INT 1
24527: PPUSH
24528: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
24532: LD_INT 64
24534: PPUSH
24535: LD_VAR 0 3
24539: PPUSH
24540: LD_INT 1
24542: PPUSH
24543: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24547: LD_INT 3
24549: PPUSH
24550: LD_VAR 0 3
24554: PPUSH
24555: LD_INT 1
24557: PPUSH
24558: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24562: LD_INT 4
24564: PPUSH
24565: LD_VAR 0 3
24569: PPUSH
24570: LD_INT 1
24572: PPUSH
24573: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24577: LD_INT 5
24579: PPUSH
24580: LD_VAR 0 3
24584: PPUSH
24585: LD_INT 1
24587: PPUSH
24588: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
24592: LD_INT 8
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: LD_INT 1
24602: PPUSH
24603: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24607: LD_INT 66
24609: PPUSH
24610: LD_VAR 0 3
24614: PPUSH
24615: LD_INT 1
24617: PPUSH
24618: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
24622: LD_INT 67
24624: PPUSH
24625: LD_VAR 0 3
24629: PPUSH
24630: LD_INT 1
24632: PPUSH
24633: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24637: LD_INT 21
24639: PPUSH
24640: LD_VAR 0 3
24644: PPUSH
24645: LD_INT 1
24647: PPUSH
24648: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24652: LD_INT 22
24654: PPUSH
24655: LD_VAR 0 3
24659: PPUSH
24660: LD_INT 1
24662: PPUSH
24663: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24667: LD_INT 19
24669: PPUSH
24670: LD_VAR 0 3
24674: PPUSH
24675: LD_INT 1
24677: PPUSH
24678: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
24682: LD_INT 26
24684: PPUSH
24685: LD_VAR 0 3
24689: PPUSH
24690: LD_INT 1
24692: PPUSH
24693: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24697: LD_INT 54
24699: PPUSH
24700: LD_VAR 0 3
24704: PPUSH
24705: LD_INT 1
24707: PPUSH
24708: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24712: LD_INT 55
24714: PPUSH
24715: LD_VAR 0 3
24719: PPUSH
24720: LD_INT 1
24722: PPUSH
24723: CALL_OW 322
// for i = 0 to 39 do
24727: LD_ADDR_VAR 0 4
24731: PUSH
24732: DOUBLE
24733: LD_INT 0
24735: DEC
24736: ST_TO_ADDR
24737: LD_INT 39
24739: PUSH
24740: FOR_TO
24741: IFFALSE 24762
// SetRestrict ( i , side , true ) ;
24743: LD_VAR 0 4
24747: PPUSH
24748: LD_VAR 0 3
24752: PPUSH
24753: LD_INT 1
24755: PPUSH
24756: CALL_OW 324
24760: GO 24740
24762: POP
24763: POP
// end ; else
24764: GO 24841
24766: POP
// begin for i = 1 to 73 do
24767: LD_ADDR_VAR 0 4
24771: PUSH
24772: DOUBLE
24773: LD_INT 1
24775: DEC
24776: ST_TO_ADDR
24777: LD_INT 73
24779: PUSH
24780: FOR_TO
24781: IFFALSE 24802
// SetTech ( i , side , state_enabled ) ;
24783: LD_VAR 0 4
24787: PPUSH
24788: LD_VAR 0 3
24792: PPUSH
24793: LD_INT 1
24795: PPUSH
24796: CALL_OW 322
24800: GO 24780
24802: POP
24803: POP
// for i = 0 to 39 do
24804: LD_ADDR_VAR 0 4
24808: PUSH
24809: DOUBLE
24810: LD_INT 0
24812: DEC
24813: ST_TO_ADDR
24814: LD_INT 39
24816: PUSH
24817: FOR_TO
24818: IFFALSE 24839
// SetRestrict ( i , side , true ) ;
24820: LD_VAR 0 4
24824: PPUSH
24825: LD_VAR 0 3
24829: PPUSH
24830: LD_INT 1
24832: PPUSH
24833: CALL_OW 324
24837: GO 24817
24839: POP
24840: POP
// end ; end ; end ;
24841: GO 20846
24843: POP
24844: POP
// end ; end_of_file
24845: LD_VAR 0 2
24849: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
24850: LD_INT 0
24852: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
24853: LD_VAR 0 1
24857: PPUSH
24858: LD_VAR 0 2
24862: PPUSH
24863: LD_VAR 0 3
24867: PPUSH
24868: LD_INT 0
24870: PPUSH
24871: CALL 24880 0 4
// end ;
24875: LD_VAR 0 4
24879: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
24880: LD_INT 0
24882: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
24883: LD_STRING initScore({
24885: PUSH
24886: LD_VAR 0 1
24890: PUSH
24891: LD_INT 1
24893: ARRAY
24894: STR
24895: PUSH
24896: LD_STRING ,
24898: STR
24899: PUSH
24900: LD_VAR 0 1
24904: PUSH
24905: LD_INT 2
24907: ARRAY
24908: STR
24909: PUSH
24910: LD_STRING ,
24912: STR
24913: PUSH
24914: LD_VAR 0 1
24918: PUSH
24919: LD_INT 3
24921: ARRAY
24922: STR
24923: PUSH
24924: LD_STRING ,
24926: STR
24927: PUSH
24928: LD_VAR 0 1
24932: PUSH
24933: LD_INT 4
24935: ARRAY
24936: STR
24937: PUSH
24938: LD_STRING ,
24940: STR
24941: PUSH
24942: LD_VAR 0 1
24946: PUSH
24947: LD_INT 5
24949: ARRAY
24950: STR
24951: PUSH
24952: LD_STRING ,
24954: STR
24955: PUSH
24956: LD_VAR 0 1
24960: PUSH
24961: LD_INT 6
24963: ARRAY
24964: STR
24965: PUSH
24966: LD_STRING ,
24968: STR
24969: PUSH
24970: LD_VAR 0 1
24974: PUSH
24975: LD_INT 7
24977: ARRAY
24978: STR
24979: PUSH
24980: LD_STRING ,
24982: STR
24983: PUSH
24984: LD_VAR 0 1
24988: PUSH
24989: LD_INT 8
24991: ARRAY
24992: STR
24993: PUSH
24994: LD_STRING },
24996: STR
24997: PUSH
24998: LD_VAR 0 2
25002: STR
25003: PUSH
25004: LD_STRING ,
25006: STR
25007: PUSH
25008: LD_VAR 0 3
25012: STR
25013: PUSH
25014: LD_STRING ,
25016: STR
25017: PUSH
25018: LD_VAR 0 4
25022: STR
25023: PUSH
25024: LD_STRING );
25026: STR
25027: PPUSH
25028: CALL_OW 559
// end ;
25032: LD_VAR 0 5
25036: RET
// export function LScore_Reset ( ) ; begin
25037: LD_INT 0
25039: PPUSH
// ToLua ( ResetScorebar(); ) ;
25040: LD_STRING ResetScorebar();
25042: PPUSH
25043: CALL_OW 559
// end ;
25047: LD_VAR 0 1
25051: RET
// export function LScore_Delete ( ID ) ; begin
25052: LD_INT 0
25054: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
25055: LD_STRING deleteScore(
25057: PUSH
25058: LD_VAR 0 1
25062: STR
25063: PUSH
25064: LD_STRING );
25066: STR
25067: PPUSH
25068: CALL_OW 559
// end ;
25072: LD_VAR 0 2
25076: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
25077: LD_INT 0
25079: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
25080: LD_STRING AST(
25082: PUSH
25083: LD_VAR 0 1
25087: STR
25088: PUSH
25089: LD_STRING ,
25091: STR
25092: PUSH
25093: LD_VAR 0 2
25097: STR
25098: PUSH
25099: LD_STRING ,
25101: STR
25102: PUSH
25103: LD_VAR 0 3
25107: STR
25108: PUSH
25109: LD_STRING ,);
25111: STR
25112: PPUSH
25113: CALL_OW 559
// end ;
25117: LD_VAR 0 4
25121: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
25122: LD_INT 0
25124: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
25125: LD_STRING AST(
25127: PUSH
25128: LD_VAR 0 1
25132: STR
25133: PUSH
25134: LD_STRING ,
25136: STR
25137: PUSH
25138: LD_VAR 0 2
25142: STR
25143: PUSH
25144: LD_STRING ,
25146: STR
25147: PUSH
25148: LD_VAR 0 3
25152: STR
25153: PUSH
25154: LD_STRING ,
25156: STR
25157: PUSH
25158: LD_VAR 0 4
25162: STR
25163: PUSH
25164: LD_STRING );
25166: STR
25167: PPUSH
25168: CALL_OW 559
// end ;
25172: LD_VAR 0 5
25176: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
25177: LD_INT 0
25179: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
25180: LD_STRING AST(
25182: PUSH
25183: LD_VAR 0 1
25187: STR
25188: PUSH
25189: LD_STRING ,
25191: STR
25192: PUSH
25193: LD_VAR 0 2
25197: STR
25198: PUSH
25199: LD_STRING ,
25201: STR
25202: PUSH
25203: LD_VAR 0 3
25207: STR
25208: PUSH
25209: LD_STRING ,
25211: STR
25212: PUSH
25213: LD_VAR 0 4
25217: STR
25218: PUSH
25219: LD_STRING ,
25221: STR
25222: PUSH
25223: LD_VAR 0 5
25227: STR
25228: PUSH
25229: LD_STRING );
25231: STR
25232: PPUSH
25233: CALL_OW 559
// end ;
25237: LD_VAR 0 6
25241: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
25242: LD_INT 0
25244: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
25245: LD_STRING ASRT(
25247: PUSH
25248: LD_VAR 0 1
25252: STR
25253: PUSH
25254: LD_STRING ,
25256: STR
25257: PUSH
25258: LD_VAR 0 2
25262: STR
25263: PUSH
25264: LD_STRING ,
25266: STR
25267: PUSH
25268: LD_VAR 0 3
25272: STR
25273: PUSH
25274: LD_STRING ,);
25276: STR
25277: PPUSH
25278: CALL_OW 559
// end ;
25282: LD_VAR 0 4
25286: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
25287: LD_INT 0
25289: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
25290: LD_STRING ASRT(
25292: PUSH
25293: LD_VAR 0 1
25297: STR
25298: PUSH
25299: LD_STRING ,
25301: STR
25302: PUSH
25303: LD_VAR 0 2
25307: STR
25308: PUSH
25309: LD_STRING ,
25311: STR
25312: PUSH
25313: LD_VAR 0 3
25317: STR
25318: PUSH
25319: LD_STRING ,
25321: STR
25322: PUSH
25323: LD_VAR 0 4
25327: STR
25328: PUSH
25329: LD_STRING );
25331: STR
25332: PPUSH
25333: CALL_OW 559
// end ;
25337: LD_VAR 0 5
25341: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
25342: LD_INT 0
25344: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
25345: LD_STRING ASRT(
25347: PUSH
25348: LD_VAR 0 1
25352: STR
25353: PUSH
25354: LD_STRING ,
25356: STR
25357: PUSH
25358: LD_VAR 0 2
25362: STR
25363: PUSH
25364: LD_STRING ,
25366: STR
25367: PUSH
25368: LD_VAR 0 3
25372: STR
25373: PUSH
25374: LD_STRING ,
25376: STR
25377: PUSH
25378: LD_VAR 0 4
25382: STR
25383: PUSH
25384: LD_STRING ,
25386: STR
25387: PUSH
25388: LD_VAR 0 5
25392: STR
25393: PUSH
25394: LD_STRING );
25396: STR
25397: PPUSH
25398: CALL_OW 559
// end ;
25402: LD_VAR 0 6
25406: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
25407: LD_INT 0
25409: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
25410: LD_STRING UST(
25412: PUSH
25413: LD_VAR 0 1
25417: STR
25418: PUSH
25419: LD_STRING ,
25421: STR
25422: PUSH
25423: LD_VAR 0 2
25427: STR
25428: PUSH
25429: LD_STRING );
25431: STR
25432: PPUSH
25433: CALL_OW 559
// end ;
25437: LD_VAR 0 3
25441: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
25442: LD_INT 0
25444: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
25445: LD_STRING UST(
25447: PUSH
25448: LD_VAR 0 1
25452: STR
25453: PUSH
25454: LD_STRING ,
25456: STR
25457: PUSH
25458: LD_VAR 0 2
25462: STR
25463: PUSH
25464: LD_STRING ,
25466: STR
25467: PUSH
25468: LD_VAR 0 3
25472: STR
25473: PUSH
25474: LD_STRING );
25476: STR
25477: PPUSH
25478: CALL_OW 559
// end ;
25482: LD_VAR 0 4
25486: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
25487: LD_INT 0
25489: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
25490: LD_STRING CCST(
25492: PUSH
25493: LD_VAR 0 1
25497: STR
25498: PUSH
25499: LD_STRING ,{
25501: STR
25502: PUSH
25503: LD_VAR 0 2
25507: STR
25508: PUSH
25509: LD_STRING ,
25511: STR
25512: PUSH
25513: LD_VAR 0 3
25517: STR
25518: PUSH
25519: LD_STRING ,
25521: STR
25522: PUSH
25523: LD_VAR 0 4
25527: STR
25528: PUSH
25529: LD_STRING });
25531: STR
25532: PPUSH
25533: CALL_OW 559
// end ;
25537: LD_VAR 0 5
25541: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
25542: LD_INT 0
25544: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
25545: LD_STRING CCST(
25547: PUSH
25548: LD_VAR 0 1
25552: STR
25553: PUSH
25554: LD_STRING ,
25556: STR
25557: PUSH
25558: LD_VAR 0 2
25562: STR
25563: PUSH
25564: LD_STRING );
25566: STR
25567: PPUSH
25568: CALL_OW 559
// end ;
25572: LD_VAR 0 3
25576: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
25577: LD_INT 0
25579: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
25580: LD_STRING ASSP(
25582: PUSH
25583: LD_VAR 0 1
25587: STR
25588: PUSH
25589: LD_STRING ,
25591: STR
25592: PUSH
25593: LD_VAR 0 2
25597: STR
25598: PUSH
25599: LD_STRING ,
25601: STR
25602: PUSH
25603: LD_VAR 0 3
25607: STR
25608: PUSH
25609: LD_STRING ,);
25611: STR
25612: PPUSH
25613: CALL_OW 559
// end ;
25617: LD_VAR 0 4
25621: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
25622: LD_INT 0
25624: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
25625: LD_STRING ASSP(
25627: PUSH
25628: LD_VAR 0 1
25632: STR
25633: PUSH
25634: LD_STRING ,
25636: STR
25637: PUSH
25638: LD_VAR 0 2
25642: STR
25643: PUSH
25644: LD_STRING ,
25646: STR
25647: PUSH
25648: LD_VAR 0 3
25652: STR
25653: PUSH
25654: LD_STRING ,
25656: STR
25657: PUSH
25658: LD_VAR 0 4
25662: STR
25663: PUSH
25664: LD_STRING );
25666: STR
25667: PPUSH
25668: CALL_OW 559
// end ;
25672: LD_VAR 0 5
25676: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
25677: LD_INT 0
25679: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
25680: LD_STRING ASSP(
25682: PUSH
25683: LD_VAR 0 1
25687: STR
25688: PUSH
25689: LD_STRING ,
25691: STR
25692: PUSH
25693: LD_VAR 0 2
25697: STR
25698: PUSH
25699: LD_STRING ,
25701: STR
25702: PUSH
25703: LD_VAR 0 3
25707: STR
25708: PUSH
25709: LD_STRING ,
25711: STR
25712: PUSH
25713: LD_VAR 0 4
25717: STR
25718: PUSH
25719: LD_STRING ,
25721: STR
25722: PUSH
25723: LD_VAR 0 5
25727: STR
25728: PUSH
25729: LD_STRING );
25731: STR
25732: PPUSH
25733: CALL_OW 559
// end ;
25737: LD_VAR 0 6
25741: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
25742: LD_INT 0
25744: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
25745: LD_STRING ASRSP(
25747: PUSH
25748: LD_VAR 0 1
25752: STR
25753: PUSH
25754: LD_STRING ,
25756: STR
25757: PUSH
25758: LD_VAR 0 2
25762: STR
25763: PUSH
25764: LD_STRING ,
25766: STR
25767: PUSH
25768: LD_VAR 0 3
25772: STR
25773: PUSH
25774: LD_STRING ,);
25776: STR
25777: PPUSH
25778: CALL_OW 559
// end ;
25782: LD_VAR 0 4
25786: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
25787: LD_INT 0
25789: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
25790: LD_STRING ASRSP(
25792: PUSH
25793: LD_VAR 0 1
25797: STR
25798: PUSH
25799: LD_STRING ,
25801: STR
25802: PUSH
25803: LD_VAR 0 2
25807: STR
25808: PUSH
25809: LD_STRING ,
25811: STR
25812: PUSH
25813: LD_VAR 0 3
25817: STR
25818: PUSH
25819: LD_STRING ,
25821: STR
25822: PUSH
25823: LD_VAR 0 4
25827: STR
25828: PUSH
25829: LD_STRING );
25831: STR
25832: PPUSH
25833: CALL_OW 559
// end ;
25837: LD_VAR 0 5
25841: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
25842: LD_INT 0
25844: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
25845: LD_STRING ASRSP(
25847: PUSH
25848: LD_VAR 0 1
25852: STR
25853: PUSH
25854: LD_STRING ,
25856: STR
25857: PUSH
25858: LD_VAR 0 2
25862: STR
25863: PUSH
25864: LD_STRING ,
25866: STR
25867: PUSH
25868: LD_VAR 0 3
25872: STR
25873: PUSH
25874: LD_STRING ,
25876: STR
25877: PUSH
25878: LD_VAR 0 4
25882: STR
25883: PUSH
25884: LD_STRING ,
25886: STR
25887: PUSH
25888: LD_VAR 0 5
25892: STR
25893: PUSH
25894: LD_STRING );
25896: STR
25897: PPUSH
25898: CALL_OW 559
// end ;
25902: LD_VAR 0 6
25906: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
25907: LD_INT 0
25909: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
25910: LD_STRING USSP(
25912: PUSH
25913: LD_VAR 0 1
25917: STR
25918: PUSH
25919: LD_STRING ,
25921: STR
25922: PUSH
25923: LD_VAR 0 2
25927: STR
25928: PUSH
25929: LD_STRING );
25931: STR
25932: PPUSH
25933: CALL_OW 559
// end ;
25937: LD_VAR 0 3
25941: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
25942: LD_INT 0
25944: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
25945: LD_STRING USSP(
25947: PUSH
25948: LD_VAR 0 1
25952: STR
25953: PUSH
25954: LD_STRING ,
25956: STR
25957: PUSH
25958: LD_VAR 0 2
25962: STR
25963: PUSH
25964: LD_STRING ,
25966: STR
25967: PUSH
25968: LD_VAR 0 3
25972: STR
25973: PUSH
25974: LD_STRING );
25976: STR
25977: PPUSH
25978: CALL_OW 559
// end ;
25982: LD_VAR 0 4
25986: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
25987: LD_INT 0
25989: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
25990: LD_STRING CCSSP(
25992: PUSH
25993: LD_VAR 0 1
25997: STR
25998: PUSH
25999: LD_STRING ,{
26001: STR
26002: PUSH
26003: LD_VAR 0 2
26007: STR
26008: PUSH
26009: LD_STRING ,
26011: STR
26012: PUSH
26013: LD_VAR 0 3
26017: STR
26018: PUSH
26019: LD_STRING ,
26021: STR
26022: PUSH
26023: LD_VAR 0 4
26027: STR
26028: PUSH
26029: LD_STRING });
26031: STR
26032: PPUSH
26033: CALL_OW 559
// end ;
26037: LD_VAR 0 5
26041: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
26042: LD_INT 0
26044: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
26045: LD_STRING CCSSP(
26047: PUSH
26048: LD_VAR 0 1
26052: STR
26053: PUSH
26054: LD_STRING ,
26056: STR
26057: PUSH
26058: LD_VAR 0 2
26062: STR
26063: PUSH
26064: LD_STRING );
26066: STR
26067: PPUSH
26068: CALL_OW 559
// end ;
26072: LD_VAR 0 3
26076: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
26077: LD_INT 0
26079: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
26080: LD_STRING ASP(
26082: PUSH
26083: LD_VAR 0 1
26087: STR
26088: PUSH
26089: LD_STRING ,
26091: STR
26092: PUSH
26093: LD_VAR 0 2
26097: STR
26098: PUSH
26099: LD_STRING ,
26101: STR
26102: PUSH
26103: LD_VAR 0 3
26107: STR
26108: PUSH
26109: LD_STRING );
26111: STR
26112: PPUSH
26113: CALL_OW 559
// end ;
26117: LD_VAR 0 4
26121: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
26122: LD_INT 0
26124: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
26125: LD_STRING USP(
26127: PUSH
26128: LD_VAR 0 1
26132: STR
26133: PUSH
26134: LD_STRING ,
26136: STR
26137: PUSH
26138: LD_VAR 0 2
26142: STR
26143: PUSH
26144: LD_STRING ,
26146: STR
26147: PUSH
26148: LD_VAR 0 3
26152: STR
26153: PUSH
26154: LD_STRING );
26156: STR
26157: PPUSH
26158: CALL_OW 559
// end ;
26162: LD_VAR 0 4
26166: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
26167: LD_INT 0
26169: PPUSH
26170: PPUSH
// for i = 1 to 8 do
26171: LD_ADDR_VAR 0 4
26175: PUSH
26176: DOUBLE
26177: LD_INT 1
26179: DEC
26180: ST_TO_ADDR
26181: LD_INT 8
26183: PUSH
26184: FOR_TO
26185: IFFALSE 26232
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
26187: LD_STRING USP(
26189: PUSH
26190: LD_VAR 0 1
26194: STR
26195: PUSH
26196: LD_STRING ,
26198: STR
26199: PUSH
26200: LD_VAR 0 4
26204: STR
26205: PUSH
26206: LD_STRING ,
26208: STR
26209: PUSH
26210: LD_VAR 0 2
26214: PUSH
26215: LD_VAR 0 4
26219: ARRAY
26220: STR
26221: PUSH
26222: LD_STRING );
26224: STR
26225: PPUSH
26226: CALL_OW 559
26230: GO 26184
26232: POP
26233: POP
// end ;
26234: LD_VAR 0 3
26238: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
26239: LD_INT 0
26241: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
26242: LD_STRING ASC(
26244: PUSH
26245: LD_VAR 0 1
26249: STR
26250: PUSH
26251: LD_STRING ,
26253: STR
26254: PUSH
26255: LD_VAR 0 2
26259: STR
26260: PUSH
26261: LD_STRING ,
26263: STR
26264: PUSH
26265: LD_VAR 0 3
26269: STR
26270: PUSH
26271: LD_STRING ,
26273: STR
26274: PUSH
26275: LD_VAR 0 4
26279: STR
26280: PUSH
26281: LD_STRING );
26283: STR
26284: PPUSH
26285: CALL_OW 559
// end ;
26289: LD_VAR 0 5
26293: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
26294: LD_INT 0
26296: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
26297: LD_STRING USC(
26299: PUSH
26300: LD_VAR 0 1
26304: STR
26305: PUSH
26306: LD_STRING ,{
26308: STR
26309: PUSH
26310: LD_VAR 0 2
26314: PUSH
26315: LD_INT 1
26317: ARRAY
26318: STR
26319: PUSH
26320: LD_STRING ,
26322: STR
26323: PUSH
26324: LD_VAR 0 2
26328: PUSH
26329: LD_INT 2
26331: ARRAY
26332: STR
26333: PUSH
26334: LD_STRING ,
26336: STR
26337: PUSH
26338: LD_VAR 0 2
26342: PUSH
26343: LD_INT 3
26345: ARRAY
26346: STR
26347: PUSH
26348: LD_STRING ,
26350: STR
26351: PUSH
26352: LD_VAR 0 2
26356: PUSH
26357: LD_INT 4
26359: ARRAY
26360: STR
26361: PUSH
26362: LD_STRING ,
26364: STR
26365: PUSH
26366: LD_VAR 0 2
26370: PUSH
26371: LD_INT 5
26373: ARRAY
26374: STR
26375: PUSH
26376: LD_STRING ,
26378: STR
26379: PUSH
26380: LD_VAR 0 2
26384: PUSH
26385: LD_INT 6
26387: ARRAY
26388: STR
26389: PUSH
26390: LD_STRING ,
26392: STR
26393: PUSH
26394: LD_VAR 0 2
26398: PUSH
26399: LD_INT 7
26401: ARRAY
26402: STR
26403: PUSH
26404: LD_STRING ,
26406: STR
26407: PUSH
26408: LD_VAR 0 2
26412: PUSH
26413: LD_INT 8
26415: ARRAY
26416: STR
26417: PUSH
26418: LD_STRING });
26420: STR
26421: PPUSH
26422: CALL_OW 559
// end ; end_of_file
26426: LD_VAR 0 3
26430: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
26431: LD_INT 0
26433: PPUSH
26434: PPUSH
26435: PPUSH
26436: PPUSH
26437: PPUSH
26438: PPUSH
26439: PPUSH
26440: PPUSH
26441: PPUSH
// for i := 1 to 8 do
26442: LD_ADDR_VAR 0 2
26446: PUSH
26447: DOUBLE
26448: LD_INT 1
26450: DEC
26451: ST_TO_ADDR
26452: LD_INT 8
26454: PUSH
26455: FOR_TO
26456: IFFALSE 26840
// begin if Side_Positions [ i ] then
26458: LD_EXP 23
26462: PUSH
26463: LD_VAR 0 2
26467: ARRAY
26468: IFFALSE 26838
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
26470: LD_ADDR_VAR 0 7
26474: PUSH
26475: LD_INT 22
26477: PUSH
26478: LD_VAR 0 2
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 21
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PPUSH
26501: CALL_OW 69
26505: PUSH
26506: LD_INT 0
26508: PLUS
26509: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26510: LD_ADDR_VAR 0 9
26514: PUSH
26515: LD_INT 22
26517: PUSH
26518: LD_VAR 0 2
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: LD_INT 30
26532: PUSH
26533: LD_INT 0
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 30
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PPUSH
26559: CALL_OW 69
26563: ST_TO_ADDR
// crates := 0 ;
26564: LD_ADDR_VAR 0 4
26568: PUSH
26569: LD_INT 0
26571: ST_TO_ADDR
// oil := 0 ;
26572: LD_ADDR_VAR 0 5
26576: PUSH
26577: LD_INT 0
26579: ST_TO_ADDR
// sib := 0 ;
26580: LD_ADDR_VAR 0 6
26584: PUSH
26585: LD_INT 0
26587: ST_TO_ADDR
// if bases then
26588: LD_VAR 0 9
26592: IFFALSE 26698
// begin for j in bases do
26594: LD_ADDR_VAR 0 3
26598: PUSH
26599: LD_VAR 0 9
26603: PUSH
26604: FOR_IN
26605: IFFALSE 26696
// begin base := GetBase ( j ) ;
26607: LD_ADDR_VAR 0 8
26611: PUSH
26612: LD_VAR 0 3
26616: PPUSH
26617: CALL_OW 274
26621: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
26622: LD_ADDR_VAR 0 4
26626: PUSH
26627: LD_VAR 0 4
26631: PUSH
26632: LD_VAR 0 8
26636: PPUSH
26637: LD_INT 1
26639: PPUSH
26640: CALL_OW 275
26644: PLUS
26645: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
26646: LD_ADDR_VAR 0 5
26650: PUSH
26651: LD_VAR 0 5
26655: PUSH
26656: LD_VAR 0 8
26660: PPUSH
26661: LD_INT 2
26663: PPUSH
26664: CALL_OW 275
26668: PLUS
26669: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
26670: LD_ADDR_VAR 0 6
26674: PUSH
26675: LD_VAR 0 6
26679: PUSH
26680: LD_VAR 0 8
26684: PPUSH
26685: LD_INT 3
26687: PPUSH
26688: CALL_OW 275
26692: PLUS
26693: ST_TO_ADDR
// end ;
26694: GO 26604
26696: POP
26697: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
26698: LD_STRING setSpecText(
26700: PUSH
26701: LD_VAR 0 2
26705: STR
26706: PUSH
26707: LD_STRING ,
26709: STR
26710: PUSH
26711: LD_INT 2
26713: STR
26714: PUSH
26715: LD_STRING ,
26717: STR
26718: PUSH
26719: LD_VAR 0 4
26723: STR
26724: PUSH
26725: LD_STRING )
26727: STR
26728: PPUSH
26729: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
26733: LD_STRING setSpecText(
26735: PUSH
26736: LD_VAR 0 2
26740: STR
26741: PUSH
26742: LD_STRING ,
26744: STR
26745: PUSH
26746: LD_INT 3
26748: STR
26749: PUSH
26750: LD_STRING ,
26752: STR
26753: PUSH
26754: LD_VAR 0 5
26758: STR
26759: PUSH
26760: LD_STRING )
26762: STR
26763: PPUSH
26764: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
26768: LD_STRING setSpecText(
26770: PUSH
26771: LD_VAR 0 2
26775: STR
26776: PUSH
26777: LD_STRING ,
26779: STR
26780: PUSH
26781: LD_INT 4
26783: STR
26784: PUSH
26785: LD_STRING ,
26787: STR
26788: PUSH
26789: LD_VAR 0 6
26793: STR
26794: PUSH
26795: LD_STRING )
26797: STR
26798: PPUSH
26799: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
26803: LD_STRING setSpecText(
26805: PUSH
26806: LD_VAR 0 2
26810: STR
26811: PUSH
26812: LD_STRING ,
26814: STR
26815: PUSH
26816: LD_INT 5
26818: STR
26819: PUSH
26820: LD_STRING ,
26822: STR
26823: PUSH
26824: LD_VAR 0 7
26828: STR
26829: PUSH
26830: LD_STRING )
26832: STR
26833: PPUSH
26834: CALL_OW 559
// end ; end ;
26838: GO 26455
26840: POP
26841: POP
// end ;
26842: LD_VAR 0 1
26846: RET
// every 0 0$1 do
26847: GO 26849
26849: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
26850: LD_STRING setSpecLogoNumber(
26852: PUSH
26853: LD_INT 2
26855: STR
26856: PUSH
26857: LD_STRING ,
26859: STR
26860: PUSH
26861: LD_INT 1
26863: STR
26864: PUSH
26865: LD_STRING )
26867: STR
26868: PPUSH
26869: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
26873: LD_STRING setSpecLogoNumber(
26875: PUSH
26876: LD_INT 3
26878: STR
26879: PUSH
26880: LD_STRING ,
26882: STR
26883: PUSH
26884: LD_INT 2
26886: STR
26887: PUSH
26888: LD_STRING )
26890: STR
26891: PPUSH
26892: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
26896: LD_STRING setSpecLogoNumber(
26898: PUSH
26899: LD_INT 4
26901: STR
26902: PUSH
26903: LD_STRING ,
26905: STR
26906: PUSH
26907: LD_INT 3
26909: STR
26910: PUSH
26911: LD_STRING )
26913: STR
26914: PPUSH
26915: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
26919: LD_STRING setSpecLogoNumber(
26921: PUSH
26922: LD_INT 5
26924: STR
26925: PUSH
26926: LD_STRING ,
26928: STR
26929: PUSH
26930: LD_INT 4
26932: STR
26933: PUSH
26934: LD_STRING )
26936: STR
26937: PPUSH
26938: CALL_OW 559
// end ;
26942: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
26943: LD_INT 2
26945: PUSH
26946: LD_INT 30
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 30
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: LIST
26970: PPUSH
26971: CALL_OW 69
26975: IFFALSE 26985
26977: GO 26979
26979: DISABLE
// begin enable ;
26980: ENABLE
// UpdateSpectatorBar ;
26981: CALL 26431 0 0
// end ; end_of_file
26985: END
// var respawn , inqueue ; export function init_respawning ; begin
26986: LD_INT 0
26988: PPUSH
// respawn := Rand ( 1 , 8 ) ;
26989: LD_ADDR_LOC 34
26993: PUSH
26994: LD_INT 1
26996: PPUSH
26997: LD_INT 8
26999: PPUSH
27000: CALL_OW 12
27004: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
27005: LD_ADDR_LOC 35
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: ST_TO_ADDR
// end ;
27044: LD_VAR 0 1
27048: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
27049: GO 27051
27051: DISABLE
27052: LD_INT 0
27054: PPUSH
27055: PPUSH
27056: PPUSH
// begin if respawning_time_max = 0 then
27057: LD_EXP 17
27061: PUSH
27062: LD_INT 0
27064: EQUAL
27065: IFFALSE 27069
// exit ;
27067: GO 27477
// if respawn = 8 then
27069: LD_LOC 34
27073: PUSH
27074: LD_INT 8
27076: EQUAL
27077: IFFALSE 27089
// respawn := 1 else
27079: LD_ADDR_LOC 34
27083: PUSH
27084: LD_INT 1
27086: ST_TO_ADDR
27087: GO 27103
// respawn := respawn + 1 ;
27089: LD_ADDR_LOC 34
27093: PUSH
27094: LD_LOC 34
27098: PUSH
27099: LD_INT 1
27101: PLUS
27102: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
27103: LD_EXP 23
27107: PUSH
27108: LD_LOC 34
27112: ARRAY
27113: PUSH
27114: LD_LOC 35
27118: PUSH
27119: LD_LOC 34
27123: ARRAY
27124: NOT
27125: AND
27126: IFFALSE 27476
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
27128: LD_ADDR_VAR 0 1
27132: PUSH
27133: LD_INT 21
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 22
27145: PUSH
27146: LD_LOC 34
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 3
27157: PUSH
27158: LD_INT 23
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: PPUSH
27174: CALL_OW 69
27178: ST_TO_ADDR
// if n < number_of_people then
27179: LD_VAR 0 1
27183: PUSH
27184: LD_EXP 9
27188: LESS
27189: IFFALSE 27473
// begin aktresp := respawn ;
27191: LD_ADDR_VAR 0 3
27195: PUSH
27196: LD_LOC 34
27200: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
27201: LD_ADDR_LOC 35
27205: PUSH
27206: LD_LOC 35
27210: PPUSH
27211: LD_VAR 0 3
27215: PPUSH
27216: LD_INT 1
27218: PPUSH
27219: CALL_OW 1
27223: ST_TO_ADDR
// enable ;
27224: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
27225: LD_EXP 16
27229: PPUSH
27230: LD_EXP 17
27234: PPUSH
27235: CALL_OW 12
27239: PPUSH
27240: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
27244: LD_ADDR_LOC 35
27248: PUSH
27249: LD_LOC 35
27253: PPUSH
27254: LD_VAR 0 3
27258: PPUSH
27259: LD_INT 0
27261: PPUSH
27262: CALL_OW 1
27266: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
27267: LD_ADDR_VAR 0 2
27271: PUSH
27272: LD_INT 21
27274: PUSH
27275: LD_INT 3
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 2
27284: PUSH
27285: LD_INT 30
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 30
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 50
27312: PUSH
27313: EMPTY
27314: LIST
27315: PUSH
27316: LD_INT 22
27318: PUSH
27319: LD_VAR 0 3
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: PPUSH
27334: CALL_OW 69
27338: ST_TO_ADDR
// if dep = 0 then
27339: LD_VAR 0 2
27343: PUSH
27344: LD_INT 0
27346: EQUAL
27347: IFFALSE 27351
// exit ;
27349: GO 27477
// hc_name :=  ;
27351: LD_ADDR_OWVAR 26
27355: PUSH
27356: LD_STRING 
27358: ST_TO_ADDR
// hc_importance := 0 ;
27359: LD_ADDR_OWVAR 32
27363: PUSH
27364: LD_INT 0
27366: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
27367: LD_INT 0
27369: PPUSH
27370: LD_INT 0
27372: PPUSH
27373: LD_EXP 10
27377: PUSH
27378: LD_INT 2
27380: DIV
27381: PPUSH
27382: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
27386: LD_ADDR_OWVAR 21
27390: PUSH
27391: LD_EXP 24
27395: PUSH
27396: LD_VAR 0 3
27400: ARRAY
27401: ST_TO_ADDR
// uc_side := aktresp ;
27402: LD_ADDR_OWVAR 20
27406: PUSH
27407: LD_VAR 0 3
27411: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
27412: LD_ADDR_VAR 0 2
27416: PUSH
27417: LD_VAR 0 2
27421: PUSH
27422: LD_INT 1
27424: PPUSH
27425: LD_VAR 0 2
27429: PPUSH
27430: CALL_OW 12
27434: ARRAY
27435: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
27436: CALL_OW 44
27440: PPUSH
27441: LD_VAR 0 2
27445: PPUSH
27446: CALL_OW 250
27450: PPUSH
27451: LD_VAR 0 2
27455: PPUSH
27456: CALL_OW 251
27460: PPUSH
27461: LD_INT 7
27463: PPUSH
27464: LD_INT 1
27466: PPUSH
27467: CALL_OW 50
// end else
27471: GO 27474
// enable ;
27473: ENABLE
// end else
27474: GO 27477
// enable ;
27476: ENABLE
// end ; end_of_file
27477: PPOPN 3
27479: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
27480: LD_INT 0
27482: PPUSH
27483: PPUSH
27484: PPUSH
// BuildUpTime_Delay = 0 ;
27485: LD_ADDR_EXP 68
27489: PUSH
27490: LD_INT 0
27492: ST_TO_ADDR
// if not def_builduptime then
27493: LD_EXP 61
27497: NOT
27498: IFFALSE 27502
// exit ;
27500: GO 27685
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
27502: LD_ADDR_EXP 68
27506: PUSH
27507: LD_INT 8400
27509: PUSH
27510: LD_INT 2100
27512: PUSH
27513: LD_EXP 61
27517: MUL
27518: PLUS
27519: ST_TO_ADDR
// BuildUpTimeActive := true ;
27520: LD_ADDR_EXP 67
27524: PUSH
27525: LD_INT 1
27527: ST_TO_ADDR
// for i := 1 to 8 do
27528: LD_ADDR_VAR 0 2
27532: PUSH
27533: DOUBLE
27534: LD_INT 1
27536: DEC
27537: ST_TO_ADDR
27538: LD_INT 8
27540: PUSH
27541: FOR_TO
27542: IFFALSE 27683
// if Side_Positions [ i ] then
27544: LD_EXP 23
27548: PUSH
27549: LD_VAR 0 2
27553: ARRAY
27554: IFFALSE 27681
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
27556: LD_EXP 66
27560: PUSH
27561: LD_EXP 23
27565: PUSH
27566: LD_VAR 0 2
27570: ARRAY
27571: ARRAY
27572: PPUSH
27573: LD_INT 5
27575: PPUSH
27576: CALL_OW 424
// for j := 1 to 8 do
27580: LD_ADDR_VAR 0 3
27584: PUSH
27585: DOUBLE
27586: LD_INT 1
27588: DEC
27589: ST_TO_ADDR
27590: LD_INT 8
27592: PUSH
27593: FOR_TO
27594: IFFALSE 27679
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
27596: LD_EXP 23
27600: PUSH
27601: LD_VAR 0 3
27605: ARRAY
27606: PUSH
27607: LD_EXP 21
27611: PUSH
27612: LD_VAR 0 2
27616: ARRAY
27617: PUSH
27618: LD_EXP 21
27622: PUSH
27623: LD_VAR 0 3
27627: ARRAY
27628: NONEQUAL
27629: PUSH
27630: LD_EXP 25
27634: NOT
27635: PUSH
27636: LD_VAR 0 2
27640: PUSH
27641: LD_VAR 0 3
27645: NONEQUAL
27646: AND
27647: OR
27648: AND
27649: IFFALSE 27677
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
27651: LD_VAR 0 3
27655: PPUSH
27656: LD_EXP 66
27660: PUSH
27661: LD_EXP 23
27665: PUSH
27666: LD_VAR 0 2
27670: ARRAY
27671: ARRAY
27672: PPUSH
27673: CALL_OW 333
27677: GO 27593
27679: POP
27680: POP
// end ;
27681: GO 27541
27683: POP
27684: POP
// end ;
27685: LD_VAR 0 1
27689: RET
// export function EndBuildUp ; var i , j ; begin
27690: LD_INT 0
27692: PPUSH
27693: PPUSH
27694: PPUSH
// BuildUpTimeActive := false ;
27695: LD_ADDR_EXP 67
27699: PUSH
27700: LD_INT 0
27702: ST_TO_ADDR
// for i := 1 to 8 do
27703: LD_ADDR_VAR 0 2
27707: PUSH
27708: DOUBLE
27709: LD_INT 1
27711: DEC
27712: ST_TO_ADDR
27713: LD_INT 8
27715: PUSH
27716: FOR_TO
27717: IFFALSE 27858
// if Side_Positions [ i ] then
27719: LD_EXP 23
27723: PUSH
27724: LD_VAR 0 2
27728: ARRAY
27729: IFFALSE 27856
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
27731: LD_EXP 66
27735: PUSH
27736: LD_EXP 23
27740: PUSH
27741: LD_VAR 0 2
27745: ARRAY
27746: ARRAY
27747: PPUSH
27748: LD_INT 0
27750: PPUSH
27751: CALL_OW 424
// for j := 1 to 8 do
27755: LD_ADDR_VAR 0 3
27759: PUSH
27760: DOUBLE
27761: LD_INT 1
27763: DEC
27764: ST_TO_ADDR
27765: LD_INT 8
27767: PUSH
27768: FOR_TO
27769: IFFALSE 27854
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
27771: LD_EXP 23
27775: PUSH
27776: LD_VAR 0 3
27780: ARRAY
27781: PUSH
27782: LD_EXP 21
27786: PUSH
27787: LD_VAR 0 2
27791: ARRAY
27792: PUSH
27793: LD_EXP 21
27797: PUSH
27798: LD_VAR 0 3
27802: ARRAY
27803: NONEQUAL
27804: PUSH
27805: LD_EXP 25
27809: NOT
27810: PUSH
27811: LD_VAR 0 2
27815: PUSH
27816: LD_VAR 0 3
27820: NONEQUAL
27821: AND
27822: OR
27823: AND
27824: IFFALSE 27852
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
27826: LD_VAR 0 3
27830: PPUSH
27831: LD_EXP 66
27835: PUSH
27836: LD_EXP 23
27840: PUSH
27841: LD_VAR 0 2
27845: ARRAY
27846: ARRAY
27847: PPUSH
27848: CALL_OW 334
27852: GO 27768
27854: POP
27855: POP
// end ;
27856: GO 27716
27858: POP
27859: POP
// end ;
27860: LD_VAR 0 1
27864: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
27865: LD_EXP 67
27869: IFFALSE 28044
27871: GO 27873
27873: DISABLE
27874: LD_INT 0
27876: PPUSH
27877: PPUSH
// begin for i := 1 to 8 do
27878: LD_ADDR_VAR 0 1
27882: PUSH
27883: DOUBLE
27884: LD_INT 1
27886: DEC
27887: ST_TO_ADDR
27888: LD_INT 8
27890: PUSH
27891: FOR_TO
27892: IFFALSE 28041
// if Side_Positions [ i ] then
27894: LD_EXP 23
27898: PUSH
27899: LD_VAR 0 1
27903: ARRAY
27904: IFFALSE 28039
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
27906: LD_ADDR_VAR 0 2
27910: PUSH
27911: LD_EXP 66
27915: PUSH
27916: LD_EXP 23
27920: PUSH
27921: LD_VAR 0 1
27925: ARRAY
27926: ARRAY
27927: PPUSH
27928: LD_INT 2
27930: PUSH
27931: LD_INT 21
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 21
27943: PUSH
27944: LD_INT 2
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 22
27958: PUSH
27959: LD_OWVAR 2
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PPUSH
27972: CALL_OW 70
27976: PUSH
27977: FOR_IN
27978: IFFALSE 28037
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
27980: LD_EXP 21
27984: PUSH
27985: LD_VAR 0 1
27989: ARRAY
27990: PUSH
27991: LD_EXP 21
27995: PUSH
27996: LD_OWVAR 2
28000: ARRAY
28001: NONEQUAL
28002: PUSH
28003: LD_EXP 25
28007: NOT
28008: PUSH
28009: LD_VAR 0 1
28013: PUSH
28014: LD_OWVAR 2
28018: NONEQUAL
28019: AND
28020: OR
28021: IFFALSE 28035
// ComMoveToArea ( un , BuildUpEscape ) ;
28023: LD_VAR 0 2
28027: PPUSH
28028: LD_INT 24
28030: PPUSH
28031: CALL_OW 113
28035: GO 27977
28037: POP
28038: POP
28039: GO 27891
28041: POP
28042: POP
// enable ;
28043: ENABLE
// end ;
28044: PPOPN 2
28046: END
// every 0 0$1 trigger def_builduptime do
28047: LD_EXP 61
28051: IFFALSE 28077
28053: GO 28055
28055: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
28056: LD_INT 8400
28058: PUSH
28059: LD_EXP 61
28063: PUSH
28064: LD_INT 2100
28066: MUL
28067: PLUS
28068: PPUSH
28069: CALL_OW 67
// EndBuildUp ;
28073: CALL 27690 0 0
// end ;
28077: END
