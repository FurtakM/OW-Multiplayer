// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export Position_Sides ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 41
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 3 ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// for i := 1 to 8 do
 356: LD_ADDR_VAR 0 2
 360: PUSH
 361: DOUBLE
 362: LD_INT 1
 364: DEC
 365: ST_TO_ADDR
 366: LD_INT 8
 368: PUSH
 369: FOR_TO
 370: IFFALSE 457
// if Multiplayer_GetPlayerIsSpec ( i ) then
 372: LD_VAR 0 2
 376: PPUSH
 377: CALL_OW 530
 381: IFFALSE 455
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 383: LD_ADDR_EXP 23
 387: PUSH
 388: LD_EXP 23
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: LD_INT 0
 400: PPUSH
 401: CALL_OW 1
 405: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 406: LD_ADDR_EXP 22
 410: PUSH
 411: LD_EXP 22
 415: PPUSH
 416: LD_EXP 21
 420: PUSH
 421: LD_VAR 0 2
 425: ARRAY
 426: PPUSH
 427: LD_EXP 22
 431: PUSH
 432: LD_EXP 21
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: ARRAY
 443: PUSH
 444: LD_VAR 0 2
 448: DIFF
 449: PPUSH
 450: CALL_OW 1
 454: ST_TO_ADDR
// end ;
 455: GO 369
 457: POP
 458: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 459: LD_ADDR_EXP 29
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// for i := 1 to 8 do
 482: LD_ADDR_VAR 0 2
 486: PUSH
 487: DOUBLE
 488: LD_INT 1
 490: DEC
 491: ST_TO_ADDR
 492: LD_INT 8
 494: PUSH
 495: FOR_TO
 496: IFFALSE 543
// if Side_Positions [ i ] then
 498: LD_EXP 23
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: IFFALSE 541
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 510: LD_ADDR_EXP 29
 514: PUSH
 515: LD_EXP 29
 519: PPUSH
 520: LD_EXP 23
 524: PUSH
 525: LD_VAR 0 2
 529: ARRAY
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: CALL_OW 1
 540: ST_TO_ADDR
 541: GO 495
 543: POP
 544: POP
// Team_Game := Side_Teams [ your_side ] ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_EXP 21
 554: PUSH
 555: LD_OWVAR 2
 559: ARRAY
 560: ST_TO_ADDR
// if Multiplayer then
 561: LD_OWVAR 4
 565: IFFALSE 837
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 567: LD_ADDR_EXP 43
 571: PUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL_OW 426
 579: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 580: LD_ADDR_EXP 44
 584: PUSH
 585: LD_INT 1
 587: PPUSH
 588: CALL_OW 426
 592: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 593: LD_ADDR_EXP 45
 597: PUSH
 598: LD_INT 2
 600: PPUSH
 601: CALL_OW 426
 605: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 606: LD_ADDR_EXP 46
 610: PUSH
 611: LD_INT 3
 613: PPUSH
 614: CALL_OW 426
 618: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 619: LD_ADDR_EXP 47
 623: PUSH
 624: LD_INT 4
 626: PPUSH
 627: CALL_OW 426
 631: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 632: LD_ADDR_EXP 48
 636: PUSH
 637: LD_INT 5
 639: PPUSH
 640: CALL_OW 426
 644: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 645: LD_ADDR_EXP 50
 649: PUSH
 650: LD_INT 10
 652: PPUSH
 653: CALL_OW 426
 657: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 658: LD_ADDR_EXP 51
 662: PUSH
 663: LD_INT 11
 665: PPUSH
 666: CALL_OW 426
 670: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 671: LD_ADDR_EXP 52
 675: PUSH
 676: LD_INT 12
 678: PPUSH
 679: CALL_OW 426
 683: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 684: LD_ADDR_EXP 54
 688: PUSH
 689: LD_INT 13
 691: PPUSH
 692: CALL_OW 426
 696: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 697: LD_ADDR_EXP 53
 701: PUSH
 702: LD_INT 14
 704: PPUSH
 705: CALL_OW 426
 709: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 710: LD_ADDR_EXP 55
 714: PUSH
 715: LD_INT 15
 717: PPUSH
 718: CALL_OW 426
 722: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 723: LD_ADDR_EXP 1
 727: PUSH
 728: LD_INT 6
 730: PPUSH
 731: CALL_OW 426
 735: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 736: LD_ADDR_EXP 2
 740: PUSH
 741: LD_INT 7
 743: PPUSH
 744: CALL_OW 426
 748: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 749: LD_ADDR_EXP 4
 753: PUSH
 754: LD_INT 8
 756: PPUSH
 757: CALL_OW 426
 761: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 762: LD_ADDR_EXP 3
 766: PUSH
 767: LD_INT 9
 769: PPUSH
 770: CALL_OW 426
 774: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 775: LD_ADDR_EXP 5
 779: PUSH
 780: LD_INT 16
 782: PPUSH
 783: CALL_OW 426
 787: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 788: LD_ADDR_EXP 6
 792: PUSH
 793: LD_INT 17
 795: PPUSH
 796: CALL_OW 426
 800: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 801: LD_ADDR_EXP 56
 805: PUSH
 806: LD_INT 20
 808: PPUSH
 809: CALL_OW 426
 813: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 814: LD_ADDR_VAR 0 3
 818: PUSH
 819: LD_INT 22
 821: PPUSH
 822: CALL_OW 426
 826: ST_TO_ADDR
// def_win_rules = 0 ;
 827: LD_ADDR_EXP 19
 831: PUSH
 832: LD_INT 0
 834: ST_TO_ADDR
// end else
 835: GO 1009
// begin Randomize ;
 837: CALL_OW 10
// def_base_level := 2 ;
 841: LD_ADDR_EXP 43
 845: PUSH
 846: LD_INT 2
 848: ST_TO_ADDR
// def_amount_of_people := 1 ;
 849: LD_ADDR_EXP 44
 853: PUSH
 854: LD_INT 1
 856: ST_TO_ADDR
// def_skill_level := 1 ;
 857: LD_ADDR_EXP 45
 861: PUSH
 862: LD_INT 1
 864: ST_TO_ADDR
// def_starting_resources := 2 ;
 865: LD_ADDR_EXP 46
 869: PUSH
 870: LD_INT 2
 872: ST_TO_ADDR
// def_shipments_density := 1 ;
 873: LD_ADDR_EXP 47
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 881: LD_ADDR_EXP 48
 885: PUSH
 886: LD_INT 0
 888: ST_TO_ADDR
// def_shared_vision := 1 ;
 889: LD_ADDR_EXP 50
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
// def_morale_flags := 1 ;
 897: LD_ADDR_EXP 51
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
// def_siberite_detection := 1 ;
 905: LD_ADDR_EXP 52
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 913: LD_ADDR_EXP 54
 917: PUSH
 918: LD_INT 3
 920: ST_TO_ADDR
// def_people_respawning := 2 ;
 921: LD_ADDR_EXP 53
 925: PUSH
 926: LD_INT 2
 928: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 929: LD_ADDR_EXP 55
 933: PUSH
 934: LD_INT 0
 936: ST_TO_ADDR
// def_artefact_one := 0 ;
 937: LD_ADDR_EXP 1
 941: PUSH
 942: LD_INT 0
 944: ST_TO_ADDR
// def_artefact_two := 0 ;
 945: LD_ADDR_EXP 2
 949: PUSH
 950: LD_INT 0
 952: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 953: LD_ADDR_EXP 4
 957: PUSH
 958: LD_INT 2
 960: ST_TO_ADDR
// def_artefact_three := 0 ;
 961: LD_ADDR_EXP 3
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// def_kings_age := 1 ;
 969: LD_ADDR_EXP 5
 973: PUSH
 974: LD_INT 1
 976: ST_TO_ADDR
// def_public_score := 0 ;
 977: LD_ADDR_EXP 6
 981: PUSH
 982: LD_INT 0
 984: ST_TO_ADDR
// def_builduptime := 1 ;
 985: LD_ADDR_EXP 56
 989: PUSH
 990: LD_INT 1
 992: ST_TO_ADDR
// tech_level = 4 ;
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: LD_INT 4
1000: ST_TO_ADDR
// def_win_rules = 0 ;
1001: LD_ADDR_EXP 19
1005: PUSH
1006: LD_INT 0
1008: ST_TO_ADDR
// end ; InitGameRules ;
1009: CALL 13439 0 0
// if def_game_rules = 0 then
1013: LD_EXP 42
1017: PUSH
1018: LD_INT 0
1020: EQUAL
1021: IFFALSE 1048
// begin if isSGUI then
1023: LD_OWVAR 83
1027: IFFALSE 1035
// setMpTechs ( ) else
1029: CALL 21231 0 0
1033: GO 1048
// begin SetMpTechLevel ( tech_level + 1 ) ;
1035: LD_VAR 0 3
1039: PUSH
1040: LD_INT 1
1042: PLUS
1043: PPUSH
1044: CALL 21378 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1048: LD_ADDR_EXP 7
1052: PUSH
1053: LD_INT 0
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_EXP 43
1075: PUSH
1076: LD_INT 1
1078: PLUS
1079: ARRAY
1080: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
1081: LD_ADDR_EXP 8
1085: PUSH
1086: LD_INT 0
1088: PUSH
1089: LD_INT 0
1091: PUSH
1092: LD_INT 2
1094: PUSH
1095: LD_INT 3
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: LD_EXP 43
1108: PUSH
1109: LD_INT 1
1111: PLUS
1112: ARRAY
1113: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1114: LD_ADDR_EXP 9
1118: PUSH
1119: LD_EXP 44
1123: PUSH
1124: LD_INT 4
1126: PLUS
1127: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1128: LD_ADDR_EXP 10
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: LD_INT 3
1138: PUSH
1139: LD_INT 4
1141: PUSH
1142: LD_INT 5
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_EXP 45
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: ARRAY
1160: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1161: LD_ADDR_EXP 12
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: PUSH
1180: LD_INT 30
1182: PUSH
1183: LD_INT 0
1185: PUSH
1186: LD_INT 0
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 50
1196: PUSH
1197: LD_INT 20
1199: PUSH
1200: LD_INT 0
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 80
1210: PUSH
1211: LD_INT 40
1213: PUSH
1214: LD_INT 20
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: PUSH
1228: LD_EXP 46
1232: PUSH
1233: LD_INT 1
1235: PLUS
1236: ARRAY
1237: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1238: LD_ADDR_EXP 11
1242: PUSH
1243: LD_INT 10
1245: PUSH
1246: EMPTY
1247: LIST
1248: PUSH
1249: LD_INT 7
1251: PUSH
1252: LD_INT 14
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: LD_INT 6
1261: PUSH
1262: LD_INT 12
1264: PUSH
1265: LD_INT 18
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: LIST
1272: PUSH
1273: LD_INT 5
1275: PUSH
1276: LD_INT 10
1278: PUSH
1279: LD_INT 15
1281: PUSH
1282: LD_INT 20
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_EXP 46
1301: PUSH
1302: LD_INT 1
1304: PLUS
1305: ARRAY
1306: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 28 ;
1307: LD_ADDR_EXP 13
1311: PUSH
1312: LD_INT 20
1314: PUSH
1315: LD_EXP 47
1319: PUSH
1320: LD_INT 28
1322: MUL
1323: PLUS
1324: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1325: LD_ADDR_EXP 15
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 9
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: PUSH
1348: LD_EXP 54
1352: PUSH
1353: LD_INT 1
1355: PLUS
1356: ARRAY
1357: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1358: LD_ADDR_EXP 16
1362: PUSH
1363: LD_INT 0
1365: PUSH
1366: LD_INT 12600
1368: PUSH
1369: LD_INT 2100
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PUSH
1377: LD_EXP 53
1381: PUSH
1382: LD_INT 1
1384: PLUS
1385: ARRAY
1386: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1387: LD_ADDR_EXP 17
1391: PUSH
1392: LD_INT 0
1394: PUSH
1395: LD_INT 21000
1397: PUSH
1398: LD_INT 4200
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: PUSH
1406: LD_EXP 53
1410: PUSH
1411: LD_INT 1
1413: PLUS
1414: ARRAY
1415: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1416: LD_ADDR_EXP 14
1420: PUSH
1421: LD_INT 1
1423: NEG
1424: PUSH
1425: LD_INT 350
1427: PUSH
1428: LD_INT 700
1430: PUSH
1431: LD_INT 1400
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: LD_EXP 51
1448: PUSH
1449: LD_INT 1
1451: PLUS
1452: ARRAY
1453: ST_TO_ADDR
// battle_flags_id := [ ] ;
1454: LD_ADDR_EXP 34
1458: PUSH
1459: EMPTY
1460: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1461: LD_ADDR_EXP 18
1465: PUSH
1466: LD_INT 0
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 63000
1474: PUSH
1475: LD_INT 126000
1477: PUSH
1478: LD_INT 189000
1480: PUSH
1481: LD_INT 252000
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_EXP 55
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: ARRAY
1501: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1502: LD_ADDR_EXP 20
1506: PUSH
1507: LD_INT 500
1509: PUSH
1510: LD_INT 1000
1512: PUSH
1513: LD_INT 1500
1515: PUSH
1516: LD_INT 2000
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: PUSH
1525: LD_EXP 5
1529: PUSH
1530: LD_INT 1
1532: PLUS
1533: ARRAY
1534: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1535: LD_ADDR_EXP 40
1539: PUSH
1540: LD_INT 21
1542: PUSH
1543: LD_INT 23
1545: PUSH
1546: LD_INT 20
1548: PUSH
1549: LD_INT 22
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: ST_TO_ADDR
// end ;
1558: LD_VAR 0 1
1562: RET
// function init_map ; var i ; begin
1563: LD_INT 0
1565: PPUSH
1566: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1567: LD_ADDR_EXP 33
1571: PUSH
1572: LD_INT 43
1574: PUSH
1575: LD_INT 9
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 123
1584: PUSH
1585: LD_INT 10
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 113
1594: PUSH
1595: LD_INT 155
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 186
1604: PUSH
1605: LD_INT 133
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1618: LD_ADDR_EXP 30
1622: PUSH
1623: LD_INT 18
1625: PUSH
1626: LD_INT 17
1628: PUSH
1629: LD_INT 2
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 156
1639: PUSH
1640: LD_INT 20
1642: PUSH
1643: LD_INT 3
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 83
1653: PUSH
1654: LD_INT 140
1656: PUSH
1657: LD_INT 1
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 216
1667: PUSH
1668: LD_INT 143
1670: PUSH
1671: LD_INT 5
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: ST_TO_ADDR
// for i in depot_def do
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: LD_EXP 30
1694: PUSH
1695: FOR_IN
1696: IFFALSE 1770
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1698: LD_ADDR_EXP 32
1702: PUSH
1703: LD_EXP 32
1707: PUSH
1708: LD_VAR 0 2
1712: PUSH
1713: LD_INT 1
1715: ARRAY
1716: PPUSH
1717: LD_VAR 0 2
1721: PUSH
1722: LD_INT 3
1724: ARRAY
1725: PPUSH
1726: LD_INT 6
1728: PPUSH
1729: CALL_OW 272
1733: PUSH
1734: LD_VAR 0 2
1738: PUSH
1739: LD_INT 2
1741: ARRAY
1742: PPUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 3
1750: ARRAY
1751: PPUSH
1752: LD_INT 6
1754: PPUSH
1755: CALL_OW 273
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: ADD
1767: ST_TO_ADDR
1768: GO 1695
1770: POP
1771: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1772: LD_ADDR_EXP 31
1776: PUSH
1777: LD_INT 30
1779: PUSH
1780: LD_INT 36
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 44
1793: PUSH
1794: LD_INT 21
1796: PUSH
1797: LD_INT 4
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 43
1807: PUSH
1808: LD_INT 33
1810: PUSH
1811: LD_INT 5
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 165
1826: PUSH
1827: LD_INT 34
1829: PUSH
1830: LD_INT 0
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 137
1840: PUSH
1841: LD_INT 18
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 153
1854: PUSH
1855: LD_INT 37
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 86
1873: PUSH
1874: LD_INT 120
1876: PUSH
1877: LD_INT 3
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 105
1887: PUSH
1888: LD_INT 147
1890: PUSH
1891: LD_INT 4
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 68
1901: PUSH
1902: LD_INT 118
1904: PUSH
1905: LD_INT 2
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 199
1920: PUSH
1921: LD_INT 144
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 207
1934: PUSH
1935: LD_INT 119
1937: PUSH
1938: LD_INT 3
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 195
1948: PUSH
1949: LD_INT 118
1951: PUSH
1952: LD_INT 2
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// if not def_extra_oil_deposits then
1971: LD_EXP 48
1975: NOT
1976: IFFALSE 2017
// for i in extra_oil_deposits_locations do
1978: LD_ADDR_VAR 0 2
1982: PUSH
1983: LD_EXP 33
1987: PUSH
1988: FOR_IN
1989: IFFALSE 2015
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1991: LD_VAR 0 2
1995: PUSH
1996: LD_INT 1
1998: ARRAY
1999: PPUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: ARRAY
2008: PPUSH
2009: CALL_OW 63
2013: GO 1988
2015: POP
2016: POP
// end ;
2017: LD_VAR 0 1
2021: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2022: LD_INT 0
2024: PPUSH
2025: PPUSH
2026: PPUSH
// if not Team_Game then
2027: LD_EXP 25
2031: NOT
2032: IFFALSE 2130
// begin for i = 1 to 8 do
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: DOUBLE
2040: LD_INT 1
2042: DEC
2043: ST_TO_ADDR
2044: LD_INT 8
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2126
// for j = 1 to 8 do
2050: LD_ADDR_VAR 0 3
2054: PUSH
2055: DOUBLE
2056: LD_INT 1
2058: DEC
2059: ST_TO_ADDR
2060: LD_INT 8
2062: PUSH
2063: FOR_TO
2064: IFFALSE 2122
// if i <> j then
2066: LD_VAR 0 2
2070: PUSH
2071: LD_VAR 0 3
2075: NONEQUAL
2076: IFFALSE 2100
// SetAttitude ( i , j , att_neutral , true ) else
2078: LD_VAR 0 2
2082: PPUSH
2083: LD_VAR 0 3
2087: PPUSH
2088: LD_INT 0
2090: PPUSH
2091: LD_INT 1
2093: PPUSH
2094: CALL_OW 80
2098: GO 2120
// SetAttitude ( i , j , att_friend , true ) ;
2100: LD_VAR 0 2
2104: PPUSH
2105: LD_VAR 0 3
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: CALL_OW 80
2120: GO 2063
2122: POP
2123: POP
2124: GO 2047
2126: POP
2127: POP
// end else
2128: GO 2305
// begin if def_shared_vision then
2130: LD_EXP 50
2134: IFFALSE 2199
// begin for i in Teams do
2136: LD_ADDR_VAR 0 2
2140: PUSH
2141: LD_EXP 22
2145: PUSH
2146: FOR_IN
2147: IFFALSE 2197
// for j = 2 to i do
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: DOUBLE
2155: LD_INT 2
2157: DEC
2158: ST_TO_ADDR
2159: LD_VAR 0 2
2163: PUSH
2164: FOR_TO
2165: IFFALSE 2193
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2167: LD_VAR 0 2
2171: PUSH
2172: LD_VAR 0 3
2176: ARRAY
2177: PPUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_INT 1
2185: ARRAY
2186: PPUSH
2187: CALL_OW 343
2191: GO 2164
2193: POP
2194: POP
2195: GO 2146
2197: POP
2198: POP
// end ; for i = 1 to 8 do
2199: LD_ADDR_VAR 0 2
2203: PUSH
2204: DOUBLE
2205: LD_INT 1
2207: DEC
2208: ST_TO_ADDR
2209: LD_INT 8
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2303
// for j = 1 to 8 do
2215: LD_ADDR_VAR 0 3
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_INT 8
2227: PUSH
2228: FOR_TO
2229: IFFALSE 2299
// if Side_Teams [ i ] = Side_Teams [ j ] then
2231: LD_EXP 21
2235: PUSH
2236: LD_VAR 0 2
2240: ARRAY
2241: PUSH
2242: LD_EXP 21
2246: PUSH
2247: LD_VAR 0 3
2251: ARRAY
2252: EQUAL
2253: IFFALSE 2277
// SetAttitude ( i , j , att_friend , true ) else
2255: LD_VAR 0 2
2259: PPUSH
2260: LD_VAR 0 3
2264: PPUSH
2265: LD_INT 1
2267: PPUSH
2268: LD_INT 1
2270: PPUSH
2271: CALL_OW 80
2275: GO 2297
// SetAttitude ( i , j , att_enemy , true ) ;
2277: LD_VAR 0 2
2281: PPUSH
2282: LD_VAR 0 3
2286: PPUSH
2287: LD_INT 2
2289: PPUSH
2290: LD_INT 1
2292: PPUSH
2293: CALL_OW 80
2297: GO 2228
2299: POP
2300: POP
2301: GO 2212
2303: POP
2304: POP
// end ; end ;
2305: LD_VAR 0 1
2309: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2310: LD_INT 0
2312: PPUSH
2313: PPUSH
2314: PPUSH
2315: PPUSH
// result := [ ] ;
2316: LD_ADDR_VAR 0 7
2320: PUSH
2321: EMPTY
2322: ST_TO_ADDR
// for i := 1 to count do
2323: LD_ADDR_VAR 0 8
2327: PUSH
2328: DOUBLE
2329: LD_INT 1
2331: DEC
2332: ST_TO_ADDR
2333: LD_VAR 0 1
2337: PUSH
2338: FOR_TO
2339: IFFALSE 2757
// begin uc_direction := Rand ( 0 , 5 ) ;
2341: LD_ADDR_OWVAR 24
2345: PUSH
2346: LD_INT 0
2348: PPUSH
2349: LD_INT 5
2351: PPUSH
2352: CALL_OW 12
2356: ST_TO_ADDR
// if commander then
2357: LD_LOC 1
2361: IFFALSE 2470
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2363: LD_ADDR_OWVAR 26
2367: PUSH
2368: LD_OWVAR 19
2372: PUSH
2373: LD_OWVAR 20
2377: ARRAY
2378: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2379: LD_INT 1
2381: PPUSH
2382: LD_INT 2
2384: PPUSH
2385: CALL_OW 12
2389: PPUSH
2390: LD_VAR 0 2
2394: PPUSH
2395: LD_EXP 10
2399: PUSH
2400: LD_INT 2
2402: PLUS
2403: PPUSH
2404: CALL_OW 380
// hc_importance := 105 ;
2408: LD_ADDR_OWVAR 32
2412: PUSH
2413: LD_INT 105
2415: ST_TO_ADDR
// commander := false ;
2416: LD_ADDR_LOC 1
2420: PUSH
2421: LD_INT 0
2423: ST_TO_ADDR
// if Multiplayer then
2424: LD_OWVAR 4
2428: IFFALSE 2468
// begin hc_gallery := MULTIAVATARS ;
2430: LD_ADDR_OWVAR 33
2434: PUSH
2435: LD_STRING MULTIAVATARS
2437: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2438: LD_ADDR_OWVAR 34
2442: PUSH
2443: LD_OWVAR 20
2447: PPUSH
2448: CALL_OW 525
2452: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2453: LD_ADDR_OWVAR 27
2457: PUSH
2458: LD_OWVAR 20
2462: PPUSH
2463: CALL_OW 526
2467: ST_TO_ADDR
// end ; end else
2468: GO 2533
// begin hc_name :=  ;
2470: LD_ADDR_OWVAR 26
2474: PUSH
2475: LD_STRING 
2477: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2478: LD_INT 1
2480: PPUSH
2481: LD_INT 2
2483: PPUSH
2484: CALL_OW 12
2488: PPUSH
2489: LD_VAR 0 2
2493: PPUSH
2494: LD_EXP 10
2498: PPUSH
2499: CALL_OW 380
// hc_importance := 0 ;
2503: LD_ADDR_OWVAR 32
2507: PUSH
2508: LD_INT 0
2510: ST_TO_ADDR
// if Multiplayer then
2511: LD_OWVAR 4
2515: IFFALSE 2533
// begin hc_gallery :=  ;
2517: LD_ADDR_OWVAR 33
2521: PUSH
2522: LD_STRING 
2524: ST_TO_ADDR
// hc_face_number := 0 ;
2525: LD_ADDR_OWVAR 34
2529: PUSH
2530: LD_INT 0
2532: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2533: LD_ADDR_VAR 0 10
2537: PUSH
2538: CALL_OW 44
2542: ST_TO_ADDR
// if global_defined then
2543: LD_LOC 3
2547: IFFALSE 2687
// begin if ( cl = class_soldier ) then
2549: LD_VAR 0 2
2553: PUSH
2554: LD_INT 1
2556: EQUAL
2557: IFFALSE 2577
// j := i + soldiers_created else
2559: LD_ADDR_VAR 0 9
2563: PUSH
2564: LD_VAR 0 8
2568: PUSH
2569: LD_LOC 4
2573: PLUS
2574: ST_TO_ADDR
2575: GO 2587
// j := i ;
2577: LD_ADDR_VAR 0 9
2581: PUSH
2582: LD_VAR 0 8
2586: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2587: LD_LOC 2
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: PUSH
2598: LD_VAR 0 9
2602: ARRAY
2603: PPUSH
2604: LD_VAR 0 10
2608: PPUSH
2609: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2613: LD_VAR 0 10
2617: PPUSH
2618: LD_INT 2
2620: PPUSH
2621: LD_LOC 2
2625: PUSH
2626: LD_VAR 0 2
2630: ARRAY
2631: PUSH
2632: LD_VAR 0 9
2636: ARRAY
2637: PPUSH
2638: LD_INT 2
2640: PPUSH
2641: CALL_OW 260
2645: PPUSH
2646: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2650: LD_VAR 0 10
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_LOC 2
2662: PUSH
2663: LD_VAR 0 2
2667: ARRAY
2668: PUSH
2669: LD_VAR 0 9
2673: ARRAY
2674: PPUSH
2675: LD_INT 1
2677: PPUSH
2678: CALL_OW 260
2682: PPUSH
2683: CALL_OW 239
// end ; if building then
2687: LD_VAR 0 6
2691: IFFALSE 2709
// PlaceHumanInUnit ( un , building ) else
2693: LD_VAR 0 10
2697: PPUSH
2698: LD_VAR 0 6
2702: PPUSH
2703: CALL_OW 52
2707: GO 2736
// PlaceUnitXYR ( un , x , y , r , false ) ;
2709: LD_VAR 0 10
2713: PPUSH
2714: LD_VAR 0 3
2718: PPUSH
2719: LD_VAR 0 4
2723: PPUSH
2724: LD_VAR 0 5
2728: PPUSH
2729: LD_INT 0
2731: PPUSH
2732: CALL_OW 50
// result := result ^ [ un ] ;
2736: LD_ADDR_VAR 0 7
2740: PUSH
2741: LD_VAR 0 7
2745: PUSH
2746: LD_VAR 0 10
2750: PUSH
2751: EMPTY
2752: LIST
2753: ADD
2754: ST_TO_ADDR
// end ;
2755: GO 2338
2757: POP
2758: POP
// if not global_defined then
2759: LD_LOC 3
2763: NOT
2764: IFFALSE 2842
// if ( global_units >= cl ) then
2766: LD_LOC 2
2770: PUSH
2771: LD_VAR 0 2
2775: GREATEREQUAL
2776: IFFALSE 2817
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2778: LD_ADDR_LOC 2
2782: PUSH
2783: LD_LOC 2
2787: PPUSH
2788: LD_VAR 0 2
2792: PPUSH
2793: LD_LOC 2
2797: PUSH
2798: LD_VAR 0 2
2802: ARRAY
2803: PUSH
2804: LD_VAR 0 7
2808: ADD
2809: PPUSH
2810: CALL_OW 1
2814: ST_TO_ADDR
2815: GO 2842
// global_units := Replace ( global_units , cl , result ) ;
2817: LD_ADDR_LOC 2
2821: PUSH
2822: LD_LOC 2
2826: PPUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_VAR 0 7
2836: PPUSH
2837: CALL_OW 1
2841: ST_TO_ADDR
// if commander then
2842: LD_LOC 1
2846: IFFALSE 2893
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2848: LD_ADDR_EXP 35
2852: PUSH
2853: LD_EXP 35
2857: PPUSH
2858: LD_OWVAR 20
2862: PPUSH
2863: LD_EXP 35
2867: PUSH
2868: LD_OWVAR 20
2872: ARRAY
2873: PUSH
2874: LD_VAR 0 10
2878: ADD
2879: PPUSH
2880: CALL_OW 1
2884: ST_TO_ADDR
// commander := false ;
2885: LD_ADDR_LOC 1
2889: PUSH
2890: LD_INT 0
2892: ST_TO_ADDR
// end ; end ;
2893: LD_VAR 0 7
2897: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2898: LD_INT 0
2900: PPUSH
2901: PPUSH
2902: PPUSH
2903: PPUSH
2904: PPUSH
2905: PPUSH
2906: PPUSH
2907: PPUSH
2908: PPUSH
// pos := Side_Positions [ side ] ;
2909: LD_ADDR_VAR 0 3
2913: PUSH
2914: LD_EXP 23
2918: PUSH
2919: LD_VAR 0 1
2923: ARRAY
2924: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2925: LD_ADDR_OWVAR 21
2929: PUSH
2930: LD_EXP 24
2934: PUSH
2935: LD_VAR 0 1
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := side ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_VAR 0 1
2950: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2951: LD_ADDR_VAR 0 4
2955: PUSH
2956: LD_EXP 30
2960: PUSH
2961: LD_VAR 0 3
2965: ARRAY
2966: PUSH
2967: LD_INT 1
2969: ARRAY
2970: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2971: LD_ADDR_VAR 0 5
2975: PUSH
2976: LD_EXP 30
2980: PUSH
2981: LD_VAR 0 3
2985: ARRAY
2986: PUSH
2987: LD_INT 2
2989: ARRAY
2990: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2991: LD_ADDR_VAR 0 6
2995: PUSH
2996: LD_EXP 30
3000: PUSH
3001: LD_VAR 0 3
3005: ARRAY
3006: PUSH
3007: LD_INT 3
3009: ARRAY
3010: ST_TO_ADDR
// if is_depot then
3011: LD_EXP 7
3015: IFFALSE 3148
// begin bc_type = b_depot ;
3017: LD_ADDR_OWVAR 42
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3025: LD_ADDR_VAR 0 10
3029: PUSH
3030: LD_VAR 0 4
3034: PPUSH
3035: LD_VAR 0 5
3039: PPUSH
3040: LD_VAR 0 6
3044: PPUSH
3045: CALL_OW 47
3049: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3050: LD_VAR 0 10
3054: PPUSH
3055: LD_STRING @
3057: PUSH
3058: LD_VAR 0 1
3062: STR
3063: PPUSH
3064: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3068: LD_VAR 0 10
3072: PPUSH
3073: CALL_OW 274
3077: PPUSH
3078: LD_INT 1
3080: PPUSH
3081: LD_EXP 12
3085: PUSH
3086: LD_INT 1
3088: ARRAY
3089: PPUSH
3090: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3094: LD_VAR 0 10
3098: PPUSH
3099: CALL_OW 274
3103: PPUSH
3104: LD_INT 2
3106: PPUSH
3107: LD_EXP 12
3111: PUSH
3112: LD_INT 2
3114: ARRAY
3115: PPUSH
3116: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3120: LD_VAR 0 10
3124: PPUSH
3125: CALL_OW 274
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: LD_EXP 12
3137: PUSH
3138: LD_INT 3
3140: ARRAY
3141: PPUSH
3142: CALL_OW 277
// end else
3146: GO 3292
// begin for i := 1 to 3 do
3148: LD_ADDR_VAR 0 7
3152: PUSH
3153: DOUBLE
3154: LD_INT 1
3156: DEC
3157: ST_TO_ADDR
3158: LD_INT 3
3160: PUSH
3161: FOR_TO
3162: IFFALSE 3290
// begin r := starting_resources [ i ] ;
3164: LD_ADDR_VAR 0 8
3168: PUSH
3169: LD_EXP 12
3173: PUSH
3174: LD_VAR 0 7
3178: ARRAY
3179: ST_TO_ADDR
// while r >= 10 do
3180: LD_VAR 0 8
3184: PUSH
3185: LD_INT 10
3187: GREATEREQUAL
3188: IFFALSE 3288
// if r > 50 then
3190: LD_VAR 0 8
3194: PUSH
3195: LD_INT 50
3197: GREATER
3198: IFFALSE 3244
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3200: LD_VAR 0 7
3204: PPUSH
3205: LD_INT 5
3207: PPUSH
3208: LD_VAR 0 4
3212: PPUSH
3213: LD_VAR 0 5
3217: PPUSH
3218: LD_INT 4
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 60
// r := r - 50 ;
3228: LD_ADDR_VAR 0 8
3232: PUSH
3233: LD_VAR 0 8
3237: PUSH
3238: LD_INT 50
3240: MINUS
3241: ST_TO_ADDR
// end else
3242: GO 3286
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3244: LD_VAR 0 7
3248: PPUSH
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 10
3256: DIV
3257: PPUSH
3258: LD_VAR 0 4
3262: PPUSH
3263: LD_VAR 0 5
3267: PPUSH
3268: LD_INT 4
3270: PPUSH
3271: LD_INT 0
3273: PPUSH
3274: CALL_OW 60
// r := 0 ;
3278: LD_ADDR_VAR 0 8
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// end ;
3286: GO 3180
// end ;
3288: GO 3161
3290: POP
3291: POP
// end ; for r in starting_crates do
3292: LD_ADDR_VAR 0 8
3296: PUSH
3297: LD_EXP 11
3301: PUSH
3302: FOR_IN
3303: IFFALSE 3335
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 5
3310: PPUSH
3311: LD_VAR 0 4
3315: PPUSH
3316: LD_VAR 0 5
3320: PPUSH
3321: LD_VAR 0 8
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 60
3333: GO 3302
3335: POP
3336: POP
// if def_morale_flags then
3337: LD_EXP 51
3341: IFFALSE 3480
// begin x := start_def [ pos ] [ 1 ] ;
3343: LD_ADDR_VAR 0 4
3347: PUSH
3348: LD_EXP 32
3352: PUSH
3353: LD_VAR 0 3
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3363: LD_ADDR_VAR 0 5
3367: PUSH
3368: LD_EXP 32
3372: PUSH
3373: LD_VAR 0 3
3377: ARRAY
3378: PUSH
3379: LD_INT 2
3381: ARRAY
3382: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3383: LD_VAR 0 4
3387: PPUSH
3388: LD_VAR 0 5
3392: PPUSH
3393: LD_INT 12
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3403: LD_ADDR_EXP 34
3407: PUSH
3408: LD_EXP 34
3412: PUSH
3413: LD_VAR 0 1
3417: PPUSH
3418: LD_VAR 0 4
3422: PPUSH
3423: LD_VAR 0 5
3427: PPUSH
3428: LD_INT 1
3430: PUSH
3431: LD_INT 100
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 2
3440: PUSH
3441: LD_INT 50
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 3
3450: PUSH
3451: LD_INT 20
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 20
3460: PUSH
3461: LD_INT 100
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: PPUSH
3474: CALL_OW 418
3478: ADD
3479: ST_TO_ADDR
// end ; commander := true ;
3480: LD_ADDR_LOC 1
3484: PUSH
3485: LD_INT 1
3487: ST_TO_ADDR
// soldiers_created := 0 ;
3488: LD_ADDR_LOC 4
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3496: LD_ADDR_VAR 0 7
3500: PUSH
3501: DOUBLE
3502: LD_INT 1
3504: DEC
3505: ST_TO_ADDR
3506: LD_EXP 8
3510: PUSH
3511: FOR_TO
3512: IFFALSE 3665
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: LD_EXP 31
3523: PUSH
3524: LD_VAR 0 3
3528: ARRAY
3529: PUSH
3530: LD_VAR 0 7
3534: ARRAY
3535: PUSH
3536: LD_INT 1
3538: ARRAY
3539: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3540: LD_ADDR_VAR 0 5
3544: PUSH
3545: LD_EXP 31
3549: PUSH
3550: LD_VAR 0 3
3554: ARRAY
3555: PUSH
3556: LD_VAR 0 7
3560: ARRAY
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3566: LD_ADDR_VAR 0 6
3570: PUSH
3571: LD_EXP 31
3575: PUSH
3576: LD_VAR 0 3
3580: ARRAY
3581: PUSH
3582: LD_VAR 0 7
3586: ARRAY
3587: PUSH
3588: LD_INT 3
3590: ARRAY
3591: ST_TO_ADDR
// bc_type := b_breastwork ;
3592: LD_ADDR_OWVAR 42
3596: PUSH
3597: LD_INT 31
3599: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3600: LD_ADDR_VAR 0 9
3604: PUSH
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_VAR 0 5
3614: PPUSH
3615: LD_VAR 0 6
3619: PPUSH
3620: CALL_OW 47
3624: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3625: LD_INT 1
3627: PPUSH
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: LD_INT 0
3636: PPUSH
3637: LD_INT 0
3639: PPUSH
3640: LD_VAR 0 9
3644: PPUSH
3645: CALL 2310 0 6
// soldiers_created := soldiers_created + 1 ;
3649: LD_ADDR_LOC 4
3653: PUSH
3654: LD_LOC 4
3658: PUSH
3659: LD_INT 1
3661: PLUS
3662: ST_TO_ADDR
// end ;
3663: GO 3511
3665: POP
3666: POP
// x := start_def [ pos ] [ 1 ] ;
3667: LD_ADDR_VAR 0 4
3671: PUSH
3672: LD_EXP 32
3676: PUSH
3677: LD_VAR 0 3
3681: ARRAY
3682: PUSH
3683: LD_INT 1
3685: ARRAY
3686: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3687: LD_ADDR_VAR 0 5
3691: PUSH
3692: LD_EXP 32
3696: PUSH
3697: LD_VAR 0 3
3701: ARRAY
3702: PUSH
3703: LD_INT 2
3705: ARRAY
3706: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3707: LD_LOC 8
3711: PUSH
3712: LD_EXP 8
3716: MINUS
3717: PPUSH
3718: LD_INT 1
3720: PPUSH
3721: LD_VAR 0 4
3725: PPUSH
3726: LD_VAR 0 5
3730: PPUSH
3731: LD_INT 5
3733: PPUSH
3734: LD_INT 0
3736: PPUSH
3737: CALL 2310 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3741: LD_LOC 5
3745: PPUSH
3746: LD_INT 2
3748: PPUSH
3749: LD_VAR 0 4
3753: PPUSH
3754: LD_VAR 0 5
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL 2310 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3769: LD_LOC 7
3773: PPUSH
3774: LD_INT 3
3776: PPUSH
3777: LD_VAR 0 4
3781: PPUSH
3782: LD_VAR 0 5
3786: PPUSH
3787: LD_INT 5
3789: PPUSH
3790: LD_INT 0
3792: PPUSH
3793: CALL 2310 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3797: LD_LOC 6
3801: PPUSH
3802: LD_INT 4
3804: PPUSH
3805: LD_VAR 0 4
3809: PPUSH
3810: LD_VAR 0 5
3814: PPUSH
3815: LD_INT 5
3817: PPUSH
3818: LD_INT 0
3820: PPUSH
3821: CALL 2310 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3825: LD_EXP 52
3829: PUSH
3830: LD_INT 20
3832: PPUSH
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 321
3842: PUSH
3843: LD_INT 1
3845: EQUAL
3846: AND
3847: IFFALSE 3864
// SetTech ( tech_SibDet , side , state_researched ) ;
3849: LD_INT 20
3851: PPUSH
3852: LD_VAR 0 1
3856: PPUSH
3857: LD_INT 2
3859: PPUSH
3860: CALL_OW 322
// if def_siberite_bomb = 1 then
3864: LD_EXP 55
3868: PUSH
3869: LD_INT 1
3871: EQUAL
3872: IFFALSE 3906
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3874: LD_INT 25
3876: PPUSH
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3889: LD_INT 73
3891: PPUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: LD_INT 1
3899: PPUSH
3900: CALL_OW 322
// end else
3904: GO 3936
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3906: LD_INT 25
3908: PPUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3921: LD_INT 73
3923: PPUSH
3924: LD_VAR 0 1
3928: PPUSH
3929: LD_INT 0
3931: PPUSH
3932: CALL_OW 322
// end ; if Game_Type = 3 then
3936: LD_EXP 41
3940: PUSH
3941: LD_INT 3
3943: EQUAL
3944: IFFALSE 3961
// SetTech ( tech_partinvis , side , state_disabled ) ;
3946: LD_INT 16
3948: PPUSH
3949: LD_VAR 0 1
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3961: LD_INT 24
3963: PPUSH
3964: LD_VAR 0 1
3968: PPUSH
3969: LD_INT 1
3971: PPUSH
3972: CALL_OW 322
// global_defined := true ;
3976: LD_ADDR_LOC 3
3980: PUSH
3981: LD_INT 1
3983: ST_TO_ADDR
// end ;
3984: LD_VAR 0 2
3988: RET
// every 0 0$1 do
3989: GO 3991
3991: DISABLE
// if ( def_siberite_bomb > 1 ) then
3992: LD_EXP 55
3996: PUSH
3997: LD_INT 1
3999: GREATER
4000: IFFALSE 4015
// begin wait ( siberite_bomb_Delay ) ;
4002: LD_EXP 18
4006: PPUSH
4007: CALL_OW 67
// EnableSibFiss ;
4011: CALL 4016 0 0
// end ;
4015: END
// function EnableSibFiss ; var i ; begin
4016: LD_INT 0
4018: PPUSH
4019: PPUSH
// for i := 1 to 8 do
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: DOUBLE
4026: LD_INT 1
4028: DEC
4029: ST_TO_ADDR
4030: LD_INT 8
4032: PUSH
4033: FOR_TO
4034: IFFALSE 4080
// if Side_Positions [ i ] then
4036: LD_EXP 23
4040: PUSH
4041: LD_VAR 0 2
4045: ARRAY
4046: IFFALSE 4078
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4048: LD_INT 25
4050: PPUSH
4051: LD_VAR 0 2
4055: PPUSH
4056: LD_INT 1
4058: PPUSH
4059: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4063: LD_INT 73
4065: PPUSH
4066: LD_VAR 0 2
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: CALL_OW 322
// end ;
4078: GO 4033
4080: POP
4081: POP
// end ;
4082: LD_VAR 0 1
4086: RET
// function prepare_sides ; var i ; begin
4087: LD_INT 0
4089: PPUSH
4090: PPUSH
// global_units := [ ] ;
4091: LD_ADDR_LOC 2
4095: PUSH
4096: EMPTY
4097: ST_TO_ADDR
// global_defined := false ;
4098: LD_ADDR_LOC 3
4102: PUSH
4103: LD_INT 0
4105: ST_TO_ADDR
// CountClassMembers ;
4106: CALL 4156 0 0
// for i := 1 to 8 do
4110: LD_ADDR_VAR 0 2
4114: PUSH
4115: DOUBLE
4116: LD_INT 1
4118: DEC
4119: ST_TO_ADDR
4120: LD_INT 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4149
// if Side_Positions [ i ] then
4126: LD_EXP 23
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: IFFALSE 4147
// prepare_side ( i ) ;
4138: LD_VAR 0 2
4142: PPUSH
4143: CALL 2898 0 1
4147: GO 4123
4149: POP
4150: POP
// end ;
4151: LD_VAR 0 1
4155: RET
// function CountClassMembers ; var Mode ; begin
4156: LD_INT 0
4158: PPUSH
4159: PPUSH
// if No_Mechs then
4160: LD_EXP 57
4164: IFFALSE 4176
// Mode := 2 else
4166: LD_ADDR_VAR 0 2
4170: PUSH
4171: LD_INT 2
4173: ST_TO_ADDR
4174: GO 4184
// Mode := 1 ;
4176: LD_ADDR_VAR 0 2
4180: PUSH
4181: LD_INT 1
4183: ST_TO_ADDR
// neng := number_of_people ;
4184: LD_ADDR_LOC 5
4188: PUSH
4189: LD_EXP 9
4193: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4194: LD_ADDR_LOC 8
4198: PUSH
4199: LD_LOC 5
4203: PUSH
4204: LD_INT 4
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_VAR 0 2
4218: ARRAY
4219: DIV
4220: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4221: LD_LOC 8
4225: PUSH
4226: LD_EXP 8
4230: LESS
4231: IFFALSE 4243
// nsol := number_of_breastworks ;
4233: LD_ADDR_LOC 8
4237: PUSH
4238: LD_EXP 8
4242: ST_TO_ADDR
// neng := neng - nsol ;
4243: LD_ADDR_LOC 5
4247: PUSH
4248: LD_LOC 5
4252: PUSH
4253: LD_LOC 8
4257: MINUS
4258: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4259: LD_ADDR_LOC 6
4263: PUSH
4264: LD_LOC 5
4268: PUSH
4269: LD_INT 3
4271: PUSH
4272: LD_INT 2
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PUSH
4279: LD_VAR 0 2
4283: ARRAY
4284: DIV
4285: ST_TO_ADDR
// if ( nsci < 1 ) then
4286: LD_LOC 6
4290: PUSH
4291: LD_INT 1
4293: LESS
4294: IFFALSE 4304
// nsci := 1 ;
4296: LD_ADDR_LOC 6
4300: PUSH
4301: LD_INT 1
4303: ST_TO_ADDR
// neng := neng - nsci ;
4304: LD_ADDR_LOC 5
4308: PUSH
4309: LD_LOC 5
4313: PUSH
4314: LD_LOC 6
4318: MINUS
4319: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4320: LD_ADDR_LOC 7
4324: PUSH
4325: LD_LOC 5
4329: PUSH
4330: LD_INT 2
4332: DIV
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_VAR 0 2
4345: ARRAY
4346: ST_TO_ADDR
// neng := neng - nmech ;
4347: LD_ADDR_LOC 5
4351: PUSH
4352: LD_LOC 5
4356: PUSH
4357: LD_LOC 7
4361: MINUS
4362: ST_TO_ADDR
// if ( neng < 1 ) then
4363: LD_LOC 5
4367: PUSH
4368: LD_INT 1
4370: LESS
4371: IFFALSE 4381
// neng := 1 ;
4373: LD_ADDR_LOC 5
4377: PUSH
4378: LD_INT 1
4380: ST_TO_ADDR
// end ;
4381: LD_VAR 0 1
4385: RET
// starting begin disable ( 1 ) ;
4386: LD_INT 1
4388: DISABLE_MARKED
// disable ( 2 ) ;
4389: LD_INT 2
4391: DISABLE_MARKED
// disable ( 3 ) ;
4392: LD_INT 3
4394: DISABLE_MARKED
// disable ( 4 ) ;
4395: LD_INT 4
4397: DISABLE_MARKED
// disable ( 5 ) ;
4398: LD_INT 5
4400: DISABLE_MARKED
// disable ( 6 ) ;
4401: LD_INT 6
4403: DISABLE_MARKED
// disable ( 7 ) ;
4404: LD_INT 7
4406: DISABLE_MARKED
// disable ( 10 ) ;
4407: LD_INT 10
4409: DISABLE_MARKED
// disable ( 20 ) ;
4410: LD_INT 20
4412: DISABLE_MARKED
// disable ( 98 ) ;
4413: LD_INT 98
4415: DISABLE_MARKED
// disable ( 99 ) ;
4416: LD_INT 99
4418: DISABLE_MARKED
// disable ( 400 ) ;
4419: LD_INT 400
4421: DISABLE_MARKED
// disable ( 401 ) ;
4422: LD_INT 401
4424: DISABLE_MARKED
// disable ( 600 ) ;
4425: LD_INT 600
4427: DISABLE_MARKED
// mp_selectmsg := true ;
4428: LD_ADDR_OWVAR 13
4432: PUSH
4433: LD_INT 1
4435: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4436: CALL 68 0 0
// init_map ;
4440: CALL 1563 0 0
// init_shipments ;
4444: CALL 4626 0 0
// init_respawn ;
4448: CALL 5695 0 0
// set_shared_visions_and_alliances ;
4452: CALL 2022 0 0
// ResetFog ;
4456: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4460: LD_OWVAR 2
4464: PPUSH
4465: CALL_OW 520
// prepare_sides ;
4469: CALL 4087 0 0
// Init_Win_Condition ;
4473: CALL 17698 0 0
// InitLimits ;
4477: CALL 15571 0 0
// ShowTimer ;
4481: CALL 16508 0 0
// case Game_Type of 2 :
4485: LD_EXP 41
4489: PUSH
4490: LD_INT 2
4492: DOUBLE
4493: EQUAL
4494: IFTRUE 4498
4496: GO 4505
4498: POP
// init_alien_research ; 3 :
4499: CALL 6744 0 0
4503: GO 4525
4505: LD_INT 3
4507: DOUBLE
4508: EQUAL
4509: IFTRUE 4513
4511: GO 4524
4513: POP
// begin InitPoints ( ) ;
4514: CALL 16701 0 0
// init_kings_counting ;
4518: CALL 19061 0 0
// end ; end ;
4522: GO 4525
4524: POP
// music_nat := Side_Nations [ your_side ] ;
4525: LD_ADDR_OWVAR 71
4529: PUSH
4530: LD_EXP 24
4534: PUSH
4535: LD_OWVAR 2
4539: ARRAY
4540: ST_TO_ADDR
// if IAmSpec then
4541: CALL_OW 531
4545: IFFALSE 4569
// begin fogOff ( true ) ;
4547: LD_INT 1
4549: PPUSH
4550: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4554: LD_INT 119
4556: PPUSH
4557: LD_INT 79
4559: PPUSH
4560: CALL_OW 86
// enable ( 400 ) ;
4564: LD_INT 400
4566: ENABLE_MARKED
// end else
4567: GO 4615
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4569: LD_EXP 32
4573: PUSH
4574: LD_EXP 23
4578: PUSH
4579: LD_OWVAR 2
4583: ARRAY
4584: ARRAY
4585: PUSH
4586: LD_INT 1
4588: ARRAY
4589: PPUSH
4590: LD_EXP 32
4594: PUSH
4595: LD_EXP 23
4599: PUSH
4600: LD_OWVAR 2
4604: ARRAY
4605: ARRAY
4606: PUSH
4607: LD_INT 2
4609: ARRAY
4610: PPUSH
4611: CALL_OW 86
// end ; if def_builduptime then
4615: LD_EXP 56
4619: IFFALSE 4625
// BeginBuildUp ;
4621: CALL 12738 0 0
// end ; end_of_file
4625: END
// var shipment , tictac ; export function init_shipments ; begin
4626: LD_INT 0
4628: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4629: LD_ADDR_LOC 9
4633: PUSH
4634: LD_INT 0
4636: PPUSH
4637: LD_INT 3
4639: PPUSH
4640: CALL_OW 12
4644: ST_TO_ADDR
// tictac := 0 ;
4645: LD_ADDR_LOC 10
4649: PUSH
4650: LD_INT 0
4652: ST_TO_ADDR
// end ;
4653: LD_VAR 0 1
4657: RET
// every 0 0$5 + 0 0$1.1 do var d ;
4658: GO 4660
4660: DISABLE
4661: LD_INT 0
4663: PPUSH
// begin case tick of 1 .. 1 1$0 :
4664: LD_OWVAR 1
4668: PUSH
4669: LD_INT 1
4671: DOUBLE
4672: GREATEREQUAL
4673: IFFALSE 4681
4675: LD_INT 2100
4677: DOUBLE
4678: LESSEQUAL
4679: IFTRUE 4683
4681: GO 4694
4683: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
4684: LD_ADDR_VAR 0 1
4688: PUSH
4689: LD_INT 150
4691: ST_TO_ADDR
4692: GO 4877
4694: LD_INT 2100
4696: PUSH
4697: LD_INT 1
4699: PLUS
4700: DOUBLE
4701: GREATEREQUAL
4702: IFFALSE 4710
4704: LD_INT 10500
4706: DOUBLE
4707: LESSEQUAL
4708: IFTRUE 4712
4710: GO 4723
4712: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
4713: LD_ADDR_VAR 0 1
4717: PUSH
4718: LD_INT 100
4720: ST_TO_ADDR
4721: GO 4877
4723: LD_INT 10500
4725: PUSH
4726: LD_INT 1
4728: PLUS
4729: DOUBLE
4730: GREATEREQUAL
4731: IFFALSE 4739
4733: LD_INT 21000
4735: DOUBLE
4736: LESSEQUAL
4737: IFTRUE 4741
4739: GO 4752
4741: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
4742: LD_ADDR_VAR 0 1
4746: PUSH
4747: LD_INT 90
4749: ST_TO_ADDR
4750: GO 4877
4752: LD_INT 21000
4754: PUSH
4755: LD_INT 1
4757: PLUS
4758: DOUBLE
4759: GREATEREQUAL
4760: IFFALSE 4768
4762: LD_INT 42000
4764: DOUBLE
4765: LESSEQUAL
4766: IFTRUE 4770
4768: GO 4781
4770: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
4771: LD_ADDR_VAR 0 1
4775: PUSH
4776: LD_INT 70
4778: ST_TO_ADDR
4779: GO 4877
4781: LD_INT 42000
4783: PUSH
4784: LD_INT 1
4786: PLUS
4787: DOUBLE
4788: GREATEREQUAL
4789: IFFALSE 4797
4791: LD_INT 63000
4793: DOUBLE
4794: LESSEQUAL
4795: IFTRUE 4799
4797: GO 4810
4799: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
4800: LD_ADDR_VAR 0 1
4804: PUSH
4805: LD_INT 60
4807: ST_TO_ADDR
4808: GO 4877
4810: LD_INT 63000
4812: PUSH
4813: LD_INT 1
4815: PLUS
4816: DOUBLE
4817: GREATEREQUAL
4818: IFFALSE 4826
4820: LD_INT 105000
4822: DOUBLE
4823: LESSEQUAL
4824: IFTRUE 4828
4826: GO 4839
4828: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
4829: LD_ADDR_VAR 0 1
4833: PUSH
4834: LD_INT 35
4836: ST_TO_ADDR
4837: GO 4877
4839: LD_INT 105000
4841: PUSH
4842: LD_INT 1
4844: PLUS
4845: DOUBLE
4846: GREATEREQUAL
4847: IFFALSE 4855
4849: LD_INT 630000
4851: DOUBLE
4852: LESSEQUAL
4853: IFTRUE 4857
4855: GO 4868
4857: POP
// d := 20 ; else
4858: LD_ADDR_VAR 0 1
4862: PUSH
4863: LD_INT 20
4865: ST_TO_ADDR
4866: GO 4877
4868: POP
// d := 0 ; end ;
4869: LD_ADDR_VAR 0 1
4873: PUSH
4874: LD_INT 0
4876: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
4877: LD_INT 1
4879: PPUSH
4880: LD_INT 10000
4882: PPUSH
4883: CALL_OW 12
4887: PUSH
4888: LD_VAR 0 1
4892: PUSH
4893: LD_EXP 13
4897: MUL
4898: LESSEQUAL
4899: IFFALSE 4953
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
4901: LD_INT 1
4903: PPUSH
4904: LD_INT 140
4906: PPUSH
4907: CALL_OW 12
4911: PPUSH
4912: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
4916: LD_ADDR_LOC 9
4920: PUSH
4921: LD_LOC 9
4925: PUSH
4926: LD_INT 1
4928: PLUS
4929: PUSH
4930: LD_INT 4
4932: MOD
4933: ST_TO_ADDR
// CreateCratesArea ( 5 , nw + shipment , true ) ;
4934: LD_INT 5
4936: PPUSH
4937: LD_INT 12
4939: PUSH
4940: LD_LOC 9
4944: PLUS
4945: PPUSH
4946: LD_INT 1
4948: PPUSH
4949: CALL_OW 55
// end ; enable ;
4953: ENABLE
// end ;
4954: PPOPN 1
4956: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount , is_in ;
4957: LD_OWVAR 1
4961: PUSH
4962: LD_INT 6300
4964: PUSH
4965: LD_LOC 10
4969: MUL
4970: PUSH
4971: LD_LOC 10
4975: PUSH
4976: LD_INT 3150
4978: PUSH
4979: LD_EXP 13
4983: PUSH
4984: LD_INT 70
4986: MUL
4987: MINUS
4988: MUL
4989: PLUS
4990: GREATER
4991: IFFALSE 5127
4993: GO 4995
4995: DISABLE
4996: LD_INT 0
4998: PPUSH
4999: PPUSH
5000: PPUSH
// begin tictac := tictac + 1 ;
5001: LD_ADDR_LOC 10
5005: PUSH
5006: LD_LOC 10
5010: PUSH
5011: LD_INT 1
5013: PLUS
5014: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5015: LD_ADDR_VAR 0 2
5019: PUSH
5020: LD_INT 3
5022: PPUSH
5023: LD_INT 5
5025: PPUSH
5026: CALL_OW 12
5030: ST_TO_ADDR
// for i = 0 to 3 do
5031: LD_ADDR_VAR 0 1
5035: PUSH
5036: DOUBLE
5037: LD_INT 0
5039: DEC
5040: ST_TO_ADDR
5041: LD_INT 3
5043: PUSH
5044: FOR_TO
5045: IFFALSE 5124
// begin is_in := GetResourceArea ( north_west + i , mat_cans ) ;
5047: LD_ADDR_VAR 0 3
5051: PUSH
5052: LD_INT 4
5054: PUSH
5055: LD_VAR 0 1
5059: PLUS
5060: PPUSH
5061: LD_INT 1
5063: PPUSH
5064: CALL_OW 287
5068: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5069: LD_VAR 0 3
5073: PUSH
5074: LD_INT 500
5076: LESS
5077: PUSH
5078: LD_INT 1
5080: PPUSH
5081: LD_INT 10
5083: PPUSH
5084: CALL_OW 12
5088: PUSH
5089: LD_VAR 0 3
5093: PUSH
5094: LD_INT 100
5096: DIV
5097: GREATER
5098: OR
5099: IFFALSE 5122
// CreateCratesArea ( amount , north_west + i , true ) ;
5101: LD_VAR 0 2
5105: PPUSH
5106: LD_INT 4
5108: PUSH
5109: LD_VAR 0 1
5113: PLUS
5114: PPUSH
5115: LD_INT 1
5117: PPUSH
5118: CALL_OW 55
// end ;
5122: GO 5044
5124: POP
5125: POP
// enable ;
5126: ENABLE
// end ; end_of_file
5127: PPOPN 3
5129: END
// var _apemenSkillLevel , _isSpawning , _wildApemenAmount , _numberOfPlayers ; every 0 0$15 do var i ;
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin _apemenSkillLevel := 0 ;
5136: LD_ADDR_LOC 11
5140: PUSH
5141: LD_INT 0
5143: ST_TO_ADDR
// _isSpawning := true ;
5144: LD_ADDR_LOC 12
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// _wildApemenAmount := 0 ;
5152: LD_ADDR_LOC 13
5156: PUSH
5157: LD_INT 0
5159: ST_TO_ADDR
// _numberOfPlayers := 0 ;
5160: LD_ADDR_LOC 14
5164: PUSH
5165: LD_INT 0
5167: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5168: LD_ADDR_VAR 0 1
5172: PUSH
5173: LD_EXP 23
5177: PUSH
5178: LD_INT 0
5180: PUSH
5181: EMPTY
5182: LIST
5183: DIFF
5184: PUSH
5185: FOR_IN
5186: IFFALSE 5204
// _numberOfPlayers := _numberOfPlayers + 1 ;
5188: LD_ADDR_LOC 14
5192: PUSH
5193: LD_LOC 14
5197: PUSH
5198: LD_INT 1
5200: PLUS
5201: ST_TO_ADDR
5202: GO 5185
5204: POP
5205: POP
// prepare_apemen ;
5206: CALL 5335 0 0
// end ;
5210: PPOPN 1
5212: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
5213: CALL 5220 0 0
// end ;
5217: PPOPN 2
5219: END
// export function CheckApemenAmount ; var threshold ; begin
5220: LD_INT 0
5222: PPUSH
5223: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
5224: LD_ADDR_LOC 13
5228: PUSH
5229: LD_LOC 13
5233: PUSH
5234: LD_INT 1
5236: MINUS
5237: ST_TO_ADDR
// if _isSpawning then
5238: LD_LOC 12
5242: IFFALSE 5246
// exit ;
5244: GO 5330
// if _numberOfPlayers <= 2 then
5246: LD_LOC 14
5250: PUSH
5251: LD_INT 2
5253: LESSEQUAL
5254: IFFALSE 5268
// threshold := amount_of_apemen else
5256: LD_ADDR_VAR 0 2
5260: PUSH
5261: LD_EXP 15
5265: ST_TO_ADDR
5266: GO 5282
// threshold := amount_of_apemen * 2 ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_EXP 15
5277: PUSH
5278: LD_INT 2
5280: MUL
5281: ST_TO_ADDR
// if _wildApemenAmount <= threshold then
5282: LD_LOC 13
5286: PUSH
5287: LD_VAR 0 2
5291: LESSEQUAL
5292: IFFALSE 5330
// begin if _apemenSkillLevel < 8 then
5294: LD_LOC 11
5298: PUSH
5299: LD_INT 8
5301: LESS
5302: IFFALSE 5318
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
5304: LD_ADDR_LOC 11
5308: PUSH
5309: LD_LOC 11
5313: PUSH
5314: LD_INT 1
5316: PLUS
5317: ST_TO_ADDR
// _isSpawning := true ;
5318: LD_ADDR_LOC 12
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// prepare_apemen ;
5326: CALL 5335 0 0
// end ; end ;
5330: LD_VAR 0 1
5334: RET
// function prepare_apemen ; var i , increment ; begin
5335: LD_INT 0
5337: PPUSH
5338: PPUSH
5339: PPUSH
// if not amount_of_apemen then
5340: LD_EXP 15
5344: NOT
5345: IFFALSE 5349
// exit ;
5347: GO 5508
// if _numberOfPlayers <= 2 then
5349: LD_LOC 14
5353: PUSH
5354: LD_INT 2
5356: LESSEQUAL
5357: IFFALSE 5369
// increment := 2 else
5359: LD_ADDR_VAR 0 3
5363: PUSH
5364: LD_INT 2
5366: ST_TO_ADDR
5367: GO 5377
// increment := 4 ;
5369: LD_ADDR_VAR 0 3
5373: PUSH
5374: LD_INT 4
5376: ST_TO_ADDR
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5377: LD_INT 1050
5379: PPUSH
5380: LD_INT 3150
5382: PPUSH
5383: CALL_OW 12
5387: PPUSH
5388: CALL_OW 67
// apeman_init ;
5392: CALL 5513 0 0
// PlaceUnitArea ( CreateHuman , apeman_north , false ) ;
5396: CALL_OW 44
5400: PPUSH
5401: LD_INT 8
5403: PPUSH
5404: LD_INT 0
5406: PPUSH
5407: CALL_OW 49
// PlaceUnitArea ( CreateHuman , apeman_south , false ) ;
5411: CALL_OW 44
5415: PPUSH
5416: LD_INT 10
5418: PPUSH
5419: LD_INT 0
5421: PPUSH
5422: CALL_OW 49
// if _numberOfPlayers > 2 then
5426: LD_LOC 14
5430: PUSH
5431: LD_INT 2
5433: GREATER
5434: IFFALSE 5466
// begin PlaceUnitArea ( CreateHuman , apeman_east , false ) ;
5436: CALL_OW 44
5440: PPUSH
5441: LD_INT 9
5443: PPUSH
5444: LD_INT 0
5446: PPUSH
5447: CALL_OW 49
// PlaceUnitArea ( CreateHuman , apeman_west , false ) ;
5451: CALL_OW 44
5455: PPUSH
5456: LD_INT 11
5458: PPUSH
5459: LD_INT 0
5461: PPUSH
5462: CALL_OW 49
// end ; _wildApemenAmount := _wildApemenAmount + increment ;
5466: LD_ADDR_LOC 13
5470: PUSH
5471: LD_LOC 13
5475: PUSH
5476: LD_VAR 0 3
5480: PLUS
5481: ST_TO_ADDR
// until _wildApemenAmount >= ( amount_of_apemen * increment ) ;
5482: LD_LOC 13
5486: PUSH
5487: LD_EXP 15
5491: PUSH
5492: LD_VAR 0 3
5496: MUL
5497: GREATEREQUAL
5498: IFFALSE 5377
// _isSpawning := false ;
5500: LD_ADDR_LOC 12
5504: PUSH
5505: LD_INT 0
5507: ST_TO_ADDR
// end ;
5508: LD_VAR 0 1
5512: RET
// function apeman_init ; begin
5513: LD_INT 0
5515: PPUSH
// uc_side := 0 ;
5516: LD_ADDR_OWVAR 20
5520: PUSH
5521: LD_INT 0
5523: ST_TO_ADDR
// uc_nation := nation_nature ;
5524: LD_ADDR_OWVAR 21
5528: PUSH
5529: LD_INT 0
5531: ST_TO_ADDR
// hc_class := class_apeman ;
5532: LD_ADDR_OWVAR 28
5536: PUSH
5537: LD_INT 12
5539: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
5540: LD_ADDR_OWVAR 30
5544: PUSH
5545: LD_INT 2
5547: PUSH
5548: LD_INT 2
5550: PUSH
5551: LD_INT 2
5553: PUSH
5554: LD_INT 2
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
5563: LD_ADDR_OWVAR 31
5567: PUSH
5568: LD_INT 0
5570: PPUSH
5571: LD_INT 2
5573: PPUSH
5574: CALL_OW 12
5578: PUSH
5579: LD_LOC 11
5583: PLUS
5584: PUSH
5585: LD_INT 0
5587: PPUSH
5588: LD_INT 2
5590: PPUSH
5591: CALL_OW 12
5595: PUSH
5596: LD_LOC 11
5600: PLUS
5601: PUSH
5602: LD_INT 0
5604: PPUSH
5605: LD_INT 2
5607: PPUSH
5608: CALL_OW 12
5612: PUSH
5613: LD_LOC 11
5617: PLUS
5618: PUSH
5619: LD_INT 0
5621: PPUSH
5622: LD_INT 2
5624: PPUSH
5625: CALL_OW 12
5629: PUSH
5630: LD_LOC 11
5634: PLUS
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
5642: LD_ADDR_OWVAR 29
5646: PUSH
5647: LD_INT 10
5649: PUSH
5650: LD_INT 12
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: ST_TO_ADDR
// hc_sex := sex_male ;
5657: LD_ADDR_OWVAR 27
5661: PUSH
5662: LD_INT 1
5664: ST_TO_ADDR
// hc_importance := 0 ;
5665: LD_ADDR_OWVAR 32
5669: PUSH
5670: LD_INT 0
5672: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
5673: LD_ADDR_OWVAR 35
5677: PUSH
5678: LD_INT 20
5680: NEG
5681: PPUSH
5682: LD_INT 20
5684: PPUSH
5685: CALL_OW 12
5689: ST_TO_ADDR
// end ; end_of_file
5690: LD_VAR 0 1
5694: RET
// var respawn_queue ; export function init_respawn ; begin
5695: LD_INT 0
5697: PPUSH
// if not def_people_respawning then
5698: LD_EXP 53
5702: NOT
5703: IFFALSE 5707
// exit ;
5705: GO 5749
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5707: LD_ADDR_LOC 15
5711: PUSH
5712: LD_INT 0
5714: PUSH
5715: LD_INT 0
5717: PUSH
5718: LD_INT 0
5720: PUSH
5721: LD_INT 0
5723: PUSH
5724: LD_INT 0
5726: PUSH
5727: LD_INT 0
5729: PUSH
5730: LD_INT 0
5732: PUSH
5733: LD_INT 0
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: ST_TO_ADDR
// enable ( 10 ) ;
5746: LD_INT 10
5748: ENABLE_MARKED
// end ;
5749: LD_VAR 0 1
5753: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
5754: GO 5756
5756: DISABLE
5757: LD_INT 0
5759: PPUSH
5760: PPUSH
5761: PPUSH
5762: PPUSH
// begin for side = 1 to Side_Positions do
5763: LD_ADDR_VAR 0 4
5767: PUSH
5768: DOUBLE
5769: LD_INT 1
5771: DEC
5772: ST_TO_ADDR
5773: LD_EXP 23
5777: PUSH
5778: FOR_TO
5779: IFFALSE 5945
// if Side_Positions [ side ] then
5781: LD_EXP 23
5785: PUSH
5786: LD_VAR 0 4
5790: ARRAY
5791: IFFALSE 5943
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
5793: LD_ADDR_VAR 0 2
5797: PUSH
5798: LD_INT 22
5800: PUSH
5801: LD_VAR 0 4
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 21
5812: PUSH
5813: LD_INT 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 3
5822: PUSH
5823: LD_INT 23
5825: PUSH
5826: LD_INT 0
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 69
5843: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
5844: LD_VAR 0 2
5848: PUSH
5849: LD_EXP 9
5853: LESS
5854: PUSH
5855: LD_LOC 15
5859: PUSH
5860: LD_VAR 0 4
5864: ARRAY
5865: NOT
5866: AND
5867: IFFALSE 5883
// set_queue ( side , TICK ) ;
5869: LD_VAR 0 4
5873: PPUSH
5874: LD_OWVAR 1
5878: PPUSH
5879: CALL 6182 0 2
// time := TICK - respawn_queue [ side ] ;
5883: LD_ADDR_VAR 0 3
5887: PUSH
5888: LD_OWVAR 1
5892: PUSH
5893: LD_LOC 15
5897: PUSH
5898: LD_VAR 0 4
5902: ARRAY
5903: MINUS
5904: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
5905: LD_LOC 15
5909: PUSH
5910: LD_VAR 0 4
5914: ARRAY
5915: PUSH
5916: LD_VAR 0 3
5920: PUSH
5921: LD_EXP 16
5925: GREATER
5926: AND
5927: IFFALSE 5943
// respawn_character ( side , time ) ;
5929: LD_VAR 0 4
5933: PPUSH
5934: LD_VAR 0 3
5938: PPUSH
5939: CALL 5951 0 2
// end ;
5943: GO 5778
5945: POP
5946: POP
// enable ;
5947: ENABLE
// end ;
5948: PPOPN 4
5950: END
// function respawn_character ( side , time ) ; var dep ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
5955: LD_INT 0
5957: PPUSH
5958: LD_INT 1
5960: PPUSH
5961: CALL_OW 12
5965: PUSH
5966: LD_VAR 0 2
5970: PUSH
5971: LD_EXP 17
5975: LESS
5976: AND
5977: IFFALSE 5981
// exit ;
5979: GO 6177
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
5981: LD_ADDR_VAR 0 4
5985: PUSH
5986: LD_INT 22
5988: PUSH
5989: LD_VAR 0 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_INT 0
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 30
6013: PUSH
6014: LD_INT 1
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 50
6028: PUSH
6029: EMPTY
6030: LIST
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PPUSH
6037: CALL_OW 69
6041: ST_TO_ADDR
// if not dep then
6042: LD_VAR 0 4
6046: NOT
6047: IFFALSE 6053
// exit else
6049: GO 6177
6051: GO 6077
// dep := dep [ Rand ( 1 , dep ) ] ;
6053: LD_ADDR_VAR 0 4
6057: PUSH
6058: LD_VAR 0 4
6062: PUSH
6063: LD_INT 1
6065: PPUSH
6066: LD_VAR 0 4
6070: PPUSH
6071: CALL_OW 12
6075: ARRAY
6076: ST_TO_ADDR
// uc_side := side ;
6077: LD_ADDR_OWVAR 20
6081: PUSH
6082: LD_VAR 0 1
6086: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6087: LD_ADDR_OWVAR 21
6091: PUSH
6092: LD_EXP 24
6096: PUSH
6097: LD_VAR 0 1
6101: ARRAY
6102: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6103: LD_INT 0
6105: PPUSH
6106: LD_INT 0
6108: PPUSH
6109: LD_EXP 10
6113: PUSH
6114: LD_INT 2
6116: DIV
6117: PPUSH
6118: CALL_OW 380
// hc_importance := 0 ;
6122: LD_ADDR_OWVAR 32
6126: PUSH
6127: LD_INT 0
6129: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6130: CALL_OW 44
6134: PPUSH
6135: LD_VAR 0 4
6139: PPUSH
6140: CALL_OW 250
6144: PPUSH
6145: LD_VAR 0 4
6149: PPUSH
6150: CALL_OW 251
6154: PPUSH
6155: LD_INT 10
6157: PPUSH
6158: LD_INT 1
6160: PPUSH
6161: CALL_OW 50
// set_queue ( side , 0 ) ;
6165: LD_VAR 0 1
6169: PPUSH
6170: LD_INT 0
6172: PPUSH
6173: CALL 6182 0 2
// end ;
6177: LD_VAR 0 3
6181: RET
// function set_queue ( side , time ) ; begin
6182: LD_INT 0
6184: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6185: LD_ADDR_LOC 15
6189: PUSH
6190: LD_LOC 15
6194: PPUSH
6195: LD_VAR 0 1
6199: PPUSH
6200: CALL_OW 3
6204: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6205: LD_ADDR_LOC 15
6209: PUSH
6210: LD_LOC 15
6214: PPUSH
6215: LD_VAR 0 1
6219: PPUSH
6220: LD_VAR 0 2
6224: PPUSH
6225: CALL_OW 2
6229: ST_TO_ADDR
// end ; end_of_file
6230: LD_VAR 0 3
6234: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6235: LD_VAR 0 1
6239: PPUSH
6240: CALL_OW 266
6244: PUSH
6245: LD_INT 0
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: IN
6255: IFFALSE 6280
// SetBName ( b , @ & GetSide ( b ) ) ;
6257: LD_VAR 0 1
6261: PPUSH
6262: LD_STRING @
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: CALL_OW 255
6274: STR
6275: PPUSH
6276: CALL_OW 500
// if def_game_rules then
6280: LD_EXP 42
6284: IFFALSE 6321
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6286: LD_VAR 0 1
6290: PPUSH
6291: LD_VAR 0 1
6295: PPUSH
6296: CALL_OW 266
6300: PPUSH
6301: LD_VAR 0 1
6305: PPUSH
6306: CALL_OW 255
6310: PPUSH
6311: LD_INT 0
6313: PPUSH
6314: LD_INT 1
6316: PPUSH
6317: CALL 15972 0 5
// end ;
6321: PPOPN 2
6323: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6324: LD_VAR 0 1
6328: PPUSH
6329: CALL_OW 266
6333: PUSH
6334: LD_INT 0
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: IN
6344: IFFALSE 6369
// SetBName ( b , @ & GetSide ( b ) ) ;
6346: LD_VAR 0 1
6350: PPUSH
6351: LD_STRING @
6353: PUSH
6354: LD_VAR 0 1
6358: PPUSH
6359: CALL_OW 255
6363: STR
6364: PPUSH
6365: CALL_OW 500
// if def_game_rules then
6369: LD_EXP 42
6373: IFFALSE 6412
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_VAR 0 1
6384: PPUSH
6385: CALL_OW 266
6389: PPUSH
6390: LD_VAR 0 1
6394: PPUSH
6395: CALL_OW 255
6399: PPUSH
6400: LD_VAR 0 2
6404: PPUSH
6405: LD_INT 1
6407: PPUSH
6408: CALL 15972 0 5
// end ;
6412: PPOPN 3
6414: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6415: LD_INT 0
6417: PPUSH
6418: PPUSH
6419: PPUSH
6420: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
6421: LD_VAR 0 1
6425: PPUSH
6426: CALL_OW 255
6430: PUSH
6431: LD_INT 0
6433: EQUAL
6434: PUSH
6435: LD_VAR 0 1
6439: PPUSH
6440: CALL_OW 257
6444: PUSH
6445: LD_INT 12
6447: EQUAL
6448: AND
6449: IFFALSE 6455
// CheckApemenAmount ;
6451: CALL 5220 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6455: LD_VAR 0 1
6459: PPUSH
6460: CALL_OW 266
6464: PUSH
6465: LD_INT 0
6467: PUSH
6468: LD_INT 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: IN
6475: IFFALSE 6557
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6477: LD_ADDR_VAR 0 4
6481: PUSH
6482: LD_EXP 23
6486: PUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 255
6496: ARRAY
6497: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6498: LD_ADDR_VAR 0 2
6502: PUSH
6503: LD_EXP 32
6507: PUSH
6508: LD_VAR 0 4
6512: ARRAY
6513: PUSH
6514: LD_INT 1
6516: ARRAY
6517: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6518: LD_ADDR_VAR 0 3
6522: PUSH
6523: LD_EXP 32
6527: PUSH
6528: LD_VAR 0 4
6532: ARRAY
6533: PUSH
6534: LD_INT 2
6536: ARRAY
6537: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6538: LD_VAR 0 2
6542: PPUSH
6543: LD_VAR 0 3
6547: PPUSH
6548: CALL_OW 420
6552: PPUSH
6553: CALL_OW 419
// end ; if def_game_rules then
6557: LD_EXP 42
6561: IFFALSE 6660
// if ( GetType ( j ) = 3 ) then
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL_OW 247
6572: PUSH
6573: LD_INT 3
6575: EQUAL
6576: IFFALSE 6616
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6578: LD_VAR 0 1
6582: PPUSH
6583: LD_VAR 0 1
6587: PPUSH
6588: CALL_OW 266
6592: PPUSH
6593: LD_VAR 0 1
6597: PPUSH
6598: CALL_OW 255
6602: PPUSH
6603: LD_INT 0
6605: PPUSH
6606: LD_INT 1
6608: NEG
6609: PPUSH
6610: CALL 15972 0 5
6614: GO 6660
// if ( GetChassis ( j ) = 25 ) then
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 265
6625: PUSH
6626: LD_INT 25
6628: EQUAL
6629: IFFALSE 6660
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6631: LD_VAR 0 1
6635: PPUSH
6636: LD_INT 37
6638: PPUSH
6639: LD_VAR 0 1
6643: PPUSH
6644: CALL_OW 255
6648: PPUSH
6649: LD_INT 0
6651: PPUSH
6652: LD_INT 1
6654: NEG
6655: PPUSH
6656: CALL 15972 0 5
// end ;
6660: PPOPN 5
6662: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6663: LD_EXP 42
6667: PUSH
6668: LD_VAR 0 1
6672: PPUSH
6673: CALL_OW 265
6677: PUSH
6678: LD_INT 25
6680: EQUAL
6681: AND
6682: IFFALSE 6714
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6684: LD_VAR 0 1
6688: PPUSH
6689: LD_INT 37
6691: PPUSH
6692: LD_VAR 0 1
6696: PPUSH
6697: CALL_OW 255
6701: PPUSH
6702: LD_VAR 0 3
6706: PPUSH
6707: LD_INT 1
6709: PPUSH
6710: CALL 15972 0 5
// end ;
6714: PPOPN 4
6716: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6717: LD_VAR 0 1
6721: PPUSH
6722: LD_VAR 0 2
6726: PPUSH
6727: LD_VAR 0 3
6731: PPUSH
6732: LD_OWVAR 2
6736: PPUSH
6737: CALL 17459 0 4
6741: PPOPN 3
6743: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
6744: LD_INT 0
6746: PPUSH
6747: PPUSH
6748: PPUSH
6749: PPUSH
6750: PPUSH
6751: PPUSH
// artefact_number := 3 ;
6752: LD_ADDR_EXP 36
6756: PUSH
6757: LD_INT 3
6759: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
6760: LD_ADDR_EXP 37
6764: PUSH
6765: LD_INT 1
6767: PUSH
6768: LD_INT 0
6770: PUSH
6771: LD_INT 2
6773: PUSH
6774: LD_INT 0
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
6787: LD_ADDR_EXP 38
6791: PUSH
6792: LD_INT 1
6794: PUSH
6795: LD_INT 3
6797: PUSH
6798: LD_INT 5
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: LIST
6805: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
6806: LD_ADDR_VAR 0 2
6810: PUSH
6811: LD_INT 1
6813: PUSH
6814: LD_INT 4
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: PUSH
6821: LD_INT 2
6823: PUSH
6824: LD_INT 5
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PUSH
6831: LD_INT 3
6833: PUSH
6834: LD_INT 9
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
6846: LD_ADDR_VAR 0 3
6850: PUSH
6851: LD_INT 3
6853: PUSH
6854: LD_INT 4
6856: PUSH
6857: LD_INT 3
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
6865: LD_ADDR_VAR 0 4
6869: PUSH
6870: LD_INT 150
6872: PUSH
6873: LD_INT 250
6875: PUSH
6876: LD_INT 400
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
6884: LD_ADDR_VAR 0 5
6888: PUSH
6889: LD_INT 2
6891: PUSH
6892: LD_INT 10
6894: PUSH
6895: LD_INT 20
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
6903: LD_ADDR_VAR 0 6
6907: PUSH
6908: LD_INT 6
6910: PUSH
6911: LD_INT 18
6913: PUSH
6914: LD_INT 50
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
6922: LD_VAR 0 2
6926: PPUSH
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_VAR 0 4
6936: PPUSH
6937: LD_VAR 0 5
6941: PPUSH
6942: LD_VAR 0 6
6946: PPUSH
6947: CALL 6956 0 5
// end ;
6951: LD_VAR 0 1
6955: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
6956: LD_INT 0
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
// disable ( 1 ) ;
6963: LD_INT 1
6965: DISABLE_MARKED
// disable ( 5 ) ;
6966: LD_INT 5
6968: DISABLE_MARKED
// disable ( 6 ) ;
6969: LD_INT 6
6971: DISABLE_MARKED
// disable ( 7 ) ;
6972: LD_INT 7
6974: DISABLE_MARKED
// for side = 1 to 8 do
6975: LD_ADDR_VAR 0 9
6979: PUSH
6980: DOUBLE
6981: LD_INT 1
6983: DEC
6984: ST_TO_ADDR
6985: LD_INT 8
6987: PUSH
6988: FOR_TO
6989: IFFALSE 7005
// SetArtifactRes ( side , state_enabled ) ;
6991: LD_VAR 0 9
6995: PPUSH
6996: LD_INT 1
6998: PPUSH
6999: CALL_OW 467
7003: GO 6988
7005: POP
7006: POP
// for un = 0 to ( artefact_number - 1 ) do
7007: LD_ADDR_VAR 0 7
7011: PUSH
7012: DOUBLE
7013: LD_INT 0
7015: DEC
7016: ST_TO_ADDR
7017: LD_EXP 36
7021: PUSH
7022: LD_INT 1
7024: MINUS
7025: PUSH
7026: FOR_TO
7027: IFFALSE 7425
// begin base := un * 100 ;
7029: LD_ADDR_VAR 0 10
7033: PUSH
7034: LD_VAR 0 7
7038: PUSH
7039: LD_INT 100
7041: MUL
7042: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
7043: LD_VAR 0 10
7047: PUSH
7048: LD_INT 1
7050: PLUS
7051: PPUSH
7052: LD_VAR 0 1
7056: PUSH
7057: LD_VAR 0 7
7061: PUSH
7062: LD_INT 1
7064: PLUS
7065: ARRAY
7066: PUSH
7067: LD_INT 1
7069: ARRAY
7070: PPUSH
7071: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7075: LD_VAR 0 10
7079: PUSH
7080: LD_INT 2
7082: PLUS
7083: PPUSH
7084: LD_VAR 0 1
7088: PUSH
7089: LD_VAR 0 7
7093: PUSH
7094: LD_INT 1
7096: PLUS
7097: ARRAY
7098: PUSH
7099: LD_INT 2
7101: ARRAY
7102: PPUSH
7103: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7107: LD_VAR 0 10
7111: PUSH
7112: LD_INT 3
7114: PLUS
7115: PPUSH
7116: LD_VAR 0 2
7120: PUSH
7121: LD_VAR 0 7
7125: PUSH
7126: LD_INT 1
7128: PLUS
7129: ARRAY
7130: PPUSH
7131: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7135: LD_VAR 0 10
7139: PUSH
7140: LD_INT 5
7142: PLUS
7143: PPUSH
7144: LD_VAR 0 3
7148: PUSH
7149: LD_VAR 0 7
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: ARRAY
7158: PPUSH
7159: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7163: LD_VAR 0 10
7167: PUSH
7168: LD_INT 6
7170: PLUS
7171: PPUSH
7172: LD_VAR 0 4
7176: PUSH
7177: LD_VAR 0 7
7181: PUSH
7182: LD_INT 1
7184: PLUS
7185: ARRAY
7186: PPUSH
7187: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7191: LD_VAR 0 10
7195: PUSH
7196: LD_INT 7
7198: PLUS
7199: PPUSH
7200: LD_VAR 0 5
7204: PUSH
7205: LD_VAR 0 7
7209: PUSH
7210: LD_INT 1
7212: PLUS
7213: ARRAY
7214: PPUSH
7215: CALL_OW 109
// SetTag ( base + 08 , false ) ;
7219: LD_VAR 0 10
7223: PUSH
7224: LD_INT 8
7226: PLUS
7227: PPUSH
7228: LD_INT 0
7230: PPUSH
7231: CALL_OW 109
// SetTag ( base + 09 , false ) ;
7235: LD_VAR 0 10
7239: PUSH
7240: LD_INT 9
7242: PLUS
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
7251: LD_VAR 0 10
7255: PUSH
7256: LD_INT 11
7258: PLUS
7259: PPUSH
7260: LD_INT 0
7262: PPUSH
7263: CALL_OW 109
// SetTag ( base + 12 , false ) ;
7267: LD_VAR 0 10
7271: PUSH
7272: LD_INT 12
7274: PLUS
7275: PPUSH
7276: LD_INT 0
7278: PPUSH
7279: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7283: LD_VAR 0 10
7287: PUSH
7288: LD_INT 13
7290: PLUS
7291: PPUSH
7292: LD_INT 0
7294: PPUSH
7295: CALL_OW 109
// for i = 0 to 7 do
7299: LD_ADDR_VAR 0 8
7303: PUSH
7304: DOUBLE
7305: LD_INT 0
7307: DEC
7308: ST_TO_ADDR
7309: LD_INT 7
7311: PUSH
7312: FOR_TO
7313: IFFALSE 7421
// begin SetTag ( base + i * 10 + 21 , false ) ;
7315: LD_VAR 0 10
7319: PUSH
7320: LD_VAR 0 8
7324: PUSH
7325: LD_INT 10
7327: MUL
7328: PLUS
7329: PUSH
7330: LD_INT 21
7332: PLUS
7333: PPUSH
7334: LD_INT 0
7336: PPUSH
7337: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
7341: LD_VAR 0 10
7345: PUSH
7346: LD_VAR 0 8
7350: PUSH
7351: LD_INT 10
7353: MUL
7354: PLUS
7355: PUSH
7356: LD_INT 22
7358: PLUS
7359: PPUSH
7360: LD_INT 0
7362: PPUSH
7363: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
7367: LD_VAR 0 10
7371: PUSH
7372: LD_VAR 0 8
7376: PUSH
7377: LD_INT 10
7379: MUL
7380: PLUS
7381: PUSH
7382: LD_INT 23
7384: PLUS
7385: PPUSH
7386: LD_INT 0
7388: PPUSH
7389: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
7393: LD_VAR 0 10
7397: PUSH
7398: LD_VAR 0 8
7402: PUSH
7403: LD_INT 10
7405: MUL
7406: PLUS
7407: PUSH
7408: LD_INT 25
7410: PLUS
7411: PPUSH
7412: LD_INT 0
7414: PPUSH
7415: CALL_OW 109
// end ;
7419: GO 7312
7421: POP
7422: POP
// end ;
7423: GO 7026
7425: POP
7426: POP
// enable ( 20 ) ;
7427: LD_INT 20
7429: ENABLE_MARKED
// labs_in_use := [ ] ;
7430: LD_ADDR_EXP 39
7434: PUSH
7435: EMPTY
7436: ST_TO_ADDR
// if def_artefact_one then
7437: LD_EXP 1
7441: IFFALSE 7468
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
7443: LD_INT 4
7445: PPUSH
7446: LD_EXP 38
7450: PUSH
7451: LD_INT 1
7453: ARRAY
7454: PPUSH
7455: LD_INT 16
7457: PPUSH
7458: LD_INT 0
7460: PPUSH
7461: CALL_OW 59
// enable ( 5 ) ;
7465: LD_INT 5
7467: ENABLE_MARKED
// end ; if def_artefact_two then
7468: LD_EXP 2
7472: IFFALSE 7499
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
7474: LD_INT 4
7476: PPUSH
7477: LD_EXP 38
7481: PUSH
7482: LD_INT 2
7484: ARRAY
7485: PPUSH
7486: LD_INT 16
7488: PPUSH
7489: LD_INT 0
7491: PPUSH
7492: CALL_OW 59
// enable ( 6 ) ;
7496: LD_INT 6
7498: ENABLE_MARKED
// end ; if def_artefact_three then
7499: LD_EXP 3
7503: IFFALSE 7530
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
7505: LD_INT 4
7507: PPUSH
7508: LD_EXP 38
7512: PUSH
7513: LD_INT 3
7515: ARRAY
7516: PPUSH
7517: LD_INT 16
7519: PPUSH
7520: LD_INT 0
7522: PPUSH
7523: CALL_OW 59
// enable ( 7 ) ;
7527: LD_INT 7
7529: ENABLE_MARKED
// end ; end ;
7530: LD_VAR 0 6
7534: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
7535: LD_INT 0
7537: PPUSH
7538: PPUSH
// begin art := artefact_num [ size ] ;
7539: LD_ADDR_VAR 0 3
7543: PUSH
7544: LD_EXP 37
7548: PUSH
7549: LD_VAR 0 2
7553: ARRAY
7554: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7555: LD_ADDR_VAR 0 4
7559: PUSH
7560: LD_VAR 0 3
7564: PUSH
7565: LD_INT 1
7567: MINUS
7568: PUSH
7569: LD_INT 100
7571: MUL
7572: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
7573: LD_VAR 0 4
7577: PUSH
7578: LD_INT 9
7580: PLUS
7581: PPUSH
7582: LD_INT 0
7584: PPUSH
7585: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7589: LD_VAR 0 4
7593: PUSH
7594: LD_INT 13
7596: PLUS
7597: PPUSH
7598: LD_INT 0
7600: PPUSH
7601: CALL_OW 109
// Init_Lab ( art ) ;
7605: LD_VAR 0 3
7609: PPUSH
7610: CALL 9086 0 1
// end ;
7614: PPOPN 4
7616: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
7617: LD_INT 0
7619: PPUSH
7620: PPUSH
7621: PPUSH
// begin art := artefact_num [ size ] ;
7622: LD_ADDR_VAR 0 3
7626: PUSH
7627: LD_EXP 37
7631: PUSH
7632: LD_VAR 0 2
7636: ARRAY
7637: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7638: LD_ADDR_VAR 0 4
7642: PUSH
7643: LD_VAR 0 3
7647: PUSH
7648: LD_INT 1
7650: MINUS
7651: PUSH
7652: LD_INT 100
7654: MUL
7655: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
7656: LD_VAR 0 4
7660: PUSH
7661: LD_INT 9
7663: PLUS
7664: PPUSH
7665: LD_INT 1
7667: PPUSH
7668: CALL_OW 109
// SetTag ( base + 13 , un ) ;
7672: LD_VAR 0 4
7676: PUSH
7677: LD_INT 13
7679: PLUS
7680: PPUSH
7681: LD_VAR 0 1
7685: PPUSH
7686: CALL_OW 109
// if GetTag ( base + 11 ) then
7690: LD_VAR 0 4
7694: PUSH
7695: LD_INT 11
7697: PLUS
7698: PPUSH
7699: CALL_OW 110
7703: IFFALSE 7866
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
7705: LD_ADDR_VAR 0 5
7709: PUSH
7710: LD_VAR 0 4
7714: PUSH
7715: LD_INT 11
7717: PLUS
7718: PPUSH
7719: CALL_OW 110
7723: PPUSH
7724: CALL_OW 255
7728: ST_TO_ADDR
// if GetTag ( base + 12 ) then
7729: LD_VAR 0 4
7733: PUSH
7734: LD_INT 12
7736: PLUS
7737: PPUSH
7738: CALL_OW 110
7742: IFFALSE 7810
// begin ComCancel ( GetTag ( base + 11 ) ) ;
7744: LD_VAR 0 4
7748: PUSH
7749: LD_INT 11
7751: PLUS
7752: PPUSH
7753: CALL_OW 110
7757: PPUSH
7758: CALL_OW 127
// wait ( 5 ) ;
7762: LD_INT 5
7764: PPUSH
7765: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
7769: LD_ADDR_EXP 39
7773: PUSH
7774: LD_EXP 39
7778: PUSH
7779: LD_VAR 0 4
7783: PUSH
7784: LD_INT 11
7786: PLUS
7787: PPUSH
7788: CALL_OW 110
7792: DIFF
7793: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
7794: LD_VAR 0 4
7798: PUSH
7799: LD_INT 12
7801: PLUS
7802: PPUSH
7803: LD_INT 0
7805: PPUSH
7806: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
7810: LD_VAR 0 4
7814: PUSH
7815: LD_VAR 0 5
7819: PUSH
7820: LD_INT 10
7822: MUL
7823: PLUS
7824: PUSH
7825: LD_INT 11
7827: PLUS
7828: PPUSH
7829: CALL_OW 110
7833: NOT
7834: IFFALSE 7850
// DeInit_Lab ( side , art ) ;
7836: LD_VAR 0 5
7840: PPUSH
7841: LD_VAR 0 3
7845: PPUSH
7846: CALL 9622 0 2
// SetTag ( base + 11 , 0 ) ;
7850: LD_VAR 0 4
7854: PUSH
7855: LD_INT 11
7857: PLUS
7858: PPUSH
7859: LD_INT 0
7861: PPUSH
7862: CALL_OW 109
// end ; end ;
7866: PPOPN 5
7868: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
7869: LD_INT 0
7871: PPUSH
7872: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7873: LD_ADDR_VAR 0 3
7877: PUSH
7878: LD_VAR 0 1
7882: PPUSH
7883: CALL_OW 255
7887: PUSH
7888: LD_INT 1
7890: MINUS
7891: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7892: LD_ADDR_VAR 0 2
7896: PUSH
7897: DOUBLE
7898: LD_INT 0
7900: DEC
7901: ST_TO_ADDR
7902: LD_EXP 36
7906: PUSH
7907: LD_INT 1
7909: MINUS
7910: PUSH
7911: FOR_TO
7912: IFFALSE 7954
// if lab = GetTag ( un * 100 + 11 ) then
7914: LD_VAR 0 1
7918: PUSH
7919: LD_VAR 0 2
7923: PUSH
7924: LD_INT 100
7926: MUL
7927: PUSH
7928: LD_INT 11
7930: PLUS
7931: PPUSH
7932: CALL_OW 110
7936: EQUAL
7937: IFFALSE 7952
// Init_Lab ( un + 1 ) ;
7939: LD_VAR 0 2
7943: PUSH
7944: LD_INT 1
7946: PLUS
7947: PPUSH
7948: CALL 9086 0 1
7952: GO 7911
7954: POP
7955: POP
// end ;
7956: PPOPN 3
7958: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
7959: LD_INT 0
7961: PPUSH
7962: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7963: LD_ADDR_VAR 0 4
7967: PUSH
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL_OW 255
7977: PUSH
7978: LD_INT 1
7980: MINUS
7981: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7982: LD_ADDR_VAR 0 3
7986: PUSH
7987: DOUBLE
7988: LD_INT 0
7990: DEC
7991: ST_TO_ADDR
7992: LD_EXP 36
7996: PUSH
7997: LD_INT 1
7999: MINUS
8000: PUSH
8001: FOR_TO
8002: IFFALSE 8120
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8004: LD_VAR 0 3
8008: PUSH
8009: LD_INT 100
8011: MUL
8012: PUSH
8013: LD_INT 11
8015: PLUS
8016: PPUSH
8017: CALL_OW 110
8021: PUSH
8022: LD_VAR 0 1
8026: EQUAL
8027: PUSH
8028: LD_VAR 0 3
8032: PUSH
8033: LD_INT 100
8035: MUL
8036: PUSH
8037: LD_INT 12
8039: PLUS
8040: PPUSH
8041: CALL_OW 110
8045: AND
8046: IFFALSE 8118
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
8048: LD_VAR 0 3
8052: PUSH
8053: LD_INT 100
8055: MUL
8056: PUSH
8057: LD_VAR 0 4
8061: PUSH
8062: LD_INT 10
8064: MUL
8065: PLUS
8066: PUSH
8067: LD_INT 22
8069: PLUS
8070: PPUSH
8071: LD_VAR 0 2
8075: PPUSH
8076: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8080: LD_VAR 0 3
8084: PUSH
8085: LD_INT 100
8087: MUL
8088: PUSH
8089: LD_INT 12
8091: PLUS
8092: PPUSH
8093: LD_INT 0
8095: PPUSH
8096: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8100: LD_ADDR_EXP 39
8104: PUSH
8105: LD_EXP 39
8109: PUSH
8110: LD_VAR 0 1
8114: DIFF
8115: ST_TO_ADDR
// break ;
8116: GO 8120
// end ;
8118: GO 8001
8120: POP
8121: POP
// Update_Artefact ( lab ) ;
8122: LD_VAR 0 1
8126: PPUSH
8127: CALL 9761 0 1
// end ;
8131: PPOPN 4
8133: END
// on SpecResearchComplete ( lab ) do var un , side ;
8134: LD_INT 0
8136: PPUSH
8137: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8138: LD_ADDR_VAR 0 3
8142: PUSH
8143: LD_VAR 0 1
8147: PPUSH
8148: CALL_OW 255
8152: PUSH
8153: LD_INT 1
8155: MINUS
8156: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: DOUBLE
8163: LD_INT 0
8165: DEC
8166: ST_TO_ADDR
8167: LD_EXP 36
8171: PUSH
8172: LD_INT 1
8174: MINUS
8175: PUSH
8176: FOR_TO
8177: IFFALSE 8323
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8179: LD_VAR 0 2
8183: PUSH
8184: LD_INT 100
8186: MUL
8187: PUSH
8188: LD_INT 11
8190: PLUS
8191: PPUSH
8192: CALL_OW 110
8196: PUSH
8197: LD_VAR 0 1
8201: EQUAL
8202: PUSH
8203: LD_VAR 0 2
8207: PUSH
8208: LD_INT 100
8210: MUL
8211: PUSH
8212: LD_INT 12
8214: PLUS
8215: PPUSH
8216: CALL_OW 110
8220: AND
8221: IFFALSE 8321
// begin SetTag ( un * 100 + 12 , false ) ;
8223: LD_VAR 0 2
8227: PUSH
8228: LD_INT 100
8230: MUL
8231: PUSH
8232: LD_INT 12
8234: PLUS
8235: PPUSH
8236: LD_INT 0
8238: PPUSH
8239: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
8243: LD_VAR 0 2
8247: PUSH
8248: LD_INT 100
8250: MUL
8251: PUSH
8252: LD_VAR 0 3
8256: PUSH
8257: LD_INT 10
8259: MUL
8260: PLUS
8261: PUSH
8262: LD_INT 21
8264: PLUS
8265: PPUSH
8266: LD_INT 1
8268: PPUSH
8269: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
8273: LD_VAR 0 2
8277: PUSH
8278: LD_INT 100
8280: MUL
8281: PUSH
8282: LD_VAR 0 3
8286: PUSH
8287: LD_INT 10
8289: MUL
8290: PLUS
8291: PUSH
8292: LD_INT 25
8294: PLUS
8295: PPUSH
8296: LD_VAR 0 1
8300: PPUSH
8301: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8305: LD_ADDR_EXP 39
8309: PUSH
8310: LD_EXP 39
8314: PUSH
8315: LD_VAR 0 1
8319: DIFF
8320: ST_TO_ADDR
// end ;
8321: GO 8176
8323: POP
8324: POP
// Update_Artefact ( lab ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: CALL 9761 0 1
// end ;
8334: PPOPN 3
8336: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
8337: LD_INT 0
8339: PPUSH
8340: PPUSH
8341: PPUSH
8342: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
8343: LD_ADDR_VAR 0 7
8347: PUSH
8348: LD_VAR 0 2
8352: PUSH
8353: LD_INT 1
8355: MINUS
8356: PUSH
8357: LD_INT 3
8359: MOD
8360: PUSH
8361: LD_INT 1
8363: PLUS
8364: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8365: LD_ADDR_VAR 0 8
8369: PUSH
8370: LD_VAR 0 7
8374: PUSH
8375: LD_INT 1
8377: MINUS
8378: PUSH
8379: LD_INT 100
8381: MUL
8382: ST_TO_ADDR
// if number <= 3 then
8383: LD_VAR 0 2
8387: PUSH
8388: LD_INT 3
8390: LESSEQUAL
8391: IFFALSE 8623
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
8393: LD_VAR 0 8
8397: PUSH
8398: LD_INT 11
8400: PLUS
8401: PPUSH
8402: CALL_OW 110
8406: PPUSH
8407: LD_VAR 0 8
8411: PUSH
8412: LD_INT 5
8414: PLUS
8415: PPUSH
8416: CALL_OW 110
8420: PPUSH
8421: LD_INT 1
8423: PPUSH
8424: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
8428: LD_VAR 0 8
8432: PUSH
8433: LD_INT 11
8435: PLUS
8436: PPUSH
8437: CALL_OW 110
8441: PPUSH
8442: LD_VAR 0 8
8446: PUSH
8447: LD_VAR 0 1
8451: PUSH
8452: LD_INT 10
8454: MUL
8455: PLUS
8456: PUSH
8457: LD_INT 12
8459: PLUS
8460: PPUSH
8461: CALL_OW 110
8465: PPUSH
8466: CALL_OW 329
// SetTag ( base + 12 , true ) ;
8470: LD_VAR 0 8
8474: PUSH
8475: LD_INT 12
8477: PLUS
8478: PPUSH
8479: LD_INT 1
8481: PPUSH
8482: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
8486: LD_ADDR_EXP 39
8490: PUSH
8491: LD_EXP 39
8495: PUSH
8496: LD_VAR 0 8
8500: PUSH
8501: LD_INT 11
8503: PLUS
8504: PPUSH
8505: CALL_OW 110
8509: ADD
8510: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8511: LD_ADDR_VAR 0 5
8515: PUSH
8516: DOUBLE
8517: LD_INT 0
8519: DEC
8520: ST_TO_ADDR
8521: LD_EXP 36
8525: PUSH
8526: LD_INT 1
8528: MINUS
8529: PUSH
8530: FOR_TO
8531: IFFALSE 8619
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
8533: LD_VAR 0 8
8537: PUSH
8538: LD_INT 11
8540: PLUS
8541: PPUSH
8542: CALL_OW 110
8546: PUSH
8547: LD_VAR 0 5
8551: PUSH
8552: LD_INT 100
8554: MUL
8555: PUSH
8556: LD_INT 11
8558: PLUS
8559: PPUSH
8560: CALL_OW 110
8564: PUSH
8565: LD_VAR 0 5
8569: PUSH
8570: LD_INT 100
8572: MUL
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_INT 10
8581: MUL
8582: PLUS
8583: PUSH
8584: LD_INT 15
8586: PLUS
8587: PPUSH
8588: CALL_OW 110
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: IN
8597: IFFALSE 8617
// DeInit_Lab ( side , un + 1 ) ;
8599: LD_VAR 0 1
8603: PPUSH
8604: LD_VAR 0 5
8608: PUSH
8609: LD_INT 1
8611: PLUS
8612: PPUSH
8613: CALL 9622 0 2
8617: GO 8530
8619: POP
8620: POP
// end else
8621: GO 8797
// begin succes := false ;
8623: LD_ADDR_VAR 0 6
8627: PUSH
8628: LD_INT 0
8630: ST_TO_ADDR
// case art of 1 :
8631: LD_VAR 0 7
8635: PUSH
8636: LD_INT 1
8638: DOUBLE
8639: EQUAL
8640: IFTRUE 8644
8642: GO 8672
8644: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
8645: LD_ADDR_VAR 0 6
8649: PUSH
8650: LD_VAR 0 1
8654: PPUSH
8655: LD_VAR 0 3
8659: PPUSH
8660: LD_VAR 0 4
8664: PPUSH
8665: CALL 10194 0 3
8669: ST_TO_ADDR
8670: GO 8740
8672: LD_INT 2
8674: DOUBLE
8675: EQUAL
8676: IFTRUE 8680
8678: GO 8703
8680: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
8681: LD_ADDR_VAR 0 6
8685: PUSH
8686: LD_VAR 0 1
8690: PPUSH
8691: LD_VAR 0 3
8695: PPUSH
8696: CALL 10432 0 2
8700: ST_TO_ADDR
8701: GO 8740
8703: LD_INT 3
8705: DOUBLE
8706: EQUAL
8707: IFTRUE 8711
8709: GO 8739
8711: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
8712: LD_ADDR_VAR 0 6
8716: PUSH
8717: LD_VAR 0 1
8721: PPUSH
8722: LD_VAR 0 3
8726: PPUSH
8727: LD_VAR 0 4
8731: PPUSH
8732: CALL 10828 0 3
8736: ST_TO_ADDR
8737: GO 8740
8739: POP
// if succes then
8740: LD_VAR 0 6
8744: IFFALSE 8797
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
8746: LD_VAR 0 8
8750: PUSH
8751: LD_VAR 0 1
8755: PUSH
8756: LD_INT 10
8758: MUL
8759: PLUS
8760: PUSH
8761: LD_INT 13
8763: PLUS
8764: PPUSH
8765: LD_VAR 0 8
8769: PUSH
8770: LD_INT 7
8772: PLUS
8773: PPUSH
8774: CALL_OW 110
8778: PPUSH
8779: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
8783: LD_VAR 0 1
8787: PPUSH
8788: LD_VAR 0 7
8792: PPUSH
8793: CALL 8800 0 2
// end ; end ; end ;
8797: PPOPN 8
8799: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
8800: LD_INT 0
8802: PPUSH
8803: PPUSH
8804: PPUSH
// base := ( art - 1 ) * 100 ;
8805: LD_ADDR_VAR 0 4
8809: PUSH
8810: LD_VAR 0 2
8814: PUSH
8815: LD_INT 1
8817: MINUS
8818: PUSH
8819: LD_INT 100
8821: MUL
8822: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8823: LD_ADDR_VAR 0 5
8827: PUSH
8828: LD_VAR 0 4
8832: PUSH
8833: LD_VAR 0 1
8837: PUSH
8838: LD_INT 10
8840: MUL
8841: PLUS
8842: PUSH
8843: LD_INT 15
8845: PLUS
8846: PPUSH
8847: CALL_OW 110
8851: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
8852: LD_VAR 0 5
8856: PUSH
8857: LD_VAR 0 5
8861: PUSH
8862: LD_EXP 39
8866: IN
8867: NOT
8868: AND
8869: IFFALSE 8927
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
8871: LD_VAR 0 1
8875: PPUSH
8876: LD_VAR 0 4
8880: PUSH
8881: LD_INT 1
8883: PLUS
8884: PUSH
8885: LD_VAR 0 4
8889: PUSH
8890: LD_VAR 0 1
8894: PUSH
8895: LD_INT 10
8897: MUL
8898: PLUS
8899: PUSH
8900: LD_INT 11
8902: PLUS
8903: PPUSH
8904: CALL_OW 110
8908: PLUS
8909: PPUSH
8910: CALL_OW 110
8914: PPUSH
8915: LD_INT 1
8917: PPUSH
8918: LD_VAR 0 5
8922: PPUSH
8923: CALL_OW 468
// end ;
8927: LD_VAR 0 3
8931: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
8932: LD_INT 0
8934: PPUSH
8935: PPUSH
8936: PPUSH
// base := ( art - 1 ) * 100 ;
8937: LD_ADDR_VAR 0 4
8941: PUSH
8942: LD_VAR 0 2
8946: PUSH
8947: LD_INT 1
8949: MINUS
8950: PUSH
8951: LD_INT 100
8953: MUL
8954: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8955: LD_ADDR_VAR 0 5
8959: PUSH
8960: LD_VAR 0 4
8964: PUSH
8965: LD_VAR 0 1
8969: PUSH
8970: LD_INT 10
8972: MUL
8973: PLUS
8974: PUSH
8975: LD_INT 15
8977: PLUS
8978: PPUSH
8979: CALL_OW 110
8983: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
8984: LD_VAR 0 5
8988: PUSH
8989: LD_VAR 0 5
8993: PUSH
8994: LD_EXP 39
8998: IN
8999: NOT
9000: AND
9001: PUSH
9002: LD_VAR 0 5
9006: PPUSH
9007: CALL_OW 313
9011: AND
9012: IFFALSE 9081
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
9014: LD_VAR 0 1
9018: PPUSH
9019: LD_VAR 0 4
9023: PUSH
9024: LD_INT 1
9026: PLUS
9027: PUSH
9028: LD_VAR 0 4
9032: PUSH
9033: LD_VAR 0 1
9037: PUSH
9038: LD_INT 10
9040: MUL
9041: PLUS
9042: PUSH
9043: LD_INT 11
9045: PLUS
9046: PPUSH
9047: CALL_OW 110
9051: PLUS
9052: PPUSH
9053: CALL_OW 110
9057: PPUSH
9058: LD_VAR 0 4
9062: PUSH
9063: LD_INT 3
9065: PLUS
9066: PPUSH
9067: CALL_OW 110
9071: PPUSH
9072: LD_VAR 0 5
9076: PPUSH
9077: CALL_OW 468
// end ;
9081: LD_VAR 0 3
9085: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9086: LD_INT 0
9088: PPUSH
9089: PPUSH
9090: PPUSH
9091: PPUSH
9092: PPUSH
9093: PPUSH
9094: PPUSH
9095: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9096: LD_ADDR_VAR 0 8
9100: PUSH
9101: LD_EXP 38
9105: PUSH
9106: LD_VAR 0 1
9110: ARRAY
9111: PPUSH
9112: CALL_OW 469
9116: ST_TO_ADDR
// if not art_hex then
9117: LD_VAR 0 8
9121: NOT
9122: IFFALSE 9126
// exit ;
9124: GO 9617
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9126: LD_ADDR_VAR 0 3
9130: PUSH
9131: LD_INT 2
9133: PUSH
9134: LD_INT 30
9136: PUSH
9137: LD_INT 6
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 30
9146: PUSH
9147: LD_INT 7
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PUSH
9154: LD_INT 30
9156: PUSH
9157: LD_INT 8
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: PUSH
9170: EMPTY
9171: LIST
9172: PPUSH
9173: CALL_OW 69
9177: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9178: LD_ADDR_VAR 0 9
9182: PUSH
9183: LD_VAR 0 3
9187: PPUSH
9188: LD_VAR 0 8
9192: PUSH
9193: LD_INT 1
9195: ARRAY
9196: PPUSH
9197: LD_VAR 0 8
9201: PUSH
9202: LD_INT 2
9204: ARRAY
9205: PPUSH
9206: CALL_OW 73
9210: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9211: LD_ADDR_VAR 0 6
9215: PUSH
9216: LD_VAR 0 9
9220: PPUSH
9221: LD_VAR 0 8
9225: PUSH
9226: LD_INT 1
9228: ARRAY
9229: PPUSH
9230: LD_VAR 0 8
9234: PUSH
9235: LD_INT 2
9237: ARRAY
9238: PPUSH
9239: CALL_OW 297
9243: ST_TO_ADDR
// if dist < 9 then
9244: LD_VAR 0 6
9248: PUSH
9249: LD_INT 9
9251: LESS
9252: IFFALSE 9617
// begin side := GetSide ( nearest_lab ) ;
9254: LD_ADDR_VAR 0 4
9258: PUSH
9259: LD_VAR 0 9
9263: PPUSH
9264: CALL_OW 255
9268: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
9269: LD_VAR 0 4
9273: PPUSH
9274: LD_VAR 0 1
9278: PPUSH
9279: CALL 9622 0 2
// base := ( art - 1 ) * 100 ;
9283: LD_ADDR_VAR 0 5
9287: PUSH
9288: LD_VAR 0 1
9292: PUSH
9293: LD_INT 1
9295: MINUS
9296: PUSH
9297: LD_INT 100
9299: MUL
9300: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
9301: LD_INT 24
9303: PPUSH
9304: LD_VAR 0 4
9308: PPUSH
9309: CALL_OW 321
9313: PUSH
9314: LD_INT 2
9316: EQUAL
9317: PUSH
9318: LD_VAR 0 9
9322: PPUSH
9323: CALL_OW 313
9327: AND
9328: IFFALSE 9520
// begin if GetTag ( base + side * 10 + 11 ) then
9330: LD_VAR 0 5
9334: PUSH
9335: LD_VAR 0 4
9339: PUSH
9340: LD_INT 10
9342: MUL
9343: PLUS
9344: PUSH
9345: LD_INT 11
9347: PLUS
9348: PPUSH
9349: CALL_OW 110
9353: IFFALSE 9510
// begin if not GetTag ( base + side * 10 + 13 ) then
9355: LD_VAR 0 5
9359: PUSH
9360: LD_VAR 0 4
9364: PUSH
9365: LD_INT 10
9367: MUL
9368: PLUS
9369: PUSH
9370: LD_INT 13
9372: PLUS
9373: PPUSH
9374: CALL_OW 110
9378: NOT
9379: IFFALSE 9402
// state := GetTag ( base + 03 ) else
9381: LD_ADDR_VAR 0 7
9385: PUSH
9386: LD_VAR 0 5
9390: PUSH
9391: LD_INT 3
9393: PLUS
9394: PPUSH
9395: CALL_OW 110
9399: ST_TO_ADDR
9400: GO 9410
// state := art_gray ;
9402: LD_ADDR_VAR 0 7
9406: PUSH
9407: LD_INT 1
9409: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
9410: LD_VAR 0 5
9414: PUSH
9415: LD_VAR 0 4
9419: PUSH
9420: LD_INT 10
9422: MUL
9423: PLUS
9424: PUSH
9425: LD_INT 15
9427: PLUS
9428: PPUSH
9429: CALL_OW 110
9433: PUSH
9434: LD_VAR 0 5
9438: PUSH
9439: LD_VAR 0 4
9443: PUSH
9444: LD_INT 10
9446: MUL
9447: PLUS
9448: PUSH
9449: LD_INT 15
9451: PLUS
9452: PPUSH
9453: CALL_OW 110
9457: PUSH
9458: LD_VAR 0 9
9462: NONEQUAL
9463: AND
9464: IFFALSE 9480
// DeInit_Lab ( side , art ) ;
9466: LD_VAR 0 4
9470: PPUSH
9471: LD_VAR 0 1
9475: PPUSH
9476: CALL 9622 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
9480: LD_VAR 0 5
9484: PUSH
9485: LD_VAR 0 4
9489: PUSH
9490: LD_INT 10
9492: MUL
9493: PLUS
9494: PUSH
9495: LD_INT 15
9497: PLUS
9498: PPUSH
9499: LD_VAR 0 9
9503: PPUSH
9504: CALL_OW 109
// end else
9508: GO 9518
// state := art_instant ;
9510: LD_ADDR_VAR 0 7
9514: PUSH
9515: LD_INT 2
9517: ST_TO_ADDR
// end else
9518: GO 9528
// state := art_gray ;
9520: LD_ADDR_VAR 0 7
9524: PUSH
9525: LD_INT 1
9527: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
9528: LD_VAR 0 5
9532: PUSH
9533: LD_INT 11
9535: PLUS
9536: PPUSH
9537: LD_VAR 0 9
9541: PPUSH
9542: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
9546: LD_VAR 0 9
9550: PUSH
9551: LD_EXP 39
9555: IN
9556: NOT
9557: IFFALSE 9617
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
9559: LD_VAR 0 4
9563: PPUSH
9564: LD_VAR 0 5
9568: PUSH
9569: LD_INT 1
9571: PLUS
9572: PUSH
9573: LD_VAR 0 5
9577: PUSH
9578: LD_VAR 0 4
9582: PUSH
9583: LD_INT 10
9585: MUL
9586: PLUS
9587: PUSH
9588: LD_INT 11
9590: PLUS
9591: PPUSH
9592: CALL_OW 110
9596: PLUS
9597: PPUSH
9598: CALL_OW 110
9602: PPUSH
9603: LD_VAR 0 7
9607: PPUSH
9608: LD_VAR 0 9
9612: PPUSH
9613: CALL_OW 468
// end ; end ;
9617: LD_VAR 0 2
9621: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
9622: LD_INT 0
9624: PPUSH
9625: PPUSH
9626: PPUSH
// base := ( art - 1 ) * 100 ;
9627: LD_ADDR_VAR 0 4
9631: PUSH
9632: LD_VAR 0 2
9636: PUSH
9637: LD_INT 1
9639: MINUS
9640: PUSH
9641: LD_INT 100
9643: MUL
9644: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9645: LD_ADDR_VAR 0 5
9649: PUSH
9650: LD_VAR 0 4
9654: PUSH
9655: LD_VAR 0 1
9659: PUSH
9660: LD_INT 10
9662: MUL
9663: PLUS
9664: PUSH
9665: LD_INT 15
9667: PLUS
9668: PPUSH
9669: CALL_OW 110
9673: ST_TO_ADDR
// if not lab then
9674: LD_VAR 0 5
9678: NOT
9679: IFFALSE 9700
// lab := GetTag ( base + 11 ) ;
9681: LD_ADDR_VAR 0 5
9685: PUSH
9686: LD_VAR 0 4
9690: PUSH
9691: LD_INT 11
9693: PLUS
9694: PPUSH
9695: CALL_OW 110
9699: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
9700: LD_VAR 0 1
9704: PPUSH
9705: LD_VAR 0 4
9709: PUSH
9710: LD_INT 1
9712: PLUS
9713: PUSH
9714: LD_VAR 0 4
9718: PUSH
9719: LD_VAR 0 1
9723: PUSH
9724: LD_INT 10
9726: MUL
9727: PLUS
9728: PUSH
9729: LD_INT 11
9731: PLUS
9732: PPUSH
9733: CALL_OW 110
9737: PLUS
9738: PPUSH
9739: CALL_OW 110
9743: PPUSH
9744: LD_INT 0
9746: PPUSH
9747: LD_VAR 0 5
9751: PPUSH
9752: CALL_OW 468
// end ;
9756: LD_VAR 0 3
9760: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
9761: LD_INT 0
9763: PPUSH
9764: PPUSH
9765: PPUSH
9766: PPUSH
// side := GetSide ( lab ) ;
9767: LD_ADDR_VAR 0 4
9771: PUSH
9772: LD_VAR 0 1
9776: PPUSH
9777: CALL_OW 255
9781: ST_TO_ADDR
// for art = 1 to artefact_number do
9782: LD_ADDR_VAR 0 3
9786: PUSH
9787: DOUBLE
9788: LD_INT 1
9790: DEC
9791: ST_TO_ADDR
9792: LD_EXP 36
9796: PUSH
9797: FOR_TO
9798: IFFALSE 9954
// begin base := ( art - 1 ) * 100 ;
9800: LD_ADDR_VAR 0 5
9804: PUSH
9805: LD_VAR 0 3
9809: PUSH
9810: LD_INT 1
9812: MINUS
9813: PUSH
9814: LD_INT 100
9816: MUL
9817: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
9818: LD_VAR 0 5
9822: PUSH
9823: LD_INT 11
9825: PLUS
9826: PPUSH
9827: CALL_OW 110
9831: PUSH
9832: LD_VAR 0 1
9836: EQUAL
9837: IFFALSE 9850
// Init_Lab ( art ) else
9839: LD_VAR 0 3
9843: PPUSH
9844: CALL 9086 0 1
9848: GO 9952
// begin if lab = GetTag ( base + side * 10 + 15 ) then
9850: LD_VAR 0 1
9854: PUSH
9855: LD_VAR 0 5
9859: PUSH
9860: LD_VAR 0 4
9864: PUSH
9865: LD_INT 10
9867: MUL
9868: PLUS
9869: PUSH
9870: LD_INT 15
9872: PLUS
9873: PPUSH
9874: CALL_OW 110
9878: EQUAL
9879: IFFALSE 9952
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
9881: LD_VAR 0 5
9885: PUSH
9886: LD_VAR 0 4
9890: PUSH
9891: LD_INT 10
9893: MUL
9894: PLUS
9895: PUSH
9896: LD_INT 13
9898: PLUS
9899: PPUSH
9900: CALL_OW 110
9904: PUSH
9905: LD_INT 0
9907: GREATER
9908: PUSH
9909: LD_VAR 0 1
9913: PPUSH
9914: CALL_OW 313
9918: NOT
9919: OR
9920: IFFALSE 9938
// Shadow_Artefact ( side , art ) else
9922: LD_VAR 0 4
9926: PPUSH
9927: LD_VAR 0 3
9931: PPUSH
9932: CALL 8800 0 2
9936: GO 9952
// Highlight_Artefact ( side , art ) ;
9938: LD_VAR 0 4
9942: PPUSH
9943: LD_VAR 0 3
9947: PPUSH
9948: CALL 8932 0 2
// end ; end ; end ;
9952: GO 9797
9954: POP
9955: POP
// end ; end_of_file
9956: LD_VAR 0 2
9960: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
9961: LD_INT 10
9963: PPUSH
9964: CALL_OW 67
// if not IsBusy ( lab ) then
9968: LD_VAR 0 2
9972: PPUSH
9973: CALL_OW 315
9977: NOT
9978: IFFALSE 10005
// begin labs_in_use := labs_in_use diff lab ;
9980: LD_ADDR_EXP 39
9984: PUSH
9985: LD_EXP 39
9989: PUSH
9990: LD_VAR 0 2
9994: DIFF
9995: ST_TO_ADDR
// Update_Artefact ( lab ) ;
9996: LD_VAR 0 2
10000: PPUSH
10001: CALL 9761 0 1
// end ; end ;
10005: PPOPN 2
10007: END
// on ResearchStarted ( tech , lab ) do var un , side ;
10008: LD_INT 0
10010: PPUSH
10011: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
10012: LD_ADDR_EXP 39
10016: PUSH
10017: LD_EXP 39
10021: PUSH
10022: LD_VAR 0 2
10026: ADD
10027: ST_TO_ADDR
// side := GetSide ( lab ) ;
10028: LD_ADDR_VAR 0 4
10032: PUSH
10033: LD_VAR 0 2
10037: PPUSH
10038: CALL_OW 255
10042: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
10043: LD_ADDR_VAR 0 3
10047: PUSH
10048: DOUBLE
10049: LD_INT 0
10051: DEC
10052: ST_TO_ADDR
10053: LD_EXP 36
10057: PUSH
10058: LD_INT 1
10060: MINUS
10061: PUSH
10062: FOR_TO
10063: IFFALSE 10142
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10065: LD_VAR 0 2
10069: PUSH
10070: LD_VAR 0 3
10074: PUSH
10075: LD_INT 100
10077: MUL
10078: PUSH
10079: LD_INT 11
10081: PLUS
10082: PPUSH
10083: CALL_OW 110
10087: PUSH
10088: LD_VAR 0 3
10092: PUSH
10093: LD_INT 100
10095: MUL
10096: PUSH
10097: LD_VAR 0 4
10101: PUSH
10102: LD_INT 10
10104: MUL
10105: PLUS
10106: PUSH
10107: LD_INT 15
10109: PLUS
10110: PPUSH
10111: CALL_OW 110
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: IN
10120: IFFALSE 10140
// DeInit_Lab ( side , un + 1 ) ;
10122: LD_VAR 0 4
10126: PPUSH
10127: LD_VAR 0 3
10131: PUSH
10132: LD_INT 1
10134: PLUS
10135: PPUSH
10136: CALL 9622 0 2
10140: GO 10062
10142: POP
10143: POP
// end ;
10144: PPOPN 4
10146: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10147: LD_INT 10
10149: PPUSH
10150: CALL_OW 67
// if not IsBusy ( lab ) then
10154: LD_VAR 0 2
10158: PPUSH
10159: CALL_OW 315
10163: NOT
10164: IFFALSE 10191
// begin labs_in_use := labs_in_use diff lab ;
10166: LD_ADDR_EXP 39
10170: PUSH
10171: LD_EXP 39
10175: PUSH
10176: LD_VAR 0 2
10180: DIFF
10181: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10182: LD_VAR 0 2
10186: PPUSH
10187: CALL 9761 0 1
// end ; end ; end_of_file
10191: PPOPN 2
10193: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10194: LD_INT 0
10196: PPUSH
10197: PPUSH
10198: PPUSH
// vysledek := true ;
10199: LD_ADDR_VAR 0 5
10203: PUSH
10204: LD_INT 1
10206: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
10207: LD_ADDR_VAR 0 6
10211: PUSH
10212: LD_VAR 0 1
10216: PUSH
10217: LD_INT 10
10219: MUL
10220: PUSH
10221: LD_INT 15
10223: PLUS
10224: PPUSH
10225: CALL_OW 110
10229: PPUSH
10230: CALL_OW 274
10234: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
10235: LD_VAR 0 6
10239: PUSH
10240: LD_VAR 0 6
10244: PPUSH
10245: CALL_OW 279
10249: PUSH
10250: LD_INT 3
10252: ARRAY
10253: PUSH
10254: LD_INT 6
10256: PPUSH
10257: CALL_OW 110
10261: GREATEREQUAL
10262: AND
10263: IFFALSE 10353
// begin PlaceSeeing ( x , y , side , - 15 ) ;
10265: LD_VAR 0 2
10269: PPUSH
10270: LD_VAR 0 3
10274: PPUSH
10275: LD_VAR 0 1
10279: PPUSH
10280: LD_INT 15
10282: NEG
10283: PPUSH
10284: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
10288: LD_VAR 0 6
10292: PPUSH
10293: LD_INT 3
10295: PPUSH
10296: LD_VAR 0 6
10300: PPUSH
10301: CALL_OW 279
10305: PUSH
10306: LD_INT 3
10308: ARRAY
10309: PUSH
10310: LD_INT 6
10312: PPUSH
10313: CALL_OW 110
10317: MINUS
10318: PPUSH
10319: CALL_OW 277
// view_data := [ x , y , side ] ;
10323: LD_ADDR_LOC 16
10327: PUSH
10328: LD_VAR 0 2
10332: PUSH
10333: LD_VAR 0 3
10337: PUSH
10338: LD_VAR 0 1
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: LIST
10347: ST_TO_ADDR
// enable ( 1 ) ;
10348: LD_INT 1
10350: ENABLE_MARKED
// end else
10351: GO 10361
// vysledek := false ;
10353: LD_ADDR_VAR 0 5
10357: PUSH
10358: LD_INT 0
10360: ST_TO_ADDR
// result := vysledek ;
10361: LD_ADDR_VAR 0 4
10365: PUSH
10366: LD_VAR 0 5
10370: ST_TO_ADDR
// end ;
10371: LD_VAR 0 4
10375: RET
// every 0 0$2 trigger view_data marked 1 do
10376: LD_LOC 16
10380: IFFALSE 10431
10382: GO 10384
10384: DISABLE
// begin wait ( 0 0$30 ) ;
10385: LD_INT 1050
10387: PPUSH
10388: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
10392: LD_LOC 16
10396: PUSH
10397: LD_INT 1
10399: ARRAY
10400: PPUSH
10401: LD_LOC 16
10405: PUSH
10406: LD_INT 2
10408: ARRAY
10409: PPUSH
10410: LD_LOC 16
10414: PUSH
10415: LD_INT 3
10417: ARRAY
10418: PPUSH
10419: CALL_OW 331
// view_data := 0 ;
10423: LD_ADDR_LOC 16
10427: PUSH
10428: LD_INT 0
10430: ST_TO_ADDR
// end ;
10431: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
10432: LD_INT 0
10434: PPUSH
10435: PPUSH
10436: PPUSH
10437: PPUSH
10438: PPUSH
10439: PPUSH
10440: PPUSH
10441: PPUSH
// vysledek := true ;
10442: LD_ADDR_VAR 0 4
10446: PUSH
10447: LD_INT 1
10449: ST_TO_ADDR
// it_can := false ;
10450: LD_ADDR_VAR 0 8
10454: PUSH
10455: LD_INT 0
10457: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
10458: LD_ADDR_VAR 0 9
10462: PUSH
10463: LD_INT 30
10465: PUSH
10466: LD_INT 28
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
10473: LD_ADDR_VAR 0 10
10477: PUSH
10478: LD_INT 8
10480: PUSH
10481: LD_INT 48
10483: PUSH
10484: LD_INT 29
10486: PUSH
10487: LD_INT 49
10489: PUSH
10490: LD_INT 10
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
10500: LD_ADDR_VAR 0 7
10504: PUSH
10505: LD_VAR 0 2
10509: PPUSH
10510: CALL_OW 247
10514: PUSH
10515: LD_INT 3
10517: EQUAL
10518: PUSH
10519: LD_VAR 0 2
10523: PPUSH
10524: CALL_OW 266
10528: PUSH
10529: LD_VAR 0 9
10533: IN
10534: PUSH
10535: LD_VAR 0 2
10539: PPUSH
10540: CALL_OW 269
10544: PUSH
10545: LD_VAR 0 10
10549: IN
10550: OR
10551: AND
10552: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
10553: LD_ADDR_VAR 0 6
10557: PUSH
10558: LD_VAR 0 2
10562: PPUSH
10563: CALL_OW 247
10567: PUSH
10568: LD_INT 2
10570: EQUAL
10571: PUSH
10572: LD_VAR 0 2
10576: PPUSH
10577: CALL_OW 264
10581: PUSH
10582: LD_VAR 0 10
10586: IN
10587: PUSH
10588: LD_VAR 0 2
10592: PPUSH
10593: CALL_OW 262
10597: PUSH
10598: LD_INT 3
10600: EQUAL
10601: OR
10602: AND
10603: ST_TO_ADDR
// case def_artefact_two of 1 :
10604: LD_EXP 2
10608: PUSH
10609: LD_INT 1
10611: DOUBLE
10612: EQUAL
10613: IFTRUE 10617
10615: GO 10634
10617: POP
// if b_can then
10618: LD_VAR 0 7
10622: IFFALSE 10632
// it_can := true ; 2 :
10624: LD_ADDR_VAR 0 8
10628: PUSH
10629: LD_INT 1
10631: ST_TO_ADDR
10632: GO 10691
10634: LD_INT 2
10636: DOUBLE
10637: EQUAL
10638: IFTRUE 10642
10640: GO 10659
10642: POP
// if v_can then
10643: LD_VAR 0 6
10647: IFFALSE 10657
// it_can := true ; 3 :
10649: LD_ADDR_VAR 0 8
10653: PUSH
10654: LD_INT 1
10656: ST_TO_ADDR
10657: GO 10691
10659: LD_INT 3
10661: DOUBLE
10662: EQUAL
10663: IFTRUE 10667
10665: GO 10690
10667: POP
// if b_can or v_can then
10668: LD_VAR 0 7
10672: PUSH
10673: LD_VAR 0 6
10677: OR
10678: IFFALSE 10688
// it_can := true ; end ;
10680: LD_ADDR_VAR 0 8
10684: PUSH
10685: LD_INT 1
10687: ST_TO_ADDR
10688: GO 10691
10690: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
10691: LD_ADDR_VAR 0 5
10695: PUSH
10696: LD_INT 100
10698: PUSH
10699: LD_VAR 0 1
10703: PUSH
10704: LD_INT 10
10706: MUL
10707: PLUS
10708: PUSH
10709: LD_INT 15
10711: PLUS
10712: PPUSH
10713: CALL_OW 110
10717: PPUSH
10718: CALL_OW 274
10722: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
10723: LD_VAR 0 5
10727: PUSH
10728: LD_VAR 0 8
10732: AND
10733: PUSH
10734: LD_VAR 0 5
10738: PPUSH
10739: CALL_OW 279
10743: PUSH
10744: LD_INT 3
10746: ARRAY
10747: PUSH
10748: LD_INT 106
10750: PPUSH
10751: CALL_OW 110
10755: GREATEREQUAL
10756: AND
10757: IFFALSE 10805
// begin KillUnit ( un ) ;
10759: LD_VAR 0 2
10763: PPUSH
10764: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
10768: LD_VAR 0 5
10772: PPUSH
10773: LD_INT 3
10775: PPUSH
10776: LD_VAR 0 5
10780: PPUSH
10781: CALL_OW 279
10785: PUSH
10786: LD_INT 3
10788: ARRAY
10789: PUSH
10790: LD_INT 106
10792: PPUSH
10793: CALL_OW 110
10797: MINUS
10798: PPUSH
10799: CALL_OW 277
// end else
10803: GO 10813
// vysledek := false ;
10805: LD_ADDR_VAR 0 4
10809: PUSH
10810: LD_INT 0
10812: ST_TO_ADDR
// result := vysledek ;
10813: LD_ADDR_VAR 0 3
10817: PUSH
10818: LD_VAR 0 4
10822: ST_TO_ADDR
// end ;
10823: LD_VAR 0 3
10827: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
10828: LD_INT 0
10830: PPUSH
10831: PPUSH
10832: PPUSH
10833: PPUSH
// vysledek := true ;
10834: LD_ADDR_VAR 0 5
10838: PUSH
10839: LD_INT 1
10841: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
10842: LD_ADDR_VAR 0 7
10846: PUSH
10847: LD_INT 200
10849: PUSH
10850: LD_VAR 0 1
10854: PUSH
10855: LD_INT 10
10857: MUL
10858: PLUS
10859: PUSH
10860: LD_INT 15
10862: PLUS
10863: PPUSH
10864: CALL_OW 110
10868: PPUSH
10869: CALL_OW 274
10873: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
10874: LD_VAR 0 7
10878: PUSH
10879: LD_VAR 0 7
10883: PPUSH
10884: CALL_OW 279
10888: PUSH
10889: LD_INT 3
10891: ARRAY
10892: PUSH
10893: LD_INT 206
10895: PPUSH
10896: CALL_OW 110
10900: GREATEREQUAL
10901: AND
10902: IFFALSE 10958
// begin ArtContamination ( p1 , p2 , 15 ) ;
10904: LD_VAR 0 2
10908: PPUSH
10909: LD_VAR 0 3
10913: PPUSH
10914: LD_INT 15
10916: PPUSH
10917: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
10921: LD_VAR 0 7
10925: PPUSH
10926: LD_INT 3
10928: PPUSH
10929: LD_VAR 0 7
10933: PPUSH
10934: CALL_OW 279
10938: PUSH
10939: LD_INT 3
10941: ARRAY
10942: PUSH
10943: LD_INT 206
10945: PPUSH
10946: CALL_OW 110
10950: MINUS
10951: PPUSH
10952: CALL_OW 277
// end else
10956: GO 10966
// vysledek := false ;
10958: LD_ADDR_VAR 0 5
10962: PUSH
10963: LD_INT 0
10965: ST_TO_ADDR
// result := vysledek ;
10966: LD_ADDR_VAR 0 4
10970: PUSH
10971: LD_VAR 0 5
10975: ST_TO_ADDR
// end ;
10976: LD_VAR 0 4
10980: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
10981: GO 10983
10983: DISABLE
10984: LD_INT 0
10986: PPUSH
10987: PPUSH
10988: PPUSH
// begin for art = 0 to artefact_number do
10989: LD_ADDR_VAR 0 1
10993: PUSH
10994: DOUBLE
10995: LD_INT 0
10997: DEC
10998: ST_TO_ADDR
10999: LD_EXP 36
11003: PUSH
11004: FOR_TO
11005: IFFALSE 11139
// for side = 1 to Side_Positions do
11007: LD_ADDR_VAR 0 2
11011: PUSH
11012: DOUBLE
11013: LD_INT 1
11015: DEC
11016: ST_TO_ADDR
11017: LD_EXP 23
11021: PUSH
11022: FOR_TO
11023: IFFALSE 11135
// begin recharge := art * 100 + side * 10 + 13 ;
11025: LD_ADDR_VAR 0 3
11029: PUSH
11030: LD_VAR 0 1
11034: PUSH
11035: LD_INT 100
11037: MUL
11038: PUSH
11039: LD_VAR 0 2
11043: PUSH
11044: LD_INT 10
11046: MUL
11047: PLUS
11048: PUSH
11049: LD_INT 13
11051: PLUS
11052: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
11053: LD_EXP 23
11057: PUSH
11058: LD_VAR 0 2
11062: ARRAY
11063: PUSH
11064: LD_VAR 0 3
11068: PPUSH
11069: CALL_OW 110
11073: PUSH
11074: LD_INT 0
11076: GREATER
11077: AND
11078: IFFALSE 11133
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11080: LD_VAR 0 3
11084: PPUSH
11085: LD_VAR 0 3
11089: PPUSH
11090: CALL_OW 110
11094: PUSH
11095: LD_INT 1
11097: MINUS
11098: PPUSH
11099: CALL_OW 109
// if not GetTag ( recharge ) then
11103: LD_VAR 0 3
11107: PPUSH
11108: CALL_OW 110
11112: NOT
11113: IFFALSE 11133
// Highlight_Artefact ( side , art + 1 ) ;
11115: LD_VAR 0 2
11119: PPUSH
11120: LD_VAR 0 1
11124: PUSH
11125: LD_INT 1
11127: PLUS
11128: PPUSH
11129: CALL 8932 0 2
// end ; end ;
11133: GO 11022
11135: POP
11136: POP
11137: GO 11004
11139: POP
11140: POP
// enable ;
11141: ENABLE
// end ; end_of_file
11142: PPOPN 3
11144: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11145: LD_INT 0
11147: PPUSH
11148: PPUSH
11149: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11150: LD_INT 18
11152: PPUSH
11153: LD_VAR 0 1
11157: PUSH
11158: LD_INT 1
11160: ARRAY
11161: PPUSH
11162: LD_VAR 0 1
11166: PUSH
11167: LD_INT 2
11169: ARRAY
11170: PPUSH
11171: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11175: LD_VAR 0 1
11179: PUSH
11180: LD_INT 1
11182: ARRAY
11183: PPUSH
11184: LD_VAR 0 1
11188: PUSH
11189: LD_INT 2
11191: ARRAY
11192: PPUSH
11193: CALL_OW 494
// Wait ( 30 ) ;
11197: LD_INT 30
11199: PPUSH
11200: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
11204: LD_INT 18
11206: PPUSH
11207: LD_INT 4
11209: PPUSH
11210: CALL_OW 286
// base := ( art - 1 ) * 100 ;
11214: LD_ADDR_VAR 0 4
11218: PUSH
11219: LD_VAR 0 2
11223: PUSH
11224: LD_INT 1
11226: MINUS
11227: PUSH
11228: LD_INT 100
11230: MUL
11231: ST_TO_ADDR
// if GetTag ( base + 11 ) then
11232: LD_VAR 0 4
11236: PUSH
11237: LD_INT 11
11239: PLUS
11240: PPUSH
11241: CALL_OW 110
11245: IFFALSE 11383
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
11247: LD_ADDR_VAR 0 5
11251: PUSH
11252: LD_VAR 0 4
11256: PUSH
11257: LD_INT 11
11259: PLUS
11260: PPUSH
11261: CALL_OW 110
11265: PPUSH
11266: CALL_OW 255
11270: ST_TO_ADDR
// if GetTag ( base + 12 ) then
11271: LD_VAR 0 4
11275: PUSH
11276: LD_INT 12
11278: PLUS
11279: PPUSH
11280: CALL_OW 110
11284: IFFALSE 11327
// begin ComCancel ( GetTag ( base + 11 ) ) ;
11286: LD_VAR 0 4
11290: PUSH
11291: LD_INT 11
11293: PLUS
11294: PPUSH
11295: CALL_OW 110
11299: PPUSH
11300: CALL_OW 127
// Wait ( 10 ) ;
11304: LD_INT 10
11306: PPUSH
11307: CALL_OW 67
// SetTag ( base + 12 , false ) ;
11311: LD_VAR 0 4
11315: PUSH
11316: LD_INT 12
11318: PLUS
11319: PPUSH
11320: LD_INT 0
11322: PPUSH
11323: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
11327: LD_VAR 0 4
11331: PUSH
11332: LD_VAR 0 5
11336: PUSH
11337: LD_INT 10
11339: MUL
11340: PLUS
11341: PUSH
11342: LD_INT 11
11344: PLUS
11345: PPUSH
11346: CALL_OW 110
11350: NOT
11351: IFFALSE 11367
// DeInit_Lab ( side , art ) ;
11353: LD_VAR 0 5
11357: PPUSH
11358: LD_VAR 0 2
11362: PPUSH
11363: CALL 9622 0 2
// SetTag ( base + 11 , 0 ) ;
11367: LD_VAR 0 4
11371: PUSH
11372: LD_INT 11
11374: PLUS
11375: PPUSH
11376: LD_INT 0
11378: PPUSH
11379: CALL_OW 109
// end ; end ;
11383: LD_VAR 0 3
11387: RET
// every 0 0$5 marked 5 do var hex , un ;
11388: GO 11390
11390: DISABLE
11391: LD_INT 0
11393: PPUSH
11394: PPUSH
// begin wait ( 3 3$0 ) ;
11395: LD_INT 6300
11397: PPUSH
11398: CALL_OW 67
// if GetTag ( 09 ) then
11402: LD_INT 9
11404: PPUSH
11405: CALL_OW 110
11409: IFFALSE 11448
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
11411: LD_ADDR_VAR 0 1
11415: PUSH
11416: LD_INT 13
11418: PPUSH
11419: CALL_OW 110
11423: PPUSH
11424: CALL_OW 250
11428: PUSH
11429: LD_INT 13
11431: PPUSH
11432: CALL_OW 110
11436: PPUSH
11437: CALL_OW 251
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: ST_TO_ADDR
11446: GO 11467
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
11448: LD_ADDR_VAR 0 1
11452: PUSH
11453: LD_EXP 38
11457: PUSH
11458: LD_INT 1
11460: ARRAY
11461: PPUSH
11462: CALL_OW 469
11466: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11467: LD_VAR 0 1
11471: PUSH
11472: LD_INT 1
11474: ARRAY
11475: PPUSH
11476: LD_VAR 0 1
11480: PUSH
11481: LD_INT 2
11483: ARRAY
11484: PPUSH
11485: LD_INT 16
11487: PPUSH
11488: CALL_OW 309
11492: NOT
11493: IFFALSE 11770
// begin if GetTag ( 09 ) then
11495: LD_INT 9
11497: PPUSH
11498: CALL_OW 110
11502: IFFALSE 11549
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
11504: LD_INT 13
11506: PPUSH
11507: CALL_OW 110
11511: PPUSH
11512: LD_INT 4
11514: PPUSH
11515: LD_EXP 38
11519: PUSH
11520: LD_INT 1
11522: ARRAY
11523: NEG
11524: PPUSH
11525: CALL_OW 290
// SetTag ( 09 , 0 ) ;
11529: LD_INT 9
11531: PPUSH
11532: LD_INT 0
11534: PPUSH
11535: CALL_OW 109
// SetTag ( 13 , 0 ) ;
11539: LD_INT 13
11541: PPUSH
11542: LD_INT 0
11544: PPUSH
11545: CALL_OW 109
// end ; DestroyArtefact ( hex , 1 ) ;
11549: LD_VAR 0 1
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL 11145 0 2
// wait ( 5 ) ;
11561: LD_INT 5
11563: PPUSH
11564: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
11568: LD_ADDR_VAR 0 1
11572: PUSH
11573: LD_INT 16
11575: PPUSH
11576: LD_INT 0
11578: PPUSH
11579: CALL_OW 16
11583: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11584: LD_ADDR_VAR 0 2
11588: PUSH
11589: LD_VAR 0 1
11593: PUSH
11594: LD_INT 1
11596: ARRAY
11597: PPUSH
11598: LD_VAR 0 1
11602: PUSH
11603: LD_INT 2
11605: ARRAY
11606: PPUSH
11607: CALL_OW 428
11611: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
11612: LD_VAR 0 2
11616: PUSH
11617: LD_INT 0
11619: GREATER
11620: PUSH
11621: LD_VAR 0 2
11625: PPUSH
11626: CALL_OW 247
11630: PUSH
11631: LD_INT 3
11633: EQUAL
11634: AND
11635: IFFALSE 11679
// begin KillUnit ( un ) ;
11637: LD_VAR 0 2
11641: PPUSH
11642: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
11646: LD_VAR 0 1
11650: PUSH
11651: LD_INT 1
11653: ARRAY
11654: PPUSH
11655: LD_VAR 0 1
11659: PUSH
11660: LD_INT 2
11662: ARRAY
11663: PPUSH
11664: CALL_OW 428
11668: IFFALSE 11679
// wait ( 10 ) ;
11670: LD_INT 10
11672: PPUSH
11673: CALL_OW 67
11677: GO 11646
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11679: LD_VAR 0 1
11683: PUSH
11684: LD_INT 1
11686: ARRAY
11687: PPUSH
11688: LD_VAR 0 1
11692: PUSH
11693: LD_INT 2
11695: ARRAY
11696: PPUSH
11697: CALL_OW 428
11701: NOT
11702: IFFALSE 11568
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11704: LD_VAR 0 1
11708: PUSH
11709: LD_INT 1
11711: ARRAY
11712: PPUSH
11713: LD_VAR 0 1
11717: PUSH
11718: LD_INT 2
11720: ARRAY
11721: PPUSH
11722: CALL_OW 494
// wait ( 30 ) ;
11726: LD_INT 30
11728: PPUSH
11729: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
11733: LD_INT 4
11735: PPUSH
11736: LD_EXP 38
11740: PUSH
11741: LD_INT 1
11743: ARRAY
11744: PPUSH
11745: LD_VAR 0 1
11749: PUSH
11750: LD_INT 1
11752: ARRAY
11753: PPUSH
11754: LD_VAR 0 1
11758: PUSH
11759: LD_INT 2
11761: ARRAY
11762: PPUSH
11763: LD_INT 0
11765: PPUSH
11766: CALL_OW 58
// end ; enable ;
11770: ENABLE
// end ;
11771: PPOPN 2
11773: END
// every 0 0$5 marked 6 do var hex , un ;
11774: GO 11776
11776: DISABLE
11777: LD_INT 0
11779: PPUSH
11780: PPUSH
// begin wait ( 3 3$30 ) ;
11781: LD_INT 7350
11783: PPUSH
11784: CALL_OW 67
// if GetTag ( 109 ) then
11788: LD_INT 109
11790: PPUSH
11791: CALL_OW 110
11795: IFFALSE 11834
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
11797: LD_ADDR_VAR 0 1
11801: PUSH
11802: LD_INT 113
11804: PPUSH
11805: CALL_OW 110
11809: PPUSH
11810: CALL_OW 250
11814: PUSH
11815: LD_INT 113
11817: PPUSH
11818: CALL_OW 110
11822: PPUSH
11823: CALL_OW 251
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: ST_TO_ADDR
11832: GO 11853
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
11834: LD_ADDR_VAR 0 1
11838: PUSH
11839: LD_EXP 38
11843: PUSH
11844: LD_INT 2
11846: ARRAY
11847: PPUSH
11848: CALL_OW 469
11852: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11853: LD_VAR 0 1
11857: PUSH
11858: LD_INT 1
11860: ARRAY
11861: PPUSH
11862: LD_VAR 0 1
11866: PUSH
11867: LD_INT 2
11869: ARRAY
11870: PPUSH
11871: LD_INT 16
11873: PPUSH
11874: CALL_OW 309
11878: NOT
11879: IFFALSE 12156
// begin if GetTag ( 109 ) then
11881: LD_INT 109
11883: PPUSH
11884: CALL_OW 110
11888: IFFALSE 11935
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 1 ] ) ;
11890: LD_INT 113
11892: PPUSH
11893: CALL_OW 110
11897: PPUSH
11898: LD_INT 4
11900: PPUSH
11901: LD_EXP 38
11905: PUSH
11906: LD_INT 1
11908: ARRAY
11909: NEG
11910: PPUSH
11911: CALL_OW 290
// SetTag ( 109 , 0 ) ;
11915: LD_INT 109
11917: PPUSH
11918: LD_INT 0
11920: PPUSH
11921: CALL_OW 109
// SetTag ( 113 , 0 ) ;
11925: LD_INT 113
11927: PPUSH
11928: LD_INT 0
11930: PPUSH
11931: CALL_OW 109
// end ; DestroyArtefact ( hex , 2 ) ;
11935: LD_VAR 0 1
11939: PPUSH
11940: LD_INT 2
11942: PPUSH
11943: CALL 11145 0 2
// wait ( 5 ) ;
11947: LD_INT 5
11949: PPUSH
11950: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
11954: LD_ADDR_VAR 0 1
11958: PUSH
11959: LD_INT 16
11961: PPUSH
11962: LD_INT 0
11964: PPUSH
11965: CALL_OW 16
11969: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11970: LD_ADDR_VAR 0 2
11974: PUSH
11975: LD_VAR 0 1
11979: PUSH
11980: LD_INT 1
11982: ARRAY
11983: PPUSH
11984: LD_VAR 0 1
11988: PUSH
11989: LD_INT 2
11991: ARRAY
11992: PPUSH
11993: CALL_OW 428
11997: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
11998: LD_VAR 0 2
12002: PUSH
12003: LD_INT 0
12005: GREATER
12006: PUSH
12007: LD_VAR 0 2
12011: PPUSH
12012: CALL_OW 247
12016: PUSH
12017: LD_INT 3
12019: EQUAL
12020: AND
12021: IFFALSE 12065
// begin KillUnit ( un ) ;
12023: LD_VAR 0 2
12027: PPUSH
12028: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12032: LD_VAR 0 1
12036: PUSH
12037: LD_INT 1
12039: ARRAY
12040: PPUSH
12041: LD_VAR 0 1
12045: PUSH
12046: LD_INT 2
12048: ARRAY
12049: PPUSH
12050: CALL_OW 428
12054: IFFALSE 12065
// wait ( 10 ) ;
12056: LD_INT 10
12058: PPUSH
12059: CALL_OW 67
12063: GO 12032
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12065: LD_VAR 0 1
12069: PUSH
12070: LD_INT 1
12072: ARRAY
12073: PPUSH
12074: LD_VAR 0 1
12078: PUSH
12079: LD_INT 2
12081: ARRAY
12082: PPUSH
12083: CALL_OW 428
12087: NOT
12088: IFFALSE 11954
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12090: LD_VAR 0 1
12094: PUSH
12095: LD_INT 1
12097: ARRAY
12098: PPUSH
12099: LD_VAR 0 1
12103: PUSH
12104: LD_INT 2
12106: ARRAY
12107: PPUSH
12108: CALL_OW 494
// wait ( 30 ) ;
12112: LD_INT 30
12114: PPUSH
12115: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12119: LD_INT 4
12121: PPUSH
12122: LD_EXP 38
12126: PUSH
12127: LD_INT 2
12129: ARRAY
12130: PPUSH
12131: LD_VAR 0 1
12135: PUSH
12136: LD_INT 1
12138: ARRAY
12139: PPUSH
12140: LD_VAR 0 1
12144: PUSH
12145: LD_INT 2
12147: ARRAY
12148: PPUSH
12149: LD_INT 0
12151: PPUSH
12152: CALL_OW 58
// end ; enable ;
12156: ENABLE
// end ;
12157: PPOPN 2
12159: END
// every 0 0$5 marked 7 do var hex , un ;
12160: GO 12162
12162: DISABLE
12163: LD_INT 0
12165: PPUSH
12166: PPUSH
// begin wait ( 4 4$0 ) ;
12167: LD_INT 8400
12169: PPUSH
12170: CALL_OW 67
// if GetTag ( 209 ) then
12174: LD_INT 209
12176: PPUSH
12177: CALL_OW 110
12181: IFFALSE 12220
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12183: LD_ADDR_VAR 0 1
12187: PUSH
12188: LD_INT 213
12190: PPUSH
12191: CALL_OW 110
12195: PPUSH
12196: CALL_OW 250
12200: PUSH
12201: LD_INT 213
12203: PPUSH
12204: CALL_OW 110
12208: PPUSH
12209: CALL_OW 251
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: ST_TO_ADDR
12218: GO 12239
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
12220: LD_ADDR_VAR 0 1
12224: PUSH
12225: LD_EXP 38
12229: PUSH
12230: LD_INT 3
12232: ARRAY
12233: PPUSH
12234: CALL_OW 469
12238: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12239: LD_VAR 0 1
12243: PUSH
12244: LD_INT 1
12246: ARRAY
12247: PPUSH
12248: LD_VAR 0 1
12252: PUSH
12253: LD_INT 2
12255: ARRAY
12256: PPUSH
12257: LD_INT 16
12259: PPUSH
12260: CALL_OW 309
12264: NOT
12265: IFFALSE 12542
// begin if GetTag ( 209 ) then
12267: LD_INT 209
12269: PPUSH
12270: CALL_OW 110
12274: IFFALSE 12321
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12276: LD_INT 213
12278: PPUSH
12279: CALL_OW 110
12283: PPUSH
12284: LD_INT 4
12286: PPUSH
12287: LD_EXP 38
12291: PUSH
12292: LD_INT 1
12294: ARRAY
12295: NEG
12296: PPUSH
12297: CALL_OW 290
// SetTag ( 209 , 0 ) ;
12301: LD_INT 209
12303: PPUSH
12304: LD_INT 0
12306: PPUSH
12307: CALL_OW 109
// SetTag ( 213 , 0 ) ;
12311: LD_INT 213
12313: PPUSH
12314: LD_INT 0
12316: PPUSH
12317: CALL_OW 109
// end ; DestroyArtefact ( hex , 3 ) ;
12321: LD_VAR 0 1
12325: PPUSH
12326: LD_INT 3
12328: PPUSH
12329: CALL 11145 0 2
// wait ( 5 ) ;
12333: LD_INT 5
12335: PPUSH
12336: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12340: LD_ADDR_VAR 0 1
12344: PUSH
12345: LD_INT 16
12347: PPUSH
12348: LD_INT 0
12350: PPUSH
12351: CALL_OW 16
12355: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12356: LD_ADDR_VAR 0 2
12360: PUSH
12361: LD_VAR 0 1
12365: PUSH
12366: LD_INT 1
12368: ARRAY
12369: PPUSH
12370: LD_VAR 0 1
12374: PUSH
12375: LD_INT 2
12377: ARRAY
12378: PPUSH
12379: CALL_OW 428
12383: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12384: LD_VAR 0 2
12388: PUSH
12389: LD_INT 0
12391: GREATER
12392: PUSH
12393: LD_VAR 0 2
12397: PPUSH
12398: CALL_OW 247
12402: PUSH
12403: LD_INT 3
12405: EQUAL
12406: AND
12407: IFFALSE 12451
// begin KillUnit ( un ) ;
12409: LD_VAR 0 2
12413: PPUSH
12414: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12418: LD_VAR 0 1
12422: PUSH
12423: LD_INT 1
12425: ARRAY
12426: PPUSH
12427: LD_VAR 0 1
12431: PUSH
12432: LD_INT 2
12434: ARRAY
12435: PPUSH
12436: CALL_OW 428
12440: IFFALSE 12451
// wait ( 10 ) ;
12442: LD_INT 10
12444: PPUSH
12445: CALL_OW 67
12449: GO 12418
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12451: LD_VAR 0 1
12455: PUSH
12456: LD_INT 1
12458: ARRAY
12459: PPUSH
12460: LD_VAR 0 1
12464: PUSH
12465: LD_INT 2
12467: ARRAY
12468: PPUSH
12469: CALL_OW 428
12473: NOT
12474: IFFALSE 12340
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12476: LD_VAR 0 1
12480: PUSH
12481: LD_INT 1
12483: ARRAY
12484: PPUSH
12485: LD_VAR 0 1
12489: PUSH
12490: LD_INT 2
12492: ARRAY
12493: PPUSH
12494: CALL_OW 494
// wait ( 30 ) ;
12498: LD_INT 30
12500: PPUSH
12501: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12505: LD_INT 4
12507: PPUSH
12508: LD_EXP 38
12512: PUSH
12513: LD_INT 3
12515: ARRAY
12516: PPUSH
12517: LD_VAR 0 1
12521: PUSH
12522: LD_INT 1
12524: ARRAY
12525: PPUSH
12526: LD_VAR 0 1
12530: PUSH
12531: LD_INT 2
12533: ARRAY
12534: PPUSH
12535: LD_INT 0
12537: PPUSH
12538: CALL_OW 58
// end ; enable ;
12542: ENABLE
// end ; end_of_file
12543: PPOPN 2
12545: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
12546: LD_INT 0
12548: PPUSH
12549: PPUSH
// for un in battle_flags_id do
12550: LD_ADDR_VAR 0 2
12554: PUSH
12555: LD_EXP 34
12559: PUSH
12560: FOR_IN
12561: IFFALSE 12636
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
12563: LD_VAR 0 2
12567: PPUSH
12568: LD_INT 1
12570: PUSH
12571: LD_LOC 18
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: LD_INT 2
12582: PUSH
12583: LD_LOC 18
12587: PUSH
12588: LD_INT 2
12590: DIV
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 3
12598: PUSH
12599: LD_LOC 18
12603: PUSH
12604: LD_INT 5
12606: DIV
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 20
12614: PUSH
12615: LD_LOC 18
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: PPUSH
12630: CALL_OW 423
12634: GO 12560
12636: POP
12637: POP
// end ;
12638: LD_VAR 0 1
12642: RET
// every 0 0$0.1 do var un ;
12643: GO 12645
12645: DISABLE
12646: LD_INT 0
12648: PPUSH
// begin if not def_morale_flags then
12649: LD_EXP 51
12653: NOT
12654: IFFALSE 12658
// exit ;
12656: GO 12735
// if not morale_decreasing_time then
12658: LD_EXP 14
12662: NOT
12663: IFFALSE 12667
// exit ;
12665: GO 12735
// strength = 100 ;
12667: LD_ADDR_LOC 18
12671: PUSH
12672: LD_INT 100
12674: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
12675: LD_EXP 14
12679: PPUSH
12680: CALL_OW 67
// strength := strength - 1 ;
12684: LD_ADDR_LOC 18
12688: PUSH
12689: LD_LOC 18
12693: PUSH
12694: LD_INT 1
12696: MINUS
12697: ST_TO_ADDR
// Update_Flags ;
12698: CALL 12546 0 0
// until not strength ;
12702: LD_LOC 18
12706: NOT
12707: IFFALSE 12675
// for un in battle_flags_id do
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_EXP 34
12718: PUSH
12719: FOR_IN
12720: IFFALSE 12733
// KillBattleFlag ( un ) ;
12722: LD_VAR 0 1
12726: PPUSH
12727: CALL_OW 419
12731: GO 12719
12733: POP
12734: POP
// end ; end_of_file
12735: PPOPN 1
12737: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
12738: LD_INT 0
12740: PPUSH
12741: PPUSH
12742: PPUSH
// enable ( 600 ) ;
12743: LD_INT 600
12745: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
12746: LD_ADDR_VAR 0 2
12750: PUSH
12751: DOUBLE
12752: LD_INT 1
12754: DEC
12755: ST_TO_ADDR
12756: LD_EXP 40
12760: PUSH
12761: FOR_TO
12762: IFFALSE 12917
// if Position_Sides [ i ] then
12764: LD_EXP 29
12768: PUSH
12769: LD_VAR 0 2
12773: ARRAY
12774: IFFALSE 12915
// for j := 1 to 8 do
12776: LD_ADDR_VAR 0 3
12780: PUSH
12781: DOUBLE
12782: LD_INT 1
12784: DEC
12785: ST_TO_ADDR
12786: LD_INT 8
12788: PUSH
12789: FOR_TO
12790: IFFALSE 12913
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
12792: LD_EXP 23
12796: PUSH
12797: LD_VAR 0 3
12801: ARRAY
12802: PUSH
12803: LD_EXP 21
12807: PUSH
12808: LD_EXP 29
12812: PUSH
12813: LD_VAR 0 2
12817: ARRAY
12818: ARRAY
12819: PUSH
12820: LD_EXP 21
12824: PUSH
12825: LD_VAR 0 3
12829: ARRAY
12830: NONEQUAL
12831: PUSH
12832: LD_EXP 25
12836: NOT
12837: PUSH
12838: LD_EXP 29
12842: PUSH
12843: LD_VAR 0 2
12847: ARRAY
12848: PUSH
12849: LD_VAR 0 3
12853: NONEQUAL
12854: AND
12855: OR
12856: AND
12857: IFFALSE 12881
// HideArea ( j , BuildUpAreas [ i ] ) else
12859: LD_VAR 0 3
12863: PPUSH
12864: LD_EXP 40
12868: PUSH
12869: LD_VAR 0 2
12873: ARRAY
12874: PPUSH
12875: CALL_OW 333
12879: GO 12911
// if ( j = your_side ) then
12881: LD_VAR 0 3
12885: PUSH
12886: LD_OWVAR 2
12890: EQUAL
12891: IFFALSE 12911
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
12893: LD_EXP 40
12897: PUSH
12898: LD_VAR 0 2
12902: ARRAY
12903: PPUSH
12904: LD_INT 5
12906: PPUSH
12907: CALL_OW 424
12911: GO 12789
12913: POP
12914: POP
12915: GO 12761
12917: POP
12918: POP
// end ;
12919: LD_VAR 0 1
12923: RET
// export function EndBuildUp ; var i , j ; begin
12924: LD_INT 0
12926: PPUSH
12927: PPUSH
12928: PPUSH
// disable ( 600 ) ;
12929: LD_INT 600
12931: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
12932: LD_ADDR_VAR 0 2
12936: PUSH
12937: DOUBLE
12938: LD_INT 1
12940: DEC
12941: ST_TO_ADDR
12942: LD_EXP 40
12946: PUSH
12947: FOR_TO
12948: IFFALSE 13103
// if Position_Sides [ i ] then
12950: LD_EXP 29
12954: PUSH
12955: LD_VAR 0 2
12959: ARRAY
12960: IFFALSE 13101
// for j := 1 to 8 do
12962: LD_ADDR_VAR 0 3
12966: PUSH
12967: DOUBLE
12968: LD_INT 1
12970: DEC
12971: ST_TO_ADDR
12972: LD_INT 8
12974: PUSH
12975: FOR_TO
12976: IFFALSE 13099
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
12978: LD_EXP 23
12982: PUSH
12983: LD_VAR 0 3
12987: ARRAY
12988: PUSH
12989: LD_EXP 21
12993: PUSH
12994: LD_EXP 29
12998: PUSH
12999: LD_VAR 0 2
13003: ARRAY
13004: ARRAY
13005: PUSH
13006: LD_EXP 21
13010: PUSH
13011: LD_VAR 0 3
13015: ARRAY
13016: NONEQUAL
13017: PUSH
13018: LD_EXP 25
13022: NOT
13023: PUSH
13024: LD_EXP 29
13028: PUSH
13029: LD_VAR 0 2
13033: ARRAY
13034: PUSH
13035: LD_VAR 0 3
13039: NONEQUAL
13040: AND
13041: OR
13042: AND
13043: IFFALSE 13067
// ShowArea ( j , BuildUpAreas [ i ] ) else
13045: LD_VAR 0 3
13049: PPUSH
13050: LD_EXP 40
13054: PUSH
13055: LD_VAR 0 2
13059: ARRAY
13060: PPUSH
13061: CALL_OW 334
13065: GO 13097
// if ( j = your_side ) then
13067: LD_VAR 0 3
13071: PUSH
13072: LD_OWVAR 2
13076: EQUAL
13077: IFFALSE 13097
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13079: LD_EXP 40
13083: PUSH
13084: LD_VAR 0 2
13088: ARRAY
13089: PPUSH
13090: LD_INT 0
13092: PPUSH
13093: CALL_OW 424
13097: GO 12975
13099: POP
13100: POP
13101: GO 12947
13103: POP
13104: POP
// end ;
13105: LD_VAR 0 1
13109: RET
// every 5 marked 600 do var i , un ;
13110: GO 13112
13112: DISABLE
13113: LD_INT 0
13115: PPUSH
13116: PPUSH
// begin for i := 1 to BuildUpAreas do
13117: LD_ADDR_VAR 0 1
13121: PUSH
13122: DOUBLE
13123: LD_INT 1
13125: DEC
13126: ST_TO_ADDR
13127: LD_EXP 40
13131: PUSH
13132: FOR_TO
13133: IFFALSE 13288
// if Position_Sides [ i ] then
13135: LD_EXP 29
13139: PUSH
13140: LD_VAR 0 1
13144: ARRAY
13145: IFFALSE 13286
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13147: LD_ADDR_VAR 0 2
13151: PUSH
13152: LD_EXP 40
13156: PUSH
13157: LD_VAR 0 1
13161: ARRAY
13162: PPUSH
13163: LD_INT 2
13165: PUSH
13166: LD_INT 21
13168: PUSH
13169: LD_INT 1
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 21
13178: PUSH
13179: LD_INT 2
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 22
13193: PUSH
13194: LD_OWVAR 2
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 70
13211: PUSH
13212: FOR_IN
13213: IFFALSE 13284
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
13215: LD_EXP 21
13219: PUSH
13220: LD_EXP 29
13224: PUSH
13225: LD_VAR 0 1
13229: ARRAY
13230: ARRAY
13231: PUSH
13232: LD_EXP 21
13236: PUSH
13237: LD_OWVAR 2
13241: ARRAY
13242: NONEQUAL
13243: PUSH
13244: LD_EXP 25
13248: NOT
13249: PUSH
13250: LD_EXP 29
13254: PUSH
13255: LD_VAR 0 1
13259: ARRAY
13260: PUSH
13261: LD_OWVAR 2
13265: NONEQUAL
13266: AND
13267: OR
13268: IFFALSE 13282
// ComMoveToArea ( un , BuildUpEscape ) ;
13270: LD_VAR 0 2
13274: PPUSH
13275: LD_INT 24
13277: PPUSH
13278: CALL_OW 113
13282: GO 13212
13284: POP
13285: POP
13286: GO 13132
13288: POP
13289: POP
// enable ;
13290: ENABLE
// end ;
13291: PPOPN 2
13293: END
// every 5 5$00 do
13294: GO 13296
13296: DISABLE
// if ( def_builduptime = 1 ) then
13297: LD_EXP 56
13301: PUSH
13302: LD_INT 1
13304: EQUAL
13305: IFFALSE 13311
// EndBuildUp ;
13307: CALL 12924 0 0
13311: END
// every 10 10$00 do
13312: GO 13314
13314: DISABLE
// if ( def_builduptime = 2 ) then
13315: LD_EXP 56
13319: PUSH
13320: LD_INT 2
13322: EQUAL
13323: IFFALSE 13329
// EndBuildUp ;
13325: CALL 12924 0 0
13329: END
// every 15 15$00 do
13330: GO 13332
13332: DISABLE
// if ( def_builduptime = 3 ) then
13333: LD_EXP 56
13337: PUSH
13338: LD_INT 3
13340: EQUAL
13341: IFFALSE 13347
// EndBuildUp ; end_of_file
13343: CALL 12924 0 0
13347: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13348: LD_INT 0
13350: PPUSH
13351: PPUSH
// if ( not IAmSpec ) then
13352: CALL_OW 531
13356: NOT
13357: IFFALSE 13373
// Result := Limits_Info ^  ;
13359: LD_ADDR_VAR 0 1
13363: PUSH
13364: LD_LOC 30
13368: PUSH
13369: LD_STRING 
13371: ADD
13372: ST_TO_ADDR
// for i := 1 to 8 do
13373: LD_ADDR_VAR 0 2
13377: PUSH
13378: DOUBLE
13379: LD_INT 1
13381: DEC
13382: ST_TO_ADDR
13383: LD_INT 8
13385: PUSH
13386: FOR_TO
13387: IFFALSE 13432
// if Cheaters [ i ] then
13389: LD_LOC 31
13393: PUSH
13394: LD_VAR 0 2
13398: ARRAY
13399: IFFALSE 13430
// Result := Result ^ [ #Cheater , i , i ] ;
13401: LD_ADDR_VAR 0 1
13405: PUSH
13406: LD_VAR 0 1
13410: PUSH
13411: LD_STRING #Cheater
13413: PUSH
13414: LD_VAR 0 2
13418: PUSH
13419: LD_VAR 0 2
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: ADD
13429: ST_TO_ADDR
13430: GO 13386
13432: POP
13433: POP
// end ;
13434: LD_VAR 0 1
13438: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
13439: LD_INT 0
13441: PPUSH
13442: PPUSH
13443: PPUSH
13444: PPUSH
13445: PPUSH
// case Game_Type of 10 :
13446: LD_EXP 41
13450: PUSH
13451: LD_INT 10
13453: DOUBLE
13454: EQUAL
13455: IFTRUE 13459
13457: GO 13470
13459: POP
// def_game_rules := 1 ; 11 :
13460: LD_ADDR_EXP 42
13464: PUSH
13465: LD_INT 1
13467: ST_TO_ADDR
13468: GO 13490
13470: LD_INT 11
13472: DOUBLE
13473: EQUAL
13474: IFTRUE 13478
13476: GO 13489
13478: POP
// def_game_rules := 3 ; end ;
13479: LD_ADDR_EXP 42
13483: PUSH
13484: LD_INT 3
13486: ST_TO_ADDR
13487: GO 13490
13489: POP
// case def_game_rules of 0 :
13490: LD_EXP 42
13494: PUSH
13495: LD_INT 0
13497: DOUBLE
13498: EQUAL
13499: IFTRUE 13503
13501: GO 13508
13503: POP
// exit ; 1 :
13504: GO 15566
13506: GO 15466
13508: LD_INT 1
13510: DOUBLE
13511: EQUAL
13512: IFTRUE 13516
13514: GO 13732
13516: POP
// begin def_base_level := 2 ;
13517: LD_ADDR_EXP 43
13521: PUSH
13522: LD_INT 2
13524: ST_TO_ADDR
// def_amount_of_people := 2 ;
13525: LD_ADDR_EXP 44
13529: PUSH
13530: LD_INT 2
13532: ST_TO_ADDR
// def_skill_level := 1 ;
13533: LD_ADDR_EXP 45
13537: PUSH
13538: LD_INT 1
13540: ST_TO_ADDR
// def_starting_resources := 2 ;
13541: LD_ADDR_EXP 46
13545: PUSH
13546: LD_INT 2
13548: ST_TO_ADDR
// def_shipments_density := 1 ;
13549: LD_ADDR_EXP 47
13553: PUSH
13554: LD_INT 1
13556: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13557: LD_ADDR_EXP 48
13561: PUSH
13562: LD_INT 0
13564: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13565: LD_ADDR_EXP 49
13569: PUSH
13570: LD_INT 1
13572: ST_TO_ADDR
// def_shared_vision := 1 ;
13573: LD_ADDR_EXP 50
13577: PUSH
13578: LD_INT 1
13580: ST_TO_ADDR
// def_morale_flags := 3 ;
13581: LD_ADDR_EXP 51
13585: PUSH
13586: LD_INT 3
13588: ST_TO_ADDR
// def_siberite_detection := 1 ;
13589: LD_ADDR_EXP 52
13593: PUSH
13594: LD_INT 1
13596: ST_TO_ADDR
// def_people_respawning := 1 ;
13597: LD_ADDR_EXP 53
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13605: LD_ADDR_EXP 54
13609: PUSH
13610: LD_INT 1
13612: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13613: LD_ADDR_EXP 55
13617: PUSH
13618: LD_INT 0
13620: ST_TO_ADDR
// def_builduptime := 2 ;
13621: LD_ADDR_EXP 56
13625: PUSH
13626: LD_INT 2
13628: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13629: LD_ADDR_VAR 0 2
13633: PUSH
13634: EMPTY
13635: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13636: LD_ADDR_VAR 0 3
13640: PUSH
13641: EMPTY
13642: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13643: LD_ADDR_LOC 25
13647: PUSH
13648: EMPTY
13649: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13650: LD_ADDR_LOC 26
13654: PUSH
13655: EMPTY
13656: ST_TO_ADDR
// Banned_Controls := [ ] ;
13657: LD_ADDR_LOC 27
13661: PUSH
13662: EMPTY
13663: ST_TO_ADDR
// Banned_Engines := [ ] ;
13664: LD_ADDR_LOC 28
13668: PUSH
13669: EMPTY
13670: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13671: LD_ADDR_LOC 23
13675: PUSH
13676: LD_INT 37
13678: PUSH
13679: EMPTY
13680: LIST
13681: PUSH
13682: LD_INT 4
13684: PUSH
13685: LD_INT 5
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: LD_INT 31
13694: PUSH
13695: LD_INT 32
13697: PUSH
13698: LD_INT 33
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: LIST
13710: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
13711: LD_ADDR_LOC 24
13715: PUSH
13716: LD_INT 2
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: LD_INT 4
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: ST_TO_ADDR
// end ; 2 :
13730: GO 15466
13732: LD_INT 2
13734: DOUBLE
13735: EQUAL
13736: IFTRUE 13740
13738: GO 13949
13740: POP
// begin def_base_level := 1 ;
13741: LD_ADDR_EXP 43
13745: PUSH
13746: LD_INT 1
13748: ST_TO_ADDR
// def_amount_of_people := 2 ;
13749: LD_ADDR_EXP 44
13753: PUSH
13754: LD_INT 2
13756: ST_TO_ADDR
// def_skill_level := 3 ;
13757: LD_ADDR_EXP 45
13761: PUSH
13762: LD_INT 3
13764: ST_TO_ADDR
// def_starting_resources := 3 ;
13765: LD_ADDR_EXP 46
13769: PUSH
13770: LD_INT 3
13772: ST_TO_ADDR
// def_shipments_density := 2 ;
13773: LD_ADDR_EXP 47
13777: PUSH
13778: LD_INT 2
13780: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13781: LD_ADDR_EXP 48
13785: PUSH
13786: LD_INT 1
13788: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13789: LD_ADDR_EXP 49
13793: PUSH
13794: LD_INT 2
13796: ST_TO_ADDR
// def_shared_vision := 1 ;
13797: LD_ADDR_EXP 50
13801: PUSH
13802: LD_INT 1
13804: ST_TO_ADDR
// def_morale_flags := 0 ;
13805: LD_ADDR_EXP 51
13809: PUSH
13810: LD_INT 0
13812: ST_TO_ADDR
// def_siberite_detection := 1 ;
13813: LD_ADDR_EXP 52
13817: PUSH
13818: LD_INT 1
13820: ST_TO_ADDR
// def_people_respawning := 0 ;
13821: LD_ADDR_EXP 53
13825: PUSH
13826: LD_INT 0
13828: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13829: LD_ADDR_EXP 54
13833: PUSH
13834: LD_INT 0
13836: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13837: LD_ADDR_EXP 55
13841: PUSH
13842: LD_INT 0
13844: ST_TO_ADDR
// def_builduptime := 2 ;
13845: LD_ADDR_EXP 56
13849: PUSH
13850: LD_INT 2
13852: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13853: LD_ADDR_VAR 0 2
13857: PUSH
13858: LD_INT 1
13860: PUSH
13861: EMPTY
13862: LIST
13863: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13864: LD_ADDR_VAR 0 3
13868: PUSH
13869: EMPTY
13870: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13871: LD_ADDR_LOC 25
13875: PUSH
13876: EMPTY
13877: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13878: LD_ADDR_LOC 26
13882: PUSH
13883: EMPTY
13884: ST_TO_ADDR
// Banned_Controls := [ ] ;
13885: LD_ADDR_LOC 27
13889: PUSH
13890: EMPTY
13891: ST_TO_ADDR
// Banned_Engines := [ ] ;
13892: LD_ADDR_LOC 28
13896: PUSH
13897: EMPTY
13898: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13899: LD_ADDR_LOC 23
13903: PUSH
13904: LD_INT 4
13906: PUSH
13907: LD_INT 5
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 31
13916: PUSH
13917: LD_INT 32
13919: PUSH
13920: LD_INT 33
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
13932: LD_ADDR_LOC 24
13936: PUSH
13937: LD_INT 1
13939: PUSH
13940: LD_INT 2
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: ST_TO_ADDR
// end ; 3 :
13947: GO 15466
13949: LD_INT 3
13951: DOUBLE
13952: EQUAL
13953: IFTRUE 13957
13955: GO 14200
13957: POP
// begin def_base_level := 1 ;
13958: LD_ADDR_EXP 43
13962: PUSH
13963: LD_INT 1
13965: ST_TO_ADDR
// def_amount_of_people := 2 ;
13966: LD_ADDR_EXP 44
13970: PUSH
13971: LD_INT 2
13973: ST_TO_ADDR
// def_skill_level := 3 ;
13974: LD_ADDR_EXP 45
13978: PUSH
13979: LD_INT 3
13981: ST_TO_ADDR
// def_starting_resources := 3 ;
13982: LD_ADDR_EXP 46
13986: PUSH
13987: LD_INT 3
13989: ST_TO_ADDR
// def_shipments_density := 1 ;
13990: LD_ADDR_EXP 47
13994: PUSH
13995: LD_INT 1
13997: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13998: LD_ADDR_EXP 48
14002: PUSH
14003: LD_INT 0
14005: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14006: LD_ADDR_EXP 49
14010: PUSH
14011: LD_INT 1
14013: ST_TO_ADDR
// def_shared_vision := 1 ;
14014: LD_ADDR_EXP 50
14018: PUSH
14019: LD_INT 1
14021: ST_TO_ADDR
// def_morale_flags := 0 ;
14022: LD_ADDR_EXP 51
14026: PUSH
14027: LD_INT 0
14029: ST_TO_ADDR
// def_siberite_detection := 1 ;
14030: LD_ADDR_EXP 52
14034: PUSH
14035: LD_INT 1
14037: ST_TO_ADDR
// def_people_respawning := 0 ;
14038: LD_ADDR_EXP 53
14042: PUSH
14043: LD_INT 0
14045: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14046: LD_ADDR_EXP 54
14050: PUSH
14051: LD_INT 2
14053: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14054: LD_ADDR_EXP 55
14058: PUSH
14059: LD_INT 0
14061: ST_TO_ADDR
// def_builduptime := 1 ;
14062: LD_ADDR_EXP 56
14066: PUSH
14067: LD_INT 1
14069: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14070: LD_ADDR_VAR 0 2
14074: PUSH
14075: LD_INT 23
14077: PUSH
14078: EMPTY
14079: LIST
14080: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14081: LD_ADDR_VAR 0 3
14085: PUSH
14086: LD_INT 2
14088: PUSH
14089: LD_INT 37
14091: PUSH
14092: LD_INT 32
14094: PUSH
14095: LD_INT 33
14097: PUSH
14098: LD_INT 36
14100: PUSH
14101: LD_INT 16
14103: PUSH
14104: LD_INT 23
14106: PUSH
14107: LD_INT 21
14109: PUSH
14110: LD_INT 18
14112: PUSH
14113: LD_INT 22
14115: PUSH
14116: LD_INT 20
14118: PUSH
14119: LD_INT 19
14121: PUSH
14122: LD_INT 25
14124: PUSH
14125: LD_INT 17
14127: PUSH
14128: LD_INT 24
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14148: LD_ADDR_LOC 25
14152: PUSH
14153: EMPTY
14154: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14155: LD_ADDR_LOC 26
14159: PUSH
14160: EMPTY
14161: ST_TO_ADDR
// Banned_Controls := [ ] ;
14162: LD_ADDR_LOC 27
14166: PUSH
14167: EMPTY
14168: ST_TO_ADDR
// Banned_Engines := [ ] ;
14169: LD_ADDR_LOC 28
14173: PUSH
14174: EMPTY
14175: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14176: LD_ADDR_LOC 23
14180: PUSH
14181: EMPTY
14182: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14183: LD_ADDR_LOC 24
14187: PUSH
14188: EMPTY
14189: ST_TO_ADDR
// No_Mechs := true ;
14190: LD_ADDR_EXP 57
14194: PUSH
14195: LD_INT 1
14197: ST_TO_ADDR
// end ; 4 :
14198: GO 15466
14200: LD_INT 4
14202: DOUBLE
14203: EQUAL
14204: IFTRUE 14208
14206: GO 14383
14208: POP
// begin def_base_level := 1 ;
14209: LD_ADDR_EXP 43
14213: PUSH
14214: LD_INT 1
14216: ST_TO_ADDR
// def_amount_of_people := 2 ;
14217: LD_ADDR_EXP 44
14221: PUSH
14222: LD_INT 2
14224: ST_TO_ADDR
// def_skill_level := 3 ;
14225: LD_ADDR_EXP 45
14229: PUSH
14230: LD_INT 3
14232: ST_TO_ADDR
// def_starting_resources := 3 ;
14233: LD_ADDR_EXP 46
14237: PUSH
14238: LD_INT 3
14240: ST_TO_ADDR
// def_shipments_density := 2 ;
14241: LD_ADDR_EXP 47
14245: PUSH
14246: LD_INT 2
14248: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14249: LD_ADDR_EXP 48
14253: PUSH
14254: LD_INT 1
14256: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14257: LD_ADDR_EXP 49
14261: PUSH
14262: LD_INT 2
14264: ST_TO_ADDR
// def_shared_vision := 1 ;
14265: LD_ADDR_EXP 50
14269: PUSH
14270: LD_INT 1
14272: ST_TO_ADDR
// def_morale_flags := 0 ;
14273: LD_ADDR_EXP 51
14277: PUSH
14278: LD_INT 0
14280: ST_TO_ADDR
// def_siberite_detection := 1 ;
14281: LD_ADDR_EXP 52
14285: PUSH
14286: LD_INT 1
14288: ST_TO_ADDR
// def_people_respawning := 0 ;
14289: LD_ADDR_EXP 53
14293: PUSH
14294: LD_INT 0
14296: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14297: LD_ADDR_EXP 54
14301: PUSH
14302: LD_INT 0
14304: ST_TO_ADDR
// def_siberite_bomb := 1 ;
14305: LD_ADDR_EXP 55
14309: PUSH
14310: LD_INT 1
14312: ST_TO_ADDR
// def_builduptime := 3 ;
14313: LD_ADDR_EXP 56
14317: PUSH
14318: LD_INT 3
14320: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14321: LD_ADDR_VAR 0 2
14325: PUSH
14326: LD_INT 1
14328: PUSH
14329: EMPTY
14330: LIST
14331: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14332: LD_ADDR_VAR 0 3
14336: PUSH
14337: EMPTY
14338: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14339: LD_ADDR_LOC 25
14343: PUSH
14344: EMPTY
14345: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14346: LD_ADDR_LOC 26
14350: PUSH
14351: EMPTY
14352: ST_TO_ADDR
// Banned_Controls := [ ] ;
14353: LD_ADDR_LOC 27
14357: PUSH
14358: EMPTY
14359: ST_TO_ADDR
// Banned_Engines := [ ] ;
14360: LD_ADDR_LOC 28
14364: PUSH
14365: EMPTY
14366: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14367: LD_ADDR_LOC 23
14371: PUSH
14372: EMPTY
14373: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14374: LD_ADDR_LOC 24
14378: PUSH
14379: EMPTY
14380: ST_TO_ADDR
// end ; 5 :
14381: GO 15466
14383: LD_INT 5
14385: DOUBLE
14386: EQUAL
14387: IFTRUE 14391
14389: GO 14640
14391: POP
// begin def_base_level := 0 ;
14392: LD_ADDR_EXP 43
14396: PUSH
14397: LD_INT 0
14399: ST_TO_ADDR
// def_amount_of_people := 0 ;
14400: LD_ADDR_EXP 44
14404: PUSH
14405: LD_INT 0
14407: ST_TO_ADDR
// def_skill_level := 0 ;
14408: LD_ADDR_EXP 45
14412: PUSH
14413: LD_INT 0
14415: ST_TO_ADDR
// def_starting_resources := 0 ;
14416: LD_ADDR_EXP 46
14420: PUSH
14421: LD_INT 0
14423: ST_TO_ADDR
// def_shipments_density := 0 ;
14424: LD_ADDR_EXP 47
14428: PUSH
14429: LD_INT 0
14431: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14432: LD_ADDR_EXP 48
14436: PUSH
14437: LD_INT 0
14439: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
14440: LD_ADDR_EXP 49
14444: PUSH
14445: LD_INT 0
14447: ST_TO_ADDR
// def_shared_vision := 1 ;
14448: LD_ADDR_EXP 50
14452: PUSH
14453: LD_INT 1
14455: ST_TO_ADDR
// def_morale_flags := 0 ;
14456: LD_ADDR_EXP 51
14460: PUSH
14461: LD_INT 0
14463: ST_TO_ADDR
// def_siberite_detection := 0 ;
14464: LD_ADDR_EXP 52
14468: PUSH
14469: LD_INT 0
14471: ST_TO_ADDR
// def_people_respawning := 1 ;
14472: LD_ADDR_EXP 53
14476: PUSH
14477: LD_INT 1
14479: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14480: LD_ADDR_EXP 54
14484: PUSH
14485: LD_INT 1
14487: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14488: LD_ADDR_EXP 55
14492: PUSH
14493: LD_INT 0
14495: ST_TO_ADDR
// def_builduptime := 0 ;
14496: LD_ADDR_EXP 56
14500: PUSH
14501: LD_INT 0
14503: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
14504: LD_ADDR_VAR 0 2
14508: PUSH
14509: LD_INT 10
14511: PUSH
14512: LD_INT 3
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_INT 12
14526: PUSH
14527: LD_INT 11
14529: PUSH
14530: LD_INT 14
14532: PUSH
14533: LD_INT 13
14535: PUSH
14536: LD_INT 5
14538: PUSH
14539: LD_INT 24
14541: PUSH
14542: LD_INT 21
14544: PUSH
14545: LD_INT 33
14547: PUSH
14548: LD_INT 36
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
14562: LD_ADDR_LOC 25
14566: PUSH
14567: LD_INT 31
14569: PUSH
14570: EMPTY
14571: LIST
14572: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14573: LD_ADDR_LOC 26
14577: PUSH
14578: EMPTY
14579: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
14580: LD_ADDR_LOC 27
14584: PUSH
14585: LD_INT 2
14587: PUSH
14588: EMPTY
14589: LIST
14590: ST_TO_ADDR
// Banned_Engines := [ ] ;
14591: LD_ADDR_LOC 28
14595: PUSH
14596: EMPTY
14597: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
14598: LD_ADDR_LOC 23
14602: PUSH
14603: LD_INT 4
14605: PUSH
14606: EMPTY
14607: LIST
14608: PUSH
14609: LD_INT 31
14611: PUSH
14612: LD_INT 32
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
14623: LD_ADDR_LOC 24
14627: PUSH
14628: LD_INT 1
14630: PUSH
14631: LD_INT 1
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: ST_TO_ADDR
// end ; 6 :
14638: GO 15466
14640: LD_INT 6
14642: DOUBLE
14643: EQUAL
14644: IFTRUE 14648
14646: GO 14851
14648: POP
// begin def_base_level := 1 ;
14649: LD_ADDR_EXP 43
14653: PUSH
14654: LD_INT 1
14656: ST_TO_ADDR
// def_amount_of_people := 2 ;
14657: LD_ADDR_EXP 44
14661: PUSH
14662: LD_INT 2
14664: ST_TO_ADDR
// def_skill_level := 3 ;
14665: LD_ADDR_EXP 45
14669: PUSH
14670: LD_INT 3
14672: ST_TO_ADDR
// def_starting_resources := 3 ;
14673: LD_ADDR_EXP 46
14677: PUSH
14678: LD_INT 3
14680: ST_TO_ADDR
// def_shipments_density := 1 ;
14681: LD_ADDR_EXP 47
14685: PUSH
14686: LD_INT 1
14688: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14689: LD_ADDR_EXP 48
14693: PUSH
14694: LD_INT 0
14696: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14697: LD_ADDR_EXP 49
14701: PUSH
14702: LD_INT 1
14704: ST_TO_ADDR
// def_shared_vision := 1 ;
14705: LD_ADDR_EXP 50
14709: PUSH
14710: LD_INT 1
14712: ST_TO_ADDR
// def_morale_flags := 0 ;
14713: LD_ADDR_EXP 51
14717: PUSH
14718: LD_INT 0
14720: ST_TO_ADDR
// def_siberite_detection := 1 ;
14721: LD_ADDR_EXP 52
14725: PUSH
14726: LD_INT 1
14728: ST_TO_ADDR
// def_people_respawning := 2 ;
14729: LD_ADDR_EXP 53
14733: PUSH
14734: LD_INT 2
14736: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14737: LD_ADDR_EXP 54
14741: PUSH
14742: LD_INT 1
14744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14745: LD_ADDR_EXP 55
14749: PUSH
14750: LD_INT 0
14752: ST_TO_ADDR
// def_builduptime := 1 ;
14753: LD_ADDR_EXP 56
14757: PUSH
14758: LD_INT 1
14760: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14761: LD_ADDR_VAR 0 2
14765: PUSH
14766: LD_INT 23
14768: PUSH
14769: EMPTY
14770: LIST
14771: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
14772: LD_ADDR_VAR 0 3
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: LD_INT 37
14782: PUSH
14783: LD_INT 31
14785: PUSH
14786: LD_INT 32
14788: PUSH
14789: LD_INT 33
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14799: LD_ADDR_LOC 25
14803: PUSH
14804: EMPTY
14805: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14806: LD_ADDR_LOC 26
14810: PUSH
14811: EMPTY
14812: ST_TO_ADDR
// Banned_Controls := [ ] ;
14813: LD_ADDR_LOC 27
14817: PUSH
14818: EMPTY
14819: ST_TO_ADDR
// Banned_Engines := [ ] ;
14820: LD_ADDR_LOC 28
14824: PUSH
14825: EMPTY
14826: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14827: LD_ADDR_LOC 23
14831: PUSH
14832: EMPTY
14833: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14834: LD_ADDR_LOC 24
14838: PUSH
14839: EMPTY
14840: ST_TO_ADDR
// No_Mechs := true ;
14841: LD_ADDR_EXP 57
14845: PUSH
14846: LD_INT 1
14848: ST_TO_ADDR
// end ; 7 :
14849: GO 15466
14851: LD_INT 7
14853: DOUBLE
14854: EQUAL
14855: IFTRUE 14859
14857: GO 15057
14859: POP
// begin def_base_level := 1 ;
14860: LD_ADDR_EXP 43
14864: PUSH
14865: LD_INT 1
14867: ST_TO_ADDR
// def_amount_of_people := 2 ;
14868: LD_ADDR_EXP 44
14872: PUSH
14873: LD_INT 2
14875: ST_TO_ADDR
// def_skill_level := 3 ;
14876: LD_ADDR_EXP 45
14880: PUSH
14881: LD_INT 3
14883: ST_TO_ADDR
// def_starting_resources := 3 ;
14884: LD_ADDR_EXP 46
14888: PUSH
14889: LD_INT 3
14891: ST_TO_ADDR
// def_shipments_density := 1 ;
14892: LD_ADDR_EXP 47
14896: PUSH
14897: LD_INT 1
14899: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14900: LD_ADDR_EXP 48
14904: PUSH
14905: LD_INT 1
14907: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14908: LD_ADDR_EXP 49
14912: PUSH
14913: LD_INT 2
14915: ST_TO_ADDR
// def_shared_vision := 1 ;
14916: LD_ADDR_EXP 50
14920: PUSH
14921: LD_INT 1
14923: ST_TO_ADDR
// def_morale_flags := 0 ;
14924: LD_ADDR_EXP 51
14928: PUSH
14929: LD_INT 0
14931: ST_TO_ADDR
// def_siberite_detection := 1 ;
14932: LD_ADDR_EXP 52
14936: PUSH
14937: LD_INT 1
14939: ST_TO_ADDR
// def_people_respawning := 0 ;
14940: LD_ADDR_EXP 53
14944: PUSH
14945: LD_INT 0
14947: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14948: LD_ADDR_EXP 54
14952: PUSH
14953: LD_INT 1
14955: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14956: LD_ADDR_EXP 55
14960: PUSH
14961: LD_INT 0
14963: ST_TO_ADDR
// def_builduptime := 3 ;
14964: LD_ADDR_EXP 56
14968: PUSH
14969: LD_INT 3
14971: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14972: LD_ADDR_VAR 0 2
14976: PUSH
14977: LD_INT 23
14979: PUSH
14980: EMPTY
14981: LIST
14982: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
14983: LD_ADDR_VAR 0 3
14987: PUSH
14988: LD_INT 37
14990: PUSH
14991: EMPTY
14992: LIST
14993: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14994: LD_ADDR_LOC 25
14998: PUSH
14999: EMPTY
15000: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15001: LD_ADDR_LOC 26
15005: PUSH
15006: EMPTY
15007: ST_TO_ADDR
// Banned_Controls := [ ] ;
15008: LD_ADDR_LOC 27
15012: PUSH
15013: EMPTY
15014: ST_TO_ADDR
// Banned_Engines := [ ] ;
15015: LD_ADDR_LOC 28
15019: PUSH
15020: EMPTY
15021: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15022: LD_ADDR_LOC 23
15026: PUSH
15027: LD_INT 31
15029: PUSH
15030: LD_INT 32
15032: PUSH
15033: LD_INT 33
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
15044: LD_ADDR_LOC 24
15048: PUSH
15049: LD_INT 10
15051: PUSH
15052: EMPTY
15053: LIST
15054: ST_TO_ADDR
// end ; 8 :
15055: GO 15466
15057: LD_INT 8
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15465
15065: POP
// begin def_base_level := 0 ;
15066: LD_ADDR_EXP 43
15070: PUSH
15071: LD_INT 0
15073: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
15074: LD_ADDR_EXP 44
15078: PUSH
15079: LD_INT 0
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 12
15089: ST_TO_ADDR
// def_skill_level := 0 ;
15090: LD_ADDR_EXP 45
15094: PUSH
15095: LD_INT 0
15097: ST_TO_ADDR
// def_starting_resources := 2 ;
15098: LD_ADDR_EXP 46
15102: PUSH
15103: LD_INT 2
15105: ST_TO_ADDR
// def_shipments_density := 1 ;
15106: LD_ADDR_EXP 47
15110: PUSH
15111: LD_INT 1
15113: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15114: LD_ADDR_EXP 48
15118: PUSH
15119: LD_INT 0
15121: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15122: LD_ADDR_EXP 49
15126: PUSH
15127: LD_INT 0
15129: ST_TO_ADDR
// def_shared_vision := 1 ;
15130: LD_ADDR_EXP 50
15134: PUSH
15135: LD_INT 1
15137: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
15138: LD_ADDR_EXP 51
15142: PUSH
15143: LD_INT 0
15145: PPUSH
15146: LD_INT 2
15148: PPUSH
15149: CALL_OW 12
15153: ST_TO_ADDR
// def_siberite_detection := 0 ;
15154: LD_ADDR_EXP 52
15158: PUSH
15159: LD_INT 0
15161: ST_TO_ADDR
// def_people_respawning := 0 ;
15162: LD_ADDR_EXP 53
15166: PUSH
15167: LD_INT 0
15169: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
15170: LD_ADDR_EXP 54
15174: PUSH
15175: LD_INT 2
15177: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15178: LD_ADDR_EXP 55
15182: PUSH
15183: LD_INT 0
15185: ST_TO_ADDR
// def_builduptime := 0 ;
15186: LD_ADDR_EXP 56
15190: PUSH
15191: LD_INT 0
15193: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
15194: LD_ADDR_VAR 0 2
15198: PUSH
15199: LD_INT 23
15201: PUSH
15202: LD_INT 20
15204: PUSH
15205: LD_INT 40
15207: PUSH
15208: LD_INT 47
15210: PUSH
15211: LD_INT 46
15213: PUSH
15214: LD_INT 39
15216: PUSH
15217: LD_INT 71
15219: PUSH
15220: LD_INT 34
15222: PUSH
15223: LD_INT 41
15225: PUSH
15226: LD_INT 44
15228: PUSH
15229: LD_INT 17
15231: PUSH
15232: LD_INT 16
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
15249: LD_ADDR_VAR 0 3
15253: PUSH
15254: LD_INT 37
15256: PUSH
15257: LD_INT 5
15259: PUSH
15260: LD_INT 13
15262: PUSH
15263: LD_INT 34
15265: PUSH
15266: LD_INT 12
15268: PUSH
15269: LD_INT 15
15271: PUSH
15272: LD_INT 11
15274: PUSH
15275: LD_INT 14
15277: PUSH
15278: LD_INT 29
15280: PUSH
15281: LD_INT 30
15283: PUSH
15284: LD_INT 28
15286: PUSH
15287: LD_INT 24
15289: PUSH
15290: LD_INT 25
15292: PUSH
15293: LD_INT 20
15295: PUSH
15296: LD_INT 21
15298: PUSH
15299: LD_INT 22
15301: PUSH
15302: LD_INT 36
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15324: LD_ADDR_LOC 25
15328: PUSH
15329: EMPTY
15330: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
15331: LD_ADDR_LOC 26
15335: PUSH
15336: LD_INT 14
15338: PUSH
15339: EMPTY
15340: LIST
15341: ST_TO_ADDR
// Banned_Controls := [ ] ;
15342: LD_ADDR_LOC 27
15346: PUSH
15347: EMPTY
15348: ST_TO_ADDR
// Banned_Engines := [ ] ;
15349: LD_ADDR_LOC 28
15353: PUSH
15354: EMPTY
15355: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
15356: LD_ADDR_LOC 23
15360: PUSH
15361: LD_INT 31
15363: PUSH
15364: LD_INT 32
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 4
15373: PUSH
15374: EMPTY
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
15381: LD_ADDR_LOC 24
15385: PUSH
15386: LD_INT 2
15388: PUSH
15389: LD_INT 1
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: ST_TO_ADDR
// for i := 1 to 8 do
15396: LD_ADDR_VAR 0 4
15400: PUSH
15401: DOUBLE
15402: LD_INT 1
15404: DEC
15405: ST_TO_ADDR
15406: LD_INT 8
15408: PUSH
15409: FOR_TO
15410: IFFALSE 15461
// if ( Side_Nations [ i ] = 3 ) then
15412: LD_EXP 24
15416: PUSH
15417: LD_VAR 0 4
15421: ARRAY
15422: PUSH
15423: LD_INT 3
15425: EQUAL
15426: IFFALSE 15459
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
15428: LD_ADDR_EXP 24
15432: PUSH
15433: LD_EXP 24
15437: PPUSH
15438: LD_VAR 0 4
15442: PPUSH
15443: LD_INT 1
15445: PPUSH
15446: LD_INT 2
15448: PPUSH
15449: CALL_OW 12
15453: PPUSH
15454: CALL_OW 1
15458: ST_TO_ADDR
15459: GO 15409
15461: POP
15462: POP
// end ; end ;
15463: GO 15466
15465: POP
// for i := 1 to 8 do
15466: LD_ADDR_VAR 0 4
15470: PUSH
15471: DOUBLE
15472: LD_INT 1
15474: DEC
15475: ST_TO_ADDR
15476: LD_INT 8
15478: PUSH
15479: FOR_TO
15480: IFFALSE 15564
// if Side_Positions [ i ] then
15482: LD_EXP 23
15486: PUSH
15487: LD_VAR 0 4
15491: ARRAY
15492: IFFALSE 15562
// begin for j in Unavailable_Techs do
15494: LD_ADDR_VAR 0 5
15498: PUSH
15499: LD_VAR 0 2
15503: PUSH
15504: FOR_IN
15505: IFFALSE 15526
// SetTech ( j , i , 0 ) ;
15507: LD_VAR 0 5
15511: PPUSH
15512: LD_VAR 0 4
15516: PPUSH
15517: LD_INT 0
15519: PPUSH
15520: CALL_OW 322
15524: GO 15504
15526: POP
15527: POP
// for j in Unavailable_Builds do
15528: LD_ADDR_VAR 0 5
15532: PUSH
15533: LD_VAR 0 3
15537: PUSH
15538: FOR_IN
15539: IFFALSE 15560
// SetRestrict ( j , i , 0 ) ;
15541: LD_VAR 0 5
15545: PPUSH
15546: LD_VAR 0 4
15550: PPUSH
15551: LD_INT 0
15553: PPUSH
15554: CALL_OW 324
15558: GO 15538
15560: POP
15561: POP
// end ;
15562: GO 15479
15564: POP
15565: POP
// end ;
15566: LD_VAR 0 1
15570: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
15571: LD_INT 0
15573: PPUSH
15574: PPUSH
15575: PPUSH
15576: PPUSH
15577: PPUSH
15578: PPUSH
15579: PPUSH
// for i := 1 to Restricted_Builds do
15580: LD_ADDR_VAR 0 2
15584: PUSH
15585: DOUBLE
15586: LD_INT 1
15588: DEC
15589: ST_TO_ADDR
15590: LD_LOC 23
15594: PUSH
15595: FOR_TO
15596: IFFALSE 15906
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
15598: LD_LOC 23
15602: PUSH
15603: LD_VAR 0 2
15607: ARRAY
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PUSH
15613: LD_INT 31
15615: DOUBLE
15616: EQUAL
15617: IFTRUE 15633
15619: LD_INT 32
15621: DOUBLE
15622: EQUAL
15623: IFTRUE 15633
15625: LD_INT 33
15627: DOUBLE
15628: EQUAL
15629: IFTRUE 15633
15631: GO 15644
15633: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
15634: LD_ADDR_VAR 0 6
15638: PUSH
15639: LD_STRING #Turrets
15641: ST_TO_ADDR
15642: GO 15689
15644: LD_INT 4
15646: DOUBLE
15647: EQUAL
15648: IFTRUE 15658
15650: LD_INT 5
15652: DOUBLE
15653: EQUAL
15654: IFTRUE 15658
15656: GO 15669
15658: POP
// btype := #Armouries ; b_Behemoth :
15659: LD_ADDR_VAR 0 6
15663: PUSH
15664: LD_STRING #Armouries
15666: ST_TO_ADDR
15667: GO 15689
15669: LD_INT 37
15671: DOUBLE
15672: EQUAL
15673: IFTRUE 15677
15675: GO 15688
15677: POP
// btype := #Behemoths ; end ;
15678: LD_ADDR_VAR 0 6
15682: PUSH
15683: LD_STRING #Behemoths
15685: ST_TO_ADDR
15686: GO 15689
15688: POP
// list := [ ] ;
15689: LD_ADDR_VAR 0 7
15693: PUSH
15694: EMPTY
15695: ST_TO_ADDR
// for j := 1 to 8 do
15696: LD_ADDR_VAR 0 3
15700: PUSH
15701: DOUBLE
15702: LD_INT 1
15704: DEC
15705: ST_TO_ADDR
15706: LD_INT 8
15708: PUSH
15709: FOR_TO
15710: IFFALSE 15803
// if Side_Positions [ j ] then
15712: LD_EXP 23
15716: PUSH
15717: LD_VAR 0 3
15721: ARRAY
15722: IFFALSE 15801
// begin amount := 0 ;
15724: LD_ADDR_VAR 0 5
15728: PUSH
15729: LD_INT 0
15731: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
15732: LD_ADDR_VAR 0 4
15736: PUSH
15737: LD_LOC 23
15741: PUSH
15742: LD_VAR 0 2
15746: ARRAY
15747: PUSH
15748: FOR_IN
15749: IFFALSE 15797
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
15751: LD_ADDR_VAR 0 5
15755: PUSH
15756: LD_VAR 0 5
15760: PUSH
15761: LD_INT 22
15763: PUSH
15764: LD_VAR 0 3
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 30
15775: PUSH
15776: LD_VAR 0 4
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PPUSH
15789: CALL_OW 69
15793: PLUS
15794: ST_TO_ADDR
15795: GO 15748
15797: POP
15798: POP
// break ;
15799: GO 15803
// end ;
15801: GO 15709
15803: POP
15804: POP
// list := [ ] ;
15805: LD_ADDR_VAR 0 7
15809: PUSH
15810: EMPTY
15811: ST_TO_ADDR
// for j := 1 to 8 do
15812: LD_ADDR_VAR 0 3
15816: PUSH
15817: DOUBLE
15818: LD_INT 1
15820: DEC
15821: ST_TO_ADDR
15822: LD_INT 8
15824: PUSH
15825: FOR_TO
15826: IFFALSE 15846
// list := list ^ amount ;
15828: LD_ADDR_VAR 0 7
15832: PUSH
15833: LD_VAR 0 7
15837: PUSH
15838: LD_VAR 0 5
15842: ADD
15843: ST_TO_ADDR
15844: GO 15825
15846: POP
15847: POP
// Already_Built := Already_Built ^ [ list ] ;
15848: LD_ADDR_LOC 29
15852: PUSH
15853: LD_LOC 29
15857: PUSH
15858: LD_VAR 0 7
15862: PUSH
15863: EMPTY
15864: LIST
15865: ADD
15866: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15867: LD_ADDR_LOC 30
15871: PUSH
15872: LD_LOC 30
15876: PUSH
15877: LD_VAR 0 6
15881: PUSH
15882: LD_VAR 0 5
15886: PUSH
15887: LD_LOC 24
15891: PUSH
15892: LD_VAR 0 2
15896: ARRAY
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: ADD
15903: ST_TO_ADDR
// end ;
15904: GO 15595
15906: POP
15907: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15908: LD_ADDR_LOC 31
15912: PUSH
15913: LD_INT 0
15915: PUSH
15916: LD_INT 0
15918: PUSH
15919: LD_INT 0
15921: PUSH
15922: LD_INT 0
15924: PUSH
15925: LD_INT 0
15927: PUSH
15928: LD_INT 0
15930: PUSH
15931: LD_INT 0
15933: PUSH
15934: LD_INT 0
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: ST_TO_ADDR
// if Limits_Info then
15947: LD_LOC 30
15951: IFFALSE 15967
// Limits_Info := #Limits ^ Limits_Info ;
15953: LD_ADDR_LOC 30
15957: PUSH
15958: LD_STRING #Limits
15960: PUSH
15961: LD_LOC 30
15965: ADD
15966: ST_TO_ADDR
// end ;
15967: LD_VAR 0 1
15971: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15972: LD_INT 0
15974: PPUSH
15975: PPUSH
15976: PPUSH
15977: PPUSH
// for i := 1 to Restricted_Builds do
15978: LD_ADDR_VAR 0 7
15982: PUSH
15983: DOUBLE
15984: LD_INT 1
15986: DEC
15987: ST_TO_ADDR
15988: LD_LOC 23
15992: PUSH
15993: FOR_TO
15994: IFFALSE 16417
// if BType in Restricted_Builds [ i ] then
15996: LD_VAR 0 2
16000: PUSH
16001: LD_LOC 23
16005: PUSH
16006: LD_VAR 0 7
16010: ARRAY
16011: IN
16012: IFFALSE 16415
// begin if old_side then
16014: LD_VAR 0 4
16018: IFFALSE 16144
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
16020: LD_LOC 29
16024: PUSH
16025: LD_VAR 0 7
16029: ARRAY
16030: PUSH
16031: LD_VAR 0 3
16035: ARRAY
16036: PUSH
16037: LD_VAR 0 5
16041: PLUS
16042: PUSH
16043: LD_LOC 24
16047: PUSH
16048: LD_VAR 0 7
16052: ARRAY
16053: GREATER
16054: IFFALSE 16080
// begin SetSide ( un , old_side ) ;
16056: LD_VAR 0 1
16060: PPUSH
16061: LD_VAR 0 4
16065: PPUSH
16066: CALL_OW 235
// count := 0 ;
16070: LD_ADDR_VAR 0 5
16074: PUSH
16075: LD_INT 0
16077: ST_TO_ADDR
// end else
16078: GO 16144
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
16080: LD_ADDR_LOC 29
16084: PUSH
16085: LD_LOC 29
16089: PPUSH
16090: LD_VAR 0 7
16094: PPUSH
16095: LD_LOC 29
16099: PUSH
16100: LD_VAR 0 7
16104: ARRAY
16105: PPUSH
16106: LD_VAR 0 4
16110: PPUSH
16111: LD_LOC 29
16115: PUSH
16116: LD_VAR 0 7
16120: ARRAY
16121: PUSH
16122: LD_VAR 0 4
16126: ARRAY
16127: PUSH
16128: LD_VAR 0 5
16132: MINUS
16133: PPUSH
16134: CALL_OW 1
16138: PPUSH
16139: CALL_OW 1
16143: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
16144: LD_ADDR_LOC 29
16148: PUSH
16149: LD_LOC 29
16153: PPUSH
16154: LD_VAR 0 7
16158: PPUSH
16159: LD_LOC 29
16163: PUSH
16164: LD_VAR 0 7
16168: ARRAY
16169: PPUSH
16170: LD_VAR 0 3
16174: PPUSH
16175: LD_LOC 29
16179: PUSH
16180: LD_VAR 0 7
16184: ARRAY
16185: PUSH
16186: LD_VAR 0 3
16190: ARRAY
16191: PUSH
16192: LD_VAR 0 5
16196: PLUS
16197: PPUSH
16198: CALL_OW 1
16202: PPUSH
16203: CALL_OW 1
16207: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
16208: LD_VAR 0 5
16212: PUSH
16213: LD_INT 0
16215: NONEQUAL
16216: PUSH
16217: LD_VAR 0 3
16221: PUSH
16222: LD_OWVAR 2
16226: EQUAL
16227: AND
16228: IFFALSE 16271
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
16230: LD_ADDR_LOC 30
16234: PUSH
16235: LD_LOC 30
16239: PPUSH
16240: LD_INT 3
16242: PUSH
16243: LD_VAR 0 7
16247: MUL
16248: PPUSH
16249: LD_LOC 29
16253: PUSH
16254: LD_VAR 0 7
16258: ARRAY
16259: PUSH
16260: LD_VAR 0 3
16264: ARRAY
16265: PPUSH
16266: CALL_OW 1
16270: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
16271: LD_LOC 29
16275: PUSH
16276: LD_VAR 0 7
16280: ARRAY
16281: PUSH
16282: LD_VAR 0 3
16286: ARRAY
16287: PUSH
16288: LD_LOC 24
16292: PUSH
16293: LD_VAR 0 7
16297: ARRAY
16298: GREATER
16299: IFFALSE 16326
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
16301: LD_ADDR_LOC 31
16305: PUSH
16306: LD_LOC 31
16310: PPUSH
16311: LD_VAR 0 3
16315: PPUSH
16316: LD_INT 1
16318: PPUSH
16319: CALL_OW 1
16323: ST_TO_ADDR
// end else
16324: GO 16413
// begin for j := 1 to Restricted_Builds do
16326: LD_ADDR_VAR 0 8
16330: PUSH
16331: DOUBLE
16332: LD_INT 1
16334: DEC
16335: ST_TO_ADDR
16336: LD_LOC 23
16340: PUSH
16341: FOR_TO
16342: IFFALSE 16386
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
16344: LD_LOC 29
16348: PUSH
16349: LD_VAR 0 8
16353: ARRAY
16354: PUSH
16355: LD_VAR 0 3
16359: ARRAY
16360: PUSH
16361: LD_LOC 24
16365: PUSH
16366: LD_VAR 0 8
16370: ARRAY
16371: GREATER
16372: IFFALSE 16384
// begin Is_Cheater := true ;
16374: LD_ADDR_VAR 0 9
16378: PUSH
16379: LD_INT 1
16381: ST_TO_ADDR
// break ;
16382: GO 16386
// end ;
16384: GO 16341
16386: POP
16387: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
16388: LD_ADDR_LOC 31
16392: PUSH
16393: LD_LOC 31
16397: PPUSH
16398: LD_VAR 0 3
16402: PPUSH
16403: LD_VAR 0 9
16407: PPUSH
16408: CALL_OW 1
16412: ST_TO_ADDR
// end ; break ;
16413: GO 16417
// end ;
16415: GO 15993
16417: POP
16418: POP
// end ;
16419: LD_VAR 0 6
16423: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
16424: LD_VAR 0 5
16428: PUSH
16429: LD_LOC 25
16433: IN
16434: PUSH
16435: LD_VAR 0 2
16439: PUSH
16440: LD_LOC 26
16444: IN
16445: OR
16446: PUSH
16447: LD_VAR 0 4
16451: PUSH
16452: LD_LOC 27
16456: IN
16457: OR
16458: PUSH
16459: LD_VAR 0 3
16463: PUSH
16464: LD_LOC 28
16468: IN
16469: OR
16470: IFFALSE 16481
// ComCancel ( factory ) ;
16472: LD_VAR 0 1
16476: PPUSH
16477: CALL_OW 127
// end ;
16481: PPOPN 5
16483: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
16484: LD_VAR 0 2
16488: PUSH
16489: LD_LOC 25
16493: IN
16494: IFFALSE 16505
// ComCancel ( building ) ;
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 127
// end ; end_of_file
16505: PPOPN 2
16507: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
16508: LD_INT 0
16510: PPUSH
16511: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
16512: LD_ADDR_VAR 0 2
16516: PUSH
16517: LD_STRING #Multi1x1-Time
16519: PUSH
16520: LD_OWVAR 1
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: ST_TO_ADDR
// if WaitServerStrings then
16529: LD_EXP 59
16533: IFFALSE 16551
// AllStrings = AllStrings ^ WaitServerStrings ;
16535: LD_ADDR_VAR 0 2
16539: PUSH
16540: LD_VAR 0 2
16544: PUSH
16545: LD_EXP 59
16549: ADD
16550: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
16551: LD_INT 0
16553: PUSH
16554: LD_EXP 18
16558: PUSH
16559: LD_OWVAR 1
16563: MINUS
16564: LESSEQUAL
16565: IFFALSE 16596
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
16567: LD_ADDR_VAR 0 2
16571: PUSH
16572: LD_VAR 0 2
16576: PUSH
16577: LD_STRING #allowedsibbomb
16579: PUSH
16580: LD_EXP 18
16584: PUSH
16585: LD_OWVAR 1
16589: MINUS
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: ADD
16595: ST_TO_ADDR
// if ( ExtraStrings ) then
16596: LD_EXP 58
16600: IFFALSE 16622
// AllStrings := AllStrings ^  ^ ExtraStrings ;
16602: LD_ADDR_VAR 0 2
16606: PUSH
16607: LD_VAR 0 2
16611: PUSH
16612: LD_STRING 
16614: ADD
16615: PUSH
16616: LD_EXP 58
16620: ADD
16621: ST_TO_ADDR
// if Display_kings and not isSGUI then
16622: LD_EXP 60
16626: PUSH
16627: LD_OWVAR 83
16631: NOT
16632: AND
16633: IFFALSE 16651
// AllStrings = AllStrings ^ Display_kings ;
16635: LD_ADDR_VAR 0 2
16639: PUSH
16640: LD_VAR 0 2
16644: PUSH
16645: LD_EXP 60
16649: ADD
16650: ST_TO_ADDR
// if ( LimitsStrings ) then
16651: CALL 13348 0 0
16655: IFFALSE 16677
// AllStrings := AllStrings ^  ^ LimitsStrings ;
16657: LD_ADDR_VAR 0 2
16661: PUSH
16662: LD_VAR 0 2
16666: PUSH
16667: LD_STRING 
16669: ADD
16670: PUSH
16671: CALL 13348 0 0
16675: ADD
16676: ST_TO_ADDR
// Display_Strings := AllStrings ;
16677: LD_ADDR_OWVAR 47
16681: PUSH
16682: LD_VAR 0 2
16686: ST_TO_ADDR
// end ;
16687: LD_VAR 0 1
16691: RET
// every 0 0$1 do
16692: GO 16694
16694: DISABLE
// begin ShowTimer ;
16695: CALL 16508 0 0
// enable ;
16699: ENABLE
// end ; end_of_file
16700: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
16701: LD_INT 0
16703: PPUSH
16704: PPUSH
16705: PPUSH
// sharedPoints1 = [ ] ;
16706: LD_ADDR_LOC 32
16710: PUSH
16711: EMPTY
16712: ST_TO_ADDR
// sharedPoints2 = [ ] ;
16713: LD_ADDR_LOC 33
16717: PUSH
16718: EMPTY
16719: ST_TO_ADDR
// sharedPoints3 = [ ] ;
16720: LD_ADDR_LOC 34
16724: PUSH
16725: EMPTY
16726: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
16727: LD_ADDR_VAR 0 2
16731: PUSH
16732: DOUBLE
16733: LD_INT 1
16735: DEC
16736: ST_TO_ADDR
16737: LD_EXP 23
16741: PUSH
16742: LD_INT 0
16744: PLUS
16745: PUSH
16746: FOR_TO
16747: IFFALSE 16849
// begin if not Side_Positions [ i ] = 0 then
16749: LD_EXP 23
16753: PUSH
16754: LD_VAR 0 2
16758: ARRAY
16759: PUSH
16760: LD_INT 0
16762: EQUAL
16763: NOT
16764: IFFALSE 16778
// SetMultiScore ( i , 0 ) ;
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_INT 0
16773: PPUSH
16774: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
16778: LD_ADDR_LOC 32
16782: PUSH
16783: LD_LOC 32
16787: PPUSH
16788: LD_VAR 0 2
16792: PPUSH
16793: LD_INT 0
16795: PPUSH
16796: CALL_OW 1
16800: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
16801: LD_ADDR_LOC 33
16805: PUSH
16806: LD_LOC 33
16810: PPUSH
16811: LD_VAR 0 2
16815: PPUSH
16816: LD_INT 0
16818: PPUSH
16819: CALL_OW 1
16823: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
16824: LD_ADDR_LOC 34
16828: PUSH
16829: LD_LOC 34
16833: PPUSH
16834: LD_VAR 0 2
16838: PPUSH
16839: LD_INT 0
16841: PPUSH
16842: CALL_OW 1
16846: ST_TO_ADDR
// end ;
16847: GO 16746
16849: POP
16850: POP
// pointGame = true ;
16851: LD_ADDR_LOC 35
16855: PUSH
16856: LD_INT 1
16858: ST_TO_ADDR
// end ;
16859: LD_VAR 0 1
16863: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
16864: LD_LOC 35
16868: IFFALSE 17279
16870: GO 16872
16872: DISABLE
16873: LD_INT 0
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
16879: PPUSH
16880: PPUSH
16881: PPUSH
16882: PPUSH
16883: PPUSH
16884: PPUSH
16885: PPUSH
16886: PPUSH
16887: PPUSH
// begin if isSGUI then
16888: LD_OWVAR 83
16892: IFFALSE 17279
// begin if Teams [ 1 ] then
16894: LD_EXP 22
16898: PUSH
16899: LD_INT 1
16901: ARRAY
16902: IFFALSE 16914
// red = true else
16904: LD_ADDR_VAR 0 2
16908: PUSH
16909: LD_INT 1
16911: ST_TO_ADDR
16912: GO 16922
// red = false ;
16914: LD_ADDR_VAR 0 2
16918: PUSH
16919: LD_INT 0
16921: ST_TO_ADDR
// if Teams [ 2 ] then
16922: LD_EXP 22
16926: PUSH
16927: LD_INT 2
16929: ARRAY
16930: IFFALSE 16942
// blue = true else
16932: LD_ADDR_VAR 0 3
16936: PUSH
16937: LD_INT 1
16939: ST_TO_ADDR
16940: GO 16950
// blue = false ;
16942: LD_ADDR_VAR 0 3
16946: PUSH
16947: LD_INT 0
16949: ST_TO_ADDR
// if Teams [ 3 ] then
16950: LD_EXP 22
16954: PUSH
16955: LD_INT 3
16957: ARRAY
16958: IFFALSE 16970
// yel = true else
16960: LD_ADDR_VAR 0 4
16964: PUSH
16965: LD_INT 1
16967: ST_TO_ADDR
16968: GO 16978
// yel = false ;
16970: LD_ADDR_VAR 0 4
16974: PUSH
16975: LD_INT 0
16977: ST_TO_ADDR
// if Teams [ 4 ] then
16978: LD_EXP 22
16982: PUSH
16983: LD_INT 4
16985: ARRAY
16986: IFFALSE 16998
// green = true else
16988: LD_ADDR_VAR 0 5
16992: PUSH
16993: LD_INT 1
16995: ST_TO_ADDR
16996: GO 17006
// green = false ;
16998: LD_ADDR_VAR 0 5
17002: PUSH
17003: LD_INT 0
17005: ST_TO_ADDR
// if def_public_score then
17006: LD_EXP 6
17010: IFFALSE 17022
// p = true else
17012: LD_ADDR_VAR 0 12
17016: PUSH
17017: LD_INT 1
17019: ST_TO_ADDR
17020: GO 17030
// p = false ;
17022: LD_ADDR_VAR 0 12
17026: PUSH
17027: LD_INT 0
17029: ST_TO_ADDR
// if team_game then
17030: LD_EXP 25
17034: IFFALSE 17115
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
17036: LD_ADDR_VAR 0 13
17040: PUSH
17041: LD_INT 3
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: LD_INT 2
17049: PUSH
17050: LD_INT 7
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: PUSH
17059: LD_EXP 28
17063: ARRAY
17064: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
17065: LD_ADDR_VAR 0 10
17069: PUSH
17070: LD_STRING {
17072: PUSH
17073: LD_VAR 0 3
17077: STR
17078: PUSH
17079: LD_STRING ,
17081: STR
17082: PUSH
17083: LD_VAR 0 4
17087: STR
17088: PUSH
17089: LD_STRING ,
17091: STR
17092: PUSH
17093: LD_VAR 0 2
17097: STR
17098: PUSH
17099: LD_STRING ,0,0,0,
17101: STR
17102: PUSH
17103: LD_VAR 0 5
17107: STR
17108: PUSH
17109: LD_STRING ,0}
17111: STR
17112: ST_TO_ADDR
// end else
17113: GO 17215
// begin you = your_side ;
17115: LD_ADDR_VAR 0 13
17119: PUSH
17120: LD_OWVAR 2
17124: ST_TO_ADDR
// s = { ;
17125: LD_ADDR_VAR 0 10
17129: PUSH
17130: LD_STRING {
17132: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
17133: LD_ADDR_VAR 0 1
17137: PUSH
17138: DOUBLE
17139: LD_INT 1
17141: DEC
17142: ST_TO_ADDR
17143: LD_EXP 23
17147: PUSH
17148: LD_INT 0
17150: PLUS
17151: PUSH
17152: FOR_TO
17153: IFFALSE 17199
// if side_positions [ i ] then
17155: LD_EXP 23
17159: PUSH
17160: LD_VAR 0 1
17164: ARRAY
17165: IFFALSE 17183
// s = s & 1, else
17167: LD_ADDR_VAR 0 10
17171: PUSH
17172: LD_VAR 0 10
17176: PUSH
17177: LD_STRING 1,
17179: STR
17180: ST_TO_ADDR
17181: GO 17197
// s = s & 0, ;
17183: LD_ADDR_VAR 0 10
17187: PUSH
17188: LD_VAR 0 10
17192: PUSH
17193: LD_STRING 0,
17195: STR
17196: ST_TO_ADDR
17197: GO 17152
17199: POP
17200: POP
// s = s & } ;
17201: LD_ADDR_VAR 0 10
17205: PUSH
17206: LD_VAR 0 10
17210: PUSH
17211: LD_STRING }
17213: STR
17214: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
17215: LD_STRING initScore(
17217: PUSH
17218: LD_VAR 0 10
17222: STR
17223: PUSH
17224: LD_STRING ,
17226: STR
17227: PUSH
17228: LD_VAR 0 12
17232: STR
17233: PUSH
17234: LD_STRING ,
17236: STR
17237: PUSH
17238: LD_VAR 0 13
17242: STR
17243: PUSH
17244: LD_STRING  );
17246: STR
17247: PPUSH
17248: CALL_OW 559
// if game_type = 3 then
17252: LD_EXP 41
17256: PUSH
17257: LD_INT 3
17259: EQUAL
17260: IFFALSE 17279
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
17262: LD_STRING AddScorePoints(2,2,
17264: PUSH
17265: LD_EXP 20
17269: STR
17270: PUSH
17271: LD_STRING  );
17273: STR
17274: PPUSH
17275: CALL_OW 559
// end ; end ;
17279: PPOPN 13
17281: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
17282: LD_INT 0
17284: PPUSH
17285: PPUSH
// case typ of 1 :
17286: LD_VAR 0 3
17290: PUSH
17291: LD_INT 1
17293: DOUBLE
17294: EQUAL
17295: IFTRUE 17299
17297: GO 17327
17299: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
17300: LD_ADDR_LOC 32
17304: PUSH
17305: LD_LOC 32
17309: PPUSH
17310: LD_VAR 0 1
17314: PPUSH
17315: LD_VAR 0 2
17319: PPUSH
17320: CALL_OW 1
17324: ST_TO_ADDR
17325: GO 17400
17327: LD_INT 2
17329: DOUBLE
17330: EQUAL
17331: IFTRUE 17335
17333: GO 17363
17335: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
17336: LD_ADDR_LOC 33
17340: PUSH
17341: LD_LOC 33
17345: PPUSH
17346: LD_VAR 0 1
17350: PPUSH
17351: LD_VAR 0 2
17355: PPUSH
17356: CALL_OW 1
17360: ST_TO_ADDR
17361: GO 17400
17363: LD_INT 3
17365: DOUBLE
17366: EQUAL
17367: IFTRUE 17371
17369: GO 17399
17371: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
17372: LD_ADDR_LOC 34
17376: PUSH
17377: LD_LOC 34
17381: PPUSH
17382: LD_VAR 0 1
17386: PPUSH
17387: LD_VAR 0 2
17391: PPUSH
17392: CALL_OW 1
17396: ST_TO_ADDR
17397: GO 17400
17399: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
17400: LD_ADDR_VAR 0 5
17404: PUSH
17405: LD_LOC 32
17409: PUSH
17410: LD_VAR 0 1
17414: ARRAY
17415: PUSH
17416: LD_LOC 33
17420: PUSH
17421: LD_VAR 0 1
17425: ARRAY
17426: PLUS
17427: PUSH
17428: LD_LOC 34
17432: PUSH
17433: LD_VAR 0 1
17437: ARRAY
17438: PLUS
17439: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
17440: LD_VAR 0 1
17444: PPUSH
17445: LD_VAR 0 5
17449: PPUSH
17450: CALL_OW 506
// end ; end_of_file
17454: LD_VAR 0 4
17458: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
17459: LD_INT 0
17461: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 255
17471: PUSH
17472: LD_VAR 0 4
17476: EQUAL
17477: IFFALSE 17496
// begin SetAchievement ( ACH_RAD ) ;
17479: LD_STRING ACH_RAD
17481: PPUSH
17482: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
17486: LD_STRING ACH_NL
17488: PPUSH
17489: LD_INT 1
17491: PPUSH
17492: CALL_OW 564
// end end ;
17496: LD_VAR 0 5
17500: RET
// export function SA_Win ( side ) ; begin
17501: LD_INT 0
17503: PPUSH
// case side of 1 :
17504: LD_VAR 0 1
17508: PUSH
17509: LD_INT 1
17511: DOUBLE
17512: EQUAL
17513: IFTRUE 17517
17515: GO 17530
17517: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
17518: LD_STRING ACH_AH
17520: PPUSH
17521: LD_INT 1
17523: PPUSH
17524: CALL_OW 564
17528: GO 17693
17530: LD_INT 2
17532: DOUBLE
17533: EQUAL
17534: IFTRUE 17538
17536: GO 17551
17538: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
17539: LD_STRING ACH_E
17541: PPUSH
17542: LD_INT 1
17544: PPUSH
17545: CALL_OW 564
17549: GO 17693
17551: LD_INT 3
17553: DOUBLE
17554: EQUAL
17555: IFTRUE 17559
17557: GO 17572
17559: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
17560: LD_STRING ACH_OOL
17562: PPUSH
17563: LD_INT 1
17565: PPUSH
17566: CALL_OW 564
17570: GO 17693
17572: LD_INT 1
17574: PUSH
17575: LD_INT 2
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: DOUBLE
17582: EQUAL
17583: IFTRUE 17587
17585: GO 17612
17587: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17588: LD_STRING ACH_AH
17590: PPUSH
17591: LD_REAL  5.00000000000000E-0001
17594: PPUSH
17595: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17599: LD_STRING ACH_E
17601: PPUSH
17602: LD_REAL  5.00000000000000E-0001
17605: PPUSH
17606: CALL_OW 564
// end ; [ 2 , 3 ] :
17610: GO 17693
17612: LD_INT 2
17614: PUSH
17615: LD_INT 3
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: DOUBLE
17622: EQUAL
17623: IFTRUE 17627
17625: GO 17652
17627: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
17628: LD_STRING ACH_OOL
17630: PPUSH
17631: LD_REAL  5.00000000000000E-0001
17634: PPUSH
17635: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17639: LD_STRING ACH_E
17641: PPUSH
17642: LD_REAL  5.00000000000000E-0001
17645: PPUSH
17646: CALL_OW 564
// end ; [ 3 , 1 ] :
17650: GO 17693
17652: LD_INT 3
17654: PUSH
17655: LD_INT 1
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: DOUBLE
17662: EQUAL
17663: IFTRUE 17667
17665: GO 17692
17667: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17668: LD_STRING ACH_AH
17670: PPUSH
17671: LD_REAL  5.00000000000000E-0001
17674: PPUSH
17675: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
17679: LD_STRING ACH_OOL
17681: PPUSH
17682: LD_REAL  5.00000000000000E-0001
17685: PPUSH
17686: CALL_OW 564
// end ; end ;
17690: GO 17693
17692: POP
// end ; end_of_file
17693: LD_VAR 0 2
17697: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
17698: LD_INT 0
17700: PPUSH
17701: PPUSH
// enable ( 98 ) ;
17702: LD_INT 98
17704: ENABLE_MARKED
// GameEnded = false ;
17705: LD_ADDR_LOC 37
17709: PUSH
17710: LD_INT 0
17712: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
17713: LD_ADDR_LOC 36
17717: PUSH
17718: LD_INT 0
17720: PUSH
17721: LD_INT 0
17723: PUSH
17724: LD_INT 0
17726: PUSH
17727: LD_INT 0
17729: PUSH
17730: LD_INT 0
17732: PUSH
17733: LD_INT 0
17735: PUSH
17736: LD_INT 0
17738: PUSH
17739: LD_INT 0
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: ST_TO_ADDR
// unfoged = false ;
17752: LD_ADDR_LOC 38
17756: PUSH
17757: LD_INT 0
17759: ST_TO_ADDR
// for i = 1 to side_positions do
17760: LD_ADDR_VAR 0 2
17764: PUSH
17765: DOUBLE
17766: LD_INT 1
17768: DEC
17769: ST_TO_ADDR
17770: LD_EXP 23
17774: PUSH
17775: FOR_TO
17776: IFFALSE 17816
// if not side_positions [ i ] then
17778: LD_EXP 23
17782: PUSH
17783: LD_VAR 0 2
17787: ARRAY
17788: NOT
17789: IFFALSE 17814
// defaited = replace ( defaited , i , true ) ;
17791: LD_ADDR_LOC 36
17795: PUSH
17796: LD_LOC 36
17800: PPUSH
17801: LD_VAR 0 2
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: CALL_OW 1
17813: ST_TO_ADDR
17814: GO 17775
17816: POP
17817: POP
// end ;
17818: LD_VAR 0 1
17822: RET
// function CanWinLoose ; begin
17823: LD_INT 0
17825: PPUSH
// Result := true ;
17826: LD_ADDR_VAR 0 1
17830: PUSH
17831: LD_INT 1
17833: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
17834: CALL_OW 518
17838: PUSH
17839: CALL_OW 519
17843: PUSH
17844: LD_INT 0
17846: GREATER
17847: AND
17848: IFFALSE 17858
// Result := false ;
17850: LD_ADDR_VAR 0 1
17854: PUSH
17855: LD_INT 0
17857: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
17858: CALL_OW 531
17862: PUSH
17863: CALL_OW 519
17867: PUSH
17868: LD_INT 1
17870: GREATER
17871: AND
17872: IFFALSE 17882
// Result := false ;
17874: LD_ADDR_VAR 0 1
17878: PUSH
17879: LD_INT 0
17881: ST_TO_ADDR
// end ;
17882: LD_VAR 0 1
17886: RET
// export function HasPower ( i ) ; var k , h ; begin
17887: LD_INT 0
17889: PPUSH
17890: PPUSH
17891: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 108
17901: NOT
17902: PUSH
17903: LD_EXP 26
17907: PUSH
17908: LD_VAR 0 1
17912: ARRAY
17913: NOT
17914: AND
17915: PUSH
17916: LD_OWVAR 4
17920: AND
17921: IFFALSE 17933
// begin result = false ;
17923: LD_ADDR_VAR 0 2
17927: PUSH
17928: LD_INT 0
17930: ST_TO_ADDR
// end else
17931: GO 18228
// case def_win_rules of 0 :
17933: LD_EXP 19
17937: PUSH
17938: LD_INT 0
17940: DOUBLE
17941: EQUAL
17942: IFTRUE 17946
17944: GO 18109
17946: POP
// if def_people_respawning then
17947: LD_EXP 53
17951: IFFALSE 18042
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
17953: LD_ADDR_VAR 0 2
17957: PUSH
17958: LD_INT 22
17960: PUSH
17961: LD_VAR 0 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 2
17972: PUSH
17973: LD_INT 21
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 33
17985: PUSH
17986: LD_INT 3
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 33
17995: PUSH
17996: LD_INT 5
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 30
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 30
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PPUSH
18035: CALL_OW 69
18039: ST_TO_ADDR
18040: GO 18107
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18042: LD_ADDR_VAR 0 2
18046: PUSH
18047: LD_INT 22
18049: PUSH
18050: LD_VAR 0 1
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 2
18061: PUSH
18062: LD_INT 21
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 33
18074: PUSH
18075: LD_INT 3
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 33
18084: PUSH
18085: LD_INT 5
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: ST_TO_ADDR
18107: GO 18228
18109: LD_INT 1
18111: DOUBLE
18112: EQUAL
18113: IFTRUE 18117
18115: GO 18156
18117: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
18118: LD_ADDR_VAR 0 2
18122: PUSH
18123: LD_INT 22
18125: PUSH
18126: LD_VAR 0 1
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 21
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 69
18153: ST_TO_ADDR
18154: GO 18228
18156: LD_INT 2
18158: DOUBLE
18159: EQUAL
18160: IFTRUE 18164
18162: GO 18227
18164: POP
// begin h = false ;
18165: LD_ADDR_VAR 0 4
18169: PUSH
18170: LD_INT 0
18172: ST_TO_ADDR
// for k in heroes [ i ] do
18173: LD_ADDR_VAR 0 3
18177: PUSH
18178: LD_EXP 35
18182: PUSH
18183: LD_VAR 0 1
18187: ARRAY
18188: PUSH
18189: FOR_IN
18190: IFFALSE 18213
// if IsLive ( k ) then
18192: LD_VAR 0 3
18196: PPUSH
18197: CALL_OW 300
18201: IFFALSE 18211
// h = true ;
18203: LD_ADDR_VAR 0 4
18207: PUSH
18208: LD_INT 1
18210: ST_TO_ADDR
18211: GO 18189
18213: POP
18214: POP
// Result := h ;
18215: LD_ADDR_VAR 0 2
18219: PUSH
18220: LD_VAR 0 4
18224: ST_TO_ADDR
// end ; end ;
18225: GO 18228
18227: POP
// end ;
18228: LD_VAR 0 2
18232: RET
// function AlliedSides ( i , j ) ; begin
18233: LD_INT 0
18235: PPUSH
// Result := false ;
18236: LD_ADDR_VAR 0 3
18240: PUSH
18241: LD_INT 0
18243: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
18244: LD_VAR 0 1
18248: PPUSH
18249: LD_VAR 0 2
18253: PPUSH
18254: CALL_OW 81
18258: PUSH
18259: LD_INT 1
18261: EQUAL
18262: PUSH
18263: LD_VAR 0 2
18267: PPUSH
18268: LD_VAR 0 1
18272: PPUSH
18273: CALL_OW 81
18277: PUSH
18278: LD_INT 1
18280: EQUAL
18281: AND
18282: PUSH
18283: LD_VAR 0 1
18287: PPUSH
18288: CALL_OW 83
18292: AND
18293: PUSH
18294: LD_VAR 0 2
18298: PPUSH
18299: CALL_OW 83
18303: AND
18304: IFFALSE 18314
// Result := true ;
18306: LD_ADDR_VAR 0 3
18310: PUSH
18311: LD_INT 1
18313: ST_TO_ADDR
// end ;
18314: LD_VAR 0 3
18318: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
18319: CALL 17823 0 0
18323: PUSH
18324: LD_LOC 37
18328: NOT
18329: AND
18330: IFFALSE 18346
18332: GO 18334
18334: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
18335: LD_ADDR_EXP 59
18339: PUSH
18340: LD_STRING #Player-Ended
18342: PUSH
18343: EMPTY
18344: LIST
18345: ST_TO_ADDR
18346: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
18347: CALL 17823 0 0
18351: PUSH
18352: LD_LOC 37
18356: AND
18357: IFFALSE 18366
18359: GO 18361
18361: DISABLE
// YouLostInMultiplayer ;
18362: CALL_OW 107
18366: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
18367: CALL 17823 0 0
18371: NOT
18372: PUSH
18373: CALL_OW 531
18377: NOT
18378: AND
18379: IFFALSE 18395
18381: GO 18383
18383: DISABLE
// WaitServerStrings = [ #server-wait ] ;
18384: LD_ADDR_EXP 59
18388: PUSH
18389: LD_STRING #server-wait
18391: PUSH
18392: EMPTY
18393: LIST
18394: ST_TO_ADDR
18395: END
// every 100 trigger IAmSpec do
18396: CALL_OW 531
18400: IFFALSE 18416
18402: GO 18404
18404: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
18405: LD_ADDR_EXP 59
18409: PUSH
18410: LD_STRING #Player-IAmSpec
18412: PUSH
18413: EMPTY
18414: LIST
18415: ST_TO_ADDR
18416: END
// every 100 trigger GameEnded and IAmSpec do
18417: LD_LOC 37
18421: PUSH
18422: CALL_OW 531
18426: AND
18427: IFFALSE 18436
18429: GO 18431
18431: DISABLE
// YouLostInMultiplayer ;
18432: CALL_OW 107
18436: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
18437: CALL 17823 0 0
18441: PUSH
18442: LD_LOC 37
18446: NOT
18447: AND
18448: IFFALSE 18464
18450: GO 18452
18452: DISABLE
// WaitServerStrings = [ $player-win ] ;
18453: LD_ADDR_EXP 59
18457: PUSH
18458: LD_STRING $player-win
18460: PUSH
18461: EMPTY
18462: LIST
18463: ST_TO_ADDR
18464: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
18465: CALL 17823 0 0
18469: PUSH
18470: LD_LOC 37
18474: AND
18475: IFFALSE 18499
18477: GO 18479
18479: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
18480: LD_EXP 24
18484: PUSH
18485: LD_OWVAR 2
18489: ARRAY
18490: PPUSH
18491: CALL 17501 0 1
// YouWinInMultiplayer ;
18495: CALL_OW 106
// end ;
18499: END
// every 100 trigger isEditor marked 401 do
18500: LD_OWVAR 84
18504: IFFALSE 18520
18506: GO 18508
18508: DISABLE
// Debug_Strings = [ You won ] ;
18509: LD_ADDR_OWVAR 48
18513: PUSH
18514: LD_STRING You won
18516: PUSH
18517: EMPTY
18518: LIST
18519: ST_TO_ADDR
18520: END
// every 100 trigger isEditor marked 400 do
18521: LD_OWVAR 84
18525: IFFALSE 18541
18527: GO 18529
18529: DISABLE
// Debug_Strings = [ You loss ] ;
18530: LD_ADDR_OWVAR 48
18534: PUSH
18535: LD_STRING You loss
18537: PUSH
18538: EMPTY
18539: LIST
18540: ST_TO_ADDR
18541: END
// every 100 marked 98 do var i , un ;
18542: GO 18544
18544: DISABLE
18545: LD_INT 0
18547: PPUSH
18548: PPUSH
// begin for i = 1 to side_positions do
18549: LD_ADDR_VAR 0 1
18553: PUSH
18554: DOUBLE
18555: LD_INT 1
18557: DEC
18558: ST_TO_ADDR
18559: LD_EXP 23
18563: PUSH
18564: FOR_TO
18565: IFFALSE 18688
// if side_positions [ i ] then
18567: LD_EXP 23
18571: PUSH
18572: LD_VAR 0 1
18576: ARRAY
18577: IFFALSE 18686
// if not HasPower ( i ) and not Defaited [ i ] then
18579: LD_VAR 0 1
18583: PPUSH
18584: CALL 17887 0 1
18588: NOT
18589: PUSH
18590: LD_LOC 36
18594: PUSH
18595: LD_VAR 0 1
18599: ARRAY
18600: NOT
18601: AND
18602: IFFALSE 18686
// begin un = filterallunits ( [ f_side , i ] ) ;
18604: LD_ADDR_VAR 0 2
18608: PUSH
18609: LD_INT 22
18611: PUSH
18612: LD_VAR 0 1
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PPUSH
18621: CALL_OW 69
18625: ST_TO_ADDR
// if un then
18626: LD_VAR 0 2
18630: IFFALSE 18644
// SetSide ( un , 0 ) ;
18632: LD_VAR 0 2
18636: PPUSH
18637: LD_INT 0
18639: PPUSH
18640: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
18644: LD_ADDR_LOC 36
18648: PUSH
18649: LD_LOC 36
18653: PPUSH
18654: LD_VAR 0 1
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: CALL_OW 1
18666: ST_TO_ADDR
// if i = your_side then
18667: LD_VAR 0 1
18671: PUSH
18672: LD_OWVAR 2
18676: EQUAL
18677: IFFALSE 18686
// begin Multiplayer_Loose_Message ;
18679: CALL_OW 521
// enable ( 400 ) ;
18683: LD_INT 400
18685: ENABLE_MARKED
// end ; end ;
18686: GO 18564
18688: POP
18689: POP
// if not Unfoged and defaited [ your_side ] then
18690: LD_LOC 38
18694: NOT
18695: PUSH
18696: LD_LOC 36
18700: PUSH
18701: LD_OWVAR 2
18705: ARRAY
18706: AND
18707: IFFALSE 18713
// Unfog ;
18709: CALL 18899 0 0
// DidGameEnd ;
18713: CALL 18728 0 0
// if not GameEnded then
18717: LD_LOC 37
18721: NOT
18722: IFFALSE 18725
// enable ;
18724: ENABLE
// end ;
18725: PPOPN 2
18727: END
// function DidGameEnd ; var i , k , enemy ; begin
18728: LD_INT 0
18730: PPUSH
18731: PPUSH
18732: PPUSH
18733: PPUSH
// enemy = [ ] ;
18734: LD_ADDR_VAR 0 4
18738: PUSH
18739: EMPTY
18740: ST_TO_ADDR
// for i = 1 to side_positions do
18741: LD_ADDR_VAR 0 2
18745: PUSH
18746: DOUBLE
18747: LD_INT 1
18749: DEC
18750: ST_TO_ADDR
18751: LD_EXP 23
18755: PUSH
18756: FOR_TO
18757: IFFALSE 18861
// if not defaited [ i ] then
18759: LD_LOC 36
18763: PUSH
18764: LD_VAR 0 2
18768: ARRAY
18769: NOT
18770: IFFALSE 18859
// for k = 1 to side_positions do
18772: LD_ADDR_VAR 0 3
18776: PUSH
18777: DOUBLE
18778: LD_INT 1
18780: DEC
18781: ST_TO_ADDR
18782: LD_EXP 23
18786: PUSH
18787: FOR_TO
18788: IFFALSE 18857
// if not defaited [ k ] then
18790: LD_LOC 36
18794: PUSH
18795: LD_VAR 0 3
18799: ARRAY
18800: NOT
18801: IFFALSE 18855
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
18803: LD_VAR 0 2
18807: PPUSH
18808: LD_VAR 0 3
18812: PPUSH
18813: CALL_OW 81
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: IN
18828: IFFALSE 18855
// enemy = enemy ^ [ i , k ] ;
18830: LD_ADDR_VAR 0 4
18834: PUSH
18835: LD_VAR 0 4
18839: PUSH
18840: LD_VAR 0 2
18844: PUSH
18845: LD_VAR 0 3
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: ADD
18854: ST_TO_ADDR
18855: GO 18787
18857: POP
18858: POP
18859: GO 18756
18861: POP
18862: POP
// if not enemy then
18863: LD_VAR 0 4
18867: NOT
18868: IFFALSE 18894
// begin GameEnded = true ;
18870: LD_ADDR_LOC 37
18874: PUSH
18875: LD_INT 1
18877: ST_TO_ADDR
// if not defaited [ your_side ] then
18878: LD_LOC 36
18882: PUSH
18883: LD_OWVAR 2
18887: ARRAY
18888: NOT
18889: IFFALSE 18894
// enable ( 401 ) ;
18891: LD_INT 401
18893: ENABLE_MARKED
// end ; end ;
18894: LD_VAR 0 1
18898: RET
// function unfog ; var k , friends ; begin
18899: LD_INT 0
18901: PPUSH
18902: PPUSH
18903: PPUSH
// for k = 1 to side_positions do
18904: LD_ADDR_VAR 0 2
18908: PUSH
18909: DOUBLE
18910: LD_INT 1
18912: DEC
18913: ST_TO_ADDR
18914: LD_EXP 23
18918: PUSH
18919: FOR_TO
18920: IFFALSE 18976
// if not defaited [ k ] then
18922: LD_LOC 36
18926: PUSH
18927: LD_VAR 0 2
18931: ARRAY
18932: NOT
18933: IFFALSE 18974
// if GetAttitude ( your_side , k ) in [ att_friend ] then
18935: LD_OWVAR 2
18939: PPUSH
18940: LD_VAR 0 2
18944: PPUSH
18945: CALL_OW 81
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: IN
18956: IFFALSE 18974
// friends = friends ^ k ;
18958: LD_ADDR_VAR 0 3
18962: PUSH
18963: LD_VAR 0 3
18967: PUSH
18968: LD_VAR 0 2
18972: ADD
18973: ST_TO_ADDR
18974: GO 18919
18976: POP
18977: POP
// if not friends then
18978: LD_VAR 0 3
18982: NOT
18983: IFFALSE 19000
// begin fogoff ( true ) ;
18985: LD_INT 1
18987: PPUSH
18988: CALL_OW 344
// unfoged = true ;
18992: LD_ADDR_LOC 38
18996: PUSH
18997: LD_INT 1
18999: ST_TO_ADDR
// end ; end ;
19000: LD_VAR 0 1
19004: RET
// export function MakeGameEnd ; begin
19005: LD_INT 0
19007: PPUSH
// fogoff ( true ) ;
19008: LD_INT 1
19010: PPUSH
19011: CALL_OW 344
// unfoged = true ;
19015: LD_ADDR_LOC 38
19019: PUSH
19020: LD_INT 1
19022: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19023: LD_INT 175
19025: PPUSH
19026: CALL_OW 67
// GameEnded = true ;
19030: LD_ADDR_LOC 37
19034: PUSH
19035: LD_INT 1
19037: ST_TO_ADDR
// end ;
19038: LD_VAR 0 1
19042: RET
// export function GetGameEnded ; begin
19043: LD_INT 0
19045: PPUSH
// result = GameEnded ;
19046: LD_ADDR_VAR 0 1
19050: PUSH
19051: LD_LOC 37
19055: ST_TO_ADDR
// end ; end_of_file
19056: LD_VAR 0 1
19060: RET
// var win ; export function init_kings_counting ; var i ; begin
19061: LD_INT 0
19063: PPUSH
19064: PPUSH
// mp_with_score := true ;
19065: LD_ADDR_OWVAR 14
19069: PUSH
19070: LD_INT 1
19072: ST_TO_ADDR
// ResetMultiScore ;
19073: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19077: LD_INT 19
19079: PPUSH
19080: LD_INT 1
19082: PPUSH
19083: CALL_OW 424
// enable ( 2 ) ;
19087: LD_INT 2
19089: ENABLE_MARKED
// end ;
19090: LD_VAR 0 1
19094: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19095: LD_INT 0
19097: PPUSH
19098: PPUSH
19099: PPUSH
19100: PPUSH
19101: PPUSH
19102: PPUSH
19103: PPUSH
19104: PPUSH
19105: PPUSH
// vypis := [ ] ;
19106: LD_ADDR_VAR 0 3
19110: PUSH
19111: EMPTY
19112: ST_TO_ADDR
// red = 0 ;
19113: LD_ADDR_VAR 0 5
19117: PUSH
19118: LD_INT 0
19120: ST_TO_ADDR
// blue = 0 ;
19121: LD_ADDR_VAR 0 6
19125: PUSH
19126: LD_INT 0
19128: ST_TO_ADDR
// yel = 0 ;
19129: LD_ADDR_VAR 0 7
19133: PUSH
19134: LD_INT 0
19136: ST_TO_ADDR
// green = 0 ;
19137: LD_ADDR_VAR 0 8
19141: PUSH
19142: LD_INT 0
19144: ST_TO_ADDR
// if def_public_score or isSGUI then
19145: LD_EXP 6
19149: PUSH
19150: LD_OWVAR 83
19154: OR
19155: IFFALSE 19770
// if not Team_Game then
19157: LD_EXP 25
19161: NOT
19162: IFFALSE 19294
// begin for side = 1 to Side_Positions do
19164: LD_ADDR_VAR 0 2
19168: PUSH
19169: DOUBLE
19170: LD_INT 1
19172: DEC
19173: ST_TO_ADDR
19174: LD_EXP 23
19178: PUSH
19179: FOR_TO
19180: IFFALSE 19290
// if Side_Positions [ side ] then
19182: LD_EXP 23
19186: PUSH
19187: LD_VAR 0 2
19191: ARRAY
19192: IFFALSE 19288
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
19194: LD_ADDR_VAR 0 3
19198: PUSH
19199: LD_VAR 0 3
19203: PUSH
19204: LD_STRING #KingoftheHill-Public
19206: PUSH
19207: LD_VAR 0 2
19211: PUSH
19212: LD_VAR 0 2
19216: PUSH
19217: LD_VAR 0 2
19221: PUSH
19222: LD_INT 10
19224: PLUS
19225: PPUSH
19226: CALL_OW 110
19230: PUSH
19231: LD_INT 3
19233: DIV
19234: PUSH
19235: LD_EXP 20
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: ADD
19247: ST_TO_ADDR
// ToLua ( updateScorePoints(2, & side & , & ( GetTag ( side + 10 ) div 3 ) & ); ) ;
19248: LD_STRING updateScorePoints(2,
19250: PUSH
19251: LD_VAR 0 2
19255: STR
19256: PUSH
19257: LD_STRING ,
19259: STR
19260: PUSH
19261: LD_VAR 0 2
19265: PUSH
19266: LD_INT 10
19268: PLUS
19269: PPUSH
19270: CALL_OW 110
19274: PUSH
19275: LD_INT 3
19277: DIV
19278: STR
19279: PUSH
19280: LD_STRING );
19282: STR
19283: PPUSH
19284: CALL_OW 559
// end ;
19288: GO 19179
19290: POP
19291: POP
// end else
19292: GO 19768
// begin if Teams [ 1 ] then
19294: LD_EXP 22
19298: PUSH
19299: LD_INT 1
19301: ARRAY
19302: IFFALSE 19354
// for i in Teams [ 1 ] do
19304: LD_ADDR_VAR 0 4
19308: PUSH
19309: LD_EXP 22
19313: PUSH
19314: LD_INT 1
19316: ARRAY
19317: PUSH
19318: FOR_IN
19319: IFFALSE 19352
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19321: LD_ADDR_VAR 0 5
19325: PUSH
19326: LD_VAR 0 5
19330: PUSH
19331: LD_VAR 0 4
19335: PUSH
19336: LD_INT 10
19338: PLUS
19339: PPUSH
19340: CALL_OW 110
19344: PUSH
19345: LD_INT 3
19347: DIV
19348: PLUS
19349: ST_TO_ADDR
19350: GO 19318
19352: POP
19353: POP
// if Teams [ 2 ] then
19354: LD_EXP 22
19358: PUSH
19359: LD_INT 2
19361: ARRAY
19362: IFFALSE 19414
// for i in Teams [ 2 ] do
19364: LD_ADDR_VAR 0 4
19368: PUSH
19369: LD_EXP 22
19373: PUSH
19374: LD_INT 2
19376: ARRAY
19377: PUSH
19378: FOR_IN
19379: IFFALSE 19412
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19381: LD_ADDR_VAR 0 6
19385: PUSH
19386: LD_VAR 0 6
19390: PUSH
19391: LD_VAR 0 4
19395: PUSH
19396: LD_INT 10
19398: PLUS
19399: PPUSH
19400: CALL_OW 110
19404: PUSH
19405: LD_INT 3
19407: DIV
19408: PLUS
19409: ST_TO_ADDR
19410: GO 19378
19412: POP
19413: POP
// if Teams [ 3 ] then
19414: LD_EXP 22
19418: PUSH
19419: LD_INT 3
19421: ARRAY
19422: IFFALSE 19474
// for i in Teams [ 3 ] do
19424: LD_ADDR_VAR 0 4
19428: PUSH
19429: LD_EXP 22
19433: PUSH
19434: LD_INT 3
19436: ARRAY
19437: PUSH
19438: FOR_IN
19439: IFFALSE 19472
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
19441: LD_ADDR_VAR 0 7
19445: PUSH
19446: LD_VAR 0 7
19450: PUSH
19451: LD_VAR 0 4
19455: PUSH
19456: LD_INT 10
19458: PLUS
19459: PPUSH
19460: CALL_OW 110
19464: PUSH
19465: LD_INT 3
19467: DIV
19468: PLUS
19469: ST_TO_ADDR
19470: GO 19438
19472: POP
19473: POP
// if Teams [ 4 ] then
19474: LD_EXP 22
19478: PUSH
19479: LD_INT 4
19481: ARRAY
19482: IFFALSE 19534
// for i in Teams [ 4 ] do
19484: LD_ADDR_VAR 0 4
19488: PUSH
19489: LD_EXP 22
19493: PUSH
19494: LD_INT 4
19496: ARRAY
19497: PUSH
19498: FOR_IN
19499: IFFALSE 19532
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
19501: LD_ADDR_VAR 0 8
19505: PUSH
19506: LD_VAR 0 8
19510: PUSH
19511: LD_VAR 0 4
19515: PUSH
19516: LD_INT 10
19518: PLUS
19519: PPUSH
19520: CALL_OW 110
19524: PUSH
19525: LD_INT 3
19527: DIV
19528: PLUS
19529: ST_TO_ADDR
19530: GO 19498
19532: POP
19533: POP
// if Teams [ 1 ] then
19534: LD_EXP 22
19538: PUSH
19539: LD_INT 1
19541: ARRAY
19542: IFFALSE 19571
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
19544: LD_ADDR_VAR 0 3
19548: PUSH
19549: LD_STRING #KingoftheHill-Public-red
19551: PUSH
19552: LD_INT 3
19554: PUSH
19555: LD_VAR 0 5
19559: PUSH
19560: LD_EXP 20
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: ST_TO_ADDR
// if Teams [ 2 ] then
19571: LD_EXP 22
19575: PUSH
19576: LD_INT 2
19578: ARRAY
19579: IFFALSE 19614
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
19581: LD_ADDR_VAR 0 3
19585: PUSH
19586: LD_VAR 0 3
19590: PUSH
19591: LD_STRING #KingoftheHill-Public-blue
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: LD_VAR 0 6
19601: PUSH
19602: LD_EXP 20
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: ADD
19613: ST_TO_ADDR
// if Teams [ 3 ] then
19614: LD_EXP 22
19618: PUSH
19619: LD_INT 3
19621: ARRAY
19622: IFFALSE 19657
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
19624: LD_ADDR_VAR 0 3
19628: PUSH
19629: LD_VAR 0 3
19633: PUSH
19634: LD_STRING #KingoftheHill-Public-yell
19636: PUSH
19637: LD_INT 2
19639: PUSH
19640: LD_VAR 0 7
19644: PUSH
19645: LD_EXP 20
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: ADD
19656: ST_TO_ADDR
// if Teams [ 4 ] then
19657: LD_EXP 22
19661: PUSH
19662: LD_INT 4
19664: ARRAY
19665: IFFALSE 19700
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
19667: LD_ADDR_VAR 0 3
19671: PUSH
19672: LD_VAR 0 3
19676: PUSH
19677: LD_STRING #KingoftheHill-Public-green
19679: PUSH
19680: LD_INT 7
19682: PUSH
19683: LD_VAR 0 8
19687: PUSH
19688: LD_EXP 20
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: ADD
19699: ST_TO_ADDR
// ToLua ( updateScorePoints(2,3, & red & ); ) ;
19700: LD_STRING updateScorePoints(2,3,
19702: PUSH
19703: LD_VAR 0 5
19707: STR
19708: PUSH
19709: LD_STRING );
19711: STR
19712: PPUSH
19713: CALL_OW 559
// ToLua ( updateScorePoints(2,1, & blue & ); ) ;
19717: LD_STRING updateScorePoints(2,1,
19719: PUSH
19720: LD_VAR 0 6
19724: STR
19725: PUSH
19726: LD_STRING );
19728: STR
19729: PPUSH
19730: CALL_OW 559
// ToLua ( updateScorePoints(2,2, & yel & ); ) ;
19734: LD_STRING updateScorePoints(2,2,
19736: PUSH
19737: LD_VAR 0 7
19741: STR
19742: PUSH
19743: LD_STRING );
19745: STR
19746: PPUSH
19747: CALL_OW 559
// ToLua ( updateScorePoints(2,7, & green & ); ) ;
19751: LD_STRING updateScorePoints(2,7,
19753: PUSH
19754: LD_VAR 0 8
19758: STR
19759: PUSH
19760: LD_STRING );
19762: STR
19763: PPUSH
19764: CALL_OW 559
// end else
19768: GO 20205
// if not Team_Game then
19770: LD_EXP 25
19774: NOT
19775: IFFALSE 19833
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
19777: LD_ADDR_VAR 0 3
19781: PUSH
19782: LD_VAR 0 3
19786: PUSH
19787: LD_STRING #KingoftheHill-Private
19789: PUSH
19790: LD_OWVAR 2
19794: PUSH
19795: LD_OWVAR 2
19799: PUSH
19800: LD_VAR 0 2
19804: PUSH
19805: LD_INT 10
19807: PLUS
19808: PPUSH
19809: CALL_OW 110
19813: PUSH
19814: LD_INT 3
19816: DIV
19817: PUSH
19818: LD_EXP 20
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: ADD
19830: ST_TO_ADDR
19831: GO 20205
// begin for i in Teams [ 1 ] do
19833: LD_ADDR_VAR 0 4
19837: PUSH
19838: LD_EXP 22
19842: PUSH
19843: LD_INT 1
19845: ARRAY
19846: PUSH
19847: FOR_IN
19848: IFFALSE 19881
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19850: LD_ADDR_VAR 0 5
19854: PUSH
19855: LD_VAR 0 5
19859: PUSH
19860: LD_VAR 0 4
19864: PUSH
19865: LD_INT 10
19867: PLUS
19868: PPUSH
19869: CALL_OW 110
19873: PUSH
19874: LD_INT 3
19876: DIV
19877: PLUS
19878: ST_TO_ADDR
19879: GO 19847
19881: POP
19882: POP
// for i in Teams [ 2 ] do
19883: LD_ADDR_VAR 0 4
19887: PUSH
19888: LD_EXP 22
19892: PUSH
19893: LD_INT 2
19895: ARRAY
19896: PUSH
19897: FOR_IN
19898: IFFALSE 19931
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19900: LD_ADDR_VAR 0 6
19904: PUSH
19905: LD_VAR 0 6
19909: PUSH
19910: LD_VAR 0 4
19914: PUSH
19915: LD_INT 10
19917: PLUS
19918: PPUSH
19919: CALL_OW 110
19923: PUSH
19924: LD_INT 3
19926: DIV
19927: PLUS
19928: ST_TO_ADDR
19929: GO 19897
19931: POP
19932: POP
// for i in Teams [ 3 ] do
19933: LD_ADDR_VAR 0 4
19937: PUSH
19938: LD_EXP 22
19942: PUSH
19943: LD_INT 3
19945: ARRAY
19946: PUSH
19947: FOR_IN
19948: IFFALSE 19981
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
19950: LD_ADDR_VAR 0 7
19954: PUSH
19955: LD_VAR 0 7
19959: PUSH
19960: LD_VAR 0 4
19964: PUSH
19965: LD_INT 10
19967: PLUS
19968: PPUSH
19969: CALL_OW 110
19973: PUSH
19974: LD_INT 3
19976: DIV
19977: PLUS
19978: ST_TO_ADDR
19979: GO 19947
19981: POP
19982: POP
// for i in Teams [ 4 ] do
19983: LD_ADDR_VAR 0 4
19987: PUSH
19988: LD_EXP 22
19992: PUSH
19993: LD_INT 4
19995: ARRAY
19996: PUSH
19997: FOR_IN
19998: IFFALSE 20031
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20000: LD_ADDR_VAR 0 8
20004: PUSH
20005: LD_VAR 0 8
20009: PUSH
20010: LD_VAR 0 4
20014: PUSH
20015: LD_INT 10
20017: PLUS
20018: PPUSH
20019: CALL_OW 110
20023: PUSH
20024: LD_INT 3
20026: DIV
20027: PLUS
20028: ST_TO_ADDR
20029: GO 19997
20031: POP
20032: POP
// if your_side in Teams [ 1 ] then
20033: LD_OWVAR 2
20037: PUSH
20038: LD_EXP 22
20042: PUSH
20043: LD_INT 1
20045: ARRAY
20046: IN
20047: IFFALSE 20076
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20049: LD_ADDR_VAR 0 3
20053: PUSH
20054: LD_STRING #KingoftheHill-Public-red
20056: PUSH
20057: LD_INT 3
20059: PUSH
20060: LD_VAR 0 5
20064: PUSH
20065: LD_EXP 20
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
20076: LD_OWVAR 2
20080: PUSH
20081: LD_EXP 22
20085: PUSH
20086: LD_INT 2
20088: ARRAY
20089: IN
20090: IFFALSE 20119
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20092: LD_ADDR_VAR 0 3
20096: PUSH
20097: LD_STRING #KingoftheHill-Public-blue
20099: PUSH
20100: LD_INT 1
20102: PUSH
20103: LD_VAR 0 6
20107: PUSH
20108: LD_EXP 20
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
20119: LD_OWVAR 2
20123: PUSH
20124: LD_EXP 22
20128: PUSH
20129: LD_INT 3
20131: ARRAY
20132: IN
20133: IFFALSE 20162
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20135: LD_ADDR_VAR 0 3
20139: PUSH
20140: LD_STRING #KingoftheHill-Public-yell
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_VAR 0 7
20150: PUSH
20151: LD_EXP 20
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
20162: LD_OWVAR 2
20166: PUSH
20167: LD_EXP 22
20171: PUSH
20172: LD_INT 4
20174: ARRAY
20175: IN
20176: IFFALSE 20205
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20178: LD_ADDR_VAR 0 3
20182: PUSH
20183: LD_STRING #KingoftheHill-Public-green
20185: PUSH
20186: LD_INT 7
20188: PUSH
20189: LD_VAR 0 8
20193: PUSH
20194: LD_EXP 20
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: ST_TO_ADDR
// end ; Display_kings := vypis ;
20205: LD_ADDR_EXP 60
20209: PUSH
20210: LD_VAR 0 3
20214: ST_TO_ADDR
// end ;
20215: LD_VAR 0 1
20219: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
20220: LD_INT 0
20222: PPUSH
20223: PPUSH
20224: PPUSH
20225: PPUSH
20226: PPUSH
20227: PPUSH
20228: PPUSH
20229: PPUSH
20230: PPUSH
// side := [ ] ;
20231: LD_ADDR_VAR 0 2
20235: PUSH
20236: EMPTY
20237: ST_TO_ADDR
// red = 0 ;
20238: LD_ADDR_VAR 0 5
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// blue = 0 ;
20246: LD_ADDR_VAR 0 6
20250: PUSH
20251: LD_INT 0
20253: ST_TO_ADDR
// yel = 0 ;
20254: LD_ADDR_VAR 0 7
20258: PUSH
20259: LD_INT 0
20261: ST_TO_ADDR
// green = 0 ;
20262: LD_ADDR_VAR 0 8
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
20270: LD_ADDR_VAR 0 3
20274: PUSH
20275: LD_INT 19
20277: PPUSH
20278: LD_INT 21
20280: PUSH
20281: LD_INT 3
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: PUSH
20288: LD_INT 53
20290: PUSH
20291: EMPTY
20292: LIST
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PPUSH
20298: CALL_OW 70
20302: ST_TO_ADDR
// for un in list do
20303: LD_ADDR_VAR 0 4
20307: PUSH
20308: LD_VAR 0 3
20312: PUSH
20313: FOR_IN
20314: IFFALSE 20339
// side := side union GetSide ( un ) ;
20316: LD_ADDR_VAR 0 2
20320: PUSH
20321: LD_VAR 0 2
20325: PUSH
20326: LD_VAR 0 4
20330: PPUSH
20331: CALL_OW 255
20335: UNION
20336: ST_TO_ADDR
20337: GO 20313
20339: POP
20340: POP
// if side <> 1 then
20341: LD_VAR 0 2
20345: PUSH
20346: LD_INT 1
20348: NONEQUAL
20349: IFFALSE 20353
// exit ;
20351: GO 20716
// side := side [ 1 ] ;
20353: LD_ADDR_VAR 0 2
20357: PUSH
20358: LD_VAR 0 2
20362: PUSH
20363: LD_INT 1
20365: ARRAY
20366: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
20367: LD_VAR 0 2
20371: PUSH
20372: LD_INT 10
20374: PLUS
20375: PPUSH
20376: LD_VAR 0 2
20380: PUSH
20381: LD_INT 10
20383: PLUS
20384: PPUSH
20385: CALL_OW 110
20389: PUSH
20390: LD_INT 1
20392: PLUS
20393: PPUSH
20394: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
20398: LD_VAR 0 2
20402: PPUSH
20403: LD_VAR 0 2
20407: PUSH
20408: LD_INT 10
20410: PLUS
20411: PPUSH
20412: CALL_OW 110
20416: PUSH
20417: LD_INT 3
20419: DIV
20420: PPUSH
20421: LD_INT 2
20423: PPUSH
20424: CALL 17282 0 3
// if not Team_Game then
20428: LD_EXP 25
20432: NOT
20433: IFFALSE 20716
// if GetTag ( side + 10 ) >= final_count * 3 then
20435: LD_VAR 0 2
20439: PUSH
20440: LD_INT 10
20442: PLUS
20443: PPUSH
20444: CALL_OW 110
20448: PUSH
20449: LD_EXP 20
20453: PUSH
20454: LD_INT 3
20456: MUL
20457: GREATEREQUAL
20458: IFFALSE 20465
// enable ( 3 ) else
20460: LD_INT 3
20462: ENABLE_MARKED
20463: GO 20716
// begin for i in Teams [ 1 ] do
20465: LD_ADDR_VAR 0 9
20469: PUSH
20470: LD_EXP 22
20474: PUSH
20475: LD_INT 1
20477: ARRAY
20478: PUSH
20479: FOR_IN
20480: IFFALSE 20513
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20482: LD_ADDR_VAR 0 5
20486: PUSH
20487: LD_VAR 0 5
20491: PUSH
20492: LD_VAR 0 9
20496: PUSH
20497: LD_INT 10
20499: PLUS
20500: PPUSH
20501: CALL_OW 110
20505: PUSH
20506: LD_INT 3
20508: DIV
20509: PLUS
20510: ST_TO_ADDR
20511: GO 20479
20513: POP
20514: POP
// for i in Teams [ 2 ] do
20515: LD_ADDR_VAR 0 9
20519: PUSH
20520: LD_EXP 22
20524: PUSH
20525: LD_INT 2
20527: ARRAY
20528: PUSH
20529: FOR_IN
20530: IFFALSE 20563
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20532: LD_ADDR_VAR 0 6
20536: PUSH
20537: LD_VAR 0 6
20541: PUSH
20542: LD_VAR 0 9
20546: PUSH
20547: LD_INT 10
20549: PLUS
20550: PPUSH
20551: CALL_OW 110
20555: PUSH
20556: LD_INT 3
20558: DIV
20559: PLUS
20560: ST_TO_ADDR
20561: GO 20529
20563: POP
20564: POP
// for i in Teams [ 3 ] do
20565: LD_ADDR_VAR 0 9
20569: PUSH
20570: LD_EXP 22
20574: PUSH
20575: LD_INT 3
20577: ARRAY
20578: PUSH
20579: FOR_IN
20580: IFFALSE 20613
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20582: LD_ADDR_VAR 0 7
20586: PUSH
20587: LD_VAR 0 7
20591: PUSH
20592: LD_VAR 0 9
20596: PUSH
20597: LD_INT 10
20599: PLUS
20600: PPUSH
20601: CALL_OW 110
20605: PUSH
20606: LD_INT 3
20608: DIV
20609: PLUS
20610: ST_TO_ADDR
20611: GO 20579
20613: POP
20614: POP
// for i in Teams [ 4 ] do
20615: LD_ADDR_VAR 0 9
20619: PUSH
20620: LD_EXP 22
20624: PUSH
20625: LD_INT 4
20627: ARRAY
20628: PUSH
20629: FOR_IN
20630: IFFALSE 20663
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20632: LD_ADDR_VAR 0 8
20636: PUSH
20637: LD_VAR 0 8
20641: PUSH
20642: LD_VAR 0 9
20646: PUSH
20647: LD_INT 10
20649: PLUS
20650: PPUSH
20651: CALL_OW 110
20655: PUSH
20656: LD_INT 3
20658: DIV
20659: PLUS
20660: ST_TO_ADDR
20661: GO 20629
20663: POP
20664: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
20665: LD_VAR 0 5
20669: PUSH
20670: LD_EXP 20
20674: GREATEREQUAL
20675: PUSH
20676: LD_VAR 0 6
20680: PUSH
20681: LD_EXP 20
20685: GREATEREQUAL
20686: OR
20687: PUSH
20688: LD_VAR 0 7
20692: PUSH
20693: LD_EXP 20
20697: GREATEREQUAL
20698: OR
20699: PUSH
20700: LD_VAR 0 8
20704: PUSH
20705: LD_EXP 20
20709: GREATEREQUAL
20710: OR
20711: IFFALSE 20716
// enable ( 3 ) ;
20713: LD_INT 3
20715: ENABLE_MARKED
// end ; end ;
20716: LD_VAR 0 1
20720: RET
// every 0 0$1 marked 2 do
20721: GO 20723
20723: DISABLE
// begin count_king ;
20724: CALL 20220 0 0
// show_public_points ;
20728: CALL 19095 0 0
// enable ;
20732: ENABLE
// end ;
20733: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
20734: GO 20736
20736: DISABLE
20737: LD_INT 0
20739: PPUSH
20740: PPUSH
20741: PPUSH
20742: PPUSH
20743: PPUSH
20744: PPUSH
// begin win := [ ] ;
20745: LD_ADDR_LOC 39
20749: PUSH
20750: EMPTY
20751: ST_TO_ADDR
// red = 0 ;
20752: LD_ADDR_VAR 0 2
20756: PUSH
20757: LD_INT 0
20759: ST_TO_ADDR
// blue = 0 ;
20760: LD_ADDR_VAR 0 3
20764: PUSH
20765: LD_INT 0
20767: ST_TO_ADDR
// yel = 0 ;
20768: LD_ADDR_VAR 0 4
20772: PUSH
20773: LD_INT 0
20775: ST_TO_ADDR
// green = 0 ;
20776: LD_ADDR_VAR 0 5
20780: PUSH
20781: LD_INT 0
20783: ST_TO_ADDR
// if not Team_Game then
20784: LD_EXP 25
20788: NOT
20789: IFFALSE 20866
// begin for side = 1 to 8 do
20791: LD_ADDR_VAR 0 1
20795: PUSH
20796: DOUBLE
20797: LD_INT 1
20799: DEC
20800: ST_TO_ADDR
20801: LD_INT 8
20803: PUSH
20804: FOR_TO
20805: IFFALSE 20850
// if GetTag ( side + 10 ) >= final_count * 3 then
20807: LD_VAR 0 1
20811: PUSH
20812: LD_INT 10
20814: PLUS
20815: PPUSH
20816: CALL_OW 110
20820: PUSH
20821: LD_EXP 20
20825: PUSH
20826: LD_INT 3
20828: MUL
20829: GREATEREQUAL
20830: IFFALSE 20848
// win := win ^ side ;
20832: LD_ADDR_LOC 39
20836: PUSH
20837: LD_LOC 39
20841: PUSH
20842: LD_VAR 0 1
20846: ADD
20847: ST_TO_ADDR
20848: GO 20804
20850: POP
20851: POP
// if win then
20852: LD_LOC 39
20856: IFFALSE 20863
// enable ( 4 ) else
20858: LD_INT 4
20860: ENABLE_MARKED
20861: GO 20864
// enable ;
20863: ENABLE
// end else
20864: GO 21182
// begin for i in Teams [ 1 ] do
20866: LD_ADDR_VAR 0 6
20870: PUSH
20871: LD_EXP 22
20875: PUSH
20876: LD_INT 1
20878: ARRAY
20879: PUSH
20880: FOR_IN
20881: IFFALSE 20914
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20883: LD_ADDR_VAR 0 2
20887: PUSH
20888: LD_VAR 0 2
20892: PUSH
20893: LD_VAR 0 6
20897: PUSH
20898: LD_INT 10
20900: PLUS
20901: PPUSH
20902: CALL_OW 110
20906: PUSH
20907: LD_INT 3
20909: DIV
20910: PLUS
20911: ST_TO_ADDR
20912: GO 20880
20914: POP
20915: POP
// for i in Teams [ 2 ] do
20916: LD_ADDR_VAR 0 6
20920: PUSH
20921: LD_EXP 22
20925: PUSH
20926: LD_INT 2
20928: ARRAY
20929: PUSH
20930: FOR_IN
20931: IFFALSE 20964
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20933: LD_ADDR_VAR 0 3
20937: PUSH
20938: LD_VAR 0 3
20942: PUSH
20943: LD_VAR 0 6
20947: PUSH
20948: LD_INT 10
20950: PLUS
20951: PPUSH
20952: CALL_OW 110
20956: PUSH
20957: LD_INT 3
20959: DIV
20960: PLUS
20961: ST_TO_ADDR
20962: GO 20930
20964: POP
20965: POP
// for i in Teams [ 3 ] do
20966: LD_ADDR_VAR 0 6
20970: PUSH
20971: LD_EXP 22
20975: PUSH
20976: LD_INT 3
20978: ARRAY
20979: PUSH
20980: FOR_IN
20981: IFFALSE 21014
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20983: LD_ADDR_VAR 0 4
20987: PUSH
20988: LD_VAR 0 4
20992: PUSH
20993: LD_VAR 0 6
20997: PUSH
20998: LD_INT 10
21000: PLUS
21001: PPUSH
21002: CALL_OW 110
21006: PUSH
21007: LD_INT 3
21009: DIV
21010: PLUS
21011: ST_TO_ADDR
21012: GO 20980
21014: POP
21015: POP
// for i in Teams [ 4 ] do
21016: LD_ADDR_VAR 0 6
21020: PUSH
21021: LD_EXP 22
21025: PUSH
21026: LD_INT 4
21028: ARRAY
21029: PUSH
21030: FOR_IN
21031: IFFALSE 21064
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21033: LD_ADDR_VAR 0 5
21037: PUSH
21038: LD_VAR 0 5
21042: PUSH
21043: LD_VAR 0 6
21047: PUSH
21048: LD_INT 10
21050: PLUS
21051: PPUSH
21052: CALL_OW 110
21056: PUSH
21057: LD_INT 3
21059: DIV
21060: PLUS
21061: ST_TO_ADDR
21062: GO 21030
21064: POP
21065: POP
// if red >= final_count then
21066: LD_VAR 0 2
21070: PUSH
21071: LD_EXP 20
21075: GREATEREQUAL
21076: IFFALSE 21092
// win = teams [ 1 ] ;
21078: LD_ADDR_LOC 39
21082: PUSH
21083: LD_EXP 22
21087: PUSH
21088: LD_INT 1
21090: ARRAY
21091: ST_TO_ADDR
// if blue >= final_count then
21092: LD_VAR 0 3
21096: PUSH
21097: LD_EXP 20
21101: GREATEREQUAL
21102: IFFALSE 21118
// win = teams [ 2 ] ;
21104: LD_ADDR_LOC 39
21108: PUSH
21109: LD_EXP 22
21113: PUSH
21114: LD_INT 2
21116: ARRAY
21117: ST_TO_ADDR
// if yel >= final_count then
21118: LD_VAR 0 4
21122: PUSH
21123: LD_EXP 20
21127: GREATEREQUAL
21128: IFFALSE 21144
// win = teams [ 3 ] ;
21130: LD_ADDR_LOC 39
21134: PUSH
21135: LD_EXP 22
21139: PUSH
21140: LD_INT 3
21142: ARRAY
21143: ST_TO_ADDR
// if green >= final_count then
21144: LD_VAR 0 5
21148: PUSH
21149: LD_EXP 20
21153: GREATEREQUAL
21154: IFFALSE 21170
// win = teams [ 4 ] ;
21156: LD_ADDR_LOC 39
21160: PUSH
21161: LD_EXP 22
21165: PUSH
21166: LD_INT 4
21168: ARRAY
21169: ST_TO_ADDR
// if win then
21170: LD_LOC 39
21174: IFFALSE 21181
// enable ( 4 ) else
21176: LD_INT 4
21178: ENABLE_MARKED
21179: GO 21182
// enable ;
21181: ENABLE
// end ; end ;
21182: PPOPN 6
21184: END
// every 0 0$1 marked 4 do
21185: GO 21187
21187: DISABLE
// begin if Player_Side in win then
21188: LD_EXP 27
21192: PUSH
21193: LD_LOC 39
21197: IN
21198: IFFALSE 21214
// begin wait ( 0 0$2 ) ;
21200: LD_INT 70
21202: PPUSH
21203: CALL_OW 67
// enable ( 401 ) ;
21207: LD_INT 401
21209: ENABLE_MARKED
// exit ;
21210: GO 21230
// end else
21212: GO 21230
// begin wait ( 0 0$2 ) ;
21214: LD_INT 70
21216: PPUSH
21217: CALL_OW 67
// Multiplayer_Loose_Message ;
21221: CALL_OW 521
// enable ( 400 ) ;
21225: LD_INT 400
21227: ENABLE_MARKED
// exit ;
21228: GO 21230
// end ; end ; end_of_file
21230: END
// export function SetMpTechs ( ) ; var side , i ; begin
21231: LD_INT 0
21233: PPUSH
21234: PPUSH
21235: PPUSH
// for side = 1 to 8 do
21236: LD_ADDR_VAR 0 2
21240: PUSH
21241: DOUBLE
21242: LD_INT 1
21244: DEC
21245: ST_TO_ADDR
21246: LD_INT 8
21248: PUSH
21249: FOR_TO
21250: IFFALSE 21371
// begin for i = 1 to 72 do
21252: LD_ADDR_VAR 0 3
21256: PUSH
21257: DOUBLE
21258: LD_INT 1
21260: DEC
21261: ST_TO_ADDR
21262: LD_INT 72
21264: PUSH
21265: FOR_TO
21266: IFFALSE 21297
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
21268: LD_VAR 0 3
21272: PPUSH
21273: LD_VAR 0 2
21277: PPUSH
21278: LD_INT 0
21280: PPUSH
21281: LD_VAR 0 3
21285: PPUSH
21286: CALL_OW 565
21290: PPUSH
21291: CALL_OW 322
21295: GO 21265
21297: POP
21298: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
21299: LD_INT 73
21301: PPUSH
21302: LD_VAR 0 2
21306: PPUSH
21307: LD_INT 0
21309: PPUSH
21310: LD_INT 25
21312: PPUSH
21313: CALL_OW 565
21317: PPUSH
21318: CALL_OW 322
// for i = 0 to 40 do
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: DOUBLE
21328: LD_INT 0
21330: DEC
21331: ST_TO_ADDR
21332: LD_INT 40
21334: PUSH
21335: FOR_TO
21336: IFFALSE 21367
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
21338: LD_VAR 0 3
21342: PPUSH
21343: LD_VAR 0 2
21347: PPUSH
21348: LD_INT 1
21350: PPUSH
21351: LD_VAR 0 3
21355: PPUSH
21356: CALL_OW 565
21360: PPUSH
21361: CALL_OW 324
21365: GO 21335
21367: POP
21368: POP
// end ;
21369: GO 21249
21371: POP
21372: POP
// end ;
21373: LD_VAR 0 1
21377: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
21378: LD_INT 0
21380: PPUSH
21381: PPUSH
21382: PPUSH
// for side = 1 to 8 do
21383: LD_ADDR_VAR 0 3
21387: PUSH
21388: DOUBLE
21389: LD_INT 1
21391: DEC
21392: ST_TO_ADDR
21393: LD_INT 8
21395: PUSH
21396: FOR_TO
21397: IFFALSE 25393
// begin for i = 1 to 73 do
21399: LD_ADDR_VAR 0 4
21403: PUSH
21404: DOUBLE
21405: LD_INT 1
21407: DEC
21408: ST_TO_ADDR
21409: LD_INT 73
21411: PUSH
21412: FOR_TO
21413: IFFALSE 21434
// SetTech ( i , side , state_disabled ) ;
21415: LD_VAR 0 4
21419: PPUSH
21420: LD_VAR 0 3
21424: PPUSH
21425: LD_INT 0
21427: PPUSH
21428: CALL_OW 322
21432: GO 21412
21434: POP
21435: POP
// for i = 0 to 40 do
21436: LD_ADDR_VAR 0 4
21440: PUSH
21441: DOUBLE
21442: LD_INT 0
21444: DEC
21445: ST_TO_ADDR
21446: LD_INT 40
21448: PUSH
21449: FOR_TO
21450: IFFALSE 21471
// SetRestrict ( i , side , false ) ;
21452: LD_VAR 0 4
21456: PPUSH
21457: LD_VAR 0 3
21461: PPUSH
21462: LD_INT 0
21464: PPUSH
21465: CALL_OW 324
21469: GO 21449
21471: POP
21472: POP
// case level of 1 :
21473: LD_VAR 0 1
21477: PUSH
21478: LD_INT 1
21480: DOUBLE
21481: EQUAL
21482: IFTRUE 21486
21484: GO 21639
21486: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21487: LD_INT 35
21489: PPUSH
21490: LD_VAR 0 3
21494: PPUSH
21495: LD_INT 1
21497: PPUSH
21498: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21502: LD_INT 45
21504: PPUSH
21505: LD_VAR 0 3
21509: PPUSH
21510: LD_INT 1
21512: PPUSH
21513: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21517: LD_INT 46
21519: PPUSH
21520: LD_VAR 0 3
21524: PPUSH
21525: LD_INT 1
21527: PPUSH
21528: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21532: LD_INT 47
21534: PPUSH
21535: LD_VAR 0 3
21539: PPUSH
21540: LD_INT 1
21542: PPUSH
21543: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21547: LD_INT 0
21549: PPUSH
21550: LD_VAR 0 3
21554: PPUSH
21555: LD_INT 1
21557: PPUSH
21558: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21562: LD_INT 2
21564: PPUSH
21565: LD_VAR 0 3
21569: PPUSH
21570: LD_INT 1
21572: PPUSH
21573: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21577: LD_INT 4
21579: PPUSH
21580: LD_VAR 0 3
21584: PPUSH
21585: LD_INT 1
21587: PPUSH
21588: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21592: LD_INT 6
21594: PPUSH
21595: LD_VAR 0 3
21599: PPUSH
21600: LD_INT 1
21602: PPUSH
21603: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21607: LD_INT 29
21609: PPUSH
21610: LD_VAR 0 3
21614: PPUSH
21615: LD_INT 1
21617: PPUSH
21618: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21622: LD_INT 31
21624: PPUSH
21625: LD_VAR 0 3
21629: PPUSH
21630: LD_INT 1
21632: PPUSH
21633: CALL_OW 324
// end ; 2 :
21637: GO 25391
21639: LD_INT 2
21641: DOUBLE
21642: EQUAL
21643: IFTRUE 21647
21645: GO 21845
21647: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21648: LD_INT 35
21650: PPUSH
21651: LD_VAR 0 3
21655: PPUSH
21656: LD_INT 1
21658: PPUSH
21659: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21663: LD_INT 45
21665: PPUSH
21666: LD_VAR 0 3
21670: PPUSH
21671: LD_INT 1
21673: PPUSH
21674: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21678: LD_INT 46
21680: PPUSH
21681: LD_VAR 0 3
21685: PPUSH
21686: LD_INT 1
21688: PPUSH
21689: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21693: LD_INT 47
21695: PPUSH
21696: LD_VAR 0 3
21700: PPUSH
21701: LD_INT 1
21703: PPUSH
21704: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21708: LD_INT 1
21710: PPUSH
21711: LD_VAR 0 3
21715: PPUSH
21716: LD_INT 1
21718: PPUSH
21719: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21723: LD_INT 2
21725: PPUSH
21726: LD_VAR 0 3
21730: PPUSH
21731: LD_INT 1
21733: PPUSH
21734: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21738: LD_INT 11
21740: PPUSH
21741: LD_VAR 0 3
21745: PPUSH
21746: LD_INT 1
21748: PPUSH
21749: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21753: LD_INT 0
21755: PPUSH
21756: LD_VAR 0 3
21760: PPUSH
21761: LD_INT 1
21763: PPUSH
21764: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21768: LD_INT 2
21770: PPUSH
21771: LD_VAR 0 3
21775: PPUSH
21776: LD_INT 1
21778: PPUSH
21779: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21783: LD_INT 4
21785: PPUSH
21786: LD_VAR 0 3
21790: PPUSH
21791: LD_INT 1
21793: PPUSH
21794: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21798: LD_INT 6
21800: PPUSH
21801: LD_VAR 0 3
21805: PPUSH
21806: LD_INT 1
21808: PPUSH
21809: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21813: LD_INT 29
21815: PPUSH
21816: LD_VAR 0 3
21820: PPUSH
21821: LD_INT 1
21823: PPUSH
21824: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21828: LD_INT 31
21830: PPUSH
21831: LD_VAR 0 3
21835: PPUSH
21836: LD_INT 1
21838: PPUSH
21839: CALL_OW 324
// end ; 3 :
21843: GO 25391
21845: LD_INT 3
21847: DOUBLE
21848: EQUAL
21849: IFTRUE 21853
21851: GO 22306
21853: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21854: LD_INT 35
21856: PPUSH
21857: LD_VAR 0 3
21861: PPUSH
21862: LD_INT 1
21864: PPUSH
21865: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21869: LD_INT 45
21871: PPUSH
21872: LD_VAR 0 3
21876: PPUSH
21877: LD_INT 1
21879: PPUSH
21880: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21884: LD_INT 46
21886: PPUSH
21887: LD_VAR 0 3
21891: PPUSH
21892: LD_INT 1
21894: PPUSH
21895: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21899: LD_INT 47
21901: PPUSH
21902: LD_VAR 0 3
21906: PPUSH
21907: LD_INT 1
21909: PPUSH
21910: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21914: LD_INT 1
21916: PPUSH
21917: LD_VAR 0 3
21921: PPUSH
21922: LD_INT 1
21924: PPUSH
21925: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21929: LD_INT 2
21931: PPUSH
21932: LD_VAR 0 3
21936: PPUSH
21937: LD_INT 1
21939: PPUSH
21940: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21944: LD_INT 11
21946: PPUSH
21947: LD_VAR 0 3
21951: PPUSH
21952: LD_INT 1
21954: PPUSH
21955: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21959: LD_INT 48
21961: PPUSH
21962: LD_VAR 0 3
21966: PPUSH
21967: LD_INT 1
21969: PPUSH
21970: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21974: LD_INT 69
21976: PPUSH
21977: LD_VAR 0 3
21981: PPUSH
21982: LD_INT 1
21984: PPUSH
21985: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21989: LD_INT 39
21991: PPUSH
21992: LD_VAR 0 3
21996: PPUSH
21997: LD_INT 1
21999: PPUSH
22000: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22004: LD_INT 43
22006: PPUSH
22007: LD_VAR 0 3
22011: PPUSH
22012: LD_INT 1
22014: PPUSH
22015: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22019: LD_INT 51
22021: PPUSH
22022: LD_VAR 0 3
22026: PPUSH
22027: LD_INT 1
22029: PPUSH
22030: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22034: LD_INT 6
22036: PPUSH
22037: LD_VAR 0 3
22041: PPUSH
22042: LD_INT 1
22044: PPUSH
22045: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22049: LD_INT 0
22051: PPUSH
22052: LD_VAR 0 3
22056: PPUSH
22057: LD_INT 1
22059: PPUSH
22060: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22064: LD_INT 2
22066: PPUSH
22067: LD_VAR 0 3
22071: PPUSH
22072: LD_INT 1
22074: PPUSH
22075: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22079: LD_INT 3
22081: PPUSH
22082: LD_VAR 0 3
22086: PPUSH
22087: LD_INT 1
22089: PPUSH
22090: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22094: LD_INT 4
22096: PPUSH
22097: LD_VAR 0 3
22101: PPUSH
22102: LD_INT 1
22104: PPUSH
22105: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22109: LD_INT 6
22111: PPUSH
22112: LD_VAR 0 3
22116: PPUSH
22117: LD_INT 1
22119: PPUSH
22120: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22124: LD_INT 7
22126: PPUSH
22127: LD_VAR 0 3
22131: PPUSH
22132: LD_INT 1
22134: PPUSH
22135: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22139: LD_INT 8
22141: PPUSH
22142: LD_VAR 0 3
22146: PPUSH
22147: LD_INT 1
22149: PPUSH
22150: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22154: LD_INT 10
22156: PPUSH
22157: LD_VAR 0 3
22161: PPUSH
22162: LD_INT 1
22164: PPUSH
22165: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22169: LD_INT 15
22171: PPUSH
22172: LD_VAR 0 3
22176: PPUSH
22177: LD_INT 1
22179: PPUSH
22180: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22184: LD_INT 16
22186: PPUSH
22187: LD_VAR 0 3
22191: PPUSH
22192: LD_INT 1
22194: PPUSH
22195: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22199: LD_INT 17
22201: PPUSH
22202: LD_VAR 0 3
22206: PPUSH
22207: LD_INT 1
22209: PPUSH
22210: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22214: LD_INT 20
22216: PPUSH
22217: LD_VAR 0 3
22221: PPUSH
22222: LD_INT 1
22224: PPUSH
22225: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22229: LD_INT 26
22231: PPUSH
22232: LD_VAR 0 3
22236: PPUSH
22237: LD_INT 1
22239: PPUSH
22240: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22244: LD_INT 27
22246: PPUSH
22247: LD_VAR 0 3
22251: PPUSH
22252: LD_INT 1
22254: PPUSH
22255: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22259: LD_INT 29
22261: PPUSH
22262: LD_VAR 0 3
22266: PPUSH
22267: LD_INT 1
22269: PPUSH
22270: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22274: LD_INT 31
22276: PPUSH
22277: LD_VAR 0 3
22281: PPUSH
22282: LD_INT 1
22284: PPUSH
22285: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22289: LD_INT 32
22291: PPUSH
22292: LD_VAR 0 3
22296: PPUSH
22297: LD_INT 1
22299: PPUSH
22300: CALL_OW 324
// end ; 4 :
22304: GO 25391
22306: LD_INT 4
22308: DOUBLE
22309: EQUAL
22310: IFTRUE 22314
22312: GO 23262
22314: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22315: LD_INT 35
22317: PPUSH
22318: LD_VAR 0 3
22322: PPUSH
22323: LD_INT 1
22325: PPUSH
22326: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22330: LD_INT 45
22332: PPUSH
22333: LD_VAR 0 3
22337: PPUSH
22338: LD_INT 1
22340: PPUSH
22341: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22345: LD_INT 46
22347: PPUSH
22348: LD_VAR 0 3
22352: PPUSH
22353: LD_INT 1
22355: PPUSH
22356: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22360: LD_INT 47
22362: PPUSH
22363: LD_VAR 0 3
22367: PPUSH
22368: LD_INT 1
22370: PPUSH
22371: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22375: LD_INT 1
22377: PPUSH
22378: LD_VAR 0 3
22382: PPUSH
22383: LD_INT 1
22385: PPUSH
22386: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22390: LD_INT 2
22392: PPUSH
22393: LD_VAR 0 3
22397: PPUSH
22398: LD_INT 1
22400: PPUSH
22401: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22405: LD_INT 11
22407: PPUSH
22408: LD_VAR 0 3
22412: PPUSH
22413: LD_INT 1
22415: PPUSH
22416: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22420: LD_INT 20
22422: PPUSH
22423: LD_VAR 0 3
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22435: LD_INT 48
22437: PPUSH
22438: LD_VAR 0 3
22442: PPUSH
22443: LD_INT 1
22445: PPUSH
22446: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22450: LD_INT 49
22452: PPUSH
22453: LD_VAR 0 3
22457: PPUSH
22458: LD_INT 1
22460: PPUSH
22461: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22465: LD_INT 69
22467: PPUSH
22468: LD_VAR 0 3
22472: PPUSH
22473: LD_INT 1
22475: PPUSH
22476: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22480: LD_INT 39
22482: PPUSH
22483: LD_VAR 0 3
22487: PPUSH
22488: LD_INT 1
22490: PPUSH
22491: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22495: LD_INT 34
22497: PPUSH
22498: LD_VAR 0 3
22502: PPUSH
22503: LD_INT 1
22505: PPUSH
22506: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22510: LD_INT 42
22512: PPUSH
22513: LD_VAR 0 3
22517: PPUSH
22518: LD_INT 1
22520: PPUSH
22521: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22525: LD_INT 44
22527: PPUSH
22528: LD_VAR 0 3
22532: PPUSH
22533: LD_INT 1
22535: PPUSH
22536: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22540: LD_INT 41
22542: PPUSH
22543: LD_VAR 0 3
22547: PPUSH
22548: LD_INT 1
22550: PPUSH
22551: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22555: LD_INT 43
22557: PPUSH
22558: LD_VAR 0 3
22562: PPUSH
22563: LD_INT 1
22565: PPUSH
22566: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22570: LD_INT 70
22572: PPUSH
22573: LD_VAR 0 3
22577: PPUSH
22578: LD_INT 1
22580: PPUSH
22581: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22585: LD_INT 51
22587: PPUSH
22588: LD_VAR 0 3
22592: PPUSH
22593: LD_INT 1
22595: PPUSH
22596: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22600: LD_INT 52
22602: PPUSH
22603: LD_VAR 0 3
22607: PPUSH
22608: LD_INT 1
22610: PPUSH
22611: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22615: LD_INT 6
22617: PPUSH
22618: LD_VAR 0 3
22622: PPUSH
22623: LD_INT 1
22625: PPUSH
22626: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22630: LD_INT 15
22632: PPUSH
22633: LD_VAR 0 3
22637: PPUSH
22638: LD_INT 1
22640: PPUSH
22641: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22645: LD_INT 7
22647: PPUSH
22648: LD_VAR 0 3
22652: PPUSH
22653: LD_INT 1
22655: PPUSH
22656: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22660: LD_INT 12
22662: PPUSH
22663: LD_VAR 0 3
22667: PPUSH
22668: LD_INT 1
22670: PPUSH
22671: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22675: LD_INT 18
22677: PPUSH
22678: LD_VAR 0 3
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
22690: LD_INT 60
22692: PPUSH
22693: LD_VAR 0 3
22697: PPUSH
22698: LD_INT 1
22700: PPUSH
22701: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
22705: LD_INT 9
22707: PPUSH
22708: LD_VAR 0 3
22712: PPUSH
22713: LD_INT 1
22715: PPUSH
22716: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
22720: LD_INT 30
22722: PPUSH
22723: LD_VAR 0 3
22727: PPUSH
22728: LD_INT 1
22730: PPUSH
22731: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
22735: LD_INT 37
22737: PPUSH
22738: LD_VAR 0 3
22742: PPUSH
22743: LD_INT 1
22745: PPUSH
22746: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
22750: LD_INT 5
22752: PPUSH
22753: LD_VAR 0 3
22757: PPUSH
22758: LD_INT 1
22760: PPUSH
22761: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
22765: LD_INT 66
22767: PPUSH
22768: LD_VAR 0 3
22772: PPUSH
22773: LD_INT 1
22775: PPUSH
22776: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
22780: LD_INT 21
22782: PPUSH
22783: LD_VAR 0 3
22787: PPUSH
22788: LD_INT 1
22790: PPUSH
22791: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22795: LD_INT 22
22797: PPUSH
22798: LD_VAR 0 3
22802: PPUSH
22803: LD_INT 1
22805: PPUSH
22806: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22810: LD_INT 54
22812: PPUSH
22813: LD_VAR 0 3
22817: PPUSH
22818: LD_INT 1
22820: PPUSH
22821: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22825: LD_INT 0
22827: PPUSH
22828: LD_VAR 0 3
22832: PPUSH
22833: LD_INT 1
22835: PPUSH
22836: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22840: LD_INT 1
22842: PPUSH
22843: LD_VAR 0 3
22847: PPUSH
22848: LD_INT 1
22850: PPUSH
22851: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22855: LD_INT 2
22857: PPUSH
22858: LD_VAR 0 3
22862: PPUSH
22863: LD_INT 1
22865: PPUSH
22866: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22870: LD_INT 3
22872: PPUSH
22873: LD_VAR 0 3
22877: PPUSH
22878: LD_INT 1
22880: PPUSH
22881: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22885: LD_INT 4
22887: PPUSH
22888: LD_VAR 0 3
22892: PPUSH
22893: LD_INT 1
22895: PPUSH
22896: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22900: LD_INT 5
22902: PPUSH
22903: LD_VAR 0 3
22907: PPUSH
22908: LD_INT 1
22910: PPUSH
22911: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22915: LD_INT 6
22917: PPUSH
22918: LD_VAR 0 3
22922: PPUSH
22923: LD_INT 1
22925: PPUSH
22926: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22930: LD_INT 7
22932: PPUSH
22933: LD_VAR 0 3
22937: PPUSH
22938: LD_INT 1
22940: PPUSH
22941: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22945: LD_INT 8
22947: PPUSH
22948: LD_VAR 0 3
22952: PPUSH
22953: LD_INT 1
22955: PPUSH
22956: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22960: LD_INT 10
22962: PPUSH
22963: LD_VAR 0 3
22967: PPUSH
22968: LD_INT 1
22970: PPUSH
22971: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22975: LD_INT 11
22977: PPUSH
22978: LD_VAR 0 3
22982: PPUSH
22983: LD_INT 1
22985: PPUSH
22986: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22990: LD_INT 12
22992: PPUSH
22993: LD_VAR 0 3
22997: PPUSH
22998: LD_INT 1
23000: PPUSH
23001: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23005: LD_INT 13
23007: PPUSH
23008: LD_VAR 0 3
23012: PPUSH
23013: LD_INT 1
23015: PPUSH
23016: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23020: LD_INT 14
23022: PPUSH
23023: LD_VAR 0 3
23027: PPUSH
23028: LD_INT 1
23030: PPUSH
23031: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23035: LD_INT 15
23037: PPUSH
23038: LD_VAR 0 3
23042: PPUSH
23043: LD_INT 1
23045: PPUSH
23046: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23050: LD_INT 16
23052: PPUSH
23053: LD_VAR 0 3
23057: PPUSH
23058: LD_INT 1
23060: PPUSH
23061: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23065: LD_INT 17
23067: PPUSH
23068: LD_VAR 0 3
23072: PPUSH
23073: LD_INT 1
23075: PPUSH
23076: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23080: LD_INT 19
23082: PPUSH
23083: LD_VAR 0 3
23087: PPUSH
23088: LD_INT 1
23090: PPUSH
23091: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23095: LD_INT 20
23097: PPUSH
23098: LD_VAR 0 3
23102: PPUSH
23103: LD_INT 1
23105: PPUSH
23106: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23110: LD_INT 21
23112: PPUSH
23113: LD_VAR 0 3
23117: PPUSH
23118: LD_INT 1
23120: PPUSH
23121: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23125: LD_INT 23
23127: PPUSH
23128: LD_VAR 0 3
23132: PPUSH
23133: LD_INT 1
23135: PPUSH
23136: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23140: LD_INT 26
23142: PPUSH
23143: LD_VAR 0 3
23147: PPUSH
23148: LD_INT 1
23150: PPUSH
23151: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23155: LD_INT 27
23157: PPUSH
23158: LD_VAR 0 3
23162: PPUSH
23163: LD_INT 1
23165: PPUSH
23166: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23170: LD_INT 28
23172: PPUSH
23173: LD_VAR 0 3
23177: PPUSH
23178: LD_INT 1
23180: PPUSH
23181: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23185: LD_INT 29
23187: PPUSH
23188: LD_VAR 0 3
23192: PPUSH
23193: LD_INT 1
23195: PPUSH
23196: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23200: LD_INT 30
23202: PPUSH
23203: LD_VAR 0 3
23207: PPUSH
23208: LD_INT 1
23210: PPUSH
23211: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23215: LD_INT 31
23217: PPUSH
23218: LD_VAR 0 3
23222: PPUSH
23223: LD_INT 1
23225: PPUSH
23226: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23230: LD_INT 32
23232: PPUSH
23233: LD_VAR 0 3
23237: PPUSH
23238: LD_INT 1
23240: PPUSH
23241: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23245: LD_INT 36
23247: PPUSH
23248: LD_VAR 0 3
23252: PPUSH
23253: LD_INT 1
23255: PPUSH
23256: CALL_OW 324
// end ; 5 :
23260: GO 25391
23262: LD_INT 5
23264: DOUBLE
23265: EQUAL
23266: IFTRUE 23270
23268: GO 24383
23270: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23271: LD_INT 35
23273: PPUSH
23274: LD_VAR 0 3
23278: PPUSH
23279: LD_INT 1
23281: PPUSH
23282: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23286: LD_INT 45
23288: PPUSH
23289: LD_VAR 0 3
23293: PPUSH
23294: LD_INT 1
23296: PPUSH
23297: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23301: LD_INT 46
23303: PPUSH
23304: LD_VAR 0 3
23308: PPUSH
23309: LD_INT 1
23311: PPUSH
23312: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23316: LD_INT 47
23318: PPUSH
23319: LD_VAR 0 3
23323: PPUSH
23324: LD_INT 1
23326: PPUSH
23327: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23331: LD_INT 1
23333: PPUSH
23334: LD_VAR 0 3
23338: PPUSH
23339: LD_INT 1
23341: PPUSH
23342: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23346: LD_INT 2
23348: PPUSH
23349: LD_VAR 0 3
23353: PPUSH
23354: LD_INT 1
23356: PPUSH
23357: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23361: LD_INT 11
23363: PPUSH
23364: LD_VAR 0 3
23368: PPUSH
23369: LD_INT 1
23371: PPUSH
23372: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23376: LD_INT 20
23378: PPUSH
23379: LD_VAR 0 3
23383: PPUSH
23384: LD_INT 1
23386: PPUSH
23387: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23391: LD_INT 48
23393: PPUSH
23394: LD_VAR 0 3
23398: PPUSH
23399: LD_INT 1
23401: PPUSH
23402: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23406: LD_INT 49
23408: PPUSH
23409: LD_VAR 0 3
23413: PPUSH
23414: LD_INT 1
23416: PPUSH
23417: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23421: LD_INT 69
23423: PPUSH
23424: LD_VAR 0 3
23428: PPUSH
23429: LD_INT 1
23431: PPUSH
23432: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23436: LD_INT 39
23438: PPUSH
23439: LD_VAR 0 3
23443: PPUSH
23444: LD_INT 1
23446: PPUSH
23447: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23451: LD_INT 34
23453: PPUSH
23454: LD_VAR 0 3
23458: PPUSH
23459: LD_INT 1
23461: PPUSH
23462: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23466: LD_INT 42
23468: PPUSH
23469: LD_VAR 0 3
23473: PPUSH
23474: LD_INT 1
23476: PPUSH
23477: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23481: LD_INT 44
23483: PPUSH
23484: LD_VAR 0 3
23488: PPUSH
23489: LD_INT 1
23491: PPUSH
23492: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23496: LD_INT 41
23498: PPUSH
23499: LD_VAR 0 3
23503: PPUSH
23504: LD_INT 1
23506: PPUSH
23507: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
23511: LD_INT 40
23513: PPUSH
23514: LD_VAR 0 3
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23526: LD_INT 43
23528: PPUSH
23529: LD_VAR 0 3
23533: PPUSH
23534: LD_INT 1
23536: PPUSH
23537: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23541: LD_INT 70
23543: PPUSH
23544: LD_VAR 0 3
23548: PPUSH
23549: LD_INT 1
23551: PPUSH
23552: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23556: LD_INT 51
23558: PPUSH
23559: LD_VAR 0 3
23563: PPUSH
23564: LD_INT 1
23566: PPUSH
23567: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23571: LD_INT 52
23573: PPUSH
23574: LD_VAR 0 3
23578: PPUSH
23579: LD_INT 1
23581: PPUSH
23582: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23586: LD_INT 6
23588: PPUSH
23589: LD_VAR 0 3
23593: PPUSH
23594: LD_INT 1
23596: PPUSH
23597: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23601: LD_INT 15
23603: PPUSH
23604: LD_VAR 0 3
23608: PPUSH
23609: LD_INT 1
23611: PPUSH
23612: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23616: LD_INT 7
23618: PPUSH
23619: LD_VAR 0 3
23623: PPUSH
23624: LD_INT 1
23626: PPUSH
23627: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23631: LD_INT 12
23633: PPUSH
23634: LD_VAR 0 3
23638: PPUSH
23639: LD_INT 1
23641: PPUSH
23642: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
23646: LD_INT 17
23648: PPUSH
23649: LD_VAR 0 3
23653: PPUSH
23654: LD_INT 1
23656: PPUSH
23657: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23661: LD_INT 18
23663: PPUSH
23664: LD_VAR 0 3
23668: PPUSH
23669: LD_INT 1
23671: PPUSH
23672: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23676: LD_INT 60
23678: PPUSH
23679: LD_VAR 0 3
23683: PPUSH
23684: LD_INT 1
23686: PPUSH
23687: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23691: LD_INT 32
23693: PPUSH
23694: LD_VAR 0 3
23698: PPUSH
23699: LD_INT 1
23701: PPUSH
23702: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23706: LD_INT 9
23708: PPUSH
23709: LD_VAR 0 3
23713: PPUSH
23714: LD_INT 1
23716: PPUSH
23717: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23721: LD_INT 57
23723: PPUSH
23724: LD_VAR 0 3
23728: PPUSH
23729: LD_INT 1
23731: PPUSH
23732: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23736: LD_INT 30
23738: PPUSH
23739: LD_VAR 0 3
23743: PPUSH
23744: LD_INT 1
23746: PPUSH
23747: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23751: LD_INT 37
23753: PPUSH
23754: LD_VAR 0 3
23758: PPUSH
23759: LD_INT 1
23761: PPUSH
23762: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23766: LD_INT 63
23768: PPUSH
23769: LD_VAR 0 3
23773: PPUSH
23774: LD_INT 1
23776: PPUSH
23777: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23781: LD_INT 3
23783: PPUSH
23784: LD_VAR 0 3
23788: PPUSH
23789: LD_INT 1
23791: PPUSH
23792: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23796: LD_INT 4
23798: PPUSH
23799: LD_VAR 0 3
23803: PPUSH
23804: LD_INT 1
23806: PPUSH
23807: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23811: LD_INT 5
23813: PPUSH
23814: LD_VAR 0 3
23818: PPUSH
23819: LD_INT 1
23821: PPUSH
23822: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23826: LD_INT 66
23828: PPUSH
23829: LD_VAR 0 3
23833: PPUSH
23834: LD_INT 1
23836: PPUSH
23837: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23841: LD_INT 21
23843: PPUSH
23844: LD_VAR 0 3
23848: PPUSH
23849: LD_INT 1
23851: PPUSH
23852: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23856: LD_INT 22
23858: PPUSH
23859: LD_VAR 0 3
23863: PPUSH
23864: LD_INT 1
23866: PPUSH
23867: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23871: LD_INT 19
23873: PPUSH
23874: LD_VAR 0 3
23878: PPUSH
23879: LD_INT 1
23881: PPUSH
23882: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23886: LD_INT 54
23888: PPUSH
23889: LD_VAR 0 3
23893: PPUSH
23894: LD_INT 1
23896: PPUSH
23897: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23901: LD_INT 55
23903: PPUSH
23904: LD_VAR 0 3
23908: PPUSH
23909: LD_INT 1
23911: PPUSH
23912: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23916: LD_INT 0
23918: PPUSH
23919: LD_VAR 0 3
23923: PPUSH
23924: LD_INT 1
23926: PPUSH
23927: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23931: LD_INT 1
23933: PPUSH
23934: LD_VAR 0 3
23938: PPUSH
23939: LD_INT 1
23941: PPUSH
23942: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23946: LD_INT 2
23948: PPUSH
23949: LD_VAR 0 3
23953: PPUSH
23954: LD_INT 1
23956: PPUSH
23957: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23961: LD_INT 3
23963: PPUSH
23964: LD_VAR 0 3
23968: PPUSH
23969: LD_INT 1
23971: PPUSH
23972: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23976: LD_INT 4
23978: PPUSH
23979: LD_VAR 0 3
23983: PPUSH
23984: LD_INT 1
23986: PPUSH
23987: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23991: LD_INT 5
23993: PPUSH
23994: LD_VAR 0 3
23998: PPUSH
23999: LD_INT 1
24001: PPUSH
24002: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24006: LD_INT 6
24008: PPUSH
24009: LD_VAR 0 3
24013: PPUSH
24014: LD_INT 1
24016: PPUSH
24017: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24021: LD_INT 7
24023: PPUSH
24024: LD_VAR 0 3
24028: PPUSH
24029: LD_INT 1
24031: PPUSH
24032: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24036: LD_INT 8
24038: PPUSH
24039: LD_VAR 0 3
24043: PPUSH
24044: LD_INT 1
24046: PPUSH
24047: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24051: LD_INT 10
24053: PPUSH
24054: LD_VAR 0 3
24058: PPUSH
24059: LD_INT 1
24061: PPUSH
24062: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24066: LD_INT 11
24068: PPUSH
24069: LD_VAR 0 3
24073: PPUSH
24074: LD_INT 1
24076: PPUSH
24077: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24081: LD_INT 12
24083: PPUSH
24084: LD_VAR 0 3
24088: PPUSH
24089: LD_INT 1
24091: PPUSH
24092: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24096: LD_INT 13
24098: PPUSH
24099: LD_VAR 0 3
24103: PPUSH
24104: LD_INT 1
24106: PPUSH
24107: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24111: LD_INT 14
24113: PPUSH
24114: LD_VAR 0 3
24118: PPUSH
24119: LD_INT 1
24121: PPUSH
24122: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24126: LD_INT 15
24128: PPUSH
24129: LD_VAR 0 3
24133: PPUSH
24134: LD_INT 1
24136: PPUSH
24137: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24141: LD_INT 16
24143: PPUSH
24144: LD_VAR 0 3
24148: PPUSH
24149: LD_INT 1
24151: PPUSH
24152: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24156: LD_INT 17
24158: PPUSH
24159: LD_VAR 0 3
24163: PPUSH
24164: LD_INT 1
24166: PPUSH
24167: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24171: LD_INT 18
24173: PPUSH
24174: LD_VAR 0 3
24178: PPUSH
24179: LD_INT 1
24181: PPUSH
24182: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
24186: LD_INT 19
24188: PPUSH
24189: LD_VAR 0 3
24193: PPUSH
24194: LD_INT 1
24196: PPUSH
24197: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
24201: LD_INT 20
24203: PPUSH
24204: LD_VAR 0 3
24208: PPUSH
24209: LD_INT 1
24211: PPUSH
24212: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
24216: LD_INT 21
24218: PPUSH
24219: LD_VAR 0 3
24223: PPUSH
24224: LD_INT 1
24226: PPUSH
24227: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
24231: LD_INT 23
24233: PPUSH
24234: LD_VAR 0 3
24238: PPUSH
24239: LD_INT 1
24241: PPUSH
24242: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
24246: LD_INT 26
24248: PPUSH
24249: LD_VAR 0 3
24253: PPUSH
24254: LD_INT 1
24256: PPUSH
24257: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
24261: LD_INT 27
24263: PPUSH
24264: LD_VAR 0 3
24268: PPUSH
24269: LD_INT 1
24271: PPUSH
24272: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
24276: LD_INT 28
24278: PPUSH
24279: LD_VAR 0 3
24283: PPUSH
24284: LD_INT 1
24286: PPUSH
24287: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
24291: LD_INT 29
24293: PPUSH
24294: LD_VAR 0 3
24298: PPUSH
24299: LD_INT 1
24301: PPUSH
24302: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24306: LD_INT 30
24308: PPUSH
24309: LD_VAR 0 3
24313: PPUSH
24314: LD_INT 1
24316: PPUSH
24317: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24321: LD_INT 31
24323: PPUSH
24324: LD_VAR 0 3
24328: PPUSH
24329: LD_INT 1
24331: PPUSH
24332: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24336: LD_INT 32
24338: PPUSH
24339: LD_VAR 0 3
24343: PPUSH
24344: LD_INT 1
24346: PPUSH
24347: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
24351: LD_INT 33
24353: PPUSH
24354: LD_VAR 0 3
24358: PPUSH
24359: LD_INT 1
24361: PPUSH
24362: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
24366: LD_INT 36
24368: PPUSH
24369: LD_VAR 0 3
24373: PPUSH
24374: LD_INT 1
24376: PPUSH
24377: CALL_OW 324
// end ; 6 :
24381: GO 25391
24383: LD_INT 6
24385: DOUBLE
24386: EQUAL
24387: IFTRUE 24391
24389: GO 25316
24391: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
24392: LD_INT 35
24394: PPUSH
24395: LD_VAR 0 3
24399: PPUSH
24400: LD_INT 1
24402: PPUSH
24403: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
24407: LD_INT 45
24409: PPUSH
24410: LD_VAR 0 3
24414: PPUSH
24415: LD_INT 1
24417: PPUSH
24418: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
24422: LD_INT 46
24424: PPUSH
24425: LD_VAR 0 3
24429: PPUSH
24430: LD_INT 1
24432: PPUSH
24433: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
24437: LD_INT 47
24439: PPUSH
24440: LD_VAR 0 3
24444: PPUSH
24445: LD_INT 1
24447: PPUSH
24448: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
24452: LD_INT 1
24454: PPUSH
24455: LD_VAR 0 3
24459: PPUSH
24460: LD_INT 1
24462: PPUSH
24463: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
24467: LD_INT 2
24469: PPUSH
24470: LD_VAR 0 3
24474: PPUSH
24475: LD_INT 1
24477: PPUSH
24478: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
24482: LD_INT 11
24484: PPUSH
24485: LD_VAR 0 3
24489: PPUSH
24490: LD_INT 1
24492: PPUSH
24493: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24497: LD_INT 20
24499: PPUSH
24500: LD_VAR 0 3
24504: PPUSH
24505: LD_INT 1
24507: PPUSH
24508: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24512: LD_INT 48
24514: PPUSH
24515: LD_VAR 0 3
24519: PPUSH
24520: LD_INT 1
24522: PPUSH
24523: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24527: LD_INT 49
24529: PPUSH
24530: LD_VAR 0 3
24534: PPUSH
24535: LD_INT 1
24537: PPUSH
24538: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
24542: LD_INT 50
24544: PPUSH
24545: LD_VAR 0 3
24549: PPUSH
24550: LD_INT 1
24552: PPUSH
24553: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24557: LD_INT 69
24559: PPUSH
24560: LD_VAR 0 3
24564: PPUSH
24565: LD_INT 1
24567: PPUSH
24568: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24572: LD_INT 39
24574: PPUSH
24575: LD_VAR 0 3
24579: PPUSH
24580: LD_INT 1
24582: PPUSH
24583: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24587: LD_INT 34
24589: PPUSH
24590: LD_VAR 0 3
24594: PPUSH
24595: LD_INT 1
24597: PPUSH
24598: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24602: LD_INT 42
24604: PPUSH
24605: LD_VAR 0 3
24609: PPUSH
24610: LD_INT 1
24612: PPUSH
24613: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24617: LD_INT 44
24619: PPUSH
24620: LD_VAR 0 3
24624: PPUSH
24625: LD_INT 1
24627: PPUSH
24628: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24632: LD_INT 41
24634: PPUSH
24635: LD_VAR 0 3
24639: PPUSH
24640: LD_INT 1
24642: PPUSH
24643: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
24647: LD_INT 13
24649: PPUSH
24650: LD_VAR 0 3
24654: PPUSH
24655: LD_INT 1
24657: PPUSH
24658: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24662: LD_INT 40
24664: PPUSH
24665: LD_VAR 0 3
24669: PPUSH
24670: LD_INT 1
24672: PPUSH
24673: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24677: LD_INT 43
24679: PPUSH
24680: LD_VAR 0 3
24684: PPUSH
24685: LD_INT 1
24687: PPUSH
24688: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24692: LD_INT 70
24694: PPUSH
24695: LD_VAR 0 3
24699: PPUSH
24700: LD_INT 1
24702: PPUSH
24703: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
24707: LD_INT 23
24709: PPUSH
24710: LD_VAR 0 3
24714: PPUSH
24715: LD_INT 1
24717: PPUSH
24718: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24722: LD_INT 51
24724: PPUSH
24725: LD_VAR 0 3
24729: PPUSH
24730: LD_INT 1
24732: PPUSH
24733: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24737: LD_INT 52
24739: PPUSH
24740: LD_VAR 0 3
24744: PPUSH
24745: LD_INT 1
24747: PPUSH
24748: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24752: LD_INT 6
24754: PPUSH
24755: LD_VAR 0 3
24759: PPUSH
24760: LD_INT 1
24762: PPUSH
24763: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24767: LD_INT 15
24769: PPUSH
24770: LD_VAR 0 3
24774: PPUSH
24775: LD_INT 1
24777: PPUSH
24778: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24782: LD_INT 7
24784: PPUSH
24785: LD_VAR 0 3
24789: PPUSH
24790: LD_INT 1
24792: PPUSH
24793: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24797: LD_INT 12
24799: PPUSH
24800: LD_VAR 0 3
24804: PPUSH
24805: LD_INT 1
24807: PPUSH
24808: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
24812: LD_INT 10
24814: PPUSH
24815: LD_VAR 0 3
24819: PPUSH
24820: LD_INT 1
24822: PPUSH
24823: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24827: LD_INT 17
24829: PPUSH
24830: LD_VAR 0 3
24834: PPUSH
24835: LD_INT 1
24837: PPUSH
24838: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24842: LD_INT 18
24844: PPUSH
24845: LD_VAR 0 3
24849: PPUSH
24850: LD_INT 1
24852: PPUSH
24853: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24857: LD_INT 60
24859: PPUSH
24860: LD_VAR 0 3
24864: PPUSH
24865: LD_INT 1
24867: PPUSH
24868: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
24872: LD_INT 61
24874: PPUSH
24875: LD_VAR 0 3
24879: PPUSH
24880: LD_INT 1
24882: PPUSH
24883: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24887: LD_INT 32
24889: PPUSH
24890: LD_VAR 0 3
24894: PPUSH
24895: LD_INT 1
24897: PPUSH
24898: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
24902: LD_INT 27
24904: PPUSH
24905: LD_VAR 0 3
24909: PPUSH
24910: LD_INT 1
24912: PPUSH
24913: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
24917: LD_INT 36
24919: PPUSH
24920: LD_VAR 0 3
24924: PPUSH
24925: LD_INT 1
24927: PPUSH
24928: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
24932: LD_INT 33
24934: PPUSH
24935: LD_VAR 0 3
24939: PPUSH
24940: LD_INT 1
24942: PPUSH
24943: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24947: LD_INT 9
24949: PPUSH
24950: LD_VAR 0 3
24954: PPUSH
24955: LD_INT 1
24957: PPUSH
24958: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
24962: LD_INT 38
24964: PPUSH
24965: LD_VAR 0 3
24969: PPUSH
24970: LD_INT 1
24972: PPUSH
24973: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24977: LD_INT 57
24979: PPUSH
24980: LD_VAR 0 3
24984: PPUSH
24985: LD_INT 1
24987: PPUSH
24988: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
24992: LD_INT 58
24994: PPUSH
24995: LD_VAR 0 3
24999: PPUSH
25000: LD_INT 1
25002: PPUSH
25003: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25007: LD_INT 28
25009: PPUSH
25010: LD_VAR 0 3
25014: PPUSH
25015: LD_INT 1
25017: PPUSH
25018: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25022: LD_INT 29
25024: PPUSH
25025: LD_VAR 0 3
25029: PPUSH
25030: LD_INT 1
25032: PPUSH
25033: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25037: LD_INT 30
25039: PPUSH
25040: LD_VAR 0 3
25044: PPUSH
25045: LD_INT 1
25047: PPUSH
25048: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25052: LD_INT 37
25054: PPUSH
25055: LD_VAR 0 3
25059: PPUSH
25060: LD_INT 1
25062: PPUSH
25063: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25067: LD_INT 63
25069: PPUSH
25070: LD_VAR 0 3
25074: PPUSH
25075: LD_INT 1
25077: PPUSH
25078: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25082: LD_INT 64
25084: PPUSH
25085: LD_VAR 0 3
25089: PPUSH
25090: LD_INT 1
25092: PPUSH
25093: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25097: LD_INT 3
25099: PPUSH
25100: LD_VAR 0 3
25104: PPUSH
25105: LD_INT 1
25107: PPUSH
25108: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25112: LD_INT 4
25114: PPUSH
25115: LD_VAR 0 3
25119: PPUSH
25120: LD_INT 1
25122: PPUSH
25123: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25127: LD_INT 5
25129: PPUSH
25130: LD_VAR 0 3
25134: PPUSH
25135: LD_INT 1
25137: PPUSH
25138: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25142: LD_INT 8
25144: PPUSH
25145: LD_VAR 0 3
25149: PPUSH
25150: LD_INT 1
25152: PPUSH
25153: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25157: LD_INT 66
25159: PPUSH
25160: LD_VAR 0 3
25164: PPUSH
25165: LD_INT 1
25167: PPUSH
25168: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25172: LD_INT 67
25174: PPUSH
25175: LD_VAR 0 3
25179: PPUSH
25180: LD_INT 1
25182: PPUSH
25183: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
25187: LD_INT 21
25189: PPUSH
25190: LD_VAR 0 3
25194: PPUSH
25195: LD_INT 1
25197: PPUSH
25198: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
25202: LD_INT 22
25204: PPUSH
25205: LD_VAR 0 3
25209: PPUSH
25210: LD_INT 1
25212: PPUSH
25213: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
25217: LD_INT 19
25219: PPUSH
25220: LD_VAR 0 3
25224: PPUSH
25225: LD_INT 1
25227: PPUSH
25228: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
25232: LD_INT 26
25234: PPUSH
25235: LD_VAR 0 3
25239: PPUSH
25240: LD_INT 1
25242: PPUSH
25243: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
25247: LD_INT 54
25249: PPUSH
25250: LD_VAR 0 3
25254: PPUSH
25255: LD_INT 1
25257: PPUSH
25258: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
25262: LD_INT 55
25264: PPUSH
25265: LD_VAR 0 3
25269: PPUSH
25270: LD_INT 1
25272: PPUSH
25273: CALL_OW 322
// for i = 0 to 39 do
25277: LD_ADDR_VAR 0 4
25281: PUSH
25282: DOUBLE
25283: LD_INT 0
25285: DEC
25286: ST_TO_ADDR
25287: LD_INT 39
25289: PUSH
25290: FOR_TO
25291: IFFALSE 25312
// SetRestrict ( i , side , true ) ;
25293: LD_VAR 0 4
25297: PPUSH
25298: LD_VAR 0 3
25302: PPUSH
25303: LD_INT 1
25305: PPUSH
25306: CALL_OW 324
25310: GO 25290
25312: POP
25313: POP
// end ; else
25314: GO 25391
25316: POP
// begin for i = 1 to 73 do
25317: LD_ADDR_VAR 0 4
25321: PUSH
25322: DOUBLE
25323: LD_INT 1
25325: DEC
25326: ST_TO_ADDR
25327: LD_INT 73
25329: PUSH
25330: FOR_TO
25331: IFFALSE 25352
// SetTech ( i , side , state_enabled ) ;
25333: LD_VAR 0 4
25337: PPUSH
25338: LD_VAR 0 3
25342: PPUSH
25343: LD_INT 1
25345: PPUSH
25346: CALL_OW 322
25350: GO 25330
25352: POP
25353: POP
// for i = 0 to 39 do
25354: LD_ADDR_VAR 0 4
25358: PUSH
25359: DOUBLE
25360: LD_INT 0
25362: DEC
25363: ST_TO_ADDR
25364: LD_INT 39
25366: PUSH
25367: FOR_TO
25368: IFFALSE 25389
// SetRestrict ( i , side , true ) ;
25370: LD_VAR 0 4
25374: PPUSH
25375: LD_VAR 0 3
25379: PPUSH
25380: LD_INT 1
25382: PPUSH
25383: CALL_OW 324
25387: GO 25367
25389: POP
25390: POP
// end ; end ; end ;
25391: GO 21396
25393: POP
25394: POP
// end ;
25395: LD_VAR 0 2
25399: RET
