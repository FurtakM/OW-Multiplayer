// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 46
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 46
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 356: LD_ADDR_EXP 25
 360: PUSH
 361: LD_EXP 21
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: EMPTY
 370: LIST
 371: DIFF
 372: PUSH
 373: LD_INT 1
 375: GREATER
 376: ST_TO_ADDR
// if Multiplayer then
 377: LD_OWVAR 4
 381: IFFALSE 653
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 383: LD_ADDR_EXP 48
 387: PUSH
 388: LD_INT 0
 390: PPUSH
 391: CALL_OW 426
 395: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 396: LD_ADDR_EXP 49
 400: PUSH
 401: LD_INT 1
 403: PPUSH
 404: CALL_OW 426
 408: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 409: LD_ADDR_EXP 50
 413: PUSH
 414: LD_INT 2
 416: PPUSH
 417: CALL_OW 426
 421: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 422: LD_ADDR_EXP 51
 426: PUSH
 427: LD_INT 3
 429: PPUSH
 430: CALL_OW 426
 434: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 435: LD_ADDR_EXP 52
 439: PUSH
 440: LD_INT 4
 442: PPUSH
 443: CALL_OW 426
 447: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 448: LD_ADDR_EXP 53
 452: PUSH
 453: LD_INT 5
 455: PPUSH
 456: CALL_OW 426
 460: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 461: LD_ADDR_EXP 55
 465: PUSH
 466: LD_INT 10
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 474: LD_ADDR_EXP 56
 478: PUSH
 479: LD_INT 11
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 487: LD_ADDR_EXP 57
 491: PUSH
 492: LD_INT 12
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 500: LD_ADDR_EXP 59
 504: PUSH
 505: LD_INT 13
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 513: LD_ADDR_EXP 58
 517: PUSH
 518: LD_INT 14
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 526: LD_ADDR_EXP 60
 530: PUSH
 531: LD_INT 15
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 539: LD_ADDR_EXP 1
 543: PUSH
 544: LD_INT 6
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 552: LD_ADDR_EXP 2
 556: PUSH
 557: LD_INT 7
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 565: LD_ADDR_EXP 4
 569: PUSH
 570: LD_INT 8
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 578: LD_ADDR_EXP 3
 582: PUSH
 583: LD_INT 9
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 591: LD_ADDR_EXP 5
 595: PUSH
 596: LD_INT 16
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 604: LD_ADDR_EXP 6
 608: PUSH
 609: LD_INT 17
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 617: LD_ADDR_EXP 61
 621: PUSH
 622: LD_INT 20
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 630: LD_ADDR_VAR 0 3
 634: PUSH
 635: LD_INT 22
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_win_rules = 0 ;
 643: LD_ADDR_EXP 19
 647: PUSH
 648: LD_INT 0
 650: ST_TO_ADDR
// end else
 651: GO 825
// begin Randomize ;
 653: CALL_OW 10
// def_base_level := 2 ;
 657: LD_ADDR_EXP 48
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_amount_of_people := 10 ;
 665: LD_ADDR_EXP 49
 669: PUSH
 670: LD_INT 10
 672: ST_TO_ADDR
// def_skill_level := 1 ;
 673: LD_ADDR_EXP 50
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_starting_resources := 2 ;
 681: LD_ADDR_EXP 51
 685: PUSH
 686: LD_INT 2
 688: ST_TO_ADDR
// def_shipments_density := 50 ;
 689: LD_ADDR_EXP 52
 693: PUSH
 694: LD_INT 50
 696: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 697: LD_ADDR_EXP 53
 701: PUSH
 702: LD_INT 0
 704: ST_TO_ADDR
// def_shared_vision := 1 ;
 705: LD_ADDR_EXP 55
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_morale_flags := 1 ;
 713: LD_ADDR_EXP 56
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// def_siberite_detection := 1 ;
 721: LD_ADDR_EXP 57
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 729: LD_ADDR_EXP 59
 733: PUSH
 734: LD_INT 3
 736: ST_TO_ADDR
// def_people_respawning := 2 ;
 737: LD_ADDR_EXP 58
 741: PUSH
 742: LD_INT 2
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 60
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_artefact_one := 1 ;
 753: LD_ADDR_EXP 1
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_artefact_two := 1 ;
 761: LD_ADDR_EXP 2
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 769: LD_ADDR_EXP 4
 773: PUSH
 774: LD_INT 2
 776: ST_TO_ADDR
// def_artefact_three := 1 ;
 777: LD_ADDR_EXP 3
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// def_kings_age := 1 ;
 785: LD_ADDR_EXP 5
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_public_score := 0 ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 0
 800: ST_TO_ADDR
// def_builduptime := 1 ;
 801: LD_ADDR_EXP 61
 805: PUSH
 806: LD_INT 1
 808: ST_TO_ADDR
// tech_level = 4 ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// def_win_rules = 0 ;
 817: LD_ADDR_EXP 19
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// end ; InitGameRules ;
 825: CALL 13480 0 0
// if def_game_rules = 0 then
 829: LD_EXP 47
 833: PUSH
 834: LD_INT 0
 836: EQUAL
 837: IFFALSE 864
// begin if isSGUI then
 839: LD_OWVAR 83
 843: IFFALSE 851
// setMpTechs ( ) else
 845: CALL 21829 0 0
 849: GO 864
// begin SetMpTechLevel ( tech_level + 1 ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: PPUSH
 860: CALL 21976 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 864: LD_ADDR_EXP 7
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: LD_INT 1
 874: PUSH
 875: LD_INT 1
 877: PUSH
 878: LD_INT 1
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: PUSH
 887: LD_EXP 48
 891: PUSH
 892: LD_INT 1
 894: PLUS
 895: ARRAY
 896: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 897: LD_ADDR_EXP 8
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: LD_INT 2
 910: PUSH
 911: LD_INT 3
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_EXP 48
 924: PUSH
 925: LD_INT 1
 927: PLUS
 928: ARRAY
 929: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 930: LD_ADDR_EXP 9
 934: PUSH
 935: LD_EXP 49
 939: PUSH
 940: LD_INT 4
 942: PLUS
 943: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 944: LD_ADDR_EXP 10
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: LD_INT 3
 954: PUSH
 955: LD_INT 4
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: PUSH
 967: LD_EXP 50
 971: PUSH
 972: LD_INT 1
 974: PLUS
 975: ARRAY
 976: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 977: LD_ADDR_EXP 12
 981: PUSH
 982: LD_INT 0
 984: PUSH
 985: LD_INT 0
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 0
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 50
1012: PUSH
1013: LD_INT 20
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 40
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_EXP 51
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1054: LD_ADDR_EXP 11
1058: PUSH
1059: LD_INT 10
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: LD_INT 7
1067: PUSH
1068: LD_INT 14
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 6
1077: PUSH
1078: LD_INT 12
1080: PUSH
1081: LD_INT 18
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 5
1091: PUSH
1092: LD_INT 10
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_EXP 51
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: ARRAY
1122: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1123: LD_ADDR_EXP 13
1127: PUSH
1128: LD_INT 150
1130: PUSH
1131: LD_EXP 52
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: MINUS
1140: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1141: LD_ADDR_EXP 15
1145: PUSH
1146: LD_INT 0
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 2
1154: PUSH
1155: LD_INT 3
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 59
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1174: LD_ADDR_EXP 16
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 12600
1184: PUSH
1185: LD_INT 2100
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 58
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1203: LD_ADDR_EXP 17
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 21000
1213: PUSH
1214: LD_INT 4200
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_EXP 58
1226: PUSH
1227: LD_INT 1
1229: PLUS
1230: ARRAY
1231: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1232: LD_ADDR_EXP 14
1236: PUSH
1237: LD_INT 1
1239: NEG
1240: PUSH
1241: LD_INT 350
1243: PUSH
1244: LD_INT 700
1246: PUSH
1247: LD_INT 1400
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 56
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// battle_flags_id := [ ] ;
1270: LD_ADDR_EXP 33
1274: PUSH
1275: EMPTY
1276: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1277: LD_ADDR_EXP 18
1281: PUSH
1282: LD_INT 0
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 63000
1290: PUSH
1291: LD_INT 126000
1293: PUSH
1294: LD_INT 189000
1296: PUSH
1297: LD_INT 252000
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: PUSH
1308: LD_EXP 60
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1318: LD_ADDR_EXP 20
1322: PUSH
1323: LD_INT 500
1325: PUSH
1326: LD_INT 1000
1328: PUSH
1329: LD_INT 1500
1331: PUSH
1332: LD_INT 2000
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 5
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1351: LD_EXP 60
1355: PUSH
1356: LD_INT 0
1358: EQUAL
1359: IFFALSE 1371
// siberite_bomb_Delay = 0 else
1361: LD_ADDR_EXP 18
1365: PUSH
1366: LD_INT 0
1368: ST_TO_ADDR
1369: GO 1393
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1371: LD_ADDR_EXP 18
1375: PUSH
1376: LD_EXP 60
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: LD_INT 21000
1387: MUL
1388: PUSH
1389: LD_INT 1
1391: PLUS
1392: ST_TO_ADDR
// end ;
1393: LD_VAR 0 1
1397: RET
// function init_map ; var i ; begin
1398: LD_INT 0
1400: PPUSH
1401: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1402: LD_ADDR_EXP 32
1406: PUSH
1407: LD_INT 43
1409: PUSH
1410: LD_INT 9
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 123
1419: PUSH
1420: LD_INT 10
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 113
1429: PUSH
1430: LD_INT 155
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PUSH
1437: LD_INT 186
1439: PUSH
1440: LD_INT 133
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1453: LD_ADDR_EXP 29
1457: PUSH
1458: LD_INT 18
1460: PUSH
1461: LD_INT 17
1463: PUSH
1464: LD_INT 2
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 156
1474: PUSH
1475: LD_INT 20
1477: PUSH
1478: LD_INT 3
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 83
1488: PUSH
1489: LD_INT 140
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 216
1502: PUSH
1503: LD_INT 143
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// for i in depot_def do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: LD_EXP 29
1529: PUSH
1530: FOR_IN
1531: IFFALSE 1605
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1533: LD_ADDR_EXP 31
1537: PUSH
1538: LD_EXP 31
1542: PUSH
1543: LD_VAR 0 2
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 2
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 6
1563: PPUSH
1564: CALL_OW 272
1568: PUSH
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 2
1576: ARRAY
1577: PPUSH
1578: LD_VAR 0 2
1582: PUSH
1583: LD_INT 3
1585: ARRAY
1586: PPUSH
1587: LD_INT 6
1589: PPUSH
1590: CALL_OW 273
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: ADD
1602: ST_TO_ADDR
1603: GO 1530
1605: POP
1606: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1607: LD_ADDR_EXP 30
1611: PUSH
1612: LD_INT 30
1614: PUSH
1615: LD_INT 36
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 44
1628: PUSH
1629: LD_INT 21
1631: PUSH
1632: LD_INT 4
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 43
1642: PUSH
1643: LD_INT 33
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 165
1661: PUSH
1662: LD_INT 34
1664: PUSH
1665: LD_INT 0
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 137
1675: PUSH
1676: LD_INT 18
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 153
1689: PUSH
1690: LD_INT 37
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 86
1708: PUSH
1709: LD_INT 120
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 105
1722: PUSH
1723: LD_INT 147
1725: PUSH
1726: LD_INT 4
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 68
1736: PUSH
1737: LD_INT 118
1739: PUSH
1740: LD_INT 2
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 199
1755: PUSH
1756: LD_INT 144
1758: PUSH
1759: LD_INT 1
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 207
1769: PUSH
1770: LD_INT 119
1772: PUSH
1773: LD_INT 3
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 195
1783: PUSH
1784: LD_INT 118
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: ST_TO_ADDR
// if not def_extra_oil_deposits then
1806: LD_EXP 53
1810: NOT
1811: IFFALSE 1852
// for i in extra_oil_deposits_locations do
1813: LD_ADDR_VAR 0 2
1817: PUSH
1818: LD_EXP 32
1822: PUSH
1823: FOR_IN
1824: IFFALSE 1850
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1826: LD_VAR 0 2
1830: PUSH
1831: LD_INT 1
1833: ARRAY
1834: PPUSH
1835: LD_VAR 0 2
1839: PUSH
1840: LD_INT 2
1842: ARRAY
1843: PPUSH
1844: CALL_OW 63
1848: GO 1823
1850: POP
1851: POP
// end ;
1852: LD_VAR 0 1
1856: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1857: LD_INT 0
1859: PPUSH
1860: PPUSH
1861: PPUSH
// if not Team_Game then
1862: LD_EXP 25
1866: NOT
1867: IFFALSE 1965
// begin for i = 1 to 8 do
1869: LD_ADDR_VAR 0 2
1873: PUSH
1874: DOUBLE
1875: LD_INT 1
1877: DEC
1878: ST_TO_ADDR
1879: LD_INT 8
1881: PUSH
1882: FOR_TO
1883: IFFALSE 1961
// for j = 1 to 8 do
1885: LD_ADDR_VAR 0 3
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 8
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1957
// if i <> j then
1901: LD_VAR 0 2
1905: PUSH
1906: LD_VAR 0 3
1910: NONEQUAL
1911: IFFALSE 1935
// SetAttitude ( i , j , att_neutral , true ) else
1913: LD_VAR 0 2
1917: PPUSH
1918: LD_VAR 0 3
1922: PPUSH
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 80
1933: GO 1955
// SetAttitude ( i , j , att_friend , true ) ;
1935: LD_VAR 0 2
1939: PPUSH
1940: LD_VAR 0 3
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: CALL_OW 80
1955: GO 1898
1957: POP
1958: POP
1959: GO 1882
1961: POP
1962: POP
// end else
1963: GO 2140
// begin if def_shared_vision then
1965: LD_EXP 55
1969: IFFALSE 2034
// begin for i in Teams do
1971: LD_ADDR_VAR 0 2
1975: PUSH
1976: LD_EXP 22
1980: PUSH
1981: FOR_IN
1982: IFFALSE 2032
// for j = 2 to i do
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: DOUBLE
1990: LD_INT 2
1992: DEC
1993: ST_TO_ADDR
1994: LD_VAR 0 2
1998: PUSH
1999: FOR_TO
2000: IFFALSE 2028
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2002: LD_VAR 0 2
2006: PUSH
2007: LD_VAR 0 3
2011: ARRAY
2012: PPUSH
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: CALL_OW 343
2026: GO 1999
2028: POP
2029: POP
2030: GO 1981
2032: POP
2033: POP
// end ; for i = 1 to 8 do
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: DOUBLE
2040: LD_INT 1
2042: DEC
2043: ST_TO_ADDR
2044: LD_INT 8
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2138
// for j = 1 to 8 do
2050: LD_ADDR_VAR 0 3
2054: PUSH
2055: DOUBLE
2056: LD_INT 1
2058: DEC
2059: ST_TO_ADDR
2060: LD_INT 8
2062: PUSH
2063: FOR_TO
2064: IFFALSE 2134
// if Side_Teams [ i ] = Side_Teams [ j ] then
2066: LD_EXP 21
2070: PUSH
2071: LD_VAR 0 2
2075: ARRAY
2076: PUSH
2077: LD_EXP 21
2081: PUSH
2082: LD_VAR 0 3
2086: ARRAY
2087: EQUAL
2088: IFFALSE 2112
// SetAttitude ( i , j , att_friend , true ) else
2090: LD_VAR 0 2
2094: PPUSH
2095: LD_VAR 0 3
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL_OW 80
2110: GO 2132
// SetAttitude ( i , j , att_enemy , true ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: LD_VAR 0 3
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: CALL_OW 80
2132: GO 2063
2134: POP
2135: POP
2136: GO 2047
2138: POP
2139: POP
// end ; end ;
2140: LD_VAR 0 1
2144: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
// result := [ ] ;
2151: LD_ADDR_VAR 0 7
2155: PUSH
2156: EMPTY
2157: ST_TO_ADDR
// for i := 1 to count do
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_VAR 0 1
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2592
// begin uc_direction := Rand ( 0 , 5 ) ;
2176: LD_ADDR_OWVAR 24
2180: PUSH
2181: LD_INT 0
2183: PPUSH
2184: LD_INT 5
2186: PPUSH
2187: CALL_OW 12
2191: ST_TO_ADDR
// if commander then
2192: LD_LOC 1
2196: IFFALSE 2305
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2198: LD_ADDR_OWVAR 26
2202: PUSH
2203: LD_OWVAR 19
2207: PUSH
2208: LD_OWVAR 20
2212: ARRAY
2213: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2214: LD_INT 1
2216: PPUSH
2217: LD_INT 2
2219: PPUSH
2220: CALL_OW 12
2224: PPUSH
2225: LD_VAR 0 2
2229: PPUSH
2230: LD_EXP 10
2234: PUSH
2235: LD_INT 2
2237: PLUS
2238: PPUSH
2239: CALL_OW 380
// hc_importance := 105 ;
2243: LD_ADDR_OWVAR 32
2247: PUSH
2248: LD_INT 105
2250: ST_TO_ADDR
// commander := false ;
2251: LD_ADDR_LOC 1
2255: PUSH
2256: LD_INT 0
2258: ST_TO_ADDR
// if Multiplayer then
2259: LD_OWVAR 4
2263: IFFALSE 2303
// begin hc_gallery := MULTIAVATARS ;
2265: LD_ADDR_OWVAR 33
2269: PUSH
2270: LD_STRING MULTIAVATARS
2272: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2273: LD_ADDR_OWVAR 34
2277: PUSH
2278: LD_OWVAR 20
2282: PPUSH
2283: CALL_OW 525
2287: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2288: LD_ADDR_OWVAR 27
2292: PUSH
2293: LD_OWVAR 20
2297: PPUSH
2298: CALL_OW 526
2302: ST_TO_ADDR
// end ; end else
2303: GO 2368
// begin hc_name :=  ;
2305: LD_ADDR_OWVAR 26
2309: PUSH
2310: LD_STRING 
2312: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2313: LD_INT 1
2315: PPUSH
2316: LD_INT 2
2318: PPUSH
2319: CALL_OW 12
2323: PPUSH
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_EXP 10
2333: PPUSH
2334: CALL_OW 380
// hc_importance := 0 ;
2338: LD_ADDR_OWVAR 32
2342: PUSH
2343: LD_INT 0
2345: ST_TO_ADDR
// if Multiplayer then
2346: LD_OWVAR 4
2350: IFFALSE 2368
// begin hc_gallery :=  ;
2352: LD_ADDR_OWVAR 33
2356: PUSH
2357: LD_STRING 
2359: ST_TO_ADDR
// hc_face_number := 0 ;
2360: LD_ADDR_OWVAR 34
2364: PUSH
2365: LD_INT 0
2367: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2368: LD_ADDR_VAR 0 10
2372: PUSH
2373: CALL_OW 44
2377: ST_TO_ADDR
// if global_defined then
2378: LD_LOC 3
2382: IFFALSE 2522
// begin if ( cl = class_soldier ) then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: EQUAL
2392: IFFALSE 2412
// j := i + soldiers_created else
2394: LD_ADDR_VAR 0 9
2398: PUSH
2399: LD_VAR 0 8
2403: PUSH
2404: LD_LOC 4
2408: PLUS
2409: ST_TO_ADDR
2410: GO 2422
// j := i ;
2412: LD_ADDR_VAR 0 9
2416: PUSH
2417: LD_VAR 0 8
2421: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2422: LD_LOC 2
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: PUSH
2433: LD_VAR 0 9
2437: ARRAY
2438: PPUSH
2439: LD_VAR 0 10
2443: PPUSH
2444: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2448: LD_VAR 0 10
2452: PPUSH
2453: LD_INT 2
2455: PPUSH
2456: LD_LOC 2
2460: PUSH
2461: LD_VAR 0 2
2465: ARRAY
2466: PUSH
2467: LD_VAR 0 9
2471: ARRAY
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: CALL_OW 260
2480: PPUSH
2481: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2485: LD_VAR 0 10
2489: PPUSH
2490: LD_INT 1
2492: PPUSH
2493: LD_LOC 2
2497: PUSH
2498: LD_VAR 0 2
2502: ARRAY
2503: PUSH
2504: LD_VAR 0 9
2508: ARRAY
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 260
2517: PPUSH
2518: CALL_OW 239
// end ; if building then
2522: LD_VAR 0 6
2526: IFFALSE 2544
// PlaceHumanInUnit ( un , building ) else
2528: LD_VAR 0 10
2532: PPUSH
2533: LD_VAR 0 6
2537: PPUSH
2538: CALL_OW 52
2542: GO 2571
// PlaceUnitXYR ( un , x , y , r , false ) ;
2544: LD_VAR 0 10
2548: PPUSH
2549: LD_VAR 0 3
2553: PPUSH
2554: LD_VAR 0 4
2558: PPUSH
2559: LD_VAR 0 5
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: CALL_OW 50
// result := result ^ [ un ] ;
2571: LD_ADDR_VAR 0 7
2575: PUSH
2576: LD_VAR 0 7
2580: PUSH
2581: LD_VAR 0 10
2585: PUSH
2586: EMPTY
2587: LIST
2588: ADD
2589: ST_TO_ADDR
// end ;
2590: GO 2173
2592: POP
2593: POP
// if not global_defined then
2594: LD_LOC 3
2598: NOT
2599: IFFALSE 2677
// if ( global_units >= cl ) then
2601: LD_LOC 2
2605: PUSH
2606: LD_VAR 0 2
2610: GREATEREQUAL
2611: IFFALSE 2652
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2613: LD_ADDR_LOC 2
2617: PUSH
2618: LD_LOC 2
2622: PPUSH
2623: LD_VAR 0 2
2627: PPUSH
2628: LD_LOC 2
2632: PUSH
2633: LD_VAR 0 2
2637: ARRAY
2638: PUSH
2639: LD_VAR 0 7
2643: ADD
2644: PPUSH
2645: CALL_OW 1
2649: ST_TO_ADDR
2650: GO 2677
// global_units := Replace ( global_units , cl , result ) ;
2652: LD_ADDR_LOC 2
2656: PUSH
2657: LD_LOC 2
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_VAR 0 7
2671: PPUSH
2672: CALL_OW 1
2676: ST_TO_ADDR
// if commander then
2677: LD_LOC 1
2681: IFFALSE 2728
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2683: LD_ADDR_EXP 34
2687: PUSH
2688: LD_EXP 34
2692: PPUSH
2693: LD_OWVAR 20
2697: PPUSH
2698: LD_EXP 34
2702: PUSH
2703: LD_OWVAR 20
2707: ARRAY
2708: PUSH
2709: LD_VAR 0 10
2713: ADD
2714: PPUSH
2715: CALL_OW 1
2719: ST_TO_ADDR
// commander := false ;
2720: LD_ADDR_LOC 1
2724: PUSH
2725: LD_INT 0
2727: ST_TO_ADDR
// end ; end ;
2728: LD_VAR 0 7
2732: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
// if side in [ 0 , 9 ] then
2744: LD_VAR 0 1
2748: PUSH
2749: LD_INT 0
2751: PUSH
2752: LD_INT 9
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: IN
2759: IFFALSE 2763
// exit ;
2761: GO 3838
// pos := Side_Positions [ side ] ;
2763: LD_ADDR_VAR 0 3
2767: PUSH
2768: LD_EXP 23
2772: PUSH
2773: LD_VAR 0 1
2777: ARRAY
2778: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2779: LD_ADDR_OWVAR 21
2783: PUSH
2784: LD_EXP 24
2788: PUSH
2789: LD_VAR 0 1
2793: ARRAY
2794: ST_TO_ADDR
// uc_side := side ;
2795: LD_ADDR_OWVAR 20
2799: PUSH
2800: LD_VAR 0 1
2804: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2805: LD_ADDR_VAR 0 4
2809: PUSH
2810: LD_EXP 29
2814: PUSH
2815: LD_VAR 0 3
2819: ARRAY
2820: PUSH
2821: LD_INT 1
2823: ARRAY
2824: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_EXP 29
2834: PUSH
2835: LD_VAR 0 3
2839: ARRAY
2840: PUSH
2841: LD_INT 2
2843: ARRAY
2844: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2845: LD_ADDR_VAR 0 6
2849: PUSH
2850: LD_EXP 29
2854: PUSH
2855: LD_VAR 0 3
2859: ARRAY
2860: PUSH
2861: LD_INT 3
2863: ARRAY
2864: ST_TO_ADDR
// if is_depot then
2865: LD_EXP 7
2869: IFFALSE 3002
// begin bc_type = b_depot ;
2871: LD_ADDR_OWVAR 42
2875: PUSH
2876: LD_INT 0
2878: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2879: LD_ADDR_VAR 0 10
2883: PUSH
2884: LD_VAR 0 4
2888: PPUSH
2889: LD_VAR 0 5
2893: PPUSH
2894: LD_VAR 0 6
2898: PPUSH
2899: CALL_OW 47
2903: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2904: LD_VAR 0 10
2908: PPUSH
2909: LD_STRING @
2911: PUSH
2912: LD_VAR 0 1
2916: STR
2917: PPUSH
2918: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2922: LD_VAR 0 10
2926: PPUSH
2927: CALL_OW 274
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: LD_EXP 12
2939: PUSH
2940: LD_INT 1
2942: ARRAY
2943: PPUSH
2944: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2948: LD_VAR 0 10
2952: PPUSH
2953: CALL_OW 274
2957: PPUSH
2958: LD_INT 2
2960: PPUSH
2961: LD_EXP 12
2965: PUSH
2966: LD_INT 2
2968: ARRAY
2969: PPUSH
2970: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2974: LD_VAR 0 10
2978: PPUSH
2979: CALL_OW 274
2983: PPUSH
2984: LD_INT 3
2986: PPUSH
2987: LD_EXP 12
2991: PUSH
2992: LD_INT 3
2994: ARRAY
2995: PPUSH
2996: CALL_OW 277
// end else
3000: GO 3146
// begin for i := 1 to 3 do
3002: LD_ADDR_VAR 0 7
3006: PUSH
3007: DOUBLE
3008: LD_INT 1
3010: DEC
3011: ST_TO_ADDR
3012: LD_INT 3
3014: PUSH
3015: FOR_TO
3016: IFFALSE 3144
// begin r := starting_resources [ i ] ;
3018: LD_ADDR_VAR 0 8
3022: PUSH
3023: LD_EXP 12
3027: PUSH
3028: LD_VAR 0 7
3032: ARRAY
3033: ST_TO_ADDR
// while r >= 10 do
3034: LD_VAR 0 8
3038: PUSH
3039: LD_INT 10
3041: GREATEREQUAL
3042: IFFALSE 3142
// if r > 50 then
3044: LD_VAR 0 8
3048: PUSH
3049: LD_INT 50
3051: GREATER
3052: IFFALSE 3098
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3054: LD_VAR 0 7
3058: PPUSH
3059: LD_INT 5
3061: PPUSH
3062: LD_VAR 0 4
3066: PPUSH
3067: LD_VAR 0 5
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 60
// r := r - 50 ;
3082: LD_ADDR_VAR 0 8
3086: PUSH
3087: LD_VAR 0 8
3091: PUSH
3092: LD_INT 50
3094: MINUS
3095: ST_TO_ADDR
// end else
3096: GO 3140
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3098: LD_VAR 0 7
3102: PPUSH
3103: LD_VAR 0 8
3107: PUSH
3108: LD_INT 10
3110: DIV
3111: PPUSH
3112: LD_VAR 0 4
3116: PPUSH
3117: LD_VAR 0 5
3121: PPUSH
3122: LD_INT 4
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL_OW 60
// r := 0 ;
3132: LD_ADDR_VAR 0 8
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// end ;
3140: GO 3034
// end ;
3142: GO 3015
3144: POP
3145: POP
// end ; for r in starting_crates do
3146: LD_ADDR_VAR 0 8
3150: PUSH
3151: LD_EXP 11
3155: PUSH
3156: FOR_IN
3157: IFFALSE 3189
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3159: LD_INT 1
3161: PPUSH
3162: LD_INT 5
3164: PPUSH
3165: LD_VAR 0 4
3169: PPUSH
3170: LD_VAR 0 5
3174: PPUSH
3175: LD_VAR 0 8
3179: PPUSH
3180: LD_INT 0
3182: PPUSH
3183: CALL_OW 60
3187: GO 3156
3189: POP
3190: POP
// if def_morale_flags then
3191: LD_EXP 56
3195: IFFALSE 3334
// begin x := start_def [ pos ] [ 1 ] ;
3197: LD_ADDR_VAR 0 4
3201: PUSH
3202: LD_EXP 31
3206: PUSH
3207: LD_VAR 0 3
3211: ARRAY
3212: PUSH
3213: LD_INT 1
3215: ARRAY
3216: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3217: LD_ADDR_VAR 0 5
3221: PUSH
3222: LD_EXP 31
3226: PUSH
3227: LD_VAR 0 3
3231: ARRAY
3232: PUSH
3233: LD_INT 2
3235: ARRAY
3236: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3237: LD_VAR 0 4
3241: PPUSH
3242: LD_VAR 0 5
3246: PPUSH
3247: LD_INT 12
3249: PPUSH
3250: LD_INT 2
3252: PPUSH
3253: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3257: LD_ADDR_EXP 33
3261: PUSH
3262: LD_EXP 33
3266: PUSH
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_VAR 0 4
3276: PPUSH
3277: LD_VAR 0 5
3281: PPUSH
3282: LD_INT 1
3284: PUSH
3285: LD_INT 100
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 2
3294: PUSH
3295: LD_INT 50
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: LD_INT 20
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 20
3314: PUSH
3315: LD_INT 100
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 418
3332: ADD
3333: ST_TO_ADDR
// end ; commander := true ;
3334: LD_ADDR_LOC 1
3338: PUSH
3339: LD_INT 1
3341: ST_TO_ADDR
// soldiers_created := 0 ;
3342: LD_ADDR_LOC 4
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3350: LD_ADDR_VAR 0 7
3354: PUSH
3355: DOUBLE
3356: LD_INT 1
3358: DEC
3359: ST_TO_ADDR
3360: LD_EXP 8
3364: PUSH
3365: FOR_TO
3366: IFFALSE 3519
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3368: LD_ADDR_VAR 0 4
3372: PUSH
3373: LD_EXP 30
3377: PUSH
3378: LD_VAR 0 3
3382: ARRAY
3383: PUSH
3384: LD_VAR 0 7
3388: ARRAY
3389: PUSH
3390: LD_INT 1
3392: ARRAY
3393: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3394: LD_ADDR_VAR 0 5
3398: PUSH
3399: LD_EXP 30
3403: PUSH
3404: LD_VAR 0 3
3408: ARRAY
3409: PUSH
3410: LD_VAR 0 7
3414: ARRAY
3415: PUSH
3416: LD_INT 2
3418: ARRAY
3419: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3420: LD_ADDR_VAR 0 6
3424: PUSH
3425: LD_EXP 30
3429: PUSH
3430: LD_VAR 0 3
3434: ARRAY
3435: PUSH
3436: LD_VAR 0 7
3440: ARRAY
3441: PUSH
3442: LD_INT 3
3444: ARRAY
3445: ST_TO_ADDR
// bc_type := b_breastwork ;
3446: LD_ADDR_OWVAR 42
3450: PUSH
3451: LD_INT 31
3453: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3454: LD_ADDR_VAR 0 9
3458: PUSH
3459: LD_VAR 0 4
3463: PPUSH
3464: LD_VAR 0 5
3468: PPUSH
3469: LD_VAR 0 6
3473: PPUSH
3474: CALL_OW 47
3478: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3479: LD_INT 1
3481: PPUSH
3482: LD_INT 1
3484: PPUSH
3485: LD_INT 0
3487: PPUSH
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 0
3493: PPUSH
3494: LD_VAR 0 9
3498: PPUSH
3499: CALL 2145 0 6
// soldiers_created := soldiers_created + 1 ;
3503: LD_ADDR_LOC 4
3507: PUSH
3508: LD_LOC 4
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: ST_TO_ADDR
// end ;
3517: GO 3365
3519: POP
3520: POP
// x := start_def [ pos ] [ 1 ] ;
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_EXP 31
3530: PUSH
3531: LD_VAR 0 3
3535: ARRAY
3536: PUSH
3537: LD_INT 1
3539: ARRAY
3540: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3541: LD_ADDR_VAR 0 5
3545: PUSH
3546: LD_EXP 31
3550: PUSH
3551: LD_VAR 0 3
3555: ARRAY
3556: PUSH
3557: LD_INT 2
3559: ARRAY
3560: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3561: LD_LOC 8
3565: PUSH
3566: LD_EXP 8
3570: MINUS
3571: PPUSH
3572: LD_INT 1
3574: PPUSH
3575: LD_VAR 0 4
3579: PPUSH
3580: LD_VAR 0 5
3584: PPUSH
3585: LD_INT 5
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: CALL 2145 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3595: LD_LOC 5
3599: PPUSH
3600: LD_INT 2
3602: PPUSH
3603: LD_VAR 0 4
3607: PPUSH
3608: LD_VAR 0 5
3612: PPUSH
3613: LD_INT 5
3615: PPUSH
3616: LD_INT 0
3618: PPUSH
3619: CALL 2145 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3623: LD_LOC 7
3627: PPUSH
3628: LD_INT 3
3630: PPUSH
3631: LD_VAR 0 4
3635: PPUSH
3636: LD_VAR 0 5
3640: PPUSH
3641: LD_INT 5
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL 2145 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3651: LD_LOC 6
3655: PPUSH
3656: LD_INT 4
3658: PPUSH
3659: LD_VAR 0 4
3663: PPUSH
3664: LD_VAR 0 5
3668: PPUSH
3669: LD_INT 5
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: CALL 2145 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3679: LD_EXP 57
3683: PUSH
3684: LD_INT 20
3686: PPUSH
3687: LD_VAR 0 1
3691: PPUSH
3692: CALL_OW 321
3696: PUSH
3697: LD_INT 1
3699: EQUAL
3700: AND
3701: IFFALSE 3718
// SetTech ( tech_SibDet , side , state_researched ) ;
3703: LD_INT 20
3705: PPUSH
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_INT 2
3713: PPUSH
3714: CALL_OW 322
// if def_siberite_bomb = 1 then
3718: LD_EXP 60
3722: PUSH
3723: LD_INT 1
3725: EQUAL
3726: IFFALSE 3760
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3728: LD_INT 25
3730: PPUSH
3731: LD_VAR 0 1
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3743: LD_INT 73
3745: PPUSH
3746: LD_VAR 0 1
3750: PPUSH
3751: LD_INT 1
3753: PPUSH
3754: CALL_OW 322
// end else
3758: GO 3790
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3760: LD_INT 25
3762: PPUSH
3763: LD_VAR 0 1
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3775: LD_INT 73
3777: PPUSH
3778: LD_VAR 0 1
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 322
// end ; if Game_Type = 3 then
3790: LD_EXP 46
3794: PUSH
3795: LD_INT 3
3797: EQUAL
3798: IFFALSE 3815
// SetTech ( tech_partinvis , side , state_disabled ) ;
3800: LD_INT 16
3802: PPUSH
3803: LD_VAR 0 1
3807: PPUSH
3808: LD_INT 0
3810: PPUSH
3811: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3815: LD_INT 24
3817: PPUSH
3818: LD_VAR 0 1
3822: PPUSH
3823: LD_INT 1
3825: PPUSH
3826: CALL_OW 322
// global_defined := true ;
3830: LD_ADDR_LOC 3
3834: PUSH
3835: LD_INT 1
3837: ST_TO_ADDR
// end ;
3838: LD_VAR 0 2
3842: RET
// every 0 0$1 do
3843: GO 3845
3845: DISABLE
// if ( def_siberite_bomb > 1 ) then
3846: LD_EXP 60
3850: PUSH
3851: LD_INT 1
3853: GREATER
3854: IFFALSE 3869
// begin wait ( siberite_bomb_Delay ) ;
3856: LD_EXP 18
3860: PPUSH
3861: CALL_OW 67
// EnableSibFiss ;
3865: CALL 3870 0 0
// end ;
3869: END
// function EnableSibFiss ; var i ; begin
3870: LD_INT 0
3872: PPUSH
3873: PPUSH
// for i := 1 to 8 do
3874: LD_ADDR_VAR 0 2
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_INT 8
3886: PUSH
3887: FOR_TO
3888: IFFALSE 3934
// if Side_Positions [ i ] then
3890: LD_EXP 23
3894: PUSH
3895: LD_VAR 0 2
3899: ARRAY
3900: IFFALSE 3932
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3902: LD_INT 25
3904: PPUSH
3905: LD_VAR 0 2
3909: PPUSH
3910: LD_INT 1
3912: PPUSH
3913: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3917: LD_INT 73
3919: PPUSH
3920: LD_VAR 0 2
3924: PPUSH
3925: LD_INT 1
3927: PPUSH
3928: CALL_OW 322
// end ;
3932: GO 3887
3934: POP
3935: POP
// end ;
3936: LD_VAR 0 1
3940: RET
// function prepare_sides ; var i ; begin
3941: LD_INT 0
3943: PPUSH
3944: PPUSH
// global_units := [ ] ;
3945: LD_ADDR_LOC 2
3949: PUSH
3950: EMPTY
3951: ST_TO_ADDR
// global_defined := false ;
3952: LD_ADDR_LOC 3
3956: PUSH
3957: LD_INT 0
3959: ST_TO_ADDR
// CountClassMembers ;
3960: CALL 4010 0 0
// for i := 1 to 8 do
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: DOUBLE
3970: LD_INT 1
3972: DEC
3973: ST_TO_ADDR
3974: LD_INT 8
3976: PUSH
3977: FOR_TO
3978: IFFALSE 4003
// if Side_Positions [ i ] then
3980: LD_EXP 23
3984: PUSH
3985: LD_VAR 0 2
3989: ARRAY
3990: IFFALSE 4001
// prepare_side ( i ) ;
3992: LD_VAR 0 2
3996: PPUSH
3997: CALL 2733 0 1
4001: GO 3977
4003: POP
4004: POP
// end ;
4005: LD_VAR 0 1
4009: RET
// function CountClassMembers ; var Mode ; begin
4010: LD_INT 0
4012: PPUSH
4013: PPUSH
// if No_Mechs then
4014: LD_EXP 62
4018: IFFALSE 4030
// Mode := 2 else
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: LD_INT 2
4027: ST_TO_ADDR
4028: GO 4038
// Mode := 1 ;
4030: LD_ADDR_VAR 0 2
4034: PUSH
4035: LD_INT 1
4037: ST_TO_ADDR
// neng := number_of_people ;
4038: LD_ADDR_LOC 5
4042: PUSH
4043: LD_EXP 9
4047: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4048: LD_ADDR_LOC 8
4052: PUSH
4053: LD_LOC 5
4057: PUSH
4058: LD_INT 4
4060: PUSH
4061: LD_INT 3
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_VAR 0 2
4072: ARRAY
4073: DIV
4074: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4075: LD_LOC 8
4079: PUSH
4080: LD_EXP 8
4084: LESS
4085: IFFALSE 4097
// nsol := number_of_breastworks ;
4087: LD_ADDR_LOC 8
4091: PUSH
4092: LD_EXP 8
4096: ST_TO_ADDR
// neng := neng - nsol ;
4097: LD_ADDR_LOC 5
4101: PUSH
4102: LD_LOC 5
4106: PUSH
4107: LD_LOC 8
4111: MINUS
4112: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4113: LD_ADDR_LOC 6
4117: PUSH
4118: LD_LOC 5
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 2
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_VAR 0 2
4137: ARRAY
4138: DIV
4139: ST_TO_ADDR
// if ( nsci < 1 ) then
4140: LD_LOC 6
4144: PUSH
4145: LD_INT 1
4147: LESS
4148: IFFALSE 4158
// nsci := 1 ;
4150: LD_ADDR_LOC 6
4154: PUSH
4155: LD_INT 1
4157: ST_TO_ADDR
// neng := neng - nsci ;
4158: LD_ADDR_LOC 5
4162: PUSH
4163: LD_LOC 5
4167: PUSH
4168: LD_LOC 6
4172: MINUS
4173: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4174: LD_ADDR_LOC 7
4178: PUSH
4179: LD_LOC 5
4183: PUSH
4184: LD_INT 2
4186: DIV
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: LD_VAR 0 2
4199: ARRAY
4200: ST_TO_ADDR
// neng := neng - nmech ;
4201: LD_ADDR_LOC 5
4205: PUSH
4206: LD_LOC 5
4210: PUSH
4211: LD_LOC 7
4215: MINUS
4216: ST_TO_ADDR
// if ( neng < 1 ) then
4217: LD_LOC 5
4221: PUSH
4222: LD_INT 1
4224: LESS
4225: IFFALSE 4235
// neng := 1 ;
4227: LD_ADDR_LOC 5
4231: PUSH
4232: LD_INT 1
4234: ST_TO_ADDR
// end ;
4235: LD_VAR 0 1
4239: RET
// starting begin disable ( 1 ) ;
4240: LD_INT 1
4242: DISABLE_MARKED
// disable ( 2 ) ;
4243: LD_INT 2
4245: DISABLE_MARKED
// disable ( 3 ) ;
4246: LD_INT 3
4248: DISABLE_MARKED
// disable ( 4 ) ;
4249: LD_INT 4
4251: DISABLE_MARKED
// disable ( 5 ) ;
4252: LD_INT 5
4254: DISABLE_MARKED
// disable ( 6 ) ;
4255: LD_INT 6
4257: DISABLE_MARKED
// disable ( 7 ) ;
4258: LD_INT 7
4260: DISABLE_MARKED
// disable ( 10 ) ;
4261: LD_INT 10
4263: DISABLE_MARKED
// disable ( 20 ) ;
4264: LD_INT 20
4266: DISABLE_MARKED
// disable ( 98 ) ;
4267: LD_INT 98
4269: DISABLE_MARKED
// disable ( 99 ) ;
4270: LD_INT 99
4272: DISABLE_MARKED
// disable ( 400 ) ;
4273: LD_INT 400
4275: DISABLE_MARKED
// disable ( 401 ) ;
4276: LD_INT 401
4278: DISABLE_MARKED
// disable ( 600 ) ;
4279: LD_INT 600
4281: DISABLE_MARKED
// mp_selectmsg := true ;
4282: LD_ADDR_OWVAR 13
4286: PUSH
4287: LD_INT 1
4289: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4290: CALL 68 0 0
// init_map ;
4294: CALL 1398 0 0
// init_respawn ;
4298: CALL 5982 0 0
// set_shared_visions_and_alliances ;
4302: CALL 1857 0 0
// ResetFog ;
4306: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4310: LD_OWVAR 2
4314: PPUSH
4315: CALL_OW 520
// prepare_sides ;
4319: CALL 3941 0 0
// Init_Win_Condition ;
4323: CALL 18382 0 0
// InitLimits ;
4327: CALL 15612 0 0
// ShowTimer ;
4331: CALL 16549 0 0
// case Game_Type of 2 :
4335: LD_EXP 46
4339: PUSH
4340: LD_INT 2
4342: DOUBLE
4343: EQUAL
4344: IFTRUE 4348
4346: GO 4355
4348: POP
// init_alien_research ; 3 :
4349: CALL 7212 0 0
4353: GO 4375
4355: LD_INT 3
4357: DOUBLE
4358: EQUAL
4359: IFTRUE 4363
4361: GO 4374
4363: POP
// begin InitPoints ( ) ;
4364: CALL 16787 0 0
// init_kings_counting ;
4368: CALL 19677 0 0
// end ; end ;
4372: GO 4375
4374: POP
// music_nat := Side_Nations [ your_side ] ;
4375: LD_ADDR_OWVAR 71
4379: PUSH
4380: LD_EXP 24
4384: PUSH
4385: LD_OWVAR 2
4389: ARRAY
4390: ST_TO_ADDR
// if IAmSpec then
4391: CALL_OW 531
4395: IFFALSE 4419
// begin fogOff ( true ) ;
4397: LD_INT 1
4399: PPUSH
4400: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4404: LD_INT 119
4406: PPUSH
4407: LD_INT 79
4409: PPUSH
4410: CALL_OW 86
// enable ( 400 ) ;
4414: LD_INT 400
4416: ENABLE_MARKED
// end else
4417: GO 4465
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4419: LD_EXP 31
4423: PUSH
4424: LD_EXP 23
4428: PUSH
4429: LD_OWVAR 2
4433: ARRAY
4434: ARRAY
4435: PUSH
4436: LD_INT 1
4438: ARRAY
4439: PPUSH
4440: LD_EXP 31
4444: PUSH
4445: LD_EXP 23
4449: PUSH
4450: LD_OWVAR 2
4454: ARRAY
4455: ARRAY
4456: PUSH
4457: LD_INT 2
4459: ARRAY
4460: PPUSH
4461: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4465: LD_INT 1
4467: PPUSH
4468: CALL_OW 573
// InitApeman ;
4472: CALL 5157 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4476: LD_ADDR_EXP 66
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 23
4486: PUSH
4487: LD_INT 20
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: ST_TO_ADDR
// BeginBuildUp ;
4499: CALL 17545 0 0
// end ; end_of_file
4503: END
// every 1 1$0 + 0 0$0.3 do
4504: GO 4506
4506: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
4507: LD_INT 4
4509: PPUSH
4510: LD_INT 5
4512: PPUSH
4513: CALL_OW 12
4517: PPUSH
4518: LD_INT 25
4520: PPUSH
4521: LD_INT 1
4523: PPUSH
4524: CALL_OW 55
// enable ;
4528: ENABLE
// end ;
4529: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4530: GO 4532
4532: DISABLE
4533: LD_INT 0
4535: PPUSH
4536: PPUSH
// begin case tick of 1 .. 1 1$0 :
4537: LD_OWVAR 1
4541: PUSH
4542: LD_INT 1
4544: DOUBLE
4545: GREATEREQUAL
4546: IFFALSE 4554
4548: LD_INT 2100
4550: DOUBLE
4551: LESSEQUAL
4552: IFTRUE 4556
4554: GO 4584
4556: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4557: LD_EXP 13
4561: PUSH
4562: LD_INT 100
4564: DIVREAL
4565: PUSH
4566: LD_INT 350
4568: PPUSH
4569: LD_INT 1050
4571: PPUSH
4572: CALL_OW 12
4576: MUL
4577: PPUSH
4578: CALL_OW 67
4582: GO 4886
4584: LD_INT 2100
4586: PUSH
4587: LD_INT 1
4589: PLUS
4590: DOUBLE
4591: GREATEREQUAL
4592: IFFALSE 4600
4594: LD_INT 10500
4596: DOUBLE
4597: LESSEQUAL
4598: IFTRUE 4602
4600: GO 4630
4602: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4603: LD_EXP 13
4607: PUSH
4608: LD_INT 100
4610: DIVREAL
4611: PUSH
4612: LD_INT 1050
4614: PPUSH
4615: LD_INT 1575
4617: PPUSH
4618: CALL_OW 12
4622: MUL
4623: PPUSH
4624: CALL_OW 67
4628: GO 4886
4630: LD_INT 10500
4632: PUSH
4633: LD_INT 1
4635: PLUS
4636: DOUBLE
4637: GREATEREQUAL
4638: IFFALSE 4646
4640: LD_INT 21000
4642: DOUBLE
4643: LESSEQUAL
4644: IFTRUE 4648
4646: GO 4676
4648: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4649: LD_EXP 13
4653: PUSH
4654: LD_INT 100
4656: DIVREAL
4657: PUSH
4658: LD_INT 1575
4660: PPUSH
4661: LD_INT 2100
4663: PPUSH
4664: CALL_OW 12
4668: MUL
4669: PPUSH
4670: CALL_OW 67
4674: GO 4886
4676: LD_INT 21000
4678: PUSH
4679: LD_INT 1
4681: PLUS
4682: DOUBLE
4683: GREATEREQUAL
4684: IFFALSE 4692
4686: LD_INT 42000
4688: DOUBLE
4689: LESSEQUAL
4690: IFTRUE 4694
4692: GO 4722
4694: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4695: LD_EXP 13
4699: PUSH
4700: LD_INT 100
4702: DIVREAL
4703: PUSH
4704: LD_INT 2100
4706: PPUSH
4707: LD_INT 2625
4709: PPUSH
4710: CALL_OW 12
4714: MUL
4715: PPUSH
4716: CALL_OW 67
4720: GO 4886
4722: LD_INT 42000
4724: PUSH
4725: LD_INT 1
4727: PLUS
4728: DOUBLE
4729: GREATEREQUAL
4730: IFFALSE 4738
4732: LD_INT 63000
4734: DOUBLE
4735: LESSEQUAL
4736: IFTRUE 4740
4738: GO 4768
4740: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4741: LD_EXP 13
4745: PUSH
4746: LD_INT 100
4748: DIVREAL
4749: PUSH
4750: LD_INT 2625
4752: PPUSH
4753: LD_INT 3150
4755: PPUSH
4756: CALL_OW 12
4760: MUL
4761: PPUSH
4762: CALL_OW 67
4766: GO 4886
4768: LD_INT 63000
4770: PUSH
4771: LD_INT 1
4773: PLUS
4774: DOUBLE
4775: GREATEREQUAL
4776: IFFALSE 4784
4778: LD_INT 105000
4780: DOUBLE
4781: LESSEQUAL
4782: IFTRUE 4786
4784: GO 4814
4786: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4787: LD_EXP 13
4791: PUSH
4792: LD_INT 100
4794: DIVREAL
4795: PUSH
4796: LD_INT 3150
4798: PPUSH
4799: LD_INT 3675
4801: PPUSH
4802: CALL_OW 12
4806: MUL
4807: PPUSH
4808: CALL_OW 67
4812: GO 4886
4814: LD_INT 105000
4816: PUSH
4817: LD_INT 1
4819: PLUS
4820: DOUBLE
4821: GREATEREQUAL
4822: IFFALSE 4830
4824: LD_INT 630000
4826: DOUBLE
4827: LESSEQUAL
4828: IFTRUE 4832
4830: GO 4860
4832: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
4833: LD_EXP 13
4837: PUSH
4838: LD_INT 100
4840: DIVREAL
4841: PUSH
4842: LD_INT 3675
4844: PPUSH
4845: LD_INT 4200
4847: PPUSH
4848: CALL_OW 12
4852: MUL
4853: PPUSH
4854: CALL_OW 67
4858: GO 4886
4860: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
4861: LD_EXP 13
4865: PUSH
4866: LD_INT 100
4868: DIVREAL
4869: PUSH
4870: LD_INT 4200
4872: PPUSH
4873: LD_INT 5250
4875: PPUSH
4876: CALL_OW 12
4880: MUL
4881: PPUSH
4882: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
4886: LD_ADDR_VAR 0 2
4890: PUSH
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 5
4896: PPUSH
4897: CALL_OW 12
4901: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
4902: LD_ADDR_VAR 0 1
4906: PUSH
4907: LD_EXP 23
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: EMPTY
4916: LIST
4917: DIFF
4918: PUSH
4919: FOR_IN
4920: IFFALSE 4960
// CreateCratesArea ( amount , [ north_west , north_east , south_west , south_east ] [ i ] , true ) ;
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 5
4932: PUSH
4933: LD_INT 7
4935: PUSH
4936: LD_INT 6
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: PUSH
4945: LD_VAR 0 1
4949: ARRAY
4950: PPUSH
4951: LD_INT 1
4953: PPUSH
4954: CALL_OW 55
4958: GO 4919
4960: POP
4961: POP
// enable ;
4962: ENABLE
// end ; end_of_file
4963: PPOPN 2
4965: END
// every 20 20$00 trigger apemanNumber do
4966: LD_EXP 35
4970: IFFALSE 5003
4972: GO 4974
4974: DISABLE
// begin enable ;
4975: ENABLE
// if apeLevel >= 8 then
4976: LD_EXP 40
4980: PUSH
4981: LD_INT 8
4983: GREATEREQUAL
4984: IFFALSE 4989
// disable else
4986: DISABLE
4987: GO 5003
// apeLevel := apeLevel + 1 ;
4989: LD_ADDR_EXP 40
4993: PUSH
4994: LD_EXP 40
4998: PUSH
4999: LD_INT 1
5001: PLUS
5002: ST_TO_ADDR
// end ;
5003: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5004: LD_EXP 35
5008: PUSH
5009: LD_EXP 36
5013: LESS
5014: IFFALSE 5154
5016: GO 5018
5018: DISABLE
5019: LD_INT 0
5021: PPUSH
5022: PPUSH
5023: PPUSH
5024: PPUSH
// begin enable ;
5025: ENABLE
// for i := 1 to apemanPos do
5026: LD_ADDR_VAR 0 1
5030: PUSH
5031: DOUBLE
5032: LD_INT 1
5034: DEC
5035: ST_TO_ADDR
5036: LD_EXP 38
5040: PUSH
5041: FOR_TO
5042: IFFALSE 5152
// begin if apemanPlayerCount [ i ] then
5044: LD_EXP 39
5048: PUSH
5049: LD_VAR 0 1
5053: ARRAY
5054: IFFALSE 5150
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5056: LD_EXP 39
5060: PUSH
5061: LD_VAR 0 1
5065: ARRAY
5066: PUSH
5067: LD_EXP 38
5071: PUSH
5072: LD_VAR 0 1
5076: ARRAY
5077: GREATER
5078: IFFALSE 5150
// begin ape := PrepareApeman ;
5080: LD_ADDR_VAR 0 2
5084: PUSH
5085: CALL 5657 0 0
5089: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5090: LD_VAR 0 2
5094: PPUSH
5095: LD_EXP 41
5099: PUSH
5100: LD_VAR 0 1
5104: ARRAY
5105: PPUSH
5106: LD_INT 0
5108: PPUSH
5109: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5113: LD_ADDR_EXP 38
5117: PUSH
5118: LD_EXP 38
5122: PPUSH
5123: LD_VAR 0 1
5127: PPUSH
5128: LD_EXP 38
5132: PUSH
5133: LD_VAR 0 1
5137: ARRAY
5138: PUSH
5139: LD_VAR 0 2
5143: UNION
5144: PPUSH
5145: CALL_OW 1
5149: ST_TO_ADDR
// end ; end ; end ;
5150: GO 5041
5152: POP
5153: POP
// end ;
5154: PPOPN 4
5156: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5157: LD_INT 0
5159: PPUSH
5160: PPUSH
5161: PPUSH
5162: PPUSH
5163: PPUSH
5164: PPUSH
5165: PPUSH
// playersAmount := 0 ;
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: LD_INT 0
5173: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5174: LD_ADDR_VAR 0 7
5178: PUSH
5179: LD_INT 8
5181: PUSH
5182: LD_INT 9
5184: PUSH
5185: LD_INT 11
5187: PUSH
5188: LD_INT 10
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5197: LD_ADDR_EXP 41
5201: PUSH
5202: LD_INT 0
5204: PUSH
5205: LD_INT 0
5207: PUSH
5208: LD_INT 0
5210: PUSH
5211: LD_INT 0
5213: PUSH
5214: LD_INT 0
5216: PUSH
5217: LD_INT 0
5219: PUSH
5220: LD_INT 0
5222: PUSH
5223: LD_INT 0
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: ST_TO_ADDR
// for j = 1 to Side_Positions do
5236: LD_ADDR_VAR 0 4
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_EXP 23
5250: PUSH
5251: FOR_TO
5252: IFFALSE 5319
// if Side_Positions [ j ] then
5254: LD_EXP 23
5258: PUSH
5259: LD_VAR 0 4
5263: ARRAY
5264: IFFALSE 5317
// begin playersAmount := playersAmount + 1 ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PUSH
5276: LD_INT 1
5278: PLUS
5279: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5280: LD_ADDR_EXP 41
5284: PUSH
5285: LD_EXP 41
5289: PPUSH
5290: LD_VAR 0 4
5294: PPUSH
5295: LD_VAR 0 7
5299: PUSH
5300: LD_EXP 23
5304: PUSH
5305: LD_VAR 0 4
5309: ARRAY
5310: ARRAY
5311: PPUSH
5312: CALL_OW 1
5316: ST_TO_ADDR
// end ;
5317: GO 5251
5319: POP
5320: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5321: LD_ADDR_EXP 37
5325: PUSH
5326: LD_INT 3
5328: PUSH
5329: LD_EXP 15
5333: MUL
5334: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5335: LD_ADDR_EXP 35
5339: PUSH
5340: LD_VAR 0 3
5344: PUSH
5345: LD_EXP 37
5349: MUL
5350: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5351: LD_ADDR_EXP 36
5355: PUSH
5356: LD_EXP 35
5360: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5361: LD_ADDR_EXP 38
5365: PUSH
5366: LD_INT 0
5368: PUSH
5369: LD_INT 0
5371: PUSH
5372: LD_INT 0
5374: PUSH
5375: LD_INT 0
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: LD_INT 0
5383: PUSH
5384: LD_INT 0
5386: PUSH
5387: LD_INT 0
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5400: LD_ADDR_EXP 39
5404: PUSH
5405: LD_INT 0
5407: PUSH
5408: LD_INT 0
5410: PUSH
5411: LD_INT 0
5413: PUSH
5414: LD_INT 0
5416: PUSH
5417: LD_INT 0
5419: PUSH
5420: LD_INT 0
5422: PUSH
5423: LD_INT 0
5425: PUSH
5426: LD_INT 0
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: ST_TO_ADDR
// apeLevel := 1 ;
5439: LD_ADDR_EXP 40
5443: PUSH
5444: LD_INT 1
5446: ST_TO_ADDR
// if not apemanNumber then
5447: LD_EXP 35
5451: NOT
5452: IFFALSE 5456
// exit ;
5454: GO 5652
// for i := 1 to apemanPerPlayer do
5456: LD_ADDR_VAR 0 2
5460: PUSH
5461: DOUBLE
5462: LD_INT 1
5464: DEC
5465: ST_TO_ADDR
5466: LD_EXP 37
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5650
// begin for j := 1 to Side_Positions do
5474: LD_ADDR_VAR 0 4
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_EXP 23
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5646
// if Side_Positions [ j ] then
5492: LD_EXP 23
5496: PUSH
5497: LD_VAR 0 4
5501: ARRAY
5502: IFFALSE 5644
// begin pos := Side_Positions [ j ] ;
5504: LD_ADDR_VAR 0 6
5508: PUSH
5509: LD_EXP 23
5513: PUSH
5514: LD_VAR 0 4
5518: ARRAY
5519: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5520: LD_ADDR_EXP 39
5524: PUSH
5525: LD_EXP 39
5529: PPUSH
5530: LD_VAR 0 4
5534: PPUSH
5535: LD_EXP 39
5539: PUSH
5540: LD_VAR 0 4
5544: ARRAY
5545: PUSH
5546: LD_INT 1
5548: PLUS
5549: PPUSH
5550: CALL_OW 1
5554: ST_TO_ADDR
// ape := PrepareApeman ;
5555: LD_ADDR_VAR 0 5
5559: PUSH
5560: CALL 5657 0 0
5564: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5565: LD_ADDR_EXP 38
5569: PUSH
5570: LD_EXP 38
5574: PPUSH
5575: LD_VAR 0 4
5579: PPUSH
5580: LD_EXP 38
5584: PUSH
5585: LD_VAR 0 4
5589: ARRAY
5590: PPUSH
5591: LD_EXP 38
5595: PUSH
5596: LD_VAR 0 4
5600: ARRAY
5601: PUSH
5602: LD_INT 1
5604: PLUS
5605: PPUSH
5606: LD_VAR 0 5
5610: PPUSH
5611: CALL_OW 1
5615: PPUSH
5616: CALL_OW 1
5620: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5621: LD_VAR 0 5
5625: PPUSH
5626: LD_EXP 41
5630: PUSH
5631: LD_VAR 0 4
5635: ARRAY
5636: PPUSH
5637: LD_INT 0
5639: PPUSH
5640: CALL_OW 49
// end ;
5644: GO 5489
5646: POP
5647: POP
// end ;
5648: GO 5471
5650: POP
5651: POP
// end ;
5652: LD_VAR 0 1
5656: RET
// export function PrepareApeman ; var bonus ; begin
5657: LD_INT 0
5659: PPUSH
5660: PPUSH
// uc_side := 0 ;
5661: LD_ADDR_OWVAR 20
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// uc_nation := 0 ;
5669: LD_ADDR_OWVAR 21
5673: PUSH
5674: LD_INT 0
5676: ST_TO_ADDR
// InitHc ;
5677: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5681: LD_ADDR_VAR 0 2
5685: PUSH
5686: LD_INT 1
5688: NEG
5689: PUSH
5690: LD_INT 0
5692: PUSH
5693: LD_INT 1
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: LIST
5700: PUSH
5701: LD_OWVAR 1
5705: PUSH
5706: LD_INT 3
5708: MOD
5709: PUSH
5710: LD_INT 1
5712: PLUS
5713: ARRAY
5714: ST_TO_ADDR
// hc_class := class_apeman ;
5715: LD_ADDR_OWVAR 28
5719: PUSH
5720: LD_INT 12
5722: ST_TO_ADDR
// hc_gallery :=  ;
5723: LD_ADDR_OWVAR 33
5727: PUSH
5728: LD_STRING 
5730: ST_TO_ADDR
// hc_name :=  ;
5731: LD_ADDR_OWVAR 26
5735: PUSH
5736: LD_STRING 
5738: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5739: LD_ADDR_OWVAR 31
5743: PUSH
5744: LD_EXP 40
5748: PUSH
5749: LD_VAR 0 2
5753: PLUS
5754: PUSH
5755: LD_EXP 40
5759: PUSH
5760: LD_VAR 0 2
5764: PLUS
5765: PUSH
5766: LD_EXP 40
5770: PUSH
5771: LD_VAR 0 2
5775: PLUS
5776: PUSH
5777: LD_EXP 40
5781: PUSH
5782: LD_VAR 0 2
5786: PLUS
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5794: LD_ADDR_OWVAR 35
5798: PUSH
5799: LD_INT 10
5801: PUSH
5802: LD_VAR 0 2
5806: MUL
5807: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5808: LD_ADDR_OWVAR 29
5812: PUSH
5813: LD_INT 12
5815: PUSH
5816: LD_INT 10
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: ST_TO_ADDR
// result := CreateHuman ;
5823: LD_ADDR_VAR 0 1
5827: PUSH
5828: CALL_OW 44
5832: ST_TO_ADDR
// end ;
5833: LD_VAR 0 1
5837: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5838: LD_INT 0
5840: PPUSH
5841: PPUSH
5842: PPUSH
// if not ape then
5843: LD_VAR 0 1
5847: NOT
5848: IFFALSE 5852
// exit ;
5850: GO 5977
// side := GetSide ( ape ) ;
5852: LD_ADDR_VAR 0 3
5856: PUSH
5857: LD_VAR 0 1
5861: PPUSH
5862: CALL_OW 255
5866: ST_TO_ADDR
// if not side then
5867: LD_VAR 0 3
5871: NOT
5872: IFFALSE 5926
// begin for i = 1 to apemanPos do
5874: LD_ADDR_VAR 0 4
5878: PUSH
5879: DOUBLE
5880: LD_INT 1
5882: DEC
5883: ST_TO_ADDR
5884: LD_EXP 38
5888: PUSH
5889: FOR_TO
5890: IFFALSE 5924
// if ape in apemanPos [ i ] then
5892: LD_VAR 0 1
5896: PUSH
5897: LD_EXP 38
5901: PUSH
5902: LD_VAR 0 4
5906: ARRAY
5907: IN
5908: IFFALSE 5922
// begin side := i ;
5910: LD_ADDR_VAR 0 3
5914: PUSH
5915: LD_VAR 0 4
5919: ST_TO_ADDR
// break ;
5920: GO 5924
// end ;
5922: GO 5889
5924: POP
5925: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5926: LD_ADDR_EXP 38
5930: PUSH
5931: LD_EXP 38
5935: PPUSH
5936: LD_VAR 0 3
5940: PPUSH
5941: LD_EXP 38
5945: PUSH
5946: LD_VAR 0 3
5950: ARRAY
5951: PUSH
5952: LD_VAR 0 1
5956: DIFF
5957: PPUSH
5958: CALL_OW 1
5962: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5963: LD_ADDR_EXP 35
5967: PUSH
5968: LD_EXP 35
5972: PUSH
5973: LD_INT 1
5975: MINUS
5976: ST_TO_ADDR
// end ; end_of_file
5977: LD_VAR 0 2
5981: RET
// var respawn_queue ; export function init_respawn ; begin
5982: LD_INT 0
5984: PPUSH
// if not def_people_respawning then
5985: LD_EXP 58
5989: NOT
5990: IFFALSE 5994
// exit ;
5992: GO 6036
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5994: LD_ADDR_LOC 9
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: LD_INT 0
6013: PUSH
6014: LD_INT 0
6016: PUSH
6017: LD_INT 0
6019: PUSH
6020: LD_INT 0
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: ST_TO_ADDR
// enable ( 10 ) ;
6033: LD_INT 10
6035: ENABLE_MARKED
// end ;
6036: LD_VAR 0 1
6040: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6041: GO 6043
6043: DISABLE
6044: LD_INT 0
6046: PPUSH
6047: PPUSH
6048: PPUSH
6049: PPUSH
// begin for side = 1 to Side_Positions do
6050: LD_ADDR_VAR 0 4
6054: PUSH
6055: DOUBLE
6056: LD_INT 1
6058: DEC
6059: ST_TO_ADDR
6060: LD_EXP 23
6064: PUSH
6065: FOR_TO
6066: IFFALSE 6232
// if Side_Positions [ side ] then
6068: LD_EXP 23
6072: PUSH
6073: LD_VAR 0 4
6077: ARRAY
6078: IFFALSE 6230
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6080: LD_ADDR_VAR 0 2
6084: PUSH
6085: LD_INT 22
6087: PUSH
6088: LD_VAR 0 4
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: LD_INT 21
6099: PUSH
6100: LD_INT 1
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 23
6112: PUSH
6113: LD_INT 0
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: PPUSH
6126: CALL_OW 69
6130: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6131: LD_VAR 0 2
6135: PUSH
6136: LD_EXP 9
6140: LESS
6141: PUSH
6142: LD_LOC 9
6146: PUSH
6147: LD_VAR 0 4
6151: ARRAY
6152: NOT
6153: AND
6154: IFFALSE 6170
// set_queue ( side , TICK ) ;
6156: LD_VAR 0 4
6160: PPUSH
6161: LD_OWVAR 1
6165: PPUSH
6166: CALL 6469 0 2
// time := TICK - respawn_queue [ side ] ;
6170: LD_ADDR_VAR 0 3
6174: PUSH
6175: LD_OWVAR 1
6179: PUSH
6180: LD_LOC 9
6184: PUSH
6185: LD_VAR 0 4
6189: ARRAY
6190: MINUS
6191: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6192: LD_LOC 9
6196: PUSH
6197: LD_VAR 0 4
6201: ARRAY
6202: PUSH
6203: LD_VAR 0 3
6207: PUSH
6208: LD_EXP 16
6212: GREATER
6213: AND
6214: IFFALSE 6230
// respawn_character ( side , time ) ;
6216: LD_VAR 0 4
6220: PPUSH
6221: LD_VAR 0 3
6225: PPUSH
6226: CALL 6238 0 2
// end ;
6230: GO 6065
6232: POP
6233: POP
// enable ;
6234: ENABLE
// end ;
6235: PPOPN 4
6237: END
// function respawn_character ( side , time ) ; var dep ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6242: LD_INT 0
6244: PPUSH
6245: LD_INT 1
6247: PPUSH
6248: CALL_OW 12
6252: PUSH
6253: LD_VAR 0 2
6257: PUSH
6258: LD_EXP 17
6262: LESS
6263: AND
6264: IFFALSE 6268
// exit ;
6266: GO 6464
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6268: LD_ADDR_VAR 0 4
6272: PUSH
6273: LD_INT 22
6275: PUSH
6276: LD_VAR 0 1
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: LD_INT 2
6287: PUSH
6288: LD_INT 30
6290: PUSH
6291: LD_INT 0
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 30
6300: PUSH
6301: LD_INT 1
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 50
6315: PUSH
6316: EMPTY
6317: LIST
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: PPUSH
6324: CALL_OW 69
6328: ST_TO_ADDR
// if not dep then
6329: LD_VAR 0 4
6333: NOT
6334: IFFALSE 6340
// exit else
6336: GO 6464
6338: GO 6364
// dep := dep [ Rand ( 1 , dep ) ] ;
6340: LD_ADDR_VAR 0 4
6344: PUSH
6345: LD_VAR 0 4
6349: PUSH
6350: LD_INT 1
6352: PPUSH
6353: LD_VAR 0 4
6357: PPUSH
6358: CALL_OW 12
6362: ARRAY
6363: ST_TO_ADDR
// uc_side := side ;
6364: LD_ADDR_OWVAR 20
6368: PUSH
6369: LD_VAR 0 1
6373: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6374: LD_ADDR_OWVAR 21
6378: PUSH
6379: LD_EXP 24
6383: PUSH
6384: LD_VAR 0 1
6388: ARRAY
6389: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6390: LD_INT 0
6392: PPUSH
6393: LD_INT 0
6395: PPUSH
6396: LD_EXP 10
6400: PUSH
6401: LD_INT 2
6403: DIV
6404: PPUSH
6405: CALL_OW 380
// hc_importance := 0 ;
6409: LD_ADDR_OWVAR 32
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6417: CALL_OW 44
6421: PPUSH
6422: LD_VAR 0 4
6426: PPUSH
6427: CALL_OW 250
6431: PPUSH
6432: LD_VAR 0 4
6436: PPUSH
6437: CALL_OW 251
6441: PPUSH
6442: LD_INT 10
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL_OW 50
// set_queue ( side , 0 ) ;
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_INT 0
6459: PPUSH
6460: CALL 6469 0 2
// end ;
6464: LD_VAR 0 3
6468: RET
// function set_queue ( side , time ) ; begin
6469: LD_INT 0
6471: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6472: LD_ADDR_LOC 9
6476: PUSH
6477: LD_LOC 9
6481: PPUSH
6482: LD_VAR 0 1
6486: PPUSH
6487: CALL_OW 3
6491: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6492: LD_ADDR_LOC 9
6496: PUSH
6497: LD_LOC 9
6501: PPUSH
6502: LD_VAR 0 1
6506: PPUSH
6507: LD_VAR 0 2
6511: PPUSH
6512: CALL_OW 2
6516: ST_TO_ADDR
// end ; end_of_file
6517: LD_VAR 0 3
6521: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6522: LD_VAR 0 1
6526: PPUSH
6527: CALL_OW 266
6531: PUSH
6532: LD_INT 0
6534: PUSH
6535: LD_INT 1
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: IN
6542: IFFALSE 6567
// SetBName ( b , @ & GetSide ( b ) ) ;
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_STRING @
6551: PUSH
6552: LD_VAR 0 1
6556: PPUSH
6557: CALL_OW 255
6561: STR
6562: PPUSH
6563: CALL_OW 500
// if def_game_rules then
6567: LD_EXP 47
6571: IFFALSE 6608
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6573: LD_VAR 0 1
6577: PPUSH
6578: LD_VAR 0 1
6582: PPUSH
6583: CALL_OW 266
6587: PPUSH
6588: LD_VAR 0 1
6592: PPUSH
6593: CALL_OW 255
6597: PPUSH
6598: LD_INT 0
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: CALL 16013 0 5
// end ;
6608: PPOPN 2
6610: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6611: LD_VAR 0 1
6615: PPUSH
6616: CALL_OW 266
6620: PUSH
6621: LD_INT 0
6623: PUSH
6624: LD_INT 1
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: IN
6631: IFFALSE 6656
// SetBName ( b , @ & GetSide ( b ) ) ;
6633: LD_VAR 0 1
6637: PPUSH
6638: LD_STRING @
6640: PUSH
6641: LD_VAR 0 1
6645: PPUSH
6646: CALL_OW 255
6650: STR
6651: PPUSH
6652: CALL_OW 500
// if def_game_rules then
6656: LD_EXP 47
6660: IFFALSE 6699
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6662: LD_VAR 0 1
6666: PPUSH
6667: LD_VAR 0 1
6671: PPUSH
6672: CALL_OW 266
6676: PPUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 255
6686: PPUSH
6687: LD_VAR 0 2
6691: PPUSH
6692: LD_INT 1
6694: PPUSH
6695: CALL 16013 0 5
// end ;
6699: PPOPN 3
6701: END
// on VehicleConstructed ( veh , fac ) do var side ;
6702: LD_INT 0
6704: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6705: LD_VAR 0 1
6709: PPUSH
6710: CALL_OW 263
6714: PUSH
6715: LD_INT 5
6717: EQUAL
6718: IFFALSE 6860
// begin side := GetSide ( veh ) ;
6720: LD_ADDR_VAR 0 3
6724: PUSH
6725: LD_VAR 0 1
6729: PPUSH
6730: CALL_OW 255
6734: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6735: LD_ADDR_EXP 38
6739: PUSH
6740: LD_EXP 38
6744: PPUSH
6745: LD_VAR 0 3
6749: PPUSH
6750: LD_EXP 38
6754: PUSH
6755: LD_VAR 0 3
6759: ARRAY
6760: PPUSH
6761: LD_INT 52
6763: PUSH
6764: EMPTY
6765: LIST
6766: PPUSH
6767: CALL_OW 72
6771: PUSH
6772: LD_INT 22
6774: PUSH
6775: LD_VAR 0 3
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 2
6786: PUSH
6787: LD_INT 33
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 25
6799: PUSH
6800: LD_INT 12
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 25
6809: PUSH
6810: LD_INT 15
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 25
6819: PUSH
6820: LD_INT 16
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 25
6829: PUSH
6830: LD_INT 17
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PPUSH
6849: CALL_OW 69
6853: UNION
6854: PPUSH
6855: CALL_OW 1
6859: ST_TO_ADDR
// end ; end ;
6860: PPOPN 3
6862: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6863: LD_INT 0
6865: PPUSH
6866: PPUSH
6867: PPUSH
6868: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6869: LD_VAR 0 1
6873: PPUSH
6874: CALL_OW 257
6878: PUSH
6879: LD_INT 12
6881: PUSH
6882: LD_INT 15
6884: PUSH
6885: LD_INT 17
6887: PUSH
6888: LD_INT 16
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: IN
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: CALL_OW 263
6907: PUSH
6908: LD_INT 5
6910: EQUAL
6911: OR
6912: IFFALSE 6923
// ApeKilled ( j ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: CALL 5838 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6923: LD_VAR 0 1
6927: PPUSH
6928: CALL_OW 266
6932: PUSH
6933: LD_INT 0
6935: PUSH
6936: LD_INT 1
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: IN
6943: IFFALSE 7025
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_EXP 23
6954: PUSH
6955: LD_VAR 0 1
6959: PPUSH
6960: CALL_OW 255
6964: ARRAY
6965: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6966: LD_ADDR_VAR 0 2
6970: PUSH
6971: LD_EXP 31
6975: PUSH
6976: LD_VAR 0 4
6980: ARRAY
6981: PUSH
6982: LD_INT 1
6984: ARRAY
6985: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6986: LD_ADDR_VAR 0 3
6990: PUSH
6991: LD_EXP 31
6995: PUSH
6996: LD_VAR 0 4
7000: ARRAY
7001: PUSH
7002: LD_INT 2
7004: ARRAY
7005: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_VAR 0 3
7015: PPUSH
7016: CALL_OW 420
7020: PPUSH
7021: CALL_OW 419
// end ; if def_game_rules then
7025: LD_EXP 47
7029: IFFALSE 7128
// if ( GetType ( j ) = 3 ) then
7031: LD_VAR 0 1
7035: PPUSH
7036: CALL_OW 247
7040: PUSH
7041: LD_INT 3
7043: EQUAL
7044: IFFALSE 7084
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7046: LD_VAR 0 1
7050: PPUSH
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 266
7060: PPUSH
7061: LD_VAR 0 1
7065: PPUSH
7066: CALL_OW 255
7070: PPUSH
7071: LD_INT 0
7073: PPUSH
7074: LD_INT 1
7076: NEG
7077: PPUSH
7078: CALL 16013 0 5
7082: GO 7128
// if ( GetChassis ( j ) = 25 ) then
7084: LD_VAR 0 1
7088: PPUSH
7089: CALL_OW 265
7093: PUSH
7094: LD_INT 25
7096: EQUAL
7097: IFFALSE 7128
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_INT 37
7106: PPUSH
7107: LD_VAR 0 1
7111: PPUSH
7112: CALL_OW 255
7116: PPUSH
7117: LD_INT 0
7119: PPUSH
7120: LD_INT 1
7122: NEG
7123: PPUSH
7124: CALL 16013 0 5
// end ;
7128: PPOPN 5
7130: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7131: LD_EXP 47
7135: PUSH
7136: LD_VAR 0 1
7140: PPUSH
7141: CALL_OW 265
7145: PUSH
7146: LD_INT 25
7148: EQUAL
7149: AND
7150: IFFALSE 7182
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7152: LD_VAR 0 1
7156: PPUSH
7157: LD_INT 37
7159: PPUSH
7160: LD_VAR 0 1
7164: PPUSH
7165: CALL_OW 255
7169: PPUSH
7170: LD_VAR 0 3
7174: PPUSH
7175: LD_INT 1
7177: PPUSH
7178: CALL 16013 0 5
// end ;
7182: PPOPN 4
7184: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7185: LD_VAR 0 1
7189: PPUSH
7190: LD_VAR 0 2
7194: PPUSH
7195: LD_VAR 0 3
7199: PPUSH
7200: LD_OWVAR 2
7204: PPUSH
7205: CALL 18143 0 4
7209: PPOPN 3
7211: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
7212: LD_INT 0
7214: PPUSH
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
7219: PPUSH
// artefact_number := 3 ;
7220: LD_ADDR_EXP 42
7224: PUSH
7225: LD_INT 3
7227: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
7228: LD_ADDR_EXP 43
7232: PUSH
7233: LD_INT 1
7235: PUSH
7236: LD_INT 0
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: LD_INT 0
7244: PUSH
7245: LD_INT 3
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
7255: LD_ADDR_EXP 44
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: LD_INT 5
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
7274: LD_ADDR_VAR 0 2
7278: PUSH
7279: LD_INT 1
7281: PUSH
7282: LD_INT 4
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: LD_INT 2
7291: PUSH
7292: LD_INT 5
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: LD_INT 3
7301: PUSH
7302: LD_INT 9
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: LIST
7313: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
7314: LD_ADDR_VAR 0 3
7318: PUSH
7319: LD_INT 3
7321: PUSH
7322: LD_INT 4
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
7333: LD_ADDR_VAR 0 4
7337: PUSH
7338: LD_INT 150
7340: PUSH
7341: LD_INT 250
7343: PUSH
7344: LD_INT 400
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
7352: LD_ADDR_VAR 0 5
7356: PUSH
7357: LD_INT 2
7359: PUSH
7360: LD_INT 10
7362: PUSH
7363: LD_INT 20
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
7371: LD_ADDR_VAR 0 6
7375: PUSH
7376: LD_INT 6
7378: PUSH
7379: LD_INT 18
7381: PUSH
7382: LD_INT 50
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
7390: LD_VAR 0 2
7394: PPUSH
7395: LD_VAR 0 3
7399: PPUSH
7400: LD_VAR 0 4
7404: PPUSH
7405: LD_VAR 0 5
7409: PPUSH
7410: LD_VAR 0 6
7414: PPUSH
7415: CALL 7424 0 5
// end ;
7419: LD_VAR 0 1
7423: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
7424: LD_INT 0
7426: PPUSH
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
// disable ( 1 ) ;
7431: LD_INT 1
7433: DISABLE_MARKED
// disable ( 5 ) ;
7434: LD_INT 5
7436: DISABLE_MARKED
// disable ( 6 ) ;
7437: LD_INT 6
7439: DISABLE_MARKED
// disable ( 7 ) ;
7440: LD_INT 7
7442: DISABLE_MARKED
// for side = 1 to 8 do
7443: LD_ADDR_VAR 0 9
7447: PUSH
7448: DOUBLE
7449: LD_INT 1
7451: DEC
7452: ST_TO_ADDR
7453: LD_INT 8
7455: PUSH
7456: FOR_TO
7457: IFFALSE 7473
// SetArtifactRes ( side , state_enabled ) ;
7459: LD_VAR 0 9
7463: PPUSH
7464: LD_INT 1
7466: PPUSH
7467: CALL_OW 467
7471: GO 7456
7473: POP
7474: POP
// for un = 0 to ( artefact_number - 1 ) do
7475: LD_ADDR_VAR 0 7
7479: PUSH
7480: DOUBLE
7481: LD_INT 0
7483: DEC
7484: ST_TO_ADDR
7485: LD_EXP 42
7489: PUSH
7490: LD_INT 1
7492: MINUS
7493: PUSH
7494: FOR_TO
7495: IFFALSE 7893
// begin base := un * 100 ;
7497: LD_ADDR_VAR 0 10
7501: PUSH
7502: LD_VAR 0 7
7506: PUSH
7507: LD_INT 100
7509: MUL
7510: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
7511: LD_VAR 0 10
7515: PUSH
7516: LD_INT 1
7518: PLUS
7519: PPUSH
7520: LD_VAR 0 1
7524: PUSH
7525: LD_VAR 0 7
7529: PUSH
7530: LD_INT 1
7532: PLUS
7533: ARRAY
7534: PUSH
7535: LD_INT 1
7537: ARRAY
7538: PPUSH
7539: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7543: LD_VAR 0 10
7547: PUSH
7548: LD_INT 2
7550: PLUS
7551: PPUSH
7552: LD_VAR 0 1
7556: PUSH
7557: LD_VAR 0 7
7561: PUSH
7562: LD_INT 1
7564: PLUS
7565: ARRAY
7566: PUSH
7567: LD_INT 2
7569: ARRAY
7570: PPUSH
7571: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7575: LD_VAR 0 10
7579: PUSH
7580: LD_INT 3
7582: PLUS
7583: PPUSH
7584: LD_VAR 0 2
7588: PUSH
7589: LD_VAR 0 7
7593: PUSH
7594: LD_INT 1
7596: PLUS
7597: ARRAY
7598: PPUSH
7599: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7603: LD_VAR 0 10
7607: PUSH
7608: LD_INT 5
7610: PLUS
7611: PPUSH
7612: LD_VAR 0 3
7616: PUSH
7617: LD_VAR 0 7
7621: PUSH
7622: LD_INT 1
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7631: LD_VAR 0 10
7635: PUSH
7636: LD_INT 6
7638: PLUS
7639: PPUSH
7640: LD_VAR 0 4
7644: PUSH
7645: LD_VAR 0 7
7649: PUSH
7650: LD_INT 1
7652: PLUS
7653: ARRAY
7654: PPUSH
7655: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7659: LD_VAR 0 10
7663: PUSH
7664: LD_INT 7
7666: PLUS
7667: PPUSH
7668: LD_VAR 0 5
7672: PUSH
7673: LD_VAR 0 7
7677: PUSH
7678: LD_INT 1
7680: PLUS
7681: ARRAY
7682: PPUSH
7683: CALL_OW 109
// SetTag ( base + 08 , false ) ;
7687: LD_VAR 0 10
7691: PUSH
7692: LD_INT 8
7694: PLUS
7695: PPUSH
7696: LD_INT 0
7698: PPUSH
7699: CALL_OW 109
// SetTag ( base + 09 , false ) ;
7703: LD_VAR 0 10
7707: PUSH
7708: LD_INT 9
7710: PLUS
7711: PPUSH
7712: LD_INT 0
7714: PPUSH
7715: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
7719: LD_VAR 0 10
7723: PUSH
7724: LD_INT 11
7726: PLUS
7727: PPUSH
7728: LD_INT 0
7730: PPUSH
7731: CALL_OW 109
// SetTag ( base + 12 , false ) ;
7735: LD_VAR 0 10
7739: PUSH
7740: LD_INT 12
7742: PLUS
7743: PPUSH
7744: LD_INT 0
7746: PPUSH
7747: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7751: LD_VAR 0 10
7755: PUSH
7756: LD_INT 13
7758: PLUS
7759: PPUSH
7760: LD_INT 0
7762: PPUSH
7763: CALL_OW 109
// for i = 0 to 7 do
7767: LD_ADDR_VAR 0 8
7771: PUSH
7772: DOUBLE
7773: LD_INT 0
7775: DEC
7776: ST_TO_ADDR
7777: LD_INT 7
7779: PUSH
7780: FOR_TO
7781: IFFALSE 7889
// begin SetTag ( base + i * 10 + 21 , false ) ;
7783: LD_VAR 0 10
7787: PUSH
7788: LD_VAR 0 8
7792: PUSH
7793: LD_INT 10
7795: MUL
7796: PLUS
7797: PUSH
7798: LD_INT 21
7800: PLUS
7801: PPUSH
7802: LD_INT 0
7804: PPUSH
7805: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
7809: LD_VAR 0 10
7813: PUSH
7814: LD_VAR 0 8
7818: PUSH
7819: LD_INT 10
7821: MUL
7822: PLUS
7823: PUSH
7824: LD_INT 22
7826: PLUS
7827: PPUSH
7828: LD_INT 0
7830: PPUSH
7831: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
7835: LD_VAR 0 10
7839: PUSH
7840: LD_VAR 0 8
7844: PUSH
7845: LD_INT 10
7847: MUL
7848: PLUS
7849: PUSH
7850: LD_INT 23
7852: PLUS
7853: PPUSH
7854: LD_INT 0
7856: PPUSH
7857: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
7861: LD_VAR 0 10
7865: PUSH
7866: LD_VAR 0 8
7870: PUSH
7871: LD_INT 10
7873: MUL
7874: PLUS
7875: PUSH
7876: LD_INT 25
7878: PLUS
7879: PPUSH
7880: LD_INT 0
7882: PPUSH
7883: CALL_OW 109
// end ;
7887: GO 7780
7889: POP
7890: POP
// end ;
7891: GO 7494
7893: POP
7894: POP
// enable ( 20 ) ;
7895: LD_INT 20
7897: ENABLE_MARKED
// labs_in_use := [ ] ;
7898: LD_ADDR_EXP 45
7902: PUSH
7903: EMPTY
7904: ST_TO_ADDR
// if def_artefact_one then
7905: LD_EXP 1
7909: IFFALSE 7936
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
7911: LD_INT 4
7913: PPUSH
7914: LD_EXP 44
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: LD_INT 16
7925: PPUSH
7926: LD_INT 0
7928: PPUSH
7929: CALL_OW 59
// enable ( 5 ) ;
7933: LD_INT 5
7935: ENABLE_MARKED
// end ; if def_artefact_two then
7936: LD_EXP 2
7940: IFFALSE 7967
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
7942: LD_INT 4
7944: PPUSH
7945: LD_EXP 44
7949: PUSH
7950: LD_INT 2
7952: ARRAY
7953: PPUSH
7954: LD_INT 16
7956: PPUSH
7957: LD_INT 0
7959: PPUSH
7960: CALL_OW 59
// enable ( 6 ) ;
7964: LD_INT 6
7966: ENABLE_MARKED
// end ; if def_artefact_three then
7967: LD_EXP 3
7971: IFFALSE 7998
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
7973: LD_INT 4
7975: PPUSH
7976: LD_EXP 44
7980: PUSH
7981: LD_INT 3
7983: ARRAY
7984: PPUSH
7985: LD_INT 16
7987: PPUSH
7988: LD_INT 0
7990: PPUSH
7991: CALL_OW 59
// enable ( 7 ) ;
7995: LD_INT 7
7997: ENABLE_MARKED
// end ; end ;
7998: LD_VAR 0 6
8002: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
8003: LD_INT 0
8005: PPUSH
8006: PPUSH
// begin art := artefact_num [ size ] ;
8007: LD_ADDR_VAR 0 3
8011: PUSH
8012: LD_EXP 43
8016: PUSH
8017: LD_VAR 0 2
8021: ARRAY
8022: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8023: LD_ADDR_VAR 0 4
8027: PUSH
8028: LD_VAR 0 3
8032: PUSH
8033: LD_INT 1
8035: MINUS
8036: PUSH
8037: LD_INT 100
8039: MUL
8040: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
8041: LD_VAR 0 4
8045: PUSH
8046: LD_INT 9
8048: PLUS
8049: PPUSH
8050: LD_INT 0
8052: PPUSH
8053: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8057: LD_VAR 0 4
8061: PUSH
8062: LD_INT 13
8064: PLUS
8065: PPUSH
8066: LD_INT 0
8068: PPUSH
8069: CALL_OW 109
// Init_Lab ( art ) ;
8073: LD_VAR 0 3
8077: PPUSH
8078: CALL 9554 0 1
// end ;
8082: PPOPN 4
8084: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
8085: LD_INT 0
8087: PPUSH
8088: PPUSH
8089: PPUSH
// begin art := artefact_num [ size ] ;
8090: LD_ADDR_VAR 0 3
8094: PUSH
8095: LD_EXP 43
8099: PUSH
8100: LD_VAR 0 2
8104: ARRAY
8105: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8106: LD_ADDR_VAR 0 4
8110: PUSH
8111: LD_VAR 0 3
8115: PUSH
8116: LD_INT 1
8118: MINUS
8119: PUSH
8120: LD_INT 100
8122: MUL
8123: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
8124: LD_VAR 0 4
8128: PUSH
8129: LD_INT 9
8131: PLUS
8132: PPUSH
8133: LD_INT 1
8135: PPUSH
8136: CALL_OW 109
// SetTag ( base + 13 , un ) ;
8140: LD_VAR 0 4
8144: PUSH
8145: LD_INT 13
8147: PLUS
8148: PPUSH
8149: LD_VAR 0 1
8153: PPUSH
8154: CALL_OW 109
// if GetTag ( base + 11 ) then
8158: LD_VAR 0 4
8162: PUSH
8163: LD_INT 11
8165: PLUS
8166: PPUSH
8167: CALL_OW 110
8171: IFFALSE 8334
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
8173: LD_ADDR_VAR 0 5
8177: PUSH
8178: LD_VAR 0 4
8182: PUSH
8183: LD_INT 11
8185: PLUS
8186: PPUSH
8187: CALL_OW 110
8191: PPUSH
8192: CALL_OW 255
8196: ST_TO_ADDR
// if GetTag ( base + 12 ) then
8197: LD_VAR 0 4
8201: PUSH
8202: LD_INT 12
8204: PLUS
8205: PPUSH
8206: CALL_OW 110
8210: IFFALSE 8278
// begin ComCancel ( GetTag ( base + 11 ) ) ;
8212: LD_VAR 0 4
8216: PUSH
8217: LD_INT 11
8219: PLUS
8220: PPUSH
8221: CALL_OW 110
8225: PPUSH
8226: CALL_OW 127
// wait ( 5 ) ;
8230: LD_INT 5
8232: PPUSH
8233: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
8237: LD_ADDR_EXP 45
8241: PUSH
8242: LD_EXP 45
8246: PUSH
8247: LD_VAR 0 4
8251: PUSH
8252: LD_INT 11
8254: PLUS
8255: PPUSH
8256: CALL_OW 110
8260: DIFF
8261: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
8262: LD_VAR 0 4
8266: PUSH
8267: LD_INT 12
8269: PLUS
8270: PPUSH
8271: LD_INT 0
8273: PPUSH
8274: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
8278: LD_VAR 0 4
8282: PUSH
8283: LD_VAR 0 5
8287: PUSH
8288: LD_INT 10
8290: MUL
8291: PLUS
8292: PUSH
8293: LD_INT 11
8295: PLUS
8296: PPUSH
8297: CALL_OW 110
8301: NOT
8302: IFFALSE 8318
// DeInit_Lab ( side , art ) ;
8304: LD_VAR 0 5
8308: PPUSH
8309: LD_VAR 0 3
8313: PPUSH
8314: CALL 10090 0 2
// SetTag ( base + 11 , 0 ) ;
8318: LD_VAR 0 4
8322: PUSH
8323: LD_INT 11
8325: PLUS
8326: PPUSH
8327: LD_INT 0
8329: PPUSH
8330: CALL_OW 109
// end ; end ;
8334: PPOPN 5
8336: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
8337: LD_INT 0
8339: PPUSH
8340: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8341: LD_ADDR_VAR 0 3
8345: PUSH
8346: LD_VAR 0 1
8350: PPUSH
8351: CALL_OW 255
8355: PUSH
8356: LD_INT 1
8358: MINUS
8359: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8360: LD_ADDR_VAR 0 2
8364: PUSH
8365: DOUBLE
8366: LD_INT 0
8368: DEC
8369: ST_TO_ADDR
8370: LD_EXP 42
8374: PUSH
8375: LD_INT 1
8377: MINUS
8378: PUSH
8379: FOR_TO
8380: IFFALSE 8422
// if lab = GetTag ( un * 100 + 11 ) then
8382: LD_VAR 0 1
8386: PUSH
8387: LD_VAR 0 2
8391: PUSH
8392: LD_INT 100
8394: MUL
8395: PUSH
8396: LD_INT 11
8398: PLUS
8399: PPUSH
8400: CALL_OW 110
8404: EQUAL
8405: IFFALSE 8420
// Init_Lab ( un + 1 ) ;
8407: LD_VAR 0 2
8411: PUSH
8412: LD_INT 1
8414: PLUS
8415: PPUSH
8416: CALL 9554 0 1
8420: GO 8379
8422: POP
8423: POP
// end ;
8424: PPOPN 3
8426: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
8427: LD_INT 0
8429: PPUSH
8430: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8431: LD_ADDR_VAR 0 4
8435: PUSH
8436: LD_VAR 0 1
8440: PPUSH
8441: CALL_OW 255
8445: PUSH
8446: LD_INT 1
8448: MINUS
8449: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: DOUBLE
8456: LD_INT 0
8458: DEC
8459: ST_TO_ADDR
8460: LD_EXP 42
8464: PUSH
8465: LD_INT 1
8467: MINUS
8468: PUSH
8469: FOR_TO
8470: IFFALSE 8588
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8472: LD_VAR 0 3
8476: PUSH
8477: LD_INT 100
8479: MUL
8480: PUSH
8481: LD_INT 11
8483: PLUS
8484: PPUSH
8485: CALL_OW 110
8489: PUSH
8490: LD_VAR 0 1
8494: EQUAL
8495: PUSH
8496: LD_VAR 0 3
8500: PUSH
8501: LD_INT 100
8503: MUL
8504: PUSH
8505: LD_INT 12
8507: PLUS
8508: PPUSH
8509: CALL_OW 110
8513: AND
8514: IFFALSE 8586
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
8516: LD_VAR 0 3
8520: PUSH
8521: LD_INT 100
8523: MUL
8524: PUSH
8525: LD_VAR 0 4
8529: PUSH
8530: LD_INT 10
8532: MUL
8533: PLUS
8534: PUSH
8535: LD_INT 22
8537: PLUS
8538: PPUSH
8539: LD_VAR 0 2
8543: PPUSH
8544: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8548: LD_VAR 0 3
8552: PUSH
8553: LD_INT 100
8555: MUL
8556: PUSH
8557: LD_INT 12
8559: PLUS
8560: PPUSH
8561: LD_INT 0
8563: PPUSH
8564: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8568: LD_ADDR_EXP 45
8572: PUSH
8573: LD_EXP 45
8577: PUSH
8578: LD_VAR 0 1
8582: DIFF
8583: ST_TO_ADDR
// break ;
8584: GO 8588
// end ;
8586: GO 8469
8588: POP
8589: POP
// Update_Artefact ( lab ) ;
8590: LD_VAR 0 1
8594: PPUSH
8595: CALL 10229 0 1
// end ;
8599: PPOPN 4
8601: END
// on SpecResearchComplete ( lab ) do var un , side ;
8602: LD_INT 0
8604: PPUSH
8605: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8606: LD_ADDR_VAR 0 3
8610: PUSH
8611: LD_VAR 0 1
8615: PPUSH
8616: CALL_OW 255
8620: PUSH
8621: LD_INT 1
8623: MINUS
8624: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8625: LD_ADDR_VAR 0 2
8629: PUSH
8630: DOUBLE
8631: LD_INT 0
8633: DEC
8634: ST_TO_ADDR
8635: LD_EXP 42
8639: PUSH
8640: LD_INT 1
8642: MINUS
8643: PUSH
8644: FOR_TO
8645: IFFALSE 8791
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8647: LD_VAR 0 2
8651: PUSH
8652: LD_INT 100
8654: MUL
8655: PUSH
8656: LD_INT 11
8658: PLUS
8659: PPUSH
8660: CALL_OW 110
8664: PUSH
8665: LD_VAR 0 1
8669: EQUAL
8670: PUSH
8671: LD_VAR 0 2
8675: PUSH
8676: LD_INT 100
8678: MUL
8679: PUSH
8680: LD_INT 12
8682: PLUS
8683: PPUSH
8684: CALL_OW 110
8688: AND
8689: IFFALSE 8789
// begin SetTag ( un * 100 + 12 , false ) ;
8691: LD_VAR 0 2
8695: PUSH
8696: LD_INT 100
8698: MUL
8699: PUSH
8700: LD_INT 12
8702: PLUS
8703: PPUSH
8704: LD_INT 0
8706: PPUSH
8707: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
8711: LD_VAR 0 2
8715: PUSH
8716: LD_INT 100
8718: MUL
8719: PUSH
8720: LD_VAR 0 3
8724: PUSH
8725: LD_INT 10
8727: MUL
8728: PLUS
8729: PUSH
8730: LD_INT 21
8732: PLUS
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
8741: LD_VAR 0 2
8745: PUSH
8746: LD_INT 100
8748: MUL
8749: PUSH
8750: LD_VAR 0 3
8754: PUSH
8755: LD_INT 10
8757: MUL
8758: PLUS
8759: PUSH
8760: LD_INT 25
8762: PLUS
8763: PPUSH
8764: LD_VAR 0 1
8768: PPUSH
8769: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8773: LD_ADDR_EXP 45
8777: PUSH
8778: LD_EXP 45
8782: PUSH
8783: LD_VAR 0 1
8787: DIFF
8788: ST_TO_ADDR
// end ;
8789: GO 8644
8791: POP
8792: POP
// Update_Artefact ( lab ) ;
8793: LD_VAR 0 1
8797: PPUSH
8798: CALL 10229 0 1
// end ;
8802: PPOPN 3
8804: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
8805: LD_INT 0
8807: PPUSH
8808: PPUSH
8809: PPUSH
8810: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
8811: LD_ADDR_VAR 0 7
8815: PUSH
8816: LD_VAR 0 2
8820: PUSH
8821: LD_INT 1
8823: MINUS
8824: PUSH
8825: LD_INT 3
8827: MOD
8828: PUSH
8829: LD_INT 1
8831: PLUS
8832: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8833: LD_ADDR_VAR 0 8
8837: PUSH
8838: LD_VAR 0 7
8842: PUSH
8843: LD_INT 1
8845: MINUS
8846: PUSH
8847: LD_INT 100
8849: MUL
8850: ST_TO_ADDR
// if number <= 3 then
8851: LD_VAR 0 2
8855: PUSH
8856: LD_INT 3
8858: LESSEQUAL
8859: IFFALSE 9091
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
8861: LD_VAR 0 8
8865: PUSH
8866: LD_INT 11
8868: PLUS
8869: PPUSH
8870: CALL_OW 110
8874: PPUSH
8875: LD_VAR 0 8
8879: PUSH
8880: LD_INT 5
8882: PLUS
8883: PPUSH
8884: CALL_OW 110
8888: PPUSH
8889: LD_INT 1
8891: PPUSH
8892: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
8896: LD_VAR 0 8
8900: PUSH
8901: LD_INT 11
8903: PLUS
8904: PPUSH
8905: CALL_OW 110
8909: PPUSH
8910: LD_VAR 0 8
8914: PUSH
8915: LD_VAR 0 1
8919: PUSH
8920: LD_INT 10
8922: MUL
8923: PLUS
8924: PUSH
8925: LD_INT 12
8927: PLUS
8928: PPUSH
8929: CALL_OW 110
8933: PPUSH
8934: CALL_OW 329
// SetTag ( base + 12 , true ) ;
8938: LD_VAR 0 8
8942: PUSH
8943: LD_INT 12
8945: PLUS
8946: PPUSH
8947: LD_INT 1
8949: PPUSH
8950: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
8954: LD_ADDR_EXP 45
8958: PUSH
8959: LD_EXP 45
8963: PUSH
8964: LD_VAR 0 8
8968: PUSH
8969: LD_INT 11
8971: PLUS
8972: PPUSH
8973: CALL_OW 110
8977: ADD
8978: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8979: LD_ADDR_VAR 0 5
8983: PUSH
8984: DOUBLE
8985: LD_INT 0
8987: DEC
8988: ST_TO_ADDR
8989: LD_EXP 42
8993: PUSH
8994: LD_INT 1
8996: MINUS
8997: PUSH
8998: FOR_TO
8999: IFFALSE 9087
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9001: LD_VAR 0 8
9005: PUSH
9006: LD_INT 11
9008: PLUS
9009: PPUSH
9010: CALL_OW 110
9014: PUSH
9015: LD_VAR 0 5
9019: PUSH
9020: LD_INT 100
9022: MUL
9023: PUSH
9024: LD_INT 11
9026: PLUS
9027: PPUSH
9028: CALL_OW 110
9032: PUSH
9033: LD_VAR 0 5
9037: PUSH
9038: LD_INT 100
9040: MUL
9041: PUSH
9042: LD_VAR 0 1
9046: PUSH
9047: LD_INT 10
9049: MUL
9050: PLUS
9051: PUSH
9052: LD_INT 15
9054: PLUS
9055: PPUSH
9056: CALL_OW 110
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: IN
9065: IFFALSE 9085
// DeInit_Lab ( side , un + 1 ) ;
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_VAR 0 5
9076: PUSH
9077: LD_INT 1
9079: PLUS
9080: PPUSH
9081: CALL 10090 0 2
9085: GO 8998
9087: POP
9088: POP
// end else
9089: GO 9265
// begin succes := false ;
9091: LD_ADDR_VAR 0 6
9095: PUSH
9096: LD_INT 0
9098: ST_TO_ADDR
// case art of 1 :
9099: LD_VAR 0 7
9103: PUSH
9104: LD_INT 1
9106: DOUBLE
9107: EQUAL
9108: IFTRUE 9112
9110: GO 9140
9112: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
9113: LD_ADDR_VAR 0 6
9117: PUSH
9118: LD_VAR 0 1
9122: PPUSH
9123: LD_VAR 0 3
9127: PPUSH
9128: LD_VAR 0 4
9132: PPUSH
9133: CALL 10662 0 3
9137: ST_TO_ADDR
9138: GO 9208
9140: LD_INT 2
9142: DOUBLE
9143: EQUAL
9144: IFTRUE 9148
9146: GO 9171
9148: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
9149: LD_ADDR_VAR 0 6
9153: PUSH
9154: LD_VAR 0 1
9158: PPUSH
9159: LD_VAR 0 3
9163: PPUSH
9164: CALL 10900 0 2
9168: ST_TO_ADDR
9169: GO 9208
9171: LD_INT 3
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9207
9179: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_VAR 0 1
9189: PPUSH
9190: LD_VAR 0 3
9194: PPUSH
9195: LD_VAR 0 4
9199: PPUSH
9200: CALL 11296 0 3
9204: ST_TO_ADDR
9205: GO 9208
9207: POP
// if succes then
9208: LD_VAR 0 6
9212: IFFALSE 9265
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
9214: LD_VAR 0 8
9218: PUSH
9219: LD_VAR 0 1
9223: PUSH
9224: LD_INT 10
9226: MUL
9227: PLUS
9228: PUSH
9229: LD_INT 13
9231: PLUS
9232: PPUSH
9233: LD_VAR 0 8
9237: PUSH
9238: LD_INT 7
9240: PLUS
9241: PPUSH
9242: CALL_OW 110
9246: PPUSH
9247: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
9251: LD_VAR 0 1
9255: PPUSH
9256: LD_VAR 0 7
9260: PPUSH
9261: CALL 9268 0 2
// end ; end ; end ;
9265: PPOPN 8
9267: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
9268: LD_INT 0
9270: PPUSH
9271: PPUSH
9272: PPUSH
// base := ( art - 1 ) * 100 ;
9273: LD_ADDR_VAR 0 4
9277: PUSH
9278: LD_VAR 0 2
9282: PUSH
9283: LD_INT 1
9285: MINUS
9286: PUSH
9287: LD_INT 100
9289: MUL
9290: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9291: LD_ADDR_VAR 0 5
9295: PUSH
9296: LD_VAR 0 4
9300: PUSH
9301: LD_VAR 0 1
9305: PUSH
9306: LD_INT 10
9308: MUL
9309: PLUS
9310: PUSH
9311: LD_INT 15
9313: PLUS
9314: PPUSH
9315: CALL_OW 110
9319: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
9320: LD_VAR 0 5
9324: PUSH
9325: LD_VAR 0 5
9329: PUSH
9330: LD_EXP 45
9334: IN
9335: NOT
9336: AND
9337: IFFALSE 9395
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
9339: LD_VAR 0 1
9343: PPUSH
9344: LD_VAR 0 4
9348: PUSH
9349: LD_INT 1
9351: PLUS
9352: PUSH
9353: LD_VAR 0 4
9357: PUSH
9358: LD_VAR 0 1
9362: PUSH
9363: LD_INT 10
9365: MUL
9366: PLUS
9367: PUSH
9368: LD_INT 11
9370: PLUS
9371: PPUSH
9372: CALL_OW 110
9376: PLUS
9377: PPUSH
9378: CALL_OW 110
9382: PPUSH
9383: LD_INT 1
9385: PPUSH
9386: LD_VAR 0 5
9390: PPUSH
9391: CALL_OW 468
// end ;
9395: LD_VAR 0 3
9399: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
9400: LD_INT 0
9402: PPUSH
9403: PPUSH
9404: PPUSH
// base := ( art - 1 ) * 100 ;
9405: LD_ADDR_VAR 0 4
9409: PUSH
9410: LD_VAR 0 2
9414: PUSH
9415: LD_INT 1
9417: MINUS
9418: PUSH
9419: LD_INT 100
9421: MUL
9422: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9423: LD_ADDR_VAR 0 5
9427: PUSH
9428: LD_VAR 0 4
9432: PUSH
9433: LD_VAR 0 1
9437: PUSH
9438: LD_INT 10
9440: MUL
9441: PLUS
9442: PUSH
9443: LD_INT 15
9445: PLUS
9446: PPUSH
9447: CALL_OW 110
9451: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
9452: LD_VAR 0 5
9456: PUSH
9457: LD_VAR 0 5
9461: PUSH
9462: LD_EXP 45
9466: IN
9467: NOT
9468: AND
9469: PUSH
9470: LD_VAR 0 5
9474: PPUSH
9475: CALL_OW 313
9479: AND
9480: IFFALSE 9549
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
9482: LD_VAR 0 1
9486: PPUSH
9487: LD_VAR 0 4
9491: PUSH
9492: LD_INT 1
9494: PLUS
9495: PUSH
9496: LD_VAR 0 4
9500: PUSH
9501: LD_VAR 0 1
9505: PUSH
9506: LD_INT 10
9508: MUL
9509: PLUS
9510: PUSH
9511: LD_INT 11
9513: PLUS
9514: PPUSH
9515: CALL_OW 110
9519: PLUS
9520: PPUSH
9521: CALL_OW 110
9525: PPUSH
9526: LD_VAR 0 4
9530: PUSH
9531: LD_INT 3
9533: PLUS
9534: PPUSH
9535: CALL_OW 110
9539: PPUSH
9540: LD_VAR 0 5
9544: PPUSH
9545: CALL_OW 468
// end ;
9549: LD_VAR 0 3
9553: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
9562: PPUSH
9563: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9564: LD_ADDR_VAR 0 8
9568: PUSH
9569: LD_EXP 44
9573: PUSH
9574: LD_VAR 0 1
9578: ARRAY
9579: PPUSH
9580: CALL_OW 469
9584: ST_TO_ADDR
// if not art_hex then
9585: LD_VAR 0 8
9589: NOT
9590: IFFALSE 9594
// exit ;
9592: GO 10085
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9594: LD_ADDR_VAR 0 3
9598: PUSH
9599: LD_INT 2
9601: PUSH
9602: LD_INT 30
9604: PUSH
9605: LD_INT 6
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 30
9614: PUSH
9615: LD_INT 7
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 30
9624: PUSH
9625: LD_INT 8
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: PPUSH
9641: CALL_OW 69
9645: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9646: LD_ADDR_VAR 0 9
9650: PUSH
9651: LD_VAR 0 3
9655: PPUSH
9656: LD_VAR 0 8
9660: PUSH
9661: LD_INT 1
9663: ARRAY
9664: PPUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 2
9672: ARRAY
9673: PPUSH
9674: CALL_OW 73
9678: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9679: LD_ADDR_VAR 0 6
9683: PUSH
9684: LD_VAR 0 9
9688: PPUSH
9689: LD_VAR 0 8
9693: PUSH
9694: LD_INT 1
9696: ARRAY
9697: PPUSH
9698: LD_VAR 0 8
9702: PUSH
9703: LD_INT 2
9705: ARRAY
9706: PPUSH
9707: CALL_OW 297
9711: ST_TO_ADDR
// if dist < 9 then
9712: LD_VAR 0 6
9716: PUSH
9717: LD_INT 9
9719: LESS
9720: IFFALSE 10085
// begin side := GetSide ( nearest_lab ) ;
9722: LD_ADDR_VAR 0 4
9726: PUSH
9727: LD_VAR 0 9
9731: PPUSH
9732: CALL_OW 255
9736: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
9737: LD_VAR 0 4
9741: PPUSH
9742: LD_VAR 0 1
9746: PPUSH
9747: CALL 10090 0 2
// base := ( art - 1 ) * 100 ;
9751: LD_ADDR_VAR 0 5
9755: PUSH
9756: LD_VAR 0 1
9760: PUSH
9761: LD_INT 1
9763: MINUS
9764: PUSH
9765: LD_INT 100
9767: MUL
9768: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
9769: LD_INT 24
9771: PPUSH
9772: LD_VAR 0 4
9776: PPUSH
9777: CALL_OW 321
9781: PUSH
9782: LD_INT 2
9784: EQUAL
9785: PUSH
9786: LD_VAR 0 9
9790: PPUSH
9791: CALL_OW 313
9795: AND
9796: IFFALSE 9988
// begin if GetTag ( base + side * 10 + 11 ) then
9798: LD_VAR 0 5
9802: PUSH
9803: LD_VAR 0 4
9807: PUSH
9808: LD_INT 10
9810: MUL
9811: PLUS
9812: PUSH
9813: LD_INT 11
9815: PLUS
9816: PPUSH
9817: CALL_OW 110
9821: IFFALSE 9978
// begin if not GetTag ( base + side * 10 + 13 ) then
9823: LD_VAR 0 5
9827: PUSH
9828: LD_VAR 0 4
9832: PUSH
9833: LD_INT 10
9835: MUL
9836: PLUS
9837: PUSH
9838: LD_INT 13
9840: PLUS
9841: PPUSH
9842: CALL_OW 110
9846: NOT
9847: IFFALSE 9870
// state := GetTag ( base + 03 ) else
9849: LD_ADDR_VAR 0 7
9853: PUSH
9854: LD_VAR 0 5
9858: PUSH
9859: LD_INT 3
9861: PLUS
9862: PPUSH
9863: CALL_OW 110
9867: ST_TO_ADDR
9868: GO 9878
// state := art_gray ;
9870: LD_ADDR_VAR 0 7
9874: PUSH
9875: LD_INT 1
9877: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
9878: LD_VAR 0 5
9882: PUSH
9883: LD_VAR 0 4
9887: PUSH
9888: LD_INT 10
9890: MUL
9891: PLUS
9892: PUSH
9893: LD_INT 15
9895: PLUS
9896: PPUSH
9897: CALL_OW 110
9901: PUSH
9902: LD_VAR 0 5
9906: PUSH
9907: LD_VAR 0 4
9911: PUSH
9912: LD_INT 10
9914: MUL
9915: PLUS
9916: PUSH
9917: LD_INT 15
9919: PLUS
9920: PPUSH
9921: CALL_OW 110
9925: PUSH
9926: LD_VAR 0 9
9930: NONEQUAL
9931: AND
9932: IFFALSE 9948
// DeInit_Lab ( side , art ) ;
9934: LD_VAR 0 4
9938: PPUSH
9939: LD_VAR 0 1
9943: PPUSH
9944: CALL 10090 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
9948: LD_VAR 0 5
9952: PUSH
9953: LD_VAR 0 4
9957: PUSH
9958: LD_INT 10
9960: MUL
9961: PLUS
9962: PUSH
9963: LD_INT 15
9965: PLUS
9966: PPUSH
9967: LD_VAR 0 9
9971: PPUSH
9972: CALL_OW 109
// end else
9976: GO 9986
// state := art_instant ;
9978: LD_ADDR_VAR 0 7
9982: PUSH
9983: LD_INT 2
9985: ST_TO_ADDR
// end else
9986: GO 9996
// state := art_gray ;
9988: LD_ADDR_VAR 0 7
9992: PUSH
9993: LD_INT 1
9995: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
9996: LD_VAR 0 5
10000: PUSH
10001: LD_INT 11
10003: PLUS
10004: PPUSH
10005: LD_VAR 0 9
10009: PPUSH
10010: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
10014: LD_VAR 0 9
10018: PUSH
10019: LD_EXP 45
10023: IN
10024: NOT
10025: IFFALSE 10085
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
10027: LD_VAR 0 4
10031: PPUSH
10032: LD_VAR 0 5
10036: PUSH
10037: LD_INT 1
10039: PLUS
10040: PUSH
10041: LD_VAR 0 5
10045: PUSH
10046: LD_VAR 0 4
10050: PUSH
10051: LD_INT 10
10053: MUL
10054: PLUS
10055: PUSH
10056: LD_INT 11
10058: PLUS
10059: PPUSH
10060: CALL_OW 110
10064: PLUS
10065: PPUSH
10066: CALL_OW 110
10070: PPUSH
10071: LD_VAR 0 7
10075: PPUSH
10076: LD_VAR 0 9
10080: PPUSH
10081: CALL_OW 468
// end ; end ;
10085: LD_VAR 0 2
10089: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// base := ( art - 1 ) * 100 ;
10095: LD_ADDR_VAR 0 4
10099: PUSH
10100: LD_VAR 0 2
10104: PUSH
10105: LD_INT 1
10107: MINUS
10108: PUSH
10109: LD_INT 100
10111: MUL
10112: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
10113: LD_ADDR_VAR 0 5
10117: PUSH
10118: LD_VAR 0 4
10122: PUSH
10123: LD_VAR 0 1
10127: PUSH
10128: LD_INT 10
10130: MUL
10131: PLUS
10132: PUSH
10133: LD_INT 15
10135: PLUS
10136: PPUSH
10137: CALL_OW 110
10141: ST_TO_ADDR
// if not lab then
10142: LD_VAR 0 5
10146: NOT
10147: IFFALSE 10168
// lab := GetTag ( base + 11 ) ;
10149: LD_ADDR_VAR 0 5
10153: PUSH
10154: LD_VAR 0 4
10158: PUSH
10159: LD_INT 11
10161: PLUS
10162: PPUSH
10163: CALL_OW 110
10167: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
10168: LD_VAR 0 1
10172: PPUSH
10173: LD_VAR 0 4
10177: PUSH
10178: LD_INT 1
10180: PLUS
10181: PUSH
10182: LD_VAR 0 4
10186: PUSH
10187: LD_VAR 0 1
10191: PUSH
10192: LD_INT 10
10194: MUL
10195: PLUS
10196: PUSH
10197: LD_INT 11
10199: PLUS
10200: PPUSH
10201: CALL_OW 110
10205: PLUS
10206: PPUSH
10207: CALL_OW 110
10211: PPUSH
10212: LD_INT 0
10214: PPUSH
10215: LD_VAR 0 5
10219: PPUSH
10220: CALL_OW 468
// end ;
10224: LD_VAR 0 3
10228: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
10229: LD_INT 0
10231: PPUSH
10232: PPUSH
10233: PPUSH
10234: PPUSH
// side := GetSide ( lab ) ;
10235: LD_ADDR_VAR 0 4
10239: PUSH
10240: LD_VAR 0 1
10244: PPUSH
10245: CALL_OW 255
10249: ST_TO_ADDR
// for art = 1 to artefact_number do
10250: LD_ADDR_VAR 0 3
10254: PUSH
10255: DOUBLE
10256: LD_INT 1
10258: DEC
10259: ST_TO_ADDR
10260: LD_EXP 42
10264: PUSH
10265: FOR_TO
10266: IFFALSE 10422
// begin base := ( art - 1 ) * 100 ;
10268: LD_ADDR_VAR 0 5
10272: PUSH
10273: LD_VAR 0 3
10277: PUSH
10278: LD_INT 1
10280: MINUS
10281: PUSH
10282: LD_INT 100
10284: MUL
10285: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
10286: LD_VAR 0 5
10290: PUSH
10291: LD_INT 11
10293: PLUS
10294: PPUSH
10295: CALL_OW 110
10299: PUSH
10300: LD_VAR 0 1
10304: EQUAL
10305: IFFALSE 10318
// Init_Lab ( art ) else
10307: LD_VAR 0 3
10311: PPUSH
10312: CALL 9554 0 1
10316: GO 10420
// begin if lab = GetTag ( base + side * 10 + 15 ) then
10318: LD_VAR 0 1
10322: PUSH
10323: LD_VAR 0 5
10327: PUSH
10328: LD_VAR 0 4
10332: PUSH
10333: LD_INT 10
10335: MUL
10336: PLUS
10337: PUSH
10338: LD_INT 15
10340: PLUS
10341: PPUSH
10342: CALL_OW 110
10346: EQUAL
10347: IFFALSE 10420
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
10349: LD_VAR 0 5
10353: PUSH
10354: LD_VAR 0 4
10358: PUSH
10359: LD_INT 10
10361: MUL
10362: PLUS
10363: PUSH
10364: LD_INT 13
10366: PLUS
10367: PPUSH
10368: CALL_OW 110
10372: PUSH
10373: LD_INT 0
10375: GREATER
10376: PUSH
10377: LD_VAR 0 1
10381: PPUSH
10382: CALL_OW 313
10386: NOT
10387: OR
10388: IFFALSE 10406
// Shadow_Artefact ( side , art ) else
10390: LD_VAR 0 4
10394: PPUSH
10395: LD_VAR 0 3
10399: PPUSH
10400: CALL 9268 0 2
10404: GO 10420
// Highlight_Artefact ( side , art ) ;
10406: LD_VAR 0 4
10410: PPUSH
10411: LD_VAR 0 3
10415: PPUSH
10416: CALL 9400 0 2
// end ; end ; end ;
10420: GO 10265
10422: POP
10423: POP
// end ; end_of_file
10424: LD_VAR 0 2
10428: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
10429: LD_INT 10
10431: PPUSH
10432: CALL_OW 67
// if not IsBusy ( lab ) then
10436: LD_VAR 0 2
10440: PPUSH
10441: CALL_OW 315
10445: NOT
10446: IFFALSE 10473
// begin labs_in_use := labs_in_use diff lab ;
10448: LD_ADDR_EXP 45
10452: PUSH
10453: LD_EXP 45
10457: PUSH
10458: LD_VAR 0 2
10462: DIFF
10463: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10464: LD_VAR 0 2
10468: PPUSH
10469: CALL 10229 0 1
// end ; end ;
10473: PPOPN 2
10475: END
// on ResearchStarted ( tech , lab ) do var un , side ;
10476: LD_INT 0
10478: PPUSH
10479: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
10480: LD_ADDR_EXP 45
10484: PUSH
10485: LD_EXP 45
10489: PUSH
10490: LD_VAR 0 2
10494: ADD
10495: ST_TO_ADDR
// side := GetSide ( lab ) ;
10496: LD_ADDR_VAR 0 4
10500: PUSH
10501: LD_VAR 0 2
10505: PPUSH
10506: CALL_OW 255
10510: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
10511: LD_ADDR_VAR 0 3
10515: PUSH
10516: DOUBLE
10517: LD_INT 0
10519: DEC
10520: ST_TO_ADDR
10521: LD_EXP 42
10525: PUSH
10526: LD_INT 1
10528: MINUS
10529: PUSH
10530: FOR_TO
10531: IFFALSE 10610
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10533: LD_VAR 0 2
10537: PUSH
10538: LD_VAR 0 3
10542: PUSH
10543: LD_INT 100
10545: MUL
10546: PUSH
10547: LD_INT 11
10549: PLUS
10550: PPUSH
10551: CALL_OW 110
10555: PUSH
10556: LD_VAR 0 3
10560: PUSH
10561: LD_INT 100
10563: MUL
10564: PUSH
10565: LD_VAR 0 4
10569: PUSH
10570: LD_INT 10
10572: MUL
10573: PLUS
10574: PUSH
10575: LD_INT 15
10577: PLUS
10578: PPUSH
10579: CALL_OW 110
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: IN
10588: IFFALSE 10608
// DeInit_Lab ( side , un + 1 ) ;
10590: LD_VAR 0 4
10594: PPUSH
10595: LD_VAR 0 3
10599: PUSH
10600: LD_INT 1
10602: PLUS
10603: PPUSH
10604: CALL 10090 0 2
10608: GO 10530
10610: POP
10611: POP
// end ;
10612: PPOPN 4
10614: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10615: LD_INT 10
10617: PPUSH
10618: CALL_OW 67
// if not IsBusy ( lab ) then
10622: LD_VAR 0 2
10626: PPUSH
10627: CALL_OW 315
10631: NOT
10632: IFFALSE 10659
// begin labs_in_use := labs_in_use diff lab ;
10634: LD_ADDR_EXP 45
10638: PUSH
10639: LD_EXP 45
10643: PUSH
10644: LD_VAR 0 2
10648: DIFF
10649: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10650: LD_VAR 0 2
10654: PPUSH
10655: CALL 10229 0 1
// end ; end ; end_of_file
10659: PPOPN 2
10661: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10662: LD_INT 0
10664: PPUSH
10665: PPUSH
10666: PPUSH
// vysledek := true ;
10667: LD_ADDR_VAR 0 5
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
10675: LD_ADDR_VAR 0 6
10679: PUSH
10680: LD_VAR 0 1
10684: PUSH
10685: LD_INT 10
10687: MUL
10688: PUSH
10689: LD_INT 15
10691: PLUS
10692: PPUSH
10693: CALL_OW 110
10697: PPUSH
10698: CALL_OW 274
10702: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
10703: LD_VAR 0 6
10707: PUSH
10708: LD_VAR 0 6
10712: PPUSH
10713: CALL_OW 279
10717: PUSH
10718: LD_INT 3
10720: ARRAY
10721: PUSH
10722: LD_INT 6
10724: PPUSH
10725: CALL_OW 110
10729: GREATEREQUAL
10730: AND
10731: IFFALSE 10821
// begin PlaceSeeing ( x , y , side , - 15 ) ;
10733: LD_VAR 0 2
10737: PPUSH
10738: LD_VAR 0 3
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: LD_INT 15
10750: NEG
10751: PPUSH
10752: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
10756: LD_VAR 0 6
10760: PPUSH
10761: LD_INT 3
10763: PPUSH
10764: LD_VAR 0 6
10768: PPUSH
10769: CALL_OW 279
10773: PUSH
10774: LD_INT 3
10776: ARRAY
10777: PUSH
10778: LD_INT 6
10780: PPUSH
10781: CALL_OW 110
10785: MINUS
10786: PPUSH
10787: CALL_OW 277
// view_data := [ x , y , side ] ;
10791: LD_ADDR_LOC 10
10795: PUSH
10796: LD_VAR 0 2
10800: PUSH
10801: LD_VAR 0 3
10805: PUSH
10806: LD_VAR 0 1
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: ST_TO_ADDR
// enable ( 1 ) ;
10816: LD_INT 1
10818: ENABLE_MARKED
// end else
10819: GO 10829
// vysledek := false ;
10821: LD_ADDR_VAR 0 5
10825: PUSH
10826: LD_INT 0
10828: ST_TO_ADDR
// result := vysledek ;
10829: LD_ADDR_VAR 0 4
10833: PUSH
10834: LD_VAR 0 5
10838: ST_TO_ADDR
// end ;
10839: LD_VAR 0 4
10843: RET
// every 0 0$2 trigger view_data marked 1 do
10844: LD_LOC 10
10848: IFFALSE 10899
10850: GO 10852
10852: DISABLE
// begin wait ( 0 0$30 ) ;
10853: LD_INT 1050
10855: PPUSH
10856: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
10860: LD_LOC 10
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: PPUSH
10869: LD_LOC 10
10873: PUSH
10874: LD_INT 2
10876: ARRAY
10877: PPUSH
10878: LD_LOC 10
10882: PUSH
10883: LD_INT 3
10885: ARRAY
10886: PPUSH
10887: CALL_OW 331
// view_data := 0 ;
10891: LD_ADDR_LOC 10
10895: PUSH
10896: LD_INT 0
10898: ST_TO_ADDR
// end ;
10899: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
10900: LD_INT 0
10902: PPUSH
10903: PPUSH
10904: PPUSH
10905: PPUSH
10906: PPUSH
10907: PPUSH
10908: PPUSH
10909: PPUSH
// vysledek := true ;
10910: LD_ADDR_VAR 0 4
10914: PUSH
10915: LD_INT 1
10917: ST_TO_ADDR
// it_can := false ;
10918: LD_ADDR_VAR 0 8
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
10926: LD_ADDR_VAR 0 9
10930: PUSH
10931: LD_INT 30
10933: PUSH
10934: LD_INT 28
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
10941: LD_ADDR_VAR 0 10
10945: PUSH
10946: LD_INT 8
10948: PUSH
10949: LD_INT 48
10951: PUSH
10952: LD_INT 29
10954: PUSH
10955: LD_INT 49
10957: PUSH
10958: LD_INT 10
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
10968: LD_ADDR_VAR 0 7
10972: PUSH
10973: LD_VAR 0 2
10977: PPUSH
10978: CALL_OW 247
10982: PUSH
10983: LD_INT 3
10985: EQUAL
10986: PUSH
10987: LD_VAR 0 2
10991: PPUSH
10992: CALL_OW 266
10996: PUSH
10997: LD_VAR 0 9
11001: IN
11002: PUSH
11003: LD_VAR 0 2
11007: PPUSH
11008: CALL_OW 269
11012: PUSH
11013: LD_VAR 0 10
11017: IN
11018: OR
11019: AND
11020: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
11021: LD_ADDR_VAR 0 6
11025: PUSH
11026: LD_VAR 0 2
11030: PPUSH
11031: CALL_OW 247
11035: PUSH
11036: LD_INT 2
11038: EQUAL
11039: PUSH
11040: LD_VAR 0 2
11044: PPUSH
11045: CALL_OW 264
11049: PUSH
11050: LD_VAR 0 10
11054: IN
11055: PUSH
11056: LD_VAR 0 2
11060: PPUSH
11061: CALL_OW 262
11065: PUSH
11066: LD_INT 3
11068: EQUAL
11069: OR
11070: AND
11071: ST_TO_ADDR
// case def_artefact_two of 1 :
11072: LD_EXP 2
11076: PUSH
11077: LD_INT 1
11079: DOUBLE
11080: EQUAL
11081: IFTRUE 11085
11083: GO 11102
11085: POP
// if b_can then
11086: LD_VAR 0 7
11090: IFFALSE 11100
// it_can := true ; 2 :
11092: LD_ADDR_VAR 0 8
11096: PUSH
11097: LD_INT 1
11099: ST_TO_ADDR
11100: GO 11159
11102: LD_INT 2
11104: DOUBLE
11105: EQUAL
11106: IFTRUE 11110
11108: GO 11127
11110: POP
// if v_can then
11111: LD_VAR 0 6
11115: IFFALSE 11125
// it_can := true ; 3 :
11117: LD_ADDR_VAR 0 8
11121: PUSH
11122: LD_INT 1
11124: ST_TO_ADDR
11125: GO 11159
11127: LD_INT 3
11129: DOUBLE
11130: EQUAL
11131: IFTRUE 11135
11133: GO 11158
11135: POP
// if b_can or v_can then
11136: LD_VAR 0 7
11140: PUSH
11141: LD_VAR 0 6
11145: OR
11146: IFFALSE 11156
// it_can := true ; end ;
11148: LD_ADDR_VAR 0 8
11152: PUSH
11153: LD_INT 1
11155: ST_TO_ADDR
11156: GO 11159
11158: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
11159: LD_ADDR_VAR 0 5
11163: PUSH
11164: LD_INT 100
11166: PUSH
11167: LD_VAR 0 1
11171: PUSH
11172: LD_INT 10
11174: MUL
11175: PLUS
11176: PUSH
11177: LD_INT 15
11179: PLUS
11180: PPUSH
11181: CALL_OW 110
11185: PPUSH
11186: CALL_OW 274
11190: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
11191: LD_VAR 0 5
11195: PUSH
11196: LD_VAR 0 8
11200: AND
11201: PUSH
11202: LD_VAR 0 5
11206: PPUSH
11207: CALL_OW 279
11211: PUSH
11212: LD_INT 3
11214: ARRAY
11215: PUSH
11216: LD_INT 106
11218: PPUSH
11219: CALL_OW 110
11223: GREATEREQUAL
11224: AND
11225: IFFALSE 11273
// begin KillUnit ( un ) ;
11227: LD_VAR 0 2
11231: PPUSH
11232: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
11236: LD_VAR 0 5
11240: PPUSH
11241: LD_INT 3
11243: PPUSH
11244: LD_VAR 0 5
11248: PPUSH
11249: CALL_OW 279
11253: PUSH
11254: LD_INT 3
11256: ARRAY
11257: PUSH
11258: LD_INT 106
11260: PPUSH
11261: CALL_OW 110
11265: MINUS
11266: PPUSH
11267: CALL_OW 277
// end else
11271: GO 11281
// vysledek := false ;
11273: LD_ADDR_VAR 0 4
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// result := vysledek ;
11281: LD_ADDR_VAR 0 3
11285: PUSH
11286: LD_VAR 0 4
11290: ST_TO_ADDR
// end ;
11291: LD_VAR 0 3
11295: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
11296: LD_INT 0
11298: PPUSH
11299: PPUSH
11300: PPUSH
11301: PPUSH
// vysledek := true ;
11302: LD_ADDR_VAR 0 5
11306: PUSH
11307: LD_INT 1
11309: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
11310: LD_ADDR_VAR 0 7
11314: PUSH
11315: LD_INT 200
11317: PUSH
11318: LD_VAR 0 1
11322: PUSH
11323: LD_INT 10
11325: MUL
11326: PLUS
11327: PUSH
11328: LD_INT 15
11330: PLUS
11331: PPUSH
11332: CALL_OW 110
11336: PPUSH
11337: CALL_OW 274
11341: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
11342: LD_VAR 0 7
11346: PUSH
11347: LD_VAR 0 7
11351: PPUSH
11352: CALL_OW 279
11356: PUSH
11357: LD_INT 3
11359: ARRAY
11360: PUSH
11361: LD_INT 206
11363: PPUSH
11364: CALL_OW 110
11368: GREATEREQUAL
11369: AND
11370: IFFALSE 11426
// begin ArtContamination ( p1 , p2 , 15 ) ;
11372: LD_VAR 0 2
11376: PPUSH
11377: LD_VAR 0 3
11381: PPUSH
11382: LD_INT 15
11384: PPUSH
11385: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
11389: LD_VAR 0 7
11393: PPUSH
11394: LD_INT 3
11396: PPUSH
11397: LD_VAR 0 7
11401: PPUSH
11402: CALL_OW 279
11406: PUSH
11407: LD_INT 3
11409: ARRAY
11410: PUSH
11411: LD_INT 206
11413: PPUSH
11414: CALL_OW 110
11418: MINUS
11419: PPUSH
11420: CALL_OW 277
// end else
11424: GO 11434
// vysledek := false ;
11426: LD_ADDR_VAR 0 5
11430: PUSH
11431: LD_INT 0
11433: ST_TO_ADDR
// result := vysledek ;
11434: LD_ADDR_VAR 0 4
11438: PUSH
11439: LD_VAR 0 5
11443: ST_TO_ADDR
// end ;
11444: LD_VAR 0 4
11448: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
11449: GO 11451
11451: DISABLE
11452: LD_INT 0
11454: PPUSH
11455: PPUSH
11456: PPUSH
// begin for art = 0 to artefact_number do
11457: LD_ADDR_VAR 0 1
11461: PUSH
11462: DOUBLE
11463: LD_INT 0
11465: DEC
11466: ST_TO_ADDR
11467: LD_EXP 42
11471: PUSH
11472: FOR_TO
11473: IFFALSE 11607
// for side = 1 to Side_Positions do
11475: LD_ADDR_VAR 0 2
11479: PUSH
11480: DOUBLE
11481: LD_INT 1
11483: DEC
11484: ST_TO_ADDR
11485: LD_EXP 23
11489: PUSH
11490: FOR_TO
11491: IFFALSE 11603
// begin recharge := art * 100 + side * 10 + 13 ;
11493: LD_ADDR_VAR 0 3
11497: PUSH
11498: LD_VAR 0 1
11502: PUSH
11503: LD_INT 100
11505: MUL
11506: PUSH
11507: LD_VAR 0 2
11511: PUSH
11512: LD_INT 10
11514: MUL
11515: PLUS
11516: PUSH
11517: LD_INT 13
11519: PLUS
11520: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
11521: LD_EXP 23
11525: PUSH
11526: LD_VAR 0 2
11530: ARRAY
11531: PUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: CALL_OW 110
11541: PUSH
11542: LD_INT 0
11544: GREATER
11545: AND
11546: IFFALSE 11601
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11548: LD_VAR 0 3
11552: PPUSH
11553: LD_VAR 0 3
11557: PPUSH
11558: CALL_OW 110
11562: PUSH
11563: LD_INT 1
11565: MINUS
11566: PPUSH
11567: CALL_OW 109
// if not GetTag ( recharge ) then
11571: LD_VAR 0 3
11575: PPUSH
11576: CALL_OW 110
11580: NOT
11581: IFFALSE 11601
// Highlight_Artefact ( side , art + 1 ) ;
11583: LD_VAR 0 2
11587: PPUSH
11588: LD_VAR 0 1
11592: PUSH
11593: LD_INT 1
11595: PLUS
11596: PPUSH
11597: CALL 9400 0 2
// end ; end ;
11601: GO 11490
11603: POP
11604: POP
11605: GO 11472
11607: POP
11608: POP
// enable ;
11609: ENABLE
// end ; end_of_file
11610: PPOPN 3
11612: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11613: LD_INT 0
11615: PPUSH
11616: PPUSH
11617: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11618: LD_INT 18
11620: PPUSH
11621: LD_VAR 0 1
11625: PUSH
11626: LD_INT 1
11628: ARRAY
11629: PPUSH
11630: LD_VAR 0 1
11634: PUSH
11635: LD_INT 2
11637: ARRAY
11638: PPUSH
11639: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11643: LD_VAR 0 1
11647: PUSH
11648: LD_INT 1
11650: ARRAY
11651: PPUSH
11652: LD_VAR 0 1
11656: PUSH
11657: LD_INT 2
11659: ARRAY
11660: PPUSH
11661: CALL_OW 494
// Wait ( 30 ) ;
11665: LD_INT 30
11667: PPUSH
11668: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
11672: LD_INT 18
11674: PPUSH
11675: LD_INT 4
11677: PPUSH
11678: CALL_OW 286
// base := ( art - 1 ) * 100 ;
11682: LD_ADDR_VAR 0 4
11686: PUSH
11687: LD_VAR 0 2
11691: PUSH
11692: LD_INT 1
11694: MINUS
11695: PUSH
11696: LD_INT 100
11698: MUL
11699: ST_TO_ADDR
// if GetTag ( base + 11 ) then
11700: LD_VAR 0 4
11704: PUSH
11705: LD_INT 11
11707: PLUS
11708: PPUSH
11709: CALL_OW 110
11713: IFFALSE 11851
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
11715: LD_ADDR_VAR 0 5
11719: PUSH
11720: LD_VAR 0 4
11724: PUSH
11725: LD_INT 11
11727: PLUS
11728: PPUSH
11729: CALL_OW 110
11733: PPUSH
11734: CALL_OW 255
11738: ST_TO_ADDR
// if GetTag ( base + 12 ) then
11739: LD_VAR 0 4
11743: PUSH
11744: LD_INT 12
11746: PLUS
11747: PPUSH
11748: CALL_OW 110
11752: IFFALSE 11795
// begin ComCancel ( GetTag ( base + 11 ) ) ;
11754: LD_VAR 0 4
11758: PUSH
11759: LD_INT 11
11761: PLUS
11762: PPUSH
11763: CALL_OW 110
11767: PPUSH
11768: CALL_OW 127
// Wait ( 10 ) ;
11772: LD_INT 10
11774: PPUSH
11775: CALL_OW 67
// SetTag ( base + 12 , false ) ;
11779: LD_VAR 0 4
11783: PUSH
11784: LD_INT 12
11786: PLUS
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
11795: LD_VAR 0 4
11799: PUSH
11800: LD_VAR 0 5
11804: PUSH
11805: LD_INT 10
11807: MUL
11808: PLUS
11809: PUSH
11810: LD_INT 11
11812: PLUS
11813: PPUSH
11814: CALL_OW 110
11818: NOT
11819: IFFALSE 11835
// DeInit_Lab ( side , art ) ;
11821: LD_VAR 0 5
11825: PPUSH
11826: LD_VAR 0 2
11830: PPUSH
11831: CALL 10090 0 2
// SetTag ( base + 11 , 0 ) ;
11835: LD_VAR 0 4
11839: PUSH
11840: LD_INT 11
11842: PLUS
11843: PPUSH
11844: LD_INT 0
11846: PPUSH
11847: CALL_OW 109
// end ; end ;
11851: LD_VAR 0 3
11855: RET
// every 0 0$5 marked 5 do var hex , un ;
11856: GO 11858
11858: DISABLE
11859: LD_INT 0
11861: PPUSH
11862: PPUSH
// begin if GetTag ( 09 ) then
11863: LD_INT 9
11865: PPUSH
11866: CALL_OW 110
11870: IFFALSE 11909
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
11872: LD_ADDR_VAR 0 1
11876: PUSH
11877: LD_INT 13
11879: PPUSH
11880: CALL_OW 110
11884: PPUSH
11885: CALL_OW 250
11889: PUSH
11890: LD_INT 13
11892: PPUSH
11893: CALL_OW 110
11897: PPUSH
11898: CALL_OW 251
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: ST_TO_ADDR
11907: GO 11928
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
11909: LD_ADDR_VAR 0 1
11913: PUSH
11914: LD_EXP 44
11918: PUSH
11919: LD_INT 1
11921: ARRAY
11922: PPUSH
11923: CALL_OW 469
11927: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11928: LD_VAR 0 1
11932: PUSH
11933: LD_INT 1
11935: ARRAY
11936: PPUSH
11937: LD_VAR 0 1
11941: PUSH
11942: LD_INT 2
11944: ARRAY
11945: PPUSH
11946: LD_INT 16
11948: PPUSH
11949: CALL_OW 309
11953: NOT
11954: IFFALSE 12299
// begin wait ( 3 3$0 ) ;
11956: LD_INT 6300
11958: PPUSH
11959: CALL_OW 67
// if GetTag ( 09 ) then
11963: LD_INT 9
11965: PPUSH
11966: CALL_OW 110
11970: IFFALSE 12017
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
11972: LD_INT 13
11974: PPUSH
11975: CALL_OW 110
11979: PPUSH
11980: LD_INT 4
11982: PPUSH
11983: LD_EXP 44
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: NEG
11992: PPUSH
11993: CALL_OW 290
// SetTag ( 09 , 0 ) ;
11997: LD_INT 9
11999: PPUSH
12000: LD_INT 0
12002: PPUSH
12003: CALL_OW 109
// SetTag ( 13 , 0 ) ;
12007: LD_INT 13
12009: PPUSH
12010: LD_INT 0
12012: PPUSH
12013: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 1 ] ) ;
12017: LD_ADDR_VAR 0 1
12021: PUSH
12022: LD_EXP 44
12026: PUSH
12027: LD_INT 1
12029: ARRAY
12030: PPUSH
12031: CALL_OW 469
12035: ST_TO_ADDR
// if not hex then
12036: LD_VAR 0 1
12040: NOT
12041: IFFALSE 12078
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
12043: LD_ADDR_VAR 0 1
12047: PUSH
12048: LD_INT 13
12050: PPUSH
12051: CALL_OW 110
12055: PPUSH
12056: CALL_OW 250
12060: PUSH
12061: LD_INT 13
12063: PPUSH
12064: CALL_OW 110
12068: PPUSH
12069: CALL_OW 251
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: ST_TO_ADDR
// DestroyArtefact ( hex , 1 ) ;
12078: LD_VAR 0 1
12082: PPUSH
12083: LD_INT 1
12085: PPUSH
12086: CALL 11613 0 2
// wait ( 5 ) ;
12090: LD_INT 5
12092: PPUSH
12093: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12097: LD_ADDR_VAR 0 1
12101: PUSH
12102: LD_INT 16
12104: PPUSH
12105: LD_INT 0
12107: PPUSH
12108: CALL_OW 16
12112: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12113: LD_ADDR_VAR 0 2
12117: PUSH
12118: LD_VAR 0 1
12122: PUSH
12123: LD_INT 1
12125: ARRAY
12126: PPUSH
12127: LD_VAR 0 1
12131: PUSH
12132: LD_INT 2
12134: ARRAY
12135: PPUSH
12136: CALL_OW 428
12140: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12141: LD_VAR 0 2
12145: PUSH
12146: LD_INT 0
12148: GREATER
12149: PUSH
12150: LD_VAR 0 2
12154: PPUSH
12155: CALL_OW 247
12159: PUSH
12160: LD_INT 3
12162: EQUAL
12163: AND
12164: IFFALSE 12208
// begin KillUnit ( un ) ;
12166: LD_VAR 0 2
12170: PPUSH
12171: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12175: LD_VAR 0 1
12179: PUSH
12180: LD_INT 1
12182: ARRAY
12183: PPUSH
12184: LD_VAR 0 1
12188: PUSH
12189: LD_INT 2
12191: ARRAY
12192: PPUSH
12193: CALL_OW 428
12197: IFFALSE 12208
// wait ( 10 ) ;
12199: LD_INT 10
12201: PPUSH
12202: CALL_OW 67
12206: GO 12175
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12208: LD_VAR 0 1
12212: PUSH
12213: LD_INT 1
12215: ARRAY
12216: PPUSH
12217: LD_VAR 0 1
12221: PUSH
12222: LD_INT 2
12224: ARRAY
12225: PPUSH
12226: CALL_OW 428
12230: NOT
12231: IFFALSE 12097
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12233: LD_VAR 0 1
12237: PUSH
12238: LD_INT 1
12240: ARRAY
12241: PPUSH
12242: LD_VAR 0 1
12246: PUSH
12247: LD_INT 2
12249: ARRAY
12250: PPUSH
12251: CALL_OW 494
// wait ( 30 ) ;
12255: LD_INT 30
12257: PPUSH
12258: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12262: LD_INT 4
12264: PPUSH
12265: LD_EXP 44
12269: PUSH
12270: LD_INT 1
12272: ARRAY
12273: PPUSH
12274: LD_VAR 0 1
12278: PUSH
12279: LD_INT 1
12281: ARRAY
12282: PPUSH
12283: LD_VAR 0 1
12287: PUSH
12288: LD_INT 2
12290: ARRAY
12291: PPUSH
12292: LD_INT 0
12294: PPUSH
12295: CALL_OW 58
// end ; enable ;
12299: ENABLE
// end ;
12300: PPOPN 2
12302: END
// every 0 0$5 marked 6 do var hex , un ;
12303: GO 12305
12305: DISABLE
12306: LD_INT 0
12308: PPUSH
12309: PPUSH
// begin if GetTag ( 109 ) then
12310: LD_INT 109
12312: PPUSH
12313: CALL_OW 110
12317: IFFALSE 12356
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
12319: LD_ADDR_VAR 0 1
12323: PUSH
12324: LD_INT 113
12326: PPUSH
12327: CALL_OW 110
12331: PPUSH
12332: CALL_OW 250
12336: PUSH
12337: LD_INT 113
12339: PPUSH
12340: CALL_OW 110
12344: PPUSH
12345: CALL_OW 251
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: ST_TO_ADDR
12354: GO 12375
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
12356: LD_ADDR_VAR 0 1
12360: PUSH
12361: LD_EXP 44
12365: PUSH
12366: LD_INT 2
12368: ARRAY
12369: PPUSH
12370: CALL_OW 469
12374: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12375: LD_VAR 0 1
12379: PUSH
12380: LD_INT 1
12382: ARRAY
12383: PPUSH
12384: LD_VAR 0 1
12388: PUSH
12389: LD_INT 2
12391: ARRAY
12392: PPUSH
12393: LD_INT 16
12395: PPUSH
12396: CALL_OW 309
12400: NOT
12401: IFFALSE 12746
// begin wait ( 3 3$30 ) ;
12403: LD_INT 7350
12405: PPUSH
12406: CALL_OW 67
// if GetTag ( 109 ) then
12410: LD_INT 109
12412: PPUSH
12413: CALL_OW 110
12417: IFFALSE 12464
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 2 ] ) ;
12419: LD_INT 113
12421: PPUSH
12422: CALL_OW 110
12426: PPUSH
12427: LD_INT 4
12429: PPUSH
12430: LD_EXP 44
12434: PUSH
12435: LD_INT 2
12437: ARRAY
12438: NEG
12439: PPUSH
12440: CALL_OW 290
// SetTag ( 109 , 0 ) ;
12444: LD_INT 109
12446: PPUSH
12447: LD_INT 0
12449: PPUSH
12450: CALL_OW 109
// SetTag ( 113 , 0 ) ;
12454: LD_INT 113
12456: PPUSH
12457: LD_INT 0
12459: PPUSH
12460: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 2 ] ) ;
12464: LD_ADDR_VAR 0 1
12468: PUSH
12469: LD_EXP 44
12473: PUSH
12474: LD_INT 2
12476: ARRAY
12477: PPUSH
12478: CALL_OW 469
12482: ST_TO_ADDR
// if not hex then
12483: LD_VAR 0 1
12487: NOT
12488: IFFALSE 12525
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
12490: LD_ADDR_VAR 0 1
12494: PUSH
12495: LD_INT 13
12497: PPUSH
12498: CALL_OW 110
12502: PPUSH
12503: CALL_OW 250
12507: PUSH
12508: LD_INT 13
12510: PPUSH
12511: CALL_OW 110
12515: PPUSH
12516: CALL_OW 251
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: ST_TO_ADDR
// DestroyArtefact ( hex , 2 ) ;
12525: LD_VAR 0 1
12529: PPUSH
12530: LD_INT 2
12532: PPUSH
12533: CALL 11613 0 2
// wait ( 5 ) ;
12537: LD_INT 5
12539: PPUSH
12540: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12544: LD_ADDR_VAR 0 1
12548: PUSH
12549: LD_INT 16
12551: PPUSH
12552: LD_INT 0
12554: PPUSH
12555: CALL_OW 16
12559: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12560: LD_ADDR_VAR 0 2
12564: PUSH
12565: LD_VAR 0 1
12569: PUSH
12570: LD_INT 1
12572: ARRAY
12573: PPUSH
12574: LD_VAR 0 1
12578: PUSH
12579: LD_INT 2
12581: ARRAY
12582: PPUSH
12583: CALL_OW 428
12587: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12588: LD_VAR 0 2
12592: PUSH
12593: LD_INT 0
12595: GREATER
12596: PUSH
12597: LD_VAR 0 2
12601: PPUSH
12602: CALL_OW 247
12606: PUSH
12607: LD_INT 3
12609: EQUAL
12610: AND
12611: IFFALSE 12655
// begin KillUnit ( un ) ;
12613: LD_VAR 0 2
12617: PPUSH
12618: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12622: LD_VAR 0 1
12626: PUSH
12627: LD_INT 1
12629: ARRAY
12630: PPUSH
12631: LD_VAR 0 1
12635: PUSH
12636: LD_INT 2
12638: ARRAY
12639: PPUSH
12640: CALL_OW 428
12644: IFFALSE 12655
// wait ( 10 ) ;
12646: LD_INT 10
12648: PPUSH
12649: CALL_OW 67
12653: GO 12622
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12655: LD_VAR 0 1
12659: PUSH
12660: LD_INT 1
12662: ARRAY
12663: PPUSH
12664: LD_VAR 0 1
12668: PUSH
12669: LD_INT 2
12671: ARRAY
12672: PPUSH
12673: CALL_OW 428
12677: NOT
12678: IFFALSE 12544
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12680: LD_VAR 0 1
12684: PUSH
12685: LD_INT 1
12687: ARRAY
12688: PPUSH
12689: LD_VAR 0 1
12693: PUSH
12694: LD_INT 2
12696: ARRAY
12697: PPUSH
12698: CALL_OW 494
// wait ( 30 ) ;
12702: LD_INT 30
12704: PPUSH
12705: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12709: LD_INT 4
12711: PPUSH
12712: LD_EXP 44
12716: PUSH
12717: LD_INT 2
12719: ARRAY
12720: PPUSH
12721: LD_VAR 0 1
12725: PUSH
12726: LD_INT 1
12728: ARRAY
12729: PPUSH
12730: LD_VAR 0 1
12734: PUSH
12735: LD_INT 2
12737: ARRAY
12738: PPUSH
12739: LD_INT 0
12741: PPUSH
12742: CALL_OW 58
// end ; enable ;
12746: ENABLE
// end ;
12747: PPOPN 2
12749: END
// every 0 0$5 marked 7 do var hex , un ;
12750: GO 12752
12752: DISABLE
12753: LD_INT 0
12755: PPUSH
12756: PPUSH
// begin if GetTag ( 209 ) then
12757: LD_INT 209
12759: PPUSH
12760: CALL_OW 110
12764: IFFALSE 12803
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12766: LD_ADDR_VAR 0 1
12770: PUSH
12771: LD_INT 213
12773: PPUSH
12774: CALL_OW 110
12778: PPUSH
12779: CALL_OW 250
12783: PUSH
12784: LD_INT 213
12786: PPUSH
12787: CALL_OW 110
12791: PPUSH
12792: CALL_OW 251
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: ST_TO_ADDR
12801: GO 12822
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
12803: LD_ADDR_VAR 0 1
12807: PUSH
12808: LD_EXP 44
12812: PUSH
12813: LD_INT 3
12815: ARRAY
12816: PPUSH
12817: CALL_OW 469
12821: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12822: LD_VAR 0 1
12826: PUSH
12827: LD_INT 1
12829: ARRAY
12830: PPUSH
12831: LD_VAR 0 1
12835: PUSH
12836: LD_INT 2
12838: ARRAY
12839: PPUSH
12840: LD_INT 16
12842: PPUSH
12843: CALL_OW 309
12847: NOT
12848: IFFALSE 13193
// begin wait ( 4 4$0 ) ;
12850: LD_INT 8400
12852: PPUSH
12853: CALL_OW 67
// if GetTag ( 209 ) then
12857: LD_INT 209
12859: PPUSH
12860: CALL_OW 110
12864: IFFALSE 12911
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 3 ] ) ;
12866: LD_INT 213
12868: PPUSH
12869: CALL_OW 110
12873: PPUSH
12874: LD_INT 4
12876: PPUSH
12877: LD_EXP 44
12881: PUSH
12882: LD_INT 3
12884: ARRAY
12885: NEG
12886: PPUSH
12887: CALL_OW 290
// SetTag ( 209 , 0 ) ;
12891: LD_INT 209
12893: PPUSH
12894: LD_INT 0
12896: PPUSH
12897: CALL_OW 109
// SetTag ( 213 , 0 ) ;
12901: LD_INT 213
12903: PPUSH
12904: LD_INT 0
12906: PPUSH
12907: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 3 ] ) ;
12911: LD_ADDR_VAR 0 1
12915: PUSH
12916: LD_EXP 44
12920: PUSH
12921: LD_INT 3
12923: ARRAY
12924: PPUSH
12925: CALL_OW 469
12929: ST_TO_ADDR
// if not hex then
12930: LD_VAR 0 1
12934: NOT
12935: IFFALSE 12972
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
12937: LD_ADDR_VAR 0 1
12941: PUSH
12942: LD_INT 13
12944: PPUSH
12945: CALL_OW 110
12949: PPUSH
12950: CALL_OW 250
12954: PUSH
12955: LD_INT 13
12957: PPUSH
12958: CALL_OW 110
12962: PPUSH
12963: CALL_OW 251
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: ST_TO_ADDR
// DestroyArtefact ( hex , 3 ) ;
12972: LD_VAR 0 1
12976: PPUSH
12977: LD_INT 3
12979: PPUSH
12980: CALL 11613 0 2
// wait ( 5 ) ;
12984: LD_INT 5
12986: PPUSH
12987: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12991: LD_ADDR_VAR 0 1
12995: PUSH
12996: LD_INT 16
12998: PPUSH
12999: LD_INT 0
13001: PPUSH
13002: CALL_OW 16
13006: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13007: LD_ADDR_VAR 0 2
13011: PUSH
13012: LD_VAR 0 1
13016: PUSH
13017: LD_INT 1
13019: ARRAY
13020: PPUSH
13021: LD_VAR 0 1
13025: PUSH
13026: LD_INT 2
13028: ARRAY
13029: PPUSH
13030: CALL_OW 428
13034: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
13035: LD_VAR 0 2
13039: PUSH
13040: LD_INT 0
13042: GREATER
13043: PUSH
13044: LD_VAR 0 2
13048: PPUSH
13049: CALL_OW 247
13053: PUSH
13054: LD_INT 3
13056: EQUAL
13057: AND
13058: IFFALSE 13102
// begin KillUnit ( un ) ;
13060: LD_VAR 0 2
13064: PPUSH
13065: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
13069: LD_VAR 0 1
13073: PUSH
13074: LD_INT 1
13076: ARRAY
13077: PPUSH
13078: LD_VAR 0 1
13082: PUSH
13083: LD_INT 2
13085: ARRAY
13086: PPUSH
13087: CALL_OW 428
13091: IFFALSE 13102
// wait ( 10 ) ;
13093: LD_INT 10
13095: PPUSH
13096: CALL_OW 67
13100: GO 13069
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13102: LD_VAR 0 1
13106: PUSH
13107: LD_INT 1
13109: ARRAY
13110: PPUSH
13111: LD_VAR 0 1
13115: PUSH
13116: LD_INT 2
13118: ARRAY
13119: PPUSH
13120: CALL_OW 428
13124: NOT
13125: IFFALSE 12991
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13127: LD_VAR 0 1
13131: PUSH
13132: LD_INT 1
13134: ARRAY
13135: PPUSH
13136: LD_VAR 0 1
13140: PUSH
13141: LD_INT 2
13143: ARRAY
13144: PPUSH
13145: CALL_OW 494
// wait ( 30 ) ;
13149: LD_INT 30
13151: PPUSH
13152: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13156: LD_INT 4
13158: PPUSH
13159: LD_EXP 44
13163: PUSH
13164: LD_INT 3
13166: ARRAY
13167: PPUSH
13168: LD_VAR 0 1
13172: PUSH
13173: LD_INT 1
13175: ARRAY
13176: PPUSH
13177: LD_VAR 0 1
13181: PUSH
13182: LD_INT 2
13184: ARRAY
13185: PPUSH
13186: LD_INT 0
13188: PPUSH
13189: CALL_OW 58
// end ; enable ;
13193: ENABLE
// end ; end_of_file
13194: PPOPN 2
13196: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13197: LD_INT 0
13199: PPUSH
13200: PPUSH
// for un in battle_flags_id do
13201: LD_ADDR_VAR 0 2
13205: PUSH
13206: LD_EXP 33
13210: PUSH
13211: FOR_IN
13212: IFFALSE 13287
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13214: LD_VAR 0 2
13218: PPUSH
13219: LD_INT 1
13221: PUSH
13222: LD_LOC 12
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 2
13233: PUSH
13234: LD_LOC 12
13238: PUSH
13239: LD_INT 2
13241: DIV
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 3
13249: PUSH
13250: LD_LOC 12
13254: PUSH
13255: LD_INT 5
13257: DIV
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 20
13265: PUSH
13266: LD_LOC 12
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: PPUSH
13281: CALL_OW 423
13285: GO 13211
13287: POP
13288: POP
// end ;
13289: LD_VAR 0 1
13293: RET
// every 0 0$0.1 do var un ;
13294: GO 13296
13296: DISABLE
13297: LD_INT 0
13299: PPUSH
// begin if not def_morale_flags then
13300: LD_EXP 56
13304: NOT
13305: IFFALSE 13309
// exit ;
13307: GO 13386
// if not morale_decreasing_time then
13309: LD_EXP 14
13313: NOT
13314: IFFALSE 13318
// exit ;
13316: GO 13386
// strength = 100 ;
13318: LD_ADDR_LOC 12
13322: PUSH
13323: LD_INT 100
13325: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13326: LD_EXP 14
13330: PPUSH
13331: CALL_OW 67
// strength := strength - 1 ;
13335: LD_ADDR_LOC 12
13339: PUSH
13340: LD_LOC 12
13344: PUSH
13345: LD_INT 1
13347: MINUS
13348: ST_TO_ADDR
// Update_Flags ;
13349: CALL 13197 0 0
// until not strength ;
13353: LD_LOC 12
13357: NOT
13358: IFFALSE 13326
// for un in battle_flags_id do
13360: LD_ADDR_VAR 0 1
13364: PUSH
13365: LD_EXP 33
13369: PUSH
13370: FOR_IN
13371: IFFALSE 13384
// KillBattleFlag ( un ) ;
13373: LD_VAR 0 1
13377: PPUSH
13378: CALL_OW 419
13382: GO 13370
13384: POP
13385: POP
// end ; end_of_file
13386: PPOPN 1
13388: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13389: LD_INT 0
13391: PPUSH
13392: PPUSH
// if ( not IAmSpec ) then
13393: CALL_OW 531
13397: NOT
13398: IFFALSE 13414
// Result := Limits_Info ^  ;
13400: LD_ADDR_VAR 0 1
13404: PUSH
13405: LD_LOC 24
13409: PUSH
13410: LD_STRING 
13412: ADD
13413: ST_TO_ADDR
// for i := 1 to 8 do
13414: LD_ADDR_VAR 0 2
13418: PUSH
13419: DOUBLE
13420: LD_INT 1
13422: DEC
13423: ST_TO_ADDR
13424: LD_INT 8
13426: PUSH
13427: FOR_TO
13428: IFFALSE 13473
// if Cheaters [ i ] then
13430: LD_LOC 25
13434: PUSH
13435: LD_VAR 0 2
13439: ARRAY
13440: IFFALSE 13471
// Result := Result ^ [ #Cheater , i , i ] ;
13442: LD_ADDR_VAR 0 1
13446: PUSH
13447: LD_VAR 0 1
13451: PUSH
13452: LD_STRING #Cheater
13454: PUSH
13455: LD_VAR 0 2
13459: PUSH
13460: LD_VAR 0 2
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: ADD
13470: ST_TO_ADDR
13471: GO 13427
13473: POP
13474: POP
// end ;
13475: LD_VAR 0 1
13479: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
13480: LD_INT 0
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
13486: PPUSH
// case Game_Type of 10 :
13487: LD_EXP 46
13491: PUSH
13492: LD_INT 10
13494: DOUBLE
13495: EQUAL
13496: IFTRUE 13500
13498: GO 13511
13500: POP
// def_game_rules := 1 ; 11 :
13501: LD_ADDR_EXP 47
13505: PUSH
13506: LD_INT 1
13508: ST_TO_ADDR
13509: GO 13531
13511: LD_INT 11
13513: DOUBLE
13514: EQUAL
13515: IFTRUE 13519
13517: GO 13530
13519: POP
// def_game_rules := 3 ; end ;
13520: LD_ADDR_EXP 47
13524: PUSH
13525: LD_INT 3
13527: ST_TO_ADDR
13528: GO 13531
13530: POP
// case def_game_rules of 0 :
13531: LD_EXP 47
13535: PUSH
13536: LD_INT 0
13538: DOUBLE
13539: EQUAL
13540: IFTRUE 13544
13542: GO 13549
13544: POP
// exit ; 1 :
13545: GO 15607
13547: GO 15507
13549: LD_INT 1
13551: DOUBLE
13552: EQUAL
13553: IFTRUE 13557
13555: GO 13773
13557: POP
// begin def_base_level := 2 ;
13558: LD_ADDR_EXP 48
13562: PUSH
13563: LD_INT 2
13565: ST_TO_ADDR
// def_amount_of_people := 2 ;
13566: LD_ADDR_EXP 49
13570: PUSH
13571: LD_INT 2
13573: ST_TO_ADDR
// def_skill_level := 1 ;
13574: LD_ADDR_EXP 50
13578: PUSH
13579: LD_INT 1
13581: ST_TO_ADDR
// def_starting_resources := 2 ;
13582: LD_ADDR_EXP 51
13586: PUSH
13587: LD_INT 2
13589: ST_TO_ADDR
// def_shipments_density := 1 ;
13590: LD_ADDR_EXP 52
13594: PUSH
13595: LD_INT 1
13597: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13598: LD_ADDR_EXP 53
13602: PUSH
13603: LD_INT 0
13605: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13606: LD_ADDR_EXP 54
13610: PUSH
13611: LD_INT 1
13613: ST_TO_ADDR
// def_shared_vision := 1 ;
13614: LD_ADDR_EXP 55
13618: PUSH
13619: LD_INT 1
13621: ST_TO_ADDR
// def_morale_flags := 3 ;
13622: LD_ADDR_EXP 56
13626: PUSH
13627: LD_INT 3
13629: ST_TO_ADDR
// def_siberite_detection := 1 ;
13630: LD_ADDR_EXP 57
13634: PUSH
13635: LD_INT 1
13637: ST_TO_ADDR
// def_people_respawning := 1 ;
13638: LD_ADDR_EXP 58
13642: PUSH
13643: LD_INT 1
13645: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13646: LD_ADDR_EXP 59
13650: PUSH
13651: LD_INT 1
13653: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13654: LD_ADDR_EXP 60
13658: PUSH
13659: LD_INT 0
13661: ST_TO_ADDR
// def_builduptime := 2 ;
13662: LD_ADDR_EXP 61
13666: PUSH
13667: LD_INT 2
13669: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13670: LD_ADDR_VAR 0 2
13674: PUSH
13675: EMPTY
13676: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13677: LD_ADDR_VAR 0 3
13681: PUSH
13682: EMPTY
13683: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13684: LD_ADDR_LOC 19
13688: PUSH
13689: EMPTY
13690: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13691: LD_ADDR_LOC 20
13695: PUSH
13696: EMPTY
13697: ST_TO_ADDR
// Banned_Controls := [ ] ;
13698: LD_ADDR_LOC 21
13702: PUSH
13703: EMPTY
13704: ST_TO_ADDR
// Banned_Engines := [ ] ;
13705: LD_ADDR_LOC 22
13709: PUSH
13710: EMPTY
13711: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13712: LD_ADDR_LOC 17
13716: PUSH
13717: LD_INT 37
13719: PUSH
13720: EMPTY
13721: LIST
13722: PUSH
13723: LD_INT 4
13725: PUSH
13726: LD_INT 5
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 31
13735: PUSH
13736: LD_INT 32
13738: PUSH
13739: LD_INT 33
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
13752: LD_ADDR_LOC 18
13756: PUSH
13757: LD_INT 2
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: LD_INT 4
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: ST_TO_ADDR
// end ; 2 :
13771: GO 15507
13773: LD_INT 2
13775: DOUBLE
13776: EQUAL
13777: IFTRUE 13781
13779: GO 13990
13781: POP
// begin def_base_level := 1 ;
13782: LD_ADDR_EXP 48
13786: PUSH
13787: LD_INT 1
13789: ST_TO_ADDR
// def_amount_of_people := 2 ;
13790: LD_ADDR_EXP 49
13794: PUSH
13795: LD_INT 2
13797: ST_TO_ADDR
// def_skill_level := 3 ;
13798: LD_ADDR_EXP 50
13802: PUSH
13803: LD_INT 3
13805: ST_TO_ADDR
// def_starting_resources := 3 ;
13806: LD_ADDR_EXP 51
13810: PUSH
13811: LD_INT 3
13813: ST_TO_ADDR
// def_shipments_density := 2 ;
13814: LD_ADDR_EXP 52
13818: PUSH
13819: LD_INT 2
13821: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13822: LD_ADDR_EXP 53
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13830: LD_ADDR_EXP 54
13834: PUSH
13835: LD_INT 2
13837: ST_TO_ADDR
// def_shared_vision := 1 ;
13838: LD_ADDR_EXP 55
13842: PUSH
13843: LD_INT 1
13845: ST_TO_ADDR
// def_morale_flags := 0 ;
13846: LD_ADDR_EXP 56
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// def_siberite_detection := 1 ;
13854: LD_ADDR_EXP 57
13858: PUSH
13859: LD_INT 1
13861: ST_TO_ADDR
// def_people_respawning := 0 ;
13862: LD_ADDR_EXP 58
13866: PUSH
13867: LD_INT 0
13869: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13870: LD_ADDR_EXP 59
13874: PUSH
13875: LD_INT 0
13877: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13878: LD_ADDR_EXP 60
13882: PUSH
13883: LD_INT 0
13885: ST_TO_ADDR
// def_builduptime := 2 ;
13886: LD_ADDR_EXP 61
13890: PUSH
13891: LD_INT 2
13893: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13894: LD_ADDR_VAR 0 2
13898: PUSH
13899: LD_INT 1
13901: PUSH
13902: EMPTY
13903: LIST
13904: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13905: LD_ADDR_VAR 0 3
13909: PUSH
13910: EMPTY
13911: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13912: LD_ADDR_LOC 19
13916: PUSH
13917: EMPTY
13918: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13919: LD_ADDR_LOC 20
13923: PUSH
13924: EMPTY
13925: ST_TO_ADDR
// Banned_Controls := [ ] ;
13926: LD_ADDR_LOC 21
13930: PUSH
13931: EMPTY
13932: ST_TO_ADDR
// Banned_Engines := [ ] ;
13933: LD_ADDR_LOC 22
13937: PUSH
13938: EMPTY
13939: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13940: LD_ADDR_LOC 17
13944: PUSH
13945: LD_INT 4
13947: PUSH
13948: LD_INT 5
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 31
13957: PUSH
13958: LD_INT 32
13960: PUSH
13961: LD_INT 33
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: LIST
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
13973: LD_ADDR_LOC 18
13977: PUSH
13978: LD_INT 1
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: ST_TO_ADDR
// end ; 3 :
13988: GO 15507
13990: LD_INT 3
13992: DOUBLE
13993: EQUAL
13994: IFTRUE 13998
13996: GO 14241
13998: POP
// begin def_base_level := 1 ;
13999: LD_ADDR_EXP 48
14003: PUSH
14004: LD_INT 1
14006: ST_TO_ADDR
// def_amount_of_people := 2 ;
14007: LD_ADDR_EXP 49
14011: PUSH
14012: LD_INT 2
14014: ST_TO_ADDR
// def_skill_level := 3 ;
14015: LD_ADDR_EXP 50
14019: PUSH
14020: LD_INT 3
14022: ST_TO_ADDR
// def_starting_resources := 3 ;
14023: LD_ADDR_EXP 51
14027: PUSH
14028: LD_INT 3
14030: ST_TO_ADDR
// def_shipments_density := 1 ;
14031: LD_ADDR_EXP 52
14035: PUSH
14036: LD_INT 1
14038: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14039: LD_ADDR_EXP 53
14043: PUSH
14044: LD_INT 0
14046: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14047: LD_ADDR_EXP 54
14051: PUSH
14052: LD_INT 1
14054: ST_TO_ADDR
// def_shared_vision := 1 ;
14055: LD_ADDR_EXP 55
14059: PUSH
14060: LD_INT 1
14062: ST_TO_ADDR
// def_morale_flags := 0 ;
14063: LD_ADDR_EXP 56
14067: PUSH
14068: LD_INT 0
14070: ST_TO_ADDR
// def_siberite_detection := 1 ;
14071: LD_ADDR_EXP 57
14075: PUSH
14076: LD_INT 1
14078: ST_TO_ADDR
// def_people_respawning := 0 ;
14079: LD_ADDR_EXP 58
14083: PUSH
14084: LD_INT 0
14086: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14087: LD_ADDR_EXP 59
14091: PUSH
14092: LD_INT 2
14094: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14095: LD_ADDR_EXP 60
14099: PUSH
14100: LD_INT 0
14102: ST_TO_ADDR
// def_builduptime := 1 ;
14103: LD_ADDR_EXP 61
14107: PUSH
14108: LD_INT 1
14110: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14111: LD_ADDR_VAR 0 2
14115: PUSH
14116: LD_INT 23
14118: PUSH
14119: EMPTY
14120: LIST
14121: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14122: LD_ADDR_VAR 0 3
14126: PUSH
14127: LD_INT 2
14129: PUSH
14130: LD_INT 37
14132: PUSH
14133: LD_INT 32
14135: PUSH
14136: LD_INT 33
14138: PUSH
14139: LD_INT 36
14141: PUSH
14142: LD_INT 16
14144: PUSH
14145: LD_INT 23
14147: PUSH
14148: LD_INT 21
14150: PUSH
14151: LD_INT 18
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_INT 20
14159: PUSH
14160: LD_INT 19
14162: PUSH
14163: LD_INT 25
14165: PUSH
14166: LD_INT 17
14168: PUSH
14169: LD_INT 24
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14189: LD_ADDR_LOC 19
14193: PUSH
14194: EMPTY
14195: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14196: LD_ADDR_LOC 20
14200: PUSH
14201: EMPTY
14202: ST_TO_ADDR
// Banned_Controls := [ ] ;
14203: LD_ADDR_LOC 21
14207: PUSH
14208: EMPTY
14209: ST_TO_ADDR
// Banned_Engines := [ ] ;
14210: LD_ADDR_LOC 22
14214: PUSH
14215: EMPTY
14216: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14217: LD_ADDR_LOC 17
14221: PUSH
14222: EMPTY
14223: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14224: LD_ADDR_LOC 18
14228: PUSH
14229: EMPTY
14230: ST_TO_ADDR
// No_Mechs := true ;
14231: LD_ADDR_EXP 62
14235: PUSH
14236: LD_INT 1
14238: ST_TO_ADDR
// end ; 4 :
14239: GO 15507
14241: LD_INT 4
14243: DOUBLE
14244: EQUAL
14245: IFTRUE 14249
14247: GO 14424
14249: POP
// begin def_base_level := 1 ;
14250: LD_ADDR_EXP 48
14254: PUSH
14255: LD_INT 1
14257: ST_TO_ADDR
// def_amount_of_people := 2 ;
14258: LD_ADDR_EXP 49
14262: PUSH
14263: LD_INT 2
14265: ST_TO_ADDR
// def_skill_level := 3 ;
14266: LD_ADDR_EXP 50
14270: PUSH
14271: LD_INT 3
14273: ST_TO_ADDR
// def_starting_resources := 3 ;
14274: LD_ADDR_EXP 51
14278: PUSH
14279: LD_INT 3
14281: ST_TO_ADDR
// def_shipments_density := 2 ;
14282: LD_ADDR_EXP 52
14286: PUSH
14287: LD_INT 2
14289: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14290: LD_ADDR_EXP 53
14294: PUSH
14295: LD_INT 1
14297: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14298: LD_ADDR_EXP 54
14302: PUSH
14303: LD_INT 2
14305: ST_TO_ADDR
// def_shared_vision := 1 ;
14306: LD_ADDR_EXP 55
14310: PUSH
14311: LD_INT 1
14313: ST_TO_ADDR
// def_morale_flags := 0 ;
14314: LD_ADDR_EXP 56
14318: PUSH
14319: LD_INT 0
14321: ST_TO_ADDR
// def_siberite_detection := 1 ;
14322: LD_ADDR_EXP 57
14326: PUSH
14327: LD_INT 1
14329: ST_TO_ADDR
// def_people_respawning := 0 ;
14330: LD_ADDR_EXP 58
14334: PUSH
14335: LD_INT 0
14337: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14338: LD_ADDR_EXP 59
14342: PUSH
14343: LD_INT 0
14345: ST_TO_ADDR
// def_siberite_bomb := 1 ;
14346: LD_ADDR_EXP 60
14350: PUSH
14351: LD_INT 1
14353: ST_TO_ADDR
// def_builduptime := 3 ;
14354: LD_ADDR_EXP 61
14358: PUSH
14359: LD_INT 3
14361: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14362: LD_ADDR_VAR 0 2
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14373: LD_ADDR_VAR 0 3
14377: PUSH
14378: EMPTY
14379: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14380: LD_ADDR_LOC 19
14384: PUSH
14385: EMPTY
14386: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14387: LD_ADDR_LOC 20
14391: PUSH
14392: EMPTY
14393: ST_TO_ADDR
// Banned_Controls := [ ] ;
14394: LD_ADDR_LOC 21
14398: PUSH
14399: EMPTY
14400: ST_TO_ADDR
// Banned_Engines := [ ] ;
14401: LD_ADDR_LOC 22
14405: PUSH
14406: EMPTY
14407: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14408: LD_ADDR_LOC 17
14412: PUSH
14413: EMPTY
14414: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14415: LD_ADDR_LOC 18
14419: PUSH
14420: EMPTY
14421: ST_TO_ADDR
// end ; 5 :
14422: GO 15507
14424: LD_INT 5
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14681
14432: POP
// begin def_base_level := 0 ;
14433: LD_ADDR_EXP 48
14437: PUSH
14438: LD_INT 0
14440: ST_TO_ADDR
// def_amount_of_people := 0 ;
14441: LD_ADDR_EXP 49
14445: PUSH
14446: LD_INT 0
14448: ST_TO_ADDR
// def_skill_level := 0 ;
14449: LD_ADDR_EXP 50
14453: PUSH
14454: LD_INT 0
14456: ST_TO_ADDR
// def_starting_resources := 0 ;
14457: LD_ADDR_EXP 51
14461: PUSH
14462: LD_INT 0
14464: ST_TO_ADDR
// def_shipments_density := 0 ;
14465: LD_ADDR_EXP 52
14469: PUSH
14470: LD_INT 0
14472: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14473: LD_ADDR_EXP 53
14477: PUSH
14478: LD_INT 0
14480: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
14481: LD_ADDR_EXP 54
14485: PUSH
14486: LD_INT 0
14488: ST_TO_ADDR
// def_shared_vision := 1 ;
14489: LD_ADDR_EXP 55
14493: PUSH
14494: LD_INT 1
14496: ST_TO_ADDR
// def_morale_flags := 0 ;
14497: LD_ADDR_EXP 56
14501: PUSH
14502: LD_INT 0
14504: ST_TO_ADDR
// def_siberite_detection := 0 ;
14505: LD_ADDR_EXP 57
14509: PUSH
14510: LD_INT 0
14512: ST_TO_ADDR
// def_people_respawning := 1 ;
14513: LD_ADDR_EXP 58
14517: PUSH
14518: LD_INT 1
14520: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14521: LD_ADDR_EXP 59
14525: PUSH
14526: LD_INT 1
14528: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14529: LD_ADDR_EXP 60
14533: PUSH
14534: LD_INT 0
14536: ST_TO_ADDR
// def_builduptime := 0 ;
14537: LD_ADDR_EXP 61
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
14545: LD_ADDR_VAR 0 2
14549: PUSH
14550: LD_INT 10
14552: PUSH
14553: LD_INT 3
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
14560: LD_ADDR_VAR 0 3
14564: PUSH
14565: LD_INT 12
14567: PUSH
14568: LD_INT 11
14570: PUSH
14571: LD_INT 14
14573: PUSH
14574: LD_INT 13
14576: PUSH
14577: LD_INT 5
14579: PUSH
14580: LD_INT 24
14582: PUSH
14583: LD_INT 21
14585: PUSH
14586: LD_INT 33
14588: PUSH
14589: LD_INT 36
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
14603: LD_ADDR_LOC 19
14607: PUSH
14608: LD_INT 31
14610: PUSH
14611: EMPTY
14612: LIST
14613: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14614: LD_ADDR_LOC 20
14618: PUSH
14619: EMPTY
14620: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
14621: LD_ADDR_LOC 21
14625: PUSH
14626: LD_INT 2
14628: PUSH
14629: EMPTY
14630: LIST
14631: ST_TO_ADDR
// Banned_Engines := [ ] ;
14632: LD_ADDR_LOC 22
14636: PUSH
14637: EMPTY
14638: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
14639: LD_ADDR_LOC 17
14643: PUSH
14644: LD_INT 4
14646: PUSH
14647: EMPTY
14648: LIST
14649: PUSH
14650: LD_INT 31
14652: PUSH
14653: LD_INT 32
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
14664: LD_ADDR_LOC 18
14668: PUSH
14669: LD_INT 1
14671: PUSH
14672: LD_INT 1
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: ST_TO_ADDR
// end ; 6 :
14679: GO 15507
14681: LD_INT 6
14683: DOUBLE
14684: EQUAL
14685: IFTRUE 14689
14687: GO 14892
14689: POP
// begin def_base_level := 1 ;
14690: LD_ADDR_EXP 48
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// def_amount_of_people := 2 ;
14698: LD_ADDR_EXP 49
14702: PUSH
14703: LD_INT 2
14705: ST_TO_ADDR
// def_skill_level := 3 ;
14706: LD_ADDR_EXP 50
14710: PUSH
14711: LD_INT 3
14713: ST_TO_ADDR
// def_starting_resources := 3 ;
14714: LD_ADDR_EXP 51
14718: PUSH
14719: LD_INT 3
14721: ST_TO_ADDR
// def_shipments_density := 1 ;
14722: LD_ADDR_EXP 52
14726: PUSH
14727: LD_INT 1
14729: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14730: LD_ADDR_EXP 53
14734: PUSH
14735: LD_INT 0
14737: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14738: LD_ADDR_EXP 54
14742: PUSH
14743: LD_INT 1
14745: ST_TO_ADDR
// def_shared_vision := 1 ;
14746: LD_ADDR_EXP 55
14750: PUSH
14751: LD_INT 1
14753: ST_TO_ADDR
// def_morale_flags := 0 ;
14754: LD_ADDR_EXP 56
14758: PUSH
14759: LD_INT 0
14761: ST_TO_ADDR
// def_siberite_detection := 1 ;
14762: LD_ADDR_EXP 57
14766: PUSH
14767: LD_INT 1
14769: ST_TO_ADDR
// def_people_respawning := 2 ;
14770: LD_ADDR_EXP 58
14774: PUSH
14775: LD_INT 2
14777: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14778: LD_ADDR_EXP 59
14782: PUSH
14783: LD_INT 1
14785: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14786: LD_ADDR_EXP 60
14790: PUSH
14791: LD_INT 0
14793: ST_TO_ADDR
// def_builduptime := 1 ;
14794: LD_ADDR_EXP 61
14798: PUSH
14799: LD_INT 1
14801: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14802: LD_ADDR_VAR 0 2
14806: PUSH
14807: LD_INT 23
14809: PUSH
14810: EMPTY
14811: LIST
14812: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
14813: LD_ADDR_VAR 0 3
14817: PUSH
14818: LD_INT 2
14820: PUSH
14821: LD_INT 37
14823: PUSH
14824: LD_INT 31
14826: PUSH
14827: LD_INT 32
14829: PUSH
14830: LD_INT 33
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14840: LD_ADDR_LOC 19
14844: PUSH
14845: EMPTY
14846: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14847: LD_ADDR_LOC 20
14851: PUSH
14852: EMPTY
14853: ST_TO_ADDR
// Banned_Controls := [ ] ;
14854: LD_ADDR_LOC 21
14858: PUSH
14859: EMPTY
14860: ST_TO_ADDR
// Banned_Engines := [ ] ;
14861: LD_ADDR_LOC 22
14865: PUSH
14866: EMPTY
14867: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14868: LD_ADDR_LOC 17
14872: PUSH
14873: EMPTY
14874: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14875: LD_ADDR_LOC 18
14879: PUSH
14880: EMPTY
14881: ST_TO_ADDR
// No_Mechs := true ;
14882: LD_ADDR_EXP 62
14886: PUSH
14887: LD_INT 1
14889: ST_TO_ADDR
// end ; 7 :
14890: GO 15507
14892: LD_INT 7
14894: DOUBLE
14895: EQUAL
14896: IFTRUE 14900
14898: GO 15098
14900: POP
// begin def_base_level := 1 ;
14901: LD_ADDR_EXP 48
14905: PUSH
14906: LD_INT 1
14908: ST_TO_ADDR
// def_amount_of_people := 2 ;
14909: LD_ADDR_EXP 49
14913: PUSH
14914: LD_INT 2
14916: ST_TO_ADDR
// def_skill_level := 3 ;
14917: LD_ADDR_EXP 50
14921: PUSH
14922: LD_INT 3
14924: ST_TO_ADDR
// def_starting_resources := 3 ;
14925: LD_ADDR_EXP 51
14929: PUSH
14930: LD_INT 3
14932: ST_TO_ADDR
// def_shipments_density := 1 ;
14933: LD_ADDR_EXP 52
14937: PUSH
14938: LD_INT 1
14940: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14941: LD_ADDR_EXP 53
14945: PUSH
14946: LD_INT 1
14948: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14949: LD_ADDR_EXP 54
14953: PUSH
14954: LD_INT 2
14956: ST_TO_ADDR
// def_shared_vision := 1 ;
14957: LD_ADDR_EXP 55
14961: PUSH
14962: LD_INT 1
14964: ST_TO_ADDR
// def_morale_flags := 0 ;
14965: LD_ADDR_EXP 56
14969: PUSH
14970: LD_INT 0
14972: ST_TO_ADDR
// def_siberite_detection := 1 ;
14973: LD_ADDR_EXP 57
14977: PUSH
14978: LD_INT 1
14980: ST_TO_ADDR
// def_people_respawning := 0 ;
14981: LD_ADDR_EXP 58
14985: PUSH
14986: LD_INT 0
14988: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14989: LD_ADDR_EXP 59
14993: PUSH
14994: LD_INT 1
14996: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14997: LD_ADDR_EXP 60
15001: PUSH
15002: LD_INT 0
15004: ST_TO_ADDR
// def_builduptime := 3 ;
15005: LD_ADDR_EXP 61
15009: PUSH
15010: LD_INT 3
15012: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15013: LD_ADDR_VAR 0 2
15017: PUSH
15018: LD_INT 23
15020: PUSH
15021: EMPTY
15022: LIST
15023: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
15024: LD_ADDR_VAR 0 3
15028: PUSH
15029: LD_INT 37
15031: PUSH
15032: EMPTY
15033: LIST
15034: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15035: LD_ADDR_LOC 19
15039: PUSH
15040: EMPTY
15041: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15042: LD_ADDR_LOC 20
15046: PUSH
15047: EMPTY
15048: ST_TO_ADDR
// Banned_Controls := [ ] ;
15049: LD_ADDR_LOC 21
15053: PUSH
15054: EMPTY
15055: ST_TO_ADDR
// Banned_Engines := [ ] ;
15056: LD_ADDR_LOC 22
15060: PUSH
15061: EMPTY
15062: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15063: LD_ADDR_LOC 17
15067: PUSH
15068: LD_INT 31
15070: PUSH
15071: LD_INT 32
15073: PUSH
15074: LD_INT 33
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: PUSH
15082: EMPTY
15083: LIST
15084: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
15085: LD_ADDR_LOC 18
15089: PUSH
15090: LD_INT 10
15092: PUSH
15093: EMPTY
15094: LIST
15095: ST_TO_ADDR
// end ; 8 :
15096: GO 15507
15098: LD_INT 8
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15506
15106: POP
// begin def_base_level := 0 ;
15107: LD_ADDR_EXP 48
15111: PUSH
15112: LD_INT 0
15114: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
15115: LD_ADDR_EXP 49
15119: PUSH
15120: LD_INT 0
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 12
15130: ST_TO_ADDR
// def_skill_level := 0 ;
15131: LD_ADDR_EXP 50
15135: PUSH
15136: LD_INT 0
15138: ST_TO_ADDR
// def_starting_resources := 2 ;
15139: LD_ADDR_EXP 51
15143: PUSH
15144: LD_INT 2
15146: ST_TO_ADDR
// def_shipments_density := 1 ;
15147: LD_ADDR_EXP 52
15151: PUSH
15152: LD_INT 1
15154: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15155: LD_ADDR_EXP 53
15159: PUSH
15160: LD_INT 0
15162: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15163: LD_ADDR_EXP 54
15167: PUSH
15168: LD_INT 0
15170: ST_TO_ADDR
// def_shared_vision := 1 ;
15171: LD_ADDR_EXP 55
15175: PUSH
15176: LD_INT 1
15178: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
15179: LD_ADDR_EXP 56
15183: PUSH
15184: LD_INT 0
15186: PPUSH
15187: LD_INT 2
15189: PPUSH
15190: CALL_OW 12
15194: ST_TO_ADDR
// def_siberite_detection := 0 ;
15195: LD_ADDR_EXP 57
15199: PUSH
15200: LD_INT 0
15202: ST_TO_ADDR
// def_people_respawning := 0 ;
15203: LD_ADDR_EXP 58
15207: PUSH
15208: LD_INT 0
15210: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
15211: LD_ADDR_EXP 59
15215: PUSH
15216: LD_INT 2
15218: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15219: LD_ADDR_EXP 60
15223: PUSH
15224: LD_INT 0
15226: ST_TO_ADDR
// def_builduptime := 0 ;
15227: LD_ADDR_EXP 61
15231: PUSH
15232: LD_INT 0
15234: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
15235: LD_ADDR_VAR 0 2
15239: PUSH
15240: LD_INT 23
15242: PUSH
15243: LD_INT 20
15245: PUSH
15246: LD_INT 40
15248: PUSH
15249: LD_INT 47
15251: PUSH
15252: LD_INT 46
15254: PUSH
15255: LD_INT 39
15257: PUSH
15258: LD_INT 71
15260: PUSH
15261: LD_INT 34
15263: PUSH
15264: LD_INT 41
15266: PUSH
15267: LD_INT 44
15269: PUSH
15270: LD_INT 17
15272: PUSH
15273: LD_INT 16
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
15290: LD_ADDR_VAR 0 3
15294: PUSH
15295: LD_INT 37
15297: PUSH
15298: LD_INT 5
15300: PUSH
15301: LD_INT 13
15303: PUSH
15304: LD_INT 34
15306: PUSH
15307: LD_INT 12
15309: PUSH
15310: LD_INT 15
15312: PUSH
15313: LD_INT 11
15315: PUSH
15316: LD_INT 14
15318: PUSH
15319: LD_INT 29
15321: PUSH
15322: LD_INT 30
15324: PUSH
15325: LD_INT 28
15327: PUSH
15328: LD_INT 24
15330: PUSH
15331: LD_INT 25
15333: PUSH
15334: LD_INT 20
15336: PUSH
15337: LD_INT 21
15339: PUSH
15340: LD_INT 22
15342: PUSH
15343: LD_INT 36
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15365: LD_ADDR_LOC 19
15369: PUSH
15370: EMPTY
15371: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
15372: LD_ADDR_LOC 20
15376: PUSH
15377: LD_INT 14
15379: PUSH
15380: EMPTY
15381: LIST
15382: ST_TO_ADDR
// Banned_Controls := [ ] ;
15383: LD_ADDR_LOC 21
15387: PUSH
15388: EMPTY
15389: ST_TO_ADDR
// Banned_Engines := [ ] ;
15390: LD_ADDR_LOC 22
15394: PUSH
15395: EMPTY
15396: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
15397: LD_ADDR_LOC 17
15401: PUSH
15402: LD_INT 31
15404: PUSH
15405: LD_INT 32
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 4
15414: PUSH
15415: EMPTY
15416: LIST
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
15422: LD_ADDR_LOC 18
15426: PUSH
15427: LD_INT 2
15429: PUSH
15430: LD_INT 1
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: ST_TO_ADDR
// for i := 1 to 8 do
15437: LD_ADDR_VAR 0 4
15441: PUSH
15442: DOUBLE
15443: LD_INT 1
15445: DEC
15446: ST_TO_ADDR
15447: LD_INT 8
15449: PUSH
15450: FOR_TO
15451: IFFALSE 15502
// if ( Side_Nations [ i ] = 3 ) then
15453: LD_EXP 24
15457: PUSH
15458: LD_VAR 0 4
15462: ARRAY
15463: PUSH
15464: LD_INT 3
15466: EQUAL
15467: IFFALSE 15500
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
15469: LD_ADDR_EXP 24
15473: PUSH
15474: LD_EXP 24
15478: PPUSH
15479: LD_VAR 0 4
15483: PPUSH
15484: LD_INT 1
15486: PPUSH
15487: LD_INT 2
15489: PPUSH
15490: CALL_OW 12
15494: PPUSH
15495: CALL_OW 1
15499: ST_TO_ADDR
15500: GO 15450
15502: POP
15503: POP
// end ; end ;
15504: GO 15507
15506: POP
// for i := 1 to 8 do
15507: LD_ADDR_VAR 0 4
15511: PUSH
15512: DOUBLE
15513: LD_INT 1
15515: DEC
15516: ST_TO_ADDR
15517: LD_INT 8
15519: PUSH
15520: FOR_TO
15521: IFFALSE 15605
// if Side_Positions [ i ] then
15523: LD_EXP 23
15527: PUSH
15528: LD_VAR 0 4
15532: ARRAY
15533: IFFALSE 15603
// begin for j in Unavailable_Techs do
15535: LD_ADDR_VAR 0 5
15539: PUSH
15540: LD_VAR 0 2
15544: PUSH
15545: FOR_IN
15546: IFFALSE 15567
// SetTech ( j , i , 0 ) ;
15548: LD_VAR 0 5
15552: PPUSH
15553: LD_VAR 0 4
15557: PPUSH
15558: LD_INT 0
15560: PPUSH
15561: CALL_OW 322
15565: GO 15545
15567: POP
15568: POP
// for j in Unavailable_Builds do
15569: LD_ADDR_VAR 0 5
15573: PUSH
15574: LD_VAR 0 3
15578: PUSH
15579: FOR_IN
15580: IFFALSE 15601
// SetRestrict ( j , i , 0 ) ;
15582: LD_VAR 0 5
15586: PPUSH
15587: LD_VAR 0 4
15591: PPUSH
15592: LD_INT 0
15594: PPUSH
15595: CALL_OW 324
15599: GO 15579
15601: POP
15602: POP
// end ;
15603: GO 15520
15605: POP
15606: POP
// end ;
15607: LD_VAR 0 1
15611: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
15612: LD_INT 0
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
15619: PPUSH
15620: PPUSH
// for i := 1 to Restricted_Builds do
15621: LD_ADDR_VAR 0 2
15625: PUSH
15626: DOUBLE
15627: LD_INT 1
15629: DEC
15630: ST_TO_ADDR
15631: LD_LOC 17
15635: PUSH
15636: FOR_TO
15637: IFFALSE 15947
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
15639: LD_LOC 17
15643: PUSH
15644: LD_VAR 0 2
15648: ARRAY
15649: PUSH
15650: LD_INT 1
15652: ARRAY
15653: PUSH
15654: LD_INT 31
15656: DOUBLE
15657: EQUAL
15658: IFTRUE 15674
15660: LD_INT 32
15662: DOUBLE
15663: EQUAL
15664: IFTRUE 15674
15666: LD_INT 33
15668: DOUBLE
15669: EQUAL
15670: IFTRUE 15674
15672: GO 15685
15674: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
15675: LD_ADDR_VAR 0 6
15679: PUSH
15680: LD_STRING #Turrets
15682: ST_TO_ADDR
15683: GO 15730
15685: LD_INT 4
15687: DOUBLE
15688: EQUAL
15689: IFTRUE 15699
15691: LD_INT 5
15693: DOUBLE
15694: EQUAL
15695: IFTRUE 15699
15697: GO 15710
15699: POP
// btype := #Armouries ; b_Behemoth :
15700: LD_ADDR_VAR 0 6
15704: PUSH
15705: LD_STRING #Armouries
15707: ST_TO_ADDR
15708: GO 15730
15710: LD_INT 37
15712: DOUBLE
15713: EQUAL
15714: IFTRUE 15718
15716: GO 15729
15718: POP
// btype := #Behemoths ; end ;
15719: LD_ADDR_VAR 0 6
15723: PUSH
15724: LD_STRING #Behemoths
15726: ST_TO_ADDR
15727: GO 15730
15729: POP
// list := [ ] ;
15730: LD_ADDR_VAR 0 7
15734: PUSH
15735: EMPTY
15736: ST_TO_ADDR
// for j := 1 to 8 do
15737: LD_ADDR_VAR 0 3
15741: PUSH
15742: DOUBLE
15743: LD_INT 1
15745: DEC
15746: ST_TO_ADDR
15747: LD_INT 8
15749: PUSH
15750: FOR_TO
15751: IFFALSE 15844
// if Side_Positions [ j ] then
15753: LD_EXP 23
15757: PUSH
15758: LD_VAR 0 3
15762: ARRAY
15763: IFFALSE 15842
// begin amount := 0 ;
15765: LD_ADDR_VAR 0 5
15769: PUSH
15770: LD_INT 0
15772: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
15773: LD_ADDR_VAR 0 4
15777: PUSH
15778: LD_LOC 17
15782: PUSH
15783: LD_VAR 0 2
15787: ARRAY
15788: PUSH
15789: FOR_IN
15790: IFFALSE 15838
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
15792: LD_ADDR_VAR 0 5
15796: PUSH
15797: LD_VAR 0 5
15801: PUSH
15802: LD_INT 22
15804: PUSH
15805: LD_VAR 0 3
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 30
15816: PUSH
15817: LD_VAR 0 4
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PPUSH
15830: CALL_OW 69
15834: PLUS
15835: ST_TO_ADDR
15836: GO 15789
15838: POP
15839: POP
// break ;
15840: GO 15844
// end ;
15842: GO 15750
15844: POP
15845: POP
// list := [ ] ;
15846: LD_ADDR_VAR 0 7
15850: PUSH
15851: EMPTY
15852: ST_TO_ADDR
// for j := 1 to 8 do
15853: LD_ADDR_VAR 0 3
15857: PUSH
15858: DOUBLE
15859: LD_INT 1
15861: DEC
15862: ST_TO_ADDR
15863: LD_INT 8
15865: PUSH
15866: FOR_TO
15867: IFFALSE 15887
// list := list ^ amount ;
15869: LD_ADDR_VAR 0 7
15873: PUSH
15874: LD_VAR 0 7
15878: PUSH
15879: LD_VAR 0 5
15883: ADD
15884: ST_TO_ADDR
15885: GO 15866
15887: POP
15888: POP
// Already_Built := Already_Built ^ [ list ] ;
15889: LD_ADDR_LOC 23
15893: PUSH
15894: LD_LOC 23
15898: PUSH
15899: LD_VAR 0 7
15903: PUSH
15904: EMPTY
15905: LIST
15906: ADD
15907: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15908: LD_ADDR_LOC 24
15912: PUSH
15913: LD_LOC 24
15917: PUSH
15918: LD_VAR 0 6
15922: PUSH
15923: LD_VAR 0 5
15927: PUSH
15928: LD_LOC 18
15932: PUSH
15933: LD_VAR 0 2
15937: ARRAY
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: ADD
15944: ST_TO_ADDR
// end ;
15945: GO 15636
15947: POP
15948: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15949: LD_ADDR_LOC 25
15953: PUSH
15954: LD_INT 0
15956: PUSH
15957: LD_INT 0
15959: PUSH
15960: LD_INT 0
15962: PUSH
15963: LD_INT 0
15965: PUSH
15966: LD_INT 0
15968: PUSH
15969: LD_INT 0
15971: PUSH
15972: LD_INT 0
15974: PUSH
15975: LD_INT 0
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: ST_TO_ADDR
// if Limits_Info then
15988: LD_LOC 24
15992: IFFALSE 16008
// Limits_Info := #Limits ^ Limits_Info ;
15994: LD_ADDR_LOC 24
15998: PUSH
15999: LD_STRING #Limits
16001: PUSH
16002: LD_LOC 24
16006: ADD
16007: ST_TO_ADDR
// end ;
16008: LD_VAR 0 1
16012: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
16013: LD_INT 0
16015: PPUSH
16016: PPUSH
16017: PPUSH
16018: PPUSH
// for i := 1 to Restricted_Builds do
16019: LD_ADDR_VAR 0 7
16023: PUSH
16024: DOUBLE
16025: LD_INT 1
16027: DEC
16028: ST_TO_ADDR
16029: LD_LOC 17
16033: PUSH
16034: FOR_TO
16035: IFFALSE 16458
// if BType in Restricted_Builds [ i ] then
16037: LD_VAR 0 2
16041: PUSH
16042: LD_LOC 17
16046: PUSH
16047: LD_VAR 0 7
16051: ARRAY
16052: IN
16053: IFFALSE 16456
// begin if old_side then
16055: LD_VAR 0 4
16059: IFFALSE 16185
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
16061: LD_LOC 23
16065: PUSH
16066: LD_VAR 0 7
16070: ARRAY
16071: PUSH
16072: LD_VAR 0 3
16076: ARRAY
16077: PUSH
16078: LD_VAR 0 5
16082: PLUS
16083: PUSH
16084: LD_LOC 18
16088: PUSH
16089: LD_VAR 0 7
16093: ARRAY
16094: GREATER
16095: IFFALSE 16121
// begin SetSide ( un , old_side ) ;
16097: LD_VAR 0 1
16101: PPUSH
16102: LD_VAR 0 4
16106: PPUSH
16107: CALL_OW 235
// count := 0 ;
16111: LD_ADDR_VAR 0 5
16115: PUSH
16116: LD_INT 0
16118: ST_TO_ADDR
// end else
16119: GO 16185
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
16121: LD_ADDR_LOC 23
16125: PUSH
16126: LD_LOC 23
16130: PPUSH
16131: LD_VAR 0 7
16135: PPUSH
16136: LD_LOC 23
16140: PUSH
16141: LD_VAR 0 7
16145: ARRAY
16146: PPUSH
16147: LD_VAR 0 4
16151: PPUSH
16152: LD_LOC 23
16156: PUSH
16157: LD_VAR 0 7
16161: ARRAY
16162: PUSH
16163: LD_VAR 0 4
16167: ARRAY
16168: PUSH
16169: LD_VAR 0 5
16173: MINUS
16174: PPUSH
16175: CALL_OW 1
16179: PPUSH
16180: CALL_OW 1
16184: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
16185: LD_ADDR_LOC 23
16189: PUSH
16190: LD_LOC 23
16194: PPUSH
16195: LD_VAR 0 7
16199: PPUSH
16200: LD_LOC 23
16204: PUSH
16205: LD_VAR 0 7
16209: ARRAY
16210: PPUSH
16211: LD_VAR 0 3
16215: PPUSH
16216: LD_LOC 23
16220: PUSH
16221: LD_VAR 0 7
16225: ARRAY
16226: PUSH
16227: LD_VAR 0 3
16231: ARRAY
16232: PUSH
16233: LD_VAR 0 5
16237: PLUS
16238: PPUSH
16239: CALL_OW 1
16243: PPUSH
16244: CALL_OW 1
16248: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
16249: LD_VAR 0 5
16253: PUSH
16254: LD_INT 0
16256: NONEQUAL
16257: PUSH
16258: LD_VAR 0 3
16262: PUSH
16263: LD_OWVAR 2
16267: EQUAL
16268: AND
16269: IFFALSE 16312
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
16271: LD_ADDR_LOC 24
16275: PUSH
16276: LD_LOC 24
16280: PPUSH
16281: LD_INT 3
16283: PUSH
16284: LD_VAR 0 7
16288: MUL
16289: PPUSH
16290: LD_LOC 23
16294: PUSH
16295: LD_VAR 0 7
16299: ARRAY
16300: PUSH
16301: LD_VAR 0 3
16305: ARRAY
16306: PPUSH
16307: CALL_OW 1
16311: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
16312: LD_LOC 23
16316: PUSH
16317: LD_VAR 0 7
16321: ARRAY
16322: PUSH
16323: LD_VAR 0 3
16327: ARRAY
16328: PUSH
16329: LD_LOC 18
16333: PUSH
16334: LD_VAR 0 7
16338: ARRAY
16339: GREATER
16340: IFFALSE 16367
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
16342: LD_ADDR_LOC 25
16346: PUSH
16347: LD_LOC 25
16351: PPUSH
16352: LD_VAR 0 3
16356: PPUSH
16357: LD_INT 1
16359: PPUSH
16360: CALL_OW 1
16364: ST_TO_ADDR
// end else
16365: GO 16454
// begin for j := 1 to Restricted_Builds do
16367: LD_ADDR_VAR 0 8
16371: PUSH
16372: DOUBLE
16373: LD_INT 1
16375: DEC
16376: ST_TO_ADDR
16377: LD_LOC 17
16381: PUSH
16382: FOR_TO
16383: IFFALSE 16427
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
16385: LD_LOC 23
16389: PUSH
16390: LD_VAR 0 8
16394: ARRAY
16395: PUSH
16396: LD_VAR 0 3
16400: ARRAY
16401: PUSH
16402: LD_LOC 18
16406: PUSH
16407: LD_VAR 0 8
16411: ARRAY
16412: GREATER
16413: IFFALSE 16425
// begin Is_Cheater := true ;
16415: LD_ADDR_VAR 0 9
16419: PUSH
16420: LD_INT 1
16422: ST_TO_ADDR
// break ;
16423: GO 16427
// end ;
16425: GO 16382
16427: POP
16428: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
16429: LD_ADDR_LOC 25
16433: PUSH
16434: LD_LOC 25
16438: PPUSH
16439: LD_VAR 0 3
16443: PPUSH
16444: LD_VAR 0 9
16448: PPUSH
16449: CALL_OW 1
16453: ST_TO_ADDR
// end ; break ;
16454: GO 16458
// end ;
16456: GO 16034
16458: POP
16459: POP
// end ;
16460: LD_VAR 0 6
16464: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
16465: LD_VAR 0 5
16469: PUSH
16470: LD_LOC 19
16474: IN
16475: PUSH
16476: LD_VAR 0 2
16480: PUSH
16481: LD_LOC 20
16485: IN
16486: OR
16487: PUSH
16488: LD_VAR 0 4
16492: PUSH
16493: LD_LOC 21
16497: IN
16498: OR
16499: PUSH
16500: LD_VAR 0 3
16504: PUSH
16505: LD_LOC 22
16509: IN
16510: OR
16511: IFFALSE 16522
// ComCancel ( factory ) ;
16513: LD_VAR 0 1
16517: PPUSH
16518: CALL_OW 127
// end ;
16522: PPOPN 5
16524: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
16525: LD_VAR 0 2
16529: PUSH
16530: LD_LOC 19
16534: IN
16535: IFFALSE 16546
// ComCancel ( building ) ;
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 127
// end ; end_of_file
16546: PPOPN 2
16548: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
16549: LD_INT 0
16551: PPUSH
16552: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
16553: LD_ADDR_VAR 0 2
16557: PUSH
16558: LD_STRING #Multi1x1-Time
16560: PUSH
16561: LD_OWVAR 1
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: ST_TO_ADDR
// if WaitServerStrings then
16570: LD_EXP 64
16574: IFFALSE 16592
// AllStrings = AllStrings ^ WaitServerStrings ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: LD_VAR 0 2
16585: PUSH
16586: LD_EXP 64
16590: ADD
16591: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
16592: LD_INT 0
16594: PUSH
16595: LD_EXP 18
16599: PUSH
16600: LD_OWVAR 1
16604: MINUS
16605: LESSEQUAL
16606: IFFALSE 16637
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
16608: LD_ADDR_VAR 0 2
16612: PUSH
16613: LD_VAR 0 2
16617: PUSH
16618: LD_STRING #allowedsibbomb
16620: PUSH
16621: LD_EXP 18
16625: PUSH
16626: LD_OWVAR 1
16630: MINUS
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: ADD
16636: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
16637: LD_INT 0
16639: PUSH
16640: LD_EXP 68
16644: PUSH
16645: LD_OWVAR 1
16649: MINUS
16650: LESSEQUAL
16651: IFFALSE 16682
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
16653: LD_ADDR_VAR 0 2
16657: PUSH
16658: LD_VAR 0 2
16662: PUSH
16663: LD_STRING #builduptime
16665: PUSH
16666: LD_EXP 68
16670: PUSH
16671: LD_OWVAR 1
16675: MINUS
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: ADD
16681: ST_TO_ADDR
// if ( ExtraStrings ) then
16682: LD_EXP 63
16686: IFFALSE 16708
// AllStrings := AllStrings ^  ^ ExtraStrings ;
16688: LD_ADDR_VAR 0 2
16692: PUSH
16693: LD_VAR 0 2
16697: PUSH
16698: LD_STRING 
16700: ADD
16701: PUSH
16702: LD_EXP 63
16706: ADD
16707: ST_TO_ADDR
// if Display_kings and not isSGUI then
16708: LD_EXP 65
16712: PUSH
16713: LD_OWVAR 83
16717: NOT
16718: AND
16719: IFFALSE 16737
// AllStrings = AllStrings ^ Display_kings ;
16721: LD_ADDR_VAR 0 2
16725: PUSH
16726: LD_VAR 0 2
16730: PUSH
16731: LD_EXP 65
16735: ADD
16736: ST_TO_ADDR
// if ( LimitsStrings ) then
16737: CALL 13389 0 0
16741: IFFALSE 16763
// AllStrings := AllStrings ^  ^ LimitsStrings ;
16743: LD_ADDR_VAR 0 2
16747: PUSH
16748: LD_VAR 0 2
16752: PUSH
16753: LD_STRING 
16755: ADD
16756: PUSH
16757: CALL 13389 0 0
16761: ADD
16762: ST_TO_ADDR
// Display_Strings := AllStrings ;
16763: LD_ADDR_OWVAR 47
16767: PUSH
16768: LD_VAR 0 2
16772: ST_TO_ADDR
// end ;
16773: LD_VAR 0 1
16777: RET
// every 0 0$1 do
16778: GO 16780
16780: DISABLE
// begin ShowTimer ;
16781: CALL 16549 0 0
// enable ;
16785: ENABLE
// end ; end_of_file
16786: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
16787: LD_INT 0
16789: PPUSH
16790: PPUSH
16791: PPUSH
// sharedPoints1 = [ ] ;
16792: LD_ADDR_LOC 26
16796: PUSH
16797: EMPTY
16798: ST_TO_ADDR
// sharedPoints2 = [ ] ;
16799: LD_ADDR_LOC 27
16803: PUSH
16804: EMPTY
16805: ST_TO_ADDR
// sharedPoints3 = [ ] ;
16806: LD_ADDR_LOC 28
16810: PUSH
16811: EMPTY
16812: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
16813: LD_ADDR_VAR 0 2
16817: PUSH
16818: DOUBLE
16819: LD_INT 1
16821: DEC
16822: ST_TO_ADDR
16823: LD_EXP 23
16827: PUSH
16828: LD_INT 0
16830: PLUS
16831: PUSH
16832: FOR_TO
16833: IFFALSE 16935
// begin if not Side_Positions [ i ] = 0 then
16835: LD_EXP 23
16839: PUSH
16840: LD_VAR 0 2
16844: ARRAY
16845: PUSH
16846: LD_INT 0
16848: EQUAL
16849: NOT
16850: IFFALSE 16864
// SetMultiScore ( i , 0 ) ;
16852: LD_VAR 0 2
16856: PPUSH
16857: LD_INT 0
16859: PPUSH
16860: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
16864: LD_ADDR_LOC 26
16868: PUSH
16869: LD_LOC 26
16873: PPUSH
16874: LD_VAR 0 2
16878: PPUSH
16879: LD_INT 0
16881: PPUSH
16882: CALL_OW 1
16886: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
16887: LD_ADDR_LOC 27
16891: PUSH
16892: LD_LOC 27
16896: PPUSH
16897: LD_VAR 0 2
16901: PPUSH
16902: LD_INT 0
16904: PPUSH
16905: CALL_OW 1
16909: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
16910: LD_ADDR_LOC 28
16914: PUSH
16915: LD_LOC 28
16919: PPUSH
16920: LD_VAR 0 2
16924: PPUSH
16925: LD_INT 0
16927: PPUSH
16928: CALL_OW 1
16932: ST_TO_ADDR
// end ;
16933: GO 16832
16935: POP
16936: POP
// pointGame = true ;
16937: LD_ADDR_LOC 29
16941: PUSH
16942: LD_INT 1
16944: ST_TO_ADDR
// end ;
16945: LD_VAR 0 1
16949: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
16950: LD_LOC 29
16954: IFFALSE 17365
16956: GO 16958
16958: DISABLE
16959: LD_INT 0
16961: PPUSH
16962: PPUSH
16963: PPUSH
16964: PPUSH
16965: PPUSH
16966: PPUSH
16967: PPUSH
16968: PPUSH
16969: PPUSH
16970: PPUSH
16971: PPUSH
16972: PPUSH
16973: PPUSH
// begin if isSGUI then
16974: LD_OWVAR 83
16978: IFFALSE 17365
// begin if Teams [ 1 ] then
16980: LD_EXP 22
16984: PUSH
16985: LD_INT 1
16987: ARRAY
16988: IFFALSE 17000
// red = true else
16990: LD_ADDR_VAR 0 2
16994: PUSH
16995: LD_INT 1
16997: ST_TO_ADDR
16998: GO 17008
// red = false ;
17000: LD_ADDR_VAR 0 2
17004: PUSH
17005: LD_INT 0
17007: ST_TO_ADDR
// if Teams [ 2 ] then
17008: LD_EXP 22
17012: PUSH
17013: LD_INT 2
17015: ARRAY
17016: IFFALSE 17028
// blue = true else
17018: LD_ADDR_VAR 0 3
17022: PUSH
17023: LD_INT 1
17025: ST_TO_ADDR
17026: GO 17036
// blue = false ;
17028: LD_ADDR_VAR 0 3
17032: PUSH
17033: LD_INT 0
17035: ST_TO_ADDR
// if Teams [ 3 ] then
17036: LD_EXP 22
17040: PUSH
17041: LD_INT 3
17043: ARRAY
17044: IFFALSE 17056
// yel = true else
17046: LD_ADDR_VAR 0 4
17050: PUSH
17051: LD_INT 1
17053: ST_TO_ADDR
17054: GO 17064
// yel = false ;
17056: LD_ADDR_VAR 0 4
17060: PUSH
17061: LD_INT 0
17063: ST_TO_ADDR
// if Teams [ 4 ] then
17064: LD_EXP 22
17068: PUSH
17069: LD_INT 4
17071: ARRAY
17072: IFFALSE 17084
// green = true else
17074: LD_ADDR_VAR 0 5
17078: PUSH
17079: LD_INT 1
17081: ST_TO_ADDR
17082: GO 17092
// green = false ;
17084: LD_ADDR_VAR 0 5
17088: PUSH
17089: LD_INT 0
17091: ST_TO_ADDR
// if def_public_score then
17092: LD_EXP 6
17096: IFFALSE 17108
// p = true else
17098: LD_ADDR_VAR 0 12
17102: PUSH
17103: LD_INT 1
17105: ST_TO_ADDR
17106: GO 17116
// p = false ;
17108: LD_ADDR_VAR 0 12
17112: PUSH
17113: LD_INT 0
17115: ST_TO_ADDR
// if team_game then
17116: LD_EXP 25
17120: IFFALSE 17201
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
17122: LD_ADDR_VAR 0 13
17126: PUSH
17127: LD_INT 3
17129: PUSH
17130: LD_INT 1
17132: PUSH
17133: LD_INT 2
17135: PUSH
17136: LD_INT 7
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: PUSH
17145: LD_EXP 28
17149: ARRAY
17150: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
17151: LD_ADDR_VAR 0 10
17155: PUSH
17156: LD_STRING {
17158: PUSH
17159: LD_VAR 0 3
17163: STR
17164: PUSH
17165: LD_STRING ,
17167: STR
17168: PUSH
17169: LD_VAR 0 4
17173: STR
17174: PUSH
17175: LD_STRING ,
17177: STR
17178: PUSH
17179: LD_VAR 0 2
17183: STR
17184: PUSH
17185: LD_STRING ,0,0,0,
17187: STR
17188: PUSH
17189: LD_VAR 0 5
17193: STR
17194: PUSH
17195: LD_STRING ,0}
17197: STR
17198: ST_TO_ADDR
// end else
17199: GO 17301
// begin you = your_side ;
17201: LD_ADDR_VAR 0 13
17205: PUSH
17206: LD_OWVAR 2
17210: ST_TO_ADDR
// s = { ;
17211: LD_ADDR_VAR 0 10
17215: PUSH
17216: LD_STRING {
17218: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
17219: LD_ADDR_VAR 0 1
17223: PUSH
17224: DOUBLE
17225: LD_INT 1
17227: DEC
17228: ST_TO_ADDR
17229: LD_EXP 23
17233: PUSH
17234: LD_INT 0
17236: PLUS
17237: PUSH
17238: FOR_TO
17239: IFFALSE 17285
// if side_positions [ i ] then
17241: LD_EXP 23
17245: PUSH
17246: LD_VAR 0 1
17250: ARRAY
17251: IFFALSE 17269
// s = s & 1, else
17253: LD_ADDR_VAR 0 10
17257: PUSH
17258: LD_VAR 0 10
17262: PUSH
17263: LD_STRING 1,
17265: STR
17266: ST_TO_ADDR
17267: GO 17283
// s = s & 0, ;
17269: LD_ADDR_VAR 0 10
17273: PUSH
17274: LD_VAR 0 10
17278: PUSH
17279: LD_STRING 0,
17281: STR
17282: ST_TO_ADDR
17283: GO 17238
17285: POP
17286: POP
// s = s & } ;
17287: LD_ADDR_VAR 0 10
17291: PUSH
17292: LD_VAR 0 10
17296: PUSH
17297: LD_STRING }
17299: STR
17300: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
17301: LD_STRING initScore(
17303: PUSH
17304: LD_VAR 0 10
17308: STR
17309: PUSH
17310: LD_STRING ,
17312: STR
17313: PUSH
17314: LD_VAR 0 12
17318: STR
17319: PUSH
17320: LD_STRING ,
17322: STR
17323: PUSH
17324: LD_VAR 0 13
17328: STR
17329: PUSH
17330: LD_STRING  );
17332: STR
17333: PPUSH
17334: CALL_OW 559
// if game_type = 3 then
17338: LD_EXP 46
17342: PUSH
17343: LD_INT 3
17345: EQUAL
17346: IFFALSE 17365
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
17348: LD_STRING AddScorePoints(2,2,
17350: PUSH
17351: LD_EXP 20
17355: STR
17356: PUSH
17357: LD_STRING  );
17359: STR
17360: PPUSH
17361: CALL_OW 559
// end ; end ;
17365: PPOPN 13
17367: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
17368: LD_INT 0
17370: PPUSH
17371: PPUSH
// case typ of 1 :
17372: LD_VAR 0 3
17376: PUSH
17377: LD_INT 1
17379: DOUBLE
17380: EQUAL
17381: IFTRUE 17385
17383: GO 17413
17385: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
17386: LD_ADDR_LOC 26
17390: PUSH
17391: LD_LOC 26
17395: PPUSH
17396: LD_VAR 0 1
17400: PPUSH
17401: LD_VAR 0 2
17405: PPUSH
17406: CALL_OW 1
17410: ST_TO_ADDR
17411: GO 17486
17413: LD_INT 2
17415: DOUBLE
17416: EQUAL
17417: IFTRUE 17421
17419: GO 17449
17421: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
17422: LD_ADDR_LOC 27
17426: PUSH
17427: LD_LOC 27
17431: PPUSH
17432: LD_VAR 0 1
17436: PPUSH
17437: LD_VAR 0 2
17441: PPUSH
17442: CALL_OW 1
17446: ST_TO_ADDR
17447: GO 17486
17449: LD_INT 3
17451: DOUBLE
17452: EQUAL
17453: IFTRUE 17457
17455: GO 17485
17457: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
17458: LD_ADDR_LOC 28
17462: PUSH
17463: LD_LOC 28
17467: PPUSH
17468: LD_VAR 0 1
17472: PPUSH
17473: LD_VAR 0 2
17477: PPUSH
17478: CALL_OW 1
17482: ST_TO_ADDR
17483: GO 17486
17485: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
17486: LD_ADDR_VAR 0 5
17490: PUSH
17491: LD_LOC 26
17495: PUSH
17496: LD_VAR 0 1
17500: ARRAY
17501: PUSH
17502: LD_LOC 27
17506: PUSH
17507: LD_VAR 0 1
17511: ARRAY
17512: PLUS
17513: PUSH
17514: LD_LOC 28
17518: PUSH
17519: LD_VAR 0 1
17523: ARRAY
17524: PLUS
17525: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
17526: LD_VAR 0 1
17530: PPUSH
17531: LD_VAR 0 5
17535: PPUSH
17536: CALL_OW 506
// end ; end_of_file
17540: LD_VAR 0 4
17544: RET
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
17545: LD_INT 0
17547: PPUSH
17548: PPUSH
17549: PPUSH
// BuildUpTime_Delay = 0 ;
17550: LD_ADDR_EXP 68
17554: PUSH
17555: LD_INT 0
17557: ST_TO_ADDR
// if not def_builduptime then
17558: LD_EXP 61
17562: NOT
17563: IFFALSE 17567
// exit ;
17565: GO 17750
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
17567: LD_ADDR_EXP 68
17571: PUSH
17572: LD_INT 8400
17574: PUSH
17575: LD_INT 2100
17577: PUSH
17578: LD_EXP 61
17582: MUL
17583: PLUS
17584: ST_TO_ADDR
// BuildUpTimeActive := true ;
17585: LD_ADDR_EXP 67
17589: PUSH
17590: LD_INT 1
17592: ST_TO_ADDR
// for i := 1 to 8 do
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: DOUBLE
17599: LD_INT 1
17601: DEC
17602: ST_TO_ADDR
17603: LD_INT 8
17605: PUSH
17606: FOR_TO
17607: IFFALSE 17748
// if Side_Positions [ i ] then
17609: LD_EXP 23
17613: PUSH
17614: LD_VAR 0 2
17618: ARRAY
17619: IFFALSE 17746
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
17621: LD_EXP 66
17625: PUSH
17626: LD_EXP 23
17630: PUSH
17631: LD_VAR 0 2
17635: ARRAY
17636: ARRAY
17637: PPUSH
17638: LD_INT 5
17640: PPUSH
17641: CALL_OW 424
// for j := 1 to 8 do
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: DOUBLE
17651: LD_INT 1
17653: DEC
17654: ST_TO_ADDR
17655: LD_INT 8
17657: PUSH
17658: FOR_TO
17659: IFFALSE 17744
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17661: LD_EXP 23
17665: PUSH
17666: LD_VAR 0 3
17670: ARRAY
17671: PUSH
17672: LD_EXP 21
17676: PUSH
17677: LD_VAR 0 2
17681: ARRAY
17682: PUSH
17683: LD_EXP 21
17687: PUSH
17688: LD_VAR 0 3
17692: ARRAY
17693: NONEQUAL
17694: PUSH
17695: LD_EXP 25
17699: NOT
17700: PUSH
17701: LD_VAR 0 2
17705: PUSH
17706: LD_VAR 0 3
17710: NONEQUAL
17711: AND
17712: OR
17713: AND
17714: IFFALSE 17742
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17716: LD_VAR 0 3
17720: PPUSH
17721: LD_EXP 66
17725: PUSH
17726: LD_EXP 23
17730: PUSH
17731: LD_VAR 0 2
17735: ARRAY
17736: ARRAY
17737: PPUSH
17738: CALL_OW 333
17742: GO 17658
17744: POP
17745: POP
// end ;
17746: GO 17606
17748: POP
17749: POP
// end ;
17750: LD_VAR 0 1
17754: RET
// export function EndBuildUp ; var i , j ; begin
17755: LD_INT 0
17757: PPUSH
17758: PPUSH
17759: PPUSH
// BuildUpTimeActive := false ;
17760: LD_ADDR_EXP 67
17764: PUSH
17765: LD_INT 0
17767: ST_TO_ADDR
// for i := 1 to 8 do
17768: LD_ADDR_VAR 0 2
17772: PUSH
17773: DOUBLE
17774: LD_INT 1
17776: DEC
17777: ST_TO_ADDR
17778: LD_INT 8
17780: PUSH
17781: FOR_TO
17782: IFFALSE 17923
// if Side_Positions [ i ] then
17784: LD_EXP 23
17788: PUSH
17789: LD_VAR 0 2
17793: ARRAY
17794: IFFALSE 17921
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
17796: LD_EXP 66
17800: PUSH
17801: LD_EXP 23
17805: PUSH
17806: LD_VAR 0 2
17810: ARRAY
17811: ARRAY
17812: PPUSH
17813: LD_INT 0
17815: PPUSH
17816: CALL_OW 424
// for j := 1 to 8 do
17820: LD_ADDR_VAR 0 3
17824: PUSH
17825: DOUBLE
17826: LD_INT 1
17828: DEC
17829: ST_TO_ADDR
17830: LD_INT 8
17832: PUSH
17833: FOR_TO
17834: IFFALSE 17919
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17836: LD_EXP 23
17840: PUSH
17841: LD_VAR 0 3
17845: ARRAY
17846: PUSH
17847: LD_EXP 21
17851: PUSH
17852: LD_VAR 0 2
17856: ARRAY
17857: PUSH
17858: LD_EXP 21
17862: PUSH
17863: LD_VAR 0 3
17867: ARRAY
17868: NONEQUAL
17869: PUSH
17870: LD_EXP 25
17874: NOT
17875: PUSH
17876: LD_VAR 0 2
17880: PUSH
17881: LD_VAR 0 3
17885: NONEQUAL
17886: AND
17887: OR
17888: AND
17889: IFFALSE 17917
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_EXP 66
17900: PUSH
17901: LD_EXP 23
17905: PUSH
17906: LD_VAR 0 2
17910: ARRAY
17911: ARRAY
17912: PPUSH
17913: CALL_OW 334
17917: GO 17833
17919: POP
17920: POP
// end ;
17921: GO 17781
17923: POP
17924: POP
// end ;
17925: LD_VAR 0 1
17929: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
17930: LD_EXP 67
17934: IFFALSE 18109
17936: GO 17938
17938: DISABLE
17939: LD_INT 0
17941: PPUSH
17942: PPUSH
// begin for i := 1 to 8 do
17943: LD_ADDR_VAR 0 1
17947: PUSH
17948: DOUBLE
17949: LD_INT 1
17951: DEC
17952: ST_TO_ADDR
17953: LD_INT 8
17955: PUSH
17956: FOR_TO
17957: IFFALSE 18106
// if Side_Positions [ i ] then
17959: LD_EXP 23
17963: PUSH
17964: LD_VAR 0 1
17968: ARRAY
17969: IFFALSE 18104
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
17971: LD_ADDR_VAR 0 2
17975: PUSH
17976: LD_EXP 66
17980: PUSH
17981: LD_EXP 23
17985: PUSH
17986: LD_VAR 0 1
17990: ARRAY
17991: ARRAY
17992: PPUSH
17993: LD_INT 2
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 21
18008: PUSH
18009: LD_INT 2
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 22
18023: PUSH
18024: LD_OWVAR 2
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PPUSH
18037: CALL_OW 70
18041: PUSH
18042: FOR_IN
18043: IFFALSE 18102
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
18045: LD_EXP 21
18049: PUSH
18050: LD_VAR 0 1
18054: ARRAY
18055: PUSH
18056: LD_EXP 21
18060: PUSH
18061: LD_OWVAR 2
18065: ARRAY
18066: NONEQUAL
18067: PUSH
18068: LD_EXP 25
18072: NOT
18073: PUSH
18074: LD_VAR 0 1
18078: PUSH
18079: LD_OWVAR 2
18083: NONEQUAL
18084: AND
18085: OR
18086: IFFALSE 18100
// ComMoveToArea ( un , BuildUpEscape ) ;
18088: LD_VAR 0 2
18092: PPUSH
18093: LD_INT 24
18095: PPUSH
18096: CALL_OW 113
18100: GO 18042
18102: POP
18103: POP
18104: GO 17956
18106: POP
18107: POP
// enable ;
18108: ENABLE
// end ;
18109: PPOPN 2
18111: END
// every 0 0$1 trigger def_builduptime do
18112: LD_EXP 61
18116: IFFALSE 18142
18118: GO 18120
18120: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
18121: LD_INT 8400
18123: PUSH
18124: LD_EXP 61
18128: PUSH
18129: LD_INT 2100
18131: MUL
18132: PLUS
18133: PPUSH
18134: CALL_OW 67
// EndBuildUp ;
18138: CALL 17755 0 0
// end ; end_of_file
18142: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
18143: LD_INT 0
18145: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
18146: LD_VAR 0 1
18150: PPUSH
18151: CALL_OW 255
18155: PUSH
18156: LD_VAR 0 4
18160: EQUAL
18161: IFFALSE 18180
// begin SetAchievement ( ACH_RAD ) ;
18163: LD_STRING ACH_RAD
18165: PPUSH
18166: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
18170: LD_STRING ACH_NL
18172: PPUSH
18173: LD_INT 1
18175: PPUSH
18176: CALL_OW 564
// end end ;
18180: LD_VAR 0 5
18184: RET
// export function SA_Win ( side ) ; begin
18185: LD_INT 0
18187: PPUSH
// case side of 1 :
18188: LD_VAR 0 1
18192: PUSH
18193: LD_INT 1
18195: DOUBLE
18196: EQUAL
18197: IFTRUE 18201
18199: GO 18214
18201: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18202: LD_STRING ACH_AH
18204: PPUSH
18205: LD_INT 1
18207: PPUSH
18208: CALL_OW 564
18212: GO 18377
18214: LD_INT 2
18216: DOUBLE
18217: EQUAL
18218: IFTRUE 18222
18220: GO 18235
18222: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18223: LD_STRING ACH_E
18225: PPUSH
18226: LD_INT 1
18228: PPUSH
18229: CALL_OW 564
18233: GO 18377
18235: LD_INT 3
18237: DOUBLE
18238: EQUAL
18239: IFTRUE 18243
18241: GO 18256
18243: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18244: LD_STRING ACH_OOL
18246: PPUSH
18247: LD_INT 1
18249: PPUSH
18250: CALL_OW 564
18254: GO 18377
18256: LD_INT 1
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: DOUBLE
18266: EQUAL
18267: IFTRUE 18271
18269: GO 18296
18271: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18272: LD_STRING ACH_AH
18274: PPUSH
18275: LD_REAL  5.00000000000000E-0001
18278: PPUSH
18279: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18283: LD_STRING ACH_E
18285: PPUSH
18286: LD_REAL  5.00000000000000E-0001
18289: PPUSH
18290: CALL_OW 564
// end ; [ 2 , 3 ] :
18294: GO 18377
18296: LD_INT 2
18298: PUSH
18299: LD_INT 3
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: DOUBLE
18306: EQUAL
18307: IFTRUE 18311
18309: GO 18336
18311: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18312: LD_STRING ACH_OOL
18314: PPUSH
18315: LD_REAL  5.00000000000000E-0001
18318: PPUSH
18319: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18323: LD_STRING ACH_E
18325: PPUSH
18326: LD_REAL  5.00000000000000E-0001
18329: PPUSH
18330: CALL_OW 564
// end ; [ 3 , 1 ] :
18334: GO 18377
18336: LD_INT 3
18338: PUSH
18339: LD_INT 1
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: DOUBLE
18346: EQUAL
18347: IFTRUE 18351
18349: GO 18376
18351: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18352: LD_STRING ACH_AH
18354: PPUSH
18355: LD_REAL  5.00000000000000E-0001
18358: PPUSH
18359: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18363: LD_STRING ACH_OOL
18365: PPUSH
18366: LD_REAL  5.00000000000000E-0001
18369: PPUSH
18370: CALL_OW 564
// end ; end ;
18374: GO 18377
18376: POP
// end ; end_of_file
18377: LD_VAR 0 2
18381: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
18382: LD_INT 0
18384: PPUSH
18385: PPUSH
// enable ( 98 ) ;
18386: LD_INT 98
18388: ENABLE_MARKED
// GameEnded = false ;
18389: LD_ADDR_LOC 31
18393: PUSH
18394: LD_INT 0
18396: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18397: LD_ADDR_LOC 30
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: LD_INT 0
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: LD_INT 0
18413: PUSH
18414: LD_INT 0
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: LD_INT 0
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: ST_TO_ADDR
// unfoged = false ;
18436: LD_ADDR_LOC 32
18440: PUSH
18441: LD_INT 0
18443: ST_TO_ADDR
// defeated_specs := [ ] ;
18444: LD_ADDR_LOC 33
18448: PUSH
18449: EMPTY
18450: ST_TO_ADDR
// for i = 1 to side_positions do
18451: LD_ADDR_VAR 0 2
18455: PUSH
18456: DOUBLE
18457: LD_INT 1
18459: DEC
18460: ST_TO_ADDR
18461: LD_EXP 23
18465: PUSH
18466: FOR_TO
18467: IFFALSE 18507
// if not side_positions [ i ] then
18469: LD_EXP 23
18473: PUSH
18474: LD_VAR 0 2
18478: ARRAY
18479: NOT
18480: IFFALSE 18505
// defeated = replace ( defeated , i , true ) ;
18482: LD_ADDR_LOC 30
18486: PUSH
18487: LD_LOC 30
18491: PPUSH
18492: LD_VAR 0 2
18496: PPUSH
18497: LD_INT 1
18499: PPUSH
18500: CALL_OW 1
18504: ST_TO_ADDR
18505: GO 18466
18507: POP
18508: POP
// end ;
18509: LD_VAR 0 1
18513: RET
// function CanWinLoose ; begin
18514: LD_INT 0
18516: PPUSH
// Result := true ;
18517: LD_ADDR_VAR 0 1
18521: PUSH
18522: LD_INT 1
18524: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
18525: CALL_OW 518
18529: PUSH
18530: CALL_OW 519
18534: PUSH
18535: LD_INT 0
18537: GREATER
18538: AND
18539: IFFALSE 18549
// Result := false ;
18541: LD_ADDR_VAR 0 1
18545: PUSH
18546: LD_INT 0
18548: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18549: CALL_OW 531
18553: PUSH
18554: CALL_OW 519
18558: PUSH
18559: LD_INT 1
18561: GREATER
18562: AND
18563: IFFALSE 18573
// Result := false ;
18565: LD_ADDR_VAR 0 1
18569: PUSH
18570: LD_INT 0
18572: ST_TO_ADDR
// end ;
18573: LD_VAR 0 1
18577: RET
// export function HasPower ( i ) ; var k , h ; begin
18578: LD_INT 0
18580: PPUSH
18581: PPUSH
18582: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18583: LD_VAR 0 1
18587: PPUSH
18588: CALL_OW 108
18592: NOT
18593: PUSH
18594: LD_EXP 26
18598: PUSH
18599: LD_VAR 0 1
18603: ARRAY
18604: NOT
18605: AND
18606: PUSH
18607: LD_OWVAR 4
18611: AND
18612: IFFALSE 18624
// begin result = false ;
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: LD_INT 0
18621: ST_TO_ADDR
// end else
18622: GO 18919
// case def_win_rules of 0 :
18624: LD_EXP 19
18628: PUSH
18629: LD_INT 0
18631: DOUBLE
18632: EQUAL
18633: IFTRUE 18637
18635: GO 18800
18637: POP
// if def_people_respawning then
18638: LD_EXP 58
18642: IFFALSE 18733
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
18644: LD_ADDR_VAR 0 2
18648: PUSH
18649: LD_INT 22
18651: PUSH
18652: LD_VAR 0 1
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: LD_INT 21
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 33
18676: PUSH
18677: LD_INT 3
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 33
18686: PUSH
18687: LD_INT 5
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 30
18696: PUSH
18697: LD_INT 0
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 30
18706: PUSH
18707: LD_INT 1
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PPUSH
18726: CALL_OW 69
18730: ST_TO_ADDR
18731: GO 18798
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18733: LD_ADDR_VAR 0 2
18737: PUSH
18738: LD_INT 22
18740: PUSH
18741: LD_VAR 0 1
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 2
18752: PUSH
18753: LD_INT 21
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 33
18765: PUSH
18766: LD_INT 3
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 33
18775: PUSH
18776: LD_INT 5
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PPUSH
18793: CALL_OW 69
18797: ST_TO_ADDR
18798: GO 18919
18800: LD_INT 1
18802: DOUBLE
18803: EQUAL
18804: IFTRUE 18808
18806: GO 18847
18808: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
18809: LD_ADDR_VAR 0 2
18813: PUSH
18814: LD_INT 22
18816: PUSH
18817: LD_VAR 0 1
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 21
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PPUSH
18840: CALL_OW 69
18844: ST_TO_ADDR
18845: GO 18919
18847: LD_INT 2
18849: DOUBLE
18850: EQUAL
18851: IFTRUE 18855
18853: GO 18918
18855: POP
// begin h = false ;
18856: LD_ADDR_VAR 0 4
18860: PUSH
18861: LD_INT 0
18863: ST_TO_ADDR
// for k in heroes [ i ] do
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: LD_EXP 34
18873: PUSH
18874: LD_VAR 0 1
18878: ARRAY
18879: PUSH
18880: FOR_IN
18881: IFFALSE 18904
// if IsLive ( k ) then
18883: LD_VAR 0 3
18887: PPUSH
18888: CALL_OW 300
18892: IFFALSE 18902
// h = true ;
18894: LD_ADDR_VAR 0 4
18898: PUSH
18899: LD_INT 1
18901: ST_TO_ADDR
18902: GO 18880
18904: POP
18905: POP
// Result := h ;
18906: LD_ADDR_VAR 0 2
18910: PUSH
18911: LD_VAR 0 4
18915: ST_TO_ADDR
// end ; end ;
18916: GO 18919
18918: POP
// end ;
18919: LD_VAR 0 2
18923: RET
// function AlliedSides ( i , j ) ; begin
18924: LD_INT 0
18926: PPUSH
// Result := false ;
18927: LD_ADDR_VAR 0 3
18931: PUSH
18932: LD_INT 0
18934: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
18935: LD_VAR 0 1
18939: PPUSH
18940: LD_VAR 0 2
18944: PPUSH
18945: CALL_OW 81
18949: PUSH
18950: LD_INT 1
18952: EQUAL
18953: PUSH
18954: LD_VAR 0 2
18958: PPUSH
18959: LD_VAR 0 1
18963: PPUSH
18964: CALL_OW 81
18968: PUSH
18969: LD_INT 1
18971: EQUAL
18972: AND
18973: PUSH
18974: LD_VAR 0 1
18978: PPUSH
18979: CALL_OW 83
18983: AND
18984: PUSH
18985: LD_VAR 0 2
18989: PPUSH
18990: CALL_OW 83
18994: AND
18995: IFFALSE 19005
// Result := true ;
18997: LD_ADDR_VAR 0 3
19001: PUSH
19002: LD_INT 1
19004: ST_TO_ADDR
// end ;
19005: LD_VAR 0 3
19009: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
19010: CALL 18514 0 0
19014: PUSH
19015: LD_LOC 31
19019: NOT
19020: AND
19021: IFFALSE 19037
19023: GO 19025
19025: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
19026: LD_ADDR_EXP 64
19030: PUSH
19031: LD_STRING #Player-Ended
19033: PUSH
19034: EMPTY
19035: LIST
19036: ST_TO_ADDR
19037: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
19038: CALL 18514 0 0
19042: PUSH
19043: LD_LOC 31
19047: AND
19048: IFFALSE 19057
19050: GO 19052
19052: DISABLE
// YouLostInMultiplayer ;
19053: CALL_OW 107
19057: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
19058: CALL 18514 0 0
19062: NOT
19063: PUSH
19064: CALL_OW 531
19068: NOT
19069: AND
19070: IFFALSE 19086
19072: GO 19074
19074: DISABLE
// WaitServerStrings = [ #server-wait ] ;
19075: LD_ADDR_EXP 64
19079: PUSH
19080: LD_STRING #server-wait
19082: PUSH
19083: EMPTY
19084: LIST
19085: ST_TO_ADDR
19086: END
// every 100 trigger IAmSpec do
19087: CALL_OW 531
19091: IFFALSE 19107
19093: GO 19095
19095: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
19096: LD_ADDR_EXP 64
19100: PUSH
19101: LD_STRING #Player-IAmSpec
19103: PUSH
19104: EMPTY
19105: LIST
19106: ST_TO_ADDR
19107: END
// every 100 trigger GameEnded and IAmSpec do
19108: LD_LOC 31
19112: PUSH
19113: CALL_OW 531
19117: AND
19118: IFFALSE 19127
19120: GO 19122
19122: DISABLE
// YouLostInMultiplayer ;
19123: CALL_OW 107
19127: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
19128: CALL 18514 0 0
19132: PUSH
19133: LD_LOC 31
19137: NOT
19138: AND
19139: IFFALSE 19155
19141: GO 19143
19143: DISABLE
// WaitServerStrings = [ $player-win ] ;
19144: LD_ADDR_EXP 64
19148: PUSH
19149: LD_STRING $player-win
19151: PUSH
19152: EMPTY
19153: LIST
19154: ST_TO_ADDR
19155: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
19156: CALL 18514 0 0
19160: PUSH
19161: LD_LOC 31
19165: AND
19166: IFFALSE 19190
19168: GO 19170
19170: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
19171: LD_EXP 24
19175: PUSH
19176: LD_OWVAR 7
19180: ARRAY
19181: PPUSH
19182: CALL 18185 0 1
// YouWinInMultiplayer ;
19186: CALL_OW 106
// end ;
19190: END
// every 100 trigger isEditor marked 401 do
19191: LD_OWVAR 84
19195: IFFALSE 19211
19197: GO 19199
19199: DISABLE
// Debug_Strings = [ You won ] ;
19200: LD_ADDR_OWVAR 48
19204: PUSH
19205: LD_STRING You won
19207: PUSH
19208: EMPTY
19209: LIST
19210: ST_TO_ADDR
19211: END
// every 100 trigger isEditor marked 400 do
19212: LD_OWVAR 84
19216: IFFALSE 19232
19218: GO 19220
19220: DISABLE
// Debug_Strings = [ You loss ] ;
19221: LD_ADDR_OWVAR 48
19225: PUSH
19226: LD_STRING You loss
19228: PUSH
19229: EMPTY
19230: LIST
19231: ST_TO_ADDR
19232: END
// every 100 marked 98 do var i , un ;
19233: GO 19235
19235: DISABLE
19236: LD_INT 0
19238: PPUSH
19239: PPUSH
// begin for i = 1 to side_positions do
19240: LD_ADDR_VAR 0 1
19244: PUSH
19245: DOUBLE
19246: LD_INT 1
19248: DEC
19249: ST_TO_ADDR
19250: LD_EXP 23
19254: PUSH
19255: FOR_TO
19256: IFFALSE 19343
// begin if side_positions [ i ] then
19258: LD_EXP 23
19262: PUSH
19263: LD_VAR 0 1
19267: ARRAY
19268: IFFALSE 19341
// if not HasPower ( i ) and not defeated [ i ] then
19270: LD_VAR 0 1
19274: PPUSH
19275: CALL 18578 0 1
19279: NOT
19280: PUSH
19281: LD_LOC 30
19285: PUSH
19286: LD_VAR 0 1
19290: ARRAY
19291: NOT
19292: AND
19293: IFFALSE 19341
// begin defeated = replace ( defeated , i , true ) ;
19295: LD_ADDR_LOC 30
19299: PUSH
19300: LD_LOC 30
19304: PPUSH
19305: LD_VAR 0 1
19309: PPUSH
19310: LD_INT 1
19312: PPUSH
19313: CALL_OW 1
19317: ST_TO_ADDR
// if i = mp_player_side then
19318: LD_VAR 0 1
19322: PUSH
19323: LD_OWVAR 7
19327: EQUAL
19328: IFFALSE 19341
// begin Multiplayer_Loose_Message ;
19330: CALL_OW 521
// SetPlayerSpectator ( ) ;
19334: CALL_OW 572
// enable ( 400 ) ;
19338: LD_INT 400
19340: ENABLE_MARKED
// end ; end ; end ;
19341: GO 19255
19343: POP
19344: POP
// DidGameEnd ;
19345: CALL 19360 0 0
// if not GameEnded then
19349: LD_LOC 31
19353: NOT
19354: IFFALSE 19357
// enable ;
19356: ENABLE
// end ;
19357: PPOPN 2
19359: END
// function DidGameEnd ; var i , k , enemy ; begin
19360: LD_INT 0
19362: PPUSH
19363: PPUSH
19364: PPUSH
19365: PPUSH
// enemy = [ ] ;
19366: LD_ADDR_VAR 0 4
19370: PUSH
19371: EMPTY
19372: ST_TO_ADDR
// for i = 1 to side_positions do
19373: LD_ADDR_VAR 0 2
19377: PUSH
19378: DOUBLE
19379: LD_INT 1
19381: DEC
19382: ST_TO_ADDR
19383: LD_EXP 23
19387: PUSH
19388: FOR_TO
19389: IFFALSE 19483
// if not defeated [ i ] then
19391: LD_LOC 30
19395: PUSH
19396: LD_VAR 0 2
19400: ARRAY
19401: NOT
19402: IFFALSE 19481
// for k = 1 to side_positions do
19404: LD_ADDR_VAR 0 3
19408: PUSH
19409: DOUBLE
19410: LD_INT 1
19412: DEC
19413: ST_TO_ADDR
19414: LD_EXP 23
19418: PUSH
19419: FOR_TO
19420: IFFALSE 19479
// if not defeated [ k ] then
19422: LD_LOC 30
19426: PUSH
19427: LD_VAR 0 3
19431: ARRAY
19432: NOT
19433: IFFALSE 19477
// if not AlliedSides ( i , k ) then
19435: LD_VAR 0 2
19439: PPUSH
19440: LD_VAR 0 3
19444: PPUSH
19445: CALL 18924 0 2
19449: NOT
19450: IFFALSE 19477
// enemy = enemy ^ [ i , k ] ;
19452: LD_ADDR_VAR 0 4
19456: PUSH
19457: LD_VAR 0 4
19461: PUSH
19462: LD_VAR 0 2
19466: PUSH
19467: LD_VAR 0 3
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: ADD
19476: ST_TO_ADDR
19477: GO 19419
19479: POP
19480: POP
19481: GO 19388
19483: POP
19484: POP
// if not enemy then
19485: LD_VAR 0 4
19489: NOT
19490: IFFALSE 19516
// begin GameEnded = true ;
19492: LD_ADDR_LOC 31
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
19500: LD_LOC 30
19504: PUSH
19505: LD_OWVAR 7
19509: ARRAY
19510: NOT
19511: IFFALSE 19516
// enable ( 401 ) ;
19513: LD_INT 401
19515: ENABLE_MARKED
// end ; end ;
19516: LD_VAR 0 1
19520: RET
// function unfog ; var k , friends ; begin
19521: LD_INT 0
19523: PPUSH
19524: PPUSH
19525: PPUSH
// for k = 1 to side_positions do
19526: LD_ADDR_VAR 0 2
19530: PUSH
19531: DOUBLE
19532: LD_INT 1
19534: DEC
19535: ST_TO_ADDR
19536: LD_EXP 23
19540: PUSH
19541: FOR_TO
19542: IFFALSE 19598
// if not defeated [ k ] then
19544: LD_LOC 30
19548: PUSH
19549: LD_VAR 0 2
19553: ARRAY
19554: NOT
19555: IFFALSE 19596
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
19557: LD_OWVAR 7
19561: PPUSH
19562: LD_VAR 0 2
19566: PPUSH
19567: CALL_OW 81
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: EMPTY
19576: LIST
19577: IN
19578: IFFALSE 19596
// friends = friends ^ k ;
19580: LD_ADDR_VAR 0 3
19584: PUSH
19585: LD_VAR 0 3
19589: PUSH
19590: LD_VAR 0 2
19594: ADD
19595: ST_TO_ADDR
19596: GO 19541
19598: POP
19599: POP
// if not friends then
19600: LD_VAR 0 3
19604: NOT
19605: IFFALSE 19619
// begin SetPlayerSpectator ( ) ;
19607: CALL_OW 572
// unfoged = true ;
19611: LD_ADDR_LOC 32
19615: PUSH
19616: LD_INT 1
19618: ST_TO_ADDR
// end ; end ;
19619: LD_VAR 0 1
19623: RET
// export function MakeGameEnd ; begin
19624: LD_INT 0
19626: PPUSH
// SetPlayerSpectator ( ) ;
19627: CALL_OW 572
// unfoged = true ;
19631: LD_ADDR_LOC 32
19635: PUSH
19636: LD_INT 1
19638: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19639: LD_INT 175
19641: PPUSH
19642: CALL_OW 67
// GameEnded = true ;
19646: LD_ADDR_LOC 31
19650: PUSH
19651: LD_INT 1
19653: ST_TO_ADDR
// end ;
19654: LD_VAR 0 1
19658: RET
// export function GetGameEnded ; begin
19659: LD_INT 0
19661: PPUSH
// result = GameEnded ;
19662: LD_ADDR_VAR 0 1
19666: PUSH
19667: LD_LOC 31
19671: ST_TO_ADDR
// end ; end_of_file
19672: LD_VAR 0 1
19676: RET
// var win ; export function init_kings_counting ; var i ; begin
19677: LD_INT 0
19679: PPUSH
19680: PPUSH
// mp_with_score := true ;
19681: LD_ADDR_OWVAR 14
19685: PUSH
19686: LD_INT 1
19688: ST_TO_ADDR
// ResetMultiScore ;
19689: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19693: LD_INT 19
19695: PPUSH
19696: LD_INT 1
19698: PPUSH
19699: CALL_OW 424
// enable ( 2 ) ;
19703: LD_INT 2
19705: ENABLE_MARKED
// end ;
19706: LD_VAR 0 1
19710: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19711: LD_INT 0
19713: PPUSH
19714: PPUSH
19715: PPUSH
19716: PPUSH
19717: PPUSH
19718: PPUSH
19719: PPUSH
19720: PPUSH
19721: PPUSH
// vypis := [ ] ;
19722: LD_ADDR_VAR 0 3
19726: PUSH
19727: EMPTY
19728: ST_TO_ADDR
// red = 0 ;
19729: LD_ADDR_VAR 0 5
19733: PUSH
19734: LD_INT 0
19736: ST_TO_ADDR
// blue = 0 ;
19737: LD_ADDR_VAR 0 6
19741: PUSH
19742: LD_INT 0
19744: ST_TO_ADDR
// yel = 0 ;
19745: LD_ADDR_VAR 0 7
19749: PUSH
19750: LD_INT 0
19752: ST_TO_ADDR
// green = 0 ;
19753: LD_ADDR_VAR 0 8
19757: PUSH
19758: LD_INT 0
19760: ST_TO_ADDR
// if def_public_score or isSGUI then
19761: LD_EXP 6
19765: PUSH
19766: LD_OWVAR 83
19770: OR
19771: IFFALSE 20368
// if not Team_Game then
19773: LD_EXP 25
19777: NOT
19778: IFFALSE 19900
// begin for side = 1 to Side_Positions do
19780: LD_ADDR_VAR 0 2
19784: PUSH
19785: DOUBLE
19786: LD_INT 1
19788: DEC
19789: ST_TO_ADDR
19790: LD_EXP 23
19794: PUSH
19795: FOR_TO
19796: IFFALSE 19896
// if Side_Positions [ side ] then
19798: LD_EXP 23
19802: PUSH
19803: LD_VAR 0 2
19807: ARRAY
19808: IFFALSE 19894
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
19810: LD_ADDR_VAR 0 3
19814: PUSH
19815: LD_VAR 0 3
19819: PUSH
19820: LD_STRING #KingoftheHill-Public
19822: PUSH
19823: LD_VAR 0 2
19827: PUSH
19828: LD_VAR 0 2
19832: PUSH
19833: LD_VAR 0 2
19837: PUSH
19838: LD_INT 10
19840: PLUS
19841: PPUSH
19842: CALL_OW 110
19846: PUSH
19847: LD_INT 3
19849: DIV
19850: PUSH
19851: LD_EXP 20
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: ADD
19863: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
19864: LD_INT 2
19866: PPUSH
19867: LD_VAR 0 2
19871: PPUSH
19872: LD_VAR 0 2
19876: PUSH
19877: LD_INT 10
19879: PLUS
19880: PPUSH
19881: CALL_OW 110
19885: PUSH
19886: LD_INT 3
19888: DIV
19889: PPUSH
19890: CALL 27270 0 3
// end ;
19894: GO 19795
19896: POP
19897: POP
// end else
19898: GO 20366
// begin if Teams [ 1 ] then
19900: LD_EXP 22
19904: PUSH
19905: LD_INT 1
19907: ARRAY
19908: IFFALSE 19960
// for i in Teams [ 1 ] do
19910: LD_ADDR_VAR 0 4
19914: PUSH
19915: LD_EXP 22
19919: PUSH
19920: LD_INT 1
19922: ARRAY
19923: PUSH
19924: FOR_IN
19925: IFFALSE 19958
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19927: LD_ADDR_VAR 0 5
19931: PUSH
19932: LD_VAR 0 5
19936: PUSH
19937: LD_VAR 0 4
19941: PUSH
19942: LD_INT 10
19944: PLUS
19945: PPUSH
19946: CALL_OW 110
19950: PUSH
19951: LD_INT 3
19953: DIV
19954: PLUS
19955: ST_TO_ADDR
19956: GO 19924
19958: POP
19959: POP
// if Teams [ 2 ] then
19960: LD_EXP 22
19964: PUSH
19965: LD_INT 2
19967: ARRAY
19968: IFFALSE 20020
// for i in Teams [ 2 ] do
19970: LD_ADDR_VAR 0 4
19974: PUSH
19975: LD_EXP 22
19979: PUSH
19980: LD_INT 2
19982: ARRAY
19983: PUSH
19984: FOR_IN
19985: IFFALSE 20018
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19987: LD_ADDR_VAR 0 6
19991: PUSH
19992: LD_VAR 0 6
19996: PUSH
19997: LD_VAR 0 4
20001: PUSH
20002: LD_INT 10
20004: PLUS
20005: PPUSH
20006: CALL_OW 110
20010: PUSH
20011: LD_INT 3
20013: DIV
20014: PLUS
20015: ST_TO_ADDR
20016: GO 19984
20018: POP
20019: POP
// if Teams [ 3 ] then
20020: LD_EXP 22
20024: PUSH
20025: LD_INT 3
20027: ARRAY
20028: IFFALSE 20080
// for i in Teams [ 3 ] do
20030: LD_ADDR_VAR 0 4
20034: PUSH
20035: LD_EXP 22
20039: PUSH
20040: LD_INT 3
20042: ARRAY
20043: PUSH
20044: FOR_IN
20045: IFFALSE 20078
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20047: LD_ADDR_VAR 0 7
20051: PUSH
20052: LD_VAR 0 7
20056: PUSH
20057: LD_VAR 0 4
20061: PUSH
20062: LD_INT 10
20064: PLUS
20065: PPUSH
20066: CALL_OW 110
20070: PUSH
20071: LD_INT 3
20073: DIV
20074: PLUS
20075: ST_TO_ADDR
20076: GO 20044
20078: POP
20079: POP
// if Teams [ 4 ] then
20080: LD_EXP 22
20084: PUSH
20085: LD_INT 4
20087: ARRAY
20088: IFFALSE 20140
// for i in Teams [ 4 ] do
20090: LD_ADDR_VAR 0 4
20094: PUSH
20095: LD_EXP 22
20099: PUSH
20100: LD_INT 4
20102: ARRAY
20103: PUSH
20104: FOR_IN
20105: IFFALSE 20138
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20107: LD_ADDR_VAR 0 8
20111: PUSH
20112: LD_VAR 0 8
20116: PUSH
20117: LD_VAR 0 4
20121: PUSH
20122: LD_INT 10
20124: PLUS
20125: PPUSH
20126: CALL_OW 110
20130: PUSH
20131: LD_INT 3
20133: DIV
20134: PLUS
20135: ST_TO_ADDR
20136: GO 20104
20138: POP
20139: POP
// if Teams [ 1 ] then
20140: LD_EXP 22
20144: PUSH
20145: LD_INT 1
20147: ARRAY
20148: IFFALSE 20177
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20150: LD_ADDR_VAR 0 3
20154: PUSH
20155: LD_STRING #KingoftheHill-Public-red
20157: PUSH
20158: LD_INT 3
20160: PUSH
20161: LD_VAR 0 5
20165: PUSH
20166: LD_EXP 20
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: ST_TO_ADDR
// if Teams [ 2 ] then
20177: LD_EXP 22
20181: PUSH
20182: LD_INT 2
20184: ARRAY
20185: IFFALSE 20220
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20187: LD_ADDR_VAR 0 3
20191: PUSH
20192: LD_VAR 0 3
20196: PUSH
20197: LD_STRING #KingoftheHill-Public-blue
20199: PUSH
20200: LD_INT 1
20202: PUSH
20203: LD_VAR 0 6
20207: PUSH
20208: LD_EXP 20
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: ADD
20219: ST_TO_ADDR
// if Teams [ 3 ] then
20220: LD_EXP 22
20224: PUSH
20225: LD_INT 3
20227: ARRAY
20228: IFFALSE 20263
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_VAR 0 3
20239: PUSH
20240: LD_STRING #KingoftheHill-Public-yell
20242: PUSH
20243: LD_INT 2
20245: PUSH
20246: LD_VAR 0 7
20250: PUSH
20251: LD_EXP 20
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: ADD
20262: ST_TO_ADDR
// if Teams [ 4 ] then
20263: LD_EXP 22
20267: PUSH
20268: LD_INT 4
20270: ARRAY
20271: IFFALSE 20306
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20273: LD_ADDR_VAR 0 3
20277: PUSH
20278: LD_VAR 0 3
20282: PUSH
20283: LD_STRING #KingoftheHill-Public-green
20285: PUSH
20286: LD_INT 7
20288: PUSH
20289: LD_VAR 0 8
20293: PUSH
20294: LD_EXP 20
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: ADD
20305: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
20306: LD_INT 2
20308: PPUSH
20309: LD_INT 3
20311: PPUSH
20312: LD_VAR 0 5
20316: PPUSH
20317: CALL 27270 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
20321: LD_INT 2
20323: PPUSH
20324: LD_INT 1
20326: PPUSH
20327: LD_VAR 0 6
20331: PPUSH
20332: CALL 27270 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
20336: LD_INT 2
20338: PPUSH
20339: LD_INT 2
20341: PPUSH
20342: LD_VAR 0 7
20346: PPUSH
20347: CALL 27270 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
20351: LD_INT 2
20353: PPUSH
20354: LD_INT 7
20356: PPUSH
20357: LD_VAR 0 8
20361: PPUSH
20362: CALL 27270 0 3
// end else
20366: GO 20803
// if not Team_Game then
20368: LD_EXP 25
20372: NOT
20373: IFFALSE 20431
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
20375: LD_ADDR_VAR 0 3
20379: PUSH
20380: LD_VAR 0 3
20384: PUSH
20385: LD_STRING #KingoftheHill-Private
20387: PUSH
20388: LD_OWVAR 7
20392: PUSH
20393: LD_OWVAR 7
20397: PUSH
20398: LD_VAR 0 2
20402: PUSH
20403: LD_INT 10
20405: PLUS
20406: PPUSH
20407: CALL_OW 110
20411: PUSH
20412: LD_INT 3
20414: DIV
20415: PUSH
20416: LD_EXP 20
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: ADD
20428: ST_TO_ADDR
20429: GO 20803
// begin for i in Teams [ 1 ] do
20431: LD_ADDR_VAR 0 4
20435: PUSH
20436: LD_EXP 22
20440: PUSH
20441: LD_INT 1
20443: ARRAY
20444: PUSH
20445: FOR_IN
20446: IFFALSE 20479
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20448: LD_ADDR_VAR 0 5
20452: PUSH
20453: LD_VAR 0 5
20457: PUSH
20458: LD_VAR 0 4
20462: PUSH
20463: LD_INT 10
20465: PLUS
20466: PPUSH
20467: CALL_OW 110
20471: PUSH
20472: LD_INT 3
20474: DIV
20475: PLUS
20476: ST_TO_ADDR
20477: GO 20445
20479: POP
20480: POP
// for i in Teams [ 2 ] do
20481: LD_ADDR_VAR 0 4
20485: PUSH
20486: LD_EXP 22
20490: PUSH
20491: LD_INT 2
20493: ARRAY
20494: PUSH
20495: FOR_IN
20496: IFFALSE 20529
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20498: LD_ADDR_VAR 0 6
20502: PUSH
20503: LD_VAR 0 6
20507: PUSH
20508: LD_VAR 0 4
20512: PUSH
20513: LD_INT 10
20515: PLUS
20516: PPUSH
20517: CALL_OW 110
20521: PUSH
20522: LD_INT 3
20524: DIV
20525: PLUS
20526: ST_TO_ADDR
20527: GO 20495
20529: POP
20530: POP
// for i in Teams [ 3 ] do
20531: LD_ADDR_VAR 0 4
20535: PUSH
20536: LD_EXP 22
20540: PUSH
20541: LD_INT 3
20543: ARRAY
20544: PUSH
20545: FOR_IN
20546: IFFALSE 20579
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20548: LD_ADDR_VAR 0 7
20552: PUSH
20553: LD_VAR 0 7
20557: PUSH
20558: LD_VAR 0 4
20562: PUSH
20563: LD_INT 10
20565: PLUS
20566: PPUSH
20567: CALL_OW 110
20571: PUSH
20572: LD_INT 3
20574: DIV
20575: PLUS
20576: ST_TO_ADDR
20577: GO 20545
20579: POP
20580: POP
// for i in Teams [ 4 ] do
20581: LD_ADDR_VAR 0 4
20585: PUSH
20586: LD_EXP 22
20590: PUSH
20591: LD_INT 4
20593: ARRAY
20594: PUSH
20595: FOR_IN
20596: IFFALSE 20629
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20598: LD_ADDR_VAR 0 8
20602: PUSH
20603: LD_VAR 0 8
20607: PUSH
20608: LD_VAR 0 4
20612: PUSH
20613: LD_INT 10
20615: PLUS
20616: PPUSH
20617: CALL_OW 110
20621: PUSH
20622: LD_INT 3
20624: DIV
20625: PLUS
20626: ST_TO_ADDR
20627: GO 20595
20629: POP
20630: POP
// if mp_player_side in Teams [ 1 ] then
20631: LD_OWVAR 7
20635: PUSH
20636: LD_EXP 22
20640: PUSH
20641: LD_INT 1
20643: ARRAY
20644: IN
20645: IFFALSE 20674
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20647: LD_ADDR_VAR 0 3
20651: PUSH
20652: LD_STRING #KingoftheHill-Public-red
20654: PUSH
20655: LD_INT 3
20657: PUSH
20658: LD_VAR 0 5
20662: PUSH
20663: LD_EXP 20
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
20674: LD_OWVAR 7
20678: PUSH
20679: LD_EXP 22
20683: PUSH
20684: LD_INT 2
20686: ARRAY
20687: IN
20688: IFFALSE 20717
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20690: LD_ADDR_VAR 0 3
20694: PUSH
20695: LD_STRING #KingoftheHill-Public-blue
20697: PUSH
20698: LD_INT 1
20700: PUSH
20701: LD_VAR 0 6
20705: PUSH
20706: LD_EXP 20
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
20717: LD_OWVAR 7
20721: PUSH
20722: LD_EXP 22
20726: PUSH
20727: LD_INT 3
20729: ARRAY
20730: IN
20731: IFFALSE 20760
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: LD_STRING #KingoftheHill-Public-yell
20740: PUSH
20741: LD_INT 2
20743: PUSH
20744: LD_VAR 0 7
20748: PUSH
20749: LD_EXP 20
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
20760: LD_OWVAR 7
20764: PUSH
20765: LD_EXP 22
20769: PUSH
20770: LD_INT 4
20772: ARRAY
20773: IN
20774: IFFALSE 20803
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20776: LD_ADDR_VAR 0 3
20780: PUSH
20781: LD_STRING #KingoftheHill-Public-green
20783: PUSH
20784: LD_INT 7
20786: PUSH
20787: LD_VAR 0 8
20791: PUSH
20792: LD_EXP 20
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: ST_TO_ADDR
// end ; Display_kings := vypis ;
20803: LD_ADDR_EXP 65
20807: PUSH
20808: LD_VAR 0 3
20812: ST_TO_ADDR
// end ;
20813: LD_VAR 0 1
20817: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
20818: LD_INT 0
20820: PPUSH
20821: PPUSH
20822: PPUSH
20823: PPUSH
20824: PPUSH
20825: PPUSH
20826: PPUSH
20827: PPUSH
20828: PPUSH
// side := [ ] ;
20829: LD_ADDR_VAR 0 2
20833: PUSH
20834: EMPTY
20835: ST_TO_ADDR
// red = 0 ;
20836: LD_ADDR_VAR 0 5
20840: PUSH
20841: LD_INT 0
20843: ST_TO_ADDR
// blue = 0 ;
20844: LD_ADDR_VAR 0 6
20848: PUSH
20849: LD_INT 0
20851: ST_TO_ADDR
// yel = 0 ;
20852: LD_ADDR_VAR 0 7
20856: PUSH
20857: LD_INT 0
20859: ST_TO_ADDR
// green = 0 ;
20860: LD_ADDR_VAR 0 8
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
20868: LD_ADDR_VAR 0 3
20872: PUSH
20873: LD_INT 19
20875: PPUSH
20876: LD_INT 21
20878: PUSH
20879: LD_INT 3
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 53
20888: PUSH
20889: EMPTY
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PPUSH
20896: CALL_OW 70
20900: ST_TO_ADDR
// for un in list do
20901: LD_ADDR_VAR 0 4
20905: PUSH
20906: LD_VAR 0 3
20910: PUSH
20911: FOR_IN
20912: IFFALSE 20937
// side := side union GetSide ( un ) ;
20914: LD_ADDR_VAR 0 2
20918: PUSH
20919: LD_VAR 0 2
20923: PUSH
20924: LD_VAR 0 4
20928: PPUSH
20929: CALL_OW 255
20933: UNION
20934: ST_TO_ADDR
20935: GO 20911
20937: POP
20938: POP
// if side <> 1 then
20939: LD_VAR 0 2
20943: PUSH
20944: LD_INT 1
20946: NONEQUAL
20947: IFFALSE 20951
// exit ;
20949: GO 21314
// side := side [ 1 ] ;
20951: LD_ADDR_VAR 0 2
20955: PUSH
20956: LD_VAR 0 2
20960: PUSH
20961: LD_INT 1
20963: ARRAY
20964: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
20965: LD_VAR 0 2
20969: PUSH
20970: LD_INT 10
20972: PLUS
20973: PPUSH
20974: LD_VAR 0 2
20978: PUSH
20979: LD_INT 10
20981: PLUS
20982: PPUSH
20983: CALL_OW 110
20987: PUSH
20988: LD_INT 1
20990: PLUS
20991: PPUSH
20992: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
20996: LD_VAR 0 2
21000: PPUSH
21001: LD_VAR 0 2
21005: PUSH
21006: LD_INT 10
21008: PLUS
21009: PPUSH
21010: CALL_OW 110
21014: PUSH
21015: LD_INT 3
21017: DIV
21018: PPUSH
21019: LD_INT 2
21021: PPUSH
21022: CALL 17368 0 3
// if not Team_Game then
21026: LD_EXP 25
21030: NOT
21031: IFFALSE 21314
// if GetTag ( side + 10 ) >= final_count * 3 then
21033: LD_VAR 0 2
21037: PUSH
21038: LD_INT 10
21040: PLUS
21041: PPUSH
21042: CALL_OW 110
21046: PUSH
21047: LD_EXP 20
21051: PUSH
21052: LD_INT 3
21054: MUL
21055: GREATEREQUAL
21056: IFFALSE 21063
// enable ( 3 ) else
21058: LD_INT 3
21060: ENABLE_MARKED
21061: GO 21314
// begin for i in Teams [ 1 ] do
21063: LD_ADDR_VAR 0 9
21067: PUSH
21068: LD_EXP 22
21072: PUSH
21073: LD_INT 1
21075: ARRAY
21076: PUSH
21077: FOR_IN
21078: IFFALSE 21111
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21080: LD_ADDR_VAR 0 5
21084: PUSH
21085: LD_VAR 0 5
21089: PUSH
21090: LD_VAR 0 9
21094: PUSH
21095: LD_INT 10
21097: PLUS
21098: PPUSH
21099: CALL_OW 110
21103: PUSH
21104: LD_INT 3
21106: DIV
21107: PLUS
21108: ST_TO_ADDR
21109: GO 21077
21111: POP
21112: POP
// for i in Teams [ 2 ] do
21113: LD_ADDR_VAR 0 9
21117: PUSH
21118: LD_EXP 22
21122: PUSH
21123: LD_INT 2
21125: ARRAY
21126: PUSH
21127: FOR_IN
21128: IFFALSE 21161
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21130: LD_ADDR_VAR 0 6
21134: PUSH
21135: LD_VAR 0 6
21139: PUSH
21140: LD_VAR 0 9
21144: PUSH
21145: LD_INT 10
21147: PLUS
21148: PPUSH
21149: CALL_OW 110
21153: PUSH
21154: LD_INT 3
21156: DIV
21157: PLUS
21158: ST_TO_ADDR
21159: GO 21127
21161: POP
21162: POP
// for i in Teams [ 3 ] do
21163: LD_ADDR_VAR 0 9
21167: PUSH
21168: LD_EXP 22
21172: PUSH
21173: LD_INT 3
21175: ARRAY
21176: PUSH
21177: FOR_IN
21178: IFFALSE 21211
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21180: LD_ADDR_VAR 0 7
21184: PUSH
21185: LD_VAR 0 7
21189: PUSH
21190: LD_VAR 0 9
21194: PUSH
21195: LD_INT 10
21197: PLUS
21198: PPUSH
21199: CALL_OW 110
21203: PUSH
21204: LD_INT 3
21206: DIV
21207: PLUS
21208: ST_TO_ADDR
21209: GO 21177
21211: POP
21212: POP
// for i in Teams [ 4 ] do
21213: LD_ADDR_VAR 0 9
21217: PUSH
21218: LD_EXP 22
21222: PUSH
21223: LD_INT 4
21225: ARRAY
21226: PUSH
21227: FOR_IN
21228: IFFALSE 21261
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21230: LD_ADDR_VAR 0 8
21234: PUSH
21235: LD_VAR 0 8
21239: PUSH
21240: LD_VAR 0 9
21244: PUSH
21245: LD_INT 10
21247: PLUS
21248: PPUSH
21249: CALL_OW 110
21253: PUSH
21254: LD_INT 3
21256: DIV
21257: PLUS
21258: ST_TO_ADDR
21259: GO 21227
21261: POP
21262: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
21263: LD_VAR 0 5
21267: PUSH
21268: LD_EXP 20
21272: GREATEREQUAL
21273: PUSH
21274: LD_VAR 0 6
21278: PUSH
21279: LD_EXP 20
21283: GREATEREQUAL
21284: OR
21285: PUSH
21286: LD_VAR 0 7
21290: PUSH
21291: LD_EXP 20
21295: GREATEREQUAL
21296: OR
21297: PUSH
21298: LD_VAR 0 8
21302: PUSH
21303: LD_EXP 20
21307: GREATEREQUAL
21308: OR
21309: IFFALSE 21314
// enable ( 3 ) ;
21311: LD_INT 3
21313: ENABLE_MARKED
// end ; end ;
21314: LD_VAR 0 1
21318: RET
// every 0 0$1 marked 2 do
21319: GO 21321
21321: DISABLE
// begin count_king ;
21322: CALL 20818 0 0
// show_public_points ;
21326: CALL 19711 0 0
// enable ;
21330: ENABLE
// end ;
21331: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
21332: GO 21334
21334: DISABLE
21335: LD_INT 0
21337: PPUSH
21338: PPUSH
21339: PPUSH
21340: PPUSH
21341: PPUSH
21342: PPUSH
// begin win := [ ] ;
21343: LD_ADDR_LOC 34
21347: PUSH
21348: EMPTY
21349: ST_TO_ADDR
// red = 0 ;
21350: LD_ADDR_VAR 0 2
21354: PUSH
21355: LD_INT 0
21357: ST_TO_ADDR
// blue = 0 ;
21358: LD_ADDR_VAR 0 3
21362: PUSH
21363: LD_INT 0
21365: ST_TO_ADDR
// yel = 0 ;
21366: LD_ADDR_VAR 0 4
21370: PUSH
21371: LD_INT 0
21373: ST_TO_ADDR
// green = 0 ;
21374: LD_ADDR_VAR 0 5
21378: PUSH
21379: LD_INT 0
21381: ST_TO_ADDR
// if not Team_Game then
21382: LD_EXP 25
21386: NOT
21387: IFFALSE 21464
// begin for side = 1 to 8 do
21389: LD_ADDR_VAR 0 1
21393: PUSH
21394: DOUBLE
21395: LD_INT 1
21397: DEC
21398: ST_TO_ADDR
21399: LD_INT 8
21401: PUSH
21402: FOR_TO
21403: IFFALSE 21448
// if GetTag ( side + 10 ) >= final_count * 3 then
21405: LD_VAR 0 1
21409: PUSH
21410: LD_INT 10
21412: PLUS
21413: PPUSH
21414: CALL_OW 110
21418: PUSH
21419: LD_EXP 20
21423: PUSH
21424: LD_INT 3
21426: MUL
21427: GREATEREQUAL
21428: IFFALSE 21446
// win := win ^ side ;
21430: LD_ADDR_LOC 34
21434: PUSH
21435: LD_LOC 34
21439: PUSH
21440: LD_VAR 0 1
21444: ADD
21445: ST_TO_ADDR
21446: GO 21402
21448: POP
21449: POP
// if win then
21450: LD_LOC 34
21454: IFFALSE 21461
// enable ( 4 ) else
21456: LD_INT 4
21458: ENABLE_MARKED
21459: GO 21462
// enable ;
21461: ENABLE
// end else
21462: GO 21780
// begin for i in Teams [ 1 ] do
21464: LD_ADDR_VAR 0 6
21468: PUSH
21469: LD_EXP 22
21473: PUSH
21474: LD_INT 1
21476: ARRAY
21477: PUSH
21478: FOR_IN
21479: IFFALSE 21512
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21481: LD_ADDR_VAR 0 2
21485: PUSH
21486: LD_VAR 0 2
21490: PUSH
21491: LD_VAR 0 6
21495: PUSH
21496: LD_INT 10
21498: PLUS
21499: PPUSH
21500: CALL_OW 110
21504: PUSH
21505: LD_INT 3
21507: DIV
21508: PLUS
21509: ST_TO_ADDR
21510: GO 21478
21512: POP
21513: POP
// for i in Teams [ 2 ] do
21514: LD_ADDR_VAR 0 6
21518: PUSH
21519: LD_EXP 22
21523: PUSH
21524: LD_INT 2
21526: ARRAY
21527: PUSH
21528: FOR_IN
21529: IFFALSE 21562
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21531: LD_ADDR_VAR 0 3
21535: PUSH
21536: LD_VAR 0 3
21540: PUSH
21541: LD_VAR 0 6
21545: PUSH
21546: LD_INT 10
21548: PLUS
21549: PPUSH
21550: CALL_OW 110
21554: PUSH
21555: LD_INT 3
21557: DIV
21558: PLUS
21559: ST_TO_ADDR
21560: GO 21528
21562: POP
21563: POP
// for i in Teams [ 3 ] do
21564: LD_ADDR_VAR 0 6
21568: PUSH
21569: LD_EXP 22
21573: PUSH
21574: LD_INT 3
21576: ARRAY
21577: PUSH
21578: FOR_IN
21579: IFFALSE 21612
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21581: LD_ADDR_VAR 0 4
21585: PUSH
21586: LD_VAR 0 4
21590: PUSH
21591: LD_VAR 0 6
21595: PUSH
21596: LD_INT 10
21598: PLUS
21599: PPUSH
21600: CALL_OW 110
21604: PUSH
21605: LD_INT 3
21607: DIV
21608: PLUS
21609: ST_TO_ADDR
21610: GO 21578
21612: POP
21613: POP
// for i in Teams [ 4 ] do
21614: LD_ADDR_VAR 0 6
21618: PUSH
21619: LD_EXP 22
21623: PUSH
21624: LD_INT 4
21626: ARRAY
21627: PUSH
21628: FOR_IN
21629: IFFALSE 21662
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21631: LD_ADDR_VAR 0 5
21635: PUSH
21636: LD_VAR 0 5
21640: PUSH
21641: LD_VAR 0 6
21645: PUSH
21646: LD_INT 10
21648: PLUS
21649: PPUSH
21650: CALL_OW 110
21654: PUSH
21655: LD_INT 3
21657: DIV
21658: PLUS
21659: ST_TO_ADDR
21660: GO 21628
21662: POP
21663: POP
// if red >= final_count then
21664: LD_VAR 0 2
21668: PUSH
21669: LD_EXP 20
21673: GREATEREQUAL
21674: IFFALSE 21690
// win = teams [ 1 ] ;
21676: LD_ADDR_LOC 34
21680: PUSH
21681: LD_EXP 22
21685: PUSH
21686: LD_INT 1
21688: ARRAY
21689: ST_TO_ADDR
// if blue >= final_count then
21690: LD_VAR 0 3
21694: PUSH
21695: LD_EXP 20
21699: GREATEREQUAL
21700: IFFALSE 21716
// win = teams [ 2 ] ;
21702: LD_ADDR_LOC 34
21706: PUSH
21707: LD_EXP 22
21711: PUSH
21712: LD_INT 2
21714: ARRAY
21715: ST_TO_ADDR
// if yel >= final_count then
21716: LD_VAR 0 4
21720: PUSH
21721: LD_EXP 20
21725: GREATEREQUAL
21726: IFFALSE 21742
// win = teams [ 3 ] ;
21728: LD_ADDR_LOC 34
21732: PUSH
21733: LD_EXP 22
21737: PUSH
21738: LD_INT 3
21740: ARRAY
21741: ST_TO_ADDR
// if green >= final_count then
21742: LD_VAR 0 5
21746: PUSH
21747: LD_EXP 20
21751: GREATEREQUAL
21752: IFFALSE 21768
// win = teams [ 4 ] ;
21754: LD_ADDR_LOC 34
21758: PUSH
21759: LD_EXP 22
21763: PUSH
21764: LD_INT 4
21766: ARRAY
21767: ST_TO_ADDR
// if win then
21768: LD_LOC 34
21772: IFFALSE 21779
// enable ( 4 ) else
21774: LD_INT 4
21776: ENABLE_MARKED
21777: GO 21780
// enable ;
21779: ENABLE
// end ; end ;
21780: PPOPN 6
21782: END
// every 0 0$1 marked 4 do
21783: GO 21785
21785: DISABLE
// begin if Player_Side in win then
21786: LD_EXP 27
21790: PUSH
21791: LD_LOC 34
21795: IN
21796: IFFALSE 21812
// begin wait ( 0 0$2 ) ;
21798: LD_INT 70
21800: PPUSH
21801: CALL_OW 67
// enable ( 401 ) ;
21805: LD_INT 401
21807: ENABLE_MARKED
// exit ;
21808: GO 21828
// end else
21810: GO 21828
// begin wait ( 0 0$2 ) ;
21812: LD_INT 70
21814: PPUSH
21815: CALL_OW 67
// Multiplayer_Loose_Message ;
21819: CALL_OW 521
// enable ( 400 ) ;
21823: LD_INT 400
21825: ENABLE_MARKED
// exit ;
21826: GO 21828
// end ; end ; end_of_file
21828: END
// export function SetMpTechs ( ) ; var side , i ; begin
21829: LD_INT 0
21831: PPUSH
21832: PPUSH
21833: PPUSH
// for side = 1 to 8 do
21834: LD_ADDR_VAR 0 2
21838: PUSH
21839: DOUBLE
21840: LD_INT 1
21842: DEC
21843: ST_TO_ADDR
21844: LD_INT 8
21846: PUSH
21847: FOR_TO
21848: IFFALSE 21969
// begin for i = 1 to 72 do
21850: LD_ADDR_VAR 0 3
21854: PUSH
21855: DOUBLE
21856: LD_INT 1
21858: DEC
21859: ST_TO_ADDR
21860: LD_INT 72
21862: PUSH
21863: FOR_TO
21864: IFFALSE 21895
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
21866: LD_VAR 0 3
21870: PPUSH
21871: LD_VAR 0 2
21875: PPUSH
21876: LD_INT 0
21878: PPUSH
21879: LD_VAR 0 3
21883: PPUSH
21884: CALL_OW 565
21888: PPUSH
21889: CALL_OW 322
21893: GO 21863
21895: POP
21896: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
21897: LD_INT 73
21899: PPUSH
21900: LD_VAR 0 2
21904: PPUSH
21905: LD_INT 0
21907: PPUSH
21908: LD_INT 25
21910: PPUSH
21911: CALL_OW 565
21915: PPUSH
21916: CALL_OW 322
// for i = 0 to 40 do
21920: LD_ADDR_VAR 0 3
21924: PUSH
21925: DOUBLE
21926: LD_INT 0
21928: DEC
21929: ST_TO_ADDR
21930: LD_INT 40
21932: PUSH
21933: FOR_TO
21934: IFFALSE 21965
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
21936: LD_VAR 0 3
21940: PPUSH
21941: LD_VAR 0 2
21945: PPUSH
21946: LD_INT 1
21948: PPUSH
21949: LD_VAR 0 3
21953: PPUSH
21954: CALL_OW 565
21958: PPUSH
21959: CALL_OW 324
21963: GO 21933
21965: POP
21966: POP
// end ;
21967: GO 21847
21969: POP
21970: POP
// end ;
21971: LD_VAR 0 1
21975: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
21976: LD_INT 0
21978: PPUSH
21979: PPUSH
21980: PPUSH
// for side = 1 to 8 do
21981: LD_ADDR_VAR 0 3
21985: PUSH
21986: DOUBLE
21987: LD_INT 1
21989: DEC
21990: ST_TO_ADDR
21991: LD_INT 8
21993: PUSH
21994: FOR_TO
21995: IFFALSE 25991
// begin for i = 1 to 73 do
21997: LD_ADDR_VAR 0 4
22001: PUSH
22002: DOUBLE
22003: LD_INT 1
22005: DEC
22006: ST_TO_ADDR
22007: LD_INT 73
22009: PUSH
22010: FOR_TO
22011: IFFALSE 22032
// SetTech ( i , side , state_disabled ) ;
22013: LD_VAR 0 4
22017: PPUSH
22018: LD_VAR 0 3
22022: PPUSH
22023: LD_INT 0
22025: PPUSH
22026: CALL_OW 322
22030: GO 22010
22032: POP
22033: POP
// for i = 0 to 40 do
22034: LD_ADDR_VAR 0 4
22038: PUSH
22039: DOUBLE
22040: LD_INT 0
22042: DEC
22043: ST_TO_ADDR
22044: LD_INT 40
22046: PUSH
22047: FOR_TO
22048: IFFALSE 22069
// SetRestrict ( i , side , false ) ;
22050: LD_VAR 0 4
22054: PPUSH
22055: LD_VAR 0 3
22059: PPUSH
22060: LD_INT 0
22062: PPUSH
22063: CALL_OW 324
22067: GO 22047
22069: POP
22070: POP
// case level of 1 :
22071: LD_VAR 0 1
22075: PUSH
22076: LD_INT 1
22078: DOUBLE
22079: EQUAL
22080: IFTRUE 22084
22082: GO 22237
22084: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22085: LD_INT 35
22087: PPUSH
22088: LD_VAR 0 3
22092: PPUSH
22093: LD_INT 1
22095: PPUSH
22096: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22100: LD_INT 45
22102: PPUSH
22103: LD_VAR 0 3
22107: PPUSH
22108: LD_INT 1
22110: PPUSH
22111: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22115: LD_INT 46
22117: PPUSH
22118: LD_VAR 0 3
22122: PPUSH
22123: LD_INT 1
22125: PPUSH
22126: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22130: LD_INT 47
22132: PPUSH
22133: LD_VAR 0 3
22137: PPUSH
22138: LD_INT 1
22140: PPUSH
22141: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22145: LD_INT 0
22147: PPUSH
22148: LD_VAR 0 3
22152: PPUSH
22153: LD_INT 1
22155: PPUSH
22156: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22160: LD_INT 2
22162: PPUSH
22163: LD_VAR 0 3
22167: PPUSH
22168: LD_INT 1
22170: PPUSH
22171: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22175: LD_INT 4
22177: PPUSH
22178: LD_VAR 0 3
22182: PPUSH
22183: LD_INT 1
22185: PPUSH
22186: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22190: LD_INT 6
22192: PPUSH
22193: LD_VAR 0 3
22197: PPUSH
22198: LD_INT 1
22200: PPUSH
22201: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22205: LD_INT 29
22207: PPUSH
22208: LD_VAR 0 3
22212: PPUSH
22213: LD_INT 1
22215: PPUSH
22216: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22220: LD_INT 31
22222: PPUSH
22223: LD_VAR 0 3
22227: PPUSH
22228: LD_INT 1
22230: PPUSH
22231: CALL_OW 324
// end ; 2 :
22235: GO 25989
22237: LD_INT 2
22239: DOUBLE
22240: EQUAL
22241: IFTRUE 22245
22243: GO 22443
22245: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22246: LD_INT 35
22248: PPUSH
22249: LD_VAR 0 3
22253: PPUSH
22254: LD_INT 1
22256: PPUSH
22257: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22261: LD_INT 45
22263: PPUSH
22264: LD_VAR 0 3
22268: PPUSH
22269: LD_INT 1
22271: PPUSH
22272: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22276: LD_INT 46
22278: PPUSH
22279: LD_VAR 0 3
22283: PPUSH
22284: LD_INT 1
22286: PPUSH
22287: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22291: LD_INT 47
22293: PPUSH
22294: LD_VAR 0 3
22298: PPUSH
22299: LD_INT 1
22301: PPUSH
22302: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22306: LD_INT 1
22308: PPUSH
22309: LD_VAR 0 3
22313: PPUSH
22314: LD_INT 1
22316: PPUSH
22317: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22321: LD_INT 2
22323: PPUSH
22324: LD_VAR 0 3
22328: PPUSH
22329: LD_INT 1
22331: PPUSH
22332: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22336: LD_INT 11
22338: PPUSH
22339: LD_VAR 0 3
22343: PPUSH
22344: LD_INT 1
22346: PPUSH
22347: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22351: LD_INT 0
22353: PPUSH
22354: LD_VAR 0 3
22358: PPUSH
22359: LD_INT 1
22361: PPUSH
22362: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22366: LD_INT 2
22368: PPUSH
22369: LD_VAR 0 3
22373: PPUSH
22374: LD_INT 1
22376: PPUSH
22377: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22381: LD_INT 4
22383: PPUSH
22384: LD_VAR 0 3
22388: PPUSH
22389: LD_INT 1
22391: PPUSH
22392: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22396: LD_INT 6
22398: PPUSH
22399: LD_VAR 0 3
22403: PPUSH
22404: LD_INT 1
22406: PPUSH
22407: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22411: LD_INT 29
22413: PPUSH
22414: LD_VAR 0 3
22418: PPUSH
22419: LD_INT 1
22421: PPUSH
22422: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22426: LD_INT 31
22428: PPUSH
22429: LD_VAR 0 3
22433: PPUSH
22434: LD_INT 1
22436: PPUSH
22437: CALL_OW 324
// end ; 3 :
22441: GO 25989
22443: LD_INT 3
22445: DOUBLE
22446: EQUAL
22447: IFTRUE 22451
22449: GO 22904
22451: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22452: LD_INT 35
22454: PPUSH
22455: LD_VAR 0 3
22459: PPUSH
22460: LD_INT 1
22462: PPUSH
22463: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22467: LD_INT 45
22469: PPUSH
22470: LD_VAR 0 3
22474: PPUSH
22475: LD_INT 1
22477: PPUSH
22478: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22482: LD_INT 46
22484: PPUSH
22485: LD_VAR 0 3
22489: PPUSH
22490: LD_INT 1
22492: PPUSH
22493: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22497: LD_INT 47
22499: PPUSH
22500: LD_VAR 0 3
22504: PPUSH
22505: LD_INT 1
22507: PPUSH
22508: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22512: LD_INT 1
22514: PPUSH
22515: LD_VAR 0 3
22519: PPUSH
22520: LD_INT 1
22522: PPUSH
22523: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22527: LD_INT 2
22529: PPUSH
22530: LD_VAR 0 3
22534: PPUSH
22535: LD_INT 1
22537: PPUSH
22538: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22542: LD_INT 11
22544: PPUSH
22545: LD_VAR 0 3
22549: PPUSH
22550: LD_INT 1
22552: PPUSH
22553: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22557: LD_INT 48
22559: PPUSH
22560: LD_VAR 0 3
22564: PPUSH
22565: LD_INT 1
22567: PPUSH
22568: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22572: LD_INT 69
22574: PPUSH
22575: LD_VAR 0 3
22579: PPUSH
22580: LD_INT 1
22582: PPUSH
22583: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22587: LD_INT 39
22589: PPUSH
22590: LD_VAR 0 3
22594: PPUSH
22595: LD_INT 1
22597: PPUSH
22598: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22602: LD_INT 43
22604: PPUSH
22605: LD_VAR 0 3
22609: PPUSH
22610: LD_INT 1
22612: PPUSH
22613: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22617: LD_INT 51
22619: PPUSH
22620: LD_VAR 0 3
22624: PPUSH
22625: LD_INT 1
22627: PPUSH
22628: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22632: LD_INT 6
22634: PPUSH
22635: LD_VAR 0 3
22639: PPUSH
22640: LD_INT 1
22642: PPUSH
22643: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22647: LD_INT 0
22649: PPUSH
22650: LD_VAR 0 3
22654: PPUSH
22655: LD_INT 1
22657: PPUSH
22658: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22662: LD_INT 2
22664: PPUSH
22665: LD_VAR 0 3
22669: PPUSH
22670: LD_INT 1
22672: PPUSH
22673: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22677: LD_INT 3
22679: PPUSH
22680: LD_VAR 0 3
22684: PPUSH
22685: LD_INT 1
22687: PPUSH
22688: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22692: LD_INT 4
22694: PPUSH
22695: LD_VAR 0 3
22699: PPUSH
22700: LD_INT 1
22702: PPUSH
22703: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22707: LD_INT 6
22709: PPUSH
22710: LD_VAR 0 3
22714: PPUSH
22715: LD_INT 1
22717: PPUSH
22718: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22722: LD_INT 7
22724: PPUSH
22725: LD_VAR 0 3
22729: PPUSH
22730: LD_INT 1
22732: PPUSH
22733: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22737: LD_INT 8
22739: PPUSH
22740: LD_VAR 0 3
22744: PPUSH
22745: LD_INT 1
22747: PPUSH
22748: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22752: LD_INT 10
22754: PPUSH
22755: LD_VAR 0 3
22759: PPUSH
22760: LD_INT 1
22762: PPUSH
22763: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22767: LD_INT 15
22769: PPUSH
22770: LD_VAR 0 3
22774: PPUSH
22775: LD_INT 1
22777: PPUSH
22778: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22782: LD_INT 16
22784: PPUSH
22785: LD_VAR 0 3
22789: PPUSH
22790: LD_INT 1
22792: PPUSH
22793: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22797: LD_INT 17
22799: PPUSH
22800: LD_VAR 0 3
22804: PPUSH
22805: LD_INT 1
22807: PPUSH
22808: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22812: LD_INT 20
22814: PPUSH
22815: LD_VAR 0 3
22819: PPUSH
22820: LD_INT 1
22822: PPUSH
22823: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22827: LD_INT 26
22829: PPUSH
22830: LD_VAR 0 3
22834: PPUSH
22835: LD_INT 1
22837: PPUSH
22838: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22842: LD_INT 27
22844: PPUSH
22845: LD_VAR 0 3
22849: PPUSH
22850: LD_INT 1
22852: PPUSH
22853: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22857: LD_INT 29
22859: PPUSH
22860: LD_VAR 0 3
22864: PPUSH
22865: LD_INT 1
22867: PPUSH
22868: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22872: LD_INT 31
22874: PPUSH
22875: LD_VAR 0 3
22879: PPUSH
22880: LD_INT 1
22882: PPUSH
22883: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22887: LD_INT 32
22889: PPUSH
22890: LD_VAR 0 3
22894: PPUSH
22895: LD_INT 1
22897: PPUSH
22898: CALL_OW 324
// end ; 4 :
22902: GO 25989
22904: LD_INT 4
22906: DOUBLE
22907: EQUAL
22908: IFTRUE 22912
22910: GO 23860
22912: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22913: LD_INT 35
22915: PPUSH
22916: LD_VAR 0 3
22920: PPUSH
22921: LD_INT 1
22923: PPUSH
22924: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22928: LD_INT 45
22930: PPUSH
22931: LD_VAR 0 3
22935: PPUSH
22936: LD_INT 1
22938: PPUSH
22939: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22943: LD_INT 46
22945: PPUSH
22946: LD_VAR 0 3
22950: PPUSH
22951: LD_INT 1
22953: PPUSH
22954: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22958: LD_INT 47
22960: PPUSH
22961: LD_VAR 0 3
22965: PPUSH
22966: LD_INT 1
22968: PPUSH
22969: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22973: LD_INT 1
22975: PPUSH
22976: LD_VAR 0 3
22980: PPUSH
22981: LD_INT 1
22983: PPUSH
22984: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22988: LD_INT 2
22990: PPUSH
22991: LD_VAR 0 3
22995: PPUSH
22996: LD_INT 1
22998: PPUSH
22999: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23003: LD_INT 11
23005: PPUSH
23006: LD_VAR 0 3
23010: PPUSH
23011: LD_INT 1
23013: PPUSH
23014: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23018: LD_INT 20
23020: PPUSH
23021: LD_VAR 0 3
23025: PPUSH
23026: LD_INT 1
23028: PPUSH
23029: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23033: LD_INT 48
23035: PPUSH
23036: LD_VAR 0 3
23040: PPUSH
23041: LD_INT 1
23043: PPUSH
23044: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23048: LD_INT 49
23050: PPUSH
23051: LD_VAR 0 3
23055: PPUSH
23056: LD_INT 1
23058: PPUSH
23059: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23063: LD_INT 69
23065: PPUSH
23066: LD_VAR 0 3
23070: PPUSH
23071: LD_INT 1
23073: PPUSH
23074: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23078: LD_INT 39
23080: PPUSH
23081: LD_VAR 0 3
23085: PPUSH
23086: LD_INT 1
23088: PPUSH
23089: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23093: LD_INT 34
23095: PPUSH
23096: LD_VAR 0 3
23100: PPUSH
23101: LD_INT 1
23103: PPUSH
23104: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23108: LD_INT 42
23110: PPUSH
23111: LD_VAR 0 3
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23123: LD_INT 44
23125: PPUSH
23126: LD_VAR 0 3
23130: PPUSH
23131: LD_INT 1
23133: PPUSH
23134: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23138: LD_INT 41
23140: PPUSH
23141: LD_VAR 0 3
23145: PPUSH
23146: LD_INT 1
23148: PPUSH
23149: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23153: LD_INT 43
23155: PPUSH
23156: LD_VAR 0 3
23160: PPUSH
23161: LD_INT 1
23163: PPUSH
23164: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23168: LD_INT 70
23170: PPUSH
23171: LD_VAR 0 3
23175: PPUSH
23176: LD_INT 1
23178: PPUSH
23179: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23183: LD_INT 51
23185: PPUSH
23186: LD_VAR 0 3
23190: PPUSH
23191: LD_INT 1
23193: PPUSH
23194: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23198: LD_INT 52
23200: PPUSH
23201: LD_VAR 0 3
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23213: LD_INT 6
23215: PPUSH
23216: LD_VAR 0 3
23220: PPUSH
23221: LD_INT 1
23223: PPUSH
23224: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23228: LD_INT 15
23230: PPUSH
23231: LD_VAR 0 3
23235: PPUSH
23236: LD_INT 1
23238: PPUSH
23239: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23243: LD_INT 7
23245: PPUSH
23246: LD_VAR 0 3
23250: PPUSH
23251: LD_INT 1
23253: PPUSH
23254: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23258: LD_INT 12
23260: PPUSH
23261: LD_VAR 0 3
23265: PPUSH
23266: LD_INT 1
23268: PPUSH
23269: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23273: LD_INT 18
23275: PPUSH
23276: LD_VAR 0 3
23280: PPUSH
23281: LD_INT 1
23283: PPUSH
23284: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23288: LD_INT 60
23290: PPUSH
23291: LD_VAR 0 3
23295: PPUSH
23296: LD_INT 1
23298: PPUSH
23299: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23303: LD_INT 9
23305: PPUSH
23306: LD_VAR 0 3
23310: PPUSH
23311: LD_INT 1
23313: PPUSH
23314: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23318: LD_INT 30
23320: PPUSH
23321: LD_VAR 0 3
23325: PPUSH
23326: LD_INT 1
23328: PPUSH
23329: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23333: LD_INT 37
23335: PPUSH
23336: LD_VAR 0 3
23340: PPUSH
23341: LD_INT 1
23343: PPUSH
23344: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23348: LD_INT 5
23350: PPUSH
23351: LD_VAR 0 3
23355: PPUSH
23356: LD_INT 1
23358: PPUSH
23359: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23363: LD_INT 66
23365: PPUSH
23366: LD_VAR 0 3
23370: PPUSH
23371: LD_INT 1
23373: PPUSH
23374: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23378: LD_INT 21
23380: PPUSH
23381: LD_VAR 0 3
23385: PPUSH
23386: LD_INT 1
23388: PPUSH
23389: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23393: LD_INT 22
23395: PPUSH
23396: LD_VAR 0 3
23400: PPUSH
23401: LD_INT 1
23403: PPUSH
23404: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23408: LD_INT 54
23410: PPUSH
23411: LD_VAR 0 3
23415: PPUSH
23416: LD_INT 1
23418: PPUSH
23419: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23423: LD_INT 0
23425: PPUSH
23426: LD_VAR 0 3
23430: PPUSH
23431: LD_INT 1
23433: PPUSH
23434: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23438: LD_INT 1
23440: PPUSH
23441: LD_VAR 0 3
23445: PPUSH
23446: LD_INT 1
23448: PPUSH
23449: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23453: LD_INT 2
23455: PPUSH
23456: LD_VAR 0 3
23460: PPUSH
23461: LD_INT 1
23463: PPUSH
23464: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23468: LD_INT 3
23470: PPUSH
23471: LD_VAR 0 3
23475: PPUSH
23476: LD_INT 1
23478: PPUSH
23479: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23483: LD_INT 4
23485: PPUSH
23486: LD_VAR 0 3
23490: PPUSH
23491: LD_INT 1
23493: PPUSH
23494: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23498: LD_INT 5
23500: PPUSH
23501: LD_VAR 0 3
23505: PPUSH
23506: LD_INT 1
23508: PPUSH
23509: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23513: LD_INT 6
23515: PPUSH
23516: LD_VAR 0 3
23520: PPUSH
23521: LD_INT 1
23523: PPUSH
23524: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23528: LD_INT 7
23530: PPUSH
23531: LD_VAR 0 3
23535: PPUSH
23536: LD_INT 1
23538: PPUSH
23539: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23543: LD_INT 8
23545: PPUSH
23546: LD_VAR 0 3
23550: PPUSH
23551: LD_INT 1
23553: PPUSH
23554: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23558: LD_INT 10
23560: PPUSH
23561: LD_VAR 0 3
23565: PPUSH
23566: LD_INT 1
23568: PPUSH
23569: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23573: LD_INT 11
23575: PPUSH
23576: LD_VAR 0 3
23580: PPUSH
23581: LD_INT 1
23583: PPUSH
23584: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23588: LD_INT 12
23590: PPUSH
23591: LD_VAR 0 3
23595: PPUSH
23596: LD_INT 1
23598: PPUSH
23599: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23603: LD_INT 13
23605: PPUSH
23606: LD_VAR 0 3
23610: PPUSH
23611: LD_INT 1
23613: PPUSH
23614: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23618: LD_INT 14
23620: PPUSH
23621: LD_VAR 0 3
23625: PPUSH
23626: LD_INT 1
23628: PPUSH
23629: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23633: LD_INT 15
23635: PPUSH
23636: LD_VAR 0 3
23640: PPUSH
23641: LD_INT 1
23643: PPUSH
23644: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23648: LD_INT 16
23650: PPUSH
23651: LD_VAR 0 3
23655: PPUSH
23656: LD_INT 1
23658: PPUSH
23659: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23663: LD_INT 17
23665: PPUSH
23666: LD_VAR 0 3
23670: PPUSH
23671: LD_INT 1
23673: PPUSH
23674: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23678: LD_INT 19
23680: PPUSH
23681: LD_VAR 0 3
23685: PPUSH
23686: LD_INT 1
23688: PPUSH
23689: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23693: LD_INT 20
23695: PPUSH
23696: LD_VAR 0 3
23700: PPUSH
23701: LD_INT 1
23703: PPUSH
23704: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23708: LD_INT 21
23710: PPUSH
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_INT 1
23718: PPUSH
23719: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23723: LD_INT 23
23725: PPUSH
23726: LD_VAR 0 3
23730: PPUSH
23731: LD_INT 1
23733: PPUSH
23734: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23738: LD_INT 26
23740: PPUSH
23741: LD_VAR 0 3
23745: PPUSH
23746: LD_INT 1
23748: PPUSH
23749: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23753: LD_INT 27
23755: PPUSH
23756: LD_VAR 0 3
23760: PPUSH
23761: LD_INT 1
23763: PPUSH
23764: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23768: LD_INT 28
23770: PPUSH
23771: LD_VAR 0 3
23775: PPUSH
23776: LD_INT 1
23778: PPUSH
23779: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23783: LD_INT 29
23785: PPUSH
23786: LD_VAR 0 3
23790: PPUSH
23791: LD_INT 1
23793: PPUSH
23794: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23798: LD_INT 30
23800: PPUSH
23801: LD_VAR 0 3
23805: PPUSH
23806: LD_INT 1
23808: PPUSH
23809: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23813: LD_INT 31
23815: PPUSH
23816: LD_VAR 0 3
23820: PPUSH
23821: LD_INT 1
23823: PPUSH
23824: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23828: LD_INT 32
23830: PPUSH
23831: LD_VAR 0 3
23835: PPUSH
23836: LD_INT 1
23838: PPUSH
23839: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23843: LD_INT 36
23845: PPUSH
23846: LD_VAR 0 3
23850: PPUSH
23851: LD_INT 1
23853: PPUSH
23854: CALL_OW 324
// end ; 5 :
23858: GO 25989
23860: LD_INT 5
23862: DOUBLE
23863: EQUAL
23864: IFTRUE 23868
23866: GO 24981
23868: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23869: LD_INT 35
23871: PPUSH
23872: LD_VAR 0 3
23876: PPUSH
23877: LD_INT 1
23879: PPUSH
23880: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23884: LD_INT 45
23886: PPUSH
23887: LD_VAR 0 3
23891: PPUSH
23892: LD_INT 1
23894: PPUSH
23895: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23899: LD_INT 46
23901: PPUSH
23902: LD_VAR 0 3
23906: PPUSH
23907: LD_INT 1
23909: PPUSH
23910: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23914: LD_INT 47
23916: PPUSH
23917: LD_VAR 0 3
23921: PPUSH
23922: LD_INT 1
23924: PPUSH
23925: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23929: LD_INT 1
23931: PPUSH
23932: LD_VAR 0 3
23936: PPUSH
23937: LD_INT 1
23939: PPUSH
23940: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23944: LD_INT 2
23946: PPUSH
23947: LD_VAR 0 3
23951: PPUSH
23952: LD_INT 1
23954: PPUSH
23955: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23959: LD_INT 11
23961: PPUSH
23962: LD_VAR 0 3
23966: PPUSH
23967: LD_INT 1
23969: PPUSH
23970: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23974: LD_INT 20
23976: PPUSH
23977: LD_VAR 0 3
23981: PPUSH
23982: LD_INT 1
23984: PPUSH
23985: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23989: LD_INT 48
23991: PPUSH
23992: LD_VAR 0 3
23996: PPUSH
23997: LD_INT 1
23999: PPUSH
24000: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24004: LD_INT 49
24006: PPUSH
24007: LD_VAR 0 3
24011: PPUSH
24012: LD_INT 1
24014: PPUSH
24015: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24019: LD_INT 69
24021: PPUSH
24022: LD_VAR 0 3
24026: PPUSH
24027: LD_INT 1
24029: PPUSH
24030: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24034: LD_INT 39
24036: PPUSH
24037: LD_VAR 0 3
24041: PPUSH
24042: LD_INT 1
24044: PPUSH
24045: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24049: LD_INT 34
24051: PPUSH
24052: LD_VAR 0 3
24056: PPUSH
24057: LD_INT 1
24059: PPUSH
24060: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24064: LD_INT 42
24066: PPUSH
24067: LD_VAR 0 3
24071: PPUSH
24072: LD_INT 1
24074: PPUSH
24075: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24079: LD_INT 44
24081: PPUSH
24082: LD_VAR 0 3
24086: PPUSH
24087: LD_INT 1
24089: PPUSH
24090: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24094: LD_INT 41
24096: PPUSH
24097: LD_VAR 0 3
24101: PPUSH
24102: LD_INT 1
24104: PPUSH
24105: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24109: LD_INT 40
24111: PPUSH
24112: LD_VAR 0 3
24116: PPUSH
24117: LD_INT 1
24119: PPUSH
24120: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24124: LD_INT 43
24126: PPUSH
24127: LD_VAR 0 3
24131: PPUSH
24132: LD_INT 1
24134: PPUSH
24135: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24139: LD_INT 70
24141: PPUSH
24142: LD_VAR 0 3
24146: PPUSH
24147: LD_INT 1
24149: PPUSH
24150: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24154: LD_INT 51
24156: PPUSH
24157: LD_VAR 0 3
24161: PPUSH
24162: LD_INT 1
24164: PPUSH
24165: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24169: LD_INT 52
24171: PPUSH
24172: LD_VAR 0 3
24176: PPUSH
24177: LD_INT 1
24179: PPUSH
24180: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24184: LD_INT 6
24186: PPUSH
24187: LD_VAR 0 3
24191: PPUSH
24192: LD_INT 1
24194: PPUSH
24195: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24199: LD_INT 15
24201: PPUSH
24202: LD_VAR 0 3
24206: PPUSH
24207: LD_INT 1
24209: PPUSH
24210: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24214: LD_INT 7
24216: PPUSH
24217: LD_VAR 0 3
24221: PPUSH
24222: LD_INT 1
24224: PPUSH
24225: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24229: LD_INT 12
24231: PPUSH
24232: LD_VAR 0 3
24236: PPUSH
24237: LD_INT 1
24239: PPUSH
24240: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24244: LD_INT 17
24246: PPUSH
24247: LD_VAR 0 3
24251: PPUSH
24252: LD_INT 1
24254: PPUSH
24255: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24259: LD_INT 18
24261: PPUSH
24262: LD_VAR 0 3
24266: PPUSH
24267: LD_INT 1
24269: PPUSH
24270: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24274: LD_INT 60
24276: PPUSH
24277: LD_VAR 0 3
24281: PPUSH
24282: LD_INT 1
24284: PPUSH
24285: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24289: LD_INT 32
24291: PPUSH
24292: LD_VAR 0 3
24296: PPUSH
24297: LD_INT 1
24299: PPUSH
24300: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24304: LD_INT 9
24306: PPUSH
24307: LD_VAR 0 3
24311: PPUSH
24312: LD_INT 1
24314: PPUSH
24315: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24319: LD_INT 57
24321: PPUSH
24322: LD_VAR 0 3
24326: PPUSH
24327: LD_INT 1
24329: PPUSH
24330: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24334: LD_INT 30
24336: PPUSH
24337: LD_VAR 0 3
24341: PPUSH
24342: LD_INT 1
24344: PPUSH
24345: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24349: LD_INT 37
24351: PPUSH
24352: LD_VAR 0 3
24356: PPUSH
24357: LD_INT 1
24359: PPUSH
24360: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24364: LD_INT 63
24366: PPUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: LD_INT 1
24374: PPUSH
24375: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24379: LD_INT 3
24381: PPUSH
24382: LD_VAR 0 3
24386: PPUSH
24387: LD_INT 1
24389: PPUSH
24390: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24394: LD_INT 4
24396: PPUSH
24397: LD_VAR 0 3
24401: PPUSH
24402: LD_INT 1
24404: PPUSH
24405: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24409: LD_INT 5
24411: PPUSH
24412: LD_VAR 0 3
24416: PPUSH
24417: LD_INT 1
24419: PPUSH
24420: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24424: LD_INT 66
24426: PPUSH
24427: LD_VAR 0 3
24431: PPUSH
24432: LD_INT 1
24434: PPUSH
24435: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24439: LD_INT 21
24441: PPUSH
24442: LD_VAR 0 3
24446: PPUSH
24447: LD_INT 1
24449: PPUSH
24450: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24454: LD_INT 22
24456: PPUSH
24457: LD_VAR 0 3
24461: PPUSH
24462: LD_INT 1
24464: PPUSH
24465: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24469: LD_INT 19
24471: PPUSH
24472: LD_VAR 0 3
24476: PPUSH
24477: LD_INT 1
24479: PPUSH
24480: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24484: LD_INT 54
24486: PPUSH
24487: LD_VAR 0 3
24491: PPUSH
24492: LD_INT 1
24494: PPUSH
24495: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24499: LD_INT 55
24501: PPUSH
24502: LD_VAR 0 3
24506: PPUSH
24507: LD_INT 1
24509: PPUSH
24510: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
24514: LD_INT 0
24516: PPUSH
24517: LD_VAR 0 3
24521: PPUSH
24522: LD_INT 1
24524: PPUSH
24525: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
24529: LD_INT 1
24531: PPUSH
24532: LD_VAR 0 3
24536: PPUSH
24537: LD_INT 1
24539: PPUSH
24540: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24544: LD_INT 2
24546: PPUSH
24547: LD_VAR 0 3
24551: PPUSH
24552: LD_INT 1
24554: PPUSH
24555: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24559: LD_INT 3
24561: PPUSH
24562: LD_VAR 0 3
24566: PPUSH
24567: LD_INT 1
24569: PPUSH
24570: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24574: LD_INT 4
24576: PPUSH
24577: LD_VAR 0 3
24581: PPUSH
24582: LD_INT 1
24584: PPUSH
24585: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24589: LD_INT 5
24591: PPUSH
24592: LD_VAR 0 3
24596: PPUSH
24597: LD_INT 1
24599: PPUSH
24600: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24604: LD_INT 6
24606: PPUSH
24607: LD_VAR 0 3
24611: PPUSH
24612: LD_INT 1
24614: PPUSH
24615: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24619: LD_INT 7
24621: PPUSH
24622: LD_VAR 0 3
24626: PPUSH
24627: LD_INT 1
24629: PPUSH
24630: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24634: LD_INT 8
24636: PPUSH
24637: LD_VAR 0 3
24641: PPUSH
24642: LD_INT 1
24644: PPUSH
24645: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24649: LD_INT 10
24651: PPUSH
24652: LD_VAR 0 3
24656: PPUSH
24657: LD_INT 1
24659: PPUSH
24660: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24664: LD_INT 11
24666: PPUSH
24667: LD_VAR 0 3
24671: PPUSH
24672: LD_INT 1
24674: PPUSH
24675: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24679: LD_INT 12
24681: PPUSH
24682: LD_VAR 0 3
24686: PPUSH
24687: LD_INT 1
24689: PPUSH
24690: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24694: LD_INT 13
24696: PPUSH
24697: LD_VAR 0 3
24701: PPUSH
24702: LD_INT 1
24704: PPUSH
24705: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24709: LD_INT 14
24711: PPUSH
24712: LD_VAR 0 3
24716: PPUSH
24717: LD_INT 1
24719: PPUSH
24720: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24724: LD_INT 15
24726: PPUSH
24727: LD_VAR 0 3
24731: PPUSH
24732: LD_INT 1
24734: PPUSH
24735: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24739: LD_INT 16
24741: PPUSH
24742: LD_VAR 0 3
24746: PPUSH
24747: LD_INT 1
24749: PPUSH
24750: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24754: LD_INT 17
24756: PPUSH
24757: LD_VAR 0 3
24761: PPUSH
24762: LD_INT 1
24764: PPUSH
24765: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24769: LD_INT 18
24771: PPUSH
24772: LD_VAR 0 3
24776: PPUSH
24777: LD_INT 1
24779: PPUSH
24780: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
24784: LD_INT 19
24786: PPUSH
24787: LD_VAR 0 3
24791: PPUSH
24792: LD_INT 1
24794: PPUSH
24795: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
24799: LD_INT 20
24801: PPUSH
24802: LD_VAR 0 3
24806: PPUSH
24807: LD_INT 1
24809: PPUSH
24810: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
24814: LD_INT 21
24816: PPUSH
24817: LD_VAR 0 3
24821: PPUSH
24822: LD_INT 1
24824: PPUSH
24825: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
24829: LD_INT 23
24831: PPUSH
24832: LD_VAR 0 3
24836: PPUSH
24837: LD_INT 1
24839: PPUSH
24840: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
24844: LD_INT 26
24846: PPUSH
24847: LD_VAR 0 3
24851: PPUSH
24852: LD_INT 1
24854: PPUSH
24855: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
24859: LD_INT 27
24861: PPUSH
24862: LD_VAR 0 3
24866: PPUSH
24867: LD_INT 1
24869: PPUSH
24870: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
24874: LD_INT 28
24876: PPUSH
24877: LD_VAR 0 3
24881: PPUSH
24882: LD_INT 1
24884: PPUSH
24885: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
24889: LD_INT 29
24891: PPUSH
24892: LD_VAR 0 3
24896: PPUSH
24897: LD_INT 1
24899: PPUSH
24900: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24904: LD_INT 30
24906: PPUSH
24907: LD_VAR 0 3
24911: PPUSH
24912: LD_INT 1
24914: PPUSH
24915: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24919: LD_INT 31
24921: PPUSH
24922: LD_VAR 0 3
24926: PPUSH
24927: LD_INT 1
24929: PPUSH
24930: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24934: LD_INT 32
24936: PPUSH
24937: LD_VAR 0 3
24941: PPUSH
24942: LD_INT 1
24944: PPUSH
24945: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
24949: LD_INT 33
24951: PPUSH
24952: LD_VAR 0 3
24956: PPUSH
24957: LD_INT 1
24959: PPUSH
24960: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
24964: LD_INT 36
24966: PPUSH
24967: LD_VAR 0 3
24971: PPUSH
24972: LD_INT 1
24974: PPUSH
24975: CALL_OW 324
// end ; 6 :
24979: GO 25989
24981: LD_INT 6
24983: DOUBLE
24984: EQUAL
24985: IFTRUE 24989
24987: GO 25914
24989: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
24990: LD_INT 35
24992: PPUSH
24993: LD_VAR 0 3
24997: PPUSH
24998: LD_INT 1
25000: PPUSH
25001: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
25005: LD_INT 45
25007: PPUSH
25008: LD_VAR 0 3
25012: PPUSH
25013: LD_INT 1
25015: PPUSH
25016: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
25020: LD_INT 46
25022: PPUSH
25023: LD_VAR 0 3
25027: PPUSH
25028: LD_INT 1
25030: PPUSH
25031: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
25035: LD_INT 47
25037: PPUSH
25038: LD_VAR 0 3
25042: PPUSH
25043: LD_INT 1
25045: PPUSH
25046: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
25050: LD_INT 1
25052: PPUSH
25053: LD_VAR 0 3
25057: PPUSH
25058: LD_INT 1
25060: PPUSH
25061: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
25065: LD_INT 2
25067: PPUSH
25068: LD_VAR 0 3
25072: PPUSH
25073: LD_INT 1
25075: PPUSH
25076: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
25080: LD_INT 11
25082: PPUSH
25083: LD_VAR 0 3
25087: PPUSH
25088: LD_INT 1
25090: PPUSH
25091: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
25095: LD_INT 20
25097: PPUSH
25098: LD_VAR 0 3
25102: PPUSH
25103: LD_INT 1
25105: PPUSH
25106: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
25110: LD_INT 48
25112: PPUSH
25113: LD_VAR 0 3
25117: PPUSH
25118: LD_INT 1
25120: PPUSH
25121: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
25125: LD_INT 49
25127: PPUSH
25128: LD_VAR 0 3
25132: PPUSH
25133: LD_INT 1
25135: PPUSH
25136: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
25140: LD_INT 50
25142: PPUSH
25143: LD_VAR 0 3
25147: PPUSH
25148: LD_INT 1
25150: PPUSH
25151: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
25155: LD_INT 69
25157: PPUSH
25158: LD_VAR 0 3
25162: PPUSH
25163: LD_INT 1
25165: PPUSH
25166: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
25170: LD_INT 39
25172: PPUSH
25173: LD_VAR 0 3
25177: PPUSH
25178: LD_INT 1
25180: PPUSH
25181: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
25185: LD_INT 34
25187: PPUSH
25188: LD_VAR 0 3
25192: PPUSH
25193: LD_INT 1
25195: PPUSH
25196: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
25200: LD_INT 42
25202: PPUSH
25203: LD_VAR 0 3
25207: PPUSH
25208: LD_INT 1
25210: PPUSH
25211: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
25215: LD_INT 44
25217: PPUSH
25218: LD_VAR 0 3
25222: PPUSH
25223: LD_INT 1
25225: PPUSH
25226: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
25230: LD_INT 41
25232: PPUSH
25233: LD_VAR 0 3
25237: PPUSH
25238: LD_INT 1
25240: PPUSH
25241: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
25245: LD_INT 13
25247: PPUSH
25248: LD_VAR 0 3
25252: PPUSH
25253: LD_INT 1
25255: PPUSH
25256: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
25260: LD_INT 40
25262: PPUSH
25263: LD_VAR 0 3
25267: PPUSH
25268: LD_INT 1
25270: PPUSH
25271: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
25275: LD_INT 43
25277: PPUSH
25278: LD_VAR 0 3
25282: PPUSH
25283: LD_INT 1
25285: PPUSH
25286: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
25290: LD_INT 70
25292: PPUSH
25293: LD_VAR 0 3
25297: PPUSH
25298: LD_INT 1
25300: PPUSH
25301: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
25305: LD_INT 23
25307: PPUSH
25308: LD_VAR 0 3
25312: PPUSH
25313: LD_INT 1
25315: PPUSH
25316: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
25320: LD_INT 51
25322: PPUSH
25323: LD_VAR 0 3
25327: PPUSH
25328: LD_INT 1
25330: PPUSH
25331: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
25335: LD_INT 52
25337: PPUSH
25338: LD_VAR 0 3
25342: PPUSH
25343: LD_INT 1
25345: PPUSH
25346: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
25350: LD_INT 6
25352: PPUSH
25353: LD_VAR 0 3
25357: PPUSH
25358: LD_INT 1
25360: PPUSH
25361: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
25365: LD_INT 15
25367: PPUSH
25368: LD_VAR 0 3
25372: PPUSH
25373: LD_INT 1
25375: PPUSH
25376: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
25380: LD_INT 7
25382: PPUSH
25383: LD_VAR 0 3
25387: PPUSH
25388: LD_INT 1
25390: PPUSH
25391: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
25395: LD_INT 12
25397: PPUSH
25398: LD_VAR 0 3
25402: PPUSH
25403: LD_INT 1
25405: PPUSH
25406: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
25410: LD_INT 10
25412: PPUSH
25413: LD_VAR 0 3
25417: PPUSH
25418: LD_INT 1
25420: PPUSH
25421: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
25425: LD_INT 17
25427: PPUSH
25428: LD_VAR 0 3
25432: PPUSH
25433: LD_INT 1
25435: PPUSH
25436: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
25440: LD_INT 18
25442: PPUSH
25443: LD_VAR 0 3
25447: PPUSH
25448: LD_INT 1
25450: PPUSH
25451: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
25455: LD_INT 60
25457: PPUSH
25458: LD_VAR 0 3
25462: PPUSH
25463: LD_INT 1
25465: PPUSH
25466: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
25470: LD_INT 61
25472: PPUSH
25473: LD_VAR 0 3
25477: PPUSH
25478: LD_INT 1
25480: PPUSH
25481: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
25485: LD_INT 32
25487: PPUSH
25488: LD_VAR 0 3
25492: PPUSH
25493: LD_INT 1
25495: PPUSH
25496: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
25500: LD_INT 27
25502: PPUSH
25503: LD_VAR 0 3
25507: PPUSH
25508: LD_INT 1
25510: PPUSH
25511: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
25515: LD_INT 36
25517: PPUSH
25518: LD_VAR 0 3
25522: PPUSH
25523: LD_INT 1
25525: PPUSH
25526: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
25530: LD_INT 33
25532: PPUSH
25533: LD_VAR 0 3
25537: PPUSH
25538: LD_INT 1
25540: PPUSH
25541: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25545: LD_INT 9
25547: PPUSH
25548: LD_VAR 0 3
25552: PPUSH
25553: LD_INT 1
25555: PPUSH
25556: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25560: LD_INT 38
25562: PPUSH
25563: LD_VAR 0 3
25567: PPUSH
25568: LD_INT 1
25570: PPUSH
25571: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25575: LD_INT 57
25577: PPUSH
25578: LD_VAR 0 3
25582: PPUSH
25583: LD_INT 1
25585: PPUSH
25586: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25590: LD_INT 58
25592: PPUSH
25593: LD_VAR 0 3
25597: PPUSH
25598: LD_INT 1
25600: PPUSH
25601: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25605: LD_INT 28
25607: PPUSH
25608: LD_VAR 0 3
25612: PPUSH
25613: LD_INT 1
25615: PPUSH
25616: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25620: LD_INT 29
25622: PPUSH
25623: LD_VAR 0 3
25627: PPUSH
25628: LD_INT 1
25630: PPUSH
25631: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25635: LD_INT 30
25637: PPUSH
25638: LD_VAR 0 3
25642: PPUSH
25643: LD_INT 1
25645: PPUSH
25646: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25650: LD_INT 37
25652: PPUSH
25653: LD_VAR 0 3
25657: PPUSH
25658: LD_INT 1
25660: PPUSH
25661: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25665: LD_INT 63
25667: PPUSH
25668: LD_VAR 0 3
25672: PPUSH
25673: LD_INT 1
25675: PPUSH
25676: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25680: LD_INT 64
25682: PPUSH
25683: LD_VAR 0 3
25687: PPUSH
25688: LD_INT 1
25690: PPUSH
25691: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25695: LD_INT 3
25697: PPUSH
25698: LD_VAR 0 3
25702: PPUSH
25703: LD_INT 1
25705: PPUSH
25706: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25710: LD_INT 4
25712: PPUSH
25713: LD_VAR 0 3
25717: PPUSH
25718: LD_INT 1
25720: PPUSH
25721: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25725: LD_INT 5
25727: PPUSH
25728: LD_VAR 0 3
25732: PPUSH
25733: LD_INT 1
25735: PPUSH
25736: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25740: LD_INT 8
25742: PPUSH
25743: LD_VAR 0 3
25747: PPUSH
25748: LD_INT 1
25750: PPUSH
25751: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25755: LD_INT 66
25757: PPUSH
25758: LD_VAR 0 3
25762: PPUSH
25763: LD_INT 1
25765: PPUSH
25766: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25770: LD_INT 67
25772: PPUSH
25773: LD_VAR 0 3
25777: PPUSH
25778: LD_INT 1
25780: PPUSH
25781: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
25785: LD_INT 21
25787: PPUSH
25788: LD_VAR 0 3
25792: PPUSH
25793: LD_INT 1
25795: PPUSH
25796: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
25800: LD_INT 22
25802: PPUSH
25803: LD_VAR 0 3
25807: PPUSH
25808: LD_INT 1
25810: PPUSH
25811: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
25815: LD_INT 19
25817: PPUSH
25818: LD_VAR 0 3
25822: PPUSH
25823: LD_INT 1
25825: PPUSH
25826: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
25830: LD_INT 26
25832: PPUSH
25833: LD_VAR 0 3
25837: PPUSH
25838: LD_INT 1
25840: PPUSH
25841: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
25845: LD_INT 54
25847: PPUSH
25848: LD_VAR 0 3
25852: PPUSH
25853: LD_INT 1
25855: PPUSH
25856: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
25860: LD_INT 55
25862: PPUSH
25863: LD_VAR 0 3
25867: PPUSH
25868: LD_INT 1
25870: PPUSH
25871: CALL_OW 322
// for i = 0 to 39 do
25875: LD_ADDR_VAR 0 4
25879: PUSH
25880: DOUBLE
25881: LD_INT 0
25883: DEC
25884: ST_TO_ADDR
25885: LD_INT 39
25887: PUSH
25888: FOR_TO
25889: IFFALSE 25910
// SetRestrict ( i , side , true ) ;
25891: LD_VAR 0 4
25895: PPUSH
25896: LD_VAR 0 3
25900: PPUSH
25901: LD_INT 1
25903: PPUSH
25904: CALL_OW 324
25908: GO 25888
25910: POP
25911: POP
// end ; else
25912: GO 25989
25914: POP
// begin for i = 1 to 73 do
25915: LD_ADDR_VAR 0 4
25919: PUSH
25920: DOUBLE
25921: LD_INT 1
25923: DEC
25924: ST_TO_ADDR
25925: LD_INT 73
25927: PUSH
25928: FOR_TO
25929: IFFALSE 25950
// SetTech ( i , side , state_enabled ) ;
25931: LD_VAR 0 4
25935: PPUSH
25936: LD_VAR 0 3
25940: PPUSH
25941: LD_INT 1
25943: PPUSH
25944: CALL_OW 322
25948: GO 25928
25950: POP
25951: POP
// for i = 0 to 39 do
25952: LD_ADDR_VAR 0 4
25956: PUSH
25957: DOUBLE
25958: LD_INT 0
25960: DEC
25961: ST_TO_ADDR
25962: LD_INT 39
25964: PUSH
25965: FOR_TO
25966: IFFALSE 25987
// SetRestrict ( i , side , true ) ;
25968: LD_VAR 0 4
25972: PPUSH
25973: LD_VAR 0 3
25977: PPUSH
25978: LD_INT 1
25980: PPUSH
25981: CALL_OW 324
25985: GO 25965
25987: POP
25988: POP
// end ; end ; end ;
25989: GO 21994
25991: POP
25992: POP
// end ; end_of_file
25993: LD_VAR 0 2
25997: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
25998: LD_INT 0
26000: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
26001: LD_VAR 0 1
26005: PPUSH
26006: LD_VAR 0 2
26010: PPUSH
26011: LD_VAR 0 3
26015: PPUSH
26016: LD_INT 0
26018: PPUSH
26019: CALL 26028 0 4
// end ;
26023: LD_VAR 0 4
26027: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
26028: LD_INT 0
26030: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
26031: LD_STRING initScore({
26033: PUSH
26034: LD_VAR 0 1
26038: PUSH
26039: LD_INT 1
26041: ARRAY
26042: STR
26043: PUSH
26044: LD_STRING ,
26046: STR
26047: PUSH
26048: LD_VAR 0 1
26052: PUSH
26053: LD_INT 2
26055: ARRAY
26056: STR
26057: PUSH
26058: LD_STRING ,
26060: STR
26061: PUSH
26062: LD_VAR 0 1
26066: PUSH
26067: LD_INT 3
26069: ARRAY
26070: STR
26071: PUSH
26072: LD_STRING ,
26074: STR
26075: PUSH
26076: LD_VAR 0 1
26080: PUSH
26081: LD_INT 4
26083: ARRAY
26084: STR
26085: PUSH
26086: LD_STRING ,
26088: STR
26089: PUSH
26090: LD_VAR 0 1
26094: PUSH
26095: LD_INT 5
26097: ARRAY
26098: STR
26099: PUSH
26100: LD_STRING ,
26102: STR
26103: PUSH
26104: LD_VAR 0 1
26108: PUSH
26109: LD_INT 6
26111: ARRAY
26112: STR
26113: PUSH
26114: LD_STRING ,
26116: STR
26117: PUSH
26118: LD_VAR 0 1
26122: PUSH
26123: LD_INT 7
26125: ARRAY
26126: STR
26127: PUSH
26128: LD_STRING ,
26130: STR
26131: PUSH
26132: LD_VAR 0 1
26136: PUSH
26137: LD_INT 8
26139: ARRAY
26140: STR
26141: PUSH
26142: LD_STRING },
26144: STR
26145: PUSH
26146: LD_VAR 0 2
26150: STR
26151: PUSH
26152: LD_STRING ,
26154: STR
26155: PUSH
26156: LD_VAR 0 3
26160: STR
26161: PUSH
26162: LD_STRING ,
26164: STR
26165: PUSH
26166: LD_VAR 0 4
26170: STR
26171: PUSH
26172: LD_STRING );
26174: STR
26175: PPUSH
26176: CALL_OW 559
// end ;
26180: LD_VAR 0 5
26184: RET
// export function LScore_Reset ( ) ; begin
26185: LD_INT 0
26187: PPUSH
// ToLua ( ResetScorebar(); ) ;
26188: LD_STRING ResetScorebar();
26190: PPUSH
26191: CALL_OW 559
// end ;
26195: LD_VAR 0 1
26199: RET
// export function LScore_Delete ( ID ) ; begin
26200: LD_INT 0
26202: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
26203: LD_STRING deleteScore(
26205: PUSH
26206: LD_VAR 0 1
26210: STR
26211: PUSH
26212: LD_STRING );
26214: STR
26215: PPUSH
26216: CALL_OW 559
// end ;
26220: LD_VAR 0 2
26224: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
26225: LD_INT 0
26227: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
26228: LD_STRING AST(
26230: PUSH
26231: LD_VAR 0 1
26235: STR
26236: PUSH
26237: LD_STRING ,
26239: STR
26240: PUSH
26241: LD_VAR 0 2
26245: STR
26246: PUSH
26247: LD_STRING ,
26249: STR
26250: PUSH
26251: LD_VAR 0 3
26255: STR
26256: PUSH
26257: LD_STRING ,);
26259: STR
26260: PPUSH
26261: CALL_OW 559
// end ;
26265: LD_VAR 0 4
26269: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
26270: LD_INT 0
26272: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
26273: LD_STRING AST(
26275: PUSH
26276: LD_VAR 0 1
26280: STR
26281: PUSH
26282: LD_STRING ,
26284: STR
26285: PUSH
26286: LD_VAR 0 2
26290: STR
26291: PUSH
26292: LD_STRING ,
26294: STR
26295: PUSH
26296: LD_VAR 0 3
26300: STR
26301: PUSH
26302: LD_STRING ,
26304: STR
26305: PUSH
26306: LD_VAR 0 4
26310: STR
26311: PUSH
26312: LD_STRING );
26314: STR
26315: PPUSH
26316: CALL_OW 559
// end ;
26320: LD_VAR 0 5
26324: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
26325: LD_INT 0
26327: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
26328: LD_STRING AST(
26330: PUSH
26331: LD_VAR 0 1
26335: STR
26336: PUSH
26337: LD_STRING ,
26339: STR
26340: PUSH
26341: LD_VAR 0 2
26345: STR
26346: PUSH
26347: LD_STRING ,
26349: STR
26350: PUSH
26351: LD_VAR 0 3
26355: STR
26356: PUSH
26357: LD_STRING ,
26359: STR
26360: PUSH
26361: LD_VAR 0 4
26365: STR
26366: PUSH
26367: LD_STRING ,
26369: STR
26370: PUSH
26371: LD_VAR 0 5
26375: STR
26376: PUSH
26377: LD_STRING );
26379: STR
26380: PPUSH
26381: CALL_OW 559
// end ;
26385: LD_VAR 0 6
26389: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
26390: LD_INT 0
26392: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
26393: LD_STRING ASRT(
26395: PUSH
26396: LD_VAR 0 1
26400: STR
26401: PUSH
26402: LD_STRING ,
26404: STR
26405: PUSH
26406: LD_VAR 0 2
26410: STR
26411: PUSH
26412: LD_STRING ,
26414: STR
26415: PUSH
26416: LD_VAR 0 3
26420: STR
26421: PUSH
26422: LD_STRING ,);
26424: STR
26425: PPUSH
26426: CALL_OW 559
// end ;
26430: LD_VAR 0 4
26434: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
26435: LD_INT 0
26437: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
26438: LD_STRING ASRT(
26440: PUSH
26441: LD_VAR 0 1
26445: STR
26446: PUSH
26447: LD_STRING ,
26449: STR
26450: PUSH
26451: LD_VAR 0 2
26455: STR
26456: PUSH
26457: LD_STRING ,
26459: STR
26460: PUSH
26461: LD_VAR 0 3
26465: STR
26466: PUSH
26467: LD_STRING ,
26469: STR
26470: PUSH
26471: LD_VAR 0 4
26475: STR
26476: PUSH
26477: LD_STRING );
26479: STR
26480: PPUSH
26481: CALL_OW 559
// end ;
26485: LD_VAR 0 5
26489: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
26490: LD_INT 0
26492: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
26493: LD_STRING ASRT(
26495: PUSH
26496: LD_VAR 0 1
26500: STR
26501: PUSH
26502: LD_STRING ,
26504: STR
26505: PUSH
26506: LD_VAR 0 2
26510: STR
26511: PUSH
26512: LD_STRING ,
26514: STR
26515: PUSH
26516: LD_VAR 0 3
26520: STR
26521: PUSH
26522: LD_STRING ,
26524: STR
26525: PUSH
26526: LD_VAR 0 4
26530: STR
26531: PUSH
26532: LD_STRING ,
26534: STR
26535: PUSH
26536: LD_VAR 0 5
26540: STR
26541: PUSH
26542: LD_STRING );
26544: STR
26545: PPUSH
26546: CALL_OW 559
// end ;
26550: LD_VAR 0 6
26554: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
26555: LD_INT 0
26557: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
26558: LD_STRING UST(
26560: PUSH
26561: LD_VAR 0 1
26565: STR
26566: PUSH
26567: LD_STRING ,
26569: STR
26570: PUSH
26571: LD_VAR 0 2
26575: STR
26576: PUSH
26577: LD_STRING );
26579: STR
26580: PPUSH
26581: CALL_OW 559
// end ;
26585: LD_VAR 0 3
26589: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
26590: LD_INT 0
26592: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
26593: LD_STRING UST(
26595: PUSH
26596: LD_VAR 0 1
26600: STR
26601: PUSH
26602: LD_STRING ,
26604: STR
26605: PUSH
26606: LD_VAR 0 2
26610: STR
26611: PUSH
26612: LD_STRING ,
26614: STR
26615: PUSH
26616: LD_VAR 0 3
26620: STR
26621: PUSH
26622: LD_STRING );
26624: STR
26625: PPUSH
26626: CALL_OW 559
// end ;
26630: LD_VAR 0 4
26634: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
26635: LD_INT 0
26637: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
26638: LD_STRING CCST(
26640: PUSH
26641: LD_VAR 0 1
26645: STR
26646: PUSH
26647: LD_STRING ,{
26649: STR
26650: PUSH
26651: LD_VAR 0 2
26655: STR
26656: PUSH
26657: LD_STRING ,
26659: STR
26660: PUSH
26661: LD_VAR 0 3
26665: STR
26666: PUSH
26667: LD_STRING ,
26669: STR
26670: PUSH
26671: LD_VAR 0 4
26675: STR
26676: PUSH
26677: LD_STRING });
26679: STR
26680: PPUSH
26681: CALL_OW 559
// end ;
26685: LD_VAR 0 5
26689: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
26690: LD_INT 0
26692: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
26693: LD_STRING CCST(
26695: PUSH
26696: LD_VAR 0 1
26700: STR
26701: PUSH
26702: LD_STRING ,
26704: STR
26705: PUSH
26706: LD_VAR 0 2
26710: STR
26711: PUSH
26712: LD_STRING );
26714: STR
26715: PPUSH
26716: CALL_OW 559
// end ;
26720: LD_VAR 0 3
26724: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
26725: LD_INT 0
26727: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
26728: LD_STRING ASSP(
26730: PUSH
26731: LD_VAR 0 1
26735: STR
26736: PUSH
26737: LD_STRING ,
26739: STR
26740: PUSH
26741: LD_VAR 0 2
26745: STR
26746: PUSH
26747: LD_STRING ,
26749: STR
26750: PUSH
26751: LD_VAR 0 3
26755: STR
26756: PUSH
26757: LD_STRING ,);
26759: STR
26760: PPUSH
26761: CALL_OW 559
// end ;
26765: LD_VAR 0 4
26769: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
26770: LD_INT 0
26772: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
26773: LD_STRING ASSP(
26775: PUSH
26776: LD_VAR 0 1
26780: STR
26781: PUSH
26782: LD_STRING ,
26784: STR
26785: PUSH
26786: LD_VAR 0 2
26790: STR
26791: PUSH
26792: LD_STRING ,
26794: STR
26795: PUSH
26796: LD_VAR 0 3
26800: STR
26801: PUSH
26802: LD_STRING ,
26804: STR
26805: PUSH
26806: LD_VAR 0 4
26810: STR
26811: PUSH
26812: LD_STRING );
26814: STR
26815: PPUSH
26816: CALL_OW 559
// end ;
26820: LD_VAR 0 5
26824: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
26825: LD_INT 0
26827: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
26828: LD_STRING ASSP(
26830: PUSH
26831: LD_VAR 0 1
26835: STR
26836: PUSH
26837: LD_STRING ,
26839: STR
26840: PUSH
26841: LD_VAR 0 2
26845: STR
26846: PUSH
26847: LD_STRING ,
26849: STR
26850: PUSH
26851: LD_VAR 0 3
26855: STR
26856: PUSH
26857: LD_STRING ,
26859: STR
26860: PUSH
26861: LD_VAR 0 4
26865: STR
26866: PUSH
26867: LD_STRING ,
26869: STR
26870: PUSH
26871: LD_VAR 0 5
26875: STR
26876: PUSH
26877: LD_STRING );
26879: STR
26880: PPUSH
26881: CALL_OW 559
// end ;
26885: LD_VAR 0 6
26889: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
26890: LD_INT 0
26892: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
26893: LD_STRING ASRSP(
26895: PUSH
26896: LD_VAR 0 1
26900: STR
26901: PUSH
26902: LD_STRING ,
26904: STR
26905: PUSH
26906: LD_VAR 0 2
26910: STR
26911: PUSH
26912: LD_STRING ,
26914: STR
26915: PUSH
26916: LD_VAR 0 3
26920: STR
26921: PUSH
26922: LD_STRING ,);
26924: STR
26925: PPUSH
26926: CALL_OW 559
// end ;
26930: LD_VAR 0 4
26934: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
26935: LD_INT 0
26937: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
26938: LD_STRING ASRSP(
26940: PUSH
26941: LD_VAR 0 1
26945: STR
26946: PUSH
26947: LD_STRING ,
26949: STR
26950: PUSH
26951: LD_VAR 0 2
26955: STR
26956: PUSH
26957: LD_STRING ,
26959: STR
26960: PUSH
26961: LD_VAR 0 3
26965: STR
26966: PUSH
26967: LD_STRING ,
26969: STR
26970: PUSH
26971: LD_VAR 0 4
26975: STR
26976: PUSH
26977: LD_STRING );
26979: STR
26980: PPUSH
26981: CALL_OW 559
// end ;
26985: LD_VAR 0 5
26989: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
26990: LD_INT 0
26992: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
26993: LD_STRING ASRSP(
26995: PUSH
26996: LD_VAR 0 1
27000: STR
27001: PUSH
27002: LD_STRING ,
27004: STR
27005: PUSH
27006: LD_VAR 0 2
27010: STR
27011: PUSH
27012: LD_STRING ,
27014: STR
27015: PUSH
27016: LD_VAR 0 3
27020: STR
27021: PUSH
27022: LD_STRING ,
27024: STR
27025: PUSH
27026: LD_VAR 0 4
27030: STR
27031: PUSH
27032: LD_STRING ,
27034: STR
27035: PUSH
27036: LD_VAR 0 5
27040: STR
27041: PUSH
27042: LD_STRING );
27044: STR
27045: PPUSH
27046: CALL_OW 559
// end ;
27050: LD_VAR 0 6
27054: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
27055: LD_INT 0
27057: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
27058: LD_STRING USSP(
27060: PUSH
27061: LD_VAR 0 1
27065: STR
27066: PUSH
27067: LD_STRING ,
27069: STR
27070: PUSH
27071: LD_VAR 0 2
27075: STR
27076: PUSH
27077: LD_STRING );
27079: STR
27080: PPUSH
27081: CALL_OW 559
// end ;
27085: LD_VAR 0 3
27089: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
27090: LD_INT 0
27092: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
27093: LD_STRING USSP(
27095: PUSH
27096: LD_VAR 0 1
27100: STR
27101: PUSH
27102: LD_STRING ,
27104: STR
27105: PUSH
27106: LD_VAR 0 2
27110: STR
27111: PUSH
27112: LD_STRING ,
27114: STR
27115: PUSH
27116: LD_VAR 0 3
27120: STR
27121: PUSH
27122: LD_STRING );
27124: STR
27125: PPUSH
27126: CALL_OW 559
// end ;
27130: LD_VAR 0 4
27134: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
27135: LD_INT 0
27137: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
27138: LD_STRING CCSSP(
27140: PUSH
27141: LD_VAR 0 1
27145: STR
27146: PUSH
27147: LD_STRING ,{
27149: STR
27150: PUSH
27151: LD_VAR 0 2
27155: STR
27156: PUSH
27157: LD_STRING ,
27159: STR
27160: PUSH
27161: LD_VAR 0 3
27165: STR
27166: PUSH
27167: LD_STRING ,
27169: STR
27170: PUSH
27171: LD_VAR 0 4
27175: STR
27176: PUSH
27177: LD_STRING });
27179: STR
27180: PPUSH
27181: CALL_OW 559
// end ;
27185: LD_VAR 0 5
27189: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
27190: LD_INT 0
27192: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
27193: LD_STRING CCSSP(
27195: PUSH
27196: LD_VAR 0 1
27200: STR
27201: PUSH
27202: LD_STRING ,
27204: STR
27205: PUSH
27206: LD_VAR 0 2
27210: STR
27211: PUSH
27212: LD_STRING );
27214: STR
27215: PPUSH
27216: CALL_OW 559
// end ;
27220: LD_VAR 0 3
27224: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
27225: LD_INT 0
27227: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
27228: LD_STRING ASP(
27230: PUSH
27231: LD_VAR 0 1
27235: STR
27236: PUSH
27237: LD_STRING ,
27239: STR
27240: PUSH
27241: LD_VAR 0 2
27245: STR
27246: PUSH
27247: LD_STRING ,
27249: STR
27250: PUSH
27251: LD_VAR 0 3
27255: STR
27256: PUSH
27257: LD_STRING );
27259: STR
27260: PPUSH
27261: CALL_OW 559
// end ;
27265: LD_VAR 0 4
27269: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
27270: LD_INT 0
27272: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
27273: LD_STRING USP(
27275: PUSH
27276: LD_VAR 0 1
27280: STR
27281: PUSH
27282: LD_STRING ,
27284: STR
27285: PUSH
27286: LD_VAR 0 2
27290: STR
27291: PUSH
27292: LD_STRING ,
27294: STR
27295: PUSH
27296: LD_VAR 0 3
27300: STR
27301: PUSH
27302: LD_STRING );
27304: STR
27305: PPUSH
27306: CALL_OW 559
// end ;
27310: LD_VAR 0 4
27314: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
27315: LD_INT 0
27317: PPUSH
27318: PPUSH
// for i = 1 to 8 do
27319: LD_ADDR_VAR 0 4
27323: PUSH
27324: DOUBLE
27325: LD_INT 1
27327: DEC
27328: ST_TO_ADDR
27329: LD_INT 8
27331: PUSH
27332: FOR_TO
27333: IFFALSE 27380
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
27335: LD_STRING USP(
27337: PUSH
27338: LD_VAR 0 1
27342: STR
27343: PUSH
27344: LD_STRING ,
27346: STR
27347: PUSH
27348: LD_VAR 0 4
27352: STR
27353: PUSH
27354: LD_STRING ,
27356: STR
27357: PUSH
27358: LD_VAR 0 2
27362: PUSH
27363: LD_VAR 0 4
27367: ARRAY
27368: STR
27369: PUSH
27370: LD_STRING );
27372: STR
27373: PPUSH
27374: CALL_OW 559
27378: GO 27332
27380: POP
27381: POP
// end ;
27382: LD_VAR 0 3
27386: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
27387: LD_INT 0
27389: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
27390: LD_STRING ASC(
27392: PUSH
27393: LD_VAR 0 1
27397: STR
27398: PUSH
27399: LD_STRING ,
27401: STR
27402: PUSH
27403: LD_VAR 0 2
27407: STR
27408: PUSH
27409: LD_STRING ,
27411: STR
27412: PUSH
27413: LD_VAR 0 3
27417: STR
27418: PUSH
27419: LD_STRING ,
27421: STR
27422: PUSH
27423: LD_VAR 0 4
27427: STR
27428: PUSH
27429: LD_STRING );
27431: STR
27432: PPUSH
27433: CALL_OW 559
// end ;
27437: LD_VAR 0 5
27441: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
27442: LD_INT 0
27444: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
27445: LD_STRING USC(
27447: PUSH
27448: LD_VAR 0 1
27452: STR
27453: PUSH
27454: LD_STRING ,{
27456: STR
27457: PUSH
27458: LD_VAR 0 2
27462: PUSH
27463: LD_INT 1
27465: ARRAY
27466: STR
27467: PUSH
27468: LD_STRING ,
27470: STR
27471: PUSH
27472: LD_VAR 0 2
27476: PUSH
27477: LD_INT 2
27479: ARRAY
27480: STR
27481: PUSH
27482: LD_STRING ,
27484: STR
27485: PUSH
27486: LD_VAR 0 2
27490: PUSH
27491: LD_INT 3
27493: ARRAY
27494: STR
27495: PUSH
27496: LD_STRING ,
27498: STR
27499: PUSH
27500: LD_VAR 0 2
27504: PUSH
27505: LD_INT 4
27507: ARRAY
27508: STR
27509: PUSH
27510: LD_STRING ,
27512: STR
27513: PUSH
27514: LD_VAR 0 2
27518: PUSH
27519: LD_INT 5
27521: ARRAY
27522: STR
27523: PUSH
27524: LD_STRING ,
27526: STR
27527: PUSH
27528: LD_VAR 0 2
27532: PUSH
27533: LD_INT 6
27535: ARRAY
27536: STR
27537: PUSH
27538: LD_STRING ,
27540: STR
27541: PUSH
27542: LD_VAR 0 2
27546: PUSH
27547: LD_INT 7
27549: ARRAY
27550: STR
27551: PUSH
27552: LD_STRING ,
27554: STR
27555: PUSH
27556: LD_VAR 0 2
27560: PUSH
27561: LD_INT 8
27563: ARRAY
27564: STR
27565: PUSH
27566: LD_STRING });
27568: STR
27569: PPUSH
27570: CALL_OW 559
// end ; end_of_file
27574: LD_VAR 0 3
27578: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
27579: LD_INT 0
27581: PPUSH
27582: PPUSH
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
27588: PPUSH
27589: PPUSH
// for i := 1 to 8 do
27590: LD_ADDR_VAR 0 2
27594: PUSH
27595: DOUBLE
27596: LD_INT 1
27598: DEC
27599: ST_TO_ADDR
27600: LD_INT 8
27602: PUSH
27603: FOR_TO
27604: IFFALSE 27988
// begin if Side_Positions [ i ] then
27606: LD_EXP 23
27610: PUSH
27611: LD_VAR 0 2
27615: ARRAY
27616: IFFALSE 27986
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
27618: LD_ADDR_VAR 0 7
27622: PUSH
27623: LD_INT 22
27625: PUSH
27626: LD_VAR 0 2
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 21
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PPUSH
27649: CALL_OW 69
27653: PUSH
27654: LD_INT 0
27656: PLUS
27657: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27658: LD_ADDR_VAR 0 9
27662: PUSH
27663: LD_INT 22
27665: PUSH
27666: LD_VAR 0 2
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 2
27677: PUSH
27678: LD_INT 30
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 30
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PPUSH
27707: CALL_OW 69
27711: ST_TO_ADDR
// crates := 0 ;
27712: LD_ADDR_VAR 0 4
27716: PUSH
27717: LD_INT 0
27719: ST_TO_ADDR
// oil := 0 ;
27720: LD_ADDR_VAR 0 5
27724: PUSH
27725: LD_INT 0
27727: ST_TO_ADDR
// sib := 0 ;
27728: LD_ADDR_VAR 0 6
27732: PUSH
27733: LD_INT 0
27735: ST_TO_ADDR
// if bases then
27736: LD_VAR 0 9
27740: IFFALSE 27846
// begin for j in bases do
27742: LD_ADDR_VAR 0 3
27746: PUSH
27747: LD_VAR 0 9
27751: PUSH
27752: FOR_IN
27753: IFFALSE 27844
// begin base := GetBase ( j ) ;
27755: LD_ADDR_VAR 0 8
27759: PUSH
27760: LD_VAR 0 3
27764: PPUSH
27765: CALL_OW 274
27769: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
27770: LD_ADDR_VAR 0 4
27774: PUSH
27775: LD_VAR 0 4
27779: PUSH
27780: LD_VAR 0 8
27784: PPUSH
27785: LD_INT 1
27787: PPUSH
27788: CALL_OW 275
27792: PLUS
27793: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
27794: LD_ADDR_VAR 0 5
27798: PUSH
27799: LD_VAR 0 5
27803: PUSH
27804: LD_VAR 0 8
27808: PPUSH
27809: LD_INT 2
27811: PPUSH
27812: CALL_OW 275
27816: PLUS
27817: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
27818: LD_ADDR_VAR 0 6
27822: PUSH
27823: LD_VAR 0 6
27827: PUSH
27828: LD_VAR 0 8
27832: PPUSH
27833: LD_INT 3
27835: PPUSH
27836: CALL_OW 275
27840: PLUS
27841: ST_TO_ADDR
// end ;
27842: GO 27752
27844: POP
27845: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
27846: LD_STRING setSpecText(
27848: PUSH
27849: LD_VAR 0 2
27853: STR
27854: PUSH
27855: LD_STRING ,
27857: STR
27858: PUSH
27859: LD_INT 2
27861: STR
27862: PUSH
27863: LD_STRING ,
27865: STR
27866: PUSH
27867: LD_VAR 0 4
27871: STR
27872: PUSH
27873: LD_STRING )
27875: STR
27876: PPUSH
27877: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
27881: LD_STRING setSpecText(
27883: PUSH
27884: LD_VAR 0 2
27888: STR
27889: PUSH
27890: LD_STRING ,
27892: STR
27893: PUSH
27894: LD_INT 3
27896: STR
27897: PUSH
27898: LD_STRING ,
27900: STR
27901: PUSH
27902: LD_VAR 0 5
27906: STR
27907: PUSH
27908: LD_STRING )
27910: STR
27911: PPUSH
27912: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
27916: LD_STRING setSpecText(
27918: PUSH
27919: LD_VAR 0 2
27923: STR
27924: PUSH
27925: LD_STRING ,
27927: STR
27928: PUSH
27929: LD_INT 4
27931: STR
27932: PUSH
27933: LD_STRING ,
27935: STR
27936: PUSH
27937: LD_VAR 0 6
27941: STR
27942: PUSH
27943: LD_STRING )
27945: STR
27946: PPUSH
27947: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
27951: LD_STRING setSpecText(
27953: PUSH
27954: LD_VAR 0 2
27958: STR
27959: PUSH
27960: LD_STRING ,
27962: STR
27963: PUSH
27964: LD_INT 5
27966: STR
27967: PUSH
27968: LD_STRING ,
27970: STR
27971: PUSH
27972: LD_VAR 0 7
27976: STR
27977: PUSH
27978: LD_STRING )
27980: STR
27981: PPUSH
27982: CALL_OW 559
// end ; end ;
27986: GO 27603
27988: POP
27989: POP
// end ;
27990: LD_VAR 0 1
27994: RET
// every 0 0$1 do
27995: GO 27997
27997: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
27998: LD_STRING setSpecLogoNumber(
28000: PUSH
28001: LD_INT 2
28003: STR
28004: PUSH
28005: LD_STRING ,
28007: STR
28008: PUSH
28009: LD_INT 1
28011: STR
28012: PUSH
28013: LD_STRING )
28015: STR
28016: PPUSH
28017: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
28021: LD_STRING setSpecLogoNumber(
28023: PUSH
28024: LD_INT 3
28026: STR
28027: PUSH
28028: LD_STRING ,
28030: STR
28031: PUSH
28032: LD_INT 2
28034: STR
28035: PUSH
28036: LD_STRING )
28038: STR
28039: PPUSH
28040: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
28044: LD_STRING setSpecLogoNumber(
28046: PUSH
28047: LD_INT 4
28049: STR
28050: PUSH
28051: LD_STRING ,
28053: STR
28054: PUSH
28055: LD_INT 3
28057: STR
28058: PUSH
28059: LD_STRING )
28061: STR
28062: PPUSH
28063: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
28067: LD_STRING setSpecLogoNumber(
28069: PUSH
28070: LD_INT 5
28072: STR
28073: PUSH
28074: LD_STRING ,
28076: STR
28077: PUSH
28078: LD_INT 4
28080: STR
28081: PUSH
28082: LD_STRING )
28084: STR
28085: PPUSH
28086: CALL_OW 559
// end ;
28090: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
28091: LD_INT 2
28093: PUSH
28094: LD_INT 30
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 30
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: LIST
28118: PPUSH
28119: CALL_OW 69
28123: IFFALSE 28133
28125: GO 28127
28127: DISABLE
// begin enable ;
28128: ENABLE
// UpdateSpectatorBar ;
28129: CALL 27579 0 0
// end ;
28133: END
