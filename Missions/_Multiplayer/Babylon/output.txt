// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 46
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 46
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 356: LD_ADDR_EXP 25
 360: PUSH
 361: LD_EXP 21
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: EMPTY
 370: LIST
 371: DIFF
 372: PUSH
 373: LD_INT 1
 375: GREATER
 376: ST_TO_ADDR
// if Multiplayer then
 377: LD_OWVAR 4
 381: IFFALSE 653
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 383: LD_ADDR_EXP 48
 387: PUSH
 388: LD_INT 0
 390: PPUSH
 391: CALL_OW 426
 395: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 396: LD_ADDR_EXP 49
 400: PUSH
 401: LD_INT 1
 403: PPUSH
 404: CALL_OW 426
 408: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 409: LD_ADDR_EXP 50
 413: PUSH
 414: LD_INT 2
 416: PPUSH
 417: CALL_OW 426
 421: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 422: LD_ADDR_EXP 51
 426: PUSH
 427: LD_INT 3
 429: PPUSH
 430: CALL_OW 426
 434: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 435: LD_ADDR_EXP 52
 439: PUSH
 440: LD_INT 4
 442: PPUSH
 443: CALL_OW 426
 447: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 448: LD_ADDR_EXP 53
 452: PUSH
 453: LD_INT 5
 455: PPUSH
 456: CALL_OW 426
 460: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 461: LD_ADDR_EXP 55
 465: PUSH
 466: LD_INT 10
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 474: LD_ADDR_EXP 56
 478: PUSH
 479: LD_INT 11
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 487: LD_ADDR_EXP 57
 491: PUSH
 492: LD_INT 12
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 500: LD_ADDR_EXP 59
 504: PUSH
 505: LD_INT 13
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 513: LD_ADDR_EXP 58
 517: PUSH
 518: LD_INT 14
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 526: LD_ADDR_EXP 60
 530: PUSH
 531: LD_INT 15
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 539: LD_ADDR_EXP 1
 543: PUSH
 544: LD_INT 6
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 552: LD_ADDR_EXP 2
 556: PUSH
 557: LD_INT 7
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 565: LD_ADDR_EXP 4
 569: PUSH
 570: LD_INT 8
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 578: LD_ADDR_EXP 3
 582: PUSH
 583: LD_INT 9
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 591: LD_ADDR_EXP 5
 595: PUSH
 596: LD_INT 16
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 604: LD_ADDR_EXP 6
 608: PUSH
 609: LD_INT 17
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 617: LD_ADDR_EXP 61
 621: PUSH
 622: LD_INT 20
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 630: LD_ADDR_VAR 0 3
 634: PUSH
 635: LD_INT 22
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_win_rules = 0 ;
 643: LD_ADDR_EXP 19
 647: PUSH
 648: LD_INT 0
 650: ST_TO_ADDR
// end else
 651: GO 825
// begin Randomize ;
 653: CALL_OW 10
// def_base_level := 2 ;
 657: LD_ADDR_EXP 48
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_amount_of_people := 10 ;
 665: LD_ADDR_EXP 49
 669: PUSH
 670: LD_INT 10
 672: ST_TO_ADDR
// def_skill_level := 1 ;
 673: LD_ADDR_EXP 50
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_starting_resources := 2 ;
 681: LD_ADDR_EXP 51
 685: PUSH
 686: LD_INT 2
 688: ST_TO_ADDR
// def_shipments_density := 50 ;
 689: LD_ADDR_EXP 52
 693: PUSH
 694: LD_INT 50
 696: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 697: LD_ADDR_EXP 53
 701: PUSH
 702: LD_INT 0
 704: ST_TO_ADDR
// def_shared_vision := 1 ;
 705: LD_ADDR_EXP 55
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_morale_flags := 1 ;
 713: LD_ADDR_EXP 56
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// def_siberite_detection := 1 ;
 721: LD_ADDR_EXP 57
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 729: LD_ADDR_EXP 59
 733: PUSH
 734: LD_INT 3
 736: ST_TO_ADDR
// def_people_respawning := 2 ;
 737: LD_ADDR_EXP 58
 741: PUSH
 742: LD_INT 2
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 60
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_artefact_one := 1 ;
 753: LD_ADDR_EXP 1
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_artefact_two := 1 ;
 761: LD_ADDR_EXP 2
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 769: LD_ADDR_EXP 4
 773: PUSH
 774: LD_INT 2
 776: ST_TO_ADDR
// def_artefact_three := 1 ;
 777: LD_ADDR_EXP 3
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// def_kings_age := 1 ;
 785: LD_ADDR_EXP 5
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_public_score := 0 ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 0
 800: ST_TO_ADDR
// def_builduptime := 1 ;
 801: LD_ADDR_EXP 61
 805: PUSH
 806: LD_INT 1
 808: ST_TO_ADDR
// tech_level = 4 ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// def_win_rules = 0 ;
 817: LD_ADDR_EXP 19
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// end ; InitGameRules ;
 825: CALL 12942 0 0
// if def_game_rules = 0 then
 829: LD_EXP 47
 833: PUSH
 834: LD_INT 0
 836: EQUAL
 837: IFFALSE 864
// begin if isSGUI then
 839: LD_OWVAR 83
 843: IFFALSE 851
// setMpTechs ( ) else
 845: CALL 20693 0 0
 849: GO 864
// begin SetMpTechLevel ( tech_level + 1 ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: PPUSH
 860: CALL 20840 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 864: LD_ADDR_EXP 7
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: LD_INT 1
 874: PUSH
 875: LD_INT 1
 877: PUSH
 878: LD_INT 1
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: PUSH
 887: LD_EXP 48
 891: PUSH
 892: LD_INT 1
 894: PLUS
 895: ARRAY
 896: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 897: LD_ADDR_EXP 8
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: LD_INT 2
 910: PUSH
 911: LD_INT 3
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_EXP 48
 924: PUSH
 925: LD_INT 1
 927: PLUS
 928: ARRAY
 929: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 930: LD_ADDR_EXP 9
 934: PUSH
 935: LD_EXP 49
 939: PUSH
 940: LD_INT 4
 942: PLUS
 943: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 944: LD_ADDR_EXP 10
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: LD_INT 3
 954: PUSH
 955: LD_INT 4
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: PUSH
 967: LD_EXP 50
 971: PUSH
 972: LD_INT 1
 974: PLUS
 975: ARRAY
 976: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 977: LD_ADDR_EXP 12
 981: PUSH
 982: LD_INT 0
 984: PUSH
 985: LD_INT 0
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 0
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 50
1012: PUSH
1013: LD_INT 20
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 40
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_EXP 51
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1054: LD_ADDR_EXP 11
1058: PUSH
1059: LD_INT 10
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: LD_INT 7
1067: PUSH
1068: LD_INT 14
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 6
1077: PUSH
1078: LD_INT 12
1080: PUSH
1081: LD_INT 18
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 5
1091: PUSH
1092: LD_INT 10
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_EXP 51
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: ARRAY
1122: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1123: LD_ADDR_EXP 13
1127: PUSH
1128: LD_INT 150
1130: PUSH
1131: LD_EXP 52
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: MINUS
1140: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1141: LD_ADDR_EXP 15
1145: PUSH
1146: LD_INT 0
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 2
1154: PUSH
1155: LD_INT 3
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 59
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1174: LD_ADDR_EXP 16
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 12600
1184: PUSH
1185: LD_INT 2100
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 58
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1203: LD_ADDR_EXP 17
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 21000
1213: PUSH
1214: LD_INT 4200
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_EXP 58
1226: PUSH
1227: LD_INT 1
1229: PLUS
1230: ARRAY
1231: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1232: LD_ADDR_EXP 14
1236: PUSH
1237: LD_INT 1
1239: NEG
1240: PUSH
1241: LD_INT 350
1243: PUSH
1244: LD_INT 700
1246: PUSH
1247: LD_INT 1400
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 56
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// battle_flags_id := [ ] ;
1270: LD_ADDR_EXP 33
1274: PUSH
1275: EMPTY
1276: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1277: LD_ADDR_EXP 18
1281: PUSH
1282: LD_INT 0
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 63000
1290: PUSH
1291: LD_INT 126000
1293: PUSH
1294: LD_INT 189000
1296: PUSH
1297: LD_INT 252000
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: PUSH
1308: LD_EXP 60
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1318: LD_ADDR_EXP 20
1322: PUSH
1323: LD_INT 500
1325: PUSH
1326: LD_INT 1000
1328: PUSH
1329: LD_INT 1500
1331: PUSH
1332: LD_INT 2000
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 5
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1351: LD_EXP 60
1355: PUSH
1356: LD_INT 0
1358: EQUAL
1359: IFFALSE 1371
// siberite_bomb_Delay = 0 else
1361: LD_ADDR_EXP 18
1365: PUSH
1366: LD_INT 0
1368: ST_TO_ADDR
1369: GO 1393
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1371: LD_ADDR_EXP 18
1375: PUSH
1376: LD_EXP 60
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: LD_INT 21000
1387: MUL
1388: PUSH
1389: LD_INT 1
1391: PLUS
1392: ST_TO_ADDR
// end ;
1393: LD_VAR 0 1
1397: RET
// function init_map ; var i ; begin
1398: LD_INT 0
1400: PPUSH
1401: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1402: LD_ADDR_EXP 32
1406: PUSH
1407: LD_INT 43
1409: PUSH
1410: LD_INT 9
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 123
1419: PUSH
1420: LD_INT 10
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 113
1429: PUSH
1430: LD_INT 155
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PUSH
1437: LD_INT 186
1439: PUSH
1440: LD_INT 133
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1453: LD_ADDR_EXP 29
1457: PUSH
1458: LD_INT 18
1460: PUSH
1461: LD_INT 17
1463: PUSH
1464: LD_INT 2
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 156
1474: PUSH
1475: LD_INT 20
1477: PUSH
1478: LD_INT 3
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 83
1488: PUSH
1489: LD_INT 140
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 216
1502: PUSH
1503: LD_INT 143
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// for i in depot_def do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: LD_EXP 29
1529: PUSH
1530: FOR_IN
1531: IFFALSE 1605
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1533: LD_ADDR_EXP 31
1537: PUSH
1538: LD_EXP 31
1542: PUSH
1543: LD_VAR 0 2
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 2
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 6
1563: PPUSH
1564: CALL_OW 272
1568: PUSH
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 2
1576: ARRAY
1577: PPUSH
1578: LD_VAR 0 2
1582: PUSH
1583: LD_INT 3
1585: ARRAY
1586: PPUSH
1587: LD_INT 6
1589: PPUSH
1590: CALL_OW 273
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: ADD
1602: ST_TO_ADDR
1603: GO 1530
1605: POP
1606: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1607: LD_ADDR_EXP 30
1611: PUSH
1612: LD_INT 30
1614: PUSH
1615: LD_INT 36
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 44
1628: PUSH
1629: LD_INT 21
1631: PUSH
1632: LD_INT 4
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 43
1642: PUSH
1643: LD_INT 33
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 165
1661: PUSH
1662: LD_INT 34
1664: PUSH
1665: LD_INT 0
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 137
1675: PUSH
1676: LD_INT 18
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 153
1689: PUSH
1690: LD_INT 37
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 86
1708: PUSH
1709: LD_INT 120
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 105
1722: PUSH
1723: LD_INT 147
1725: PUSH
1726: LD_INT 4
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 68
1736: PUSH
1737: LD_INT 118
1739: PUSH
1740: LD_INT 2
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 199
1755: PUSH
1756: LD_INT 144
1758: PUSH
1759: LD_INT 1
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 207
1769: PUSH
1770: LD_INT 119
1772: PUSH
1773: LD_INT 3
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 195
1783: PUSH
1784: LD_INT 118
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: ST_TO_ADDR
// if def_extra_oil_deposits then
1806: LD_EXP 53
1810: IFFALSE 1854
// for i in extra_oil_deposits_locations do
1812: LD_ADDR_VAR 0 2
1816: PUSH
1817: LD_EXP 32
1821: PUSH
1822: FOR_IN
1823: IFFALSE 1852
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , mat_oil ) ;
1825: LD_VAR 0 2
1829: PUSH
1830: LD_INT 1
1832: ARRAY
1833: PPUSH
1834: LD_VAR 0 2
1838: PUSH
1839: LD_INT 2
1841: ARRAY
1842: PPUSH
1843: LD_INT 2
1845: PPUSH
1846: CALL_OW 62
1850: GO 1822
1852: POP
1853: POP
// end ;
1854: LD_VAR 0 1
1858: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1859: LD_INT 0
1861: PPUSH
1862: PPUSH
1863: PPUSH
// if not Team_Game then
1864: LD_EXP 25
1868: NOT
1869: IFFALSE 1967
// begin for i = 1 to 8 do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_INT 8
1883: PUSH
1884: FOR_TO
1885: IFFALSE 1963
// for j = 1 to 8 do
1887: LD_ADDR_VAR 0 3
1891: PUSH
1892: DOUBLE
1893: LD_INT 1
1895: DEC
1896: ST_TO_ADDR
1897: LD_INT 8
1899: PUSH
1900: FOR_TO
1901: IFFALSE 1959
// if i <> j then
1903: LD_VAR 0 2
1907: PUSH
1908: LD_VAR 0 3
1912: NONEQUAL
1913: IFFALSE 1937
// SetAttitude ( i , j , att_neutral , true ) else
1915: LD_VAR 0 2
1919: PPUSH
1920: LD_VAR 0 3
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: CALL_OW 80
1935: GO 1957
// SetAttitude ( i , j , att_friend , true ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_VAR 0 3
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: LD_INT 1
1952: PPUSH
1953: CALL_OW 80
1957: GO 1900
1959: POP
1960: POP
1961: GO 1884
1963: POP
1964: POP
// end else
1965: GO 2142
// begin if def_shared_vision then
1967: LD_EXP 55
1971: IFFALSE 2036
// begin for i in Teams do
1973: LD_ADDR_VAR 0 2
1977: PUSH
1978: LD_EXP 22
1982: PUSH
1983: FOR_IN
1984: IFFALSE 2034
// for j = 2 to i do
1986: LD_ADDR_VAR 0 3
1990: PUSH
1991: DOUBLE
1992: LD_INT 2
1994: DEC
1995: ST_TO_ADDR
1996: LD_VAR 0 2
2000: PUSH
2001: FOR_TO
2002: IFFALSE 2030
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2004: LD_VAR 0 2
2008: PUSH
2009: LD_VAR 0 3
2013: ARRAY
2014: PPUSH
2015: LD_VAR 0 2
2019: PUSH
2020: LD_INT 1
2022: ARRAY
2023: PPUSH
2024: CALL_OW 343
2028: GO 2001
2030: POP
2031: POP
2032: GO 1983
2034: POP
2035: POP
// end ; for i = 1 to 8 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_INT 1
2044: DEC
2045: ST_TO_ADDR
2046: LD_INT 8
2048: PUSH
2049: FOR_TO
2050: IFFALSE 2140
// for j = 1 to 8 do
2052: LD_ADDR_VAR 0 3
2056: PUSH
2057: DOUBLE
2058: LD_INT 1
2060: DEC
2061: ST_TO_ADDR
2062: LD_INT 8
2064: PUSH
2065: FOR_TO
2066: IFFALSE 2136
// if Side_Teams [ i ] = Side_Teams [ j ] then
2068: LD_EXP 21
2072: PUSH
2073: LD_VAR 0 2
2077: ARRAY
2078: PUSH
2079: LD_EXP 21
2083: PUSH
2084: LD_VAR 0 3
2088: ARRAY
2089: EQUAL
2090: IFFALSE 2114
// SetAttitude ( i , j , att_friend , true ) else
2092: LD_VAR 0 2
2096: PPUSH
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 1
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: CALL_OW 80
2112: GO 2134
// SetAttitude ( i , j , att_enemy , true ) ;
2114: LD_VAR 0 2
2118: PPUSH
2119: LD_VAR 0 3
2123: PPUSH
2124: LD_INT 2
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: CALL_OW 80
2134: GO 2065
2136: POP
2137: POP
2138: GO 2049
2140: POP
2141: POP
// end ; end ;
2142: LD_VAR 0 1
2146: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2147: LD_INT 0
2149: PPUSH
2150: PPUSH
2151: PPUSH
2152: PPUSH
// result := [ ] ;
2153: LD_ADDR_VAR 0 7
2157: PUSH
2158: EMPTY
2159: ST_TO_ADDR
// for i := 1 to count do
2160: LD_ADDR_VAR 0 8
2164: PUSH
2165: DOUBLE
2166: LD_INT 1
2168: DEC
2169: ST_TO_ADDR
2170: LD_VAR 0 1
2174: PUSH
2175: FOR_TO
2176: IFFALSE 2594
// begin uc_direction := Rand ( 0 , 5 ) ;
2178: LD_ADDR_OWVAR 24
2182: PUSH
2183: LD_INT 0
2185: PPUSH
2186: LD_INT 5
2188: PPUSH
2189: CALL_OW 12
2193: ST_TO_ADDR
// if commander then
2194: LD_LOC 1
2198: IFFALSE 2307
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2200: LD_ADDR_OWVAR 26
2204: PUSH
2205: LD_OWVAR 19
2209: PUSH
2210: LD_OWVAR 20
2214: ARRAY
2215: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2216: LD_INT 1
2218: PPUSH
2219: LD_INT 2
2221: PPUSH
2222: CALL_OW 12
2226: PPUSH
2227: LD_VAR 0 2
2231: PPUSH
2232: LD_EXP 10
2236: PUSH
2237: LD_INT 2
2239: PLUS
2240: PPUSH
2241: CALL_OW 380
// hc_importance := 105 ;
2245: LD_ADDR_OWVAR 32
2249: PUSH
2250: LD_INT 105
2252: ST_TO_ADDR
// commander := false ;
2253: LD_ADDR_LOC 1
2257: PUSH
2258: LD_INT 0
2260: ST_TO_ADDR
// if Multiplayer then
2261: LD_OWVAR 4
2265: IFFALSE 2305
// begin hc_gallery := MULTIAVATARS ;
2267: LD_ADDR_OWVAR 33
2271: PUSH
2272: LD_STRING MULTIAVATARS
2274: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2275: LD_ADDR_OWVAR 34
2279: PUSH
2280: LD_OWVAR 20
2284: PPUSH
2285: CALL_OW 525
2289: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2290: LD_ADDR_OWVAR 27
2294: PUSH
2295: LD_OWVAR 20
2299: PPUSH
2300: CALL_OW 526
2304: ST_TO_ADDR
// end ; end else
2305: GO 2370
// begin hc_name :=  ;
2307: LD_ADDR_OWVAR 26
2311: PUSH
2312: LD_STRING 
2314: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2315: LD_INT 1
2317: PPUSH
2318: LD_INT 2
2320: PPUSH
2321: CALL_OW 12
2325: PPUSH
2326: LD_VAR 0 2
2330: PPUSH
2331: LD_EXP 10
2335: PPUSH
2336: CALL_OW 380
// hc_importance := 0 ;
2340: LD_ADDR_OWVAR 32
2344: PUSH
2345: LD_INT 0
2347: ST_TO_ADDR
// if Multiplayer then
2348: LD_OWVAR 4
2352: IFFALSE 2370
// begin hc_gallery :=  ;
2354: LD_ADDR_OWVAR 33
2358: PUSH
2359: LD_STRING 
2361: ST_TO_ADDR
// hc_face_number := 0 ;
2362: LD_ADDR_OWVAR 34
2366: PUSH
2367: LD_INT 0
2369: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2370: LD_ADDR_VAR 0 10
2374: PUSH
2375: CALL_OW 44
2379: ST_TO_ADDR
// if global_defined then
2380: LD_LOC 3
2384: IFFALSE 2524
// begin if ( cl = class_soldier ) then
2386: LD_VAR 0 2
2390: PUSH
2391: LD_INT 1
2393: EQUAL
2394: IFFALSE 2414
// j := i + soldiers_created else
2396: LD_ADDR_VAR 0 9
2400: PUSH
2401: LD_VAR 0 8
2405: PUSH
2406: LD_LOC 4
2410: PLUS
2411: ST_TO_ADDR
2412: GO 2424
// j := i ;
2414: LD_ADDR_VAR 0 9
2418: PUSH
2419: LD_VAR 0 8
2423: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2424: LD_LOC 2
2428: PUSH
2429: LD_VAR 0 2
2433: ARRAY
2434: PUSH
2435: LD_VAR 0 9
2439: ARRAY
2440: PPUSH
2441: LD_VAR 0 10
2445: PPUSH
2446: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2450: LD_VAR 0 10
2454: PPUSH
2455: LD_INT 2
2457: PPUSH
2458: LD_LOC 2
2462: PUSH
2463: LD_VAR 0 2
2467: ARRAY
2468: PUSH
2469: LD_VAR 0 9
2473: ARRAY
2474: PPUSH
2475: LD_INT 2
2477: PPUSH
2478: CALL_OW 260
2482: PPUSH
2483: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2487: LD_VAR 0 10
2491: PPUSH
2492: LD_INT 1
2494: PPUSH
2495: LD_LOC 2
2499: PUSH
2500: LD_VAR 0 2
2504: ARRAY
2505: PUSH
2506: LD_VAR 0 9
2510: ARRAY
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 260
2519: PPUSH
2520: CALL_OW 239
// end ; if building then
2524: LD_VAR 0 6
2528: IFFALSE 2546
// PlaceHumanInUnit ( un , building ) else
2530: LD_VAR 0 10
2534: PPUSH
2535: LD_VAR 0 6
2539: PPUSH
2540: CALL_OW 52
2544: GO 2573
// PlaceUnitXYR ( un , x , y , r , false ) ;
2546: LD_VAR 0 10
2550: PPUSH
2551: LD_VAR 0 3
2555: PPUSH
2556: LD_VAR 0 4
2560: PPUSH
2561: LD_VAR 0 5
2565: PPUSH
2566: LD_INT 0
2568: PPUSH
2569: CALL_OW 50
// result := result ^ [ un ] ;
2573: LD_ADDR_VAR 0 7
2577: PUSH
2578: LD_VAR 0 7
2582: PUSH
2583: LD_VAR 0 10
2587: PUSH
2588: EMPTY
2589: LIST
2590: ADD
2591: ST_TO_ADDR
// end ;
2592: GO 2175
2594: POP
2595: POP
// if not global_defined then
2596: LD_LOC 3
2600: NOT
2601: IFFALSE 2679
// if ( global_units >= cl ) then
2603: LD_LOC 2
2607: PUSH
2608: LD_VAR 0 2
2612: GREATEREQUAL
2613: IFFALSE 2654
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2615: LD_ADDR_LOC 2
2619: PUSH
2620: LD_LOC 2
2624: PPUSH
2625: LD_VAR 0 2
2629: PPUSH
2630: LD_LOC 2
2634: PUSH
2635: LD_VAR 0 2
2639: ARRAY
2640: PUSH
2641: LD_VAR 0 7
2645: ADD
2646: PPUSH
2647: CALL_OW 1
2651: ST_TO_ADDR
2652: GO 2679
// global_units := Replace ( global_units , cl , result ) ;
2654: LD_ADDR_LOC 2
2658: PUSH
2659: LD_LOC 2
2663: PPUSH
2664: LD_VAR 0 2
2668: PPUSH
2669: LD_VAR 0 7
2673: PPUSH
2674: CALL_OW 1
2678: ST_TO_ADDR
// if commander then
2679: LD_LOC 1
2683: IFFALSE 2730
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2685: LD_ADDR_EXP 34
2689: PUSH
2690: LD_EXP 34
2694: PPUSH
2695: LD_OWVAR 20
2699: PPUSH
2700: LD_EXP 34
2704: PUSH
2705: LD_OWVAR 20
2709: ARRAY
2710: PUSH
2711: LD_VAR 0 10
2715: ADD
2716: PPUSH
2717: CALL_OW 1
2721: ST_TO_ADDR
// commander := false ;
2722: LD_ADDR_LOC 1
2726: PUSH
2727: LD_INT 0
2729: ST_TO_ADDR
// end ; end ;
2730: LD_VAR 0 7
2734: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2735: LD_INT 0
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
2744: PPUSH
2745: PPUSH
// if side in [ 0 , 9 ] then
2746: LD_VAR 0 1
2750: PUSH
2751: LD_INT 0
2753: PUSH
2754: LD_INT 9
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: IN
2761: IFFALSE 2765
// exit ;
2763: GO 3840
// pos := Side_Positions [ side ] ;
2765: LD_ADDR_VAR 0 3
2769: PUSH
2770: LD_EXP 23
2774: PUSH
2775: LD_VAR 0 1
2779: ARRAY
2780: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2781: LD_ADDR_OWVAR 21
2785: PUSH
2786: LD_EXP 24
2790: PUSH
2791: LD_VAR 0 1
2795: ARRAY
2796: ST_TO_ADDR
// uc_side := side ;
2797: LD_ADDR_OWVAR 20
2801: PUSH
2802: LD_VAR 0 1
2806: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2807: LD_ADDR_VAR 0 4
2811: PUSH
2812: LD_EXP 29
2816: PUSH
2817: LD_VAR 0 3
2821: ARRAY
2822: PUSH
2823: LD_INT 1
2825: ARRAY
2826: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2827: LD_ADDR_VAR 0 5
2831: PUSH
2832: LD_EXP 29
2836: PUSH
2837: LD_VAR 0 3
2841: ARRAY
2842: PUSH
2843: LD_INT 2
2845: ARRAY
2846: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2847: LD_ADDR_VAR 0 6
2851: PUSH
2852: LD_EXP 29
2856: PUSH
2857: LD_VAR 0 3
2861: ARRAY
2862: PUSH
2863: LD_INT 3
2865: ARRAY
2866: ST_TO_ADDR
// if is_depot then
2867: LD_EXP 7
2871: IFFALSE 3004
// begin bc_type = b_depot ;
2873: LD_ADDR_OWVAR 42
2877: PUSH
2878: LD_INT 0
2880: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2881: LD_ADDR_VAR 0 10
2885: PUSH
2886: LD_VAR 0 4
2890: PPUSH
2891: LD_VAR 0 5
2895: PPUSH
2896: LD_VAR 0 6
2900: PPUSH
2901: CALL_OW 47
2905: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2906: LD_VAR 0 10
2910: PPUSH
2911: LD_STRING @
2913: PUSH
2914: LD_VAR 0 1
2918: STR
2919: PPUSH
2920: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2924: LD_VAR 0 10
2928: PPUSH
2929: CALL_OW 274
2933: PPUSH
2934: LD_INT 1
2936: PPUSH
2937: LD_EXP 12
2941: PUSH
2942: LD_INT 1
2944: ARRAY
2945: PPUSH
2946: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2950: LD_VAR 0 10
2954: PPUSH
2955: CALL_OW 274
2959: PPUSH
2960: LD_INT 2
2962: PPUSH
2963: LD_EXP 12
2967: PUSH
2968: LD_INT 2
2970: ARRAY
2971: PPUSH
2972: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2976: LD_VAR 0 10
2980: PPUSH
2981: CALL_OW 274
2985: PPUSH
2986: LD_INT 3
2988: PPUSH
2989: LD_EXP 12
2993: PUSH
2994: LD_INT 3
2996: ARRAY
2997: PPUSH
2998: CALL_OW 277
// end else
3002: GO 3148
// begin for i := 1 to 3 do
3004: LD_ADDR_VAR 0 7
3008: PUSH
3009: DOUBLE
3010: LD_INT 1
3012: DEC
3013: ST_TO_ADDR
3014: LD_INT 3
3016: PUSH
3017: FOR_TO
3018: IFFALSE 3146
// begin r := starting_resources [ i ] ;
3020: LD_ADDR_VAR 0 8
3024: PUSH
3025: LD_EXP 12
3029: PUSH
3030: LD_VAR 0 7
3034: ARRAY
3035: ST_TO_ADDR
// while r >= 10 do
3036: LD_VAR 0 8
3040: PUSH
3041: LD_INT 10
3043: GREATEREQUAL
3044: IFFALSE 3144
// if r > 50 then
3046: LD_VAR 0 8
3050: PUSH
3051: LD_INT 50
3053: GREATER
3054: IFFALSE 3100
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3056: LD_VAR 0 7
3060: PPUSH
3061: LD_INT 5
3063: PPUSH
3064: LD_VAR 0 4
3068: PPUSH
3069: LD_VAR 0 5
3073: PPUSH
3074: LD_INT 4
3076: PPUSH
3077: LD_INT 0
3079: PPUSH
3080: CALL_OW 60
// r := r - 50 ;
3084: LD_ADDR_VAR 0 8
3088: PUSH
3089: LD_VAR 0 8
3093: PUSH
3094: LD_INT 50
3096: MINUS
3097: ST_TO_ADDR
// end else
3098: GO 3142
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3100: LD_VAR 0 7
3104: PPUSH
3105: LD_VAR 0 8
3109: PUSH
3110: LD_INT 10
3112: DIV
3113: PPUSH
3114: LD_VAR 0 4
3118: PPUSH
3119: LD_VAR 0 5
3123: PPUSH
3124: LD_INT 4
3126: PPUSH
3127: LD_INT 0
3129: PPUSH
3130: CALL_OW 60
// r := 0 ;
3134: LD_ADDR_VAR 0 8
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// end ;
3142: GO 3036
// end ;
3144: GO 3017
3146: POP
3147: POP
// end ; for r in starting_crates do
3148: LD_ADDR_VAR 0 8
3152: PUSH
3153: LD_EXP 11
3157: PUSH
3158: FOR_IN
3159: IFFALSE 3191
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3161: LD_INT 1
3163: PPUSH
3164: LD_INT 5
3166: PPUSH
3167: LD_VAR 0 4
3171: PPUSH
3172: LD_VAR 0 5
3176: PPUSH
3177: LD_VAR 0 8
3181: PPUSH
3182: LD_INT 0
3184: PPUSH
3185: CALL_OW 60
3189: GO 3158
3191: POP
3192: POP
// if def_morale_flags then
3193: LD_EXP 56
3197: IFFALSE 3336
// begin x := start_def [ pos ] [ 1 ] ;
3199: LD_ADDR_VAR 0 4
3203: PUSH
3204: LD_EXP 31
3208: PUSH
3209: LD_VAR 0 3
3213: ARRAY
3214: PUSH
3215: LD_INT 1
3217: ARRAY
3218: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3219: LD_ADDR_VAR 0 5
3223: PUSH
3224: LD_EXP 31
3228: PUSH
3229: LD_VAR 0 3
3233: ARRAY
3234: PUSH
3235: LD_INT 2
3237: ARRAY
3238: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3239: LD_VAR 0 4
3243: PPUSH
3244: LD_VAR 0 5
3248: PPUSH
3249: LD_INT 12
3251: PPUSH
3252: LD_INT 2
3254: PPUSH
3255: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3259: LD_ADDR_EXP 33
3263: PUSH
3264: LD_EXP 33
3268: PUSH
3269: LD_VAR 0 1
3273: PPUSH
3274: LD_VAR 0 4
3278: PPUSH
3279: LD_VAR 0 5
3283: PPUSH
3284: LD_INT 1
3286: PUSH
3287: LD_INT 100
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: LD_INT 2
3296: PUSH
3297: LD_INT 50
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 3
3306: PUSH
3307: LD_INT 20
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 20
3316: PUSH
3317: LD_INT 100
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: PPUSH
3330: CALL_OW 418
3334: ADD
3335: ST_TO_ADDR
// end ; commander := true ;
3336: LD_ADDR_LOC 1
3340: PUSH
3341: LD_INT 1
3343: ST_TO_ADDR
// soldiers_created := 0 ;
3344: LD_ADDR_LOC 4
3348: PUSH
3349: LD_INT 0
3351: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3352: LD_ADDR_VAR 0 7
3356: PUSH
3357: DOUBLE
3358: LD_INT 1
3360: DEC
3361: ST_TO_ADDR
3362: LD_EXP 8
3366: PUSH
3367: FOR_TO
3368: IFFALSE 3521
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3370: LD_ADDR_VAR 0 4
3374: PUSH
3375: LD_EXP 30
3379: PUSH
3380: LD_VAR 0 3
3384: ARRAY
3385: PUSH
3386: LD_VAR 0 7
3390: ARRAY
3391: PUSH
3392: LD_INT 1
3394: ARRAY
3395: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3396: LD_ADDR_VAR 0 5
3400: PUSH
3401: LD_EXP 30
3405: PUSH
3406: LD_VAR 0 3
3410: ARRAY
3411: PUSH
3412: LD_VAR 0 7
3416: ARRAY
3417: PUSH
3418: LD_INT 2
3420: ARRAY
3421: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3422: LD_ADDR_VAR 0 6
3426: PUSH
3427: LD_EXP 30
3431: PUSH
3432: LD_VAR 0 3
3436: ARRAY
3437: PUSH
3438: LD_VAR 0 7
3442: ARRAY
3443: PUSH
3444: LD_INT 3
3446: ARRAY
3447: ST_TO_ADDR
// bc_type := b_breastwork ;
3448: LD_ADDR_OWVAR 42
3452: PUSH
3453: LD_INT 31
3455: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3456: LD_ADDR_VAR 0 9
3460: PUSH
3461: LD_VAR 0 4
3465: PPUSH
3466: LD_VAR 0 5
3470: PPUSH
3471: LD_VAR 0 6
3475: PPUSH
3476: CALL_OW 47
3480: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3481: LD_INT 1
3483: PPUSH
3484: LD_INT 1
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: LD_INT 0
3492: PPUSH
3493: LD_INT 0
3495: PPUSH
3496: LD_VAR 0 9
3500: PPUSH
3501: CALL 2147 0 6
// soldiers_created := soldiers_created + 1 ;
3505: LD_ADDR_LOC 4
3509: PUSH
3510: LD_LOC 4
3514: PUSH
3515: LD_INT 1
3517: PLUS
3518: ST_TO_ADDR
// end ;
3519: GO 3367
3521: POP
3522: POP
// x := start_def [ pos ] [ 1 ] ;
3523: LD_ADDR_VAR 0 4
3527: PUSH
3528: LD_EXP 31
3532: PUSH
3533: LD_VAR 0 3
3537: ARRAY
3538: PUSH
3539: LD_INT 1
3541: ARRAY
3542: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3543: LD_ADDR_VAR 0 5
3547: PUSH
3548: LD_EXP 31
3552: PUSH
3553: LD_VAR 0 3
3557: ARRAY
3558: PUSH
3559: LD_INT 2
3561: ARRAY
3562: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3563: LD_LOC 8
3567: PUSH
3568: LD_EXP 8
3572: MINUS
3573: PPUSH
3574: LD_INT 1
3576: PPUSH
3577: LD_VAR 0 4
3581: PPUSH
3582: LD_VAR 0 5
3586: PPUSH
3587: LD_INT 5
3589: PPUSH
3590: LD_INT 0
3592: PPUSH
3593: CALL 2147 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3597: LD_LOC 5
3601: PPUSH
3602: LD_INT 2
3604: PPUSH
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_VAR 0 5
3614: PPUSH
3615: LD_INT 5
3617: PPUSH
3618: LD_INT 0
3620: PPUSH
3621: CALL 2147 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3625: LD_LOC 7
3629: PPUSH
3630: LD_INT 3
3632: PPUSH
3633: LD_VAR 0 4
3637: PPUSH
3638: LD_VAR 0 5
3642: PPUSH
3643: LD_INT 5
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL 2147 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3653: LD_LOC 6
3657: PPUSH
3658: LD_INT 4
3660: PPUSH
3661: LD_VAR 0 4
3665: PPUSH
3666: LD_VAR 0 5
3670: PPUSH
3671: LD_INT 5
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL 2147 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3681: LD_EXP 57
3685: PUSH
3686: LD_INT 20
3688: PPUSH
3689: LD_VAR 0 1
3693: PPUSH
3694: CALL_OW 321
3698: PUSH
3699: LD_INT 1
3701: EQUAL
3702: AND
3703: IFFALSE 3720
// SetTech ( tech_SibDet , side , state_researched ) ;
3705: LD_INT 20
3707: PPUSH
3708: LD_VAR 0 1
3712: PPUSH
3713: LD_INT 2
3715: PPUSH
3716: CALL_OW 322
// if def_siberite_bomb = 1 then
3720: LD_EXP 60
3724: PUSH
3725: LD_INT 1
3727: EQUAL
3728: IFFALSE 3762
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3730: LD_INT 25
3732: PPUSH
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 1
3740: PPUSH
3741: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3745: LD_INT 73
3747: PPUSH
3748: LD_VAR 0 1
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: CALL_OW 322
// end else
3760: GO 3792
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3762: LD_INT 25
3764: PPUSH
3765: LD_VAR 0 1
3769: PPUSH
3770: LD_INT 0
3772: PPUSH
3773: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3777: LD_INT 73
3779: PPUSH
3780: LD_VAR 0 1
3784: PPUSH
3785: LD_INT 0
3787: PPUSH
3788: CALL_OW 322
// end ; if Game_Type = 3 then
3792: LD_EXP 46
3796: PUSH
3797: LD_INT 3
3799: EQUAL
3800: IFFALSE 3817
// SetTech ( tech_partinvis , side , state_disabled ) ;
3802: LD_INT 16
3804: PPUSH
3805: LD_VAR 0 1
3809: PPUSH
3810: LD_INT 0
3812: PPUSH
3813: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3817: LD_INT 24
3819: PPUSH
3820: LD_VAR 0 1
3824: PPUSH
3825: LD_INT 1
3827: PPUSH
3828: CALL_OW 322
// global_defined := true ;
3832: LD_ADDR_LOC 3
3836: PUSH
3837: LD_INT 1
3839: ST_TO_ADDR
// end ;
3840: LD_VAR 0 2
3844: RET
// every 0 0$1 do
3845: GO 3847
3847: DISABLE
// if ( def_siberite_bomb > 1 ) then
3848: LD_EXP 60
3852: PUSH
3853: LD_INT 1
3855: GREATER
3856: IFFALSE 3871
// begin wait ( siberite_bomb_Delay ) ;
3858: LD_EXP 18
3862: PPUSH
3863: CALL_OW 67
// EnableSibFiss ;
3867: CALL 3872 0 0
// end ;
3871: END
// function EnableSibFiss ; var i ; begin
3872: LD_INT 0
3874: PPUSH
3875: PPUSH
// for i := 1 to 8 do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_INT 8
3888: PUSH
3889: FOR_TO
3890: IFFALSE 3936
// if Side_Positions [ i ] then
3892: LD_EXP 23
3896: PUSH
3897: LD_VAR 0 2
3901: ARRAY
3902: IFFALSE 3934
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3904: LD_INT 25
3906: PPUSH
3907: LD_VAR 0 2
3911: PPUSH
3912: LD_INT 1
3914: PPUSH
3915: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3919: LD_INT 73
3921: PPUSH
3922: LD_VAR 0 2
3926: PPUSH
3927: LD_INT 1
3929: PPUSH
3930: CALL_OW 322
// end ;
3934: GO 3889
3936: POP
3937: POP
// end ;
3938: LD_VAR 0 1
3942: RET
// function prepare_sides ; var i ; begin
3943: LD_INT 0
3945: PPUSH
3946: PPUSH
// global_units := [ ] ;
3947: LD_ADDR_LOC 2
3951: PUSH
3952: EMPTY
3953: ST_TO_ADDR
// global_defined := false ;
3954: LD_ADDR_LOC 3
3958: PUSH
3959: LD_INT 0
3961: ST_TO_ADDR
// CountClassMembers ;
3962: CALL 4012 0 0
// for i := 1 to 8 do
3966: LD_ADDR_VAR 0 2
3970: PUSH
3971: DOUBLE
3972: LD_INT 1
3974: DEC
3975: ST_TO_ADDR
3976: LD_INT 8
3978: PUSH
3979: FOR_TO
3980: IFFALSE 4005
// if Side_Positions [ i ] then
3982: LD_EXP 23
3986: PUSH
3987: LD_VAR 0 2
3991: ARRAY
3992: IFFALSE 4003
// prepare_side ( i ) ;
3994: LD_VAR 0 2
3998: PPUSH
3999: CALL 2735 0 1
4003: GO 3979
4005: POP
4006: POP
// end ;
4007: LD_VAR 0 1
4011: RET
// function CountClassMembers ; var Mode ; begin
4012: LD_INT 0
4014: PPUSH
4015: PPUSH
// if No_Mechs then
4016: LD_EXP 62
4020: IFFALSE 4032
// Mode := 2 else
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: LD_INT 2
4029: ST_TO_ADDR
4030: GO 4040
// Mode := 1 ;
4032: LD_ADDR_VAR 0 2
4036: PUSH
4037: LD_INT 1
4039: ST_TO_ADDR
// neng := number_of_people ;
4040: LD_ADDR_LOC 5
4044: PUSH
4045: LD_EXP 9
4049: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4050: LD_ADDR_LOC 8
4054: PUSH
4055: LD_LOC 5
4059: PUSH
4060: LD_INT 4
4062: PUSH
4063: LD_INT 3
4065: PUSH
4066: EMPTY
4067: LIST
4068: LIST
4069: PUSH
4070: LD_VAR 0 2
4074: ARRAY
4075: DIV
4076: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4077: LD_LOC 8
4081: PUSH
4082: LD_EXP 8
4086: LESS
4087: IFFALSE 4099
// nsol := number_of_breastworks ;
4089: LD_ADDR_LOC 8
4093: PUSH
4094: LD_EXP 8
4098: ST_TO_ADDR
// neng := neng - nsol ;
4099: LD_ADDR_LOC 5
4103: PUSH
4104: LD_LOC 5
4108: PUSH
4109: LD_LOC 8
4113: MINUS
4114: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4115: LD_ADDR_LOC 6
4119: PUSH
4120: LD_LOC 5
4124: PUSH
4125: LD_INT 3
4127: PUSH
4128: LD_INT 2
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: PUSH
4135: LD_VAR 0 2
4139: ARRAY
4140: DIV
4141: ST_TO_ADDR
// if ( nsci < 1 ) then
4142: LD_LOC 6
4146: PUSH
4147: LD_INT 1
4149: LESS
4150: IFFALSE 4160
// nsci := 1 ;
4152: LD_ADDR_LOC 6
4156: PUSH
4157: LD_INT 1
4159: ST_TO_ADDR
// neng := neng - nsci ;
4160: LD_ADDR_LOC 5
4164: PUSH
4165: LD_LOC 5
4169: PUSH
4170: LD_LOC 6
4174: MINUS
4175: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4176: LD_ADDR_LOC 7
4180: PUSH
4181: LD_LOC 5
4185: PUSH
4186: LD_INT 2
4188: DIV
4189: PUSH
4190: LD_INT 0
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PUSH
4197: LD_VAR 0 2
4201: ARRAY
4202: ST_TO_ADDR
// neng := neng - nmech ;
4203: LD_ADDR_LOC 5
4207: PUSH
4208: LD_LOC 5
4212: PUSH
4213: LD_LOC 7
4217: MINUS
4218: ST_TO_ADDR
// if ( neng < 1 ) then
4219: LD_LOC 5
4223: PUSH
4224: LD_INT 1
4226: LESS
4227: IFFALSE 4237
// neng := 1 ;
4229: LD_ADDR_LOC 5
4233: PUSH
4234: LD_INT 1
4236: ST_TO_ADDR
// end ;
4237: LD_VAR 0 1
4241: RET
// starting begin disable ( 1 ) ;
4242: LD_INT 1
4244: DISABLE_MARKED
// disable ( 2 ) ;
4245: LD_INT 2
4247: DISABLE_MARKED
// disable ( 3 ) ;
4248: LD_INT 3
4250: DISABLE_MARKED
// disable ( 4 ) ;
4251: LD_INT 4
4253: DISABLE_MARKED
// disable ( 5 ) ;
4254: LD_INT 5
4256: DISABLE_MARKED
// disable ( 6 ) ;
4257: LD_INT 6
4259: DISABLE_MARKED
// disable ( 7 ) ;
4260: LD_INT 7
4262: DISABLE_MARKED
// disable ( 10 ) ;
4263: LD_INT 10
4265: DISABLE_MARKED
// disable ( 20 ) ;
4266: LD_INT 20
4268: DISABLE_MARKED
// disable ( 98 ) ;
4269: LD_INT 98
4271: DISABLE_MARKED
// disable ( 99 ) ;
4272: LD_INT 99
4274: DISABLE_MARKED
// disable ( 400 ) ;
4275: LD_INT 400
4277: DISABLE_MARKED
// disable ( 401 ) ;
4278: LD_INT 401
4280: DISABLE_MARKED
// disable ( 600 ) ;
4281: LD_INT 600
4283: DISABLE_MARKED
// mp_selectmsg := true ;
4284: LD_ADDR_OWVAR 13
4288: PUSH
4289: LD_INT 1
4291: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4292: CALL 68 0 0
// init_map ;
4296: CALL 1398 0 0
// set_shared_visions_and_alliances ;
4300: CALL 1859 0 0
// ResetFog ;
4304: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4308: LD_OWVAR 2
4312: PPUSH
4313: CALL_OW 520
// prepare_sides ;
4317: CALL 3943 0 0
// init_respawning ;
4321: CALL 26998 0 0
// Init_Win_Condition ;
4325: CALL 17246 0 0
// InitLimits ;
4329: CALL 15074 0 0
// ShowTimer ;
4333: CALL 16011 0 0
// case Game_Type of 2 :
4337: LD_EXP 46
4341: PUSH
4342: LD_INT 2
4344: DOUBLE
4345: EQUAL
4346: IFTRUE 4350
4348: GO 4357
4350: POP
// init_alien_research ; 3 :
4351: CALL 6674 0 0
4355: GO 4377
4357: LD_INT 3
4359: DOUBLE
4360: EQUAL
4361: IFTRUE 4365
4363: GO 4376
4365: POP
// begin InitPoints ( ) ;
4366: CALL 16249 0 0
// init_kings_counting ;
4370: CALL 18541 0 0
// end ; end ;
4374: GO 4377
4376: POP
// music_nat := Side_Nations [ your_side ] ;
4377: LD_ADDR_OWVAR 71
4381: PUSH
4382: LD_EXP 24
4386: PUSH
4387: LD_OWVAR 2
4391: ARRAY
4392: ST_TO_ADDR
// if IAmSpec then
4393: CALL_OW 531
4397: IFFALSE 4421
// begin fogOff ( true ) ;
4399: LD_INT 1
4401: PPUSH
4402: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4406: LD_INT 119
4408: PPUSH
4409: LD_INT 79
4411: PPUSH
4412: CALL_OW 86
// enable ( 400 ) ;
4416: LD_INT 400
4418: ENABLE_MARKED
// end else
4419: GO 4467
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4421: LD_EXP 31
4425: PUSH
4426: LD_EXP 23
4430: PUSH
4431: LD_OWVAR 2
4435: ARRAY
4436: ARRAY
4437: PUSH
4438: LD_INT 1
4440: ARRAY
4441: PPUSH
4442: LD_EXP 31
4446: PUSH
4447: LD_EXP 23
4451: PUSH
4452: LD_OWVAR 2
4456: ARRAY
4457: ARRAY
4458: PUSH
4459: LD_INT 2
4461: ARRAY
4462: PPUSH
4463: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4467: LD_INT 1
4469: PPUSH
4470: CALL_OW 573
// InitApeman ;
4474: CALL 5159 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4478: LD_ADDR_EXP 66
4482: PUSH
4483: LD_INT 21
4485: PUSH
4486: LD_INT 23
4488: PUSH
4489: LD_INT 20
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: ST_TO_ADDR
// BeginBuildUp ;
4501: CALL 27492 0 0
// end ; end_of_file
4505: END
// every 1 1$0 + 0 0$0.3 do
4506: GO 4508
4508: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
4509: LD_INT 4
4511: PPUSH
4512: LD_INT 5
4514: PPUSH
4515: CALL_OW 12
4519: PPUSH
4520: LD_INT 25
4522: PPUSH
4523: LD_INT 1
4525: PPUSH
4526: CALL_OW 55
// enable ;
4530: ENABLE
// end ;
4531: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
// begin case tick of 1 .. 1 1$0 :
4539: LD_OWVAR 1
4543: PUSH
4544: LD_INT 1
4546: DOUBLE
4547: GREATEREQUAL
4548: IFFALSE 4556
4550: LD_INT 2100
4552: DOUBLE
4553: LESSEQUAL
4554: IFTRUE 4558
4556: GO 4586
4558: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4559: LD_EXP 13
4563: PUSH
4564: LD_INT 100
4566: DIVREAL
4567: PUSH
4568: LD_INT 525
4570: PPUSH
4571: LD_INT 1050
4573: PPUSH
4574: CALL_OW 12
4578: MUL
4579: PPUSH
4580: CALL_OW 67
4584: GO 4888
4586: LD_INT 2100
4588: PUSH
4589: LD_INT 1
4591: PLUS
4592: DOUBLE
4593: GREATEREQUAL
4594: IFFALSE 4602
4596: LD_INT 10500
4598: DOUBLE
4599: LESSEQUAL
4600: IFTRUE 4604
4602: GO 4632
4604: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4605: LD_EXP 13
4609: PUSH
4610: LD_INT 100
4612: DIVREAL
4613: PUSH
4614: LD_INT 1050
4616: PPUSH
4617: LD_INT 1750
4619: PPUSH
4620: CALL_OW 12
4624: MUL
4625: PPUSH
4626: CALL_OW 67
4630: GO 4888
4632: LD_INT 10500
4634: PUSH
4635: LD_INT 1
4637: PLUS
4638: DOUBLE
4639: GREATEREQUAL
4640: IFFALSE 4648
4642: LD_INT 21000
4644: DOUBLE
4645: LESSEQUAL
4646: IFTRUE 4650
4648: GO 4678
4650: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4651: LD_EXP 13
4655: PUSH
4656: LD_INT 100
4658: DIVREAL
4659: PUSH
4660: LD_INT 1750
4662: PPUSH
4663: LD_INT 2100
4665: PPUSH
4666: CALL_OW 12
4670: MUL
4671: PPUSH
4672: CALL_OW 67
4676: GO 4888
4678: LD_INT 21000
4680: PUSH
4681: LD_INT 1
4683: PLUS
4684: DOUBLE
4685: GREATEREQUAL
4686: IFFALSE 4694
4688: LD_INT 42000
4690: DOUBLE
4691: LESSEQUAL
4692: IFTRUE 4696
4694: GO 4724
4696: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4697: LD_EXP 13
4701: PUSH
4702: LD_INT 100
4704: DIVREAL
4705: PUSH
4706: LD_INT 2100
4708: PPUSH
4709: LD_INT 2275
4711: PPUSH
4712: CALL_OW 12
4716: MUL
4717: PPUSH
4718: CALL_OW 67
4722: GO 4888
4724: LD_INT 42000
4726: PUSH
4727: LD_INT 1
4729: PLUS
4730: DOUBLE
4731: GREATEREQUAL
4732: IFFALSE 4740
4734: LD_INT 63000
4736: DOUBLE
4737: LESSEQUAL
4738: IFTRUE 4742
4740: GO 4770
4742: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4743: LD_EXP 13
4747: PUSH
4748: LD_INT 100
4750: DIVREAL
4751: PUSH
4752: LD_INT 2275
4754: PPUSH
4755: LD_INT 2450
4757: PPUSH
4758: CALL_OW 12
4762: MUL
4763: PPUSH
4764: CALL_OW 67
4768: GO 4888
4770: LD_INT 63000
4772: PUSH
4773: LD_INT 1
4775: PLUS
4776: DOUBLE
4777: GREATEREQUAL
4778: IFFALSE 4786
4780: LD_INT 105000
4782: DOUBLE
4783: LESSEQUAL
4784: IFTRUE 4788
4786: GO 4816
4788: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4789: LD_EXP 13
4793: PUSH
4794: LD_INT 100
4796: DIVREAL
4797: PUSH
4798: LD_INT 2450
4800: PPUSH
4801: LD_INT 2800
4803: PPUSH
4804: CALL_OW 12
4808: MUL
4809: PPUSH
4810: CALL_OW 67
4814: GO 4888
4816: LD_INT 105000
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: DOUBLE
4823: GREATEREQUAL
4824: IFFALSE 4832
4826: LD_INT 630000
4828: DOUBLE
4829: LESSEQUAL
4830: IFTRUE 4834
4832: GO 4862
4834: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
4835: LD_EXP 13
4839: PUSH
4840: LD_INT 100
4842: DIVREAL
4843: PUSH
4844: LD_INT 2800
4846: PPUSH
4847: LD_INT 3500
4849: PPUSH
4850: CALL_OW 12
4854: MUL
4855: PPUSH
4856: CALL_OW 67
4860: GO 4888
4862: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
4863: LD_EXP 13
4867: PUSH
4868: LD_INT 100
4870: DIVREAL
4871: PUSH
4872: LD_INT 3500
4874: PPUSH
4875: LD_INT 3850
4877: PPUSH
4878: CALL_OW 12
4882: MUL
4883: PPUSH
4884: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
4888: LD_ADDR_VAR 0 2
4892: PUSH
4893: LD_INT 3
4895: PPUSH
4896: LD_INT 5
4898: PPUSH
4899: CALL_OW 12
4903: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
4904: LD_ADDR_VAR 0 1
4908: PUSH
4909: LD_EXP 23
4913: PUSH
4914: LD_INT 0
4916: PUSH
4917: EMPTY
4918: LIST
4919: DIFF
4920: PUSH
4921: FOR_IN
4922: IFFALSE 4962
// CreateCratesArea ( amount , [ north_west , north_east , south_west , south_east ] [ i ] , true ) ;
4924: LD_VAR 0 2
4928: PPUSH
4929: LD_INT 4
4931: PUSH
4932: LD_INT 5
4934: PUSH
4935: LD_INT 7
4937: PUSH
4938: LD_INT 6
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: LIST
4945: LIST
4946: PUSH
4947: LD_VAR 0 1
4951: ARRAY
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 55
4960: GO 4921
4962: POP
4963: POP
// enable ;
4964: ENABLE
// end ; end_of_file
4965: PPOPN 2
4967: END
// every 20 20$00 trigger apemanNumber do
4968: LD_EXP 35
4972: IFFALSE 5005
4974: GO 4976
4976: DISABLE
// begin enable ;
4977: ENABLE
// if apeLevel >= 8 then
4978: LD_EXP 40
4982: PUSH
4983: LD_INT 8
4985: GREATEREQUAL
4986: IFFALSE 4991
// disable else
4988: DISABLE
4989: GO 5005
// apeLevel := apeLevel + 1 ;
4991: LD_ADDR_EXP 40
4995: PUSH
4996: LD_EXP 40
5000: PUSH
5001: LD_INT 1
5003: PLUS
5004: ST_TO_ADDR
// end ;
5005: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5006: LD_EXP 35
5010: PUSH
5011: LD_EXP 36
5015: LESS
5016: IFFALSE 5156
5018: GO 5020
5020: DISABLE
5021: LD_INT 0
5023: PPUSH
5024: PPUSH
5025: PPUSH
5026: PPUSH
// begin enable ;
5027: ENABLE
// for i := 1 to apemanPos do
5028: LD_ADDR_VAR 0 1
5032: PUSH
5033: DOUBLE
5034: LD_INT 1
5036: DEC
5037: ST_TO_ADDR
5038: LD_EXP 38
5042: PUSH
5043: FOR_TO
5044: IFFALSE 5154
// begin if apemanPlayerCount [ i ] then
5046: LD_EXP 39
5050: PUSH
5051: LD_VAR 0 1
5055: ARRAY
5056: IFFALSE 5152
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5058: LD_EXP 39
5062: PUSH
5063: LD_VAR 0 1
5067: ARRAY
5068: PUSH
5069: LD_EXP 38
5073: PUSH
5074: LD_VAR 0 1
5078: ARRAY
5079: GREATER
5080: IFFALSE 5152
// begin ape := PrepareApeman ;
5082: LD_ADDR_VAR 0 2
5086: PUSH
5087: CALL 5659 0 0
5091: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5092: LD_VAR 0 2
5096: PPUSH
5097: LD_EXP 41
5101: PUSH
5102: LD_VAR 0 1
5106: ARRAY
5107: PPUSH
5108: LD_INT 0
5110: PPUSH
5111: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5115: LD_ADDR_EXP 38
5119: PUSH
5120: LD_EXP 38
5124: PPUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: LD_EXP 38
5134: PUSH
5135: LD_VAR 0 1
5139: ARRAY
5140: PUSH
5141: LD_VAR 0 2
5145: UNION
5146: PPUSH
5147: CALL_OW 1
5151: ST_TO_ADDR
// end ; end ; end ;
5152: GO 5043
5154: POP
5155: POP
// end ;
5156: PPOPN 4
5158: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5159: LD_INT 0
5161: PPUSH
5162: PPUSH
5163: PPUSH
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
// playersAmount := 0 ;
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_INT 0
5175: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5176: LD_ADDR_VAR 0 7
5180: PUSH
5181: LD_INT 8
5183: PUSH
5184: LD_INT 9
5186: PUSH
5187: LD_INT 11
5189: PUSH
5190: LD_INT 10
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5199: LD_ADDR_EXP 41
5203: PUSH
5204: LD_INT 0
5206: PUSH
5207: LD_INT 0
5209: PUSH
5210: LD_INT 0
5212: PUSH
5213: LD_INT 0
5215: PUSH
5216: LD_INT 0
5218: PUSH
5219: LD_INT 0
5221: PUSH
5222: LD_INT 0
5224: PUSH
5225: LD_INT 0
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: LIST
5237: ST_TO_ADDR
// for j = 1 to Side_Positions do
5238: LD_ADDR_VAR 0 4
5242: PUSH
5243: DOUBLE
5244: LD_INT 1
5246: DEC
5247: ST_TO_ADDR
5248: LD_EXP 23
5252: PUSH
5253: FOR_TO
5254: IFFALSE 5321
// if Side_Positions [ j ] then
5256: LD_EXP 23
5260: PUSH
5261: LD_VAR 0 4
5265: ARRAY
5266: IFFALSE 5319
// begin playersAmount := playersAmount + 1 ;
5268: LD_ADDR_VAR 0 3
5272: PUSH
5273: LD_VAR 0 3
5277: PUSH
5278: LD_INT 1
5280: PLUS
5281: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5282: LD_ADDR_EXP 41
5286: PUSH
5287: LD_EXP 41
5291: PPUSH
5292: LD_VAR 0 4
5296: PPUSH
5297: LD_VAR 0 7
5301: PUSH
5302: LD_EXP 23
5306: PUSH
5307: LD_VAR 0 4
5311: ARRAY
5312: ARRAY
5313: PPUSH
5314: CALL_OW 1
5318: ST_TO_ADDR
// end ;
5319: GO 5253
5321: POP
5322: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5323: LD_ADDR_EXP 37
5327: PUSH
5328: LD_INT 3
5330: PUSH
5331: LD_EXP 15
5335: MUL
5336: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5337: LD_ADDR_EXP 35
5341: PUSH
5342: LD_VAR 0 3
5346: PUSH
5347: LD_EXP 37
5351: MUL
5352: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5353: LD_ADDR_EXP 36
5357: PUSH
5358: LD_EXP 35
5362: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5363: LD_ADDR_EXP 38
5367: PUSH
5368: LD_INT 0
5370: PUSH
5371: LD_INT 0
5373: PUSH
5374: LD_INT 0
5376: PUSH
5377: LD_INT 0
5379: PUSH
5380: LD_INT 0
5382: PUSH
5383: LD_INT 0
5385: PUSH
5386: LD_INT 0
5388: PUSH
5389: LD_INT 0
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5402: LD_ADDR_EXP 39
5406: PUSH
5407: LD_INT 0
5409: PUSH
5410: LD_INT 0
5412: PUSH
5413: LD_INT 0
5415: PUSH
5416: LD_INT 0
5418: PUSH
5419: LD_INT 0
5421: PUSH
5422: LD_INT 0
5424: PUSH
5425: LD_INT 0
5427: PUSH
5428: LD_INT 0
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: ST_TO_ADDR
// apeLevel := 1 ;
5441: LD_ADDR_EXP 40
5445: PUSH
5446: LD_INT 1
5448: ST_TO_ADDR
// if not apemanNumber then
5449: LD_EXP 35
5453: NOT
5454: IFFALSE 5458
// exit ;
5456: GO 5654
// for i := 1 to apemanPerPlayer do
5458: LD_ADDR_VAR 0 2
5462: PUSH
5463: DOUBLE
5464: LD_INT 1
5466: DEC
5467: ST_TO_ADDR
5468: LD_EXP 37
5472: PUSH
5473: FOR_TO
5474: IFFALSE 5652
// begin for j := 1 to Side_Positions do
5476: LD_ADDR_VAR 0 4
5480: PUSH
5481: DOUBLE
5482: LD_INT 1
5484: DEC
5485: ST_TO_ADDR
5486: LD_EXP 23
5490: PUSH
5491: FOR_TO
5492: IFFALSE 5648
// if Side_Positions [ j ] then
5494: LD_EXP 23
5498: PUSH
5499: LD_VAR 0 4
5503: ARRAY
5504: IFFALSE 5646
// begin pos := Side_Positions [ j ] ;
5506: LD_ADDR_VAR 0 6
5510: PUSH
5511: LD_EXP 23
5515: PUSH
5516: LD_VAR 0 4
5520: ARRAY
5521: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5522: LD_ADDR_EXP 39
5526: PUSH
5527: LD_EXP 39
5531: PPUSH
5532: LD_VAR 0 4
5536: PPUSH
5537: LD_EXP 39
5541: PUSH
5542: LD_VAR 0 4
5546: ARRAY
5547: PUSH
5548: LD_INT 1
5550: PLUS
5551: PPUSH
5552: CALL_OW 1
5556: ST_TO_ADDR
// ape := PrepareApeman ;
5557: LD_ADDR_VAR 0 5
5561: PUSH
5562: CALL 5659 0 0
5566: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5567: LD_ADDR_EXP 38
5571: PUSH
5572: LD_EXP 38
5576: PPUSH
5577: LD_VAR 0 4
5581: PPUSH
5582: LD_EXP 38
5586: PUSH
5587: LD_VAR 0 4
5591: ARRAY
5592: PPUSH
5593: LD_EXP 38
5597: PUSH
5598: LD_VAR 0 4
5602: ARRAY
5603: PUSH
5604: LD_INT 1
5606: PLUS
5607: PPUSH
5608: LD_VAR 0 5
5612: PPUSH
5613: CALL_OW 1
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5623: LD_VAR 0 5
5627: PPUSH
5628: LD_EXP 41
5632: PUSH
5633: LD_VAR 0 4
5637: ARRAY
5638: PPUSH
5639: LD_INT 0
5641: PPUSH
5642: CALL_OW 49
// end ;
5646: GO 5491
5648: POP
5649: POP
// end ;
5650: GO 5473
5652: POP
5653: POP
// end ;
5654: LD_VAR 0 1
5658: RET
// export function PrepareApeman ; var bonus ; begin
5659: LD_INT 0
5661: PPUSH
5662: PPUSH
// uc_side := 0 ;
5663: LD_ADDR_OWVAR 20
5667: PUSH
5668: LD_INT 0
5670: ST_TO_ADDR
// uc_nation := 0 ;
5671: LD_ADDR_OWVAR 21
5675: PUSH
5676: LD_INT 0
5678: ST_TO_ADDR
// InitHc ;
5679: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5683: LD_ADDR_VAR 0 2
5687: PUSH
5688: LD_INT 1
5690: NEG
5691: PUSH
5692: LD_INT 0
5694: PUSH
5695: LD_INT 1
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_OWVAR 1
5707: PUSH
5708: LD_INT 3
5710: MOD
5711: PUSH
5712: LD_INT 1
5714: PLUS
5715: ARRAY
5716: ST_TO_ADDR
// hc_class := class_apeman ;
5717: LD_ADDR_OWVAR 28
5721: PUSH
5722: LD_INT 12
5724: ST_TO_ADDR
// hc_gallery :=  ;
5725: LD_ADDR_OWVAR 33
5729: PUSH
5730: LD_STRING 
5732: ST_TO_ADDR
// hc_name :=  ;
5733: LD_ADDR_OWVAR 26
5737: PUSH
5738: LD_STRING 
5740: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5741: LD_ADDR_OWVAR 31
5745: PUSH
5746: LD_EXP 40
5750: PUSH
5751: LD_VAR 0 2
5755: PLUS
5756: PUSH
5757: LD_EXP 40
5761: PUSH
5762: LD_VAR 0 2
5766: PLUS
5767: PUSH
5768: LD_EXP 40
5772: PUSH
5773: LD_VAR 0 2
5777: PLUS
5778: PUSH
5779: LD_EXP 40
5783: PUSH
5784: LD_VAR 0 2
5788: PLUS
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5796: LD_ADDR_OWVAR 35
5800: PUSH
5801: LD_INT 10
5803: PUSH
5804: LD_VAR 0 2
5808: MUL
5809: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5810: LD_ADDR_OWVAR 29
5814: PUSH
5815: LD_INT 12
5817: PUSH
5818: LD_INT 10
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: ST_TO_ADDR
// result := CreateHuman ;
5825: LD_ADDR_VAR 0 1
5829: PUSH
5830: CALL_OW 44
5834: ST_TO_ADDR
// end ;
5835: LD_VAR 0 1
5839: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
// if not ape then
5845: LD_VAR 0 1
5849: NOT
5850: IFFALSE 5854
// exit ;
5852: GO 5979
// side := GetSide ( ape ) ;
5854: LD_ADDR_VAR 0 3
5858: PUSH
5859: LD_VAR 0 1
5863: PPUSH
5864: CALL_OW 255
5868: ST_TO_ADDR
// if not side then
5869: LD_VAR 0 3
5873: NOT
5874: IFFALSE 5928
// begin for i = 1 to apemanPos do
5876: LD_ADDR_VAR 0 4
5880: PUSH
5881: DOUBLE
5882: LD_INT 1
5884: DEC
5885: ST_TO_ADDR
5886: LD_EXP 38
5890: PUSH
5891: FOR_TO
5892: IFFALSE 5926
// if ape in apemanPos [ i ] then
5894: LD_VAR 0 1
5898: PUSH
5899: LD_EXP 38
5903: PUSH
5904: LD_VAR 0 4
5908: ARRAY
5909: IN
5910: IFFALSE 5924
// begin side := i ;
5912: LD_ADDR_VAR 0 3
5916: PUSH
5917: LD_VAR 0 4
5921: ST_TO_ADDR
// break ;
5922: GO 5926
// end ;
5924: GO 5891
5926: POP
5927: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5928: LD_ADDR_EXP 38
5932: PUSH
5933: LD_EXP 38
5937: PPUSH
5938: LD_VAR 0 3
5942: PPUSH
5943: LD_EXP 38
5947: PUSH
5948: LD_VAR 0 3
5952: ARRAY
5953: PUSH
5954: LD_VAR 0 1
5958: DIFF
5959: PPUSH
5960: CALL_OW 1
5964: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5965: LD_ADDR_EXP 35
5969: PUSH
5970: LD_EXP 35
5974: PUSH
5975: LD_INT 1
5977: MINUS
5978: ST_TO_ADDR
// end ; end_of_file
5979: LD_VAR 0 2
5983: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5984: LD_VAR 0 1
5988: PPUSH
5989: CALL_OW 266
5993: PUSH
5994: LD_INT 0
5996: PUSH
5997: LD_INT 1
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: IN
6004: IFFALSE 6029
// SetBName ( b , @ & GetSide ( b ) ) ;
6006: LD_VAR 0 1
6010: PPUSH
6011: LD_STRING @
6013: PUSH
6014: LD_VAR 0 1
6018: PPUSH
6019: CALL_OW 255
6023: STR
6024: PPUSH
6025: CALL_OW 500
// if def_game_rules then
6029: LD_EXP 47
6033: IFFALSE 6070
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6035: LD_VAR 0 1
6039: PPUSH
6040: LD_VAR 0 1
6044: PPUSH
6045: CALL_OW 266
6049: PPUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: CALL_OW 255
6059: PPUSH
6060: LD_INT 0
6062: PPUSH
6063: LD_INT 1
6065: PPUSH
6066: CALL 15475 0 5
// end ;
6070: PPOPN 2
6072: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6073: LD_VAR 0 1
6077: PPUSH
6078: CALL_OW 266
6082: PUSH
6083: LD_INT 0
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: IN
6093: IFFALSE 6118
// SetBName ( b , @ & GetSide ( b ) ) ;
6095: LD_VAR 0 1
6099: PPUSH
6100: LD_STRING @
6102: PUSH
6103: LD_VAR 0 1
6107: PPUSH
6108: CALL_OW 255
6112: STR
6113: PPUSH
6114: CALL_OW 500
// if def_game_rules then
6118: LD_EXP 47
6122: IFFALSE 6161
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6124: LD_VAR 0 1
6128: PPUSH
6129: LD_VAR 0 1
6133: PPUSH
6134: CALL_OW 266
6138: PPUSH
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL_OW 255
6148: PPUSH
6149: LD_VAR 0 2
6153: PPUSH
6154: LD_INT 1
6156: PPUSH
6157: CALL 15475 0 5
// end ;
6161: PPOPN 3
6163: END
// on VehicleConstructed ( veh , fac ) do var side ;
6164: LD_INT 0
6166: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6167: LD_VAR 0 1
6171: PPUSH
6172: CALL_OW 263
6176: PUSH
6177: LD_INT 5
6179: EQUAL
6180: IFFALSE 6322
// begin side := GetSide ( veh ) ;
6182: LD_ADDR_VAR 0 3
6186: PUSH
6187: LD_VAR 0 1
6191: PPUSH
6192: CALL_OW 255
6196: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6197: LD_ADDR_EXP 38
6201: PUSH
6202: LD_EXP 38
6206: PPUSH
6207: LD_VAR 0 3
6211: PPUSH
6212: LD_EXP 38
6216: PUSH
6217: LD_VAR 0 3
6221: ARRAY
6222: PPUSH
6223: LD_INT 52
6225: PUSH
6226: EMPTY
6227: LIST
6228: PPUSH
6229: CALL_OW 72
6233: PUSH
6234: LD_INT 22
6236: PUSH
6237: LD_VAR 0 3
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 2
6248: PUSH
6249: LD_INT 33
6251: PUSH
6252: LD_INT 5
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 25
6261: PUSH
6262: LD_INT 12
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: LD_INT 25
6271: PUSH
6272: LD_INT 15
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: PUSH
6279: LD_INT 25
6281: PUSH
6282: LD_INT 16
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: PUSH
6289: LD_INT 25
6291: PUSH
6292: LD_INT 17
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: EMPTY
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PPUSH
6311: CALL_OW 69
6315: UNION
6316: PPUSH
6317: CALL_OW 1
6321: ST_TO_ADDR
// end ; end ;
6322: PPOPN 3
6324: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6325: LD_INT 0
6327: PPUSH
6328: PPUSH
6329: PPUSH
6330: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 257
6340: PUSH
6341: LD_INT 12
6343: PUSH
6344: LD_INT 15
6346: PUSH
6347: LD_INT 17
6349: PUSH
6350: LD_INT 16
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: IN
6359: PUSH
6360: LD_VAR 0 1
6364: PPUSH
6365: CALL_OW 263
6369: PUSH
6370: LD_INT 5
6372: EQUAL
6373: OR
6374: IFFALSE 6385
// ApeKilled ( j ) ;
6376: LD_VAR 0 1
6380: PPUSH
6381: CALL 5840 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6385: LD_VAR 0 1
6389: PPUSH
6390: CALL_OW 266
6394: PUSH
6395: LD_INT 0
6397: PUSH
6398: LD_INT 1
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: IN
6405: IFFALSE 6487
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: LD_EXP 23
6416: PUSH
6417: LD_VAR 0 1
6421: PPUSH
6422: CALL_OW 255
6426: ARRAY
6427: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6428: LD_ADDR_VAR 0 2
6432: PUSH
6433: LD_EXP 31
6437: PUSH
6438: LD_VAR 0 4
6442: ARRAY
6443: PUSH
6444: LD_INT 1
6446: ARRAY
6447: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6448: LD_ADDR_VAR 0 3
6452: PUSH
6453: LD_EXP 31
6457: PUSH
6458: LD_VAR 0 4
6462: ARRAY
6463: PUSH
6464: LD_INT 2
6466: ARRAY
6467: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6468: LD_VAR 0 2
6472: PPUSH
6473: LD_VAR 0 3
6477: PPUSH
6478: CALL_OW 420
6482: PPUSH
6483: CALL_OW 419
// end ; if def_game_rules then
6487: LD_EXP 47
6491: IFFALSE 6590
// if ( GetType ( j ) = 3 ) then
6493: LD_VAR 0 1
6497: PPUSH
6498: CALL_OW 247
6502: PUSH
6503: LD_INT 3
6505: EQUAL
6506: IFFALSE 6546
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6508: LD_VAR 0 1
6512: PPUSH
6513: LD_VAR 0 1
6517: PPUSH
6518: CALL_OW 266
6522: PPUSH
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL_OW 255
6532: PPUSH
6533: LD_INT 0
6535: PPUSH
6536: LD_INT 1
6538: NEG
6539: PPUSH
6540: CALL 15475 0 5
6544: GO 6590
// if ( GetChassis ( j ) = 25 ) then
6546: LD_VAR 0 1
6550: PPUSH
6551: CALL_OW 265
6555: PUSH
6556: LD_INT 25
6558: EQUAL
6559: IFFALSE 6590
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6561: LD_VAR 0 1
6565: PPUSH
6566: LD_INT 37
6568: PPUSH
6569: LD_VAR 0 1
6573: PPUSH
6574: CALL_OW 255
6578: PPUSH
6579: LD_INT 0
6581: PPUSH
6582: LD_INT 1
6584: NEG
6585: PPUSH
6586: CALL 15475 0 5
// end ;
6590: PPOPN 5
6592: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6593: LD_EXP 47
6597: PUSH
6598: LD_VAR 0 1
6602: PPUSH
6603: CALL_OW 265
6607: PUSH
6608: LD_INT 25
6610: EQUAL
6611: AND
6612: IFFALSE 6644
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6614: LD_VAR 0 1
6618: PPUSH
6619: LD_INT 37
6621: PPUSH
6622: LD_VAR 0 1
6626: PPUSH
6627: CALL_OW 255
6631: PPUSH
6632: LD_VAR 0 3
6636: PPUSH
6637: LD_INT 1
6639: PPUSH
6640: CALL 15475 0 5
// end ;
6644: PPOPN 4
6646: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6647: LD_VAR 0 1
6651: PPUSH
6652: LD_VAR 0 2
6656: PPUSH
6657: LD_VAR 0 3
6661: PPUSH
6662: LD_OWVAR 2
6666: PPUSH
6667: CALL 17007 0 4
6671: PPOPN 3
6673: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
6674: LD_INT 0
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
// artefact_number := 3 ;
6682: LD_ADDR_EXP 42
6686: PUSH
6687: LD_INT 3
6689: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
6690: LD_ADDR_EXP 43
6694: PUSH
6695: LD_INT 1
6697: PUSH
6698: LD_INT 0
6700: PUSH
6701: LD_INT 2
6703: PUSH
6704: LD_INT 0
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
6717: LD_ADDR_EXP 44
6721: PUSH
6722: LD_INT 1
6724: PUSH
6725: LD_INT 3
6727: PUSH
6728: LD_INT 5
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
6736: LD_ADDR_VAR 0 2
6740: PUSH
6741: LD_INT 1
6743: PUSH
6744: LD_INT 4
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 2
6753: PUSH
6754: LD_INT 5
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 3
6763: PUSH
6764: LD_INT 9
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: LIST
6775: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: LD_INT 3
6783: PUSH
6784: LD_INT 4
6786: PUSH
6787: LD_INT 3
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: LIST
6794: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
6795: LD_ADDR_VAR 0 4
6799: PUSH
6800: LD_INT 150
6802: PUSH
6803: LD_INT 250
6805: PUSH
6806: LD_INT 400
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: LIST
6813: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
6814: LD_ADDR_VAR 0 5
6818: PUSH
6819: LD_INT 2
6821: PUSH
6822: LD_INT 10
6824: PUSH
6825: LD_INT 20
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
6833: LD_ADDR_VAR 0 6
6837: PUSH
6838: LD_INT 6
6840: PUSH
6841: LD_INT 18
6843: PUSH
6844: LD_INT 50
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: LIST
6851: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
6852: LD_VAR 0 2
6856: PPUSH
6857: LD_VAR 0 3
6861: PPUSH
6862: LD_VAR 0 4
6866: PPUSH
6867: LD_VAR 0 5
6871: PPUSH
6872: LD_VAR 0 6
6876: PPUSH
6877: CALL 6886 0 5
// end ;
6881: LD_VAR 0 1
6885: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
6886: LD_INT 0
6888: PPUSH
6889: PPUSH
6890: PPUSH
6891: PPUSH
6892: PPUSH
// disable ( 1 ) ;
6893: LD_INT 1
6895: DISABLE_MARKED
// disable ( 5 ) ;
6896: LD_INT 5
6898: DISABLE_MARKED
// disable ( 6 ) ;
6899: LD_INT 6
6901: DISABLE_MARKED
// disable ( 7 ) ;
6902: LD_INT 7
6904: DISABLE_MARKED
// for side = 1 to 8 do
6905: LD_ADDR_VAR 0 9
6909: PUSH
6910: DOUBLE
6911: LD_INT 1
6913: DEC
6914: ST_TO_ADDR
6915: LD_INT 8
6917: PUSH
6918: FOR_TO
6919: IFFALSE 6935
// SetArtifactRes ( side , state_enabled ) ;
6921: LD_VAR 0 9
6925: PPUSH
6926: LD_INT 1
6928: PPUSH
6929: CALL_OW 467
6933: GO 6918
6935: POP
6936: POP
// for un = 0 to ( artefact_number - 1 ) do
6937: LD_ADDR_VAR 0 7
6941: PUSH
6942: DOUBLE
6943: LD_INT 0
6945: DEC
6946: ST_TO_ADDR
6947: LD_EXP 42
6951: PUSH
6952: LD_INT 1
6954: MINUS
6955: PUSH
6956: FOR_TO
6957: IFFALSE 7355
// begin base := un * 100 ;
6959: LD_ADDR_VAR 0 10
6963: PUSH
6964: LD_VAR 0 7
6968: PUSH
6969: LD_INT 100
6971: MUL
6972: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
6973: LD_VAR 0 10
6977: PUSH
6978: LD_INT 1
6980: PLUS
6981: PPUSH
6982: LD_VAR 0 1
6986: PUSH
6987: LD_VAR 0 7
6991: PUSH
6992: LD_INT 1
6994: PLUS
6995: ARRAY
6996: PUSH
6997: LD_INT 1
6999: ARRAY
7000: PPUSH
7001: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7005: LD_VAR 0 10
7009: PUSH
7010: LD_INT 2
7012: PLUS
7013: PPUSH
7014: LD_VAR 0 1
7018: PUSH
7019: LD_VAR 0 7
7023: PUSH
7024: LD_INT 1
7026: PLUS
7027: ARRAY
7028: PUSH
7029: LD_INT 2
7031: ARRAY
7032: PPUSH
7033: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7037: LD_VAR 0 10
7041: PUSH
7042: LD_INT 3
7044: PLUS
7045: PPUSH
7046: LD_VAR 0 2
7050: PUSH
7051: LD_VAR 0 7
7055: PUSH
7056: LD_INT 1
7058: PLUS
7059: ARRAY
7060: PPUSH
7061: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7065: LD_VAR 0 10
7069: PUSH
7070: LD_INT 5
7072: PLUS
7073: PPUSH
7074: LD_VAR 0 3
7078: PUSH
7079: LD_VAR 0 7
7083: PUSH
7084: LD_INT 1
7086: PLUS
7087: ARRAY
7088: PPUSH
7089: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7093: LD_VAR 0 10
7097: PUSH
7098: LD_INT 6
7100: PLUS
7101: PPUSH
7102: LD_VAR 0 4
7106: PUSH
7107: LD_VAR 0 7
7111: PUSH
7112: LD_INT 1
7114: PLUS
7115: ARRAY
7116: PPUSH
7117: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7121: LD_VAR 0 10
7125: PUSH
7126: LD_INT 7
7128: PLUS
7129: PPUSH
7130: LD_VAR 0 5
7134: PUSH
7135: LD_VAR 0 7
7139: PUSH
7140: LD_INT 1
7142: PLUS
7143: ARRAY
7144: PPUSH
7145: CALL_OW 109
// SetTag ( base + 08 , false ) ;
7149: LD_VAR 0 10
7153: PUSH
7154: LD_INT 8
7156: PLUS
7157: PPUSH
7158: LD_INT 0
7160: PPUSH
7161: CALL_OW 109
// SetTag ( base + 09 , false ) ;
7165: LD_VAR 0 10
7169: PUSH
7170: LD_INT 9
7172: PLUS
7173: PPUSH
7174: LD_INT 0
7176: PPUSH
7177: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
7181: LD_VAR 0 10
7185: PUSH
7186: LD_INT 11
7188: PLUS
7189: PPUSH
7190: LD_INT 0
7192: PPUSH
7193: CALL_OW 109
// SetTag ( base + 12 , false ) ;
7197: LD_VAR 0 10
7201: PUSH
7202: LD_INT 12
7204: PLUS
7205: PPUSH
7206: LD_INT 0
7208: PPUSH
7209: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7213: LD_VAR 0 10
7217: PUSH
7218: LD_INT 13
7220: PLUS
7221: PPUSH
7222: LD_INT 0
7224: PPUSH
7225: CALL_OW 109
// for i = 0 to 7 do
7229: LD_ADDR_VAR 0 8
7233: PUSH
7234: DOUBLE
7235: LD_INT 0
7237: DEC
7238: ST_TO_ADDR
7239: LD_INT 7
7241: PUSH
7242: FOR_TO
7243: IFFALSE 7351
// begin SetTag ( base + i * 10 + 21 , false ) ;
7245: LD_VAR 0 10
7249: PUSH
7250: LD_VAR 0 8
7254: PUSH
7255: LD_INT 10
7257: MUL
7258: PLUS
7259: PUSH
7260: LD_INT 21
7262: PLUS
7263: PPUSH
7264: LD_INT 0
7266: PPUSH
7267: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
7271: LD_VAR 0 10
7275: PUSH
7276: LD_VAR 0 8
7280: PUSH
7281: LD_INT 10
7283: MUL
7284: PLUS
7285: PUSH
7286: LD_INT 22
7288: PLUS
7289: PPUSH
7290: LD_INT 0
7292: PPUSH
7293: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
7297: LD_VAR 0 10
7301: PUSH
7302: LD_VAR 0 8
7306: PUSH
7307: LD_INT 10
7309: MUL
7310: PLUS
7311: PUSH
7312: LD_INT 23
7314: PLUS
7315: PPUSH
7316: LD_INT 0
7318: PPUSH
7319: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
7323: LD_VAR 0 10
7327: PUSH
7328: LD_VAR 0 8
7332: PUSH
7333: LD_INT 10
7335: MUL
7336: PLUS
7337: PUSH
7338: LD_INT 25
7340: PLUS
7341: PPUSH
7342: LD_INT 0
7344: PPUSH
7345: CALL_OW 109
// end ;
7349: GO 7242
7351: POP
7352: POP
// end ;
7353: GO 6956
7355: POP
7356: POP
// enable ( 20 ) ;
7357: LD_INT 20
7359: ENABLE_MARKED
// labs_in_use := [ ] ;
7360: LD_ADDR_EXP 45
7364: PUSH
7365: EMPTY
7366: ST_TO_ADDR
// if def_artefact_one then
7367: LD_EXP 1
7371: IFFALSE 7398
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
7373: LD_INT 4
7375: PPUSH
7376: LD_EXP 44
7380: PUSH
7381: LD_INT 1
7383: ARRAY
7384: PPUSH
7385: LD_INT 16
7387: PPUSH
7388: LD_INT 0
7390: PPUSH
7391: CALL_OW 59
// enable ( 5 ) ;
7395: LD_INT 5
7397: ENABLE_MARKED
// end ; if def_artefact_two then
7398: LD_EXP 2
7402: IFFALSE 7429
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
7404: LD_INT 4
7406: PPUSH
7407: LD_EXP 44
7411: PUSH
7412: LD_INT 2
7414: ARRAY
7415: PPUSH
7416: LD_INT 16
7418: PPUSH
7419: LD_INT 0
7421: PPUSH
7422: CALL_OW 59
// enable ( 6 ) ;
7426: LD_INT 6
7428: ENABLE_MARKED
// end ; if def_artefact_three then
7429: LD_EXP 3
7433: IFFALSE 7460
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
7435: LD_INT 4
7437: PPUSH
7438: LD_EXP 44
7442: PUSH
7443: LD_INT 3
7445: ARRAY
7446: PPUSH
7447: LD_INT 16
7449: PPUSH
7450: LD_INT 0
7452: PPUSH
7453: CALL_OW 59
// enable ( 7 ) ;
7457: LD_INT 7
7459: ENABLE_MARKED
// end ; end ;
7460: LD_VAR 0 6
7464: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
7465: LD_INT 0
7467: PPUSH
7468: PPUSH
// begin art := artefact_num [ size ] ;
7469: LD_ADDR_VAR 0 3
7473: PUSH
7474: LD_EXP 43
7478: PUSH
7479: LD_VAR 0 2
7483: ARRAY
7484: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7485: LD_ADDR_VAR 0 4
7489: PUSH
7490: LD_VAR 0 3
7494: PUSH
7495: LD_INT 1
7497: MINUS
7498: PUSH
7499: LD_INT 100
7501: MUL
7502: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
7503: LD_VAR 0 4
7507: PUSH
7508: LD_INT 9
7510: PLUS
7511: PPUSH
7512: LD_INT 0
7514: PPUSH
7515: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7519: LD_VAR 0 4
7523: PUSH
7524: LD_INT 13
7526: PLUS
7527: PPUSH
7528: LD_INT 0
7530: PPUSH
7531: CALL_OW 109
// Init_Lab ( art ) ;
7535: LD_VAR 0 3
7539: PPUSH
7540: CALL 9016 0 1
// end ;
7544: PPOPN 4
7546: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
7547: LD_INT 0
7549: PPUSH
7550: PPUSH
7551: PPUSH
// begin art := artefact_num [ size ] ;
7552: LD_ADDR_VAR 0 3
7556: PUSH
7557: LD_EXP 43
7561: PUSH
7562: LD_VAR 0 2
7566: ARRAY
7567: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7568: LD_ADDR_VAR 0 4
7572: PUSH
7573: LD_VAR 0 3
7577: PUSH
7578: LD_INT 1
7580: MINUS
7581: PUSH
7582: LD_INT 100
7584: MUL
7585: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
7586: LD_VAR 0 4
7590: PUSH
7591: LD_INT 9
7593: PLUS
7594: PPUSH
7595: LD_INT 1
7597: PPUSH
7598: CALL_OW 109
// SetTag ( base + 13 , un ) ;
7602: LD_VAR 0 4
7606: PUSH
7607: LD_INT 13
7609: PLUS
7610: PPUSH
7611: LD_VAR 0 1
7615: PPUSH
7616: CALL_OW 109
// if GetTag ( base + 11 ) then
7620: LD_VAR 0 4
7624: PUSH
7625: LD_INT 11
7627: PLUS
7628: PPUSH
7629: CALL_OW 110
7633: IFFALSE 7796
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
7635: LD_ADDR_VAR 0 5
7639: PUSH
7640: LD_VAR 0 4
7644: PUSH
7645: LD_INT 11
7647: PLUS
7648: PPUSH
7649: CALL_OW 110
7653: PPUSH
7654: CALL_OW 255
7658: ST_TO_ADDR
// if GetTag ( base + 12 ) then
7659: LD_VAR 0 4
7663: PUSH
7664: LD_INT 12
7666: PLUS
7667: PPUSH
7668: CALL_OW 110
7672: IFFALSE 7740
// begin ComCancel ( GetTag ( base + 11 ) ) ;
7674: LD_VAR 0 4
7678: PUSH
7679: LD_INT 11
7681: PLUS
7682: PPUSH
7683: CALL_OW 110
7687: PPUSH
7688: CALL_OW 127
// wait ( 5 ) ;
7692: LD_INT 5
7694: PPUSH
7695: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
7699: LD_ADDR_EXP 45
7703: PUSH
7704: LD_EXP 45
7708: PUSH
7709: LD_VAR 0 4
7713: PUSH
7714: LD_INT 11
7716: PLUS
7717: PPUSH
7718: CALL_OW 110
7722: DIFF
7723: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
7724: LD_VAR 0 4
7728: PUSH
7729: LD_INT 12
7731: PLUS
7732: PPUSH
7733: LD_INT 0
7735: PPUSH
7736: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
7740: LD_VAR 0 4
7744: PUSH
7745: LD_VAR 0 5
7749: PUSH
7750: LD_INT 10
7752: MUL
7753: PLUS
7754: PUSH
7755: LD_INT 11
7757: PLUS
7758: PPUSH
7759: CALL_OW 110
7763: NOT
7764: IFFALSE 7780
// DeInit_Lab ( side , art ) ;
7766: LD_VAR 0 5
7770: PPUSH
7771: LD_VAR 0 3
7775: PPUSH
7776: CALL 9552 0 2
// SetTag ( base + 11 , 0 ) ;
7780: LD_VAR 0 4
7784: PUSH
7785: LD_INT 11
7787: PLUS
7788: PPUSH
7789: LD_INT 0
7791: PPUSH
7792: CALL_OW 109
// end ; end ;
7796: PPOPN 5
7798: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
7799: LD_INT 0
7801: PPUSH
7802: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7803: LD_ADDR_VAR 0 3
7807: PUSH
7808: LD_VAR 0 1
7812: PPUSH
7813: CALL_OW 255
7817: PUSH
7818: LD_INT 1
7820: MINUS
7821: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7822: LD_ADDR_VAR 0 2
7826: PUSH
7827: DOUBLE
7828: LD_INT 0
7830: DEC
7831: ST_TO_ADDR
7832: LD_EXP 42
7836: PUSH
7837: LD_INT 1
7839: MINUS
7840: PUSH
7841: FOR_TO
7842: IFFALSE 7884
// if lab = GetTag ( un * 100 + 11 ) then
7844: LD_VAR 0 1
7848: PUSH
7849: LD_VAR 0 2
7853: PUSH
7854: LD_INT 100
7856: MUL
7857: PUSH
7858: LD_INT 11
7860: PLUS
7861: PPUSH
7862: CALL_OW 110
7866: EQUAL
7867: IFFALSE 7882
// Init_Lab ( un + 1 ) ;
7869: LD_VAR 0 2
7873: PUSH
7874: LD_INT 1
7876: PLUS
7877: PPUSH
7878: CALL 9016 0 1
7882: GO 7841
7884: POP
7885: POP
// end ;
7886: PPOPN 3
7888: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
7889: LD_INT 0
7891: PPUSH
7892: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7893: LD_ADDR_VAR 0 4
7897: PUSH
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 255
7907: PUSH
7908: LD_INT 1
7910: MINUS
7911: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7912: LD_ADDR_VAR 0 3
7916: PUSH
7917: DOUBLE
7918: LD_INT 0
7920: DEC
7921: ST_TO_ADDR
7922: LD_EXP 42
7926: PUSH
7927: LD_INT 1
7929: MINUS
7930: PUSH
7931: FOR_TO
7932: IFFALSE 8050
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
7934: LD_VAR 0 3
7938: PUSH
7939: LD_INT 100
7941: MUL
7942: PUSH
7943: LD_INT 11
7945: PLUS
7946: PPUSH
7947: CALL_OW 110
7951: PUSH
7952: LD_VAR 0 1
7956: EQUAL
7957: PUSH
7958: LD_VAR 0 3
7962: PUSH
7963: LD_INT 100
7965: MUL
7966: PUSH
7967: LD_INT 12
7969: PLUS
7970: PPUSH
7971: CALL_OW 110
7975: AND
7976: IFFALSE 8048
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
7978: LD_VAR 0 3
7982: PUSH
7983: LD_INT 100
7985: MUL
7986: PUSH
7987: LD_VAR 0 4
7991: PUSH
7992: LD_INT 10
7994: MUL
7995: PLUS
7996: PUSH
7997: LD_INT 22
7999: PLUS
8000: PPUSH
8001: LD_VAR 0 2
8005: PPUSH
8006: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8010: LD_VAR 0 3
8014: PUSH
8015: LD_INT 100
8017: MUL
8018: PUSH
8019: LD_INT 12
8021: PLUS
8022: PPUSH
8023: LD_INT 0
8025: PPUSH
8026: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8030: LD_ADDR_EXP 45
8034: PUSH
8035: LD_EXP 45
8039: PUSH
8040: LD_VAR 0 1
8044: DIFF
8045: ST_TO_ADDR
// break ;
8046: GO 8050
// end ;
8048: GO 7931
8050: POP
8051: POP
// Update_Artefact ( lab ) ;
8052: LD_VAR 0 1
8056: PPUSH
8057: CALL 9691 0 1
// end ;
8061: PPOPN 4
8063: END
// on SpecResearchComplete ( lab ) do var un , side ;
8064: LD_INT 0
8066: PPUSH
8067: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8068: LD_ADDR_VAR 0 3
8072: PUSH
8073: LD_VAR 0 1
8077: PPUSH
8078: CALL_OW 255
8082: PUSH
8083: LD_INT 1
8085: MINUS
8086: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8087: LD_ADDR_VAR 0 2
8091: PUSH
8092: DOUBLE
8093: LD_INT 0
8095: DEC
8096: ST_TO_ADDR
8097: LD_EXP 42
8101: PUSH
8102: LD_INT 1
8104: MINUS
8105: PUSH
8106: FOR_TO
8107: IFFALSE 8253
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8109: LD_VAR 0 2
8113: PUSH
8114: LD_INT 100
8116: MUL
8117: PUSH
8118: LD_INT 11
8120: PLUS
8121: PPUSH
8122: CALL_OW 110
8126: PUSH
8127: LD_VAR 0 1
8131: EQUAL
8132: PUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_INT 100
8140: MUL
8141: PUSH
8142: LD_INT 12
8144: PLUS
8145: PPUSH
8146: CALL_OW 110
8150: AND
8151: IFFALSE 8251
// begin SetTag ( un * 100 + 12 , false ) ;
8153: LD_VAR 0 2
8157: PUSH
8158: LD_INT 100
8160: MUL
8161: PUSH
8162: LD_INT 12
8164: PLUS
8165: PPUSH
8166: LD_INT 0
8168: PPUSH
8169: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
8173: LD_VAR 0 2
8177: PUSH
8178: LD_INT 100
8180: MUL
8181: PUSH
8182: LD_VAR 0 3
8186: PUSH
8187: LD_INT 10
8189: MUL
8190: PLUS
8191: PUSH
8192: LD_INT 21
8194: PLUS
8195: PPUSH
8196: LD_INT 1
8198: PPUSH
8199: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
8203: LD_VAR 0 2
8207: PUSH
8208: LD_INT 100
8210: MUL
8211: PUSH
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 10
8219: MUL
8220: PLUS
8221: PUSH
8222: LD_INT 25
8224: PLUS
8225: PPUSH
8226: LD_VAR 0 1
8230: PPUSH
8231: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8235: LD_ADDR_EXP 45
8239: PUSH
8240: LD_EXP 45
8244: PUSH
8245: LD_VAR 0 1
8249: DIFF
8250: ST_TO_ADDR
// end ;
8251: GO 8106
8253: POP
8254: POP
// Update_Artefact ( lab ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL 9691 0 1
// end ;
8264: PPOPN 3
8266: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
8267: LD_INT 0
8269: PPUSH
8270: PPUSH
8271: PPUSH
8272: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
8273: LD_ADDR_VAR 0 7
8277: PUSH
8278: LD_VAR 0 2
8282: PUSH
8283: LD_INT 1
8285: MINUS
8286: PUSH
8287: LD_INT 3
8289: MOD
8290: PUSH
8291: LD_INT 1
8293: PLUS
8294: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8295: LD_ADDR_VAR 0 8
8299: PUSH
8300: LD_VAR 0 7
8304: PUSH
8305: LD_INT 1
8307: MINUS
8308: PUSH
8309: LD_INT 100
8311: MUL
8312: ST_TO_ADDR
// if number <= 3 then
8313: LD_VAR 0 2
8317: PUSH
8318: LD_INT 3
8320: LESSEQUAL
8321: IFFALSE 8553
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
8323: LD_VAR 0 8
8327: PUSH
8328: LD_INT 11
8330: PLUS
8331: PPUSH
8332: CALL_OW 110
8336: PPUSH
8337: LD_VAR 0 8
8341: PUSH
8342: LD_INT 5
8344: PLUS
8345: PPUSH
8346: CALL_OW 110
8350: PPUSH
8351: LD_INT 1
8353: PPUSH
8354: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
8358: LD_VAR 0 8
8362: PUSH
8363: LD_INT 11
8365: PLUS
8366: PPUSH
8367: CALL_OW 110
8371: PPUSH
8372: LD_VAR 0 8
8376: PUSH
8377: LD_VAR 0 1
8381: PUSH
8382: LD_INT 10
8384: MUL
8385: PLUS
8386: PUSH
8387: LD_INT 12
8389: PLUS
8390: PPUSH
8391: CALL_OW 110
8395: PPUSH
8396: CALL_OW 329
// SetTag ( base + 12 , true ) ;
8400: LD_VAR 0 8
8404: PUSH
8405: LD_INT 12
8407: PLUS
8408: PPUSH
8409: LD_INT 1
8411: PPUSH
8412: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
8416: LD_ADDR_EXP 45
8420: PUSH
8421: LD_EXP 45
8425: PUSH
8426: LD_VAR 0 8
8430: PUSH
8431: LD_INT 11
8433: PLUS
8434: PPUSH
8435: CALL_OW 110
8439: ADD
8440: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8441: LD_ADDR_VAR 0 5
8445: PUSH
8446: DOUBLE
8447: LD_INT 0
8449: DEC
8450: ST_TO_ADDR
8451: LD_EXP 42
8455: PUSH
8456: LD_INT 1
8458: MINUS
8459: PUSH
8460: FOR_TO
8461: IFFALSE 8549
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
8463: LD_VAR 0 8
8467: PUSH
8468: LD_INT 11
8470: PLUS
8471: PPUSH
8472: CALL_OW 110
8476: PUSH
8477: LD_VAR 0 5
8481: PUSH
8482: LD_INT 100
8484: MUL
8485: PUSH
8486: LD_INT 11
8488: PLUS
8489: PPUSH
8490: CALL_OW 110
8494: PUSH
8495: LD_VAR 0 5
8499: PUSH
8500: LD_INT 100
8502: MUL
8503: PUSH
8504: LD_VAR 0 1
8508: PUSH
8509: LD_INT 10
8511: MUL
8512: PLUS
8513: PUSH
8514: LD_INT 15
8516: PLUS
8517: PPUSH
8518: CALL_OW 110
8522: PUSH
8523: EMPTY
8524: LIST
8525: LIST
8526: IN
8527: IFFALSE 8547
// DeInit_Lab ( side , un + 1 ) ;
8529: LD_VAR 0 1
8533: PPUSH
8534: LD_VAR 0 5
8538: PUSH
8539: LD_INT 1
8541: PLUS
8542: PPUSH
8543: CALL 9552 0 2
8547: GO 8460
8549: POP
8550: POP
// end else
8551: GO 8727
// begin succes := false ;
8553: LD_ADDR_VAR 0 6
8557: PUSH
8558: LD_INT 0
8560: ST_TO_ADDR
// case art of 1 :
8561: LD_VAR 0 7
8565: PUSH
8566: LD_INT 1
8568: DOUBLE
8569: EQUAL
8570: IFTRUE 8574
8572: GO 8602
8574: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
8575: LD_ADDR_VAR 0 6
8579: PUSH
8580: LD_VAR 0 1
8584: PPUSH
8585: LD_VAR 0 3
8589: PPUSH
8590: LD_VAR 0 4
8594: PPUSH
8595: CALL 10124 0 3
8599: ST_TO_ADDR
8600: GO 8670
8602: LD_INT 2
8604: DOUBLE
8605: EQUAL
8606: IFTRUE 8610
8608: GO 8633
8610: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
8611: LD_ADDR_VAR 0 6
8615: PUSH
8616: LD_VAR 0 1
8620: PPUSH
8621: LD_VAR 0 3
8625: PPUSH
8626: CALL 10362 0 2
8630: ST_TO_ADDR
8631: GO 8670
8633: LD_INT 3
8635: DOUBLE
8636: EQUAL
8637: IFTRUE 8641
8639: GO 8669
8641: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
8642: LD_ADDR_VAR 0 6
8646: PUSH
8647: LD_VAR 0 1
8651: PPUSH
8652: LD_VAR 0 3
8656: PPUSH
8657: LD_VAR 0 4
8661: PPUSH
8662: CALL 10758 0 3
8666: ST_TO_ADDR
8667: GO 8670
8669: POP
// if succes then
8670: LD_VAR 0 6
8674: IFFALSE 8727
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
8676: LD_VAR 0 8
8680: PUSH
8681: LD_VAR 0 1
8685: PUSH
8686: LD_INT 10
8688: MUL
8689: PLUS
8690: PUSH
8691: LD_INT 13
8693: PLUS
8694: PPUSH
8695: LD_VAR 0 8
8699: PUSH
8700: LD_INT 7
8702: PLUS
8703: PPUSH
8704: CALL_OW 110
8708: PPUSH
8709: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
8713: LD_VAR 0 1
8717: PPUSH
8718: LD_VAR 0 7
8722: PPUSH
8723: CALL 8730 0 2
// end ; end ; end ;
8727: PPOPN 8
8729: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
8730: LD_INT 0
8732: PPUSH
8733: PPUSH
8734: PPUSH
// base := ( art - 1 ) * 100 ;
8735: LD_ADDR_VAR 0 4
8739: PUSH
8740: LD_VAR 0 2
8744: PUSH
8745: LD_INT 1
8747: MINUS
8748: PUSH
8749: LD_INT 100
8751: MUL
8752: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8753: LD_ADDR_VAR 0 5
8757: PUSH
8758: LD_VAR 0 4
8762: PUSH
8763: LD_VAR 0 1
8767: PUSH
8768: LD_INT 10
8770: MUL
8771: PLUS
8772: PUSH
8773: LD_INT 15
8775: PLUS
8776: PPUSH
8777: CALL_OW 110
8781: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
8782: LD_VAR 0 5
8786: PUSH
8787: LD_VAR 0 5
8791: PUSH
8792: LD_EXP 45
8796: IN
8797: NOT
8798: AND
8799: IFFALSE 8857
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
8801: LD_VAR 0 1
8805: PPUSH
8806: LD_VAR 0 4
8810: PUSH
8811: LD_INT 1
8813: PLUS
8814: PUSH
8815: LD_VAR 0 4
8819: PUSH
8820: LD_VAR 0 1
8824: PUSH
8825: LD_INT 10
8827: MUL
8828: PLUS
8829: PUSH
8830: LD_INT 11
8832: PLUS
8833: PPUSH
8834: CALL_OW 110
8838: PLUS
8839: PPUSH
8840: CALL_OW 110
8844: PPUSH
8845: LD_INT 1
8847: PPUSH
8848: LD_VAR 0 5
8852: PPUSH
8853: CALL_OW 468
// end ;
8857: LD_VAR 0 3
8861: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
8862: LD_INT 0
8864: PPUSH
8865: PPUSH
8866: PPUSH
// base := ( art - 1 ) * 100 ;
8867: LD_ADDR_VAR 0 4
8871: PUSH
8872: LD_VAR 0 2
8876: PUSH
8877: LD_INT 1
8879: MINUS
8880: PUSH
8881: LD_INT 100
8883: MUL
8884: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8885: LD_ADDR_VAR 0 5
8889: PUSH
8890: LD_VAR 0 4
8894: PUSH
8895: LD_VAR 0 1
8899: PUSH
8900: LD_INT 10
8902: MUL
8903: PLUS
8904: PUSH
8905: LD_INT 15
8907: PLUS
8908: PPUSH
8909: CALL_OW 110
8913: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
8914: LD_VAR 0 5
8918: PUSH
8919: LD_VAR 0 5
8923: PUSH
8924: LD_EXP 45
8928: IN
8929: NOT
8930: AND
8931: PUSH
8932: LD_VAR 0 5
8936: PPUSH
8937: CALL_OW 313
8941: AND
8942: IFFALSE 9011
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
8944: LD_VAR 0 1
8948: PPUSH
8949: LD_VAR 0 4
8953: PUSH
8954: LD_INT 1
8956: PLUS
8957: PUSH
8958: LD_VAR 0 4
8962: PUSH
8963: LD_VAR 0 1
8967: PUSH
8968: LD_INT 10
8970: MUL
8971: PLUS
8972: PUSH
8973: LD_INT 11
8975: PLUS
8976: PPUSH
8977: CALL_OW 110
8981: PLUS
8982: PPUSH
8983: CALL_OW 110
8987: PPUSH
8988: LD_VAR 0 4
8992: PUSH
8993: LD_INT 3
8995: PLUS
8996: PPUSH
8997: CALL_OW 110
9001: PPUSH
9002: LD_VAR 0 5
9006: PPUSH
9007: CALL_OW 468
// end ;
9011: LD_VAR 0 3
9015: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9016: LD_INT 0
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9026: LD_ADDR_VAR 0 8
9030: PUSH
9031: LD_EXP 44
9035: PUSH
9036: LD_VAR 0 1
9040: ARRAY
9041: PPUSH
9042: CALL_OW 469
9046: ST_TO_ADDR
// if not art_hex then
9047: LD_VAR 0 8
9051: NOT
9052: IFFALSE 9056
// exit ;
9054: GO 9547
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9056: LD_ADDR_VAR 0 3
9060: PUSH
9061: LD_INT 2
9063: PUSH
9064: LD_INT 30
9066: PUSH
9067: LD_INT 6
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 30
9076: PUSH
9077: LD_INT 7
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 30
9086: PUSH
9087: LD_INT 8
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: PUSH
9100: EMPTY
9101: LIST
9102: PPUSH
9103: CALL_OW 69
9107: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9108: LD_ADDR_VAR 0 9
9112: PUSH
9113: LD_VAR 0 3
9117: PPUSH
9118: LD_VAR 0 8
9122: PUSH
9123: LD_INT 1
9125: ARRAY
9126: PPUSH
9127: LD_VAR 0 8
9131: PUSH
9132: LD_INT 2
9134: ARRAY
9135: PPUSH
9136: CALL_OW 73
9140: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9141: LD_ADDR_VAR 0 6
9145: PUSH
9146: LD_VAR 0 9
9150: PPUSH
9151: LD_VAR 0 8
9155: PUSH
9156: LD_INT 1
9158: ARRAY
9159: PPUSH
9160: LD_VAR 0 8
9164: PUSH
9165: LD_INT 2
9167: ARRAY
9168: PPUSH
9169: CALL_OW 297
9173: ST_TO_ADDR
// if dist < 9 then
9174: LD_VAR 0 6
9178: PUSH
9179: LD_INT 9
9181: LESS
9182: IFFALSE 9547
// begin side := GetSide ( nearest_lab ) ;
9184: LD_ADDR_VAR 0 4
9188: PUSH
9189: LD_VAR 0 9
9193: PPUSH
9194: CALL_OW 255
9198: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
9199: LD_VAR 0 4
9203: PPUSH
9204: LD_VAR 0 1
9208: PPUSH
9209: CALL 9552 0 2
// base := ( art - 1 ) * 100 ;
9213: LD_ADDR_VAR 0 5
9217: PUSH
9218: LD_VAR 0 1
9222: PUSH
9223: LD_INT 1
9225: MINUS
9226: PUSH
9227: LD_INT 100
9229: MUL
9230: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
9231: LD_INT 24
9233: PPUSH
9234: LD_VAR 0 4
9238: PPUSH
9239: CALL_OW 321
9243: PUSH
9244: LD_INT 2
9246: EQUAL
9247: PUSH
9248: LD_VAR 0 9
9252: PPUSH
9253: CALL_OW 313
9257: AND
9258: IFFALSE 9450
// begin if GetTag ( base + side * 10 + 11 ) then
9260: LD_VAR 0 5
9264: PUSH
9265: LD_VAR 0 4
9269: PUSH
9270: LD_INT 10
9272: MUL
9273: PLUS
9274: PUSH
9275: LD_INT 11
9277: PLUS
9278: PPUSH
9279: CALL_OW 110
9283: IFFALSE 9440
// begin if not GetTag ( base + side * 10 + 13 ) then
9285: LD_VAR 0 5
9289: PUSH
9290: LD_VAR 0 4
9294: PUSH
9295: LD_INT 10
9297: MUL
9298: PLUS
9299: PUSH
9300: LD_INT 13
9302: PLUS
9303: PPUSH
9304: CALL_OW 110
9308: NOT
9309: IFFALSE 9332
// state := GetTag ( base + 03 ) else
9311: LD_ADDR_VAR 0 7
9315: PUSH
9316: LD_VAR 0 5
9320: PUSH
9321: LD_INT 3
9323: PLUS
9324: PPUSH
9325: CALL_OW 110
9329: ST_TO_ADDR
9330: GO 9340
// state := art_gray ;
9332: LD_ADDR_VAR 0 7
9336: PUSH
9337: LD_INT 1
9339: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
9340: LD_VAR 0 5
9344: PUSH
9345: LD_VAR 0 4
9349: PUSH
9350: LD_INT 10
9352: MUL
9353: PLUS
9354: PUSH
9355: LD_INT 15
9357: PLUS
9358: PPUSH
9359: CALL_OW 110
9363: PUSH
9364: LD_VAR 0 5
9368: PUSH
9369: LD_VAR 0 4
9373: PUSH
9374: LD_INT 10
9376: MUL
9377: PLUS
9378: PUSH
9379: LD_INT 15
9381: PLUS
9382: PPUSH
9383: CALL_OW 110
9387: PUSH
9388: LD_VAR 0 9
9392: NONEQUAL
9393: AND
9394: IFFALSE 9410
// DeInit_Lab ( side , art ) ;
9396: LD_VAR 0 4
9400: PPUSH
9401: LD_VAR 0 1
9405: PPUSH
9406: CALL 9552 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
9410: LD_VAR 0 5
9414: PUSH
9415: LD_VAR 0 4
9419: PUSH
9420: LD_INT 10
9422: MUL
9423: PLUS
9424: PUSH
9425: LD_INT 15
9427: PLUS
9428: PPUSH
9429: LD_VAR 0 9
9433: PPUSH
9434: CALL_OW 109
// end else
9438: GO 9448
// state := art_instant ;
9440: LD_ADDR_VAR 0 7
9444: PUSH
9445: LD_INT 2
9447: ST_TO_ADDR
// end else
9448: GO 9458
// state := art_gray ;
9450: LD_ADDR_VAR 0 7
9454: PUSH
9455: LD_INT 1
9457: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
9458: LD_VAR 0 5
9462: PUSH
9463: LD_INT 11
9465: PLUS
9466: PPUSH
9467: LD_VAR 0 9
9471: PPUSH
9472: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
9476: LD_VAR 0 9
9480: PUSH
9481: LD_EXP 45
9485: IN
9486: NOT
9487: IFFALSE 9547
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
9489: LD_VAR 0 4
9493: PPUSH
9494: LD_VAR 0 5
9498: PUSH
9499: LD_INT 1
9501: PLUS
9502: PUSH
9503: LD_VAR 0 5
9507: PUSH
9508: LD_VAR 0 4
9512: PUSH
9513: LD_INT 10
9515: MUL
9516: PLUS
9517: PUSH
9518: LD_INT 11
9520: PLUS
9521: PPUSH
9522: CALL_OW 110
9526: PLUS
9527: PPUSH
9528: CALL_OW 110
9532: PPUSH
9533: LD_VAR 0 7
9537: PPUSH
9538: LD_VAR 0 9
9542: PPUSH
9543: CALL_OW 468
// end ; end ;
9547: LD_VAR 0 2
9551: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
9552: LD_INT 0
9554: PPUSH
9555: PPUSH
9556: PPUSH
// base := ( art - 1 ) * 100 ;
9557: LD_ADDR_VAR 0 4
9561: PUSH
9562: LD_VAR 0 2
9566: PUSH
9567: LD_INT 1
9569: MINUS
9570: PUSH
9571: LD_INT 100
9573: MUL
9574: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9575: LD_ADDR_VAR 0 5
9579: PUSH
9580: LD_VAR 0 4
9584: PUSH
9585: LD_VAR 0 1
9589: PUSH
9590: LD_INT 10
9592: MUL
9593: PLUS
9594: PUSH
9595: LD_INT 15
9597: PLUS
9598: PPUSH
9599: CALL_OW 110
9603: ST_TO_ADDR
// if not lab then
9604: LD_VAR 0 5
9608: NOT
9609: IFFALSE 9630
// lab := GetTag ( base + 11 ) ;
9611: LD_ADDR_VAR 0 5
9615: PUSH
9616: LD_VAR 0 4
9620: PUSH
9621: LD_INT 11
9623: PLUS
9624: PPUSH
9625: CALL_OW 110
9629: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
9630: LD_VAR 0 1
9634: PPUSH
9635: LD_VAR 0 4
9639: PUSH
9640: LD_INT 1
9642: PLUS
9643: PUSH
9644: LD_VAR 0 4
9648: PUSH
9649: LD_VAR 0 1
9653: PUSH
9654: LD_INT 10
9656: MUL
9657: PLUS
9658: PUSH
9659: LD_INT 11
9661: PLUS
9662: PPUSH
9663: CALL_OW 110
9667: PLUS
9668: PPUSH
9669: CALL_OW 110
9673: PPUSH
9674: LD_INT 0
9676: PPUSH
9677: LD_VAR 0 5
9681: PPUSH
9682: CALL_OW 468
// end ;
9686: LD_VAR 0 3
9690: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
9691: LD_INT 0
9693: PPUSH
9694: PPUSH
9695: PPUSH
9696: PPUSH
// side := GetSide ( lab ) ;
9697: LD_ADDR_VAR 0 4
9701: PUSH
9702: LD_VAR 0 1
9706: PPUSH
9707: CALL_OW 255
9711: ST_TO_ADDR
// for art = 1 to artefact_number do
9712: LD_ADDR_VAR 0 3
9716: PUSH
9717: DOUBLE
9718: LD_INT 1
9720: DEC
9721: ST_TO_ADDR
9722: LD_EXP 42
9726: PUSH
9727: FOR_TO
9728: IFFALSE 9884
// begin base := ( art - 1 ) * 100 ;
9730: LD_ADDR_VAR 0 5
9734: PUSH
9735: LD_VAR 0 3
9739: PUSH
9740: LD_INT 1
9742: MINUS
9743: PUSH
9744: LD_INT 100
9746: MUL
9747: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
9748: LD_VAR 0 5
9752: PUSH
9753: LD_INT 11
9755: PLUS
9756: PPUSH
9757: CALL_OW 110
9761: PUSH
9762: LD_VAR 0 1
9766: EQUAL
9767: IFFALSE 9780
// Init_Lab ( art ) else
9769: LD_VAR 0 3
9773: PPUSH
9774: CALL 9016 0 1
9778: GO 9882
// begin if lab = GetTag ( base + side * 10 + 15 ) then
9780: LD_VAR 0 1
9784: PUSH
9785: LD_VAR 0 5
9789: PUSH
9790: LD_VAR 0 4
9794: PUSH
9795: LD_INT 10
9797: MUL
9798: PLUS
9799: PUSH
9800: LD_INT 15
9802: PLUS
9803: PPUSH
9804: CALL_OW 110
9808: EQUAL
9809: IFFALSE 9882
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
9811: LD_VAR 0 5
9815: PUSH
9816: LD_VAR 0 4
9820: PUSH
9821: LD_INT 10
9823: MUL
9824: PLUS
9825: PUSH
9826: LD_INT 13
9828: PLUS
9829: PPUSH
9830: CALL_OW 110
9834: PUSH
9835: LD_INT 0
9837: GREATER
9838: PUSH
9839: LD_VAR 0 1
9843: PPUSH
9844: CALL_OW 313
9848: NOT
9849: OR
9850: IFFALSE 9868
// Shadow_Artefact ( side , art ) else
9852: LD_VAR 0 4
9856: PPUSH
9857: LD_VAR 0 3
9861: PPUSH
9862: CALL 8730 0 2
9866: GO 9882
// Highlight_Artefact ( side , art ) ;
9868: LD_VAR 0 4
9872: PPUSH
9873: LD_VAR 0 3
9877: PPUSH
9878: CALL 8862 0 2
// end ; end ; end ;
9882: GO 9727
9884: POP
9885: POP
// end ; end_of_file
9886: LD_VAR 0 2
9890: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
9891: LD_INT 10
9893: PPUSH
9894: CALL_OW 67
// if not IsBusy ( lab ) then
9898: LD_VAR 0 2
9902: PPUSH
9903: CALL_OW 315
9907: NOT
9908: IFFALSE 9935
// begin labs_in_use := labs_in_use diff lab ;
9910: LD_ADDR_EXP 45
9914: PUSH
9915: LD_EXP 45
9919: PUSH
9920: LD_VAR 0 2
9924: DIFF
9925: ST_TO_ADDR
// Update_Artefact ( lab ) ;
9926: LD_VAR 0 2
9930: PPUSH
9931: CALL 9691 0 1
// end ; end ;
9935: PPOPN 2
9937: END
// on ResearchStarted ( tech , lab ) do var un , side ;
9938: LD_INT 0
9940: PPUSH
9941: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
9942: LD_ADDR_EXP 45
9946: PUSH
9947: LD_EXP 45
9951: PUSH
9952: LD_VAR 0 2
9956: ADD
9957: ST_TO_ADDR
// side := GetSide ( lab ) ;
9958: LD_ADDR_VAR 0 4
9962: PUSH
9963: LD_VAR 0 2
9967: PPUSH
9968: CALL_OW 255
9972: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9973: LD_ADDR_VAR 0 3
9977: PUSH
9978: DOUBLE
9979: LD_INT 0
9981: DEC
9982: ST_TO_ADDR
9983: LD_EXP 42
9987: PUSH
9988: LD_INT 1
9990: MINUS
9991: PUSH
9992: FOR_TO
9993: IFFALSE 10072
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9995: LD_VAR 0 2
9999: PUSH
10000: LD_VAR 0 3
10004: PUSH
10005: LD_INT 100
10007: MUL
10008: PUSH
10009: LD_INT 11
10011: PLUS
10012: PPUSH
10013: CALL_OW 110
10017: PUSH
10018: LD_VAR 0 3
10022: PUSH
10023: LD_INT 100
10025: MUL
10026: PUSH
10027: LD_VAR 0 4
10031: PUSH
10032: LD_INT 10
10034: MUL
10035: PLUS
10036: PUSH
10037: LD_INT 15
10039: PLUS
10040: PPUSH
10041: CALL_OW 110
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: IN
10050: IFFALSE 10070
// DeInit_Lab ( side , un + 1 ) ;
10052: LD_VAR 0 4
10056: PPUSH
10057: LD_VAR 0 3
10061: PUSH
10062: LD_INT 1
10064: PLUS
10065: PPUSH
10066: CALL 9552 0 2
10070: GO 9992
10072: POP
10073: POP
// end ;
10074: PPOPN 4
10076: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10077: LD_INT 10
10079: PPUSH
10080: CALL_OW 67
// if not IsBusy ( lab ) then
10084: LD_VAR 0 2
10088: PPUSH
10089: CALL_OW 315
10093: NOT
10094: IFFALSE 10121
// begin labs_in_use := labs_in_use diff lab ;
10096: LD_ADDR_EXP 45
10100: PUSH
10101: LD_EXP 45
10105: PUSH
10106: LD_VAR 0 2
10110: DIFF
10111: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10112: LD_VAR 0 2
10116: PPUSH
10117: CALL 9691 0 1
// end ; end ; end_of_file
10121: PPOPN 2
10123: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10124: LD_INT 0
10126: PPUSH
10127: PPUSH
10128: PPUSH
// vysledek := true ;
10129: LD_ADDR_VAR 0 5
10133: PUSH
10134: LD_INT 1
10136: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
10137: LD_ADDR_VAR 0 6
10141: PUSH
10142: LD_VAR 0 1
10146: PUSH
10147: LD_INT 10
10149: MUL
10150: PUSH
10151: LD_INT 15
10153: PLUS
10154: PPUSH
10155: CALL_OW 110
10159: PPUSH
10160: CALL_OW 274
10164: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
10165: LD_VAR 0 6
10169: PUSH
10170: LD_VAR 0 6
10174: PPUSH
10175: CALL_OW 279
10179: PUSH
10180: LD_INT 3
10182: ARRAY
10183: PUSH
10184: LD_INT 6
10186: PPUSH
10187: CALL_OW 110
10191: GREATEREQUAL
10192: AND
10193: IFFALSE 10283
// begin PlaceSeeing ( x , y , side , - 15 ) ;
10195: LD_VAR 0 2
10199: PPUSH
10200: LD_VAR 0 3
10204: PPUSH
10205: LD_VAR 0 1
10209: PPUSH
10210: LD_INT 15
10212: NEG
10213: PPUSH
10214: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
10218: LD_VAR 0 6
10222: PPUSH
10223: LD_INT 3
10225: PPUSH
10226: LD_VAR 0 6
10230: PPUSH
10231: CALL_OW 279
10235: PUSH
10236: LD_INT 3
10238: ARRAY
10239: PUSH
10240: LD_INT 6
10242: PPUSH
10243: CALL_OW 110
10247: MINUS
10248: PPUSH
10249: CALL_OW 277
// view_data := [ x , y , side ] ;
10253: LD_ADDR_LOC 9
10257: PUSH
10258: LD_VAR 0 2
10262: PUSH
10263: LD_VAR 0 3
10267: PUSH
10268: LD_VAR 0 1
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: LIST
10277: ST_TO_ADDR
// enable ( 1 ) ;
10278: LD_INT 1
10280: ENABLE_MARKED
// end else
10281: GO 10291
// vysledek := false ;
10283: LD_ADDR_VAR 0 5
10287: PUSH
10288: LD_INT 0
10290: ST_TO_ADDR
// result := vysledek ;
10291: LD_ADDR_VAR 0 4
10295: PUSH
10296: LD_VAR 0 5
10300: ST_TO_ADDR
// end ;
10301: LD_VAR 0 4
10305: RET
// every 0 0$2 trigger view_data marked 1 do
10306: LD_LOC 9
10310: IFFALSE 10361
10312: GO 10314
10314: DISABLE
// begin wait ( 0 0$30 ) ;
10315: LD_INT 1050
10317: PPUSH
10318: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
10322: LD_LOC 9
10326: PUSH
10327: LD_INT 1
10329: ARRAY
10330: PPUSH
10331: LD_LOC 9
10335: PUSH
10336: LD_INT 2
10338: ARRAY
10339: PPUSH
10340: LD_LOC 9
10344: PUSH
10345: LD_INT 3
10347: ARRAY
10348: PPUSH
10349: CALL_OW 331
// view_data := 0 ;
10353: LD_ADDR_LOC 9
10357: PUSH
10358: LD_INT 0
10360: ST_TO_ADDR
// end ;
10361: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
10362: LD_INT 0
10364: PPUSH
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
10370: PPUSH
10371: PPUSH
// vysledek := true ;
10372: LD_ADDR_VAR 0 4
10376: PUSH
10377: LD_INT 1
10379: ST_TO_ADDR
// it_can := false ;
10380: LD_ADDR_VAR 0 8
10384: PUSH
10385: LD_INT 0
10387: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
10388: LD_ADDR_VAR 0 9
10392: PUSH
10393: LD_INT 30
10395: PUSH
10396: LD_INT 28
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
10403: LD_ADDR_VAR 0 10
10407: PUSH
10408: LD_INT 8
10410: PUSH
10411: LD_INT 48
10413: PUSH
10414: LD_INT 29
10416: PUSH
10417: LD_INT 49
10419: PUSH
10420: LD_INT 10
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
10430: LD_ADDR_VAR 0 7
10434: PUSH
10435: LD_VAR 0 2
10439: PPUSH
10440: CALL_OW 247
10444: PUSH
10445: LD_INT 3
10447: EQUAL
10448: PUSH
10449: LD_VAR 0 2
10453: PPUSH
10454: CALL_OW 266
10458: PUSH
10459: LD_VAR 0 9
10463: IN
10464: PUSH
10465: LD_VAR 0 2
10469: PPUSH
10470: CALL_OW 269
10474: PUSH
10475: LD_VAR 0 10
10479: IN
10480: OR
10481: AND
10482: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
10483: LD_ADDR_VAR 0 6
10487: PUSH
10488: LD_VAR 0 2
10492: PPUSH
10493: CALL_OW 247
10497: PUSH
10498: LD_INT 2
10500: EQUAL
10501: PUSH
10502: LD_VAR 0 2
10506: PPUSH
10507: CALL_OW 264
10511: PUSH
10512: LD_VAR 0 10
10516: IN
10517: PUSH
10518: LD_VAR 0 2
10522: PPUSH
10523: CALL_OW 262
10527: PUSH
10528: LD_INT 3
10530: EQUAL
10531: OR
10532: AND
10533: ST_TO_ADDR
// case def_artefact_two of 1 :
10534: LD_EXP 2
10538: PUSH
10539: LD_INT 1
10541: DOUBLE
10542: EQUAL
10543: IFTRUE 10547
10545: GO 10564
10547: POP
// if b_can then
10548: LD_VAR 0 7
10552: IFFALSE 10562
// it_can := true ; 2 :
10554: LD_ADDR_VAR 0 8
10558: PUSH
10559: LD_INT 1
10561: ST_TO_ADDR
10562: GO 10621
10564: LD_INT 2
10566: DOUBLE
10567: EQUAL
10568: IFTRUE 10572
10570: GO 10589
10572: POP
// if v_can then
10573: LD_VAR 0 6
10577: IFFALSE 10587
// it_can := true ; 3 :
10579: LD_ADDR_VAR 0 8
10583: PUSH
10584: LD_INT 1
10586: ST_TO_ADDR
10587: GO 10621
10589: LD_INT 3
10591: DOUBLE
10592: EQUAL
10593: IFTRUE 10597
10595: GO 10620
10597: POP
// if b_can or v_can then
10598: LD_VAR 0 7
10602: PUSH
10603: LD_VAR 0 6
10607: OR
10608: IFFALSE 10618
// it_can := true ; end ;
10610: LD_ADDR_VAR 0 8
10614: PUSH
10615: LD_INT 1
10617: ST_TO_ADDR
10618: GO 10621
10620: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
10621: LD_ADDR_VAR 0 5
10625: PUSH
10626: LD_INT 100
10628: PUSH
10629: LD_VAR 0 1
10633: PUSH
10634: LD_INT 10
10636: MUL
10637: PLUS
10638: PUSH
10639: LD_INT 15
10641: PLUS
10642: PPUSH
10643: CALL_OW 110
10647: PPUSH
10648: CALL_OW 274
10652: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
10653: LD_VAR 0 5
10657: PUSH
10658: LD_VAR 0 8
10662: AND
10663: PUSH
10664: LD_VAR 0 5
10668: PPUSH
10669: CALL_OW 279
10673: PUSH
10674: LD_INT 3
10676: ARRAY
10677: PUSH
10678: LD_INT 106
10680: PPUSH
10681: CALL_OW 110
10685: GREATEREQUAL
10686: AND
10687: IFFALSE 10735
// begin KillUnit ( un ) ;
10689: LD_VAR 0 2
10693: PPUSH
10694: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
10698: LD_VAR 0 5
10702: PPUSH
10703: LD_INT 3
10705: PPUSH
10706: LD_VAR 0 5
10710: PPUSH
10711: CALL_OW 279
10715: PUSH
10716: LD_INT 3
10718: ARRAY
10719: PUSH
10720: LD_INT 106
10722: PPUSH
10723: CALL_OW 110
10727: MINUS
10728: PPUSH
10729: CALL_OW 277
// end else
10733: GO 10743
// vysledek := false ;
10735: LD_ADDR_VAR 0 4
10739: PUSH
10740: LD_INT 0
10742: ST_TO_ADDR
// result := vysledek ;
10743: LD_ADDR_VAR 0 3
10747: PUSH
10748: LD_VAR 0 4
10752: ST_TO_ADDR
// end ;
10753: LD_VAR 0 3
10757: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
10758: LD_INT 0
10760: PPUSH
10761: PPUSH
10762: PPUSH
10763: PPUSH
// vysledek := true ;
10764: LD_ADDR_VAR 0 5
10768: PUSH
10769: LD_INT 1
10771: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
10772: LD_ADDR_VAR 0 7
10776: PUSH
10777: LD_INT 200
10779: PUSH
10780: LD_VAR 0 1
10784: PUSH
10785: LD_INT 10
10787: MUL
10788: PLUS
10789: PUSH
10790: LD_INT 15
10792: PLUS
10793: PPUSH
10794: CALL_OW 110
10798: PPUSH
10799: CALL_OW 274
10803: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
10804: LD_VAR 0 7
10808: PUSH
10809: LD_VAR 0 7
10813: PPUSH
10814: CALL_OW 279
10818: PUSH
10819: LD_INT 3
10821: ARRAY
10822: PUSH
10823: LD_INT 206
10825: PPUSH
10826: CALL_OW 110
10830: GREATEREQUAL
10831: AND
10832: IFFALSE 10888
// begin ArtContamination ( p1 , p2 , 15 ) ;
10834: LD_VAR 0 2
10838: PPUSH
10839: LD_VAR 0 3
10843: PPUSH
10844: LD_INT 15
10846: PPUSH
10847: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
10851: LD_VAR 0 7
10855: PPUSH
10856: LD_INT 3
10858: PPUSH
10859: LD_VAR 0 7
10863: PPUSH
10864: CALL_OW 279
10868: PUSH
10869: LD_INT 3
10871: ARRAY
10872: PUSH
10873: LD_INT 206
10875: PPUSH
10876: CALL_OW 110
10880: MINUS
10881: PPUSH
10882: CALL_OW 277
// end else
10886: GO 10896
// vysledek := false ;
10888: LD_ADDR_VAR 0 5
10892: PUSH
10893: LD_INT 0
10895: ST_TO_ADDR
// result := vysledek ;
10896: LD_ADDR_VAR 0 4
10900: PUSH
10901: LD_VAR 0 5
10905: ST_TO_ADDR
// end ;
10906: LD_VAR 0 4
10910: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
10911: GO 10913
10913: DISABLE
10914: LD_INT 0
10916: PPUSH
10917: PPUSH
10918: PPUSH
// begin for art = 0 to artefact_number do
10919: LD_ADDR_VAR 0 1
10923: PUSH
10924: DOUBLE
10925: LD_INT 0
10927: DEC
10928: ST_TO_ADDR
10929: LD_EXP 42
10933: PUSH
10934: FOR_TO
10935: IFFALSE 11069
// for side = 1 to Side_Positions do
10937: LD_ADDR_VAR 0 2
10941: PUSH
10942: DOUBLE
10943: LD_INT 1
10945: DEC
10946: ST_TO_ADDR
10947: LD_EXP 23
10951: PUSH
10952: FOR_TO
10953: IFFALSE 11065
// begin recharge := art * 100 + side * 10 + 13 ;
10955: LD_ADDR_VAR 0 3
10959: PUSH
10960: LD_VAR 0 1
10964: PUSH
10965: LD_INT 100
10967: MUL
10968: PUSH
10969: LD_VAR 0 2
10973: PUSH
10974: LD_INT 10
10976: MUL
10977: PLUS
10978: PUSH
10979: LD_INT 13
10981: PLUS
10982: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
10983: LD_EXP 23
10987: PUSH
10988: LD_VAR 0 2
10992: ARRAY
10993: PUSH
10994: LD_VAR 0 3
10998: PPUSH
10999: CALL_OW 110
11003: PUSH
11004: LD_INT 0
11006: GREATER
11007: AND
11008: IFFALSE 11063
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11010: LD_VAR 0 3
11014: PPUSH
11015: LD_VAR 0 3
11019: PPUSH
11020: CALL_OW 110
11024: PUSH
11025: LD_INT 1
11027: MINUS
11028: PPUSH
11029: CALL_OW 109
// if not GetTag ( recharge ) then
11033: LD_VAR 0 3
11037: PPUSH
11038: CALL_OW 110
11042: NOT
11043: IFFALSE 11063
// Highlight_Artefact ( side , art + 1 ) ;
11045: LD_VAR 0 2
11049: PPUSH
11050: LD_VAR 0 1
11054: PUSH
11055: LD_INT 1
11057: PLUS
11058: PPUSH
11059: CALL 8862 0 2
// end ; end ;
11063: GO 10952
11065: POP
11066: POP
11067: GO 10934
11069: POP
11070: POP
// enable ;
11071: ENABLE
// end ; end_of_file
11072: PPOPN 3
11074: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11075: LD_INT 0
11077: PPUSH
11078: PPUSH
11079: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11080: LD_INT 18
11082: PPUSH
11083: LD_VAR 0 1
11087: PUSH
11088: LD_INT 1
11090: ARRAY
11091: PPUSH
11092: LD_VAR 0 1
11096: PUSH
11097: LD_INT 2
11099: ARRAY
11100: PPUSH
11101: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11105: LD_VAR 0 1
11109: PUSH
11110: LD_INT 1
11112: ARRAY
11113: PPUSH
11114: LD_VAR 0 1
11118: PUSH
11119: LD_INT 2
11121: ARRAY
11122: PPUSH
11123: CALL_OW 494
// Wait ( 30 ) ;
11127: LD_INT 30
11129: PPUSH
11130: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
11134: LD_INT 18
11136: PPUSH
11137: LD_INT 4
11139: PPUSH
11140: CALL_OW 286
// base := ( art - 1 ) * 100 ;
11144: LD_ADDR_VAR 0 4
11148: PUSH
11149: LD_VAR 0 2
11153: PUSH
11154: LD_INT 1
11156: MINUS
11157: PUSH
11158: LD_INT 100
11160: MUL
11161: ST_TO_ADDR
// if GetTag ( base + 11 ) then
11162: LD_VAR 0 4
11166: PUSH
11167: LD_INT 11
11169: PLUS
11170: PPUSH
11171: CALL_OW 110
11175: IFFALSE 11313
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
11177: LD_ADDR_VAR 0 5
11181: PUSH
11182: LD_VAR 0 4
11186: PUSH
11187: LD_INT 11
11189: PLUS
11190: PPUSH
11191: CALL_OW 110
11195: PPUSH
11196: CALL_OW 255
11200: ST_TO_ADDR
// if GetTag ( base + 12 ) then
11201: LD_VAR 0 4
11205: PUSH
11206: LD_INT 12
11208: PLUS
11209: PPUSH
11210: CALL_OW 110
11214: IFFALSE 11257
// begin ComCancel ( GetTag ( base + 11 ) ) ;
11216: LD_VAR 0 4
11220: PUSH
11221: LD_INT 11
11223: PLUS
11224: PPUSH
11225: CALL_OW 110
11229: PPUSH
11230: CALL_OW 127
// Wait ( 10 ) ;
11234: LD_INT 10
11236: PPUSH
11237: CALL_OW 67
// SetTag ( base + 12 , false ) ;
11241: LD_VAR 0 4
11245: PUSH
11246: LD_INT 12
11248: PLUS
11249: PPUSH
11250: LD_INT 0
11252: PPUSH
11253: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
11257: LD_VAR 0 4
11261: PUSH
11262: LD_VAR 0 5
11266: PUSH
11267: LD_INT 10
11269: MUL
11270: PLUS
11271: PUSH
11272: LD_INT 11
11274: PLUS
11275: PPUSH
11276: CALL_OW 110
11280: NOT
11281: IFFALSE 11297
// DeInit_Lab ( side , art ) ;
11283: LD_VAR 0 5
11287: PPUSH
11288: LD_VAR 0 2
11292: PPUSH
11293: CALL 9552 0 2
// SetTag ( base + 11 , 0 ) ;
11297: LD_VAR 0 4
11301: PUSH
11302: LD_INT 11
11304: PLUS
11305: PPUSH
11306: LD_INT 0
11308: PPUSH
11309: CALL_OW 109
// end ; end ;
11313: LD_VAR 0 3
11317: RET
// every 0 0$5 marked 5 do var hex , un ;
11318: GO 11320
11320: DISABLE
11321: LD_INT 0
11323: PPUSH
11324: PPUSH
// begin if GetTag ( 09 ) then
11325: LD_INT 9
11327: PPUSH
11328: CALL_OW 110
11332: IFFALSE 11371
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
11334: LD_ADDR_VAR 0 1
11338: PUSH
11339: LD_INT 13
11341: PPUSH
11342: CALL_OW 110
11346: PPUSH
11347: CALL_OW 250
11351: PUSH
11352: LD_INT 13
11354: PPUSH
11355: CALL_OW 110
11359: PPUSH
11360: CALL_OW 251
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: ST_TO_ADDR
11369: GO 11390
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
11371: LD_ADDR_VAR 0 1
11375: PUSH
11376: LD_EXP 44
11380: PUSH
11381: LD_INT 1
11383: ARRAY
11384: PPUSH
11385: CALL_OW 469
11389: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11390: LD_VAR 0 1
11394: PUSH
11395: LD_INT 1
11397: ARRAY
11398: PPUSH
11399: LD_VAR 0 1
11403: PUSH
11404: LD_INT 2
11406: ARRAY
11407: PPUSH
11408: LD_INT 16
11410: PPUSH
11411: CALL_OW 309
11415: NOT
11416: IFFALSE 11761
// begin wait ( 3 3$0 ) ;
11418: LD_INT 6300
11420: PPUSH
11421: CALL_OW 67
// if GetTag ( 09 ) then
11425: LD_INT 9
11427: PPUSH
11428: CALL_OW 110
11432: IFFALSE 11479
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
11434: LD_INT 13
11436: PPUSH
11437: CALL_OW 110
11441: PPUSH
11442: LD_INT 4
11444: PPUSH
11445: LD_EXP 44
11449: PUSH
11450: LD_INT 1
11452: ARRAY
11453: NEG
11454: PPUSH
11455: CALL_OW 290
// SetTag ( 09 , 0 ) ;
11459: LD_INT 9
11461: PPUSH
11462: LD_INT 0
11464: PPUSH
11465: CALL_OW 109
// SetTag ( 13 , 0 ) ;
11469: LD_INT 13
11471: PPUSH
11472: LD_INT 0
11474: PPUSH
11475: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 1 ] ) ;
11479: LD_ADDR_VAR 0 1
11483: PUSH
11484: LD_EXP 44
11488: PUSH
11489: LD_INT 1
11491: ARRAY
11492: PPUSH
11493: CALL_OW 469
11497: ST_TO_ADDR
// if not hex then
11498: LD_VAR 0 1
11502: NOT
11503: IFFALSE 11540
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
11505: LD_ADDR_VAR 0 1
11509: PUSH
11510: LD_INT 13
11512: PPUSH
11513: CALL_OW 110
11517: PPUSH
11518: CALL_OW 250
11522: PUSH
11523: LD_INT 13
11525: PPUSH
11526: CALL_OW 110
11530: PPUSH
11531: CALL_OW 251
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: ST_TO_ADDR
// DestroyArtefact ( hex , 1 ) ;
11540: LD_VAR 0 1
11544: PPUSH
11545: LD_INT 1
11547: PPUSH
11548: CALL 11075 0 2
// wait ( 5 ) ;
11552: LD_INT 5
11554: PPUSH
11555: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
11559: LD_ADDR_VAR 0 1
11563: PUSH
11564: LD_INT 16
11566: PPUSH
11567: LD_INT 0
11569: PPUSH
11570: CALL_OW 16
11574: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11575: LD_ADDR_VAR 0 2
11579: PUSH
11580: LD_VAR 0 1
11584: PUSH
11585: LD_INT 1
11587: ARRAY
11588: PPUSH
11589: LD_VAR 0 1
11593: PUSH
11594: LD_INT 2
11596: ARRAY
11597: PPUSH
11598: CALL_OW 428
11602: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
11603: LD_VAR 0 2
11607: PUSH
11608: LD_INT 0
11610: GREATER
11611: PUSH
11612: LD_VAR 0 2
11616: PPUSH
11617: CALL_OW 247
11621: PUSH
11622: LD_INT 3
11624: EQUAL
11625: AND
11626: IFFALSE 11670
// begin KillUnit ( un ) ;
11628: LD_VAR 0 2
11632: PPUSH
11633: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
11637: LD_VAR 0 1
11641: PUSH
11642: LD_INT 1
11644: ARRAY
11645: PPUSH
11646: LD_VAR 0 1
11650: PUSH
11651: LD_INT 2
11653: ARRAY
11654: PPUSH
11655: CALL_OW 428
11659: IFFALSE 11670
// wait ( 10 ) ;
11661: LD_INT 10
11663: PPUSH
11664: CALL_OW 67
11668: GO 11637
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11670: LD_VAR 0 1
11674: PUSH
11675: LD_INT 1
11677: ARRAY
11678: PPUSH
11679: LD_VAR 0 1
11683: PUSH
11684: LD_INT 2
11686: ARRAY
11687: PPUSH
11688: CALL_OW 428
11692: NOT
11693: IFFALSE 11559
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11695: LD_VAR 0 1
11699: PUSH
11700: LD_INT 1
11702: ARRAY
11703: PPUSH
11704: LD_VAR 0 1
11708: PUSH
11709: LD_INT 2
11711: ARRAY
11712: PPUSH
11713: CALL_OW 494
// wait ( 30 ) ;
11717: LD_INT 30
11719: PPUSH
11720: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
11724: LD_INT 4
11726: PPUSH
11727: LD_EXP 44
11731: PUSH
11732: LD_INT 1
11734: ARRAY
11735: PPUSH
11736: LD_VAR 0 1
11740: PUSH
11741: LD_INT 1
11743: ARRAY
11744: PPUSH
11745: LD_VAR 0 1
11749: PUSH
11750: LD_INT 2
11752: ARRAY
11753: PPUSH
11754: LD_INT 0
11756: PPUSH
11757: CALL_OW 58
// end ; enable ;
11761: ENABLE
// end ;
11762: PPOPN 2
11764: END
// every 0 0$5 marked 6 do var hex , un ;
11765: GO 11767
11767: DISABLE
11768: LD_INT 0
11770: PPUSH
11771: PPUSH
// begin if GetTag ( 109 ) then
11772: LD_INT 109
11774: PPUSH
11775: CALL_OW 110
11779: IFFALSE 11818
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
11781: LD_ADDR_VAR 0 1
11785: PUSH
11786: LD_INT 113
11788: PPUSH
11789: CALL_OW 110
11793: PPUSH
11794: CALL_OW 250
11798: PUSH
11799: LD_INT 113
11801: PPUSH
11802: CALL_OW 110
11806: PPUSH
11807: CALL_OW 251
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: ST_TO_ADDR
11816: GO 11837
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
11818: LD_ADDR_VAR 0 1
11822: PUSH
11823: LD_EXP 44
11827: PUSH
11828: LD_INT 2
11830: ARRAY
11831: PPUSH
11832: CALL_OW 469
11836: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11837: LD_VAR 0 1
11841: PUSH
11842: LD_INT 1
11844: ARRAY
11845: PPUSH
11846: LD_VAR 0 1
11850: PUSH
11851: LD_INT 2
11853: ARRAY
11854: PPUSH
11855: LD_INT 16
11857: PPUSH
11858: CALL_OW 309
11862: NOT
11863: IFFALSE 12208
// begin wait ( 3 3$30 ) ;
11865: LD_INT 7350
11867: PPUSH
11868: CALL_OW 67
// if GetTag ( 109 ) then
11872: LD_INT 109
11874: PPUSH
11875: CALL_OW 110
11879: IFFALSE 11926
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 2 ] ) ;
11881: LD_INT 113
11883: PPUSH
11884: CALL_OW 110
11888: PPUSH
11889: LD_INT 4
11891: PPUSH
11892: LD_EXP 44
11896: PUSH
11897: LD_INT 2
11899: ARRAY
11900: NEG
11901: PPUSH
11902: CALL_OW 290
// SetTag ( 109 , 0 ) ;
11906: LD_INT 109
11908: PPUSH
11909: LD_INT 0
11911: PPUSH
11912: CALL_OW 109
// SetTag ( 113 , 0 ) ;
11916: LD_INT 113
11918: PPUSH
11919: LD_INT 0
11921: PPUSH
11922: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 2 ] ) ;
11926: LD_ADDR_VAR 0 1
11930: PUSH
11931: LD_EXP 44
11935: PUSH
11936: LD_INT 2
11938: ARRAY
11939: PPUSH
11940: CALL_OW 469
11944: ST_TO_ADDR
// if not hex then
11945: LD_VAR 0 1
11949: NOT
11950: IFFALSE 11987
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
11952: LD_ADDR_VAR 0 1
11956: PUSH
11957: LD_INT 13
11959: PPUSH
11960: CALL_OW 110
11964: PPUSH
11965: CALL_OW 250
11969: PUSH
11970: LD_INT 13
11972: PPUSH
11973: CALL_OW 110
11977: PPUSH
11978: CALL_OW 251
11982: PUSH
11983: EMPTY
11984: LIST
11985: LIST
11986: ST_TO_ADDR
// DestroyArtefact ( hex , 2 ) ;
11987: LD_VAR 0 1
11991: PPUSH
11992: LD_INT 2
11994: PPUSH
11995: CALL 11075 0 2
// wait ( 5 ) ;
11999: LD_INT 5
12001: PPUSH
12002: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12006: LD_ADDR_VAR 0 1
12010: PUSH
12011: LD_INT 16
12013: PPUSH
12014: LD_INT 0
12016: PPUSH
12017: CALL_OW 16
12021: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12022: LD_ADDR_VAR 0 2
12026: PUSH
12027: LD_VAR 0 1
12031: PUSH
12032: LD_INT 1
12034: ARRAY
12035: PPUSH
12036: LD_VAR 0 1
12040: PUSH
12041: LD_INT 2
12043: ARRAY
12044: PPUSH
12045: CALL_OW 428
12049: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12050: LD_VAR 0 2
12054: PUSH
12055: LD_INT 0
12057: GREATER
12058: PUSH
12059: LD_VAR 0 2
12063: PPUSH
12064: CALL_OW 247
12068: PUSH
12069: LD_INT 3
12071: EQUAL
12072: AND
12073: IFFALSE 12117
// begin KillUnit ( un ) ;
12075: LD_VAR 0 2
12079: PPUSH
12080: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12084: LD_VAR 0 1
12088: PUSH
12089: LD_INT 1
12091: ARRAY
12092: PPUSH
12093: LD_VAR 0 1
12097: PUSH
12098: LD_INT 2
12100: ARRAY
12101: PPUSH
12102: CALL_OW 428
12106: IFFALSE 12117
// wait ( 10 ) ;
12108: LD_INT 10
12110: PPUSH
12111: CALL_OW 67
12115: GO 12084
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12117: LD_VAR 0 1
12121: PUSH
12122: LD_INT 1
12124: ARRAY
12125: PPUSH
12126: LD_VAR 0 1
12130: PUSH
12131: LD_INT 2
12133: ARRAY
12134: PPUSH
12135: CALL_OW 428
12139: NOT
12140: IFFALSE 12006
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12142: LD_VAR 0 1
12146: PUSH
12147: LD_INT 1
12149: ARRAY
12150: PPUSH
12151: LD_VAR 0 1
12155: PUSH
12156: LD_INT 2
12158: ARRAY
12159: PPUSH
12160: CALL_OW 494
// wait ( 30 ) ;
12164: LD_INT 30
12166: PPUSH
12167: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12171: LD_INT 4
12173: PPUSH
12174: LD_EXP 44
12178: PUSH
12179: LD_INT 2
12181: ARRAY
12182: PPUSH
12183: LD_VAR 0 1
12187: PUSH
12188: LD_INT 1
12190: ARRAY
12191: PPUSH
12192: LD_VAR 0 1
12196: PUSH
12197: LD_INT 2
12199: ARRAY
12200: PPUSH
12201: LD_INT 0
12203: PPUSH
12204: CALL_OW 58
// end ; enable ;
12208: ENABLE
// end ;
12209: PPOPN 2
12211: END
// every 0 0$5 marked 7 do var hex , un ;
12212: GO 12214
12214: DISABLE
12215: LD_INT 0
12217: PPUSH
12218: PPUSH
// begin if GetTag ( 209 ) then
12219: LD_INT 209
12221: PPUSH
12222: CALL_OW 110
12226: IFFALSE 12265
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12228: LD_ADDR_VAR 0 1
12232: PUSH
12233: LD_INT 213
12235: PPUSH
12236: CALL_OW 110
12240: PPUSH
12241: CALL_OW 250
12245: PUSH
12246: LD_INT 213
12248: PPUSH
12249: CALL_OW 110
12253: PPUSH
12254: CALL_OW 251
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: ST_TO_ADDR
12263: GO 12284
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
12265: LD_ADDR_VAR 0 1
12269: PUSH
12270: LD_EXP 44
12274: PUSH
12275: LD_INT 3
12277: ARRAY
12278: PPUSH
12279: CALL_OW 469
12283: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12284: LD_VAR 0 1
12288: PUSH
12289: LD_INT 1
12291: ARRAY
12292: PPUSH
12293: LD_VAR 0 1
12297: PUSH
12298: LD_INT 2
12300: ARRAY
12301: PPUSH
12302: LD_INT 16
12304: PPUSH
12305: CALL_OW 309
12309: NOT
12310: IFFALSE 12655
// begin wait ( 4 4$0 ) ;
12312: LD_INT 8400
12314: PPUSH
12315: CALL_OW 67
// if GetTag ( 209 ) then
12319: LD_INT 209
12321: PPUSH
12322: CALL_OW 110
12326: IFFALSE 12373
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 3 ] ) ;
12328: LD_INT 213
12330: PPUSH
12331: CALL_OW 110
12335: PPUSH
12336: LD_INT 4
12338: PPUSH
12339: LD_EXP 44
12343: PUSH
12344: LD_INT 3
12346: ARRAY
12347: NEG
12348: PPUSH
12349: CALL_OW 290
// SetTag ( 209 , 0 ) ;
12353: LD_INT 209
12355: PPUSH
12356: LD_INT 0
12358: PPUSH
12359: CALL_OW 109
// SetTag ( 213 , 0 ) ;
12363: LD_INT 213
12365: PPUSH
12366: LD_INT 0
12368: PPUSH
12369: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 3 ] ) ;
12373: LD_ADDR_VAR 0 1
12377: PUSH
12378: LD_EXP 44
12382: PUSH
12383: LD_INT 3
12385: ARRAY
12386: PPUSH
12387: CALL_OW 469
12391: ST_TO_ADDR
// if not hex then
12392: LD_VAR 0 1
12396: NOT
12397: IFFALSE 12434
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
12399: LD_ADDR_VAR 0 1
12403: PUSH
12404: LD_INT 13
12406: PPUSH
12407: CALL_OW 110
12411: PPUSH
12412: CALL_OW 250
12416: PUSH
12417: LD_INT 13
12419: PPUSH
12420: CALL_OW 110
12424: PPUSH
12425: CALL_OW 251
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: ST_TO_ADDR
// DestroyArtefact ( hex , 3 ) ;
12434: LD_VAR 0 1
12438: PPUSH
12439: LD_INT 3
12441: PPUSH
12442: CALL 11075 0 2
// wait ( 5 ) ;
12446: LD_INT 5
12448: PPUSH
12449: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12453: LD_ADDR_VAR 0 1
12457: PUSH
12458: LD_INT 16
12460: PPUSH
12461: LD_INT 0
12463: PPUSH
12464: CALL_OW 16
12468: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12469: LD_ADDR_VAR 0 2
12473: PUSH
12474: LD_VAR 0 1
12478: PUSH
12479: LD_INT 1
12481: ARRAY
12482: PPUSH
12483: LD_VAR 0 1
12487: PUSH
12488: LD_INT 2
12490: ARRAY
12491: PPUSH
12492: CALL_OW 428
12496: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12497: LD_VAR 0 2
12501: PUSH
12502: LD_INT 0
12504: GREATER
12505: PUSH
12506: LD_VAR 0 2
12510: PPUSH
12511: CALL_OW 247
12515: PUSH
12516: LD_INT 3
12518: EQUAL
12519: AND
12520: IFFALSE 12564
// begin KillUnit ( un ) ;
12522: LD_VAR 0 2
12526: PPUSH
12527: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12531: LD_VAR 0 1
12535: PUSH
12536: LD_INT 1
12538: ARRAY
12539: PPUSH
12540: LD_VAR 0 1
12544: PUSH
12545: LD_INT 2
12547: ARRAY
12548: PPUSH
12549: CALL_OW 428
12553: IFFALSE 12564
// wait ( 10 ) ;
12555: LD_INT 10
12557: PPUSH
12558: CALL_OW 67
12562: GO 12531
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12564: LD_VAR 0 1
12568: PUSH
12569: LD_INT 1
12571: ARRAY
12572: PPUSH
12573: LD_VAR 0 1
12577: PUSH
12578: LD_INT 2
12580: ARRAY
12581: PPUSH
12582: CALL_OW 428
12586: NOT
12587: IFFALSE 12453
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12589: LD_VAR 0 1
12593: PUSH
12594: LD_INT 1
12596: ARRAY
12597: PPUSH
12598: LD_VAR 0 1
12602: PUSH
12603: LD_INT 2
12605: ARRAY
12606: PPUSH
12607: CALL_OW 494
// wait ( 30 ) ;
12611: LD_INT 30
12613: PPUSH
12614: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12618: LD_INT 4
12620: PPUSH
12621: LD_EXP 44
12625: PUSH
12626: LD_INT 3
12628: ARRAY
12629: PPUSH
12630: LD_VAR 0 1
12634: PUSH
12635: LD_INT 1
12637: ARRAY
12638: PPUSH
12639: LD_VAR 0 1
12643: PUSH
12644: LD_INT 2
12646: ARRAY
12647: PPUSH
12648: LD_INT 0
12650: PPUSH
12651: CALL_OW 58
// end ; enable ;
12655: ENABLE
// end ; end_of_file
12656: PPOPN 2
12658: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
12659: LD_INT 0
12661: PPUSH
12662: PPUSH
// for un in battle_flags_id do
12663: LD_ADDR_VAR 0 2
12667: PUSH
12668: LD_EXP 33
12672: PUSH
12673: FOR_IN
12674: IFFALSE 12749
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
12676: LD_VAR 0 2
12680: PPUSH
12681: LD_INT 1
12683: PUSH
12684: LD_LOC 11
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: LD_LOC 11
12700: PUSH
12701: LD_INT 2
12703: DIV
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 3
12711: PUSH
12712: LD_LOC 11
12716: PUSH
12717: LD_INT 5
12719: DIV
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 20
12727: PUSH
12728: LD_LOC 11
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 423
12747: GO 12673
12749: POP
12750: POP
// end ;
12751: LD_VAR 0 1
12755: RET
// every 0 0$0.1 do var un ;
12756: GO 12758
12758: DISABLE
12759: LD_INT 0
12761: PPUSH
// begin if not def_morale_flags then
12762: LD_EXP 56
12766: NOT
12767: IFFALSE 12771
// exit ;
12769: GO 12848
// if not morale_decreasing_time then
12771: LD_EXP 14
12775: NOT
12776: IFFALSE 12780
// exit ;
12778: GO 12848
// strength = 100 ;
12780: LD_ADDR_LOC 11
12784: PUSH
12785: LD_INT 100
12787: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
12788: LD_EXP 14
12792: PPUSH
12793: CALL_OW 67
// strength := strength - 1 ;
12797: LD_ADDR_LOC 11
12801: PUSH
12802: LD_LOC 11
12806: PUSH
12807: LD_INT 1
12809: MINUS
12810: ST_TO_ADDR
// Update_Flags ;
12811: CALL 12659 0 0
// until not strength ;
12815: LD_LOC 11
12819: NOT
12820: IFFALSE 12788
// for un in battle_flags_id do
12822: LD_ADDR_VAR 0 1
12826: PUSH
12827: LD_EXP 33
12831: PUSH
12832: FOR_IN
12833: IFFALSE 12846
// KillBattleFlag ( un ) ;
12835: LD_VAR 0 1
12839: PPUSH
12840: CALL_OW 419
12844: GO 12832
12846: POP
12847: POP
// end ; end_of_file
12848: PPOPN 1
12850: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
12851: LD_INT 0
12853: PPUSH
12854: PPUSH
// if ( not IAmSpec ) then
12855: CALL_OW 531
12859: NOT
12860: IFFALSE 12876
// Result := Limits_Info ^  ;
12862: LD_ADDR_VAR 0 1
12866: PUSH
12867: LD_LOC 23
12871: PUSH
12872: LD_STRING 
12874: ADD
12875: ST_TO_ADDR
// for i := 1 to 8 do
12876: LD_ADDR_VAR 0 2
12880: PUSH
12881: DOUBLE
12882: LD_INT 1
12884: DEC
12885: ST_TO_ADDR
12886: LD_INT 8
12888: PUSH
12889: FOR_TO
12890: IFFALSE 12935
// if Cheaters [ i ] then
12892: LD_LOC 24
12896: PUSH
12897: LD_VAR 0 2
12901: ARRAY
12902: IFFALSE 12933
// Result := Result ^ [ #Cheater , i , i ] ;
12904: LD_ADDR_VAR 0 1
12908: PUSH
12909: LD_VAR 0 1
12913: PUSH
12914: LD_STRING #Cheater
12916: PUSH
12917: LD_VAR 0 2
12921: PUSH
12922: LD_VAR 0 2
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: LIST
12931: ADD
12932: ST_TO_ADDR
12933: GO 12889
12935: POP
12936: POP
// end ;
12937: LD_VAR 0 1
12941: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
12942: LD_INT 0
12944: PPUSH
12945: PPUSH
12946: PPUSH
12947: PPUSH
12948: PPUSH
// case Game_Type of 10 :
12949: LD_EXP 46
12953: PUSH
12954: LD_INT 10
12956: DOUBLE
12957: EQUAL
12958: IFTRUE 12962
12960: GO 12973
12962: POP
// def_game_rules := 1 ; 11 :
12963: LD_ADDR_EXP 47
12967: PUSH
12968: LD_INT 1
12970: ST_TO_ADDR
12971: GO 12993
12973: LD_INT 11
12975: DOUBLE
12976: EQUAL
12977: IFTRUE 12981
12979: GO 12992
12981: POP
// def_game_rules := 3 ; end ;
12982: LD_ADDR_EXP 47
12986: PUSH
12987: LD_INT 3
12989: ST_TO_ADDR
12990: GO 12993
12992: POP
// case def_game_rules of 0 :
12993: LD_EXP 47
12997: PUSH
12998: LD_INT 0
13000: DOUBLE
13001: EQUAL
13002: IFTRUE 13006
13004: GO 13011
13006: POP
// exit ; 1 :
13007: GO 15069
13009: GO 14969
13011: LD_INT 1
13013: DOUBLE
13014: EQUAL
13015: IFTRUE 13019
13017: GO 13235
13019: POP
// begin def_base_level := 2 ;
13020: LD_ADDR_EXP 48
13024: PUSH
13025: LD_INT 2
13027: ST_TO_ADDR
// def_amount_of_people := 2 ;
13028: LD_ADDR_EXP 49
13032: PUSH
13033: LD_INT 2
13035: ST_TO_ADDR
// def_skill_level := 1 ;
13036: LD_ADDR_EXP 50
13040: PUSH
13041: LD_INT 1
13043: ST_TO_ADDR
// def_starting_resources := 2 ;
13044: LD_ADDR_EXP 51
13048: PUSH
13049: LD_INT 2
13051: ST_TO_ADDR
// def_shipments_density := 1 ;
13052: LD_ADDR_EXP 52
13056: PUSH
13057: LD_INT 1
13059: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13060: LD_ADDR_EXP 53
13064: PUSH
13065: LD_INT 0
13067: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13068: LD_ADDR_EXP 54
13072: PUSH
13073: LD_INT 1
13075: ST_TO_ADDR
// def_shared_vision := 1 ;
13076: LD_ADDR_EXP 55
13080: PUSH
13081: LD_INT 1
13083: ST_TO_ADDR
// def_morale_flags := 3 ;
13084: LD_ADDR_EXP 56
13088: PUSH
13089: LD_INT 3
13091: ST_TO_ADDR
// def_siberite_detection := 1 ;
13092: LD_ADDR_EXP 57
13096: PUSH
13097: LD_INT 1
13099: ST_TO_ADDR
// def_people_respawning := 1 ;
13100: LD_ADDR_EXP 58
13104: PUSH
13105: LD_INT 1
13107: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13108: LD_ADDR_EXP 59
13112: PUSH
13113: LD_INT 1
13115: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13116: LD_ADDR_EXP 60
13120: PUSH
13121: LD_INT 0
13123: ST_TO_ADDR
// def_builduptime := 2 ;
13124: LD_ADDR_EXP 61
13128: PUSH
13129: LD_INT 2
13131: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: EMPTY
13138: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13139: LD_ADDR_VAR 0 3
13143: PUSH
13144: EMPTY
13145: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13146: LD_ADDR_LOC 18
13150: PUSH
13151: EMPTY
13152: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13153: LD_ADDR_LOC 19
13157: PUSH
13158: EMPTY
13159: ST_TO_ADDR
// Banned_Controls := [ ] ;
13160: LD_ADDR_LOC 20
13164: PUSH
13165: EMPTY
13166: ST_TO_ADDR
// Banned_Engines := [ ] ;
13167: LD_ADDR_LOC 21
13171: PUSH
13172: EMPTY
13173: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13174: LD_ADDR_LOC 16
13178: PUSH
13179: LD_INT 37
13181: PUSH
13182: EMPTY
13183: LIST
13184: PUSH
13185: LD_INT 4
13187: PUSH
13188: LD_INT 5
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 31
13197: PUSH
13198: LD_INT 32
13200: PUSH
13201: LD_INT 33
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
13214: LD_ADDR_LOC 17
13218: PUSH
13219: LD_INT 2
13221: PUSH
13222: LD_INT 2
13224: PUSH
13225: LD_INT 4
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: LIST
13232: ST_TO_ADDR
// end ; 2 :
13233: GO 14969
13235: LD_INT 2
13237: DOUBLE
13238: EQUAL
13239: IFTRUE 13243
13241: GO 13452
13243: POP
// begin def_base_level := 1 ;
13244: LD_ADDR_EXP 48
13248: PUSH
13249: LD_INT 1
13251: ST_TO_ADDR
// def_amount_of_people := 2 ;
13252: LD_ADDR_EXP 49
13256: PUSH
13257: LD_INT 2
13259: ST_TO_ADDR
// def_skill_level := 3 ;
13260: LD_ADDR_EXP 50
13264: PUSH
13265: LD_INT 3
13267: ST_TO_ADDR
// def_starting_resources := 3 ;
13268: LD_ADDR_EXP 51
13272: PUSH
13273: LD_INT 3
13275: ST_TO_ADDR
// def_shipments_density := 2 ;
13276: LD_ADDR_EXP 52
13280: PUSH
13281: LD_INT 2
13283: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13284: LD_ADDR_EXP 53
13288: PUSH
13289: LD_INT 1
13291: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13292: LD_ADDR_EXP 54
13296: PUSH
13297: LD_INT 2
13299: ST_TO_ADDR
// def_shared_vision := 1 ;
13300: LD_ADDR_EXP 55
13304: PUSH
13305: LD_INT 1
13307: ST_TO_ADDR
// def_morale_flags := 0 ;
13308: LD_ADDR_EXP 56
13312: PUSH
13313: LD_INT 0
13315: ST_TO_ADDR
// def_siberite_detection := 1 ;
13316: LD_ADDR_EXP 57
13320: PUSH
13321: LD_INT 1
13323: ST_TO_ADDR
// def_people_respawning := 0 ;
13324: LD_ADDR_EXP 58
13328: PUSH
13329: LD_INT 0
13331: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13332: LD_ADDR_EXP 59
13336: PUSH
13337: LD_INT 0
13339: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13340: LD_ADDR_EXP 60
13344: PUSH
13345: LD_INT 0
13347: ST_TO_ADDR
// def_builduptime := 2 ;
13348: LD_ADDR_EXP 61
13352: PUSH
13353: LD_INT 2
13355: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13356: LD_ADDR_VAR 0 2
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: EMPTY
13365: LIST
13366: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13367: LD_ADDR_VAR 0 3
13371: PUSH
13372: EMPTY
13373: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13374: LD_ADDR_LOC 18
13378: PUSH
13379: EMPTY
13380: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13381: LD_ADDR_LOC 19
13385: PUSH
13386: EMPTY
13387: ST_TO_ADDR
// Banned_Controls := [ ] ;
13388: LD_ADDR_LOC 20
13392: PUSH
13393: EMPTY
13394: ST_TO_ADDR
// Banned_Engines := [ ] ;
13395: LD_ADDR_LOC 21
13399: PUSH
13400: EMPTY
13401: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13402: LD_ADDR_LOC 16
13406: PUSH
13407: LD_INT 4
13409: PUSH
13410: LD_INT 5
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 31
13419: PUSH
13420: LD_INT 32
13422: PUSH
13423: LD_INT 33
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
13435: LD_ADDR_LOC 17
13439: PUSH
13440: LD_INT 1
13442: PUSH
13443: LD_INT 2
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: ST_TO_ADDR
// end ; 3 :
13450: GO 14969
13452: LD_INT 3
13454: DOUBLE
13455: EQUAL
13456: IFTRUE 13460
13458: GO 13703
13460: POP
// begin def_base_level := 1 ;
13461: LD_ADDR_EXP 48
13465: PUSH
13466: LD_INT 1
13468: ST_TO_ADDR
// def_amount_of_people := 2 ;
13469: LD_ADDR_EXP 49
13473: PUSH
13474: LD_INT 2
13476: ST_TO_ADDR
// def_skill_level := 3 ;
13477: LD_ADDR_EXP 50
13481: PUSH
13482: LD_INT 3
13484: ST_TO_ADDR
// def_starting_resources := 3 ;
13485: LD_ADDR_EXP 51
13489: PUSH
13490: LD_INT 3
13492: ST_TO_ADDR
// def_shipments_density := 1 ;
13493: LD_ADDR_EXP 52
13497: PUSH
13498: LD_INT 1
13500: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13501: LD_ADDR_EXP 53
13505: PUSH
13506: LD_INT 0
13508: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13509: LD_ADDR_EXP 54
13513: PUSH
13514: LD_INT 1
13516: ST_TO_ADDR
// def_shared_vision := 1 ;
13517: LD_ADDR_EXP 55
13521: PUSH
13522: LD_INT 1
13524: ST_TO_ADDR
// def_morale_flags := 0 ;
13525: LD_ADDR_EXP 56
13529: PUSH
13530: LD_INT 0
13532: ST_TO_ADDR
// def_siberite_detection := 1 ;
13533: LD_ADDR_EXP 57
13537: PUSH
13538: LD_INT 1
13540: ST_TO_ADDR
// def_people_respawning := 0 ;
13541: LD_ADDR_EXP 58
13545: PUSH
13546: LD_INT 0
13548: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
13549: LD_ADDR_EXP 59
13553: PUSH
13554: LD_INT 2
13556: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13557: LD_ADDR_EXP 60
13561: PUSH
13562: LD_INT 0
13564: ST_TO_ADDR
// def_builduptime := 1 ;
13565: LD_ADDR_EXP 61
13569: PUSH
13570: LD_INT 1
13572: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: LD_INT 23
13580: PUSH
13581: EMPTY
13582: LIST
13583: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
13584: LD_ADDR_VAR 0 3
13588: PUSH
13589: LD_INT 2
13591: PUSH
13592: LD_INT 37
13594: PUSH
13595: LD_INT 32
13597: PUSH
13598: LD_INT 33
13600: PUSH
13601: LD_INT 36
13603: PUSH
13604: LD_INT 16
13606: PUSH
13607: LD_INT 23
13609: PUSH
13610: LD_INT 21
13612: PUSH
13613: LD_INT 18
13615: PUSH
13616: LD_INT 22
13618: PUSH
13619: LD_INT 20
13621: PUSH
13622: LD_INT 19
13624: PUSH
13625: LD_INT 25
13627: PUSH
13628: LD_INT 17
13630: PUSH
13631: LD_INT 24
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13651: LD_ADDR_LOC 18
13655: PUSH
13656: EMPTY
13657: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13658: LD_ADDR_LOC 19
13662: PUSH
13663: EMPTY
13664: ST_TO_ADDR
// Banned_Controls := [ ] ;
13665: LD_ADDR_LOC 20
13669: PUSH
13670: EMPTY
13671: ST_TO_ADDR
// Banned_Engines := [ ] ;
13672: LD_ADDR_LOC 21
13676: PUSH
13677: EMPTY
13678: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13679: LD_ADDR_LOC 16
13683: PUSH
13684: EMPTY
13685: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13686: LD_ADDR_LOC 17
13690: PUSH
13691: EMPTY
13692: ST_TO_ADDR
// No_Mechs := true ;
13693: LD_ADDR_EXP 62
13697: PUSH
13698: LD_INT 1
13700: ST_TO_ADDR
// end ; 4 :
13701: GO 14969
13703: LD_INT 4
13705: DOUBLE
13706: EQUAL
13707: IFTRUE 13711
13709: GO 13886
13711: POP
// begin def_base_level := 1 ;
13712: LD_ADDR_EXP 48
13716: PUSH
13717: LD_INT 1
13719: ST_TO_ADDR
// def_amount_of_people := 2 ;
13720: LD_ADDR_EXP 49
13724: PUSH
13725: LD_INT 2
13727: ST_TO_ADDR
// def_skill_level := 3 ;
13728: LD_ADDR_EXP 50
13732: PUSH
13733: LD_INT 3
13735: ST_TO_ADDR
// def_starting_resources := 3 ;
13736: LD_ADDR_EXP 51
13740: PUSH
13741: LD_INT 3
13743: ST_TO_ADDR
// def_shipments_density := 2 ;
13744: LD_ADDR_EXP 52
13748: PUSH
13749: LD_INT 2
13751: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13752: LD_ADDR_EXP 53
13756: PUSH
13757: LD_INT 1
13759: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13760: LD_ADDR_EXP 54
13764: PUSH
13765: LD_INT 2
13767: ST_TO_ADDR
// def_shared_vision := 1 ;
13768: LD_ADDR_EXP 55
13772: PUSH
13773: LD_INT 1
13775: ST_TO_ADDR
// def_morale_flags := 0 ;
13776: LD_ADDR_EXP 56
13780: PUSH
13781: LD_INT 0
13783: ST_TO_ADDR
// def_siberite_detection := 1 ;
13784: LD_ADDR_EXP 57
13788: PUSH
13789: LD_INT 1
13791: ST_TO_ADDR
// def_people_respawning := 0 ;
13792: LD_ADDR_EXP 58
13796: PUSH
13797: LD_INT 0
13799: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13800: LD_ADDR_EXP 59
13804: PUSH
13805: LD_INT 0
13807: ST_TO_ADDR
// def_siberite_bomb := 1 ;
13808: LD_ADDR_EXP 60
13812: PUSH
13813: LD_INT 1
13815: ST_TO_ADDR
// def_builduptime := 3 ;
13816: LD_ADDR_EXP 61
13820: PUSH
13821: LD_INT 3
13823: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13824: LD_ADDR_VAR 0 2
13828: PUSH
13829: LD_INT 1
13831: PUSH
13832: EMPTY
13833: LIST
13834: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13835: LD_ADDR_VAR 0 3
13839: PUSH
13840: EMPTY
13841: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13842: LD_ADDR_LOC 18
13846: PUSH
13847: EMPTY
13848: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13849: LD_ADDR_LOC 19
13853: PUSH
13854: EMPTY
13855: ST_TO_ADDR
// Banned_Controls := [ ] ;
13856: LD_ADDR_LOC 20
13860: PUSH
13861: EMPTY
13862: ST_TO_ADDR
// Banned_Engines := [ ] ;
13863: LD_ADDR_LOC 21
13867: PUSH
13868: EMPTY
13869: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13870: LD_ADDR_LOC 16
13874: PUSH
13875: EMPTY
13876: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13877: LD_ADDR_LOC 17
13881: PUSH
13882: EMPTY
13883: ST_TO_ADDR
// end ; 5 :
13884: GO 14969
13886: LD_INT 5
13888: DOUBLE
13889: EQUAL
13890: IFTRUE 13894
13892: GO 14143
13894: POP
// begin def_base_level := 0 ;
13895: LD_ADDR_EXP 48
13899: PUSH
13900: LD_INT 0
13902: ST_TO_ADDR
// def_amount_of_people := 0 ;
13903: LD_ADDR_EXP 49
13907: PUSH
13908: LD_INT 0
13910: ST_TO_ADDR
// def_skill_level := 0 ;
13911: LD_ADDR_EXP 50
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// def_starting_resources := 0 ;
13919: LD_ADDR_EXP 51
13923: PUSH
13924: LD_INT 0
13926: ST_TO_ADDR
// def_shipments_density := 0 ;
13927: LD_ADDR_EXP 52
13931: PUSH
13932: LD_INT 0
13934: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13935: LD_ADDR_EXP 53
13939: PUSH
13940: LD_INT 0
13942: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
13943: LD_ADDR_EXP 54
13947: PUSH
13948: LD_INT 0
13950: ST_TO_ADDR
// def_shared_vision := 1 ;
13951: LD_ADDR_EXP 55
13955: PUSH
13956: LD_INT 1
13958: ST_TO_ADDR
// def_morale_flags := 0 ;
13959: LD_ADDR_EXP 56
13963: PUSH
13964: LD_INT 0
13966: ST_TO_ADDR
// def_siberite_detection := 0 ;
13967: LD_ADDR_EXP 57
13971: PUSH
13972: LD_INT 0
13974: ST_TO_ADDR
// def_people_respawning := 1 ;
13975: LD_ADDR_EXP 58
13979: PUSH
13980: LD_INT 1
13982: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13983: LD_ADDR_EXP 59
13987: PUSH
13988: LD_INT 1
13990: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13991: LD_ADDR_EXP 60
13995: PUSH
13996: LD_INT 0
13998: ST_TO_ADDR
// def_builduptime := 0 ;
13999: LD_ADDR_EXP 61
14003: PUSH
14004: LD_INT 0
14006: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
14007: LD_ADDR_VAR 0 2
14011: PUSH
14012: LD_INT 10
14014: PUSH
14015: LD_INT 3
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
14022: LD_ADDR_VAR 0 3
14026: PUSH
14027: LD_INT 12
14029: PUSH
14030: LD_INT 11
14032: PUSH
14033: LD_INT 14
14035: PUSH
14036: LD_INT 13
14038: PUSH
14039: LD_INT 5
14041: PUSH
14042: LD_INT 24
14044: PUSH
14045: LD_INT 21
14047: PUSH
14048: LD_INT 33
14050: PUSH
14051: LD_INT 36
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
14065: LD_ADDR_LOC 18
14069: PUSH
14070: LD_INT 31
14072: PUSH
14073: EMPTY
14074: LIST
14075: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14076: LD_ADDR_LOC 19
14080: PUSH
14081: EMPTY
14082: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
14083: LD_ADDR_LOC 20
14087: PUSH
14088: LD_INT 2
14090: PUSH
14091: EMPTY
14092: LIST
14093: ST_TO_ADDR
// Banned_Engines := [ ] ;
14094: LD_ADDR_LOC 21
14098: PUSH
14099: EMPTY
14100: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
14101: LD_ADDR_LOC 16
14105: PUSH
14106: LD_INT 4
14108: PUSH
14109: EMPTY
14110: LIST
14111: PUSH
14112: LD_INT 31
14114: PUSH
14115: LD_INT 32
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
14126: LD_ADDR_LOC 17
14130: PUSH
14131: LD_INT 1
14133: PUSH
14134: LD_INT 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: ST_TO_ADDR
// end ; 6 :
14141: GO 14969
14143: LD_INT 6
14145: DOUBLE
14146: EQUAL
14147: IFTRUE 14151
14149: GO 14354
14151: POP
// begin def_base_level := 1 ;
14152: LD_ADDR_EXP 48
14156: PUSH
14157: LD_INT 1
14159: ST_TO_ADDR
// def_amount_of_people := 2 ;
14160: LD_ADDR_EXP 49
14164: PUSH
14165: LD_INT 2
14167: ST_TO_ADDR
// def_skill_level := 3 ;
14168: LD_ADDR_EXP 50
14172: PUSH
14173: LD_INT 3
14175: ST_TO_ADDR
// def_starting_resources := 3 ;
14176: LD_ADDR_EXP 51
14180: PUSH
14181: LD_INT 3
14183: ST_TO_ADDR
// def_shipments_density := 1 ;
14184: LD_ADDR_EXP 52
14188: PUSH
14189: LD_INT 1
14191: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14192: LD_ADDR_EXP 53
14196: PUSH
14197: LD_INT 0
14199: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14200: LD_ADDR_EXP 54
14204: PUSH
14205: LD_INT 1
14207: ST_TO_ADDR
// def_shared_vision := 1 ;
14208: LD_ADDR_EXP 55
14212: PUSH
14213: LD_INT 1
14215: ST_TO_ADDR
// def_morale_flags := 0 ;
14216: LD_ADDR_EXP 56
14220: PUSH
14221: LD_INT 0
14223: ST_TO_ADDR
// def_siberite_detection := 1 ;
14224: LD_ADDR_EXP 57
14228: PUSH
14229: LD_INT 1
14231: ST_TO_ADDR
// def_people_respawning := 2 ;
14232: LD_ADDR_EXP 58
14236: PUSH
14237: LD_INT 2
14239: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14240: LD_ADDR_EXP 59
14244: PUSH
14245: LD_INT 1
14247: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14248: LD_ADDR_EXP 60
14252: PUSH
14253: LD_INT 0
14255: ST_TO_ADDR
// def_builduptime := 1 ;
14256: LD_ADDR_EXP 61
14260: PUSH
14261: LD_INT 1
14263: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14264: LD_ADDR_VAR 0 2
14268: PUSH
14269: LD_INT 23
14271: PUSH
14272: EMPTY
14273: LIST
14274: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
14275: LD_ADDR_VAR 0 3
14279: PUSH
14280: LD_INT 2
14282: PUSH
14283: LD_INT 37
14285: PUSH
14286: LD_INT 31
14288: PUSH
14289: LD_INT 32
14291: PUSH
14292: LD_INT 33
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14302: LD_ADDR_LOC 18
14306: PUSH
14307: EMPTY
14308: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14309: LD_ADDR_LOC 19
14313: PUSH
14314: EMPTY
14315: ST_TO_ADDR
// Banned_Controls := [ ] ;
14316: LD_ADDR_LOC 20
14320: PUSH
14321: EMPTY
14322: ST_TO_ADDR
// Banned_Engines := [ ] ;
14323: LD_ADDR_LOC 21
14327: PUSH
14328: EMPTY
14329: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14330: LD_ADDR_LOC 16
14334: PUSH
14335: EMPTY
14336: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14337: LD_ADDR_LOC 17
14341: PUSH
14342: EMPTY
14343: ST_TO_ADDR
// No_Mechs := true ;
14344: LD_ADDR_EXP 62
14348: PUSH
14349: LD_INT 1
14351: ST_TO_ADDR
// end ; 7 :
14352: GO 14969
14354: LD_INT 7
14356: DOUBLE
14357: EQUAL
14358: IFTRUE 14362
14360: GO 14560
14362: POP
// begin def_base_level := 1 ;
14363: LD_ADDR_EXP 48
14367: PUSH
14368: LD_INT 1
14370: ST_TO_ADDR
// def_amount_of_people := 2 ;
14371: LD_ADDR_EXP 49
14375: PUSH
14376: LD_INT 2
14378: ST_TO_ADDR
// def_skill_level := 3 ;
14379: LD_ADDR_EXP 50
14383: PUSH
14384: LD_INT 3
14386: ST_TO_ADDR
// def_starting_resources := 3 ;
14387: LD_ADDR_EXP 51
14391: PUSH
14392: LD_INT 3
14394: ST_TO_ADDR
// def_shipments_density := 1 ;
14395: LD_ADDR_EXP 52
14399: PUSH
14400: LD_INT 1
14402: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14403: LD_ADDR_EXP 53
14407: PUSH
14408: LD_INT 1
14410: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14411: LD_ADDR_EXP 54
14415: PUSH
14416: LD_INT 2
14418: ST_TO_ADDR
// def_shared_vision := 1 ;
14419: LD_ADDR_EXP 55
14423: PUSH
14424: LD_INT 1
14426: ST_TO_ADDR
// def_morale_flags := 0 ;
14427: LD_ADDR_EXP 56
14431: PUSH
14432: LD_INT 0
14434: ST_TO_ADDR
// def_siberite_detection := 1 ;
14435: LD_ADDR_EXP 57
14439: PUSH
14440: LD_INT 1
14442: ST_TO_ADDR
// def_people_respawning := 0 ;
14443: LD_ADDR_EXP 58
14447: PUSH
14448: LD_INT 0
14450: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14451: LD_ADDR_EXP 59
14455: PUSH
14456: LD_INT 1
14458: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14459: LD_ADDR_EXP 60
14463: PUSH
14464: LD_INT 0
14466: ST_TO_ADDR
// def_builduptime := 3 ;
14467: LD_ADDR_EXP 61
14471: PUSH
14472: LD_INT 3
14474: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14475: LD_ADDR_VAR 0 2
14479: PUSH
14480: LD_INT 23
14482: PUSH
14483: EMPTY
14484: LIST
14485: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
14486: LD_ADDR_VAR 0 3
14490: PUSH
14491: LD_INT 37
14493: PUSH
14494: EMPTY
14495: LIST
14496: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14497: LD_ADDR_LOC 18
14501: PUSH
14502: EMPTY
14503: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14504: LD_ADDR_LOC 19
14508: PUSH
14509: EMPTY
14510: ST_TO_ADDR
// Banned_Controls := [ ] ;
14511: LD_ADDR_LOC 20
14515: PUSH
14516: EMPTY
14517: ST_TO_ADDR
// Banned_Engines := [ ] ;
14518: LD_ADDR_LOC 21
14522: PUSH
14523: EMPTY
14524: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14525: LD_ADDR_LOC 16
14529: PUSH
14530: LD_INT 31
14532: PUSH
14533: LD_INT 32
14535: PUSH
14536: LD_INT 33
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: LIST
14543: PUSH
14544: EMPTY
14545: LIST
14546: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
14547: LD_ADDR_LOC 17
14551: PUSH
14552: LD_INT 10
14554: PUSH
14555: EMPTY
14556: LIST
14557: ST_TO_ADDR
// end ; 8 :
14558: GO 14969
14560: LD_INT 8
14562: DOUBLE
14563: EQUAL
14564: IFTRUE 14568
14566: GO 14968
14568: POP
// begin def_base_level := 0 ;
14569: LD_ADDR_EXP 48
14573: PUSH
14574: LD_INT 0
14576: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
14577: LD_ADDR_EXP 49
14581: PUSH
14582: LD_INT 0
14584: PPUSH
14585: LD_INT 1
14587: PPUSH
14588: CALL_OW 12
14592: ST_TO_ADDR
// def_skill_level := 0 ;
14593: LD_ADDR_EXP 50
14597: PUSH
14598: LD_INT 0
14600: ST_TO_ADDR
// def_starting_resources := 2 ;
14601: LD_ADDR_EXP 51
14605: PUSH
14606: LD_INT 2
14608: ST_TO_ADDR
// def_shipments_density := 1 ;
14609: LD_ADDR_EXP 52
14613: PUSH
14614: LD_INT 1
14616: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14617: LD_ADDR_EXP 53
14621: PUSH
14622: LD_INT 0
14624: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
14625: LD_ADDR_EXP 54
14629: PUSH
14630: LD_INT 0
14632: ST_TO_ADDR
// def_shared_vision := 1 ;
14633: LD_ADDR_EXP 55
14637: PUSH
14638: LD_INT 1
14640: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
14641: LD_ADDR_EXP 56
14645: PUSH
14646: LD_INT 0
14648: PPUSH
14649: LD_INT 2
14651: PPUSH
14652: CALL_OW 12
14656: ST_TO_ADDR
// def_siberite_detection := 0 ;
14657: LD_ADDR_EXP 57
14661: PUSH
14662: LD_INT 0
14664: ST_TO_ADDR
// def_people_respawning := 0 ;
14665: LD_ADDR_EXP 58
14669: PUSH
14670: LD_INT 0
14672: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14673: LD_ADDR_EXP 59
14677: PUSH
14678: LD_INT 2
14680: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14681: LD_ADDR_EXP 60
14685: PUSH
14686: LD_INT 0
14688: ST_TO_ADDR
// def_builduptime := 0 ;
14689: LD_ADDR_EXP 61
14693: PUSH
14694: LD_INT 0
14696: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
14697: LD_ADDR_VAR 0 2
14701: PUSH
14702: LD_INT 23
14704: PUSH
14705: LD_INT 20
14707: PUSH
14708: LD_INT 40
14710: PUSH
14711: LD_INT 47
14713: PUSH
14714: LD_INT 46
14716: PUSH
14717: LD_INT 39
14719: PUSH
14720: LD_INT 71
14722: PUSH
14723: LD_INT 34
14725: PUSH
14726: LD_INT 41
14728: PUSH
14729: LD_INT 44
14731: PUSH
14732: LD_INT 17
14734: PUSH
14735: LD_INT 16
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
14752: LD_ADDR_VAR 0 3
14756: PUSH
14757: LD_INT 37
14759: PUSH
14760: LD_INT 5
14762: PUSH
14763: LD_INT 13
14765: PUSH
14766: LD_INT 34
14768: PUSH
14769: LD_INT 12
14771: PUSH
14772: LD_INT 15
14774: PUSH
14775: LD_INT 11
14777: PUSH
14778: LD_INT 14
14780: PUSH
14781: LD_INT 29
14783: PUSH
14784: LD_INT 30
14786: PUSH
14787: LD_INT 28
14789: PUSH
14790: LD_INT 24
14792: PUSH
14793: LD_INT 25
14795: PUSH
14796: LD_INT 20
14798: PUSH
14799: LD_INT 21
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_INT 36
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14827: LD_ADDR_LOC 18
14831: PUSH
14832: EMPTY
14833: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
14834: LD_ADDR_LOC 19
14838: PUSH
14839: LD_INT 14
14841: PUSH
14842: EMPTY
14843: LIST
14844: ST_TO_ADDR
// Banned_Controls := [ ] ;
14845: LD_ADDR_LOC 20
14849: PUSH
14850: EMPTY
14851: ST_TO_ADDR
// Banned_Engines := [ ] ;
14852: LD_ADDR_LOC 21
14856: PUSH
14857: EMPTY
14858: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
14859: LD_ADDR_LOC 16
14863: PUSH
14864: LD_INT 31
14866: PUSH
14867: LD_INT 32
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: LD_INT 4
14876: PUSH
14877: EMPTY
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
14884: LD_ADDR_LOC 17
14888: PUSH
14889: LD_INT 2
14891: PUSH
14892: LD_INT 1
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: ST_TO_ADDR
// for i := 1 to 8 do
14899: LD_ADDR_VAR 0 4
14903: PUSH
14904: DOUBLE
14905: LD_INT 1
14907: DEC
14908: ST_TO_ADDR
14909: LD_INT 8
14911: PUSH
14912: FOR_TO
14913: IFFALSE 14964
// if ( Side_Nations [ i ] = 3 ) then
14915: LD_EXP 24
14919: PUSH
14920: LD_VAR 0 4
14924: ARRAY
14925: PUSH
14926: LD_INT 3
14928: EQUAL
14929: IFFALSE 14962
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
14931: LD_ADDR_EXP 24
14935: PUSH
14936: LD_EXP 24
14940: PPUSH
14941: LD_VAR 0 4
14945: PPUSH
14946: LD_INT 1
14948: PPUSH
14949: LD_INT 2
14951: PPUSH
14952: CALL_OW 12
14956: PPUSH
14957: CALL_OW 1
14961: ST_TO_ADDR
14962: GO 14912
14964: POP
14965: POP
// end ; end ;
14966: GO 14969
14968: POP
// for i := 1 to 8 do
14969: LD_ADDR_VAR 0 4
14973: PUSH
14974: DOUBLE
14975: LD_INT 1
14977: DEC
14978: ST_TO_ADDR
14979: LD_INT 8
14981: PUSH
14982: FOR_TO
14983: IFFALSE 15067
// if Side_Positions [ i ] then
14985: LD_EXP 23
14989: PUSH
14990: LD_VAR 0 4
14994: ARRAY
14995: IFFALSE 15065
// begin for j in Unavailable_Techs do
14997: LD_ADDR_VAR 0 5
15001: PUSH
15002: LD_VAR 0 2
15006: PUSH
15007: FOR_IN
15008: IFFALSE 15029
// SetTech ( j , i , 0 ) ;
15010: LD_VAR 0 5
15014: PPUSH
15015: LD_VAR 0 4
15019: PPUSH
15020: LD_INT 0
15022: PPUSH
15023: CALL_OW 322
15027: GO 15007
15029: POP
15030: POP
// for j in Unavailable_Builds do
15031: LD_ADDR_VAR 0 5
15035: PUSH
15036: LD_VAR 0 3
15040: PUSH
15041: FOR_IN
15042: IFFALSE 15063
// SetRestrict ( j , i , 0 ) ;
15044: LD_VAR 0 5
15048: PPUSH
15049: LD_VAR 0 4
15053: PPUSH
15054: LD_INT 0
15056: PPUSH
15057: CALL_OW 324
15061: GO 15041
15063: POP
15064: POP
// end ;
15065: GO 14982
15067: POP
15068: POP
// end ;
15069: LD_VAR 0 1
15073: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
15074: LD_INT 0
15076: PPUSH
15077: PPUSH
15078: PPUSH
15079: PPUSH
15080: PPUSH
15081: PPUSH
15082: PPUSH
// for i := 1 to Restricted_Builds do
15083: LD_ADDR_VAR 0 2
15087: PUSH
15088: DOUBLE
15089: LD_INT 1
15091: DEC
15092: ST_TO_ADDR
15093: LD_LOC 16
15097: PUSH
15098: FOR_TO
15099: IFFALSE 15409
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
15101: LD_LOC 16
15105: PUSH
15106: LD_VAR 0 2
15110: ARRAY
15111: PUSH
15112: LD_INT 1
15114: ARRAY
15115: PUSH
15116: LD_INT 31
15118: DOUBLE
15119: EQUAL
15120: IFTRUE 15136
15122: LD_INT 32
15124: DOUBLE
15125: EQUAL
15126: IFTRUE 15136
15128: LD_INT 33
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15147
15136: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
15137: LD_ADDR_VAR 0 6
15141: PUSH
15142: LD_STRING #Turrets
15144: ST_TO_ADDR
15145: GO 15192
15147: LD_INT 4
15149: DOUBLE
15150: EQUAL
15151: IFTRUE 15161
15153: LD_INT 5
15155: DOUBLE
15156: EQUAL
15157: IFTRUE 15161
15159: GO 15172
15161: POP
// btype := #Armouries ; b_Behemoth :
15162: LD_ADDR_VAR 0 6
15166: PUSH
15167: LD_STRING #Armouries
15169: ST_TO_ADDR
15170: GO 15192
15172: LD_INT 37
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15191
15180: POP
// btype := #Behemoths ; end ;
15181: LD_ADDR_VAR 0 6
15185: PUSH
15186: LD_STRING #Behemoths
15188: ST_TO_ADDR
15189: GO 15192
15191: POP
// list := [ ] ;
15192: LD_ADDR_VAR 0 7
15196: PUSH
15197: EMPTY
15198: ST_TO_ADDR
// for j := 1 to 8 do
15199: LD_ADDR_VAR 0 3
15203: PUSH
15204: DOUBLE
15205: LD_INT 1
15207: DEC
15208: ST_TO_ADDR
15209: LD_INT 8
15211: PUSH
15212: FOR_TO
15213: IFFALSE 15306
// if Side_Positions [ j ] then
15215: LD_EXP 23
15219: PUSH
15220: LD_VAR 0 3
15224: ARRAY
15225: IFFALSE 15304
// begin amount := 0 ;
15227: LD_ADDR_VAR 0 5
15231: PUSH
15232: LD_INT 0
15234: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
15235: LD_ADDR_VAR 0 4
15239: PUSH
15240: LD_LOC 16
15244: PUSH
15245: LD_VAR 0 2
15249: ARRAY
15250: PUSH
15251: FOR_IN
15252: IFFALSE 15300
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
15254: LD_ADDR_VAR 0 5
15258: PUSH
15259: LD_VAR 0 5
15263: PUSH
15264: LD_INT 22
15266: PUSH
15267: LD_VAR 0 3
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 30
15278: PUSH
15279: LD_VAR 0 4
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PPUSH
15292: CALL_OW 69
15296: PLUS
15297: ST_TO_ADDR
15298: GO 15251
15300: POP
15301: POP
// break ;
15302: GO 15306
// end ;
15304: GO 15212
15306: POP
15307: POP
// list := [ ] ;
15308: LD_ADDR_VAR 0 7
15312: PUSH
15313: EMPTY
15314: ST_TO_ADDR
// for j := 1 to 8 do
15315: LD_ADDR_VAR 0 3
15319: PUSH
15320: DOUBLE
15321: LD_INT 1
15323: DEC
15324: ST_TO_ADDR
15325: LD_INT 8
15327: PUSH
15328: FOR_TO
15329: IFFALSE 15349
// list := list ^ amount ;
15331: LD_ADDR_VAR 0 7
15335: PUSH
15336: LD_VAR 0 7
15340: PUSH
15341: LD_VAR 0 5
15345: ADD
15346: ST_TO_ADDR
15347: GO 15328
15349: POP
15350: POP
// Already_Built := Already_Built ^ [ list ] ;
15351: LD_ADDR_LOC 22
15355: PUSH
15356: LD_LOC 22
15360: PUSH
15361: LD_VAR 0 7
15365: PUSH
15366: EMPTY
15367: LIST
15368: ADD
15369: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15370: LD_ADDR_LOC 23
15374: PUSH
15375: LD_LOC 23
15379: PUSH
15380: LD_VAR 0 6
15384: PUSH
15385: LD_VAR 0 5
15389: PUSH
15390: LD_LOC 17
15394: PUSH
15395: LD_VAR 0 2
15399: ARRAY
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: ADD
15406: ST_TO_ADDR
// end ;
15407: GO 15098
15409: POP
15410: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15411: LD_ADDR_LOC 24
15415: PUSH
15416: LD_INT 0
15418: PUSH
15419: LD_INT 0
15421: PUSH
15422: LD_INT 0
15424: PUSH
15425: LD_INT 0
15427: PUSH
15428: LD_INT 0
15430: PUSH
15431: LD_INT 0
15433: PUSH
15434: LD_INT 0
15436: PUSH
15437: LD_INT 0
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: ST_TO_ADDR
// if Limits_Info then
15450: LD_LOC 23
15454: IFFALSE 15470
// Limits_Info := #Limits ^ Limits_Info ;
15456: LD_ADDR_LOC 23
15460: PUSH
15461: LD_STRING #Limits
15463: PUSH
15464: LD_LOC 23
15468: ADD
15469: ST_TO_ADDR
// end ;
15470: LD_VAR 0 1
15474: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15475: LD_INT 0
15477: PPUSH
15478: PPUSH
15479: PPUSH
15480: PPUSH
// for i := 1 to Restricted_Builds do
15481: LD_ADDR_VAR 0 7
15485: PUSH
15486: DOUBLE
15487: LD_INT 1
15489: DEC
15490: ST_TO_ADDR
15491: LD_LOC 16
15495: PUSH
15496: FOR_TO
15497: IFFALSE 15920
// if BType in Restricted_Builds [ i ] then
15499: LD_VAR 0 2
15503: PUSH
15504: LD_LOC 16
15508: PUSH
15509: LD_VAR 0 7
15513: ARRAY
15514: IN
15515: IFFALSE 15918
// begin if old_side then
15517: LD_VAR 0 4
15521: IFFALSE 15647
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15523: LD_LOC 22
15527: PUSH
15528: LD_VAR 0 7
15532: ARRAY
15533: PUSH
15534: LD_VAR 0 3
15538: ARRAY
15539: PUSH
15540: LD_VAR 0 5
15544: PLUS
15545: PUSH
15546: LD_LOC 17
15550: PUSH
15551: LD_VAR 0 7
15555: ARRAY
15556: GREATER
15557: IFFALSE 15583
// begin SetSide ( un , old_side ) ;
15559: LD_VAR 0 1
15563: PPUSH
15564: LD_VAR 0 4
15568: PPUSH
15569: CALL_OW 235
// count := 0 ;
15573: LD_ADDR_VAR 0 5
15577: PUSH
15578: LD_INT 0
15580: ST_TO_ADDR
// end else
15581: GO 15647
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15583: LD_ADDR_LOC 22
15587: PUSH
15588: LD_LOC 22
15592: PPUSH
15593: LD_VAR 0 7
15597: PPUSH
15598: LD_LOC 22
15602: PUSH
15603: LD_VAR 0 7
15607: ARRAY
15608: PPUSH
15609: LD_VAR 0 4
15613: PPUSH
15614: LD_LOC 22
15618: PUSH
15619: LD_VAR 0 7
15623: ARRAY
15624: PUSH
15625: LD_VAR 0 4
15629: ARRAY
15630: PUSH
15631: LD_VAR 0 5
15635: MINUS
15636: PPUSH
15637: CALL_OW 1
15641: PPUSH
15642: CALL_OW 1
15646: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15647: LD_ADDR_LOC 22
15651: PUSH
15652: LD_LOC 22
15656: PPUSH
15657: LD_VAR 0 7
15661: PPUSH
15662: LD_LOC 22
15666: PUSH
15667: LD_VAR 0 7
15671: ARRAY
15672: PPUSH
15673: LD_VAR 0 3
15677: PPUSH
15678: LD_LOC 22
15682: PUSH
15683: LD_VAR 0 7
15687: ARRAY
15688: PUSH
15689: LD_VAR 0 3
15693: ARRAY
15694: PUSH
15695: LD_VAR 0 5
15699: PLUS
15700: PPUSH
15701: CALL_OW 1
15705: PPUSH
15706: CALL_OW 1
15710: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15711: LD_VAR 0 5
15715: PUSH
15716: LD_INT 0
15718: NONEQUAL
15719: PUSH
15720: LD_VAR 0 3
15724: PUSH
15725: LD_OWVAR 2
15729: EQUAL
15730: AND
15731: IFFALSE 15774
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15733: LD_ADDR_LOC 23
15737: PUSH
15738: LD_LOC 23
15742: PPUSH
15743: LD_INT 3
15745: PUSH
15746: LD_VAR 0 7
15750: MUL
15751: PPUSH
15752: LD_LOC 22
15756: PUSH
15757: LD_VAR 0 7
15761: ARRAY
15762: PUSH
15763: LD_VAR 0 3
15767: ARRAY
15768: PPUSH
15769: CALL_OW 1
15773: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15774: LD_LOC 22
15778: PUSH
15779: LD_VAR 0 7
15783: ARRAY
15784: PUSH
15785: LD_VAR 0 3
15789: ARRAY
15790: PUSH
15791: LD_LOC 17
15795: PUSH
15796: LD_VAR 0 7
15800: ARRAY
15801: GREATER
15802: IFFALSE 15829
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15804: LD_ADDR_LOC 24
15808: PUSH
15809: LD_LOC 24
15813: PPUSH
15814: LD_VAR 0 3
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 1
15826: ST_TO_ADDR
// end else
15827: GO 15916
// begin for j := 1 to Restricted_Builds do
15829: LD_ADDR_VAR 0 8
15833: PUSH
15834: DOUBLE
15835: LD_INT 1
15837: DEC
15838: ST_TO_ADDR
15839: LD_LOC 16
15843: PUSH
15844: FOR_TO
15845: IFFALSE 15889
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15847: LD_LOC 22
15851: PUSH
15852: LD_VAR 0 8
15856: ARRAY
15857: PUSH
15858: LD_VAR 0 3
15862: ARRAY
15863: PUSH
15864: LD_LOC 17
15868: PUSH
15869: LD_VAR 0 8
15873: ARRAY
15874: GREATER
15875: IFFALSE 15887
// begin Is_Cheater := true ;
15877: LD_ADDR_VAR 0 9
15881: PUSH
15882: LD_INT 1
15884: ST_TO_ADDR
// break ;
15885: GO 15889
// end ;
15887: GO 15844
15889: POP
15890: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15891: LD_ADDR_LOC 24
15895: PUSH
15896: LD_LOC 24
15900: PPUSH
15901: LD_VAR 0 3
15905: PPUSH
15906: LD_VAR 0 9
15910: PPUSH
15911: CALL_OW 1
15915: ST_TO_ADDR
// end ; break ;
15916: GO 15920
// end ;
15918: GO 15496
15920: POP
15921: POP
// end ;
15922: LD_VAR 0 6
15926: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15927: LD_VAR 0 5
15931: PUSH
15932: LD_LOC 18
15936: IN
15937: PUSH
15938: LD_VAR 0 2
15942: PUSH
15943: LD_LOC 19
15947: IN
15948: OR
15949: PUSH
15950: LD_VAR 0 4
15954: PUSH
15955: LD_LOC 20
15959: IN
15960: OR
15961: PUSH
15962: LD_VAR 0 3
15966: PUSH
15967: LD_LOC 21
15971: IN
15972: OR
15973: IFFALSE 15984
// ComCancel ( factory ) ;
15975: LD_VAR 0 1
15979: PPUSH
15980: CALL_OW 127
// end ;
15984: PPOPN 5
15986: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15987: LD_VAR 0 2
15991: PUSH
15992: LD_LOC 18
15996: IN
15997: IFFALSE 16008
// ComCancel ( building ) ;
15999: LD_VAR 0 1
16003: PPUSH
16004: CALL_OW 127
// end ; end_of_file
16008: PPOPN 2
16010: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
16011: LD_INT 0
16013: PPUSH
16014: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
16015: LD_ADDR_VAR 0 2
16019: PUSH
16020: LD_STRING #Multi1x1-Time
16022: PUSH
16023: LD_OWVAR 1
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: ST_TO_ADDR
// if WaitServerStrings then
16032: LD_EXP 64
16036: IFFALSE 16054
// AllStrings = AllStrings ^ WaitServerStrings ;
16038: LD_ADDR_VAR 0 2
16042: PUSH
16043: LD_VAR 0 2
16047: PUSH
16048: LD_EXP 64
16052: ADD
16053: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
16054: LD_INT 0
16056: PUSH
16057: LD_EXP 18
16061: PUSH
16062: LD_OWVAR 1
16066: MINUS
16067: LESSEQUAL
16068: IFFALSE 16099
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
16070: LD_ADDR_VAR 0 2
16074: PUSH
16075: LD_VAR 0 2
16079: PUSH
16080: LD_STRING #allowedsibbomb
16082: PUSH
16083: LD_EXP 18
16087: PUSH
16088: LD_OWVAR 1
16092: MINUS
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: ADD
16098: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
16099: LD_INT 0
16101: PUSH
16102: LD_EXP 68
16106: PUSH
16107: LD_OWVAR 1
16111: MINUS
16112: LESSEQUAL
16113: IFFALSE 16144
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
16115: LD_ADDR_VAR 0 2
16119: PUSH
16120: LD_VAR 0 2
16124: PUSH
16125: LD_STRING #builduptime
16127: PUSH
16128: LD_EXP 68
16132: PUSH
16133: LD_OWVAR 1
16137: MINUS
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: ADD
16143: ST_TO_ADDR
// if ( ExtraStrings ) then
16144: LD_EXP 63
16148: IFFALSE 16170
// AllStrings := AllStrings ^  ^ ExtraStrings ;
16150: LD_ADDR_VAR 0 2
16154: PUSH
16155: LD_VAR 0 2
16159: PUSH
16160: LD_STRING 
16162: ADD
16163: PUSH
16164: LD_EXP 63
16168: ADD
16169: ST_TO_ADDR
// if Display_kings and not isSGUI then
16170: LD_EXP 65
16174: PUSH
16175: LD_OWVAR 83
16179: NOT
16180: AND
16181: IFFALSE 16199
// AllStrings = AllStrings ^ Display_kings ;
16183: LD_ADDR_VAR 0 2
16187: PUSH
16188: LD_VAR 0 2
16192: PUSH
16193: LD_EXP 65
16197: ADD
16198: ST_TO_ADDR
// if ( LimitsStrings ) then
16199: CALL 12851 0 0
16203: IFFALSE 16225
// AllStrings := AllStrings ^  ^ LimitsStrings ;
16205: LD_ADDR_VAR 0 2
16209: PUSH
16210: LD_VAR 0 2
16214: PUSH
16215: LD_STRING 
16217: ADD
16218: PUSH
16219: CALL 12851 0 0
16223: ADD
16224: ST_TO_ADDR
// Display_Strings := AllStrings ;
16225: LD_ADDR_OWVAR 47
16229: PUSH
16230: LD_VAR 0 2
16234: ST_TO_ADDR
// end ;
16235: LD_VAR 0 1
16239: RET
// every 0 0$1 do
16240: GO 16242
16242: DISABLE
// begin ShowTimer ;
16243: CALL 16011 0 0
// enable ;
16247: ENABLE
// end ; end_of_file
16248: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
16249: LD_INT 0
16251: PPUSH
16252: PPUSH
16253: PPUSH
// sharedPoints1 = [ ] ;
16254: LD_ADDR_LOC 25
16258: PUSH
16259: EMPTY
16260: ST_TO_ADDR
// sharedPoints2 = [ ] ;
16261: LD_ADDR_LOC 26
16265: PUSH
16266: EMPTY
16267: ST_TO_ADDR
// sharedPoints3 = [ ] ;
16268: LD_ADDR_LOC 27
16272: PUSH
16273: EMPTY
16274: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
16275: LD_ADDR_VAR 0 2
16279: PUSH
16280: DOUBLE
16281: LD_INT 1
16283: DEC
16284: ST_TO_ADDR
16285: LD_EXP 23
16289: PUSH
16290: LD_INT 0
16292: PLUS
16293: PUSH
16294: FOR_TO
16295: IFFALSE 16397
// begin if not Side_Positions [ i ] = 0 then
16297: LD_EXP 23
16301: PUSH
16302: LD_VAR 0 2
16306: ARRAY
16307: PUSH
16308: LD_INT 0
16310: EQUAL
16311: NOT
16312: IFFALSE 16326
// SetMultiScore ( i , 0 ) ;
16314: LD_VAR 0 2
16318: PPUSH
16319: LD_INT 0
16321: PPUSH
16322: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
16326: LD_ADDR_LOC 25
16330: PUSH
16331: LD_LOC 25
16335: PPUSH
16336: LD_VAR 0 2
16340: PPUSH
16341: LD_INT 0
16343: PPUSH
16344: CALL_OW 1
16348: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
16349: LD_ADDR_LOC 26
16353: PUSH
16354: LD_LOC 26
16358: PPUSH
16359: LD_VAR 0 2
16363: PPUSH
16364: LD_INT 0
16366: PPUSH
16367: CALL_OW 1
16371: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
16372: LD_ADDR_LOC 27
16376: PUSH
16377: LD_LOC 27
16381: PPUSH
16382: LD_VAR 0 2
16386: PPUSH
16387: LD_INT 0
16389: PPUSH
16390: CALL_OW 1
16394: ST_TO_ADDR
// end ;
16395: GO 16294
16397: POP
16398: POP
// pointGame = true ;
16399: LD_ADDR_LOC 28
16403: PUSH
16404: LD_INT 1
16406: ST_TO_ADDR
// end ;
16407: LD_VAR 0 1
16411: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
16412: LD_LOC 28
16416: IFFALSE 16827
16418: GO 16420
16420: DISABLE
16421: LD_INT 0
16423: PPUSH
16424: PPUSH
16425: PPUSH
16426: PPUSH
16427: PPUSH
16428: PPUSH
16429: PPUSH
16430: PPUSH
16431: PPUSH
16432: PPUSH
16433: PPUSH
16434: PPUSH
16435: PPUSH
// begin if isSGUI then
16436: LD_OWVAR 83
16440: IFFALSE 16827
// begin if Teams [ 1 ] then
16442: LD_EXP 22
16446: PUSH
16447: LD_INT 1
16449: ARRAY
16450: IFFALSE 16462
// red = true else
16452: LD_ADDR_VAR 0 2
16456: PUSH
16457: LD_INT 1
16459: ST_TO_ADDR
16460: GO 16470
// red = false ;
16462: LD_ADDR_VAR 0 2
16466: PUSH
16467: LD_INT 0
16469: ST_TO_ADDR
// if Teams [ 2 ] then
16470: LD_EXP 22
16474: PUSH
16475: LD_INT 2
16477: ARRAY
16478: IFFALSE 16490
// blue = true else
16480: LD_ADDR_VAR 0 3
16484: PUSH
16485: LD_INT 1
16487: ST_TO_ADDR
16488: GO 16498
// blue = false ;
16490: LD_ADDR_VAR 0 3
16494: PUSH
16495: LD_INT 0
16497: ST_TO_ADDR
// if Teams [ 3 ] then
16498: LD_EXP 22
16502: PUSH
16503: LD_INT 3
16505: ARRAY
16506: IFFALSE 16518
// yel = true else
16508: LD_ADDR_VAR 0 4
16512: PUSH
16513: LD_INT 1
16515: ST_TO_ADDR
16516: GO 16526
// yel = false ;
16518: LD_ADDR_VAR 0 4
16522: PUSH
16523: LD_INT 0
16525: ST_TO_ADDR
// if Teams [ 4 ] then
16526: LD_EXP 22
16530: PUSH
16531: LD_INT 4
16533: ARRAY
16534: IFFALSE 16546
// green = true else
16536: LD_ADDR_VAR 0 5
16540: PUSH
16541: LD_INT 1
16543: ST_TO_ADDR
16544: GO 16554
// green = false ;
16546: LD_ADDR_VAR 0 5
16550: PUSH
16551: LD_INT 0
16553: ST_TO_ADDR
// if def_public_score then
16554: LD_EXP 6
16558: IFFALSE 16570
// p = true else
16560: LD_ADDR_VAR 0 12
16564: PUSH
16565: LD_INT 1
16567: ST_TO_ADDR
16568: GO 16578
// p = false ;
16570: LD_ADDR_VAR 0 12
16574: PUSH
16575: LD_INT 0
16577: ST_TO_ADDR
// if team_game then
16578: LD_EXP 25
16582: IFFALSE 16663
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
16584: LD_ADDR_VAR 0 13
16588: PUSH
16589: LD_INT 3
16591: PUSH
16592: LD_INT 1
16594: PUSH
16595: LD_INT 2
16597: PUSH
16598: LD_INT 7
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: PUSH
16607: LD_EXP 28
16611: ARRAY
16612: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
16613: LD_ADDR_VAR 0 10
16617: PUSH
16618: LD_STRING {
16620: PUSH
16621: LD_VAR 0 3
16625: STR
16626: PUSH
16627: LD_STRING ,
16629: STR
16630: PUSH
16631: LD_VAR 0 4
16635: STR
16636: PUSH
16637: LD_STRING ,
16639: STR
16640: PUSH
16641: LD_VAR 0 2
16645: STR
16646: PUSH
16647: LD_STRING ,0,0,0,
16649: STR
16650: PUSH
16651: LD_VAR 0 5
16655: STR
16656: PUSH
16657: LD_STRING ,0}
16659: STR
16660: ST_TO_ADDR
// end else
16661: GO 16763
// begin you = your_side ;
16663: LD_ADDR_VAR 0 13
16667: PUSH
16668: LD_OWVAR 2
16672: ST_TO_ADDR
// s = { ;
16673: LD_ADDR_VAR 0 10
16677: PUSH
16678: LD_STRING {
16680: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
16681: LD_ADDR_VAR 0 1
16685: PUSH
16686: DOUBLE
16687: LD_INT 1
16689: DEC
16690: ST_TO_ADDR
16691: LD_EXP 23
16695: PUSH
16696: LD_INT 0
16698: PLUS
16699: PUSH
16700: FOR_TO
16701: IFFALSE 16747
// if side_positions [ i ] then
16703: LD_EXP 23
16707: PUSH
16708: LD_VAR 0 1
16712: ARRAY
16713: IFFALSE 16731
// s = s & 1, else
16715: LD_ADDR_VAR 0 10
16719: PUSH
16720: LD_VAR 0 10
16724: PUSH
16725: LD_STRING 1,
16727: STR
16728: ST_TO_ADDR
16729: GO 16745
// s = s & 0, ;
16731: LD_ADDR_VAR 0 10
16735: PUSH
16736: LD_VAR 0 10
16740: PUSH
16741: LD_STRING 0,
16743: STR
16744: ST_TO_ADDR
16745: GO 16700
16747: POP
16748: POP
// s = s & } ;
16749: LD_ADDR_VAR 0 10
16753: PUSH
16754: LD_VAR 0 10
16758: PUSH
16759: LD_STRING }
16761: STR
16762: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
16763: LD_STRING initScore(
16765: PUSH
16766: LD_VAR 0 10
16770: STR
16771: PUSH
16772: LD_STRING ,
16774: STR
16775: PUSH
16776: LD_VAR 0 12
16780: STR
16781: PUSH
16782: LD_STRING ,
16784: STR
16785: PUSH
16786: LD_VAR 0 13
16790: STR
16791: PUSH
16792: LD_STRING  );
16794: STR
16795: PPUSH
16796: CALL_OW 559
// if game_type = 3 then
16800: LD_EXP 46
16804: PUSH
16805: LD_INT 3
16807: EQUAL
16808: IFFALSE 16827
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
16810: LD_STRING AddScorePoints(2,2,
16812: PUSH
16813: LD_EXP 20
16817: STR
16818: PUSH
16819: LD_STRING  );
16821: STR
16822: PPUSH
16823: CALL_OW 559
// end ; end ;
16827: PPOPN 13
16829: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
16830: LD_INT 0
16832: PPUSH
16833: PPUSH
// case typ of 1 :
16834: LD_VAR 0 3
16838: PUSH
16839: LD_INT 1
16841: DOUBLE
16842: EQUAL
16843: IFTRUE 16847
16845: GO 16875
16847: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
16848: LD_ADDR_LOC 25
16852: PUSH
16853: LD_LOC 25
16857: PPUSH
16858: LD_VAR 0 1
16862: PPUSH
16863: LD_VAR 0 2
16867: PPUSH
16868: CALL_OW 1
16872: ST_TO_ADDR
16873: GO 16948
16875: LD_INT 2
16877: DOUBLE
16878: EQUAL
16879: IFTRUE 16883
16881: GO 16911
16883: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
16884: LD_ADDR_LOC 26
16888: PUSH
16889: LD_LOC 26
16893: PPUSH
16894: LD_VAR 0 1
16898: PPUSH
16899: LD_VAR 0 2
16903: PPUSH
16904: CALL_OW 1
16908: ST_TO_ADDR
16909: GO 16948
16911: LD_INT 3
16913: DOUBLE
16914: EQUAL
16915: IFTRUE 16919
16917: GO 16947
16919: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
16920: LD_ADDR_LOC 27
16924: PUSH
16925: LD_LOC 27
16929: PPUSH
16930: LD_VAR 0 1
16934: PPUSH
16935: LD_VAR 0 2
16939: PPUSH
16940: CALL_OW 1
16944: ST_TO_ADDR
16945: GO 16948
16947: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
16948: LD_ADDR_VAR 0 5
16952: PUSH
16953: LD_LOC 25
16957: PUSH
16958: LD_VAR 0 1
16962: ARRAY
16963: PUSH
16964: LD_LOC 26
16968: PUSH
16969: LD_VAR 0 1
16973: ARRAY
16974: PLUS
16975: PUSH
16976: LD_LOC 27
16980: PUSH
16981: LD_VAR 0 1
16985: ARRAY
16986: PLUS
16987: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
16988: LD_VAR 0 1
16992: PPUSH
16993: LD_VAR 0 5
16997: PPUSH
16998: CALL_OW 506
// end ; end_of_file
17002: LD_VAR 0 4
17006: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
17007: LD_INT 0
17009: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
17010: LD_VAR 0 1
17014: PPUSH
17015: CALL_OW 255
17019: PUSH
17020: LD_VAR 0 4
17024: EQUAL
17025: IFFALSE 17044
// begin SetAchievement ( ACH_RAD ) ;
17027: LD_STRING ACH_RAD
17029: PPUSH
17030: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
17034: LD_STRING ACH_NL
17036: PPUSH
17037: LD_INT 1
17039: PPUSH
17040: CALL_OW 564
// end end ;
17044: LD_VAR 0 5
17048: RET
// export function SA_Win ( side ) ; begin
17049: LD_INT 0
17051: PPUSH
// case side of 1 :
17052: LD_VAR 0 1
17056: PUSH
17057: LD_INT 1
17059: DOUBLE
17060: EQUAL
17061: IFTRUE 17065
17063: GO 17078
17065: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
17066: LD_STRING ACH_AH
17068: PPUSH
17069: LD_INT 1
17071: PPUSH
17072: CALL_OW 564
17076: GO 17241
17078: LD_INT 2
17080: DOUBLE
17081: EQUAL
17082: IFTRUE 17086
17084: GO 17099
17086: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
17087: LD_STRING ACH_E
17089: PPUSH
17090: LD_INT 1
17092: PPUSH
17093: CALL_OW 564
17097: GO 17241
17099: LD_INT 3
17101: DOUBLE
17102: EQUAL
17103: IFTRUE 17107
17105: GO 17120
17107: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
17108: LD_STRING ACH_OOL
17110: PPUSH
17111: LD_INT 1
17113: PPUSH
17114: CALL_OW 564
17118: GO 17241
17120: LD_INT 1
17122: PUSH
17123: LD_INT 2
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: DOUBLE
17130: EQUAL
17131: IFTRUE 17135
17133: GO 17160
17135: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17136: LD_STRING ACH_AH
17138: PPUSH
17139: LD_REAL  5.00000000000000E-0001
17142: PPUSH
17143: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17147: LD_STRING ACH_E
17149: PPUSH
17150: LD_REAL  5.00000000000000E-0001
17153: PPUSH
17154: CALL_OW 564
// end ; [ 2 , 3 ] :
17158: GO 17241
17160: LD_INT 2
17162: PUSH
17163: LD_INT 3
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: DOUBLE
17170: EQUAL
17171: IFTRUE 17175
17173: GO 17200
17175: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
17176: LD_STRING ACH_OOL
17178: PPUSH
17179: LD_REAL  5.00000000000000E-0001
17182: PPUSH
17183: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17187: LD_STRING ACH_E
17189: PPUSH
17190: LD_REAL  5.00000000000000E-0001
17193: PPUSH
17194: CALL_OW 564
// end ; [ 3 , 1 ] :
17198: GO 17241
17200: LD_INT 3
17202: PUSH
17203: LD_INT 1
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: DOUBLE
17210: EQUAL
17211: IFTRUE 17215
17213: GO 17240
17215: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17216: LD_STRING ACH_AH
17218: PPUSH
17219: LD_REAL  5.00000000000000E-0001
17222: PPUSH
17223: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
17227: LD_STRING ACH_OOL
17229: PPUSH
17230: LD_REAL  5.00000000000000E-0001
17233: PPUSH
17234: CALL_OW 564
// end ; end ;
17238: GO 17241
17240: POP
// end ; end_of_file
17241: LD_VAR 0 2
17245: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
17246: LD_INT 0
17248: PPUSH
17249: PPUSH
// enable ( 98 ) ;
17250: LD_INT 98
17252: ENABLE_MARKED
// GameEnded = false ;
17253: LD_ADDR_LOC 30
17257: PUSH
17258: LD_INT 0
17260: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
17261: LD_ADDR_LOC 29
17265: PUSH
17266: LD_INT 0
17268: PUSH
17269: LD_INT 0
17271: PUSH
17272: LD_INT 0
17274: PUSH
17275: LD_INT 0
17277: PUSH
17278: LD_INT 0
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: LD_INT 0
17286: PUSH
17287: LD_INT 0
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: ST_TO_ADDR
// unfoged = false ;
17300: LD_ADDR_LOC 31
17304: PUSH
17305: LD_INT 0
17307: ST_TO_ADDR
// defeated_specs := [ ] ;
17308: LD_ADDR_LOC 32
17312: PUSH
17313: EMPTY
17314: ST_TO_ADDR
// for i = 1 to side_positions do
17315: LD_ADDR_VAR 0 2
17319: PUSH
17320: DOUBLE
17321: LD_INT 1
17323: DEC
17324: ST_TO_ADDR
17325: LD_EXP 23
17329: PUSH
17330: FOR_TO
17331: IFFALSE 17371
// if not side_positions [ i ] then
17333: LD_EXP 23
17337: PUSH
17338: LD_VAR 0 2
17342: ARRAY
17343: NOT
17344: IFFALSE 17369
// defeated = replace ( defeated , i , true ) ;
17346: LD_ADDR_LOC 29
17350: PUSH
17351: LD_LOC 29
17355: PPUSH
17356: LD_VAR 0 2
17360: PPUSH
17361: LD_INT 1
17363: PPUSH
17364: CALL_OW 1
17368: ST_TO_ADDR
17369: GO 17330
17371: POP
17372: POP
// end ;
17373: LD_VAR 0 1
17377: RET
// function CanWinLoose ; begin
17378: LD_INT 0
17380: PPUSH
// Result := true ;
17381: LD_ADDR_VAR 0 1
17385: PUSH
17386: LD_INT 1
17388: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
17389: CALL_OW 518
17393: PUSH
17394: CALL_OW 519
17398: PUSH
17399: LD_INT 0
17401: GREATER
17402: AND
17403: IFFALSE 17413
// Result := false ;
17405: LD_ADDR_VAR 0 1
17409: PUSH
17410: LD_INT 0
17412: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
17413: CALL_OW 531
17417: PUSH
17418: CALL_OW 519
17422: PUSH
17423: LD_INT 1
17425: GREATER
17426: AND
17427: IFFALSE 17437
// Result := false ;
17429: LD_ADDR_VAR 0 1
17433: PUSH
17434: LD_INT 0
17436: ST_TO_ADDR
// end ;
17437: LD_VAR 0 1
17441: RET
// export function HasPower ( i ) ; var k , h ; begin
17442: LD_INT 0
17444: PPUSH
17445: PPUSH
17446: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
17447: LD_VAR 0 1
17451: PPUSH
17452: CALL_OW 108
17456: NOT
17457: PUSH
17458: LD_EXP 26
17462: PUSH
17463: LD_VAR 0 1
17467: ARRAY
17468: NOT
17469: AND
17470: PUSH
17471: LD_OWVAR 4
17475: AND
17476: IFFALSE 17488
// begin result = false ;
17478: LD_ADDR_VAR 0 2
17482: PUSH
17483: LD_INT 0
17485: ST_TO_ADDR
// end else
17486: GO 17783
// case def_win_rules of 0 :
17488: LD_EXP 19
17492: PUSH
17493: LD_INT 0
17495: DOUBLE
17496: EQUAL
17497: IFTRUE 17501
17499: GO 17664
17501: POP
// if def_people_respawning then
17502: LD_EXP 58
17506: IFFALSE 17597
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
17508: LD_ADDR_VAR 0 2
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: LD_VAR 0 1
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 2
17527: PUSH
17528: LD_INT 21
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 33
17540: PUSH
17541: LD_INT 3
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: LD_INT 33
17550: PUSH
17551: LD_INT 5
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 30
17560: PUSH
17561: LD_INT 0
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 30
17570: PUSH
17571: LD_INT 1
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PPUSH
17590: CALL_OW 69
17594: ST_TO_ADDR
17595: GO 17662
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
17597: LD_ADDR_VAR 0 2
17601: PUSH
17602: LD_INT 22
17604: PUSH
17605: LD_VAR 0 1
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PUSH
17614: LD_INT 2
17616: PUSH
17617: LD_INT 21
17619: PUSH
17620: LD_INT 1
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 33
17629: PUSH
17630: LD_INT 3
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: PUSH
17637: LD_INT 33
17639: PUSH
17640: LD_INT 5
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PPUSH
17657: CALL_OW 69
17661: ST_TO_ADDR
17662: GO 17783
17664: LD_INT 1
17666: DOUBLE
17667: EQUAL
17668: IFTRUE 17672
17670: GO 17711
17672: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
17673: LD_ADDR_VAR 0 2
17677: PUSH
17678: LD_INT 22
17680: PUSH
17681: LD_VAR 0 1
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 21
17692: PUSH
17693: LD_INT 1
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PPUSH
17704: CALL_OW 69
17708: ST_TO_ADDR
17709: GO 17783
17711: LD_INT 2
17713: DOUBLE
17714: EQUAL
17715: IFTRUE 17719
17717: GO 17782
17719: POP
// begin h = false ;
17720: LD_ADDR_VAR 0 4
17724: PUSH
17725: LD_INT 0
17727: ST_TO_ADDR
// for k in heroes [ i ] do
17728: LD_ADDR_VAR 0 3
17732: PUSH
17733: LD_EXP 34
17737: PUSH
17738: LD_VAR 0 1
17742: ARRAY
17743: PUSH
17744: FOR_IN
17745: IFFALSE 17768
// if IsLive ( k ) then
17747: LD_VAR 0 3
17751: PPUSH
17752: CALL_OW 300
17756: IFFALSE 17766
// h = true ;
17758: LD_ADDR_VAR 0 4
17762: PUSH
17763: LD_INT 1
17765: ST_TO_ADDR
17766: GO 17744
17768: POP
17769: POP
// Result := h ;
17770: LD_ADDR_VAR 0 2
17774: PUSH
17775: LD_VAR 0 4
17779: ST_TO_ADDR
// end ; end ;
17780: GO 17783
17782: POP
// end ;
17783: LD_VAR 0 2
17787: RET
// function AlliedSides ( i , j ) ; begin
17788: LD_INT 0
17790: PPUSH
// Result := false ;
17791: LD_ADDR_VAR 0 3
17795: PUSH
17796: LD_INT 0
17798: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
17799: LD_VAR 0 1
17803: PPUSH
17804: LD_VAR 0 2
17808: PPUSH
17809: CALL_OW 81
17813: PUSH
17814: LD_INT 1
17816: EQUAL
17817: PUSH
17818: LD_VAR 0 2
17822: PPUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL_OW 81
17832: PUSH
17833: LD_INT 1
17835: EQUAL
17836: AND
17837: PUSH
17838: LD_VAR 0 1
17842: PPUSH
17843: CALL_OW 83
17847: AND
17848: PUSH
17849: LD_VAR 0 2
17853: PPUSH
17854: CALL_OW 83
17858: AND
17859: IFFALSE 17869
// Result := true ;
17861: LD_ADDR_VAR 0 3
17865: PUSH
17866: LD_INT 1
17868: ST_TO_ADDR
// end ;
17869: LD_VAR 0 3
17873: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
17874: CALL 17378 0 0
17878: PUSH
17879: LD_LOC 30
17883: NOT
17884: AND
17885: IFFALSE 17901
17887: GO 17889
17889: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
17890: LD_ADDR_EXP 64
17894: PUSH
17895: LD_STRING #Player-Ended
17897: PUSH
17898: EMPTY
17899: LIST
17900: ST_TO_ADDR
17901: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
17902: CALL 17378 0 0
17906: PUSH
17907: LD_LOC 30
17911: AND
17912: IFFALSE 17921
17914: GO 17916
17916: DISABLE
// YouLostInMultiplayer ;
17917: CALL_OW 107
17921: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
17922: CALL 17378 0 0
17926: NOT
17927: PUSH
17928: CALL_OW 531
17932: NOT
17933: AND
17934: IFFALSE 17950
17936: GO 17938
17938: DISABLE
// WaitServerStrings = [ #server-wait ] ;
17939: LD_ADDR_EXP 64
17943: PUSH
17944: LD_STRING #server-wait
17946: PUSH
17947: EMPTY
17948: LIST
17949: ST_TO_ADDR
17950: END
// every 100 trigger IAmSpec do
17951: CALL_OW 531
17955: IFFALSE 17971
17957: GO 17959
17959: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
17960: LD_ADDR_EXP 64
17964: PUSH
17965: LD_STRING #Player-IAmSpec
17967: PUSH
17968: EMPTY
17969: LIST
17970: ST_TO_ADDR
17971: END
// every 100 trigger GameEnded and IAmSpec do
17972: LD_LOC 30
17976: PUSH
17977: CALL_OW 531
17981: AND
17982: IFFALSE 17991
17984: GO 17986
17986: DISABLE
// YouLostInMultiplayer ;
17987: CALL_OW 107
17991: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
17992: CALL 17378 0 0
17996: PUSH
17997: LD_LOC 30
18001: NOT
18002: AND
18003: IFFALSE 18019
18005: GO 18007
18007: DISABLE
// WaitServerStrings = [ $player-win ] ;
18008: LD_ADDR_EXP 64
18012: PUSH
18013: LD_STRING $player-win
18015: PUSH
18016: EMPTY
18017: LIST
18018: ST_TO_ADDR
18019: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
18020: CALL 17378 0 0
18024: PUSH
18025: LD_LOC 30
18029: AND
18030: IFFALSE 18054
18032: GO 18034
18034: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
18035: LD_EXP 24
18039: PUSH
18040: LD_OWVAR 7
18044: ARRAY
18045: PPUSH
18046: CALL 17049 0 1
// YouWinInMultiplayer ;
18050: CALL_OW 106
// end ;
18054: END
// every 100 trigger isEditor marked 401 do
18055: LD_OWVAR 84
18059: IFFALSE 18075
18061: GO 18063
18063: DISABLE
// Debug_Strings = [ You won ] ;
18064: LD_ADDR_OWVAR 48
18068: PUSH
18069: LD_STRING You won
18071: PUSH
18072: EMPTY
18073: LIST
18074: ST_TO_ADDR
18075: END
// every 100 trigger isEditor marked 400 do
18076: LD_OWVAR 84
18080: IFFALSE 18096
18082: GO 18084
18084: DISABLE
// Debug_Strings = [ You loss ] ;
18085: LD_ADDR_OWVAR 48
18089: PUSH
18090: LD_STRING You loss
18092: PUSH
18093: EMPTY
18094: LIST
18095: ST_TO_ADDR
18096: END
// every 100 marked 98 do var i , un ;
18097: GO 18099
18099: DISABLE
18100: LD_INT 0
18102: PPUSH
18103: PPUSH
// begin for i = 1 to side_positions do
18104: LD_ADDR_VAR 0 1
18108: PUSH
18109: DOUBLE
18110: LD_INT 1
18112: DEC
18113: ST_TO_ADDR
18114: LD_EXP 23
18118: PUSH
18119: FOR_TO
18120: IFFALSE 18207
// begin if side_positions [ i ] then
18122: LD_EXP 23
18126: PUSH
18127: LD_VAR 0 1
18131: ARRAY
18132: IFFALSE 18205
// if not HasPower ( i ) and not defeated [ i ] then
18134: LD_VAR 0 1
18138: PPUSH
18139: CALL 17442 0 1
18143: NOT
18144: PUSH
18145: LD_LOC 29
18149: PUSH
18150: LD_VAR 0 1
18154: ARRAY
18155: NOT
18156: AND
18157: IFFALSE 18205
// begin defeated = replace ( defeated , i , true ) ;
18159: LD_ADDR_LOC 29
18163: PUSH
18164: LD_LOC 29
18168: PPUSH
18169: LD_VAR 0 1
18173: PPUSH
18174: LD_INT 1
18176: PPUSH
18177: CALL_OW 1
18181: ST_TO_ADDR
// if i = mp_player_side then
18182: LD_VAR 0 1
18186: PUSH
18187: LD_OWVAR 7
18191: EQUAL
18192: IFFALSE 18205
// begin Multiplayer_Loose_Message ;
18194: CALL_OW 521
// SetPlayerSpectator ( ) ;
18198: CALL_OW 572
// enable ( 400 ) ;
18202: LD_INT 400
18204: ENABLE_MARKED
// end ; end ; end ;
18205: GO 18119
18207: POP
18208: POP
// DidGameEnd ;
18209: CALL 18224 0 0
// if not GameEnded then
18213: LD_LOC 30
18217: NOT
18218: IFFALSE 18221
// enable ;
18220: ENABLE
// end ;
18221: PPOPN 2
18223: END
// function DidGameEnd ; var i , k , enemy ; begin
18224: LD_INT 0
18226: PPUSH
18227: PPUSH
18228: PPUSH
18229: PPUSH
// enemy = [ ] ;
18230: LD_ADDR_VAR 0 4
18234: PUSH
18235: EMPTY
18236: ST_TO_ADDR
// for i = 1 to side_positions do
18237: LD_ADDR_VAR 0 2
18241: PUSH
18242: DOUBLE
18243: LD_INT 1
18245: DEC
18246: ST_TO_ADDR
18247: LD_EXP 23
18251: PUSH
18252: FOR_TO
18253: IFFALSE 18347
// if not defeated [ i ] then
18255: LD_LOC 29
18259: PUSH
18260: LD_VAR 0 2
18264: ARRAY
18265: NOT
18266: IFFALSE 18345
// for k = 1 to side_positions do
18268: LD_ADDR_VAR 0 3
18272: PUSH
18273: DOUBLE
18274: LD_INT 1
18276: DEC
18277: ST_TO_ADDR
18278: LD_EXP 23
18282: PUSH
18283: FOR_TO
18284: IFFALSE 18343
// if not defeated [ k ] then
18286: LD_LOC 29
18290: PUSH
18291: LD_VAR 0 3
18295: ARRAY
18296: NOT
18297: IFFALSE 18341
// if not AlliedSides ( i , k ) then
18299: LD_VAR 0 2
18303: PPUSH
18304: LD_VAR 0 3
18308: PPUSH
18309: CALL 17788 0 2
18313: NOT
18314: IFFALSE 18341
// enemy = enemy ^ [ i , k ] ;
18316: LD_ADDR_VAR 0 4
18320: PUSH
18321: LD_VAR 0 4
18325: PUSH
18326: LD_VAR 0 2
18330: PUSH
18331: LD_VAR 0 3
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: ADD
18340: ST_TO_ADDR
18341: GO 18283
18343: POP
18344: POP
18345: GO 18252
18347: POP
18348: POP
// if not enemy then
18349: LD_VAR 0 4
18353: NOT
18354: IFFALSE 18380
// begin GameEnded = true ;
18356: LD_ADDR_LOC 30
18360: PUSH
18361: LD_INT 1
18363: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
18364: LD_LOC 29
18368: PUSH
18369: LD_OWVAR 7
18373: ARRAY
18374: NOT
18375: IFFALSE 18380
// enable ( 401 ) ;
18377: LD_INT 401
18379: ENABLE_MARKED
// end ; end ;
18380: LD_VAR 0 1
18384: RET
// function unfog ; var k , friends ; begin
18385: LD_INT 0
18387: PPUSH
18388: PPUSH
18389: PPUSH
// for k = 1 to side_positions do
18390: LD_ADDR_VAR 0 2
18394: PUSH
18395: DOUBLE
18396: LD_INT 1
18398: DEC
18399: ST_TO_ADDR
18400: LD_EXP 23
18404: PUSH
18405: FOR_TO
18406: IFFALSE 18462
// if not defeated [ k ] then
18408: LD_LOC 29
18412: PUSH
18413: LD_VAR 0 2
18417: ARRAY
18418: NOT
18419: IFFALSE 18460
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
18421: LD_OWVAR 7
18425: PPUSH
18426: LD_VAR 0 2
18430: PPUSH
18431: CALL_OW 81
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: IN
18442: IFFALSE 18460
// friends = friends ^ k ;
18444: LD_ADDR_VAR 0 3
18448: PUSH
18449: LD_VAR 0 3
18453: PUSH
18454: LD_VAR 0 2
18458: ADD
18459: ST_TO_ADDR
18460: GO 18405
18462: POP
18463: POP
// if not friends then
18464: LD_VAR 0 3
18468: NOT
18469: IFFALSE 18483
// begin SetPlayerSpectator ( ) ;
18471: CALL_OW 572
// unfoged = true ;
18475: LD_ADDR_LOC 31
18479: PUSH
18480: LD_INT 1
18482: ST_TO_ADDR
// end ; end ;
18483: LD_VAR 0 1
18487: RET
// export function MakeGameEnd ; begin
18488: LD_INT 0
18490: PPUSH
// SetPlayerSpectator ( ) ;
18491: CALL_OW 572
// unfoged = true ;
18495: LD_ADDR_LOC 31
18499: PUSH
18500: LD_INT 1
18502: ST_TO_ADDR
// wait ( 0 0$5 ) ;
18503: LD_INT 175
18505: PPUSH
18506: CALL_OW 67
// GameEnded = true ;
18510: LD_ADDR_LOC 30
18514: PUSH
18515: LD_INT 1
18517: ST_TO_ADDR
// end ;
18518: LD_VAR 0 1
18522: RET
// export function GetGameEnded ; begin
18523: LD_INT 0
18525: PPUSH
// result = GameEnded ;
18526: LD_ADDR_VAR 0 1
18530: PUSH
18531: LD_LOC 30
18535: ST_TO_ADDR
// end ; end_of_file
18536: LD_VAR 0 1
18540: RET
// var win ; export function init_kings_counting ; var i ; begin
18541: LD_INT 0
18543: PPUSH
18544: PPUSH
// mp_with_score := true ;
18545: LD_ADDR_OWVAR 14
18549: PUSH
18550: LD_INT 1
18552: ST_TO_ADDR
// ResetMultiScore ;
18553: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
18557: LD_INT 19
18559: PPUSH
18560: LD_INT 1
18562: PPUSH
18563: CALL_OW 424
// enable ( 2 ) ;
18567: LD_INT 2
18569: ENABLE_MARKED
// end ;
18570: LD_VAR 0 1
18574: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
18575: LD_INT 0
18577: PPUSH
18578: PPUSH
18579: PPUSH
18580: PPUSH
18581: PPUSH
18582: PPUSH
18583: PPUSH
18584: PPUSH
18585: PPUSH
// vypis := [ ] ;
18586: LD_ADDR_VAR 0 3
18590: PUSH
18591: EMPTY
18592: ST_TO_ADDR
// red = 0 ;
18593: LD_ADDR_VAR 0 5
18597: PUSH
18598: LD_INT 0
18600: ST_TO_ADDR
// blue = 0 ;
18601: LD_ADDR_VAR 0 6
18605: PUSH
18606: LD_INT 0
18608: ST_TO_ADDR
// yel = 0 ;
18609: LD_ADDR_VAR 0 7
18613: PUSH
18614: LD_INT 0
18616: ST_TO_ADDR
// green = 0 ;
18617: LD_ADDR_VAR 0 8
18621: PUSH
18622: LD_INT 0
18624: ST_TO_ADDR
// if def_public_score or isSGUI then
18625: LD_EXP 6
18629: PUSH
18630: LD_OWVAR 83
18634: OR
18635: IFFALSE 19232
// if not Team_Game then
18637: LD_EXP 25
18641: NOT
18642: IFFALSE 18764
// begin for side = 1 to Side_Positions do
18644: LD_ADDR_VAR 0 2
18648: PUSH
18649: DOUBLE
18650: LD_INT 1
18652: DEC
18653: ST_TO_ADDR
18654: LD_EXP 23
18658: PUSH
18659: FOR_TO
18660: IFFALSE 18760
// if Side_Positions [ side ] then
18662: LD_EXP 23
18666: PUSH
18667: LD_VAR 0 2
18671: ARRAY
18672: IFFALSE 18758
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
18674: LD_ADDR_VAR 0 3
18678: PUSH
18679: LD_VAR 0 3
18683: PUSH
18684: LD_STRING #KingoftheHill-Public
18686: PUSH
18687: LD_VAR 0 2
18691: PUSH
18692: LD_VAR 0 2
18696: PUSH
18697: LD_VAR 0 2
18701: PUSH
18702: LD_INT 10
18704: PLUS
18705: PPUSH
18706: CALL_OW 110
18710: PUSH
18711: LD_INT 3
18713: DIV
18714: PUSH
18715: LD_EXP 20
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: ADD
18727: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
18728: LD_INT 2
18730: PPUSH
18731: LD_VAR 0 2
18735: PPUSH
18736: LD_VAR 0 2
18740: PUSH
18741: LD_INT 10
18743: PLUS
18744: PPUSH
18745: CALL_OW 110
18749: PUSH
18750: LD_INT 3
18752: DIV
18753: PPUSH
18754: CALL 26134 0 3
// end ;
18758: GO 18659
18760: POP
18761: POP
// end else
18762: GO 19230
// begin if Teams [ 1 ] then
18764: LD_EXP 22
18768: PUSH
18769: LD_INT 1
18771: ARRAY
18772: IFFALSE 18824
// for i in Teams [ 1 ] do
18774: LD_ADDR_VAR 0 4
18778: PUSH
18779: LD_EXP 22
18783: PUSH
18784: LD_INT 1
18786: ARRAY
18787: PUSH
18788: FOR_IN
18789: IFFALSE 18822
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
18791: LD_ADDR_VAR 0 5
18795: PUSH
18796: LD_VAR 0 5
18800: PUSH
18801: LD_VAR 0 4
18805: PUSH
18806: LD_INT 10
18808: PLUS
18809: PPUSH
18810: CALL_OW 110
18814: PUSH
18815: LD_INT 3
18817: DIV
18818: PLUS
18819: ST_TO_ADDR
18820: GO 18788
18822: POP
18823: POP
// if Teams [ 2 ] then
18824: LD_EXP 22
18828: PUSH
18829: LD_INT 2
18831: ARRAY
18832: IFFALSE 18884
// for i in Teams [ 2 ] do
18834: LD_ADDR_VAR 0 4
18838: PUSH
18839: LD_EXP 22
18843: PUSH
18844: LD_INT 2
18846: ARRAY
18847: PUSH
18848: FOR_IN
18849: IFFALSE 18882
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
18851: LD_ADDR_VAR 0 6
18855: PUSH
18856: LD_VAR 0 6
18860: PUSH
18861: LD_VAR 0 4
18865: PUSH
18866: LD_INT 10
18868: PLUS
18869: PPUSH
18870: CALL_OW 110
18874: PUSH
18875: LD_INT 3
18877: DIV
18878: PLUS
18879: ST_TO_ADDR
18880: GO 18848
18882: POP
18883: POP
// if Teams [ 3 ] then
18884: LD_EXP 22
18888: PUSH
18889: LD_INT 3
18891: ARRAY
18892: IFFALSE 18944
// for i in Teams [ 3 ] do
18894: LD_ADDR_VAR 0 4
18898: PUSH
18899: LD_EXP 22
18903: PUSH
18904: LD_INT 3
18906: ARRAY
18907: PUSH
18908: FOR_IN
18909: IFFALSE 18942
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
18911: LD_ADDR_VAR 0 7
18915: PUSH
18916: LD_VAR 0 7
18920: PUSH
18921: LD_VAR 0 4
18925: PUSH
18926: LD_INT 10
18928: PLUS
18929: PPUSH
18930: CALL_OW 110
18934: PUSH
18935: LD_INT 3
18937: DIV
18938: PLUS
18939: ST_TO_ADDR
18940: GO 18908
18942: POP
18943: POP
// if Teams [ 4 ] then
18944: LD_EXP 22
18948: PUSH
18949: LD_INT 4
18951: ARRAY
18952: IFFALSE 19004
// for i in Teams [ 4 ] do
18954: LD_ADDR_VAR 0 4
18958: PUSH
18959: LD_EXP 22
18963: PUSH
18964: LD_INT 4
18966: ARRAY
18967: PUSH
18968: FOR_IN
18969: IFFALSE 19002
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
18971: LD_ADDR_VAR 0 8
18975: PUSH
18976: LD_VAR 0 8
18980: PUSH
18981: LD_VAR 0 4
18985: PUSH
18986: LD_INT 10
18988: PLUS
18989: PPUSH
18990: CALL_OW 110
18994: PUSH
18995: LD_INT 3
18997: DIV
18998: PLUS
18999: ST_TO_ADDR
19000: GO 18968
19002: POP
19003: POP
// if Teams [ 1 ] then
19004: LD_EXP 22
19008: PUSH
19009: LD_INT 1
19011: ARRAY
19012: IFFALSE 19041
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
19014: LD_ADDR_VAR 0 3
19018: PUSH
19019: LD_STRING #KingoftheHill-Public-red
19021: PUSH
19022: LD_INT 3
19024: PUSH
19025: LD_VAR 0 5
19029: PUSH
19030: LD_EXP 20
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: ST_TO_ADDR
// if Teams [ 2 ] then
19041: LD_EXP 22
19045: PUSH
19046: LD_INT 2
19048: ARRAY
19049: IFFALSE 19084
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
19051: LD_ADDR_VAR 0 3
19055: PUSH
19056: LD_VAR 0 3
19060: PUSH
19061: LD_STRING #KingoftheHill-Public-blue
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: LD_VAR 0 6
19071: PUSH
19072: LD_EXP 20
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: ADD
19083: ST_TO_ADDR
// if Teams [ 3 ] then
19084: LD_EXP 22
19088: PUSH
19089: LD_INT 3
19091: ARRAY
19092: IFFALSE 19127
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
19094: LD_ADDR_VAR 0 3
19098: PUSH
19099: LD_VAR 0 3
19103: PUSH
19104: LD_STRING #KingoftheHill-Public-yell
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: LD_VAR 0 7
19114: PUSH
19115: LD_EXP 20
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: ADD
19126: ST_TO_ADDR
// if Teams [ 4 ] then
19127: LD_EXP 22
19131: PUSH
19132: LD_INT 4
19134: ARRAY
19135: IFFALSE 19170
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
19137: LD_ADDR_VAR 0 3
19141: PUSH
19142: LD_VAR 0 3
19146: PUSH
19147: LD_STRING #KingoftheHill-Public-green
19149: PUSH
19150: LD_INT 7
19152: PUSH
19153: LD_VAR 0 8
19157: PUSH
19158: LD_EXP 20
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: ADD
19169: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
19170: LD_INT 2
19172: PPUSH
19173: LD_INT 3
19175: PPUSH
19176: LD_VAR 0 5
19180: PPUSH
19181: CALL 26134 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
19185: LD_INT 2
19187: PPUSH
19188: LD_INT 1
19190: PPUSH
19191: LD_VAR 0 6
19195: PPUSH
19196: CALL 26134 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
19200: LD_INT 2
19202: PPUSH
19203: LD_INT 2
19205: PPUSH
19206: LD_VAR 0 7
19210: PPUSH
19211: CALL 26134 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
19215: LD_INT 2
19217: PPUSH
19218: LD_INT 7
19220: PPUSH
19221: LD_VAR 0 8
19225: PPUSH
19226: CALL 26134 0 3
// end else
19230: GO 19667
// if not Team_Game then
19232: LD_EXP 25
19236: NOT
19237: IFFALSE 19295
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: LD_VAR 0 3
19248: PUSH
19249: LD_STRING #KingoftheHill-Private
19251: PUSH
19252: LD_OWVAR 7
19256: PUSH
19257: LD_OWVAR 7
19261: PUSH
19262: LD_VAR 0 2
19266: PUSH
19267: LD_INT 10
19269: PLUS
19270: PPUSH
19271: CALL_OW 110
19275: PUSH
19276: LD_INT 3
19278: DIV
19279: PUSH
19280: LD_EXP 20
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: ADD
19292: ST_TO_ADDR
19293: GO 19667
// begin for i in Teams [ 1 ] do
19295: LD_ADDR_VAR 0 4
19299: PUSH
19300: LD_EXP 22
19304: PUSH
19305: LD_INT 1
19307: ARRAY
19308: PUSH
19309: FOR_IN
19310: IFFALSE 19343
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19312: LD_ADDR_VAR 0 5
19316: PUSH
19317: LD_VAR 0 5
19321: PUSH
19322: LD_VAR 0 4
19326: PUSH
19327: LD_INT 10
19329: PLUS
19330: PPUSH
19331: CALL_OW 110
19335: PUSH
19336: LD_INT 3
19338: DIV
19339: PLUS
19340: ST_TO_ADDR
19341: GO 19309
19343: POP
19344: POP
// for i in Teams [ 2 ] do
19345: LD_ADDR_VAR 0 4
19349: PUSH
19350: LD_EXP 22
19354: PUSH
19355: LD_INT 2
19357: ARRAY
19358: PUSH
19359: FOR_IN
19360: IFFALSE 19393
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19362: LD_ADDR_VAR 0 6
19366: PUSH
19367: LD_VAR 0 6
19371: PUSH
19372: LD_VAR 0 4
19376: PUSH
19377: LD_INT 10
19379: PLUS
19380: PPUSH
19381: CALL_OW 110
19385: PUSH
19386: LD_INT 3
19388: DIV
19389: PLUS
19390: ST_TO_ADDR
19391: GO 19359
19393: POP
19394: POP
// for i in Teams [ 3 ] do
19395: LD_ADDR_VAR 0 4
19399: PUSH
19400: LD_EXP 22
19404: PUSH
19405: LD_INT 3
19407: ARRAY
19408: PUSH
19409: FOR_IN
19410: IFFALSE 19443
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
19412: LD_ADDR_VAR 0 7
19416: PUSH
19417: LD_VAR 0 7
19421: PUSH
19422: LD_VAR 0 4
19426: PUSH
19427: LD_INT 10
19429: PLUS
19430: PPUSH
19431: CALL_OW 110
19435: PUSH
19436: LD_INT 3
19438: DIV
19439: PLUS
19440: ST_TO_ADDR
19441: GO 19409
19443: POP
19444: POP
// for i in Teams [ 4 ] do
19445: LD_ADDR_VAR 0 4
19449: PUSH
19450: LD_EXP 22
19454: PUSH
19455: LD_INT 4
19457: ARRAY
19458: PUSH
19459: FOR_IN
19460: IFFALSE 19493
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
19462: LD_ADDR_VAR 0 8
19466: PUSH
19467: LD_VAR 0 8
19471: PUSH
19472: LD_VAR 0 4
19476: PUSH
19477: LD_INT 10
19479: PLUS
19480: PPUSH
19481: CALL_OW 110
19485: PUSH
19486: LD_INT 3
19488: DIV
19489: PLUS
19490: ST_TO_ADDR
19491: GO 19459
19493: POP
19494: POP
// if mp_player_side in Teams [ 1 ] then
19495: LD_OWVAR 7
19499: PUSH
19500: LD_EXP 22
19504: PUSH
19505: LD_INT 1
19507: ARRAY
19508: IN
19509: IFFALSE 19538
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
19511: LD_ADDR_VAR 0 3
19515: PUSH
19516: LD_STRING #KingoftheHill-Public-red
19518: PUSH
19519: LD_INT 3
19521: PUSH
19522: LD_VAR 0 5
19526: PUSH
19527: LD_EXP 20
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
19538: LD_OWVAR 7
19542: PUSH
19543: LD_EXP 22
19547: PUSH
19548: LD_INT 2
19550: ARRAY
19551: IN
19552: IFFALSE 19581
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
19554: LD_ADDR_VAR 0 3
19558: PUSH
19559: LD_STRING #KingoftheHill-Public-blue
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: LD_VAR 0 6
19569: PUSH
19570: LD_EXP 20
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
19581: LD_OWVAR 7
19585: PUSH
19586: LD_EXP 22
19590: PUSH
19591: LD_INT 3
19593: ARRAY
19594: IN
19595: IFFALSE 19624
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
19597: LD_ADDR_VAR 0 3
19601: PUSH
19602: LD_STRING #KingoftheHill-Public-yell
19604: PUSH
19605: LD_INT 2
19607: PUSH
19608: LD_VAR 0 7
19612: PUSH
19613: LD_EXP 20
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
19624: LD_OWVAR 7
19628: PUSH
19629: LD_EXP 22
19633: PUSH
19634: LD_INT 4
19636: ARRAY
19637: IN
19638: IFFALSE 19667
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
19640: LD_ADDR_VAR 0 3
19644: PUSH
19645: LD_STRING #KingoftheHill-Public-green
19647: PUSH
19648: LD_INT 7
19650: PUSH
19651: LD_VAR 0 8
19655: PUSH
19656: LD_EXP 20
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: ST_TO_ADDR
// end ; Display_kings := vypis ;
19667: LD_ADDR_EXP 65
19671: PUSH
19672: LD_VAR 0 3
19676: ST_TO_ADDR
// end ;
19677: LD_VAR 0 1
19681: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
19682: LD_INT 0
19684: PPUSH
19685: PPUSH
19686: PPUSH
19687: PPUSH
19688: PPUSH
19689: PPUSH
19690: PPUSH
19691: PPUSH
19692: PPUSH
// side := [ ] ;
19693: LD_ADDR_VAR 0 2
19697: PUSH
19698: EMPTY
19699: ST_TO_ADDR
// red = 0 ;
19700: LD_ADDR_VAR 0 5
19704: PUSH
19705: LD_INT 0
19707: ST_TO_ADDR
// blue = 0 ;
19708: LD_ADDR_VAR 0 6
19712: PUSH
19713: LD_INT 0
19715: ST_TO_ADDR
// yel = 0 ;
19716: LD_ADDR_VAR 0 7
19720: PUSH
19721: LD_INT 0
19723: ST_TO_ADDR
// green = 0 ;
19724: LD_ADDR_VAR 0 8
19728: PUSH
19729: LD_INT 0
19731: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
19732: LD_ADDR_VAR 0 3
19736: PUSH
19737: LD_INT 19
19739: PPUSH
19740: LD_INT 21
19742: PUSH
19743: LD_INT 3
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 53
19752: PUSH
19753: EMPTY
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PPUSH
19760: CALL_OW 70
19764: ST_TO_ADDR
// for un in list do
19765: LD_ADDR_VAR 0 4
19769: PUSH
19770: LD_VAR 0 3
19774: PUSH
19775: FOR_IN
19776: IFFALSE 19801
// side := side union GetSide ( un ) ;
19778: LD_ADDR_VAR 0 2
19782: PUSH
19783: LD_VAR 0 2
19787: PUSH
19788: LD_VAR 0 4
19792: PPUSH
19793: CALL_OW 255
19797: UNION
19798: ST_TO_ADDR
19799: GO 19775
19801: POP
19802: POP
// if side <> 1 then
19803: LD_VAR 0 2
19807: PUSH
19808: LD_INT 1
19810: NONEQUAL
19811: IFFALSE 19815
// exit ;
19813: GO 20178
// side := side [ 1 ] ;
19815: LD_ADDR_VAR 0 2
19819: PUSH
19820: LD_VAR 0 2
19824: PUSH
19825: LD_INT 1
19827: ARRAY
19828: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
19829: LD_VAR 0 2
19833: PUSH
19834: LD_INT 10
19836: PLUS
19837: PPUSH
19838: LD_VAR 0 2
19842: PUSH
19843: LD_INT 10
19845: PLUS
19846: PPUSH
19847: CALL_OW 110
19851: PUSH
19852: LD_INT 1
19854: PLUS
19855: PPUSH
19856: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
19860: LD_VAR 0 2
19864: PPUSH
19865: LD_VAR 0 2
19869: PUSH
19870: LD_INT 10
19872: PLUS
19873: PPUSH
19874: CALL_OW 110
19878: PUSH
19879: LD_INT 3
19881: DIV
19882: PPUSH
19883: LD_INT 2
19885: PPUSH
19886: CALL 16830 0 3
// if not Team_Game then
19890: LD_EXP 25
19894: NOT
19895: IFFALSE 20178
// if GetTag ( side + 10 ) >= final_count * 3 then
19897: LD_VAR 0 2
19901: PUSH
19902: LD_INT 10
19904: PLUS
19905: PPUSH
19906: CALL_OW 110
19910: PUSH
19911: LD_EXP 20
19915: PUSH
19916: LD_INT 3
19918: MUL
19919: GREATEREQUAL
19920: IFFALSE 19927
// enable ( 3 ) else
19922: LD_INT 3
19924: ENABLE_MARKED
19925: GO 20178
// begin for i in Teams [ 1 ] do
19927: LD_ADDR_VAR 0 9
19931: PUSH
19932: LD_EXP 22
19936: PUSH
19937: LD_INT 1
19939: ARRAY
19940: PUSH
19941: FOR_IN
19942: IFFALSE 19975
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19944: LD_ADDR_VAR 0 5
19948: PUSH
19949: LD_VAR 0 5
19953: PUSH
19954: LD_VAR 0 9
19958: PUSH
19959: LD_INT 10
19961: PLUS
19962: PPUSH
19963: CALL_OW 110
19967: PUSH
19968: LD_INT 3
19970: DIV
19971: PLUS
19972: ST_TO_ADDR
19973: GO 19941
19975: POP
19976: POP
// for i in Teams [ 2 ] do
19977: LD_ADDR_VAR 0 9
19981: PUSH
19982: LD_EXP 22
19986: PUSH
19987: LD_INT 2
19989: ARRAY
19990: PUSH
19991: FOR_IN
19992: IFFALSE 20025
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19994: LD_ADDR_VAR 0 6
19998: PUSH
19999: LD_VAR 0 6
20003: PUSH
20004: LD_VAR 0 9
20008: PUSH
20009: LD_INT 10
20011: PLUS
20012: PPUSH
20013: CALL_OW 110
20017: PUSH
20018: LD_INT 3
20020: DIV
20021: PLUS
20022: ST_TO_ADDR
20023: GO 19991
20025: POP
20026: POP
// for i in Teams [ 3 ] do
20027: LD_ADDR_VAR 0 9
20031: PUSH
20032: LD_EXP 22
20036: PUSH
20037: LD_INT 3
20039: ARRAY
20040: PUSH
20041: FOR_IN
20042: IFFALSE 20075
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20044: LD_ADDR_VAR 0 7
20048: PUSH
20049: LD_VAR 0 7
20053: PUSH
20054: LD_VAR 0 9
20058: PUSH
20059: LD_INT 10
20061: PLUS
20062: PPUSH
20063: CALL_OW 110
20067: PUSH
20068: LD_INT 3
20070: DIV
20071: PLUS
20072: ST_TO_ADDR
20073: GO 20041
20075: POP
20076: POP
// for i in Teams [ 4 ] do
20077: LD_ADDR_VAR 0 9
20081: PUSH
20082: LD_EXP 22
20086: PUSH
20087: LD_INT 4
20089: ARRAY
20090: PUSH
20091: FOR_IN
20092: IFFALSE 20125
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20094: LD_ADDR_VAR 0 8
20098: PUSH
20099: LD_VAR 0 8
20103: PUSH
20104: LD_VAR 0 9
20108: PUSH
20109: LD_INT 10
20111: PLUS
20112: PPUSH
20113: CALL_OW 110
20117: PUSH
20118: LD_INT 3
20120: DIV
20121: PLUS
20122: ST_TO_ADDR
20123: GO 20091
20125: POP
20126: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
20127: LD_VAR 0 5
20131: PUSH
20132: LD_EXP 20
20136: GREATEREQUAL
20137: PUSH
20138: LD_VAR 0 6
20142: PUSH
20143: LD_EXP 20
20147: GREATEREQUAL
20148: OR
20149: PUSH
20150: LD_VAR 0 7
20154: PUSH
20155: LD_EXP 20
20159: GREATEREQUAL
20160: OR
20161: PUSH
20162: LD_VAR 0 8
20166: PUSH
20167: LD_EXP 20
20171: GREATEREQUAL
20172: OR
20173: IFFALSE 20178
// enable ( 3 ) ;
20175: LD_INT 3
20177: ENABLE_MARKED
// end ; end ;
20178: LD_VAR 0 1
20182: RET
// every 0 0$1 marked 2 do
20183: GO 20185
20185: DISABLE
// begin count_king ;
20186: CALL 19682 0 0
// show_public_points ;
20190: CALL 18575 0 0
// enable ;
20194: ENABLE
// end ;
20195: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
20196: GO 20198
20198: DISABLE
20199: LD_INT 0
20201: PPUSH
20202: PPUSH
20203: PPUSH
20204: PPUSH
20205: PPUSH
20206: PPUSH
// begin win := [ ] ;
20207: LD_ADDR_LOC 33
20211: PUSH
20212: EMPTY
20213: ST_TO_ADDR
// red = 0 ;
20214: LD_ADDR_VAR 0 2
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// blue = 0 ;
20222: LD_ADDR_VAR 0 3
20226: PUSH
20227: LD_INT 0
20229: ST_TO_ADDR
// yel = 0 ;
20230: LD_ADDR_VAR 0 4
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// green = 0 ;
20238: LD_ADDR_VAR 0 5
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// if not Team_Game then
20246: LD_EXP 25
20250: NOT
20251: IFFALSE 20328
// begin for side = 1 to 8 do
20253: LD_ADDR_VAR 0 1
20257: PUSH
20258: DOUBLE
20259: LD_INT 1
20261: DEC
20262: ST_TO_ADDR
20263: LD_INT 8
20265: PUSH
20266: FOR_TO
20267: IFFALSE 20312
// if GetTag ( side + 10 ) >= final_count * 3 then
20269: LD_VAR 0 1
20273: PUSH
20274: LD_INT 10
20276: PLUS
20277: PPUSH
20278: CALL_OW 110
20282: PUSH
20283: LD_EXP 20
20287: PUSH
20288: LD_INT 3
20290: MUL
20291: GREATEREQUAL
20292: IFFALSE 20310
// win := win ^ side ;
20294: LD_ADDR_LOC 33
20298: PUSH
20299: LD_LOC 33
20303: PUSH
20304: LD_VAR 0 1
20308: ADD
20309: ST_TO_ADDR
20310: GO 20266
20312: POP
20313: POP
// if win then
20314: LD_LOC 33
20318: IFFALSE 20325
// enable ( 4 ) else
20320: LD_INT 4
20322: ENABLE_MARKED
20323: GO 20326
// enable ;
20325: ENABLE
// end else
20326: GO 20644
// begin for i in Teams [ 1 ] do
20328: LD_ADDR_VAR 0 6
20332: PUSH
20333: LD_EXP 22
20337: PUSH
20338: LD_INT 1
20340: ARRAY
20341: PUSH
20342: FOR_IN
20343: IFFALSE 20376
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20345: LD_ADDR_VAR 0 2
20349: PUSH
20350: LD_VAR 0 2
20354: PUSH
20355: LD_VAR 0 6
20359: PUSH
20360: LD_INT 10
20362: PLUS
20363: PPUSH
20364: CALL_OW 110
20368: PUSH
20369: LD_INT 3
20371: DIV
20372: PLUS
20373: ST_TO_ADDR
20374: GO 20342
20376: POP
20377: POP
// for i in Teams [ 2 ] do
20378: LD_ADDR_VAR 0 6
20382: PUSH
20383: LD_EXP 22
20387: PUSH
20388: LD_INT 2
20390: ARRAY
20391: PUSH
20392: FOR_IN
20393: IFFALSE 20426
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20395: LD_ADDR_VAR 0 3
20399: PUSH
20400: LD_VAR 0 3
20404: PUSH
20405: LD_VAR 0 6
20409: PUSH
20410: LD_INT 10
20412: PLUS
20413: PPUSH
20414: CALL_OW 110
20418: PUSH
20419: LD_INT 3
20421: DIV
20422: PLUS
20423: ST_TO_ADDR
20424: GO 20392
20426: POP
20427: POP
// for i in Teams [ 3 ] do
20428: LD_ADDR_VAR 0 6
20432: PUSH
20433: LD_EXP 22
20437: PUSH
20438: LD_INT 3
20440: ARRAY
20441: PUSH
20442: FOR_IN
20443: IFFALSE 20476
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20445: LD_ADDR_VAR 0 4
20449: PUSH
20450: LD_VAR 0 4
20454: PUSH
20455: LD_VAR 0 6
20459: PUSH
20460: LD_INT 10
20462: PLUS
20463: PPUSH
20464: CALL_OW 110
20468: PUSH
20469: LD_INT 3
20471: DIV
20472: PLUS
20473: ST_TO_ADDR
20474: GO 20442
20476: POP
20477: POP
// for i in Teams [ 4 ] do
20478: LD_ADDR_VAR 0 6
20482: PUSH
20483: LD_EXP 22
20487: PUSH
20488: LD_INT 4
20490: ARRAY
20491: PUSH
20492: FOR_IN
20493: IFFALSE 20526
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20495: LD_ADDR_VAR 0 5
20499: PUSH
20500: LD_VAR 0 5
20504: PUSH
20505: LD_VAR 0 6
20509: PUSH
20510: LD_INT 10
20512: PLUS
20513: PPUSH
20514: CALL_OW 110
20518: PUSH
20519: LD_INT 3
20521: DIV
20522: PLUS
20523: ST_TO_ADDR
20524: GO 20492
20526: POP
20527: POP
// if red >= final_count then
20528: LD_VAR 0 2
20532: PUSH
20533: LD_EXP 20
20537: GREATEREQUAL
20538: IFFALSE 20554
// win = teams [ 1 ] ;
20540: LD_ADDR_LOC 33
20544: PUSH
20545: LD_EXP 22
20549: PUSH
20550: LD_INT 1
20552: ARRAY
20553: ST_TO_ADDR
// if blue >= final_count then
20554: LD_VAR 0 3
20558: PUSH
20559: LD_EXP 20
20563: GREATEREQUAL
20564: IFFALSE 20580
// win = teams [ 2 ] ;
20566: LD_ADDR_LOC 33
20570: PUSH
20571: LD_EXP 22
20575: PUSH
20576: LD_INT 2
20578: ARRAY
20579: ST_TO_ADDR
// if yel >= final_count then
20580: LD_VAR 0 4
20584: PUSH
20585: LD_EXP 20
20589: GREATEREQUAL
20590: IFFALSE 20606
// win = teams [ 3 ] ;
20592: LD_ADDR_LOC 33
20596: PUSH
20597: LD_EXP 22
20601: PUSH
20602: LD_INT 3
20604: ARRAY
20605: ST_TO_ADDR
// if green >= final_count then
20606: LD_VAR 0 5
20610: PUSH
20611: LD_EXP 20
20615: GREATEREQUAL
20616: IFFALSE 20632
// win = teams [ 4 ] ;
20618: LD_ADDR_LOC 33
20622: PUSH
20623: LD_EXP 22
20627: PUSH
20628: LD_INT 4
20630: ARRAY
20631: ST_TO_ADDR
// if win then
20632: LD_LOC 33
20636: IFFALSE 20643
// enable ( 4 ) else
20638: LD_INT 4
20640: ENABLE_MARKED
20641: GO 20644
// enable ;
20643: ENABLE
// end ; end ;
20644: PPOPN 6
20646: END
// every 0 0$1 marked 4 do
20647: GO 20649
20649: DISABLE
// begin if Player_Side in win then
20650: LD_EXP 27
20654: PUSH
20655: LD_LOC 33
20659: IN
20660: IFFALSE 20676
// begin wait ( 0 0$2 ) ;
20662: LD_INT 70
20664: PPUSH
20665: CALL_OW 67
// enable ( 401 ) ;
20669: LD_INT 401
20671: ENABLE_MARKED
// exit ;
20672: GO 20692
// end else
20674: GO 20692
// begin wait ( 0 0$2 ) ;
20676: LD_INT 70
20678: PPUSH
20679: CALL_OW 67
// Multiplayer_Loose_Message ;
20683: CALL_OW 521
// enable ( 400 ) ;
20687: LD_INT 400
20689: ENABLE_MARKED
// exit ;
20690: GO 20692
// end ; end ; end_of_file
20692: END
// export function SetMpTechs ( ) ; var side , i ; begin
20693: LD_INT 0
20695: PPUSH
20696: PPUSH
20697: PPUSH
// for side = 1 to 8 do
20698: LD_ADDR_VAR 0 2
20702: PUSH
20703: DOUBLE
20704: LD_INT 1
20706: DEC
20707: ST_TO_ADDR
20708: LD_INT 8
20710: PUSH
20711: FOR_TO
20712: IFFALSE 20833
// begin for i = 1 to 72 do
20714: LD_ADDR_VAR 0 3
20718: PUSH
20719: DOUBLE
20720: LD_INT 1
20722: DEC
20723: ST_TO_ADDR
20724: LD_INT 72
20726: PUSH
20727: FOR_TO
20728: IFFALSE 20759
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
20730: LD_VAR 0 3
20734: PPUSH
20735: LD_VAR 0 2
20739: PPUSH
20740: LD_INT 0
20742: PPUSH
20743: LD_VAR 0 3
20747: PPUSH
20748: CALL_OW 565
20752: PPUSH
20753: CALL_OW 322
20757: GO 20727
20759: POP
20760: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
20761: LD_INT 73
20763: PPUSH
20764: LD_VAR 0 2
20768: PPUSH
20769: LD_INT 0
20771: PPUSH
20772: LD_INT 25
20774: PPUSH
20775: CALL_OW 565
20779: PPUSH
20780: CALL_OW 322
// for i = 0 to 40 do
20784: LD_ADDR_VAR 0 3
20788: PUSH
20789: DOUBLE
20790: LD_INT 0
20792: DEC
20793: ST_TO_ADDR
20794: LD_INT 40
20796: PUSH
20797: FOR_TO
20798: IFFALSE 20829
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
20800: LD_VAR 0 3
20804: PPUSH
20805: LD_VAR 0 2
20809: PPUSH
20810: LD_INT 1
20812: PPUSH
20813: LD_VAR 0 3
20817: PPUSH
20818: CALL_OW 565
20822: PPUSH
20823: CALL_OW 324
20827: GO 20797
20829: POP
20830: POP
// end ;
20831: GO 20711
20833: POP
20834: POP
// end ;
20835: LD_VAR 0 1
20839: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
20840: LD_INT 0
20842: PPUSH
20843: PPUSH
20844: PPUSH
// for side = 1 to 8 do
20845: LD_ADDR_VAR 0 3
20849: PUSH
20850: DOUBLE
20851: LD_INT 1
20853: DEC
20854: ST_TO_ADDR
20855: LD_INT 8
20857: PUSH
20858: FOR_TO
20859: IFFALSE 24855
// begin for i = 1 to 73 do
20861: LD_ADDR_VAR 0 4
20865: PUSH
20866: DOUBLE
20867: LD_INT 1
20869: DEC
20870: ST_TO_ADDR
20871: LD_INT 73
20873: PUSH
20874: FOR_TO
20875: IFFALSE 20896
// SetTech ( i , side , state_disabled ) ;
20877: LD_VAR 0 4
20881: PPUSH
20882: LD_VAR 0 3
20886: PPUSH
20887: LD_INT 0
20889: PPUSH
20890: CALL_OW 322
20894: GO 20874
20896: POP
20897: POP
// for i = 0 to 40 do
20898: LD_ADDR_VAR 0 4
20902: PUSH
20903: DOUBLE
20904: LD_INT 0
20906: DEC
20907: ST_TO_ADDR
20908: LD_INT 40
20910: PUSH
20911: FOR_TO
20912: IFFALSE 20933
// SetRestrict ( i , side , false ) ;
20914: LD_VAR 0 4
20918: PPUSH
20919: LD_VAR 0 3
20923: PPUSH
20924: LD_INT 0
20926: PPUSH
20927: CALL_OW 324
20931: GO 20911
20933: POP
20934: POP
// case level of 1 :
20935: LD_VAR 0 1
20939: PUSH
20940: LD_INT 1
20942: DOUBLE
20943: EQUAL
20944: IFTRUE 20948
20946: GO 21101
20948: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20949: LD_INT 35
20951: PPUSH
20952: LD_VAR 0 3
20956: PPUSH
20957: LD_INT 1
20959: PPUSH
20960: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20964: LD_INT 45
20966: PPUSH
20967: LD_VAR 0 3
20971: PPUSH
20972: LD_INT 1
20974: PPUSH
20975: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20979: LD_INT 46
20981: PPUSH
20982: LD_VAR 0 3
20986: PPUSH
20987: LD_INT 1
20989: PPUSH
20990: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20994: LD_INT 47
20996: PPUSH
20997: LD_VAR 0 3
21001: PPUSH
21002: LD_INT 1
21004: PPUSH
21005: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21009: LD_INT 0
21011: PPUSH
21012: LD_VAR 0 3
21016: PPUSH
21017: LD_INT 1
21019: PPUSH
21020: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21024: LD_INT 2
21026: PPUSH
21027: LD_VAR 0 3
21031: PPUSH
21032: LD_INT 1
21034: PPUSH
21035: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21039: LD_INT 4
21041: PPUSH
21042: LD_VAR 0 3
21046: PPUSH
21047: LD_INT 1
21049: PPUSH
21050: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21054: LD_INT 6
21056: PPUSH
21057: LD_VAR 0 3
21061: PPUSH
21062: LD_INT 1
21064: PPUSH
21065: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21069: LD_INT 29
21071: PPUSH
21072: LD_VAR 0 3
21076: PPUSH
21077: LD_INT 1
21079: PPUSH
21080: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21084: LD_INT 31
21086: PPUSH
21087: LD_VAR 0 3
21091: PPUSH
21092: LD_INT 1
21094: PPUSH
21095: CALL_OW 324
// end ; 2 :
21099: GO 24853
21101: LD_INT 2
21103: DOUBLE
21104: EQUAL
21105: IFTRUE 21109
21107: GO 21307
21109: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21110: LD_INT 35
21112: PPUSH
21113: LD_VAR 0 3
21117: PPUSH
21118: LD_INT 1
21120: PPUSH
21121: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21125: LD_INT 45
21127: PPUSH
21128: LD_VAR 0 3
21132: PPUSH
21133: LD_INT 1
21135: PPUSH
21136: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21140: LD_INT 46
21142: PPUSH
21143: LD_VAR 0 3
21147: PPUSH
21148: LD_INT 1
21150: PPUSH
21151: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21155: LD_INT 47
21157: PPUSH
21158: LD_VAR 0 3
21162: PPUSH
21163: LD_INT 1
21165: PPUSH
21166: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21170: LD_INT 1
21172: PPUSH
21173: LD_VAR 0 3
21177: PPUSH
21178: LD_INT 1
21180: PPUSH
21181: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21185: LD_INT 2
21187: PPUSH
21188: LD_VAR 0 3
21192: PPUSH
21193: LD_INT 1
21195: PPUSH
21196: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21200: LD_INT 11
21202: PPUSH
21203: LD_VAR 0 3
21207: PPUSH
21208: LD_INT 1
21210: PPUSH
21211: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21215: LD_INT 0
21217: PPUSH
21218: LD_VAR 0 3
21222: PPUSH
21223: LD_INT 1
21225: PPUSH
21226: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21230: LD_INT 2
21232: PPUSH
21233: LD_VAR 0 3
21237: PPUSH
21238: LD_INT 1
21240: PPUSH
21241: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21245: LD_INT 4
21247: PPUSH
21248: LD_VAR 0 3
21252: PPUSH
21253: LD_INT 1
21255: PPUSH
21256: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21260: LD_INT 6
21262: PPUSH
21263: LD_VAR 0 3
21267: PPUSH
21268: LD_INT 1
21270: PPUSH
21271: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21275: LD_INT 29
21277: PPUSH
21278: LD_VAR 0 3
21282: PPUSH
21283: LD_INT 1
21285: PPUSH
21286: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21290: LD_INT 31
21292: PPUSH
21293: LD_VAR 0 3
21297: PPUSH
21298: LD_INT 1
21300: PPUSH
21301: CALL_OW 324
// end ; 3 :
21305: GO 24853
21307: LD_INT 3
21309: DOUBLE
21310: EQUAL
21311: IFTRUE 21315
21313: GO 21768
21315: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21316: LD_INT 35
21318: PPUSH
21319: LD_VAR 0 3
21323: PPUSH
21324: LD_INT 1
21326: PPUSH
21327: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21331: LD_INT 45
21333: PPUSH
21334: LD_VAR 0 3
21338: PPUSH
21339: LD_INT 1
21341: PPUSH
21342: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21346: LD_INT 46
21348: PPUSH
21349: LD_VAR 0 3
21353: PPUSH
21354: LD_INT 1
21356: PPUSH
21357: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21361: LD_INT 47
21363: PPUSH
21364: LD_VAR 0 3
21368: PPUSH
21369: LD_INT 1
21371: PPUSH
21372: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21376: LD_INT 1
21378: PPUSH
21379: LD_VAR 0 3
21383: PPUSH
21384: LD_INT 1
21386: PPUSH
21387: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21391: LD_INT 2
21393: PPUSH
21394: LD_VAR 0 3
21398: PPUSH
21399: LD_INT 1
21401: PPUSH
21402: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21406: LD_INT 11
21408: PPUSH
21409: LD_VAR 0 3
21413: PPUSH
21414: LD_INT 1
21416: PPUSH
21417: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21421: LD_INT 48
21423: PPUSH
21424: LD_VAR 0 3
21428: PPUSH
21429: LD_INT 1
21431: PPUSH
21432: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21436: LD_INT 69
21438: PPUSH
21439: LD_VAR 0 3
21443: PPUSH
21444: LD_INT 1
21446: PPUSH
21447: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21451: LD_INT 39
21453: PPUSH
21454: LD_VAR 0 3
21458: PPUSH
21459: LD_INT 1
21461: PPUSH
21462: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21466: LD_INT 43
21468: PPUSH
21469: LD_VAR 0 3
21473: PPUSH
21474: LD_INT 1
21476: PPUSH
21477: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21481: LD_INT 51
21483: PPUSH
21484: LD_VAR 0 3
21488: PPUSH
21489: LD_INT 1
21491: PPUSH
21492: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21496: LD_INT 6
21498: PPUSH
21499: LD_VAR 0 3
21503: PPUSH
21504: LD_INT 1
21506: PPUSH
21507: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21511: LD_INT 0
21513: PPUSH
21514: LD_VAR 0 3
21518: PPUSH
21519: LD_INT 1
21521: PPUSH
21522: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21526: LD_INT 2
21528: PPUSH
21529: LD_VAR 0 3
21533: PPUSH
21534: LD_INT 1
21536: PPUSH
21537: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21541: LD_INT 3
21543: PPUSH
21544: LD_VAR 0 3
21548: PPUSH
21549: LD_INT 1
21551: PPUSH
21552: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21556: LD_INT 4
21558: PPUSH
21559: LD_VAR 0 3
21563: PPUSH
21564: LD_INT 1
21566: PPUSH
21567: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21571: LD_INT 6
21573: PPUSH
21574: LD_VAR 0 3
21578: PPUSH
21579: LD_INT 1
21581: PPUSH
21582: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21586: LD_INT 7
21588: PPUSH
21589: LD_VAR 0 3
21593: PPUSH
21594: LD_INT 1
21596: PPUSH
21597: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21601: LD_INT 8
21603: PPUSH
21604: LD_VAR 0 3
21608: PPUSH
21609: LD_INT 1
21611: PPUSH
21612: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21616: LD_INT 10
21618: PPUSH
21619: LD_VAR 0 3
21623: PPUSH
21624: LD_INT 1
21626: PPUSH
21627: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21631: LD_INT 15
21633: PPUSH
21634: LD_VAR 0 3
21638: PPUSH
21639: LD_INT 1
21641: PPUSH
21642: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21646: LD_INT 16
21648: PPUSH
21649: LD_VAR 0 3
21653: PPUSH
21654: LD_INT 1
21656: PPUSH
21657: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21661: LD_INT 17
21663: PPUSH
21664: LD_VAR 0 3
21668: PPUSH
21669: LD_INT 1
21671: PPUSH
21672: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21676: LD_INT 20
21678: PPUSH
21679: LD_VAR 0 3
21683: PPUSH
21684: LD_INT 1
21686: PPUSH
21687: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21691: LD_INT 26
21693: PPUSH
21694: LD_VAR 0 3
21698: PPUSH
21699: LD_INT 1
21701: PPUSH
21702: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21706: LD_INT 27
21708: PPUSH
21709: LD_VAR 0 3
21713: PPUSH
21714: LD_INT 1
21716: PPUSH
21717: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21721: LD_INT 29
21723: PPUSH
21724: LD_VAR 0 3
21728: PPUSH
21729: LD_INT 1
21731: PPUSH
21732: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21736: LD_INT 31
21738: PPUSH
21739: LD_VAR 0 3
21743: PPUSH
21744: LD_INT 1
21746: PPUSH
21747: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21751: LD_INT 32
21753: PPUSH
21754: LD_VAR 0 3
21758: PPUSH
21759: LD_INT 1
21761: PPUSH
21762: CALL_OW 324
// end ; 4 :
21766: GO 24853
21768: LD_INT 4
21770: DOUBLE
21771: EQUAL
21772: IFTRUE 21776
21774: GO 22724
21776: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21777: LD_INT 35
21779: PPUSH
21780: LD_VAR 0 3
21784: PPUSH
21785: LD_INT 1
21787: PPUSH
21788: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21792: LD_INT 45
21794: PPUSH
21795: LD_VAR 0 3
21799: PPUSH
21800: LD_INT 1
21802: PPUSH
21803: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21807: LD_INT 46
21809: PPUSH
21810: LD_VAR 0 3
21814: PPUSH
21815: LD_INT 1
21817: PPUSH
21818: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21822: LD_INT 47
21824: PPUSH
21825: LD_VAR 0 3
21829: PPUSH
21830: LD_INT 1
21832: PPUSH
21833: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21837: LD_INT 1
21839: PPUSH
21840: LD_VAR 0 3
21844: PPUSH
21845: LD_INT 1
21847: PPUSH
21848: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21852: LD_INT 2
21854: PPUSH
21855: LD_VAR 0 3
21859: PPUSH
21860: LD_INT 1
21862: PPUSH
21863: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21867: LD_INT 11
21869: PPUSH
21870: LD_VAR 0 3
21874: PPUSH
21875: LD_INT 1
21877: PPUSH
21878: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21882: LD_INT 20
21884: PPUSH
21885: LD_VAR 0 3
21889: PPUSH
21890: LD_INT 1
21892: PPUSH
21893: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21897: LD_INT 48
21899: PPUSH
21900: LD_VAR 0 3
21904: PPUSH
21905: LD_INT 1
21907: PPUSH
21908: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21912: LD_INT 49
21914: PPUSH
21915: LD_VAR 0 3
21919: PPUSH
21920: LD_INT 1
21922: PPUSH
21923: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21927: LD_INT 69
21929: PPUSH
21930: LD_VAR 0 3
21934: PPUSH
21935: LD_INT 1
21937: PPUSH
21938: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21942: LD_INT 39
21944: PPUSH
21945: LD_VAR 0 3
21949: PPUSH
21950: LD_INT 1
21952: PPUSH
21953: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21957: LD_INT 34
21959: PPUSH
21960: LD_VAR 0 3
21964: PPUSH
21965: LD_INT 1
21967: PPUSH
21968: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21972: LD_INT 42
21974: PPUSH
21975: LD_VAR 0 3
21979: PPUSH
21980: LD_INT 1
21982: PPUSH
21983: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21987: LD_INT 44
21989: PPUSH
21990: LD_VAR 0 3
21994: PPUSH
21995: LD_INT 1
21997: PPUSH
21998: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22002: LD_INT 41
22004: PPUSH
22005: LD_VAR 0 3
22009: PPUSH
22010: LD_INT 1
22012: PPUSH
22013: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22017: LD_INT 43
22019: PPUSH
22020: LD_VAR 0 3
22024: PPUSH
22025: LD_INT 1
22027: PPUSH
22028: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22032: LD_INT 70
22034: PPUSH
22035: LD_VAR 0 3
22039: PPUSH
22040: LD_INT 1
22042: PPUSH
22043: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22047: LD_INT 51
22049: PPUSH
22050: LD_VAR 0 3
22054: PPUSH
22055: LD_INT 1
22057: PPUSH
22058: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22062: LD_INT 52
22064: PPUSH
22065: LD_VAR 0 3
22069: PPUSH
22070: LD_INT 1
22072: PPUSH
22073: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22077: LD_INT 6
22079: PPUSH
22080: LD_VAR 0 3
22084: PPUSH
22085: LD_INT 1
22087: PPUSH
22088: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22092: LD_INT 15
22094: PPUSH
22095: LD_VAR 0 3
22099: PPUSH
22100: LD_INT 1
22102: PPUSH
22103: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22107: LD_INT 7
22109: PPUSH
22110: LD_VAR 0 3
22114: PPUSH
22115: LD_INT 1
22117: PPUSH
22118: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22122: LD_INT 12
22124: PPUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: LD_INT 1
22132: PPUSH
22133: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22137: LD_INT 18
22139: PPUSH
22140: LD_VAR 0 3
22144: PPUSH
22145: LD_INT 1
22147: PPUSH
22148: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
22152: LD_INT 60
22154: PPUSH
22155: LD_VAR 0 3
22159: PPUSH
22160: LD_INT 1
22162: PPUSH
22163: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
22167: LD_INT 9
22169: PPUSH
22170: LD_VAR 0 3
22174: PPUSH
22175: LD_INT 1
22177: PPUSH
22178: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
22182: LD_INT 30
22184: PPUSH
22185: LD_VAR 0 3
22189: PPUSH
22190: LD_INT 1
22192: PPUSH
22193: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
22197: LD_INT 37
22199: PPUSH
22200: LD_VAR 0 3
22204: PPUSH
22205: LD_INT 1
22207: PPUSH
22208: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
22212: LD_INT 5
22214: PPUSH
22215: LD_VAR 0 3
22219: PPUSH
22220: LD_INT 1
22222: PPUSH
22223: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
22227: LD_INT 66
22229: PPUSH
22230: LD_VAR 0 3
22234: PPUSH
22235: LD_INT 1
22237: PPUSH
22238: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
22242: LD_INT 21
22244: PPUSH
22245: LD_VAR 0 3
22249: PPUSH
22250: LD_INT 1
22252: PPUSH
22253: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22257: LD_INT 22
22259: PPUSH
22260: LD_VAR 0 3
22264: PPUSH
22265: LD_INT 1
22267: PPUSH
22268: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22272: LD_INT 54
22274: PPUSH
22275: LD_VAR 0 3
22279: PPUSH
22280: LD_INT 1
22282: PPUSH
22283: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22287: LD_INT 0
22289: PPUSH
22290: LD_VAR 0 3
22294: PPUSH
22295: LD_INT 1
22297: PPUSH
22298: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22302: LD_INT 1
22304: PPUSH
22305: LD_VAR 0 3
22309: PPUSH
22310: LD_INT 1
22312: PPUSH
22313: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22317: LD_INT 2
22319: PPUSH
22320: LD_VAR 0 3
22324: PPUSH
22325: LD_INT 1
22327: PPUSH
22328: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22332: LD_INT 3
22334: PPUSH
22335: LD_VAR 0 3
22339: PPUSH
22340: LD_INT 1
22342: PPUSH
22343: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22347: LD_INT 4
22349: PPUSH
22350: LD_VAR 0 3
22354: PPUSH
22355: LD_INT 1
22357: PPUSH
22358: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22362: LD_INT 5
22364: PPUSH
22365: LD_VAR 0 3
22369: PPUSH
22370: LD_INT 1
22372: PPUSH
22373: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22377: LD_INT 6
22379: PPUSH
22380: LD_VAR 0 3
22384: PPUSH
22385: LD_INT 1
22387: PPUSH
22388: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22392: LD_INT 7
22394: PPUSH
22395: LD_VAR 0 3
22399: PPUSH
22400: LD_INT 1
22402: PPUSH
22403: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22407: LD_INT 8
22409: PPUSH
22410: LD_VAR 0 3
22414: PPUSH
22415: LD_INT 1
22417: PPUSH
22418: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22422: LD_INT 10
22424: PPUSH
22425: LD_VAR 0 3
22429: PPUSH
22430: LD_INT 1
22432: PPUSH
22433: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22437: LD_INT 11
22439: PPUSH
22440: LD_VAR 0 3
22444: PPUSH
22445: LD_INT 1
22447: PPUSH
22448: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22452: LD_INT 12
22454: PPUSH
22455: LD_VAR 0 3
22459: PPUSH
22460: LD_INT 1
22462: PPUSH
22463: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22467: LD_INT 13
22469: PPUSH
22470: LD_VAR 0 3
22474: PPUSH
22475: LD_INT 1
22477: PPUSH
22478: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22482: LD_INT 14
22484: PPUSH
22485: LD_VAR 0 3
22489: PPUSH
22490: LD_INT 1
22492: PPUSH
22493: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22497: LD_INT 15
22499: PPUSH
22500: LD_VAR 0 3
22504: PPUSH
22505: LD_INT 1
22507: PPUSH
22508: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22512: LD_INT 16
22514: PPUSH
22515: LD_VAR 0 3
22519: PPUSH
22520: LD_INT 1
22522: PPUSH
22523: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22527: LD_INT 17
22529: PPUSH
22530: LD_VAR 0 3
22534: PPUSH
22535: LD_INT 1
22537: PPUSH
22538: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22542: LD_INT 19
22544: PPUSH
22545: LD_VAR 0 3
22549: PPUSH
22550: LD_INT 1
22552: PPUSH
22553: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22557: LD_INT 20
22559: PPUSH
22560: LD_VAR 0 3
22564: PPUSH
22565: LD_INT 1
22567: PPUSH
22568: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22572: LD_INT 21
22574: PPUSH
22575: LD_VAR 0 3
22579: PPUSH
22580: LD_INT 1
22582: PPUSH
22583: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22587: LD_INT 23
22589: PPUSH
22590: LD_VAR 0 3
22594: PPUSH
22595: LD_INT 1
22597: PPUSH
22598: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22602: LD_INT 26
22604: PPUSH
22605: LD_VAR 0 3
22609: PPUSH
22610: LD_INT 1
22612: PPUSH
22613: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22617: LD_INT 27
22619: PPUSH
22620: LD_VAR 0 3
22624: PPUSH
22625: LD_INT 1
22627: PPUSH
22628: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22632: LD_INT 28
22634: PPUSH
22635: LD_VAR 0 3
22639: PPUSH
22640: LD_INT 1
22642: PPUSH
22643: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22647: LD_INT 29
22649: PPUSH
22650: LD_VAR 0 3
22654: PPUSH
22655: LD_INT 1
22657: PPUSH
22658: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22662: LD_INT 30
22664: PPUSH
22665: LD_VAR 0 3
22669: PPUSH
22670: LD_INT 1
22672: PPUSH
22673: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22677: LD_INT 31
22679: PPUSH
22680: LD_VAR 0 3
22684: PPUSH
22685: LD_INT 1
22687: PPUSH
22688: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22692: LD_INT 32
22694: PPUSH
22695: LD_VAR 0 3
22699: PPUSH
22700: LD_INT 1
22702: PPUSH
22703: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22707: LD_INT 36
22709: PPUSH
22710: LD_VAR 0 3
22714: PPUSH
22715: LD_INT 1
22717: PPUSH
22718: CALL_OW 324
// end ; 5 :
22722: GO 24853
22724: LD_INT 5
22726: DOUBLE
22727: EQUAL
22728: IFTRUE 22732
22730: GO 23845
22732: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22733: LD_INT 35
22735: PPUSH
22736: LD_VAR 0 3
22740: PPUSH
22741: LD_INT 1
22743: PPUSH
22744: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22748: LD_INT 45
22750: PPUSH
22751: LD_VAR 0 3
22755: PPUSH
22756: LD_INT 1
22758: PPUSH
22759: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22763: LD_INT 46
22765: PPUSH
22766: LD_VAR 0 3
22770: PPUSH
22771: LD_INT 1
22773: PPUSH
22774: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22778: LD_INT 47
22780: PPUSH
22781: LD_VAR 0 3
22785: PPUSH
22786: LD_INT 1
22788: PPUSH
22789: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22793: LD_INT 1
22795: PPUSH
22796: LD_VAR 0 3
22800: PPUSH
22801: LD_INT 1
22803: PPUSH
22804: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22808: LD_INT 2
22810: PPUSH
22811: LD_VAR 0 3
22815: PPUSH
22816: LD_INT 1
22818: PPUSH
22819: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22823: LD_INT 11
22825: PPUSH
22826: LD_VAR 0 3
22830: PPUSH
22831: LD_INT 1
22833: PPUSH
22834: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22838: LD_INT 20
22840: PPUSH
22841: LD_VAR 0 3
22845: PPUSH
22846: LD_INT 1
22848: PPUSH
22849: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22853: LD_INT 48
22855: PPUSH
22856: LD_VAR 0 3
22860: PPUSH
22861: LD_INT 1
22863: PPUSH
22864: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22868: LD_INT 49
22870: PPUSH
22871: LD_VAR 0 3
22875: PPUSH
22876: LD_INT 1
22878: PPUSH
22879: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22883: LD_INT 69
22885: PPUSH
22886: LD_VAR 0 3
22890: PPUSH
22891: LD_INT 1
22893: PPUSH
22894: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22898: LD_INT 39
22900: PPUSH
22901: LD_VAR 0 3
22905: PPUSH
22906: LD_INT 1
22908: PPUSH
22909: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22913: LD_INT 34
22915: PPUSH
22916: LD_VAR 0 3
22920: PPUSH
22921: LD_INT 1
22923: PPUSH
22924: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22928: LD_INT 42
22930: PPUSH
22931: LD_VAR 0 3
22935: PPUSH
22936: LD_INT 1
22938: PPUSH
22939: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22943: LD_INT 44
22945: PPUSH
22946: LD_VAR 0 3
22950: PPUSH
22951: LD_INT 1
22953: PPUSH
22954: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22958: LD_INT 41
22960: PPUSH
22961: LD_VAR 0 3
22965: PPUSH
22966: LD_INT 1
22968: PPUSH
22969: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22973: LD_INT 40
22975: PPUSH
22976: LD_VAR 0 3
22980: PPUSH
22981: LD_INT 1
22983: PPUSH
22984: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22988: LD_INT 43
22990: PPUSH
22991: LD_VAR 0 3
22995: PPUSH
22996: LD_INT 1
22998: PPUSH
22999: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23003: LD_INT 70
23005: PPUSH
23006: LD_VAR 0 3
23010: PPUSH
23011: LD_INT 1
23013: PPUSH
23014: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23018: LD_INT 51
23020: PPUSH
23021: LD_VAR 0 3
23025: PPUSH
23026: LD_INT 1
23028: PPUSH
23029: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23033: LD_INT 52
23035: PPUSH
23036: LD_VAR 0 3
23040: PPUSH
23041: LD_INT 1
23043: PPUSH
23044: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23048: LD_INT 6
23050: PPUSH
23051: LD_VAR 0 3
23055: PPUSH
23056: LD_INT 1
23058: PPUSH
23059: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23063: LD_INT 15
23065: PPUSH
23066: LD_VAR 0 3
23070: PPUSH
23071: LD_INT 1
23073: PPUSH
23074: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23078: LD_INT 7
23080: PPUSH
23081: LD_VAR 0 3
23085: PPUSH
23086: LD_INT 1
23088: PPUSH
23089: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23093: LD_INT 12
23095: PPUSH
23096: LD_VAR 0 3
23100: PPUSH
23101: LD_INT 1
23103: PPUSH
23104: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
23108: LD_INT 17
23110: PPUSH
23111: LD_VAR 0 3
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23123: LD_INT 18
23125: PPUSH
23126: LD_VAR 0 3
23130: PPUSH
23131: LD_INT 1
23133: PPUSH
23134: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23138: LD_INT 60
23140: PPUSH
23141: LD_VAR 0 3
23145: PPUSH
23146: LD_INT 1
23148: PPUSH
23149: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23153: LD_INT 32
23155: PPUSH
23156: LD_VAR 0 3
23160: PPUSH
23161: LD_INT 1
23163: PPUSH
23164: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23168: LD_INT 9
23170: PPUSH
23171: LD_VAR 0 3
23175: PPUSH
23176: LD_INT 1
23178: PPUSH
23179: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23183: LD_INT 57
23185: PPUSH
23186: LD_VAR 0 3
23190: PPUSH
23191: LD_INT 1
23193: PPUSH
23194: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23198: LD_INT 30
23200: PPUSH
23201: LD_VAR 0 3
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23213: LD_INT 37
23215: PPUSH
23216: LD_VAR 0 3
23220: PPUSH
23221: LD_INT 1
23223: PPUSH
23224: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23228: LD_INT 63
23230: PPUSH
23231: LD_VAR 0 3
23235: PPUSH
23236: LD_INT 1
23238: PPUSH
23239: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23243: LD_INT 3
23245: PPUSH
23246: LD_VAR 0 3
23250: PPUSH
23251: LD_INT 1
23253: PPUSH
23254: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23258: LD_INT 4
23260: PPUSH
23261: LD_VAR 0 3
23265: PPUSH
23266: LD_INT 1
23268: PPUSH
23269: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23273: LD_INT 5
23275: PPUSH
23276: LD_VAR 0 3
23280: PPUSH
23281: LD_INT 1
23283: PPUSH
23284: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23288: LD_INT 66
23290: PPUSH
23291: LD_VAR 0 3
23295: PPUSH
23296: LD_INT 1
23298: PPUSH
23299: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23303: LD_INT 21
23305: PPUSH
23306: LD_VAR 0 3
23310: PPUSH
23311: LD_INT 1
23313: PPUSH
23314: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23318: LD_INT 22
23320: PPUSH
23321: LD_VAR 0 3
23325: PPUSH
23326: LD_INT 1
23328: PPUSH
23329: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23333: LD_INT 19
23335: PPUSH
23336: LD_VAR 0 3
23340: PPUSH
23341: LD_INT 1
23343: PPUSH
23344: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23348: LD_INT 54
23350: PPUSH
23351: LD_VAR 0 3
23355: PPUSH
23356: LD_INT 1
23358: PPUSH
23359: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23363: LD_INT 55
23365: PPUSH
23366: LD_VAR 0 3
23370: PPUSH
23371: LD_INT 1
23373: PPUSH
23374: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23378: LD_INT 0
23380: PPUSH
23381: LD_VAR 0 3
23385: PPUSH
23386: LD_INT 1
23388: PPUSH
23389: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23393: LD_INT 1
23395: PPUSH
23396: LD_VAR 0 3
23400: PPUSH
23401: LD_INT 1
23403: PPUSH
23404: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23408: LD_INT 2
23410: PPUSH
23411: LD_VAR 0 3
23415: PPUSH
23416: LD_INT 1
23418: PPUSH
23419: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23423: LD_INT 3
23425: PPUSH
23426: LD_VAR 0 3
23430: PPUSH
23431: LD_INT 1
23433: PPUSH
23434: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23438: LD_INT 4
23440: PPUSH
23441: LD_VAR 0 3
23445: PPUSH
23446: LD_INT 1
23448: PPUSH
23449: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23453: LD_INT 5
23455: PPUSH
23456: LD_VAR 0 3
23460: PPUSH
23461: LD_INT 1
23463: PPUSH
23464: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23468: LD_INT 6
23470: PPUSH
23471: LD_VAR 0 3
23475: PPUSH
23476: LD_INT 1
23478: PPUSH
23479: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23483: LD_INT 7
23485: PPUSH
23486: LD_VAR 0 3
23490: PPUSH
23491: LD_INT 1
23493: PPUSH
23494: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23498: LD_INT 8
23500: PPUSH
23501: LD_VAR 0 3
23505: PPUSH
23506: LD_INT 1
23508: PPUSH
23509: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23513: LD_INT 10
23515: PPUSH
23516: LD_VAR 0 3
23520: PPUSH
23521: LD_INT 1
23523: PPUSH
23524: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23528: LD_INT 11
23530: PPUSH
23531: LD_VAR 0 3
23535: PPUSH
23536: LD_INT 1
23538: PPUSH
23539: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23543: LD_INT 12
23545: PPUSH
23546: LD_VAR 0 3
23550: PPUSH
23551: LD_INT 1
23553: PPUSH
23554: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23558: LD_INT 13
23560: PPUSH
23561: LD_VAR 0 3
23565: PPUSH
23566: LD_INT 1
23568: PPUSH
23569: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23573: LD_INT 14
23575: PPUSH
23576: LD_VAR 0 3
23580: PPUSH
23581: LD_INT 1
23583: PPUSH
23584: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23588: LD_INT 15
23590: PPUSH
23591: LD_VAR 0 3
23595: PPUSH
23596: LD_INT 1
23598: PPUSH
23599: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23603: LD_INT 16
23605: PPUSH
23606: LD_VAR 0 3
23610: PPUSH
23611: LD_INT 1
23613: PPUSH
23614: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23618: LD_INT 17
23620: PPUSH
23621: LD_VAR 0 3
23625: PPUSH
23626: LD_INT 1
23628: PPUSH
23629: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
23633: LD_INT 18
23635: PPUSH
23636: LD_VAR 0 3
23640: PPUSH
23641: LD_INT 1
23643: PPUSH
23644: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23648: LD_INT 19
23650: PPUSH
23651: LD_VAR 0 3
23655: PPUSH
23656: LD_INT 1
23658: PPUSH
23659: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23663: LD_INT 20
23665: PPUSH
23666: LD_VAR 0 3
23670: PPUSH
23671: LD_INT 1
23673: PPUSH
23674: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23678: LD_INT 21
23680: PPUSH
23681: LD_VAR 0 3
23685: PPUSH
23686: LD_INT 1
23688: PPUSH
23689: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23693: LD_INT 23
23695: PPUSH
23696: LD_VAR 0 3
23700: PPUSH
23701: LD_INT 1
23703: PPUSH
23704: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23708: LD_INT 26
23710: PPUSH
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_INT 1
23718: PPUSH
23719: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23723: LD_INT 27
23725: PPUSH
23726: LD_VAR 0 3
23730: PPUSH
23731: LD_INT 1
23733: PPUSH
23734: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23738: LD_INT 28
23740: PPUSH
23741: LD_VAR 0 3
23745: PPUSH
23746: LD_INT 1
23748: PPUSH
23749: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23753: LD_INT 29
23755: PPUSH
23756: LD_VAR 0 3
23760: PPUSH
23761: LD_INT 1
23763: PPUSH
23764: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23768: LD_INT 30
23770: PPUSH
23771: LD_VAR 0 3
23775: PPUSH
23776: LD_INT 1
23778: PPUSH
23779: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23783: LD_INT 31
23785: PPUSH
23786: LD_VAR 0 3
23790: PPUSH
23791: LD_INT 1
23793: PPUSH
23794: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23798: LD_INT 32
23800: PPUSH
23801: LD_VAR 0 3
23805: PPUSH
23806: LD_INT 1
23808: PPUSH
23809: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
23813: LD_INT 33
23815: PPUSH
23816: LD_VAR 0 3
23820: PPUSH
23821: LD_INT 1
23823: PPUSH
23824: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23828: LD_INT 36
23830: PPUSH
23831: LD_VAR 0 3
23835: PPUSH
23836: LD_INT 1
23838: PPUSH
23839: CALL_OW 324
// end ; 6 :
23843: GO 24853
23845: LD_INT 6
23847: DOUBLE
23848: EQUAL
23849: IFTRUE 23853
23851: GO 24778
23853: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23854: LD_INT 35
23856: PPUSH
23857: LD_VAR 0 3
23861: PPUSH
23862: LD_INT 1
23864: PPUSH
23865: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23869: LD_INT 45
23871: PPUSH
23872: LD_VAR 0 3
23876: PPUSH
23877: LD_INT 1
23879: PPUSH
23880: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23884: LD_INT 46
23886: PPUSH
23887: LD_VAR 0 3
23891: PPUSH
23892: LD_INT 1
23894: PPUSH
23895: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23899: LD_INT 47
23901: PPUSH
23902: LD_VAR 0 3
23906: PPUSH
23907: LD_INT 1
23909: PPUSH
23910: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23914: LD_INT 1
23916: PPUSH
23917: LD_VAR 0 3
23921: PPUSH
23922: LD_INT 1
23924: PPUSH
23925: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23929: LD_INT 2
23931: PPUSH
23932: LD_VAR 0 3
23936: PPUSH
23937: LD_INT 1
23939: PPUSH
23940: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23944: LD_INT 11
23946: PPUSH
23947: LD_VAR 0 3
23951: PPUSH
23952: LD_INT 1
23954: PPUSH
23955: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23959: LD_INT 20
23961: PPUSH
23962: LD_VAR 0 3
23966: PPUSH
23967: LD_INT 1
23969: PPUSH
23970: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23974: LD_INT 48
23976: PPUSH
23977: LD_VAR 0 3
23981: PPUSH
23982: LD_INT 1
23984: PPUSH
23985: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23989: LD_INT 49
23991: PPUSH
23992: LD_VAR 0 3
23996: PPUSH
23997: LD_INT 1
23999: PPUSH
24000: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
24004: LD_INT 50
24006: PPUSH
24007: LD_VAR 0 3
24011: PPUSH
24012: LD_INT 1
24014: PPUSH
24015: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24019: LD_INT 69
24021: PPUSH
24022: LD_VAR 0 3
24026: PPUSH
24027: LD_INT 1
24029: PPUSH
24030: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24034: LD_INT 39
24036: PPUSH
24037: LD_VAR 0 3
24041: PPUSH
24042: LD_INT 1
24044: PPUSH
24045: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24049: LD_INT 34
24051: PPUSH
24052: LD_VAR 0 3
24056: PPUSH
24057: LD_INT 1
24059: PPUSH
24060: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24064: LD_INT 42
24066: PPUSH
24067: LD_VAR 0 3
24071: PPUSH
24072: LD_INT 1
24074: PPUSH
24075: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24079: LD_INT 44
24081: PPUSH
24082: LD_VAR 0 3
24086: PPUSH
24087: LD_INT 1
24089: PPUSH
24090: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24094: LD_INT 41
24096: PPUSH
24097: LD_VAR 0 3
24101: PPUSH
24102: LD_INT 1
24104: PPUSH
24105: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
24109: LD_INT 13
24111: PPUSH
24112: LD_VAR 0 3
24116: PPUSH
24117: LD_INT 1
24119: PPUSH
24120: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24124: LD_INT 40
24126: PPUSH
24127: LD_VAR 0 3
24131: PPUSH
24132: LD_INT 1
24134: PPUSH
24135: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24139: LD_INT 43
24141: PPUSH
24142: LD_VAR 0 3
24146: PPUSH
24147: LD_INT 1
24149: PPUSH
24150: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24154: LD_INT 70
24156: PPUSH
24157: LD_VAR 0 3
24161: PPUSH
24162: LD_INT 1
24164: PPUSH
24165: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
24169: LD_INT 23
24171: PPUSH
24172: LD_VAR 0 3
24176: PPUSH
24177: LD_INT 1
24179: PPUSH
24180: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24184: LD_INT 51
24186: PPUSH
24187: LD_VAR 0 3
24191: PPUSH
24192: LD_INT 1
24194: PPUSH
24195: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24199: LD_INT 52
24201: PPUSH
24202: LD_VAR 0 3
24206: PPUSH
24207: LD_INT 1
24209: PPUSH
24210: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24214: LD_INT 6
24216: PPUSH
24217: LD_VAR 0 3
24221: PPUSH
24222: LD_INT 1
24224: PPUSH
24225: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24229: LD_INT 15
24231: PPUSH
24232: LD_VAR 0 3
24236: PPUSH
24237: LD_INT 1
24239: PPUSH
24240: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24244: LD_INT 7
24246: PPUSH
24247: LD_VAR 0 3
24251: PPUSH
24252: LD_INT 1
24254: PPUSH
24255: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24259: LD_INT 12
24261: PPUSH
24262: LD_VAR 0 3
24266: PPUSH
24267: LD_INT 1
24269: PPUSH
24270: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
24274: LD_INT 10
24276: PPUSH
24277: LD_VAR 0 3
24281: PPUSH
24282: LD_INT 1
24284: PPUSH
24285: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24289: LD_INT 17
24291: PPUSH
24292: LD_VAR 0 3
24296: PPUSH
24297: LD_INT 1
24299: PPUSH
24300: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24304: LD_INT 18
24306: PPUSH
24307: LD_VAR 0 3
24311: PPUSH
24312: LD_INT 1
24314: PPUSH
24315: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24319: LD_INT 60
24321: PPUSH
24322: LD_VAR 0 3
24326: PPUSH
24327: LD_INT 1
24329: PPUSH
24330: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
24334: LD_INT 61
24336: PPUSH
24337: LD_VAR 0 3
24341: PPUSH
24342: LD_INT 1
24344: PPUSH
24345: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24349: LD_INT 32
24351: PPUSH
24352: LD_VAR 0 3
24356: PPUSH
24357: LD_INT 1
24359: PPUSH
24360: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
24364: LD_INT 27
24366: PPUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: LD_INT 1
24374: PPUSH
24375: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
24379: LD_INT 36
24381: PPUSH
24382: LD_VAR 0 3
24386: PPUSH
24387: LD_INT 1
24389: PPUSH
24390: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
24394: LD_INT 33
24396: PPUSH
24397: LD_VAR 0 3
24401: PPUSH
24402: LD_INT 1
24404: PPUSH
24405: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24409: LD_INT 9
24411: PPUSH
24412: LD_VAR 0 3
24416: PPUSH
24417: LD_INT 1
24419: PPUSH
24420: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
24424: LD_INT 38
24426: PPUSH
24427: LD_VAR 0 3
24431: PPUSH
24432: LD_INT 1
24434: PPUSH
24435: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24439: LD_INT 57
24441: PPUSH
24442: LD_VAR 0 3
24446: PPUSH
24447: LD_INT 1
24449: PPUSH
24450: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
24454: LD_INT 58
24456: PPUSH
24457: LD_VAR 0 3
24461: PPUSH
24462: LD_INT 1
24464: PPUSH
24465: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
24469: LD_INT 28
24471: PPUSH
24472: LD_VAR 0 3
24476: PPUSH
24477: LD_INT 1
24479: PPUSH
24480: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
24484: LD_INT 29
24486: PPUSH
24487: LD_VAR 0 3
24491: PPUSH
24492: LD_INT 1
24494: PPUSH
24495: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24499: LD_INT 30
24501: PPUSH
24502: LD_VAR 0 3
24506: PPUSH
24507: LD_INT 1
24509: PPUSH
24510: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24514: LD_INT 37
24516: PPUSH
24517: LD_VAR 0 3
24521: PPUSH
24522: LD_INT 1
24524: PPUSH
24525: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24529: LD_INT 63
24531: PPUSH
24532: LD_VAR 0 3
24536: PPUSH
24537: LD_INT 1
24539: PPUSH
24540: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
24544: LD_INT 64
24546: PPUSH
24547: LD_VAR 0 3
24551: PPUSH
24552: LD_INT 1
24554: PPUSH
24555: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24559: LD_INT 3
24561: PPUSH
24562: LD_VAR 0 3
24566: PPUSH
24567: LD_INT 1
24569: PPUSH
24570: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24574: LD_INT 4
24576: PPUSH
24577: LD_VAR 0 3
24581: PPUSH
24582: LD_INT 1
24584: PPUSH
24585: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24589: LD_INT 5
24591: PPUSH
24592: LD_VAR 0 3
24596: PPUSH
24597: LD_INT 1
24599: PPUSH
24600: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
24604: LD_INT 8
24606: PPUSH
24607: LD_VAR 0 3
24611: PPUSH
24612: LD_INT 1
24614: PPUSH
24615: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24619: LD_INT 66
24621: PPUSH
24622: LD_VAR 0 3
24626: PPUSH
24627: LD_INT 1
24629: PPUSH
24630: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
24634: LD_INT 67
24636: PPUSH
24637: LD_VAR 0 3
24641: PPUSH
24642: LD_INT 1
24644: PPUSH
24645: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24649: LD_INT 21
24651: PPUSH
24652: LD_VAR 0 3
24656: PPUSH
24657: LD_INT 1
24659: PPUSH
24660: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24664: LD_INT 22
24666: PPUSH
24667: LD_VAR 0 3
24671: PPUSH
24672: LD_INT 1
24674: PPUSH
24675: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24679: LD_INT 19
24681: PPUSH
24682: LD_VAR 0 3
24686: PPUSH
24687: LD_INT 1
24689: PPUSH
24690: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
24694: LD_INT 26
24696: PPUSH
24697: LD_VAR 0 3
24701: PPUSH
24702: LD_INT 1
24704: PPUSH
24705: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24709: LD_INT 54
24711: PPUSH
24712: LD_VAR 0 3
24716: PPUSH
24717: LD_INT 1
24719: PPUSH
24720: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24724: LD_INT 55
24726: PPUSH
24727: LD_VAR 0 3
24731: PPUSH
24732: LD_INT 1
24734: PPUSH
24735: CALL_OW 322
// for i = 0 to 39 do
24739: LD_ADDR_VAR 0 4
24743: PUSH
24744: DOUBLE
24745: LD_INT 0
24747: DEC
24748: ST_TO_ADDR
24749: LD_INT 39
24751: PUSH
24752: FOR_TO
24753: IFFALSE 24774
// SetRestrict ( i , side , true ) ;
24755: LD_VAR 0 4
24759: PPUSH
24760: LD_VAR 0 3
24764: PPUSH
24765: LD_INT 1
24767: PPUSH
24768: CALL_OW 324
24772: GO 24752
24774: POP
24775: POP
// end ; else
24776: GO 24853
24778: POP
// begin for i = 1 to 73 do
24779: LD_ADDR_VAR 0 4
24783: PUSH
24784: DOUBLE
24785: LD_INT 1
24787: DEC
24788: ST_TO_ADDR
24789: LD_INT 73
24791: PUSH
24792: FOR_TO
24793: IFFALSE 24814
// SetTech ( i , side , state_enabled ) ;
24795: LD_VAR 0 4
24799: PPUSH
24800: LD_VAR 0 3
24804: PPUSH
24805: LD_INT 1
24807: PPUSH
24808: CALL_OW 322
24812: GO 24792
24814: POP
24815: POP
// for i = 0 to 39 do
24816: LD_ADDR_VAR 0 4
24820: PUSH
24821: DOUBLE
24822: LD_INT 0
24824: DEC
24825: ST_TO_ADDR
24826: LD_INT 39
24828: PUSH
24829: FOR_TO
24830: IFFALSE 24851
// SetRestrict ( i , side , true ) ;
24832: LD_VAR 0 4
24836: PPUSH
24837: LD_VAR 0 3
24841: PPUSH
24842: LD_INT 1
24844: PPUSH
24845: CALL_OW 324
24849: GO 24829
24851: POP
24852: POP
// end ; end ; end ;
24853: GO 20858
24855: POP
24856: POP
// end ; end_of_file
24857: LD_VAR 0 2
24861: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
24862: LD_INT 0
24864: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
24865: LD_VAR 0 1
24869: PPUSH
24870: LD_VAR 0 2
24874: PPUSH
24875: LD_VAR 0 3
24879: PPUSH
24880: LD_INT 0
24882: PPUSH
24883: CALL 24892 0 4
// end ;
24887: LD_VAR 0 4
24891: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
24892: LD_INT 0
24894: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
24895: LD_STRING initScore({
24897: PUSH
24898: LD_VAR 0 1
24902: PUSH
24903: LD_INT 1
24905: ARRAY
24906: STR
24907: PUSH
24908: LD_STRING ,
24910: STR
24911: PUSH
24912: LD_VAR 0 1
24916: PUSH
24917: LD_INT 2
24919: ARRAY
24920: STR
24921: PUSH
24922: LD_STRING ,
24924: STR
24925: PUSH
24926: LD_VAR 0 1
24930: PUSH
24931: LD_INT 3
24933: ARRAY
24934: STR
24935: PUSH
24936: LD_STRING ,
24938: STR
24939: PUSH
24940: LD_VAR 0 1
24944: PUSH
24945: LD_INT 4
24947: ARRAY
24948: STR
24949: PUSH
24950: LD_STRING ,
24952: STR
24953: PUSH
24954: LD_VAR 0 1
24958: PUSH
24959: LD_INT 5
24961: ARRAY
24962: STR
24963: PUSH
24964: LD_STRING ,
24966: STR
24967: PUSH
24968: LD_VAR 0 1
24972: PUSH
24973: LD_INT 6
24975: ARRAY
24976: STR
24977: PUSH
24978: LD_STRING ,
24980: STR
24981: PUSH
24982: LD_VAR 0 1
24986: PUSH
24987: LD_INT 7
24989: ARRAY
24990: STR
24991: PUSH
24992: LD_STRING ,
24994: STR
24995: PUSH
24996: LD_VAR 0 1
25000: PUSH
25001: LD_INT 8
25003: ARRAY
25004: STR
25005: PUSH
25006: LD_STRING },
25008: STR
25009: PUSH
25010: LD_VAR 0 2
25014: STR
25015: PUSH
25016: LD_STRING ,
25018: STR
25019: PUSH
25020: LD_VAR 0 3
25024: STR
25025: PUSH
25026: LD_STRING ,
25028: STR
25029: PUSH
25030: LD_VAR 0 4
25034: STR
25035: PUSH
25036: LD_STRING );
25038: STR
25039: PPUSH
25040: CALL_OW 559
// end ;
25044: LD_VAR 0 5
25048: RET
// export function LScore_Reset ( ) ; begin
25049: LD_INT 0
25051: PPUSH
// ToLua ( ResetScorebar(); ) ;
25052: LD_STRING ResetScorebar();
25054: PPUSH
25055: CALL_OW 559
// end ;
25059: LD_VAR 0 1
25063: RET
// export function LScore_Delete ( ID ) ; begin
25064: LD_INT 0
25066: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
25067: LD_STRING deleteScore(
25069: PUSH
25070: LD_VAR 0 1
25074: STR
25075: PUSH
25076: LD_STRING );
25078: STR
25079: PPUSH
25080: CALL_OW 559
// end ;
25084: LD_VAR 0 2
25088: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
25089: LD_INT 0
25091: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
25092: LD_STRING AST(
25094: PUSH
25095: LD_VAR 0 1
25099: STR
25100: PUSH
25101: LD_STRING ,
25103: STR
25104: PUSH
25105: LD_VAR 0 2
25109: STR
25110: PUSH
25111: LD_STRING ,
25113: STR
25114: PUSH
25115: LD_VAR 0 3
25119: STR
25120: PUSH
25121: LD_STRING ,);
25123: STR
25124: PPUSH
25125: CALL_OW 559
// end ;
25129: LD_VAR 0 4
25133: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
25134: LD_INT 0
25136: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
25137: LD_STRING AST(
25139: PUSH
25140: LD_VAR 0 1
25144: STR
25145: PUSH
25146: LD_STRING ,
25148: STR
25149: PUSH
25150: LD_VAR 0 2
25154: STR
25155: PUSH
25156: LD_STRING ,
25158: STR
25159: PUSH
25160: LD_VAR 0 3
25164: STR
25165: PUSH
25166: LD_STRING ,
25168: STR
25169: PUSH
25170: LD_VAR 0 4
25174: STR
25175: PUSH
25176: LD_STRING );
25178: STR
25179: PPUSH
25180: CALL_OW 559
// end ;
25184: LD_VAR 0 5
25188: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
25189: LD_INT 0
25191: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
25192: LD_STRING AST(
25194: PUSH
25195: LD_VAR 0 1
25199: STR
25200: PUSH
25201: LD_STRING ,
25203: STR
25204: PUSH
25205: LD_VAR 0 2
25209: STR
25210: PUSH
25211: LD_STRING ,
25213: STR
25214: PUSH
25215: LD_VAR 0 3
25219: STR
25220: PUSH
25221: LD_STRING ,
25223: STR
25224: PUSH
25225: LD_VAR 0 4
25229: STR
25230: PUSH
25231: LD_STRING ,
25233: STR
25234: PUSH
25235: LD_VAR 0 5
25239: STR
25240: PUSH
25241: LD_STRING );
25243: STR
25244: PPUSH
25245: CALL_OW 559
// end ;
25249: LD_VAR 0 6
25253: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
25254: LD_INT 0
25256: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
25257: LD_STRING ASRT(
25259: PUSH
25260: LD_VAR 0 1
25264: STR
25265: PUSH
25266: LD_STRING ,
25268: STR
25269: PUSH
25270: LD_VAR 0 2
25274: STR
25275: PUSH
25276: LD_STRING ,
25278: STR
25279: PUSH
25280: LD_VAR 0 3
25284: STR
25285: PUSH
25286: LD_STRING ,);
25288: STR
25289: PPUSH
25290: CALL_OW 559
// end ;
25294: LD_VAR 0 4
25298: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
25299: LD_INT 0
25301: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
25302: LD_STRING ASRT(
25304: PUSH
25305: LD_VAR 0 1
25309: STR
25310: PUSH
25311: LD_STRING ,
25313: STR
25314: PUSH
25315: LD_VAR 0 2
25319: STR
25320: PUSH
25321: LD_STRING ,
25323: STR
25324: PUSH
25325: LD_VAR 0 3
25329: STR
25330: PUSH
25331: LD_STRING ,
25333: STR
25334: PUSH
25335: LD_VAR 0 4
25339: STR
25340: PUSH
25341: LD_STRING );
25343: STR
25344: PPUSH
25345: CALL_OW 559
// end ;
25349: LD_VAR 0 5
25353: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
25354: LD_INT 0
25356: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
25357: LD_STRING ASRT(
25359: PUSH
25360: LD_VAR 0 1
25364: STR
25365: PUSH
25366: LD_STRING ,
25368: STR
25369: PUSH
25370: LD_VAR 0 2
25374: STR
25375: PUSH
25376: LD_STRING ,
25378: STR
25379: PUSH
25380: LD_VAR 0 3
25384: STR
25385: PUSH
25386: LD_STRING ,
25388: STR
25389: PUSH
25390: LD_VAR 0 4
25394: STR
25395: PUSH
25396: LD_STRING ,
25398: STR
25399: PUSH
25400: LD_VAR 0 5
25404: STR
25405: PUSH
25406: LD_STRING );
25408: STR
25409: PPUSH
25410: CALL_OW 559
// end ;
25414: LD_VAR 0 6
25418: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
25419: LD_INT 0
25421: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
25422: LD_STRING UST(
25424: PUSH
25425: LD_VAR 0 1
25429: STR
25430: PUSH
25431: LD_STRING ,
25433: STR
25434: PUSH
25435: LD_VAR 0 2
25439: STR
25440: PUSH
25441: LD_STRING );
25443: STR
25444: PPUSH
25445: CALL_OW 559
// end ;
25449: LD_VAR 0 3
25453: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
25454: LD_INT 0
25456: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
25457: LD_STRING UST(
25459: PUSH
25460: LD_VAR 0 1
25464: STR
25465: PUSH
25466: LD_STRING ,
25468: STR
25469: PUSH
25470: LD_VAR 0 2
25474: STR
25475: PUSH
25476: LD_STRING ,
25478: STR
25479: PUSH
25480: LD_VAR 0 3
25484: STR
25485: PUSH
25486: LD_STRING );
25488: STR
25489: PPUSH
25490: CALL_OW 559
// end ;
25494: LD_VAR 0 4
25498: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
25499: LD_INT 0
25501: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
25502: LD_STRING CCST(
25504: PUSH
25505: LD_VAR 0 1
25509: STR
25510: PUSH
25511: LD_STRING ,{
25513: STR
25514: PUSH
25515: LD_VAR 0 2
25519: STR
25520: PUSH
25521: LD_STRING ,
25523: STR
25524: PUSH
25525: LD_VAR 0 3
25529: STR
25530: PUSH
25531: LD_STRING ,
25533: STR
25534: PUSH
25535: LD_VAR 0 4
25539: STR
25540: PUSH
25541: LD_STRING });
25543: STR
25544: PPUSH
25545: CALL_OW 559
// end ;
25549: LD_VAR 0 5
25553: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
25554: LD_INT 0
25556: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
25557: LD_STRING CCST(
25559: PUSH
25560: LD_VAR 0 1
25564: STR
25565: PUSH
25566: LD_STRING ,
25568: STR
25569: PUSH
25570: LD_VAR 0 2
25574: STR
25575: PUSH
25576: LD_STRING );
25578: STR
25579: PPUSH
25580: CALL_OW 559
// end ;
25584: LD_VAR 0 3
25588: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
25589: LD_INT 0
25591: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
25592: LD_STRING ASSP(
25594: PUSH
25595: LD_VAR 0 1
25599: STR
25600: PUSH
25601: LD_STRING ,
25603: STR
25604: PUSH
25605: LD_VAR 0 2
25609: STR
25610: PUSH
25611: LD_STRING ,
25613: STR
25614: PUSH
25615: LD_VAR 0 3
25619: STR
25620: PUSH
25621: LD_STRING ,);
25623: STR
25624: PPUSH
25625: CALL_OW 559
// end ;
25629: LD_VAR 0 4
25633: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
25634: LD_INT 0
25636: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
25637: LD_STRING ASSP(
25639: PUSH
25640: LD_VAR 0 1
25644: STR
25645: PUSH
25646: LD_STRING ,
25648: STR
25649: PUSH
25650: LD_VAR 0 2
25654: STR
25655: PUSH
25656: LD_STRING ,
25658: STR
25659: PUSH
25660: LD_VAR 0 3
25664: STR
25665: PUSH
25666: LD_STRING ,
25668: STR
25669: PUSH
25670: LD_VAR 0 4
25674: STR
25675: PUSH
25676: LD_STRING );
25678: STR
25679: PPUSH
25680: CALL_OW 559
// end ;
25684: LD_VAR 0 5
25688: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
25689: LD_INT 0
25691: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
25692: LD_STRING ASSP(
25694: PUSH
25695: LD_VAR 0 1
25699: STR
25700: PUSH
25701: LD_STRING ,
25703: STR
25704: PUSH
25705: LD_VAR 0 2
25709: STR
25710: PUSH
25711: LD_STRING ,
25713: STR
25714: PUSH
25715: LD_VAR 0 3
25719: STR
25720: PUSH
25721: LD_STRING ,
25723: STR
25724: PUSH
25725: LD_VAR 0 4
25729: STR
25730: PUSH
25731: LD_STRING ,
25733: STR
25734: PUSH
25735: LD_VAR 0 5
25739: STR
25740: PUSH
25741: LD_STRING );
25743: STR
25744: PPUSH
25745: CALL_OW 559
// end ;
25749: LD_VAR 0 6
25753: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
25754: LD_INT 0
25756: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
25757: LD_STRING ASRSP(
25759: PUSH
25760: LD_VAR 0 1
25764: STR
25765: PUSH
25766: LD_STRING ,
25768: STR
25769: PUSH
25770: LD_VAR 0 2
25774: STR
25775: PUSH
25776: LD_STRING ,
25778: STR
25779: PUSH
25780: LD_VAR 0 3
25784: STR
25785: PUSH
25786: LD_STRING ,);
25788: STR
25789: PPUSH
25790: CALL_OW 559
// end ;
25794: LD_VAR 0 4
25798: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
25799: LD_INT 0
25801: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
25802: LD_STRING ASRSP(
25804: PUSH
25805: LD_VAR 0 1
25809: STR
25810: PUSH
25811: LD_STRING ,
25813: STR
25814: PUSH
25815: LD_VAR 0 2
25819: STR
25820: PUSH
25821: LD_STRING ,
25823: STR
25824: PUSH
25825: LD_VAR 0 3
25829: STR
25830: PUSH
25831: LD_STRING ,
25833: STR
25834: PUSH
25835: LD_VAR 0 4
25839: STR
25840: PUSH
25841: LD_STRING );
25843: STR
25844: PPUSH
25845: CALL_OW 559
// end ;
25849: LD_VAR 0 5
25853: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
25854: LD_INT 0
25856: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
25857: LD_STRING ASRSP(
25859: PUSH
25860: LD_VAR 0 1
25864: STR
25865: PUSH
25866: LD_STRING ,
25868: STR
25869: PUSH
25870: LD_VAR 0 2
25874: STR
25875: PUSH
25876: LD_STRING ,
25878: STR
25879: PUSH
25880: LD_VAR 0 3
25884: STR
25885: PUSH
25886: LD_STRING ,
25888: STR
25889: PUSH
25890: LD_VAR 0 4
25894: STR
25895: PUSH
25896: LD_STRING ,
25898: STR
25899: PUSH
25900: LD_VAR 0 5
25904: STR
25905: PUSH
25906: LD_STRING );
25908: STR
25909: PPUSH
25910: CALL_OW 559
// end ;
25914: LD_VAR 0 6
25918: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
25919: LD_INT 0
25921: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
25922: LD_STRING USSP(
25924: PUSH
25925: LD_VAR 0 1
25929: STR
25930: PUSH
25931: LD_STRING ,
25933: STR
25934: PUSH
25935: LD_VAR 0 2
25939: STR
25940: PUSH
25941: LD_STRING );
25943: STR
25944: PPUSH
25945: CALL_OW 559
// end ;
25949: LD_VAR 0 3
25953: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
25954: LD_INT 0
25956: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
25957: LD_STRING USSP(
25959: PUSH
25960: LD_VAR 0 1
25964: STR
25965: PUSH
25966: LD_STRING ,
25968: STR
25969: PUSH
25970: LD_VAR 0 2
25974: STR
25975: PUSH
25976: LD_STRING ,
25978: STR
25979: PUSH
25980: LD_VAR 0 3
25984: STR
25985: PUSH
25986: LD_STRING );
25988: STR
25989: PPUSH
25990: CALL_OW 559
// end ;
25994: LD_VAR 0 4
25998: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
25999: LD_INT 0
26001: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
26002: LD_STRING CCSSP(
26004: PUSH
26005: LD_VAR 0 1
26009: STR
26010: PUSH
26011: LD_STRING ,{
26013: STR
26014: PUSH
26015: LD_VAR 0 2
26019: STR
26020: PUSH
26021: LD_STRING ,
26023: STR
26024: PUSH
26025: LD_VAR 0 3
26029: STR
26030: PUSH
26031: LD_STRING ,
26033: STR
26034: PUSH
26035: LD_VAR 0 4
26039: STR
26040: PUSH
26041: LD_STRING });
26043: STR
26044: PPUSH
26045: CALL_OW 559
// end ;
26049: LD_VAR 0 5
26053: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
26054: LD_INT 0
26056: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
26057: LD_STRING CCSSP(
26059: PUSH
26060: LD_VAR 0 1
26064: STR
26065: PUSH
26066: LD_STRING ,
26068: STR
26069: PUSH
26070: LD_VAR 0 2
26074: STR
26075: PUSH
26076: LD_STRING );
26078: STR
26079: PPUSH
26080: CALL_OW 559
// end ;
26084: LD_VAR 0 3
26088: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
26089: LD_INT 0
26091: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
26092: LD_STRING ASP(
26094: PUSH
26095: LD_VAR 0 1
26099: STR
26100: PUSH
26101: LD_STRING ,
26103: STR
26104: PUSH
26105: LD_VAR 0 2
26109: STR
26110: PUSH
26111: LD_STRING ,
26113: STR
26114: PUSH
26115: LD_VAR 0 3
26119: STR
26120: PUSH
26121: LD_STRING );
26123: STR
26124: PPUSH
26125: CALL_OW 559
// end ;
26129: LD_VAR 0 4
26133: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
26134: LD_INT 0
26136: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
26137: LD_STRING USP(
26139: PUSH
26140: LD_VAR 0 1
26144: STR
26145: PUSH
26146: LD_STRING ,
26148: STR
26149: PUSH
26150: LD_VAR 0 2
26154: STR
26155: PUSH
26156: LD_STRING ,
26158: STR
26159: PUSH
26160: LD_VAR 0 3
26164: STR
26165: PUSH
26166: LD_STRING );
26168: STR
26169: PPUSH
26170: CALL_OW 559
// end ;
26174: LD_VAR 0 4
26178: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
26179: LD_INT 0
26181: PPUSH
26182: PPUSH
// for i = 1 to 8 do
26183: LD_ADDR_VAR 0 4
26187: PUSH
26188: DOUBLE
26189: LD_INT 1
26191: DEC
26192: ST_TO_ADDR
26193: LD_INT 8
26195: PUSH
26196: FOR_TO
26197: IFFALSE 26244
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
26199: LD_STRING USP(
26201: PUSH
26202: LD_VAR 0 1
26206: STR
26207: PUSH
26208: LD_STRING ,
26210: STR
26211: PUSH
26212: LD_VAR 0 4
26216: STR
26217: PUSH
26218: LD_STRING ,
26220: STR
26221: PUSH
26222: LD_VAR 0 2
26226: PUSH
26227: LD_VAR 0 4
26231: ARRAY
26232: STR
26233: PUSH
26234: LD_STRING );
26236: STR
26237: PPUSH
26238: CALL_OW 559
26242: GO 26196
26244: POP
26245: POP
// end ;
26246: LD_VAR 0 3
26250: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
26251: LD_INT 0
26253: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
26254: LD_STRING ASC(
26256: PUSH
26257: LD_VAR 0 1
26261: STR
26262: PUSH
26263: LD_STRING ,
26265: STR
26266: PUSH
26267: LD_VAR 0 2
26271: STR
26272: PUSH
26273: LD_STRING ,
26275: STR
26276: PUSH
26277: LD_VAR 0 3
26281: STR
26282: PUSH
26283: LD_STRING ,
26285: STR
26286: PUSH
26287: LD_VAR 0 4
26291: STR
26292: PUSH
26293: LD_STRING );
26295: STR
26296: PPUSH
26297: CALL_OW 559
// end ;
26301: LD_VAR 0 5
26305: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
26306: LD_INT 0
26308: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
26309: LD_STRING USC(
26311: PUSH
26312: LD_VAR 0 1
26316: STR
26317: PUSH
26318: LD_STRING ,{
26320: STR
26321: PUSH
26322: LD_VAR 0 2
26326: PUSH
26327: LD_INT 1
26329: ARRAY
26330: STR
26331: PUSH
26332: LD_STRING ,
26334: STR
26335: PUSH
26336: LD_VAR 0 2
26340: PUSH
26341: LD_INT 2
26343: ARRAY
26344: STR
26345: PUSH
26346: LD_STRING ,
26348: STR
26349: PUSH
26350: LD_VAR 0 2
26354: PUSH
26355: LD_INT 3
26357: ARRAY
26358: STR
26359: PUSH
26360: LD_STRING ,
26362: STR
26363: PUSH
26364: LD_VAR 0 2
26368: PUSH
26369: LD_INT 4
26371: ARRAY
26372: STR
26373: PUSH
26374: LD_STRING ,
26376: STR
26377: PUSH
26378: LD_VAR 0 2
26382: PUSH
26383: LD_INT 5
26385: ARRAY
26386: STR
26387: PUSH
26388: LD_STRING ,
26390: STR
26391: PUSH
26392: LD_VAR 0 2
26396: PUSH
26397: LD_INT 6
26399: ARRAY
26400: STR
26401: PUSH
26402: LD_STRING ,
26404: STR
26405: PUSH
26406: LD_VAR 0 2
26410: PUSH
26411: LD_INT 7
26413: ARRAY
26414: STR
26415: PUSH
26416: LD_STRING ,
26418: STR
26419: PUSH
26420: LD_VAR 0 2
26424: PUSH
26425: LD_INT 8
26427: ARRAY
26428: STR
26429: PUSH
26430: LD_STRING });
26432: STR
26433: PPUSH
26434: CALL_OW 559
// end ; end_of_file
26438: LD_VAR 0 3
26442: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
26443: LD_INT 0
26445: PPUSH
26446: PPUSH
26447: PPUSH
26448: PPUSH
26449: PPUSH
26450: PPUSH
26451: PPUSH
26452: PPUSH
26453: PPUSH
// for i := 1 to 8 do
26454: LD_ADDR_VAR 0 2
26458: PUSH
26459: DOUBLE
26460: LD_INT 1
26462: DEC
26463: ST_TO_ADDR
26464: LD_INT 8
26466: PUSH
26467: FOR_TO
26468: IFFALSE 26852
// begin if Side_Positions [ i ] then
26470: LD_EXP 23
26474: PUSH
26475: LD_VAR 0 2
26479: ARRAY
26480: IFFALSE 26850
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
26482: LD_ADDR_VAR 0 7
26486: PUSH
26487: LD_INT 22
26489: PUSH
26490: LD_VAR 0 2
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 21
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PPUSH
26513: CALL_OW 69
26517: PUSH
26518: LD_INT 0
26520: PLUS
26521: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26522: LD_ADDR_VAR 0 9
26526: PUSH
26527: LD_INT 22
26529: PUSH
26530: LD_VAR 0 2
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 2
26541: PUSH
26542: LD_INT 30
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 30
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: LIST
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PPUSH
26571: CALL_OW 69
26575: ST_TO_ADDR
// crates := 0 ;
26576: LD_ADDR_VAR 0 4
26580: PUSH
26581: LD_INT 0
26583: ST_TO_ADDR
// oil := 0 ;
26584: LD_ADDR_VAR 0 5
26588: PUSH
26589: LD_INT 0
26591: ST_TO_ADDR
// sib := 0 ;
26592: LD_ADDR_VAR 0 6
26596: PUSH
26597: LD_INT 0
26599: ST_TO_ADDR
// if bases then
26600: LD_VAR 0 9
26604: IFFALSE 26710
// begin for j in bases do
26606: LD_ADDR_VAR 0 3
26610: PUSH
26611: LD_VAR 0 9
26615: PUSH
26616: FOR_IN
26617: IFFALSE 26708
// begin base := GetBase ( j ) ;
26619: LD_ADDR_VAR 0 8
26623: PUSH
26624: LD_VAR 0 3
26628: PPUSH
26629: CALL_OW 274
26633: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
26634: LD_ADDR_VAR 0 4
26638: PUSH
26639: LD_VAR 0 4
26643: PUSH
26644: LD_VAR 0 8
26648: PPUSH
26649: LD_INT 1
26651: PPUSH
26652: CALL_OW 275
26656: PLUS
26657: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
26658: LD_ADDR_VAR 0 5
26662: PUSH
26663: LD_VAR 0 5
26667: PUSH
26668: LD_VAR 0 8
26672: PPUSH
26673: LD_INT 2
26675: PPUSH
26676: CALL_OW 275
26680: PLUS
26681: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
26682: LD_ADDR_VAR 0 6
26686: PUSH
26687: LD_VAR 0 6
26691: PUSH
26692: LD_VAR 0 8
26696: PPUSH
26697: LD_INT 3
26699: PPUSH
26700: CALL_OW 275
26704: PLUS
26705: ST_TO_ADDR
// end ;
26706: GO 26616
26708: POP
26709: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
26710: LD_STRING setSpecText(
26712: PUSH
26713: LD_VAR 0 2
26717: STR
26718: PUSH
26719: LD_STRING ,
26721: STR
26722: PUSH
26723: LD_INT 2
26725: STR
26726: PUSH
26727: LD_STRING ,
26729: STR
26730: PUSH
26731: LD_VAR 0 4
26735: STR
26736: PUSH
26737: LD_STRING )
26739: STR
26740: PPUSH
26741: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
26745: LD_STRING setSpecText(
26747: PUSH
26748: LD_VAR 0 2
26752: STR
26753: PUSH
26754: LD_STRING ,
26756: STR
26757: PUSH
26758: LD_INT 3
26760: STR
26761: PUSH
26762: LD_STRING ,
26764: STR
26765: PUSH
26766: LD_VAR 0 5
26770: STR
26771: PUSH
26772: LD_STRING )
26774: STR
26775: PPUSH
26776: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
26780: LD_STRING setSpecText(
26782: PUSH
26783: LD_VAR 0 2
26787: STR
26788: PUSH
26789: LD_STRING ,
26791: STR
26792: PUSH
26793: LD_INT 4
26795: STR
26796: PUSH
26797: LD_STRING ,
26799: STR
26800: PUSH
26801: LD_VAR 0 6
26805: STR
26806: PUSH
26807: LD_STRING )
26809: STR
26810: PPUSH
26811: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
26815: LD_STRING setSpecText(
26817: PUSH
26818: LD_VAR 0 2
26822: STR
26823: PUSH
26824: LD_STRING ,
26826: STR
26827: PUSH
26828: LD_INT 5
26830: STR
26831: PUSH
26832: LD_STRING ,
26834: STR
26835: PUSH
26836: LD_VAR 0 7
26840: STR
26841: PUSH
26842: LD_STRING )
26844: STR
26845: PPUSH
26846: CALL_OW 559
// end ; end ;
26850: GO 26467
26852: POP
26853: POP
// end ;
26854: LD_VAR 0 1
26858: RET
// every 0 0$1 do
26859: GO 26861
26861: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
26862: LD_STRING setSpecLogoNumber(
26864: PUSH
26865: LD_INT 2
26867: STR
26868: PUSH
26869: LD_STRING ,
26871: STR
26872: PUSH
26873: LD_INT 1
26875: STR
26876: PUSH
26877: LD_STRING )
26879: STR
26880: PPUSH
26881: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
26885: LD_STRING setSpecLogoNumber(
26887: PUSH
26888: LD_INT 3
26890: STR
26891: PUSH
26892: LD_STRING ,
26894: STR
26895: PUSH
26896: LD_INT 2
26898: STR
26899: PUSH
26900: LD_STRING )
26902: STR
26903: PPUSH
26904: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
26908: LD_STRING setSpecLogoNumber(
26910: PUSH
26911: LD_INT 4
26913: STR
26914: PUSH
26915: LD_STRING ,
26917: STR
26918: PUSH
26919: LD_INT 3
26921: STR
26922: PUSH
26923: LD_STRING )
26925: STR
26926: PPUSH
26927: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
26931: LD_STRING setSpecLogoNumber(
26933: PUSH
26934: LD_INT 5
26936: STR
26937: PUSH
26938: LD_STRING ,
26940: STR
26941: PUSH
26942: LD_INT 4
26944: STR
26945: PUSH
26946: LD_STRING )
26948: STR
26949: PPUSH
26950: CALL_OW 559
// end ;
26954: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
26955: LD_INT 2
26957: PUSH
26958: LD_INT 30
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 30
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: LIST
26982: PPUSH
26983: CALL_OW 69
26987: IFFALSE 26997
26989: GO 26991
26991: DISABLE
// begin enable ;
26992: ENABLE
// UpdateSpectatorBar ;
26993: CALL 26443 0 0
// end ; end_of_file
26997: END
// var respawn , inqueue ; export function init_respawning ; begin
26998: LD_INT 0
27000: PPUSH
// respawn := Rand ( 1 , 8 ) ;
27001: LD_ADDR_LOC 34
27005: PUSH
27006: LD_INT 1
27008: PPUSH
27009: LD_INT 8
27011: PPUSH
27012: CALL_OW 12
27016: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
27017: LD_ADDR_LOC 35
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: LD_INT 0
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: LD_INT 0
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: LD_INT 0
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: ST_TO_ADDR
// end ;
27056: LD_VAR 0 1
27060: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
27061: GO 27063
27063: DISABLE
27064: LD_INT 0
27066: PPUSH
27067: PPUSH
27068: PPUSH
// begin if respawning_time_max = 0 then
27069: LD_EXP 17
27073: PUSH
27074: LD_INT 0
27076: EQUAL
27077: IFFALSE 27081
// exit ;
27079: GO 27489
// if respawn = 8 then
27081: LD_LOC 34
27085: PUSH
27086: LD_INT 8
27088: EQUAL
27089: IFFALSE 27101
// respawn := 1 else
27091: LD_ADDR_LOC 34
27095: PUSH
27096: LD_INT 1
27098: ST_TO_ADDR
27099: GO 27115
// respawn := respawn + 1 ;
27101: LD_ADDR_LOC 34
27105: PUSH
27106: LD_LOC 34
27110: PUSH
27111: LD_INT 1
27113: PLUS
27114: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
27115: LD_EXP 23
27119: PUSH
27120: LD_LOC 34
27124: ARRAY
27125: PUSH
27126: LD_LOC 35
27130: PUSH
27131: LD_LOC 34
27135: ARRAY
27136: NOT
27137: AND
27138: IFFALSE 27488
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
27140: LD_ADDR_VAR 0 1
27144: PUSH
27145: LD_INT 21
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 22
27157: PUSH
27158: LD_LOC 34
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 3
27169: PUSH
27170: LD_INT 23
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: PPUSH
27186: CALL_OW 69
27190: ST_TO_ADDR
// if n < number_of_people then
27191: LD_VAR 0 1
27195: PUSH
27196: LD_EXP 9
27200: LESS
27201: IFFALSE 27485
// begin aktresp := respawn ;
27203: LD_ADDR_VAR 0 3
27207: PUSH
27208: LD_LOC 34
27212: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
27213: LD_ADDR_LOC 35
27217: PUSH
27218: LD_LOC 35
27222: PPUSH
27223: LD_VAR 0 3
27227: PPUSH
27228: LD_INT 1
27230: PPUSH
27231: CALL_OW 1
27235: ST_TO_ADDR
// enable ;
27236: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
27237: LD_EXP 16
27241: PPUSH
27242: LD_EXP 17
27246: PPUSH
27247: CALL_OW 12
27251: PPUSH
27252: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
27256: LD_ADDR_LOC 35
27260: PUSH
27261: LD_LOC 35
27265: PPUSH
27266: LD_VAR 0 3
27270: PPUSH
27271: LD_INT 0
27273: PPUSH
27274: CALL_OW 1
27278: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
27279: LD_ADDR_VAR 0 2
27283: PUSH
27284: LD_INT 21
27286: PUSH
27287: LD_INT 3
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 2
27296: PUSH
27297: LD_INT 30
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 30
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 50
27324: PUSH
27325: EMPTY
27326: LIST
27327: PUSH
27328: LD_INT 22
27330: PUSH
27331: LD_VAR 0 3
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: PPUSH
27346: CALL_OW 69
27350: ST_TO_ADDR
// if dep = 0 then
27351: LD_VAR 0 2
27355: PUSH
27356: LD_INT 0
27358: EQUAL
27359: IFFALSE 27363
// exit ;
27361: GO 27489
// hc_name :=  ;
27363: LD_ADDR_OWVAR 26
27367: PUSH
27368: LD_STRING 
27370: ST_TO_ADDR
// hc_importance := 0 ;
27371: LD_ADDR_OWVAR 32
27375: PUSH
27376: LD_INT 0
27378: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
27379: LD_INT 0
27381: PPUSH
27382: LD_INT 0
27384: PPUSH
27385: LD_EXP 10
27389: PUSH
27390: LD_INT 2
27392: DIV
27393: PPUSH
27394: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
27398: LD_ADDR_OWVAR 21
27402: PUSH
27403: LD_EXP 24
27407: PUSH
27408: LD_VAR 0 3
27412: ARRAY
27413: ST_TO_ADDR
// uc_side := aktresp ;
27414: LD_ADDR_OWVAR 20
27418: PUSH
27419: LD_VAR 0 3
27423: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
27424: LD_ADDR_VAR 0 2
27428: PUSH
27429: LD_VAR 0 2
27433: PUSH
27434: LD_INT 1
27436: PPUSH
27437: LD_VAR 0 2
27441: PPUSH
27442: CALL_OW 12
27446: ARRAY
27447: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
27448: CALL_OW 44
27452: PPUSH
27453: LD_VAR 0 2
27457: PPUSH
27458: CALL_OW 250
27462: PPUSH
27463: LD_VAR 0 2
27467: PPUSH
27468: CALL_OW 251
27472: PPUSH
27473: LD_INT 7
27475: PPUSH
27476: LD_INT 1
27478: PPUSH
27479: CALL_OW 50
// end else
27483: GO 27486
// enable ;
27485: ENABLE
// end else
27486: GO 27489
// enable ;
27488: ENABLE
// end ; end_of_file
27489: PPOPN 3
27491: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
27492: LD_INT 0
27494: PPUSH
27495: PPUSH
27496: PPUSH
// BuildUpTime_Delay = 0 ;
27497: LD_ADDR_EXP 68
27501: PUSH
27502: LD_INT 0
27504: ST_TO_ADDR
// if not def_builduptime then
27505: LD_EXP 61
27509: NOT
27510: IFFALSE 27514
// exit ;
27512: GO 27697
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
27514: LD_ADDR_EXP 68
27518: PUSH
27519: LD_INT 8400
27521: PUSH
27522: LD_INT 2100
27524: PUSH
27525: LD_EXP 61
27529: MUL
27530: PLUS
27531: ST_TO_ADDR
// BuildUpTimeActive := true ;
27532: LD_ADDR_EXP 67
27536: PUSH
27537: LD_INT 1
27539: ST_TO_ADDR
// for i := 1 to 8 do
27540: LD_ADDR_VAR 0 2
27544: PUSH
27545: DOUBLE
27546: LD_INT 1
27548: DEC
27549: ST_TO_ADDR
27550: LD_INT 8
27552: PUSH
27553: FOR_TO
27554: IFFALSE 27695
// if Side_Positions [ i ] then
27556: LD_EXP 23
27560: PUSH
27561: LD_VAR 0 2
27565: ARRAY
27566: IFFALSE 27693
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
27568: LD_EXP 66
27572: PUSH
27573: LD_EXP 23
27577: PUSH
27578: LD_VAR 0 2
27582: ARRAY
27583: ARRAY
27584: PPUSH
27585: LD_INT 5
27587: PPUSH
27588: CALL_OW 424
// for j := 1 to 8 do
27592: LD_ADDR_VAR 0 3
27596: PUSH
27597: DOUBLE
27598: LD_INT 1
27600: DEC
27601: ST_TO_ADDR
27602: LD_INT 8
27604: PUSH
27605: FOR_TO
27606: IFFALSE 27691
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
27608: LD_EXP 23
27612: PUSH
27613: LD_VAR 0 3
27617: ARRAY
27618: PUSH
27619: LD_EXP 21
27623: PUSH
27624: LD_VAR 0 2
27628: ARRAY
27629: PUSH
27630: LD_EXP 21
27634: PUSH
27635: LD_VAR 0 3
27639: ARRAY
27640: NONEQUAL
27641: PUSH
27642: LD_EXP 25
27646: NOT
27647: PUSH
27648: LD_VAR 0 2
27652: PUSH
27653: LD_VAR 0 3
27657: NONEQUAL
27658: AND
27659: OR
27660: AND
27661: IFFALSE 27689
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
27663: LD_VAR 0 3
27667: PPUSH
27668: LD_EXP 66
27672: PUSH
27673: LD_EXP 23
27677: PUSH
27678: LD_VAR 0 2
27682: ARRAY
27683: ARRAY
27684: PPUSH
27685: CALL_OW 333
27689: GO 27605
27691: POP
27692: POP
// end ;
27693: GO 27553
27695: POP
27696: POP
// end ;
27697: LD_VAR 0 1
27701: RET
// export function EndBuildUp ; var i , j ; begin
27702: LD_INT 0
27704: PPUSH
27705: PPUSH
27706: PPUSH
// BuildUpTimeActive := false ;
27707: LD_ADDR_EXP 67
27711: PUSH
27712: LD_INT 0
27714: ST_TO_ADDR
// for i := 1 to 8 do
27715: LD_ADDR_VAR 0 2
27719: PUSH
27720: DOUBLE
27721: LD_INT 1
27723: DEC
27724: ST_TO_ADDR
27725: LD_INT 8
27727: PUSH
27728: FOR_TO
27729: IFFALSE 27870
// if Side_Positions [ i ] then
27731: LD_EXP 23
27735: PUSH
27736: LD_VAR 0 2
27740: ARRAY
27741: IFFALSE 27868
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
27743: LD_EXP 66
27747: PUSH
27748: LD_EXP 23
27752: PUSH
27753: LD_VAR 0 2
27757: ARRAY
27758: ARRAY
27759: PPUSH
27760: LD_INT 0
27762: PPUSH
27763: CALL_OW 424
// for j := 1 to 8 do
27767: LD_ADDR_VAR 0 3
27771: PUSH
27772: DOUBLE
27773: LD_INT 1
27775: DEC
27776: ST_TO_ADDR
27777: LD_INT 8
27779: PUSH
27780: FOR_TO
27781: IFFALSE 27866
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
27783: LD_EXP 23
27787: PUSH
27788: LD_VAR 0 3
27792: ARRAY
27793: PUSH
27794: LD_EXP 21
27798: PUSH
27799: LD_VAR 0 2
27803: ARRAY
27804: PUSH
27805: LD_EXP 21
27809: PUSH
27810: LD_VAR 0 3
27814: ARRAY
27815: NONEQUAL
27816: PUSH
27817: LD_EXP 25
27821: NOT
27822: PUSH
27823: LD_VAR 0 2
27827: PUSH
27828: LD_VAR 0 3
27832: NONEQUAL
27833: AND
27834: OR
27835: AND
27836: IFFALSE 27864
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
27838: LD_VAR 0 3
27842: PPUSH
27843: LD_EXP 66
27847: PUSH
27848: LD_EXP 23
27852: PUSH
27853: LD_VAR 0 2
27857: ARRAY
27858: ARRAY
27859: PPUSH
27860: CALL_OW 334
27864: GO 27780
27866: POP
27867: POP
// end ;
27868: GO 27728
27870: POP
27871: POP
// end ;
27872: LD_VAR 0 1
27876: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
27877: LD_EXP 67
27881: IFFALSE 28056
27883: GO 27885
27885: DISABLE
27886: LD_INT 0
27888: PPUSH
27889: PPUSH
// begin for i := 1 to 8 do
27890: LD_ADDR_VAR 0 1
27894: PUSH
27895: DOUBLE
27896: LD_INT 1
27898: DEC
27899: ST_TO_ADDR
27900: LD_INT 8
27902: PUSH
27903: FOR_TO
27904: IFFALSE 28053
// if Side_Positions [ i ] then
27906: LD_EXP 23
27910: PUSH
27911: LD_VAR 0 1
27915: ARRAY
27916: IFFALSE 28051
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
27918: LD_ADDR_VAR 0 2
27922: PUSH
27923: LD_EXP 66
27927: PUSH
27928: LD_EXP 23
27932: PUSH
27933: LD_VAR 0 1
27937: ARRAY
27938: ARRAY
27939: PPUSH
27940: LD_INT 2
27942: PUSH
27943: LD_INT 21
27945: PUSH
27946: LD_INT 1
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 21
27955: PUSH
27956: LD_INT 2
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 22
27970: PUSH
27971: LD_OWVAR 2
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PPUSH
27984: CALL_OW 70
27988: PUSH
27989: FOR_IN
27990: IFFALSE 28049
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
27992: LD_EXP 21
27996: PUSH
27997: LD_VAR 0 1
28001: ARRAY
28002: PUSH
28003: LD_EXP 21
28007: PUSH
28008: LD_OWVAR 2
28012: ARRAY
28013: NONEQUAL
28014: PUSH
28015: LD_EXP 25
28019: NOT
28020: PUSH
28021: LD_VAR 0 1
28025: PUSH
28026: LD_OWVAR 2
28030: NONEQUAL
28031: AND
28032: OR
28033: IFFALSE 28047
// ComMoveToArea ( un , BuildUpEscape ) ;
28035: LD_VAR 0 2
28039: PPUSH
28040: LD_INT 24
28042: PPUSH
28043: CALL_OW 113
28047: GO 27989
28049: POP
28050: POP
28051: GO 27903
28053: POP
28054: POP
// enable ;
28055: ENABLE
// end ;
28056: PPOPN 2
28058: END
// every 0 0$1 trigger def_builduptime do
28059: LD_EXP 61
28063: IFFALSE 28089
28065: GO 28067
28067: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
28068: LD_INT 8400
28070: PUSH
28071: LD_EXP 61
28075: PUSH
28076: LD_INT 2100
28078: MUL
28079: PLUS
28080: PPUSH
28081: CALL_OW 67
// EndBuildUp ;
28085: CALL 27702 0 0
// end ;
28089: END
