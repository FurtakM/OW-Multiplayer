// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , buildUpTime_Delay , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export Position_Sides ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 50
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 24
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 22
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 25
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 27
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 23
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 3 ;
 151: LD_ADDR_EXP 50
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 24
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 25
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 23
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 28
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 29
 344: PUSH
 345: LD_EXP 22
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// for i := 1 to 8 do
 356: LD_ADDR_VAR 0 2
 360: PUSH
 361: DOUBLE
 362: LD_INT 1
 364: DEC
 365: ST_TO_ADDR
 366: LD_INT 8
 368: PUSH
 369: FOR_TO
 370: IFFALSE 457
// if Multiplayer_GetPlayerIsSpec ( i ) then
 372: LD_VAR 0 2
 376: PPUSH
 377: CALL_OW 530
 381: IFFALSE 455
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 383: LD_ADDR_EXP 24
 387: PUSH
 388: LD_EXP 24
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: LD_INT 0
 400: PPUSH
 401: CALL_OW 1
 405: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 406: LD_ADDR_EXP 23
 410: PUSH
 411: LD_EXP 23
 415: PPUSH
 416: LD_EXP 22
 420: PUSH
 421: LD_VAR 0 2
 425: ARRAY
 426: PPUSH
 427: LD_EXP 23
 431: PUSH
 432: LD_EXP 22
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: ARRAY
 443: PUSH
 444: LD_VAR 0 2
 448: DIFF
 449: PPUSH
 450: CALL_OW 1
 454: ST_TO_ADDR
// end ;
 455: GO 369
 457: POP
 458: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 459: LD_ADDR_EXP 30
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// for i := 1 to 8 do
 482: LD_ADDR_VAR 0 2
 486: PUSH
 487: DOUBLE
 488: LD_INT 1
 490: DEC
 491: ST_TO_ADDR
 492: LD_INT 8
 494: PUSH
 495: FOR_TO
 496: IFFALSE 543
// if Side_Positions [ i ] then
 498: LD_EXP 24
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: IFFALSE 541
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 510: LD_ADDR_EXP 30
 514: PUSH
 515: LD_EXP 30
 519: PPUSH
 520: LD_EXP 24
 524: PUSH
 525: LD_VAR 0 2
 529: ARRAY
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: CALL_OW 1
 540: ST_TO_ADDR
 541: GO 495
 543: POP
 544: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 545: LD_ADDR_EXP 26
 549: PUSH
 550: LD_EXP 22
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: EMPTY
 559: LIST
 560: DIFF
 561: PUSH
 562: LD_INT 1
 564: GREATER
 565: ST_TO_ADDR
// if Multiplayer then
 566: LD_OWVAR 4
 570: IFFALSE 842
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 572: LD_ADDR_EXP 52
 576: PUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 426
 584: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 585: LD_ADDR_EXP 53
 589: PUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 426
 597: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 598: LD_ADDR_EXP 54
 602: PUSH
 603: LD_INT 2
 605: PPUSH
 606: CALL_OW 426
 610: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 611: LD_ADDR_EXP 55
 615: PUSH
 616: LD_INT 3
 618: PPUSH
 619: CALL_OW 426
 623: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 624: LD_ADDR_EXP 56
 628: PUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 426
 636: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 637: LD_ADDR_EXP 57
 641: PUSH
 642: LD_INT 5
 644: PPUSH
 645: CALL_OW 426
 649: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 650: LD_ADDR_EXP 59
 654: PUSH
 655: LD_INT 10
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 663: LD_ADDR_EXP 60
 667: PUSH
 668: LD_INT 11
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 676: LD_ADDR_EXP 61
 680: PUSH
 681: LD_INT 12
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 689: LD_ADDR_EXP 63
 693: PUSH
 694: LD_INT 13
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 702: LD_ADDR_EXP 62
 706: PUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 715: LD_ADDR_EXP 64
 719: PUSH
 720: LD_INT 15
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 728: LD_ADDR_EXP 1
 732: PUSH
 733: LD_INT 6
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 741: LD_ADDR_EXP 2
 745: PUSH
 746: LD_INT 7
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 754: LD_ADDR_EXP 4
 758: PUSH
 759: LD_INT 8
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 767: LD_ADDR_EXP 3
 771: PUSH
 772: LD_INT 9
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 780: LD_ADDR_EXP 5
 784: PUSH
 785: LD_INT 16
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 17
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 806: LD_ADDR_EXP 65
 810: PUSH
 811: LD_INT 20
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 819: LD_ADDR_VAR 0 3
 823: PUSH
 824: LD_INT 22
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_win_rules = 0 ;
 832: LD_ADDR_EXP 20
 836: PUSH
 837: LD_INT 0
 839: ST_TO_ADDR
// end else
 840: GO 1014
// begin Randomize ;
 842: CALL_OW 10
// def_base_level := 2 ;
 846: LD_ADDR_EXP 52
 850: PUSH
 851: LD_INT 2
 853: ST_TO_ADDR
// def_amount_of_people := 1 ;
 854: LD_ADDR_EXP 53
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// def_skill_level := 1 ;
 862: LD_ADDR_EXP 54
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// def_starting_resources := 2 ;
 870: LD_ADDR_EXP 55
 874: PUSH
 875: LD_INT 2
 877: ST_TO_ADDR
// def_shipments_density := 1 ;
 878: LD_ADDR_EXP 56
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 886: LD_ADDR_EXP 57
 890: PUSH
 891: LD_INT 0
 893: ST_TO_ADDR
// def_shared_vision := 1 ;
 894: LD_ADDR_EXP 59
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// def_morale_flags := 1 ;
 902: LD_ADDR_EXP 60
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// def_siberite_detection := 1 ;
 910: LD_ADDR_EXP 61
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 918: LD_ADDR_EXP 63
 922: PUSH
 923: LD_INT 3
 925: ST_TO_ADDR
// def_people_respawning := 2 ;
 926: LD_ADDR_EXP 62
 930: PUSH
 931: LD_INT 2
 933: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 934: LD_ADDR_EXP 64
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// def_artefact_one := 1 ;
 942: LD_ADDR_EXP 1
 946: PUSH
 947: LD_INT 1
 949: ST_TO_ADDR
// def_artefact_two := 1 ;
 950: LD_ADDR_EXP 2
 954: PUSH
 955: LD_INT 1
 957: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 958: LD_ADDR_EXP 4
 962: PUSH
 963: LD_INT 2
 965: ST_TO_ADDR
// def_artefact_three := 1 ;
 966: LD_ADDR_EXP 3
 970: PUSH
 971: LD_INT 1
 973: ST_TO_ADDR
// def_kings_age := 1 ;
 974: LD_ADDR_EXP 5
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// def_public_score := 0 ;
 982: LD_ADDR_EXP 6
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// def_builduptime := 1 ;
 990: LD_ADDR_EXP 65
 994: PUSH
 995: LD_INT 1
 997: ST_TO_ADDR
// tech_level = 4 ;
 998: LD_ADDR_VAR 0 3
1002: PUSH
1003: LD_INT 4
1005: ST_TO_ADDR
// def_win_rules = 0 ;
1006: LD_ADDR_EXP 20
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// end ; InitGameRules ;
1014: CALL 14350 0 0
// if def_game_rules = 0 then
1018: LD_EXP 51
1022: PUSH
1023: LD_INT 0
1025: EQUAL
1026: IFFALSE 1053
// begin if isSGUI then
1028: LD_OWVAR 83
1032: IFFALSE 1040
// setMpTechs ( ) else
1034: CALL 22032 0 0
1038: GO 1053
// begin SetMpTechLevel ( tech_level + 1 ) ;
1040: LD_VAR 0 3
1044: PUSH
1045: LD_INT 1
1047: PLUS
1048: PPUSH
1049: CALL 22179 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1053: LD_ADDR_EXP 7
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 52
1080: PUSH
1081: LD_INT 1
1083: PLUS
1084: ARRAY
1085: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
1086: LD_ADDR_EXP 8
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 2
1099: PUSH
1100: LD_INT 3
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_EXP 52
1113: PUSH
1114: LD_INT 1
1116: PLUS
1117: ARRAY
1118: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1119: LD_ADDR_EXP 9
1123: PUSH
1124: LD_EXP 53
1128: PUSH
1129: LD_INT 4
1131: PLUS
1132: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: LD_INT 4
1146: PUSH
1147: LD_INT 5
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: PUSH
1156: LD_EXP 54
1160: PUSH
1161: LD_INT 1
1163: PLUS
1164: ARRAY
1165: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1166: LD_ADDR_EXP 12
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: LD_INT 0
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 30
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: LD_INT 0
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 50
1201: PUSH
1202: LD_INT 20
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 80
1215: PUSH
1216: LD_INT 40
1218: PUSH
1219: LD_INT 20
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: LD_EXP 55
1237: PUSH
1238: LD_INT 1
1240: PLUS
1241: ARRAY
1242: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1243: LD_ADDR_EXP 11
1247: PUSH
1248: LD_INT 10
1250: PUSH
1251: EMPTY
1252: LIST
1253: PUSH
1254: LD_INT 7
1256: PUSH
1257: LD_INT 14
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 6
1266: PUSH
1267: LD_INT 12
1269: PUSH
1270: LD_INT 18
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 5
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: LD_INT 15
1286: PUSH
1287: LD_INT 20
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_EXP 55
1306: PUSH
1307: LD_INT 1
1309: PLUS
1310: ARRAY
1311: ST_TO_ADDR
// shipments_density := 380 - ( def_shipments_density * 2 ) ;
1312: LD_ADDR_EXP 13
1316: PUSH
1317: LD_INT 380
1319: PUSH
1320: LD_EXP 56
1324: PUSH
1325: LD_INT 2
1327: MUL
1328: MINUS
1329: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1330: LD_ADDR_EXP 15
1334: PUSH
1335: LD_INT 0
1337: PUSH
1338: LD_INT 1
1340: PUSH
1341: LD_INT 2
1343: PUSH
1344: LD_INT 3
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: PUSH
1353: LD_EXP 63
1357: PUSH
1358: LD_INT 1
1360: PLUS
1361: ARRAY
1362: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1363: LD_ADDR_EXP 16
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 12600
1373: PUSH
1374: LD_INT 2100
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_EXP 62
1386: PUSH
1387: LD_INT 1
1389: PLUS
1390: ARRAY
1391: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1392: LD_ADDR_EXP 17
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 21000
1402: PUSH
1403: LD_INT 4200
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 62
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_INT 1
1428: NEG
1429: PUSH
1430: LD_INT 350
1432: PUSH
1433: LD_INT 700
1435: PUSH
1436: LD_INT 1400
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_EXP 60
1453: PUSH
1454: LD_INT 1
1456: PLUS
1457: ARRAY
1458: ST_TO_ADDR
// battle_flags_id := [ ] ;
1459: LD_ADDR_EXP 35
1463: PUSH
1464: EMPTY
1465: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1466: LD_ADDR_EXP 19
1470: PUSH
1471: LD_INT 0
1473: PUSH
1474: LD_INT 1
1476: PUSH
1477: LD_INT 63000
1479: PUSH
1480: LD_INT 126000
1482: PUSH
1483: LD_INT 189000
1485: PUSH
1486: LD_INT 252000
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_EXP 64
1501: PUSH
1502: LD_INT 1
1504: PLUS
1505: ARRAY
1506: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1507: LD_ADDR_EXP 21
1511: PUSH
1512: LD_INT 500
1514: PUSH
1515: LD_INT 1000
1517: PUSH
1518: LD_INT 1500
1520: PUSH
1521: LD_INT 2000
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 5
1534: PUSH
1535: LD_INT 1
1537: PLUS
1538: ARRAY
1539: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1540: LD_EXP 64
1544: PUSH
1545: LD_INT 0
1547: EQUAL
1548: IFFALSE 1560
// siberite_bomb_Delay = 0 else
1550: LD_ADDR_EXP 19
1554: PUSH
1555: LD_INT 0
1557: ST_TO_ADDR
1558: GO 1582
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1560: LD_ADDR_EXP 19
1564: PUSH
1565: LD_EXP 64
1569: PUSH
1570: LD_INT 1
1572: MINUS
1573: PUSH
1574: LD_INT 21000
1576: MUL
1577: PUSH
1578: LD_INT 1
1580: PLUS
1581: ST_TO_ADDR
// if def_builduptime = 0 then
1582: LD_EXP 65
1586: PUSH
1587: LD_INT 0
1589: EQUAL
1590: IFFALSE 1602
// buildUpTime_Delay = 0 else
1592: LD_ADDR_EXP 18
1596: PUSH
1597: LD_INT 0
1599: ST_TO_ADDR
1600: GO 1620
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
1602: LD_ADDR_EXP 18
1606: PUSH
1607: LD_INT 8400
1609: PUSH
1610: LD_INT 2100
1612: PUSH
1613: LD_EXP 65
1617: MUL
1618: PLUS
1619: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1620: LD_ADDR_EXP 48
1624: PUSH
1625: LD_INT 21
1627: PUSH
1628: LD_INT 23
1630: PUSH
1631: LD_INT 20
1633: PUSH
1634: LD_INT 22
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: ST_TO_ADDR
// end ;
1643: LD_VAR 0 1
1647: RET
// function init_map ; var i ; begin
1648: LD_INT 0
1650: PPUSH
1651: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1652: LD_ADDR_EXP 34
1656: PUSH
1657: LD_INT 43
1659: PUSH
1660: LD_INT 9
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 123
1669: PUSH
1670: LD_INT 10
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 113
1679: PUSH
1680: LD_INT 155
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 186
1689: PUSH
1690: LD_INT 133
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: LIST
1701: LIST
1702: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1703: LD_ADDR_EXP 31
1707: PUSH
1708: LD_INT 18
1710: PUSH
1711: LD_INT 17
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 156
1724: PUSH
1725: LD_INT 20
1727: PUSH
1728: LD_INT 3
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 83
1738: PUSH
1739: LD_INT 140
1741: PUSH
1742: LD_INT 1
1744: PUSH
1745: EMPTY
1746: LIST
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 216
1752: PUSH
1753: LD_INT 143
1755: PUSH
1756: LD_INT 5
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: ST_TO_ADDR
// for i in depot_def do
1770: LD_ADDR_VAR 0 2
1774: PUSH
1775: LD_EXP 31
1779: PUSH
1780: FOR_IN
1781: IFFALSE 1855
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1783: LD_ADDR_EXP 33
1787: PUSH
1788: LD_EXP 33
1792: PUSH
1793: LD_VAR 0 2
1797: PUSH
1798: LD_INT 1
1800: ARRAY
1801: PPUSH
1802: LD_VAR 0 2
1806: PUSH
1807: LD_INT 3
1809: ARRAY
1810: PPUSH
1811: LD_INT 6
1813: PPUSH
1814: CALL_OW 272
1818: PUSH
1819: LD_VAR 0 2
1823: PUSH
1824: LD_INT 2
1826: ARRAY
1827: PPUSH
1828: LD_VAR 0 2
1832: PUSH
1833: LD_INT 3
1835: ARRAY
1836: PPUSH
1837: LD_INT 6
1839: PPUSH
1840: CALL_OW 273
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: EMPTY
1850: LIST
1851: ADD
1852: ST_TO_ADDR
1853: GO 1780
1855: POP
1856: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1857: LD_ADDR_EXP 32
1861: PUSH
1862: LD_INT 30
1864: PUSH
1865: LD_INT 36
1867: PUSH
1868: LD_INT 0
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 44
1878: PUSH
1879: LD_INT 21
1881: PUSH
1882: LD_INT 4
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 43
1892: PUSH
1893: LD_INT 33
1895: PUSH
1896: LD_INT 5
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 165
1911: PUSH
1912: LD_INT 34
1914: PUSH
1915: LD_INT 0
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 137
1925: PUSH
1926: LD_INT 18
1928: PUSH
1929: LD_INT 1
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 153
1939: PUSH
1940: LD_INT 37
1942: PUSH
1943: LD_INT 0
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 86
1958: PUSH
1959: LD_INT 120
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: LD_INT 105
1972: PUSH
1973: LD_INT 147
1975: PUSH
1976: LD_INT 4
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PUSH
1984: LD_INT 68
1986: PUSH
1987: LD_INT 118
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: LIST
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 199
2005: PUSH
2006: LD_INT 144
2008: PUSH
2009: LD_INT 1
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 207
2019: PUSH
2020: LD_INT 119
2022: PUSH
2023: LD_INT 3
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 195
2033: PUSH
2034: LD_INT 118
2036: PUSH
2037: LD_INT 2
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: LIST
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: ST_TO_ADDR
// if not def_extra_oil_deposits then
2056: LD_EXP 57
2060: NOT
2061: IFFALSE 2102
// for i in extra_oil_deposits_locations do
2063: LD_ADDR_VAR 0 2
2067: PUSH
2068: LD_EXP 34
2072: PUSH
2073: FOR_IN
2074: IFFALSE 2100
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
2076: LD_VAR 0 2
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: LD_VAR 0 2
2089: PUSH
2090: LD_INT 2
2092: ARRAY
2093: PPUSH
2094: CALL_OW 63
2098: GO 2073
2100: POP
2101: POP
// end ;
2102: LD_VAR 0 1
2106: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2107: LD_INT 0
2109: PPUSH
2110: PPUSH
2111: PPUSH
// if not Team_Game then
2112: LD_EXP 26
2116: NOT
2117: IFFALSE 2215
// begin for i = 1 to 8 do
2119: LD_ADDR_VAR 0 2
2123: PUSH
2124: DOUBLE
2125: LD_INT 1
2127: DEC
2128: ST_TO_ADDR
2129: LD_INT 8
2131: PUSH
2132: FOR_TO
2133: IFFALSE 2211
// for j = 1 to 8 do
2135: LD_ADDR_VAR 0 3
2139: PUSH
2140: DOUBLE
2141: LD_INT 1
2143: DEC
2144: ST_TO_ADDR
2145: LD_INT 8
2147: PUSH
2148: FOR_TO
2149: IFFALSE 2207
// if i <> j then
2151: LD_VAR 0 2
2155: PUSH
2156: LD_VAR 0 3
2160: NONEQUAL
2161: IFFALSE 2185
// SetAttitude ( i , j , att_neutral , true ) else
2163: LD_VAR 0 2
2167: PPUSH
2168: LD_VAR 0 3
2172: PPUSH
2173: LD_INT 0
2175: PPUSH
2176: LD_INT 1
2178: PPUSH
2179: CALL_OW 80
2183: GO 2205
// SetAttitude ( i , j , att_friend , true ) ;
2185: LD_VAR 0 2
2189: PPUSH
2190: LD_VAR 0 3
2194: PPUSH
2195: LD_INT 1
2197: PPUSH
2198: LD_INT 1
2200: PPUSH
2201: CALL_OW 80
2205: GO 2148
2207: POP
2208: POP
2209: GO 2132
2211: POP
2212: POP
// end else
2213: GO 2390
// begin if def_shared_vision then
2215: LD_EXP 59
2219: IFFALSE 2284
// begin for i in Teams do
2221: LD_ADDR_VAR 0 2
2225: PUSH
2226: LD_EXP 23
2230: PUSH
2231: FOR_IN
2232: IFFALSE 2282
// for j = 2 to i do
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: DOUBLE
2240: LD_INT 2
2242: DEC
2243: ST_TO_ADDR
2244: LD_VAR 0 2
2248: PUSH
2249: FOR_TO
2250: IFFALSE 2278
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2252: LD_VAR 0 2
2256: PUSH
2257: LD_VAR 0 3
2261: ARRAY
2262: PPUSH
2263: LD_VAR 0 2
2267: PUSH
2268: LD_INT 1
2270: ARRAY
2271: PPUSH
2272: CALL_OW 343
2276: GO 2249
2278: POP
2279: POP
2280: GO 2231
2282: POP
2283: POP
// end ; for i = 1 to 8 do
2284: LD_ADDR_VAR 0 2
2288: PUSH
2289: DOUBLE
2290: LD_INT 1
2292: DEC
2293: ST_TO_ADDR
2294: LD_INT 8
2296: PUSH
2297: FOR_TO
2298: IFFALSE 2388
// for j = 1 to 8 do
2300: LD_ADDR_VAR 0 3
2304: PUSH
2305: DOUBLE
2306: LD_INT 1
2308: DEC
2309: ST_TO_ADDR
2310: LD_INT 8
2312: PUSH
2313: FOR_TO
2314: IFFALSE 2384
// if Side_Teams [ i ] = Side_Teams [ j ] then
2316: LD_EXP 22
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: PUSH
2327: LD_EXP 22
2331: PUSH
2332: LD_VAR 0 3
2336: ARRAY
2337: EQUAL
2338: IFFALSE 2362
// SetAttitude ( i , j , att_friend , true ) else
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_VAR 0 3
2349: PPUSH
2350: LD_INT 1
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: CALL_OW 80
2360: GO 2382
// SetAttitude ( i , j , att_enemy , true ) ;
2362: LD_VAR 0 2
2366: PPUSH
2367: LD_VAR 0 3
2371: PPUSH
2372: LD_INT 2
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: CALL_OW 80
2382: GO 2313
2384: POP
2385: POP
2386: GO 2297
2388: POP
2389: POP
// end ; end ;
2390: LD_VAR 0 1
2394: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2395: LD_INT 0
2397: PPUSH
2398: PPUSH
2399: PPUSH
2400: PPUSH
// result := [ ] ;
2401: LD_ADDR_VAR 0 7
2405: PUSH
2406: EMPTY
2407: ST_TO_ADDR
// for i := 1 to count do
2408: LD_ADDR_VAR 0 8
2412: PUSH
2413: DOUBLE
2414: LD_INT 1
2416: DEC
2417: ST_TO_ADDR
2418: LD_VAR 0 1
2422: PUSH
2423: FOR_TO
2424: IFFALSE 2842
// begin uc_direction := Rand ( 0 , 5 ) ;
2426: LD_ADDR_OWVAR 24
2430: PUSH
2431: LD_INT 0
2433: PPUSH
2434: LD_INT 5
2436: PPUSH
2437: CALL_OW 12
2441: ST_TO_ADDR
// if commander then
2442: LD_LOC 1
2446: IFFALSE 2555
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2448: LD_ADDR_OWVAR 26
2452: PUSH
2453: LD_OWVAR 19
2457: PUSH
2458: LD_OWVAR 20
2462: ARRAY
2463: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2464: LD_INT 1
2466: PPUSH
2467: LD_INT 2
2469: PPUSH
2470: CALL_OW 12
2474: PPUSH
2475: LD_VAR 0 2
2479: PPUSH
2480: LD_EXP 10
2484: PUSH
2485: LD_INT 2
2487: PLUS
2488: PPUSH
2489: CALL_OW 380
// hc_importance := 105 ;
2493: LD_ADDR_OWVAR 32
2497: PUSH
2498: LD_INT 105
2500: ST_TO_ADDR
// commander := false ;
2501: LD_ADDR_LOC 1
2505: PUSH
2506: LD_INT 0
2508: ST_TO_ADDR
// if Multiplayer then
2509: LD_OWVAR 4
2513: IFFALSE 2553
// begin hc_gallery := MULTIAVATARS ;
2515: LD_ADDR_OWVAR 33
2519: PUSH
2520: LD_STRING MULTIAVATARS
2522: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2523: LD_ADDR_OWVAR 34
2527: PUSH
2528: LD_OWVAR 20
2532: PPUSH
2533: CALL_OW 525
2537: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2538: LD_ADDR_OWVAR 27
2542: PUSH
2543: LD_OWVAR 20
2547: PPUSH
2548: CALL_OW 526
2552: ST_TO_ADDR
// end ; end else
2553: GO 2618
// begin hc_name :=  ;
2555: LD_ADDR_OWVAR 26
2559: PUSH
2560: LD_STRING 
2562: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2563: LD_INT 1
2565: PPUSH
2566: LD_INT 2
2568: PPUSH
2569: CALL_OW 12
2573: PPUSH
2574: LD_VAR 0 2
2578: PPUSH
2579: LD_EXP 10
2583: PPUSH
2584: CALL_OW 380
// hc_importance := 0 ;
2588: LD_ADDR_OWVAR 32
2592: PUSH
2593: LD_INT 0
2595: ST_TO_ADDR
// if Multiplayer then
2596: LD_OWVAR 4
2600: IFFALSE 2618
// begin hc_gallery :=  ;
2602: LD_ADDR_OWVAR 33
2606: PUSH
2607: LD_STRING 
2609: ST_TO_ADDR
// hc_face_number := 0 ;
2610: LD_ADDR_OWVAR 34
2614: PUSH
2615: LD_INT 0
2617: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2618: LD_ADDR_VAR 0 10
2622: PUSH
2623: CALL_OW 44
2627: ST_TO_ADDR
// if global_defined then
2628: LD_LOC 3
2632: IFFALSE 2772
// begin if ( cl = class_soldier ) then
2634: LD_VAR 0 2
2638: PUSH
2639: LD_INT 1
2641: EQUAL
2642: IFFALSE 2662
// j := i + soldiers_created else
2644: LD_ADDR_VAR 0 9
2648: PUSH
2649: LD_VAR 0 8
2653: PUSH
2654: LD_LOC 4
2658: PLUS
2659: ST_TO_ADDR
2660: GO 2672
// j := i ;
2662: LD_ADDR_VAR 0 9
2666: PUSH
2667: LD_VAR 0 8
2671: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2672: LD_LOC 2
2676: PUSH
2677: LD_VAR 0 2
2681: ARRAY
2682: PUSH
2683: LD_VAR 0 9
2687: ARRAY
2688: PPUSH
2689: LD_VAR 0 10
2693: PPUSH
2694: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2698: LD_VAR 0 10
2702: PPUSH
2703: LD_INT 2
2705: PPUSH
2706: LD_LOC 2
2710: PUSH
2711: LD_VAR 0 2
2715: ARRAY
2716: PUSH
2717: LD_VAR 0 9
2721: ARRAY
2722: PPUSH
2723: LD_INT 2
2725: PPUSH
2726: CALL_OW 260
2730: PPUSH
2731: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2735: LD_VAR 0 10
2739: PPUSH
2740: LD_INT 1
2742: PPUSH
2743: LD_LOC 2
2747: PUSH
2748: LD_VAR 0 2
2752: ARRAY
2753: PUSH
2754: LD_VAR 0 9
2758: ARRAY
2759: PPUSH
2760: LD_INT 1
2762: PPUSH
2763: CALL_OW 260
2767: PPUSH
2768: CALL_OW 239
// end ; if building then
2772: LD_VAR 0 6
2776: IFFALSE 2794
// PlaceHumanInUnit ( un , building ) else
2778: LD_VAR 0 10
2782: PPUSH
2783: LD_VAR 0 6
2787: PPUSH
2788: CALL_OW 52
2792: GO 2821
// PlaceUnitXYR ( un , x , y , r , false ) ;
2794: LD_VAR 0 10
2798: PPUSH
2799: LD_VAR 0 3
2803: PPUSH
2804: LD_VAR 0 4
2808: PPUSH
2809: LD_VAR 0 5
2813: PPUSH
2814: LD_INT 0
2816: PPUSH
2817: CALL_OW 50
// result := result ^ [ un ] ;
2821: LD_ADDR_VAR 0 7
2825: PUSH
2826: LD_VAR 0 7
2830: PUSH
2831: LD_VAR 0 10
2835: PUSH
2836: EMPTY
2837: LIST
2838: ADD
2839: ST_TO_ADDR
// end ;
2840: GO 2423
2842: POP
2843: POP
// if not global_defined then
2844: LD_LOC 3
2848: NOT
2849: IFFALSE 2927
// if ( global_units >= cl ) then
2851: LD_LOC 2
2855: PUSH
2856: LD_VAR 0 2
2860: GREATEREQUAL
2861: IFFALSE 2902
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2863: LD_ADDR_LOC 2
2867: PUSH
2868: LD_LOC 2
2872: PPUSH
2873: LD_VAR 0 2
2877: PPUSH
2878: LD_LOC 2
2882: PUSH
2883: LD_VAR 0 2
2887: ARRAY
2888: PUSH
2889: LD_VAR 0 7
2893: ADD
2894: PPUSH
2895: CALL_OW 1
2899: ST_TO_ADDR
2900: GO 2927
// global_units := Replace ( global_units , cl , result ) ;
2902: LD_ADDR_LOC 2
2906: PUSH
2907: LD_LOC 2
2911: PPUSH
2912: LD_VAR 0 2
2916: PPUSH
2917: LD_VAR 0 7
2921: PPUSH
2922: CALL_OW 1
2926: ST_TO_ADDR
// if commander then
2927: LD_LOC 1
2931: IFFALSE 2978
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2933: LD_ADDR_EXP 36
2937: PUSH
2938: LD_EXP 36
2942: PPUSH
2943: LD_OWVAR 20
2947: PPUSH
2948: LD_EXP 36
2952: PUSH
2953: LD_OWVAR 20
2957: ARRAY
2958: PUSH
2959: LD_VAR 0 10
2963: ADD
2964: PPUSH
2965: CALL_OW 1
2969: ST_TO_ADDR
// commander := false ;
2970: LD_ADDR_LOC 1
2974: PUSH
2975: LD_INT 0
2977: ST_TO_ADDR
// end ; end ;
2978: LD_VAR 0 7
2982: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2983: LD_INT 0
2985: PPUSH
2986: PPUSH
2987: PPUSH
2988: PPUSH
2989: PPUSH
2990: PPUSH
2991: PPUSH
2992: PPUSH
2993: PPUSH
// if side in [ 0 , 9 ] then
2994: LD_VAR 0 1
2998: PUSH
2999: LD_INT 0
3001: PUSH
3002: LD_INT 9
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: IN
3009: IFFALSE 3013
// exit ;
3011: GO 4088
// pos := Side_Positions [ side ] ;
3013: LD_ADDR_VAR 0 3
3017: PUSH
3018: LD_EXP 24
3022: PUSH
3023: LD_VAR 0 1
3027: ARRAY
3028: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3029: LD_ADDR_OWVAR 21
3033: PUSH
3034: LD_EXP 25
3038: PUSH
3039: LD_VAR 0 1
3043: ARRAY
3044: ST_TO_ADDR
// uc_side := side ;
3045: LD_ADDR_OWVAR 20
3049: PUSH
3050: LD_VAR 0 1
3054: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3055: LD_ADDR_VAR 0 4
3059: PUSH
3060: LD_EXP 31
3064: PUSH
3065: LD_VAR 0 3
3069: ARRAY
3070: PUSH
3071: LD_INT 1
3073: ARRAY
3074: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3075: LD_ADDR_VAR 0 5
3079: PUSH
3080: LD_EXP 31
3084: PUSH
3085: LD_VAR 0 3
3089: ARRAY
3090: PUSH
3091: LD_INT 2
3093: ARRAY
3094: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3095: LD_ADDR_VAR 0 6
3099: PUSH
3100: LD_EXP 31
3104: PUSH
3105: LD_VAR 0 3
3109: ARRAY
3110: PUSH
3111: LD_INT 3
3113: ARRAY
3114: ST_TO_ADDR
// if is_depot then
3115: LD_EXP 7
3119: IFFALSE 3252
// begin bc_type = b_depot ;
3121: LD_ADDR_OWVAR 42
3125: PUSH
3126: LD_INT 0
3128: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3129: LD_ADDR_VAR 0 10
3133: PUSH
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_VAR 0 5
3143: PPUSH
3144: LD_VAR 0 6
3148: PPUSH
3149: CALL_OW 47
3153: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3154: LD_VAR 0 10
3158: PPUSH
3159: LD_STRING @
3161: PUSH
3162: LD_VAR 0 1
3166: STR
3167: PPUSH
3168: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3172: LD_VAR 0 10
3176: PPUSH
3177: CALL_OW 274
3181: PPUSH
3182: LD_INT 1
3184: PPUSH
3185: LD_EXP 12
3189: PUSH
3190: LD_INT 1
3192: ARRAY
3193: PPUSH
3194: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3198: LD_VAR 0 10
3202: PPUSH
3203: CALL_OW 274
3207: PPUSH
3208: LD_INT 2
3210: PPUSH
3211: LD_EXP 12
3215: PUSH
3216: LD_INT 2
3218: ARRAY
3219: PPUSH
3220: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3224: LD_VAR 0 10
3228: PPUSH
3229: CALL_OW 274
3233: PPUSH
3234: LD_INT 3
3236: PPUSH
3237: LD_EXP 12
3241: PUSH
3242: LD_INT 3
3244: ARRAY
3245: PPUSH
3246: CALL_OW 277
// end else
3250: GO 3396
// begin for i := 1 to 3 do
3252: LD_ADDR_VAR 0 7
3256: PUSH
3257: DOUBLE
3258: LD_INT 1
3260: DEC
3261: ST_TO_ADDR
3262: LD_INT 3
3264: PUSH
3265: FOR_TO
3266: IFFALSE 3394
// begin r := starting_resources [ i ] ;
3268: LD_ADDR_VAR 0 8
3272: PUSH
3273: LD_EXP 12
3277: PUSH
3278: LD_VAR 0 7
3282: ARRAY
3283: ST_TO_ADDR
// while r >= 10 do
3284: LD_VAR 0 8
3288: PUSH
3289: LD_INT 10
3291: GREATEREQUAL
3292: IFFALSE 3392
// if r > 50 then
3294: LD_VAR 0 8
3298: PUSH
3299: LD_INT 50
3301: GREATER
3302: IFFALSE 3348
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3304: LD_VAR 0 7
3308: PPUSH
3309: LD_INT 5
3311: PPUSH
3312: LD_VAR 0 4
3316: PPUSH
3317: LD_VAR 0 5
3321: PPUSH
3322: LD_INT 4
3324: PPUSH
3325: LD_INT 0
3327: PPUSH
3328: CALL_OW 60
// r := r - 50 ;
3332: LD_ADDR_VAR 0 8
3336: PUSH
3337: LD_VAR 0 8
3341: PUSH
3342: LD_INT 50
3344: MINUS
3345: ST_TO_ADDR
// end else
3346: GO 3390
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3348: LD_VAR 0 7
3352: PPUSH
3353: LD_VAR 0 8
3357: PUSH
3358: LD_INT 10
3360: DIV
3361: PPUSH
3362: LD_VAR 0 4
3366: PPUSH
3367: LD_VAR 0 5
3371: PPUSH
3372: LD_INT 4
3374: PPUSH
3375: LD_INT 0
3377: PPUSH
3378: CALL_OW 60
// r := 0 ;
3382: LD_ADDR_VAR 0 8
3386: PUSH
3387: LD_INT 0
3389: ST_TO_ADDR
// end ;
3390: GO 3284
// end ;
3392: GO 3265
3394: POP
3395: POP
// end ; for r in starting_crates do
3396: LD_ADDR_VAR 0 8
3400: PUSH
3401: LD_EXP 11
3405: PUSH
3406: FOR_IN
3407: IFFALSE 3439
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3409: LD_INT 1
3411: PPUSH
3412: LD_INT 5
3414: PPUSH
3415: LD_VAR 0 4
3419: PPUSH
3420: LD_VAR 0 5
3424: PPUSH
3425: LD_VAR 0 8
3429: PPUSH
3430: LD_INT 0
3432: PPUSH
3433: CALL_OW 60
3437: GO 3406
3439: POP
3440: POP
// if def_morale_flags then
3441: LD_EXP 60
3445: IFFALSE 3584
// begin x := start_def [ pos ] [ 1 ] ;
3447: LD_ADDR_VAR 0 4
3451: PUSH
3452: LD_EXP 33
3456: PUSH
3457: LD_VAR 0 3
3461: ARRAY
3462: PUSH
3463: LD_INT 1
3465: ARRAY
3466: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3467: LD_ADDR_VAR 0 5
3471: PUSH
3472: LD_EXP 33
3476: PUSH
3477: LD_VAR 0 3
3481: ARRAY
3482: PUSH
3483: LD_INT 2
3485: ARRAY
3486: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3487: LD_VAR 0 4
3491: PPUSH
3492: LD_VAR 0 5
3496: PPUSH
3497: LD_INT 12
3499: PPUSH
3500: LD_INT 2
3502: PPUSH
3503: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3507: LD_ADDR_EXP 35
3511: PUSH
3512: LD_EXP 35
3516: PUSH
3517: LD_VAR 0 1
3521: PPUSH
3522: LD_VAR 0 4
3526: PPUSH
3527: LD_VAR 0 5
3531: PPUSH
3532: LD_INT 1
3534: PUSH
3535: LD_INT 100
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 50
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 3
3554: PUSH
3555: LD_INT 20
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: PUSH
3562: LD_INT 20
3564: PUSH
3565: LD_INT 100
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: PPUSH
3578: CALL_OW 418
3582: ADD
3583: ST_TO_ADDR
// end ; commander := true ;
3584: LD_ADDR_LOC 1
3588: PUSH
3589: LD_INT 1
3591: ST_TO_ADDR
// soldiers_created := 0 ;
3592: LD_ADDR_LOC 4
3596: PUSH
3597: LD_INT 0
3599: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3600: LD_ADDR_VAR 0 7
3604: PUSH
3605: DOUBLE
3606: LD_INT 1
3608: DEC
3609: ST_TO_ADDR
3610: LD_EXP 8
3614: PUSH
3615: FOR_TO
3616: IFFALSE 3769
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3618: LD_ADDR_VAR 0 4
3622: PUSH
3623: LD_EXP 32
3627: PUSH
3628: LD_VAR 0 3
3632: ARRAY
3633: PUSH
3634: LD_VAR 0 7
3638: ARRAY
3639: PUSH
3640: LD_INT 1
3642: ARRAY
3643: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3644: LD_ADDR_VAR 0 5
3648: PUSH
3649: LD_EXP 32
3653: PUSH
3654: LD_VAR 0 3
3658: ARRAY
3659: PUSH
3660: LD_VAR 0 7
3664: ARRAY
3665: PUSH
3666: LD_INT 2
3668: ARRAY
3669: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3670: LD_ADDR_VAR 0 6
3674: PUSH
3675: LD_EXP 32
3679: PUSH
3680: LD_VAR 0 3
3684: ARRAY
3685: PUSH
3686: LD_VAR 0 7
3690: ARRAY
3691: PUSH
3692: LD_INT 3
3694: ARRAY
3695: ST_TO_ADDR
// bc_type := b_breastwork ;
3696: LD_ADDR_OWVAR 42
3700: PUSH
3701: LD_INT 31
3703: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3704: LD_ADDR_VAR 0 9
3708: PUSH
3709: LD_VAR 0 4
3713: PPUSH
3714: LD_VAR 0 5
3718: PPUSH
3719: LD_VAR 0 6
3723: PPUSH
3724: CALL_OW 47
3728: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3729: LD_INT 1
3731: PPUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 0
3737: PPUSH
3738: LD_INT 0
3740: PPUSH
3741: LD_INT 0
3743: PPUSH
3744: LD_VAR 0 9
3748: PPUSH
3749: CALL 2395 0 6
// soldiers_created := soldiers_created + 1 ;
3753: LD_ADDR_LOC 4
3757: PUSH
3758: LD_LOC 4
3762: PUSH
3763: LD_INT 1
3765: PLUS
3766: ST_TO_ADDR
// end ;
3767: GO 3615
3769: POP
3770: POP
// x := start_def [ pos ] [ 1 ] ;
3771: LD_ADDR_VAR 0 4
3775: PUSH
3776: LD_EXP 33
3780: PUSH
3781: LD_VAR 0 3
3785: ARRAY
3786: PUSH
3787: LD_INT 1
3789: ARRAY
3790: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3791: LD_ADDR_VAR 0 5
3795: PUSH
3796: LD_EXP 33
3800: PUSH
3801: LD_VAR 0 3
3805: ARRAY
3806: PUSH
3807: LD_INT 2
3809: ARRAY
3810: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3811: LD_LOC 8
3815: PUSH
3816: LD_EXP 8
3820: MINUS
3821: PPUSH
3822: LD_INT 1
3824: PPUSH
3825: LD_VAR 0 4
3829: PPUSH
3830: LD_VAR 0 5
3834: PPUSH
3835: LD_INT 5
3837: PPUSH
3838: LD_INT 0
3840: PPUSH
3841: CALL 2395 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3845: LD_LOC 5
3849: PPUSH
3850: LD_INT 2
3852: PPUSH
3853: LD_VAR 0 4
3857: PPUSH
3858: LD_VAR 0 5
3862: PPUSH
3863: LD_INT 5
3865: PPUSH
3866: LD_INT 0
3868: PPUSH
3869: CALL 2395 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3873: LD_LOC 7
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_VAR 0 4
3885: PPUSH
3886: LD_VAR 0 5
3890: PPUSH
3891: LD_INT 5
3893: PPUSH
3894: LD_INT 0
3896: PPUSH
3897: CALL 2395 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3901: LD_LOC 6
3905: PPUSH
3906: LD_INT 4
3908: PPUSH
3909: LD_VAR 0 4
3913: PPUSH
3914: LD_VAR 0 5
3918: PPUSH
3919: LD_INT 5
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL 2395 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3929: LD_EXP 61
3933: PUSH
3934: LD_INT 20
3936: PPUSH
3937: LD_VAR 0 1
3941: PPUSH
3942: CALL_OW 321
3946: PUSH
3947: LD_INT 1
3949: EQUAL
3950: AND
3951: IFFALSE 3968
// SetTech ( tech_SibDet , side , state_researched ) ;
3953: LD_INT 20
3955: PPUSH
3956: LD_VAR 0 1
3960: PPUSH
3961: LD_INT 2
3963: PPUSH
3964: CALL_OW 322
// if def_siberite_bomb = 1 then
3968: LD_EXP 64
3972: PUSH
3973: LD_INT 1
3975: EQUAL
3976: IFFALSE 4010
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3978: LD_INT 25
3980: PPUSH
3981: LD_VAR 0 1
3985: PPUSH
3986: LD_INT 1
3988: PPUSH
3989: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3993: LD_INT 73
3995: PPUSH
3996: LD_VAR 0 1
4000: PPUSH
4001: LD_INT 1
4003: PPUSH
4004: CALL_OW 322
// end else
4008: GO 4040
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4010: LD_INT 25
4012: PPUSH
4013: LD_VAR 0 1
4017: PPUSH
4018: LD_INT 0
4020: PPUSH
4021: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4025: LD_INT 73
4027: PPUSH
4028: LD_VAR 0 1
4032: PPUSH
4033: LD_INT 0
4035: PPUSH
4036: CALL_OW 322
// end ; if Game_Type = 3 then
4040: LD_EXP 50
4044: PUSH
4045: LD_INT 3
4047: EQUAL
4048: IFFALSE 4065
// SetTech ( tech_partinvis , side , state_disabled ) ;
4050: LD_INT 16
4052: PPUSH
4053: LD_VAR 0 1
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
4065: LD_INT 24
4067: PPUSH
4068: LD_VAR 0 1
4072: PPUSH
4073: LD_INT 1
4075: PPUSH
4076: CALL_OW 322
// global_defined := true ;
4080: LD_ADDR_LOC 3
4084: PUSH
4085: LD_INT 1
4087: ST_TO_ADDR
// end ;
4088: LD_VAR 0 2
4092: RET
// every 0 0$1 do
4093: GO 4095
4095: DISABLE
// if ( def_siberite_bomb > 1 ) then
4096: LD_EXP 64
4100: PUSH
4101: LD_INT 1
4103: GREATER
4104: IFFALSE 4119
// begin wait ( siberite_bomb_Delay ) ;
4106: LD_EXP 19
4110: PPUSH
4111: CALL_OW 67
// EnableSibFiss ;
4115: CALL 4120 0 0
// end ;
4119: END
// function EnableSibFiss ; var i ; begin
4120: LD_INT 0
4122: PPUSH
4123: PPUSH
// for i := 1 to 8 do
4124: LD_ADDR_VAR 0 2
4128: PUSH
4129: DOUBLE
4130: LD_INT 1
4132: DEC
4133: ST_TO_ADDR
4134: LD_INT 8
4136: PUSH
4137: FOR_TO
4138: IFFALSE 4184
// if Side_Positions [ i ] then
4140: LD_EXP 24
4144: PUSH
4145: LD_VAR 0 2
4149: ARRAY
4150: IFFALSE 4182
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4152: LD_INT 25
4154: PPUSH
4155: LD_VAR 0 2
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4167: LD_INT 73
4169: PPUSH
4170: LD_VAR 0 2
4174: PPUSH
4175: LD_INT 1
4177: PPUSH
4178: CALL_OW 322
// end ;
4182: GO 4137
4184: POP
4185: POP
// end ;
4186: LD_VAR 0 1
4190: RET
// function prepare_sides ; var i ; begin
4191: LD_INT 0
4193: PPUSH
4194: PPUSH
// global_units := [ ] ;
4195: LD_ADDR_LOC 2
4199: PUSH
4200: EMPTY
4201: ST_TO_ADDR
// global_defined := false ;
4202: LD_ADDR_LOC 3
4206: PUSH
4207: LD_INT 0
4209: ST_TO_ADDR
// CountClassMembers ;
4210: CALL 4260 0 0
// for i := 1 to 8 do
4214: LD_ADDR_VAR 0 2
4218: PUSH
4219: DOUBLE
4220: LD_INT 1
4222: DEC
4223: ST_TO_ADDR
4224: LD_INT 8
4226: PUSH
4227: FOR_TO
4228: IFFALSE 4253
// if Side_Positions [ i ] then
4230: LD_EXP 24
4234: PUSH
4235: LD_VAR 0 2
4239: ARRAY
4240: IFFALSE 4251
// prepare_side ( i ) ;
4242: LD_VAR 0 2
4246: PPUSH
4247: CALL 2983 0 1
4251: GO 4227
4253: POP
4254: POP
// end ;
4255: LD_VAR 0 1
4259: RET
// function CountClassMembers ; var Mode ; begin
4260: LD_INT 0
4262: PPUSH
4263: PPUSH
// if No_Mechs then
4264: LD_EXP 66
4268: IFFALSE 4280
// Mode := 2 else
4270: LD_ADDR_VAR 0 2
4274: PUSH
4275: LD_INT 2
4277: ST_TO_ADDR
4278: GO 4288
// Mode := 1 ;
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: LD_INT 1
4287: ST_TO_ADDR
// neng := number_of_people ;
4288: LD_ADDR_LOC 5
4292: PUSH
4293: LD_EXP 9
4297: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4298: LD_ADDR_LOC 8
4302: PUSH
4303: LD_LOC 5
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: LD_INT 3
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PUSH
4318: LD_VAR 0 2
4322: ARRAY
4323: DIV
4324: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4325: LD_LOC 8
4329: PUSH
4330: LD_EXP 8
4334: LESS
4335: IFFALSE 4347
// nsol := number_of_breastworks ;
4337: LD_ADDR_LOC 8
4341: PUSH
4342: LD_EXP 8
4346: ST_TO_ADDR
// neng := neng - nsol ;
4347: LD_ADDR_LOC 5
4351: PUSH
4352: LD_LOC 5
4356: PUSH
4357: LD_LOC 8
4361: MINUS
4362: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4363: LD_ADDR_LOC 6
4367: PUSH
4368: LD_LOC 5
4372: PUSH
4373: LD_INT 3
4375: PUSH
4376: LD_INT 2
4378: PUSH
4379: EMPTY
4380: LIST
4381: LIST
4382: PUSH
4383: LD_VAR 0 2
4387: ARRAY
4388: DIV
4389: ST_TO_ADDR
// if ( nsci < 1 ) then
4390: LD_LOC 6
4394: PUSH
4395: LD_INT 1
4397: LESS
4398: IFFALSE 4408
// nsci := 1 ;
4400: LD_ADDR_LOC 6
4404: PUSH
4405: LD_INT 1
4407: ST_TO_ADDR
// neng := neng - nsci ;
4408: LD_ADDR_LOC 5
4412: PUSH
4413: LD_LOC 5
4417: PUSH
4418: LD_LOC 6
4422: MINUS
4423: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4424: LD_ADDR_LOC 7
4428: PUSH
4429: LD_LOC 5
4433: PUSH
4434: LD_INT 2
4436: DIV
4437: PUSH
4438: LD_INT 0
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PUSH
4445: LD_VAR 0 2
4449: ARRAY
4450: ST_TO_ADDR
// neng := neng - nmech ;
4451: LD_ADDR_LOC 5
4455: PUSH
4456: LD_LOC 5
4460: PUSH
4461: LD_LOC 7
4465: MINUS
4466: ST_TO_ADDR
// if ( neng < 1 ) then
4467: LD_LOC 5
4471: PUSH
4472: LD_INT 1
4474: LESS
4475: IFFALSE 4485
// neng := 1 ;
4477: LD_ADDR_LOC 5
4481: PUSH
4482: LD_INT 1
4484: ST_TO_ADDR
// end ;
4485: LD_VAR 0 1
4489: RET
// starting begin disable ( 1 ) ;
4490: LD_INT 1
4492: DISABLE_MARKED
// disable ( 2 ) ;
4493: LD_INT 2
4495: DISABLE_MARKED
// disable ( 3 ) ;
4496: LD_INT 3
4498: DISABLE_MARKED
// disable ( 4 ) ;
4499: LD_INT 4
4501: DISABLE_MARKED
// disable ( 5 ) ;
4502: LD_INT 5
4504: DISABLE_MARKED
// disable ( 6 ) ;
4505: LD_INT 6
4507: DISABLE_MARKED
// disable ( 7 ) ;
4508: LD_INT 7
4510: DISABLE_MARKED
// disable ( 10 ) ;
4511: LD_INT 10
4513: DISABLE_MARKED
// disable ( 20 ) ;
4514: LD_INT 20
4516: DISABLE_MARKED
// disable ( 98 ) ;
4517: LD_INT 98
4519: DISABLE_MARKED
// disable ( 99 ) ;
4520: LD_INT 99
4522: DISABLE_MARKED
// disable ( 400 ) ;
4523: LD_INT 400
4525: DISABLE_MARKED
// disable ( 401 ) ;
4526: LD_INT 401
4528: DISABLE_MARKED
// disable ( 600 ) ;
4529: LD_INT 600
4531: DISABLE_MARKED
// mp_selectmsg := true ;
4532: LD_ADDR_OWVAR 13
4536: PUSH
4537: LD_INT 1
4539: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4540: CALL 68 0 0
// init_map ;
4544: CALL 1648 0 0
// init_shipments ;
4548: CALL 4734 0 0
// init_respawn ;
4552: CALL 6432 0 0
// set_shared_visions_and_alliances ;
4556: CALL 2107 0 0
// ResetFog ;
4560: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4564: LD_OWVAR 2
4568: PPUSH
4569: CALL_OW 520
// prepare_sides ;
4573: CALL 4191 0 0
// Init_Win_Condition ;
4577: CALL 18654 0 0
// InitLimits ;
4581: CALL 16482 0 0
// ShowTimer ;
4585: CALL 17419 0 0
// case Game_Type of 2 :
4589: LD_EXP 50
4593: PUSH
4594: LD_INT 2
4596: DOUBLE
4597: EQUAL
4598: IFTRUE 4602
4600: GO 4609
4602: POP
// init_alien_research ; 3 :
4603: CALL 7662 0 0
4607: GO 4629
4609: LD_INT 3
4611: DOUBLE
4612: EQUAL
4613: IFTRUE 4617
4615: GO 4628
4617: POP
// begin InitPoints ( ) ;
4618: CALL 17657 0 0
// init_kings_counting ;
4622: CALL 19880 0 0
// end ; end ;
4626: GO 4629
4628: POP
// music_nat := Side_Nations [ your_side ] ;
4629: LD_ADDR_OWVAR 71
4633: PUSH
4634: LD_EXP 25
4638: PUSH
4639: LD_OWVAR 2
4643: ARRAY
4644: ST_TO_ADDR
// if IAmSpec then
4645: CALL_OW 531
4649: IFFALSE 4673
// begin fogOff ( true ) ;
4651: LD_INT 1
4653: PPUSH
4654: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4658: LD_INT 119
4660: PPUSH
4661: LD_INT 79
4663: PPUSH
4664: CALL_OW 86
// enable ( 400 ) ;
4668: LD_INT 400
4670: ENABLE_MARKED
// end else
4671: GO 4719
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4673: LD_EXP 33
4677: PUSH
4678: LD_EXP 24
4682: PUSH
4683: LD_OWVAR 2
4687: ARRAY
4688: ARRAY
4689: PUSH
4690: LD_INT 1
4692: ARRAY
4693: PPUSH
4694: LD_EXP 33
4698: PUSH
4699: LD_EXP 24
4703: PUSH
4704: LD_OWVAR 2
4708: ARRAY
4709: ARRAY
4710: PUSH
4711: LD_INT 2
4713: ARRAY
4714: PPUSH
4715: CALL_OW 86
// end ; InitApeman ;
4719: CALL 5607 0 0
// if def_builduptime then
4723: LD_EXP 65
4727: IFFALSE 4733
// BeginBuildUp ;
4729: CALL 13656 0 0
// end ; end_of_file
4733: END
// var shipment , tictac ; export function init_shipments ; begin
4734: LD_INT 0
4736: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4737: LD_ADDR_LOC 9
4741: PUSH
4742: LD_INT 0
4744: PPUSH
4745: LD_INT 3
4747: PPUSH
4748: CALL_OW 12
4752: ST_TO_ADDR
// tictac := 0 ;
4753: LD_ADDR_LOC 10
4757: PUSH
4758: LD_INT 0
4760: ST_TO_ADDR
// end ;
4761: LD_VAR 0 1
4765: RET
// every 1 1$0 + 0 0$0.3 do
4766: GO 4768
4768: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
4769: LD_INT 4
4771: PPUSH
4772: LD_INT 5
4774: PPUSH
4775: CALL_OW 12
4779: PPUSH
4780: LD_INT 1
4782: PPUSH
4783: CALL_OW 57
// enable ;
4787: ENABLE
// end ;
4788: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4789: GO 4791
4791: DISABLE
4792: LD_INT 0
4794: PPUSH
4795: PPUSH
// begin case tick of 1 .. 1 1$0 :
4796: LD_OWVAR 1
4800: PUSH
4801: LD_INT 1
4803: DOUBLE
4804: GREATEREQUAL
4805: IFFALSE 4813
4807: LD_INT 2100
4809: DOUBLE
4810: LESSEQUAL
4811: IFTRUE 4815
4813: GO 4843
4815: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4816: LD_EXP 13
4820: PUSH
4821: LD_INT 100
4823: DIVREAL
4824: PUSH
4825: LD_INT 525
4827: PPUSH
4828: LD_INT 1050
4830: PPUSH
4831: CALL_OW 12
4835: MUL
4836: PPUSH
4837: CALL_OW 67
4841: GO 5145
4843: LD_INT 2100
4845: PUSH
4846: LD_INT 1
4848: PLUS
4849: DOUBLE
4850: GREATEREQUAL
4851: IFFALSE 4859
4853: LD_INT 10500
4855: DOUBLE
4856: LESSEQUAL
4857: IFTRUE 4861
4859: GO 4889
4861: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4862: LD_EXP 13
4866: PUSH
4867: LD_INT 100
4869: DIVREAL
4870: PUSH
4871: LD_INT 1050
4873: PPUSH
4874: LD_INT 1225
4876: PPUSH
4877: CALL_OW 12
4881: MUL
4882: PPUSH
4883: CALL_OW 67
4887: GO 5145
4889: LD_INT 10500
4891: PUSH
4892: LD_INT 1
4894: PLUS
4895: DOUBLE
4896: GREATEREQUAL
4897: IFFALSE 4905
4899: LD_INT 21000
4901: DOUBLE
4902: LESSEQUAL
4903: IFTRUE 4907
4905: GO 4935
4907: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4908: LD_EXP 13
4912: PUSH
4913: LD_INT 100
4915: DIVREAL
4916: PUSH
4917: LD_INT 1225
4919: PPUSH
4920: LD_INT 1750
4922: PPUSH
4923: CALL_OW 12
4927: MUL
4928: PPUSH
4929: CALL_OW 67
4933: GO 5145
4935: LD_INT 21000
4937: PUSH
4938: LD_INT 1
4940: PLUS
4941: DOUBLE
4942: GREATEREQUAL
4943: IFFALSE 4951
4945: LD_INT 42000
4947: DOUBLE
4948: LESSEQUAL
4949: IFTRUE 4953
4951: GO 4981
4953: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4954: LD_EXP 13
4958: PUSH
4959: LD_INT 100
4961: DIVREAL
4962: PUSH
4963: LD_INT 1750
4965: PPUSH
4966: LD_INT 2450
4968: PPUSH
4969: CALL_OW 12
4973: MUL
4974: PPUSH
4975: CALL_OW 67
4979: GO 5145
4981: LD_INT 42000
4983: PUSH
4984: LD_INT 1
4986: PLUS
4987: DOUBLE
4988: GREATEREQUAL
4989: IFFALSE 4997
4991: LD_INT 63000
4993: DOUBLE
4994: LESSEQUAL
4995: IFTRUE 4999
4997: GO 5027
4999: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5000: LD_EXP 13
5004: PUSH
5005: LD_INT 100
5007: DIVREAL
5008: PUSH
5009: LD_INT 2450
5011: PPUSH
5012: LD_INT 2800
5014: PPUSH
5015: CALL_OW 12
5019: MUL
5020: PPUSH
5021: CALL_OW 67
5025: GO 5145
5027: LD_INT 63000
5029: PUSH
5030: LD_INT 1
5032: PLUS
5033: DOUBLE
5034: GREATEREQUAL
5035: IFFALSE 5043
5037: LD_INT 105000
5039: DOUBLE
5040: LESSEQUAL
5041: IFTRUE 5045
5043: GO 5073
5045: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5046: LD_EXP 13
5050: PUSH
5051: LD_INT 100
5053: DIVREAL
5054: PUSH
5055: LD_INT 2800
5057: PPUSH
5058: LD_INT 3325
5060: PPUSH
5061: CALL_OW 12
5065: MUL
5066: PPUSH
5067: CALL_OW 67
5071: GO 5145
5073: LD_INT 105000
5075: PUSH
5076: LD_INT 1
5078: PLUS
5079: DOUBLE
5080: GREATEREQUAL
5081: IFFALSE 5089
5083: LD_INT 630000
5085: DOUBLE
5086: LESSEQUAL
5087: IFTRUE 5091
5089: GO 5119
5091: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
5092: LD_EXP 13
5096: PUSH
5097: LD_INT 100
5099: DIVREAL
5100: PUSH
5101: LD_INT 3325
5103: PPUSH
5104: LD_INT 4200
5106: PPUSH
5107: CALL_OW 12
5111: MUL
5112: PPUSH
5113: CALL_OW 67
5117: GO 5145
5119: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5120: LD_EXP 13
5124: PUSH
5125: LD_INT 100
5127: DIVREAL
5128: PUSH
5129: LD_INT 4200
5131: PPUSH
5132: LD_INT 5250
5134: PPUSH
5135: CALL_OW 12
5139: MUL
5140: PPUSH
5141: CALL_OW 67
// amount := Rand ( 1 , 5 ) ;
5145: LD_ADDR_VAR 0 2
5149: PUSH
5150: LD_INT 1
5152: PPUSH
5153: LD_INT 5
5155: PPUSH
5156: CALL_OW 12
5160: ST_TO_ADDR
// for i = 1 to 4 do
5161: LD_ADDR_VAR 0 1
5165: PUSH
5166: DOUBLE
5167: LD_INT 1
5169: DEC
5170: ST_TO_ADDR
5171: LD_INT 4
5173: PUSH
5174: FOR_TO
5175: IFFALSE 5237
// begin if not Side_Positions [ i ] then
5177: LD_EXP 24
5181: PUSH
5182: LD_VAR 0 1
5186: ARRAY
5187: NOT
5188: IFFALSE 5192
// continue ;
5190: GO 5174
// wait ( 0 0$3 ) ;
5192: LD_INT 105
5194: PPUSH
5195: CALL_OW 67
// CreateCratesArea ( amount , [ north_west , north_east , south_west , south_east ] [ i ] , true ) ;
5199: LD_VAR 0 2
5203: PPUSH
5204: LD_INT 4
5206: PUSH
5207: LD_INT 5
5209: PUSH
5210: LD_INT 7
5212: PUSH
5213: LD_INT 6
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: PUSH
5222: LD_VAR 0 1
5226: ARRAY
5227: PPUSH
5228: LD_INT 1
5230: PPUSH
5231: CALL_OW 55
// end ;
5235: GO 5174
5237: POP
5238: POP
// enable ;
5239: ENABLE
// end ;
5240: PPOPN 2
5242: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount , is_in ;
5243: LD_OWVAR 1
5247: PUSH
5248: LD_INT 6300
5250: PUSH
5251: LD_LOC 10
5255: MUL
5256: PUSH
5257: LD_LOC 10
5261: PUSH
5262: LD_INT 3150
5264: PUSH
5265: LD_EXP 13
5269: PUSH
5270: LD_INT 70
5272: MUL
5273: MINUS
5274: MUL
5275: PLUS
5276: GREATER
5277: IFFALSE 5413
5279: GO 5281
5281: DISABLE
5282: LD_INT 0
5284: PPUSH
5285: PPUSH
5286: PPUSH
// begin tictac := tictac + 1 ;
5287: LD_ADDR_LOC 10
5291: PUSH
5292: LD_LOC 10
5296: PUSH
5297: LD_INT 1
5299: PLUS
5300: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5301: LD_ADDR_VAR 0 2
5305: PUSH
5306: LD_INT 3
5308: PPUSH
5309: LD_INT 5
5311: PPUSH
5312: CALL_OW 12
5316: ST_TO_ADDR
// for i = 0 to 3 do
5317: LD_ADDR_VAR 0 1
5321: PUSH
5322: DOUBLE
5323: LD_INT 0
5325: DEC
5326: ST_TO_ADDR
5327: LD_INT 3
5329: PUSH
5330: FOR_TO
5331: IFFALSE 5410
// begin is_in := GetResourceArea ( north_west + i , mat_cans ) ;
5333: LD_ADDR_VAR 0 3
5337: PUSH
5338: LD_INT 4
5340: PUSH
5341: LD_VAR 0 1
5345: PLUS
5346: PPUSH
5347: LD_INT 1
5349: PPUSH
5350: CALL_OW 287
5354: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5355: LD_VAR 0 3
5359: PUSH
5360: LD_INT 500
5362: LESS
5363: PUSH
5364: LD_INT 1
5366: PPUSH
5367: LD_INT 10
5369: PPUSH
5370: CALL_OW 12
5374: PUSH
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 100
5382: DIV
5383: GREATER
5384: OR
5385: IFFALSE 5408
// CreateCratesArea ( amount , north_west + i , true ) ;
5387: LD_VAR 0 2
5391: PPUSH
5392: LD_INT 4
5394: PUSH
5395: LD_VAR 0 1
5399: PLUS
5400: PPUSH
5401: LD_INT 1
5403: PPUSH
5404: CALL_OW 55
// end ;
5408: GO 5330
5410: POP
5411: POP
// enable ;
5412: ENABLE
// end ; end_of_file
5413: PPOPN 3
5415: END
// every 20 20$00 trigger apemanNumber do
5416: LD_EXP 37
5420: IFFALSE 5453
5422: GO 5424
5424: DISABLE
// begin enable ;
5425: ENABLE
// if apeLevel >= 8 then
5426: LD_EXP 42
5430: PUSH
5431: LD_INT 8
5433: GREATEREQUAL
5434: IFFALSE 5439
// disable else
5436: DISABLE
5437: GO 5453
// apeLevel := apeLevel + 1 ;
5439: LD_ADDR_EXP 42
5443: PUSH
5444: LD_EXP 42
5448: PUSH
5449: LD_INT 1
5451: PLUS
5452: ST_TO_ADDR
// end ;
5453: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5454: LD_EXP 37
5458: PUSH
5459: LD_EXP 38
5463: LESS
5464: IFFALSE 5604
5466: GO 5468
5468: DISABLE
5469: LD_INT 0
5471: PPUSH
5472: PPUSH
5473: PPUSH
5474: PPUSH
// begin enable ;
5475: ENABLE
// for i := 1 to apemanPos do
5476: LD_ADDR_VAR 0 1
5480: PUSH
5481: DOUBLE
5482: LD_INT 1
5484: DEC
5485: ST_TO_ADDR
5486: LD_EXP 40
5490: PUSH
5491: FOR_TO
5492: IFFALSE 5602
// begin if apemanPlayerCount [ i ] then
5494: LD_EXP 41
5498: PUSH
5499: LD_VAR 0 1
5503: ARRAY
5504: IFFALSE 5600
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5506: LD_EXP 41
5510: PUSH
5511: LD_VAR 0 1
5515: ARRAY
5516: PUSH
5517: LD_EXP 40
5521: PUSH
5522: LD_VAR 0 1
5526: ARRAY
5527: GREATER
5528: IFFALSE 5600
// begin ape := PrepareApeman ;
5530: LD_ADDR_VAR 0 2
5534: PUSH
5535: CALL 6107 0 0
5539: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5540: LD_VAR 0 2
5544: PPUSH
5545: LD_EXP 43
5549: PUSH
5550: LD_VAR 0 1
5554: ARRAY
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5563: LD_ADDR_EXP 40
5567: PUSH
5568: LD_EXP 40
5572: PPUSH
5573: LD_VAR 0 1
5577: PPUSH
5578: LD_EXP 40
5582: PUSH
5583: LD_VAR 0 1
5587: ARRAY
5588: PUSH
5589: LD_VAR 0 2
5593: UNION
5594: PPUSH
5595: CALL_OW 1
5599: ST_TO_ADDR
// end ; end ; end ;
5600: GO 5491
5602: POP
5603: POP
// end ;
5604: PPOPN 4
5606: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5607: LD_INT 0
5609: PPUSH
5610: PPUSH
5611: PPUSH
5612: PPUSH
5613: PPUSH
5614: PPUSH
5615: PPUSH
// playersAmount := 0 ;
5616: LD_ADDR_VAR 0 3
5620: PUSH
5621: LD_INT 0
5623: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5624: LD_ADDR_VAR 0 7
5628: PUSH
5629: LD_INT 8
5631: PUSH
5632: LD_INT 9
5634: PUSH
5635: LD_INT 11
5637: PUSH
5638: LD_INT 10
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5647: LD_ADDR_EXP 43
5651: PUSH
5652: LD_INT 0
5654: PUSH
5655: LD_INT 0
5657: PUSH
5658: LD_INT 0
5660: PUSH
5661: LD_INT 0
5663: PUSH
5664: LD_INT 0
5666: PUSH
5667: LD_INT 0
5669: PUSH
5670: LD_INT 0
5672: PUSH
5673: LD_INT 0
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: LIST
5685: ST_TO_ADDR
// for j = 1 to Side_Positions do
5686: LD_ADDR_VAR 0 4
5690: PUSH
5691: DOUBLE
5692: LD_INT 1
5694: DEC
5695: ST_TO_ADDR
5696: LD_EXP 24
5700: PUSH
5701: FOR_TO
5702: IFFALSE 5769
// if Side_Positions [ j ] then
5704: LD_EXP 24
5708: PUSH
5709: LD_VAR 0 4
5713: ARRAY
5714: IFFALSE 5767
// begin playersAmount := playersAmount + 1 ;
5716: LD_ADDR_VAR 0 3
5720: PUSH
5721: LD_VAR 0 3
5725: PUSH
5726: LD_INT 1
5728: PLUS
5729: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5730: LD_ADDR_EXP 43
5734: PUSH
5735: LD_EXP 43
5739: PPUSH
5740: LD_VAR 0 4
5744: PPUSH
5745: LD_VAR 0 7
5749: PUSH
5750: LD_EXP 24
5754: PUSH
5755: LD_VAR 0 4
5759: ARRAY
5760: ARRAY
5761: PPUSH
5762: CALL_OW 1
5766: ST_TO_ADDR
// end ;
5767: GO 5701
5769: POP
5770: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5771: LD_ADDR_EXP 39
5775: PUSH
5776: LD_INT 3
5778: PUSH
5779: LD_EXP 15
5783: MUL
5784: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5785: LD_ADDR_EXP 37
5789: PUSH
5790: LD_VAR 0 3
5794: PUSH
5795: LD_EXP 39
5799: MUL
5800: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5801: LD_ADDR_EXP 38
5805: PUSH
5806: LD_EXP 37
5810: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5811: LD_ADDR_EXP 40
5815: PUSH
5816: LD_INT 0
5818: PUSH
5819: LD_INT 0
5821: PUSH
5822: LD_INT 0
5824: PUSH
5825: LD_INT 0
5827: PUSH
5828: LD_INT 0
5830: PUSH
5831: LD_INT 0
5833: PUSH
5834: LD_INT 0
5836: PUSH
5837: LD_INT 0
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5850: LD_ADDR_EXP 41
5854: PUSH
5855: LD_INT 0
5857: PUSH
5858: LD_INT 0
5860: PUSH
5861: LD_INT 0
5863: PUSH
5864: LD_INT 0
5866: PUSH
5867: LD_INT 0
5869: PUSH
5870: LD_INT 0
5872: PUSH
5873: LD_INT 0
5875: PUSH
5876: LD_INT 0
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: ST_TO_ADDR
// apeLevel := 1 ;
5889: LD_ADDR_EXP 42
5893: PUSH
5894: LD_INT 1
5896: ST_TO_ADDR
// if not apemanNumber then
5897: LD_EXP 37
5901: NOT
5902: IFFALSE 5906
// exit ;
5904: GO 6102
// for i := 1 to apemanPerPlayer do
5906: LD_ADDR_VAR 0 2
5910: PUSH
5911: DOUBLE
5912: LD_INT 1
5914: DEC
5915: ST_TO_ADDR
5916: LD_EXP 39
5920: PUSH
5921: FOR_TO
5922: IFFALSE 6100
// begin for j := 1 to Side_Positions do
5924: LD_ADDR_VAR 0 4
5928: PUSH
5929: DOUBLE
5930: LD_INT 1
5932: DEC
5933: ST_TO_ADDR
5934: LD_EXP 24
5938: PUSH
5939: FOR_TO
5940: IFFALSE 6096
// if Side_Positions [ j ] then
5942: LD_EXP 24
5946: PUSH
5947: LD_VAR 0 4
5951: ARRAY
5952: IFFALSE 6094
// begin pos := Side_Positions [ j ] ;
5954: LD_ADDR_VAR 0 6
5958: PUSH
5959: LD_EXP 24
5963: PUSH
5964: LD_VAR 0 4
5968: ARRAY
5969: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5970: LD_ADDR_EXP 41
5974: PUSH
5975: LD_EXP 41
5979: PPUSH
5980: LD_VAR 0 4
5984: PPUSH
5985: LD_EXP 41
5989: PUSH
5990: LD_VAR 0 4
5994: ARRAY
5995: PUSH
5996: LD_INT 1
5998: PLUS
5999: PPUSH
6000: CALL_OW 1
6004: ST_TO_ADDR
// ape := PrepareApeman ;
6005: LD_ADDR_VAR 0 5
6009: PUSH
6010: CALL 6107 0 0
6014: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6015: LD_ADDR_EXP 40
6019: PUSH
6020: LD_EXP 40
6024: PPUSH
6025: LD_VAR 0 4
6029: PPUSH
6030: LD_EXP 40
6034: PUSH
6035: LD_VAR 0 4
6039: ARRAY
6040: PPUSH
6041: LD_EXP 40
6045: PUSH
6046: LD_VAR 0 4
6050: ARRAY
6051: PUSH
6052: LD_INT 1
6054: PLUS
6055: PPUSH
6056: LD_VAR 0 5
6060: PPUSH
6061: CALL_OW 1
6065: PPUSH
6066: CALL_OW 1
6070: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6071: LD_VAR 0 5
6075: PPUSH
6076: LD_EXP 43
6080: PUSH
6081: LD_VAR 0 4
6085: ARRAY
6086: PPUSH
6087: LD_INT 0
6089: PPUSH
6090: CALL_OW 49
// end ;
6094: GO 5939
6096: POP
6097: POP
// end ;
6098: GO 5921
6100: POP
6101: POP
// end ;
6102: LD_VAR 0 1
6106: RET
// export function PrepareApeman ; var bonus ; begin
6107: LD_INT 0
6109: PPUSH
6110: PPUSH
// uc_side := 0 ;
6111: LD_ADDR_OWVAR 20
6115: PUSH
6116: LD_INT 0
6118: ST_TO_ADDR
// uc_nation := 0 ;
6119: LD_ADDR_OWVAR 21
6123: PUSH
6124: LD_INT 0
6126: ST_TO_ADDR
// InitHc ;
6127: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6131: LD_ADDR_VAR 0 2
6135: PUSH
6136: LD_INT 1
6138: NEG
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: PUSH
6151: LD_OWVAR 1
6155: PUSH
6156: LD_INT 3
6158: MOD
6159: PUSH
6160: LD_INT 1
6162: PLUS
6163: ARRAY
6164: ST_TO_ADDR
// hc_class := class_apeman ;
6165: LD_ADDR_OWVAR 28
6169: PUSH
6170: LD_INT 12
6172: ST_TO_ADDR
// hc_gallery :=  ;
6173: LD_ADDR_OWVAR 33
6177: PUSH
6178: LD_STRING 
6180: ST_TO_ADDR
// hc_name :=  ;
6181: LD_ADDR_OWVAR 26
6185: PUSH
6186: LD_STRING 
6188: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6189: LD_ADDR_OWVAR 31
6193: PUSH
6194: LD_EXP 42
6198: PUSH
6199: LD_VAR 0 2
6203: PLUS
6204: PUSH
6205: LD_EXP 42
6209: PUSH
6210: LD_VAR 0 2
6214: PLUS
6215: PUSH
6216: LD_EXP 42
6220: PUSH
6221: LD_VAR 0 2
6225: PLUS
6226: PUSH
6227: LD_EXP 42
6231: PUSH
6232: LD_VAR 0 2
6236: PLUS
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6244: LD_ADDR_OWVAR 35
6248: PUSH
6249: LD_INT 10
6251: PUSH
6252: LD_VAR 0 2
6256: MUL
6257: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6258: LD_ADDR_OWVAR 29
6262: PUSH
6263: LD_INT 12
6265: PUSH
6266: LD_INT 10
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: ST_TO_ADDR
// result := CreateHuman ;
6273: LD_ADDR_VAR 0 1
6277: PUSH
6278: CALL_OW 44
6282: ST_TO_ADDR
// end ;
6283: LD_VAR 0 1
6287: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6288: LD_INT 0
6290: PPUSH
6291: PPUSH
6292: PPUSH
// if not ape then
6293: LD_VAR 0 1
6297: NOT
6298: IFFALSE 6302
// exit ;
6300: GO 6427
// side := GetSide ( ape ) ;
6302: LD_ADDR_VAR 0 3
6306: PUSH
6307: LD_VAR 0 1
6311: PPUSH
6312: CALL_OW 255
6316: ST_TO_ADDR
// if not side then
6317: LD_VAR 0 3
6321: NOT
6322: IFFALSE 6376
// begin for i = 1 to apemanPos do
6324: LD_ADDR_VAR 0 4
6328: PUSH
6329: DOUBLE
6330: LD_INT 1
6332: DEC
6333: ST_TO_ADDR
6334: LD_EXP 40
6338: PUSH
6339: FOR_TO
6340: IFFALSE 6374
// if ape in apemanPos [ i ] then
6342: LD_VAR 0 1
6346: PUSH
6347: LD_EXP 40
6351: PUSH
6352: LD_VAR 0 4
6356: ARRAY
6357: IN
6358: IFFALSE 6372
// begin side := i ;
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_VAR 0 4
6369: ST_TO_ADDR
// break ;
6370: GO 6374
// end ;
6372: GO 6339
6374: POP
6375: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6376: LD_ADDR_EXP 40
6380: PUSH
6381: LD_EXP 40
6385: PPUSH
6386: LD_VAR 0 3
6390: PPUSH
6391: LD_EXP 40
6395: PUSH
6396: LD_VAR 0 3
6400: ARRAY
6401: PUSH
6402: LD_VAR 0 1
6406: DIFF
6407: PPUSH
6408: CALL_OW 1
6412: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6413: LD_ADDR_EXP 37
6417: PUSH
6418: LD_EXP 37
6422: PUSH
6423: LD_INT 1
6425: MINUS
6426: ST_TO_ADDR
// end ; end_of_file
6427: LD_VAR 0 2
6431: RET
// var respawn_queue ; export function init_respawn ; begin
6432: LD_INT 0
6434: PPUSH
// if not def_people_respawning then
6435: LD_EXP 62
6439: NOT
6440: IFFALSE 6444
// exit ;
6442: GO 6486
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6444: LD_ADDR_LOC 11
6448: PUSH
6449: LD_INT 0
6451: PUSH
6452: LD_INT 0
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: LD_INT 0
6469: PUSH
6470: LD_INT 0
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: ST_TO_ADDR
// enable ( 10 ) ;
6483: LD_INT 10
6485: ENABLE_MARKED
// end ;
6486: LD_VAR 0 1
6490: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6491: GO 6493
6493: DISABLE
6494: LD_INT 0
6496: PPUSH
6497: PPUSH
6498: PPUSH
6499: PPUSH
// begin for side = 1 to Side_Positions do
6500: LD_ADDR_VAR 0 4
6504: PUSH
6505: DOUBLE
6506: LD_INT 1
6508: DEC
6509: ST_TO_ADDR
6510: LD_EXP 24
6514: PUSH
6515: FOR_TO
6516: IFFALSE 6682
// if Side_Positions [ side ] then
6518: LD_EXP 24
6522: PUSH
6523: LD_VAR 0 4
6527: ARRAY
6528: IFFALSE 6680
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6530: LD_ADDR_VAR 0 2
6534: PUSH
6535: LD_INT 22
6537: PUSH
6538: LD_VAR 0 4
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 21
6549: PUSH
6550: LD_INT 1
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 3
6559: PUSH
6560: LD_INT 23
6562: PUSH
6563: LD_INT 0
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: PPUSH
6576: CALL_OW 69
6580: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6581: LD_VAR 0 2
6585: PUSH
6586: LD_EXP 9
6590: LESS
6591: PUSH
6592: LD_LOC 11
6596: PUSH
6597: LD_VAR 0 4
6601: ARRAY
6602: NOT
6603: AND
6604: IFFALSE 6620
// set_queue ( side , TICK ) ;
6606: LD_VAR 0 4
6610: PPUSH
6611: LD_OWVAR 1
6615: PPUSH
6616: CALL 6919 0 2
// time := TICK - respawn_queue [ side ] ;
6620: LD_ADDR_VAR 0 3
6624: PUSH
6625: LD_OWVAR 1
6629: PUSH
6630: LD_LOC 11
6634: PUSH
6635: LD_VAR 0 4
6639: ARRAY
6640: MINUS
6641: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6642: LD_LOC 11
6646: PUSH
6647: LD_VAR 0 4
6651: ARRAY
6652: PUSH
6653: LD_VAR 0 3
6657: PUSH
6658: LD_EXP 16
6662: GREATER
6663: AND
6664: IFFALSE 6680
// respawn_character ( side , time ) ;
6666: LD_VAR 0 4
6670: PPUSH
6671: LD_VAR 0 3
6675: PPUSH
6676: CALL 6688 0 2
// end ;
6680: GO 6515
6682: POP
6683: POP
// enable ;
6684: ENABLE
// end ;
6685: PPOPN 4
6687: END
// function respawn_character ( side , time ) ; var dep ; begin
6688: LD_INT 0
6690: PPUSH
6691: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6692: LD_INT 0
6694: PPUSH
6695: LD_INT 1
6697: PPUSH
6698: CALL_OW 12
6702: PUSH
6703: LD_VAR 0 2
6707: PUSH
6708: LD_EXP 17
6712: LESS
6713: AND
6714: IFFALSE 6718
// exit ;
6716: GO 6914
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6718: LD_ADDR_VAR 0 4
6722: PUSH
6723: LD_INT 22
6725: PUSH
6726: LD_VAR 0 1
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 2
6737: PUSH
6738: LD_INT 30
6740: PUSH
6741: LD_INT 0
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 30
6750: PUSH
6751: LD_INT 1
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: LIST
6762: PUSH
6763: LD_INT 50
6765: PUSH
6766: EMPTY
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: ST_TO_ADDR
// if not dep then
6779: LD_VAR 0 4
6783: NOT
6784: IFFALSE 6790
// exit else
6786: GO 6914
6788: GO 6814
// dep := dep [ Rand ( 1 , dep ) ] ;
6790: LD_ADDR_VAR 0 4
6794: PUSH
6795: LD_VAR 0 4
6799: PUSH
6800: LD_INT 1
6802: PPUSH
6803: LD_VAR 0 4
6807: PPUSH
6808: CALL_OW 12
6812: ARRAY
6813: ST_TO_ADDR
// uc_side := side ;
6814: LD_ADDR_OWVAR 20
6818: PUSH
6819: LD_VAR 0 1
6823: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6824: LD_ADDR_OWVAR 21
6828: PUSH
6829: LD_EXP 25
6833: PUSH
6834: LD_VAR 0 1
6838: ARRAY
6839: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6840: LD_INT 0
6842: PPUSH
6843: LD_INT 0
6845: PPUSH
6846: LD_EXP 10
6850: PUSH
6851: LD_INT 2
6853: DIV
6854: PPUSH
6855: CALL_OW 380
// hc_importance := 0 ;
6859: LD_ADDR_OWVAR 32
6863: PUSH
6864: LD_INT 0
6866: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6867: CALL_OW 44
6871: PPUSH
6872: LD_VAR 0 4
6876: PPUSH
6877: CALL_OW 250
6881: PPUSH
6882: LD_VAR 0 4
6886: PPUSH
6887: CALL_OW 251
6891: PPUSH
6892: LD_INT 10
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: CALL_OW 50
// set_queue ( side , 0 ) ;
6902: LD_VAR 0 1
6906: PPUSH
6907: LD_INT 0
6909: PPUSH
6910: CALL 6919 0 2
// end ;
6914: LD_VAR 0 3
6918: RET
// function set_queue ( side , time ) ; begin
6919: LD_INT 0
6921: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6922: LD_ADDR_LOC 11
6926: PUSH
6927: LD_LOC 11
6931: PPUSH
6932: LD_VAR 0 1
6936: PPUSH
6937: CALL_OW 3
6941: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6942: LD_ADDR_LOC 11
6946: PUSH
6947: LD_LOC 11
6951: PPUSH
6952: LD_VAR 0 1
6956: PPUSH
6957: LD_VAR 0 2
6961: PPUSH
6962: CALL_OW 2
6966: ST_TO_ADDR
// end ; end_of_file
6967: LD_VAR 0 3
6971: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6972: LD_VAR 0 1
6976: PPUSH
6977: CALL_OW 266
6981: PUSH
6982: LD_INT 0
6984: PUSH
6985: LD_INT 1
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: IN
6992: IFFALSE 7017
// SetBName ( b , @ & GetSide ( b ) ) ;
6994: LD_VAR 0 1
6998: PPUSH
6999: LD_STRING @
7001: PUSH
7002: LD_VAR 0 1
7006: PPUSH
7007: CALL_OW 255
7011: STR
7012: PPUSH
7013: CALL_OW 500
// if def_game_rules then
7017: LD_EXP 51
7021: IFFALSE 7058
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7023: LD_VAR 0 1
7027: PPUSH
7028: LD_VAR 0 1
7032: PPUSH
7033: CALL_OW 266
7037: PPUSH
7038: LD_VAR 0 1
7042: PPUSH
7043: CALL_OW 255
7047: PPUSH
7048: LD_INT 0
7050: PPUSH
7051: LD_INT 1
7053: PPUSH
7054: CALL 16883 0 5
// end ;
7058: PPOPN 2
7060: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7061: LD_VAR 0 1
7065: PPUSH
7066: CALL_OW 266
7070: PUSH
7071: LD_INT 0
7073: PUSH
7074: LD_INT 1
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: IN
7081: IFFALSE 7106
// SetBName ( b , @ & GetSide ( b ) ) ;
7083: LD_VAR 0 1
7087: PPUSH
7088: LD_STRING @
7090: PUSH
7091: LD_VAR 0 1
7095: PPUSH
7096: CALL_OW 255
7100: STR
7101: PPUSH
7102: CALL_OW 500
// if def_game_rules then
7106: LD_EXP 51
7110: IFFALSE 7149
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7112: LD_VAR 0 1
7116: PPUSH
7117: LD_VAR 0 1
7121: PPUSH
7122: CALL_OW 266
7126: PPUSH
7127: LD_VAR 0 1
7131: PPUSH
7132: CALL_OW 255
7136: PPUSH
7137: LD_VAR 0 2
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL 16883 0 5
// end ;
7149: PPOPN 3
7151: END
// on VehicleConstructed ( veh , fac ) do var side ;
7152: LD_INT 0
7154: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7155: LD_VAR 0 1
7159: PPUSH
7160: CALL_OW 263
7164: PUSH
7165: LD_INT 5
7167: EQUAL
7168: IFFALSE 7310
// begin side := GetSide ( veh ) ;
7170: LD_ADDR_VAR 0 3
7174: PUSH
7175: LD_VAR 0 1
7179: PPUSH
7180: CALL_OW 255
7184: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7185: LD_ADDR_EXP 40
7189: PUSH
7190: LD_EXP 40
7194: PPUSH
7195: LD_VAR 0 3
7199: PPUSH
7200: LD_EXP 40
7204: PUSH
7205: LD_VAR 0 3
7209: ARRAY
7210: PPUSH
7211: LD_INT 52
7213: PUSH
7214: EMPTY
7215: LIST
7216: PPUSH
7217: CALL_OW 72
7221: PUSH
7222: LD_INT 22
7224: PUSH
7225: LD_VAR 0 3
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 2
7236: PUSH
7237: LD_INT 33
7239: PUSH
7240: LD_INT 5
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 12
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 25
7259: PUSH
7260: LD_INT 15
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 25
7269: PUSH
7270: LD_INT 16
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 17
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PPUSH
7299: CALL_OW 69
7303: UNION
7304: PPUSH
7305: CALL_OW 1
7309: ST_TO_ADDR
// end ; end ;
7310: PPOPN 3
7312: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7313: LD_INT 0
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7319: LD_VAR 0 1
7323: PPUSH
7324: CALL_OW 257
7328: PUSH
7329: LD_INT 12
7331: PUSH
7332: LD_INT 15
7334: PUSH
7335: LD_INT 17
7337: PUSH
7338: LD_INT 16
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: IN
7347: PUSH
7348: LD_VAR 0 1
7352: PPUSH
7353: CALL_OW 263
7357: PUSH
7358: LD_INT 5
7360: EQUAL
7361: OR
7362: IFFALSE 7373
// ApeKilled ( j ) ;
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL 6288 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7373: LD_VAR 0 1
7377: PPUSH
7378: CALL_OW 266
7382: PUSH
7383: LD_INT 0
7385: PUSH
7386: LD_INT 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: IN
7393: IFFALSE 7475
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7395: LD_ADDR_VAR 0 4
7399: PUSH
7400: LD_EXP 24
7404: PUSH
7405: LD_VAR 0 1
7409: PPUSH
7410: CALL_OW 255
7414: ARRAY
7415: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7416: LD_ADDR_VAR 0 2
7420: PUSH
7421: LD_EXP 33
7425: PUSH
7426: LD_VAR 0 4
7430: ARRAY
7431: PUSH
7432: LD_INT 1
7434: ARRAY
7435: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7436: LD_ADDR_VAR 0 3
7440: PUSH
7441: LD_EXP 33
7445: PUSH
7446: LD_VAR 0 4
7450: ARRAY
7451: PUSH
7452: LD_INT 2
7454: ARRAY
7455: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7456: LD_VAR 0 2
7460: PPUSH
7461: LD_VAR 0 3
7465: PPUSH
7466: CALL_OW 420
7470: PPUSH
7471: CALL_OW 419
// end ; if def_game_rules then
7475: LD_EXP 51
7479: IFFALSE 7578
// if ( GetType ( j ) = 3 ) then
7481: LD_VAR 0 1
7485: PPUSH
7486: CALL_OW 247
7490: PUSH
7491: LD_INT 3
7493: EQUAL
7494: IFFALSE 7534
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7496: LD_VAR 0 1
7500: PPUSH
7501: LD_VAR 0 1
7505: PPUSH
7506: CALL_OW 266
7510: PPUSH
7511: LD_VAR 0 1
7515: PPUSH
7516: CALL_OW 255
7520: PPUSH
7521: LD_INT 0
7523: PPUSH
7524: LD_INT 1
7526: NEG
7527: PPUSH
7528: CALL 16883 0 5
7532: GO 7578
// if ( GetChassis ( j ) = 25 ) then
7534: LD_VAR 0 1
7538: PPUSH
7539: CALL_OW 265
7543: PUSH
7544: LD_INT 25
7546: EQUAL
7547: IFFALSE 7578
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7549: LD_VAR 0 1
7553: PPUSH
7554: LD_INT 37
7556: PPUSH
7557: LD_VAR 0 1
7561: PPUSH
7562: CALL_OW 255
7566: PPUSH
7567: LD_INT 0
7569: PPUSH
7570: LD_INT 1
7572: NEG
7573: PPUSH
7574: CALL 16883 0 5
// end ;
7578: PPOPN 5
7580: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7581: LD_EXP 51
7585: PUSH
7586: LD_VAR 0 1
7590: PPUSH
7591: CALL_OW 265
7595: PUSH
7596: LD_INT 25
7598: EQUAL
7599: AND
7600: IFFALSE 7632
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7602: LD_VAR 0 1
7606: PPUSH
7607: LD_INT 37
7609: PPUSH
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 255
7619: PPUSH
7620: LD_VAR 0 3
7624: PPUSH
7625: LD_INT 1
7627: PPUSH
7628: CALL 16883 0 5
// end ;
7632: PPOPN 4
7634: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7635: LD_VAR 0 1
7639: PPUSH
7640: LD_VAR 0 2
7644: PPUSH
7645: LD_VAR 0 3
7649: PPUSH
7650: LD_OWVAR 2
7654: PPUSH
7655: CALL 18415 0 4
7659: PPOPN 3
7661: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
7662: LD_INT 0
7664: PPUSH
7665: PPUSH
7666: PPUSH
7667: PPUSH
7668: PPUSH
7669: PPUSH
// artefact_number := 3 ;
7670: LD_ADDR_EXP 44
7674: PUSH
7675: LD_INT 3
7677: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
7678: LD_ADDR_EXP 45
7682: PUSH
7683: LD_INT 1
7685: PUSH
7686: LD_INT 0
7688: PUSH
7689: LD_INT 2
7691: PUSH
7692: LD_INT 0
7694: PUSH
7695: LD_INT 3
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
7705: LD_ADDR_EXP 46
7709: PUSH
7710: LD_INT 1
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 5
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
7724: LD_ADDR_VAR 0 2
7728: PUSH
7729: LD_INT 1
7731: PUSH
7732: LD_INT 4
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 2
7741: PUSH
7742: LD_INT 5
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 3
7751: PUSH
7752: LD_INT 9
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
7764: LD_ADDR_VAR 0 3
7768: PUSH
7769: LD_INT 3
7771: PUSH
7772: LD_INT 4
7774: PUSH
7775: LD_INT 3
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
7783: LD_ADDR_VAR 0 4
7787: PUSH
7788: LD_INT 150
7790: PUSH
7791: LD_INT 250
7793: PUSH
7794: LD_INT 400
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: LIST
7801: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
7802: LD_ADDR_VAR 0 5
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: LD_INT 10
7812: PUSH
7813: LD_INT 20
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
7821: LD_ADDR_VAR 0 6
7825: PUSH
7826: LD_INT 6
7828: PUSH
7829: LD_INT 18
7831: PUSH
7832: LD_INT 50
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: LIST
7839: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
7840: LD_VAR 0 2
7844: PPUSH
7845: LD_VAR 0 3
7849: PPUSH
7850: LD_VAR 0 4
7854: PPUSH
7855: LD_VAR 0 5
7859: PPUSH
7860: LD_VAR 0 6
7864: PPUSH
7865: CALL 7874 0 5
// end ;
7869: LD_VAR 0 1
7873: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
7874: LD_INT 0
7876: PPUSH
7877: PPUSH
7878: PPUSH
7879: PPUSH
7880: PPUSH
// disable ( 1 ) ;
7881: LD_INT 1
7883: DISABLE_MARKED
// disable ( 5 ) ;
7884: LD_INT 5
7886: DISABLE_MARKED
// disable ( 6 ) ;
7887: LD_INT 6
7889: DISABLE_MARKED
// disable ( 7 ) ;
7890: LD_INT 7
7892: DISABLE_MARKED
// for side = 1 to 8 do
7893: LD_ADDR_VAR 0 9
7897: PUSH
7898: DOUBLE
7899: LD_INT 1
7901: DEC
7902: ST_TO_ADDR
7903: LD_INT 8
7905: PUSH
7906: FOR_TO
7907: IFFALSE 7923
// SetArtifactRes ( side , state_enabled ) ;
7909: LD_VAR 0 9
7913: PPUSH
7914: LD_INT 1
7916: PPUSH
7917: CALL_OW 467
7921: GO 7906
7923: POP
7924: POP
// for un = 0 to ( artefact_number - 1 ) do
7925: LD_ADDR_VAR 0 7
7929: PUSH
7930: DOUBLE
7931: LD_INT 0
7933: DEC
7934: ST_TO_ADDR
7935: LD_EXP 44
7939: PUSH
7940: LD_INT 1
7942: MINUS
7943: PUSH
7944: FOR_TO
7945: IFFALSE 8343
// begin base := un * 100 ;
7947: LD_ADDR_VAR 0 10
7951: PUSH
7952: LD_VAR 0 7
7956: PUSH
7957: LD_INT 100
7959: MUL
7960: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
7961: LD_VAR 0 10
7965: PUSH
7966: LD_INT 1
7968: PLUS
7969: PPUSH
7970: LD_VAR 0 1
7974: PUSH
7975: LD_VAR 0 7
7979: PUSH
7980: LD_INT 1
7982: PLUS
7983: ARRAY
7984: PUSH
7985: LD_INT 1
7987: ARRAY
7988: PPUSH
7989: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7993: LD_VAR 0 10
7997: PUSH
7998: LD_INT 2
8000: PLUS
8001: PPUSH
8002: LD_VAR 0 1
8006: PUSH
8007: LD_VAR 0 7
8011: PUSH
8012: LD_INT 1
8014: PLUS
8015: ARRAY
8016: PUSH
8017: LD_INT 2
8019: ARRAY
8020: PPUSH
8021: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
8025: LD_VAR 0 10
8029: PUSH
8030: LD_INT 3
8032: PLUS
8033: PPUSH
8034: LD_VAR 0 2
8038: PUSH
8039: LD_VAR 0 7
8043: PUSH
8044: LD_INT 1
8046: PLUS
8047: ARRAY
8048: PPUSH
8049: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
8053: LD_VAR 0 10
8057: PUSH
8058: LD_INT 5
8060: PLUS
8061: PPUSH
8062: LD_VAR 0 3
8066: PUSH
8067: LD_VAR 0 7
8071: PUSH
8072: LD_INT 1
8074: PLUS
8075: ARRAY
8076: PPUSH
8077: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
8081: LD_VAR 0 10
8085: PUSH
8086: LD_INT 6
8088: PLUS
8089: PPUSH
8090: LD_VAR 0 4
8094: PUSH
8095: LD_VAR 0 7
8099: PUSH
8100: LD_INT 1
8102: PLUS
8103: ARRAY
8104: PPUSH
8105: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
8109: LD_VAR 0 10
8113: PUSH
8114: LD_INT 7
8116: PLUS
8117: PPUSH
8118: LD_VAR 0 5
8122: PUSH
8123: LD_VAR 0 7
8127: PUSH
8128: LD_INT 1
8130: PLUS
8131: ARRAY
8132: PPUSH
8133: CALL_OW 109
// SetTag ( base + 08 , false ) ;
8137: LD_VAR 0 10
8141: PUSH
8142: LD_INT 8
8144: PLUS
8145: PPUSH
8146: LD_INT 0
8148: PPUSH
8149: CALL_OW 109
// SetTag ( base + 09 , false ) ;
8153: LD_VAR 0 10
8157: PUSH
8158: LD_INT 9
8160: PLUS
8161: PPUSH
8162: LD_INT 0
8164: PPUSH
8165: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
8169: LD_VAR 0 10
8173: PUSH
8174: LD_INT 11
8176: PLUS
8177: PPUSH
8178: LD_INT 0
8180: PPUSH
8181: CALL_OW 109
// SetTag ( base + 12 , false ) ;
8185: LD_VAR 0 10
8189: PUSH
8190: LD_INT 12
8192: PLUS
8193: PPUSH
8194: LD_INT 0
8196: PPUSH
8197: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8201: LD_VAR 0 10
8205: PUSH
8206: LD_INT 13
8208: PLUS
8209: PPUSH
8210: LD_INT 0
8212: PPUSH
8213: CALL_OW 109
// for i = 0 to 7 do
8217: LD_ADDR_VAR 0 8
8221: PUSH
8222: DOUBLE
8223: LD_INT 0
8225: DEC
8226: ST_TO_ADDR
8227: LD_INT 7
8229: PUSH
8230: FOR_TO
8231: IFFALSE 8339
// begin SetTag ( base + i * 10 + 21 , false ) ;
8233: LD_VAR 0 10
8237: PUSH
8238: LD_VAR 0 8
8242: PUSH
8243: LD_INT 10
8245: MUL
8246: PLUS
8247: PUSH
8248: LD_INT 21
8250: PLUS
8251: PPUSH
8252: LD_INT 0
8254: PPUSH
8255: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
8259: LD_VAR 0 10
8263: PUSH
8264: LD_VAR 0 8
8268: PUSH
8269: LD_INT 10
8271: MUL
8272: PLUS
8273: PUSH
8274: LD_INT 22
8276: PLUS
8277: PPUSH
8278: LD_INT 0
8280: PPUSH
8281: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
8285: LD_VAR 0 10
8289: PUSH
8290: LD_VAR 0 8
8294: PUSH
8295: LD_INT 10
8297: MUL
8298: PLUS
8299: PUSH
8300: LD_INT 23
8302: PLUS
8303: PPUSH
8304: LD_INT 0
8306: PPUSH
8307: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
8311: LD_VAR 0 10
8315: PUSH
8316: LD_VAR 0 8
8320: PUSH
8321: LD_INT 10
8323: MUL
8324: PLUS
8325: PUSH
8326: LD_INT 25
8328: PLUS
8329: PPUSH
8330: LD_INT 0
8332: PPUSH
8333: CALL_OW 109
// end ;
8337: GO 8230
8339: POP
8340: POP
// end ;
8341: GO 7944
8343: POP
8344: POP
// enable ( 20 ) ;
8345: LD_INT 20
8347: ENABLE_MARKED
// labs_in_use := [ ] ;
8348: LD_ADDR_EXP 47
8352: PUSH
8353: EMPTY
8354: ST_TO_ADDR
// if def_artefact_one then
8355: LD_EXP 1
8359: IFFALSE 8386
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
8361: LD_INT 4
8363: PPUSH
8364: LD_EXP 46
8368: PUSH
8369: LD_INT 1
8371: ARRAY
8372: PPUSH
8373: LD_INT 16
8375: PPUSH
8376: LD_INT 0
8378: PPUSH
8379: CALL_OW 59
// enable ( 5 ) ;
8383: LD_INT 5
8385: ENABLE_MARKED
// end ; if def_artefact_two then
8386: LD_EXP 2
8390: IFFALSE 8417
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
8392: LD_INT 4
8394: PPUSH
8395: LD_EXP 46
8399: PUSH
8400: LD_INT 2
8402: ARRAY
8403: PPUSH
8404: LD_INT 16
8406: PPUSH
8407: LD_INT 0
8409: PPUSH
8410: CALL_OW 59
// enable ( 6 ) ;
8414: LD_INT 6
8416: ENABLE_MARKED
// end ; if def_artefact_three then
8417: LD_EXP 3
8421: IFFALSE 8448
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
8423: LD_INT 4
8425: PPUSH
8426: LD_EXP 46
8430: PUSH
8431: LD_INT 3
8433: ARRAY
8434: PPUSH
8435: LD_INT 16
8437: PPUSH
8438: LD_INT 0
8440: PPUSH
8441: CALL_OW 59
// enable ( 7 ) ;
8445: LD_INT 7
8447: ENABLE_MARKED
// end ; end ;
8448: LD_VAR 0 6
8452: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
8453: LD_INT 0
8455: PPUSH
8456: PPUSH
// begin art := artefact_num [ size ] ;
8457: LD_ADDR_VAR 0 3
8461: PUSH
8462: LD_EXP 45
8466: PUSH
8467: LD_VAR 0 2
8471: ARRAY
8472: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8473: LD_ADDR_VAR 0 4
8477: PUSH
8478: LD_VAR 0 3
8482: PUSH
8483: LD_INT 1
8485: MINUS
8486: PUSH
8487: LD_INT 100
8489: MUL
8490: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
8491: LD_VAR 0 4
8495: PUSH
8496: LD_INT 9
8498: PLUS
8499: PPUSH
8500: LD_INT 0
8502: PPUSH
8503: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8507: LD_VAR 0 4
8511: PUSH
8512: LD_INT 13
8514: PLUS
8515: PPUSH
8516: LD_INT 0
8518: PPUSH
8519: CALL_OW 109
// Init_Lab ( art ) ;
8523: LD_VAR 0 3
8527: PPUSH
8528: CALL 10004 0 1
// end ;
8532: PPOPN 4
8534: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
8535: LD_INT 0
8537: PPUSH
8538: PPUSH
8539: PPUSH
// begin art := artefact_num [ size ] ;
8540: LD_ADDR_VAR 0 3
8544: PUSH
8545: LD_EXP 45
8549: PUSH
8550: LD_VAR 0 2
8554: ARRAY
8555: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8556: LD_ADDR_VAR 0 4
8560: PUSH
8561: LD_VAR 0 3
8565: PUSH
8566: LD_INT 1
8568: MINUS
8569: PUSH
8570: LD_INT 100
8572: MUL
8573: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
8574: LD_VAR 0 4
8578: PUSH
8579: LD_INT 9
8581: PLUS
8582: PPUSH
8583: LD_INT 1
8585: PPUSH
8586: CALL_OW 109
// SetTag ( base + 13 , un ) ;
8590: LD_VAR 0 4
8594: PUSH
8595: LD_INT 13
8597: PLUS
8598: PPUSH
8599: LD_VAR 0 1
8603: PPUSH
8604: CALL_OW 109
// if GetTag ( base + 11 ) then
8608: LD_VAR 0 4
8612: PUSH
8613: LD_INT 11
8615: PLUS
8616: PPUSH
8617: CALL_OW 110
8621: IFFALSE 8784
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
8623: LD_ADDR_VAR 0 5
8627: PUSH
8628: LD_VAR 0 4
8632: PUSH
8633: LD_INT 11
8635: PLUS
8636: PPUSH
8637: CALL_OW 110
8641: PPUSH
8642: CALL_OW 255
8646: ST_TO_ADDR
// if GetTag ( base + 12 ) then
8647: LD_VAR 0 4
8651: PUSH
8652: LD_INT 12
8654: PLUS
8655: PPUSH
8656: CALL_OW 110
8660: IFFALSE 8728
// begin ComCancel ( GetTag ( base + 11 ) ) ;
8662: LD_VAR 0 4
8666: PUSH
8667: LD_INT 11
8669: PLUS
8670: PPUSH
8671: CALL_OW 110
8675: PPUSH
8676: CALL_OW 127
// wait ( 5 ) ;
8680: LD_INT 5
8682: PPUSH
8683: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
8687: LD_ADDR_EXP 47
8691: PUSH
8692: LD_EXP 47
8696: PUSH
8697: LD_VAR 0 4
8701: PUSH
8702: LD_INT 11
8704: PLUS
8705: PPUSH
8706: CALL_OW 110
8710: DIFF
8711: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
8712: LD_VAR 0 4
8716: PUSH
8717: LD_INT 12
8719: PLUS
8720: PPUSH
8721: LD_INT 0
8723: PPUSH
8724: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
8728: LD_VAR 0 4
8732: PUSH
8733: LD_VAR 0 5
8737: PUSH
8738: LD_INT 10
8740: MUL
8741: PLUS
8742: PUSH
8743: LD_INT 11
8745: PLUS
8746: PPUSH
8747: CALL_OW 110
8751: NOT
8752: IFFALSE 8768
// DeInit_Lab ( side , art ) ;
8754: LD_VAR 0 5
8758: PPUSH
8759: LD_VAR 0 3
8763: PPUSH
8764: CALL 10540 0 2
// SetTag ( base + 11 , 0 ) ;
8768: LD_VAR 0 4
8772: PUSH
8773: LD_INT 11
8775: PLUS
8776: PPUSH
8777: LD_INT 0
8779: PPUSH
8780: CALL_OW 109
// end ; end ;
8784: PPOPN 5
8786: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
8787: LD_INT 0
8789: PPUSH
8790: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8791: LD_ADDR_VAR 0 3
8795: PUSH
8796: LD_VAR 0 1
8800: PPUSH
8801: CALL_OW 255
8805: PUSH
8806: LD_INT 1
8808: MINUS
8809: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8810: LD_ADDR_VAR 0 2
8814: PUSH
8815: DOUBLE
8816: LD_INT 0
8818: DEC
8819: ST_TO_ADDR
8820: LD_EXP 44
8824: PUSH
8825: LD_INT 1
8827: MINUS
8828: PUSH
8829: FOR_TO
8830: IFFALSE 8872
// if lab = GetTag ( un * 100 + 11 ) then
8832: LD_VAR 0 1
8836: PUSH
8837: LD_VAR 0 2
8841: PUSH
8842: LD_INT 100
8844: MUL
8845: PUSH
8846: LD_INT 11
8848: PLUS
8849: PPUSH
8850: CALL_OW 110
8854: EQUAL
8855: IFFALSE 8870
// Init_Lab ( un + 1 ) ;
8857: LD_VAR 0 2
8861: PUSH
8862: LD_INT 1
8864: PLUS
8865: PPUSH
8866: CALL 10004 0 1
8870: GO 8829
8872: POP
8873: POP
// end ;
8874: PPOPN 3
8876: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
8877: LD_INT 0
8879: PPUSH
8880: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8881: LD_ADDR_VAR 0 4
8885: PUSH
8886: LD_VAR 0 1
8890: PPUSH
8891: CALL_OW 255
8895: PUSH
8896: LD_INT 1
8898: MINUS
8899: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8900: LD_ADDR_VAR 0 3
8904: PUSH
8905: DOUBLE
8906: LD_INT 0
8908: DEC
8909: ST_TO_ADDR
8910: LD_EXP 44
8914: PUSH
8915: LD_INT 1
8917: MINUS
8918: PUSH
8919: FOR_TO
8920: IFFALSE 9038
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8922: LD_VAR 0 3
8926: PUSH
8927: LD_INT 100
8929: MUL
8930: PUSH
8931: LD_INT 11
8933: PLUS
8934: PPUSH
8935: CALL_OW 110
8939: PUSH
8940: LD_VAR 0 1
8944: EQUAL
8945: PUSH
8946: LD_VAR 0 3
8950: PUSH
8951: LD_INT 100
8953: MUL
8954: PUSH
8955: LD_INT 12
8957: PLUS
8958: PPUSH
8959: CALL_OW 110
8963: AND
8964: IFFALSE 9036
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
8966: LD_VAR 0 3
8970: PUSH
8971: LD_INT 100
8973: MUL
8974: PUSH
8975: LD_VAR 0 4
8979: PUSH
8980: LD_INT 10
8982: MUL
8983: PLUS
8984: PUSH
8985: LD_INT 22
8987: PLUS
8988: PPUSH
8989: LD_VAR 0 2
8993: PPUSH
8994: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8998: LD_VAR 0 3
9002: PUSH
9003: LD_INT 100
9005: MUL
9006: PUSH
9007: LD_INT 12
9009: PLUS
9010: PPUSH
9011: LD_INT 0
9013: PPUSH
9014: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
9018: LD_ADDR_EXP 47
9022: PUSH
9023: LD_EXP 47
9027: PUSH
9028: LD_VAR 0 1
9032: DIFF
9033: ST_TO_ADDR
// break ;
9034: GO 9038
// end ;
9036: GO 8919
9038: POP
9039: POP
// Update_Artefact ( lab ) ;
9040: LD_VAR 0 1
9044: PPUSH
9045: CALL 10679 0 1
// end ;
9049: PPOPN 4
9051: END
// on SpecResearchComplete ( lab ) do var un , side ;
9052: LD_INT 0
9054: PPUSH
9055: PPUSH
// begin side := GetSide ( lab ) - 1 ;
9056: LD_ADDR_VAR 0 3
9060: PUSH
9061: LD_VAR 0 1
9065: PPUSH
9066: CALL_OW 255
9070: PUSH
9071: LD_INT 1
9073: MINUS
9074: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9075: LD_ADDR_VAR 0 2
9079: PUSH
9080: DOUBLE
9081: LD_INT 0
9083: DEC
9084: ST_TO_ADDR
9085: LD_EXP 44
9089: PUSH
9090: LD_INT 1
9092: MINUS
9093: PUSH
9094: FOR_TO
9095: IFFALSE 9241
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
9097: LD_VAR 0 2
9101: PUSH
9102: LD_INT 100
9104: MUL
9105: PUSH
9106: LD_INT 11
9108: PLUS
9109: PPUSH
9110: CALL_OW 110
9114: PUSH
9115: LD_VAR 0 1
9119: EQUAL
9120: PUSH
9121: LD_VAR 0 2
9125: PUSH
9126: LD_INT 100
9128: MUL
9129: PUSH
9130: LD_INT 12
9132: PLUS
9133: PPUSH
9134: CALL_OW 110
9138: AND
9139: IFFALSE 9239
// begin SetTag ( un * 100 + 12 , false ) ;
9141: LD_VAR 0 2
9145: PUSH
9146: LD_INT 100
9148: MUL
9149: PUSH
9150: LD_INT 12
9152: PLUS
9153: PPUSH
9154: LD_INT 0
9156: PPUSH
9157: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
9161: LD_VAR 0 2
9165: PUSH
9166: LD_INT 100
9168: MUL
9169: PUSH
9170: LD_VAR 0 3
9174: PUSH
9175: LD_INT 10
9177: MUL
9178: PLUS
9179: PUSH
9180: LD_INT 21
9182: PLUS
9183: PPUSH
9184: LD_INT 1
9186: PPUSH
9187: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
9191: LD_VAR 0 2
9195: PUSH
9196: LD_INT 100
9198: MUL
9199: PUSH
9200: LD_VAR 0 3
9204: PUSH
9205: LD_INT 10
9207: MUL
9208: PLUS
9209: PUSH
9210: LD_INT 25
9212: PLUS
9213: PPUSH
9214: LD_VAR 0 1
9218: PPUSH
9219: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
9223: LD_ADDR_EXP 47
9227: PUSH
9228: LD_EXP 47
9232: PUSH
9233: LD_VAR 0 1
9237: DIFF
9238: ST_TO_ADDR
// end ;
9239: GO 9094
9241: POP
9242: POP
// Update_Artefact ( lab ) ;
9243: LD_VAR 0 1
9247: PPUSH
9248: CALL 10679 0 1
// end ;
9252: PPOPN 3
9254: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
9255: LD_INT 0
9257: PPUSH
9258: PPUSH
9259: PPUSH
9260: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
9261: LD_ADDR_VAR 0 7
9265: PUSH
9266: LD_VAR 0 2
9270: PUSH
9271: LD_INT 1
9273: MINUS
9274: PUSH
9275: LD_INT 3
9277: MOD
9278: PUSH
9279: LD_INT 1
9281: PLUS
9282: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
9283: LD_ADDR_VAR 0 8
9287: PUSH
9288: LD_VAR 0 7
9292: PUSH
9293: LD_INT 1
9295: MINUS
9296: PUSH
9297: LD_INT 100
9299: MUL
9300: ST_TO_ADDR
// if number <= 3 then
9301: LD_VAR 0 2
9305: PUSH
9306: LD_INT 3
9308: LESSEQUAL
9309: IFFALSE 9541
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
9311: LD_VAR 0 8
9315: PUSH
9316: LD_INT 11
9318: PLUS
9319: PPUSH
9320: CALL_OW 110
9324: PPUSH
9325: LD_VAR 0 8
9329: PUSH
9330: LD_INT 5
9332: PLUS
9333: PPUSH
9334: CALL_OW 110
9338: PPUSH
9339: LD_INT 1
9341: PPUSH
9342: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
9346: LD_VAR 0 8
9350: PUSH
9351: LD_INT 11
9353: PLUS
9354: PPUSH
9355: CALL_OW 110
9359: PPUSH
9360: LD_VAR 0 8
9364: PUSH
9365: LD_VAR 0 1
9369: PUSH
9370: LD_INT 10
9372: MUL
9373: PLUS
9374: PUSH
9375: LD_INT 12
9377: PLUS
9378: PPUSH
9379: CALL_OW 110
9383: PPUSH
9384: CALL_OW 329
// SetTag ( base + 12 , true ) ;
9388: LD_VAR 0 8
9392: PUSH
9393: LD_INT 12
9395: PLUS
9396: PPUSH
9397: LD_INT 1
9399: PPUSH
9400: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
9404: LD_ADDR_EXP 47
9408: PUSH
9409: LD_EXP 47
9413: PUSH
9414: LD_VAR 0 8
9418: PUSH
9419: LD_INT 11
9421: PLUS
9422: PPUSH
9423: CALL_OW 110
9427: ADD
9428: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9429: LD_ADDR_VAR 0 5
9433: PUSH
9434: DOUBLE
9435: LD_INT 0
9437: DEC
9438: ST_TO_ADDR
9439: LD_EXP 44
9443: PUSH
9444: LD_INT 1
9446: MINUS
9447: PUSH
9448: FOR_TO
9449: IFFALSE 9537
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9451: LD_VAR 0 8
9455: PUSH
9456: LD_INT 11
9458: PLUS
9459: PPUSH
9460: CALL_OW 110
9464: PUSH
9465: LD_VAR 0 5
9469: PUSH
9470: LD_INT 100
9472: MUL
9473: PUSH
9474: LD_INT 11
9476: PLUS
9477: PPUSH
9478: CALL_OW 110
9482: PUSH
9483: LD_VAR 0 5
9487: PUSH
9488: LD_INT 100
9490: MUL
9491: PUSH
9492: LD_VAR 0 1
9496: PUSH
9497: LD_INT 10
9499: MUL
9500: PLUS
9501: PUSH
9502: LD_INT 15
9504: PLUS
9505: PPUSH
9506: CALL_OW 110
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: IN
9515: IFFALSE 9535
// DeInit_Lab ( side , un + 1 ) ;
9517: LD_VAR 0 1
9521: PPUSH
9522: LD_VAR 0 5
9526: PUSH
9527: LD_INT 1
9529: PLUS
9530: PPUSH
9531: CALL 10540 0 2
9535: GO 9448
9537: POP
9538: POP
// end else
9539: GO 9715
// begin succes := false ;
9541: LD_ADDR_VAR 0 6
9545: PUSH
9546: LD_INT 0
9548: ST_TO_ADDR
// case art of 1 :
9549: LD_VAR 0 7
9553: PUSH
9554: LD_INT 1
9556: DOUBLE
9557: EQUAL
9558: IFTRUE 9562
9560: GO 9590
9562: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
9563: LD_ADDR_VAR 0 6
9567: PUSH
9568: LD_VAR 0 1
9572: PPUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: LD_VAR 0 4
9582: PPUSH
9583: CALL 11112 0 3
9587: ST_TO_ADDR
9588: GO 9658
9590: LD_INT 2
9592: DOUBLE
9593: EQUAL
9594: IFTRUE 9598
9596: GO 9621
9598: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
9599: LD_ADDR_VAR 0 6
9603: PUSH
9604: LD_VAR 0 1
9608: PPUSH
9609: LD_VAR 0 3
9613: PPUSH
9614: CALL 11350 0 2
9618: ST_TO_ADDR
9619: GO 9658
9621: LD_INT 3
9623: DOUBLE
9624: EQUAL
9625: IFTRUE 9629
9627: GO 9657
9629: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
9630: LD_ADDR_VAR 0 6
9634: PUSH
9635: LD_VAR 0 1
9639: PPUSH
9640: LD_VAR 0 3
9644: PPUSH
9645: LD_VAR 0 4
9649: PPUSH
9650: CALL 11746 0 3
9654: ST_TO_ADDR
9655: GO 9658
9657: POP
// if succes then
9658: LD_VAR 0 6
9662: IFFALSE 9715
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
9664: LD_VAR 0 8
9668: PUSH
9669: LD_VAR 0 1
9673: PUSH
9674: LD_INT 10
9676: MUL
9677: PLUS
9678: PUSH
9679: LD_INT 13
9681: PLUS
9682: PPUSH
9683: LD_VAR 0 8
9687: PUSH
9688: LD_INT 7
9690: PLUS
9691: PPUSH
9692: CALL_OW 110
9696: PPUSH
9697: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
9701: LD_VAR 0 1
9705: PPUSH
9706: LD_VAR 0 7
9710: PPUSH
9711: CALL 9718 0 2
// end ; end ; end ;
9715: PPOPN 8
9717: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
9718: LD_INT 0
9720: PPUSH
9721: PPUSH
9722: PPUSH
// base := ( art - 1 ) * 100 ;
9723: LD_ADDR_VAR 0 4
9727: PUSH
9728: LD_VAR 0 2
9732: PUSH
9733: LD_INT 1
9735: MINUS
9736: PUSH
9737: LD_INT 100
9739: MUL
9740: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9741: LD_ADDR_VAR 0 5
9745: PUSH
9746: LD_VAR 0 4
9750: PUSH
9751: LD_VAR 0 1
9755: PUSH
9756: LD_INT 10
9758: MUL
9759: PLUS
9760: PUSH
9761: LD_INT 15
9763: PLUS
9764: PPUSH
9765: CALL_OW 110
9769: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
9770: LD_VAR 0 5
9774: PUSH
9775: LD_VAR 0 5
9779: PUSH
9780: LD_EXP 47
9784: IN
9785: NOT
9786: AND
9787: IFFALSE 9845
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
9789: LD_VAR 0 1
9793: PPUSH
9794: LD_VAR 0 4
9798: PUSH
9799: LD_INT 1
9801: PLUS
9802: PUSH
9803: LD_VAR 0 4
9807: PUSH
9808: LD_VAR 0 1
9812: PUSH
9813: LD_INT 10
9815: MUL
9816: PLUS
9817: PUSH
9818: LD_INT 11
9820: PLUS
9821: PPUSH
9822: CALL_OW 110
9826: PLUS
9827: PPUSH
9828: CALL_OW 110
9832: PPUSH
9833: LD_INT 1
9835: PPUSH
9836: LD_VAR 0 5
9840: PPUSH
9841: CALL_OW 468
// end ;
9845: LD_VAR 0 3
9849: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
9850: LD_INT 0
9852: PPUSH
9853: PPUSH
9854: PPUSH
// base := ( art - 1 ) * 100 ;
9855: LD_ADDR_VAR 0 4
9859: PUSH
9860: LD_VAR 0 2
9864: PUSH
9865: LD_INT 1
9867: MINUS
9868: PUSH
9869: LD_INT 100
9871: MUL
9872: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9873: LD_ADDR_VAR 0 5
9877: PUSH
9878: LD_VAR 0 4
9882: PUSH
9883: LD_VAR 0 1
9887: PUSH
9888: LD_INT 10
9890: MUL
9891: PLUS
9892: PUSH
9893: LD_INT 15
9895: PLUS
9896: PPUSH
9897: CALL_OW 110
9901: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
9902: LD_VAR 0 5
9906: PUSH
9907: LD_VAR 0 5
9911: PUSH
9912: LD_EXP 47
9916: IN
9917: NOT
9918: AND
9919: PUSH
9920: LD_VAR 0 5
9924: PPUSH
9925: CALL_OW 313
9929: AND
9930: IFFALSE 9999
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
9932: LD_VAR 0 1
9936: PPUSH
9937: LD_VAR 0 4
9941: PUSH
9942: LD_INT 1
9944: PLUS
9945: PUSH
9946: LD_VAR 0 4
9950: PUSH
9951: LD_VAR 0 1
9955: PUSH
9956: LD_INT 10
9958: MUL
9959: PLUS
9960: PUSH
9961: LD_INT 11
9963: PLUS
9964: PPUSH
9965: CALL_OW 110
9969: PLUS
9970: PPUSH
9971: CALL_OW 110
9975: PPUSH
9976: LD_VAR 0 4
9980: PUSH
9981: LD_INT 3
9983: PLUS
9984: PPUSH
9985: CALL_OW 110
9989: PPUSH
9990: LD_VAR 0 5
9994: PPUSH
9995: CALL_OW 468
// end ;
9999: LD_VAR 0 3
10003: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
10004: LD_INT 0
10006: PPUSH
10007: PPUSH
10008: PPUSH
10009: PPUSH
10010: PPUSH
10011: PPUSH
10012: PPUSH
10013: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
10014: LD_ADDR_VAR 0 8
10018: PUSH
10019: LD_EXP 46
10023: PUSH
10024: LD_VAR 0 1
10028: ARRAY
10029: PPUSH
10030: CALL_OW 469
10034: ST_TO_ADDR
// if not art_hex then
10035: LD_VAR 0 8
10039: NOT
10040: IFFALSE 10044
// exit ;
10042: GO 10535
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
10044: LD_ADDR_VAR 0 3
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: LD_INT 30
10054: PUSH
10055: LD_INT 6
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PUSH
10062: LD_INT 30
10064: PUSH
10065: LD_INT 7
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PUSH
10072: LD_INT 30
10074: PUSH
10075: LD_INT 8
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: PPUSH
10091: CALL_OW 69
10095: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
10096: LD_ADDR_VAR 0 9
10100: PUSH
10101: LD_VAR 0 3
10105: PPUSH
10106: LD_VAR 0 8
10110: PUSH
10111: LD_INT 1
10113: ARRAY
10114: PPUSH
10115: LD_VAR 0 8
10119: PUSH
10120: LD_INT 2
10122: ARRAY
10123: PPUSH
10124: CALL_OW 73
10128: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
10129: LD_ADDR_VAR 0 6
10133: PUSH
10134: LD_VAR 0 9
10138: PPUSH
10139: LD_VAR 0 8
10143: PUSH
10144: LD_INT 1
10146: ARRAY
10147: PPUSH
10148: LD_VAR 0 8
10152: PUSH
10153: LD_INT 2
10155: ARRAY
10156: PPUSH
10157: CALL_OW 297
10161: ST_TO_ADDR
// if dist < 9 then
10162: LD_VAR 0 6
10166: PUSH
10167: LD_INT 9
10169: LESS
10170: IFFALSE 10535
// begin side := GetSide ( nearest_lab ) ;
10172: LD_ADDR_VAR 0 4
10176: PUSH
10177: LD_VAR 0 9
10181: PPUSH
10182: CALL_OW 255
10186: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
10187: LD_VAR 0 4
10191: PPUSH
10192: LD_VAR 0 1
10196: PPUSH
10197: CALL 10540 0 2
// base := ( art - 1 ) * 100 ;
10201: LD_ADDR_VAR 0 5
10205: PUSH
10206: LD_VAR 0 1
10210: PUSH
10211: LD_INT 1
10213: MINUS
10214: PUSH
10215: LD_INT 100
10217: MUL
10218: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
10219: LD_INT 24
10221: PPUSH
10222: LD_VAR 0 4
10226: PPUSH
10227: CALL_OW 321
10231: PUSH
10232: LD_INT 2
10234: EQUAL
10235: PUSH
10236: LD_VAR 0 9
10240: PPUSH
10241: CALL_OW 313
10245: AND
10246: IFFALSE 10438
// begin if GetTag ( base + side * 10 + 11 ) then
10248: LD_VAR 0 5
10252: PUSH
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 10
10260: MUL
10261: PLUS
10262: PUSH
10263: LD_INT 11
10265: PLUS
10266: PPUSH
10267: CALL_OW 110
10271: IFFALSE 10428
// begin if not GetTag ( base + side * 10 + 13 ) then
10273: LD_VAR 0 5
10277: PUSH
10278: LD_VAR 0 4
10282: PUSH
10283: LD_INT 10
10285: MUL
10286: PLUS
10287: PUSH
10288: LD_INT 13
10290: PLUS
10291: PPUSH
10292: CALL_OW 110
10296: NOT
10297: IFFALSE 10320
// state := GetTag ( base + 03 ) else
10299: LD_ADDR_VAR 0 7
10303: PUSH
10304: LD_VAR 0 5
10308: PUSH
10309: LD_INT 3
10311: PLUS
10312: PPUSH
10313: CALL_OW 110
10317: ST_TO_ADDR
10318: GO 10328
// state := art_gray ;
10320: LD_ADDR_VAR 0 7
10324: PUSH
10325: LD_INT 1
10327: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
10328: LD_VAR 0 5
10332: PUSH
10333: LD_VAR 0 4
10337: PUSH
10338: LD_INT 10
10340: MUL
10341: PLUS
10342: PUSH
10343: LD_INT 15
10345: PLUS
10346: PPUSH
10347: CALL_OW 110
10351: PUSH
10352: LD_VAR 0 5
10356: PUSH
10357: LD_VAR 0 4
10361: PUSH
10362: LD_INT 10
10364: MUL
10365: PLUS
10366: PUSH
10367: LD_INT 15
10369: PLUS
10370: PPUSH
10371: CALL_OW 110
10375: PUSH
10376: LD_VAR 0 9
10380: NONEQUAL
10381: AND
10382: IFFALSE 10398
// DeInit_Lab ( side , art ) ;
10384: LD_VAR 0 4
10388: PPUSH
10389: LD_VAR 0 1
10393: PPUSH
10394: CALL 10540 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
10398: LD_VAR 0 5
10402: PUSH
10403: LD_VAR 0 4
10407: PUSH
10408: LD_INT 10
10410: MUL
10411: PLUS
10412: PUSH
10413: LD_INT 15
10415: PLUS
10416: PPUSH
10417: LD_VAR 0 9
10421: PPUSH
10422: CALL_OW 109
// end else
10426: GO 10436
// state := art_instant ;
10428: LD_ADDR_VAR 0 7
10432: PUSH
10433: LD_INT 2
10435: ST_TO_ADDR
// end else
10436: GO 10446
// state := art_gray ;
10438: LD_ADDR_VAR 0 7
10442: PUSH
10443: LD_INT 1
10445: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
10446: LD_VAR 0 5
10450: PUSH
10451: LD_INT 11
10453: PLUS
10454: PPUSH
10455: LD_VAR 0 9
10459: PPUSH
10460: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
10464: LD_VAR 0 9
10468: PUSH
10469: LD_EXP 47
10473: IN
10474: NOT
10475: IFFALSE 10535
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
10477: LD_VAR 0 4
10481: PPUSH
10482: LD_VAR 0 5
10486: PUSH
10487: LD_INT 1
10489: PLUS
10490: PUSH
10491: LD_VAR 0 5
10495: PUSH
10496: LD_VAR 0 4
10500: PUSH
10501: LD_INT 10
10503: MUL
10504: PLUS
10505: PUSH
10506: LD_INT 11
10508: PLUS
10509: PPUSH
10510: CALL_OW 110
10514: PLUS
10515: PPUSH
10516: CALL_OW 110
10520: PPUSH
10521: LD_VAR 0 7
10525: PPUSH
10526: LD_VAR 0 9
10530: PPUSH
10531: CALL_OW 468
// end ; end ;
10535: LD_VAR 0 2
10539: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
10540: LD_INT 0
10542: PPUSH
10543: PPUSH
10544: PPUSH
// base := ( art - 1 ) * 100 ;
10545: LD_ADDR_VAR 0 4
10549: PUSH
10550: LD_VAR 0 2
10554: PUSH
10555: LD_INT 1
10557: MINUS
10558: PUSH
10559: LD_INT 100
10561: MUL
10562: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
10563: LD_ADDR_VAR 0 5
10567: PUSH
10568: LD_VAR 0 4
10572: PUSH
10573: LD_VAR 0 1
10577: PUSH
10578: LD_INT 10
10580: MUL
10581: PLUS
10582: PUSH
10583: LD_INT 15
10585: PLUS
10586: PPUSH
10587: CALL_OW 110
10591: ST_TO_ADDR
// if not lab then
10592: LD_VAR 0 5
10596: NOT
10597: IFFALSE 10618
// lab := GetTag ( base + 11 ) ;
10599: LD_ADDR_VAR 0 5
10603: PUSH
10604: LD_VAR 0 4
10608: PUSH
10609: LD_INT 11
10611: PLUS
10612: PPUSH
10613: CALL_OW 110
10617: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
10618: LD_VAR 0 1
10622: PPUSH
10623: LD_VAR 0 4
10627: PUSH
10628: LD_INT 1
10630: PLUS
10631: PUSH
10632: LD_VAR 0 4
10636: PUSH
10637: LD_VAR 0 1
10641: PUSH
10642: LD_INT 10
10644: MUL
10645: PLUS
10646: PUSH
10647: LD_INT 11
10649: PLUS
10650: PPUSH
10651: CALL_OW 110
10655: PLUS
10656: PPUSH
10657: CALL_OW 110
10661: PPUSH
10662: LD_INT 0
10664: PPUSH
10665: LD_VAR 0 5
10669: PPUSH
10670: CALL_OW 468
// end ;
10674: LD_VAR 0 3
10678: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
10679: LD_INT 0
10681: PPUSH
10682: PPUSH
10683: PPUSH
10684: PPUSH
// side := GetSide ( lab ) ;
10685: LD_ADDR_VAR 0 4
10689: PUSH
10690: LD_VAR 0 1
10694: PPUSH
10695: CALL_OW 255
10699: ST_TO_ADDR
// for art = 1 to artefact_number do
10700: LD_ADDR_VAR 0 3
10704: PUSH
10705: DOUBLE
10706: LD_INT 1
10708: DEC
10709: ST_TO_ADDR
10710: LD_EXP 44
10714: PUSH
10715: FOR_TO
10716: IFFALSE 10872
// begin base := ( art - 1 ) * 100 ;
10718: LD_ADDR_VAR 0 5
10722: PUSH
10723: LD_VAR 0 3
10727: PUSH
10728: LD_INT 1
10730: MINUS
10731: PUSH
10732: LD_INT 100
10734: MUL
10735: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
10736: LD_VAR 0 5
10740: PUSH
10741: LD_INT 11
10743: PLUS
10744: PPUSH
10745: CALL_OW 110
10749: PUSH
10750: LD_VAR 0 1
10754: EQUAL
10755: IFFALSE 10768
// Init_Lab ( art ) else
10757: LD_VAR 0 3
10761: PPUSH
10762: CALL 10004 0 1
10766: GO 10870
// begin if lab = GetTag ( base + side * 10 + 15 ) then
10768: LD_VAR 0 1
10772: PUSH
10773: LD_VAR 0 5
10777: PUSH
10778: LD_VAR 0 4
10782: PUSH
10783: LD_INT 10
10785: MUL
10786: PLUS
10787: PUSH
10788: LD_INT 15
10790: PLUS
10791: PPUSH
10792: CALL_OW 110
10796: EQUAL
10797: IFFALSE 10870
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
10799: LD_VAR 0 5
10803: PUSH
10804: LD_VAR 0 4
10808: PUSH
10809: LD_INT 10
10811: MUL
10812: PLUS
10813: PUSH
10814: LD_INT 13
10816: PLUS
10817: PPUSH
10818: CALL_OW 110
10822: PUSH
10823: LD_INT 0
10825: GREATER
10826: PUSH
10827: LD_VAR 0 1
10831: PPUSH
10832: CALL_OW 313
10836: NOT
10837: OR
10838: IFFALSE 10856
// Shadow_Artefact ( side , art ) else
10840: LD_VAR 0 4
10844: PPUSH
10845: LD_VAR 0 3
10849: PPUSH
10850: CALL 9718 0 2
10854: GO 10870
// Highlight_Artefact ( side , art ) ;
10856: LD_VAR 0 4
10860: PPUSH
10861: LD_VAR 0 3
10865: PPUSH
10866: CALL 9850 0 2
// end ; end ; end ;
10870: GO 10715
10872: POP
10873: POP
// end ; end_of_file
10874: LD_VAR 0 2
10878: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
10879: LD_INT 10
10881: PPUSH
10882: CALL_OW 67
// if not IsBusy ( lab ) then
10886: LD_VAR 0 2
10890: PPUSH
10891: CALL_OW 315
10895: NOT
10896: IFFALSE 10923
// begin labs_in_use := labs_in_use diff lab ;
10898: LD_ADDR_EXP 47
10902: PUSH
10903: LD_EXP 47
10907: PUSH
10908: LD_VAR 0 2
10912: DIFF
10913: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10914: LD_VAR 0 2
10918: PPUSH
10919: CALL 10679 0 1
// end ; end ;
10923: PPOPN 2
10925: END
// on ResearchStarted ( tech , lab ) do var un , side ;
10926: LD_INT 0
10928: PPUSH
10929: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
10930: LD_ADDR_EXP 47
10934: PUSH
10935: LD_EXP 47
10939: PUSH
10940: LD_VAR 0 2
10944: ADD
10945: ST_TO_ADDR
// side := GetSide ( lab ) ;
10946: LD_ADDR_VAR 0 4
10950: PUSH
10951: LD_VAR 0 2
10955: PPUSH
10956: CALL_OW 255
10960: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
10961: LD_ADDR_VAR 0 3
10965: PUSH
10966: DOUBLE
10967: LD_INT 0
10969: DEC
10970: ST_TO_ADDR
10971: LD_EXP 44
10975: PUSH
10976: LD_INT 1
10978: MINUS
10979: PUSH
10980: FOR_TO
10981: IFFALSE 11060
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10983: LD_VAR 0 2
10987: PUSH
10988: LD_VAR 0 3
10992: PUSH
10993: LD_INT 100
10995: MUL
10996: PUSH
10997: LD_INT 11
10999: PLUS
11000: PPUSH
11001: CALL_OW 110
11005: PUSH
11006: LD_VAR 0 3
11010: PUSH
11011: LD_INT 100
11013: MUL
11014: PUSH
11015: LD_VAR 0 4
11019: PUSH
11020: LD_INT 10
11022: MUL
11023: PLUS
11024: PUSH
11025: LD_INT 15
11027: PLUS
11028: PPUSH
11029: CALL_OW 110
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: IN
11038: IFFALSE 11058
// DeInit_Lab ( side , un + 1 ) ;
11040: LD_VAR 0 4
11044: PPUSH
11045: LD_VAR 0 3
11049: PUSH
11050: LD_INT 1
11052: PLUS
11053: PPUSH
11054: CALL 10540 0 2
11058: GO 10980
11060: POP
11061: POP
// end ;
11062: PPOPN 4
11064: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
11065: LD_INT 10
11067: PPUSH
11068: CALL_OW 67
// if not IsBusy ( lab ) then
11072: LD_VAR 0 2
11076: PPUSH
11077: CALL_OW 315
11081: NOT
11082: IFFALSE 11109
// begin labs_in_use := labs_in_use diff lab ;
11084: LD_ADDR_EXP 47
11088: PUSH
11089: LD_EXP 47
11093: PUSH
11094: LD_VAR 0 2
11098: DIFF
11099: ST_TO_ADDR
// Update_Artefact ( lab ) ;
11100: LD_VAR 0 2
11104: PPUSH
11105: CALL 10679 0 1
// end ; end ; end_of_file
11109: PPOPN 2
11111: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
11112: LD_INT 0
11114: PPUSH
11115: PPUSH
11116: PPUSH
// vysledek := true ;
11117: LD_ADDR_VAR 0 5
11121: PUSH
11122: LD_INT 1
11124: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
11125: LD_ADDR_VAR 0 6
11129: PUSH
11130: LD_VAR 0 1
11134: PUSH
11135: LD_INT 10
11137: MUL
11138: PUSH
11139: LD_INT 15
11141: PLUS
11142: PPUSH
11143: CALL_OW 110
11147: PPUSH
11148: CALL_OW 274
11152: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
11153: LD_VAR 0 6
11157: PUSH
11158: LD_VAR 0 6
11162: PPUSH
11163: CALL_OW 279
11167: PUSH
11168: LD_INT 3
11170: ARRAY
11171: PUSH
11172: LD_INT 6
11174: PPUSH
11175: CALL_OW 110
11179: GREATEREQUAL
11180: AND
11181: IFFALSE 11271
// begin PlaceSeeing ( x , y , side , - 15 ) ;
11183: LD_VAR 0 2
11187: PPUSH
11188: LD_VAR 0 3
11192: PPUSH
11193: LD_VAR 0 1
11197: PPUSH
11198: LD_INT 15
11200: NEG
11201: PPUSH
11202: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
11206: LD_VAR 0 6
11210: PPUSH
11211: LD_INT 3
11213: PPUSH
11214: LD_VAR 0 6
11218: PPUSH
11219: CALL_OW 279
11223: PUSH
11224: LD_INT 3
11226: ARRAY
11227: PUSH
11228: LD_INT 6
11230: PPUSH
11231: CALL_OW 110
11235: MINUS
11236: PPUSH
11237: CALL_OW 277
// view_data := [ x , y , side ] ;
11241: LD_ADDR_LOC 12
11245: PUSH
11246: LD_VAR 0 2
11250: PUSH
11251: LD_VAR 0 3
11255: PUSH
11256: LD_VAR 0 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: LIST
11265: ST_TO_ADDR
// enable ( 1 ) ;
11266: LD_INT 1
11268: ENABLE_MARKED
// end else
11269: GO 11279
// vysledek := false ;
11271: LD_ADDR_VAR 0 5
11275: PUSH
11276: LD_INT 0
11278: ST_TO_ADDR
// result := vysledek ;
11279: LD_ADDR_VAR 0 4
11283: PUSH
11284: LD_VAR 0 5
11288: ST_TO_ADDR
// end ;
11289: LD_VAR 0 4
11293: RET
// every 0 0$2 trigger view_data marked 1 do
11294: LD_LOC 12
11298: IFFALSE 11349
11300: GO 11302
11302: DISABLE
// begin wait ( 0 0$30 ) ;
11303: LD_INT 1050
11305: PPUSH
11306: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
11310: LD_LOC 12
11314: PUSH
11315: LD_INT 1
11317: ARRAY
11318: PPUSH
11319: LD_LOC 12
11323: PUSH
11324: LD_INT 2
11326: ARRAY
11327: PPUSH
11328: LD_LOC 12
11332: PUSH
11333: LD_INT 3
11335: ARRAY
11336: PPUSH
11337: CALL_OW 331
// view_data := 0 ;
11341: LD_ADDR_LOC 12
11345: PUSH
11346: LD_INT 0
11348: ST_TO_ADDR
// end ;
11349: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
11350: LD_INT 0
11352: PPUSH
11353: PPUSH
11354: PPUSH
11355: PPUSH
11356: PPUSH
11357: PPUSH
11358: PPUSH
11359: PPUSH
// vysledek := true ;
11360: LD_ADDR_VAR 0 4
11364: PUSH
11365: LD_INT 1
11367: ST_TO_ADDR
// it_can := false ;
11368: LD_ADDR_VAR 0 8
11372: PUSH
11373: LD_INT 0
11375: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
11376: LD_ADDR_VAR 0 9
11380: PUSH
11381: LD_INT 30
11383: PUSH
11384: LD_INT 28
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
11391: LD_ADDR_VAR 0 10
11395: PUSH
11396: LD_INT 8
11398: PUSH
11399: LD_INT 48
11401: PUSH
11402: LD_INT 29
11404: PUSH
11405: LD_INT 49
11407: PUSH
11408: LD_INT 10
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
11418: LD_ADDR_VAR 0 7
11422: PUSH
11423: LD_VAR 0 2
11427: PPUSH
11428: CALL_OW 247
11432: PUSH
11433: LD_INT 3
11435: EQUAL
11436: PUSH
11437: LD_VAR 0 2
11441: PPUSH
11442: CALL_OW 266
11446: PUSH
11447: LD_VAR 0 9
11451: IN
11452: PUSH
11453: LD_VAR 0 2
11457: PPUSH
11458: CALL_OW 269
11462: PUSH
11463: LD_VAR 0 10
11467: IN
11468: OR
11469: AND
11470: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
11471: LD_ADDR_VAR 0 6
11475: PUSH
11476: LD_VAR 0 2
11480: PPUSH
11481: CALL_OW 247
11485: PUSH
11486: LD_INT 2
11488: EQUAL
11489: PUSH
11490: LD_VAR 0 2
11494: PPUSH
11495: CALL_OW 264
11499: PUSH
11500: LD_VAR 0 10
11504: IN
11505: PUSH
11506: LD_VAR 0 2
11510: PPUSH
11511: CALL_OW 262
11515: PUSH
11516: LD_INT 3
11518: EQUAL
11519: OR
11520: AND
11521: ST_TO_ADDR
// case def_artefact_two of 1 :
11522: LD_EXP 2
11526: PUSH
11527: LD_INT 1
11529: DOUBLE
11530: EQUAL
11531: IFTRUE 11535
11533: GO 11552
11535: POP
// if b_can then
11536: LD_VAR 0 7
11540: IFFALSE 11550
// it_can := true ; 2 :
11542: LD_ADDR_VAR 0 8
11546: PUSH
11547: LD_INT 1
11549: ST_TO_ADDR
11550: GO 11609
11552: LD_INT 2
11554: DOUBLE
11555: EQUAL
11556: IFTRUE 11560
11558: GO 11577
11560: POP
// if v_can then
11561: LD_VAR 0 6
11565: IFFALSE 11575
// it_can := true ; 3 :
11567: LD_ADDR_VAR 0 8
11571: PUSH
11572: LD_INT 1
11574: ST_TO_ADDR
11575: GO 11609
11577: LD_INT 3
11579: DOUBLE
11580: EQUAL
11581: IFTRUE 11585
11583: GO 11608
11585: POP
// if b_can or v_can then
11586: LD_VAR 0 7
11590: PUSH
11591: LD_VAR 0 6
11595: OR
11596: IFFALSE 11606
// it_can := true ; end ;
11598: LD_ADDR_VAR 0 8
11602: PUSH
11603: LD_INT 1
11605: ST_TO_ADDR
11606: GO 11609
11608: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
11609: LD_ADDR_VAR 0 5
11613: PUSH
11614: LD_INT 100
11616: PUSH
11617: LD_VAR 0 1
11621: PUSH
11622: LD_INT 10
11624: MUL
11625: PLUS
11626: PUSH
11627: LD_INT 15
11629: PLUS
11630: PPUSH
11631: CALL_OW 110
11635: PPUSH
11636: CALL_OW 274
11640: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
11641: LD_VAR 0 5
11645: PUSH
11646: LD_VAR 0 8
11650: AND
11651: PUSH
11652: LD_VAR 0 5
11656: PPUSH
11657: CALL_OW 279
11661: PUSH
11662: LD_INT 3
11664: ARRAY
11665: PUSH
11666: LD_INT 106
11668: PPUSH
11669: CALL_OW 110
11673: GREATEREQUAL
11674: AND
11675: IFFALSE 11723
// begin KillUnit ( un ) ;
11677: LD_VAR 0 2
11681: PPUSH
11682: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
11686: LD_VAR 0 5
11690: PPUSH
11691: LD_INT 3
11693: PPUSH
11694: LD_VAR 0 5
11698: PPUSH
11699: CALL_OW 279
11703: PUSH
11704: LD_INT 3
11706: ARRAY
11707: PUSH
11708: LD_INT 106
11710: PPUSH
11711: CALL_OW 110
11715: MINUS
11716: PPUSH
11717: CALL_OW 277
// end else
11721: GO 11731
// vysledek := false ;
11723: LD_ADDR_VAR 0 4
11727: PUSH
11728: LD_INT 0
11730: ST_TO_ADDR
// result := vysledek ;
11731: LD_ADDR_VAR 0 3
11735: PUSH
11736: LD_VAR 0 4
11740: ST_TO_ADDR
// end ;
11741: LD_VAR 0 3
11745: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
11746: LD_INT 0
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
// vysledek := true ;
11752: LD_ADDR_VAR 0 5
11756: PUSH
11757: LD_INT 1
11759: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
11760: LD_ADDR_VAR 0 7
11764: PUSH
11765: LD_INT 200
11767: PUSH
11768: LD_VAR 0 1
11772: PUSH
11773: LD_INT 10
11775: MUL
11776: PLUS
11777: PUSH
11778: LD_INT 15
11780: PLUS
11781: PPUSH
11782: CALL_OW 110
11786: PPUSH
11787: CALL_OW 274
11791: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
11792: LD_VAR 0 7
11796: PUSH
11797: LD_VAR 0 7
11801: PPUSH
11802: CALL_OW 279
11806: PUSH
11807: LD_INT 3
11809: ARRAY
11810: PUSH
11811: LD_INT 206
11813: PPUSH
11814: CALL_OW 110
11818: GREATEREQUAL
11819: AND
11820: IFFALSE 11876
// begin ArtContamination ( p1 , p2 , 15 ) ;
11822: LD_VAR 0 2
11826: PPUSH
11827: LD_VAR 0 3
11831: PPUSH
11832: LD_INT 15
11834: PPUSH
11835: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
11839: LD_VAR 0 7
11843: PPUSH
11844: LD_INT 3
11846: PPUSH
11847: LD_VAR 0 7
11851: PPUSH
11852: CALL_OW 279
11856: PUSH
11857: LD_INT 3
11859: ARRAY
11860: PUSH
11861: LD_INT 206
11863: PPUSH
11864: CALL_OW 110
11868: MINUS
11869: PPUSH
11870: CALL_OW 277
// end else
11874: GO 11884
// vysledek := false ;
11876: LD_ADDR_VAR 0 5
11880: PUSH
11881: LD_INT 0
11883: ST_TO_ADDR
// result := vysledek ;
11884: LD_ADDR_VAR 0 4
11888: PUSH
11889: LD_VAR 0 5
11893: ST_TO_ADDR
// end ;
11894: LD_VAR 0 4
11898: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
11899: GO 11901
11901: DISABLE
11902: LD_INT 0
11904: PPUSH
11905: PPUSH
11906: PPUSH
// begin for art = 0 to artefact_number do
11907: LD_ADDR_VAR 0 1
11911: PUSH
11912: DOUBLE
11913: LD_INT 0
11915: DEC
11916: ST_TO_ADDR
11917: LD_EXP 44
11921: PUSH
11922: FOR_TO
11923: IFFALSE 12057
// for side = 1 to Side_Positions do
11925: LD_ADDR_VAR 0 2
11929: PUSH
11930: DOUBLE
11931: LD_INT 1
11933: DEC
11934: ST_TO_ADDR
11935: LD_EXP 24
11939: PUSH
11940: FOR_TO
11941: IFFALSE 12053
// begin recharge := art * 100 + side * 10 + 13 ;
11943: LD_ADDR_VAR 0 3
11947: PUSH
11948: LD_VAR 0 1
11952: PUSH
11953: LD_INT 100
11955: MUL
11956: PUSH
11957: LD_VAR 0 2
11961: PUSH
11962: LD_INT 10
11964: MUL
11965: PLUS
11966: PUSH
11967: LD_INT 13
11969: PLUS
11970: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
11971: LD_EXP 24
11975: PUSH
11976: LD_VAR 0 2
11980: ARRAY
11981: PUSH
11982: LD_VAR 0 3
11986: PPUSH
11987: CALL_OW 110
11991: PUSH
11992: LD_INT 0
11994: GREATER
11995: AND
11996: IFFALSE 12051
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11998: LD_VAR 0 3
12002: PPUSH
12003: LD_VAR 0 3
12007: PPUSH
12008: CALL_OW 110
12012: PUSH
12013: LD_INT 1
12015: MINUS
12016: PPUSH
12017: CALL_OW 109
// if not GetTag ( recharge ) then
12021: LD_VAR 0 3
12025: PPUSH
12026: CALL_OW 110
12030: NOT
12031: IFFALSE 12051
// Highlight_Artefact ( side , art + 1 ) ;
12033: LD_VAR 0 2
12037: PPUSH
12038: LD_VAR 0 1
12042: PUSH
12043: LD_INT 1
12045: PLUS
12046: PPUSH
12047: CALL 9850 0 2
// end ; end ;
12051: GO 11940
12053: POP
12054: POP
12055: GO 11922
12057: POP
12058: POP
// enable ;
12059: ENABLE
// end ; end_of_file
12060: PPOPN 3
12062: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
12063: LD_INT 0
12065: PPUSH
12066: PPUSH
12067: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
12068: LD_INT 18
12070: PPUSH
12071: LD_VAR 0 1
12075: PUSH
12076: LD_INT 1
12078: ARRAY
12079: PPUSH
12080: LD_VAR 0 1
12084: PUSH
12085: LD_INT 2
12087: ARRAY
12088: PPUSH
12089: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12093: LD_VAR 0 1
12097: PUSH
12098: LD_INT 1
12100: ARRAY
12101: PPUSH
12102: LD_VAR 0 1
12106: PUSH
12107: LD_INT 2
12109: ARRAY
12110: PPUSH
12111: CALL_OW 494
// Wait ( 30 ) ;
12115: LD_INT 30
12117: PPUSH
12118: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
12122: LD_INT 18
12124: PPUSH
12125: LD_INT 4
12127: PPUSH
12128: CALL_OW 286
// base := ( art - 1 ) * 100 ;
12132: LD_ADDR_VAR 0 4
12136: PUSH
12137: LD_VAR 0 2
12141: PUSH
12142: LD_INT 1
12144: MINUS
12145: PUSH
12146: LD_INT 100
12148: MUL
12149: ST_TO_ADDR
// if GetTag ( base + 11 ) then
12150: LD_VAR 0 4
12154: PUSH
12155: LD_INT 11
12157: PLUS
12158: PPUSH
12159: CALL_OW 110
12163: IFFALSE 12301
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
12165: LD_ADDR_VAR 0 5
12169: PUSH
12170: LD_VAR 0 4
12174: PUSH
12175: LD_INT 11
12177: PLUS
12178: PPUSH
12179: CALL_OW 110
12183: PPUSH
12184: CALL_OW 255
12188: ST_TO_ADDR
// if GetTag ( base + 12 ) then
12189: LD_VAR 0 4
12193: PUSH
12194: LD_INT 12
12196: PLUS
12197: PPUSH
12198: CALL_OW 110
12202: IFFALSE 12245
// begin ComCancel ( GetTag ( base + 11 ) ) ;
12204: LD_VAR 0 4
12208: PUSH
12209: LD_INT 11
12211: PLUS
12212: PPUSH
12213: CALL_OW 110
12217: PPUSH
12218: CALL_OW 127
// Wait ( 10 ) ;
12222: LD_INT 10
12224: PPUSH
12225: CALL_OW 67
// SetTag ( base + 12 , false ) ;
12229: LD_VAR 0 4
12233: PUSH
12234: LD_INT 12
12236: PLUS
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
12245: LD_VAR 0 4
12249: PUSH
12250: LD_VAR 0 5
12254: PUSH
12255: LD_INT 10
12257: MUL
12258: PLUS
12259: PUSH
12260: LD_INT 11
12262: PLUS
12263: PPUSH
12264: CALL_OW 110
12268: NOT
12269: IFFALSE 12285
// DeInit_Lab ( side , art ) ;
12271: LD_VAR 0 5
12275: PPUSH
12276: LD_VAR 0 2
12280: PPUSH
12281: CALL 10540 0 2
// SetTag ( base + 11 , 0 ) ;
12285: LD_VAR 0 4
12289: PUSH
12290: LD_INT 11
12292: PLUS
12293: PPUSH
12294: LD_INT 0
12296: PPUSH
12297: CALL_OW 109
// end ; end ;
12301: LD_VAR 0 3
12305: RET
// every 0 0$5 marked 5 do var hex , un ;
12306: GO 12308
12308: DISABLE
12309: LD_INT 0
12311: PPUSH
12312: PPUSH
// begin wait ( 3 3$0 ) ;
12313: LD_INT 6300
12315: PPUSH
12316: CALL_OW 67
// if GetTag ( 09 ) then
12320: LD_INT 9
12322: PPUSH
12323: CALL_OW 110
12327: IFFALSE 12366
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
12329: LD_ADDR_VAR 0 1
12333: PUSH
12334: LD_INT 13
12336: PPUSH
12337: CALL_OW 110
12341: PPUSH
12342: CALL_OW 250
12346: PUSH
12347: LD_INT 13
12349: PPUSH
12350: CALL_OW 110
12354: PPUSH
12355: CALL_OW 251
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: ST_TO_ADDR
12364: GO 12385
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
12366: LD_ADDR_VAR 0 1
12370: PUSH
12371: LD_EXP 46
12375: PUSH
12376: LD_INT 1
12378: ARRAY
12379: PPUSH
12380: CALL_OW 469
12384: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12385: LD_VAR 0 1
12389: PUSH
12390: LD_INT 1
12392: ARRAY
12393: PPUSH
12394: LD_VAR 0 1
12398: PUSH
12399: LD_INT 2
12401: ARRAY
12402: PPUSH
12403: LD_INT 16
12405: PPUSH
12406: CALL_OW 309
12410: NOT
12411: IFFALSE 12688
// begin if GetTag ( 09 ) then
12413: LD_INT 9
12415: PPUSH
12416: CALL_OW 110
12420: IFFALSE 12467
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12422: LD_INT 13
12424: PPUSH
12425: CALL_OW 110
12429: PPUSH
12430: LD_INT 4
12432: PPUSH
12433: LD_EXP 46
12437: PUSH
12438: LD_INT 1
12440: ARRAY
12441: NEG
12442: PPUSH
12443: CALL_OW 290
// SetTag ( 09 , 0 ) ;
12447: LD_INT 9
12449: PPUSH
12450: LD_INT 0
12452: PPUSH
12453: CALL_OW 109
// SetTag ( 13 , 0 ) ;
12457: LD_INT 13
12459: PPUSH
12460: LD_INT 0
12462: PPUSH
12463: CALL_OW 109
// end ; DestroyArtefact ( hex , 1 ) ;
12467: LD_VAR 0 1
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: CALL 12063 0 2
// wait ( 5 ) ;
12479: LD_INT 5
12481: PPUSH
12482: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12486: LD_ADDR_VAR 0 1
12490: PUSH
12491: LD_INT 16
12493: PPUSH
12494: LD_INT 0
12496: PPUSH
12497: CALL_OW 16
12501: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12502: LD_ADDR_VAR 0 2
12506: PUSH
12507: LD_VAR 0 1
12511: PUSH
12512: LD_INT 1
12514: ARRAY
12515: PPUSH
12516: LD_VAR 0 1
12520: PUSH
12521: LD_INT 2
12523: ARRAY
12524: PPUSH
12525: CALL_OW 428
12529: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12530: LD_VAR 0 2
12534: PUSH
12535: LD_INT 0
12537: GREATER
12538: PUSH
12539: LD_VAR 0 2
12543: PPUSH
12544: CALL_OW 247
12548: PUSH
12549: LD_INT 3
12551: EQUAL
12552: AND
12553: IFFALSE 12597
// begin KillUnit ( un ) ;
12555: LD_VAR 0 2
12559: PPUSH
12560: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12564: LD_VAR 0 1
12568: PUSH
12569: LD_INT 1
12571: ARRAY
12572: PPUSH
12573: LD_VAR 0 1
12577: PUSH
12578: LD_INT 2
12580: ARRAY
12581: PPUSH
12582: CALL_OW 428
12586: IFFALSE 12597
// wait ( 10 ) ;
12588: LD_INT 10
12590: PPUSH
12591: CALL_OW 67
12595: GO 12564
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12597: LD_VAR 0 1
12601: PUSH
12602: LD_INT 1
12604: ARRAY
12605: PPUSH
12606: LD_VAR 0 1
12610: PUSH
12611: LD_INT 2
12613: ARRAY
12614: PPUSH
12615: CALL_OW 428
12619: NOT
12620: IFFALSE 12486
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12622: LD_VAR 0 1
12626: PUSH
12627: LD_INT 1
12629: ARRAY
12630: PPUSH
12631: LD_VAR 0 1
12635: PUSH
12636: LD_INT 2
12638: ARRAY
12639: PPUSH
12640: CALL_OW 494
// wait ( 30 ) ;
12644: LD_INT 30
12646: PPUSH
12647: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12651: LD_INT 4
12653: PPUSH
12654: LD_EXP 46
12658: PUSH
12659: LD_INT 1
12661: ARRAY
12662: PPUSH
12663: LD_VAR 0 1
12667: PUSH
12668: LD_INT 1
12670: ARRAY
12671: PPUSH
12672: LD_VAR 0 1
12676: PUSH
12677: LD_INT 2
12679: ARRAY
12680: PPUSH
12681: LD_INT 0
12683: PPUSH
12684: CALL_OW 58
// end ; enable ;
12688: ENABLE
// end ;
12689: PPOPN 2
12691: END
// every 0 0$5 marked 6 do var hex , un ;
12692: GO 12694
12694: DISABLE
12695: LD_INT 0
12697: PPUSH
12698: PPUSH
// begin wait ( 3 3$30 ) ;
12699: LD_INT 7350
12701: PPUSH
12702: CALL_OW 67
// if GetTag ( 109 ) then
12706: LD_INT 109
12708: PPUSH
12709: CALL_OW 110
12713: IFFALSE 12752
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
12715: LD_ADDR_VAR 0 1
12719: PUSH
12720: LD_INT 113
12722: PPUSH
12723: CALL_OW 110
12727: PPUSH
12728: CALL_OW 250
12732: PUSH
12733: LD_INT 113
12735: PPUSH
12736: CALL_OW 110
12740: PPUSH
12741: CALL_OW 251
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: ST_TO_ADDR
12750: GO 12771
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
12752: LD_ADDR_VAR 0 1
12756: PUSH
12757: LD_EXP 46
12761: PUSH
12762: LD_INT 2
12764: ARRAY
12765: PPUSH
12766: CALL_OW 469
12770: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12771: LD_VAR 0 1
12775: PUSH
12776: LD_INT 1
12778: ARRAY
12779: PPUSH
12780: LD_VAR 0 1
12784: PUSH
12785: LD_INT 2
12787: ARRAY
12788: PPUSH
12789: LD_INT 16
12791: PPUSH
12792: CALL_OW 309
12796: NOT
12797: IFFALSE 13074
// begin if GetTag ( 109 ) then
12799: LD_INT 109
12801: PPUSH
12802: CALL_OW 110
12806: IFFALSE 12853
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12808: LD_INT 113
12810: PPUSH
12811: CALL_OW 110
12815: PPUSH
12816: LD_INT 4
12818: PPUSH
12819: LD_EXP 46
12823: PUSH
12824: LD_INT 1
12826: ARRAY
12827: NEG
12828: PPUSH
12829: CALL_OW 290
// SetTag ( 109 , 0 ) ;
12833: LD_INT 109
12835: PPUSH
12836: LD_INT 0
12838: PPUSH
12839: CALL_OW 109
// SetTag ( 113 , 0 ) ;
12843: LD_INT 113
12845: PPUSH
12846: LD_INT 0
12848: PPUSH
12849: CALL_OW 109
// end ; DestroyArtefact ( hex , 2 ) ;
12853: LD_VAR 0 1
12857: PPUSH
12858: LD_INT 2
12860: PPUSH
12861: CALL 12063 0 2
// wait ( 5 ) ;
12865: LD_INT 5
12867: PPUSH
12868: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12872: LD_ADDR_VAR 0 1
12876: PUSH
12877: LD_INT 16
12879: PPUSH
12880: LD_INT 0
12882: PPUSH
12883: CALL_OW 16
12887: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12888: LD_ADDR_VAR 0 2
12892: PUSH
12893: LD_VAR 0 1
12897: PUSH
12898: LD_INT 1
12900: ARRAY
12901: PPUSH
12902: LD_VAR 0 1
12906: PUSH
12907: LD_INT 2
12909: ARRAY
12910: PPUSH
12911: CALL_OW 428
12915: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12916: LD_VAR 0 2
12920: PUSH
12921: LD_INT 0
12923: GREATER
12924: PUSH
12925: LD_VAR 0 2
12929: PPUSH
12930: CALL_OW 247
12934: PUSH
12935: LD_INT 3
12937: EQUAL
12938: AND
12939: IFFALSE 12983
// begin KillUnit ( un ) ;
12941: LD_VAR 0 2
12945: PPUSH
12946: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12950: LD_VAR 0 1
12954: PUSH
12955: LD_INT 1
12957: ARRAY
12958: PPUSH
12959: LD_VAR 0 1
12963: PUSH
12964: LD_INT 2
12966: ARRAY
12967: PPUSH
12968: CALL_OW 428
12972: IFFALSE 12983
// wait ( 10 ) ;
12974: LD_INT 10
12976: PPUSH
12977: CALL_OW 67
12981: GO 12950
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12983: LD_VAR 0 1
12987: PUSH
12988: LD_INT 1
12990: ARRAY
12991: PPUSH
12992: LD_VAR 0 1
12996: PUSH
12997: LD_INT 2
12999: ARRAY
13000: PPUSH
13001: CALL_OW 428
13005: NOT
13006: IFFALSE 12872
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13008: LD_VAR 0 1
13012: PUSH
13013: LD_INT 1
13015: ARRAY
13016: PPUSH
13017: LD_VAR 0 1
13021: PUSH
13022: LD_INT 2
13024: ARRAY
13025: PPUSH
13026: CALL_OW 494
// wait ( 30 ) ;
13030: LD_INT 30
13032: PPUSH
13033: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13037: LD_INT 4
13039: PPUSH
13040: LD_EXP 46
13044: PUSH
13045: LD_INT 2
13047: ARRAY
13048: PPUSH
13049: LD_VAR 0 1
13053: PUSH
13054: LD_INT 1
13056: ARRAY
13057: PPUSH
13058: LD_VAR 0 1
13062: PUSH
13063: LD_INT 2
13065: ARRAY
13066: PPUSH
13067: LD_INT 0
13069: PPUSH
13070: CALL_OW 58
// end ; enable ;
13074: ENABLE
// end ;
13075: PPOPN 2
13077: END
// every 0 0$5 marked 7 do var hex , un ;
13078: GO 13080
13080: DISABLE
13081: LD_INT 0
13083: PPUSH
13084: PPUSH
// begin wait ( 4 4$0 ) ;
13085: LD_INT 8400
13087: PPUSH
13088: CALL_OW 67
// if GetTag ( 209 ) then
13092: LD_INT 209
13094: PPUSH
13095: CALL_OW 110
13099: IFFALSE 13138
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
13101: LD_ADDR_VAR 0 1
13105: PUSH
13106: LD_INT 213
13108: PPUSH
13109: CALL_OW 110
13113: PPUSH
13114: CALL_OW 250
13118: PUSH
13119: LD_INT 213
13121: PPUSH
13122: CALL_OW 110
13126: PPUSH
13127: CALL_OW 251
13131: PUSH
13132: EMPTY
13133: LIST
13134: LIST
13135: ST_TO_ADDR
13136: GO 13157
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
13138: LD_ADDR_VAR 0 1
13142: PUSH
13143: LD_EXP 46
13147: PUSH
13148: LD_INT 3
13150: ARRAY
13151: PPUSH
13152: CALL_OW 469
13156: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
13157: LD_VAR 0 1
13161: PUSH
13162: LD_INT 1
13164: ARRAY
13165: PPUSH
13166: LD_VAR 0 1
13170: PUSH
13171: LD_INT 2
13173: ARRAY
13174: PPUSH
13175: LD_INT 16
13177: PPUSH
13178: CALL_OW 309
13182: NOT
13183: IFFALSE 13460
// begin if GetTag ( 209 ) then
13185: LD_INT 209
13187: PPUSH
13188: CALL_OW 110
13192: IFFALSE 13239
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 1 ] ) ;
13194: LD_INT 213
13196: PPUSH
13197: CALL_OW 110
13201: PPUSH
13202: LD_INT 4
13204: PPUSH
13205: LD_EXP 46
13209: PUSH
13210: LD_INT 1
13212: ARRAY
13213: NEG
13214: PPUSH
13215: CALL_OW 290
// SetTag ( 209 , 0 ) ;
13219: LD_INT 209
13221: PPUSH
13222: LD_INT 0
13224: PPUSH
13225: CALL_OW 109
// SetTag ( 213 , 0 ) ;
13229: LD_INT 213
13231: PPUSH
13232: LD_INT 0
13234: PPUSH
13235: CALL_OW 109
// end ; DestroyArtefact ( hex , 3 ) ;
13239: LD_VAR 0 1
13243: PPUSH
13244: LD_INT 3
13246: PPUSH
13247: CALL 12063 0 2
// wait ( 5 ) ;
13251: LD_INT 5
13253: PPUSH
13254: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
13258: LD_ADDR_VAR 0 1
13262: PUSH
13263: LD_INT 16
13265: PPUSH
13266: LD_INT 0
13268: PPUSH
13269: CALL_OW 16
13273: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13274: LD_ADDR_VAR 0 2
13278: PUSH
13279: LD_VAR 0 1
13283: PUSH
13284: LD_INT 1
13286: ARRAY
13287: PPUSH
13288: LD_VAR 0 1
13292: PUSH
13293: LD_INT 2
13295: ARRAY
13296: PPUSH
13297: CALL_OW 428
13301: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
13302: LD_VAR 0 2
13306: PUSH
13307: LD_INT 0
13309: GREATER
13310: PUSH
13311: LD_VAR 0 2
13315: PPUSH
13316: CALL_OW 247
13320: PUSH
13321: LD_INT 3
13323: EQUAL
13324: AND
13325: IFFALSE 13369
// begin KillUnit ( un ) ;
13327: LD_VAR 0 2
13331: PPUSH
13332: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
13336: LD_VAR 0 1
13340: PUSH
13341: LD_INT 1
13343: ARRAY
13344: PPUSH
13345: LD_VAR 0 1
13349: PUSH
13350: LD_INT 2
13352: ARRAY
13353: PPUSH
13354: CALL_OW 428
13358: IFFALSE 13369
// wait ( 10 ) ;
13360: LD_INT 10
13362: PPUSH
13363: CALL_OW 67
13367: GO 13336
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13369: LD_VAR 0 1
13373: PUSH
13374: LD_INT 1
13376: ARRAY
13377: PPUSH
13378: LD_VAR 0 1
13382: PUSH
13383: LD_INT 2
13385: ARRAY
13386: PPUSH
13387: CALL_OW 428
13391: NOT
13392: IFFALSE 13258
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13394: LD_VAR 0 1
13398: PUSH
13399: LD_INT 1
13401: ARRAY
13402: PPUSH
13403: LD_VAR 0 1
13407: PUSH
13408: LD_INT 2
13410: ARRAY
13411: PPUSH
13412: CALL_OW 494
// wait ( 30 ) ;
13416: LD_INT 30
13418: PPUSH
13419: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13423: LD_INT 4
13425: PPUSH
13426: LD_EXP 46
13430: PUSH
13431: LD_INT 3
13433: ARRAY
13434: PPUSH
13435: LD_VAR 0 1
13439: PUSH
13440: LD_INT 1
13442: ARRAY
13443: PPUSH
13444: LD_VAR 0 1
13448: PUSH
13449: LD_INT 2
13451: ARRAY
13452: PPUSH
13453: LD_INT 0
13455: PPUSH
13456: CALL_OW 58
// end ; enable ;
13460: ENABLE
// end ; end_of_file
13461: PPOPN 2
13463: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13464: LD_INT 0
13466: PPUSH
13467: PPUSH
// for un in battle_flags_id do
13468: LD_ADDR_VAR 0 2
13472: PUSH
13473: LD_EXP 35
13477: PUSH
13478: FOR_IN
13479: IFFALSE 13554
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13481: LD_VAR 0 2
13485: PPUSH
13486: LD_INT 1
13488: PUSH
13489: LD_LOC 14
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: LD_LOC 14
13505: PUSH
13506: LD_INT 2
13508: DIV
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 3
13516: PUSH
13517: LD_LOC 14
13521: PUSH
13522: LD_INT 5
13524: DIV
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 20
13532: PUSH
13533: LD_LOC 14
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: PPUSH
13548: CALL_OW 423
13552: GO 13478
13554: POP
13555: POP
// end ;
13556: LD_VAR 0 1
13560: RET
// every 0 0$0.1 do var un ;
13561: GO 13563
13563: DISABLE
13564: LD_INT 0
13566: PPUSH
// begin if not def_morale_flags then
13567: LD_EXP 60
13571: NOT
13572: IFFALSE 13576
// exit ;
13574: GO 13653
// if not morale_decreasing_time then
13576: LD_EXP 14
13580: NOT
13581: IFFALSE 13585
// exit ;
13583: GO 13653
// strength = 100 ;
13585: LD_ADDR_LOC 14
13589: PUSH
13590: LD_INT 100
13592: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13593: LD_EXP 14
13597: PPUSH
13598: CALL_OW 67
// strength := strength - 1 ;
13602: LD_ADDR_LOC 14
13606: PUSH
13607: LD_LOC 14
13611: PUSH
13612: LD_INT 1
13614: MINUS
13615: ST_TO_ADDR
// Update_Flags ;
13616: CALL 13464 0 0
// until not strength ;
13620: LD_LOC 14
13624: NOT
13625: IFFALSE 13593
// for un in battle_flags_id do
13627: LD_ADDR_VAR 0 1
13631: PUSH
13632: LD_EXP 35
13636: PUSH
13637: FOR_IN
13638: IFFALSE 13651
// KillBattleFlag ( un ) ;
13640: LD_VAR 0 1
13644: PPUSH
13645: CALL_OW 419
13649: GO 13637
13651: POP
13652: POP
// end ; end_of_file
13653: PPOPN 1
13655: END
// export BuildUpAreas ; export buildUpTimeActive ; export function BeginBuildUp ; var i , j ; begin
13656: LD_INT 0
13658: PPUSH
13659: PPUSH
13660: PPUSH
// buildUpTimeActive := true ;
13661: LD_ADDR_EXP 49
13665: PUSH
13666: LD_INT 1
13668: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13669: LD_ADDR_VAR 0 2
13673: PUSH
13674: DOUBLE
13675: LD_INT 1
13677: DEC
13678: ST_TO_ADDR
13679: LD_EXP 48
13683: PUSH
13684: FOR_TO
13685: IFFALSE 13840
// if Position_Sides [ i ] then
13687: LD_EXP 30
13691: PUSH
13692: LD_VAR 0 2
13696: ARRAY
13697: IFFALSE 13838
// for j := 1 to 8 do
13699: LD_ADDR_VAR 0 3
13703: PUSH
13704: DOUBLE
13705: LD_INT 1
13707: DEC
13708: ST_TO_ADDR
13709: LD_INT 8
13711: PUSH
13712: FOR_TO
13713: IFFALSE 13836
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13715: LD_EXP 24
13719: PUSH
13720: LD_VAR 0 3
13724: ARRAY
13725: PUSH
13726: LD_EXP 22
13730: PUSH
13731: LD_EXP 30
13735: PUSH
13736: LD_VAR 0 2
13740: ARRAY
13741: ARRAY
13742: PUSH
13743: LD_EXP 22
13747: PUSH
13748: LD_VAR 0 3
13752: ARRAY
13753: NONEQUAL
13754: PUSH
13755: LD_EXP 26
13759: NOT
13760: PUSH
13761: LD_EXP 30
13765: PUSH
13766: LD_VAR 0 2
13770: ARRAY
13771: PUSH
13772: LD_VAR 0 3
13776: NONEQUAL
13777: AND
13778: OR
13779: AND
13780: IFFALSE 13804
// HideArea ( j , BuildUpAreas [ i ] ) else
13782: LD_VAR 0 3
13786: PPUSH
13787: LD_EXP 48
13791: PUSH
13792: LD_VAR 0 2
13796: ARRAY
13797: PPUSH
13798: CALL_OW 333
13802: GO 13834
// if ( j = your_side ) then
13804: LD_VAR 0 3
13808: PUSH
13809: LD_OWVAR 2
13813: EQUAL
13814: IFFALSE 13834
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13816: LD_EXP 48
13820: PUSH
13821: LD_VAR 0 2
13825: ARRAY
13826: PPUSH
13827: LD_INT 5
13829: PPUSH
13830: CALL_OW 424
13834: GO 13712
13836: POP
13837: POP
13838: GO 13684
13840: POP
13841: POP
// end ;
13842: LD_VAR 0 1
13846: RET
// export function EndBuildUp ; var i , j ; begin
13847: LD_INT 0
13849: PPUSH
13850: PPUSH
13851: PPUSH
// buildUpTimeActive := false ;
13852: LD_ADDR_EXP 49
13856: PUSH
13857: LD_INT 0
13859: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13860: LD_ADDR_VAR 0 2
13864: PUSH
13865: DOUBLE
13866: LD_INT 1
13868: DEC
13869: ST_TO_ADDR
13870: LD_EXP 48
13874: PUSH
13875: FOR_TO
13876: IFFALSE 14031
// if Position_Sides [ i ] then
13878: LD_EXP 30
13882: PUSH
13883: LD_VAR 0 2
13887: ARRAY
13888: IFFALSE 14029
// for j := 1 to 8 do
13890: LD_ADDR_VAR 0 3
13894: PUSH
13895: DOUBLE
13896: LD_INT 1
13898: DEC
13899: ST_TO_ADDR
13900: LD_INT 8
13902: PUSH
13903: FOR_TO
13904: IFFALSE 14027
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13906: LD_EXP 24
13910: PUSH
13911: LD_VAR 0 3
13915: ARRAY
13916: PUSH
13917: LD_EXP 22
13921: PUSH
13922: LD_EXP 30
13926: PUSH
13927: LD_VAR 0 2
13931: ARRAY
13932: ARRAY
13933: PUSH
13934: LD_EXP 22
13938: PUSH
13939: LD_VAR 0 3
13943: ARRAY
13944: NONEQUAL
13945: PUSH
13946: LD_EXP 26
13950: NOT
13951: PUSH
13952: LD_EXP 30
13956: PUSH
13957: LD_VAR 0 2
13961: ARRAY
13962: PUSH
13963: LD_VAR 0 3
13967: NONEQUAL
13968: AND
13969: OR
13970: AND
13971: IFFALSE 13995
// ShowArea ( j , BuildUpAreas [ i ] ) else
13973: LD_VAR 0 3
13977: PPUSH
13978: LD_EXP 48
13982: PUSH
13983: LD_VAR 0 2
13987: ARRAY
13988: PPUSH
13989: CALL_OW 334
13993: GO 14025
// if ( j = your_side ) then
13995: LD_VAR 0 3
13999: PUSH
14000: LD_OWVAR 2
14004: EQUAL
14005: IFFALSE 14025
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
14007: LD_EXP 48
14011: PUSH
14012: LD_VAR 0 2
14016: ARRAY
14017: PPUSH
14018: LD_INT 0
14020: PPUSH
14021: CALL_OW 424
14025: GO 13903
14027: POP
14028: POP
14029: GO 13875
14031: POP
14032: POP
// end ;
14033: LD_VAR 0 1
14037: RET
// every 5 trigger buildUpTimeActive do var i , un ;
14038: LD_EXP 49
14042: IFFALSE 14225
14044: GO 14046
14046: DISABLE
14047: LD_INT 0
14049: PPUSH
14050: PPUSH
// begin for i := 1 to BuildUpAreas do
14051: LD_ADDR_VAR 0 1
14055: PUSH
14056: DOUBLE
14057: LD_INT 1
14059: DEC
14060: ST_TO_ADDR
14061: LD_EXP 48
14065: PUSH
14066: FOR_TO
14067: IFFALSE 14222
// if Position_Sides [ i ] then
14069: LD_EXP 30
14073: PUSH
14074: LD_VAR 0 1
14078: ARRAY
14079: IFFALSE 14220
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14081: LD_ADDR_VAR 0 2
14085: PUSH
14086: LD_EXP 48
14090: PUSH
14091: LD_VAR 0 1
14095: ARRAY
14096: PPUSH
14097: LD_INT 2
14099: PUSH
14100: LD_INT 21
14102: PUSH
14103: LD_INT 1
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 21
14112: PUSH
14113: LD_INT 2
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_OWVAR 2
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PPUSH
14141: CALL_OW 70
14145: PUSH
14146: FOR_IN
14147: IFFALSE 14218
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
14149: LD_EXP 22
14153: PUSH
14154: LD_EXP 30
14158: PUSH
14159: LD_VAR 0 1
14163: ARRAY
14164: ARRAY
14165: PUSH
14166: LD_EXP 22
14170: PUSH
14171: LD_OWVAR 2
14175: ARRAY
14176: NONEQUAL
14177: PUSH
14178: LD_EXP 26
14182: NOT
14183: PUSH
14184: LD_EXP 30
14188: PUSH
14189: LD_VAR 0 1
14193: ARRAY
14194: PUSH
14195: LD_OWVAR 2
14199: NONEQUAL
14200: AND
14201: OR
14202: IFFALSE 14216
// ComMoveToArea ( un , BuildUpEscape ) ;
14204: LD_VAR 0 2
14208: PPUSH
14209: LD_INT 24
14211: PPUSH
14212: CALL_OW 113
14216: GO 14146
14218: POP
14219: POP
14220: GO 14066
14222: POP
14223: POP
// enable ;
14224: ENABLE
// end ;
14225: PPOPN 2
14227: END
// every 0 0$1 trigger def_builduptime do
14228: LD_EXP 65
14232: IFFALSE 14258
14234: GO 14236
14236: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14237: LD_INT 8400
14239: PUSH
14240: LD_EXP 65
14244: PUSH
14245: LD_INT 2100
14247: MUL
14248: PLUS
14249: PPUSH
14250: CALL_OW 67
// EndBuildUp ;
14254: CALL 13847 0 0
// end ; end_of_file
14258: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
14259: LD_INT 0
14261: PPUSH
14262: PPUSH
// if ( not IAmSpec ) then
14263: CALL_OW 531
14267: NOT
14268: IFFALSE 14284
// Result := Limits_Info ^  ;
14270: LD_ADDR_VAR 0 1
14274: PUSH
14275: LD_LOC 26
14279: PUSH
14280: LD_STRING 
14282: ADD
14283: ST_TO_ADDR
// for i := 1 to 8 do
14284: LD_ADDR_VAR 0 2
14288: PUSH
14289: DOUBLE
14290: LD_INT 1
14292: DEC
14293: ST_TO_ADDR
14294: LD_INT 8
14296: PUSH
14297: FOR_TO
14298: IFFALSE 14343
// if Cheaters [ i ] then
14300: LD_LOC 27
14304: PUSH
14305: LD_VAR 0 2
14309: ARRAY
14310: IFFALSE 14341
// Result := Result ^ [ #Cheater , i , i ] ;
14312: LD_ADDR_VAR 0 1
14316: PUSH
14317: LD_VAR 0 1
14321: PUSH
14322: LD_STRING #Cheater
14324: PUSH
14325: LD_VAR 0 2
14329: PUSH
14330: LD_VAR 0 2
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: ADD
14340: ST_TO_ADDR
14341: GO 14297
14343: POP
14344: POP
// end ;
14345: LD_VAR 0 1
14349: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14350: LD_INT 0
14352: PPUSH
14353: PPUSH
14354: PPUSH
14355: PPUSH
14356: PPUSH
// case Game_Type of 10 :
14357: LD_EXP 50
14361: PUSH
14362: LD_INT 10
14364: DOUBLE
14365: EQUAL
14366: IFTRUE 14370
14368: GO 14381
14370: POP
// def_game_rules := 1 ; 11 :
14371: LD_ADDR_EXP 51
14375: PUSH
14376: LD_INT 1
14378: ST_TO_ADDR
14379: GO 14401
14381: LD_INT 11
14383: DOUBLE
14384: EQUAL
14385: IFTRUE 14389
14387: GO 14400
14389: POP
// def_game_rules := 3 ; end ;
14390: LD_ADDR_EXP 51
14394: PUSH
14395: LD_INT 3
14397: ST_TO_ADDR
14398: GO 14401
14400: POP
// case def_game_rules of 0 :
14401: LD_EXP 51
14405: PUSH
14406: LD_INT 0
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14419
14414: POP
// exit ; 1 :
14415: GO 16477
14417: GO 16377
14419: LD_INT 1
14421: DOUBLE
14422: EQUAL
14423: IFTRUE 14427
14425: GO 14643
14427: POP
// begin def_base_level := 2 ;
14428: LD_ADDR_EXP 52
14432: PUSH
14433: LD_INT 2
14435: ST_TO_ADDR
// def_amount_of_people := 2 ;
14436: LD_ADDR_EXP 53
14440: PUSH
14441: LD_INT 2
14443: ST_TO_ADDR
// def_skill_level := 1 ;
14444: LD_ADDR_EXP 54
14448: PUSH
14449: LD_INT 1
14451: ST_TO_ADDR
// def_starting_resources := 2 ;
14452: LD_ADDR_EXP 55
14456: PUSH
14457: LD_INT 2
14459: ST_TO_ADDR
// def_shipments_density := 1 ;
14460: LD_ADDR_EXP 56
14464: PUSH
14465: LD_INT 1
14467: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14468: LD_ADDR_EXP 57
14472: PUSH
14473: LD_INT 0
14475: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14476: LD_ADDR_EXP 58
14480: PUSH
14481: LD_INT 1
14483: ST_TO_ADDR
// def_shared_vision := 1 ;
14484: LD_ADDR_EXP 59
14488: PUSH
14489: LD_INT 1
14491: ST_TO_ADDR
// def_morale_flags := 3 ;
14492: LD_ADDR_EXP 60
14496: PUSH
14497: LD_INT 3
14499: ST_TO_ADDR
// def_siberite_detection := 1 ;
14500: LD_ADDR_EXP 61
14504: PUSH
14505: LD_INT 1
14507: ST_TO_ADDR
// def_people_respawning := 1 ;
14508: LD_ADDR_EXP 62
14512: PUSH
14513: LD_INT 1
14515: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14516: LD_ADDR_EXP 63
14520: PUSH
14521: LD_INT 1
14523: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14524: LD_ADDR_EXP 64
14528: PUSH
14529: LD_INT 0
14531: ST_TO_ADDR
// def_builduptime := 2 ;
14532: LD_ADDR_EXP 65
14536: PUSH
14537: LD_INT 2
14539: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14540: LD_ADDR_VAR 0 2
14544: PUSH
14545: EMPTY
14546: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14547: LD_ADDR_VAR 0 3
14551: PUSH
14552: EMPTY
14553: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14554: LD_ADDR_LOC 21
14558: PUSH
14559: EMPTY
14560: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14561: LD_ADDR_LOC 22
14565: PUSH
14566: EMPTY
14567: ST_TO_ADDR
// Banned_Controls := [ ] ;
14568: LD_ADDR_LOC 23
14572: PUSH
14573: EMPTY
14574: ST_TO_ADDR
// Banned_Engines := [ ] ;
14575: LD_ADDR_LOC 24
14579: PUSH
14580: EMPTY
14581: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14582: LD_ADDR_LOC 19
14586: PUSH
14587: LD_INT 37
14589: PUSH
14590: EMPTY
14591: LIST
14592: PUSH
14593: LD_INT 4
14595: PUSH
14596: LD_INT 5
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: LD_INT 31
14605: PUSH
14606: LD_INT 32
14608: PUSH
14609: LD_INT 33
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: LIST
14621: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14622: LD_ADDR_LOC 20
14626: PUSH
14627: LD_INT 2
14629: PUSH
14630: LD_INT 2
14632: PUSH
14633: LD_INT 4
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: LIST
14640: ST_TO_ADDR
// end ; 2 :
14641: GO 16377
14643: LD_INT 2
14645: DOUBLE
14646: EQUAL
14647: IFTRUE 14651
14649: GO 14860
14651: POP
// begin def_base_level := 1 ;
14652: LD_ADDR_EXP 52
14656: PUSH
14657: LD_INT 1
14659: ST_TO_ADDR
// def_amount_of_people := 2 ;
14660: LD_ADDR_EXP 53
14664: PUSH
14665: LD_INT 2
14667: ST_TO_ADDR
// def_skill_level := 3 ;
14668: LD_ADDR_EXP 54
14672: PUSH
14673: LD_INT 3
14675: ST_TO_ADDR
// def_starting_resources := 3 ;
14676: LD_ADDR_EXP 55
14680: PUSH
14681: LD_INT 3
14683: ST_TO_ADDR
// def_shipments_density := 2 ;
14684: LD_ADDR_EXP 56
14688: PUSH
14689: LD_INT 2
14691: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14692: LD_ADDR_EXP 57
14696: PUSH
14697: LD_INT 1
14699: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14700: LD_ADDR_EXP 58
14704: PUSH
14705: LD_INT 2
14707: ST_TO_ADDR
// def_shared_vision := 1 ;
14708: LD_ADDR_EXP 59
14712: PUSH
14713: LD_INT 1
14715: ST_TO_ADDR
// def_morale_flags := 0 ;
14716: LD_ADDR_EXP 60
14720: PUSH
14721: LD_INT 0
14723: ST_TO_ADDR
// def_siberite_detection := 1 ;
14724: LD_ADDR_EXP 61
14728: PUSH
14729: LD_INT 1
14731: ST_TO_ADDR
// def_people_respawning := 0 ;
14732: LD_ADDR_EXP 62
14736: PUSH
14737: LD_INT 0
14739: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14740: LD_ADDR_EXP 63
14744: PUSH
14745: LD_INT 0
14747: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14748: LD_ADDR_EXP 64
14752: PUSH
14753: LD_INT 0
14755: ST_TO_ADDR
// def_builduptime := 2 ;
14756: LD_ADDR_EXP 65
14760: PUSH
14761: LD_INT 2
14763: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14764: LD_ADDR_VAR 0 2
14768: PUSH
14769: LD_INT 1
14771: PUSH
14772: EMPTY
14773: LIST
14774: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14775: LD_ADDR_VAR 0 3
14779: PUSH
14780: EMPTY
14781: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14782: LD_ADDR_LOC 21
14786: PUSH
14787: EMPTY
14788: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14789: LD_ADDR_LOC 22
14793: PUSH
14794: EMPTY
14795: ST_TO_ADDR
// Banned_Controls := [ ] ;
14796: LD_ADDR_LOC 23
14800: PUSH
14801: EMPTY
14802: ST_TO_ADDR
// Banned_Engines := [ ] ;
14803: LD_ADDR_LOC 24
14807: PUSH
14808: EMPTY
14809: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14810: LD_ADDR_LOC 19
14814: PUSH
14815: LD_INT 4
14817: PUSH
14818: LD_INT 5
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 31
14827: PUSH
14828: LD_INT 32
14830: PUSH
14831: LD_INT 33
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: LIST
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
14843: LD_ADDR_LOC 20
14847: PUSH
14848: LD_INT 1
14850: PUSH
14851: LD_INT 2
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: ST_TO_ADDR
// end ; 3 :
14858: GO 16377
14860: LD_INT 3
14862: DOUBLE
14863: EQUAL
14864: IFTRUE 14868
14866: GO 15111
14868: POP
// begin def_base_level := 1 ;
14869: LD_ADDR_EXP 52
14873: PUSH
14874: LD_INT 1
14876: ST_TO_ADDR
// def_amount_of_people := 2 ;
14877: LD_ADDR_EXP 53
14881: PUSH
14882: LD_INT 2
14884: ST_TO_ADDR
// def_skill_level := 3 ;
14885: LD_ADDR_EXP 54
14889: PUSH
14890: LD_INT 3
14892: ST_TO_ADDR
// def_starting_resources := 3 ;
14893: LD_ADDR_EXP 55
14897: PUSH
14898: LD_INT 3
14900: ST_TO_ADDR
// def_shipments_density := 1 ;
14901: LD_ADDR_EXP 56
14905: PUSH
14906: LD_INT 1
14908: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14909: LD_ADDR_EXP 57
14913: PUSH
14914: LD_INT 0
14916: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14917: LD_ADDR_EXP 58
14921: PUSH
14922: LD_INT 1
14924: ST_TO_ADDR
// def_shared_vision := 1 ;
14925: LD_ADDR_EXP 59
14929: PUSH
14930: LD_INT 1
14932: ST_TO_ADDR
// def_morale_flags := 0 ;
14933: LD_ADDR_EXP 60
14937: PUSH
14938: LD_INT 0
14940: ST_TO_ADDR
// def_siberite_detection := 1 ;
14941: LD_ADDR_EXP 61
14945: PUSH
14946: LD_INT 1
14948: ST_TO_ADDR
// def_people_respawning := 0 ;
14949: LD_ADDR_EXP 62
14953: PUSH
14954: LD_INT 0
14956: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14957: LD_ADDR_EXP 63
14961: PUSH
14962: LD_INT 2
14964: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14965: LD_ADDR_EXP 64
14969: PUSH
14970: LD_INT 0
14972: ST_TO_ADDR
// def_builduptime := 1 ;
14973: LD_ADDR_EXP 65
14977: PUSH
14978: LD_INT 1
14980: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14981: LD_ADDR_VAR 0 2
14985: PUSH
14986: LD_INT 23
14988: PUSH
14989: EMPTY
14990: LIST
14991: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14992: LD_ADDR_VAR 0 3
14996: PUSH
14997: LD_INT 2
14999: PUSH
15000: LD_INT 37
15002: PUSH
15003: LD_INT 32
15005: PUSH
15006: LD_INT 33
15008: PUSH
15009: LD_INT 36
15011: PUSH
15012: LD_INT 16
15014: PUSH
15015: LD_INT 23
15017: PUSH
15018: LD_INT 21
15020: PUSH
15021: LD_INT 18
15023: PUSH
15024: LD_INT 22
15026: PUSH
15027: LD_INT 20
15029: PUSH
15030: LD_INT 19
15032: PUSH
15033: LD_INT 25
15035: PUSH
15036: LD_INT 17
15038: PUSH
15039: LD_INT 24
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15059: LD_ADDR_LOC 21
15063: PUSH
15064: EMPTY
15065: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15066: LD_ADDR_LOC 22
15070: PUSH
15071: EMPTY
15072: ST_TO_ADDR
// Banned_Controls := [ ] ;
15073: LD_ADDR_LOC 23
15077: PUSH
15078: EMPTY
15079: ST_TO_ADDR
// Banned_Engines := [ ] ;
15080: LD_ADDR_LOC 24
15084: PUSH
15085: EMPTY
15086: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15087: LD_ADDR_LOC 19
15091: PUSH
15092: EMPTY
15093: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15094: LD_ADDR_LOC 20
15098: PUSH
15099: EMPTY
15100: ST_TO_ADDR
// No_Mechs := true ;
15101: LD_ADDR_EXP 66
15105: PUSH
15106: LD_INT 1
15108: ST_TO_ADDR
// end ; 4 :
15109: GO 16377
15111: LD_INT 4
15113: DOUBLE
15114: EQUAL
15115: IFTRUE 15119
15117: GO 15294
15119: POP
// begin def_base_level := 1 ;
15120: LD_ADDR_EXP 52
15124: PUSH
15125: LD_INT 1
15127: ST_TO_ADDR
// def_amount_of_people := 2 ;
15128: LD_ADDR_EXP 53
15132: PUSH
15133: LD_INT 2
15135: ST_TO_ADDR
// def_skill_level := 3 ;
15136: LD_ADDR_EXP 54
15140: PUSH
15141: LD_INT 3
15143: ST_TO_ADDR
// def_starting_resources := 3 ;
15144: LD_ADDR_EXP 55
15148: PUSH
15149: LD_INT 3
15151: ST_TO_ADDR
// def_shipments_density := 2 ;
15152: LD_ADDR_EXP 56
15156: PUSH
15157: LD_INT 2
15159: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15160: LD_ADDR_EXP 57
15164: PUSH
15165: LD_INT 1
15167: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15168: LD_ADDR_EXP 58
15172: PUSH
15173: LD_INT 2
15175: ST_TO_ADDR
// def_shared_vision := 1 ;
15176: LD_ADDR_EXP 59
15180: PUSH
15181: LD_INT 1
15183: ST_TO_ADDR
// def_morale_flags := 0 ;
15184: LD_ADDR_EXP 60
15188: PUSH
15189: LD_INT 0
15191: ST_TO_ADDR
// def_siberite_detection := 1 ;
15192: LD_ADDR_EXP 61
15196: PUSH
15197: LD_INT 1
15199: ST_TO_ADDR
// def_people_respawning := 0 ;
15200: LD_ADDR_EXP 62
15204: PUSH
15205: LD_INT 0
15207: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
15208: LD_ADDR_EXP 63
15212: PUSH
15213: LD_INT 0
15215: ST_TO_ADDR
// def_siberite_bomb := 1 ;
15216: LD_ADDR_EXP 64
15220: PUSH
15221: LD_INT 1
15223: ST_TO_ADDR
// def_builduptime := 3 ;
15224: LD_ADDR_EXP 65
15228: PUSH
15229: LD_INT 3
15231: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
15232: LD_ADDR_VAR 0 2
15236: PUSH
15237: LD_INT 1
15239: PUSH
15240: EMPTY
15241: LIST
15242: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
15243: LD_ADDR_VAR 0 3
15247: PUSH
15248: EMPTY
15249: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15250: LD_ADDR_LOC 21
15254: PUSH
15255: EMPTY
15256: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15257: LD_ADDR_LOC 22
15261: PUSH
15262: EMPTY
15263: ST_TO_ADDR
// Banned_Controls := [ ] ;
15264: LD_ADDR_LOC 23
15268: PUSH
15269: EMPTY
15270: ST_TO_ADDR
// Banned_Engines := [ ] ;
15271: LD_ADDR_LOC 24
15275: PUSH
15276: EMPTY
15277: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15278: LD_ADDR_LOC 19
15282: PUSH
15283: EMPTY
15284: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15285: LD_ADDR_LOC 20
15289: PUSH
15290: EMPTY
15291: ST_TO_ADDR
// end ; 5 :
15292: GO 16377
15294: LD_INT 5
15296: DOUBLE
15297: EQUAL
15298: IFTRUE 15302
15300: GO 15551
15302: POP
// begin def_base_level := 0 ;
15303: LD_ADDR_EXP 52
15307: PUSH
15308: LD_INT 0
15310: ST_TO_ADDR
// def_amount_of_people := 0 ;
15311: LD_ADDR_EXP 53
15315: PUSH
15316: LD_INT 0
15318: ST_TO_ADDR
// def_skill_level := 0 ;
15319: LD_ADDR_EXP 54
15323: PUSH
15324: LD_INT 0
15326: ST_TO_ADDR
// def_starting_resources := 0 ;
15327: LD_ADDR_EXP 55
15331: PUSH
15332: LD_INT 0
15334: ST_TO_ADDR
// def_shipments_density := 0 ;
15335: LD_ADDR_EXP 56
15339: PUSH
15340: LD_INT 0
15342: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15343: LD_ADDR_EXP 57
15347: PUSH
15348: LD_INT 0
15350: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15351: LD_ADDR_EXP 58
15355: PUSH
15356: LD_INT 0
15358: ST_TO_ADDR
// def_shared_vision := 1 ;
15359: LD_ADDR_EXP 59
15363: PUSH
15364: LD_INT 1
15366: ST_TO_ADDR
// def_morale_flags := 0 ;
15367: LD_ADDR_EXP 60
15371: PUSH
15372: LD_INT 0
15374: ST_TO_ADDR
// def_siberite_detection := 0 ;
15375: LD_ADDR_EXP 61
15379: PUSH
15380: LD_INT 0
15382: ST_TO_ADDR
// def_people_respawning := 1 ;
15383: LD_ADDR_EXP 62
15387: PUSH
15388: LD_INT 1
15390: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15391: LD_ADDR_EXP 63
15395: PUSH
15396: LD_INT 1
15398: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15399: LD_ADDR_EXP 64
15403: PUSH
15404: LD_INT 0
15406: ST_TO_ADDR
// def_builduptime := 0 ;
15407: LD_ADDR_EXP 65
15411: PUSH
15412: LD_INT 0
15414: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
15415: LD_ADDR_VAR 0 2
15419: PUSH
15420: LD_INT 10
15422: PUSH
15423: LD_INT 3
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
15430: LD_ADDR_VAR 0 3
15434: PUSH
15435: LD_INT 12
15437: PUSH
15438: LD_INT 11
15440: PUSH
15441: LD_INT 14
15443: PUSH
15444: LD_INT 13
15446: PUSH
15447: LD_INT 5
15449: PUSH
15450: LD_INT 24
15452: PUSH
15453: LD_INT 21
15455: PUSH
15456: LD_INT 33
15458: PUSH
15459: LD_INT 36
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
15473: LD_ADDR_LOC 21
15477: PUSH
15478: LD_INT 31
15480: PUSH
15481: EMPTY
15482: LIST
15483: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15484: LD_ADDR_LOC 22
15488: PUSH
15489: EMPTY
15490: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
15491: LD_ADDR_LOC 23
15495: PUSH
15496: LD_INT 2
15498: PUSH
15499: EMPTY
15500: LIST
15501: ST_TO_ADDR
// Banned_Engines := [ ] ;
15502: LD_ADDR_LOC 24
15506: PUSH
15507: EMPTY
15508: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
15509: LD_ADDR_LOC 19
15513: PUSH
15514: LD_INT 4
15516: PUSH
15517: EMPTY
15518: LIST
15519: PUSH
15520: LD_INT 31
15522: PUSH
15523: LD_INT 32
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
15534: LD_ADDR_LOC 20
15538: PUSH
15539: LD_INT 1
15541: PUSH
15542: LD_INT 1
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: ST_TO_ADDR
// end ; 6 :
15549: GO 16377
15551: LD_INT 6
15553: DOUBLE
15554: EQUAL
15555: IFTRUE 15559
15557: GO 15762
15559: POP
// begin def_base_level := 1 ;
15560: LD_ADDR_EXP 52
15564: PUSH
15565: LD_INT 1
15567: ST_TO_ADDR
// def_amount_of_people := 2 ;
15568: LD_ADDR_EXP 53
15572: PUSH
15573: LD_INT 2
15575: ST_TO_ADDR
// def_skill_level := 3 ;
15576: LD_ADDR_EXP 54
15580: PUSH
15581: LD_INT 3
15583: ST_TO_ADDR
// def_starting_resources := 3 ;
15584: LD_ADDR_EXP 55
15588: PUSH
15589: LD_INT 3
15591: ST_TO_ADDR
// def_shipments_density := 1 ;
15592: LD_ADDR_EXP 56
15596: PUSH
15597: LD_INT 1
15599: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15600: LD_ADDR_EXP 57
15604: PUSH
15605: LD_INT 0
15607: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15608: LD_ADDR_EXP 58
15612: PUSH
15613: LD_INT 1
15615: ST_TO_ADDR
// def_shared_vision := 1 ;
15616: LD_ADDR_EXP 59
15620: PUSH
15621: LD_INT 1
15623: ST_TO_ADDR
// def_morale_flags := 0 ;
15624: LD_ADDR_EXP 60
15628: PUSH
15629: LD_INT 0
15631: ST_TO_ADDR
// def_siberite_detection := 1 ;
15632: LD_ADDR_EXP 61
15636: PUSH
15637: LD_INT 1
15639: ST_TO_ADDR
// def_people_respawning := 2 ;
15640: LD_ADDR_EXP 62
15644: PUSH
15645: LD_INT 2
15647: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15648: LD_ADDR_EXP 63
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15656: LD_ADDR_EXP 64
15660: PUSH
15661: LD_INT 0
15663: ST_TO_ADDR
// def_builduptime := 1 ;
15664: LD_ADDR_EXP 65
15668: PUSH
15669: LD_INT 1
15671: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15672: LD_ADDR_VAR 0 2
15676: PUSH
15677: LD_INT 23
15679: PUSH
15680: EMPTY
15681: LIST
15682: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
15683: LD_ADDR_VAR 0 3
15687: PUSH
15688: LD_INT 2
15690: PUSH
15691: LD_INT 37
15693: PUSH
15694: LD_INT 31
15696: PUSH
15697: LD_INT 32
15699: PUSH
15700: LD_INT 33
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15710: LD_ADDR_LOC 21
15714: PUSH
15715: EMPTY
15716: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15717: LD_ADDR_LOC 22
15721: PUSH
15722: EMPTY
15723: ST_TO_ADDR
// Banned_Controls := [ ] ;
15724: LD_ADDR_LOC 23
15728: PUSH
15729: EMPTY
15730: ST_TO_ADDR
// Banned_Engines := [ ] ;
15731: LD_ADDR_LOC 24
15735: PUSH
15736: EMPTY
15737: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15738: LD_ADDR_LOC 19
15742: PUSH
15743: EMPTY
15744: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15745: LD_ADDR_LOC 20
15749: PUSH
15750: EMPTY
15751: ST_TO_ADDR
// No_Mechs := true ;
15752: LD_ADDR_EXP 66
15756: PUSH
15757: LD_INT 1
15759: ST_TO_ADDR
// end ; 7 :
15760: GO 16377
15762: LD_INT 7
15764: DOUBLE
15765: EQUAL
15766: IFTRUE 15770
15768: GO 15968
15770: POP
// begin def_base_level := 1 ;
15771: LD_ADDR_EXP 52
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// def_amount_of_people := 2 ;
15779: LD_ADDR_EXP 53
15783: PUSH
15784: LD_INT 2
15786: ST_TO_ADDR
// def_skill_level := 3 ;
15787: LD_ADDR_EXP 54
15791: PUSH
15792: LD_INT 3
15794: ST_TO_ADDR
// def_starting_resources := 3 ;
15795: LD_ADDR_EXP 55
15799: PUSH
15800: LD_INT 3
15802: ST_TO_ADDR
// def_shipments_density := 1 ;
15803: LD_ADDR_EXP 56
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15811: LD_ADDR_EXP 57
15815: PUSH
15816: LD_INT 1
15818: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15819: LD_ADDR_EXP 58
15823: PUSH
15824: LD_INT 2
15826: ST_TO_ADDR
// def_shared_vision := 1 ;
15827: LD_ADDR_EXP 59
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// def_morale_flags := 0 ;
15835: LD_ADDR_EXP 60
15839: PUSH
15840: LD_INT 0
15842: ST_TO_ADDR
// def_siberite_detection := 1 ;
15843: LD_ADDR_EXP 61
15847: PUSH
15848: LD_INT 1
15850: ST_TO_ADDR
// def_people_respawning := 0 ;
15851: LD_ADDR_EXP 62
15855: PUSH
15856: LD_INT 0
15858: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15859: LD_ADDR_EXP 63
15863: PUSH
15864: LD_INT 1
15866: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15867: LD_ADDR_EXP 64
15871: PUSH
15872: LD_INT 0
15874: ST_TO_ADDR
// def_builduptime := 3 ;
15875: LD_ADDR_EXP 65
15879: PUSH
15880: LD_INT 3
15882: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15883: LD_ADDR_VAR 0 2
15887: PUSH
15888: LD_INT 23
15890: PUSH
15891: EMPTY
15892: LIST
15893: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_INT 37
15901: PUSH
15902: EMPTY
15903: LIST
15904: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15905: LD_ADDR_LOC 21
15909: PUSH
15910: EMPTY
15911: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15912: LD_ADDR_LOC 22
15916: PUSH
15917: EMPTY
15918: ST_TO_ADDR
// Banned_Controls := [ ] ;
15919: LD_ADDR_LOC 23
15923: PUSH
15924: EMPTY
15925: ST_TO_ADDR
// Banned_Engines := [ ] ;
15926: LD_ADDR_LOC 24
15930: PUSH
15931: EMPTY
15932: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15933: LD_ADDR_LOC 19
15937: PUSH
15938: LD_INT 31
15940: PUSH
15941: LD_INT 32
15943: PUSH
15944: LD_INT 33
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
15955: LD_ADDR_LOC 20
15959: PUSH
15960: LD_INT 10
15962: PUSH
15963: EMPTY
15964: LIST
15965: ST_TO_ADDR
// end ; 8 :
15966: GO 16377
15968: LD_INT 8
15970: DOUBLE
15971: EQUAL
15972: IFTRUE 15976
15974: GO 16376
15976: POP
// begin def_base_level := 0 ;
15977: LD_ADDR_EXP 52
15981: PUSH
15982: LD_INT 0
15984: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
15985: LD_ADDR_EXP 53
15989: PUSH
15990: LD_INT 0
15992: PPUSH
15993: LD_INT 1
15995: PPUSH
15996: CALL_OW 12
16000: ST_TO_ADDR
// def_skill_level := 0 ;
16001: LD_ADDR_EXP 54
16005: PUSH
16006: LD_INT 0
16008: ST_TO_ADDR
// def_starting_resources := 2 ;
16009: LD_ADDR_EXP 55
16013: PUSH
16014: LD_INT 2
16016: ST_TO_ADDR
// def_shipments_density := 1 ;
16017: LD_ADDR_EXP 56
16021: PUSH
16022: LD_INT 1
16024: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16025: LD_ADDR_EXP 57
16029: PUSH
16030: LD_INT 0
16032: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16033: LD_ADDR_EXP 58
16037: PUSH
16038: LD_INT 0
16040: ST_TO_ADDR
// def_shared_vision := 1 ;
16041: LD_ADDR_EXP 59
16045: PUSH
16046: LD_INT 1
16048: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
16049: LD_ADDR_EXP 60
16053: PUSH
16054: LD_INT 0
16056: PPUSH
16057: LD_INT 2
16059: PPUSH
16060: CALL_OW 12
16064: ST_TO_ADDR
// def_siberite_detection := 0 ;
16065: LD_ADDR_EXP 61
16069: PUSH
16070: LD_INT 0
16072: ST_TO_ADDR
// def_people_respawning := 0 ;
16073: LD_ADDR_EXP 62
16077: PUSH
16078: LD_INT 0
16080: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16081: LD_ADDR_EXP 63
16085: PUSH
16086: LD_INT 2
16088: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16089: LD_ADDR_EXP 64
16093: PUSH
16094: LD_INT 0
16096: ST_TO_ADDR
// def_builduptime := 0 ;
16097: LD_ADDR_EXP 65
16101: PUSH
16102: LD_INT 0
16104: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
16105: LD_ADDR_VAR 0 2
16109: PUSH
16110: LD_INT 23
16112: PUSH
16113: LD_INT 20
16115: PUSH
16116: LD_INT 40
16118: PUSH
16119: LD_INT 47
16121: PUSH
16122: LD_INT 46
16124: PUSH
16125: LD_INT 39
16127: PUSH
16128: LD_INT 71
16130: PUSH
16131: LD_INT 34
16133: PUSH
16134: LD_INT 41
16136: PUSH
16137: LD_INT 44
16139: PUSH
16140: LD_INT 17
16142: PUSH
16143: LD_INT 16
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
16160: LD_ADDR_VAR 0 3
16164: PUSH
16165: LD_INT 37
16167: PUSH
16168: LD_INT 5
16170: PUSH
16171: LD_INT 13
16173: PUSH
16174: LD_INT 34
16176: PUSH
16177: LD_INT 12
16179: PUSH
16180: LD_INT 15
16182: PUSH
16183: LD_INT 11
16185: PUSH
16186: LD_INT 14
16188: PUSH
16189: LD_INT 29
16191: PUSH
16192: LD_INT 30
16194: PUSH
16195: LD_INT 28
16197: PUSH
16198: LD_INT 24
16200: PUSH
16201: LD_INT 25
16203: PUSH
16204: LD_INT 20
16206: PUSH
16207: LD_INT 21
16209: PUSH
16210: LD_INT 22
16212: PUSH
16213: LD_INT 36
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16235: LD_ADDR_LOC 21
16239: PUSH
16240: EMPTY
16241: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
16242: LD_ADDR_LOC 22
16246: PUSH
16247: LD_INT 14
16249: PUSH
16250: EMPTY
16251: LIST
16252: ST_TO_ADDR
// Banned_Controls := [ ] ;
16253: LD_ADDR_LOC 23
16257: PUSH
16258: EMPTY
16259: ST_TO_ADDR
// Banned_Engines := [ ] ;
16260: LD_ADDR_LOC 24
16264: PUSH
16265: EMPTY
16266: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
16267: LD_ADDR_LOC 19
16271: PUSH
16272: LD_INT 31
16274: PUSH
16275: LD_INT 32
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: LD_INT 4
16284: PUSH
16285: EMPTY
16286: LIST
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
16292: LD_ADDR_LOC 20
16296: PUSH
16297: LD_INT 2
16299: PUSH
16300: LD_INT 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: ST_TO_ADDR
// for i := 1 to 8 do
16307: LD_ADDR_VAR 0 4
16311: PUSH
16312: DOUBLE
16313: LD_INT 1
16315: DEC
16316: ST_TO_ADDR
16317: LD_INT 8
16319: PUSH
16320: FOR_TO
16321: IFFALSE 16372
// if ( Side_Nations [ i ] = 3 ) then
16323: LD_EXP 25
16327: PUSH
16328: LD_VAR 0 4
16332: ARRAY
16333: PUSH
16334: LD_INT 3
16336: EQUAL
16337: IFFALSE 16370
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
16339: LD_ADDR_EXP 25
16343: PUSH
16344: LD_EXP 25
16348: PPUSH
16349: LD_VAR 0 4
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: LD_INT 2
16359: PPUSH
16360: CALL_OW 12
16364: PPUSH
16365: CALL_OW 1
16369: ST_TO_ADDR
16370: GO 16320
16372: POP
16373: POP
// end ; end ;
16374: GO 16377
16376: POP
// for i := 1 to 8 do
16377: LD_ADDR_VAR 0 4
16381: PUSH
16382: DOUBLE
16383: LD_INT 1
16385: DEC
16386: ST_TO_ADDR
16387: LD_INT 8
16389: PUSH
16390: FOR_TO
16391: IFFALSE 16475
// if Side_Positions [ i ] then
16393: LD_EXP 24
16397: PUSH
16398: LD_VAR 0 4
16402: ARRAY
16403: IFFALSE 16473
// begin for j in Unavailable_Techs do
16405: LD_ADDR_VAR 0 5
16409: PUSH
16410: LD_VAR 0 2
16414: PUSH
16415: FOR_IN
16416: IFFALSE 16437
// SetTech ( j , i , 0 ) ;
16418: LD_VAR 0 5
16422: PPUSH
16423: LD_VAR 0 4
16427: PPUSH
16428: LD_INT 0
16430: PPUSH
16431: CALL_OW 322
16435: GO 16415
16437: POP
16438: POP
// for j in Unavailable_Builds do
16439: LD_ADDR_VAR 0 5
16443: PUSH
16444: LD_VAR 0 3
16448: PUSH
16449: FOR_IN
16450: IFFALSE 16471
// SetRestrict ( j , i , 0 ) ;
16452: LD_VAR 0 5
16456: PPUSH
16457: LD_VAR 0 4
16461: PPUSH
16462: LD_INT 0
16464: PPUSH
16465: CALL_OW 324
16469: GO 16449
16471: POP
16472: POP
// end ;
16473: GO 16390
16475: POP
16476: POP
// end ;
16477: LD_VAR 0 1
16481: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
16482: LD_INT 0
16484: PPUSH
16485: PPUSH
16486: PPUSH
16487: PPUSH
16488: PPUSH
16489: PPUSH
16490: PPUSH
// for i := 1 to Restricted_Builds do
16491: LD_ADDR_VAR 0 2
16495: PUSH
16496: DOUBLE
16497: LD_INT 1
16499: DEC
16500: ST_TO_ADDR
16501: LD_LOC 19
16505: PUSH
16506: FOR_TO
16507: IFFALSE 16817
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
16509: LD_LOC 19
16513: PUSH
16514: LD_VAR 0 2
16518: ARRAY
16519: PUSH
16520: LD_INT 1
16522: ARRAY
16523: PUSH
16524: LD_INT 31
16526: DOUBLE
16527: EQUAL
16528: IFTRUE 16544
16530: LD_INT 32
16532: DOUBLE
16533: EQUAL
16534: IFTRUE 16544
16536: LD_INT 33
16538: DOUBLE
16539: EQUAL
16540: IFTRUE 16544
16542: GO 16555
16544: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
16545: LD_ADDR_VAR 0 6
16549: PUSH
16550: LD_STRING #Turrets
16552: ST_TO_ADDR
16553: GO 16600
16555: LD_INT 4
16557: DOUBLE
16558: EQUAL
16559: IFTRUE 16569
16561: LD_INT 5
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16580
16569: POP
// btype := #Armouries ; b_Behemoth :
16570: LD_ADDR_VAR 0 6
16574: PUSH
16575: LD_STRING #Armouries
16577: ST_TO_ADDR
16578: GO 16600
16580: LD_INT 37
16582: DOUBLE
16583: EQUAL
16584: IFTRUE 16588
16586: GO 16599
16588: POP
// btype := #Behemoths ; end ;
16589: LD_ADDR_VAR 0 6
16593: PUSH
16594: LD_STRING #Behemoths
16596: ST_TO_ADDR
16597: GO 16600
16599: POP
// list := [ ] ;
16600: LD_ADDR_VAR 0 7
16604: PUSH
16605: EMPTY
16606: ST_TO_ADDR
// for j := 1 to 8 do
16607: LD_ADDR_VAR 0 3
16611: PUSH
16612: DOUBLE
16613: LD_INT 1
16615: DEC
16616: ST_TO_ADDR
16617: LD_INT 8
16619: PUSH
16620: FOR_TO
16621: IFFALSE 16714
// if Side_Positions [ j ] then
16623: LD_EXP 24
16627: PUSH
16628: LD_VAR 0 3
16632: ARRAY
16633: IFFALSE 16712
// begin amount := 0 ;
16635: LD_ADDR_VAR 0 5
16639: PUSH
16640: LD_INT 0
16642: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
16643: LD_ADDR_VAR 0 4
16647: PUSH
16648: LD_LOC 19
16652: PUSH
16653: LD_VAR 0 2
16657: ARRAY
16658: PUSH
16659: FOR_IN
16660: IFFALSE 16708
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
16662: LD_ADDR_VAR 0 5
16666: PUSH
16667: LD_VAR 0 5
16671: PUSH
16672: LD_INT 22
16674: PUSH
16675: LD_VAR 0 3
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 30
16686: PUSH
16687: LD_VAR 0 4
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PPUSH
16700: CALL_OW 69
16704: PLUS
16705: ST_TO_ADDR
16706: GO 16659
16708: POP
16709: POP
// break ;
16710: GO 16714
// end ;
16712: GO 16620
16714: POP
16715: POP
// list := [ ] ;
16716: LD_ADDR_VAR 0 7
16720: PUSH
16721: EMPTY
16722: ST_TO_ADDR
// for j := 1 to 8 do
16723: LD_ADDR_VAR 0 3
16727: PUSH
16728: DOUBLE
16729: LD_INT 1
16731: DEC
16732: ST_TO_ADDR
16733: LD_INT 8
16735: PUSH
16736: FOR_TO
16737: IFFALSE 16757
// list := list ^ amount ;
16739: LD_ADDR_VAR 0 7
16743: PUSH
16744: LD_VAR 0 7
16748: PUSH
16749: LD_VAR 0 5
16753: ADD
16754: ST_TO_ADDR
16755: GO 16736
16757: POP
16758: POP
// Already_Built := Already_Built ^ [ list ] ;
16759: LD_ADDR_LOC 25
16763: PUSH
16764: LD_LOC 25
16768: PUSH
16769: LD_VAR 0 7
16773: PUSH
16774: EMPTY
16775: LIST
16776: ADD
16777: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
16778: LD_ADDR_LOC 26
16782: PUSH
16783: LD_LOC 26
16787: PUSH
16788: LD_VAR 0 6
16792: PUSH
16793: LD_VAR 0 5
16797: PUSH
16798: LD_LOC 20
16802: PUSH
16803: LD_VAR 0 2
16807: ARRAY
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: LIST
16813: ADD
16814: ST_TO_ADDR
// end ;
16815: GO 16506
16817: POP
16818: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16819: LD_ADDR_LOC 27
16823: PUSH
16824: LD_INT 0
16826: PUSH
16827: LD_INT 0
16829: PUSH
16830: LD_INT 0
16832: PUSH
16833: LD_INT 0
16835: PUSH
16836: LD_INT 0
16838: PUSH
16839: LD_INT 0
16841: PUSH
16842: LD_INT 0
16844: PUSH
16845: LD_INT 0
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: ST_TO_ADDR
// if Limits_Info then
16858: LD_LOC 26
16862: IFFALSE 16878
// Limits_Info := #Limits ^ Limits_Info ;
16864: LD_ADDR_LOC 26
16868: PUSH
16869: LD_STRING #Limits
16871: PUSH
16872: LD_LOC 26
16876: ADD
16877: ST_TO_ADDR
// end ;
16878: LD_VAR 0 1
16882: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
16883: LD_INT 0
16885: PPUSH
16886: PPUSH
16887: PPUSH
16888: PPUSH
// for i := 1 to Restricted_Builds do
16889: LD_ADDR_VAR 0 7
16893: PUSH
16894: DOUBLE
16895: LD_INT 1
16897: DEC
16898: ST_TO_ADDR
16899: LD_LOC 19
16903: PUSH
16904: FOR_TO
16905: IFFALSE 17328
// if BType in Restricted_Builds [ i ] then
16907: LD_VAR 0 2
16911: PUSH
16912: LD_LOC 19
16916: PUSH
16917: LD_VAR 0 7
16921: ARRAY
16922: IN
16923: IFFALSE 17326
// begin if old_side then
16925: LD_VAR 0 4
16929: IFFALSE 17055
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
16931: LD_LOC 25
16935: PUSH
16936: LD_VAR 0 7
16940: ARRAY
16941: PUSH
16942: LD_VAR 0 3
16946: ARRAY
16947: PUSH
16948: LD_VAR 0 5
16952: PLUS
16953: PUSH
16954: LD_LOC 20
16958: PUSH
16959: LD_VAR 0 7
16963: ARRAY
16964: GREATER
16965: IFFALSE 16991
// begin SetSide ( un , old_side ) ;
16967: LD_VAR 0 1
16971: PPUSH
16972: LD_VAR 0 4
16976: PPUSH
16977: CALL_OW 235
// count := 0 ;
16981: LD_ADDR_VAR 0 5
16985: PUSH
16986: LD_INT 0
16988: ST_TO_ADDR
// end else
16989: GO 17055
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
16991: LD_ADDR_LOC 25
16995: PUSH
16996: LD_LOC 25
17000: PPUSH
17001: LD_VAR 0 7
17005: PPUSH
17006: LD_LOC 25
17010: PUSH
17011: LD_VAR 0 7
17015: ARRAY
17016: PPUSH
17017: LD_VAR 0 4
17021: PPUSH
17022: LD_LOC 25
17026: PUSH
17027: LD_VAR 0 7
17031: ARRAY
17032: PUSH
17033: LD_VAR 0 4
17037: ARRAY
17038: PUSH
17039: LD_VAR 0 5
17043: MINUS
17044: PPUSH
17045: CALL_OW 1
17049: PPUSH
17050: CALL_OW 1
17054: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
17055: LD_ADDR_LOC 25
17059: PUSH
17060: LD_LOC 25
17064: PPUSH
17065: LD_VAR 0 7
17069: PPUSH
17070: LD_LOC 25
17074: PUSH
17075: LD_VAR 0 7
17079: ARRAY
17080: PPUSH
17081: LD_VAR 0 3
17085: PPUSH
17086: LD_LOC 25
17090: PUSH
17091: LD_VAR 0 7
17095: ARRAY
17096: PUSH
17097: LD_VAR 0 3
17101: ARRAY
17102: PUSH
17103: LD_VAR 0 5
17107: PLUS
17108: PPUSH
17109: CALL_OW 1
17113: PPUSH
17114: CALL_OW 1
17118: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
17119: LD_VAR 0 5
17123: PUSH
17124: LD_INT 0
17126: NONEQUAL
17127: PUSH
17128: LD_VAR 0 3
17132: PUSH
17133: LD_OWVAR 2
17137: EQUAL
17138: AND
17139: IFFALSE 17182
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
17141: LD_ADDR_LOC 26
17145: PUSH
17146: LD_LOC 26
17150: PPUSH
17151: LD_INT 3
17153: PUSH
17154: LD_VAR 0 7
17158: MUL
17159: PPUSH
17160: LD_LOC 25
17164: PUSH
17165: LD_VAR 0 7
17169: ARRAY
17170: PUSH
17171: LD_VAR 0 3
17175: ARRAY
17176: PPUSH
17177: CALL_OW 1
17181: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
17182: LD_LOC 25
17186: PUSH
17187: LD_VAR 0 7
17191: ARRAY
17192: PUSH
17193: LD_VAR 0 3
17197: ARRAY
17198: PUSH
17199: LD_LOC 20
17203: PUSH
17204: LD_VAR 0 7
17208: ARRAY
17209: GREATER
17210: IFFALSE 17237
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
17212: LD_ADDR_LOC 27
17216: PUSH
17217: LD_LOC 27
17221: PPUSH
17222: LD_VAR 0 3
17226: PPUSH
17227: LD_INT 1
17229: PPUSH
17230: CALL_OW 1
17234: ST_TO_ADDR
// end else
17235: GO 17324
// begin for j := 1 to Restricted_Builds do
17237: LD_ADDR_VAR 0 8
17241: PUSH
17242: DOUBLE
17243: LD_INT 1
17245: DEC
17246: ST_TO_ADDR
17247: LD_LOC 19
17251: PUSH
17252: FOR_TO
17253: IFFALSE 17297
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
17255: LD_LOC 25
17259: PUSH
17260: LD_VAR 0 8
17264: ARRAY
17265: PUSH
17266: LD_VAR 0 3
17270: ARRAY
17271: PUSH
17272: LD_LOC 20
17276: PUSH
17277: LD_VAR 0 8
17281: ARRAY
17282: GREATER
17283: IFFALSE 17295
// begin Is_Cheater := true ;
17285: LD_ADDR_VAR 0 9
17289: PUSH
17290: LD_INT 1
17292: ST_TO_ADDR
// break ;
17293: GO 17297
// end ;
17295: GO 17252
17297: POP
17298: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
17299: LD_ADDR_LOC 27
17303: PUSH
17304: LD_LOC 27
17308: PPUSH
17309: LD_VAR 0 3
17313: PPUSH
17314: LD_VAR 0 9
17318: PPUSH
17319: CALL_OW 1
17323: ST_TO_ADDR
// end ; break ;
17324: GO 17328
// end ;
17326: GO 16904
17328: POP
17329: POP
// end ;
17330: LD_VAR 0 6
17334: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
17335: LD_VAR 0 5
17339: PUSH
17340: LD_LOC 21
17344: IN
17345: PUSH
17346: LD_VAR 0 2
17350: PUSH
17351: LD_LOC 22
17355: IN
17356: OR
17357: PUSH
17358: LD_VAR 0 4
17362: PUSH
17363: LD_LOC 23
17367: IN
17368: OR
17369: PUSH
17370: LD_VAR 0 3
17374: PUSH
17375: LD_LOC 24
17379: IN
17380: OR
17381: IFFALSE 17392
// ComCancel ( factory ) ;
17383: LD_VAR 0 1
17387: PPUSH
17388: CALL_OW 127
// end ;
17392: PPOPN 5
17394: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
17395: LD_VAR 0 2
17399: PUSH
17400: LD_LOC 21
17404: IN
17405: IFFALSE 17416
// ComCancel ( building ) ;
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 127
// end ; end_of_file
17416: PPOPN 2
17418: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
17419: LD_INT 0
17421: PPUSH
17422: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
17423: LD_ADDR_VAR 0 2
17427: PUSH
17428: LD_STRING #Multi1x1-Time
17430: PUSH
17431: LD_OWVAR 1
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: ST_TO_ADDR
// if WaitServerStrings then
17440: LD_EXP 68
17444: IFFALSE 17462
// AllStrings = AllStrings ^ WaitServerStrings ;
17446: LD_ADDR_VAR 0 2
17450: PUSH
17451: LD_VAR 0 2
17455: PUSH
17456: LD_EXP 68
17460: ADD
17461: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
17462: LD_INT 0
17464: PUSH
17465: LD_EXP 19
17469: PUSH
17470: LD_OWVAR 1
17474: MINUS
17475: LESSEQUAL
17476: IFFALSE 17507
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
17478: LD_ADDR_VAR 0 2
17482: PUSH
17483: LD_VAR 0 2
17487: PUSH
17488: LD_STRING #allowedsibbomb
17490: PUSH
17491: LD_EXP 19
17495: PUSH
17496: LD_OWVAR 1
17500: MINUS
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: ADD
17506: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
17507: LD_INT 0
17509: PUSH
17510: LD_EXP 18
17514: PUSH
17515: LD_OWVAR 1
17519: MINUS
17520: LESSEQUAL
17521: IFFALSE 17552
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
17523: LD_ADDR_VAR 0 2
17527: PUSH
17528: LD_VAR 0 2
17532: PUSH
17533: LD_STRING #builduptime
17535: PUSH
17536: LD_EXP 18
17540: PUSH
17541: LD_OWVAR 1
17545: MINUS
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: ADD
17551: ST_TO_ADDR
// if ( ExtraStrings ) then
17552: LD_EXP 67
17556: IFFALSE 17578
// AllStrings := AllStrings ^  ^ ExtraStrings ;
17558: LD_ADDR_VAR 0 2
17562: PUSH
17563: LD_VAR 0 2
17567: PUSH
17568: LD_STRING 
17570: ADD
17571: PUSH
17572: LD_EXP 67
17576: ADD
17577: ST_TO_ADDR
// if Display_kings and not isSGUI then
17578: LD_EXP 69
17582: PUSH
17583: LD_OWVAR 83
17587: NOT
17588: AND
17589: IFFALSE 17607
// AllStrings = AllStrings ^ Display_kings ;
17591: LD_ADDR_VAR 0 2
17595: PUSH
17596: LD_VAR 0 2
17600: PUSH
17601: LD_EXP 69
17605: ADD
17606: ST_TO_ADDR
// if ( LimitsStrings ) then
17607: CALL 14259 0 0
17611: IFFALSE 17633
// AllStrings := AllStrings ^  ^ LimitsStrings ;
17613: LD_ADDR_VAR 0 2
17617: PUSH
17618: LD_VAR 0 2
17622: PUSH
17623: LD_STRING 
17625: ADD
17626: PUSH
17627: CALL 14259 0 0
17631: ADD
17632: ST_TO_ADDR
// Display_Strings := AllStrings ;
17633: LD_ADDR_OWVAR 47
17637: PUSH
17638: LD_VAR 0 2
17642: ST_TO_ADDR
// end ;
17643: LD_VAR 0 1
17647: RET
// every 0 0$1 do
17648: GO 17650
17650: DISABLE
// begin ShowTimer ;
17651: CALL 17419 0 0
// enable ;
17655: ENABLE
// end ; end_of_file
17656: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
17657: LD_INT 0
17659: PPUSH
17660: PPUSH
17661: PPUSH
// sharedPoints1 = [ ] ;
17662: LD_ADDR_LOC 28
17666: PUSH
17667: EMPTY
17668: ST_TO_ADDR
// sharedPoints2 = [ ] ;
17669: LD_ADDR_LOC 29
17673: PUSH
17674: EMPTY
17675: ST_TO_ADDR
// sharedPoints3 = [ ] ;
17676: LD_ADDR_LOC 30
17680: PUSH
17681: EMPTY
17682: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
17683: LD_ADDR_VAR 0 2
17687: PUSH
17688: DOUBLE
17689: LD_INT 1
17691: DEC
17692: ST_TO_ADDR
17693: LD_EXP 24
17697: PUSH
17698: LD_INT 0
17700: PLUS
17701: PUSH
17702: FOR_TO
17703: IFFALSE 17805
// begin if not Side_Positions [ i ] = 0 then
17705: LD_EXP 24
17709: PUSH
17710: LD_VAR 0 2
17714: ARRAY
17715: PUSH
17716: LD_INT 0
17718: EQUAL
17719: NOT
17720: IFFALSE 17734
// SetMultiScore ( i , 0 ) ;
17722: LD_VAR 0 2
17726: PPUSH
17727: LD_INT 0
17729: PPUSH
17730: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
17734: LD_ADDR_LOC 28
17738: PUSH
17739: LD_LOC 28
17743: PPUSH
17744: LD_VAR 0 2
17748: PPUSH
17749: LD_INT 0
17751: PPUSH
17752: CALL_OW 1
17756: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
17757: LD_ADDR_LOC 29
17761: PUSH
17762: LD_LOC 29
17766: PPUSH
17767: LD_VAR 0 2
17771: PPUSH
17772: LD_INT 0
17774: PPUSH
17775: CALL_OW 1
17779: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
17780: LD_ADDR_LOC 30
17784: PUSH
17785: LD_LOC 30
17789: PPUSH
17790: LD_VAR 0 2
17794: PPUSH
17795: LD_INT 0
17797: PPUSH
17798: CALL_OW 1
17802: ST_TO_ADDR
// end ;
17803: GO 17702
17805: POP
17806: POP
// pointGame = true ;
17807: LD_ADDR_LOC 31
17811: PUSH
17812: LD_INT 1
17814: ST_TO_ADDR
// end ;
17815: LD_VAR 0 1
17819: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
17820: LD_LOC 31
17824: IFFALSE 18235
17826: GO 17828
17828: DISABLE
17829: LD_INT 0
17831: PPUSH
17832: PPUSH
17833: PPUSH
17834: PPUSH
17835: PPUSH
17836: PPUSH
17837: PPUSH
17838: PPUSH
17839: PPUSH
17840: PPUSH
17841: PPUSH
17842: PPUSH
17843: PPUSH
// begin if isSGUI then
17844: LD_OWVAR 83
17848: IFFALSE 18235
// begin if Teams [ 1 ] then
17850: LD_EXP 23
17854: PUSH
17855: LD_INT 1
17857: ARRAY
17858: IFFALSE 17870
// red = true else
17860: LD_ADDR_VAR 0 2
17864: PUSH
17865: LD_INT 1
17867: ST_TO_ADDR
17868: GO 17878
// red = false ;
17870: LD_ADDR_VAR 0 2
17874: PUSH
17875: LD_INT 0
17877: ST_TO_ADDR
// if Teams [ 2 ] then
17878: LD_EXP 23
17882: PUSH
17883: LD_INT 2
17885: ARRAY
17886: IFFALSE 17898
// blue = true else
17888: LD_ADDR_VAR 0 3
17892: PUSH
17893: LD_INT 1
17895: ST_TO_ADDR
17896: GO 17906
// blue = false ;
17898: LD_ADDR_VAR 0 3
17902: PUSH
17903: LD_INT 0
17905: ST_TO_ADDR
// if Teams [ 3 ] then
17906: LD_EXP 23
17910: PUSH
17911: LD_INT 3
17913: ARRAY
17914: IFFALSE 17926
// yel = true else
17916: LD_ADDR_VAR 0 4
17920: PUSH
17921: LD_INT 1
17923: ST_TO_ADDR
17924: GO 17934
// yel = false ;
17926: LD_ADDR_VAR 0 4
17930: PUSH
17931: LD_INT 0
17933: ST_TO_ADDR
// if Teams [ 4 ] then
17934: LD_EXP 23
17938: PUSH
17939: LD_INT 4
17941: ARRAY
17942: IFFALSE 17954
// green = true else
17944: LD_ADDR_VAR 0 5
17948: PUSH
17949: LD_INT 1
17951: ST_TO_ADDR
17952: GO 17962
// green = false ;
17954: LD_ADDR_VAR 0 5
17958: PUSH
17959: LD_INT 0
17961: ST_TO_ADDR
// if def_public_score then
17962: LD_EXP 6
17966: IFFALSE 17978
// p = true else
17968: LD_ADDR_VAR 0 12
17972: PUSH
17973: LD_INT 1
17975: ST_TO_ADDR
17976: GO 17986
// p = false ;
17978: LD_ADDR_VAR 0 12
17982: PUSH
17983: LD_INT 0
17985: ST_TO_ADDR
// if team_game then
17986: LD_EXP 26
17990: IFFALSE 18071
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
17992: LD_ADDR_VAR 0 13
17996: PUSH
17997: LD_INT 3
17999: PUSH
18000: LD_INT 1
18002: PUSH
18003: LD_INT 2
18005: PUSH
18006: LD_INT 7
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: PUSH
18015: LD_EXP 29
18019: ARRAY
18020: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
18021: LD_ADDR_VAR 0 10
18025: PUSH
18026: LD_STRING {
18028: PUSH
18029: LD_VAR 0 3
18033: STR
18034: PUSH
18035: LD_STRING ,
18037: STR
18038: PUSH
18039: LD_VAR 0 4
18043: STR
18044: PUSH
18045: LD_STRING ,
18047: STR
18048: PUSH
18049: LD_VAR 0 2
18053: STR
18054: PUSH
18055: LD_STRING ,0,0,0,
18057: STR
18058: PUSH
18059: LD_VAR 0 5
18063: STR
18064: PUSH
18065: LD_STRING ,0}
18067: STR
18068: ST_TO_ADDR
// end else
18069: GO 18171
// begin you = your_side ;
18071: LD_ADDR_VAR 0 13
18075: PUSH
18076: LD_OWVAR 2
18080: ST_TO_ADDR
// s = { ;
18081: LD_ADDR_VAR 0 10
18085: PUSH
18086: LD_STRING {
18088: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
18089: LD_ADDR_VAR 0 1
18093: PUSH
18094: DOUBLE
18095: LD_INT 1
18097: DEC
18098: ST_TO_ADDR
18099: LD_EXP 24
18103: PUSH
18104: LD_INT 0
18106: PLUS
18107: PUSH
18108: FOR_TO
18109: IFFALSE 18155
// if side_positions [ i ] then
18111: LD_EXP 24
18115: PUSH
18116: LD_VAR 0 1
18120: ARRAY
18121: IFFALSE 18139
// s = s & 1, else
18123: LD_ADDR_VAR 0 10
18127: PUSH
18128: LD_VAR 0 10
18132: PUSH
18133: LD_STRING 1,
18135: STR
18136: ST_TO_ADDR
18137: GO 18153
// s = s & 0, ;
18139: LD_ADDR_VAR 0 10
18143: PUSH
18144: LD_VAR 0 10
18148: PUSH
18149: LD_STRING 0,
18151: STR
18152: ST_TO_ADDR
18153: GO 18108
18155: POP
18156: POP
// s = s & } ;
18157: LD_ADDR_VAR 0 10
18161: PUSH
18162: LD_VAR 0 10
18166: PUSH
18167: LD_STRING }
18169: STR
18170: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
18171: LD_STRING initScore(
18173: PUSH
18174: LD_VAR 0 10
18178: STR
18179: PUSH
18180: LD_STRING ,
18182: STR
18183: PUSH
18184: LD_VAR 0 12
18188: STR
18189: PUSH
18190: LD_STRING ,
18192: STR
18193: PUSH
18194: LD_VAR 0 13
18198: STR
18199: PUSH
18200: LD_STRING  );
18202: STR
18203: PPUSH
18204: CALL_OW 559
// if game_type = 3 then
18208: LD_EXP 50
18212: PUSH
18213: LD_INT 3
18215: EQUAL
18216: IFFALSE 18235
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
18218: LD_STRING AddScorePoints(2,2,
18220: PUSH
18221: LD_EXP 21
18225: STR
18226: PUSH
18227: LD_STRING  );
18229: STR
18230: PPUSH
18231: CALL_OW 559
// end ; end ;
18235: PPOPN 13
18237: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
18238: LD_INT 0
18240: PPUSH
18241: PPUSH
// case typ of 1 :
18242: LD_VAR 0 3
18246: PUSH
18247: LD_INT 1
18249: DOUBLE
18250: EQUAL
18251: IFTRUE 18255
18253: GO 18283
18255: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
18256: LD_ADDR_LOC 28
18260: PUSH
18261: LD_LOC 28
18265: PPUSH
18266: LD_VAR 0 1
18270: PPUSH
18271: LD_VAR 0 2
18275: PPUSH
18276: CALL_OW 1
18280: ST_TO_ADDR
18281: GO 18356
18283: LD_INT 2
18285: DOUBLE
18286: EQUAL
18287: IFTRUE 18291
18289: GO 18319
18291: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
18292: LD_ADDR_LOC 29
18296: PUSH
18297: LD_LOC 29
18301: PPUSH
18302: LD_VAR 0 1
18306: PPUSH
18307: LD_VAR 0 2
18311: PPUSH
18312: CALL_OW 1
18316: ST_TO_ADDR
18317: GO 18356
18319: LD_INT 3
18321: DOUBLE
18322: EQUAL
18323: IFTRUE 18327
18325: GO 18355
18327: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
18328: LD_ADDR_LOC 30
18332: PUSH
18333: LD_LOC 30
18337: PPUSH
18338: LD_VAR 0 1
18342: PPUSH
18343: LD_VAR 0 2
18347: PPUSH
18348: CALL_OW 1
18352: ST_TO_ADDR
18353: GO 18356
18355: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
18356: LD_ADDR_VAR 0 5
18360: PUSH
18361: LD_LOC 28
18365: PUSH
18366: LD_VAR 0 1
18370: ARRAY
18371: PUSH
18372: LD_LOC 29
18376: PUSH
18377: LD_VAR 0 1
18381: ARRAY
18382: PLUS
18383: PUSH
18384: LD_LOC 30
18388: PUSH
18389: LD_VAR 0 1
18393: ARRAY
18394: PLUS
18395: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
18396: LD_VAR 0 1
18400: PPUSH
18401: LD_VAR 0 5
18405: PPUSH
18406: CALL_OW 506
// end ; end_of_file
18410: LD_VAR 0 4
18414: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
18415: LD_INT 0
18417: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
18418: LD_VAR 0 1
18422: PPUSH
18423: CALL_OW 255
18427: PUSH
18428: LD_VAR 0 4
18432: EQUAL
18433: IFFALSE 18452
// begin SetAchievement ( ACH_RAD ) ;
18435: LD_STRING ACH_RAD
18437: PPUSH
18438: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
18442: LD_STRING ACH_NL
18444: PPUSH
18445: LD_INT 1
18447: PPUSH
18448: CALL_OW 564
// end end ;
18452: LD_VAR 0 5
18456: RET
// export function SA_Win ( side ) ; begin
18457: LD_INT 0
18459: PPUSH
// case side of 1 :
18460: LD_VAR 0 1
18464: PUSH
18465: LD_INT 1
18467: DOUBLE
18468: EQUAL
18469: IFTRUE 18473
18471: GO 18486
18473: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18474: LD_STRING ACH_AH
18476: PPUSH
18477: LD_INT 1
18479: PPUSH
18480: CALL_OW 564
18484: GO 18649
18486: LD_INT 2
18488: DOUBLE
18489: EQUAL
18490: IFTRUE 18494
18492: GO 18507
18494: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18495: LD_STRING ACH_E
18497: PPUSH
18498: LD_INT 1
18500: PPUSH
18501: CALL_OW 564
18505: GO 18649
18507: LD_INT 3
18509: DOUBLE
18510: EQUAL
18511: IFTRUE 18515
18513: GO 18528
18515: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18516: LD_STRING ACH_OOL
18518: PPUSH
18519: LD_INT 1
18521: PPUSH
18522: CALL_OW 564
18526: GO 18649
18528: LD_INT 1
18530: PUSH
18531: LD_INT 2
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: DOUBLE
18538: EQUAL
18539: IFTRUE 18543
18541: GO 18568
18543: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18544: LD_STRING ACH_AH
18546: PPUSH
18547: LD_REAL  5.00000000000000E-0001
18550: PPUSH
18551: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18555: LD_STRING ACH_E
18557: PPUSH
18558: LD_REAL  5.00000000000000E-0001
18561: PPUSH
18562: CALL_OW 564
// end ; [ 2 , 3 ] :
18566: GO 18649
18568: LD_INT 2
18570: PUSH
18571: LD_INT 3
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: DOUBLE
18578: EQUAL
18579: IFTRUE 18583
18581: GO 18608
18583: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18584: LD_STRING ACH_OOL
18586: PPUSH
18587: LD_REAL  5.00000000000000E-0001
18590: PPUSH
18591: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18595: LD_STRING ACH_E
18597: PPUSH
18598: LD_REAL  5.00000000000000E-0001
18601: PPUSH
18602: CALL_OW 564
// end ; [ 3 , 1 ] :
18606: GO 18649
18608: LD_INT 3
18610: PUSH
18611: LD_INT 1
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: DOUBLE
18618: EQUAL
18619: IFTRUE 18623
18621: GO 18648
18623: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18624: LD_STRING ACH_AH
18626: PPUSH
18627: LD_REAL  5.00000000000000E-0001
18630: PPUSH
18631: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18635: LD_STRING ACH_OOL
18637: PPUSH
18638: LD_REAL  5.00000000000000E-0001
18641: PPUSH
18642: CALL_OW 564
// end ; end ;
18646: GO 18649
18648: POP
// end ; end_of_file
18649: LD_VAR 0 2
18653: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
18654: LD_INT 0
18656: PPUSH
18657: PPUSH
// enable ( 98 ) ;
18658: LD_INT 98
18660: ENABLE_MARKED
// GameEnded = false ;
18661: LD_ADDR_LOC 33
18665: PUSH
18666: LD_INT 0
18668: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18669: LD_ADDR_LOC 32
18673: PUSH
18674: LD_INT 0
18676: PUSH
18677: LD_INT 0
18679: PUSH
18680: LD_INT 0
18682: PUSH
18683: LD_INT 0
18685: PUSH
18686: LD_INT 0
18688: PUSH
18689: LD_INT 0
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: ST_TO_ADDR
// unfoged = false ;
18708: LD_ADDR_LOC 34
18712: PUSH
18713: LD_INT 0
18715: ST_TO_ADDR
// for i = 1 to side_positions do
18716: LD_ADDR_VAR 0 2
18720: PUSH
18721: DOUBLE
18722: LD_INT 1
18724: DEC
18725: ST_TO_ADDR
18726: LD_EXP 24
18730: PUSH
18731: FOR_TO
18732: IFFALSE 18772
// if not side_positions [ i ] then
18734: LD_EXP 24
18738: PUSH
18739: LD_VAR 0 2
18743: ARRAY
18744: NOT
18745: IFFALSE 18770
// defaited = replace ( defaited , i , true ) ;
18747: LD_ADDR_LOC 32
18751: PUSH
18752: LD_LOC 32
18756: PPUSH
18757: LD_VAR 0 2
18761: PPUSH
18762: LD_INT 1
18764: PPUSH
18765: CALL_OW 1
18769: ST_TO_ADDR
18770: GO 18731
18772: POP
18773: POP
// end ;
18774: LD_VAR 0 1
18778: RET
// function CanWinLoose ; begin
18779: LD_INT 0
18781: PPUSH
// Result := true ;
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: LD_INT 1
18789: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
18790: CALL_OW 518
18794: PUSH
18795: CALL_OW 519
18799: PUSH
18800: LD_INT 0
18802: GREATER
18803: AND
18804: IFFALSE 18814
// Result := false ;
18806: LD_ADDR_VAR 0 1
18810: PUSH
18811: LD_INT 0
18813: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18814: CALL_OW 531
18818: PUSH
18819: CALL_OW 519
18823: PUSH
18824: LD_INT 1
18826: GREATER
18827: AND
18828: IFFALSE 18838
// Result := false ;
18830: LD_ADDR_VAR 0 1
18834: PUSH
18835: LD_INT 0
18837: ST_TO_ADDR
// end ;
18838: LD_VAR 0 1
18842: RET
// export function HasPower ( i ) ; var k , h ; begin
18843: LD_INT 0
18845: PPUSH
18846: PPUSH
18847: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18848: LD_VAR 0 1
18852: PPUSH
18853: CALL_OW 108
18857: NOT
18858: PUSH
18859: LD_EXP 27
18863: PUSH
18864: LD_VAR 0 1
18868: ARRAY
18869: NOT
18870: AND
18871: PUSH
18872: LD_OWVAR 4
18876: AND
18877: IFFALSE 18889
// begin result = false ;
18879: LD_ADDR_VAR 0 2
18883: PUSH
18884: LD_INT 0
18886: ST_TO_ADDR
// end else
18887: GO 19184
// case def_win_rules of 0 :
18889: LD_EXP 20
18893: PUSH
18894: LD_INT 0
18896: DOUBLE
18897: EQUAL
18898: IFTRUE 18902
18900: GO 19065
18902: POP
// if def_people_respawning then
18903: LD_EXP 62
18907: IFFALSE 18998
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
18909: LD_ADDR_VAR 0 2
18913: PUSH
18914: LD_INT 22
18916: PUSH
18917: LD_VAR 0 1
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: LD_INT 21
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 33
18941: PUSH
18942: LD_INT 3
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 33
18951: PUSH
18952: LD_INT 5
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 30
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 30
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PPUSH
18991: CALL_OW 69
18995: ST_TO_ADDR
18996: GO 19063
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18998: LD_ADDR_VAR 0 2
19002: PUSH
19003: LD_INT 22
19005: PUSH
19006: LD_VAR 0 1
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 2
19017: PUSH
19018: LD_INT 21
19020: PUSH
19021: LD_INT 1
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 33
19030: PUSH
19031: LD_INT 3
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 33
19040: PUSH
19041: LD_INT 5
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PPUSH
19058: CALL_OW 69
19062: ST_TO_ADDR
19063: GO 19184
19065: LD_INT 1
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19112
19073: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
19074: LD_ADDR_VAR 0 2
19078: PUSH
19079: LD_INT 22
19081: PUSH
19082: LD_VAR 0 1
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 21
19093: PUSH
19094: LD_INT 1
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 69
19109: ST_TO_ADDR
19110: GO 19184
19112: LD_INT 2
19114: DOUBLE
19115: EQUAL
19116: IFTRUE 19120
19118: GO 19183
19120: POP
// begin h = false ;
19121: LD_ADDR_VAR 0 4
19125: PUSH
19126: LD_INT 0
19128: ST_TO_ADDR
// for k in heroes [ i ] do
19129: LD_ADDR_VAR 0 3
19133: PUSH
19134: LD_EXP 36
19138: PUSH
19139: LD_VAR 0 1
19143: ARRAY
19144: PUSH
19145: FOR_IN
19146: IFFALSE 19169
// if IsLive ( k ) then
19148: LD_VAR 0 3
19152: PPUSH
19153: CALL_OW 300
19157: IFFALSE 19167
// h = true ;
19159: LD_ADDR_VAR 0 4
19163: PUSH
19164: LD_INT 1
19166: ST_TO_ADDR
19167: GO 19145
19169: POP
19170: POP
// Result := h ;
19171: LD_ADDR_VAR 0 2
19175: PUSH
19176: LD_VAR 0 4
19180: ST_TO_ADDR
// end ; end ;
19181: GO 19184
19183: POP
// end ;
19184: LD_VAR 0 2
19188: RET
// function AlliedSides ( i , j ) ; begin
19189: LD_INT 0
19191: PPUSH
// Result := false ;
19192: LD_ADDR_VAR 0 3
19196: PUSH
19197: LD_INT 0
19199: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
19200: LD_VAR 0 1
19204: PPUSH
19205: LD_VAR 0 2
19209: PPUSH
19210: CALL_OW 81
19214: PUSH
19215: LD_INT 1
19217: EQUAL
19218: PUSH
19219: LD_VAR 0 2
19223: PPUSH
19224: LD_VAR 0 1
19228: PPUSH
19229: CALL_OW 81
19233: PUSH
19234: LD_INT 1
19236: EQUAL
19237: AND
19238: PUSH
19239: LD_VAR 0 1
19243: PPUSH
19244: CALL_OW 83
19248: AND
19249: PUSH
19250: LD_VAR 0 2
19254: PPUSH
19255: CALL_OW 83
19259: AND
19260: IFFALSE 19270
// Result := true ;
19262: LD_ADDR_VAR 0 3
19266: PUSH
19267: LD_INT 1
19269: ST_TO_ADDR
// end ;
19270: LD_VAR 0 3
19274: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
19275: CALL 18779 0 0
19279: PUSH
19280: LD_LOC 33
19284: NOT
19285: AND
19286: IFFALSE 19302
19288: GO 19290
19290: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
19291: LD_ADDR_EXP 68
19295: PUSH
19296: LD_STRING #Player-Ended
19298: PUSH
19299: EMPTY
19300: LIST
19301: ST_TO_ADDR
19302: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
19303: CALL 18779 0 0
19307: PUSH
19308: LD_LOC 33
19312: AND
19313: IFFALSE 19322
19315: GO 19317
19317: DISABLE
// YouLostInMultiplayer ;
19318: CALL_OW 107
19322: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
19323: CALL 18779 0 0
19327: NOT
19328: PUSH
19329: CALL_OW 531
19333: NOT
19334: AND
19335: IFFALSE 19351
19337: GO 19339
19339: DISABLE
// WaitServerStrings = [ #server-wait ] ;
19340: LD_ADDR_EXP 68
19344: PUSH
19345: LD_STRING #server-wait
19347: PUSH
19348: EMPTY
19349: LIST
19350: ST_TO_ADDR
19351: END
// every 100 trigger IAmSpec do
19352: CALL_OW 531
19356: IFFALSE 19372
19358: GO 19360
19360: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
19361: LD_ADDR_EXP 68
19365: PUSH
19366: LD_STRING #Player-IAmSpec
19368: PUSH
19369: EMPTY
19370: LIST
19371: ST_TO_ADDR
19372: END
// every 100 trigger GameEnded and IAmSpec do
19373: LD_LOC 33
19377: PUSH
19378: CALL_OW 531
19382: AND
19383: IFFALSE 19392
19385: GO 19387
19387: DISABLE
// YouLostInMultiplayer ;
19388: CALL_OW 107
19392: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
19393: CALL 18779 0 0
19397: PUSH
19398: LD_LOC 33
19402: NOT
19403: AND
19404: IFFALSE 19420
19406: GO 19408
19408: DISABLE
// WaitServerStrings = [ $player-win ] ;
19409: LD_ADDR_EXP 68
19413: PUSH
19414: LD_STRING $player-win
19416: PUSH
19417: EMPTY
19418: LIST
19419: ST_TO_ADDR
19420: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
19421: CALL 18779 0 0
19425: PUSH
19426: LD_LOC 33
19430: AND
19431: IFFALSE 19455
19433: GO 19435
19435: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
19436: LD_EXP 25
19440: PUSH
19441: LD_OWVAR 2
19445: ARRAY
19446: PPUSH
19447: CALL 18457 0 1
// YouWinInMultiplayer ;
19451: CALL_OW 106
// end ;
19455: END
// every 100 trigger isEditor marked 401 do
19456: LD_OWVAR 84
19460: IFFALSE 19476
19462: GO 19464
19464: DISABLE
// Debug_Strings = [ You won ] ;
19465: LD_ADDR_OWVAR 48
19469: PUSH
19470: LD_STRING You won
19472: PUSH
19473: EMPTY
19474: LIST
19475: ST_TO_ADDR
19476: END
// every 100 trigger isEditor marked 400 do
19477: LD_OWVAR 84
19481: IFFALSE 19497
19483: GO 19485
19485: DISABLE
// Debug_Strings = [ You loss ] ;
19486: LD_ADDR_OWVAR 48
19490: PUSH
19491: LD_STRING You loss
19493: PUSH
19494: EMPTY
19495: LIST
19496: ST_TO_ADDR
19497: END
// every 100 marked 98 do var i , un ;
19498: GO 19500
19500: DISABLE
19501: LD_INT 0
19503: PPUSH
19504: PPUSH
// begin for i = 1 to side_positions do
19505: LD_ADDR_VAR 0 1
19509: PUSH
19510: DOUBLE
19511: LD_INT 1
19513: DEC
19514: ST_TO_ADDR
19515: LD_EXP 24
19519: PUSH
19520: FOR_TO
19521: IFFALSE 19604
// if side_positions [ i ] then
19523: LD_EXP 24
19527: PUSH
19528: LD_VAR 0 1
19532: ARRAY
19533: IFFALSE 19602
// if not HasPower ( i ) and not Defaited [ i ] then
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL 18843 0 1
19544: NOT
19545: PUSH
19546: LD_LOC 32
19550: PUSH
19551: LD_VAR 0 1
19555: ARRAY
19556: NOT
19557: AND
19558: IFFALSE 19602
// begin Defaited = replace ( Defaited , i , true ) ;
19560: LD_ADDR_LOC 32
19564: PUSH
19565: LD_LOC 32
19569: PPUSH
19570: LD_VAR 0 1
19574: PPUSH
19575: LD_INT 1
19577: PPUSH
19578: CALL_OW 1
19582: ST_TO_ADDR
// if i = your_side then
19583: LD_VAR 0 1
19587: PUSH
19588: LD_OWVAR 2
19592: EQUAL
19593: IFFALSE 19602
// begin Multiplayer_Loose_Message ;
19595: CALL_OW 521
// enable ( 400 ) ;
19599: LD_INT 400
19601: ENABLE_MARKED
// end ; end ;
19602: GO 19520
19604: POP
19605: POP
// if not Unfoged and defaited [ your_side ] then
19606: LD_LOC 34
19610: NOT
19611: PUSH
19612: LD_LOC 32
19616: PUSH
19617: LD_OWVAR 2
19621: ARRAY
19622: AND
19623: IFFALSE 19629
// Unfog ;
19625: CALL 19805 0 0
// DidGameEnd ;
19629: CALL 19644 0 0
// if not GameEnded then
19633: LD_LOC 33
19637: NOT
19638: IFFALSE 19641
// enable ;
19640: ENABLE
// end ;
19641: PPOPN 2
19643: END
// function DidGameEnd ; var i , k , enemy ; begin
19644: LD_INT 0
19646: PPUSH
19647: PPUSH
19648: PPUSH
19649: PPUSH
// enemy = [ ] ;
19650: LD_ADDR_VAR 0 4
19654: PUSH
19655: EMPTY
19656: ST_TO_ADDR
// for i = 1 to side_positions do
19657: LD_ADDR_VAR 0 2
19661: PUSH
19662: DOUBLE
19663: LD_INT 1
19665: DEC
19666: ST_TO_ADDR
19667: LD_EXP 24
19671: PUSH
19672: FOR_TO
19673: IFFALSE 19767
// if not defaited [ i ] then
19675: LD_LOC 32
19679: PUSH
19680: LD_VAR 0 2
19684: ARRAY
19685: NOT
19686: IFFALSE 19765
// for k = 1 to side_positions do
19688: LD_ADDR_VAR 0 3
19692: PUSH
19693: DOUBLE
19694: LD_INT 1
19696: DEC
19697: ST_TO_ADDR
19698: LD_EXP 24
19702: PUSH
19703: FOR_TO
19704: IFFALSE 19763
// if not defaited [ k ] then
19706: LD_LOC 32
19710: PUSH
19711: LD_VAR 0 3
19715: ARRAY
19716: NOT
19717: IFFALSE 19761
// if not AlliedSides ( i , k ) then
19719: LD_VAR 0 2
19723: PPUSH
19724: LD_VAR 0 3
19728: PPUSH
19729: CALL 19189 0 2
19733: NOT
19734: IFFALSE 19761
// enemy = enemy ^ [ i , k ] ;
19736: LD_ADDR_VAR 0 4
19740: PUSH
19741: LD_VAR 0 4
19745: PUSH
19746: LD_VAR 0 2
19750: PUSH
19751: LD_VAR 0 3
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: ADD
19760: ST_TO_ADDR
19761: GO 19703
19763: POP
19764: POP
19765: GO 19672
19767: POP
19768: POP
// if not enemy then
19769: LD_VAR 0 4
19773: NOT
19774: IFFALSE 19800
// begin GameEnded = true ;
19776: LD_ADDR_LOC 33
19780: PUSH
19781: LD_INT 1
19783: ST_TO_ADDR
// if not defaited [ your_side ] then
19784: LD_LOC 32
19788: PUSH
19789: LD_OWVAR 2
19793: ARRAY
19794: NOT
19795: IFFALSE 19800
// enable ( 401 ) ;
19797: LD_INT 401
19799: ENABLE_MARKED
// end ; end ;
19800: LD_VAR 0 1
19804: RET
// function unfog ; var k , friends ; begin
19805: LD_INT 0
19807: PPUSH
19808: PPUSH
19809: PPUSH
// SetPlayerSpectator ( ) ;
19810: CALL_OW 572
// unfoged = true ;
19814: LD_ADDR_LOC 34
19818: PUSH
19819: LD_INT 1
19821: ST_TO_ADDR
// end ;
19822: LD_VAR 0 1
19826: RET
// export function MakeGameEnd ; begin
19827: LD_INT 0
19829: PPUSH
// SetPlayerSpectator ( ) ;
19830: CALL_OW 572
// unfoged = true ;
19834: LD_ADDR_LOC 34
19838: PUSH
19839: LD_INT 1
19841: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19842: LD_INT 175
19844: PPUSH
19845: CALL_OW 67
// GameEnded = true ;
19849: LD_ADDR_LOC 33
19853: PUSH
19854: LD_INT 1
19856: ST_TO_ADDR
// end ;
19857: LD_VAR 0 1
19861: RET
// export function GetGameEnded ; begin
19862: LD_INT 0
19864: PPUSH
// result = GameEnded ;
19865: LD_ADDR_VAR 0 1
19869: PUSH
19870: LD_LOC 33
19874: ST_TO_ADDR
// end ; end_of_file
19875: LD_VAR 0 1
19879: RET
// var win ; export function init_kings_counting ; var i ; begin
19880: LD_INT 0
19882: PPUSH
19883: PPUSH
// mp_with_score := true ;
19884: LD_ADDR_OWVAR 14
19888: PUSH
19889: LD_INT 1
19891: ST_TO_ADDR
// ResetMultiScore ;
19892: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19896: LD_INT 19
19898: PPUSH
19899: LD_INT 1
19901: PPUSH
19902: CALL_OW 424
// enable ( 2 ) ;
19906: LD_INT 2
19908: ENABLE_MARKED
// end ;
19909: LD_VAR 0 1
19913: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19914: LD_INT 0
19916: PPUSH
19917: PPUSH
19918: PPUSH
19919: PPUSH
19920: PPUSH
19921: PPUSH
19922: PPUSH
19923: PPUSH
19924: PPUSH
// vypis := [ ] ;
19925: LD_ADDR_VAR 0 3
19929: PUSH
19930: EMPTY
19931: ST_TO_ADDR
// red = 0 ;
19932: LD_ADDR_VAR 0 5
19936: PUSH
19937: LD_INT 0
19939: ST_TO_ADDR
// blue = 0 ;
19940: LD_ADDR_VAR 0 6
19944: PUSH
19945: LD_INT 0
19947: ST_TO_ADDR
// yel = 0 ;
19948: LD_ADDR_VAR 0 7
19952: PUSH
19953: LD_INT 0
19955: ST_TO_ADDR
// green = 0 ;
19956: LD_ADDR_VAR 0 8
19960: PUSH
19961: LD_INT 0
19963: ST_TO_ADDR
// if def_public_score or isSGUI then
19964: LD_EXP 6
19968: PUSH
19969: LD_OWVAR 83
19973: OR
19974: IFFALSE 20571
// if not Team_Game then
19976: LD_EXP 26
19980: NOT
19981: IFFALSE 20103
// begin for side = 1 to Side_Positions do
19983: LD_ADDR_VAR 0 2
19987: PUSH
19988: DOUBLE
19989: LD_INT 1
19991: DEC
19992: ST_TO_ADDR
19993: LD_EXP 24
19997: PUSH
19998: FOR_TO
19999: IFFALSE 20099
// if Side_Positions [ side ] then
20001: LD_EXP 24
20005: PUSH
20006: LD_VAR 0 2
20010: ARRAY
20011: IFFALSE 20097
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
20013: LD_ADDR_VAR 0 3
20017: PUSH
20018: LD_VAR 0 3
20022: PUSH
20023: LD_STRING #KingoftheHill-Public
20025: PUSH
20026: LD_VAR 0 2
20030: PUSH
20031: LD_VAR 0 2
20035: PUSH
20036: LD_VAR 0 2
20040: PUSH
20041: LD_INT 10
20043: PLUS
20044: PPUSH
20045: CALL_OW 110
20049: PUSH
20050: LD_INT 3
20052: DIV
20053: PUSH
20054: LD_EXP 21
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: ADD
20066: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
20067: LD_INT 2
20069: PPUSH
20070: LD_VAR 0 2
20074: PPUSH
20075: LD_VAR 0 2
20079: PUSH
20080: LD_INT 10
20082: PLUS
20083: PPUSH
20084: CALL_OW 110
20088: PUSH
20089: LD_INT 3
20091: DIV
20092: PPUSH
20093: CALL 27473 0 3
// end ;
20097: GO 19998
20099: POP
20100: POP
// end else
20101: GO 20569
// begin if Teams [ 1 ] then
20103: LD_EXP 23
20107: PUSH
20108: LD_INT 1
20110: ARRAY
20111: IFFALSE 20163
// for i in Teams [ 1 ] do
20113: LD_ADDR_VAR 0 4
20117: PUSH
20118: LD_EXP 23
20122: PUSH
20123: LD_INT 1
20125: ARRAY
20126: PUSH
20127: FOR_IN
20128: IFFALSE 20161
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20130: LD_ADDR_VAR 0 5
20134: PUSH
20135: LD_VAR 0 5
20139: PUSH
20140: LD_VAR 0 4
20144: PUSH
20145: LD_INT 10
20147: PLUS
20148: PPUSH
20149: CALL_OW 110
20153: PUSH
20154: LD_INT 3
20156: DIV
20157: PLUS
20158: ST_TO_ADDR
20159: GO 20127
20161: POP
20162: POP
// if Teams [ 2 ] then
20163: LD_EXP 23
20167: PUSH
20168: LD_INT 2
20170: ARRAY
20171: IFFALSE 20223
// for i in Teams [ 2 ] do
20173: LD_ADDR_VAR 0 4
20177: PUSH
20178: LD_EXP 23
20182: PUSH
20183: LD_INT 2
20185: ARRAY
20186: PUSH
20187: FOR_IN
20188: IFFALSE 20221
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20190: LD_ADDR_VAR 0 6
20194: PUSH
20195: LD_VAR 0 6
20199: PUSH
20200: LD_VAR 0 4
20204: PUSH
20205: LD_INT 10
20207: PLUS
20208: PPUSH
20209: CALL_OW 110
20213: PUSH
20214: LD_INT 3
20216: DIV
20217: PLUS
20218: ST_TO_ADDR
20219: GO 20187
20221: POP
20222: POP
// if Teams [ 3 ] then
20223: LD_EXP 23
20227: PUSH
20228: LD_INT 3
20230: ARRAY
20231: IFFALSE 20283
// for i in Teams [ 3 ] do
20233: LD_ADDR_VAR 0 4
20237: PUSH
20238: LD_EXP 23
20242: PUSH
20243: LD_INT 3
20245: ARRAY
20246: PUSH
20247: FOR_IN
20248: IFFALSE 20281
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20250: LD_ADDR_VAR 0 7
20254: PUSH
20255: LD_VAR 0 7
20259: PUSH
20260: LD_VAR 0 4
20264: PUSH
20265: LD_INT 10
20267: PLUS
20268: PPUSH
20269: CALL_OW 110
20273: PUSH
20274: LD_INT 3
20276: DIV
20277: PLUS
20278: ST_TO_ADDR
20279: GO 20247
20281: POP
20282: POP
// if Teams [ 4 ] then
20283: LD_EXP 23
20287: PUSH
20288: LD_INT 4
20290: ARRAY
20291: IFFALSE 20343
// for i in Teams [ 4 ] do
20293: LD_ADDR_VAR 0 4
20297: PUSH
20298: LD_EXP 23
20302: PUSH
20303: LD_INT 4
20305: ARRAY
20306: PUSH
20307: FOR_IN
20308: IFFALSE 20341
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20310: LD_ADDR_VAR 0 8
20314: PUSH
20315: LD_VAR 0 8
20319: PUSH
20320: LD_VAR 0 4
20324: PUSH
20325: LD_INT 10
20327: PLUS
20328: PPUSH
20329: CALL_OW 110
20333: PUSH
20334: LD_INT 3
20336: DIV
20337: PLUS
20338: ST_TO_ADDR
20339: GO 20307
20341: POP
20342: POP
// if Teams [ 1 ] then
20343: LD_EXP 23
20347: PUSH
20348: LD_INT 1
20350: ARRAY
20351: IFFALSE 20380
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20353: LD_ADDR_VAR 0 3
20357: PUSH
20358: LD_STRING #KingoftheHill-Public-red
20360: PUSH
20361: LD_INT 3
20363: PUSH
20364: LD_VAR 0 5
20368: PUSH
20369: LD_EXP 21
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: ST_TO_ADDR
// if Teams [ 2 ] then
20380: LD_EXP 23
20384: PUSH
20385: LD_INT 2
20387: ARRAY
20388: IFFALSE 20423
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20390: LD_ADDR_VAR 0 3
20394: PUSH
20395: LD_VAR 0 3
20399: PUSH
20400: LD_STRING #KingoftheHill-Public-blue
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: LD_VAR 0 6
20410: PUSH
20411: LD_EXP 21
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: ADD
20422: ST_TO_ADDR
// if Teams [ 3 ] then
20423: LD_EXP 23
20427: PUSH
20428: LD_INT 3
20430: ARRAY
20431: IFFALSE 20466
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20433: LD_ADDR_VAR 0 3
20437: PUSH
20438: LD_VAR 0 3
20442: PUSH
20443: LD_STRING #KingoftheHill-Public-yell
20445: PUSH
20446: LD_INT 2
20448: PUSH
20449: LD_VAR 0 7
20453: PUSH
20454: LD_EXP 21
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: ADD
20465: ST_TO_ADDR
// if Teams [ 4 ] then
20466: LD_EXP 23
20470: PUSH
20471: LD_INT 4
20473: ARRAY
20474: IFFALSE 20509
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20476: LD_ADDR_VAR 0 3
20480: PUSH
20481: LD_VAR 0 3
20485: PUSH
20486: LD_STRING #KingoftheHill-Public-green
20488: PUSH
20489: LD_INT 7
20491: PUSH
20492: LD_VAR 0 8
20496: PUSH
20497: LD_EXP 21
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: ADD
20508: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
20509: LD_INT 2
20511: PPUSH
20512: LD_INT 3
20514: PPUSH
20515: LD_VAR 0 5
20519: PPUSH
20520: CALL 27473 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
20524: LD_INT 2
20526: PPUSH
20527: LD_INT 1
20529: PPUSH
20530: LD_VAR 0 6
20534: PPUSH
20535: CALL 27473 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
20539: LD_INT 2
20541: PPUSH
20542: LD_INT 2
20544: PPUSH
20545: LD_VAR 0 7
20549: PPUSH
20550: CALL 27473 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
20554: LD_INT 2
20556: PPUSH
20557: LD_INT 7
20559: PPUSH
20560: LD_VAR 0 8
20564: PPUSH
20565: CALL 27473 0 3
// end else
20569: GO 21006
// if not Team_Game then
20571: LD_EXP 26
20575: NOT
20576: IFFALSE 20634
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
20578: LD_ADDR_VAR 0 3
20582: PUSH
20583: LD_VAR 0 3
20587: PUSH
20588: LD_STRING #KingoftheHill-Private
20590: PUSH
20591: LD_OWVAR 2
20595: PUSH
20596: LD_OWVAR 2
20600: PUSH
20601: LD_VAR 0 2
20605: PUSH
20606: LD_INT 10
20608: PLUS
20609: PPUSH
20610: CALL_OW 110
20614: PUSH
20615: LD_INT 3
20617: DIV
20618: PUSH
20619: LD_EXP 21
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: ADD
20631: ST_TO_ADDR
20632: GO 21006
// begin for i in Teams [ 1 ] do
20634: LD_ADDR_VAR 0 4
20638: PUSH
20639: LD_EXP 23
20643: PUSH
20644: LD_INT 1
20646: ARRAY
20647: PUSH
20648: FOR_IN
20649: IFFALSE 20682
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20651: LD_ADDR_VAR 0 5
20655: PUSH
20656: LD_VAR 0 5
20660: PUSH
20661: LD_VAR 0 4
20665: PUSH
20666: LD_INT 10
20668: PLUS
20669: PPUSH
20670: CALL_OW 110
20674: PUSH
20675: LD_INT 3
20677: DIV
20678: PLUS
20679: ST_TO_ADDR
20680: GO 20648
20682: POP
20683: POP
// for i in Teams [ 2 ] do
20684: LD_ADDR_VAR 0 4
20688: PUSH
20689: LD_EXP 23
20693: PUSH
20694: LD_INT 2
20696: ARRAY
20697: PUSH
20698: FOR_IN
20699: IFFALSE 20732
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20701: LD_ADDR_VAR 0 6
20705: PUSH
20706: LD_VAR 0 6
20710: PUSH
20711: LD_VAR 0 4
20715: PUSH
20716: LD_INT 10
20718: PLUS
20719: PPUSH
20720: CALL_OW 110
20724: PUSH
20725: LD_INT 3
20727: DIV
20728: PLUS
20729: ST_TO_ADDR
20730: GO 20698
20732: POP
20733: POP
// for i in Teams [ 3 ] do
20734: LD_ADDR_VAR 0 4
20738: PUSH
20739: LD_EXP 23
20743: PUSH
20744: LD_INT 3
20746: ARRAY
20747: PUSH
20748: FOR_IN
20749: IFFALSE 20782
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20751: LD_ADDR_VAR 0 7
20755: PUSH
20756: LD_VAR 0 7
20760: PUSH
20761: LD_VAR 0 4
20765: PUSH
20766: LD_INT 10
20768: PLUS
20769: PPUSH
20770: CALL_OW 110
20774: PUSH
20775: LD_INT 3
20777: DIV
20778: PLUS
20779: ST_TO_ADDR
20780: GO 20748
20782: POP
20783: POP
// for i in Teams [ 4 ] do
20784: LD_ADDR_VAR 0 4
20788: PUSH
20789: LD_EXP 23
20793: PUSH
20794: LD_INT 4
20796: ARRAY
20797: PUSH
20798: FOR_IN
20799: IFFALSE 20832
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20801: LD_ADDR_VAR 0 8
20805: PUSH
20806: LD_VAR 0 8
20810: PUSH
20811: LD_VAR 0 4
20815: PUSH
20816: LD_INT 10
20818: PLUS
20819: PPUSH
20820: CALL_OW 110
20824: PUSH
20825: LD_INT 3
20827: DIV
20828: PLUS
20829: ST_TO_ADDR
20830: GO 20798
20832: POP
20833: POP
// if your_side in Teams [ 1 ] then
20834: LD_OWVAR 2
20838: PUSH
20839: LD_EXP 23
20843: PUSH
20844: LD_INT 1
20846: ARRAY
20847: IN
20848: IFFALSE 20877
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20850: LD_ADDR_VAR 0 3
20854: PUSH
20855: LD_STRING #KingoftheHill-Public-red
20857: PUSH
20858: LD_INT 3
20860: PUSH
20861: LD_VAR 0 5
20865: PUSH
20866: LD_EXP 21
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
20877: LD_OWVAR 2
20881: PUSH
20882: LD_EXP 23
20886: PUSH
20887: LD_INT 2
20889: ARRAY
20890: IN
20891: IFFALSE 20920
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20893: LD_ADDR_VAR 0 3
20897: PUSH
20898: LD_STRING #KingoftheHill-Public-blue
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: LD_VAR 0 6
20908: PUSH
20909: LD_EXP 21
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
20920: LD_OWVAR 2
20924: PUSH
20925: LD_EXP 23
20929: PUSH
20930: LD_INT 3
20932: ARRAY
20933: IN
20934: IFFALSE 20963
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20936: LD_ADDR_VAR 0 3
20940: PUSH
20941: LD_STRING #KingoftheHill-Public-yell
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: LD_VAR 0 7
20951: PUSH
20952: LD_EXP 21
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
20963: LD_OWVAR 2
20967: PUSH
20968: LD_EXP 23
20972: PUSH
20973: LD_INT 4
20975: ARRAY
20976: IN
20977: IFFALSE 21006
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20979: LD_ADDR_VAR 0 3
20983: PUSH
20984: LD_STRING #KingoftheHill-Public-green
20986: PUSH
20987: LD_INT 7
20989: PUSH
20990: LD_VAR 0 8
20994: PUSH
20995: LD_EXP 21
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: ST_TO_ADDR
// end ; Display_kings := vypis ;
21006: LD_ADDR_EXP 69
21010: PUSH
21011: LD_VAR 0 3
21015: ST_TO_ADDR
// end ;
21016: LD_VAR 0 1
21020: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
21021: LD_INT 0
21023: PPUSH
21024: PPUSH
21025: PPUSH
21026: PPUSH
21027: PPUSH
21028: PPUSH
21029: PPUSH
21030: PPUSH
21031: PPUSH
// side := [ ] ;
21032: LD_ADDR_VAR 0 2
21036: PUSH
21037: EMPTY
21038: ST_TO_ADDR
// red = 0 ;
21039: LD_ADDR_VAR 0 5
21043: PUSH
21044: LD_INT 0
21046: ST_TO_ADDR
// blue = 0 ;
21047: LD_ADDR_VAR 0 6
21051: PUSH
21052: LD_INT 0
21054: ST_TO_ADDR
// yel = 0 ;
21055: LD_ADDR_VAR 0 7
21059: PUSH
21060: LD_INT 0
21062: ST_TO_ADDR
// green = 0 ;
21063: LD_ADDR_VAR 0 8
21067: PUSH
21068: LD_INT 0
21070: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
21071: LD_ADDR_VAR 0 3
21075: PUSH
21076: LD_INT 19
21078: PPUSH
21079: LD_INT 21
21081: PUSH
21082: LD_INT 3
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 53
21091: PUSH
21092: EMPTY
21093: LIST
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PPUSH
21099: CALL_OW 70
21103: ST_TO_ADDR
// for un in list do
21104: LD_ADDR_VAR 0 4
21108: PUSH
21109: LD_VAR 0 3
21113: PUSH
21114: FOR_IN
21115: IFFALSE 21140
// side := side union GetSide ( un ) ;
21117: LD_ADDR_VAR 0 2
21121: PUSH
21122: LD_VAR 0 2
21126: PUSH
21127: LD_VAR 0 4
21131: PPUSH
21132: CALL_OW 255
21136: UNION
21137: ST_TO_ADDR
21138: GO 21114
21140: POP
21141: POP
// if side <> 1 then
21142: LD_VAR 0 2
21146: PUSH
21147: LD_INT 1
21149: NONEQUAL
21150: IFFALSE 21154
// exit ;
21152: GO 21517
// side := side [ 1 ] ;
21154: LD_ADDR_VAR 0 2
21158: PUSH
21159: LD_VAR 0 2
21163: PUSH
21164: LD_INT 1
21166: ARRAY
21167: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
21168: LD_VAR 0 2
21172: PUSH
21173: LD_INT 10
21175: PLUS
21176: PPUSH
21177: LD_VAR 0 2
21181: PUSH
21182: LD_INT 10
21184: PLUS
21185: PPUSH
21186: CALL_OW 110
21190: PUSH
21191: LD_INT 1
21193: PLUS
21194: PPUSH
21195: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
21199: LD_VAR 0 2
21203: PPUSH
21204: LD_VAR 0 2
21208: PUSH
21209: LD_INT 10
21211: PLUS
21212: PPUSH
21213: CALL_OW 110
21217: PUSH
21218: LD_INT 3
21220: DIV
21221: PPUSH
21222: LD_INT 2
21224: PPUSH
21225: CALL 18238 0 3
// if not Team_Game then
21229: LD_EXP 26
21233: NOT
21234: IFFALSE 21517
// if GetTag ( side + 10 ) >= final_count * 3 then
21236: LD_VAR 0 2
21240: PUSH
21241: LD_INT 10
21243: PLUS
21244: PPUSH
21245: CALL_OW 110
21249: PUSH
21250: LD_EXP 21
21254: PUSH
21255: LD_INT 3
21257: MUL
21258: GREATEREQUAL
21259: IFFALSE 21266
// enable ( 3 ) else
21261: LD_INT 3
21263: ENABLE_MARKED
21264: GO 21517
// begin for i in Teams [ 1 ] do
21266: LD_ADDR_VAR 0 9
21270: PUSH
21271: LD_EXP 23
21275: PUSH
21276: LD_INT 1
21278: ARRAY
21279: PUSH
21280: FOR_IN
21281: IFFALSE 21314
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21283: LD_ADDR_VAR 0 5
21287: PUSH
21288: LD_VAR 0 5
21292: PUSH
21293: LD_VAR 0 9
21297: PUSH
21298: LD_INT 10
21300: PLUS
21301: PPUSH
21302: CALL_OW 110
21306: PUSH
21307: LD_INT 3
21309: DIV
21310: PLUS
21311: ST_TO_ADDR
21312: GO 21280
21314: POP
21315: POP
// for i in Teams [ 2 ] do
21316: LD_ADDR_VAR 0 9
21320: PUSH
21321: LD_EXP 23
21325: PUSH
21326: LD_INT 2
21328: ARRAY
21329: PUSH
21330: FOR_IN
21331: IFFALSE 21364
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21333: LD_ADDR_VAR 0 6
21337: PUSH
21338: LD_VAR 0 6
21342: PUSH
21343: LD_VAR 0 9
21347: PUSH
21348: LD_INT 10
21350: PLUS
21351: PPUSH
21352: CALL_OW 110
21356: PUSH
21357: LD_INT 3
21359: DIV
21360: PLUS
21361: ST_TO_ADDR
21362: GO 21330
21364: POP
21365: POP
// for i in Teams [ 3 ] do
21366: LD_ADDR_VAR 0 9
21370: PUSH
21371: LD_EXP 23
21375: PUSH
21376: LD_INT 3
21378: ARRAY
21379: PUSH
21380: FOR_IN
21381: IFFALSE 21414
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21383: LD_ADDR_VAR 0 7
21387: PUSH
21388: LD_VAR 0 7
21392: PUSH
21393: LD_VAR 0 9
21397: PUSH
21398: LD_INT 10
21400: PLUS
21401: PPUSH
21402: CALL_OW 110
21406: PUSH
21407: LD_INT 3
21409: DIV
21410: PLUS
21411: ST_TO_ADDR
21412: GO 21380
21414: POP
21415: POP
// for i in Teams [ 4 ] do
21416: LD_ADDR_VAR 0 9
21420: PUSH
21421: LD_EXP 23
21425: PUSH
21426: LD_INT 4
21428: ARRAY
21429: PUSH
21430: FOR_IN
21431: IFFALSE 21464
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21433: LD_ADDR_VAR 0 8
21437: PUSH
21438: LD_VAR 0 8
21442: PUSH
21443: LD_VAR 0 9
21447: PUSH
21448: LD_INT 10
21450: PLUS
21451: PPUSH
21452: CALL_OW 110
21456: PUSH
21457: LD_INT 3
21459: DIV
21460: PLUS
21461: ST_TO_ADDR
21462: GO 21430
21464: POP
21465: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
21466: LD_VAR 0 5
21470: PUSH
21471: LD_EXP 21
21475: GREATEREQUAL
21476: PUSH
21477: LD_VAR 0 6
21481: PUSH
21482: LD_EXP 21
21486: GREATEREQUAL
21487: OR
21488: PUSH
21489: LD_VAR 0 7
21493: PUSH
21494: LD_EXP 21
21498: GREATEREQUAL
21499: OR
21500: PUSH
21501: LD_VAR 0 8
21505: PUSH
21506: LD_EXP 21
21510: GREATEREQUAL
21511: OR
21512: IFFALSE 21517
// enable ( 3 ) ;
21514: LD_INT 3
21516: ENABLE_MARKED
// end ; end ;
21517: LD_VAR 0 1
21521: RET
// every 0 0$1 marked 2 do
21522: GO 21524
21524: DISABLE
// begin count_king ;
21525: CALL 21021 0 0
// show_public_points ;
21529: CALL 19914 0 0
// enable ;
21533: ENABLE
// end ;
21534: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
21535: GO 21537
21537: DISABLE
21538: LD_INT 0
21540: PPUSH
21541: PPUSH
21542: PPUSH
21543: PPUSH
21544: PPUSH
21545: PPUSH
// begin win := [ ] ;
21546: LD_ADDR_LOC 35
21550: PUSH
21551: EMPTY
21552: ST_TO_ADDR
// red = 0 ;
21553: LD_ADDR_VAR 0 2
21557: PUSH
21558: LD_INT 0
21560: ST_TO_ADDR
// blue = 0 ;
21561: LD_ADDR_VAR 0 3
21565: PUSH
21566: LD_INT 0
21568: ST_TO_ADDR
// yel = 0 ;
21569: LD_ADDR_VAR 0 4
21573: PUSH
21574: LD_INT 0
21576: ST_TO_ADDR
// green = 0 ;
21577: LD_ADDR_VAR 0 5
21581: PUSH
21582: LD_INT 0
21584: ST_TO_ADDR
// if not Team_Game then
21585: LD_EXP 26
21589: NOT
21590: IFFALSE 21667
// begin for side = 1 to 8 do
21592: LD_ADDR_VAR 0 1
21596: PUSH
21597: DOUBLE
21598: LD_INT 1
21600: DEC
21601: ST_TO_ADDR
21602: LD_INT 8
21604: PUSH
21605: FOR_TO
21606: IFFALSE 21651
// if GetTag ( side + 10 ) >= final_count * 3 then
21608: LD_VAR 0 1
21612: PUSH
21613: LD_INT 10
21615: PLUS
21616: PPUSH
21617: CALL_OW 110
21621: PUSH
21622: LD_EXP 21
21626: PUSH
21627: LD_INT 3
21629: MUL
21630: GREATEREQUAL
21631: IFFALSE 21649
// win := win ^ side ;
21633: LD_ADDR_LOC 35
21637: PUSH
21638: LD_LOC 35
21642: PUSH
21643: LD_VAR 0 1
21647: ADD
21648: ST_TO_ADDR
21649: GO 21605
21651: POP
21652: POP
// if win then
21653: LD_LOC 35
21657: IFFALSE 21664
// enable ( 4 ) else
21659: LD_INT 4
21661: ENABLE_MARKED
21662: GO 21665
// enable ;
21664: ENABLE
// end else
21665: GO 21983
// begin for i in Teams [ 1 ] do
21667: LD_ADDR_VAR 0 6
21671: PUSH
21672: LD_EXP 23
21676: PUSH
21677: LD_INT 1
21679: ARRAY
21680: PUSH
21681: FOR_IN
21682: IFFALSE 21715
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21684: LD_ADDR_VAR 0 2
21688: PUSH
21689: LD_VAR 0 2
21693: PUSH
21694: LD_VAR 0 6
21698: PUSH
21699: LD_INT 10
21701: PLUS
21702: PPUSH
21703: CALL_OW 110
21707: PUSH
21708: LD_INT 3
21710: DIV
21711: PLUS
21712: ST_TO_ADDR
21713: GO 21681
21715: POP
21716: POP
// for i in Teams [ 2 ] do
21717: LD_ADDR_VAR 0 6
21721: PUSH
21722: LD_EXP 23
21726: PUSH
21727: LD_INT 2
21729: ARRAY
21730: PUSH
21731: FOR_IN
21732: IFFALSE 21765
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21734: LD_ADDR_VAR 0 3
21738: PUSH
21739: LD_VAR 0 3
21743: PUSH
21744: LD_VAR 0 6
21748: PUSH
21749: LD_INT 10
21751: PLUS
21752: PPUSH
21753: CALL_OW 110
21757: PUSH
21758: LD_INT 3
21760: DIV
21761: PLUS
21762: ST_TO_ADDR
21763: GO 21731
21765: POP
21766: POP
// for i in Teams [ 3 ] do
21767: LD_ADDR_VAR 0 6
21771: PUSH
21772: LD_EXP 23
21776: PUSH
21777: LD_INT 3
21779: ARRAY
21780: PUSH
21781: FOR_IN
21782: IFFALSE 21815
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21784: LD_ADDR_VAR 0 4
21788: PUSH
21789: LD_VAR 0 4
21793: PUSH
21794: LD_VAR 0 6
21798: PUSH
21799: LD_INT 10
21801: PLUS
21802: PPUSH
21803: CALL_OW 110
21807: PUSH
21808: LD_INT 3
21810: DIV
21811: PLUS
21812: ST_TO_ADDR
21813: GO 21781
21815: POP
21816: POP
// for i in Teams [ 4 ] do
21817: LD_ADDR_VAR 0 6
21821: PUSH
21822: LD_EXP 23
21826: PUSH
21827: LD_INT 4
21829: ARRAY
21830: PUSH
21831: FOR_IN
21832: IFFALSE 21865
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21834: LD_ADDR_VAR 0 5
21838: PUSH
21839: LD_VAR 0 5
21843: PUSH
21844: LD_VAR 0 6
21848: PUSH
21849: LD_INT 10
21851: PLUS
21852: PPUSH
21853: CALL_OW 110
21857: PUSH
21858: LD_INT 3
21860: DIV
21861: PLUS
21862: ST_TO_ADDR
21863: GO 21831
21865: POP
21866: POP
// if red >= final_count then
21867: LD_VAR 0 2
21871: PUSH
21872: LD_EXP 21
21876: GREATEREQUAL
21877: IFFALSE 21893
// win = teams [ 1 ] ;
21879: LD_ADDR_LOC 35
21883: PUSH
21884: LD_EXP 23
21888: PUSH
21889: LD_INT 1
21891: ARRAY
21892: ST_TO_ADDR
// if blue >= final_count then
21893: LD_VAR 0 3
21897: PUSH
21898: LD_EXP 21
21902: GREATEREQUAL
21903: IFFALSE 21919
// win = teams [ 2 ] ;
21905: LD_ADDR_LOC 35
21909: PUSH
21910: LD_EXP 23
21914: PUSH
21915: LD_INT 2
21917: ARRAY
21918: ST_TO_ADDR
// if yel >= final_count then
21919: LD_VAR 0 4
21923: PUSH
21924: LD_EXP 21
21928: GREATEREQUAL
21929: IFFALSE 21945
// win = teams [ 3 ] ;
21931: LD_ADDR_LOC 35
21935: PUSH
21936: LD_EXP 23
21940: PUSH
21941: LD_INT 3
21943: ARRAY
21944: ST_TO_ADDR
// if green >= final_count then
21945: LD_VAR 0 5
21949: PUSH
21950: LD_EXP 21
21954: GREATEREQUAL
21955: IFFALSE 21971
// win = teams [ 4 ] ;
21957: LD_ADDR_LOC 35
21961: PUSH
21962: LD_EXP 23
21966: PUSH
21967: LD_INT 4
21969: ARRAY
21970: ST_TO_ADDR
// if win then
21971: LD_LOC 35
21975: IFFALSE 21982
// enable ( 4 ) else
21977: LD_INT 4
21979: ENABLE_MARKED
21980: GO 21983
// enable ;
21982: ENABLE
// end ; end ;
21983: PPOPN 6
21985: END
// every 0 0$1 marked 4 do
21986: GO 21988
21988: DISABLE
// begin if Player_Side in win then
21989: LD_EXP 28
21993: PUSH
21994: LD_LOC 35
21998: IN
21999: IFFALSE 22015
// begin wait ( 0 0$2 ) ;
22001: LD_INT 70
22003: PPUSH
22004: CALL_OW 67
// enable ( 401 ) ;
22008: LD_INT 401
22010: ENABLE_MARKED
// exit ;
22011: GO 22031
// end else
22013: GO 22031
// begin wait ( 0 0$2 ) ;
22015: LD_INT 70
22017: PPUSH
22018: CALL_OW 67
// Multiplayer_Loose_Message ;
22022: CALL_OW 521
// enable ( 400 ) ;
22026: LD_INT 400
22028: ENABLE_MARKED
// exit ;
22029: GO 22031
// end ; end ; end_of_file
22031: END
// export function SetMpTechs ( ) ; var side , i ; begin
22032: LD_INT 0
22034: PPUSH
22035: PPUSH
22036: PPUSH
// for side = 1 to 8 do
22037: LD_ADDR_VAR 0 2
22041: PUSH
22042: DOUBLE
22043: LD_INT 1
22045: DEC
22046: ST_TO_ADDR
22047: LD_INT 8
22049: PUSH
22050: FOR_TO
22051: IFFALSE 22172
// begin for i = 1 to 72 do
22053: LD_ADDR_VAR 0 3
22057: PUSH
22058: DOUBLE
22059: LD_INT 1
22061: DEC
22062: ST_TO_ADDR
22063: LD_INT 72
22065: PUSH
22066: FOR_TO
22067: IFFALSE 22098
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
22069: LD_VAR 0 3
22073: PPUSH
22074: LD_VAR 0 2
22078: PPUSH
22079: LD_INT 0
22081: PPUSH
22082: LD_VAR 0 3
22086: PPUSH
22087: CALL_OW 565
22091: PPUSH
22092: CALL_OW 322
22096: GO 22066
22098: POP
22099: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
22100: LD_INT 73
22102: PPUSH
22103: LD_VAR 0 2
22107: PPUSH
22108: LD_INT 0
22110: PPUSH
22111: LD_INT 25
22113: PPUSH
22114: CALL_OW 565
22118: PPUSH
22119: CALL_OW 322
// for i = 0 to 40 do
22123: LD_ADDR_VAR 0 3
22127: PUSH
22128: DOUBLE
22129: LD_INT 0
22131: DEC
22132: ST_TO_ADDR
22133: LD_INT 40
22135: PUSH
22136: FOR_TO
22137: IFFALSE 22168
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
22139: LD_VAR 0 3
22143: PPUSH
22144: LD_VAR 0 2
22148: PPUSH
22149: LD_INT 1
22151: PPUSH
22152: LD_VAR 0 3
22156: PPUSH
22157: CALL_OW 565
22161: PPUSH
22162: CALL_OW 324
22166: GO 22136
22168: POP
22169: POP
// end ;
22170: GO 22050
22172: POP
22173: POP
// end ;
22174: LD_VAR 0 1
22178: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
22179: LD_INT 0
22181: PPUSH
22182: PPUSH
22183: PPUSH
// for side = 1 to 8 do
22184: LD_ADDR_VAR 0 3
22188: PUSH
22189: DOUBLE
22190: LD_INT 1
22192: DEC
22193: ST_TO_ADDR
22194: LD_INT 8
22196: PUSH
22197: FOR_TO
22198: IFFALSE 26194
// begin for i = 1 to 73 do
22200: LD_ADDR_VAR 0 4
22204: PUSH
22205: DOUBLE
22206: LD_INT 1
22208: DEC
22209: ST_TO_ADDR
22210: LD_INT 73
22212: PUSH
22213: FOR_TO
22214: IFFALSE 22235
// SetTech ( i , side , state_disabled ) ;
22216: LD_VAR 0 4
22220: PPUSH
22221: LD_VAR 0 3
22225: PPUSH
22226: LD_INT 0
22228: PPUSH
22229: CALL_OW 322
22233: GO 22213
22235: POP
22236: POP
// for i = 0 to 40 do
22237: LD_ADDR_VAR 0 4
22241: PUSH
22242: DOUBLE
22243: LD_INT 0
22245: DEC
22246: ST_TO_ADDR
22247: LD_INT 40
22249: PUSH
22250: FOR_TO
22251: IFFALSE 22272
// SetRestrict ( i , side , false ) ;
22253: LD_VAR 0 4
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: LD_INT 0
22265: PPUSH
22266: CALL_OW 324
22270: GO 22250
22272: POP
22273: POP
// case level of 1 :
22274: LD_VAR 0 1
22278: PUSH
22279: LD_INT 1
22281: DOUBLE
22282: EQUAL
22283: IFTRUE 22287
22285: GO 22440
22287: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22288: LD_INT 35
22290: PPUSH
22291: LD_VAR 0 3
22295: PPUSH
22296: LD_INT 1
22298: PPUSH
22299: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22303: LD_INT 45
22305: PPUSH
22306: LD_VAR 0 3
22310: PPUSH
22311: LD_INT 1
22313: PPUSH
22314: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22318: LD_INT 46
22320: PPUSH
22321: LD_VAR 0 3
22325: PPUSH
22326: LD_INT 1
22328: PPUSH
22329: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22333: LD_INT 47
22335: PPUSH
22336: LD_VAR 0 3
22340: PPUSH
22341: LD_INT 1
22343: PPUSH
22344: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22348: LD_INT 0
22350: PPUSH
22351: LD_VAR 0 3
22355: PPUSH
22356: LD_INT 1
22358: PPUSH
22359: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22363: LD_INT 2
22365: PPUSH
22366: LD_VAR 0 3
22370: PPUSH
22371: LD_INT 1
22373: PPUSH
22374: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22378: LD_INT 4
22380: PPUSH
22381: LD_VAR 0 3
22385: PPUSH
22386: LD_INT 1
22388: PPUSH
22389: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22393: LD_INT 6
22395: PPUSH
22396: LD_VAR 0 3
22400: PPUSH
22401: LD_INT 1
22403: PPUSH
22404: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22408: LD_INT 29
22410: PPUSH
22411: LD_VAR 0 3
22415: PPUSH
22416: LD_INT 1
22418: PPUSH
22419: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22423: LD_INT 31
22425: PPUSH
22426: LD_VAR 0 3
22430: PPUSH
22431: LD_INT 1
22433: PPUSH
22434: CALL_OW 324
// end ; 2 :
22438: GO 26192
22440: LD_INT 2
22442: DOUBLE
22443: EQUAL
22444: IFTRUE 22448
22446: GO 22646
22448: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22449: LD_INT 35
22451: PPUSH
22452: LD_VAR 0 3
22456: PPUSH
22457: LD_INT 1
22459: PPUSH
22460: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22464: LD_INT 45
22466: PPUSH
22467: LD_VAR 0 3
22471: PPUSH
22472: LD_INT 1
22474: PPUSH
22475: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22479: LD_INT 46
22481: PPUSH
22482: LD_VAR 0 3
22486: PPUSH
22487: LD_INT 1
22489: PPUSH
22490: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22494: LD_INT 47
22496: PPUSH
22497: LD_VAR 0 3
22501: PPUSH
22502: LD_INT 1
22504: PPUSH
22505: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22509: LD_INT 1
22511: PPUSH
22512: LD_VAR 0 3
22516: PPUSH
22517: LD_INT 1
22519: PPUSH
22520: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22524: LD_INT 2
22526: PPUSH
22527: LD_VAR 0 3
22531: PPUSH
22532: LD_INT 1
22534: PPUSH
22535: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22539: LD_INT 11
22541: PPUSH
22542: LD_VAR 0 3
22546: PPUSH
22547: LD_INT 1
22549: PPUSH
22550: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22554: LD_INT 0
22556: PPUSH
22557: LD_VAR 0 3
22561: PPUSH
22562: LD_INT 1
22564: PPUSH
22565: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22569: LD_INT 2
22571: PPUSH
22572: LD_VAR 0 3
22576: PPUSH
22577: LD_INT 1
22579: PPUSH
22580: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22584: LD_INT 4
22586: PPUSH
22587: LD_VAR 0 3
22591: PPUSH
22592: LD_INT 1
22594: PPUSH
22595: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22599: LD_INT 6
22601: PPUSH
22602: LD_VAR 0 3
22606: PPUSH
22607: LD_INT 1
22609: PPUSH
22610: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22614: LD_INT 29
22616: PPUSH
22617: LD_VAR 0 3
22621: PPUSH
22622: LD_INT 1
22624: PPUSH
22625: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22629: LD_INT 31
22631: PPUSH
22632: LD_VAR 0 3
22636: PPUSH
22637: LD_INT 1
22639: PPUSH
22640: CALL_OW 324
// end ; 3 :
22644: GO 26192
22646: LD_INT 3
22648: DOUBLE
22649: EQUAL
22650: IFTRUE 22654
22652: GO 23107
22654: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22655: LD_INT 35
22657: PPUSH
22658: LD_VAR 0 3
22662: PPUSH
22663: LD_INT 1
22665: PPUSH
22666: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22670: LD_INT 45
22672: PPUSH
22673: LD_VAR 0 3
22677: PPUSH
22678: LD_INT 1
22680: PPUSH
22681: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22685: LD_INT 46
22687: PPUSH
22688: LD_VAR 0 3
22692: PPUSH
22693: LD_INT 1
22695: PPUSH
22696: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22700: LD_INT 47
22702: PPUSH
22703: LD_VAR 0 3
22707: PPUSH
22708: LD_INT 1
22710: PPUSH
22711: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22715: LD_INT 1
22717: PPUSH
22718: LD_VAR 0 3
22722: PPUSH
22723: LD_INT 1
22725: PPUSH
22726: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22730: LD_INT 2
22732: PPUSH
22733: LD_VAR 0 3
22737: PPUSH
22738: LD_INT 1
22740: PPUSH
22741: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22745: LD_INT 11
22747: PPUSH
22748: LD_VAR 0 3
22752: PPUSH
22753: LD_INT 1
22755: PPUSH
22756: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22760: LD_INT 48
22762: PPUSH
22763: LD_VAR 0 3
22767: PPUSH
22768: LD_INT 1
22770: PPUSH
22771: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22775: LD_INT 69
22777: PPUSH
22778: LD_VAR 0 3
22782: PPUSH
22783: LD_INT 1
22785: PPUSH
22786: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22790: LD_INT 39
22792: PPUSH
22793: LD_VAR 0 3
22797: PPUSH
22798: LD_INT 1
22800: PPUSH
22801: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22805: LD_INT 43
22807: PPUSH
22808: LD_VAR 0 3
22812: PPUSH
22813: LD_INT 1
22815: PPUSH
22816: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22820: LD_INT 51
22822: PPUSH
22823: LD_VAR 0 3
22827: PPUSH
22828: LD_INT 1
22830: PPUSH
22831: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22835: LD_INT 6
22837: PPUSH
22838: LD_VAR 0 3
22842: PPUSH
22843: LD_INT 1
22845: PPUSH
22846: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22850: LD_INT 0
22852: PPUSH
22853: LD_VAR 0 3
22857: PPUSH
22858: LD_INT 1
22860: PPUSH
22861: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22865: LD_INT 2
22867: PPUSH
22868: LD_VAR 0 3
22872: PPUSH
22873: LD_INT 1
22875: PPUSH
22876: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22880: LD_INT 3
22882: PPUSH
22883: LD_VAR 0 3
22887: PPUSH
22888: LD_INT 1
22890: PPUSH
22891: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22895: LD_INT 4
22897: PPUSH
22898: LD_VAR 0 3
22902: PPUSH
22903: LD_INT 1
22905: PPUSH
22906: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22910: LD_INT 6
22912: PPUSH
22913: LD_VAR 0 3
22917: PPUSH
22918: LD_INT 1
22920: PPUSH
22921: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22925: LD_INT 7
22927: PPUSH
22928: LD_VAR 0 3
22932: PPUSH
22933: LD_INT 1
22935: PPUSH
22936: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22940: LD_INT 8
22942: PPUSH
22943: LD_VAR 0 3
22947: PPUSH
22948: LD_INT 1
22950: PPUSH
22951: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22955: LD_INT 10
22957: PPUSH
22958: LD_VAR 0 3
22962: PPUSH
22963: LD_INT 1
22965: PPUSH
22966: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22970: LD_INT 15
22972: PPUSH
22973: LD_VAR 0 3
22977: PPUSH
22978: LD_INT 1
22980: PPUSH
22981: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22985: LD_INT 16
22987: PPUSH
22988: LD_VAR 0 3
22992: PPUSH
22993: LD_INT 1
22995: PPUSH
22996: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23000: LD_INT 17
23002: PPUSH
23003: LD_VAR 0 3
23007: PPUSH
23008: LD_INT 1
23010: PPUSH
23011: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23015: LD_INT 20
23017: PPUSH
23018: LD_VAR 0 3
23022: PPUSH
23023: LD_INT 1
23025: PPUSH
23026: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23030: LD_INT 26
23032: PPUSH
23033: LD_VAR 0 3
23037: PPUSH
23038: LD_INT 1
23040: PPUSH
23041: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23045: LD_INT 27
23047: PPUSH
23048: LD_VAR 0 3
23052: PPUSH
23053: LD_INT 1
23055: PPUSH
23056: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23060: LD_INT 29
23062: PPUSH
23063: LD_VAR 0 3
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23075: LD_INT 31
23077: PPUSH
23078: LD_VAR 0 3
23082: PPUSH
23083: LD_INT 1
23085: PPUSH
23086: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23090: LD_INT 32
23092: PPUSH
23093: LD_VAR 0 3
23097: PPUSH
23098: LD_INT 1
23100: PPUSH
23101: CALL_OW 324
// end ; 4 :
23105: GO 26192
23107: LD_INT 4
23109: DOUBLE
23110: EQUAL
23111: IFTRUE 23115
23113: GO 24063
23115: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23116: LD_INT 35
23118: PPUSH
23119: LD_VAR 0 3
23123: PPUSH
23124: LD_INT 1
23126: PPUSH
23127: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23131: LD_INT 45
23133: PPUSH
23134: LD_VAR 0 3
23138: PPUSH
23139: LD_INT 1
23141: PPUSH
23142: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23146: LD_INT 46
23148: PPUSH
23149: LD_VAR 0 3
23153: PPUSH
23154: LD_INT 1
23156: PPUSH
23157: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23161: LD_INT 47
23163: PPUSH
23164: LD_VAR 0 3
23168: PPUSH
23169: LD_INT 1
23171: PPUSH
23172: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23176: LD_INT 1
23178: PPUSH
23179: LD_VAR 0 3
23183: PPUSH
23184: LD_INT 1
23186: PPUSH
23187: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23191: LD_INT 2
23193: PPUSH
23194: LD_VAR 0 3
23198: PPUSH
23199: LD_INT 1
23201: PPUSH
23202: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23206: LD_INT 11
23208: PPUSH
23209: LD_VAR 0 3
23213: PPUSH
23214: LD_INT 1
23216: PPUSH
23217: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23221: LD_INT 20
23223: PPUSH
23224: LD_VAR 0 3
23228: PPUSH
23229: LD_INT 1
23231: PPUSH
23232: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23236: LD_INT 48
23238: PPUSH
23239: LD_VAR 0 3
23243: PPUSH
23244: LD_INT 1
23246: PPUSH
23247: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23251: LD_INT 49
23253: PPUSH
23254: LD_VAR 0 3
23258: PPUSH
23259: LD_INT 1
23261: PPUSH
23262: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23266: LD_INT 69
23268: PPUSH
23269: LD_VAR 0 3
23273: PPUSH
23274: LD_INT 1
23276: PPUSH
23277: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23281: LD_INT 39
23283: PPUSH
23284: LD_VAR 0 3
23288: PPUSH
23289: LD_INT 1
23291: PPUSH
23292: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23296: LD_INT 34
23298: PPUSH
23299: LD_VAR 0 3
23303: PPUSH
23304: LD_INT 1
23306: PPUSH
23307: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23311: LD_INT 42
23313: PPUSH
23314: LD_VAR 0 3
23318: PPUSH
23319: LD_INT 1
23321: PPUSH
23322: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23326: LD_INT 44
23328: PPUSH
23329: LD_VAR 0 3
23333: PPUSH
23334: LD_INT 1
23336: PPUSH
23337: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23341: LD_INT 41
23343: PPUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: LD_INT 1
23351: PPUSH
23352: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23356: LD_INT 43
23358: PPUSH
23359: LD_VAR 0 3
23363: PPUSH
23364: LD_INT 1
23366: PPUSH
23367: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23371: LD_INT 70
23373: PPUSH
23374: LD_VAR 0 3
23378: PPUSH
23379: LD_INT 1
23381: PPUSH
23382: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23386: LD_INT 51
23388: PPUSH
23389: LD_VAR 0 3
23393: PPUSH
23394: LD_INT 1
23396: PPUSH
23397: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23401: LD_INT 52
23403: PPUSH
23404: LD_VAR 0 3
23408: PPUSH
23409: LD_INT 1
23411: PPUSH
23412: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23416: LD_INT 6
23418: PPUSH
23419: LD_VAR 0 3
23423: PPUSH
23424: LD_INT 1
23426: PPUSH
23427: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23431: LD_INT 15
23433: PPUSH
23434: LD_VAR 0 3
23438: PPUSH
23439: LD_INT 1
23441: PPUSH
23442: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23446: LD_INT 7
23448: PPUSH
23449: LD_VAR 0 3
23453: PPUSH
23454: LD_INT 1
23456: PPUSH
23457: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23461: LD_INT 12
23463: PPUSH
23464: LD_VAR 0 3
23468: PPUSH
23469: LD_INT 1
23471: PPUSH
23472: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23476: LD_INT 18
23478: PPUSH
23479: LD_VAR 0 3
23483: PPUSH
23484: LD_INT 1
23486: PPUSH
23487: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23491: LD_INT 60
23493: PPUSH
23494: LD_VAR 0 3
23498: PPUSH
23499: LD_INT 1
23501: PPUSH
23502: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23506: LD_INT 9
23508: PPUSH
23509: LD_VAR 0 3
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23521: LD_INT 30
23523: PPUSH
23524: LD_VAR 0 3
23528: PPUSH
23529: LD_INT 1
23531: PPUSH
23532: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23536: LD_INT 37
23538: PPUSH
23539: LD_VAR 0 3
23543: PPUSH
23544: LD_INT 1
23546: PPUSH
23547: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23551: LD_INT 5
23553: PPUSH
23554: LD_VAR 0 3
23558: PPUSH
23559: LD_INT 1
23561: PPUSH
23562: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23566: LD_INT 66
23568: PPUSH
23569: LD_VAR 0 3
23573: PPUSH
23574: LD_INT 1
23576: PPUSH
23577: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23581: LD_INT 21
23583: PPUSH
23584: LD_VAR 0 3
23588: PPUSH
23589: LD_INT 1
23591: PPUSH
23592: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23596: LD_INT 22
23598: PPUSH
23599: LD_VAR 0 3
23603: PPUSH
23604: LD_INT 1
23606: PPUSH
23607: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23611: LD_INT 54
23613: PPUSH
23614: LD_VAR 0 3
23618: PPUSH
23619: LD_INT 1
23621: PPUSH
23622: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23626: LD_INT 0
23628: PPUSH
23629: LD_VAR 0 3
23633: PPUSH
23634: LD_INT 1
23636: PPUSH
23637: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23641: LD_INT 1
23643: PPUSH
23644: LD_VAR 0 3
23648: PPUSH
23649: LD_INT 1
23651: PPUSH
23652: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23656: LD_INT 2
23658: PPUSH
23659: LD_VAR 0 3
23663: PPUSH
23664: LD_INT 1
23666: PPUSH
23667: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23671: LD_INT 3
23673: PPUSH
23674: LD_VAR 0 3
23678: PPUSH
23679: LD_INT 1
23681: PPUSH
23682: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23686: LD_INT 4
23688: PPUSH
23689: LD_VAR 0 3
23693: PPUSH
23694: LD_INT 1
23696: PPUSH
23697: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23701: LD_INT 5
23703: PPUSH
23704: LD_VAR 0 3
23708: PPUSH
23709: LD_INT 1
23711: PPUSH
23712: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23716: LD_INT 6
23718: PPUSH
23719: LD_VAR 0 3
23723: PPUSH
23724: LD_INT 1
23726: PPUSH
23727: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23731: LD_INT 7
23733: PPUSH
23734: LD_VAR 0 3
23738: PPUSH
23739: LD_INT 1
23741: PPUSH
23742: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23746: LD_INT 8
23748: PPUSH
23749: LD_VAR 0 3
23753: PPUSH
23754: LD_INT 1
23756: PPUSH
23757: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23761: LD_INT 10
23763: PPUSH
23764: LD_VAR 0 3
23768: PPUSH
23769: LD_INT 1
23771: PPUSH
23772: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23776: LD_INT 11
23778: PPUSH
23779: LD_VAR 0 3
23783: PPUSH
23784: LD_INT 1
23786: PPUSH
23787: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23791: LD_INT 12
23793: PPUSH
23794: LD_VAR 0 3
23798: PPUSH
23799: LD_INT 1
23801: PPUSH
23802: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23806: LD_INT 13
23808: PPUSH
23809: LD_VAR 0 3
23813: PPUSH
23814: LD_INT 1
23816: PPUSH
23817: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23821: LD_INT 14
23823: PPUSH
23824: LD_VAR 0 3
23828: PPUSH
23829: LD_INT 1
23831: PPUSH
23832: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23836: LD_INT 15
23838: PPUSH
23839: LD_VAR 0 3
23843: PPUSH
23844: LD_INT 1
23846: PPUSH
23847: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23851: LD_INT 16
23853: PPUSH
23854: LD_VAR 0 3
23858: PPUSH
23859: LD_INT 1
23861: PPUSH
23862: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23866: LD_INT 17
23868: PPUSH
23869: LD_VAR 0 3
23873: PPUSH
23874: LD_INT 1
23876: PPUSH
23877: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23881: LD_INT 19
23883: PPUSH
23884: LD_VAR 0 3
23888: PPUSH
23889: LD_INT 1
23891: PPUSH
23892: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23896: LD_INT 20
23898: PPUSH
23899: LD_VAR 0 3
23903: PPUSH
23904: LD_INT 1
23906: PPUSH
23907: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23911: LD_INT 21
23913: PPUSH
23914: LD_VAR 0 3
23918: PPUSH
23919: LD_INT 1
23921: PPUSH
23922: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23926: LD_INT 23
23928: PPUSH
23929: LD_VAR 0 3
23933: PPUSH
23934: LD_INT 1
23936: PPUSH
23937: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23941: LD_INT 26
23943: PPUSH
23944: LD_VAR 0 3
23948: PPUSH
23949: LD_INT 1
23951: PPUSH
23952: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23956: LD_INT 27
23958: PPUSH
23959: LD_VAR 0 3
23963: PPUSH
23964: LD_INT 1
23966: PPUSH
23967: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23971: LD_INT 28
23973: PPUSH
23974: LD_VAR 0 3
23978: PPUSH
23979: LD_INT 1
23981: PPUSH
23982: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23986: LD_INT 29
23988: PPUSH
23989: LD_VAR 0 3
23993: PPUSH
23994: LD_INT 1
23996: PPUSH
23997: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24001: LD_INT 30
24003: PPUSH
24004: LD_VAR 0 3
24008: PPUSH
24009: LD_INT 1
24011: PPUSH
24012: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24016: LD_INT 31
24018: PPUSH
24019: LD_VAR 0 3
24023: PPUSH
24024: LD_INT 1
24026: PPUSH
24027: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24031: LD_INT 32
24033: PPUSH
24034: LD_VAR 0 3
24038: PPUSH
24039: LD_INT 1
24041: PPUSH
24042: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
24046: LD_INT 36
24048: PPUSH
24049: LD_VAR 0 3
24053: PPUSH
24054: LD_INT 1
24056: PPUSH
24057: CALL_OW 324
// end ; 5 :
24061: GO 26192
24063: LD_INT 5
24065: DOUBLE
24066: EQUAL
24067: IFTRUE 24071
24069: GO 25184
24071: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
24072: LD_INT 35
24074: PPUSH
24075: LD_VAR 0 3
24079: PPUSH
24080: LD_INT 1
24082: PPUSH
24083: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
24087: LD_INT 45
24089: PPUSH
24090: LD_VAR 0 3
24094: PPUSH
24095: LD_INT 1
24097: PPUSH
24098: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
24102: LD_INT 46
24104: PPUSH
24105: LD_VAR 0 3
24109: PPUSH
24110: LD_INT 1
24112: PPUSH
24113: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
24117: LD_INT 47
24119: PPUSH
24120: LD_VAR 0 3
24124: PPUSH
24125: LD_INT 1
24127: PPUSH
24128: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
24132: LD_INT 1
24134: PPUSH
24135: LD_VAR 0 3
24139: PPUSH
24140: LD_INT 1
24142: PPUSH
24143: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
24147: LD_INT 2
24149: PPUSH
24150: LD_VAR 0 3
24154: PPUSH
24155: LD_INT 1
24157: PPUSH
24158: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
24162: LD_INT 11
24164: PPUSH
24165: LD_VAR 0 3
24169: PPUSH
24170: LD_INT 1
24172: PPUSH
24173: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24177: LD_INT 20
24179: PPUSH
24180: LD_VAR 0 3
24184: PPUSH
24185: LD_INT 1
24187: PPUSH
24188: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24192: LD_INT 48
24194: PPUSH
24195: LD_VAR 0 3
24199: PPUSH
24200: LD_INT 1
24202: PPUSH
24203: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24207: LD_INT 49
24209: PPUSH
24210: LD_VAR 0 3
24214: PPUSH
24215: LD_INT 1
24217: PPUSH
24218: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24222: LD_INT 69
24224: PPUSH
24225: LD_VAR 0 3
24229: PPUSH
24230: LD_INT 1
24232: PPUSH
24233: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24237: LD_INT 39
24239: PPUSH
24240: LD_VAR 0 3
24244: PPUSH
24245: LD_INT 1
24247: PPUSH
24248: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24252: LD_INT 34
24254: PPUSH
24255: LD_VAR 0 3
24259: PPUSH
24260: LD_INT 1
24262: PPUSH
24263: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24267: LD_INT 42
24269: PPUSH
24270: LD_VAR 0 3
24274: PPUSH
24275: LD_INT 1
24277: PPUSH
24278: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24282: LD_INT 44
24284: PPUSH
24285: LD_VAR 0 3
24289: PPUSH
24290: LD_INT 1
24292: PPUSH
24293: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24297: LD_INT 41
24299: PPUSH
24300: LD_VAR 0 3
24304: PPUSH
24305: LD_INT 1
24307: PPUSH
24308: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24312: LD_INT 40
24314: PPUSH
24315: LD_VAR 0 3
24319: PPUSH
24320: LD_INT 1
24322: PPUSH
24323: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24327: LD_INT 43
24329: PPUSH
24330: LD_VAR 0 3
24334: PPUSH
24335: LD_INT 1
24337: PPUSH
24338: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24342: LD_INT 70
24344: PPUSH
24345: LD_VAR 0 3
24349: PPUSH
24350: LD_INT 1
24352: PPUSH
24353: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24357: LD_INT 51
24359: PPUSH
24360: LD_VAR 0 3
24364: PPUSH
24365: LD_INT 1
24367: PPUSH
24368: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24372: LD_INT 52
24374: PPUSH
24375: LD_VAR 0 3
24379: PPUSH
24380: LD_INT 1
24382: PPUSH
24383: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24387: LD_INT 6
24389: PPUSH
24390: LD_VAR 0 3
24394: PPUSH
24395: LD_INT 1
24397: PPUSH
24398: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24402: LD_INT 15
24404: PPUSH
24405: LD_VAR 0 3
24409: PPUSH
24410: LD_INT 1
24412: PPUSH
24413: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24417: LD_INT 7
24419: PPUSH
24420: LD_VAR 0 3
24424: PPUSH
24425: LD_INT 1
24427: PPUSH
24428: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24432: LD_INT 12
24434: PPUSH
24435: LD_VAR 0 3
24439: PPUSH
24440: LD_INT 1
24442: PPUSH
24443: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24447: LD_INT 17
24449: PPUSH
24450: LD_VAR 0 3
24454: PPUSH
24455: LD_INT 1
24457: PPUSH
24458: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24462: LD_INT 18
24464: PPUSH
24465: LD_VAR 0 3
24469: PPUSH
24470: LD_INT 1
24472: PPUSH
24473: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24477: LD_INT 60
24479: PPUSH
24480: LD_VAR 0 3
24484: PPUSH
24485: LD_INT 1
24487: PPUSH
24488: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24492: LD_INT 32
24494: PPUSH
24495: LD_VAR 0 3
24499: PPUSH
24500: LD_INT 1
24502: PPUSH
24503: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24507: LD_INT 9
24509: PPUSH
24510: LD_VAR 0 3
24514: PPUSH
24515: LD_INT 1
24517: PPUSH
24518: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24522: LD_INT 57
24524: PPUSH
24525: LD_VAR 0 3
24529: PPUSH
24530: LD_INT 1
24532: PPUSH
24533: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24537: LD_INT 30
24539: PPUSH
24540: LD_VAR 0 3
24544: PPUSH
24545: LD_INT 1
24547: PPUSH
24548: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24552: LD_INT 37
24554: PPUSH
24555: LD_VAR 0 3
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24567: LD_INT 63
24569: PPUSH
24570: LD_VAR 0 3
24574: PPUSH
24575: LD_INT 1
24577: PPUSH
24578: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24582: LD_INT 3
24584: PPUSH
24585: LD_VAR 0 3
24589: PPUSH
24590: LD_INT 1
24592: PPUSH
24593: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24597: LD_INT 4
24599: PPUSH
24600: LD_VAR 0 3
24604: PPUSH
24605: LD_INT 1
24607: PPUSH
24608: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24612: LD_INT 5
24614: PPUSH
24615: LD_VAR 0 3
24619: PPUSH
24620: LD_INT 1
24622: PPUSH
24623: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24627: LD_INT 66
24629: PPUSH
24630: LD_VAR 0 3
24634: PPUSH
24635: LD_INT 1
24637: PPUSH
24638: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24642: LD_INT 21
24644: PPUSH
24645: LD_VAR 0 3
24649: PPUSH
24650: LD_INT 1
24652: PPUSH
24653: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24657: LD_INT 22
24659: PPUSH
24660: LD_VAR 0 3
24664: PPUSH
24665: LD_INT 1
24667: PPUSH
24668: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24672: LD_INT 19
24674: PPUSH
24675: LD_VAR 0 3
24679: PPUSH
24680: LD_INT 1
24682: PPUSH
24683: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24687: LD_INT 54
24689: PPUSH
24690: LD_VAR 0 3
24694: PPUSH
24695: LD_INT 1
24697: PPUSH
24698: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24702: LD_INT 55
24704: PPUSH
24705: LD_VAR 0 3
24709: PPUSH
24710: LD_INT 1
24712: PPUSH
24713: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
24717: LD_INT 0
24719: PPUSH
24720: LD_VAR 0 3
24724: PPUSH
24725: LD_INT 1
24727: PPUSH
24728: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
24732: LD_INT 1
24734: PPUSH
24735: LD_VAR 0 3
24739: PPUSH
24740: LD_INT 1
24742: PPUSH
24743: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24747: LD_INT 2
24749: PPUSH
24750: LD_VAR 0 3
24754: PPUSH
24755: LD_INT 1
24757: PPUSH
24758: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24762: LD_INT 3
24764: PPUSH
24765: LD_VAR 0 3
24769: PPUSH
24770: LD_INT 1
24772: PPUSH
24773: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24777: LD_INT 4
24779: PPUSH
24780: LD_VAR 0 3
24784: PPUSH
24785: LD_INT 1
24787: PPUSH
24788: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24792: LD_INT 5
24794: PPUSH
24795: LD_VAR 0 3
24799: PPUSH
24800: LD_INT 1
24802: PPUSH
24803: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24807: LD_INT 6
24809: PPUSH
24810: LD_VAR 0 3
24814: PPUSH
24815: LD_INT 1
24817: PPUSH
24818: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24822: LD_INT 7
24824: PPUSH
24825: LD_VAR 0 3
24829: PPUSH
24830: LD_INT 1
24832: PPUSH
24833: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24837: LD_INT 8
24839: PPUSH
24840: LD_VAR 0 3
24844: PPUSH
24845: LD_INT 1
24847: PPUSH
24848: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24852: LD_INT 10
24854: PPUSH
24855: LD_VAR 0 3
24859: PPUSH
24860: LD_INT 1
24862: PPUSH
24863: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24867: LD_INT 11
24869: PPUSH
24870: LD_VAR 0 3
24874: PPUSH
24875: LD_INT 1
24877: PPUSH
24878: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24882: LD_INT 12
24884: PPUSH
24885: LD_VAR 0 3
24889: PPUSH
24890: LD_INT 1
24892: PPUSH
24893: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24897: LD_INT 13
24899: PPUSH
24900: LD_VAR 0 3
24904: PPUSH
24905: LD_INT 1
24907: PPUSH
24908: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24912: LD_INT 14
24914: PPUSH
24915: LD_VAR 0 3
24919: PPUSH
24920: LD_INT 1
24922: PPUSH
24923: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24927: LD_INT 15
24929: PPUSH
24930: LD_VAR 0 3
24934: PPUSH
24935: LD_INT 1
24937: PPUSH
24938: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24942: LD_INT 16
24944: PPUSH
24945: LD_VAR 0 3
24949: PPUSH
24950: LD_INT 1
24952: PPUSH
24953: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24957: LD_INT 17
24959: PPUSH
24960: LD_VAR 0 3
24964: PPUSH
24965: LD_INT 1
24967: PPUSH
24968: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24972: LD_INT 18
24974: PPUSH
24975: LD_VAR 0 3
24979: PPUSH
24980: LD_INT 1
24982: PPUSH
24983: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
24987: LD_INT 19
24989: PPUSH
24990: LD_VAR 0 3
24994: PPUSH
24995: LD_INT 1
24997: PPUSH
24998: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
25002: LD_INT 20
25004: PPUSH
25005: LD_VAR 0 3
25009: PPUSH
25010: LD_INT 1
25012: PPUSH
25013: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
25017: LD_INT 21
25019: PPUSH
25020: LD_VAR 0 3
25024: PPUSH
25025: LD_INT 1
25027: PPUSH
25028: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
25032: LD_INT 23
25034: PPUSH
25035: LD_VAR 0 3
25039: PPUSH
25040: LD_INT 1
25042: PPUSH
25043: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
25047: LD_INT 26
25049: PPUSH
25050: LD_VAR 0 3
25054: PPUSH
25055: LD_INT 1
25057: PPUSH
25058: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
25062: LD_INT 27
25064: PPUSH
25065: LD_VAR 0 3
25069: PPUSH
25070: LD_INT 1
25072: PPUSH
25073: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
25077: LD_INT 28
25079: PPUSH
25080: LD_VAR 0 3
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
25092: LD_INT 29
25094: PPUSH
25095: LD_VAR 0 3
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
25107: LD_INT 30
25109: PPUSH
25110: LD_VAR 0 3
25114: PPUSH
25115: LD_INT 1
25117: PPUSH
25118: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
25122: LD_INT 31
25124: PPUSH
25125: LD_VAR 0 3
25129: PPUSH
25130: LD_INT 1
25132: PPUSH
25133: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
25137: LD_INT 32
25139: PPUSH
25140: LD_VAR 0 3
25144: PPUSH
25145: LD_INT 1
25147: PPUSH
25148: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
25152: LD_INT 33
25154: PPUSH
25155: LD_VAR 0 3
25159: PPUSH
25160: LD_INT 1
25162: PPUSH
25163: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
25167: LD_INT 36
25169: PPUSH
25170: LD_VAR 0 3
25174: PPUSH
25175: LD_INT 1
25177: PPUSH
25178: CALL_OW 324
// end ; 6 :
25182: GO 26192
25184: LD_INT 6
25186: DOUBLE
25187: EQUAL
25188: IFTRUE 25192
25190: GO 26117
25192: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
25193: LD_INT 35
25195: PPUSH
25196: LD_VAR 0 3
25200: PPUSH
25201: LD_INT 1
25203: PPUSH
25204: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
25208: LD_INT 45
25210: PPUSH
25211: LD_VAR 0 3
25215: PPUSH
25216: LD_INT 1
25218: PPUSH
25219: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
25223: LD_INT 46
25225: PPUSH
25226: LD_VAR 0 3
25230: PPUSH
25231: LD_INT 1
25233: PPUSH
25234: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
25238: LD_INT 47
25240: PPUSH
25241: LD_VAR 0 3
25245: PPUSH
25246: LD_INT 1
25248: PPUSH
25249: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
25253: LD_INT 1
25255: PPUSH
25256: LD_VAR 0 3
25260: PPUSH
25261: LD_INT 1
25263: PPUSH
25264: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
25268: LD_INT 2
25270: PPUSH
25271: LD_VAR 0 3
25275: PPUSH
25276: LD_INT 1
25278: PPUSH
25279: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
25283: LD_INT 11
25285: PPUSH
25286: LD_VAR 0 3
25290: PPUSH
25291: LD_INT 1
25293: PPUSH
25294: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
25298: LD_INT 20
25300: PPUSH
25301: LD_VAR 0 3
25305: PPUSH
25306: LD_INT 1
25308: PPUSH
25309: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
25313: LD_INT 48
25315: PPUSH
25316: LD_VAR 0 3
25320: PPUSH
25321: LD_INT 1
25323: PPUSH
25324: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
25328: LD_INT 49
25330: PPUSH
25331: LD_VAR 0 3
25335: PPUSH
25336: LD_INT 1
25338: PPUSH
25339: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
25343: LD_INT 50
25345: PPUSH
25346: LD_VAR 0 3
25350: PPUSH
25351: LD_INT 1
25353: PPUSH
25354: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
25358: LD_INT 69
25360: PPUSH
25361: LD_VAR 0 3
25365: PPUSH
25366: LD_INT 1
25368: PPUSH
25369: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
25373: LD_INT 39
25375: PPUSH
25376: LD_VAR 0 3
25380: PPUSH
25381: LD_INT 1
25383: PPUSH
25384: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
25388: LD_INT 34
25390: PPUSH
25391: LD_VAR 0 3
25395: PPUSH
25396: LD_INT 1
25398: PPUSH
25399: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
25403: LD_INT 42
25405: PPUSH
25406: LD_VAR 0 3
25410: PPUSH
25411: LD_INT 1
25413: PPUSH
25414: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
25418: LD_INT 44
25420: PPUSH
25421: LD_VAR 0 3
25425: PPUSH
25426: LD_INT 1
25428: PPUSH
25429: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
25433: LD_INT 41
25435: PPUSH
25436: LD_VAR 0 3
25440: PPUSH
25441: LD_INT 1
25443: PPUSH
25444: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
25448: LD_INT 13
25450: PPUSH
25451: LD_VAR 0 3
25455: PPUSH
25456: LD_INT 1
25458: PPUSH
25459: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
25463: LD_INT 40
25465: PPUSH
25466: LD_VAR 0 3
25470: PPUSH
25471: LD_INT 1
25473: PPUSH
25474: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
25478: LD_INT 43
25480: PPUSH
25481: LD_VAR 0 3
25485: PPUSH
25486: LD_INT 1
25488: PPUSH
25489: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
25493: LD_INT 70
25495: PPUSH
25496: LD_VAR 0 3
25500: PPUSH
25501: LD_INT 1
25503: PPUSH
25504: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
25508: LD_INT 23
25510: PPUSH
25511: LD_VAR 0 3
25515: PPUSH
25516: LD_INT 1
25518: PPUSH
25519: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
25523: LD_INT 51
25525: PPUSH
25526: LD_VAR 0 3
25530: PPUSH
25531: LD_INT 1
25533: PPUSH
25534: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
25538: LD_INT 52
25540: PPUSH
25541: LD_VAR 0 3
25545: PPUSH
25546: LD_INT 1
25548: PPUSH
25549: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
25553: LD_INT 6
25555: PPUSH
25556: LD_VAR 0 3
25560: PPUSH
25561: LD_INT 1
25563: PPUSH
25564: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
25568: LD_INT 15
25570: PPUSH
25571: LD_VAR 0 3
25575: PPUSH
25576: LD_INT 1
25578: PPUSH
25579: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
25583: LD_INT 7
25585: PPUSH
25586: LD_VAR 0 3
25590: PPUSH
25591: LD_INT 1
25593: PPUSH
25594: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
25598: LD_INT 12
25600: PPUSH
25601: LD_VAR 0 3
25605: PPUSH
25606: LD_INT 1
25608: PPUSH
25609: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
25613: LD_INT 10
25615: PPUSH
25616: LD_VAR 0 3
25620: PPUSH
25621: LD_INT 1
25623: PPUSH
25624: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
25628: LD_INT 17
25630: PPUSH
25631: LD_VAR 0 3
25635: PPUSH
25636: LD_INT 1
25638: PPUSH
25639: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
25643: LD_INT 18
25645: PPUSH
25646: LD_VAR 0 3
25650: PPUSH
25651: LD_INT 1
25653: PPUSH
25654: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
25658: LD_INT 60
25660: PPUSH
25661: LD_VAR 0 3
25665: PPUSH
25666: LD_INT 1
25668: PPUSH
25669: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
25673: LD_INT 61
25675: PPUSH
25676: LD_VAR 0 3
25680: PPUSH
25681: LD_INT 1
25683: PPUSH
25684: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
25688: LD_INT 32
25690: PPUSH
25691: LD_VAR 0 3
25695: PPUSH
25696: LD_INT 1
25698: PPUSH
25699: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
25703: LD_INT 27
25705: PPUSH
25706: LD_VAR 0 3
25710: PPUSH
25711: LD_INT 1
25713: PPUSH
25714: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
25718: LD_INT 36
25720: PPUSH
25721: LD_VAR 0 3
25725: PPUSH
25726: LD_INT 1
25728: PPUSH
25729: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
25733: LD_INT 33
25735: PPUSH
25736: LD_VAR 0 3
25740: PPUSH
25741: LD_INT 1
25743: PPUSH
25744: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25748: LD_INT 9
25750: PPUSH
25751: LD_VAR 0 3
25755: PPUSH
25756: LD_INT 1
25758: PPUSH
25759: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25763: LD_INT 38
25765: PPUSH
25766: LD_VAR 0 3
25770: PPUSH
25771: LD_INT 1
25773: PPUSH
25774: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25778: LD_INT 57
25780: PPUSH
25781: LD_VAR 0 3
25785: PPUSH
25786: LD_INT 1
25788: PPUSH
25789: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25793: LD_INT 58
25795: PPUSH
25796: LD_VAR 0 3
25800: PPUSH
25801: LD_INT 1
25803: PPUSH
25804: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25808: LD_INT 28
25810: PPUSH
25811: LD_VAR 0 3
25815: PPUSH
25816: LD_INT 1
25818: PPUSH
25819: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25823: LD_INT 29
25825: PPUSH
25826: LD_VAR 0 3
25830: PPUSH
25831: LD_INT 1
25833: PPUSH
25834: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25838: LD_INT 30
25840: PPUSH
25841: LD_VAR 0 3
25845: PPUSH
25846: LD_INT 1
25848: PPUSH
25849: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25853: LD_INT 37
25855: PPUSH
25856: LD_VAR 0 3
25860: PPUSH
25861: LD_INT 1
25863: PPUSH
25864: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25868: LD_INT 63
25870: PPUSH
25871: LD_VAR 0 3
25875: PPUSH
25876: LD_INT 1
25878: PPUSH
25879: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25883: LD_INT 64
25885: PPUSH
25886: LD_VAR 0 3
25890: PPUSH
25891: LD_INT 1
25893: PPUSH
25894: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25898: LD_INT 3
25900: PPUSH
25901: LD_VAR 0 3
25905: PPUSH
25906: LD_INT 1
25908: PPUSH
25909: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25913: LD_INT 4
25915: PPUSH
25916: LD_VAR 0 3
25920: PPUSH
25921: LD_INT 1
25923: PPUSH
25924: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25928: LD_INT 5
25930: PPUSH
25931: LD_VAR 0 3
25935: PPUSH
25936: LD_INT 1
25938: PPUSH
25939: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25943: LD_INT 8
25945: PPUSH
25946: LD_VAR 0 3
25950: PPUSH
25951: LD_INT 1
25953: PPUSH
25954: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25958: LD_INT 66
25960: PPUSH
25961: LD_VAR 0 3
25965: PPUSH
25966: LD_INT 1
25968: PPUSH
25969: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25973: LD_INT 67
25975: PPUSH
25976: LD_VAR 0 3
25980: PPUSH
25981: LD_INT 1
25983: PPUSH
25984: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
25988: LD_INT 21
25990: PPUSH
25991: LD_VAR 0 3
25995: PPUSH
25996: LD_INT 1
25998: PPUSH
25999: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
26003: LD_INT 22
26005: PPUSH
26006: LD_VAR 0 3
26010: PPUSH
26011: LD_INT 1
26013: PPUSH
26014: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
26018: LD_INT 19
26020: PPUSH
26021: LD_VAR 0 3
26025: PPUSH
26026: LD_INT 1
26028: PPUSH
26029: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
26033: LD_INT 26
26035: PPUSH
26036: LD_VAR 0 3
26040: PPUSH
26041: LD_INT 1
26043: PPUSH
26044: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
26048: LD_INT 54
26050: PPUSH
26051: LD_VAR 0 3
26055: PPUSH
26056: LD_INT 1
26058: PPUSH
26059: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
26063: LD_INT 55
26065: PPUSH
26066: LD_VAR 0 3
26070: PPUSH
26071: LD_INT 1
26073: PPUSH
26074: CALL_OW 322
// for i = 0 to 39 do
26078: LD_ADDR_VAR 0 4
26082: PUSH
26083: DOUBLE
26084: LD_INT 0
26086: DEC
26087: ST_TO_ADDR
26088: LD_INT 39
26090: PUSH
26091: FOR_TO
26092: IFFALSE 26113
// SetRestrict ( i , side , true ) ;
26094: LD_VAR 0 4
26098: PPUSH
26099: LD_VAR 0 3
26103: PPUSH
26104: LD_INT 1
26106: PPUSH
26107: CALL_OW 324
26111: GO 26091
26113: POP
26114: POP
// end ; else
26115: GO 26192
26117: POP
// begin for i = 1 to 73 do
26118: LD_ADDR_VAR 0 4
26122: PUSH
26123: DOUBLE
26124: LD_INT 1
26126: DEC
26127: ST_TO_ADDR
26128: LD_INT 73
26130: PUSH
26131: FOR_TO
26132: IFFALSE 26153
// SetTech ( i , side , state_enabled ) ;
26134: LD_VAR 0 4
26138: PPUSH
26139: LD_VAR 0 3
26143: PPUSH
26144: LD_INT 1
26146: PPUSH
26147: CALL_OW 322
26151: GO 26131
26153: POP
26154: POP
// for i = 0 to 39 do
26155: LD_ADDR_VAR 0 4
26159: PUSH
26160: DOUBLE
26161: LD_INT 0
26163: DEC
26164: ST_TO_ADDR
26165: LD_INT 39
26167: PUSH
26168: FOR_TO
26169: IFFALSE 26190
// SetRestrict ( i , side , true ) ;
26171: LD_VAR 0 4
26175: PPUSH
26176: LD_VAR 0 3
26180: PPUSH
26181: LD_INT 1
26183: PPUSH
26184: CALL_OW 324
26188: GO 26168
26190: POP
26191: POP
// end ; end ; end ;
26192: GO 22197
26194: POP
26195: POP
// end ; end_of_file
26196: LD_VAR 0 2
26200: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
26201: LD_INT 0
26203: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
26204: LD_VAR 0 1
26208: PPUSH
26209: LD_VAR 0 2
26213: PPUSH
26214: LD_VAR 0 3
26218: PPUSH
26219: LD_INT 0
26221: PPUSH
26222: CALL 26231 0 4
// end ;
26226: LD_VAR 0 4
26230: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
26231: LD_INT 0
26233: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
26234: LD_STRING initScore({
26236: PUSH
26237: LD_VAR 0 1
26241: PUSH
26242: LD_INT 1
26244: ARRAY
26245: STR
26246: PUSH
26247: LD_STRING ,
26249: STR
26250: PUSH
26251: LD_VAR 0 1
26255: PUSH
26256: LD_INT 2
26258: ARRAY
26259: STR
26260: PUSH
26261: LD_STRING ,
26263: STR
26264: PUSH
26265: LD_VAR 0 1
26269: PUSH
26270: LD_INT 3
26272: ARRAY
26273: STR
26274: PUSH
26275: LD_STRING ,
26277: STR
26278: PUSH
26279: LD_VAR 0 1
26283: PUSH
26284: LD_INT 4
26286: ARRAY
26287: STR
26288: PUSH
26289: LD_STRING ,
26291: STR
26292: PUSH
26293: LD_VAR 0 1
26297: PUSH
26298: LD_INT 5
26300: ARRAY
26301: STR
26302: PUSH
26303: LD_STRING ,
26305: STR
26306: PUSH
26307: LD_VAR 0 1
26311: PUSH
26312: LD_INT 6
26314: ARRAY
26315: STR
26316: PUSH
26317: LD_STRING ,
26319: STR
26320: PUSH
26321: LD_VAR 0 1
26325: PUSH
26326: LD_INT 7
26328: ARRAY
26329: STR
26330: PUSH
26331: LD_STRING ,
26333: STR
26334: PUSH
26335: LD_VAR 0 1
26339: PUSH
26340: LD_INT 8
26342: ARRAY
26343: STR
26344: PUSH
26345: LD_STRING },
26347: STR
26348: PUSH
26349: LD_VAR 0 2
26353: STR
26354: PUSH
26355: LD_STRING ,
26357: STR
26358: PUSH
26359: LD_VAR 0 3
26363: STR
26364: PUSH
26365: LD_STRING ,
26367: STR
26368: PUSH
26369: LD_VAR 0 4
26373: STR
26374: PUSH
26375: LD_STRING );
26377: STR
26378: PPUSH
26379: CALL_OW 559
// end ;
26383: LD_VAR 0 5
26387: RET
// export function LScore_Reset ( ) ; begin
26388: LD_INT 0
26390: PPUSH
// ToLua ( ResetScorebar(); ) ;
26391: LD_STRING ResetScorebar();
26393: PPUSH
26394: CALL_OW 559
// end ;
26398: LD_VAR 0 1
26402: RET
// export function LScore_Delete ( ID ) ; begin
26403: LD_INT 0
26405: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
26406: LD_STRING deleteScore(
26408: PUSH
26409: LD_VAR 0 1
26413: STR
26414: PUSH
26415: LD_STRING );
26417: STR
26418: PPUSH
26419: CALL_OW 559
// end ;
26423: LD_VAR 0 2
26427: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
26428: LD_INT 0
26430: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
26431: LD_STRING AST(
26433: PUSH
26434: LD_VAR 0 1
26438: STR
26439: PUSH
26440: LD_STRING ,
26442: STR
26443: PUSH
26444: LD_VAR 0 2
26448: STR
26449: PUSH
26450: LD_STRING ,
26452: STR
26453: PUSH
26454: LD_VAR 0 3
26458: STR
26459: PUSH
26460: LD_STRING ,);
26462: STR
26463: PPUSH
26464: CALL_OW 559
// end ;
26468: LD_VAR 0 4
26472: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
26473: LD_INT 0
26475: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
26476: LD_STRING AST(
26478: PUSH
26479: LD_VAR 0 1
26483: STR
26484: PUSH
26485: LD_STRING ,
26487: STR
26488: PUSH
26489: LD_VAR 0 2
26493: STR
26494: PUSH
26495: LD_STRING ,
26497: STR
26498: PUSH
26499: LD_VAR 0 3
26503: STR
26504: PUSH
26505: LD_STRING ,
26507: STR
26508: PUSH
26509: LD_VAR 0 4
26513: STR
26514: PUSH
26515: LD_STRING );
26517: STR
26518: PPUSH
26519: CALL_OW 559
// end ;
26523: LD_VAR 0 5
26527: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
26528: LD_INT 0
26530: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
26531: LD_STRING AST(
26533: PUSH
26534: LD_VAR 0 1
26538: STR
26539: PUSH
26540: LD_STRING ,
26542: STR
26543: PUSH
26544: LD_VAR 0 2
26548: STR
26549: PUSH
26550: LD_STRING ,
26552: STR
26553: PUSH
26554: LD_VAR 0 3
26558: STR
26559: PUSH
26560: LD_STRING ,
26562: STR
26563: PUSH
26564: LD_VAR 0 4
26568: STR
26569: PUSH
26570: LD_STRING ,
26572: STR
26573: PUSH
26574: LD_VAR 0 5
26578: STR
26579: PUSH
26580: LD_STRING );
26582: STR
26583: PPUSH
26584: CALL_OW 559
// end ;
26588: LD_VAR 0 6
26592: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
26593: LD_INT 0
26595: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
26596: LD_STRING ASRT(
26598: PUSH
26599: LD_VAR 0 1
26603: STR
26604: PUSH
26605: LD_STRING ,
26607: STR
26608: PUSH
26609: LD_VAR 0 2
26613: STR
26614: PUSH
26615: LD_STRING ,
26617: STR
26618: PUSH
26619: LD_VAR 0 3
26623: STR
26624: PUSH
26625: LD_STRING ,);
26627: STR
26628: PPUSH
26629: CALL_OW 559
// end ;
26633: LD_VAR 0 4
26637: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
26638: LD_INT 0
26640: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
26641: LD_STRING ASRT(
26643: PUSH
26644: LD_VAR 0 1
26648: STR
26649: PUSH
26650: LD_STRING ,
26652: STR
26653: PUSH
26654: LD_VAR 0 2
26658: STR
26659: PUSH
26660: LD_STRING ,
26662: STR
26663: PUSH
26664: LD_VAR 0 3
26668: STR
26669: PUSH
26670: LD_STRING ,
26672: STR
26673: PUSH
26674: LD_VAR 0 4
26678: STR
26679: PUSH
26680: LD_STRING );
26682: STR
26683: PPUSH
26684: CALL_OW 559
// end ;
26688: LD_VAR 0 5
26692: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
26693: LD_INT 0
26695: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
26696: LD_STRING ASRT(
26698: PUSH
26699: LD_VAR 0 1
26703: STR
26704: PUSH
26705: LD_STRING ,
26707: STR
26708: PUSH
26709: LD_VAR 0 2
26713: STR
26714: PUSH
26715: LD_STRING ,
26717: STR
26718: PUSH
26719: LD_VAR 0 3
26723: STR
26724: PUSH
26725: LD_STRING ,
26727: STR
26728: PUSH
26729: LD_VAR 0 4
26733: STR
26734: PUSH
26735: LD_STRING ,
26737: STR
26738: PUSH
26739: LD_VAR 0 5
26743: STR
26744: PUSH
26745: LD_STRING );
26747: STR
26748: PPUSH
26749: CALL_OW 559
// end ;
26753: LD_VAR 0 6
26757: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
26758: LD_INT 0
26760: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
26761: LD_STRING UST(
26763: PUSH
26764: LD_VAR 0 1
26768: STR
26769: PUSH
26770: LD_STRING ,
26772: STR
26773: PUSH
26774: LD_VAR 0 2
26778: STR
26779: PUSH
26780: LD_STRING );
26782: STR
26783: PPUSH
26784: CALL_OW 559
// end ;
26788: LD_VAR 0 3
26792: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
26793: LD_INT 0
26795: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
26796: LD_STRING UST(
26798: PUSH
26799: LD_VAR 0 1
26803: STR
26804: PUSH
26805: LD_STRING ,
26807: STR
26808: PUSH
26809: LD_VAR 0 2
26813: STR
26814: PUSH
26815: LD_STRING ,
26817: STR
26818: PUSH
26819: LD_VAR 0 3
26823: STR
26824: PUSH
26825: LD_STRING );
26827: STR
26828: PPUSH
26829: CALL_OW 559
// end ;
26833: LD_VAR 0 4
26837: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
26838: LD_INT 0
26840: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
26841: LD_STRING CCST(
26843: PUSH
26844: LD_VAR 0 1
26848: STR
26849: PUSH
26850: LD_STRING ,{
26852: STR
26853: PUSH
26854: LD_VAR 0 2
26858: STR
26859: PUSH
26860: LD_STRING ,
26862: STR
26863: PUSH
26864: LD_VAR 0 3
26868: STR
26869: PUSH
26870: LD_STRING ,
26872: STR
26873: PUSH
26874: LD_VAR 0 4
26878: STR
26879: PUSH
26880: LD_STRING });
26882: STR
26883: PPUSH
26884: CALL_OW 559
// end ;
26888: LD_VAR 0 5
26892: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
26893: LD_INT 0
26895: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
26896: LD_STRING CCST(
26898: PUSH
26899: LD_VAR 0 1
26903: STR
26904: PUSH
26905: LD_STRING ,
26907: STR
26908: PUSH
26909: LD_VAR 0 2
26913: STR
26914: PUSH
26915: LD_STRING );
26917: STR
26918: PPUSH
26919: CALL_OW 559
// end ;
26923: LD_VAR 0 3
26927: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
26928: LD_INT 0
26930: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
26931: LD_STRING ASSP(
26933: PUSH
26934: LD_VAR 0 1
26938: STR
26939: PUSH
26940: LD_STRING ,
26942: STR
26943: PUSH
26944: LD_VAR 0 2
26948: STR
26949: PUSH
26950: LD_STRING ,
26952: STR
26953: PUSH
26954: LD_VAR 0 3
26958: STR
26959: PUSH
26960: LD_STRING ,);
26962: STR
26963: PPUSH
26964: CALL_OW 559
// end ;
26968: LD_VAR 0 4
26972: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
26973: LD_INT 0
26975: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
26976: LD_STRING ASSP(
26978: PUSH
26979: LD_VAR 0 1
26983: STR
26984: PUSH
26985: LD_STRING ,
26987: STR
26988: PUSH
26989: LD_VAR 0 2
26993: STR
26994: PUSH
26995: LD_STRING ,
26997: STR
26998: PUSH
26999: LD_VAR 0 3
27003: STR
27004: PUSH
27005: LD_STRING ,
27007: STR
27008: PUSH
27009: LD_VAR 0 4
27013: STR
27014: PUSH
27015: LD_STRING );
27017: STR
27018: PPUSH
27019: CALL_OW 559
// end ;
27023: LD_VAR 0 5
27027: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
27028: LD_INT 0
27030: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
27031: LD_STRING ASSP(
27033: PUSH
27034: LD_VAR 0 1
27038: STR
27039: PUSH
27040: LD_STRING ,
27042: STR
27043: PUSH
27044: LD_VAR 0 2
27048: STR
27049: PUSH
27050: LD_STRING ,
27052: STR
27053: PUSH
27054: LD_VAR 0 3
27058: STR
27059: PUSH
27060: LD_STRING ,
27062: STR
27063: PUSH
27064: LD_VAR 0 4
27068: STR
27069: PUSH
27070: LD_STRING ,
27072: STR
27073: PUSH
27074: LD_VAR 0 5
27078: STR
27079: PUSH
27080: LD_STRING );
27082: STR
27083: PPUSH
27084: CALL_OW 559
// end ;
27088: LD_VAR 0 6
27092: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
27093: LD_INT 0
27095: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
27096: LD_STRING ASRSP(
27098: PUSH
27099: LD_VAR 0 1
27103: STR
27104: PUSH
27105: LD_STRING ,
27107: STR
27108: PUSH
27109: LD_VAR 0 2
27113: STR
27114: PUSH
27115: LD_STRING ,
27117: STR
27118: PUSH
27119: LD_VAR 0 3
27123: STR
27124: PUSH
27125: LD_STRING ,);
27127: STR
27128: PPUSH
27129: CALL_OW 559
// end ;
27133: LD_VAR 0 4
27137: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
27138: LD_INT 0
27140: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
27141: LD_STRING ASRSP(
27143: PUSH
27144: LD_VAR 0 1
27148: STR
27149: PUSH
27150: LD_STRING ,
27152: STR
27153: PUSH
27154: LD_VAR 0 2
27158: STR
27159: PUSH
27160: LD_STRING ,
27162: STR
27163: PUSH
27164: LD_VAR 0 3
27168: STR
27169: PUSH
27170: LD_STRING ,
27172: STR
27173: PUSH
27174: LD_VAR 0 4
27178: STR
27179: PUSH
27180: LD_STRING );
27182: STR
27183: PPUSH
27184: CALL_OW 559
// end ;
27188: LD_VAR 0 5
27192: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
27193: LD_INT 0
27195: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
27196: LD_STRING ASRSP(
27198: PUSH
27199: LD_VAR 0 1
27203: STR
27204: PUSH
27205: LD_STRING ,
27207: STR
27208: PUSH
27209: LD_VAR 0 2
27213: STR
27214: PUSH
27215: LD_STRING ,
27217: STR
27218: PUSH
27219: LD_VAR 0 3
27223: STR
27224: PUSH
27225: LD_STRING ,
27227: STR
27228: PUSH
27229: LD_VAR 0 4
27233: STR
27234: PUSH
27235: LD_STRING ,
27237: STR
27238: PUSH
27239: LD_VAR 0 5
27243: STR
27244: PUSH
27245: LD_STRING );
27247: STR
27248: PPUSH
27249: CALL_OW 559
// end ;
27253: LD_VAR 0 6
27257: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
27258: LD_INT 0
27260: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
27261: LD_STRING USSP(
27263: PUSH
27264: LD_VAR 0 1
27268: STR
27269: PUSH
27270: LD_STRING ,
27272: STR
27273: PUSH
27274: LD_VAR 0 2
27278: STR
27279: PUSH
27280: LD_STRING );
27282: STR
27283: PPUSH
27284: CALL_OW 559
// end ;
27288: LD_VAR 0 3
27292: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
27293: LD_INT 0
27295: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
27296: LD_STRING USSP(
27298: PUSH
27299: LD_VAR 0 1
27303: STR
27304: PUSH
27305: LD_STRING ,
27307: STR
27308: PUSH
27309: LD_VAR 0 2
27313: STR
27314: PUSH
27315: LD_STRING ,
27317: STR
27318: PUSH
27319: LD_VAR 0 3
27323: STR
27324: PUSH
27325: LD_STRING );
27327: STR
27328: PPUSH
27329: CALL_OW 559
// end ;
27333: LD_VAR 0 4
27337: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
27338: LD_INT 0
27340: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
27341: LD_STRING CCSSP(
27343: PUSH
27344: LD_VAR 0 1
27348: STR
27349: PUSH
27350: LD_STRING ,{
27352: STR
27353: PUSH
27354: LD_VAR 0 2
27358: STR
27359: PUSH
27360: LD_STRING ,
27362: STR
27363: PUSH
27364: LD_VAR 0 3
27368: STR
27369: PUSH
27370: LD_STRING ,
27372: STR
27373: PUSH
27374: LD_VAR 0 4
27378: STR
27379: PUSH
27380: LD_STRING });
27382: STR
27383: PPUSH
27384: CALL_OW 559
// end ;
27388: LD_VAR 0 5
27392: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
27393: LD_INT 0
27395: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
27396: LD_STRING CCSSP(
27398: PUSH
27399: LD_VAR 0 1
27403: STR
27404: PUSH
27405: LD_STRING ,
27407: STR
27408: PUSH
27409: LD_VAR 0 2
27413: STR
27414: PUSH
27415: LD_STRING );
27417: STR
27418: PPUSH
27419: CALL_OW 559
// end ;
27423: LD_VAR 0 3
27427: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
27428: LD_INT 0
27430: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
27431: LD_STRING ASP(
27433: PUSH
27434: LD_VAR 0 1
27438: STR
27439: PUSH
27440: LD_STRING ,
27442: STR
27443: PUSH
27444: LD_VAR 0 2
27448: STR
27449: PUSH
27450: LD_STRING ,
27452: STR
27453: PUSH
27454: LD_VAR 0 3
27458: STR
27459: PUSH
27460: LD_STRING );
27462: STR
27463: PPUSH
27464: CALL_OW 559
// end ;
27468: LD_VAR 0 4
27472: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
27473: LD_INT 0
27475: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
27476: LD_STRING USP(
27478: PUSH
27479: LD_VAR 0 1
27483: STR
27484: PUSH
27485: LD_STRING ,
27487: STR
27488: PUSH
27489: LD_VAR 0 2
27493: STR
27494: PUSH
27495: LD_STRING ,
27497: STR
27498: PUSH
27499: LD_VAR 0 3
27503: STR
27504: PUSH
27505: LD_STRING );
27507: STR
27508: PPUSH
27509: CALL_OW 559
// end ;
27513: LD_VAR 0 4
27517: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
27518: LD_INT 0
27520: PPUSH
27521: PPUSH
// for i = 1 to 8 do
27522: LD_ADDR_VAR 0 4
27526: PUSH
27527: DOUBLE
27528: LD_INT 1
27530: DEC
27531: ST_TO_ADDR
27532: LD_INT 8
27534: PUSH
27535: FOR_TO
27536: IFFALSE 27583
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
27538: LD_STRING USP(
27540: PUSH
27541: LD_VAR 0 1
27545: STR
27546: PUSH
27547: LD_STRING ,
27549: STR
27550: PUSH
27551: LD_VAR 0 4
27555: STR
27556: PUSH
27557: LD_STRING ,
27559: STR
27560: PUSH
27561: LD_VAR 0 2
27565: PUSH
27566: LD_VAR 0 4
27570: ARRAY
27571: STR
27572: PUSH
27573: LD_STRING );
27575: STR
27576: PPUSH
27577: CALL_OW 559
27581: GO 27535
27583: POP
27584: POP
// end ;
27585: LD_VAR 0 3
27589: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
27590: LD_INT 0
27592: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
27593: LD_STRING ASC(
27595: PUSH
27596: LD_VAR 0 1
27600: STR
27601: PUSH
27602: LD_STRING ,
27604: STR
27605: PUSH
27606: LD_VAR 0 2
27610: STR
27611: PUSH
27612: LD_STRING ,
27614: STR
27615: PUSH
27616: LD_VAR 0 3
27620: STR
27621: PUSH
27622: LD_STRING ,
27624: STR
27625: PUSH
27626: LD_VAR 0 4
27630: STR
27631: PUSH
27632: LD_STRING );
27634: STR
27635: PPUSH
27636: CALL_OW 559
// end ;
27640: LD_VAR 0 5
27644: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
27645: LD_INT 0
27647: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
27648: LD_STRING USC(
27650: PUSH
27651: LD_VAR 0 1
27655: STR
27656: PUSH
27657: LD_STRING ,{
27659: STR
27660: PUSH
27661: LD_VAR 0 2
27665: PUSH
27666: LD_INT 1
27668: ARRAY
27669: STR
27670: PUSH
27671: LD_STRING ,
27673: STR
27674: PUSH
27675: LD_VAR 0 2
27679: PUSH
27680: LD_INT 2
27682: ARRAY
27683: STR
27684: PUSH
27685: LD_STRING ,
27687: STR
27688: PUSH
27689: LD_VAR 0 2
27693: PUSH
27694: LD_INT 3
27696: ARRAY
27697: STR
27698: PUSH
27699: LD_STRING ,
27701: STR
27702: PUSH
27703: LD_VAR 0 2
27707: PUSH
27708: LD_INT 4
27710: ARRAY
27711: STR
27712: PUSH
27713: LD_STRING ,
27715: STR
27716: PUSH
27717: LD_VAR 0 2
27721: PUSH
27722: LD_INT 5
27724: ARRAY
27725: STR
27726: PUSH
27727: LD_STRING ,
27729: STR
27730: PUSH
27731: LD_VAR 0 2
27735: PUSH
27736: LD_INT 6
27738: ARRAY
27739: STR
27740: PUSH
27741: LD_STRING ,
27743: STR
27744: PUSH
27745: LD_VAR 0 2
27749: PUSH
27750: LD_INT 7
27752: ARRAY
27753: STR
27754: PUSH
27755: LD_STRING ,
27757: STR
27758: PUSH
27759: LD_VAR 0 2
27763: PUSH
27764: LD_INT 8
27766: ARRAY
27767: STR
27768: PUSH
27769: LD_STRING });
27771: STR
27772: PPUSH
27773: CALL_OW 559
// end ;
27777: LD_VAR 0 3
27781: RET
