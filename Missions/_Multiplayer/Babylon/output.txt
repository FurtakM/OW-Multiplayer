// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export Position_Sides ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 48
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 3 ;
 151: LD_ADDR_EXP 48
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// for i := 1 to 8 do
 356: LD_ADDR_VAR 0 2
 360: PUSH
 361: DOUBLE
 362: LD_INT 1
 364: DEC
 365: ST_TO_ADDR
 366: LD_INT 8
 368: PUSH
 369: FOR_TO
 370: IFFALSE 457
// if Multiplayer_GetPlayerIsSpec ( i ) then
 372: LD_VAR 0 2
 376: PPUSH
 377: CALL_OW 530
 381: IFFALSE 455
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 383: LD_ADDR_EXP 23
 387: PUSH
 388: LD_EXP 23
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: LD_INT 0
 400: PPUSH
 401: CALL_OW 1
 405: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 406: LD_ADDR_EXP 22
 410: PUSH
 411: LD_EXP 22
 415: PPUSH
 416: LD_EXP 21
 420: PUSH
 421: LD_VAR 0 2
 425: ARRAY
 426: PPUSH
 427: LD_EXP 22
 431: PUSH
 432: LD_EXP 21
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: ARRAY
 443: PUSH
 444: LD_VAR 0 2
 448: DIFF
 449: PPUSH
 450: CALL_OW 1
 454: ST_TO_ADDR
// end ;
 455: GO 369
 457: POP
 458: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 459: LD_ADDR_EXP 29
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// for i := 1 to 8 do
 482: LD_ADDR_VAR 0 2
 486: PUSH
 487: DOUBLE
 488: LD_INT 1
 490: DEC
 491: ST_TO_ADDR
 492: LD_INT 8
 494: PUSH
 495: FOR_TO
 496: IFFALSE 543
// if Side_Positions [ i ] then
 498: LD_EXP 23
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: IFFALSE 541
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 510: LD_ADDR_EXP 29
 514: PUSH
 515: LD_EXP 29
 519: PPUSH
 520: LD_EXP 23
 524: PUSH
 525: LD_VAR 0 2
 529: ARRAY
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: CALL_OW 1
 540: ST_TO_ADDR
 541: GO 495
 543: POP
 544: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_EXP 21
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: EMPTY
 559: LIST
 560: DIFF
 561: PUSH
 562: LD_INT 1
 564: GREATER
 565: ST_TO_ADDR
// if Multiplayer then
 566: LD_OWVAR 4
 570: IFFALSE 842
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 572: LD_ADDR_EXP 50
 576: PUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 426
 584: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 585: LD_ADDR_EXP 51
 589: PUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 426
 597: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 598: LD_ADDR_EXP 52
 602: PUSH
 603: LD_INT 2
 605: PPUSH
 606: CALL_OW 426
 610: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 611: LD_ADDR_EXP 53
 615: PUSH
 616: LD_INT 3
 618: PPUSH
 619: CALL_OW 426
 623: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 624: LD_ADDR_EXP 54
 628: PUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 426
 636: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 637: LD_ADDR_EXP 55
 641: PUSH
 642: LD_INT 5
 644: PPUSH
 645: CALL_OW 426
 649: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 650: LD_ADDR_EXP 57
 654: PUSH
 655: LD_INT 10
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 663: LD_ADDR_EXP 58
 667: PUSH
 668: LD_INT 11
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 676: LD_ADDR_EXP 59
 680: PUSH
 681: LD_INT 12
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 689: LD_ADDR_EXP 61
 693: PUSH
 694: LD_INT 13
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 702: LD_ADDR_EXP 60
 706: PUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 715: LD_ADDR_EXP 62
 719: PUSH
 720: LD_INT 15
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 728: LD_ADDR_EXP 1
 732: PUSH
 733: LD_INT 6
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 741: LD_ADDR_EXP 2
 745: PUSH
 746: LD_INT 7
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 754: LD_ADDR_EXP 4
 758: PUSH
 759: LD_INT 8
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 767: LD_ADDR_EXP 3
 771: PUSH
 772: LD_INT 9
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 780: LD_ADDR_EXP 5
 784: PUSH
 785: LD_INT 16
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 17
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 806: LD_ADDR_EXP 63
 810: PUSH
 811: LD_INT 20
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 819: LD_ADDR_VAR 0 3
 823: PUSH
 824: LD_INT 22
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_win_rules = 0 ;
 832: LD_ADDR_EXP 19
 836: PUSH
 837: LD_INT 0
 839: ST_TO_ADDR
// end else
 840: GO 1014
// begin Randomize ;
 842: CALL_OW 10
// def_base_level := 2 ;
 846: LD_ADDR_EXP 50
 850: PUSH
 851: LD_INT 2
 853: ST_TO_ADDR
// def_amount_of_people := 1 ;
 854: LD_ADDR_EXP 51
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// def_skill_level := 1 ;
 862: LD_ADDR_EXP 52
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// def_starting_resources := 2 ;
 870: LD_ADDR_EXP 53
 874: PUSH
 875: LD_INT 2
 877: ST_TO_ADDR
// def_shipments_density := 1 ;
 878: LD_ADDR_EXP 54
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 886: LD_ADDR_EXP 55
 890: PUSH
 891: LD_INT 0
 893: ST_TO_ADDR
// def_shared_vision := 1 ;
 894: LD_ADDR_EXP 57
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// def_morale_flags := 1 ;
 902: LD_ADDR_EXP 58
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// def_siberite_detection := 1 ;
 910: LD_ADDR_EXP 59
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 918: LD_ADDR_EXP 61
 922: PUSH
 923: LD_INT 3
 925: ST_TO_ADDR
// def_people_respawning := 2 ;
 926: LD_ADDR_EXP 60
 930: PUSH
 931: LD_INT 2
 933: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 934: LD_ADDR_EXP 62
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// def_artefact_one := 1 ;
 942: LD_ADDR_EXP 1
 946: PUSH
 947: LD_INT 1
 949: ST_TO_ADDR
// def_artefact_two := 1 ;
 950: LD_ADDR_EXP 2
 954: PUSH
 955: LD_INT 1
 957: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 958: LD_ADDR_EXP 4
 962: PUSH
 963: LD_INT 2
 965: ST_TO_ADDR
// def_artefact_three := 1 ;
 966: LD_ADDR_EXP 3
 970: PUSH
 971: LD_INT 1
 973: ST_TO_ADDR
// def_kings_age := 1 ;
 974: LD_ADDR_EXP 5
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// def_public_score := 0 ;
 982: LD_ADDR_EXP 6
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// def_builduptime := 1 ;
 990: LD_ADDR_EXP 63
 994: PUSH
 995: LD_INT 1
 997: ST_TO_ADDR
// tech_level = 4 ;
 998: LD_ADDR_VAR 0 3
1002: PUSH
1003: LD_INT 4
1005: ST_TO_ADDR
// def_win_rules = 0 ;
1006: LD_ADDR_EXP 19
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// end ; InitGameRules ;
1014: CALL 14239 0 0
// if def_game_rules = 0 then
1018: LD_EXP 49
1022: PUSH
1023: LD_INT 0
1025: EQUAL
1026: IFFALSE 1053
// begin if isSGUI then
1028: LD_OWVAR 83
1032: IFFALSE 1040
// setMpTechs ( ) else
1034: CALL 22031 0 0
1038: GO 1053
// begin SetMpTechLevel ( tech_level + 1 ) ;
1040: LD_VAR 0 3
1044: PUSH
1045: LD_INT 1
1047: PLUS
1048: PPUSH
1049: CALL 22178 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1053: LD_ADDR_EXP 7
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 50
1080: PUSH
1081: LD_INT 1
1083: PLUS
1084: ARRAY
1085: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
1086: LD_ADDR_EXP 8
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 2
1099: PUSH
1100: LD_INT 3
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_EXP 50
1113: PUSH
1114: LD_INT 1
1116: PLUS
1117: ARRAY
1118: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1119: LD_ADDR_EXP 9
1123: PUSH
1124: LD_EXP 51
1128: PUSH
1129: LD_INT 4
1131: PLUS
1132: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: LD_INT 4
1146: PUSH
1147: LD_INT 5
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: PUSH
1156: LD_EXP 52
1160: PUSH
1161: LD_INT 1
1163: PLUS
1164: ARRAY
1165: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1166: LD_ADDR_EXP 12
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: LD_INT 0
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 30
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: LD_INT 0
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 50
1201: PUSH
1202: LD_INT 20
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 80
1215: PUSH
1216: LD_INT 40
1218: PUSH
1219: LD_INT 20
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: LD_EXP 53
1237: PUSH
1238: LD_INT 1
1240: PLUS
1241: ARRAY
1242: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1243: LD_ADDR_EXP 11
1247: PUSH
1248: LD_INT 10
1250: PUSH
1251: EMPTY
1252: LIST
1253: PUSH
1254: LD_INT 7
1256: PUSH
1257: LD_INT 14
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 6
1266: PUSH
1267: LD_INT 12
1269: PUSH
1270: LD_INT 18
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 5
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: LD_INT 15
1286: PUSH
1287: LD_INT 20
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_EXP 53
1306: PUSH
1307: LD_INT 1
1309: PLUS
1310: ARRAY
1311: ST_TO_ADDR
// shipments_density := 720 - ( def_shipments_density * 2 ) ;
1312: LD_ADDR_EXP 13
1316: PUSH
1317: LD_INT 720
1319: PUSH
1320: LD_EXP 54
1324: PUSH
1325: LD_INT 2
1327: MUL
1328: MINUS
1329: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1330: LD_ADDR_EXP 15
1334: PUSH
1335: LD_INT 0
1337: PUSH
1338: LD_INT 1
1340: PUSH
1341: LD_INT 2
1343: PUSH
1344: LD_INT 3
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: PUSH
1353: LD_EXP 61
1357: PUSH
1358: LD_INT 1
1360: PLUS
1361: ARRAY
1362: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1363: LD_ADDR_EXP 16
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 12600
1373: PUSH
1374: LD_INT 2100
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_EXP 60
1386: PUSH
1387: LD_INT 1
1389: PLUS
1390: ARRAY
1391: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1392: LD_ADDR_EXP 17
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 21000
1402: PUSH
1403: LD_INT 4200
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 60
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_INT 1
1428: NEG
1429: PUSH
1430: LD_INT 350
1432: PUSH
1433: LD_INT 700
1435: PUSH
1436: LD_INT 1400
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_EXP 58
1453: PUSH
1454: LD_INT 1
1456: PLUS
1457: ARRAY
1458: ST_TO_ADDR
// battle_flags_id := [ ] ;
1459: LD_ADDR_EXP 34
1463: PUSH
1464: EMPTY
1465: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1466: LD_ADDR_EXP 18
1470: PUSH
1471: LD_INT 0
1473: PUSH
1474: LD_INT 1
1476: PUSH
1477: LD_INT 63000
1479: PUSH
1480: LD_INT 126000
1482: PUSH
1483: LD_INT 189000
1485: PUSH
1486: LD_INT 252000
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_EXP 62
1501: PUSH
1502: LD_INT 1
1504: PLUS
1505: ARRAY
1506: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1507: LD_ADDR_EXP 20
1511: PUSH
1512: LD_INT 500
1514: PUSH
1515: LD_INT 1000
1517: PUSH
1518: LD_INT 1500
1520: PUSH
1521: LD_INT 2000
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 5
1534: PUSH
1535: LD_INT 1
1537: PLUS
1538: ARRAY
1539: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1540: LD_ADDR_EXP 47
1544: PUSH
1545: LD_INT 21
1547: PUSH
1548: LD_INT 23
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 22
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 1
1567: RET
// function init_map ; var i ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1572: LD_ADDR_EXP 33
1576: PUSH
1577: LD_INT 43
1579: PUSH
1580: LD_INT 9
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 123
1589: PUSH
1590: LD_INT 10
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 113
1599: PUSH
1600: LD_INT 155
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 186
1609: PUSH
1610: LD_INT 133
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1623: LD_ADDR_EXP 30
1627: PUSH
1628: LD_INT 18
1630: PUSH
1631: LD_INT 17
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 156
1644: PUSH
1645: LD_INT 20
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 83
1658: PUSH
1659: LD_INT 140
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 216
1672: PUSH
1673: LD_INT 143
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: ST_TO_ADDR
// for i in depot_def do
1690: LD_ADDR_VAR 0 2
1694: PUSH
1695: LD_EXP 30
1699: PUSH
1700: FOR_IN
1701: IFFALSE 1775
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1703: LD_ADDR_EXP 32
1707: PUSH
1708: LD_EXP 32
1712: PUSH
1713: LD_VAR 0 2
1717: PUSH
1718: LD_INT 1
1720: ARRAY
1721: PPUSH
1722: LD_VAR 0 2
1726: PUSH
1727: LD_INT 3
1729: ARRAY
1730: PPUSH
1731: LD_INT 6
1733: PPUSH
1734: CALL_OW 272
1738: PUSH
1739: LD_VAR 0 2
1743: PUSH
1744: LD_INT 2
1746: ARRAY
1747: PPUSH
1748: LD_VAR 0 2
1752: PUSH
1753: LD_INT 3
1755: ARRAY
1756: PPUSH
1757: LD_INT 6
1759: PPUSH
1760: CALL_OW 273
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: EMPTY
1770: LIST
1771: ADD
1772: ST_TO_ADDR
1773: GO 1700
1775: POP
1776: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1777: LD_ADDR_EXP 31
1781: PUSH
1782: LD_INT 30
1784: PUSH
1785: LD_INT 36
1787: PUSH
1788: LD_INT 0
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 44
1798: PUSH
1799: LD_INT 21
1801: PUSH
1802: LD_INT 4
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 43
1812: PUSH
1813: LD_INT 33
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 165
1831: PUSH
1832: LD_INT 34
1834: PUSH
1835: LD_INT 0
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 137
1845: PUSH
1846: LD_INT 18
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 153
1859: PUSH
1860: LD_INT 37
1862: PUSH
1863: LD_INT 0
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 86
1878: PUSH
1879: LD_INT 120
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 105
1892: PUSH
1893: LD_INT 147
1895: PUSH
1896: LD_INT 4
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 68
1906: PUSH
1907: LD_INT 118
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 199
1925: PUSH
1926: LD_INT 144
1928: PUSH
1929: LD_INT 1
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 207
1939: PUSH
1940: LD_INT 119
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 195
1953: PUSH
1954: LD_INT 118
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: ST_TO_ADDR
// if not def_extra_oil_deposits then
1976: LD_EXP 55
1980: NOT
1981: IFFALSE 2022
// for i in extra_oil_deposits_locations do
1983: LD_ADDR_VAR 0 2
1987: PUSH
1988: LD_EXP 33
1992: PUSH
1993: FOR_IN
1994: IFFALSE 2020
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1996: LD_VAR 0 2
2000: PUSH
2001: LD_INT 1
2003: ARRAY
2004: PPUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_INT 2
2012: ARRAY
2013: PPUSH
2014: CALL_OW 63
2018: GO 1993
2020: POP
2021: POP
// end ;
2022: LD_VAR 0 1
2026: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2027: LD_INT 0
2029: PPUSH
2030: PPUSH
2031: PPUSH
// if not Team_Game then
2032: LD_EXP 25
2036: NOT
2037: IFFALSE 2135
// begin for i = 1 to 8 do
2039: LD_ADDR_VAR 0 2
2043: PUSH
2044: DOUBLE
2045: LD_INT 1
2047: DEC
2048: ST_TO_ADDR
2049: LD_INT 8
2051: PUSH
2052: FOR_TO
2053: IFFALSE 2131
// for j = 1 to 8 do
2055: LD_ADDR_VAR 0 3
2059: PUSH
2060: DOUBLE
2061: LD_INT 1
2063: DEC
2064: ST_TO_ADDR
2065: LD_INT 8
2067: PUSH
2068: FOR_TO
2069: IFFALSE 2127
// if i <> j then
2071: LD_VAR 0 2
2075: PUSH
2076: LD_VAR 0 3
2080: NONEQUAL
2081: IFFALSE 2105
// SetAttitude ( i , j , att_neutral , true ) else
2083: LD_VAR 0 2
2087: PPUSH
2088: LD_VAR 0 3
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 80
2103: GO 2125
// SetAttitude ( i , j , att_friend , true ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 80
2125: GO 2068
2127: POP
2128: POP
2129: GO 2052
2131: POP
2132: POP
// end else
2133: GO 2310
// begin if def_shared_vision then
2135: LD_EXP 57
2139: IFFALSE 2204
// begin for i in Teams do
2141: LD_ADDR_VAR 0 2
2145: PUSH
2146: LD_EXP 22
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2202
// for j = 2 to i do
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: DOUBLE
2160: LD_INT 2
2162: DEC
2163: ST_TO_ADDR
2164: LD_VAR 0 2
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2198
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2172: LD_VAR 0 2
2176: PUSH
2177: LD_VAR 0 3
2181: ARRAY
2182: PPUSH
2183: LD_VAR 0 2
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: CALL_OW 343
2196: GO 2169
2198: POP
2199: POP
2200: GO 2151
2202: POP
2203: POP
// end ; for i = 1 to 8 do
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: DOUBLE
2210: LD_INT 1
2212: DEC
2213: ST_TO_ADDR
2214: LD_INT 8
2216: PUSH
2217: FOR_TO
2218: IFFALSE 2308
// for j = 1 to 8 do
2220: LD_ADDR_VAR 0 3
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2304
// if Side_Teams [ i ] = Side_Teams [ j ] then
2236: LD_EXP 21
2240: PUSH
2241: LD_VAR 0 2
2245: ARRAY
2246: PUSH
2247: LD_EXP 21
2251: PUSH
2252: LD_VAR 0 3
2256: ARRAY
2257: EQUAL
2258: IFFALSE 2282
// SetAttitude ( i , j , att_friend , true ) else
2260: LD_VAR 0 2
2264: PPUSH
2265: LD_VAR 0 3
2269: PPUSH
2270: LD_INT 1
2272: PPUSH
2273: LD_INT 1
2275: PPUSH
2276: CALL_OW 80
2280: GO 2302
// SetAttitude ( i , j , att_enemy , true ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 3
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL_OW 80
2302: GO 2233
2304: POP
2305: POP
2306: GO 2217
2308: POP
2309: POP
// end ; end ;
2310: LD_VAR 0 1
2314: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2315: LD_INT 0
2317: PPUSH
2318: PPUSH
2319: PPUSH
2320: PPUSH
// result := [ ] ;
2321: LD_ADDR_VAR 0 7
2325: PUSH
2326: EMPTY
2327: ST_TO_ADDR
// for i := 1 to count do
2328: LD_ADDR_VAR 0 8
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_VAR 0 1
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2762
// begin uc_direction := Rand ( 0 , 5 ) ;
2346: LD_ADDR_OWVAR 24
2350: PUSH
2351: LD_INT 0
2353: PPUSH
2354: LD_INT 5
2356: PPUSH
2357: CALL_OW 12
2361: ST_TO_ADDR
// if commander then
2362: LD_LOC 1
2366: IFFALSE 2475
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2368: LD_ADDR_OWVAR 26
2372: PUSH
2373: LD_OWVAR 19
2377: PUSH
2378: LD_OWVAR 20
2382: ARRAY
2383: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2384: LD_INT 1
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: CALL_OW 12
2394: PPUSH
2395: LD_VAR 0 2
2399: PPUSH
2400: LD_EXP 10
2404: PUSH
2405: LD_INT 2
2407: PLUS
2408: PPUSH
2409: CALL_OW 380
// hc_importance := 105 ;
2413: LD_ADDR_OWVAR 32
2417: PUSH
2418: LD_INT 105
2420: ST_TO_ADDR
// commander := false ;
2421: LD_ADDR_LOC 1
2425: PUSH
2426: LD_INT 0
2428: ST_TO_ADDR
// if Multiplayer then
2429: LD_OWVAR 4
2433: IFFALSE 2473
// begin hc_gallery := MULTIAVATARS ;
2435: LD_ADDR_OWVAR 33
2439: PUSH
2440: LD_STRING MULTIAVATARS
2442: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2443: LD_ADDR_OWVAR 34
2447: PUSH
2448: LD_OWVAR 20
2452: PPUSH
2453: CALL_OW 525
2457: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2458: LD_ADDR_OWVAR 27
2462: PUSH
2463: LD_OWVAR 20
2467: PPUSH
2468: CALL_OW 526
2472: ST_TO_ADDR
// end ; end else
2473: GO 2538
// begin hc_name :=  ;
2475: LD_ADDR_OWVAR 26
2479: PUSH
2480: LD_STRING 
2482: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2483: LD_INT 1
2485: PPUSH
2486: LD_INT 2
2488: PPUSH
2489: CALL_OW 12
2493: PPUSH
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_EXP 10
2503: PPUSH
2504: CALL_OW 380
// hc_importance := 0 ;
2508: LD_ADDR_OWVAR 32
2512: PUSH
2513: LD_INT 0
2515: ST_TO_ADDR
// if Multiplayer then
2516: LD_OWVAR 4
2520: IFFALSE 2538
// begin hc_gallery :=  ;
2522: LD_ADDR_OWVAR 33
2526: PUSH
2527: LD_STRING 
2529: ST_TO_ADDR
// hc_face_number := 0 ;
2530: LD_ADDR_OWVAR 34
2534: PUSH
2535: LD_INT 0
2537: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2538: LD_ADDR_VAR 0 10
2542: PUSH
2543: CALL_OW 44
2547: ST_TO_ADDR
// if global_defined then
2548: LD_LOC 3
2552: IFFALSE 2692
// begin if ( cl = class_soldier ) then
2554: LD_VAR 0 2
2558: PUSH
2559: LD_INT 1
2561: EQUAL
2562: IFFALSE 2582
// j := i + soldiers_created else
2564: LD_ADDR_VAR 0 9
2568: PUSH
2569: LD_VAR 0 8
2573: PUSH
2574: LD_LOC 4
2578: PLUS
2579: ST_TO_ADDR
2580: GO 2592
// j := i ;
2582: LD_ADDR_VAR 0 9
2586: PUSH
2587: LD_VAR 0 8
2591: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2592: LD_LOC 2
2596: PUSH
2597: LD_VAR 0 2
2601: ARRAY
2602: PUSH
2603: LD_VAR 0 9
2607: ARRAY
2608: PPUSH
2609: LD_VAR 0 10
2613: PPUSH
2614: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2618: LD_VAR 0 10
2622: PPUSH
2623: LD_INT 2
2625: PPUSH
2626: LD_LOC 2
2630: PUSH
2631: LD_VAR 0 2
2635: ARRAY
2636: PUSH
2637: LD_VAR 0 9
2641: ARRAY
2642: PPUSH
2643: LD_INT 2
2645: PPUSH
2646: CALL_OW 260
2650: PPUSH
2651: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2655: LD_VAR 0 10
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: LD_LOC 2
2667: PUSH
2668: LD_VAR 0 2
2672: ARRAY
2673: PUSH
2674: LD_VAR 0 9
2678: ARRAY
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL_OW 260
2687: PPUSH
2688: CALL_OW 239
// end ; if building then
2692: LD_VAR 0 6
2696: IFFALSE 2714
// PlaceHumanInUnit ( un , building ) else
2698: LD_VAR 0 10
2702: PPUSH
2703: LD_VAR 0 6
2707: PPUSH
2708: CALL_OW 52
2712: GO 2741
// PlaceUnitXYR ( un , x , y , r , false ) ;
2714: LD_VAR 0 10
2718: PPUSH
2719: LD_VAR 0 3
2723: PPUSH
2724: LD_VAR 0 4
2728: PPUSH
2729: LD_VAR 0 5
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL_OW 50
// result := result ^ [ un ] ;
2741: LD_ADDR_VAR 0 7
2745: PUSH
2746: LD_VAR 0 7
2750: PUSH
2751: LD_VAR 0 10
2755: PUSH
2756: EMPTY
2757: LIST
2758: ADD
2759: ST_TO_ADDR
// end ;
2760: GO 2343
2762: POP
2763: POP
// if not global_defined then
2764: LD_LOC 3
2768: NOT
2769: IFFALSE 2847
// if ( global_units >= cl ) then
2771: LD_LOC 2
2775: PUSH
2776: LD_VAR 0 2
2780: GREATEREQUAL
2781: IFFALSE 2822
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2783: LD_ADDR_LOC 2
2787: PUSH
2788: LD_LOC 2
2792: PPUSH
2793: LD_VAR 0 2
2797: PPUSH
2798: LD_LOC 2
2802: PUSH
2803: LD_VAR 0 2
2807: ARRAY
2808: PUSH
2809: LD_VAR 0 7
2813: ADD
2814: PPUSH
2815: CALL_OW 1
2819: ST_TO_ADDR
2820: GO 2847
// global_units := Replace ( global_units , cl , result ) ;
2822: LD_ADDR_LOC 2
2826: PUSH
2827: LD_LOC 2
2831: PPUSH
2832: LD_VAR 0 2
2836: PPUSH
2837: LD_VAR 0 7
2841: PPUSH
2842: CALL_OW 1
2846: ST_TO_ADDR
// if commander then
2847: LD_LOC 1
2851: IFFALSE 2898
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2853: LD_ADDR_EXP 35
2857: PUSH
2858: LD_EXP 35
2862: PPUSH
2863: LD_OWVAR 20
2867: PPUSH
2868: LD_EXP 35
2872: PUSH
2873: LD_OWVAR 20
2877: ARRAY
2878: PUSH
2879: LD_VAR 0 10
2883: ADD
2884: PPUSH
2885: CALL_OW 1
2889: ST_TO_ADDR
// commander := false ;
2890: LD_ADDR_LOC 1
2894: PUSH
2895: LD_INT 0
2897: ST_TO_ADDR
// end ; end ;
2898: LD_VAR 0 7
2902: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2903: LD_INT 0
2905: PPUSH
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
2913: PPUSH
// if side in [ 0 , 9 ] then
2914: LD_VAR 0 1
2918: PUSH
2919: LD_INT 0
2921: PUSH
2922: LD_INT 9
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: IN
2929: IFFALSE 2933
// exit ;
2931: GO 4008
// pos := Side_Positions [ side ] ;
2933: LD_ADDR_VAR 0 3
2937: PUSH
2938: LD_EXP 23
2942: PUSH
2943: LD_VAR 0 1
2947: ARRAY
2948: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_EXP 24
2958: PUSH
2959: LD_VAR 0 1
2963: ARRAY
2964: ST_TO_ADDR
// uc_side := side ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_VAR 0 1
2974: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2975: LD_ADDR_VAR 0 4
2979: PUSH
2980: LD_EXP 30
2984: PUSH
2985: LD_VAR 0 3
2989: ARRAY
2990: PUSH
2991: LD_INT 1
2993: ARRAY
2994: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2995: LD_ADDR_VAR 0 5
2999: PUSH
3000: LD_EXP 30
3004: PUSH
3005: LD_VAR 0 3
3009: ARRAY
3010: PUSH
3011: LD_INT 2
3013: ARRAY
3014: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3015: LD_ADDR_VAR 0 6
3019: PUSH
3020: LD_EXP 30
3024: PUSH
3025: LD_VAR 0 3
3029: ARRAY
3030: PUSH
3031: LD_INT 3
3033: ARRAY
3034: ST_TO_ADDR
// if is_depot then
3035: LD_EXP 7
3039: IFFALSE 3172
// begin bc_type = b_depot ;
3041: LD_ADDR_OWVAR 42
3045: PUSH
3046: LD_INT 0
3048: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3049: LD_ADDR_VAR 0 10
3053: PUSH
3054: LD_VAR 0 4
3058: PPUSH
3059: LD_VAR 0 5
3063: PPUSH
3064: LD_VAR 0 6
3068: PPUSH
3069: CALL_OW 47
3073: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3074: LD_VAR 0 10
3078: PPUSH
3079: LD_STRING @
3081: PUSH
3082: LD_VAR 0 1
3086: STR
3087: PPUSH
3088: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3092: LD_VAR 0 10
3096: PPUSH
3097: CALL_OW 274
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: LD_EXP 12
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: PPUSH
3114: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3118: LD_VAR 0 10
3122: PPUSH
3123: CALL_OW 274
3127: PPUSH
3128: LD_INT 2
3130: PPUSH
3131: LD_EXP 12
3135: PUSH
3136: LD_INT 2
3138: ARRAY
3139: PPUSH
3140: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3144: LD_VAR 0 10
3148: PPUSH
3149: CALL_OW 274
3153: PPUSH
3154: LD_INT 3
3156: PPUSH
3157: LD_EXP 12
3161: PUSH
3162: LD_INT 3
3164: ARRAY
3165: PPUSH
3166: CALL_OW 277
// end else
3170: GO 3316
// begin for i := 1 to 3 do
3172: LD_ADDR_VAR 0 7
3176: PUSH
3177: DOUBLE
3178: LD_INT 1
3180: DEC
3181: ST_TO_ADDR
3182: LD_INT 3
3184: PUSH
3185: FOR_TO
3186: IFFALSE 3314
// begin r := starting_resources [ i ] ;
3188: LD_ADDR_VAR 0 8
3192: PUSH
3193: LD_EXP 12
3197: PUSH
3198: LD_VAR 0 7
3202: ARRAY
3203: ST_TO_ADDR
// while r >= 10 do
3204: LD_VAR 0 8
3208: PUSH
3209: LD_INT 10
3211: GREATEREQUAL
3212: IFFALSE 3312
// if r > 50 then
3214: LD_VAR 0 8
3218: PUSH
3219: LD_INT 50
3221: GREATER
3222: IFFALSE 3268
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3224: LD_VAR 0 7
3228: PPUSH
3229: LD_INT 5
3231: PPUSH
3232: LD_VAR 0 4
3236: PPUSH
3237: LD_VAR 0 5
3241: PPUSH
3242: LD_INT 4
3244: PPUSH
3245: LD_INT 0
3247: PPUSH
3248: CALL_OW 60
// r := r - 50 ;
3252: LD_ADDR_VAR 0 8
3256: PUSH
3257: LD_VAR 0 8
3261: PUSH
3262: LD_INT 50
3264: MINUS
3265: ST_TO_ADDR
// end else
3266: GO 3310
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3268: LD_VAR 0 7
3272: PPUSH
3273: LD_VAR 0 8
3277: PUSH
3278: LD_INT 10
3280: DIV
3281: PPUSH
3282: LD_VAR 0 4
3286: PPUSH
3287: LD_VAR 0 5
3291: PPUSH
3292: LD_INT 4
3294: PPUSH
3295: LD_INT 0
3297: PPUSH
3298: CALL_OW 60
// r := 0 ;
3302: LD_ADDR_VAR 0 8
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// end ;
3310: GO 3204
// end ;
3312: GO 3185
3314: POP
3315: POP
// end ; for r in starting_crates do
3316: LD_ADDR_VAR 0 8
3320: PUSH
3321: LD_EXP 11
3325: PUSH
3326: FOR_IN
3327: IFFALSE 3359
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3329: LD_INT 1
3331: PPUSH
3332: LD_INT 5
3334: PPUSH
3335: LD_VAR 0 4
3339: PPUSH
3340: LD_VAR 0 5
3344: PPUSH
3345: LD_VAR 0 8
3349: PPUSH
3350: LD_INT 0
3352: PPUSH
3353: CALL_OW 60
3357: GO 3326
3359: POP
3360: POP
// if def_morale_flags then
3361: LD_EXP 58
3365: IFFALSE 3504
// begin x := start_def [ pos ] [ 1 ] ;
3367: LD_ADDR_VAR 0 4
3371: PUSH
3372: LD_EXP 32
3376: PUSH
3377: LD_VAR 0 3
3381: ARRAY
3382: PUSH
3383: LD_INT 1
3385: ARRAY
3386: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3387: LD_ADDR_VAR 0 5
3391: PUSH
3392: LD_EXP 32
3396: PUSH
3397: LD_VAR 0 3
3401: ARRAY
3402: PUSH
3403: LD_INT 2
3405: ARRAY
3406: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3407: LD_VAR 0 4
3411: PPUSH
3412: LD_VAR 0 5
3416: PPUSH
3417: LD_INT 12
3419: PPUSH
3420: LD_INT 2
3422: PPUSH
3423: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3427: LD_ADDR_EXP 34
3431: PUSH
3432: LD_EXP 34
3436: PUSH
3437: LD_VAR 0 1
3441: PPUSH
3442: LD_VAR 0 4
3446: PPUSH
3447: LD_VAR 0 5
3451: PPUSH
3452: LD_INT 1
3454: PUSH
3455: LD_INT 100
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: LD_INT 2
3464: PUSH
3465: LD_INT 50
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 3
3474: PUSH
3475: LD_INT 20
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 20
3484: PUSH
3485: LD_INT 100
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 418
3502: ADD
3503: ST_TO_ADDR
// end ; commander := true ;
3504: LD_ADDR_LOC 1
3508: PUSH
3509: LD_INT 1
3511: ST_TO_ADDR
// soldiers_created := 0 ;
3512: LD_ADDR_LOC 4
3516: PUSH
3517: LD_INT 0
3519: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3520: LD_ADDR_VAR 0 7
3524: PUSH
3525: DOUBLE
3526: LD_INT 1
3528: DEC
3529: ST_TO_ADDR
3530: LD_EXP 8
3534: PUSH
3535: FOR_TO
3536: IFFALSE 3689
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3538: LD_ADDR_VAR 0 4
3542: PUSH
3543: LD_EXP 31
3547: PUSH
3548: LD_VAR 0 3
3552: ARRAY
3553: PUSH
3554: LD_VAR 0 7
3558: ARRAY
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3564: LD_ADDR_VAR 0 5
3568: PUSH
3569: LD_EXP 31
3573: PUSH
3574: LD_VAR 0 3
3578: ARRAY
3579: PUSH
3580: LD_VAR 0 7
3584: ARRAY
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3590: LD_ADDR_VAR 0 6
3594: PUSH
3595: LD_EXP 31
3599: PUSH
3600: LD_VAR 0 3
3604: ARRAY
3605: PUSH
3606: LD_VAR 0 7
3610: ARRAY
3611: PUSH
3612: LD_INT 3
3614: ARRAY
3615: ST_TO_ADDR
// bc_type := b_breastwork ;
3616: LD_ADDR_OWVAR 42
3620: PUSH
3621: LD_INT 31
3623: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3624: LD_ADDR_VAR 0 9
3628: PUSH
3629: LD_VAR 0 4
3633: PPUSH
3634: LD_VAR 0 5
3638: PPUSH
3639: LD_VAR 0 6
3643: PPUSH
3644: CALL_OW 47
3648: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3649: LD_INT 1
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_INT 0
3657: PPUSH
3658: LD_INT 0
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: LD_VAR 0 9
3668: PPUSH
3669: CALL 2315 0 6
// soldiers_created := soldiers_created + 1 ;
3673: LD_ADDR_LOC 4
3677: PUSH
3678: LD_LOC 4
3682: PUSH
3683: LD_INT 1
3685: PLUS
3686: ST_TO_ADDR
// end ;
3687: GO 3535
3689: POP
3690: POP
// x := start_def [ pos ] [ 1 ] ;
3691: LD_ADDR_VAR 0 4
3695: PUSH
3696: LD_EXP 32
3700: PUSH
3701: LD_VAR 0 3
3705: ARRAY
3706: PUSH
3707: LD_INT 1
3709: ARRAY
3710: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3711: LD_ADDR_VAR 0 5
3715: PUSH
3716: LD_EXP 32
3720: PUSH
3721: LD_VAR 0 3
3725: ARRAY
3726: PUSH
3727: LD_INT 2
3729: ARRAY
3730: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3731: LD_LOC 8
3735: PUSH
3736: LD_EXP 8
3740: MINUS
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: LD_VAR 0 4
3749: PPUSH
3750: LD_VAR 0 5
3754: PPUSH
3755: LD_INT 5
3757: PPUSH
3758: LD_INT 0
3760: PPUSH
3761: CALL 2315 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3765: LD_LOC 5
3769: PPUSH
3770: LD_INT 2
3772: PPUSH
3773: LD_VAR 0 4
3777: PPUSH
3778: LD_VAR 0 5
3782: PPUSH
3783: LD_INT 5
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: CALL 2315 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3793: LD_LOC 7
3797: PPUSH
3798: LD_INT 3
3800: PPUSH
3801: LD_VAR 0 4
3805: PPUSH
3806: LD_VAR 0 5
3810: PPUSH
3811: LD_INT 5
3813: PPUSH
3814: LD_INT 0
3816: PPUSH
3817: CALL 2315 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3821: LD_LOC 6
3825: PPUSH
3826: LD_INT 4
3828: PPUSH
3829: LD_VAR 0 4
3833: PPUSH
3834: LD_VAR 0 5
3838: PPUSH
3839: LD_INT 5
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: CALL 2315 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3849: LD_EXP 59
3853: PUSH
3854: LD_INT 20
3856: PPUSH
3857: LD_VAR 0 1
3861: PPUSH
3862: CALL_OW 321
3866: PUSH
3867: LD_INT 1
3869: EQUAL
3870: AND
3871: IFFALSE 3888
// SetTech ( tech_SibDet , side , state_researched ) ;
3873: LD_INT 20
3875: PPUSH
3876: LD_VAR 0 1
3880: PPUSH
3881: LD_INT 2
3883: PPUSH
3884: CALL_OW 322
// if def_siberite_bomb = 1 then
3888: LD_EXP 62
3892: PUSH
3893: LD_INT 1
3895: EQUAL
3896: IFFALSE 3930
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3898: LD_INT 25
3900: PPUSH
3901: LD_VAR 0 1
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3913: LD_INT 73
3915: PPUSH
3916: LD_VAR 0 1
3920: PPUSH
3921: LD_INT 1
3923: PPUSH
3924: CALL_OW 322
// end else
3928: GO 3960
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3930: LD_INT 25
3932: PPUSH
3933: LD_VAR 0 1
3937: PPUSH
3938: LD_INT 0
3940: PPUSH
3941: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3945: LD_INT 73
3947: PPUSH
3948: LD_VAR 0 1
3952: PPUSH
3953: LD_INT 0
3955: PPUSH
3956: CALL_OW 322
// end ; if Game_Type = 3 then
3960: LD_EXP 48
3964: PUSH
3965: LD_INT 3
3967: EQUAL
3968: IFFALSE 3985
// SetTech ( tech_partinvis , side , state_disabled ) ;
3970: LD_INT 16
3972: PPUSH
3973: LD_VAR 0 1
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3985: LD_INT 24
3987: PPUSH
3988: LD_VAR 0 1
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: CALL_OW 322
// global_defined := true ;
4000: LD_ADDR_LOC 3
4004: PUSH
4005: LD_INT 1
4007: ST_TO_ADDR
// end ;
4008: LD_VAR 0 2
4012: RET
// every 0 0$1 do
4013: GO 4015
4015: DISABLE
// if ( def_siberite_bomb > 1 ) then
4016: LD_EXP 62
4020: PUSH
4021: LD_INT 1
4023: GREATER
4024: IFFALSE 4039
// begin wait ( siberite_bomb_Delay ) ;
4026: LD_EXP 18
4030: PPUSH
4031: CALL_OW 67
// EnableSibFiss ;
4035: CALL 4040 0 0
// end ;
4039: END
// function EnableSibFiss ; var i ; begin
4040: LD_INT 0
4042: PPUSH
4043: PPUSH
// for i := 1 to 8 do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_INT 8
4056: PUSH
4057: FOR_TO
4058: IFFALSE 4104
// if Side_Positions [ i ] then
4060: LD_EXP 23
4064: PUSH
4065: LD_VAR 0 2
4069: ARRAY
4070: IFFALSE 4102
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4072: LD_INT 25
4074: PPUSH
4075: LD_VAR 0 2
4079: PPUSH
4080: LD_INT 1
4082: PPUSH
4083: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4087: LD_INT 73
4089: PPUSH
4090: LD_VAR 0 2
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: CALL_OW 322
// end ;
4102: GO 4057
4104: POP
4105: POP
// end ;
4106: LD_VAR 0 1
4110: RET
// function prepare_sides ; var i ; begin
4111: LD_INT 0
4113: PPUSH
4114: PPUSH
// global_units := [ ] ;
4115: LD_ADDR_LOC 2
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// global_defined := false ;
4122: LD_ADDR_LOC 3
4126: PUSH
4127: LD_INT 0
4129: ST_TO_ADDR
// CountClassMembers ;
4130: CALL 4180 0 0
// for i := 1 to 8 do
4134: LD_ADDR_VAR 0 2
4138: PUSH
4139: DOUBLE
4140: LD_INT 1
4142: DEC
4143: ST_TO_ADDR
4144: LD_INT 8
4146: PUSH
4147: FOR_TO
4148: IFFALSE 4173
// if Side_Positions [ i ] then
4150: LD_EXP 23
4154: PUSH
4155: LD_VAR 0 2
4159: ARRAY
4160: IFFALSE 4171
// prepare_side ( i ) ;
4162: LD_VAR 0 2
4166: PPUSH
4167: CALL 2903 0 1
4171: GO 4147
4173: POP
4174: POP
// end ;
4175: LD_VAR 0 1
4179: RET
// function CountClassMembers ; var Mode ; begin
4180: LD_INT 0
4182: PPUSH
4183: PPUSH
// if No_Mechs then
4184: LD_EXP 64
4188: IFFALSE 4200
// Mode := 2 else
4190: LD_ADDR_VAR 0 2
4194: PUSH
4195: LD_INT 2
4197: ST_TO_ADDR
4198: GO 4208
// Mode := 1 ;
4200: LD_ADDR_VAR 0 2
4204: PUSH
4205: LD_INT 1
4207: ST_TO_ADDR
// neng := number_of_people ;
4208: LD_ADDR_LOC 5
4212: PUSH
4213: LD_EXP 9
4217: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4218: LD_ADDR_LOC 8
4222: PUSH
4223: LD_LOC 5
4227: PUSH
4228: LD_INT 4
4230: PUSH
4231: LD_INT 3
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: LD_VAR 0 2
4242: ARRAY
4243: DIV
4244: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4245: LD_LOC 8
4249: PUSH
4250: LD_EXP 8
4254: LESS
4255: IFFALSE 4267
// nsol := number_of_breastworks ;
4257: LD_ADDR_LOC 8
4261: PUSH
4262: LD_EXP 8
4266: ST_TO_ADDR
// neng := neng - nsol ;
4267: LD_ADDR_LOC 5
4271: PUSH
4272: LD_LOC 5
4276: PUSH
4277: LD_LOC 8
4281: MINUS
4282: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4283: LD_ADDR_LOC 6
4287: PUSH
4288: LD_LOC 5
4292: PUSH
4293: LD_INT 3
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_VAR 0 2
4307: ARRAY
4308: DIV
4309: ST_TO_ADDR
// if ( nsci < 1 ) then
4310: LD_LOC 6
4314: PUSH
4315: LD_INT 1
4317: LESS
4318: IFFALSE 4328
// nsci := 1 ;
4320: LD_ADDR_LOC 6
4324: PUSH
4325: LD_INT 1
4327: ST_TO_ADDR
// neng := neng - nsci ;
4328: LD_ADDR_LOC 5
4332: PUSH
4333: LD_LOC 5
4337: PUSH
4338: LD_LOC 6
4342: MINUS
4343: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4344: LD_ADDR_LOC 7
4348: PUSH
4349: LD_LOC 5
4353: PUSH
4354: LD_INT 2
4356: DIV
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: ST_TO_ADDR
// neng := neng - nmech ;
4371: LD_ADDR_LOC 5
4375: PUSH
4376: LD_LOC 5
4380: PUSH
4381: LD_LOC 7
4385: MINUS
4386: ST_TO_ADDR
// if ( neng < 1 ) then
4387: LD_LOC 5
4391: PUSH
4392: LD_INT 1
4394: LESS
4395: IFFALSE 4405
// neng := 1 ;
4397: LD_ADDR_LOC 5
4401: PUSH
4402: LD_INT 1
4404: ST_TO_ADDR
// end ;
4405: LD_VAR 0 1
4409: RET
// starting begin disable ( 1 ) ;
4410: LD_INT 1
4412: DISABLE_MARKED
// disable ( 2 ) ;
4413: LD_INT 2
4415: DISABLE_MARKED
// disable ( 3 ) ;
4416: LD_INT 3
4418: DISABLE_MARKED
// disable ( 4 ) ;
4419: LD_INT 4
4421: DISABLE_MARKED
// disable ( 5 ) ;
4422: LD_INT 5
4424: DISABLE_MARKED
// disable ( 6 ) ;
4425: LD_INT 6
4427: DISABLE_MARKED
// disable ( 7 ) ;
4428: LD_INT 7
4430: DISABLE_MARKED
// disable ( 10 ) ;
4431: LD_INT 10
4433: DISABLE_MARKED
// disable ( 20 ) ;
4434: LD_INT 20
4436: DISABLE_MARKED
// disable ( 98 ) ;
4437: LD_INT 98
4439: DISABLE_MARKED
// disable ( 99 ) ;
4440: LD_INT 99
4442: DISABLE_MARKED
// disable ( 400 ) ;
4443: LD_INT 400
4445: DISABLE_MARKED
// disable ( 401 ) ;
4446: LD_INT 401
4448: DISABLE_MARKED
// disable ( 600 ) ;
4449: LD_INT 600
4451: DISABLE_MARKED
// mp_selectmsg := true ;
4452: LD_ADDR_OWVAR 13
4456: PUSH
4457: LD_INT 1
4459: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4460: CALL 68 0 0
// init_map ;
4464: CALL 1568 0 0
// init_shipments ;
4468: CALL 4654 0 0
// init_respawn ;
4472: CALL 6337 0 0
// set_shared_visions_and_alliances ;
4476: CALL 2027 0 0
// ResetFog ;
4480: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4484: LD_OWVAR 2
4488: PPUSH
4489: CALL_OW 520
// prepare_sides ;
4493: CALL 4111 0 0
// Init_Win_Condition ;
4497: CALL 18498 0 0
// InitLimits ;
4501: CALL 16371 0 0
// ShowTimer ;
4505: CALL 17308 0 0
// case Game_Type of 2 :
4509: LD_EXP 48
4513: PUSH
4514: LD_INT 2
4516: DOUBLE
4517: EQUAL
4518: IFTRUE 4522
4520: GO 4529
4522: POP
// init_alien_research ; 3 :
4523: CALL 7567 0 0
4527: GO 4549
4529: LD_INT 3
4531: DOUBLE
4532: EQUAL
4533: IFTRUE 4537
4535: GO 4548
4537: POP
// begin InitPoints ( ) ;
4538: CALL 17501 0 0
// init_kings_counting ;
4542: CALL 19861 0 0
// end ; end ;
4546: GO 4549
4548: POP
// music_nat := Side_Nations [ your_side ] ;
4549: LD_ADDR_OWVAR 71
4553: PUSH
4554: LD_EXP 24
4558: PUSH
4559: LD_OWVAR 2
4563: ARRAY
4564: ST_TO_ADDR
// if IAmSpec then
4565: CALL_OW 531
4569: IFFALSE 4593
// begin fogOff ( true ) ;
4571: LD_INT 1
4573: PPUSH
4574: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4578: LD_INT 119
4580: PPUSH
4581: LD_INT 79
4583: PPUSH
4584: CALL_OW 86
// enable ( 400 ) ;
4588: LD_INT 400
4590: ENABLE_MARKED
// end else
4591: GO 4639
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4593: LD_EXP 32
4597: PUSH
4598: LD_EXP 23
4602: PUSH
4603: LD_OWVAR 2
4607: ARRAY
4608: ARRAY
4609: PUSH
4610: LD_INT 1
4612: ARRAY
4613: PPUSH
4614: LD_EXP 32
4618: PUSH
4619: LD_EXP 23
4623: PUSH
4624: LD_OWVAR 2
4628: ARRAY
4629: ARRAY
4630: PUSH
4631: LD_INT 2
4633: ARRAY
4634: PPUSH
4635: CALL_OW 86
// end ; InitApeman ;
4639: CALL 5512 0 0
// if def_builduptime then
4643: LD_EXP 63
4647: IFFALSE 4653
// BeginBuildUp ;
4649: CALL 13561 0 0
// end ; end_of_file
4653: END
// var shipment , tictac ; export function init_shipments ; begin
4654: LD_INT 0
4656: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4657: LD_ADDR_LOC 9
4661: PUSH
4662: LD_INT 0
4664: PPUSH
4665: LD_INT 3
4667: PPUSH
4668: CALL_OW 12
4672: ST_TO_ADDR
// tictac := 0 ;
4673: LD_ADDR_LOC 10
4677: PUSH
4678: LD_INT 0
4680: ST_TO_ADDR
// end ;
4681: LD_VAR 0 1
4685: RET
// every 1 1$0 + 0 0$0.3 do
4686: GO 4688
4688: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
4689: LD_INT 4
4691: PPUSH
4692: LD_INT 5
4694: PPUSH
4695: CALL_OW 12
4699: PPUSH
4700: LD_INT 1
4702: PPUSH
4703: CALL_OW 57
// enable ;
4707: ENABLE
// end ;
4708: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4709: GO 4711
4711: DISABLE
4712: LD_INT 0
4714: PPUSH
4715: PPUSH
// begin case tick of 1 .. 1 1$0 :
4716: LD_OWVAR 1
4720: PUSH
4721: LD_INT 1
4723: DOUBLE
4724: GREATEREQUAL
4725: IFFALSE 4733
4727: LD_INT 2100
4729: DOUBLE
4730: LESSEQUAL
4731: IFTRUE 4735
4733: GO 4763
4735: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4736: LD_EXP 13
4740: PUSH
4741: LD_INT 100
4743: DIVREAL
4744: PUSH
4745: LD_INT 525
4747: PPUSH
4748: LD_INT 1050
4750: PPUSH
4751: CALL_OW 12
4755: MUL
4756: PPUSH
4757: CALL_OW 67
4761: GO 5065
4763: LD_INT 2100
4765: PUSH
4766: LD_INT 1
4768: PLUS
4769: DOUBLE
4770: GREATEREQUAL
4771: IFFALSE 4779
4773: LD_INT 10500
4775: DOUBLE
4776: LESSEQUAL
4777: IFTRUE 4781
4779: GO 4809
4781: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4782: LD_EXP 13
4786: PUSH
4787: LD_INT 100
4789: DIVREAL
4790: PUSH
4791: LD_INT 1050
4793: PPUSH
4794: LD_INT 1225
4796: PPUSH
4797: CALL_OW 12
4801: MUL
4802: PPUSH
4803: CALL_OW 67
4807: GO 5065
4809: LD_INT 10500
4811: PUSH
4812: LD_INT 1
4814: PLUS
4815: DOUBLE
4816: GREATEREQUAL
4817: IFFALSE 4825
4819: LD_INT 21000
4821: DOUBLE
4822: LESSEQUAL
4823: IFTRUE 4827
4825: GO 4855
4827: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4828: LD_EXP 13
4832: PUSH
4833: LD_INT 100
4835: DIVREAL
4836: PUSH
4837: LD_INT 1225
4839: PPUSH
4840: LD_INT 1750
4842: PPUSH
4843: CALL_OW 12
4847: MUL
4848: PPUSH
4849: CALL_OW 67
4853: GO 5065
4855: LD_INT 21000
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: DOUBLE
4862: GREATEREQUAL
4863: IFFALSE 4871
4865: LD_INT 42000
4867: DOUBLE
4868: LESSEQUAL
4869: IFTRUE 4873
4871: GO 4901
4873: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4874: LD_EXP 13
4878: PUSH
4879: LD_INT 100
4881: DIVREAL
4882: PUSH
4883: LD_INT 1750
4885: PPUSH
4886: LD_INT 2450
4888: PPUSH
4889: CALL_OW 12
4893: MUL
4894: PPUSH
4895: CALL_OW 67
4899: GO 5065
4901: LD_INT 42000
4903: PUSH
4904: LD_INT 1
4906: PLUS
4907: DOUBLE
4908: GREATEREQUAL
4909: IFFALSE 4917
4911: LD_INT 63000
4913: DOUBLE
4914: LESSEQUAL
4915: IFTRUE 4919
4917: GO 4947
4919: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4920: LD_EXP 13
4924: PUSH
4925: LD_INT 100
4927: DIVREAL
4928: PUSH
4929: LD_INT 2450
4931: PPUSH
4932: LD_INT 2800
4934: PPUSH
4935: CALL_OW 12
4939: MUL
4940: PPUSH
4941: CALL_OW 67
4945: GO 5065
4947: LD_INT 63000
4949: PUSH
4950: LD_INT 1
4952: PLUS
4953: DOUBLE
4954: GREATEREQUAL
4955: IFFALSE 4963
4957: LD_INT 105000
4959: DOUBLE
4960: LESSEQUAL
4961: IFTRUE 4965
4963: GO 4993
4965: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4966: LD_EXP 13
4970: PUSH
4971: LD_INT 100
4973: DIVREAL
4974: PUSH
4975: LD_INT 2800
4977: PPUSH
4978: LD_INT 3325
4980: PPUSH
4981: CALL_OW 12
4985: MUL
4986: PPUSH
4987: CALL_OW 67
4991: GO 5065
4993: LD_INT 105000
4995: PUSH
4996: LD_INT 1
4998: PLUS
4999: DOUBLE
5000: GREATEREQUAL
5001: IFFALSE 5009
5003: LD_INT 630000
5005: DOUBLE
5006: LESSEQUAL
5007: IFTRUE 5011
5009: GO 5039
5011: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
5012: LD_EXP 13
5016: PUSH
5017: LD_INT 100
5019: DIVREAL
5020: PUSH
5021: LD_INT 3325
5023: PPUSH
5024: LD_INT 4200
5026: PPUSH
5027: CALL_OW 12
5031: MUL
5032: PPUSH
5033: CALL_OW 67
5037: GO 5065
5039: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5040: LD_EXP 13
5044: PUSH
5045: LD_INT 100
5047: DIVREAL
5048: PUSH
5049: LD_INT 4200
5051: PPUSH
5052: LD_INT 5250
5054: PPUSH
5055: CALL_OW 12
5059: MUL
5060: PPUSH
5061: CALL_OW 67
// amount := Rand ( 1 , 5 ) ;
5065: LD_ADDR_VAR 0 2
5069: PUSH
5070: LD_INT 1
5072: PPUSH
5073: LD_INT 5
5075: PPUSH
5076: CALL_OW 12
5080: ST_TO_ADDR
// for i = 1 to 4 do
5081: LD_ADDR_VAR 0 1
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 4
5093: PUSH
5094: FOR_TO
5095: IFFALSE 5142
// begin wait ( 0 0$3 ) ;
5097: LD_INT 105
5099: PPUSH
5100: CALL_OW 67
// CreateCratesArea ( amount , [ north_east , north_west , south_east , south_west ] [ i ] , true ) ;
5104: LD_VAR 0 2
5108: PPUSH
5109: LD_INT 5
5111: PUSH
5112: LD_INT 4
5114: PUSH
5115: LD_INT 6
5117: PUSH
5118: LD_INT 7
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: PUSH
5127: LD_VAR 0 1
5131: ARRAY
5132: PPUSH
5133: LD_INT 1
5135: PPUSH
5136: CALL_OW 55
// end ;
5140: GO 5094
5142: POP
5143: POP
// enable ;
5144: ENABLE
// end ;
5145: PPOPN 2
5147: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount , is_in ;
5148: LD_OWVAR 1
5152: PUSH
5153: LD_INT 6300
5155: PUSH
5156: LD_LOC 10
5160: MUL
5161: PUSH
5162: LD_LOC 10
5166: PUSH
5167: LD_INT 3150
5169: PUSH
5170: LD_EXP 13
5174: PUSH
5175: LD_INT 70
5177: MUL
5178: MINUS
5179: MUL
5180: PLUS
5181: GREATER
5182: IFFALSE 5318
5184: GO 5186
5186: DISABLE
5187: LD_INT 0
5189: PPUSH
5190: PPUSH
5191: PPUSH
// begin tictac := tictac + 1 ;
5192: LD_ADDR_LOC 10
5196: PUSH
5197: LD_LOC 10
5201: PUSH
5202: LD_INT 1
5204: PLUS
5205: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5206: LD_ADDR_VAR 0 2
5210: PUSH
5211: LD_INT 3
5213: PPUSH
5214: LD_INT 5
5216: PPUSH
5217: CALL_OW 12
5221: ST_TO_ADDR
// for i = 0 to 3 do
5222: LD_ADDR_VAR 0 1
5226: PUSH
5227: DOUBLE
5228: LD_INT 0
5230: DEC
5231: ST_TO_ADDR
5232: LD_INT 3
5234: PUSH
5235: FOR_TO
5236: IFFALSE 5315
// begin is_in := GetResourceArea ( north_west + i , mat_cans ) ;
5238: LD_ADDR_VAR 0 3
5242: PUSH
5243: LD_INT 4
5245: PUSH
5246: LD_VAR 0 1
5250: PLUS
5251: PPUSH
5252: LD_INT 1
5254: PPUSH
5255: CALL_OW 287
5259: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5260: LD_VAR 0 3
5264: PUSH
5265: LD_INT 500
5267: LESS
5268: PUSH
5269: LD_INT 1
5271: PPUSH
5272: LD_INT 10
5274: PPUSH
5275: CALL_OW 12
5279: PUSH
5280: LD_VAR 0 3
5284: PUSH
5285: LD_INT 100
5287: DIV
5288: GREATER
5289: OR
5290: IFFALSE 5313
// CreateCratesArea ( amount , north_west + i , true ) ;
5292: LD_VAR 0 2
5296: PPUSH
5297: LD_INT 4
5299: PUSH
5300: LD_VAR 0 1
5304: PLUS
5305: PPUSH
5306: LD_INT 1
5308: PPUSH
5309: CALL_OW 55
// end ;
5313: GO 5235
5315: POP
5316: POP
// enable ;
5317: ENABLE
// end ; end_of_file
5318: PPOPN 3
5320: END
// every 20 20$00 trigger apemanNumber do
5321: LD_EXP 36
5325: IFFALSE 5358
5327: GO 5329
5329: DISABLE
// begin enable ;
5330: ENABLE
// if apeLevel >= 8 then
5331: LD_EXP 41
5335: PUSH
5336: LD_INT 8
5338: GREATEREQUAL
5339: IFFALSE 5344
// disable else
5341: DISABLE
5342: GO 5358
// apeLevel := apeLevel + 1 ;
5344: LD_ADDR_EXP 41
5348: PUSH
5349: LD_EXP 41
5353: PUSH
5354: LD_INT 1
5356: PLUS
5357: ST_TO_ADDR
// end ;
5358: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5359: LD_EXP 36
5363: PUSH
5364: LD_EXP 37
5368: LESS
5369: IFFALSE 5509
5371: GO 5373
5373: DISABLE
5374: LD_INT 0
5376: PPUSH
5377: PPUSH
5378: PPUSH
5379: PPUSH
// begin enable ;
5380: ENABLE
// for i := 1 to apemanPos do
5381: LD_ADDR_VAR 0 1
5385: PUSH
5386: DOUBLE
5387: LD_INT 1
5389: DEC
5390: ST_TO_ADDR
5391: LD_EXP 39
5395: PUSH
5396: FOR_TO
5397: IFFALSE 5507
// begin if apemanPlayerCount [ i ] then
5399: LD_EXP 40
5403: PUSH
5404: LD_VAR 0 1
5408: ARRAY
5409: IFFALSE 5505
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5411: LD_EXP 40
5415: PUSH
5416: LD_VAR 0 1
5420: ARRAY
5421: PUSH
5422: LD_EXP 39
5426: PUSH
5427: LD_VAR 0 1
5431: ARRAY
5432: GREATER
5433: IFFALSE 5505
// begin ape := PrepareApeman ;
5435: LD_ADDR_VAR 0 2
5439: PUSH
5440: CALL 6012 0 0
5444: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5445: LD_VAR 0 2
5449: PPUSH
5450: LD_EXP 42
5454: PUSH
5455: LD_VAR 0 1
5459: ARRAY
5460: PPUSH
5461: LD_INT 0
5463: PPUSH
5464: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5468: LD_ADDR_EXP 39
5472: PUSH
5473: LD_EXP 39
5477: PPUSH
5478: LD_VAR 0 1
5482: PPUSH
5483: LD_EXP 39
5487: PUSH
5488: LD_VAR 0 1
5492: ARRAY
5493: PUSH
5494: LD_VAR 0 2
5498: UNION
5499: PPUSH
5500: CALL_OW 1
5504: ST_TO_ADDR
// end ; end ; end ;
5505: GO 5396
5507: POP
5508: POP
// end ;
5509: PPOPN 4
5511: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5512: LD_INT 0
5514: PPUSH
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
// playersAmount := 0 ;
5521: LD_ADDR_VAR 0 3
5525: PUSH
5526: LD_INT 0
5528: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5529: LD_ADDR_VAR 0 7
5533: PUSH
5534: LD_INT 8
5536: PUSH
5537: LD_INT 9
5539: PUSH
5540: LD_INT 11
5542: PUSH
5543: LD_INT 10
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5552: LD_ADDR_EXP 42
5556: PUSH
5557: LD_INT 0
5559: PUSH
5560: LD_INT 0
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: LD_INT 0
5568: PUSH
5569: LD_INT 0
5571: PUSH
5572: LD_INT 0
5574: PUSH
5575: LD_INT 0
5577: PUSH
5578: LD_INT 0
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: ST_TO_ADDR
// for j = 1 to Side_Positions do
5591: LD_ADDR_VAR 0 4
5595: PUSH
5596: DOUBLE
5597: LD_INT 1
5599: DEC
5600: ST_TO_ADDR
5601: LD_EXP 23
5605: PUSH
5606: FOR_TO
5607: IFFALSE 5674
// if Side_Positions [ j ] then
5609: LD_EXP 23
5613: PUSH
5614: LD_VAR 0 4
5618: ARRAY
5619: IFFALSE 5672
// begin playersAmount := playersAmount + 1 ;
5621: LD_ADDR_VAR 0 3
5625: PUSH
5626: LD_VAR 0 3
5630: PUSH
5631: LD_INT 1
5633: PLUS
5634: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5635: LD_ADDR_EXP 42
5639: PUSH
5640: LD_EXP 42
5644: PPUSH
5645: LD_VAR 0 4
5649: PPUSH
5650: LD_VAR 0 7
5654: PUSH
5655: LD_EXP 23
5659: PUSH
5660: LD_VAR 0 4
5664: ARRAY
5665: ARRAY
5666: PPUSH
5667: CALL_OW 1
5671: ST_TO_ADDR
// end ;
5672: GO 5606
5674: POP
5675: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5676: LD_ADDR_EXP 38
5680: PUSH
5681: LD_INT 3
5683: PUSH
5684: LD_EXP 15
5688: MUL
5689: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5690: LD_ADDR_EXP 36
5694: PUSH
5695: LD_VAR 0 3
5699: PUSH
5700: LD_EXP 38
5704: MUL
5705: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5706: LD_ADDR_EXP 37
5710: PUSH
5711: LD_EXP 36
5715: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5716: LD_ADDR_EXP 39
5720: PUSH
5721: LD_INT 0
5723: PUSH
5724: LD_INT 0
5726: PUSH
5727: LD_INT 0
5729: PUSH
5730: LD_INT 0
5732: PUSH
5733: LD_INT 0
5735: PUSH
5736: LD_INT 0
5738: PUSH
5739: LD_INT 0
5741: PUSH
5742: LD_INT 0
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5755: LD_ADDR_EXP 40
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: LD_INT 0
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: LD_INT 0
5780: PUSH
5781: LD_INT 0
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: ST_TO_ADDR
// apeLevel := 1 ;
5794: LD_ADDR_EXP 41
5798: PUSH
5799: LD_INT 1
5801: ST_TO_ADDR
// if not apemanNumber then
5802: LD_EXP 36
5806: NOT
5807: IFFALSE 5811
// exit ;
5809: GO 6007
// for i := 1 to apemanPerPlayer do
5811: LD_ADDR_VAR 0 2
5815: PUSH
5816: DOUBLE
5817: LD_INT 1
5819: DEC
5820: ST_TO_ADDR
5821: LD_EXP 38
5825: PUSH
5826: FOR_TO
5827: IFFALSE 6005
// begin for j := 1 to Side_Positions do
5829: LD_ADDR_VAR 0 4
5833: PUSH
5834: DOUBLE
5835: LD_INT 1
5837: DEC
5838: ST_TO_ADDR
5839: LD_EXP 23
5843: PUSH
5844: FOR_TO
5845: IFFALSE 6001
// if Side_Positions [ j ] then
5847: LD_EXP 23
5851: PUSH
5852: LD_VAR 0 4
5856: ARRAY
5857: IFFALSE 5999
// begin pos := Side_Positions [ j ] ;
5859: LD_ADDR_VAR 0 6
5863: PUSH
5864: LD_EXP 23
5868: PUSH
5869: LD_VAR 0 4
5873: ARRAY
5874: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5875: LD_ADDR_EXP 40
5879: PUSH
5880: LD_EXP 40
5884: PPUSH
5885: LD_VAR 0 4
5889: PPUSH
5890: LD_EXP 40
5894: PUSH
5895: LD_VAR 0 4
5899: ARRAY
5900: PUSH
5901: LD_INT 1
5903: PLUS
5904: PPUSH
5905: CALL_OW 1
5909: ST_TO_ADDR
// ape := PrepareApeman ;
5910: LD_ADDR_VAR 0 5
5914: PUSH
5915: CALL 6012 0 0
5919: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5920: LD_ADDR_EXP 39
5924: PUSH
5925: LD_EXP 39
5929: PPUSH
5930: LD_VAR 0 4
5934: PPUSH
5935: LD_EXP 39
5939: PUSH
5940: LD_VAR 0 4
5944: ARRAY
5945: PPUSH
5946: LD_EXP 39
5950: PUSH
5951: LD_VAR 0 4
5955: ARRAY
5956: PUSH
5957: LD_INT 1
5959: PLUS
5960: PPUSH
5961: LD_VAR 0 5
5965: PPUSH
5966: CALL_OW 1
5970: PPUSH
5971: CALL_OW 1
5975: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5976: LD_VAR 0 5
5980: PPUSH
5981: LD_EXP 42
5985: PUSH
5986: LD_VAR 0 4
5990: ARRAY
5991: PPUSH
5992: LD_INT 0
5994: PPUSH
5995: CALL_OW 49
// end ;
5999: GO 5844
6001: POP
6002: POP
// end ;
6003: GO 5826
6005: POP
6006: POP
// end ;
6007: LD_VAR 0 1
6011: RET
// export function PrepareApeman ; var bonus ; begin
6012: LD_INT 0
6014: PPUSH
6015: PPUSH
// uc_side := 0 ;
6016: LD_ADDR_OWVAR 20
6020: PUSH
6021: LD_INT 0
6023: ST_TO_ADDR
// uc_nation := 0 ;
6024: LD_ADDR_OWVAR 21
6028: PUSH
6029: LD_INT 0
6031: ST_TO_ADDR
// InitHc ;
6032: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6036: LD_ADDR_VAR 0 2
6040: PUSH
6041: LD_INT 1
6043: NEG
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 1
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: PUSH
6056: LD_OWVAR 1
6060: PUSH
6061: LD_INT 3
6063: MOD
6064: PUSH
6065: LD_INT 1
6067: PLUS
6068: ARRAY
6069: ST_TO_ADDR
// hc_class := class_apeman ;
6070: LD_ADDR_OWVAR 28
6074: PUSH
6075: LD_INT 12
6077: ST_TO_ADDR
// hc_gallery :=  ;
6078: LD_ADDR_OWVAR 33
6082: PUSH
6083: LD_STRING 
6085: ST_TO_ADDR
// hc_name :=  ;
6086: LD_ADDR_OWVAR 26
6090: PUSH
6091: LD_STRING 
6093: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6094: LD_ADDR_OWVAR 31
6098: PUSH
6099: LD_EXP 41
6103: PUSH
6104: LD_VAR 0 2
6108: PLUS
6109: PUSH
6110: LD_EXP 41
6114: PUSH
6115: LD_VAR 0 2
6119: PLUS
6120: PUSH
6121: LD_EXP 41
6125: PUSH
6126: LD_VAR 0 2
6130: PLUS
6131: PUSH
6132: LD_EXP 41
6136: PUSH
6137: LD_VAR 0 2
6141: PLUS
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6149: LD_ADDR_OWVAR 35
6153: PUSH
6154: LD_INT 10
6156: PUSH
6157: LD_VAR 0 2
6161: MUL
6162: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6163: LD_ADDR_OWVAR 29
6167: PUSH
6168: LD_INT 12
6170: PUSH
6171: LD_INT 10
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: ST_TO_ADDR
// result := CreateHuman ;
6178: LD_ADDR_VAR 0 1
6182: PUSH
6183: CALL_OW 44
6187: ST_TO_ADDR
// end ;
6188: LD_VAR 0 1
6192: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6193: LD_INT 0
6195: PPUSH
6196: PPUSH
6197: PPUSH
// if not ape then
6198: LD_VAR 0 1
6202: NOT
6203: IFFALSE 6207
// exit ;
6205: GO 6332
// side := GetSide ( ape ) ;
6207: LD_ADDR_VAR 0 3
6211: PUSH
6212: LD_VAR 0 1
6216: PPUSH
6217: CALL_OW 255
6221: ST_TO_ADDR
// if not side then
6222: LD_VAR 0 3
6226: NOT
6227: IFFALSE 6281
// begin for i = 1 to apemanPos do
6229: LD_ADDR_VAR 0 4
6233: PUSH
6234: DOUBLE
6235: LD_INT 1
6237: DEC
6238: ST_TO_ADDR
6239: LD_EXP 39
6243: PUSH
6244: FOR_TO
6245: IFFALSE 6279
// if ape in apemanPos [ i ] then
6247: LD_VAR 0 1
6251: PUSH
6252: LD_EXP 39
6256: PUSH
6257: LD_VAR 0 4
6261: ARRAY
6262: IN
6263: IFFALSE 6277
// begin side := i ;
6265: LD_ADDR_VAR 0 3
6269: PUSH
6270: LD_VAR 0 4
6274: ST_TO_ADDR
// break ;
6275: GO 6279
// end ;
6277: GO 6244
6279: POP
6280: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6281: LD_ADDR_EXP 39
6285: PUSH
6286: LD_EXP 39
6290: PPUSH
6291: LD_VAR 0 3
6295: PPUSH
6296: LD_EXP 39
6300: PUSH
6301: LD_VAR 0 3
6305: ARRAY
6306: PUSH
6307: LD_VAR 0 1
6311: DIFF
6312: PPUSH
6313: CALL_OW 1
6317: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6318: LD_ADDR_EXP 36
6322: PUSH
6323: LD_EXP 36
6327: PUSH
6328: LD_INT 1
6330: MINUS
6331: ST_TO_ADDR
// end ; end_of_file
6332: LD_VAR 0 2
6336: RET
// var respawn_queue ; export function init_respawn ; begin
6337: LD_INT 0
6339: PPUSH
// if not def_people_respawning then
6340: LD_EXP 60
6344: NOT
6345: IFFALSE 6349
// exit ;
6347: GO 6391
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6349: LD_ADDR_LOC 11
6353: PUSH
6354: LD_INT 0
6356: PUSH
6357: LD_INT 0
6359: PUSH
6360: LD_INT 0
6362: PUSH
6363: LD_INT 0
6365: PUSH
6366: LD_INT 0
6368: PUSH
6369: LD_INT 0
6371: PUSH
6372: LD_INT 0
6374: PUSH
6375: LD_INT 0
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: ST_TO_ADDR
// enable ( 10 ) ;
6388: LD_INT 10
6390: ENABLE_MARKED
// end ;
6391: LD_VAR 0 1
6395: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6396: GO 6398
6398: DISABLE
6399: LD_INT 0
6401: PPUSH
6402: PPUSH
6403: PPUSH
6404: PPUSH
// begin for side = 1 to Side_Positions do
6405: LD_ADDR_VAR 0 4
6409: PUSH
6410: DOUBLE
6411: LD_INT 1
6413: DEC
6414: ST_TO_ADDR
6415: LD_EXP 23
6419: PUSH
6420: FOR_TO
6421: IFFALSE 6587
// if Side_Positions [ side ] then
6423: LD_EXP 23
6427: PUSH
6428: LD_VAR 0 4
6432: ARRAY
6433: IFFALSE 6585
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6435: LD_ADDR_VAR 0 2
6439: PUSH
6440: LD_INT 22
6442: PUSH
6443: LD_VAR 0 4
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PUSH
6452: LD_INT 21
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 3
6464: PUSH
6465: LD_INT 23
6467: PUSH
6468: LD_INT 0
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: PPUSH
6481: CALL_OW 69
6485: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6486: LD_VAR 0 2
6490: PUSH
6491: LD_EXP 9
6495: LESS
6496: PUSH
6497: LD_LOC 11
6501: PUSH
6502: LD_VAR 0 4
6506: ARRAY
6507: NOT
6508: AND
6509: IFFALSE 6525
// set_queue ( side , TICK ) ;
6511: LD_VAR 0 4
6515: PPUSH
6516: LD_OWVAR 1
6520: PPUSH
6521: CALL 6824 0 2
// time := TICK - respawn_queue [ side ] ;
6525: LD_ADDR_VAR 0 3
6529: PUSH
6530: LD_OWVAR 1
6534: PUSH
6535: LD_LOC 11
6539: PUSH
6540: LD_VAR 0 4
6544: ARRAY
6545: MINUS
6546: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6547: LD_LOC 11
6551: PUSH
6552: LD_VAR 0 4
6556: ARRAY
6557: PUSH
6558: LD_VAR 0 3
6562: PUSH
6563: LD_EXP 16
6567: GREATER
6568: AND
6569: IFFALSE 6585
// respawn_character ( side , time ) ;
6571: LD_VAR 0 4
6575: PPUSH
6576: LD_VAR 0 3
6580: PPUSH
6581: CALL 6593 0 2
// end ;
6585: GO 6420
6587: POP
6588: POP
// enable ;
6589: ENABLE
// end ;
6590: PPOPN 4
6592: END
// function respawn_character ( side , time ) ; var dep ; begin
6593: LD_INT 0
6595: PPUSH
6596: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6597: LD_INT 0
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: CALL_OW 12
6607: PUSH
6608: LD_VAR 0 2
6612: PUSH
6613: LD_EXP 17
6617: LESS
6618: AND
6619: IFFALSE 6623
// exit ;
6621: GO 6819
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6623: LD_ADDR_VAR 0 4
6627: PUSH
6628: LD_INT 22
6630: PUSH
6631: LD_VAR 0 1
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: PUSH
6640: LD_INT 2
6642: PUSH
6643: LD_INT 30
6645: PUSH
6646: LD_INT 0
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 30
6655: PUSH
6656: LD_INT 1
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 50
6670: PUSH
6671: EMPTY
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 69
6683: ST_TO_ADDR
// if not dep then
6684: LD_VAR 0 4
6688: NOT
6689: IFFALSE 6695
// exit else
6691: GO 6819
6693: GO 6719
// dep := dep [ Rand ( 1 , dep ) ] ;
6695: LD_ADDR_VAR 0 4
6699: PUSH
6700: LD_VAR 0 4
6704: PUSH
6705: LD_INT 1
6707: PPUSH
6708: LD_VAR 0 4
6712: PPUSH
6713: CALL_OW 12
6717: ARRAY
6718: ST_TO_ADDR
// uc_side := side ;
6719: LD_ADDR_OWVAR 20
6723: PUSH
6724: LD_VAR 0 1
6728: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6729: LD_ADDR_OWVAR 21
6733: PUSH
6734: LD_EXP 24
6738: PUSH
6739: LD_VAR 0 1
6743: ARRAY
6744: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6745: LD_INT 0
6747: PPUSH
6748: LD_INT 0
6750: PPUSH
6751: LD_EXP 10
6755: PUSH
6756: LD_INT 2
6758: DIV
6759: PPUSH
6760: CALL_OW 380
// hc_importance := 0 ;
6764: LD_ADDR_OWVAR 32
6768: PUSH
6769: LD_INT 0
6771: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6772: CALL_OW 44
6776: PPUSH
6777: LD_VAR 0 4
6781: PPUSH
6782: CALL_OW 250
6786: PPUSH
6787: LD_VAR 0 4
6791: PPUSH
6792: CALL_OW 251
6796: PPUSH
6797: LD_INT 10
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: CALL_OW 50
// set_queue ( side , 0 ) ;
6807: LD_VAR 0 1
6811: PPUSH
6812: LD_INT 0
6814: PPUSH
6815: CALL 6824 0 2
// end ;
6819: LD_VAR 0 3
6823: RET
// function set_queue ( side , time ) ; begin
6824: LD_INT 0
6826: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6827: LD_ADDR_LOC 11
6831: PUSH
6832: LD_LOC 11
6836: PPUSH
6837: LD_VAR 0 1
6841: PPUSH
6842: CALL_OW 3
6846: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6847: LD_ADDR_LOC 11
6851: PUSH
6852: LD_LOC 11
6856: PPUSH
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_VAR 0 2
6866: PPUSH
6867: CALL_OW 2
6871: ST_TO_ADDR
// end ; end_of_file
6872: LD_VAR 0 3
6876: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6877: LD_VAR 0 1
6881: PPUSH
6882: CALL_OW 266
6886: PUSH
6887: LD_INT 0
6889: PUSH
6890: LD_INT 1
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: IN
6897: IFFALSE 6922
// SetBName ( b , @ & GetSide ( b ) ) ;
6899: LD_VAR 0 1
6903: PPUSH
6904: LD_STRING @
6906: PUSH
6907: LD_VAR 0 1
6911: PPUSH
6912: CALL_OW 255
6916: STR
6917: PPUSH
6918: CALL_OW 500
// if def_game_rules then
6922: LD_EXP 49
6926: IFFALSE 6963
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6928: LD_VAR 0 1
6932: PPUSH
6933: LD_VAR 0 1
6937: PPUSH
6938: CALL_OW 266
6942: PPUSH
6943: LD_VAR 0 1
6947: PPUSH
6948: CALL_OW 255
6952: PPUSH
6953: LD_INT 0
6955: PPUSH
6956: LD_INT 1
6958: PPUSH
6959: CALL 16772 0 5
// end ;
6963: PPOPN 2
6965: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6966: LD_VAR 0 1
6970: PPUSH
6971: CALL_OW 266
6975: PUSH
6976: LD_INT 0
6978: PUSH
6979: LD_INT 1
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: IN
6986: IFFALSE 7011
// SetBName ( b , @ & GetSide ( b ) ) ;
6988: LD_VAR 0 1
6992: PPUSH
6993: LD_STRING @
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 255
7005: STR
7006: PPUSH
7007: CALL_OW 500
// if def_game_rules then
7011: LD_EXP 49
7015: IFFALSE 7054
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_VAR 0 1
7026: PPUSH
7027: CALL_OW 266
7031: PPUSH
7032: LD_VAR 0 1
7036: PPUSH
7037: CALL_OW 255
7041: PPUSH
7042: LD_VAR 0 2
7046: PPUSH
7047: LD_INT 1
7049: PPUSH
7050: CALL 16772 0 5
// end ;
7054: PPOPN 3
7056: END
// on VehicleConstructed ( veh , fac ) do var side ;
7057: LD_INT 0
7059: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 263
7069: PUSH
7070: LD_INT 5
7072: EQUAL
7073: IFFALSE 7215
// begin side := GetSide ( veh ) ;
7075: LD_ADDR_VAR 0 3
7079: PUSH
7080: LD_VAR 0 1
7084: PPUSH
7085: CALL_OW 255
7089: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7090: LD_ADDR_EXP 39
7094: PUSH
7095: LD_EXP 39
7099: PPUSH
7100: LD_VAR 0 3
7104: PPUSH
7105: LD_EXP 39
7109: PUSH
7110: LD_VAR 0 3
7114: ARRAY
7115: PPUSH
7116: LD_INT 52
7118: PUSH
7119: EMPTY
7120: LIST
7121: PPUSH
7122: CALL_OW 72
7126: PUSH
7127: LD_INT 22
7129: PUSH
7130: LD_VAR 0 3
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 2
7141: PUSH
7142: LD_INT 33
7144: PUSH
7145: LD_INT 5
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 25
7154: PUSH
7155: LD_INT 12
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 25
7164: PUSH
7165: LD_INT 15
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 25
7174: PUSH
7175: LD_INT 16
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 25
7184: PUSH
7185: LD_INT 17
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PPUSH
7204: CALL_OW 69
7208: UNION
7209: PPUSH
7210: CALL_OW 1
7214: ST_TO_ADDR
// end ; end ;
7215: PPOPN 3
7217: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7218: LD_INT 0
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7224: LD_VAR 0 1
7228: PPUSH
7229: CALL_OW 257
7233: PUSH
7234: LD_INT 12
7236: PUSH
7237: LD_INT 15
7239: PUSH
7240: LD_INT 17
7242: PUSH
7243: LD_INT 16
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: IN
7252: PUSH
7253: LD_VAR 0 1
7257: PPUSH
7258: CALL_OW 263
7262: PUSH
7263: LD_INT 5
7265: EQUAL
7266: OR
7267: IFFALSE 7278
// ApeKilled ( j ) ;
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL 6193 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7278: LD_VAR 0 1
7282: PPUSH
7283: CALL_OW 266
7287: PUSH
7288: LD_INT 0
7290: PUSH
7291: LD_INT 1
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: IN
7298: IFFALSE 7380
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7300: LD_ADDR_VAR 0 4
7304: PUSH
7305: LD_EXP 23
7309: PUSH
7310: LD_VAR 0 1
7314: PPUSH
7315: CALL_OW 255
7319: ARRAY
7320: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7321: LD_ADDR_VAR 0 2
7325: PUSH
7326: LD_EXP 32
7330: PUSH
7331: LD_VAR 0 4
7335: ARRAY
7336: PUSH
7337: LD_INT 1
7339: ARRAY
7340: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_EXP 32
7350: PUSH
7351: LD_VAR 0 4
7355: ARRAY
7356: PUSH
7357: LD_INT 2
7359: ARRAY
7360: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7361: LD_VAR 0 2
7365: PPUSH
7366: LD_VAR 0 3
7370: PPUSH
7371: CALL_OW 420
7375: PPUSH
7376: CALL_OW 419
// end ; if def_game_rules then
7380: LD_EXP 49
7384: IFFALSE 7483
// if ( GetType ( j ) = 3 ) then
7386: LD_VAR 0 1
7390: PPUSH
7391: CALL_OW 247
7395: PUSH
7396: LD_INT 3
7398: EQUAL
7399: IFFALSE 7439
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7401: LD_VAR 0 1
7405: PPUSH
7406: LD_VAR 0 1
7410: PPUSH
7411: CALL_OW 266
7415: PPUSH
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 255
7425: PPUSH
7426: LD_INT 0
7428: PPUSH
7429: LD_INT 1
7431: NEG
7432: PPUSH
7433: CALL 16772 0 5
7437: GO 7483
// if ( GetChassis ( j ) = 25 ) then
7439: LD_VAR 0 1
7443: PPUSH
7444: CALL_OW 265
7448: PUSH
7449: LD_INT 25
7451: EQUAL
7452: IFFALSE 7483
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7454: LD_VAR 0 1
7458: PPUSH
7459: LD_INT 37
7461: PPUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 255
7471: PPUSH
7472: LD_INT 0
7474: PPUSH
7475: LD_INT 1
7477: NEG
7478: PPUSH
7479: CALL 16772 0 5
// end ;
7483: PPOPN 5
7485: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7486: LD_EXP 49
7490: PUSH
7491: LD_VAR 0 1
7495: PPUSH
7496: CALL_OW 265
7500: PUSH
7501: LD_INT 25
7503: EQUAL
7504: AND
7505: IFFALSE 7537
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7507: LD_VAR 0 1
7511: PPUSH
7512: LD_INT 37
7514: PPUSH
7515: LD_VAR 0 1
7519: PPUSH
7520: CALL_OW 255
7524: PPUSH
7525: LD_VAR 0 3
7529: PPUSH
7530: LD_INT 1
7532: PPUSH
7533: CALL 16772 0 5
// end ;
7537: PPOPN 4
7539: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7540: LD_VAR 0 1
7544: PPUSH
7545: LD_VAR 0 2
7549: PPUSH
7550: LD_VAR 0 3
7554: PPUSH
7555: LD_OWVAR 2
7559: PPUSH
7560: CALL 18259 0 4
7564: PPOPN 3
7566: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
7567: LD_INT 0
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
// artefact_number := 3 ;
7575: LD_ADDR_EXP 43
7579: PUSH
7580: LD_INT 3
7582: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
7583: LD_ADDR_EXP 44
7587: PUSH
7588: LD_INT 1
7590: PUSH
7591: LD_INT 0
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: LD_INT 0
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
7610: LD_ADDR_EXP 45
7614: PUSH
7615: LD_INT 1
7617: PUSH
7618: LD_INT 3
7620: PUSH
7621: LD_INT 5
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: LIST
7628: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
7629: LD_ADDR_VAR 0 2
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: LD_INT 4
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: PUSH
7644: LD_INT 2
7646: PUSH
7647: LD_INT 5
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PUSH
7654: LD_INT 3
7656: PUSH
7657: LD_INT 9
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
7669: LD_ADDR_VAR 0 3
7673: PUSH
7674: LD_INT 3
7676: PUSH
7677: LD_INT 4
7679: PUSH
7680: LD_INT 3
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: LIST
7687: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
7688: LD_ADDR_VAR 0 4
7692: PUSH
7693: LD_INT 150
7695: PUSH
7696: LD_INT 250
7698: PUSH
7699: LD_INT 400
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
7707: LD_ADDR_VAR 0 5
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: LD_INT 10
7717: PUSH
7718: LD_INT 20
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: LIST
7725: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
7726: LD_ADDR_VAR 0 6
7730: PUSH
7731: LD_INT 6
7733: PUSH
7734: LD_INT 18
7736: PUSH
7737: LD_INT 50
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
7745: LD_VAR 0 2
7749: PPUSH
7750: LD_VAR 0 3
7754: PPUSH
7755: LD_VAR 0 4
7759: PPUSH
7760: LD_VAR 0 5
7764: PPUSH
7765: LD_VAR 0 6
7769: PPUSH
7770: CALL 7779 0 5
// end ;
7774: LD_VAR 0 1
7778: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
7779: LD_INT 0
7781: PPUSH
7782: PPUSH
7783: PPUSH
7784: PPUSH
7785: PPUSH
// disable ( 1 ) ;
7786: LD_INT 1
7788: DISABLE_MARKED
// disable ( 5 ) ;
7789: LD_INT 5
7791: DISABLE_MARKED
// disable ( 6 ) ;
7792: LD_INT 6
7794: DISABLE_MARKED
// disable ( 7 ) ;
7795: LD_INT 7
7797: DISABLE_MARKED
// for side = 1 to 8 do
7798: LD_ADDR_VAR 0 9
7802: PUSH
7803: DOUBLE
7804: LD_INT 1
7806: DEC
7807: ST_TO_ADDR
7808: LD_INT 8
7810: PUSH
7811: FOR_TO
7812: IFFALSE 7828
// SetArtifactRes ( side , state_enabled ) ;
7814: LD_VAR 0 9
7818: PPUSH
7819: LD_INT 1
7821: PPUSH
7822: CALL_OW 467
7826: GO 7811
7828: POP
7829: POP
// for un = 0 to ( artefact_number - 1 ) do
7830: LD_ADDR_VAR 0 7
7834: PUSH
7835: DOUBLE
7836: LD_INT 0
7838: DEC
7839: ST_TO_ADDR
7840: LD_EXP 43
7844: PUSH
7845: LD_INT 1
7847: MINUS
7848: PUSH
7849: FOR_TO
7850: IFFALSE 8248
// begin base := un * 100 ;
7852: LD_ADDR_VAR 0 10
7856: PUSH
7857: LD_VAR 0 7
7861: PUSH
7862: LD_INT 100
7864: MUL
7865: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
7866: LD_VAR 0 10
7870: PUSH
7871: LD_INT 1
7873: PLUS
7874: PPUSH
7875: LD_VAR 0 1
7879: PUSH
7880: LD_VAR 0 7
7884: PUSH
7885: LD_INT 1
7887: PLUS
7888: ARRAY
7889: PUSH
7890: LD_INT 1
7892: ARRAY
7893: PPUSH
7894: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7898: LD_VAR 0 10
7902: PUSH
7903: LD_INT 2
7905: PLUS
7906: PPUSH
7907: LD_VAR 0 1
7911: PUSH
7912: LD_VAR 0 7
7916: PUSH
7917: LD_INT 1
7919: PLUS
7920: ARRAY
7921: PUSH
7922: LD_INT 2
7924: ARRAY
7925: PPUSH
7926: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7930: LD_VAR 0 10
7934: PUSH
7935: LD_INT 3
7937: PLUS
7938: PPUSH
7939: LD_VAR 0 2
7943: PUSH
7944: LD_VAR 0 7
7948: PUSH
7949: LD_INT 1
7951: PLUS
7952: ARRAY
7953: PPUSH
7954: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7958: LD_VAR 0 10
7962: PUSH
7963: LD_INT 5
7965: PLUS
7966: PPUSH
7967: LD_VAR 0 3
7971: PUSH
7972: LD_VAR 0 7
7976: PUSH
7977: LD_INT 1
7979: PLUS
7980: ARRAY
7981: PPUSH
7982: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7986: LD_VAR 0 10
7990: PUSH
7991: LD_INT 6
7993: PLUS
7994: PPUSH
7995: LD_VAR 0 4
7999: PUSH
8000: LD_VAR 0 7
8004: PUSH
8005: LD_INT 1
8007: PLUS
8008: ARRAY
8009: PPUSH
8010: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
8014: LD_VAR 0 10
8018: PUSH
8019: LD_INT 7
8021: PLUS
8022: PPUSH
8023: LD_VAR 0 5
8027: PUSH
8028: LD_VAR 0 7
8032: PUSH
8033: LD_INT 1
8035: PLUS
8036: ARRAY
8037: PPUSH
8038: CALL_OW 109
// SetTag ( base + 08 , false ) ;
8042: LD_VAR 0 10
8046: PUSH
8047: LD_INT 8
8049: PLUS
8050: PPUSH
8051: LD_INT 0
8053: PPUSH
8054: CALL_OW 109
// SetTag ( base + 09 , false ) ;
8058: LD_VAR 0 10
8062: PUSH
8063: LD_INT 9
8065: PLUS
8066: PPUSH
8067: LD_INT 0
8069: PPUSH
8070: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
8074: LD_VAR 0 10
8078: PUSH
8079: LD_INT 11
8081: PLUS
8082: PPUSH
8083: LD_INT 0
8085: PPUSH
8086: CALL_OW 109
// SetTag ( base + 12 , false ) ;
8090: LD_VAR 0 10
8094: PUSH
8095: LD_INT 12
8097: PLUS
8098: PPUSH
8099: LD_INT 0
8101: PPUSH
8102: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8106: LD_VAR 0 10
8110: PUSH
8111: LD_INT 13
8113: PLUS
8114: PPUSH
8115: LD_INT 0
8117: PPUSH
8118: CALL_OW 109
// for i = 0 to 7 do
8122: LD_ADDR_VAR 0 8
8126: PUSH
8127: DOUBLE
8128: LD_INT 0
8130: DEC
8131: ST_TO_ADDR
8132: LD_INT 7
8134: PUSH
8135: FOR_TO
8136: IFFALSE 8244
// begin SetTag ( base + i * 10 + 21 , false ) ;
8138: LD_VAR 0 10
8142: PUSH
8143: LD_VAR 0 8
8147: PUSH
8148: LD_INT 10
8150: MUL
8151: PLUS
8152: PUSH
8153: LD_INT 21
8155: PLUS
8156: PPUSH
8157: LD_INT 0
8159: PPUSH
8160: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
8164: LD_VAR 0 10
8168: PUSH
8169: LD_VAR 0 8
8173: PUSH
8174: LD_INT 10
8176: MUL
8177: PLUS
8178: PUSH
8179: LD_INT 22
8181: PLUS
8182: PPUSH
8183: LD_INT 0
8185: PPUSH
8186: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
8190: LD_VAR 0 10
8194: PUSH
8195: LD_VAR 0 8
8199: PUSH
8200: LD_INT 10
8202: MUL
8203: PLUS
8204: PUSH
8205: LD_INT 23
8207: PLUS
8208: PPUSH
8209: LD_INT 0
8211: PPUSH
8212: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
8216: LD_VAR 0 10
8220: PUSH
8221: LD_VAR 0 8
8225: PUSH
8226: LD_INT 10
8228: MUL
8229: PLUS
8230: PUSH
8231: LD_INT 25
8233: PLUS
8234: PPUSH
8235: LD_INT 0
8237: PPUSH
8238: CALL_OW 109
// end ;
8242: GO 8135
8244: POP
8245: POP
// end ;
8246: GO 7849
8248: POP
8249: POP
// enable ( 20 ) ;
8250: LD_INT 20
8252: ENABLE_MARKED
// labs_in_use := [ ] ;
8253: LD_ADDR_EXP 46
8257: PUSH
8258: EMPTY
8259: ST_TO_ADDR
// if def_artefact_one then
8260: LD_EXP 1
8264: IFFALSE 8291
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
8266: LD_INT 4
8268: PPUSH
8269: LD_EXP 45
8273: PUSH
8274: LD_INT 1
8276: ARRAY
8277: PPUSH
8278: LD_INT 16
8280: PPUSH
8281: LD_INT 0
8283: PPUSH
8284: CALL_OW 59
// enable ( 5 ) ;
8288: LD_INT 5
8290: ENABLE_MARKED
// end ; if def_artefact_two then
8291: LD_EXP 2
8295: IFFALSE 8322
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
8297: LD_INT 4
8299: PPUSH
8300: LD_EXP 45
8304: PUSH
8305: LD_INT 2
8307: ARRAY
8308: PPUSH
8309: LD_INT 16
8311: PPUSH
8312: LD_INT 0
8314: PPUSH
8315: CALL_OW 59
// enable ( 6 ) ;
8319: LD_INT 6
8321: ENABLE_MARKED
// end ; if def_artefact_three then
8322: LD_EXP 3
8326: IFFALSE 8353
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
8328: LD_INT 4
8330: PPUSH
8331: LD_EXP 45
8335: PUSH
8336: LD_INT 3
8338: ARRAY
8339: PPUSH
8340: LD_INT 16
8342: PPUSH
8343: LD_INT 0
8345: PPUSH
8346: CALL_OW 59
// enable ( 7 ) ;
8350: LD_INT 7
8352: ENABLE_MARKED
// end ; end ;
8353: LD_VAR 0 6
8357: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
8358: LD_INT 0
8360: PPUSH
8361: PPUSH
// begin art := artefact_num [ size ] ;
8362: LD_ADDR_VAR 0 3
8366: PUSH
8367: LD_EXP 44
8371: PUSH
8372: LD_VAR 0 2
8376: ARRAY
8377: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8378: LD_ADDR_VAR 0 4
8382: PUSH
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 1
8390: MINUS
8391: PUSH
8392: LD_INT 100
8394: MUL
8395: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
8396: LD_VAR 0 4
8400: PUSH
8401: LD_INT 9
8403: PLUS
8404: PPUSH
8405: LD_INT 0
8407: PPUSH
8408: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8412: LD_VAR 0 4
8416: PUSH
8417: LD_INT 13
8419: PLUS
8420: PPUSH
8421: LD_INT 0
8423: PPUSH
8424: CALL_OW 109
// Init_Lab ( art ) ;
8428: LD_VAR 0 3
8432: PPUSH
8433: CALL 9909 0 1
// end ;
8437: PPOPN 4
8439: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
8440: LD_INT 0
8442: PPUSH
8443: PPUSH
8444: PPUSH
// begin art := artefact_num [ size ] ;
8445: LD_ADDR_VAR 0 3
8449: PUSH
8450: LD_EXP 44
8454: PUSH
8455: LD_VAR 0 2
8459: ARRAY
8460: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8461: LD_ADDR_VAR 0 4
8465: PUSH
8466: LD_VAR 0 3
8470: PUSH
8471: LD_INT 1
8473: MINUS
8474: PUSH
8475: LD_INT 100
8477: MUL
8478: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
8479: LD_VAR 0 4
8483: PUSH
8484: LD_INT 9
8486: PLUS
8487: PPUSH
8488: LD_INT 1
8490: PPUSH
8491: CALL_OW 109
// SetTag ( base + 13 , un ) ;
8495: LD_VAR 0 4
8499: PUSH
8500: LD_INT 13
8502: PLUS
8503: PPUSH
8504: LD_VAR 0 1
8508: PPUSH
8509: CALL_OW 109
// if GetTag ( base + 11 ) then
8513: LD_VAR 0 4
8517: PUSH
8518: LD_INT 11
8520: PLUS
8521: PPUSH
8522: CALL_OW 110
8526: IFFALSE 8689
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
8528: LD_ADDR_VAR 0 5
8532: PUSH
8533: LD_VAR 0 4
8537: PUSH
8538: LD_INT 11
8540: PLUS
8541: PPUSH
8542: CALL_OW 110
8546: PPUSH
8547: CALL_OW 255
8551: ST_TO_ADDR
// if GetTag ( base + 12 ) then
8552: LD_VAR 0 4
8556: PUSH
8557: LD_INT 12
8559: PLUS
8560: PPUSH
8561: CALL_OW 110
8565: IFFALSE 8633
// begin ComCancel ( GetTag ( base + 11 ) ) ;
8567: LD_VAR 0 4
8571: PUSH
8572: LD_INT 11
8574: PLUS
8575: PPUSH
8576: CALL_OW 110
8580: PPUSH
8581: CALL_OW 127
// wait ( 5 ) ;
8585: LD_INT 5
8587: PPUSH
8588: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
8592: LD_ADDR_EXP 46
8596: PUSH
8597: LD_EXP 46
8601: PUSH
8602: LD_VAR 0 4
8606: PUSH
8607: LD_INT 11
8609: PLUS
8610: PPUSH
8611: CALL_OW 110
8615: DIFF
8616: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
8617: LD_VAR 0 4
8621: PUSH
8622: LD_INT 12
8624: PLUS
8625: PPUSH
8626: LD_INT 0
8628: PPUSH
8629: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
8633: LD_VAR 0 4
8637: PUSH
8638: LD_VAR 0 5
8642: PUSH
8643: LD_INT 10
8645: MUL
8646: PLUS
8647: PUSH
8648: LD_INT 11
8650: PLUS
8651: PPUSH
8652: CALL_OW 110
8656: NOT
8657: IFFALSE 8673
// DeInit_Lab ( side , art ) ;
8659: LD_VAR 0 5
8663: PPUSH
8664: LD_VAR 0 3
8668: PPUSH
8669: CALL 10445 0 2
// SetTag ( base + 11 , 0 ) ;
8673: LD_VAR 0 4
8677: PUSH
8678: LD_INT 11
8680: PLUS
8681: PPUSH
8682: LD_INT 0
8684: PPUSH
8685: CALL_OW 109
// end ; end ;
8689: PPOPN 5
8691: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
8692: LD_INT 0
8694: PPUSH
8695: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8696: LD_ADDR_VAR 0 3
8700: PUSH
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 255
8710: PUSH
8711: LD_INT 1
8713: MINUS
8714: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8715: LD_ADDR_VAR 0 2
8719: PUSH
8720: DOUBLE
8721: LD_INT 0
8723: DEC
8724: ST_TO_ADDR
8725: LD_EXP 43
8729: PUSH
8730: LD_INT 1
8732: MINUS
8733: PUSH
8734: FOR_TO
8735: IFFALSE 8777
// if lab = GetTag ( un * 100 + 11 ) then
8737: LD_VAR 0 1
8741: PUSH
8742: LD_VAR 0 2
8746: PUSH
8747: LD_INT 100
8749: MUL
8750: PUSH
8751: LD_INT 11
8753: PLUS
8754: PPUSH
8755: CALL_OW 110
8759: EQUAL
8760: IFFALSE 8775
// Init_Lab ( un + 1 ) ;
8762: LD_VAR 0 2
8766: PUSH
8767: LD_INT 1
8769: PLUS
8770: PPUSH
8771: CALL 9909 0 1
8775: GO 8734
8777: POP
8778: POP
// end ;
8779: PPOPN 3
8781: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
8782: LD_INT 0
8784: PPUSH
8785: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8786: LD_ADDR_VAR 0 4
8790: PUSH
8791: LD_VAR 0 1
8795: PPUSH
8796: CALL_OW 255
8800: PUSH
8801: LD_INT 1
8803: MINUS
8804: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8805: LD_ADDR_VAR 0 3
8809: PUSH
8810: DOUBLE
8811: LD_INT 0
8813: DEC
8814: ST_TO_ADDR
8815: LD_EXP 43
8819: PUSH
8820: LD_INT 1
8822: MINUS
8823: PUSH
8824: FOR_TO
8825: IFFALSE 8943
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8827: LD_VAR 0 3
8831: PUSH
8832: LD_INT 100
8834: MUL
8835: PUSH
8836: LD_INT 11
8838: PLUS
8839: PPUSH
8840: CALL_OW 110
8844: PUSH
8845: LD_VAR 0 1
8849: EQUAL
8850: PUSH
8851: LD_VAR 0 3
8855: PUSH
8856: LD_INT 100
8858: MUL
8859: PUSH
8860: LD_INT 12
8862: PLUS
8863: PPUSH
8864: CALL_OW 110
8868: AND
8869: IFFALSE 8941
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
8871: LD_VAR 0 3
8875: PUSH
8876: LD_INT 100
8878: MUL
8879: PUSH
8880: LD_VAR 0 4
8884: PUSH
8885: LD_INT 10
8887: MUL
8888: PLUS
8889: PUSH
8890: LD_INT 22
8892: PLUS
8893: PPUSH
8894: LD_VAR 0 2
8898: PPUSH
8899: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8903: LD_VAR 0 3
8907: PUSH
8908: LD_INT 100
8910: MUL
8911: PUSH
8912: LD_INT 12
8914: PLUS
8915: PPUSH
8916: LD_INT 0
8918: PPUSH
8919: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8923: LD_ADDR_EXP 46
8927: PUSH
8928: LD_EXP 46
8932: PUSH
8933: LD_VAR 0 1
8937: DIFF
8938: ST_TO_ADDR
// break ;
8939: GO 8943
// end ;
8941: GO 8824
8943: POP
8944: POP
// Update_Artefact ( lab ) ;
8945: LD_VAR 0 1
8949: PPUSH
8950: CALL 10584 0 1
// end ;
8954: PPOPN 4
8956: END
// on SpecResearchComplete ( lab ) do var un , side ;
8957: LD_INT 0
8959: PPUSH
8960: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8961: LD_ADDR_VAR 0 3
8965: PUSH
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL_OW 255
8975: PUSH
8976: LD_INT 1
8978: MINUS
8979: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8980: LD_ADDR_VAR 0 2
8984: PUSH
8985: DOUBLE
8986: LD_INT 0
8988: DEC
8989: ST_TO_ADDR
8990: LD_EXP 43
8994: PUSH
8995: LD_INT 1
8997: MINUS
8998: PUSH
8999: FOR_TO
9000: IFFALSE 9146
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
9002: LD_VAR 0 2
9006: PUSH
9007: LD_INT 100
9009: MUL
9010: PUSH
9011: LD_INT 11
9013: PLUS
9014: PPUSH
9015: CALL_OW 110
9019: PUSH
9020: LD_VAR 0 1
9024: EQUAL
9025: PUSH
9026: LD_VAR 0 2
9030: PUSH
9031: LD_INT 100
9033: MUL
9034: PUSH
9035: LD_INT 12
9037: PLUS
9038: PPUSH
9039: CALL_OW 110
9043: AND
9044: IFFALSE 9144
// begin SetTag ( un * 100 + 12 , false ) ;
9046: LD_VAR 0 2
9050: PUSH
9051: LD_INT 100
9053: MUL
9054: PUSH
9055: LD_INT 12
9057: PLUS
9058: PPUSH
9059: LD_INT 0
9061: PPUSH
9062: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
9066: LD_VAR 0 2
9070: PUSH
9071: LD_INT 100
9073: MUL
9074: PUSH
9075: LD_VAR 0 3
9079: PUSH
9080: LD_INT 10
9082: MUL
9083: PLUS
9084: PUSH
9085: LD_INT 21
9087: PLUS
9088: PPUSH
9089: LD_INT 1
9091: PPUSH
9092: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
9096: LD_VAR 0 2
9100: PUSH
9101: LD_INT 100
9103: MUL
9104: PUSH
9105: LD_VAR 0 3
9109: PUSH
9110: LD_INT 10
9112: MUL
9113: PLUS
9114: PUSH
9115: LD_INT 25
9117: PLUS
9118: PPUSH
9119: LD_VAR 0 1
9123: PPUSH
9124: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
9128: LD_ADDR_EXP 46
9132: PUSH
9133: LD_EXP 46
9137: PUSH
9138: LD_VAR 0 1
9142: DIFF
9143: ST_TO_ADDR
// end ;
9144: GO 8999
9146: POP
9147: POP
// Update_Artefact ( lab ) ;
9148: LD_VAR 0 1
9152: PPUSH
9153: CALL 10584 0 1
// end ;
9157: PPOPN 3
9159: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
9160: LD_INT 0
9162: PPUSH
9163: PPUSH
9164: PPUSH
9165: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
9166: LD_ADDR_VAR 0 7
9170: PUSH
9171: LD_VAR 0 2
9175: PUSH
9176: LD_INT 1
9178: MINUS
9179: PUSH
9180: LD_INT 3
9182: MOD
9183: PUSH
9184: LD_INT 1
9186: PLUS
9187: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
9188: LD_ADDR_VAR 0 8
9192: PUSH
9193: LD_VAR 0 7
9197: PUSH
9198: LD_INT 1
9200: MINUS
9201: PUSH
9202: LD_INT 100
9204: MUL
9205: ST_TO_ADDR
// if number <= 3 then
9206: LD_VAR 0 2
9210: PUSH
9211: LD_INT 3
9213: LESSEQUAL
9214: IFFALSE 9446
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
9216: LD_VAR 0 8
9220: PUSH
9221: LD_INT 11
9223: PLUS
9224: PPUSH
9225: CALL_OW 110
9229: PPUSH
9230: LD_VAR 0 8
9234: PUSH
9235: LD_INT 5
9237: PLUS
9238: PPUSH
9239: CALL_OW 110
9243: PPUSH
9244: LD_INT 1
9246: PPUSH
9247: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
9251: LD_VAR 0 8
9255: PUSH
9256: LD_INT 11
9258: PLUS
9259: PPUSH
9260: CALL_OW 110
9264: PPUSH
9265: LD_VAR 0 8
9269: PUSH
9270: LD_VAR 0 1
9274: PUSH
9275: LD_INT 10
9277: MUL
9278: PLUS
9279: PUSH
9280: LD_INT 12
9282: PLUS
9283: PPUSH
9284: CALL_OW 110
9288: PPUSH
9289: CALL_OW 329
// SetTag ( base + 12 , true ) ;
9293: LD_VAR 0 8
9297: PUSH
9298: LD_INT 12
9300: PLUS
9301: PPUSH
9302: LD_INT 1
9304: PPUSH
9305: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
9309: LD_ADDR_EXP 46
9313: PUSH
9314: LD_EXP 46
9318: PUSH
9319: LD_VAR 0 8
9323: PUSH
9324: LD_INT 11
9326: PLUS
9327: PPUSH
9328: CALL_OW 110
9332: ADD
9333: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9334: LD_ADDR_VAR 0 5
9338: PUSH
9339: DOUBLE
9340: LD_INT 0
9342: DEC
9343: ST_TO_ADDR
9344: LD_EXP 43
9348: PUSH
9349: LD_INT 1
9351: MINUS
9352: PUSH
9353: FOR_TO
9354: IFFALSE 9442
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9356: LD_VAR 0 8
9360: PUSH
9361: LD_INT 11
9363: PLUS
9364: PPUSH
9365: CALL_OW 110
9369: PUSH
9370: LD_VAR 0 5
9374: PUSH
9375: LD_INT 100
9377: MUL
9378: PUSH
9379: LD_INT 11
9381: PLUS
9382: PPUSH
9383: CALL_OW 110
9387: PUSH
9388: LD_VAR 0 5
9392: PUSH
9393: LD_INT 100
9395: MUL
9396: PUSH
9397: LD_VAR 0 1
9401: PUSH
9402: LD_INT 10
9404: MUL
9405: PLUS
9406: PUSH
9407: LD_INT 15
9409: PLUS
9410: PPUSH
9411: CALL_OW 110
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: IN
9420: IFFALSE 9440
// DeInit_Lab ( side , un + 1 ) ;
9422: LD_VAR 0 1
9426: PPUSH
9427: LD_VAR 0 5
9431: PUSH
9432: LD_INT 1
9434: PLUS
9435: PPUSH
9436: CALL 10445 0 2
9440: GO 9353
9442: POP
9443: POP
// end else
9444: GO 9620
// begin succes := false ;
9446: LD_ADDR_VAR 0 6
9450: PUSH
9451: LD_INT 0
9453: ST_TO_ADDR
// case art of 1 :
9454: LD_VAR 0 7
9458: PUSH
9459: LD_INT 1
9461: DOUBLE
9462: EQUAL
9463: IFTRUE 9467
9465: GO 9495
9467: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
9468: LD_ADDR_VAR 0 6
9472: PUSH
9473: LD_VAR 0 1
9477: PPUSH
9478: LD_VAR 0 3
9482: PPUSH
9483: LD_VAR 0 4
9487: PPUSH
9488: CALL 11017 0 3
9492: ST_TO_ADDR
9493: GO 9563
9495: LD_INT 2
9497: DOUBLE
9498: EQUAL
9499: IFTRUE 9503
9501: GO 9526
9503: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
9504: LD_ADDR_VAR 0 6
9508: PUSH
9509: LD_VAR 0 1
9513: PPUSH
9514: LD_VAR 0 3
9518: PPUSH
9519: CALL 11255 0 2
9523: ST_TO_ADDR
9524: GO 9563
9526: LD_INT 3
9528: DOUBLE
9529: EQUAL
9530: IFTRUE 9534
9532: GO 9562
9534: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
9535: LD_ADDR_VAR 0 6
9539: PUSH
9540: LD_VAR 0 1
9544: PPUSH
9545: LD_VAR 0 3
9549: PPUSH
9550: LD_VAR 0 4
9554: PPUSH
9555: CALL 11651 0 3
9559: ST_TO_ADDR
9560: GO 9563
9562: POP
// if succes then
9563: LD_VAR 0 6
9567: IFFALSE 9620
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
9569: LD_VAR 0 8
9573: PUSH
9574: LD_VAR 0 1
9578: PUSH
9579: LD_INT 10
9581: MUL
9582: PLUS
9583: PUSH
9584: LD_INT 13
9586: PLUS
9587: PPUSH
9588: LD_VAR 0 8
9592: PUSH
9593: LD_INT 7
9595: PLUS
9596: PPUSH
9597: CALL_OW 110
9601: PPUSH
9602: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
9606: LD_VAR 0 1
9610: PPUSH
9611: LD_VAR 0 7
9615: PPUSH
9616: CALL 9623 0 2
// end ; end ; end ;
9620: PPOPN 8
9622: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
9623: LD_INT 0
9625: PPUSH
9626: PPUSH
9627: PPUSH
// base := ( art - 1 ) * 100 ;
9628: LD_ADDR_VAR 0 4
9632: PUSH
9633: LD_VAR 0 2
9637: PUSH
9638: LD_INT 1
9640: MINUS
9641: PUSH
9642: LD_INT 100
9644: MUL
9645: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9646: LD_ADDR_VAR 0 5
9650: PUSH
9651: LD_VAR 0 4
9655: PUSH
9656: LD_VAR 0 1
9660: PUSH
9661: LD_INT 10
9663: MUL
9664: PLUS
9665: PUSH
9666: LD_INT 15
9668: PLUS
9669: PPUSH
9670: CALL_OW 110
9674: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
9675: LD_VAR 0 5
9679: PUSH
9680: LD_VAR 0 5
9684: PUSH
9685: LD_EXP 46
9689: IN
9690: NOT
9691: AND
9692: IFFALSE 9750
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
9694: LD_VAR 0 1
9698: PPUSH
9699: LD_VAR 0 4
9703: PUSH
9704: LD_INT 1
9706: PLUS
9707: PUSH
9708: LD_VAR 0 4
9712: PUSH
9713: LD_VAR 0 1
9717: PUSH
9718: LD_INT 10
9720: MUL
9721: PLUS
9722: PUSH
9723: LD_INT 11
9725: PLUS
9726: PPUSH
9727: CALL_OW 110
9731: PLUS
9732: PPUSH
9733: CALL_OW 110
9737: PPUSH
9738: LD_INT 1
9740: PPUSH
9741: LD_VAR 0 5
9745: PPUSH
9746: CALL_OW 468
// end ;
9750: LD_VAR 0 3
9754: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
9755: LD_INT 0
9757: PPUSH
9758: PPUSH
9759: PPUSH
// base := ( art - 1 ) * 100 ;
9760: LD_ADDR_VAR 0 4
9764: PUSH
9765: LD_VAR 0 2
9769: PUSH
9770: LD_INT 1
9772: MINUS
9773: PUSH
9774: LD_INT 100
9776: MUL
9777: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9778: LD_ADDR_VAR 0 5
9782: PUSH
9783: LD_VAR 0 4
9787: PUSH
9788: LD_VAR 0 1
9792: PUSH
9793: LD_INT 10
9795: MUL
9796: PLUS
9797: PUSH
9798: LD_INT 15
9800: PLUS
9801: PPUSH
9802: CALL_OW 110
9806: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
9807: LD_VAR 0 5
9811: PUSH
9812: LD_VAR 0 5
9816: PUSH
9817: LD_EXP 46
9821: IN
9822: NOT
9823: AND
9824: PUSH
9825: LD_VAR 0 5
9829: PPUSH
9830: CALL_OW 313
9834: AND
9835: IFFALSE 9904
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
9837: LD_VAR 0 1
9841: PPUSH
9842: LD_VAR 0 4
9846: PUSH
9847: LD_INT 1
9849: PLUS
9850: PUSH
9851: LD_VAR 0 4
9855: PUSH
9856: LD_VAR 0 1
9860: PUSH
9861: LD_INT 10
9863: MUL
9864: PLUS
9865: PUSH
9866: LD_INT 11
9868: PLUS
9869: PPUSH
9870: CALL_OW 110
9874: PLUS
9875: PPUSH
9876: CALL_OW 110
9880: PPUSH
9881: LD_VAR 0 4
9885: PUSH
9886: LD_INT 3
9888: PLUS
9889: PPUSH
9890: CALL_OW 110
9894: PPUSH
9895: LD_VAR 0 5
9899: PPUSH
9900: CALL_OW 468
// end ;
9904: LD_VAR 0 3
9908: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9909: LD_INT 0
9911: PPUSH
9912: PPUSH
9913: PPUSH
9914: PPUSH
9915: PPUSH
9916: PPUSH
9917: PPUSH
9918: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9919: LD_ADDR_VAR 0 8
9923: PUSH
9924: LD_EXP 45
9928: PUSH
9929: LD_VAR 0 1
9933: ARRAY
9934: PPUSH
9935: CALL_OW 469
9939: ST_TO_ADDR
// if not art_hex then
9940: LD_VAR 0 8
9944: NOT
9945: IFFALSE 9949
// exit ;
9947: GO 10440
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9949: LD_ADDR_VAR 0 3
9953: PUSH
9954: LD_INT 2
9956: PUSH
9957: LD_INT 30
9959: PUSH
9960: LD_INT 6
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 30
9969: PUSH
9970: LD_INT 7
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 30
9979: PUSH
9980: LD_INT 8
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: PPUSH
9996: CALL_OW 69
10000: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
10001: LD_ADDR_VAR 0 9
10005: PUSH
10006: LD_VAR 0 3
10010: PPUSH
10011: LD_VAR 0 8
10015: PUSH
10016: LD_INT 1
10018: ARRAY
10019: PPUSH
10020: LD_VAR 0 8
10024: PUSH
10025: LD_INT 2
10027: ARRAY
10028: PPUSH
10029: CALL_OW 73
10033: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
10034: LD_ADDR_VAR 0 6
10038: PUSH
10039: LD_VAR 0 9
10043: PPUSH
10044: LD_VAR 0 8
10048: PUSH
10049: LD_INT 1
10051: ARRAY
10052: PPUSH
10053: LD_VAR 0 8
10057: PUSH
10058: LD_INT 2
10060: ARRAY
10061: PPUSH
10062: CALL_OW 297
10066: ST_TO_ADDR
// if dist < 9 then
10067: LD_VAR 0 6
10071: PUSH
10072: LD_INT 9
10074: LESS
10075: IFFALSE 10440
// begin side := GetSide ( nearest_lab ) ;
10077: LD_ADDR_VAR 0 4
10081: PUSH
10082: LD_VAR 0 9
10086: PPUSH
10087: CALL_OW 255
10091: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
10092: LD_VAR 0 4
10096: PPUSH
10097: LD_VAR 0 1
10101: PPUSH
10102: CALL 10445 0 2
// base := ( art - 1 ) * 100 ;
10106: LD_ADDR_VAR 0 5
10110: PUSH
10111: LD_VAR 0 1
10115: PUSH
10116: LD_INT 1
10118: MINUS
10119: PUSH
10120: LD_INT 100
10122: MUL
10123: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
10124: LD_INT 24
10126: PPUSH
10127: LD_VAR 0 4
10131: PPUSH
10132: CALL_OW 321
10136: PUSH
10137: LD_INT 2
10139: EQUAL
10140: PUSH
10141: LD_VAR 0 9
10145: PPUSH
10146: CALL_OW 313
10150: AND
10151: IFFALSE 10343
// begin if GetTag ( base + side * 10 + 11 ) then
10153: LD_VAR 0 5
10157: PUSH
10158: LD_VAR 0 4
10162: PUSH
10163: LD_INT 10
10165: MUL
10166: PLUS
10167: PUSH
10168: LD_INT 11
10170: PLUS
10171: PPUSH
10172: CALL_OW 110
10176: IFFALSE 10333
// begin if not GetTag ( base + side * 10 + 13 ) then
10178: LD_VAR 0 5
10182: PUSH
10183: LD_VAR 0 4
10187: PUSH
10188: LD_INT 10
10190: MUL
10191: PLUS
10192: PUSH
10193: LD_INT 13
10195: PLUS
10196: PPUSH
10197: CALL_OW 110
10201: NOT
10202: IFFALSE 10225
// state := GetTag ( base + 03 ) else
10204: LD_ADDR_VAR 0 7
10208: PUSH
10209: LD_VAR 0 5
10213: PUSH
10214: LD_INT 3
10216: PLUS
10217: PPUSH
10218: CALL_OW 110
10222: ST_TO_ADDR
10223: GO 10233
// state := art_gray ;
10225: LD_ADDR_VAR 0 7
10229: PUSH
10230: LD_INT 1
10232: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
10233: LD_VAR 0 5
10237: PUSH
10238: LD_VAR 0 4
10242: PUSH
10243: LD_INT 10
10245: MUL
10246: PLUS
10247: PUSH
10248: LD_INT 15
10250: PLUS
10251: PPUSH
10252: CALL_OW 110
10256: PUSH
10257: LD_VAR 0 5
10261: PUSH
10262: LD_VAR 0 4
10266: PUSH
10267: LD_INT 10
10269: MUL
10270: PLUS
10271: PUSH
10272: LD_INT 15
10274: PLUS
10275: PPUSH
10276: CALL_OW 110
10280: PUSH
10281: LD_VAR 0 9
10285: NONEQUAL
10286: AND
10287: IFFALSE 10303
// DeInit_Lab ( side , art ) ;
10289: LD_VAR 0 4
10293: PPUSH
10294: LD_VAR 0 1
10298: PPUSH
10299: CALL 10445 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
10303: LD_VAR 0 5
10307: PUSH
10308: LD_VAR 0 4
10312: PUSH
10313: LD_INT 10
10315: MUL
10316: PLUS
10317: PUSH
10318: LD_INT 15
10320: PLUS
10321: PPUSH
10322: LD_VAR 0 9
10326: PPUSH
10327: CALL_OW 109
// end else
10331: GO 10341
// state := art_instant ;
10333: LD_ADDR_VAR 0 7
10337: PUSH
10338: LD_INT 2
10340: ST_TO_ADDR
// end else
10341: GO 10351
// state := art_gray ;
10343: LD_ADDR_VAR 0 7
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
10351: LD_VAR 0 5
10355: PUSH
10356: LD_INT 11
10358: PLUS
10359: PPUSH
10360: LD_VAR 0 9
10364: PPUSH
10365: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
10369: LD_VAR 0 9
10373: PUSH
10374: LD_EXP 46
10378: IN
10379: NOT
10380: IFFALSE 10440
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
10382: LD_VAR 0 4
10386: PPUSH
10387: LD_VAR 0 5
10391: PUSH
10392: LD_INT 1
10394: PLUS
10395: PUSH
10396: LD_VAR 0 5
10400: PUSH
10401: LD_VAR 0 4
10405: PUSH
10406: LD_INT 10
10408: MUL
10409: PLUS
10410: PUSH
10411: LD_INT 11
10413: PLUS
10414: PPUSH
10415: CALL_OW 110
10419: PLUS
10420: PPUSH
10421: CALL_OW 110
10425: PPUSH
10426: LD_VAR 0 7
10430: PPUSH
10431: LD_VAR 0 9
10435: PPUSH
10436: CALL_OW 468
// end ; end ;
10440: LD_VAR 0 2
10444: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
10445: LD_INT 0
10447: PPUSH
10448: PPUSH
10449: PPUSH
// base := ( art - 1 ) * 100 ;
10450: LD_ADDR_VAR 0 4
10454: PUSH
10455: LD_VAR 0 2
10459: PUSH
10460: LD_INT 1
10462: MINUS
10463: PUSH
10464: LD_INT 100
10466: MUL
10467: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
10468: LD_ADDR_VAR 0 5
10472: PUSH
10473: LD_VAR 0 4
10477: PUSH
10478: LD_VAR 0 1
10482: PUSH
10483: LD_INT 10
10485: MUL
10486: PLUS
10487: PUSH
10488: LD_INT 15
10490: PLUS
10491: PPUSH
10492: CALL_OW 110
10496: ST_TO_ADDR
// if not lab then
10497: LD_VAR 0 5
10501: NOT
10502: IFFALSE 10523
// lab := GetTag ( base + 11 ) ;
10504: LD_ADDR_VAR 0 5
10508: PUSH
10509: LD_VAR 0 4
10513: PUSH
10514: LD_INT 11
10516: PLUS
10517: PPUSH
10518: CALL_OW 110
10522: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
10523: LD_VAR 0 1
10527: PPUSH
10528: LD_VAR 0 4
10532: PUSH
10533: LD_INT 1
10535: PLUS
10536: PUSH
10537: LD_VAR 0 4
10541: PUSH
10542: LD_VAR 0 1
10546: PUSH
10547: LD_INT 10
10549: MUL
10550: PLUS
10551: PUSH
10552: LD_INT 11
10554: PLUS
10555: PPUSH
10556: CALL_OW 110
10560: PLUS
10561: PPUSH
10562: CALL_OW 110
10566: PPUSH
10567: LD_INT 0
10569: PPUSH
10570: LD_VAR 0 5
10574: PPUSH
10575: CALL_OW 468
// end ;
10579: LD_VAR 0 3
10583: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
10584: LD_INT 0
10586: PPUSH
10587: PPUSH
10588: PPUSH
10589: PPUSH
// side := GetSide ( lab ) ;
10590: LD_ADDR_VAR 0 4
10594: PUSH
10595: LD_VAR 0 1
10599: PPUSH
10600: CALL_OW 255
10604: ST_TO_ADDR
// for art = 1 to artefact_number do
10605: LD_ADDR_VAR 0 3
10609: PUSH
10610: DOUBLE
10611: LD_INT 1
10613: DEC
10614: ST_TO_ADDR
10615: LD_EXP 43
10619: PUSH
10620: FOR_TO
10621: IFFALSE 10777
// begin base := ( art - 1 ) * 100 ;
10623: LD_ADDR_VAR 0 5
10627: PUSH
10628: LD_VAR 0 3
10632: PUSH
10633: LD_INT 1
10635: MINUS
10636: PUSH
10637: LD_INT 100
10639: MUL
10640: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
10641: LD_VAR 0 5
10645: PUSH
10646: LD_INT 11
10648: PLUS
10649: PPUSH
10650: CALL_OW 110
10654: PUSH
10655: LD_VAR 0 1
10659: EQUAL
10660: IFFALSE 10673
// Init_Lab ( art ) else
10662: LD_VAR 0 3
10666: PPUSH
10667: CALL 9909 0 1
10671: GO 10775
// begin if lab = GetTag ( base + side * 10 + 15 ) then
10673: LD_VAR 0 1
10677: PUSH
10678: LD_VAR 0 5
10682: PUSH
10683: LD_VAR 0 4
10687: PUSH
10688: LD_INT 10
10690: MUL
10691: PLUS
10692: PUSH
10693: LD_INT 15
10695: PLUS
10696: PPUSH
10697: CALL_OW 110
10701: EQUAL
10702: IFFALSE 10775
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
10704: LD_VAR 0 5
10708: PUSH
10709: LD_VAR 0 4
10713: PUSH
10714: LD_INT 10
10716: MUL
10717: PLUS
10718: PUSH
10719: LD_INT 13
10721: PLUS
10722: PPUSH
10723: CALL_OW 110
10727: PUSH
10728: LD_INT 0
10730: GREATER
10731: PUSH
10732: LD_VAR 0 1
10736: PPUSH
10737: CALL_OW 313
10741: NOT
10742: OR
10743: IFFALSE 10761
// Shadow_Artefact ( side , art ) else
10745: LD_VAR 0 4
10749: PPUSH
10750: LD_VAR 0 3
10754: PPUSH
10755: CALL 9623 0 2
10759: GO 10775
// Highlight_Artefact ( side , art ) ;
10761: LD_VAR 0 4
10765: PPUSH
10766: LD_VAR 0 3
10770: PPUSH
10771: CALL 9755 0 2
// end ; end ; end ;
10775: GO 10620
10777: POP
10778: POP
// end ; end_of_file
10779: LD_VAR 0 2
10783: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
10784: LD_INT 10
10786: PPUSH
10787: CALL_OW 67
// if not IsBusy ( lab ) then
10791: LD_VAR 0 2
10795: PPUSH
10796: CALL_OW 315
10800: NOT
10801: IFFALSE 10828
// begin labs_in_use := labs_in_use diff lab ;
10803: LD_ADDR_EXP 46
10807: PUSH
10808: LD_EXP 46
10812: PUSH
10813: LD_VAR 0 2
10817: DIFF
10818: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10819: LD_VAR 0 2
10823: PPUSH
10824: CALL 10584 0 1
// end ; end ;
10828: PPOPN 2
10830: END
// on ResearchStarted ( tech , lab ) do var un , side ;
10831: LD_INT 0
10833: PPUSH
10834: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
10835: LD_ADDR_EXP 46
10839: PUSH
10840: LD_EXP 46
10844: PUSH
10845: LD_VAR 0 2
10849: ADD
10850: ST_TO_ADDR
// side := GetSide ( lab ) ;
10851: LD_ADDR_VAR 0 4
10855: PUSH
10856: LD_VAR 0 2
10860: PPUSH
10861: CALL_OW 255
10865: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
10866: LD_ADDR_VAR 0 3
10870: PUSH
10871: DOUBLE
10872: LD_INT 0
10874: DEC
10875: ST_TO_ADDR
10876: LD_EXP 43
10880: PUSH
10881: LD_INT 1
10883: MINUS
10884: PUSH
10885: FOR_TO
10886: IFFALSE 10965
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10888: LD_VAR 0 2
10892: PUSH
10893: LD_VAR 0 3
10897: PUSH
10898: LD_INT 100
10900: MUL
10901: PUSH
10902: LD_INT 11
10904: PLUS
10905: PPUSH
10906: CALL_OW 110
10910: PUSH
10911: LD_VAR 0 3
10915: PUSH
10916: LD_INT 100
10918: MUL
10919: PUSH
10920: LD_VAR 0 4
10924: PUSH
10925: LD_INT 10
10927: MUL
10928: PLUS
10929: PUSH
10930: LD_INT 15
10932: PLUS
10933: PPUSH
10934: CALL_OW 110
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: IN
10943: IFFALSE 10963
// DeInit_Lab ( side , un + 1 ) ;
10945: LD_VAR 0 4
10949: PPUSH
10950: LD_VAR 0 3
10954: PUSH
10955: LD_INT 1
10957: PLUS
10958: PPUSH
10959: CALL 10445 0 2
10963: GO 10885
10965: POP
10966: POP
// end ;
10967: PPOPN 4
10969: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10970: LD_INT 10
10972: PPUSH
10973: CALL_OW 67
// if not IsBusy ( lab ) then
10977: LD_VAR 0 2
10981: PPUSH
10982: CALL_OW 315
10986: NOT
10987: IFFALSE 11014
// begin labs_in_use := labs_in_use diff lab ;
10989: LD_ADDR_EXP 46
10993: PUSH
10994: LD_EXP 46
10998: PUSH
10999: LD_VAR 0 2
11003: DIFF
11004: ST_TO_ADDR
// Update_Artefact ( lab ) ;
11005: LD_VAR 0 2
11009: PPUSH
11010: CALL 10584 0 1
// end ; end ; end_of_file
11014: PPOPN 2
11016: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
11017: LD_INT 0
11019: PPUSH
11020: PPUSH
11021: PPUSH
// vysledek := true ;
11022: LD_ADDR_VAR 0 5
11026: PUSH
11027: LD_INT 1
11029: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
11030: LD_ADDR_VAR 0 6
11034: PUSH
11035: LD_VAR 0 1
11039: PUSH
11040: LD_INT 10
11042: MUL
11043: PUSH
11044: LD_INT 15
11046: PLUS
11047: PPUSH
11048: CALL_OW 110
11052: PPUSH
11053: CALL_OW 274
11057: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
11058: LD_VAR 0 6
11062: PUSH
11063: LD_VAR 0 6
11067: PPUSH
11068: CALL_OW 279
11072: PUSH
11073: LD_INT 3
11075: ARRAY
11076: PUSH
11077: LD_INT 6
11079: PPUSH
11080: CALL_OW 110
11084: GREATEREQUAL
11085: AND
11086: IFFALSE 11176
// begin PlaceSeeing ( x , y , side , - 15 ) ;
11088: LD_VAR 0 2
11092: PPUSH
11093: LD_VAR 0 3
11097: PPUSH
11098: LD_VAR 0 1
11102: PPUSH
11103: LD_INT 15
11105: NEG
11106: PPUSH
11107: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
11111: LD_VAR 0 6
11115: PPUSH
11116: LD_INT 3
11118: PPUSH
11119: LD_VAR 0 6
11123: PPUSH
11124: CALL_OW 279
11128: PUSH
11129: LD_INT 3
11131: ARRAY
11132: PUSH
11133: LD_INT 6
11135: PPUSH
11136: CALL_OW 110
11140: MINUS
11141: PPUSH
11142: CALL_OW 277
// view_data := [ x , y , side ] ;
11146: LD_ADDR_LOC 12
11150: PUSH
11151: LD_VAR 0 2
11155: PUSH
11156: LD_VAR 0 3
11160: PUSH
11161: LD_VAR 0 1
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: ST_TO_ADDR
// enable ( 1 ) ;
11171: LD_INT 1
11173: ENABLE_MARKED
// end else
11174: GO 11184
// vysledek := false ;
11176: LD_ADDR_VAR 0 5
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// result := vysledek ;
11184: LD_ADDR_VAR 0 4
11188: PUSH
11189: LD_VAR 0 5
11193: ST_TO_ADDR
// end ;
11194: LD_VAR 0 4
11198: RET
// every 0 0$2 trigger view_data marked 1 do
11199: LD_LOC 12
11203: IFFALSE 11254
11205: GO 11207
11207: DISABLE
// begin wait ( 0 0$30 ) ;
11208: LD_INT 1050
11210: PPUSH
11211: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
11215: LD_LOC 12
11219: PUSH
11220: LD_INT 1
11222: ARRAY
11223: PPUSH
11224: LD_LOC 12
11228: PUSH
11229: LD_INT 2
11231: ARRAY
11232: PPUSH
11233: LD_LOC 12
11237: PUSH
11238: LD_INT 3
11240: ARRAY
11241: PPUSH
11242: CALL_OW 331
// view_data := 0 ;
11246: LD_ADDR_LOC 12
11250: PUSH
11251: LD_INT 0
11253: ST_TO_ADDR
// end ;
11254: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
11255: LD_INT 0
11257: PPUSH
11258: PPUSH
11259: PPUSH
11260: PPUSH
11261: PPUSH
11262: PPUSH
11263: PPUSH
11264: PPUSH
// vysledek := true ;
11265: LD_ADDR_VAR 0 4
11269: PUSH
11270: LD_INT 1
11272: ST_TO_ADDR
// it_can := false ;
11273: LD_ADDR_VAR 0 8
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
11281: LD_ADDR_VAR 0 9
11285: PUSH
11286: LD_INT 30
11288: PUSH
11289: LD_INT 28
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
11296: LD_ADDR_VAR 0 10
11300: PUSH
11301: LD_INT 8
11303: PUSH
11304: LD_INT 48
11306: PUSH
11307: LD_INT 29
11309: PUSH
11310: LD_INT 49
11312: PUSH
11313: LD_INT 10
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
11323: LD_ADDR_VAR 0 7
11327: PUSH
11328: LD_VAR 0 2
11332: PPUSH
11333: CALL_OW 247
11337: PUSH
11338: LD_INT 3
11340: EQUAL
11341: PUSH
11342: LD_VAR 0 2
11346: PPUSH
11347: CALL_OW 266
11351: PUSH
11352: LD_VAR 0 9
11356: IN
11357: PUSH
11358: LD_VAR 0 2
11362: PPUSH
11363: CALL_OW 269
11367: PUSH
11368: LD_VAR 0 10
11372: IN
11373: OR
11374: AND
11375: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
11376: LD_ADDR_VAR 0 6
11380: PUSH
11381: LD_VAR 0 2
11385: PPUSH
11386: CALL_OW 247
11390: PUSH
11391: LD_INT 2
11393: EQUAL
11394: PUSH
11395: LD_VAR 0 2
11399: PPUSH
11400: CALL_OW 264
11404: PUSH
11405: LD_VAR 0 10
11409: IN
11410: PUSH
11411: LD_VAR 0 2
11415: PPUSH
11416: CALL_OW 262
11420: PUSH
11421: LD_INT 3
11423: EQUAL
11424: OR
11425: AND
11426: ST_TO_ADDR
// case def_artefact_two of 1 :
11427: LD_EXP 2
11431: PUSH
11432: LD_INT 1
11434: DOUBLE
11435: EQUAL
11436: IFTRUE 11440
11438: GO 11457
11440: POP
// if b_can then
11441: LD_VAR 0 7
11445: IFFALSE 11455
// it_can := true ; 2 :
11447: LD_ADDR_VAR 0 8
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
11455: GO 11514
11457: LD_INT 2
11459: DOUBLE
11460: EQUAL
11461: IFTRUE 11465
11463: GO 11482
11465: POP
// if v_can then
11466: LD_VAR 0 6
11470: IFFALSE 11480
// it_can := true ; 3 :
11472: LD_ADDR_VAR 0 8
11476: PUSH
11477: LD_INT 1
11479: ST_TO_ADDR
11480: GO 11514
11482: LD_INT 3
11484: DOUBLE
11485: EQUAL
11486: IFTRUE 11490
11488: GO 11513
11490: POP
// if b_can or v_can then
11491: LD_VAR 0 7
11495: PUSH
11496: LD_VAR 0 6
11500: OR
11501: IFFALSE 11511
// it_can := true ; end ;
11503: LD_ADDR_VAR 0 8
11507: PUSH
11508: LD_INT 1
11510: ST_TO_ADDR
11511: GO 11514
11513: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
11514: LD_ADDR_VAR 0 5
11518: PUSH
11519: LD_INT 100
11521: PUSH
11522: LD_VAR 0 1
11526: PUSH
11527: LD_INT 10
11529: MUL
11530: PLUS
11531: PUSH
11532: LD_INT 15
11534: PLUS
11535: PPUSH
11536: CALL_OW 110
11540: PPUSH
11541: CALL_OW 274
11545: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
11546: LD_VAR 0 5
11550: PUSH
11551: LD_VAR 0 8
11555: AND
11556: PUSH
11557: LD_VAR 0 5
11561: PPUSH
11562: CALL_OW 279
11566: PUSH
11567: LD_INT 3
11569: ARRAY
11570: PUSH
11571: LD_INT 106
11573: PPUSH
11574: CALL_OW 110
11578: GREATEREQUAL
11579: AND
11580: IFFALSE 11628
// begin KillUnit ( un ) ;
11582: LD_VAR 0 2
11586: PPUSH
11587: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
11591: LD_VAR 0 5
11595: PPUSH
11596: LD_INT 3
11598: PPUSH
11599: LD_VAR 0 5
11603: PPUSH
11604: CALL_OW 279
11608: PUSH
11609: LD_INT 3
11611: ARRAY
11612: PUSH
11613: LD_INT 106
11615: PPUSH
11616: CALL_OW 110
11620: MINUS
11621: PPUSH
11622: CALL_OW 277
// end else
11626: GO 11636
// vysledek := false ;
11628: LD_ADDR_VAR 0 4
11632: PUSH
11633: LD_INT 0
11635: ST_TO_ADDR
// result := vysledek ;
11636: LD_ADDR_VAR 0 3
11640: PUSH
11641: LD_VAR 0 4
11645: ST_TO_ADDR
// end ;
11646: LD_VAR 0 3
11650: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
11651: LD_INT 0
11653: PPUSH
11654: PPUSH
11655: PPUSH
11656: PPUSH
// vysledek := true ;
11657: LD_ADDR_VAR 0 5
11661: PUSH
11662: LD_INT 1
11664: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
11665: LD_ADDR_VAR 0 7
11669: PUSH
11670: LD_INT 200
11672: PUSH
11673: LD_VAR 0 1
11677: PUSH
11678: LD_INT 10
11680: MUL
11681: PLUS
11682: PUSH
11683: LD_INT 15
11685: PLUS
11686: PPUSH
11687: CALL_OW 110
11691: PPUSH
11692: CALL_OW 274
11696: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
11697: LD_VAR 0 7
11701: PUSH
11702: LD_VAR 0 7
11706: PPUSH
11707: CALL_OW 279
11711: PUSH
11712: LD_INT 3
11714: ARRAY
11715: PUSH
11716: LD_INT 206
11718: PPUSH
11719: CALL_OW 110
11723: GREATEREQUAL
11724: AND
11725: IFFALSE 11781
// begin ArtContamination ( p1 , p2 , 15 ) ;
11727: LD_VAR 0 2
11731: PPUSH
11732: LD_VAR 0 3
11736: PPUSH
11737: LD_INT 15
11739: PPUSH
11740: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
11744: LD_VAR 0 7
11748: PPUSH
11749: LD_INT 3
11751: PPUSH
11752: LD_VAR 0 7
11756: PPUSH
11757: CALL_OW 279
11761: PUSH
11762: LD_INT 3
11764: ARRAY
11765: PUSH
11766: LD_INT 206
11768: PPUSH
11769: CALL_OW 110
11773: MINUS
11774: PPUSH
11775: CALL_OW 277
// end else
11779: GO 11789
// vysledek := false ;
11781: LD_ADDR_VAR 0 5
11785: PUSH
11786: LD_INT 0
11788: ST_TO_ADDR
// result := vysledek ;
11789: LD_ADDR_VAR 0 4
11793: PUSH
11794: LD_VAR 0 5
11798: ST_TO_ADDR
// end ;
11799: LD_VAR 0 4
11803: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
11804: GO 11806
11806: DISABLE
11807: LD_INT 0
11809: PPUSH
11810: PPUSH
11811: PPUSH
// begin for art = 0 to artefact_number do
11812: LD_ADDR_VAR 0 1
11816: PUSH
11817: DOUBLE
11818: LD_INT 0
11820: DEC
11821: ST_TO_ADDR
11822: LD_EXP 43
11826: PUSH
11827: FOR_TO
11828: IFFALSE 11962
// for side = 1 to Side_Positions do
11830: LD_ADDR_VAR 0 2
11834: PUSH
11835: DOUBLE
11836: LD_INT 1
11838: DEC
11839: ST_TO_ADDR
11840: LD_EXP 23
11844: PUSH
11845: FOR_TO
11846: IFFALSE 11958
// begin recharge := art * 100 + side * 10 + 13 ;
11848: LD_ADDR_VAR 0 3
11852: PUSH
11853: LD_VAR 0 1
11857: PUSH
11858: LD_INT 100
11860: MUL
11861: PUSH
11862: LD_VAR 0 2
11866: PUSH
11867: LD_INT 10
11869: MUL
11870: PLUS
11871: PUSH
11872: LD_INT 13
11874: PLUS
11875: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
11876: LD_EXP 23
11880: PUSH
11881: LD_VAR 0 2
11885: ARRAY
11886: PUSH
11887: LD_VAR 0 3
11891: PPUSH
11892: CALL_OW 110
11896: PUSH
11897: LD_INT 0
11899: GREATER
11900: AND
11901: IFFALSE 11956
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11903: LD_VAR 0 3
11907: PPUSH
11908: LD_VAR 0 3
11912: PPUSH
11913: CALL_OW 110
11917: PUSH
11918: LD_INT 1
11920: MINUS
11921: PPUSH
11922: CALL_OW 109
// if not GetTag ( recharge ) then
11926: LD_VAR 0 3
11930: PPUSH
11931: CALL_OW 110
11935: NOT
11936: IFFALSE 11956
// Highlight_Artefact ( side , art + 1 ) ;
11938: LD_VAR 0 2
11942: PPUSH
11943: LD_VAR 0 1
11947: PUSH
11948: LD_INT 1
11950: PLUS
11951: PPUSH
11952: CALL 9755 0 2
// end ; end ;
11956: GO 11845
11958: POP
11959: POP
11960: GO 11827
11962: POP
11963: POP
// enable ;
11964: ENABLE
// end ; end_of_file
11965: PPOPN 3
11967: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11968: LD_INT 0
11970: PPUSH
11971: PPUSH
11972: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11973: LD_INT 18
11975: PPUSH
11976: LD_VAR 0 1
11980: PUSH
11981: LD_INT 1
11983: ARRAY
11984: PPUSH
11985: LD_VAR 0 1
11989: PUSH
11990: LD_INT 2
11992: ARRAY
11993: PPUSH
11994: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11998: LD_VAR 0 1
12002: PUSH
12003: LD_INT 1
12005: ARRAY
12006: PPUSH
12007: LD_VAR 0 1
12011: PUSH
12012: LD_INT 2
12014: ARRAY
12015: PPUSH
12016: CALL_OW 494
// Wait ( 30 ) ;
12020: LD_INT 30
12022: PPUSH
12023: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
12027: LD_INT 18
12029: PPUSH
12030: LD_INT 4
12032: PPUSH
12033: CALL_OW 286
// base := ( art - 1 ) * 100 ;
12037: LD_ADDR_VAR 0 4
12041: PUSH
12042: LD_VAR 0 2
12046: PUSH
12047: LD_INT 1
12049: MINUS
12050: PUSH
12051: LD_INT 100
12053: MUL
12054: ST_TO_ADDR
// if GetTag ( base + 11 ) then
12055: LD_VAR 0 4
12059: PUSH
12060: LD_INT 11
12062: PLUS
12063: PPUSH
12064: CALL_OW 110
12068: IFFALSE 12206
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
12070: LD_ADDR_VAR 0 5
12074: PUSH
12075: LD_VAR 0 4
12079: PUSH
12080: LD_INT 11
12082: PLUS
12083: PPUSH
12084: CALL_OW 110
12088: PPUSH
12089: CALL_OW 255
12093: ST_TO_ADDR
// if GetTag ( base + 12 ) then
12094: LD_VAR 0 4
12098: PUSH
12099: LD_INT 12
12101: PLUS
12102: PPUSH
12103: CALL_OW 110
12107: IFFALSE 12150
// begin ComCancel ( GetTag ( base + 11 ) ) ;
12109: LD_VAR 0 4
12113: PUSH
12114: LD_INT 11
12116: PLUS
12117: PPUSH
12118: CALL_OW 110
12122: PPUSH
12123: CALL_OW 127
// Wait ( 10 ) ;
12127: LD_INT 10
12129: PPUSH
12130: CALL_OW 67
// SetTag ( base + 12 , false ) ;
12134: LD_VAR 0 4
12138: PUSH
12139: LD_INT 12
12141: PLUS
12142: PPUSH
12143: LD_INT 0
12145: PPUSH
12146: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
12150: LD_VAR 0 4
12154: PUSH
12155: LD_VAR 0 5
12159: PUSH
12160: LD_INT 10
12162: MUL
12163: PLUS
12164: PUSH
12165: LD_INT 11
12167: PLUS
12168: PPUSH
12169: CALL_OW 110
12173: NOT
12174: IFFALSE 12190
// DeInit_Lab ( side , art ) ;
12176: LD_VAR 0 5
12180: PPUSH
12181: LD_VAR 0 2
12185: PPUSH
12186: CALL 10445 0 2
// SetTag ( base + 11 , 0 ) ;
12190: LD_VAR 0 4
12194: PUSH
12195: LD_INT 11
12197: PLUS
12198: PPUSH
12199: LD_INT 0
12201: PPUSH
12202: CALL_OW 109
// end ; end ;
12206: LD_VAR 0 3
12210: RET
// every 0 0$5 marked 5 do var hex , un ;
12211: GO 12213
12213: DISABLE
12214: LD_INT 0
12216: PPUSH
12217: PPUSH
// begin wait ( 3 3$0 ) ;
12218: LD_INT 6300
12220: PPUSH
12221: CALL_OW 67
// if GetTag ( 09 ) then
12225: LD_INT 9
12227: PPUSH
12228: CALL_OW 110
12232: IFFALSE 12271
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
12234: LD_ADDR_VAR 0 1
12238: PUSH
12239: LD_INT 13
12241: PPUSH
12242: CALL_OW 110
12246: PPUSH
12247: CALL_OW 250
12251: PUSH
12252: LD_INT 13
12254: PPUSH
12255: CALL_OW 110
12259: PPUSH
12260: CALL_OW 251
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: ST_TO_ADDR
12269: GO 12290
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
12271: LD_ADDR_VAR 0 1
12275: PUSH
12276: LD_EXP 45
12280: PUSH
12281: LD_INT 1
12283: ARRAY
12284: PPUSH
12285: CALL_OW 469
12289: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12290: LD_VAR 0 1
12294: PUSH
12295: LD_INT 1
12297: ARRAY
12298: PPUSH
12299: LD_VAR 0 1
12303: PUSH
12304: LD_INT 2
12306: ARRAY
12307: PPUSH
12308: LD_INT 16
12310: PPUSH
12311: CALL_OW 309
12315: NOT
12316: IFFALSE 12593
// begin if GetTag ( 09 ) then
12318: LD_INT 9
12320: PPUSH
12321: CALL_OW 110
12325: IFFALSE 12372
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12327: LD_INT 13
12329: PPUSH
12330: CALL_OW 110
12334: PPUSH
12335: LD_INT 4
12337: PPUSH
12338: LD_EXP 45
12342: PUSH
12343: LD_INT 1
12345: ARRAY
12346: NEG
12347: PPUSH
12348: CALL_OW 290
// SetTag ( 09 , 0 ) ;
12352: LD_INT 9
12354: PPUSH
12355: LD_INT 0
12357: PPUSH
12358: CALL_OW 109
// SetTag ( 13 , 0 ) ;
12362: LD_INT 13
12364: PPUSH
12365: LD_INT 0
12367: PPUSH
12368: CALL_OW 109
// end ; DestroyArtefact ( hex , 1 ) ;
12372: LD_VAR 0 1
12376: PPUSH
12377: LD_INT 1
12379: PPUSH
12380: CALL 11968 0 2
// wait ( 5 ) ;
12384: LD_INT 5
12386: PPUSH
12387: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12391: LD_ADDR_VAR 0 1
12395: PUSH
12396: LD_INT 16
12398: PPUSH
12399: LD_INT 0
12401: PPUSH
12402: CALL_OW 16
12406: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12407: LD_ADDR_VAR 0 2
12411: PUSH
12412: LD_VAR 0 1
12416: PUSH
12417: LD_INT 1
12419: ARRAY
12420: PPUSH
12421: LD_VAR 0 1
12425: PUSH
12426: LD_INT 2
12428: ARRAY
12429: PPUSH
12430: CALL_OW 428
12434: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12435: LD_VAR 0 2
12439: PUSH
12440: LD_INT 0
12442: GREATER
12443: PUSH
12444: LD_VAR 0 2
12448: PPUSH
12449: CALL_OW 247
12453: PUSH
12454: LD_INT 3
12456: EQUAL
12457: AND
12458: IFFALSE 12502
// begin KillUnit ( un ) ;
12460: LD_VAR 0 2
12464: PPUSH
12465: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12469: LD_VAR 0 1
12473: PUSH
12474: LD_INT 1
12476: ARRAY
12477: PPUSH
12478: LD_VAR 0 1
12482: PUSH
12483: LD_INT 2
12485: ARRAY
12486: PPUSH
12487: CALL_OW 428
12491: IFFALSE 12502
// wait ( 10 ) ;
12493: LD_INT 10
12495: PPUSH
12496: CALL_OW 67
12500: GO 12469
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12502: LD_VAR 0 1
12506: PUSH
12507: LD_INT 1
12509: ARRAY
12510: PPUSH
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 2
12518: ARRAY
12519: PPUSH
12520: CALL_OW 428
12524: NOT
12525: IFFALSE 12391
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12527: LD_VAR 0 1
12531: PUSH
12532: LD_INT 1
12534: ARRAY
12535: PPUSH
12536: LD_VAR 0 1
12540: PUSH
12541: LD_INT 2
12543: ARRAY
12544: PPUSH
12545: CALL_OW 494
// wait ( 30 ) ;
12549: LD_INT 30
12551: PPUSH
12552: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12556: LD_INT 4
12558: PPUSH
12559: LD_EXP 45
12563: PUSH
12564: LD_INT 1
12566: ARRAY
12567: PPUSH
12568: LD_VAR 0 1
12572: PUSH
12573: LD_INT 1
12575: ARRAY
12576: PPUSH
12577: LD_VAR 0 1
12581: PUSH
12582: LD_INT 2
12584: ARRAY
12585: PPUSH
12586: LD_INT 0
12588: PPUSH
12589: CALL_OW 58
// end ; enable ;
12593: ENABLE
// end ;
12594: PPOPN 2
12596: END
// every 0 0$5 marked 6 do var hex , un ;
12597: GO 12599
12599: DISABLE
12600: LD_INT 0
12602: PPUSH
12603: PPUSH
// begin wait ( 3 3$30 ) ;
12604: LD_INT 7350
12606: PPUSH
12607: CALL_OW 67
// if GetTag ( 109 ) then
12611: LD_INT 109
12613: PPUSH
12614: CALL_OW 110
12618: IFFALSE 12657
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
12620: LD_ADDR_VAR 0 1
12624: PUSH
12625: LD_INT 113
12627: PPUSH
12628: CALL_OW 110
12632: PPUSH
12633: CALL_OW 250
12637: PUSH
12638: LD_INT 113
12640: PPUSH
12641: CALL_OW 110
12645: PPUSH
12646: CALL_OW 251
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: ST_TO_ADDR
12655: GO 12676
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: LD_EXP 45
12666: PUSH
12667: LD_INT 2
12669: ARRAY
12670: PPUSH
12671: CALL_OW 469
12675: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12676: LD_VAR 0 1
12680: PUSH
12681: LD_INT 1
12683: ARRAY
12684: PPUSH
12685: LD_VAR 0 1
12689: PUSH
12690: LD_INT 2
12692: ARRAY
12693: PPUSH
12694: LD_INT 16
12696: PPUSH
12697: CALL_OW 309
12701: NOT
12702: IFFALSE 12979
// begin if GetTag ( 109 ) then
12704: LD_INT 109
12706: PPUSH
12707: CALL_OW 110
12711: IFFALSE 12758
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12713: LD_INT 113
12715: PPUSH
12716: CALL_OW 110
12720: PPUSH
12721: LD_INT 4
12723: PPUSH
12724: LD_EXP 45
12728: PUSH
12729: LD_INT 1
12731: ARRAY
12732: NEG
12733: PPUSH
12734: CALL_OW 290
// SetTag ( 109 , 0 ) ;
12738: LD_INT 109
12740: PPUSH
12741: LD_INT 0
12743: PPUSH
12744: CALL_OW 109
// SetTag ( 113 , 0 ) ;
12748: LD_INT 113
12750: PPUSH
12751: LD_INT 0
12753: PPUSH
12754: CALL_OW 109
// end ; DestroyArtefact ( hex , 2 ) ;
12758: LD_VAR 0 1
12762: PPUSH
12763: LD_INT 2
12765: PPUSH
12766: CALL 11968 0 2
// wait ( 5 ) ;
12770: LD_INT 5
12772: PPUSH
12773: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12777: LD_ADDR_VAR 0 1
12781: PUSH
12782: LD_INT 16
12784: PPUSH
12785: LD_INT 0
12787: PPUSH
12788: CALL_OW 16
12792: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12793: LD_ADDR_VAR 0 2
12797: PUSH
12798: LD_VAR 0 1
12802: PUSH
12803: LD_INT 1
12805: ARRAY
12806: PPUSH
12807: LD_VAR 0 1
12811: PUSH
12812: LD_INT 2
12814: ARRAY
12815: PPUSH
12816: CALL_OW 428
12820: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12821: LD_VAR 0 2
12825: PUSH
12826: LD_INT 0
12828: GREATER
12829: PUSH
12830: LD_VAR 0 2
12834: PPUSH
12835: CALL_OW 247
12839: PUSH
12840: LD_INT 3
12842: EQUAL
12843: AND
12844: IFFALSE 12888
// begin KillUnit ( un ) ;
12846: LD_VAR 0 2
12850: PPUSH
12851: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12855: LD_VAR 0 1
12859: PUSH
12860: LD_INT 1
12862: ARRAY
12863: PPUSH
12864: LD_VAR 0 1
12868: PUSH
12869: LD_INT 2
12871: ARRAY
12872: PPUSH
12873: CALL_OW 428
12877: IFFALSE 12888
// wait ( 10 ) ;
12879: LD_INT 10
12881: PPUSH
12882: CALL_OW 67
12886: GO 12855
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12888: LD_VAR 0 1
12892: PUSH
12893: LD_INT 1
12895: ARRAY
12896: PPUSH
12897: LD_VAR 0 1
12901: PUSH
12902: LD_INT 2
12904: ARRAY
12905: PPUSH
12906: CALL_OW 428
12910: NOT
12911: IFFALSE 12777
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12913: LD_VAR 0 1
12917: PUSH
12918: LD_INT 1
12920: ARRAY
12921: PPUSH
12922: LD_VAR 0 1
12926: PUSH
12927: LD_INT 2
12929: ARRAY
12930: PPUSH
12931: CALL_OW 494
// wait ( 30 ) ;
12935: LD_INT 30
12937: PPUSH
12938: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12942: LD_INT 4
12944: PPUSH
12945: LD_EXP 45
12949: PUSH
12950: LD_INT 2
12952: ARRAY
12953: PPUSH
12954: LD_VAR 0 1
12958: PUSH
12959: LD_INT 1
12961: ARRAY
12962: PPUSH
12963: LD_VAR 0 1
12967: PUSH
12968: LD_INT 2
12970: ARRAY
12971: PPUSH
12972: LD_INT 0
12974: PPUSH
12975: CALL_OW 58
// end ; enable ;
12979: ENABLE
// end ;
12980: PPOPN 2
12982: END
// every 0 0$5 marked 7 do var hex , un ;
12983: GO 12985
12985: DISABLE
12986: LD_INT 0
12988: PPUSH
12989: PPUSH
// begin wait ( 4 4$0 ) ;
12990: LD_INT 8400
12992: PPUSH
12993: CALL_OW 67
// if GetTag ( 209 ) then
12997: LD_INT 209
12999: PPUSH
13000: CALL_OW 110
13004: IFFALSE 13043
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
13006: LD_ADDR_VAR 0 1
13010: PUSH
13011: LD_INT 213
13013: PPUSH
13014: CALL_OW 110
13018: PPUSH
13019: CALL_OW 250
13023: PUSH
13024: LD_INT 213
13026: PPUSH
13027: CALL_OW 110
13031: PPUSH
13032: CALL_OW 251
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: ST_TO_ADDR
13041: GO 13062
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
13043: LD_ADDR_VAR 0 1
13047: PUSH
13048: LD_EXP 45
13052: PUSH
13053: LD_INT 3
13055: ARRAY
13056: PPUSH
13057: CALL_OW 469
13061: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
13062: LD_VAR 0 1
13066: PUSH
13067: LD_INT 1
13069: ARRAY
13070: PPUSH
13071: LD_VAR 0 1
13075: PUSH
13076: LD_INT 2
13078: ARRAY
13079: PPUSH
13080: LD_INT 16
13082: PPUSH
13083: CALL_OW 309
13087: NOT
13088: IFFALSE 13365
// begin if GetTag ( 209 ) then
13090: LD_INT 209
13092: PPUSH
13093: CALL_OW 110
13097: IFFALSE 13144
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 1 ] ) ;
13099: LD_INT 213
13101: PPUSH
13102: CALL_OW 110
13106: PPUSH
13107: LD_INT 4
13109: PPUSH
13110: LD_EXP 45
13114: PUSH
13115: LD_INT 1
13117: ARRAY
13118: NEG
13119: PPUSH
13120: CALL_OW 290
// SetTag ( 209 , 0 ) ;
13124: LD_INT 209
13126: PPUSH
13127: LD_INT 0
13129: PPUSH
13130: CALL_OW 109
// SetTag ( 213 , 0 ) ;
13134: LD_INT 213
13136: PPUSH
13137: LD_INT 0
13139: PPUSH
13140: CALL_OW 109
// end ; DestroyArtefact ( hex , 3 ) ;
13144: LD_VAR 0 1
13148: PPUSH
13149: LD_INT 3
13151: PPUSH
13152: CALL 11968 0 2
// wait ( 5 ) ;
13156: LD_INT 5
13158: PPUSH
13159: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
13163: LD_ADDR_VAR 0 1
13167: PUSH
13168: LD_INT 16
13170: PPUSH
13171: LD_INT 0
13173: PPUSH
13174: CALL_OW 16
13178: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13179: LD_ADDR_VAR 0 2
13183: PUSH
13184: LD_VAR 0 1
13188: PUSH
13189: LD_INT 1
13191: ARRAY
13192: PPUSH
13193: LD_VAR 0 1
13197: PUSH
13198: LD_INT 2
13200: ARRAY
13201: PPUSH
13202: CALL_OW 428
13206: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
13207: LD_VAR 0 2
13211: PUSH
13212: LD_INT 0
13214: GREATER
13215: PUSH
13216: LD_VAR 0 2
13220: PPUSH
13221: CALL_OW 247
13225: PUSH
13226: LD_INT 3
13228: EQUAL
13229: AND
13230: IFFALSE 13274
// begin KillUnit ( un ) ;
13232: LD_VAR 0 2
13236: PPUSH
13237: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
13241: LD_VAR 0 1
13245: PUSH
13246: LD_INT 1
13248: ARRAY
13249: PPUSH
13250: LD_VAR 0 1
13254: PUSH
13255: LD_INT 2
13257: ARRAY
13258: PPUSH
13259: CALL_OW 428
13263: IFFALSE 13274
// wait ( 10 ) ;
13265: LD_INT 10
13267: PPUSH
13268: CALL_OW 67
13272: GO 13241
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13274: LD_VAR 0 1
13278: PUSH
13279: LD_INT 1
13281: ARRAY
13282: PPUSH
13283: LD_VAR 0 1
13287: PUSH
13288: LD_INT 2
13290: ARRAY
13291: PPUSH
13292: CALL_OW 428
13296: NOT
13297: IFFALSE 13163
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13299: LD_VAR 0 1
13303: PUSH
13304: LD_INT 1
13306: ARRAY
13307: PPUSH
13308: LD_VAR 0 1
13312: PUSH
13313: LD_INT 2
13315: ARRAY
13316: PPUSH
13317: CALL_OW 494
// wait ( 30 ) ;
13321: LD_INT 30
13323: PPUSH
13324: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13328: LD_INT 4
13330: PPUSH
13331: LD_EXP 45
13335: PUSH
13336: LD_INT 3
13338: ARRAY
13339: PPUSH
13340: LD_VAR 0 1
13344: PUSH
13345: LD_INT 1
13347: ARRAY
13348: PPUSH
13349: LD_VAR 0 1
13353: PUSH
13354: LD_INT 2
13356: ARRAY
13357: PPUSH
13358: LD_INT 0
13360: PPUSH
13361: CALL_OW 58
// end ; enable ;
13365: ENABLE
// end ; end_of_file
13366: PPOPN 2
13368: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13369: LD_INT 0
13371: PPUSH
13372: PPUSH
// for un in battle_flags_id do
13373: LD_ADDR_VAR 0 2
13377: PUSH
13378: LD_EXP 34
13382: PUSH
13383: FOR_IN
13384: IFFALSE 13459
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13386: LD_VAR 0 2
13390: PPUSH
13391: LD_INT 1
13393: PUSH
13394: LD_LOC 14
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: LD_LOC 14
13410: PUSH
13411: LD_INT 2
13413: DIV
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 3
13421: PUSH
13422: LD_LOC 14
13426: PUSH
13427: LD_INT 5
13429: DIV
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 20
13437: PUSH
13438: LD_LOC 14
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 423
13457: GO 13383
13459: POP
13460: POP
// end ;
13461: LD_VAR 0 1
13465: RET
// every 0 0$0.1 do var un ;
13466: GO 13468
13468: DISABLE
13469: LD_INT 0
13471: PPUSH
// begin if not def_morale_flags then
13472: LD_EXP 58
13476: NOT
13477: IFFALSE 13481
// exit ;
13479: GO 13558
// if not morale_decreasing_time then
13481: LD_EXP 14
13485: NOT
13486: IFFALSE 13490
// exit ;
13488: GO 13558
// strength = 100 ;
13490: LD_ADDR_LOC 14
13494: PUSH
13495: LD_INT 100
13497: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13498: LD_EXP 14
13502: PPUSH
13503: CALL_OW 67
// strength := strength - 1 ;
13507: LD_ADDR_LOC 14
13511: PUSH
13512: LD_LOC 14
13516: PUSH
13517: LD_INT 1
13519: MINUS
13520: ST_TO_ADDR
// Update_Flags ;
13521: CALL 13369 0 0
// until not strength ;
13525: LD_LOC 14
13529: NOT
13530: IFFALSE 13498
// for un in battle_flags_id do
13532: LD_ADDR_VAR 0 1
13536: PUSH
13537: LD_EXP 34
13541: PUSH
13542: FOR_IN
13543: IFFALSE 13556
// KillBattleFlag ( un ) ;
13545: LD_VAR 0 1
13549: PPUSH
13550: CALL_OW 419
13554: GO 13542
13556: POP
13557: POP
// end ; end_of_file
13558: PPOPN 1
13560: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
13561: LD_INT 0
13563: PPUSH
13564: PPUSH
13565: PPUSH
// enable ( 600 ) ;
13566: LD_INT 600
13568: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
13569: LD_ADDR_VAR 0 2
13573: PUSH
13574: DOUBLE
13575: LD_INT 1
13577: DEC
13578: ST_TO_ADDR
13579: LD_EXP 47
13583: PUSH
13584: FOR_TO
13585: IFFALSE 13740
// if Position_Sides [ i ] then
13587: LD_EXP 29
13591: PUSH
13592: LD_VAR 0 2
13596: ARRAY
13597: IFFALSE 13738
// for j := 1 to 8 do
13599: LD_ADDR_VAR 0 3
13603: PUSH
13604: DOUBLE
13605: LD_INT 1
13607: DEC
13608: ST_TO_ADDR
13609: LD_INT 8
13611: PUSH
13612: FOR_TO
13613: IFFALSE 13736
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13615: LD_EXP 23
13619: PUSH
13620: LD_VAR 0 3
13624: ARRAY
13625: PUSH
13626: LD_EXP 21
13630: PUSH
13631: LD_EXP 29
13635: PUSH
13636: LD_VAR 0 2
13640: ARRAY
13641: ARRAY
13642: PUSH
13643: LD_EXP 21
13647: PUSH
13648: LD_VAR 0 3
13652: ARRAY
13653: NONEQUAL
13654: PUSH
13655: LD_EXP 25
13659: NOT
13660: PUSH
13661: LD_EXP 29
13665: PUSH
13666: LD_VAR 0 2
13670: ARRAY
13671: PUSH
13672: LD_VAR 0 3
13676: NONEQUAL
13677: AND
13678: OR
13679: AND
13680: IFFALSE 13704
// HideArea ( j , BuildUpAreas [ i ] ) else
13682: LD_VAR 0 3
13686: PPUSH
13687: LD_EXP 47
13691: PUSH
13692: LD_VAR 0 2
13696: ARRAY
13697: PPUSH
13698: CALL_OW 333
13702: GO 13734
// if ( j = your_side ) then
13704: LD_VAR 0 3
13708: PUSH
13709: LD_OWVAR 2
13713: EQUAL
13714: IFFALSE 13734
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13716: LD_EXP 47
13720: PUSH
13721: LD_VAR 0 2
13725: ARRAY
13726: PPUSH
13727: LD_INT 5
13729: PPUSH
13730: CALL_OW 424
13734: GO 13612
13736: POP
13737: POP
13738: GO 13584
13740: POP
13741: POP
// end ;
13742: LD_VAR 0 1
13746: RET
// export function EndBuildUp ; var i , j ; begin
13747: LD_INT 0
13749: PPUSH
13750: PPUSH
13751: PPUSH
// disable ( 600 ) ;
13752: LD_INT 600
13754: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: DOUBLE
13761: LD_INT 1
13763: DEC
13764: ST_TO_ADDR
13765: LD_EXP 47
13769: PUSH
13770: FOR_TO
13771: IFFALSE 13926
// if Position_Sides [ i ] then
13773: LD_EXP 29
13777: PUSH
13778: LD_VAR 0 2
13782: ARRAY
13783: IFFALSE 13924
// for j := 1 to 8 do
13785: LD_ADDR_VAR 0 3
13789: PUSH
13790: DOUBLE
13791: LD_INT 1
13793: DEC
13794: ST_TO_ADDR
13795: LD_INT 8
13797: PUSH
13798: FOR_TO
13799: IFFALSE 13922
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13801: LD_EXP 23
13805: PUSH
13806: LD_VAR 0 3
13810: ARRAY
13811: PUSH
13812: LD_EXP 21
13816: PUSH
13817: LD_EXP 29
13821: PUSH
13822: LD_VAR 0 2
13826: ARRAY
13827: ARRAY
13828: PUSH
13829: LD_EXP 21
13833: PUSH
13834: LD_VAR 0 3
13838: ARRAY
13839: NONEQUAL
13840: PUSH
13841: LD_EXP 25
13845: NOT
13846: PUSH
13847: LD_EXP 29
13851: PUSH
13852: LD_VAR 0 2
13856: ARRAY
13857: PUSH
13858: LD_VAR 0 3
13862: NONEQUAL
13863: AND
13864: OR
13865: AND
13866: IFFALSE 13890
// ShowArea ( j , BuildUpAreas [ i ] ) else
13868: LD_VAR 0 3
13872: PPUSH
13873: LD_EXP 47
13877: PUSH
13878: LD_VAR 0 2
13882: ARRAY
13883: PPUSH
13884: CALL_OW 334
13888: GO 13920
// if ( j = your_side ) then
13890: LD_VAR 0 3
13894: PUSH
13895: LD_OWVAR 2
13899: EQUAL
13900: IFFALSE 13920
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13902: LD_EXP 47
13906: PUSH
13907: LD_VAR 0 2
13911: ARRAY
13912: PPUSH
13913: LD_INT 0
13915: PPUSH
13916: CALL_OW 424
13920: GO 13798
13922: POP
13923: POP
13924: GO 13770
13926: POP
13927: POP
// end ;
13928: LD_VAR 0 1
13932: RET
// every 5 marked 600 do var i , un ;
13933: GO 13935
13935: DISABLE
13936: LD_INT 0
13938: PPUSH
13939: PPUSH
// begin for i := 1 to BuildUpAreas do
13940: LD_ADDR_VAR 0 1
13944: PUSH
13945: DOUBLE
13946: LD_INT 1
13948: DEC
13949: ST_TO_ADDR
13950: LD_EXP 47
13954: PUSH
13955: FOR_TO
13956: IFFALSE 14111
// if Position_Sides [ i ] then
13958: LD_EXP 29
13962: PUSH
13963: LD_VAR 0 1
13967: ARRAY
13968: IFFALSE 14109
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13970: LD_ADDR_VAR 0 2
13974: PUSH
13975: LD_EXP 47
13979: PUSH
13980: LD_VAR 0 1
13984: ARRAY
13985: PPUSH
13986: LD_INT 2
13988: PUSH
13989: LD_INT 21
13991: PUSH
13992: LD_INT 1
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 21
14001: PUSH
14002: LD_INT 2
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 22
14016: PUSH
14017: LD_OWVAR 2
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PPUSH
14030: CALL_OW 70
14034: PUSH
14035: FOR_IN
14036: IFFALSE 14107
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
14038: LD_EXP 21
14042: PUSH
14043: LD_EXP 29
14047: PUSH
14048: LD_VAR 0 1
14052: ARRAY
14053: ARRAY
14054: PUSH
14055: LD_EXP 21
14059: PUSH
14060: LD_OWVAR 2
14064: ARRAY
14065: NONEQUAL
14066: PUSH
14067: LD_EXP 25
14071: NOT
14072: PUSH
14073: LD_EXP 29
14077: PUSH
14078: LD_VAR 0 1
14082: ARRAY
14083: PUSH
14084: LD_OWVAR 2
14088: NONEQUAL
14089: AND
14090: OR
14091: IFFALSE 14105
// ComMoveToArea ( un , BuildUpEscape ) ;
14093: LD_VAR 0 2
14097: PPUSH
14098: LD_INT 24
14100: PPUSH
14101: CALL_OW 113
14105: GO 14035
14107: POP
14108: POP
14109: GO 13955
14111: POP
14112: POP
// enable ;
14113: ENABLE
// end ;
14114: PPOPN 2
14116: END
// every 0 0$1 trigger def_builduptime do
14117: LD_EXP 63
14121: IFFALSE 14147
14123: GO 14125
14125: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14126: LD_INT 8400
14128: PUSH
14129: LD_EXP 63
14133: PUSH
14134: LD_INT 2100
14136: MUL
14137: PLUS
14138: PPUSH
14139: CALL_OW 67
// EndBuildUp ;
14143: CALL 13747 0 0
// end ; end_of_file
14147: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
14148: LD_INT 0
14150: PPUSH
14151: PPUSH
// if ( not IAmSpec ) then
14152: CALL_OW 531
14156: NOT
14157: IFFALSE 14173
// Result := Limits_Info ^  ;
14159: LD_ADDR_VAR 0 1
14163: PUSH
14164: LD_LOC 26
14168: PUSH
14169: LD_STRING 
14171: ADD
14172: ST_TO_ADDR
// for i := 1 to 8 do
14173: LD_ADDR_VAR 0 2
14177: PUSH
14178: DOUBLE
14179: LD_INT 1
14181: DEC
14182: ST_TO_ADDR
14183: LD_INT 8
14185: PUSH
14186: FOR_TO
14187: IFFALSE 14232
// if Cheaters [ i ] then
14189: LD_LOC 27
14193: PUSH
14194: LD_VAR 0 2
14198: ARRAY
14199: IFFALSE 14230
// Result := Result ^ [ #Cheater , i , i ] ;
14201: LD_ADDR_VAR 0 1
14205: PUSH
14206: LD_VAR 0 1
14210: PUSH
14211: LD_STRING #Cheater
14213: PUSH
14214: LD_VAR 0 2
14218: PUSH
14219: LD_VAR 0 2
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: LIST
14228: ADD
14229: ST_TO_ADDR
14230: GO 14186
14232: POP
14233: POP
// end ;
14234: LD_VAR 0 1
14238: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14239: LD_INT 0
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
// case Game_Type of 10 :
14246: LD_EXP 48
14250: PUSH
14251: LD_INT 10
14253: DOUBLE
14254: EQUAL
14255: IFTRUE 14259
14257: GO 14270
14259: POP
// def_game_rules := 1 ; 11 :
14260: LD_ADDR_EXP 49
14264: PUSH
14265: LD_INT 1
14267: ST_TO_ADDR
14268: GO 14290
14270: LD_INT 11
14272: DOUBLE
14273: EQUAL
14274: IFTRUE 14278
14276: GO 14289
14278: POP
// def_game_rules := 3 ; end ;
14279: LD_ADDR_EXP 49
14283: PUSH
14284: LD_INT 3
14286: ST_TO_ADDR
14287: GO 14290
14289: POP
// case def_game_rules of 0 :
14290: LD_EXP 49
14294: PUSH
14295: LD_INT 0
14297: DOUBLE
14298: EQUAL
14299: IFTRUE 14303
14301: GO 14308
14303: POP
// exit ; 1 :
14304: GO 16366
14306: GO 16266
14308: LD_INT 1
14310: DOUBLE
14311: EQUAL
14312: IFTRUE 14316
14314: GO 14532
14316: POP
// begin def_base_level := 2 ;
14317: LD_ADDR_EXP 50
14321: PUSH
14322: LD_INT 2
14324: ST_TO_ADDR
// def_amount_of_people := 2 ;
14325: LD_ADDR_EXP 51
14329: PUSH
14330: LD_INT 2
14332: ST_TO_ADDR
// def_skill_level := 1 ;
14333: LD_ADDR_EXP 52
14337: PUSH
14338: LD_INT 1
14340: ST_TO_ADDR
// def_starting_resources := 2 ;
14341: LD_ADDR_EXP 53
14345: PUSH
14346: LD_INT 2
14348: ST_TO_ADDR
// def_shipments_density := 1 ;
14349: LD_ADDR_EXP 54
14353: PUSH
14354: LD_INT 1
14356: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14357: LD_ADDR_EXP 55
14361: PUSH
14362: LD_INT 0
14364: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14365: LD_ADDR_EXP 56
14369: PUSH
14370: LD_INT 1
14372: ST_TO_ADDR
// def_shared_vision := 1 ;
14373: LD_ADDR_EXP 57
14377: PUSH
14378: LD_INT 1
14380: ST_TO_ADDR
// def_morale_flags := 3 ;
14381: LD_ADDR_EXP 58
14385: PUSH
14386: LD_INT 3
14388: ST_TO_ADDR
// def_siberite_detection := 1 ;
14389: LD_ADDR_EXP 59
14393: PUSH
14394: LD_INT 1
14396: ST_TO_ADDR
// def_people_respawning := 1 ;
14397: LD_ADDR_EXP 60
14401: PUSH
14402: LD_INT 1
14404: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14405: LD_ADDR_EXP 61
14409: PUSH
14410: LD_INT 1
14412: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14413: LD_ADDR_EXP 62
14417: PUSH
14418: LD_INT 0
14420: ST_TO_ADDR
// def_builduptime := 2 ;
14421: LD_ADDR_EXP 63
14425: PUSH
14426: LD_INT 2
14428: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14429: LD_ADDR_VAR 0 2
14433: PUSH
14434: EMPTY
14435: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14436: LD_ADDR_VAR 0 3
14440: PUSH
14441: EMPTY
14442: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14443: LD_ADDR_LOC 21
14447: PUSH
14448: EMPTY
14449: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14450: LD_ADDR_LOC 22
14454: PUSH
14455: EMPTY
14456: ST_TO_ADDR
// Banned_Controls := [ ] ;
14457: LD_ADDR_LOC 23
14461: PUSH
14462: EMPTY
14463: ST_TO_ADDR
// Banned_Engines := [ ] ;
14464: LD_ADDR_LOC 24
14468: PUSH
14469: EMPTY
14470: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14471: LD_ADDR_LOC 19
14475: PUSH
14476: LD_INT 37
14478: PUSH
14479: EMPTY
14480: LIST
14481: PUSH
14482: LD_INT 4
14484: PUSH
14485: LD_INT 5
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: LD_INT 31
14494: PUSH
14495: LD_INT 32
14497: PUSH
14498: LD_INT 33
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: LIST
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: LIST
14510: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14511: LD_ADDR_LOC 20
14515: PUSH
14516: LD_INT 2
14518: PUSH
14519: LD_INT 2
14521: PUSH
14522: LD_INT 4
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: LIST
14529: ST_TO_ADDR
// end ; 2 :
14530: GO 16266
14532: LD_INT 2
14534: DOUBLE
14535: EQUAL
14536: IFTRUE 14540
14538: GO 14749
14540: POP
// begin def_base_level := 1 ;
14541: LD_ADDR_EXP 50
14545: PUSH
14546: LD_INT 1
14548: ST_TO_ADDR
// def_amount_of_people := 2 ;
14549: LD_ADDR_EXP 51
14553: PUSH
14554: LD_INT 2
14556: ST_TO_ADDR
// def_skill_level := 3 ;
14557: LD_ADDR_EXP 52
14561: PUSH
14562: LD_INT 3
14564: ST_TO_ADDR
// def_starting_resources := 3 ;
14565: LD_ADDR_EXP 53
14569: PUSH
14570: LD_INT 3
14572: ST_TO_ADDR
// def_shipments_density := 2 ;
14573: LD_ADDR_EXP 54
14577: PUSH
14578: LD_INT 2
14580: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14581: LD_ADDR_EXP 55
14585: PUSH
14586: LD_INT 1
14588: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14589: LD_ADDR_EXP 56
14593: PUSH
14594: LD_INT 2
14596: ST_TO_ADDR
// def_shared_vision := 1 ;
14597: LD_ADDR_EXP 57
14601: PUSH
14602: LD_INT 1
14604: ST_TO_ADDR
// def_morale_flags := 0 ;
14605: LD_ADDR_EXP 58
14609: PUSH
14610: LD_INT 0
14612: ST_TO_ADDR
// def_siberite_detection := 1 ;
14613: LD_ADDR_EXP 59
14617: PUSH
14618: LD_INT 1
14620: ST_TO_ADDR
// def_people_respawning := 0 ;
14621: LD_ADDR_EXP 60
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14629: LD_ADDR_EXP 61
14633: PUSH
14634: LD_INT 0
14636: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14637: LD_ADDR_EXP 62
14641: PUSH
14642: LD_INT 0
14644: ST_TO_ADDR
// def_builduptime := 2 ;
14645: LD_ADDR_EXP 63
14649: PUSH
14650: LD_INT 2
14652: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14653: LD_ADDR_VAR 0 2
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: EMPTY
14662: LIST
14663: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14664: LD_ADDR_VAR 0 3
14668: PUSH
14669: EMPTY
14670: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14671: LD_ADDR_LOC 21
14675: PUSH
14676: EMPTY
14677: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14678: LD_ADDR_LOC 22
14682: PUSH
14683: EMPTY
14684: ST_TO_ADDR
// Banned_Controls := [ ] ;
14685: LD_ADDR_LOC 23
14689: PUSH
14690: EMPTY
14691: ST_TO_ADDR
// Banned_Engines := [ ] ;
14692: LD_ADDR_LOC 24
14696: PUSH
14697: EMPTY
14698: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14699: LD_ADDR_LOC 19
14703: PUSH
14704: LD_INT 4
14706: PUSH
14707: LD_INT 5
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 31
14716: PUSH
14717: LD_INT 32
14719: PUSH
14720: LD_INT 33
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
14732: LD_ADDR_LOC 20
14736: PUSH
14737: LD_INT 1
14739: PUSH
14740: LD_INT 2
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: ST_TO_ADDR
// end ; 3 :
14747: GO 16266
14749: LD_INT 3
14751: DOUBLE
14752: EQUAL
14753: IFTRUE 14757
14755: GO 15000
14757: POP
// begin def_base_level := 1 ;
14758: LD_ADDR_EXP 50
14762: PUSH
14763: LD_INT 1
14765: ST_TO_ADDR
// def_amount_of_people := 2 ;
14766: LD_ADDR_EXP 51
14770: PUSH
14771: LD_INT 2
14773: ST_TO_ADDR
// def_skill_level := 3 ;
14774: LD_ADDR_EXP 52
14778: PUSH
14779: LD_INT 3
14781: ST_TO_ADDR
// def_starting_resources := 3 ;
14782: LD_ADDR_EXP 53
14786: PUSH
14787: LD_INT 3
14789: ST_TO_ADDR
// def_shipments_density := 1 ;
14790: LD_ADDR_EXP 54
14794: PUSH
14795: LD_INT 1
14797: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14798: LD_ADDR_EXP 55
14802: PUSH
14803: LD_INT 0
14805: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14806: LD_ADDR_EXP 56
14810: PUSH
14811: LD_INT 1
14813: ST_TO_ADDR
// def_shared_vision := 1 ;
14814: LD_ADDR_EXP 57
14818: PUSH
14819: LD_INT 1
14821: ST_TO_ADDR
// def_morale_flags := 0 ;
14822: LD_ADDR_EXP 58
14826: PUSH
14827: LD_INT 0
14829: ST_TO_ADDR
// def_siberite_detection := 1 ;
14830: LD_ADDR_EXP 59
14834: PUSH
14835: LD_INT 1
14837: ST_TO_ADDR
// def_people_respawning := 0 ;
14838: LD_ADDR_EXP 60
14842: PUSH
14843: LD_INT 0
14845: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14846: LD_ADDR_EXP 61
14850: PUSH
14851: LD_INT 2
14853: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14854: LD_ADDR_EXP 62
14858: PUSH
14859: LD_INT 0
14861: ST_TO_ADDR
// def_builduptime := 1 ;
14862: LD_ADDR_EXP 63
14866: PUSH
14867: LD_INT 1
14869: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14870: LD_ADDR_VAR 0 2
14874: PUSH
14875: LD_INT 23
14877: PUSH
14878: EMPTY
14879: LIST
14880: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14881: LD_ADDR_VAR 0 3
14885: PUSH
14886: LD_INT 2
14888: PUSH
14889: LD_INT 37
14891: PUSH
14892: LD_INT 32
14894: PUSH
14895: LD_INT 33
14897: PUSH
14898: LD_INT 36
14900: PUSH
14901: LD_INT 16
14903: PUSH
14904: LD_INT 23
14906: PUSH
14907: LD_INT 21
14909: PUSH
14910: LD_INT 18
14912: PUSH
14913: LD_INT 22
14915: PUSH
14916: LD_INT 20
14918: PUSH
14919: LD_INT 19
14921: PUSH
14922: LD_INT 25
14924: PUSH
14925: LD_INT 17
14927: PUSH
14928: LD_INT 24
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14948: LD_ADDR_LOC 21
14952: PUSH
14953: EMPTY
14954: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14955: LD_ADDR_LOC 22
14959: PUSH
14960: EMPTY
14961: ST_TO_ADDR
// Banned_Controls := [ ] ;
14962: LD_ADDR_LOC 23
14966: PUSH
14967: EMPTY
14968: ST_TO_ADDR
// Banned_Engines := [ ] ;
14969: LD_ADDR_LOC 24
14973: PUSH
14974: EMPTY
14975: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14976: LD_ADDR_LOC 19
14980: PUSH
14981: EMPTY
14982: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14983: LD_ADDR_LOC 20
14987: PUSH
14988: EMPTY
14989: ST_TO_ADDR
// No_Mechs := true ;
14990: LD_ADDR_EXP 64
14994: PUSH
14995: LD_INT 1
14997: ST_TO_ADDR
// end ; 4 :
14998: GO 16266
15000: LD_INT 4
15002: DOUBLE
15003: EQUAL
15004: IFTRUE 15008
15006: GO 15183
15008: POP
// begin def_base_level := 1 ;
15009: LD_ADDR_EXP 50
15013: PUSH
15014: LD_INT 1
15016: ST_TO_ADDR
// def_amount_of_people := 2 ;
15017: LD_ADDR_EXP 51
15021: PUSH
15022: LD_INT 2
15024: ST_TO_ADDR
// def_skill_level := 3 ;
15025: LD_ADDR_EXP 52
15029: PUSH
15030: LD_INT 3
15032: ST_TO_ADDR
// def_starting_resources := 3 ;
15033: LD_ADDR_EXP 53
15037: PUSH
15038: LD_INT 3
15040: ST_TO_ADDR
// def_shipments_density := 2 ;
15041: LD_ADDR_EXP 54
15045: PUSH
15046: LD_INT 2
15048: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15049: LD_ADDR_EXP 55
15053: PUSH
15054: LD_INT 1
15056: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15057: LD_ADDR_EXP 56
15061: PUSH
15062: LD_INT 2
15064: ST_TO_ADDR
// def_shared_vision := 1 ;
15065: LD_ADDR_EXP 57
15069: PUSH
15070: LD_INT 1
15072: ST_TO_ADDR
// def_morale_flags := 0 ;
15073: LD_ADDR_EXP 58
15077: PUSH
15078: LD_INT 0
15080: ST_TO_ADDR
// def_siberite_detection := 1 ;
15081: LD_ADDR_EXP 59
15085: PUSH
15086: LD_INT 1
15088: ST_TO_ADDR
// def_people_respawning := 0 ;
15089: LD_ADDR_EXP 60
15093: PUSH
15094: LD_INT 0
15096: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
15097: LD_ADDR_EXP 61
15101: PUSH
15102: LD_INT 0
15104: ST_TO_ADDR
// def_siberite_bomb := 1 ;
15105: LD_ADDR_EXP 62
15109: PUSH
15110: LD_INT 1
15112: ST_TO_ADDR
// def_builduptime := 3 ;
15113: LD_ADDR_EXP 63
15117: PUSH
15118: LD_INT 3
15120: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
15121: LD_ADDR_VAR 0 2
15125: PUSH
15126: LD_INT 1
15128: PUSH
15129: EMPTY
15130: LIST
15131: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
15132: LD_ADDR_VAR 0 3
15136: PUSH
15137: EMPTY
15138: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15139: LD_ADDR_LOC 21
15143: PUSH
15144: EMPTY
15145: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15146: LD_ADDR_LOC 22
15150: PUSH
15151: EMPTY
15152: ST_TO_ADDR
// Banned_Controls := [ ] ;
15153: LD_ADDR_LOC 23
15157: PUSH
15158: EMPTY
15159: ST_TO_ADDR
// Banned_Engines := [ ] ;
15160: LD_ADDR_LOC 24
15164: PUSH
15165: EMPTY
15166: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15167: LD_ADDR_LOC 19
15171: PUSH
15172: EMPTY
15173: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15174: LD_ADDR_LOC 20
15178: PUSH
15179: EMPTY
15180: ST_TO_ADDR
// end ; 5 :
15181: GO 16266
15183: LD_INT 5
15185: DOUBLE
15186: EQUAL
15187: IFTRUE 15191
15189: GO 15440
15191: POP
// begin def_base_level := 0 ;
15192: LD_ADDR_EXP 50
15196: PUSH
15197: LD_INT 0
15199: ST_TO_ADDR
// def_amount_of_people := 0 ;
15200: LD_ADDR_EXP 51
15204: PUSH
15205: LD_INT 0
15207: ST_TO_ADDR
// def_skill_level := 0 ;
15208: LD_ADDR_EXP 52
15212: PUSH
15213: LD_INT 0
15215: ST_TO_ADDR
// def_starting_resources := 0 ;
15216: LD_ADDR_EXP 53
15220: PUSH
15221: LD_INT 0
15223: ST_TO_ADDR
// def_shipments_density := 0 ;
15224: LD_ADDR_EXP 54
15228: PUSH
15229: LD_INT 0
15231: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15232: LD_ADDR_EXP 55
15236: PUSH
15237: LD_INT 0
15239: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15240: LD_ADDR_EXP 56
15244: PUSH
15245: LD_INT 0
15247: ST_TO_ADDR
// def_shared_vision := 1 ;
15248: LD_ADDR_EXP 57
15252: PUSH
15253: LD_INT 1
15255: ST_TO_ADDR
// def_morale_flags := 0 ;
15256: LD_ADDR_EXP 58
15260: PUSH
15261: LD_INT 0
15263: ST_TO_ADDR
// def_siberite_detection := 0 ;
15264: LD_ADDR_EXP 59
15268: PUSH
15269: LD_INT 0
15271: ST_TO_ADDR
// def_people_respawning := 1 ;
15272: LD_ADDR_EXP 60
15276: PUSH
15277: LD_INT 1
15279: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15280: LD_ADDR_EXP 61
15284: PUSH
15285: LD_INT 1
15287: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15288: LD_ADDR_EXP 62
15292: PUSH
15293: LD_INT 0
15295: ST_TO_ADDR
// def_builduptime := 0 ;
15296: LD_ADDR_EXP 63
15300: PUSH
15301: LD_INT 0
15303: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
15304: LD_ADDR_VAR 0 2
15308: PUSH
15309: LD_INT 10
15311: PUSH
15312: LD_INT 3
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
15319: LD_ADDR_VAR 0 3
15323: PUSH
15324: LD_INT 12
15326: PUSH
15327: LD_INT 11
15329: PUSH
15330: LD_INT 14
15332: PUSH
15333: LD_INT 13
15335: PUSH
15336: LD_INT 5
15338: PUSH
15339: LD_INT 24
15341: PUSH
15342: LD_INT 21
15344: PUSH
15345: LD_INT 33
15347: PUSH
15348: LD_INT 36
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
15362: LD_ADDR_LOC 21
15366: PUSH
15367: LD_INT 31
15369: PUSH
15370: EMPTY
15371: LIST
15372: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15373: LD_ADDR_LOC 22
15377: PUSH
15378: EMPTY
15379: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
15380: LD_ADDR_LOC 23
15384: PUSH
15385: LD_INT 2
15387: PUSH
15388: EMPTY
15389: LIST
15390: ST_TO_ADDR
// Banned_Engines := [ ] ;
15391: LD_ADDR_LOC 24
15395: PUSH
15396: EMPTY
15397: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
15398: LD_ADDR_LOC 19
15402: PUSH
15403: LD_INT 4
15405: PUSH
15406: EMPTY
15407: LIST
15408: PUSH
15409: LD_INT 31
15411: PUSH
15412: LD_INT 32
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
15423: LD_ADDR_LOC 20
15427: PUSH
15428: LD_INT 1
15430: PUSH
15431: LD_INT 1
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: ST_TO_ADDR
// end ; 6 :
15438: GO 16266
15440: LD_INT 6
15442: DOUBLE
15443: EQUAL
15444: IFTRUE 15448
15446: GO 15651
15448: POP
// begin def_base_level := 1 ;
15449: LD_ADDR_EXP 50
15453: PUSH
15454: LD_INT 1
15456: ST_TO_ADDR
// def_amount_of_people := 2 ;
15457: LD_ADDR_EXP 51
15461: PUSH
15462: LD_INT 2
15464: ST_TO_ADDR
// def_skill_level := 3 ;
15465: LD_ADDR_EXP 52
15469: PUSH
15470: LD_INT 3
15472: ST_TO_ADDR
// def_starting_resources := 3 ;
15473: LD_ADDR_EXP 53
15477: PUSH
15478: LD_INT 3
15480: ST_TO_ADDR
// def_shipments_density := 1 ;
15481: LD_ADDR_EXP 54
15485: PUSH
15486: LD_INT 1
15488: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15489: LD_ADDR_EXP 55
15493: PUSH
15494: LD_INT 0
15496: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15497: LD_ADDR_EXP 56
15501: PUSH
15502: LD_INT 1
15504: ST_TO_ADDR
// def_shared_vision := 1 ;
15505: LD_ADDR_EXP 57
15509: PUSH
15510: LD_INT 1
15512: ST_TO_ADDR
// def_morale_flags := 0 ;
15513: LD_ADDR_EXP 58
15517: PUSH
15518: LD_INT 0
15520: ST_TO_ADDR
// def_siberite_detection := 1 ;
15521: LD_ADDR_EXP 59
15525: PUSH
15526: LD_INT 1
15528: ST_TO_ADDR
// def_people_respawning := 2 ;
15529: LD_ADDR_EXP 60
15533: PUSH
15534: LD_INT 2
15536: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15537: LD_ADDR_EXP 61
15541: PUSH
15542: LD_INT 1
15544: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15545: LD_ADDR_EXP 62
15549: PUSH
15550: LD_INT 0
15552: ST_TO_ADDR
// def_builduptime := 1 ;
15553: LD_ADDR_EXP 63
15557: PUSH
15558: LD_INT 1
15560: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15561: LD_ADDR_VAR 0 2
15565: PUSH
15566: LD_INT 23
15568: PUSH
15569: EMPTY
15570: LIST
15571: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
15572: LD_ADDR_VAR 0 3
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: LD_INT 37
15582: PUSH
15583: LD_INT 31
15585: PUSH
15586: LD_INT 32
15588: PUSH
15589: LD_INT 33
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15599: LD_ADDR_LOC 21
15603: PUSH
15604: EMPTY
15605: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15606: LD_ADDR_LOC 22
15610: PUSH
15611: EMPTY
15612: ST_TO_ADDR
// Banned_Controls := [ ] ;
15613: LD_ADDR_LOC 23
15617: PUSH
15618: EMPTY
15619: ST_TO_ADDR
// Banned_Engines := [ ] ;
15620: LD_ADDR_LOC 24
15624: PUSH
15625: EMPTY
15626: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15627: LD_ADDR_LOC 19
15631: PUSH
15632: EMPTY
15633: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15634: LD_ADDR_LOC 20
15638: PUSH
15639: EMPTY
15640: ST_TO_ADDR
// No_Mechs := true ;
15641: LD_ADDR_EXP 64
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// end ; 7 :
15649: GO 16266
15651: LD_INT 7
15653: DOUBLE
15654: EQUAL
15655: IFTRUE 15659
15657: GO 15857
15659: POP
// begin def_base_level := 1 ;
15660: LD_ADDR_EXP 50
15664: PUSH
15665: LD_INT 1
15667: ST_TO_ADDR
// def_amount_of_people := 2 ;
15668: LD_ADDR_EXP 51
15672: PUSH
15673: LD_INT 2
15675: ST_TO_ADDR
// def_skill_level := 3 ;
15676: LD_ADDR_EXP 52
15680: PUSH
15681: LD_INT 3
15683: ST_TO_ADDR
// def_starting_resources := 3 ;
15684: LD_ADDR_EXP 53
15688: PUSH
15689: LD_INT 3
15691: ST_TO_ADDR
// def_shipments_density := 1 ;
15692: LD_ADDR_EXP 54
15696: PUSH
15697: LD_INT 1
15699: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15700: LD_ADDR_EXP 55
15704: PUSH
15705: LD_INT 1
15707: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15708: LD_ADDR_EXP 56
15712: PUSH
15713: LD_INT 2
15715: ST_TO_ADDR
// def_shared_vision := 1 ;
15716: LD_ADDR_EXP 57
15720: PUSH
15721: LD_INT 1
15723: ST_TO_ADDR
// def_morale_flags := 0 ;
15724: LD_ADDR_EXP 58
15728: PUSH
15729: LD_INT 0
15731: ST_TO_ADDR
// def_siberite_detection := 1 ;
15732: LD_ADDR_EXP 59
15736: PUSH
15737: LD_INT 1
15739: ST_TO_ADDR
// def_people_respawning := 0 ;
15740: LD_ADDR_EXP 60
15744: PUSH
15745: LD_INT 0
15747: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15748: LD_ADDR_EXP 61
15752: PUSH
15753: LD_INT 1
15755: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15756: LD_ADDR_EXP 62
15760: PUSH
15761: LD_INT 0
15763: ST_TO_ADDR
// def_builduptime := 3 ;
15764: LD_ADDR_EXP 63
15768: PUSH
15769: LD_INT 3
15771: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15772: LD_ADDR_VAR 0 2
15776: PUSH
15777: LD_INT 23
15779: PUSH
15780: EMPTY
15781: LIST
15782: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
15783: LD_ADDR_VAR 0 3
15787: PUSH
15788: LD_INT 37
15790: PUSH
15791: EMPTY
15792: LIST
15793: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15794: LD_ADDR_LOC 21
15798: PUSH
15799: EMPTY
15800: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15801: LD_ADDR_LOC 22
15805: PUSH
15806: EMPTY
15807: ST_TO_ADDR
// Banned_Controls := [ ] ;
15808: LD_ADDR_LOC 23
15812: PUSH
15813: EMPTY
15814: ST_TO_ADDR
// Banned_Engines := [ ] ;
15815: LD_ADDR_LOC 24
15819: PUSH
15820: EMPTY
15821: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15822: LD_ADDR_LOC 19
15826: PUSH
15827: LD_INT 31
15829: PUSH
15830: LD_INT 32
15832: PUSH
15833: LD_INT 33
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: PUSH
15841: EMPTY
15842: LIST
15843: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
15844: LD_ADDR_LOC 20
15848: PUSH
15849: LD_INT 10
15851: PUSH
15852: EMPTY
15853: LIST
15854: ST_TO_ADDR
// end ; 8 :
15855: GO 16266
15857: LD_INT 8
15859: DOUBLE
15860: EQUAL
15861: IFTRUE 15865
15863: GO 16265
15865: POP
// begin def_base_level := 0 ;
15866: LD_ADDR_EXP 50
15870: PUSH
15871: LD_INT 0
15873: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
15874: LD_ADDR_EXP 51
15878: PUSH
15879: LD_INT 0
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: CALL_OW 12
15889: ST_TO_ADDR
// def_skill_level := 0 ;
15890: LD_ADDR_EXP 52
15894: PUSH
15895: LD_INT 0
15897: ST_TO_ADDR
// def_starting_resources := 2 ;
15898: LD_ADDR_EXP 53
15902: PUSH
15903: LD_INT 2
15905: ST_TO_ADDR
// def_shipments_density := 1 ;
15906: LD_ADDR_EXP 54
15910: PUSH
15911: LD_INT 1
15913: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15914: LD_ADDR_EXP 55
15918: PUSH
15919: LD_INT 0
15921: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15922: LD_ADDR_EXP 56
15926: PUSH
15927: LD_INT 0
15929: ST_TO_ADDR
// def_shared_vision := 1 ;
15930: LD_ADDR_EXP 57
15934: PUSH
15935: LD_INT 1
15937: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
15938: LD_ADDR_EXP 58
15942: PUSH
15943: LD_INT 0
15945: PPUSH
15946: LD_INT 2
15948: PPUSH
15949: CALL_OW 12
15953: ST_TO_ADDR
// def_siberite_detection := 0 ;
15954: LD_ADDR_EXP 59
15958: PUSH
15959: LD_INT 0
15961: ST_TO_ADDR
// def_people_respawning := 0 ;
15962: LD_ADDR_EXP 60
15966: PUSH
15967: LD_INT 0
15969: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
15970: LD_ADDR_EXP 61
15974: PUSH
15975: LD_INT 2
15977: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15978: LD_ADDR_EXP 62
15982: PUSH
15983: LD_INT 0
15985: ST_TO_ADDR
// def_builduptime := 0 ;
15986: LD_ADDR_EXP 63
15990: PUSH
15991: LD_INT 0
15993: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
15994: LD_ADDR_VAR 0 2
15998: PUSH
15999: LD_INT 23
16001: PUSH
16002: LD_INT 20
16004: PUSH
16005: LD_INT 40
16007: PUSH
16008: LD_INT 47
16010: PUSH
16011: LD_INT 46
16013: PUSH
16014: LD_INT 39
16016: PUSH
16017: LD_INT 71
16019: PUSH
16020: LD_INT 34
16022: PUSH
16023: LD_INT 41
16025: PUSH
16026: LD_INT 44
16028: PUSH
16029: LD_INT 17
16031: PUSH
16032: LD_INT 16
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
16049: LD_ADDR_VAR 0 3
16053: PUSH
16054: LD_INT 37
16056: PUSH
16057: LD_INT 5
16059: PUSH
16060: LD_INT 13
16062: PUSH
16063: LD_INT 34
16065: PUSH
16066: LD_INT 12
16068: PUSH
16069: LD_INT 15
16071: PUSH
16072: LD_INT 11
16074: PUSH
16075: LD_INT 14
16077: PUSH
16078: LD_INT 29
16080: PUSH
16081: LD_INT 30
16083: PUSH
16084: LD_INT 28
16086: PUSH
16087: LD_INT 24
16089: PUSH
16090: LD_INT 25
16092: PUSH
16093: LD_INT 20
16095: PUSH
16096: LD_INT 21
16098: PUSH
16099: LD_INT 22
16101: PUSH
16102: LD_INT 36
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16124: LD_ADDR_LOC 21
16128: PUSH
16129: EMPTY
16130: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
16131: LD_ADDR_LOC 22
16135: PUSH
16136: LD_INT 14
16138: PUSH
16139: EMPTY
16140: LIST
16141: ST_TO_ADDR
// Banned_Controls := [ ] ;
16142: LD_ADDR_LOC 23
16146: PUSH
16147: EMPTY
16148: ST_TO_ADDR
// Banned_Engines := [ ] ;
16149: LD_ADDR_LOC 24
16153: PUSH
16154: EMPTY
16155: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
16156: LD_ADDR_LOC 19
16160: PUSH
16161: LD_INT 31
16163: PUSH
16164: LD_INT 32
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: LD_INT 4
16173: PUSH
16174: EMPTY
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
16181: LD_ADDR_LOC 20
16185: PUSH
16186: LD_INT 2
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: ST_TO_ADDR
// for i := 1 to 8 do
16196: LD_ADDR_VAR 0 4
16200: PUSH
16201: DOUBLE
16202: LD_INT 1
16204: DEC
16205: ST_TO_ADDR
16206: LD_INT 8
16208: PUSH
16209: FOR_TO
16210: IFFALSE 16261
// if ( Side_Nations [ i ] = 3 ) then
16212: LD_EXP 24
16216: PUSH
16217: LD_VAR 0 4
16221: ARRAY
16222: PUSH
16223: LD_INT 3
16225: EQUAL
16226: IFFALSE 16259
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
16228: LD_ADDR_EXP 24
16232: PUSH
16233: LD_EXP 24
16237: PPUSH
16238: LD_VAR 0 4
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: LD_INT 2
16248: PPUSH
16249: CALL_OW 12
16253: PPUSH
16254: CALL_OW 1
16258: ST_TO_ADDR
16259: GO 16209
16261: POP
16262: POP
// end ; end ;
16263: GO 16266
16265: POP
// for i := 1 to 8 do
16266: LD_ADDR_VAR 0 4
16270: PUSH
16271: DOUBLE
16272: LD_INT 1
16274: DEC
16275: ST_TO_ADDR
16276: LD_INT 8
16278: PUSH
16279: FOR_TO
16280: IFFALSE 16364
// if Side_Positions [ i ] then
16282: LD_EXP 23
16286: PUSH
16287: LD_VAR 0 4
16291: ARRAY
16292: IFFALSE 16362
// begin for j in Unavailable_Techs do
16294: LD_ADDR_VAR 0 5
16298: PUSH
16299: LD_VAR 0 2
16303: PUSH
16304: FOR_IN
16305: IFFALSE 16326
// SetTech ( j , i , 0 ) ;
16307: LD_VAR 0 5
16311: PPUSH
16312: LD_VAR 0 4
16316: PPUSH
16317: LD_INT 0
16319: PPUSH
16320: CALL_OW 322
16324: GO 16304
16326: POP
16327: POP
// for j in Unavailable_Builds do
16328: LD_ADDR_VAR 0 5
16332: PUSH
16333: LD_VAR 0 3
16337: PUSH
16338: FOR_IN
16339: IFFALSE 16360
// SetRestrict ( j , i , 0 ) ;
16341: LD_VAR 0 5
16345: PPUSH
16346: LD_VAR 0 4
16350: PPUSH
16351: LD_INT 0
16353: PPUSH
16354: CALL_OW 324
16358: GO 16338
16360: POP
16361: POP
// end ;
16362: GO 16279
16364: POP
16365: POP
// end ;
16366: LD_VAR 0 1
16370: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
16371: LD_INT 0
16373: PPUSH
16374: PPUSH
16375: PPUSH
16376: PPUSH
16377: PPUSH
16378: PPUSH
16379: PPUSH
// for i := 1 to Restricted_Builds do
16380: LD_ADDR_VAR 0 2
16384: PUSH
16385: DOUBLE
16386: LD_INT 1
16388: DEC
16389: ST_TO_ADDR
16390: LD_LOC 19
16394: PUSH
16395: FOR_TO
16396: IFFALSE 16706
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
16398: LD_LOC 19
16402: PUSH
16403: LD_VAR 0 2
16407: ARRAY
16408: PUSH
16409: LD_INT 1
16411: ARRAY
16412: PUSH
16413: LD_INT 31
16415: DOUBLE
16416: EQUAL
16417: IFTRUE 16433
16419: LD_INT 32
16421: DOUBLE
16422: EQUAL
16423: IFTRUE 16433
16425: LD_INT 33
16427: DOUBLE
16428: EQUAL
16429: IFTRUE 16433
16431: GO 16444
16433: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
16434: LD_ADDR_VAR 0 6
16438: PUSH
16439: LD_STRING #Turrets
16441: ST_TO_ADDR
16442: GO 16489
16444: LD_INT 4
16446: DOUBLE
16447: EQUAL
16448: IFTRUE 16458
16450: LD_INT 5
16452: DOUBLE
16453: EQUAL
16454: IFTRUE 16458
16456: GO 16469
16458: POP
// btype := #Armouries ; b_Behemoth :
16459: LD_ADDR_VAR 0 6
16463: PUSH
16464: LD_STRING #Armouries
16466: ST_TO_ADDR
16467: GO 16489
16469: LD_INT 37
16471: DOUBLE
16472: EQUAL
16473: IFTRUE 16477
16475: GO 16488
16477: POP
// btype := #Behemoths ; end ;
16478: LD_ADDR_VAR 0 6
16482: PUSH
16483: LD_STRING #Behemoths
16485: ST_TO_ADDR
16486: GO 16489
16488: POP
// list := [ ] ;
16489: LD_ADDR_VAR 0 7
16493: PUSH
16494: EMPTY
16495: ST_TO_ADDR
// for j := 1 to 8 do
16496: LD_ADDR_VAR 0 3
16500: PUSH
16501: DOUBLE
16502: LD_INT 1
16504: DEC
16505: ST_TO_ADDR
16506: LD_INT 8
16508: PUSH
16509: FOR_TO
16510: IFFALSE 16603
// if Side_Positions [ j ] then
16512: LD_EXP 23
16516: PUSH
16517: LD_VAR 0 3
16521: ARRAY
16522: IFFALSE 16601
// begin amount := 0 ;
16524: LD_ADDR_VAR 0 5
16528: PUSH
16529: LD_INT 0
16531: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
16532: LD_ADDR_VAR 0 4
16536: PUSH
16537: LD_LOC 19
16541: PUSH
16542: LD_VAR 0 2
16546: ARRAY
16547: PUSH
16548: FOR_IN
16549: IFFALSE 16597
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
16551: LD_ADDR_VAR 0 5
16555: PUSH
16556: LD_VAR 0 5
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_VAR 0 3
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 30
16575: PUSH
16576: LD_VAR 0 4
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PPUSH
16589: CALL_OW 69
16593: PLUS
16594: ST_TO_ADDR
16595: GO 16548
16597: POP
16598: POP
// break ;
16599: GO 16603
// end ;
16601: GO 16509
16603: POP
16604: POP
// list := [ ] ;
16605: LD_ADDR_VAR 0 7
16609: PUSH
16610: EMPTY
16611: ST_TO_ADDR
// for j := 1 to 8 do
16612: LD_ADDR_VAR 0 3
16616: PUSH
16617: DOUBLE
16618: LD_INT 1
16620: DEC
16621: ST_TO_ADDR
16622: LD_INT 8
16624: PUSH
16625: FOR_TO
16626: IFFALSE 16646
// list := list ^ amount ;
16628: LD_ADDR_VAR 0 7
16632: PUSH
16633: LD_VAR 0 7
16637: PUSH
16638: LD_VAR 0 5
16642: ADD
16643: ST_TO_ADDR
16644: GO 16625
16646: POP
16647: POP
// Already_Built := Already_Built ^ [ list ] ;
16648: LD_ADDR_LOC 25
16652: PUSH
16653: LD_LOC 25
16657: PUSH
16658: LD_VAR 0 7
16662: PUSH
16663: EMPTY
16664: LIST
16665: ADD
16666: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
16667: LD_ADDR_LOC 26
16671: PUSH
16672: LD_LOC 26
16676: PUSH
16677: LD_VAR 0 6
16681: PUSH
16682: LD_VAR 0 5
16686: PUSH
16687: LD_LOC 20
16691: PUSH
16692: LD_VAR 0 2
16696: ARRAY
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: ADD
16703: ST_TO_ADDR
// end ;
16704: GO 16395
16706: POP
16707: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16708: LD_ADDR_LOC 27
16712: PUSH
16713: LD_INT 0
16715: PUSH
16716: LD_INT 0
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: LD_INT 0
16724: PUSH
16725: LD_INT 0
16727: PUSH
16728: LD_INT 0
16730: PUSH
16731: LD_INT 0
16733: PUSH
16734: LD_INT 0
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: ST_TO_ADDR
// if Limits_Info then
16747: LD_LOC 26
16751: IFFALSE 16767
// Limits_Info := #Limits ^ Limits_Info ;
16753: LD_ADDR_LOC 26
16757: PUSH
16758: LD_STRING #Limits
16760: PUSH
16761: LD_LOC 26
16765: ADD
16766: ST_TO_ADDR
// end ;
16767: LD_VAR 0 1
16771: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
16772: LD_INT 0
16774: PPUSH
16775: PPUSH
16776: PPUSH
16777: PPUSH
// for i := 1 to Restricted_Builds do
16778: LD_ADDR_VAR 0 7
16782: PUSH
16783: DOUBLE
16784: LD_INT 1
16786: DEC
16787: ST_TO_ADDR
16788: LD_LOC 19
16792: PUSH
16793: FOR_TO
16794: IFFALSE 17217
// if BType in Restricted_Builds [ i ] then
16796: LD_VAR 0 2
16800: PUSH
16801: LD_LOC 19
16805: PUSH
16806: LD_VAR 0 7
16810: ARRAY
16811: IN
16812: IFFALSE 17215
// begin if old_side then
16814: LD_VAR 0 4
16818: IFFALSE 16944
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
16820: LD_LOC 25
16824: PUSH
16825: LD_VAR 0 7
16829: ARRAY
16830: PUSH
16831: LD_VAR 0 3
16835: ARRAY
16836: PUSH
16837: LD_VAR 0 5
16841: PLUS
16842: PUSH
16843: LD_LOC 20
16847: PUSH
16848: LD_VAR 0 7
16852: ARRAY
16853: GREATER
16854: IFFALSE 16880
// begin SetSide ( un , old_side ) ;
16856: LD_VAR 0 1
16860: PPUSH
16861: LD_VAR 0 4
16865: PPUSH
16866: CALL_OW 235
// count := 0 ;
16870: LD_ADDR_VAR 0 5
16874: PUSH
16875: LD_INT 0
16877: ST_TO_ADDR
// end else
16878: GO 16944
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
16880: LD_ADDR_LOC 25
16884: PUSH
16885: LD_LOC 25
16889: PPUSH
16890: LD_VAR 0 7
16894: PPUSH
16895: LD_LOC 25
16899: PUSH
16900: LD_VAR 0 7
16904: ARRAY
16905: PPUSH
16906: LD_VAR 0 4
16910: PPUSH
16911: LD_LOC 25
16915: PUSH
16916: LD_VAR 0 7
16920: ARRAY
16921: PUSH
16922: LD_VAR 0 4
16926: ARRAY
16927: PUSH
16928: LD_VAR 0 5
16932: MINUS
16933: PPUSH
16934: CALL_OW 1
16938: PPUSH
16939: CALL_OW 1
16943: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
16944: LD_ADDR_LOC 25
16948: PUSH
16949: LD_LOC 25
16953: PPUSH
16954: LD_VAR 0 7
16958: PPUSH
16959: LD_LOC 25
16963: PUSH
16964: LD_VAR 0 7
16968: ARRAY
16969: PPUSH
16970: LD_VAR 0 3
16974: PPUSH
16975: LD_LOC 25
16979: PUSH
16980: LD_VAR 0 7
16984: ARRAY
16985: PUSH
16986: LD_VAR 0 3
16990: ARRAY
16991: PUSH
16992: LD_VAR 0 5
16996: PLUS
16997: PPUSH
16998: CALL_OW 1
17002: PPUSH
17003: CALL_OW 1
17007: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
17008: LD_VAR 0 5
17012: PUSH
17013: LD_INT 0
17015: NONEQUAL
17016: PUSH
17017: LD_VAR 0 3
17021: PUSH
17022: LD_OWVAR 2
17026: EQUAL
17027: AND
17028: IFFALSE 17071
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
17030: LD_ADDR_LOC 26
17034: PUSH
17035: LD_LOC 26
17039: PPUSH
17040: LD_INT 3
17042: PUSH
17043: LD_VAR 0 7
17047: MUL
17048: PPUSH
17049: LD_LOC 25
17053: PUSH
17054: LD_VAR 0 7
17058: ARRAY
17059: PUSH
17060: LD_VAR 0 3
17064: ARRAY
17065: PPUSH
17066: CALL_OW 1
17070: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
17071: LD_LOC 25
17075: PUSH
17076: LD_VAR 0 7
17080: ARRAY
17081: PUSH
17082: LD_VAR 0 3
17086: ARRAY
17087: PUSH
17088: LD_LOC 20
17092: PUSH
17093: LD_VAR 0 7
17097: ARRAY
17098: GREATER
17099: IFFALSE 17126
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
17101: LD_ADDR_LOC 27
17105: PUSH
17106: LD_LOC 27
17110: PPUSH
17111: LD_VAR 0 3
17115: PPUSH
17116: LD_INT 1
17118: PPUSH
17119: CALL_OW 1
17123: ST_TO_ADDR
// end else
17124: GO 17213
// begin for j := 1 to Restricted_Builds do
17126: LD_ADDR_VAR 0 8
17130: PUSH
17131: DOUBLE
17132: LD_INT 1
17134: DEC
17135: ST_TO_ADDR
17136: LD_LOC 19
17140: PUSH
17141: FOR_TO
17142: IFFALSE 17186
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
17144: LD_LOC 25
17148: PUSH
17149: LD_VAR 0 8
17153: ARRAY
17154: PUSH
17155: LD_VAR 0 3
17159: ARRAY
17160: PUSH
17161: LD_LOC 20
17165: PUSH
17166: LD_VAR 0 8
17170: ARRAY
17171: GREATER
17172: IFFALSE 17184
// begin Is_Cheater := true ;
17174: LD_ADDR_VAR 0 9
17178: PUSH
17179: LD_INT 1
17181: ST_TO_ADDR
// break ;
17182: GO 17186
// end ;
17184: GO 17141
17186: POP
17187: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
17188: LD_ADDR_LOC 27
17192: PUSH
17193: LD_LOC 27
17197: PPUSH
17198: LD_VAR 0 3
17202: PPUSH
17203: LD_VAR 0 9
17207: PPUSH
17208: CALL_OW 1
17212: ST_TO_ADDR
// end ; break ;
17213: GO 17217
// end ;
17215: GO 16793
17217: POP
17218: POP
// end ;
17219: LD_VAR 0 6
17223: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
17224: LD_VAR 0 5
17228: PUSH
17229: LD_LOC 21
17233: IN
17234: PUSH
17235: LD_VAR 0 2
17239: PUSH
17240: LD_LOC 22
17244: IN
17245: OR
17246: PUSH
17247: LD_VAR 0 4
17251: PUSH
17252: LD_LOC 23
17256: IN
17257: OR
17258: PUSH
17259: LD_VAR 0 3
17263: PUSH
17264: LD_LOC 24
17268: IN
17269: OR
17270: IFFALSE 17281
// ComCancel ( factory ) ;
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 127
// end ;
17281: PPOPN 5
17283: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
17284: LD_VAR 0 2
17288: PUSH
17289: LD_LOC 21
17293: IN
17294: IFFALSE 17305
// ComCancel ( building ) ;
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 127
// end ; end_of_file
17305: PPOPN 2
17307: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
17308: LD_INT 0
17310: PPUSH
17311: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
17312: LD_ADDR_VAR 0 2
17316: PUSH
17317: LD_STRING #Multi1x1-Time
17319: PUSH
17320: LD_OWVAR 1
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: ST_TO_ADDR
// if WaitServerStrings then
17329: LD_EXP 66
17333: IFFALSE 17351
// AllStrings = AllStrings ^ WaitServerStrings ;
17335: LD_ADDR_VAR 0 2
17339: PUSH
17340: LD_VAR 0 2
17344: PUSH
17345: LD_EXP 66
17349: ADD
17350: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
17351: LD_INT 0
17353: PUSH
17354: LD_EXP 18
17358: PUSH
17359: LD_OWVAR 1
17363: MINUS
17364: LESSEQUAL
17365: IFFALSE 17396
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
17367: LD_ADDR_VAR 0 2
17371: PUSH
17372: LD_VAR 0 2
17376: PUSH
17377: LD_STRING #allowedsibbomb
17379: PUSH
17380: LD_EXP 18
17384: PUSH
17385: LD_OWVAR 1
17389: MINUS
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: ADD
17395: ST_TO_ADDR
// if ( ExtraStrings ) then
17396: LD_EXP 65
17400: IFFALSE 17422
// AllStrings := AllStrings ^  ^ ExtraStrings ;
17402: LD_ADDR_VAR 0 2
17406: PUSH
17407: LD_VAR 0 2
17411: PUSH
17412: LD_STRING 
17414: ADD
17415: PUSH
17416: LD_EXP 65
17420: ADD
17421: ST_TO_ADDR
// if Display_kings and not isSGUI then
17422: LD_EXP 67
17426: PUSH
17427: LD_OWVAR 83
17431: NOT
17432: AND
17433: IFFALSE 17451
// AllStrings = AllStrings ^ Display_kings ;
17435: LD_ADDR_VAR 0 2
17439: PUSH
17440: LD_VAR 0 2
17444: PUSH
17445: LD_EXP 67
17449: ADD
17450: ST_TO_ADDR
// if ( LimitsStrings ) then
17451: CALL 14148 0 0
17455: IFFALSE 17477
// AllStrings := AllStrings ^  ^ LimitsStrings ;
17457: LD_ADDR_VAR 0 2
17461: PUSH
17462: LD_VAR 0 2
17466: PUSH
17467: LD_STRING 
17469: ADD
17470: PUSH
17471: CALL 14148 0 0
17475: ADD
17476: ST_TO_ADDR
// Display_Strings := AllStrings ;
17477: LD_ADDR_OWVAR 47
17481: PUSH
17482: LD_VAR 0 2
17486: ST_TO_ADDR
// end ;
17487: LD_VAR 0 1
17491: RET
// every 0 0$1 do
17492: GO 17494
17494: DISABLE
// begin ShowTimer ;
17495: CALL 17308 0 0
// enable ;
17499: ENABLE
// end ; end_of_file
17500: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
17501: LD_INT 0
17503: PPUSH
17504: PPUSH
17505: PPUSH
// sharedPoints1 = [ ] ;
17506: LD_ADDR_LOC 28
17510: PUSH
17511: EMPTY
17512: ST_TO_ADDR
// sharedPoints2 = [ ] ;
17513: LD_ADDR_LOC 29
17517: PUSH
17518: EMPTY
17519: ST_TO_ADDR
// sharedPoints3 = [ ] ;
17520: LD_ADDR_LOC 30
17524: PUSH
17525: EMPTY
17526: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
17527: LD_ADDR_VAR 0 2
17531: PUSH
17532: DOUBLE
17533: LD_INT 1
17535: DEC
17536: ST_TO_ADDR
17537: LD_EXP 23
17541: PUSH
17542: LD_INT 0
17544: PLUS
17545: PUSH
17546: FOR_TO
17547: IFFALSE 17649
// begin if not Side_Positions [ i ] = 0 then
17549: LD_EXP 23
17553: PUSH
17554: LD_VAR 0 2
17558: ARRAY
17559: PUSH
17560: LD_INT 0
17562: EQUAL
17563: NOT
17564: IFFALSE 17578
// SetMultiScore ( i , 0 ) ;
17566: LD_VAR 0 2
17570: PPUSH
17571: LD_INT 0
17573: PPUSH
17574: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
17578: LD_ADDR_LOC 28
17582: PUSH
17583: LD_LOC 28
17587: PPUSH
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 0
17595: PPUSH
17596: CALL_OW 1
17600: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
17601: LD_ADDR_LOC 29
17605: PUSH
17606: LD_LOC 29
17610: PPUSH
17611: LD_VAR 0 2
17615: PPUSH
17616: LD_INT 0
17618: PPUSH
17619: CALL_OW 1
17623: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
17624: LD_ADDR_LOC 30
17628: PUSH
17629: LD_LOC 30
17633: PPUSH
17634: LD_VAR 0 2
17638: PPUSH
17639: LD_INT 0
17641: PPUSH
17642: CALL_OW 1
17646: ST_TO_ADDR
// end ;
17647: GO 17546
17649: POP
17650: POP
// pointGame = true ;
17651: LD_ADDR_LOC 31
17655: PUSH
17656: LD_INT 1
17658: ST_TO_ADDR
// end ;
17659: LD_VAR 0 1
17663: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
17664: LD_LOC 31
17668: IFFALSE 18079
17670: GO 17672
17672: DISABLE
17673: LD_INT 0
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
17680: PPUSH
17681: PPUSH
17682: PPUSH
17683: PPUSH
17684: PPUSH
17685: PPUSH
17686: PPUSH
17687: PPUSH
// begin if isSGUI then
17688: LD_OWVAR 83
17692: IFFALSE 18079
// begin if Teams [ 1 ] then
17694: LD_EXP 22
17698: PUSH
17699: LD_INT 1
17701: ARRAY
17702: IFFALSE 17714
// red = true else
17704: LD_ADDR_VAR 0 2
17708: PUSH
17709: LD_INT 1
17711: ST_TO_ADDR
17712: GO 17722
// red = false ;
17714: LD_ADDR_VAR 0 2
17718: PUSH
17719: LD_INT 0
17721: ST_TO_ADDR
// if Teams [ 2 ] then
17722: LD_EXP 22
17726: PUSH
17727: LD_INT 2
17729: ARRAY
17730: IFFALSE 17742
// blue = true else
17732: LD_ADDR_VAR 0 3
17736: PUSH
17737: LD_INT 1
17739: ST_TO_ADDR
17740: GO 17750
// blue = false ;
17742: LD_ADDR_VAR 0 3
17746: PUSH
17747: LD_INT 0
17749: ST_TO_ADDR
// if Teams [ 3 ] then
17750: LD_EXP 22
17754: PUSH
17755: LD_INT 3
17757: ARRAY
17758: IFFALSE 17770
// yel = true else
17760: LD_ADDR_VAR 0 4
17764: PUSH
17765: LD_INT 1
17767: ST_TO_ADDR
17768: GO 17778
// yel = false ;
17770: LD_ADDR_VAR 0 4
17774: PUSH
17775: LD_INT 0
17777: ST_TO_ADDR
// if Teams [ 4 ] then
17778: LD_EXP 22
17782: PUSH
17783: LD_INT 4
17785: ARRAY
17786: IFFALSE 17798
// green = true else
17788: LD_ADDR_VAR 0 5
17792: PUSH
17793: LD_INT 1
17795: ST_TO_ADDR
17796: GO 17806
// green = false ;
17798: LD_ADDR_VAR 0 5
17802: PUSH
17803: LD_INT 0
17805: ST_TO_ADDR
// if def_public_score then
17806: LD_EXP 6
17810: IFFALSE 17822
// p = true else
17812: LD_ADDR_VAR 0 12
17816: PUSH
17817: LD_INT 1
17819: ST_TO_ADDR
17820: GO 17830
// p = false ;
17822: LD_ADDR_VAR 0 12
17826: PUSH
17827: LD_INT 0
17829: ST_TO_ADDR
// if team_game then
17830: LD_EXP 25
17834: IFFALSE 17915
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
17836: LD_ADDR_VAR 0 13
17840: PUSH
17841: LD_INT 3
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: LD_INT 7
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: PUSH
17859: LD_EXP 28
17863: ARRAY
17864: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
17865: LD_ADDR_VAR 0 10
17869: PUSH
17870: LD_STRING {
17872: PUSH
17873: LD_VAR 0 3
17877: STR
17878: PUSH
17879: LD_STRING ,
17881: STR
17882: PUSH
17883: LD_VAR 0 4
17887: STR
17888: PUSH
17889: LD_STRING ,
17891: STR
17892: PUSH
17893: LD_VAR 0 2
17897: STR
17898: PUSH
17899: LD_STRING ,0,0,0,
17901: STR
17902: PUSH
17903: LD_VAR 0 5
17907: STR
17908: PUSH
17909: LD_STRING ,0}
17911: STR
17912: ST_TO_ADDR
// end else
17913: GO 18015
// begin you = your_side ;
17915: LD_ADDR_VAR 0 13
17919: PUSH
17920: LD_OWVAR 2
17924: ST_TO_ADDR
// s = { ;
17925: LD_ADDR_VAR 0 10
17929: PUSH
17930: LD_STRING {
17932: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
17933: LD_ADDR_VAR 0 1
17937: PUSH
17938: DOUBLE
17939: LD_INT 1
17941: DEC
17942: ST_TO_ADDR
17943: LD_EXP 23
17947: PUSH
17948: LD_INT 0
17950: PLUS
17951: PUSH
17952: FOR_TO
17953: IFFALSE 17999
// if side_positions [ i ] then
17955: LD_EXP 23
17959: PUSH
17960: LD_VAR 0 1
17964: ARRAY
17965: IFFALSE 17983
// s = s & 1, else
17967: LD_ADDR_VAR 0 10
17971: PUSH
17972: LD_VAR 0 10
17976: PUSH
17977: LD_STRING 1,
17979: STR
17980: ST_TO_ADDR
17981: GO 17997
// s = s & 0, ;
17983: LD_ADDR_VAR 0 10
17987: PUSH
17988: LD_VAR 0 10
17992: PUSH
17993: LD_STRING 0,
17995: STR
17996: ST_TO_ADDR
17997: GO 17952
17999: POP
18000: POP
// s = s & } ;
18001: LD_ADDR_VAR 0 10
18005: PUSH
18006: LD_VAR 0 10
18010: PUSH
18011: LD_STRING }
18013: STR
18014: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
18015: LD_STRING initScore(
18017: PUSH
18018: LD_VAR 0 10
18022: STR
18023: PUSH
18024: LD_STRING ,
18026: STR
18027: PUSH
18028: LD_VAR 0 12
18032: STR
18033: PUSH
18034: LD_STRING ,
18036: STR
18037: PUSH
18038: LD_VAR 0 13
18042: STR
18043: PUSH
18044: LD_STRING  );
18046: STR
18047: PPUSH
18048: CALL_OW 559
// if game_type = 3 then
18052: LD_EXP 48
18056: PUSH
18057: LD_INT 3
18059: EQUAL
18060: IFFALSE 18079
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
18062: LD_STRING AddScorePoints(2,2,
18064: PUSH
18065: LD_EXP 20
18069: STR
18070: PUSH
18071: LD_STRING  );
18073: STR
18074: PPUSH
18075: CALL_OW 559
// end ; end ;
18079: PPOPN 13
18081: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
18082: LD_INT 0
18084: PPUSH
18085: PPUSH
// case typ of 1 :
18086: LD_VAR 0 3
18090: PUSH
18091: LD_INT 1
18093: DOUBLE
18094: EQUAL
18095: IFTRUE 18099
18097: GO 18127
18099: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
18100: LD_ADDR_LOC 28
18104: PUSH
18105: LD_LOC 28
18109: PPUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: LD_VAR 0 2
18119: PPUSH
18120: CALL_OW 1
18124: ST_TO_ADDR
18125: GO 18200
18127: LD_INT 2
18129: DOUBLE
18130: EQUAL
18131: IFTRUE 18135
18133: GO 18163
18135: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
18136: LD_ADDR_LOC 29
18140: PUSH
18141: LD_LOC 29
18145: PPUSH
18146: LD_VAR 0 1
18150: PPUSH
18151: LD_VAR 0 2
18155: PPUSH
18156: CALL_OW 1
18160: ST_TO_ADDR
18161: GO 18200
18163: LD_INT 3
18165: DOUBLE
18166: EQUAL
18167: IFTRUE 18171
18169: GO 18199
18171: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
18172: LD_ADDR_LOC 30
18176: PUSH
18177: LD_LOC 30
18181: PPUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: LD_VAR 0 2
18191: PPUSH
18192: CALL_OW 1
18196: ST_TO_ADDR
18197: GO 18200
18199: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
18200: LD_ADDR_VAR 0 5
18204: PUSH
18205: LD_LOC 28
18209: PUSH
18210: LD_VAR 0 1
18214: ARRAY
18215: PUSH
18216: LD_LOC 29
18220: PUSH
18221: LD_VAR 0 1
18225: ARRAY
18226: PLUS
18227: PUSH
18228: LD_LOC 30
18232: PUSH
18233: LD_VAR 0 1
18237: ARRAY
18238: PLUS
18239: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
18240: LD_VAR 0 1
18244: PPUSH
18245: LD_VAR 0 5
18249: PPUSH
18250: CALL_OW 506
// end ; end_of_file
18254: LD_VAR 0 4
18258: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
18259: LD_INT 0
18261: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
18262: LD_VAR 0 1
18266: PPUSH
18267: CALL_OW 255
18271: PUSH
18272: LD_VAR 0 4
18276: EQUAL
18277: IFFALSE 18296
// begin SetAchievement ( ACH_RAD ) ;
18279: LD_STRING ACH_RAD
18281: PPUSH
18282: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
18286: LD_STRING ACH_NL
18288: PPUSH
18289: LD_INT 1
18291: PPUSH
18292: CALL_OW 564
// end end ;
18296: LD_VAR 0 5
18300: RET
// export function SA_Win ( side ) ; begin
18301: LD_INT 0
18303: PPUSH
// case side of 1 :
18304: LD_VAR 0 1
18308: PUSH
18309: LD_INT 1
18311: DOUBLE
18312: EQUAL
18313: IFTRUE 18317
18315: GO 18330
18317: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18318: LD_STRING ACH_AH
18320: PPUSH
18321: LD_INT 1
18323: PPUSH
18324: CALL_OW 564
18328: GO 18493
18330: LD_INT 2
18332: DOUBLE
18333: EQUAL
18334: IFTRUE 18338
18336: GO 18351
18338: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18339: LD_STRING ACH_E
18341: PPUSH
18342: LD_INT 1
18344: PPUSH
18345: CALL_OW 564
18349: GO 18493
18351: LD_INT 3
18353: DOUBLE
18354: EQUAL
18355: IFTRUE 18359
18357: GO 18372
18359: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18360: LD_STRING ACH_OOL
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 564
18370: GO 18493
18372: LD_INT 1
18374: PUSH
18375: LD_INT 2
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: DOUBLE
18382: EQUAL
18383: IFTRUE 18387
18385: GO 18412
18387: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18388: LD_STRING ACH_AH
18390: PPUSH
18391: LD_REAL  5.00000000000000E-0001
18394: PPUSH
18395: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18399: LD_STRING ACH_E
18401: PPUSH
18402: LD_REAL  5.00000000000000E-0001
18405: PPUSH
18406: CALL_OW 564
// end ; [ 2 , 3 ] :
18410: GO 18493
18412: LD_INT 2
18414: PUSH
18415: LD_INT 3
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: DOUBLE
18422: EQUAL
18423: IFTRUE 18427
18425: GO 18452
18427: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18428: LD_STRING ACH_OOL
18430: PPUSH
18431: LD_REAL  5.00000000000000E-0001
18434: PPUSH
18435: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18439: LD_STRING ACH_E
18441: PPUSH
18442: LD_REAL  5.00000000000000E-0001
18445: PPUSH
18446: CALL_OW 564
// end ; [ 3 , 1 ] :
18450: GO 18493
18452: LD_INT 3
18454: PUSH
18455: LD_INT 1
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: DOUBLE
18462: EQUAL
18463: IFTRUE 18467
18465: GO 18492
18467: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18468: LD_STRING ACH_AH
18470: PPUSH
18471: LD_REAL  5.00000000000000E-0001
18474: PPUSH
18475: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18479: LD_STRING ACH_OOL
18481: PPUSH
18482: LD_REAL  5.00000000000000E-0001
18485: PPUSH
18486: CALL_OW 564
// end ; end ;
18490: GO 18493
18492: POP
// end ; end_of_file
18493: LD_VAR 0 2
18497: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
18498: LD_INT 0
18500: PPUSH
18501: PPUSH
// enable ( 98 ) ;
18502: LD_INT 98
18504: ENABLE_MARKED
// GameEnded = false ;
18505: LD_ADDR_LOC 33
18509: PUSH
18510: LD_INT 0
18512: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18513: LD_ADDR_LOC 32
18517: PUSH
18518: LD_INT 0
18520: PUSH
18521: LD_INT 0
18523: PUSH
18524: LD_INT 0
18526: PUSH
18527: LD_INT 0
18529: PUSH
18530: LD_INT 0
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: LD_INT 0
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: ST_TO_ADDR
// unfoged = false ;
18552: LD_ADDR_LOC 34
18556: PUSH
18557: LD_INT 0
18559: ST_TO_ADDR
// for i = 1 to side_positions do
18560: LD_ADDR_VAR 0 2
18564: PUSH
18565: DOUBLE
18566: LD_INT 1
18568: DEC
18569: ST_TO_ADDR
18570: LD_EXP 23
18574: PUSH
18575: FOR_TO
18576: IFFALSE 18616
// if not side_positions [ i ] then
18578: LD_EXP 23
18582: PUSH
18583: LD_VAR 0 2
18587: ARRAY
18588: NOT
18589: IFFALSE 18614
// defaited = replace ( defaited , i , true ) ;
18591: LD_ADDR_LOC 32
18595: PUSH
18596: LD_LOC 32
18600: PPUSH
18601: LD_VAR 0 2
18605: PPUSH
18606: LD_INT 1
18608: PPUSH
18609: CALL_OW 1
18613: ST_TO_ADDR
18614: GO 18575
18616: POP
18617: POP
// end ;
18618: LD_VAR 0 1
18622: RET
// function CanWinLoose ; begin
18623: LD_INT 0
18625: PPUSH
// Result := true ;
18626: LD_ADDR_VAR 0 1
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
18634: CALL_OW 518
18638: PUSH
18639: CALL_OW 519
18643: PUSH
18644: LD_INT 0
18646: GREATER
18647: AND
18648: IFFALSE 18658
// Result := false ;
18650: LD_ADDR_VAR 0 1
18654: PUSH
18655: LD_INT 0
18657: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18658: CALL_OW 531
18662: PUSH
18663: CALL_OW 519
18667: PUSH
18668: LD_INT 1
18670: GREATER
18671: AND
18672: IFFALSE 18682
// Result := false ;
18674: LD_ADDR_VAR 0 1
18678: PUSH
18679: LD_INT 0
18681: ST_TO_ADDR
// end ;
18682: LD_VAR 0 1
18686: RET
// export function HasPower ( i ) ; var k , h ; begin
18687: LD_INT 0
18689: PPUSH
18690: PPUSH
18691: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18692: LD_VAR 0 1
18696: PPUSH
18697: CALL_OW 108
18701: NOT
18702: PUSH
18703: LD_EXP 26
18707: PUSH
18708: LD_VAR 0 1
18712: ARRAY
18713: NOT
18714: AND
18715: PUSH
18716: LD_OWVAR 4
18720: AND
18721: IFFALSE 18733
// begin result = false ;
18723: LD_ADDR_VAR 0 2
18727: PUSH
18728: LD_INT 0
18730: ST_TO_ADDR
// end else
18731: GO 19028
// case def_win_rules of 0 :
18733: LD_EXP 19
18737: PUSH
18738: LD_INT 0
18740: DOUBLE
18741: EQUAL
18742: IFTRUE 18746
18744: GO 18909
18746: POP
// if def_people_respawning then
18747: LD_EXP 60
18751: IFFALSE 18842
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
18753: LD_ADDR_VAR 0 2
18757: PUSH
18758: LD_INT 22
18760: PUSH
18761: LD_VAR 0 1
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: LD_INT 21
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 33
18785: PUSH
18786: LD_INT 3
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 33
18795: PUSH
18796: LD_INT 5
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 30
18805: PUSH
18806: LD_INT 0
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 30
18815: PUSH
18816: LD_INT 1
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PPUSH
18835: CALL_OW 69
18839: ST_TO_ADDR
18840: GO 18907
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18842: LD_ADDR_VAR 0 2
18846: PUSH
18847: LD_INT 22
18849: PUSH
18850: LD_VAR 0 1
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 2
18861: PUSH
18862: LD_INT 21
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 33
18874: PUSH
18875: LD_INT 3
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 33
18884: PUSH
18885: LD_INT 5
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PPUSH
18902: CALL_OW 69
18906: ST_TO_ADDR
18907: GO 19028
18909: LD_INT 1
18911: DOUBLE
18912: EQUAL
18913: IFTRUE 18917
18915: GO 18956
18917: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
18918: LD_ADDR_VAR 0 2
18922: PUSH
18923: LD_INT 22
18925: PUSH
18926: LD_VAR 0 1
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 21
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PPUSH
18949: CALL_OW 69
18953: ST_TO_ADDR
18954: GO 19028
18956: LD_INT 2
18958: DOUBLE
18959: EQUAL
18960: IFTRUE 18964
18962: GO 19027
18964: POP
// begin h = false ;
18965: LD_ADDR_VAR 0 4
18969: PUSH
18970: LD_INT 0
18972: ST_TO_ADDR
// for k in heroes [ i ] do
18973: LD_ADDR_VAR 0 3
18977: PUSH
18978: LD_EXP 35
18982: PUSH
18983: LD_VAR 0 1
18987: ARRAY
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19013
// if IsLive ( k ) then
18992: LD_VAR 0 3
18996: PPUSH
18997: CALL_OW 300
19001: IFFALSE 19011
// h = true ;
19003: LD_ADDR_VAR 0 4
19007: PUSH
19008: LD_INT 1
19010: ST_TO_ADDR
19011: GO 18989
19013: POP
19014: POP
// Result := h ;
19015: LD_ADDR_VAR 0 2
19019: PUSH
19020: LD_VAR 0 4
19024: ST_TO_ADDR
// end ; end ;
19025: GO 19028
19027: POP
// end ;
19028: LD_VAR 0 2
19032: RET
// function AlliedSides ( i , j ) ; begin
19033: LD_INT 0
19035: PPUSH
// Result := false ;
19036: LD_ADDR_VAR 0 3
19040: PUSH
19041: LD_INT 0
19043: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
19044: LD_VAR 0 1
19048: PPUSH
19049: LD_VAR 0 2
19053: PPUSH
19054: CALL_OW 81
19058: PUSH
19059: LD_INT 1
19061: EQUAL
19062: PUSH
19063: LD_VAR 0 2
19067: PPUSH
19068: LD_VAR 0 1
19072: PPUSH
19073: CALL_OW 81
19077: PUSH
19078: LD_INT 1
19080: EQUAL
19081: AND
19082: PUSH
19083: LD_VAR 0 1
19087: PPUSH
19088: CALL_OW 83
19092: AND
19093: PUSH
19094: LD_VAR 0 2
19098: PPUSH
19099: CALL_OW 83
19103: AND
19104: IFFALSE 19114
// Result := true ;
19106: LD_ADDR_VAR 0 3
19110: PUSH
19111: LD_INT 1
19113: ST_TO_ADDR
// end ;
19114: LD_VAR 0 3
19118: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
19119: CALL 18623 0 0
19123: PUSH
19124: LD_LOC 33
19128: NOT
19129: AND
19130: IFFALSE 19146
19132: GO 19134
19134: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
19135: LD_ADDR_EXP 66
19139: PUSH
19140: LD_STRING #Player-Ended
19142: PUSH
19143: EMPTY
19144: LIST
19145: ST_TO_ADDR
19146: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
19147: CALL 18623 0 0
19151: PUSH
19152: LD_LOC 33
19156: AND
19157: IFFALSE 19166
19159: GO 19161
19161: DISABLE
// YouLostInMultiplayer ;
19162: CALL_OW 107
19166: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
19167: CALL 18623 0 0
19171: NOT
19172: PUSH
19173: CALL_OW 531
19177: NOT
19178: AND
19179: IFFALSE 19195
19181: GO 19183
19183: DISABLE
// WaitServerStrings = [ #server-wait ] ;
19184: LD_ADDR_EXP 66
19188: PUSH
19189: LD_STRING #server-wait
19191: PUSH
19192: EMPTY
19193: LIST
19194: ST_TO_ADDR
19195: END
// every 100 trigger IAmSpec do
19196: CALL_OW 531
19200: IFFALSE 19216
19202: GO 19204
19204: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
19205: LD_ADDR_EXP 66
19209: PUSH
19210: LD_STRING #Player-IAmSpec
19212: PUSH
19213: EMPTY
19214: LIST
19215: ST_TO_ADDR
19216: END
// every 100 trigger GameEnded and IAmSpec do
19217: LD_LOC 33
19221: PUSH
19222: CALL_OW 531
19226: AND
19227: IFFALSE 19236
19229: GO 19231
19231: DISABLE
// YouLostInMultiplayer ;
19232: CALL_OW 107
19236: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
19237: CALL 18623 0 0
19241: PUSH
19242: LD_LOC 33
19246: NOT
19247: AND
19248: IFFALSE 19264
19250: GO 19252
19252: DISABLE
// WaitServerStrings = [ $player-win ] ;
19253: LD_ADDR_EXP 66
19257: PUSH
19258: LD_STRING $player-win
19260: PUSH
19261: EMPTY
19262: LIST
19263: ST_TO_ADDR
19264: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
19265: CALL 18623 0 0
19269: PUSH
19270: LD_LOC 33
19274: AND
19275: IFFALSE 19299
19277: GO 19279
19279: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
19280: LD_EXP 24
19284: PUSH
19285: LD_OWVAR 2
19289: ARRAY
19290: PPUSH
19291: CALL 18301 0 1
// YouWinInMultiplayer ;
19295: CALL_OW 106
// end ;
19299: END
// every 100 trigger isEditor marked 401 do
19300: LD_OWVAR 84
19304: IFFALSE 19320
19306: GO 19308
19308: DISABLE
// Debug_Strings = [ You won ] ;
19309: LD_ADDR_OWVAR 48
19313: PUSH
19314: LD_STRING You won
19316: PUSH
19317: EMPTY
19318: LIST
19319: ST_TO_ADDR
19320: END
// every 100 trigger isEditor marked 400 do
19321: LD_OWVAR 84
19325: IFFALSE 19341
19327: GO 19329
19329: DISABLE
// Debug_Strings = [ You loss ] ;
19330: LD_ADDR_OWVAR 48
19334: PUSH
19335: LD_STRING You loss
19337: PUSH
19338: EMPTY
19339: LIST
19340: ST_TO_ADDR
19341: END
// every 100 marked 98 do var i , un ;
19342: GO 19344
19344: DISABLE
19345: LD_INT 0
19347: PPUSH
19348: PPUSH
// begin for i = 1 to side_positions do
19349: LD_ADDR_VAR 0 1
19353: PUSH
19354: DOUBLE
19355: LD_INT 1
19357: DEC
19358: ST_TO_ADDR
19359: LD_EXP 23
19363: PUSH
19364: FOR_TO
19365: IFFALSE 19488
// if side_positions [ i ] then
19367: LD_EXP 23
19371: PUSH
19372: LD_VAR 0 1
19376: ARRAY
19377: IFFALSE 19486
// if not HasPower ( i ) and not Defaited [ i ] then
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL 18687 0 1
19388: NOT
19389: PUSH
19390: LD_LOC 32
19394: PUSH
19395: LD_VAR 0 1
19399: ARRAY
19400: NOT
19401: AND
19402: IFFALSE 19486
// begin un = filterallunits ( [ f_side , i ] ) ;
19404: LD_ADDR_VAR 0 2
19408: PUSH
19409: LD_INT 22
19411: PUSH
19412: LD_VAR 0 1
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PPUSH
19421: CALL_OW 69
19425: ST_TO_ADDR
// if un then
19426: LD_VAR 0 2
19430: IFFALSE 19444
// SetSide ( un , 0 ) ;
19432: LD_VAR 0 2
19436: PPUSH
19437: LD_INT 0
19439: PPUSH
19440: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
19444: LD_ADDR_LOC 32
19448: PUSH
19449: LD_LOC 32
19453: PPUSH
19454: LD_VAR 0 1
19458: PPUSH
19459: LD_INT 1
19461: PPUSH
19462: CALL_OW 1
19466: ST_TO_ADDR
// if i = your_side then
19467: LD_VAR 0 1
19471: PUSH
19472: LD_OWVAR 2
19476: EQUAL
19477: IFFALSE 19486
// begin Multiplayer_Loose_Message ;
19479: CALL_OW 521
// enable ( 400 ) ;
19483: LD_INT 400
19485: ENABLE_MARKED
// end ; end ;
19486: GO 19364
19488: POP
19489: POP
// if not Unfoged and defaited [ your_side ] then
19490: LD_LOC 34
19494: NOT
19495: PUSH
19496: LD_LOC 32
19500: PUSH
19501: LD_OWVAR 2
19505: ARRAY
19506: AND
19507: IFFALSE 19513
// Unfog ;
19509: CALL 19699 0 0
// DidGameEnd ;
19513: CALL 19528 0 0
// if not GameEnded then
19517: LD_LOC 33
19521: NOT
19522: IFFALSE 19525
// enable ;
19524: ENABLE
// end ;
19525: PPOPN 2
19527: END
// function DidGameEnd ; var i , k , enemy ; begin
19528: LD_INT 0
19530: PPUSH
19531: PPUSH
19532: PPUSH
19533: PPUSH
// enemy = [ ] ;
19534: LD_ADDR_VAR 0 4
19538: PUSH
19539: EMPTY
19540: ST_TO_ADDR
// for i = 1 to side_positions do
19541: LD_ADDR_VAR 0 2
19545: PUSH
19546: DOUBLE
19547: LD_INT 1
19549: DEC
19550: ST_TO_ADDR
19551: LD_EXP 23
19555: PUSH
19556: FOR_TO
19557: IFFALSE 19661
// if not defaited [ i ] then
19559: LD_LOC 32
19563: PUSH
19564: LD_VAR 0 2
19568: ARRAY
19569: NOT
19570: IFFALSE 19659
// for k = 1 to side_positions do
19572: LD_ADDR_VAR 0 3
19576: PUSH
19577: DOUBLE
19578: LD_INT 1
19580: DEC
19581: ST_TO_ADDR
19582: LD_EXP 23
19586: PUSH
19587: FOR_TO
19588: IFFALSE 19657
// if not defaited [ k ] then
19590: LD_LOC 32
19594: PUSH
19595: LD_VAR 0 3
19599: ARRAY
19600: NOT
19601: IFFALSE 19655
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
19603: LD_VAR 0 2
19607: PPUSH
19608: LD_VAR 0 3
19612: PPUSH
19613: CALL_OW 81
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: LD_INT 0
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: IN
19628: IFFALSE 19655
// enemy = enemy ^ [ i , k ] ;
19630: LD_ADDR_VAR 0 4
19634: PUSH
19635: LD_VAR 0 4
19639: PUSH
19640: LD_VAR 0 2
19644: PUSH
19645: LD_VAR 0 3
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: ADD
19654: ST_TO_ADDR
19655: GO 19587
19657: POP
19658: POP
19659: GO 19556
19661: POP
19662: POP
// if not enemy then
19663: LD_VAR 0 4
19667: NOT
19668: IFFALSE 19694
// begin GameEnded = true ;
19670: LD_ADDR_LOC 33
19674: PUSH
19675: LD_INT 1
19677: ST_TO_ADDR
// if not defaited [ your_side ] then
19678: LD_LOC 32
19682: PUSH
19683: LD_OWVAR 2
19687: ARRAY
19688: NOT
19689: IFFALSE 19694
// enable ( 401 ) ;
19691: LD_INT 401
19693: ENABLE_MARKED
// end ; end ;
19694: LD_VAR 0 1
19698: RET
// function unfog ; var k , friends ; begin
19699: LD_INT 0
19701: PPUSH
19702: PPUSH
19703: PPUSH
// for k = 1 to side_positions do
19704: LD_ADDR_VAR 0 2
19708: PUSH
19709: DOUBLE
19710: LD_INT 1
19712: DEC
19713: ST_TO_ADDR
19714: LD_EXP 23
19718: PUSH
19719: FOR_TO
19720: IFFALSE 19776
// if not defaited [ k ] then
19722: LD_LOC 32
19726: PUSH
19727: LD_VAR 0 2
19731: ARRAY
19732: NOT
19733: IFFALSE 19774
// if GetAttitude ( your_side , k ) in [ att_friend ] then
19735: LD_OWVAR 2
19739: PPUSH
19740: LD_VAR 0 2
19744: PPUSH
19745: CALL_OW 81
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: EMPTY
19754: LIST
19755: IN
19756: IFFALSE 19774
// friends = friends ^ k ;
19758: LD_ADDR_VAR 0 3
19762: PUSH
19763: LD_VAR 0 3
19767: PUSH
19768: LD_VAR 0 2
19772: ADD
19773: ST_TO_ADDR
19774: GO 19719
19776: POP
19777: POP
// if not friends then
19778: LD_VAR 0 3
19782: NOT
19783: IFFALSE 19800
// begin fogoff ( true ) ;
19785: LD_INT 1
19787: PPUSH
19788: CALL_OW 344
// unfoged = true ;
19792: LD_ADDR_LOC 34
19796: PUSH
19797: LD_INT 1
19799: ST_TO_ADDR
// end ; end ;
19800: LD_VAR 0 1
19804: RET
// export function MakeGameEnd ; begin
19805: LD_INT 0
19807: PPUSH
// fogoff ( true ) ;
19808: LD_INT 1
19810: PPUSH
19811: CALL_OW 344
// unfoged = true ;
19815: LD_ADDR_LOC 34
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19823: LD_INT 175
19825: PPUSH
19826: CALL_OW 67
// GameEnded = true ;
19830: LD_ADDR_LOC 33
19834: PUSH
19835: LD_INT 1
19837: ST_TO_ADDR
// end ;
19838: LD_VAR 0 1
19842: RET
// export function GetGameEnded ; begin
19843: LD_INT 0
19845: PPUSH
// result = GameEnded ;
19846: LD_ADDR_VAR 0 1
19850: PUSH
19851: LD_LOC 33
19855: ST_TO_ADDR
// end ; end_of_file
19856: LD_VAR 0 1
19860: RET
// var win ; export function init_kings_counting ; var i ; begin
19861: LD_INT 0
19863: PPUSH
19864: PPUSH
// mp_with_score := true ;
19865: LD_ADDR_OWVAR 14
19869: PUSH
19870: LD_INT 1
19872: ST_TO_ADDR
// ResetMultiScore ;
19873: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19877: LD_INT 19
19879: PPUSH
19880: LD_INT 1
19882: PPUSH
19883: CALL_OW 424
// enable ( 2 ) ;
19887: LD_INT 2
19889: ENABLE_MARKED
// end ;
19890: LD_VAR 0 1
19894: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19895: LD_INT 0
19897: PPUSH
19898: PPUSH
19899: PPUSH
19900: PPUSH
19901: PPUSH
19902: PPUSH
19903: PPUSH
19904: PPUSH
19905: PPUSH
// vypis := [ ] ;
19906: LD_ADDR_VAR 0 3
19910: PUSH
19911: EMPTY
19912: ST_TO_ADDR
// red = 0 ;
19913: LD_ADDR_VAR 0 5
19917: PUSH
19918: LD_INT 0
19920: ST_TO_ADDR
// blue = 0 ;
19921: LD_ADDR_VAR 0 6
19925: PUSH
19926: LD_INT 0
19928: ST_TO_ADDR
// yel = 0 ;
19929: LD_ADDR_VAR 0 7
19933: PUSH
19934: LD_INT 0
19936: ST_TO_ADDR
// green = 0 ;
19937: LD_ADDR_VAR 0 8
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
// if def_public_score or isSGUI then
19945: LD_EXP 6
19949: PUSH
19950: LD_OWVAR 83
19954: OR
19955: IFFALSE 20570
// if not Team_Game then
19957: LD_EXP 25
19961: NOT
19962: IFFALSE 20094
// begin for side = 1 to Side_Positions do
19964: LD_ADDR_VAR 0 2
19968: PUSH
19969: DOUBLE
19970: LD_INT 1
19972: DEC
19973: ST_TO_ADDR
19974: LD_EXP 23
19978: PUSH
19979: FOR_TO
19980: IFFALSE 20090
// if Side_Positions [ side ] then
19982: LD_EXP 23
19986: PUSH
19987: LD_VAR 0 2
19991: ARRAY
19992: IFFALSE 20088
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
19994: LD_ADDR_VAR 0 3
19998: PUSH
19999: LD_VAR 0 3
20003: PUSH
20004: LD_STRING #KingoftheHill-Public
20006: PUSH
20007: LD_VAR 0 2
20011: PUSH
20012: LD_VAR 0 2
20016: PUSH
20017: LD_VAR 0 2
20021: PUSH
20022: LD_INT 10
20024: PLUS
20025: PPUSH
20026: CALL_OW 110
20030: PUSH
20031: LD_INT 3
20033: DIV
20034: PUSH
20035: LD_EXP 20
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: ADD
20047: ST_TO_ADDR
// ToLua ( updateScorePoints(2, & side & , & ( GetTag ( side + 10 ) div 3 ) & ); ) ;
20048: LD_STRING updateScorePoints(2,
20050: PUSH
20051: LD_VAR 0 2
20055: STR
20056: PUSH
20057: LD_STRING ,
20059: STR
20060: PUSH
20061: LD_VAR 0 2
20065: PUSH
20066: LD_INT 10
20068: PLUS
20069: PPUSH
20070: CALL_OW 110
20074: PUSH
20075: LD_INT 3
20077: DIV
20078: STR
20079: PUSH
20080: LD_STRING );
20082: STR
20083: PPUSH
20084: CALL_OW 559
// end ;
20088: GO 19979
20090: POP
20091: POP
// end else
20092: GO 20568
// begin if Teams [ 1 ] then
20094: LD_EXP 22
20098: PUSH
20099: LD_INT 1
20101: ARRAY
20102: IFFALSE 20154
// for i in Teams [ 1 ] do
20104: LD_ADDR_VAR 0 4
20108: PUSH
20109: LD_EXP 22
20113: PUSH
20114: LD_INT 1
20116: ARRAY
20117: PUSH
20118: FOR_IN
20119: IFFALSE 20152
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20121: LD_ADDR_VAR 0 5
20125: PUSH
20126: LD_VAR 0 5
20130: PUSH
20131: LD_VAR 0 4
20135: PUSH
20136: LD_INT 10
20138: PLUS
20139: PPUSH
20140: CALL_OW 110
20144: PUSH
20145: LD_INT 3
20147: DIV
20148: PLUS
20149: ST_TO_ADDR
20150: GO 20118
20152: POP
20153: POP
// if Teams [ 2 ] then
20154: LD_EXP 22
20158: PUSH
20159: LD_INT 2
20161: ARRAY
20162: IFFALSE 20214
// for i in Teams [ 2 ] do
20164: LD_ADDR_VAR 0 4
20168: PUSH
20169: LD_EXP 22
20173: PUSH
20174: LD_INT 2
20176: ARRAY
20177: PUSH
20178: FOR_IN
20179: IFFALSE 20212
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20181: LD_ADDR_VAR 0 6
20185: PUSH
20186: LD_VAR 0 6
20190: PUSH
20191: LD_VAR 0 4
20195: PUSH
20196: LD_INT 10
20198: PLUS
20199: PPUSH
20200: CALL_OW 110
20204: PUSH
20205: LD_INT 3
20207: DIV
20208: PLUS
20209: ST_TO_ADDR
20210: GO 20178
20212: POP
20213: POP
// if Teams [ 3 ] then
20214: LD_EXP 22
20218: PUSH
20219: LD_INT 3
20221: ARRAY
20222: IFFALSE 20274
// for i in Teams [ 3 ] do
20224: LD_ADDR_VAR 0 4
20228: PUSH
20229: LD_EXP 22
20233: PUSH
20234: LD_INT 3
20236: ARRAY
20237: PUSH
20238: FOR_IN
20239: IFFALSE 20272
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20241: LD_ADDR_VAR 0 7
20245: PUSH
20246: LD_VAR 0 7
20250: PUSH
20251: LD_VAR 0 4
20255: PUSH
20256: LD_INT 10
20258: PLUS
20259: PPUSH
20260: CALL_OW 110
20264: PUSH
20265: LD_INT 3
20267: DIV
20268: PLUS
20269: ST_TO_ADDR
20270: GO 20238
20272: POP
20273: POP
// if Teams [ 4 ] then
20274: LD_EXP 22
20278: PUSH
20279: LD_INT 4
20281: ARRAY
20282: IFFALSE 20334
// for i in Teams [ 4 ] do
20284: LD_ADDR_VAR 0 4
20288: PUSH
20289: LD_EXP 22
20293: PUSH
20294: LD_INT 4
20296: ARRAY
20297: PUSH
20298: FOR_IN
20299: IFFALSE 20332
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20301: LD_ADDR_VAR 0 8
20305: PUSH
20306: LD_VAR 0 8
20310: PUSH
20311: LD_VAR 0 4
20315: PUSH
20316: LD_INT 10
20318: PLUS
20319: PPUSH
20320: CALL_OW 110
20324: PUSH
20325: LD_INT 3
20327: DIV
20328: PLUS
20329: ST_TO_ADDR
20330: GO 20298
20332: POP
20333: POP
// if Teams [ 1 ] then
20334: LD_EXP 22
20338: PUSH
20339: LD_INT 1
20341: ARRAY
20342: IFFALSE 20371
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20344: LD_ADDR_VAR 0 3
20348: PUSH
20349: LD_STRING #KingoftheHill-Public-red
20351: PUSH
20352: LD_INT 3
20354: PUSH
20355: LD_VAR 0 5
20359: PUSH
20360: LD_EXP 20
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: ST_TO_ADDR
// if Teams [ 2 ] then
20371: LD_EXP 22
20375: PUSH
20376: LD_INT 2
20378: ARRAY
20379: IFFALSE 20414
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20381: LD_ADDR_VAR 0 3
20385: PUSH
20386: LD_VAR 0 3
20390: PUSH
20391: LD_STRING #KingoftheHill-Public-blue
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: LD_VAR 0 6
20401: PUSH
20402: LD_EXP 20
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: ADD
20413: ST_TO_ADDR
// if Teams [ 3 ] then
20414: LD_EXP 22
20418: PUSH
20419: LD_INT 3
20421: ARRAY
20422: IFFALSE 20457
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20424: LD_ADDR_VAR 0 3
20428: PUSH
20429: LD_VAR 0 3
20433: PUSH
20434: LD_STRING #KingoftheHill-Public-yell
20436: PUSH
20437: LD_INT 2
20439: PUSH
20440: LD_VAR 0 7
20444: PUSH
20445: LD_EXP 20
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: ADD
20456: ST_TO_ADDR
// if Teams [ 4 ] then
20457: LD_EXP 22
20461: PUSH
20462: LD_INT 4
20464: ARRAY
20465: IFFALSE 20500
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20467: LD_ADDR_VAR 0 3
20471: PUSH
20472: LD_VAR 0 3
20476: PUSH
20477: LD_STRING #KingoftheHill-Public-green
20479: PUSH
20480: LD_INT 7
20482: PUSH
20483: LD_VAR 0 8
20487: PUSH
20488: LD_EXP 20
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: ADD
20499: ST_TO_ADDR
// ToLua ( updateScorePoints(2,3, & red & ); ) ;
20500: LD_STRING updateScorePoints(2,3,
20502: PUSH
20503: LD_VAR 0 5
20507: STR
20508: PUSH
20509: LD_STRING );
20511: STR
20512: PPUSH
20513: CALL_OW 559
// ToLua ( updateScorePoints(2,1, & blue & ); ) ;
20517: LD_STRING updateScorePoints(2,1,
20519: PUSH
20520: LD_VAR 0 6
20524: STR
20525: PUSH
20526: LD_STRING );
20528: STR
20529: PPUSH
20530: CALL_OW 559
// ToLua ( updateScorePoints(2,2, & yel & ); ) ;
20534: LD_STRING updateScorePoints(2,2,
20536: PUSH
20537: LD_VAR 0 7
20541: STR
20542: PUSH
20543: LD_STRING );
20545: STR
20546: PPUSH
20547: CALL_OW 559
// ToLua ( updateScorePoints(2,7, & green & ); ) ;
20551: LD_STRING updateScorePoints(2,7,
20553: PUSH
20554: LD_VAR 0 8
20558: STR
20559: PUSH
20560: LD_STRING );
20562: STR
20563: PPUSH
20564: CALL_OW 559
// end else
20568: GO 21005
// if not Team_Game then
20570: LD_EXP 25
20574: NOT
20575: IFFALSE 20633
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
20577: LD_ADDR_VAR 0 3
20581: PUSH
20582: LD_VAR 0 3
20586: PUSH
20587: LD_STRING #KingoftheHill-Private
20589: PUSH
20590: LD_OWVAR 2
20594: PUSH
20595: LD_OWVAR 2
20599: PUSH
20600: LD_VAR 0 2
20604: PUSH
20605: LD_INT 10
20607: PLUS
20608: PPUSH
20609: CALL_OW 110
20613: PUSH
20614: LD_INT 3
20616: DIV
20617: PUSH
20618: LD_EXP 20
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: ADD
20630: ST_TO_ADDR
20631: GO 21005
// begin for i in Teams [ 1 ] do
20633: LD_ADDR_VAR 0 4
20637: PUSH
20638: LD_EXP 22
20642: PUSH
20643: LD_INT 1
20645: ARRAY
20646: PUSH
20647: FOR_IN
20648: IFFALSE 20681
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20650: LD_ADDR_VAR 0 5
20654: PUSH
20655: LD_VAR 0 5
20659: PUSH
20660: LD_VAR 0 4
20664: PUSH
20665: LD_INT 10
20667: PLUS
20668: PPUSH
20669: CALL_OW 110
20673: PUSH
20674: LD_INT 3
20676: DIV
20677: PLUS
20678: ST_TO_ADDR
20679: GO 20647
20681: POP
20682: POP
// for i in Teams [ 2 ] do
20683: LD_ADDR_VAR 0 4
20687: PUSH
20688: LD_EXP 22
20692: PUSH
20693: LD_INT 2
20695: ARRAY
20696: PUSH
20697: FOR_IN
20698: IFFALSE 20731
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20700: LD_ADDR_VAR 0 6
20704: PUSH
20705: LD_VAR 0 6
20709: PUSH
20710: LD_VAR 0 4
20714: PUSH
20715: LD_INT 10
20717: PLUS
20718: PPUSH
20719: CALL_OW 110
20723: PUSH
20724: LD_INT 3
20726: DIV
20727: PLUS
20728: ST_TO_ADDR
20729: GO 20697
20731: POP
20732: POP
// for i in Teams [ 3 ] do
20733: LD_ADDR_VAR 0 4
20737: PUSH
20738: LD_EXP 22
20742: PUSH
20743: LD_INT 3
20745: ARRAY
20746: PUSH
20747: FOR_IN
20748: IFFALSE 20781
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20750: LD_ADDR_VAR 0 7
20754: PUSH
20755: LD_VAR 0 7
20759: PUSH
20760: LD_VAR 0 4
20764: PUSH
20765: LD_INT 10
20767: PLUS
20768: PPUSH
20769: CALL_OW 110
20773: PUSH
20774: LD_INT 3
20776: DIV
20777: PLUS
20778: ST_TO_ADDR
20779: GO 20747
20781: POP
20782: POP
// for i in Teams [ 4 ] do
20783: LD_ADDR_VAR 0 4
20787: PUSH
20788: LD_EXP 22
20792: PUSH
20793: LD_INT 4
20795: ARRAY
20796: PUSH
20797: FOR_IN
20798: IFFALSE 20831
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20800: LD_ADDR_VAR 0 8
20804: PUSH
20805: LD_VAR 0 8
20809: PUSH
20810: LD_VAR 0 4
20814: PUSH
20815: LD_INT 10
20817: PLUS
20818: PPUSH
20819: CALL_OW 110
20823: PUSH
20824: LD_INT 3
20826: DIV
20827: PLUS
20828: ST_TO_ADDR
20829: GO 20797
20831: POP
20832: POP
// if your_side in Teams [ 1 ] then
20833: LD_OWVAR 2
20837: PUSH
20838: LD_EXP 22
20842: PUSH
20843: LD_INT 1
20845: ARRAY
20846: IN
20847: IFFALSE 20876
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20849: LD_ADDR_VAR 0 3
20853: PUSH
20854: LD_STRING #KingoftheHill-Public-red
20856: PUSH
20857: LD_INT 3
20859: PUSH
20860: LD_VAR 0 5
20864: PUSH
20865: LD_EXP 20
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
20876: LD_OWVAR 2
20880: PUSH
20881: LD_EXP 22
20885: PUSH
20886: LD_INT 2
20888: ARRAY
20889: IN
20890: IFFALSE 20919
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20892: LD_ADDR_VAR 0 3
20896: PUSH
20897: LD_STRING #KingoftheHill-Public-blue
20899: PUSH
20900: LD_INT 1
20902: PUSH
20903: LD_VAR 0 6
20907: PUSH
20908: LD_EXP 20
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
20919: LD_OWVAR 2
20923: PUSH
20924: LD_EXP 22
20928: PUSH
20929: LD_INT 3
20931: ARRAY
20932: IN
20933: IFFALSE 20962
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20935: LD_ADDR_VAR 0 3
20939: PUSH
20940: LD_STRING #KingoftheHill-Public-yell
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: LD_VAR 0 7
20950: PUSH
20951: LD_EXP 20
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
20962: LD_OWVAR 2
20966: PUSH
20967: LD_EXP 22
20971: PUSH
20972: LD_INT 4
20974: ARRAY
20975: IN
20976: IFFALSE 21005
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20978: LD_ADDR_VAR 0 3
20982: PUSH
20983: LD_STRING #KingoftheHill-Public-green
20985: PUSH
20986: LD_INT 7
20988: PUSH
20989: LD_VAR 0 8
20993: PUSH
20994: LD_EXP 20
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: ST_TO_ADDR
// end ; Display_kings := vypis ;
21005: LD_ADDR_EXP 67
21009: PUSH
21010: LD_VAR 0 3
21014: ST_TO_ADDR
// end ;
21015: LD_VAR 0 1
21019: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
21020: LD_INT 0
21022: PPUSH
21023: PPUSH
21024: PPUSH
21025: PPUSH
21026: PPUSH
21027: PPUSH
21028: PPUSH
21029: PPUSH
21030: PPUSH
// side := [ ] ;
21031: LD_ADDR_VAR 0 2
21035: PUSH
21036: EMPTY
21037: ST_TO_ADDR
// red = 0 ;
21038: LD_ADDR_VAR 0 5
21042: PUSH
21043: LD_INT 0
21045: ST_TO_ADDR
// blue = 0 ;
21046: LD_ADDR_VAR 0 6
21050: PUSH
21051: LD_INT 0
21053: ST_TO_ADDR
// yel = 0 ;
21054: LD_ADDR_VAR 0 7
21058: PUSH
21059: LD_INT 0
21061: ST_TO_ADDR
// green = 0 ;
21062: LD_ADDR_VAR 0 8
21066: PUSH
21067: LD_INT 0
21069: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
21070: LD_ADDR_VAR 0 3
21074: PUSH
21075: LD_INT 19
21077: PPUSH
21078: LD_INT 21
21080: PUSH
21081: LD_INT 3
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 53
21090: PUSH
21091: EMPTY
21092: LIST
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PPUSH
21098: CALL_OW 70
21102: ST_TO_ADDR
// for un in list do
21103: LD_ADDR_VAR 0 4
21107: PUSH
21108: LD_VAR 0 3
21112: PUSH
21113: FOR_IN
21114: IFFALSE 21139
// side := side union GetSide ( un ) ;
21116: LD_ADDR_VAR 0 2
21120: PUSH
21121: LD_VAR 0 2
21125: PUSH
21126: LD_VAR 0 4
21130: PPUSH
21131: CALL_OW 255
21135: UNION
21136: ST_TO_ADDR
21137: GO 21113
21139: POP
21140: POP
// if side <> 1 then
21141: LD_VAR 0 2
21145: PUSH
21146: LD_INT 1
21148: NONEQUAL
21149: IFFALSE 21153
// exit ;
21151: GO 21516
// side := side [ 1 ] ;
21153: LD_ADDR_VAR 0 2
21157: PUSH
21158: LD_VAR 0 2
21162: PUSH
21163: LD_INT 1
21165: ARRAY
21166: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
21167: LD_VAR 0 2
21171: PUSH
21172: LD_INT 10
21174: PLUS
21175: PPUSH
21176: LD_VAR 0 2
21180: PUSH
21181: LD_INT 10
21183: PLUS
21184: PPUSH
21185: CALL_OW 110
21189: PUSH
21190: LD_INT 1
21192: PLUS
21193: PPUSH
21194: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
21198: LD_VAR 0 2
21202: PPUSH
21203: LD_VAR 0 2
21207: PUSH
21208: LD_INT 10
21210: PLUS
21211: PPUSH
21212: CALL_OW 110
21216: PUSH
21217: LD_INT 3
21219: DIV
21220: PPUSH
21221: LD_INT 2
21223: PPUSH
21224: CALL 18082 0 3
// if not Team_Game then
21228: LD_EXP 25
21232: NOT
21233: IFFALSE 21516
// if GetTag ( side + 10 ) >= final_count * 3 then
21235: LD_VAR 0 2
21239: PUSH
21240: LD_INT 10
21242: PLUS
21243: PPUSH
21244: CALL_OW 110
21248: PUSH
21249: LD_EXP 20
21253: PUSH
21254: LD_INT 3
21256: MUL
21257: GREATEREQUAL
21258: IFFALSE 21265
// enable ( 3 ) else
21260: LD_INT 3
21262: ENABLE_MARKED
21263: GO 21516
// begin for i in Teams [ 1 ] do
21265: LD_ADDR_VAR 0 9
21269: PUSH
21270: LD_EXP 22
21274: PUSH
21275: LD_INT 1
21277: ARRAY
21278: PUSH
21279: FOR_IN
21280: IFFALSE 21313
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21282: LD_ADDR_VAR 0 5
21286: PUSH
21287: LD_VAR 0 5
21291: PUSH
21292: LD_VAR 0 9
21296: PUSH
21297: LD_INT 10
21299: PLUS
21300: PPUSH
21301: CALL_OW 110
21305: PUSH
21306: LD_INT 3
21308: DIV
21309: PLUS
21310: ST_TO_ADDR
21311: GO 21279
21313: POP
21314: POP
// for i in Teams [ 2 ] do
21315: LD_ADDR_VAR 0 9
21319: PUSH
21320: LD_EXP 22
21324: PUSH
21325: LD_INT 2
21327: ARRAY
21328: PUSH
21329: FOR_IN
21330: IFFALSE 21363
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21332: LD_ADDR_VAR 0 6
21336: PUSH
21337: LD_VAR 0 6
21341: PUSH
21342: LD_VAR 0 9
21346: PUSH
21347: LD_INT 10
21349: PLUS
21350: PPUSH
21351: CALL_OW 110
21355: PUSH
21356: LD_INT 3
21358: DIV
21359: PLUS
21360: ST_TO_ADDR
21361: GO 21329
21363: POP
21364: POP
// for i in Teams [ 3 ] do
21365: LD_ADDR_VAR 0 9
21369: PUSH
21370: LD_EXP 22
21374: PUSH
21375: LD_INT 3
21377: ARRAY
21378: PUSH
21379: FOR_IN
21380: IFFALSE 21413
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21382: LD_ADDR_VAR 0 7
21386: PUSH
21387: LD_VAR 0 7
21391: PUSH
21392: LD_VAR 0 9
21396: PUSH
21397: LD_INT 10
21399: PLUS
21400: PPUSH
21401: CALL_OW 110
21405: PUSH
21406: LD_INT 3
21408: DIV
21409: PLUS
21410: ST_TO_ADDR
21411: GO 21379
21413: POP
21414: POP
// for i in Teams [ 4 ] do
21415: LD_ADDR_VAR 0 9
21419: PUSH
21420: LD_EXP 22
21424: PUSH
21425: LD_INT 4
21427: ARRAY
21428: PUSH
21429: FOR_IN
21430: IFFALSE 21463
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21432: LD_ADDR_VAR 0 8
21436: PUSH
21437: LD_VAR 0 8
21441: PUSH
21442: LD_VAR 0 9
21446: PUSH
21447: LD_INT 10
21449: PLUS
21450: PPUSH
21451: CALL_OW 110
21455: PUSH
21456: LD_INT 3
21458: DIV
21459: PLUS
21460: ST_TO_ADDR
21461: GO 21429
21463: POP
21464: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
21465: LD_VAR 0 5
21469: PUSH
21470: LD_EXP 20
21474: GREATEREQUAL
21475: PUSH
21476: LD_VAR 0 6
21480: PUSH
21481: LD_EXP 20
21485: GREATEREQUAL
21486: OR
21487: PUSH
21488: LD_VAR 0 7
21492: PUSH
21493: LD_EXP 20
21497: GREATEREQUAL
21498: OR
21499: PUSH
21500: LD_VAR 0 8
21504: PUSH
21505: LD_EXP 20
21509: GREATEREQUAL
21510: OR
21511: IFFALSE 21516
// enable ( 3 ) ;
21513: LD_INT 3
21515: ENABLE_MARKED
// end ; end ;
21516: LD_VAR 0 1
21520: RET
// every 0 0$1 marked 2 do
21521: GO 21523
21523: DISABLE
// begin count_king ;
21524: CALL 21020 0 0
// show_public_points ;
21528: CALL 19895 0 0
// enable ;
21532: ENABLE
// end ;
21533: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
21534: GO 21536
21536: DISABLE
21537: LD_INT 0
21539: PPUSH
21540: PPUSH
21541: PPUSH
21542: PPUSH
21543: PPUSH
21544: PPUSH
// begin win := [ ] ;
21545: LD_ADDR_LOC 35
21549: PUSH
21550: EMPTY
21551: ST_TO_ADDR
// red = 0 ;
21552: LD_ADDR_VAR 0 2
21556: PUSH
21557: LD_INT 0
21559: ST_TO_ADDR
// blue = 0 ;
21560: LD_ADDR_VAR 0 3
21564: PUSH
21565: LD_INT 0
21567: ST_TO_ADDR
// yel = 0 ;
21568: LD_ADDR_VAR 0 4
21572: PUSH
21573: LD_INT 0
21575: ST_TO_ADDR
// green = 0 ;
21576: LD_ADDR_VAR 0 5
21580: PUSH
21581: LD_INT 0
21583: ST_TO_ADDR
// if not Team_Game then
21584: LD_EXP 25
21588: NOT
21589: IFFALSE 21666
// begin for side = 1 to 8 do
21591: LD_ADDR_VAR 0 1
21595: PUSH
21596: DOUBLE
21597: LD_INT 1
21599: DEC
21600: ST_TO_ADDR
21601: LD_INT 8
21603: PUSH
21604: FOR_TO
21605: IFFALSE 21650
// if GetTag ( side + 10 ) >= final_count * 3 then
21607: LD_VAR 0 1
21611: PUSH
21612: LD_INT 10
21614: PLUS
21615: PPUSH
21616: CALL_OW 110
21620: PUSH
21621: LD_EXP 20
21625: PUSH
21626: LD_INT 3
21628: MUL
21629: GREATEREQUAL
21630: IFFALSE 21648
// win := win ^ side ;
21632: LD_ADDR_LOC 35
21636: PUSH
21637: LD_LOC 35
21641: PUSH
21642: LD_VAR 0 1
21646: ADD
21647: ST_TO_ADDR
21648: GO 21604
21650: POP
21651: POP
// if win then
21652: LD_LOC 35
21656: IFFALSE 21663
// enable ( 4 ) else
21658: LD_INT 4
21660: ENABLE_MARKED
21661: GO 21664
// enable ;
21663: ENABLE
// end else
21664: GO 21982
// begin for i in Teams [ 1 ] do
21666: LD_ADDR_VAR 0 6
21670: PUSH
21671: LD_EXP 22
21675: PUSH
21676: LD_INT 1
21678: ARRAY
21679: PUSH
21680: FOR_IN
21681: IFFALSE 21714
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21683: LD_ADDR_VAR 0 2
21687: PUSH
21688: LD_VAR 0 2
21692: PUSH
21693: LD_VAR 0 6
21697: PUSH
21698: LD_INT 10
21700: PLUS
21701: PPUSH
21702: CALL_OW 110
21706: PUSH
21707: LD_INT 3
21709: DIV
21710: PLUS
21711: ST_TO_ADDR
21712: GO 21680
21714: POP
21715: POP
// for i in Teams [ 2 ] do
21716: LD_ADDR_VAR 0 6
21720: PUSH
21721: LD_EXP 22
21725: PUSH
21726: LD_INT 2
21728: ARRAY
21729: PUSH
21730: FOR_IN
21731: IFFALSE 21764
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21733: LD_ADDR_VAR 0 3
21737: PUSH
21738: LD_VAR 0 3
21742: PUSH
21743: LD_VAR 0 6
21747: PUSH
21748: LD_INT 10
21750: PLUS
21751: PPUSH
21752: CALL_OW 110
21756: PUSH
21757: LD_INT 3
21759: DIV
21760: PLUS
21761: ST_TO_ADDR
21762: GO 21730
21764: POP
21765: POP
// for i in Teams [ 3 ] do
21766: LD_ADDR_VAR 0 6
21770: PUSH
21771: LD_EXP 22
21775: PUSH
21776: LD_INT 3
21778: ARRAY
21779: PUSH
21780: FOR_IN
21781: IFFALSE 21814
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21783: LD_ADDR_VAR 0 4
21787: PUSH
21788: LD_VAR 0 4
21792: PUSH
21793: LD_VAR 0 6
21797: PUSH
21798: LD_INT 10
21800: PLUS
21801: PPUSH
21802: CALL_OW 110
21806: PUSH
21807: LD_INT 3
21809: DIV
21810: PLUS
21811: ST_TO_ADDR
21812: GO 21780
21814: POP
21815: POP
// for i in Teams [ 4 ] do
21816: LD_ADDR_VAR 0 6
21820: PUSH
21821: LD_EXP 22
21825: PUSH
21826: LD_INT 4
21828: ARRAY
21829: PUSH
21830: FOR_IN
21831: IFFALSE 21864
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21833: LD_ADDR_VAR 0 5
21837: PUSH
21838: LD_VAR 0 5
21842: PUSH
21843: LD_VAR 0 6
21847: PUSH
21848: LD_INT 10
21850: PLUS
21851: PPUSH
21852: CALL_OW 110
21856: PUSH
21857: LD_INT 3
21859: DIV
21860: PLUS
21861: ST_TO_ADDR
21862: GO 21830
21864: POP
21865: POP
// if red >= final_count then
21866: LD_VAR 0 2
21870: PUSH
21871: LD_EXP 20
21875: GREATEREQUAL
21876: IFFALSE 21892
// win = teams [ 1 ] ;
21878: LD_ADDR_LOC 35
21882: PUSH
21883: LD_EXP 22
21887: PUSH
21888: LD_INT 1
21890: ARRAY
21891: ST_TO_ADDR
// if blue >= final_count then
21892: LD_VAR 0 3
21896: PUSH
21897: LD_EXP 20
21901: GREATEREQUAL
21902: IFFALSE 21918
// win = teams [ 2 ] ;
21904: LD_ADDR_LOC 35
21908: PUSH
21909: LD_EXP 22
21913: PUSH
21914: LD_INT 2
21916: ARRAY
21917: ST_TO_ADDR
// if yel >= final_count then
21918: LD_VAR 0 4
21922: PUSH
21923: LD_EXP 20
21927: GREATEREQUAL
21928: IFFALSE 21944
// win = teams [ 3 ] ;
21930: LD_ADDR_LOC 35
21934: PUSH
21935: LD_EXP 22
21939: PUSH
21940: LD_INT 3
21942: ARRAY
21943: ST_TO_ADDR
// if green >= final_count then
21944: LD_VAR 0 5
21948: PUSH
21949: LD_EXP 20
21953: GREATEREQUAL
21954: IFFALSE 21970
// win = teams [ 4 ] ;
21956: LD_ADDR_LOC 35
21960: PUSH
21961: LD_EXP 22
21965: PUSH
21966: LD_INT 4
21968: ARRAY
21969: ST_TO_ADDR
// if win then
21970: LD_LOC 35
21974: IFFALSE 21981
// enable ( 4 ) else
21976: LD_INT 4
21978: ENABLE_MARKED
21979: GO 21982
// enable ;
21981: ENABLE
// end ; end ;
21982: PPOPN 6
21984: END
// every 0 0$1 marked 4 do
21985: GO 21987
21987: DISABLE
// begin if Player_Side in win then
21988: LD_EXP 27
21992: PUSH
21993: LD_LOC 35
21997: IN
21998: IFFALSE 22014
// begin wait ( 0 0$2 ) ;
22000: LD_INT 70
22002: PPUSH
22003: CALL_OW 67
// enable ( 401 ) ;
22007: LD_INT 401
22009: ENABLE_MARKED
// exit ;
22010: GO 22030
// end else
22012: GO 22030
// begin wait ( 0 0$2 ) ;
22014: LD_INT 70
22016: PPUSH
22017: CALL_OW 67
// Multiplayer_Loose_Message ;
22021: CALL_OW 521
// enable ( 400 ) ;
22025: LD_INT 400
22027: ENABLE_MARKED
// exit ;
22028: GO 22030
// end ; end ; end_of_file
22030: END
// export function SetMpTechs ( ) ; var side , i ; begin
22031: LD_INT 0
22033: PPUSH
22034: PPUSH
22035: PPUSH
// for side = 1 to 8 do
22036: LD_ADDR_VAR 0 2
22040: PUSH
22041: DOUBLE
22042: LD_INT 1
22044: DEC
22045: ST_TO_ADDR
22046: LD_INT 8
22048: PUSH
22049: FOR_TO
22050: IFFALSE 22171
// begin for i = 1 to 72 do
22052: LD_ADDR_VAR 0 3
22056: PUSH
22057: DOUBLE
22058: LD_INT 1
22060: DEC
22061: ST_TO_ADDR
22062: LD_INT 72
22064: PUSH
22065: FOR_TO
22066: IFFALSE 22097
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
22068: LD_VAR 0 3
22072: PPUSH
22073: LD_VAR 0 2
22077: PPUSH
22078: LD_INT 0
22080: PPUSH
22081: LD_VAR 0 3
22085: PPUSH
22086: CALL_OW 565
22090: PPUSH
22091: CALL_OW 322
22095: GO 22065
22097: POP
22098: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
22099: LD_INT 73
22101: PPUSH
22102: LD_VAR 0 2
22106: PPUSH
22107: LD_INT 0
22109: PPUSH
22110: LD_INT 25
22112: PPUSH
22113: CALL_OW 565
22117: PPUSH
22118: CALL_OW 322
// for i = 0 to 40 do
22122: LD_ADDR_VAR 0 3
22126: PUSH
22127: DOUBLE
22128: LD_INT 0
22130: DEC
22131: ST_TO_ADDR
22132: LD_INT 40
22134: PUSH
22135: FOR_TO
22136: IFFALSE 22167
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
22138: LD_VAR 0 3
22142: PPUSH
22143: LD_VAR 0 2
22147: PPUSH
22148: LD_INT 1
22150: PPUSH
22151: LD_VAR 0 3
22155: PPUSH
22156: CALL_OW 565
22160: PPUSH
22161: CALL_OW 324
22165: GO 22135
22167: POP
22168: POP
// end ;
22169: GO 22049
22171: POP
22172: POP
// end ;
22173: LD_VAR 0 1
22177: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
22178: LD_INT 0
22180: PPUSH
22181: PPUSH
22182: PPUSH
// for side = 1 to 8 do
22183: LD_ADDR_VAR 0 3
22187: PUSH
22188: DOUBLE
22189: LD_INT 1
22191: DEC
22192: ST_TO_ADDR
22193: LD_INT 8
22195: PUSH
22196: FOR_TO
22197: IFFALSE 26193
// begin for i = 1 to 73 do
22199: LD_ADDR_VAR 0 4
22203: PUSH
22204: DOUBLE
22205: LD_INT 1
22207: DEC
22208: ST_TO_ADDR
22209: LD_INT 73
22211: PUSH
22212: FOR_TO
22213: IFFALSE 22234
// SetTech ( i , side , state_disabled ) ;
22215: LD_VAR 0 4
22219: PPUSH
22220: LD_VAR 0 3
22224: PPUSH
22225: LD_INT 0
22227: PPUSH
22228: CALL_OW 322
22232: GO 22212
22234: POP
22235: POP
// for i = 0 to 40 do
22236: LD_ADDR_VAR 0 4
22240: PUSH
22241: DOUBLE
22242: LD_INT 0
22244: DEC
22245: ST_TO_ADDR
22246: LD_INT 40
22248: PUSH
22249: FOR_TO
22250: IFFALSE 22271
// SetRestrict ( i , side , false ) ;
22252: LD_VAR 0 4
22256: PPUSH
22257: LD_VAR 0 3
22261: PPUSH
22262: LD_INT 0
22264: PPUSH
22265: CALL_OW 324
22269: GO 22249
22271: POP
22272: POP
// case level of 1 :
22273: LD_VAR 0 1
22277: PUSH
22278: LD_INT 1
22280: DOUBLE
22281: EQUAL
22282: IFTRUE 22286
22284: GO 22439
22286: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22287: LD_INT 35
22289: PPUSH
22290: LD_VAR 0 3
22294: PPUSH
22295: LD_INT 1
22297: PPUSH
22298: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22302: LD_INT 45
22304: PPUSH
22305: LD_VAR 0 3
22309: PPUSH
22310: LD_INT 1
22312: PPUSH
22313: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22317: LD_INT 46
22319: PPUSH
22320: LD_VAR 0 3
22324: PPUSH
22325: LD_INT 1
22327: PPUSH
22328: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22332: LD_INT 47
22334: PPUSH
22335: LD_VAR 0 3
22339: PPUSH
22340: LD_INT 1
22342: PPUSH
22343: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22347: LD_INT 0
22349: PPUSH
22350: LD_VAR 0 3
22354: PPUSH
22355: LD_INT 1
22357: PPUSH
22358: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22362: LD_INT 2
22364: PPUSH
22365: LD_VAR 0 3
22369: PPUSH
22370: LD_INT 1
22372: PPUSH
22373: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22377: LD_INT 4
22379: PPUSH
22380: LD_VAR 0 3
22384: PPUSH
22385: LD_INT 1
22387: PPUSH
22388: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22392: LD_INT 6
22394: PPUSH
22395: LD_VAR 0 3
22399: PPUSH
22400: LD_INT 1
22402: PPUSH
22403: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22407: LD_INT 29
22409: PPUSH
22410: LD_VAR 0 3
22414: PPUSH
22415: LD_INT 1
22417: PPUSH
22418: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22422: LD_INT 31
22424: PPUSH
22425: LD_VAR 0 3
22429: PPUSH
22430: LD_INT 1
22432: PPUSH
22433: CALL_OW 324
// end ; 2 :
22437: GO 26191
22439: LD_INT 2
22441: DOUBLE
22442: EQUAL
22443: IFTRUE 22447
22445: GO 22645
22447: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22448: LD_INT 35
22450: PPUSH
22451: LD_VAR 0 3
22455: PPUSH
22456: LD_INT 1
22458: PPUSH
22459: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22463: LD_INT 45
22465: PPUSH
22466: LD_VAR 0 3
22470: PPUSH
22471: LD_INT 1
22473: PPUSH
22474: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22478: LD_INT 46
22480: PPUSH
22481: LD_VAR 0 3
22485: PPUSH
22486: LD_INT 1
22488: PPUSH
22489: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22493: LD_INT 47
22495: PPUSH
22496: LD_VAR 0 3
22500: PPUSH
22501: LD_INT 1
22503: PPUSH
22504: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22508: LD_INT 1
22510: PPUSH
22511: LD_VAR 0 3
22515: PPUSH
22516: LD_INT 1
22518: PPUSH
22519: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22523: LD_INT 2
22525: PPUSH
22526: LD_VAR 0 3
22530: PPUSH
22531: LD_INT 1
22533: PPUSH
22534: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22538: LD_INT 11
22540: PPUSH
22541: LD_VAR 0 3
22545: PPUSH
22546: LD_INT 1
22548: PPUSH
22549: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22553: LD_INT 0
22555: PPUSH
22556: LD_VAR 0 3
22560: PPUSH
22561: LD_INT 1
22563: PPUSH
22564: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22568: LD_INT 2
22570: PPUSH
22571: LD_VAR 0 3
22575: PPUSH
22576: LD_INT 1
22578: PPUSH
22579: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22583: LD_INT 4
22585: PPUSH
22586: LD_VAR 0 3
22590: PPUSH
22591: LD_INT 1
22593: PPUSH
22594: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22598: LD_INT 6
22600: PPUSH
22601: LD_VAR 0 3
22605: PPUSH
22606: LD_INT 1
22608: PPUSH
22609: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22613: LD_INT 29
22615: PPUSH
22616: LD_VAR 0 3
22620: PPUSH
22621: LD_INT 1
22623: PPUSH
22624: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22628: LD_INT 31
22630: PPUSH
22631: LD_VAR 0 3
22635: PPUSH
22636: LD_INT 1
22638: PPUSH
22639: CALL_OW 324
// end ; 3 :
22643: GO 26191
22645: LD_INT 3
22647: DOUBLE
22648: EQUAL
22649: IFTRUE 22653
22651: GO 23106
22653: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22654: LD_INT 35
22656: PPUSH
22657: LD_VAR 0 3
22661: PPUSH
22662: LD_INT 1
22664: PPUSH
22665: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22669: LD_INT 45
22671: PPUSH
22672: LD_VAR 0 3
22676: PPUSH
22677: LD_INT 1
22679: PPUSH
22680: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22684: LD_INT 46
22686: PPUSH
22687: LD_VAR 0 3
22691: PPUSH
22692: LD_INT 1
22694: PPUSH
22695: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22699: LD_INT 47
22701: PPUSH
22702: LD_VAR 0 3
22706: PPUSH
22707: LD_INT 1
22709: PPUSH
22710: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22714: LD_INT 1
22716: PPUSH
22717: LD_VAR 0 3
22721: PPUSH
22722: LD_INT 1
22724: PPUSH
22725: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22729: LD_INT 2
22731: PPUSH
22732: LD_VAR 0 3
22736: PPUSH
22737: LD_INT 1
22739: PPUSH
22740: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22744: LD_INT 11
22746: PPUSH
22747: LD_VAR 0 3
22751: PPUSH
22752: LD_INT 1
22754: PPUSH
22755: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22759: LD_INT 48
22761: PPUSH
22762: LD_VAR 0 3
22766: PPUSH
22767: LD_INT 1
22769: PPUSH
22770: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22774: LD_INT 69
22776: PPUSH
22777: LD_VAR 0 3
22781: PPUSH
22782: LD_INT 1
22784: PPUSH
22785: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22789: LD_INT 39
22791: PPUSH
22792: LD_VAR 0 3
22796: PPUSH
22797: LD_INT 1
22799: PPUSH
22800: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22804: LD_INT 43
22806: PPUSH
22807: LD_VAR 0 3
22811: PPUSH
22812: LD_INT 1
22814: PPUSH
22815: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22819: LD_INT 51
22821: PPUSH
22822: LD_VAR 0 3
22826: PPUSH
22827: LD_INT 1
22829: PPUSH
22830: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22834: LD_INT 6
22836: PPUSH
22837: LD_VAR 0 3
22841: PPUSH
22842: LD_INT 1
22844: PPUSH
22845: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22849: LD_INT 0
22851: PPUSH
22852: LD_VAR 0 3
22856: PPUSH
22857: LD_INT 1
22859: PPUSH
22860: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22864: LD_INT 2
22866: PPUSH
22867: LD_VAR 0 3
22871: PPUSH
22872: LD_INT 1
22874: PPUSH
22875: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22879: LD_INT 3
22881: PPUSH
22882: LD_VAR 0 3
22886: PPUSH
22887: LD_INT 1
22889: PPUSH
22890: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22894: LD_INT 4
22896: PPUSH
22897: LD_VAR 0 3
22901: PPUSH
22902: LD_INT 1
22904: PPUSH
22905: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22909: LD_INT 6
22911: PPUSH
22912: LD_VAR 0 3
22916: PPUSH
22917: LD_INT 1
22919: PPUSH
22920: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22924: LD_INT 7
22926: PPUSH
22927: LD_VAR 0 3
22931: PPUSH
22932: LD_INT 1
22934: PPUSH
22935: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22939: LD_INT 8
22941: PPUSH
22942: LD_VAR 0 3
22946: PPUSH
22947: LD_INT 1
22949: PPUSH
22950: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22954: LD_INT 10
22956: PPUSH
22957: LD_VAR 0 3
22961: PPUSH
22962: LD_INT 1
22964: PPUSH
22965: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22969: LD_INT 15
22971: PPUSH
22972: LD_VAR 0 3
22976: PPUSH
22977: LD_INT 1
22979: PPUSH
22980: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22984: LD_INT 16
22986: PPUSH
22987: LD_VAR 0 3
22991: PPUSH
22992: LD_INT 1
22994: PPUSH
22995: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22999: LD_INT 17
23001: PPUSH
23002: LD_VAR 0 3
23006: PPUSH
23007: LD_INT 1
23009: PPUSH
23010: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23014: LD_INT 20
23016: PPUSH
23017: LD_VAR 0 3
23021: PPUSH
23022: LD_INT 1
23024: PPUSH
23025: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23029: LD_INT 26
23031: PPUSH
23032: LD_VAR 0 3
23036: PPUSH
23037: LD_INT 1
23039: PPUSH
23040: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23044: LD_INT 27
23046: PPUSH
23047: LD_VAR 0 3
23051: PPUSH
23052: LD_INT 1
23054: PPUSH
23055: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23059: LD_INT 29
23061: PPUSH
23062: LD_VAR 0 3
23066: PPUSH
23067: LD_INT 1
23069: PPUSH
23070: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23074: LD_INT 31
23076: PPUSH
23077: LD_VAR 0 3
23081: PPUSH
23082: LD_INT 1
23084: PPUSH
23085: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23089: LD_INT 32
23091: PPUSH
23092: LD_VAR 0 3
23096: PPUSH
23097: LD_INT 1
23099: PPUSH
23100: CALL_OW 324
// end ; 4 :
23104: GO 26191
23106: LD_INT 4
23108: DOUBLE
23109: EQUAL
23110: IFTRUE 23114
23112: GO 24062
23114: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23115: LD_INT 35
23117: PPUSH
23118: LD_VAR 0 3
23122: PPUSH
23123: LD_INT 1
23125: PPUSH
23126: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23130: LD_INT 45
23132: PPUSH
23133: LD_VAR 0 3
23137: PPUSH
23138: LD_INT 1
23140: PPUSH
23141: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23145: LD_INT 46
23147: PPUSH
23148: LD_VAR 0 3
23152: PPUSH
23153: LD_INT 1
23155: PPUSH
23156: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23160: LD_INT 47
23162: PPUSH
23163: LD_VAR 0 3
23167: PPUSH
23168: LD_INT 1
23170: PPUSH
23171: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23175: LD_INT 1
23177: PPUSH
23178: LD_VAR 0 3
23182: PPUSH
23183: LD_INT 1
23185: PPUSH
23186: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23190: LD_INT 2
23192: PPUSH
23193: LD_VAR 0 3
23197: PPUSH
23198: LD_INT 1
23200: PPUSH
23201: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23205: LD_INT 11
23207: PPUSH
23208: LD_VAR 0 3
23212: PPUSH
23213: LD_INT 1
23215: PPUSH
23216: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23220: LD_INT 20
23222: PPUSH
23223: LD_VAR 0 3
23227: PPUSH
23228: LD_INT 1
23230: PPUSH
23231: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23235: LD_INT 48
23237: PPUSH
23238: LD_VAR 0 3
23242: PPUSH
23243: LD_INT 1
23245: PPUSH
23246: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23250: LD_INT 49
23252: PPUSH
23253: LD_VAR 0 3
23257: PPUSH
23258: LD_INT 1
23260: PPUSH
23261: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23265: LD_INT 69
23267: PPUSH
23268: LD_VAR 0 3
23272: PPUSH
23273: LD_INT 1
23275: PPUSH
23276: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23280: LD_INT 39
23282: PPUSH
23283: LD_VAR 0 3
23287: PPUSH
23288: LD_INT 1
23290: PPUSH
23291: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23295: LD_INT 34
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: LD_INT 1
23305: PPUSH
23306: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23310: LD_INT 42
23312: PPUSH
23313: LD_VAR 0 3
23317: PPUSH
23318: LD_INT 1
23320: PPUSH
23321: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23325: LD_INT 44
23327: PPUSH
23328: LD_VAR 0 3
23332: PPUSH
23333: LD_INT 1
23335: PPUSH
23336: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23340: LD_INT 41
23342: PPUSH
23343: LD_VAR 0 3
23347: PPUSH
23348: LD_INT 1
23350: PPUSH
23351: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23355: LD_INT 43
23357: PPUSH
23358: LD_VAR 0 3
23362: PPUSH
23363: LD_INT 1
23365: PPUSH
23366: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23370: LD_INT 70
23372: PPUSH
23373: LD_VAR 0 3
23377: PPUSH
23378: LD_INT 1
23380: PPUSH
23381: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23385: LD_INT 51
23387: PPUSH
23388: LD_VAR 0 3
23392: PPUSH
23393: LD_INT 1
23395: PPUSH
23396: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23400: LD_INT 52
23402: PPUSH
23403: LD_VAR 0 3
23407: PPUSH
23408: LD_INT 1
23410: PPUSH
23411: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23415: LD_INT 6
23417: PPUSH
23418: LD_VAR 0 3
23422: PPUSH
23423: LD_INT 1
23425: PPUSH
23426: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23430: LD_INT 15
23432: PPUSH
23433: LD_VAR 0 3
23437: PPUSH
23438: LD_INT 1
23440: PPUSH
23441: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23445: LD_INT 7
23447: PPUSH
23448: LD_VAR 0 3
23452: PPUSH
23453: LD_INT 1
23455: PPUSH
23456: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23460: LD_INT 12
23462: PPUSH
23463: LD_VAR 0 3
23467: PPUSH
23468: LD_INT 1
23470: PPUSH
23471: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23475: LD_INT 18
23477: PPUSH
23478: LD_VAR 0 3
23482: PPUSH
23483: LD_INT 1
23485: PPUSH
23486: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23490: LD_INT 60
23492: PPUSH
23493: LD_VAR 0 3
23497: PPUSH
23498: LD_INT 1
23500: PPUSH
23501: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23505: LD_INT 9
23507: PPUSH
23508: LD_VAR 0 3
23512: PPUSH
23513: LD_INT 1
23515: PPUSH
23516: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23520: LD_INT 30
23522: PPUSH
23523: LD_VAR 0 3
23527: PPUSH
23528: LD_INT 1
23530: PPUSH
23531: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23535: LD_INT 37
23537: PPUSH
23538: LD_VAR 0 3
23542: PPUSH
23543: LD_INT 1
23545: PPUSH
23546: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23550: LD_INT 5
23552: PPUSH
23553: LD_VAR 0 3
23557: PPUSH
23558: LD_INT 1
23560: PPUSH
23561: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23565: LD_INT 66
23567: PPUSH
23568: LD_VAR 0 3
23572: PPUSH
23573: LD_INT 1
23575: PPUSH
23576: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23580: LD_INT 21
23582: PPUSH
23583: LD_VAR 0 3
23587: PPUSH
23588: LD_INT 1
23590: PPUSH
23591: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23595: LD_INT 22
23597: PPUSH
23598: LD_VAR 0 3
23602: PPUSH
23603: LD_INT 1
23605: PPUSH
23606: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23610: LD_INT 54
23612: PPUSH
23613: LD_VAR 0 3
23617: PPUSH
23618: LD_INT 1
23620: PPUSH
23621: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23625: LD_INT 0
23627: PPUSH
23628: LD_VAR 0 3
23632: PPUSH
23633: LD_INT 1
23635: PPUSH
23636: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23640: LD_INT 1
23642: PPUSH
23643: LD_VAR 0 3
23647: PPUSH
23648: LD_INT 1
23650: PPUSH
23651: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23655: LD_INT 2
23657: PPUSH
23658: LD_VAR 0 3
23662: PPUSH
23663: LD_INT 1
23665: PPUSH
23666: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23670: LD_INT 3
23672: PPUSH
23673: LD_VAR 0 3
23677: PPUSH
23678: LD_INT 1
23680: PPUSH
23681: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23685: LD_INT 4
23687: PPUSH
23688: LD_VAR 0 3
23692: PPUSH
23693: LD_INT 1
23695: PPUSH
23696: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23700: LD_INT 5
23702: PPUSH
23703: LD_VAR 0 3
23707: PPUSH
23708: LD_INT 1
23710: PPUSH
23711: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23715: LD_INT 6
23717: PPUSH
23718: LD_VAR 0 3
23722: PPUSH
23723: LD_INT 1
23725: PPUSH
23726: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23730: LD_INT 7
23732: PPUSH
23733: LD_VAR 0 3
23737: PPUSH
23738: LD_INT 1
23740: PPUSH
23741: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23745: LD_INT 8
23747: PPUSH
23748: LD_VAR 0 3
23752: PPUSH
23753: LD_INT 1
23755: PPUSH
23756: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23760: LD_INT 10
23762: PPUSH
23763: LD_VAR 0 3
23767: PPUSH
23768: LD_INT 1
23770: PPUSH
23771: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23775: LD_INT 11
23777: PPUSH
23778: LD_VAR 0 3
23782: PPUSH
23783: LD_INT 1
23785: PPUSH
23786: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23790: LD_INT 12
23792: PPUSH
23793: LD_VAR 0 3
23797: PPUSH
23798: LD_INT 1
23800: PPUSH
23801: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23805: LD_INT 13
23807: PPUSH
23808: LD_VAR 0 3
23812: PPUSH
23813: LD_INT 1
23815: PPUSH
23816: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23820: LD_INT 14
23822: PPUSH
23823: LD_VAR 0 3
23827: PPUSH
23828: LD_INT 1
23830: PPUSH
23831: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23835: LD_INT 15
23837: PPUSH
23838: LD_VAR 0 3
23842: PPUSH
23843: LD_INT 1
23845: PPUSH
23846: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23850: LD_INT 16
23852: PPUSH
23853: LD_VAR 0 3
23857: PPUSH
23858: LD_INT 1
23860: PPUSH
23861: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23865: LD_INT 17
23867: PPUSH
23868: LD_VAR 0 3
23872: PPUSH
23873: LD_INT 1
23875: PPUSH
23876: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23880: LD_INT 19
23882: PPUSH
23883: LD_VAR 0 3
23887: PPUSH
23888: LD_INT 1
23890: PPUSH
23891: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23895: LD_INT 20
23897: PPUSH
23898: LD_VAR 0 3
23902: PPUSH
23903: LD_INT 1
23905: PPUSH
23906: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23910: LD_INT 21
23912: PPUSH
23913: LD_VAR 0 3
23917: PPUSH
23918: LD_INT 1
23920: PPUSH
23921: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23925: LD_INT 23
23927: PPUSH
23928: LD_VAR 0 3
23932: PPUSH
23933: LD_INT 1
23935: PPUSH
23936: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23940: LD_INT 26
23942: PPUSH
23943: LD_VAR 0 3
23947: PPUSH
23948: LD_INT 1
23950: PPUSH
23951: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23955: LD_INT 27
23957: PPUSH
23958: LD_VAR 0 3
23962: PPUSH
23963: LD_INT 1
23965: PPUSH
23966: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23970: LD_INT 28
23972: PPUSH
23973: LD_VAR 0 3
23977: PPUSH
23978: LD_INT 1
23980: PPUSH
23981: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23985: LD_INT 29
23987: PPUSH
23988: LD_VAR 0 3
23992: PPUSH
23993: LD_INT 1
23995: PPUSH
23996: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24000: LD_INT 30
24002: PPUSH
24003: LD_VAR 0 3
24007: PPUSH
24008: LD_INT 1
24010: PPUSH
24011: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24015: LD_INT 31
24017: PPUSH
24018: LD_VAR 0 3
24022: PPUSH
24023: LD_INT 1
24025: PPUSH
24026: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24030: LD_INT 32
24032: PPUSH
24033: LD_VAR 0 3
24037: PPUSH
24038: LD_INT 1
24040: PPUSH
24041: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
24045: LD_INT 36
24047: PPUSH
24048: LD_VAR 0 3
24052: PPUSH
24053: LD_INT 1
24055: PPUSH
24056: CALL_OW 324
// end ; 5 :
24060: GO 26191
24062: LD_INT 5
24064: DOUBLE
24065: EQUAL
24066: IFTRUE 24070
24068: GO 25183
24070: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
24071: LD_INT 35
24073: PPUSH
24074: LD_VAR 0 3
24078: PPUSH
24079: LD_INT 1
24081: PPUSH
24082: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
24086: LD_INT 45
24088: PPUSH
24089: LD_VAR 0 3
24093: PPUSH
24094: LD_INT 1
24096: PPUSH
24097: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
24101: LD_INT 46
24103: PPUSH
24104: LD_VAR 0 3
24108: PPUSH
24109: LD_INT 1
24111: PPUSH
24112: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
24116: LD_INT 47
24118: PPUSH
24119: LD_VAR 0 3
24123: PPUSH
24124: LD_INT 1
24126: PPUSH
24127: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
24131: LD_INT 1
24133: PPUSH
24134: LD_VAR 0 3
24138: PPUSH
24139: LD_INT 1
24141: PPUSH
24142: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
24146: LD_INT 2
24148: PPUSH
24149: LD_VAR 0 3
24153: PPUSH
24154: LD_INT 1
24156: PPUSH
24157: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
24161: LD_INT 11
24163: PPUSH
24164: LD_VAR 0 3
24168: PPUSH
24169: LD_INT 1
24171: PPUSH
24172: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24176: LD_INT 20
24178: PPUSH
24179: LD_VAR 0 3
24183: PPUSH
24184: LD_INT 1
24186: PPUSH
24187: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24191: LD_INT 48
24193: PPUSH
24194: LD_VAR 0 3
24198: PPUSH
24199: LD_INT 1
24201: PPUSH
24202: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24206: LD_INT 49
24208: PPUSH
24209: LD_VAR 0 3
24213: PPUSH
24214: LD_INT 1
24216: PPUSH
24217: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24221: LD_INT 69
24223: PPUSH
24224: LD_VAR 0 3
24228: PPUSH
24229: LD_INT 1
24231: PPUSH
24232: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24236: LD_INT 39
24238: PPUSH
24239: LD_VAR 0 3
24243: PPUSH
24244: LD_INT 1
24246: PPUSH
24247: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24251: LD_INT 34
24253: PPUSH
24254: LD_VAR 0 3
24258: PPUSH
24259: LD_INT 1
24261: PPUSH
24262: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24266: LD_INT 42
24268: PPUSH
24269: LD_VAR 0 3
24273: PPUSH
24274: LD_INT 1
24276: PPUSH
24277: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24281: LD_INT 44
24283: PPUSH
24284: LD_VAR 0 3
24288: PPUSH
24289: LD_INT 1
24291: PPUSH
24292: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24296: LD_INT 41
24298: PPUSH
24299: LD_VAR 0 3
24303: PPUSH
24304: LD_INT 1
24306: PPUSH
24307: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24311: LD_INT 40
24313: PPUSH
24314: LD_VAR 0 3
24318: PPUSH
24319: LD_INT 1
24321: PPUSH
24322: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24326: LD_INT 43
24328: PPUSH
24329: LD_VAR 0 3
24333: PPUSH
24334: LD_INT 1
24336: PPUSH
24337: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24341: LD_INT 70
24343: PPUSH
24344: LD_VAR 0 3
24348: PPUSH
24349: LD_INT 1
24351: PPUSH
24352: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24356: LD_INT 51
24358: PPUSH
24359: LD_VAR 0 3
24363: PPUSH
24364: LD_INT 1
24366: PPUSH
24367: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24371: LD_INT 52
24373: PPUSH
24374: LD_VAR 0 3
24378: PPUSH
24379: LD_INT 1
24381: PPUSH
24382: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24386: LD_INT 6
24388: PPUSH
24389: LD_VAR 0 3
24393: PPUSH
24394: LD_INT 1
24396: PPUSH
24397: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24401: LD_INT 15
24403: PPUSH
24404: LD_VAR 0 3
24408: PPUSH
24409: LD_INT 1
24411: PPUSH
24412: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24416: LD_INT 7
24418: PPUSH
24419: LD_VAR 0 3
24423: PPUSH
24424: LD_INT 1
24426: PPUSH
24427: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24431: LD_INT 12
24433: PPUSH
24434: LD_VAR 0 3
24438: PPUSH
24439: LD_INT 1
24441: PPUSH
24442: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24446: LD_INT 17
24448: PPUSH
24449: LD_VAR 0 3
24453: PPUSH
24454: LD_INT 1
24456: PPUSH
24457: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24461: LD_INT 18
24463: PPUSH
24464: LD_VAR 0 3
24468: PPUSH
24469: LD_INT 1
24471: PPUSH
24472: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24476: LD_INT 60
24478: PPUSH
24479: LD_VAR 0 3
24483: PPUSH
24484: LD_INT 1
24486: PPUSH
24487: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24491: LD_INT 32
24493: PPUSH
24494: LD_VAR 0 3
24498: PPUSH
24499: LD_INT 1
24501: PPUSH
24502: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24506: LD_INT 9
24508: PPUSH
24509: LD_VAR 0 3
24513: PPUSH
24514: LD_INT 1
24516: PPUSH
24517: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24521: LD_INT 57
24523: PPUSH
24524: LD_VAR 0 3
24528: PPUSH
24529: LD_INT 1
24531: PPUSH
24532: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24536: LD_INT 30
24538: PPUSH
24539: LD_VAR 0 3
24543: PPUSH
24544: LD_INT 1
24546: PPUSH
24547: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24551: LD_INT 37
24553: PPUSH
24554: LD_VAR 0 3
24558: PPUSH
24559: LD_INT 1
24561: PPUSH
24562: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24566: LD_INT 63
24568: PPUSH
24569: LD_VAR 0 3
24573: PPUSH
24574: LD_INT 1
24576: PPUSH
24577: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24581: LD_INT 3
24583: PPUSH
24584: LD_VAR 0 3
24588: PPUSH
24589: LD_INT 1
24591: PPUSH
24592: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24596: LD_INT 4
24598: PPUSH
24599: LD_VAR 0 3
24603: PPUSH
24604: LD_INT 1
24606: PPUSH
24607: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24611: LD_INT 5
24613: PPUSH
24614: LD_VAR 0 3
24618: PPUSH
24619: LD_INT 1
24621: PPUSH
24622: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24626: LD_INT 66
24628: PPUSH
24629: LD_VAR 0 3
24633: PPUSH
24634: LD_INT 1
24636: PPUSH
24637: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24641: LD_INT 21
24643: PPUSH
24644: LD_VAR 0 3
24648: PPUSH
24649: LD_INT 1
24651: PPUSH
24652: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24656: LD_INT 22
24658: PPUSH
24659: LD_VAR 0 3
24663: PPUSH
24664: LD_INT 1
24666: PPUSH
24667: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24671: LD_INT 19
24673: PPUSH
24674: LD_VAR 0 3
24678: PPUSH
24679: LD_INT 1
24681: PPUSH
24682: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24686: LD_INT 54
24688: PPUSH
24689: LD_VAR 0 3
24693: PPUSH
24694: LD_INT 1
24696: PPUSH
24697: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24701: LD_INT 55
24703: PPUSH
24704: LD_VAR 0 3
24708: PPUSH
24709: LD_INT 1
24711: PPUSH
24712: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
24716: LD_INT 0
24718: PPUSH
24719: LD_VAR 0 3
24723: PPUSH
24724: LD_INT 1
24726: PPUSH
24727: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
24731: LD_INT 1
24733: PPUSH
24734: LD_VAR 0 3
24738: PPUSH
24739: LD_INT 1
24741: PPUSH
24742: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24746: LD_INT 2
24748: PPUSH
24749: LD_VAR 0 3
24753: PPUSH
24754: LD_INT 1
24756: PPUSH
24757: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24761: LD_INT 3
24763: PPUSH
24764: LD_VAR 0 3
24768: PPUSH
24769: LD_INT 1
24771: PPUSH
24772: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24776: LD_INT 4
24778: PPUSH
24779: LD_VAR 0 3
24783: PPUSH
24784: LD_INT 1
24786: PPUSH
24787: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24791: LD_INT 5
24793: PPUSH
24794: LD_VAR 0 3
24798: PPUSH
24799: LD_INT 1
24801: PPUSH
24802: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24806: LD_INT 6
24808: PPUSH
24809: LD_VAR 0 3
24813: PPUSH
24814: LD_INT 1
24816: PPUSH
24817: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24821: LD_INT 7
24823: PPUSH
24824: LD_VAR 0 3
24828: PPUSH
24829: LD_INT 1
24831: PPUSH
24832: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24836: LD_INT 8
24838: PPUSH
24839: LD_VAR 0 3
24843: PPUSH
24844: LD_INT 1
24846: PPUSH
24847: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24851: LD_INT 10
24853: PPUSH
24854: LD_VAR 0 3
24858: PPUSH
24859: LD_INT 1
24861: PPUSH
24862: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24866: LD_INT 11
24868: PPUSH
24869: LD_VAR 0 3
24873: PPUSH
24874: LD_INT 1
24876: PPUSH
24877: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24881: LD_INT 12
24883: PPUSH
24884: LD_VAR 0 3
24888: PPUSH
24889: LD_INT 1
24891: PPUSH
24892: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24896: LD_INT 13
24898: PPUSH
24899: LD_VAR 0 3
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24911: LD_INT 14
24913: PPUSH
24914: LD_VAR 0 3
24918: PPUSH
24919: LD_INT 1
24921: PPUSH
24922: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24926: LD_INT 15
24928: PPUSH
24929: LD_VAR 0 3
24933: PPUSH
24934: LD_INT 1
24936: PPUSH
24937: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24941: LD_INT 16
24943: PPUSH
24944: LD_VAR 0 3
24948: PPUSH
24949: LD_INT 1
24951: PPUSH
24952: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24956: LD_INT 17
24958: PPUSH
24959: LD_VAR 0 3
24963: PPUSH
24964: LD_INT 1
24966: PPUSH
24967: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24971: LD_INT 18
24973: PPUSH
24974: LD_VAR 0 3
24978: PPUSH
24979: LD_INT 1
24981: PPUSH
24982: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
24986: LD_INT 19
24988: PPUSH
24989: LD_VAR 0 3
24993: PPUSH
24994: LD_INT 1
24996: PPUSH
24997: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
25001: LD_INT 20
25003: PPUSH
25004: LD_VAR 0 3
25008: PPUSH
25009: LD_INT 1
25011: PPUSH
25012: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
25016: LD_INT 21
25018: PPUSH
25019: LD_VAR 0 3
25023: PPUSH
25024: LD_INT 1
25026: PPUSH
25027: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
25031: LD_INT 23
25033: PPUSH
25034: LD_VAR 0 3
25038: PPUSH
25039: LD_INT 1
25041: PPUSH
25042: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
25046: LD_INT 26
25048: PPUSH
25049: LD_VAR 0 3
25053: PPUSH
25054: LD_INT 1
25056: PPUSH
25057: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
25061: LD_INT 27
25063: PPUSH
25064: LD_VAR 0 3
25068: PPUSH
25069: LD_INT 1
25071: PPUSH
25072: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
25076: LD_INT 28
25078: PPUSH
25079: LD_VAR 0 3
25083: PPUSH
25084: LD_INT 1
25086: PPUSH
25087: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
25091: LD_INT 29
25093: PPUSH
25094: LD_VAR 0 3
25098: PPUSH
25099: LD_INT 1
25101: PPUSH
25102: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
25106: LD_INT 30
25108: PPUSH
25109: LD_VAR 0 3
25113: PPUSH
25114: LD_INT 1
25116: PPUSH
25117: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
25121: LD_INT 31
25123: PPUSH
25124: LD_VAR 0 3
25128: PPUSH
25129: LD_INT 1
25131: PPUSH
25132: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
25136: LD_INT 32
25138: PPUSH
25139: LD_VAR 0 3
25143: PPUSH
25144: LD_INT 1
25146: PPUSH
25147: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
25151: LD_INT 33
25153: PPUSH
25154: LD_VAR 0 3
25158: PPUSH
25159: LD_INT 1
25161: PPUSH
25162: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
25166: LD_INT 36
25168: PPUSH
25169: LD_VAR 0 3
25173: PPUSH
25174: LD_INT 1
25176: PPUSH
25177: CALL_OW 324
// end ; 6 :
25181: GO 26191
25183: LD_INT 6
25185: DOUBLE
25186: EQUAL
25187: IFTRUE 25191
25189: GO 26116
25191: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
25192: LD_INT 35
25194: PPUSH
25195: LD_VAR 0 3
25199: PPUSH
25200: LD_INT 1
25202: PPUSH
25203: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
25207: LD_INT 45
25209: PPUSH
25210: LD_VAR 0 3
25214: PPUSH
25215: LD_INT 1
25217: PPUSH
25218: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
25222: LD_INT 46
25224: PPUSH
25225: LD_VAR 0 3
25229: PPUSH
25230: LD_INT 1
25232: PPUSH
25233: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
25237: LD_INT 47
25239: PPUSH
25240: LD_VAR 0 3
25244: PPUSH
25245: LD_INT 1
25247: PPUSH
25248: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
25252: LD_INT 1
25254: PPUSH
25255: LD_VAR 0 3
25259: PPUSH
25260: LD_INT 1
25262: PPUSH
25263: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
25267: LD_INT 2
25269: PPUSH
25270: LD_VAR 0 3
25274: PPUSH
25275: LD_INT 1
25277: PPUSH
25278: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
25282: LD_INT 11
25284: PPUSH
25285: LD_VAR 0 3
25289: PPUSH
25290: LD_INT 1
25292: PPUSH
25293: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
25297: LD_INT 20
25299: PPUSH
25300: LD_VAR 0 3
25304: PPUSH
25305: LD_INT 1
25307: PPUSH
25308: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
25312: LD_INT 48
25314: PPUSH
25315: LD_VAR 0 3
25319: PPUSH
25320: LD_INT 1
25322: PPUSH
25323: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
25327: LD_INT 49
25329: PPUSH
25330: LD_VAR 0 3
25334: PPUSH
25335: LD_INT 1
25337: PPUSH
25338: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
25342: LD_INT 50
25344: PPUSH
25345: LD_VAR 0 3
25349: PPUSH
25350: LD_INT 1
25352: PPUSH
25353: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
25357: LD_INT 69
25359: PPUSH
25360: LD_VAR 0 3
25364: PPUSH
25365: LD_INT 1
25367: PPUSH
25368: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
25372: LD_INT 39
25374: PPUSH
25375: LD_VAR 0 3
25379: PPUSH
25380: LD_INT 1
25382: PPUSH
25383: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
25387: LD_INT 34
25389: PPUSH
25390: LD_VAR 0 3
25394: PPUSH
25395: LD_INT 1
25397: PPUSH
25398: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
25402: LD_INT 42
25404: PPUSH
25405: LD_VAR 0 3
25409: PPUSH
25410: LD_INT 1
25412: PPUSH
25413: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
25417: LD_INT 44
25419: PPUSH
25420: LD_VAR 0 3
25424: PPUSH
25425: LD_INT 1
25427: PPUSH
25428: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
25432: LD_INT 41
25434: PPUSH
25435: LD_VAR 0 3
25439: PPUSH
25440: LD_INT 1
25442: PPUSH
25443: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
25447: LD_INT 13
25449: PPUSH
25450: LD_VAR 0 3
25454: PPUSH
25455: LD_INT 1
25457: PPUSH
25458: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
25462: LD_INT 40
25464: PPUSH
25465: LD_VAR 0 3
25469: PPUSH
25470: LD_INT 1
25472: PPUSH
25473: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
25477: LD_INT 43
25479: PPUSH
25480: LD_VAR 0 3
25484: PPUSH
25485: LD_INT 1
25487: PPUSH
25488: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
25492: LD_INT 70
25494: PPUSH
25495: LD_VAR 0 3
25499: PPUSH
25500: LD_INT 1
25502: PPUSH
25503: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
25507: LD_INT 23
25509: PPUSH
25510: LD_VAR 0 3
25514: PPUSH
25515: LD_INT 1
25517: PPUSH
25518: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
25522: LD_INT 51
25524: PPUSH
25525: LD_VAR 0 3
25529: PPUSH
25530: LD_INT 1
25532: PPUSH
25533: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
25537: LD_INT 52
25539: PPUSH
25540: LD_VAR 0 3
25544: PPUSH
25545: LD_INT 1
25547: PPUSH
25548: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
25552: LD_INT 6
25554: PPUSH
25555: LD_VAR 0 3
25559: PPUSH
25560: LD_INT 1
25562: PPUSH
25563: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
25567: LD_INT 15
25569: PPUSH
25570: LD_VAR 0 3
25574: PPUSH
25575: LD_INT 1
25577: PPUSH
25578: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
25582: LD_INT 7
25584: PPUSH
25585: LD_VAR 0 3
25589: PPUSH
25590: LD_INT 1
25592: PPUSH
25593: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
25597: LD_INT 12
25599: PPUSH
25600: LD_VAR 0 3
25604: PPUSH
25605: LD_INT 1
25607: PPUSH
25608: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
25612: LD_INT 10
25614: PPUSH
25615: LD_VAR 0 3
25619: PPUSH
25620: LD_INT 1
25622: PPUSH
25623: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
25627: LD_INT 17
25629: PPUSH
25630: LD_VAR 0 3
25634: PPUSH
25635: LD_INT 1
25637: PPUSH
25638: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
25642: LD_INT 18
25644: PPUSH
25645: LD_VAR 0 3
25649: PPUSH
25650: LD_INT 1
25652: PPUSH
25653: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
25657: LD_INT 60
25659: PPUSH
25660: LD_VAR 0 3
25664: PPUSH
25665: LD_INT 1
25667: PPUSH
25668: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
25672: LD_INT 61
25674: PPUSH
25675: LD_VAR 0 3
25679: PPUSH
25680: LD_INT 1
25682: PPUSH
25683: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
25687: LD_INT 32
25689: PPUSH
25690: LD_VAR 0 3
25694: PPUSH
25695: LD_INT 1
25697: PPUSH
25698: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
25702: LD_INT 27
25704: PPUSH
25705: LD_VAR 0 3
25709: PPUSH
25710: LD_INT 1
25712: PPUSH
25713: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
25717: LD_INT 36
25719: PPUSH
25720: LD_VAR 0 3
25724: PPUSH
25725: LD_INT 1
25727: PPUSH
25728: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
25732: LD_INT 33
25734: PPUSH
25735: LD_VAR 0 3
25739: PPUSH
25740: LD_INT 1
25742: PPUSH
25743: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25747: LD_INT 9
25749: PPUSH
25750: LD_VAR 0 3
25754: PPUSH
25755: LD_INT 1
25757: PPUSH
25758: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25762: LD_INT 38
25764: PPUSH
25765: LD_VAR 0 3
25769: PPUSH
25770: LD_INT 1
25772: PPUSH
25773: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25777: LD_INT 57
25779: PPUSH
25780: LD_VAR 0 3
25784: PPUSH
25785: LD_INT 1
25787: PPUSH
25788: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25792: LD_INT 58
25794: PPUSH
25795: LD_VAR 0 3
25799: PPUSH
25800: LD_INT 1
25802: PPUSH
25803: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25807: LD_INT 28
25809: PPUSH
25810: LD_VAR 0 3
25814: PPUSH
25815: LD_INT 1
25817: PPUSH
25818: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25822: LD_INT 29
25824: PPUSH
25825: LD_VAR 0 3
25829: PPUSH
25830: LD_INT 1
25832: PPUSH
25833: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25837: LD_INT 30
25839: PPUSH
25840: LD_VAR 0 3
25844: PPUSH
25845: LD_INT 1
25847: PPUSH
25848: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25852: LD_INT 37
25854: PPUSH
25855: LD_VAR 0 3
25859: PPUSH
25860: LD_INT 1
25862: PPUSH
25863: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25867: LD_INT 63
25869: PPUSH
25870: LD_VAR 0 3
25874: PPUSH
25875: LD_INT 1
25877: PPUSH
25878: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25882: LD_INT 64
25884: PPUSH
25885: LD_VAR 0 3
25889: PPUSH
25890: LD_INT 1
25892: PPUSH
25893: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25897: LD_INT 3
25899: PPUSH
25900: LD_VAR 0 3
25904: PPUSH
25905: LD_INT 1
25907: PPUSH
25908: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25912: LD_INT 4
25914: PPUSH
25915: LD_VAR 0 3
25919: PPUSH
25920: LD_INT 1
25922: PPUSH
25923: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25927: LD_INT 5
25929: PPUSH
25930: LD_VAR 0 3
25934: PPUSH
25935: LD_INT 1
25937: PPUSH
25938: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25942: LD_INT 8
25944: PPUSH
25945: LD_VAR 0 3
25949: PPUSH
25950: LD_INT 1
25952: PPUSH
25953: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25957: LD_INT 66
25959: PPUSH
25960: LD_VAR 0 3
25964: PPUSH
25965: LD_INT 1
25967: PPUSH
25968: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25972: LD_INT 67
25974: PPUSH
25975: LD_VAR 0 3
25979: PPUSH
25980: LD_INT 1
25982: PPUSH
25983: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
25987: LD_INT 21
25989: PPUSH
25990: LD_VAR 0 3
25994: PPUSH
25995: LD_INT 1
25997: PPUSH
25998: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
26002: LD_INT 22
26004: PPUSH
26005: LD_VAR 0 3
26009: PPUSH
26010: LD_INT 1
26012: PPUSH
26013: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
26017: LD_INT 19
26019: PPUSH
26020: LD_VAR 0 3
26024: PPUSH
26025: LD_INT 1
26027: PPUSH
26028: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
26032: LD_INT 26
26034: PPUSH
26035: LD_VAR 0 3
26039: PPUSH
26040: LD_INT 1
26042: PPUSH
26043: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
26047: LD_INT 54
26049: PPUSH
26050: LD_VAR 0 3
26054: PPUSH
26055: LD_INT 1
26057: PPUSH
26058: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
26062: LD_INT 55
26064: PPUSH
26065: LD_VAR 0 3
26069: PPUSH
26070: LD_INT 1
26072: PPUSH
26073: CALL_OW 322
// for i = 0 to 39 do
26077: LD_ADDR_VAR 0 4
26081: PUSH
26082: DOUBLE
26083: LD_INT 0
26085: DEC
26086: ST_TO_ADDR
26087: LD_INT 39
26089: PUSH
26090: FOR_TO
26091: IFFALSE 26112
// SetRestrict ( i , side , true ) ;
26093: LD_VAR 0 4
26097: PPUSH
26098: LD_VAR 0 3
26102: PPUSH
26103: LD_INT 1
26105: PPUSH
26106: CALL_OW 324
26110: GO 26090
26112: POP
26113: POP
// end ; else
26114: GO 26191
26116: POP
// begin for i = 1 to 73 do
26117: LD_ADDR_VAR 0 4
26121: PUSH
26122: DOUBLE
26123: LD_INT 1
26125: DEC
26126: ST_TO_ADDR
26127: LD_INT 73
26129: PUSH
26130: FOR_TO
26131: IFFALSE 26152
// SetTech ( i , side , state_enabled ) ;
26133: LD_VAR 0 4
26137: PPUSH
26138: LD_VAR 0 3
26142: PPUSH
26143: LD_INT 1
26145: PPUSH
26146: CALL_OW 322
26150: GO 26130
26152: POP
26153: POP
// for i = 0 to 39 do
26154: LD_ADDR_VAR 0 4
26158: PUSH
26159: DOUBLE
26160: LD_INT 0
26162: DEC
26163: ST_TO_ADDR
26164: LD_INT 39
26166: PUSH
26167: FOR_TO
26168: IFFALSE 26189
// SetRestrict ( i , side , true ) ;
26170: LD_VAR 0 4
26174: PPUSH
26175: LD_VAR 0 3
26179: PPUSH
26180: LD_INT 1
26182: PPUSH
26183: CALL_OW 324
26187: GO 26167
26189: POP
26190: POP
// end ; end ; end ;
26191: GO 22196
26193: POP
26194: POP
// end ;
26195: LD_VAR 0 2
26199: RET
