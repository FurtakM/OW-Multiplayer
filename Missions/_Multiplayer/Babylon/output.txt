// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , buildUpTime_Delay , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export Position_Sides ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 50
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 24
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 22
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 25
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 27
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 23
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 3 ;
 151: LD_ADDR_EXP 50
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 24
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 22
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 25
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 23
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 28
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 29
 344: PUSH
 345: LD_EXP 22
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// for i := 1 to 8 do
 356: LD_ADDR_VAR 0 2
 360: PUSH
 361: DOUBLE
 362: LD_INT 1
 364: DEC
 365: ST_TO_ADDR
 366: LD_INT 8
 368: PUSH
 369: FOR_TO
 370: IFFALSE 457
// if Multiplayer_GetPlayerIsSpec ( i ) then
 372: LD_VAR 0 2
 376: PPUSH
 377: CALL_OW 530
 381: IFFALSE 455
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 383: LD_ADDR_EXP 24
 387: PUSH
 388: LD_EXP 24
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: LD_INT 0
 400: PPUSH
 401: CALL_OW 1
 405: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 406: LD_ADDR_EXP 23
 410: PUSH
 411: LD_EXP 23
 415: PPUSH
 416: LD_EXP 22
 420: PUSH
 421: LD_VAR 0 2
 425: ARRAY
 426: PPUSH
 427: LD_EXP 23
 431: PUSH
 432: LD_EXP 22
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: ARRAY
 443: PUSH
 444: LD_VAR 0 2
 448: DIFF
 449: PPUSH
 450: CALL_OW 1
 454: ST_TO_ADDR
// end ;
 455: GO 369
 457: POP
 458: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 459: LD_ADDR_EXP 30
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// for i := 1 to 8 do
 482: LD_ADDR_VAR 0 2
 486: PUSH
 487: DOUBLE
 488: LD_INT 1
 490: DEC
 491: ST_TO_ADDR
 492: LD_INT 8
 494: PUSH
 495: FOR_TO
 496: IFFALSE 543
// if Side_Positions [ i ] then
 498: LD_EXP 24
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: IFFALSE 541
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 510: LD_ADDR_EXP 30
 514: PUSH
 515: LD_EXP 30
 519: PPUSH
 520: LD_EXP 24
 524: PUSH
 525: LD_VAR 0 2
 529: ARRAY
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: CALL_OW 1
 540: ST_TO_ADDR
 541: GO 495
 543: POP
 544: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 545: LD_ADDR_EXP 26
 549: PUSH
 550: LD_EXP 22
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: EMPTY
 559: LIST
 560: DIFF
 561: PUSH
 562: LD_INT 1
 564: GREATER
 565: ST_TO_ADDR
// if Multiplayer then
 566: LD_OWVAR 4
 570: IFFALSE 842
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 572: LD_ADDR_EXP 52
 576: PUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 426
 584: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 585: LD_ADDR_EXP 53
 589: PUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 426
 597: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 598: LD_ADDR_EXP 54
 602: PUSH
 603: LD_INT 2
 605: PPUSH
 606: CALL_OW 426
 610: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 611: LD_ADDR_EXP 55
 615: PUSH
 616: LD_INT 3
 618: PPUSH
 619: CALL_OW 426
 623: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 624: LD_ADDR_EXP 56
 628: PUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 426
 636: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 637: LD_ADDR_EXP 57
 641: PUSH
 642: LD_INT 5
 644: PPUSH
 645: CALL_OW 426
 649: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 650: LD_ADDR_EXP 59
 654: PUSH
 655: LD_INT 10
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 663: LD_ADDR_EXP 60
 667: PUSH
 668: LD_INT 11
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 676: LD_ADDR_EXP 61
 680: PUSH
 681: LD_INT 12
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 689: LD_ADDR_EXP 63
 693: PUSH
 694: LD_INT 13
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 702: LD_ADDR_EXP 62
 706: PUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 715: LD_ADDR_EXP 64
 719: PUSH
 720: LD_INT 15
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 728: LD_ADDR_EXP 1
 732: PUSH
 733: LD_INT 6
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 741: LD_ADDR_EXP 2
 745: PUSH
 746: LD_INT 7
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 754: LD_ADDR_EXP 4
 758: PUSH
 759: LD_INT 8
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 767: LD_ADDR_EXP 3
 771: PUSH
 772: LD_INT 9
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 780: LD_ADDR_EXP 5
 784: PUSH
 785: LD_INT 16
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 17
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 806: LD_ADDR_EXP 65
 810: PUSH
 811: LD_INT 20
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 819: LD_ADDR_VAR 0 3
 823: PUSH
 824: LD_INT 22
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_win_rules = 0 ;
 832: LD_ADDR_EXP 20
 836: PUSH
 837: LD_INT 0
 839: ST_TO_ADDR
// end else
 840: GO 1014
// begin Randomize ;
 842: CALL_OW 10
// def_base_level := 2 ;
 846: LD_ADDR_EXP 52
 850: PUSH
 851: LD_INT 2
 853: ST_TO_ADDR
// def_amount_of_people := 1 ;
 854: LD_ADDR_EXP 53
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// def_skill_level := 1 ;
 862: LD_ADDR_EXP 54
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// def_starting_resources := 2 ;
 870: LD_ADDR_EXP 55
 874: PUSH
 875: LD_INT 2
 877: ST_TO_ADDR
// def_shipments_density := 1 ;
 878: LD_ADDR_EXP 56
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 886: LD_ADDR_EXP 57
 890: PUSH
 891: LD_INT 0
 893: ST_TO_ADDR
// def_shared_vision := 1 ;
 894: LD_ADDR_EXP 59
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// def_morale_flags := 1 ;
 902: LD_ADDR_EXP 60
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// def_siberite_detection := 1 ;
 910: LD_ADDR_EXP 61
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 918: LD_ADDR_EXP 63
 922: PUSH
 923: LD_INT 3
 925: ST_TO_ADDR
// def_people_respawning := 2 ;
 926: LD_ADDR_EXP 62
 930: PUSH
 931: LD_INT 2
 933: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 934: LD_ADDR_EXP 64
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// def_artefact_one := 1 ;
 942: LD_ADDR_EXP 1
 946: PUSH
 947: LD_INT 1
 949: ST_TO_ADDR
// def_artefact_two := 1 ;
 950: LD_ADDR_EXP 2
 954: PUSH
 955: LD_INT 1
 957: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 958: LD_ADDR_EXP 4
 962: PUSH
 963: LD_INT 2
 965: ST_TO_ADDR
// def_artefact_three := 1 ;
 966: LD_ADDR_EXP 3
 970: PUSH
 971: LD_INT 1
 973: ST_TO_ADDR
// def_kings_age := 1 ;
 974: LD_ADDR_EXP 5
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// def_public_score := 0 ;
 982: LD_ADDR_EXP 6
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// def_builduptime := 1 ;
 990: LD_ADDR_EXP 65
 994: PUSH
 995: LD_INT 1
 997: ST_TO_ADDR
// tech_level = 4 ;
 998: LD_ADDR_VAR 0 3
1002: PUSH
1003: LD_INT 4
1005: ST_TO_ADDR
// def_win_rules = 0 ;
1006: LD_ADDR_EXP 20
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// end ; InitGameRules ;
1014: CALL 14449 0 0
// if def_game_rules = 0 then
1018: LD_EXP 51
1022: PUSH
1023: LD_INT 0
1025: EQUAL
1026: IFFALSE 1053
// begin if isSGUI then
1028: LD_OWVAR 83
1032: IFFALSE 1040
// setMpTechs ( ) else
1034: CALL 22131 0 0
1038: GO 1053
// begin SetMpTechLevel ( tech_level + 1 ) ;
1040: LD_VAR 0 3
1044: PUSH
1045: LD_INT 1
1047: PLUS
1048: PPUSH
1049: CALL 22278 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1053: LD_ADDR_EXP 7
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 52
1080: PUSH
1081: LD_INT 1
1083: PLUS
1084: ARRAY
1085: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
1086: LD_ADDR_EXP 8
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 2
1099: PUSH
1100: LD_INT 3
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_EXP 52
1113: PUSH
1114: LD_INT 1
1116: PLUS
1117: ARRAY
1118: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1119: LD_ADDR_EXP 9
1123: PUSH
1124: LD_EXP 53
1128: PUSH
1129: LD_INT 4
1131: PLUS
1132: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: LD_INT 4
1146: PUSH
1147: LD_INT 5
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: PUSH
1156: LD_EXP 54
1160: PUSH
1161: LD_INT 1
1163: PLUS
1164: ARRAY
1165: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1166: LD_ADDR_EXP 12
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: LD_INT 0
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 30
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: LD_INT 0
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 50
1201: PUSH
1202: LD_INT 20
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 80
1215: PUSH
1216: LD_INT 40
1218: PUSH
1219: LD_INT 20
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: LD_EXP 55
1237: PUSH
1238: LD_INT 1
1240: PLUS
1241: ARRAY
1242: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1243: LD_ADDR_EXP 11
1247: PUSH
1248: LD_INT 10
1250: PUSH
1251: EMPTY
1252: LIST
1253: PUSH
1254: LD_INT 7
1256: PUSH
1257: LD_INT 14
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 6
1266: PUSH
1267: LD_INT 12
1269: PUSH
1270: LD_INT 18
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 5
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: LD_INT 15
1286: PUSH
1287: LD_INT 20
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_EXP 55
1306: PUSH
1307: LD_INT 1
1309: PLUS
1310: ARRAY
1311: ST_TO_ADDR
// shipments_density := 380 - ( def_shipments_density * 2 ) ;
1312: LD_ADDR_EXP 13
1316: PUSH
1317: LD_INT 380
1319: PUSH
1320: LD_EXP 56
1324: PUSH
1325: LD_INT 2
1327: MUL
1328: MINUS
1329: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1330: LD_ADDR_EXP 15
1334: PUSH
1335: LD_INT 0
1337: PUSH
1338: LD_INT 1
1340: PUSH
1341: LD_INT 2
1343: PUSH
1344: LD_INT 3
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: PUSH
1353: LD_EXP 63
1357: PUSH
1358: LD_INT 1
1360: PLUS
1361: ARRAY
1362: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1363: LD_ADDR_EXP 16
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 12600
1373: PUSH
1374: LD_INT 2100
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_EXP 62
1386: PUSH
1387: LD_INT 1
1389: PLUS
1390: ARRAY
1391: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1392: LD_ADDR_EXP 17
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 21000
1402: PUSH
1403: LD_INT 4200
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 62
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_INT 1
1428: NEG
1429: PUSH
1430: LD_INT 350
1432: PUSH
1433: LD_INT 700
1435: PUSH
1436: LD_INT 1400
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_EXP 60
1453: PUSH
1454: LD_INT 1
1456: PLUS
1457: ARRAY
1458: ST_TO_ADDR
// battle_flags_id := [ ] ;
1459: LD_ADDR_EXP 35
1463: PUSH
1464: EMPTY
1465: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1466: LD_ADDR_EXP 19
1470: PUSH
1471: LD_INT 0
1473: PUSH
1474: LD_INT 1
1476: PUSH
1477: LD_INT 63000
1479: PUSH
1480: LD_INT 126000
1482: PUSH
1483: LD_INT 189000
1485: PUSH
1486: LD_INT 252000
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_EXP 64
1501: PUSH
1502: LD_INT 1
1504: PLUS
1505: ARRAY
1506: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1507: LD_ADDR_EXP 21
1511: PUSH
1512: LD_INT 500
1514: PUSH
1515: LD_INT 1000
1517: PUSH
1518: LD_INT 1500
1520: PUSH
1521: LD_INT 2000
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 5
1534: PUSH
1535: LD_INT 1
1537: PLUS
1538: ARRAY
1539: ST_TO_ADDR
// if def_people_respawning = 0 then
1540: LD_EXP 62
1544: PUSH
1545: LD_INT 0
1547: EQUAL
1548: IFFALSE 1568
// begin respawning_time_min = 0 ;
1550: LD_ADDR_EXP 16
1554: PUSH
1555: LD_INT 0
1557: ST_TO_ADDR
// respawning_time_max = 0 ;
1558: LD_ADDR_EXP 17
1562: PUSH
1563: LD_INT 0
1565: ST_TO_ADDR
// end else
1566: GO 1612
// begin respawning_time_min := ( 5 5$00 / 5 ) * ( 6 - def_people_respawning ) ;
1568: LD_ADDR_EXP 16
1572: PUSH
1573: LD_INT 10500
1575: PUSH
1576: LD_INT 5
1578: DIVREAL
1579: PUSH
1580: LD_INT 6
1582: PUSH
1583: LD_EXP 62
1587: MINUS
1588: MUL
1589: ST_TO_ADDR
// respawning_time_max := ( 15 15$00 / 5 ) * ( 6 - def_people_respawning ) ;
1590: LD_ADDR_EXP 17
1594: PUSH
1595: LD_INT 31500
1597: PUSH
1598: LD_INT 5
1600: DIVREAL
1601: PUSH
1602: LD_INT 6
1604: PUSH
1605: LD_EXP 62
1609: MINUS
1610: MUL
1611: ST_TO_ADDR
// end ; if not def_amount_of_apemen then
1612: LD_EXP 63
1616: NOT
1617: IFFALSE 1629
// amount_of_apemen := 0 else
1619: LD_ADDR_EXP 15
1623: PUSH
1624: LD_INT 0
1626: ST_TO_ADDR
1627: GO 1639
// amount_of_apemen := def_amount_of_apemen ;
1629: LD_ADDR_EXP 15
1633: PUSH
1634: LD_EXP 63
1638: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1639: LD_EXP 64
1643: PUSH
1644: LD_INT 0
1646: EQUAL
1647: IFFALSE 1659
// siberite_bomb_Delay = 0 else
1649: LD_ADDR_EXP 19
1653: PUSH
1654: LD_INT 0
1656: ST_TO_ADDR
1657: GO 1681
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1659: LD_ADDR_EXP 19
1663: PUSH
1664: LD_EXP 64
1668: PUSH
1669: LD_INT 1
1671: MINUS
1672: PUSH
1673: LD_INT 21000
1675: MUL
1676: PUSH
1677: LD_INT 1
1679: PLUS
1680: ST_TO_ADDR
// if def_builduptime = 0 then
1681: LD_EXP 65
1685: PUSH
1686: LD_INT 0
1688: EQUAL
1689: IFFALSE 1701
// buildUpTime_Delay = 0 else
1691: LD_ADDR_EXP 18
1695: PUSH
1696: LD_INT 0
1698: ST_TO_ADDR
1699: GO 1719
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
1701: LD_ADDR_EXP 18
1705: PUSH
1706: LD_INT 8400
1708: PUSH
1709: LD_INT 2100
1711: PUSH
1712: LD_EXP 65
1716: MUL
1717: PLUS
1718: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1719: LD_ADDR_EXP 48
1723: PUSH
1724: LD_INT 21
1726: PUSH
1727: LD_INT 23
1729: PUSH
1730: LD_INT 20
1732: PUSH
1733: LD_INT 22
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: ST_TO_ADDR
// end ;
1742: LD_VAR 0 1
1746: RET
// function init_map ; var i ; begin
1747: LD_INT 0
1749: PPUSH
1750: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1751: LD_ADDR_EXP 34
1755: PUSH
1756: LD_INT 43
1758: PUSH
1759: LD_INT 9
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 123
1768: PUSH
1769: LD_INT 10
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 113
1778: PUSH
1779: LD_INT 155
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: LD_INT 186
1788: PUSH
1789: LD_INT 133
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1802: LD_ADDR_EXP 31
1806: PUSH
1807: LD_INT 18
1809: PUSH
1810: LD_INT 17
1812: PUSH
1813: LD_INT 2
1815: PUSH
1816: EMPTY
1817: LIST
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 156
1823: PUSH
1824: LD_INT 20
1826: PUSH
1827: LD_INT 3
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 83
1837: PUSH
1838: LD_INT 140
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 216
1851: PUSH
1852: LD_INT 143
1854: PUSH
1855: LD_INT 5
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: ST_TO_ADDR
// for i in depot_def do
1869: LD_ADDR_VAR 0 2
1873: PUSH
1874: LD_EXP 31
1878: PUSH
1879: FOR_IN
1880: IFFALSE 1954
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1882: LD_ADDR_EXP 33
1886: PUSH
1887: LD_EXP 33
1891: PUSH
1892: LD_VAR 0 2
1896: PUSH
1897: LD_INT 1
1899: ARRAY
1900: PPUSH
1901: LD_VAR 0 2
1905: PUSH
1906: LD_INT 3
1908: ARRAY
1909: PPUSH
1910: LD_INT 6
1912: PPUSH
1913: CALL_OW 272
1917: PUSH
1918: LD_VAR 0 2
1922: PUSH
1923: LD_INT 2
1925: ARRAY
1926: PPUSH
1927: LD_VAR 0 2
1931: PUSH
1932: LD_INT 3
1934: ARRAY
1935: PPUSH
1936: LD_INT 6
1938: PPUSH
1939: CALL_OW 273
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PUSH
1948: EMPTY
1949: LIST
1950: ADD
1951: ST_TO_ADDR
1952: GO 1879
1954: POP
1955: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1956: LD_ADDR_EXP 32
1960: PUSH
1961: LD_INT 30
1963: PUSH
1964: LD_INT 36
1966: PUSH
1967: LD_INT 0
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 44
1977: PUSH
1978: LD_INT 21
1980: PUSH
1981: LD_INT 4
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 43
1991: PUSH
1992: LD_INT 33
1994: PUSH
1995: LD_INT 5
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 165
2010: PUSH
2011: LD_INT 34
2013: PUSH
2014: LD_INT 0
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 137
2024: PUSH
2025: LD_INT 18
2027: PUSH
2028: LD_INT 1
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 153
2038: PUSH
2039: LD_INT 37
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: PUSH
2055: LD_INT 86
2057: PUSH
2058: LD_INT 120
2060: PUSH
2061: LD_INT 3
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 105
2071: PUSH
2072: LD_INT 147
2074: PUSH
2075: LD_INT 4
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 68
2085: PUSH
2086: LD_INT 118
2088: PUSH
2089: LD_INT 2
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 199
2104: PUSH
2105: LD_INT 144
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 207
2118: PUSH
2119: LD_INT 119
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 195
2132: PUSH
2133: LD_INT 118
2135: PUSH
2136: LD_INT 2
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: LIST
2154: ST_TO_ADDR
// if not def_extra_oil_deposits then
2155: LD_EXP 57
2159: NOT
2160: IFFALSE 2201
// for i in extra_oil_deposits_locations do
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_EXP 34
2171: PUSH
2172: FOR_IN
2173: IFFALSE 2199
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
2175: LD_VAR 0 2
2179: PUSH
2180: LD_INT 1
2182: ARRAY
2183: PPUSH
2184: LD_VAR 0 2
2188: PUSH
2189: LD_INT 2
2191: ARRAY
2192: PPUSH
2193: CALL_OW 63
2197: GO 2172
2199: POP
2200: POP
// end ;
2201: LD_VAR 0 1
2205: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2206: LD_INT 0
2208: PPUSH
2209: PPUSH
2210: PPUSH
// if not Team_Game then
2211: LD_EXP 26
2215: NOT
2216: IFFALSE 2314
// begin for i = 1 to 8 do
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: DOUBLE
2224: LD_INT 1
2226: DEC
2227: ST_TO_ADDR
2228: LD_INT 8
2230: PUSH
2231: FOR_TO
2232: IFFALSE 2310
// for j = 1 to 8 do
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: DOUBLE
2240: LD_INT 1
2242: DEC
2243: ST_TO_ADDR
2244: LD_INT 8
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2306
// if i <> j then
2250: LD_VAR 0 2
2254: PUSH
2255: LD_VAR 0 3
2259: NONEQUAL
2260: IFFALSE 2284
// SetAttitude ( i , j , att_neutral , true ) else
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_VAR 0 3
2271: PPUSH
2272: LD_INT 0
2274: PPUSH
2275: LD_INT 1
2277: PPUSH
2278: CALL_OW 80
2282: GO 2304
// SetAttitude ( i , j , att_friend , true ) ;
2284: LD_VAR 0 2
2288: PPUSH
2289: LD_VAR 0 3
2293: PPUSH
2294: LD_INT 1
2296: PPUSH
2297: LD_INT 1
2299: PPUSH
2300: CALL_OW 80
2304: GO 2247
2306: POP
2307: POP
2308: GO 2231
2310: POP
2311: POP
// end else
2312: GO 2489
// begin if def_shared_vision then
2314: LD_EXP 59
2318: IFFALSE 2383
// begin for i in Teams do
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: LD_EXP 23
2329: PUSH
2330: FOR_IN
2331: IFFALSE 2381
// for j = 2 to i do
2333: LD_ADDR_VAR 0 3
2337: PUSH
2338: DOUBLE
2339: LD_INT 2
2341: DEC
2342: ST_TO_ADDR
2343: LD_VAR 0 2
2347: PUSH
2348: FOR_TO
2349: IFFALSE 2377
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2351: LD_VAR 0 2
2355: PUSH
2356: LD_VAR 0 3
2360: ARRAY
2361: PPUSH
2362: LD_VAR 0 2
2366: PUSH
2367: LD_INT 1
2369: ARRAY
2370: PPUSH
2371: CALL_OW 343
2375: GO 2348
2377: POP
2378: POP
2379: GO 2330
2381: POP
2382: POP
// end ; for i = 1 to 8 do
2383: LD_ADDR_VAR 0 2
2387: PUSH
2388: DOUBLE
2389: LD_INT 1
2391: DEC
2392: ST_TO_ADDR
2393: LD_INT 8
2395: PUSH
2396: FOR_TO
2397: IFFALSE 2487
// for j = 1 to 8 do
2399: LD_ADDR_VAR 0 3
2403: PUSH
2404: DOUBLE
2405: LD_INT 1
2407: DEC
2408: ST_TO_ADDR
2409: LD_INT 8
2411: PUSH
2412: FOR_TO
2413: IFFALSE 2483
// if Side_Teams [ i ] = Side_Teams [ j ] then
2415: LD_EXP 22
2419: PUSH
2420: LD_VAR 0 2
2424: ARRAY
2425: PUSH
2426: LD_EXP 22
2430: PUSH
2431: LD_VAR 0 3
2435: ARRAY
2436: EQUAL
2437: IFFALSE 2461
// SetAttitude ( i , j , att_friend , true ) else
2439: LD_VAR 0 2
2443: PPUSH
2444: LD_VAR 0 3
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: LD_INT 1
2454: PPUSH
2455: CALL_OW 80
2459: GO 2481
// SetAttitude ( i , j , att_enemy , true ) ;
2461: LD_VAR 0 2
2465: PPUSH
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 2
2473: PPUSH
2474: LD_INT 1
2476: PPUSH
2477: CALL_OW 80
2481: GO 2412
2483: POP
2484: POP
2485: GO 2396
2487: POP
2488: POP
// end ; end ;
2489: LD_VAR 0 1
2493: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
2499: PPUSH
// result := [ ] ;
2500: LD_ADDR_VAR 0 7
2504: PUSH
2505: EMPTY
2506: ST_TO_ADDR
// for i := 1 to count do
2507: LD_ADDR_VAR 0 8
2511: PUSH
2512: DOUBLE
2513: LD_INT 1
2515: DEC
2516: ST_TO_ADDR
2517: LD_VAR 0 1
2521: PUSH
2522: FOR_TO
2523: IFFALSE 2941
// begin uc_direction := Rand ( 0 , 5 ) ;
2525: LD_ADDR_OWVAR 24
2529: PUSH
2530: LD_INT 0
2532: PPUSH
2533: LD_INT 5
2535: PPUSH
2536: CALL_OW 12
2540: ST_TO_ADDR
// if commander then
2541: LD_LOC 1
2545: IFFALSE 2654
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2547: LD_ADDR_OWVAR 26
2551: PUSH
2552: LD_OWVAR 19
2556: PUSH
2557: LD_OWVAR 20
2561: ARRAY
2562: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2563: LD_INT 1
2565: PPUSH
2566: LD_INT 2
2568: PPUSH
2569: CALL_OW 12
2573: PPUSH
2574: LD_VAR 0 2
2578: PPUSH
2579: LD_EXP 10
2583: PUSH
2584: LD_INT 2
2586: PLUS
2587: PPUSH
2588: CALL_OW 380
// hc_importance := 105 ;
2592: LD_ADDR_OWVAR 32
2596: PUSH
2597: LD_INT 105
2599: ST_TO_ADDR
// commander := false ;
2600: LD_ADDR_LOC 1
2604: PUSH
2605: LD_INT 0
2607: ST_TO_ADDR
// if Multiplayer then
2608: LD_OWVAR 4
2612: IFFALSE 2652
// begin hc_gallery := MULTIAVATARS ;
2614: LD_ADDR_OWVAR 33
2618: PUSH
2619: LD_STRING MULTIAVATARS
2621: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2622: LD_ADDR_OWVAR 34
2626: PUSH
2627: LD_OWVAR 20
2631: PPUSH
2632: CALL_OW 525
2636: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2637: LD_ADDR_OWVAR 27
2641: PUSH
2642: LD_OWVAR 20
2646: PPUSH
2647: CALL_OW 526
2651: ST_TO_ADDR
// end ; end else
2652: GO 2717
// begin hc_name :=  ;
2654: LD_ADDR_OWVAR 26
2658: PUSH
2659: LD_STRING 
2661: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2662: LD_INT 1
2664: PPUSH
2665: LD_INT 2
2667: PPUSH
2668: CALL_OW 12
2672: PPUSH
2673: LD_VAR 0 2
2677: PPUSH
2678: LD_EXP 10
2682: PPUSH
2683: CALL_OW 380
// hc_importance := 0 ;
2687: LD_ADDR_OWVAR 32
2691: PUSH
2692: LD_INT 0
2694: ST_TO_ADDR
// if Multiplayer then
2695: LD_OWVAR 4
2699: IFFALSE 2717
// begin hc_gallery :=  ;
2701: LD_ADDR_OWVAR 33
2705: PUSH
2706: LD_STRING 
2708: ST_TO_ADDR
// hc_face_number := 0 ;
2709: LD_ADDR_OWVAR 34
2713: PUSH
2714: LD_INT 0
2716: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2717: LD_ADDR_VAR 0 10
2721: PUSH
2722: CALL_OW 44
2726: ST_TO_ADDR
// if global_defined then
2727: LD_LOC 3
2731: IFFALSE 2871
// begin if ( cl = class_soldier ) then
2733: LD_VAR 0 2
2737: PUSH
2738: LD_INT 1
2740: EQUAL
2741: IFFALSE 2761
// j := i + soldiers_created else
2743: LD_ADDR_VAR 0 9
2747: PUSH
2748: LD_VAR 0 8
2752: PUSH
2753: LD_LOC 4
2757: PLUS
2758: ST_TO_ADDR
2759: GO 2771
// j := i ;
2761: LD_ADDR_VAR 0 9
2765: PUSH
2766: LD_VAR 0 8
2770: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2771: LD_LOC 2
2775: PUSH
2776: LD_VAR 0 2
2780: ARRAY
2781: PUSH
2782: LD_VAR 0 9
2786: ARRAY
2787: PPUSH
2788: LD_VAR 0 10
2792: PPUSH
2793: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2797: LD_VAR 0 10
2801: PPUSH
2802: LD_INT 2
2804: PPUSH
2805: LD_LOC 2
2809: PUSH
2810: LD_VAR 0 2
2814: ARRAY
2815: PUSH
2816: LD_VAR 0 9
2820: ARRAY
2821: PPUSH
2822: LD_INT 2
2824: PPUSH
2825: CALL_OW 260
2829: PPUSH
2830: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2834: LD_VAR 0 10
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_LOC 2
2846: PUSH
2847: LD_VAR 0 2
2851: ARRAY
2852: PUSH
2853: LD_VAR 0 9
2857: ARRAY
2858: PPUSH
2859: LD_INT 1
2861: PPUSH
2862: CALL_OW 260
2866: PPUSH
2867: CALL_OW 239
// end ; if building then
2871: LD_VAR 0 6
2875: IFFALSE 2893
// PlaceHumanInUnit ( un , building ) else
2877: LD_VAR 0 10
2881: PPUSH
2882: LD_VAR 0 6
2886: PPUSH
2887: CALL_OW 52
2891: GO 2920
// PlaceUnitXYR ( un , x , y , r , false ) ;
2893: LD_VAR 0 10
2897: PPUSH
2898: LD_VAR 0 3
2902: PPUSH
2903: LD_VAR 0 4
2907: PPUSH
2908: LD_VAR 0 5
2912: PPUSH
2913: LD_INT 0
2915: PPUSH
2916: CALL_OW 50
// result := result ^ [ un ] ;
2920: LD_ADDR_VAR 0 7
2924: PUSH
2925: LD_VAR 0 7
2929: PUSH
2930: LD_VAR 0 10
2934: PUSH
2935: EMPTY
2936: LIST
2937: ADD
2938: ST_TO_ADDR
// end ;
2939: GO 2522
2941: POP
2942: POP
// if not global_defined then
2943: LD_LOC 3
2947: NOT
2948: IFFALSE 3026
// if ( global_units >= cl ) then
2950: LD_LOC 2
2954: PUSH
2955: LD_VAR 0 2
2959: GREATEREQUAL
2960: IFFALSE 3001
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2962: LD_ADDR_LOC 2
2966: PUSH
2967: LD_LOC 2
2971: PPUSH
2972: LD_VAR 0 2
2976: PPUSH
2977: LD_LOC 2
2981: PUSH
2982: LD_VAR 0 2
2986: ARRAY
2987: PUSH
2988: LD_VAR 0 7
2992: ADD
2993: PPUSH
2994: CALL_OW 1
2998: ST_TO_ADDR
2999: GO 3026
// global_units := Replace ( global_units , cl , result ) ;
3001: LD_ADDR_LOC 2
3005: PUSH
3006: LD_LOC 2
3010: PPUSH
3011: LD_VAR 0 2
3015: PPUSH
3016: LD_VAR 0 7
3020: PPUSH
3021: CALL_OW 1
3025: ST_TO_ADDR
// if commander then
3026: LD_LOC 1
3030: IFFALSE 3077
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3032: LD_ADDR_EXP 36
3036: PUSH
3037: LD_EXP 36
3041: PPUSH
3042: LD_OWVAR 20
3046: PPUSH
3047: LD_EXP 36
3051: PUSH
3052: LD_OWVAR 20
3056: ARRAY
3057: PUSH
3058: LD_VAR 0 10
3062: ADD
3063: PPUSH
3064: CALL_OW 1
3068: ST_TO_ADDR
// commander := false ;
3069: LD_ADDR_LOC 1
3073: PUSH
3074: LD_INT 0
3076: ST_TO_ADDR
// end ; end ;
3077: LD_VAR 0 7
3081: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3082: LD_INT 0
3084: PPUSH
3085: PPUSH
3086: PPUSH
3087: PPUSH
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
3092: PPUSH
// if side in [ 0 , 9 ] then
3093: LD_VAR 0 1
3097: PUSH
3098: LD_INT 0
3100: PUSH
3101: LD_INT 9
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: IN
3108: IFFALSE 3112
// exit ;
3110: GO 4187
// pos := Side_Positions [ side ] ;
3112: LD_ADDR_VAR 0 3
3116: PUSH
3117: LD_EXP 24
3121: PUSH
3122: LD_VAR 0 1
3126: ARRAY
3127: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3128: LD_ADDR_OWVAR 21
3132: PUSH
3133: LD_EXP 25
3137: PUSH
3138: LD_VAR 0 1
3142: ARRAY
3143: ST_TO_ADDR
// uc_side := side ;
3144: LD_ADDR_OWVAR 20
3148: PUSH
3149: LD_VAR 0 1
3153: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3154: LD_ADDR_VAR 0 4
3158: PUSH
3159: LD_EXP 31
3163: PUSH
3164: LD_VAR 0 3
3168: ARRAY
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3174: LD_ADDR_VAR 0 5
3178: PUSH
3179: LD_EXP 31
3183: PUSH
3184: LD_VAR 0 3
3188: ARRAY
3189: PUSH
3190: LD_INT 2
3192: ARRAY
3193: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3194: LD_ADDR_VAR 0 6
3198: PUSH
3199: LD_EXP 31
3203: PUSH
3204: LD_VAR 0 3
3208: ARRAY
3209: PUSH
3210: LD_INT 3
3212: ARRAY
3213: ST_TO_ADDR
// if is_depot then
3214: LD_EXP 7
3218: IFFALSE 3351
// begin bc_type = b_depot ;
3220: LD_ADDR_OWVAR 42
3224: PUSH
3225: LD_INT 0
3227: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3228: LD_ADDR_VAR 0 10
3232: PUSH
3233: LD_VAR 0 4
3237: PPUSH
3238: LD_VAR 0 5
3242: PPUSH
3243: LD_VAR 0 6
3247: PPUSH
3248: CALL_OW 47
3252: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3253: LD_VAR 0 10
3257: PPUSH
3258: LD_STRING @
3260: PUSH
3261: LD_VAR 0 1
3265: STR
3266: PPUSH
3267: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3271: LD_VAR 0 10
3275: PPUSH
3276: CALL_OW 274
3280: PPUSH
3281: LD_INT 1
3283: PPUSH
3284: LD_EXP 12
3288: PUSH
3289: LD_INT 1
3291: ARRAY
3292: PPUSH
3293: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3297: LD_VAR 0 10
3301: PPUSH
3302: CALL_OW 274
3306: PPUSH
3307: LD_INT 2
3309: PPUSH
3310: LD_EXP 12
3314: PUSH
3315: LD_INT 2
3317: ARRAY
3318: PPUSH
3319: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3323: LD_VAR 0 10
3327: PPUSH
3328: CALL_OW 274
3332: PPUSH
3333: LD_INT 3
3335: PPUSH
3336: LD_EXP 12
3340: PUSH
3341: LD_INT 3
3343: ARRAY
3344: PPUSH
3345: CALL_OW 277
// end else
3349: GO 3495
// begin for i := 1 to 3 do
3351: LD_ADDR_VAR 0 7
3355: PUSH
3356: DOUBLE
3357: LD_INT 1
3359: DEC
3360: ST_TO_ADDR
3361: LD_INT 3
3363: PUSH
3364: FOR_TO
3365: IFFALSE 3493
// begin r := starting_resources [ i ] ;
3367: LD_ADDR_VAR 0 8
3371: PUSH
3372: LD_EXP 12
3376: PUSH
3377: LD_VAR 0 7
3381: ARRAY
3382: ST_TO_ADDR
// while r >= 10 do
3383: LD_VAR 0 8
3387: PUSH
3388: LD_INT 10
3390: GREATEREQUAL
3391: IFFALSE 3491
// if r > 50 then
3393: LD_VAR 0 8
3397: PUSH
3398: LD_INT 50
3400: GREATER
3401: IFFALSE 3447
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3403: LD_VAR 0 7
3407: PPUSH
3408: LD_INT 5
3410: PPUSH
3411: LD_VAR 0 4
3415: PPUSH
3416: LD_VAR 0 5
3420: PPUSH
3421: LD_INT 4
3423: PPUSH
3424: LD_INT 0
3426: PPUSH
3427: CALL_OW 60
// r := r - 50 ;
3431: LD_ADDR_VAR 0 8
3435: PUSH
3436: LD_VAR 0 8
3440: PUSH
3441: LD_INT 50
3443: MINUS
3444: ST_TO_ADDR
// end else
3445: GO 3489
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3447: LD_VAR 0 7
3451: PPUSH
3452: LD_VAR 0 8
3456: PUSH
3457: LD_INT 10
3459: DIV
3460: PPUSH
3461: LD_VAR 0 4
3465: PPUSH
3466: LD_VAR 0 5
3470: PPUSH
3471: LD_INT 4
3473: PPUSH
3474: LD_INT 0
3476: PPUSH
3477: CALL_OW 60
// r := 0 ;
3481: LD_ADDR_VAR 0 8
3485: PUSH
3486: LD_INT 0
3488: ST_TO_ADDR
// end ;
3489: GO 3383
// end ;
3491: GO 3364
3493: POP
3494: POP
// end ; for r in starting_crates do
3495: LD_ADDR_VAR 0 8
3499: PUSH
3500: LD_EXP 11
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3538
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3508: LD_INT 1
3510: PPUSH
3511: LD_INT 5
3513: PPUSH
3514: LD_VAR 0 4
3518: PPUSH
3519: LD_VAR 0 5
3523: PPUSH
3524: LD_VAR 0 8
3528: PPUSH
3529: LD_INT 0
3531: PPUSH
3532: CALL_OW 60
3536: GO 3505
3538: POP
3539: POP
// if def_morale_flags then
3540: LD_EXP 60
3544: IFFALSE 3683
// begin x := start_def [ pos ] [ 1 ] ;
3546: LD_ADDR_VAR 0 4
3550: PUSH
3551: LD_EXP 33
3555: PUSH
3556: LD_VAR 0 3
3560: ARRAY
3561: PUSH
3562: LD_INT 1
3564: ARRAY
3565: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3566: LD_ADDR_VAR 0 5
3570: PUSH
3571: LD_EXP 33
3575: PUSH
3576: LD_VAR 0 3
3580: ARRAY
3581: PUSH
3582: LD_INT 2
3584: ARRAY
3585: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3586: LD_VAR 0 4
3590: PPUSH
3591: LD_VAR 0 5
3595: PPUSH
3596: LD_INT 12
3598: PPUSH
3599: LD_INT 2
3601: PPUSH
3602: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3606: LD_ADDR_EXP 35
3610: PUSH
3611: LD_EXP 35
3615: PUSH
3616: LD_VAR 0 1
3620: PPUSH
3621: LD_VAR 0 4
3625: PPUSH
3626: LD_VAR 0 5
3630: PPUSH
3631: LD_INT 1
3633: PUSH
3634: LD_INT 100
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: PUSH
3641: LD_INT 2
3643: PUSH
3644: LD_INT 50
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 3
3653: PUSH
3654: LD_INT 20
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 20
3663: PUSH
3664: LD_INT 100
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: PPUSH
3677: CALL_OW 418
3681: ADD
3682: ST_TO_ADDR
// end ; commander := true ;
3683: LD_ADDR_LOC 1
3687: PUSH
3688: LD_INT 1
3690: ST_TO_ADDR
// soldiers_created := 0 ;
3691: LD_ADDR_LOC 4
3695: PUSH
3696: LD_INT 0
3698: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3699: LD_ADDR_VAR 0 7
3703: PUSH
3704: DOUBLE
3705: LD_INT 1
3707: DEC
3708: ST_TO_ADDR
3709: LD_EXP 8
3713: PUSH
3714: FOR_TO
3715: IFFALSE 3868
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3717: LD_ADDR_VAR 0 4
3721: PUSH
3722: LD_EXP 32
3726: PUSH
3727: LD_VAR 0 3
3731: ARRAY
3732: PUSH
3733: LD_VAR 0 7
3737: ARRAY
3738: PUSH
3739: LD_INT 1
3741: ARRAY
3742: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3743: LD_ADDR_VAR 0 5
3747: PUSH
3748: LD_EXP 32
3752: PUSH
3753: LD_VAR 0 3
3757: ARRAY
3758: PUSH
3759: LD_VAR 0 7
3763: ARRAY
3764: PUSH
3765: LD_INT 2
3767: ARRAY
3768: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3769: LD_ADDR_VAR 0 6
3773: PUSH
3774: LD_EXP 32
3778: PUSH
3779: LD_VAR 0 3
3783: ARRAY
3784: PUSH
3785: LD_VAR 0 7
3789: ARRAY
3790: PUSH
3791: LD_INT 3
3793: ARRAY
3794: ST_TO_ADDR
// bc_type := b_breastwork ;
3795: LD_ADDR_OWVAR 42
3799: PUSH
3800: LD_INT 31
3802: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3803: LD_ADDR_VAR 0 9
3807: PUSH
3808: LD_VAR 0 4
3812: PPUSH
3813: LD_VAR 0 5
3817: PPUSH
3818: LD_VAR 0 6
3822: PPUSH
3823: CALL_OW 47
3827: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3828: LD_INT 1
3830: PPUSH
3831: LD_INT 1
3833: PPUSH
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: LD_INT 0
3842: PPUSH
3843: LD_VAR 0 9
3847: PPUSH
3848: CALL 2494 0 6
// soldiers_created := soldiers_created + 1 ;
3852: LD_ADDR_LOC 4
3856: PUSH
3857: LD_LOC 4
3861: PUSH
3862: LD_INT 1
3864: PLUS
3865: ST_TO_ADDR
// end ;
3866: GO 3714
3868: POP
3869: POP
// x := start_def [ pos ] [ 1 ] ;
3870: LD_ADDR_VAR 0 4
3874: PUSH
3875: LD_EXP 33
3879: PUSH
3880: LD_VAR 0 3
3884: ARRAY
3885: PUSH
3886: LD_INT 1
3888: ARRAY
3889: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3890: LD_ADDR_VAR 0 5
3894: PUSH
3895: LD_EXP 33
3899: PUSH
3900: LD_VAR 0 3
3904: ARRAY
3905: PUSH
3906: LD_INT 2
3908: ARRAY
3909: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3910: LD_LOC 8
3914: PUSH
3915: LD_EXP 8
3919: MINUS
3920: PPUSH
3921: LD_INT 1
3923: PPUSH
3924: LD_VAR 0 4
3928: PPUSH
3929: LD_VAR 0 5
3933: PPUSH
3934: LD_INT 5
3936: PPUSH
3937: LD_INT 0
3939: PPUSH
3940: CALL 2494 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3944: LD_LOC 5
3948: PPUSH
3949: LD_INT 2
3951: PPUSH
3952: LD_VAR 0 4
3956: PPUSH
3957: LD_VAR 0 5
3961: PPUSH
3962: LD_INT 5
3964: PPUSH
3965: LD_INT 0
3967: PPUSH
3968: CALL 2494 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3972: LD_LOC 7
3976: PPUSH
3977: LD_INT 3
3979: PPUSH
3980: LD_VAR 0 4
3984: PPUSH
3985: LD_VAR 0 5
3989: PPUSH
3990: LD_INT 5
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: CALL 2494 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4000: LD_LOC 6
4004: PPUSH
4005: LD_INT 4
4007: PPUSH
4008: LD_VAR 0 4
4012: PPUSH
4013: LD_VAR 0 5
4017: PPUSH
4018: LD_INT 5
4020: PPUSH
4021: LD_INT 0
4023: PPUSH
4024: CALL 2494 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4028: LD_EXP 61
4032: PUSH
4033: LD_INT 20
4035: PPUSH
4036: LD_VAR 0 1
4040: PPUSH
4041: CALL_OW 321
4045: PUSH
4046: LD_INT 1
4048: EQUAL
4049: AND
4050: IFFALSE 4067
// SetTech ( tech_SibDet , side , state_researched ) ;
4052: LD_INT 20
4054: PPUSH
4055: LD_VAR 0 1
4059: PPUSH
4060: LD_INT 2
4062: PPUSH
4063: CALL_OW 322
// if def_siberite_bomb = 1 then
4067: LD_EXP 64
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: IFFALSE 4109
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4077: LD_INT 25
4079: PPUSH
4080: LD_VAR 0 1
4084: PPUSH
4085: LD_INT 1
4087: PPUSH
4088: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4092: LD_INT 73
4094: PPUSH
4095: LD_VAR 0 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: CALL_OW 322
// end else
4107: GO 4139
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4109: LD_INT 25
4111: PPUSH
4112: LD_VAR 0 1
4116: PPUSH
4117: LD_INT 0
4119: PPUSH
4120: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4124: LD_INT 73
4126: PPUSH
4127: LD_VAR 0 1
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: CALL_OW 322
// end ; if Game_Type = 3 then
4139: LD_EXP 50
4143: PUSH
4144: LD_INT 3
4146: EQUAL
4147: IFFALSE 4164
// SetTech ( tech_partinvis , side , state_disabled ) ;
4149: LD_INT 16
4151: PPUSH
4152: LD_VAR 0 1
4156: PPUSH
4157: LD_INT 0
4159: PPUSH
4160: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
4164: LD_INT 24
4166: PPUSH
4167: LD_VAR 0 1
4171: PPUSH
4172: LD_INT 1
4174: PPUSH
4175: CALL_OW 322
// global_defined := true ;
4179: LD_ADDR_LOC 3
4183: PUSH
4184: LD_INT 1
4186: ST_TO_ADDR
// end ;
4187: LD_VAR 0 2
4191: RET
// every 0 0$1 do
4192: GO 4194
4194: DISABLE
// if ( def_siberite_bomb > 1 ) then
4195: LD_EXP 64
4199: PUSH
4200: LD_INT 1
4202: GREATER
4203: IFFALSE 4218
// begin wait ( siberite_bomb_Delay ) ;
4205: LD_EXP 19
4209: PPUSH
4210: CALL_OW 67
// EnableSibFiss ;
4214: CALL 4219 0 0
// end ;
4218: END
// function EnableSibFiss ; var i ; begin
4219: LD_INT 0
4221: PPUSH
4222: PPUSH
// for i := 1 to 8 do
4223: LD_ADDR_VAR 0 2
4227: PUSH
4228: DOUBLE
4229: LD_INT 1
4231: DEC
4232: ST_TO_ADDR
4233: LD_INT 8
4235: PUSH
4236: FOR_TO
4237: IFFALSE 4283
// if Side_Positions [ i ] then
4239: LD_EXP 24
4243: PUSH
4244: LD_VAR 0 2
4248: ARRAY
4249: IFFALSE 4281
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4251: LD_INT 25
4253: PPUSH
4254: LD_VAR 0 2
4258: PPUSH
4259: LD_INT 1
4261: PPUSH
4262: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4266: LD_INT 73
4268: PPUSH
4269: LD_VAR 0 2
4273: PPUSH
4274: LD_INT 1
4276: PPUSH
4277: CALL_OW 322
// end ;
4281: GO 4236
4283: POP
4284: POP
// end ;
4285: LD_VAR 0 1
4289: RET
// function prepare_sides ; var i ; begin
4290: LD_INT 0
4292: PPUSH
4293: PPUSH
// global_units := [ ] ;
4294: LD_ADDR_LOC 2
4298: PUSH
4299: EMPTY
4300: ST_TO_ADDR
// global_defined := false ;
4301: LD_ADDR_LOC 3
4305: PUSH
4306: LD_INT 0
4308: ST_TO_ADDR
// CountClassMembers ;
4309: CALL 4359 0 0
// for i := 1 to 8 do
4313: LD_ADDR_VAR 0 2
4317: PUSH
4318: DOUBLE
4319: LD_INT 1
4321: DEC
4322: ST_TO_ADDR
4323: LD_INT 8
4325: PUSH
4326: FOR_TO
4327: IFFALSE 4352
// if Side_Positions [ i ] then
4329: LD_EXP 24
4333: PUSH
4334: LD_VAR 0 2
4338: ARRAY
4339: IFFALSE 4350
// prepare_side ( i ) ;
4341: LD_VAR 0 2
4345: PPUSH
4346: CALL 3082 0 1
4350: GO 4326
4352: POP
4353: POP
// end ;
4354: LD_VAR 0 1
4358: RET
// function CountClassMembers ; var Mode ; begin
4359: LD_INT 0
4361: PPUSH
4362: PPUSH
// if No_Mechs then
4363: LD_EXP 66
4367: IFFALSE 4379
// Mode := 2 else
4369: LD_ADDR_VAR 0 2
4373: PUSH
4374: LD_INT 2
4376: ST_TO_ADDR
4377: GO 4387
// Mode := 1 ;
4379: LD_ADDR_VAR 0 2
4383: PUSH
4384: LD_INT 1
4386: ST_TO_ADDR
// neng := number_of_people ;
4387: LD_ADDR_LOC 5
4391: PUSH
4392: LD_EXP 9
4396: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4397: LD_ADDR_LOC 8
4401: PUSH
4402: LD_LOC 5
4406: PUSH
4407: LD_INT 4
4409: PUSH
4410: LD_INT 3
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_VAR 0 2
4421: ARRAY
4422: DIV
4423: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4424: LD_LOC 8
4428: PUSH
4429: LD_EXP 8
4433: LESS
4434: IFFALSE 4446
// nsol := number_of_breastworks ;
4436: LD_ADDR_LOC 8
4440: PUSH
4441: LD_EXP 8
4445: ST_TO_ADDR
// neng := neng - nsol ;
4446: LD_ADDR_LOC 5
4450: PUSH
4451: LD_LOC 5
4455: PUSH
4456: LD_LOC 8
4460: MINUS
4461: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4462: LD_ADDR_LOC 6
4466: PUSH
4467: LD_LOC 5
4471: PUSH
4472: LD_INT 3
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_VAR 0 2
4486: ARRAY
4487: DIV
4488: ST_TO_ADDR
// if ( nsci < 1 ) then
4489: LD_LOC 6
4493: PUSH
4494: LD_INT 1
4496: LESS
4497: IFFALSE 4507
// nsci := 1 ;
4499: LD_ADDR_LOC 6
4503: PUSH
4504: LD_INT 1
4506: ST_TO_ADDR
// neng := neng - nsci ;
4507: LD_ADDR_LOC 5
4511: PUSH
4512: LD_LOC 5
4516: PUSH
4517: LD_LOC 6
4521: MINUS
4522: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4523: LD_ADDR_LOC 7
4527: PUSH
4528: LD_LOC 5
4532: PUSH
4533: LD_INT 2
4535: DIV
4536: PUSH
4537: LD_INT 0
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: LD_VAR 0 2
4548: ARRAY
4549: ST_TO_ADDR
// neng := neng - nmech ;
4550: LD_ADDR_LOC 5
4554: PUSH
4555: LD_LOC 5
4559: PUSH
4560: LD_LOC 7
4564: MINUS
4565: ST_TO_ADDR
// if ( neng < 1 ) then
4566: LD_LOC 5
4570: PUSH
4571: LD_INT 1
4573: LESS
4574: IFFALSE 4584
// neng := 1 ;
4576: LD_ADDR_LOC 5
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// end ;
4584: LD_VAR 0 1
4588: RET
// starting begin disable ( 1 ) ;
4589: LD_INT 1
4591: DISABLE_MARKED
// disable ( 2 ) ;
4592: LD_INT 2
4594: DISABLE_MARKED
// disable ( 3 ) ;
4595: LD_INT 3
4597: DISABLE_MARKED
// disable ( 4 ) ;
4598: LD_INT 4
4600: DISABLE_MARKED
// disable ( 5 ) ;
4601: LD_INT 5
4603: DISABLE_MARKED
// disable ( 6 ) ;
4604: LD_INT 6
4606: DISABLE_MARKED
// disable ( 7 ) ;
4607: LD_INT 7
4609: DISABLE_MARKED
// disable ( 10 ) ;
4610: LD_INT 10
4612: DISABLE_MARKED
// disable ( 20 ) ;
4613: LD_INT 20
4615: DISABLE_MARKED
// disable ( 98 ) ;
4616: LD_INT 98
4618: DISABLE_MARKED
// disable ( 99 ) ;
4619: LD_INT 99
4621: DISABLE_MARKED
// disable ( 400 ) ;
4622: LD_INT 400
4624: DISABLE_MARKED
// disable ( 401 ) ;
4625: LD_INT 401
4627: DISABLE_MARKED
// disable ( 600 ) ;
4628: LD_INT 600
4630: DISABLE_MARKED
// mp_selectmsg := true ;
4631: LD_ADDR_OWVAR 13
4635: PUSH
4636: LD_INT 1
4638: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4639: CALL 68 0 0
// init_map ;
4643: CALL 1747 0 0
// init_shipments ;
4647: CALL 4833 0 0
// init_respawn ;
4651: CALL 6531 0 0
// set_shared_visions_and_alliances ;
4655: CALL 2206 0 0
// ResetFog ;
4659: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4663: LD_OWVAR 2
4667: PPUSH
4668: CALL_OW 520
// prepare_sides ;
4672: CALL 4290 0 0
// Init_Win_Condition ;
4676: CALL 18753 0 0
// InitLimits ;
4680: CALL 16581 0 0
// ShowTimer ;
4684: CALL 17518 0 0
// case Game_Type of 2 :
4688: LD_EXP 50
4692: PUSH
4693: LD_INT 2
4695: DOUBLE
4696: EQUAL
4697: IFTRUE 4701
4699: GO 4708
4701: POP
// init_alien_research ; 3 :
4702: CALL 7761 0 0
4706: GO 4728
4708: LD_INT 3
4710: DOUBLE
4711: EQUAL
4712: IFTRUE 4716
4714: GO 4727
4716: POP
// begin InitPoints ( ) ;
4717: CALL 17756 0 0
// init_kings_counting ;
4721: CALL 19979 0 0
// end ; end ;
4725: GO 4728
4727: POP
// music_nat := Side_Nations [ your_side ] ;
4728: LD_ADDR_OWVAR 71
4732: PUSH
4733: LD_EXP 25
4737: PUSH
4738: LD_OWVAR 2
4742: ARRAY
4743: ST_TO_ADDR
// if IAmSpec then
4744: CALL_OW 531
4748: IFFALSE 4772
// begin fogOff ( true ) ;
4750: LD_INT 1
4752: PPUSH
4753: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4757: LD_INT 119
4759: PPUSH
4760: LD_INT 79
4762: PPUSH
4763: CALL_OW 86
// enable ( 400 ) ;
4767: LD_INT 400
4769: ENABLE_MARKED
// end else
4770: GO 4818
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4772: LD_EXP 33
4776: PUSH
4777: LD_EXP 24
4781: PUSH
4782: LD_OWVAR 2
4786: ARRAY
4787: ARRAY
4788: PUSH
4789: LD_INT 1
4791: ARRAY
4792: PPUSH
4793: LD_EXP 33
4797: PUSH
4798: LD_EXP 24
4802: PUSH
4803: LD_OWVAR 2
4807: ARRAY
4808: ARRAY
4809: PUSH
4810: LD_INT 2
4812: ARRAY
4813: PPUSH
4814: CALL_OW 86
// end ; InitApeman ;
4818: CALL 5706 0 0
// if def_builduptime then
4822: LD_EXP 65
4826: IFFALSE 4832
// BeginBuildUp ;
4828: CALL 13755 0 0
// end ; end_of_file
4832: END
// var shipment , tictac ; export function init_shipments ; begin
4833: LD_INT 0
4835: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4836: LD_ADDR_LOC 9
4840: PUSH
4841: LD_INT 0
4843: PPUSH
4844: LD_INT 3
4846: PPUSH
4847: CALL_OW 12
4851: ST_TO_ADDR
// tictac := 0 ;
4852: LD_ADDR_LOC 10
4856: PUSH
4857: LD_INT 0
4859: ST_TO_ADDR
// end ;
4860: LD_VAR 0 1
4864: RET
// every 1 1$0 + 0 0$0.3 do
4865: GO 4867
4867: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
4868: LD_INT 4
4870: PPUSH
4871: LD_INT 5
4873: PPUSH
4874: CALL_OW 12
4878: PPUSH
4879: LD_INT 1
4881: PPUSH
4882: CALL_OW 57
// enable ;
4886: ENABLE
// end ;
4887: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4888: GO 4890
4890: DISABLE
4891: LD_INT 0
4893: PPUSH
4894: PPUSH
// begin case tick of 1 .. 1 1$0 :
4895: LD_OWVAR 1
4899: PUSH
4900: LD_INT 1
4902: DOUBLE
4903: GREATEREQUAL
4904: IFFALSE 4912
4906: LD_INT 2100
4908: DOUBLE
4909: LESSEQUAL
4910: IFTRUE 4914
4912: GO 4942
4914: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4915: LD_EXP 13
4919: PUSH
4920: LD_INT 100
4922: DIVREAL
4923: PUSH
4924: LD_INT 525
4926: PPUSH
4927: LD_INT 1050
4929: PPUSH
4930: CALL_OW 12
4934: MUL
4935: PPUSH
4936: CALL_OW 67
4940: GO 5244
4942: LD_INT 2100
4944: PUSH
4945: LD_INT 1
4947: PLUS
4948: DOUBLE
4949: GREATEREQUAL
4950: IFFALSE 4958
4952: LD_INT 10500
4954: DOUBLE
4955: LESSEQUAL
4956: IFTRUE 4960
4958: GO 4988
4960: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4961: LD_EXP 13
4965: PUSH
4966: LD_INT 100
4968: DIVREAL
4969: PUSH
4970: LD_INT 1050
4972: PPUSH
4973: LD_INT 1225
4975: PPUSH
4976: CALL_OW 12
4980: MUL
4981: PPUSH
4982: CALL_OW 67
4986: GO 5244
4988: LD_INT 10500
4990: PUSH
4991: LD_INT 1
4993: PLUS
4994: DOUBLE
4995: GREATEREQUAL
4996: IFFALSE 5004
4998: LD_INT 21000
5000: DOUBLE
5001: LESSEQUAL
5002: IFTRUE 5006
5004: GO 5034
5006: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5007: LD_EXP 13
5011: PUSH
5012: LD_INT 100
5014: DIVREAL
5015: PUSH
5016: LD_INT 1225
5018: PPUSH
5019: LD_INT 1750
5021: PPUSH
5022: CALL_OW 12
5026: MUL
5027: PPUSH
5028: CALL_OW 67
5032: GO 5244
5034: LD_INT 21000
5036: PUSH
5037: LD_INT 1
5039: PLUS
5040: DOUBLE
5041: GREATEREQUAL
5042: IFFALSE 5050
5044: LD_INT 42000
5046: DOUBLE
5047: LESSEQUAL
5048: IFTRUE 5052
5050: GO 5080
5052: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5053: LD_EXP 13
5057: PUSH
5058: LD_INT 100
5060: DIVREAL
5061: PUSH
5062: LD_INT 1750
5064: PPUSH
5065: LD_INT 2450
5067: PPUSH
5068: CALL_OW 12
5072: MUL
5073: PPUSH
5074: CALL_OW 67
5078: GO 5244
5080: LD_INT 42000
5082: PUSH
5083: LD_INT 1
5085: PLUS
5086: DOUBLE
5087: GREATEREQUAL
5088: IFFALSE 5096
5090: LD_INT 63000
5092: DOUBLE
5093: LESSEQUAL
5094: IFTRUE 5098
5096: GO 5126
5098: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5099: LD_EXP 13
5103: PUSH
5104: LD_INT 100
5106: DIVREAL
5107: PUSH
5108: LD_INT 2450
5110: PPUSH
5111: LD_INT 2800
5113: PPUSH
5114: CALL_OW 12
5118: MUL
5119: PPUSH
5120: CALL_OW 67
5124: GO 5244
5126: LD_INT 63000
5128: PUSH
5129: LD_INT 1
5131: PLUS
5132: DOUBLE
5133: GREATEREQUAL
5134: IFFALSE 5142
5136: LD_INT 105000
5138: DOUBLE
5139: LESSEQUAL
5140: IFTRUE 5144
5142: GO 5172
5144: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5145: LD_EXP 13
5149: PUSH
5150: LD_INT 100
5152: DIVREAL
5153: PUSH
5154: LD_INT 2800
5156: PPUSH
5157: LD_INT 3325
5159: PPUSH
5160: CALL_OW 12
5164: MUL
5165: PPUSH
5166: CALL_OW 67
5170: GO 5244
5172: LD_INT 105000
5174: PUSH
5175: LD_INT 1
5177: PLUS
5178: DOUBLE
5179: GREATEREQUAL
5180: IFFALSE 5188
5182: LD_INT 630000
5184: DOUBLE
5185: LESSEQUAL
5186: IFTRUE 5190
5188: GO 5218
5190: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
5191: LD_EXP 13
5195: PUSH
5196: LD_INT 100
5198: DIVREAL
5199: PUSH
5200: LD_INT 3325
5202: PPUSH
5203: LD_INT 4200
5205: PPUSH
5206: CALL_OW 12
5210: MUL
5211: PPUSH
5212: CALL_OW 67
5216: GO 5244
5218: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5219: LD_EXP 13
5223: PUSH
5224: LD_INT 100
5226: DIVREAL
5227: PUSH
5228: LD_INT 4200
5230: PPUSH
5231: LD_INT 5250
5233: PPUSH
5234: CALL_OW 12
5238: MUL
5239: PPUSH
5240: CALL_OW 67
// amount := Rand ( 1 , 5 ) ;
5244: LD_ADDR_VAR 0 2
5248: PUSH
5249: LD_INT 1
5251: PPUSH
5252: LD_INT 5
5254: PPUSH
5255: CALL_OW 12
5259: ST_TO_ADDR
// for i = 1 to 4 do
5260: LD_ADDR_VAR 0 1
5264: PUSH
5265: DOUBLE
5266: LD_INT 1
5268: DEC
5269: ST_TO_ADDR
5270: LD_INT 4
5272: PUSH
5273: FOR_TO
5274: IFFALSE 5336
// begin if not Side_Positions [ i ] then
5276: LD_EXP 24
5280: PUSH
5281: LD_VAR 0 1
5285: ARRAY
5286: NOT
5287: IFFALSE 5291
// continue ;
5289: GO 5273
// wait ( 0 0$3 ) ;
5291: LD_INT 105
5293: PPUSH
5294: CALL_OW 67
// CreateCratesArea ( amount , [ north_west , north_east , south_west , south_east ] [ i ] , true ) ;
5298: LD_VAR 0 2
5302: PPUSH
5303: LD_INT 4
5305: PUSH
5306: LD_INT 5
5308: PUSH
5309: LD_INT 7
5311: PUSH
5312: LD_INT 6
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: PUSH
5321: LD_VAR 0 1
5325: ARRAY
5326: PPUSH
5327: LD_INT 1
5329: PPUSH
5330: CALL_OW 55
// end ;
5334: GO 5273
5336: POP
5337: POP
// enable ;
5338: ENABLE
// end ;
5339: PPOPN 2
5341: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount , is_in ;
5342: LD_OWVAR 1
5346: PUSH
5347: LD_INT 6300
5349: PUSH
5350: LD_LOC 10
5354: MUL
5355: PUSH
5356: LD_LOC 10
5360: PUSH
5361: LD_INT 3150
5363: PUSH
5364: LD_EXP 13
5368: PUSH
5369: LD_INT 70
5371: MUL
5372: MINUS
5373: MUL
5374: PLUS
5375: GREATER
5376: IFFALSE 5512
5378: GO 5380
5380: DISABLE
5381: LD_INT 0
5383: PPUSH
5384: PPUSH
5385: PPUSH
// begin tictac := tictac + 1 ;
5386: LD_ADDR_LOC 10
5390: PUSH
5391: LD_LOC 10
5395: PUSH
5396: LD_INT 1
5398: PLUS
5399: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5400: LD_ADDR_VAR 0 2
5404: PUSH
5405: LD_INT 3
5407: PPUSH
5408: LD_INT 5
5410: PPUSH
5411: CALL_OW 12
5415: ST_TO_ADDR
// for i = 0 to 3 do
5416: LD_ADDR_VAR 0 1
5420: PUSH
5421: DOUBLE
5422: LD_INT 0
5424: DEC
5425: ST_TO_ADDR
5426: LD_INT 3
5428: PUSH
5429: FOR_TO
5430: IFFALSE 5509
// begin is_in := GetResourceArea ( north_west + i , mat_cans ) ;
5432: LD_ADDR_VAR 0 3
5436: PUSH
5437: LD_INT 4
5439: PUSH
5440: LD_VAR 0 1
5444: PLUS
5445: PPUSH
5446: LD_INT 1
5448: PPUSH
5449: CALL_OW 287
5453: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5454: LD_VAR 0 3
5458: PUSH
5459: LD_INT 500
5461: LESS
5462: PUSH
5463: LD_INT 1
5465: PPUSH
5466: LD_INT 10
5468: PPUSH
5469: CALL_OW 12
5473: PUSH
5474: LD_VAR 0 3
5478: PUSH
5479: LD_INT 100
5481: DIV
5482: GREATER
5483: OR
5484: IFFALSE 5507
// CreateCratesArea ( amount , north_west + i , true ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_INT 4
5493: PUSH
5494: LD_VAR 0 1
5498: PLUS
5499: PPUSH
5500: LD_INT 1
5502: PPUSH
5503: CALL_OW 55
// end ;
5507: GO 5429
5509: POP
5510: POP
// enable ;
5511: ENABLE
// end ; end_of_file
5512: PPOPN 3
5514: END
// every 20 20$00 trigger apemanNumber do
5515: LD_EXP 37
5519: IFFALSE 5552
5521: GO 5523
5523: DISABLE
// begin enable ;
5524: ENABLE
// if apeLevel >= 8 then
5525: LD_EXP 42
5529: PUSH
5530: LD_INT 8
5532: GREATEREQUAL
5533: IFFALSE 5538
// disable else
5535: DISABLE
5536: GO 5552
// apeLevel := apeLevel + 1 ;
5538: LD_ADDR_EXP 42
5542: PUSH
5543: LD_EXP 42
5547: PUSH
5548: LD_INT 1
5550: PLUS
5551: ST_TO_ADDR
// end ;
5552: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5553: LD_EXP 37
5557: PUSH
5558: LD_EXP 38
5562: LESS
5563: IFFALSE 5703
5565: GO 5567
5567: DISABLE
5568: LD_INT 0
5570: PPUSH
5571: PPUSH
5572: PPUSH
5573: PPUSH
// begin enable ;
5574: ENABLE
// for i := 1 to apemanPos do
5575: LD_ADDR_VAR 0 1
5579: PUSH
5580: DOUBLE
5581: LD_INT 1
5583: DEC
5584: ST_TO_ADDR
5585: LD_EXP 40
5589: PUSH
5590: FOR_TO
5591: IFFALSE 5701
// begin if apemanPlayerCount [ i ] then
5593: LD_EXP 41
5597: PUSH
5598: LD_VAR 0 1
5602: ARRAY
5603: IFFALSE 5699
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5605: LD_EXP 41
5609: PUSH
5610: LD_VAR 0 1
5614: ARRAY
5615: PUSH
5616: LD_EXP 40
5620: PUSH
5621: LD_VAR 0 1
5625: ARRAY
5626: GREATER
5627: IFFALSE 5699
// begin ape := PrepareApeman ;
5629: LD_ADDR_VAR 0 2
5633: PUSH
5634: CALL 6206 0 0
5638: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5639: LD_VAR 0 2
5643: PPUSH
5644: LD_EXP 43
5648: PUSH
5649: LD_VAR 0 1
5653: ARRAY
5654: PPUSH
5655: LD_INT 0
5657: PPUSH
5658: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5662: LD_ADDR_EXP 40
5666: PUSH
5667: LD_EXP 40
5671: PPUSH
5672: LD_VAR 0 1
5676: PPUSH
5677: LD_EXP 40
5681: PUSH
5682: LD_VAR 0 1
5686: ARRAY
5687: PUSH
5688: LD_VAR 0 2
5692: UNION
5693: PPUSH
5694: CALL_OW 1
5698: ST_TO_ADDR
// end ; end ; end ;
5699: GO 5590
5701: POP
5702: POP
// end ;
5703: PPOPN 4
5705: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5706: LD_INT 0
5708: PPUSH
5709: PPUSH
5710: PPUSH
5711: PPUSH
5712: PPUSH
5713: PPUSH
5714: PPUSH
// playersAmount := 0 ;
5715: LD_ADDR_VAR 0 3
5719: PUSH
5720: LD_INT 0
5722: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5723: LD_ADDR_VAR 0 7
5727: PUSH
5728: LD_INT 8
5730: PUSH
5731: LD_INT 9
5733: PUSH
5734: LD_INT 11
5736: PUSH
5737: LD_INT 10
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5746: LD_ADDR_EXP 43
5750: PUSH
5751: LD_INT 0
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: LD_INT 0
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: ST_TO_ADDR
// for j = 1 to Side_Positions do
5785: LD_ADDR_VAR 0 4
5789: PUSH
5790: DOUBLE
5791: LD_INT 1
5793: DEC
5794: ST_TO_ADDR
5795: LD_EXP 24
5799: PUSH
5800: FOR_TO
5801: IFFALSE 5868
// if Side_Positions [ j ] then
5803: LD_EXP 24
5807: PUSH
5808: LD_VAR 0 4
5812: ARRAY
5813: IFFALSE 5866
// begin playersAmount := playersAmount + 1 ;
5815: LD_ADDR_VAR 0 3
5819: PUSH
5820: LD_VAR 0 3
5824: PUSH
5825: LD_INT 1
5827: PLUS
5828: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5829: LD_ADDR_EXP 43
5833: PUSH
5834: LD_EXP 43
5838: PPUSH
5839: LD_VAR 0 4
5843: PPUSH
5844: LD_VAR 0 7
5848: PUSH
5849: LD_EXP 24
5853: PUSH
5854: LD_VAR 0 4
5858: ARRAY
5859: ARRAY
5860: PPUSH
5861: CALL_OW 1
5865: ST_TO_ADDR
// end ;
5866: GO 5800
5868: POP
5869: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5870: LD_ADDR_EXP 39
5874: PUSH
5875: LD_INT 3
5877: PUSH
5878: LD_EXP 15
5882: MUL
5883: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5884: LD_ADDR_EXP 37
5888: PUSH
5889: LD_VAR 0 3
5893: PUSH
5894: LD_EXP 39
5898: MUL
5899: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5900: LD_ADDR_EXP 38
5904: PUSH
5905: LD_EXP 37
5909: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5910: LD_ADDR_EXP 40
5914: PUSH
5915: LD_INT 0
5917: PUSH
5918: LD_INT 0
5920: PUSH
5921: LD_INT 0
5923: PUSH
5924: LD_INT 0
5926: PUSH
5927: LD_INT 0
5929: PUSH
5930: LD_INT 0
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: LD_INT 0
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5949: LD_ADDR_EXP 41
5953: PUSH
5954: LD_INT 0
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 0
5962: PUSH
5963: LD_INT 0
5965: PUSH
5966: LD_INT 0
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: LD_INT 0
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: ST_TO_ADDR
// apeLevel := 1 ;
5988: LD_ADDR_EXP 42
5992: PUSH
5993: LD_INT 1
5995: ST_TO_ADDR
// if not apemanNumber then
5996: LD_EXP 37
6000: NOT
6001: IFFALSE 6005
// exit ;
6003: GO 6201
// for i := 1 to apemanPerPlayer do
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_EXP 39
6019: PUSH
6020: FOR_TO
6021: IFFALSE 6199
// begin for j := 1 to Side_Positions do
6023: LD_ADDR_VAR 0 4
6027: PUSH
6028: DOUBLE
6029: LD_INT 1
6031: DEC
6032: ST_TO_ADDR
6033: LD_EXP 24
6037: PUSH
6038: FOR_TO
6039: IFFALSE 6195
// if Side_Positions [ j ] then
6041: LD_EXP 24
6045: PUSH
6046: LD_VAR 0 4
6050: ARRAY
6051: IFFALSE 6193
// begin pos := Side_Positions [ j ] ;
6053: LD_ADDR_VAR 0 6
6057: PUSH
6058: LD_EXP 24
6062: PUSH
6063: LD_VAR 0 4
6067: ARRAY
6068: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6069: LD_ADDR_EXP 41
6073: PUSH
6074: LD_EXP 41
6078: PPUSH
6079: LD_VAR 0 4
6083: PPUSH
6084: LD_EXP 41
6088: PUSH
6089: LD_VAR 0 4
6093: ARRAY
6094: PUSH
6095: LD_INT 1
6097: PLUS
6098: PPUSH
6099: CALL_OW 1
6103: ST_TO_ADDR
// ape := PrepareApeman ;
6104: LD_ADDR_VAR 0 5
6108: PUSH
6109: CALL 6206 0 0
6113: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6114: LD_ADDR_EXP 40
6118: PUSH
6119: LD_EXP 40
6123: PPUSH
6124: LD_VAR 0 4
6128: PPUSH
6129: LD_EXP 40
6133: PUSH
6134: LD_VAR 0 4
6138: ARRAY
6139: PPUSH
6140: LD_EXP 40
6144: PUSH
6145: LD_VAR 0 4
6149: ARRAY
6150: PUSH
6151: LD_INT 1
6153: PLUS
6154: PPUSH
6155: LD_VAR 0 5
6159: PPUSH
6160: CALL_OW 1
6164: PPUSH
6165: CALL_OW 1
6169: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6170: LD_VAR 0 5
6174: PPUSH
6175: LD_EXP 43
6179: PUSH
6180: LD_VAR 0 4
6184: ARRAY
6185: PPUSH
6186: LD_INT 0
6188: PPUSH
6189: CALL_OW 49
// end ;
6193: GO 6038
6195: POP
6196: POP
// end ;
6197: GO 6020
6199: POP
6200: POP
// end ;
6201: LD_VAR 0 1
6205: RET
// export function PrepareApeman ; var bonus ; begin
6206: LD_INT 0
6208: PPUSH
6209: PPUSH
// uc_side := 0 ;
6210: LD_ADDR_OWVAR 20
6214: PUSH
6215: LD_INT 0
6217: ST_TO_ADDR
// uc_nation := 0 ;
6218: LD_ADDR_OWVAR 21
6222: PUSH
6223: LD_INT 0
6225: ST_TO_ADDR
// InitHc ;
6226: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6230: LD_ADDR_VAR 0 2
6234: PUSH
6235: LD_INT 1
6237: NEG
6238: PUSH
6239: LD_INT 0
6241: PUSH
6242: LD_INT 1
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_OWVAR 1
6254: PUSH
6255: LD_INT 3
6257: MOD
6258: PUSH
6259: LD_INT 1
6261: PLUS
6262: ARRAY
6263: ST_TO_ADDR
// hc_class := class_apeman ;
6264: LD_ADDR_OWVAR 28
6268: PUSH
6269: LD_INT 12
6271: ST_TO_ADDR
// hc_gallery :=  ;
6272: LD_ADDR_OWVAR 33
6276: PUSH
6277: LD_STRING 
6279: ST_TO_ADDR
// hc_name :=  ;
6280: LD_ADDR_OWVAR 26
6284: PUSH
6285: LD_STRING 
6287: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6288: LD_ADDR_OWVAR 31
6292: PUSH
6293: LD_EXP 42
6297: PUSH
6298: LD_VAR 0 2
6302: PLUS
6303: PUSH
6304: LD_EXP 42
6308: PUSH
6309: LD_VAR 0 2
6313: PLUS
6314: PUSH
6315: LD_EXP 42
6319: PUSH
6320: LD_VAR 0 2
6324: PLUS
6325: PUSH
6326: LD_EXP 42
6330: PUSH
6331: LD_VAR 0 2
6335: PLUS
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6343: LD_ADDR_OWVAR 35
6347: PUSH
6348: LD_INT 10
6350: PUSH
6351: LD_VAR 0 2
6355: MUL
6356: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6357: LD_ADDR_OWVAR 29
6361: PUSH
6362: LD_INT 12
6364: PUSH
6365: LD_INT 10
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: ST_TO_ADDR
// result := CreateHuman ;
6372: LD_ADDR_VAR 0 1
6376: PUSH
6377: CALL_OW 44
6381: ST_TO_ADDR
// end ;
6382: LD_VAR 0 1
6386: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6387: LD_INT 0
6389: PPUSH
6390: PPUSH
6391: PPUSH
// if not ape then
6392: LD_VAR 0 1
6396: NOT
6397: IFFALSE 6401
// exit ;
6399: GO 6526
// side := GetSide ( ape ) ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_VAR 0 1
6410: PPUSH
6411: CALL_OW 255
6415: ST_TO_ADDR
// if not side then
6416: LD_VAR 0 3
6420: NOT
6421: IFFALSE 6475
// begin for i = 1 to apemanPos do
6423: LD_ADDR_VAR 0 4
6427: PUSH
6428: DOUBLE
6429: LD_INT 1
6431: DEC
6432: ST_TO_ADDR
6433: LD_EXP 40
6437: PUSH
6438: FOR_TO
6439: IFFALSE 6473
// if ape in apemanPos [ i ] then
6441: LD_VAR 0 1
6445: PUSH
6446: LD_EXP 40
6450: PUSH
6451: LD_VAR 0 4
6455: ARRAY
6456: IN
6457: IFFALSE 6471
// begin side := i ;
6459: LD_ADDR_VAR 0 3
6463: PUSH
6464: LD_VAR 0 4
6468: ST_TO_ADDR
// break ;
6469: GO 6473
// end ;
6471: GO 6438
6473: POP
6474: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6475: LD_ADDR_EXP 40
6479: PUSH
6480: LD_EXP 40
6484: PPUSH
6485: LD_VAR 0 3
6489: PPUSH
6490: LD_EXP 40
6494: PUSH
6495: LD_VAR 0 3
6499: ARRAY
6500: PUSH
6501: LD_VAR 0 1
6505: DIFF
6506: PPUSH
6507: CALL_OW 1
6511: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6512: LD_ADDR_EXP 37
6516: PUSH
6517: LD_EXP 37
6521: PUSH
6522: LD_INT 1
6524: MINUS
6525: ST_TO_ADDR
// end ; end_of_file
6526: LD_VAR 0 2
6530: RET
// var respawn_queue ; export function init_respawn ; begin
6531: LD_INT 0
6533: PPUSH
// if not def_people_respawning then
6534: LD_EXP 62
6538: NOT
6539: IFFALSE 6543
// exit ;
6541: GO 6585
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6543: LD_ADDR_LOC 11
6547: PUSH
6548: LD_INT 0
6550: PUSH
6551: LD_INT 0
6553: PUSH
6554: LD_INT 0
6556: PUSH
6557: LD_INT 0
6559: PUSH
6560: LD_INT 0
6562: PUSH
6563: LD_INT 0
6565: PUSH
6566: LD_INT 0
6568: PUSH
6569: LD_INT 0
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: ST_TO_ADDR
// enable ( 10 ) ;
6582: LD_INT 10
6584: ENABLE_MARKED
// end ;
6585: LD_VAR 0 1
6589: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6590: GO 6592
6592: DISABLE
6593: LD_INT 0
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
// begin for side = 1 to Side_Positions do
6599: LD_ADDR_VAR 0 4
6603: PUSH
6604: DOUBLE
6605: LD_INT 1
6607: DEC
6608: ST_TO_ADDR
6609: LD_EXP 24
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6781
// if Side_Positions [ side ] then
6617: LD_EXP 24
6621: PUSH
6622: LD_VAR 0 4
6626: ARRAY
6627: IFFALSE 6779
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6629: LD_ADDR_VAR 0 2
6633: PUSH
6634: LD_INT 22
6636: PUSH
6637: LD_VAR 0 4
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 21
6648: PUSH
6649: LD_INT 1
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 3
6658: PUSH
6659: LD_INT 23
6661: PUSH
6662: LD_INT 0
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: PPUSH
6675: CALL_OW 69
6679: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6680: LD_VAR 0 2
6684: PUSH
6685: LD_EXP 9
6689: LESS
6690: PUSH
6691: LD_LOC 11
6695: PUSH
6696: LD_VAR 0 4
6700: ARRAY
6701: NOT
6702: AND
6703: IFFALSE 6719
// set_queue ( side , TICK ) ;
6705: LD_VAR 0 4
6709: PPUSH
6710: LD_OWVAR 1
6714: PPUSH
6715: CALL 7018 0 2
// time := TICK - respawn_queue [ side ] ;
6719: LD_ADDR_VAR 0 3
6723: PUSH
6724: LD_OWVAR 1
6728: PUSH
6729: LD_LOC 11
6733: PUSH
6734: LD_VAR 0 4
6738: ARRAY
6739: MINUS
6740: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6741: LD_LOC 11
6745: PUSH
6746: LD_VAR 0 4
6750: ARRAY
6751: PUSH
6752: LD_VAR 0 3
6756: PUSH
6757: LD_EXP 16
6761: GREATER
6762: AND
6763: IFFALSE 6779
// respawn_character ( side , time ) ;
6765: LD_VAR 0 4
6769: PPUSH
6770: LD_VAR 0 3
6774: PPUSH
6775: CALL 6787 0 2
// end ;
6779: GO 6614
6781: POP
6782: POP
// enable ;
6783: ENABLE
// end ;
6784: PPOPN 4
6786: END
// function respawn_character ( side , time ) ; var dep ; begin
6787: LD_INT 0
6789: PPUSH
6790: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6791: LD_INT 0
6793: PPUSH
6794: LD_INT 1
6796: PPUSH
6797: CALL_OW 12
6801: PUSH
6802: LD_VAR 0 2
6806: PUSH
6807: LD_EXP 17
6811: LESS
6812: AND
6813: IFFALSE 6817
// exit ;
6815: GO 7013
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6817: LD_ADDR_VAR 0 4
6821: PUSH
6822: LD_INT 22
6824: PUSH
6825: LD_VAR 0 1
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: LD_INT 2
6836: PUSH
6837: LD_INT 30
6839: PUSH
6840: LD_INT 0
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 30
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: PUSH
6862: LD_INT 50
6864: PUSH
6865: EMPTY
6866: LIST
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: PPUSH
6873: CALL_OW 69
6877: ST_TO_ADDR
// if not dep then
6878: LD_VAR 0 4
6882: NOT
6883: IFFALSE 6889
// exit else
6885: GO 7013
6887: GO 6913
// dep := dep [ Rand ( 1 , dep ) ] ;
6889: LD_ADDR_VAR 0 4
6893: PUSH
6894: LD_VAR 0 4
6898: PUSH
6899: LD_INT 1
6901: PPUSH
6902: LD_VAR 0 4
6906: PPUSH
6907: CALL_OW 12
6911: ARRAY
6912: ST_TO_ADDR
// uc_side := side ;
6913: LD_ADDR_OWVAR 20
6917: PUSH
6918: LD_VAR 0 1
6922: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6923: LD_ADDR_OWVAR 21
6927: PUSH
6928: LD_EXP 25
6932: PUSH
6933: LD_VAR 0 1
6937: ARRAY
6938: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6939: LD_INT 0
6941: PPUSH
6942: LD_INT 0
6944: PPUSH
6945: LD_EXP 10
6949: PUSH
6950: LD_INT 2
6952: DIV
6953: PPUSH
6954: CALL_OW 380
// hc_importance := 0 ;
6958: LD_ADDR_OWVAR 32
6962: PUSH
6963: LD_INT 0
6965: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6966: CALL_OW 44
6970: PPUSH
6971: LD_VAR 0 4
6975: PPUSH
6976: CALL_OW 250
6980: PPUSH
6981: LD_VAR 0 4
6985: PPUSH
6986: CALL_OW 251
6990: PPUSH
6991: LD_INT 10
6993: PPUSH
6994: LD_INT 1
6996: PPUSH
6997: CALL_OW 50
// set_queue ( side , 0 ) ;
7001: LD_VAR 0 1
7005: PPUSH
7006: LD_INT 0
7008: PPUSH
7009: CALL 7018 0 2
// end ;
7013: LD_VAR 0 3
7017: RET
// function set_queue ( side , time ) ; begin
7018: LD_INT 0
7020: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
7021: LD_ADDR_LOC 11
7025: PUSH
7026: LD_LOC 11
7030: PPUSH
7031: LD_VAR 0 1
7035: PPUSH
7036: CALL_OW 3
7040: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
7041: LD_ADDR_LOC 11
7045: PUSH
7046: LD_LOC 11
7050: PPUSH
7051: LD_VAR 0 1
7055: PPUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: CALL_OW 2
7065: ST_TO_ADDR
// end ; end_of_file
7066: LD_VAR 0 3
7070: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7071: LD_VAR 0 1
7075: PPUSH
7076: CALL_OW 266
7080: PUSH
7081: LD_INT 0
7083: PUSH
7084: LD_INT 1
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: IN
7091: IFFALSE 7116
// SetBName ( b , @ & GetSide ( b ) ) ;
7093: LD_VAR 0 1
7097: PPUSH
7098: LD_STRING @
7100: PUSH
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 255
7110: STR
7111: PPUSH
7112: CALL_OW 500
// if def_game_rules then
7116: LD_EXP 51
7120: IFFALSE 7157
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7122: LD_VAR 0 1
7126: PPUSH
7127: LD_VAR 0 1
7131: PPUSH
7132: CALL_OW 266
7136: PPUSH
7137: LD_VAR 0 1
7141: PPUSH
7142: CALL_OW 255
7146: PPUSH
7147: LD_INT 0
7149: PPUSH
7150: LD_INT 1
7152: PPUSH
7153: CALL 16982 0 5
// end ;
7157: PPOPN 2
7159: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7160: LD_VAR 0 1
7164: PPUSH
7165: CALL_OW 266
7169: PUSH
7170: LD_INT 0
7172: PUSH
7173: LD_INT 1
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: IN
7180: IFFALSE 7205
// SetBName ( b , @ & GetSide ( b ) ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_STRING @
7189: PUSH
7190: LD_VAR 0 1
7194: PPUSH
7195: CALL_OW 255
7199: STR
7200: PPUSH
7201: CALL_OW 500
// if def_game_rules then
7205: LD_EXP 51
7209: IFFALSE 7248
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7211: LD_VAR 0 1
7215: PPUSH
7216: LD_VAR 0 1
7220: PPUSH
7221: CALL_OW 266
7225: PPUSH
7226: LD_VAR 0 1
7230: PPUSH
7231: CALL_OW 255
7235: PPUSH
7236: LD_VAR 0 2
7240: PPUSH
7241: LD_INT 1
7243: PPUSH
7244: CALL 16982 0 5
// end ;
7248: PPOPN 3
7250: END
// on VehicleConstructed ( veh , fac ) do var side ;
7251: LD_INT 0
7253: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7254: LD_VAR 0 1
7258: PPUSH
7259: CALL_OW 263
7263: PUSH
7264: LD_INT 5
7266: EQUAL
7267: IFFALSE 7409
// begin side := GetSide ( veh ) ;
7269: LD_ADDR_VAR 0 3
7273: PUSH
7274: LD_VAR 0 1
7278: PPUSH
7279: CALL_OW 255
7283: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7284: LD_ADDR_EXP 40
7288: PUSH
7289: LD_EXP 40
7293: PPUSH
7294: LD_VAR 0 3
7298: PPUSH
7299: LD_EXP 40
7303: PUSH
7304: LD_VAR 0 3
7308: ARRAY
7309: PPUSH
7310: LD_INT 52
7312: PUSH
7313: EMPTY
7314: LIST
7315: PPUSH
7316: CALL_OW 72
7320: PUSH
7321: LD_INT 22
7323: PUSH
7324: LD_VAR 0 3
7328: PUSH
7329: EMPTY
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 2
7335: PUSH
7336: LD_INT 33
7338: PUSH
7339: LD_INT 5
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: LD_INT 25
7348: PUSH
7349: LD_INT 12
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PUSH
7356: LD_INT 25
7358: PUSH
7359: LD_INT 15
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PUSH
7366: LD_INT 25
7368: PUSH
7369: LD_INT 16
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 17
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PPUSH
7398: CALL_OW 69
7402: UNION
7403: PPUSH
7404: CALL_OW 1
7408: ST_TO_ADDR
// end ; end ;
7409: PPOPN 3
7411: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7412: LD_INT 0
7414: PPUSH
7415: PPUSH
7416: PPUSH
7417: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7418: LD_VAR 0 1
7422: PPUSH
7423: CALL_OW 257
7427: PUSH
7428: LD_INT 12
7430: PUSH
7431: LD_INT 15
7433: PUSH
7434: LD_INT 17
7436: PUSH
7437: LD_INT 16
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: IN
7446: PUSH
7447: LD_VAR 0 1
7451: PPUSH
7452: CALL_OW 263
7456: PUSH
7457: LD_INT 5
7459: EQUAL
7460: OR
7461: IFFALSE 7472
// ApeKilled ( j ) ;
7463: LD_VAR 0 1
7467: PPUSH
7468: CALL 6387 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7472: LD_VAR 0 1
7476: PPUSH
7477: CALL_OW 266
7481: PUSH
7482: LD_INT 0
7484: PUSH
7485: LD_INT 1
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: IN
7492: IFFALSE 7574
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7494: LD_ADDR_VAR 0 4
7498: PUSH
7499: LD_EXP 24
7503: PUSH
7504: LD_VAR 0 1
7508: PPUSH
7509: CALL_OW 255
7513: ARRAY
7514: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7515: LD_ADDR_VAR 0 2
7519: PUSH
7520: LD_EXP 33
7524: PUSH
7525: LD_VAR 0 4
7529: ARRAY
7530: PUSH
7531: LD_INT 1
7533: ARRAY
7534: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7535: LD_ADDR_VAR 0 3
7539: PUSH
7540: LD_EXP 33
7544: PUSH
7545: LD_VAR 0 4
7549: ARRAY
7550: PUSH
7551: LD_INT 2
7553: ARRAY
7554: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7555: LD_VAR 0 2
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 420
7569: PPUSH
7570: CALL_OW 419
// end ; if def_game_rules then
7574: LD_EXP 51
7578: IFFALSE 7677
// if ( GetType ( j ) = 3 ) then
7580: LD_VAR 0 1
7584: PPUSH
7585: CALL_OW 247
7589: PUSH
7590: LD_INT 3
7592: EQUAL
7593: IFFALSE 7633
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7595: LD_VAR 0 1
7599: PPUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: CALL_OW 266
7609: PPUSH
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 255
7619: PPUSH
7620: LD_INT 0
7622: PPUSH
7623: LD_INT 1
7625: NEG
7626: PPUSH
7627: CALL 16982 0 5
7631: GO 7677
// if ( GetChassis ( j ) = 25 ) then
7633: LD_VAR 0 1
7637: PPUSH
7638: CALL_OW 265
7642: PUSH
7643: LD_INT 25
7645: EQUAL
7646: IFFALSE 7677
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7648: LD_VAR 0 1
7652: PPUSH
7653: LD_INT 37
7655: PPUSH
7656: LD_VAR 0 1
7660: PPUSH
7661: CALL_OW 255
7665: PPUSH
7666: LD_INT 0
7668: PPUSH
7669: LD_INT 1
7671: NEG
7672: PPUSH
7673: CALL 16982 0 5
// end ;
7677: PPOPN 5
7679: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7680: LD_EXP 51
7684: PUSH
7685: LD_VAR 0 1
7689: PPUSH
7690: CALL_OW 265
7694: PUSH
7695: LD_INT 25
7697: EQUAL
7698: AND
7699: IFFALSE 7731
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7701: LD_VAR 0 1
7705: PPUSH
7706: LD_INT 37
7708: PPUSH
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 255
7718: PPUSH
7719: LD_VAR 0 3
7723: PPUSH
7724: LD_INT 1
7726: PPUSH
7727: CALL 16982 0 5
// end ;
7731: PPOPN 4
7733: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7734: LD_VAR 0 1
7738: PPUSH
7739: LD_VAR 0 2
7743: PPUSH
7744: LD_VAR 0 3
7748: PPUSH
7749: LD_OWVAR 2
7753: PPUSH
7754: CALL 18514 0 4
7758: PPOPN 3
7760: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
7761: LD_INT 0
7763: PPUSH
7764: PPUSH
7765: PPUSH
7766: PPUSH
7767: PPUSH
7768: PPUSH
// artefact_number := 3 ;
7769: LD_ADDR_EXP 44
7773: PUSH
7774: LD_INT 3
7776: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
7777: LD_ADDR_EXP 45
7781: PUSH
7782: LD_INT 1
7784: PUSH
7785: LD_INT 0
7787: PUSH
7788: LD_INT 2
7790: PUSH
7791: LD_INT 0
7793: PUSH
7794: LD_INT 3
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
7804: LD_ADDR_EXP 46
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: LD_INT 3
7814: PUSH
7815: LD_INT 5
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: LIST
7822: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
7823: LD_ADDR_VAR 0 2
7827: PUSH
7828: LD_INT 1
7830: PUSH
7831: LD_INT 4
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 2
7840: PUSH
7841: LD_INT 5
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 3
7850: PUSH
7851: LD_INT 9
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
7863: LD_ADDR_VAR 0 3
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: LD_INT 4
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
7882: LD_ADDR_VAR 0 4
7886: PUSH
7887: LD_INT 150
7889: PUSH
7890: LD_INT 250
7892: PUSH
7893: LD_INT 400
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: LIST
7900: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
7901: LD_ADDR_VAR 0 5
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 10
7911: PUSH
7912: LD_INT 20
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
7920: LD_ADDR_VAR 0 6
7924: PUSH
7925: LD_INT 6
7927: PUSH
7928: LD_INT 18
7930: PUSH
7931: LD_INT 50
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: LIST
7938: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
7939: LD_VAR 0 2
7943: PPUSH
7944: LD_VAR 0 3
7948: PPUSH
7949: LD_VAR 0 4
7953: PPUSH
7954: LD_VAR 0 5
7958: PPUSH
7959: LD_VAR 0 6
7963: PPUSH
7964: CALL 7973 0 5
// end ;
7968: LD_VAR 0 1
7972: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
7973: LD_INT 0
7975: PPUSH
7976: PPUSH
7977: PPUSH
7978: PPUSH
7979: PPUSH
// disable ( 1 ) ;
7980: LD_INT 1
7982: DISABLE_MARKED
// disable ( 5 ) ;
7983: LD_INT 5
7985: DISABLE_MARKED
// disable ( 6 ) ;
7986: LD_INT 6
7988: DISABLE_MARKED
// disable ( 7 ) ;
7989: LD_INT 7
7991: DISABLE_MARKED
// for side = 1 to 8 do
7992: LD_ADDR_VAR 0 9
7996: PUSH
7997: DOUBLE
7998: LD_INT 1
8000: DEC
8001: ST_TO_ADDR
8002: LD_INT 8
8004: PUSH
8005: FOR_TO
8006: IFFALSE 8022
// SetArtifactRes ( side , state_enabled ) ;
8008: LD_VAR 0 9
8012: PPUSH
8013: LD_INT 1
8015: PPUSH
8016: CALL_OW 467
8020: GO 8005
8022: POP
8023: POP
// for un = 0 to ( artefact_number - 1 ) do
8024: LD_ADDR_VAR 0 7
8028: PUSH
8029: DOUBLE
8030: LD_INT 0
8032: DEC
8033: ST_TO_ADDR
8034: LD_EXP 44
8038: PUSH
8039: LD_INT 1
8041: MINUS
8042: PUSH
8043: FOR_TO
8044: IFFALSE 8442
// begin base := un * 100 ;
8046: LD_ADDR_VAR 0 10
8050: PUSH
8051: LD_VAR 0 7
8055: PUSH
8056: LD_INT 100
8058: MUL
8059: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
8060: LD_VAR 0 10
8064: PUSH
8065: LD_INT 1
8067: PLUS
8068: PPUSH
8069: LD_VAR 0 1
8073: PUSH
8074: LD_VAR 0 7
8078: PUSH
8079: LD_INT 1
8081: PLUS
8082: ARRAY
8083: PUSH
8084: LD_INT 1
8086: ARRAY
8087: PPUSH
8088: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
8092: LD_VAR 0 10
8096: PUSH
8097: LD_INT 2
8099: PLUS
8100: PPUSH
8101: LD_VAR 0 1
8105: PUSH
8106: LD_VAR 0 7
8110: PUSH
8111: LD_INT 1
8113: PLUS
8114: ARRAY
8115: PUSH
8116: LD_INT 2
8118: ARRAY
8119: PPUSH
8120: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
8124: LD_VAR 0 10
8128: PUSH
8129: LD_INT 3
8131: PLUS
8132: PPUSH
8133: LD_VAR 0 2
8137: PUSH
8138: LD_VAR 0 7
8142: PUSH
8143: LD_INT 1
8145: PLUS
8146: ARRAY
8147: PPUSH
8148: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
8152: LD_VAR 0 10
8156: PUSH
8157: LD_INT 5
8159: PLUS
8160: PPUSH
8161: LD_VAR 0 3
8165: PUSH
8166: LD_VAR 0 7
8170: PUSH
8171: LD_INT 1
8173: PLUS
8174: ARRAY
8175: PPUSH
8176: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
8180: LD_VAR 0 10
8184: PUSH
8185: LD_INT 6
8187: PLUS
8188: PPUSH
8189: LD_VAR 0 4
8193: PUSH
8194: LD_VAR 0 7
8198: PUSH
8199: LD_INT 1
8201: PLUS
8202: ARRAY
8203: PPUSH
8204: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
8208: LD_VAR 0 10
8212: PUSH
8213: LD_INT 7
8215: PLUS
8216: PPUSH
8217: LD_VAR 0 5
8221: PUSH
8222: LD_VAR 0 7
8226: PUSH
8227: LD_INT 1
8229: PLUS
8230: ARRAY
8231: PPUSH
8232: CALL_OW 109
// SetTag ( base + 08 , false ) ;
8236: LD_VAR 0 10
8240: PUSH
8241: LD_INT 8
8243: PLUS
8244: PPUSH
8245: LD_INT 0
8247: PPUSH
8248: CALL_OW 109
// SetTag ( base + 09 , false ) ;
8252: LD_VAR 0 10
8256: PUSH
8257: LD_INT 9
8259: PLUS
8260: PPUSH
8261: LD_INT 0
8263: PPUSH
8264: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
8268: LD_VAR 0 10
8272: PUSH
8273: LD_INT 11
8275: PLUS
8276: PPUSH
8277: LD_INT 0
8279: PPUSH
8280: CALL_OW 109
// SetTag ( base + 12 , false ) ;
8284: LD_VAR 0 10
8288: PUSH
8289: LD_INT 12
8291: PLUS
8292: PPUSH
8293: LD_INT 0
8295: PPUSH
8296: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8300: LD_VAR 0 10
8304: PUSH
8305: LD_INT 13
8307: PLUS
8308: PPUSH
8309: LD_INT 0
8311: PPUSH
8312: CALL_OW 109
// for i = 0 to 7 do
8316: LD_ADDR_VAR 0 8
8320: PUSH
8321: DOUBLE
8322: LD_INT 0
8324: DEC
8325: ST_TO_ADDR
8326: LD_INT 7
8328: PUSH
8329: FOR_TO
8330: IFFALSE 8438
// begin SetTag ( base + i * 10 + 21 , false ) ;
8332: LD_VAR 0 10
8336: PUSH
8337: LD_VAR 0 8
8341: PUSH
8342: LD_INT 10
8344: MUL
8345: PLUS
8346: PUSH
8347: LD_INT 21
8349: PLUS
8350: PPUSH
8351: LD_INT 0
8353: PPUSH
8354: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
8358: LD_VAR 0 10
8362: PUSH
8363: LD_VAR 0 8
8367: PUSH
8368: LD_INT 10
8370: MUL
8371: PLUS
8372: PUSH
8373: LD_INT 22
8375: PLUS
8376: PPUSH
8377: LD_INT 0
8379: PPUSH
8380: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
8384: LD_VAR 0 10
8388: PUSH
8389: LD_VAR 0 8
8393: PUSH
8394: LD_INT 10
8396: MUL
8397: PLUS
8398: PUSH
8399: LD_INT 23
8401: PLUS
8402: PPUSH
8403: LD_INT 0
8405: PPUSH
8406: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
8410: LD_VAR 0 10
8414: PUSH
8415: LD_VAR 0 8
8419: PUSH
8420: LD_INT 10
8422: MUL
8423: PLUS
8424: PUSH
8425: LD_INT 25
8427: PLUS
8428: PPUSH
8429: LD_INT 0
8431: PPUSH
8432: CALL_OW 109
// end ;
8436: GO 8329
8438: POP
8439: POP
// end ;
8440: GO 8043
8442: POP
8443: POP
// enable ( 20 ) ;
8444: LD_INT 20
8446: ENABLE_MARKED
// labs_in_use := [ ] ;
8447: LD_ADDR_EXP 47
8451: PUSH
8452: EMPTY
8453: ST_TO_ADDR
// if def_artefact_one then
8454: LD_EXP 1
8458: IFFALSE 8485
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
8460: LD_INT 4
8462: PPUSH
8463: LD_EXP 46
8467: PUSH
8468: LD_INT 1
8470: ARRAY
8471: PPUSH
8472: LD_INT 16
8474: PPUSH
8475: LD_INT 0
8477: PPUSH
8478: CALL_OW 59
// enable ( 5 ) ;
8482: LD_INT 5
8484: ENABLE_MARKED
// end ; if def_artefact_two then
8485: LD_EXP 2
8489: IFFALSE 8516
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
8491: LD_INT 4
8493: PPUSH
8494: LD_EXP 46
8498: PUSH
8499: LD_INT 2
8501: ARRAY
8502: PPUSH
8503: LD_INT 16
8505: PPUSH
8506: LD_INT 0
8508: PPUSH
8509: CALL_OW 59
// enable ( 6 ) ;
8513: LD_INT 6
8515: ENABLE_MARKED
// end ; if def_artefact_three then
8516: LD_EXP 3
8520: IFFALSE 8547
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
8522: LD_INT 4
8524: PPUSH
8525: LD_EXP 46
8529: PUSH
8530: LD_INT 3
8532: ARRAY
8533: PPUSH
8534: LD_INT 16
8536: PPUSH
8537: LD_INT 0
8539: PPUSH
8540: CALL_OW 59
// enable ( 7 ) ;
8544: LD_INT 7
8546: ENABLE_MARKED
// end ; end ;
8547: LD_VAR 0 6
8551: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
8552: LD_INT 0
8554: PPUSH
8555: PPUSH
// begin art := artefact_num [ size ] ;
8556: LD_ADDR_VAR 0 3
8560: PUSH
8561: LD_EXP 45
8565: PUSH
8566: LD_VAR 0 2
8570: ARRAY
8571: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8572: LD_ADDR_VAR 0 4
8576: PUSH
8577: LD_VAR 0 3
8581: PUSH
8582: LD_INT 1
8584: MINUS
8585: PUSH
8586: LD_INT 100
8588: MUL
8589: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
8590: LD_VAR 0 4
8594: PUSH
8595: LD_INT 9
8597: PLUS
8598: PPUSH
8599: LD_INT 0
8601: PPUSH
8602: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8606: LD_VAR 0 4
8610: PUSH
8611: LD_INT 13
8613: PLUS
8614: PPUSH
8615: LD_INT 0
8617: PPUSH
8618: CALL_OW 109
// Init_Lab ( art ) ;
8622: LD_VAR 0 3
8626: PPUSH
8627: CALL 10103 0 1
// end ;
8631: PPOPN 4
8633: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
8634: LD_INT 0
8636: PPUSH
8637: PPUSH
8638: PPUSH
// begin art := artefact_num [ size ] ;
8639: LD_ADDR_VAR 0 3
8643: PUSH
8644: LD_EXP 45
8648: PUSH
8649: LD_VAR 0 2
8653: ARRAY
8654: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8655: LD_ADDR_VAR 0 4
8659: PUSH
8660: LD_VAR 0 3
8664: PUSH
8665: LD_INT 1
8667: MINUS
8668: PUSH
8669: LD_INT 100
8671: MUL
8672: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
8673: LD_VAR 0 4
8677: PUSH
8678: LD_INT 9
8680: PLUS
8681: PPUSH
8682: LD_INT 1
8684: PPUSH
8685: CALL_OW 109
// SetTag ( base + 13 , un ) ;
8689: LD_VAR 0 4
8693: PUSH
8694: LD_INT 13
8696: PLUS
8697: PPUSH
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 109
// if GetTag ( base + 11 ) then
8707: LD_VAR 0 4
8711: PUSH
8712: LD_INT 11
8714: PLUS
8715: PPUSH
8716: CALL_OW 110
8720: IFFALSE 8883
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
8722: LD_ADDR_VAR 0 5
8726: PUSH
8727: LD_VAR 0 4
8731: PUSH
8732: LD_INT 11
8734: PLUS
8735: PPUSH
8736: CALL_OW 110
8740: PPUSH
8741: CALL_OW 255
8745: ST_TO_ADDR
// if GetTag ( base + 12 ) then
8746: LD_VAR 0 4
8750: PUSH
8751: LD_INT 12
8753: PLUS
8754: PPUSH
8755: CALL_OW 110
8759: IFFALSE 8827
// begin ComCancel ( GetTag ( base + 11 ) ) ;
8761: LD_VAR 0 4
8765: PUSH
8766: LD_INT 11
8768: PLUS
8769: PPUSH
8770: CALL_OW 110
8774: PPUSH
8775: CALL_OW 127
// wait ( 5 ) ;
8779: LD_INT 5
8781: PPUSH
8782: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
8786: LD_ADDR_EXP 47
8790: PUSH
8791: LD_EXP 47
8795: PUSH
8796: LD_VAR 0 4
8800: PUSH
8801: LD_INT 11
8803: PLUS
8804: PPUSH
8805: CALL_OW 110
8809: DIFF
8810: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
8811: LD_VAR 0 4
8815: PUSH
8816: LD_INT 12
8818: PLUS
8819: PPUSH
8820: LD_INT 0
8822: PPUSH
8823: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
8827: LD_VAR 0 4
8831: PUSH
8832: LD_VAR 0 5
8836: PUSH
8837: LD_INT 10
8839: MUL
8840: PLUS
8841: PUSH
8842: LD_INT 11
8844: PLUS
8845: PPUSH
8846: CALL_OW 110
8850: NOT
8851: IFFALSE 8867
// DeInit_Lab ( side , art ) ;
8853: LD_VAR 0 5
8857: PPUSH
8858: LD_VAR 0 3
8862: PPUSH
8863: CALL 10639 0 2
// SetTag ( base + 11 , 0 ) ;
8867: LD_VAR 0 4
8871: PUSH
8872: LD_INT 11
8874: PLUS
8875: PPUSH
8876: LD_INT 0
8878: PPUSH
8879: CALL_OW 109
// end ; end ;
8883: PPOPN 5
8885: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
8886: LD_INT 0
8888: PPUSH
8889: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8890: LD_ADDR_VAR 0 3
8894: PUSH
8895: LD_VAR 0 1
8899: PPUSH
8900: CALL_OW 255
8904: PUSH
8905: LD_INT 1
8907: MINUS
8908: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8909: LD_ADDR_VAR 0 2
8913: PUSH
8914: DOUBLE
8915: LD_INT 0
8917: DEC
8918: ST_TO_ADDR
8919: LD_EXP 44
8923: PUSH
8924: LD_INT 1
8926: MINUS
8927: PUSH
8928: FOR_TO
8929: IFFALSE 8971
// if lab = GetTag ( un * 100 + 11 ) then
8931: LD_VAR 0 1
8935: PUSH
8936: LD_VAR 0 2
8940: PUSH
8941: LD_INT 100
8943: MUL
8944: PUSH
8945: LD_INT 11
8947: PLUS
8948: PPUSH
8949: CALL_OW 110
8953: EQUAL
8954: IFFALSE 8969
// Init_Lab ( un + 1 ) ;
8956: LD_VAR 0 2
8960: PUSH
8961: LD_INT 1
8963: PLUS
8964: PPUSH
8965: CALL 10103 0 1
8969: GO 8928
8971: POP
8972: POP
// end ;
8973: PPOPN 3
8975: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
8976: LD_INT 0
8978: PPUSH
8979: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8980: LD_ADDR_VAR 0 4
8984: PUSH
8985: LD_VAR 0 1
8989: PPUSH
8990: CALL_OW 255
8994: PUSH
8995: LD_INT 1
8997: MINUS
8998: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8999: LD_ADDR_VAR 0 3
9003: PUSH
9004: DOUBLE
9005: LD_INT 0
9007: DEC
9008: ST_TO_ADDR
9009: LD_EXP 44
9013: PUSH
9014: LD_INT 1
9016: MINUS
9017: PUSH
9018: FOR_TO
9019: IFFALSE 9137
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
9021: LD_VAR 0 3
9025: PUSH
9026: LD_INT 100
9028: MUL
9029: PUSH
9030: LD_INT 11
9032: PLUS
9033: PPUSH
9034: CALL_OW 110
9038: PUSH
9039: LD_VAR 0 1
9043: EQUAL
9044: PUSH
9045: LD_VAR 0 3
9049: PUSH
9050: LD_INT 100
9052: MUL
9053: PUSH
9054: LD_INT 12
9056: PLUS
9057: PPUSH
9058: CALL_OW 110
9062: AND
9063: IFFALSE 9135
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
9065: LD_VAR 0 3
9069: PUSH
9070: LD_INT 100
9072: MUL
9073: PUSH
9074: LD_VAR 0 4
9078: PUSH
9079: LD_INT 10
9081: MUL
9082: PLUS
9083: PUSH
9084: LD_INT 22
9086: PLUS
9087: PPUSH
9088: LD_VAR 0 2
9092: PPUSH
9093: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
9097: LD_VAR 0 3
9101: PUSH
9102: LD_INT 100
9104: MUL
9105: PUSH
9106: LD_INT 12
9108: PLUS
9109: PPUSH
9110: LD_INT 0
9112: PPUSH
9113: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
9117: LD_ADDR_EXP 47
9121: PUSH
9122: LD_EXP 47
9126: PUSH
9127: LD_VAR 0 1
9131: DIFF
9132: ST_TO_ADDR
// break ;
9133: GO 9137
// end ;
9135: GO 9018
9137: POP
9138: POP
// Update_Artefact ( lab ) ;
9139: LD_VAR 0 1
9143: PPUSH
9144: CALL 10778 0 1
// end ;
9148: PPOPN 4
9150: END
// on SpecResearchComplete ( lab ) do var un , side ;
9151: LD_INT 0
9153: PPUSH
9154: PPUSH
// begin side := GetSide ( lab ) - 1 ;
9155: LD_ADDR_VAR 0 3
9159: PUSH
9160: LD_VAR 0 1
9164: PPUSH
9165: CALL_OW 255
9169: PUSH
9170: LD_INT 1
9172: MINUS
9173: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9174: LD_ADDR_VAR 0 2
9178: PUSH
9179: DOUBLE
9180: LD_INT 0
9182: DEC
9183: ST_TO_ADDR
9184: LD_EXP 44
9188: PUSH
9189: LD_INT 1
9191: MINUS
9192: PUSH
9193: FOR_TO
9194: IFFALSE 9340
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
9196: LD_VAR 0 2
9200: PUSH
9201: LD_INT 100
9203: MUL
9204: PUSH
9205: LD_INT 11
9207: PLUS
9208: PPUSH
9209: CALL_OW 110
9213: PUSH
9214: LD_VAR 0 1
9218: EQUAL
9219: PUSH
9220: LD_VAR 0 2
9224: PUSH
9225: LD_INT 100
9227: MUL
9228: PUSH
9229: LD_INT 12
9231: PLUS
9232: PPUSH
9233: CALL_OW 110
9237: AND
9238: IFFALSE 9338
// begin SetTag ( un * 100 + 12 , false ) ;
9240: LD_VAR 0 2
9244: PUSH
9245: LD_INT 100
9247: MUL
9248: PUSH
9249: LD_INT 12
9251: PLUS
9252: PPUSH
9253: LD_INT 0
9255: PPUSH
9256: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
9260: LD_VAR 0 2
9264: PUSH
9265: LD_INT 100
9267: MUL
9268: PUSH
9269: LD_VAR 0 3
9273: PUSH
9274: LD_INT 10
9276: MUL
9277: PLUS
9278: PUSH
9279: LD_INT 21
9281: PLUS
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
9290: LD_VAR 0 2
9294: PUSH
9295: LD_INT 100
9297: MUL
9298: PUSH
9299: LD_VAR 0 3
9303: PUSH
9304: LD_INT 10
9306: MUL
9307: PLUS
9308: PUSH
9309: LD_INT 25
9311: PLUS
9312: PPUSH
9313: LD_VAR 0 1
9317: PPUSH
9318: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
9322: LD_ADDR_EXP 47
9326: PUSH
9327: LD_EXP 47
9331: PUSH
9332: LD_VAR 0 1
9336: DIFF
9337: ST_TO_ADDR
// end ;
9338: GO 9193
9340: POP
9341: POP
// Update_Artefact ( lab ) ;
9342: LD_VAR 0 1
9346: PPUSH
9347: CALL 10778 0 1
// end ;
9351: PPOPN 3
9353: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
9354: LD_INT 0
9356: PPUSH
9357: PPUSH
9358: PPUSH
9359: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
9360: LD_ADDR_VAR 0 7
9364: PUSH
9365: LD_VAR 0 2
9369: PUSH
9370: LD_INT 1
9372: MINUS
9373: PUSH
9374: LD_INT 3
9376: MOD
9377: PUSH
9378: LD_INT 1
9380: PLUS
9381: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
9382: LD_ADDR_VAR 0 8
9386: PUSH
9387: LD_VAR 0 7
9391: PUSH
9392: LD_INT 1
9394: MINUS
9395: PUSH
9396: LD_INT 100
9398: MUL
9399: ST_TO_ADDR
// if number <= 3 then
9400: LD_VAR 0 2
9404: PUSH
9405: LD_INT 3
9407: LESSEQUAL
9408: IFFALSE 9640
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
9410: LD_VAR 0 8
9414: PUSH
9415: LD_INT 11
9417: PLUS
9418: PPUSH
9419: CALL_OW 110
9423: PPUSH
9424: LD_VAR 0 8
9428: PUSH
9429: LD_INT 5
9431: PLUS
9432: PPUSH
9433: CALL_OW 110
9437: PPUSH
9438: LD_INT 1
9440: PPUSH
9441: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
9445: LD_VAR 0 8
9449: PUSH
9450: LD_INT 11
9452: PLUS
9453: PPUSH
9454: CALL_OW 110
9458: PPUSH
9459: LD_VAR 0 8
9463: PUSH
9464: LD_VAR 0 1
9468: PUSH
9469: LD_INT 10
9471: MUL
9472: PLUS
9473: PUSH
9474: LD_INT 12
9476: PLUS
9477: PPUSH
9478: CALL_OW 110
9482: PPUSH
9483: CALL_OW 329
// SetTag ( base + 12 , true ) ;
9487: LD_VAR 0 8
9491: PUSH
9492: LD_INT 12
9494: PLUS
9495: PPUSH
9496: LD_INT 1
9498: PPUSH
9499: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
9503: LD_ADDR_EXP 47
9507: PUSH
9508: LD_EXP 47
9512: PUSH
9513: LD_VAR 0 8
9517: PUSH
9518: LD_INT 11
9520: PLUS
9521: PPUSH
9522: CALL_OW 110
9526: ADD
9527: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9528: LD_ADDR_VAR 0 5
9532: PUSH
9533: DOUBLE
9534: LD_INT 0
9536: DEC
9537: ST_TO_ADDR
9538: LD_EXP 44
9542: PUSH
9543: LD_INT 1
9545: MINUS
9546: PUSH
9547: FOR_TO
9548: IFFALSE 9636
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9550: LD_VAR 0 8
9554: PUSH
9555: LD_INT 11
9557: PLUS
9558: PPUSH
9559: CALL_OW 110
9563: PUSH
9564: LD_VAR 0 5
9568: PUSH
9569: LD_INT 100
9571: MUL
9572: PUSH
9573: LD_INT 11
9575: PLUS
9576: PPUSH
9577: CALL_OW 110
9581: PUSH
9582: LD_VAR 0 5
9586: PUSH
9587: LD_INT 100
9589: MUL
9590: PUSH
9591: LD_VAR 0 1
9595: PUSH
9596: LD_INT 10
9598: MUL
9599: PLUS
9600: PUSH
9601: LD_INT 15
9603: PLUS
9604: PPUSH
9605: CALL_OW 110
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: IN
9614: IFFALSE 9634
// DeInit_Lab ( side , un + 1 ) ;
9616: LD_VAR 0 1
9620: PPUSH
9621: LD_VAR 0 5
9625: PUSH
9626: LD_INT 1
9628: PLUS
9629: PPUSH
9630: CALL 10639 0 2
9634: GO 9547
9636: POP
9637: POP
// end else
9638: GO 9814
// begin succes := false ;
9640: LD_ADDR_VAR 0 6
9644: PUSH
9645: LD_INT 0
9647: ST_TO_ADDR
// case art of 1 :
9648: LD_VAR 0 7
9652: PUSH
9653: LD_INT 1
9655: DOUBLE
9656: EQUAL
9657: IFTRUE 9661
9659: GO 9689
9661: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
9662: LD_ADDR_VAR 0 6
9666: PUSH
9667: LD_VAR 0 1
9671: PPUSH
9672: LD_VAR 0 3
9676: PPUSH
9677: LD_VAR 0 4
9681: PPUSH
9682: CALL 11211 0 3
9686: ST_TO_ADDR
9687: GO 9757
9689: LD_INT 2
9691: DOUBLE
9692: EQUAL
9693: IFTRUE 9697
9695: GO 9720
9697: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
9698: LD_ADDR_VAR 0 6
9702: PUSH
9703: LD_VAR 0 1
9707: PPUSH
9708: LD_VAR 0 3
9712: PPUSH
9713: CALL 11449 0 2
9717: ST_TO_ADDR
9718: GO 9757
9720: LD_INT 3
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 9756
9728: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
9729: LD_ADDR_VAR 0 6
9733: PUSH
9734: LD_VAR 0 1
9738: PPUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: LD_VAR 0 4
9748: PPUSH
9749: CALL 11845 0 3
9753: ST_TO_ADDR
9754: GO 9757
9756: POP
// if succes then
9757: LD_VAR 0 6
9761: IFFALSE 9814
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
9763: LD_VAR 0 8
9767: PUSH
9768: LD_VAR 0 1
9772: PUSH
9773: LD_INT 10
9775: MUL
9776: PLUS
9777: PUSH
9778: LD_INT 13
9780: PLUS
9781: PPUSH
9782: LD_VAR 0 8
9786: PUSH
9787: LD_INT 7
9789: PLUS
9790: PPUSH
9791: CALL_OW 110
9795: PPUSH
9796: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
9800: LD_VAR 0 1
9804: PPUSH
9805: LD_VAR 0 7
9809: PPUSH
9810: CALL 9817 0 2
// end ; end ; end ;
9814: PPOPN 8
9816: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
9817: LD_INT 0
9819: PPUSH
9820: PPUSH
9821: PPUSH
// base := ( art - 1 ) * 100 ;
9822: LD_ADDR_VAR 0 4
9826: PUSH
9827: LD_VAR 0 2
9831: PUSH
9832: LD_INT 1
9834: MINUS
9835: PUSH
9836: LD_INT 100
9838: MUL
9839: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9840: LD_ADDR_VAR 0 5
9844: PUSH
9845: LD_VAR 0 4
9849: PUSH
9850: LD_VAR 0 1
9854: PUSH
9855: LD_INT 10
9857: MUL
9858: PLUS
9859: PUSH
9860: LD_INT 15
9862: PLUS
9863: PPUSH
9864: CALL_OW 110
9868: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
9869: LD_VAR 0 5
9873: PUSH
9874: LD_VAR 0 5
9878: PUSH
9879: LD_EXP 47
9883: IN
9884: NOT
9885: AND
9886: IFFALSE 9944
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
9888: LD_VAR 0 1
9892: PPUSH
9893: LD_VAR 0 4
9897: PUSH
9898: LD_INT 1
9900: PLUS
9901: PUSH
9902: LD_VAR 0 4
9906: PUSH
9907: LD_VAR 0 1
9911: PUSH
9912: LD_INT 10
9914: MUL
9915: PLUS
9916: PUSH
9917: LD_INT 11
9919: PLUS
9920: PPUSH
9921: CALL_OW 110
9925: PLUS
9926: PPUSH
9927: CALL_OW 110
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: LD_VAR 0 5
9939: PPUSH
9940: CALL_OW 468
// end ;
9944: LD_VAR 0 3
9948: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
9949: LD_INT 0
9951: PPUSH
9952: PPUSH
9953: PPUSH
// base := ( art - 1 ) * 100 ;
9954: LD_ADDR_VAR 0 4
9958: PUSH
9959: LD_VAR 0 2
9963: PUSH
9964: LD_INT 1
9966: MINUS
9967: PUSH
9968: LD_INT 100
9970: MUL
9971: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9972: LD_ADDR_VAR 0 5
9976: PUSH
9977: LD_VAR 0 4
9981: PUSH
9982: LD_VAR 0 1
9986: PUSH
9987: LD_INT 10
9989: MUL
9990: PLUS
9991: PUSH
9992: LD_INT 15
9994: PLUS
9995: PPUSH
9996: CALL_OW 110
10000: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
10001: LD_VAR 0 5
10005: PUSH
10006: LD_VAR 0 5
10010: PUSH
10011: LD_EXP 47
10015: IN
10016: NOT
10017: AND
10018: PUSH
10019: LD_VAR 0 5
10023: PPUSH
10024: CALL_OW 313
10028: AND
10029: IFFALSE 10098
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
10031: LD_VAR 0 1
10035: PPUSH
10036: LD_VAR 0 4
10040: PUSH
10041: LD_INT 1
10043: PLUS
10044: PUSH
10045: LD_VAR 0 4
10049: PUSH
10050: LD_VAR 0 1
10054: PUSH
10055: LD_INT 10
10057: MUL
10058: PLUS
10059: PUSH
10060: LD_INT 11
10062: PLUS
10063: PPUSH
10064: CALL_OW 110
10068: PLUS
10069: PPUSH
10070: CALL_OW 110
10074: PPUSH
10075: LD_VAR 0 4
10079: PUSH
10080: LD_INT 3
10082: PLUS
10083: PPUSH
10084: CALL_OW 110
10088: PPUSH
10089: LD_VAR 0 5
10093: PPUSH
10094: CALL_OW 468
// end ;
10098: LD_VAR 0 3
10102: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
10103: LD_INT 0
10105: PPUSH
10106: PPUSH
10107: PPUSH
10108: PPUSH
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
10113: LD_ADDR_VAR 0 8
10117: PUSH
10118: LD_EXP 46
10122: PUSH
10123: LD_VAR 0 1
10127: ARRAY
10128: PPUSH
10129: CALL_OW 469
10133: ST_TO_ADDR
// if not art_hex then
10134: LD_VAR 0 8
10138: NOT
10139: IFFALSE 10143
// exit ;
10141: GO 10634
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
10143: LD_ADDR_VAR 0 3
10147: PUSH
10148: LD_INT 2
10150: PUSH
10151: LD_INT 30
10153: PUSH
10154: LD_INT 6
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 30
10163: PUSH
10164: LD_INT 7
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 30
10173: PUSH
10174: LD_INT 8
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: PUSH
10187: EMPTY
10188: LIST
10189: PPUSH
10190: CALL_OW 69
10194: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
10195: LD_ADDR_VAR 0 9
10199: PUSH
10200: LD_VAR 0 3
10204: PPUSH
10205: LD_VAR 0 8
10209: PUSH
10210: LD_INT 1
10212: ARRAY
10213: PPUSH
10214: LD_VAR 0 8
10218: PUSH
10219: LD_INT 2
10221: ARRAY
10222: PPUSH
10223: CALL_OW 73
10227: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
10228: LD_ADDR_VAR 0 6
10232: PUSH
10233: LD_VAR 0 9
10237: PPUSH
10238: LD_VAR 0 8
10242: PUSH
10243: LD_INT 1
10245: ARRAY
10246: PPUSH
10247: LD_VAR 0 8
10251: PUSH
10252: LD_INT 2
10254: ARRAY
10255: PPUSH
10256: CALL_OW 297
10260: ST_TO_ADDR
// if dist < 9 then
10261: LD_VAR 0 6
10265: PUSH
10266: LD_INT 9
10268: LESS
10269: IFFALSE 10634
// begin side := GetSide ( nearest_lab ) ;
10271: LD_ADDR_VAR 0 4
10275: PUSH
10276: LD_VAR 0 9
10280: PPUSH
10281: CALL_OW 255
10285: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
10286: LD_VAR 0 4
10290: PPUSH
10291: LD_VAR 0 1
10295: PPUSH
10296: CALL 10639 0 2
// base := ( art - 1 ) * 100 ;
10300: LD_ADDR_VAR 0 5
10304: PUSH
10305: LD_VAR 0 1
10309: PUSH
10310: LD_INT 1
10312: MINUS
10313: PUSH
10314: LD_INT 100
10316: MUL
10317: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
10318: LD_INT 24
10320: PPUSH
10321: LD_VAR 0 4
10325: PPUSH
10326: CALL_OW 321
10330: PUSH
10331: LD_INT 2
10333: EQUAL
10334: PUSH
10335: LD_VAR 0 9
10339: PPUSH
10340: CALL_OW 313
10344: AND
10345: IFFALSE 10537
// begin if GetTag ( base + side * 10 + 11 ) then
10347: LD_VAR 0 5
10351: PUSH
10352: LD_VAR 0 4
10356: PUSH
10357: LD_INT 10
10359: MUL
10360: PLUS
10361: PUSH
10362: LD_INT 11
10364: PLUS
10365: PPUSH
10366: CALL_OW 110
10370: IFFALSE 10527
// begin if not GetTag ( base + side * 10 + 13 ) then
10372: LD_VAR 0 5
10376: PUSH
10377: LD_VAR 0 4
10381: PUSH
10382: LD_INT 10
10384: MUL
10385: PLUS
10386: PUSH
10387: LD_INT 13
10389: PLUS
10390: PPUSH
10391: CALL_OW 110
10395: NOT
10396: IFFALSE 10419
// state := GetTag ( base + 03 ) else
10398: LD_ADDR_VAR 0 7
10402: PUSH
10403: LD_VAR 0 5
10407: PUSH
10408: LD_INT 3
10410: PLUS
10411: PPUSH
10412: CALL_OW 110
10416: ST_TO_ADDR
10417: GO 10427
// state := art_gray ;
10419: LD_ADDR_VAR 0 7
10423: PUSH
10424: LD_INT 1
10426: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
10427: LD_VAR 0 5
10431: PUSH
10432: LD_VAR 0 4
10436: PUSH
10437: LD_INT 10
10439: MUL
10440: PLUS
10441: PUSH
10442: LD_INT 15
10444: PLUS
10445: PPUSH
10446: CALL_OW 110
10450: PUSH
10451: LD_VAR 0 5
10455: PUSH
10456: LD_VAR 0 4
10460: PUSH
10461: LD_INT 10
10463: MUL
10464: PLUS
10465: PUSH
10466: LD_INT 15
10468: PLUS
10469: PPUSH
10470: CALL_OW 110
10474: PUSH
10475: LD_VAR 0 9
10479: NONEQUAL
10480: AND
10481: IFFALSE 10497
// DeInit_Lab ( side , art ) ;
10483: LD_VAR 0 4
10487: PPUSH
10488: LD_VAR 0 1
10492: PPUSH
10493: CALL 10639 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
10497: LD_VAR 0 5
10501: PUSH
10502: LD_VAR 0 4
10506: PUSH
10507: LD_INT 10
10509: MUL
10510: PLUS
10511: PUSH
10512: LD_INT 15
10514: PLUS
10515: PPUSH
10516: LD_VAR 0 9
10520: PPUSH
10521: CALL_OW 109
// end else
10525: GO 10535
// state := art_instant ;
10527: LD_ADDR_VAR 0 7
10531: PUSH
10532: LD_INT 2
10534: ST_TO_ADDR
// end else
10535: GO 10545
// state := art_gray ;
10537: LD_ADDR_VAR 0 7
10541: PUSH
10542: LD_INT 1
10544: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
10545: LD_VAR 0 5
10549: PUSH
10550: LD_INT 11
10552: PLUS
10553: PPUSH
10554: LD_VAR 0 9
10558: PPUSH
10559: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
10563: LD_VAR 0 9
10567: PUSH
10568: LD_EXP 47
10572: IN
10573: NOT
10574: IFFALSE 10634
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
10576: LD_VAR 0 4
10580: PPUSH
10581: LD_VAR 0 5
10585: PUSH
10586: LD_INT 1
10588: PLUS
10589: PUSH
10590: LD_VAR 0 5
10594: PUSH
10595: LD_VAR 0 4
10599: PUSH
10600: LD_INT 10
10602: MUL
10603: PLUS
10604: PUSH
10605: LD_INT 11
10607: PLUS
10608: PPUSH
10609: CALL_OW 110
10613: PLUS
10614: PPUSH
10615: CALL_OW 110
10619: PPUSH
10620: LD_VAR 0 7
10624: PPUSH
10625: LD_VAR 0 9
10629: PPUSH
10630: CALL_OW 468
// end ; end ;
10634: LD_VAR 0 2
10638: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
10639: LD_INT 0
10641: PPUSH
10642: PPUSH
10643: PPUSH
// base := ( art - 1 ) * 100 ;
10644: LD_ADDR_VAR 0 4
10648: PUSH
10649: LD_VAR 0 2
10653: PUSH
10654: LD_INT 1
10656: MINUS
10657: PUSH
10658: LD_INT 100
10660: MUL
10661: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
10662: LD_ADDR_VAR 0 5
10666: PUSH
10667: LD_VAR 0 4
10671: PUSH
10672: LD_VAR 0 1
10676: PUSH
10677: LD_INT 10
10679: MUL
10680: PLUS
10681: PUSH
10682: LD_INT 15
10684: PLUS
10685: PPUSH
10686: CALL_OW 110
10690: ST_TO_ADDR
// if not lab then
10691: LD_VAR 0 5
10695: NOT
10696: IFFALSE 10717
// lab := GetTag ( base + 11 ) ;
10698: LD_ADDR_VAR 0 5
10702: PUSH
10703: LD_VAR 0 4
10707: PUSH
10708: LD_INT 11
10710: PLUS
10711: PPUSH
10712: CALL_OW 110
10716: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
10717: LD_VAR 0 1
10721: PPUSH
10722: LD_VAR 0 4
10726: PUSH
10727: LD_INT 1
10729: PLUS
10730: PUSH
10731: LD_VAR 0 4
10735: PUSH
10736: LD_VAR 0 1
10740: PUSH
10741: LD_INT 10
10743: MUL
10744: PLUS
10745: PUSH
10746: LD_INT 11
10748: PLUS
10749: PPUSH
10750: CALL_OW 110
10754: PLUS
10755: PPUSH
10756: CALL_OW 110
10760: PPUSH
10761: LD_INT 0
10763: PPUSH
10764: LD_VAR 0 5
10768: PPUSH
10769: CALL_OW 468
// end ;
10773: LD_VAR 0 3
10777: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
10778: LD_INT 0
10780: PPUSH
10781: PPUSH
10782: PPUSH
10783: PPUSH
// side := GetSide ( lab ) ;
10784: LD_ADDR_VAR 0 4
10788: PUSH
10789: LD_VAR 0 1
10793: PPUSH
10794: CALL_OW 255
10798: ST_TO_ADDR
// for art = 1 to artefact_number do
10799: LD_ADDR_VAR 0 3
10803: PUSH
10804: DOUBLE
10805: LD_INT 1
10807: DEC
10808: ST_TO_ADDR
10809: LD_EXP 44
10813: PUSH
10814: FOR_TO
10815: IFFALSE 10971
// begin base := ( art - 1 ) * 100 ;
10817: LD_ADDR_VAR 0 5
10821: PUSH
10822: LD_VAR 0 3
10826: PUSH
10827: LD_INT 1
10829: MINUS
10830: PUSH
10831: LD_INT 100
10833: MUL
10834: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
10835: LD_VAR 0 5
10839: PUSH
10840: LD_INT 11
10842: PLUS
10843: PPUSH
10844: CALL_OW 110
10848: PUSH
10849: LD_VAR 0 1
10853: EQUAL
10854: IFFALSE 10867
// Init_Lab ( art ) else
10856: LD_VAR 0 3
10860: PPUSH
10861: CALL 10103 0 1
10865: GO 10969
// begin if lab = GetTag ( base + side * 10 + 15 ) then
10867: LD_VAR 0 1
10871: PUSH
10872: LD_VAR 0 5
10876: PUSH
10877: LD_VAR 0 4
10881: PUSH
10882: LD_INT 10
10884: MUL
10885: PLUS
10886: PUSH
10887: LD_INT 15
10889: PLUS
10890: PPUSH
10891: CALL_OW 110
10895: EQUAL
10896: IFFALSE 10969
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
10898: LD_VAR 0 5
10902: PUSH
10903: LD_VAR 0 4
10907: PUSH
10908: LD_INT 10
10910: MUL
10911: PLUS
10912: PUSH
10913: LD_INT 13
10915: PLUS
10916: PPUSH
10917: CALL_OW 110
10921: PUSH
10922: LD_INT 0
10924: GREATER
10925: PUSH
10926: LD_VAR 0 1
10930: PPUSH
10931: CALL_OW 313
10935: NOT
10936: OR
10937: IFFALSE 10955
// Shadow_Artefact ( side , art ) else
10939: LD_VAR 0 4
10943: PPUSH
10944: LD_VAR 0 3
10948: PPUSH
10949: CALL 9817 0 2
10953: GO 10969
// Highlight_Artefact ( side , art ) ;
10955: LD_VAR 0 4
10959: PPUSH
10960: LD_VAR 0 3
10964: PPUSH
10965: CALL 9949 0 2
// end ; end ; end ;
10969: GO 10814
10971: POP
10972: POP
// end ; end_of_file
10973: LD_VAR 0 2
10977: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
10978: LD_INT 10
10980: PPUSH
10981: CALL_OW 67
// if not IsBusy ( lab ) then
10985: LD_VAR 0 2
10989: PPUSH
10990: CALL_OW 315
10994: NOT
10995: IFFALSE 11022
// begin labs_in_use := labs_in_use diff lab ;
10997: LD_ADDR_EXP 47
11001: PUSH
11002: LD_EXP 47
11006: PUSH
11007: LD_VAR 0 2
11011: DIFF
11012: ST_TO_ADDR
// Update_Artefact ( lab ) ;
11013: LD_VAR 0 2
11017: PPUSH
11018: CALL 10778 0 1
// end ; end ;
11022: PPOPN 2
11024: END
// on ResearchStarted ( tech , lab ) do var un , side ;
11025: LD_INT 0
11027: PPUSH
11028: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
11029: LD_ADDR_EXP 47
11033: PUSH
11034: LD_EXP 47
11038: PUSH
11039: LD_VAR 0 2
11043: ADD
11044: ST_TO_ADDR
// side := GetSide ( lab ) ;
11045: LD_ADDR_VAR 0 4
11049: PUSH
11050: LD_VAR 0 2
11054: PPUSH
11055: CALL_OW 255
11059: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
11060: LD_ADDR_VAR 0 3
11064: PUSH
11065: DOUBLE
11066: LD_INT 0
11068: DEC
11069: ST_TO_ADDR
11070: LD_EXP 44
11074: PUSH
11075: LD_INT 1
11077: MINUS
11078: PUSH
11079: FOR_TO
11080: IFFALSE 11159
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
11082: LD_VAR 0 2
11086: PUSH
11087: LD_VAR 0 3
11091: PUSH
11092: LD_INT 100
11094: MUL
11095: PUSH
11096: LD_INT 11
11098: PLUS
11099: PPUSH
11100: CALL_OW 110
11104: PUSH
11105: LD_VAR 0 3
11109: PUSH
11110: LD_INT 100
11112: MUL
11113: PUSH
11114: LD_VAR 0 4
11118: PUSH
11119: LD_INT 10
11121: MUL
11122: PLUS
11123: PUSH
11124: LD_INT 15
11126: PLUS
11127: PPUSH
11128: CALL_OW 110
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: IN
11137: IFFALSE 11157
// DeInit_Lab ( side , un + 1 ) ;
11139: LD_VAR 0 4
11143: PPUSH
11144: LD_VAR 0 3
11148: PUSH
11149: LD_INT 1
11151: PLUS
11152: PPUSH
11153: CALL 10639 0 2
11157: GO 11079
11159: POP
11160: POP
// end ;
11161: PPOPN 4
11163: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
11164: LD_INT 10
11166: PPUSH
11167: CALL_OW 67
// if not IsBusy ( lab ) then
11171: LD_VAR 0 2
11175: PPUSH
11176: CALL_OW 315
11180: NOT
11181: IFFALSE 11208
// begin labs_in_use := labs_in_use diff lab ;
11183: LD_ADDR_EXP 47
11187: PUSH
11188: LD_EXP 47
11192: PUSH
11193: LD_VAR 0 2
11197: DIFF
11198: ST_TO_ADDR
// Update_Artefact ( lab ) ;
11199: LD_VAR 0 2
11203: PPUSH
11204: CALL 10778 0 1
// end ; end ; end_of_file
11208: PPOPN 2
11210: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
11211: LD_INT 0
11213: PPUSH
11214: PPUSH
11215: PPUSH
// vysledek := true ;
11216: LD_ADDR_VAR 0 5
11220: PUSH
11221: LD_INT 1
11223: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
11224: LD_ADDR_VAR 0 6
11228: PUSH
11229: LD_VAR 0 1
11233: PUSH
11234: LD_INT 10
11236: MUL
11237: PUSH
11238: LD_INT 15
11240: PLUS
11241: PPUSH
11242: CALL_OW 110
11246: PPUSH
11247: CALL_OW 274
11251: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
11252: LD_VAR 0 6
11256: PUSH
11257: LD_VAR 0 6
11261: PPUSH
11262: CALL_OW 279
11266: PUSH
11267: LD_INT 3
11269: ARRAY
11270: PUSH
11271: LD_INT 6
11273: PPUSH
11274: CALL_OW 110
11278: GREATEREQUAL
11279: AND
11280: IFFALSE 11370
// begin PlaceSeeing ( x , y , side , - 15 ) ;
11282: LD_VAR 0 2
11286: PPUSH
11287: LD_VAR 0 3
11291: PPUSH
11292: LD_VAR 0 1
11296: PPUSH
11297: LD_INT 15
11299: NEG
11300: PPUSH
11301: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
11305: LD_VAR 0 6
11309: PPUSH
11310: LD_INT 3
11312: PPUSH
11313: LD_VAR 0 6
11317: PPUSH
11318: CALL_OW 279
11322: PUSH
11323: LD_INT 3
11325: ARRAY
11326: PUSH
11327: LD_INT 6
11329: PPUSH
11330: CALL_OW 110
11334: MINUS
11335: PPUSH
11336: CALL_OW 277
// view_data := [ x , y , side ] ;
11340: LD_ADDR_LOC 12
11344: PUSH
11345: LD_VAR 0 2
11349: PUSH
11350: LD_VAR 0 3
11354: PUSH
11355: LD_VAR 0 1
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: ST_TO_ADDR
// enable ( 1 ) ;
11365: LD_INT 1
11367: ENABLE_MARKED
// end else
11368: GO 11378
// vysledek := false ;
11370: LD_ADDR_VAR 0 5
11374: PUSH
11375: LD_INT 0
11377: ST_TO_ADDR
// result := vysledek ;
11378: LD_ADDR_VAR 0 4
11382: PUSH
11383: LD_VAR 0 5
11387: ST_TO_ADDR
// end ;
11388: LD_VAR 0 4
11392: RET
// every 0 0$2 trigger view_data marked 1 do
11393: LD_LOC 12
11397: IFFALSE 11448
11399: GO 11401
11401: DISABLE
// begin wait ( 0 0$30 ) ;
11402: LD_INT 1050
11404: PPUSH
11405: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
11409: LD_LOC 12
11413: PUSH
11414: LD_INT 1
11416: ARRAY
11417: PPUSH
11418: LD_LOC 12
11422: PUSH
11423: LD_INT 2
11425: ARRAY
11426: PPUSH
11427: LD_LOC 12
11431: PUSH
11432: LD_INT 3
11434: ARRAY
11435: PPUSH
11436: CALL_OW 331
// view_data := 0 ;
11440: LD_ADDR_LOC 12
11444: PUSH
11445: LD_INT 0
11447: ST_TO_ADDR
// end ;
11448: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
11449: LD_INT 0
11451: PPUSH
11452: PPUSH
11453: PPUSH
11454: PPUSH
11455: PPUSH
11456: PPUSH
11457: PPUSH
11458: PPUSH
// vysledek := true ;
11459: LD_ADDR_VAR 0 4
11463: PUSH
11464: LD_INT 1
11466: ST_TO_ADDR
// it_can := false ;
11467: LD_ADDR_VAR 0 8
11471: PUSH
11472: LD_INT 0
11474: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
11475: LD_ADDR_VAR 0 9
11479: PUSH
11480: LD_INT 30
11482: PUSH
11483: LD_INT 28
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
11490: LD_ADDR_VAR 0 10
11494: PUSH
11495: LD_INT 8
11497: PUSH
11498: LD_INT 48
11500: PUSH
11501: LD_INT 29
11503: PUSH
11504: LD_INT 49
11506: PUSH
11507: LD_INT 10
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
11517: LD_ADDR_VAR 0 7
11521: PUSH
11522: LD_VAR 0 2
11526: PPUSH
11527: CALL_OW 247
11531: PUSH
11532: LD_INT 3
11534: EQUAL
11535: PUSH
11536: LD_VAR 0 2
11540: PPUSH
11541: CALL_OW 266
11545: PUSH
11546: LD_VAR 0 9
11550: IN
11551: PUSH
11552: LD_VAR 0 2
11556: PPUSH
11557: CALL_OW 269
11561: PUSH
11562: LD_VAR 0 10
11566: IN
11567: OR
11568: AND
11569: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
11570: LD_ADDR_VAR 0 6
11574: PUSH
11575: LD_VAR 0 2
11579: PPUSH
11580: CALL_OW 247
11584: PUSH
11585: LD_INT 2
11587: EQUAL
11588: PUSH
11589: LD_VAR 0 2
11593: PPUSH
11594: CALL_OW 264
11598: PUSH
11599: LD_VAR 0 10
11603: IN
11604: PUSH
11605: LD_VAR 0 2
11609: PPUSH
11610: CALL_OW 262
11614: PUSH
11615: LD_INT 3
11617: EQUAL
11618: OR
11619: AND
11620: ST_TO_ADDR
// case def_artefact_two of 1 :
11621: LD_EXP 2
11625: PUSH
11626: LD_INT 1
11628: DOUBLE
11629: EQUAL
11630: IFTRUE 11634
11632: GO 11651
11634: POP
// if b_can then
11635: LD_VAR 0 7
11639: IFFALSE 11649
// it_can := true ; 2 :
11641: LD_ADDR_VAR 0 8
11645: PUSH
11646: LD_INT 1
11648: ST_TO_ADDR
11649: GO 11708
11651: LD_INT 2
11653: DOUBLE
11654: EQUAL
11655: IFTRUE 11659
11657: GO 11676
11659: POP
// if v_can then
11660: LD_VAR 0 6
11664: IFFALSE 11674
// it_can := true ; 3 :
11666: LD_ADDR_VAR 0 8
11670: PUSH
11671: LD_INT 1
11673: ST_TO_ADDR
11674: GO 11708
11676: LD_INT 3
11678: DOUBLE
11679: EQUAL
11680: IFTRUE 11684
11682: GO 11707
11684: POP
// if b_can or v_can then
11685: LD_VAR 0 7
11689: PUSH
11690: LD_VAR 0 6
11694: OR
11695: IFFALSE 11705
// it_can := true ; end ;
11697: LD_ADDR_VAR 0 8
11701: PUSH
11702: LD_INT 1
11704: ST_TO_ADDR
11705: GO 11708
11707: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
11708: LD_ADDR_VAR 0 5
11712: PUSH
11713: LD_INT 100
11715: PUSH
11716: LD_VAR 0 1
11720: PUSH
11721: LD_INT 10
11723: MUL
11724: PLUS
11725: PUSH
11726: LD_INT 15
11728: PLUS
11729: PPUSH
11730: CALL_OW 110
11734: PPUSH
11735: CALL_OW 274
11739: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
11740: LD_VAR 0 5
11744: PUSH
11745: LD_VAR 0 8
11749: AND
11750: PUSH
11751: LD_VAR 0 5
11755: PPUSH
11756: CALL_OW 279
11760: PUSH
11761: LD_INT 3
11763: ARRAY
11764: PUSH
11765: LD_INT 106
11767: PPUSH
11768: CALL_OW 110
11772: GREATEREQUAL
11773: AND
11774: IFFALSE 11822
// begin KillUnit ( un ) ;
11776: LD_VAR 0 2
11780: PPUSH
11781: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
11785: LD_VAR 0 5
11789: PPUSH
11790: LD_INT 3
11792: PPUSH
11793: LD_VAR 0 5
11797: PPUSH
11798: CALL_OW 279
11802: PUSH
11803: LD_INT 3
11805: ARRAY
11806: PUSH
11807: LD_INT 106
11809: PPUSH
11810: CALL_OW 110
11814: MINUS
11815: PPUSH
11816: CALL_OW 277
// end else
11820: GO 11830
// vysledek := false ;
11822: LD_ADDR_VAR 0 4
11826: PUSH
11827: LD_INT 0
11829: ST_TO_ADDR
// result := vysledek ;
11830: LD_ADDR_VAR 0 3
11834: PUSH
11835: LD_VAR 0 4
11839: ST_TO_ADDR
// end ;
11840: LD_VAR 0 3
11844: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
11845: LD_INT 0
11847: PPUSH
11848: PPUSH
11849: PPUSH
11850: PPUSH
// vysledek := true ;
11851: LD_ADDR_VAR 0 5
11855: PUSH
11856: LD_INT 1
11858: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
11859: LD_ADDR_VAR 0 7
11863: PUSH
11864: LD_INT 200
11866: PUSH
11867: LD_VAR 0 1
11871: PUSH
11872: LD_INT 10
11874: MUL
11875: PLUS
11876: PUSH
11877: LD_INT 15
11879: PLUS
11880: PPUSH
11881: CALL_OW 110
11885: PPUSH
11886: CALL_OW 274
11890: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
11891: LD_VAR 0 7
11895: PUSH
11896: LD_VAR 0 7
11900: PPUSH
11901: CALL_OW 279
11905: PUSH
11906: LD_INT 3
11908: ARRAY
11909: PUSH
11910: LD_INT 206
11912: PPUSH
11913: CALL_OW 110
11917: GREATEREQUAL
11918: AND
11919: IFFALSE 11975
// begin ArtContamination ( p1 , p2 , 15 ) ;
11921: LD_VAR 0 2
11925: PPUSH
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_INT 15
11933: PPUSH
11934: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
11938: LD_VAR 0 7
11942: PPUSH
11943: LD_INT 3
11945: PPUSH
11946: LD_VAR 0 7
11950: PPUSH
11951: CALL_OW 279
11955: PUSH
11956: LD_INT 3
11958: ARRAY
11959: PUSH
11960: LD_INT 206
11962: PPUSH
11963: CALL_OW 110
11967: MINUS
11968: PPUSH
11969: CALL_OW 277
// end else
11973: GO 11983
// vysledek := false ;
11975: LD_ADDR_VAR 0 5
11979: PUSH
11980: LD_INT 0
11982: ST_TO_ADDR
// result := vysledek ;
11983: LD_ADDR_VAR 0 4
11987: PUSH
11988: LD_VAR 0 5
11992: ST_TO_ADDR
// end ;
11993: LD_VAR 0 4
11997: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
11998: GO 12000
12000: DISABLE
12001: LD_INT 0
12003: PPUSH
12004: PPUSH
12005: PPUSH
// begin for art = 0 to artefact_number do
12006: LD_ADDR_VAR 0 1
12010: PUSH
12011: DOUBLE
12012: LD_INT 0
12014: DEC
12015: ST_TO_ADDR
12016: LD_EXP 44
12020: PUSH
12021: FOR_TO
12022: IFFALSE 12156
// for side = 1 to Side_Positions do
12024: LD_ADDR_VAR 0 2
12028: PUSH
12029: DOUBLE
12030: LD_INT 1
12032: DEC
12033: ST_TO_ADDR
12034: LD_EXP 24
12038: PUSH
12039: FOR_TO
12040: IFFALSE 12152
// begin recharge := art * 100 + side * 10 + 13 ;
12042: LD_ADDR_VAR 0 3
12046: PUSH
12047: LD_VAR 0 1
12051: PUSH
12052: LD_INT 100
12054: MUL
12055: PUSH
12056: LD_VAR 0 2
12060: PUSH
12061: LD_INT 10
12063: MUL
12064: PLUS
12065: PUSH
12066: LD_INT 13
12068: PLUS
12069: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
12070: LD_EXP 24
12074: PUSH
12075: LD_VAR 0 2
12079: ARRAY
12080: PUSH
12081: LD_VAR 0 3
12085: PPUSH
12086: CALL_OW 110
12090: PUSH
12091: LD_INT 0
12093: GREATER
12094: AND
12095: IFFALSE 12150
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
12097: LD_VAR 0 3
12101: PPUSH
12102: LD_VAR 0 3
12106: PPUSH
12107: CALL_OW 110
12111: PUSH
12112: LD_INT 1
12114: MINUS
12115: PPUSH
12116: CALL_OW 109
// if not GetTag ( recharge ) then
12120: LD_VAR 0 3
12124: PPUSH
12125: CALL_OW 110
12129: NOT
12130: IFFALSE 12150
// Highlight_Artefact ( side , art + 1 ) ;
12132: LD_VAR 0 2
12136: PPUSH
12137: LD_VAR 0 1
12141: PUSH
12142: LD_INT 1
12144: PLUS
12145: PPUSH
12146: CALL 9949 0 2
// end ; end ;
12150: GO 12039
12152: POP
12153: POP
12154: GO 12021
12156: POP
12157: POP
// enable ;
12158: ENABLE
// end ; end_of_file
12159: PPOPN 3
12161: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
12162: LD_INT 0
12164: PPUSH
12165: PPUSH
12166: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
12167: LD_INT 18
12169: PPUSH
12170: LD_VAR 0 1
12174: PUSH
12175: LD_INT 1
12177: ARRAY
12178: PPUSH
12179: LD_VAR 0 1
12183: PUSH
12184: LD_INT 2
12186: ARRAY
12187: PPUSH
12188: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12192: LD_VAR 0 1
12196: PUSH
12197: LD_INT 1
12199: ARRAY
12200: PPUSH
12201: LD_VAR 0 1
12205: PUSH
12206: LD_INT 2
12208: ARRAY
12209: PPUSH
12210: CALL_OW 494
// Wait ( 30 ) ;
12214: LD_INT 30
12216: PPUSH
12217: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
12221: LD_INT 18
12223: PPUSH
12224: LD_INT 4
12226: PPUSH
12227: CALL_OW 286
// base := ( art - 1 ) * 100 ;
12231: LD_ADDR_VAR 0 4
12235: PUSH
12236: LD_VAR 0 2
12240: PUSH
12241: LD_INT 1
12243: MINUS
12244: PUSH
12245: LD_INT 100
12247: MUL
12248: ST_TO_ADDR
// if GetTag ( base + 11 ) then
12249: LD_VAR 0 4
12253: PUSH
12254: LD_INT 11
12256: PLUS
12257: PPUSH
12258: CALL_OW 110
12262: IFFALSE 12400
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
12264: LD_ADDR_VAR 0 5
12268: PUSH
12269: LD_VAR 0 4
12273: PUSH
12274: LD_INT 11
12276: PLUS
12277: PPUSH
12278: CALL_OW 110
12282: PPUSH
12283: CALL_OW 255
12287: ST_TO_ADDR
// if GetTag ( base + 12 ) then
12288: LD_VAR 0 4
12292: PUSH
12293: LD_INT 12
12295: PLUS
12296: PPUSH
12297: CALL_OW 110
12301: IFFALSE 12344
// begin ComCancel ( GetTag ( base + 11 ) ) ;
12303: LD_VAR 0 4
12307: PUSH
12308: LD_INT 11
12310: PLUS
12311: PPUSH
12312: CALL_OW 110
12316: PPUSH
12317: CALL_OW 127
// Wait ( 10 ) ;
12321: LD_INT 10
12323: PPUSH
12324: CALL_OW 67
// SetTag ( base + 12 , false ) ;
12328: LD_VAR 0 4
12332: PUSH
12333: LD_INT 12
12335: PLUS
12336: PPUSH
12337: LD_INT 0
12339: PPUSH
12340: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
12344: LD_VAR 0 4
12348: PUSH
12349: LD_VAR 0 5
12353: PUSH
12354: LD_INT 10
12356: MUL
12357: PLUS
12358: PUSH
12359: LD_INT 11
12361: PLUS
12362: PPUSH
12363: CALL_OW 110
12367: NOT
12368: IFFALSE 12384
// DeInit_Lab ( side , art ) ;
12370: LD_VAR 0 5
12374: PPUSH
12375: LD_VAR 0 2
12379: PPUSH
12380: CALL 10639 0 2
// SetTag ( base + 11 , 0 ) ;
12384: LD_VAR 0 4
12388: PUSH
12389: LD_INT 11
12391: PLUS
12392: PPUSH
12393: LD_INT 0
12395: PPUSH
12396: CALL_OW 109
// end ; end ;
12400: LD_VAR 0 3
12404: RET
// every 0 0$5 marked 5 do var hex , un ;
12405: GO 12407
12407: DISABLE
12408: LD_INT 0
12410: PPUSH
12411: PPUSH
// begin wait ( 3 3$0 ) ;
12412: LD_INT 6300
12414: PPUSH
12415: CALL_OW 67
// if GetTag ( 09 ) then
12419: LD_INT 9
12421: PPUSH
12422: CALL_OW 110
12426: IFFALSE 12465
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
12428: LD_ADDR_VAR 0 1
12432: PUSH
12433: LD_INT 13
12435: PPUSH
12436: CALL_OW 110
12440: PPUSH
12441: CALL_OW 250
12445: PUSH
12446: LD_INT 13
12448: PPUSH
12449: CALL_OW 110
12453: PPUSH
12454: CALL_OW 251
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: ST_TO_ADDR
12463: GO 12484
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
12465: LD_ADDR_VAR 0 1
12469: PUSH
12470: LD_EXP 46
12474: PUSH
12475: LD_INT 1
12477: ARRAY
12478: PPUSH
12479: CALL_OW 469
12483: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12484: LD_VAR 0 1
12488: PUSH
12489: LD_INT 1
12491: ARRAY
12492: PPUSH
12493: LD_VAR 0 1
12497: PUSH
12498: LD_INT 2
12500: ARRAY
12501: PPUSH
12502: LD_INT 16
12504: PPUSH
12505: CALL_OW 309
12509: NOT
12510: IFFALSE 12787
// begin if GetTag ( 09 ) then
12512: LD_INT 9
12514: PPUSH
12515: CALL_OW 110
12519: IFFALSE 12566
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12521: LD_INT 13
12523: PPUSH
12524: CALL_OW 110
12528: PPUSH
12529: LD_INT 4
12531: PPUSH
12532: LD_EXP 46
12536: PUSH
12537: LD_INT 1
12539: ARRAY
12540: NEG
12541: PPUSH
12542: CALL_OW 290
// SetTag ( 09 , 0 ) ;
12546: LD_INT 9
12548: PPUSH
12549: LD_INT 0
12551: PPUSH
12552: CALL_OW 109
// SetTag ( 13 , 0 ) ;
12556: LD_INT 13
12558: PPUSH
12559: LD_INT 0
12561: PPUSH
12562: CALL_OW 109
// end ; DestroyArtefact ( hex , 1 ) ;
12566: LD_VAR 0 1
12570: PPUSH
12571: LD_INT 1
12573: PPUSH
12574: CALL 12162 0 2
// wait ( 5 ) ;
12578: LD_INT 5
12580: PPUSH
12581: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12585: LD_ADDR_VAR 0 1
12589: PUSH
12590: LD_INT 16
12592: PPUSH
12593: LD_INT 0
12595: PPUSH
12596: CALL_OW 16
12600: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12601: LD_ADDR_VAR 0 2
12605: PUSH
12606: LD_VAR 0 1
12610: PUSH
12611: LD_INT 1
12613: ARRAY
12614: PPUSH
12615: LD_VAR 0 1
12619: PUSH
12620: LD_INT 2
12622: ARRAY
12623: PPUSH
12624: CALL_OW 428
12628: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12629: LD_VAR 0 2
12633: PUSH
12634: LD_INT 0
12636: GREATER
12637: PUSH
12638: LD_VAR 0 2
12642: PPUSH
12643: CALL_OW 247
12647: PUSH
12648: LD_INT 3
12650: EQUAL
12651: AND
12652: IFFALSE 12696
// begin KillUnit ( un ) ;
12654: LD_VAR 0 2
12658: PPUSH
12659: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12663: LD_VAR 0 1
12667: PUSH
12668: LD_INT 1
12670: ARRAY
12671: PPUSH
12672: LD_VAR 0 1
12676: PUSH
12677: LD_INT 2
12679: ARRAY
12680: PPUSH
12681: CALL_OW 428
12685: IFFALSE 12696
// wait ( 10 ) ;
12687: LD_INT 10
12689: PPUSH
12690: CALL_OW 67
12694: GO 12663
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12696: LD_VAR 0 1
12700: PUSH
12701: LD_INT 1
12703: ARRAY
12704: PPUSH
12705: LD_VAR 0 1
12709: PUSH
12710: LD_INT 2
12712: ARRAY
12713: PPUSH
12714: CALL_OW 428
12718: NOT
12719: IFFALSE 12585
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12721: LD_VAR 0 1
12725: PUSH
12726: LD_INT 1
12728: ARRAY
12729: PPUSH
12730: LD_VAR 0 1
12734: PUSH
12735: LD_INT 2
12737: ARRAY
12738: PPUSH
12739: CALL_OW 494
// wait ( 30 ) ;
12743: LD_INT 30
12745: PPUSH
12746: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12750: LD_INT 4
12752: PPUSH
12753: LD_EXP 46
12757: PUSH
12758: LD_INT 1
12760: ARRAY
12761: PPUSH
12762: LD_VAR 0 1
12766: PUSH
12767: LD_INT 1
12769: ARRAY
12770: PPUSH
12771: LD_VAR 0 1
12775: PUSH
12776: LD_INT 2
12778: ARRAY
12779: PPUSH
12780: LD_INT 0
12782: PPUSH
12783: CALL_OW 58
// end ; enable ;
12787: ENABLE
// end ;
12788: PPOPN 2
12790: END
// every 0 0$5 marked 6 do var hex , un ;
12791: GO 12793
12793: DISABLE
12794: LD_INT 0
12796: PPUSH
12797: PPUSH
// begin wait ( 3 3$30 ) ;
12798: LD_INT 7350
12800: PPUSH
12801: CALL_OW 67
// if GetTag ( 109 ) then
12805: LD_INT 109
12807: PPUSH
12808: CALL_OW 110
12812: IFFALSE 12851
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
12814: LD_ADDR_VAR 0 1
12818: PUSH
12819: LD_INT 113
12821: PPUSH
12822: CALL_OW 110
12826: PPUSH
12827: CALL_OW 250
12831: PUSH
12832: LD_INT 113
12834: PPUSH
12835: CALL_OW 110
12839: PPUSH
12840: CALL_OW 251
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: ST_TO_ADDR
12849: GO 12870
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_EXP 46
12860: PUSH
12861: LD_INT 2
12863: ARRAY
12864: PPUSH
12865: CALL_OW 469
12869: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12870: LD_VAR 0 1
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 1
12883: PUSH
12884: LD_INT 2
12886: ARRAY
12887: PPUSH
12888: LD_INT 16
12890: PPUSH
12891: CALL_OW 309
12895: NOT
12896: IFFALSE 13173
// begin if GetTag ( 109 ) then
12898: LD_INT 109
12900: PPUSH
12901: CALL_OW 110
12905: IFFALSE 12952
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12907: LD_INT 113
12909: PPUSH
12910: CALL_OW 110
12914: PPUSH
12915: LD_INT 4
12917: PPUSH
12918: LD_EXP 46
12922: PUSH
12923: LD_INT 1
12925: ARRAY
12926: NEG
12927: PPUSH
12928: CALL_OW 290
// SetTag ( 109 , 0 ) ;
12932: LD_INT 109
12934: PPUSH
12935: LD_INT 0
12937: PPUSH
12938: CALL_OW 109
// SetTag ( 113 , 0 ) ;
12942: LD_INT 113
12944: PPUSH
12945: LD_INT 0
12947: PPUSH
12948: CALL_OW 109
// end ; DestroyArtefact ( hex , 2 ) ;
12952: LD_VAR 0 1
12956: PPUSH
12957: LD_INT 2
12959: PPUSH
12960: CALL 12162 0 2
// wait ( 5 ) ;
12964: LD_INT 5
12966: PPUSH
12967: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12971: LD_ADDR_VAR 0 1
12975: PUSH
12976: LD_INT 16
12978: PPUSH
12979: LD_INT 0
12981: PPUSH
12982: CALL_OW 16
12986: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12987: LD_ADDR_VAR 0 2
12991: PUSH
12992: LD_VAR 0 1
12996: PUSH
12997: LD_INT 1
12999: ARRAY
13000: PPUSH
13001: LD_VAR 0 1
13005: PUSH
13006: LD_INT 2
13008: ARRAY
13009: PPUSH
13010: CALL_OW 428
13014: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
13015: LD_VAR 0 2
13019: PUSH
13020: LD_INT 0
13022: GREATER
13023: PUSH
13024: LD_VAR 0 2
13028: PPUSH
13029: CALL_OW 247
13033: PUSH
13034: LD_INT 3
13036: EQUAL
13037: AND
13038: IFFALSE 13082
// begin KillUnit ( un ) ;
13040: LD_VAR 0 2
13044: PPUSH
13045: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
13049: LD_VAR 0 1
13053: PUSH
13054: LD_INT 1
13056: ARRAY
13057: PPUSH
13058: LD_VAR 0 1
13062: PUSH
13063: LD_INT 2
13065: ARRAY
13066: PPUSH
13067: CALL_OW 428
13071: IFFALSE 13082
// wait ( 10 ) ;
13073: LD_INT 10
13075: PPUSH
13076: CALL_OW 67
13080: GO 13049
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13082: LD_VAR 0 1
13086: PUSH
13087: LD_INT 1
13089: ARRAY
13090: PPUSH
13091: LD_VAR 0 1
13095: PUSH
13096: LD_INT 2
13098: ARRAY
13099: PPUSH
13100: CALL_OW 428
13104: NOT
13105: IFFALSE 12971
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13107: LD_VAR 0 1
13111: PUSH
13112: LD_INT 1
13114: ARRAY
13115: PPUSH
13116: LD_VAR 0 1
13120: PUSH
13121: LD_INT 2
13123: ARRAY
13124: PPUSH
13125: CALL_OW 494
// wait ( 30 ) ;
13129: LD_INT 30
13131: PPUSH
13132: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13136: LD_INT 4
13138: PPUSH
13139: LD_EXP 46
13143: PUSH
13144: LD_INT 2
13146: ARRAY
13147: PPUSH
13148: LD_VAR 0 1
13152: PUSH
13153: LD_INT 1
13155: ARRAY
13156: PPUSH
13157: LD_VAR 0 1
13161: PUSH
13162: LD_INT 2
13164: ARRAY
13165: PPUSH
13166: LD_INT 0
13168: PPUSH
13169: CALL_OW 58
// end ; enable ;
13173: ENABLE
// end ;
13174: PPOPN 2
13176: END
// every 0 0$5 marked 7 do var hex , un ;
13177: GO 13179
13179: DISABLE
13180: LD_INT 0
13182: PPUSH
13183: PPUSH
// begin wait ( 4 4$0 ) ;
13184: LD_INT 8400
13186: PPUSH
13187: CALL_OW 67
// if GetTag ( 209 ) then
13191: LD_INT 209
13193: PPUSH
13194: CALL_OW 110
13198: IFFALSE 13237
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
13200: LD_ADDR_VAR 0 1
13204: PUSH
13205: LD_INT 213
13207: PPUSH
13208: CALL_OW 110
13212: PPUSH
13213: CALL_OW 250
13217: PUSH
13218: LD_INT 213
13220: PPUSH
13221: CALL_OW 110
13225: PPUSH
13226: CALL_OW 251
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: ST_TO_ADDR
13235: GO 13256
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
13237: LD_ADDR_VAR 0 1
13241: PUSH
13242: LD_EXP 46
13246: PUSH
13247: LD_INT 3
13249: ARRAY
13250: PPUSH
13251: CALL_OW 469
13255: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
13256: LD_VAR 0 1
13260: PUSH
13261: LD_INT 1
13263: ARRAY
13264: PPUSH
13265: LD_VAR 0 1
13269: PUSH
13270: LD_INT 2
13272: ARRAY
13273: PPUSH
13274: LD_INT 16
13276: PPUSH
13277: CALL_OW 309
13281: NOT
13282: IFFALSE 13559
// begin if GetTag ( 209 ) then
13284: LD_INT 209
13286: PPUSH
13287: CALL_OW 110
13291: IFFALSE 13338
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 1 ] ) ;
13293: LD_INT 213
13295: PPUSH
13296: CALL_OW 110
13300: PPUSH
13301: LD_INT 4
13303: PPUSH
13304: LD_EXP 46
13308: PUSH
13309: LD_INT 1
13311: ARRAY
13312: NEG
13313: PPUSH
13314: CALL_OW 290
// SetTag ( 209 , 0 ) ;
13318: LD_INT 209
13320: PPUSH
13321: LD_INT 0
13323: PPUSH
13324: CALL_OW 109
// SetTag ( 213 , 0 ) ;
13328: LD_INT 213
13330: PPUSH
13331: LD_INT 0
13333: PPUSH
13334: CALL_OW 109
// end ; DestroyArtefact ( hex , 3 ) ;
13338: LD_VAR 0 1
13342: PPUSH
13343: LD_INT 3
13345: PPUSH
13346: CALL 12162 0 2
// wait ( 5 ) ;
13350: LD_INT 5
13352: PPUSH
13353: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
13357: LD_ADDR_VAR 0 1
13361: PUSH
13362: LD_INT 16
13364: PPUSH
13365: LD_INT 0
13367: PPUSH
13368: CALL_OW 16
13372: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13373: LD_ADDR_VAR 0 2
13377: PUSH
13378: LD_VAR 0 1
13382: PUSH
13383: LD_INT 1
13385: ARRAY
13386: PPUSH
13387: LD_VAR 0 1
13391: PUSH
13392: LD_INT 2
13394: ARRAY
13395: PPUSH
13396: CALL_OW 428
13400: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
13401: LD_VAR 0 2
13405: PUSH
13406: LD_INT 0
13408: GREATER
13409: PUSH
13410: LD_VAR 0 2
13414: PPUSH
13415: CALL_OW 247
13419: PUSH
13420: LD_INT 3
13422: EQUAL
13423: AND
13424: IFFALSE 13468
// begin KillUnit ( un ) ;
13426: LD_VAR 0 2
13430: PPUSH
13431: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
13435: LD_VAR 0 1
13439: PUSH
13440: LD_INT 1
13442: ARRAY
13443: PPUSH
13444: LD_VAR 0 1
13448: PUSH
13449: LD_INT 2
13451: ARRAY
13452: PPUSH
13453: CALL_OW 428
13457: IFFALSE 13468
// wait ( 10 ) ;
13459: LD_INT 10
13461: PPUSH
13462: CALL_OW 67
13466: GO 13435
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13468: LD_VAR 0 1
13472: PUSH
13473: LD_INT 1
13475: ARRAY
13476: PPUSH
13477: LD_VAR 0 1
13481: PUSH
13482: LD_INT 2
13484: ARRAY
13485: PPUSH
13486: CALL_OW 428
13490: NOT
13491: IFFALSE 13357
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13493: LD_VAR 0 1
13497: PUSH
13498: LD_INT 1
13500: ARRAY
13501: PPUSH
13502: LD_VAR 0 1
13506: PUSH
13507: LD_INT 2
13509: ARRAY
13510: PPUSH
13511: CALL_OW 494
// wait ( 30 ) ;
13515: LD_INT 30
13517: PPUSH
13518: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13522: LD_INT 4
13524: PPUSH
13525: LD_EXP 46
13529: PUSH
13530: LD_INT 3
13532: ARRAY
13533: PPUSH
13534: LD_VAR 0 1
13538: PUSH
13539: LD_INT 1
13541: ARRAY
13542: PPUSH
13543: LD_VAR 0 1
13547: PUSH
13548: LD_INT 2
13550: ARRAY
13551: PPUSH
13552: LD_INT 0
13554: PPUSH
13555: CALL_OW 58
// end ; enable ;
13559: ENABLE
// end ; end_of_file
13560: PPOPN 2
13562: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13563: LD_INT 0
13565: PPUSH
13566: PPUSH
// for un in battle_flags_id do
13567: LD_ADDR_VAR 0 2
13571: PUSH
13572: LD_EXP 35
13576: PUSH
13577: FOR_IN
13578: IFFALSE 13653
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13580: LD_VAR 0 2
13584: PPUSH
13585: LD_INT 1
13587: PUSH
13588: LD_LOC 14
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: LD_INT 2
13599: PUSH
13600: LD_LOC 14
13604: PUSH
13605: LD_INT 2
13607: DIV
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 3
13615: PUSH
13616: LD_LOC 14
13620: PUSH
13621: LD_INT 5
13623: DIV
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 20
13631: PUSH
13632: LD_LOC 14
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: PPUSH
13647: CALL_OW 423
13651: GO 13577
13653: POP
13654: POP
// end ;
13655: LD_VAR 0 1
13659: RET
// every 0 0$0.1 do var un ;
13660: GO 13662
13662: DISABLE
13663: LD_INT 0
13665: PPUSH
// begin if not def_morale_flags then
13666: LD_EXP 60
13670: NOT
13671: IFFALSE 13675
// exit ;
13673: GO 13752
// if not morale_decreasing_time then
13675: LD_EXP 14
13679: NOT
13680: IFFALSE 13684
// exit ;
13682: GO 13752
// strength = 100 ;
13684: LD_ADDR_LOC 14
13688: PUSH
13689: LD_INT 100
13691: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13692: LD_EXP 14
13696: PPUSH
13697: CALL_OW 67
// strength := strength - 1 ;
13701: LD_ADDR_LOC 14
13705: PUSH
13706: LD_LOC 14
13710: PUSH
13711: LD_INT 1
13713: MINUS
13714: ST_TO_ADDR
// Update_Flags ;
13715: CALL 13563 0 0
// until not strength ;
13719: LD_LOC 14
13723: NOT
13724: IFFALSE 13692
// for un in battle_flags_id do
13726: LD_ADDR_VAR 0 1
13730: PUSH
13731: LD_EXP 35
13735: PUSH
13736: FOR_IN
13737: IFFALSE 13750
// KillBattleFlag ( un ) ;
13739: LD_VAR 0 1
13743: PPUSH
13744: CALL_OW 419
13748: GO 13736
13750: POP
13751: POP
// end ; end_of_file
13752: PPOPN 1
13754: END
// export BuildUpAreas ; export buildUpTimeActive ; export function BeginBuildUp ; var i , j ; begin
13755: LD_INT 0
13757: PPUSH
13758: PPUSH
13759: PPUSH
// buildUpTimeActive := true ;
13760: LD_ADDR_EXP 49
13764: PUSH
13765: LD_INT 1
13767: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13768: LD_ADDR_VAR 0 2
13772: PUSH
13773: DOUBLE
13774: LD_INT 1
13776: DEC
13777: ST_TO_ADDR
13778: LD_EXP 48
13782: PUSH
13783: FOR_TO
13784: IFFALSE 13939
// if Position_Sides [ i ] then
13786: LD_EXP 30
13790: PUSH
13791: LD_VAR 0 2
13795: ARRAY
13796: IFFALSE 13937
// for j := 1 to 8 do
13798: LD_ADDR_VAR 0 3
13802: PUSH
13803: DOUBLE
13804: LD_INT 1
13806: DEC
13807: ST_TO_ADDR
13808: LD_INT 8
13810: PUSH
13811: FOR_TO
13812: IFFALSE 13935
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13814: LD_EXP 24
13818: PUSH
13819: LD_VAR 0 3
13823: ARRAY
13824: PUSH
13825: LD_EXP 22
13829: PUSH
13830: LD_EXP 30
13834: PUSH
13835: LD_VAR 0 2
13839: ARRAY
13840: ARRAY
13841: PUSH
13842: LD_EXP 22
13846: PUSH
13847: LD_VAR 0 3
13851: ARRAY
13852: NONEQUAL
13853: PUSH
13854: LD_EXP 26
13858: NOT
13859: PUSH
13860: LD_EXP 30
13864: PUSH
13865: LD_VAR 0 2
13869: ARRAY
13870: PUSH
13871: LD_VAR 0 3
13875: NONEQUAL
13876: AND
13877: OR
13878: AND
13879: IFFALSE 13903
// HideArea ( j , BuildUpAreas [ i ] ) else
13881: LD_VAR 0 3
13885: PPUSH
13886: LD_EXP 48
13890: PUSH
13891: LD_VAR 0 2
13895: ARRAY
13896: PPUSH
13897: CALL_OW 333
13901: GO 13933
// if ( j = your_side ) then
13903: LD_VAR 0 3
13907: PUSH
13908: LD_OWVAR 2
13912: EQUAL
13913: IFFALSE 13933
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13915: LD_EXP 48
13919: PUSH
13920: LD_VAR 0 2
13924: ARRAY
13925: PPUSH
13926: LD_INT 5
13928: PPUSH
13929: CALL_OW 424
13933: GO 13811
13935: POP
13936: POP
13937: GO 13783
13939: POP
13940: POP
// end ;
13941: LD_VAR 0 1
13945: RET
// export function EndBuildUp ; var i , j ; begin
13946: LD_INT 0
13948: PPUSH
13949: PPUSH
13950: PPUSH
// buildUpTimeActive := false ;
13951: LD_ADDR_EXP 49
13955: PUSH
13956: LD_INT 0
13958: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13959: LD_ADDR_VAR 0 2
13963: PUSH
13964: DOUBLE
13965: LD_INT 1
13967: DEC
13968: ST_TO_ADDR
13969: LD_EXP 48
13973: PUSH
13974: FOR_TO
13975: IFFALSE 14130
// if Position_Sides [ i ] then
13977: LD_EXP 30
13981: PUSH
13982: LD_VAR 0 2
13986: ARRAY
13987: IFFALSE 14128
// for j := 1 to 8 do
13989: LD_ADDR_VAR 0 3
13993: PUSH
13994: DOUBLE
13995: LD_INT 1
13997: DEC
13998: ST_TO_ADDR
13999: LD_INT 8
14001: PUSH
14002: FOR_TO
14003: IFFALSE 14126
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
14005: LD_EXP 24
14009: PUSH
14010: LD_VAR 0 3
14014: ARRAY
14015: PUSH
14016: LD_EXP 22
14020: PUSH
14021: LD_EXP 30
14025: PUSH
14026: LD_VAR 0 2
14030: ARRAY
14031: ARRAY
14032: PUSH
14033: LD_EXP 22
14037: PUSH
14038: LD_VAR 0 3
14042: ARRAY
14043: NONEQUAL
14044: PUSH
14045: LD_EXP 26
14049: NOT
14050: PUSH
14051: LD_EXP 30
14055: PUSH
14056: LD_VAR 0 2
14060: ARRAY
14061: PUSH
14062: LD_VAR 0 3
14066: NONEQUAL
14067: AND
14068: OR
14069: AND
14070: IFFALSE 14094
// ShowArea ( j , BuildUpAreas [ i ] ) else
14072: LD_VAR 0 3
14076: PPUSH
14077: LD_EXP 48
14081: PUSH
14082: LD_VAR 0 2
14086: ARRAY
14087: PPUSH
14088: CALL_OW 334
14092: GO 14124
// if ( j = your_side ) then
14094: LD_VAR 0 3
14098: PUSH
14099: LD_OWVAR 2
14103: EQUAL
14104: IFFALSE 14124
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
14106: LD_EXP 48
14110: PUSH
14111: LD_VAR 0 2
14115: ARRAY
14116: PPUSH
14117: LD_INT 0
14119: PPUSH
14120: CALL_OW 424
14124: GO 14002
14126: POP
14127: POP
14128: GO 13974
14130: POP
14131: POP
// end ;
14132: LD_VAR 0 1
14136: RET
// every 5 trigger buildUpTimeActive do var i , un ;
14137: LD_EXP 49
14141: IFFALSE 14324
14143: GO 14145
14145: DISABLE
14146: LD_INT 0
14148: PPUSH
14149: PPUSH
// begin for i := 1 to BuildUpAreas do
14150: LD_ADDR_VAR 0 1
14154: PUSH
14155: DOUBLE
14156: LD_INT 1
14158: DEC
14159: ST_TO_ADDR
14160: LD_EXP 48
14164: PUSH
14165: FOR_TO
14166: IFFALSE 14321
// if Position_Sides [ i ] then
14168: LD_EXP 30
14172: PUSH
14173: LD_VAR 0 1
14177: ARRAY
14178: IFFALSE 14319
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14180: LD_ADDR_VAR 0 2
14184: PUSH
14185: LD_EXP 48
14189: PUSH
14190: LD_VAR 0 1
14194: ARRAY
14195: PPUSH
14196: LD_INT 2
14198: PUSH
14199: LD_INT 21
14201: PUSH
14202: LD_INT 1
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 21
14211: PUSH
14212: LD_INT 2
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_OWVAR 2
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PPUSH
14240: CALL_OW 70
14244: PUSH
14245: FOR_IN
14246: IFFALSE 14317
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
14248: LD_EXP 22
14252: PUSH
14253: LD_EXP 30
14257: PUSH
14258: LD_VAR 0 1
14262: ARRAY
14263: ARRAY
14264: PUSH
14265: LD_EXP 22
14269: PUSH
14270: LD_OWVAR 2
14274: ARRAY
14275: NONEQUAL
14276: PUSH
14277: LD_EXP 26
14281: NOT
14282: PUSH
14283: LD_EXP 30
14287: PUSH
14288: LD_VAR 0 1
14292: ARRAY
14293: PUSH
14294: LD_OWVAR 2
14298: NONEQUAL
14299: AND
14300: OR
14301: IFFALSE 14315
// ComMoveToArea ( un , BuildUpEscape ) ;
14303: LD_VAR 0 2
14307: PPUSH
14308: LD_INT 24
14310: PPUSH
14311: CALL_OW 113
14315: GO 14245
14317: POP
14318: POP
14319: GO 14165
14321: POP
14322: POP
// enable ;
14323: ENABLE
// end ;
14324: PPOPN 2
14326: END
// every 0 0$1 trigger def_builduptime do
14327: LD_EXP 65
14331: IFFALSE 14357
14333: GO 14335
14335: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14336: LD_INT 8400
14338: PUSH
14339: LD_EXP 65
14343: PUSH
14344: LD_INT 2100
14346: MUL
14347: PLUS
14348: PPUSH
14349: CALL_OW 67
// EndBuildUp ;
14353: CALL 13946 0 0
// end ; end_of_file
14357: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
14358: LD_INT 0
14360: PPUSH
14361: PPUSH
// if ( not IAmSpec ) then
14362: CALL_OW 531
14366: NOT
14367: IFFALSE 14383
// Result := Limits_Info ^  ;
14369: LD_ADDR_VAR 0 1
14373: PUSH
14374: LD_LOC 26
14378: PUSH
14379: LD_STRING 
14381: ADD
14382: ST_TO_ADDR
// for i := 1 to 8 do
14383: LD_ADDR_VAR 0 2
14387: PUSH
14388: DOUBLE
14389: LD_INT 1
14391: DEC
14392: ST_TO_ADDR
14393: LD_INT 8
14395: PUSH
14396: FOR_TO
14397: IFFALSE 14442
// if Cheaters [ i ] then
14399: LD_LOC 27
14403: PUSH
14404: LD_VAR 0 2
14408: ARRAY
14409: IFFALSE 14440
// Result := Result ^ [ #Cheater , i , i ] ;
14411: LD_ADDR_VAR 0 1
14415: PUSH
14416: LD_VAR 0 1
14420: PUSH
14421: LD_STRING #Cheater
14423: PUSH
14424: LD_VAR 0 2
14428: PUSH
14429: LD_VAR 0 2
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: ADD
14439: ST_TO_ADDR
14440: GO 14396
14442: POP
14443: POP
// end ;
14444: LD_VAR 0 1
14448: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14449: LD_INT 0
14451: PPUSH
14452: PPUSH
14453: PPUSH
14454: PPUSH
14455: PPUSH
// case Game_Type of 10 :
14456: LD_EXP 50
14460: PUSH
14461: LD_INT 10
14463: DOUBLE
14464: EQUAL
14465: IFTRUE 14469
14467: GO 14480
14469: POP
// def_game_rules := 1 ; 11 :
14470: LD_ADDR_EXP 51
14474: PUSH
14475: LD_INT 1
14477: ST_TO_ADDR
14478: GO 14500
14480: LD_INT 11
14482: DOUBLE
14483: EQUAL
14484: IFTRUE 14488
14486: GO 14499
14488: POP
// def_game_rules := 3 ; end ;
14489: LD_ADDR_EXP 51
14493: PUSH
14494: LD_INT 3
14496: ST_TO_ADDR
14497: GO 14500
14499: POP
// case def_game_rules of 0 :
14500: LD_EXP 51
14504: PUSH
14505: LD_INT 0
14507: DOUBLE
14508: EQUAL
14509: IFTRUE 14513
14511: GO 14518
14513: POP
// exit ; 1 :
14514: GO 16576
14516: GO 16476
14518: LD_INT 1
14520: DOUBLE
14521: EQUAL
14522: IFTRUE 14526
14524: GO 14742
14526: POP
// begin def_base_level := 2 ;
14527: LD_ADDR_EXP 52
14531: PUSH
14532: LD_INT 2
14534: ST_TO_ADDR
// def_amount_of_people := 2 ;
14535: LD_ADDR_EXP 53
14539: PUSH
14540: LD_INT 2
14542: ST_TO_ADDR
// def_skill_level := 1 ;
14543: LD_ADDR_EXP 54
14547: PUSH
14548: LD_INT 1
14550: ST_TO_ADDR
// def_starting_resources := 2 ;
14551: LD_ADDR_EXP 55
14555: PUSH
14556: LD_INT 2
14558: ST_TO_ADDR
// def_shipments_density := 1 ;
14559: LD_ADDR_EXP 56
14563: PUSH
14564: LD_INT 1
14566: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14567: LD_ADDR_EXP 57
14571: PUSH
14572: LD_INT 0
14574: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14575: LD_ADDR_EXP 58
14579: PUSH
14580: LD_INT 1
14582: ST_TO_ADDR
// def_shared_vision := 1 ;
14583: LD_ADDR_EXP 59
14587: PUSH
14588: LD_INT 1
14590: ST_TO_ADDR
// def_morale_flags := 3 ;
14591: LD_ADDR_EXP 60
14595: PUSH
14596: LD_INT 3
14598: ST_TO_ADDR
// def_siberite_detection := 1 ;
14599: LD_ADDR_EXP 61
14603: PUSH
14604: LD_INT 1
14606: ST_TO_ADDR
// def_people_respawning := 1 ;
14607: LD_ADDR_EXP 62
14611: PUSH
14612: LD_INT 1
14614: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14615: LD_ADDR_EXP 63
14619: PUSH
14620: LD_INT 1
14622: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14623: LD_ADDR_EXP 64
14627: PUSH
14628: LD_INT 0
14630: ST_TO_ADDR
// def_builduptime := 2 ;
14631: LD_ADDR_EXP 65
14635: PUSH
14636: LD_INT 2
14638: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14639: LD_ADDR_VAR 0 2
14643: PUSH
14644: EMPTY
14645: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14646: LD_ADDR_VAR 0 3
14650: PUSH
14651: EMPTY
14652: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14653: LD_ADDR_LOC 21
14657: PUSH
14658: EMPTY
14659: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14660: LD_ADDR_LOC 22
14664: PUSH
14665: EMPTY
14666: ST_TO_ADDR
// Banned_Controls := [ ] ;
14667: LD_ADDR_LOC 23
14671: PUSH
14672: EMPTY
14673: ST_TO_ADDR
// Banned_Engines := [ ] ;
14674: LD_ADDR_LOC 24
14678: PUSH
14679: EMPTY
14680: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14681: LD_ADDR_LOC 19
14685: PUSH
14686: LD_INT 37
14688: PUSH
14689: EMPTY
14690: LIST
14691: PUSH
14692: LD_INT 4
14694: PUSH
14695: LD_INT 5
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 31
14704: PUSH
14705: LD_INT 32
14707: PUSH
14708: LD_INT 33
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14721: LD_ADDR_LOC 20
14725: PUSH
14726: LD_INT 2
14728: PUSH
14729: LD_INT 2
14731: PUSH
14732: LD_INT 4
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: LIST
14739: ST_TO_ADDR
// end ; 2 :
14740: GO 16476
14742: LD_INT 2
14744: DOUBLE
14745: EQUAL
14746: IFTRUE 14750
14748: GO 14959
14750: POP
// begin def_base_level := 1 ;
14751: LD_ADDR_EXP 52
14755: PUSH
14756: LD_INT 1
14758: ST_TO_ADDR
// def_amount_of_people := 2 ;
14759: LD_ADDR_EXP 53
14763: PUSH
14764: LD_INT 2
14766: ST_TO_ADDR
// def_skill_level := 3 ;
14767: LD_ADDR_EXP 54
14771: PUSH
14772: LD_INT 3
14774: ST_TO_ADDR
// def_starting_resources := 3 ;
14775: LD_ADDR_EXP 55
14779: PUSH
14780: LD_INT 3
14782: ST_TO_ADDR
// def_shipments_density := 2 ;
14783: LD_ADDR_EXP 56
14787: PUSH
14788: LD_INT 2
14790: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14791: LD_ADDR_EXP 57
14795: PUSH
14796: LD_INT 1
14798: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14799: LD_ADDR_EXP 58
14803: PUSH
14804: LD_INT 2
14806: ST_TO_ADDR
// def_shared_vision := 1 ;
14807: LD_ADDR_EXP 59
14811: PUSH
14812: LD_INT 1
14814: ST_TO_ADDR
// def_morale_flags := 0 ;
14815: LD_ADDR_EXP 60
14819: PUSH
14820: LD_INT 0
14822: ST_TO_ADDR
// def_siberite_detection := 1 ;
14823: LD_ADDR_EXP 61
14827: PUSH
14828: LD_INT 1
14830: ST_TO_ADDR
// def_people_respawning := 0 ;
14831: LD_ADDR_EXP 62
14835: PUSH
14836: LD_INT 0
14838: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14839: LD_ADDR_EXP 63
14843: PUSH
14844: LD_INT 0
14846: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14847: LD_ADDR_EXP 64
14851: PUSH
14852: LD_INT 0
14854: ST_TO_ADDR
// def_builduptime := 2 ;
14855: LD_ADDR_EXP 65
14859: PUSH
14860: LD_INT 2
14862: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14863: LD_ADDR_VAR 0 2
14867: PUSH
14868: LD_INT 1
14870: PUSH
14871: EMPTY
14872: LIST
14873: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14874: LD_ADDR_VAR 0 3
14878: PUSH
14879: EMPTY
14880: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14881: LD_ADDR_LOC 21
14885: PUSH
14886: EMPTY
14887: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14888: LD_ADDR_LOC 22
14892: PUSH
14893: EMPTY
14894: ST_TO_ADDR
// Banned_Controls := [ ] ;
14895: LD_ADDR_LOC 23
14899: PUSH
14900: EMPTY
14901: ST_TO_ADDR
// Banned_Engines := [ ] ;
14902: LD_ADDR_LOC 24
14906: PUSH
14907: EMPTY
14908: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14909: LD_ADDR_LOC 19
14913: PUSH
14914: LD_INT 4
14916: PUSH
14917: LD_INT 5
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 31
14926: PUSH
14927: LD_INT 32
14929: PUSH
14930: LD_INT 33
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: LIST
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
14942: LD_ADDR_LOC 20
14946: PUSH
14947: LD_INT 1
14949: PUSH
14950: LD_INT 2
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: ST_TO_ADDR
// end ; 3 :
14957: GO 16476
14959: LD_INT 3
14961: DOUBLE
14962: EQUAL
14963: IFTRUE 14967
14965: GO 15210
14967: POP
// begin def_base_level := 1 ;
14968: LD_ADDR_EXP 52
14972: PUSH
14973: LD_INT 1
14975: ST_TO_ADDR
// def_amount_of_people := 2 ;
14976: LD_ADDR_EXP 53
14980: PUSH
14981: LD_INT 2
14983: ST_TO_ADDR
// def_skill_level := 3 ;
14984: LD_ADDR_EXP 54
14988: PUSH
14989: LD_INT 3
14991: ST_TO_ADDR
// def_starting_resources := 3 ;
14992: LD_ADDR_EXP 55
14996: PUSH
14997: LD_INT 3
14999: ST_TO_ADDR
// def_shipments_density := 1 ;
15000: LD_ADDR_EXP 56
15004: PUSH
15005: LD_INT 1
15007: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15008: LD_ADDR_EXP 57
15012: PUSH
15013: LD_INT 0
15015: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15016: LD_ADDR_EXP 58
15020: PUSH
15021: LD_INT 1
15023: ST_TO_ADDR
// def_shared_vision := 1 ;
15024: LD_ADDR_EXP 59
15028: PUSH
15029: LD_INT 1
15031: ST_TO_ADDR
// def_morale_flags := 0 ;
15032: LD_ADDR_EXP 60
15036: PUSH
15037: LD_INT 0
15039: ST_TO_ADDR
// def_siberite_detection := 1 ;
15040: LD_ADDR_EXP 61
15044: PUSH
15045: LD_INT 1
15047: ST_TO_ADDR
// def_people_respawning := 0 ;
15048: LD_ADDR_EXP 62
15052: PUSH
15053: LD_INT 0
15055: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
15056: LD_ADDR_EXP 63
15060: PUSH
15061: LD_INT 2
15063: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15064: LD_ADDR_EXP 64
15068: PUSH
15069: LD_INT 0
15071: ST_TO_ADDR
// def_builduptime := 1 ;
15072: LD_ADDR_EXP 65
15076: PUSH
15077: LD_INT 1
15079: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15080: LD_ADDR_VAR 0 2
15084: PUSH
15085: LD_INT 23
15087: PUSH
15088: EMPTY
15089: LIST
15090: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
15091: LD_ADDR_VAR 0 3
15095: PUSH
15096: LD_INT 2
15098: PUSH
15099: LD_INT 37
15101: PUSH
15102: LD_INT 32
15104: PUSH
15105: LD_INT 33
15107: PUSH
15108: LD_INT 36
15110: PUSH
15111: LD_INT 16
15113: PUSH
15114: LD_INT 23
15116: PUSH
15117: LD_INT 21
15119: PUSH
15120: LD_INT 18
15122: PUSH
15123: LD_INT 22
15125: PUSH
15126: LD_INT 20
15128: PUSH
15129: LD_INT 19
15131: PUSH
15132: LD_INT 25
15134: PUSH
15135: LD_INT 17
15137: PUSH
15138: LD_INT 24
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15158: LD_ADDR_LOC 21
15162: PUSH
15163: EMPTY
15164: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15165: LD_ADDR_LOC 22
15169: PUSH
15170: EMPTY
15171: ST_TO_ADDR
// Banned_Controls := [ ] ;
15172: LD_ADDR_LOC 23
15176: PUSH
15177: EMPTY
15178: ST_TO_ADDR
// Banned_Engines := [ ] ;
15179: LD_ADDR_LOC 24
15183: PUSH
15184: EMPTY
15185: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15186: LD_ADDR_LOC 19
15190: PUSH
15191: EMPTY
15192: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15193: LD_ADDR_LOC 20
15197: PUSH
15198: EMPTY
15199: ST_TO_ADDR
// No_Mechs := true ;
15200: LD_ADDR_EXP 66
15204: PUSH
15205: LD_INT 1
15207: ST_TO_ADDR
// end ; 4 :
15208: GO 16476
15210: LD_INT 4
15212: DOUBLE
15213: EQUAL
15214: IFTRUE 15218
15216: GO 15393
15218: POP
// begin def_base_level := 1 ;
15219: LD_ADDR_EXP 52
15223: PUSH
15224: LD_INT 1
15226: ST_TO_ADDR
// def_amount_of_people := 2 ;
15227: LD_ADDR_EXP 53
15231: PUSH
15232: LD_INT 2
15234: ST_TO_ADDR
// def_skill_level := 3 ;
15235: LD_ADDR_EXP 54
15239: PUSH
15240: LD_INT 3
15242: ST_TO_ADDR
// def_starting_resources := 3 ;
15243: LD_ADDR_EXP 55
15247: PUSH
15248: LD_INT 3
15250: ST_TO_ADDR
// def_shipments_density := 2 ;
15251: LD_ADDR_EXP 56
15255: PUSH
15256: LD_INT 2
15258: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15259: LD_ADDR_EXP 57
15263: PUSH
15264: LD_INT 1
15266: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15267: LD_ADDR_EXP 58
15271: PUSH
15272: LD_INT 2
15274: ST_TO_ADDR
// def_shared_vision := 1 ;
15275: LD_ADDR_EXP 59
15279: PUSH
15280: LD_INT 1
15282: ST_TO_ADDR
// def_morale_flags := 0 ;
15283: LD_ADDR_EXP 60
15287: PUSH
15288: LD_INT 0
15290: ST_TO_ADDR
// def_siberite_detection := 1 ;
15291: LD_ADDR_EXP 61
15295: PUSH
15296: LD_INT 1
15298: ST_TO_ADDR
// def_people_respawning := 0 ;
15299: LD_ADDR_EXP 62
15303: PUSH
15304: LD_INT 0
15306: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
15307: LD_ADDR_EXP 63
15311: PUSH
15312: LD_INT 0
15314: ST_TO_ADDR
// def_siberite_bomb := 1 ;
15315: LD_ADDR_EXP 64
15319: PUSH
15320: LD_INT 1
15322: ST_TO_ADDR
// def_builduptime := 3 ;
15323: LD_ADDR_EXP 65
15327: PUSH
15328: LD_INT 3
15330: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
15331: LD_ADDR_VAR 0 2
15335: PUSH
15336: LD_INT 1
15338: PUSH
15339: EMPTY
15340: LIST
15341: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
15342: LD_ADDR_VAR 0 3
15346: PUSH
15347: EMPTY
15348: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15349: LD_ADDR_LOC 21
15353: PUSH
15354: EMPTY
15355: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15356: LD_ADDR_LOC 22
15360: PUSH
15361: EMPTY
15362: ST_TO_ADDR
// Banned_Controls := [ ] ;
15363: LD_ADDR_LOC 23
15367: PUSH
15368: EMPTY
15369: ST_TO_ADDR
// Banned_Engines := [ ] ;
15370: LD_ADDR_LOC 24
15374: PUSH
15375: EMPTY
15376: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15377: LD_ADDR_LOC 19
15381: PUSH
15382: EMPTY
15383: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15384: LD_ADDR_LOC 20
15388: PUSH
15389: EMPTY
15390: ST_TO_ADDR
// end ; 5 :
15391: GO 16476
15393: LD_INT 5
15395: DOUBLE
15396: EQUAL
15397: IFTRUE 15401
15399: GO 15650
15401: POP
// begin def_base_level := 0 ;
15402: LD_ADDR_EXP 52
15406: PUSH
15407: LD_INT 0
15409: ST_TO_ADDR
// def_amount_of_people := 0 ;
15410: LD_ADDR_EXP 53
15414: PUSH
15415: LD_INT 0
15417: ST_TO_ADDR
// def_skill_level := 0 ;
15418: LD_ADDR_EXP 54
15422: PUSH
15423: LD_INT 0
15425: ST_TO_ADDR
// def_starting_resources := 0 ;
15426: LD_ADDR_EXP 55
15430: PUSH
15431: LD_INT 0
15433: ST_TO_ADDR
// def_shipments_density := 0 ;
15434: LD_ADDR_EXP 56
15438: PUSH
15439: LD_INT 0
15441: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15442: LD_ADDR_EXP 57
15446: PUSH
15447: LD_INT 0
15449: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15450: LD_ADDR_EXP 58
15454: PUSH
15455: LD_INT 0
15457: ST_TO_ADDR
// def_shared_vision := 1 ;
15458: LD_ADDR_EXP 59
15462: PUSH
15463: LD_INT 1
15465: ST_TO_ADDR
// def_morale_flags := 0 ;
15466: LD_ADDR_EXP 60
15470: PUSH
15471: LD_INT 0
15473: ST_TO_ADDR
// def_siberite_detection := 0 ;
15474: LD_ADDR_EXP 61
15478: PUSH
15479: LD_INT 0
15481: ST_TO_ADDR
// def_people_respawning := 1 ;
15482: LD_ADDR_EXP 62
15486: PUSH
15487: LD_INT 1
15489: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15490: LD_ADDR_EXP 63
15494: PUSH
15495: LD_INT 1
15497: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15498: LD_ADDR_EXP 64
15502: PUSH
15503: LD_INT 0
15505: ST_TO_ADDR
// def_builduptime := 0 ;
15506: LD_ADDR_EXP 65
15510: PUSH
15511: LD_INT 0
15513: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
15514: LD_ADDR_VAR 0 2
15518: PUSH
15519: LD_INT 10
15521: PUSH
15522: LD_INT 3
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
15529: LD_ADDR_VAR 0 3
15533: PUSH
15534: LD_INT 12
15536: PUSH
15537: LD_INT 11
15539: PUSH
15540: LD_INT 14
15542: PUSH
15543: LD_INT 13
15545: PUSH
15546: LD_INT 5
15548: PUSH
15549: LD_INT 24
15551: PUSH
15552: LD_INT 21
15554: PUSH
15555: LD_INT 33
15557: PUSH
15558: LD_INT 36
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
15572: LD_ADDR_LOC 21
15576: PUSH
15577: LD_INT 31
15579: PUSH
15580: EMPTY
15581: LIST
15582: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15583: LD_ADDR_LOC 22
15587: PUSH
15588: EMPTY
15589: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
15590: LD_ADDR_LOC 23
15594: PUSH
15595: LD_INT 2
15597: PUSH
15598: EMPTY
15599: LIST
15600: ST_TO_ADDR
// Banned_Engines := [ ] ;
15601: LD_ADDR_LOC 24
15605: PUSH
15606: EMPTY
15607: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
15608: LD_ADDR_LOC 19
15612: PUSH
15613: LD_INT 4
15615: PUSH
15616: EMPTY
15617: LIST
15618: PUSH
15619: LD_INT 31
15621: PUSH
15622: LD_INT 32
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
15633: LD_ADDR_LOC 20
15637: PUSH
15638: LD_INT 1
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: ST_TO_ADDR
// end ; 6 :
15648: GO 16476
15650: LD_INT 6
15652: DOUBLE
15653: EQUAL
15654: IFTRUE 15658
15656: GO 15861
15658: POP
// begin def_base_level := 1 ;
15659: LD_ADDR_EXP 52
15663: PUSH
15664: LD_INT 1
15666: ST_TO_ADDR
// def_amount_of_people := 2 ;
15667: LD_ADDR_EXP 53
15671: PUSH
15672: LD_INT 2
15674: ST_TO_ADDR
// def_skill_level := 3 ;
15675: LD_ADDR_EXP 54
15679: PUSH
15680: LD_INT 3
15682: ST_TO_ADDR
// def_starting_resources := 3 ;
15683: LD_ADDR_EXP 55
15687: PUSH
15688: LD_INT 3
15690: ST_TO_ADDR
// def_shipments_density := 1 ;
15691: LD_ADDR_EXP 56
15695: PUSH
15696: LD_INT 1
15698: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15699: LD_ADDR_EXP 57
15703: PUSH
15704: LD_INT 0
15706: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15707: LD_ADDR_EXP 58
15711: PUSH
15712: LD_INT 1
15714: ST_TO_ADDR
// def_shared_vision := 1 ;
15715: LD_ADDR_EXP 59
15719: PUSH
15720: LD_INT 1
15722: ST_TO_ADDR
// def_morale_flags := 0 ;
15723: LD_ADDR_EXP 60
15727: PUSH
15728: LD_INT 0
15730: ST_TO_ADDR
// def_siberite_detection := 1 ;
15731: LD_ADDR_EXP 61
15735: PUSH
15736: LD_INT 1
15738: ST_TO_ADDR
// def_people_respawning := 2 ;
15739: LD_ADDR_EXP 62
15743: PUSH
15744: LD_INT 2
15746: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15747: LD_ADDR_EXP 63
15751: PUSH
15752: LD_INT 1
15754: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15755: LD_ADDR_EXP 64
15759: PUSH
15760: LD_INT 0
15762: ST_TO_ADDR
// def_builduptime := 1 ;
15763: LD_ADDR_EXP 65
15767: PUSH
15768: LD_INT 1
15770: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15771: LD_ADDR_VAR 0 2
15775: PUSH
15776: LD_INT 23
15778: PUSH
15779: EMPTY
15780: LIST
15781: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
15782: LD_ADDR_VAR 0 3
15786: PUSH
15787: LD_INT 2
15789: PUSH
15790: LD_INT 37
15792: PUSH
15793: LD_INT 31
15795: PUSH
15796: LD_INT 32
15798: PUSH
15799: LD_INT 33
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15809: LD_ADDR_LOC 21
15813: PUSH
15814: EMPTY
15815: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15816: LD_ADDR_LOC 22
15820: PUSH
15821: EMPTY
15822: ST_TO_ADDR
// Banned_Controls := [ ] ;
15823: LD_ADDR_LOC 23
15827: PUSH
15828: EMPTY
15829: ST_TO_ADDR
// Banned_Engines := [ ] ;
15830: LD_ADDR_LOC 24
15834: PUSH
15835: EMPTY
15836: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15837: LD_ADDR_LOC 19
15841: PUSH
15842: EMPTY
15843: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15844: LD_ADDR_LOC 20
15848: PUSH
15849: EMPTY
15850: ST_TO_ADDR
// No_Mechs := true ;
15851: LD_ADDR_EXP 66
15855: PUSH
15856: LD_INT 1
15858: ST_TO_ADDR
// end ; 7 :
15859: GO 16476
15861: LD_INT 7
15863: DOUBLE
15864: EQUAL
15865: IFTRUE 15869
15867: GO 16067
15869: POP
// begin def_base_level := 1 ;
15870: LD_ADDR_EXP 52
15874: PUSH
15875: LD_INT 1
15877: ST_TO_ADDR
// def_amount_of_people := 2 ;
15878: LD_ADDR_EXP 53
15882: PUSH
15883: LD_INT 2
15885: ST_TO_ADDR
// def_skill_level := 3 ;
15886: LD_ADDR_EXP 54
15890: PUSH
15891: LD_INT 3
15893: ST_TO_ADDR
// def_starting_resources := 3 ;
15894: LD_ADDR_EXP 55
15898: PUSH
15899: LD_INT 3
15901: ST_TO_ADDR
// def_shipments_density := 1 ;
15902: LD_ADDR_EXP 56
15906: PUSH
15907: LD_INT 1
15909: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15910: LD_ADDR_EXP 57
15914: PUSH
15915: LD_INT 1
15917: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15918: LD_ADDR_EXP 58
15922: PUSH
15923: LD_INT 2
15925: ST_TO_ADDR
// def_shared_vision := 1 ;
15926: LD_ADDR_EXP 59
15930: PUSH
15931: LD_INT 1
15933: ST_TO_ADDR
// def_morale_flags := 0 ;
15934: LD_ADDR_EXP 60
15938: PUSH
15939: LD_INT 0
15941: ST_TO_ADDR
// def_siberite_detection := 1 ;
15942: LD_ADDR_EXP 61
15946: PUSH
15947: LD_INT 1
15949: ST_TO_ADDR
// def_people_respawning := 0 ;
15950: LD_ADDR_EXP 62
15954: PUSH
15955: LD_INT 0
15957: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15958: LD_ADDR_EXP 63
15962: PUSH
15963: LD_INT 1
15965: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15966: LD_ADDR_EXP 64
15970: PUSH
15971: LD_INT 0
15973: ST_TO_ADDR
// def_builduptime := 3 ;
15974: LD_ADDR_EXP 65
15978: PUSH
15979: LD_INT 3
15981: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15982: LD_ADDR_VAR 0 2
15986: PUSH
15987: LD_INT 23
15989: PUSH
15990: EMPTY
15991: LIST
15992: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
15993: LD_ADDR_VAR 0 3
15997: PUSH
15998: LD_INT 37
16000: PUSH
16001: EMPTY
16002: LIST
16003: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16004: LD_ADDR_LOC 21
16008: PUSH
16009: EMPTY
16010: ST_TO_ADDR
// Banned_Chassis := [ ] ;
16011: LD_ADDR_LOC 22
16015: PUSH
16016: EMPTY
16017: ST_TO_ADDR
// Banned_Controls := [ ] ;
16018: LD_ADDR_LOC 23
16022: PUSH
16023: EMPTY
16024: ST_TO_ADDR
// Banned_Engines := [ ] ;
16025: LD_ADDR_LOC 24
16029: PUSH
16030: EMPTY
16031: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
16032: LD_ADDR_LOC 19
16036: PUSH
16037: LD_INT 31
16039: PUSH
16040: LD_INT 32
16042: PUSH
16043: LD_INT 33
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
16054: LD_ADDR_LOC 20
16058: PUSH
16059: LD_INT 10
16061: PUSH
16062: EMPTY
16063: LIST
16064: ST_TO_ADDR
// end ; 8 :
16065: GO 16476
16067: LD_INT 8
16069: DOUBLE
16070: EQUAL
16071: IFTRUE 16075
16073: GO 16475
16075: POP
// begin def_base_level := 0 ;
16076: LD_ADDR_EXP 52
16080: PUSH
16081: LD_INT 0
16083: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
16084: LD_ADDR_EXP 53
16088: PUSH
16089: LD_INT 0
16091: PPUSH
16092: LD_INT 1
16094: PPUSH
16095: CALL_OW 12
16099: ST_TO_ADDR
// def_skill_level := 0 ;
16100: LD_ADDR_EXP 54
16104: PUSH
16105: LD_INT 0
16107: ST_TO_ADDR
// def_starting_resources := 2 ;
16108: LD_ADDR_EXP 55
16112: PUSH
16113: LD_INT 2
16115: ST_TO_ADDR
// def_shipments_density := 1 ;
16116: LD_ADDR_EXP 56
16120: PUSH
16121: LD_INT 1
16123: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
16124: LD_ADDR_EXP 57
16128: PUSH
16129: LD_INT 0
16131: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
16132: LD_ADDR_EXP 58
16136: PUSH
16137: LD_INT 0
16139: ST_TO_ADDR
// def_shared_vision := 1 ;
16140: LD_ADDR_EXP 59
16144: PUSH
16145: LD_INT 1
16147: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
16148: LD_ADDR_EXP 60
16152: PUSH
16153: LD_INT 0
16155: PPUSH
16156: LD_INT 2
16158: PPUSH
16159: CALL_OW 12
16163: ST_TO_ADDR
// def_siberite_detection := 0 ;
16164: LD_ADDR_EXP 61
16168: PUSH
16169: LD_INT 0
16171: ST_TO_ADDR
// def_people_respawning := 0 ;
16172: LD_ADDR_EXP 62
16176: PUSH
16177: LD_INT 0
16179: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16180: LD_ADDR_EXP 63
16184: PUSH
16185: LD_INT 2
16187: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16188: LD_ADDR_EXP 64
16192: PUSH
16193: LD_INT 0
16195: ST_TO_ADDR
// def_builduptime := 0 ;
16196: LD_ADDR_EXP 65
16200: PUSH
16201: LD_INT 0
16203: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
16204: LD_ADDR_VAR 0 2
16208: PUSH
16209: LD_INT 23
16211: PUSH
16212: LD_INT 20
16214: PUSH
16215: LD_INT 40
16217: PUSH
16218: LD_INT 47
16220: PUSH
16221: LD_INT 46
16223: PUSH
16224: LD_INT 39
16226: PUSH
16227: LD_INT 71
16229: PUSH
16230: LD_INT 34
16232: PUSH
16233: LD_INT 41
16235: PUSH
16236: LD_INT 44
16238: PUSH
16239: LD_INT 17
16241: PUSH
16242: LD_INT 16
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
16259: LD_ADDR_VAR 0 3
16263: PUSH
16264: LD_INT 37
16266: PUSH
16267: LD_INT 5
16269: PUSH
16270: LD_INT 13
16272: PUSH
16273: LD_INT 34
16275: PUSH
16276: LD_INT 12
16278: PUSH
16279: LD_INT 15
16281: PUSH
16282: LD_INT 11
16284: PUSH
16285: LD_INT 14
16287: PUSH
16288: LD_INT 29
16290: PUSH
16291: LD_INT 30
16293: PUSH
16294: LD_INT 28
16296: PUSH
16297: LD_INT 24
16299: PUSH
16300: LD_INT 25
16302: PUSH
16303: LD_INT 20
16305: PUSH
16306: LD_INT 21
16308: PUSH
16309: LD_INT 22
16311: PUSH
16312: LD_INT 36
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16334: LD_ADDR_LOC 21
16338: PUSH
16339: EMPTY
16340: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
16341: LD_ADDR_LOC 22
16345: PUSH
16346: LD_INT 14
16348: PUSH
16349: EMPTY
16350: LIST
16351: ST_TO_ADDR
// Banned_Controls := [ ] ;
16352: LD_ADDR_LOC 23
16356: PUSH
16357: EMPTY
16358: ST_TO_ADDR
// Banned_Engines := [ ] ;
16359: LD_ADDR_LOC 24
16363: PUSH
16364: EMPTY
16365: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
16366: LD_ADDR_LOC 19
16370: PUSH
16371: LD_INT 31
16373: PUSH
16374: LD_INT 32
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 4
16383: PUSH
16384: EMPTY
16385: LIST
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
16391: LD_ADDR_LOC 20
16395: PUSH
16396: LD_INT 2
16398: PUSH
16399: LD_INT 1
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: ST_TO_ADDR
// for i := 1 to 8 do
16406: LD_ADDR_VAR 0 4
16410: PUSH
16411: DOUBLE
16412: LD_INT 1
16414: DEC
16415: ST_TO_ADDR
16416: LD_INT 8
16418: PUSH
16419: FOR_TO
16420: IFFALSE 16471
// if ( Side_Nations [ i ] = 3 ) then
16422: LD_EXP 25
16426: PUSH
16427: LD_VAR 0 4
16431: ARRAY
16432: PUSH
16433: LD_INT 3
16435: EQUAL
16436: IFFALSE 16469
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
16438: LD_ADDR_EXP 25
16442: PUSH
16443: LD_EXP 25
16447: PPUSH
16448: LD_VAR 0 4
16452: PPUSH
16453: LD_INT 1
16455: PPUSH
16456: LD_INT 2
16458: PPUSH
16459: CALL_OW 12
16463: PPUSH
16464: CALL_OW 1
16468: ST_TO_ADDR
16469: GO 16419
16471: POP
16472: POP
// end ; end ;
16473: GO 16476
16475: POP
// for i := 1 to 8 do
16476: LD_ADDR_VAR 0 4
16480: PUSH
16481: DOUBLE
16482: LD_INT 1
16484: DEC
16485: ST_TO_ADDR
16486: LD_INT 8
16488: PUSH
16489: FOR_TO
16490: IFFALSE 16574
// if Side_Positions [ i ] then
16492: LD_EXP 24
16496: PUSH
16497: LD_VAR 0 4
16501: ARRAY
16502: IFFALSE 16572
// begin for j in Unavailable_Techs do
16504: LD_ADDR_VAR 0 5
16508: PUSH
16509: LD_VAR 0 2
16513: PUSH
16514: FOR_IN
16515: IFFALSE 16536
// SetTech ( j , i , 0 ) ;
16517: LD_VAR 0 5
16521: PPUSH
16522: LD_VAR 0 4
16526: PPUSH
16527: LD_INT 0
16529: PPUSH
16530: CALL_OW 322
16534: GO 16514
16536: POP
16537: POP
// for j in Unavailable_Builds do
16538: LD_ADDR_VAR 0 5
16542: PUSH
16543: LD_VAR 0 3
16547: PUSH
16548: FOR_IN
16549: IFFALSE 16570
// SetRestrict ( j , i , 0 ) ;
16551: LD_VAR 0 5
16555: PPUSH
16556: LD_VAR 0 4
16560: PPUSH
16561: LD_INT 0
16563: PPUSH
16564: CALL_OW 324
16568: GO 16548
16570: POP
16571: POP
// end ;
16572: GO 16489
16574: POP
16575: POP
// end ;
16576: LD_VAR 0 1
16580: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
16581: LD_INT 0
16583: PPUSH
16584: PPUSH
16585: PPUSH
16586: PPUSH
16587: PPUSH
16588: PPUSH
16589: PPUSH
// for i := 1 to Restricted_Builds do
16590: LD_ADDR_VAR 0 2
16594: PUSH
16595: DOUBLE
16596: LD_INT 1
16598: DEC
16599: ST_TO_ADDR
16600: LD_LOC 19
16604: PUSH
16605: FOR_TO
16606: IFFALSE 16916
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
16608: LD_LOC 19
16612: PUSH
16613: LD_VAR 0 2
16617: ARRAY
16618: PUSH
16619: LD_INT 1
16621: ARRAY
16622: PUSH
16623: LD_INT 31
16625: DOUBLE
16626: EQUAL
16627: IFTRUE 16643
16629: LD_INT 32
16631: DOUBLE
16632: EQUAL
16633: IFTRUE 16643
16635: LD_INT 33
16637: DOUBLE
16638: EQUAL
16639: IFTRUE 16643
16641: GO 16654
16643: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
16644: LD_ADDR_VAR 0 6
16648: PUSH
16649: LD_STRING #Turrets
16651: ST_TO_ADDR
16652: GO 16699
16654: LD_INT 4
16656: DOUBLE
16657: EQUAL
16658: IFTRUE 16668
16660: LD_INT 5
16662: DOUBLE
16663: EQUAL
16664: IFTRUE 16668
16666: GO 16679
16668: POP
// btype := #Armouries ; b_Behemoth :
16669: LD_ADDR_VAR 0 6
16673: PUSH
16674: LD_STRING #Armouries
16676: ST_TO_ADDR
16677: GO 16699
16679: LD_INT 37
16681: DOUBLE
16682: EQUAL
16683: IFTRUE 16687
16685: GO 16698
16687: POP
// btype := #Behemoths ; end ;
16688: LD_ADDR_VAR 0 6
16692: PUSH
16693: LD_STRING #Behemoths
16695: ST_TO_ADDR
16696: GO 16699
16698: POP
// list := [ ] ;
16699: LD_ADDR_VAR 0 7
16703: PUSH
16704: EMPTY
16705: ST_TO_ADDR
// for j := 1 to 8 do
16706: LD_ADDR_VAR 0 3
16710: PUSH
16711: DOUBLE
16712: LD_INT 1
16714: DEC
16715: ST_TO_ADDR
16716: LD_INT 8
16718: PUSH
16719: FOR_TO
16720: IFFALSE 16813
// if Side_Positions [ j ] then
16722: LD_EXP 24
16726: PUSH
16727: LD_VAR 0 3
16731: ARRAY
16732: IFFALSE 16811
// begin amount := 0 ;
16734: LD_ADDR_VAR 0 5
16738: PUSH
16739: LD_INT 0
16741: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
16742: LD_ADDR_VAR 0 4
16746: PUSH
16747: LD_LOC 19
16751: PUSH
16752: LD_VAR 0 2
16756: ARRAY
16757: PUSH
16758: FOR_IN
16759: IFFALSE 16807
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
16761: LD_ADDR_VAR 0 5
16765: PUSH
16766: LD_VAR 0 5
16770: PUSH
16771: LD_INT 22
16773: PUSH
16774: LD_VAR 0 3
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 30
16785: PUSH
16786: LD_VAR 0 4
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PPUSH
16799: CALL_OW 69
16803: PLUS
16804: ST_TO_ADDR
16805: GO 16758
16807: POP
16808: POP
// break ;
16809: GO 16813
// end ;
16811: GO 16719
16813: POP
16814: POP
// list := [ ] ;
16815: LD_ADDR_VAR 0 7
16819: PUSH
16820: EMPTY
16821: ST_TO_ADDR
// for j := 1 to 8 do
16822: LD_ADDR_VAR 0 3
16826: PUSH
16827: DOUBLE
16828: LD_INT 1
16830: DEC
16831: ST_TO_ADDR
16832: LD_INT 8
16834: PUSH
16835: FOR_TO
16836: IFFALSE 16856
// list := list ^ amount ;
16838: LD_ADDR_VAR 0 7
16842: PUSH
16843: LD_VAR 0 7
16847: PUSH
16848: LD_VAR 0 5
16852: ADD
16853: ST_TO_ADDR
16854: GO 16835
16856: POP
16857: POP
// Already_Built := Already_Built ^ [ list ] ;
16858: LD_ADDR_LOC 25
16862: PUSH
16863: LD_LOC 25
16867: PUSH
16868: LD_VAR 0 7
16872: PUSH
16873: EMPTY
16874: LIST
16875: ADD
16876: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
16877: LD_ADDR_LOC 26
16881: PUSH
16882: LD_LOC 26
16886: PUSH
16887: LD_VAR 0 6
16891: PUSH
16892: LD_VAR 0 5
16896: PUSH
16897: LD_LOC 20
16901: PUSH
16902: LD_VAR 0 2
16906: ARRAY
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: ADD
16913: ST_TO_ADDR
// end ;
16914: GO 16605
16916: POP
16917: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16918: LD_ADDR_LOC 27
16922: PUSH
16923: LD_INT 0
16925: PUSH
16926: LD_INT 0
16928: PUSH
16929: LD_INT 0
16931: PUSH
16932: LD_INT 0
16934: PUSH
16935: LD_INT 0
16937: PUSH
16938: LD_INT 0
16940: PUSH
16941: LD_INT 0
16943: PUSH
16944: LD_INT 0
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: ST_TO_ADDR
// if Limits_Info then
16957: LD_LOC 26
16961: IFFALSE 16977
// Limits_Info := #Limits ^ Limits_Info ;
16963: LD_ADDR_LOC 26
16967: PUSH
16968: LD_STRING #Limits
16970: PUSH
16971: LD_LOC 26
16975: ADD
16976: ST_TO_ADDR
// end ;
16977: LD_VAR 0 1
16981: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
16982: LD_INT 0
16984: PPUSH
16985: PPUSH
16986: PPUSH
16987: PPUSH
// for i := 1 to Restricted_Builds do
16988: LD_ADDR_VAR 0 7
16992: PUSH
16993: DOUBLE
16994: LD_INT 1
16996: DEC
16997: ST_TO_ADDR
16998: LD_LOC 19
17002: PUSH
17003: FOR_TO
17004: IFFALSE 17427
// if BType in Restricted_Builds [ i ] then
17006: LD_VAR 0 2
17010: PUSH
17011: LD_LOC 19
17015: PUSH
17016: LD_VAR 0 7
17020: ARRAY
17021: IN
17022: IFFALSE 17425
// begin if old_side then
17024: LD_VAR 0 4
17028: IFFALSE 17154
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
17030: LD_LOC 25
17034: PUSH
17035: LD_VAR 0 7
17039: ARRAY
17040: PUSH
17041: LD_VAR 0 3
17045: ARRAY
17046: PUSH
17047: LD_VAR 0 5
17051: PLUS
17052: PUSH
17053: LD_LOC 20
17057: PUSH
17058: LD_VAR 0 7
17062: ARRAY
17063: GREATER
17064: IFFALSE 17090
// begin SetSide ( un , old_side ) ;
17066: LD_VAR 0 1
17070: PPUSH
17071: LD_VAR 0 4
17075: PPUSH
17076: CALL_OW 235
// count := 0 ;
17080: LD_ADDR_VAR 0 5
17084: PUSH
17085: LD_INT 0
17087: ST_TO_ADDR
// end else
17088: GO 17154
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
17090: LD_ADDR_LOC 25
17094: PUSH
17095: LD_LOC 25
17099: PPUSH
17100: LD_VAR 0 7
17104: PPUSH
17105: LD_LOC 25
17109: PUSH
17110: LD_VAR 0 7
17114: ARRAY
17115: PPUSH
17116: LD_VAR 0 4
17120: PPUSH
17121: LD_LOC 25
17125: PUSH
17126: LD_VAR 0 7
17130: ARRAY
17131: PUSH
17132: LD_VAR 0 4
17136: ARRAY
17137: PUSH
17138: LD_VAR 0 5
17142: MINUS
17143: PPUSH
17144: CALL_OW 1
17148: PPUSH
17149: CALL_OW 1
17153: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
17154: LD_ADDR_LOC 25
17158: PUSH
17159: LD_LOC 25
17163: PPUSH
17164: LD_VAR 0 7
17168: PPUSH
17169: LD_LOC 25
17173: PUSH
17174: LD_VAR 0 7
17178: ARRAY
17179: PPUSH
17180: LD_VAR 0 3
17184: PPUSH
17185: LD_LOC 25
17189: PUSH
17190: LD_VAR 0 7
17194: ARRAY
17195: PUSH
17196: LD_VAR 0 3
17200: ARRAY
17201: PUSH
17202: LD_VAR 0 5
17206: PLUS
17207: PPUSH
17208: CALL_OW 1
17212: PPUSH
17213: CALL_OW 1
17217: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
17218: LD_VAR 0 5
17222: PUSH
17223: LD_INT 0
17225: NONEQUAL
17226: PUSH
17227: LD_VAR 0 3
17231: PUSH
17232: LD_OWVAR 2
17236: EQUAL
17237: AND
17238: IFFALSE 17281
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
17240: LD_ADDR_LOC 26
17244: PUSH
17245: LD_LOC 26
17249: PPUSH
17250: LD_INT 3
17252: PUSH
17253: LD_VAR 0 7
17257: MUL
17258: PPUSH
17259: LD_LOC 25
17263: PUSH
17264: LD_VAR 0 7
17268: ARRAY
17269: PUSH
17270: LD_VAR 0 3
17274: ARRAY
17275: PPUSH
17276: CALL_OW 1
17280: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
17281: LD_LOC 25
17285: PUSH
17286: LD_VAR 0 7
17290: ARRAY
17291: PUSH
17292: LD_VAR 0 3
17296: ARRAY
17297: PUSH
17298: LD_LOC 20
17302: PUSH
17303: LD_VAR 0 7
17307: ARRAY
17308: GREATER
17309: IFFALSE 17336
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
17311: LD_ADDR_LOC 27
17315: PUSH
17316: LD_LOC 27
17320: PPUSH
17321: LD_VAR 0 3
17325: PPUSH
17326: LD_INT 1
17328: PPUSH
17329: CALL_OW 1
17333: ST_TO_ADDR
// end else
17334: GO 17423
// begin for j := 1 to Restricted_Builds do
17336: LD_ADDR_VAR 0 8
17340: PUSH
17341: DOUBLE
17342: LD_INT 1
17344: DEC
17345: ST_TO_ADDR
17346: LD_LOC 19
17350: PUSH
17351: FOR_TO
17352: IFFALSE 17396
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
17354: LD_LOC 25
17358: PUSH
17359: LD_VAR 0 8
17363: ARRAY
17364: PUSH
17365: LD_VAR 0 3
17369: ARRAY
17370: PUSH
17371: LD_LOC 20
17375: PUSH
17376: LD_VAR 0 8
17380: ARRAY
17381: GREATER
17382: IFFALSE 17394
// begin Is_Cheater := true ;
17384: LD_ADDR_VAR 0 9
17388: PUSH
17389: LD_INT 1
17391: ST_TO_ADDR
// break ;
17392: GO 17396
// end ;
17394: GO 17351
17396: POP
17397: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
17398: LD_ADDR_LOC 27
17402: PUSH
17403: LD_LOC 27
17407: PPUSH
17408: LD_VAR 0 3
17412: PPUSH
17413: LD_VAR 0 9
17417: PPUSH
17418: CALL_OW 1
17422: ST_TO_ADDR
// end ; break ;
17423: GO 17427
// end ;
17425: GO 17003
17427: POP
17428: POP
// end ;
17429: LD_VAR 0 6
17433: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
17434: LD_VAR 0 5
17438: PUSH
17439: LD_LOC 21
17443: IN
17444: PUSH
17445: LD_VAR 0 2
17449: PUSH
17450: LD_LOC 22
17454: IN
17455: OR
17456: PUSH
17457: LD_VAR 0 4
17461: PUSH
17462: LD_LOC 23
17466: IN
17467: OR
17468: PUSH
17469: LD_VAR 0 3
17473: PUSH
17474: LD_LOC 24
17478: IN
17479: OR
17480: IFFALSE 17491
// ComCancel ( factory ) ;
17482: LD_VAR 0 1
17486: PPUSH
17487: CALL_OW 127
// end ;
17491: PPOPN 5
17493: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
17494: LD_VAR 0 2
17498: PUSH
17499: LD_LOC 21
17503: IN
17504: IFFALSE 17515
// ComCancel ( building ) ;
17506: LD_VAR 0 1
17510: PPUSH
17511: CALL_OW 127
// end ; end_of_file
17515: PPOPN 2
17517: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
17518: LD_INT 0
17520: PPUSH
17521: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
17522: LD_ADDR_VAR 0 2
17526: PUSH
17527: LD_STRING #Multi1x1-Time
17529: PUSH
17530: LD_OWVAR 1
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: ST_TO_ADDR
// if WaitServerStrings then
17539: LD_EXP 68
17543: IFFALSE 17561
// AllStrings = AllStrings ^ WaitServerStrings ;
17545: LD_ADDR_VAR 0 2
17549: PUSH
17550: LD_VAR 0 2
17554: PUSH
17555: LD_EXP 68
17559: ADD
17560: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
17561: LD_INT 0
17563: PUSH
17564: LD_EXP 19
17568: PUSH
17569: LD_OWVAR 1
17573: MINUS
17574: LESSEQUAL
17575: IFFALSE 17606
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
17577: LD_ADDR_VAR 0 2
17581: PUSH
17582: LD_VAR 0 2
17586: PUSH
17587: LD_STRING #allowedsibbomb
17589: PUSH
17590: LD_EXP 19
17594: PUSH
17595: LD_OWVAR 1
17599: MINUS
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: ADD
17605: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
17606: LD_INT 0
17608: PUSH
17609: LD_EXP 18
17613: PUSH
17614: LD_OWVAR 1
17618: MINUS
17619: LESSEQUAL
17620: IFFALSE 17651
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
17622: LD_ADDR_VAR 0 2
17626: PUSH
17627: LD_VAR 0 2
17631: PUSH
17632: LD_STRING #builduptime
17634: PUSH
17635: LD_EXP 18
17639: PUSH
17640: LD_OWVAR 1
17644: MINUS
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: ADD
17650: ST_TO_ADDR
// if ( ExtraStrings ) then
17651: LD_EXP 67
17655: IFFALSE 17677
// AllStrings := AllStrings ^  ^ ExtraStrings ;
17657: LD_ADDR_VAR 0 2
17661: PUSH
17662: LD_VAR 0 2
17666: PUSH
17667: LD_STRING 
17669: ADD
17670: PUSH
17671: LD_EXP 67
17675: ADD
17676: ST_TO_ADDR
// if Display_kings and not isSGUI then
17677: LD_EXP 69
17681: PUSH
17682: LD_OWVAR 83
17686: NOT
17687: AND
17688: IFFALSE 17706
// AllStrings = AllStrings ^ Display_kings ;
17690: LD_ADDR_VAR 0 2
17694: PUSH
17695: LD_VAR 0 2
17699: PUSH
17700: LD_EXP 69
17704: ADD
17705: ST_TO_ADDR
// if ( LimitsStrings ) then
17706: CALL 14358 0 0
17710: IFFALSE 17732
// AllStrings := AllStrings ^  ^ LimitsStrings ;
17712: LD_ADDR_VAR 0 2
17716: PUSH
17717: LD_VAR 0 2
17721: PUSH
17722: LD_STRING 
17724: ADD
17725: PUSH
17726: CALL 14358 0 0
17730: ADD
17731: ST_TO_ADDR
// Display_Strings := AllStrings ;
17732: LD_ADDR_OWVAR 47
17736: PUSH
17737: LD_VAR 0 2
17741: ST_TO_ADDR
// end ;
17742: LD_VAR 0 1
17746: RET
// every 0 0$1 do
17747: GO 17749
17749: DISABLE
// begin ShowTimer ;
17750: CALL 17518 0 0
// enable ;
17754: ENABLE
// end ; end_of_file
17755: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
17756: LD_INT 0
17758: PPUSH
17759: PPUSH
17760: PPUSH
// sharedPoints1 = [ ] ;
17761: LD_ADDR_LOC 28
17765: PUSH
17766: EMPTY
17767: ST_TO_ADDR
// sharedPoints2 = [ ] ;
17768: LD_ADDR_LOC 29
17772: PUSH
17773: EMPTY
17774: ST_TO_ADDR
// sharedPoints3 = [ ] ;
17775: LD_ADDR_LOC 30
17779: PUSH
17780: EMPTY
17781: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
17782: LD_ADDR_VAR 0 2
17786: PUSH
17787: DOUBLE
17788: LD_INT 1
17790: DEC
17791: ST_TO_ADDR
17792: LD_EXP 24
17796: PUSH
17797: LD_INT 0
17799: PLUS
17800: PUSH
17801: FOR_TO
17802: IFFALSE 17904
// begin if not Side_Positions [ i ] = 0 then
17804: LD_EXP 24
17808: PUSH
17809: LD_VAR 0 2
17813: ARRAY
17814: PUSH
17815: LD_INT 0
17817: EQUAL
17818: NOT
17819: IFFALSE 17833
// SetMultiScore ( i , 0 ) ;
17821: LD_VAR 0 2
17825: PPUSH
17826: LD_INT 0
17828: PPUSH
17829: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
17833: LD_ADDR_LOC 28
17837: PUSH
17838: LD_LOC 28
17842: PPUSH
17843: LD_VAR 0 2
17847: PPUSH
17848: LD_INT 0
17850: PPUSH
17851: CALL_OW 1
17855: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
17856: LD_ADDR_LOC 29
17860: PUSH
17861: LD_LOC 29
17865: PPUSH
17866: LD_VAR 0 2
17870: PPUSH
17871: LD_INT 0
17873: PPUSH
17874: CALL_OW 1
17878: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
17879: LD_ADDR_LOC 30
17883: PUSH
17884: LD_LOC 30
17888: PPUSH
17889: LD_VAR 0 2
17893: PPUSH
17894: LD_INT 0
17896: PPUSH
17897: CALL_OW 1
17901: ST_TO_ADDR
// end ;
17902: GO 17801
17904: POP
17905: POP
// pointGame = true ;
17906: LD_ADDR_LOC 31
17910: PUSH
17911: LD_INT 1
17913: ST_TO_ADDR
// end ;
17914: LD_VAR 0 1
17918: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
17919: LD_LOC 31
17923: IFFALSE 18334
17925: GO 17927
17927: DISABLE
17928: LD_INT 0
17930: PPUSH
17931: PPUSH
17932: PPUSH
17933: PPUSH
17934: PPUSH
17935: PPUSH
17936: PPUSH
17937: PPUSH
17938: PPUSH
17939: PPUSH
17940: PPUSH
17941: PPUSH
17942: PPUSH
// begin if isSGUI then
17943: LD_OWVAR 83
17947: IFFALSE 18334
// begin if Teams [ 1 ] then
17949: LD_EXP 23
17953: PUSH
17954: LD_INT 1
17956: ARRAY
17957: IFFALSE 17969
// red = true else
17959: LD_ADDR_VAR 0 2
17963: PUSH
17964: LD_INT 1
17966: ST_TO_ADDR
17967: GO 17977
// red = false ;
17969: LD_ADDR_VAR 0 2
17973: PUSH
17974: LD_INT 0
17976: ST_TO_ADDR
// if Teams [ 2 ] then
17977: LD_EXP 23
17981: PUSH
17982: LD_INT 2
17984: ARRAY
17985: IFFALSE 17997
// blue = true else
17987: LD_ADDR_VAR 0 3
17991: PUSH
17992: LD_INT 1
17994: ST_TO_ADDR
17995: GO 18005
// blue = false ;
17997: LD_ADDR_VAR 0 3
18001: PUSH
18002: LD_INT 0
18004: ST_TO_ADDR
// if Teams [ 3 ] then
18005: LD_EXP 23
18009: PUSH
18010: LD_INT 3
18012: ARRAY
18013: IFFALSE 18025
// yel = true else
18015: LD_ADDR_VAR 0 4
18019: PUSH
18020: LD_INT 1
18022: ST_TO_ADDR
18023: GO 18033
// yel = false ;
18025: LD_ADDR_VAR 0 4
18029: PUSH
18030: LD_INT 0
18032: ST_TO_ADDR
// if Teams [ 4 ] then
18033: LD_EXP 23
18037: PUSH
18038: LD_INT 4
18040: ARRAY
18041: IFFALSE 18053
// green = true else
18043: LD_ADDR_VAR 0 5
18047: PUSH
18048: LD_INT 1
18050: ST_TO_ADDR
18051: GO 18061
// green = false ;
18053: LD_ADDR_VAR 0 5
18057: PUSH
18058: LD_INT 0
18060: ST_TO_ADDR
// if def_public_score then
18061: LD_EXP 6
18065: IFFALSE 18077
// p = true else
18067: LD_ADDR_VAR 0 12
18071: PUSH
18072: LD_INT 1
18074: ST_TO_ADDR
18075: GO 18085
// p = false ;
18077: LD_ADDR_VAR 0 12
18081: PUSH
18082: LD_INT 0
18084: ST_TO_ADDR
// if team_game then
18085: LD_EXP 26
18089: IFFALSE 18170
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
18091: LD_ADDR_VAR 0 13
18095: PUSH
18096: LD_INT 3
18098: PUSH
18099: LD_INT 1
18101: PUSH
18102: LD_INT 2
18104: PUSH
18105: LD_INT 7
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: PUSH
18114: LD_EXP 29
18118: ARRAY
18119: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
18120: LD_ADDR_VAR 0 10
18124: PUSH
18125: LD_STRING {
18127: PUSH
18128: LD_VAR 0 3
18132: STR
18133: PUSH
18134: LD_STRING ,
18136: STR
18137: PUSH
18138: LD_VAR 0 4
18142: STR
18143: PUSH
18144: LD_STRING ,
18146: STR
18147: PUSH
18148: LD_VAR 0 2
18152: STR
18153: PUSH
18154: LD_STRING ,0,0,0,
18156: STR
18157: PUSH
18158: LD_VAR 0 5
18162: STR
18163: PUSH
18164: LD_STRING ,0}
18166: STR
18167: ST_TO_ADDR
// end else
18168: GO 18270
// begin you = your_side ;
18170: LD_ADDR_VAR 0 13
18174: PUSH
18175: LD_OWVAR 2
18179: ST_TO_ADDR
// s = { ;
18180: LD_ADDR_VAR 0 10
18184: PUSH
18185: LD_STRING {
18187: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
18188: LD_ADDR_VAR 0 1
18192: PUSH
18193: DOUBLE
18194: LD_INT 1
18196: DEC
18197: ST_TO_ADDR
18198: LD_EXP 24
18202: PUSH
18203: LD_INT 0
18205: PLUS
18206: PUSH
18207: FOR_TO
18208: IFFALSE 18254
// if side_positions [ i ] then
18210: LD_EXP 24
18214: PUSH
18215: LD_VAR 0 1
18219: ARRAY
18220: IFFALSE 18238
// s = s & 1, else
18222: LD_ADDR_VAR 0 10
18226: PUSH
18227: LD_VAR 0 10
18231: PUSH
18232: LD_STRING 1,
18234: STR
18235: ST_TO_ADDR
18236: GO 18252
// s = s & 0, ;
18238: LD_ADDR_VAR 0 10
18242: PUSH
18243: LD_VAR 0 10
18247: PUSH
18248: LD_STRING 0,
18250: STR
18251: ST_TO_ADDR
18252: GO 18207
18254: POP
18255: POP
// s = s & } ;
18256: LD_ADDR_VAR 0 10
18260: PUSH
18261: LD_VAR 0 10
18265: PUSH
18266: LD_STRING }
18268: STR
18269: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
18270: LD_STRING initScore(
18272: PUSH
18273: LD_VAR 0 10
18277: STR
18278: PUSH
18279: LD_STRING ,
18281: STR
18282: PUSH
18283: LD_VAR 0 12
18287: STR
18288: PUSH
18289: LD_STRING ,
18291: STR
18292: PUSH
18293: LD_VAR 0 13
18297: STR
18298: PUSH
18299: LD_STRING  );
18301: STR
18302: PPUSH
18303: CALL_OW 559
// if game_type = 3 then
18307: LD_EXP 50
18311: PUSH
18312: LD_INT 3
18314: EQUAL
18315: IFFALSE 18334
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
18317: LD_STRING AddScorePoints(2,2,
18319: PUSH
18320: LD_EXP 21
18324: STR
18325: PUSH
18326: LD_STRING  );
18328: STR
18329: PPUSH
18330: CALL_OW 559
// end ; end ;
18334: PPOPN 13
18336: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
18337: LD_INT 0
18339: PPUSH
18340: PPUSH
// case typ of 1 :
18341: LD_VAR 0 3
18345: PUSH
18346: LD_INT 1
18348: DOUBLE
18349: EQUAL
18350: IFTRUE 18354
18352: GO 18382
18354: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
18355: LD_ADDR_LOC 28
18359: PUSH
18360: LD_LOC 28
18364: PPUSH
18365: LD_VAR 0 1
18369: PPUSH
18370: LD_VAR 0 2
18374: PPUSH
18375: CALL_OW 1
18379: ST_TO_ADDR
18380: GO 18455
18382: LD_INT 2
18384: DOUBLE
18385: EQUAL
18386: IFTRUE 18390
18388: GO 18418
18390: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
18391: LD_ADDR_LOC 29
18395: PUSH
18396: LD_LOC 29
18400: PPUSH
18401: LD_VAR 0 1
18405: PPUSH
18406: LD_VAR 0 2
18410: PPUSH
18411: CALL_OW 1
18415: ST_TO_ADDR
18416: GO 18455
18418: LD_INT 3
18420: DOUBLE
18421: EQUAL
18422: IFTRUE 18426
18424: GO 18454
18426: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
18427: LD_ADDR_LOC 30
18431: PUSH
18432: LD_LOC 30
18436: PPUSH
18437: LD_VAR 0 1
18441: PPUSH
18442: LD_VAR 0 2
18446: PPUSH
18447: CALL_OW 1
18451: ST_TO_ADDR
18452: GO 18455
18454: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
18455: LD_ADDR_VAR 0 5
18459: PUSH
18460: LD_LOC 28
18464: PUSH
18465: LD_VAR 0 1
18469: ARRAY
18470: PUSH
18471: LD_LOC 29
18475: PUSH
18476: LD_VAR 0 1
18480: ARRAY
18481: PLUS
18482: PUSH
18483: LD_LOC 30
18487: PUSH
18488: LD_VAR 0 1
18492: ARRAY
18493: PLUS
18494: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
18495: LD_VAR 0 1
18499: PPUSH
18500: LD_VAR 0 5
18504: PPUSH
18505: CALL_OW 506
// end ; end_of_file
18509: LD_VAR 0 4
18513: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
18514: LD_INT 0
18516: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
18517: LD_VAR 0 1
18521: PPUSH
18522: CALL_OW 255
18526: PUSH
18527: LD_VAR 0 4
18531: EQUAL
18532: IFFALSE 18551
// begin SetAchievement ( ACH_RAD ) ;
18534: LD_STRING ACH_RAD
18536: PPUSH
18537: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
18541: LD_STRING ACH_NL
18543: PPUSH
18544: LD_INT 1
18546: PPUSH
18547: CALL_OW 564
// end end ;
18551: LD_VAR 0 5
18555: RET
// export function SA_Win ( side ) ; begin
18556: LD_INT 0
18558: PPUSH
// case side of 1 :
18559: LD_VAR 0 1
18563: PUSH
18564: LD_INT 1
18566: DOUBLE
18567: EQUAL
18568: IFTRUE 18572
18570: GO 18585
18572: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18573: LD_STRING ACH_AH
18575: PPUSH
18576: LD_INT 1
18578: PPUSH
18579: CALL_OW 564
18583: GO 18748
18585: LD_INT 2
18587: DOUBLE
18588: EQUAL
18589: IFTRUE 18593
18591: GO 18606
18593: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18594: LD_STRING ACH_E
18596: PPUSH
18597: LD_INT 1
18599: PPUSH
18600: CALL_OW 564
18604: GO 18748
18606: LD_INT 3
18608: DOUBLE
18609: EQUAL
18610: IFTRUE 18614
18612: GO 18627
18614: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18615: LD_STRING ACH_OOL
18617: PPUSH
18618: LD_INT 1
18620: PPUSH
18621: CALL_OW 564
18625: GO 18748
18627: LD_INT 1
18629: PUSH
18630: LD_INT 2
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: DOUBLE
18637: EQUAL
18638: IFTRUE 18642
18640: GO 18667
18642: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18643: LD_STRING ACH_AH
18645: PPUSH
18646: LD_REAL  5.00000000000000E-0001
18649: PPUSH
18650: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18654: LD_STRING ACH_E
18656: PPUSH
18657: LD_REAL  5.00000000000000E-0001
18660: PPUSH
18661: CALL_OW 564
// end ; [ 2 , 3 ] :
18665: GO 18748
18667: LD_INT 2
18669: PUSH
18670: LD_INT 3
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: DOUBLE
18677: EQUAL
18678: IFTRUE 18682
18680: GO 18707
18682: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18683: LD_STRING ACH_OOL
18685: PPUSH
18686: LD_REAL  5.00000000000000E-0001
18689: PPUSH
18690: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18694: LD_STRING ACH_E
18696: PPUSH
18697: LD_REAL  5.00000000000000E-0001
18700: PPUSH
18701: CALL_OW 564
// end ; [ 3 , 1 ] :
18705: GO 18748
18707: LD_INT 3
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: DOUBLE
18717: EQUAL
18718: IFTRUE 18722
18720: GO 18747
18722: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18723: LD_STRING ACH_AH
18725: PPUSH
18726: LD_REAL  5.00000000000000E-0001
18729: PPUSH
18730: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18734: LD_STRING ACH_OOL
18736: PPUSH
18737: LD_REAL  5.00000000000000E-0001
18740: PPUSH
18741: CALL_OW 564
// end ; end ;
18745: GO 18748
18747: POP
// end ; end_of_file
18748: LD_VAR 0 2
18752: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
18753: LD_INT 0
18755: PPUSH
18756: PPUSH
// enable ( 98 ) ;
18757: LD_INT 98
18759: ENABLE_MARKED
// GameEnded = false ;
18760: LD_ADDR_LOC 33
18764: PUSH
18765: LD_INT 0
18767: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18768: LD_ADDR_LOC 32
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: LD_INT 0
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: LD_INT 0
18787: PUSH
18788: LD_INT 0
18790: PUSH
18791: LD_INT 0
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: ST_TO_ADDR
// unfoged = false ;
18807: LD_ADDR_LOC 34
18811: PUSH
18812: LD_INT 0
18814: ST_TO_ADDR
// for i = 1 to side_positions do
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: DOUBLE
18821: LD_INT 1
18823: DEC
18824: ST_TO_ADDR
18825: LD_EXP 24
18829: PUSH
18830: FOR_TO
18831: IFFALSE 18871
// if not side_positions [ i ] then
18833: LD_EXP 24
18837: PUSH
18838: LD_VAR 0 2
18842: ARRAY
18843: NOT
18844: IFFALSE 18869
// defaited = replace ( defaited , i , true ) ;
18846: LD_ADDR_LOC 32
18850: PUSH
18851: LD_LOC 32
18855: PPUSH
18856: LD_VAR 0 2
18860: PPUSH
18861: LD_INT 1
18863: PPUSH
18864: CALL_OW 1
18868: ST_TO_ADDR
18869: GO 18830
18871: POP
18872: POP
// end ;
18873: LD_VAR 0 1
18877: RET
// function CanWinLoose ; begin
18878: LD_INT 0
18880: PPUSH
// Result := true ;
18881: LD_ADDR_VAR 0 1
18885: PUSH
18886: LD_INT 1
18888: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
18889: CALL_OW 518
18893: PUSH
18894: CALL_OW 519
18898: PUSH
18899: LD_INT 0
18901: GREATER
18902: AND
18903: IFFALSE 18913
// Result := false ;
18905: LD_ADDR_VAR 0 1
18909: PUSH
18910: LD_INT 0
18912: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18913: CALL_OW 531
18917: PUSH
18918: CALL_OW 519
18922: PUSH
18923: LD_INT 1
18925: GREATER
18926: AND
18927: IFFALSE 18937
// Result := false ;
18929: LD_ADDR_VAR 0 1
18933: PUSH
18934: LD_INT 0
18936: ST_TO_ADDR
// end ;
18937: LD_VAR 0 1
18941: RET
// export function HasPower ( i ) ; var k , h ; begin
18942: LD_INT 0
18944: PPUSH
18945: PPUSH
18946: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 108
18956: NOT
18957: PUSH
18958: LD_EXP 27
18962: PUSH
18963: LD_VAR 0 1
18967: ARRAY
18968: NOT
18969: AND
18970: PUSH
18971: LD_OWVAR 4
18975: AND
18976: IFFALSE 18988
// begin result = false ;
18978: LD_ADDR_VAR 0 2
18982: PUSH
18983: LD_INT 0
18985: ST_TO_ADDR
// end else
18986: GO 19283
// case def_win_rules of 0 :
18988: LD_EXP 20
18992: PUSH
18993: LD_INT 0
18995: DOUBLE
18996: EQUAL
18997: IFTRUE 19001
18999: GO 19164
19001: POP
// if def_people_respawning then
19002: LD_EXP 62
19006: IFFALSE 19097
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
19008: LD_ADDR_VAR 0 2
19012: PUSH
19013: LD_INT 22
19015: PUSH
19016: LD_VAR 0 1
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 21
19030: PUSH
19031: LD_INT 1
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 33
19040: PUSH
19041: LD_INT 3
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 33
19050: PUSH
19051: LD_INT 5
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 30
19060: PUSH
19061: LD_INT 0
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 30
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 69
19094: ST_TO_ADDR
19095: GO 19162
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
19097: LD_ADDR_VAR 0 2
19101: PUSH
19102: LD_INT 22
19104: PUSH
19105: LD_VAR 0 1
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: LD_INT 21
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 33
19129: PUSH
19130: LD_INT 3
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 33
19139: PUSH
19140: LD_INT 5
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: ST_TO_ADDR
19162: GO 19283
19164: LD_INT 1
19166: DOUBLE
19167: EQUAL
19168: IFTRUE 19172
19170: GO 19211
19172: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
19173: LD_ADDR_VAR 0 2
19177: PUSH
19178: LD_INT 22
19180: PUSH
19181: LD_VAR 0 1
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 21
19192: PUSH
19193: LD_INT 1
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PPUSH
19204: CALL_OW 69
19208: ST_TO_ADDR
19209: GO 19283
19211: LD_INT 2
19213: DOUBLE
19214: EQUAL
19215: IFTRUE 19219
19217: GO 19282
19219: POP
// begin h = false ;
19220: LD_ADDR_VAR 0 4
19224: PUSH
19225: LD_INT 0
19227: ST_TO_ADDR
// for k in heroes [ i ] do
19228: LD_ADDR_VAR 0 3
19232: PUSH
19233: LD_EXP 36
19237: PUSH
19238: LD_VAR 0 1
19242: ARRAY
19243: PUSH
19244: FOR_IN
19245: IFFALSE 19268
// if IsLive ( k ) then
19247: LD_VAR 0 3
19251: PPUSH
19252: CALL_OW 300
19256: IFFALSE 19266
// h = true ;
19258: LD_ADDR_VAR 0 4
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
19266: GO 19244
19268: POP
19269: POP
// Result := h ;
19270: LD_ADDR_VAR 0 2
19274: PUSH
19275: LD_VAR 0 4
19279: ST_TO_ADDR
// end ; end ;
19280: GO 19283
19282: POP
// end ;
19283: LD_VAR 0 2
19287: RET
// function AlliedSides ( i , j ) ; begin
19288: LD_INT 0
19290: PPUSH
// Result := false ;
19291: LD_ADDR_VAR 0 3
19295: PUSH
19296: LD_INT 0
19298: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: CALL_OW 81
19313: PUSH
19314: LD_INT 1
19316: EQUAL
19317: PUSH
19318: LD_VAR 0 2
19322: PPUSH
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 81
19332: PUSH
19333: LD_INT 1
19335: EQUAL
19336: AND
19337: PUSH
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 83
19347: AND
19348: PUSH
19349: LD_VAR 0 2
19353: PPUSH
19354: CALL_OW 83
19358: AND
19359: IFFALSE 19369
// Result := true ;
19361: LD_ADDR_VAR 0 3
19365: PUSH
19366: LD_INT 1
19368: ST_TO_ADDR
// end ;
19369: LD_VAR 0 3
19373: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
19374: CALL 18878 0 0
19378: PUSH
19379: LD_LOC 33
19383: NOT
19384: AND
19385: IFFALSE 19401
19387: GO 19389
19389: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
19390: LD_ADDR_EXP 68
19394: PUSH
19395: LD_STRING #Player-Ended
19397: PUSH
19398: EMPTY
19399: LIST
19400: ST_TO_ADDR
19401: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
19402: CALL 18878 0 0
19406: PUSH
19407: LD_LOC 33
19411: AND
19412: IFFALSE 19421
19414: GO 19416
19416: DISABLE
// YouLostInMultiplayer ;
19417: CALL_OW 107
19421: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
19422: CALL 18878 0 0
19426: NOT
19427: PUSH
19428: CALL_OW 531
19432: NOT
19433: AND
19434: IFFALSE 19450
19436: GO 19438
19438: DISABLE
// WaitServerStrings = [ #server-wait ] ;
19439: LD_ADDR_EXP 68
19443: PUSH
19444: LD_STRING #server-wait
19446: PUSH
19447: EMPTY
19448: LIST
19449: ST_TO_ADDR
19450: END
// every 100 trigger IAmSpec do
19451: CALL_OW 531
19455: IFFALSE 19471
19457: GO 19459
19459: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
19460: LD_ADDR_EXP 68
19464: PUSH
19465: LD_STRING #Player-IAmSpec
19467: PUSH
19468: EMPTY
19469: LIST
19470: ST_TO_ADDR
19471: END
// every 100 trigger GameEnded and IAmSpec do
19472: LD_LOC 33
19476: PUSH
19477: CALL_OW 531
19481: AND
19482: IFFALSE 19491
19484: GO 19486
19486: DISABLE
// YouLostInMultiplayer ;
19487: CALL_OW 107
19491: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
19492: CALL 18878 0 0
19496: PUSH
19497: LD_LOC 33
19501: NOT
19502: AND
19503: IFFALSE 19519
19505: GO 19507
19507: DISABLE
// WaitServerStrings = [ $player-win ] ;
19508: LD_ADDR_EXP 68
19512: PUSH
19513: LD_STRING $player-win
19515: PUSH
19516: EMPTY
19517: LIST
19518: ST_TO_ADDR
19519: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
19520: CALL 18878 0 0
19524: PUSH
19525: LD_LOC 33
19529: AND
19530: IFFALSE 19554
19532: GO 19534
19534: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
19535: LD_EXP 25
19539: PUSH
19540: LD_OWVAR 2
19544: ARRAY
19545: PPUSH
19546: CALL 18556 0 1
// YouWinInMultiplayer ;
19550: CALL_OW 106
// end ;
19554: END
// every 100 trigger isEditor marked 401 do
19555: LD_OWVAR 84
19559: IFFALSE 19575
19561: GO 19563
19563: DISABLE
// Debug_Strings = [ You won ] ;
19564: LD_ADDR_OWVAR 48
19568: PUSH
19569: LD_STRING You won
19571: PUSH
19572: EMPTY
19573: LIST
19574: ST_TO_ADDR
19575: END
// every 100 trigger isEditor marked 400 do
19576: LD_OWVAR 84
19580: IFFALSE 19596
19582: GO 19584
19584: DISABLE
// Debug_Strings = [ You loss ] ;
19585: LD_ADDR_OWVAR 48
19589: PUSH
19590: LD_STRING You loss
19592: PUSH
19593: EMPTY
19594: LIST
19595: ST_TO_ADDR
19596: END
// every 100 marked 98 do var i , un ;
19597: GO 19599
19599: DISABLE
19600: LD_INT 0
19602: PPUSH
19603: PPUSH
// begin for i = 1 to side_positions do
19604: LD_ADDR_VAR 0 1
19608: PUSH
19609: DOUBLE
19610: LD_INT 1
19612: DEC
19613: ST_TO_ADDR
19614: LD_EXP 24
19618: PUSH
19619: FOR_TO
19620: IFFALSE 19703
// if side_positions [ i ] then
19622: LD_EXP 24
19626: PUSH
19627: LD_VAR 0 1
19631: ARRAY
19632: IFFALSE 19701
// if not HasPower ( i ) and not Defaited [ i ] then
19634: LD_VAR 0 1
19638: PPUSH
19639: CALL 18942 0 1
19643: NOT
19644: PUSH
19645: LD_LOC 32
19649: PUSH
19650: LD_VAR 0 1
19654: ARRAY
19655: NOT
19656: AND
19657: IFFALSE 19701
// begin Defaited = replace ( Defaited , i , true ) ;
19659: LD_ADDR_LOC 32
19663: PUSH
19664: LD_LOC 32
19668: PPUSH
19669: LD_VAR 0 1
19673: PPUSH
19674: LD_INT 1
19676: PPUSH
19677: CALL_OW 1
19681: ST_TO_ADDR
// if i = your_side then
19682: LD_VAR 0 1
19686: PUSH
19687: LD_OWVAR 2
19691: EQUAL
19692: IFFALSE 19701
// begin Multiplayer_Loose_Message ;
19694: CALL_OW 521
// enable ( 400 ) ;
19698: LD_INT 400
19700: ENABLE_MARKED
// end ; end ;
19701: GO 19619
19703: POP
19704: POP
// if not Unfoged and defaited [ your_side ] then
19705: LD_LOC 34
19709: NOT
19710: PUSH
19711: LD_LOC 32
19715: PUSH
19716: LD_OWVAR 2
19720: ARRAY
19721: AND
19722: IFFALSE 19728
// Unfog ;
19724: CALL 19904 0 0
// DidGameEnd ;
19728: CALL 19743 0 0
// if not GameEnded then
19732: LD_LOC 33
19736: NOT
19737: IFFALSE 19740
// enable ;
19739: ENABLE
// end ;
19740: PPOPN 2
19742: END
// function DidGameEnd ; var i , k , enemy ; begin
19743: LD_INT 0
19745: PPUSH
19746: PPUSH
19747: PPUSH
19748: PPUSH
// enemy = [ ] ;
19749: LD_ADDR_VAR 0 4
19753: PUSH
19754: EMPTY
19755: ST_TO_ADDR
// for i = 1 to side_positions do
19756: LD_ADDR_VAR 0 2
19760: PUSH
19761: DOUBLE
19762: LD_INT 1
19764: DEC
19765: ST_TO_ADDR
19766: LD_EXP 24
19770: PUSH
19771: FOR_TO
19772: IFFALSE 19866
// if not defaited [ i ] then
19774: LD_LOC 32
19778: PUSH
19779: LD_VAR 0 2
19783: ARRAY
19784: NOT
19785: IFFALSE 19864
// for k = 1 to side_positions do
19787: LD_ADDR_VAR 0 3
19791: PUSH
19792: DOUBLE
19793: LD_INT 1
19795: DEC
19796: ST_TO_ADDR
19797: LD_EXP 24
19801: PUSH
19802: FOR_TO
19803: IFFALSE 19862
// if not defaited [ k ] then
19805: LD_LOC 32
19809: PUSH
19810: LD_VAR 0 3
19814: ARRAY
19815: NOT
19816: IFFALSE 19860
// if not AlliedSides ( i , k ) then
19818: LD_VAR 0 2
19822: PPUSH
19823: LD_VAR 0 3
19827: PPUSH
19828: CALL 19288 0 2
19832: NOT
19833: IFFALSE 19860
// enemy = enemy ^ [ i , k ] ;
19835: LD_ADDR_VAR 0 4
19839: PUSH
19840: LD_VAR 0 4
19844: PUSH
19845: LD_VAR 0 2
19849: PUSH
19850: LD_VAR 0 3
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: ADD
19859: ST_TO_ADDR
19860: GO 19802
19862: POP
19863: POP
19864: GO 19771
19866: POP
19867: POP
// if not enemy then
19868: LD_VAR 0 4
19872: NOT
19873: IFFALSE 19899
// begin GameEnded = true ;
19875: LD_ADDR_LOC 33
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if not defaited [ your_side ] then
19883: LD_LOC 32
19887: PUSH
19888: LD_OWVAR 2
19892: ARRAY
19893: NOT
19894: IFFALSE 19899
// enable ( 401 ) ;
19896: LD_INT 401
19898: ENABLE_MARKED
// end ; end ;
19899: LD_VAR 0 1
19903: RET
// function unfog ; var k , friends ; begin
19904: LD_INT 0
19906: PPUSH
19907: PPUSH
19908: PPUSH
// SetPlayerSpectator ( ) ;
19909: CALL_OW 572
// unfoged = true ;
19913: LD_ADDR_LOC 34
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// end ;
19921: LD_VAR 0 1
19925: RET
// export function MakeGameEnd ; begin
19926: LD_INT 0
19928: PPUSH
// SetPlayerSpectator ( ) ;
19929: CALL_OW 572
// unfoged = true ;
19933: LD_ADDR_LOC 34
19937: PUSH
19938: LD_INT 1
19940: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19941: LD_INT 175
19943: PPUSH
19944: CALL_OW 67
// GameEnded = true ;
19948: LD_ADDR_LOC 33
19952: PUSH
19953: LD_INT 1
19955: ST_TO_ADDR
// end ;
19956: LD_VAR 0 1
19960: RET
// export function GetGameEnded ; begin
19961: LD_INT 0
19963: PPUSH
// result = GameEnded ;
19964: LD_ADDR_VAR 0 1
19968: PUSH
19969: LD_LOC 33
19973: ST_TO_ADDR
// end ; end_of_file
19974: LD_VAR 0 1
19978: RET
// var win ; export function init_kings_counting ; var i ; begin
19979: LD_INT 0
19981: PPUSH
19982: PPUSH
// mp_with_score := true ;
19983: LD_ADDR_OWVAR 14
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// ResetMultiScore ;
19991: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19995: LD_INT 19
19997: PPUSH
19998: LD_INT 1
20000: PPUSH
20001: CALL_OW 424
// enable ( 2 ) ;
20005: LD_INT 2
20007: ENABLE_MARKED
// end ;
20008: LD_VAR 0 1
20012: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
20013: LD_INT 0
20015: PPUSH
20016: PPUSH
20017: PPUSH
20018: PPUSH
20019: PPUSH
20020: PPUSH
20021: PPUSH
20022: PPUSH
20023: PPUSH
// vypis := [ ] ;
20024: LD_ADDR_VAR 0 3
20028: PUSH
20029: EMPTY
20030: ST_TO_ADDR
// red = 0 ;
20031: LD_ADDR_VAR 0 5
20035: PUSH
20036: LD_INT 0
20038: ST_TO_ADDR
// blue = 0 ;
20039: LD_ADDR_VAR 0 6
20043: PUSH
20044: LD_INT 0
20046: ST_TO_ADDR
// yel = 0 ;
20047: LD_ADDR_VAR 0 7
20051: PUSH
20052: LD_INT 0
20054: ST_TO_ADDR
// green = 0 ;
20055: LD_ADDR_VAR 0 8
20059: PUSH
20060: LD_INT 0
20062: ST_TO_ADDR
// if def_public_score or isSGUI then
20063: LD_EXP 6
20067: PUSH
20068: LD_OWVAR 83
20072: OR
20073: IFFALSE 20670
// if not Team_Game then
20075: LD_EXP 26
20079: NOT
20080: IFFALSE 20202
// begin for side = 1 to Side_Positions do
20082: LD_ADDR_VAR 0 2
20086: PUSH
20087: DOUBLE
20088: LD_INT 1
20090: DEC
20091: ST_TO_ADDR
20092: LD_EXP 24
20096: PUSH
20097: FOR_TO
20098: IFFALSE 20198
// if Side_Positions [ side ] then
20100: LD_EXP 24
20104: PUSH
20105: LD_VAR 0 2
20109: ARRAY
20110: IFFALSE 20196
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
20112: LD_ADDR_VAR 0 3
20116: PUSH
20117: LD_VAR 0 3
20121: PUSH
20122: LD_STRING #KingoftheHill-Public
20124: PUSH
20125: LD_VAR 0 2
20129: PUSH
20130: LD_VAR 0 2
20134: PUSH
20135: LD_VAR 0 2
20139: PUSH
20140: LD_INT 10
20142: PLUS
20143: PPUSH
20144: CALL_OW 110
20148: PUSH
20149: LD_INT 3
20151: DIV
20152: PUSH
20153: LD_EXP 21
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: ADD
20165: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
20166: LD_INT 2
20168: PPUSH
20169: LD_VAR 0 2
20173: PPUSH
20174: LD_VAR 0 2
20178: PUSH
20179: LD_INT 10
20181: PLUS
20182: PPUSH
20183: CALL_OW 110
20187: PUSH
20188: LD_INT 3
20190: DIV
20191: PPUSH
20192: CALL 27572 0 3
// end ;
20196: GO 20097
20198: POP
20199: POP
// end else
20200: GO 20668
// begin if Teams [ 1 ] then
20202: LD_EXP 23
20206: PUSH
20207: LD_INT 1
20209: ARRAY
20210: IFFALSE 20262
// for i in Teams [ 1 ] do
20212: LD_ADDR_VAR 0 4
20216: PUSH
20217: LD_EXP 23
20221: PUSH
20222: LD_INT 1
20224: ARRAY
20225: PUSH
20226: FOR_IN
20227: IFFALSE 20260
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20229: LD_ADDR_VAR 0 5
20233: PUSH
20234: LD_VAR 0 5
20238: PUSH
20239: LD_VAR 0 4
20243: PUSH
20244: LD_INT 10
20246: PLUS
20247: PPUSH
20248: CALL_OW 110
20252: PUSH
20253: LD_INT 3
20255: DIV
20256: PLUS
20257: ST_TO_ADDR
20258: GO 20226
20260: POP
20261: POP
// if Teams [ 2 ] then
20262: LD_EXP 23
20266: PUSH
20267: LD_INT 2
20269: ARRAY
20270: IFFALSE 20322
// for i in Teams [ 2 ] do
20272: LD_ADDR_VAR 0 4
20276: PUSH
20277: LD_EXP 23
20281: PUSH
20282: LD_INT 2
20284: ARRAY
20285: PUSH
20286: FOR_IN
20287: IFFALSE 20320
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20289: LD_ADDR_VAR 0 6
20293: PUSH
20294: LD_VAR 0 6
20298: PUSH
20299: LD_VAR 0 4
20303: PUSH
20304: LD_INT 10
20306: PLUS
20307: PPUSH
20308: CALL_OW 110
20312: PUSH
20313: LD_INT 3
20315: DIV
20316: PLUS
20317: ST_TO_ADDR
20318: GO 20286
20320: POP
20321: POP
// if Teams [ 3 ] then
20322: LD_EXP 23
20326: PUSH
20327: LD_INT 3
20329: ARRAY
20330: IFFALSE 20382
// for i in Teams [ 3 ] do
20332: LD_ADDR_VAR 0 4
20336: PUSH
20337: LD_EXP 23
20341: PUSH
20342: LD_INT 3
20344: ARRAY
20345: PUSH
20346: FOR_IN
20347: IFFALSE 20380
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20349: LD_ADDR_VAR 0 7
20353: PUSH
20354: LD_VAR 0 7
20358: PUSH
20359: LD_VAR 0 4
20363: PUSH
20364: LD_INT 10
20366: PLUS
20367: PPUSH
20368: CALL_OW 110
20372: PUSH
20373: LD_INT 3
20375: DIV
20376: PLUS
20377: ST_TO_ADDR
20378: GO 20346
20380: POP
20381: POP
// if Teams [ 4 ] then
20382: LD_EXP 23
20386: PUSH
20387: LD_INT 4
20389: ARRAY
20390: IFFALSE 20442
// for i in Teams [ 4 ] do
20392: LD_ADDR_VAR 0 4
20396: PUSH
20397: LD_EXP 23
20401: PUSH
20402: LD_INT 4
20404: ARRAY
20405: PUSH
20406: FOR_IN
20407: IFFALSE 20440
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20409: LD_ADDR_VAR 0 8
20413: PUSH
20414: LD_VAR 0 8
20418: PUSH
20419: LD_VAR 0 4
20423: PUSH
20424: LD_INT 10
20426: PLUS
20427: PPUSH
20428: CALL_OW 110
20432: PUSH
20433: LD_INT 3
20435: DIV
20436: PLUS
20437: ST_TO_ADDR
20438: GO 20406
20440: POP
20441: POP
// if Teams [ 1 ] then
20442: LD_EXP 23
20446: PUSH
20447: LD_INT 1
20449: ARRAY
20450: IFFALSE 20479
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20452: LD_ADDR_VAR 0 3
20456: PUSH
20457: LD_STRING #KingoftheHill-Public-red
20459: PUSH
20460: LD_INT 3
20462: PUSH
20463: LD_VAR 0 5
20467: PUSH
20468: LD_EXP 21
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: ST_TO_ADDR
// if Teams [ 2 ] then
20479: LD_EXP 23
20483: PUSH
20484: LD_INT 2
20486: ARRAY
20487: IFFALSE 20522
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20489: LD_ADDR_VAR 0 3
20493: PUSH
20494: LD_VAR 0 3
20498: PUSH
20499: LD_STRING #KingoftheHill-Public-blue
20501: PUSH
20502: LD_INT 1
20504: PUSH
20505: LD_VAR 0 6
20509: PUSH
20510: LD_EXP 21
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: ADD
20521: ST_TO_ADDR
// if Teams [ 3 ] then
20522: LD_EXP 23
20526: PUSH
20527: LD_INT 3
20529: ARRAY
20530: IFFALSE 20565
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20532: LD_ADDR_VAR 0 3
20536: PUSH
20537: LD_VAR 0 3
20541: PUSH
20542: LD_STRING #KingoftheHill-Public-yell
20544: PUSH
20545: LD_INT 2
20547: PUSH
20548: LD_VAR 0 7
20552: PUSH
20553: LD_EXP 21
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: ADD
20564: ST_TO_ADDR
// if Teams [ 4 ] then
20565: LD_EXP 23
20569: PUSH
20570: LD_INT 4
20572: ARRAY
20573: IFFALSE 20608
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20575: LD_ADDR_VAR 0 3
20579: PUSH
20580: LD_VAR 0 3
20584: PUSH
20585: LD_STRING #KingoftheHill-Public-green
20587: PUSH
20588: LD_INT 7
20590: PUSH
20591: LD_VAR 0 8
20595: PUSH
20596: LD_EXP 21
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: ADD
20607: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
20608: LD_INT 2
20610: PPUSH
20611: LD_INT 3
20613: PPUSH
20614: LD_VAR 0 5
20618: PPUSH
20619: CALL 27572 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
20623: LD_INT 2
20625: PPUSH
20626: LD_INT 1
20628: PPUSH
20629: LD_VAR 0 6
20633: PPUSH
20634: CALL 27572 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
20638: LD_INT 2
20640: PPUSH
20641: LD_INT 2
20643: PPUSH
20644: LD_VAR 0 7
20648: PPUSH
20649: CALL 27572 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
20653: LD_INT 2
20655: PPUSH
20656: LD_INT 7
20658: PPUSH
20659: LD_VAR 0 8
20663: PPUSH
20664: CALL 27572 0 3
// end else
20668: GO 21105
// if not Team_Game then
20670: LD_EXP 26
20674: NOT
20675: IFFALSE 20733
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
20677: LD_ADDR_VAR 0 3
20681: PUSH
20682: LD_VAR 0 3
20686: PUSH
20687: LD_STRING #KingoftheHill-Private
20689: PUSH
20690: LD_OWVAR 2
20694: PUSH
20695: LD_OWVAR 2
20699: PUSH
20700: LD_VAR 0 2
20704: PUSH
20705: LD_INT 10
20707: PLUS
20708: PPUSH
20709: CALL_OW 110
20713: PUSH
20714: LD_INT 3
20716: DIV
20717: PUSH
20718: LD_EXP 21
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: ADD
20730: ST_TO_ADDR
20731: GO 21105
// begin for i in Teams [ 1 ] do
20733: LD_ADDR_VAR 0 4
20737: PUSH
20738: LD_EXP 23
20742: PUSH
20743: LD_INT 1
20745: ARRAY
20746: PUSH
20747: FOR_IN
20748: IFFALSE 20781
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20750: LD_ADDR_VAR 0 5
20754: PUSH
20755: LD_VAR 0 5
20759: PUSH
20760: LD_VAR 0 4
20764: PUSH
20765: LD_INT 10
20767: PLUS
20768: PPUSH
20769: CALL_OW 110
20773: PUSH
20774: LD_INT 3
20776: DIV
20777: PLUS
20778: ST_TO_ADDR
20779: GO 20747
20781: POP
20782: POP
// for i in Teams [ 2 ] do
20783: LD_ADDR_VAR 0 4
20787: PUSH
20788: LD_EXP 23
20792: PUSH
20793: LD_INT 2
20795: ARRAY
20796: PUSH
20797: FOR_IN
20798: IFFALSE 20831
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20800: LD_ADDR_VAR 0 6
20804: PUSH
20805: LD_VAR 0 6
20809: PUSH
20810: LD_VAR 0 4
20814: PUSH
20815: LD_INT 10
20817: PLUS
20818: PPUSH
20819: CALL_OW 110
20823: PUSH
20824: LD_INT 3
20826: DIV
20827: PLUS
20828: ST_TO_ADDR
20829: GO 20797
20831: POP
20832: POP
// for i in Teams [ 3 ] do
20833: LD_ADDR_VAR 0 4
20837: PUSH
20838: LD_EXP 23
20842: PUSH
20843: LD_INT 3
20845: ARRAY
20846: PUSH
20847: FOR_IN
20848: IFFALSE 20881
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20850: LD_ADDR_VAR 0 7
20854: PUSH
20855: LD_VAR 0 7
20859: PUSH
20860: LD_VAR 0 4
20864: PUSH
20865: LD_INT 10
20867: PLUS
20868: PPUSH
20869: CALL_OW 110
20873: PUSH
20874: LD_INT 3
20876: DIV
20877: PLUS
20878: ST_TO_ADDR
20879: GO 20847
20881: POP
20882: POP
// for i in Teams [ 4 ] do
20883: LD_ADDR_VAR 0 4
20887: PUSH
20888: LD_EXP 23
20892: PUSH
20893: LD_INT 4
20895: ARRAY
20896: PUSH
20897: FOR_IN
20898: IFFALSE 20931
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20900: LD_ADDR_VAR 0 8
20904: PUSH
20905: LD_VAR 0 8
20909: PUSH
20910: LD_VAR 0 4
20914: PUSH
20915: LD_INT 10
20917: PLUS
20918: PPUSH
20919: CALL_OW 110
20923: PUSH
20924: LD_INT 3
20926: DIV
20927: PLUS
20928: ST_TO_ADDR
20929: GO 20897
20931: POP
20932: POP
// if your_side in Teams [ 1 ] then
20933: LD_OWVAR 2
20937: PUSH
20938: LD_EXP 23
20942: PUSH
20943: LD_INT 1
20945: ARRAY
20946: IN
20947: IFFALSE 20976
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20949: LD_ADDR_VAR 0 3
20953: PUSH
20954: LD_STRING #KingoftheHill-Public-red
20956: PUSH
20957: LD_INT 3
20959: PUSH
20960: LD_VAR 0 5
20964: PUSH
20965: LD_EXP 21
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
20976: LD_OWVAR 2
20980: PUSH
20981: LD_EXP 23
20985: PUSH
20986: LD_INT 2
20988: ARRAY
20989: IN
20990: IFFALSE 21019
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20992: LD_ADDR_VAR 0 3
20996: PUSH
20997: LD_STRING #KingoftheHill-Public-blue
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: LD_VAR 0 6
21007: PUSH
21008: LD_EXP 21
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
21019: LD_OWVAR 2
21023: PUSH
21024: LD_EXP 23
21028: PUSH
21029: LD_INT 3
21031: ARRAY
21032: IN
21033: IFFALSE 21062
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
21035: LD_ADDR_VAR 0 3
21039: PUSH
21040: LD_STRING #KingoftheHill-Public-yell
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: LD_VAR 0 7
21050: PUSH
21051: LD_EXP 21
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
21062: LD_OWVAR 2
21066: PUSH
21067: LD_EXP 23
21071: PUSH
21072: LD_INT 4
21074: ARRAY
21075: IN
21076: IFFALSE 21105
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
21078: LD_ADDR_VAR 0 3
21082: PUSH
21083: LD_STRING #KingoftheHill-Public-green
21085: PUSH
21086: LD_INT 7
21088: PUSH
21089: LD_VAR 0 8
21093: PUSH
21094: LD_EXP 21
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: ST_TO_ADDR
// end ; Display_kings := vypis ;
21105: LD_ADDR_EXP 69
21109: PUSH
21110: LD_VAR 0 3
21114: ST_TO_ADDR
// end ;
21115: LD_VAR 0 1
21119: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
21120: LD_INT 0
21122: PPUSH
21123: PPUSH
21124: PPUSH
21125: PPUSH
21126: PPUSH
21127: PPUSH
21128: PPUSH
21129: PPUSH
21130: PPUSH
// side := [ ] ;
21131: LD_ADDR_VAR 0 2
21135: PUSH
21136: EMPTY
21137: ST_TO_ADDR
// red = 0 ;
21138: LD_ADDR_VAR 0 5
21142: PUSH
21143: LD_INT 0
21145: ST_TO_ADDR
// blue = 0 ;
21146: LD_ADDR_VAR 0 6
21150: PUSH
21151: LD_INT 0
21153: ST_TO_ADDR
// yel = 0 ;
21154: LD_ADDR_VAR 0 7
21158: PUSH
21159: LD_INT 0
21161: ST_TO_ADDR
// green = 0 ;
21162: LD_ADDR_VAR 0 8
21166: PUSH
21167: LD_INT 0
21169: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
21170: LD_ADDR_VAR 0 3
21174: PUSH
21175: LD_INT 19
21177: PPUSH
21178: LD_INT 21
21180: PUSH
21181: LD_INT 3
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: LD_INT 53
21190: PUSH
21191: EMPTY
21192: LIST
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PPUSH
21198: CALL_OW 70
21202: ST_TO_ADDR
// for un in list do
21203: LD_ADDR_VAR 0 4
21207: PUSH
21208: LD_VAR 0 3
21212: PUSH
21213: FOR_IN
21214: IFFALSE 21239
// side := side union GetSide ( un ) ;
21216: LD_ADDR_VAR 0 2
21220: PUSH
21221: LD_VAR 0 2
21225: PUSH
21226: LD_VAR 0 4
21230: PPUSH
21231: CALL_OW 255
21235: UNION
21236: ST_TO_ADDR
21237: GO 21213
21239: POP
21240: POP
// if side <> 1 then
21241: LD_VAR 0 2
21245: PUSH
21246: LD_INT 1
21248: NONEQUAL
21249: IFFALSE 21253
// exit ;
21251: GO 21616
// side := side [ 1 ] ;
21253: LD_ADDR_VAR 0 2
21257: PUSH
21258: LD_VAR 0 2
21262: PUSH
21263: LD_INT 1
21265: ARRAY
21266: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
21267: LD_VAR 0 2
21271: PUSH
21272: LD_INT 10
21274: PLUS
21275: PPUSH
21276: LD_VAR 0 2
21280: PUSH
21281: LD_INT 10
21283: PLUS
21284: PPUSH
21285: CALL_OW 110
21289: PUSH
21290: LD_INT 1
21292: PLUS
21293: PPUSH
21294: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
21298: LD_VAR 0 2
21302: PPUSH
21303: LD_VAR 0 2
21307: PUSH
21308: LD_INT 10
21310: PLUS
21311: PPUSH
21312: CALL_OW 110
21316: PUSH
21317: LD_INT 3
21319: DIV
21320: PPUSH
21321: LD_INT 2
21323: PPUSH
21324: CALL 18337 0 3
// if not Team_Game then
21328: LD_EXP 26
21332: NOT
21333: IFFALSE 21616
// if GetTag ( side + 10 ) >= final_count * 3 then
21335: LD_VAR 0 2
21339: PUSH
21340: LD_INT 10
21342: PLUS
21343: PPUSH
21344: CALL_OW 110
21348: PUSH
21349: LD_EXP 21
21353: PUSH
21354: LD_INT 3
21356: MUL
21357: GREATEREQUAL
21358: IFFALSE 21365
// enable ( 3 ) else
21360: LD_INT 3
21362: ENABLE_MARKED
21363: GO 21616
// begin for i in Teams [ 1 ] do
21365: LD_ADDR_VAR 0 9
21369: PUSH
21370: LD_EXP 23
21374: PUSH
21375: LD_INT 1
21377: ARRAY
21378: PUSH
21379: FOR_IN
21380: IFFALSE 21413
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21382: LD_ADDR_VAR 0 5
21386: PUSH
21387: LD_VAR 0 5
21391: PUSH
21392: LD_VAR 0 9
21396: PUSH
21397: LD_INT 10
21399: PLUS
21400: PPUSH
21401: CALL_OW 110
21405: PUSH
21406: LD_INT 3
21408: DIV
21409: PLUS
21410: ST_TO_ADDR
21411: GO 21379
21413: POP
21414: POP
// for i in Teams [ 2 ] do
21415: LD_ADDR_VAR 0 9
21419: PUSH
21420: LD_EXP 23
21424: PUSH
21425: LD_INT 2
21427: ARRAY
21428: PUSH
21429: FOR_IN
21430: IFFALSE 21463
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21432: LD_ADDR_VAR 0 6
21436: PUSH
21437: LD_VAR 0 6
21441: PUSH
21442: LD_VAR 0 9
21446: PUSH
21447: LD_INT 10
21449: PLUS
21450: PPUSH
21451: CALL_OW 110
21455: PUSH
21456: LD_INT 3
21458: DIV
21459: PLUS
21460: ST_TO_ADDR
21461: GO 21429
21463: POP
21464: POP
// for i in Teams [ 3 ] do
21465: LD_ADDR_VAR 0 9
21469: PUSH
21470: LD_EXP 23
21474: PUSH
21475: LD_INT 3
21477: ARRAY
21478: PUSH
21479: FOR_IN
21480: IFFALSE 21513
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21482: LD_ADDR_VAR 0 7
21486: PUSH
21487: LD_VAR 0 7
21491: PUSH
21492: LD_VAR 0 9
21496: PUSH
21497: LD_INT 10
21499: PLUS
21500: PPUSH
21501: CALL_OW 110
21505: PUSH
21506: LD_INT 3
21508: DIV
21509: PLUS
21510: ST_TO_ADDR
21511: GO 21479
21513: POP
21514: POP
// for i in Teams [ 4 ] do
21515: LD_ADDR_VAR 0 9
21519: PUSH
21520: LD_EXP 23
21524: PUSH
21525: LD_INT 4
21527: ARRAY
21528: PUSH
21529: FOR_IN
21530: IFFALSE 21563
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21532: LD_ADDR_VAR 0 8
21536: PUSH
21537: LD_VAR 0 8
21541: PUSH
21542: LD_VAR 0 9
21546: PUSH
21547: LD_INT 10
21549: PLUS
21550: PPUSH
21551: CALL_OW 110
21555: PUSH
21556: LD_INT 3
21558: DIV
21559: PLUS
21560: ST_TO_ADDR
21561: GO 21529
21563: POP
21564: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
21565: LD_VAR 0 5
21569: PUSH
21570: LD_EXP 21
21574: GREATEREQUAL
21575: PUSH
21576: LD_VAR 0 6
21580: PUSH
21581: LD_EXP 21
21585: GREATEREQUAL
21586: OR
21587: PUSH
21588: LD_VAR 0 7
21592: PUSH
21593: LD_EXP 21
21597: GREATEREQUAL
21598: OR
21599: PUSH
21600: LD_VAR 0 8
21604: PUSH
21605: LD_EXP 21
21609: GREATEREQUAL
21610: OR
21611: IFFALSE 21616
// enable ( 3 ) ;
21613: LD_INT 3
21615: ENABLE_MARKED
// end ; end ;
21616: LD_VAR 0 1
21620: RET
// every 0 0$1 marked 2 do
21621: GO 21623
21623: DISABLE
// begin count_king ;
21624: CALL 21120 0 0
// show_public_points ;
21628: CALL 20013 0 0
// enable ;
21632: ENABLE
// end ;
21633: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
21634: GO 21636
21636: DISABLE
21637: LD_INT 0
21639: PPUSH
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
21644: PPUSH
// begin win := [ ] ;
21645: LD_ADDR_LOC 35
21649: PUSH
21650: EMPTY
21651: ST_TO_ADDR
// red = 0 ;
21652: LD_ADDR_VAR 0 2
21656: PUSH
21657: LD_INT 0
21659: ST_TO_ADDR
// blue = 0 ;
21660: LD_ADDR_VAR 0 3
21664: PUSH
21665: LD_INT 0
21667: ST_TO_ADDR
// yel = 0 ;
21668: LD_ADDR_VAR 0 4
21672: PUSH
21673: LD_INT 0
21675: ST_TO_ADDR
// green = 0 ;
21676: LD_ADDR_VAR 0 5
21680: PUSH
21681: LD_INT 0
21683: ST_TO_ADDR
// if not Team_Game then
21684: LD_EXP 26
21688: NOT
21689: IFFALSE 21766
// begin for side = 1 to 8 do
21691: LD_ADDR_VAR 0 1
21695: PUSH
21696: DOUBLE
21697: LD_INT 1
21699: DEC
21700: ST_TO_ADDR
21701: LD_INT 8
21703: PUSH
21704: FOR_TO
21705: IFFALSE 21750
// if GetTag ( side + 10 ) >= final_count * 3 then
21707: LD_VAR 0 1
21711: PUSH
21712: LD_INT 10
21714: PLUS
21715: PPUSH
21716: CALL_OW 110
21720: PUSH
21721: LD_EXP 21
21725: PUSH
21726: LD_INT 3
21728: MUL
21729: GREATEREQUAL
21730: IFFALSE 21748
// win := win ^ side ;
21732: LD_ADDR_LOC 35
21736: PUSH
21737: LD_LOC 35
21741: PUSH
21742: LD_VAR 0 1
21746: ADD
21747: ST_TO_ADDR
21748: GO 21704
21750: POP
21751: POP
// if win then
21752: LD_LOC 35
21756: IFFALSE 21763
// enable ( 4 ) else
21758: LD_INT 4
21760: ENABLE_MARKED
21761: GO 21764
// enable ;
21763: ENABLE
// end else
21764: GO 22082
// begin for i in Teams [ 1 ] do
21766: LD_ADDR_VAR 0 6
21770: PUSH
21771: LD_EXP 23
21775: PUSH
21776: LD_INT 1
21778: ARRAY
21779: PUSH
21780: FOR_IN
21781: IFFALSE 21814
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21783: LD_ADDR_VAR 0 2
21787: PUSH
21788: LD_VAR 0 2
21792: PUSH
21793: LD_VAR 0 6
21797: PUSH
21798: LD_INT 10
21800: PLUS
21801: PPUSH
21802: CALL_OW 110
21806: PUSH
21807: LD_INT 3
21809: DIV
21810: PLUS
21811: ST_TO_ADDR
21812: GO 21780
21814: POP
21815: POP
// for i in Teams [ 2 ] do
21816: LD_ADDR_VAR 0 6
21820: PUSH
21821: LD_EXP 23
21825: PUSH
21826: LD_INT 2
21828: ARRAY
21829: PUSH
21830: FOR_IN
21831: IFFALSE 21864
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21833: LD_ADDR_VAR 0 3
21837: PUSH
21838: LD_VAR 0 3
21842: PUSH
21843: LD_VAR 0 6
21847: PUSH
21848: LD_INT 10
21850: PLUS
21851: PPUSH
21852: CALL_OW 110
21856: PUSH
21857: LD_INT 3
21859: DIV
21860: PLUS
21861: ST_TO_ADDR
21862: GO 21830
21864: POP
21865: POP
// for i in Teams [ 3 ] do
21866: LD_ADDR_VAR 0 6
21870: PUSH
21871: LD_EXP 23
21875: PUSH
21876: LD_INT 3
21878: ARRAY
21879: PUSH
21880: FOR_IN
21881: IFFALSE 21914
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21883: LD_ADDR_VAR 0 4
21887: PUSH
21888: LD_VAR 0 4
21892: PUSH
21893: LD_VAR 0 6
21897: PUSH
21898: LD_INT 10
21900: PLUS
21901: PPUSH
21902: CALL_OW 110
21906: PUSH
21907: LD_INT 3
21909: DIV
21910: PLUS
21911: ST_TO_ADDR
21912: GO 21880
21914: POP
21915: POP
// for i in Teams [ 4 ] do
21916: LD_ADDR_VAR 0 6
21920: PUSH
21921: LD_EXP 23
21925: PUSH
21926: LD_INT 4
21928: ARRAY
21929: PUSH
21930: FOR_IN
21931: IFFALSE 21964
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21933: LD_ADDR_VAR 0 5
21937: PUSH
21938: LD_VAR 0 5
21942: PUSH
21943: LD_VAR 0 6
21947: PUSH
21948: LD_INT 10
21950: PLUS
21951: PPUSH
21952: CALL_OW 110
21956: PUSH
21957: LD_INT 3
21959: DIV
21960: PLUS
21961: ST_TO_ADDR
21962: GO 21930
21964: POP
21965: POP
// if red >= final_count then
21966: LD_VAR 0 2
21970: PUSH
21971: LD_EXP 21
21975: GREATEREQUAL
21976: IFFALSE 21992
// win = teams [ 1 ] ;
21978: LD_ADDR_LOC 35
21982: PUSH
21983: LD_EXP 23
21987: PUSH
21988: LD_INT 1
21990: ARRAY
21991: ST_TO_ADDR
// if blue >= final_count then
21992: LD_VAR 0 3
21996: PUSH
21997: LD_EXP 21
22001: GREATEREQUAL
22002: IFFALSE 22018
// win = teams [ 2 ] ;
22004: LD_ADDR_LOC 35
22008: PUSH
22009: LD_EXP 23
22013: PUSH
22014: LD_INT 2
22016: ARRAY
22017: ST_TO_ADDR
// if yel >= final_count then
22018: LD_VAR 0 4
22022: PUSH
22023: LD_EXP 21
22027: GREATEREQUAL
22028: IFFALSE 22044
// win = teams [ 3 ] ;
22030: LD_ADDR_LOC 35
22034: PUSH
22035: LD_EXP 23
22039: PUSH
22040: LD_INT 3
22042: ARRAY
22043: ST_TO_ADDR
// if green >= final_count then
22044: LD_VAR 0 5
22048: PUSH
22049: LD_EXP 21
22053: GREATEREQUAL
22054: IFFALSE 22070
// win = teams [ 4 ] ;
22056: LD_ADDR_LOC 35
22060: PUSH
22061: LD_EXP 23
22065: PUSH
22066: LD_INT 4
22068: ARRAY
22069: ST_TO_ADDR
// if win then
22070: LD_LOC 35
22074: IFFALSE 22081
// enable ( 4 ) else
22076: LD_INT 4
22078: ENABLE_MARKED
22079: GO 22082
// enable ;
22081: ENABLE
// end ; end ;
22082: PPOPN 6
22084: END
// every 0 0$1 marked 4 do
22085: GO 22087
22087: DISABLE
// begin if Player_Side in win then
22088: LD_EXP 28
22092: PUSH
22093: LD_LOC 35
22097: IN
22098: IFFALSE 22114
// begin wait ( 0 0$2 ) ;
22100: LD_INT 70
22102: PPUSH
22103: CALL_OW 67
// enable ( 401 ) ;
22107: LD_INT 401
22109: ENABLE_MARKED
// exit ;
22110: GO 22130
// end else
22112: GO 22130
// begin wait ( 0 0$2 ) ;
22114: LD_INT 70
22116: PPUSH
22117: CALL_OW 67
// Multiplayer_Loose_Message ;
22121: CALL_OW 521
// enable ( 400 ) ;
22125: LD_INT 400
22127: ENABLE_MARKED
// exit ;
22128: GO 22130
// end ; end ; end_of_file
22130: END
// export function SetMpTechs ( ) ; var side , i ; begin
22131: LD_INT 0
22133: PPUSH
22134: PPUSH
22135: PPUSH
// for side = 1 to 8 do
22136: LD_ADDR_VAR 0 2
22140: PUSH
22141: DOUBLE
22142: LD_INT 1
22144: DEC
22145: ST_TO_ADDR
22146: LD_INT 8
22148: PUSH
22149: FOR_TO
22150: IFFALSE 22271
// begin for i = 1 to 72 do
22152: LD_ADDR_VAR 0 3
22156: PUSH
22157: DOUBLE
22158: LD_INT 1
22160: DEC
22161: ST_TO_ADDR
22162: LD_INT 72
22164: PUSH
22165: FOR_TO
22166: IFFALSE 22197
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
22168: LD_VAR 0 3
22172: PPUSH
22173: LD_VAR 0 2
22177: PPUSH
22178: LD_INT 0
22180: PPUSH
22181: LD_VAR 0 3
22185: PPUSH
22186: CALL_OW 565
22190: PPUSH
22191: CALL_OW 322
22195: GO 22165
22197: POP
22198: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
22199: LD_INT 73
22201: PPUSH
22202: LD_VAR 0 2
22206: PPUSH
22207: LD_INT 0
22209: PPUSH
22210: LD_INT 25
22212: PPUSH
22213: CALL_OW 565
22217: PPUSH
22218: CALL_OW 322
// for i = 0 to 40 do
22222: LD_ADDR_VAR 0 3
22226: PUSH
22227: DOUBLE
22228: LD_INT 0
22230: DEC
22231: ST_TO_ADDR
22232: LD_INT 40
22234: PUSH
22235: FOR_TO
22236: IFFALSE 22267
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
22238: LD_VAR 0 3
22242: PPUSH
22243: LD_VAR 0 2
22247: PPUSH
22248: LD_INT 1
22250: PPUSH
22251: LD_VAR 0 3
22255: PPUSH
22256: CALL_OW 565
22260: PPUSH
22261: CALL_OW 324
22265: GO 22235
22267: POP
22268: POP
// end ;
22269: GO 22149
22271: POP
22272: POP
// end ;
22273: LD_VAR 0 1
22277: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
22278: LD_INT 0
22280: PPUSH
22281: PPUSH
22282: PPUSH
// for side = 1 to 8 do
22283: LD_ADDR_VAR 0 3
22287: PUSH
22288: DOUBLE
22289: LD_INT 1
22291: DEC
22292: ST_TO_ADDR
22293: LD_INT 8
22295: PUSH
22296: FOR_TO
22297: IFFALSE 26293
// begin for i = 1 to 73 do
22299: LD_ADDR_VAR 0 4
22303: PUSH
22304: DOUBLE
22305: LD_INT 1
22307: DEC
22308: ST_TO_ADDR
22309: LD_INT 73
22311: PUSH
22312: FOR_TO
22313: IFFALSE 22334
// SetTech ( i , side , state_disabled ) ;
22315: LD_VAR 0 4
22319: PPUSH
22320: LD_VAR 0 3
22324: PPUSH
22325: LD_INT 0
22327: PPUSH
22328: CALL_OW 322
22332: GO 22312
22334: POP
22335: POP
// for i = 0 to 40 do
22336: LD_ADDR_VAR 0 4
22340: PUSH
22341: DOUBLE
22342: LD_INT 0
22344: DEC
22345: ST_TO_ADDR
22346: LD_INT 40
22348: PUSH
22349: FOR_TO
22350: IFFALSE 22371
// SetRestrict ( i , side , false ) ;
22352: LD_VAR 0 4
22356: PPUSH
22357: LD_VAR 0 3
22361: PPUSH
22362: LD_INT 0
22364: PPUSH
22365: CALL_OW 324
22369: GO 22349
22371: POP
22372: POP
// case level of 1 :
22373: LD_VAR 0 1
22377: PUSH
22378: LD_INT 1
22380: DOUBLE
22381: EQUAL
22382: IFTRUE 22386
22384: GO 22539
22386: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22387: LD_INT 35
22389: PPUSH
22390: LD_VAR 0 3
22394: PPUSH
22395: LD_INT 1
22397: PPUSH
22398: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22402: LD_INT 45
22404: PPUSH
22405: LD_VAR 0 3
22409: PPUSH
22410: LD_INT 1
22412: PPUSH
22413: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22417: LD_INT 46
22419: PPUSH
22420: LD_VAR 0 3
22424: PPUSH
22425: LD_INT 1
22427: PPUSH
22428: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22432: LD_INT 47
22434: PPUSH
22435: LD_VAR 0 3
22439: PPUSH
22440: LD_INT 1
22442: PPUSH
22443: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22447: LD_INT 0
22449: PPUSH
22450: LD_VAR 0 3
22454: PPUSH
22455: LD_INT 1
22457: PPUSH
22458: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22462: LD_INT 2
22464: PPUSH
22465: LD_VAR 0 3
22469: PPUSH
22470: LD_INT 1
22472: PPUSH
22473: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22477: LD_INT 4
22479: PPUSH
22480: LD_VAR 0 3
22484: PPUSH
22485: LD_INT 1
22487: PPUSH
22488: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22492: LD_INT 6
22494: PPUSH
22495: LD_VAR 0 3
22499: PPUSH
22500: LD_INT 1
22502: PPUSH
22503: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22507: LD_INT 29
22509: PPUSH
22510: LD_VAR 0 3
22514: PPUSH
22515: LD_INT 1
22517: PPUSH
22518: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22522: LD_INT 31
22524: PPUSH
22525: LD_VAR 0 3
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 324
// end ; 2 :
22537: GO 26291
22539: LD_INT 2
22541: DOUBLE
22542: EQUAL
22543: IFTRUE 22547
22545: GO 22745
22547: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22548: LD_INT 35
22550: PPUSH
22551: LD_VAR 0 3
22555: PPUSH
22556: LD_INT 1
22558: PPUSH
22559: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22563: LD_INT 45
22565: PPUSH
22566: LD_VAR 0 3
22570: PPUSH
22571: LD_INT 1
22573: PPUSH
22574: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22578: LD_INT 46
22580: PPUSH
22581: LD_VAR 0 3
22585: PPUSH
22586: LD_INT 1
22588: PPUSH
22589: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22593: LD_INT 47
22595: PPUSH
22596: LD_VAR 0 3
22600: PPUSH
22601: LD_INT 1
22603: PPUSH
22604: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22608: LD_INT 1
22610: PPUSH
22611: LD_VAR 0 3
22615: PPUSH
22616: LD_INT 1
22618: PPUSH
22619: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22623: LD_INT 2
22625: PPUSH
22626: LD_VAR 0 3
22630: PPUSH
22631: LD_INT 1
22633: PPUSH
22634: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22638: LD_INT 11
22640: PPUSH
22641: LD_VAR 0 3
22645: PPUSH
22646: LD_INT 1
22648: PPUSH
22649: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22653: LD_INT 0
22655: PPUSH
22656: LD_VAR 0 3
22660: PPUSH
22661: LD_INT 1
22663: PPUSH
22664: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22668: LD_INT 2
22670: PPUSH
22671: LD_VAR 0 3
22675: PPUSH
22676: LD_INT 1
22678: PPUSH
22679: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22683: LD_INT 4
22685: PPUSH
22686: LD_VAR 0 3
22690: PPUSH
22691: LD_INT 1
22693: PPUSH
22694: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22698: LD_INT 6
22700: PPUSH
22701: LD_VAR 0 3
22705: PPUSH
22706: LD_INT 1
22708: PPUSH
22709: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22713: LD_INT 29
22715: PPUSH
22716: LD_VAR 0 3
22720: PPUSH
22721: LD_INT 1
22723: PPUSH
22724: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22728: LD_INT 31
22730: PPUSH
22731: LD_VAR 0 3
22735: PPUSH
22736: LD_INT 1
22738: PPUSH
22739: CALL_OW 324
// end ; 3 :
22743: GO 26291
22745: LD_INT 3
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 23206
22753: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22754: LD_INT 35
22756: PPUSH
22757: LD_VAR 0 3
22761: PPUSH
22762: LD_INT 1
22764: PPUSH
22765: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22769: LD_INT 45
22771: PPUSH
22772: LD_VAR 0 3
22776: PPUSH
22777: LD_INT 1
22779: PPUSH
22780: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22784: LD_INT 46
22786: PPUSH
22787: LD_VAR 0 3
22791: PPUSH
22792: LD_INT 1
22794: PPUSH
22795: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22799: LD_INT 47
22801: PPUSH
22802: LD_VAR 0 3
22806: PPUSH
22807: LD_INT 1
22809: PPUSH
22810: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22814: LD_INT 1
22816: PPUSH
22817: LD_VAR 0 3
22821: PPUSH
22822: LD_INT 1
22824: PPUSH
22825: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22829: LD_INT 2
22831: PPUSH
22832: LD_VAR 0 3
22836: PPUSH
22837: LD_INT 1
22839: PPUSH
22840: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22844: LD_INT 11
22846: PPUSH
22847: LD_VAR 0 3
22851: PPUSH
22852: LD_INT 1
22854: PPUSH
22855: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22859: LD_INT 48
22861: PPUSH
22862: LD_VAR 0 3
22866: PPUSH
22867: LD_INT 1
22869: PPUSH
22870: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22874: LD_INT 69
22876: PPUSH
22877: LD_VAR 0 3
22881: PPUSH
22882: LD_INT 1
22884: PPUSH
22885: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22889: LD_INT 39
22891: PPUSH
22892: LD_VAR 0 3
22896: PPUSH
22897: LD_INT 1
22899: PPUSH
22900: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22904: LD_INT 43
22906: PPUSH
22907: LD_VAR 0 3
22911: PPUSH
22912: LD_INT 1
22914: PPUSH
22915: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22919: LD_INT 51
22921: PPUSH
22922: LD_VAR 0 3
22926: PPUSH
22927: LD_INT 1
22929: PPUSH
22930: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22934: LD_INT 6
22936: PPUSH
22937: LD_VAR 0 3
22941: PPUSH
22942: LD_INT 1
22944: PPUSH
22945: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22949: LD_INT 0
22951: PPUSH
22952: LD_VAR 0 3
22956: PPUSH
22957: LD_INT 1
22959: PPUSH
22960: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22964: LD_INT 2
22966: PPUSH
22967: LD_VAR 0 3
22971: PPUSH
22972: LD_INT 1
22974: PPUSH
22975: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22979: LD_INT 3
22981: PPUSH
22982: LD_VAR 0 3
22986: PPUSH
22987: LD_INT 1
22989: PPUSH
22990: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22994: LD_INT 4
22996: PPUSH
22997: LD_VAR 0 3
23001: PPUSH
23002: LD_INT 1
23004: PPUSH
23005: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23009: LD_INT 6
23011: PPUSH
23012: LD_VAR 0 3
23016: PPUSH
23017: LD_INT 1
23019: PPUSH
23020: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23024: LD_INT 7
23026: PPUSH
23027: LD_VAR 0 3
23031: PPUSH
23032: LD_INT 1
23034: PPUSH
23035: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23039: LD_INT 8
23041: PPUSH
23042: LD_VAR 0 3
23046: PPUSH
23047: LD_INT 1
23049: PPUSH
23050: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23054: LD_INT 10
23056: PPUSH
23057: LD_VAR 0 3
23061: PPUSH
23062: LD_INT 1
23064: PPUSH
23065: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23069: LD_INT 15
23071: PPUSH
23072: LD_VAR 0 3
23076: PPUSH
23077: LD_INT 1
23079: PPUSH
23080: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23084: LD_INT 16
23086: PPUSH
23087: LD_VAR 0 3
23091: PPUSH
23092: LD_INT 1
23094: PPUSH
23095: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23099: LD_INT 17
23101: PPUSH
23102: LD_VAR 0 3
23106: PPUSH
23107: LD_INT 1
23109: PPUSH
23110: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23114: LD_INT 20
23116: PPUSH
23117: LD_VAR 0 3
23121: PPUSH
23122: LD_INT 1
23124: PPUSH
23125: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23129: LD_INT 26
23131: PPUSH
23132: LD_VAR 0 3
23136: PPUSH
23137: LD_INT 1
23139: PPUSH
23140: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23144: LD_INT 27
23146: PPUSH
23147: LD_VAR 0 3
23151: PPUSH
23152: LD_INT 1
23154: PPUSH
23155: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23159: LD_INT 29
23161: PPUSH
23162: LD_VAR 0 3
23166: PPUSH
23167: LD_INT 1
23169: PPUSH
23170: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23174: LD_INT 31
23176: PPUSH
23177: LD_VAR 0 3
23181: PPUSH
23182: LD_INT 1
23184: PPUSH
23185: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23189: LD_INT 32
23191: PPUSH
23192: LD_VAR 0 3
23196: PPUSH
23197: LD_INT 1
23199: PPUSH
23200: CALL_OW 324
// end ; 4 :
23204: GO 26291
23206: LD_INT 4
23208: DOUBLE
23209: EQUAL
23210: IFTRUE 23214
23212: GO 24162
23214: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23215: LD_INT 35
23217: PPUSH
23218: LD_VAR 0 3
23222: PPUSH
23223: LD_INT 1
23225: PPUSH
23226: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23230: LD_INT 45
23232: PPUSH
23233: LD_VAR 0 3
23237: PPUSH
23238: LD_INT 1
23240: PPUSH
23241: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23245: LD_INT 46
23247: PPUSH
23248: LD_VAR 0 3
23252: PPUSH
23253: LD_INT 1
23255: PPUSH
23256: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23260: LD_INT 47
23262: PPUSH
23263: LD_VAR 0 3
23267: PPUSH
23268: LD_INT 1
23270: PPUSH
23271: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23275: LD_INT 1
23277: PPUSH
23278: LD_VAR 0 3
23282: PPUSH
23283: LD_INT 1
23285: PPUSH
23286: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23290: LD_INT 2
23292: PPUSH
23293: LD_VAR 0 3
23297: PPUSH
23298: LD_INT 1
23300: PPUSH
23301: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23305: LD_INT 11
23307: PPUSH
23308: LD_VAR 0 3
23312: PPUSH
23313: LD_INT 1
23315: PPUSH
23316: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23320: LD_INT 20
23322: PPUSH
23323: LD_VAR 0 3
23327: PPUSH
23328: LD_INT 1
23330: PPUSH
23331: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23335: LD_INT 48
23337: PPUSH
23338: LD_VAR 0 3
23342: PPUSH
23343: LD_INT 1
23345: PPUSH
23346: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23350: LD_INT 49
23352: PPUSH
23353: LD_VAR 0 3
23357: PPUSH
23358: LD_INT 1
23360: PPUSH
23361: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23365: LD_INT 69
23367: PPUSH
23368: LD_VAR 0 3
23372: PPUSH
23373: LD_INT 1
23375: PPUSH
23376: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23380: LD_INT 39
23382: PPUSH
23383: LD_VAR 0 3
23387: PPUSH
23388: LD_INT 1
23390: PPUSH
23391: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23395: LD_INT 34
23397: PPUSH
23398: LD_VAR 0 3
23402: PPUSH
23403: LD_INT 1
23405: PPUSH
23406: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23410: LD_INT 42
23412: PPUSH
23413: LD_VAR 0 3
23417: PPUSH
23418: LD_INT 1
23420: PPUSH
23421: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23425: LD_INT 44
23427: PPUSH
23428: LD_VAR 0 3
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23440: LD_INT 41
23442: PPUSH
23443: LD_VAR 0 3
23447: PPUSH
23448: LD_INT 1
23450: PPUSH
23451: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23455: LD_INT 43
23457: PPUSH
23458: LD_VAR 0 3
23462: PPUSH
23463: LD_INT 1
23465: PPUSH
23466: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23470: LD_INT 70
23472: PPUSH
23473: LD_VAR 0 3
23477: PPUSH
23478: LD_INT 1
23480: PPUSH
23481: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23485: LD_INT 51
23487: PPUSH
23488: LD_VAR 0 3
23492: PPUSH
23493: LD_INT 1
23495: PPUSH
23496: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23500: LD_INT 52
23502: PPUSH
23503: LD_VAR 0 3
23507: PPUSH
23508: LD_INT 1
23510: PPUSH
23511: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23515: LD_INT 6
23517: PPUSH
23518: LD_VAR 0 3
23522: PPUSH
23523: LD_INT 1
23525: PPUSH
23526: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23530: LD_INT 15
23532: PPUSH
23533: LD_VAR 0 3
23537: PPUSH
23538: LD_INT 1
23540: PPUSH
23541: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23545: LD_INT 7
23547: PPUSH
23548: LD_VAR 0 3
23552: PPUSH
23553: LD_INT 1
23555: PPUSH
23556: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23560: LD_INT 12
23562: PPUSH
23563: LD_VAR 0 3
23567: PPUSH
23568: LD_INT 1
23570: PPUSH
23571: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23575: LD_INT 18
23577: PPUSH
23578: LD_VAR 0 3
23582: PPUSH
23583: LD_INT 1
23585: PPUSH
23586: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23590: LD_INT 60
23592: PPUSH
23593: LD_VAR 0 3
23597: PPUSH
23598: LD_INT 1
23600: PPUSH
23601: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23605: LD_INT 9
23607: PPUSH
23608: LD_VAR 0 3
23612: PPUSH
23613: LD_INT 1
23615: PPUSH
23616: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23620: LD_INT 30
23622: PPUSH
23623: LD_VAR 0 3
23627: PPUSH
23628: LD_INT 1
23630: PPUSH
23631: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23635: LD_INT 37
23637: PPUSH
23638: LD_VAR 0 3
23642: PPUSH
23643: LD_INT 1
23645: PPUSH
23646: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23650: LD_INT 5
23652: PPUSH
23653: LD_VAR 0 3
23657: PPUSH
23658: LD_INT 1
23660: PPUSH
23661: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23665: LD_INT 66
23667: PPUSH
23668: LD_VAR 0 3
23672: PPUSH
23673: LD_INT 1
23675: PPUSH
23676: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23680: LD_INT 21
23682: PPUSH
23683: LD_VAR 0 3
23687: PPUSH
23688: LD_INT 1
23690: PPUSH
23691: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23695: LD_INT 22
23697: PPUSH
23698: LD_VAR 0 3
23702: PPUSH
23703: LD_INT 1
23705: PPUSH
23706: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23710: LD_INT 54
23712: PPUSH
23713: LD_VAR 0 3
23717: PPUSH
23718: LD_INT 1
23720: PPUSH
23721: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23725: LD_INT 0
23727: PPUSH
23728: LD_VAR 0 3
23732: PPUSH
23733: LD_INT 1
23735: PPUSH
23736: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23740: LD_INT 1
23742: PPUSH
23743: LD_VAR 0 3
23747: PPUSH
23748: LD_INT 1
23750: PPUSH
23751: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23755: LD_INT 2
23757: PPUSH
23758: LD_VAR 0 3
23762: PPUSH
23763: LD_INT 1
23765: PPUSH
23766: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23770: LD_INT 3
23772: PPUSH
23773: LD_VAR 0 3
23777: PPUSH
23778: LD_INT 1
23780: PPUSH
23781: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23785: LD_INT 4
23787: PPUSH
23788: LD_VAR 0 3
23792: PPUSH
23793: LD_INT 1
23795: PPUSH
23796: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23800: LD_INT 5
23802: PPUSH
23803: LD_VAR 0 3
23807: PPUSH
23808: LD_INT 1
23810: PPUSH
23811: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23815: LD_INT 6
23817: PPUSH
23818: LD_VAR 0 3
23822: PPUSH
23823: LD_INT 1
23825: PPUSH
23826: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23830: LD_INT 7
23832: PPUSH
23833: LD_VAR 0 3
23837: PPUSH
23838: LD_INT 1
23840: PPUSH
23841: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23845: LD_INT 8
23847: PPUSH
23848: LD_VAR 0 3
23852: PPUSH
23853: LD_INT 1
23855: PPUSH
23856: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23860: LD_INT 10
23862: PPUSH
23863: LD_VAR 0 3
23867: PPUSH
23868: LD_INT 1
23870: PPUSH
23871: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23875: LD_INT 11
23877: PPUSH
23878: LD_VAR 0 3
23882: PPUSH
23883: LD_INT 1
23885: PPUSH
23886: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23890: LD_INT 12
23892: PPUSH
23893: LD_VAR 0 3
23897: PPUSH
23898: LD_INT 1
23900: PPUSH
23901: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23905: LD_INT 13
23907: PPUSH
23908: LD_VAR 0 3
23912: PPUSH
23913: LD_INT 1
23915: PPUSH
23916: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23920: LD_INT 14
23922: PPUSH
23923: LD_VAR 0 3
23927: PPUSH
23928: LD_INT 1
23930: PPUSH
23931: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23935: LD_INT 15
23937: PPUSH
23938: LD_VAR 0 3
23942: PPUSH
23943: LD_INT 1
23945: PPUSH
23946: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23950: LD_INT 16
23952: PPUSH
23953: LD_VAR 0 3
23957: PPUSH
23958: LD_INT 1
23960: PPUSH
23961: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23965: LD_INT 17
23967: PPUSH
23968: LD_VAR 0 3
23972: PPUSH
23973: LD_INT 1
23975: PPUSH
23976: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23980: LD_INT 19
23982: PPUSH
23983: LD_VAR 0 3
23987: PPUSH
23988: LD_INT 1
23990: PPUSH
23991: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23995: LD_INT 20
23997: PPUSH
23998: LD_VAR 0 3
24002: PPUSH
24003: LD_INT 1
24005: PPUSH
24006: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
24010: LD_INT 21
24012: PPUSH
24013: LD_VAR 0 3
24017: PPUSH
24018: LD_INT 1
24020: PPUSH
24021: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
24025: LD_INT 23
24027: PPUSH
24028: LD_VAR 0 3
24032: PPUSH
24033: LD_INT 1
24035: PPUSH
24036: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
24040: LD_INT 26
24042: PPUSH
24043: LD_VAR 0 3
24047: PPUSH
24048: LD_INT 1
24050: PPUSH
24051: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
24055: LD_INT 27
24057: PPUSH
24058: LD_VAR 0 3
24062: PPUSH
24063: LD_INT 1
24065: PPUSH
24066: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
24070: LD_INT 28
24072: PPUSH
24073: LD_VAR 0 3
24077: PPUSH
24078: LD_INT 1
24080: PPUSH
24081: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
24085: LD_INT 29
24087: PPUSH
24088: LD_VAR 0 3
24092: PPUSH
24093: LD_INT 1
24095: PPUSH
24096: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24100: LD_INT 30
24102: PPUSH
24103: LD_VAR 0 3
24107: PPUSH
24108: LD_INT 1
24110: PPUSH
24111: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24115: LD_INT 31
24117: PPUSH
24118: LD_VAR 0 3
24122: PPUSH
24123: LD_INT 1
24125: PPUSH
24126: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24130: LD_INT 32
24132: PPUSH
24133: LD_VAR 0 3
24137: PPUSH
24138: LD_INT 1
24140: PPUSH
24141: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
24145: LD_INT 36
24147: PPUSH
24148: LD_VAR 0 3
24152: PPUSH
24153: LD_INT 1
24155: PPUSH
24156: CALL_OW 324
// end ; 5 :
24160: GO 26291
24162: LD_INT 5
24164: DOUBLE
24165: EQUAL
24166: IFTRUE 24170
24168: GO 25283
24170: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
24171: LD_INT 35
24173: PPUSH
24174: LD_VAR 0 3
24178: PPUSH
24179: LD_INT 1
24181: PPUSH
24182: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
24186: LD_INT 45
24188: PPUSH
24189: LD_VAR 0 3
24193: PPUSH
24194: LD_INT 1
24196: PPUSH
24197: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
24201: LD_INT 46
24203: PPUSH
24204: LD_VAR 0 3
24208: PPUSH
24209: LD_INT 1
24211: PPUSH
24212: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
24216: LD_INT 47
24218: PPUSH
24219: LD_VAR 0 3
24223: PPUSH
24224: LD_INT 1
24226: PPUSH
24227: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
24231: LD_INT 1
24233: PPUSH
24234: LD_VAR 0 3
24238: PPUSH
24239: LD_INT 1
24241: PPUSH
24242: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
24246: LD_INT 2
24248: PPUSH
24249: LD_VAR 0 3
24253: PPUSH
24254: LD_INT 1
24256: PPUSH
24257: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
24261: LD_INT 11
24263: PPUSH
24264: LD_VAR 0 3
24268: PPUSH
24269: LD_INT 1
24271: PPUSH
24272: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24276: LD_INT 20
24278: PPUSH
24279: LD_VAR 0 3
24283: PPUSH
24284: LD_INT 1
24286: PPUSH
24287: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24291: LD_INT 48
24293: PPUSH
24294: LD_VAR 0 3
24298: PPUSH
24299: LD_INT 1
24301: PPUSH
24302: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24306: LD_INT 49
24308: PPUSH
24309: LD_VAR 0 3
24313: PPUSH
24314: LD_INT 1
24316: PPUSH
24317: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24321: LD_INT 69
24323: PPUSH
24324: LD_VAR 0 3
24328: PPUSH
24329: LD_INT 1
24331: PPUSH
24332: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24336: LD_INT 39
24338: PPUSH
24339: LD_VAR 0 3
24343: PPUSH
24344: LD_INT 1
24346: PPUSH
24347: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24351: LD_INT 34
24353: PPUSH
24354: LD_VAR 0 3
24358: PPUSH
24359: LD_INT 1
24361: PPUSH
24362: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24366: LD_INT 42
24368: PPUSH
24369: LD_VAR 0 3
24373: PPUSH
24374: LD_INT 1
24376: PPUSH
24377: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24381: LD_INT 44
24383: PPUSH
24384: LD_VAR 0 3
24388: PPUSH
24389: LD_INT 1
24391: PPUSH
24392: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24396: LD_INT 41
24398: PPUSH
24399: LD_VAR 0 3
24403: PPUSH
24404: LD_INT 1
24406: PPUSH
24407: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24411: LD_INT 40
24413: PPUSH
24414: LD_VAR 0 3
24418: PPUSH
24419: LD_INT 1
24421: PPUSH
24422: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24426: LD_INT 43
24428: PPUSH
24429: LD_VAR 0 3
24433: PPUSH
24434: LD_INT 1
24436: PPUSH
24437: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24441: LD_INT 70
24443: PPUSH
24444: LD_VAR 0 3
24448: PPUSH
24449: LD_INT 1
24451: PPUSH
24452: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24456: LD_INT 51
24458: PPUSH
24459: LD_VAR 0 3
24463: PPUSH
24464: LD_INT 1
24466: PPUSH
24467: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24471: LD_INT 52
24473: PPUSH
24474: LD_VAR 0 3
24478: PPUSH
24479: LD_INT 1
24481: PPUSH
24482: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24486: LD_INT 6
24488: PPUSH
24489: LD_VAR 0 3
24493: PPUSH
24494: LD_INT 1
24496: PPUSH
24497: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24501: LD_INT 15
24503: PPUSH
24504: LD_VAR 0 3
24508: PPUSH
24509: LD_INT 1
24511: PPUSH
24512: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24516: LD_INT 7
24518: PPUSH
24519: LD_VAR 0 3
24523: PPUSH
24524: LD_INT 1
24526: PPUSH
24527: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24531: LD_INT 12
24533: PPUSH
24534: LD_VAR 0 3
24538: PPUSH
24539: LD_INT 1
24541: PPUSH
24542: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24546: LD_INT 17
24548: PPUSH
24549: LD_VAR 0 3
24553: PPUSH
24554: LD_INT 1
24556: PPUSH
24557: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24561: LD_INT 18
24563: PPUSH
24564: LD_VAR 0 3
24568: PPUSH
24569: LD_INT 1
24571: PPUSH
24572: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24576: LD_INT 60
24578: PPUSH
24579: LD_VAR 0 3
24583: PPUSH
24584: LD_INT 1
24586: PPUSH
24587: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24591: LD_INT 32
24593: PPUSH
24594: LD_VAR 0 3
24598: PPUSH
24599: LD_INT 1
24601: PPUSH
24602: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24606: LD_INT 9
24608: PPUSH
24609: LD_VAR 0 3
24613: PPUSH
24614: LD_INT 1
24616: PPUSH
24617: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24621: LD_INT 57
24623: PPUSH
24624: LD_VAR 0 3
24628: PPUSH
24629: LD_INT 1
24631: PPUSH
24632: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24636: LD_INT 30
24638: PPUSH
24639: LD_VAR 0 3
24643: PPUSH
24644: LD_INT 1
24646: PPUSH
24647: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24651: LD_INT 37
24653: PPUSH
24654: LD_VAR 0 3
24658: PPUSH
24659: LD_INT 1
24661: PPUSH
24662: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24666: LD_INT 63
24668: PPUSH
24669: LD_VAR 0 3
24673: PPUSH
24674: LD_INT 1
24676: PPUSH
24677: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24681: LD_INT 3
24683: PPUSH
24684: LD_VAR 0 3
24688: PPUSH
24689: LD_INT 1
24691: PPUSH
24692: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24696: LD_INT 4
24698: PPUSH
24699: LD_VAR 0 3
24703: PPUSH
24704: LD_INT 1
24706: PPUSH
24707: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24711: LD_INT 5
24713: PPUSH
24714: LD_VAR 0 3
24718: PPUSH
24719: LD_INT 1
24721: PPUSH
24722: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24726: LD_INT 66
24728: PPUSH
24729: LD_VAR 0 3
24733: PPUSH
24734: LD_INT 1
24736: PPUSH
24737: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24741: LD_INT 21
24743: PPUSH
24744: LD_VAR 0 3
24748: PPUSH
24749: LD_INT 1
24751: PPUSH
24752: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24756: LD_INT 22
24758: PPUSH
24759: LD_VAR 0 3
24763: PPUSH
24764: LD_INT 1
24766: PPUSH
24767: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24771: LD_INT 19
24773: PPUSH
24774: LD_VAR 0 3
24778: PPUSH
24779: LD_INT 1
24781: PPUSH
24782: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24786: LD_INT 54
24788: PPUSH
24789: LD_VAR 0 3
24793: PPUSH
24794: LD_INT 1
24796: PPUSH
24797: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24801: LD_INT 55
24803: PPUSH
24804: LD_VAR 0 3
24808: PPUSH
24809: LD_INT 1
24811: PPUSH
24812: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
24816: LD_INT 0
24818: PPUSH
24819: LD_VAR 0 3
24823: PPUSH
24824: LD_INT 1
24826: PPUSH
24827: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
24831: LD_INT 1
24833: PPUSH
24834: LD_VAR 0 3
24838: PPUSH
24839: LD_INT 1
24841: PPUSH
24842: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24846: LD_INT 2
24848: PPUSH
24849: LD_VAR 0 3
24853: PPUSH
24854: LD_INT 1
24856: PPUSH
24857: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24861: LD_INT 3
24863: PPUSH
24864: LD_VAR 0 3
24868: PPUSH
24869: LD_INT 1
24871: PPUSH
24872: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24876: LD_INT 4
24878: PPUSH
24879: LD_VAR 0 3
24883: PPUSH
24884: LD_INT 1
24886: PPUSH
24887: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24891: LD_INT 5
24893: PPUSH
24894: LD_VAR 0 3
24898: PPUSH
24899: LD_INT 1
24901: PPUSH
24902: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24906: LD_INT 6
24908: PPUSH
24909: LD_VAR 0 3
24913: PPUSH
24914: LD_INT 1
24916: PPUSH
24917: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24921: LD_INT 7
24923: PPUSH
24924: LD_VAR 0 3
24928: PPUSH
24929: LD_INT 1
24931: PPUSH
24932: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24936: LD_INT 8
24938: PPUSH
24939: LD_VAR 0 3
24943: PPUSH
24944: LD_INT 1
24946: PPUSH
24947: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24951: LD_INT 10
24953: PPUSH
24954: LD_VAR 0 3
24958: PPUSH
24959: LD_INT 1
24961: PPUSH
24962: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24966: LD_INT 11
24968: PPUSH
24969: LD_VAR 0 3
24973: PPUSH
24974: LD_INT 1
24976: PPUSH
24977: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24981: LD_INT 12
24983: PPUSH
24984: LD_VAR 0 3
24988: PPUSH
24989: LD_INT 1
24991: PPUSH
24992: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24996: LD_INT 13
24998: PPUSH
24999: LD_VAR 0 3
25003: PPUSH
25004: LD_INT 1
25006: PPUSH
25007: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
25011: LD_INT 14
25013: PPUSH
25014: LD_VAR 0 3
25018: PPUSH
25019: LD_INT 1
25021: PPUSH
25022: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
25026: LD_INT 15
25028: PPUSH
25029: LD_VAR 0 3
25033: PPUSH
25034: LD_INT 1
25036: PPUSH
25037: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
25041: LD_INT 16
25043: PPUSH
25044: LD_VAR 0 3
25048: PPUSH
25049: LD_INT 1
25051: PPUSH
25052: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
25056: LD_INT 17
25058: PPUSH
25059: LD_VAR 0 3
25063: PPUSH
25064: LD_INT 1
25066: PPUSH
25067: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
25071: LD_INT 18
25073: PPUSH
25074: LD_VAR 0 3
25078: PPUSH
25079: LD_INT 1
25081: PPUSH
25082: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
25086: LD_INT 19
25088: PPUSH
25089: LD_VAR 0 3
25093: PPUSH
25094: LD_INT 1
25096: PPUSH
25097: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
25101: LD_INT 20
25103: PPUSH
25104: LD_VAR 0 3
25108: PPUSH
25109: LD_INT 1
25111: PPUSH
25112: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
25116: LD_INT 21
25118: PPUSH
25119: LD_VAR 0 3
25123: PPUSH
25124: LD_INT 1
25126: PPUSH
25127: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
25131: LD_INT 23
25133: PPUSH
25134: LD_VAR 0 3
25138: PPUSH
25139: LD_INT 1
25141: PPUSH
25142: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
25146: LD_INT 26
25148: PPUSH
25149: LD_VAR 0 3
25153: PPUSH
25154: LD_INT 1
25156: PPUSH
25157: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
25161: LD_INT 27
25163: PPUSH
25164: LD_VAR 0 3
25168: PPUSH
25169: LD_INT 1
25171: PPUSH
25172: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
25176: LD_INT 28
25178: PPUSH
25179: LD_VAR 0 3
25183: PPUSH
25184: LD_INT 1
25186: PPUSH
25187: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
25191: LD_INT 29
25193: PPUSH
25194: LD_VAR 0 3
25198: PPUSH
25199: LD_INT 1
25201: PPUSH
25202: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
25206: LD_INT 30
25208: PPUSH
25209: LD_VAR 0 3
25213: PPUSH
25214: LD_INT 1
25216: PPUSH
25217: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
25221: LD_INT 31
25223: PPUSH
25224: LD_VAR 0 3
25228: PPUSH
25229: LD_INT 1
25231: PPUSH
25232: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
25236: LD_INT 32
25238: PPUSH
25239: LD_VAR 0 3
25243: PPUSH
25244: LD_INT 1
25246: PPUSH
25247: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
25251: LD_INT 33
25253: PPUSH
25254: LD_VAR 0 3
25258: PPUSH
25259: LD_INT 1
25261: PPUSH
25262: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
25266: LD_INT 36
25268: PPUSH
25269: LD_VAR 0 3
25273: PPUSH
25274: LD_INT 1
25276: PPUSH
25277: CALL_OW 324
// end ; 6 :
25281: GO 26291
25283: LD_INT 6
25285: DOUBLE
25286: EQUAL
25287: IFTRUE 25291
25289: GO 26216
25291: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
25292: LD_INT 35
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: LD_INT 1
25302: PPUSH
25303: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
25307: LD_INT 45
25309: PPUSH
25310: LD_VAR 0 3
25314: PPUSH
25315: LD_INT 1
25317: PPUSH
25318: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
25322: LD_INT 46
25324: PPUSH
25325: LD_VAR 0 3
25329: PPUSH
25330: LD_INT 1
25332: PPUSH
25333: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
25337: LD_INT 47
25339: PPUSH
25340: LD_VAR 0 3
25344: PPUSH
25345: LD_INT 1
25347: PPUSH
25348: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
25352: LD_INT 1
25354: PPUSH
25355: LD_VAR 0 3
25359: PPUSH
25360: LD_INT 1
25362: PPUSH
25363: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
25367: LD_INT 2
25369: PPUSH
25370: LD_VAR 0 3
25374: PPUSH
25375: LD_INT 1
25377: PPUSH
25378: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
25382: LD_INT 11
25384: PPUSH
25385: LD_VAR 0 3
25389: PPUSH
25390: LD_INT 1
25392: PPUSH
25393: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
25397: LD_INT 20
25399: PPUSH
25400: LD_VAR 0 3
25404: PPUSH
25405: LD_INT 1
25407: PPUSH
25408: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
25412: LD_INT 48
25414: PPUSH
25415: LD_VAR 0 3
25419: PPUSH
25420: LD_INT 1
25422: PPUSH
25423: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
25427: LD_INT 49
25429: PPUSH
25430: LD_VAR 0 3
25434: PPUSH
25435: LD_INT 1
25437: PPUSH
25438: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
25442: LD_INT 50
25444: PPUSH
25445: LD_VAR 0 3
25449: PPUSH
25450: LD_INT 1
25452: PPUSH
25453: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
25457: LD_INT 69
25459: PPUSH
25460: LD_VAR 0 3
25464: PPUSH
25465: LD_INT 1
25467: PPUSH
25468: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
25472: LD_INT 39
25474: PPUSH
25475: LD_VAR 0 3
25479: PPUSH
25480: LD_INT 1
25482: PPUSH
25483: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
25487: LD_INT 34
25489: PPUSH
25490: LD_VAR 0 3
25494: PPUSH
25495: LD_INT 1
25497: PPUSH
25498: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
25502: LD_INT 42
25504: PPUSH
25505: LD_VAR 0 3
25509: PPUSH
25510: LD_INT 1
25512: PPUSH
25513: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
25517: LD_INT 44
25519: PPUSH
25520: LD_VAR 0 3
25524: PPUSH
25525: LD_INT 1
25527: PPUSH
25528: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
25532: LD_INT 41
25534: PPUSH
25535: LD_VAR 0 3
25539: PPUSH
25540: LD_INT 1
25542: PPUSH
25543: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
25547: LD_INT 13
25549: PPUSH
25550: LD_VAR 0 3
25554: PPUSH
25555: LD_INT 1
25557: PPUSH
25558: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
25562: LD_INT 40
25564: PPUSH
25565: LD_VAR 0 3
25569: PPUSH
25570: LD_INT 1
25572: PPUSH
25573: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
25577: LD_INT 43
25579: PPUSH
25580: LD_VAR 0 3
25584: PPUSH
25585: LD_INT 1
25587: PPUSH
25588: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
25592: LD_INT 70
25594: PPUSH
25595: LD_VAR 0 3
25599: PPUSH
25600: LD_INT 1
25602: PPUSH
25603: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
25607: LD_INT 23
25609: PPUSH
25610: LD_VAR 0 3
25614: PPUSH
25615: LD_INT 1
25617: PPUSH
25618: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
25622: LD_INT 51
25624: PPUSH
25625: LD_VAR 0 3
25629: PPUSH
25630: LD_INT 1
25632: PPUSH
25633: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
25637: LD_INT 52
25639: PPUSH
25640: LD_VAR 0 3
25644: PPUSH
25645: LD_INT 1
25647: PPUSH
25648: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
25652: LD_INT 6
25654: PPUSH
25655: LD_VAR 0 3
25659: PPUSH
25660: LD_INT 1
25662: PPUSH
25663: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
25667: LD_INT 15
25669: PPUSH
25670: LD_VAR 0 3
25674: PPUSH
25675: LD_INT 1
25677: PPUSH
25678: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
25682: LD_INT 7
25684: PPUSH
25685: LD_VAR 0 3
25689: PPUSH
25690: LD_INT 1
25692: PPUSH
25693: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
25697: LD_INT 12
25699: PPUSH
25700: LD_VAR 0 3
25704: PPUSH
25705: LD_INT 1
25707: PPUSH
25708: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
25712: LD_INT 10
25714: PPUSH
25715: LD_VAR 0 3
25719: PPUSH
25720: LD_INT 1
25722: PPUSH
25723: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
25727: LD_INT 17
25729: PPUSH
25730: LD_VAR 0 3
25734: PPUSH
25735: LD_INT 1
25737: PPUSH
25738: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
25742: LD_INT 18
25744: PPUSH
25745: LD_VAR 0 3
25749: PPUSH
25750: LD_INT 1
25752: PPUSH
25753: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
25757: LD_INT 60
25759: PPUSH
25760: LD_VAR 0 3
25764: PPUSH
25765: LD_INT 1
25767: PPUSH
25768: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
25772: LD_INT 61
25774: PPUSH
25775: LD_VAR 0 3
25779: PPUSH
25780: LD_INT 1
25782: PPUSH
25783: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
25787: LD_INT 32
25789: PPUSH
25790: LD_VAR 0 3
25794: PPUSH
25795: LD_INT 1
25797: PPUSH
25798: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
25802: LD_INT 27
25804: PPUSH
25805: LD_VAR 0 3
25809: PPUSH
25810: LD_INT 1
25812: PPUSH
25813: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
25817: LD_INT 36
25819: PPUSH
25820: LD_VAR 0 3
25824: PPUSH
25825: LD_INT 1
25827: PPUSH
25828: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
25832: LD_INT 33
25834: PPUSH
25835: LD_VAR 0 3
25839: PPUSH
25840: LD_INT 1
25842: PPUSH
25843: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25847: LD_INT 9
25849: PPUSH
25850: LD_VAR 0 3
25854: PPUSH
25855: LD_INT 1
25857: PPUSH
25858: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25862: LD_INT 38
25864: PPUSH
25865: LD_VAR 0 3
25869: PPUSH
25870: LD_INT 1
25872: PPUSH
25873: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25877: LD_INT 57
25879: PPUSH
25880: LD_VAR 0 3
25884: PPUSH
25885: LD_INT 1
25887: PPUSH
25888: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25892: LD_INT 58
25894: PPUSH
25895: LD_VAR 0 3
25899: PPUSH
25900: LD_INT 1
25902: PPUSH
25903: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25907: LD_INT 28
25909: PPUSH
25910: LD_VAR 0 3
25914: PPUSH
25915: LD_INT 1
25917: PPUSH
25918: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25922: LD_INT 29
25924: PPUSH
25925: LD_VAR 0 3
25929: PPUSH
25930: LD_INT 1
25932: PPUSH
25933: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25937: LD_INT 30
25939: PPUSH
25940: LD_VAR 0 3
25944: PPUSH
25945: LD_INT 1
25947: PPUSH
25948: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25952: LD_INT 37
25954: PPUSH
25955: LD_VAR 0 3
25959: PPUSH
25960: LD_INT 1
25962: PPUSH
25963: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25967: LD_INT 63
25969: PPUSH
25970: LD_VAR 0 3
25974: PPUSH
25975: LD_INT 1
25977: PPUSH
25978: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25982: LD_INT 64
25984: PPUSH
25985: LD_VAR 0 3
25989: PPUSH
25990: LD_INT 1
25992: PPUSH
25993: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25997: LD_INT 3
25999: PPUSH
26000: LD_VAR 0 3
26004: PPUSH
26005: LD_INT 1
26007: PPUSH
26008: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
26012: LD_INT 4
26014: PPUSH
26015: LD_VAR 0 3
26019: PPUSH
26020: LD_INT 1
26022: PPUSH
26023: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
26027: LD_INT 5
26029: PPUSH
26030: LD_VAR 0 3
26034: PPUSH
26035: LD_INT 1
26037: PPUSH
26038: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
26042: LD_INT 8
26044: PPUSH
26045: LD_VAR 0 3
26049: PPUSH
26050: LD_INT 1
26052: PPUSH
26053: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
26057: LD_INT 66
26059: PPUSH
26060: LD_VAR 0 3
26064: PPUSH
26065: LD_INT 1
26067: PPUSH
26068: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
26072: LD_INT 67
26074: PPUSH
26075: LD_VAR 0 3
26079: PPUSH
26080: LD_INT 1
26082: PPUSH
26083: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
26087: LD_INT 21
26089: PPUSH
26090: LD_VAR 0 3
26094: PPUSH
26095: LD_INT 1
26097: PPUSH
26098: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
26102: LD_INT 22
26104: PPUSH
26105: LD_VAR 0 3
26109: PPUSH
26110: LD_INT 1
26112: PPUSH
26113: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
26117: LD_INT 19
26119: PPUSH
26120: LD_VAR 0 3
26124: PPUSH
26125: LD_INT 1
26127: PPUSH
26128: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
26132: LD_INT 26
26134: PPUSH
26135: LD_VAR 0 3
26139: PPUSH
26140: LD_INT 1
26142: PPUSH
26143: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
26147: LD_INT 54
26149: PPUSH
26150: LD_VAR 0 3
26154: PPUSH
26155: LD_INT 1
26157: PPUSH
26158: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
26162: LD_INT 55
26164: PPUSH
26165: LD_VAR 0 3
26169: PPUSH
26170: LD_INT 1
26172: PPUSH
26173: CALL_OW 322
// for i = 0 to 39 do
26177: LD_ADDR_VAR 0 4
26181: PUSH
26182: DOUBLE
26183: LD_INT 0
26185: DEC
26186: ST_TO_ADDR
26187: LD_INT 39
26189: PUSH
26190: FOR_TO
26191: IFFALSE 26212
// SetRestrict ( i , side , true ) ;
26193: LD_VAR 0 4
26197: PPUSH
26198: LD_VAR 0 3
26202: PPUSH
26203: LD_INT 1
26205: PPUSH
26206: CALL_OW 324
26210: GO 26190
26212: POP
26213: POP
// end ; else
26214: GO 26291
26216: POP
// begin for i = 1 to 73 do
26217: LD_ADDR_VAR 0 4
26221: PUSH
26222: DOUBLE
26223: LD_INT 1
26225: DEC
26226: ST_TO_ADDR
26227: LD_INT 73
26229: PUSH
26230: FOR_TO
26231: IFFALSE 26252
// SetTech ( i , side , state_enabled ) ;
26233: LD_VAR 0 4
26237: PPUSH
26238: LD_VAR 0 3
26242: PPUSH
26243: LD_INT 1
26245: PPUSH
26246: CALL_OW 322
26250: GO 26230
26252: POP
26253: POP
// for i = 0 to 39 do
26254: LD_ADDR_VAR 0 4
26258: PUSH
26259: DOUBLE
26260: LD_INT 0
26262: DEC
26263: ST_TO_ADDR
26264: LD_INT 39
26266: PUSH
26267: FOR_TO
26268: IFFALSE 26289
// SetRestrict ( i , side , true ) ;
26270: LD_VAR 0 4
26274: PPUSH
26275: LD_VAR 0 3
26279: PPUSH
26280: LD_INT 1
26282: PPUSH
26283: CALL_OW 324
26287: GO 26267
26289: POP
26290: POP
// end ; end ; end ;
26291: GO 22296
26293: POP
26294: POP
// end ; end_of_file
26295: LD_VAR 0 2
26299: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
26300: LD_INT 0
26302: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
26303: LD_VAR 0 1
26307: PPUSH
26308: LD_VAR 0 2
26312: PPUSH
26313: LD_VAR 0 3
26317: PPUSH
26318: LD_INT 0
26320: PPUSH
26321: CALL 26330 0 4
// end ;
26325: LD_VAR 0 4
26329: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
26330: LD_INT 0
26332: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
26333: LD_STRING initScore({
26335: PUSH
26336: LD_VAR 0 1
26340: PUSH
26341: LD_INT 1
26343: ARRAY
26344: STR
26345: PUSH
26346: LD_STRING ,
26348: STR
26349: PUSH
26350: LD_VAR 0 1
26354: PUSH
26355: LD_INT 2
26357: ARRAY
26358: STR
26359: PUSH
26360: LD_STRING ,
26362: STR
26363: PUSH
26364: LD_VAR 0 1
26368: PUSH
26369: LD_INT 3
26371: ARRAY
26372: STR
26373: PUSH
26374: LD_STRING ,
26376: STR
26377: PUSH
26378: LD_VAR 0 1
26382: PUSH
26383: LD_INT 4
26385: ARRAY
26386: STR
26387: PUSH
26388: LD_STRING ,
26390: STR
26391: PUSH
26392: LD_VAR 0 1
26396: PUSH
26397: LD_INT 5
26399: ARRAY
26400: STR
26401: PUSH
26402: LD_STRING ,
26404: STR
26405: PUSH
26406: LD_VAR 0 1
26410: PUSH
26411: LD_INT 6
26413: ARRAY
26414: STR
26415: PUSH
26416: LD_STRING ,
26418: STR
26419: PUSH
26420: LD_VAR 0 1
26424: PUSH
26425: LD_INT 7
26427: ARRAY
26428: STR
26429: PUSH
26430: LD_STRING ,
26432: STR
26433: PUSH
26434: LD_VAR 0 1
26438: PUSH
26439: LD_INT 8
26441: ARRAY
26442: STR
26443: PUSH
26444: LD_STRING },
26446: STR
26447: PUSH
26448: LD_VAR 0 2
26452: STR
26453: PUSH
26454: LD_STRING ,
26456: STR
26457: PUSH
26458: LD_VAR 0 3
26462: STR
26463: PUSH
26464: LD_STRING ,
26466: STR
26467: PUSH
26468: LD_VAR 0 4
26472: STR
26473: PUSH
26474: LD_STRING );
26476: STR
26477: PPUSH
26478: CALL_OW 559
// end ;
26482: LD_VAR 0 5
26486: RET
// export function LScore_Reset ( ) ; begin
26487: LD_INT 0
26489: PPUSH
// ToLua ( ResetScorebar(); ) ;
26490: LD_STRING ResetScorebar();
26492: PPUSH
26493: CALL_OW 559
// end ;
26497: LD_VAR 0 1
26501: RET
// export function LScore_Delete ( ID ) ; begin
26502: LD_INT 0
26504: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
26505: LD_STRING deleteScore(
26507: PUSH
26508: LD_VAR 0 1
26512: STR
26513: PUSH
26514: LD_STRING );
26516: STR
26517: PPUSH
26518: CALL_OW 559
// end ;
26522: LD_VAR 0 2
26526: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
26527: LD_INT 0
26529: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
26530: LD_STRING AST(
26532: PUSH
26533: LD_VAR 0 1
26537: STR
26538: PUSH
26539: LD_STRING ,
26541: STR
26542: PUSH
26543: LD_VAR 0 2
26547: STR
26548: PUSH
26549: LD_STRING ,
26551: STR
26552: PUSH
26553: LD_VAR 0 3
26557: STR
26558: PUSH
26559: LD_STRING ,);
26561: STR
26562: PPUSH
26563: CALL_OW 559
// end ;
26567: LD_VAR 0 4
26571: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
26572: LD_INT 0
26574: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
26575: LD_STRING AST(
26577: PUSH
26578: LD_VAR 0 1
26582: STR
26583: PUSH
26584: LD_STRING ,
26586: STR
26587: PUSH
26588: LD_VAR 0 2
26592: STR
26593: PUSH
26594: LD_STRING ,
26596: STR
26597: PUSH
26598: LD_VAR 0 3
26602: STR
26603: PUSH
26604: LD_STRING ,
26606: STR
26607: PUSH
26608: LD_VAR 0 4
26612: STR
26613: PUSH
26614: LD_STRING );
26616: STR
26617: PPUSH
26618: CALL_OW 559
// end ;
26622: LD_VAR 0 5
26626: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
26627: LD_INT 0
26629: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
26630: LD_STRING AST(
26632: PUSH
26633: LD_VAR 0 1
26637: STR
26638: PUSH
26639: LD_STRING ,
26641: STR
26642: PUSH
26643: LD_VAR 0 2
26647: STR
26648: PUSH
26649: LD_STRING ,
26651: STR
26652: PUSH
26653: LD_VAR 0 3
26657: STR
26658: PUSH
26659: LD_STRING ,
26661: STR
26662: PUSH
26663: LD_VAR 0 4
26667: STR
26668: PUSH
26669: LD_STRING ,
26671: STR
26672: PUSH
26673: LD_VAR 0 5
26677: STR
26678: PUSH
26679: LD_STRING );
26681: STR
26682: PPUSH
26683: CALL_OW 559
// end ;
26687: LD_VAR 0 6
26691: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
26692: LD_INT 0
26694: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
26695: LD_STRING ASRT(
26697: PUSH
26698: LD_VAR 0 1
26702: STR
26703: PUSH
26704: LD_STRING ,
26706: STR
26707: PUSH
26708: LD_VAR 0 2
26712: STR
26713: PUSH
26714: LD_STRING ,
26716: STR
26717: PUSH
26718: LD_VAR 0 3
26722: STR
26723: PUSH
26724: LD_STRING ,);
26726: STR
26727: PPUSH
26728: CALL_OW 559
// end ;
26732: LD_VAR 0 4
26736: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
26737: LD_INT 0
26739: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
26740: LD_STRING ASRT(
26742: PUSH
26743: LD_VAR 0 1
26747: STR
26748: PUSH
26749: LD_STRING ,
26751: STR
26752: PUSH
26753: LD_VAR 0 2
26757: STR
26758: PUSH
26759: LD_STRING ,
26761: STR
26762: PUSH
26763: LD_VAR 0 3
26767: STR
26768: PUSH
26769: LD_STRING ,
26771: STR
26772: PUSH
26773: LD_VAR 0 4
26777: STR
26778: PUSH
26779: LD_STRING );
26781: STR
26782: PPUSH
26783: CALL_OW 559
// end ;
26787: LD_VAR 0 5
26791: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
26792: LD_INT 0
26794: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
26795: LD_STRING ASRT(
26797: PUSH
26798: LD_VAR 0 1
26802: STR
26803: PUSH
26804: LD_STRING ,
26806: STR
26807: PUSH
26808: LD_VAR 0 2
26812: STR
26813: PUSH
26814: LD_STRING ,
26816: STR
26817: PUSH
26818: LD_VAR 0 3
26822: STR
26823: PUSH
26824: LD_STRING ,
26826: STR
26827: PUSH
26828: LD_VAR 0 4
26832: STR
26833: PUSH
26834: LD_STRING ,
26836: STR
26837: PUSH
26838: LD_VAR 0 5
26842: STR
26843: PUSH
26844: LD_STRING );
26846: STR
26847: PPUSH
26848: CALL_OW 559
// end ;
26852: LD_VAR 0 6
26856: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
26857: LD_INT 0
26859: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
26860: LD_STRING UST(
26862: PUSH
26863: LD_VAR 0 1
26867: STR
26868: PUSH
26869: LD_STRING ,
26871: STR
26872: PUSH
26873: LD_VAR 0 2
26877: STR
26878: PUSH
26879: LD_STRING );
26881: STR
26882: PPUSH
26883: CALL_OW 559
// end ;
26887: LD_VAR 0 3
26891: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
26892: LD_INT 0
26894: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
26895: LD_STRING UST(
26897: PUSH
26898: LD_VAR 0 1
26902: STR
26903: PUSH
26904: LD_STRING ,
26906: STR
26907: PUSH
26908: LD_VAR 0 2
26912: STR
26913: PUSH
26914: LD_STRING ,
26916: STR
26917: PUSH
26918: LD_VAR 0 3
26922: STR
26923: PUSH
26924: LD_STRING );
26926: STR
26927: PPUSH
26928: CALL_OW 559
// end ;
26932: LD_VAR 0 4
26936: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
26937: LD_INT 0
26939: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
26940: LD_STRING CCST(
26942: PUSH
26943: LD_VAR 0 1
26947: STR
26948: PUSH
26949: LD_STRING ,{
26951: STR
26952: PUSH
26953: LD_VAR 0 2
26957: STR
26958: PUSH
26959: LD_STRING ,
26961: STR
26962: PUSH
26963: LD_VAR 0 3
26967: STR
26968: PUSH
26969: LD_STRING ,
26971: STR
26972: PUSH
26973: LD_VAR 0 4
26977: STR
26978: PUSH
26979: LD_STRING });
26981: STR
26982: PPUSH
26983: CALL_OW 559
// end ;
26987: LD_VAR 0 5
26991: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
26992: LD_INT 0
26994: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
26995: LD_STRING CCST(
26997: PUSH
26998: LD_VAR 0 1
27002: STR
27003: PUSH
27004: LD_STRING ,
27006: STR
27007: PUSH
27008: LD_VAR 0 2
27012: STR
27013: PUSH
27014: LD_STRING );
27016: STR
27017: PPUSH
27018: CALL_OW 559
// end ;
27022: LD_VAR 0 3
27026: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
27027: LD_INT 0
27029: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
27030: LD_STRING ASSP(
27032: PUSH
27033: LD_VAR 0 1
27037: STR
27038: PUSH
27039: LD_STRING ,
27041: STR
27042: PUSH
27043: LD_VAR 0 2
27047: STR
27048: PUSH
27049: LD_STRING ,
27051: STR
27052: PUSH
27053: LD_VAR 0 3
27057: STR
27058: PUSH
27059: LD_STRING ,);
27061: STR
27062: PPUSH
27063: CALL_OW 559
// end ;
27067: LD_VAR 0 4
27071: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
27072: LD_INT 0
27074: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
27075: LD_STRING ASSP(
27077: PUSH
27078: LD_VAR 0 1
27082: STR
27083: PUSH
27084: LD_STRING ,
27086: STR
27087: PUSH
27088: LD_VAR 0 2
27092: STR
27093: PUSH
27094: LD_STRING ,
27096: STR
27097: PUSH
27098: LD_VAR 0 3
27102: STR
27103: PUSH
27104: LD_STRING ,
27106: STR
27107: PUSH
27108: LD_VAR 0 4
27112: STR
27113: PUSH
27114: LD_STRING );
27116: STR
27117: PPUSH
27118: CALL_OW 559
// end ;
27122: LD_VAR 0 5
27126: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
27127: LD_INT 0
27129: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
27130: LD_STRING ASSP(
27132: PUSH
27133: LD_VAR 0 1
27137: STR
27138: PUSH
27139: LD_STRING ,
27141: STR
27142: PUSH
27143: LD_VAR 0 2
27147: STR
27148: PUSH
27149: LD_STRING ,
27151: STR
27152: PUSH
27153: LD_VAR 0 3
27157: STR
27158: PUSH
27159: LD_STRING ,
27161: STR
27162: PUSH
27163: LD_VAR 0 4
27167: STR
27168: PUSH
27169: LD_STRING ,
27171: STR
27172: PUSH
27173: LD_VAR 0 5
27177: STR
27178: PUSH
27179: LD_STRING );
27181: STR
27182: PPUSH
27183: CALL_OW 559
// end ;
27187: LD_VAR 0 6
27191: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
27192: LD_INT 0
27194: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
27195: LD_STRING ASRSP(
27197: PUSH
27198: LD_VAR 0 1
27202: STR
27203: PUSH
27204: LD_STRING ,
27206: STR
27207: PUSH
27208: LD_VAR 0 2
27212: STR
27213: PUSH
27214: LD_STRING ,
27216: STR
27217: PUSH
27218: LD_VAR 0 3
27222: STR
27223: PUSH
27224: LD_STRING ,);
27226: STR
27227: PPUSH
27228: CALL_OW 559
// end ;
27232: LD_VAR 0 4
27236: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
27237: LD_INT 0
27239: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
27240: LD_STRING ASRSP(
27242: PUSH
27243: LD_VAR 0 1
27247: STR
27248: PUSH
27249: LD_STRING ,
27251: STR
27252: PUSH
27253: LD_VAR 0 2
27257: STR
27258: PUSH
27259: LD_STRING ,
27261: STR
27262: PUSH
27263: LD_VAR 0 3
27267: STR
27268: PUSH
27269: LD_STRING ,
27271: STR
27272: PUSH
27273: LD_VAR 0 4
27277: STR
27278: PUSH
27279: LD_STRING );
27281: STR
27282: PPUSH
27283: CALL_OW 559
// end ;
27287: LD_VAR 0 5
27291: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
27292: LD_INT 0
27294: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
27295: LD_STRING ASRSP(
27297: PUSH
27298: LD_VAR 0 1
27302: STR
27303: PUSH
27304: LD_STRING ,
27306: STR
27307: PUSH
27308: LD_VAR 0 2
27312: STR
27313: PUSH
27314: LD_STRING ,
27316: STR
27317: PUSH
27318: LD_VAR 0 3
27322: STR
27323: PUSH
27324: LD_STRING ,
27326: STR
27327: PUSH
27328: LD_VAR 0 4
27332: STR
27333: PUSH
27334: LD_STRING ,
27336: STR
27337: PUSH
27338: LD_VAR 0 5
27342: STR
27343: PUSH
27344: LD_STRING );
27346: STR
27347: PPUSH
27348: CALL_OW 559
// end ;
27352: LD_VAR 0 6
27356: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
27357: LD_INT 0
27359: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
27360: LD_STRING USSP(
27362: PUSH
27363: LD_VAR 0 1
27367: STR
27368: PUSH
27369: LD_STRING ,
27371: STR
27372: PUSH
27373: LD_VAR 0 2
27377: STR
27378: PUSH
27379: LD_STRING );
27381: STR
27382: PPUSH
27383: CALL_OW 559
// end ;
27387: LD_VAR 0 3
27391: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
27392: LD_INT 0
27394: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
27395: LD_STRING USSP(
27397: PUSH
27398: LD_VAR 0 1
27402: STR
27403: PUSH
27404: LD_STRING ,
27406: STR
27407: PUSH
27408: LD_VAR 0 2
27412: STR
27413: PUSH
27414: LD_STRING ,
27416: STR
27417: PUSH
27418: LD_VAR 0 3
27422: STR
27423: PUSH
27424: LD_STRING );
27426: STR
27427: PPUSH
27428: CALL_OW 559
// end ;
27432: LD_VAR 0 4
27436: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
27437: LD_INT 0
27439: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
27440: LD_STRING CCSSP(
27442: PUSH
27443: LD_VAR 0 1
27447: STR
27448: PUSH
27449: LD_STRING ,{
27451: STR
27452: PUSH
27453: LD_VAR 0 2
27457: STR
27458: PUSH
27459: LD_STRING ,
27461: STR
27462: PUSH
27463: LD_VAR 0 3
27467: STR
27468: PUSH
27469: LD_STRING ,
27471: STR
27472: PUSH
27473: LD_VAR 0 4
27477: STR
27478: PUSH
27479: LD_STRING });
27481: STR
27482: PPUSH
27483: CALL_OW 559
// end ;
27487: LD_VAR 0 5
27491: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
27492: LD_INT 0
27494: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
27495: LD_STRING CCSSP(
27497: PUSH
27498: LD_VAR 0 1
27502: STR
27503: PUSH
27504: LD_STRING ,
27506: STR
27507: PUSH
27508: LD_VAR 0 2
27512: STR
27513: PUSH
27514: LD_STRING );
27516: STR
27517: PPUSH
27518: CALL_OW 559
// end ;
27522: LD_VAR 0 3
27526: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
27527: LD_INT 0
27529: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
27530: LD_STRING ASP(
27532: PUSH
27533: LD_VAR 0 1
27537: STR
27538: PUSH
27539: LD_STRING ,
27541: STR
27542: PUSH
27543: LD_VAR 0 2
27547: STR
27548: PUSH
27549: LD_STRING ,
27551: STR
27552: PUSH
27553: LD_VAR 0 3
27557: STR
27558: PUSH
27559: LD_STRING );
27561: STR
27562: PPUSH
27563: CALL_OW 559
// end ;
27567: LD_VAR 0 4
27571: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
27572: LD_INT 0
27574: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
27575: LD_STRING USP(
27577: PUSH
27578: LD_VAR 0 1
27582: STR
27583: PUSH
27584: LD_STRING ,
27586: STR
27587: PUSH
27588: LD_VAR 0 2
27592: STR
27593: PUSH
27594: LD_STRING ,
27596: STR
27597: PUSH
27598: LD_VAR 0 3
27602: STR
27603: PUSH
27604: LD_STRING );
27606: STR
27607: PPUSH
27608: CALL_OW 559
// end ;
27612: LD_VAR 0 4
27616: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
27617: LD_INT 0
27619: PPUSH
27620: PPUSH
// for i = 1 to 8 do
27621: LD_ADDR_VAR 0 4
27625: PUSH
27626: DOUBLE
27627: LD_INT 1
27629: DEC
27630: ST_TO_ADDR
27631: LD_INT 8
27633: PUSH
27634: FOR_TO
27635: IFFALSE 27682
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
27637: LD_STRING USP(
27639: PUSH
27640: LD_VAR 0 1
27644: STR
27645: PUSH
27646: LD_STRING ,
27648: STR
27649: PUSH
27650: LD_VAR 0 4
27654: STR
27655: PUSH
27656: LD_STRING ,
27658: STR
27659: PUSH
27660: LD_VAR 0 2
27664: PUSH
27665: LD_VAR 0 4
27669: ARRAY
27670: STR
27671: PUSH
27672: LD_STRING );
27674: STR
27675: PPUSH
27676: CALL_OW 559
27680: GO 27634
27682: POP
27683: POP
// end ;
27684: LD_VAR 0 3
27688: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
27689: LD_INT 0
27691: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
27692: LD_STRING ASC(
27694: PUSH
27695: LD_VAR 0 1
27699: STR
27700: PUSH
27701: LD_STRING ,
27703: STR
27704: PUSH
27705: LD_VAR 0 2
27709: STR
27710: PUSH
27711: LD_STRING ,
27713: STR
27714: PUSH
27715: LD_VAR 0 3
27719: STR
27720: PUSH
27721: LD_STRING ,
27723: STR
27724: PUSH
27725: LD_VAR 0 4
27729: STR
27730: PUSH
27731: LD_STRING );
27733: STR
27734: PPUSH
27735: CALL_OW 559
// end ;
27739: LD_VAR 0 5
27743: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
27744: LD_INT 0
27746: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
27747: LD_STRING USC(
27749: PUSH
27750: LD_VAR 0 1
27754: STR
27755: PUSH
27756: LD_STRING ,{
27758: STR
27759: PUSH
27760: LD_VAR 0 2
27764: PUSH
27765: LD_INT 1
27767: ARRAY
27768: STR
27769: PUSH
27770: LD_STRING ,
27772: STR
27773: PUSH
27774: LD_VAR 0 2
27778: PUSH
27779: LD_INT 2
27781: ARRAY
27782: STR
27783: PUSH
27784: LD_STRING ,
27786: STR
27787: PUSH
27788: LD_VAR 0 2
27792: PUSH
27793: LD_INT 3
27795: ARRAY
27796: STR
27797: PUSH
27798: LD_STRING ,
27800: STR
27801: PUSH
27802: LD_VAR 0 2
27806: PUSH
27807: LD_INT 4
27809: ARRAY
27810: STR
27811: PUSH
27812: LD_STRING ,
27814: STR
27815: PUSH
27816: LD_VAR 0 2
27820: PUSH
27821: LD_INT 5
27823: ARRAY
27824: STR
27825: PUSH
27826: LD_STRING ,
27828: STR
27829: PUSH
27830: LD_VAR 0 2
27834: PUSH
27835: LD_INT 6
27837: ARRAY
27838: STR
27839: PUSH
27840: LD_STRING ,
27842: STR
27843: PUSH
27844: LD_VAR 0 2
27848: PUSH
27849: LD_INT 7
27851: ARRAY
27852: STR
27853: PUSH
27854: LD_STRING ,
27856: STR
27857: PUSH
27858: LD_VAR 0 2
27862: PUSH
27863: LD_INT 8
27865: ARRAY
27866: STR
27867: PUSH
27868: LD_STRING });
27870: STR
27871: PPUSH
27872: CALL_OW 559
// end ;
27876: LD_VAR 0 3
27880: RET
