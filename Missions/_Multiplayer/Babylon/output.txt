// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export Position_Sides ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 48
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 3 ;
 151: LD_ADDR_EXP 48
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// for i := 1 to 8 do
 356: LD_ADDR_VAR 0 2
 360: PUSH
 361: DOUBLE
 362: LD_INT 1
 364: DEC
 365: ST_TO_ADDR
 366: LD_INT 8
 368: PUSH
 369: FOR_TO
 370: IFFALSE 457
// if Multiplayer_GetPlayerIsSpec ( i ) then
 372: LD_VAR 0 2
 376: PPUSH
 377: CALL_OW 530
 381: IFFALSE 455
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 383: LD_ADDR_EXP 23
 387: PUSH
 388: LD_EXP 23
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: LD_INT 0
 400: PPUSH
 401: CALL_OW 1
 405: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 406: LD_ADDR_EXP 22
 410: PUSH
 411: LD_EXP 22
 415: PPUSH
 416: LD_EXP 21
 420: PUSH
 421: LD_VAR 0 2
 425: ARRAY
 426: PPUSH
 427: LD_EXP 22
 431: PUSH
 432: LD_EXP 21
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: ARRAY
 443: PUSH
 444: LD_VAR 0 2
 448: DIFF
 449: PPUSH
 450: CALL_OW 1
 454: ST_TO_ADDR
// end ;
 455: GO 369
 457: POP
 458: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 459: LD_ADDR_EXP 29
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// for i := 1 to 8 do
 482: LD_ADDR_VAR 0 2
 486: PUSH
 487: DOUBLE
 488: LD_INT 1
 490: DEC
 491: ST_TO_ADDR
 492: LD_INT 8
 494: PUSH
 495: FOR_TO
 496: IFFALSE 543
// if Side_Positions [ i ] then
 498: LD_EXP 23
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: IFFALSE 541
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 510: LD_ADDR_EXP 29
 514: PUSH
 515: LD_EXP 29
 519: PPUSH
 520: LD_EXP 23
 524: PUSH
 525: LD_VAR 0 2
 529: ARRAY
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: CALL_OW 1
 540: ST_TO_ADDR
 541: GO 495
 543: POP
 544: POP
// Team_Game := 1 ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_INT 1
 552: ST_TO_ADDR
// if Multiplayer then
 553: LD_OWVAR 4
 557: IFFALSE 829
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 559: LD_ADDR_EXP 50
 563: PUSH
 564: LD_INT 0
 566: PPUSH
 567: CALL_OW 426
 571: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 572: LD_ADDR_EXP 51
 576: PUSH
 577: LD_INT 1
 579: PPUSH
 580: CALL_OW 426
 584: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 585: LD_ADDR_EXP 52
 589: PUSH
 590: LD_INT 2
 592: PPUSH
 593: CALL_OW 426
 597: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 598: LD_ADDR_EXP 53
 602: PUSH
 603: LD_INT 3
 605: PPUSH
 606: CALL_OW 426
 610: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 611: LD_ADDR_EXP 54
 615: PUSH
 616: LD_INT 4
 618: PPUSH
 619: CALL_OW 426
 623: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 624: LD_ADDR_EXP 55
 628: PUSH
 629: LD_INT 5
 631: PPUSH
 632: CALL_OW 426
 636: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 637: LD_ADDR_EXP 57
 641: PUSH
 642: LD_INT 10
 644: PPUSH
 645: CALL_OW 426
 649: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 650: LD_ADDR_EXP 58
 654: PUSH
 655: LD_INT 11
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 663: LD_ADDR_EXP 59
 667: PUSH
 668: LD_INT 12
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 676: LD_ADDR_EXP 61
 680: PUSH
 681: LD_INT 13
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 689: LD_ADDR_EXP 60
 693: PUSH
 694: LD_INT 14
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 702: LD_ADDR_EXP 62
 706: PUSH
 707: LD_INT 15
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 715: LD_ADDR_EXP 1
 719: PUSH
 720: LD_INT 6
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 728: LD_ADDR_EXP 2
 732: PUSH
 733: LD_INT 7
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 741: LD_ADDR_EXP 4
 745: PUSH
 746: LD_INT 8
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 754: LD_ADDR_EXP 3
 758: PUSH
 759: LD_INT 9
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 767: LD_ADDR_EXP 5
 771: PUSH
 772: LD_INT 16
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 780: LD_ADDR_EXP 6
 784: PUSH
 785: LD_INT 17
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 793: LD_ADDR_EXP 63
 797: PUSH
 798: LD_INT 20
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 806: LD_ADDR_VAR 0 3
 810: PUSH
 811: LD_INT 22
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// def_win_rules = 0 ;
 819: LD_ADDR_EXP 19
 823: PUSH
 824: LD_INT 0
 826: ST_TO_ADDR
// end else
 827: GO 1001
// begin Randomize ;
 829: CALL_OW 10
// def_base_level := 2 ;
 833: LD_ADDR_EXP 50
 837: PUSH
 838: LD_INT 2
 840: ST_TO_ADDR
// def_amount_of_people := 1 ;
 841: LD_ADDR_EXP 51
 845: PUSH
 846: LD_INT 1
 848: ST_TO_ADDR
// def_skill_level := 1 ;
 849: LD_ADDR_EXP 52
 853: PUSH
 854: LD_INT 1
 856: ST_TO_ADDR
// def_starting_resources := 2 ;
 857: LD_ADDR_EXP 53
 861: PUSH
 862: LD_INT 2
 864: ST_TO_ADDR
// def_shipments_density := 1 ;
 865: LD_ADDR_EXP 54
 869: PUSH
 870: LD_INT 1
 872: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 873: LD_ADDR_EXP 55
 877: PUSH
 878: LD_INT 0
 880: ST_TO_ADDR
// def_shared_vision := 1 ;
 881: LD_ADDR_EXP 57
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// def_morale_flags := 1 ;
 889: LD_ADDR_EXP 58
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
// def_siberite_detection := 1 ;
 897: LD_ADDR_EXP 59
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 905: LD_ADDR_EXP 61
 909: PUSH
 910: LD_INT 3
 912: ST_TO_ADDR
// def_people_respawning := 2 ;
 913: LD_ADDR_EXP 60
 917: PUSH
 918: LD_INT 2
 920: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 921: LD_ADDR_EXP 62
 925: PUSH
 926: LD_INT 0
 928: ST_TO_ADDR
// def_artefact_one := 0 ;
 929: LD_ADDR_EXP 1
 933: PUSH
 934: LD_INT 0
 936: ST_TO_ADDR
// def_artefact_two := 0 ;
 937: LD_ADDR_EXP 2
 941: PUSH
 942: LD_INT 0
 944: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 945: LD_ADDR_EXP 4
 949: PUSH
 950: LD_INT 2
 952: ST_TO_ADDR
// def_artefact_three := 0 ;
 953: LD_ADDR_EXP 3
 957: PUSH
 958: LD_INT 0
 960: ST_TO_ADDR
// def_kings_age := 1 ;
 961: LD_ADDR_EXP 5
 965: PUSH
 966: LD_INT 1
 968: ST_TO_ADDR
// def_public_score := 0 ;
 969: LD_ADDR_EXP 6
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// def_builduptime := 1 ;
 977: LD_ADDR_EXP 63
 981: PUSH
 982: LD_INT 1
 984: ST_TO_ADDR
// tech_level = 4 ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 4
 992: ST_TO_ADDR
// def_win_rules = 0 ;
 993: LD_ADDR_EXP 19
 997: PUSH
 998: LD_INT 0
1000: ST_TO_ADDR
// end ; InitGameRules ;
1001: CALL 14067 0 0
// if def_game_rules = 0 then
1005: LD_EXP 49
1009: PUSH
1010: LD_INT 0
1012: EQUAL
1013: IFFALSE 1040
// begin if isSGUI then
1015: LD_OWVAR 83
1019: IFFALSE 1027
// setMpTechs ( ) else
1021: CALL 21859 0 0
1025: GO 1040
// begin SetMpTechLevel ( tech_level + 1 ) ;
1027: LD_VAR 0 3
1031: PUSH
1032: LD_INT 1
1034: PLUS
1035: PPUSH
1036: CALL 22006 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1040: LD_ADDR_EXP 7
1044: PUSH
1045: LD_INT 0
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: LD_INT 1
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: PUSH
1063: LD_EXP 50
1067: PUSH
1068: LD_INT 1
1070: PLUS
1071: ARRAY
1072: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
1073: LD_ADDR_EXP 8
1077: PUSH
1078: LD_INT 0
1080: PUSH
1081: LD_INT 0
1083: PUSH
1084: LD_INT 2
1086: PUSH
1087: LD_INT 3
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: LIST
1095: PUSH
1096: LD_EXP 50
1100: PUSH
1101: LD_INT 1
1103: PLUS
1104: ARRAY
1105: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1106: LD_ADDR_EXP 9
1110: PUSH
1111: LD_EXP 51
1115: PUSH
1116: LD_INT 4
1118: PLUS
1119: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1120: LD_ADDR_EXP 10
1124: PUSH
1125: LD_INT 2
1127: PUSH
1128: LD_INT 3
1130: PUSH
1131: LD_INT 4
1133: PUSH
1134: LD_INT 5
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_EXP 52
1147: PUSH
1148: LD_INT 1
1150: PLUS
1151: ARRAY
1152: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1153: LD_ADDR_EXP 12
1157: PUSH
1158: LD_INT 0
1160: PUSH
1161: LD_INT 0
1163: PUSH
1164: LD_INT 0
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: LIST
1171: PUSH
1172: LD_INT 30
1174: PUSH
1175: LD_INT 0
1177: PUSH
1178: LD_INT 0
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_INT 50
1188: PUSH
1189: LD_INT 20
1191: PUSH
1192: LD_INT 0
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 80
1202: PUSH
1203: LD_INT 40
1205: PUSH
1206: LD_INT 20
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: PUSH
1220: LD_EXP 53
1224: PUSH
1225: LD_INT 1
1227: PLUS
1228: ARRAY
1229: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1230: LD_ADDR_EXP 11
1234: PUSH
1235: LD_INT 10
1237: PUSH
1238: EMPTY
1239: LIST
1240: PUSH
1241: LD_INT 7
1243: PUSH
1244: LD_INT 14
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PUSH
1251: LD_INT 6
1253: PUSH
1254: LD_INT 12
1256: PUSH
1257: LD_INT 18
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: PUSH
1265: LD_INT 5
1267: PUSH
1268: LD_INT 10
1270: PUSH
1271: LD_INT 15
1273: PUSH
1274: LD_INT 20
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_EXP 53
1293: PUSH
1294: LD_INT 1
1296: PLUS
1297: ARRAY
1298: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 28 ;
1299: LD_ADDR_EXP 13
1303: PUSH
1304: LD_INT 20
1306: PUSH
1307: LD_EXP 54
1311: PUSH
1312: LD_INT 28
1314: MUL
1315: PLUS
1316: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1317: LD_ADDR_EXP 15
1321: PUSH
1322: LD_INT 0
1324: PUSH
1325: LD_INT 3
1327: PUSH
1328: LD_INT 6
1330: PUSH
1331: LD_INT 9
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: PUSH
1340: LD_EXP 61
1344: PUSH
1345: LD_INT 1
1347: PLUS
1348: ARRAY
1349: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1350: LD_ADDR_EXP 16
1354: PUSH
1355: LD_INT 0
1357: PUSH
1358: LD_INT 12600
1360: PUSH
1361: LD_INT 2100
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: LIST
1368: PUSH
1369: LD_EXP 60
1373: PUSH
1374: LD_INT 1
1376: PLUS
1377: ARRAY
1378: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1379: LD_ADDR_EXP 17
1383: PUSH
1384: LD_INT 0
1386: PUSH
1387: LD_INT 21000
1389: PUSH
1390: LD_INT 4200
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: PUSH
1398: LD_EXP 60
1402: PUSH
1403: LD_INT 1
1405: PLUS
1406: ARRAY
1407: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1408: LD_ADDR_EXP 14
1412: PUSH
1413: LD_INT 1
1415: NEG
1416: PUSH
1417: LD_INT 350
1419: PUSH
1420: LD_INT 700
1422: PUSH
1423: LD_INT 1400
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: PUSH
1436: LD_EXP 58
1440: PUSH
1441: LD_INT 1
1443: PLUS
1444: ARRAY
1445: ST_TO_ADDR
// battle_flags_id := [ ] ;
1446: LD_ADDR_EXP 34
1450: PUSH
1451: EMPTY
1452: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1453: LD_ADDR_EXP 18
1457: PUSH
1458: LD_INT 0
1460: PUSH
1461: LD_INT 1
1463: PUSH
1464: LD_INT 63000
1466: PUSH
1467: LD_INT 126000
1469: PUSH
1470: LD_INT 189000
1472: PUSH
1473: LD_INT 252000
1475: PUSH
1476: EMPTY
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: PUSH
1484: LD_EXP 62
1488: PUSH
1489: LD_INT 1
1491: PLUS
1492: ARRAY
1493: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1494: LD_ADDR_EXP 20
1498: PUSH
1499: LD_INT 500
1501: PUSH
1502: LD_INT 1000
1504: PUSH
1505: LD_INT 1500
1507: PUSH
1508: LD_INT 2000
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PUSH
1517: LD_EXP 5
1521: PUSH
1522: LD_INT 1
1524: PLUS
1525: ARRAY
1526: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1527: LD_ADDR_EXP 47
1531: PUSH
1532: LD_INT 21
1534: PUSH
1535: LD_INT 23
1537: PUSH
1538: LD_INT 20
1540: PUSH
1541: LD_INT 22
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: ST_TO_ADDR
// end ;
1550: LD_VAR 0 1
1554: RET
// function init_map ; var i ; begin
1555: LD_INT 0
1557: PPUSH
1558: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1559: LD_ADDR_EXP 33
1563: PUSH
1564: LD_INT 43
1566: PUSH
1567: LD_INT 9
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: PUSH
1574: LD_INT 123
1576: PUSH
1577: LD_INT 10
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PUSH
1584: LD_INT 113
1586: PUSH
1587: LD_INT 155
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PUSH
1594: LD_INT 186
1596: PUSH
1597: LD_INT 133
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1610: LD_ADDR_EXP 30
1614: PUSH
1615: LD_INT 18
1617: PUSH
1618: LD_INT 17
1620: PUSH
1621: LD_INT 2
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: LIST
1628: PUSH
1629: LD_INT 156
1631: PUSH
1632: LD_INT 20
1634: PUSH
1635: LD_INT 3
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 83
1645: PUSH
1646: LD_INT 140
1648: PUSH
1649: LD_INT 1
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 216
1659: PUSH
1660: LD_INT 143
1662: PUSH
1663: LD_INT 5
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: ST_TO_ADDR
// for i in depot_def do
1677: LD_ADDR_VAR 0 2
1681: PUSH
1682: LD_EXP 30
1686: PUSH
1687: FOR_IN
1688: IFFALSE 1762
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1690: LD_ADDR_EXP 32
1694: PUSH
1695: LD_EXP 32
1699: PUSH
1700: LD_VAR 0 2
1704: PUSH
1705: LD_INT 1
1707: ARRAY
1708: PPUSH
1709: LD_VAR 0 2
1713: PUSH
1714: LD_INT 3
1716: ARRAY
1717: PPUSH
1718: LD_INT 6
1720: PPUSH
1721: CALL_OW 272
1725: PUSH
1726: LD_VAR 0 2
1730: PUSH
1731: LD_INT 2
1733: ARRAY
1734: PPUSH
1735: LD_VAR 0 2
1739: PUSH
1740: LD_INT 3
1742: ARRAY
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: CALL_OW 273
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: EMPTY
1757: LIST
1758: ADD
1759: ST_TO_ADDR
1760: GO 1687
1762: POP
1763: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1764: LD_ADDR_EXP 31
1768: PUSH
1769: LD_INT 30
1771: PUSH
1772: LD_INT 36
1774: PUSH
1775: LD_INT 0
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: PUSH
1783: LD_INT 44
1785: PUSH
1786: LD_INT 21
1788: PUSH
1789: LD_INT 4
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 43
1799: PUSH
1800: LD_INT 33
1802: PUSH
1803: LD_INT 5
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: PUSH
1816: LD_INT 165
1818: PUSH
1819: LD_INT 34
1821: PUSH
1822: LD_INT 0
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 137
1832: PUSH
1833: LD_INT 18
1835: PUSH
1836: LD_INT 1
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 153
1846: PUSH
1847: LD_INT 37
1849: PUSH
1850: LD_INT 0
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 86
1865: PUSH
1866: LD_INT 120
1868: PUSH
1869: LD_INT 3
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 105
1879: PUSH
1880: LD_INT 147
1882: PUSH
1883: LD_INT 4
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 68
1893: PUSH
1894: LD_INT 118
1896: PUSH
1897: LD_INT 2
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 199
1912: PUSH
1913: LD_INT 144
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 207
1926: PUSH
1927: LD_INT 119
1929: PUSH
1930: LD_INT 3
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 195
1940: PUSH
1941: LD_INT 118
1943: PUSH
1944: LD_INT 2
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: ST_TO_ADDR
// if not def_extra_oil_deposits then
1963: LD_EXP 55
1967: NOT
1968: IFFALSE 2009
// for i in extra_oil_deposits_locations do
1970: LD_ADDR_VAR 0 2
1974: PUSH
1975: LD_EXP 33
1979: PUSH
1980: FOR_IN
1981: IFFALSE 2007
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1983: LD_VAR 0 2
1987: PUSH
1988: LD_INT 1
1990: ARRAY
1991: PPUSH
1992: LD_VAR 0 2
1996: PUSH
1997: LD_INT 2
1999: ARRAY
2000: PPUSH
2001: CALL_OW 63
2005: GO 1980
2007: POP
2008: POP
// end ;
2009: LD_VAR 0 1
2013: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2014: LD_INT 0
2016: PPUSH
2017: PPUSH
2018: PPUSH
// if not Team_Game then
2019: LD_EXP 25
2023: NOT
2024: IFFALSE 2122
// begin for i = 1 to 8 do
2026: LD_ADDR_VAR 0 2
2030: PUSH
2031: DOUBLE
2032: LD_INT 1
2034: DEC
2035: ST_TO_ADDR
2036: LD_INT 8
2038: PUSH
2039: FOR_TO
2040: IFFALSE 2118
// for j = 1 to 8 do
2042: LD_ADDR_VAR 0 3
2046: PUSH
2047: DOUBLE
2048: LD_INT 1
2050: DEC
2051: ST_TO_ADDR
2052: LD_INT 8
2054: PUSH
2055: FOR_TO
2056: IFFALSE 2114
// if i <> j then
2058: LD_VAR 0 2
2062: PUSH
2063: LD_VAR 0 3
2067: NONEQUAL
2068: IFFALSE 2092
// SetAttitude ( i , j , att_neutral , true ) else
2070: LD_VAR 0 2
2074: PPUSH
2075: LD_VAR 0 3
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: LD_INT 1
2085: PPUSH
2086: CALL_OW 80
2090: GO 2112
// SetAttitude ( i , j , att_friend , true ) ;
2092: LD_VAR 0 2
2096: PPUSH
2097: LD_VAR 0 3
2101: PPUSH
2102: LD_INT 1
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: CALL_OW 80
2112: GO 2055
2114: POP
2115: POP
2116: GO 2039
2118: POP
2119: POP
// end else
2120: GO 2297
// begin if def_shared_vision then
2122: LD_EXP 57
2126: IFFALSE 2191
// begin for i in Teams do
2128: LD_ADDR_VAR 0 2
2132: PUSH
2133: LD_EXP 22
2137: PUSH
2138: FOR_IN
2139: IFFALSE 2189
// for j = 2 to i do
2141: LD_ADDR_VAR 0 3
2145: PUSH
2146: DOUBLE
2147: LD_INT 2
2149: DEC
2150: ST_TO_ADDR
2151: LD_VAR 0 2
2155: PUSH
2156: FOR_TO
2157: IFFALSE 2185
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2159: LD_VAR 0 2
2163: PUSH
2164: LD_VAR 0 3
2168: ARRAY
2169: PPUSH
2170: LD_VAR 0 2
2174: PUSH
2175: LD_INT 1
2177: ARRAY
2178: PPUSH
2179: CALL_OW 343
2183: GO 2156
2185: POP
2186: POP
2187: GO 2138
2189: POP
2190: POP
// end ; for i = 1 to 8 do
2191: LD_ADDR_VAR 0 2
2195: PUSH
2196: DOUBLE
2197: LD_INT 1
2199: DEC
2200: ST_TO_ADDR
2201: LD_INT 8
2203: PUSH
2204: FOR_TO
2205: IFFALSE 2295
// for j = 1 to 8 do
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: DOUBLE
2213: LD_INT 1
2215: DEC
2216: ST_TO_ADDR
2217: LD_INT 8
2219: PUSH
2220: FOR_TO
2221: IFFALSE 2291
// if Side_Teams [ i ] = Side_Teams [ j ] then
2223: LD_EXP 21
2227: PUSH
2228: LD_VAR 0 2
2232: ARRAY
2233: PUSH
2234: LD_EXP 21
2238: PUSH
2239: LD_VAR 0 3
2243: ARRAY
2244: EQUAL
2245: IFFALSE 2269
// SetAttitude ( i , j , att_friend , true ) else
2247: LD_VAR 0 2
2251: PPUSH
2252: LD_VAR 0 3
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: LD_INT 1
2262: PPUSH
2263: CALL_OW 80
2267: GO 2289
// SetAttitude ( i , j , att_enemy , true ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_VAR 0 3
2278: PPUSH
2279: LD_INT 2
2281: PPUSH
2282: LD_INT 1
2284: PPUSH
2285: CALL_OW 80
2289: GO 2220
2291: POP
2292: POP
2293: GO 2204
2295: POP
2296: POP
// end ; end ;
2297: LD_VAR 0 1
2301: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2302: LD_INT 0
2304: PPUSH
2305: PPUSH
2306: PPUSH
2307: PPUSH
// result := [ ] ;
2308: LD_ADDR_VAR 0 7
2312: PUSH
2313: EMPTY
2314: ST_TO_ADDR
// for i := 1 to count do
2315: LD_ADDR_VAR 0 8
2319: PUSH
2320: DOUBLE
2321: LD_INT 1
2323: DEC
2324: ST_TO_ADDR
2325: LD_VAR 0 1
2329: PUSH
2330: FOR_TO
2331: IFFALSE 2749
// begin uc_direction := Rand ( 0 , 5 ) ;
2333: LD_ADDR_OWVAR 24
2337: PUSH
2338: LD_INT 0
2340: PPUSH
2341: LD_INT 5
2343: PPUSH
2344: CALL_OW 12
2348: ST_TO_ADDR
// if commander then
2349: LD_LOC 1
2353: IFFALSE 2462
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2355: LD_ADDR_OWVAR 26
2359: PUSH
2360: LD_OWVAR 19
2364: PUSH
2365: LD_OWVAR 20
2369: ARRAY
2370: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2371: LD_INT 1
2373: PPUSH
2374: LD_INT 2
2376: PPUSH
2377: CALL_OW 12
2381: PPUSH
2382: LD_VAR 0 2
2386: PPUSH
2387: LD_EXP 10
2391: PUSH
2392: LD_INT 2
2394: PLUS
2395: PPUSH
2396: CALL_OW 380
// hc_importance := 105 ;
2400: LD_ADDR_OWVAR 32
2404: PUSH
2405: LD_INT 105
2407: ST_TO_ADDR
// commander := false ;
2408: LD_ADDR_LOC 1
2412: PUSH
2413: LD_INT 0
2415: ST_TO_ADDR
// if Multiplayer then
2416: LD_OWVAR 4
2420: IFFALSE 2460
// begin hc_gallery := MULTIAVATARS ;
2422: LD_ADDR_OWVAR 33
2426: PUSH
2427: LD_STRING MULTIAVATARS
2429: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2430: LD_ADDR_OWVAR 34
2434: PUSH
2435: LD_OWVAR 20
2439: PPUSH
2440: CALL_OW 525
2444: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2445: LD_ADDR_OWVAR 27
2449: PUSH
2450: LD_OWVAR 20
2454: PPUSH
2455: CALL_OW 526
2459: ST_TO_ADDR
// end ; end else
2460: GO 2525
// begin hc_name :=  ;
2462: LD_ADDR_OWVAR 26
2466: PUSH
2467: LD_STRING 
2469: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2470: LD_INT 1
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: CALL_OW 12
2480: PPUSH
2481: LD_VAR 0 2
2485: PPUSH
2486: LD_EXP 10
2490: PPUSH
2491: CALL_OW 380
// hc_importance := 0 ;
2495: LD_ADDR_OWVAR 32
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// if Multiplayer then
2503: LD_OWVAR 4
2507: IFFALSE 2525
// begin hc_gallery :=  ;
2509: LD_ADDR_OWVAR 33
2513: PUSH
2514: LD_STRING 
2516: ST_TO_ADDR
// hc_face_number := 0 ;
2517: LD_ADDR_OWVAR 34
2521: PUSH
2522: LD_INT 0
2524: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2525: LD_ADDR_VAR 0 10
2529: PUSH
2530: CALL_OW 44
2534: ST_TO_ADDR
// if global_defined then
2535: LD_LOC 3
2539: IFFALSE 2679
// begin if ( cl = class_soldier ) then
2541: LD_VAR 0 2
2545: PUSH
2546: LD_INT 1
2548: EQUAL
2549: IFFALSE 2569
// j := i + soldiers_created else
2551: LD_ADDR_VAR 0 9
2555: PUSH
2556: LD_VAR 0 8
2560: PUSH
2561: LD_LOC 4
2565: PLUS
2566: ST_TO_ADDR
2567: GO 2579
// j := i ;
2569: LD_ADDR_VAR 0 9
2573: PUSH
2574: LD_VAR 0 8
2578: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2579: LD_LOC 2
2583: PUSH
2584: LD_VAR 0 2
2588: ARRAY
2589: PUSH
2590: LD_VAR 0 9
2594: ARRAY
2595: PPUSH
2596: LD_VAR 0 10
2600: PPUSH
2601: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2605: LD_VAR 0 10
2609: PPUSH
2610: LD_INT 2
2612: PPUSH
2613: LD_LOC 2
2617: PUSH
2618: LD_VAR 0 2
2622: ARRAY
2623: PUSH
2624: LD_VAR 0 9
2628: ARRAY
2629: PPUSH
2630: LD_INT 2
2632: PPUSH
2633: CALL_OW 260
2637: PPUSH
2638: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2642: LD_VAR 0 10
2646: PPUSH
2647: LD_INT 1
2649: PPUSH
2650: LD_LOC 2
2654: PUSH
2655: LD_VAR 0 2
2659: ARRAY
2660: PUSH
2661: LD_VAR 0 9
2665: ARRAY
2666: PPUSH
2667: LD_INT 1
2669: PPUSH
2670: CALL_OW 260
2674: PPUSH
2675: CALL_OW 239
// end ; if building then
2679: LD_VAR 0 6
2683: IFFALSE 2701
// PlaceHumanInUnit ( un , building ) else
2685: LD_VAR 0 10
2689: PPUSH
2690: LD_VAR 0 6
2694: PPUSH
2695: CALL_OW 52
2699: GO 2728
// PlaceUnitXYR ( un , x , y , r , false ) ;
2701: LD_VAR 0 10
2705: PPUSH
2706: LD_VAR 0 3
2710: PPUSH
2711: LD_VAR 0 4
2715: PPUSH
2716: LD_VAR 0 5
2720: PPUSH
2721: LD_INT 0
2723: PPUSH
2724: CALL_OW 50
// result := result ^ [ un ] ;
2728: LD_ADDR_VAR 0 7
2732: PUSH
2733: LD_VAR 0 7
2737: PUSH
2738: LD_VAR 0 10
2742: PUSH
2743: EMPTY
2744: LIST
2745: ADD
2746: ST_TO_ADDR
// end ;
2747: GO 2330
2749: POP
2750: POP
// if not global_defined then
2751: LD_LOC 3
2755: NOT
2756: IFFALSE 2834
// if ( global_units >= cl ) then
2758: LD_LOC 2
2762: PUSH
2763: LD_VAR 0 2
2767: GREATEREQUAL
2768: IFFALSE 2809
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2770: LD_ADDR_LOC 2
2774: PUSH
2775: LD_LOC 2
2779: PPUSH
2780: LD_VAR 0 2
2784: PPUSH
2785: LD_LOC 2
2789: PUSH
2790: LD_VAR 0 2
2794: ARRAY
2795: PUSH
2796: LD_VAR 0 7
2800: ADD
2801: PPUSH
2802: CALL_OW 1
2806: ST_TO_ADDR
2807: GO 2834
// global_units := Replace ( global_units , cl , result ) ;
2809: LD_ADDR_LOC 2
2813: PUSH
2814: LD_LOC 2
2818: PPUSH
2819: LD_VAR 0 2
2823: PPUSH
2824: LD_VAR 0 7
2828: PPUSH
2829: CALL_OW 1
2833: ST_TO_ADDR
// if commander then
2834: LD_LOC 1
2838: IFFALSE 2885
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2840: LD_ADDR_EXP 35
2844: PUSH
2845: LD_EXP 35
2849: PPUSH
2850: LD_OWVAR 20
2854: PPUSH
2855: LD_EXP 35
2859: PUSH
2860: LD_OWVAR 20
2864: ARRAY
2865: PUSH
2866: LD_VAR 0 10
2870: ADD
2871: PPUSH
2872: CALL_OW 1
2876: ST_TO_ADDR
// commander := false ;
2877: LD_ADDR_LOC 1
2881: PUSH
2882: LD_INT 0
2884: ST_TO_ADDR
// end ; end ;
2885: LD_VAR 0 7
2889: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2890: LD_INT 0
2892: PPUSH
2893: PPUSH
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
2898: PPUSH
2899: PPUSH
2900: PPUSH
// pos := Side_Positions [ side ] ;
2901: LD_ADDR_VAR 0 3
2905: PUSH
2906: LD_EXP 23
2910: PUSH
2911: LD_VAR 0 1
2915: ARRAY
2916: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2917: LD_ADDR_OWVAR 21
2921: PUSH
2922: LD_EXP 24
2926: PUSH
2927: LD_VAR 0 1
2931: ARRAY
2932: ST_TO_ADDR
// uc_side := side ;
2933: LD_ADDR_OWVAR 20
2937: PUSH
2938: LD_VAR 0 1
2942: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2943: LD_ADDR_VAR 0 4
2947: PUSH
2948: LD_EXP 30
2952: PUSH
2953: LD_VAR 0 3
2957: ARRAY
2958: PUSH
2959: LD_INT 1
2961: ARRAY
2962: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2963: LD_ADDR_VAR 0 5
2967: PUSH
2968: LD_EXP 30
2972: PUSH
2973: LD_VAR 0 3
2977: ARRAY
2978: PUSH
2979: LD_INT 2
2981: ARRAY
2982: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2983: LD_ADDR_VAR 0 6
2987: PUSH
2988: LD_EXP 30
2992: PUSH
2993: LD_VAR 0 3
2997: ARRAY
2998: PUSH
2999: LD_INT 3
3001: ARRAY
3002: ST_TO_ADDR
// if is_depot then
3003: LD_EXP 7
3007: IFFALSE 3140
// begin bc_type = b_depot ;
3009: LD_ADDR_OWVAR 42
3013: PUSH
3014: LD_INT 0
3016: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3017: LD_ADDR_VAR 0 10
3021: PUSH
3022: LD_VAR 0 4
3026: PPUSH
3027: LD_VAR 0 5
3031: PPUSH
3032: LD_VAR 0 6
3036: PPUSH
3037: CALL_OW 47
3041: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3042: LD_VAR 0 10
3046: PPUSH
3047: LD_STRING @
3049: PUSH
3050: LD_VAR 0 1
3054: STR
3055: PPUSH
3056: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3060: LD_VAR 0 10
3064: PPUSH
3065: CALL_OW 274
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: LD_EXP 12
3077: PUSH
3078: LD_INT 1
3080: ARRAY
3081: PPUSH
3082: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3086: LD_VAR 0 10
3090: PPUSH
3091: CALL_OW 274
3095: PPUSH
3096: LD_INT 2
3098: PPUSH
3099: LD_EXP 12
3103: PUSH
3104: LD_INT 2
3106: ARRAY
3107: PPUSH
3108: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3112: LD_VAR 0 10
3116: PPUSH
3117: CALL_OW 274
3121: PPUSH
3122: LD_INT 3
3124: PPUSH
3125: LD_EXP 12
3129: PUSH
3130: LD_INT 3
3132: ARRAY
3133: PPUSH
3134: CALL_OW 277
// end else
3138: GO 3284
// begin for i := 1 to 3 do
3140: LD_ADDR_VAR 0 7
3144: PUSH
3145: DOUBLE
3146: LD_INT 1
3148: DEC
3149: ST_TO_ADDR
3150: LD_INT 3
3152: PUSH
3153: FOR_TO
3154: IFFALSE 3282
// begin r := starting_resources [ i ] ;
3156: LD_ADDR_VAR 0 8
3160: PUSH
3161: LD_EXP 12
3165: PUSH
3166: LD_VAR 0 7
3170: ARRAY
3171: ST_TO_ADDR
// while r >= 10 do
3172: LD_VAR 0 8
3176: PUSH
3177: LD_INT 10
3179: GREATEREQUAL
3180: IFFALSE 3280
// if r > 50 then
3182: LD_VAR 0 8
3186: PUSH
3187: LD_INT 50
3189: GREATER
3190: IFFALSE 3236
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3192: LD_VAR 0 7
3196: PPUSH
3197: LD_INT 5
3199: PPUSH
3200: LD_VAR 0 4
3204: PPUSH
3205: LD_VAR 0 5
3209: PPUSH
3210: LD_INT 4
3212: PPUSH
3213: LD_INT 0
3215: PPUSH
3216: CALL_OW 60
// r := r - 50 ;
3220: LD_ADDR_VAR 0 8
3224: PUSH
3225: LD_VAR 0 8
3229: PUSH
3230: LD_INT 50
3232: MINUS
3233: ST_TO_ADDR
// end else
3234: GO 3278
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3236: LD_VAR 0 7
3240: PPUSH
3241: LD_VAR 0 8
3245: PUSH
3246: LD_INT 10
3248: DIV
3249: PPUSH
3250: LD_VAR 0 4
3254: PPUSH
3255: LD_VAR 0 5
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: LD_INT 0
3265: PPUSH
3266: CALL_OW 60
// r := 0 ;
3270: LD_ADDR_VAR 0 8
3274: PUSH
3275: LD_INT 0
3277: ST_TO_ADDR
// end ;
3278: GO 3172
// end ;
3280: GO 3153
3282: POP
3283: POP
// end ; for r in starting_crates do
3284: LD_ADDR_VAR 0 8
3288: PUSH
3289: LD_EXP 11
3293: PUSH
3294: FOR_IN
3295: IFFALSE 3327
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3297: LD_INT 1
3299: PPUSH
3300: LD_INT 5
3302: PPUSH
3303: LD_VAR 0 4
3307: PPUSH
3308: LD_VAR 0 5
3312: PPUSH
3313: LD_VAR 0 8
3317: PPUSH
3318: LD_INT 0
3320: PPUSH
3321: CALL_OW 60
3325: GO 3294
3327: POP
3328: POP
// if def_morale_flags then
3329: LD_EXP 58
3333: IFFALSE 3472
// begin x := start_def [ pos ] [ 1 ] ;
3335: LD_ADDR_VAR 0 4
3339: PUSH
3340: LD_EXP 32
3344: PUSH
3345: LD_VAR 0 3
3349: ARRAY
3350: PUSH
3351: LD_INT 1
3353: ARRAY
3354: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3355: LD_ADDR_VAR 0 5
3359: PUSH
3360: LD_EXP 32
3364: PUSH
3365: LD_VAR 0 3
3369: ARRAY
3370: PUSH
3371: LD_INT 2
3373: ARRAY
3374: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3375: LD_VAR 0 4
3379: PPUSH
3380: LD_VAR 0 5
3384: PPUSH
3385: LD_INT 12
3387: PPUSH
3388: LD_INT 2
3390: PPUSH
3391: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3395: LD_ADDR_EXP 34
3399: PUSH
3400: LD_EXP 34
3404: PUSH
3405: LD_VAR 0 1
3409: PPUSH
3410: LD_VAR 0 4
3414: PPUSH
3415: LD_VAR 0 5
3419: PPUSH
3420: LD_INT 1
3422: PUSH
3423: LD_INT 100
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: LD_INT 2
3432: PUSH
3433: LD_INT 50
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 3
3442: PUSH
3443: LD_INT 20
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PUSH
3450: LD_INT 20
3452: PUSH
3453: LD_INT 100
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: PPUSH
3466: CALL_OW 418
3470: ADD
3471: ST_TO_ADDR
// end ; commander := true ;
3472: LD_ADDR_LOC 1
3476: PUSH
3477: LD_INT 1
3479: ST_TO_ADDR
// soldiers_created := 0 ;
3480: LD_ADDR_LOC 4
3484: PUSH
3485: LD_INT 0
3487: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3488: LD_ADDR_VAR 0 7
3492: PUSH
3493: DOUBLE
3494: LD_INT 1
3496: DEC
3497: ST_TO_ADDR
3498: LD_EXP 8
3502: PUSH
3503: FOR_TO
3504: IFFALSE 3657
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3506: LD_ADDR_VAR 0 4
3510: PUSH
3511: LD_EXP 31
3515: PUSH
3516: LD_VAR 0 3
3520: ARRAY
3521: PUSH
3522: LD_VAR 0 7
3526: ARRAY
3527: PUSH
3528: LD_INT 1
3530: ARRAY
3531: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3532: LD_ADDR_VAR 0 5
3536: PUSH
3537: LD_EXP 31
3541: PUSH
3542: LD_VAR 0 3
3546: ARRAY
3547: PUSH
3548: LD_VAR 0 7
3552: ARRAY
3553: PUSH
3554: LD_INT 2
3556: ARRAY
3557: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3558: LD_ADDR_VAR 0 6
3562: PUSH
3563: LD_EXP 31
3567: PUSH
3568: LD_VAR 0 3
3572: ARRAY
3573: PUSH
3574: LD_VAR 0 7
3578: ARRAY
3579: PUSH
3580: LD_INT 3
3582: ARRAY
3583: ST_TO_ADDR
// bc_type := b_breastwork ;
3584: LD_ADDR_OWVAR 42
3588: PUSH
3589: LD_INT 31
3591: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3592: LD_ADDR_VAR 0 9
3596: PUSH
3597: LD_VAR 0 4
3601: PPUSH
3602: LD_VAR 0 5
3606: PPUSH
3607: LD_VAR 0 6
3611: PPUSH
3612: CALL_OW 47
3616: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 1
3622: PPUSH
3623: LD_INT 0
3625: PPUSH
3626: LD_INT 0
3628: PPUSH
3629: LD_INT 0
3631: PPUSH
3632: LD_VAR 0 9
3636: PPUSH
3637: CALL 2302 0 6
// soldiers_created := soldiers_created + 1 ;
3641: LD_ADDR_LOC 4
3645: PUSH
3646: LD_LOC 4
3650: PUSH
3651: LD_INT 1
3653: PLUS
3654: ST_TO_ADDR
// end ;
3655: GO 3503
3657: POP
3658: POP
// x := start_def [ pos ] [ 1 ] ;
3659: LD_ADDR_VAR 0 4
3663: PUSH
3664: LD_EXP 32
3668: PUSH
3669: LD_VAR 0 3
3673: ARRAY
3674: PUSH
3675: LD_INT 1
3677: ARRAY
3678: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3679: LD_ADDR_VAR 0 5
3683: PUSH
3684: LD_EXP 32
3688: PUSH
3689: LD_VAR 0 3
3693: ARRAY
3694: PUSH
3695: LD_INT 2
3697: ARRAY
3698: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3699: LD_LOC 8
3703: PUSH
3704: LD_EXP 8
3708: MINUS
3709: PPUSH
3710: LD_INT 1
3712: PPUSH
3713: LD_VAR 0 4
3717: PPUSH
3718: LD_VAR 0 5
3722: PPUSH
3723: LD_INT 5
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL 2302 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3733: LD_LOC 5
3737: PPUSH
3738: LD_INT 2
3740: PPUSH
3741: LD_VAR 0 4
3745: PPUSH
3746: LD_VAR 0 5
3750: PPUSH
3751: LD_INT 5
3753: PPUSH
3754: LD_INT 0
3756: PPUSH
3757: CALL 2302 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3761: LD_LOC 7
3765: PPUSH
3766: LD_INT 3
3768: PPUSH
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_VAR 0 5
3778: PPUSH
3779: LD_INT 5
3781: PPUSH
3782: LD_INT 0
3784: PPUSH
3785: CALL 2302 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3789: LD_LOC 6
3793: PPUSH
3794: LD_INT 4
3796: PPUSH
3797: LD_VAR 0 4
3801: PPUSH
3802: LD_VAR 0 5
3806: PPUSH
3807: LD_INT 5
3809: PPUSH
3810: LD_INT 0
3812: PPUSH
3813: CALL 2302 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3817: LD_EXP 59
3821: PUSH
3822: LD_INT 20
3824: PPUSH
3825: LD_VAR 0 1
3829: PPUSH
3830: CALL_OW 321
3834: PUSH
3835: LD_INT 1
3837: EQUAL
3838: AND
3839: IFFALSE 3856
// SetTech ( tech_SibDet , side , state_researched ) ;
3841: LD_INT 20
3843: PPUSH
3844: LD_VAR 0 1
3848: PPUSH
3849: LD_INT 2
3851: PPUSH
3852: CALL_OW 322
// if def_siberite_bomb = 1 then
3856: LD_EXP 62
3860: PUSH
3861: LD_INT 1
3863: EQUAL
3864: IFFALSE 3898
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3866: LD_INT 25
3868: PPUSH
3869: LD_VAR 0 1
3873: PPUSH
3874: LD_INT 1
3876: PPUSH
3877: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3881: LD_INT 73
3883: PPUSH
3884: LD_VAR 0 1
3888: PPUSH
3889: LD_INT 1
3891: PPUSH
3892: CALL_OW 322
// end else
3896: GO 3928
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3898: LD_INT 25
3900: PPUSH
3901: LD_VAR 0 1
3905: PPUSH
3906: LD_INT 0
3908: PPUSH
3909: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3913: LD_INT 73
3915: PPUSH
3916: LD_VAR 0 1
3920: PPUSH
3921: LD_INT 0
3923: PPUSH
3924: CALL_OW 322
// end ; if Game_Type = 3 then
3928: LD_EXP 48
3932: PUSH
3933: LD_INT 3
3935: EQUAL
3936: IFFALSE 3953
// SetTech ( tech_partinvis , side , state_disabled ) ;
3938: LD_INT 16
3940: PPUSH
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3953: LD_INT 24
3955: PPUSH
3956: LD_VAR 0 1
3960: PPUSH
3961: LD_INT 1
3963: PPUSH
3964: CALL_OW 322
// global_defined := true ;
3968: LD_ADDR_LOC 3
3972: PUSH
3973: LD_INT 1
3975: ST_TO_ADDR
// end ;
3976: LD_VAR 0 2
3980: RET
// every 0 0$1 do
3981: GO 3983
3983: DISABLE
// if ( def_siberite_bomb > 1 ) then
3984: LD_EXP 62
3988: PUSH
3989: LD_INT 1
3991: GREATER
3992: IFFALSE 4007
// begin wait ( siberite_bomb_Delay ) ;
3994: LD_EXP 18
3998: PPUSH
3999: CALL_OW 67
// EnableSibFiss ;
4003: CALL 4008 0 0
// end ;
4007: END
// function EnableSibFiss ; var i ; begin
4008: LD_INT 0
4010: PPUSH
4011: PPUSH
// for i := 1 to 8 do
4012: LD_ADDR_VAR 0 2
4016: PUSH
4017: DOUBLE
4018: LD_INT 1
4020: DEC
4021: ST_TO_ADDR
4022: LD_INT 8
4024: PUSH
4025: FOR_TO
4026: IFFALSE 4072
// if Side_Positions [ i ] then
4028: LD_EXP 23
4032: PUSH
4033: LD_VAR 0 2
4037: ARRAY
4038: IFFALSE 4070
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4040: LD_INT 25
4042: PPUSH
4043: LD_VAR 0 2
4047: PPUSH
4048: LD_INT 1
4050: PPUSH
4051: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4055: LD_INT 73
4057: PPUSH
4058: LD_VAR 0 2
4062: PPUSH
4063: LD_INT 1
4065: PPUSH
4066: CALL_OW 322
// end ;
4070: GO 4025
4072: POP
4073: POP
// end ;
4074: LD_VAR 0 1
4078: RET
// function prepare_sides ; var i ; begin
4079: LD_INT 0
4081: PPUSH
4082: PPUSH
// global_units := [ ] ;
4083: LD_ADDR_LOC 2
4087: PUSH
4088: EMPTY
4089: ST_TO_ADDR
// global_defined := false ;
4090: LD_ADDR_LOC 3
4094: PUSH
4095: LD_INT 0
4097: ST_TO_ADDR
// CountClassMembers ;
4098: CALL 4148 0 0
// for i := 1 to 8 do
4102: LD_ADDR_VAR 0 2
4106: PUSH
4107: DOUBLE
4108: LD_INT 1
4110: DEC
4111: ST_TO_ADDR
4112: LD_INT 8
4114: PUSH
4115: FOR_TO
4116: IFFALSE 4141
// if Side_Positions [ i ] then
4118: LD_EXP 23
4122: PUSH
4123: LD_VAR 0 2
4127: ARRAY
4128: IFFALSE 4139
// prepare_side ( i ) ;
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL 2890 0 1
4139: GO 4115
4141: POP
4142: POP
// end ;
4143: LD_VAR 0 1
4147: RET
// function CountClassMembers ; var Mode ; begin
4148: LD_INT 0
4150: PPUSH
4151: PPUSH
// if No_Mechs then
4152: LD_EXP 64
4156: IFFALSE 4168
// Mode := 2 else
4158: LD_ADDR_VAR 0 2
4162: PUSH
4163: LD_INT 2
4165: ST_TO_ADDR
4166: GO 4176
// Mode := 1 ;
4168: LD_ADDR_VAR 0 2
4172: PUSH
4173: LD_INT 1
4175: ST_TO_ADDR
// neng := number_of_people ;
4176: LD_ADDR_LOC 5
4180: PUSH
4181: LD_EXP 9
4185: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4186: LD_ADDR_LOC 8
4190: PUSH
4191: LD_LOC 5
4195: PUSH
4196: LD_INT 4
4198: PUSH
4199: LD_INT 3
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_VAR 0 2
4210: ARRAY
4211: DIV
4212: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4213: LD_LOC 8
4217: PUSH
4218: LD_EXP 8
4222: LESS
4223: IFFALSE 4235
// nsol := number_of_breastworks ;
4225: LD_ADDR_LOC 8
4229: PUSH
4230: LD_EXP 8
4234: ST_TO_ADDR
// neng := neng - nsol ;
4235: LD_ADDR_LOC 5
4239: PUSH
4240: LD_LOC 5
4244: PUSH
4245: LD_LOC 8
4249: MINUS
4250: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4251: LD_ADDR_LOC 6
4255: PUSH
4256: LD_LOC 5
4260: PUSH
4261: LD_INT 3
4263: PUSH
4264: LD_INT 2
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: LD_VAR 0 2
4275: ARRAY
4276: DIV
4277: ST_TO_ADDR
// if ( nsci < 1 ) then
4278: LD_LOC 6
4282: PUSH
4283: LD_INT 1
4285: LESS
4286: IFFALSE 4296
// nsci := 1 ;
4288: LD_ADDR_LOC 6
4292: PUSH
4293: LD_INT 1
4295: ST_TO_ADDR
// neng := neng - nsci ;
4296: LD_ADDR_LOC 5
4300: PUSH
4301: LD_LOC 5
4305: PUSH
4306: LD_LOC 6
4310: MINUS
4311: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4312: LD_ADDR_LOC 7
4316: PUSH
4317: LD_LOC 5
4321: PUSH
4322: LD_INT 2
4324: DIV
4325: PUSH
4326: LD_INT 0
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PUSH
4333: LD_VAR 0 2
4337: ARRAY
4338: ST_TO_ADDR
// neng := neng - nmech ;
4339: LD_ADDR_LOC 5
4343: PUSH
4344: LD_LOC 5
4348: PUSH
4349: LD_LOC 7
4353: MINUS
4354: ST_TO_ADDR
// if ( neng < 1 ) then
4355: LD_LOC 5
4359: PUSH
4360: LD_INT 1
4362: LESS
4363: IFFALSE 4373
// neng := 1 ;
4365: LD_ADDR_LOC 5
4369: PUSH
4370: LD_INT 1
4372: ST_TO_ADDR
// end ;
4373: LD_VAR 0 1
4377: RET
// starting begin disable ( 1 ) ;
4378: LD_INT 1
4380: DISABLE_MARKED
// disable ( 2 ) ;
4381: LD_INT 2
4383: DISABLE_MARKED
// disable ( 3 ) ;
4384: LD_INT 3
4386: DISABLE_MARKED
// disable ( 4 ) ;
4387: LD_INT 4
4389: DISABLE_MARKED
// disable ( 5 ) ;
4390: LD_INT 5
4392: DISABLE_MARKED
// disable ( 6 ) ;
4393: LD_INT 6
4395: DISABLE_MARKED
// disable ( 7 ) ;
4396: LD_INT 7
4398: DISABLE_MARKED
// disable ( 10 ) ;
4399: LD_INT 10
4401: DISABLE_MARKED
// disable ( 20 ) ;
4402: LD_INT 20
4404: DISABLE_MARKED
// disable ( 98 ) ;
4405: LD_INT 98
4407: DISABLE_MARKED
// disable ( 99 ) ;
4408: LD_INT 99
4410: DISABLE_MARKED
// disable ( 400 ) ;
4411: LD_INT 400
4413: DISABLE_MARKED
// disable ( 401 ) ;
4414: LD_INT 401
4416: DISABLE_MARKED
// disable ( 600 ) ;
4417: LD_INT 600
4419: DISABLE_MARKED
// mp_selectmsg := true ;
4420: LD_ADDR_OWVAR 13
4424: PUSH
4425: LD_INT 1
4427: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4428: CALL 68 0 0
// init_map ;
4432: CALL 1555 0 0
// init_shipments ;
4436: CALL 4622 0 0
// init_respawn ;
4440: CALL 6142 0 0
// set_shared_visions_and_alliances ;
4444: CALL 2014 0 0
// ResetFog ;
4448: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4452: LD_OWVAR 2
4456: PPUSH
4457: CALL_OW 520
// prepare_sides ;
4461: CALL 4079 0 0
// Init_Win_Condition ;
4465: CALL 18326 0 0
// InitLimits ;
4469: CALL 16199 0 0
// ShowTimer ;
4473: CALL 17136 0 0
// case Game_Type of 2 :
4477: LD_EXP 48
4481: PUSH
4482: LD_INT 2
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4497
4490: POP
// init_alien_research ; 3 :
4491: CALL 7372 0 0
4495: GO 4517
4497: LD_INT 3
4499: DOUBLE
4500: EQUAL
4501: IFTRUE 4505
4503: GO 4516
4505: POP
// begin InitPoints ( ) ;
4506: CALL 17329 0 0
// init_kings_counting ;
4510: CALL 19689 0 0
// end ; end ;
4514: GO 4517
4516: POP
// music_nat := Side_Nations [ your_side ] ;
4517: LD_ADDR_OWVAR 71
4521: PUSH
4522: LD_EXP 24
4526: PUSH
4527: LD_OWVAR 2
4531: ARRAY
4532: ST_TO_ADDR
// if IAmSpec then
4533: CALL_OW 531
4537: IFFALSE 4561
// begin fogOff ( true ) ;
4539: LD_INT 1
4541: PPUSH
4542: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4546: LD_INT 119
4548: PPUSH
4549: LD_INT 79
4551: PPUSH
4552: CALL_OW 86
// enable ( 400 ) ;
4556: LD_INT 400
4558: ENABLE_MARKED
// end else
4559: GO 4607
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4561: LD_EXP 32
4565: PUSH
4566: LD_EXP 23
4570: PUSH
4571: LD_OWVAR 2
4575: ARRAY
4576: ARRAY
4577: PUSH
4578: LD_INT 1
4580: ARRAY
4581: PPUSH
4582: LD_EXP 32
4586: PUSH
4587: LD_EXP 23
4591: PUSH
4592: LD_OWVAR 2
4596: ARRAY
4597: ARRAY
4598: PUSH
4599: LD_INT 2
4601: ARRAY
4602: PPUSH
4603: CALL_OW 86
// end ; InitApeman ;
4607: CALL 5317 0 0
// if def_builduptime then
4611: LD_EXP 63
4615: IFFALSE 4621
// BeginBuildUp ;
4617: CALL 13366 0 0
// end ; end_of_file
4621: END
// var shipment , tictac ; export function init_shipments ; begin
4622: LD_INT 0
4624: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4625: LD_ADDR_LOC 9
4629: PUSH
4630: LD_INT 0
4632: PPUSH
4633: LD_INT 3
4635: PPUSH
4636: CALL_OW 12
4640: ST_TO_ADDR
// tictac := 0 ;
4641: LD_ADDR_LOC 10
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// end ;
4649: LD_VAR 0 1
4653: RET
// every 0 0$5 + 0 0$1.1 do var d ;
4654: GO 4656
4656: DISABLE
4657: LD_INT 0
4659: PPUSH
// begin case tick of 1 .. 1 1$0 :
4660: LD_OWVAR 1
4664: PUSH
4665: LD_INT 1
4667: DOUBLE
4668: GREATEREQUAL
4669: IFFALSE 4677
4671: LD_INT 2100
4673: DOUBLE
4674: LESSEQUAL
4675: IFTRUE 4679
4677: GO 4690
4679: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
4680: LD_ADDR_VAR 0 1
4684: PUSH
4685: LD_INT 150
4687: ST_TO_ADDR
4688: GO 4873
4690: LD_INT 2100
4692: PUSH
4693: LD_INT 1
4695: PLUS
4696: DOUBLE
4697: GREATEREQUAL
4698: IFFALSE 4706
4700: LD_INT 10500
4702: DOUBLE
4703: LESSEQUAL
4704: IFTRUE 4708
4706: GO 4719
4708: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
4709: LD_ADDR_VAR 0 1
4713: PUSH
4714: LD_INT 100
4716: ST_TO_ADDR
4717: GO 4873
4719: LD_INT 10500
4721: PUSH
4722: LD_INT 1
4724: PLUS
4725: DOUBLE
4726: GREATEREQUAL
4727: IFFALSE 4735
4729: LD_INT 21000
4731: DOUBLE
4732: LESSEQUAL
4733: IFTRUE 4737
4735: GO 4748
4737: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
4738: LD_ADDR_VAR 0 1
4742: PUSH
4743: LD_INT 90
4745: ST_TO_ADDR
4746: GO 4873
4748: LD_INT 21000
4750: PUSH
4751: LD_INT 1
4753: PLUS
4754: DOUBLE
4755: GREATEREQUAL
4756: IFFALSE 4764
4758: LD_INT 42000
4760: DOUBLE
4761: LESSEQUAL
4762: IFTRUE 4766
4764: GO 4777
4766: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
4767: LD_ADDR_VAR 0 1
4771: PUSH
4772: LD_INT 70
4774: ST_TO_ADDR
4775: GO 4873
4777: LD_INT 42000
4779: PUSH
4780: LD_INT 1
4782: PLUS
4783: DOUBLE
4784: GREATEREQUAL
4785: IFFALSE 4793
4787: LD_INT 63000
4789: DOUBLE
4790: LESSEQUAL
4791: IFTRUE 4795
4793: GO 4806
4795: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
4796: LD_ADDR_VAR 0 1
4800: PUSH
4801: LD_INT 60
4803: ST_TO_ADDR
4804: GO 4873
4806: LD_INT 63000
4808: PUSH
4809: LD_INT 1
4811: PLUS
4812: DOUBLE
4813: GREATEREQUAL
4814: IFFALSE 4822
4816: LD_INT 105000
4818: DOUBLE
4819: LESSEQUAL
4820: IFTRUE 4824
4822: GO 4835
4824: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
4825: LD_ADDR_VAR 0 1
4829: PUSH
4830: LD_INT 35
4832: ST_TO_ADDR
4833: GO 4873
4835: LD_INT 105000
4837: PUSH
4838: LD_INT 1
4840: PLUS
4841: DOUBLE
4842: GREATEREQUAL
4843: IFFALSE 4851
4845: LD_INT 630000
4847: DOUBLE
4848: LESSEQUAL
4849: IFTRUE 4853
4851: GO 4864
4853: POP
// d := 20 ; else
4854: LD_ADDR_VAR 0 1
4858: PUSH
4859: LD_INT 20
4861: ST_TO_ADDR
4862: GO 4873
4864: POP
// d := 0 ; end ;
4865: LD_ADDR_VAR 0 1
4869: PUSH
4870: LD_INT 0
4872: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
4873: LD_INT 1
4875: PPUSH
4876: LD_INT 10000
4878: PPUSH
4879: CALL_OW 12
4883: PUSH
4884: LD_VAR 0 1
4888: PUSH
4889: LD_EXP 13
4893: MUL
4894: LESSEQUAL
4895: IFFALSE 4949
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
4897: LD_INT 1
4899: PPUSH
4900: LD_INT 140
4902: PPUSH
4903: CALL_OW 12
4907: PPUSH
4908: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
4912: LD_ADDR_LOC 9
4916: PUSH
4917: LD_LOC 9
4921: PUSH
4922: LD_INT 1
4924: PLUS
4925: PUSH
4926: LD_INT 4
4928: MOD
4929: ST_TO_ADDR
// CreateCratesArea ( 5 , nw + shipment , true ) ;
4930: LD_INT 5
4932: PPUSH
4933: LD_INT 12
4935: PUSH
4936: LD_LOC 9
4940: PLUS
4941: PPUSH
4942: LD_INT 1
4944: PPUSH
4945: CALL_OW 55
// end ; enable ;
4949: ENABLE
// end ;
4950: PPOPN 1
4952: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount , is_in ;
4953: LD_OWVAR 1
4957: PUSH
4958: LD_INT 6300
4960: PUSH
4961: LD_LOC 10
4965: MUL
4966: PUSH
4967: LD_LOC 10
4971: PUSH
4972: LD_INT 3150
4974: PUSH
4975: LD_EXP 13
4979: PUSH
4980: LD_INT 70
4982: MUL
4983: MINUS
4984: MUL
4985: PLUS
4986: GREATER
4987: IFFALSE 5123
4989: GO 4991
4991: DISABLE
4992: LD_INT 0
4994: PPUSH
4995: PPUSH
4996: PPUSH
// begin tictac := tictac + 1 ;
4997: LD_ADDR_LOC 10
5001: PUSH
5002: LD_LOC 10
5006: PUSH
5007: LD_INT 1
5009: PLUS
5010: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5011: LD_ADDR_VAR 0 2
5015: PUSH
5016: LD_INT 3
5018: PPUSH
5019: LD_INT 5
5021: PPUSH
5022: CALL_OW 12
5026: ST_TO_ADDR
// for i = 0 to 3 do
5027: LD_ADDR_VAR 0 1
5031: PUSH
5032: DOUBLE
5033: LD_INT 0
5035: DEC
5036: ST_TO_ADDR
5037: LD_INT 3
5039: PUSH
5040: FOR_TO
5041: IFFALSE 5120
// begin is_in := GetResourceArea ( north_west + i , mat_cans ) ;
5043: LD_ADDR_VAR 0 3
5047: PUSH
5048: LD_INT 4
5050: PUSH
5051: LD_VAR 0 1
5055: PLUS
5056: PPUSH
5057: LD_INT 1
5059: PPUSH
5060: CALL_OW 287
5064: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5065: LD_VAR 0 3
5069: PUSH
5070: LD_INT 500
5072: LESS
5073: PUSH
5074: LD_INT 1
5076: PPUSH
5077: LD_INT 10
5079: PPUSH
5080: CALL_OW 12
5084: PUSH
5085: LD_VAR 0 3
5089: PUSH
5090: LD_INT 100
5092: DIV
5093: GREATER
5094: OR
5095: IFFALSE 5118
// CreateCratesArea ( amount , north_west + i , true ) ;
5097: LD_VAR 0 2
5101: PPUSH
5102: LD_INT 4
5104: PUSH
5105: LD_VAR 0 1
5109: PLUS
5110: PPUSH
5111: LD_INT 1
5113: PPUSH
5114: CALL_OW 55
// end ;
5118: GO 5040
5120: POP
5121: POP
// enable ;
5122: ENABLE
// end ; end_of_file
5123: PPOPN 3
5125: END
// every 20 20$00 trigger apemanNumber do
5126: LD_EXP 36
5130: IFFALSE 5163
5132: GO 5134
5134: DISABLE
// begin enable ;
5135: ENABLE
// if apeLevel >= 8 then
5136: LD_EXP 41
5140: PUSH
5141: LD_INT 8
5143: GREATEREQUAL
5144: IFFALSE 5149
// disable else
5146: DISABLE
5147: GO 5163
// apeLevel := apeLevel + 1 ;
5149: LD_ADDR_EXP 41
5153: PUSH
5154: LD_EXP 41
5158: PUSH
5159: LD_INT 1
5161: PLUS
5162: ST_TO_ADDR
// end ;
5163: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5164: LD_EXP 36
5168: PUSH
5169: LD_EXP 37
5173: LESS
5174: IFFALSE 5314
5176: GO 5178
5178: DISABLE
5179: LD_INT 0
5181: PPUSH
5182: PPUSH
5183: PPUSH
5184: PPUSH
// begin enable ;
5185: ENABLE
// for i := 1 to apemanPos do
5186: LD_ADDR_VAR 0 1
5190: PUSH
5191: DOUBLE
5192: LD_INT 1
5194: DEC
5195: ST_TO_ADDR
5196: LD_EXP 39
5200: PUSH
5201: FOR_TO
5202: IFFALSE 5312
// begin if apemanPlayerCount [ i ] then
5204: LD_EXP 40
5208: PUSH
5209: LD_VAR 0 1
5213: ARRAY
5214: IFFALSE 5310
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5216: LD_EXP 40
5220: PUSH
5221: LD_VAR 0 1
5225: ARRAY
5226: PUSH
5227: LD_EXP 39
5231: PUSH
5232: LD_VAR 0 1
5236: ARRAY
5237: GREATER
5238: IFFALSE 5310
// begin ape := PrepareApeman ;
5240: LD_ADDR_VAR 0 2
5244: PUSH
5245: CALL 5817 0 0
5249: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5250: LD_VAR 0 2
5254: PPUSH
5255: LD_EXP 42
5259: PUSH
5260: LD_VAR 0 1
5264: ARRAY
5265: PPUSH
5266: LD_INT 0
5268: PPUSH
5269: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5273: LD_ADDR_EXP 39
5277: PUSH
5278: LD_EXP 39
5282: PPUSH
5283: LD_VAR 0 1
5287: PPUSH
5288: LD_EXP 39
5292: PUSH
5293: LD_VAR 0 1
5297: ARRAY
5298: PUSH
5299: LD_VAR 0 2
5303: UNION
5304: PPUSH
5305: CALL_OW 1
5309: ST_TO_ADDR
// end ; end ; end ;
5310: GO 5201
5312: POP
5313: POP
// end ;
5314: PPOPN 4
5316: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5317: LD_INT 0
5319: PPUSH
5320: PPUSH
5321: PPUSH
5322: PPUSH
5323: PPUSH
5324: PPUSH
5325: PPUSH
// playersAmount := 0 ;
5326: LD_ADDR_VAR 0 3
5330: PUSH
5331: LD_INT 0
5333: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5334: LD_ADDR_VAR 0 7
5338: PUSH
5339: LD_INT 8
5341: PUSH
5342: LD_INT 9
5344: PUSH
5345: LD_INT 11
5347: PUSH
5348: LD_INT 10
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5357: LD_ADDR_EXP 42
5361: PUSH
5362: LD_INT 0
5364: PUSH
5365: LD_INT 0
5367: PUSH
5368: LD_INT 0
5370: PUSH
5371: LD_INT 0
5373: PUSH
5374: LD_INT 0
5376: PUSH
5377: LD_INT 0
5379: PUSH
5380: LD_INT 0
5382: PUSH
5383: LD_INT 0
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: ST_TO_ADDR
// for j = 1 to Side_Positions do
5396: LD_ADDR_VAR 0 4
5400: PUSH
5401: DOUBLE
5402: LD_INT 1
5404: DEC
5405: ST_TO_ADDR
5406: LD_EXP 23
5410: PUSH
5411: FOR_TO
5412: IFFALSE 5479
// if Side_Positions [ j ] then
5414: LD_EXP 23
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: IFFALSE 5477
// begin playersAmount := playersAmount + 1 ;
5426: LD_ADDR_VAR 0 3
5430: PUSH
5431: LD_VAR 0 3
5435: PUSH
5436: LD_INT 1
5438: PLUS
5439: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5440: LD_ADDR_EXP 42
5444: PUSH
5445: LD_EXP 42
5449: PPUSH
5450: LD_VAR 0 4
5454: PPUSH
5455: LD_VAR 0 7
5459: PUSH
5460: LD_EXP 23
5464: PUSH
5465: LD_VAR 0 4
5469: ARRAY
5470: ARRAY
5471: PPUSH
5472: CALL_OW 1
5476: ST_TO_ADDR
// end ;
5477: GO 5411
5479: POP
5480: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5481: LD_ADDR_EXP 38
5485: PUSH
5486: LD_INT 3
5488: PUSH
5489: LD_EXP 15
5493: MUL
5494: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5495: LD_ADDR_EXP 36
5499: PUSH
5500: LD_VAR 0 3
5504: PUSH
5505: LD_EXP 38
5509: MUL
5510: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5511: LD_ADDR_EXP 37
5515: PUSH
5516: LD_EXP 36
5520: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5521: LD_ADDR_EXP 39
5525: PUSH
5526: LD_INT 0
5528: PUSH
5529: LD_INT 0
5531: PUSH
5532: LD_INT 0
5534: PUSH
5535: LD_INT 0
5537: PUSH
5538: LD_INT 0
5540: PUSH
5541: LD_INT 0
5543: PUSH
5544: LD_INT 0
5546: PUSH
5547: LD_INT 0
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5560: LD_ADDR_EXP 40
5564: PUSH
5565: LD_INT 0
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: LD_INT 0
5573: PUSH
5574: LD_INT 0
5576: PUSH
5577: LD_INT 0
5579: PUSH
5580: LD_INT 0
5582: PUSH
5583: LD_INT 0
5585: PUSH
5586: LD_INT 0
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: ST_TO_ADDR
// apeLevel := 1 ;
5599: LD_ADDR_EXP 41
5603: PUSH
5604: LD_INT 1
5606: ST_TO_ADDR
// if not apemanNumber then
5607: LD_EXP 36
5611: NOT
5612: IFFALSE 5616
// exit ;
5614: GO 5812
// for i := 1 to apemanPerPlayer do
5616: LD_ADDR_VAR 0 2
5620: PUSH
5621: DOUBLE
5622: LD_INT 1
5624: DEC
5625: ST_TO_ADDR
5626: LD_EXP 38
5630: PUSH
5631: FOR_TO
5632: IFFALSE 5810
// begin for j := 1 to Side_Positions do
5634: LD_ADDR_VAR 0 4
5638: PUSH
5639: DOUBLE
5640: LD_INT 1
5642: DEC
5643: ST_TO_ADDR
5644: LD_EXP 23
5648: PUSH
5649: FOR_TO
5650: IFFALSE 5806
// if Side_Positions [ j ] then
5652: LD_EXP 23
5656: PUSH
5657: LD_VAR 0 4
5661: ARRAY
5662: IFFALSE 5804
// begin pos := Side_Positions [ j ] ;
5664: LD_ADDR_VAR 0 6
5668: PUSH
5669: LD_EXP 23
5673: PUSH
5674: LD_VAR 0 4
5678: ARRAY
5679: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5680: LD_ADDR_EXP 40
5684: PUSH
5685: LD_EXP 40
5689: PPUSH
5690: LD_VAR 0 4
5694: PPUSH
5695: LD_EXP 40
5699: PUSH
5700: LD_VAR 0 4
5704: ARRAY
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: PPUSH
5710: CALL_OW 1
5714: ST_TO_ADDR
// ape := PrepareApeman ;
5715: LD_ADDR_VAR 0 5
5719: PUSH
5720: CALL 5817 0 0
5724: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5725: LD_ADDR_EXP 39
5729: PUSH
5730: LD_EXP 39
5734: PPUSH
5735: LD_VAR 0 4
5739: PPUSH
5740: LD_EXP 39
5744: PUSH
5745: LD_VAR 0 4
5749: ARRAY
5750: PPUSH
5751: LD_EXP 39
5755: PUSH
5756: LD_VAR 0 4
5760: ARRAY
5761: PUSH
5762: LD_INT 1
5764: PLUS
5765: PPUSH
5766: LD_VAR 0 5
5770: PPUSH
5771: CALL_OW 1
5775: PPUSH
5776: CALL_OW 1
5780: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5781: LD_VAR 0 5
5785: PPUSH
5786: LD_EXP 42
5790: PUSH
5791: LD_VAR 0 4
5795: ARRAY
5796: PPUSH
5797: LD_INT 0
5799: PPUSH
5800: CALL_OW 49
// end ;
5804: GO 5649
5806: POP
5807: POP
// end ;
5808: GO 5631
5810: POP
5811: POP
// end ;
5812: LD_VAR 0 1
5816: RET
// export function PrepareApeman ; var bonus ; begin
5817: LD_INT 0
5819: PPUSH
5820: PPUSH
// uc_side := 0 ;
5821: LD_ADDR_OWVAR 20
5825: PUSH
5826: LD_INT 0
5828: ST_TO_ADDR
// uc_nation := 0 ;
5829: LD_ADDR_OWVAR 21
5833: PUSH
5834: LD_INT 0
5836: ST_TO_ADDR
// InitHc ;
5837: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5841: LD_ADDR_VAR 0 2
5845: PUSH
5846: LD_INT 1
5848: NEG
5849: PUSH
5850: LD_INT 0
5852: PUSH
5853: LD_INT 1
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: LIST
5860: PUSH
5861: LD_OWVAR 1
5865: PUSH
5866: LD_INT 3
5868: MOD
5869: PUSH
5870: LD_INT 1
5872: PLUS
5873: ARRAY
5874: ST_TO_ADDR
// hc_class := class_apeman ;
5875: LD_ADDR_OWVAR 28
5879: PUSH
5880: LD_INT 12
5882: ST_TO_ADDR
// hc_gallery :=  ;
5883: LD_ADDR_OWVAR 33
5887: PUSH
5888: LD_STRING 
5890: ST_TO_ADDR
// hc_name :=  ;
5891: LD_ADDR_OWVAR 26
5895: PUSH
5896: LD_STRING 
5898: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5899: LD_ADDR_OWVAR 31
5903: PUSH
5904: LD_EXP 41
5908: PUSH
5909: LD_VAR 0 2
5913: PLUS
5914: PUSH
5915: LD_EXP 41
5919: PUSH
5920: LD_VAR 0 2
5924: PLUS
5925: PUSH
5926: LD_EXP 41
5930: PUSH
5931: LD_VAR 0 2
5935: PLUS
5936: PUSH
5937: LD_EXP 41
5941: PUSH
5942: LD_VAR 0 2
5946: PLUS
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5954: LD_ADDR_OWVAR 35
5958: PUSH
5959: LD_INT 10
5961: PUSH
5962: LD_VAR 0 2
5966: MUL
5967: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5968: LD_ADDR_OWVAR 29
5972: PUSH
5973: LD_INT 12
5975: PUSH
5976: LD_INT 10
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: ST_TO_ADDR
// result := CreateHuman ;
5983: LD_ADDR_VAR 0 1
5987: PUSH
5988: CALL_OW 44
5992: ST_TO_ADDR
// end ;
5993: LD_VAR 0 1
5997: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5998: LD_INT 0
6000: PPUSH
6001: PPUSH
6002: PPUSH
// if not ape then
6003: LD_VAR 0 1
6007: NOT
6008: IFFALSE 6012
// exit ;
6010: GO 6137
// side := GetSide ( ape ) ;
6012: LD_ADDR_VAR 0 3
6016: PUSH
6017: LD_VAR 0 1
6021: PPUSH
6022: CALL_OW 255
6026: ST_TO_ADDR
// if not side then
6027: LD_VAR 0 3
6031: NOT
6032: IFFALSE 6086
// begin for i = 1 to apemanPos do
6034: LD_ADDR_VAR 0 4
6038: PUSH
6039: DOUBLE
6040: LD_INT 1
6042: DEC
6043: ST_TO_ADDR
6044: LD_EXP 39
6048: PUSH
6049: FOR_TO
6050: IFFALSE 6084
// if ape in apemanPos [ i ] then
6052: LD_VAR 0 1
6056: PUSH
6057: LD_EXP 39
6061: PUSH
6062: LD_VAR 0 4
6066: ARRAY
6067: IN
6068: IFFALSE 6082
// begin side := i ;
6070: LD_ADDR_VAR 0 3
6074: PUSH
6075: LD_VAR 0 4
6079: ST_TO_ADDR
// break ;
6080: GO 6084
// end ;
6082: GO 6049
6084: POP
6085: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6086: LD_ADDR_EXP 39
6090: PUSH
6091: LD_EXP 39
6095: PPUSH
6096: LD_VAR 0 3
6100: PPUSH
6101: LD_EXP 39
6105: PUSH
6106: LD_VAR 0 3
6110: ARRAY
6111: PUSH
6112: LD_VAR 0 1
6116: DIFF
6117: PPUSH
6118: CALL_OW 1
6122: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6123: LD_ADDR_EXP 36
6127: PUSH
6128: LD_EXP 36
6132: PUSH
6133: LD_INT 1
6135: MINUS
6136: ST_TO_ADDR
// end ; end_of_file
6137: LD_VAR 0 2
6141: RET
// var respawn_queue ; export function init_respawn ; begin
6142: LD_INT 0
6144: PPUSH
// if not def_people_respawning then
6145: LD_EXP 60
6149: NOT
6150: IFFALSE 6154
// exit ;
6152: GO 6196
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6154: LD_ADDR_LOC 11
6158: PUSH
6159: LD_INT 0
6161: PUSH
6162: LD_INT 0
6164: PUSH
6165: LD_INT 0
6167: PUSH
6168: LD_INT 0
6170: PUSH
6171: LD_INT 0
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: LD_INT 0
6179: PUSH
6180: LD_INT 0
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: ST_TO_ADDR
// enable ( 10 ) ;
6193: LD_INT 10
6195: ENABLE_MARKED
// end ;
6196: LD_VAR 0 1
6200: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
// begin for side = 1 to Side_Positions do
6210: LD_ADDR_VAR 0 4
6214: PUSH
6215: DOUBLE
6216: LD_INT 1
6218: DEC
6219: ST_TO_ADDR
6220: LD_EXP 23
6224: PUSH
6225: FOR_TO
6226: IFFALSE 6392
// if Side_Positions [ side ] then
6228: LD_EXP 23
6232: PUSH
6233: LD_VAR 0 4
6237: ARRAY
6238: IFFALSE 6390
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6240: LD_ADDR_VAR 0 2
6244: PUSH
6245: LD_INT 22
6247: PUSH
6248: LD_VAR 0 4
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 21
6259: PUSH
6260: LD_INT 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 3
6269: PUSH
6270: LD_INT 23
6272: PUSH
6273: LD_INT 0
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: PPUSH
6286: CALL_OW 69
6290: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6291: LD_VAR 0 2
6295: PUSH
6296: LD_EXP 9
6300: LESS
6301: PUSH
6302: LD_LOC 11
6306: PUSH
6307: LD_VAR 0 4
6311: ARRAY
6312: NOT
6313: AND
6314: IFFALSE 6330
// set_queue ( side , TICK ) ;
6316: LD_VAR 0 4
6320: PPUSH
6321: LD_OWVAR 1
6325: PPUSH
6326: CALL 6629 0 2
// time := TICK - respawn_queue [ side ] ;
6330: LD_ADDR_VAR 0 3
6334: PUSH
6335: LD_OWVAR 1
6339: PUSH
6340: LD_LOC 11
6344: PUSH
6345: LD_VAR 0 4
6349: ARRAY
6350: MINUS
6351: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6352: LD_LOC 11
6356: PUSH
6357: LD_VAR 0 4
6361: ARRAY
6362: PUSH
6363: LD_VAR 0 3
6367: PUSH
6368: LD_EXP 16
6372: GREATER
6373: AND
6374: IFFALSE 6390
// respawn_character ( side , time ) ;
6376: LD_VAR 0 4
6380: PPUSH
6381: LD_VAR 0 3
6385: PPUSH
6386: CALL 6398 0 2
// end ;
6390: GO 6225
6392: POP
6393: POP
// enable ;
6394: ENABLE
// end ;
6395: PPOPN 4
6397: END
// function respawn_character ( side , time ) ; var dep ; begin
6398: LD_INT 0
6400: PPUSH
6401: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6402: LD_INT 0
6404: PPUSH
6405: LD_INT 1
6407: PPUSH
6408: CALL_OW 12
6412: PUSH
6413: LD_VAR 0 2
6417: PUSH
6418: LD_EXP 17
6422: LESS
6423: AND
6424: IFFALSE 6428
// exit ;
6426: GO 6624
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6428: LD_ADDR_VAR 0 4
6432: PUSH
6433: LD_INT 22
6435: PUSH
6436: LD_VAR 0 1
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: LD_INT 2
6447: PUSH
6448: LD_INT 30
6450: PUSH
6451: LD_INT 0
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 30
6460: PUSH
6461: LD_INT 1
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 50
6475: PUSH
6476: EMPTY
6477: LIST
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: PPUSH
6484: CALL_OW 69
6488: ST_TO_ADDR
// if not dep then
6489: LD_VAR 0 4
6493: NOT
6494: IFFALSE 6500
// exit else
6496: GO 6624
6498: GO 6524
// dep := dep [ Rand ( 1 , dep ) ] ;
6500: LD_ADDR_VAR 0 4
6504: PUSH
6505: LD_VAR 0 4
6509: PUSH
6510: LD_INT 1
6512: PPUSH
6513: LD_VAR 0 4
6517: PPUSH
6518: CALL_OW 12
6522: ARRAY
6523: ST_TO_ADDR
// uc_side := side ;
6524: LD_ADDR_OWVAR 20
6528: PUSH
6529: LD_VAR 0 1
6533: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6534: LD_ADDR_OWVAR 21
6538: PUSH
6539: LD_EXP 24
6543: PUSH
6544: LD_VAR 0 1
6548: ARRAY
6549: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6550: LD_INT 0
6552: PPUSH
6553: LD_INT 0
6555: PPUSH
6556: LD_EXP 10
6560: PUSH
6561: LD_INT 2
6563: DIV
6564: PPUSH
6565: CALL_OW 380
// hc_importance := 0 ;
6569: LD_ADDR_OWVAR 32
6573: PUSH
6574: LD_INT 0
6576: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6577: CALL_OW 44
6581: PPUSH
6582: LD_VAR 0 4
6586: PPUSH
6587: CALL_OW 250
6591: PPUSH
6592: LD_VAR 0 4
6596: PPUSH
6597: CALL_OW 251
6601: PPUSH
6602: LD_INT 10
6604: PPUSH
6605: LD_INT 1
6607: PPUSH
6608: CALL_OW 50
// set_queue ( side , 0 ) ;
6612: LD_VAR 0 1
6616: PPUSH
6617: LD_INT 0
6619: PPUSH
6620: CALL 6629 0 2
// end ;
6624: LD_VAR 0 3
6628: RET
// function set_queue ( side , time ) ; begin
6629: LD_INT 0
6631: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6632: LD_ADDR_LOC 11
6636: PUSH
6637: LD_LOC 11
6641: PPUSH
6642: LD_VAR 0 1
6646: PPUSH
6647: CALL_OW 3
6651: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6652: LD_ADDR_LOC 11
6656: PUSH
6657: LD_LOC 11
6661: PPUSH
6662: LD_VAR 0 1
6666: PPUSH
6667: LD_VAR 0 2
6671: PPUSH
6672: CALL_OW 2
6676: ST_TO_ADDR
// end ; end_of_file
6677: LD_VAR 0 3
6681: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6682: LD_VAR 0 1
6686: PPUSH
6687: CALL_OW 266
6691: PUSH
6692: LD_INT 0
6694: PUSH
6695: LD_INT 1
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: IN
6702: IFFALSE 6727
// SetBName ( b , @ & GetSide ( b ) ) ;
6704: LD_VAR 0 1
6708: PPUSH
6709: LD_STRING @
6711: PUSH
6712: LD_VAR 0 1
6716: PPUSH
6717: CALL_OW 255
6721: STR
6722: PPUSH
6723: CALL_OW 500
// if def_game_rules then
6727: LD_EXP 49
6731: IFFALSE 6768
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6733: LD_VAR 0 1
6737: PPUSH
6738: LD_VAR 0 1
6742: PPUSH
6743: CALL_OW 266
6747: PPUSH
6748: LD_VAR 0 1
6752: PPUSH
6753: CALL_OW 255
6757: PPUSH
6758: LD_INT 0
6760: PPUSH
6761: LD_INT 1
6763: PPUSH
6764: CALL 16600 0 5
// end ;
6768: PPOPN 2
6770: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6771: LD_VAR 0 1
6775: PPUSH
6776: CALL_OW 266
6780: PUSH
6781: LD_INT 0
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: IN
6791: IFFALSE 6816
// SetBName ( b , @ & GetSide ( b ) ) ;
6793: LD_VAR 0 1
6797: PPUSH
6798: LD_STRING @
6800: PUSH
6801: LD_VAR 0 1
6805: PPUSH
6806: CALL_OW 255
6810: STR
6811: PPUSH
6812: CALL_OW 500
// if def_game_rules then
6816: LD_EXP 49
6820: IFFALSE 6859
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6822: LD_VAR 0 1
6826: PPUSH
6827: LD_VAR 0 1
6831: PPUSH
6832: CALL_OW 266
6836: PPUSH
6837: LD_VAR 0 1
6841: PPUSH
6842: CALL_OW 255
6846: PPUSH
6847: LD_VAR 0 2
6851: PPUSH
6852: LD_INT 1
6854: PPUSH
6855: CALL 16600 0 5
// end ;
6859: PPOPN 3
6861: END
// on VehicleConstructed ( veh , fac ) do var side ;
6862: LD_INT 0
6864: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6865: LD_VAR 0 1
6869: PPUSH
6870: CALL_OW 263
6874: PUSH
6875: LD_INT 5
6877: EQUAL
6878: IFFALSE 7020
// begin side := GetSide ( veh ) ;
6880: LD_ADDR_VAR 0 3
6884: PUSH
6885: LD_VAR 0 1
6889: PPUSH
6890: CALL_OW 255
6894: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6895: LD_ADDR_EXP 39
6899: PUSH
6900: LD_EXP 39
6904: PPUSH
6905: LD_VAR 0 3
6909: PPUSH
6910: LD_EXP 39
6914: PUSH
6915: LD_VAR 0 3
6919: ARRAY
6920: PPUSH
6921: LD_INT 52
6923: PUSH
6924: EMPTY
6925: LIST
6926: PPUSH
6927: CALL_OW 72
6931: PUSH
6932: LD_INT 22
6934: PUSH
6935: LD_VAR 0 3
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PUSH
6944: LD_INT 2
6946: PUSH
6947: LD_INT 33
6949: PUSH
6950: LD_INT 5
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 25
6959: PUSH
6960: LD_INT 12
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: PUSH
6967: LD_INT 25
6969: PUSH
6970: LD_INT 15
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 25
6979: PUSH
6980: LD_INT 16
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 25
6989: PUSH
6990: LD_INT 17
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: PPUSH
7009: CALL_OW 69
7013: UNION
7014: PPUSH
7015: CALL_OW 1
7019: ST_TO_ADDR
// end ; end ;
7020: PPOPN 3
7022: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7023: LD_INT 0
7025: PPUSH
7026: PPUSH
7027: PPUSH
7028: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 257
7038: PUSH
7039: LD_INT 12
7041: PUSH
7042: LD_INT 15
7044: PUSH
7045: LD_INT 17
7047: PUSH
7048: LD_INT 16
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: IN
7057: PUSH
7058: LD_VAR 0 1
7062: PPUSH
7063: CALL_OW 263
7067: PUSH
7068: LD_INT 5
7070: EQUAL
7071: OR
7072: IFFALSE 7083
// ApeKilled ( j ) ;
7074: LD_VAR 0 1
7078: PPUSH
7079: CALL 5998 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7083: LD_VAR 0 1
7087: PPUSH
7088: CALL_OW 266
7092: PUSH
7093: LD_INT 0
7095: PUSH
7096: LD_INT 1
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: IN
7103: IFFALSE 7185
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7105: LD_ADDR_VAR 0 4
7109: PUSH
7110: LD_EXP 23
7114: PUSH
7115: LD_VAR 0 1
7119: PPUSH
7120: CALL_OW 255
7124: ARRAY
7125: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7126: LD_ADDR_VAR 0 2
7130: PUSH
7131: LD_EXP 32
7135: PUSH
7136: LD_VAR 0 4
7140: ARRAY
7141: PUSH
7142: LD_INT 1
7144: ARRAY
7145: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7146: LD_ADDR_VAR 0 3
7150: PUSH
7151: LD_EXP 32
7155: PUSH
7156: LD_VAR 0 4
7160: ARRAY
7161: PUSH
7162: LD_INT 2
7164: ARRAY
7165: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7166: LD_VAR 0 2
7170: PPUSH
7171: LD_VAR 0 3
7175: PPUSH
7176: CALL_OW 420
7180: PPUSH
7181: CALL_OW 419
// end ; if def_game_rules then
7185: LD_EXP 49
7189: IFFALSE 7288
// if ( GetType ( j ) = 3 ) then
7191: LD_VAR 0 1
7195: PPUSH
7196: CALL_OW 247
7200: PUSH
7201: LD_INT 3
7203: EQUAL
7204: IFFALSE 7244
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7206: LD_VAR 0 1
7210: PPUSH
7211: LD_VAR 0 1
7215: PPUSH
7216: CALL_OW 266
7220: PPUSH
7221: LD_VAR 0 1
7225: PPUSH
7226: CALL_OW 255
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: LD_INT 1
7236: NEG
7237: PPUSH
7238: CALL 16600 0 5
7242: GO 7288
// if ( GetChassis ( j ) = 25 ) then
7244: LD_VAR 0 1
7248: PPUSH
7249: CALL_OW 265
7253: PUSH
7254: LD_INT 25
7256: EQUAL
7257: IFFALSE 7288
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7259: LD_VAR 0 1
7263: PPUSH
7264: LD_INT 37
7266: PPUSH
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL_OW 255
7276: PPUSH
7277: LD_INT 0
7279: PPUSH
7280: LD_INT 1
7282: NEG
7283: PPUSH
7284: CALL 16600 0 5
// end ;
7288: PPOPN 5
7290: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7291: LD_EXP 49
7295: PUSH
7296: LD_VAR 0 1
7300: PPUSH
7301: CALL_OW 265
7305: PUSH
7306: LD_INT 25
7308: EQUAL
7309: AND
7310: IFFALSE 7342
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7312: LD_VAR 0 1
7316: PPUSH
7317: LD_INT 37
7319: PPUSH
7320: LD_VAR 0 1
7324: PPUSH
7325: CALL_OW 255
7329: PPUSH
7330: LD_VAR 0 3
7334: PPUSH
7335: LD_INT 1
7337: PPUSH
7338: CALL 16600 0 5
// end ;
7342: PPOPN 4
7344: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7345: LD_VAR 0 1
7349: PPUSH
7350: LD_VAR 0 2
7354: PPUSH
7355: LD_VAR 0 3
7359: PPUSH
7360: LD_OWVAR 2
7364: PPUSH
7365: CALL 18087 0 4
7369: PPOPN 3
7371: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
7372: LD_INT 0
7374: PPUSH
7375: PPUSH
7376: PPUSH
7377: PPUSH
7378: PPUSH
7379: PPUSH
// artefact_number := 3 ;
7380: LD_ADDR_EXP 43
7384: PUSH
7385: LD_INT 3
7387: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
7388: LD_ADDR_EXP 44
7392: PUSH
7393: LD_INT 1
7395: PUSH
7396: LD_INT 0
7398: PUSH
7399: LD_INT 2
7401: PUSH
7402: LD_INT 0
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
7415: LD_ADDR_EXP 45
7419: PUSH
7420: LD_INT 1
7422: PUSH
7423: LD_INT 3
7425: PUSH
7426: LD_INT 5
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: LIST
7433: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
7434: LD_ADDR_VAR 0 2
7438: PUSH
7439: LD_INT 1
7441: PUSH
7442: LD_INT 4
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 2
7451: PUSH
7452: LD_INT 5
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: PUSH
7459: LD_INT 3
7461: PUSH
7462: LD_INT 9
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
7474: LD_ADDR_VAR 0 3
7478: PUSH
7479: LD_INT 3
7481: PUSH
7482: LD_INT 4
7484: PUSH
7485: LD_INT 3
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
7493: LD_ADDR_VAR 0 4
7497: PUSH
7498: LD_INT 150
7500: PUSH
7501: LD_INT 250
7503: PUSH
7504: LD_INT 400
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: LIST
7511: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
7512: LD_ADDR_VAR 0 5
7516: PUSH
7517: LD_INT 2
7519: PUSH
7520: LD_INT 10
7522: PUSH
7523: LD_INT 20
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
7531: LD_ADDR_VAR 0 6
7535: PUSH
7536: LD_INT 6
7538: PUSH
7539: LD_INT 18
7541: PUSH
7542: LD_INT 50
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
7550: LD_VAR 0 2
7554: PPUSH
7555: LD_VAR 0 3
7559: PPUSH
7560: LD_VAR 0 4
7564: PPUSH
7565: LD_VAR 0 5
7569: PPUSH
7570: LD_VAR 0 6
7574: PPUSH
7575: CALL 7584 0 5
// end ;
7579: LD_VAR 0 1
7583: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
7584: LD_INT 0
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
// disable ( 1 ) ;
7591: LD_INT 1
7593: DISABLE_MARKED
// disable ( 5 ) ;
7594: LD_INT 5
7596: DISABLE_MARKED
// disable ( 6 ) ;
7597: LD_INT 6
7599: DISABLE_MARKED
// disable ( 7 ) ;
7600: LD_INT 7
7602: DISABLE_MARKED
// for side = 1 to 8 do
7603: LD_ADDR_VAR 0 9
7607: PUSH
7608: DOUBLE
7609: LD_INT 1
7611: DEC
7612: ST_TO_ADDR
7613: LD_INT 8
7615: PUSH
7616: FOR_TO
7617: IFFALSE 7633
// SetArtifactRes ( side , state_enabled ) ;
7619: LD_VAR 0 9
7623: PPUSH
7624: LD_INT 1
7626: PPUSH
7627: CALL_OW 467
7631: GO 7616
7633: POP
7634: POP
// for un = 0 to ( artefact_number - 1 ) do
7635: LD_ADDR_VAR 0 7
7639: PUSH
7640: DOUBLE
7641: LD_INT 0
7643: DEC
7644: ST_TO_ADDR
7645: LD_EXP 43
7649: PUSH
7650: LD_INT 1
7652: MINUS
7653: PUSH
7654: FOR_TO
7655: IFFALSE 8053
// begin base := un * 100 ;
7657: LD_ADDR_VAR 0 10
7661: PUSH
7662: LD_VAR 0 7
7666: PUSH
7667: LD_INT 100
7669: MUL
7670: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
7671: LD_VAR 0 10
7675: PUSH
7676: LD_INT 1
7678: PLUS
7679: PPUSH
7680: LD_VAR 0 1
7684: PUSH
7685: LD_VAR 0 7
7689: PUSH
7690: LD_INT 1
7692: PLUS
7693: ARRAY
7694: PUSH
7695: LD_INT 1
7697: ARRAY
7698: PPUSH
7699: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7703: LD_VAR 0 10
7707: PUSH
7708: LD_INT 2
7710: PLUS
7711: PPUSH
7712: LD_VAR 0 1
7716: PUSH
7717: LD_VAR 0 7
7721: PUSH
7722: LD_INT 1
7724: PLUS
7725: ARRAY
7726: PUSH
7727: LD_INT 2
7729: ARRAY
7730: PPUSH
7731: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7735: LD_VAR 0 10
7739: PUSH
7740: LD_INT 3
7742: PLUS
7743: PPUSH
7744: LD_VAR 0 2
7748: PUSH
7749: LD_VAR 0 7
7753: PUSH
7754: LD_INT 1
7756: PLUS
7757: ARRAY
7758: PPUSH
7759: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7763: LD_VAR 0 10
7767: PUSH
7768: LD_INT 5
7770: PLUS
7771: PPUSH
7772: LD_VAR 0 3
7776: PUSH
7777: LD_VAR 0 7
7781: PUSH
7782: LD_INT 1
7784: PLUS
7785: ARRAY
7786: PPUSH
7787: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7791: LD_VAR 0 10
7795: PUSH
7796: LD_INT 6
7798: PLUS
7799: PPUSH
7800: LD_VAR 0 4
7804: PUSH
7805: LD_VAR 0 7
7809: PUSH
7810: LD_INT 1
7812: PLUS
7813: ARRAY
7814: PPUSH
7815: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7819: LD_VAR 0 10
7823: PUSH
7824: LD_INT 7
7826: PLUS
7827: PPUSH
7828: LD_VAR 0 5
7832: PUSH
7833: LD_VAR 0 7
7837: PUSH
7838: LD_INT 1
7840: PLUS
7841: ARRAY
7842: PPUSH
7843: CALL_OW 109
// SetTag ( base + 08 , false ) ;
7847: LD_VAR 0 10
7851: PUSH
7852: LD_INT 8
7854: PLUS
7855: PPUSH
7856: LD_INT 0
7858: PPUSH
7859: CALL_OW 109
// SetTag ( base + 09 , false ) ;
7863: LD_VAR 0 10
7867: PUSH
7868: LD_INT 9
7870: PLUS
7871: PPUSH
7872: LD_INT 0
7874: PPUSH
7875: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
7879: LD_VAR 0 10
7883: PUSH
7884: LD_INT 11
7886: PLUS
7887: PPUSH
7888: LD_INT 0
7890: PPUSH
7891: CALL_OW 109
// SetTag ( base + 12 , false ) ;
7895: LD_VAR 0 10
7899: PUSH
7900: LD_INT 12
7902: PLUS
7903: PPUSH
7904: LD_INT 0
7906: PPUSH
7907: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7911: LD_VAR 0 10
7915: PUSH
7916: LD_INT 13
7918: PLUS
7919: PPUSH
7920: LD_INT 0
7922: PPUSH
7923: CALL_OW 109
// for i = 0 to 7 do
7927: LD_ADDR_VAR 0 8
7931: PUSH
7932: DOUBLE
7933: LD_INT 0
7935: DEC
7936: ST_TO_ADDR
7937: LD_INT 7
7939: PUSH
7940: FOR_TO
7941: IFFALSE 8049
// begin SetTag ( base + i * 10 + 21 , false ) ;
7943: LD_VAR 0 10
7947: PUSH
7948: LD_VAR 0 8
7952: PUSH
7953: LD_INT 10
7955: MUL
7956: PLUS
7957: PUSH
7958: LD_INT 21
7960: PLUS
7961: PPUSH
7962: LD_INT 0
7964: PPUSH
7965: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
7969: LD_VAR 0 10
7973: PUSH
7974: LD_VAR 0 8
7978: PUSH
7979: LD_INT 10
7981: MUL
7982: PLUS
7983: PUSH
7984: LD_INT 22
7986: PLUS
7987: PPUSH
7988: LD_INT 0
7990: PPUSH
7991: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
7995: LD_VAR 0 10
7999: PUSH
8000: LD_VAR 0 8
8004: PUSH
8005: LD_INT 10
8007: MUL
8008: PLUS
8009: PUSH
8010: LD_INT 23
8012: PLUS
8013: PPUSH
8014: LD_INT 0
8016: PPUSH
8017: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
8021: LD_VAR 0 10
8025: PUSH
8026: LD_VAR 0 8
8030: PUSH
8031: LD_INT 10
8033: MUL
8034: PLUS
8035: PUSH
8036: LD_INT 25
8038: PLUS
8039: PPUSH
8040: LD_INT 0
8042: PPUSH
8043: CALL_OW 109
// end ;
8047: GO 7940
8049: POP
8050: POP
// end ;
8051: GO 7654
8053: POP
8054: POP
// enable ( 20 ) ;
8055: LD_INT 20
8057: ENABLE_MARKED
// labs_in_use := [ ] ;
8058: LD_ADDR_EXP 46
8062: PUSH
8063: EMPTY
8064: ST_TO_ADDR
// if def_artefact_one then
8065: LD_EXP 1
8069: IFFALSE 8096
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
8071: LD_INT 4
8073: PPUSH
8074: LD_EXP 45
8078: PUSH
8079: LD_INT 1
8081: ARRAY
8082: PPUSH
8083: LD_INT 16
8085: PPUSH
8086: LD_INT 0
8088: PPUSH
8089: CALL_OW 59
// enable ( 5 ) ;
8093: LD_INT 5
8095: ENABLE_MARKED
// end ; if def_artefact_two then
8096: LD_EXP 2
8100: IFFALSE 8127
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
8102: LD_INT 4
8104: PPUSH
8105: LD_EXP 45
8109: PUSH
8110: LD_INT 2
8112: ARRAY
8113: PPUSH
8114: LD_INT 16
8116: PPUSH
8117: LD_INT 0
8119: PPUSH
8120: CALL_OW 59
// enable ( 6 ) ;
8124: LD_INT 6
8126: ENABLE_MARKED
// end ; if def_artefact_three then
8127: LD_EXP 3
8131: IFFALSE 8158
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
8133: LD_INT 4
8135: PPUSH
8136: LD_EXP 45
8140: PUSH
8141: LD_INT 3
8143: ARRAY
8144: PPUSH
8145: LD_INT 16
8147: PPUSH
8148: LD_INT 0
8150: PPUSH
8151: CALL_OW 59
// enable ( 7 ) ;
8155: LD_INT 7
8157: ENABLE_MARKED
// end ; end ;
8158: LD_VAR 0 6
8162: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
8163: LD_INT 0
8165: PPUSH
8166: PPUSH
// begin art := artefact_num [ size ] ;
8167: LD_ADDR_VAR 0 3
8171: PUSH
8172: LD_EXP 44
8176: PUSH
8177: LD_VAR 0 2
8181: ARRAY
8182: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8183: LD_ADDR_VAR 0 4
8187: PUSH
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 1
8195: MINUS
8196: PUSH
8197: LD_INT 100
8199: MUL
8200: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
8201: LD_VAR 0 4
8205: PUSH
8206: LD_INT 9
8208: PLUS
8209: PPUSH
8210: LD_INT 0
8212: PPUSH
8213: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8217: LD_VAR 0 4
8221: PUSH
8222: LD_INT 13
8224: PLUS
8225: PPUSH
8226: LD_INT 0
8228: PPUSH
8229: CALL_OW 109
// Init_Lab ( art ) ;
8233: LD_VAR 0 3
8237: PPUSH
8238: CALL 9714 0 1
// end ;
8242: PPOPN 4
8244: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
8245: LD_INT 0
8247: PPUSH
8248: PPUSH
8249: PPUSH
// begin art := artefact_num [ size ] ;
8250: LD_ADDR_VAR 0 3
8254: PUSH
8255: LD_EXP 44
8259: PUSH
8260: LD_VAR 0 2
8264: ARRAY
8265: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8266: LD_ADDR_VAR 0 4
8270: PUSH
8271: LD_VAR 0 3
8275: PUSH
8276: LD_INT 1
8278: MINUS
8279: PUSH
8280: LD_INT 100
8282: MUL
8283: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
8284: LD_VAR 0 4
8288: PUSH
8289: LD_INT 9
8291: PLUS
8292: PPUSH
8293: LD_INT 1
8295: PPUSH
8296: CALL_OW 109
// SetTag ( base + 13 , un ) ;
8300: LD_VAR 0 4
8304: PUSH
8305: LD_INT 13
8307: PLUS
8308: PPUSH
8309: LD_VAR 0 1
8313: PPUSH
8314: CALL_OW 109
// if GetTag ( base + 11 ) then
8318: LD_VAR 0 4
8322: PUSH
8323: LD_INT 11
8325: PLUS
8326: PPUSH
8327: CALL_OW 110
8331: IFFALSE 8494
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
8333: LD_ADDR_VAR 0 5
8337: PUSH
8338: LD_VAR 0 4
8342: PUSH
8343: LD_INT 11
8345: PLUS
8346: PPUSH
8347: CALL_OW 110
8351: PPUSH
8352: CALL_OW 255
8356: ST_TO_ADDR
// if GetTag ( base + 12 ) then
8357: LD_VAR 0 4
8361: PUSH
8362: LD_INT 12
8364: PLUS
8365: PPUSH
8366: CALL_OW 110
8370: IFFALSE 8438
// begin ComCancel ( GetTag ( base + 11 ) ) ;
8372: LD_VAR 0 4
8376: PUSH
8377: LD_INT 11
8379: PLUS
8380: PPUSH
8381: CALL_OW 110
8385: PPUSH
8386: CALL_OW 127
// wait ( 5 ) ;
8390: LD_INT 5
8392: PPUSH
8393: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
8397: LD_ADDR_EXP 46
8401: PUSH
8402: LD_EXP 46
8406: PUSH
8407: LD_VAR 0 4
8411: PUSH
8412: LD_INT 11
8414: PLUS
8415: PPUSH
8416: CALL_OW 110
8420: DIFF
8421: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
8422: LD_VAR 0 4
8426: PUSH
8427: LD_INT 12
8429: PLUS
8430: PPUSH
8431: LD_INT 0
8433: PPUSH
8434: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
8438: LD_VAR 0 4
8442: PUSH
8443: LD_VAR 0 5
8447: PUSH
8448: LD_INT 10
8450: MUL
8451: PLUS
8452: PUSH
8453: LD_INT 11
8455: PLUS
8456: PPUSH
8457: CALL_OW 110
8461: NOT
8462: IFFALSE 8478
// DeInit_Lab ( side , art ) ;
8464: LD_VAR 0 5
8468: PPUSH
8469: LD_VAR 0 3
8473: PPUSH
8474: CALL 10250 0 2
// SetTag ( base + 11 , 0 ) ;
8478: LD_VAR 0 4
8482: PUSH
8483: LD_INT 11
8485: PLUS
8486: PPUSH
8487: LD_INT 0
8489: PPUSH
8490: CALL_OW 109
// end ; end ;
8494: PPOPN 5
8496: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
8497: LD_INT 0
8499: PPUSH
8500: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8501: LD_ADDR_VAR 0 3
8505: PUSH
8506: LD_VAR 0 1
8510: PPUSH
8511: CALL_OW 255
8515: PUSH
8516: LD_INT 1
8518: MINUS
8519: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8520: LD_ADDR_VAR 0 2
8524: PUSH
8525: DOUBLE
8526: LD_INT 0
8528: DEC
8529: ST_TO_ADDR
8530: LD_EXP 43
8534: PUSH
8535: LD_INT 1
8537: MINUS
8538: PUSH
8539: FOR_TO
8540: IFFALSE 8582
// if lab = GetTag ( un * 100 + 11 ) then
8542: LD_VAR 0 1
8546: PUSH
8547: LD_VAR 0 2
8551: PUSH
8552: LD_INT 100
8554: MUL
8555: PUSH
8556: LD_INT 11
8558: PLUS
8559: PPUSH
8560: CALL_OW 110
8564: EQUAL
8565: IFFALSE 8580
// Init_Lab ( un + 1 ) ;
8567: LD_VAR 0 2
8571: PUSH
8572: LD_INT 1
8574: PLUS
8575: PPUSH
8576: CALL 9714 0 1
8580: GO 8539
8582: POP
8583: POP
// end ;
8584: PPOPN 3
8586: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
8587: LD_INT 0
8589: PPUSH
8590: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8591: LD_ADDR_VAR 0 4
8595: PUSH
8596: LD_VAR 0 1
8600: PPUSH
8601: CALL_OW 255
8605: PUSH
8606: LD_INT 1
8608: MINUS
8609: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8610: LD_ADDR_VAR 0 3
8614: PUSH
8615: DOUBLE
8616: LD_INT 0
8618: DEC
8619: ST_TO_ADDR
8620: LD_EXP 43
8624: PUSH
8625: LD_INT 1
8627: MINUS
8628: PUSH
8629: FOR_TO
8630: IFFALSE 8748
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8632: LD_VAR 0 3
8636: PUSH
8637: LD_INT 100
8639: MUL
8640: PUSH
8641: LD_INT 11
8643: PLUS
8644: PPUSH
8645: CALL_OW 110
8649: PUSH
8650: LD_VAR 0 1
8654: EQUAL
8655: PUSH
8656: LD_VAR 0 3
8660: PUSH
8661: LD_INT 100
8663: MUL
8664: PUSH
8665: LD_INT 12
8667: PLUS
8668: PPUSH
8669: CALL_OW 110
8673: AND
8674: IFFALSE 8746
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
8676: LD_VAR 0 3
8680: PUSH
8681: LD_INT 100
8683: MUL
8684: PUSH
8685: LD_VAR 0 4
8689: PUSH
8690: LD_INT 10
8692: MUL
8693: PLUS
8694: PUSH
8695: LD_INT 22
8697: PLUS
8698: PPUSH
8699: LD_VAR 0 2
8703: PPUSH
8704: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8708: LD_VAR 0 3
8712: PUSH
8713: LD_INT 100
8715: MUL
8716: PUSH
8717: LD_INT 12
8719: PLUS
8720: PPUSH
8721: LD_INT 0
8723: PPUSH
8724: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8728: LD_ADDR_EXP 46
8732: PUSH
8733: LD_EXP 46
8737: PUSH
8738: LD_VAR 0 1
8742: DIFF
8743: ST_TO_ADDR
// break ;
8744: GO 8748
// end ;
8746: GO 8629
8748: POP
8749: POP
// Update_Artefact ( lab ) ;
8750: LD_VAR 0 1
8754: PPUSH
8755: CALL 10389 0 1
// end ;
8759: PPOPN 4
8761: END
// on SpecResearchComplete ( lab ) do var un , side ;
8762: LD_INT 0
8764: PPUSH
8765: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8766: LD_ADDR_VAR 0 3
8770: PUSH
8771: LD_VAR 0 1
8775: PPUSH
8776: CALL_OW 255
8780: PUSH
8781: LD_INT 1
8783: MINUS
8784: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8785: LD_ADDR_VAR 0 2
8789: PUSH
8790: DOUBLE
8791: LD_INT 0
8793: DEC
8794: ST_TO_ADDR
8795: LD_EXP 43
8799: PUSH
8800: LD_INT 1
8802: MINUS
8803: PUSH
8804: FOR_TO
8805: IFFALSE 8951
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8807: LD_VAR 0 2
8811: PUSH
8812: LD_INT 100
8814: MUL
8815: PUSH
8816: LD_INT 11
8818: PLUS
8819: PPUSH
8820: CALL_OW 110
8824: PUSH
8825: LD_VAR 0 1
8829: EQUAL
8830: PUSH
8831: LD_VAR 0 2
8835: PUSH
8836: LD_INT 100
8838: MUL
8839: PUSH
8840: LD_INT 12
8842: PLUS
8843: PPUSH
8844: CALL_OW 110
8848: AND
8849: IFFALSE 8949
// begin SetTag ( un * 100 + 12 , false ) ;
8851: LD_VAR 0 2
8855: PUSH
8856: LD_INT 100
8858: MUL
8859: PUSH
8860: LD_INT 12
8862: PLUS
8863: PPUSH
8864: LD_INT 0
8866: PPUSH
8867: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
8871: LD_VAR 0 2
8875: PUSH
8876: LD_INT 100
8878: MUL
8879: PUSH
8880: LD_VAR 0 3
8884: PUSH
8885: LD_INT 10
8887: MUL
8888: PLUS
8889: PUSH
8890: LD_INT 21
8892: PLUS
8893: PPUSH
8894: LD_INT 1
8896: PPUSH
8897: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
8901: LD_VAR 0 2
8905: PUSH
8906: LD_INT 100
8908: MUL
8909: PUSH
8910: LD_VAR 0 3
8914: PUSH
8915: LD_INT 10
8917: MUL
8918: PLUS
8919: PUSH
8920: LD_INT 25
8922: PLUS
8923: PPUSH
8924: LD_VAR 0 1
8928: PPUSH
8929: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8933: LD_ADDR_EXP 46
8937: PUSH
8938: LD_EXP 46
8942: PUSH
8943: LD_VAR 0 1
8947: DIFF
8948: ST_TO_ADDR
// end ;
8949: GO 8804
8951: POP
8952: POP
// Update_Artefact ( lab ) ;
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL 10389 0 1
// end ;
8962: PPOPN 3
8964: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
8965: LD_INT 0
8967: PPUSH
8968: PPUSH
8969: PPUSH
8970: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
8971: LD_ADDR_VAR 0 7
8975: PUSH
8976: LD_VAR 0 2
8980: PUSH
8981: LD_INT 1
8983: MINUS
8984: PUSH
8985: LD_INT 3
8987: MOD
8988: PUSH
8989: LD_INT 1
8991: PLUS
8992: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8993: LD_ADDR_VAR 0 8
8997: PUSH
8998: LD_VAR 0 7
9002: PUSH
9003: LD_INT 1
9005: MINUS
9006: PUSH
9007: LD_INT 100
9009: MUL
9010: ST_TO_ADDR
// if number <= 3 then
9011: LD_VAR 0 2
9015: PUSH
9016: LD_INT 3
9018: LESSEQUAL
9019: IFFALSE 9251
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
9021: LD_VAR 0 8
9025: PUSH
9026: LD_INT 11
9028: PLUS
9029: PPUSH
9030: CALL_OW 110
9034: PPUSH
9035: LD_VAR 0 8
9039: PUSH
9040: LD_INT 5
9042: PLUS
9043: PPUSH
9044: CALL_OW 110
9048: PPUSH
9049: LD_INT 1
9051: PPUSH
9052: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
9056: LD_VAR 0 8
9060: PUSH
9061: LD_INT 11
9063: PLUS
9064: PPUSH
9065: CALL_OW 110
9069: PPUSH
9070: LD_VAR 0 8
9074: PUSH
9075: LD_VAR 0 1
9079: PUSH
9080: LD_INT 10
9082: MUL
9083: PLUS
9084: PUSH
9085: LD_INT 12
9087: PLUS
9088: PPUSH
9089: CALL_OW 110
9093: PPUSH
9094: CALL_OW 329
// SetTag ( base + 12 , true ) ;
9098: LD_VAR 0 8
9102: PUSH
9103: LD_INT 12
9105: PLUS
9106: PPUSH
9107: LD_INT 1
9109: PPUSH
9110: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
9114: LD_ADDR_EXP 46
9118: PUSH
9119: LD_EXP 46
9123: PUSH
9124: LD_VAR 0 8
9128: PUSH
9129: LD_INT 11
9131: PLUS
9132: PPUSH
9133: CALL_OW 110
9137: ADD
9138: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9139: LD_ADDR_VAR 0 5
9143: PUSH
9144: DOUBLE
9145: LD_INT 0
9147: DEC
9148: ST_TO_ADDR
9149: LD_EXP 43
9153: PUSH
9154: LD_INT 1
9156: MINUS
9157: PUSH
9158: FOR_TO
9159: IFFALSE 9247
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9161: LD_VAR 0 8
9165: PUSH
9166: LD_INT 11
9168: PLUS
9169: PPUSH
9170: CALL_OW 110
9174: PUSH
9175: LD_VAR 0 5
9179: PUSH
9180: LD_INT 100
9182: MUL
9183: PUSH
9184: LD_INT 11
9186: PLUS
9187: PPUSH
9188: CALL_OW 110
9192: PUSH
9193: LD_VAR 0 5
9197: PUSH
9198: LD_INT 100
9200: MUL
9201: PUSH
9202: LD_VAR 0 1
9206: PUSH
9207: LD_INT 10
9209: MUL
9210: PLUS
9211: PUSH
9212: LD_INT 15
9214: PLUS
9215: PPUSH
9216: CALL_OW 110
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: IN
9225: IFFALSE 9245
// DeInit_Lab ( side , un + 1 ) ;
9227: LD_VAR 0 1
9231: PPUSH
9232: LD_VAR 0 5
9236: PUSH
9237: LD_INT 1
9239: PLUS
9240: PPUSH
9241: CALL 10250 0 2
9245: GO 9158
9247: POP
9248: POP
// end else
9249: GO 9425
// begin succes := false ;
9251: LD_ADDR_VAR 0 6
9255: PUSH
9256: LD_INT 0
9258: ST_TO_ADDR
// case art of 1 :
9259: LD_VAR 0 7
9263: PUSH
9264: LD_INT 1
9266: DOUBLE
9267: EQUAL
9268: IFTRUE 9272
9270: GO 9300
9272: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
9273: LD_ADDR_VAR 0 6
9277: PUSH
9278: LD_VAR 0 1
9282: PPUSH
9283: LD_VAR 0 3
9287: PPUSH
9288: LD_VAR 0 4
9292: PPUSH
9293: CALL 10822 0 3
9297: ST_TO_ADDR
9298: GO 9368
9300: LD_INT 2
9302: DOUBLE
9303: EQUAL
9304: IFTRUE 9308
9306: GO 9331
9308: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
9309: LD_ADDR_VAR 0 6
9313: PUSH
9314: LD_VAR 0 1
9318: PPUSH
9319: LD_VAR 0 3
9323: PPUSH
9324: CALL 11060 0 2
9328: ST_TO_ADDR
9329: GO 9368
9331: LD_INT 3
9333: DOUBLE
9334: EQUAL
9335: IFTRUE 9339
9337: GO 9367
9339: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
9340: LD_ADDR_VAR 0 6
9344: PUSH
9345: LD_VAR 0 1
9349: PPUSH
9350: LD_VAR 0 3
9354: PPUSH
9355: LD_VAR 0 4
9359: PPUSH
9360: CALL 11456 0 3
9364: ST_TO_ADDR
9365: GO 9368
9367: POP
// if succes then
9368: LD_VAR 0 6
9372: IFFALSE 9425
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
9374: LD_VAR 0 8
9378: PUSH
9379: LD_VAR 0 1
9383: PUSH
9384: LD_INT 10
9386: MUL
9387: PLUS
9388: PUSH
9389: LD_INT 13
9391: PLUS
9392: PPUSH
9393: LD_VAR 0 8
9397: PUSH
9398: LD_INT 7
9400: PLUS
9401: PPUSH
9402: CALL_OW 110
9406: PPUSH
9407: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
9411: LD_VAR 0 1
9415: PPUSH
9416: LD_VAR 0 7
9420: PPUSH
9421: CALL 9428 0 2
// end ; end ; end ;
9425: PPOPN 8
9427: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
// base := ( art - 1 ) * 100 ;
9433: LD_ADDR_VAR 0 4
9437: PUSH
9438: LD_VAR 0 2
9442: PUSH
9443: LD_INT 1
9445: MINUS
9446: PUSH
9447: LD_INT 100
9449: MUL
9450: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9451: LD_ADDR_VAR 0 5
9455: PUSH
9456: LD_VAR 0 4
9460: PUSH
9461: LD_VAR 0 1
9465: PUSH
9466: LD_INT 10
9468: MUL
9469: PLUS
9470: PUSH
9471: LD_INT 15
9473: PLUS
9474: PPUSH
9475: CALL_OW 110
9479: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
9480: LD_VAR 0 5
9484: PUSH
9485: LD_VAR 0 5
9489: PUSH
9490: LD_EXP 46
9494: IN
9495: NOT
9496: AND
9497: IFFALSE 9555
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
9499: LD_VAR 0 1
9503: PPUSH
9504: LD_VAR 0 4
9508: PUSH
9509: LD_INT 1
9511: PLUS
9512: PUSH
9513: LD_VAR 0 4
9517: PUSH
9518: LD_VAR 0 1
9522: PUSH
9523: LD_INT 10
9525: MUL
9526: PLUS
9527: PUSH
9528: LD_INT 11
9530: PLUS
9531: PPUSH
9532: CALL_OW 110
9536: PLUS
9537: PPUSH
9538: CALL_OW 110
9542: PPUSH
9543: LD_INT 1
9545: PPUSH
9546: LD_VAR 0 5
9550: PPUSH
9551: CALL_OW 468
// end ;
9555: LD_VAR 0 3
9559: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
9560: LD_INT 0
9562: PPUSH
9563: PPUSH
9564: PPUSH
// base := ( art - 1 ) * 100 ;
9565: LD_ADDR_VAR 0 4
9569: PUSH
9570: LD_VAR 0 2
9574: PUSH
9575: LD_INT 1
9577: MINUS
9578: PUSH
9579: LD_INT 100
9581: MUL
9582: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9583: LD_ADDR_VAR 0 5
9587: PUSH
9588: LD_VAR 0 4
9592: PUSH
9593: LD_VAR 0 1
9597: PUSH
9598: LD_INT 10
9600: MUL
9601: PLUS
9602: PUSH
9603: LD_INT 15
9605: PLUS
9606: PPUSH
9607: CALL_OW 110
9611: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
9612: LD_VAR 0 5
9616: PUSH
9617: LD_VAR 0 5
9621: PUSH
9622: LD_EXP 46
9626: IN
9627: NOT
9628: AND
9629: PUSH
9630: LD_VAR 0 5
9634: PPUSH
9635: CALL_OW 313
9639: AND
9640: IFFALSE 9709
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
9642: LD_VAR 0 1
9646: PPUSH
9647: LD_VAR 0 4
9651: PUSH
9652: LD_INT 1
9654: PLUS
9655: PUSH
9656: LD_VAR 0 4
9660: PUSH
9661: LD_VAR 0 1
9665: PUSH
9666: LD_INT 10
9668: MUL
9669: PLUS
9670: PUSH
9671: LD_INT 11
9673: PLUS
9674: PPUSH
9675: CALL_OW 110
9679: PLUS
9680: PPUSH
9681: CALL_OW 110
9685: PPUSH
9686: LD_VAR 0 4
9690: PUSH
9691: LD_INT 3
9693: PLUS
9694: PPUSH
9695: CALL_OW 110
9699: PPUSH
9700: LD_VAR 0 5
9704: PPUSH
9705: CALL_OW 468
// end ;
9709: LD_VAR 0 3
9713: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9714: LD_INT 0
9716: PPUSH
9717: PPUSH
9718: PPUSH
9719: PPUSH
9720: PPUSH
9721: PPUSH
9722: PPUSH
9723: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9724: LD_ADDR_VAR 0 8
9728: PUSH
9729: LD_EXP 45
9733: PUSH
9734: LD_VAR 0 1
9738: ARRAY
9739: PPUSH
9740: CALL_OW 469
9744: ST_TO_ADDR
// if not art_hex then
9745: LD_VAR 0 8
9749: NOT
9750: IFFALSE 9754
// exit ;
9752: GO 10245
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9754: LD_ADDR_VAR 0 3
9758: PUSH
9759: LD_INT 2
9761: PUSH
9762: LD_INT 30
9764: PUSH
9765: LD_INT 6
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 30
9774: PUSH
9775: LD_INT 7
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 30
9784: PUSH
9785: LD_INT 8
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: PUSH
9798: EMPTY
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9806: LD_ADDR_VAR 0 9
9810: PUSH
9811: LD_VAR 0 3
9815: PPUSH
9816: LD_VAR 0 8
9820: PUSH
9821: LD_INT 1
9823: ARRAY
9824: PPUSH
9825: LD_VAR 0 8
9829: PUSH
9830: LD_INT 2
9832: ARRAY
9833: PPUSH
9834: CALL_OW 73
9838: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9839: LD_ADDR_VAR 0 6
9843: PUSH
9844: LD_VAR 0 9
9848: PPUSH
9849: LD_VAR 0 8
9853: PUSH
9854: LD_INT 1
9856: ARRAY
9857: PPUSH
9858: LD_VAR 0 8
9862: PUSH
9863: LD_INT 2
9865: ARRAY
9866: PPUSH
9867: CALL_OW 297
9871: ST_TO_ADDR
// if dist < 9 then
9872: LD_VAR 0 6
9876: PUSH
9877: LD_INT 9
9879: LESS
9880: IFFALSE 10245
// begin side := GetSide ( nearest_lab ) ;
9882: LD_ADDR_VAR 0 4
9886: PUSH
9887: LD_VAR 0 9
9891: PPUSH
9892: CALL_OW 255
9896: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
9897: LD_VAR 0 4
9901: PPUSH
9902: LD_VAR 0 1
9906: PPUSH
9907: CALL 10250 0 2
// base := ( art - 1 ) * 100 ;
9911: LD_ADDR_VAR 0 5
9915: PUSH
9916: LD_VAR 0 1
9920: PUSH
9921: LD_INT 1
9923: MINUS
9924: PUSH
9925: LD_INT 100
9927: MUL
9928: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
9929: LD_INT 24
9931: PPUSH
9932: LD_VAR 0 4
9936: PPUSH
9937: CALL_OW 321
9941: PUSH
9942: LD_INT 2
9944: EQUAL
9945: PUSH
9946: LD_VAR 0 9
9950: PPUSH
9951: CALL_OW 313
9955: AND
9956: IFFALSE 10148
// begin if GetTag ( base + side * 10 + 11 ) then
9958: LD_VAR 0 5
9962: PUSH
9963: LD_VAR 0 4
9967: PUSH
9968: LD_INT 10
9970: MUL
9971: PLUS
9972: PUSH
9973: LD_INT 11
9975: PLUS
9976: PPUSH
9977: CALL_OW 110
9981: IFFALSE 10138
// begin if not GetTag ( base + side * 10 + 13 ) then
9983: LD_VAR 0 5
9987: PUSH
9988: LD_VAR 0 4
9992: PUSH
9993: LD_INT 10
9995: MUL
9996: PLUS
9997: PUSH
9998: LD_INT 13
10000: PLUS
10001: PPUSH
10002: CALL_OW 110
10006: NOT
10007: IFFALSE 10030
// state := GetTag ( base + 03 ) else
10009: LD_ADDR_VAR 0 7
10013: PUSH
10014: LD_VAR 0 5
10018: PUSH
10019: LD_INT 3
10021: PLUS
10022: PPUSH
10023: CALL_OW 110
10027: ST_TO_ADDR
10028: GO 10038
// state := art_gray ;
10030: LD_ADDR_VAR 0 7
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
10038: LD_VAR 0 5
10042: PUSH
10043: LD_VAR 0 4
10047: PUSH
10048: LD_INT 10
10050: MUL
10051: PLUS
10052: PUSH
10053: LD_INT 15
10055: PLUS
10056: PPUSH
10057: CALL_OW 110
10061: PUSH
10062: LD_VAR 0 5
10066: PUSH
10067: LD_VAR 0 4
10071: PUSH
10072: LD_INT 10
10074: MUL
10075: PLUS
10076: PUSH
10077: LD_INT 15
10079: PLUS
10080: PPUSH
10081: CALL_OW 110
10085: PUSH
10086: LD_VAR 0 9
10090: NONEQUAL
10091: AND
10092: IFFALSE 10108
// DeInit_Lab ( side , art ) ;
10094: LD_VAR 0 4
10098: PPUSH
10099: LD_VAR 0 1
10103: PPUSH
10104: CALL 10250 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
10108: LD_VAR 0 5
10112: PUSH
10113: LD_VAR 0 4
10117: PUSH
10118: LD_INT 10
10120: MUL
10121: PLUS
10122: PUSH
10123: LD_INT 15
10125: PLUS
10126: PPUSH
10127: LD_VAR 0 9
10131: PPUSH
10132: CALL_OW 109
// end else
10136: GO 10146
// state := art_instant ;
10138: LD_ADDR_VAR 0 7
10142: PUSH
10143: LD_INT 2
10145: ST_TO_ADDR
// end else
10146: GO 10156
// state := art_gray ;
10148: LD_ADDR_VAR 0 7
10152: PUSH
10153: LD_INT 1
10155: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
10156: LD_VAR 0 5
10160: PUSH
10161: LD_INT 11
10163: PLUS
10164: PPUSH
10165: LD_VAR 0 9
10169: PPUSH
10170: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
10174: LD_VAR 0 9
10178: PUSH
10179: LD_EXP 46
10183: IN
10184: NOT
10185: IFFALSE 10245
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
10187: LD_VAR 0 4
10191: PPUSH
10192: LD_VAR 0 5
10196: PUSH
10197: LD_INT 1
10199: PLUS
10200: PUSH
10201: LD_VAR 0 5
10205: PUSH
10206: LD_VAR 0 4
10210: PUSH
10211: LD_INT 10
10213: MUL
10214: PLUS
10215: PUSH
10216: LD_INT 11
10218: PLUS
10219: PPUSH
10220: CALL_OW 110
10224: PLUS
10225: PPUSH
10226: CALL_OW 110
10230: PPUSH
10231: LD_VAR 0 7
10235: PPUSH
10236: LD_VAR 0 9
10240: PPUSH
10241: CALL_OW 468
// end ; end ;
10245: LD_VAR 0 2
10249: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
10250: LD_INT 0
10252: PPUSH
10253: PPUSH
10254: PPUSH
// base := ( art - 1 ) * 100 ;
10255: LD_ADDR_VAR 0 4
10259: PUSH
10260: LD_VAR 0 2
10264: PUSH
10265: LD_INT 1
10267: MINUS
10268: PUSH
10269: LD_INT 100
10271: MUL
10272: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
10273: LD_ADDR_VAR 0 5
10277: PUSH
10278: LD_VAR 0 4
10282: PUSH
10283: LD_VAR 0 1
10287: PUSH
10288: LD_INT 10
10290: MUL
10291: PLUS
10292: PUSH
10293: LD_INT 15
10295: PLUS
10296: PPUSH
10297: CALL_OW 110
10301: ST_TO_ADDR
// if not lab then
10302: LD_VAR 0 5
10306: NOT
10307: IFFALSE 10328
// lab := GetTag ( base + 11 ) ;
10309: LD_ADDR_VAR 0 5
10313: PUSH
10314: LD_VAR 0 4
10318: PUSH
10319: LD_INT 11
10321: PLUS
10322: PPUSH
10323: CALL_OW 110
10327: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
10328: LD_VAR 0 1
10332: PPUSH
10333: LD_VAR 0 4
10337: PUSH
10338: LD_INT 1
10340: PLUS
10341: PUSH
10342: LD_VAR 0 4
10346: PUSH
10347: LD_VAR 0 1
10351: PUSH
10352: LD_INT 10
10354: MUL
10355: PLUS
10356: PUSH
10357: LD_INT 11
10359: PLUS
10360: PPUSH
10361: CALL_OW 110
10365: PLUS
10366: PPUSH
10367: CALL_OW 110
10371: PPUSH
10372: LD_INT 0
10374: PPUSH
10375: LD_VAR 0 5
10379: PPUSH
10380: CALL_OW 468
// end ;
10384: LD_VAR 0 3
10388: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
10389: LD_INT 0
10391: PPUSH
10392: PPUSH
10393: PPUSH
10394: PPUSH
// side := GetSide ( lab ) ;
10395: LD_ADDR_VAR 0 4
10399: PUSH
10400: LD_VAR 0 1
10404: PPUSH
10405: CALL_OW 255
10409: ST_TO_ADDR
// for art = 1 to artefact_number do
10410: LD_ADDR_VAR 0 3
10414: PUSH
10415: DOUBLE
10416: LD_INT 1
10418: DEC
10419: ST_TO_ADDR
10420: LD_EXP 43
10424: PUSH
10425: FOR_TO
10426: IFFALSE 10582
// begin base := ( art - 1 ) * 100 ;
10428: LD_ADDR_VAR 0 5
10432: PUSH
10433: LD_VAR 0 3
10437: PUSH
10438: LD_INT 1
10440: MINUS
10441: PUSH
10442: LD_INT 100
10444: MUL
10445: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
10446: LD_VAR 0 5
10450: PUSH
10451: LD_INT 11
10453: PLUS
10454: PPUSH
10455: CALL_OW 110
10459: PUSH
10460: LD_VAR 0 1
10464: EQUAL
10465: IFFALSE 10478
// Init_Lab ( art ) else
10467: LD_VAR 0 3
10471: PPUSH
10472: CALL 9714 0 1
10476: GO 10580
// begin if lab = GetTag ( base + side * 10 + 15 ) then
10478: LD_VAR 0 1
10482: PUSH
10483: LD_VAR 0 5
10487: PUSH
10488: LD_VAR 0 4
10492: PUSH
10493: LD_INT 10
10495: MUL
10496: PLUS
10497: PUSH
10498: LD_INT 15
10500: PLUS
10501: PPUSH
10502: CALL_OW 110
10506: EQUAL
10507: IFFALSE 10580
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
10509: LD_VAR 0 5
10513: PUSH
10514: LD_VAR 0 4
10518: PUSH
10519: LD_INT 10
10521: MUL
10522: PLUS
10523: PUSH
10524: LD_INT 13
10526: PLUS
10527: PPUSH
10528: CALL_OW 110
10532: PUSH
10533: LD_INT 0
10535: GREATER
10536: PUSH
10537: LD_VAR 0 1
10541: PPUSH
10542: CALL_OW 313
10546: NOT
10547: OR
10548: IFFALSE 10566
// Shadow_Artefact ( side , art ) else
10550: LD_VAR 0 4
10554: PPUSH
10555: LD_VAR 0 3
10559: PPUSH
10560: CALL 9428 0 2
10564: GO 10580
// Highlight_Artefact ( side , art ) ;
10566: LD_VAR 0 4
10570: PPUSH
10571: LD_VAR 0 3
10575: PPUSH
10576: CALL 9560 0 2
// end ; end ; end ;
10580: GO 10425
10582: POP
10583: POP
// end ; end_of_file
10584: LD_VAR 0 2
10588: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
10589: LD_INT 10
10591: PPUSH
10592: CALL_OW 67
// if not IsBusy ( lab ) then
10596: LD_VAR 0 2
10600: PPUSH
10601: CALL_OW 315
10605: NOT
10606: IFFALSE 10633
// begin labs_in_use := labs_in_use diff lab ;
10608: LD_ADDR_EXP 46
10612: PUSH
10613: LD_EXP 46
10617: PUSH
10618: LD_VAR 0 2
10622: DIFF
10623: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10624: LD_VAR 0 2
10628: PPUSH
10629: CALL 10389 0 1
// end ; end ;
10633: PPOPN 2
10635: END
// on ResearchStarted ( tech , lab ) do var un , side ;
10636: LD_INT 0
10638: PPUSH
10639: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
10640: LD_ADDR_EXP 46
10644: PUSH
10645: LD_EXP 46
10649: PUSH
10650: LD_VAR 0 2
10654: ADD
10655: ST_TO_ADDR
// side := GetSide ( lab ) ;
10656: LD_ADDR_VAR 0 4
10660: PUSH
10661: LD_VAR 0 2
10665: PPUSH
10666: CALL_OW 255
10670: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
10671: LD_ADDR_VAR 0 3
10675: PUSH
10676: DOUBLE
10677: LD_INT 0
10679: DEC
10680: ST_TO_ADDR
10681: LD_EXP 43
10685: PUSH
10686: LD_INT 1
10688: MINUS
10689: PUSH
10690: FOR_TO
10691: IFFALSE 10770
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10693: LD_VAR 0 2
10697: PUSH
10698: LD_VAR 0 3
10702: PUSH
10703: LD_INT 100
10705: MUL
10706: PUSH
10707: LD_INT 11
10709: PLUS
10710: PPUSH
10711: CALL_OW 110
10715: PUSH
10716: LD_VAR 0 3
10720: PUSH
10721: LD_INT 100
10723: MUL
10724: PUSH
10725: LD_VAR 0 4
10729: PUSH
10730: LD_INT 10
10732: MUL
10733: PLUS
10734: PUSH
10735: LD_INT 15
10737: PLUS
10738: PPUSH
10739: CALL_OW 110
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: IN
10748: IFFALSE 10768
// DeInit_Lab ( side , un + 1 ) ;
10750: LD_VAR 0 4
10754: PPUSH
10755: LD_VAR 0 3
10759: PUSH
10760: LD_INT 1
10762: PLUS
10763: PPUSH
10764: CALL 10250 0 2
10768: GO 10690
10770: POP
10771: POP
// end ;
10772: PPOPN 4
10774: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10775: LD_INT 10
10777: PPUSH
10778: CALL_OW 67
// if not IsBusy ( lab ) then
10782: LD_VAR 0 2
10786: PPUSH
10787: CALL_OW 315
10791: NOT
10792: IFFALSE 10819
// begin labs_in_use := labs_in_use diff lab ;
10794: LD_ADDR_EXP 46
10798: PUSH
10799: LD_EXP 46
10803: PUSH
10804: LD_VAR 0 2
10808: DIFF
10809: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10810: LD_VAR 0 2
10814: PPUSH
10815: CALL 10389 0 1
// end ; end ; end_of_file
10819: PPOPN 2
10821: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10822: LD_INT 0
10824: PPUSH
10825: PPUSH
10826: PPUSH
// vysledek := true ;
10827: LD_ADDR_VAR 0 5
10831: PUSH
10832: LD_INT 1
10834: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
10835: LD_ADDR_VAR 0 6
10839: PUSH
10840: LD_VAR 0 1
10844: PUSH
10845: LD_INT 10
10847: MUL
10848: PUSH
10849: LD_INT 15
10851: PLUS
10852: PPUSH
10853: CALL_OW 110
10857: PPUSH
10858: CALL_OW 274
10862: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
10863: LD_VAR 0 6
10867: PUSH
10868: LD_VAR 0 6
10872: PPUSH
10873: CALL_OW 279
10877: PUSH
10878: LD_INT 3
10880: ARRAY
10881: PUSH
10882: LD_INT 6
10884: PPUSH
10885: CALL_OW 110
10889: GREATEREQUAL
10890: AND
10891: IFFALSE 10981
// begin PlaceSeeing ( x , y , side , - 15 ) ;
10893: LD_VAR 0 2
10897: PPUSH
10898: LD_VAR 0 3
10902: PPUSH
10903: LD_VAR 0 1
10907: PPUSH
10908: LD_INT 15
10910: NEG
10911: PPUSH
10912: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
10916: LD_VAR 0 6
10920: PPUSH
10921: LD_INT 3
10923: PPUSH
10924: LD_VAR 0 6
10928: PPUSH
10929: CALL_OW 279
10933: PUSH
10934: LD_INT 3
10936: ARRAY
10937: PUSH
10938: LD_INT 6
10940: PPUSH
10941: CALL_OW 110
10945: MINUS
10946: PPUSH
10947: CALL_OW 277
// view_data := [ x , y , side ] ;
10951: LD_ADDR_LOC 12
10955: PUSH
10956: LD_VAR 0 2
10960: PUSH
10961: LD_VAR 0 3
10965: PUSH
10966: LD_VAR 0 1
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: LIST
10975: ST_TO_ADDR
// enable ( 1 ) ;
10976: LD_INT 1
10978: ENABLE_MARKED
// end else
10979: GO 10989
// vysledek := false ;
10981: LD_ADDR_VAR 0 5
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// result := vysledek ;
10989: LD_ADDR_VAR 0 4
10993: PUSH
10994: LD_VAR 0 5
10998: ST_TO_ADDR
// end ;
10999: LD_VAR 0 4
11003: RET
// every 0 0$2 trigger view_data marked 1 do
11004: LD_LOC 12
11008: IFFALSE 11059
11010: GO 11012
11012: DISABLE
// begin wait ( 0 0$30 ) ;
11013: LD_INT 1050
11015: PPUSH
11016: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
11020: LD_LOC 12
11024: PUSH
11025: LD_INT 1
11027: ARRAY
11028: PPUSH
11029: LD_LOC 12
11033: PUSH
11034: LD_INT 2
11036: ARRAY
11037: PPUSH
11038: LD_LOC 12
11042: PUSH
11043: LD_INT 3
11045: ARRAY
11046: PPUSH
11047: CALL_OW 331
// view_data := 0 ;
11051: LD_ADDR_LOC 12
11055: PUSH
11056: LD_INT 0
11058: ST_TO_ADDR
// end ;
11059: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
11060: LD_INT 0
11062: PPUSH
11063: PPUSH
11064: PPUSH
11065: PPUSH
11066: PPUSH
11067: PPUSH
11068: PPUSH
11069: PPUSH
// vysledek := true ;
11070: LD_ADDR_VAR 0 4
11074: PUSH
11075: LD_INT 1
11077: ST_TO_ADDR
// it_can := false ;
11078: LD_ADDR_VAR 0 8
11082: PUSH
11083: LD_INT 0
11085: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
11086: LD_ADDR_VAR 0 9
11090: PUSH
11091: LD_INT 30
11093: PUSH
11094: LD_INT 28
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
11101: LD_ADDR_VAR 0 10
11105: PUSH
11106: LD_INT 8
11108: PUSH
11109: LD_INT 48
11111: PUSH
11112: LD_INT 29
11114: PUSH
11115: LD_INT 49
11117: PUSH
11118: LD_INT 10
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
11128: LD_ADDR_VAR 0 7
11132: PUSH
11133: LD_VAR 0 2
11137: PPUSH
11138: CALL_OW 247
11142: PUSH
11143: LD_INT 3
11145: EQUAL
11146: PUSH
11147: LD_VAR 0 2
11151: PPUSH
11152: CALL_OW 266
11156: PUSH
11157: LD_VAR 0 9
11161: IN
11162: PUSH
11163: LD_VAR 0 2
11167: PPUSH
11168: CALL_OW 269
11172: PUSH
11173: LD_VAR 0 10
11177: IN
11178: OR
11179: AND
11180: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
11181: LD_ADDR_VAR 0 6
11185: PUSH
11186: LD_VAR 0 2
11190: PPUSH
11191: CALL_OW 247
11195: PUSH
11196: LD_INT 2
11198: EQUAL
11199: PUSH
11200: LD_VAR 0 2
11204: PPUSH
11205: CALL_OW 264
11209: PUSH
11210: LD_VAR 0 10
11214: IN
11215: PUSH
11216: LD_VAR 0 2
11220: PPUSH
11221: CALL_OW 262
11225: PUSH
11226: LD_INT 3
11228: EQUAL
11229: OR
11230: AND
11231: ST_TO_ADDR
// case def_artefact_two of 1 :
11232: LD_EXP 2
11236: PUSH
11237: LD_INT 1
11239: DOUBLE
11240: EQUAL
11241: IFTRUE 11245
11243: GO 11262
11245: POP
// if b_can then
11246: LD_VAR 0 7
11250: IFFALSE 11260
// it_can := true ; 2 :
11252: LD_ADDR_VAR 0 8
11256: PUSH
11257: LD_INT 1
11259: ST_TO_ADDR
11260: GO 11319
11262: LD_INT 2
11264: DOUBLE
11265: EQUAL
11266: IFTRUE 11270
11268: GO 11287
11270: POP
// if v_can then
11271: LD_VAR 0 6
11275: IFFALSE 11285
// it_can := true ; 3 :
11277: LD_ADDR_VAR 0 8
11281: PUSH
11282: LD_INT 1
11284: ST_TO_ADDR
11285: GO 11319
11287: LD_INT 3
11289: DOUBLE
11290: EQUAL
11291: IFTRUE 11295
11293: GO 11318
11295: POP
// if b_can or v_can then
11296: LD_VAR 0 7
11300: PUSH
11301: LD_VAR 0 6
11305: OR
11306: IFFALSE 11316
// it_can := true ; end ;
11308: LD_ADDR_VAR 0 8
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
11316: GO 11319
11318: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
11319: LD_ADDR_VAR 0 5
11323: PUSH
11324: LD_INT 100
11326: PUSH
11327: LD_VAR 0 1
11331: PUSH
11332: LD_INT 10
11334: MUL
11335: PLUS
11336: PUSH
11337: LD_INT 15
11339: PLUS
11340: PPUSH
11341: CALL_OW 110
11345: PPUSH
11346: CALL_OW 274
11350: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
11351: LD_VAR 0 5
11355: PUSH
11356: LD_VAR 0 8
11360: AND
11361: PUSH
11362: LD_VAR 0 5
11366: PPUSH
11367: CALL_OW 279
11371: PUSH
11372: LD_INT 3
11374: ARRAY
11375: PUSH
11376: LD_INT 106
11378: PPUSH
11379: CALL_OW 110
11383: GREATEREQUAL
11384: AND
11385: IFFALSE 11433
// begin KillUnit ( un ) ;
11387: LD_VAR 0 2
11391: PPUSH
11392: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
11396: LD_VAR 0 5
11400: PPUSH
11401: LD_INT 3
11403: PPUSH
11404: LD_VAR 0 5
11408: PPUSH
11409: CALL_OW 279
11413: PUSH
11414: LD_INT 3
11416: ARRAY
11417: PUSH
11418: LD_INT 106
11420: PPUSH
11421: CALL_OW 110
11425: MINUS
11426: PPUSH
11427: CALL_OW 277
// end else
11431: GO 11441
// vysledek := false ;
11433: LD_ADDR_VAR 0 4
11437: PUSH
11438: LD_INT 0
11440: ST_TO_ADDR
// result := vysledek ;
11441: LD_ADDR_VAR 0 3
11445: PUSH
11446: LD_VAR 0 4
11450: ST_TO_ADDR
// end ;
11451: LD_VAR 0 3
11455: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
11456: LD_INT 0
11458: PPUSH
11459: PPUSH
11460: PPUSH
11461: PPUSH
// vysledek := true ;
11462: LD_ADDR_VAR 0 5
11466: PUSH
11467: LD_INT 1
11469: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
11470: LD_ADDR_VAR 0 7
11474: PUSH
11475: LD_INT 200
11477: PUSH
11478: LD_VAR 0 1
11482: PUSH
11483: LD_INT 10
11485: MUL
11486: PLUS
11487: PUSH
11488: LD_INT 15
11490: PLUS
11491: PPUSH
11492: CALL_OW 110
11496: PPUSH
11497: CALL_OW 274
11501: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
11502: LD_VAR 0 7
11506: PUSH
11507: LD_VAR 0 7
11511: PPUSH
11512: CALL_OW 279
11516: PUSH
11517: LD_INT 3
11519: ARRAY
11520: PUSH
11521: LD_INT 206
11523: PPUSH
11524: CALL_OW 110
11528: GREATEREQUAL
11529: AND
11530: IFFALSE 11586
// begin ArtContamination ( p1 , p2 , 15 ) ;
11532: LD_VAR 0 2
11536: PPUSH
11537: LD_VAR 0 3
11541: PPUSH
11542: LD_INT 15
11544: PPUSH
11545: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
11549: LD_VAR 0 7
11553: PPUSH
11554: LD_INT 3
11556: PPUSH
11557: LD_VAR 0 7
11561: PPUSH
11562: CALL_OW 279
11566: PUSH
11567: LD_INT 3
11569: ARRAY
11570: PUSH
11571: LD_INT 206
11573: PPUSH
11574: CALL_OW 110
11578: MINUS
11579: PPUSH
11580: CALL_OW 277
// end else
11584: GO 11594
// vysledek := false ;
11586: LD_ADDR_VAR 0 5
11590: PUSH
11591: LD_INT 0
11593: ST_TO_ADDR
// result := vysledek ;
11594: LD_ADDR_VAR 0 4
11598: PUSH
11599: LD_VAR 0 5
11603: ST_TO_ADDR
// end ;
11604: LD_VAR 0 4
11608: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
11609: GO 11611
11611: DISABLE
11612: LD_INT 0
11614: PPUSH
11615: PPUSH
11616: PPUSH
// begin for art = 0 to artefact_number do
11617: LD_ADDR_VAR 0 1
11621: PUSH
11622: DOUBLE
11623: LD_INT 0
11625: DEC
11626: ST_TO_ADDR
11627: LD_EXP 43
11631: PUSH
11632: FOR_TO
11633: IFFALSE 11767
// for side = 1 to Side_Positions do
11635: LD_ADDR_VAR 0 2
11639: PUSH
11640: DOUBLE
11641: LD_INT 1
11643: DEC
11644: ST_TO_ADDR
11645: LD_EXP 23
11649: PUSH
11650: FOR_TO
11651: IFFALSE 11763
// begin recharge := art * 100 + side * 10 + 13 ;
11653: LD_ADDR_VAR 0 3
11657: PUSH
11658: LD_VAR 0 1
11662: PUSH
11663: LD_INT 100
11665: MUL
11666: PUSH
11667: LD_VAR 0 2
11671: PUSH
11672: LD_INT 10
11674: MUL
11675: PLUS
11676: PUSH
11677: LD_INT 13
11679: PLUS
11680: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
11681: LD_EXP 23
11685: PUSH
11686: LD_VAR 0 2
11690: ARRAY
11691: PUSH
11692: LD_VAR 0 3
11696: PPUSH
11697: CALL_OW 110
11701: PUSH
11702: LD_INT 0
11704: GREATER
11705: AND
11706: IFFALSE 11761
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11708: LD_VAR 0 3
11712: PPUSH
11713: LD_VAR 0 3
11717: PPUSH
11718: CALL_OW 110
11722: PUSH
11723: LD_INT 1
11725: MINUS
11726: PPUSH
11727: CALL_OW 109
// if not GetTag ( recharge ) then
11731: LD_VAR 0 3
11735: PPUSH
11736: CALL_OW 110
11740: NOT
11741: IFFALSE 11761
// Highlight_Artefact ( side , art + 1 ) ;
11743: LD_VAR 0 2
11747: PPUSH
11748: LD_VAR 0 1
11752: PUSH
11753: LD_INT 1
11755: PLUS
11756: PPUSH
11757: CALL 9560 0 2
// end ; end ;
11761: GO 11650
11763: POP
11764: POP
11765: GO 11632
11767: POP
11768: POP
// enable ;
11769: ENABLE
// end ; end_of_file
11770: PPOPN 3
11772: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11773: LD_INT 0
11775: PPUSH
11776: PPUSH
11777: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11778: LD_INT 18
11780: PPUSH
11781: LD_VAR 0 1
11785: PUSH
11786: LD_INT 1
11788: ARRAY
11789: PPUSH
11790: LD_VAR 0 1
11794: PUSH
11795: LD_INT 2
11797: ARRAY
11798: PPUSH
11799: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11803: LD_VAR 0 1
11807: PUSH
11808: LD_INT 1
11810: ARRAY
11811: PPUSH
11812: LD_VAR 0 1
11816: PUSH
11817: LD_INT 2
11819: ARRAY
11820: PPUSH
11821: CALL_OW 494
// Wait ( 30 ) ;
11825: LD_INT 30
11827: PPUSH
11828: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
11832: LD_INT 18
11834: PPUSH
11835: LD_INT 4
11837: PPUSH
11838: CALL_OW 286
// base := ( art - 1 ) * 100 ;
11842: LD_ADDR_VAR 0 4
11846: PUSH
11847: LD_VAR 0 2
11851: PUSH
11852: LD_INT 1
11854: MINUS
11855: PUSH
11856: LD_INT 100
11858: MUL
11859: ST_TO_ADDR
// if GetTag ( base + 11 ) then
11860: LD_VAR 0 4
11864: PUSH
11865: LD_INT 11
11867: PLUS
11868: PPUSH
11869: CALL_OW 110
11873: IFFALSE 12011
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
11875: LD_ADDR_VAR 0 5
11879: PUSH
11880: LD_VAR 0 4
11884: PUSH
11885: LD_INT 11
11887: PLUS
11888: PPUSH
11889: CALL_OW 110
11893: PPUSH
11894: CALL_OW 255
11898: ST_TO_ADDR
// if GetTag ( base + 12 ) then
11899: LD_VAR 0 4
11903: PUSH
11904: LD_INT 12
11906: PLUS
11907: PPUSH
11908: CALL_OW 110
11912: IFFALSE 11955
// begin ComCancel ( GetTag ( base + 11 ) ) ;
11914: LD_VAR 0 4
11918: PUSH
11919: LD_INT 11
11921: PLUS
11922: PPUSH
11923: CALL_OW 110
11927: PPUSH
11928: CALL_OW 127
// Wait ( 10 ) ;
11932: LD_INT 10
11934: PPUSH
11935: CALL_OW 67
// SetTag ( base + 12 , false ) ;
11939: LD_VAR 0 4
11943: PUSH
11944: LD_INT 12
11946: PLUS
11947: PPUSH
11948: LD_INT 0
11950: PPUSH
11951: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
11955: LD_VAR 0 4
11959: PUSH
11960: LD_VAR 0 5
11964: PUSH
11965: LD_INT 10
11967: MUL
11968: PLUS
11969: PUSH
11970: LD_INT 11
11972: PLUS
11973: PPUSH
11974: CALL_OW 110
11978: NOT
11979: IFFALSE 11995
// DeInit_Lab ( side , art ) ;
11981: LD_VAR 0 5
11985: PPUSH
11986: LD_VAR 0 2
11990: PPUSH
11991: CALL 10250 0 2
// SetTag ( base + 11 , 0 ) ;
11995: LD_VAR 0 4
11999: PUSH
12000: LD_INT 11
12002: PLUS
12003: PPUSH
12004: LD_INT 0
12006: PPUSH
12007: CALL_OW 109
// end ; end ;
12011: LD_VAR 0 3
12015: RET
// every 0 0$5 marked 5 do var hex , un ;
12016: GO 12018
12018: DISABLE
12019: LD_INT 0
12021: PPUSH
12022: PPUSH
// begin wait ( 3 3$0 ) ;
12023: LD_INT 6300
12025: PPUSH
12026: CALL_OW 67
// if GetTag ( 09 ) then
12030: LD_INT 9
12032: PPUSH
12033: CALL_OW 110
12037: IFFALSE 12076
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
12039: LD_ADDR_VAR 0 1
12043: PUSH
12044: LD_INT 13
12046: PPUSH
12047: CALL_OW 110
12051: PPUSH
12052: CALL_OW 250
12056: PUSH
12057: LD_INT 13
12059: PPUSH
12060: CALL_OW 110
12064: PPUSH
12065: CALL_OW 251
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: ST_TO_ADDR
12074: GO 12095
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
12076: LD_ADDR_VAR 0 1
12080: PUSH
12081: LD_EXP 45
12085: PUSH
12086: LD_INT 1
12088: ARRAY
12089: PPUSH
12090: CALL_OW 469
12094: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12095: LD_VAR 0 1
12099: PUSH
12100: LD_INT 1
12102: ARRAY
12103: PPUSH
12104: LD_VAR 0 1
12108: PUSH
12109: LD_INT 2
12111: ARRAY
12112: PPUSH
12113: LD_INT 16
12115: PPUSH
12116: CALL_OW 309
12120: NOT
12121: IFFALSE 12398
// begin if GetTag ( 09 ) then
12123: LD_INT 9
12125: PPUSH
12126: CALL_OW 110
12130: IFFALSE 12177
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12132: LD_INT 13
12134: PPUSH
12135: CALL_OW 110
12139: PPUSH
12140: LD_INT 4
12142: PPUSH
12143: LD_EXP 45
12147: PUSH
12148: LD_INT 1
12150: ARRAY
12151: NEG
12152: PPUSH
12153: CALL_OW 290
// SetTag ( 09 , 0 ) ;
12157: LD_INT 9
12159: PPUSH
12160: LD_INT 0
12162: PPUSH
12163: CALL_OW 109
// SetTag ( 13 , 0 ) ;
12167: LD_INT 13
12169: PPUSH
12170: LD_INT 0
12172: PPUSH
12173: CALL_OW 109
// end ; DestroyArtefact ( hex , 1 ) ;
12177: LD_VAR 0 1
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL 11773 0 2
// wait ( 5 ) ;
12189: LD_INT 5
12191: PPUSH
12192: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12196: LD_ADDR_VAR 0 1
12200: PUSH
12201: LD_INT 16
12203: PPUSH
12204: LD_INT 0
12206: PPUSH
12207: CALL_OW 16
12211: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12212: LD_ADDR_VAR 0 2
12216: PUSH
12217: LD_VAR 0 1
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: PPUSH
12226: LD_VAR 0 1
12230: PUSH
12231: LD_INT 2
12233: ARRAY
12234: PPUSH
12235: CALL_OW 428
12239: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12240: LD_VAR 0 2
12244: PUSH
12245: LD_INT 0
12247: GREATER
12248: PUSH
12249: LD_VAR 0 2
12253: PPUSH
12254: CALL_OW 247
12258: PUSH
12259: LD_INT 3
12261: EQUAL
12262: AND
12263: IFFALSE 12307
// begin KillUnit ( un ) ;
12265: LD_VAR 0 2
12269: PPUSH
12270: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12274: LD_VAR 0 1
12278: PUSH
12279: LD_INT 1
12281: ARRAY
12282: PPUSH
12283: LD_VAR 0 1
12287: PUSH
12288: LD_INT 2
12290: ARRAY
12291: PPUSH
12292: CALL_OW 428
12296: IFFALSE 12307
// wait ( 10 ) ;
12298: LD_INT 10
12300: PPUSH
12301: CALL_OW 67
12305: GO 12274
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12307: LD_VAR 0 1
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PPUSH
12316: LD_VAR 0 1
12320: PUSH
12321: LD_INT 2
12323: ARRAY
12324: PPUSH
12325: CALL_OW 428
12329: NOT
12330: IFFALSE 12196
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12332: LD_VAR 0 1
12336: PUSH
12337: LD_INT 1
12339: ARRAY
12340: PPUSH
12341: LD_VAR 0 1
12345: PUSH
12346: LD_INT 2
12348: ARRAY
12349: PPUSH
12350: CALL_OW 494
// wait ( 30 ) ;
12354: LD_INT 30
12356: PPUSH
12357: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12361: LD_INT 4
12363: PPUSH
12364: LD_EXP 45
12368: PUSH
12369: LD_INT 1
12371: ARRAY
12372: PPUSH
12373: LD_VAR 0 1
12377: PUSH
12378: LD_INT 1
12380: ARRAY
12381: PPUSH
12382: LD_VAR 0 1
12386: PUSH
12387: LD_INT 2
12389: ARRAY
12390: PPUSH
12391: LD_INT 0
12393: PPUSH
12394: CALL_OW 58
// end ; enable ;
12398: ENABLE
// end ;
12399: PPOPN 2
12401: END
// every 0 0$5 marked 6 do var hex , un ;
12402: GO 12404
12404: DISABLE
12405: LD_INT 0
12407: PPUSH
12408: PPUSH
// begin wait ( 3 3$30 ) ;
12409: LD_INT 7350
12411: PPUSH
12412: CALL_OW 67
// if GetTag ( 109 ) then
12416: LD_INT 109
12418: PPUSH
12419: CALL_OW 110
12423: IFFALSE 12462
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
12425: LD_ADDR_VAR 0 1
12429: PUSH
12430: LD_INT 113
12432: PPUSH
12433: CALL_OW 110
12437: PPUSH
12438: CALL_OW 250
12442: PUSH
12443: LD_INT 113
12445: PPUSH
12446: CALL_OW 110
12450: PPUSH
12451: CALL_OW 251
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: ST_TO_ADDR
12460: GO 12481
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
12462: LD_ADDR_VAR 0 1
12466: PUSH
12467: LD_EXP 45
12471: PUSH
12472: LD_INT 2
12474: ARRAY
12475: PPUSH
12476: CALL_OW 469
12480: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12481: LD_VAR 0 1
12485: PUSH
12486: LD_INT 1
12488: ARRAY
12489: PPUSH
12490: LD_VAR 0 1
12494: PUSH
12495: LD_INT 2
12497: ARRAY
12498: PPUSH
12499: LD_INT 16
12501: PPUSH
12502: CALL_OW 309
12506: NOT
12507: IFFALSE 12784
// begin if GetTag ( 109 ) then
12509: LD_INT 109
12511: PPUSH
12512: CALL_OW 110
12516: IFFALSE 12563
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12518: LD_INT 113
12520: PPUSH
12521: CALL_OW 110
12525: PPUSH
12526: LD_INT 4
12528: PPUSH
12529: LD_EXP 45
12533: PUSH
12534: LD_INT 1
12536: ARRAY
12537: NEG
12538: PPUSH
12539: CALL_OW 290
// SetTag ( 109 , 0 ) ;
12543: LD_INT 109
12545: PPUSH
12546: LD_INT 0
12548: PPUSH
12549: CALL_OW 109
// SetTag ( 113 , 0 ) ;
12553: LD_INT 113
12555: PPUSH
12556: LD_INT 0
12558: PPUSH
12559: CALL_OW 109
// end ; DestroyArtefact ( hex , 2 ) ;
12563: LD_VAR 0 1
12567: PPUSH
12568: LD_INT 2
12570: PPUSH
12571: CALL 11773 0 2
// wait ( 5 ) ;
12575: LD_INT 5
12577: PPUSH
12578: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12582: LD_ADDR_VAR 0 1
12586: PUSH
12587: LD_INT 16
12589: PPUSH
12590: LD_INT 0
12592: PPUSH
12593: CALL_OW 16
12597: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12598: LD_ADDR_VAR 0 2
12602: PUSH
12603: LD_VAR 0 1
12607: PUSH
12608: LD_INT 1
12610: ARRAY
12611: PPUSH
12612: LD_VAR 0 1
12616: PUSH
12617: LD_INT 2
12619: ARRAY
12620: PPUSH
12621: CALL_OW 428
12625: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12626: LD_VAR 0 2
12630: PUSH
12631: LD_INT 0
12633: GREATER
12634: PUSH
12635: LD_VAR 0 2
12639: PPUSH
12640: CALL_OW 247
12644: PUSH
12645: LD_INT 3
12647: EQUAL
12648: AND
12649: IFFALSE 12693
// begin KillUnit ( un ) ;
12651: LD_VAR 0 2
12655: PPUSH
12656: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 1
12667: ARRAY
12668: PPUSH
12669: LD_VAR 0 1
12673: PUSH
12674: LD_INT 2
12676: ARRAY
12677: PPUSH
12678: CALL_OW 428
12682: IFFALSE 12693
// wait ( 10 ) ;
12684: LD_INT 10
12686: PPUSH
12687: CALL_OW 67
12691: GO 12660
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12693: LD_VAR 0 1
12697: PUSH
12698: LD_INT 1
12700: ARRAY
12701: PPUSH
12702: LD_VAR 0 1
12706: PUSH
12707: LD_INT 2
12709: ARRAY
12710: PPUSH
12711: CALL_OW 428
12715: NOT
12716: IFFALSE 12582
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12718: LD_VAR 0 1
12722: PUSH
12723: LD_INT 1
12725: ARRAY
12726: PPUSH
12727: LD_VAR 0 1
12731: PUSH
12732: LD_INT 2
12734: ARRAY
12735: PPUSH
12736: CALL_OW 494
// wait ( 30 ) ;
12740: LD_INT 30
12742: PPUSH
12743: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12747: LD_INT 4
12749: PPUSH
12750: LD_EXP 45
12754: PUSH
12755: LD_INT 2
12757: ARRAY
12758: PPUSH
12759: LD_VAR 0 1
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PPUSH
12768: LD_VAR 0 1
12772: PUSH
12773: LD_INT 2
12775: ARRAY
12776: PPUSH
12777: LD_INT 0
12779: PPUSH
12780: CALL_OW 58
// end ; enable ;
12784: ENABLE
// end ;
12785: PPOPN 2
12787: END
// every 0 0$5 marked 7 do var hex , un ;
12788: GO 12790
12790: DISABLE
12791: LD_INT 0
12793: PPUSH
12794: PPUSH
// begin wait ( 4 4$0 ) ;
12795: LD_INT 8400
12797: PPUSH
12798: CALL_OW 67
// if GetTag ( 209 ) then
12802: LD_INT 209
12804: PPUSH
12805: CALL_OW 110
12809: IFFALSE 12848
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12811: LD_ADDR_VAR 0 1
12815: PUSH
12816: LD_INT 213
12818: PPUSH
12819: CALL_OW 110
12823: PPUSH
12824: CALL_OW 250
12828: PUSH
12829: LD_INT 213
12831: PPUSH
12832: CALL_OW 110
12836: PPUSH
12837: CALL_OW 251
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: ST_TO_ADDR
12846: GO 12867
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
12848: LD_ADDR_VAR 0 1
12852: PUSH
12853: LD_EXP 45
12857: PUSH
12858: LD_INT 3
12860: ARRAY
12861: PPUSH
12862: CALL_OW 469
12866: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12867: LD_VAR 0 1
12871: PUSH
12872: LD_INT 1
12874: ARRAY
12875: PPUSH
12876: LD_VAR 0 1
12880: PUSH
12881: LD_INT 2
12883: ARRAY
12884: PPUSH
12885: LD_INT 16
12887: PPUSH
12888: CALL_OW 309
12892: NOT
12893: IFFALSE 13170
// begin if GetTag ( 209 ) then
12895: LD_INT 209
12897: PPUSH
12898: CALL_OW 110
12902: IFFALSE 12949
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12904: LD_INT 213
12906: PPUSH
12907: CALL_OW 110
12911: PPUSH
12912: LD_INT 4
12914: PPUSH
12915: LD_EXP 45
12919: PUSH
12920: LD_INT 1
12922: ARRAY
12923: NEG
12924: PPUSH
12925: CALL_OW 290
// SetTag ( 209 , 0 ) ;
12929: LD_INT 209
12931: PPUSH
12932: LD_INT 0
12934: PPUSH
12935: CALL_OW 109
// SetTag ( 213 , 0 ) ;
12939: LD_INT 213
12941: PPUSH
12942: LD_INT 0
12944: PPUSH
12945: CALL_OW 109
// end ; DestroyArtefact ( hex , 3 ) ;
12949: LD_VAR 0 1
12953: PPUSH
12954: LD_INT 3
12956: PPUSH
12957: CALL 11773 0 2
// wait ( 5 ) ;
12961: LD_INT 5
12963: PPUSH
12964: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12968: LD_ADDR_VAR 0 1
12972: PUSH
12973: LD_INT 16
12975: PPUSH
12976: LD_INT 0
12978: PPUSH
12979: CALL_OW 16
12983: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12984: LD_ADDR_VAR 0 2
12988: PUSH
12989: LD_VAR 0 1
12993: PUSH
12994: LD_INT 1
12996: ARRAY
12997: PPUSH
12998: LD_VAR 0 1
13002: PUSH
13003: LD_INT 2
13005: ARRAY
13006: PPUSH
13007: CALL_OW 428
13011: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
13012: LD_VAR 0 2
13016: PUSH
13017: LD_INT 0
13019: GREATER
13020: PUSH
13021: LD_VAR 0 2
13025: PPUSH
13026: CALL_OW 247
13030: PUSH
13031: LD_INT 3
13033: EQUAL
13034: AND
13035: IFFALSE 13079
// begin KillUnit ( un ) ;
13037: LD_VAR 0 2
13041: PPUSH
13042: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
13046: LD_VAR 0 1
13050: PUSH
13051: LD_INT 1
13053: ARRAY
13054: PPUSH
13055: LD_VAR 0 1
13059: PUSH
13060: LD_INT 2
13062: ARRAY
13063: PPUSH
13064: CALL_OW 428
13068: IFFALSE 13079
// wait ( 10 ) ;
13070: LD_INT 10
13072: PPUSH
13073: CALL_OW 67
13077: GO 13046
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13079: LD_VAR 0 1
13083: PUSH
13084: LD_INT 1
13086: ARRAY
13087: PPUSH
13088: LD_VAR 0 1
13092: PUSH
13093: LD_INT 2
13095: ARRAY
13096: PPUSH
13097: CALL_OW 428
13101: NOT
13102: IFFALSE 12968
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13104: LD_VAR 0 1
13108: PUSH
13109: LD_INT 1
13111: ARRAY
13112: PPUSH
13113: LD_VAR 0 1
13117: PUSH
13118: LD_INT 2
13120: ARRAY
13121: PPUSH
13122: CALL_OW 494
// wait ( 30 ) ;
13126: LD_INT 30
13128: PPUSH
13129: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13133: LD_INT 4
13135: PPUSH
13136: LD_EXP 45
13140: PUSH
13141: LD_INT 3
13143: ARRAY
13144: PPUSH
13145: LD_VAR 0 1
13149: PUSH
13150: LD_INT 1
13152: ARRAY
13153: PPUSH
13154: LD_VAR 0 1
13158: PUSH
13159: LD_INT 2
13161: ARRAY
13162: PPUSH
13163: LD_INT 0
13165: PPUSH
13166: CALL_OW 58
// end ; enable ;
13170: ENABLE
// end ; end_of_file
13171: PPOPN 2
13173: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13174: LD_INT 0
13176: PPUSH
13177: PPUSH
// for un in battle_flags_id do
13178: LD_ADDR_VAR 0 2
13182: PUSH
13183: LD_EXP 34
13187: PUSH
13188: FOR_IN
13189: IFFALSE 13264
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13191: LD_VAR 0 2
13195: PPUSH
13196: LD_INT 1
13198: PUSH
13199: LD_LOC 14
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 2
13210: PUSH
13211: LD_LOC 14
13215: PUSH
13216: LD_INT 2
13218: DIV
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PUSH
13224: LD_INT 3
13226: PUSH
13227: LD_LOC 14
13231: PUSH
13232: LD_INT 5
13234: DIV
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 20
13242: PUSH
13243: LD_LOC 14
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PPUSH
13258: CALL_OW 423
13262: GO 13188
13264: POP
13265: POP
// end ;
13266: LD_VAR 0 1
13270: RET
// every 0 0$0.1 do var un ;
13271: GO 13273
13273: DISABLE
13274: LD_INT 0
13276: PPUSH
// begin if not def_morale_flags then
13277: LD_EXP 58
13281: NOT
13282: IFFALSE 13286
// exit ;
13284: GO 13363
// if not morale_decreasing_time then
13286: LD_EXP 14
13290: NOT
13291: IFFALSE 13295
// exit ;
13293: GO 13363
// strength = 100 ;
13295: LD_ADDR_LOC 14
13299: PUSH
13300: LD_INT 100
13302: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13303: LD_EXP 14
13307: PPUSH
13308: CALL_OW 67
// strength := strength - 1 ;
13312: LD_ADDR_LOC 14
13316: PUSH
13317: LD_LOC 14
13321: PUSH
13322: LD_INT 1
13324: MINUS
13325: ST_TO_ADDR
// Update_Flags ;
13326: CALL 13174 0 0
// until not strength ;
13330: LD_LOC 14
13334: NOT
13335: IFFALSE 13303
// for un in battle_flags_id do
13337: LD_ADDR_VAR 0 1
13341: PUSH
13342: LD_EXP 34
13346: PUSH
13347: FOR_IN
13348: IFFALSE 13361
// KillBattleFlag ( un ) ;
13350: LD_VAR 0 1
13354: PPUSH
13355: CALL_OW 419
13359: GO 13347
13361: POP
13362: POP
// end ; end_of_file
13363: PPOPN 1
13365: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
13366: LD_INT 0
13368: PPUSH
13369: PPUSH
13370: PPUSH
// enable ( 600 ) ;
13371: LD_INT 600
13373: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
13374: LD_ADDR_VAR 0 2
13378: PUSH
13379: DOUBLE
13380: LD_INT 1
13382: DEC
13383: ST_TO_ADDR
13384: LD_EXP 47
13388: PUSH
13389: FOR_TO
13390: IFFALSE 13545
// if Position_Sides [ i ] then
13392: LD_EXP 29
13396: PUSH
13397: LD_VAR 0 2
13401: ARRAY
13402: IFFALSE 13543
// for j := 1 to 8 do
13404: LD_ADDR_VAR 0 3
13408: PUSH
13409: DOUBLE
13410: LD_INT 1
13412: DEC
13413: ST_TO_ADDR
13414: LD_INT 8
13416: PUSH
13417: FOR_TO
13418: IFFALSE 13541
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13420: LD_EXP 23
13424: PUSH
13425: LD_VAR 0 3
13429: ARRAY
13430: PUSH
13431: LD_EXP 21
13435: PUSH
13436: LD_EXP 29
13440: PUSH
13441: LD_VAR 0 2
13445: ARRAY
13446: ARRAY
13447: PUSH
13448: LD_EXP 21
13452: PUSH
13453: LD_VAR 0 3
13457: ARRAY
13458: NONEQUAL
13459: PUSH
13460: LD_EXP 25
13464: NOT
13465: PUSH
13466: LD_EXP 29
13470: PUSH
13471: LD_VAR 0 2
13475: ARRAY
13476: PUSH
13477: LD_VAR 0 3
13481: NONEQUAL
13482: AND
13483: OR
13484: AND
13485: IFFALSE 13509
// HideArea ( j , BuildUpAreas [ i ] ) else
13487: LD_VAR 0 3
13491: PPUSH
13492: LD_EXP 47
13496: PUSH
13497: LD_VAR 0 2
13501: ARRAY
13502: PPUSH
13503: CALL_OW 333
13507: GO 13539
// if ( j = your_side ) then
13509: LD_VAR 0 3
13513: PUSH
13514: LD_OWVAR 2
13518: EQUAL
13519: IFFALSE 13539
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13521: LD_EXP 47
13525: PUSH
13526: LD_VAR 0 2
13530: ARRAY
13531: PPUSH
13532: LD_INT 5
13534: PPUSH
13535: CALL_OW 424
13539: GO 13417
13541: POP
13542: POP
13543: GO 13389
13545: POP
13546: POP
// end ;
13547: LD_VAR 0 1
13551: RET
// export function EndBuildUp ; var i , j ; begin
13552: LD_INT 0
13554: PPUSH
13555: PPUSH
13556: PPUSH
// disable ( 600 ) ;
13557: LD_INT 600
13559: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
13560: LD_ADDR_VAR 0 2
13564: PUSH
13565: DOUBLE
13566: LD_INT 1
13568: DEC
13569: ST_TO_ADDR
13570: LD_EXP 47
13574: PUSH
13575: FOR_TO
13576: IFFALSE 13731
// if Position_Sides [ i ] then
13578: LD_EXP 29
13582: PUSH
13583: LD_VAR 0 2
13587: ARRAY
13588: IFFALSE 13729
// for j := 1 to 8 do
13590: LD_ADDR_VAR 0 3
13594: PUSH
13595: DOUBLE
13596: LD_INT 1
13598: DEC
13599: ST_TO_ADDR
13600: LD_INT 8
13602: PUSH
13603: FOR_TO
13604: IFFALSE 13727
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13606: LD_EXP 23
13610: PUSH
13611: LD_VAR 0 3
13615: ARRAY
13616: PUSH
13617: LD_EXP 21
13621: PUSH
13622: LD_EXP 29
13626: PUSH
13627: LD_VAR 0 2
13631: ARRAY
13632: ARRAY
13633: PUSH
13634: LD_EXP 21
13638: PUSH
13639: LD_VAR 0 3
13643: ARRAY
13644: NONEQUAL
13645: PUSH
13646: LD_EXP 25
13650: NOT
13651: PUSH
13652: LD_EXP 29
13656: PUSH
13657: LD_VAR 0 2
13661: ARRAY
13662: PUSH
13663: LD_VAR 0 3
13667: NONEQUAL
13668: AND
13669: OR
13670: AND
13671: IFFALSE 13695
// ShowArea ( j , BuildUpAreas [ i ] ) else
13673: LD_VAR 0 3
13677: PPUSH
13678: LD_EXP 47
13682: PUSH
13683: LD_VAR 0 2
13687: ARRAY
13688: PPUSH
13689: CALL_OW 334
13693: GO 13725
// if ( j = your_side ) then
13695: LD_VAR 0 3
13699: PUSH
13700: LD_OWVAR 2
13704: EQUAL
13705: IFFALSE 13725
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13707: LD_EXP 47
13711: PUSH
13712: LD_VAR 0 2
13716: ARRAY
13717: PPUSH
13718: LD_INT 0
13720: PPUSH
13721: CALL_OW 424
13725: GO 13603
13727: POP
13728: POP
13729: GO 13575
13731: POP
13732: POP
// end ;
13733: LD_VAR 0 1
13737: RET
// every 5 marked 600 do var i , un ;
13738: GO 13740
13740: DISABLE
13741: LD_INT 0
13743: PPUSH
13744: PPUSH
// begin for i := 1 to BuildUpAreas do
13745: LD_ADDR_VAR 0 1
13749: PUSH
13750: DOUBLE
13751: LD_INT 1
13753: DEC
13754: ST_TO_ADDR
13755: LD_EXP 47
13759: PUSH
13760: FOR_TO
13761: IFFALSE 13916
// if Position_Sides [ i ] then
13763: LD_EXP 29
13767: PUSH
13768: LD_VAR 0 1
13772: ARRAY
13773: IFFALSE 13914
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13775: LD_ADDR_VAR 0 2
13779: PUSH
13780: LD_EXP 47
13784: PUSH
13785: LD_VAR 0 1
13789: ARRAY
13790: PPUSH
13791: LD_INT 2
13793: PUSH
13794: LD_INT 21
13796: PUSH
13797: LD_INT 1
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: PUSH
13804: LD_INT 21
13806: PUSH
13807: LD_INT 2
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 22
13821: PUSH
13822: LD_OWVAR 2
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PPUSH
13835: CALL_OW 70
13839: PUSH
13840: FOR_IN
13841: IFFALSE 13912
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
13843: LD_EXP 21
13847: PUSH
13848: LD_EXP 29
13852: PUSH
13853: LD_VAR 0 1
13857: ARRAY
13858: ARRAY
13859: PUSH
13860: LD_EXP 21
13864: PUSH
13865: LD_OWVAR 2
13869: ARRAY
13870: NONEQUAL
13871: PUSH
13872: LD_EXP 25
13876: NOT
13877: PUSH
13878: LD_EXP 29
13882: PUSH
13883: LD_VAR 0 1
13887: ARRAY
13888: PUSH
13889: LD_OWVAR 2
13893: NONEQUAL
13894: AND
13895: OR
13896: IFFALSE 13910
// ComMoveToArea ( un , BuildUpEscape ) ;
13898: LD_VAR 0 2
13902: PPUSH
13903: LD_INT 24
13905: PPUSH
13906: CALL_OW 113
13910: GO 13840
13912: POP
13913: POP
13914: GO 13760
13916: POP
13917: POP
// enable ;
13918: ENABLE
// end ;
13919: PPOPN 2
13921: END
// every 5 5$00 do
13922: GO 13924
13924: DISABLE
// if ( def_builduptime = 1 ) then
13925: LD_EXP 63
13929: PUSH
13930: LD_INT 1
13932: EQUAL
13933: IFFALSE 13939
// EndBuildUp ;
13935: CALL 13552 0 0
13939: END
// every 10 10$00 do
13940: GO 13942
13942: DISABLE
// if ( def_builduptime = 2 ) then
13943: LD_EXP 63
13947: PUSH
13948: LD_INT 2
13950: EQUAL
13951: IFFALSE 13957
// EndBuildUp ;
13953: CALL 13552 0 0
13957: END
// every 15 15$00 do
13958: GO 13960
13960: DISABLE
// if ( def_builduptime = 3 ) then
13961: LD_EXP 63
13965: PUSH
13966: LD_INT 3
13968: EQUAL
13969: IFFALSE 13975
// EndBuildUp ; end_of_file
13971: CALL 13552 0 0
13975: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13976: LD_INT 0
13978: PPUSH
13979: PPUSH
// if ( not IAmSpec ) then
13980: CALL_OW 531
13984: NOT
13985: IFFALSE 14001
// Result := Limits_Info ^  ;
13987: LD_ADDR_VAR 0 1
13991: PUSH
13992: LD_LOC 26
13996: PUSH
13997: LD_STRING 
13999: ADD
14000: ST_TO_ADDR
// for i := 1 to 8 do
14001: LD_ADDR_VAR 0 2
14005: PUSH
14006: DOUBLE
14007: LD_INT 1
14009: DEC
14010: ST_TO_ADDR
14011: LD_INT 8
14013: PUSH
14014: FOR_TO
14015: IFFALSE 14060
// if Cheaters [ i ] then
14017: LD_LOC 27
14021: PUSH
14022: LD_VAR 0 2
14026: ARRAY
14027: IFFALSE 14058
// Result := Result ^ [ #Cheater , i , i ] ;
14029: LD_ADDR_VAR 0 1
14033: PUSH
14034: LD_VAR 0 1
14038: PUSH
14039: LD_STRING #Cheater
14041: PUSH
14042: LD_VAR 0 2
14046: PUSH
14047: LD_VAR 0 2
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: LIST
14056: ADD
14057: ST_TO_ADDR
14058: GO 14014
14060: POP
14061: POP
// end ;
14062: LD_VAR 0 1
14066: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14067: LD_INT 0
14069: PPUSH
14070: PPUSH
14071: PPUSH
14072: PPUSH
14073: PPUSH
// case Game_Type of 10 :
14074: LD_EXP 48
14078: PUSH
14079: LD_INT 10
14081: DOUBLE
14082: EQUAL
14083: IFTRUE 14087
14085: GO 14098
14087: POP
// def_game_rules := 1 ; 11 :
14088: LD_ADDR_EXP 49
14092: PUSH
14093: LD_INT 1
14095: ST_TO_ADDR
14096: GO 14118
14098: LD_INT 11
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14117
14106: POP
// def_game_rules := 3 ; end ;
14107: LD_ADDR_EXP 49
14111: PUSH
14112: LD_INT 3
14114: ST_TO_ADDR
14115: GO 14118
14117: POP
// case def_game_rules of 0 :
14118: LD_EXP 49
14122: PUSH
14123: LD_INT 0
14125: DOUBLE
14126: EQUAL
14127: IFTRUE 14131
14129: GO 14136
14131: POP
// exit ; 1 :
14132: GO 16194
14134: GO 16094
14136: LD_INT 1
14138: DOUBLE
14139: EQUAL
14140: IFTRUE 14144
14142: GO 14360
14144: POP
// begin def_base_level := 2 ;
14145: LD_ADDR_EXP 50
14149: PUSH
14150: LD_INT 2
14152: ST_TO_ADDR
// def_amount_of_people := 2 ;
14153: LD_ADDR_EXP 51
14157: PUSH
14158: LD_INT 2
14160: ST_TO_ADDR
// def_skill_level := 1 ;
14161: LD_ADDR_EXP 52
14165: PUSH
14166: LD_INT 1
14168: ST_TO_ADDR
// def_starting_resources := 2 ;
14169: LD_ADDR_EXP 53
14173: PUSH
14174: LD_INT 2
14176: ST_TO_ADDR
// def_shipments_density := 1 ;
14177: LD_ADDR_EXP 54
14181: PUSH
14182: LD_INT 1
14184: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14185: LD_ADDR_EXP 55
14189: PUSH
14190: LD_INT 0
14192: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14193: LD_ADDR_EXP 56
14197: PUSH
14198: LD_INT 1
14200: ST_TO_ADDR
// def_shared_vision := 1 ;
14201: LD_ADDR_EXP 57
14205: PUSH
14206: LD_INT 1
14208: ST_TO_ADDR
// def_morale_flags := 3 ;
14209: LD_ADDR_EXP 58
14213: PUSH
14214: LD_INT 3
14216: ST_TO_ADDR
// def_siberite_detection := 1 ;
14217: LD_ADDR_EXP 59
14221: PUSH
14222: LD_INT 1
14224: ST_TO_ADDR
// def_people_respawning := 1 ;
14225: LD_ADDR_EXP 60
14229: PUSH
14230: LD_INT 1
14232: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14233: LD_ADDR_EXP 61
14237: PUSH
14238: LD_INT 1
14240: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14241: LD_ADDR_EXP 62
14245: PUSH
14246: LD_INT 0
14248: ST_TO_ADDR
// def_builduptime := 2 ;
14249: LD_ADDR_EXP 63
14253: PUSH
14254: LD_INT 2
14256: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14257: LD_ADDR_VAR 0 2
14261: PUSH
14262: EMPTY
14263: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14264: LD_ADDR_VAR 0 3
14268: PUSH
14269: EMPTY
14270: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14271: LD_ADDR_LOC 21
14275: PUSH
14276: EMPTY
14277: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14278: LD_ADDR_LOC 22
14282: PUSH
14283: EMPTY
14284: ST_TO_ADDR
// Banned_Controls := [ ] ;
14285: LD_ADDR_LOC 23
14289: PUSH
14290: EMPTY
14291: ST_TO_ADDR
// Banned_Engines := [ ] ;
14292: LD_ADDR_LOC 24
14296: PUSH
14297: EMPTY
14298: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14299: LD_ADDR_LOC 19
14303: PUSH
14304: LD_INT 37
14306: PUSH
14307: EMPTY
14308: LIST
14309: PUSH
14310: LD_INT 4
14312: PUSH
14313: LD_INT 5
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 31
14322: PUSH
14323: LD_INT 32
14325: PUSH
14326: LD_INT 33
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: LIST
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14339: LD_ADDR_LOC 20
14343: PUSH
14344: LD_INT 2
14346: PUSH
14347: LD_INT 2
14349: PUSH
14350: LD_INT 4
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: ST_TO_ADDR
// end ; 2 :
14358: GO 16094
14360: LD_INT 2
14362: DOUBLE
14363: EQUAL
14364: IFTRUE 14368
14366: GO 14577
14368: POP
// begin def_base_level := 1 ;
14369: LD_ADDR_EXP 50
14373: PUSH
14374: LD_INT 1
14376: ST_TO_ADDR
// def_amount_of_people := 2 ;
14377: LD_ADDR_EXP 51
14381: PUSH
14382: LD_INT 2
14384: ST_TO_ADDR
// def_skill_level := 3 ;
14385: LD_ADDR_EXP 52
14389: PUSH
14390: LD_INT 3
14392: ST_TO_ADDR
// def_starting_resources := 3 ;
14393: LD_ADDR_EXP 53
14397: PUSH
14398: LD_INT 3
14400: ST_TO_ADDR
// def_shipments_density := 2 ;
14401: LD_ADDR_EXP 54
14405: PUSH
14406: LD_INT 2
14408: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14409: LD_ADDR_EXP 55
14413: PUSH
14414: LD_INT 1
14416: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14417: LD_ADDR_EXP 56
14421: PUSH
14422: LD_INT 2
14424: ST_TO_ADDR
// def_shared_vision := 1 ;
14425: LD_ADDR_EXP 57
14429: PUSH
14430: LD_INT 1
14432: ST_TO_ADDR
// def_morale_flags := 0 ;
14433: LD_ADDR_EXP 58
14437: PUSH
14438: LD_INT 0
14440: ST_TO_ADDR
// def_siberite_detection := 1 ;
14441: LD_ADDR_EXP 59
14445: PUSH
14446: LD_INT 1
14448: ST_TO_ADDR
// def_people_respawning := 0 ;
14449: LD_ADDR_EXP 60
14453: PUSH
14454: LD_INT 0
14456: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14457: LD_ADDR_EXP 61
14461: PUSH
14462: LD_INT 0
14464: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14465: LD_ADDR_EXP 62
14469: PUSH
14470: LD_INT 0
14472: ST_TO_ADDR
// def_builduptime := 2 ;
14473: LD_ADDR_EXP 63
14477: PUSH
14478: LD_INT 2
14480: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14481: LD_ADDR_VAR 0 2
14485: PUSH
14486: LD_INT 1
14488: PUSH
14489: EMPTY
14490: LIST
14491: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14492: LD_ADDR_VAR 0 3
14496: PUSH
14497: EMPTY
14498: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14499: LD_ADDR_LOC 21
14503: PUSH
14504: EMPTY
14505: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14506: LD_ADDR_LOC 22
14510: PUSH
14511: EMPTY
14512: ST_TO_ADDR
// Banned_Controls := [ ] ;
14513: LD_ADDR_LOC 23
14517: PUSH
14518: EMPTY
14519: ST_TO_ADDR
// Banned_Engines := [ ] ;
14520: LD_ADDR_LOC 24
14524: PUSH
14525: EMPTY
14526: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14527: LD_ADDR_LOC 19
14531: PUSH
14532: LD_INT 4
14534: PUSH
14535: LD_INT 5
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 31
14544: PUSH
14545: LD_INT 32
14547: PUSH
14548: LD_INT 33
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
14560: LD_ADDR_LOC 20
14564: PUSH
14565: LD_INT 1
14567: PUSH
14568: LD_INT 2
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: ST_TO_ADDR
// end ; 3 :
14575: GO 16094
14577: LD_INT 3
14579: DOUBLE
14580: EQUAL
14581: IFTRUE 14585
14583: GO 14828
14585: POP
// begin def_base_level := 1 ;
14586: LD_ADDR_EXP 50
14590: PUSH
14591: LD_INT 1
14593: ST_TO_ADDR
// def_amount_of_people := 2 ;
14594: LD_ADDR_EXP 51
14598: PUSH
14599: LD_INT 2
14601: ST_TO_ADDR
// def_skill_level := 3 ;
14602: LD_ADDR_EXP 52
14606: PUSH
14607: LD_INT 3
14609: ST_TO_ADDR
// def_starting_resources := 3 ;
14610: LD_ADDR_EXP 53
14614: PUSH
14615: LD_INT 3
14617: ST_TO_ADDR
// def_shipments_density := 1 ;
14618: LD_ADDR_EXP 54
14622: PUSH
14623: LD_INT 1
14625: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14626: LD_ADDR_EXP 55
14630: PUSH
14631: LD_INT 0
14633: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14634: LD_ADDR_EXP 56
14638: PUSH
14639: LD_INT 1
14641: ST_TO_ADDR
// def_shared_vision := 1 ;
14642: LD_ADDR_EXP 57
14646: PUSH
14647: LD_INT 1
14649: ST_TO_ADDR
// def_morale_flags := 0 ;
14650: LD_ADDR_EXP 58
14654: PUSH
14655: LD_INT 0
14657: ST_TO_ADDR
// def_siberite_detection := 1 ;
14658: LD_ADDR_EXP 59
14662: PUSH
14663: LD_INT 1
14665: ST_TO_ADDR
// def_people_respawning := 0 ;
14666: LD_ADDR_EXP 60
14670: PUSH
14671: LD_INT 0
14673: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14674: LD_ADDR_EXP 61
14678: PUSH
14679: LD_INT 2
14681: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14682: LD_ADDR_EXP 62
14686: PUSH
14687: LD_INT 0
14689: ST_TO_ADDR
// def_builduptime := 1 ;
14690: LD_ADDR_EXP 63
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14698: LD_ADDR_VAR 0 2
14702: PUSH
14703: LD_INT 23
14705: PUSH
14706: EMPTY
14707: LIST
14708: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14709: LD_ADDR_VAR 0 3
14713: PUSH
14714: LD_INT 2
14716: PUSH
14717: LD_INT 37
14719: PUSH
14720: LD_INT 32
14722: PUSH
14723: LD_INT 33
14725: PUSH
14726: LD_INT 36
14728: PUSH
14729: LD_INT 16
14731: PUSH
14732: LD_INT 23
14734: PUSH
14735: LD_INT 21
14737: PUSH
14738: LD_INT 18
14740: PUSH
14741: LD_INT 22
14743: PUSH
14744: LD_INT 20
14746: PUSH
14747: LD_INT 19
14749: PUSH
14750: LD_INT 25
14752: PUSH
14753: LD_INT 17
14755: PUSH
14756: LD_INT 24
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14776: LD_ADDR_LOC 21
14780: PUSH
14781: EMPTY
14782: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14783: LD_ADDR_LOC 22
14787: PUSH
14788: EMPTY
14789: ST_TO_ADDR
// Banned_Controls := [ ] ;
14790: LD_ADDR_LOC 23
14794: PUSH
14795: EMPTY
14796: ST_TO_ADDR
// Banned_Engines := [ ] ;
14797: LD_ADDR_LOC 24
14801: PUSH
14802: EMPTY
14803: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14804: LD_ADDR_LOC 19
14808: PUSH
14809: EMPTY
14810: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14811: LD_ADDR_LOC 20
14815: PUSH
14816: EMPTY
14817: ST_TO_ADDR
// No_Mechs := true ;
14818: LD_ADDR_EXP 64
14822: PUSH
14823: LD_INT 1
14825: ST_TO_ADDR
// end ; 4 :
14826: GO 16094
14828: LD_INT 4
14830: DOUBLE
14831: EQUAL
14832: IFTRUE 14836
14834: GO 15011
14836: POP
// begin def_base_level := 1 ;
14837: LD_ADDR_EXP 50
14841: PUSH
14842: LD_INT 1
14844: ST_TO_ADDR
// def_amount_of_people := 2 ;
14845: LD_ADDR_EXP 51
14849: PUSH
14850: LD_INT 2
14852: ST_TO_ADDR
// def_skill_level := 3 ;
14853: LD_ADDR_EXP 52
14857: PUSH
14858: LD_INT 3
14860: ST_TO_ADDR
// def_starting_resources := 3 ;
14861: LD_ADDR_EXP 53
14865: PUSH
14866: LD_INT 3
14868: ST_TO_ADDR
// def_shipments_density := 2 ;
14869: LD_ADDR_EXP 54
14873: PUSH
14874: LD_INT 2
14876: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14877: LD_ADDR_EXP 55
14881: PUSH
14882: LD_INT 1
14884: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14885: LD_ADDR_EXP 56
14889: PUSH
14890: LD_INT 2
14892: ST_TO_ADDR
// def_shared_vision := 1 ;
14893: LD_ADDR_EXP 57
14897: PUSH
14898: LD_INT 1
14900: ST_TO_ADDR
// def_morale_flags := 0 ;
14901: LD_ADDR_EXP 58
14905: PUSH
14906: LD_INT 0
14908: ST_TO_ADDR
// def_siberite_detection := 1 ;
14909: LD_ADDR_EXP 59
14913: PUSH
14914: LD_INT 1
14916: ST_TO_ADDR
// def_people_respawning := 0 ;
14917: LD_ADDR_EXP 60
14921: PUSH
14922: LD_INT 0
14924: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14925: LD_ADDR_EXP 61
14929: PUSH
14930: LD_INT 0
14932: ST_TO_ADDR
// def_siberite_bomb := 1 ;
14933: LD_ADDR_EXP 62
14937: PUSH
14938: LD_INT 1
14940: ST_TO_ADDR
// def_builduptime := 3 ;
14941: LD_ADDR_EXP 63
14945: PUSH
14946: LD_INT 3
14948: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14949: LD_ADDR_VAR 0 2
14953: PUSH
14954: LD_INT 1
14956: PUSH
14957: EMPTY
14958: LIST
14959: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: EMPTY
14966: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14967: LD_ADDR_LOC 21
14971: PUSH
14972: EMPTY
14973: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14974: LD_ADDR_LOC 22
14978: PUSH
14979: EMPTY
14980: ST_TO_ADDR
// Banned_Controls := [ ] ;
14981: LD_ADDR_LOC 23
14985: PUSH
14986: EMPTY
14987: ST_TO_ADDR
// Banned_Engines := [ ] ;
14988: LD_ADDR_LOC 24
14992: PUSH
14993: EMPTY
14994: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14995: LD_ADDR_LOC 19
14999: PUSH
15000: EMPTY
15001: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15002: LD_ADDR_LOC 20
15006: PUSH
15007: EMPTY
15008: ST_TO_ADDR
// end ; 5 :
15009: GO 16094
15011: LD_INT 5
15013: DOUBLE
15014: EQUAL
15015: IFTRUE 15019
15017: GO 15268
15019: POP
// begin def_base_level := 0 ;
15020: LD_ADDR_EXP 50
15024: PUSH
15025: LD_INT 0
15027: ST_TO_ADDR
// def_amount_of_people := 0 ;
15028: LD_ADDR_EXP 51
15032: PUSH
15033: LD_INT 0
15035: ST_TO_ADDR
// def_skill_level := 0 ;
15036: LD_ADDR_EXP 52
15040: PUSH
15041: LD_INT 0
15043: ST_TO_ADDR
// def_starting_resources := 0 ;
15044: LD_ADDR_EXP 53
15048: PUSH
15049: LD_INT 0
15051: ST_TO_ADDR
// def_shipments_density := 0 ;
15052: LD_ADDR_EXP 54
15056: PUSH
15057: LD_INT 0
15059: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15060: LD_ADDR_EXP 55
15064: PUSH
15065: LD_INT 0
15067: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15068: LD_ADDR_EXP 56
15072: PUSH
15073: LD_INT 0
15075: ST_TO_ADDR
// def_shared_vision := 1 ;
15076: LD_ADDR_EXP 57
15080: PUSH
15081: LD_INT 1
15083: ST_TO_ADDR
// def_morale_flags := 0 ;
15084: LD_ADDR_EXP 58
15088: PUSH
15089: LD_INT 0
15091: ST_TO_ADDR
// def_siberite_detection := 0 ;
15092: LD_ADDR_EXP 59
15096: PUSH
15097: LD_INT 0
15099: ST_TO_ADDR
// def_people_respawning := 1 ;
15100: LD_ADDR_EXP 60
15104: PUSH
15105: LD_INT 1
15107: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15108: LD_ADDR_EXP 61
15112: PUSH
15113: LD_INT 1
15115: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15116: LD_ADDR_EXP 62
15120: PUSH
15121: LD_INT 0
15123: ST_TO_ADDR
// def_builduptime := 0 ;
15124: LD_ADDR_EXP 63
15128: PUSH
15129: LD_INT 0
15131: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
15132: LD_ADDR_VAR 0 2
15136: PUSH
15137: LD_INT 10
15139: PUSH
15140: LD_INT 3
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
15147: LD_ADDR_VAR 0 3
15151: PUSH
15152: LD_INT 12
15154: PUSH
15155: LD_INT 11
15157: PUSH
15158: LD_INT 14
15160: PUSH
15161: LD_INT 13
15163: PUSH
15164: LD_INT 5
15166: PUSH
15167: LD_INT 24
15169: PUSH
15170: LD_INT 21
15172: PUSH
15173: LD_INT 33
15175: PUSH
15176: LD_INT 36
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
15190: LD_ADDR_LOC 21
15194: PUSH
15195: LD_INT 31
15197: PUSH
15198: EMPTY
15199: LIST
15200: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15201: LD_ADDR_LOC 22
15205: PUSH
15206: EMPTY
15207: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
15208: LD_ADDR_LOC 23
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: EMPTY
15217: LIST
15218: ST_TO_ADDR
// Banned_Engines := [ ] ;
15219: LD_ADDR_LOC 24
15223: PUSH
15224: EMPTY
15225: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
15226: LD_ADDR_LOC 19
15230: PUSH
15231: LD_INT 4
15233: PUSH
15234: EMPTY
15235: LIST
15236: PUSH
15237: LD_INT 31
15239: PUSH
15240: LD_INT 32
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
15251: LD_ADDR_LOC 20
15255: PUSH
15256: LD_INT 1
15258: PUSH
15259: LD_INT 1
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: ST_TO_ADDR
// end ; 6 :
15266: GO 16094
15268: LD_INT 6
15270: DOUBLE
15271: EQUAL
15272: IFTRUE 15276
15274: GO 15479
15276: POP
// begin def_base_level := 1 ;
15277: LD_ADDR_EXP 50
15281: PUSH
15282: LD_INT 1
15284: ST_TO_ADDR
// def_amount_of_people := 2 ;
15285: LD_ADDR_EXP 51
15289: PUSH
15290: LD_INT 2
15292: ST_TO_ADDR
// def_skill_level := 3 ;
15293: LD_ADDR_EXP 52
15297: PUSH
15298: LD_INT 3
15300: ST_TO_ADDR
// def_starting_resources := 3 ;
15301: LD_ADDR_EXP 53
15305: PUSH
15306: LD_INT 3
15308: ST_TO_ADDR
// def_shipments_density := 1 ;
15309: LD_ADDR_EXP 54
15313: PUSH
15314: LD_INT 1
15316: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15317: LD_ADDR_EXP 55
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15325: LD_ADDR_EXP 56
15329: PUSH
15330: LD_INT 1
15332: ST_TO_ADDR
// def_shared_vision := 1 ;
15333: LD_ADDR_EXP 57
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// def_morale_flags := 0 ;
15341: LD_ADDR_EXP 58
15345: PUSH
15346: LD_INT 0
15348: ST_TO_ADDR
// def_siberite_detection := 1 ;
15349: LD_ADDR_EXP 59
15353: PUSH
15354: LD_INT 1
15356: ST_TO_ADDR
// def_people_respawning := 2 ;
15357: LD_ADDR_EXP 60
15361: PUSH
15362: LD_INT 2
15364: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15365: LD_ADDR_EXP 61
15369: PUSH
15370: LD_INT 1
15372: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15373: LD_ADDR_EXP 62
15377: PUSH
15378: LD_INT 0
15380: ST_TO_ADDR
// def_builduptime := 1 ;
15381: LD_ADDR_EXP 63
15385: PUSH
15386: LD_INT 1
15388: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15389: LD_ADDR_VAR 0 2
15393: PUSH
15394: LD_INT 23
15396: PUSH
15397: EMPTY
15398: LIST
15399: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
15400: LD_ADDR_VAR 0 3
15404: PUSH
15405: LD_INT 2
15407: PUSH
15408: LD_INT 37
15410: PUSH
15411: LD_INT 31
15413: PUSH
15414: LD_INT 32
15416: PUSH
15417: LD_INT 33
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15427: LD_ADDR_LOC 21
15431: PUSH
15432: EMPTY
15433: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15434: LD_ADDR_LOC 22
15438: PUSH
15439: EMPTY
15440: ST_TO_ADDR
// Banned_Controls := [ ] ;
15441: LD_ADDR_LOC 23
15445: PUSH
15446: EMPTY
15447: ST_TO_ADDR
// Banned_Engines := [ ] ;
15448: LD_ADDR_LOC 24
15452: PUSH
15453: EMPTY
15454: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15455: LD_ADDR_LOC 19
15459: PUSH
15460: EMPTY
15461: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15462: LD_ADDR_LOC 20
15466: PUSH
15467: EMPTY
15468: ST_TO_ADDR
// No_Mechs := true ;
15469: LD_ADDR_EXP 64
15473: PUSH
15474: LD_INT 1
15476: ST_TO_ADDR
// end ; 7 :
15477: GO 16094
15479: LD_INT 7
15481: DOUBLE
15482: EQUAL
15483: IFTRUE 15487
15485: GO 15685
15487: POP
// begin def_base_level := 1 ;
15488: LD_ADDR_EXP 50
15492: PUSH
15493: LD_INT 1
15495: ST_TO_ADDR
// def_amount_of_people := 2 ;
15496: LD_ADDR_EXP 51
15500: PUSH
15501: LD_INT 2
15503: ST_TO_ADDR
// def_skill_level := 3 ;
15504: LD_ADDR_EXP 52
15508: PUSH
15509: LD_INT 3
15511: ST_TO_ADDR
// def_starting_resources := 3 ;
15512: LD_ADDR_EXP 53
15516: PUSH
15517: LD_INT 3
15519: ST_TO_ADDR
// def_shipments_density := 1 ;
15520: LD_ADDR_EXP 54
15524: PUSH
15525: LD_INT 1
15527: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15528: LD_ADDR_EXP 55
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15536: LD_ADDR_EXP 56
15540: PUSH
15541: LD_INT 2
15543: ST_TO_ADDR
// def_shared_vision := 1 ;
15544: LD_ADDR_EXP 57
15548: PUSH
15549: LD_INT 1
15551: ST_TO_ADDR
// def_morale_flags := 0 ;
15552: LD_ADDR_EXP 58
15556: PUSH
15557: LD_INT 0
15559: ST_TO_ADDR
// def_siberite_detection := 1 ;
15560: LD_ADDR_EXP 59
15564: PUSH
15565: LD_INT 1
15567: ST_TO_ADDR
// def_people_respawning := 0 ;
15568: LD_ADDR_EXP 60
15572: PUSH
15573: LD_INT 0
15575: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15576: LD_ADDR_EXP 61
15580: PUSH
15581: LD_INT 1
15583: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15584: LD_ADDR_EXP 62
15588: PUSH
15589: LD_INT 0
15591: ST_TO_ADDR
// def_builduptime := 3 ;
15592: LD_ADDR_EXP 63
15596: PUSH
15597: LD_INT 3
15599: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15600: LD_ADDR_VAR 0 2
15604: PUSH
15605: LD_INT 23
15607: PUSH
15608: EMPTY
15609: LIST
15610: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
15611: LD_ADDR_VAR 0 3
15615: PUSH
15616: LD_INT 37
15618: PUSH
15619: EMPTY
15620: LIST
15621: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15622: LD_ADDR_LOC 21
15626: PUSH
15627: EMPTY
15628: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15629: LD_ADDR_LOC 22
15633: PUSH
15634: EMPTY
15635: ST_TO_ADDR
// Banned_Controls := [ ] ;
15636: LD_ADDR_LOC 23
15640: PUSH
15641: EMPTY
15642: ST_TO_ADDR
// Banned_Engines := [ ] ;
15643: LD_ADDR_LOC 24
15647: PUSH
15648: EMPTY
15649: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15650: LD_ADDR_LOC 19
15654: PUSH
15655: LD_INT 31
15657: PUSH
15658: LD_INT 32
15660: PUSH
15661: LD_INT 33
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: PUSH
15669: EMPTY
15670: LIST
15671: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
15672: LD_ADDR_LOC 20
15676: PUSH
15677: LD_INT 10
15679: PUSH
15680: EMPTY
15681: LIST
15682: ST_TO_ADDR
// end ; 8 :
15683: GO 16094
15685: LD_INT 8
15687: DOUBLE
15688: EQUAL
15689: IFTRUE 15693
15691: GO 16093
15693: POP
// begin def_base_level := 0 ;
15694: LD_ADDR_EXP 50
15698: PUSH
15699: LD_INT 0
15701: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
15702: LD_ADDR_EXP 51
15706: PUSH
15707: LD_INT 0
15709: PPUSH
15710: LD_INT 1
15712: PPUSH
15713: CALL_OW 12
15717: ST_TO_ADDR
// def_skill_level := 0 ;
15718: LD_ADDR_EXP 52
15722: PUSH
15723: LD_INT 0
15725: ST_TO_ADDR
// def_starting_resources := 2 ;
15726: LD_ADDR_EXP 53
15730: PUSH
15731: LD_INT 2
15733: ST_TO_ADDR
// def_shipments_density := 1 ;
15734: LD_ADDR_EXP 54
15738: PUSH
15739: LD_INT 1
15741: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15742: LD_ADDR_EXP 55
15746: PUSH
15747: LD_INT 0
15749: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15750: LD_ADDR_EXP 56
15754: PUSH
15755: LD_INT 0
15757: ST_TO_ADDR
// def_shared_vision := 1 ;
15758: LD_ADDR_EXP 57
15762: PUSH
15763: LD_INT 1
15765: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
15766: LD_ADDR_EXP 58
15770: PUSH
15771: LD_INT 0
15773: PPUSH
15774: LD_INT 2
15776: PPUSH
15777: CALL_OW 12
15781: ST_TO_ADDR
// def_siberite_detection := 0 ;
15782: LD_ADDR_EXP 59
15786: PUSH
15787: LD_INT 0
15789: ST_TO_ADDR
// def_people_respawning := 0 ;
15790: LD_ADDR_EXP 60
15794: PUSH
15795: LD_INT 0
15797: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
15798: LD_ADDR_EXP 61
15802: PUSH
15803: LD_INT 2
15805: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15806: LD_ADDR_EXP 62
15810: PUSH
15811: LD_INT 0
15813: ST_TO_ADDR
// def_builduptime := 0 ;
15814: LD_ADDR_EXP 63
15818: PUSH
15819: LD_INT 0
15821: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
15822: LD_ADDR_VAR 0 2
15826: PUSH
15827: LD_INT 23
15829: PUSH
15830: LD_INT 20
15832: PUSH
15833: LD_INT 40
15835: PUSH
15836: LD_INT 47
15838: PUSH
15839: LD_INT 46
15841: PUSH
15842: LD_INT 39
15844: PUSH
15845: LD_INT 71
15847: PUSH
15848: LD_INT 34
15850: PUSH
15851: LD_INT 41
15853: PUSH
15854: LD_INT 44
15856: PUSH
15857: LD_INT 17
15859: PUSH
15860: LD_INT 16
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
15877: LD_ADDR_VAR 0 3
15881: PUSH
15882: LD_INT 37
15884: PUSH
15885: LD_INT 5
15887: PUSH
15888: LD_INT 13
15890: PUSH
15891: LD_INT 34
15893: PUSH
15894: LD_INT 12
15896: PUSH
15897: LD_INT 15
15899: PUSH
15900: LD_INT 11
15902: PUSH
15903: LD_INT 14
15905: PUSH
15906: LD_INT 29
15908: PUSH
15909: LD_INT 30
15911: PUSH
15912: LD_INT 28
15914: PUSH
15915: LD_INT 24
15917: PUSH
15918: LD_INT 25
15920: PUSH
15921: LD_INT 20
15923: PUSH
15924: LD_INT 21
15926: PUSH
15927: LD_INT 22
15929: PUSH
15930: LD_INT 36
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15952: LD_ADDR_LOC 21
15956: PUSH
15957: EMPTY
15958: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
15959: LD_ADDR_LOC 22
15963: PUSH
15964: LD_INT 14
15966: PUSH
15967: EMPTY
15968: LIST
15969: ST_TO_ADDR
// Banned_Controls := [ ] ;
15970: LD_ADDR_LOC 23
15974: PUSH
15975: EMPTY
15976: ST_TO_ADDR
// Banned_Engines := [ ] ;
15977: LD_ADDR_LOC 24
15981: PUSH
15982: EMPTY
15983: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
15984: LD_ADDR_LOC 19
15988: PUSH
15989: LD_INT 31
15991: PUSH
15992: LD_INT 32
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 4
16001: PUSH
16002: EMPTY
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
16009: LD_ADDR_LOC 20
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: LD_INT 1
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: ST_TO_ADDR
// for i := 1 to 8 do
16024: LD_ADDR_VAR 0 4
16028: PUSH
16029: DOUBLE
16030: LD_INT 1
16032: DEC
16033: ST_TO_ADDR
16034: LD_INT 8
16036: PUSH
16037: FOR_TO
16038: IFFALSE 16089
// if ( Side_Nations [ i ] = 3 ) then
16040: LD_EXP 24
16044: PUSH
16045: LD_VAR 0 4
16049: ARRAY
16050: PUSH
16051: LD_INT 3
16053: EQUAL
16054: IFFALSE 16087
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
16056: LD_ADDR_EXP 24
16060: PUSH
16061: LD_EXP 24
16065: PPUSH
16066: LD_VAR 0 4
16070: PPUSH
16071: LD_INT 1
16073: PPUSH
16074: LD_INT 2
16076: PPUSH
16077: CALL_OW 12
16081: PPUSH
16082: CALL_OW 1
16086: ST_TO_ADDR
16087: GO 16037
16089: POP
16090: POP
// end ; end ;
16091: GO 16094
16093: POP
// for i := 1 to 8 do
16094: LD_ADDR_VAR 0 4
16098: PUSH
16099: DOUBLE
16100: LD_INT 1
16102: DEC
16103: ST_TO_ADDR
16104: LD_INT 8
16106: PUSH
16107: FOR_TO
16108: IFFALSE 16192
// if Side_Positions [ i ] then
16110: LD_EXP 23
16114: PUSH
16115: LD_VAR 0 4
16119: ARRAY
16120: IFFALSE 16190
// begin for j in Unavailable_Techs do
16122: LD_ADDR_VAR 0 5
16126: PUSH
16127: LD_VAR 0 2
16131: PUSH
16132: FOR_IN
16133: IFFALSE 16154
// SetTech ( j , i , 0 ) ;
16135: LD_VAR 0 5
16139: PPUSH
16140: LD_VAR 0 4
16144: PPUSH
16145: LD_INT 0
16147: PPUSH
16148: CALL_OW 322
16152: GO 16132
16154: POP
16155: POP
// for j in Unavailable_Builds do
16156: LD_ADDR_VAR 0 5
16160: PUSH
16161: LD_VAR 0 3
16165: PUSH
16166: FOR_IN
16167: IFFALSE 16188
// SetRestrict ( j , i , 0 ) ;
16169: LD_VAR 0 5
16173: PPUSH
16174: LD_VAR 0 4
16178: PPUSH
16179: LD_INT 0
16181: PPUSH
16182: CALL_OW 324
16186: GO 16166
16188: POP
16189: POP
// end ;
16190: GO 16107
16192: POP
16193: POP
// end ;
16194: LD_VAR 0 1
16198: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
16199: LD_INT 0
16201: PPUSH
16202: PPUSH
16203: PPUSH
16204: PPUSH
16205: PPUSH
16206: PPUSH
16207: PPUSH
// for i := 1 to Restricted_Builds do
16208: LD_ADDR_VAR 0 2
16212: PUSH
16213: DOUBLE
16214: LD_INT 1
16216: DEC
16217: ST_TO_ADDR
16218: LD_LOC 19
16222: PUSH
16223: FOR_TO
16224: IFFALSE 16534
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
16226: LD_LOC 19
16230: PUSH
16231: LD_VAR 0 2
16235: ARRAY
16236: PUSH
16237: LD_INT 1
16239: ARRAY
16240: PUSH
16241: LD_INT 31
16243: DOUBLE
16244: EQUAL
16245: IFTRUE 16261
16247: LD_INT 32
16249: DOUBLE
16250: EQUAL
16251: IFTRUE 16261
16253: LD_INT 33
16255: DOUBLE
16256: EQUAL
16257: IFTRUE 16261
16259: GO 16272
16261: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
16262: LD_ADDR_VAR 0 6
16266: PUSH
16267: LD_STRING #Turrets
16269: ST_TO_ADDR
16270: GO 16317
16272: LD_INT 4
16274: DOUBLE
16275: EQUAL
16276: IFTRUE 16286
16278: LD_INT 5
16280: DOUBLE
16281: EQUAL
16282: IFTRUE 16286
16284: GO 16297
16286: POP
// btype := #Armouries ; b_Behemoth :
16287: LD_ADDR_VAR 0 6
16291: PUSH
16292: LD_STRING #Armouries
16294: ST_TO_ADDR
16295: GO 16317
16297: LD_INT 37
16299: DOUBLE
16300: EQUAL
16301: IFTRUE 16305
16303: GO 16316
16305: POP
// btype := #Behemoths ; end ;
16306: LD_ADDR_VAR 0 6
16310: PUSH
16311: LD_STRING #Behemoths
16313: ST_TO_ADDR
16314: GO 16317
16316: POP
// list := [ ] ;
16317: LD_ADDR_VAR 0 7
16321: PUSH
16322: EMPTY
16323: ST_TO_ADDR
// for j := 1 to 8 do
16324: LD_ADDR_VAR 0 3
16328: PUSH
16329: DOUBLE
16330: LD_INT 1
16332: DEC
16333: ST_TO_ADDR
16334: LD_INT 8
16336: PUSH
16337: FOR_TO
16338: IFFALSE 16431
// if Side_Positions [ j ] then
16340: LD_EXP 23
16344: PUSH
16345: LD_VAR 0 3
16349: ARRAY
16350: IFFALSE 16429
// begin amount := 0 ;
16352: LD_ADDR_VAR 0 5
16356: PUSH
16357: LD_INT 0
16359: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
16360: LD_ADDR_VAR 0 4
16364: PUSH
16365: LD_LOC 19
16369: PUSH
16370: LD_VAR 0 2
16374: ARRAY
16375: PUSH
16376: FOR_IN
16377: IFFALSE 16425
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
16379: LD_ADDR_VAR 0 5
16383: PUSH
16384: LD_VAR 0 5
16388: PUSH
16389: LD_INT 22
16391: PUSH
16392: LD_VAR 0 3
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 30
16403: PUSH
16404: LD_VAR 0 4
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PPUSH
16417: CALL_OW 69
16421: PLUS
16422: ST_TO_ADDR
16423: GO 16376
16425: POP
16426: POP
// break ;
16427: GO 16431
// end ;
16429: GO 16337
16431: POP
16432: POP
// list := [ ] ;
16433: LD_ADDR_VAR 0 7
16437: PUSH
16438: EMPTY
16439: ST_TO_ADDR
// for j := 1 to 8 do
16440: LD_ADDR_VAR 0 3
16444: PUSH
16445: DOUBLE
16446: LD_INT 1
16448: DEC
16449: ST_TO_ADDR
16450: LD_INT 8
16452: PUSH
16453: FOR_TO
16454: IFFALSE 16474
// list := list ^ amount ;
16456: LD_ADDR_VAR 0 7
16460: PUSH
16461: LD_VAR 0 7
16465: PUSH
16466: LD_VAR 0 5
16470: ADD
16471: ST_TO_ADDR
16472: GO 16453
16474: POP
16475: POP
// Already_Built := Already_Built ^ [ list ] ;
16476: LD_ADDR_LOC 25
16480: PUSH
16481: LD_LOC 25
16485: PUSH
16486: LD_VAR 0 7
16490: PUSH
16491: EMPTY
16492: LIST
16493: ADD
16494: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
16495: LD_ADDR_LOC 26
16499: PUSH
16500: LD_LOC 26
16504: PUSH
16505: LD_VAR 0 6
16509: PUSH
16510: LD_VAR 0 5
16514: PUSH
16515: LD_LOC 20
16519: PUSH
16520: LD_VAR 0 2
16524: ARRAY
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: LIST
16530: ADD
16531: ST_TO_ADDR
// end ;
16532: GO 16223
16534: POP
16535: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16536: LD_ADDR_LOC 27
16540: PUSH
16541: LD_INT 0
16543: PUSH
16544: LD_INT 0
16546: PUSH
16547: LD_INT 0
16549: PUSH
16550: LD_INT 0
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: LD_INT 0
16558: PUSH
16559: LD_INT 0
16561: PUSH
16562: LD_INT 0
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: ST_TO_ADDR
// if Limits_Info then
16575: LD_LOC 26
16579: IFFALSE 16595
// Limits_Info := #Limits ^ Limits_Info ;
16581: LD_ADDR_LOC 26
16585: PUSH
16586: LD_STRING #Limits
16588: PUSH
16589: LD_LOC 26
16593: ADD
16594: ST_TO_ADDR
// end ;
16595: LD_VAR 0 1
16599: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
16600: LD_INT 0
16602: PPUSH
16603: PPUSH
16604: PPUSH
16605: PPUSH
// for i := 1 to Restricted_Builds do
16606: LD_ADDR_VAR 0 7
16610: PUSH
16611: DOUBLE
16612: LD_INT 1
16614: DEC
16615: ST_TO_ADDR
16616: LD_LOC 19
16620: PUSH
16621: FOR_TO
16622: IFFALSE 17045
// if BType in Restricted_Builds [ i ] then
16624: LD_VAR 0 2
16628: PUSH
16629: LD_LOC 19
16633: PUSH
16634: LD_VAR 0 7
16638: ARRAY
16639: IN
16640: IFFALSE 17043
// begin if old_side then
16642: LD_VAR 0 4
16646: IFFALSE 16772
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
16648: LD_LOC 25
16652: PUSH
16653: LD_VAR 0 7
16657: ARRAY
16658: PUSH
16659: LD_VAR 0 3
16663: ARRAY
16664: PUSH
16665: LD_VAR 0 5
16669: PLUS
16670: PUSH
16671: LD_LOC 20
16675: PUSH
16676: LD_VAR 0 7
16680: ARRAY
16681: GREATER
16682: IFFALSE 16708
// begin SetSide ( un , old_side ) ;
16684: LD_VAR 0 1
16688: PPUSH
16689: LD_VAR 0 4
16693: PPUSH
16694: CALL_OW 235
// count := 0 ;
16698: LD_ADDR_VAR 0 5
16702: PUSH
16703: LD_INT 0
16705: ST_TO_ADDR
// end else
16706: GO 16772
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
16708: LD_ADDR_LOC 25
16712: PUSH
16713: LD_LOC 25
16717: PPUSH
16718: LD_VAR 0 7
16722: PPUSH
16723: LD_LOC 25
16727: PUSH
16728: LD_VAR 0 7
16732: ARRAY
16733: PPUSH
16734: LD_VAR 0 4
16738: PPUSH
16739: LD_LOC 25
16743: PUSH
16744: LD_VAR 0 7
16748: ARRAY
16749: PUSH
16750: LD_VAR 0 4
16754: ARRAY
16755: PUSH
16756: LD_VAR 0 5
16760: MINUS
16761: PPUSH
16762: CALL_OW 1
16766: PPUSH
16767: CALL_OW 1
16771: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
16772: LD_ADDR_LOC 25
16776: PUSH
16777: LD_LOC 25
16781: PPUSH
16782: LD_VAR 0 7
16786: PPUSH
16787: LD_LOC 25
16791: PUSH
16792: LD_VAR 0 7
16796: ARRAY
16797: PPUSH
16798: LD_VAR 0 3
16802: PPUSH
16803: LD_LOC 25
16807: PUSH
16808: LD_VAR 0 7
16812: ARRAY
16813: PUSH
16814: LD_VAR 0 3
16818: ARRAY
16819: PUSH
16820: LD_VAR 0 5
16824: PLUS
16825: PPUSH
16826: CALL_OW 1
16830: PPUSH
16831: CALL_OW 1
16835: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
16836: LD_VAR 0 5
16840: PUSH
16841: LD_INT 0
16843: NONEQUAL
16844: PUSH
16845: LD_VAR 0 3
16849: PUSH
16850: LD_OWVAR 2
16854: EQUAL
16855: AND
16856: IFFALSE 16899
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
16858: LD_ADDR_LOC 26
16862: PUSH
16863: LD_LOC 26
16867: PPUSH
16868: LD_INT 3
16870: PUSH
16871: LD_VAR 0 7
16875: MUL
16876: PPUSH
16877: LD_LOC 25
16881: PUSH
16882: LD_VAR 0 7
16886: ARRAY
16887: PUSH
16888: LD_VAR 0 3
16892: ARRAY
16893: PPUSH
16894: CALL_OW 1
16898: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
16899: LD_LOC 25
16903: PUSH
16904: LD_VAR 0 7
16908: ARRAY
16909: PUSH
16910: LD_VAR 0 3
16914: ARRAY
16915: PUSH
16916: LD_LOC 20
16920: PUSH
16921: LD_VAR 0 7
16925: ARRAY
16926: GREATER
16927: IFFALSE 16954
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
16929: LD_ADDR_LOC 27
16933: PUSH
16934: LD_LOC 27
16938: PPUSH
16939: LD_VAR 0 3
16943: PPUSH
16944: LD_INT 1
16946: PPUSH
16947: CALL_OW 1
16951: ST_TO_ADDR
// end else
16952: GO 17041
// begin for j := 1 to Restricted_Builds do
16954: LD_ADDR_VAR 0 8
16958: PUSH
16959: DOUBLE
16960: LD_INT 1
16962: DEC
16963: ST_TO_ADDR
16964: LD_LOC 19
16968: PUSH
16969: FOR_TO
16970: IFFALSE 17014
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
16972: LD_LOC 25
16976: PUSH
16977: LD_VAR 0 8
16981: ARRAY
16982: PUSH
16983: LD_VAR 0 3
16987: ARRAY
16988: PUSH
16989: LD_LOC 20
16993: PUSH
16994: LD_VAR 0 8
16998: ARRAY
16999: GREATER
17000: IFFALSE 17012
// begin Is_Cheater := true ;
17002: LD_ADDR_VAR 0 9
17006: PUSH
17007: LD_INT 1
17009: ST_TO_ADDR
// break ;
17010: GO 17014
// end ;
17012: GO 16969
17014: POP
17015: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
17016: LD_ADDR_LOC 27
17020: PUSH
17021: LD_LOC 27
17025: PPUSH
17026: LD_VAR 0 3
17030: PPUSH
17031: LD_VAR 0 9
17035: PPUSH
17036: CALL_OW 1
17040: ST_TO_ADDR
// end ; break ;
17041: GO 17045
// end ;
17043: GO 16621
17045: POP
17046: POP
// end ;
17047: LD_VAR 0 6
17051: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
17052: LD_VAR 0 5
17056: PUSH
17057: LD_LOC 21
17061: IN
17062: PUSH
17063: LD_VAR 0 2
17067: PUSH
17068: LD_LOC 22
17072: IN
17073: OR
17074: PUSH
17075: LD_VAR 0 4
17079: PUSH
17080: LD_LOC 23
17084: IN
17085: OR
17086: PUSH
17087: LD_VAR 0 3
17091: PUSH
17092: LD_LOC 24
17096: IN
17097: OR
17098: IFFALSE 17109
// ComCancel ( factory ) ;
17100: LD_VAR 0 1
17104: PPUSH
17105: CALL_OW 127
// end ;
17109: PPOPN 5
17111: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
17112: LD_VAR 0 2
17116: PUSH
17117: LD_LOC 21
17121: IN
17122: IFFALSE 17133
// ComCancel ( building ) ;
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 127
// end ; end_of_file
17133: PPOPN 2
17135: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
17136: LD_INT 0
17138: PPUSH
17139: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
17140: LD_ADDR_VAR 0 2
17144: PUSH
17145: LD_STRING #Multi1x1-Time
17147: PUSH
17148: LD_OWVAR 1
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: ST_TO_ADDR
// if WaitServerStrings then
17157: LD_EXP 66
17161: IFFALSE 17179
// AllStrings = AllStrings ^ WaitServerStrings ;
17163: LD_ADDR_VAR 0 2
17167: PUSH
17168: LD_VAR 0 2
17172: PUSH
17173: LD_EXP 66
17177: ADD
17178: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
17179: LD_INT 0
17181: PUSH
17182: LD_EXP 18
17186: PUSH
17187: LD_OWVAR 1
17191: MINUS
17192: LESSEQUAL
17193: IFFALSE 17224
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
17195: LD_ADDR_VAR 0 2
17199: PUSH
17200: LD_VAR 0 2
17204: PUSH
17205: LD_STRING #allowedsibbomb
17207: PUSH
17208: LD_EXP 18
17212: PUSH
17213: LD_OWVAR 1
17217: MINUS
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: ADD
17223: ST_TO_ADDR
// if ( ExtraStrings ) then
17224: LD_EXP 65
17228: IFFALSE 17250
// AllStrings := AllStrings ^  ^ ExtraStrings ;
17230: LD_ADDR_VAR 0 2
17234: PUSH
17235: LD_VAR 0 2
17239: PUSH
17240: LD_STRING 
17242: ADD
17243: PUSH
17244: LD_EXP 65
17248: ADD
17249: ST_TO_ADDR
// if Display_kings and not isSGUI then
17250: LD_EXP 67
17254: PUSH
17255: LD_OWVAR 83
17259: NOT
17260: AND
17261: IFFALSE 17279
// AllStrings = AllStrings ^ Display_kings ;
17263: LD_ADDR_VAR 0 2
17267: PUSH
17268: LD_VAR 0 2
17272: PUSH
17273: LD_EXP 67
17277: ADD
17278: ST_TO_ADDR
// if ( LimitsStrings ) then
17279: CALL 13976 0 0
17283: IFFALSE 17305
// AllStrings := AllStrings ^  ^ LimitsStrings ;
17285: LD_ADDR_VAR 0 2
17289: PUSH
17290: LD_VAR 0 2
17294: PUSH
17295: LD_STRING 
17297: ADD
17298: PUSH
17299: CALL 13976 0 0
17303: ADD
17304: ST_TO_ADDR
// Display_Strings := AllStrings ;
17305: LD_ADDR_OWVAR 47
17309: PUSH
17310: LD_VAR 0 2
17314: ST_TO_ADDR
// end ;
17315: LD_VAR 0 1
17319: RET
// every 0 0$1 do
17320: GO 17322
17322: DISABLE
// begin ShowTimer ;
17323: CALL 17136 0 0
// enable ;
17327: ENABLE
// end ; end_of_file
17328: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
17329: LD_INT 0
17331: PPUSH
17332: PPUSH
17333: PPUSH
// sharedPoints1 = [ ] ;
17334: LD_ADDR_LOC 28
17338: PUSH
17339: EMPTY
17340: ST_TO_ADDR
// sharedPoints2 = [ ] ;
17341: LD_ADDR_LOC 29
17345: PUSH
17346: EMPTY
17347: ST_TO_ADDR
// sharedPoints3 = [ ] ;
17348: LD_ADDR_LOC 30
17352: PUSH
17353: EMPTY
17354: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
17355: LD_ADDR_VAR 0 2
17359: PUSH
17360: DOUBLE
17361: LD_INT 1
17363: DEC
17364: ST_TO_ADDR
17365: LD_EXP 23
17369: PUSH
17370: LD_INT 0
17372: PLUS
17373: PUSH
17374: FOR_TO
17375: IFFALSE 17477
// begin if not Side_Positions [ i ] = 0 then
17377: LD_EXP 23
17381: PUSH
17382: LD_VAR 0 2
17386: ARRAY
17387: PUSH
17388: LD_INT 0
17390: EQUAL
17391: NOT
17392: IFFALSE 17406
// SetMultiScore ( i , 0 ) ;
17394: LD_VAR 0 2
17398: PPUSH
17399: LD_INT 0
17401: PPUSH
17402: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
17406: LD_ADDR_LOC 28
17410: PUSH
17411: LD_LOC 28
17415: PPUSH
17416: LD_VAR 0 2
17420: PPUSH
17421: LD_INT 0
17423: PPUSH
17424: CALL_OW 1
17428: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
17429: LD_ADDR_LOC 29
17433: PUSH
17434: LD_LOC 29
17438: PPUSH
17439: LD_VAR 0 2
17443: PPUSH
17444: LD_INT 0
17446: PPUSH
17447: CALL_OW 1
17451: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
17452: LD_ADDR_LOC 30
17456: PUSH
17457: LD_LOC 30
17461: PPUSH
17462: LD_VAR 0 2
17466: PPUSH
17467: LD_INT 0
17469: PPUSH
17470: CALL_OW 1
17474: ST_TO_ADDR
// end ;
17475: GO 17374
17477: POP
17478: POP
// pointGame = true ;
17479: LD_ADDR_LOC 31
17483: PUSH
17484: LD_INT 1
17486: ST_TO_ADDR
// end ;
17487: LD_VAR 0 1
17491: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
17492: LD_LOC 31
17496: IFFALSE 17907
17498: GO 17500
17500: DISABLE
17501: LD_INT 0
17503: PPUSH
17504: PPUSH
17505: PPUSH
17506: PPUSH
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
// begin if isSGUI then
17516: LD_OWVAR 83
17520: IFFALSE 17907
// begin if Teams [ 1 ] then
17522: LD_EXP 22
17526: PUSH
17527: LD_INT 1
17529: ARRAY
17530: IFFALSE 17542
// red = true else
17532: LD_ADDR_VAR 0 2
17536: PUSH
17537: LD_INT 1
17539: ST_TO_ADDR
17540: GO 17550
// red = false ;
17542: LD_ADDR_VAR 0 2
17546: PUSH
17547: LD_INT 0
17549: ST_TO_ADDR
// if Teams [ 2 ] then
17550: LD_EXP 22
17554: PUSH
17555: LD_INT 2
17557: ARRAY
17558: IFFALSE 17570
// blue = true else
17560: LD_ADDR_VAR 0 3
17564: PUSH
17565: LD_INT 1
17567: ST_TO_ADDR
17568: GO 17578
// blue = false ;
17570: LD_ADDR_VAR 0 3
17574: PUSH
17575: LD_INT 0
17577: ST_TO_ADDR
// if Teams [ 3 ] then
17578: LD_EXP 22
17582: PUSH
17583: LD_INT 3
17585: ARRAY
17586: IFFALSE 17598
// yel = true else
17588: LD_ADDR_VAR 0 4
17592: PUSH
17593: LD_INT 1
17595: ST_TO_ADDR
17596: GO 17606
// yel = false ;
17598: LD_ADDR_VAR 0 4
17602: PUSH
17603: LD_INT 0
17605: ST_TO_ADDR
// if Teams [ 4 ] then
17606: LD_EXP 22
17610: PUSH
17611: LD_INT 4
17613: ARRAY
17614: IFFALSE 17626
// green = true else
17616: LD_ADDR_VAR 0 5
17620: PUSH
17621: LD_INT 1
17623: ST_TO_ADDR
17624: GO 17634
// green = false ;
17626: LD_ADDR_VAR 0 5
17630: PUSH
17631: LD_INT 0
17633: ST_TO_ADDR
// if def_public_score then
17634: LD_EXP 6
17638: IFFALSE 17650
// p = true else
17640: LD_ADDR_VAR 0 12
17644: PUSH
17645: LD_INT 1
17647: ST_TO_ADDR
17648: GO 17658
// p = false ;
17650: LD_ADDR_VAR 0 12
17654: PUSH
17655: LD_INT 0
17657: ST_TO_ADDR
// if team_game then
17658: LD_EXP 25
17662: IFFALSE 17743
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
17664: LD_ADDR_VAR 0 13
17668: PUSH
17669: LD_INT 3
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: LD_INT 2
17677: PUSH
17678: LD_INT 7
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: PUSH
17687: LD_EXP 28
17691: ARRAY
17692: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
17693: LD_ADDR_VAR 0 10
17697: PUSH
17698: LD_STRING {
17700: PUSH
17701: LD_VAR 0 3
17705: STR
17706: PUSH
17707: LD_STRING ,
17709: STR
17710: PUSH
17711: LD_VAR 0 4
17715: STR
17716: PUSH
17717: LD_STRING ,
17719: STR
17720: PUSH
17721: LD_VAR 0 2
17725: STR
17726: PUSH
17727: LD_STRING ,0,0,0,
17729: STR
17730: PUSH
17731: LD_VAR 0 5
17735: STR
17736: PUSH
17737: LD_STRING ,0}
17739: STR
17740: ST_TO_ADDR
// end else
17741: GO 17843
// begin you = your_side ;
17743: LD_ADDR_VAR 0 13
17747: PUSH
17748: LD_OWVAR 2
17752: ST_TO_ADDR
// s = { ;
17753: LD_ADDR_VAR 0 10
17757: PUSH
17758: LD_STRING {
17760: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
17761: LD_ADDR_VAR 0 1
17765: PUSH
17766: DOUBLE
17767: LD_INT 1
17769: DEC
17770: ST_TO_ADDR
17771: LD_EXP 23
17775: PUSH
17776: LD_INT 0
17778: PLUS
17779: PUSH
17780: FOR_TO
17781: IFFALSE 17827
// if side_positions [ i ] then
17783: LD_EXP 23
17787: PUSH
17788: LD_VAR 0 1
17792: ARRAY
17793: IFFALSE 17811
// s = s & 1, else
17795: LD_ADDR_VAR 0 10
17799: PUSH
17800: LD_VAR 0 10
17804: PUSH
17805: LD_STRING 1,
17807: STR
17808: ST_TO_ADDR
17809: GO 17825
// s = s & 0, ;
17811: LD_ADDR_VAR 0 10
17815: PUSH
17816: LD_VAR 0 10
17820: PUSH
17821: LD_STRING 0,
17823: STR
17824: ST_TO_ADDR
17825: GO 17780
17827: POP
17828: POP
// s = s & } ;
17829: LD_ADDR_VAR 0 10
17833: PUSH
17834: LD_VAR 0 10
17838: PUSH
17839: LD_STRING }
17841: STR
17842: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
17843: LD_STRING initScore(
17845: PUSH
17846: LD_VAR 0 10
17850: STR
17851: PUSH
17852: LD_STRING ,
17854: STR
17855: PUSH
17856: LD_VAR 0 12
17860: STR
17861: PUSH
17862: LD_STRING ,
17864: STR
17865: PUSH
17866: LD_VAR 0 13
17870: STR
17871: PUSH
17872: LD_STRING  );
17874: STR
17875: PPUSH
17876: CALL_OW 559
// if game_type = 3 then
17880: LD_EXP 48
17884: PUSH
17885: LD_INT 3
17887: EQUAL
17888: IFFALSE 17907
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
17890: LD_STRING AddScorePoints(2,2,
17892: PUSH
17893: LD_EXP 20
17897: STR
17898: PUSH
17899: LD_STRING  );
17901: STR
17902: PPUSH
17903: CALL_OW 559
// end ; end ;
17907: PPOPN 13
17909: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
17910: LD_INT 0
17912: PPUSH
17913: PPUSH
// case typ of 1 :
17914: LD_VAR 0 3
17918: PUSH
17919: LD_INT 1
17921: DOUBLE
17922: EQUAL
17923: IFTRUE 17927
17925: GO 17955
17927: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
17928: LD_ADDR_LOC 28
17932: PUSH
17933: LD_LOC 28
17937: PPUSH
17938: LD_VAR 0 1
17942: PPUSH
17943: LD_VAR 0 2
17947: PPUSH
17948: CALL_OW 1
17952: ST_TO_ADDR
17953: GO 18028
17955: LD_INT 2
17957: DOUBLE
17958: EQUAL
17959: IFTRUE 17963
17961: GO 17991
17963: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
17964: LD_ADDR_LOC 29
17968: PUSH
17969: LD_LOC 29
17973: PPUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: LD_VAR 0 2
17983: PPUSH
17984: CALL_OW 1
17988: ST_TO_ADDR
17989: GO 18028
17991: LD_INT 3
17993: DOUBLE
17994: EQUAL
17995: IFTRUE 17999
17997: GO 18027
17999: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
18000: LD_ADDR_LOC 30
18004: PUSH
18005: LD_LOC 30
18009: PPUSH
18010: LD_VAR 0 1
18014: PPUSH
18015: LD_VAR 0 2
18019: PPUSH
18020: CALL_OW 1
18024: ST_TO_ADDR
18025: GO 18028
18027: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
18028: LD_ADDR_VAR 0 5
18032: PUSH
18033: LD_LOC 28
18037: PUSH
18038: LD_VAR 0 1
18042: ARRAY
18043: PUSH
18044: LD_LOC 29
18048: PUSH
18049: LD_VAR 0 1
18053: ARRAY
18054: PLUS
18055: PUSH
18056: LD_LOC 30
18060: PUSH
18061: LD_VAR 0 1
18065: ARRAY
18066: PLUS
18067: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
18068: LD_VAR 0 1
18072: PPUSH
18073: LD_VAR 0 5
18077: PPUSH
18078: CALL_OW 506
// end ; end_of_file
18082: LD_VAR 0 4
18086: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
18087: LD_INT 0
18089: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
18090: LD_VAR 0 1
18094: PPUSH
18095: CALL_OW 255
18099: PUSH
18100: LD_VAR 0 4
18104: EQUAL
18105: IFFALSE 18124
// begin SetAchievement ( ACH_RAD ) ;
18107: LD_STRING ACH_RAD
18109: PPUSH
18110: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
18114: LD_STRING ACH_NL
18116: PPUSH
18117: LD_INT 1
18119: PPUSH
18120: CALL_OW 564
// end end ;
18124: LD_VAR 0 5
18128: RET
// export function SA_Win ( side ) ; begin
18129: LD_INT 0
18131: PPUSH
// case side of 1 :
18132: LD_VAR 0 1
18136: PUSH
18137: LD_INT 1
18139: DOUBLE
18140: EQUAL
18141: IFTRUE 18145
18143: GO 18158
18145: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18146: LD_STRING ACH_AH
18148: PPUSH
18149: LD_INT 1
18151: PPUSH
18152: CALL_OW 564
18156: GO 18321
18158: LD_INT 2
18160: DOUBLE
18161: EQUAL
18162: IFTRUE 18166
18164: GO 18179
18166: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18167: LD_STRING ACH_E
18169: PPUSH
18170: LD_INT 1
18172: PPUSH
18173: CALL_OW 564
18177: GO 18321
18179: LD_INT 3
18181: DOUBLE
18182: EQUAL
18183: IFTRUE 18187
18185: GO 18200
18187: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18188: LD_STRING ACH_OOL
18190: PPUSH
18191: LD_INT 1
18193: PPUSH
18194: CALL_OW 564
18198: GO 18321
18200: LD_INT 1
18202: PUSH
18203: LD_INT 2
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: DOUBLE
18210: EQUAL
18211: IFTRUE 18215
18213: GO 18240
18215: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18216: LD_STRING ACH_AH
18218: PPUSH
18219: LD_REAL  5.00000000000000E-0001
18222: PPUSH
18223: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18227: LD_STRING ACH_E
18229: PPUSH
18230: LD_REAL  5.00000000000000E-0001
18233: PPUSH
18234: CALL_OW 564
// end ; [ 2 , 3 ] :
18238: GO 18321
18240: LD_INT 2
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: DOUBLE
18250: EQUAL
18251: IFTRUE 18255
18253: GO 18280
18255: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18256: LD_STRING ACH_OOL
18258: PPUSH
18259: LD_REAL  5.00000000000000E-0001
18262: PPUSH
18263: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18267: LD_STRING ACH_E
18269: PPUSH
18270: LD_REAL  5.00000000000000E-0001
18273: PPUSH
18274: CALL_OW 564
// end ; [ 3 , 1 ] :
18278: GO 18321
18280: LD_INT 3
18282: PUSH
18283: LD_INT 1
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: DOUBLE
18290: EQUAL
18291: IFTRUE 18295
18293: GO 18320
18295: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18296: LD_STRING ACH_AH
18298: PPUSH
18299: LD_REAL  5.00000000000000E-0001
18302: PPUSH
18303: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18307: LD_STRING ACH_OOL
18309: PPUSH
18310: LD_REAL  5.00000000000000E-0001
18313: PPUSH
18314: CALL_OW 564
// end ; end ;
18318: GO 18321
18320: POP
// end ; end_of_file
18321: LD_VAR 0 2
18325: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
18326: LD_INT 0
18328: PPUSH
18329: PPUSH
// enable ( 98 ) ;
18330: LD_INT 98
18332: ENABLE_MARKED
// GameEnded = false ;
18333: LD_ADDR_LOC 33
18337: PUSH
18338: LD_INT 0
18340: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18341: LD_ADDR_LOC 32
18345: PUSH
18346: LD_INT 0
18348: PUSH
18349: LD_INT 0
18351: PUSH
18352: LD_INT 0
18354: PUSH
18355: LD_INT 0
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 0
18366: PUSH
18367: LD_INT 0
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: ST_TO_ADDR
// unfoged = false ;
18380: LD_ADDR_LOC 34
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// for i = 1 to side_positions do
18388: LD_ADDR_VAR 0 2
18392: PUSH
18393: DOUBLE
18394: LD_INT 1
18396: DEC
18397: ST_TO_ADDR
18398: LD_EXP 23
18402: PUSH
18403: FOR_TO
18404: IFFALSE 18444
// if not side_positions [ i ] then
18406: LD_EXP 23
18410: PUSH
18411: LD_VAR 0 2
18415: ARRAY
18416: NOT
18417: IFFALSE 18442
// defaited = replace ( defaited , i , true ) ;
18419: LD_ADDR_LOC 32
18423: PUSH
18424: LD_LOC 32
18428: PPUSH
18429: LD_VAR 0 2
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: CALL_OW 1
18441: ST_TO_ADDR
18442: GO 18403
18444: POP
18445: POP
// end ;
18446: LD_VAR 0 1
18450: RET
// function CanWinLoose ; begin
18451: LD_INT 0
18453: PPUSH
// Result := true ;
18454: LD_ADDR_VAR 0 1
18458: PUSH
18459: LD_INT 1
18461: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
18462: CALL_OW 518
18466: PUSH
18467: CALL_OW 519
18471: PUSH
18472: LD_INT 0
18474: GREATER
18475: AND
18476: IFFALSE 18486
// Result := false ;
18478: LD_ADDR_VAR 0 1
18482: PUSH
18483: LD_INT 0
18485: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18486: CALL_OW 531
18490: PUSH
18491: CALL_OW 519
18495: PUSH
18496: LD_INT 1
18498: GREATER
18499: AND
18500: IFFALSE 18510
// Result := false ;
18502: LD_ADDR_VAR 0 1
18506: PUSH
18507: LD_INT 0
18509: ST_TO_ADDR
// end ;
18510: LD_VAR 0 1
18514: RET
// export function HasPower ( i ) ; var k , h ; begin
18515: LD_INT 0
18517: PPUSH
18518: PPUSH
18519: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18520: LD_VAR 0 1
18524: PPUSH
18525: CALL_OW 108
18529: NOT
18530: PUSH
18531: LD_EXP 26
18535: PUSH
18536: LD_VAR 0 1
18540: ARRAY
18541: NOT
18542: AND
18543: PUSH
18544: LD_OWVAR 4
18548: AND
18549: IFFALSE 18561
// begin result = false ;
18551: LD_ADDR_VAR 0 2
18555: PUSH
18556: LD_INT 0
18558: ST_TO_ADDR
// end else
18559: GO 18856
// case def_win_rules of 0 :
18561: LD_EXP 19
18565: PUSH
18566: LD_INT 0
18568: DOUBLE
18569: EQUAL
18570: IFTRUE 18574
18572: GO 18737
18574: POP
// if def_people_respawning then
18575: LD_EXP 60
18579: IFFALSE 18670
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
18581: LD_ADDR_VAR 0 2
18585: PUSH
18586: LD_INT 22
18588: PUSH
18589: LD_VAR 0 1
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 2
18600: PUSH
18601: LD_INT 21
18603: PUSH
18604: LD_INT 1
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 33
18613: PUSH
18614: LD_INT 3
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 33
18623: PUSH
18624: LD_INT 5
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 30
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 30
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PPUSH
18663: CALL_OW 69
18667: ST_TO_ADDR
18668: GO 18735
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: LD_INT 22
18677: PUSH
18678: LD_VAR 0 1
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 2
18689: PUSH
18690: LD_INT 21
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 33
18702: PUSH
18703: LD_INT 3
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 33
18712: PUSH
18713: LD_INT 5
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PPUSH
18730: CALL_OW 69
18734: ST_TO_ADDR
18735: GO 18856
18737: LD_INT 1
18739: DOUBLE
18740: EQUAL
18741: IFTRUE 18745
18743: GO 18784
18745: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
18746: LD_ADDR_VAR 0 2
18750: PUSH
18751: LD_INT 22
18753: PUSH
18754: LD_VAR 0 1
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PUSH
18763: LD_INT 21
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PPUSH
18777: CALL_OW 69
18781: ST_TO_ADDR
18782: GO 18856
18784: LD_INT 2
18786: DOUBLE
18787: EQUAL
18788: IFTRUE 18792
18790: GO 18855
18792: POP
// begin h = false ;
18793: LD_ADDR_VAR 0 4
18797: PUSH
18798: LD_INT 0
18800: ST_TO_ADDR
// for k in heroes [ i ] do
18801: LD_ADDR_VAR 0 3
18805: PUSH
18806: LD_EXP 35
18810: PUSH
18811: LD_VAR 0 1
18815: ARRAY
18816: PUSH
18817: FOR_IN
18818: IFFALSE 18841
// if IsLive ( k ) then
18820: LD_VAR 0 3
18824: PPUSH
18825: CALL_OW 300
18829: IFFALSE 18839
// h = true ;
18831: LD_ADDR_VAR 0 4
18835: PUSH
18836: LD_INT 1
18838: ST_TO_ADDR
18839: GO 18817
18841: POP
18842: POP
// Result := h ;
18843: LD_ADDR_VAR 0 2
18847: PUSH
18848: LD_VAR 0 4
18852: ST_TO_ADDR
// end ; end ;
18853: GO 18856
18855: POP
// end ;
18856: LD_VAR 0 2
18860: RET
// function AlliedSides ( i , j ) ; begin
18861: LD_INT 0
18863: PPUSH
// Result := false ;
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: LD_INT 0
18871: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
18872: LD_VAR 0 1
18876: PPUSH
18877: LD_VAR 0 2
18881: PPUSH
18882: CALL_OW 81
18886: PUSH
18887: LD_INT 1
18889: EQUAL
18890: PUSH
18891: LD_VAR 0 2
18895: PPUSH
18896: LD_VAR 0 1
18900: PPUSH
18901: CALL_OW 81
18905: PUSH
18906: LD_INT 1
18908: EQUAL
18909: AND
18910: PUSH
18911: LD_VAR 0 1
18915: PPUSH
18916: CALL_OW 83
18920: AND
18921: PUSH
18922: LD_VAR 0 2
18926: PPUSH
18927: CALL_OW 83
18931: AND
18932: IFFALSE 18942
// Result := true ;
18934: LD_ADDR_VAR 0 3
18938: PUSH
18939: LD_INT 1
18941: ST_TO_ADDR
// end ;
18942: LD_VAR 0 3
18946: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
18947: CALL 18451 0 0
18951: PUSH
18952: LD_LOC 33
18956: NOT
18957: AND
18958: IFFALSE 18974
18960: GO 18962
18962: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
18963: LD_ADDR_EXP 66
18967: PUSH
18968: LD_STRING #Player-Ended
18970: PUSH
18971: EMPTY
18972: LIST
18973: ST_TO_ADDR
18974: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
18975: CALL 18451 0 0
18979: PUSH
18980: LD_LOC 33
18984: AND
18985: IFFALSE 18994
18987: GO 18989
18989: DISABLE
// YouLostInMultiplayer ;
18990: CALL_OW 107
18994: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
18995: CALL 18451 0 0
18999: NOT
19000: PUSH
19001: CALL_OW 531
19005: NOT
19006: AND
19007: IFFALSE 19023
19009: GO 19011
19011: DISABLE
// WaitServerStrings = [ #server-wait ] ;
19012: LD_ADDR_EXP 66
19016: PUSH
19017: LD_STRING #server-wait
19019: PUSH
19020: EMPTY
19021: LIST
19022: ST_TO_ADDR
19023: END
// every 100 trigger IAmSpec do
19024: CALL_OW 531
19028: IFFALSE 19044
19030: GO 19032
19032: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
19033: LD_ADDR_EXP 66
19037: PUSH
19038: LD_STRING #Player-IAmSpec
19040: PUSH
19041: EMPTY
19042: LIST
19043: ST_TO_ADDR
19044: END
// every 100 trigger GameEnded and IAmSpec do
19045: LD_LOC 33
19049: PUSH
19050: CALL_OW 531
19054: AND
19055: IFFALSE 19064
19057: GO 19059
19059: DISABLE
// YouLostInMultiplayer ;
19060: CALL_OW 107
19064: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
19065: CALL 18451 0 0
19069: PUSH
19070: LD_LOC 33
19074: NOT
19075: AND
19076: IFFALSE 19092
19078: GO 19080
19080: DISABLE
// WaitServerStrings = [ $player-win ] ;
19081: LD_ADDR_EXP 66
19085: PUSH
19086: LD_STRING $player-win
19088: PUSH
19089: EMPTY
19090: LIST
19091: ST_TO_ADDR
19092: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
19093: CALL 18451 0 0
19097: PUSH
19098: LD_LOC 33
19102: AND
19103: IFFALSE 19127
19105: GO 19107
19107: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
19108: LD_EXP 24
19112: PUSH
19113: LD_OWVAR 2
19117: ARRAY
19118: PPUSH
19119: CALL 18129 0 1
// YouWinInMultiplayer ;
19123: CALL_OW 106
// end ;
19127: END
// every 100 trigger isEditor marked 401 do
19128: LD_OWVAR 84
19132: IFFALSE 19148
19134: GO 19136
19136: DISABLE
// Debug_Strings = [ You won ] ;
19137: LD_ADDR_OWVAR 48
19141: PUSH
19142: LD_STRING You won
19144: PUSH
19145: EMPTY
19146: LIST
19147: ST_TO_ADDR
19148: END
// every 100 trigger isEditor marked 400 do
19149: LD_OWVAR 84
19153: IFFALSE 19169
19155: GO 19157
19157: DISABLE
// Debug_Strings = [ You loss ] ;
19158: LD_ADDR_OWVAR 48
19162: PUSH
19163: LD_STRING You loss
19165: PUSH
19166: EMPTY
19167: LIST
19168: ST_TO_ADDR
19169: END
// every 100 marked 98 do var i , un ;
19170: GO 19172
19172: DISABLE
19173: LD_INT 0
19175: PPUSH
19176: PPUSH
// begin for i = 1 to side_positions do
19177: LD_ADDR_VAR 0 1
19181: PUSH
19182: DOUBLE
19183: LD_INT 1
19185: DEC
19186: ST_TO_ADDR
19187: LD_EXP 23
19191: PUSH
19192: FOR_TO
19193: IFFALSE 19316
// if side_positions [ i ] then
19195: LD_EXP 23
19199: PUSH
19200: LD_VAR 0 1
19204: ARRAY
19205: IFFALSE 19314
// if not HasPower ( i ) and not Defaited [ i ] then
19207: LD_VAR 0 1
19211: PPUSH
19212: CALL 18515 0 1
19216: NOT
19217: PUSH
19218: LD_LOC 32
19222: PUSH
19223: LD_VAR 0 1
19227: ARRAY
19228: NOT
19229: AND
19230: IFFALSE 19314
// begin un = filterallunits ( [ f_side , i ] ) ;
19232: LD_ADDR_VAR 0 2
19236: PUSH
19237: LD_INT 22
19239: PUSH
19240: LD_VAR 0 1
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PPUSH
19249: CALL_OW 69
19253: ST_TO_ADDR
// if un then
19254: LD_VAR 0 2
19258: IFFALSE 19272
// SetSide ( un , 0 ) ;
19260: LD_VAR 0 2
19264: PPUSH
19265: LD_INT 0
19267: PPUSH
19268: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
19272: LD_ADDR_LOC 32
19276: PUSH
19277: LD_LOC 32
19281: PPUSH
19282: LD_VAR 0 1
19286: PPUSH
19287: LD_INT 1
19289: PPUSH
19290: CALL_OW 1
19294: ST_TO_ADDR
// if i = your_side then
19295: LD_VAR 0 1
19299: PUSH
19300: LD_OWVAR 2
19304: EQUAL
19305: IFFALSE 19314
// begin Multiplayer_Loose_Message ;
19307: CALL_OW 521
// enable ( 400 ) ;
19311: LD_INT 400
19313: ENABLE_MARKED
// end ; end ;
19314: GO 19192
19316: POP
19317: POP
// if not Unfoged and defaited [ your_side ] then
19318: LD_LOC 34
19322: NOT
19323: PUSH
19324: LD_LOC 32
19328: PUSH
19329: LD_OWVAR 2
19333: ARRAY
19334: AND
19335: IFFALSE 19341
// Unfog ;
19337: CALL 19527 0 0
// DidGameEnd ;
19341: CALL 19356 0 0
// if not GameEnded then
19345: LD_LOC 33
19349: NOT
19350: IFFALSE 19353
// enable ;
19352: ENABLE
// end ;
19353: PPOPN 2
19355: END
// function DidGameEnd ; var i , k , enemy ; begin
19356: LD_INT 0
19358: PPUSH
19359: PPUSH
19360: PPUSH
19361: PPUSH
// enemy = [ ] ;
19362: LD_ADDR_VAR 0 4
19366: PUSH
19367: EMPTY
19368: ST_TO_ADDR
// for i = 1 to side_positions do
19369: LD_ADDR_VAR 0 2
19373: PUSH
19374: DOUBLE
19375: LD_INT 1
19377: DEC
19378: ST_TO_ADDR
19379: LD_EXP 23
19383: PUSH
19384: FOR_TO
19385: IFFALSE 19489
// if not defaited [ i ] then
19387: LD_LOC 32
19391: PUSH
19392: LD_VAR 0 2
19396: ARRAY
19397: NOT
19398: IFFALSE 19487
// for k = 1 to side_positions do
19400: LD_ADDR_VAR 0 3
19404: PUSH
19405: DOUBLE
19406: LD_INT 1
19408: DEC
19409: ST_TO_ADDR
19410: LD_EXP 23
19414: PUSH
19415: FOR_TO
19416: IFFALSE 19485
// if not defaited [ k ] then
19418: LD_LOC 32
19422: PUSH
19423: LD_VAR 0 3
19427: ARRAY
19428: NOT
19429: IFFALSE 19483
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
19431: LD_VAR 0 2
19435: PPUSH
19436: LD_VAR 0 3
19440: PPUSH
19441: CALL_OW 81
19445: PUSH
19446: LD_INT 2
19448: PUSH
19449: LD_INT 0
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: IN
19456: IFFALSE 19483
// enemy = enemy ^ [ i , k ] ;
19458: LD_ADDR_VAR 0 4
19462: PUSH
19463: LD_VAR 0 4
19467: PUSH
19468: LD_VAR 0 2
19472: PUSH
19473: LD_VAR 0 3
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: ADD
19482: ST_TO_ADDR
19483: GO 19415
19485: POP
19486: POP
19487: GO 19384
19489: POP
19490: POP
// if not enemy then
19491: LD_VAR 0 4
19495: NOT
19496: IFFALSE 19522
// begin GameEnded = true ;
19498: LD_ADDR_LOC 33
19502: PUSH
19503: LD_INT 1
19505: ST_TO_ADDR
// if not defaited [ your_side ] then
19506: LD_LOC 32
19510: PUSH
19511: LD_OWVAR 2
19515: ARRAY
19516: NOT
19517: IFFALSE 19522
// enable ( 401 ) ;
19519: LD_INT 401
19521: ENABLE_MARKED
// end ; end ;
19522: LD_VAR 0 1
19526: RET
// function unfog ; var k , friends ; begin
19527: LD_INT 0
19529: PPUSH
19530: PPUSH
19531: PPUSH
// for k = 1 to side_positions do
19532: LD_ADDR_VAR 0 2
19536: PUSH
19537: DOUBLE
19538: LD_INT 1
19540: DEC
19541: ST_TO_ADDR
19542: LD_EXP 23
19546: PUSH
19547: FOR_TO
19548: IFFALSE 19604
// if not defaited [ k ] then
19550: LD_LOC 32
19554: PUSH
19555: LD_VAR 0 2
19559: ARRAY
19560: NOT
19561: IFFALSE 19602
// if GetAttitude ( your_side , k ) in [ att_friend ] then
19563: LD_OWVAR 2
19567: PPUSH
19568: LD_VAR 0 2
19572: PPUSH
19573: CALL_OW 81
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: EMPTY
19582: LIST
19583: IN
19584: IFFALSE 19602
// friends = friends ^ k ;
19586: LD_ADDR_VAR 0 3
19590: PUSH
19591: LD_VAR 0 3
19595: PUSH
19596: LD_VAR 0 2
19600: ADD
19601: ST_TO_ADDR
19602: GO 19547
19604: POP
19605: POP
// if not friends then
19606: LD_VAR 0 3
19610: NOT
19611: IFFALSE 19628
// begin fogoff ( true ) ;
19613: LD_INT 1
19615: PPUSH
19616: CALL_OW 344
// unfoged = true ;
19620: LD_ADDR_LOC 34
19624: PUSH
19625: LD_INT 1
19627: ST_TO_ADDR
// end ; end ;
19628: LD_VAR 0 1
19632: RET
// export function MakeGameEnd ; begin
19633: LD_INT 0
19635: PPUSH
// fogoff ( true ) ;
19636: LD_INT 1
19638: PPUSH
19639: CALL_OW 344
// unfoged = true ;
19643: LD_ADDR_LOC 34
19647: PUSH
19648: LD_INT 1
19650: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19651: LD_INT 175
19653: PPUSH
19654: CALL_OW 67
// GameEnded = true ;
19658: LD_ADDR_LOC 33
19662: PUSH
19663: LD_INT 1
19665: ST_TO_ADDR
// end ;
19666: LD_VAR 0 1
19670: RET
// export function GetGameEnded ; begin
19671: LD_INT 0
19673: PPUSH
// result = GameEnded ;
19674: LD_ADDR_VAR 0 1
19678: PUSH
19679: LD_LOC 33
19683: ST_TO_ADDR
// end ; end_of_file
19684: LD_VAR 0 1
19688: RET
// var win ; export function init_kings_counting ; var i ; begin
19689: LD_INT 0
19691: PPUSH
19692: PPUSH
// mp_with_score := true ;
19693: LD_ADDR_OWVAR 14
19697: PUSH
19698: LD_INT 1
19700: ST_TO_ADDR
// ResetMultiScore ;
19701: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19705: LD_INT 19
19707: PPUSH
19708: LD_INT 1
19710: PPUSH
19711: CALL_OW 424
// enable ( 2 ) ;
19715: LD_INT 2
19717: ENABLE_MARKED
// end ;
19718: LD_VAR 0 1
19722: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19723: LD_INT 0
19725: PPUSH
19726: PPUSH
19727: PPUSH
19728: PPUSH
19729: PPUSH
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
// vypis := [ ] ;
19734: LD_ADDR_VAR 0 3
19738: PUSH
19739: EMPTY
19740: ST_TO_ADDR
// red = 0 ;
19741: LD_ADDR_VAR 0 5
19745: PUSH
19746: LD_INT 0
19748: ST_TO_ADDR
// blue = 0 ;
19749: LD_ADDR_VAR 0 6
19753: PUSH
19754: LD_INT 0
19756: ST_TO_ADDR
// yel = 0 ;
19757: LD_ADDR_VAR 0 7
19761: PUSH
19762: LD_INT 0
19764: ST_TO_ADDR
// green = 0 ;
19765: LD_ADDR_VAR 0 8
19769: PUSH
19770: LD_INT 0
19772: ST_TO_ADDR
// if def_public_score or isSGUI then
19773: LD_EXP 6
19777: PUSH
19778: LD_OWVAR 83
19782: OR
19783: IFFALSE 20398
// if not Team_Game then
19785: LD_EXP 25
19789: NOT
19790: IFFALSE 19922
// begin for side = 1 to Side_Positions do
19792: LD_ADDR_VAR 0 2
19796: PUSH
19797: DOUBLE
19798: LD_INT 1
19800: DEC
19801: ST_TO_ADDR
19802: LD_EXP 23
19806: PUSH
19807: FOR_TO
19808: IFFALSE 19918
// if Side_Positions [ side ] then
19810: LD_EXP 23
19814: PUSH
19815: LD_VAR 0 2
19819: ARRAY
19820: IFFALSE 19916
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
19822: LD_ADDR_VAR 0 3
19826: PUSH
19827: LD_VAR 0 3
19831: PUSH
19832: LD_STRING #KingoftheHill-Public
19834: PUSH
19835: LD_VAR 0 2
19839: PUSH
19840: LD_VAR 0 2
19844: PUSH
19845: LD_VAR 0 2
19849: PUSH
19850: LD_INT 10
19852: PLUS
19853: PPUSH
19854: CALL_OW 110
19858: PUSH
19859: LD_INT 3
19861: DIV
19862: PUSH
19863: LD_EXP 20
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: ADD
19875: ST_TO_ADDR
// ToLua ( updateScorePoints(2, & side & , & ( GetTag ( side + 10 ) div 3 ) & ); ) ;
19876: LD_STRING updateScorePoints(2,
19878: PUSH
19879: LD_VAR 0 2
19883: STR
19884: PUSH
19885: LD_STRING ,
19887: STR
19888: PUSH
19889: LD_VAR 0 2
19893: PUSH
19894: LD_INT 10
19896: PLUS
19897: PPUSH
19898: CALL_OW 110
19902: PUSH
19903: LD_INT 3
19905: DIV
19906: STR
19907: PUSH
19908: LD_STRING );
19910: STR
19911: PPUSH
19912: CALL_OW 559
// end ;
19916: GO 19807
19918: POP
19919: POP
// end else
19920: GO 20396
// begin if Teams [ 1 ] then
19922: LD_EXP 22
19926: PUSH
19927: LD_INT 1
19929: ARRAY
19930: IFFALSE 19982
// for i in Teams [ 1 ] do
19932: LD_ADDR_VAR 0 4
19936: PUSH
19937: LD_EXP 22
19941: PUSH
19942: LD_INT 1
19944: ARRAY
19945: PUSH
19946: FOR_IN
19947: IFFALSE 19980
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19949: LD_ADDR_VAR 0 5
19953: PUSH
19954: LD_VAR 0 5
19958: PUSH
19959: LD_VAR 0 4
19963: PUSH
19964: LD_INT 10
19966: PLUS
19967: PPUSH
19968: CALL_OW 110
19972: PUSH
19973: LD_INT 3
19975: DIV
19976: PLUS
19977: ST_TO_ADDR
19978: GO 19946
19980: POP
19981: POP
// if Teams [ 2 ] then
19982: LD_EXP 22
19986: PUSH
19987: LD_INT 2
19989: ARRAY
19990: IFFALSE 20042
// for i in Teams [ 2 ] do
19992: LD_ADDR_VAR 0 4
19996: PUSH
19997: LD_EXP 22
20001: PUSH
20002: LD_INT 2
20004: ARRAY
20005: PUSH
20006: FOR_IN
20007: IFFALSE 20040
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20009: LD_ADDR_VAR 0 6
20013: PUSH
20014: LD_VAR 0 6
20018: PUSH
20019: LD_VAR 0 4
20023: PUSH
20024: LD_INT 10
20026: PLUS
20027: PPUSH
20028: CALL_OW 110
20032: PUSH
20033: LD_INT 3
20035: DIV
20036: PLUS
20037: ST_TO_ADDR
20038: GO 20006
20040: POP
20041: POP
// if Teams [ 3 ] then
20042: LD_EXP 22
20046: PUSH
20047: LD_INT 3
20049: ARRAY
20050: IFFALSE 20102
// for i in Teams [ 3 ] do
20052: LD_ADDR_VAR 0 4
20056: PUSH
20057: LD_EXP 22
20061: PUSH
20062: LD_INT 3
20064: ARRAY
20065: PUSH
20066: FOR_IN
20067: IFFALSE 20100
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20069: LD_ADDR_VAR 0 7
20073: PUSH
20074: LD_VAR 0 7
20078: PUSH
20079: LD_VAR 0 4
20083: PUSH
20084: LD_INT 10
20086: PLUS
20087: PPUSH
20088: CALL_OW 110
20092: PUSH
20093: LD_INT 3
20095: DIV
20096: PLUS
20097: ST_TO_ADDR
20098: GO 20066
20100: POP
20101: POP
// if Teams [ 4 ] then
20102: LD_EXP 22
20106: PUSH
20107: LD_INT 4
20109: ARRAY
20110: IFFALSE 20162
// for i in Teams [ 4 ] do
20112: LD_ADDR_VAR 0 4
20116: PUSH
20117: LD_EXP 22
20121: PUSH
20122: LD_INT 4
20124: ARRAY
20125: PUSH
20126: FOR_IN
20127: IFFALSE 20160
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20129: LD_ADDR_VAR 0 8
20133: PUSH
20134: LD_VAR 0 8
20138: PUSH
20139: LD_VAR 0 4
20143: PUSH
20144: LD_INT 10
20146: PLUS
20147: PPUSH
20148: CALL_OW 110
20152: PUSH
20153: LD_INT 3
20155: DIV
20156: PLUS
20157: ST_TO_ADDR
20158: GO 20126
20160: POP
20161: POP
// if Teams [ 1 ] then
20162: LD_EXP 22
20166: PUSH
20167: LD_INT 1
20169: ARRAY
20170: IFFALSE 20199
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20172: LD_ADDR_VAR 0 3
20176: PUSH
20177: LD_STRING #KingoftheHill-Public-red
20179: PUSH
20180: LD_INT 3
20182: PUSH
20183: LD_VAR 0 5
20187: PUSH
20188: LD_EXP 20
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: ST_TO_ADDR
// if Teams [ 2 ] then
20199: LD_EXP 22
20203: PUSH
20204: LD_INT 2
20206: ARRAY
20207: IFFALSE 20242
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20209: LD_ADDR_VAR 0 3
20213: PUSH
20214: LD_VAR 0 3
20218: PUSH
20219: LD_STRING #KingoftheHill-Public-blue
20221: PUSH
20222: LD_INT 1
20224: PUSH
20225: LD_VAR 0 6
20229: PUSH
20230: LD_EXP 20
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: ADD
20241: ST_TO_ADDR
// if Teams [ 3 ] then
20242: LD_EXP 22
20246: PUSH
20247: LD_INT 3
20249: ARRAY
20250: IFFALSE 20285
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20252: LD_ADDR_VAR 0 3
20256: PUSH
20257: LD_VAR 0 3
20261: PUSH
20262: LD_STRING #KingoftheHill-Public-yell
20264: PUSH
20265: LD_INT 2
20267: PUSH
20268: LD_VAR 0 7
20272: PUSH
20273: LD_EXP 20
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: ADD
20284: ST_TO_ADDR
// if Teams [ 4 ] then
20285: LD_EXP 22
20289: PUSH
20290: LD_INT 4
20292: ARRAY
20293: IFFALSE 20328
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20295: LD_ADDR_VAR 0 3
20299: PUSH
20300: LD_VAR 0 3
20304: PUSH
20305: LD_STRING #KingoftheHill-Public-green
20307: PUSH
20308: LD_INT 7
20310: PUSH
20311: LD_VAR 0 8
20315: PUSH
20316: LD_EXP 20
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: ADD
20327: ST_TO_ADDR
// ToLua ( updateScorePoints(2,3, & red & ); ) ;
20328: LD_STRING updateScorePoints(2,3,
20330: PUSH
20331: LD_VAR 0 5
20335: STR
20336: PUSH
20337: LD_STRING );
20339: STR
20340: PPUSH
20341: CALL_OW 559
// ToLua ( updateScorePoints(2,1, & blue & ); ) ;
20345: LD_STRING updateScorePoints(2,1,
20347: PUSH
20348: LD_VAR 0 6
20352: STR
20353: PUSH
20354: LD_STRING );
20356: STR
20357: PPUSH
20358: CALL_OW 559
// ToLua ( updateScorePoints(2,2, & yel & ); ) ;
20362: LD_STRING updateScorePoints(2,2,
20364: PUSH
20365: LD_VAR 0 7
20369: STR
20370: PUSH
20371: LD_STRING );
20373: STR
20374: PPUSH
20375: CALL_OW 559
// ToLua ( updateScorePoints(2,7, & green & ); ) ;
20379: LD_STRING updateScorePoints(2,7,
20381: PUSH
20382: LD_VAR 0 8
20386: STR
20387: PUSH
20388: LD_STRING );
20390: STR
20391: PPUSH
20392: CALL_OW 559
// end else
20396: GO 20833
// if not Team_Game then
20398: LD_EXP 25
20402: NOT
20403: IFFALSE 20461
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
20405: LD_ADDR_VAR 0 3
20409: PUSH
20410: LD_VAR 0 3
20414: PUSH
20415: LD_STRING #KingoftheHill-Private
20417: PUSH
20418: LD_OWVAR 2
20422: PUSH
20423: LD_OWVAR 2
20427: PUSH
20428: LD_VAR 0 2
20432: PUSH
20433: LD_INT 10
20435: PLUS
20436: PPUSH
20437: CALL_OW 110
20441: PUSH
20442: LD_INT 3
20444: DIV
20445: PUSH
20446: LD_EXP 20
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: ADD
20458: ST_TO_ADDR
20459: GO 20833
// begin for i in Teams [ 1 ] do
20461: LD_ADDR_VAR 0 4
20465: PUSH
20466: LD_EXP 22
20470: PUSH
20471: LD_INT 1
20473: ARRAY
20474: PUSH
20475: FOR_IN
20476: IFFALSE 20509
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20478: LD_ADDR_VAR 0 5
20482: PUSH
20483: LD_VAR 0 5
20487: PUSH
20488: LD_VAR 0 4
20492: PUSH
20493: LD_INT 10
20495: PLUS
20496: PPUSH
20497: CALL_OW 110
20501: PUSH
20502: LD_INT 3
20504: DIV
20505: PLUS
20506: ST_TO_ADDR
20507: GO 20475
20509: POP
20510: POP
// for i in Teams [ 2 ] do
20511: LD_ADDR_VAR 0 4
20515: PUSH
20516: LD_EXP 22
20520: PUSH
20521: LD_INT 2
20523: ARRAY
20524: PUSH
20525: FOR_IN
20526: IFFALSE 20559
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20528: LD_ADDR_VAR 0 6
20532: PUSH
20533: LD_VAR 0 6
20537: PUSH
20538: LD_VAR 0 4
20542: PUSH
20543: LD_INT 10
20545: PLUS
20546: PPUSH
20547: CALL_OW 110
20551: PUSH
20552: LD_INT 3
20554: DIV
20555: PLUS
20556: ST_TO_ADDR
20557: GO 20525
20559: POP
20560: POP
// for i in Teams [ 3 ] do
20561: LD_ADDR_VAR 0 4
20565: PUSH
20566: LD_EXP 22
20570: PUSH
20571: LD_INT 3
20573: ARRAY
20574: PUSH
20575: FOR_IN
20576: IFFALSE 20609
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20578: LD_ADDR_VAR 0 7
20582: PUSH
20583: LD_VAR 0 7
20587: PUSH
20588: LD_VAR 0 4
20592: PUSH
20593: LD_INT 10
20595: PLUS
20596: PPUSH
20597: CALL_OW 110
20601: PUSH
20602: LD_INT 3
20604: DIV
20605: PLUS
20606: ST_TO_ADDR
20607: GO 20575
20609: POP
20610: POP
// for i in Teams [ 4 ] do
20611: LD_ADDR_VAR 0 4
20615: PUSH
20616: LD_EXP 22
20620: PUSH
20621: LD_INT 4
20623: ARRAY
20624: PUSH
20625: FOR_IN
20626: IFFALSE 20659
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20628: LD_ADDR_VAR 0 8
20632: PUSH
20633: LD_VAR 0 8
20637: PUSH
20638: LD_VAR 0 4
20642: PUSH
20643: LD_INT 10
20645: PLUS
20646: PPUSH
20647: CALL_OW 110
20651: PUSH
20652: LD_INT 3
20654: DIV
20655: PLUS
20656: ST_TO_ADDR
20657: GO 20625
20659: POP
20660: POP
// if your_side in Teams [ 1 ] then
20661: LD_OWVAR 2
20665: PUSH
20666: LD_EXP 22
20670: PUSH
20671: LD_INT 1
20673: ARRAY
20674: IN
20675: IFFALSE 20704
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20677: LD_ADDR_VAR 0 3
20681: PUSH
20682: LD_STRING #KingoftheHill-Public-red
20684: PUSH
20685: LD_INT 3
20687: PUSH
20688: LD_VAR 0 5
20692: PUSH
20693: LD_EXP 20
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
20704: LD_OWVAR 2
20708: PUSH
20709: LD_EXP 22
20713: PUSH
20714: LD_INT 2
20716: ARRAY
20717: IN
20718: IFFALSE 20747
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20720: LD_ADDR_VAR 0 3
20724: PUSH
20725: LD_STRING #KingoftheHill-Public-blue
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: LD_VAR 0 6
20735: PUSH
20736: LD_EXP 20
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
20747: LD_OWVAR 2
20751: PUSH
20752: LD_EXP 22
20756: PUSH
20757: LD_INT 3
20759: ARRAY
20760: IN
20761: IFFALSE 20790
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20763: LD_ADDR_VAR 0 3
20767: PUSH
20768: LD_STRING #KingoftheHill-Public-yell
20770: PUSH
20771: LD_INT 2
20773: PUSH
20774: LD_VAR 0 7
20778: PUSH
20779: LD_EXP 20
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
20790: LD_OWVAR 2
20794: PUSH
20795: LD_EXP 22
20799: PUSH
20800: LD_INT 4
20802: ARRAY
20803: IN
20804: IFFALSE 20833
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20806: LD_ADDR_VAR 0 3
20810: PUSH
20811: LD_STRING #KingoftheHill-Public-green
20813: PUSH
20814: LD_INT 7
20816: PUSH
20817: LD_VAR 0 8
20821: PUSH
20822: LD_EXP 20
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: ST_TO_ADDR
// end ; Display_kings := vypis ;
20833: LD_ADDR_EXP 67
20837: PUSH
20838: LD_VAR 0 3
20842: ST_TO_ADDR
// end ;
20843: LD_VAR 0 1
20847: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
20848: LD_INT 0
20850: PPUSH
20851: PPUSH
20852: PPUSH
20853: PPUSH
20854: PPUSH
20855: PPUSH
20856: PPUSH
20857: PPUSH
20858: PPUSH
// side := [ ] ;
20859: LD_ADDR_VAR 0 2
20863: PUSH
20864: EMPTY
20865: ST_TO_ADDR
// red = 0 ;
20866: LD_ADDR_VAR 0 5
20870: PUSH
20871: LD_INT 0
20873: ST_TO_ADDR
// blue = 0 ;
20874: LD_ADDR_VAR 0 6
20878: PUSH
20879: LD_INT 0
20881: ST_TO_ADDR
// yel = 0 ;
20882: LD_ADDR_VAR 0 7
20886: PUSH
20887: LD_INT 0
20889: ST_TO_ADDR
// green = 0 ;
20890: LD_ADDR_VAR 0 8
20894: PUSH
20895: LD_INT 0
20897: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
20898: LD_ADDR_VAR 0 3
20902: PUSH
20903: LD_INT 19
20905: PPUSH
20906: LD_INT 21
20908: PUSH
20909: LD_INT 3
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 53
20918: PUSH
20919: EMPTY
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PPUSH
20926: CALL_OW 70
20930: ST_TO_ADDR
// for un in list do
20931: LD_ADDR_VAR 0 4
20935: PUSH
20936: LD_VAR 0 3
20940: PUSH
20941: FOR_IN
20942: IFFALSE 20967
// side := side union GetSide ( un ) ;
20944: LD_ADDR_VAR 0 2
20948: PUSH
20949: LD_VAR 0 2
20953: PUSH
20954: LD_VAR 0 4
20958: PPUSH
20959: CALL_OW 255
20963: UNION
20964: ST_TO_ADDR
20965: GO 20941
20967: POP
20968: POP
// if side <> 1 then
20969: LD_VAR 0 2
20973: PUSH
20974: LD_INT 1
20976: NONEQUAL
20977: IFFALSE 20981
// exit ;
20979: GO 21344
// side := side [ 1 ] ;
20981: LD_ADDR_VAR 0 2
20985: PUSH
20986: LD_VAR 0 2
20990: PUSH
20991: LD_INT 1
20993: ARRAY
20994: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
20995: LD_VAR 0 2
20999: PUSH
21000: LD_INT 10
21002: PLUS
21003: PPUSH
21004: LD_VAR 0 2
21008: PUSH
21009: LD_INT 10
21011: PLUS
21012: PPUSH
21013: CALL_OW 110
21017: PUSH
21018: LD_INT 1
21020: PLUS
21021: PPUSH
21022: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
21026: LD_VAR 0 2
21030: PPUSH
21031: LD_VAR 0 2
21035: PUSH
21036: LD_INT 10
21038: PLUS
21039: PPUSH
21040: CALL_OW 110
21044: PUSH
21045: LD_INT 3
21047: DIV
21048: PPUSH
21049: LD_INT 2
21051: PPUSH
21052: CALL 17910 0 3
// if not Team_Game then
21056: LD_EXP 25
21060: NOT
21061: IFFALSE 21344
// if GetTag ( side + 10 ) >= final_count * 3 then
21063: LD_VAR 0 2
21067: PUSH
21068: LD_INT 10
21070: PLUS
21071: PPUSH
21072: CALL_OW 110
21076: PUSH
21077: LD_EXP 20
21081: PUSH
21082: LD_INT 3
21084: MUL
21085: GREATEREQUAL
21086: IFFALSE 21093
// enable ( 3 ) else
21088: LD_INT 3
21090: ENABLE_MARKED
21091: GO 21344
// begin for i in Teams [ 1 ] do
21093: LD_ADDR_VAR 0 9
21097: PUSH
21098: LD_EXP 22
21102: PUSH
21103: LD_INT 1
21105: ARRAY
21106: PUSH
21107: FOR_IN
21108: IFFALSE 21141
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21110: LD_ADDR_VAR 0 5
21114: PUSH
21115: LD_VAR 0 5
21119: PUSH
21120: LD_VAR 0 9
21124: PUSH
21125: LD_INT 10
21127: PLUS
21128: PPUSH
21129: CALL_OW 110
21133: PUSH
21134: LD_INT 3
21136: DIV
21137: PLUS
21138: ST_TO_ADDR
21139: GO 21107
21141: POP
21142: POP
// for i in Teams [ 2 ] do
21143: LD_ADDR_VAR 0 9
21147: PUSH
21148: LD_EXP 22
21152: PUSH
21153: LD_INT 2
21155: ARRAY
21156: PUSH
21157: FOR_IN
21158: IFFALSE 21191
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21160: LD_ADDR_VAR 0 6
21164: PUSH
21165: LD_VAR 0 6
21169: PUSH
21170: LD_VAR 0 9
21174: PUSH
21175: LD_INT 10
21177: PLUS
21178: PPUSH
21179: CALL_OW 110
21183: PUSH
21184: LD_INT 3
21186: DIV
21187: PLUS
21188: ST_TO_ADDR
21189: GO 21157
21191: POP
21192: POP
// for i in Teams [ 3 ] do
21193: LD_ADDR_VAR 0 9
21197: PUSH
21198: LD_EXP 22
21202: PUSH
21203: LD_INT 3
21205: ARRAY
21206: PUSH
21207: FOR_IN
21208: IFFALSE 21241
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21210: LD_ADDR_VAR 0 7
21214: PUSH
21215: LD_VAR 0 7
21219: PUSH
21220: LD_VAR 0 9
21224: PUSH
21225: LD_INT 10
21227: PLUS
21228: PPUSH
21229: CALL_OW 110
21233: PUSH
21234: LD_INT 3
21236: DIV
21237: PLUS
21238: ST_TO_ADDR
21239: GO 21207
21241: POP
21242: POP
// for i in Teams [ 4 ] do
21243: LD_ADDR_VAR 0 9
21247: PUSH
21248: LD_EXP 22
21252: PUSH
21253: LD_INT 4
21255: ARRAY
21256: PUSH
21257: FOR_IN
21258: IFFALSE 21291
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21260: LD_ADDR_VAR 0 8
21264: PUSH
21265: LD_VAR 0 8
21269: PUSH
21270: LD_VAR 0 9
21274: PUSH
21275: LD_INT 10
21277: PLUS
21278: PPUSH
21279: CALL_OW 110
21283: PUSH
21284: LD_INT 3
21286: DIV
21287: PLUS
21288: ST_TO_ADDR
21289: GO 21257
21291: POP
21292: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
21293: LD_VAR 0 5
21297: PUSH
21298: LD_EXP 20
21302: GREATEREQUAL
21303: PUSH
21304: LD_VAR 0 6
21308: PUSH
21309: LD_EXP 20
21313: GREATEREQUAL
21314: OR
21315: PUSH
21316: LD_VAR 0 7
21320: PUSH
21321: LD_EXP 20
21325: GREATEREQUAL
21326: OR
21327: PUSH
21328: LD_VAR 0 8
21332: PUSH
21333: LD_EXP 20
21337: GREATEREQUAL
21338: OR
21339: IFFALSE 21344
// enable ( 3 ) ;
21341: LD_INT 3
21343: ENABLE_MARKED
// end ; end ;
21344: LD_VAR 0 1
21348: RET
// every 0 0$1 marked 2 do
21349: GO 21351
21351: DISABLE
// begin count_king ;
21352: CALL 20848 0 0
// show_public_points ;
21356: CALL 19723 0 0
// enable ;
21360: ENABLE
// end ;
21361: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
21362: GO 21364
21364: DISABLE
21365: LD_INT 0
21367: PPUSH
21368: PPUSH
21369: PPUSH
21370: PPUSH
21371: PPUSH
21372: PPUSH
// begin win := [ ] ;
21373: LD_ADDR_LOC 35
21377: PUSH
21378: EMPTY
21379: ST_TO_ADDR
// red = 0 ;
21380: LD_ADDR_VAR 0 2
21384: PUSH
21385: LD_INT 0
21387: ST_TO_ADDR
// blue = 0 ;
21388: LD_ADDR_VAR 0 3
21392: PUSH
21393: LD_INT 0
21395: ST_TO_ADDR
// yel = 0 ;
21396: LD_ADDR_VAR 0 4
21400: PUSH
21401: LD_INT 0
21403: ST_TO_ADDR
// green = 0 ;
21404: LD_ADDR_VAR 0 5
21408: PUSH
21409: LD_INT 0
21411: ST_TO_ADDR
// if not Team_Game then
21412: LD_EXP 25
21416: NOT
21417: IFFALSE 21494
// begin for side = 1 to 8 do
21419: LD_ADDR_VAR 0 1
21423: PUSH
21424: DOUBLE
21425: LD_INT 1
21427: DEC
21428: ST_TO_ADDR
21429: LD_INT 8
21431: PUSH
21432: FOR_TO
21433: IFFALSE 21478
// if GetTag ( side + 10 ) >= final_count * 3 then
21435: LD_VAR 0 1
21439: PUSH
21440: LD_INT 10
21442: PLUS
21443: PPUSH
21444: CALL_OW 110
21448: PUSH
21449: LD_EXP 20
21453: PUSH
21454: LD_INT 3
21456: MUL
21457: GREATEREQUAL
21458: IFFALSE 21476
// win := win ^ side ;
21460: LD_ADDR_LOC 35
21464: PUSH
21465: LD_LOC 35
21469: PUSH
21470: LD_VAR 0 1
21474: ADD
21475: ST_TO_ADDR
21476: GO 21432
21478: POP
21479: POP
// if win then
21480: LD_LOC 35
21484: IFFALSE 21491
// enable ( 4 ) else
21486: LD_INT 4
21488: ENABLE_MARKED
21489: GO 21492
// enable ;
21491: ENABLE
// end else
21492: GO 21810
// begin for i in Teams [ 1 ] do
21494: LD_ADDR_VAR 0 6
21498: PUSH
21499: LD_EXP 22
21503: PUSH
21504: LD_INT 1
21506: ARRAY
21507: PUSH
21508: FOR_IN
21509: IFFALSE 21542
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21511: LD_ADDR_VAR 0 2
21515: PUSH
21516: LD_VAR 0 2
21520: PUSH
21521: LD_VAR 0 6
21525: PUSH
21526: LD_INT 10
21528: PLUS
21529: PPUSH
21530: CALL_OW 110
21534: PUSH
21535: LD_INT 3
21537: DIV
21538: PLUS
21539: ST_TO_ADDR
21540: GO 21508
21542: POP
21543: POP
// for i in Teams [ 2 ] do
21544: LD_ADDR_VAR 0 6
21548: PUSH
21549: LD_EXP 22
21553: PUSH
21554: LD_INT 2
21556: ARRAY
21557: PUSH
21558: FOR_IN
21559: IFFALSE 21592
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21561: LD_ADDR_VAR 0 3
21565: PUSH
21566: LD_VAR 0 3
21570: PUSH
21571: LD_VAR 0 6
21575: PUSH
21576: LD_INT 10
21578: PLUS
21579: PPUSH
21580: CALL_OW 110
21584: PUSH
21585: LD_INT 3
21587: DIV
21588: PLUS
21589: ST_TO_ADDR
21590: GO 21558
21592: POP
21593: POP
// for i in Teams [ 3 ] do
21594: LD_ADDR_VAR 0 6
21598: PUSH
21599: LD_EXP 22
21603: PUSH
21604: LD_INT 3
21606: ARRAY
21607: PUSH
21608: FOR_IN
21609: IFFALSE 21642
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21611: LD_ADDR_VAR 0 4
21615: PUSH
21616: LD_VAR 0 4
21620: PUSH
21621: LD_VAR 0 6
21625: PUSH
21626: LD_INT 10
21628: PLUS
21629: PPUSH
21630: CALL_OW 110
21634: PUSH
21635: LD_INT 3
21637: DIV
21638: PLUS
21639: ST_TO_ADDR
21640: GO 21608
21642: POP
21643: POP
// for i in Teams [ 4 ] do
21644: LD_ADDR_VAR 0 6
21648: PUSH
21649: LD_EXP 22
21653: PUSH
21654: LD_INT 4
21656: ARRAY
21657: PUSH
21658: FOR_IN
21659: IFFALSE 21692
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21661: LD_ADDR_VAR 0 5
21665: PUSH
21666: LD_VAR 0 5
21670: PUSH
21671: LD_VAR 0 6
21675: PUSH
21676: LD_INT 10
21678: PLUS
21679: PPUSH
21680: CALL_OW 110
21684: PUSH
21685: LD_INT 3
21687: DIV
21688: PLUS
21689: ST_TO_ADDR
21690: GO 21658
21692: POP
21693: POP
// if red >= final_count then
21694: LD_VAR 0 2
21698: PUSH
21699: LD_EXP 20
21703: GREATEREQUAL
21704: IFFALSE 21720
// win = teams [ 1 ] ;
21706: LD_ADDR_LOC 35
21710: PUSH
21711: LD_EXP 22
21715: PUSH
21716: LD_INT 1
21718: ARRAY
21719: ST_TO_ADDR
// if blue >= final_count then
21720: LD_VAR 0 3
21724: PUSH
21725: LD_EXP 20
21729: GREATEREQUAL
21730: IFFALSE 21746
// win = teams [ 2 ] ;
21732: LD_ADDR_LOC 35
21736: PUSH
21737: LD_EXP 22
21741: PUSH
21742: LD_INT 2
21744: ARRAY
21745: ST_TO_ADDR
// if yel >= final_count then
21746: LD_VAR 0 4
21750: PUSH
21751: LD_EXP 20
21755: GREATEREQUAL
21756: IFFALSE 21772
// win = teams [ 3 ] ;
21758: LD_ADDR_LOC 35
21762: PUSH
21763: LD_EXP 22
21767: PUSH
21768: LD_INT 3
21770: ARRAY
21771: ST_TO_ADDR
// if green >= final_count then
21772: LD_VAR 0 5
21776: PUSH
21777: LD_EXP 20
21781: GREATEREQUAL
21782: IFFALSE 21798
// win = teams [ 4 ] ;
21784: LD_ADDR_LOC 35
21788: PUSH
21789: LD_EXP 22
21793: PUSH
21794: LD_INT 4
21796: ARRAY
21797: ST_TO_ADDR
// if win then
21798: LD_LOC 35
21802: IFFALSE 21809
// enable ( 4 ) else
21804: LD_INT 4
21806: ENABLE_MARKED
21807: GO 21810
// enable ;
21809: ENABLE
// end ; end ;
21810: PPOPN 6
21812: END
// every 0 0$1 marked 4 do
21813: GO 21815
21815: DISABLE
// begin if Player_Side in win then
21816: LD_EXP 27
21820: PUSH
21821: LD_LOC 35
21825: IN
21826: IFFALSE 21842
// begin wait ( 0 0$2 ) ;
21828: LD_INT 70
21830: PPUSH
21831: CALL_OW 67
// enable ( 401 ) ;
21835: LD_INT 401
21837: ENABLE_MARKED
// exit ;
21838: GO 21858
// end else
21840: GO 21858
// begin wait ( 0 0$2 ) ;
21842: LD_INT 70
21844: PPUSH
21845: CALL_OW 67
// Multiplayer_Loose_Message ;
21849: CALL_OW 521
// enable ( 400 ) ;
21853: LD_INT 400
21855: ENABLE_MARKED
// exit ;
21856: GO 21858
// end ; end ; end_of_file
21858: END
// export function SetMpTechs ( ) ; var side , i ; begin
21859: LD_INT 0
21861: PPUSH
21862: PPUSH
21863: PPUSH
// for side = 1 to 8 do
21864: LD_ADDR_VAR 0 2
21868: PUSH
21869: DOUBLE
21870: LD_INT 1
21872: DEC
21873: ST_TO_ADDR
21874: LD_INT 8
21876: PUSH
21877: FOR_TO
21878: IFFALSE 21999
// begin for i = 1 to 72 do
21880: LD_ADDR_VAR 0 3
21884: PUSH
21885: DOUBLE
21886: LD_INT 1
21888: DEC
21889: ST_TO_ADDR
21890: LD_INT 72
21892: PUSH
21893: FOR_TO
21894: IFFALSE 21925
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
21896: LD_VAR 0 3
21900: PPUSH
21901: LD_VAR 0 2
21905: PPUSH
21906: LD_INT 0
21908: PPUSH
21909: LD_VAR 0 3
21913: PPUSH
21914: CALL_OW 565
21918: PPUSH
21919: CALL_OW 322
21923: GO 21893
21925: POP
21926: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
21927: LD_INT 73
21929: PPUSH
21930: LD_VAR 0 2
21934: PPUSH
21935: LD_INT 0
21937: PPUSH
21938: LD_INT 25
21940: PPUSH
21941: CALL_OW 565
21945: PPUSH
21946: CALL_OW 322
// for i = 0 to 40 do
21950: LD_ADDR_VAR 0 3
21954: PUSH
21955: DOUBLE
21956: LD_INT 0
21958: DEC
21959: ST_TO_ADDR
21960: LD_INT 40
21962: PUSH
21963: FOR_TO
21964: IFFALSE 21995
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
21966: LD_VAR 0 3
21970: PPUSH
21971: LD_VAR 0 2
21975: PPUSH
21976: LD_INT 1
21978: PPUSH
21979: LD_VAR 0 3
21983: PPUSH
21984: CALL_OW 565
21988: PPUSH
21989: CALL_OW 324
21993: GO 21963
21995: POP
21996: POP
// end ;
21997: GO 21877
21999: POP
22000: POP
// end ;
22001: LD_VAR 0 1
22005: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
22006: LD_INT 0
22008: PPUSH
22009: PPUSH
22010: PPUSH
// for side = 1 to 8 do
22011: LD_ADDR_VAR 0 3
22015: PUSH
22016: DOUBLE
22017: LD_INT 1
22019: DEC
22020: ST_TO_ADDR
22021: LD_INT 8
22023: PUSH
22024: FOR_TO
22025: IFFALSE 26021
// begin for i = 1 to 73 do
22027: LD_ADDR_VAR 0 4
22031: PUSH
22032: DOUBLE
22033: LD_INT 1
22035: DEC
22036: ST_TO_ADDR
22037: LD_INT 73
22039: PUSH
22040: FOR_TO
22041: IFFALSE 22062
// SetTech ( i , side , state_disabled ) ;
22043: LD_VAR 0 4
22047: PPUSH
22048: LD_VAR 0 3
22052: PPUSH
22053: LD_INT 0
22055: PPUSH
22056: CALL_OW 322
22060: GO 22040
22062: POP
22063: POP
// for i = 0 to 40 do
22064: LD_ADDR_VAR 0 4
22068: PUSH
22069: DOUBLE
22070: LD_INT 0
22072: DEC
22073: ST_TO_ADDR
22074: LD_INT 40
22076: PUSH
22077: FOR_TO
22078: IFFALSE 22099
// SetRestrict ( i , side , false ) ;
22080: LD_VAR 0 4
22084: PPUSH
22085: LD_VAR 0 3
22089: PPUSH
22090: LD_INT 0
22092: PPUSH
22093: CALL_OW 324
22097: GO 22077
22099: POP
22100: POP
// case level of 1 :
22101: LD_VAR 0 1
22105: PUSH
22106: LD_INT 1
22108: DOUBLE
22109: EQUAL
22110: IFTRUE 22114
22112: GO 22267
22114: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22115: LD_INT 35
22117: PPUSH
22118: LD_VAR 0 3
22122: PPUSH
22123: LD_INT 1
22125: PPUSH
22126: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22130: LD_INT 45
22132: PPUSH
22133: LD_VAR 0 3
22137: PPUSH
22138: LD_INT 1
22140: PPUSH
22141: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22145: LD_INT 46
22147: PPUSH
22148: LD_VAR 0 3
22152: PPUSH
22153: LD_INT 1
22155: PPUSH
22156: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22160: LD_INT 47
22162: PPUSH
22163: LD_VAR 0 3
22167: PPUSH
22168: LD_INT 1
22170: PPUSH
22171: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22175: LD_INT 0
22177: PPUSH
22178: LD_VAR 0 3
22182: PPUSH
22183: LD_INT 1
22185: PPUSH
22186: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22190: LD_INT 2
22192: PPUSH
22193: LD_VAR 0 3
22197: PPUSH
22198: LD_INT 1
22200: PPUSH
22201: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22205: LD_INT 4
22207: PPUSH
22208: LD_VAR 0 3
22212: PPUSH
22213: LD_INT 1
22215: PPUSH
22216: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22220: LD_INT 6
22222: PPUSH
22223: LD_VAR 0 3
22227: PPUSH
22228: LD_INT 1
22230: PPUSH
22231: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22235: LD_INT 29
22237: PPUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: LD_INT 1
22245: PPUSH
22246: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22250: LD_INT 31
22252: PPUSH
22253: LD_VAR 0 3
22257: PPUSH
22258: LD_INT 1
22260: PPUSH
22261: CALL_OW 324
// end ; 2 :
22265: GO 26019
22267: LD_INT 2
22269: DOUBLE
22270: EQUAL
22271: IFTRUE 22275
22273: GO 22473
22275: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22276: LD_INT 35
22278: PPUSH
22279: LD_VAR 0 3
22283: PPUSH
22284: LD_INT 1
22286: PPUSH
22287: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22291: LD_INT 45
22293: PPUSH
22294: LD_VAR 0 3
22298: PPUSH
22299: LD_INT 1
22301: PPUSH
22302: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22306: LD_INT 46
22308: PPUSH
22309: LD_VAR 0 3
22313: PPUSH
22314: LD_INT 1
22316: PPUSH
22317: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22321: LD_INT 47
22323: PPUSH
22324: LD_VAR 0 3
22328: PPUSH
22329: LD_INT 1
22331: PPUSH
22332: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22336: LD_INT 1
22338: PPUSH
22339: LD_VAR 0 3
22343: PPUSH
22344: LD_INT 1
22346: PPUSH
22347: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22351: LD_INT 2
22353: PPUSH
22354: LD_VAR 0 3
22358: PPUSH
22359: LD_INT 1
22361: PPUSH
22362: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22366: LD_INT 11
22368: PPUSH
22369: LD_VAR 0 3
22373: PPUSH
22374: LD_INT 1
22376: PPUSH
22377: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22381: LD_INT 0
22383: PPUSH
22384: LD_VAR 0 3
22388: PPUSH
22389: LD_INT 1
22391: PPUSH
22392: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22396: LD_INT 2
22398: PPUSH
22399: LD_VAR 0 3
22403: PPUSH
22404: LD_INT 1
22406: PPUSH
22407: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22411: LD_INT 4
22413: PPUSH
22414: LD_VAR 0 3
22418: PPUSH
22419: LD_INT 1
22421: PPUSH
22422: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22426: LD_INT 6
22428: PPUSH
22429: LD_VAR 0 3
22433: PPUSH
22434: LD_INT 1
22436: PPUSH
22437: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22441: LD_INT 29
22443: PPUSH
22444: LD_VAR 0 3
22448: PPUSH
22449: LD_INT 1
22451: PPUSH
22452: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22456: LD_INT 31
22458: PPUSH
22459: LD_VAR 0 3
22463: PPUSH
22464: LD_INT 1
22466: PPUSH
22467: CALL_OW 324
// end ; 3 :
22471: GO 26019
22473: LD_INT 3
22475: DOUBLE
22476: EQUAL
22477: IFTRUE 22481
22479: GO 22934
22481: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22482: LD_INT 35
22484: PPUSH
22485: LD_VAR 0 3
22489: PPUSH
22490: LD_INT 1
22492: PPUSH
22493: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22497: LD_INT 45
22499: PPUSH
22500: LD_VAR 0 3
22504: PPUSH
22505: LD_INT 1
22507: PPUSH
22508: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22512: LD_INT 46
22514: PPUSH
22515: LD_VAR 0 3
22519: PPUSH
22520: LD_INT 1
22522: PPUSH
22523: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22527: LD_INT 47
22529: PPUSH
22530: LD_VAR 0 3
22534: PPUSH
22535: LD_INT 1
22537: PPUSH
22538: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22542: LD_INT 1
22544: PPUSH
22545: LD_VAR 0 3
22549: PPUSH
22550: LD_INT 1
22552: PPUSH
22553: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22557: LD_INT 2
22559: PPUSH
22560: LD_VAR 0 3
22564: PPUSH
22565: LD_INT 1
22567: PPUSH
22568: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22572: LD_INT 11
22574: PPUSH
22575: LD_VAR 0 3
22579: PPUSH
22580: LD_INT 1
22582: PPUSH
22583: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22587: LD_INT 48
22589: PPUSH
22590: LD_VAR 0 3
22594: PPUSH
22595: LD_INT 1
22597: PPUSH
22598: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22602: LD_INT 69
22604: PPUSH
22605: LD_VAR 0 3
22609: PPUSH
22610: LD_INT 1
22612: PPUSH
22613: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22617: LD_INT 39
22619: PPUSH
22620: LD_VAR 0 3
22624: PPUSH
22625: LD_INT 1
22627: PPUSH
22628: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22632: LD_INT 43
22634: PPUSH
22635: LD_VAR 0 3
22639: PPUSH
22640: LD_INT 1
22642: PPUSH
22643: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22647: LD_INT 51
22649: PPUSH
22650: LD_VAR 0 3
22654: PPUSH
22655: LD_INT 1
22657: PPUSH
22658: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22662: LD_INT 6
22664: PPUSH
22665: LD_VAR 0 3
22669: PPUSH
22670: LD_INT 1
22672: PPUSH
22673: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22677: LD_INT 0
22679: PPUSH
22680: LD_VAR 0 3
22684: PPUSH
22685: LD_INT 1
22687: PPUSH
22688: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22692: LD_INT 2
22694: PPUSH
22695: LD_VAR 0 3
22699: PPUSH
22700: LD_INT 1
22702: PPUSH
22703: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22707: LD_INT 3
22709: PPUSH
22710: LD_VAR 0 3
22714: PPUSH
22715: LD_INT 1
22717: PPUSH
22718: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22722: LD_INT 4
22724: PPUSH
22725: LD_VAR 0 3
22729: PPUSH
22730: LD_INT 1
22732: PPUSH
22733: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22737: LD_INT 6
22739: PPUSH
22740: LD_VAR 0 3
22744: PPUSH
22745: LD_INT 1
22747: PPUSH
22748: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22752: LD_INT 7
22754: PPUSH
22755: LD_VAR 0 3
22759: PPUSH
22760: LD_INT 1
22762: PPUSH
22763: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22767: LD_INT 8
22769: PPUSH
22770: LD_VAR 0 3
22774: PPUSH
22775: LD_INT 1
22777: PPUSH
22778: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22782: LD_INT 10
22784: PPUSH
22785: LD_VAR 0 3
22789: PPUSH
22790: LD_INT 1
22792: PPUSH
22793: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22797: LD_INT 15
22799: PPUSH
22800: LD_VAR 0 3
22804: PPUSH
22805: LD_INT 1
22807: PPUSH
22808: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22812: LD_INT 16
22814: PPUSH
22815: LD_VAR 0 3
22819: PPUSH
22820: LD_INT 1
22822: PPUSH
22823: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22827: LD_INT 17
22829: PPUSH
22830: LD_VAR 0 3
22834: PPUSH
22835: LD_INT 1
22837: PPUSH
22838: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22842: LD_INT 20
22844: PPUSH
22845: LD_VAR 0 3
22849: PPUSH
22850: LD_INT 1
22852: PPUSH
22853: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22857: LD_INT 26
22859: PPUSH
22860: LD_VAR 0 3
22864: PPUSH
22865: LD_INT 1
22867: PPUSH
22868: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22872: LD_INT 27
22874: PPUSH
22875: LD_VAR 0 3
22879: PPUSH
22880: LD_INT 1
22882: PPUSH
22883: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22887: LD_INT 29
22889: PPUSH
22890: LD_VAR 0 3
22894: PPUSH
22895: LD_INT 1
22897: PPUSH
22898: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22902: LD_INT 31
22904: PPUSH
22905: LD_VAR 0 3
22909: PPUSH
22910: LD_INT 1
22912: PPUSH
22913: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22917: LD_INT 32
22919: PPUSH
22920: LD_VAR 0 3
22924: PPUSH
22925: LD_INT 1
22927: PPUSH
22928: CALL_OW 324
// end ; 4 :
22932: GO 26019
22934: LD_INT 4
22936: DOUBLE
22937: EQUAL
22938: IFTRUE 22942
22940: GO 23890
22942: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22943: LD_INT 35
22945: PPUSH
22946: LD_VAR 0 3
22950: PPUSH
22951: LD_INT 1
22953: PPUSH
22954: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22958: LD_INT 45
22960: PPUSH
22961: LD_VAR 0 3
22965: PPUSH
22966: LD_INT 1
22968: PPUSH
22969: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22973: LD_INT 46
22975: PPUSH
22976: LD_VAR 0 3
22980: PPUSH
22981: LD_INT 1
22983: PPUSH
22984: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22988: LD_INT 47
22990: PPUSH
22991: LD_VAR 0 3
22995: PPUSH
22996: LD_INT 1
22998: PPUSH
22999: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23003: LD_INT 1
23005: PPUSH
23006: LD_VAR 0 3
23010: PPUSH
23011: LD_INT 1
23013: PPUSH
23014: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23018: LD_INT 2
23020: PPUSH
23021: LD_VAR 0 3
23025: PPUSH
23026: LD_INT 1
23028: PPUSH
23029: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23033: LD_INT 11
23035: PPUSH
23036: LD_VAR 0 3
23040: PPUSH
23041: LD_INT 1
23043: PPUSH
23044: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23048: LD_INT 20
23050: PPUSH
23051: LD_VAR 0 3
23055: PPUSH
23056: LD_INT 1
23058: PPUSH
23059: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23063: LD_INT 48
23065: PPUSH
23066: LD_VAR 0 3
23070: PPUSH
23071: LD_INT 1
23073: PPUSH
23074: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23078: LD_INT 49
23080: PPUSH
23081: LD_VAR 0 3
23085: PPUSH
23086: LD_INT 1
23088: PPUSH
23089: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23093: LD_INT 69
23095: PPUSH
23096: LD_VAR 0 3
23100: PPUSH
23101: LD_INT 1
23103: PPUSH
23104: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23108: LD_INT 39
23110: PPUSH
23111: LD_VAR 0 3
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23123: LD_INT 34
23125: PPUSH
23126: LD_VAR 0 3
23130: PPUSH
23131: LD_INT 1
23133: PPUSH
23134: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23138: LD_INT 42
23140: PPUSH
23141: LD_VAR 0 3
23145: PPUSH
23146: LD_INT 1
23148: PPUSH
23149: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23153: LD_INT 44
23155: PPUSH
23156: LD_VAR 0 3
23160: PPUSH
23161: LD_INT 1
23163: PPUSH
23164: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23168: LD_INT 41
23170: PPUSH
23171: LD_VAR 0 3
23175: PPUSH
23176: LD_INT 1
23178: PPUSH
23179: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23183: LD_INT 43
23185: PPUSH
23186: LD_VAR 0 3
23190: PPUSH
23191: LD_INT 1
23193: PPUSH
23194: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23198: LD_INT 70
23200: PPUSH
23201: LD_VAR 0 3
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23213: LD_INT 51
23215: PPUSH
23216: LD_VAR 0 3
23220: PPUSH
23221: LD_INT 1
23223: PPUSH
23224: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23228: LD_INT 52
23230: PPUSH
23231: LD_VAR 0 3
23235: PPUSH
23236: LD_INT 1
23238: PPUSH
23239: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23243: LD_INT 6
23245: PPUSH
23246: LD_VAR 0 3
23250: PPUSH
23251: LD_INT 1
23253: PPUSH
23254: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23258: LD_INT 15
23260: PPUSH
23261: LD_VAR 0 3
23265: PPUSH
23266: LD_INT 1
23268: PPUSH
23269: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23273: LD_INT 7
23275: PPUSH
23276: LD_VAR 0 3
23280: PPUSH
23281: LD_INT 1
23283: PPUSH
23284: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23288: LD_INT 12
23290: PPUSH
23291: LD_VAR 0 3
23295: PPUSH
23296: LD_INT 1
23298: PPUSH
23299: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23303: LD_INT 18
23305: PPUSH
23306: LD_VAR 0 3
23310: PPUSH
23311: LD_INT 1
23313: PPUSH
23314: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23318: LD_INT 60
23320: PPUSH
23321: LD_VAR 0 3
23325: PPUSH
23326: LD_INT 1
23328: PPUSH
23329: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23333: LD_INT 9
23335: PPUSH
23336: LD_VAR 0 3
23340: PPUSH
23341: LD_INT 1
23343: PPUSH
23344: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23348: LD_INT 30
23350: PPUSH
23351: LD_VAR 0 3
23355: PPUSH
23356: LD_INT 1
23358: PPUSH
23359: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23363: LD_INT 37
23365: PPUSH
23366: LD_VAR 0 3
23370: PPUSH
23371: LD_INT 1
23373: PPUSH
23374: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23378: LD_INT 5
23380: PPUSH
23381: LD_VAR 0 3
23385: PPUSH
23386: LD_INT 1
23388: PPUSH
23389: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23393: LD_INT 66
23395: PPUSH
23396: LD_VAR 0 3
23400: PPUSH
23401: LD_INT 1
23403: PPUSH
23404: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23408: LD_INT 21
23410: PPUSH
23411: LD_VAR 0 3
23415: PPUSH
23416: LD_INT 1
23418: PPUSH
23419: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23423: LD_INT 22
23425: PPUSH
23426: LD_VAR 0 3
23430: PPUSH
23431: LD_INT 1
23433: PPUSH
23434: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23438: LD_INT 54
23440: PPUSH
23441: LD_VAR 0 3
23445: PPUSH
23446: LD_INT 1
23448: PPUSH
23449: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23453: LD_INT 0
23455: PPUSH
23456: LD_VAR 0 3
23460: PPUSH
23461: LD_INT 1
23463: PPUSH
23464: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23468: LD_INT 1
23470: PPUSH
23471: LD_VAR 0 3
23475: PPUSH
23476: LD_INT 1
23478: PPUSH
23479: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23483: LD_INT 2
23485: PPUSH
23486: LD_VAR 0 3
23490: PPUSH
23491: LD_INT 1
23493: PPUSH
23494: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23498: LD_INT 3
23500: PPUSH
23501: LD_VAR 0 3
23505: PPUSH
23506: LD_INT 1
23508: PPUSH
23509: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23513: LD_INT 4
23515: PPUSH
23516: LD_VAR 0 3
23520: PPUSH
23521: LD_INT 1
23523: PPUSH
23524: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23528: LD_INT 5
23530: PPUSH
23531: LD_VAR 0 3
23535: PPUSH
23536: LD_INT 1
23538: PPUSH
23539: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23543: LD_INT 6
23545: PPUSH
23546: LD_VAR 0 3
23550: PPUSH
23551: LD_INT 1
23553: PPUSH
23554: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23558: LD_INT 7
23560: PPUSH
23561: LD_VAR 0 3
23565: PPUSH
23566: LD_INT 1
23568: PPUSH
23569: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23573: LD_INT 8
23575: PPUSH
23576: LD_VAR 0 3
23580: PPUSH
23581: LD_INT 1
23583: PPUSH
23584: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23588: LD_INT 10
23590: PPUSH
23591: LD_VAR 0 3
23595: PPUSH
23596: LD_INT 1
23598: PPUSH
23599: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23603: LD_INT 11
23605: PPUSH
23606: LD_VAR 0 3
23610: PPUSH
23611: LD_INT 1
23613: PPUSH
23614: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23618: LD_INT 12
23620: PPUSH
23621: LD_VAR 0 3
23625: PPUSH
23626: LD_INT 1
23628: PPUSH
23629: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23633: LD_INT 13
23635: PPUSH
23636: LD_VAR 0 3
23640: PPUSH
23641: LD_INT 1
23643: PPUSH
23644: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23648: LD_INT 14
23650: PPUSH
23651: LD_VAR 0 3
23655: PPUSH
23656: LD_INT 1
23658: PPUSH
23659: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23663: LD_INT 15
23665: PPUSH
23666: LD_VAR 0 3
23670: PPUSH
23671: LD_INT 1
23673: PPUSH
23674: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23678: LD_INT 16
23680: PPUSH
23681: LD_VAR 0 3
23685: PPUSH
23686: LD_INT 1
23688: PPUSH
23689: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23693: LD_INT 17
23695: PPUSH
23696: LD_VAR 0 3
23700: PPUSH
23701: LD_INT 1
23703: PPUSH
23704: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23708: LD_INT 19
23710: PPUSH
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_INT 1
23718: PPUSH
23719: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23723: LD_INT 20
23725: PPUSH
23726: LD_VAR 0 3
23730: PPUSH
23731: LD_INT 1
23733: PPUSH
23734: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23738: LD_INT 21
23740: PPUSH
23741: LD_VAR 0 3
23745: PPUSH
23746: LD_INT 1
23748: PPUSH
23749: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23753: LD_INT 23
23755: PPUSH
23756: LD_VAR 0 3
23760: PPUSH
23761: LD_INT 1
23763: PPUSH
23764: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23768: LD_INT 26
23770: PPUSH
23771: LD_VAR 0 3
23775: PPUSH
23776: LD_INT 1
23778: PPUSH
23779: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23783: LD_INT 27
23785: PPUSH
23786: LD_VAR 0 3
23790: PPUSH
23791: LD_INT 1
23793: PPUSH
23794: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23798: LD_INT 28
23800: PPUSH
23801: LD_VAR 0 3
23805: PPUSH
23806: LD_INT 1
23808: PPUSH
23809: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23813: LD_INT 29
23815: PPUSH
23816: LD_VAR 0 3
23820: PPUSH
23821: LD_INT 1
23823: PPUSH
23824: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23828: LD_INT 30
23830: PPUSH
23831: LD_VAR 0 3
23835: PPUSH
23836: LD_INT 1
23838: PPUSH
23839: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23843: LD_INT 31
23845: PPUSH
23846: LD_VAR 0 3
23850: PPUSH
23851: LD_INT 1
23853: PPUSH
23854: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23858: LD_INT 32
23860: PPUSH
23861: LD_VAR 0 3
23865: PPUSH
23866: LD_INT 1
23868: PPUSH
23869: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23873: LD_INT 36
23875: PPUSH
23876: LD_VAR 0 3
23880: PPUSH
23881: LD_INT 1
23883: PPUSH
23884: CALL_OW 324
// end ; 5 :
23888: GO 26019
23890: LD_INT 5
23892: DOUBLE
23893: EQUAL
23894: IFTRUE 23898
23896: GO 25011
23898: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23899: LD_INT 35
23901: PPUSH
23902: LD_VAR 0 3
23906: PPUSH
23907: LD_INT 1
23909: PPUSH
23910: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23914: LD_INT 45
23916: PPUSH
23917: LD_VAR 0 3
23921: PPUSH
23922: LD_INT 1
23924: PPUSH
23925: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23929: LD_INT 46
23931: PPUSH
23932: LD_VAR 0 3
23936: PPUSH
23937: LD_INT 1
23939: PPUSH
23940: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23944: LD_INT 47
23946: PPUSH
23947: LD_VAR 0 3
23951: PPUSH
23952: LD_INT 1
23954: PPUSH
23955: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23959: LD_INT 1
23961: PPUSH
23962: LD_VAR 0 3
23966: PPUSH
23967: LD_INT 1
23969: PPUSH
23970: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23974: LD_INT 2
23976: PPUSH
23977: LD_VAR 0 3
23981: PPUSH
23982: LD_INT 1
23984: PPUSH
23985: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23989: LD_INT 11
23991: PPUSH
23992: LD_VAR 0 3
23996: PPUSH
23997: LD_INT 1
23999: PPUSH
24000: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24004: LD_INT 20
24006: PPUSH
24007: LD_VAR 0 3
24011: PPUSH
24012: LD_INT 1
24014: PPUSH
24015: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24019: LD_INT 48
24021: PPUSH
24022: LD_VAR 0 3
24026: PPUSH
24027: LD_INT 1
24029: PPUSH
24030: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24034: LD_INT 49
24036: PPUSH
24037: LD_VAR 0 3
24041: PPUSH
24042: LD_INT 1
24044: PPUSH
24045: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24049: LD_INT 69
24051: PPUSH
24052: LD_VAR 0 3
24056: PPUSH
24057: LD_INT 1
24059: PPUSH
24060: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24064: LD_INT 39
24066: PPUSH
24067: LD_VAR 0 3
24071: PPUSH
24072: LD_INT 1
24074: PPUSH
24075: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24079: LD_INT 34
24081: PPUSH
24082: LD_VAR 0 3
24086: PPUSH
24087: LD_INT 1
24089: PPUSH
24090: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24094: LD_INT 42
24096: PPUSH
24097: LD_VAR 0 3
24101: PPUSH
24102: LD_INT 1
24104: PPUSH
24105: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24109: LD_INT 44
24111: PPUSH
24112: LD_VAR 0 3
24116: PPUSH
24117: LD_INT 1
24119: PPUSH
24120: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24124: LD_INT 41
24126: PPUSH
24127: LD_VAR 0 3
24131: PPUSH
24132: LD_INT 1
24134: PPUSH
24135: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24139: LD_INT 40
24141: PPUSH
24142: LD_VAR 0 3
24146: PPUSH
24147: LD_INT 1
24149: PPUSH
24150: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24154: LD_INT 43
24156: PPUSH
24157: LD_VAR 0 3
24161: PPUSH
24162: LD_INT 1
24164: PPUSH
24165: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24169: LD_INT 70
24171: PPUSH
24172: LD_VAR 0 3
24176: PPUSH
24177: LD_INT 1
24179: PPUSH
24180: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24184: LD_INT 51
24186: PPUSH
24187: LD_VAR 0 3
24191: PPUSH
24192: LD_INT 1
24194: PPUSH
24195: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24199: LD_INT 52
24201: PPUSH
24202: LD_VAR 0 3
24206: PPUSH
24207: LD_INT 1
24209: PPUSH
24210: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24214: LD_INT 6
24216: PPUSH
24217: LD_VAR 0 3
24221: PPUSH
24222: LD_INT 1
24224: PPUSH
24225: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24229: LD_INT 15
24231: PPUSH
24232: LD_VAR 0 3
24236: PPUSH
24237: LD_INT 1
24239: PPUSH
24240: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24244: LD_INT 7
24246: PPUSH
24247: LD_VAR 0 3
24251: PPUSH
24252: LD_INT 1
24254: PPUSH
24255: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24259: LD_INT 12
24261: PPUSH
24262: LD_VAR 0 3
24266: PPUSH
24267: LD_INT 1
24269: PPUSH
24270: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24274: LD_INT 17
24276: PPUSH
24277: LD_VAR 0 3
24281: PPUSH
24282: LD_INT 1
24284: PPUSH
24285: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24289: LD_INT 18
24291: PPUSH
24292: LD_VAR 0 3
24296: PPUSH
24297: LD_INT 1
24299: PPUSH
24300: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24304: LD_INT 60
24306: PPUSH
24307: LD_VAR 0 3
24311: PPUSH
24312: LD_INT 1
24314: PPUSH
24315: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24319: LD_INT 32
24321: PPUSH
24322: LD_VAR 0 3
24326: PPUSH
24327: LD_INT 1
24329: PPUSH
24330: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24334: LD_INT 9
24336: PPUSH
24337: LD_VAR 0 3
24341: PPUSH
24342: LD_INT 1
24344: PPUSH
24345: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24349: LD_INT 57
24351: PPUSH
24352: LD_VAR 0 3
24356: PPUSH
24357: LD_INT 1
24359: PPUSH
24360: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24364: LD_INT 30
24366: PPUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: LD_INT 1
24374: PPUSH
24375: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24379: LD_INT 37
24381: PPUSH
24382: LD_VAR 0 3
24386: PPUSH
24387: LD_INT 1
24389: PPUSH
24390: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24394: LD_INT 63
24396: PPUSH
24397: LD_VAR 0 3
24401: PPUSH
24402: LD_INT 1
24404: PPUSH
24405: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24409: LD_INT 3
24411: PPUSH
24412: LD_VAR 0 3
24416: PPUSH
24417: LD_INT 1
24419: PPUSH
24420: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24424: LD_INT 4
24426: PPUSH
24427: LD_VAR 0 3
24431: PPUSH
24432: LD_INT 1
24434: PPUSH
24435: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24439: LD_INT 5
24441: PPUSH
24442: LD_VAR 0 3
24446: PPUSH
24447: LD_INT 1
24449: PPUSH
24450: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24454: LD_INT 66
24456: PPUSH
24457: LD_VAR 0 3
24461: PPUSH
24462: LD_INT 1
24464: PPUSH
24465: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24469: LD_INT 21
24471: PPUSH
24472: LD_VAR 0 3
24476: PPUSH
24477: LD_INT 1
24479: PPUSH
24480: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24484: LD_INT 22
24486: PPUSH
24487: LD_VAR 0 3
24491: PPUSH
24492: LD_INT 1
24494: PPUSH
24495: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24499: LD_INT 19
24501: PPUSH
24502: LD_VAR 0 3
24506: PPUSH
24507: LD_INT 1
24509: PPUSH
24510: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24514: LD_INT 54
24516: PPUSH
24517: LD_VAR 0 3
24521: PPUSH
24522: LD_INT 1
24524: PPUSH
24525: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24529: LD_INT 55
24531: PPUSH
24532: LD_VAR 0 3
24536: PPUSH
24537: LD_INT 1
24539: PPUSH
24540: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
24544: LD_INT 0
24546: PPUSH
24547: LD_VAR 0 3
24551: PPUSH
24552: LD_INT 1
24554: PPUSH
24555: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
24559: LD_INT 1
24561: PPUSH
24562: LD_VAR 0 3
24566: PPUSH
24567: LD_INT 1
24569: PPUSH
24570: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24574: LD_INT 2
24576: PPUSH
24577: LD_VAR 0 3
24581: PPUSH
24582: LD_INT 1
24584: PPUSH
24585: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24589: LD_INT 3
24591: PPUSH
24592: LD_VAR 0 3
24596: PPUSH
24597: LD_INT 1
24599: PPUSH
24600: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24604: LD_INT 4
24606: PPUSH
24607: LD_VAR 0 3
24611: PPUSH
24612: LD_INT 1
24614: PPUSH
24615: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24619: LD_INT 5
24621: PPUSH
24622: LD_VAR 0 3
24626: PPUSH
24627: LD_INT 1
24629: PPUSH
24630: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24634: LD_INT 6
24636: PPUSH
24637: LD_VAR 0 3
24641: PPUSH
24642: LD_INT 1
24644: PPUSH
24645: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24649: LD_INT 7
24651: PPUSH
24652: LD_VAR 0 3
24656: PPUSH
24657: LD_INT 1
24659: PPUSH
24660: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24664: LD_INT 8
24666: PPUSH
24667: LD_VAR 0 3
24671: PPUSH
24672: LD_INT 1
24674: PPUSH
24675: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24679: LD_INT 10
24681: PPUSH
24682: LD_VAR 0 3
24686: PPUSH
24687: LD_INT 1
24689: PPUSH
24690: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24694: LD_INT 11
24696: PPUSH
24697: LD_VAR 0 3
24701: PPUSH
24702: LD_INT 1
24704: PPUSH
24705: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24709: LD_INT 12
24711: PPUSH
24712: LD_VAR 0 3
24716: PPUSH
24717: LD_INT 1
24719: PPUSH
24720: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24724: LD_INT 13
24726: PPUSH
24727: LD_VAR 0 3
24731: PPUSH
24732: LD_INT 1
24734: PPUSH
24735: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24739: LD_INT 14
24741: PPUSH
24742: LD_VAR 0 3
24746: PPUSH
24747: LD_INT 1
24749: PPUSH
24750: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24754: LD_INT 15
24756: PPUSH
24757: LD_VAR 0 3
24761: PPUSH
24762: LD_INT 1
24764: PPUSH
24765: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24769: LD_INT 16
24771: PPUSH
24772: LD_VAR 0 3
24776: PPUSH
24777: LD_INT 1
24779: PPUSH
24780: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24784: LD_INT 17
24786: PPUSH
24787: LD_VAR 0 3
24791: PPUSH
24792: LD_INT 1
24794: PPUSH
24795: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24799: LD_INT 18
24801: PPUSH
24802: LD_VAR 0 3
24806: PPUSH
24807: LD_INT 1
24809: PPUSH
24810: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
24814: LD_INT 19
24816: PPUSH
24817: LD_VAR 0 3
24821: PPUSH
24822: LD_INT 1
24824: PPUSH
24825: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
24829: LD_INT 20
24831: PPUSH
24832: LD_VAR 0 3
24836: PPUSH
24837: LD_INT 1
24839: PPUSH
24840: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
24844: LD_INT 21
24846: PPUSH
24847: LD_VAR 0 3
24851: PPUSH
24852: LD_INT 1
24854: PPUSH
24855: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
24859: LD_INT 23
24861: PPUSH
24862: LD_VAR 0 3
24866: PPUSH
24867: LD_INT 1
24869: PPUSH
24870: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
24874: LD_INT 26
24876: PPUSH
24877: LD_VAR 0 3
24881: PPUSH
24882: LD_INT 1
24884: PPUSH
24885: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
24889: LD_INT 27
24891: PPUSH
24892: LD_VAR 0 3
24896: PPUSH
24897: LD_INT 1
24899: PPUSH
24900: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
24904: LD_INT 28
24906: PPUSH
24907: LD_VAR 0 3
24911: PPUSH
24912: LD_INT 1
24914: PPUSH
24915: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
24919: LD_INT 29
24921: PPUSH
24922: LD_VAR 0 3
24926: PPUSH
24927: LD_INT 1
24929: PPUSH
24930: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24934: LD_INT 30
24936: PPUSH
24937: LD_VAR 0 3
24941: PPUSH
24942: LD_INT 1
24944: PPUSH
24945: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24949: LD_INT 31
24951: PPUSH
24952: LD_VAR 0 3
24956: PPUSH
24957: LD_INT 1
24959: PPUSH
24960: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24964: LD_INT 32
24966: PPUSH
24967: LD_VAR 0 3
24971: PPUSH
24972: LD_INT 1
24974: PPUSH
24975: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
24979: LD_INT 33
24981: PPUSH
24982: LD_VAR 0 3
24986: PPUSH
24987: LD_INT 1
24989: PPUSH
24990: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
24994: LD_INT 36
24996: PPUSH
24997: LD_VAR 0 3
25001: PPUSH
25002: LD_INT 1
25004: PPUSH
25005: CALL_OW 324
// end ; 6 :
25009: GO 26019
25011: LD_INT 6
25013: DOUBLE
25014: EQUAL
25015: IFTRUE 25019
25017: GO 25944
25019: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
25020: LD_INT 35
25022: PPUSH
25023: LD_VAR 0 3
25027: PPUSH
25028: LD_INT 1
25030: PPUSH
25031: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
25035: LD_INT 45
25037: PPUSH
25038: LD_VAR 0 3
25042: PPUSH
25043: LD_INT 1
25045: PPUSH
25046: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
25050: LD_INT 46
25052: PPUSH
25053: LD_VAR 0 3
25057: PPUSH
25058: LD_INT 1
25060: PPUSH
25061: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
25065: LD_INT 47
25067: PPUSH
25068: LD_VAR 0 3
25072: PPUSH
25073: LD_INT 1
25075: PPUSH
25076: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
25080: LD_INT 1
25082: PPUSH
25083: LD_VAR 0 3
25087: PPUSH
25088: LD_INT 1
25090: PPUSH
25091: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
25095: LD_INT 2
25097: PPUSH
25098: LD_VAR 0 3
25102: PPUSH
25103: LD_INT 1
25105: PPUSH
25106: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
25110: LD_INT 11
25112: PPUSH
25113: LD_VAR 0 3
25117: PPUSH
25118: LD_INT 1
25120: PPUSH
25121: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
25125: LD_INT 20
25127: PPUSH
25128: LD_VAR 0 3
25132: PPUSH
25133: LD_INT 1
25135: PPUSH
25136: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
25140: LD_INT 48
25142: PPUSH
25143: LD_VAR 0 3
25147: PPUSH
25148: LD_INT 1
25150: PPUSH
25151: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
25155: LD_INT 49
25157: PPUSH
25158: LD_VAR 0 3
25162: PPUSH
25163: LD_INT 1
25165: PPUSH
25166: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
25170: LD_INT 50
25172: PPUSH
25173: LD_VAR 0 3
25177: PPUSH
25178: LD_INT 1
25180: PPUSH
25181: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
25185: LD_INT 69
25187: PPUSH
25188: LD_VAR 0 3
25192: PPUSH
25193: LD_INT 1
25195: PPUSH
25196: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
25200: LD_INT 39
25202: PPUSH
25203: LD_VAR 0 3
25207: PPUSH
25208: LD_INT 1
25210: PPUSH
25211: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
25215: LD_INT 34
25217: PPUSH
25218: LD_VAR 0 3
25222: PPUSH
25223: LD_INT 1
25225: PPUSH
25226: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
25230: LD_INT 42
25232: PPUSH
25233: LD_VAR 0 3
25237: PPUSH
25238: LD_INT 1
25240: PPUSH
25241: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
25245: LD_INT 44
25247: PPUSH
25248: LD_VAR 0 3
25252: PPUSH
25253: LD_INT 1
25255: PPUSH
25256: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
25260: LD_INT 41
25262: PPUSH
25263: LD_VAR 0 3
25267: PPUSH
25268: LD_INT 1
25270: PPUSH
25271: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
25275: LD_INT 13
25277: PPUSH
25278: LD_VAR 0 3
25282: PPUSH
25283: LD_INT 1
25285: PPUSH
25286: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
25290: LD_INT 40
25292: PPUSH
25293: LD_VAR 0 3
25297: PPUSH
25298: LD_INT 1
25300: PPUSH
25301: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
25305: LD_INT 43
25307: PPUSH
25308: LD_VAR 0 3
25312: PPUSH
25313: LD_INT 1
25315: PPUSH
25316: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
25320: LD_INT 70
25322: PPUSH
25323: LD_VAR 0 3
25327: PPUSH
25328: LD_INT 1
25330: PPUSH
25331: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
25335: LD_INT 23
25337: PPUSH
25338: LD_VAR 0 3
25342: PPUSH
25343: LD_INT 1
25345: PPUSH
25346: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
25350: LD_INT 51
25352: PPUSH
25353: LD_VAR 0 3
25357: PPUSH
25358: LD_INT 1
25360: PPUSH
25361: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
25365: LD_INT 52
25367: PPUSH
25368: LD_VAR 0 3
25372: PPUSH
25373: LD_INT 1
25375: PPUSH
25376: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
25380: LD_INT 6
25382: PPUSH
25383: LD_VAR 0 3
25387: PPUSH
25388: LD_INT 1
25390: PPUSH
25391: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
25395: LD_INT 15
25397: PPUSH
25398: LD_VAR 0 3
25402: PPUSH
25403: LD_INT 1
25405: PPUSH
25406: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
25410: LD_INT 7
25412: PPUSH
25413: LD_VAR 0 3
25417: PPUSH
25418: LD_INT 1
25420: PPUSH
25421: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
25425: LD_INT 12
25427: PPUSH
25428: LD_VAR 0 3
25432: PPUSH
25433: LD_INT 1
25435: PPUSH
25436: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
25440: LD_INT 10
25442: PPUSH
25443: LD_VAR 0 3
25447: PPUSH
25448: LD_INT 1
25450: PPUSH
25451: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
25455: LD_INT 17
25457: PPUSH
25458: LD_VAR 0 3
25462: PPUSH
25463: LD_INT 1
25465: PPUSH
25466: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
25470: LD_INT 18
25472: PPUSH
25473: LD_VAR 0 3
25477: PPUSH
25478: LD_INT 1
25480: PPUSH
25481: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
25485: LD_INT 60
25487: PPUSH
25488: LD_VAR 0 3
25492: PPUSH
25493: LD_INT 1
25495: PPUSH
25496: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
25500: LD_INT 61
25502: PPUSH
25503: LD_VAR 0 3
25507: PPUSH
25508: LD_INT 1
25510: PPUSH
25511: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
25515: LD_INT 32
25517: PPUSH
25518: LD_VAR 0 3
25522: PPUSH
25523: LD_INT 1
25525: PPUSH
25526: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
25530: LD_INT 27
25532: PPUSH
25533: LD_VAR 0 3
25537: PPUSH
25538: LD_INT 1
25540: PPUSH
25541: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
25545: LD_INT 36
25547: PPUSH
25548: LD_VAR 0 3
25552: PPUSH
25553: LD_INT 1
25555: PPUSH
25556: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
25560: LD_INT 33
25562: PPUSH
25563: LD_VAR 0 3
25567: PPUSH
25568: LD_INT 1
25570: PPUSH
25571: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25575: LD_INT 9
25577: PPUSH
25578: LD_VAR 0 3
25582: PPUSH
25583: LD_INT 1
25585: PPUSH
25586: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25590: LD_INT 38
25592: PPUSH
25593: LD_VAR 0 3
25597: PPUSH
25598: LD_INT 1
25600: PPUSH
25601: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25605: LD_INT 57
25607: PPUSH
25608: LD_VAR 0 3
25612: PPUSH
25613: LD_INT 1
25615: PPUSH
25616: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25620: LD_INT 58
25622: PPUSH
25623: LD_VAR 0 3
25627: PPUSH
25628: LD_INT 1
25630: PPUSH
25631: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25635: LD_INT 28
25637: PPUSH
25638: LD_VAR 0 3
25642: PPUSH
25643: LD_INT 1
25645: PPUSH
25646: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25650: LD_INT 29
25652: PPUSH
25653: LD_VAR 0 3
25657: PPUSH
25658: LD_INT 1
25660: PPUSH
25661: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25665: LD_INT 30
25667: PPUSH
25668: LD_VAR 0 3
25672: PPUSH
25673: LD_INT 1
25675: PPUSH
25676: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25680: LD_INT 37
25682: PPUSH
25683: LD_VAR 0 3
25687: PPUSH
25688: LD_INT 1
25690: PPUSH
25691: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25695: LD_INT 63
25697: PPUSH
25698: LD_VAR 0 3
25702: PPUSH
25703: LD_INT 1
25705: PPUSH
25706: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25710: LD_INT 64
25712: PPUSH
25713: LD_VAR 0 3
25717: PPUSH
25718: LD_INT 1
25720: PPUSH
25721: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25725: LD_INT 3
25727: PPUSH
25728: LD_VAR 0 3
25732: PPUSH
25733: LD_INT 1
25735: PPUSH
25736: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25740: LD_INT 4
25742: PPUSH
25743: LD_VAR 0 3
25747: PPUSH
25748: LD_INT 1
25750: PPUSH
25751: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25755: LD_INT 5
25757: PPUSH
25758: LD_VAR 0 3
25762: PPUSH
25763: LD_INT 1
25765: PPUSH
25766: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25770: LD_INT 8
25772: PPUSH
25773: LD_VAR 0 3
25777: PPUSH
25778: LD_INT 1
25780: PPUSH
25781: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25785: LD_INT 66
25787: PPUSH
25788: LD_VAR 0 3
25792: PPUSH
25793: LD_INT 1
25795: PPUSH
25796: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25800: LD_INT 67
25802: PPUSH
25803: LD_VAR 0 3
25807: PPUSH
25808: LD_INT 1
25810: PPUSH
25811: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
25815: LD_INT 21
25817: PPUSH
25818: LD_VAR 0 3
25822: PPUSH
25823: LD_INT 1
25825: PPUSH
25826: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
25830: LD_INT 22
25832: PPUSH
25833: LD_VAR 0 3
25837: PPUSH
25838: LD_INT 1
25840: PPUSH
25841: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
25845: LD_INT 19
25847: PPUSH
25848: LD_VAR 0 3
25852: PPUSH
25853: LD_INT 1
25855: PPUSH
25856: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
25860: LD_INT 26
25862: PPUSH
25863: LD_VAR 0 3
25867: PPUSH
25868: LD_INT 1
25870: PPUSH
25871: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
25875: LD_INT 54
25877: PPUSH
25878: LD_VAR 0 3
25882: PPUSH
25883: LD_INT 1
25885: PPUSH
25886: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
25890: LD_INT 55
25892: PPUSH
25893: LD_VAR 0 3
25897: PPUSH
25898: LD_INT 1
25900: PPUSH
25901: CALL_OW 322
// for i = 0 to 39 do
25905: LD_ADDR_VAR 0 4
25909: PUSH
25910: DOUBLE
25911: LD_INT 0
25913: DEC
25914: ST_TO_ADDR
25915: LD_INT 39
25917: PUSH
25918: FOR_TO
25919: IFFALSE 25940
// SetRestrict ( i , side , true ) ;
25921: LD_VAR 0 4
25925: PPUSH
25926: LD_VAR 0 3
25930: PPUSH
25931: LD_INT 1
25933: PPUSH
25934: CALL_OW 324
25938: GO 25918
25940: POP
25941: POP
// end ; else
25942: GO 26019
25944: POP
// begin for i = 1 to 73 do
25945: LD_ADDR_VAR 0 4
25949: PUSH
25950: DOUBLE
25951: LD_INT 1
25953: DEC
25954: ST_TO_ADDR
25955: LD_INT 73
25957: PUSH
25958: FOR_TO
25959: IFFALSE 25980
// SetTech ( i , side , state_enabled ) ;
25961: LD_VAR 0 4
25965: PPUSH
25966: LD_VAR 0 3
25970: PPUSH
25971: LD_INT 1
25973: PPUSH
25974: CALL_OW 322
25978: GO 25958
25980: POP
25981: POP
// for i = 0 to 39 do
25982: LD_ADDR_VAR 0 4
25986: PUSH
25987: DOUBLE
25988: LD_INT 0
25990: DEC
25991: ST_TO_ADDR
25992: LD_INT 39
25994: PUSH
25995: FOR_TO
25996: IFFALSE 26017
// SetRestrict ( i , side , true ) ;
25998: LD_VAR 0 4
26002: PPUSH
26003: LD_VAR 0 3
26007: PPUSH
26008: LD_INT 1
26010: PPUSH
26011: CALL_OW 324
26015: GO 25995
26017: POP
26018: POP
// end ; end ; end ;
26019: GO 22024
26021: POP
26022: POP
// end ;
26023: LD_VAR 0 2
26027: RET
