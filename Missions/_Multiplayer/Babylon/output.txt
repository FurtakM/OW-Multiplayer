// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export Position_Sides ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 48
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 3 ;
 151: LD_ADDR_EXP 48
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// for i := 1 to 8 do
 356: LD_ADDR_VAR 0 2
 360: PUSH
 361: DOUBLE
 362: LD_INT 1
 364: DEC
 365: ST_TO_ADDR
 366: LD_INT 8
 368: PUSH
 369: FOR_TO
 370: IFFALSE 457
// if Multiplayer_GetPlayerIsSpec ( i ) then
 372: LD_VAR 0 2
 376: PPUSH
 377: CALL_OW 530
 381: IFFALSE 455
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 383: LD_ADDR_EXP 23
 387: PUSH
 388: LD_EXP 23
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: LD_INT 0
 400: PPUSH
 401: CALL_OW 1
 405: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 406: LD_ADDR_EXP 22
 410: PUSH
 411: LD_EXP 22
 415: PPUSH
 416: LD_EXP 21
 420: PUSH
 421: LD_VAR 0 2
 425: ARRAY
 426: PPUSH
 427: LD_EXP 22
 431: PUSH
 432: LD_EXP 21
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: ARRAY
 443: PUSH
 444: LD_VAR 0 2
 448: DIFF
 449: PPUSH
 450: CALL_OW 1
 454: ST_TO_ADDR
// end ;
 455: GO 369
 457: POP
 458: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 459: LD_ADDR_EXP 29
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// for i := 1 to 8 do
 482: LD_ADDR_VAR 0 2
 486: PUSH
 487: DOUBLE
 488: LD_INT 1
 490: DEC
 491: ST_TO_ADDR
 492: LD_INT 8
 494: PUSH
 495: FOR_TO
 496: IFFALSE 543
// if Side_Positions [ i ] then
 498: LD_EXP 23
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: IFFALSE 541
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 510: LD_ADDR_EXP 29
 514: PUSH
 515: LD_EXP 29
 519: PPUSH
 520: LD_EXP 23
 524: PUSH
 525: LD_VAR 0 2
 529: ARRAY
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: CALL_OW 1
 540: ST_TO_ADDR
 541: GO 495
 543: POP
 544: POP
// Team_Game := Side_Teams [ your_side ] ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_EXP 21
 554: PUSH
 555: LD_OWVAR 2
 559: ARRAY
 560: ST_TO_ADDR
// if Multiplayer then
 561: LD_OWVAR 4
 565: IFFALSE 837
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 567: LD_ADDR_EXP 50
 571: PUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL_OW 426
 579: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 580: LD_ADDR_EXP 51
 584: PUSH
 585: LD_INT 1
 587: PPUSH
 588: CALL_OW 426
 592: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 593: LD_ADDR_EXP 52
 597: PUSH
 598: LD_INT 2
 600: PPUSH
 601: CALL_OW 426
 605: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 606: LD_ADDR_EXP 53
 610: PUSH
 611: LD_INT 3
 613: PPUSH
 614: CALL_OW 426
 618: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 619: LD_ADDR_EXP 54
 623: PUSH
 624: LD_INT 4
 626: PPUSH
 627: CALL_OW 426
 631: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 632: LD_ADDR_EXP 55
 636: PUSH
 637: LD_INT 5
 639: PPUSH
 640: CALL_OW 426
 644: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 645: LD_ADDR_EXP 57
 649: PUSH
 650: LD_INT 10
 652: PPUSH
 653: CALL_OW 426
 657: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 658: LD_ADDR_EXP 58
 662: PUSH
 663: LD_INT 11
 665: PPUSH
 666: CALL_OW 426
 670: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 671: LD_ADDR_EXP 59
 675: PUSH
 676: LD_INT 12
 678: PPUSH
 679: CALL_OW 426
 683: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 684: LD_ADDR_EXP 61
 688: PUSH
 689: LD_INT 13
 691: PPUSH
 692: CALL_OW 426
 696: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 697: LD_ADDR_EXP 60
 701: PUSH
 702: LD_INT 14
 704: PPUSH
 705: CALL_OW 426
 709: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 710: LD_ADDR_EXP 62
 714: PUSH
 715: LD_INT 15
 717: PPUSH
 718: CALL_OW 426
 722: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 723: LD_ADDR_EXP 1
 727: PUSH
 728: LD_INT 6
 730: PPUSH
 731: CALL_OW 426
 735: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 736: LD_ADDR_EXP 2
 740: PUSH
 741: LD_INT 7
 743: PPUSH
 744: CALL_OW 426
 748: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 749: LD_ADDR_EXP 4
 753: PUSH
 754: LD_INT 8
 756: PPUSH
 757: CALL_OW 426
 761: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 762: LD_ADDR_EXP 3
 766: PUSH
 767: LD_INT 9
 769: PPUSH
 770: CALL_OW 426
 774: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 775: LD_ADDR_EXP 5
 779: PUSH
 780: LD_INT 16
 782: PPUSH
 783: CALL_OW 426
 787: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 788: LD_ADDR_EXP 6
 792: PUSH
 793: LD_INT 17
 795: PPUSH
 796: CALL_OW 426
 800: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 801: LD_ADDR_EXP 63
 805: PUSH
 806: LD_INT 20
 808: PPUSH
 809: CALL_OW 426
 813: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 814: LD_ADDR_VAR 0 3
 818: PUSH
 819: LD_INT 22
 821: PPUSH
 822: CALL_OW 426
 826: ST_TO_ADDR
// def_win_rules = 0 ;
 827: LD_ADDR_EXP 19
 831: PUSH
 832: LD_INT 0
 834: ST_TO_ADDR
// end else
 835: GO 1009
// begin Randomize ;
 837: CALL_OW 10
// def_base_level := 2 ;
 841: LD_ADDR_EXP 50
 845: PUSH
 846: LD_INT 2
 848: ST_TO_ADDR
// def_amount_of_people := 1 ;
 849: LD_ADDR_EXP 51
 853: PUSH
 854: LD_INT 1
 856: ST_TO_ADDR
// def_skill_level := 1 ;
 857: LD_ADDR_EXP 52
 861: PUSH
 862: LD_INT 1
 864: ST_TO_ADDR
// def_starting_resources := 2 ;
 865: LD_ADDR_EXP 53
 869: PUSH
 870: LD_INT 2
 872: ST_TO_ADDR
// def_shipments_density := 1 ;
 873: LD_ADDR_EXP 54
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 881: LD_ADDR_EXP 55
 885: PUSH
 886: LD_INT 0
 888: ST_TO_ADDR
// def_shared_vision := 1 ;
 889: LD_ADDR_EXP 57
 893: PUSH
 894: LD_INT 1
 896: ST_TO_ADDR
// def_morale_flags := 1 ;
 897: LD_ADDR_EXP 58
 901: PUSH
 902: LD_INT 1
 904: ST_TO_ADDR
// def_siberite_detection := 1 ;
 905: LD_ADDR_EXP 59
 909: PUSH
 910: LD_INT 1
 912: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 913: LD_ADDR_EXP 61
 917: PUSH
 918: LD_INT 3
 920: ST_TO_ADDR
// def_people_respawning := 2 ;
 921: LD_ADDR_EXP 60
 925: PUSH
 926: LD_INT 2
 928: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 929: LD_ADDR_EXP 62
 933: PUSH
 934: LD_INT 0
 936: ST_TO_ADDR
// def_artefact_one := 0 ;
 937: LD_ADDR_EXP 1
 941: PUSH
 942: LD_INT 0
 944: ST_TO_ADDR
// def_artefact_two := 0 ;
 945: LD_ADDR_EXP 2
 949: PUSH
 950: LD_INT 0
 952: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 953: LD_ADDR_EXP 4
 957: PUSH
 958: LD_INT 2
 960: ST_TO_ADDR
// def_artefact_three := 0 ;
 961: LD_ADDR_EXP 3
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// def_kings_age := 1 ;
 969: LD_ADDR_EXP 5
 973: PUSH
 974: LD_INT 1
 976: ST_TO_ADDR
// def_public_score := 0 ;
 977: LD_ADDR_EXP 6
 981: PUSH
 982: LD_INT 0
 984: ST_TO_ADDR
// def_builduptime := 1 ;
 985: LD_ADDR_EXP 63
 989: PUSH
 990: LD_INT 1
 992: ST_TO_ADDR
// tech_level = 4 ;
 993: LD_ADDR_VAR 0 3
 997: PUSH
 998: LD_INT 4
1000: ST_TO_ADDR
// def_win_rules = 0 ;
1001: LD_ADDR_EXP 19
1005: PUSH
1006: LD_INT 0
1008: ST_TO_ADDR
// end ; InitGameRules ;
1009: CALL 14075 0 0
// if def_game_rules = 0 then
1013: LD_EXP 49
1017: PUSH
1018: LD_INT 0
1020: EQUAL
1021: IFFALSE 1048
// begin if isSGUI then
1023: LD_OWVAR 83
1027: IFFALSE 1035
// setMpTechs ( ) else
1029: CALL 21867 0 0
1033: GO 1048
// begin SetMpTechLevel ( tech_level + 1 ) ;
1035: LD_VAR 0 3
1039: PUSH
1040: LD_INT 1
1042: PLUS
1043: PPUSH
1044: CALL 22014 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1048: LD_ADDR_EXP 7
1052: PUSH
1053: LD_INT 0
1055: PUSH
1056: LD_INT 1
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: PUSH
1071: LD_EXP 50
1075: PUSH
1076: LD_INT 1
1078: PLUS
1079: ARRAY
1080: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
1081: LD_ADDR_EXP 8
1085: PUSH
1086: LD_INT 0
1088: PUSH
1089: LD_INT 0
1091: PUSH
1092: LD_INT 2
1094: PUSH
1095: LD_INT 3
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: LD_EXP 50
1108: PUSH
1109: LD_INT 1
1111: PLUS
1112: ARRAY
1113: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1114: LD_ADDR_EXP 9
1118: PUSH
1119: LD_EXP 51
1123: PUSH
1124: LD_INT 4
1126: PLUS
1127: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1128: LD_ADDR_EXP 10
1132: PUSH
1133: LD_INT 2
1135: PUSH
1136: LD_INT 3
1138: PUSH
1139: LD_INT 4
1141: PUSH
1142: LD_INT 5
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: PUSH
1151: LD_EXP 52
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: ARRAY
1160: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1161: LD_ADDR_EXP 12
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: LD_INT 0
1171: PUSH
1172: LD_INT 0
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: PUSH
1180: LD_INT 30
1182: PUSH
1183: LD_INT 0
1185: PUSH
1186: LD_INT 0
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 50
1196: PUSH
1197: LD_INT 20
1199: PUSH
1200: LD_INT 0
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 80
1210: PUSH
1211: LD_INT 40
1213: PUSH
1214: LD_INT 20
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: PUSH
1228: LD_EXP 53
1232: PUSH
1233: LD_INT 1
1235: PLUS
1236: ARRAY
1237: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1238: LD_ADDR_EXP 11
1242: PUSH
1243: LD_INT 10
1245: PUSH
1246: EMPTY
1247: LIST
1248: PUSH
1249: LD_INT 7
1251: PUSH
1252: LD_INT 14
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: PUSH
1259: LD_INT 6
1261: PUSH
1262: LD_INT 12
1264: PUSH
1265: LD_INT 18
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: LIST
1272: PUSH
1273: LD_INT 5
1275: PUSH
1276: LD_INT 10
1278: PUSH
1279: LD_INT 15
1281: PUSH
1282: LD_INT 20
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: PUSH
1297: LD_EXP 53
1301: PUSH
1302: LD_INT 1
1304: PLUS
1305: ARRAY
1306: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 28 ;
1307: LD_ADDR_EXP 13
1311: PUSH
1312: LD_INT 20
1314: PUSH
1315: LD_EXP 54
1319: PUSH
1320: LD_INT 28
1322: MUL
1323: PLUS
1324: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1325: LD_ADDR_EXP 15
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: LD_INT 6
1338: PUSH
1339: LD_INT 9
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: PUSH
1348: LD_EXP 61
1352: PUSH
1353: LD_INT 1
1355: PLUS
1356: ARRAY
1357: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1358: LD_ADDR_EXP 16
1362: PUSH
1363: LD_INT 0
1365: PUSH
1366: LD_INT 12600
1368: PUSH
1369: LD_INT 2100
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PUSH
1377: LD_EXP 60
1381: PUSH
1382: LD_INT 1
1384: PLUS
1385: ARRAY
1386: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1387: LD_ADDR_EXP 17
1391: PUSH
1392: LD_INT 0
1394: PUSH
1395: LD_INT 21000
1397: PUSH
1398: LD_INT 4200
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: PUSH
1406: LD_EXP 60
1410: PUSH
1411: LD_INT 1
1413: PLUS
1414: ARRAY
1415: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1416: LD_ADDR_EXP 14
1420: PUSH
1421: LD_INT 1
1423: NEG
1424: PUSH
1425: LD_INT 350
1427: PUSH
1428: LD_INT 700
1430: PUSH
1431: LD_INT 1400
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: LD_EXP 58
1448: PUSH
1449: LD_INT 1
1451: PLUS
1452: ARRAY
1453: ST_TO_ADDR
// battle_flags_id := [ ] ;
1454: LD_ADDR_EXP 34
1458: PUSH
1459: EMPTY
1460: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1461: LD_ADDR_EXP 18
1465: PUSH
1466: LD_INT 0
1468: PUSH
1469: LD_INT 1
1471: PUSH
1472: LD_INT 63000
1474: PUSH
1475: LD_INT 126000
1477: PUSH
1478: LD_INT 189000
1480: PUSH
1481: LD_INT 252000
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_EXP 62
1496: PUSH
1497: LD_INT 1
1499: PLUS
1500: ARRAY
1501: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1502: LD_ADDR_EXP 20
1506: PUSH
1507: LD_INT 500
1509: PUSH
1510: LD_INT 1000
1512: PUSH
1513: LD_INT 1500
1515: PUSH
1516: LD_INT 2000
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: PUSH
1525: LD_EXP 5
1529: PUSH
1530: LD_INT 1
1532: PLUS
1533: ARRAY
1534: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1535: LD_ADDR_EXP 47
1539: PUSH
1540: LD_INT 21
1542: PUSH
1543: LD_INT 23
1545: PUSH
1546: LD_INT 20
1548: PUSH
1549: LD_INT 22
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: ST_TO_ADDR
// end ;
1558: LD_VAR 0 1
1562: RET
// function init_map ; var i ; begin
1563: LD_INT 0
1565: PPUSH
1566: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1567: LD_ADDR_EXP 33
1571: PUSH
1572: LD_INT 43
1574: PUSH
1575: LD_INT 9
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 123
1584: PUSH
1585: LD_INT 10
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 113
1594: PUSH
1595: LD_INT 155
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 186
1604: PUSH
1605: LD_INT 133
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1618: LD_ADDR_EXP 30
1622: PUSH
1623: LD_INT 18
1625: PUSH
1626: LD_INT 17
1628: PUSH
1629: LD_INT 2
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 156
1639: PUSH
1640: LD_INT 20
1642: PUSH
1643: LD_INT 3
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: LIST
1650: PUSH
1651: LD_INT 83
1653: PUSH
1654: LD_INT 140
1656: PUSH
1657: LD_INT 1
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 216
1667: PUSH
1668: LD_INT 143
1670: PUSH
1671: LD_INT 5
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: ST_TO_ADDR
// for i in depot_def do
1685: LD_ADDR_VAR 0 2
1689: PUSH
1690: LD_EXP 30
1694: PUSH
1695: FOR_IN
1696: IFFALSE 1770
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1698: LD_ADDR_EXP 32
1702: PUSH
1703: LD_EXP 32
1707: PUSH
1708: LD_VAR 0 2
1712: PUSH
1713: LD_INT 1
1715: ARRAY
1716: PPUSH
1717: LD_VAR 0 2
1721: PUSH
1722: LD_INT 3
1724: ARRAY
1725: PPUSH
1726: LD_INT 6
1728: PPUSH
1729: CALL_OW 272
1733: PUSH
1734: LD_VAR 0 2
1738: PUSH
1739: LD_INT 2
1741: ARRAY
1742: PPUSH
1743: LD_VAR 0 2
1747: PUSH
1748: LD_INT 3
1750: ARRAY
1751: PPUSH
1752: LD_INT 6
1754: PPUSH
1755: CALL_OW 273
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: EMPTY
1765: LIST
1766: ADD
1767: ST_TO_ADDR
1768: GO 1695
1770: POP
1771: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1772: LD_ADDR_EXP 31
1776: PUSH
1777: LD_INT 30
1779: PUSH
1780: LD_INT 36
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PUSH
1791: LD_INT 44
1793: PUSH
1794: LD_INT 21
1796: PUSH
1797: LD_INT 4
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 43
1807: PUSH
1808: LD_INT 33
1810: PUSH
1811: LD_INT 5
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 165
1826: PUSH
1827: LD_INT 34
1829: PUSH
1830: LD_INT 0
1832: PUSH
1833: EMPTY
1834: LIST
1835: LIST
1836: LIST
1837: PUSH
1838: LD_INT 137
1840: PUSH
1841: LD_INT 18
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 153
1854: PUSH
1855: LD_INT 37
1857: PUSH
1858: LD_INT 0
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: LIST
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: LD_INT 86
1873: PUSH
1874: LD_INT 120
1876: PUSH
1877: LD_INT 3
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_INT 105
1887: PUSH
1888: LD_INT 147
1890: PUSH
1891: LD_INT 4
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 68
1901: PUSH
1902: LD_INT 118
1904: PUSH
1905: LD_INT 2
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 199
1920: PUSH
1921: LD_INT 144
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 207
1934: PUSH
1935: LD_INT 119
1937: PUSH
1938: LD_INT 3
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 195
1948: PUSH
1949: LD_INT 118
1951: PUSH
1952: LD_INT 2
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: ST_TO_ADDR
// if not def_extra_oil_deposits then
1971: LD_EXP 55
1975: NOT
1976: IFFALSE 2017
// for i in extra_oil_deposits_locations do
1978: LD_ADDR_VAR 0 2
1982: PUSH
1983: LD_EXP 33
1987: PUSH
1988: FOR_IN
1989: IFFALSE 2015
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1991: LD_VAR 0 2
1995: PUSH
1996: LD_INT 1
1998: ARRAY
1999: PPUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: ARRAY
2008: PPUSH
2009: CALL_OW 63
2013: GO 1988
2015: POP
2016: POP
// end ;
2017: LD_VAR 0 1
2021: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2022: LD_INT 0
2024: PPUSH
2025: PPUSH
2026: PPUSH
// if not Team_Game then
2027: LD_EXP 25
2031: NOT
2032: IFFALSE 2130
// begin for i = 1 to 8 do
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: DOUBLE
2040: LD_INT 1
2042: DEC
2043: ST_TO_ADDR
2044: LD_INT 8
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2126
// for j = 1 to 8 do
2050: LD_ADDR_VAR 0 3
2054: PUSH
2055: DOUBLE
2056: LD_INT 1
2058: DEC
2059: ST_TO_ADDR
2060: LD_INT 8
2062: PUSH
2063: FOR_TO
2064: IFFALSE 2122
// if i <> j then
2066: LD_VAR 0 2
2070: PUSH
2071: LD_VAR 0 3
2075: NONEQUAL
2076: IFFALSE 2100
// SetAttitude ( i , j , att_neutral , true ) else
2078: LD_VAR 0 2
2082: PPUSH
2083: LD_VAR 0 3
2087: PPUSH
2088: LD_INT 0
2090: PPUSH
2091: LD_INT 1
2093: PPUSH
2094: CALL_OW 80
2098: GO 2120
// SetAttitude ( i , j , att_friend , true ) ;
2100: LD_VAR 0 2
2104: PPUSH
2105: LD_VAR 0 3
2109: PPUSH
2110: LD_INT 1
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: CALL_OW 80
2120: GO 2063
2122: POP
2123: POP
2124: GO 2047
2126: POP
2127: POP
// end else
2128: GO 2305
// begin if def_shared_vision then
2130: LD_EXP 57
2134: IFFALSE 2199
// begin for i in Teams do
2136: LD_ADDR_VAR 0 2
2140: PUSH
2141: LD_EXP 22
2145: PUSH
2146: FOR_IN
2147: IFFALSE 2197
// for j = 2 to i do
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: DOUBLE
2155: LD_INT 2
2157: DEC
2158: ST_TO_ADDR
2159: LD_VAR 0 2
2163: PUSH
2164: FOR_TO
2165: IFFALSE 2193
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2167: LD_VAR 0 2
2171: PUSH
2172: LD_VAR 0 3
2176: ARRAY
2177: PPUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_INT 1
2185: ARRAY
2186: PPUSH
2187: CALL_OW 343
2191: GO 2164
2193: POP
2194: POP
2195: GO 2146
2197: POP
2198: POP
// end ; for i = 1 to 8 do
2199: LD_ADDR_VAR 0 2
2203: PUSH
2204: DOUBLE
2205: LD_INT 1
2207: DEC
2208: ST_TO_ADDR
2209: LD_INT 8
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2303
// for j = 1 to 8 do
2215: LD_ADDR_VAR 0 3
2219: PUSH
2220: DOUBLE
2221: LD_INT 1
2223: DEC
2224: ST_TO_ADDR
2225: LD_INT 8
2227: PUSH
2228: FOR_TO
2229: IFFALSE 2299
// if Side_Teams [ i ] = Side_Teams [ j ] then
2231: LD_EXP 21
2235: PUSH
2236: LD_VAR 0 2
2240: ARRAY
2241: PUSH
2242: LD_EXP 21
2246: PUSH
2247: LD_VAR 0 3
2251: ARRAY
2252: EQUAL
2253: IFFALSE 2277
// SetAttitude ( i , j , att_friend , true ) else
2255: LD_VAR 0 2
2259: PPUSH
2260: LD_VAR 0 3
2264: PPUSH
2265: LD_INT 1
2267: PPUSH
2268: LD_INT 1
2270: PPUSH
2271: CALL_OW 80
2275: GO 2297
// SetAttitude ( i , j , att_enemy , true ) ;
2277: LD_VAR 0 2
2281: PPUSH
2282: LD_VAR 0 3
2286: PPUSH
2287: LD_INT 2
2289: PPUSH
2290: LD_INT 1
2292: PPUSH
2293: CALL_OW 80
2297: GO 2228
2299: POP
2300: POP
2301: GO 2212
2303: POP
2304: POP
// end ; end ;
2305: LD_VAR 0 1
2309: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2310: LD_INT 0
2312: PPUSH
2313: PPUSH
2314: PPUSH
2315: PPUSH
// result := [ ] ;
2316: LD_ADDR_VAR 0 7
2320: PUSH
2321: EMPTY
2322: ST_TO_ADDR
// for i := 1 to count do
2323: LD_ADDR_VAR 0 8
2327: PUSH
2328: DOUBLE
2329: LD_INT 1
2331: DEC
2332: ST_TO_ADDR
2333: LD_VAR 0 1
2337: PUSH
2338: FOR_TO
2339: IFFALSE 2757
// begin uc_direction := Rand ( 0 , 5 ) ;
2341: LD_ADDR_OWVAR 24
2345: PUSH
2346: LD_INT 0
2348: PPUSH
2349: LD_INT 5
2351: PPUSH
2352: CALL_OW 12
2356: ST_TO_ADDR
// if commander then
2357: LD_LOC 1
2361: IFFALSE 2470
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2363: LD_ADDR_OWVAR 26
2367: PUSH
2368: LD_OWVAR 19
2372: PUSH
2373: LD_OWVAR 20
2377: ARRAY
2378: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2379: LD_INT 1
2381: PPUSH
2382: LD_INT 2
2384: PPUSH
2385: CALL_OW 12
2389: PPUSH
2390: LD_VAR 0 2
2394: PPUSH
2395: LD_EXP 10
2399: PUSH
2400: LD_INT 2
2402: PLUS
2403: PPUSH
2404: CALL_OW 380
// hc_importance := 105 ;
2408: LD_ADDR_OWVAR 32
2412: PUSH
2413: LD_INT 105
2415: ST_TO_ADDR
// commander := false ;
2416: LD_ADDR_LOC 1
2420: PUSH
2421: LD_INT 0
2423: ST_TO_ADDR
// if Multiplayer then
2424: LD_OWVAR 4
2428: IFFALSE 2468
// begin hc_gallery := MULTIAVATARS ;
2430: LD_ADDR_OWVAR 33
2434: PUSH
2435: LD_STRING MULTIAVATARS
2437: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2438: LD_ADDR_OWVAR 34
2442: PUSH
2443: LD_OWVAR 20
2447: PPUSH
2448: CALL_OW 525
2452: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2453: LD_ADDR_OWVAR 27
2457: PUSH
2458: LD_OWVAR 20
2462: PPUSH
2463: CALL_OW 526
2467: ST_TO_ADDR
// end ; end else
2468: GO 2533
// begin hc_name :=  ;
2470: LD_ADDR_OWVAR 26
2474: PUSH
2475: LD_STRING 
2477: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2478: LD_INT 1
2480: PPUSH
2481: LD_INT 2
2483: PPUSH
2484: CALL_OW 12
2488: PPUSH
2489: LD_VAR 0 2
2493: PPUSH
2494: LD_EXP 10
2498: PPUSH
2499: CALL_OW 380
// hc_importance := 0 ;
2503: LD_ADDR_OWVAR 32
2507: PUSH
2508: LD_INT 0
2510: ST_TO_ADDR
// if Multiplayer then
2511: LD_OWVAR 4
2515: IFFALSE 2533
// begin hc_gallery :=  ;
2517: LD_ADDR_OWVAR 33
2521: PUSH
2522: LD_STRING 
2524: ST_TO_ADDR
// hc_face_number := 0 ;
2525: LD_ADDR_OWVAR 34
2529: PUSH
2530: LD_INT 0
2532: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2533: LD_ADDR_VAR 0 10
2537: PUSH
2538: CALL_OW 44
2542: ST_TO_ADDR
// if global_defined then
2543: LD_LOC 3
2547: IFFALSE 2687
// begin if ( cl = class_soldier ) then
2549: LD_VAR 0 2
2553: PUSH
2554: LD_INT 1
2556: EQUAL
2557: IFFALSE 2577
// j := i + soldiers_created else
2559: LD_ADDR_VAR 0 9
2563: PUSH
2564: LD_VAR 0 8
2568: PUSH
2569: LD_LOC 4
2573: PLUS
2574: ST_TO_ADDR
2575: GO 2587
// j := i ;
2577: LD_ADDR_VAR 0 9
2581: PUSH
2582: LD_VAR 0 8
2586: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2587: LD_LOC 2
2591: PUSH
2592: LD_VAR 0 2
2596: ARRAY
2597: PUSH
2598: LD_VAR 0 9
2602: ARRAY
2603: PPUSH
2604: LD_VAR 0 10
2608: PPUSH
2609: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2613: LD_VAR 0 10
2617: PPUSH
2618: LD_INT 2
2620: PPUSH
2621: LD_LOC 2
2625: PUSH
2626: LD_VAR 0 2
2630: ARRAY
2631: PUSH
2632: LD_VAR 0 9
2636: ARRAY
2637: PPUSH
2638: LD_INT 2
2640: PPUSH
2641: CALL_OW 260
2645: PPUSH
2646: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2650: LD_VAR 0 10
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_LOC 2
2662: PUSH
2663: LD_VAR 0 2
2667: ARRAY
2668: PUSH
2669: LD_VAR 0 9
2673: ARRAY
2674: PPUSH
2675: LD_INT 1
2677: PPUSH
2678: CALL_OW 260
2682: PPUSH
2683: CALL_OW 239
// end ; if building then
2687: LD_VAR 0 6
2691: IFFALSE 2709
// PlaceHumanInUnit ( un , building ) else
2693: LD_VAR 0 10
2697: PPUSH
2698: LD_VAR 0 6
2702: PPUSH
2703: CALL_OW 52
2707: GO 2736
// PlaceUnitXYR ( un , x , y , r , false ) ;
2709: LD_VAR 0 10
2713: PPUSH
2714: LD_VAR 0 3
2718: PPUSH
2719: LD_VAR 0 4
2723: PPUSH
2724: LD_VAR 0 5
2728: PPUSH
2729: LD_INT 0
2731: PPUSH
2732: CALL_OW 50
// result := result ^ [ un ] ;
2736: LD_ADDR_VAR 0 7
2740: PUSH
2741: LD_VAR 0 7
2745: PUSH
2746: LD_VAR 0 10
2750: PUSH
2751: EMPTY
2752: LIST
2753: ADD
2754: ST_TO_ADDR
// end ;
2755: GO 2338
2757: POP
2758: POP
// if not global_defined then
2759: LD_LOC 3
2763: NOT
2764: IFFALSE 2842
// if ( global_units >= cl ) then
2766: LD_LOC 2
2770: PUSH
2771: LD_VAR 0 2
2775: GREATEREQUAL
2776: IFFALSE 2817
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2778: LD_ADDR_LOC 2
2782: PUSH
2783: LD_LOC 2
2787: PPUSH
2788: LD_VAR 0 2
2792: PPUSH
2793: LD_LOC 2
2797: PUSH
2798: LD_VAR 0 2
2802: ARRAY
2803: PUSH
2804: LD_VAR 0 7
2808: ADD
2809: PPUSH
2810: CALL_OW 1
2814: ST_TO_ADDR
2815: GO 2842
// global_units := Replace ( global_units , cl , result ) ;
2817: LD_ADDR_LOC 2
2821: PUSH
2822: LD_LOC 2
2826: PPUSH
2827: LD_VAR 0 2
2831: PPUSH
2832: LD_VAR 0 7
2836: PPUSH
2837: CALL_OW 1
2841: ST_TO_ADDR
// if commander then
2842: LD_LOC 1
2846: IFFALSE 2893
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2848: LD_ADDR_EXP 35
2852: PUSH
2853: LD_EXP 35
2857: PPUSH
2858: LD_OWVAR 20
2862: PPUSH
2863: LD_EXP 35
2867: PUSH
2868: LD_OWVAR 20
2872: ARRAY
2873: PUSH
2874: LD_VAR 0 10
2878: ADD
2879: PPUSH
2880: CALL_OW 1
2884: ST_TO_ADDR
// commander := false ;
2885: LD_ADDR_LOC 1
2889: PUSH
2890: LD_INT 0
2892: ST_TO_ADDR
// end ; end ;
2893: LD_VAR 0 7
2897: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2898: LD_INT 0
2900: PPUSH
2901: PPUSH
2902: PPUSH
2903: PPUSH
2904: PPUSH
2905: PPUSH
2906: PPUSH
2907: PPUSH
2908: PPUSH
// pos := Side_Positions [ side ] ;
2909: LD_ADDR_VAR 0 3
2913: PUSH
2914: LD_EXP 23
2918: PUSH
2919: LD_VAR 0 1
2923: ARRAY
2924: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2925: LD_ADDR_OWVAR 21
2929: PUSH
2930: LD_EXP 24
2934: PUSH
2935: LD_VAR 0 1
2939: ARRAY
2940: ST_TO_ADDR
// uc_side := side ;
2941: LD_ADDR_OWVAR 20
2945: PUSH
2946: LD_VAR 0 1
2950: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2951: LD_ADDR_VAR 0 4
2955: PUSH
2956: LD_EXP 30
2960: PUSH
2961: LD_VAR 0 3
2965: ARRAY
2966: PUSH
2967: LD_INT 1
2969: ARRAY
2970: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2971: LD_ADDR_VAR 0 5
2975: PUSH
2976: LD_EXP 30
2980: PUSH
2981: LD_VAR 0 3
2985: ARRAY
2986: PUSH
2987: LD_INT 2
2989: ARRAY
2990: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2991: LD_ADDR_VAR 0 6
2995: PUSH
2996: LD_EXP 30
3000: PUSH
3001: LD_VAR 0 3
3005: ARRAY
3006: PUSH
3007: LD_INT 3
3009: ARRAY
3010: ST_TO_ADDR
// if is_depot then
3011: LD_EXP 7
3015: IFFALSE 3148
// begin bc_type = b_depot ;
3017: LD_ADDR_OWVAR 42
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3025: LD_ADDR_VAR 0 10
3029: PUSH
3030: LD_VAR 0 4
3034: PPUSH
3035: LD_VAR 0 5
3039: PPUSH
3040: LD_VAR 0 6
3044: PPUSH
3045: CALL_OW 47
3049: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3050: LD_VAR 0 10
3054: PPUSH
3055: LD_STRING @
3057: PUSH
3058: LD_VAR 0 1
3062: STR
3063: PPUSH
3064: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3068: LD_VAR 0 10
3072: PPUSH
3073: CALL_OW 274
3077: PPUSH
3078: LD_INT 1
3080: PPUSH
3081: LD_EXP 12
3085: PUSH
3086: LD_INT 1
3088: ARRAY
3089: PPUSH
3090: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3094: LD_VAR 0 10
3098: PPUSH
3099: CALL_OW 274
3103: PPUSH
3104: LD_INT 2
3106: PPUSH
3107: LD_EXP 12
3111: PUSH
3112: LD_INT 2
3114: ARRAY
3115: PPUSH
3116: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3120: LD_VAR 0 10
3124: PPUSH
3125: CALL_OW 274
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: LD_EXP 12
3137: PUSH
3138: LD_INT 3
3140: ARRAY
3141: PPUSH
3142: CALL_OW 277
// end else
3146: GO 3292
// begin for i := 1 to 3 do
3148: LD_ADDR_VAR 0 7
3152: PUSH
3153: DOUBLE
3154: LD_INT 1
3156: DEC
3157: ST_TO_ADDR
3158: LD_INT 3
3160: PUSH
3161: FOR_TO
3162: IFFALSE 3290
// begin r := starting_resources [ i ] ;
3164: LD_ADDR_VAR 0 8
3168: PUSH
3169: LD_EXP 12
3173: PUSH
3174: LD_VAR 0 7
3178: ARRAY
3179: ST_TO_ADDR
// while r >= 10 do
3180: LD_VAR 0 8
3184: PUSH
3185: LD_INT 10
3187: GREATEREQUAL
3188: IFFALSE 3288
// if r > 50 then
3190: LD_VAR 0 8
3194: PUSH
3195: LD_INT 50
3197: GREATER
3198: IFFALSE 3244
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3200: LD_VAR 0 7
3204: PPUSH
3205: LD_INT 5
3207: PPUSH
3208: LD_VAR 0 4
3212: PPUSH
3213: LD_VAR 0 5
3217: PPUSH
3218: LD_INT 4
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 60
// r := r - 50 ;
3228: LD_ADDR_VAR 0 8
3232: PUSH
3233: LD_VAR 0 8
3237: PUSH
3238: LD_INT 50
3240: MINUS
3241: ST_TO_ADDR
// end else
3242: GO 3286
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3244: LD_VAR 0 7
3248: PPUSH
3249: LD_VAR 0 8
3253: PUSH
3254: LD_INT 10
3256: DIV
3257: PPUSH
3258: LD_VAR 0 4
3262: PPUSH
3263: LD_VAR 0 5
3267: PPUSH
3268: LD_INT 4
3270: PPUSH
3271: LD_INT 0
3273: PPUSH
3274: CALL_OW 60
// r := 0 ;
3278: LD_ADDR_VAR 0 8
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// end ;
3286: GO 3180
// end ;
3288: GO 3161
3290: POP
3291: POP
// end ; for r in starting_crates do
3292: LD_ADDR_VAR 0 8
3296: PUSH
3297: LD_EXP 11
3301: PUSH
3302: FOR_IN
3303: IFFALSE 3335
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3305: LD_INT 1
3307: PPUSH
3308: LD_INT 5
3310: PPUSH
3311: LD_VAR 0 4
3315: PPUSH
3316: LD_VAR 0 5
3320: PPUSH
3321: LD_VAR 0 8
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 60
3333: GO 3302
3335: POP
3336: POP
// if def_morale_flags then
3337: LD_EXP 58
3341: IFFALSE 3480
// begin x := start_def [ pos ] [ 1 ] ;
3343: LD_ADDR_VAR 0 4
3347: PUSH
3348: LD_EXP 32
3352: PUSH
3353: LD_VAR 0 3
3357: ARRAY
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3363: LD_ADDR_VAR 0 5
3367: PUSH
3368: LD_EXP 32
3372: PUSH
3373: LD_VAR 0 3
3377: ARRAY
3378: PUSH
3379: LD_INT 2
3381: ARRAY
3382: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3383: LD_VAR 0 4
3387: PPUSH
3388: LD_VAR 0 5
3392: PPUSH
3393: LD_INT 12
3395: PPUSH
3396: LD_INT 2
3398: PPUSH
3399: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3403: LD_ADDR_EXP 34
3407: PUSH
3408: LD_EXP 34
3412: PUSH
3413: LD_VAR 0 1
3417: PPUSH
3418: LD_VAR 0 4
3422: PPUSH
3423: LD_VAR 0 5
3427: PPUSH
3428: LD_INT 1
3430: PUSH
3431: LD_INT 100
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 2
3440: PUSH
3441: LD_INT 50
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 3
3450: PUSH
3451: LD_INT 20
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 20
3460: PUSH
3461: LD_INT 100
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: PPUSH
3474: CALL_OW 418
3478: ADD
3479: ST_TO_ADDR
// end ; commander := true ;
3480: LD_ADDR_LOC 1
3484: PUSH
3485: LD_INT 1
3487: ST_TO_ADDR
// soldiers_created := 0 ;
3488: LD_ADDR_LOC 4
3492: PUSH
3493: LD_INT 0
3495: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3496: LD_ADDR_VAR 0 7
3500: PUSH
3501: DOUBLE
3502: LD_INT 1
3504: DEC
3505: ST_TO_ADDR
3506: LD_EXP 8
3510: PUSH
3511: FOR_TO
3512: IFFALSE 3665
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: LD_EXP 31
3523: PUSH
3524: LD_VAR 0 3
3528: ARRAY
3529: PUSH
3530: LD_VAR 0 7
3534: ARRAY
3535: PUSH
3536: LD_INT 1
3538: ARRAY
3539: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3540: LD_ADDR_VAR 0 5
3544: PUSH
3545: LD_EXP 31
3549: PUSH
3550: LD_VAR 0 3
3554: ARRAY
3555: PUSH
3556: LD_VAR 0 7
3560: ARRAY
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3566: LD_ADDR_VAR 0 6
3570: PUSH
3571: LD_EXP 31
3575: PUSH
3576: LD_VAR 0 3
3580: ARRAY
3581: PUSH
3582: LD_VAR 0 7
3586: ARRAY
3587: PUSH
3588: LD_INT 3
3590: ARRAY
3591: ST_TO_ADDR
// bc_type := b_breastwork ;
3592: LD_ADDR_OWVAR 42
3596: PUSH
3597: LD_INT 31
3599: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3600: LD_ADDR_VAR 0 9
3604: PUSH
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_VAR 0 5
3614: PPUSH
3615: LD_VAR 0 6
3619: PPUSH
3620: CALL_OW 47
3624: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3625: LD_INT 1
3627: PPUSH
3628: LD_INT 1
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: LD_INT 0
3636: PPUSH
3637: LD_INT 0
3639: PPUSH
3640: LD_VAR 0 9
3644: PPUSH
3645: CALL 2310 0 6
// soldiers_created := soldiers_created + 1 ;
3649: LD_ADDR_LOC 4
3653: PUSH
3654: LD_LOC 4
3658: PUSH
3659: LD_INT 1
3661: PLUS
3662: ST_TO_ADDR
// end ;
3663: GO 3511
3665: POP
3666: POP
// x := start_def [ pos ] [ 1 ] ;
3667: LD_ADDR_VAR 0 4
3671: PUSH
3672: LD_EXP 32
3676: PUSH
3677: LD_VAR 0 3
3681: ARRAY
3682: PUSH
3683: LD_INT 1
3685: ARRAY
3686: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3687: LD_ADDR_VAR 0 5
3691: PUSH
3692: LD_EXP 32
3696: PUSH
3697: LD_VAR 0 3
3701: ARRAY
3702: PUSH
3703: LD_INT 2
3705: ARRAY
3706: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3707: LD_LOC 8
3711: PUSH
3712: LD_EXP 8
3716: MINUS
3717: PPUSH
3718: LD_INT 1
3720: PPUSH
3721: LD_VAR 0 4
3725: PPUSH
3726: LD_VAR 0 5
3730: PPUSH
3731: LD_INT 5
3733: PPUSH
3734: LD_INT 0
3736: PPUSH
3737: CALL 2310 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3741: LD_LOC 5
3745: PPUSH
3746: LD_INT 2
3748: PPUSH
3749: LD_VAR 0 4
3753: PPUSH
3754: LD_VAR 0 5
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL 2310 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3769: LD_LOC 7
3773: PPUSH
3774: LD_INT 3
3776: PPUSH
3777: LD_VAR 0 4
3781: PPUSH
3782: LD_VAR 0 5
3786: PPUSH
3787: LD_INT 5
3789: PPUSH
3790: LD_INT 0
3792: PPUSH
3793: CALL 2310 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3797: LD_LOC 6
3801: PPUSH
3802: LD_INT 4
3804: PPUSH
3805: LD_VAR 0 4
3809: PPUSH
3810: LD_VAR 0 5
3814: PPUSH
3815: LD_INT 5
3817: PPUSH
3818: LD_INT 0
3820: PPUSH
3821: CALL 2310 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3825: LD_EXP 59
3829: PUSH
3830: LD_INT 20
3832: PPUSH
3833: LD_VAR 0 1
3837: PPUSH
3838: CALL_OW 321
3842: PUSH
3843: LD_INT 1
3845: EQUAL
3846: AND
3847: IFFALSE 3864
// SetTech ( tech_SibDet , side , state_researched ) ;
3849: LD_INT 20
3851: PPUSH
3852: LD_VAR 0 1
3856: PPUSH
3857: LD_INT 2
3859: PPUSH
3860: CALL_OW 322
// if def_siberite_bomb = 1 then
3864: LD_EXP 62
3868: PUSH
3869: LD_INT 1
3871: EQUAL
3872: IFFALSE 3906
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3874: LD_INT 25
3876: PPUSH
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3889: LD_INT 73
3891: PPUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: LD_INT 1
3899: PPUSH
3900: CALL_OW 322
// end else
3904: GO 3936
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3906: LD_INT 25
3908: PPUSH
3909: LD_VAR 0 1
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3921: LD_INT 73
3923: PPUSH
3924: LD_VAR 0 1
3928: PPUSH
3929: LD_INT 0
3931: PPUSH
3932: CALL_OW 322
// end ; if Game_Type = 3 then
3936: LD_EXP 48
3940: PUSH
3941: LD_INT 3
3943: EQUAL
3944: IFFALSE 3961
// SetTech ( tech_partinvis , side , state_disabled ) ;
3946: LD_INT 16
3948: PPUSH
3949: LD_VAR 0 1
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3961: LD_INT 24
3963: PPUSH
3964: LD_VAR 0 1
3968: PPUSH
3969: LD_INT 1
3971: PPUSH
3972: CALL_OW 322
// global_defined := true ;
3976: LD_ADDR_LOC 3
3980: PUSH
3981: LD_INT 1
3983: ST_TO_ADDR
// end ;
3984: LD_VAR 0 2
3988: RET
// every 0 0$1 do
3989: GO 3991
3991: DISABLE
// if ( def_siberite_bomb > 1 ) then
3992: LD_EXP 62
3996: PUSH
3997: LD_INT 1
3999: GREATER
4000: IFFALSE 4015
// begin wait ( siberite_bomb_Delay ) ;
4002: LD_EXP 18
4006: PPUSH
4007: CALL_OW 67
// EnableSibFiss ;
4011: CALL 4016 0 0
// end ;
4015: END
// function EnableSibFiss ; var i ; begin
4016: LD_INT 0
4018: PPUSH
4019: PPUSH
// for i := 1 to 8 do
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: DOUBLE
4026: LD_INT 1
4028: DEC
4029: ST_TO_ADDR
4030: LD_INT 8
4032: PUSH
4033: FOR_TO
4034: IFFALSE 4080
// if Side_Positions [ i ] then
4036: LD_EXP 23
4040: PUSH
4041: LD_VAR 0 2
4045: ARRAY
4046: IFFALSE 4078
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4048: LD_INT 25
4050: PPUSH
4051: LD_VAR 0 2
4055: PPUSH
4056: LD_INT 1
4058: PPUSH
4059: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4063: LD_INT 73
4065: PPUSH
4066: LD_VAR 0 2
4070: PPUSH
4071: LD_INT 1
4073: PPUSH
4074: CALL_OW 322
// end ;
4078: GO 4033
4080: POP
4081: POP
// end ;
4082: LD_VAR 0 1
4086: RET
// function prepare_sides ; var i ; begin
4087: LD_INT 0
4089: PPUSH
4090: PPUSH
// global_units := [ ] ;
4091: LD_ADDR_LOC 2
4095: PUSH
4096: EMPTY
4097: ST_TO_ADDR
// global_defined := false ;
4098: LD_ADDR_LOC 3
4102: PUSH
4103: LD_INT 0
4105: ST_TO_ADDR
// CountClassMembers ;
4106: CALL 4156 0 0
// for i := 1 to 8 do
4110: LD_ADDR_VAR 0 2
4114: PUSH
4115: DOUBLE
4116: LD_INT 1
4118: DEC
4119: ST_TO_ADDR
4120: LD_INT 8
4122: PUSH
4123: FOR_TO
4124: IFFALSE 4149
// if Side_Positions [ i ] then
4126: LD_EXP 23
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: IFFALSE 4147
// prepare_side ( i ) ;
4138: LD_VAR 0 2
4142: PPUSH
4143: CALL 2898 0 1
4147: GO 4123
4149: POP
4150: POP
// end ;
4151: LD_VAR 0 1
4155: RET
// function CountClassMembers ; var Mode ; begin
4156: LD_INT 0
4158: PPUSH
4159: PPUSH
// if No_Mechs then
4160: LD_EXP 64
4164: IFFALSE 4176
// Mode := 2 else
4166: LD_ADDR_VAR 0 2
4170: PUSH
4171: LD_INT 2
4173: ST_TO_ADDR
4174: GO 4184
// Mode := 1 ;
4176: LD_ADDR_VAR 0 2
4180: PUSH
4181: LD_INT 1
4183: ST_TO_ADDR
// neng := number_of_people ;
4184: LD_ADDR_LOC 5
4188: PUSH
4189: LD_EXP 9
4193: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4194: LD_ADDR_LOC 8
4198: PUSH
4199: LD_LOC 5
4203: PUSH
4204: LD_INT 4
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: LD_VAR 0 2
4218: ARRAY
4219: DIV
4220: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4221: LD_LOC 8
4225: PUSH
4226: LD_EXP 8
4230: LESS
4231: IFFALSE 4243
// nsol := number_of_breastworks ;
4233: LD_ADDR_LOC 8
4237: PUSH
4238: LD_EXP 8
4242: ST_TO_ADDR
// neng := neng - nsol ;
4243: LD_ADDR_LOC 5
4247: PUSH
4248: LD_LOC 5
4252: PUSH
4253: LD_LOC 8
4257: MINUS
4258: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4259: LD_ADDR_LOC 6
4263: PUSH
4264: LD_LOC 5
4268: PUSH
4269: LD_INT 3
4271: PUSH
4272: LD_INT 2
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PUSH
4279: LD_VAR 0 2
4283: ARRAY
4284: DIV
4285: ST_TO_ADDR
// if ( nsci < 1 ) then
4286: LD_LOC 6
4290: PUSH
4291: LD_INT 1
4293: LESS
4294: IFFALSE 4304
// nsci := 1 ;
4296: LD_ADDR_LOC 6
4300: PUSH
4301: LD_INT 1
4303: ST_TO_ADDR
// neng := neng - nsci ;
4304: LD_ADDR_LOC 5
4308: PUSH
4309: LD_LOC 5
4313: PUSH
4314: LD_LOC 6
4318: MINUS
4319: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4320: LD_ADDR_LOC 7
4324: PUSH
4325: LD_LOC 5
4329: PUSH
4330: LD_INT 2
4332: DIV
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_VAR 0 2
4345: ARRAY
4346: ST_TO_ADDR
// neng := neng - nmech ;
4347: LD_ADDR_LOC 5
4351: PUSH
4352: LD_LOC 5
4356: PUSH
4357: LD_LOC 7
4361: MINUS
4362: ST_TO_ADDR
// if ( neng < 1 ) then
4363: LD_LOC 5
4367: PUSH
4368: LD_INT 1
4370: LESS
4371: IFFALSE 4381
// neng := 1 ;
4373: LD_ADDR_LOC 5
4377: PUSH
4378: LD_INT 1
4380: ST_TO_ADDR
// end ;
4381: LD_VAR 0 1
4385: RET
// starting begin disable ( 1 ) ;
4386: LD_INT 1
4388: DISABLE_MARKED
// disable ( 2 ) ;
4389: LD_INT 2
4391: DISABLE_MARKED
// disable ( 3 ) ;
4392: LD_INT 3
4394: DISABLE_MARKED
// disable ( 4 ) ;
4395: LD_INT 4
4397: DISABLE_MARKED
// disable ( 5 ) ;
4398: LD_INT 5
4400: DISABLE_MARKED
// disable ( 6 ) ;
4401: LD_INT 6
4403: DISABLE_MARKED
// disable ( 7 ) ;
4404: LD_INT 7
4406: DISABLE_MARKED
// disable ( 10 ) ;
4407: LD_INT 10
4409: DISABLE_MARKED
// disable ( 20 ) ;
4410: LD_INT 20
4412: DISABLE_MARKED
// disable ( 98 ) ;
4413: LD_INT 98
4415: DISABLE_MARKED
// disable ( 99 ) ;
4416: LD_INT 99
4418: DISABLE_MARKED
// disable ( 400 ) ;
4419: LD_INT 400
4421: DISABLE_MARKED
// disable ( 401 ) ;
4422: LD_INT 401
4424: DISABLE_MARKED
// disable ( 600 ) ;
4425: LD_INT 600
4427: DISABLE_MARKED
// mp_selectmsg := true ;
4428: LD_ADDR_OWVAR 13
4432: PUSH
4433: LD_INT 1
4435: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4436: CALL 68 0 0
// init_map ;
4440: CALL 1563 0 0
// init_shipments ;
4444: CALL 4630 0 0
// init_respawn ;
4448: CALL 6150 0 0
// set_shared_visions_and_alliances ;
4452: CALL 2022 0 0
// ResetFog ;
4456: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4460: LD_OWVAR 2
4464: PPUSH
4465: CALL_OW 520
// prepare_sides ;
4469: CALL 4087 0 0
// Init_Win_Condition ;
4473: CALL 18334 0 0
// InitLimits ;
4477: CALL 16207 0 0
// ShowTimer ;
4481: CALL 17144 0 0
// case Game_Type of 2 :
4485: LD_EXP 48
4489: PUSH
4490: LD_INT 2
4492: DOUBLE
4493: EQUAL
4494: IFTRUE 4498
4496: GO 4505
4498: POP
// init_alien_research ; 3 :
4499: CALL 7380 0 0
4503: GO 4525
4505: LD_INT 3
4507: DOUBLE
4508: EQUAL
4509: IFTRUE 4513
4511: GO 4524
4513: POP
// begin InitPoints ( ) ;
4514: CALL 17337 0 0
// init_kings_counting ;
4518: CALL 19697 0 0
// end ; end ;
4522: GO 4525
4524: POP
// music_nat := Side_Nations [ your_side ] ;
4525: LD_ADDR_OWVAR 71
4529: PUSH
4530: LD_EXP 24
4534: PUSH
4535: LD_OWVAR 2
4539: ARRAY
4540: ST_TO_ADDR
// if IAmSpec then
4541: CALL_OW 531
4545: IFFALSE 4569
// begin fogOff ( true ) ;
4547: LD_INT 1
4549: PPUSH
4550: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4554: LD_INT 119
4556: PPUSH
4557: LD_INT 79
4559: PPUSH
4560: CALL_OW 86
// enable ( 400 ) ;
4564: LD_INT 400
4566: ENABLE_MARKED
// end else
4567: GO 4615
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4569: LD_EXP 32
4573: PUSH
4574: LD_EXP 23
4578: PUSH
4579: LD_OWVAR 2
4583: ARRAY
4584: ARRAY
4585: PUSH
4586: LD_INT 1
4588: ARRAY
4589: PPUSH
4590: LD_EXP 32
4594: PUSH
4595: LD_EXP 23
4599: PUSH
4600: LD_OWVAR 2
4604: ARRAY
4605: ARRAY
4606: PUSH
4607: LD_INT 2
4609: ARRAY
4610: PPUSH
4611: CALL_OW 86
// end ; InitApeman ;
4615: CALL 5325 0 0
// if def_builduptime then
4619: LD_EXP 63
4623: IFFALSE 4629
// BeginBuildUp ;
4625: CALL 13374 0 0
// end ; end_of_file
4629: END
// var shipment , tictac ; export function init_shipments ; begin
4630: LD_INT 0
4632: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4633: LD_ADDR_LOC 9
4637: PUSH
4638: LD_INT 0
4640: PPUSH
4641: LD_INT 3
4643: PPUSH
4644: CALL_OW 12
4648: ST_TO_ADDR
// tictac := 0 ;
4649: LD_ADDR_LOC 10
4653: PUSH
4654: LD_INT 0
4656: ST_TO_ADDR
// end ;
4657: LD_VAR 0 1
4661: RET
// every 0 0$5 + 0 0$1.1 do var d ;
4662: GO 4664
4664: DISABLE
4665: LD_INT 0
4667: PPUSH
// begin case tick of 1 .. 1 1$0 :
4668: LD_OWVAR 1
4672: PUSH
4673: LD_INT 1
4675: DOUBLE
4676: GREATEREQUAL
4677: IFFALSE 4685
4679: LD_INT 2100
4681: DOUBLE
4682: LESSEQUAL
4683: IFTRUE 4687
4685: GO 4698
4687: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
4688: LD_ADDR_VAR 0 1
4692: PUSH
4693: LD_INT 150
4695: ST_TO_ADDR
4696: GO 4881
4698: LD_INT 2100
4700: PUSH
4701: LD_INT 1
4703: PLUS
4704: DOUBLE
4705: GREATEREQUAL
4706: IFFALSE 4714
4708: LD_INT 10500
4710: DOUBLE
4711: LESSEQUAL
4712: IFTRUE 4716
4714: GO 4727
4716: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
4717: LD_ADDR_VAR 0 1
4721: PUSH
4722: LD_INT 100
4724: ST_TO_ADDR
4725: GO 4881
4727: LD_INT 10500
4729: PUSH
4730: LD_INT 1
4732: PLUS
4733: DOUBLE
4734: GREATEREQUAL
4735: IFFALSE 4743
4737: LD_INT 21000
4739: DOUBLE
4740: LESSEQUAL
4741: IFTRUE 4745
4743: GO 4756
4745: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
4746: LD_ADDR_VAR 0 1
4750: PUSH
4751: LD_INT 90
4753: ST_TO_ADDR
4754: GO 4881
4756: LD_INT 21000
4758: PUSH
4759: LD_INT 1
4761: PLUS
4762: DOUBLE
4763: GREATEREQUAL
4764: IFFALSE 4772
4766: LD_INT 42000
4768: DOUBLE
4769: LESSEQUAL
4770: IFTRUE 4774
4772: GO 4785
4774: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
4775: LD_ADDR_VAR 0 1
4779: PUSH
4780: LD_INT 70
4782: ST_TO_ADDR
4783: GO 4881
4785: LD_INT 42000
4787: PUSH
4788: LD_INT 1
4790: PLUS
4791: DOUBLE
4792: GREATEREQUAL
4793: IFFALSE 4801
4795: LD_INT 63000
4797: DOUBLE
4798: LESSEQUAL
4799: IFTRUE 4803
4801: GO 4814
4803: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
4804: LD_ADDR_VAR 0 1
4808: PUSH
4809: LD_INT 60
4811: ST_TO_ADDR
4812: GO 4881
4814: LD_INT 63000
4816: PUSH
4817: LD_INT 1
4819: PLUS
4820: DOUBLE
4821: GREATEREQUAL
4822: IFFALSE 4830
4824: LD_INT 105000
4826: DOUBLE
4827: LESSEQUAL
4828: IFTRUE 4832
4830: GO 4843
4832: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
4833: LD_ADDR_VAR 0 1
4837: PUSH
4838: LD_INT 35
4840: ST_TO_ADDR
4841: GO 4881
4843: LD_INT 105000
4845: PUSH
4846: LD_INT 1
4848: PLUS
4849: DOUBLE
4850: GREATEREQUAL
4851: IFFALSE 4859
4853: LD_INT 630000
4855: DOUBLE
4856: LESSEQUAL
4857: IFTRUE 4861
4859: GO 4872
4861: POP
// d := 20 ; else
4862: LD_ADDR_VAR 0 1
4866: PUSH
4867: LD_INT 20
4869: ST_TO_ADDR
4870: GO 4881
4872: POP
// d := 0 ; end ;
4873: LD_ADDR_VAR 0 1
4877: PUSH
4878: LD_INT 0
4880: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
4881: LD_INT 1
4883: PPUSH
4884: LD_INT 10000
4886: PPUSH
4887: CALL_OW 12
4891: PUSH
4892: LD_VAR 0 1
4896: PUSH
4897: LD_EXP 13
4901: MUL
4902: LESSEQUAL
4903: IFFALSE 4957
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
4905: LD_INT 1
4907: PPUSH
4908: LD_INT 140
4910: PPUSH
4911: CALL_OW 12
4915: PPUSH
4916: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
4920: LD_ADDR_LOC 9
4924: PUSH
4925: LD_LOC 9
4929: PUSH
4930: LD_INT 1
4932: PLUS
4933: PUSH
4934: LD_INT 4
4936: MOD
4937: ST_TO_ADDR
// CreateCratesArea ( 5 , nw + shipment , true ) ;
4938: LD_INT 5
4940: PPUSH
4941: LD_INT 12
4943: PUSH
4944: LD_LOC 9
4948: PLUS
4949: PPUSH
4950: LD_INT 1
4952: PPUSH
4953: CALL_OW 55
// end ; enable ;
4957: ENABLE
// end ;
4958: PPOPN 1
4960: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount , is_in ;
4961: LD_OWVAR 1
4965: PUSH
4966: LD_INT 6300
4968: PUSH
4969: LD_LOC 10
4973: MUL
4974: PUSH
4975: LD_LOC 10
4979: PUSH
4980: LD_INT 3150
4982: PUSH
4983: LD_EXP 13
4987: PUSH
4988: LD_INT 70
4990: MUL
4991: MINUS
4992: MUL
4993: PLUS
4994: GREATER
4995: IFFALSE 5131
4997: GO 4999
4999: DISABLE
5000: LD_INT 0
5002: PPUSH
5003: PPUSH
5004: PPUSH
// begin tictac := tictac + 1 ;
5005: LD_ADDR_LOC 10
5009: PUSH
5010: LD_LOC 10
5014: PUSH
5015: LD_INT 1
5017: PLUS
5018: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_INT 3
5026: PPUSH
5027: LD_INT 5
5029: PPUSH
5030: CALL_OW 12
5034: ST_TO_ADDR
// for i = 0 to 3 do
5035: LD_ADDR_VAR 0 1
5039: PUSH
5040: DOUBLE
5041: LD_INT 0
5043: DEC
5044: ST_TO_ADDR
5045: LD_INT 3
5047: PUSH
5048: FOR_TO
5049: IFFALSE 5128
// begin is_in := GetResourceArea ( north_west + i , mat_cans ) ;
5051: LD_ADDR_VAR 0 3
5055: PUSH
5056: LD_INT 4
5058: PUSH
5059: LD_VAR 0 1
5063: PLUS
5064: PPUSH
5065: LD_INT 1
5067: PPUSH
5068: CALL_OW 287
5072: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5073: LD_VAR 0 3
5077: PUSH
5078: LD_INT 500
5080: LESS
5081: PUSH
5082: LD_INT 1
5084: PPUSH
5085: LD_INT 10
5087: PPUSH
5088: CALL_OW 12
5092: PUSH
5093: LD_VAR 0 3
5097: PUSH
5098: LD_INT 100
5100: DIV
5101: GREATER
5102: OR
5103: IFFALSE 5126
// CreateCratesArea ( amount , north_west + i , true ) ;
5105: LD_VAR 0 2
5109: PPUSH
5110: LD_INT 4
5112: PUSH
5113: LD_VAR 0 1
5117: PLUS
5118: PPUSH
5119: LD_INT 1
5121: PPUSH
5122: CALL_OW 55
// end ;
5126: GO 5048
5128: POP
5129: POP
// enable ;
5130: ENABLE
// end ; end_of_file
5131: PPOPN 3
5133: END
// every 20 20$00 trigger apemanNumber do
5134: LD_EXP 36
5138: IFFALSE 5171
5140: GO 5142
5142: DISABLE
// begin enable ;
5143: ENABLE
// if apeLevel >= 8 then
5144: LD_EXP 41
5148: PUSH
5149: LD_INT 8
5151: GREATEREQUAL
5152: IFFALSE 5157
// disable else
5154: DISABLE
5155: GO 5171
// apeLevel := apeLevel + 1 ;
5157: LD_ADDR_EXP 41
5161: PUSH
5162: LD_EXP 41
5166: PUSH
5167: LD_INT 1
5169: PLUS
5170: ST_TO_ADDR
// end ;
5171: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5172: LD_EXP 36
5176: PUSH
5177: LD_EXP 37
5181: LESS
5182: IFFALSE 5322
5184: GO 5186
5186: DISABLE
5187: LD_INT 0
5189: PPUSH
5190: PPUSH
5191: PPUSH
5192: PPUSH
// begin enable ;
5193: ENABLE
// for i := 1 to apemanPos do
5194: LD_ADDR_VAR 0 1
5198: PUSH
5199: DOUBLE
5200: LD_INT 1
5202: DEC
5203: ST_TO_ADDR
5204: LD_EXP 39
5208: PUSH
5209: FOR_TO
5210: IFFALSE 5320
// begin if apemanPlayerCount [ i ] then
5212: LD_EXP 40
5216: PUSH
5217: LD_VAR 0 1
5221: ARRAY
5222: IFFALSE 5318
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5224: LD_EXP 40
5228: PUSH
5229: LD_VAR 0 1
5233: ARRAY
5234: PUSH
5235: LD_EXP 39
5239: PUSH
5240: LD_VAR 0 1
5244: ARRAY
5245: GREATER
5246: IFFALSE 5318
// begin ape := PrepareApeman ;
5248: LD_ADDR_VAR 0 2
5252: PUSH
5253: CALL 5825 0 0
5257: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5258: LD_VAR 0 2
5262: PPUSH
5263: LD_EXP 42
5267: PUSH
5268: LD_VAR 0 1
5272: ARRAY
5273: PPUSH
5274: LD_INT 0
5276: PPUSH
5277: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5281: LD_ADDR_EXP 39
5285: PUSH
5286: LD_EXP 39
5290: PPUSH
5291: LD_VAR 0 1
5295: PPUSH
5296: LD_EXP 39
5300: PUSH
5301: LD_VAR 0 1
5305: ARRAY
5306: PUSH
5307: LD_VAR 0 2
5311: UNION
5312: PPUSH
5313: CALL_OW 1
5317: ST_TO_ADDR
// end ; end ; end ;
5318: GO 5209
5320: POP
5321: POP
// end ;
5322: PPOPN 4
5324: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5325: LD_INT 0
5327: PPUSH
5328: PPUSH
5329: PPUSH
5330: PPUSH
5331: PPUSH
5332: PPUSH
5333: PPUSH
// playersAmount := 0 ;
5334: LD_ADDR_VAR 0 3
5338: PUSH
5339: LD_INT 0
5341: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5342: LD_ADDR_VAR 0 7
5346: PUSH
5347: LD_INT 8
5349: PUSH
5350: LD_INT 9
5352: PUSH
5353: LD_INT 11
5355: PUSH
5356: LD_INT 10
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5365: LD_ADDR_EXP 42
5369: PUSH
5370: LD_INT 0
5372: PUSH
5373: LD_INT 0
5375: PUSH
5376: LD_INT 0
5378: PUSH
5379: LD_INT 0
5381: PUSH
5382: LD_INT 0
5384: PUSH
5385: LD_INT 0
5387: PUSH
5388: LD_INT 0
5390: PUSH
5391: LD_INT 0
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: ST_TO_ADDR
// for j = 1 to Side_Positions do
5404: LD_ADDR_VAR 0 4
5408: PUSH
5409: DOUBLE
5410: LD_INT 1
5412: DEC
5413: ST_TO_ADDR
5414: LD_EXP 23
5418: PUSH
5419: FOR_TO
5420: IFFALSE 5487
// if Side_Positions [ j ] then
5422: LD_EXP 23
5426: PUSH
5427: LD_VAR 0 4
5431: ARRAY
5432: IFFALSE 5485
// begin playersAmount := playersAmount + 1 ;
5434: LD_ADDR_VAR 0 3
5438: PUSH
5439: LD_VAR 0 3
5443: PUSH
5444: LD_INT 1
5446: PLUS
5447: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5448: LD_ADDR_EXP 42
5452: PUSH
5453: LD_EXP 42
5457: PPUSH
5458: LD_VAR 0 4
5462: PPUSH
5463: LD_VAR 0 7
5467: PUSH
5468: LD_EXP 23
5472: PUSH
5473: LD_VAR 0 4
5477: ARRAY
5478: ARRAY
5479: PPUSH
5480: CALL_OW 1
5484: ST_TO_ADDR
// end ;
5485: GO 5419
5487: POP
5488: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5489: LD_ADDR_EXP 38
5493: PUSH
5494: LD_INT 3
5496: PUSH
5497: LD_EXP 15
5501: MUL
5502: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5503: LD_ADDR_EXP 36
5507: PUSH
5508: LD_VAR 0 3
5512: PUSH
5513: LD_EXP 38
5517: MUL
5518: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5519: LD_ADDR_EXP 37
5523: PUSH
5524: LD_EXP 36
5528: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5529: LD_ADDR_EXP 39
5533: PUSH
5534: LD_INT 0
5536: PUSH
5537: LD_INT 0
5539: PUSH
5540: LD_INT 0
5542: PUSH
5543: LD_INT 0
5545: PUSH
5546: LD_INT 0
5548: PUSH
5549: LD_INT 0
5551: PUSH
5552: LD_INT 0
5554: PUSH
5555: LD_INT 0
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5568: LD_ADDR_EXP 40
5572: PUSH
5573: LD_INT 0
5575: PUSH
5576: LD_INT 0
5578: PUSH
5579: LD_INT 0
5581: PUSH
5582: LD_INT 0
5584: PUSH
5585: LD_INT 0
5587: PUSH
5588: LD_INT 0
5590: PUSH
5591: LD_INT 0
5593: PUSH
5594: LD_INT 0
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: ST_TO_ADDR
// apeLevel := 1 ;
5607: LD_ADDR_EXP 41
5611: PUSH
5612: LD_INT 1
5614: ST_TO_ADDR
// if not apemanNumber then
5615: LD_EXP 36
5619: NOT
5620: IFFALSE 5624
// exit ;
5622: GO 5820
// for i := 1 to apemanPerPlayer do
5624: LD_ADDR_VAR 0 2
5628: PUSH
5629: DOUBLE
5630: LD_INT 1
5632: DEC
5633: ST_TO_ADDR
5634: LD_EXP 38
5638: PUSH
5639: FOR_TO
5640: IFFALSE 5818
// begin for j := 1 to Side_Positions do
5642: LD_ADDR_VAR 0 4
5646: PUSH
5647: DOUBLE
5648: LD_INT 1
5650: DEC
5651: ST_TO_ADDR
5652: LD_EXP 23
5656: PUSH
5657: FOR_TO
5658: IFFALSE 5814
// if Side_Positions [ j ] then
5660: LD_EXP 23
5664: PUSH
5665: LD_VAR 0 4
5669: ARRAY
5670: IFFALSE 5812
// begin pos := Side_Positions [ j ] ;
5672: LD_ADDR_VAR 0 6
5676: PUSH
5677: LD_EXP 23
5681: PUSH
5682: LD_VAR 0 4
5686: ARRAY
5687: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5688: LD_ADDR_EXP 40
5692: PUSH
5693: LD_EXP 40
5697: PPUSH
5698: LD_VAR 0 4
5702: PPUSH
5703: LD_EXP 40
5707: PUSH
5708: LD_VAR 0 4
5712: ARRAY
5713: PUSH
5714: LD_INT 1
5716: PLUS
5717: PPUSH
5718: CALL_OW 1
5722: ST_TO_ADDR
// ape := PrepareApeman ;
5723: LD_ADDR_VAR 0 5
5727: PUSH
5728: CALL 5825 0 0
5732: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5733: LD_ADDR_EXP 39
5737: PUSH
5738: LD_EXP 39
5742: PPUSH
5743: LD_VAR 0 4
5747: PPUSH
5748: LD_EXP 39
5752: PUSH
5753: LD_VAR 0 4
5757: ARRAY
5758: PPUSH
5759: LD_EXP 39
5763: PUSH
5764: LD_VAR 0 4
5768: ARRAY
5769: PUSH
5770: LD_INT 1
5772: PLUS
5773: PPUSH
5774: LD_VAR 0 5
5778: PPUSH
5779: CALL_OW 1
5783: PPUSH
5784: CALL_OW 1
5788: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5789: LD_VAR 0 5
5793: PPUSH
5794: LD_EXP 42
5798: PUSH
5799: LD_VAR 0 4
5803: ARRAY
5804: PPUSH
5805: LD_INT 0
5807: PPUSH
5808: CALL_OW 49
// end ;
5812: GO 5657
5814: POP
5815: POP
// end ;
5816: GO 5639
5818: POP
5819: POP
// end ;
5820: LD_VAR 0 1
5824: RET
// export function PrepareApeman ; var bonus ; begin
5825: LD_INT 0
5827: PPUSH
5828: PPUSH
// uc_side := 0 ;
5829: LD_ADDR_OWVAR 20
5833: PUSH
5834: LD_INT 0
5836: ST_TO_ADDR
// uc_nation := 0 ;
5837: LD_ADDR_OWVAR 21
5841: PUSH
5842: LD_INT 0
5844: ST_TO_ADDR
// InitHc ;
5845: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_INT 1
5856: NEG
5857: PUSH
5858: LD_INT 0
5860: PUSH
5861: LD_INT 1
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: LD_OWVAR 1
5873: PUSH
5874: LD_INT 3
5876: MOD
5877: PUSH
5878: LD_INT 1
5880: PLUS
5881: ARRAY
5882: ST_TO_ADDR
// hc_class := class_apeman ;
5883: LD_ADDR_OWVAR 28
5887: PUSH
5888: LD_INT 12
5890: ST_TO_ADDR
// hc_gallery :=  ;
5891: LD_ADDR_OWVAR 33
5895: PUSH
5896: LD_STRING 
5898: ST_TO_ADDR
// hc_name :=  ;
5899: LD_ADDR_OWVAR 26
5903: PUSH
5904: LD_STRING 
5906: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5907: LD_ADDR_OWVAR 31
5911: PUSH
5912: LD_EXP 41
5916: PUSH
5917: LD_VAR 0 2
5921: PLUS
5922: PUSH
5923: LD_EXP 41
5927: PUSH
5928: LD_VAR 0 2
5932: PLUS
5933: PUSH
5934: LD_EXP 41
5938: PUSH
5939: LD_VAR 0 2
5943: PLUS
5944: PUSH
5945: LD_EXP 41
5949: PUSH
5950: LD_VAR 0 2
5954: PLUS
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5962: LD_ADDR_OWVAR 35
5966: PUSH
5967: LD_INT 10
5969: PUSH
5970: LD_VAR 0 2
5974: MUL
5975: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5976: LD_ADDR_OWVAR 29
5980: PUSH
5981: LD_INT 12
5983: PUSH
5984: LD_INT 10
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: ST_TO_ADDR
// result := CreateHuman ;
5991: LD_ADDR_VAR 0 1
5995: PUSH
5996: CALL_OW 44
6000: ST_TO_ADDR
// end ;
6001: LD_VAR 0 1
6005: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6006: LD_INT 0
6008: PPUSH
6009: PPUSH
6010: PPUSH
// if not ape then
6011: LD_VAR 0 1
6015: NOT
6016: IFFALSE 6020
// exit ;
6018: GO 6145
// side := GetSide ( ape ) ;
6020: LD_ADDR_VAR 0 3
6024: PUSH
6025: LD_VAR 0 1
6029: PPUSH
6030: CALL_OW 255
6034: ST_TO_ADDR
// if not side then
6035: LD_VAR 0 3
6039: NOT
6040: IFFALSE 6094
// begin for i = 1 to apemanPos do
6042: LD_ADDR_VAR 0 4
6046: PUSH
6047: DOUBLE
6048: LD_INT 1
6050: DEC
6051: ST_TO_ADDR
6052: LD_EXP 39
6056: PUSH
6057: FOR_TO
6058: IFFALSE 6092
// if ape in apemanPos [ i ] then
6060: LD_VAR 0 1
6064: PUSH
6065: LD_EXP 39
6069: PUSH
6070: LD_VAR 0 4
6074: ARRAY
6075: IN
6076: IFFALSE 6090
// begin side := i ;
6078: LD_ADDR_VAR 0 3
6082: PUSH
6083: LD_VAR 0 4
6087: ST_TO_ADDR
// break ;
6088: GO 6092
// end ;
6090: GO 6057
6092: POP
6093: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6094: LD_ADDR_EXP 39
6098: PUSH
6099: LD_EXP 39
6103: PPUSH
6104: LD_VAR 0 3
6108: PPUSH
6109: LD_EXP 39
6113: PUSH
6114: LD_VAR 0 3
6118: ARRAY
6119: PUSH
6120: LD_VAR 0 1
6124: DIFF
6125: PPUSH
6126: CALL_OW 1
6130: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6131: LD_ADDR_EXP 36
6135: PUSH
6136: LD_EXP 36
6140: PUSH
6141: LD_INT 1
6143: MINUS
6144: ST_TO_ADDR
// end ; end_of_file
6145: LD_VAR 0 2
6149: RET
// var respawn_queue ; export function init_respawn ; begin
6150: LD_INT 0
6152: PPUSH
// if not def_people_respawning then
6153: LD_EXP 60
6157: NOT
6158: IFFALSE 6162
// exit ;
6160: GO 6204
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6162: LD_ADDR_LOC 11
6166: PUSH
6167: LD_INT 0
6169: PUSH
6170: LD_INT 0
6172: PUSH
6173: LD_INT 0
6175: PUSH
6176: LD_INT 0
6178: PUSH
6179: LD_INT 0
6181: PUSH
6182: LD_INT 0
6184: PUSH
6185: LD_INT 0
6187: PUSH
6188: LD_INT 0
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: ST_TO_ADDR
// enable ( 10 ) ;
6201: LD_INT 10
6203: ENABLE_MARKED
// end ;
6204: LD_VAR 0 1
6208: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6209: GO 6211
6211: DISABLE
6212: LD_INT 0
6214: PPUSH
6215: PPUSH
6216: PPUSH
6217: PPUSH
// begin for side = 1 to Side_Positions do
6218: LD_ADDR_VAR 0 4
6222: PUSH
6223: DOUBLE
6224: LD_INT 1
6226: DEC
6227: ST_TO_ADDR
6228: LD_EXP 23
6232: PUSH
6233: FOR_TO
6234: IFFALSE 6400
// if Side_Positions [ side ] then
6236: LD_EXP 23
6240: PUSH
6241: LD_VAR 0 4
6245: ARRAY
6246: IFFALSE 6398
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6248: LD_ADDR_VAR 0 2
6252: PUSH
6253: LD_INT 22
6255: PUSH
6256: LD_VAR 0 4
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 21
6267: PUSH
6268: LD_INT 1
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: LD_INT 3
6277: PUSH
6278: LD_INT 23
6280: PUSH
6281: LD_INT 0
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: PPUSH
6294: CALL_OW 69
6298: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6299: LD_VAR 0 2
6303: PUSH
6304: LD_EXP 9
6308: LESS
6309: PUSH
6310: LD_LOC 11
6314: PUSH
6315: LD_VAR 0 4
6319: ARRAY
6320: NOT
6321: AND
6322: IFFALSE 6338
// set_queue ( side , TICK ) ;
6324: LD_VAR 0 4
6328: PPUSH
6329: LD_OWVAR 1
6333: PPUSH
6334: CALL 6637 0 2
// time := TICK - respawn_queue [ side ] ;
6338: LD_ADDR_VAR 0 3
6342: PUSH
6343: LD_OWVAR 1
6347: PUSH
6348: LD_LOC 11
6352: PUSH
6353: LD_VAR 0 4
6357: ARRAY
6358: MINUS
6359: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6360: LD_LOC 11
6364: PUSH
6365: LD_VAR 0 4
6369: ARRAY
6370: PUSH
6371: LD_VAR 0 3
6375: PUSH
6376: LD_EXP 16
6380: GREATER
6381: AND
6382: IFFALSE 6398
// respawn_character ( side , time ) ;
6384: LD_VAR 0 4
6388: PPUSH
6389: LD_VAR 0 3
6393: PPUSH
6394: CALL 6406 0 2
// end ;
6398: GO 6233
6400: POP
6401: POP
// enable ;
6402: ENABLE
// end ;
6403: PPOPN 4
6405: END
// function respawn_character ( side , time ) ; var dep ; begin
6406: LD_INT 0
6408: PPUSH
6409: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6410: LD_INT 0
6412: PPUSH
6413: LD_INT 1
6415: PPUSH
6416: CALL_OW 12
6420: PUSH
6421: LD_VAR 0 2
6425: PUSH
6426: LD_EXP 17
6430: LESS
6431: AND
6432: IFFALSE 6436
// exit ;
6434: GO 6632
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6436: LD_ADDR_VAR 0 4
6440: PUSH
6441: LD_INT 22
6443: PUSH
6444: LD_VAR 0 1
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PUSH
6453: LD_INT 2
6455: PUSH
6456: LD_INT 30
6458: PUSH
6459: LD_INT 0
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 30
6468: PUSH
6469: LD_INT 1
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 50
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: ST_TO_ADDR
// if not dep then
6497: LD_VAR 0 4
6501: NOT
6502: IFFALSE 6508
// exit else
6504: GO 6632
6506: GO 6532
// dep := dep [ Rand ( 1 , dep ) ] ;
6508: LD_ADDR_VAR 0 4
6512: PUSH
6513: LD_VAR 0 4
6517: PUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_VAR 0 4
6525: PPUSH
6526: CALL_OW 12
6530: ARRAY
6531: ST_TO_ADDR
// uc_side := side ;
6532: LD_ADDR_OWVAR 20
6536: PUSH
6537: LD_VAR 0 1
6541: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6542: LD_ADDR_OWVAR 21
6546: PUSH
6547: LD_EXP 24
6551: PUSH
6552: LD_VAR 0 1
6556: ARRAY
6557: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6558: LD_INT 0
6560: PPUSH
6561: LD_INT 0
6563: PPUSH
6564: LD_EXP 10
6568: PUSH
6569: LD_INT 2
6571: DIV
6572: PPUSH
6573: CALL_OW 380
// hc_importance := 0 ;
6577: LD_ADDR_OWVAR 32
6581: PUSH
6582: LD_INT 0
6584: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6585: CALL_OW 44
6589: PPUSH
6590: LD_VAR 0 4
6594: PPUSH
6595: CALL_OW 250
6599: PPUSH
6600: LD_VAR 0 4
6604: PPUSH
6605: CALL_OW 251
6609: PPUSH
6610: LD_INT 10
6612: PPUSH
6613: LD_INT 1
6615: PPUSH
6616: CALL_OW 50
// set_queue ( side , 0 ) ;
6620: LD_VAR 0 1
6624: PPUSH
6625: LD_INT 0
6627: PPUSH
6628: CALL 6637 0 2
// end ;
6632: LD_VAR 0 3
6636: RET
// function set_queue ( side , time ) ; begin
6637: LD_INT 0
6639: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6640: LD_ADDR_LOC 11
6644: PUSH
6645: LD_LOC 11
6649: PPUSH
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 3
6659: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6660: LD_ADDR_LOC 11
6664: PUSH
6665: LD_LOC 11
6669: PPUSH
6670: LD_VAR 0 1
6674: PPUSH
6675: LD_VAR 0 2
6679: PPUSH
6680: CALL_OW 2
6684: ST_TO_ADDR
// end ; end_of_file
6685: LD_VAR 0 3
6689: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 266
6699: PUSH
6700: LD_INT 0
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: IN
6710: IFFALSE 6735
// SetBName ( b , @ & GetSide ( b ) ) ;
6712: LD_VAR 0 1
6716: PPUSH
6717: LD_STRING @
6719: PUSH
6720: LD_VAR 0 1
6724: PPUSH
6725: CALL_OW 255
6729: STR
6730: PPUSH
6731: CALL_OW 500
// if def_game_rules then
6735: LD_EXP 49
6739: IFFALSE 6776
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6741: LD_VAR 0 1
6745: PPUSH
6746: LD_VAR 0 1
6750: PPUSH
6751: CALL_OW 266
6755: PPUSH
6756: LD_VAR 0 1
6760: PPUSH
6761: CALL_OW 255
6765: PPUSH
6766: LD_INT 0
6768: PPUSH
6769: LD_INT 1
6771: PPUSH
6772: CALL 16608 0 5
// end ;
6776: PPOPN 2
6778: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6779: LD_VAR 0 1
6783: PPUSH
6784: CALL_OW 266
6788: PUSH
6789: LD_INT 0
6791: PUSH
6792: LD_INT 1
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: IN
6799: IFFALSE 6824
// SetBName ( b , @ & GetSide ( b ) ) ;
6801: LD_VAR 0 1
6805: PPUSH
6806: LD_STRING @
6808: PUSH
6809: LD_VAR 0 1
6813: PPUSH
6814: CALL_OW 255
6818: STR
6819: PPUSH
6820: CALL_OW 500
// if def_game_rules then
6824: LD_EXP 49
6828: IFFALSE 6867
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6830: LD_VAR 0 1
6834: PPUSH
6835: LD_VAR 0 1
6839: PPUSH
6840: CALL_OW 266
6844: PPUSH
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 255
6854: PPUSH
6855: LD_VAR 0 2
6859: PPUSH
6860: LD_INT 1
6862: PPUSH
6863: CALL 16608 0 5
// end ;
6867: PPOPN 3
6869: END
// on VehicleConstructed ( veh , fac ) do var side ;
6870: LD_INT 0
6872: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6873: LD_VAR 0 1
6877: PPUSH
6878: CALL_OW 263
6882: PUSH
6883: LD_INT 5
6885: EQUAL
6886: IFFALSE 7028
// begin side := GetSide ( veh ) ;
6888: LD_ADDR_VAR 0 3
6892: PUSH
6893: LD_VAR 0 1
6897: PPUSH
6898: CALL_OW 255
6902: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6903: LD_ADDR_EXP 39
6907: PUSH
6908: LD_EXP 39
6912: PPUSH
6913: LD_VAR 0 3
6917: PPUSH
6918: LD_EXP 39
6922: PUSH
6923: LD_VAR 0 3
6927: ARRAY
6928: PPUSH
6929: LD_INT 52
6931: PUSH
6932: EMPTY
6933: LIST
6934: PPUSH
6935: CALL_OW 72
6939: PUSH
6940: LD_INT 22
6942: PUSH
6943: LD_VAR 0 3
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PUSH
6952: LD_INT 2
6954: PUSH
6955: LD_INT 33
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 25
6967: PUSH
6968: LD_INT 12
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 25
6977: PUSH
6978: LD_INT 15
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: PUSH
6985: LD_INT 25
6987: PUSH
6988: LD_INT 16
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 25
6997: PUSH
6998: LD_INT 17
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PPUSH
7017: CALL_OW 69
7021: UNION
7022: PPUSH
7023: CALL_OW 1
7027: ST_TO_ADDR
// end ; end ;
7028: PPOPN 3
7030: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7031: LD_INT 0
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7037: LD_VAR 0 1
7041: PPUSH
7042: CALL_OW 257
7046: PUSH
7047: LD_INT 12
7049: PUSH
7050: LD_INT 15
7052: PUSH
7053: LD_INT 17
7055: PUSH
7056: LD_INT 16
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: IN
7065: PUSH
7066: LD_VAR 0 1
7070: PPUSH
7071: CALL_OW 263
7075: PUSH
7076: LD_INT 5
7078: EQUAL
7079: OR
7080: IFFALSE 7091
// ApeKilled ( j ) ;
7082: LD_VAR 0 1
7086: PPUSH
7087: CALL 6006 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7091: LD_VAR 0 1
7095: PPUSH
7096: CALL_OW 266
7100: PUSH
7101: LD_INT 0
7103: PUSH
7104: LD_INT 1
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: IN
7111: IFFALSE 7193
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7113: LD_ADDR_VAR 0 4
7117: PUSH
7118: LD_EXP 23
7122: PUSH
7123: LD_VAR 0 1
7127: PPUSH
7128: CALL_OW 255
7132: ARRAY
7133: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: LD_EXP 32
7143: PUSH
7144: LD_VAR 0 4
7148: ARRAY
7149: PUSH
7150: LD_INT 1
7152: ARRAY
7153: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7154: LD_ADDR_VAR 0 3
7158: PUSH
7159: LD_EXP 32
7163: PUSH
7164: LD_VAR 0 4
7168: ARRAY
7169: PUSH
7170: LD_INT 2
7172: ARRAY
7173: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7174: LD_VAR 0 2
7178: PPUSH
7179: LD_VAR 0 3
7183: PPUSH
7184: CALL_OW 420
7188: PPUSH
7189: CALL_OW 419
// end ; if def_game_rules then
7193: LD_EXP 49
7197: IFFALSE 7296
// if ( GetType ( j ) = 3 ) then
7199: LD_VAR 0 1
7203: PPUSH
7204: CALL_OW 247
7208: PUSH
7209: LD_INT 3
7211: EQUAL
7212: IFFALSE 7252
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7214: LD_VAR 0 1
7218: PPUSH
7219: LD_VAR 0 1
7223: PPUSH
7224: CALL_OW 266
7228: PPUSH
7229: LD_VAR 0 1
7233: PPUSH
7234: CALL_OW 255
7238: PPUSH
7239: LD_INT 0
7241: PPUSH
7242: LD_INT 1
7244: NEG
7245: PPUSH
7246: CALL 16608 0 5
7250: GO 7296
// if ( GetChassis ( j ) = 25 ) then
7252: LD_VAR 0 1
7256: PPUSH
7257: CALL_OW 265
7261: PUSH
7262: LD_INT 25
7264: EQUAL
7265: IFFALSE 7296
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7267: LD_VAR 0 1
7271: PPUSH
7272: LD_INT 37
7274: PPUSH
7275: LD_VAR 0 1
7279: PPUSH
7280: CALL_OW 255
7284: PPUSH
7285: LD_INT 0
7287: PPUSH
7288: LD_INT 1
7290: NEG
7291: PPUSH
7292: CALL 16608 0 5
// end ;
7296: PPOPN 5
7298: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7299: LD_EXP 49
7303: PUSH
7304: LD_VAR 0 1
7308: PPUSH
7309: CALL_OW 265
7313: PUSH
7314: LD_INT 25
7316: EQUAL
7317: AND
7318: IFFALSE 7350
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_INT 37
7327: PPUSH
7328: LD_VAR 0 1
7332: PPUSH
7333: CALL_OW 255
7337: PPUSH
7338: LD_VAR 0 3
7342: PPUSH
7343: LD_INT 1
7345: PPUSH
7346: CALL 16608 0 5
// end ;
7350: PPOPN 4
7352: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7353: LD_VAR 0 1
7357: PPUSH
7358: LD_VAR 0 2
7362: PPUSH
7363: LD_VAR 0 3
7367: PPUSH
7368: LD_OWVAR 2
7372: PPUSH
7373: CALL 18095 0 4
7377: PPOPN 3
7379: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
7380: LD_INT 0
7382: PPUSH
7383: PPUSH
7384: PPUSH
7385: PPUSH
7386: PPUSH
7387: PPUSH
// artefact_number := 3 ;
7388: LD_ADDR_EXP 43
7392: PUSH
7393: LD_INT 3
7395: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
7396: LD_ADDR_EXP 44
7400: PUSH
7401: LD_INT 1
7403: PUSH
7404: LD_INT 0
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 0
7412: PUSH
7413: LD_INT 3
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
7423: LD_ADDR_EXP 45
7427: PUSH
7428: LD_INT 1
7430: PUSH
7431: LD_INT 3
7433: PUSH
7434: LD_INT 5
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
7442: LD_ADDR_VAR 0 2
7446: PUSH
7447: LD_INT 1
7449: PUSH
7450: LD_INT 4
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PUSH
7457: LD_INT 2
7459: PUSH
7460: LD_INT 5
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: PUSH
7467: LD_INT 3
7469: PUSH
7470: LD_INT 9
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: LIST
7481: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_INT 3
7489: PUSH
7490: LD_INT 4
7492: PUSH
7493: LD_INT 3
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: LIST
7500: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
7501: LD_ADDR_VAR 0 4
7505: PUSH
7506: LD_INT 150
7508: PUSH
7509: LD_INT 250
7511: PUSH
7512: LD_INT 400
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: LIST
7519: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
7520: LD_ADDR_VAR 0 5
7524: PUSH
7525: LD_INT 2
7527: PUSH
7528: LD_INT 10
7530: PUSH
7531: LD_INT 20
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: LIST
7538: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
7539: LD_ADDR_VAR 0 6
7543: PUSH
7544: LD_INT 6
7546: PUSH
7547: LD_INT 18
7549: PUSH
7550: LD_INT 50
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
7558: LD_VAR 0 2
7562: PPUSH
7563: LD_VAR 0 3
7567: PPUSH
7568: LD_VAR 0 4
7572: PPUSH
7573: LD_VAR 0 5
7577: PPUSH
7578: LD_VAR 0 6
7582: PPUSH
7583: CALL 7592 0 5
// end ;
7587: LD_VAR 0 1
7591: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
7592: LD_INT 0
7594: PPUSH
7595: PPUSH
7596: PPUSH
7597: PPUSH
7598: PPUSH
// disable ( 1 ) ;
7599: LD_INT 1
7601: DISABLE_MARKED
// disable ( 5 ) ;
7602: LD_INT 5
7604: DISABLE_MARKED
// disable ( 6 ) ;
7605: LD_INT 6
7607: DISABLE_MARKED
// disable ( 7 ) ;
7608: LD_INT 7
7610: DISABLE_MARKED
// for side = 1 to 8 do
7611: LD_ADDR_VAR 0 9
7615: PUSH
7616: DOUBLE
7617: LD_INT 1
7619: DEC
7620: ST_TO_ADDR
7621: LD_INT 8
7623: PUSH
7624: FOR_TO
7625: IFFALSE 7641
// SetArtifactRes ( side , state_enabled ) ;
7627: LD_VAR 0 9
7631: PPUSH
7632: LD_INT 1
7634: PPUSH
7635: CALL_OW 467
7639: GO 7624
7641: POP
7642: POP
// for un = 0 to ( artefact_number - 1 ) do
7643: LD_ADDR_VAR 0 7
7647: PUSH
7648: DOUBLE
7649: LD_INT 0
7651: DEC
7652: ST_TO_ADDR
7653: LD_EXP 43
7657: PUSH
7658: LD_INT 1
7660: MINUS
7661: PUSH
7662: FOR_TO
7663: IFFALSE 8061
// begin base := un * 100 ;
7665: LD_ADDR_VAR 0 10
7669: PUSH
7670: LD_VAR 0 7
7674: PUSH
7675: LD_INT 100
7677: MUL
7678: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
7679: LD_VAR 0 10
7683: PUSH
7684: LD_INT 1
7686: PLUS
7687: PPUSH
7688: LD_VAR 0 1
7692: PUSH
7693: LD_VAR 0 7
7697: PUSH
7698: LD_INT 1
7700: PLUS
7701: ARRAY
7702: PUSH
7703: LD_INT 1
7705: ARRAY
7706: PPUSH
7707: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7711: LD_VAR 0 10
7715: PUSH
7716: LD_INT 2
7718: PLUS
7719: PPUSH
7720: LD_VAR 0 1
7724: PUSH
7725: LD_VAR 0 7
7729: PUSH
7730: LD_INT 1
7732: PLUS
7733: ARRAY
7734: PUSH
7735: LD_INT 2
7737: ARRAY
7738: PPUSH
7739: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7743: LD_VAR 0 10
7747: PUSH
7748: LD_INT 3
7750: PLUS
7751: PPUSH
7752: LD_VAR 0 2
7756: PUSH
7757: LD_VAR 0 7
7761: PUSH
7762: LD_INT 1
7764: PLUS
7765: ARRAY
7766: PPUSH
7767: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7771: LD_VAR 0 10
7775: PUSH
7776: LD_INT 5
7778: PLUS
7779: PPUSH
7780: LD_VAR 0 3
7784: PUSH
7785: LD_VAR 0 7
7789: PUSH
7790: LD_INT 1
7792: PLUS
7793: ARRAY
7794: PPUSH
7795: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7799: LD_VAR 0 10
7803: PUSH
7804: LD_INT 6
7806: PLUS
7807: PPUSH
7808: LD_VAR 0 4
7812: PUSH
7813: LD_VAR 0 7
7817: PUSH
7818: LD_INT 1
7820: PLUS
7821: ARRAY
7822: PPUSH
7823: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7827: LD_VAR 0 10
7831: PUSH
7832: LD_INT 7
7834: PLUS
7835: PPUSH
7836: LD_VAR 0 5
7840: PUSH
7841: LD_VAR 0 7
7845: PUSH
7846: LD_INT 1
7848: PLUS
7849: ARRAY
7850: PPUSH
7851: CALL_OW 109
// SetTag ( base + 08 , false ) ;
7855: LD_VAR 0 10
7859: PUSH
7860: LD_INT 8
7862: PLUS
7863: PPUSH
7864: LD_INT 0
7866: PPUSH
7867: CALL_OW 109
// SetTag ( base + 09 , false ) ;
7871: LD_VAR 0 10
7875: PUSH
7876: LD_INT 9
7878: PLUS
7879: PPUSH
7880: LD_INT 0
7882: PPUSH
7883: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
7887: LD_VAR 0 10
7891: PUSH
7892: LD_INT 11
7894: PLUS
7895: PPUSH
7896: LD_INT 0
7898: PPUSH
7899: CALL_OW 109
// SetTag ( base + 12 , false ) ;
7903: LD_VAR 0 10
7907: PUSH
7908: LD_INT 12
7910: PLUS
7911: PPUSH
7912: LD_INT 0
7914: PPUSH
7915: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7919: LD_VAR 0 10
7923: PUSH
7924: LD_INT 13
7926: PLUS
7927: PPUSH
7928: LD_INT 0
7930: PPUSH
7931: CALL_OW 109
// for i = 0 to 7 do
7935: LD_ADDR_VAR 0 8
7939: PUSH
7940: DOUBLE
7941: LD_INT 0
7943: DEC
7944: ST_TO_ADDR
7945: LD_INT 7
7947: PUSH
7948: FOR_TO
7949: IFFALSE 8057
// begin SetTag ( base + i * 10 + 21 , false ) ;
7951: LD_VAR 0 10
7955: PUSH
7956: LD_VAR 0 8
7960: PUSH
7961: LD_INT 10
7963: MUL
7964: PLUS
7965: PUSH
7966: LD_INT 21
7968: PLUS
7969: PPUSH
7970: LD_INT 0
7972: PPUSH
7973: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
7977: LD_VAR 0 10
7981: PUSH
7982: LD_VAR 0 8
7986: PUSH
7987: LD_INT 10
7989: MUL
7990: PLUS
7991: PUSH
7992: LD_INT 22
7994: PLUS
7995: PPUSH
7996: LD_INT 0
7998: PPUSH
7999: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
8003: LD_VAR 0 10
8007: PUSH
8008: LD_VAR 0 8
8012: PUSH
8013: LD_INT 10
8015: MUL
8016: PLUS
8017: PUSH
8018: LD_INT 23
8020: PLUS
8021: PPUSH
8022: LD_INT 0
8024: PPUSH
8025: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
8029: LD_VAR 0 10
8033: PUSH
8034: LD_VAR 0 8
8038: PUSH
8039: LD_INT 10
8041: MUL
8042: PLUS
8043: PUSH
8044: LD_INT 25
8046: PLUS
8047: PPUSH
8048: LD_INT 0
8050: PPUSH
8051: CALL_OW 109
// end ;
8055: GO 7948
8057: POP
8058: POP
// end ;
8059: GO 7662
8061: POP
8062: POP
// enable ( 20 ) ;
8063: LD_INT 20
8065: ENABLE_MARKED
// labs_in_use := [ ] ;
8066: LD_ADDR_EXP 46
8070: PUSH
8071: EMPTY
8072: ST_TO_ADDR
// if def_artefact_one then
8073: LD_EXP 1
8077: IFFALSE 8104
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
8079: LD_INT 4
8081: PPUSH
8082: LD_EXP 45
8086: PUSH
8087: LD_INT 1
8089: ARRAY
8090: PPUSH
8091: LD_INT 16
8093: PPUSH
8094: LD_INT 0
8096: PPUSH
8097: CALL_OW 59
// enable ( 5 ) ;
8101: LD_INT 5
8103: ENABLE_MARKED
// end ; if def_artefact_two then
8104: LD_EXP 2
8108: IFFALSE 8135
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
8110: LD_INT 4
8112: PPUSH
8113: LD_EXP 45
8117: PUSH
8118: LD_INT 2
8120: ARRAY
8121: PPUSH
8122: LD_INT 16
8124: PPUSH
8125: LD_INT 0
8127: PPUSH
8128: CALL_OW 59
// enable ( 6 ) ;
8132: LD_INT 6
8134: ENABLE_MARKED
// end ; if def_artefact_three then
8135: LD_EXP 3
8139: IFFALSE 8166
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
8141: LD_INT 4
8143: PPUSH
8144: LD_EXP 45
8148: PUSH
8149: LD_INT 3
8151: ARRAY
8152: PPUSH
8153: LD_INT 16
8155: PPUSH
8156: LD_INT 0
8158: PPUSH
8159: CALL_OW 59
// enable ( 7 ) ;
8163: LD_INT 7
8165: ENABLE_MARKED
// end ; end ;
8166: LD_VAR 0 6
8170: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
8171: LD_INT 0
8173: PPUSH
8174: PPUSH
// begin art := artefact_num [ size ] ;
8175: LD_ADDR_VAR 0 3
8179: PUSH
8180: LD_EXP 44
8184: PUSH
8185: LD_VAR 0 2
8189: ARRAY
8190: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8191: LD_ADDR_VAR 0 4
8195: PUSH
8196: LD_VAR 0 3
8200: PUSH
8201: LD_INT 1
8203: MINUS
8204: PUSH
8205: LD_INT 100
8207: MUL
8208: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
8209: LD_VAR 0 4
8213: PUSH
8214: LD_INT 9
8216: PLUS
8217: PPUSH
8218: LD_INT 0
8220: PPUSH
8221: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8225: LD_VAR 0 4
8229: PUSH
8230: LD_INT 13
8232: PLUS
8233: PPUSH
8234: LD_INT 0
8236: PPUSH
8237: CALL_OW 109
// Init_Lab ( art ) ;
8241: LD_VAR 0 3
8245: PPUSH
8246: CALL 9722 0 1
// end ;
8250: PPOPN 4
8252: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
8253: LD_INT 0
8255: PPUSH
8256: PPUSH
8257: PPUSH
// begin art := artefact_num [ size ] ;
8258: LD_ADDR_VAR 0 3
8262: PUSH
8263: LD_EXP 44
8267: PUSH
8268: LD_VAR 0 2
8272: ARRAY
8273: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8274: LD_ADDR_VAR 0 4
8278: PUSH
8279: LD_VAR 0 3
8283: PUSH
8284: LD_INT 1
8286: MINUS
8287: PUSH
8288: LD_INT 100
8290: MUL
8291: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
8292: LD_VAR 0 4
8296: PUSH
8297: LD_INT 9
8299: PLUS
8300: PPUSH
8301: LD_INT 1
8303: PPUSH
8304: CALL_OW 109
// SetTag ( base + 13 , un ) ;
8308: LD_VAR 0 4
8312: PUSH
8313: LD_INT 13
8315: PLUS
8316: PPUSH
8317: LD_VAR 0 1
8321: PPUSH
8322: CALL_OW 109
// if GetTag ( base + 11 ) then
8326: LD_VAR 0 4
8330: PUSH
8331: LD_INT 11
8333: PLUS
8334: PPUSH
8335: CALL_OW 110
8339: IFFALSE 8502
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
8341: LD_ADDR_VAR 0 5
8345: PUSH
8346: LD_VAR 0 4
8350: PUSH
8351: LD_INT 11
8353: PLUS
8354: PPUSH
8355: CALL_OW 110
8359: PPUSH
8360: CALL_OW 255
8364: ST_TO_ADDR
// if GetTag ( base + 12 ) then
8365: LD_VAR 0 4
8369: PUSH
8370: LD_INT 12
8372: PLUS
8373: PPUSH
8374: CALL_OW 110
8378: IFFALSE 8446
// begin ComCancel ( GetTag ( base + 11 ) ) ;
8380: LD_VAR 0 4
8384: PUSH
8385: LD_INT 11
8387: PLUS
8388: PPUSH
8389: CALL_OW 110
8393: PPUSH
8394: CALL_OW 127
// wait ( 5 ) ;
8398: LD_INT 5
8400: PPUSH
8401: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
8405: LD_ADDR_EXP 46
8409: PUSH
8410: LD_EXP 46
8414: PUSH
8415: LD_VAR 0 4
8419: PUSH
8420: LD_INT 11
8422: PLUS
8423: PPUSH
8424: CALL_OW 110
8428: DIFF
8429: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
8430: LD_VAR 0 4
8434: PUSH
8435: LD_INT 12
8437: PLUS
8438: PPUSH
8439: LD_INT 0
8441: PPUSH
8442: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
8446: LD_VAR 0 4
8450: PUSH
8451: LD_VAR 0 5
8455: PUSH
8456: LD_INT 10
8458: MUL
8459: PLUS
8460: PUSH
8461: LD_INT 11
8463: PLUS
8464: PPUSH
8465: CALL_OW 110
8469: NOT
8470: IFFALSE 8486
// DeInit_Lab ( side , art ) ;
8472: LD_VAR 0 5
8476: PPUSH
8477: LD_VAR 0 3
8481: PPUSH
8482: CALL 10258 0 2
// SetTag ( base + 11 , 0 ) ;
8486: LD_VAR 0 4
8490: PUSH
8491: LD_INT 11
8493: PLUS
8494: PPUSH
8495: LD_INT 0
8497: PPUSH
8498: CALL_OW 109
// end ; end ;
8502: PPOPN 5
8504: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
8505: LD_INT 0
8507: PPUSH
8508: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8509: LD_ADDR_VAR 0 3
8513: PUSH
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 255
8523: PUSH
8524: LD_INT 1
8526: MINUS
8527: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8528: LD_ADDR_VAR 0 2
8532: PUSH
8533: DOUBLE
8534: LD_INT 0
8536: DEC
8537: ST_TO_ADDR
8538: LD_EXP 43
8542: PUSH
8543: LD_INT 1
8545: MINUS
8546: PUSH
8547: FOR_TO
8548: IFFALSE 8590
// if lab = GetTag ( un * 100 + 11 ) then
8550: LD_VAR 0 1
8554: PUSH
8555: LD_VAR 0 2
8559: PUSH
8560: LD_INT 100
8562: MUL
8563: PUSH
8564: LD_INT 11
8566: PLUS
8567: PPUSH
8568: CALL_OW 110
8572: EQUAL
8573: IFFALSE 8588
// Init_Lab ( un + 1 ) ;
8575: LD_VAR 0 2
8579: PUSH
8580: LD_INT 1
8582: PLUS
8583: PPUSH
8584: CALL 9722 0 1
8588: GO 8547
8590: POP
8591: POP
// end ;
8592: PPOPN 3
8594: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
8595: LD_INT 0
8597: PPUSH
8598: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8599: LD_ADDR_VAR 0 4
8603: PUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 255
8613: PUSH
8614: LD_INT 1
8616: MINUS
8617: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8618: LD_ADDR_VAR 0 3
8622: PUSH
8623: DOUBLE
8624: LD_INT 0
8626: DEC
8627: ST_TO_ADDR
8628: LD_EXP 43
8632: PUSH
8633: LD_INT 1
8635: MINUS
8636: PUSH
8637: FOR_TO
8638: IFFALSE 8756
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8640: LD_VAR 0 3
8644: PUSH
8645: LD_INT 100
8647: MUL
8648: PUSH
8649: LD_INT 11
8651: PLUS
8652: PPUSH
8653: CALL_OW 110
8657: PUSH
8658: LD_VAR 0 1
8662: EQUAL
8663: PUSH
8664: LD_VAR 0 3
8668: PUSH
8669: LD_INT 100
8671: MUL
8672: PUSH
8673: LD_INT 12
8675: PLUS
8676: PPUSH
8677: CALL_OW 110
8681: AND
8682: IFFALSE 8754
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
8684: LD_VAR 0 3
8688: PUSH
8689: LD_INT 100
8691: MUL
8692: PUSH
8693: LD_VAR 0 4
8697: PUSH
8698: LD_INT 10
8700: MUL
8701: PLUS
8702: PUSH
8703: LD_INT 22
8705: PLUS
8706: PPUSH
8707: LD_VAR 0 2
8711: PPUSH
8712: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8716: LD_VAR 0 3
8720: PUSH
8721: LD_INT 100
8723: MUL
8724: PUSH
8725: LD_INT 12
8727: PLUS
8728: PPUSH
8729: LD_INT 0
8731: PPUSH
8732: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8736: LD_ADDR_EXP 46
8740: PUSH
8741: LD_EXP 46
8745: PUSH
8746: LD_VAR 0 1
8750: DIFF
8751: ST_TO_ADDR
// break ;
8752: GO 8756
// end ;
8754: GO 8637
8756: POP
8757: POP
// Update_Artefact ( lab ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: CALL 10397 0 1
// end ;
8767: PPOPN 4
8769: END
// on SpecResearchComplete ( lab ) do var un , side ;
8770: LD_INT 0
8772: PPUSH
8773: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8774: LD_ADDR_VAR 0 3
8778: PUSH
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 255
8788: PUSH
8789: LD_INT 1
8791: MINUS
8792: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8793: LD_ADDR_VAR 0 2
8797: PUSH
8798: DOUBLE
8799: LD_INT 0
8801: DEC
8802: ST_TO_ADDR
8803: LD_EXP 43
8807: PUSH
8808: LD_INT 1
8810: MINUS
8811: PUSH
8812: FOR_TO
8813: IFFALSE 8959
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8815: LD_VAR 0 2
8819: PUSH
8820: LD_INT 100
8822: MUL
8823: PUSH
8824: LD_INT 11
8826: PLUS
8827: PPUSH
8828: CALL_OW 110
8832: PUSH
8833: LD_VAR 0 1
8837: EQUAL
8838: PUSH
8839: LD_VAR 0 2
8843: PUSH
8844: LD_INT 100
8846: MUL
8847: PUSH
8848: LD_INT 12
8850: PLUS
8851: PPUSH
8852: CALL_OW 110
8856: AND
8857: IFFALSE 8957
// begin SetTag ( un * 100 + 12 , false ) ;
8859: LD_VAR 0 2
8863: PUSH
8864: LD_INT 100
8866: MUL
8867: PUSH
8868: LD_INT 12
8870: PLUS
8871: PPUSH
8872: LD_INT 0
8874: PPUSH
8875: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
8879: LD_VAR 0 2
8883: PUSH
8884: LD_INT 100
8886: MUL
8887: PUSH
8888: LD_VAR 0 3
8892: PUSH
8893: LD_INT 10
8895: MUL
8896: PLUS
8897: PUSH
8898: LD_INT 21
8900: PLUS
8901: PPUSH
8902: LD_INT 1
8904: PPUSH
8905: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
8909: LD_VAR 0 2
8913: PUSH
8914: LD_INT 100
8916: MUL
8917: PUSH
8918: LD_VAR 0 3
8922: PUSH
8923: LD_INT 10
8925: MUL
8926: PLUS
8927: PUSH
8928: LD_INT 25
8930: PLUS
8931: PPUSH
8932: LD_VAR 0 1
8936: PPUSH
8937: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8941: LD_ADDR_EXP 46
8945: PUSH
8946: LD_EXP 46
8950: PUSH
8951: LD_VAR 0 1
8955: DIFF
8956: ST_TO_ADDR
// end ;
8957: GO 8812
8959: POP
8960: POP
// Update_Artefact ( lab ) ;
8961: LD_VAR 0 1
8965: PPUSH
8966: CALL 10397 0 1
// end ;
8970: PPOPN 3
8972: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
8973: LD_INT 0
8975: PPUSH
8976: PPUSH
8977: PPUSH
8978: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
8979: LD_ADDR_VAR 0 7
8983: PUSH
8984: LD_VAR 0 2
8988: PUSH
8989: LD_INT 1
8991: MINUS
8992: PUSH
8993: LD_INT 3
8995: MOD
8996: PUSH
8997: LD_INT 1
8999: PLUS
9000: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
9001: LD_ADDR_VAR 0 8
9005: PUSH
9006: LD_VAR 0 7
9010: PUSH
9011: LD_INT 1
9013: MINUS
9014: PUSH
9015: LD_INT 100
9017: MUL
9018: ST_TO_ADDR
// if number <= 3 then
9019: LD_VAR 0 2
9023: PUSH
9024: LD_INT 3
9026: LESSEQUAL
9027: IFFALSE 9259
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
9029: LD_VAR 0 8
9033: PUSH
9034: LD_INT 11
9036: PLUS
9037: PPUSH
9038: CALL_OW 110
9042: PPUSH
9043: LD_VAR 0 8
9047: PUSH
9048: LD_INT 5
9050: PLUS
9051: PPUSH
9052: CALL_OW 110
9056: PPUSH
9057: LD_INT 1
9059: PPUSH
9060: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
9064: LD_VAR 0 8
9068: PUSH
9069: LD_INT 11
9071: PLUS
9072: PPUSH
9073: CALL_OW 110
9077: PPUSH
9078: LD_VAR 0 8
9082: PUSH
9083: LD_VAR 0 1
9087: PUSH
9088: LD_INT 10
9090: MUL
9091: PLUS
9092: PUSH
9093: LD_INT 12
9095: PLUS
9096: PPUSH
9097: CALL_OW 110
9101: PPUSH
9102: CALL_OW 329
// SetTag ( base + 12 , true ) ;
9106: LD_VAR 0 8
9110: PUSH
9111: LD_INT 12
9113: PLUS
9114: PPUSH
9115: LD_INT 1
9117: PPUSH
9118: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
9122: LD_ADDR_EXP 46
9126: PUSH
9127: LD_EXP 46
9131: PUSH
9132: LD_VAR 0 8
9136: PUSH
9137: LD_INT 11
9139: PLUS
9140: PPUSH
9141: CALL_OW 110
9145: ADD
9146: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9147: LD_ADDR_VAR 0 5
9151: PUSH
9152: DOUBLE
9153: LD_INT 0
9155: DEC
9156: ST_TO_ADDR
9157: LD_EXP 43
9161: PUSH
9162: LD_INT 1
9164: MINUS
9165: PUSH
9166: FOR_TO
9167: IFFALSE 9255
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9169: LD_VAR 0 8
9173: PUSH
9174: LD_INT 11
9176: PLUS
9177: PPUSH
9178: CALL_OW 110
9182: PUSH
9183: LD_VAR 0 5
9187: PUSH
9188: LD_INT 100
9190: MUL
9191: PUSH
9192: LD_INT 11
9194: PLUS
9195: PPUSH
9196: CALL_OW 110
9200: PUSH
9201: LD_VAR 0 5
9205: PUSH
9206: LD_INT 100
9208: MUL
9209: PUSH
9210: LD_VAR 0 1
9214: PUSH
9215: LD_INT 10
9217: MUL
9218: PLUS
9219: PUSH
9220: LD_INT 15
9222: PLUS
9223: PPUSH
9224: CALL_OW 110
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: IN
9233: IFFALSE 9253
// DeInit_Lab ( side , un + 1 ) ;
9235: LD_VAR 0 1
9239: PPUSH
9240: LD_VAR 0 5
9244: PUSH
9245: LD_INT 1
9247: PLUS
9248: PPUSH
9249: CALL 10258 0 2
9253: GO 9166
9255: POP
9256: POP
// end else
9257: GO 9433
// begin succes := false ;
9259: LD_ADDR_VAR 0 6
9263: PUSH
9264: LD_INT 0
9266: ST_TO_ADDR
// case art of 1 :
9267: LD_VAR 0 7
9271: PUSH
9272: LD_INT 1
9274: DOUBLE
9275: EQUAL
9276: IFTRUE 9280
9278: GO 9308
9280: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
9281: LD_ADDR_VAR 0 6
9285: PUSH
9286: LD_VAR 0 1
9290: PPUSH
9291: LD_VAR 0 3
9295: PPUSH
9296: LD_VAR 0 4
9300: PPUSH
9301: CALL 10830 0 3
9305: ST_TO_ADDR
9306: GO 9376
9308: LD_INT 2
9310: DOUBLE
9311: EQUAL
9312: IFTRUE 9316
9314: GO 9339
9316: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
9317: LD_ADDR_VAR 0 6
9321: PUSH
9322: LD_VAR 0 1
9326: PPUSH
9327: LD_VAR 0 3
9331: PPUSH
9332: CALL 11068 0 2
9336: ST_TO_ADDR
9337: GO 9376
9339: LD_INT 3
9341: DOUBLE
9342: EQUAL
9343: IFTRUE 9347
9345: GO 9375
9347: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
9348: LD_ADDR_VAR 0 6
9352: PUSH
9353: LD_VAR 0 1
9357: PPUSH
9358: LD_VAR 0 3
9362: PPUSH
9363: LD_VAR 0 4
9367: PPUSH
9368: CALL 11464 0 3
9372: ST_TO_ADDR
9373: GO 9376
9375: POP
// if succes then
9376: LD_VAR 0 6
9380: IFFALSE 9433
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
9382: LD_VAR 0 8
9386: PUSH
9387: LD_VAR 0 1
9391: PUSH
9392: LD_INT 10
9394: MUL
9395: PLUS
9396: PUSH
9397: LD_INT 13
9399: PLUS
9400: PPUSH
9401: LD_VAR 0 8
9405: PUSH
9406: LD_INT 7
9408: PLUS
9409: PPUSH
9410: CALL_OW 110
9414: PPUSH
9415: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
9419: LD_VAR 0 1
9423: PPUSH
9424: LD_VAR 0 7
9428: PPUSH
9429: CALL 9436 0 2
// end ; end ; end ;
9433: PPOPN 8
9435: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
9436: LD_INT 0
9438: PPUSH
9439: PPUSH
9440: PPUSH
// base := ( art - 1 ) * 100 ;
9441: LD_ADDR_VAR 0 4
9445: PUSH
9446: LD_VAR 0 2
9450: PUSH
9451: LD_INT 1
9453: MINUS
9454: PUSH
9455: LD_INT 100
9457: MUL
9458: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9459: LD_ADDR_VAR 0 5
9463: PUSH
9464: LD_VAR 0 4
9468: PUSH
9469: LD_VAR 0 1
9473: PUSH
9474: LD_INT 10
9476: MUL
9477: PLUS
9478: PUSH
9479: LD_INT 15
9481: PLUS
9482: PPUSH
9483: CALL_OW 110
9487: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
9488: LD_VAR 0 5
9492: PUSH
9493: LD_VAR 0 5
9497: PUSH
9498: LD_EXP 46
9502: IN
9503: NOT
9504: AND
9505: IFFALSE 9563
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
9507: LD_VAR 0 1
9511: PPUSH
9512: LD_VAR 0 4
9516: PUSH
9517: LD_INT 1
9519: PLUS
9520: PUSH
9521: LD_VAR 0 4
9525: PUSH
9526: LD_VAR 0 1
9530: PUSH
9531: LD_INT 10
9533: MUL
9534: PLUS
9535: PUSH
9536: LD_INT 11
9538: PLUS
9539: PPUSH
9540: CALL_OW 110
9544: PLUS
9545: PPUSH
9546: CALL_OW 110
9550: PPUSH
9551: LD_INT 1
9553: PPUSH
9554: LD_VAR 0 5
9558: PPUSH
9559: CALL_OW 468
// end ;
9563: LD_VAR 0 3
9567: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
9568: LD_INT 0
9570: PPUSH
9571: PPUSH
9572: PPUSH
// base := ( art - 1 ) * 100 ;
9573: LD_ADDR_VAR 0 4
9577: PUSH
9578: LD_VAR 0 2
9582: PUSH
9583: LD_INT 1
9585: MINUS
9586: PUSH
9587: LD_INT 100
9589: MUL
9590: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9591: LD_ADDR_VAR 0 5
9595: PUSH
9596: LD_VAR 0 4
9600: PUSH
9601: LD_VAR 0 1
9605: PUSH
9606: LD_INT 10
9608: MUL
9609: PLUS
9610: PUSH
9611: LD_INT 15
9613: PLUS
9614: PPUSH
9615: CALL_OW 110
9619: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
9620: LD_VAR 0 5
9624: PUSH
9625: LD_VAR 0 5
9629: PUSH
9630: LD_EXP 46
9634: IN
9635: NOT
9636: AND
9637: PUSH
9638: LD_VAR 0 5
9642: PPUSH
9643: CALL_OW 313
9647: AND
9648: IFFALSE 9717
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
9650: LD_VAR 0 1
9654: PPUSH
9655: LD_VAR 0 4
9659: PUSH
9660: LD_INT 1
9662: PLUS
9663: PUSH
9664: LD_VAR 0 4
9668: PUSH
9669: LD_VAR 0 1
9673: PUSH
9674: LD_INT 10
9676: MUL
9677: PLUS
9678: PUSH
9679: LD_INT 11
9681: PLUS
9682: PPUSH
9683: CALL_OW 110
9687: PLUS
9688: PPUSH
9689: CALL_OW 110
9693: PPUSH
9694: LD_VAR 0 4
9698: PUSH
9699: LD_INT 3
9701: PLUS
9702: PPUSH
9703: CALL_OW 110
9707: PPUSH
9708: LD_VAR 0 5
9712: PPUSH
9713: CALL_OW 468
// end ;
9717: LD_VAR 0 3
9721: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9722: LD_INT 0
9724: PPUSH
9725: PPUSH
9726: PPUSH
9727: PPUSH
9728: PPUSH
9729: PPUSH
9730: PPUSH
9731: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9732: LD_ADDR_VAR 0 8
9736: PUSH
9737: LD_EXP 45
9741: PUSH
9742: LD_VAR 0 1
9746: ARRAY
9747: PPUSH
9748: CALL_OW 469
9752: ST_TO_ADDR
// if not art_hex then
9753: LD_VAR 0 8
9757: NOT
9758: IFFALSE 9762
// exit ;
9760: GO 10253
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9762: LD_ADDR_VAR 0 3
9766: PUSH
9767: LD_INT 2
9769: PUSH
9770: LD_INT 30
9772: PUSH
9773: LD_INT 6
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 30
9782: PUSH
9783: LD_INT 7
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: LD_INT 30
9792: PUSH
9793: LD_INT 8
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: PUSH
9806: EMPTY
9807: LIST
9808: PPUSH
9809: CALL_OW 69
9813: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9814: LD_ADDR_VAR 0 9
9818: PUSH
9819: LD_VAR 0 3
9823: PPUSH
9824: LD_VAR 0 8
9828: PUSH
9829: LD_INT 1
9831: ARRAY
9832: PPUSH
9833: LD_VAR 0 8
9837: PUSH
9838: LD_INT 2
9840: ARRAY
9841: PPUSH
9842: CALL_OW 73
9846: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9847: LD_ADDR_VAR 0 6
9851: PUSH
9852: LD_VAR 0 9
9856: PPUSH
9857: LD_VAR 0 8
9861: PUSH
9862: LD_INT 1
9864: ARRAY
9865: PPUSH
9866: LD_VAR 0 8
9870: PUSH
9871: LD_INT 2
9873: ARRAY
9874: PPUSH
9875: CALL_OW 297
9879: ST_TO_ADDR
// if dist < 9 then
9880: LD_VAR 0 6
9884: PUSH
9885: LD_INT 9
9887: LESS
9888: IFFALSE 10253
// begin side := GetSide ( nearest_lab ) ;
9890: LD_ADDR_VAR 0 4
9894: PUSH
9895: LD_VAR 0 9
9899: PPUSH
9900: CALL_OW 255
9904: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
9905: LD_VAR 0 4
9909: PPUSH
9910: LD_VAR 0 1
9914: PPUSH
9915: CALL 10258 0 2
// base := ( art - 1 ) * 100 ;
9919: LD_ADDR_VAR 0 5
9923: PUSH
9924: LD_VAR 0 1
9928: PUSH
9929: LD_INT 1
9931: MINUS
9932: PUSH
9933: LD_INT 100
9935: MUL
9936: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
9937: LD_INT 24
9939: PPUSH
9940: LD_VAR 0 4
9944: PPUSH
9945: CALL_OW 321
9949: PUSH
9950: LD_INT 2
9952: EQUAL
9953: PUSH
9954: LD_VAR 0 9
9958: PPUSH
9959: CALL_OW 313
9963: AND
9964: IFFALSE 10156
// begin if GetTag ( base + side * 10 + 11 ) then
9966: LD_VAR 0 5
9970: PUSH
9971: LD_VAR 0 4
9975: PUSH
9976: LD_INT 10
9978: MUL
9979: PLUS
9980: PUSH
9981: LD_INT 11
9983: PLUS
9984: PPUSH
9985: CALL_OW 110
9989: IFFALSE 10146
// begin if not GetTag ( base + side * 10 + 13 ) then
9991: LD_VAR 0 5
9995: PUSH
9996: LD_VAR 0 4
10000: PUSH
10001: LD_INT 10
10003: MUL
10004: PLUS
10005: PUSH
10006: LD_INT 13
10008: PLUS
10009: PPUSH
10010: CALL_OW 110
10014: NOT
10015: IFFALSE 10038
// state := GetTag ( base + 03 ) else
10017: LD_ADDR_VAR 0 7
10021: PUSH
10022: LD_VAR 0 5
10026: PUSH
10027: LD_INT 3
10029: PLUS
10030: PPUSH
10031: CALL_OW 110
10035: ST_TO_ADDR
10036: GO 10046
// state := art_gray ;
10038: LD_ADDR_VAR 0 7
10042: PUSH
10043: LD_INT 1
10045: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
10046: LD_VAR 0 5
10050: PUSH
10051: LD_VAR 0 4
10055: PUSH
10056: LD_INT 10
10058: MUL
10059: PLUS
10060: PUSH
10061: LD_INT 15
10063: PLUS
10064: PPUSH
10065: CALL_OW 110
10069: PUSH
10070: LD_VAR 0 5
10074: PUSH
10075: LD_VAR 0 4
10079: PUSH
10080: LD_INT 10
10082: MUL
10083: PLUS
10084: PUSH
10085: LD_INT 15
10087: PLUS
10088: PPUSH
10089: CALL_OW 110
10093: PUSH
10094: LD_VAR 0 9
10098: NONEQUAL
10099: AND
10100: IFFALSE 10116
// DeInit_Lab ( side , art ) ;
10102: LD_VAR 0 4
10106: PPUSH
10107: LD_VAR 0 1
10111: PPUSH
10112: CALL 10258 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
10116: LD_VAR 0 5
10120: PUSH
10121: LD_VAR 0 4
10125: PUSH
10126: LD_INT 10
10128: MUL
10129: PLUS
10130: PUSH
10131: LD_INT 15
10133: PLUS
10134: PPUSH
10135: LD_VAR 0 9
10139: PPUSH
10140: CALL_OW 109
// end else
10144: GO 10154
// state := art_instant ;
10146: LD_ADDR_VAR 0 7
10150: PUSH
10151: LD_INT 2
10153: ST_TO_ADDR
// end else
10154: GO 10164
// state := art_gray ;
10156: LD_ADDR_VAR 0 7
10160: PUSH
10161: LD_INT 1
10163: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
10164: LD_VAR 0 5
10168: PUSH
10169: LD_INT 11
10171: PLUS
10172: PPUSH
10173: LD_VAR 0 9
10177: PPUSH
10178: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
10182: LD_VAR 0 9
10186: PUSH
10187: LD_EXP 46
10191: IN
10192: NOT
10193: IFFALSE 10253
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
10195: LD_VAR 0 4
10199: PPUSH
10200: LD_VAR 0 5
10204: PUSH
10205: LD_INT 1
10207: PLUS
10208: PUSH
10209: LD_VAR 0 5
10213: PUSH
10214: LD_VAR 0 4
10218: PUSH
10219: LD_INT 10
10221: MUL
10222: PLUS
10223: PUSH
10224: LD_INT 11
10226: PLUS
10227: PPUSH
10228: CALL_OW 110
10232: PLUS
10233: PPUSH
10234: CALL_OW 110
10238: PPUSH
10239: LD_VAR 0 7
10243: PPUSH
10244: LD_VAR 0 9
10248: PPUSH
10249: CALL_OW 468
// end ; end ;
10253: LD_VAR 0 2
10257: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
10258: LD_INT 0
10260: PPUSH
10261: PPUSH
10262: PPUSH
// base := ( art - 1 ) * 100 ;
10263: LD_ADDR_VAR 0 4
10267: PUSH
10268: LD_VAR 0 2
10272: PUSH
10273: LD_INT 1
10275: MINUS
10276: PUSH
10277: LD_INT 100
10279: MUL
10280: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
10281: LD_ADDR_VAR 0 5
10285: PUSH
10286: LD_VAR 0 4
10290: PUSH
10291: LD_VAR 0 1
10295: PUSH
10296: LD_INT 10
10298: MUL
10299: PLUS
10300: PUSH
10301: LD_INT 15
10303: PLUS
10304: PPUSH
10305: CALL_OW 110
10309: ST_TO_ADDR
// if not lab then
10310: LD_VAR 0 5
10314: NOT
10315: IFFALSE 10336
// lab := GetTag ( base + 11 ) ;
10317: LD_ADDR_VAR 0 5
10321: PUSH
10322: LD_VAR 0 4
10326: PUSH
10327: LD_INT 11
10329: PLUS
10330: PPUSH
10331: CALL_OW 110
10335: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
10336: LD_VAR 0 1
10340: PPUSH
10341: LD_VAR 0 4
10345: PUSH
10346: LD_INT 1
10348: PLUS
10349: PUSH
10350: LD_VAR 0 4
10354: PUSH
10355: LD_VAR 0 1
10359: PUSH
10360: LD_INT 10
10362: MUL
10363: PLUS
10364: PUSH
10365: LD_INT 11
10367: PLUS
10368: PPUSH
10369: CALL_OW 110
10373: PLUS
10374: PPUSH
10375: CALL_OW 110
10379: PPUSH
10380: LD_INT 0
10382: PPUSH
10383: LD_VAR 0 5
10387: PPUSH
10388: CALL_OW 468
// end ;
10392: LD_VAR 0 3
10396: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
10397: LD_INT 0
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
// side := GetSide ( lab ) ;
10403: LD_ADDR_VAR 0 4
10407: PUSH
10408: LD_VAR 0 1
10412: PPUSH
10413: CALL_OW 255
10417: ST_TO_ADDR
// for art = 1 to artefact_number do
10418: LD_ADDR_VAR 0 3
10422: PUSH
10423: DOUBLE
10424: LD_INT 1
10426: DEC
10427: ST_TO_ADDR
10428: LD_EXP 43
10432: PUSH
10433: FOR_TO
10434: IFFALSE 10590
// begin base := ( art - 1 ) * 100 ;
10436: LD_ADDR_VAR 0 5
10440: PUSH
10441: LD_VAR 0 3
10445: PUSH
10446: LD_INT 1
10448: MINUS
10449: PUSH
10450: LD_INT 100
10452: MUL
10453: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
10454: LD_VAR 0 5
10458: PUSH
10459: LD_INT 11
10461: PLUS
10462: PPUSH
10463: CALL_OW 110
10467: PUSH
10468: LD_VAR 0 1
10472: EQUAL
10473: IFFALSE 10486
// Init_Lab ( art ) else
10475: LD_VAR 0 3
10479: PPUSH
10480: CALL 9722 0 1
10484: GO 10588
// begin if lab = GetTag ( base + side * 10 + 15 ) then
10486: LD_VAR 0 1
10490: PUSH
10491: LD_VAR 0 5
10495: PUSH
10496: LD_VAR 0 4
10500: PUSH
10501: LD_INT 10
10503: MUL
10504: PLUS
10505: PUSH
10506: LD_INT 15
10508: PLUS
10509: PPUSH
10510: CALL_OW 110
10514: EQUAL
10515: IFFALSE 10588
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
10517: LD_VAR 0 5
10521: PUSH
10522: LD_VAR 0 4
10526: PUSH
10527: LD_INT 10
10529: MUL
10530: PLUS
10531: PUSH
10532: LD_INT 13
10534: PLUS
10535: PPUSH
10536: CALL_OW 110
10540: PUSH
10541: LD_INT 0
10543: GREATER
10544: PUSH
10545: LD_VAR 0 1
10549: PPUSH
10550: CALL_OW 313
10554: NOT
10555: OR
10556: IFFALSE 10574
// Shadow_Artefact ( side , art ) else
10558: LD_VAR 0 4
10562: PPUSH
10563: LD_VAR 0 3
10567: PPUSH
10568: CALL 9436 0 2
10572: GO 10588
// Highlight_Artefact ( side , art ) ;
10574: LD_VAR 0 4
10578: PPUSH
10579: LD_VAR 0 3
10583: PPUSH
10584: CALL 9568 0 2
// end ; end ; end ;
10588: GO 10433
10590: POP
10591: POP
// end ; end_of_file
10592: LD_VAR 0 2
10596: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
10597: LD_INT 10
10599: PPUSH
10600: CALL_OW 67
// if not IsBusy ( lab ) then
10604: LD_VAR 0 2
10608: PPUSH
10609: CALL_OW 315
10613: NOT
10614: IFFALSE 10641
// begin labs_in_use := labs_in_use diff lab ;
10616: LD_ADDR_EXP 46
10620: PUSH
10621: LD_EXP 46
10625: PUSH
10626: LD_VAR 0 2
10630: DIFF
10631: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10632: LD_VAR 0 2
10636: PPUSH
10637: CALL 10397 0 1
// end ; end ;
10641: PPOPN 2
10643: END
// on ResearchStarted ( tech , lab ) do var un , side ;
10644: LD_INT 0
10646: PPUSH
10647: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
10648: LD_ADDR_EXP 46
10652: PUSH
10653: LD_EXP 46
10657: PUSH
10658: LD_VAR 0 2
10662: ADD
10663: ST_TO_ADDR
// side := GetSide ( lab ) ;
10664: LD_ADDR_VAR 0 4
10668: PUSH
10669: LD_VAR 0 2
10673: PPUSH
10674: CALL_OW 255
10678: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
10679: LD_ADDR_VAR 0 3
10683: PUSH
10684: DOUBLE
10685: LD_INT 0
10687: DEC
10688: ST_TO_ADDR
10689: LD_EXP 43
10693: PUSH
10694: LD_INT 1
10696: MINUS
10697: PUSH
10698: FOR_TO
10699: IFFALSE 10778
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10701: LD_VAR 0 2
10705: PUSH
10706: LD_VAR 0 3
10710: PUSH
10711: LD_INT 100
10713: MUL
10714: PUSH
10715: LD_INT 11
10717: PLUS
10718: PPUSH
10719: CALL_OW 110
10723: PUSH
10724: LD_VAR 0 3
10728: PUSH
10729: LD_INT 100
10731: MUL
10732: PUSH
10733: LD_VAR 0 4
10737: PUSH
10738: LD_INT 10
10740: MUL
10741: PLUS
10742: PUSH
10743: LD_INT 15
10745: PLUS
10746: PPUSH
10747: CALL_OW 110
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: IN
10756: IFFALSE 10776
// DeInit_Lab ( side , un + 1 ) ;
10758: LD_VAR 0 4
10762: PPUSH
10763: LD_VAR 0 3
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: PPUSH
10772: CALL 10258 0 2
10776: GO 10698
10778: POP
10779: POP
// end ;
10780: PPOPN 4
10782: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10783: LD_INT 10
10785: PPUSH
10786: CALL_OW 67
// if not IsBusy ( lab ) then
10790: LD_VAR 0 2
10794: PPUSH
10795: CALL_OW 315
10799: NOT
10800: IFFALSE 10827
// begin labs_in_use := labs_in_use diff lab ;
10802: LD_ADDR_EXP 46
10806: PUSH
10807: LD_EXP 46
10811: PUSH
10812: LD_VAR 0 2
10816: DIFF
10817: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10818: LD_VAR 0 2
10822: PPUSH
10823: CALL 10397 0 1
// end ; end ; end_of_file
10827: PPOPN 2
10829: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10830: LD_INT 0
10832: PPUSH
10833: PPUSH
10834: PPUSH
// vysledek := true ;
10835: LD_ADDR_VAR 0 5
10839: PUSH
10840: LD_INT 1
10842: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
10843: LD_ADDR_VAR 0 6
10847: PUSH
10848: LD_VAR 0 1
10852: PUSH
10853: LD_INT 10
10855: MUL
10856: PUSH
10857: LD_INT 15
10859: PLUS
10860: PPUSH
10861: CALL_OW 110
10865: PPUSH
10866: CALL_OW 274
10870: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
10871: LD_VAR 0 6
10875: PUSH
10876: LD_VAR 0 6
10880: PPUSH
10881: CALL_OW 279
10885: PUSH
10886: LD_INT 3
10888: ARRAY
10889: PUSH
10890: LD_INT 6
10892: PPUSH
10893: CALL_OW 110
10897: GREATEREQUAL
10898: AND
10899: IFFALSE 10989
// begin PlaceSeeing ( x , y , side , - 15 ) ;
10901: LD_VAR 0 2
10905: PPUSH
10906: LD_VAR 0 3
10910: PPUSH
10911: LD_VAR 0 1
10915: PPUSH
10916: LD_INT 15
10918: NEG
10919: PPUSH
10920: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
10924: LD_VAR 0 6
10928: PPUSH
10929: LD_INT 3
10931: PPUSH
10932: LD_VAR 0 6
10936: PPUSH
10937: CALL_OW 279
10941: PUSH
10942: LD_INT 3
10944: ARRAY
10945: PUSH
10946: LD_INT 6
10948: PPUSH
10949: CALL_OW 110
10953: MINUS
10954: PPUSH
10955: CALL_OW 277
// view_data := [ x , y , side ] ;
10959: LD_ADDR_LOC 12
10963: PUSH
10964: LD_VAR 0 2
10968: PUSH
10969: LD_VAR 0 3
10973: PUSH
10974: LD_VAR 0 1
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: ST_TO_ADDR
// enable ( 1 ) ;
10984: LD_INT 1
10986: ENABLE_MARKED
// end else
10987: GO 10997
// vysledek := false ;
10989: LD_ADDR_VAR 0 5
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// result := vysledek ;
10997: LD_ADDR_VAR 0 4
11001: PUSH
11002: LD_VAR 0 5
11006: ST_TO_ADDR
// end ;
11007: LD_VAR 0 4
11011: RET
// every 0 0$2 trigger view_data marked 1 do
11012: LD_LOC 12
11016: IFFALSE 11067
11018: GO 11020
11020: DISABLE
// begin wait ( 0 0$30 ) ;
11021: LD_INT 1050
11023: PPUSH
11024: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
11028: LD_LOC 12
11032: PUSH
11033: LD_INT 1
11035: ARRAY
11036: PPUSH
11037: LD_LOC 12
11041: PUSH
11042: LD_INT 2
11044: ARRAY
11045: PPUSH
11046: LD_LOC 12
11050: PUSH
11051: LD_INT 3
11053: ARRAY
11054: PPUSH
11055: CALL_OW 331
// view_data := 0 ;
11059: LD_ADDR_LOC 12
11063: PUSH
11064: LD_INT 0
11066: ST_TO_ADDR
// end ;
11067: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
11068: LD_INT 0
11070: PPUSH
11071: PPUSH
11072: PPUSH
11073: PPUSH
11074: PPUSH
11075: PPUSH
11076: PPUSH
11077: PPUSH
// vysledek := true ;
11078: LD_ADDR_VAR 0 4
11082: PUSH
11083: LD_INT 1
11085: ST_TO_ADDR
// it_can := false ;
11086: LD_ADDR_VAR 0 8
11090: PUSH
11091: LD_INT 0
11093: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
11094: LD_ADDR_VAR 0 9
11098: PUSH
11099: LD_INT 30
11101: PUSH
11102: LD_INT 28
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
11109: LD_ADDR_VAR 0 10
11113: PUSH
11114: LD_INT 8
11116: PUSH
11117: LD_INT 48
11119: PUSH
11120: LD_INT 29
11122: PUSH
11123: LD_INT 49
11125: PUSH
11126: LD_INT 10
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
11136: LD_ADDR_VAR 0 7
11140: PUSH
11141: LD_VAR 0 2
11145: PPUSH
11146: CALL_OW 247
11150: PUSH
11151: LD_INT 3
11153: EQUAL
11154: PUSH
11155: LD_VAR 0 2
11159: PPUSH
11160: CALL_OW 266
11164: PUSH
11165: LD_VAR 0 9
11169: IN
11170: PUSH
11171: LD_VAR 0 2
11175: PPUSH
11176: CALL_OW 269
11180: PUSH
11181: LD_VAR 0 10
11185: IN
11186: OR
11187: AND
11188: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
11189: LD_ADDR_VAR 0 6
11193: PUSH
11194: LD_VAR 0 2
11198: PPUSH
11199: CALL_OW 247
11203: PUSH
11204: LD_INT 2
11206: EQUAL
11207: PUSH
11208: LD_VAR 0 2
11212: PPUSH
11213: CALL_OW 264
11217: PUSH
11218: LD_VAR 0 10
11222: IN
11223: PUSH
11224: LD_VAR 0 2
11228: PPUSH
11229: CALL_OW 262
11233: PUSH
11234: LD_INT 3
11236: EQUAL
11237: OR
11238: AND
11239: ST_TO_ADDR
// case def_artefact_two of 1 :
11240: LD_EXP 2
11244: PUSH
11245: LD_INT 1
11247: DOUBLE
11248: EQUAL
11249: IFTRUE 11253
11251: GO 11270
11253: POP
// if b_can then
11254: LD_VAR 0 7
11258: IFFALSE 11268
// it_can := true ; 2 :
11260: LD_ADDR_VAR 0 8
11264: PUSH
11265: LD_INT 1
11267: ST_TO_ADDR
11268: GO 11327
11270: LD_INT 2
11272: DOUBLE
11273: EQUAL
11274: IFTRUE 11278
11276: GO 11295
11278: POP
// if v_can then
11279: LD_VAR 0 6
11283: IFFALSE 11293
// it_can := true ; 3 :
11285: LD_ADDR_VAR 0 8
11289: PUSH
11290: LD_INT 1
11292: ST_TO_ADDR
11293: GO 11327
11295: LD_INT 3
11297: DOUBLE
11298: EQUAL
11299: IFTRUE 11303
11301: GO 11326
11303: POP
// if b_can or v_can then
11304: LD_VAR 0 7
11308: PUSH
11309: LD_VAR 0 6
11313: OR
11314: IFFALSE 11324
// it_can := true ; end ;
11316: LD_ADDR_VAR 0 8
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
11324: GO 11327
11326: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
11327: LD_ADDR_VAR 0 5
11331: PUSH
11332: LD_INT 100
11334: PUSH
11335: LD_VAR 0 1
11339: PUSH
11340: LD_INT 10
11342: MUL
11343: PLUS
11344: PUSH
11345: LD_INT 15
11347: PLUS
11348: PPUSH
11349: CALL_OW 110
11353: PPUSH
11354: CALL_OW 274
11358: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
11359: LD_VAR 0 5
11363: PUSH
11364: LD_VAR 0 8
11368: AND
11369: PUSH
11370: LD_VAR 0 5
11374: PPUSH
11375: CALL_OW 279
11379: PUSH
11380: LD_INT 3
11382: ARRAY
11383: PUSH
11384: LD_INT 106
11386: PPUSH
11387: CALL_OW 110
11391: GREATEREQUAL
11392: AND
11393: IFFALSE 11441
// begin KillUnit ( un ) ;
11395: LD_VAR 0 2
11399: PPUSH
11400: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
11404: LD_VAR 0 5
11408: PPUSH
11409: LD_INT 3
11411: PPUSH
11412: LD_VAR 0 5
11416: PPUSH
11417: CALL_OW 279
11421: PUSH
11422: LD_INT 3
11424: ARRAY
11425: PUSH
11426: LD_INT 106
11428: PPUSH
11429: CALL_OW 110
11433: MINUS
11434: PPUSH
11435: CALL_OW 277
// end else
11439: GO 11449
// vysledek := false ;
11441: LD_ADDR_VAR 0 4
11445: PUSH
11446: LD_INT 0
11448: ST_TO_ADDR
// result := vysledek ;
11449: LD_ADDR_VAR 0 3
11453: PUSH
11454: LD_VAR 0 4
11458: ST_TO_ADDR
// end ;
11459: LD_VAR 0 3
11463: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
11464: LD_INT 0
11466: PPUSH
11467: PPUSH
11468: PPUSH
11469: PPUSH
// vysledek := true ;
11470: LD_ADDR_VAR 0 5
11474: PUSH
11475: LD_INT 1
11477: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
11478: LD_ADDR_VAR 0 7
11482: PUSH
11483: LD_INT 200
11485: PUSH
11486: LD_VAR 0 1
11490: PUSH
11491: LD_INT 10
11493: MUL
11494: PLUS
11495: PUSH
11496: LD_INT 15
11498: PLUS
11499: PPUSH
11500: CALL_OW 110
11504: PPUSH
11505: CALL_OW 274
11509: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
11510: LD_VAR 0 7
11514: PUSH
11515: LD_VAR 0 7
11519: PPUSH
11520: CALL_OW 279
11524: PUSH
11525: LD_INT 3
11527: ARRAY
11528: PUSH
11529: LD_INT 206
11531: PPUSH
11532: CALL_OW 110
11536: GREATEREQUAL
11537: AND
11538: IFFALSE 11594
// begin ArtContamination ( p1 , p2 , 15 ) ;
11540: LD_VAR 0 2
11544: PPUSH
11545: LD_VAR 0 3
11549: PPUSH
11550: LD_INT 15
11552: PPUSH
11553: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
11557: LD_VAR 0 7
11561: PPUSH
11562: LD_INT 3
11564: PPUSH
11565: LD_VAR 0 7
11569: PPUSH
11570: CALL_OW 279
11574: PUSH
11575: LD_INT 3
11577: ARRAY
11578: PUSH
11579: LD_INT 206
11581: PPUSH
11582: CALL_OW 110
11586: MINUS
11587: PPUSH
11588: CALL_OW 277
// end else
11592: GO 11602
// vysledek := false ;
11594: LD_ADDR_VAR 0 5
11598: PUSH
11599: LD_INT 0
11601: ST_TO_ADDR
// result := vysledek ;
11602: LD_ADDR_VAR 0 4
11606: PUSH
11607: LD_VAR 0 5
11611: ST_TO_ADDR
// end ;
11612: LD_VAR 0 4
11616: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
11617: GO 11619
11619: DISABLE
11620: LD_INT 0
11622: PPUSH
11623: PPUSH
11624: PPUSH
// begin for art = 0 to artefact_number do
11625: LD_ADDR_VAR 0 1
11629: PUSH
11630: DOUBLE
11631: LD_INT 0
11633: DEC
11634: ST_TO_ADDR
11635: LD_EXP 43
11639: PUSH
11640: FOR_TO
11641: IFFALSE 11775
// for side = 1 to Side_Positions do
11643: LD_ADDR_VAR 0 2
11647: PUSH
11648: DOUBLE
11649: LD_INT 1
11651: DEC
11652: ST_TO_ADDR
11653: LD_EXP 23
11657: PUSH
11658: FOR_TO
11659: IFFALSE 11771
// begin recharge := art * 100 + side * 10 + 13 ;
11661: LD_ADDR_VAR 0 3
11665: PUSH
11666: LD_VAR 0 1
11670: PUSH
11671: LD_INT 100
11673: MUL
11674: PUSH
11675: LD_VAR 0 2
11679: PUSH
11680: LD_INT 10
11682: MUL
11683: PLUS
11684: PUSH
11685: LD_INT 13
11687: PLUS
11688: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
11689: LD_EXP 23
11693: PUSH
11694: LD_VAR 0 2
11698: ARRAY
11699: PUSH
11700: LD_VAR 0 3
11704: PPUSH
11705: CALL_OW 110
11709: PUSH
11710: LD_INT 0
11712: GREATER
11713: AND
11714: IFFALSE 11769
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11716: LD_VAR 0 3
11720: PPUSH
11721: LD_VAR 0 3
11725: PPUSH
11726: CALL_OW 110
11730: PUSH
11731: LD_INT 1
11733: MINUS
11734: PPUSH
11735: CALL_OW 109
// if not GetTag ( recharge ) then
11739: LD_VAR 0 3
11743: PPUSH
11744: CALL_OW 110
11748: NOT
11749: IFFALSE 11769
// Highlight_Artefact ( side , art + 1 ) ;
11751: LD_VAR 0 2
11755: PPUSH
11756: LD_VAR 0 1
11760: PUSH
11761: LD_INT 1
11763: PLUS
11764: PPUSH
11765: CALL 9568 0 2
// end ; end ;
11769: GO 11658
11771: POP
11772: POP
11773: GO 11640
11775: POP
11776: POP
// enable ;
11777: ENABLE
// end ; end_of_file
11778: PPOPN 3
11780: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11781: LD_INT 0
11783: PPUSH
11784: PPUSH
11785: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11786: LD_INT 18
11788: PPUSH
11789: LD_VAR 0 1
11793: PUSH
11794: LD_INT 1
11796: ARRAY
11797: PPUSH
11798: LD_VAR 0 1
11802: PUSH
11803: LD_INT 2
11805: ARRAY
11806: PPUSH
11807: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11811: LD_VAR 0 1
11815: PUSH
11816: LD_INT 1
11818: ARRAY
11819: PPUSH
11820: LD_VAR 0 1
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PPUSH
11829: CALL_OW 494
// Wait ( 30 ) ;
11833: LD_INT 30
11835: PPUSH
11836: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
11840: LD_INT 18
11842: PPUSH
11843: LD_INT 4
11845: PPUSH
11846: CALL_OW 286
// base := ( art - 1 ) * 100 ;
11850: LD_ADDR_VAR 0 4
11854: PUSH
11855: LD_VAR 0 2
11859: PUSH
11860: LD_INT 1
11862: MINUS
11863: PUSH
11864: LD_INT 100
11866: MUL
11867: ST_TO_ADDR
// if GetTag ( base + 11 ) then
11868: LD_VAR 0 4
11872: PUSH
11873: LD_INT 11
11875: PLUS
11876: PPUSH
11877: CALL_OW 110
11881: IFFALSE 12019
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
11883: LD_ADDR_VAR 0 5
11887: PUSH
11888: LD_VAR 0 4
11892: PUSH
11893: LD_INT 11
11895: PLUS
11896: PPUSH
11897: CALL_OW 110
11901: PPUSH
11902: CALL_OW 255
11906: ST_TO_ADDR
// if GetTag ( base + 12 ) then
11907: LD_VAR 0 4
11911: PUSH
11912: LD_INT 12
11914: PLUS
11915: PPUSH
11916: CALL_OW 110
11920: IFFALSE 11963
// begin ComCancel ( GetTag ( base + 11 ) ) ;
11922: LD_VAR 0 4
11926: PUSH
11927: LD_INT 11
11929: PLUS
11930: PPUSH
11931: CALL_OW 110
11935: PPUSH
11936: CALL_OW 127
// Wait ( 10 ) ;
11940: LD_INT 10
11942: PPUSH
11943: CALL_OW 67
// SetTag ( base + 12 , false ) ;
11947: LD_VAR 0 4
11951: PUSH
11952: LD_INT 12
11954: PLUS
11955: PPUSH
11956: LD_INT 0
11958: PPUSH
11959: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
11963: LD_VAR 0 4
11967: PUSH
11968: LD_VAR 0 5
11972: PUSH
11973: LD_INT 10
11975: MUL
11976: PLUS
11977: PUSH
11978: LD_INT 11
11980: PLUS
11981: PPUSH
11982: CALL_OW 110
11986: NOT
11987: IFFALSE 12003
// DeInit_Lab ( side , art ) ;
11989: LD_VAR 0 5
11993: PPUSH
11994: LD_VAR 0 2
11998: PPUSH
11999: CALL 10258 0 2
// SetTag ( base + 11 , 0 ) ;
12003: LD_VAR 0 4
12007: PUSH
12008: LD_INT 11
12010: PLUS
12011: PPUSH
12012: LD_INT 0
12014: PPUSH
12015: CALL_OW 109
// end ; end ;
12019: LD_VAR 0 3
12023: RET
// every 0 0$5 marked 5 do var hex , un ;
12024: GO 12026
12026: DISABLE
12027: LD_INT 0
12029: PPUSH
12030: PPUSH
// begin wait ( 3 3$0 ) ;
12031: LD_INT 6300
12033: PPUSH
12034: CALL_OW 67
// if GetTag ( 09 ) then
12038: LD_INT 9
12040: PPUSH
12041: CALL_OW 110
12045: IFFALSE 12084
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
12047: LD_ADDR_VAR 0 1
12051: PUSH
12052: LD_INT 13
12054: PPUSH
12055: CALL_OW 110
12059: PPUSH
12060: CALL_OW 250
12064: PUSH
12065: LD_INT 13
12067: PPUSH
12068: CALL_OW 110
12072: PPUSH
12073: CALL_OW 251
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: ST_TO_ADDR
12082: GO 12103
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
12084: LD_ADDR_VAR 0 1
12088: PUSH
12089: LD_EXP 45
12093: PUSH
12094: LD_INT 1
12096: ARRAY
12097: PPUSH
12098: CALL_OW 469
12102: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12103: LD_VAR 0 1
12107: PUSH
12108: LD_INT 1
12110: ARRAY
12111: PPUSH
12112: LD_VAR 0 1
12116: PUSH
12117: LD_INT 2
12119: ARRAY
12120: PPUSH
12121: LD_INT 16
12123: PPUSH
12124: CALL_OW 309
12128: NOT
12129: IFFALSE 12406
// begin if GetTag ( 09 ) then
12131: LD_INT 9
12133: PPUSH
12134: CALL_OW 110
12138: IFFALSE 12185
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12140: LD_INT 13
12142: PPUSH
12143: CALL_OW 110
12147: PPUSH
12148: LD_INT 4
12150: PPUSH
12151: LD_EXP 45
12155: PUSH
12156: LD_INT 1
12158: ARRAY
12159: NEG
12160: PPUSH
12161: CALL_OW 290
// SetTag ( 09 , 0 ) ;
12165: LD_INT 9
12167: PPUSH
12168: LD_INT 0
12170: PPUSH
12171: CALL_OW 109
// SetTag ( 13 , 0 ) ;
12175: LD_INT 13
12177: PPUSH
12178: LD_INT 0
12180: PPUSH
12181: CALL_OW 109
// end ; DestroyArtefact ( hex , 1 ) ;
12185: LD_VAR 0 1
12189: PPUSH
12190: LD_INT 1
12192: PPUSH
12193: CALL 11781 0 2
// wait ( 5 ) ;
12197: LD_INT 5
12199: PPUSH
12200: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12204: LD_ADDR_VAR 0 1
12208: PUSH
12209: LD_INT 16
12211: PPUSH
12212: LD_INT 0
12214: PPUSH
12215: CALL_OW 16
12219: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12220: LD_ADDR_VAR 0 2
12224: PUSH
12225: LD_VAR 0 1
12229: PUSH
12230: LD_INT 1
12232: ARRAY
12233: PPUSH
12234: LD_VAR 0 1
12238: PUSH
12239: LD_INT 2
12241: ARRAY
12242: PPUSH
12243: CALL_OW 428
12247: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12248: LD_VAR 0 2
12252: PUSH
12253: LD_INT 0
12255: GREATER
12256: PUSH
12257: LD_VAR 0 2
12261: PPUSH
12262: CALL_OW 247
12266: PUSH
12267: LD_INT 3
12269: EQUAL
12270: AND
12271: IFFALSE 12315
// begin KillUnit ( un ) ;
12273: LD_VAR 0 2
12277: PPUSH
12278: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12282: LD_VAR 0 1
12286: PUSH
12287: LD_INT 1
12289: ARRAY
12290: PPUSH
12291: LD_VAR 0 1
12295: PUSH
12296: LD_INT 2
12298: ARRAY
12299: PPUSH
12300: CALL_OW 428
12304: IFFALSE 12315
// wait ( 10 ) ;
12306: LD_INT 10
12308: PPUSH
12309: CALL_OW 67
12313: GO 12282
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12315: LD_VAR 0 1
12319: PUSH
12320: LD_INT 1
12322: ARRAY
12323: PPUSH
12324: LD_VAR 0 1
12328: PUSH
12329: LD_INT 2
12331: ARRAY
12332: PPUSH
12333: CALL_OW 428
12337: NOT
12338: IFFALSE 12204
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12340: LD_VAR 0 1
12344: PUSH
12345: LD_INT 1
12347: ARRAY
12348: PPUSH
12349: LD_VAR 0 1
12353: PUSH
12354: LD_INT 2
12356: ARRAY
12357: PPUSH
12358: CALL_OW 494
// wait ( 30 ) ;
12362: LD_INT 30
12364: PPUSH
12365: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12369: LD_INT 4
12371: PPUSH
12372: LD_EXP 45
12376: PUSH
12377: LD_INT 1
12379: ARRAY
12380: PPUSH
12381: LD_VAR 0 1
12385: PUSH
12386: LD_INT 1
12388: ARRAY
12389: PPUSH
12390: LD_VAR 0 1
12394: PUSH
12395: LD_INT 2
12397: ARRAY
12398: PPUSH
12399: LD_INT 0
12401: PPUSH
12402: CALL_OW 58
// end ; enable ;
12406: ENABLE
// end ;
12407: PPOPN 2
12409: END
// every 0 0$5 marked 6 do var hex , un ;
12410: GO 12412
12412: DISABLE
12413: LD_INT 0
12415: PPUSH
12416: PPUSH
// begin wait ( 3 3$30 ) ;
12417: LD_INT 7350
12419: PPUSH
12420: CALL_OW 67
// if GetTag ( 109 ) then
12424: LD_INT 109
12426: PPUSH
12427: CALL_OW 110
12431: IFFALSE 12470
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
12433: LD_ADDR_VAR 0 1
12437: PUSH
12438: LD_INT 113
12440: PPUSH
12441: CALL_OW 110
12445: PPUSH
12446: CALL_OW 250
12450: PUSH
12451: LD_INT 113
12453: PPUSH
12454: CALL_OW 110
12458: PPUSH
12459: CALL_OW 251
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: ST_TO_ADDR
12468: GO 12489
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
12470: LD_ADDR_VAR 0 1
12474: PUSH
12475: LD_EXP 45
12479: PUSH
12480: LD_INT 2
12482: ARRAY
12483: PPUSH
12484: CALL_OW 469
12488: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12489: LD_VAR 0 1
12493: PUSH
12494: LD_INT 1
12496: ARRAY
12497: PPUSH
12498: LD_VAR 0 1
12502: PUSH
12503: LD_INT 2
12505: ARRAY
12506: PPUSH
12507: LD_INT 16
12509: PPUSH
12510: CALL_OW 309
12514: NOT
12515: IFFALSE 12792
// begin if GetTag ( 109 ) then
12517: LD_INT 109
12519: PPUSH
12520: CALL_OW 110
12524: IFFALSE 12571
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12526: LD_INT 113
12528: PPUSH
12529: CALL_OW 110
12533: PPUSH
12534: LD_INT 4
12536: PPUSH
12537: LD_EXP 45
12541: PUSH
12542: LD_INT 1
12544: ARRAY
12545: NEG
12546: PPUSH
12547: CALL_OW 290
// SetTag ( 109 , 0 ) ;
12551: LD_INT 109
12553: PPUSH
12554: LD_INT 0
12556: PPUSH
12557: CALL_OW 109
// SetTag ( 113 , 0 ) ;
12561: LD_INT 113
12563: PPUSH
12564: LD_INT 0
12566: PPUSH
12567: CALL_OW 109
// end ; DestroyArtefact ( hex , 2 ) ;
12571: LD_VAR 0 1
12575: PPUSH
12576: LD_INT 2
12578: PPUSH
12579: CALL 11781 0 2
// wait ( 5 ) ;
12583: LD_INT 5
12585: PPUSH
12586: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12590: LD_ADDR_VAR 0 1
12594: PUSH
12595: LD_INT 16
12597: PPUSH
12598: LD_INT 0
12600: PPUSH
12601: CALL_OW 16
12605: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12606: LD_ADDR_VAR 0 2
12610: PUSH
12611: LD_VAR 0 1
12615: PUSH
12616: LD_INT 1
12618: ARRAY
12619: PPUSH
12620: LD_VAR 0 1
12624: PUSH
12625: LD_INT 2
12627: ARRAY
12628: PPUSH
12629: CALL_OW 428
12633: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12634: LD_VAR 0 2
12638: PUSH
12639: LD_INT 0
12641: GREATER
12642: PUSH
12643: LD_VAR 0 2
12647: PPUSH
12648: CALL_OW 247
12652: PUSH
12653: LD_INT 3
12655: EQUAL
12656: AND
12657: IFFALSE 12701
// begin KillUnit ( un ) ;
12659: LD_VAR 0 2
12663: PPUSH
12664: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12668: LD_VAR 0 1
12672: PUSH
12673: LD_INT 1
12675: ARRAY
12676: PPUSH
12677: LD_VAR 0 1
12681: PUSH
12682: LD_INT 2
12684: ARRAY
12685: PPUSH
12686: CALL_OW 428
12690: IFFALSE 12701
// wait ( 10 ) ;
12692: LD_INT 10
12694: PPUSH
12695: CALL_OW 67
12699: GO 12668
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12701: LD_VAR 0 1
12705: PUSH
12706: LD_INT 1
12708: ARRAY
12709: PPUSH
12710: LD_VAR 0 1
12714: PUSH
12715: LD_INT 2
12717: ARRAY
12718: PPUSH
12719: CALL_OW 428
12723: NOT
12724: IFFALSE 12590
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12726: LD_VAR 0 1
12730: PUSH
12731: LD_INT 1
12733: ARRAY
12734: PPUSH
12735: LD_VAR 0 1
12739: PUSH
12740: LD_INT 2
12742: ARRAY
12743: PPUSH
12744: CALL_OW 494
// wait ( 30 ) ;
12748: LD_INT 30
12750: PPUSH
12751: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12755: LD_INT 4
12757: PPUSH
12758: LD_EXP 45
12762: PUSH
12763: LD_INT 2
12765: ARRAY
12766: PPUSH
12767: LD_VAR 0 1
12771: PUSH
12772: LD_INT 1
12774: ARRAY
12775: PPUSH
12776: LD_VAR 0 1
12780: PUSH
12781: LD_INT 2
12783: ARRAY
12784: PPUSH
12785: LD_INT 0
12787: PPUSH
12788: CALL_OW 58
// end ; enable ;
12792: ENABLE
// end ;
12793: PPOPN 2
12795: END
// every 0 0$5 marked 7 do var hex , un ;
12796: GO 12798
12798: DISABLE
12799: LD_INT 0
12801: PPUSH
12802: PPUSH
// begin wait ( 4 4$0 ) ;
12803: LD_INT 8400
12805: PPUSH
12806: CALL_OW 67
// if GetTag ( 209 ) then
12810: LD_INT 209
12812: PPUSH
12813: CALL_OW 110
12817: IFFALSE 12856
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: LD_INT 213
12826: PPUSH
12827: CALL_OW 110
12831: PPUSH
12832: CALL_OW 250
12836: PUSH
12837: LD_INT 213
12839: PPUSH
12840: CALL_OW 110
12844: PPUSH
12845: CALL_OW 251
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: ST_TO_ADDR
12854: GO 12875
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
12856: LD_ADDR_VAR 0 1
12860: PUSH
12861: LD_EXP 45
12865: PUSH
12866: LD_INT 3
12868: ARRAY
12869: PPUSH
12870: CALL_OW 469
12874: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12875: LD_VAR 0 1
12879: PUSH
12880: LD_INT 1
12882: ARRAY
12883: PPUSH
12884: LD_VAR 0 1
12888: PUSH
12889: LD_INT 2
12891: ARRAY
12892: PPUSH
12893: LD_INT 16
12895: PPUSH
12896: CALL_OW 309
12900: NOT
12901: IFFALSE 13178
// begin if GetTag ( 209 ) then
12903: LD_INT 209
12905: PPUSH
12906: CALL_OW 110
12910: IFFALSE 12957
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12912: LD_INT 213
12914: PPUSH
12915: CALL_OW 110
12919: PPUSH
12920: LD_INT 4
12922: PPUSH
12923: LD_EXP 45
12927: PUSH
12928: LD_INT 1
12930: ARRAY
12931: NEG
12932: PPUSH
12933: CALL_OW 290
// SetTag ( 209 , 0 ) ;
12937: LD_INT 209
12939: PPUSH
12940: LD_INT 0
12942: PPUSH
12943: CALL_OW 109
// SetTag ( 213 , 0 ) ;
12947: LD_INT 213
12949: PPUSH
12950: LD_INT 0
12952: PPUSH
12953: CALL_OW 109
// end ; DestroyArtefact ( hex , 3 ) ;
12957: LD_VAR 0 1
12961: PPUSH
12962: LD_INT 3
12964: PPUSH
12965: CALL 11781 0 2
// wait ( 5 ) ;
12969: LD_INT 5
12971: PPUSH
12972: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12976: LD_ADDR_VAR 0 1
12980: PUSH
12981: LD_INT 16
12983: PPUSH
12984: LD_INT 0
12986: PPUSH
12987: CALL_OW 16
12991: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12992: LD_ADDR_VAR 0 2
12996: PUSH
12997: LD_VAR 0 1
13001: PUSH
13002: LD_INT 1
13004: ARRAY
13005: PPUSH
13006: LD_VAR 0 1
13010: PUSH
13011: LD_INT 2
13013: ARRAY
13014: PPUSH
13015: CALL_OW 428
13019: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
13020: LD_VAR 0 2
13024: PUSH
13025: LD_INT 0
13027: GREATER
13028: PUSH
13029: LD_VAR 0 2
13033: PPUSH
13034: CALL_OW 247
13038: PUSH
13039: LD_INT 3
13041: EQUAL
13042: AND
13043: IFFALSE 13087
// begin KillUnit ( un ) ;
13045: LD_VAR 0 2
13049: PPUSH
13050: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
13054: LD_VAR 0 1
13058: PUSH
13059: LD_INT 1
13061: ARRAY
13062: PPUSH
13063: LD_VAR 0 1
13067: PUSH
13068: LD_INT 2
13070: ARRAY
13071: PPUSH
13072: CALL_OW 428
13076: IFFALSE 13087
// wait ( 10 ) ;
13078: LD_INT 10
13080: PPUSH
13081: CALL_OW 67
13085: GO 13054
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13087: LD_VAR 0 1
13091: PUSH
13092: LD_INT 1
13094: ARRAY
13095: PPUSH
13096: LD_VAR 0 1
13100: PUSH
13101: LD_INT 2
13103: ARRAY
13104: PPUSH
13105: CALL_OW 428
13109: NOT
13110: IFFALSE 12976
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13112: LD_VAR 0 1
13116: PUSH
13117: LD_INT 1
13119: ARRAY
13120: PPUSH
13121: LD_VAR 0 1
13125: PUSH
13126: LD_INT 2
13128: ARRAY
13129: PPUSH
13130: CALL_OW 494
// wait ( 30 ) ;
13134: LD_INT 30
13136: PPUSH
13137: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13141: LD_INT 4
13143: PPUSH
13144: LD_EXP 45
13148: PUSH
13149: LD_INT 3
13151: ARRAY
13152: PPUSH
13153: LD_VAR 0 1
13157: PUSH
13158: LD_INT 1
13160: ARRAY
13161: PPUSH
13162: LD_VAR 0 1
13166: PUSH
13167: LD_INT 2
13169: ARRAY
13170: PPUSH
13171: LD_INT 0
13173: PPUSH
13174: CALL_OW 58
// end ; enable ;
13178: ENABLE
// end ; end_of_file
13179: PPOPN 2
13181: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13182: LD_INT 0
13184: PPUSH
13185: PPUSH
// for un in battle_flags_id do
13186: LD_ADDR_VAR 0 2
13190: PUSH
13191: LD_EXP 34
13195: PUSH
13196: FOR_IN
13197: IFFALSE 13272
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13199: LD_VAR 0 2
13203: PPUSH
13204: LD_INT 1
13206: PUSH
13207: LD_LOC 14
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 2
13218: PUSH
13219: LD_LOC 14
13223: PUSH
13224: LD_INT 2
13226: DIV
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 3
13234: PUSH
13235: LD_LOC 14
13239: PUSH
13240: LD_INT 5
13242: DIV
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 20
13250: PUSH
13251: LD_LOC 14
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: PPUSH
13266: CALL_OW 423
13270: GO 13196
13272: POP
13273: POP
// end ;
13274: LD_VAR 0 1
13278: RET
// every 0 0$0.1 do var un ;
13279: GO 13281
13281: DISABLE
13282: LD_INT 0
13284: PPUSH
// begin if not def_morale_flags then
13285: LD_EXP 58
13289: NOT
13290: IFFALSE 13294
// exit ;
13292: GO 13371
// if not morale_decreasing_time then
13294: LD_EXP 14
13298: NOT
13299: IFFALSE 13303
// exit ;
13301: GO 13371
// strength = 100 ;
13303: LD_ADDR_LOC 14
13307: PUSH
13308: LD_INT 100
13310: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13311: LD_EXP 14
13315: PPUSH
13316: CALL_OW 67
// strength := strength - 1 ;
13320: LD_ADDR_LOC 14
13324: PUSH
13325: LD_LOC 14
13329: PUSH
13330: LD_INT 1
13332: MINUS
13333: ST_TO_ADDR
// Update_Flags ;
13334: CALL 13182 0 0
// until not strength ;
13338: LD_LOC 14
13342: NOT
13343: IFFALSE 13311
// for un in battle_flags_id do
13345: LD_ADDR_VAR 0 1
13349: PUSH
13350: LD_EXP 34
13354: PUSH
13355: FOR_IN
13356: IFFALSE 13369
// KillBattleFlag ( un ) ;
13358: LD_VAR 0 1
13362: PPUSH
13363: CALL_OW 419
13367: GO 13355
13369: POP
13370: POP
// end ; end_of_file
13371: PPOPN 1
13373: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
13374: LD_INT 0
13376: PPUSH
13377: PPUSH
13378: PPUSH
// enable ( 600 ) ;
13379: LD_INT 600
13381: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
13382: LD_ADDR_VAR 0 2
13386: PUSH
13387: DOUBLE
13388: LD_INT 1
13390: DEC
13391: ST_TO_ADDR
13392: LD_EXP 47
13396: PUSH
13397: FOR_TO
13398: IFFALSE 13553
// if Position_Sides [ i ] then
13400: LD_EXP 29
13404: PUSH
13405: LD_VAR 0 2
13409: ARRAY
13410: IFFALSE 13551
// for j := 1 to 8 do
13412: LD_ADDR_VAR 0 3
13416: PUSH
13417: DOUBLE
13418: LD_INT 1
13420: DEC
13421: ST_TO_ADDR
13422: LD_INT 8
13424: PUSH
13425: FOR_TO
13426: IFFALSE 13549
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13428: LD_EXP 23
13432: PUSH
13433: LD_VAR 0 3
13437: ARRAY
13438: PUSH
13439: LD_EXP 21
13443: PUSH
13444: LD_EXP 29
13448: PUSH
13449: LD_VAR 0 2
13453: ARRAY
13454: ARRAY
13455: PUSH
13456: LD_EXP 21
13460: PUSH
13461: LD_VAR 0 3
13465: ARRAY
13466: NONEQUAL
13467: PUSH
13468: LD_EXP 25
13472: NOT
13473: PUSH
13474: LD_EXP 29
13478: PUSH
13479: LD_VAR 0 2
13483: ARRAY
13484: PUSH
13485: LD_VAR 0 3
13489: NONEQUAL
13490: AND
13491: OR
13492: AND
13493: IFFALSE 13517
// HideArea ( j , BuildUpAreas [ i ] ) else
13495: LD_VAR 0 3
13499: PPUSH
13500: LD_EXP 47
13504: PUSH
13505: LD_VAR 0 2
13509: ARRAY
13510: PPUSH
13511: CALL_OW 333
13515: GO 13547
// if ( j = your_side ) then
13517: LD_VAR 0 3
13521: PUSH
13522: LD_OWVAR 2
13526: EQUAL
13527: IFFALSE 13547
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13529: LD_EXP 47
13533: PUSH
13534: LD_VAR 0 2
13538: ARRAY
13539: PPUSH
13540: LD_INT 5
13542: PPUSH
13543: CALL_OW 424
13547: GO 13425
13549: POP
13550: POP
13551: GO 13397
13553: POP
13554: POP
// end ;
13555: LD_VAR 0 1
13559: RET
// export function EndBuildUp ; var i , j ; begin
13560: LD_INT 0
13562: PPUSH
13563: PPUSH
13564: PPUSH
// disable ( 600 ) ;
13565: LD_INT 600
13567: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
13568: LD_ADDR_VAR 0 2
13572: PUSH
13573: DOUBLE
13574: LD_INT 1
13576: DEC
13577: ST_TO_ADDR
13578: LD_EXP 47
13582: PUSH
13583: FOR_TO
13584: IFFALSE 13739
// if Position_Sides [ i ] then
13586: LD_EXP 29
13590: PUSH
13591: LD_VAR 0 2
13595: ARRAY
13596: IFFALSE 13737
// for j := 1 to 8 do
13598: LD_ADDR_VAR 0 3
13602: PUSH
13603: DOUBLE
13604: LD_INT 1
13606: DEC
13607: ST_TO_ADDR
13608: LD_INT 8
13610: PUSH
13611: FOR_TO
13612: IFFALSE 13735
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13614: LD_EXP 23
13618: PUSH
13619: LD_VAR 0 3
13623: ARRAY
13624: PUSH
13625: LD_EXP 21
13629: PUSH
13630: LD_EXP 29
13634: PUSH
13635: LD_VAR 0 2
13639: ARRAY
13640: ARRAY
13641: PUSH
13642: LD_EXP 21
13646: PUSH
13647: LD_VAR 0 3
13651: ARRAY
13652: NONEQUAL
13653: PUSH
13654: LD_EXP 25
13658: NOT
13659: PUSH
13660: LD_EXP 29
13664: PUSH
13665: LD_VAR 0 2
13669: ARRAY
13670: PUSH
13671: LD_VAR 0 3
13675: NONEQUAL
13676: AND
13677: OR
13678: AND
13679: IFFALSE 13703
// ShowArea ( j , BuildUpAreas [ i ] ) else
13681: LD_VAR 0 3
13685: PPUSH
13686: LD_EXP 47
13690: PUSH
13691: LD_VAR 0 2
13695: ARRAY
13696: PPUSH
13697: CALL_OW 334
13701: GO 13733
// if ( j = your_side ) then
13703: LD_VAR 0 3
13707: PUSH
13708: LD_OWVAR 2
13712: EQUAL
13713: IFFALSE 13733
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13715: LD_EXP 47
13719: PUSH
13720: LD_VAR 0 2
13724: ARRAY
13725: PPUSH
13726: LD_INT 0
13728: PPUSH
13729: CALL_OW 424
13733: GO 13611
13735: POP
13736: POP
13737: GO 13583
13739: POP
13740: POP
// end ;
13741: LD_VAR 0 1
13745: RET
// every 5 marked 600 do var i , un ;
13746: GO 13748
13748: DISABLE
13749: LD_INT 0
13751: PPUSH
13752: PPUSH
// begin for i := 1 to BuildUpAreas do
13753: LD_ADDR_VAR 0 1
13757: PUSH
13758: DOUBLE
13759: LD_INT 1
13761: DEC
13762: ST_TO_ADDR
13763: LD_EXP 47
13767: PUSH
13768: FOR_TO
13769: IFFALSE 13924
// if Position_Sides [ i ] then
13771: LD_EXP 29
13775: PUSH
13776: LD_VAR 0 1
13780: ARRAY
13781: IFFALSE 13922
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13783: LD_ADDR_VAR 0 2
13787: PUSH
13788: LD_EXP 47
13792: PUSH
13793: LD_VAR 0 1
13797: ARRAY
13798: PPUSH
13799: LD_INT 2
13801: PUSH
13802: LD_INT 21
13804: PUSH
13805: LD_INT 1
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 21
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 22
13829: PUSH
13830: LD_OWVAR 2
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PPUSH
13843: CALL_OW 70
13847: PUSH
13848: FOR_IN
13849: IFFALSE 13920
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
13851: LD_EXP 21
13855: PUSH
13856: LD_EXP 29
13860: PUSH
13861: LD_VAR 0 1
13865: ARRAY
13866: ARRAY
13867: PUSH
13868: LD_EXP 21
13872: PUSH
13873: LD_OWVAR 2
13877: ARRAY
13878: NONEQUAL
13879: PUSH
13880: LD_EXP 25
13884: NOT
13885: PUSH
13886: LD_EXP 29
13890: PUSH
13891: LD_VAR 0 1
13895: ARRAY
13896: PUSH
13897: LD_OWVAR 2
13901: NONEQUAL
13902: AND
13903: OR
13904: IFFALSE 13918
// ComMoveToArea ( un , BuildUpEscape ) ;
13906: LD_VAR 0 2
13910: PPUSH
13911: LD_INT 24
13913: PPUSH
13914: CALL_OW 113
13918: GO 13848
13920: POP
13921: POP
13922: GO 13768
13924: POP
13925: POP
// enable ;
13926: ENABLE
// end ;
13927: PPOPN 2
13929: END
// every 5 5$00 do
13930: GO 13932
13932: DISABLE
// if ( def_builduptime = 1 ) then
13933: LD_EXP 63
13937: PUSH
13938: LD_INT 1
13940: EQUAL
13941: IFFALSE 13947
// EndBuildUp ;
13943: CALL 13560 0 0
13947: END
// every 10 10$00 do
13948: GO 13950
13950: DISABLE
// if ( def_builduptime = 2 ) then
13951: LD_EXP 63
13955: PUSH
13956: LD_INT 2
13958: EQUAL
13959: IFFALSE 13965
// EndBuildUp ;
13961: CALL 13560 0 0
13965: END
// every 15 15$00 do
13966: GO 13968
13968: DISABLE
// if ( def_builduptime = 3 ) then
13969: LD_EXP 63
13973: PUSH
13974: LD_INT 3
13976: EQUAL
13977: IFFALSE 13983
// EndBuildUp ; end_of_file
13979: CALL 13560 0 0
13983: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13984: LD_INT 0
13986: PPUSH
13987: PPUSH
// if ( not IAmSpec ) then
13988: CALL_OW 531
13992: NOT
13993: IFFALSE 14009
// Result := Limits_Info ^  ;
13995: LD_ADDR_VAR 0 1
13999: PUSH
14000: LD_LOC 26
14004: PUSH
14005: LD_STRING 
14007: ADD
14008: ST_TO_ADDR
// for i := 1 to 8 do
14009: LD_ADDR_VAR 0 2
14013: PUSH
14014: DOUBLE
14015: LD_INT 1
14017: DEC
14018: ST_TO_ADDR
14019: LD_INT 8
14021: PUSH
14022: FOR_TO
14023: IFFALSE 14068
// if Cheaters [ i ] then
14025: LD_LOC 27
14029: PUSH
14030: LD_VAR 0 2
14034: ARRAY
14035: IFFALSE 14066
// Result := Result ^ [ #Cheater , i , i ] ;
14037: LD_ADDR_VAR 0 1
14041: PUSH
14042: LD_VAR 0 1
14046: PUSH
14047: LD_STRING #Cheater
14049: PUSH
14050: LD_VAR 0 2
14054: PUSH
14055: LD_VAR 0 2
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: LIST
14064: ADD
14065: ST_TO_ADDR
14066: GO 14022
14068: POP
14069: POP
// end ;
14070: LD_VAR 0 1
14074: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14075: LD_INT 0
14077: PPUSH
14078: PPUSH
14079: PPUSH
14080: PPUSH
14081: PPUSH
// case Game_Type of 10 :
14082: LD_EXP 48
14086: PUSH
14087: LD_INT 10
14089: DOUBLE
14090: EQUAL
14091: IFTRUE 14095
14093: GO 14106
14095: POP
// def_game_rules := 1 ; 11 :
14096: LD_ADDR_EXP 49
14100: PUSH
14101: LD_INT 1
14103: ST_TO_ADDR
14104: GO 14126
14106: LD_INT 11
14108: DOUBLE
14109: EQUAL
14110: IFTRUE 14114
14112: GO 14125
14114: POP
// def_game_rules := 3 ; end ;
14115: LD_ADDR_EXP 49
14119: PUSH
14120: LD_INT 3
14122: ST_TO_ADDR
14123: GO 14126
14125: POP
// case def_game_rules of 0 :
14126: LD_EXP 49
14130: PUSH
14131: LD_INT 0
14133: DOUBLE
14134: EQUAL
14135: IFTRUE 14139
14137: GO 14144
14139: POP
// exit ; 1 :
14140: GO 16202
14142: GO 16102
14144: LD_INT 1
14146: DOUBLE
14147: EQUAL
14148: IFTRUE 14152
14150: GO 14368
14152: POP
// begin def_base_level := 2 ;
14153: LD_ADDR_EXP 50
14157: PUSH
14158: LD_INT 2
14160: ST_TO_ADDR
// def_amount_of_people := 2 ;
14161: LD_ADDR_EXP 51
14165: PUSH
14166: LD_INT 2
14168: ST_TO_ADDR
// def_skill_level := 1 ;
14169: LD_ADDR_EXP 52
14173: PUSH
14174: LD_INT 1
14176: ST_TO_ADDR
// def_starting_resources := 2 ;
14177: LD_ADDR_EXP 53
14181: PUSH
14182: LD_INT 2
14184: ST_TO_ADDR
// def_shipments_density := 1 ;
14185: LD_ADDR_EXP 54
14189: PUSH
14190: LD_INT 1
14192: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14193: LD_ADDR_EXP 55
14197: PUSH
14198: LD_INT 0
14200: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14201: LD_ADDR_EXP 56
14205: PUSH
14206: LD_INT 1
14208: ST_TO_ADDR
// def_shared_vision := 1 ;
14209: LD_ADDR_EXP 57
14213: PUSH
14214: LD_INT 1
14216: ST_TO_ADDR
// def_morale_flags := 3 ;
14217: LD_ADDR_EXP 58
14221: PUSH
14222: LD_INT 3
14224: ST_TO_ADDR
// def_siberite_detection := 1 ;
14225: LD_ADDR_EXP 59
14229: PUSH
14230: LD_INT 1
14232: ST_TO_ADDR
// def_people_respawning := 1 ;
14233: LD_ADDR_EXP 60
14237: PUSH
14238: LD_INT 1
14240: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14241: LD_ADDR_EXP 61
14245: PUSH
14246: LD_INT 1
14248: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14249: LD_ADDR_EXP 62
14253: PUSH
14254: LD_INT 0
14256: ST_TO_ADDR
// def_builduptime := 2 ;
14257: LD_ADDR_EXP 63
14261: PUSH
14262: LD_INT 2
14264: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14265: LD_ADDR_VAR 0 2
14269: PUSH
14270: EMPTY
14271: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14272: LD_ADDR_VAR 0 3
14276: PUSH
14277: EMPTY
14278: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14279: LD_ADDR_LOC 21
14283: PUSH
14284: EMPTY
14285: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14286: LD_ADDR_LOC 22
14290: PUSH
14291: EMPTY
14292: ST_TO_ADDR
// Banned_Controls := [ ] ;
14293: LD_ADDR_LOC 23
14297: PUSH
14298: EMPTY
14299: ST_TO_ADDR
// Banned_Engines := [ ] ;
14300: LD_ADDR_LOC 24
14304: PUSH
14305: EMPTY
14306: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14307: LD_ADDR_LOC 19
14311: PUSH
14312: LD_INT 37
14314: PUSH
14315: EMPTY
14316: LIST
14317: PUSH
14318: LD_INT 4
14320: PUSH
14321: LD_INT 5
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 31
14330: PUSH
14331: LD_INT 32
14333: PUSH
14334: LD_INT 33
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14347: LD_ADDR_LOC 20
14351: PUSH
14352: LD_INT 2
14354: PUSH
14355: LD_INT 2
14357: PUSH
14358: LD_INT 4
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: LIST
14365: ST_TO_ADDR
// end ; 2 :
14366: GO 16102
14368: LD_INT 2
14370: DOUBLE
14371: EQUAL
14372: IFTRUE 14376
14374: GO 14585
14376: POP
// begin def_base_level := 1 ;
14377: LD_ADDR_EXP 50
14381: PUSH
14382: LD_INT 1
14384: ST_TO_ADDR
// def_amount_of_people := 2 ;
14385: LD_ADDR_EXP 51
14389: PUSH
14390: LD_INT 2
14392: ST_TO_ADDR
// def_skill_level := 3 ;
14393: LD_ADDR_EXP 52
14397: PUSH
14398: LD_INT 3
14400: ST_TO_ADDR
// def_starting_resources := 3 ;
14401: LD_ADDR_EXP 53
14405: PUSH
14406: LD_INT 3
14408: ST_TO_ADDR
// def_shipments_density := 2 ;
14409: LD_ADDR_EXP 54
14413: PUSH
14414: LD_INT 2
14416: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14417: LD_ADDR_EXP 55
14421: PUSH
14422: LD_INT 1
14424: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14425: LD_ADDR_EXP 56
14429: PUSH
14430: LD_INT 2
14432: ST_TO_ADDR
// def_shared_vision := 1 ;
14433: LD_ADDR_EXP 57
14437: PUSH
14438: LD_INT 1
14440: ST_TO_ADDR
// def_morale_flags := 0 ;
14441: LD_ADDR_EXP 58
14445: PUSH
14446: LD_INT 0
14448: ST_TO_ADDR
// def_siberite_detection := 1 ;
14449: LD_ADDR_EXP 59
14453: PUSH
14454: LD_INT 1
14456: ST_TO_ADDR
// def_people_respawning := 0 ;
14457: LD_ADDR_EXP 60
14461: PUSH
14462: LD_INT 0
14464: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14465: LD_ADDR_EXP 61
14469: PUSH
14470: LD_INT 0
14472: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14473: LD_ADDR_EXP 62
14477: PUSH
14478: LD_INT 0
14480: ST_TO_ADDR
// def_builduptime := 2 ;
14481: LD_ADDR_EXP 63
14485: PUSH
14486: LD_INT 2
14488: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14489: LD_ADDR_VAR 0 2
14493: PUSH
14494: LD_INT 1
14496: PUSH
14497: EMPTY
14498: LIST
14499: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14500: LD_ADDR_VAR 0 3
14504: PUSH
14505: EMPTY
14506: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14507: LD_ADDR_LOC 21
14511: PUSH
14512: EMPTY
14513: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14514: LD_ADDR_LOC 22
14518: PUSH
14519: EMPTY
14520: ST_TO_ADDR
// Banned_Controls := [ ] ;
14521: LD_ADDR_LOC 23
14525: PUSH
14526: EMPTY
14527: ST_TO_ADDR
// Banned_Engines := [ ] ;
14528: LD_ADDR_LOC 24
14532: PUSH
14533: EMPTY
14534: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14535: LD_ADDR_LOC 19
14539: PUSH
14540: LD_INT 4
14542: PUSH
14543: LD_INT 5
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: LD_INT 31
14552: PUSH
14553: LD_INT 32
14555: PUSH
14556: LD_INT 33
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
14568: LD_ADDR_LOC 20
14572: PUSH
14573: LD_INT 1
14575: PUSH
14576: LD_INT 2
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: ST_TO_ADDR
// end ; 3 :
14583: GO 16102
14585: LD_INT 3
14587: DOUBLE
14588: EQUAL
14589: IFTRUE 14593
14591: GO 14836
14593: POP
// begin def_base_level := 1 ;
14594: LD_ADDR_EXP 50
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
// def_amount_of_people := 2 ;
14602: LD_ADDR_EXP 51
14606: PUSH
14607: LD_INT 2
14609: ST_TO_ADDR
// def_skill_level := 3 ;
14610: LD_ADDR_EXP 52
14614: PUSH
14615: LD_INT 3
14617: ST_TO_ADDR
// def_starting_resources := 3 ;
14618: LD_ADDR_EXP 53
14622: PUSH
14623: LD_INT 3
14625: ST_TO_ADDR
// def_shipments_density := 1 ;
14626: LD_ADDR_EXP 54
14630: PUSH
14631: LD_INT 1
14633: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14634: LD_ADDR_EXP 55
14638: PUSH
14639: LD_INT 0
14641: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14642: LD_ADDR_EXP 56
14646: PUSH
14647: LD_INT 1
14649: ST_TO_ADDR
// def_shared_vision := 1 ;
14650: LD_ADDR_EXP 57
14654: PUSH
14655: LD_INT 1
14657: ST_TO_ADDR
// def_morale_flags := 0 ;
14658: LD_ADDR_EXP 58
14662: PUSH
14663: LD_INT 0
14665: ST_TO_ADDR
// def_siberite_detection := 1 ;
14666: LD_ADDR_EXP 59
14670: PUSH
14671: LD_INT 1
14673: ST_TO_ADDR
// def_people_respawning := 0 ;
14674: LD_ADDR_EXP 60
14678: PUSH
14679: LD_INT 0
14681: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14682: LD_ADDR_EXP 61
14686: PUSH
14687: LD_INT 2
14689: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14690: LD_ADDR_EXP 62
14694: PUSH
14695: LD_INT 0
14697: ST_TO_ADDR
// def_builduptime := 1 ;
14698: LD_ADDR_EXP 63
14702: PUSH
14703: LD_INT 1
14705: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14706: LD_ADDR_VAR 0 2
14710: PUSH
14711: LD_INT 23
14713: PUSH
14714: EMPTY
14715: LIST
14716: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14717: LD_ADDR_VAR 0 3
14721: PUSH
14722: LD_INT 2
14724: PUSH
14725: LD_INT 37
14727: PUSH
14728: LD_INT 32
14730: PUSH
14731: LD_INT 33
14733: PUSH
14734: LD_INT 36
14736: PUSH
14737: LD_INT 16
14739: PUSH
14740: LD_INT 23
14742: PUSH
14743: LD_INT 21
14745: PUSH
14746: LD_INT 18
14748: PUSH
14749: LD_INT 22
14751: PUSH
14752: LD_INT 20
14754: PUSH
14755: LD_INT 19
14757: PUSH
14758: LD_INT 25
14760: PUSH
14761: LD_INT 17
14763: PUSH
14764: LD_INT 24
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14784: LD_ADDR_LOC 21
14788: PUSH
14789: EMPTY
14790: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14791: LD_ADDR_LOC 22
14795: PUSH
14796: EMPTY
14797: ST_TO_ADDR
// Banned_Controls := [ ] ;
14798: LD_ADDR_LOC 23
14802: PUSH
14803: EMPTY
14804: ST_TO_ADDR
// Banned_Engines := [ ] ;
14805: LD_ADDR_LOC 24
14809: PUSH
14810: EMPTY
14811: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14812: LD_ADDR_LOC 19
14816: PUSH
14817: EMPTY
14818: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14819: LD_ADDR_LOC 20
14823: PUSH
14824: EMPTY
14825: ST_TO_ADDR
// No_Mechs := true ;
14826: LD_ADDR_EXP 64
14830: PUSH
14831: LD_INT 1
14833: ST_TO_ADDR
// end ; 4 :
14834: GO 16102
14836: LD_INT 4
14838: DOUBLE
14839: EQUAL
14840: IFTRUE 14844
14842: GO 15019
14844: POP
// begin def_base_level := 1 ;
14845: LD_ADDR_EXP 50
14849: PUSH
14850: LD_INT 1
14852: ST_TO_ADDR
// def_amount_of_people := 2 ;
14853: LD_ADDR_EXP 51
14857: PUSH
14858: LD_INT 2
14860: ST_TO_ADDR
// def_skill_level := 3 ;
14861: LD_ADDR_EXP 52
14865: PUSH
14866: LD_INT 3
14868: ST_TO_ADDR
// def_starting_resources := 3 ;
14869: LD_ADDR_EXP 53
14873: PUSH
14874: LD_INT 3
14876: ST_TO_ADDR
// def_shipments_density := 2 ;
14877: LD_ADDR_EXP 54
14881: PUSH
14882: LD_INT 2
14884: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14885: LD_ADDR_EXP 55
14889: PUSH
14890: LD_INT 1
14892: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14893: LD_ADDR_EXP 56
14897: PUSH
14898: LD_INT 2
14900: ST_TO_ADDR
// def_shared_vision := 1 ;
14901: LD_ADDR_EXP 57
14905: PUSH
14906: LD_INT 1
14908: ST_TO_ADDR
// def_morale_flags := 0 ;
14909: LD_ADDR_EXP 58
14913: PUSH
14914: LD_INT 0
14916: ST_TO_ADDR
// def_siberite_detection := 1 ;
14917: LD_ADDR_EXP 59
14921: PUSH
14922: LD_INT 1
14924: ST_TO_ADDR
// def_people_respawning := 0 ;
14925: LD_ADDR_EXP 60
14929: PUSH
14930: LD_INT 0
14932: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14933: LD_ADDR_EXP 61
14937: PUSH
14938: LD_INT 0
14940: ST_TO_ADDR
// def_siberite_bomb := 1 ;
14941: LD_ADDR_EXP 62
14945: PUSH
14946: LD_INT 1
14948: ST_TO_ADDR
// def_builduptime := 3 ;
14949: LD_ADDR_EXP 63
14953: PUSH
14954: LD_INT 3
14956: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14957: LD_ADDR_VAR 0 2
14961: PUSH
14962: LD_INT 1
14964: PUSH
14965: EMPTY
14966: LIST
14967: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14968: LD_ADDR_VAR 0 3
14972: PUSH
14973: EMPTY
14974: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14975: LD_ADDR_LOC 21
14979: PUSH
14980: EMPTY
14981: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14982: LD_ADDR_LOC 22
14986: PUSH
14987: EMPTY
14988: ST_TO_ADDR
// Banned_Controls := [ ] ;
14989: LD_ADDR_LOC 23
14993: PUSH
14994: EMPTY
14995: ST_TO_ADDR
// Banned_Engines := [ ] ;
14996: LD_ADDR_LOC 24
15000: PUSH
15001: EMPTY
15002: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15003: LD_ADDR_LOC 19
15007: PUSH
15008: EMPTY
15009: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15010: LD_ADDR_LOC 20
15014: PUSH
15015: EMPTY
15016: ST_TO_ADDR
// end ; 5 :
15017: GO 16102
15019: LD_INT 5
15021: DOUBLE
15022: EQUAL
15023: IFTRUE 15027
15025: GO 15276
15027: POP
// begin def_base_level := 0 ;
15028: LD_ADDR_EXP 50
15032: PUSH
15033: LD_INT 0
15035: ST_TO_ADDR
// def_amount_of_people := 0 ;
15036: LD_ADDR_EXP 51
15040: PUSH
15041: LD_INT 0
15043: ST_TO_ADDR
// def_skill_level := 0 ;
15044: LD_ADDR_EXP 52
15048: PUSH
15049: LD_INT 0
15051: ST_TO_ADDR
// def_starting_resources := 0 ;
15052: LD_ADDR_EXP 53
15056: PUSH
15057: LD_INT 0
15059: ST_TO_ADDR
// def_shipments_density := 0 ;
15060: LD_ADDR_EXP 54
15064: PUSH
15065: LD_INT 0
15067: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15068: LD_ADDR_EXP 55
15072: PUSH
15073: LD_INT 0
15075: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15076: LD_ADDR_EXP 56
15080: PUSH
15081: LD_INT 0
15083: ST_TO_ADDR
// def_shared_vision := 1 ;
15084: LD_ADDR_EXP 57
15088: PUSH
15089: LD_INT 1
15091: ST_TO_ADDR
// def_morale_flags := 0 ;
15092: LD_ADDR_EXP 58
15096: PUSH
15097: LD_INT 0
15099: ST_TO_ADDR
// def_siberite_detection := 0 ;
15100: LD_ADDR_EXP 59
15104: PUSH
15105: LD_INT 0
15107: ST_TO_ADDR
// def_people_respawning := 1 ;
15108: LD_ADDR_EXP 60
15112: PUSH
15113: LD_INT 1
15115: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15116: LD_ADDR_EXP 61
15120: PUSH
15121: LD_INT 1
15123: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15124: LD_ADDR_EXP 62
15128: PUSH
15129: LD_INT 0
15131: ST_TO_ADDR
// def_builduptime := 0 ;
15132: LD_ADDR_EXP 63
15136: PUSH
15137: LD_INT 0
15139: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
15140: LD_ADDR_VAR 0 2
15144: PUSH
15145: LD_INT 10
15147: PUSH
15148: LD_INT 3
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
15155: LD_ADDR_VAR 0 3
15159: PUSH
15160: LD_INT 12
15162: PUSH
15163: LD_INT 11
15165: PUSH
15166: LD_INT 14
15168: PUSH
15169: LD_INT 13
15171: PUSH
15172: LD_INT 5
15174: PUSH
15175: LD_INT 24
15177: PUSH
15178: LD_INT 21
15180: PUSH
15181: LD_INT 33
15183: PUSH
15184: LD_INT 36
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
15198: LD_ADDR_LOC 21
15202: PUSH
15203: LD_INT 31
15205: PUSH
15206: EMPTY
15207: LIST
15208: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15209: LD_ADDR_LOC 22
15213: PUSH
15214: EMPTY
15215: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
15216: LD_ADDR_LOC 23
15220: PUSH
15221: LD_INT 2
15223: PUSH
15224: EMPTY
15225: LIST
15226: ST_TO_ADDR
// Banned_Engines := [ ] ;
15227: LD_ADDR_LOC 24
15231: PUSH
15232: EMPTY
15233: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
15234: LD_ADDR_LOC 19
15238: PUSH
15239: LD_INT 4
15241: PUSH
15242: EMPTY
15243: LIST
15244: PUSH
15245: LD_INT 31
15247: PUSH
15248: LD_INT 32
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
15259: LD_ADDR_LOC 20
15263: PUSH
15264: LD_INT 1
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: ST_TO_ADDR
// end ; 6 :
15274: GO 16102
15276: LD_INT 6
15278: DOUBLE
15279: EQUAL
15280: IFTRUE 15284
15282: GO 15487
15284: POP
// begin def_base_level := 1 ;
15285: LD_ADDR_EXP 50
15289: PUSH
15290: LD_INT 1
15292: ST_TO_ADDR
// def_amount_of_people := 2 ;
15293: LD_ADDR_EXP 51
15297: PUSH
15298: LD_INT 2
15300: ST_TO_ADDR
// def_skill_level := 3 ;
15301: LD_ADDR_EXP 52
15305: PUSH
15306: LD_INT 3
15308: ST_TO_ADDR
// def_starting_resources := 3 ;
15309: LD_ADDR_EXP 53
15313: PUSH
15314: LD_INT 3
15316: ST_TO_ADDR
// def_shipments_density := 1 ;
15317: LD_ADDR_EXP 54
15321: PUSH
15322: LD_INT 1
15324: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15325: LD_ADDR_EXP 55
15329: PUSH
15330: LD_INT 0
15332: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15333: LD_ADDR_EXP 56
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// def_shared_vision := 1 ;
15341: LD_ADDR_EXP 57
15345: PUSH
15346: LD_INT 1
15348: ST_TO_ADDR
// def_morale_flags := 0 ;
15349: LD_ADDR_EXP 58
15353: PUSH
15354: LD_INT 0
15356: ST_TO_ADDR
// def_siberite_detection := 1 ;
15357: LD_ADDR_EXP 59
15361: PUSH
15362: LD_INT 1
15364: ST_TO_ADDR
// def_people_respawning := 2 ;
15365: LD_ADDR_EXP 60
15369: PUSH
15370: LD_INT 2
15372: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15373: LD_ADDR_EXP 61
15377: PUSH
15378: LD_INT 1
15380: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15381: LD_ADDR_EXP 62
15385: PUSH
15386: LD_INT 0
15388: ST_TO_ADDR
// def_builduptime := 1 ;
15389: LD_ADDR_EXP 63
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15397: LD_ADDR_VAR 0 2
15401: PUSH
15402: LD_INT 23
15404: PUSH
15405: EMPTY
15406: LIST
15407: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
15408: LD_ADDR_VAR 0 3
15412: PUSH
15413: LD_INT 2
15415: PUSH
15416: LD_INT 37
15418: PUSH
15419: LD_INT 31
15421: PUSH
15422: LD_INT 32
15424: PUSH
15425: LD_INT 33
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15435: LD_ADDR_LOC 21
15439: PUSH
15440: EMPTY
15441: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15442: LD_ADDR_LOC 22
15446: PUSH
15447: EMPTY
15448: ST_TO_ADDR
// Banned_Controls := [ ] ;
15449: LD_ADDR_LOC 23
15453: PUSH
15454: EMPTY
15455: ST_TO_ADDR
// Banned_Engines := [ ] ;
15456: LD_ADDR_LOC 24
15460: PUSH
15461: EMPTY
15462: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15463: LD_ADDR_LOC 19
15467: PUSH
15468: EMPTY
15469: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15470: LD_ADDR_LOC 20
15474: PUSH
15475: EMPTY
15476: ST_TO_ADDR
// No_Mechs := true ;
15477: LD_ADDR_EXP 64
15481: PUSH
15482: LD_INT 1
15484: ST_TO_ADDR
// end ; 7 :
15485: GO 16102
15487: LD_INT 7
15489: DOUBLE
15490: EQUAL
15491: IFTRUE 15495
15493: GO 15693
15495: POP
// begin def_base_level := 1 ;
15496: LD_ADDR_EXP 50
15500: PUSH
15501: LD_INT 1
15503: ST_TO_ADDR
// def_amount_of_people := 2 ;
15504: LD_ADDR_EXP 51
15508: PUSH
15509: LD_INT 2
15511: ST_TO_ADDR
// def_skill_level := 3 ;
15512: LD_ADDR_EXP 52
15516: PUSH
15517: LD_INT 3
15519: ST_TO_ADDR
// def_starting_resources := 3 ;
15520: LD_ADDR_EXP 53
15524: PUSH
15525: LD_INT 3
15527: ST_TO_ADDR
// def_shipments_density := 1 ;
15528: LD_ADDR_EXP 54
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15536: LD_ADDR_EXP 55
15540: PUSH
15541: LD_INT 1
15543: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15544: LD_ADDR_EXP 56
15548: PUSH
15549: LD_INT 2
15551: ST_TO_ADDR
// def_shared_vision := 1 ;
15552: LD_ADDR_EXP 57
15556: PUSH
15557: LD_INT 1
15559: ST_TO_ADDR
// def_morale_flags := 0 ;
15560: LD_ADDR_EXP 58
15564: PUSH
15565: LD_INT 0
15567: ST_TO_ADDR
// def_siberite_detection := 1 ;
15568: LD_ADDR_EXP 59
15572: PUSH
15573: LD_INT 1
15575: ST_TO_ADDR
// def_people_respawning := 0 ;
15576: LD_ADDR_EXP 60
15580: PUSH
15581: LD_INT 0
15583: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15584: LD_ADDR_EXP 61
15588: PUSH
15589: LD_INT 1
15591: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15592: LD_ADDR_EXP 62
15596: PUSH
15597: LD_INT 0
15599: ST_TO_ADDR
// def_builduptime := 3 ;
15600: LD_ADDR_EXP 63
15604: PUSH
15605: LD_INT 3
15607: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15608: LD_ADDR_VAR 0 2
15612: PUSH
15613: LD_INT 23
15615: PUSH
15616: EMPTY
15617: LIST
15618: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
15619: LD_ADDR_VAR 0 3
15623: PUSH
15624: LD_INT 37
15626: PUSH
15627: EMPTY
15628: LIST
15629: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15630: LD_ADDR_LOC 21
15634: PUSH
15635: EMPTY
15636: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15637: LD_ADDR_LOC 22
15641: PUSH
15642: EMPTY
15643: ST_TO_ADDR
// Banned_Controls := [ ] ;
15644: LD_ADDR_LOC 23
15648: PUSH
15649: EMPTY
15650: ST_TO_ADDR
// Banned_Engines := [ ] ;
15651: LD_ADDR_LOC 24
15655: PUSH
15656: EMPTY
15657: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15658: LD_ADDR_LOC 19
15662: PUSH
15663: LD_INT 31
15665: PUSH
15666: LD_INT 32
15668: PUSH
15669: LD_INT 33
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
15680: LD_ADDR_LOC 20
15684: PUSH
15685: LD_INT 10
15687: PUSH
15688: EMPTY
15689: LIST
15690: ST_TO_ADDR
// end ; 8 :
15691: GO 16102
15693: LD_INT 8
15695: DOUBLE
15696: EQUAL
15697: IFTRUE 15701
15699: GO 16101
15701: POP
// begin def_base_level := 0 ;
15702: LD_ADDR_EXP 50
15706: PUSH
15707: LD_INT 0
15709: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
15710: LD_ADDR_EXP 51
15714: PUSH
15715: LD_INT 0
15717: PPUSH
15718: LD_INT 1
15720: PPUSH
15721: CALL_OW 12
15725: ST_TO_ADDR
// def_skill_level := 0 ;
15726: LD_ADDR_EXP 52
15730: PUSH
15731: LD_INT 0
15733: ST_TO_ADDR
// def_starting_resources := 2 ;
15734: LD_ADDR_EXP 53
15738: PUSH
15739: LD_INT 2
15741: ST_TO_ADDR
// def_shipments_density := 1 ;
15742: LD_ADDR_EXP 54
15746: PUSH
15747: LD_INT 1
15749: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15750: LD_ADDR_EXP 55
15754: PUSH
15755: LD_INT 0
15757: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15758: LD_ADDR_EXP 56
15762: PUSH
15763: LD_INT 0
15765: ST_TO_ADDR
// def_shared_vision := 1 ;
15766: LD_ADDR_EXP 57
15770: PUSH
15771: LD_INT 1
15773: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
15774: LD_ADDR_EXP 58
15778: PUSH
15779: LD_INT 0
15781: PPUSH
15782: LD_INT 2
15784: PPUSH
15785: CALL_OW 12
15789: ST_TO_ADDR
// def_siberite_detection := 0 ;
15790: LD_ADDR_EXP 59
15794: PUSH
15795: LD_INT 0
15797: ST_TO_ADDR
// def_people_respawning := 0 ;
15798: LD_ADDR_EXP 60
15802: PUSH
15803: LD_INT 0
15805: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
15806: LD_ADDR_EXP 61
15810: PUSH
15811: LD_INT 2
15813: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15814: LD_ADDR_EXP 62
15818: PUSH
15819: LD_INT 0
15821: ST_TO_ADDR
// def_builduptime := 0 ;
15822: LD_ADDR_EXP 63
15826: PUSH
15827: LD_INT 0
15829: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
15830: LD_ADDR_VAR 0 2
15834: PUSH
15835: LD_INT 23
15837: PUSH
15838: LD_INT 20
15840: PUSH
15841: LD_INT 40
15843: PUSH
15844: LD_INT 47
15846: PUSH
15847: LD_INT 46
15849: PUSH
15850: LD_INT 39
15852: PUSH
15853: LD_INT 71
15855: PUSH
15856: LD_INT 34
15858: PUSH
15859: LD_INT 41
15861: PUSH
15862: LD_INT 44
15864: PUSH
15865: LD_INT 17
15867: PUSH
15868: LD_INT 16
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
15885: LD_ADDR_VAR 0 3
15889: PUSH
15890: LD_INT 37
15892: PUSH
15893: LD_INT 5
15895: PUSH
15896: LD_INT 13
15898: PUSH
15899: LD_INT 34
15901: PUSH
15902: LD_INT 12
15904: PUSH
15905: LD_INT 15
15907: PUSH
15908: LD_INT 11
15910: PUSH
15911: LD_INT 14
15913: PUSH
15914: LD_INT 29
15916: PUSH
15917: LD_INT 30
15919: PUSH
15920: LD_INT 28
15922: PUSH
15923: LD_INT 24
15925: PUSH
15926: LD_INT 25
15928: PUSH
15929: LD_INT 20
15931: PUSH
15932: LD_INT 21
15934: PUSH
15935: LD_INT 22
15937: PUSH
15938: LD_INT 36
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15960: LD_ADDR_LOC 21
15964: PUSH
15965: EMPTY
15966: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
15967: LD_ADDR_LOC 22
15971: PUSH
15972: LD_INT 14
15974: PUSH
15975: EMPTY
15976: LIST
15977: ST_TO_ADDR
// Banned_Controls := [ ] ;
15978: LD_ADDR_LOC 23
15982: PUSH
15983: EMPTY
15984: ST_TO_ADDR
// Banned_Engines := [ ] ;
15985: LD_ADDR_LOC 24
15989: PUSH
15990: EMPTY
15991: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
15992: LD_ADDR_LOC 19
15996: PUSH
15997: LD_INT 31
15999: PUSH
16000: LD_INT 32
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 4
16009: PUSH
16010: EMPTY
16011: LIST
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
16017: LD_ADDR_LOC 20
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: ST_TO_ADDR
// for i := 1 to 8 do
16032: LD_ADDR_VAR 0 4
16036: PUSH
16037: DOUBLE
16038: LD_INT 1
16040: DEC
16041: ST_TO_ADDR
16042: LD_INT 8
16044: PUSH
16045: FOR_TO
16046: IFFALSE 16097
// if ( Side_Nations [ i ] = 3 ) then
16048: LD_EXP 24
16052: PUSH
16053: LD_VAR 0 4
16057: ARRAY
16058: PUSH
16059: LD_INT 3
16061: EQUAL
16062: IFFALSE 16095
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
16064: LD_ADDR_EXP 24
16068: PUSH
16069: LD_EXP 24
16073: PPUSH
16074: LD_VAR 0 4
16078: PPUSH
16079: LD_INT 1
16081: PPUSH
16082: LD_INT 2
16084: PPUSH
16085: CALL_OW 12
16089: PPUSH
16090: CALL_OW 1
16094: ST_TO_ADDR
16095: GO 16045
16097: POP
16098: POP
// end ; end ;
16099: GO 16102
16101: POP
// for i := 1 to 8 do
16102: LD_ADDR_VAR 0 4
16106: PUSH
16107: DOUBLE
16108: LD_INT 1
16110: DEC
16111: ST_TO_ADDR
16112: LD_INT 8
16114: PUSH
16115: FOR_TO
16116: IFFALSE 16200
// if Side_Positions [ i ] then
16118: LD_EXP 23
16122: PUSH
16123: LD_VAR 0 4
16127: ARRAY
16128: IFFALSE 16198
// begin for j in Unavailable_Techs do
16130: LD_ADDR_VAR 0 5
16134: PUSH
16135: LD_VAR 0 2
16139: PUSH
16140: FOR_IN
16141: IFFALSE 16162
// SetTech ( j , i , 0 ) ;
16143: LD_VAR 0 5
16147: PPUSH
16148: LD_VAR 0 4
16152: PPUSH
16153: LD_INT 0
16155: PPUSH
16156: CALL_OW 322
16160: GO 16140
16162: POP
16163: POP
// for j in Unavailable_Builds do
16164: LD_ADDR_VAR 0 5
16168: PUSH
16169: LD_VAR 0 3
16173: PUSH
16174: FOR_IN
16175: IFFALSE 16196
// SetRestrict ( j , i , 0 ) ;
16177: LD_VAR 0 5
16181: PPUSH
16182: LD_VAR 0 4
16186: PPUSH
16187: LD_INT 0
16189: PPUSH
16190: CALL_OW 324
16194: GO 16174
16196: POP
16197: POP
// end ;
16198: GO 16115
16200: POP
16201: POP
// end ;
16202: LD_VAR 0 1
16206: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
16207: LD_INT 0
16209: PPUSH
16210: PPUSH
16211: PPUSH
16212: PPUSH
16213: PPUSH
16214: PPUSH
16215: PPUSH
// for i := 1 to Restricted_Builds do
16216: LD_ADDR_VAR 0 2
16220: PUSH
16221: DOUBLE
16222: LD_INT 1
16224: DEC
16225: ST_TO_ADDR
16226: LD_LOC 19
16230: PUSH
16231: FOR_TO
16232: IFFALSE 16542
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
16234: LD_LOC 19
16238: PUSH
16239: LD_VAR 0 2
16243: ARRAY
16244: PUSH
16245: LD_INT 1
16247: ARRAY
16248: PUSH
16249: LD_INT 31
16251: DOUBLE
16252: EQUAL
16253: IFTRUE 16269
16255: LD_INT 32
16257: DOUBLE
16258: EQUAL
16259: IFTRUE 16269
16261: LD_INT 33
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16280
16269: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
16270: LD_ADDR_VAR 0 6
16274: PUSH
16275: LD_STRING #Turrets
16277: ST_TO_ADDR
16278: GO 16325
16280: LD_INT 4
16282: DOUBLE
16283: EQUAL
16284: IFTRUE 16294
16286: LD_INT 5
16288: DOUBLE
16289: EQUAL
16290: IFTRUE 16294
16292: GO 16305
16294: POP
// btype := #Armouries ; b_Behemoth :
16295: LD_ADDR_VAR 0 6
16299: PUSH
16300: LD_STRING #Armouries
16302: ST_TO_ADDR
16303: GO 16325
16305: LD_INT 37
16307: DOUBLE
16308: EQUAL
16309: IFTRUE 16313
16311: GO 16324
16313: POP
// btype := #Behemoths ; end ;
16314: LD_ADDR_VAR 0 6
16318: PUSH
16319: LD_STRING #Behemoths
16321: ST_TO_ADDR
16322: GO 16325
16324: POP
// list := [ ] ;
16325: LD_ADDR_VAR 0 7
16329: PUSH
16330: EMPTY
16331: ST_TO_ADDR
// for j := 1 to 8 do
16332: LD_ADDR_VAR 0 3
16336: PUSH
16337: DOUBLE
16338: LD_INT 1
16340: DEC
16341: ST_TO_ADDR
16342: LD_INT 8
16344: PUSH
16345: FOR_TO
16346: IFFALSE 16439
// if Side_Positions [ j ] then
16348: LD_EXP 23
16352: PUSH
16353: LD_VAR 0 3
16357: ARRAY
16358: IFFALSE 16437
// begin amount := 0 ;
16360: LD_ADDR_VAR 0 5
16364: PUSH
16365: LD_INT 0
16367: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
16368: LD_ADDR_VAR 0 4
16372: PUSH
16373: LD_LOC 19
16377: PUSH
16378: LD_VAR 0 2
16382: ARRAY
16383: PUSH
16384: FOR_IN
16385: IFFALSE 16433
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
16387: LD_ADDR_VAR 0 5
16391: PUSH
16392: LD_VAR 0 5
16396: PUSH
16397: LD_INT 22
16399: PUSH
16400: LD_VAR 0 3
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 30
16411: PUSH
16412: LD_VAR 0 4
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PPUSH
16425: CALL_OW 69
16429: PLUS
16430: ST_TO_ADDR
16431: GO 16384
16433: POP
16434: POP
// break ;
16435: GO 16439
// end ;
16437: GO 16345
16439: POP
16440: POP
// list := [ ] ;
16441: LD_ADDR_VAR 0 7
16445: PUSH
16446: EMPTY
16447: ST_TO_ADDR
// for j := 1 to 8 do
16448: LD_ADDR_VAR 0 3
16452: PUSH
16453: DOUBLE
16454: LD_INT 1
16456: DEC
16457: ST_TO_ADDR
16458: LD_INT 8
16460: PUSH
16461: FOR_TO
16462: IFFALSE 16482
// list := list ^ amount ;
16464: LD_ADDR_VAR 0 7
16468: PUSH
16469: LD_VAR 0 7
16473: PUSH
16474: LD_VAR 0 5
16478: ADD
16479: ST_TO_ADDR
16480: GO 16461
16482: POP
16483: POP
// Already_Built := Already_Built ^ [ list ] ;
16484: LD_ADDR_LOC 25
16488: PUSH
16489: LD_LOC 25
16493: PUSH
16494: LD_VAR 0 7
16498: PUSH
16499: EMPTY
16500: LIST
16501: ADD
16502: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
16503: LD_ADDR_LOC 26
16507: PUSH
16508: LD_LOC 26
16512: PUSH
16513: LD_VAR 0 6
16517: PUSH
16518: LD_VAR 0 5
16522: PUSH
16523: LD_LOC 20
16527: PUSH
16528: LD_VAR 0 2
16532: ARRAY
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: ADD
16539: ST_TO_ADDR
// end ;
16540: GO 16231
16542: POP
16543: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16544: LD_ADDR_LOC 27
16548: PUSH
16549: LD_INT 0
16551: PUSH
16552: LD_INT 0
16554: PUSH
16555: LD_INT 0
16557: PUSH
16558: LD_INT 0
16560: PUSH
16561: LD_INT 0
16563: PUSH
16564: LD_INT 0
16566: PUSH
16567: LD_INT 0
16569: PUSH
16570: LD_INT 0
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: ST_TO_ADDR
// if Limits_Info then
16583: LD_LOC 26
16587: IFFALSE 16603
// Limits_Info := #Limits ^ Limits_Info ;
16589: LD_ADDR_LOC 26
16593: PUSH
16594: LD_STRING #Limits
16596: PUSH
16597: LD_LOC 26
16601: ADD
16602: ST_TO_ADDR
// end ;
16603: LD_VAR 0 1
16607: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
16608: LD_INT 0
16610: PPUSH
16611: PPUSH
16612: PPUSH
16613: PPUSH
// for i := 1 to Restricted_Builds do
16614: LD_ADDR_VAR 0 7
16618: PUSH
16619: DOUBLE
16620: LD_INT 1
16622: DEC
16623: ST_TO_ADDR
16624: LD_LOC 19
16628: PUSH
16629: FOR_TO
16630: IFFALSE 17053
// if BType in Restricted_Builds [ i ] then
16632: LD_VAR 0 2
16636: PUSH
16637: LD_LOC 19
16641: PUSH
16642: LD_VAR 0 7
16646: ARRAY
16647: IN
16648: IFFALSE 17051
// begin if old_side then
16650: LD_VAR 0 4
16654: IFFALSE 16780
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
16656: LD_LOC 25
16660: PUSH
16661: LD_VAR 0 7
16665: ARRAY
16666: PUSH
16667: LD_VAR 0 3
16671: ARRAY
16672: PUSH
16673: LD_VAR 0 5
16677: PLUS
16678: PUSH
16679: LD_LOC 20
16683: PUSH
16684: LD_VAR 0 7
16688: ARRAY
16689: GREATER
16690: IFFALSE 16716
// begin SetSide ( un , old_side ) ;
16692: LD_VAR 0 1
16696: PPUSH
16697: LD_VAR 0 4
16701: PPUSH
16702: CALL_OW 235
// count := 0 ;
16706: LD_ADDR_VAR 0 5
16710: PUSH
16711: LD_INT 0
16713: ST_TO_ADDR
// end else
16714: GO 16780
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
16716: LD_ADDR_LOC 25
16720: PUSH
16721: LD_LOC 25
16725: PPUSH
16726: LD_VAR 0 7
16730: PPUSH
16731: LD_LOC 25
16735: PUSH
16736: LD_VAR 0 7
16740: ARRAY
16741: PPUSH
16742: LD_VAR 0 4
16746: PPUSH
16747: LD_LOC 25
16751: PUSH
16752: LD_VAR 0 7
16756: ARRAY
16757: PUSH
16758: LD_VAR 0 4
16762: ARRAY
16763: PUSH
16764: LD_VAR 0 5
16768: MINUS
16769: PPUSH
16770: CALL_OW 1
16774: PPUSH
16775: CALL_OW 1
16779: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
16780: LD_ADDR_LOC 25
16784: PUSH
16785: LD_LOC 25
16789: PPUSH
16790: LD_VAR 0 7
16794: PPUSH
16795: LD_LOC 25
16799: PUSH
16800: LD_VAR 0 7
16804: ARRAY
16805: PPUSH
16806: LD_VAR 0 3
16810: PPUSH
16811: LD_LOC 25
16815: PUSH
16816: LD_VAR 0 7
16820: ARRAY
16821: PUSH
16822: LD_VAR 0 3
16826: ARRAY
16827: PUSH
16828: LD_VAR 0 5
16832: PLUS
16833: PPUSH
16834: CALL_OW 1
16838: PPUSH
16839: CALL_OW 1
16843: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
16844: LD_VAR 0 5
16848: PUSH
16849: LD_INT 0
16851: NONEQUAL
16852: PUSH
16853: LD_VAR 0 3
16857: PUSH
16858: LD_OWVAR 2
16862: EQUAL
16863: AND
16864: IFFALSE 16907
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
16866: LD_ADDR_LOC 26
16870: PUSH
16871: LD_LOC 26
16875: PPUSH
16876: LD_INT 3
16878: PUSH
16879: LD_VAR 0 7
16883: MUL
16884: PPUSH
16885: LD_LOC 25
16889: PUSH
16890: LD_VAR 0 7
16894: ARRAY
16895: PUSH
16896: LD_VAR 0 3
16900: ARRAY
16901: PPUSH
16902: CALL_OW 1
16906: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
16907: LD_LOC 25
16911: PUSH
16912: LD_VAR 0 7
16916: ARRAY
16917: PUSH
16918: LD_VAR 0 3
16922: ARRAY
16923: PUSH
16924: LD_LOC 20
16928: PUSH
16929: LD_VAR 0 7
16933: ARRAY
16934: GREATER
16935: IFFALSE 16962
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
16937: LD_ADDR_LOC 27
16941: PUSH
16942: LD_LOC 27
16946: PPUSH
16947: LD_VAR 0 3
16951: PPUSH
16952: LD_INT 1
16954: PPUSH
16955: CALL_OW 1
16959: ST_TO_ADDR
// end else
16960: GO 17049
// begin for j := 1 to Restricted_Builds do
16962: LD_ADDR_VAR 0 8
16966: PUSH
16967: DOUBLE
16968: LD_INT 1
16970: DEC
16971: ST_TO_ADDR
16972: LD_LOC 19
16976: PUSH
16977: FOR_TO
16978: IFFALSE 17022
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
16980: LD_LOC 25
16984: PUSH
16985: LD_VAR 0 8
16989: ARRAY
16990: PUSH
16991: LD_VAR 0 3
16995: ARRAY
16996: PUSH
16997: LD_LOC 20
17001: PUSH
17002: LD_VAR 0 8
17006: ARRAY
17007: GREATER
17008: IFFALSE 17020
// begin Is_Cheater := true ;
17010: LD_ADDR_VAR 0 9
17014: PUSH
17015: LD_INT 1
17017: ST_TO_ADDR
// break ;
17018: GO 17022
// end ;
17020: GO 16977
17022: POP
17023: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
17024: LD_ADDR_LOC 27
17028: PUSH
17029: LD_LOC 27
17033: PPUSH
17034: LD_VAR 0 3
17038: PPUSH
17039: LD_VAR 0 9
17043: PPUSH
17044: CALL_OW 1
17048: ST_TO_ADDR
// end ; break ;
17049: GO 17053
// end ;
17051: GO 16629
17053: POP
17054: POP
// end ;
17055: LD_VAR 0 6
17059: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
17060: LD_VAR 0 5
17064: PUSH
17065: LD_LOC 21
17069: IN
17070: PUSH
17071: LD_VAR 0 2
17075: PUSH
17076: LD_LOC 22
17080: IN
17081: OR
17082: PUSH
17083: LD_VAR 0 4
17087: PUSH
17088: LD_LOC 23
17092: IN
17093: OR
17094: PUSH
17095: LD_VAR 0 3
17099: PUSH
17100: LD_LOC 24
17104: IN
17105: OR
17106: IFFALSE 17117
// ComCancel ( factory ) ;
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 127
// end ;
17117: PPOPN 5
17119: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
17120: LD_VAR 0 2
17124: PUSH
17125: LD_LOC 21
17129: IN
17130: IFFALSE 17141
// ComCancel ( building ) ;
17132: LD_VAR 0 1
17136: PPUSH
17137: CALL_OW 127
// end ; end_of_file
17141: PPOPN 2
17143: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
17144: LD_INT 0
17146: PPUSH
17147: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
17148: LD_ADDR_VAR 0 2
17152: PUSH
17153: LD_STRING #Multi1x1-Time
17155: PUSH
17156: LD_OWVAR 1
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: ST_TO_ADDR
// if WaitServerStrings then
17165: LD_EXP 66
17169: IFFALSE 17187
// AllStrings = AllStrings ^ WaitServerStrings ;
17171: LD_ADDR_VAR 0 2
17175: PUSH
17176: LD_VAR 0 2
17180: PUSH
17181: LD_EXP 66
17185: ADD
17186: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
17187: LD_INT 0
17189: PUSH
17190: LD_EXP 18
17194: PUSH
17195: LD_OWVAR 1
17199: MINUS
17200: LESSEQUAL
17201: IFFALSE 17232
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
17203: LD_ADDR_VAR 0 2
17207: PUSH
17208: LD_VAR 0 2
17212: PUSH
17213: LD_STRING #allowedsibbomb
17215: PUSH
17216: LD_EXP 18
17220: PUSH
17221: LD_OWVAR 1
17225: MINUS
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: ADD
17231: ST_TO_ADDR
// if ( ExtraStrings ) then
17232: LD_EXP 65
17236: IFFALSE 17258
// AllStrings := AllStrings ^  ^ ExtraStrings ;
17238: LD_ADDR_VAR 0 2
17242: PUSH
17243: LD_VAR 0 2
17247: PUSH
17248: LD_STRING 
17250: ADD
17251: PUSH
17252: LD_EXP 65
17256: ADD
17257: ST_TO_ADDR
// if Display_kings and not isSGUI then
17258: LD_EXP 67
17262: PUSH
17263: LD_OWVAR 83
17267: NOT
17268: AND
17269: IFFALSE 17287
// AllStrings = AllStrings ^ Display_kings ;
17271: LD_ADDR_VAR 0 2
17275: PUSH
17276: LD_VAR 0 2
17280: PUSH
17281: LD_EXP 67
17285: ADD
17286: ST_TO_ADDR
// if ( LimitsStrings ) then
17287: CALL 13984 0 0
17291: IFFALSE 17313
// AllStrings := AllStrings ^  ^ LimitsStrings ;
17293: LD_ADDR_VAR 0 2
17297: PUSH
17298: LD_VAR 0 2
17302: PUSH
17303: LD_STRING 
17305: ADD
17306: PUSH
17307: CALL 13984 0 0
17311: ADD
17312: ST_TO_ADDR
// Display_Strings := AllStrings ;
17313: LD_ADDR_OWVAR 47
17317: PUSH
17318: LD_VAR 0 2
17322: ST_TO_ADDR
// end ;
17323: LD_VAR 0 1
17327: RET
// every 0 0$1 do
17328: GO 17330
17330: DISABLE
// begin ShowTimer ;
17331: CALL 17144 0 0
// enable ;
17335: ENABLE
// end ; end_of_file
17336: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
17341: PPUSH
// sharedPoints1 = [ ] ;
17342: LD_ADDR_LOC 28
17346: PUSH
17347: EMPTY
17348: ST_TO_ADDR
// sharedPoints2 = [ ] ;
17349: LD_ADDR_LOC 29
17353: PUSH
17354: EMPTY
17355: ST_TO_ADDR
// sharedPoints3 = [ ] ;
17356: LD_ADDR_LOC 30
17360: PUSH
17361: EMPTY
17362: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
17363: LD_ADDR_VAR 0 2
17367: PUSH
17368: DOUBLE
17369: LD_INT 1
17371: DEC
17372: ST_TO_ADDR
17373: LD_EXP 23
17377: PUSH
17378: LD_INT 0
17380: PLUS
17381: PUSH
17382: FOR_TO
17383: IFFALSE 17485
// begin if not Side_Positions [ i ] = 0 then
17385: LD_EXP 23
17389: PUSH
17390: LD_VAR 0 2
17394: ARRAY
17395: PUSH
17396: LD_INT 0
17398: EQUAL
17399: NOT
17400: IFFALSE 17414
// SetMultiScore ( i , 0 ) ;
17402: LD_VAR 0 2
17406: PPUSH
17407: LD_INT 0
17409: PPUSH
17410: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
17414: LD_ADDR_LOC 28
17418: PUSH
17419: LD_LOC 28
17423: PPUSH
17424: LD_VAR 0 2
17428: PPUSH
17429: LD_INT 0
17431: PPUSH
17432: CALL_OW 1
17436: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
17437: LD_ADDR_LOC 29
17441: PUSH
17442: LD_LOC 29
17446: PPUSH
17447: LD_VAR 0 2
17451: PPUSH
17452: LD_INT 0
17454: PPUSH
17455: CALL_OW 1
17459: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
17460: LD_ADDR_LOC 30
17464: PUSH
17465: LD_LOC 30
17469: PPUSH
17470: LD_VAR 0 2
17474: PPUSH
17475: LD_INT 0
17477: PPUSH
17478: CALL_OW 1
17482: ST_TO_ADDR
// end ;
17483: GO 17382
17485: POP
17486: POP
// pointGame = true ;
17487: LD_ADDR_LOC 31
17491: PUSH
17492: LD_INT 1
17494: ST_TO_ADDR
// end ;
17495: LD_VAR 0 1
17499: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
17500: LD_LOC 31
17504: IFFALSE 17915
17506: GO 17508
17508: DISABLE
17509: LD_INT 0
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
17518: PPUSH
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
// begin if isSGUI then
17524: LD_OWVAR 83
17528: IFFALSE 17915
// begin if Teams [ 1 ] then
17530: LD_EXP 22
17534: PUSH
17535: LD_INT 1
17537: ARRAY
17538: IFFALSE 17550
// red = true else
17540: LD_ADDR_VAR 0 2
17544: PUSH
17545: LD_INT 1
17547: ST_TO_ADDR
17548: GO 17558
// red = false ;
17550: LD_ADDR_VAR 0 2
17554: PUSH
17555: LD_INT 0
17557: ST_TO_ADDR
// if Teams [ 2 ] then
17558: LD_EXP 22
17562: PUSH
17563: LD_INT 2
17565: ARRAY
17566: IFFALSE 17578
// blue = true else
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_INT 1
17575: ST_TO_ADDR
17576: GO 17586
// blue = false ;
17578: LD_ADDR_VAR 0 3
17582: PUSH
17583: LD_INT 0
17585: ST_TO_ADDR
// if Teams [ 3 ] then
17586: LD_EXP 22
17590: PUSH
17591: LD_INT 3
17593: ARRAY
17594: IFFALSE 17606
// yel = true else
17596: LD_ADDR_VAR 0 4
17600: PUSH
17601: LD_INT 1
17603: ST_TO_ADDR
17604: GO 17614
// yel = false ;
17606: LD_ADDR_VAR 0 4
17610: PUSH
17611: LD_INT 0
17613: ST_TO_ADDR
// if Teams [ 4 ] then
17614: LD_EXP 22
17618: PUSH
17619: LD_INT 4
17621: ARRAY
17622: IFFALSE 17634
// green = true else
17624: LD_ADDR_VAR 0 5
17628: PUSH
17629: LD_INT 1
17631: ST_TO_ADDR
17632: GO 17642
// green = false ;
17634: LD_ADDR_VAR 0 5
17638: PUSH
17639: LD_INT 0
17641: ST_TO_ADDR
// if def_public_score then
17642: LD_EXP 6
17646: IFFALSE 17658
// p = true else
17648: LD_ADDR_VAR 0 12
17652: PUSH
17653: LD_INT 1
17655: ST_TO_ADDR
17656: GO 17666
// p = false ;
17658: LD_ADDR_VAR 0 12
17662: PUSH
17663: LD_INT 0
17665: ST_TO_ADDR
// if team_game then
17666: LD_EXP 25
17670: IFFALSE 17751
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
17672: LD_ADDR_VAR 0 13
17676: PUSH
17677: LD_INT 3
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: LD_INT 7
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: PUSH
17695: LD_EXP 28
17699: ARRAY
17700: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
17701: LD_ADDR_VAR 0 10
17705: PUSH
17706: LD_STRING {
17708: PUSH
17709: LD_VAR 0 3
17713: STR
17714: PUSH
17715: LD_STRING ,
17717: STR
17718: PUSH
17719: LD_VAR 0 4
17723: STR
17724: PUSH
17725: LD_STRING ,
17727: STR
17728: PUSH
17729: LD_VAR 0 2
17733: STR
17734: PUSH
17735: LD_STRING ,0,0,0,
17737: STR
17738: PUSH
17739: LD_VAR 0 5
17743: STR
17744: PUSH
17745: LD_STRING ,0}
17747: STR
17748: ST_TO_ADDR
// end else
17749: GO 17851
// begin you = your_side ;
17751: LD_ADDR_VAR 0 13
17755: PUSH
17756: LD_OWVAR 2
17760: ST_TO_ADDR
// s = { ;
17761: LD_ADDR_VAR 0 10
17765: PUSH
17766: LD_STRING {
17768: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
17769: LD_ADDR_VAR 0 1
17773: PUSH
17774: DOUBLE
17775: LD_INT 1
17777: DEC
17778: ST_TO_ADDR
17779: LD_EXP 23
17783: PUSH
17784: LD_INT 0
17786: PLUS
17787: PUSH
17788: FOR_TO
17789: IFFALSE 17835
// if side_positions [ i ] then
17791: LD_EXP 23
17795: PUSH
17796: LD_VAR 0 1
17800: ARRAY
17801: IFFALSE 17819
// s = s & 1, else
17803: LD_ADDR_VAR 0 10
17807: PUSH
17808: LD_VAR 0 10
17812: PUSH
17813: LD_STRING 1,
17815: STR
17816: ST_TO_ADDR
17817: GO 17833
// s = s & 0, ;
17819: LD_ADDR_VAR 0 10
17823: PUSH
17824: LD_VAR 0 10
17828: PUSH
17829: LD_STRING 0,
17831: STR
17832: ST_TO_ADDR
17833: GO 17788
17835: POP
17836: POP
// s = s & } ;
17837: LD_ADDR_VAR 0 10
17841: PUSH
17842: LD_VAR 0 10
17846: PUSH
17847: LD_STRING }
17849: STR
17850: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
17851: LD_STRING initScore(
17853: PUSH
17854: LD_VAR 0 10
17858: STR
17859: PUSH
17860: LD_STRING ,
17862: STR
17863: PUSH
17864: LD_VAR 0 12
17868: STR
17869: PUSH
17870: LD_STRING ,
17872: STR
17873: PUSH
17874: LD_VAR 0 13
17878: STR
17879: PUSH
17880: LD_STRING  );
17882: STR
17883: PPUSH
17884: CALL_OW 559
// if game_type = 3 then
17888: LD_EXP 48
17892: PUSH
17893: LD_INT 3
17895: EQUAL
17896: IFFALSE 17915
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
17898: LD_STRING AddScorePoints(2,2,
17900: PUSH
17901: LD_EXP 20
17905: STR
17906: PUSH
17907: LD_STRING  );
17909: STR
17910: PPUSH
17911: CALL_OW 559
// end ; end ;
17915: PPOPN 13
17917: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
17918: LD_INT 0
17920: PPUSH
17921: PPUSH
// case typ of 1 :
17922: LD_VAR 0 3
17926: PUSH
17927: LD_INT 1
17929: DOUBLE
17930: EQUAL
17931: IFTRUE 17935
17933: GO 17963
17935: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
17936: LD_ADDR_LOC 28
17940: PUSH
17941: LD_LOC 28
17945: PPUSH
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_VAR 0 2
17955: PPUSH
17956: CALL_OW 1
17960: ST_TO_ADDR
17961: GO 18036
17963: LD_INT 2
17965: DOUBLE
17966: EQUAL
17967: IFTRUE 17971
17969: GO 17999
17971: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
17972: LD_ADDR_LOC 29
17976: PUSH
17977: LD_LOC 29
17981: PPUSH
17982: LD_VAR 0 1
17986: PPUSH
17987: LD_VAR 0 2
17991: PPUSH
17992: CALL_OW 1
17996: ST_TO_ADDR
17997: GO 18036
17999: LD_INT 3
18001: DOUBLE
18002: EQUAL
18003: IFTRUE 18007
18005: GO 18035
18007: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
18008: LD_ADDR_LOC 30
18012: PUSH
18013: LD_LOC 30
18017: PPUSH
18018: LD_VAR 0 1
18022: PPUSH
18023: LD_VAR 0 2
18027: PPUSH
18028: CALL_OW 1
18032: ST_TO_ADDR
18033: GO 18036
18035: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
18036: LD_ADDR_VAR 0 5
18040: PUSH
18041: LD_LOC 28
18045: PUSH
18046: LD_VAR 0 1
18050: ARRAY
18051: PUSH
18052: LD_LOC 29
18056: PUSH
18057: LD_VAR 0 1
18061: ARRAY
18062: PLUS
18063: PUSH
18064: LD_LOC 30
18068: PUSH
18069: LD_VAR 0 1
18073: ARRAY
18074: PLUS
18075: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
18076: LD_VAR 0 1
18080: PPUSH
18081: LD_VAR 0 5
18085: PPUSH
18086: CALL_OW 506
// end ; end_of_file
18090: LD_VAR 0 4
18094: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
18095: LD_INT 0
18097: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
18098: LD_VAR 0 1
18102: PPUSH
18103: CALL_OW 255
18107: PUSH
18108: LD_VAR 0 4
18112: EQUAL
18113: IFFALSE 18132
// begin SetAchievement ( ACH_RAD ) ;
18115: LD_STRING ACH_RAD
18117: PPUSH
18118: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
18122: LD_STRING ACH_NL
18124: PPUSH
18125: LD_INT 1
18127: PPUSH
18128: CALL_OW 564
// end end ;
18132: LD_VAR 0 5
18136: RET
// export function SA_Win ( side ) ; begin
18137: LD_INT 0
18139: PPUSH
// case side of 1 :
18140: LD_VAR 0 1
18144: PUSH
18145: LD_INT 1
18147: DOUBLE
18148: EQUAL
18149: IFTRUE 18153
18151: GO 18166
18153: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18154: LD_STRING ACH_AH
18156: PPUSH
18157: LD_INT 1
18159: PPUSH
18160: CALL_OW 564
18164: GO 18329
18166: LD_INT 2
18168: DOUBLE
18169: EQUAL
18170: IFTRUE 18174
18172: GO 18187
18174: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18175: LD_STRING ACH_E
18177: PPUSH
18178: LD_INT 1
18180: PPUSH
18181: CALL_OW 564
18185: GO 18329
18187: LD_INT 3
18189: DOUBLE
18190: EQUAL
18191: IFTRUE 18195
18193: GO 18208
18195: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18196: LD_STRING ACH_OOL
18198: PPUSH
18199: LD_INT 1
18201: PPUSH
18202: CALL_OW 564
18206: GO 18329
18208: LD_INT 1
18210: PUSH
18211: LD_INT 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: DOUBLE
18218: EQUAL
18219: IFTRUE 18223
18221: GO 18248
18223: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18224: LD_STRING ACH_AH
18226: PPUSH
18227: LD_REAL  5.00000000000000E-0001
18230: PPUSH
18231: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18235: LD_STRING ACH_E
18237: PPUSH
18238: LD_REAL  5.00000000000000E-0001
18241: PPUSH
18242: CALL_OW 564
// end ; [ 2 , 3 ] :
18246: GO 18329
18248: LD_INT 2
18250: PUSH
18251: LD_INT 3
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: DOUBLE
18258: EQUAL
18259: IFTRUE 18263
18261: GO 18288
18263: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18264: LD_STRING ACH_OOL
18266: PPUSH
18267: LD_REAL  5.00000000000000E-0001
18270: PPUSH
18271: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18275: LD_STRING ACH_E
18277: PPUSH
18278: LD_REAL  5.00000000000000E-0001
18281: PPUSH
18282: CALL_OW 564
// end ; [ 3 , 1 ] :
18286: GO 18329
18288: LD_INT 3
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: DOUBLE
18298: EQUAL
18299: IFTRUE 18303
18301: GO 18328
18303: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18304: LD_STRING ACH_AH
18306: PPUSH
18307: LD_REAL  5.00000000000000E-0001
18310: PPUSH
18311: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18315: LD_STRING ACH_OOL
18317: PPUSH
18318: LD_REAL  5.00000000000000E-0001
18321: PPUSH
18322: CALL_OW 564
// end ; end ;
18326: GO 18329
18328: POP
// end ; end_of_file
18329: LD_VAR 0 2
18333: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
18334: LD_INT 0
18336: PPUSH
18337: PPUSH
// enable ( 98 ) ;
18338: LD_INT 98
18340: ENABLE_MARKED
// GameEnded = false ;
18341: LD_ADDR_LOC 33
18345: PUSH
18346: LD_INT 0
18348: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18349: LD_ADDR_LOC 32
18353: PUSH
18354: LD_INT 0
18356: PUSH
18357: LD_INT 0
18359: PUSH
18360: LD_INT 0
18362: PUSH
18363: LD_INT 0
18365: PUSH
18366: LD_INT 0
18368: PUSH
18369: LD_INT 0
18371: PUSH
18372: LD_INT 0
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: ST_TO_ADDR
// unfoged = false ;
18388: LD_ADDR_LOC 34
18392: PUSH
18393: LD_INT 0
18395: ST_TO_ADDR
// for i = 1 to side_positions do
18396: LD_ADDR_VAR 0 2
18400: PUSH
18401: DOUBLE
18402: LD_INT 1
18404: DEC
18405: ST_TO_ADDR
18406: LD_EXP 23
18410: PUSH
18411: FOR_TO
18412: IFFALSE 18452
// if not side_positions [ i ] then
18414: LD_EXP 23
18418: PUSH
18419: LD_VAR 0 2
18423: ARRAY
18424: NOT
18425: IFFALSE 18450
// defaited = replace ( defaited , i , true ) ;
18427: LD_ADDR_LOC 32
18431: PUSH
18432: LD_LOC 32
18436: PPUSH
18437: LD_VAR 0 2
18441: PPUSH
18442: LD_INT 1
18444: PPUSH
18445: CALL_OW 1
18449: ST_TO_ADDR
18450: GO 18411
18452: POP
18453: POP
// end ;
18454: LD_VAR 0 1
18458: RET
// function CanWinLoose ; begin
18459: LD_INT 0
18461: PPUSH
// Result := true ;
18462: LD_ADDR_VAR 0 1
18466: PUSH
18467: LD_INT 1
18469: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
18470: CALL_OW 518
18474: PUSH
18475: CALL_OW 519
18479: PUSH
18480: LD_INT 0
18482: GREATER
18483: AND
18484: IFFALSE 18494
// Result := false ;
18486: LD_ADDR_VAR 0 1
18490: PUSH
18491: LD_INT 0
18493: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18494: CALL_OW 531
18498: PUSH
18499: CALL_OW 519
18503: PUSH
18504: LD_INT 1
18506: GREATER
18507: AND
18508: IFFALSE 18518
// Result := false ;
18510: LD_ADDR_VAR 0 1
18514: PUSH
18515: LD_INT 0
18517: ST_TO_ADDR
// end ;
18518: LD_VAR 0 1
18522: RET
// export function HasPower ( i ) ; var k , h ; begin
18523: LD_INT 0
18525: PPUSH
18526: PPUSH
18527: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18528: LD_VAR 0 1
18532: PPUSH
18533: CALL_OW 108
18537: NOT
18538: PUSH
18539: LD_EXP 26
18543: PUSH
18544: LD_VAR 0 1
18548: ARRAY
18549: NOT
18550: AND
18551: PUSH
18552: LD_OWVAR 4
18556: AND
18557: IFFALSE 18569
// begin result = false ;
18559: LD_ADDR_VAR 0 2
18563: PUSH
18564: LD_INT 0
18566: ST_TO_ADDR
// end else
18567: GO 18864
// case def_win_rules of 0 :
18569: LD_EXP 19
18573: PUSH
18574: LD_INT 0
18576: DOUBLE
18577: EQUAL
18578: IFTRUE 18582
18580: GO 18745
18582: POP
// if def_people_respawning then
18583: LD_EXP 60
18587: IFFALSE 18678
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
18589: LD_ADDR_VAR 0 2
18593: PUSH
18594: LD_INT 22
18596: PUSH
18597: LD_VAR 0 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 2
18608: PUSH
18609: LD_INT 21
18611: PUSH
18612: LD_INT 1
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 33
18621: PUSH
18622: LD_INT 3
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 33
18631: PUSH
18632: LD_INT 5
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 30
18641: PUSH
18642: LD_INT 0
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 30
18651: PUSH
18652: LD_INT 1
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: ST_TO_ADDR
18676: GO 18743
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18678: LD_ADDR_VAR 0 2
18682: PUSH
18683: LD_INT 22
18685: PUSH
18686: LD_VAR 0 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: LD_INT 21
18700: PUSH
18701: LD_INT 1
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 33
18710: PUSH
18711: LD_INT 3
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 33
18720: PUSH
18721: LD_INT 5
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PPUSH
18738: CALL_OW 69
18742: ST_TO_ADDR
18743: GO 18864
18745: LD_INT 1
18747: DOUBLE
18748: EQUAL
18749: IFTRUE 18753
18751: GO 18792
18753: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
18754: LD_ADDR_VAR 0 2
18758: PUSH
18759: LD_INT 22
18761: PUSH
18762: LD_VAR 0 1
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 21
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PPUSH
18785: CALL_OW 69
18789: ST_TO_ADDR
18790: GO 18864
18792: LD_INT 2
18794: DOUBLE
18795: EQUAL
18796: IFTRUE 18800
18798: GO 18863
18800: POP
// begin h = false ;
18801: LD_ADDR_VAR 0 4
18805: PUSH
18806: LD_INT 0
18808: ST_TO_ADDR
// for k in heroes [ i ] do
18809: LD_ADDR_VAR 0 3
18813: PUSH
18814: LD_EXP 35
18818: PUSH
18819: LD_VAR 0 1
18823: ARRAY
18824: PUSH
18825: FOR_IN
18826: IFFALSE 18849
// if IsLive ( k ) then
18828: LD_VAR 0 3
18832: PPUSH
18833: CALL_OW 300
18837: IFFALSE 18847
// h = true ;
18839: LD_ADDR_VAR 0 4
18843: PUSH
18844: LD_INT 1
18846: ST_TO_ADDR
18847: GO 18825
18849: POP
18850: POP
// Result := h ;
18851: LD_ADDR_VAR 0 2
18855: PUSH
18856: LD_VAR 0 4
18860: ST_TO_ADDR
// end ; end ;
18861: GO 18864
18863: POP
// end ;
18864: LD_VAR 0 2
18868: RET
// function AlliedSides ( i , j ) ; begin
18869: LD_INT 0
18871: PPUSH
// Result := false ;
18872: LD_ADDR_VAR 0 3
18876: PUSH
18877: LD_INT 0
18879: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
18880: LD_VAR 0 1
18884: PPUSH
18885: LD_VAR 0 2
18889: PPUSH
18890: CALL_OW 81
18894: PUSH
18895: LD_INT 1
18897: EQUAL
18898: PUSH
18899: LD_VAR 0 2
18903: PPUSH
18904: LD_VAR 0 1
18908: PPUSH
18909: CALL_OW 81
18913: PUSH
18914: LD_INT 1
18916: EQUAL
18917: AND
18918: PUSH
18919: LD_VAR 0 1
18923: PPUSH
18924: CALL_OW 83
18928: AND
18929: PUSH
18930: LD_VAR 0 2
18934: PPUSH
18935: CALL_OW 83
18939: AND
18940: IFFALSE 18950
// Result := true ;
18942: LD_ADDR_VAR 0 3
18946: PUSH
18947: LD_INT 1
18949: ST_TO_ADDR
// end ;
18950: LD_VAR 0 3
18954: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
18955: CALL 18459 0 0
18959: PUSH
18960: LD_LOC 33
18964: NOT
18965: AND
18966: IFFALSE 18982
18968: GO 18970
18970: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
18971: LD_ADDR_EXP 66
18975: PUSH
18976: LD_STRING #Player-Ended
18978: PUSH
18979: EMPTY
18980: LIST
18981: ST_TO_ADDR
18982: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
18983: CALL 18459 0 0
18987: PUSH
18988: LD_LOC 33
18992: AND
18993: IFFALSE 19002
18995: GO 18997
18997: DISABLE
// YouLostInMultiplayer ;
18998: CALL_OW 107
19002: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
19003: CALL 18459 0 0
19007: NOT
19008: PUSH
19009: CALL_OW 531
19013: NOT
19014: AND
19015: IFFALSE 19031
19017: GO 19019
19019: DISABLE
// WaitServerStrings = [ #server-wait ] ;
19020: LD_ADDR_EXP 66
19024: PUSH
19025: LD_STRING #server-wait
19027: PUSH
19028: EMPTY
19029: LIST
19030: ST_TO_ADDR
19031: END
// every 100 trigger IAmSpec do
19032: CALL_OW 531
19036: IFFALSE 19052
19038: GO 19040
19040: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
19041: LD_ADDR_EXP 66
19045: PUSH
19046: LD_STRING #Player-IAmSpec
19048: PUSH
19049: EMPTY
19050: LIST
19051: ST_TO_ADDR
19052: END
// every 100 trigger GameEnded and IAmSpec do
19053: LD_LOC 33
19057: PUSH
19058: CALL_OW 531
19062: AND
19063: IFFALSE 19072
19065: GO 19067
19067: DISABLE
// YouLostInMultiplayer ;
19068: CALL_OW 107
19072: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
19073: CALL 18459 0 0
19077: PUSH
19078: LD_LOC 33
19082: NOT
19083: AND
19084: IFFALSE 19100
19086: GO 19088
19088: DISABLE
// WaitServerStrings = [ $player-win ] ;
19089: LD_ADDR_EXP 66
19093: PUSH
19094: LD_STRING $player-win
19096: PUSH
19097: EMPTY
19098: LIST
19099: ST_TO_ADDR
19100: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
19101: CALL 18459 0 0
19105: PUSH
19106: LD_LOC 33
19110: AND
19111: IFFALSE 19135
19113: GO 19115
19115: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
19116: LD_EXP 24
19120: PUSH
19121: LD_OWVAR 2
19125: ARRAY
19126: PPUSH
19127: CALL 18137 0 1
// YouWinInMultiplayer ;
19131: CALL_OW 106
// end ;
19135: END
// every 100 trigger isEditor marked 401 do
19136: LD_OWVAR 84
19140: IFFALSE 19156
19142: GO 19144
19144: DISABLE
// Debug_Strings = [ You won ] ;
19145: LD_ADDR_OWVAR 48
19149: PUSH
19150: LD_STRING You won
19152: PUSH
19153: EMPTY
19154: LIST
19155: ST_TO_ADDR
19156: END
// every 100 trigger isEditor marked 400 do
19157: LD_OWVAR 84
19161: IFFALSE 19177
19163: GO 19165
19165: DISABLE
// Debug_Strings = [ You loss ] ;
19166: LD_ADDR_OWVAR 48
19170: PUSH
19171: LD_STRING You loss
19173: PUSH
19174: EMPTY
19175: LIST
19176: ST_TO_ADDR
19177: END
// every 100 marked 98 do var i , un ;
19178: GO 19180
19180: DISABLE
19181: LD_INT 0
19183: PPUSH
19184: PPUSH
// begin for i = 1 to side_positions do
19185: LD_ADDR_VAR 0 1
19189: PUSH
19190: DOUBLE
19191: LD_INT 1
19193: DEC
19194: ST_TO_ADDR
19195: LD_EXP 23
19199: PUSH
19200: FOR_TO
19201: IFFALSE 19324
// if side_positions [ i ] then
19203: LD_EXP 23
19207: PUSH
19208: LD_VAR 0 1
19212: ARRAY
19213: IFFALSE 19322
// if not HasPower ( i ) and not Defaited [ i ] then
19215: LD_VAR 0 1
19219: PPUSH
19220: CALL 18523 0 1
19224: NOT
19225: PUSH
19226: LD_LOC 32
19230: PUSH
19231: LD_VAR 0 1
19235: ARRAY
19236: NOT
19237: AND
19238: IFFALSE 19322
// begin un = filterallunits ( [ f_side , i ] ) ;
19240: LD_ADDR_VAR 0 2
19244: PUSH
19245: LD_INT 22
19247: PUSH
19248: LD_VAR 0 1
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PPUSH
19257: CALL_OW 69
19261: ST_TO_ADDR
// if un then
19262: LD_VAR 0 2
19266: IFFALSE 19280
// SetSide ( un , 0 ) ;
19268: LD_VAR 0 2
19272: PPUSH
19273: LD_INT 0
19275: PPUSH
19276: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
19280: LD_ADDR_LOC 32
19284: PUSH
19285: LD_LOC 32
19289: PPUSH
19290: LD_VAR 0 1
19294: PPUSH
19295: LD_INT 1
19297: PPUSH
19298: CALL_OW 1
19302: ST_TO_ADDR
// if i = your_side then
19303: LD_VAR 0 1
19307: PUSH
19308: LD_OWVAR 2
19312: EQUAL
19313: IFFALSE 19322
// begin Multiplayer_Loose_Message ;
19315: CALL_OW 521
// enable ( 400 ) ;
19319: LD_INT 400
19321: ENABLE_MARKED
// end ; end ;
19322: GO 19200
19324: POP
19325: POP
// if not Unfoged and defaited [ your_side ] then
19326: LD_LOC 34
19330: NOT
19331: PUSH
19332: LD_LOC 32
19336: PUSH
19337: LD_OWVAR 2
19341: ARRAY
19342: AND
19343: IFFALSE 19349
// Unfog ;
19345: CALL 19535 0 0
// DidGameEnd ;
19349: CALL 19364 0 0
// if not GameEnded then
19353: LD_LOC 33
19357: NOT
19358: IFFALSE 19361
// enable ;
19360: ENABLE
// end ;
19361: PPOPN 2
19363: END
// function DidGameEnd ; var i , k , enemy ; begin
19364: LD_INT 0
19366: PPUSH
19367: PPUSH
19368: PPUSH
19369: PPUSH
// enemy = [ ] ;
19370: LD_ADDR_VAR 0 4
19374: PUSH
19375: EMPTY
19376: ST_TO_ADDR
// for i = 1 to side_positions do
19377: LD_ADDR_VAR 0 2
19381: PUSH
19382: DOUBLE
19383: LD_INT 1
19385: DEC
19386: ST_TO_ADDR
19387: LD_EXP 23
19391: PUSH
19392: FOR_TO
19393: IFFALSE 19497
// if not defaited [ i ] then
19395: LD_LOC 32
19399: PUSH
19400: LD_VAR 0 2
19404: ARRAY
19405: NOT
19406: IFFALSE 19495
// for k = 1 to side_positions do
19408: LD_ADDR_VAR 0 3
19412: PUSH
19413: DOUBLE
19414: LD_INT 1
19416: DEC
19417: ST_TO_ADDR
19418: LD_EXP 23
19422: PUSH
19423: FOR_TO
19424: IFFALSE 19493
// if not defaited [ k ] then
19426: LD_LOC 32
19430: PUSH
19431: LD_VAR 0 3
19435: ARRAY
19436: NOT
19437: IFFALSE 19491
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
19439: LD_VAR 0 2
19443: PPUSH
19444: LD_VAR 0 3
19448: PPUSH
19449: CALL_OW 81
19453: PUSH
19454: LD_INT 2
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: IN
19464: IFFALSE 19491
// enemy = enemy ^ [ i , k ] ;
19466: LD_ADDR_VAR 0 4
19470: PUSH
19471: LD_VAR 0 4
19475: PUSH
19476: LD_VAR 0 2
19480: PUSH
19481: LD_VAR 0 3
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: ADD
19490: ST_TO_ADDR
19491: GO 19423
19493: POP
19494: POP
19495: GO 19392
19497: POP
19498: POP
// if not enemy then
19499: LD_VAR 0 4
19503: NOT
19504: IFFALSE 19530
// begin GameEnded = true ;
19506: LD_ADDR_LOC 33
19510: PUSH
19511: LD_INT 1
19513: ST_TO_ADDR
// if not defaited [ your_side ] then
19514: LD_LOC 32
19518: PUSH
19519: LD_OWVAR 2
19523: ARRAY
19524: NOT
19525: IFFALSE 19530
// enable ( 401 ) ;
19527: LD_INT 401
19529: ENABLE_MARKED
// end ; end ;
19530: LD_VAR 0 1
19534: RET
// function unfog ; var k , friends ; begin
19535: LD_INT 0
19537: PPUSH
19538: PPUSH
19539: PPUSH
// for k = 1 to side_positions do
19540: LD_ADDR_VAR 0 2
19544: PUSH
19545: DOUBLE
19546: LD_INT 1
19548: DEC
19549: ST_TO_ADDR
19550: LD_EXP 23
19554: PUSH
19555: FOR_TO
19556: IFFALSE 19612
// if not defaited [ k ] then
19558: LD_LOC 32
19562: PUSH
19563: LD_VAR 0 2
19567: ARRAY
19568: NOT
19569: IFFALSE 19610
// if GetAttitude ( your_side , k ) in [ att_friend ] then
19571: LD_OWVAR 2
19575: PPUSH
19576: LD_VAR 0 2
19580: PPUSH
19581: CALL_OW 81
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: EMPTY
19590: LIST
19591: IN
19592: IFFALSE 19610
// friends = friends ^ k ;
19594: LD_ADDR_VAR 0 3
19598: PUSH
19599: LD_VAR 0 3
19603: PUSH
19604: LD_VAR 0 2
19608: ADD
19609: ST_TO_ADDR
19610: GO 19555
19612: POP
19613: POP
// if not friends then
19614: LD_VAR 0 3
19618: NOT
19619: IFFALSE 19636
// begin fogoff ( true ) ;
19621: LD_INT 1
19623: PPUSH
19624: CALL_OW 344
// unfoged = true ;
19628: LD_ADDR_LOC 34
19632: PUSH
19633: LD_INT 1
19635: ST_TO_ADDR
// end ; end ;
19636: LD_VAR 0 1
19640: RET
// export function MakeGameEnd ; begin
19641: LD_INT 0
19643: PPUSH
// fogoff ( true ) ;
19644: LD_INT 1
19646: PPUSH
19647: CALL_OW 344
// unfoged = true ;
19651: LD_ADDR_LOC 34
19655: PUSH
19656: LD_INT 1
19658: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19659: LD_INT 175
19661: PPUSH
19662: CALL_OW 67
// GameEnded = true ;
19666: LD_ADDR_LOC 33
19670: PUSH
19671: LD_INT 1
19673: ST_TO_ADDR
// end ;
19674: LD_VAR 0 1
19678: RET
// export function GetGameEnded ; begin
19679: LD_INT 0
19681: PPUSH
// result = GameEnded ;
19682: LD_ADDR_VAR 0 1
19686: PUSH
19687: LD_LOC 33
19691: ST_TO_ADDR
// end ; end_of_file
19692: LD_VAR 0 1
19696: RET
// var win ; export function init_kings_counting ; var i ; begin
19697: LD_INT 0
19699: PPUSH
19700: PPUSH
// mp_with_score := true ;
19701: LD_ADDR_OWVAR 14
19705: PUSH
19706: LD_INT 1
19708: ST_TO_ADDR
// ResetMultiScore ;
19709: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19713: LD_INT 19
19715: PPUSH
19716: LD_INT 1
19718: PPUSH
19719: CALL_OW 424
// enable ( 2 ) ;
19723: LD_INT 2
19725: ENABLE_MARKED
// end ;
19726: LD_VAR 0 1
19730: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19731: LD_INT 0
19733: PPUSH
19734: PPUSH
19735: PPUSH
19736: PPUSH
19737: PPUSH
19738: PPUSH
19739: PPUSH
19740: PPUSH
19741: PPUSH
// vypis := [ ] ;
19742: LD_ADDR_VAR 0 3
19746: PUSH
19747: EMPTY
19748: ST_TO_ADDR
// red = 0 ;
19749: LD_ADDR_VAR 0 5
19753: PUSH
19754: LD_INT 0
19756: ST_TO_ADDR
// blue = 0 ;
19757: LD_ADDR_VAR 0 6
19761: PUSH
19762: LD_INT 0
19764: ST_TO_ADDR
// yel = 0 ;
19765: LD_ADDR_VAR 0 7
19769: PUSH
19770: LD_INT 0
19772: ST_TO_ADDR
// green = 0 ;
19773: LD_ADDR_VAR 0 8
19777: PUSH
19778: LD_INT 0
19780: ST_TO_ADDR
// if def_public_score or isSGUI then
19781: LD_EXP 6
19785: PUSH
19786: LD_OWVAR 83
19790: OR
19791: IFFALSE 20406
// if not Team_Game then
19793: LD_EXP 25
19797: NOT
19798: IFFALSE 19930
// begin for side = 1 to Side_Positions do
19800: LD_ADDR_VAR 0 2
19804: PUSH
19805: DOUBLE
19806: LD_INT 1
19808: DEC
19809: ST_TO_ADDR
19810: LD_EXP 23
19814: PUSH
19815: FOR_TO
19816: IFFALSE 19926
// if Side_Positions [ side ] then
19818: LD_EXP 23
19822: PUSH
19823: LD_VAR 0 2
19827: ARRAY
19828: IFFALSE 19924
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
19830: LD_ADDR_VAR 0 3
19834: PUSH
19835: LD_VAR 0 3
19839: PUSH
19840: LD_STRING #KingoftheHill-Public
19842: PUSH
19843: LD_VAR 0 2
19847: PUSH
19848: LD_VAR 0 2
19852: PUSH
19853: LD_VAR 0 2
19857: PUSH
19858: LD_INT 10
19860: PLUS
19861: PPUSH
19862: CALL_OW 110
19866: PUSH
19867: LD_INT 3
19869: DIV
19870: PUSH
19871: LD_EXP 20
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: ADD
19883: ST_TO_ADDR
// ToLua ( updateScorePoints(2, & side & , & ( GetTag ( side + 10 ) div 3 ) & ); ) ;
19884: LD_STRING updateScorePoints(2,
19886: PUSH
19887: LD_VAR 0 2
19891: STR
19892: PUSH
19893: LD_STRING ,
19895: STR
19896: PUSH
19897: LD_VAR 0 2
19901: PUSH
19902: LD_INT 10
19904: PLUS
19905: PPUSH
19906: CALL_OW 110
19910: PUSH
19911: LD_INT 3
19913: DIV
19914: STR
19915: PUSH
19916: LD_STRING );
19918: STR
19919: PPUSH
19920: CALL_OW 559
// end ;
19924: GO 19815
19926: POP
19927: POP
// end else
19928: GO 20404
// begin if Teams [ 1 ] then
19930: LD_EXP 22
19934: PUSH
19935: LD_INT 1
19937: ARRAY
19938: IFFALSE 19990
// for i in Teams [ 1 ] do
19940: LD_ADDR_VAR 0 4
19944: PUSH
19945: LD_EXP 22
19949: PUSH
19950: LD_INT 1
19952: ARRAY
19953: PUSH
19954: FOR_IN
19955: IFFALSE 19988
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19957: LD_ADDR_VAR 0 5
19961: PUSH
19962: LD_VAR 0 5
19966: PUSH
19967: LD_VAR 0 4
19971: PUSH
19972: LD_INT 10
19974: PLUS
19975: PPUSH
19976: CALL_OW 110
19980: PUSH
19981: LD_INT 3
19983: DIV
19984: PLUS
19985: ST_TO_ADDR
19986: GO 19954
19988: POP
19989: POP
// if Teams [ 2 ] then
19990: LD_EXP 22
19994: PUSH
19995: LD_INT 2
19997: ARRAY
19998: IFFALSE 20050
// for i in Teams [ 2 ] do
20000: LD_ADDR_VAR 0 4
20004: PUSH
20005: LD_EXP 22
20009: PUSH
20010: LD_INT 2
20012: ARRAY
20013: PUSH
20014: FOR_IN
20015: IFFALSE 20048
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20017: LD_ADDR_VAR 0 6
20021: PUSH
20022: LD_VAR 0 6
20026: PUSH
20027: LD_VAR 0 4
20031: PUSH
20032: LD_INT 10
20034: PLUS
20035: PPUSH
20036: CALL_OW 110
20040: PUSH
20041: LD_INT 3
20043: DIV
20044: PLUS
20045: ST_TO_ADDR
20046: GO 20014
20048: POP
20049: POP
// if Teams [ 3 ] then
20050: LD_EXP 22
20054: PUSH
20055: LD_INT 3
20057: ARRAY
20058: IFFALSE 20110
// for i in Teams [ 3 ] do
20060: LD_ADDR_VAR 0 4
20064: PUSH
20065: LD_EXP 22
20069: PUSH
20070: LD_INT 3
20072: ARRAY
20073: PUSH
20074: FOR_IN
20075: IFFALSE 20108
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20077: LD_ADDR_VAR 0 7
20081: PUSH
20082: LD_VAR 0 7
20086: PUSH
20087: LD_VAR 0 4
20091: PUSH
20092: LD_INT 10
20094: PLUS
20095: PPUSH
20096: CALL_OW 110
20100: PUSH
20101: LD_INT 3
20103: DIV
20104: PLUS
20105: ST_TO_ADDR
20106: GO 20074
20108: POP
20109: POP
// if Teams [ 4 ] then
20110: LD_EXP 22
20114: PUSH
20115: LD_INT 4
20117: ARRAY
20118: IFFALSE 20170
// for i in Teams [ 4 ] do
20120: LD_ADDR_VAR 0 4
20124: PUSH
20125: LD_EXP 22
20129: PUSH
20130: LD_INT 4
20132: ARRAY
20133: PUSH
20134: FOR_IN
20135: IFFALSE 20168
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20137: LD_ADDR_VAR 0 8
20141: PUSH
20142: LD_VAR 0 8
20146: PUSH
20147: LD_VAR 0 4
20151: PUSH
20152: LD_INT 10
20154: PLUS
20155: PPUSH
20156: CALL_OW 110
20160: PUSH
20161: LD_INT 3
20163: DIV
20164: PLUS
20165: ST_TO_ADDR
20166: GO 20134
20168: POP
20169: POP
// if Teams [ 1 ] then
20170: LD_EXP 22
20174: PUSH
20175: LD_INT 1
20177: ARRAY
20178: IFFALSE 20207
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20180: LD_ADDR_VAR 0 3
20184: PUSH
20185: LD_STRING #KingoftheHill-Public-red
20187: PUSH
20188: LD_INT 3
20190: PUSH
20191: LD_VAR 0 5
20195: PUSH
20196: LD_EXP 20
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: ST_TO_ADDR
// if Teams [ 2 ] then
20207: LD_EXP 22
20211: PUSH
20212: LD_INT 2
20214: ARRAY
20215: IFFALSE 20250
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20217: LD_ADDR_VAR 0 3
20221: PUSH
20222: LD_VAR 0 3
20226: PUSH
20227: LD_STRING #KingoftheHill-Public-blue
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: LD_VAR 0 6
20237: PUSH
20238: LD_EXP 20
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: ADD
20249: ST_TO_ADDR
// if Teams [ 3 ] then
20250: LD_EXP 22
20254: PUSH
20255: LD_INT 3
20257: ARRAY
20258: IFFALSE 20293
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20260: LD_ADDR_VAR 0 3
20264: PUSH
20265: LD_VAR 0 3
20269: PUSH
20270: LD_STRING #KingoftheHill-Public-yell
20272: PUSH
20273: LD_INT 2
20275: PUSH
20276: LD_VAR 0 7
20280: PUSH
20281: LD_EXP 20
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: ADD
20292: ST_TO_ADDR
// if Teams [ 4 ] then
20293: LD_EXP 22
20297: PUSH
20298: LD_INT 4
20300: ARRAY
20301: IFFALSE 20336
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20303: LD_ADDR_VAR 0 3
20307: PUSH
20308: LD_VAR 0 3
20312: PUSH
20313: LD_STRING #KingoftheHill-Public-green
20315: PUSH
20316: LD_INT 7
20318: PUSH
20319: LD_VAR 0 8
20323: PUSH
20324: LD_EXP 20
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: ADD
20335: ST_TO_ADDR
// ToLua ( updateScorePoints(2,3, & red & ); ) ;
20336: LD_STRING updateScorePoints(2,3,
20338: PUSH
20339: LD_VAR 0 5
20343: STR
20344: PUSH
20345: LD_STRING );
20347: STR
20348: PPUSH
20349: CALL_OW 559
// ToLua ( updateScorePoints(2,1, & blue & ); ) ;
20353: LD_STRING updateScorePoints(2,1,
20355: PUSH
20356: LD_VAR 0 6
20360: STR
20361: PUSH
20362: LD_STRING );
20364: STR
20365: PPUSH
20366: CALL_OW 559
// ToLua ( updateScorePoints(2,2, & yel & ); ) ;
20370: LD_STRING updateScorePoints(2,2,
20372: PUSH
20373: LD_VAR 0 7
20377: STR
20378: PUSH
20379: LD_STRING );
20381: STR
20382: PPUSH
20383: CALL_OW 559
// ToLua ( updateScorePoints(2,7, & green & ); ) ;
20387: LD_STRING updateScorePoints(2,7,
20389: PUSH
20390: LD_VAR 0 8
20394: STR
20395: PUSH
20396: LD_STRING );
20398: STR
20399: PPUSH
20400: CALL_OW 559
// end else
20404: GO 20841
// if not Team_Game then
20406: LD_EXP 25
20410: NOT
20411: IFFALSE 20469
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
20413: LD_ADDR_VAR 0 3
20417: PUSH
20418: LD_VAR 0 3
20422: PUSH
20423: LD_STRING #KingoftheHill-Private
20425: PUSH
20426: LD_OWVAR 2
20430: PUSH
20431: LD_OWVAR 2
20435: PUSH
20436: LD_VAR 0 2
20440: PUSH
20441: LD_INT 10
20443: PLUS
20444: PPUSH
20445: CALL_OW 110
20449: PUSH
20450: LD_INT 3
20452: DIV
20453: PUSH
20454: LD_EXP 20
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: ADD
20466: ST_TO_ADDR
20467: GO 20841
// begin for i in Teams [ 1 ] do
20469: LD_ADDR_VAR 0 4
20473: PUSH
20474: LD_EXP 22
20478: PUSH
20479: LD_INT 1
20481: ARRAY
20482: PUSH
20483: FOR_IN
20484: IFFALSE 20517
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20486: LD_ADDR_VAR 0 5
20490: PUSH
20491: LD_VAR 0 5
20495: PUSH
20496: LD_VAR 0 4
20500: PUSH
20501: LD_INT 10
20503: PLUS
20504: PPUSH
20505: CALL_OW 110
20509: PUSH
20510: LD_INT 3
20512: DIV
20513: PLUS
20514: ST_TO_ADDR
20515: GO 20483
20517: POP
20518: POP
// for i in Teams [ 2 ] do
20519: LD_ADDR_VAR 0 4
20523: PUSH
20524: LD_EXP 22
20528: PUSH
20529: LD_INT 2
20531: ARRAY
20532: PUSH
20533: FOR_IN
20534: IFFALSE 20567
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20536: LD_ADDR_VAR 0 6
20540: PUSH
20541: LD_VAR 0 6
20545: PUSH
20546: LD_VAR 0 4
20550: PUSH
20551: LD_INT 10
20553: PLUS
20554: PPUSH
20555: CALL_OW 110
20559: PUSH
20560: LD_INT 3
20562: DIV
20563: PLUS
20564: ST_TO_ADDR
20565: GO 20533
20567: POP
20568: POP
// for i in Teams [ 3 ] do
20569: LD_ADDR_VAR 0 4
20573: PUSH
20574: LD_EXP 22
20578: PUSH
20579: LD_INT 3
20581: ARRAY
20582: PUSH
20583: FOR_IN
20584: IFFALSE 20617
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20586: LD_ADDR_VAR 0 7
20590: PUSH
20591: LD_VAR 0 7
20595: PUSH
20596: LD_VAR 0 4
20600: PUSH
20601: LD_INT 10
20603: PLUS
20604: PPUSH
20605: CALL_OW 110
20609: PUSH
20610: LD_INT 3
20612: DIV
20613: PLUS
20614: ST_TO_ADDR
20615: GO 20583
20617: POP
20618: POP
// for i in Teams [ 4 ] do
20619: LD_ADDR_VAR 0 4
20623: PUSH
20624: LD_EXP 22
20628: PUSH
20629: LD_INT 4
20631: ARRAY
20632: PUSH
20633: FOR_IN
20634: IFFALSE 20667
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20636: LD_ADDR_VAR 0 8
20640: PUSH
20641: LD_VAR 0 8
20645: PUSH
20646: LD_VAR 0 4
20650: PUSH
20651: LD_INT 10
20653: PLUS
20654: PPUSH
20655: CALL_OW 110
20659: PUSH
20660: LD_INT 3
20662: DIV
20663: PLUS
20664: ST_TO_ADDR
20665: GO 20633
20667: POP
20668: POP
// if your_side in Teams [ 1 ] then
20669: LD_OWVAR 2
20673: PUSH
20674: LD_EXP 22
20678: PUSH
20679: LD_INT 1
20681: ARRAY
20682: IN
20683: IFFALSE 20712
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20685: LD_ADDR_VAR 0 3
20689: PUSH
20690: LD_STRING #KingoftheHill-Public-red
20692: PUSH
20693: LD_INT 3
20695: PUSH
20696: LD_VAR 0 5
20700: PUSH
20701: LD_EXP 20
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
20712: LD_OWVAR 2
20716: PUSH
20717: LD_EXP 22
20721: PUSH
20722: LD_INT 2
20724: ARRAY
20725: IN
20726: IFFALSE 20755
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20728: LD_ADDR_VAR 0 3
20732: PUSH
20733: LD_STRING #KingoftheHill-Public-blue
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: LD_VAR 0 6
20743: PUSH
20744: LD_EXP 20
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
20755: LD_OWVAR 2
20759: PUSH
20760: LD_EXP 22
20764: PUSH
20765: LD_INT 3
20767: ARRAY
20768: IN
20769: IFFALSE 20798
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20771: LD_ADDR_VAR 0 3
20775: PUSH
20776: LD_STRING #KingoftheHill-Public-yell
20778: PUSH
20779: LD_INT 2
20781: PUSH
20782: LD_VAR 0 7
20786: PUSH
20787: LD_EXP 20
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
20798: LD_OWVAR 2
20802: PUSH
20803: LD_EXP 22
20807: PUSH
20808: LD_INT 4
20810: ARRAY
20811: IN
20812: IFFALSE 20841
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20814: LD_ADDR_VAR 0 3
20818: PUSH
20819: LD_STRING #KingoftheHill-Public-green
20821: PUSH
20822: LD_INT 7
20824: PUSH
20825: LD_VAR 0 8
20829: PUSH
20830: LD_EXP 20
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: ST_TO_ADDR
// end ; Display_kings := vypis ;
20841: LD_ADDR_EXP 67
20845: PUSH
20846: LD_VAR 0 3
20850: ST_TO_ADDR
// end ;
20851: LD_VAR 0 1
20855: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
20856: LD_INT 0
20858: PPUSH
20859: PPUSH
20860: PPUSH
20861: PPUSH
20862: PPUSH
20863: PPUSH
20864: PPUSH
20865: PPUSH
20866: PPUSH
// side := [ ] ;
20867: LD_ADDR_VAR 0 2
20871: PUSH
20872: EMPTY
20873: ST_TO_ADDR
// red = 0 ;
20874: LD_ADDR_VAR 0 5
20878: PUSH
20879: LD_INT 0
20881: ST_TO_ADDR
// blue = 0 ;
20882: LD_ADDR_VAR 0 6
20886: PUSH
20887: LD_INT 0
20889: ST_TO_ADDR
// yel = 0 ;
20890: LD_ADDR_VAR 0 7
20894: PUSH
20895: LD_INT 0
20897: ST_TO_ADDR
// green = 0 ;
20898: LD_ADDR_VAR 0 8
20902: PUSH
20903: LD_INT 0
20905: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
20906: LD_ADDR_VAR 0 3
20910: PUSH
20911: LD_INT 19
20913: PPUSH
20914: LD_INT 21
20916: PUSH
20917: LD_INT 3
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 53
20926: PUSH
20927: EMPTY
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PPUSH
20934: CALL_OW 70
20938: ST_TO_ADDR
// for un in list do
20939: LD_ADDR_VAR 0 4
20943: PUSH
20944: LD_VAR 0 3
20948: PUSH
20949: FOR_IN
20950: IFFALSE 20975
// side := side union GetSide ( un ) ;
20952: LD_ADDR_VAR 0 2
20956: PUSH
20957: LD_VAR 0 2
20961: PUSH
20962: LD_VAR 0 4
20966: PPUSH
20967: CALL_OW 255
20971: UNION
20972: ST_TO_ADDR
20973: GO 20949
20975: POP
20976: POP
// if side <> 1 then
20977: LD_VAR 0 2
20981: PUSH
20982: LD_INT 1
20984: NONEQUAL
20985: IFFALSE 20989
// exit ;
20987: GO 21352
// side := side [ 1 ] ;
20989: LD_ADDR_VAR 0 2
20993: PUSH
20994: LD_VAR 0 2
20998: PUSH
20999: LD_INT 1
21001: ARRAY
21002: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
21003: LD_VAR 0 2
21007: PUSH
21008: LD_INT 10
21010: PLUS
21011: PPUSH
21012: LD_VAR 0 2
21016: PUSH
21017: LD_INT 10
21019: PLUS
21020: PPUSH
21021: CALL_OW 110
21025: PUSH
21026: LD_INT 1
21028: PLUS
21029: PPUSH
21030: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
21034: LD_VAR 0 2
21038: PPUSH
21039: LD_VAR 0 2
21043: PUSH
21044: LD_INT 10
21046: PLUS
21047: PPUSH
21048: CALL_OW 110
21052: PUSH
21053: LD_INT 3
21055: DIV
21056: PPUSH
21057: LD_INT 2
21059: PPUSH
21060: CALL 17918 0 3
// if not Team_Game then
21064: LD_EXP 25
21068: NOT
21069: IFFALSE 21352
// if GetTag ( side + 10 ) >= final_count * 3 then
21071: LD_VAR 0 2
21075: PUSH
21076: LD_INT 10
21078: PLUS
21079: PPUSH
21080: CALL_OW 110
21084: PUSH
21085: LD_EXP 20
21089: PUSH
21090: LD_INT 3
21092: MUL
21093: GREATEREQUAL
21094: IFFALSE 21101
// enable ( 3 ) else
21096: LD_INT 3
21098: ENABLE_MARKED
21099: GO 21352
// begin for i in Teams [ 1 ] do
21101: LD_ADDR_VAR 0 9
21105: PUSH
21106: LD_EXP 22
21110: PUSH
21111: LD_INT 1
21113: ARRAY
21114: PUSH
21115: FOR_IN
21116: IFFALSE 21149
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21118: LD_ADDR_VAR 0 5
21122: PUSH
21123: LD_VAR 0 5
21127: PUSH
21128: LD_VAR 0 9
21132: PUSH
21133: LD_INT 10
21135: PLUS
21136: PPUSH
21137: CALL_OW 110
21141: PUSH
21142: LD_INT 3
21144: DIV
21145: PLUS
21146: ST_TO_ADDR
21147: GO 21115
21149: POP
21150: POP
// for i in Teams [ 2 ] do
21151: LD_ADDR_VAR 0 9
21155: PUSH
21156: LD_EXP 22
21160: PUSH
21161: LD_INT 2
21163: ARRAY
21164: PUSH
21165: FOR_IN
21166: IFFALSE 21199
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21168: LD_ADDR_VAR 0 6
21172: PUSH
21173: LD_VAR 0 6
21177: PUSH
21178: LD_VAR 0 9
21182: PUSH
21183: LD_INT 10
21185: PLUS
21186: PPUSH
21187: CALL_OW 110
21191: PUSH
21192: LD_INT 3
21194: DIV
21195: PLUS
21196: ST_TO_ADDR
21197: GO 21165
21199: POP
21200: POP
// for i in Teams [ 3 ] do
21201: LD_ADDR_VAR 0 9
21205: PUSH
21206: LD_EXP 22
21210: PUSH
21211: LD_INT 3
21213: ARRAY
21214: PUSH
21215: FOR_IN
21216: IFFALSE 21249
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21218: LD_ADDR_VAR 0 7
21222: PUSH
21223: LD_VAR 0 7
21227: PUSH
21228: LD_VAR 0 9
21232: PUSH
21233: LD_INT 10
21235: PLUS
21236: PPUSH
21237: CALL_OW 110
21241: PUSH
21242: LD_INT 3
21244: DIV
21245: PLUS
21246: ST_TO_ADDR
21247: GO 21215
21249: POP
21250: POP
// for i in Teams [ 4 ] do
21251: LD_ADDR_VAR 0 9
21255: PUSH
21256: LD_EXP 22
21260: PUSH
21261: LD_INT 4
21263: ARRAY
21264: PUSH
21265: FOR_IN
21266: IFFALSE 21299
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21268: LD_ADDR_VAR 0 8
21272: PUSH
21273: LD_VAR 0 8
21277: PUSH
21278: LD_VAR 0 9
21282: PUSH
21283: LD_INT 10
21285: PLUS
21286: PPUSH
21287: CALL_OW 110
21291: PUSH
21292: LD_INT 3
21294: DIV
21295: PLUS
21296: ST_TO_ADDR
21297: GO 21265
21299: POP
21300: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
21301: LD_VAR 0 5
21305: PUSH
21306: LD_EXP 20
21310: GREATEREQUAL
21311: PUSH
21312: LD_VAR 0 6
21316: PUSH
21317: LD_EXP 20
21321: GREATEREQUAL
21322: OR
21323: PUSH
21324: LD_VAR 0 7
21328: PUSH
21329: LD_EXP 20
21333: GREATEREQUAL
21334: OR
21335: PUSH
21336: LD_VAR 0 8
21340: PUSH
21341: LD_EXP 20
21345: GREATEREQUAL
21346: OR
21347: IFFALSE 21352
// enable ( 3 ) ;
21349: LD_INT 3
21351: ENABLE_MARKED
// end ; end ;
21352: LD_VAR 0 1
21356: RET
// every 0 0$1 marked 2 do
21357: GO 21359
21359: DISABLE
// begin count_king ;
21360: CALL 20856 0 0
// show_public_points ;
21364: CALL 19731 0 0
// enable ;
21368: ENABLE
// end ;
21369: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
21370: GO 21372
21372: DISABLE
21373: LD_INT 0
21375: PPUSH
21376: PPUSH
21377: PPUSH
21378: PPUSH
21379: PPUSH
21380: PPUSH
// begin win := [ ] ;
21381: LD_ADDR_LOC 35
21385: PUSH
21386: EMPTY
21387: ST_TO_ADDR
// red = 0 ;
21388: LD_ADDR_VAR 0 2
21392: PUSH
21393: LD_INT 0
21395: ST_TO_ADDR
// blue = 0 ;
21396: LD_ADDR_VAR 0 3
21400: PUSH
21401: LD_INT 0
21403: ST_TO_ADDR
// yel = 0 ;
21404: LD_ADDR_VAR 0 4
21408: PUSH
21409: LD_INT 0
21411: ST_TO_ADDR
// green = 0 ;
21412: LD_ADDR_VAR 0 5
21416: PUSH
21417: LD_INT 0
21419: ST_TO_ADDR
// if not Team_Game then
21420: LD_EXP 25
21424: NOT
21425: IFFALSE 21502
// begin for side = 1 to 8 do
21427: LD_ADDR_VAR 0 1
21431: PUSH
21432: DOUBLE
21433: LD_INT 1
21435: DEC
21436: ST_TO_ADDR
21437: LD_INT 8
21439: PUSH
21440: FOR_TO
21441: IFFALSE 21486
// if GetTag ( side + 10 ) >= final_count * 3 then
21443: LD_VAR 0 1
21447: PUSH
21448: LD_INT 10
21450: PLUS
21451: PPUSH
21452: CALL_OW 110
21456: PUSH
21457: LD_EXP 20
21461: PUSH
21462: LD_INT 3
21464: MUL
21465: GREATEREQUAL
21466: IFFALSE 21484
// win := win ^ side ;
21468: LD_ADDR_LOC 35
21472: PUSH
21473: LD_LOC 35
21477: PUSH
21478: LD_VAR 0 1
21482: ADD
21483: ST_TO_ADDR
21484: GO 21440
21486: POP
21487: POP
// if win then
21488: LD_LOC 35
21492: IFFALSE 21499
// enable ( 4 ) else
21494: LD_INT 4
21496: ENABLE_MARKED
21497: GO 21500
// enable ;
21499: ENABLE
// end else
21500: GO 21818
// begin for i in Teams [ 1 ] do
21502: LD_ADDR_VAR 0 6
21506: PUSH
21507: LD_EXP 22
21511: PUSH
21512: LD_INT 1
21514: ARRAY
21515: PUSH
21516: FOR_IN
21517: IFFALSE 21550
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21519: LD_ADDR_VAR 0 2
21523: PUSH
21524: LD_VAR 0 2
21528: PUSH
21529: LD_VAR 0 6
21533: PUSH
21534: LD_INT 10
21536: PLUS
21537: PPUSH
21538: CALL_OW 110
21542: PUSH
21543: LD_INT 3
21545: DIV
21546: PLUS
21547: ST_TO_ADDR
21548: GO 21516
21550: POP
21551: POP
// for i in Teams [ 2 ] do
21552: LD_ADDR_VAR 0 6
21556: PUSH
21557: LD_EXP 22
21561: PUSH
21562: LD_INT 2
21564: ARRAY
21565: PUSH
21566: FOR_IN
21567: IFFALSE 21600
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21569: LD_ADDR_VAR 0 3
21573: PUSH
21574: LD_VAR 0 3
21578: PUSH
21579: LD_VAR 0 6
21583: PUSH
21584: LD_INT 10
21586: PLUS
21587: PPUSH
21588: CALL_OW 110
21592: PUSH
21593: LD_INT 3
21595: DIV
21596: PLUS
21597: ST_TO_ADDR
21598: GO 21566
21600: POP
21601: POP
// for i in Teams [ 3 ] do
21602: LD_ADDR_VAR 0 6
21606: PUSH
21607: LD_EXP 22
21611: PUSH
21612: LD_INT 3
21614: ARRAY
21615: PUSH
21616: FOR_IN
21617: IFFALSE 21650
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21619: LD_ADDR_VAR 0 4
21623: PUSH
21624: LD_VAR 0 4
21628: PUSH
21629: LD_VAR 0 6
21633: PUSH
21634: LD_INT 10
21636: PLUS
21637: PPUSH
21638: CALL_OW 110
21642: PUSH
21643: LD_INT 3
21645: DIV
21646: PLUS
21647: ST_TO_ADDR
21648: GO 21616
21650: POP
21651: POP
// for i in Teams [ 4 ] do
21652: LD_ADDR_VAR 0 6
21656: PUSH
21657: LD_EXP 22
21661: PUSH
21662: LD_INT 4
21664: ARRAY
21665: PUSH
21666: FOR_IN
21667: IFFALSE 21700
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21669: LD_ADDR_VAR 0 5
21673: PUSH
21674: LD_VAR 0 5
21678: PUSH
21679: LD_VAR 0 6
21683: PUSH
21684: LD_INT 10
21686: PLUS
21687: PPUSH
21688: CALL_OW 110
21692: PUSH
21693: LD_INT 3
21695: DIV
21696: PLUS
21697: ST_TO_ADDR
21698: GO 21666
21700: POP
21701: POP
// if red >= final_count then
21702: LD_VAR 0 2
21706: PUSH
21707: LD_EXP 20
21711: GREATEREQUAL
21712: IFFALSE 21728
// win = teams [ 1 ] ;
21714: LD_ADDR_LOC 35
21718: PUSH
21719: LD_EXP 22
21723: PUSH
21724: LD_INT 1
21726: ARRAY
21727: ST_TO_ADDR
// if blue >= final_count then
21728: LD_VAR 0 3
21732: PUSH
21733: LD_EXP 20
21737: GREATEREQUAL
21738: IFFALSE 21754
// win = teams [ 2 ] ;
21740: LD_ADDR_LOC 35
21744: PUSH
21745: LD_EXP 22
21749: PUSH
21750: LD_INT 2
21752: ARRAY
21753: ST_TO_ADDR
// if yel >= final_count then
21754: LD_VAR 0 4
21758: PUSH
21759: LD_EXP 20
21763: GREATEREQUAL
21764: IFFALSE 21780
// win = teams [ 3 ] ;
21766: LD_ADDR_LOC 35
21770: PUSH
21771: LD_EXP 22
21775: PUSH
21776: LD_INT 3
21778: ARRAY
21779: ST_TO_ADDR
// if green >= final_count then
21780: LD_VAR 0 5
21784: PUSH
21785: LD_EXP 20
21789: GREATEREQUAL
21790: IFFALSE 21806
// win = teams [ 4 ] ;
21792: LD_ADDR_LOC 35
21796: PUSH
21797: LD_EXP 22
21801: PUSH
21802: LD_INT 4
21804: ARRAY
21805: ST_TO_ADDR
// if win then
21806: LD_LOC 35
21810: IFFALSE 21817
// enable ( 4 ) else
21812: LD_INT 4
21814: ENABLE_MARKED
21815: GO 21818
// enable ;
21817: ENABLE
// end ; end ;
21818: PPOPN 6
21820: END
// every 0 0$1 marked 4 do
21821: GO 21823
21823: DISABLE
// begin if Player_Side in win then
21824: LD_EXP 27
21828: PUSH
21829: LD_LOC 35
21833: IN
21834: IFFALSE 21850
// begin wait ( 0 0$2 ) ;
21836: LD_INT 70
21838: PPUSH
21839: CALL_OW 67
// enable ( 401 ) ;
21843: LD_INT 401
21845: ENABLE_MARKED
// exit ;
21846: GO 21866
// end else
21848: GO 21866
// begin wait ( 0 0$2 ) ;
21850: LD_INT 70
21852: PPUSH
21853: CALL_OW 67
// Multiplayer_Loose_Message ;
21857: CALL_OW 521
// enable ( 400 ) ;
21861: LD_INT 400
21863: ENABLE_MARKED
// exit ;
21864: GO 21866
// end ; end ; end_of_file
21866: END
// export function SetMpTechs ( ) ; var side , i ; begin
21867: LD_INT 0
21869: PPUSH
21870: PPUSH
21871: PPUSH
// for side = 1 to 8 do
21872: LD_ADDR_VAR 0 2
21876: PUSH
21877: DOUBLE
21878: LD_INT 1
21880: DEC
21881: ST_TO_ADDR
21882: LD_INT 8
21884: PUSH
21885: FOR_TO
21886: IFFALSE 22007
// begin for i = 1 to 72 do
21888: LD_ADDR_VAR 0 3
21892: PUSH
21893: DOUBLE
21894: LD_INT 1
21896: DEC
21897: ST_TO_ADDR
21898: LD_INT 72
21900: PUSH
21901: FOR_TO
21902: IFFALSE 21933
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
21904: LD_VAR 0 3
21908: PPUSH
21909: LD_VAR 0 2
21913: PPUSH
21914: LD_INT 0
21916: PPUSH
21917: LD_VAR 0 3
21921: PPUSH
21922: CALL_OW 565
21926: PPUSH
21927: CALL_OW 322
21931: GO 21901
21933: POP
21934: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
21935: LD_INT 73
21937: PPUSH
21938: LD_VAR 0 2
21942: PPUSH
21943: LD_INT 0
21945: PPUSH
21946: LD_INT 25
21948: PPUSH
21949: CALL_OW 565
21953: PPUSH
21954: CALL_OW 322
// for i = 0 to 40 do
21958: LD_ADDR_VAR 0 3
21962: PUSH
21963: DOUBLE
21964: LD_INT 0
21966: DEC
21967: ST_TO_ADDR
21968: LD_INT 40
21970: PUSH
21971: FOR_TO
21972: IFFALSE 22003
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
21974: LD_VAR 0 3
21978: PPUSH
21979: LD_VAR 0 2
21983: PPUSH
21984: LD_INT 1
21986: PPUSH
21987: LD_VAR 0 3
21991: PPUSH
21992: CALL_OW 565
21996: PPUSH
21997: CALL_OW 324
22001: GO 21971
22003: POP
22004: POP
// end ;
22005: GO 21885
22007: POP
22008: POP
// end ;
22009: LD_VAR 0 1
22013: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
22014: LD_INT 0
22016: PPUSH
22017: PPUSH
22018: PPUSH
// for side = 1 to 8 do
22019: LD_ADDR_VAR 0 3
22023: PUSH
22024: DOUBLE
22025: LD_INT 1
22027: DEC
22028: ST_TO_ADDR
22029: LD_INT 8
22031: PUSH
22032: FOR_TO
22033: IFFALSE 26029
// begin for i = 1 to 73 do
22035: LD_ADDR_VAR 0 4
22039: PUSH
22040: DOUBLE
22041: LD_INT 1
22043: DEC
22044: ST_TO_ADDR
22045: LD_INT 73
22047: PUSH
22048: FOR_TO
22049: IFFALSE 22070
// SetTech ( i , side , state_disabled ) ;
22051: LD_VAR 0 4
22055: PPUSH
22056: LD_VAR 0 3
22060: PPUSH
22061: LD_INT 0
22063: PPUSH
22064: CALL_OW 322
22068: GO 22048
22070: POP
22071: POP
// for i = 0 to 40 do
22072: LD_ADDR_VAR 0 4
22076: PUSH
22077: DOUBLE
22078: LD_INT 0
22080: DEC
22081: ST_TO_ADDR
22082: LD_INT 40
22084: PUSH
22085: FOR_TO
22086: IFFALSE 22107
// SetRestrict ( i , side , false ) ;
22088: LD_VAR 0 4
22092: PPUSH
22093: LD_VAR 0 3
22097: PPUSH
22098: LD_INT 0
22100: PPUSH
22101: CALL_OW 324
22105: GO 22085
22107: POP
22108: POP
// case level of 1 :
22109: LD_VAR 0 1
22113: PUSH
22114: LD_INT 1
22116: DOUBLE
22117: EQUAL
22118: IFTRUE 22122
22120: GO 22275
22122: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22123: LD_INT 35
22125: PPUSH
22126: LD_VAR 0 3
22130: PPUSH
22131: LD_INT 1
22133: PPUSH
22134: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22138: LD_INT 45
22140: PPUSH
22141: LD_VAR 0 3
22145: PPUSH
22146: LD_INT 1
22148: PPUSH
22149: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22153: LD_INT 46
22155: PPUSH
22156: LD_VAR 0 3
22160: PPUSH
22161: LD_INT 1
22163: PPUSH
22164: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22168: LD_INT 47
22170: PPUSH
22171: LD_VAR 0 3
22175: PPUSH
22176: LD_INT 1
22178: PPUSH
22179: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22183: LD_INT 0
22185: PPUSH
22186: LD_VAR 0 3
22190: PPUSH
22191: LD_INT 1
22193: PPUSH
22194: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22198: LD_INT 2
22200: PPUSH
22201: LD_VAR 0 3
22205: PPUSH
22206: LD_INT 1
22208: PPUSH
22209: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22213: LD_INT 4
22215: PPUSH
22216: LD_VAR 0 3
22220: PPUSH
22221: LD_INT 1
22223: PPUSH
22224: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22228: LD_INT 6
22230: PPUSH
22231: LD_VAR 0 3
22235: PPUSH
22236: LD_INT 1
22238: PPUSH
22239: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22243: LD_INT 29
22245: PPUSH
22246: LD_VAR 0 3
22250: PPUSH
22251: LD_INT 1
22253: PPUSH
22254: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22258: LD_INT 31
22260: PPUSH
22261: LD_VAR 0 3
22265: PPUSH
22266: LD_INT 1
22268: PPUSH
22269: CALL_OW 324
// end ; 2 :
22273: GO 26027
22275: LD_INT 2
22277: DOUBLE
22278: EQUAL
22279: IFTRUE 22283
22281: GO 22481
22283: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22284: LD_INT 35
22286: PPUSH
22287: LD_VAR 0 3
22291: PPUSH
22292: LD_INT 1
22294: PPUSH
22295: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22299: LD_INT 45
22301: PPUSH
22302: LD_VAR 0 3
22306: PPUSH
22307: LD_INT 1
22309: PPUSH
22310: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22314: LD_INT 46
22316: PPUSH
22317: LD_VAR 0 3
22321: PPUSH
22322: LD_INT 1
22324: PPUSH
22325: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22329: LD_INT 47
22331: PPUSH
22332: LD_VAR 0 3
22336: PPUSH
22337: LD_INT 1
22339: PPUSH
22340: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22344: LD_INT 1
22346: PPUSH
22347: LD_VAR 0 3
22351: PPUSH
22352: LD_INT 1
22354: PPUSH
22355: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22359: LD_INT 2
22361: PPUSH
22362: LD_VAR 0 3
22366: PPUSH
22367: LD_INT 1
22369: PPUSH
22370: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22374: LD_INT 11
22376: PPUSH
22377: LD_VAR 0 3
22381: PPUSH
22382: LD_INT 1
22384: PPUSH
22385: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22389: LD_INT 0
22391: PPUSH
22392: LD_VAR 0 3
22396: PPUSH
22397: LD_INT 1
22399: PPUSH
22400: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22404: LD_INT 2
22406: PPUSH
22407: LD_VAR 0 3
22411: PPUSH
22412: LD_INT 1
22414: PPUSH
22415: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22419: LD_INT 4
22421: PPUSH
22422: LD_VAR 0 3
22426: PPUSH
22427: LD_INT 1
22429: PPUSH
22430: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22434: LD_INT 6
22436: PPUSH
22437: LD_VAR 0 3
22441: PPUSH
22442: LD_INT 1
22444: PPUSH
22445: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22449: LD_INT 29
22451: PPUSH
22452: LD_VAR 0 3
22456: PPUSH
22457: LD_INT 1
22459: PPUSH
22460: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22464: LD_INT 31
22466: PPUSH
22467: LD_VAR 0 3
22471: PPUSH
22472: LD_INT 1
22474: PPUSH
22475: CALL_OW 324
// end ; 3 :
22479: GO 26027
22481: LD_INT 3
22483: DOUBLE
22484: EQUAL
22485: IFTRUE 22489
22487: GO 22942
22489: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22490: LD_INT 35
22492: PPUSH
22493: LD_VAR 0 3
22497: PPUSH
22498: LD_INT 1
22500: PPUSH
22501: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22505: LD_INT 45
22507: PPUSH
22508: LD_VAR 0 3
22512: PPUSH
22513: LD_INT 1
22515: PPUSH
22516: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22520: LD_INT 46
22522: PPUSH
22523: LD_VAR 0 3
22527: PPUSH
22528: LD_INT 1
22530: PPUSH
22531: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22535: LD_INT 47
22537: PPUSH
22538: LD_VAR 0 3
22542: PPUSH
22543: LD_INT 1
22545: PPUSH
22546: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22550: LD_INT 1
22552: PPUSH
22553: LD_VAR 0 3
22557: PPUSH
22558: LD_INT 1
22560: PPUSH
22561: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22565: LD_INT 2
22567: PPUSH
22568: LD_VAR 0 3
22572: PPUSH
22573: LD_INT 1
22575: PPUSH
22576: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22580: LD_INT 11
22582: PPUSH
22583: LD_VAR 0 3
22587: PPUSH
22588: LD_INT 1
22590: PPUSH
22591: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22595: LD_INT 48
22597: PPUSH
22598: LD_VAR 0 3
22602: PPUSH
22603: LD_INT 1
22605: PPUSH
22606: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22610: LD_INT 69
22612: PPUSH
22613: LD_VAR 0 3
22617: PPUSH
22618: LD_INT 1
22620: PPUSH
22621: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22625: LD_INT 39
22627: PPUSH
22628: LD_VAR 0 3
22632: PPUSH
22633: LD_INT 1
22635: PPUSH
22636: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22640: LD_INT 43
22642: PPUSH
22643: LD_VAR 0 3
22647: PPUSH
22648: LD_INT 1
22650: PPUSH
22651: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22655: LD_INT 51
22657: PPUSH
22658: LD_VAR 0 3
22662: PPUSH
22663: LD_INT 1
22665: PPUSH
22666: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22670: LD_INT 6
22672: PPUSH
22673: LD_VAR 0 3
22677: PPUSH
22678: LD_INT 1
22680: PPUSH
22681: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22685: LD_INT 0
22687: PPUSH
22688: LD_VAR 0 3
22692: PPUSH
22693: LD_INT 1
22695: PPUSH
22696: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22700: LD_INT 2
22702: PPUSH
22703: LD_VAR 0 3
22707: PPUSH
22708: LD_INT 1
22710: PPUSH
22711: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22715: LD_INT 3
22717: PPUSH
22718: LD_VAR 0 3
22722: PPUSH
22723: LD_INT 1
22725: PPUSH
22726: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22730: LD_INT 4
22732: PPUSH
22733: LD_VAR 0 3
22737: PPUSH
22738: LD_INT 1
22740: PPUSH
22741: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22745: LD_INT 6
22747: PPUSH
22748: LD_VAR 0 3
22752: PPUSH
22753: LD_INT 1
22755: PPUSH
22756: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22760: LD_INT 7
22762: PPUSH
22763: LD_VAR 0 3
22767: PPUSH
22768: LD_INT 1
22770: PPUSH
22771: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22775: LD_INT 8
22777: PPUSH
22778: LD_VAR 0 3
22782: PPUSH
22783: LD_INT 1
22785: PPUSH
22786: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22790: LD_INT 10
22792: PPUSH
22793: LD_VAR 0 3
22797: PPUSH
22798: LD_INT 1
22800: PPUSH
22801: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22805: LD_INT 15
22807: PPUSH
22808: LD_VAR 0 3
22812: PPUSH
22813: LD_INT 1
22815: PPUSH
22816: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22820: LD_INT 16
22822: PPUSH
22823: LD_VAR 0 3
22827: PPUSH
22828: LD_INT 1
22830: PPUSH
22831: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22835: LD_INT 17
22837: PPUSH
22838: LD_VAR 0 3
22842: PPUSH
22843: LD_INT 1
22845: PPUSH
22846: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22850: LD_INT 20
22852: PPUSH
22853: LD_VAR 0 3
22857: PPUSH
22858: LD_INT 1
22860: PPUSH
22861: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22865: LD_INT 26
22867: PPUSH
22868: LD_VAR 0 3
22872: PPUSH
22873: LD_INT 1
22875: PPUSH
22876: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22880: LD_INT 27
22882: PPUSH
22883: LD_VAR 0 3
22887: PPUSH
22888: LD_INT 1
22890: PPUSH
22891: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22895: LD_INT 29
22897: PPUSH
22898: LD_VAR 0 3
22902: PPUSH
22903: LD_INT 1
22905: PPUSH
22906: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22910: LD_INT 31
22912: PPUSH
22913: LD_VAR 0 3
22917: PPUSH
22918: LD_INT 1
22920: PPUSH
22921: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22925: LD_INT 32
22927: PPUSH
22928: LD_VAR 0 3
22932: PPUSH
22933: LD_INT 1
22935: PPUSH
22936: CALL_OW 324
// end ; 4 :
22940: GO 26027
22942: LD_INT 4
22944: DOUBLE
22945: EQUAL
22946: IFTRUE 22950
22948: GO 23898
22950: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22951: LD_INT 35
22953: PPUSH
22954: LD_VAR 0 3
22958: PPUSH
22959: LD_INT 1
22961: PPUSH
22962: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22966: LD_INT 45
22968: PPUSH
22969: LD_VAR 0 3
22973: PPUSH
22974: LD_INT 1
22976: PPUSH
22977: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22981: LD_INT 46
22983: PPUSH
22984: LD_VAR 0 3
22988: PPUSH
22989: LD_INT 1
22991: PPUSH
22992: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22996: LD_INT 47
22998: PPUSH
22999: LD_VAR 0 3
23003: PPUSH
23004: LD_INT 1
23006: PPUSH
23007: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23011: LD_INT 1
23013: PPUSH
23014: LD_VAR 0 3
23018: PPUSH
23019: LD_INT 1
23021: PPUSH
23022: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23026: LD_INT 2
23028: PPUSH
23029: LD_VAR 0 3
23033: PPUSH
23034: LD_INT 1
23036: PPUSH
23037: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23041: LD_INT 11
23043: PPUSH
23044: LD_VAR 0 3
23048: PPUSH
23049: LD_INT 1
23051: PPUSH
23052: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23056: LD_INT 20
23058: PPUSH
23059: LD_VAR 0 3
23063: PPUSH
23064: LD_INT 1
23066: PPUSH
23067: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23071: LD_INT 48
23073: PPUSH
23074: LD_VAR 0 3
23078: PPUSH
23079: LD_INT 1
23081: PPUSH
23082: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23086: LD_INT 49
23088: PPUSH
23089: LD_VAR 0 3
23093: PPUSH
23094: LD_INT 1
23096: PPUSH
23097: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23101: LD_INT 69
23103: PPUSH
23104: LD_VAR 0 3
23108: PPUSH
23109: LD_INT 1
23111: PPUSH
23112: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23116: LD_INT 39
23118: PPUSH
23119: LD_VAR 0 3
23123: PPUSH
23124: LD_INT 1
23126: PPUSH
23127: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23131: LD_INT 34
23133: PPUSH
23134: LD_VAR 0 3
23138: PPUSH
23139: LD_INT 1
23141: PPUSH
23142: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23146: LD_INT 42
23148: PPUSH
23149: LD_VAR 0 3
23153: PPUSH
23154: LD_INT 1
23156: PPUSH
23157: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23161: LD_INT 44
23163: PPUSH
23164: LD_VAR 0 3
23168: PPUSH
23169: LD_INT 1
23171: PPUSH
23172: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23176: LD_INT 41
23178: PPUSH
23179: LD_VAR 0 3
23183: PPUSH
23184: LD_INT 1
23186: PPUSH
23187: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23191: LD_INT 43
23193: PPUSH
23194: LD_VAR 0 3
23198: PPUSH
23199: LD_INT 1
23201: PPUSH
23202: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23206: LD_INT 70
23208: PPUSH
23209: LD_VAR 0 3
23213: PPUSH
23214: LD_INT 1
23216: PPUSH
23217: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23221: LD_INT 51
23223: PPUSH
23224: LD_VAR 0 3
23228: PPUSH
23229: LD_INT 1
23231: PPUSH
23232: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23236: LD_INT 52
23238: PPUSH
23239: LD_VAR 0 3
23243: PPUSH
23244: LD_INT 1
23246: PPUSH
23247: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23251: LD_INT 6
23253: PPUSH
23254: LD_VAR 0 3
23258: PPUSH
23259: LD_INT 1
23261: PPUSH
23262: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23266: LD_INT 15
23268: PPUSH
23269: LD_VAR 0 3
23273: PPUSH
23274: LD_INT 1
23276: PPUSH
23277: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23281: LD_INT 7
23283: PPUSH
23284: LD_VAR 0 3
23288: PPUSH
23289: LD_INT 1
23291: PPUSH
23292: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23296: LD_INT 12
23298: PPUSH
23299: LD_VAR 0 3
23303: PPUSH
23304: LD_INT 1
23306: PPUSH
23307: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23311: LD_INT 18
23313: PPUSH
23314: LD_VAR 0 3
23318: PPUSH
23319: LD_INT 1
23321: PPUSH
23322: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23326: LD_INT 60
23328: PPUSH
23329: LD_VAR 0 3
23333: PPUSH
23334: LD_INT 1
23336: PPUSH
23337: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23341: LD_INT 9
23343: PPUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: LD_INT 1
23351: PPUSH
23352: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23356: LD_INT 30
23358: PPUSH
23359: LD_VAR 0 3
23363: PPUSH
23364: LD_INT 1
23366: PPUSH
23367: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23371: LD_INT 37
23373: PPUSH
23374: LD_VAR 0 3
23378: PPUSH
23379: LD_INT 1
23381: PPUSH
23382: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23386: LD_INT 5
23388: PPUSH
23389: LD_VAR 0 3
23393: PPUSH
23394: LD_INT 1
23396: PPUSH
23397: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23401: LD_INT 66
23403: PPUSH
23404: LD_VAR 0 3
23408: PPUSH
23409: LD_INT 1
23411: PPUSH
23412: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23416: LD_INT 21
23418: PPUSH
23419: LD_VAR 0 3
23423: PPUSH
23424: LD_INT 1
23426: PPUSH
23427: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23431: LD_INT 22
23433: PPUSH
23434: LD_VAR 0 3
23438: PPUSH
23439: LD_INT 1
23441: PPUSH
23442: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23446: LD_INT 54
23448: PPUSH
23449: LD_VAR 0 3
23453: PPUSH
23454: LD_INT 1
23456: PPUSH
23457: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23461: LD_INT 0
23463: PPUSH
23464: LD_VAR 0 3
23468: PPUSH
23469: LD_INT 1
23471: PPUSH
23472: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23476: LD_INT 1
23478: PPUSH
23479: LD_VAR 0 3
23483: PPUSH
23484: LD_INT 1
23486: PPUSH
23487: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23491: LD_INT 2
23493: PPUSH
23494: LD_VAR 0 3
23498: PPUSH
23499: LD_INT 1
23501: PPUSH
23502: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23506: LD_INT 3
23508: PPUSH
23509: LD_VAR 0 3
23513: PPUSH
23514: LD_INT 1
23516: PPUSH
23517: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23521: LD_INT 4
23523: PPUSH
23524: LD_VAR 0 3
23528: PPUSH
23529: LD_INT 1
23531: PPUSH
23532: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23536: LD_INT 5
23538: PPUSH
23539: LD_VAR 0 3
23543: PPUSH
23544: LD_INT 1
23546: PPUSH
23547: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23551: LD_INT 6
23553: PPUSH
23554: LD_VAR 0 3
23558: PPUSH
23559: LD_INT 1
23561: PPUSH
23562: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23566: LD_INT 7
23568: PPUSH
23569: LD_VAR 0 3
23573: PPUSH
23574: LD_INT 1
23576: PPUSH
23577: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23581: LD_INT 8
23583: PPUSH
23584: LD_VAR 0 3
23588: PPUSH
23589: LD_INT 1
23591: PPUSH
23592: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23596: LD_INT 10
23598: PPUSH
23599: LD_VAR 0 3
23603: PPUSH
23604: LD_INT 1
23606: PPUSH
23607: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23611: LD_INT 11
23613: PPUSH
23614: LD_VAR 0 3
23618: PPUSH
23619: LD_INT 1
23621: PPUSH
23622: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23626: LD_INT 12
23628: PPUSH
23629: LD_VAR 0 3
23633: PPUSH
23634: LD_INT 1
23636: PPUSH
23637: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23641: LD_INT 13
23643: PPUSH
23644: LD_VAR 0 3
23648: PPUSH
23649: LD_INT 1
23651: PPUSH
23652: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23656: LD_INT 14
23658: PPUSH
23659: LD_VAR 0 3
23663: PPUSH
23664: LD_INT 1
23666: PPUSH
23667: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23671: LD_INT 15
23673: PPUSH
23674: LD_VAR 0 3
23678: PPUSH
23679: LD_INT 1
23681: PPUSH
23682: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23686: LD_INT 16
23688: PPUSH
23689: LD_VAR 0 3
23693: PPUSH
23694: LD_INT 1
23696: PPUSH
23697: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23701: LD_INT 17
23703: PPUSH
23704: LD_VAR 0 3
23708: PPUSH
23709: LD_INT 1
23711: PPUSH
23712: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23716: LD_INT 19
23718: PPUSH
23719: LD_VAR 0 3
23723: PPUSH
23724: LD_INT 1
23726: PPUSH
23727: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23731: LD_INT 20
23733: PPUSH
23734: LD_VAR 0 3
23738: PPUSH
23739: LD_INT 1
23741: PPUSH
23742: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23746: LD_INT 21
23748: PPUSH
23749: LD_VAR 0 3
23753: PPUSH
23754: LD_INT 1
23756: PPUSH
23757: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23761: LD_INT 23
23763: PPUSH
23764: LD_VAR 0 3
23768: PPUSH
23769: LD_INT 1
23771: PPUSH
23772: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23776: LD_INT 26
23778: PPUSH
23779: LD_VAR 0 3
23783: PPUSH
23784: LD_INT 1
23786: PPUSH
23787: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23791: LD_INT 27
23793: PPUSH
23794: LD_VAR 0 3
23798: PPUSH
23799: LD_INT 1
23801: PPUSH
23802: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23806: LD_INT 28
23808: PPUSH
23809: LD_VAR 0 3
23813: PPUSH
23814: LD_INT 1
23816: PPUSH
23817: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23821: LD_INT 29
23823: PPUSH
23824: LD_VAR 0 3
23828: PPUSH
23829: LD_INT 1
23831: PPUSH
23832: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23836: LD_INT 30
23838: PPUSH
23839: LD_VAR 0 3
23843: PPUSH
23844: LD_INT 1
23846: PPUSH
23847: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23851: LD_INT 31
23853: PPUSH
23854: LD_VAR 0 3
23858: PPUSH
23859: LD_INT 1
23861: PPUSH
23862: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23866: LD_INT 32
23868: PPUSH
23869: LD_VAR 0 3
23873: PPUSH
23874: LD_INT 1
23876: PPUSH
23877: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23881: LD_INT 36
23883: PPUSH
23884: LD_VAR 0 3
23888: PPUSH
23889: LD_INT 1
23891: PPUSH
23892: CALL_OW 324
// end ; 5 :
23896: GO 26027
23898: LD_INT 5
23900: DOUBLE
23901: EQUAL
23902: IFTRUE 23906
23904: GO 25019
23906: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23907: LD_INT 35
23909: PPUSH
23910: LD_VAR 0 3
23914: PPUSH
23915: LD_INT 1
23917: PPUSH
23918: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23922: LD_INT 45
23924: PPUSH
23925: LD_VAR 0 3
23929: PPUSH
23930: LD_INT 1
23932: PPUSH
23933: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23937: LD_INT 46
23939: PPUSH
23940: LD_VAR 0 3
23944: PPUSH
23945: LD_INT 1
23947: PPUSH
23948: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23952: LD_INT 47
23954: PPUSH
23955: LD_VAR 0 3
23959: PPUSH
23960: LD_INT 1
23962: PPUSH
23963: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23967: LD_INT 1
23969: PPUSH
23970: LD_VAR 0 3
23974: PPUSH
23975: LD_INT 1
23977: PPUSH
23978: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23982: LD_INT 2
23984: PPUSH
23985: LD_VAR 0 3
23989: PPUSH
23990: LD_INT 1
23992: PPUSH
23993: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23997: LD_INT 11
23999: PPUSH
24000: LD_VAR 0 3
24004: PPUSH
24005: LD_INT 1
24007: PPUSH
24008: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24012: LD_INT 20
24014: PPUSH
24015: LD_VAR 0 3
24019: PPUSH
24020: LD_INT 1
24022: PPUSH
24023: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24027: LD_INT 48
24029: PPUSH
24030: LD_VAR 0 3
24034: PPUSH
24035: LD_INT 1
24037: PPUSH
24038: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24042: LD_INT 49
24044: PPUSH
24045: LD_VAR 0 3
24049: PPUSH
24050: LD_INT 1
24052: PPUSH
24053: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24057: LD_INT 69
24059: PPUSH
24060: LD_VAR 0 3
24064: PPUSH
24065: LD_INT 1
24067: PPUSH
24068: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24072: LD_INT 39
24074: PPUSH
24075: LD_VAR 0 3
24079: PPUSH
24080: LD_INT 1
24082: PPUSH
24083: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24087: LD_INT 34
24089: PPUSH
24090: LD_VAR 0 3
24094: PPUSH
24095: LD_INT 1
24097: PPUSH
24098: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24102: LD_INT 42
24104: PPUSH
24105: LD_VAR 0 3
24109: PPUSH
24110: LD_INT 1
24112: PPUSH
24113: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24117: LD_INT 44
24119: PPUSH
24120: LD_VAR 0 3
24124: PPUSH
24125: LD_INT 1
24127: PPUSH
24128: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24132: LD_INT 41
24134: PPUSH
24135: LD_VAR 0 3
24139: PPUSH
24140: LD_INT 1
24142: PPUSH
24143: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24147: LD_INT 40
24149: PPUSH
24150: LD_VAR 0 3
24154: PPUSH
24155: LD_INT 1
24157: PPUSH
24158: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24162: LD_INT 43
24164: PPUSH
24165: LD_VAR 0 3
24169: PPUSH
24170: LD_INT 1
24172: PPUSH
24173: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24177: LD_INT 70
24179: PPUSH
24180: LD_VAR 0 3
24184: PPUSH
24185: LD_INT 1
24187: PPUSH
24188: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24192: LD_INT 51
24194: PPUSH
24195: LD_VAR 0 3
24199: PPUSH
24200: LD_INT 1
24202: PPUSH
24203: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24207: LD_INT 52
24209: PPUSH
24210: LD_VAR 0 3
24214: PPUSH
24215: LD_INT 1
24217: PPUSH
24218: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24222: LD_INT 6
24224: PPUSH
24225: LD_VAR 0 3
24229: PPUSH
24230: LD_INT 1
24232: PPUSH
24233: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24237: LD_INT 15
24239: PPUSH
24240: LD_VAR 0 3
24244: PPUSH
24245: LD_INT 1
24247: PPUSH
24248: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24252: LD_INT 7
24254: PPUSH
24255: LD_VAR 0 3
24259: PPUSH
24260: LD_INT 1
24262: PPUSH
24263: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24267: LD_INT 12
24269: PPUSH
24270: LD_VAR 0 3
24274: PPUSH
24275: LD_INT 1
24277: PPUSH
24278: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24282: LD_INT 17
24284: PPUSH
24285: LD_VAR 0 3
24289: PPUSH
24290: LD_INT 1
24292: PPUSH
24293: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24297: LD_INT 18
24299: PPUSH
24300: LD_VAR 0 3
24304: PPUSH
24305: LD_INT 1
24307: PPUSH
24308: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24312: LD_INT 60
24314: PPUSH
24315: LD_VAR 0 3
24319: PPUSH
24320: LD_INT 1
24322: PPUSH
24323: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24327: LD_INT 32
24329: PPUSH
24330: LD_VAR 0 3
24334: PPUSH
24335: LD_INT 1
24337: PPUSH
24338: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24342: LD_INT 9
24344: PPUSH
24345: LD_VAR 0 3
24349: PPUSH
24350: LD_INT 1
24352: PPUSH
24353: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24357: LD_INT 57
24359: PPUSH
24360: LD_VAR 0 3
24364: PPUSH
24365: LD_INT 1
24367: PPUSH
24368: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24372: LD_INT 30
24374: PPUSH
24375: LD_VAR 0 3
24379: PPUSH
24380: LD_INT 1
24382: PPUSH
24383: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24387: LD_INT 37
24389: PPUSH
24390: LD_VAR 0 3
24394: PPUSH
24395: LD_INT 1
24397: PPUSH
24398: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24402: LD_INT 63
24404: PPUSH
24405: LD_VAR 0 3
24409: PPUSH
24410: LD_INT 1
24412: PPUSH
24413: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24417: LD_INT 3
24419: PPUSH
24420: LD_VAR 0 3
24424: PPUSH
24425: LD_INT 1
24427: PPUSH
24428: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24432: LD_INT 4
24434: PPUSH
24435: LD_VAR 0 3
24439: PPUSH
24440: LD_INT 1
24442: PPUSH
24443: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24447: LD_INT 5
24449: PPUSH
24450: LD_VAR 0 3
24454: PPUSH
24455: LD_INT 1
24457: PPUSH
24458: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24462: LD_INT 66
24464: PPUSH
24465: LD_VAR 0 3
24469: PPUSH
24470: LD_INT 1
24472: PPUSH
24473: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24477: LD_INT 21
24479: PPUSH
24480: LD_VAR 0 3
24484: PPUSH
24485: LD_INT 1
24487: PPUSH
24488: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24492: LD_INT 22
24494: PPUSH
24495: LD_VAR 0 3
24499: PPUSH
24500: LD_INT 1
24502: PPUSH
24503: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24507: LD_INT 19
24509: PPUSH
24510: LD_VAR 0 3
24514: PPUSH
24515: LD_INT 1
24517: PPUSH
24518: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24522: LD_INT 54
24524: PPUSH
24525: LD_VAR 0 3
24529: PPUSH
24530: LD_INT 1
24532: PPUSH
24533: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24537: LD_INT 55
24539: PPUSH
24540: LD_VAR 0 3
24544: PPUSH
24545: LD_INT 1
24547: PPUSH
24548: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
24552: LD_INT 0
24554: PPUSH
24555: LD_VAR 0 3
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
24567: LD_INT 1
24569: PPUSH
24570: LD_VAR 0 3
24574: PPUSH
24575: LD_INT 1
24577: PPUSH
24578: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24582: LD_INT 2
24584: PPUSH
24585: LD_VAR 0 3
24589: PPUSH
24590: LD_INT 1
24592: PPUSH
24593: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24597: LD_INT 3
24599: PPUSH
24600: LD_VAR 0 3
24604: PPUSH
24605: LD_INT 1
24607: PPUSH
24608: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24612: LD_INT 4
24614: PPUSH
24615: LD_VAR 0 3
24619: PPUSH
24620: LD_INT 1
24622: PPUSH
24623: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24627: LD_INT 5
24629: PPUSH
24630: LD_VAR 0 3
24634: PPUSH
24635: LD_INT 1
24637: PPUSH
24638: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24642: LD_INT 6
24644: PPUSH
24645: LD_VAR 0 3
24649: PPUSH
24650: LD_INT 1
24652: PPUSH
24653: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24657: LD_INT 7
24659: PPUSH
24660: LD_VAR 0 3
24664: PPUSH
24665: LD_INT 1
24667: PPUSH
24668: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24672: LD_INT 8
24674: PPUSH
24675: LD_VAR 0 3
24679: PPUSH
24680: LD_INT 1
24682: PPUSH
24683: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24687: LD_INT 10
24689: PPUSH
24690: LD_VAR 0 3
24694: PPUSH
24695: LD_INT 1
24697: PPUSH
24698: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24702: LD_INT 11
24704: PPUSH
24705: LD_VAR 0 3
24709: PPUSH
24710: LD_INT 1
24712: PPUSH
24713: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24717: LD_INT 12
24719: PPUSH
24720: LD_VAR 0 3
24724: PPUSH
24725: LD_INT 1
24727: PPUSH
24728: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24732: LD_INT 13
24734: PPUSH
24735: LD_VAR 0 3
24739: PPUSH
24740: LD_INT 1
24742: PPUSH
24743: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24747: LD_INT 14
24749: PPUSH
24750: LD_VAR 0 3
24754: PPUSH
24755: LD_INT 1
24757: PPUSH
24758: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24762: LD_INT 15
24764: PPUSH
24765: LD_VAR 0 3
24769: PPUSH
24770: LD_INT 1
24772: PPUSH
24773: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24777: LD_INT 16
24779: PPUSH
24780: LD_VAR 0 3
24784: PPUSH
24785: LD_INT 1
24787: PPUSH
24788: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24792: LD_INT 17
24794: PPUSH
24795: LD_VAR 0 3
24799: PPUSH
24800: LD_INT 1
24802: PPUSH
24803: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24807: LD_INT 18
24809: PPUSH
24810: LD_VAR 0 3
24814: PPUSH
24815: LD_INT 1
24817: PPUSH
24818: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
24822: LD_INT 19
24824: PPUSH
24825: LD_VAR 0 3
24829: PPUSH
24830: LD_INT 1
24832: PPUSH
24833: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
24837: LD_INT 20
24839: PPUSH
24840: LD_VAR 0 3
24844: PPUSH
24845: LD_INT 1
24847: PPUSH
24848: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
24852: LD_INT 21
24854: PPUSH
24855: LD_VAR 0 3
24859: PPUSH
24860: LD_INT 1
24862: PPUSH
24863: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
24867: LD_INT 23
24869: PPUSH
24870: LD_VAR 0 3
24874: PPUSH
24875: LD_INT 1
24877: PPUSH
24878: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
24882: LD_INT 26
24884: PPUSH
24885: LD_VAR 0 3
24889: PPUSH
24890: LD_INT 1
24892: PPUSH
24893: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
24897: LD_INT 27
24899: PPUSH
24900: LD_VAR 0 3
24904: PPUSH
24905: LD_INT 1
24907: PPUSH
24908: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
24912: LD_INT 28
24914: PPUSH
24915: LD_VAR 0 3
24919: PPUSH
24920: LD_INT 1
24922: PPUSH
24923: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
24927: LD_INT 29
24929: PPUSH
24930: LD_VAR 0 3
24934: PPUSH
24935: LD_INT 1
24937: PPUSH
24938: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24942: LD_INT 30
24944: PPUSH
24945: LD_VAR 0 3
24949: PPUSH
24950: LD_INT 1
24952: PPUSH
24953: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24957: LD_INT 31
24959: PPUSH
24960: LD_VAR 0 3
24964: PPUSH
24965: LD_INT 1
24967: PPUSH
24968: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24972: LD_INT 32
24974: PPUSH
24975: LD_VAR 0 3
24979: PPUSH
24980: LD_INT 1
24982: PPUSH
24983: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
24987: LD_INT 33
24989: PPUSH
24990: LD_VAR 0 3
24994: PPUSH
24995: LD_INT 1
24997: PPUSH
24998: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
25002: LD_INT 36
25004: PPUSH
25005: LD_VAR 0 3
25009: PPUSH
25010: LD_INT 1
25012: PPUSH
25013: CALL_OW 324
// end ; 6 :
25017: GO 26027
25019: LD_INT 6
25021: DOUBLE
25022: EQUAL
25023: IFTRUE 25027
25025: GO 25952
25027: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
25028: LD_INT 35
25030: PPUSH
25031: LD_VAR 0 3
25035: PPUSH
25036: LD_INT 1
25038: PPUSH
25039: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
25043: LD_INT 45
25045: PPUSH
25046: LD_VAR 0 3
25050: PPUSH
25051: LD_INT 1
25053: PPUSH
25054: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
25058: LD_INT 46
25060: PPUSH
25061: LD_VAR 0 3
25065: PPUSH
25066: LD_INT 1
25068: PPUSH
25069: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
25073: LD_INT 47
25075: PPUSH
25076: LD_VAR 0 3
25080: PPUSH
25081: LD_INT 1
25083: PPUSH
25084: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
25088: LD_INT 1
25090: PPUSH
25091: LD_VAR 0 3
25095: PPUSH
25096: LD_INT 1
25098: PPUSH
25099: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
25103: LD_INT 2
25105: PPUSH
25106: LD_VAR 0 3
25110: PPUSH
25111: LD_INT 1
25113: PPUSH
25114: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
25118: LD_INT 11
25120: PPUSH
25121: LD_VAR 0 3
25125: PPUSH
25126: LD_INT 1
25128: PPUSH
25129: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
25133: LD_INT 20
25135: PPUSH
25136: LD_VAR 0 3
25140: PPUSH
25141: LD_INT 1
25143: PPUSH
25144: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
25148: LD_INT 48
25150: PPUSH
25151: LD_VAR 0 3
25155: PPUSH
25156: LD_INT 1
25158: PPUSH
25159: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
25163: LD_INT 49
25165: PPUSH
25166: LD_VAR 0 3
25170: PPUSH
25171: LD_INT 1
25173: PPUSH
25174: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
25178: LD_INT 50
25180: PPUSH
25181: LD_VAR 0 3
25185: PPUSH
25186: LD_INT 1
25188: PPUSH
25189: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
25193: LD_INT 69
25195: PPUSH
25196: LD_VAR 0 3
25200: PPUSH
25201: LD_INT 1
25203: PPUSH
25204: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
25208: LD_INT 39
25210: PPUSH
25211: LD_VAR 0 3
25215: PPUSH
25216: LD_INT 1
25218: PPUSH
25219: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
25223: LD_INT 34
25225: PPUSH
25226: LD_VAR 0 3
25230: PPUSH
25231: LD_INT 1
25233: PPUSH
25234: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
25238: LD_INT 42
25240: PPUSH
25241: LD_VAR 0 3
25245: PPUSH
25246: LD_INT 1
25248: PPUSH
25249: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
25253: LD_INT 44
25255: PPUSH
25256: LD_VAR 0 3
25260: PPUSH
25261: LD_INT 1
25263: PPUSH
25264: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
25268: LD_INT 41
25270: PPUSH
25271: LD_VAR 0 3
25275: PPUSH
25276: LD_INT 1
25278: PPUSH
25279: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
25283: LD_INT 13
25285: PPUSH
25286: LD_VAR 0 3
25290: PPUSH
25291: LD_INT 1
25293: PPUSH
25294: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
25298: LD_INT 40
25300: PPUSH
25301: LD_VAR 0 3
25305: PPUSH
25306: LD_INT 1
25308: PPUSH
25309: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
25313: LD_INT 43
25315: PPUSH
25316: LD_VAR 0 3
25320: PPUSH
25321: LD_INT 1
25323: PPUSH
25324: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
25328: LD_INT 70
25330: PPUSH
25331: LD_VAR 0 3
25335: PPUSH
25336: LD_INT 1
25338: PPUSH
25339: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
25343: LD_INT 23
25345: PPUSH
25346: LD_VAR 0 3
25350: PPUSH
25351: LD_INT 1
25353: PPUSH
25354: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
25358: LD_INT 51
25360: PPUSH
25361: LD_VAR 0 3
25365: PPUSH
25366: LD_INT 1
25368: PPUSH
25369: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
25373: LD_INT 52
25375: PPUSH
25376: LD_VAR 0 3
25380: PPUSH
25381: LD_INT 1
25383: PPUSH
25384: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
25388: LD_INT 6
25390: PPUSH
25391: LD_VAR 0 3
25395: PPUSH
25396: LD_INT 1
25398: PPUSH
25399: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
25403: LD_INT 15
25405: PPUSH
25406: LD_VAR 0 3
25410: PPUSH
25411: LD_INT 1
25413: PPUSH
25414: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
25418: LD_INT 7
25420: PPUSH
25421: LD_VAR 0 3
25425: PPUSH
25426: LD_INT 1
25428: PPUSH
25429: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
25433: LD_INT 12
25435: PPUSH
25436: LD_VAR 0 3
25440: PPUSH
25441: LD_INT 1
25443: PPUSH
25444: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
25448: LD_INT 10
25450: PPUSH
25451: LD_VAR 0 3
25455: PPUSH
25456: LD_INT 1
25458: PPUSH
25459: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
25463: LD_INT 17
25465: PPUSH
25466: LD_VAR 0 3
25470: PPUSH
25471: LD_INT 1
25473: PPUSH
25474: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
25478: LD_INT 18
25480: PPUSH
25481: LD_VAR 0 3
25485: PPUSH
25486: LD_INT 1
25488: PPUSH
25489: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
25493: LD_INT 60
25495: PPUSH
25496: LD_VAR 0 3
25500: PPUSH
25501: LD_INT 1
25503: PPUSH
25504: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
25508: LD_INT 61
25510: PPUSH
25511: LD_VAR 0 3
25515: PPUSH
25516: LD_INT 1
25518: PPUSH
25519: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
25523: LD_INT 32
25525: PPUSH
25526: LD_VAR 0 3
25530: PPUSH
25531: LD_INT 1
25533: PPUSH
25534: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
25538: LD_INT 27
25540: PPUSH
25541: LD_VAR 0 3
25545: PPUSH
25546: LD_INT 1
25548: PPUSH
25549: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
25553: LD_INT 36
25555: PPUSH
25556: LD_VAR 0 3
25560: PPUSH
25561: LD_INT 1
25563: PPUSH
25564: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
25568: LD_INT 33
25570: PPUSH
25571: LD_VAR 0 3
25575: PPUSH
25576: LD_INT 1
25578: PPUSH
25579: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25583: LD_INT 9
25585: PPUSH
25586: LD_VAR 0 3
25590: PPUSH
25591: LD_INT 1
25593: PPUSH
25594: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25598: LD_INT 38
25600: PPUSH
25601: LD_VAR 0 3
25605: PPUSH
25606: LD_INT 1
25608: PPUSH
25609: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25613: LD_INT 57
25615: PPUSH
25616: LD_VAR 0 3
25620: PPUSH
25621: LD_INT 1
25623: PPUSH
25624: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25628: LD_INT 58
25630: PPUSH
25631: LD_VAR 0 3
25635: PPUSH
25636: LD_INT 1
25638: PPUSH
25639: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25643: LD_INT 28
25645: PPUSH
25646: LD_VAR 0 3
25650: PPUSH
25651: LD_INT 1
25653: PPUSH
25654: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25658: LD_INT 29
25660: PPUSH
25661: LD_VAR 0 3
25665: PPUSH
25666: LD_INT 1
25668: PPUSH
25669: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25673: LD_INT 30
25675: PPUSH
25676: LD_VAR 0 3
25680: PPUSH
25681: LD_INT 1
25683: PPUSH
25684: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25688: LD_INT 37
25690: PPUSH
25691: LD_VAR 0 3
25695: PPUSH
25696: LD_INT 1
25698: PPUSH
25699: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25703: LD_INT 63
25705: PPUSH
25706: LD_VAR 0 3
25710: PPUSH
25711: LD_INT 1
25713: PPUSH
25714: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25718: LD_INT 64
25720: PPUSH
25721: LD_VAR 0 3
25725: PPUSH
25726: LD_INT 1
25728: PPUSH
25729: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25733: LD_INT 3
25735: PPUSH
25736: LD_VAR 0 3
25740: PPUSH
25741: LD_INT 1
25743: PPUSH
25744: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25748: LD_INT 4
25750: PPUSH
25751: LD_VAR 0 3
25755: PPUSH
25756: LD_INT 1
25758: PPUSH
25759: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25763: LD_INT 5
25765: PPUSH
25766: LD_VAR 0 3
25770: PPUSH
25771: LD_INT 1
25773: PPUSH
25774: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25778: LD_INT 8
25780: PPUSH
25781: LD_VAR 0 3
25785: PPUSH
25786: LD_INT 1
25788: PPUSH
25789: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25793: LD_INT 66
25795: PPUSH
25796: LD_VAR 0 3
25800: PPUSH
25801: LD_INT 1
25803: PPUSH
25804: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25808: LD_INT 67
25810: PPUSH
25811: LD_VAR 0 3
25815: PPUSH
25816: LD_INT 1
25818: PPUSH
25819: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
25823: LD_INT 21
25825: PPUSH
25826: LD_VAR 0 3
25830: PPUSH
25831: LD_INT 1
25833: PPUSH
25834: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
25838: LD_INT 22
25840: PPUSH
25841: LD_VAR 0 3
25845: PPUSH
25846: LD_INT 1
25848: PPUSH
25849: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
25853: LD_INT 19
25855: PPUSH
25856: LD_VAR 0 3
25860: PPUSH
25861: LD_INT 1
25863: PPUSH
25864: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
25868: LD_INT 26
25870: PPUSH
25871: LD_VAR 0 3
25875: PPUSH
25876: LD_INT 1
25878: PPUSH
25879: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
25883: LD_INT 54
25885: PPUSH
25886: LD_VAR 0 3
25890: PPUSH
25891: LD_INT 1
25893: PPUSH
25894: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
25898: LD_INT 55
25900: PPUSH
25901: LD_VAR 0 3
25905: PPUSH
25906: LD_INT 1
25908: PPUSH
25909: CALL_OW 322
// for i = 0 to 39 do
25913: LD_ADDR_VAR 0 4
25917: PUSH
25918: DOUBLE
25919: LD_INT 0
25921: DEC
25922: ST_TO_ADDR
25923: LD_INT 39
25925: PUSH
25926: FOR_TO
25927: IFFALSE 25948
// SetRestrict ( i , side , true ) ;
25929: LD_VAR 0 4
25933: PPUSH
25934: LD_VAR 0 3
25938: PPUSH
25939: LD_INT 1
25941: PPUSH
25942: CALL_OW 324
25946: GO 25926
25948: POP
25949: POP
// end ; else
25950: GO 26027
25952: POP
// begin for i = 1 to 73 do
25953: LD_ADDR_VAR 0 4
25957: PUSH
25958: DOUBLE
25959: LD_INT 1
25961: DEC
25962: ST_TO_ADDR
25963: LD_INT 73
25965: PUSH
25966: FOR_TO
25967: IFFALSE 25988
// SetTech ( i , side , state_enabled ) ;
25969: LD_VAR 0 4
25973: PPUSH
25974: LD_VAR 0 3
25978: PPUSH
25979: LD_INT 1
25981: PPUSH
25982: CALL_OW 322
25986: GO 25966
25988: POP
25989: POP
// for i = 0 to 39 do
25990: LD_ADDR_VAR 0 4
25994: PUSH
25995: DOUBLE
25996: LD_INT 0
25998: DEC
25999: ST_TO_ADDR
26000: LD_INT 39
26002: PUSH
26003: FOR_TO
26004: IFFALSE 26025
// SetRestrict ( i , side , true ) ;
26006: LD_VAR 0 4
26010: PPUSH
26011: LD_VAR 0 3
26015: PPUSH
26016: LD_INT 1
26018: PPUSH
26019: CALL_OW 324
26023: GO 26003
26025: POP
26026: POP
// end ; end ; end ;
26027: GO 22032
26029: POP
26030: POP
// end ;
26031: LD_VAR 0 2
26035: RET
