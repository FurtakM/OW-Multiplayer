// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export Position_Sides ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 48
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 3 ;
 151: LD_ADDR_EXP 48
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// for i := 1 to 8 do
 356: LD_ADDR_VAR 0 2
 360: PUSH
 361: DOUBLE
 362: LD_INT 1
 364: DEC
 365: ST_TO_ADDR
 366: LD_INT 8
 368: PUSH
 369: FOR_TO
 370: IFFALSE 457
// if Multiplayer_GetPlayerIsSpec ( i ) then
 372: LD_VAR 0 2
 376: PPUSH
 377: CALL_OW 530
 381: IFFALSE 455
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 383: LD_ADDR_EXP 23
 387: PUSH
 388: LD_EXP 23
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: LD_INT 0
 400: PPUSH
 401: CALL_OW 1
 405: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 406: LD_ADDR_EXP 22
 410: PUSH
 411: LD_EXP 22
 415: PPUSH
 416: LD_EXP 21
 420: PUSH
 421: LD_VAR 0 2
 425: ARRAY
 426: PPUSH
 427: LD_EXP 22
 431: PUSH
 432: LD_EXP 21
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: ARRAY
 443: PUSH
 444: LD_VAR 0 2
 448: DIFF
 449: PPUSH
 450: CALL_OW 1
 454: ST_TO_ADDR
// end ;
 455: GO 369
 457: POP
 458: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 459: LD_ADDR_EXP 29
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// for i := 1 to 8 do
 482: LD_ADDR_VAR 0 2
 486: PUSH
 487: DOUBLE
 488: LD_INT 1
 490: DEC
 491: ST_TO_ADDR
 492: LD_INT 8
 494: PUSH
 495: FOR_TO
 496: IFFALSE 543
// if Side_Positions [ i ] then
 498: LD_EXP 23
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: IFFALSE 541
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 510: LD_ADDR_EXP 29
 514: PUSH
 515: LD_EXP 29
 519: PPUSH
 520: LD_EXP 23
 524: PUSH
 525: LD_VAR 0 2
 529: ARRAY
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: CALL_OW 1
 540: ST_TO_ADDR
 541: GO 495
 543: POP
 544: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_EXP 21
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: EMPTY
 559: LIST
 560: DIFF
 561: PUSH
 562: LD_INT 1
 564: GREATER
 565: ST_TO_ADDR
// if Multiplayer then
 566: LD_OWVAR 4
 570: IFFALSE 842
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 572: LD_ADDR_EXP 50
 576: PUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 426
 584: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 585: LD_ADDR_EXP 51
 589: PUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 426
 597: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 598: LD_ADDR_EXP 52
 602: PUSH
 603: LD_INT 2
 605: PPUSH
 606: CALL_OW 426
 610: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 611: LD_ADDR_EXP 53
 615: PUSH
 616: LD_INT 3
 618: PPUSH
 619: CALL_OW 426
 623: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 624: LD_ADDR_EXP 54
 628: PUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 426
 636: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 637: LD_ADDR_EXP 55
 641: PUSH
 642: LD_INT 5
 644: PPUSH
 645: CALL_OW 426
 649: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 650: LD_ADDR_EXP 57
 654: PUSH
 655: LD_INT 10
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 663: LD_ADDR_EXP 58
 667: PUSH
 668: LD_INT 11
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 676: LD_ADDR_EXP 59
 680: PUSH
 681: LD_INT 12
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 689: LD_ADDR_EXP 61
 693: PUSH
 694: LD_INT 13
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 702: LD_ADDR_EXP 60
 706: PUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 715: LD_ADDR_EXP 62
 719: PUSH
 720: LD_INT 15
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 728: LD_ADDR_EXP 1
 732: PUSH
 733: LD_INT 6
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 741: LD_ADDR_EXP 2
 745: PUSH
 746: LD_INT 7
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 754: LD_ADDR_EXP 4
 758: PUSH
 759: LD_INT 8
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 767: LD_ADDR_EXP 3
 771: PUSH
 772: LD_INT 9
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 780: LD_ADDR_EXP 5
 784: PUSH
 785: LD_INT 16
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 17
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 806: LD_ADDR_EXP 63
 810: PUSH
 811: LD_INT 20
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 819: LD_ADDR_VAR 0 3
 823: PUSH
 824: LD_INT 22
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_win_rules = 0 ;
 832: LD_ADDR_EXP 19
 836: PUSH
 837: LD_INT 0
 839: ST_TO_ADDR
// end else
 840: GO 1014
// begin Randomize ;
 842: CALL_OW 10
// def_base_level := 2 ;
 846: LD_ADDR_EXP 50
 850: PUSH
 851: LD_INT 2
 853: ST_TO_ADDR
// def_amount_of_people := 1 ;
 854: LD_ADDR_EXP 51
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// def_skill_level := 1 ;
 862: LD_ADDR_EXP 52
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// def_starting_resources := 2 ;
 870: LD_ADDR_EXP 53
 874: PUSH
 875: LD_INT 2
 877: ST_TO_ADDR
// def_shipments_density := 1 ;
 878: LD_ADDR_EXP 54
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 886: LD_ADDR_EXP 55
 890: PUSH
 891: LD_INT 0
 893: ST_TO_ADDR
// def_shared_vision := 1 ;
 894: LD_ADDR_EXP 57
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// def_morale_flags := 1 ;
 902: LD_ADDR_EXP 58
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// def_siberite_detection := 1 ;
 910: LD_ADDR_EXP 59
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 918: LD_ADDR_EXP 61
 922: PUSH
 923: LD_INT 3
 925: ST_TO_ADDR
// def_people_respawning := 2 ;
 926: LD_ADDR_EXP 60
 930: PUSH
 931: LD_INT 2
 933: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 934: LD_ADDR_EXP 62
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// def_artefact_one := 0 ;
 942: LD_ADDR_EXP 1
 946: PUSH
 947: LD_INT 0
 949: ST_TO_ADDR
// def_artefact_two := 0 ;
 950: LD_ADDR_EXP 2
 954: PUSH
 955: LD_INT 0
 957: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 958: LD_ADDR_EXP 4
 962: PUSH
 963: LD_INT 2
 965: ST_TO_ADDR
// def_artefact_three := 0 ;
 966: LD_ADDR_EXP 3
 970: PUSH
 971: LD_INT 0
 973: ST_TO_ADDR
// def_kings_age := 1 ;
 974: LD_ADDR_EXP 5
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// def_public_score := 0 ;
 982: LD_ADDR_EXP 6
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// def_builduptime := 1 ;
 990: LD_ADDR_EXP 63
 994: PUSH
 995: LD_INT 1
 997: ST_TO_ADDR
// tech_level = 4 ;
 998: LD_ADDR_VAR 0 3
1002: PUSH
1003: LD_INT 4
1005: ST_TO_ADDR
// def_win_rules = 0 ;
1006: LD_ADDR_EXP 19
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// end ; InitGameRules ;
1014: CALL 14080 0 0
// if def_game_rules = 0 then
1018: LD_EXP 49
1022: PUSH
1023: LD_INT 0
1025: EQUAL
1026: IFFALSE 1053
// begin if isSGUI then
1028: LD_OWVAR 83
1032: IFFALSE 1040
// setMpTechs ( ) else
1034: CALL 21872 0 0
1038: GO 1053
// begin SetMpTechLevel ( tech_level + 1 ) ;
1040: LD_VAR 0 3
1044: PUSH
1045: LD_INT 1
1047: PLUS
1048: PPUSH
1049: CALL 22019 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1053: LD_ADDR_EXP 7
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 50
1080: PUSH
1081: LD_INT 1
1083: PLUS
1084: ARRAY
1085: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
1086: LD_ADDR_EXP 8
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 2
1099: PUSH
1100: LD_INT 3
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_EXP 50
1113: PUSH
1114: LD_INT 1
1116: PLUS
1117: ARRAY
1118: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1119: LD_ADDR_EXP 9
1123: PUSH
1124: LD_EXP 51
1128: PUSH
1129: LD_INT 4
1131: PLUS
1132: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: LD_INT 4
1146: PUSH
1147: LD_INT 5
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: PUSH
1156: LD_EXP 52
1160: PUSH
1161: LD_INT 1
1163: PLUS
1164: ARRAY
1165: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1166: LD_ADDR_EXP 12
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: LD_INT 0
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 30
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: LD_INT 0
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 50
1201: PUSH
1202: LD_INT 20
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 80
1215: PUSH
1216: LD_INT 40
1218: PUSH
1219: LD_INT 20
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: LD_EXP 53
1237: PUSH
1238: LD_INT 1
1240: PLUS
1241: ARRAY
1242: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1243: LD_ADDR_EXP 11
1247: PUSH
1248: LD_INT 10
1250: PUSH
1251: EMPTY
1252: LIST
1253: PUSH
1254: LD_INT 7
1256: PUSH
1257: LD_INT 14
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 6
1266: PUSH
1267: LD_INT 12
1269: PUSH
1270: LD_INT 18
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 5
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: LD_INT 15
1286: PUSH
1287: LD_INT 20
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_EXP 53
1306: PUSH
1307: LD_INT 1
1309: PLUS
1310: ARRAY
1311: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 28 ;
1312: LD_ADDR_EXP 13
1316: PUSH
1317: LD_INT 20
1319: PUSH
1320: LD_EXP 54
1324: PUSH
1325: LD_INT 28
1327: MUL
1328: PLUS
1329: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1330: LD_ADDR_EXP 15
1334: PUSH
1335: LD_INT 0
1337: PUSH
1338: LD_INT 3
1340: PUSH
1341: LD_INT 6
1343: PUSH
1344: LD_INT 9
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: PUSH
1353: LD_EXP 61
1357: PUSH
1358: LD_INT 1
1360: PLUS
1361: ARRAY
1362: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1363: LD_ADDR_EXP 16
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 12600
1373: PUSH
1374: LD_INT 2100
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_EXP 60
1386: PUSH
1387: LD_INT 1
1389: PLUS
1390: ARRAY
1391: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1392: LD_ADDR_EXP 17
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 21000
1402: PUSH
1403: LD_INT 4200
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 60
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_INT 1
1428: NEG
1429: PUSH
1430: LD_INT 350
1432: PUSH
1433: LD_INT 700
1435: PUSH
1436: LD_INT 1400
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_EXP 58
1453: PUSH
1454: LD_INT 1
1456: PLUS
1457: ARRAY
1458: ST_TO_ADDR
// battle_flags_id := [ ] ;
1459: LD_ADDR_EXP 34
1463: PUSH
1464: EMPTY
1465: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1466: LD_ADDR_EXP 18
1470: PUSH
1471: LD_INT 0
1473: PUSH
1474: LD_INT 1
1476: PUSH
1477: LD_INT 63000
1479: PUSH
1480: LD_INT 126000
1482: PUSH
1483: LD_INT 189000
1485: PUSH
1486: LD_INT 252000
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_EXP 62
1501: PUSH
1502: LD_INT 1
1504: PLUS
1505: ARRAY
1506: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1507: LD_ADDR_EXP 20
1511: PUSH
1512: LD_INT 500
1514: PUSH
1515: LD_INT 1000
1517: PUSH
1518: LD_INT 1500
1520: PUSH
1521: LD_INT 2000
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 5
1534: PUSH
1535: LD_INT 1
1537: PLUS
1538: ARRAY
1539: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1540: LD_ADDR_EXP 47
1544: PUSH
1545: LD_INT 21
1547: PUSH
1548: LD_INT 23
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 22
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 1
1567: RET
// function init_map ; var i ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1572: LD_ADDR_EXP 33
1576: PUSH
1577: LD_INT 43
1579: PUSH
1580: LD_INT 9
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 123
1589: PUSH
1590: LD_INT 10
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 113
1599: PUSH
1600: LD_INT 155
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 186
1609: PUSH
1610: LD_INT 133
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1623: LD_ADDR_EXP 30
1627: PUSH
1628: LD_INT 18
1630: PUSH
1631: LD_INT 17
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 156
1644: PUSH
1645: LD_INT 20
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 83
1658: PUSH
1659: LD_INT 140
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 216
1672: PUSH
1673: LD_INT 143
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: ST_TO_ADDR
// for i in depot_def do
1690: LD_ADDR_VAR 0 2
1694: PUSH
1695: LD_EXP 30
1699: PUSH
1700: FOR_IN
1701: IFFALSE 1775
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1703: LD_ADDR_EXP 32
1707: PUSH
1708: LD_EXP 32
1712: PUSH
1713: LD_VAR 0 2
1717: PUSH
1718: LD_INT 1
1720: ARRAY
1721: PPUSH
1722: LD_VAR 0 2
1726: PUSH
1727: LD_INT 3
1729: ARRAY
1730: PPUSH
1731: LD_INT 6
1733: PPUSH
1734: CALL_OW 272
1738: PUSH
1739: LD_VAR 0 2
1743: PUSH
1744: LD_INT 2
1746: ARRAY
1747: PPUSH
1748: LD_VAR 0 2
1752: PUSH
1753: LD_INT 3
1755: ARRAY
1756: PPUSH
1757: LD_INT 6
1759: PPUSH
1760: CALL_OW 273
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: EMPTY
1770: LIST
1771: ADD
1772: ST_TO_ADDR
1773: GO 1700
1775: POP
1776: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1777: LD_ADDR_EXP 31
1781: PUSH
1782: LD_INT 30
1784: PUSH
1785: LD_INT 36
1787: PUSH
1788: LD_INT 0
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 44
1798: PUSH
1799: LD_INT 21
1801: PUSH
1802: LD_INT 4
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 43
1812: PUSH
1813: LD_INT 33
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 165
1831: PUSH
1832: LD_INT 34
1834: PUSH
1835: LD_INT 0
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 137
1845: PUSH
1846: LD_INT 18
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 153
1859: PUSH
1860: LD_INT 37
1862: PUSH
1863: LD_INT 0
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 86
1878: PUSH
1879: LD_INT 120
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 105
1892: PUSH
1893: LD_INT 147
1895: PUSH
1896: LD_INT 4
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 68
1906: PUSH
1907: LD_INT 118
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 199
1925: PUSH
1926: LD_INT 144
1928: PUSH
1929: LD_INT 1
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 207
1939: PUSH
1940: LD_INT 119
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 195
1953: PUSH
1954: LD_INT 118
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: ST_TO_ADDR
// if not def_extra_oil_deposits then
1976: LD_EXP 55
1980: NOT
1981: IFFALSE 2022
// for i in extra_oil_deposits_locations do
1983: LD_ADDR_VAR 0 2
1987: PUSH
1988: LD_EXP 33
1992: PUSH
1993: FOR_IN
1994: IFFALSE 2020
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1996: LD_VAR 0 2
2000: PUSH
2001: LD_INT 1
2003: ARRAY
2004: PPUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_INT 2
2012: ARRAY
2013: PPUSH
2014: CALL_OW 63
2018: GO 1993
2020: POP
2021: POP
// end ;
2022: LD_VAR 0 1
2026: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2027: LD_INT 0
2029: PPUSH
2030: PPUSH
2031: PPUSH
// if not Team_Game then
2032: LD_EXP 25
2036: NOT
2037: IFFALSE 2135
// begin for i = 1 to 8 do
2039: LD_ADDR_VAR 0 2
2043: PUSH
2044: DOUBLE
2045: LD_INT 1
2047: DEC
2048: ST_TO_ADDR
2049: LD_INT 8
2051: PUSH
2052: FOR_TO
2053: IFFALSE 2131
// for j = 1 to 8 do
2055: LD_ADDR_VAR 0 3
2059: PUSH
2060: DOUBLE
2061: LD_INT 1
2063: DEC
2064: ST_TO_ADDR
2065: LD_INT 8
2067: PUSH
2068: FOR_TO
2069: IFFALSE 2127
// if i <> j then
2071: LD_VAR 0 2
2075: PUSH
2076: LD_VAR 0 3
2080: NONEQUAL
2081: IFFALSE 2105
// SetAttitude ( i , j , att_neutral , true ) else
2083: LD_VAR 0 2
2087: PPUSH
2088: LD_VAR 0 3
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 80
2103: GO 2125
// SetAttitude ( i , j , att_friend , true ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 80
2125: GO 2068
2127: POP
2128: POP
2129: GO 2052
2131: POP
2132: POP
// end else
2133: GO 2310
// begin if def_shared_vision then
2135: LD_EXP 57
2139: IFFALSE 2204
// begin for i in Teams do
2141: LD_ADDR_VAR 0 2
2145: PUSH
2146: LD_EXP 22
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2202
// for j = 2 to i do
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: DOUBLE
2160: LD_INT 2
2162: DEC
2163: ST_TO_ADDR
2164: LD_VAR 0 2
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2198
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2172: LD_VAR 0 2
2176: PUSH
2177: LD_VAR 0 3
2181: ARRAY
2182: PPUSH
2183: LD_VAR 0 2
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: CALL_OW 343
2196: GO 2169
2198: POP
2199: POP
2200: GO 2151
2202: POP
2203: POP
// end ; for i = 1 to 8 do
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: DOUBLE
2210: LD_INT 1
2212: DEC
2213: ST_TO_ADDR
2214: LD_INT 8
2216: PUSH
2217: FOR_TO
2218: IFFALSE 2308
// for j = 1 to 8 do
2220: LD_ADDR_VAR 0 3
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2304
// if Side_Teams [ i ] = Side_Teams [ j ] then
2236: LD_EXP 21
2240: PUSH
2241: LD_VAR 0 2
2245: ARRAY
2246: PUSH
2247: LD_EXP 21
2251: PUSH
2252: LD_VAR 0 3
2256: ARRAY
2257: EQUAL
2258: IFFALSE 2282
// SetAttitude ( i , j , att_friend , true ) else
2260: LD_VAR 0 2
2264: PPUSH
2265: LD_VAR 0 3
2269: PPUSH
2270: LD_INT 1
2272: PPUSH
2273: LD_INT 1
2275: PPUSH
2276: CALL_OW 80
2280: GO 2302
// SetAttitude ( i , j , att_enemy , true ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 3
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL_OW 80
2302: GO 2233
2304: POP
2305: POP
2306: GO 2217
2308: POP
2309: POP
// end ; end ;
2310: LD_VAR 0 1
2314: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2315: LD_INT 0
2317: PPUSH
2318: PPUSH
2319: PPUSH
2320: PPUSH
// result := [ ] ;
2321: LD_ADDR_VAR 0 7
2325: PUSH
2326: EMPTY
2327: ST_TO_ADDR
// for i := 1 to count do
2328: LD_ADDR_VAR 0 8
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_VAR 0 1
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2762
// begin uc_direction := Rand ( 0 , 5 ) ;
2346: LD_ADDR_OWVAR 24
2350: PUSH
2351: LD_INT 0
2353: PPUSH
2354: LD_INT 5
2356: PPUSH
2357: CALL_OW 12
2361: ST_TO_ADDR
// if commander then
2362: LD_LOC 1
2366: IFFALSE 2475
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2368: LD_ADDR_OWVAR 26
2372: PUSH
2373: LD_OWVAR 19
2377: PUSH
2378: LD_OWVAR 20
2382: ARRAY
2383: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2384: LD_INT 1
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: CALL_OW 12
2394: PPUSH
2395: LD_VAR 0 2
2399: PPUSH
2400: LD_EXP 10
2404: PUSH
2405: LD_INT 2
2407: PLUS
2408: PPUSH
2409: CALL_OW 380
// hc_importance := 105 ;
2413: LD_ADDR_OWVAR 32
2417: PUSH
2418: LD_INT 105
2420: ST_TO_ADDR
// commander := false ;
2421: LD_ADDR_LOC 1
2425: PUSH
2426: LD_INT 0
2428: ST_TO_ADDR
// if Multiplayer then
2429: LD_OWVAR 4
2433: IFFALSE 2473
// begin hc_gallery := MULTIAVATARS ;
2435: LD_ADDR_OWVAR 33
2439: PUSH
2440: LD_STRING MULTIAVATARS
2442: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2443: LD_ADDR_OWVAR 34
2447: PUSH
2448: LD_OWVAR 20
2452: PPUSH
2453: CALL_OW 525
2457: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2458: LD_ADDR_OWVAR 27
2462: PUSH
2463: LD_OWVAR 20
2467: PPUSH
2468: CALL_OW 526
2472: ST_TO_ADDR
// end ; end else
2473: GO 2538
// begin hc_name :=  ;
2475: LD_ADDR_OWVAR 26
2479: PUSH
2480: LD_STRING 
2482: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2483: LD_INT 1
2485: PPUSH
2486: LD_INT 2
2488: PPUSH
2489: CALL_OW 12
2493: PPUSH
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_EXP 10
2503: PPUSH
2504: CALL_OW 380
// hc_importance := 0 ;
2508: LD_ADDR_OWVAR 32
2512: PUSH
2513: LD_INT 0
2515: ST_TO_ADDR
// if Multiplayer then
2516: LD_OWVAR 4
2520: IFFALSE 2538
// begin hc_gallery :=  ;
2522: LD_ADDR_OWVAR 33
2526: PUSH
2527: LD_STRING 
2529: ST_TO_ADDR
// hc_face_number := 0 ;
2530: LD_ADDR_OWVAR 34
2534: PUSH
2535: LD_INT 0
2537: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2538: LD_ADDR_VAR 0 10
2542: PUSH
2543: CALL_OW 44
2547: ST_TO_ADDR
// if global_defined then
2548: LD_LOC 3
2552: IFFALSE 2692
// begin if ( cl = class_soldier ) then
2554: LD_VAR 0 2
2558: PUSH
2559: LD_INT 1
2561: EQUAL
2562: IFFALSE 2582
// j := i + soldiers_created else
2564: LD_ADDR_VAR 0 9
2568: PUSH
2569: LD_VAR 0 8
2573: PUSH
2574: LD_LOC 4
2578: PLUS
2579: ST_TO_ADDR
2580: GO 2592
// j := i ;
2582: LD_ADDR_VAR 0 9
2586: PUSH
2587: LD_VAR 0 8
2591: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2592: LD_LOC 2
2596: PUSH
2597: LD_VAR 0 2
2601: ARRAY
2602: PUSH
2603: LD_VAR 0 9
2607: ARRAY
2608: PPUSH
2609: LD_VAR 0 10
2613: PPUSH
2614: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2618: LD_VAR 0 10
2622: PPUSH
2623: LD_INT 2
2625: PPUSH
2626: LD_LOC 2
2630: PUSH
2631: LD_VAR 0 2
2635: ARRAY
2636: PUSH
2637: LD_VAR 0 9
2641: ARRAY
2642: PPUSH
2643: LD_INT 2
2645: PPUSH
2646: CALL_OW 260
2650: PPUSH
2651: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2655: LD_VAR 0 10
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: LD_LOC 2
2667: PUSH
2668: LD_VAR 0 2
2672: ARRAY
2673: PUSH
2674: LD_VAR 0 9
2678: ARRAY
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL_OW 260
2687: PPUSH
2688: CALL_OW 239
// end ; if building then
2692: LD_VAR 0 6
2696: IFFALSE 2714
// PlaceHumanInUnit ( un , building ) else
2698: LD_VAR 0 10
2702: PPUSH
2703: LD_VAR 0 6
2707: PPUSH
2708: CALL_OW 52
2712: GO 2741
// PlaceUnitXYR ( un , x , y , r , false ) ;
2714: LD_VAR 0 10
2718: PPUSH
2719: LD_VAR 0 3
2723: PPUSH
2724: LD_VAR 0 4
2728: PPUSH
2729: LD_VAR 0 5
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL_OW 50
// result := result ^ [ un ] ;
2741: LD_ADDR_VAR 0 7
2745: PUSH
2746: LD_VAR 0 7
2750: PUSH
2751: LD_VAR 0 10
2755: PUSH
2756: EMPTY
2757: LIST
2758: ADD
2759: ST_TO_ADDR
// end ;
2760: GO 2343
2762: POP
2763: POP
// if not global_defined then
2764: LD_LOC 3
2768: NOT
2769: IFFALSE 2847
// if ( global_units >= cl ) then
2771: LD_LOC 2
2775: PUSH
2776: LD_VAR 0 2
2780: GREATEREQUAL
2781: IFFALSE 2822
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2783: LD_ADDR_LOC 2
2787: PUSH
2788: LD_LOC 2
2792: PPUSH
2793: LD_VAR 0 2
2797: PPUSH
2798: LD_LOC 2
2802: PUSH
2803: LD_VAR 0 2
2807: ARRAY
2808: PUSH
2809: LD_VAR 0 7
2813: ADD
2814: PPUSH
2815: CALL_OW 1
2819: ST_TO_ADDR
2820: GO 2847
// global_units := Replace ( global_units , cl , result ) ;
2822: LD_ADDR_LOC 2
2826: PUSH
2827: LD_LOC 2
2831: PPUSH
2832: LD_VAR 0 2
2836: PPUSH
2837: LD_VAR 0 7
2841: PPUSH
2842: CALL_OW 1
2846: ST_TO_ADDR
// if commander then
2847: LD_LOC 1
2851: IFFALSE 2898
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2853: LD_ADDR_EXP 35
2857: PUSH
2858: LD_EXP 35
2862: PPUSH
2863: LD_OWVAR 20
2867: PPUSH
2868: LD_EXP 35
2872: PUSH
2873: LD_OWVAR 20
2877: ARRAY
2878: PUSH
2879: LD_VAR 0 10
2883: ADD
2884: PPUSH
2885: CALL_OW 1
2889: ST_TO_ADDR
// commander := false ;
2890: LD_ADDR_LOC 1
2894: PUSH
2895: LD_INT 0
2897: ST_TO_ADDR
// end ; end ;
2898: LD_VAR 0 7
2902: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2903: LD_INT 0
2905: PPUSH
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
2913: PPUSH
// pos := Side_Positions [ side ] ;
2914: LD_ADDR_VAR 0 3
2918: PUSH
2919: LD_EXP 23
2923: PUSH
2924: LD_VAR 0 1
2928: ARRAY
2929: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2930: LD_ADDR_OWVAR 21
2934: PUSH
2935: LD_EXP 24
2939: PUSH
2940: LD_VAR 0 1
2944: ARRAY
2945: ST_TO_ADDR
// uc_side := side ;
2946: LD_ADDR_OWVAR 20
2950: PUSH
2951: LD_VAR 0 1
2955: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2956: LD_ADDR_VAR 0 4
2960: PUSH
2961: LD_EXP 30
2965: PUSH
2966: LD_VAR 0 3
2970: ARRAY
2971: PUSH
2972: LD_INT 1
2974: ARRAY
2975: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2976: LD_ADDR_VAR 0 5
2980: PUSH
2981: LD_EXP 30
2985: PUSH
2986: LD_VAR 0 3
2990: ARRAY
2991: PUSH
2992: LD_INT 2
2994: ARRAY
2995: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2996: LD_ADDR_VAR 0 6
3000: PUSH
3001: LD_EXP 30
3005: PUSH
3006: LD_VAR 0 3
3010: ARRAY
3011: PUSH
3012: LD_INT 3
3014: ARRAY
3015: ST_TO_ADDR
// if is_depot then
3016: LD_EXP 7
3020: IFFALSE 3153
// begin bc_type = b_depot ;
3022: LD_ADDR_OWVAR 42
3026: PUSH
3027: LD_INT 0
3029: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3030: LD_ADDR_VAR 0 10
3034: PUSH
3035: LD_VAR 0 4
3039: PPUSH
3040: LD_VAR 0 5
3044: PPUSH
3045: LD_VAR 0 6
3049: PPUSH
3050: CALL_OW 47
3054: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3055: LD_VAR 0 10
3059: PPUSH
3060: LD_STRING @
3062: PUSH
3063: LD_VAR 0 1
3067: STR
3068: PPUSH
3069: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3073: LD_VAR 0 10
3077: PPUSH
3078: CALL_OW 274
3082: PPUSH
3083: LD_INT 1
3085: PPUSH
3086: LD_EXP 12
3090: PUSH
3091: LD_INT 1
3093: ARRAY
3094: PPUSH
3095: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3099: LD_VAR 0 10
3103: PPUSH
3104: CALL_OW 274
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_EXP 12
3116: PUSH
3117: LD_INT 2
3119: ARRAY
3120: PPUSH
3121: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3125: LD_VAR 0 10
3129: PPUSH
3130: CALL_OW 274
3134: PPUSH
3135: LD_INT 3
3137: PPUSH
3138: LD_EXP 12
3142: PUSH
3143: LD_INT 3
3145: ARRAY
3146: PPUSH
3147: CALL_OW 277
// end else
3151: GO 3297
// begin for i := 1 to 3 do
3153: LD_ADDR_VAR 0 7
3157: PUSH
3158: DOUBLE
3159: LD_INT 1
3161: DEC
3162: ST_TO_ADDR
3163: LD_INT 3
3165: PUSH
3166: FOR_TO
3167: IFFALSE 3295
// begin r := starting_resources [ i ] ;
3169: LD_ADDR_VAR 0 8
3173: PUSH
3174: LD_EXP 12
3178: PUSH
3179: LD_VAR 0 7
3183: ARRAY
3184: ST_TO_ADDR
// while r >= 10 do
3185: LD_VAR 0 8
3189: PUSH
3190: LD_INT 10
3192: GREATEREQUAL
3193: IFFALSE 3293
// if r > 50 then
3195: LD_VAR 0 8
3199: PUSH
3200: LD_INT 50
3202: GREATER
3203: IFFALSE 3249
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3205: LD_VAR 0 7
3209: PPUSH
3210: LD_INT 5
3212: PPUSH
3213: LD_VAR 0 4
3217: PPUSH
3218: LD_VAR 0 5
3222: PPUSH
3223: LD_INT 4
3225: PPUSH
3226: LD_INT 0
3228: PPUSH
3229: CALL_OW 60
// r := r - 50 ;
3233: LD_ADDR_VAR 0 8
3237: PUSH
3238: LD_VAR 0 8
3242: PUSH
3243: LD_INT 50
3245: MINUS
3246: ST_TO_ADDR
// end else
3247: GO 3291
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3249: LD_VAR 0 7
3253: PPUSH
3254: LD_VAR 0 8
3258: PUSH
3259: LD_INT 10
3261: DIV
3262: PPUSH
3263: LD_VAR 0 4
3267: PPUSH
3268: LD_VAR 0 5
3272: PPUSH
3273: LD_INT 4
3275: PPUSH
3276: LD_INT 0
3278: PPUSH
3279: CALL_OW 60
// r := 0 ;
3283: LD_ADDR_VAR 0 8
3287: PUSH
3288: LD_INT 0
3290: ST_TO_ADDR
// end ;
3291: GO 3185
// end ;
3293: GO 3166
3295: POP
3296: POP
// end ; for r in starting_crates do
3297: LD_ADDR_VAR 0 8
3301: PUSH
3302: LD_EXP 11
3306: PUSH
3307: FOR_IN
3308: IFFALSE 3340
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3310: LD_INT 1
3312: PPUSH
3313: LD_INT 5
3315: PPUSH
3316: LD_VAR 0 4
3320: PPUSH
3321: LD_VAR 0 5
3325: PPUSH
3326: LD_VAR 0 8
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 60
3338: GO 3307
3340: POP
3341: POP
// if def_morale_flags then
3342: LD_EXP 58
3346: IFFALSE 3485
// begin x := start_def [ pos ] [ 1 ] ;
3348: LD_ADDR_VAR 0 4
3352: PUSH
3353: LD_EXP 32
3357: PUSH
3358: LD_VAR 0 3
3362: ARRAY
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3368: LD_ADDR_VAR 0 5
3372: PUSH
3373: LD_EXP 32
3377: PUSH
3378: LD_VAR 0 3
3382: ARRAY
3383: PUSH
3384: LD_INT 2
3386: ARRAY
3387: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3388: LD_VAR 0 4
3392: PPUSH
3393: LD_VAR 0 5
3397: PPUSH
3398: LD_INT 12
3400: PPUSH
3401: LD_INT 2
3403: PPUSH
3404: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3408: LD_ADDR_EXP 34
3412: PUSH
3413: LD_EXP 34
3417: PUSH
3418: LD_VAR 0 1
3422: PPUSH
3423: LD_VAR 0 4
3427: PPUSH
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 1
3435: PUSH
3436: LD_INT 100
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 50
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: LD_INT 3
3455: PUSH
3456: LD_INT 20
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: PUSH
3463: LD_INT 20
3465: PUSH
3466: LD_INT 100
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: PPUSH
3479: CALL_OW 418
3483: ADD
3484: ST_TO_ADDR
// end ; commander := true ;
3485: LD_ADDR_LOC 1
3489: PUSH
3490: LD_INT 1
3492: ST_TO_ADDR
// soldiers_created := 0 ;
3493: LD_ADDR_LOC 4
3497: PUSH
3498: LD_INT 0
3500: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3501: LD_ADDR_VAR 0 7
3505: PUSH
3506: DOUBLE
3507: LD_INT 1
3509: DEC
3510: ST_TO_ADDR
3511: LD_EXP 8
3515: PUSH
3516: FOR_TO
3517: IFFALSE 3670
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3519: LD_ADDR_VAR 0 4
3523: PUSH
3524: LD_EXP 31
3528: PUSH
3529: LD_VAR 0 3
3533: ARRAY
3534: PUSH
3535: LD_VAR 0 7
3539: ARRAY
3540: PUSH
3541: LD_INT 1
3543: ARRAY
3544: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3545: LD_ADDR_VAR 0 5
3549: PUSH
3550: LD_EXP 31
3554: PUSH
3555: LD_VAR 0 3
3559: ARRAY
3560: PUSH
3561: LD_VAR 0 7
3565: ARRAY
3566: PUSH
3567: LD_INT 2
3569: ARRAY
3570: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3571: LD_ADDR_VAR 0 6
3575: PUSH
3576: LD_EXP 31
3580: PUSH
3581: LD_VAR 0 3
3585: ARRAY
3586: PUSH
3587: LD_VAR 0 7
3591: ARRAY
3592: PUSH
3593: LD_INT 3
3595: ARRAY
3596: ST_TO_ADDR
// bc_type := b_breastwork ;
3597: LD_ADDR_OWVAR 42
3601: PUSH
3602: LD_INT 31
3604: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3605: LD_ADDR_VAR 0 9
3609: PUSH
3610: LD_VAR 0 4
3614: PPUSH
3615: LD_VAR 0 5
3619: PPUSH
3620: LD_VAR 0 6
3624: PPUSH
3625: CALL_OW 47
3629: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3630: LD_INT 1
3632: PPUSH
3633: LD_INT 1
3635: PPUSH
3636: LD_INT 0
3638: PPUSH
3639: LD_INT 0
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: LD_VAR 0 9
3649: PPUSH
3650: CALL 2315 0 6
// soldiers_created := soldiers_created + 1 ;
3654: LD_ADDR_LOC 4
3658: PUSH
3659: LD_LOC 4
3663: PUSH
3664: LD_INT 1
3666: PLUS
3667: ST_TO_ADDR
// end ;
3668: GO 3516
3670: POP
3671: POP
// x := start_def [ pos ] [ 1 ] ;
3672: LD_ADDR_VAR 0 4
3676: PUSH
3677: LD_EXP 32
3681: PUSH
3682: LD_VAR 0 3
3686: ARRAY
3687: PUSH
3688: LD_INT 1
3690: ARRAY
3691: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3692: LD_ADDR_VAR 0 5
3696: PUSH
3697: LD_EXP 32
3701: PUSH
3702: LD_VAR 0 3
3706: ARRAY
3707: PUSH
3708: LD_INT 2
3710: ARRAY
3711: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3712: LD_LOC 8
3716: PUSH
3717: LD_EXP 8
3721: MINUS
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: LD_VAR 0 4
3730: PPUSH
3731: LD_VAR 0 5
3735: PPUSH
3736: LD_INT 5
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: CALL 2315 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3746: LD_LOC 5
3750: PPUSH
3751: LD_INT 2
3753: PPUSH
3754: LD_VAR 0 4
3758: PPUSH
3759: LD_VAR 0 5
3763: PPUSH
3764: LD_INT 5
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL 2315 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3774: LD_LOC 7
3778: PPUSH
3779: LD_INT 3
3781: PPUSH
3782: LD_VAR 0 4
3786: PPUSH
3787: LD_VAR 0 5
3791: PPUSH
3792: LD_INT 5
3794: PPUSH
3795: LD_INT 0
3797: PPUSH
3798: CALL 2315 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3802: LD_LOC 6
3806: PPUSH
3807: LD_INT 4
3809: PPUSH
3810: LD_VAR 0 4
3814: PPUSH
3815: LD_VAR 0 5
3819: PPUSH
3820: LD_INT 5
3822: PPUSH
3823: LD_INT 0
3825: PPUSH
3826: CALL 2315 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3830: LD_EXP 59
3834: PUSH
3835: LD_INT 20
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 321
3847: PUSH
3848: LD_INT 1
3850: EQUAL
3851: AND
3852: IFFALSE 3869
// SetTech ( tech_SibDet , side , state_researched ) ;
3854: LD_INT 20
3856: PPUSH
3857: LD_VAR 0 1
3861: PPUSH
3862: LD_INT 2
3864: PPUSH
3865: CALL_OW 322
// if def_siberite_bomb = 1 then
3869: LD_EXP 62
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3911
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3879: LD_INT 25
3881: PPUSH
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 1
3889: PPUSH
3890: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3894: LD_INT 73
3896: PPUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 322
// end else
3909: GO 3941
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3911: LD_INT 25
3913: PPUSH
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 0
3921: PPUSH
3922: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3926: LD_INT 73
3928: PPUSH
3929: LD_VAR 0 1
3933: PPUSH
3934: LD_INT 0
3936: PPUSH
3937: CALL_OW 322
// end ; if Game_Type = 3 then
3941: LD_EXP 48
3945: PUSH
3946: LD_INT 3
3948: EQUAL
3949: IFFALSE 3966
// SetTech ( tech_partinvis , side , state_disabled ) ;
3951: LD_INT 16
3953: PPUSH
3954: LD_VAR 0 1
3958: PPUSH
3959: LD_INT 0
3961: PPUSH
3962: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3966: LD_INT 24
3968: PPUSH
3969: LD_VAR 0 1
3973: PPUSH
3974: LD_INT 1
3976: PPUSH
3977: CALL_OW 322
// global_defined := true ;
3981: LD_ADDR_LOC 3
3985: PUSH
3986: LD_INT 1
3988: ST_TO_ADDR
// end ;
3989: LD_VAR 0 2
3993: RET
// every 0 0$1 do
3994: GO 3996
3996: DISABLE
// if ( def_siberite_bomb > 1 ) then
3997: LD_EXP 62
4001: PUSH
4002: LD_INT 1
4004: GREATER
4005: IFFALSE 4020
// begin wait ( siberite_bomb_Delay ) ;
4007: LD_EXP 18
4011: PPUSH
4012: CALL_OW 67
// EnableSibFiss ;
4016: CALL 4021 0 0
// end ;
4020: END
// function EnableSibFiss ; var i ; begin
4021: LD_INT 0
4023: PPUSH
4024: PPUSH
// for i := 1 to 8 do
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: DOUBLE
4031: LD_INT 1
4033: DEC
4034: ST_TO_ADDR
4035: LD_INT 8
4037: PUSH
4038: FOR_TO
4039: IFFALSE 4085
// if Side_Positions [ i ] then
4041: LD_EXP 23
4045: PUSH
4046: LD_VAR 0 2
4050: ARRAY
4051: IFFALSE 4083
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4053: LD_INT 25
4055: PPUSH
4056: LD_VAR 0 2
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4068: LD_INT 73
4070: PPUSH
4071: LD_VAR 0 2
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: CALL_OW 322
// end ;
4083: GO 4038
4085: POP
4086: POP
// end ;
4087: LD_VAR 0 1
4091: RET
// function prepare_sides ; var i ; begin
4092: LD_INT 0
4094: PPUSH
4095: PPUSH
// global_units := [ ] ;
4096: LD_ADDR_LOC 2
4100: PUSH
4101: EMPTY
4102: ST_TO_ADDR
// global_defined := false ;
4103: LD_ADDR_LOC 3
4107: PUSH
4108: LD_INT 0
4110: ST_TO_ADDR
// CountClassMembers ;
4111: CALL 4161 0 0
// for i := 1 to 8 do
4115: LD_ADDR_VAR 0 2
4119: PUSH
4120: DOUBLE
4121: LD_INT 1
4123: DEC
4124: ST_TO_ADDR
4125: LD_INT 8
4127: PUSH
4128: FOR_TO
4129: IFFALSE 4154
// if Side_Positions [ i ] then
4131: LD_EXP 23
4135: PUSH
4136: LD_VAR 0 2
4140: ARRAY
4141: IFFALSE 4152
// prepare_side ( i ) ;
4143: LD_VAR 0 2
4147: PPUSH
4148: CALL 2903 0 1
4152: GO 4128
4154: POP
4155: POP
// end ;
4156: LD_VAR 0 1
4160: RET
// function CountClassMembers ; var Mode ; begin
4161: LD_INT 0
4163: PPUSH
4164: PPUSH
// if No_Mechs then
4165: LD_EXP 64
4169: IFFALSE 4181
// Mode := 2 else
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: LD_INT 2
4178: ST_TO_ADDR
4179: GO 4189
// Mode := 1 ;
4181: LD_ADDR_VAR 0 2
4185: PUSH
4186: LD_INT 1
4188: ST_TO_ADDR
// neng := number_of_people ;
4189: LD_ADDR_LOC 5
4193: PUSH
4194: LD_EXP 9
4198: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4199: LD_ADDR_LOC 8
4203: PUSH
4204: LD_LOC 5
4208: PUSH
4209: LD_INT 4
4211: PUSH
4212: LD_INT 3
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_VAR 0 2
4223: ARRAY
4224: DIV
4225: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4226: LD_LOC 8
4230: PUSH
4231: LD_EXP 8
4235: LESS
4236: IFFALSE 4248
// nsol := number_of_breastworks ;
4238: LD_ADDR_LOC 8
4242: PUSH
4243: LD_EXP 8
4247: ST_TO_ADDR
// neng := neng - nsol ;
4248: LD_ADDR_LOC 5
4252: PUSH
4253: LD_LOC 5
4257: PUSH
4258: LD_LOC 8
4262: MINUS
4263: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4264: LD_ADDR_LOC 6
4268: PUSH
4269: LD_LOC 5
4273: PUSH
4274: LD_INT 3
4276: PUSH
4277: LD_INT 2
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_VAR 0 2
4288: ARRAY
4289: DIV
4290: ST_TO_ADDR
// if ( nsci < 1 ) then
4291: LD_LOC 6
4295: PUSH
4296: LD_INT 1
4298: LESS
4299: IFFALSE 4309
// nsci := 1 ;
4301: LD_ADDR_LOC 6
4305: PUSH
4306: LD_INT 1
4308: ST_TO_ADDR
// neng := neng - nsci ;
4309: LD_ADDR_LOC 5
4313: PUSH
4314: LD_LOC 5
4318: PUSH
4319: LD_LOC 6
4323: MINUS
4324: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4325: LD_ADDR_LOC 7
4329: PUSH
4330: LD_LOC 5
4334: PUSH
4335: LD_INT 2
4337: DIV
4338: PUSH
4339: LD_INT 0
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: LD_VAR 0 2
4350: ARRAY
4351: ST_TO_ADDR
// neng := neng - nmech ;
4352: LD_ADDR_LOC 5
4356: PUSH
4357: LD_LOC 5
4361: PUSH
4362: LD_LOC 7
4366: MINUS
4367: ST_TO_ADDR
// if ( neng < 1 ) then
4368: LD_LOC 5
4372: PUSH
4373: LD_INT 1
4375: LESS
4376: IFFALSE 4386
// neng := 1 ;
4378: LD_ADDR_LOC 5
4382: PUSH
4383: LD_INT 1
4385: ST_TO_ADDR
// end ;
4386: LD_VAR 0 1
4390: RET
// starting begin disable ( 1 ) ;
4391: LD_INT 1
4393: DISABLE_MARKED
// disable ( 2 ) ;
4394: LD_INT 2
4396: DISABLE_MARKED
// disable ( 3 ) ;
4397: LD_INT 3
4399: DISABLE_MARKED
// disable ( 4 ) ;
4400: LD_INT 4
4402: DISABLE_MARKED
// disable ( 5 ) ;
4403: LD_INT 5
4405: DISABLE_MARKED
// disable ( 6 ) ;
4406: LD_INT 6
4408: DISABLE_MARKED
// disable ( 7 ) ;
4409: LD_INT 7
4411: DISABLE_MARKED
// disable ( 10 ) ;
4412: LD_INT 10
4414: DISABLE_MARKED
// disable ( 20 ) ;
4415: LD_INT 20
4417: DISABLE_MARKED
// disable ( 98 ) ;
4418: LD_INT 98
4420: DISABLE_MARKED
// disable ( 99 ) ;
4421: LD_INT 99
4423: DISABLE_MARKED
// disable ( 400 ) ;
4424: LD_INT 400
4426: DISABLE_MARKED
// disable ( 401 ) ;
4427: LD_INT 401
4429: DISABLE_MARKED
// disable ( 600 ) ;
4430: LD_INT 600
4432: DISABLE_MARKED
// mp_selectmsg := true ;
4433: LD_ADDR_OWVAR 13
4437: PUSH
4438: LD_INT 1
4440: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4441: CALL 68 0 0
// init_map ;
4445: CALL 1568 0 0
// init_shipments ;
4449: CALL 4635 0 0
// init_respawn ;
4453: CALL 6155 0 0
// set_shared_visions_and_alliances ;
4457: CALL 2027 0 0
// ResetFog ;
4461: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4465: LD_OWVAR 2
4469: PPUSH
4470: CALL_OW 520
// prepare_sides ;
4474: CALL 4092 0 0
// Init_Win_Condition ;
4478: CALL 18339 0 0
// InitLimits ;
4482: CALL 16212 0 0
// ShowTimer ;
4486: CALL 17149 0 0
// case Game_Type of 2 :
4490: LD_EXP 48
4494: PUSH
4495: LD_INT 2
4497: DOUBLE
4498: EQUAL
4499: IFTRUE 4503
4501: GO 4510
4503: POP
// init_alien_research ; 3 :
4504: CALL 7385 0 0
4508: GO 4530
4510: LD_INT 3
4512: DOUBLE
4513: EQUAL
4514: IFTRUE 4518
4516: GO 4529
4518: POP
// begin InitPoints ( ) ;
4519: CALL 17342 0 0
// init_kings_counting ;
4523: CALL 19702 0 0
// end ; end ;
4527: GO 4530
4529: POP
// music_nat := Side_Nations [ your_side ] ;
4530: LD_ADDR_OWVAR 71
4534: PUSH
4535: LD_EXP 24
4539: PUSH
4540: LD_OWVAR 2
4544: ARRAY
4545: ST_TO_ADDR
// if IAmSpec then
4546: CALL_OW 531
4550: IFFALSE 4574
// begin fogOff ( true ) ;
4552: LD_INT 1
4554: PPUSH
4555: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4559: LD_INT 119
4561: PPUSH
4562: LD_INT 79
4564: PPUSH
4565: CALL_OW 86
// enable ( 400 ) ;
4569: LD_INT 400
4571: ENABLE_MARKED
// end else
4572: GO 4620
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4574: LD_EXP 32
4578: PUSH
4579: LD_EXP 23
4583: PUSH
4584: LD_OWVAR 2
4588: ARRAY
4589: ARRAY
4590: PUSH
4591: LD_INT 1
4593: ARRAY
4594: PPUSH
4595: LD_EXP 32
4599: PUSH
4600: LD_EXP 23
4604: PUSH
4605: LD_OWVAR 2
4609: ARRAY
4610: ARRAY
4611: PUSH
4612: LD_INT 2
4614: ARRAY
4615: PPUSH
4616: CALL_OW 86
// end ; InitApeman ;
4620: CALL 5330 0 0
// if def_builduptime then
4624: LD_EXP 63
4628: IFFALSE 4634
// BeginBuildUp ;
4630: CALL 13379 0 0
// end ; end_of_file
4634: END
// var shipment , tictac ; export function init_shipments ; begin
4635: LD_INT 0
4637: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4638: LD_ADDR_LOC 9
4642: PUSH
4643: LD_INT 0
4645: PPUSH
4646: LD_INT 3
4648: PPUSH
4649: CALL_OW 12
4653: ST_TO_ADDR
// tictac := 0 ;
4654: LD_ADDR_LOC 10
4658: PUSH
4659: LD_INT 0
4661: ST_TO_ADDR
// end ;
4662: LD_VAR 0 1
4666: RET
// every 0 0$5 + 0 0$1.1 do var d ;
4667: GO 4669
4669: DISABLE
4670: LD_INT 0
4672: PPUSH
// begin case tick of 1 .. 1 1$0 :
4673: LD_OWVAR 1
4677: PUSH
4678: LD_INT 1
4680: DOUBLE
4681: GREATEREQUAL
4682: IFFALSE 4690
4684: LD_INT 2100
4686: DOUBLE
4687: LESSEQUAL
4688: IFTRUE 4692
4690: GO 4703
4692: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
4693: LD_ADDR_VAR 0 1
4697: PUSH
4698: LD_INT 150
4700: ST_TO_ADDR
4701: GO 4886
4703: LD_INT 2100
4705: PUSH
4706: LD_INT 1
4708: PLUS
4709: DOUBLE
4710: GREATEREQUAL
4711: IFFALSE 4719
4713: LD_INT 10500
4715: DOUBLE
4716: LESSEQUAL
4717: IFTRUE 4721
4719: GO 4732
4721: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
4722: LD_ADDR_VAR 0 1
4726: PUSH
4727: LD_INT 100
4729: ST_TO_ADDR
4730: GO 4886
4732: LD_INT 10500
4734: PUSH
4735: LD_INT 1
4737: PLUS
4738: DOUBLE
4739: GREATEREQUAL
4740: IFFALSE 4748
4742: LD_INT 21000
4744: DOUBLE
4745: LESSEQUAL
4746: IFTRUE 4750
4748: GO 4761
4750: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
4751: LD_ADDR_VAR 0 1
4755: PUSH
4756: LD_INT 90
4758: ST_TO_ADDR
4759: GO 4886
4761: LD_INT 21000
4763: PUSH
4764: LD_INT 1
4766: PLUS
4767: DOUBLE
4768: GREATEREQUAL
4769: IFFALSE 4777
4771: LD_INT 42000
4773: DOUBLE
4774: LESSEQUAL
4775: IFTRUE 4779
4777: GO 4790
4779: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
4780: LD_ADDR_VAR 0 1
4784: PUSH
4785: LD_INT 70
4787: ST_TO_ADDR
4788: GO 4886
4790: LD_INT 42000
4792: PUSH
4793: LD_INT 1
4795: PLUS
4796: DOUBLE
4797: GREATEREQUAL
4798: IFFALSE 4806
4800: LD_INT 63000
4802: DOUBLE
4803: LESSEQUAL
4804: IFTRUE 4808
4806: GO 4819
4808: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
4809: LD_ADDR_VAR 0 1
4813: PUSH
4814: LD_INT 60
4816: ST_TO_ADDR
4817: GO 4886
4819: LD_INT 63000
4821: PUSH
4822: LD_INT 1
4824: PLUS
4825: DOUBLE
4826: GREATEREQUAL
4827: IFFALSE 4835
4829: LD_INT 105000
4831: DOUBLE
4832: LESSEQUAL
4833: IFTRUE 4837
4835: GO 4848
4837: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
4838: LD_ADDR_VAR 0 1
4842: PUSH
4843: LD_INT 35
4845: ST_TO_ADDR
4846: GO 4886
4848: LD_INT 105000
4850: PUSH
4851: LD_INT 1
4853: PLUS
4854: DOUBLE
4855: GREATEREQUAL
4856: IFFALSE 4864
4858: LD_INT 630000
4860: DOUBLE
4861: LESSEQUAL
4862: IFTRUE 4866
4864: GO 4877
4866: POP
// d := 20 ; else
4867: LD_ADDR_VAR 0 1
4871: PUSH
4872: LD_INT 20
4874: ST_TO_ADDR
4875: GO 4886
4877: POP
// d := 0 ; end ;
4878: LD_ADDR_VAR 0 1
4882: PUSH
4883: LD_INT 0
4885: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density then
4886: LD_INT 1
4888: PPUSH
4889: LD_INT 10000
4891: PPUSH
4892: CALL_OW 12
4896: PUSH
4897: LD_VAR 0 1
4901: PUSH
4902: LD_EXP 13
4906: MUL
4907: LESSEQUAL
4908: IFFALSE 4962
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
4910: LD_INT 1
4912: PPUSH
4913: LD_INT 140
4915: PPUSH
4916: CALL_OW 12
4920: PPUSH
4921: CALL_OW 67
// shipment := ( shipment + 1 ) mod 4 ;
4925: LD_ADDR_LOC 9
4929: PUSH
4930: LD_LOC 9
4934: PUSH
4935: LD_INT 1
4937: PLUS
4938: PUSH
4939: LD_INT 4
4941: MOD
4942: ST_TO_ADDR
// CreateCratesArea ( 5 , nw + shipment , true ) ;
4943: LD_INT 5
4945: PPUSH
4946: LD_INT 12
4948: PUSH
4949: LD_LOC 9
4953: PLUS
4954: PPUSH
4955: LD_INT 1
4957: PPUSH
4958: CALL_OW 55
// end ; enable ;
4962: ENABLE
// end ;
4963: PPOPN 1
4965: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount , is_in ;
4966: LD_OWVAR 1
4970: PUSH
4971: LD_INT 6300
4973: PUSH
4974: LD_LOC 10
4978: MUL
4979: PUSH
4980: LD_LOC 10
4984: PUSH
4985: LD_INT 3150
4987: PUSH
4988: LD_EXP 13
4992: PUSH
4993: LD_INT 70
4995: MUL
4996: MINUS
4997: MUL
4998: PLUS
4999: GREATER
5000: IFFALSE 5136
5002: GO 5004
5004: DISABLE
5005: LD_INT 0
5007: PPUSH
5008: PPUSH
5009: PPUSH
// begin tictac := tictac + 1 ;
5010: LD_ADDR_LOC 10
5014: PUSH
5015: LD_LOC 10
5019: PUSH
5020: LD_INT 1
5022: PLUS
5023: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5024: LD_ADDR_VAR 0 2
5028: PUSH
5029: LD_INT 3
5031: PPUSH
5032: LD_INT 5
5034: PPUSH
5035: CALL_OW 12
5039: ST_TO_ADDR
// for i = 0 to 3 do
5040: LD_ADDR_VAR 0 1
5044: PUSH
5045: DOUBLE
5046: LD_INT 0
5048: DEC
5049: ST_TO_ADDR
5050: LD_INT 3
5052: PUSH
5053: FOR_TO
5054: IFFALSE 5133
// begin is_in := GetResourceArea ( north_west + i , mat_cans ) ;
5056: LD_ADDR_VAR 0 3
5060: PUSH
5061: LD_INT 4
5063: PUSH
5064: LD_VAR 0 1
5068: PLUS
5069: PPUSH
5070: LD_INT 1
5072: PPUSH
5073: CALL_OW 287
5077: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5078: LD_VAR 0 3
5082: PUSH
5083: LD_INT 500
5085: LESS
5086: PUSH
5087: LD_INT 1
5089: PPUSH
5090: LD_INT 10
5092: PPUSH
5093: CALL_OW 12
5097: PUSH
5098: LD_VAR 0 3
5102: PUSH
5103: LD_INT 100
5105: DIV
5106: GREATER
5107: OR
5108: IFFALSE 5131
// CreateCratesArea ( amount , north_west + i , true ) ;
5110: LD_VAR 0 2
5114: PPUSH
5115: LD_INT 4
5117: PUSH
5118: LD_VAR 0 1
5122: PLUS
5123: PPUSH
5124: LD_INT 1
5126: PPUSH
5127: CALL_OW 55
// end ;
5131: GO 5053
5133: POP
5134: POP
// enable ;
5135: ENABLE
// end ; end_of_file
5136: PPOPN 3
5138: END
// every 20 20$00 trigger apemanNumber do
5139: LD_EXP 36
5143: IFFALSE 5176
5145: GO 5147
5147: DISABLE
// begin enable ;
5148: ENABLE
// if apeLevel >= 8 then
5149: LD_EXP 41
5153: PUSH
5154: LD_INT 8
5156: GREATEREQUAL
5157: IFFALSE 5162
// disable else
5159: DISABLE
5160: GO 5176
// apeLevel := apeLevel + 1 ;
5162: LD_ADDR_EXP 41
5166: PUSH
5167: LD_EXP 41
5171: PUSH
5172: LD_INT 1
5174: PLUS
5175: ST_TO_ADDR
// end ;
5176: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5177: LD_EXP 36
5181: PUSH
5182: LD_EXP 37
5186: LESS
5187: IFFALSE 5327
5189: GO 5191
5191: DISABLE
5192: LD_INT 0
5194: PPUSH
5195: PPUSH
5196: PPUSH
5197: PPUSH
// begin enable ;
5198: ENABLE
// for i := 1 to apemanPos do
5199: LD_ADDR_VAR 0 1
5203: PUSH
5204: DOUBLE
5205: LD_INT 1
5207: DEC
5208: ST_TO_ADDR
5209: LD_EXP 39
5213: PUSH
5214: FOR_TO
5215: IFFALSE 5325
// begin if apemanPlayerCount [ i ] then
5217: LD_EXP 40
5221: PUSH
5222: LD_VAR 0 1
5226: ARRAY
5227: IFFALSE 5323
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5229: LD_EXP 40
5233: PUSH
5234: LD_VAR 0 1
5238: ARRAY
5239: PUSH
5240: LD_EXP 39
5244: PUSH
5245: LD_VAR 0 1
5249: ARRAY
5250: GREATER
5251: IFFALSE 5323
// begin ape := PrepareApeman ;
5253: LD_ADDR_VAR 0 2
5257: PUSH
5258: CALL 5830 0 0
5262: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5263: LD_VAR 0 2
5267: PPUSH
5268: LD_EXP 42
5272: PUSH
5273: LD_VAR 0 1
5277: ARRAY
5278: PPUSH
5279: LD_INT 0
5281: PPUSH
5282: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5286: LD_ADDR_EXP 39
5290: PUSH
5291: LD_EXP 39
5295: PPUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: LD_EXP 39
5305: PUSH
5306: LD_VAR 0 1
5310: ARRAY
5311: PUSH
5312: LD_VAR 0 2
5316: UNION
5317: PPUSH
5318: CALL_OW 1
5322: ST_TO_ADDR
// end ; end ; end ;
5323: GO 5214
5325: POP
5326: POP
// end ;
5327: PPOPN 4
5329: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5330: LD_INT 0
5332: PPUSH
5333: PPUSH
5334: PPUSH
5335: PPUSH
5336: PPUSH
5337: PPUSH
5338: PPUSH
// playersAmount := 0 ;
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_INT 0
5346: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5347: LD_ADDR_VAR 0 7
5351: PUSH
5352: LD_INT 8
5354: PUSH
5355: LD_INT 9
5357: PUSH
5358: LD_INT 11
5360: PUSH
5361: LD_INT 10
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5370: LD_ADDR_EXP 42
5374: PUSH
5375: LD_INT 0
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: LD_INT 0
5383: PUSH
5384: LD_INT 0
5386: PUSH
5387: LD_INT 0
5389: PUSH
5390: LD_INT 0
5392: PUSH
5393: LD_INT 0
5395: PUSH
5396: LD_INT 0
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: ST_TO_ADDR
// for j = 1 to Side_Positions do
5409: LD_ADDR_VAR 0 4
5413: PUSH
5414: DOUBLE
5415: LD_INT 1
5417: DEC
5418: ST_TO_ADDR
5419: LD_EXP 23
5423: PUSH
5424: FOR_TO
5425: IFFALSE 5492
// if Side_Positions [ j ] then
5427: LD_EXP 23
5431: PUSH
5432: LD_VAR 0 4
5436: ARRAY
5437: IFFALSE 5490
// begin playersAmount := playersAmount + 1 ;
5439: LD_ADDR_VAR 0 3
5443: PUSH
5444: LD_VAR 0 3
5448: PUSH
5449: LD_INT 1
5451: PLUS
5452: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5453: LD_ADDR_EXP 42
5457: PUSH
5458: LD_EXP 42
5462: PPUSH
5463: LD_VAR 0 4
5467: PPUSH
5468: LD_VAR 0 7
5472: PUSH
5473: LD_EXP 23
5477: PUSH
5478: LD_VAR 0 4
5482: ARRAY
5483: ARRAY
5484: PPUSH
5485: CALL_OW 1
5489: ST_TO_ADDR
// end ;
5490: GO 5424
5492: POP
5493: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5494: LD_ADDR_EXP 38
5498: PUSH
5499: LD_INT 3
5501: PUSH
5502: LD_EXP 15
5506: MUL
5507: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5508: LD_ADDR_EXP 36
5512: PUSH
5513: LD_VAR 0 3
5517: PUSH
5518: LD_EXP 38
5522: MUL
5523: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5524: LD_ADDR_EXP 37
5528: PUSH
5529: LD_EXP 36
5533: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5534: LD_ADDR_EXP 39
5538: PUSH
5539: LD_INT 0
5541: PUSH
5542: LD_INT 0
5544: PUSH
5545: LD_INT 0
5547: PUSH
5548: LD_INT 0
5550: PUSH
5551: LD_INT 0
5553: PUSH
5554: LD_INT 0
5556: PUSH
5557: LD_INT 0
5559: PUSH
5560: LD_INT 0
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5573: LD_ADDR_EXP 40
5577: PUSH
5578: LD_INT 0
5580: PUSH
5581: LD_INT 0
5583: PUSH
5584: LD_INT 0
5586: PUSH
5587: LD_INT 0
5589: PUSH
5590: LD_INT 0
5592: PUSH
5593: LD_INT 0
5595: PUSH
5596: LD_INT 0
5598: PUSH
5599: LD_INT 0
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: ST_TO_ADDR
// apeLevel := 1 ;
5612: LD_ADDR_EXP 41
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// if not apemanNumber then
5620: LD_EXP 36
5624: NOT
5625: IFFALSE 5629
// exit ;
5627: GO 5825
// for i := 1 to apemanPerPlayer do
5629: LD_ADDR_VAR 0 2
5633: PUSH
5634: DOUBLE
5635: LD_INT 1
5637: DEC
5638: ST_TO_ADDR
5639: LD_EXP 38
5643: PUSH
5644: FOR_TO
5645: IFFALSE 5823
// begin for j := 1 to Side_Positions do
5647: LD_ADDR_VAR 0 4
5651: PUSH
5652: DOUBLE
5653: LD_INT 1
5655: DEC
5656: ST_TO_ADDR
5657: LD_EXP 23
5661: PUSH
5662: FOR_TO
5663: IFFALSE 5819
// if Side_Positions [ j ] then
5665: LD_EXP 23
5669: PUSH
5670: LD_VAR 0 4
5674: ARRAY
5675: IFFALSE 5817
// begin pos := Side_Positions [ j ] ;
5677: LD_ADDR_VAR 0 6
5681: PUSH
5682: LD_EXP 23
5686: PUSH
5687: LD_VAR 0 4
5691: ARRAY
5692: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5693: LD_ADDR_EXP 40
5697: PUSH
5698: LD_EXP 40
5702: PPUSH
5703: LD_VAR 0 4
5707: PPUSH
5708: LD_EXP 40
5712: PUSH
5713: LD_VAR 0 4
5717: ARRAY
5718: PUSH
5719: LD_INT 1
5721: PLUS
5722: PPUSH
5723: CALL_OW 1
5727: ST_TO_ADDR
// ape := PrepareApeman ;
5728: LD_ADDR_VAR 0 5
5732: PUSH
5733: CALL 5830 0 0
5737: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5738: LD_ADDR_EXP 39
5742: PUSH
5743: LD_EXP 39
5747: PPUSH
5748: LD_VAR 0 4
5752: PPUSH
5753: LD_EXP 39
5757: PUSH
5758: LD_VAR 0 4
5762: ARRAY
5763: PPUSH
5764: LD_EXP 39
5768: PUSH
5769: LD_VAR 0 4
5773: ARRAY
5774: PUSH
5775: LD_INT 1
5777: PLUS
5778: PPUSH
5779: LD_VAR 0 5
5783: PPUSH
5784: CALL_OW 1
5788: PPUSH
5789: CALL_OW 1
5793: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5794: LD_VAR 0 5
5798: PPUSH
5799: LD_EXP 42
5803: PUSH
5804: LD_VAR 0 4
5808: ARRAY
5809: PPUSH
5810: LD_INT 0
5812: PPUSH
5813: CALL_OW 49
// end ;
5817: GO 5662
5819: POP
5820: POP
// end ;
5821: GO 5644
5823: POP
5824: POP
// end ;
5825: LD_VAR 0 1
5829: RET
// export function PrepareApeman ; var bonus ; begin
5830: LD_INT 0
5832: PPUSH
5833: PPUSH
// uc_side := 0 ;
5834: LD_ADDR_OWVAR 20
5838: PUSH
5839: LD_INT 0
5841: ST_TO_ADDR
// uc_nation := 0 ;
5842: LD_ADDR_OWVAR 21
5846: PUSH
5847: LD_INT 0
5849: ST_TO_ADDR
// InitHc ;
5850: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5854: LD_ADDR_VAR 0 2
5858: PUSH
5859: LD_INT 1
5861: NEG
5862: PUSH
5863: LD_INT 0
5865: PUSH
5866: LD_INT 1
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: LIST
5873: PUSH
5874: LD_OWVAR 1
5878: PUSH
5879: LD_INT 3
5881: MOD
5882: PUSH
5883: LD_INT 1
5885: PLUS
5886: ARRAY
5887: ST_TO_ADDR
// hc_class := class_apeman ;
5888: LD_ADDR_OWVAR 28
5892: PUSH
5893: LD_INT 12
5895: ST_TO_ADDR
// hc_gallery :=  ;
5896: LD_ADDR_OWVAR 33
5900: PUSH
5901: LD_STRING 
5903: ST_TO_ADDR
// hc_name :=  ;
5904: LD_ADDR_OWVAR 26
5908: PUSH
5909: LD_STRING 
5911: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5912: LD_ADDR_OWVAR 31
5916: PUSH
5917: LD_EXP 41
5921: PUSH
5922: LD_VAR 0 2
5926: PLUS
5927: PUSH
5928: LD_EXP 41
5932: PUSH
5933: LD_VAR 0 2
5937: PLUS
5938: PUSH
5939: LD_EXP 41
5943: PUSH
5944: LD_VAR 0 2
5948: PLUS
5949: PUSH
5950: LD_EXP 41
5954: PUSH
5955: LD_VAR 0 2
5959: PLUS
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5967: LD_ADDR_OWVAR 35
5971: PUSH
5972: LD_INT 10
5974: PUSH
5975: LD_VAR 0 2
5979: MUL
5980: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5981: LD_ADDR_OWVAR 29
5985: PUSH
5986: LD_INT 12
5988: PUSH
5989: LD_INT 10
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: ST_TO_ADDR
// result := CreateHuman ;
5996: LD_ADDR_VAR 0 1
6000: PUSH
6001: CALL_OW 44
6005: ST_TO_ADDR
// end ;
6006: LD_VAR 0 1
6010: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6011: LD_INT 0
6013: PPUSH
6014: PPUSH
6015: PPUSH
// if not ape then
6016: LD_VAR 0 1
6020: NOT
6021: IFFALSE 6025
// exit ;
6023: GO 6150
// side := GetSide ( ape ) ;
6025: LD_ADDR_VAR 0 3
6029: PUSH
6030: LD_VAR 0 1
6034: PPUSH
6035: CALL_OW 255
6039: ST_TO_ADDR
// if not side then
6040: LD_VAR 0 3
6044: NOT
6045: IFFALSE 6099
// begin for i = 1 to apemanPos do
6047: LD_ADDR_VAR 0 4
6051: PUSH
6052: DOUBLE
6053: LD_INT 1
6055: DEC
6056: ST_TO_ADDR
6057: LD_EXP 39
6061: PUSH
6062: FOR_TO
6063: IFFALSE 6097
// if ape in apemanPos [ i ] then
6065: LD_VAR 0 1
6069: PUSH
6070: LD_EXP 39
6074: PUSH
6075: LD_VAR 0 4
6079: ARRAY
6080: IN
6081: IFFALSE 6095
// begin side := i ;
6083: LD_ADDR_VAR 0 3
6087: PUSH
6088: LD_VAR 0 4
6092: ST_TO_ADDR
// break ;
6093: GO 6097
// end ;
6095: GO 6062
6097: POP
6098: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6099: LD_ADDR_EXP 39
6103: PUSH
6104: LD_EXP 39
6108: PPUSH
6109: LD_VAR 0 3
6113: PPUSH
6114: LD_EXP 39
6118: PUSH
6119: LD_VAR 0 3
6123: ARRAY
6124: PUSH
6125: LD_VAR 0 1
6129: DIFF
6130: PPUSH
6131: CALL_OW 1
6135: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6136: LD_ADDR_EXP 36
6140: PUSH
6141: LD_EXP 36
6145: PUSH
6146: LD_INT 1
6148: MINUS
6149: ST_TO_ADDR
// end ; end_of_file
6150: LD_VAR 0 2
6154: RET
// var respawn_queue ; export function init_respawn ; begin
6155: LD_INT 0
6157: PPUSH
// if not def_people_respawning then
6158: LD_EXP 60
6162: NOT
6163: IFFALSE 6167
// exit ;
6165: GO 6209
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6167: LD_ADDR_LOC 11
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: LD_INT 0
6186: PUSH
6187: LD_INT 0
6189: PUSH
6190: LD_INT 0
6192: PUSH
6193: LD_INT 0
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: ST_TO_ADDR
// enable ( 10 ) ;
6206: LD_INT 10
6208: ENABLE_MARKED
// end ;
6209: LD_VAR 0 1
6213: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6214: GO 6216
6216: DISABLE
6217: LD_INT 0
6219: PPUSH
6220: PPUSH
6221: PPUSH
6222: PPUSH
// begin for side = 1 to Side_Positions do
6223: LD_ADDR_VAR 0 4
6227: PUSH
6228: DOUBLE
6229: LD_INT 1
6231: DEC
6232: ST_TO_ADDR
6233: LD_EXP 23
6237: PUSH
6238: FOR_TO
6239: IFFALSE 6405
// if Side_Positions [ side ] then
6241: LD_EXP 23
6245: PUSH
6246: LD_VAR 0 4
6250: ARRAY
6251: IFFALSE 6403
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6253: LD_ADDR_VAR 0 2
6257: PUSH
6258: LD_INT 22
6260: PUSH
6261: LD_VAR 0 4
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PUSH
6270: LD_INT 21
6272: PUSH
6273: LD_INT 1
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: LD_INT 23
6285: PUSH
6286: LD_INT 0
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: PPUSH
6299: CALL_OW 69
6303: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6304: LD_VAR 0 2
6308: PUSH
6309: LD_EXP 9
6313: LESS
6314: PUSH
6315: LD_LOC 11
6319: PUSH
6320: LD_VAR 0 4
6324: ARRAY
6325: NOT
6326: AND
6327: IFFALSE 6343
// set_queue ( side , TICK ) ;
6329: LD_VAR 0 4
6333: PPUSH
6334: LD_OWVAR 1
6338: PPUSH
6339: CALL 6642 0 2
// time := TICK - respawn_queue [ side ] ;
6343: LD_ADDR_VAR 0 3
6347: PUSH
6348: LD_OWVAR 1
6352: PUSH
6353: LD_LOC 11
6357: PUSH
6358: LD_VAR 0 4
6362: ARRAY
6363: MINUS
6364: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6365: LD_LOC 11
6369: PUSH
6370: LD_VAR 0 4
6374: ARRAY
6375: PUSH
6376: LD_VAR 0 3
6380: PUSH
6381: LD_EXP 16
6385: GREATER
6386: AND
6387: IFFALSE 6403
// respawn_character ( side , time ) ;
6389: LD_VAR 0 4
6393: PPUSH
6394: LD_VAR 0 3
6398: PPUSH
6399: CALL 6411 0 2
// end ;
6403: GO 6238
6405: POP
6406: POP
// enable ;
6407: ENABLE
// end ;
6408: PPOPN 4
6410: END
// function respawn_character ( side , time ) ; var dep ; begin
6411: LD_INT 0
6413: PPUSH
6414: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6415: LD_INT 0
6417: PPUSH
6418: LD_INT 1
6420: PPUSH
6421: CALL_OW 12
6425: PUSH
6426: LD_VAR 0 2
6430: PUSH
6431: LD_EXP 17
6435: LESS
6436: AND
6437: IFFALSE 6441
// exit ;
6439: GO 6637
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6441: LD_ADDR_VAR 0 4
6445: PUSH
6446: LD_INT 22
6448: PUSH
6449: LD_VAR 0 1
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 30
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 30
6473: PUSH
6474: LD_INT 1
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: PUSH
6486: LD_INT 50
6488: PUSH
6489: EMPTY
6490: LIST
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: PPUSH
6497: CALL_OW 69
6501: ST_TO_ADDR
// if not dep then
6502: LD_VAR 0 4
6506: NOT
6507: IFFALSE 6513
// exit else
6509: GO 6637
6511: GO 6537
// dep := dep [ Rand ( 1 , dep ) ] ;
6513: LD_ADDR_VAR 0 4
6517: PUSH
6518: LD_VAR 0 4
6522: PUSH
6523: LD_INT 1
6525: PPUSH
6526: LD_VAR 0 4
6530: PPUSH
6531: CALL_OW 12
6535: ARRAY
6536: ST_TO_ADDR
// uc_side := side ;
6537: LD_ADDR_OWVAR 20
6541: PUSH
6542: LD_VAR 0 1
6546: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6547: LD_ADDR_OWVAR 21
6551: PUSH
6552: LD_EXP 24
6556: PUSH
6557: LD_VAR 0 1
6561: ARRAY
6562: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6563: LD_INT 0
6565: PPUSH
6566: LD_INT 0
6568: PPUSH
6569: LD_EXP 10
6573: PUSH
6574: LD_INT 2
6576: DIV
6577: PPUSH
6578: CALL_OW 380
// hc_importance := 0 ;
6582: LD_ADDR_OWVAR 32
6586: PUSH
6587: LD_INT 0
6589: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6590: CALL_OW 44
6594: PPUSH
6595: LD_VAR 0 4
6599: PPUSH
6600: CALL_OW 250
6604: PPUSH
6605: LD_VAR 0 4
6609: PPUSH
6610: CALL_OW 251
6614: PPUSH
6615: LD_INT 10
6617: PPUSH
6618: LD_INT 1
6620: PPUSH
6621: CALL_OW 50
// set_queue ( side , 0 ) ;
6625: LD_VAR 0 1
6629: PPUSH
6630: LD_INT 0
6632: PPUSH
6633: CALL 6642 0 2
// end ;
6637: LD_VAR 0 3
6641: RET
// function set_queue ( side , time ) ; begin
6642: LD_INT 0
6644: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6645: LD_ADDR_LOC 11
6649: PUSH
6650: LD_LOC 11
6654: PPUSH
6655: LD_VAR 0 1
6659: PPUSH
6660: CALL_OW 3
6664: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6665: LD_ADDR_LOC 11
6669: PUSH
6670: LD_LOC 11
6674: PPUSH
6675: LD_VAR 0 1
6679: PPUSH
6680: LD_VAR 0 2
6684: PPUSH
6685: CALL_OW 2
6689: ST_TO_ADDR
// end ; end_of_file
6690: LD_VAR 0 3
6694: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6695: LD_VAR 0 1
6699: PPUSH
6700: CALL_OW 266
6704: PUSH
6705: LD_INT 0
6707: PUSH
6708: LD_INT 1
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: IN
6715: IFFALSE 6740
// SetBName ( b , @ & GetSide ( b ) ) ;
6717: LD_VAR 0 1
6721: PPUSH
6722: LD_STRING @
6724: PUSH
6725: LD_VAR 0 1
6729: PPUSH
6730: CALL_OW 255
6734: STR
6735: PPUSH
6736: CALL_OW 500
// if def_game_rules then
6740: LD_EXP 49
6744: IFFALSE 6781
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6746: LD_VAR 0 1
6750: PPUSH
6751: LD_VAR 0 1
6755: PPUSH
6756: CALL_OW 266
6760: PPUSH
6761: LD_VAR 0 1
6765: PPUSH
6766: CALL_OW 255
6770: PPUSH
6771: LD_INT 0
6773: PPUSH
6774: LD_INT 1
6776: PPUSH
6777: CALL 16613 0 5
// end ;
6781: PPOPN 2
6783: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6784: LD_VAR 0 1
6788: PPUSH
6789: CALL_OW 266
6793: PUSH
6794: LD_INT 0
6796: PUSH
6797: LD_INT 1
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: IN
6804: IFFALSE 6829
// SetBName ( b , @ & GetSide ( b ) ) ;
6806: LD_VAR 0 1
6810: PPUSH
6811: LD_STRING @
6813: PUSH
6814: LD_VAR 0 1
6818: PPUSH
6819: CALL_OW 255
6823: STR
6824: PPUSH
6825: CALL_OW 500
// if def_game_rules then
6829: LD_EXP 49
6833: IFFALSE 6872
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6835: LD_VAR 0 1
6839: PPUSH
6840: LD_VAR 0 1
6844: PPUSH
6845: CALL_OW 266
6849: PPUSH
6850: LD_VAR 0 1
6854: PPUSH
6855: CALL_OW 255
6859: PPUSH
6860: LD_VAR 0 2
6864: PPUSH
6865: LD_INT 1
6867: PPUSH
6868: CALL 16613 0 5
// end ;
6872: PPOPN 3
6874: END
// on VehicleConstructed ( veh , fac ) do var side ;
6875: LD_INT 0
6877: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6878: LD_VAR 0 1
6882: PPUSH
6883: CALL_OW 263
6887: PUSH
6888: LD_INT 5
6890: EQUAL
6891: IFFALSE 7033
// begin side := GetSide ( veh ) ;
6893: LD_ADDR_VAR 0 3
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: CALL_OW 255
6907: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6908: LD_ADDR_EXP 39
6912: PUSH
6913: LD_EXP 39
6917: PPUSH
6918: LD_VAR 0 3
6922: PPUSH
6923: LD_EXP 39
6927: PUSH
6928: LD_VAR 0 3
6932: ARRAY
6933: PPUSH
6934: LD_INT 52
6936: PUSH
6937: EMPTY
6938: LIST
6939: PPUSH
6940: CALL_OW 72
6944: PUSH
6945: LD_INT 22
6947: PUSH
6948: LD_VAR 0 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 33
6962: PUSH
6963: LD_INT 5
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 25
6972: PUSH
6973: LD_INT 12
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 15
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 25
6992: PUSH
6993: LD_INT 16
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 25
7002: PUSH
7003: LD_INT 17
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL_OW 69
7026: UNION
7027: PPUSH
7028: CALL_OW 1
7032: ST_TO_ADDR
// end ; end ;
7033: PPOPN 3
7035: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7042: LD_VAR 0 1
7046: PPUSH
7047: CALL_OW 257
7051: PUSH
7052: LD_INT 12
7054: PUSH
7055: LD_INT 15
7057: PUSH
7058: LD_INT 17
7060: PUSH
7061: LD_INT 16
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: IN
7070: PUSH
7071: LD_VAR 0 1
7075: PPUSH
7076: CALL_OW 263
7080: PUSH
7081: LD_INT 5
7083: EQUAL
7084: OR
7085: IFFALSE 7096
// ApeKilled ( j ) ;
7087: LD_VAR 0 1
7091: PPUSH
7092: CALL 6011 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7096: LD_VAR 0 1
7100: PPUSH
7101: CALL_OW 266
7105: PUSH
7106: LD_INT 0
7108: PUSH
7109: LD_INT 1
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: IN
7116: IFFALSE 7198
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7118: LD_ADDR_VAR 0 4
7122: PUSH
7123: LD_EXP 23
7127: PUSH
7128: LD_VAR 0 1
7132: PPUSH
7133: CALL_OW 255
7137: ARRAY
7138: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7139: LD_ADDR_VAR 0 2
7143: PUSH
7144: LD_EXP 32
7148: PUSH
7149: LD_VAR 0 4
7153: ARRAY
7154: PUSH
7155: LD_INT 1
7157: ARRAY
7158: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7159: LD_ADDR_VAR 0 3
7163: PUSH
7164: LD_EXP 32
7168: PUSH
7169: LD_VAR 0 4
7173: ARRAY
7174: PUSH
7175: LD_INT 2
7177: ARRAY
7178: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7179: LD_VAR 0 2
7183: PPUSH
7184: LD_VAR 0 3
7188: PPUSH
7189: CALL_OW 420
7193: PPUSH
7194: CALL_OW 419
// end ; if def_game_rules then
7198: LD_EXP 49
7202: IFFALSE 7301
// if ( GetType ( j ) = 3 ) then
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 247
7213: PUSH
7214: LD_INT 3
7216: EQUAL
7217: IFFALSE 7257
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7219: LD_VAR 0 1
7223: PPUSH
7224: LD_VAR 0 1
7228: PPUSH
7229: CALL_OW 266
7233: PPUSH
7234: LD_VAR 0 1
7238: PPUSH
7239: CALL_OW 255
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: LD_INT 1
7249: NEG
7250: PPUSH
7251: CALL 16613 0 5
7255: GO 7301
// if ( GetChassis ( j ) = 25 ) then
7257: LD_VAR 0 1
7261: PPUSH
7262: CALL_OW 265
7266: PUSH
7267: LD_INT 25
7269: EQUAL
7270: IFFALSE 7301
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7272: LD_VAR 0 1
7276: PPUSH
7277: LD_INT 37
7279: PPUSH
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 255
7289: PPUSH
7290: LD_INT 0
7292: PPUSH
7293: LD_INT 1
7295: NEG
7296: PPUSH
7297: CALL 16613 0 5
// end ;
7301: PPOPN 5
7303: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7304: LD_EXP 49
7308: PUSH
7309: LD_VAR 0 1
7313: PPUSH
7314: CALL_OW 265
7318: PUSH
7319: LD_INT 25
7321: EQUAL
7322: AND
7323: IFFALSE 7355
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7325: LD_VAR 0 1
7329: PPUSH
7330: LD_INT 37
7332: PPUSH
7333: LD_VAR 0 1
7337: PPUSH
7338: CALL_OW 255
7342: PPUSH
7343: LD_VAR 0 3
7347: PPUSH
7348: LD_INT 1
7350: PPUSH
7351: CALL 16613 0 5
// end ;
7355: PPOPN 4
7357: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7358: LD_VAR 0 1
7362: PPUSH
7363: LD_VAR 0 2
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: LD_OWVAR 2
7377: PPUSH
7378: CALL 18100 0 4
7382: PPOPN 3
7384: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
7385: LD_INT 0
7387: PPUSH
7388: PPUSH
7389: PPUSH
7390: PPUSH
7391: PPUSH
7392: PPUSH
// artefact_number := 3 ;
7393: LD_ADDR_EXP 43
7397: PUSH
7398: LD_INT 3
7400: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
7401: LD_ADDR_EXP 44
7405: PUSH
7406: LD_INT 1
7408: PUSH
7409: LD_INT 0
7411: PUSH
7412: LD_INT 2
7414: PUSH
7415: LD_INT 0
7417: PUSH
7418: LD_INT 3
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
7428: LD_ADDR_EXP 45
7432: PUSH
7433: LD_INT 1
7435: PUSH
7436: LD_INT 3
7438: PUSH
7439: LD_INT 5
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
7447: LD_ADDR_VAR 0 2
7451: PUSH
7452: LD_INT 1
7454: PUSH
7455: LD_INT 4
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: LD_INT 5
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 3
7474: PUSH
7475: LD_INT 9
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: LIST
7486: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
7487: LD_ADDR_VAR 0 3
7491: PUSH
7492: LD_INT 3
7494: PUSH
7495: LD_INT 4
7497: PUSH
7498: LD_INT 3
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
7506: LD_ADDR_VAR 0 4
7510: PUSH
7511: LD_INT 150
7513: PUSH
7514: LD_INT 250
7516: PUSH
7517: LD_INT 400
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: LIST
7524: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
7525: LD_ADDR_VAR 0 5
7529: PUSH
7530: LD_INT 2
7532: PUSH
7533: LD_INT 10
7535: PUSH
7536: LD_INT 20
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: LIST
7543: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
7544: LD_ADDR_VAR 0 6
7548: PUSH
7549: LD_INT 6
7551: PUSH
7552: LD_INT 18
7554: PUSH
7555: LD_INT 50
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
7563: LD_VAR 0 2
7567: PPUSH
7568: LD_VAR 0 3
7572: PPUSH
7573: LD_VAR 0 4
7577: PPUSH
7578: LD_VAR 0 5
7582: PPUSH
7583: LD_VAR 0 6
7587: PPUSH
7588: CALL 7597 0 5
// end ;
7592: LD_VAR 0 1
7596: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
7597: LD_INT 0
7599: PPUSH
7600: PPUSH
7601: PPUSH
7602: PPUSH
7603: PPUSH
// disable ( 1 ) ;
7604: LD_INT 1
7606: DISABLE_MARKED
// disable ( 5 ) ;
7607: LD_INT 5
7609: DISABLE_MARKED
// disable ( 6 ) ;
7610: LD_INT 6
7612: DISABLE_MARKED
// disable ( 7 ) ;
7613: LD_INT 7
7615: DISABLE_MARKED
// for side = 1 to 8 do
7616: LD_ADDR_VAR 0 9
7620: PUSH
7621: DOUBLE
7622: LD_INT 1
7624: DEC
7625: ST_TO_ADDR
7626: LD_INT 8
7628: PUSH
7629: FOR_TO
7630: IFFALSE 7646
// SetArtifactRes ( side , state_enabled ) ;
7632: LD_VAR 0 9
7636: PPUSH
7637: LD_INT 1
7639: PPUSH
7640: CALL_OW 467
7644: GO 7629
7646: POP
7647: POP
// for un = 0 to ( artefact_number - 1 ) do
7648: LD_ADDR_VAR 0 7
7652: PUSH
7653: DOUBLE
7654: LD_INT 0
7656: DEC
7657: ST_TO_ADDR
7658: LD_EXP 43
7662: PUSH
7663: LD_INT 1
7665: MINUS
7666: PUSH
7667: FOR_TO
7668: IFFALSE 8066
// begin base := un * 100 ;
7670: LD_ADDR_VAR 0 10
7674: PUSH
7675: LD_VAR 0 7
7679: PUSH
7680: LD_INT 100
7682: MUL
7683: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
7684: LD_VAR 0 10
7688: PUSH
7689: LD_INT 1
7691: PLUS
7692: PPUSH
7693: LD_VAR 0 1
7697: PUSH
7698: LD_VAR 0 7
7702: PUSH
7703: LD_INT 1
7705: PLUS
7706: ARRAY
7707: PUSH
7708: LD_INT 1
7710: ARRAY
7711: PPUSH
7712: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7716: LD_VAR 0 10
7720: PUSH
7721: LD_INT 2
7723: PLUS
7724: PPUSH
7725: LD_VAR 0 1
7729: PUSH
7730: LD_VAR 0 7
7734: PUSH
7735: LD_INT 1
7737: PLUS
7738: ARRAY
7739: PUSH
7740: LD_INT 2
7742: ARRAY
7743: PPUSH
7744: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7748: LD_VAR 0 10
7752: PUSH
7753: LD_INT 3
7755: PLUS
7756: PPUSH
7757: LD_VAR 0 2
7761: PUSH
7762: LD_VAR 0 7
7766: PUSH
7767: LD_INT 1
7769: PLUS
7770: ARRAY
7771: PPUSH
7772: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7776: LD_VAR 0 10
7780: PUSH
7781: LD_INT 5
7783: PLUS
7784: PPUSH
7785: LD_VAR 0 3
7789: PUSH
7790: LD_VAR 0 7
7794: PUSH
7795: LD_INT 1
7797: PLUS
7798: ARRAY
7799: PPUSH
7800: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7804: LD_VAR 0 10
7808: PUSH
7809: LD_INT 6
7811: PLUS
7812: PPUSH
7813: LD_VAR 0 4
7817: PUSH
7818: LD_VAR 0 7
7822: PUSH
7823: LD_INT 1
7825: PLUS
7826: ARRAY
7827: PPUSH
7828: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7832: LD_VAR 0 10
7836: PUSH
7837: LD_INT 7
7839: PLUS
7840: PPUSH
7841: LD_VAR 0 5
7845: PUSH
7846: LD_VAR 0 7
7850: PUSH
7851: LD_INT 1
7853: PLUS
7854: ARRAY
7855: PPUSH
7856: CALL_OW 109
// SetTag ( base + 08 , false ) ;
7860: LD_VAR 0 10
7864: PUSH
7865: LD_INT 8
7867: PLUS
7868: PPUSH
7869: LD_INT 0
7871: PPUSH
7872: CALL_OW 109
// SetTag ( base + 09 , false ) ;
7876: LD_VAR 0 10
7880: PUSH
7881: LD_INT 9
7883: PLUS
7884: PPUSH
7885: LD_INT 0
7887: PPUSH
7888: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
7892: LD_VAR 0 10
7896: PUSH
7897: LD_INT 11
7899: PLUS
7900: PPUSH
7901: LD_INT 0
7903: PPUSH
7904: CALL_OW 109
// SetTag ( base + 12 , false ) ;
7908: LD_VAR 0 10
7912: PUSH
7913: LD_INT 12
7915: PLUS
7916: PPUSH
7917: LD_INT 0
7919: PPUSH
7920: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7924: LD_VAR 0 10
7928: PUSH
7929: LD_INT 13
7931: PLUS
7932: PPUSH
7933: LD_INT 0
7935: PPUSH
7936: CALL_OW 109
// for i = 0 to 7 do
7940: LD_ADDR_VAR 0 8
7944: PUSH
7945: DOUBLE
7946: LD_INT 0
7948: DEC
7949: ST_TO_ADDR
7950: LD_INT 7
7952: PUSH
7953: FOR_TO
7954: IFFALSE 8062
// begin SetTag ( base + i * 10 + 21 , false ) ;
7956: LD_VAR 0 10
7960: PUSH
7961: LD_VAR 0 8
7965: PUSH
7966: LD_INT 10
7968: MUL
7969: PLUS
7970: PUSH
7971: LD_INT 21
7973: PLUS
7974: PPUSH
7975: LD_INT 0
7977: PPUSH
7978: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
7982: LD_VAR 0 10
7986: PUSH
7987: LD_VAR 0 8
7991: PUSH
7992: LD_INT 10
7994: MUL
7995: PLUS
7996: PUSH
7997: LD_INT 22
7999: PLUS
8000: PPUSH
8001: LD_INT 0
8003: PPUSH
8004: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
8008: LD_VAR 0 10
8012: PUSH
8013: LD_VAR 0 8
8017: PUSH
8018: LD_INT 10
8020: MUL
8021: PLUS
8022: PUSH
8023: LD_INT 23
8025: PLUS
8026: PPUSH
8027: LD_INT 0
8029: PPUSH
8030: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
8034: LD_VAR 0 10
8038: PUSH
8039: LD_VAR 0 8
8043: PUSH
8044: LD_INT 10
8046: MUL
8047: PLUS
8048: PUSH
8049: LD_INT 25
8051: PLUS
8052: PPUSH
8053: LD_INT 0
8055: PPUSH
8056: CALL_OW 109
// end ;
8060: GO 7953
8062: POP
8063: POP
// end ;
8064: GO 7667
8066: POP
8067: POP
// enable ( 20 ) ;
8068: LD_INT 20
8070: ENABLE_MARKED
// labs_in_use := [ ] ;
8071: LD_ADDR_EXP 46
8075: PUSH
8076: EMPTY
8077: ST_TO_ADDR
// if def_artefact_one then
8078: LD_EXP 1
8082: IFFALSE 8109
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
8084: LD_INT 4
8086: PPUSH
8087: LD_EXP 45
8091: PUSH
8092: LD_INT 1
8094: ARRAY
8095: PPUSH
8096: LD_INT 16
8098: PPUSH
8099: LD_INT 0
8101: PPUSH
8102: CALL_OW 59
// enable ( 5 ) ;
8106: LD_INT 5
8108: ENABLE_MARKED
// end ; if def_artefact_two then
8109: LD_EXP 2
8113: IFFALSE 8140
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
8115: LD_INT 4
8117: PPUSH
8118: LD_EXP 45
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PPUSH
8127: LD_INT 16
8129: PPUSH
8130: LD_INT 0
8132: PPUSH
8133: CALL_OW 59
// enable ( 6 ) ;
8137: LD_INT 6
8139: ENABLE_MARKED
// end ; if def_artefact_three then
8140: LD_EXP 3
8144: IFFALSE 8171
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
8146: LD_INT 4
8148: PPUSH
8149: LD_EXP 45
8153: PUSH
8154: LD_INT 3
8156: ARRAY
8157: PPUSH
8158: LD_INT 16
8160: PPUSH
8161: LD_INT 0
8163: PPUSH
8164: CALL_OW 59
// enable ( 7 ) ;
8168: LD_INT 7
8170: ENABLE_MARKED
// end ; end ;
8171: LD_VAR 0 6
8175: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
8176: LD_INT 0
8178: PPUSH
8179: PPUSH
// begin art := artefact_num [ size ] ;
8180: LD_ADDR_VAR 0 3
8184: PUSH
8185: LD_EXP 44
8189: PUSH
8190: LD_VAR 0 2
8194: ARRAY
8195: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8196: LD_ADDR_VAR 0 4
8200: PUSH
8201: LD_VAR 0 3
8205: PUSH
8206: LD_INT 1
8208: MINUS
8209: PUSH
8210: LD_INT 100
8212: MUL
8213: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
8214: LD_VAR 0 4
8218: PUSH
8219: LD_INT 9
8221: PLUS
8222: PPUSH
8223: LD_INT 0
8225: PPUSH
8226: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8230: LD_VAR 0 4
8234: PUSH
8235: LD_INT 13
8237: PLUS
8238: PPUSH
8239: LD_INT 0
8241: PPUSH
8242: CALL_OW 109
// Init_Lab ( art ) ;
8246: LD_VAR 0 3
8250: PPUSH
8251: CALL 9727 0 1
// end ;
8255: PPOPN 4
8257: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
8258: LD_INT 0
8260: PPUSH
8261: PPUSH
8262: PPUSH
// begin art := artefact_num [ size ] ;
8263: LD_ADDR_VAR 0 3
8267: PUSH
8268: LD_EXP 44
8272: PUSH
8273: LD_VAR 0 2
8277: ARRAY
8278: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8279: LD_ADDR_VAR 0 4
8283: PUSH
8284: LD_VAR 0 3
8288: PUSH
8289: LD_INT 1
8291: MINUS
8292: PUSH
8293: LD_INT 100
8295: MUL
8296: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
8297: LD_VAR 0 4
8301: PUSH
8302: LD_INT 9
8304: PLUS
8305: PPUSH
8306: LD_INT 1
8308: PPUSH
8309: CALL_OW 109
// SetTag ( base + 13 , un ) ;
8313: LD_VAR 0 4
8317: PUSH
8318: LD_INT 13
8320: PLUS
8321: PPUSH
8322: LD_VAR 0 1
8326: PPUSH
8327: CALL_OW 109
// if GetTag ( base + 11 ) then
8331: LD_VAR 0 4
8335: PUSH
8336: LD_INT 11
8338: PLUS
8339: PPUSH
8340: CALL_OW 110
8344: IFFALSE 8507
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
8346: LD_ADDR_VAR 0 5
8350: PUSH
8351: LD_VAR 0 4
8355: PUSH
8356: LD_INT 11
8358: PLUS
8359: PPUSH
8360: CALL_OW 110
8364: PPUSH
8365: CALL_OW 255
8369: ST_TO_ADDR
// if GetTag ( base + 12 ) then
8370: LD_VAR 0 4
8374: PUSH
8375: LD_INT 12
8377: PLUS
8378: PPUSH
8379: CALL_OW 110
8383: IFFALSE 8451
// begin ComCancel ( GetTag ( base + 11 ) ) ;
8385: LD_VAR 0 4
8389: PUSH
8390: LD_INT 11
8392: PLUS
8393: PPUSH
8394: CALL_OW 110
8398: PPUSH
8399: CALL_OW 127
// wait ( 5 ) ;
8403: LD_INT 5
8405: PPUSH
8406: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
8410: LD_ADDR_EXP 46
8414: PUSH
8415: LD_EXP 46
8419: PUSH
8420: LD_VAR 0 4
8424: PUSH
8425: LD_INT 11
8427: PLUS
8428: PPUSH
8429: CALL_OW 110
8433: DIFF
8434: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
8435: LD_VAR 0 4
8439: PUSH
8440: LD_INT 12
8442: PLUS
8443: PPUSH
8444: LD_INT 0
8446: PPUSH
8447: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
8451: LD_VAR 0 4
8455: PUSH
8456: LD_VAR 0 5
8460: PUSH
8461: LD_INT 10
8463: MUL
8464: PLUS
8465: PUSH
8466: LD_INT 11
8468: PLUS
8469: PPUSH
8470: CALL_OW 110
8474: NOT
8475: IFFALSE 8491
// DeInit_Lab ( side , art ) ;
8477: LD_VAR 0 5
8481: PPUSH
8482: LD_VAR 0 3
8486: PPUSH
8487: CALL 10263 0 2
// SetTag ( base + 11 , 0 ) ;
8491: LD_VAR 0 4
8495: PUSH
8496: LD_INT 11
8498: PLUS
8499: PPUSH
8500: LD_INT 0
8502: PPUSH
8503: CALL_OW 109
// end ; end ;
8507: PPOPN 5
8509: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
8510: LD_INT 0
8512: PPUSH
8513: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8514: LD_ADDR_VAR 0 3
8518: PUSH
8519: LD_VAR 0 1
8523: PPUSH
8524: CALL_OW 255
8528: PUSH
8529: LD_INT 1
8531: MINUS
8532: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8533: LD_ADDR_VAR 0 2
8537: PUSH
8538: DOUBLE
8539: LD_INT 0
8541: DEC
8542: ST_TO_ADDR
8543: LD_EXP 43
8547: PUSH
8548: LD_INT 1
8550: MINUS
8551: PUSH
8552: FOR_TO
8553: IFFALSE 8595
// if lab = GetTag ( un * 100 + 11 ) then
8555: LD_VAR 0 1
8559: PUSH
8560: LD_VAR 0 2
8564: PUSH
8565: LD_INT 100
8567: MUL
8568: PUSH
8569: LD_INT 11
8571: PLUS
8572: PPUSH
8573: CALL_OW 110
8577: EQUAL
8578: IFFALSE 8593
// Init_Lab ( un + 1 ) ;
8580: LD_VAR 0 2
8584: PUSH
8585: LD_INT 1
8587: PLUS
8588: PPUSH
8589: CALL 9727 0 1
8593: GO 8552
8595: POP
8596: POP
// end ;
8597: PPOPN 3
8599: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
8600: LD_INT 0
8602: PPUSH
8603: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8604: LD_ADDR_VAR 0 4
8608: PUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 255
8618: PUSH
8619: LD_INT 1
8621: MINUS
8622: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8623: LD_ADDR_VAR 0 3
8627: PUSH
8628: DOUBLE
8629: LD_INT 0
8631: DEC
8632: ST_TO_ADDR
8633: LD_EXP 43
8637: PUSH
8638: LD_INT 1
8640: MINUS
8641: PUSH
8642: FOR_TO
8643: IFFALSE 8761
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8645: LD_VAR 0 3
8649: PUSH
8650: LD_INT 100
8652: MUL
8653: PUSH
8654: LD_INT 11
8656: PLUS
8657: PPUSH
8658: CALL_OW 110
8662: PUSH
8663: LD_VAR 0 1
8667: EQUAL
8668: PUSH
8669: LD_VAR 0 3
8673: PUSH
8674: LD_INT 100
8676: MUL
8677: PUSH
8678: LD_INT 12
8680: PLUS
8681: PPUSH
8682: CALL_OW 110
8686: AND
8687: IFFALSE 8759
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
8689: LD_VAR 0 3
8693: PUSH
8694: LD_INT 100
8696: MUL
8697: PUSH
8698: LD_VAR 0 4
8702: PUSH
8703: LD_INT 10
8705: MUL
8706: PLUS
8707: PUSH
8708: LD_INT 22
8710: PLUS
8711: PPUSH
8712: LD_VAR 0 2
8716: PPUSH
8717: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8721: LD_VAR 0 3
8725: PUSH
8726: LD_INT 100
8728: MUL
8729: PUSH
8730: LD_INT 12
8732: PLUS
8733: PPUSH
8734: LD_INT 0
8736: PPUSH
8737: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8741: LD_ADDR_EXP 46
8745: PUSH
8746: LD_EXP 46
8750: PUSH
8751: LD_VAR 0 1
8755: DIFF
8756: ST_TO_ADDR
// break ;
8757: GO 8761
// end ;
8759: GO 8642
8761: POP
8762: POP
// Update_Artefact ( lab ) ;
8763: LD_VAR 0 1
8767: PPUSH
8768: CALL 10402 0 1
// end ;
8772: PPOPN 4
8774: END
// on SpecResearchComplete ( lab ) do var un , side ;
8775: LD_INT 0
8777: PPUSH
8778: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8779: LD_ADDR_VAR 0 3
8783: PUSH
8784: LD_VAR 0 1
8788: PPUSH
8789: CALL_OW 255
8793: PUSH
8794: LD_INT 1
8796: MINUS
8797: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8798: LD_ADDR_VAR 0 2
8802: PUSH
8803: DOUBLE
8804: LD_INT 0
8806: DEC
8807: ST_TO_ADDR
8808: LD_EXP 43
8812: PUSH
8813: LD_INT 1
8815: MINUS
8816: PUSH
8817: FOR_TO
8818: IFFALSE 8964
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8820: LD_VAR 0 2
8824: PUSH
8825: LD_INT 100
8827: MUL
8828: PUSH
8829: LD_INT 11
8831: PLUS
8832: PPUSH
8833: CALL_OW 110
8837: PUSH
8838: LD_VAR 0 1
8842: EQUAL
8843: PUSH
8844: LD_VAR 0 2
8848: PUSH
8849: LD_INT 100
8851: MUL
8852: PUSH
8853: LD_INT 12
8855: PLUS
8856: PPUSH
8857: CALL_OW 110
8861: AND
8862: IFFALSE 8962
// begin SetTag ( un * 100 + 12 , false ) ;
8864: LD_VAR 0 2
8868: PUSH
8869: LD_INT 100
8871: MUL
8872: PUSH
8873: LD_INT 12
8875: PLUS
8876: PPUSH
8877: LD_INT 0
8879: PPUSH
8880: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
8884: LD_VAR 0 2
8888: PUSH
8889: LD_INT 100
8891: MUL
8892: PUSH
8893: LD_VAR 0 3
8897: PUSH
8898: LD_INT 10
8900: MUL
8901: PLUS
8902: PUSH
8903: LD_INT 21
8905: PLUS
8906: PPUSH
8907: LD_INT 1
8909: PPUSH
8910: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
8914: LD_VAR 0 2
8918: PUSH
8919: LD_INT 100
8921: MUL
8922: PUSH
8923: LD_VAR 0 3
8927: PUSH
8928: LD_INT 10
8930: MUL
8931: PLUS
8932: PUSH
8933: LD_INT 25
8935: PLUS
8936: PPUSH
8937: LD_VAR 0 1
8941: PPUSH
8942: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8946: LD_ADDR_EXP 46
8950: PUSH
8951: LD_EXP 46
8955: PUSH
8956: LD_VAR 0 1
8960: DIFF
8961: ST_TO_ADDR
// end ;
8962: GO 8817
8964: POP
8965: POP
// Update_Artefact ( lab ) ;
8966: LD_VAR 0 1
8970: PPUSH
8971: CALL 10402 0 1
// end ;
8975: PPOPN 3
8977: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
8978: LD_INT 0
8980: PPUSH
8981: PPUSH
8982: PPUSH
8983: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
8984: LD_ADDR_VAR 0 7
8988: PUSH
8989: LD_VAR 0 2
8993: PUSH
8994: LD_INT 1
8996: MINUS
8997: PUSH
8998: LD_INT 3
9000: MOD
9001: PUSH
9002: LD_INT 1
9004: PLUS
9005: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
9006: LD_ADDR_VAR 0 8
9010: PUSH
9011: LD_VAR 0 7
9015: PUSH
9016: LD_INT 1
9018: MINUS
9019: PUSH
9020: LD_INT 100
9022: MUL
9023: ST_TO_ADDR
// if number <= 3 then
9024: LD_VAR 0 2
9028: PUSH
9029: LD_INT 3
9031: LESSEQUAL
9032: IFFALSE 9264
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
9034: LD_VAR 0 8
9038: PUSH
9039: LD_INT 11
9041: PLUS
9042: PPUSH
9043: CALL_OW 110
9047: PPUSH
9048: LD_VAR 0 8
9052: PUSH
9053: LD_INT 5
9055: PLUS
9056: PPUSH
9057: CALL_OW 110
9061: PPUSH
9062: LD_INT 1
9064: PPUSH
9065: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
9069: LD_VAR 0 8
9073: PUSH
9074: LD_INT 11
9076: PLUS
9077: PPUSH
9078: CALL_OW 110
9082: PPUSH
9083: LD_VAR 0 8
9087: PUSH
9088: LD_VAR 0 1
9092: PUSH
9093: LD_INT 10
9095: MUL
9096: PLUS
9097: PUSH
9098: LD_INT 12
9100: PLUS
9101: PPUSH
9102: CALL_OW 110
9106: PPUSH
9107: CALL_OW 329
// SetTag ( base + 12 , true ) ;
9111: LD_VAR 0 8
9115: PUSH
9116: LD_INT 12
9118: PLUS
9119: PPUSH
9120: LD_INT 1
9122: PPUSH
9123: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
9127: LD_ADDR_EXP 46
9131: PUSH
9132: LD_EXP 46
9136: PUSH
9137: LD_VAR 0 8
9141: PUSH
9142: LD_INT 11
9144: PLUS
9145: PPUSH
9146: CALL_OW 110
9150: ADD
9151: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9152: LD_ADDR_VAR 0 5
9156: PUSH
9157: DOUBLE
9158: LD_INT 0
9160: DEC
9161: ST_TO_ADDR
9162: LD_EXP 43
9166: PUSH
9167: LD_INT 1
9169: MINUS
9170: PUSH
9171: FOR_TO
9172: IFFALSE 9260
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9174: LD_VAR 0 8
9178: PUSH
9179: LD_INT 11
9181: PLUS
9182: PPUSH
9183: CALL_OW 110
9187: PUSH
9188: LD_VAR 0 5
9192: PUSH
9193: LD_INT 100
9195: MUL
9196: PUSH
9197: LD_INT 11
9199: PLUS
9200: PPUSH
9201: CALL_OW 110
9205: PUSH
9206: LD_VAR 0 5
9210: PUSH
9211: LD_INT 100
9213: MUL
9214: PUSH
9215: LD_VAR 0 1
9219: PUSH
9220: LD_INT 10
9222: MUL
9223: PLUS
9224: PUSH
9225: LD_INT 15
9227: PLUS
9228: PPUSH
9229: CALL_OW 110
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: IN
9238: IFFALSE 9258
// DeInit_Lab ( side , un + 1 ) ;
9240: LD_VAR 0 1
9244: PPUSH
9245: LD_VAR 0 5
9249: PUSH
9250: LD_INT 1
9252: PLUS
9253: PPUSH
9254: CALL 10263 0 2
9258: GO 9171
9260: POP
9261: POP
// end else
9262: GO 9438
// begin succes := false ;
9264: LD_ADDR_VAR 0 6
9268: PUSH
9269: LD_INT 0
9271: ST_TO_ADDR
// case art of 1 :
9272: LD_VAR 0 7
9276: PUSH
9277: LD_INT 1
9279: DOUBLE
9280: EQUAL
9281: IFTRUE 9285
9283: GO 9313
9285: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
9286: LD_ADDR_VAR 0 6
9290: PUSH
9291: LD_VAR 0 1
9295: PPUSH
9296: LD_VAR 0 3
9300: PPUSH
9301: LD_VAR 0 4
9305: PPUSH
9306: CALL 10835 0 3
9310: ST_TO_ADDR
9311: GO 9381
9313: LD_INT 2
9315: DOUBLE
9316: EQUAL
9317: IFTRUE 9321
9319: GO 9344
9321: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
9322: LD_ADDR_VAR 0 6
9326: PUSH
9327: LD_VAR 0 1
9331: PPUSH
9332: LD_VAR 0 3
9336: PPUSH
9337: CALL 11073 0 2
9341: ST_TO_ADDR
9342: GO 9381
9344: LD_INT 3
9346: DOUBLE
9347: EQUAL
9348: IFTRUE 9352
9350: GO 9380
9352: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
9353: LD_ADDR_VAR 0 6
9357: PUSH
9358: LD_VAR 0 1
9362: PPUSH
9363: LD_VAR 0 3
9367: PPUSH
9368: LD_VAR 0 4
9372: PPUSH
9373: CALL 11469 0 3
9377: ST_TO_ADDR
9378: GO 9381
9380: POP
// if succes then
9381: LD_VAR 0 6
9385: IFFALSE 9438
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
9387: LD_VAR 0 8
9391: PUSH
9392: LD_VAR 0 1
9396: PUSH
9397: LD_INT 10
9399: MUL
9400: PLUS
9401: PUSH
9402: LD_INT 13
9404: PLUS
9405: PPUSH
9406: LD_VAR 0 8
9410: PUSH
9411: LD_INT 7
9413: PLUS
9414: PPUSH
9415: CALL_OW 110
9419: PPUSH
9420: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
9424: LD_VAR 0 1
9428: PPUSH
9429: LD_VAR 0 7
9433: PPUSH
9434: CALL 9441 0 2
// end ; end ; end ;
9438: PPOPN 8
9440: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
9441: LD_INT 0
9443: PPUSH
9444: PPUSH
9445: PPUSH
// base := ( art - 1 ) * 100 ;
9446: LD_ADDR_VAR 0 4
9450: PUSH
9451: LD_VAR 0 2
9455: PUSH
9456: LD_INT 1
9458: MINUS
9459: PUSH
9460: LD_INT 100
9462: MUL
9463: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9464: LD_ADDR_VAR 0 5
9468: PUSH
9469: LD_VAR 0 4
9473: PUSH
9474: LD_VAR 0 1
9478: PUSH
9479: LD_INT 10
9481: MUL
9482: PLUS
9483: PUSH
9484: LD_INT 15
9486: PLUS
9487: PPUSH
9488: CALL_OW 110
9492: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
9493: LD_VAR 0 5
9497: PUSH
9498: LD_VAR 0 5
9502: PUSH
9503: LD_EXP 46
9507: IN
9508: NOT
9509: AND
9510: IFFALSE 9568
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
9512: LD_VAR 0 1
9516: PPUSH
9517: LD_VAR 0 4
9521: PUSH
9522: LD_INT 1
9524: PLUS
9525: PUSH
9526: LD_VAR 0 4
9530: PUSH
9531: LD_VAR 0 1
9535: PUSH
9536: LD_INT 10
9538: MUL
9539: PLUS
9540: PUSH
9541: LD_INT 11
9543: PLUS
9544: PPUSH
9545: CALL_OW 110
9549: PLUS
9550: PPUSH
9551: CALL_OW 110
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: LD_VAR 0 5
9563: PPUSH
9564: CALL_OW 468
// end ;
9568: LD_VAR 0 3
9572: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
9573: LD_INT 0
9575: PPUSH
9576: PPUSH
9577: PPUSH
// base := ( art - 1 ) * 100 ;
9578: LD_ADDR_VAR 0 4
9582: PUSH
9583: LD_VAR 0 2
9587: PUSH
9588: LD_INT 1
9590: MINUS
9591: PUSH
9592: LD_INT 100
9594: MUL
9595: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9596: LD_ADDR_VAR 0 5
9600: PUSH
9601: LD_VAR 0 4
9605: PUSH
9606: LD_VAR 0 1
9610: PUSH
9611: LD_INT 10
9613: MUL
9614: PLUS
9615: PUSH
9616: LD_INT 15
9618: PLUS
9619: PPUSH
9620: CALL_OW 110
9624: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
9625: LD_VAR 0 5
9629: PUSH
9630: LD_VAR 0 5
9634: PUSH
9635: LD_EXP 46
9639: IN
9640: NOT
9641: AND
9642: PUSH
9643: LD_VAR 0 5
9647: PPUSH
9648: CALL_OW 313
9652: AND
9653: IFFALSE 9722
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
9655: LD_VAR 0 1
9659: PPUSH
9660: LD_VAR 0 4
9664: PUSH
9665: LD_INT 1
9667: PLUS
9668: PUSH
9669: LD_VAR 0 4
9673: PUSH
9674: LD_VAR 0 1
9678: PUSH
9679: LD_INT 10
9681: MUL
9682: PLUS
9683: PUSH
9684: LD_INT 11
9686: PLUS
9687: PPUSH
9688: CALL_OW 110
9692: PLUS
9693: PPUSH
9694: CALL_OW 110
9698: PPUSH
9699: LD_VAR 0 4
9703: PUSH
9704: LD_INT 3
9706: PLUS
9707: PPUSH
9708: CALL_OW 110
9712: PPUSH
9713: LD_VAR 0 5
9717: PPUSH
9718: CALL_OW 468
// end ;
9722: LD_VAR 0 3
9726: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9727: LD_INT 0
9729: PPUSH
9730: PPUSH
9731: PPUSH
9732: PPUSH
9733: PPUSH
9734: PPUSH
9735: PPUSH
9736: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9737: LD_ADDR_VAR 0 8
9741: PUSH
9742: LD_EXP 45
9746: PUSH
9747: LD_VAR 0 1
9751: ARRAY
9752: PPUSH
9753: CALL_OW 469
9757: ST_TO_ADDR
// if not art_hex then
9758: LD_VAR 0 8
9762: NOT
9763: IFFALSE 9767
// exit ;
9765: GO 10258
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9767: LD_ADDR_VAR 0 3
9771: PUSH
9772: LD_INT 2
9774: PUSH
9775: LD_INT 30
9777: PUSH
9778: LD_INT 6
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 30
9787: PUSH
9788: LD_INT 7
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 30
9797: PUSH
9798: LD_INT 8
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: PUSH
9811: EMPTY
9812: LIST
9813: PPUSH
9814: CALL_OW 69
9818: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9819: LD_ADDR_VAR 0 9
9823: PUSH
9824: LD_VAR 0 3
9828: PPUSH
9829: LD_VAR 0 8
9833: PUSH
9834: LD_INT 1
9836: ARRAY
9837: PPUSH
9838: LD_VAR 0 8
9842: PUSH
9843: LD_INT 2
9845: ARRAY
9846: PPUSH
9847: CALL_OW 73
9851: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9852: LD_ADDR_VAR 0 6
9856: PUSH
9857: LD_VAR 0 9
9861: PPUSH
9862: LD_VAR 0 8
9866: PUSH
9867: LD_INT 1
9869: ARRAY
9870: PPUSH
9871: LD_VAR 0 8
9875: PUSH
9876: LD_INT 2
9878: ARRAY
9879: PPUSH
9880: CALL_OW 297
9884: ST_TO_ADDR
// if dist < 9 then
9885: LD_VAR 0 6
9889: PUSH
9890: LD_INT 9
9892: LESS
9893: IFFALSE 10258
// begin side := GetSide ( nearest_lab ) ;
9895: LD_ADDR_VAR 0 4
9899: PUSH
9900: LD_VAR 0 9
9904: PPUSH
9905: CALL_OW 255
9909: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
9910: LD_VAR 0 4
9914: PPUSH
9915: LD_VAR 0 1
9919: PPUSH
9920: CALL 10263 0 2
// base := ( art - 1 ) * 100 ;
9924: LD_ADDR_VAR 0 5
9928: PUSH
9929: LD_VAR 0 1
9933: PUSH
9934: LD_INT 1
9936: MINUS
9937: PUSH
9938: LD_INT 100
9940: MUL
9941: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
9942: LD_INT 24
9944: PPUSH
9945: LD_VAR 0 4
9949: PPUSH
9950: CALL_OW 321
9954: PUSH
9955: LD_INT 2
9957: EQUAL
9958: PUSH
9959: LD_VAR 0 9
9963: PPUSH
9964: CALL_OW 313
9968: AND
9969: IFFALSE 10161
// begin if GetTag ( base + side * 10 + 11 ) then
9971: LD_VAR 0 5
9975: PUSH
9976: LD_VAR 0 4
9980: PUSH
9981: LD_INT 10
9983: MUL
9984: PLUS
9985: PUSH
9986: LD_INT 11
9988: PLUS
9989: PPUSH
9990: CALL_OW 110
9994: IFFALSE 10151
// begin if not GetTag ( base + side * 10 + 13 ) then
9996: LD_VAR 0 5
10000: PUSH
10001: LD_VAR 0 4
10005: PUSH
10006: LD_INT 10
10008: MUL
10009: PLUS
10010: PUSH
10011: LD_INT 13
10013: PLUS
10014: PPUSH
10015: CALL_OW 110
10019: NOT
10020: IFFALSE 10043
// state := GetTag ( base + 03 ) else
10022: LD_ADDR_VAR 0 7
10026: PUSH
10027: LD_VAR 0 5
10031: PUSH
10032: LD_INT 3
10034: PLUS
10035: PPUSH
10036: CALL_OW 110
10040: ST_TO_ADDR
10041: GO 10051
// state := art_gray ;
10043: LD_ADDR_VAR 0 7
10047: PUSH
10048: LD_INT 1
10050: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
10051: LD_VAR 0 5
10055: PUSH
10056: LD_VAR 0 4
10060: PUSH
10061: LD_INT 10
10063: MUL
10064: PLUS
10065: PUSH
10066: LD_INT 15
10068: PLUS
10069: PPUSH
10070: CALL_OW 110
10074: PUSH
10075: LD_VAR 0 5
10079: PUSH
10080: LD_VAR 0 4
10084: PUSH
10085: LD_INT 10
10087: MUL
10088: PLUS
10089: PUSH
10090: LD_INT 15
10092: PLUS
10093: PPUSH
10094: CALL_OW 110
10098: PUSH
10099: LD_VAR 0 9
10103: NONEQUAL
10104: AND
10105: IFFALSE 10121
// DeInit_Lab ( side , art ) ;
10107: LD_VAR 0 4
10111: PPUSH
10112: LD_VAR 0 1
10116: PPUSH
10117: CALL 10263 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
10121: LD_VAR 0 5
10125: PUSH
10126: LD_VAR 0 4
10130: PUSH
10131: LD_INT 10
10133: MUL
10134: PLUS
10135: PUSH
10136: LD_INT 15
10138: PLUS
10139: PPUSH
10140: LD_VAR 0 9
10144: PPUSH
10145: CALL_OW 109
// end else
10149: GO 10159
// state := art_instant ;
10151: LD_ADDR_VAR 0 7
10155: PUSH
10156: LD_INT 2
10158: ST_TO_ADDR
// end else
10159: GO 10169
// state := art_gray ;
10161: LD_ADDR_VAR 0 7
10165: PUSH
10166: LD_INT 1
10168: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
10169: LD_VAR 0 5
10173: PUSH
10174: LD_INT 11
10176: PLUS
10177: PPUSH
10178: LD_VAR 0 9
10182: PPUSH
10183: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
10187: LD_VAR 0 9
10191: PUSH
10192: LD_EXP 46
10196: IN
10197: NOT
10198: IFFALSE 10258
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
10200: LD_VAR 0 4
10204: PPUSH
10205: LD_VAR 0 5
10209: PUSH
10210: LD_INT 1
10212: PLUS
10213: PUSH
10214: LD_VAR 0 5
10218: PUSH
10219: LD_VAR 0 4
10223: PUSH
10224: LD_INT 10
10226: MUL
10227: PLUS
10228: PUSH
10229: LD_INT 11
10231: PLUS
10232: PPUSH
10233: CALL_OW 110
10237: PLUS
10238: PPUSH
10239: CALL_OW 110
10243: PPUSH
10244: LD_VAR 0 7
10248: PPUSH
10249: LD_VAR 0 9
10253: PPUSH
10254: CALL_OW 468
// end ; end ;
10258: LD_VAR 0 2
10262: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
10263: LD_INT 0
10265: PPUSH
10266: PPUSH
10267: PPUSH
// base := ( art - 1 ) * 100 ;
10268: LD_ADDR_VAR 0 4
10272: PUSH
10273: LD_VAR 0 2
10277: PUSH
10278: LD_INT 1
10280: MINUS
10281: PUSH
10282: LD_INT 100
10284: MUL
10285: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
10286: LD_ADDR_VAR 0 5
10290: PUSH
10291: LD_VAR 0 4
10295: PUSH
10296: LD_VAR 0 1
10300: PUSH
10301: LD_INT 10
10303: MUL
10304: PLUS
10305: PUSH
10306: LD_INT 15
10308: PLUS
10309: PPUSH
10310: CALL_OW 110
10314: ST_TO_ADDR
// if not lab then
10315: LD_VAR 0 5
10319: NOT
10320: IFFALSE 10341
// lab := GetTag ( base + 11 ) ;
10322: LD_ADDR_VAR 0 5
10326: PUSH
10327: LD_VAR 0 4
10331: PUSH
10332: LD_INT 11
10334: PLUS
10335: PPUSH
10336: CALL_OW 110
10340: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
10341: LD_VAR 0 1
10345: PPUSH
10346: LD_VAR 0 4
10350: PUSH
10351: LD_INT 1
10353: PLUS
10354: PUSH
10355: LD_VAR 0 4
10359: PUSH
10360: LD_VAR 0 1
10364: PUSH
10365: LD_INT 10
10367: MUL
10368: PLUS
10369: PUSH
10370: LD_INT 11
10372: PLUS
10373: PPUSH
10374: CALL_OW 110
10378: PLUS
10379: PPUSH
10380: CALL_OW 110
10384: PPUSH
10385: LD_INT 0
10387: PPUSH
10388: LD_VAR 0 5
10392: PPUSH
10393: CALL_OW 468
// end ;
10397: LD_VAR 0 3
10401: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
10402: LD_INT 0
10404: PPUSH
10405: PPUSH
10406: PPUSH
10407: PPUSH
// side := GetSide ( lab ) ;
10408: LD_ADDR_VAR 0 4
10412: PUSH
10413: LD_VAR 0 1
10417: PPUSH
10418: CALL_OW 255
10422: ST_TO_ADDR
// for art = 1 to artefact_number do
10423: LD_ADDR_VAR 0 3
10427: PUSH
10428: DOUBLE
10429: LD_INT 1
10431: DEC
10432: ST_TO_ADDR
10433: LD_EXP 43
10437: PUSH
10438: FOR_TO
10439: IFFALSE 10595
// begin base := ( art - 1 ) * 100 ;
10441: LD_ADDR_VAR 0 5
10445: PUSH
10446: LD_VAR 0 3
10450: PUSH
10451: LD_INT 1
10453: MINUS
10454: PUSH
10455: LD_INT 100
10457: MUL
10458: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
10459: LD_VAR 0 5
10463: PUSH
10464: LD_INT 11
10466: PLUS
10467: PPUSH
10468: CALL_OW 110
10472: PUSH
10473: LD_VAR 0 1
10477: EQUAL
10478: IFFALSE 10491
// Init_Lab ( art ) else
10480: LD_VAR 0 3
10484: PPUSH
10485: CALL 9727 0 1
10489: GO 10593
// begin if lab = GetTag ( base + side * 10 + 15 ) then
10491: LD_VAR 0 1
10495: PUSH
10496: LD_VAR 0 5
10500: PUSH
10501: LD_VAR 0 4
10505: PUSH
10506: LD_INT 10
10508: MUL
10509: PLUS
10510: PUSH
10511: LD_INT 15
10513: PLUS
10514: PPUSH
10515: CALL_OW 110
10519: EQUAL
10520: IFFALSE 10593
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
10522: LD_VAR 0 5
10526: PUSH
10527: LD_VAR 0 4
10531: PUSH
10532: LD_INT 10
10534: MUL
10535: PLUS
10536: PUSH
10537: LD_INT 13
10539: PLUS
10540: PPUSH
10541: CALL_OW 110
10545: PUSH
10546: LD_INT 0
10548: GREATER
10549: PUSH
10550: LD_VAR 0 1
10554: PPUSH
10555: CALL_OW 313
10559: NOT
10560: OR
10561: IFFALSE 10579
// Shadow_Artefact ( side , art ) else
10563: LD_VAR 0 4
10567: PPUSH
10568: LD_VAR 0 3
10572: PPUSH
10573: CALL 9441 0 2
10577: GO 10593
// Highlight_Artefact ( side , art ) ;
10579: LD_VAR 0 4
10583: PPUSH
10584: LD_VAR 0 3
10588: PPUSH
10589: CALL 9573 0 2
// end ; end ; end ;
10593: GO 10438
10595: POP
10596: POP
// end ; end_of_file
10597: LD_VAR 0 2
10601: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
10602: LD_INT 10
10604: PPUSH
10605: CALL_OW 67
// if not IsBusy ( lab ) then
10609: LD_VAR 0 2
10613: PPUSH
10614: CALL_OW 315
10618: NOT
10619: IFFALSE 10646
// begin labs_in_use := labs_in_use diff lab ;
10621: LD_ADDR_EXP 46
10625: PUSH
10626: LD_EXP 46
10630: PUSH
10631: LD_VAR 0 2
10635: DIFF
10636: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10637: LD_VAR 0 2
10641: PPUSH
10642: CALL 10402 0 1
// end ; end ;
10646: PPOPN 2
10648: END
// on ResearchStarted ( tech , lab ) do var un , side ;
10649: LD_INT 0
10651: PPUSH
10652: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
10653: LD_ADDR_EXP 46
10657: PUSH
10658: LD_EXP 46
10662: PUSH
10663: LD_VAR 0 2
10667: ADD
10668: ST_TO_ADDR
// side := GetSide ( lab ) ;
10669: LD_ADDR_VAR 0 4
10673: PUSH
10674: LD_VAR 0 2
10678: PPUSH
10679: CALL_OW 255
10683: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
10684: LD_ADDR_VAR 0 3
10688: PUSH
10689: DOUBLE
10690: LD_INT 0
10692: DEC
10693: ST_TO_ADDR
10694: LD_EXP 43
10698: PUSH
10699: LD_INT 1
10701: MINUS
10702: PUSH
10703: FOR_TO
10704: IFFALSE 10783
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10706: LD_VAR 0 2
10710: PUSH
10711: LD_VAR 0 3
10715: PUSH
10716: LD_INT 100
10718: MUL
10719: PUSH
10720: LD_INT 11
10722: PLUS
10723: PPUSH
10724: CALL_OW 110
10728: PUSH
10729: LD_VAR 0 3
10733: PUSH
10734: LD_INT 100
10736: MUL
10737: PUSH
10738: LD_VAR 0 4
10742: PUSH
10743: LD_INT 10
10745: MUL
10746: PLUS
10747: PUSH
10748: LD_INT 15
10750: PLUS
10751: PPUSH
10752: CALL_OW 110
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: IN
10761: IFFALSE 10781
// DeInit_Lab ( side , un + 1 ) ;
10763: LD_VAR 0 4
10767: PPUSH
10768: LD_VAR 0 3
10772: PUSH
10773: LD_INT 1
10775: PLUS
10776: PPUSH
10777: CALL 10263 0 2
10781: GO 10703
10783: POP
10784: POP
// end ;
10785: PPOPN 4
10787: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10788: LD_INT 10
10790: PPUSH
10791: CALL_OW 67
// if not IsBusy ( lab ) then
10795: LD_VAR 0 2
10799: PPUSH
10800: CALL_OW 315
10804: NOT
10805: IFFALSE 10832
// begin labs_in_use := labs_in_use diff lab ;
10807: LD_ADDR_EXP 46
10811: PUSH
10812: LD_EXP 46
10816: PUSH
10817: LD_VAR 0 2
10821: DIFF
10822: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10823: LD_VAR 0 2
10827: PPUSH
10828: CALL 10402 0 1
// end ; end ; end_of_file
10832: PPOPN 2
10834: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10835: LD_INT 0
10837: PPUSH
10838: PPUSH
10839: PPUSH
// vysledek := true ;
10840: LD_ADDR_VAR 0 5
10844: PUSH
10845: LD_INT 1
10847: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
10848: LD_ADDR_VAR 0 6
10852: PUSH
10853: LD_VAR 0 1
10857: PUSH
10858: LD_INT 10
10860: MUL
10861: PUSH
10862: LD_INT 15
10864: PLUS
10865: PPUSH
10866: CALL_OW 110
10870: PPUSH
10871: CALL_OW 274
10875: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
10876: LD_VAR 0 6
10880: PUSH
10881: LD_VAR 0 6
10885: PPUSH
10886: CALL_OW 279
10890: PUSH
10891: LD_INT 3
10893: ARRAY
10894: PUSH
10895: LD_INT 6
10897: PPUSH
10898: CALL_OW 110
10902: GREATEREQUAL
10903: AND
10904: IFFALSE 10994
// begin PlaceSeeing ( x , y , side , - 15 ) ;
10906: LD_VAR 0 2
10910: PPUSH
10911: LD_VAR 0 3
10915: PPUSH
10916: LD_VAR 0 1
10920: PPUSH
10921: LD_INT 15
10923: NEG
10924: PPUSH
10925: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
10929: LD_VAR 0 6
10933: PPUSH
10934: LD_INT 3
10936: PPUSH
10937: LD_VAR 0 6
10941: PPUSH
10942: CALL_OW 279
10946: PUSH
10947: LD_INT 3
10949: ARRAY
10950: PUSH
10951: LD_INT 6
10953: PPUSH
10954: CALL_OW 110
10958: MINUS
10959: PPUSH
10960: CALL_OW 277
// view_data := [ x , y , side ] ;
10964: LD_ADDR_LOC 12
10968: PUSH
10969: LD_VAR 0 2
10973: PUSH
10974: LD_VAR 0 3
10978: PUSH
10979: LD_VAR 0 1
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: ST_TO_ADDR
// enable ( 1 ) ;
10989: LD_INT 1
10991: ENABLE_MARKED
// end else
10992: GO 11002
// vysledek := false ;
10994: LD_ADDR_VAR 0 5
10998: PUSH
10999: LD_INT 0
11001: ST_TO_ADDR
// result := vysledek ;
11002: LD_ADDR_VAR 0 4
11006: PUSH
11007: LD_VAR 0 5
11011: ST_TO_ADDR
// end ;
11012: LD_VAR 0 4
11016: RET
// every 0 0$2 trigger view_data marked 1 do
11017: LD_LOC 12
11021: IFFALSE 11072
11023: GO 11025
11025: DISABLE
// begin wait ( 0 0$30 ) ;
11026: LD_INT 1050
11028: PPUSH
11029: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
11033: LD_LOC 12
11037: PUSH
11038: LD_INT 1
11040: ARRAY
11041: PPUSH
11042: LD_LOC 12
11046: PUSH
11047: LD_INT 2
11049: ARRAY
11050: PPUSH
11051: LD_LOC 12
11055: PUSH
11056: LD_INT 3
11058: ARRAY
11059: PPUSH
11060: CALL_OW 331
// view_data := 0 ;
11064: LD_ADDR_LOC 12
11068: PUSH
11069: LD_INT 0
11071: ST_TO_ADDR
// end ;
11072: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
11073: LD_INT 0
11075: PPUSH
11076: PPUSH
11077: PPUSH
11078: PPUSH
11079: PPUSH
11080: PPUSH
11081: PPUSH
11082: PPUSH
// vysledek := true ;
11083: LD_ADDR_VAR 0 4
11087: PUSH
11088: LD_INT 1
11090: ST_TO_ADDR
// it_can := false ;
11091: LD_ADDR_VAR 0 8
11095: PUSH
11096: LD_INT 0
11098: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
11099: LD_ADDR_VAR 0 9
11103: PUSH
11104: LD_INT 30
11106: PUSH
11107: LD_INT 28
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
11114: LD_ADDR_VAR 0 10
11118: PUSH
11119: LD_INT 8
11121: PUSH
11122: LD_INT 48
11124: PUSH
11125: LD_INT 29
11127: PUSH
11128: LD_INT 49
11130: PUSH
11131: LD_INT 10
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
11141: LD_ADDR_VAR 0 7
11145: PUSH
11146: LD_VAR 0 2
11150: PPUSH
11151: CALL_OW 247
11155: PUSH
11156: LD_INT 3
11158: EQUAL
11159: PUSH
11160: LD_VAR 0 2
11164: PPUSH
11165: CALL_OW 266
11169: PUSH
11170: LD_VAR 0 9
11174: IN
11175: PUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: CALL_OW 269
11185: PUSH
11186: LD_VAR 0 10
11190: IN
11191: OR
11192: AND
11193: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
11194: LD_ADDR_VAR 0 6
11198: PUSH
11199: LD_VAR 0 2
11203: PPUSH
11204: CALL_OW 247
11208: PUSH
11209: LD_INT 2
11211: EQUAL
11212: PUSH
11213: LD_VAR 0 2
11217: PPUSH
11218: CALL_OW 264
11222: PUSH
11223: LD_VAR 0 10
11227: IN
11228: PUSH
11229: LD_VAR 0 2
11233: PPUSH
11234: CALL_OW 262
11238: PUSH
11239: LD_INT 3
11241: EQUAL
11242: OR
11243: AND
11244: ST_TO_ADDR
// case def_artefact_two of 1 :
11245: LD_EXP 2
11249: PUSH
11250: LD_INT 1
11252: DOUBLE
11253: EQUAL
11254: IFTRUE 11258
11256: GO 11275
11258: POP
// if b_can then
11259: LD_VAR 0 7
11263: IFFALSE 11273
// it_can := true ; 2 :
11265: LD_ADDR_VAR 0 8
11269: PUSH
11270: LD_INT 1
11272: ST_TO_ADDR
11273: GO 11332
11275: LD_INT 2
11277: DOUBLE
11278: EQUAL
11279: IFTRUE 11283
11281: GO 11300
11283: POP
// if v_can then
11284: LD_VAR 0 6
11288: IFFALSE 11298
// it_can := true ; 3 :
11290: LD_ADDR_VAR 0 8
11294: PUSH
11295: LD_INT 1
11297: ST_TO_ADDR
11298: GO 11332
11300: LD_INT 3
11302: DOUBLE
11303: EQUAL
11304: IFTRUE 11308
11306: GO 11331
11308: POP
// if b_can or v_can then
11309: LD_VAR 0 7
11313: PUSH
11314: LD_VAR 0 6
11318: OR
11319: IFFALSE 11329
// it_can := true ; end ;
11321: LD_ADDR_VAR 0 8
11325: PUSH
11326: LD_INT 1
11328: ST_TO_ADDR
11329: GO 11332
11331: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
11332: LD_ADDR_VAR 0 5
11336: PUSH
11337: LD_INT 100
11339: PUSH
11340: LD_VAR 0 1
11344: PUSH
11345: LD_INT 10
11347: MUL
11348: PLUS
11349: PUSH
11350: LD_INT 15
11352: PLUS
11353: PPUSH
11354: CALL_OW 110
11358: PPUSH
11359: CALL_OW 274
11363: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
11364: LD_VAR 0 5
11368: PUSH
11369: LD_VAR 0 8
11373: AND
11374: PUSH
11375: LD_VAR 0 5
11379: PPUSH
11380: CALL_OW 279
11384: PUSH
11385: LD_INT 3
11387: ARRAY
11388: PUSH
11389: LD_INT 106
11391: PPUSH
11392: CALL_OW 110
11396: GREATEREQUAL
11397: AND
11398: IFFALSE 11446
// begin KillUnit ( un ) ;
11400: LD_VAR 0 2
11404: PPUSH
11405: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
11409: LD_VAR 0 5
11413: PPUSH
11414: LD_INT 3
11416: PPUSH
11417: LD_VAR 0 5
11421: PPUSH
11422: CALL_OW 279
11426: PUSH
11427: LD_INT 3
11429: ARRAY
11430: PUSH
11431: LD_INT 106
11433: PPUSH
11434: CALL_OW 110
11438: MINUS
11439: PPUSH
11440: CALL_OW 277
// end else
11444: GO 11454
// vysledek := false ;
11446: LD_ADDR_VAR 0 4
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// result := vysledek ;
11454: LD_ADDR_VAR 0 3
11458: PUSH
11459: LD_VAR 0 4
11463: ST_TO_ADDR
// end ;
11464: LD_VAR 0 3
11468: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
11469: LD_INT 0
11471: PPUSH
11472: PPUSH
11473: PPUSH
11474: PPUSH
// vysledek := true ;
11475: LD_ADDR_VAR 0 5
11479: PUSH
11480: LD_INT 1
11482: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
11483: LD_ADDR_VAR 0 7
11487: PUSH
11488: LD_INT 200
11490: PUSH
11491: LD_VAR 0 1
11495: PUSH
11496: LD_INT 10
11498: MUL
11499: PLUS
11500: PUSH
11501: LD_INT 15
11503: PLUS
11504: PPUSH
11505: CALL_OW 110
11509: PPUSH
11510: CALL_OW 274
11514: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
11515: LD_VAR 0 7
11519: PUSH
11520: LD_VAR 0 7
11524: PPUSH
11525: CALL_OW 279
11529: PUSH
11530: LD_INT 3
11532: ARRAY
11533: PUSH
11534: LD_INT 206
11536: PPUSH
11537: CALL_OW 110
11541: GREATEREQUAL
11542: AND
11543: IFFALSE 11599
// begin ArtContamination ( p1 , p2 , 15 ) ;
11545: LD_VAR 0 2
11549: PPUSH
11550: LD_VAR 0 3
11554: PPUSH
11555: LD_INT 15
11557: PPUSH
11558: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
11562: LD_VAR 0 7
11566: PPUSH
11567: LD_INT 3
11569: PPUSH
11570: LD_VAR 0 7
11574: PPUSH
11575: CALL_OW 279
11579: PUSH
11580: LD_INT 3
11582: ARRAY
11583: PUSH
11584: LD_INT 206
11586: PPUSH
11587: CALL_OW 110
11591: MINUS
11592: PPUSH
11593: CALL_OW 277
// end else
11597: GO 11607
// vysledek := false ;
11599: LD_ADDR_VAR 0 5
11603: PUSH
11604: LD_INT 0
11606: ST_TO_ADDR
// result := vysledek ;
11607: LD_ADDR_VAR 0 4
11611: PUSH
11612: LD_VAR 0 5
11616: ST_TO_ADDR
// end ;
11617: LD_VAR 0 4
11621: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
11622: GO 11624
11624: DISABLE
11625: LD_INT 0
11627: PPUSH
11628: PPUSH
11629: PPUSH
// begin for art = 0 to artefact_number do
11630: LD_ADDR_VAR 0 1
11634: PUSH
11635: DOUBLE
11636: LD_INT 0
11638: DEC
11639: ST_TO_ADDR
11640: LD_EXP 43
11644: PUSH
11645: FOR_TO
11646: IFFALSE 11780
// for side = 1 to Side_Positions do
11648: LD_ADDR_VAR 0 2
11652: PUSH
11653: DOUBLE
11654: LD_INT 1
11656: DEC
11657: ST_TO_ADDR
11658: LD_EXP 23
11662: PUSH
11663: FOR_TO
11664: IFFALSE 11776
// begin recharge := art * 100 + side * 10 + 13 ;
11666: LD_ADDR_VAR 0 3
11670: PUSH
11671: LD_VAR 0 1
11675: PUSH
11676: LD_INT 100
11678: MUL
11679: PUSH
11680: LD_VAR 0 2
11684: PUSH
11685: LD_INT 10
11687: MUL
11688: PLUS
11689: PUSH
11690: LD_INT 13
11692: PLUS
11693: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
11694: LD_EXP 23
11698: PUSH
11699: LD_VAR 0 2
11703: ARRAY
11704: PUSH
11705: LD_VAR 0 3
11709: PPUSH
11710: CALL_OW 110
11714: PUSH
11715: LD_INT 0
11717: GREATER
11718: AND
11719: IFFALSE 11774
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11721: LD_VAR 0 3
11725: PPUSH
11726: LD_VAR 0 3
11730: PPUSH
11731: CALL_OW 110
11735: PUSH
11736: LD_INT 1
11738: MINUS
11739: PPUSH
11740: CALL_OW 109
// if not GetTag ( recharge ) then
11744: LD_VAR 0 3
11748: PPUSH
11749: CALL_OW 110
11753: NOT
11754: IFFALSE 11774
// Highlight_Artefact ( side , art + 1 ) ;
11756: LD_VAR 0 2
11760: PPUSH
11761: LD_VAR 0 1
11765: PUSH
11766: LD_INT 1
11768: PLUS
11769: PPUSH
11770: CALL 9573 0 2
// end ; end ;
11774: GO 11663
11776: POP
11777: POP
11778: GO 11645
11780: POP
11781: POP
// enable ;
11782: ENABLE
// end ; end_of_file
11783: PPOPN 3
11785: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11786: LD_INT 0
11788: PPUSH
11789: PPUSH
11790: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11791: LD_INT 18
11793: PPUSH
11794: LD_VAR 0 1
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: LD_VAR 0 1
11807: PUSH
11808: LD_INT 2
11810: ARRAY
11811: PPUSH
11812: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11816: LD_VAR 0 1
11820: PUSH
11821: LD_INT 1
11823: ARRAY
11824: PPUSH
11825: LD_VAR 0 1
11829: PUSH
11830: LD_INT 2
11832: ARRAY
11833: PPUSH
11834: CALL_OW 494
// Wait ( 30 ) ;
11838: LD_INT 30
11840: PPUSH
11841: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
11845: LD_INT 18
11847: PPUSH
11848: LD_INT 4
11850: PPUSH
11851: CALL_OW 286
// base := ( art - 1 ) * 100 ;
11855: LD_ADDR_VAR 0 4
11859: PUSH
11860: LD_VAR 0 2
11864: PUSH
11865: LD_INT 1
11867: MINUS
11868: PUSH
11869: LD_INT 100
11871: MUL
11872: ST_TO_ADDR
// if GetTag ( base + 11 ) then
11873: LD_VAR 0 4
11877: PUSH
11878: LD_INT 11
11880: PLUS
11881: PPUSH
11882: CALL_OW 110
11886: IFFALSE 12024
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
11888: LD_ADDR_VAR 0 5
11892: PUSH
11893: LD_VAR 0 4
11897: PUSH
11898: LD_INT 11
11900: PLUS
11901: PPUSH
11902: CALL_OW 110
11906: PPUSH
11907: CALL_OW 255
11911: ST_TO_ADDR
// if GetTag ( base + 12 ) then
11912: LD_VAR 0 4
11916: PUSH
11917: LD_INT 12
11919: PLUS
11920: PPUSH
11921: CALL_OW 110
11925: IFFALSE 11968
// begin ComCancel ( GetTag ( base + 11 ) ) ;
11927: LD_VAR 0 4
11931: PUSH
11932: LD_INT 11
11934: PLUS
11935: PPUSH
11936: CALL_OW 110
11940: PPUSH
11941: CALL_OW 127
// Wait ( 10 ) ;
11945: LD_INT 10
11947: PPUSH
11948: CALL_OW 67
// SetTag ( base + 12 , false ) ;
11952: LD_VAR 0 4
11956: PUSH
11957: LD_INT 12
11959: PLUS
11960: PPUSH
11961: LD_INT 0
11963: PPUSH
11964: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
11968: LD_VAR 0 4
11972: PUSH
11973: LD_VAR 0 5
11977: PUSH
11978: LD_INT 10
11980: MUL
11981: PLUS
11982: PUSH
11983: LD_INT 11
11985: PLUS
11986: PPUSH
11987: CALL_OW 110
11991: NOT
11992: IFFALSE 12008
// DeInit_Lab ( side , art ) ;
11994: LD_VAR 0 5
11998: PPUSH
11999: LD_VAR 0 2
12003: PPUSH
12004: CALL 10263 0 2
// SetTag ( base + 11 , 0 ) ;
12008: LD_VAR 0 4
12012: PUSH
12013: LD_INT 11
12015: PLUS
12016: PPUSH
12017: LD_INT 0
12019: PPUSH
12020: CALL_OW 109
// end ; end ;
12024: LD_VAR 0 3
12028: RET
// every 0 0$5 marked 5 do var hex , un ;
12029: GO 12031
12031: DISABLE
12032: LD_INT 0
12034: PPUSH
12035: PPUSH
// begin wait ( 3 3$0 ) ;
12036: LD_INT 6300
12038: PPUSH
12039: CALL_OW 67
// if GetTag ( 09 ) then
12043: LD_INT 9
12045: PPUSH
12046: CALL_OW 110
12050: IFFALSE 12089
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
12052: LD_ADDR_VAR 0 1
12056: PUSH
12057: LD_INT 13
12059: PPUSH
12060: CALL_OW 110
12064: PPUSH
12065: CALL_OW 250
12069: PUSH
12070: LD_INT 13
12072: PPUSH
12073: CALL_OW 110
12077: PPUSH
12078: CALL_OW 251
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: ST_TO_ADDR
12087: GO 12108
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
12089: LD_ADDR_VAR 0 1
12093: PUSH
12094: LD_EXP 45
12098: PUSH
12099: LD_INT 1
12101: ARRAY
12102: PPUSH
12103: CALL_OW 469
12107: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12108: LD_VAR 0 1
12112: PUSH
12113: LD_INT 1
12115: ARRAY
12116: PPUSH
12117: LD_VAR 0 1
12121: PUSH
12122: LD_INT 2
12124: ARRAY
12125: PPUSH
12126: LD_INT 16
12128: PPUSH
12129: CALL_OW 309
12133: NOT
12134: IFFALSE 12411
// begin if GetTag ( 09 ) then
12136: LD_INT 9
12138: PPUSH
12139: CALL_OW 110
12143: IFFALSE 12190
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12145: LD_INT 13
12147: PPUSH
12148: CALL_OW 110
12152: PPUSH
12153: LD_INT 4
12155: PPUSH
12156: LD_EXP 45
12160: PUSH
12161: LD_INT 1
12163: ARRAY
12164: NEG
12165: PPUSH
12166: CALL_OW 290
// SetTag ( 09 , 0 ) ;
12170: LD_INT 9
12172: PPUSH
12173: LD_INT 0
12175: PPUSH
12176: CALL_OW 109
// SetTag ( 13 , 0 ) ;
12180: LD_INT 13
12182: PPUSH
12183: LD_INT 0
12185: PPUSH
12186: CALL_OW 109
// end ; DestroyArtefact ( hex , 1 ) ;
12190: LD_VAR 0 1
12194: PPUSH
12195: LD_INT 1
12197: PPUSH
12198: CALL 11786 0 2
// wait ( 5 ) ;
12202: LD_INT 5
12204: PPUSH
12205: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12209: LD_ADDR_VAR 0 1
12213: PUSH
12214: LD_INT 16
12216: PPUSH
12217: LD_INT 0
12219: PPUSH
12220: CALL_OW 16
12224: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12225: LD_ADDR_VAR 0 2
12229: PUSH
12230: LD_VAR 0 1
12234: PUSH
12235: LD_INT 1
12237: ARRAY
12238: PPUSH
12239: LD_VAR 0 1
12243: PUSH
12244: LD_INT 2
12246: ARRAY
12247: PPUSH
12248: CALL_OW 428
12252: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12253: LD_VAR 0 2
12257: PUSH
12258: LD_INT 0
12260: GREATER
12261: PUSH
12262: LD_VAR 0 2
12266: PPUSH
12267: CALL_OW 247
12271: PUSH
12272: LD_INT 3
12274: EQUAL
12275: AND
12276: IFFALSE 12320
// begin KillUnit ( un ) ;
12278: LD_VAR 0 2
12282: PPUSH
12283: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12287: LD_VAR 0 1
12291: PUSH
12292: LD_INT 1
12294: ARRAY
12295: PPUSH
12296: LD_VAR 0 1
12300: PUSH
12301: LD_INT 2
12303: ARRAY
12304: PPUSH
12305: CALL_OW 428
12309: IFFALSE 12320
// wait ( 10 ) ;
12311: LD_INT 10
12313: PPUSH
12314: CALL_OW 67
12318: GO 12287
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12320: LD_VAR 0 1
12324: PUSH
12325: LD_INT 1
12327: ARRAY
12328: PPUSH
12329: LD_VAR 0 1
12333: PUSH
12334: LD_INT 2
12336: ARRAY
12337: PPUSH
12338: CALL_OW 428
12342: NOT
12343: IFFALSE 12209
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12345: LD_VAR 0 1
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: PPUSH
12354: LD_VAR 0 1
12358: PUSH
12359: LD_INT 2
12361: ARRAY
12362: PPUSH
12363: CALL_OW 494
// wait ( 30 ) ;
12367: LD_INT 30
12369: PPUSH
12370: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12374: LD_INT 4
12376: PPUSH
12377: LD_EXP 45
12381: PUSH
12382: LD_INT 1
12384: ARRAY
12385: PPUSH
12386: LD_VAR 0 1
12390: PUSH
12391: LD_INT 1
12393: ARRAY
12394: PPUSH
12395: LD_VAR 0 1
12399: PUSH
12400: LD_INT 2
12402: ARRAY
12403: PPUSH
12404: LD_INT 0
12406: PPUSH
12407: CALL_OW 58
// end ; enable ;
12411: ENABLE
// end ;
12412: PPOPN 2
12414: END
// every 0 0$5 marked 6 do var hex , un ;
12415: GO 12417
12417: DISABLE
12418: LD_INT 0
12420: PPUSH
12421: PPUSH
// begin wait ( 3 3$30 ) ;
12422: LD_INT 7350
12424: PPUSH
12425: CALL_OW 67
// if GetTag ( 109 ) then
12429: LD_INT 109
12431: PPUSH
12432: CALL_OW 110
12436: IFFALSE 12475
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
12438: LD_ADDR_VAR 0 1
12442: PUSH
12443: LD_INT 113
12445: PPUSH
12446: CALL_OW 110
12450: PPUSH
12451: CALL_OW 250
12455: PUSH
12456: LD_INT 113
12458: PPUSH
12459: CALL_OW 110
12463: PPUSH
12464: CALL_OW 251
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: ST_TO_ADDR
12473: GO 12494
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
12475: LD_ADDR_VAR 0 1
12479: PUSH
12480: LD_EXP 45
12484: PUSH
12485: LD_INT 2
12487: ARRAY
12488: PPUSH
12489: CALL_OW 469
12493: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12494: LD_VAR 0 1
12498: PUSH
12499: LD_INT 1
12501: ARRAY
12502: PPUSH
12503: LD_VAR 0 1
12507: PUSH
12508: LD_INT 2
12510: ARRAY
12511: PPUSH
12512: LD_INT 16
12514: PPUSH
12515: CALL_OW 309
12519: NOT
12520: IFFALSE 12797
// begin if GetTag ( 109 ) then
12522: LD_INT 109
12524: PPUSH
12525: CALL_OW 110
12529: IFFALSE 12576
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12531: LD_INT 113
12533: PPUSH
12534: CALL_OW 110
12538: PPUSH
12539: LD_INT 4
12541: PPUSH
12542: LD_EXP 45
12546: PUSH
12547: LD_INT 1
12549: ARRAY
12550: NEG
12551: PPUSH
12552: CALL_OW 290
// SetTag ( 109 , 0 ) ;
12556: LD_INT 109
12558: PPUSH
12559: LD_INT 0
12561: PPUSH
12562: CALL_OW 109
// SetTag ( 113 , 0 ) ;
12566: LD_INT 113
12568: PPUSH
12569: LD_INT 0
12571: PPUSH
12572: CALL_OW 109
// end ; DestroyArtefact ( hex , 2 ) ;
12576: LD_VAR 0 1
12580: PPUSH
12581: LD_INT 2
12583: PPUSH
12584: CALL 11786 0 2
// wait ( 5 ) ;
12588: LD_INT 5
12590: PPUSH
12591: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12595: LD_ADDR_VAR 0 1
12599: PUSH
12600: LD_INT 16
12602: PPUSH
12603: LD_INT 0
12605: PPUSH
12606: CALL_OW 16
12610: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12611: LD_ADDR_VAR 0 2
12615: PUSH
12616: LD_VAR 0 1
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_INT 2
12632: ARRAY
12633: PPUSH
12634: CALL_OW 428
12638: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12639: LD_VAR 0 2
12643: PUSH
12644: LD_INT 0
12646: GREATER
12647: PUSH
12648: LD_VAR 0 2
12652: PPUSH
12653: CALL_OW 247
12657: PUSH
12658: LD_INT 3
12660: EQUAL
12661: AND
12662: IFFALSE 12706
// begin KillUnit ( un ) ;
12664: LD_VAR 0 2
12668: PPUSH
12669: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12673: LD_VAR 0 1
12677: PUSH
12678: LD_INT 1
12680: ARRAY
12681: PPUSH
12682: LD_VAR 0 1
12686: PUSH
12687: LD_INT 2
12689: ARRAY
12690: PPUSH
12691: CALL_OW 428
12695: IFFALSE 12706
// wait ( 10 ) ;
12697: LD_INT 10
12699: PPUSH
12700: CALL_OW 67
12704: GO 12673
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12706: LD_VAR 0 1
12710: PUSH
12711: LD_INT 1
12713: ARRAY
12714: PPUSH
12715: LD_VAR 0 1
12719: PUSH
12720: LD_INT 2
12722: ARRAY
12723: PPUSH
12724: CALL_OW 428
12728: NOT
12729: IFFALSE 12595
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12731: LD_VAR 0 1
12735: PUSH
12736: LD_INT 1
12738: ARRAY
12739: PPUSH
12740: LD_VAR 0 1
12744: PUSH
12745: LD_INT 2
12747: ARRAY
12748: PPUSH
12749: CALL_OW 494
// wait ( 30 ) ;
12753: LD_INT 30
12755: PPUSH
12756: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12760: LD_INT 4
12762: PPUSH
12763: LD_EXP 45
12767: PUSH
12768: LD_INT 2
12770: ARRAY
12771: PPUSH
12772: LD_VAR 0 1
12776: PUSH
12777: LD_INT 1
12779: ARRAY
12780: PPUSH
12781: LD_VAR 0 1
12785: PUSH
12786: LD_INT 2
12788: ARRAY
12789: PPUSH
12790: LD_INT 0
12792: PPUSH
12793: CALL_OW 58
// end ; enable ;
12797: ENABLE
// end ;
12798: PPOPN 2
12800: END
// every 0 0$5 marked 7 do var hex , un ;
12801: GO 12803
12803: DISABLE
12804: LD_INT 0
12806: PPUSH
12807: PPUSH
// begin wait ( 4 4$0 ) ;
12808: LD_INT 8400
12810: PPUSH
12811: CALL_OW 67
// if GetTag ( 209 ) then
12815: LD_INT 209
12817: PPUSH
12818: CALL_OW 110
12822: IFFALSE 12861
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12824: LD_ADDR_VAR 0 1
12828: PUSH
12829: LD_INT 213
12831: PPUSH
12832: CALL_OW 110
12836: PPUSH
12837: CALL_OW 250
12841: PUSH
12842: LD_INT 213
12844: PPUSH
12845: CALL_OW 110
12849: PPUSH
12850: CALL_OW 251
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: ST_TO_ADDR
12859: GO 12880
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
12861: LD_ADDR_VAR 0 1
12865: PUSH
12866: LD_EXP 45
12870: PUSH
12871: LD_INT 3
12873: ARRAY
12874: PPUSH
12875: CALL_OW 469
12879: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12880: LD_VAR 0 1
12884: PUSH
12885: LD_INT 1
12887: ARRAY
12888: PPUSH
12889: LD_VAR 0 1
12893: PUSH
12894: LD_INT 2
12896: ARRAY
12897: PPUSH
12898: LD_INT 16
12900: PPUSH
12901: CALL_OW 309
12905: NOT
12906: IFFALSE 13183
// begin if GetTag ( 209 ) then
12908: LD_INT 209
12910: PPUSH
12911: CALL_OW 110
12915: IFFALSE 12962
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12917: LD_INT 213
12919: PPUSH
12920: CALL_OW 110
12924: PPUSH
12925: LD_INT 4
12927: PPUSH
12928: LD_EXP 45
12932: PUSH
12933: LD_INT 1
12935: ARRAY
12936: NEG
12937: PPUSH
12938: CALL_OW 290
// SetTag ( 209 , 0 ) ;
12942: LD_INT 209
12944: PPUSH
12945: LD_INT 0
12947: PPUSH
12948: CALL_OW 109
// SetTag ( 213 , 0 ) ;
12952: LD_INT 213
12954: PPUSH
12955: LD_INT 0
12957: PPUSH
12958: CALL_OW 109
// end ; DestroyArtefact ( hex , 3 ) ;
12962: LD_VAR 0 1
12966: PPUSH
12967: LD_INT 3
12969: PPUSH
12970: CALL 11786 0 2
// wait ( 5 ) ;
12974: LD_INT 5
12976: PPUSH
12977: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12981: LD_ADDR_VAR 0 1
12985: PUSH
12986: LD_INT 16
12988: PPUSH
12989: LD_INT 0
12991: PPUSH
12992: CALL_OW 16
12996: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12997: LD_ADDR_VAR 0 2
13001: PUSH
13002: LD_VAR 0 1
13006: PUSH
13007: LD_INT 1
13009: ARRAY
13010: PPUSH
13011: LD_VAR 0 1
13015: PUSH
13016: LD_INT 2
13018: ARRAY
13019: PPUSH
13020: CALL_OW 428
13024: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
13025: LD_VAR 0 2
13029: PUSH
13030: LD_INT 0
13032: GREATER
13033: PUSH
13034: LD_VAR 0 2
13038: PPUSH
13039: CALL_OW 247
13043: PUSH
13044: LD_INT 3
13046: EQUAL
13047: AND
13048: IFFALSE 13092
// begin KillUnit ( un ) ;
13050: LD_VAR 0 2
13054: PPUSH
13055: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
13059: LD_VAR 0 1
13063: PUSH
13064: LD_INT 1
13066: ARRAY
13067: PPUSH
13068: LD_VAR 0 1
13072: PUSH
13073: LD_INT 2
13075: ARRAY
13076: PPUSH
13077: CALL_OW 428
13081: IFFALSE 13092
// wait ( 10 ) ;
13083: LD_INT 10
13085: PPUSH
13086: CALL_OW 67
13090: GO 13059
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13092: LD_VAR 0 1
13096: PUSH
13097: LD_INT 1
13099: ARRAY
13100: PPUSH
13101: LD_VAR 0 1
13105: PUSH
13106: LD_INT 2
13108: ARRAY
13109: PPUSH
13110: CALL_OW 428
13114: NOT
13115: IFFALSE 12981
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13117: LD_VAR 0 1
13121: PUSH
13122: LD_INT 1
13124: ARRAY
13125: PPUSH
13126: LD_VAR 0 1
13130: PUSH
13131: LD_INT 2
13133: ARRAY
13134: PPUSH
13135: CALL_OW 494
// wait ( 30 ) ;
13139: LD_INT 30
13141: PPUSH
13142: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13146: LD_INT 4
13148: PPUSH
13149: LD_EXP 45
13153: PUSH
13154: LD_INT 3
13156: ARRAY
13157: PPUSH
13158: LD_VAR 0 1
13162: PUSH
13163: LD_INT 1
13165: ARRAY
13166: PPUSH
13167: LD_VAR 0 1
13171: PUSH
13172: LD_INT 2
13174: ARRAY
13175: PPUSH
13176: LD_INT 0
13178: PPUSH
13179: CALL_OW 58
// end ; enable ;
13183: ENABLE
// end ; end_of_file
13184: PPOPN 2
13186: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13187: LD_INT 0
13189: PPUSH
13190: PPUSH
// for un in battle_flags_id do
13191: LD_ADDR_VAR 0 2
13195: PUSH
13196: LD_EXP 34
13200: PUSH
13201: FOR_IN
13202: IFFALSE 13277
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13204: LD_VAR 0 2
13208: PPUSH
13209: LD_INT 1
13211: PUSH
13212: LD_LOC 14
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 2
13223: PUSH
13224: LD_LOC 14
13228: PUSH
13229: LD_INT 2
13231: DIV
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 3
13239: PUSH
13240: LD_LOC 14
13244: PUSH
13245: LD_INT 5
13247: DIV
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: LD_INT 20
13255: PUSH
13256: LD_LOC 14
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 423
13275: GO 13201
13277: POP
13278: POP
// end ;
13279: LD_VAR 0 1
13283: RET
// every 0 0$0.1 do var un ;
13284: GO 13286
13286: DISABLE
13287: LD_INT 0
13289: PPUSH
// begin if not def_morale_flags then
13290: LD_EXP 58
13294: NOT
13295: IFFALSE 13299
// exit ;
13297: GO 13376
// if not morale_decreasing_time then
13299: LD_EXP 14
13303: NOT
13304: IFFALSE 13308
// exit ;
13306: GO 13376
// strength = 100 ;
13308: LD_ADDR_LOC 14
13312: PUSH
13313: LD_INT 100
13315: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13316: LD_EXP 14
13320: PPUSH
13321: CALL_OW 67
// strength := strength - 1 ;
13325: LD_ADDR_LOC 14
13329: PUSH
13330: LD_LOC 14
13334: PUSH
13335: LD_INT 1
13337: MINUS
13338: ST_TO_ADDR
// Update_Flags ;
13339: CALL 13187 0 0
// until not strength ;
13343: LD_LOC 14
13347: NOT
13348: IFFALSE 13316
// for un in battle_flags_id do
13350: LD_ADDR_VAR 0 1
13354: PUSH
13355: LD_EXP 34
13359: PUSH
13360: FOR_IN
13361: IFFALSE 13374
// KillBattleFlag ( un ) ;
13363: LD_VAR 0 1
13367: PPUSH
13368: CALL_OW 419
13372: GO 13360
13374: POP
13375: POP
// end ; end_of_file
13376: PPOPN 1
13378: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
13379: LD_INT 0
13381: PPUSH
13382: PPUSH
13383: PPUSH
// enable ( 600 ) ;
13384: LD_INT 600
13386: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
13387: LD_ADDR_VAR 0 2
13391: PUSH
13392: DOUBLE
13393: LD_INT 1
13395: DEC
13396: ST_TO_ADDR
13397: LD_EXP 47
13401: PUSH
13402: FOR_TO
13403: IFFALSE 13558
// if Position_Sides [ i ] then
13405: LD_EXP 29
13409: PUSH
13410: LD_VAR 0 2
13414: ARRAY
13415: IFFALSE 13556
// for j := 1 to 8 do
13417: LD_ADDR_VAR 0 3
13421: PUSH
13422: DOUBLE
13423: LD_INT 1
13425: DEC
13426: ST_TO_ADDR
13427: LD_INT 8
13429: PUSH
13430: FOR_TO
13431: IFFALSE 13554
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13433: LD_EXP 23
13437: PUSH
13438: LD_VAR 0 3
13442: ARRAY
13443: PUSH
13444: LD_EXP 21
13448: PUSH
13449: LD_EXP 29
13453: PUSH
13454: LD_VAR 0 2
13458: ARRAY
13459: ARRAY
13460: PUSH
13461: LD_EXP 21
13465: PUSH
13466: LD_VAR 0 3
13470: ARRAY
13471: NONEQUAL
13472: PUSH
13473: LD_EXP 25
13477: NOT
13478: PUSH
13479: LD_EXP 29
13483: PUSH
13484: LD_VAR 0 2
13488: ARRAY
13489: PUSH
13490: LD_VAR 0 3
13494: NONEQUAL
13495: AND
13496: OR
13497: AND
13498: IFFALSE 13522
// HideArea ( j , BuildUpAreas [ i ] ) else
13500: LD_VAR 0 3
13504: PPUSH
13505: LD_EXP 47
13509: PUSH
13510: LD_VAR 0 2
13514: ARRAY
13515: PPUSH
13516: CALL_OW 333
13520: GO 13552
// if ( j = your_side ) then
13522: LD_VAR 0 3
13526: PUSH
13527: LD_OWVAR 2
13531: EQUAL
13532: IFFALSE 13552
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13534: LD_EXP 47
13538: PUSH
13539: LD_VAR 0 2
13543: ARRAY
13544: PPUSH
13545: LD_INT 5
13547: PPUSH
13548: CALL_OW 424
13552: GO 13430
13554: POP
13555: POP
13556: GO 13402
13558: POP
13559: POP
// end ;
13560: LD_VAR 0 1
13564: RET
// export function EndBuildUp ; var i , j ; begin
13565: LD_INT 0
13567: PPUSH
13568: PPUSH
13569: PPUSH
// disable ( 600 ) ;
13570: LD_INT 600
13572: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
13573: LD_ADDR_VAR 0 2
13577: PUSH
13578: DOUBLE
13579: LD_INT 1
13581: DEC
13582: ST_TO_ADDR
13583: LD_EXP 47
13587: PUSH
13588: FOR_TO
13589: IFFALSE 13744
// if Position_Sides [ i ] then
13591: LD_EXP 29
13595: PUSH
13596: LD_VAR 0 2
13600: ARRAY
13601: IFFALSE 13742
// for j := 1 to 8 do
13603: LD_ADDR_VAR 0 3
13607: PUSH
13608: DOUBLE
13609: LD_INT 1
13611: DEC
13612: ST_TO_ADDR
13613: LD_INT 8
13615: PUSH
13616: FOR_TO
13617: IFFALSE 13740
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13619: LD_EXP 23
13623: PUSH
13624: LD_VAR 0 3
13628: ARRAY
13629: PUSH
13630: LD_EXP 21
13634: PUSH
13635: LD_EXP 29
13639: PUSH
13640: LD_VAR 0 2
13644: ARRAY
13645: ARRAY
13646: PUSH
13647: LD_EXP 21
13651: PUSH
13652: LD_VAR 0 3
13656: ARRAY
13657: NONEQUAL
13658: PUSH
13659: LD_EXP 25
13663: NOT
13664: PUSH
13665: LD_EXP 29
13669: PUSH
13670: LD_VAR 0 2
13674: ARRAY
13675: PUSH
13676: LD_VAR 0 3
13680: NONEQUAL
13681: AND
13682: OR
13683: AND
13684: IFFALSE 13708
// ShowArea ( j , BuildUpAreas [ i ] ) else
13686: LD_VAR 0 3
13690: PPUSH
13691: LD_EXP 47
13695: PUSH
13696: LD_VAR 0 2
13700: ARRAY
13701: PPUSH
13702: CALL_OW 334
13706: GO 13738
// if ( j = your_side ) then
13708: LD_VAR 0 3
13712: PUSH
13713: LD_OWVAR 2
13717: EQUAL
13718: IFFALSE 13738
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13720: LD_EXP 47
13724: PUSH
13725: LD_VAR 0 2
13729: ARRAY
13730: PPUSH
13731: LD_INT 0
13733: PPUSH
13734: CALL_OW 424
13738: GO 13616
13740: POP
13741: POP
13742: GO 13588
13744: POP
13745: POP
// end ;
13746: LD_VAR 0 1
13750: RET
// every 5 marked 600 do var i , un ;
13751: GO 13753
13753: DISABLE
13754: LD_INT 0
13756: PPUSH
13757: PPUSH
// begin for i := 1 to BuildUpAreas do
13758: LD_ADDR_VAR 0 1
13762: PUSH
13763: DOUBLE
13764: LD_INT 1
13766: DEC
13767: ST_TO_ADDR
13768: LD_EXP 47
13772: PUSH
13773: FOR_TO
13774: IFFALSE 13929
// if Position_Sides [ i ] then
13776: LD_EXP 29
13780: PUSH
13781: LD_VAR 0 1
13785: ARRAY
13786: IFFALSE 13927
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13788: LD_ADDR_VAR 0 2
13792: PUSH
13793: LD_EXP 47
13797: PUSH
13798: LD_VAR 0 1
13802: ARRAY
13803: PPUSH
13804: LD_INT 2
13806: PUSH
13807: LD_INT 21
13809: PUSH
13810: LD_INT 1
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 21
13819: PUSH
13820: LD_INT 2
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 22
13834: PUSH
13835: LD_OWVAR 2
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 70
13852: PUSH
13853: FOR_IN
13854: IFFALSE 13925
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
13856: LD_EXP 21
13860: PUSH
13861: LD_EXP 29
13865: PUSH
13866: LD_VAR 0 1
13870: ARRAY
13871: ARRAY
13872: PUSH
13873: LD_EXP 21
13877: PUSH
13878: LD_OWVAR 2
13882: ARRAY
13883: NONEQUAL
13884: PUSH
13885: LD_EXP 25
13889: NOT
13890: PUSH
13891: LD_EXP 29
13895: PUSH
13896: LD_VAR 0 1
13900: ARRAY
13901: PUSH
13902: LD_OWVAR 2
13906: NONEQUAL
13907: AND
13908: OR
13909: IFFALSE 13923
// ComMoveToArea ( un , BuildUpEscape ) ;
13911: LD_VAR 0 2
13915: PPUSH
13916: LD_INT 24
13918: PPUSH
13919: CALL_OW 113
13923: GO 13853
13925: POP
13926: POP
13927: GO 13773
13929: POP
13930: POP
// enable ;
13931: ENABLE
// end ;
13932: PPOPN 2
13934: END
// every 5 5$00 do
13935: GO 13937
13937: DISABLE
// if ( def_builduptime = 1 ) then
13938: LD_EXP 63
13942: PUSH
13943: LD_INT 1
13945: EQUAL
13946: IFFALSE 13952
// EndBuildUp ;
13948: CALL 13565 0 0
13952: END
// every 10 10$00 do
13953: GO 13955
13955: DISABLE
// if ( def_builduptime = 2 ) then
13956: LD_EXP 63
13960: PUSH
13961: LD_INT 2
13963: EQUAL
13964: IFFALSE 13970
// EndBuildUp ;
13966: CALL 13565 0 0
13970: END
// every 15 15$00 do
13971: GO 13973
13973: DISABLE
// if ( def_builduptime = 3 ) then
13974: LD_EXP 63
13978: PUSH
13979: LD_INT 3
13981: EQUAL
13982: IFFALSE 13988
// EndBuildUp ; end_of_file
13984: CALL 13565 0 0
13988: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13989: LD_INT 0
13991: PPUSH
13992: PPUSH
// if ( not IAmSpec ) then
13993: CALL_OW 531
13997: NOT
13998: IFFALSE 14014
// Result := Limits_Info ^  ;
14000: LD_ADDR_VAR 0 1
14004: PUSH
14005: LD_LOC 26
14009: PUSH
14010: LD_STRING 
14012: ADD
14013: ST_TO_ADDR
// for i := 1 to 8 do
14014: LD_ADDR_VAR 0 2
14018: PUSH
14019: DOUBLE
14020: LD_INT 1
14022: DEC
14023: ST_TO_ADDR
14024: LD_INT 8
14026: PUSH
14027: FOR_TO
14028: IFFALSE 14073
// if Cheaters [ i ] then
14030: LD_LOC 27
14034: PUSH
14035: LD_VAR 0 2
14039: ARRAY
14040: IFFALSE 14071
// Result := Result ^ [ #Cheater , i , i ] ;
14042: LD_ADDR_VAR 0 1
14046: PUSH
14047: LD_VAR 0 1
14051: PUSH
14052: LD_STRING #Cheater
14054: PUSH
14055: LD_VAR 0 2
14059: PUSH
14060: LD_VAR 0 2
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: ADD
14070: ST_TO_ADDR
14071: GO 14027
14073: POP
14074: POP
// end ;
14075: LD_VAR 0 1
14079: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14080: LD_INT 0
14082: PPUSH
14083: PPUSH
14084: PPUSH
14085: PPUSH
14086: PPUSH
// case Game_Type of 10 :
14087: LD_EXP 48
14091: PUSH
14092: LD_INT 10
14094: DOUBLE
14095: EQUAL
14096: IFTRUE 14100
14098: GO 14111
14100: POP
// def_game_rules := 1 ; 11 :
14101: LD_ADDR_EXP 49
14105: PUSH
14106: LD_INT 1
14108: ST_TO_ADDR
14109: GO 14131
14111: LD_INT 11
14113: DOUBLE
14114: EQUAL
14115: IFTRUE 14119
14117: GO 14130
14119: POP
// def_game_rules := 3 ; end ;
14120: LD_ADDR_EXP 49
14124: PUSH
14125: LD_INT 3
14127: ST_TO_ADDR
14128: GO 14131
14130: POP
// case def_game_rules of 0 :
14131: LD_EXP 49
14135: PUSH
14136: LD_INT 0
14138: DOUBLE
14139: EQUAL
14140: IFTRUE 14144
14142: GO 14149
14144: POP
// exit ; 1 :
14145: GO 16207
14147: GO 16107
14149: LD_INT 1
14151: DOUBLE
14152: EQUAL
14153: IFTRUE 14157
14155: GO 14373
14157: POP
// begin def_base_level := 2 ;
14158: LD_ADDR_EXP 50
14162: PUSH
14163: LD_INT 2
14165: ST_TO_ADDR
// def_amount_of_people := 2 ;
14166: LD_ADDR_EXP 51
14170: PUSH
14171: LD_INT 2
14173: ST_TO_ADDR
// def_skill_level := 1 ;
14174: LD_ADDR_EXP 52
14178: PUSH
14179: LD_INT 1
14181: ST_TO_ADDR
// def_starting_resources := 2 ;
14182: LD_ADDR_EXP 53
14186: PUSH
14187: LD_INT 2
14189: ST_TO_ADDR
// def_shipments_density := 1 ;
14190: LD_ADDR_EXP 54
14194: PUSH
14195: LD_INT 1
14197: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14198: LD_ADDR_EXP 55
14202: PUSH
14203: LD_INT 0
14205: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14206: LD_ADDR_EXP 56
14210: PUSH
14211: LD_INT 1
14213: ST_TO_ADDR
// def_shared_vision := 1 ;
14214: LD_ADDR_EXP 57
14218: PUSH
14219: LD_INT 1
14221: ST_TO_ADDR
// def_morale_flags := 3 ;
14222: LD_ADDR_EXP 58
14226: PUSH
14227: LD_INT 3
14229: ST_TO_ADDR
// def_siberite_detection := 1 ;
14230: LD_ADDR_EXP 59
14234: PUSH
14235: LD_INT 1
14237: ST_TO_ADDR
// def_people_respawning := 1 ;
14238: LD_ADDR_EXP 60
14242: PUSH
14243: LD_INT 1
14245: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14246: LD_ADDR_EXP 61
14250: PUSH
14251: LD_INT 1
14253: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14254: LD_ADDR_EXP 62
14258: PUSH
14259: LD_INT 0
14261: ST_TO_ADDR
// def_builduptime := 2 ;
14262: LD_ADDR_EXP 63
14266: PUSH
14267: LD_INT 2
14269: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14270: LD_ADDR_VAR 0 2
14274: PUSH
14275: EMPTY
14276: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14277: LD_ADDR_VAR 0 3
14281: PUSH
14282: EMPTY
14283: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14284: LD_ADDR_LOC 21
14288: PUSH
14289: EMPTY
14290: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14291: LD_ADDR_LOC 22
14295: PUSH
14296: EMPTY
14297: ST_TO_ADDR
// Banned_Controls := [ ] ;
14298: LD_ADDR_LOC 23
14302: PUSH
14303: EMPTY
14304: ST_TO_ADDR
// Banned_Engines := [ ] ;
14305: LD_ADDR_LOC 24
14309: PUSH
14310: EMPTY
14311: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14312: LD_ADDR_LOC 19
14316: PUSH
14317: LD_INT 37
14319: PUSH
14320: EMPTY
14321: LIST
14322: PUSH
14323: LD_INT 4
14325: PUSH
14326: LD_INT 5
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 31
14335: PUSH
14336: LD_INT 32
14338: PUSH
14339: LD_INT 33
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14352: LD_ADDR_LOC 20
14356: PUSH
14357: LD_INT 2
14359: PUSH
14360: LD_INT 2
14362: PUSH
14363: LD_INT 4
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: ST_TO_ADDR
// end ; 2 :
14371: GO 16107
14373: LD_INT 2
14375: DOUBLE
14376: EQUAL
14377: IFTRUE 14381
14379: GO 14590
14381: POP
// begin def_base_level := 1 ;
14382: LD_ADDR_EXP 50
14386: PUSH
14387: LD_INT 1
14389: ST_TO_ADDR
// def_amount_of_people := 2 ;
14390: LD_ADDR_EXP 51
14394: PUSH
14395: LD_INT 2
14397: ST_TO_ADDR
// def_skill_level := 3 ;
14398: LD_ADDR_EXP 52
14402: PUSH
14403: LD_INT 3
14405: ST_TO_ADDR
// def_starting_resources := 3 ;
14406: LD_ADDR_EXP 53
14410: PUSH
14411: LD_INT 3
14413: ST_TO_ADDR
// def_shipments_density := 2 ;
14414: LD_ADDR_EXP 54
14418: PUSH
14419: LD_INT 2
14421: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14422: LD_ADDR_EXP 55
14426: PUSH
14427: LD_INT 1
14429: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14430: LD_ADDR_EXP 56
14434: PUSH
14435: LD_INT 2
14437: ST_TO_ADDR
// def_shared_vision := 1 ;
14438: LD_ADDR_EXP 57
14442: PUSH
14443: LD_INT 1
14445: ST_TO_ADDR
// def_morale_flags := 0 ;
14446: LD_ADDR_EXP 58
14450: PUSH
14451: LD_INT 0
14453: ST_TO_ADDR
// def_siberite_detection := 1 ;
14454: LD_ADDR_EXP 59
14458: PUSH
14459: LD_INT 1
14461: ST_TO_ADDR
// def_people_respawning := 0 ;
14462: LD_ADDR_EXP 60
14466: PUSH
14467: LD_INT 0
14469: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14470: LD_ADDR_EXP 61
14474: PUSH
14475: LD_INT 0
14477: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14478: LD_ADDR_EXP 62
14482: PUSH
14483: LD_INT 0
14485: ST_TO_ADDR
// def_builduptime := 2 ;
14486: LD_ADDR_EXP 63
14490: PUSH
14491: LD_INT 2
14493: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14494: LD_ADDR_VAR 0 2
14498: PUSH
14499: LD_INT 1
14501: PUSH
14502: EMPTY
14503: LIST
14504: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14505: LD_ADDR_VAR 0 3
14509: PUSH
14510: EMPTY
14511: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14512: LD_ADDR_LOC 21
14516: PUSH
14517: EMPTY
14518: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14519: LD_ADDR_LOC 22
14523: PUSH
14524: EMPTY
14525: ST_TO_ADDR
// Banned_Controls := [ ] ;
14526: LD_ADDR_LOC 23
14530: PUSH
14531: EMPTY
14532: ST_TO_ADDR
// Banned_Engines := [ ] ;
14533: LD_ADDR_LOC 24
14537: PUSH
14538: EMPTY
14539: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14540: LD_ADDR_LOC 19
14544: PUSH
14545: LD_INT 4
14547: PUSH
14548: LD_INT 5
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 31
14557: PUSH
14558: LD_INT 32
14560: PUSH
14561: LD_INT 33
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
14573: LD_ADDR_LOC 20
14577: PUSH
14578: LD_INT 1
14580: PUSH
14581: LD_INT 2
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: ST_TO_ADDR
// end ; 3 :
14588: GO 16107
14590: LD_INT 3
14592: DOUBLE
14593: EQUAL
14594: IFTRUE 14598
14596: GO 14841
14598: POP
// begin def_base_level := 1 ;
14599: LD_ADDR_EXP 50
14603: PUSH
14604: LD_INT 1
14606: ST_TO_ADDR
// def_amount_of_people := 2 ;
14607: LD_ADDR_EXP 51
14611: PUSH
14612: LD_INT 2
14614: ST_TO_ADDR
// def_skill_level := 3 ;
14615: LD_ADDR_EXP 52
14619: PUSH
14620: LD_INT 3
14622: ST_TO_ADDR
// def_starting_resources := 3 ;
14623: LD_ADDR_EXP 53
14627: PUSH
14628: LD_INT 3
14630: ST_TO_ADDR
// def_shipments_density := 1 ;
14631: LD_ADDR_EXP 54
14635: PUSH
14636: LD_INT 1
14638: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14639: LD_ADDR_EXP 55
14643: PUSH
14644: LD_INT 0
14646: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14647: LD_ADDR_EXP 56
14651: PUSH
14652: LD_INT 1
14654: ST_TO_ADDR
// def_shared_vision := 1 ;
14655: LD_ADDR_EXP 57
14659: PUSH
14660: LD_INT 1
14662: ST_TO_ADDR
// def_morale_flags := 0 ;
14663: LD_ADDR_EXP 58
14667: PUSH
14668: LD_INT 0
14670: ST_TO_ADDR
// def_siberite_detection := 1 ;
14671: LD_ADDR_EXP 59
14675: PUSH
14676: LD_INT 1
14678: ST_TO_ADDR
// def_people_respawning := 0 ;
14679: LD_ADDR_EXP 60
14683: PUSH
14684: LD_INT 0
14686: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14687: LD_ADDR_EXP 61
14691: PUSH
14692: LD_INT 2
14694: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14695: LD_ADDR_EXP 62
14699: PUSH
14700: LD_INT 0
14702: ST_TO_ADDR
// def_builduptime := 1 ;
14703: LD_ADDR_EXP 63
14707: PUSH
14708: LD_INT 1
14710: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14711: LD_ADDR_VAR 0 2
14715: PUSH
14716: LD_INT 23
14718: PUSH
14719: EMPTY
14720: LIST
14721: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14722: LD_ADDR_VAR 0 3
14726: PUSH
14727: LD_INT 2
14729: PUSH
14730: LD_INT 37
14732: PUSH
14733: LD_INT 32
14735: PUSH
14736: LD_INT 33
14738: PUSH
14739: LD_INT 36
14741: PUSH
14742: LD_INT 16
14744: PUSH
14745: LD_INT 23
14747: PUSH
14748: LD_INT 21
14750: PUSH
14751: LD_INT 18
14753: PUSH
14754: LD_INT 22
14756: PUSH
14757: LD_INT 20
14759: PUSH
14760: LD_INT 19
14762: PUSH
14763: LD_INT 25
14765: PUSH
14766: LD_INT 17
14768: PUSH
14769: LD_INT 24
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14789: LD_ADDR_LOC 21
14793: PUSH
14794: EMPTY
14795: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14796: LD_ADDR_LOC 22
14800: PUSH
14801: EMPTY
14802: ST_TO_ADDR
// Banned_Controls := [ ] ;
14803: LD_ADDR_LOC 23
14807: PUSH
14808: EMPTY
14809: ST_TO_ADDR
// Banned_Engines := [ ] ;
14810: LD_ADDR_LOC 24
14814: PUSH
14815: EMPTY
14816: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14817: LD_ADDR_LOC 19
14821: PUSH
14822: EMPTY
14823: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14824: LD_ADDR_LOC 20
14828: PUSH
14829: EMPTY
14830: ST_TO_ADDR
// No_Mechs := true ;
14831: LD_ADDR_EXP 64
14835: PUSH
14836: LD_INT 1
14838: ST_TO_ADDR
// end ; 4 :
14839: GO 16107
14841: LD_INT 4
14843: DOUBLE
14844: EQUAL
14845: IFTRUE 14849
14847: GO 15024
14849: POP
// begin def_base_level := 1 ;
14850: LD_ADDR_EXP 50
14854: PUSH
14855: LD_INT 1
14857: ST_TO_ADDR
// def_amount_of_people := 2 ;
14858: LD_ADDR_EXP 51
14862: PUSH
14863: LD_INT 2
14865: ST_TO_ADDR
// def_skill_level := 3 ;
14866: LD_ADDR_EXP 52
14870: PUSH
14871: LD_INT 3
14873: ST_TO_ADDR
// def_starting_resources := 3 ;
14874: LD_ADDR_EXP 53
14878: PUSH
14879: LD_INT 3
14881: ST_TO_ADDR
// def_shipments_density := 2 ;
14882: LD_ADDR_EXP 54
14886: PUSH
14887: LD_INT 2
14889: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14890: LD_ADDR_EXP 55
14894: PUSH
14895: LD_INT 1
14897: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14898: LD_ADDR_EXP 56
14902: PUSH
14903: LD_INT 2
14905: ST_TO_ADDR
// def_shared_vision := 1 ;
14906: LD_ADDR_EXP 57
14910: PUSH
14911: LD_INT 1
14913: ST_TO_ADDR
// def_morale_flags := 0 ;
14914: LD_ADDR_EXP 58
14918: PUSH
14919: LD_INT 0
14921: ST_TO_ADDR
// def_siberite_detection := 1 ;
14922: LD_ADDR_EXP 59
14926: PUSH
14927: LD_INT 1
14929: ST_TO_ADDR
// def_people_respawning := 0 ;
14930: LD_ADDR_EXP 60
14934: PUSH
14935: LD_INT 0
14937: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14938: LD_ADDR_EXP 61
14942: PUSH
14943: LD_INT 0
14945: ST_TO_ADDR
// def_siberite_bomb := 1 ;
14946: LD_ADDR_EXP 62
14950: PUSH
14951: LD_INT 1
14953: ST_TO_ADDR
// def_builduptime := 3 ;
14954: LD_ADDR_EXP 63
14958: PUSH
14959: LD_INT 3
14961: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14962: LD_ADDR_VAR 0 2
14966: PUSH
14967: LD_INT 1
14969: PUSH
14970: EMPTY
14971: LIST
14972: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14973: LD_ADDR_VAR 0 3
14977: PUSH
14978: EMPTY
14979: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14980: LD_ADDR_LOC 21
14984: PUSH
14985: EMPTY
14986: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14987: LD_ADDR_LOC 22
14991: PUSH
14992: EMPTY
14993: ST_TO_ADDR
// Banned_Controls := [ ] ;
14994: LD_ADDR_LOC 23
14998: PUSH
14999: EMPTY
15000: ST_TO_ADDR
// Banned_Engines := [ ] ;
15001: LD_ADDR_LOC 24
15005: PUSH
15006: EMPTY
15007: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15008: LD_ADDR_LOC 19
15012: PUSH
15013: EMPTY
15014: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15015: LD_ADDR_LOC 20
15019: PUSH
15020: EMPTY
15021: ST_TO_ADDR
// end ; 5 :
15022: GO 16107
15024: LD_INT 5
15026: DOUBLE
15027: EQUAL
15028: IFTRUE 15032
15030: GO 15281
15032: POP
// begin def_base_level := 0 ;
15033: LD_ADDR_EXP 50
15037: PUSH
15038: LD_INT 0
15040: ST_TO_ADDR
// def_amount_of_people := 0 ;
15041: LD_ADDR_EXP 51
15045: PUSH
15046: LD_INT 0
15048: ST_TO_ADDR
// def_skill_level := 0 ;
15049: LD_ADDR_EXP 52
15053: PUSH
15054: LD_INT 0
15056: ST_TO_ADDR
// def_starting_resources := 0 ;
15057: LD_ADDR_EXP 53
15061: PUSH
15062: LD_INT 0
15064: ST_TO_ADDR
// def_shipments_density := 0 ;
15065: LD_ADDR_EXP 54
15069: PUSH
15070: LD_INT 0
15072: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15073: LD_ADDR_EXP 55
15077: PUSH
15078: LD_INT 0
15080: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15081: LD_ADDR_EXP 56
15085: PUSH
15086: LD_INT 0
15088: ST_TO_ADDR
// def_shared_vision := 1 ;
15089: LD_ADDR_EXP 57
15093: PUSH
15094: LD_INT 1
15096: ST_TO_ADDR
// def_morale_flags := 0 ;
15097: LD_ADDR_EXP 58
15101: PUSH
15102: LD_INT 0
15104: ST_TO_ADDR
// def_siberite_detection := 0 ;
15105: LD_ADDR_EXP 59
15109: PUSH
15110: LD_INT 0
15112: ST_TO_ADDR
// def_people_respawning := 1 ;
15113: LD_ADDR_EXP 60
15117: PUSH
15118: LD_INT 1
15120: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15121: LD_ADDR_EXP 61
15125: PUSH
15126: LD_INT 1
15128: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15129: LD_ADDR_EXP 62
15133: PUSH
15134: LD_INT 0
15136: ST_TO_ADDR
// def_builduptime := 0 ;
15137: LD_ADDR_EXP 63
15141: PUSH
15142: LD_INT 0
15144: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
15145: LD_ADDR_VAR 0 2
15149: PUSH
15150: LD_INT 10
15152: PUSH
15153: LD_INT 3
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
15160: LD_ADDR_VAR 0 3
15164: PUSH
15165: LD_INT 12
15167: PUSH
15168: LD_INT 11
15170: PUSH
15171: LD_INT 14
15173: PUSH
15174: LD_INT 13
15176: PUSH
15177: LD_INT 5
15179: PUSH
15180: LD_INT 24
15182: PUSH
15183: LD_INT 21
15185: PUSH
15186: LD_INT 33
15188: PUSH
15189: LD_INT 36
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
15203: LD_ADDR_LOC 21
15207: PUSH
15208: LD_INT 31
15210: PUSH
15211: EMPTY
15212: LIST
15213: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15214: LD_ADDR_LOC 22
15218: PUSH
15219: EMPTY
15220: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
15221: LD_ADDR_LOC 23
15225: PUSH
15226: LD_INT 2
15228: PUSH
15229: EMPTY
15230: LIST
15231: ST_TO_ADDR
// Banned_Engines := [ ] ;
15232: LD_ADDR_LOC 24
15236: PUSH
15237: EMPTY
15238: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
15239: LD_ADDR_LOC 19
15243: PUSH
15244: LD_INT 4
15246: PUSH
15247: EMPTY
15248: LIST
15249: PUSH
15250: LD_INT 31
15252: PUSH
15253: LD_INT 32
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
15264: LD_ADDR_LOC 20
15268: PUSH
15269: LD_INT 1
15271: PUSH
15272: LD_INT 1
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: ST_TO_ADDR
// end ; 6 :
15279: GO 16107
15281: LD_INT 6
15283: DOUBLE
15284: EQUAL
15285: IFTRUE 15289
15287: GO 15492
15289: POP
// begin def_base_level := 1 ;
15290: LD_ADDR_EXP 50
15294: PUSH
15295: LD_INT 1
15297: ST_TO_ADDR
// def_amount_of_people := 2 ;
15298: LD_ADDR_EXP 51
15302: PUSH
15303: LD_INT 2
15305: ST_TO_ADDR
// def_skill_level := 3 ;
15306: LD_ADDR_EXP 52
15310: PUSH
15311: LD_INT 3
15313: ST_TO_ADDR
// def_starting_resources := 3 ;
15314: LD_ADDR_EXP 53
15318: PUSH
15319: LD_INT 3
15321: ST_TO_ADDR
// def_shipments_density := 1 ;
15322: LD_ADDR_EXP 54
15326: PUSH
15327: LD_INT 1
15329: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15330: LD_ADDR_EXP 55
15334: PUSH
15335: LD_INT 0
15337: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15338: LD_ADDR_EXP 56
15342: PUSH
15343: LD_INT 1
15345: ST_TO_ADDR
// def_shared_vision := 1 ;
15346: LD_ADDR_EXP 57
15350: PUSH
15351: LD_INT 1
15353: ST_TO_ADDR
// def_morale_flags := 0 ;
15354: LD_ADDR_EXP 58
15358: PUSH
15359: LD_INT 0
15361: ST_TO_ADDR
// def_siberite_detection := 1 ;
15362: LD_ADDR_EXP 59
15366: PUSH
15367: LD_INT 1
15369: ST_TO_ADDR
// def_people_respawning := 2 ;
15370: LD_ADDR_EXP 60
15374: PUSH
15375: LD_INT 2
15377: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15378: LD_ADDR_EXP 61
15382: PUSH
15383: LD_INT 1
15385: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15386: LD_ADDR_EXP 62
15390: PUSH
15391: LD_INT 0
15393: ST_TO_ADDR
// def_builduptime := 1 ;
15394: LD_ADDR_EXP 63
15398: PUSH
15399: LD_INT 1
15401: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15402: LD_ADDR_VAR 0 2
15406: PUSH
15407: LD_INT 23
15409: PUSH
15410: EMPTY
15411: LIST
15412: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
15413: LD_ADDR_VAR 0 3
15417: PUSH
15418: LD_INT 2
15420: PUSH
15421: LD_INT 37
15423: PUSH
15424: LD_INT 31
15426: PUSH
15427: LD_INT 32
15429: PUSH
15430: LD_INT 33
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15440: LD_ADDR_LOC 21
15444: PUSH
15445: EMPTY
15446: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15447: LD_ADDR_LOC 22
15451: PUSH
15452: EMPTY
15453: ST_TO_ADDR
// Banned_Controls := [ ] ;
15454: LD_ADDR_LOC 23
15458: PUSH
15459: EMPTY
15460: ST_TO_ADDR
// Banned_Engines := [ ] ;
15461: LD_ADDR_LOC 24
15465: PUSH
15466: EMPTY
15467: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15468: LD_ADDR_LOC 19
15472: PUSH
15473: EMPTY
15474: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15475: LD_ADDR_LOC 20
15479: PUSH
15480: EMPTY
15481: ST_TO_ADDR
// No_Mechs := true ;
15482: LD_ADDR_EXP 64
15486: PUSH
15487: LD_INT 1
15489: ST_TO_ADDR
// end ; 7 :
15490: GO 16107
15492: LD_INT 7
15494: DOUBLE
15495: EQUAL
15496: IFTRUE 15500
15498: GO 15698
15500: POP
// begin def_base_level := 1 ;
15501: LD_ADDR_EXP 50
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// def_amount_of_people := 2 ;
15509: LD_ADDR_EXP 51
15513: PUSH
15514: LD_INT 2
15516: ST_TO_ADDR
// def_skill_level := 3 ;
15517: LD_ADDR_EXP 52
15521: PUSH
15522: LD_INT 3
15524: ST_TO_ADDR
// def_starting_resources := 3 ;
15525: LD_ADDR_EXP 53
15529: PUSH
15530: LD_INT 3
15532: ST_TO_ADDR
// def_shipments_density := 1 ;
15533: LD_ADDR_EXP 54
15537: PUSH
15538: LD_INT 1
15540: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15541: LD_ADDR_EXP 55
15545: PUSH
15546: LD_INT 1
15548: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15549: LD_ADDR_EXP 56
15553: PUSH
15554: LD_INT 2
15556: ST_TO_ADDR
// def_shared_vision := 1 ;
15557: LD_ADDR_EXP 57
15561: PUSH
15562: LD_INT 1
15564: ST_TO_ADDR
// def_morale_flags := 0 ;
15565: LD_ADDR_EXP 58
15569: PUSH
15570: LD_INT 0
15572: ST_TO_ADDR
// def_siberite_detection := 1 ;
15573: LD_ADDR_EXP 59
15577: PUSH
15578: LD_INT 1
15580: ST_TO_ADDR
// def_people_respawning := 0 ;
15581: LD_ADDR_EXP 60
15585: PUSH
15586: LD_INT 0
15588: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15589: LD_ADDR_EXP 61
15593: PUSH
15594: LD_INT 1
15596: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15597: LD_ADDR_EXP 62
15601: PUSH
15602: LD_INT 0
15604: ST_TO_ADDR
// def_builduptime := 3 ;
15605: LD_ADDR_EXP 63
15609: PUSH
15610: LD_INT 3
15612: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15613: LD_ADDR_VAR 0 2
15617: PUSH
15618: LD_INT 23
15620: PUSH
15621: EMPTY
15622: LIST
15623: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
15624: LD_ADDR_VAR 0 3
15628: PUSH
15629: LD_INT 37
15631: PUSH
15632: EMPTY
15633: LIST
15634: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15635: LD_ADDR_LOC 21
15639: PUSH
15640: EMPTY
15641: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15642: LD_ADDR_LOC 22
15646: PUSH
15647: EMPTY
15648: ST_TO_ADDR
// Banned_Controls := [ ] ;
15649: LD_ADDR_LOC 23
15653: PUSH
15654: EMPTY
15655: ST_TO_ADDR
// Banned_Engines := [ ] ;
15656: LD_ADDR_LOC 24
15660: PUSH
15661: EMPTY
15662: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15663: LD_ADDR_LOC 19
15667: PUSH
15668: LD_INT 31
15670: PUSH
15671: LD_INT 32
15673: PUSH
15674: LD_INT 33
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: LIST
15681: PUSH
15682: EMPTY
15683: LIST
15684: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
15685: LD_ADDR_LOC 20
15689: PUSH
15690: LD_INT 10
15692: PUSH
15693: EMPTY
15694: LIST
15695: ST_TO_ADDR
// end ; 8 :
15696: GO 16107
15698: LD_INT 8
15700: DOUBLE
15701: EQUAL
15702: IFTRUE 15706
15704: GO 16106
15706: POP
// begin def_base_level := 0 ;
15707: LD_ADDR_EXP 50
15711: PUSH
15712: LD_INT 0
15714: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
15715: LD_ADDR_EXP 51
15719: PUSH
15720: LD_INT 0
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 12
15730: ST_TO_ADDR
// def_skill_level := 0 ;
15731: LD_ADDR_EXP 52
15735: PUSH
15736: LD_INT 0
15738: ST_TO_ADDR
// def_starting_resources := 2 ;
15739: LD_ADDR_EXP 53
15743: PUSH
15744: LD_INT 2
15746: ST_TO_ADDR
// def_shipments_density := 1 ;
15747: LD_ADDR_EXP 54
15751: PUSH
15752: LD_INT 1
15754: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15755: LD_ADDR_EXP 55
15759: PUSH
15760: LD_INT 0
15762: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15763: LD_ADDR_EXP 56
15767: PUSH
15768: LD_INT 0
15770: ST_TO_ADDR
// def_shared_vision := 1 ;
15771: LD_ADDR_EXP 57
15775: PUSH
15776: LD_INT 1
15778: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
15779: LD_ADDR_EXP 58
15783: PUSH
15784: LD_INT 0
15786: PPUSH
15787: LD_INT 2
15789: PPUSH
15790: CALL_OW 12
15794: ST_TO_ADDR
// def_siberite_detection := 0 ;
15795: LD_ADDR_EXP 59
15799: PUSH
15800: LD_INT 0
15802: ST_TO_ADDR
// def_people_respawning := 0 ;
15803: LD_ADDR_EXP 60
15807: PUSH
15808: LD_INT 0
15810: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
15811: LD_ADDR_EXP 61
15815: PUSH
15816: LD_INT 2
15818: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15819: LD_ADDR_EXP 62
15823: PUSH
15824: LD_INT 0
15826: ST_TO_ADDR
// def_builduptime := 0 ;
15827: LD_ADDR_EXP 63
15831: PUSH
15832: LD_INT 0
15834: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: LD_INT 23
15842: PUSH
15843: LD_INT 20
15845: PUSH
15846: LD_INT 40
15848: PUSH
15849: LD_INT 47
15851: PUSH
15852: LD_INT 46
15854: PUSH
15855: LD_INT 39
15857: PUSH
15858: LD_INT 71
15860: PUSH
15861: LD_INT 34
15863: PUSH
15864: LD_INT 41
15866: PUSH
15867: LD_INT 44
15869: PUSH
15870: LD_INT 17
15872: PUSH
15873: LD_INT 16
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
15890: LD_ADDR_VAR 0 3
15894: PUSH
15895: LD_INT 37
15897: PUSH
15898: LD_INT 5
15900: PUSH
15901: LD_INT 13
15903: PUSH
15904: LD_INT 34
15906: PUSH
15907: LD_INT 12
15909: PUSH
15910: LD_INT 15
15912: PUSH
15913: LD_INT 11
15915: PUSH
15916: LD_INT 14
15918: PUSH
15919: LD_INT 29
15921: PUSH
15922: LD_INT 30
15924: PUSH
15925: LD_INT 28
15927: PUSH
15928: LD_INT 24
15930: PUSH
15931: LD_INT 25
15933: PUSH
15934: LD_INT 20
15936: PUSH
15937: LD_INT 21
15939: PUSH
15940: LD_INT 22
15942: PUSH
15943: LD_INT 36
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15965: LD_ADDR_LOC 21
15969: PUSH
15970: EMPTY
15971: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
15972: LD_ADDR_LOC 22
15976: PUSH
15977: LD_INT 14
15979: PUSH
15980: EMPTY
15981: LIST
15982: ST_TO_ADDR
// Banned_Controls := [ ] ;
15983: LD_ADDR_LOC 23
15987: PUSH
15988: EMPTY
15989: ST_TO_ADDR
// Banned_Engines := [ ] ;
15990: LD_ADDR_LOC 24
15994: PUSH
15995: EMPTY
15996: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
15997: LD_ADDR_LOC 19
16001: PUSH
16002: LD_INT 31
16004: PUSH
16005: LD_INT 32
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 4
16014: PUSH
16015: EMPTY
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
16022: LD_ADDR_LOC 20
16026: PUSH
16027: LD_INT 2
16029: PUSH
16030: LD_INT 1
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: ST_TO_ADDR
// for i := 1 to 8 do
16037: LD_ADDR_VAR 0 4
16041: PUSH
16042: DOUBLE
16043: LD_INT 1
16045: DEC
16046: ST_TO_ADDR
16047: LD_INT 8
16049: PUSH
16050: FOR_TO
16051: IFFALSE 16102
// if ( Side_Nations [ i ] = 3 ) then
16053: LD_EXP 24
16057: PUSH
16058: LD_VAR 0 4
16062: ARRAY
16063: PUSH
16064: LD_INT 3
16066: EQUAL
16067: IFFALSE 16100
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
16069: LD_ADDR_EXP 24
16073: PUSH
16074: LD_EXP 24
16078: PPUSH
16079: LD_VAR 0 4
16083: PPUSH
16084: LD_INT 1
16086: PPUSH
16087: LD_INT 2
16089: PPUSH
16090: CALL_OW 12
16094: PPUSH
16095: CALL_OW 1
16099: ST_TO_ADDR
16100: GO 16050
16102: POP
16103: POP
// end ; end ;
16104: GO 16107
16106: POP
// for i := 1 to 8 do
16107: LD_ADDR_VAR 0 4
16111: PUSH
16112: DOUBLE
16113: LD_INT 1
16115: DEC
16116: ST_TO_ADDR
16117: LD_INT 8
16119: PUSH
16120: FOR_TO
16121: IFFALSE 16205
// if Side_Positions [ i ] then
16123: LD_EXP 23
16127: PUSH
16128: LD_VAR 0 4
16132: ARRAY
16133: IFFALSE 16203
// begin for j in Unavailable_Techs do
16135: LD_ADDR_VAR 0 5
16139: PUSH
16140: LD_VAR 0 2
16144: PUSH
16145: FOR_IN
16146: IFFALSE 16167
// SetTech ( j , i , 0 ) ;
16148: LD_VAR 0 5
16152: PPUSH
16153: LD_VAR 0 4
16157: PPUSH
16158: LD_INT 0
16160: PPUSH
16161: CALL_OW 322
16165: GO 16145
16167: POP
16168: POP
// for j in Unavailable_Builds do
16169: LD_ADDR_VAR 0 5
16173: PUSH
16174: LD_VAR 0 3
16178: PUSH
16179: FOR_IN
16180: IFFALSE 16201
// SetRestrict ( j , i , 0 ) ;
16182: LD_VAR 0 5
16186: PPUSH
16187: LD_VAR 0 4
16191: PPUSH
16192: LD_INT 0
16194: PPUSH
16195: CALL_OW 324
16199: GO 16179
16201: POP
16202: POP
// end ;
16203: GO 16120
16205: POP
16206: POP
// end ;
16207: LD_VAR 0 1
16211: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
16212: LD_INT 0
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
16219: PPUSH
16220: PPUSH
// for i := 1 to Restricted_Builds do
16221: LD_ADDR_VAR 0 2
16225: PUSH
16226: DOUBLE
16227: LD_INT 1
16229: DEC
16230: ST_TO_ADDR
16231: LD_LOC 19
16235: PUSH
16236: FOR_TO
16237: IFFALSE 16547
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
16239: LD_LOC 19
16243: PUSH
16244: LD_VAR 0 2
16248: ARRAY
16249: PUSH
16250: LD_INT 1
16252: ARRAY
16253: PUSH
16254: LD_INT 31
16256: DOUBLE
16257: EQUAL
16258: IFTRUE 16274
16260: LD_INT 32
16262: DOUBLE
16263: EQUAL
16264: IFTRUE 16274
16266: LD_INT 33
16268: DOUBLE
16269: EQUAL
16270: IFTRUE 16274
16272: GO 16285
16274: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
16275: LD_ADDR_VAR 0 6
16279: PUSH
16280: LD_STRING #Turrets
16282: ST_TO_ADDR
16283: GO 16330
16285: LD_INT 4
16287: DOUBLE
16288: EQUAL
16289: IFTRUE 16299
16291: LD_INT 5
16293: DOUBLE
16294: EQUAL
16295: IFTRUE 16299
16297: GO 16310
16299: POP
// btype := #Armouries ; b_Behemoth :
16300: LD_ADDR_VAR 0 6
16304: PUSH
16305: LD_STRING #Armouries
16307: ST_TO_ADDR
16308: GO 16330
16310: LD_INT 37
16312: DOUBLE
16313: EQUAL
16314: IFTRUE 16318
16316: GO 16329
16318: POP
// btype := #Behemoths ; end ;
16319: LD_ADDR_VAR 0 6
16323: PUSH
16324: LD_STRING #Behemoths
16326: ST_TO_ADDR
16327: GO 16330
16329: POP
// list := [ ] ;
16330: LD_ADDR_VAR 0 7
16334: PUSH
16335: EMPTY
16336: ST_TO_ADDR
// for j := 1 to 8 do
16337: LD_ADDR_VAR 0 3
16341: PUSH
16342: DOUBLE
16343: LD_INT 1
16345: DEC
16346: ST_TO_ADDR
16347: LD_INT 8
16349: PUSH
16350: FOR_TO
16351: IFFALSE 16444
// if Side_Positions [ j ] then
16353: LD_EXP 23
16357: PUSH
16358: LD_VAR 0 3
16362: ARRAY
16363: IFFALSE 16442
// begin amount := 0 ;
16365: LD_ADDR_VAR 0 5
16369: PUSH
16370: LD_INT 0
16372: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
16373: LD_ADDR_VAR 0 4
16377: PUSH
16378: LD_LOC 19
16382: PUSH
16383: LD_VAR 0 2
16387: ARRAY
16388: PUSH
16389: FOR_IN
16390: IFFALSE 16438
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
16392: LD_ADDR_VAR 0 5
16396: PUSH
16397: LD_VAR 0 5
16401: PUSH
16402: LD_INT 22
16404: PUSH
16405: LD_VAR 0 3
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 30
16416: PUSH
16417: LD_VAR 0 4
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: PPUSH
16430: CALL_OW 69
16434: PLUS
16435: ST_TO_ADDR
16436: GO 16389
16438: POP
16439: POP
// break ;
16440: GO 16444
// end ;
16442: GO 16350
16444: POP
16445: POP
// list := [ ] ;
16446: LD_ADDR_VAR 0 7
16450: PUSH
16451: EMPTY
16452: ST_TO_ADDR
// for j := 1 to 8 do
16453: LD_ADDR_VAR 0 3
16457: PUSH
16458: DOUBLE
16459: LD_INT 1
16461: DEC
16462: ST_TO_ADDR
16463: LD_INT 8
16465: PUSH
16466: FOR_TO
16467: IFFALSE 16487
// list := list ^ amount ;
16469: LD_ADDR_VAR 0 7
16473: PUSH
16474: LD_VAR 0 7
16478: PUSH
16479: LD_VAR 0 5
16483: ADD
16484: ST_TO_ADDR
16485: GO 16466
16487: POP
16488: POP
// Already_Built := Already_Built ^ [ list ] ;
16489: LD_ADDR_LOC 25
16493: PUSH
16494: LD_LOC 25
16498: PUSH
16499: LD_VAR 0 7
16503: PUSH
16504: EMPTY
16505: LIST
16506: ADD
16507: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
16508: LD_ADDR_LOC 26
16512: PUSH
16513: LD_LOC 26
16517: PUSH
16518: LD_VAR 0 6
16522: PUSH
16523: LD_VAR 0 5
16527: PUSH
16528: LD_LOC 20
16532: PUSH
16533: LD_VAR 0 2
16537: ARRAY
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: ADD
16544: ST_TO_ADDR
// end ;
16545: GO 16236
16547: POP
16548: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16549: LD_ADDR_LOC 27
16553: PUSH
16554: LD_INT 0
16556: PUSH
16557: LD_INT 0
16559: PUSH
16560: LD_INT 0
16562: PUSH
16563: LD_INT 0
16565: PUSH
16566: LD_INT 0
16568: PUSH
16569: LD_INT 0
16571: PUSH
16572: LD_INT 0
16574: PUSH
16575: LD_INT 0
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: ST_TO_ADDR
// if Limits_Info then
16588: LD_LOC 26
16592: IFFALSE 16608
// Limits_Info := #Limits ^ Limits_Info ;
16594: LD_ADDR_LOC 26
16598: PUSH
16599: LD_STRING #Limits
16601: PUSH
16602: LD_LOC 26
16606: ADD
16607: ST_TO_ADDR
// end ;
16608: LD_VAR 0 1
16612: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
16613: LD_INT 0
16615: PPUSH
16616: PPUSH
16617: PPUSH
16618: PPUSH
// for i := 1 to Restricted_Builds do
16619: LD_ADDR_VAR 0 7
16623: PUSH
16624: DOUBLE
16625: LD_INT 1
16627: DEC
16628: ST_TO_ADDR
16629: LD_LOC 19
16633: PUSH
16634: FOR_TO
16635: IFFALSE 17058
// if BType in Restricted_Builds [ i ] then
16637: LD_VAR 0 2
16641: PUSH
16642: LD_LOC 19
16646: PUSH
16647: LD_VAR 0 7
16651: ARRAY
16652: IN
16653: IFFALSE 17056
// begin if old_side then
16655: LD_VAR 0 4
16659: IFFALSE 16785
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
16661: LD_LOC 25
16665: PUSH
16666: LD_VAR 0 7
16670: ARRAY
16671: PUSH
16672: LD_VAR 0 3
16676: ARRAY
16677: PUSH
16678: LD_VAR 0 5
16682: PLUS
16683: PUSH
16684: LD_LOC 20
16688: PUSH
16689: LD_VAR 0 7
16693: ARRAY
16694: GREATER
16695: IFFALSE 16721
// begin SetSide ( un , old_side ) ;
16697: LD_VAR 0 1
16701: PPUSH
16702: LD_VAR 0 4
16706: PPUSH
16707: CALL_OW 235
// count := 0 ;
16711: LD_ADDR_VAR 0 5
16715: PUSH
16716: LD_INT 0
16718: ST_TO_ADDR
// end else
16719: GO 16785
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
16721: LD_ADDR_LOC 25
16725: PUSH
16726: LD_LOC 25
16730: PPUSH
16731: LD_VAR 0 7
16735: PPUSH
16736: LD_LOC 25
16740: PUSH
16741: LD_VAR 0 7
16745: ARRAY
16746: PPUSH
16747: LD_VAR 0 4
16751: PPUSH
16752: LD_LOC 25
16756: PUSH
16757: LD_VAR 0 7
16761: ARRAY
16762: PUSH
16763: LD_VAR 0 4
16767: ARRAY
16768: PUSH
16769: LD_VAR 0 5
16773: MINUS
16774: PPUSH
16775: CALL_OW 1
16779: PPUSH
16780: CALL_OW 1
16784: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
16785: LD_ADDR_LOC 25
16789: PUSH
16790: LD_LOC 25
16794: PPUSH
16795: LD_VAR 0 7
16799: PPUSH
16800: LD_LOC 25
16804: PUSH
16805: LD_VAR 0 7
16809: ARRAY
16810: PPUSH
16811: LD_VAR 0 3
16815: PPUSH
16816: LD_LOC 25
16820: PUSH
16821: LD_VAR 0 7
16825: ARRAY
16826: PUSH
16827: LD_VAR 0 3
16831: ARRAY
16832: PUSH
16833: LD_VAR 0 5
16837: PLUS
16838: PPUSH
16839: CALL_OW 1
16843: PPUSH
16844: CALL_OW 1
16848: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
16849: LD_VAR 0 5
16853: PUSH
16854: LD_INT 0
16856: NONEQUAL
16857: PUSH
16858: LD_VAR 0 3
16862: PUSH
16863: LD_OWVAR 2
16867: EQUAL
16868: AND
16869: IFFALSE 16912
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
16871: LD_ADDR_LOC 26
16875: PUSH
16876: LD_LOC 26
16880: PPUSH
16881: LD_INT 3
16883: PUSH
16884: LD_VAR 0 7
16888: MUL
16889: PPUSH
16890: LD_LOC 25
16894: PUSH
16895: LD_VAR 0 7
16899: ARRAY
16900: PUSH
16901: LD_VAR 0 3
16905: ARRAY
16906: PPUSH
16907: CALL_OW 1
16911: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
16912: LD_LOC 25
16916: PUSH
16917: LD_VAR 0 7
16921: ARRAY
16922: PUSH
16923: LD_VAR 0 3
16927: ARRAY
16928: PUSH
16929: LD_LOC 20
16933: PUSH
16934: LD_VAR 0 7
16938: ARRAY
16939: GREATER
16940: IFFALSE 16967
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
16942: LD_ADDR_LOC 27
16946: PUSH
16947: LD_LOC 27
16951: PPUSH
16952: LD_VAR 0 3
16956: PPUSH
16957: LD_INT 1
16959: PPUSH
16960: CALL_OW 1
16964: ST_TO_ADDR
// end else
16965: GO 17054
// begin for j := 1 to Restricted_Builds do
16967: LD_ADDR_VAR 0 8
16971: PUSH
16972: DOUBLE
16973: LD_INT 1
16975: DEC
16976: ST_TO_ADDR
16977: LD_LOC 19
16981: PUSH
16982: FOR_TO
16983: IFFALSE 17027
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
16985: LD_LOC 25
16989: PUSH
16990: LD_VAR 0 8
16994: ARRAY
16995: PUSH
16996: LD_VAR 0 3
17000: ARRAY
17001: PUSH
17002: LD_LOC 20
17006: PUSH
17007: LD_VAR 0 8
17011: ARRAY
17012: GREATER
17013: IFFALSE 17025
// begin Is_Cheater := true ;
17015: LD_ADDR_VAR 0 9
17019: PUSH
17020: LD_INT 1
17022: ST_TO_ADDR
// break ;
17023: GO 17027
// end ;
17025: GO 16982
17027: POP
17028: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
17029: LD_ADDR_LOC 27
17033: PUSH
17034: LD_LOC 27
17038: PPUSH
17039: LD_VAR 0 3
17043: PPUSH
17044: LD_VAR 0 9
17048: PPUSH
17049: CALL_OW 1
17053: ST_TO_ADDR
// end ; break ;
17054: GO 17058
// end ;
17056: GO 16634
17058: POP
17059: POP
// end ;
17060: LD_VAR 0 6
17064: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
17065: LD_VAR 0 5
17069: PUSH
17070: LD_LOC 21
17074: IN
17075: PUSH
17076: LD_VAR 0 2
17080: PUSH
17081: LD_LOC 22
17085: IN
17086: OR
17087: PUSH
17088: LD_VAR 0 4
17092: PUSH
17093: LD_LOC 23
17097: IN
17098: OR
17099: PUSH
17100: LD_VAR 0 3
17104: PUSH
17105: LD_LOC 24
17109: IN
17110: OR
17111: IFFALSE 17122
// ComCancel ( factory ) ;
17113: LD_VAR 0 1
17117: PPUSH
17118: CALL_OW 127
// end ;
17122: PPOPN 5
17124: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
17125: LD_VAR 0 2
17129: PUSH
17130: LD_LOC 21
17134: IN
17135: IFFALSE 17146
// ComCancel ( building ) ;
17137: LD_VAR 0 1
17141: PPUSH
17142: CALL_OW 127
// end ; end_of_file
17146: PPOPN 2
17148: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
17149: LD_INT 0
17151: PPUSH
17152: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
17153: LD_ADDR_VAR 0 2
17157: PUSH
17158: LD_STRING #Multi1x1-Time
17160: PUSH
17161: LD_OWVAR 1
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: ST_TO_ADDR
// if WaitServerStrings then
17170: LD_EXP 66
17174: IFFALSE 17192
// AllStrings = AllStrings ^ WaitServerStrings ;
17176: LD_ADDR_VAR 0 2
17180: PUSH
17181: LD_VAR 0 2
17185: PUSH
17186: LD_EXP 66
17190: ADD
17191: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
17192: LD_INT 0
17194: PUSH
17195: LD_EXP 18
17199: PUSH
17200: LD_OWVAR 1
17204: MINUS
17205: LESSEQUAL
17206: IFFALSE 17237
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
17208: LD_ADDR_VAR 0 2
17212: PUSH
17213: LD_VAR 0 2
17217: PUSH
17218: LD_STRING #allowedsibbomb
17220: PUSH
17221: LD_EXP 18
17225: PUSH
17226: LD_OWVAR 1
17230: MINUS
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: ADD
17236: ST_TO_ADDR
// if ( ExtraStrings ) then
17237: LD_EXP 65
17241: IFFALSE 17263
// AllStrings := AllStrings ^  ^ ExtraStrings ;
17243: LD_ADDR_VAR 0 2
17247: PUSH
17248: LD_VAR 0 2
17252: PUSH
17253: LD_STRING 
17255: ADD
17256: PUSH
17257: LD_EXP 65
17261: ADD
17262: ST_TO_ADDR
// if Display_kings and not isSGUI then
17263: LD_EXP 67
17267: PUSH
17268: LD_OWVAR 83
17272: NOT
17273: AND
17274: IFFALSE 17292
// AllStrings = AllStrings ^ Display_kings ;
17276: LD_ADDR_VAR 0 2
17280: PUSH
17281: LD_VAR 0 2
17285: PUSH
17286: LD_EXP 67
17290: ADD
17291: ST_TO_ADDR
// if ( LimitsStrings ) then
17292: CALL 13989 0 0
17296: IFFALSE 17318
// AllStrings := AllStrings ^  ^ LimitsStrings ;
17298: LD_ADDR_VAR 0 2
17302: PUSH
17303: LD_VAR 0 2
17307: PUSH
17308: LD_STRING 
17310: ADD
17311: PUSH
17312: CALL 13989 0 0
17316: ADD
17317: ST_TO_ADDR
// Display_Strings := AllStrings ;
17318: LD_ADDR_OWVAR 47
17322: PUSH
17323: LD_VAR 0 2
17327: ST_TO_ADDR
// end ;
17328: LD_VAR 0 1
17332: RET
// every 0 0$1 do
17333: GO 17335
17335: DISABLE
// begin ShowTimer ;
17336: CALL 17149 0 0
// enable ;
17340: ENABLE
// end ; end_of_file
17341: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
17342: LD_INT 0
17344: PPUSH
17345: PPUSH
17346: PPUSH
// sharedPoints1 = [ ] ;
17347: LD_ADDR_LOC 28
17351: PUSH
17352: EMPTY
17353: ST_TO_ADDR
// sharedPoints2 = [ ] ;
17354: LD_ADDR_LOC 29
17358: PUSH
17359: EMPTY
17360: ST_TO_ADDR
// sharedPoints3 = [ ] ;
17361: LD_ADDR_LOC 30
17365: PUSH
17366: EMPTY
17367: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: DOUBLE
17374: LD_INT 1
17376: DEC
17377: ST_TO_ADDR
17378: LD_EXP 23
17382: PUSH
17383: LD_INT 0
17385: PLUS
17386: PUSH
17387: FOR_TO
17388: IFFALSE 17490
// begin if not Side_Positions [ i ] = 0 then
17390: LD_EXP 23
17394: PUSH
17395: LD_VAR 0 2
17399: ARRAY
17400: PUSH
17401: LD_INT 0
17403: EQUAL
17404: NOT
17405: IFFALSE 17419
// SetMultiScore ( i , 0 ) ;
17407: LD_VAR 0 2
17411: PPUSH
17412: LD_INT 0
17414: PPUSH
17415: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
17419: LD_ADDR_LOC 28
17423: PUSH
17424: LD_LOC 28
17428: PPUSH
17429: LD_VAR 0 2
17433: PPUSH
17434: LD_INT 0
17436: PPUSH
17437: CALL_OW 1
17441: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
17442: LD_ADDR_LOC 29
17446: PUSH
17447: LD_LOC 29
17451: PPUSH
17452: LD_VAR 0 2
17456: PPUSH
17457: LD_INT 0
17459: PPUSH
17460: CALL_OW 1
17464: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
17465: LD_ADDR_LOC 30
17469: PUSH
17470: LD_LOC 30
17474: PPUSH
17475: LD_VAR 0 2
17479: PPUSH
17480: LD_INT 0
17482: PPUSH
17483: CALL_OW 1
17487: ST_TO_ADDR
// end ;
17488: GO 17387
17490: POP
17491: POP
// pointGame = true ;
17492: LD_ADDR_LOC 31
17496: PUSH
17497: LD_INT 1
17499: ST_TO_ADDR
// end ;
17500: LD_VAR 0 1
17504: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
17505: LD_LOC 31
17509: IFFALSE 17920
17511: GO 17513
17513: DISABLE
17514: LD_INT 0
17516: PPUSH
17517: PPUSH
17518: PPUSH
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
17524: PPUSH
17525: PPUSH
17526: PPUSH
17527: PPUSH
17528: PPUSH
// begin if isSGUI then
17529: LD_OWVAR 83
17533: IFFALSE 17920
// begin if Teams [ 1 ] then
17535: LD_EXP 22
17539: PUSH
17540: LD_INT 1
17542: ARRAY
17543: IFFALSE 17555
// red = true else
17545: LD_ADDR_VAR 0 2
17549: PUSH
17550: LD_INT 1
17552: ST_TO_ADDR
17553: GO 17563
// red = false ;
17555: LD_ADDR_VAR 0 2
17559: PUSH
17560: LD_INT 0
17562: ST_TO_ADDR
// if Teams [ 2 ] then
17563: LD_EXP 22
17567: PUSH
17568: LD_INT 2
17570: ARRAY
17571: IFFALSE 17583
// blue = true else
17573: LD_ADDR_VAR 0 3
17577: PUSH
17578: LD_INT 1
17580: ST_TO_ADDR
17581: GO 17591
// blue = false ;
17583: LD_ADDR_VAR 0 3
17587: PUSH
17588: LD_INT 0
17590: ST_TO_ADDR
// if Teams [ 3 ] then
17591: LD_EXP 22
17595: PUSH
17596: LD_INT 3
17598: ARRAY
17599: IFFALSE 17611
// yel = true else
17601: LD_ADDR_VAR 0 4
17605: PUSH
17606: LD_INT 1
17608: ST_TO_ADDR
17609: GO 17619
// yel = false ;
17611: LD_ADDR_VAR 0 4
17615: PUSH
17616: LD_INT 0
17618: ST_TO_ADDR
// if Teams [ 4 ] then
17619: LD_EXP 22
17623: PUSH
17624: LD_INT 4
17626: ARRAY
17627: IFFALSE 17639
// green = true else
17629: LD_ADDR_VAR 0 5
17633: PUSH
17634: LD_INT 1
17636: ST_TO_ADDR
17637: GO 17647
// green = false ;
17639: LD_ADDR_VAR 0 5
17643: PUSH
17644: LD_INT 0
17646: ST_TO_ADDR
// if def_public_score then
17647: LD_EXP 6
17651: IFFALSE 17663
// p = true else
17653: LD_ADDR_VAR 0 12
17657: PUSH
17658: LD_INT 1
17660: ST_TO_ADDR
17661: GO 17671
// p = false ;
17663: LD_ADDR_VAR 0 12
17667: PUSH
17668: LD_INT 0
17670: ST_TO_ADDR
// if team_game then
17671: LD_EXP 25
17675: IFFALSE 17756
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
17677: LD_ADDR_VAR 0 13
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: LD_INT 2
17690: PUSH
17691: LD_INT 7
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: PUSH
17700: LD_EXP 28
17704: ARRAY
17705: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
17706: LD_ADDR_VAR 0 10
17710: PUSH
17711: LD_STRING {
17713: PUSH
17714: LD_VAR 0 3
17718: STR
17719: PUSH
17720: LD_STRING ,
17722: STR
17723: PUSH
17724: LD_VAR 0 4
17728: STR
17729: PUSH
17730: LD_STRING ,
17732: STR
17733: PUSH
17734: LD_VAR 0 2
17738: STR
17739: PUSH
17740: LD_STRING ,0,0,0,
17742: STR
17743: PUSH
17744: LD_VAR 0 5
17748: STR
17749: PUSH
17750: LD_STRING ,0}
17752: STR
17753: ST_TO_ADDR
// end else
17754: GO 17856
// begin you = your_side ;
17756: LD_ADDR_VAR 0 13
17760: PUSH
17761: LD_OWVAR 2
17765: ST_TO_ADDR
// s = { ;
17766: LD_ADDR_VAR 0 10
17770: PUSH
17771: LD_STRING {
17773: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
17774: LD_ADDR_VAR 0 1
17778: PUSH
17779: DOUBLE
17780: LD_INT 1
17782: DEC
17783: ST_TO_ADDR
17784: LD_EXP 23
17788: PUSH
17789: LD_INT 0
17791: PLUS
17792: PUSH
17793: FOR_TO
17794: IFFALSE 17840
// if side_positions [ i ] then
17796: LD_EXP 23
17800: PUSH
17801: LD_VAR 0 1
17805: ARRAY
17806: IFFALSE 17824
// s = s & 1, else
17808: LD_ADDR_VAR 0 10
17812: PUSH
17813: LD_VAR 0 10
17817: PUSH
17818: LD_STRING 1,
17820: STR
17821: ST_TO_ADDR
17822: GO 17838
// s = s & 0, ;
17824: LD_ADDR_VAR 0 10
17828: PUSH
17829: LD_VAR 0 10
17833: PUSH
17834: LD_STRING 0,
17836: STR
17837: ST_TO_ADDR
17838: GO 17793
17840: POP
17841: POP
// s = s & } ;
17842: LD_ADDR_VAR 0 10
17846: PUSH
17847: LD_VAR 0 10
17851: PUSH
17852: LD_STRING }
17854: STR
17855: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
17856: LD_STRING initScore(
17858: PUSH
17859: LD_VAR 0 10
17863: STR
17864: PUSH
17865: LD_STRING ,
17867: STR
17868: PUSH
17869: LD_VAR 0 12
17873: STR
17874: PUSH
17875: LD_STRING ,
17877: STR
17878: PUSH
17879: LD_VAR 0 13
17883: STR
17884: PUSH
17885: LD_STRING  );
17887: STR
17888: PPUSH
17889: CALL_OW 559
// if game_type = 3 then
17893: LD_EXP 48
17897: PUSH
17898: LD_INT 3
17900: EQUAL
17901: IFFALSE 17920
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
17903: LD_STRING AddScorePoints(2,2,
17905: PUSH
17906: LD_EXP 20
17910: STR
17911: PUSH
17912: LD_STRING  );
17914: STR
17915: PPUSH
17916: CALL_OW 559
// end ; end ;
17920: PPOPN 13
17922: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
17923: LD_INT 0
17925: PPUSH
17926: PPUSH
// case typ of 1 :
17927: LD_VAR 0 3
17931: PUSH
17932: LD_INT 1
17934: DOUBLE
17935: EQUAL
17936: IFTRUE 17940
17938: GO 17968
17940: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
17941: LD_ADDR_LOC 28
17945: PUSH
17946: LD_LOC 28
17950: PPUSH
17951: LD_VAR 0 1
17955: PPUSH
17956: LD_VAR 0 2
17960: PPUSH
17961: CALL_OW 1
17965: ST_TO_ADDR
17966: GO 18041
17968: LD_INT 2
17970: DOUBLE
17971: EQUAL
17972: IFTRUE 17976
17974: GO 18004
17976: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
17977: LD_ADDR_LOC 29
17981: PUSH
17982: LD_LOC 29
17986: PPUSH
17987: LD_VAR 0 1
17991: PPUSH
17992: LD_VAR 0 2
17996: PPUSH
17997: CALL_OW 1
18001: ST_TO_ADDR
18002: GO 18041
18004: LD_INT 3
18006: DOUBLE
18007: EQUAL
18008: IFTRUE 18012
18010: GO 18040
18012: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
18013: LD_ADDR_LOC 30
18017: PUSH
18018: LD_LOC 30
18022: PPUSH
18023: LD_VAR 0 1
18027: PPUSH
18028: LD_VAR 0 2
18032: PPUSH
18033: CALL_OW 1
18037: ST_TO_ADDR
18038: GO 18041
18040: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
18041: LD_ADDR_VAR 0 5
18045: PUSH
18046: LD_LOC 28
18050: PUSH
18051: LD_VAR 0 1
18055: ARRAY
18056: PUSH
18057: LD_LOC 29
18061: PUSH
18062: LD_VAR 0 1
18066: ARRAY
18067: PLUS
18068: PUSH
18069: LD_LOC 30
18073: PUSH
18074: LD_VAR 0 1
18078: ARRAY
18079: PLUS
18080: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
18081: LD_VAR 0 1
18085: PPUSH
18086: LD_VAR 0 5
18090: PPUSH
18091: CALL_OW 506
// end ; end_of_file
18095: LD_VAR 0 4
18099: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
18100: LD_INT 0
18102: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
18103: LD_VAR 0 1
18107: PPUSH
18108: CALL_OW 255
18112: PUSH
18113: LD_VAR 0 4
18117: EQUAL
18118: IFFALSE 18137
// begin SetAchievement ( ACH_RAD ) ;
18120: LD_STRING ACH_RAD
18122: PPUSH
18123: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
18127: LD_STRING ACH_NL
18129: PPUSH
18130: LD_INT 1
18132: PPUSH
18133: CALL_OW 564
// end end ;
18137: LD_VAR 0 5
18141: RET
// export function SA_Win ( side ) ; begin
18142: LD_INT 0
18144: PPUSH
// case side of 1 :
18145: LD_VAR 0 1
18149: PUSH
18150: LD_INT 1
18152: DOUBLE
18153: EQUAL
18154: IFTRUE 18158
18156: GO 18171
18158: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18159: LD_STRING ACH_AH
18161: PPUSH
18162: LD_INT 1
18164: PPUSH
18165: CALL_OW 564
18169: GO 18334
18171: LD_INT 2
18173: DOUBLE
18174: EQUAL
18175: IFTRUE 18179
18177: GO 18192
18179: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18180: LD_STRING ACH_E
18182: PPUSH
18183: LD_INT 1
18185: PPUSH
18186: CALL_OW 564
18190: GO 18334
18192: LD_INT 3
18194: DOUBLE
18195: EQUAL
18196: IFTRUE 18200
18198: GO 18213
18200: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18201: LD_STRING ACH_OOL
18203: PPUSH
18204: LD_INT 1
18206: PPUSH
18207: CALL_OW 564
18211: GO 18334
18213: LD_INT 1
18215: PUSH
18216: LD_INT 2
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: DOUBLE
18223: EQUAL
18224: IFTRUE 18228
18226: GO 18253
18228: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18229: LD_STRING ACH_AH
18231: PPUSH
18232: LD_REAL  5.00000000000000E-0001
18235: PPUSH
18236: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18240: LD_STRING ACH_E
18242: PPUSH
18243: LD_REAL  5.00000000000000E-0001
18246: PPUSH
18247: CALL_OW 564
// end ; [ 2 , 3 ] :
18251: GO 18334
18253: LD_INT 2
18255: PUSH
18256: LD_INT 3
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: DOUBLE
18263: EQUAL
18264: IFTRUE 18268
18266: GO 18293
18268: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18269: LD_STRING ACH_OOL
18271: PPUSH
18272: LD_REAL  5.00000000000000E-0001
18275: PPUSH
18276: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18280: LD_STRING ACH_E
18282: PPUSH
18283: LD_REAL  5.00000000000000E-0001
18286: PPUSH
18287: CALL_OW 564
// end ; [ 3 , 1 ] :
18291: GO 18334
18293: LD_INT 3
18295: PUSH
18296: LD_INT 1
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: DOUBLE
18303: EQUAL
18304: IFTRUE 18308
18306: GO 18333
18308: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18309: LD_STRING ACH_AH
18311: PPUSH
18312: LD_REAL  5.00000000000000E-0001
18315: PPUSH
18316: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18320: LD_STRING ACH_OOL
18322: PPUSH
18323: LD_REAL  5.00000000000000E-0001
18326: PPUSH
18327: CALL_OW 564
// end ; end ;
18331: GO 18334
18333: POP
// end ; end_of_file
18334: LD_VAR 0 2
18338: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
18339: LD_INT 0
18341: PPUSH
18342: PPUSH
// enable ( 98 ) ;
18343: LD_INT 98
18345: ENABLE_MARKED
// GameEnded = false ;
18346: LD_ADDR_LOC 33
18350: PUSH
18351: LD_INT 0
18353: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18354: LD_ADDR_LOC 32
18358: PUSH
18359: LD_INT 0
18361: PUSH
18362: LD_INT 0
18364: PUSH
18365: LD_INT 0
18367: PUSH
18368: LD_INT 0
18370: PUSH
18371: LD_INT 0
18373: PUSH
18374: LD_INT 0
18376: PUSH
18377: LD_INT 0
18379: PUSH
18380: LD_INT 0
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: ST_TO_ADDR
// unfoged = false ;
18393: LD_ADDR_LOC 34
18397: PUSH
18398: LD_INT 0
18400: ST_TO_ADDR
// for i = 1 to side_positions do
18401: LD_ADDR_VAR 0 2
18405: PUSH
18406: DOUBLE
18407: LD_INT 1
18409: DEC
18410: ST_TO_ADDR
18411: LD_EXP 23
18415: PUSH
18416: FOR_TO
18417: IFFALSE 18457
// if not side_positions [ i ] then
18419: LD_EXP 23
18423: PUSH
18424: LD_VAR 0 2
18428: ARRAY
18429: NOT
18430: IFFALSE 18455
// defaited = replace ( defaited , i , true ) ;
18432: LD_ADDR_LOC 32
18436: PUSH
18437: LD_LOC 32
18441: PPUSH
18442: LD_VAR 0 2
18446: PPUSH
18447: LD_INT 1
18449: PPUSH
18450: CALL_OW 1
18454: ST_TO_ADDR
18455: GO 18416
18457: POP
18458: POP
// end ;
18459: LD_VAR 0 1
18463: RET
// function CanWinLoose ; begin
18464: LD_INT 0
18466: PPUSH
// Result := true ;
18467: LD_ADDR_VAR 0 1
18471: PUSH
18472: LD_INT 1
18474: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
18475: CALL_OW 518
18479: PUSH
18480: CALL_OW 519
18484: PUSH
18485: LD_INT 0
18487: GREATER
18488: AND
18489: IFFALSE 18499
// Result := false ;
18491: LD_ADDR_VAR 0 1
18495: PUSH
18496: LD_INT 0
18498: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18499: CALL_OW 531
18503: PUSH
18504: CALL_OW 519
18508: PUSH
18509: LD_INT 1
18511: GREATER
18512: AND
18513: IFFALSE 18523
// Result := false ;
18515: LD_ADDR_VAR 0 1
18519: PUSH
18520: LD_INT 0
18522: ST_TO_ADDR
// end ;
18523: LD_VAR 0 1
18527: RET
// export function HasPower ( i ) ; var k , h ; begin
18528: LD_INT 0
18530: PPUSH
18531: PPUSH
18532: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18533: LD_VAR 0 1
18537: PPUSH
18538: CALL_OW 108
18542: NOT
18543: PUSH
18544: LD_EXP 26
18548: PUSH
18549: LD_VAR 0 1
18553: ARRAY
18554: NOT
18555: AND
18556: PUSH
18557: LD_OWVAR 4
18561: AND
18562: IFFALSE 18574
// begin result = false ;
18564: LD_ADDR_VAR 0 2
18568: PUSH
18569: LD_INT 0
18571: ST_TO_ADDR
// end else
18572: GO 18869
// case def_win_rules of 0 :
18574: LD_EXP 19
18578: PUSH
18579: LD_INT 0
18581: DOUBLE
18582: EQUAL
18583: IFTRUE 18587
18585: GO 18750
18587: POP
// if def_people_respawning then
18588: LD_EXP 60
18592: IFFALSE 18683
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
18594: LD_ADDR_VAR 0 2
18598: PUSH
18599: LD_INT 22
18601: PUSH
18602: LD_VAR 0 1
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 2
18613: PUSH
18614: LD_INT 21
18616: PUSH
18617: LD_INT 1
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 33
18626: PUSH
18627: LD_INT 3
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 33
18636: PUSH
18637: LD_INT 5
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 30
18646: PUSH
18647: LD_INT 0
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: LD_INT 30
18656: PUSH
18657: LD_INT 1
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PPUSH
18676: CALL_OW 69
18680: ST_TO_ADDR
18681: GO 18748
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18683: LD_ADDR_VAR 0 2
18687: PUSH
18688: LD_INT 22
18690: PUSH
18691: LD_VAR 0 1
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 2
18702: PUSH
18703: LD_INT 21
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 33
18715: PUSH
18716: LD_INT 3
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 33
18725: PUSH
18726: LD_INT 5
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PPUSH
18743: CALL_OW 69
18747: ST_TO_ADDR
18748: GO 18869
18750: LD_INT 1
18752: DOUBLE
18753: EQUAL
18754: IFTRUE 18758
18756: GO 18797
18758: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
18759: LD_ADDR_VAR 0 2
18763: PUSH
18764: LD_INT 22
18766: PUSH
18767: LD_VAR 0 1
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 21
18778: PUSH
18779: LD_INT 1
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PPUSH
18790: CALL_OW 69
18794: ST_TO_ADDR
18795: GO 18869
18797: LD_INT 2
18799: DOUBLE
18800: EQUAL
18801: IFTRUE 18805
18803: GO 18868
18805: POP
// begin h = false ;
18806: LD_ADDR_VAR 0 4
18810: PUSH
18811: LD_INT 0
18813: ST_TO_ADDR
// for k in heroes [ i ] do
18814: LD_ADDR_VAR 0 3
18818: PUSH
18819: LD_EXP 35
18823: PUSH
18824: LD_VAR 0 1
18828: ARRAY
18829: PUSH
18830: FOR_IN
18831: IFFALSE 18854
// if IsLive ( k ) then
18833: LD_VAR 0 3
18837: PPUSH
18838: CALL_OW 300
18842: IFFALSE 18852
// h = true ;
18844: LD_ADDR_VAR 0 4
18848: PUSH
18849: LD_INT 1
18851: ST_TO_ADDR
18852: GO 18830
18854: POP
18855: POP
// Result := h ;
18856: LD_ADDR_VAR 0 2
18860: PUSH
18861: LD_VAR 0 4
18865: ST_TO_ADDR
// end ; end ;
18866: GO 18869
18868: POP
// end ;
18869: LD_VAR 0 2
18873: RET
// function AlliedSides ( i , j ) ; begin
18874: LD_INT 0
18876: PPUSH
// Result := false ;
18877: LD_ADDR_VAR 0 3
18881: PUSH
18882: LD_INT 0
18884: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
18885: LD_VAR 0 1
18889: PPUSH
18890: LD_VAR 0 2
18894: PPUSH
18895: CALL_OW 81
18899: PUSH
18900: LD_INT 1
18902: EQUAL
18903: PUSH
18904: LD_VAR 0 2
18908: PPUSH
18909: LD_VAR 0 1
18913: PPUSH
18914: CALL_OW 81
18918: PUSH
18919: LD_INT 1
18921: EQUAL
18922: AND
18923: PUSH
18924: LD_VAR 0 1
18928: PPUSH
18929: CALL_OW 83
18933: AND
18934: PUSH
18935: LD_VAR 0 2
18939: PPUSH
18940: CALL_OW 83
18944: AND
18945: IFFALSE 18955
// Result := true ;
18947: LD_ADDR_VAR 0 3
18951: PUSH
18952: LD_INT 1
18954: ST_TO_ADDR
// end ;
18955: LD_VAR 0 3
18959: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
18960: CALL 18464 0 0
18964: PUSH
18965: LD_LOC 33
18969: NOT
18970: AND
18971: IFFALSE 18987
18973: GO 18975
18975: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
18976: LD_ADDR_EXP 66
18980: PUSH
18981: LD_STRING #Player-Ended
18983: PUSH
18984: EMPTY
18985: LIST
18986: ST_TO_ADDR
18987: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
18988: CALL 18464 0 0
18992: PUSH
18993: LD_LOC 33
18997: AND
18998: IFFALSE 19007
19000: GO 19002
19002: DISABLE
// YouLostInMultiplayer ;
19003: CALL_OW 107
19007: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
19008: CALL 18464 0 0
19012: NOT
19013: PUSH
19014: CALL_OW 531
19018: NOT
19019: AND
19020: IFFALSE 19036
19022: GO 19024
19024: DISABLE
// WaitServerStrings = [ #server-wait ] ;
19025: LD_ADDR_EXP 66
19029: PUSH
19030: LD_STRING #server-wait
19032: PUSH
19033: EMPTY
19034: LIST
19035: ST_TO_ADDR
19036: END
// every 100 trigger IAmSpec do
19037: CALL_OW 531
19041: IFFALSE 19057
19043: GO 19045
19045: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
19046: LD_ADDR_EXP 66
19050: PUSH
19051: LD_STRING #Player-IAmSpec
19053: PUSH
19054: EMPTY
19055: LIST
19056: ST_TO_ADDR
19057: END
// every 100 trigger GameEnded and IAmSpec do
19058: LD_LOC 33
19062: PUSH
19063: CALL_OW 531
19067: AND
19068: IFFALSE 19077
19070: GO 19072
19072: DISABLE
// YouLostInMultiplayer ;
19073: CALL_OW 107
19077: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
19078: CALL 18464 0 0
19082: PUSH
19083: LD_LOC 33
19087: NOT
19088: AND
19089: IFFALSE 19105
19091: GO 19093
19093: DISABLE
// WaitServerStrings = [ $player-win ] ;
19094: LD_ADDR_EXP 66
19098: PUSH
19099: LD_STRING $player-win
19101: PUSH
19102: EMPTY
19103: LIST
19104: ST_TO_ADDR
19105: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
19106: CALL 18464 0 0
19110: PUSH
19111: LD_LOC 33
19115: AND
19116: IFFALSE 19140
19118: GO 19120
19120: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
19121: LD_EXP 24
19125: PUSH
19126: LD_OWVAR 2
19130: ARRAY
19131: PPUSH
19132: CALL 18142 0 1
// YouWinInMultiplayer ;
19136: CALL_OW 106
// end ;
19140: END
// every 100 trigger isEditor marked 401 do
19141: LD_OWVAR 84
19145: IFFALSE 19161
19147: GO 19149
19149: DISABLE
// Debug_Strings = [ You won ] ;
19150: LD_ADDR_OWVAR 48
19154: PUSH
19155: LD_STRING You won
19157: PUSH
19158: EMPTY
19159: LIST
19160: ST_TO_ADDR
19161: END
// every 100 trigger isEditor marked 400 do
19162: LD_OWVAR 84
19166: IFFALSE 19182
19168: GO 19170
19170: DISABLE
// Debug_Strings = [ You loss ] ;
19171: LD_ADDR_OWVAR 48
19175: PUSH
19176: LD_STRING You loss
19178: PUSH
19179: EMPTY
19180: LIST
19181: ST_TO_ADDR
19182: END
// every 100 marked 98 do var i , un ;
19183: GO 19185
19185: DISABLE
19186: LD_INT 0
19188: PPUSH
19189: PPUSH
// begin for i = 1 to side_positions do
19190: LD_ADDR_VAR 0 1
19194: PUSH
19195: DOUBLE
19196: LD_INT 1
19198: DEC
19199: ST_TO_ADDR
19200: LD_EXP 23
19204: PUSH
19205: FOR_TO
19206: IFFALSE 19329
// if side_positions [ i ] then
19208: LD_EXP 23
19212: PUSH
19213: LD_VAR 0 1
19217: ARRAY
19218: IFFALSE 19327
// if not HasPower ( i ) and not Defaited [ i ] then
19220: LD_VAR 0 1
19224: PPUSH
19225: CALL 18528 0 1
19229: NOT
19230: PUSH
19231: LD_LOC 32
19235: PUSH
19236: LD_VAR 0 1
19240: ARRAY
19241: NOT
19242: AND
19243: IFFALSE 19327
// begin un = filterallunits ( [ f_side , i ] ) ;
19245: LD_ADDR_VAR 0 2
19249: PUSH
19250: LD_INT 22
19252: PUSH
19253: LD_VAR 0 1
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PPUSH
19262: CALL_OW 69
19266: ST_TO_ADDR
// if un then
19267: LD_VAR 0 2
19271: IFFALSE 19285
// SetSide ( un , 0 ) ;
19273: LD_VAR 0 2
19277: PPUSH
19278: LD_INT 0
19280: PPUSH
19281: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
19285: LD_ADDR_LOC 32
19289: PUSH
19290: LD_LOC 32
19294: PPUSH
19295: LD_VAR 0 1
19299: PPUSH
19300: LD_INT 1
19302: PPUSH
19303: CALL_OW 1
19307: ST_TO_ADDR
// if i = your_side then
19308: LD_VAR 0 1
19312: PUSH
19313: LD_OWVAR 2
19317: EQUAL
19318: IFFALSE 19327
// begin Multiplayer_Loose_Message ;
19320: CALL_OW 521
// enable ( 400 ) ;
19324: LD_INT 400
19326: ENABLE_MARKED
// end ; end ;
19327: GO 19205
19329: POP
19330: POP
// if not Unfoged and defaited [ your_side ] then
19331: LD_LOC 34
19335: NOT
19336: PUSH
19337: LD_LOC 32
19341: PUSH
19342: LD_OWVAR 2
19346: ARRAY
19347: AND
19348: IFFALSE 19354
// Unfog ;
19350: CALL 19540 0 0
// DidGameEnd ;
19354: CALL 19369 0 0
// if not GameEnded then
19358: LD_LOC 33
19362: NOT
19363: IFFALSE 19366
// enable ;
19365: ENABLE
// end ;
19366: PPOPN 2
19368: END
// function DidGameEnd ; var i , k , enemy ; begin
19369: LD_INT 0
19371: PPUSH
19372: PPUSH
19373: PPUSH
19374: PPUSH
// enemy = [ ] ;
19375: LD_ADDR_VAR 0 4
19379: PUSH
19380: EMPTY
19381: ST_TO_ADDR
// for i = 1 to side_positions do
19382: LD_ADDR_VAR 0 2
19386: PUSH
19387: DOUBLE
19388: LD_INT 1
19390: DEC
19391: ST_TO_ADDR
19392: LD_EXP 23
19396: PUSH
19397: FOR_TO
19398: IFFALSE 19502
// if not defaited [ i ] then
19400: LD_LOC 32
19404: PUSH
19405: LD_VAR 0 2
19409: ARRAY
19410: NOT
19411: IFFALSE 19500
// for k = 1 to side_positions do
19413: LD_ADDR_VAR 0 3
19417: PUSH
19418: DOUBLE
19419: LD_INT 1
19421: DEC
19422: ST_TO_ADDR
19423: LD_EXP 23
19427: PUSH
19428: FOR_TO
19429: IFFALSE 19498
// if not defaited [ k ] then
19431: LD_LOC 32
19435: PUSH
19436: LD_VAR 0 3
19440: ARRAY
19441: NOT
19442: IFFALSE 19496
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
19444: LD_VAR 0 2
19448: PPUSH
19449: LD_VAR 0 3
19453: PPUSH
19454: CALL_OW 81
19458: PUSH
19459: LD_INT 2
19461: PUSH
19462: LD_INT 0
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: IN
19469: IFFALSE 19496
// enemy = enemy ^ [ i , k ] ;
19471: LD_ADDR_VAR 0 4
19475: PUSH
19476: LD_VAR 0 4
19480: PUSH
19481: LD_VAR 0 2
19485: PUSH
19486: LD_VAR 0 3
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: ADD
19495: ST_TO_ADDR
19496: GO 19428
19498: POP
19499: POP
19500: GO 19397
19502: POP
19503: POP
// if not enemy then
19504: LD_VAR 0 4
19508: NOT
19509: IFFALSE 19535
// begin GameEnded = true ;
19511: LD_ADDR_LOC 33
19515: PUSH
19516: LD_INT 1
19518: ST_TO_ADDR
// if not defaited [ your_side ] then
19519: LD_LOC 32
19523: PUSH
19524: LD_OWVAR 2
19528: ARRAY
19529: NOT
19530: IFFALSE 19535
// enable ( 401 ) ;
19532: LD_INT 401
19534: ENABLE_MARKED
// end ; end ;
19535: LD_VAR 0 1
19539: RET
// function unfog ; var k , friends ; begin
19540: LD_INT 0
19542: PPUSH
19543: PPUSH
19544: PPUSH
// for k = 1 to side_positions do
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: DOUBLE
19551: LD_INT 1
19553: DEC
19554: ST_TO_ADDR
19555: LD_EXP 23
19559: PUSH
19560: FOR_TO
19561: IFFALSE 19617
// if not defaited [ k ] then
19563: LD_LOC 32
19567: PUSH
19568: LD_VAR 0 2
19572: ARRAY
19573: NOT
19574: IFFALSE 19615
// if GetAttitude ( your_side , k ) in [ att_friend ] then
19576: LD_OWVAR 2
19580: PPUSH
19581: LD_VAR 0 2
19585: PPUSH
19586: CALL_OW 81
19590: PUSH
19591: LD_INT 1
19593: PUSH
19594: EMPTY
19595: LIST
19596: IN
19597: IFFALSE 19615
// friends = friends ^ k ;
19599: LD_ADDR_VAR 0 3
19603: PUSH
19604: LD_VAR 0 3
19608: PUSH
19609: LD_VAR 0 2
19613: ADD
19614: ST_TO_ADDR
19615: GO 19560
19617: POP
19618: POP
// if not friends then
19619: LD_VAR 0 3
19623: NOT
19624: IFFALSE 19641
// begin fogoff ( true ) ;
19626: LD_INT 1
19628: PPUSH
19629: CALL_OW 344
// unfoged = true ;
19633: LD_ADDR_LOC 34
19637: PUSH
19638: LD_INT 1
19640: ST_TO_ADDR
// end ; end ;
19641: LD_VAR 0 1
19645: RET
// export function MakeGameEnd ; begin
19646: LD_INT 0
19648: PPUSH
// fogoff ( true ) ;
19649: LD_INT 1
19651: PPUSH
19652: CALL_OW 344
// unfoged = true ;
19656: LD_ADDR_LOC 34
19660: PUSH
19661: LD_INT 1
19663: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19664: LD_INT 175
19666: PPUSH
19667: CALL_OW 67
// GameEnded = true ;
19671: LD_ADDR_LOC 33
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// end ;
19679: LD_VAR 0 1
19683: RET
// export function GetGameEnded ; begin
19684: LD_INT 0
19686: PPUSH
// result = GameEnded ;
19687: LD_ADDR_VAR 0 1
19691: PUSH
19692: LD_LOC 33
19696: ST_TO_ADDR
// end ; end_of_file
19697: LD_VAR 0 1
19701: RET
// var win ; export function init_kings_counting ; var i ; begin
19702: LD_INT 0
19704: PPUSH
19705: PPUSH
// mp_with_score := true ;
19706: LD_ADDR_OWVAR 14
19710: PUSH
19711: LD_INT 1
19713: ST_TO_ADDR
// ResetMultiScore ;
19714: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19718: LD_INT 19
19720: PPUSH
19721: LD_INT 1
19723: PPUSH
19724: CALL_OW 424
// enable ( 2 ) ;
19728: LD_INT 2
19730: ENABLE_MARKED
// end ;
19731: LD_VAR 0 1
19735: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19736: LD_INT 0
19738: PPUSH
19739: PPUSH
19740: PPUSH
19741: PPUSH
19742: PPUSH
19743: PPUSH
19744: PPUSH
19745: PPUSH
19746: PPUSH
// vypis := [ ] ;
19747: LD_ADDR_VAR 0 3
19751: PUSH
19752: EMPTY
19753: ST_TO_ADDR
// red = 0 ;
19754: LD_ADDR_VAR 0 5
19758: PUSH
19759: LD_INT 0
19761: ST_TO_ADDR
// blue = 0 ;
19762: LD_ADDR_VAR 0 6
19766: PUSH
19767: LD_INT 0
19769: ST_TO_ADDR
// yel = 0 ;
19770: LD_ADDR_VAR 0 7
19774: PUSH
19775: LD_INT 0
19777: ST_TO_ADDR
// green = 0 ;
19778: LD_ADDR_VAR 0 8
19782: PUSH
19783: LD_INT 0
19785: ST_TO_ADDR
// if def_public_score or isSGUI then
19786: LD_EXP 6
19790: PUSH
19791: LD_OWVAR 83
19795: OR
19796: IFFALSE 20411
// if not Team_Game then
19798: LD_EXP 25
19802: NOT
19803: IFFALSE 19935
// begin for side = 1 to Side_Positions do
19805: LD_ADDR_VAR 0 2
19809: PUSH
19810: DOUBLE
19811: LD_INT 1
19813: DEC
19814: ST_TO_ADDR
19815: LD_EXP 23
19819: PUSH
19820: FOR_TO
19821: IFFALSE 19931
// if Side_Positions [ side ] then
19823: LD_EXP 23
19827: PUSH
19828: LD_VAR 0 2
19832: ARRAY
19833: IFFALSE 19929
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
19835: LD_ADDR_VAR 0 3
19839: PUSH
19840: LD_VAR 0 3
19844: PUSH
19845: LD_STRING #KingoftheHill-Public
19847: PUSH
19848: LD_VAR 0 2
19852: PUSH
19853: LD_VAR 0 2
19857: PUSH
19858: LD_VAR 0 2
19862: PUSH
19863: LD_INT 10
19865: PLUS
19866: PPUSH
19867: CALL_OW 110
19871: PUSH
19872: LD_INT 3
19874: DIV
19875: PUSH
19876: LD_EXP 20
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: ADD
19888: ST_TO_ADDR
// ToLua ( updateScorePoints(2, & side & , & ( GetTag ( side + 10 ) div 3 ) & ); ) ;
19889: LD_STRING updateScorePoints(2,
19891: PUSH
19892: LD_VAR 0 2
19896: STR
19897: PUSH
19898: LD_STRING ,
19900: STR
19901: PUSH
19902: LD_VAR 0 2
19906: PUSH
19907: LD_INT 10
19909: PLUS
19910: PPUSH
19911: CALL_OW 110
19915: PUSH
19916: LD_INT 3
19918: DIV
19919: STR
19920: PUSH
19921: LD_STRING );
19923: STR
19924: PPUSH
19925: CALL_OW 559
// end ;
19929: GO 19820
19931: POP
19932: POP
// end else
19933: GO 20409
// begin if Teams [ 1 ] then
19935: LD_EXP 22
19939: PUSH
19940: LD_INT 1
19942: ARRAY
19943: IFFALSE 19995
// for i in Teams [ 1 ] do
19945: LD_ADDR_VAR 0 4
19949: PUSH
19950: LD_EXP 22
19954: PUSH
19955: LD_INT 1
19957: ARRAY
19958: PUSH
19959: FOR_IN
19960: IFFALSE 19993
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19962: LD_ADDR_VAR 0 5
19966: PUSH
19967: LD_VAR 0 5
19971: PUSH
19972: LD_VAR 0 4
19976: PUSH
19977: LD_INT 10
19979: PLUS
19980: PPUSH
19981: CALL_OW 110
19985: PUSH
19986: LD_INT 3
19988: DIV
19989: PLUS
19990: ST_TO_ADDR
19991: GO 19959
19993: POP
19994: POP
// if Teams [ 2 ] then
19995: LD_EXP 22
19999: PUSH
20000: LD_INT 2
20002: ARRAY
20003: IFFALSE 20055
// for i in Teams [ 2 ] do
20005: LD_ADDR_VAR 0 4
20009: PUSH
20010: LD_EXP 22
20014: PUSH
20015: LD_INT 2
20017: ARRAY
20018: PUSH
20019: FOR_IN
20020: IFFALSE 20053
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20022: LD_ADDR_VAR 0 6
20026: PUSH
20027: LD_VAR 0 6
20031: PUSH
20032: LD_VAR 0 4
20036: PUSH
20037: LD_INT 10
20039: PLUS
20040: PPUSH
20041: CALL_OW 110
20045: PUSH
20046: LD_INT 3
20048: DIV
20049: PLUS
20050: ST_TO_ADDR
20051: GO 20019
20053: POP
20054: POP
// if Teams [ 3 ] then
20055: LD_EXP 22
20059: PUSH
20060: LD_INT 3
20062: ARRAY
20063: IFFALSE 20115
// for i in Teams [ 3 ] do
20065: LD_ADDR_VAR 0 4
20069: PUSH
20070: LD_EXP 22
20074: PUSH
20075: LD_INT 3
20077: ARRAY
20078: PUSH
20079: FOR_IN
20080: IFFALSE 20113
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20082: LD_ADDR_VAR 0 7
20086: PUSH
20087: LD_VAR 0 7
20091: PUSH
20092: LD_VAR 0 4
20096: PUSH
20097: LD_INT 10
20099: PLUS
20100: PPUSH
20101: CALL_OW 110
20105: PUSH
20106: LD_INT 3
20108: DIV
20109: PLUS
20110: ST_TO_ADDR
20111: GO 20079
20113: POP
20114: POP
// if Teams [ 4 ] then
20115: LD_EXP 22
20119: PUSH
20120: LD_INT 4
20122: ARRAY
20123: IFFALSE 20175
// for i in Teams [ 4 ] do
20125: LD_ADDR_VAR 0 4
20129: PUSH
20130: LD_EXP 22
20134: PUSH
20135: LD_INT 4
20137: ARRAY
20138: PUSH
20139: FOR_IN
20140: IFFALSE 20173
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20142: LD_ADDR_VAR 0 8
20146: PUSH
20147: LD_VAR 0 8
20151: PUSH
20152: LD_VAR 0 4
20156: PUSH
20157: LD_INT 10
20159: PLUS
20160: PPUSH
20161: CALL_OW 110
20165: PUSH
20166: LD_INT 3
20168: DIV
20169: PLUS
20170: ST_TO_ADDR
20171: GO 20139
20173: POP
20174: POP
// if Teams [ 1 ] then
20175: LD_EXP 22
20179: PUSH
20180: LD_INT 1
20182: ARRAY
20183: IFFALSE 20212
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20185: LD_ADDR_VAR 0 3
20189: PUSH
20190: LD_STRING #KingoftheHill-Public-red
20192: PUSH
20193: LD_INT 3
20195: PUSH
20196: LD_VAR 0 5
20200: PUSH
20201: LD_EXP 20
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: ST_TO_ADDR
// if Teams [ 2 ] then
20212: LD_EXP 22
20216: PUSH
20217: LD_INT 2
20219: ARRAY
20220: IFFALSE 20255
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20222: LD_ADDR_VAR 0 3
20226: PUSH
20227: LD_VAR 0 3
20231: PUSH
20232: LD_STRING #KingoftheHill-Public-blue
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: LD_VAR 0 6
20242: PUSH
20243: LD_EXP 20
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: ADD
20254: ST_TO_ADDR
// if Teams [ 3 ] then
20255: LD_EXP 22
20259: PUSH
20260: LD_INT 3
20262: ARRAY
20263: IFFALSE 20298
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20265: LD_ADDR_VAR 0 3
20269: PUSH
20270: LD_VAR 0 3
20274: PUSH
20275: LD_STRING #KingoftheHill-Public-yell
20277: PUSH
20278: LD_INT 2
20280: PUSH
20281: LD_VAR 0 7
20285: PUSH
20286: LD_EXP 20
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: ADD
20297: ST_TO_ADDR
// if Teams [ 4 ] then
20298: LD_EXP 22
20302: PUSH
20303: LD_INT 4
20305: ARRAY
20306: IFFALSE 20341
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20308: LD_ADDR_VAR 0 3
20312: PUSH
20313: LD_VAR 0 3
20317: PUSH
20318: LD_STRING #KingoftheHill-Public-green
20320: PUSH
20321: LD_INT 7
20323: PUSH
20324: LD_VAR 0 8
20328: PUSH
20329: LD_EXP 20
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: ADD
20340: ST_TO_ADDR
// ToLua ( updateScorePoints(2,3, & red & ); ) ;
20341: LD_STRING updateScorePoints(2,3,
20343: PUSH
20344: LD_VAR 0 5
20348: STR
20349: PUSH
20350: LD_STRING );
20352: STR
20353: PPUSH
20354: CALL_OW 559
// ToLua ( updateScorePoints(2,1, & blue & ); ) ;
20358: LD_STRING updateScorePoints(2,1,
20360: PUSH
20361: LD_VAR 0 6
20365: STR
20366: PUSH
20367: LD_STRING );
20369: STR
20370: PPUSH
20371: CALL_OW 559
// ToLua ( updateScorePoints(2,2, & yel & ); ) ;
20375: LD_STRING updateScorePoints(2,2,
20377: PUSH
20378: LD_VAR 0 7
20382: STR
20383: PUSH
20384: LD_STRING );
20386: STR
20387: PPUSH
20388: CALL_OW 559
// ToLua ( updateScorePoints(2,7, & green & ); ) ;
20392: LD_STRING updateScorePoints(2,7,
20394: PUSH
20395: LD_VAR 0 8
20399: STR
20400: PUSH
20401: LD_STRING );
20403: STR
20404: PPUSH
20405: CALL_OW 559
// end else
20409: GO 20846
// if not Team_Game then
20411: LD_EXP 25
20415: NOT
20416: IFFALSE 20474
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
20418: LD_ADDR_VAR 0 3
20422: PUSH
20423: LD_VAR 0 3
20427: PUSH
20428: LD_STRING #KingoftheHill-Private
20430: PUSH
20431: LD_OWVAR 2
20435: PUSH
20436: LD_OWVAR 2
20440: PUSH
20441: LD_VAR 0 2
20445: PUSH
20446: LD_INT 10
20448: PLUS
20449: PPUSH
20450: CALL_OW 110
20454: PUSH
20455: LD_INT 3
20457: DIV
20458: PUSH
20459: LD_EXP 20
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: ADD
20471: ST_TO_ADDR
20472: GO 20846
// begin for i in Teams [ 1 ] do
20474: LD_ADDR_VAR 0 4
20478: PUSH
20479: LD_EXP 22
20483: PUSH
20484: LD_INT 1
20486: ARRAY
20487: PUSH
20488: FOR_IN
20489: IFFALSE 20522
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20491: LD_ADDR_VAR 0 5
20495: PUSH
20496: LD_VAR 0 5
20500: PUSH
20501: LD_VAR 0 4
20505: PUSH
20506: LD_INT 10
20508: PLUS
20509: PPUSH
20510: CALL_OW 110
20514: PUSH
20515: LD_INT 3
20517: DIV
20518: PLUS
20519: ST_TO_ADDR
20520: GO 20488
20522: POP
20523: POP
// for i in Teams [ 2 ] do
20524: LD_ADDR_VAR 0 4
20528: PUSH
20529: LD_EXP 22
20533: PUSH
20534: LD_INT 2
20536: ARRAY
20537: PUSH
20538: FOR_IN
20539: IFFALSE 20572
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20541: LD_ADDR_VAR 0 6
20545: PUSH
20546: LD_VAR 0 6
20550: PUSH
20551: LD_VAR 0 4
20555: PUSH
20556: LD_INT 10
20558: PLUS
20559: PPUSH
20560: CALL_OW 110
20564: PUSH
20565: LD_INT 3
20567: DIV
20568: PLUS
20569: ST_TO_ADDR
20570: GO 20538
20572: POP
20573: POP
// for i in Teams [ 3 ] do
20574: LD_ADDR_VAR 0 4
20578: PUSH
20579: LD_EXP 22
20583: PUSH
20584: LD_INT 3
20586: ARRAY
20587: PUSH
20588: FOR_IN
20589: IFFALSE 20622
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20591: LD_ADDR_VAR 0 7
20595: PUSH
20596: LD_VAR 0 7
20600: PUSH
20601: LD_VAR 0 4
20605: PUSH
20606: LD_INT 10
20608: PLUS
20609: PPUSH
20610: CALL_OW 110
20614: PUSH
20615: LD_INT 3
20617: DIV
20618: PLUS
20619: ST_TO_ADDR
20620: GO 20588
20622: POP
20623: POP
// for i in Teams [ 4 ] do
20624: LD_ADDR_VAR 0 4
20628: PUSH
20629: LD_EXP 22
20633: PUSH
20634: LD_INT 4
20636: ARRAY
20637: PUSH
20638: FOR_IN
20639: IFFALSE 20672
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20641: LD_ADDR_VAR 0 8
20645: PUSH
20646: LD_VAR 0 8
20650: PUSH
20651: LD_VAR 0 4
20655: PUSH
20656: LD_INT 10
20658: PLUS
20659: PPUSH
20660: CALL_OW 110
20664: PUSH
20665: LD_INT 3
20667: DIV
20668: PLUS
20669: ST_TO_ADDR
20670: GO 20638
20672: POP
20673: POP
// if your_side in Teams [ 1 ] then
20674: LD_OWVAR 2
20678: PUSH
20679: LD_EXP 22
20683: PUSH
20684: LD_INT 1
20686: ARRAY
20687: IN
20688: IFFALSE 20717
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20690: LD_ADDR_VAR 0 3
20694: PUSH
20695: LD_STRING #KingoftheHill-Public-red
20697: PUSH
20698: LD_INT 3
20700: PUSH
20701: LD_VAR 0 5
20705: PUSH
20706: LD_EXP 20
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
20717: LD_OWVAR 2
20721: PUSH
20722: LD_EXP 22
20726: PUSH
20727: LD_INT 2
20729: ARRAY
20730: IN
20731: IFFALSE 20760
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: LD_STRING #KingoftheHill-Public-blue
20740: PUSH
20741: LD_INT 1
20743: PUSH
20744: LD_VAR 0 6
20748: PUSH
20749: LD_EXP 20
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
20760: LD_OWVAR 2
20764: PUSH
20765: LD_EXP 22
20769: PUSH
20770: LD_INT 3
20772: ARRAY
20773: IN
20774: IFFALSE 20803
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20776: LD_ADDR_VAR 0 3
20780: PUSH
20781: LD_STRING #KingoftheHill-Public-yell
20783: PUSH
20784: LD_INT 2
20786: PUSH
20787: LD_VAR 0 7
20791: PUSH
20792: LD_EXP 20
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
20803: LD_OWVAR 2
20807: PUSH
20808: LD_EXP 22
20812: PUSH
20813: LD_INT 4
20815: ARRAY
20816: IN
20817: IFFALSE 20846
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20819: LD_ADDR_VAR 0 3
20823: PUSH
20824: LD_STRING #KingoftheHill-Public-green
20826: PUSH
20827: LD_INT 7
20829: PUSH
20830: LD_VAR 0 8
20834: PUSH
20835: LD_EXP 20
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: ST_TO_ADDR
// end ; Display_kings := vypis ;
20846: LD_ADDR_EXP 67
20850: PUSH
20851: LD_VAR 0 3
20855: ST_TO_ADDR
// end ;
20856: LD_VAR 0 1
20860: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
20861: LD_INT 0
20863: PPUSH
20864: PPUSH
20865: PPUSH
20866: PPUSH
20867: PPUSH
20868: PPUSH
20869: PPUSH
20870: PPUSH
20871: PPUSH
// side := [ ] ;
20872: LD_ADDR_VAR 0 2
20876: PUSH
20877: EMPTY
20878: ST_TO_ADDR
// red = 0 ;
20879: LD_ADDR_VAR 0 5
20883: PUSH
20884: LD_INT 0
20886: ST_TO_ADDR
// blue = 0 ;
20887: LD_ADDR_VAR 0 6
20891: PUSH
20892: LD_INT 0
20894: ST_TO_ADDR
// yel = 0 ;
20895: LD_ADDR_VAR 0 7
20899: PUSH
20900: LD_INT 0
20902: ST_TO_ADDR
// green = 0 ;
20903: LD_ADDR_VAR 0 8
20907: PUSH
20908: LD_INT 0
20910: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
20911: LD_ADDR_VAR 0 3
20915: PUSH
20916: LD_INT 19
20918: PPUSH
20919: LD_INT 21
20921: PUSH
20922: LD_INT 3
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 53
20931: PUSH
20932: EMPTY
20933: LIST
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PPUSH
20939: CALL_OW 70
20943: ST_TO_ADDR
// for un in list do
20944: LD_ADDR_VAR 0 4
20948: PUSH
20949: LD_VAR 0 3
20953: PUSH
20954: FOR_IN
20955: IFFALSE 20980
// side := side union GetSide ( un ) ;
20957: LD_ADDR_VAR 0 2
20961: PUSH
20962: LD_VAR 0 2
20966: PUSH
20967: LD_VAR 0 4
20971: PPUSH
20972: CALL_OW 255
20976: UNION
20977: ST_TO_ADDR
20978: GO 20954
20980: POP
20981: POP
// if side <> 1 then
20982: LD_VAR 0 2
20986: PUSH
20987: LD_INT 1
20989: NONEQUAL
20990: IFFALSE 20994
// exit ;
20992: GO 21357
// side := side [ 1 ] ;
20994: LD_ADDR_VAR 0 2
20998: PUSH
20999: LD_VAR 0 2
21003: PUSH
21004: LD_INT 1
21006: ARRAY
21007: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
21008: LD_VAR 0 2
21012: PUSH
21013: LD_INT 10
21015: PLUS
21016: PPUSH
21017: LD_VAR 0 2
21021: PUSH
21022: LD_INT 10
21024: PLUS
21025: PPUSH
21026: CALL_OW 110
21030: PUSH
21031: LD_INT 1
21033: PLUS
21034: PPUSH
21035: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
21039: LD_VAR 0 2
21043: PPUSH
21044: LD_VAR 0 2
21048: PUSH
21049: LD_INT 10
21051: PLUS
21052: PPUSH
21053: CALL_OW 110
21057: PUSH
21058: LD_INT 3
21060: DIV
21061: PPUSH
21062: LD_INT 2
21064: PPUSH
21065: CALL 17923 0 3
// if not Team_Game then
21069: LD_EXP 25
21073: NOT
21074: IFFALSE 21357
// if GetTag ( side + 10 ) >= final_count * 3 then
21076: LD_VAR 0 2
21080: PUSH
21081: LD_INT 10
21083: PLUS
21084: PPUSH
21085: CALL_OW 110
21089: PUSH
21090: LD_EXP 20
21094: PUSH
21095: LD_INT 3
21097: MUL
21098: GREATEREQUAL
21099: IFFALSE 21106
// enable ( 3 ) else
21101: LD_INT 3
21103: ENABLE_MARKED
21104: GO 21357
// begin for i in Teams [ 1 ] do
21106: LD_ADDR_VAR 0 9
21110: PUSH
21111: LD_EXP 22
21115: PUSH
21116: LD_INT 1
21118: ARRAY
21119: PUSH
21120: FOR_IN
21121: IFFALSE 21154
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21123: LD_ADDR_VAR 0 5
21127: PUSH
21128: LD_VAR 0 5
21132: PUSH
21133: LD_VAR 0 9
21137: PUSH
21138: LD_INT 10
21140: PLUS
21141: PPUSH
21142: CALL_OW 110
21146: PUSH
21147: LD_INT 3
21149: DIV
21150: PLUS
21151: ST_TO_ADDR
21152: GO 21120
21154: POP
21155: POP
// for i in Teams [ 2 ] do
21156: LD_ADDR_VAR 0 9
21160: PUSH
21161: LD_EXP 22
21165: PUSH
21166: LD_INT 2
21168: ARRAY
21169: PUSH
21170: FOR_IN
21171: IFFALSE 21204
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21173: LD_ADDR_VAR 0 6
21177: PUSH
21178: LD_VAR 0 6
21182: PUSH
21183: LD_VAR 0 9
21187: PUSH
21188: LD_INT 10
21190: PLUS
21191: PPUSH
21192: CALL_OW 110
21196: PUSH
21197: LD_INT 3
21199: DIV
21200: PLUS
21201: ST_TO_ADDR
21202: GO 21170
21204: POP
21205: POP
// for i in Teams [ 3 ] do
21206: LD_ADDR_VAR 0 9
21210: PUSH
21211: LD_EXP 22
21215: PUSH
21216: LD_INT 3
21218: ARRAY
21219: PUSH
21220: FOR_IN
21221: IFFALSE 21254
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21223: LD_ADDR_VAR 0 7
21227: PUSH
21228: LD_VAR 0 7
21232: PUSH
21233: LD_VAR 0 9
21237: PUSH
21238: LD_INT 10
21240: PLUS
21241: PPUSH
21242: CALL_OW 110
21246: PUSH
21247: LD_INT 3
21249: DIV
21250: PLUS
21251: ST_TO_ADDR
21252: GO 21220
21254: POP
21255: POP
// for i in Teams [ 4 ] do
21256: LD_ADDR_VAR 0 9
21260: PUSH
21261: LD_EXP 22
21265: PUSH
21266: LD_INT 4
21268: ARRAY
21269: PUSH
21270: FOR_IN
21271: IFFALSE 21304
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21273: LD_ADDR_VAR 0 8
21277: PUSH
21278: LD_VAR 0 8
21282: PUSH
21283: LD_VAR 0 9
21287: PUSH
21288: LD_INT 10
21290: PLUS
21291: PPUSH
21292: CALL_OW 110
21296: PUSH
21297: LD_INT 3
21299: DIV
21300: PLUS
21301: ST_TO_ADDR
21302: GO 21270
21304: POP
21305: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
21306: LD_VAR 0 5
21310: PUSH
21311: LD_EXP 20
21315: GREATEREQUAL
21316: PUSH
21317: LD_VAR 0 6
21321: PUSH
21322: LD_EXP 20
21326: GREATEREQUAL
21327: OR
21328: PUSH
21329: LD_VAR 0 7
21333: PUSH
21334: LD_EXP 20
21338: GREATEREQUAL
21339: OR
21340: PUSH
21341: LD_VAR 0 8
21345: PUSH
21346: LD_EXP 20
21350: GREATEREQUAL
21351: OR
21352: IFFALSE 21357
// enable ( 3 ) ;
21354: LD_INT 3
21356: ENABLE_MARKED
// end ; end ;
21357: LD_VAR 0 1
21361: RET
// every 0 0$1 marked 2 do
21362: GO 21364
21364: DISABLE
// begin count_king ;
21365: CALL 20861 0 0
// show_public_points ;
21369: CALL 19736 0 0
// enable ;
21373: ENABLE
// end ;
21374: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
21375: GO 21377
21377: DISABLE
21378: LD_INT 0
21380: PPUSH
21381: PPUSH
21382: PPUSH
21383: PPUSH
21384: PPUSH
21385: PPUSH
// begin win := [ ] ;
21386: LD_ADDR_LOC 35
21390: PUSH
21391: EMPTY
21392: ST_TO_ADDR
// red = 0 ;
21393: LD_ADDR_VAR 0 2
21397: PUSH
21398: LD_INT 0
21400: ST_TO_ADDR
// blue = 0 ;
21401: LD_ADDR_VAR 0 3
21405: PUSH
21406: LD_INT 0
21408: ST_TO_ADDR
// yel = 0 ;
21409: LD_ADDR_VAR 0 4
21413: PUSH
21414: LD_INT 0
21416: ST_TO_ADDR
// green = 0 ;
21417: LD_ADDR_VAR 0 5
21421: PUSH
21422: LD_INT 0
21424: ST_TO_ADDR
// if not Team_Game then
21425: LD_EXP 25
21429: NOT
21430: IFFALSE 21507
// begin for side = 1 to 8 do
21432: LD_ADDR_VAR 0 1
21436: PUSH
21437: DOUBLE
21438: LD_INT 1
21440: DEC
21441: ST_TO_ADDR
21442: LD_INT 8
21444: PUSH
21445: FOR_TO
21446: IFFALSE 21491
// if GetTag ( side + 10 ) >= final_count * 3 then
21448: LD_VAR 0 1
21452: PUSH
21453: LD_INT 10
21455: PLUS
21456: PPUSH
21457: CALL_OW 110
21461: PUSH
21462: LD_EXP 20
21466: PUSH
21467: LD_INT 3
21469: MUL
21470: GREATEREQUAL
21471: IFFALSE 21489
// win := win ^ side ;
21473: LD_ADDR_LOC 35
21477: PUSH
21478: LD_LOC 35
21482: PUSH
21483: LD_VAR 0 1
21487: ADD
21488: ST_TO_ADDR
21489: GO 21445
21491: POP
21492: POP
// if win then
21493: LD_LOC 35
21497: IFFALSE 21504
// enable ( 4 ) else
21499: LD_INT 4
21501: ENABLE_MARKED
21502: GO 21505
// enable ;
21504: ENABLE
// end else
21505: GO 21823
// begin for i in Teams [ 1 ] do
21507: LD_ADDR_VAR 0 6
21511: PUSH
21512: LD_EXP 22
21516: PUSH
21517: LD_INT 1
21519: ARRAY
21520: PUSH
21521: FOR_IN
21522: IFFALSE 21555
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21524: LD_ADDR_VAR 0 2
21528: PUSH
21529: LD_VAR 0 2
21533: PUSH
21534: LD_VAR 0 6
21538: PUSH
21539: LD_INT 10
21541: PLUS
21542: PPUSH
21543: CALL_OW 110
21547: PUSH
21548: LD_INT 3
21550: DIV
21551: PLUS
21552: ST_TO_ADDR
21553: GO 21521
21555: POP
21556: POP
// for i in Teams [ 2 ] do
21557: LD_ADDR_VAR 0 6
21561: PUSH
21562: LD_EXP 22
21566: PUSH
21567: LD_INT 2
21569: ARRAY
21570: PUSH
21571: FOR_IN
21572: IFFALSE 21605
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21574: LD_ADDR_VAR 0 3
21578: PUSH
21579: LD_VAR 0 3
21583: PUSH
21584: LD_VAR 0 6
21588: PUSH
21589: LD_INT 10
21591: PLUS
21592: PPUSH
21593: CALL_OW 110
21597: PUSH
21598: LD_INT 3
21600: DIV
21601: PLUS
21602: ST_TO_ADDR
21603: GO 21571
21605: POP
21606: POP
// for i in Teams [ 3 ] do
21607: LD_ADDR_VAR 0 6
21611: PUSH
21612: LD_EXP 22
21616: PUSH
21617: LD_INT 3
21619: ARRAY
21620: PUSH
21621: FOR_IN
21622: IFFALSE 21655
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21624: LD_ADDR_VAR 0 4
21628: PUSH
21629: LD_VAR 0 4
21633: PUSH
21634: LD_VAR 0 6
21638: PUSH
21639: LD_INT 10
21641: PLUS
21642: PPUSH
21643: CALL_OW 110
21647: PUSH
21648: LD_INT 3
21650: DIV
21651: PLUS
21652: ST_TO_ADDR
21653: GO 21621
21655: POP
21656: POP
// for i in Teams [ 4 ] do
21657: LD_ADDR_VAR 0 6
21661: PUSH
21662: LD_EXP 22
21666: PUSH
21667: LD_INT 4
21669: ARRAY
21670: PUSH
21671: FOR_IN
21672: IFFALSE 21705
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21674: LD_ADDR_VAR 0 5
21678: PUSH
21679: LD_VAR 0 5
21683: PUSH
21684: LD_VAR 0 6
21688: PUSH
21689: LD_INT 10
21691: PLUS
21692: PPUSH
21693: CALL_OW 110
21697: PUSH
21698: LD_INT 3
21700: DIV
21701: PLUS
21702: ST_TO_ADDR
21703: GO 21671
21705: POP
21706: POP
// if red >= final_count then
21707: LD_VAR 0 2
21711: PUSH
21712: LD_EXP 20
21716: GREATEREQUAL
21717: IFFALSE 21733
// win = teams [ 1 ] ;
21719: LD_ADDR_LOC 35
21723: PUSH
21724: LD_EXP 22
21728: PUSH
21729: LD_INT 1
21731: ARRAY
21732: ST_TO_ADDR
// if blue >= final_count then
21733: LD_VAR 0 3
21737: PUSH
21738: LD_EXP 20
21742: GREATEREQUAL
21743: IFFALSE 21759
// win = teams [ 2 ] ;
21745: LD_ADDR_LOC 35
21749: PUSH
21750: LD_EXP 22
21754: PUSH
21755: LD_INT 2
21757: ARRAY
21758: ST_TO_ADDR
// if yel >= final_count then
21759: LD_VAR 0 4
21763: PUSH
21764: LD_EXP 20
21768: GREATEREQUAL
21769: IFFALSE 21785
// win = teams [ 3 ] ;
21771: LD_ADDR_LOC 35
21775: PUSH
21776: LD_EXP 22
21780: PUSH
21781: LD_INT 3
21783: ARRAY
21784: ST_TO_ADDR
// if green >= final_count then
21785: LD_VAR 0 5
21789: PUSH
21790: LD_EXP 20
21794: GREATEREQUAL
21795: IFFALSE 21811
// win = teams [ 4 ] ;
21797: LD_ADDR_LOC 35
21801: PUSH
21802: LD_EXP 22
21806: PUSH
21807: LD_INT 4
21809: ARRAY
21810: ST_TO_ADDR
// if win then
21811: LD_LOC 35
21815: IFFALSE 21822
// enable ( 4 ) else
21817: LD_INT 4
21819: ENABLE_MARKED
21820: GO 21823
// enable ;
21822: ENABLE
// end ; end ;
21823: PPOPN 6
21825: END
// every 0 0$1 marked 4 do
21826: GO 21828
21828: DISABLE
// begin if Player_Side in win then
21829: LD_EXP 27
21833: PUSH
21834: LD_LOC 35
21838: IN
21839: IFFALSE 21855
// begin wait ( 0 0$2 ) ;
21841: LD_INT 70
21843: PPUSH
21844: CALL_OW 67
// enable ( 401 ) ;
21848: LD_INT 401
21850: ENABLE_MARKED
// exit ;
21851: GO 21871
// end else
21853: GO 21871
// begin wait ( 0 0$2 ) ;
21855: LD_INT 70
21857: PPUSH
21858: CALL_OW 67
// Multiplayer_Loose_Message ;
21862: CALL_OW 521
// enable ( 400 ) ;
21866: LD_INT 400
21868: ENABLE_MARKED
// exit ;
21869: GO 21871
// end ; end ; end_of_file
21871: END
// export function SetMpTechs ( ) ; var side , i ; begin
21872: LD_INT 0
21874: PPUSH
21875: PPUSH
21876: PPUSH
// for side = 1 to 8 do
21877: LD_ADDR_VAR 0 2
21881: PUSH
21882: DOUBLE
21883: LD_INT 1
21885: DEC
21886: ST_TO_ADDR
21887: LD_INT 8
21889: PUSH
21890: FOR_TO
21891: IFFALSE 22012
// begin for i = 1 to 72 do
21893: LD_ADDR_VAR 0 3
21897: PUSH
21898: DOUBLE
21899: LD_INT 1
21901: DEC
21902: ST_TO_ADDR
21903: LD_INT 72
21905: PUSH
21906: FOR_TO
21907: IFFALSE 21938
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
21909: LD_VAR 0 3
21913: PPUSH
21914: LD_VAR 0 2
21918: PPUSH
21919: LD_INT 0
21921: PPUSH
21922: LD_VAR 0 3
21926: PPUSH
21927: CALL_OW 565
21931: PPUSH
21932: CALL_OW 322
21936: GO 21906
21938: POP
21939: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
21940: LD_INT 73
21942: PPUSH
21943: LD_VAR 0 2
21947: PPUSH
21948: LD_INT 0
21950: PPUSH
21951: LD_INT 25
21953: PPUSH
21954: CALL_OW 565
21958: PPUSH
21959: CALL_OW 322
// for i = 0 to 40 do
21963: LD_ADDR_VAR 0 3
21967: PUSH
21968: DOUBLE
21969: LD_INT 0
21971: DEC
21972: ST_TO_ADDR
21973: LD_INT 40
21975: PUSH
21976: FOR_TO
21977: IFFALSE 22008
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
21979: LD_VAR 0 3
21983: PPUSH
21984: LD_VAR 0 2
21988: PPUSH
21989: LD_INT 1
21991: PPUSH
21992: LD_VAR 0 3
21996: PPUSH
21997: CALL_OW 565
22001: PPUSH
22002: CALL_OW 324
22006: GO 21976
22008: POP
22009: POP
// end ;
22010: GO 21890
22012: POP
22013: POP
// end ;
22014: LD_VAR 0 1
22018: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
22019: LD_INT 0
22021: PPUSH
22022: PPUSH
22023: PPUSH
// for side = 1 to 8 do
22024: LD_ADDR_VAR 0 3
22028: PUSH
22029: DOUBLE
22030: LD_INT 1
22032: DEC
22033: ST_TO_ADDR
22034: LD_INT 8
22036: PUSH
22037: FOR_TO
22038: IFFALSE 26034
// begin for i = 1 to 73 do
22040: LD_ADDR_VAR 0 4
22044: PUSH
22045: DOUBLE
22046: LD_INT 1
22048: DEC
22049: ST_TO_ADDR
22050: LD_INT 73
22052: PUSH
22053: FOR_TO
22054: IFFALSE 22075
// SetTech ( i , side , state_disabled ) ;
22056: LD_VAR 0 4
22060: PPUSH
22061: LD_VAR 0 3
22065: PPUSH
22066: LD_INT 0
22068: PPUSH
22069: CALL_OW 322
22073: GO 22053
22075: POP
22076: POP
// for i = 0 to 40 do
22077: LD_ADDR_VAR 0 4
22081: PUSH
22082: DOUBLE
22083: LD_INT 0
22085: DEC
22086: ST_TO_ADDR
22087: LD_INT 40
22089: PUSH
22090: FOR_TO
22091: IFFALSE 22112
// SetRestrict ( i , side , false ) ;
22093: LD_VAR 0 4
22097: PPUSH
22098: LD_VAR 0 3
22102: PPUSH
22103: LD_INT 0
22105: PPUSH
22106: CALL_OW 324
22110: GO 22090
22112: POP
22113: POP
// case level of 1 :
22114: LD_VAR 0 1
22118: PUSH
22119: LD_INT 1
22121: DOUBLE
22122: EQUAL
22123: IFTRUE 22127
22125: GO 22280
22127: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22128: LD_INT 35
22130: PPUSH
22131: LD_VAR 0 3
22135: PPUSH
22136: LD_INT 1
22138: PPUSH
22139: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22143: LD_INT 45
22145: PPUSH
22146: LD_VAR 0 3
22150: PPUSH
22151: LD_INT 1
22153: PPUSH
22154: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22158: LD_INT 46
22160: PPUSH
22161: LD_VAR 0 3
22165: PPUSH
22166: LD_INT 1
22168: PPUSH
22169: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22173: LD_INT 47
22175: PPUSH
22176: LD_VAR 0 3
22180: PPUSH
22181: LD_INT 1
22183: PPUSH
22184: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22188: LD_INT 0
22190: PPUSH
22191: LD_VAR 0 3
22195: PPUSH
22196: LD_INT 1
22198: PPUSH
22199: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22203: LD_INT 2
22205: PPUSH
22206: LD_VAR 0 3
22210: PPUSH
22211: LD_INT 1
22213: PPUSH
22214: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22218: LD_INT 4
22220: PPUSH
22221: LD_VAR 0 3
22225: PPUSH
22226: LD_INT 1
22228: PPUSH
22229: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22233: LD_INT 6
22235: PPUSH
22236: LD_VAR 0 3
22240: PPUSH
22241: LD_INT 1
22243: PPUSH
22244: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22248: LD_INT 29
22250: PPUSH
22251: LD_VAR 0 3
22255: PPUSH
22256: LD_INT 1
22258: PPUSH
22259: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22263: LD_INT 31
22265: PPUSH
22266: LD_VAR 0 3
22270: PPUSH
22271: LD_INT 1
22273: PPUSH
22274: CALL_OW 324
// end ; 2 :
22278: GO 26032
22280: LD_INT 2
22282: DOUBLE
22283: EQUAL
22284: IFTRUE 22288
22286: GO 22486
22288: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22289: LD_INT 35
22291: PPUSH
22292: LD_VAR 0 3
22296: PPUSH
22297: LD_INT 1
22299: PPUSH
22300: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22304: LD_INT 45
22306: PPUSH
22307: LD_VAR 0 3
22311: PPUSH
22312: LD_INT 1
22314: PPUSH
22315: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22319: LD_INT 46
22321: PPUSH
22322: LD_VAR 0 3
22326: PPUSH
22327: LD_INT 1
22329: PPUSH
22330: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22334: LD_INT 47
22336: PPUSH
22337: LD_VAR 0 3
22341: PPUSH
22342: LD_INT 1
22344: PPUSH
22345: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22349: LD_INT 1
22351: PPUSH
22352: LD_VAR 0 3
22356: PPUSH
22357: LD_INT 1
22359: PPUSH
22360: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22364: LD_INT 2
22366: PPUSH
22367: LD_VAR 0 3
22371: PPUSH
22372: LD_INT 1
22374: PPUSH
22375: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22379: LD_INT 11
22381: PPUSH
22382: LD_VAR 0 3
22386: PPUSH
22387: LD_INT 1
22389: PPUSH
22390: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22394: LD_INT 0
22396: PPUSH
22397: LD_VAR 0 3
22401: PPUSH
22402: LD_INT 1
22404: PPUSH
22405: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22409: LD_INT 2
22411: PPUSH
22412: LD_VAR 0 3
22416: PPUSH
22417: LD_INT 1
22419: PPUSH
22420: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22424: LD_INT 4
22426: PPUSH
22427: LD_VAR 0 3
22431: PPUSH
22432: LD_INT 1
22434: PPUSH
22435: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22439: LD_INT 6
22441: PPUSH
22442: LD_VAR 0 3
22446: PPUSH
22447: LD_INT 1
22449: PPUSH
22450: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22454: LD_INT 29
22456: PPUSH
22457: LD_VAR 0 3
22461: PPUSH
22462: LD_INT 1
22464: PPUSH
22465: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22469: LD_INT 31
22471: PPUSH
22472: LD_VAR 0 3
22476: PPUSH
22477: LD_INT 1
22479: PPUSH
22480: CALL_OW 324
// end ; 3 :
22484: GO 26032
22486: LD_INT 3
22488: DOUBLE
22489: EQUAL
22490: IFTRUE 22494
22492: GO 22947
22494: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22495: LD_INT 35
22497: PPUSH
22498: LD_VAR 0 3
22502: PPUSH
22503: LD_INT 1
22505: PPUSH
22506: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22510: LD_INT 45
22512: PPUSH
22513: LD_VAR 0 3
22517: PPUSH
22518: LD_INT 1
22520: PPUSH
22521: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22525: LD_INT 46
22527: PPUSH
22528: LD_VAR 0 3
22532: PPUSH
22533: LD_INT 1
22535: PPUSH
22536: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22540: LD_INT 47
22542: PPUSH
22543: LD_VAR 0 3
22547: PPUSH
22548: LD_INT 1
22550: PPUSH
22551: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22555: LD_INT 1
22557: PPUSH
22558: LD_VAR 0 3
22562: PPUSH
22563: LD_INT 1
22565: PPUSH
22566: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22570: LD_INT 2
22572: PPUSH
22573: LD_VAR 0 3
22577: PPUSH
22578: LD_INT 1
22580: PPUSH
22581: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22585: LD_INT 11
22587: PPUSH
22588: LD_VAR 0 3
22592: PPUSH
22593: LD_INT 1
22595: PPUSH
22596: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22600: LD_INT 48
22602: PPUSH
22603: LD_VAR 0 3
22607: PPUSH
22608: LD_INT 1
22610: PPUSH
22611: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22615: LD_INT 69
22617: PPUSH
22618: LD_VAR 0 3
22622: PPUSH
22623: LD_INT 1
22625: PPUSH
22626: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22630: LD_INT 39
22632: PPUSH
22633: LD_VAR 0 3
22637: PPUSH
22638: LD_INT 1
22640: PPUSH
22641: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22645: LD_INT 43
22647: PPUSH
22648: LD_VAR 0 3
22652: PPUSH
22653: LD_INT 1
22655: PPUSH
22656: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22660: LD_INT 51
22662: PPUSH
22663: LD_VAR 0 3
22667: PPUSH
22668: LD_INT 1
22670: PPUSH
22671: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22675: LD_INT 6
22677: PPUSH
22678: LD_VAR 0 3
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22690: LD_INT 0
22692: PPUSH
22693: LD_VAR 0 3
22697: PPUSH
22698: LD_INT 1
22700: PPUSH
22701: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22705: LD_INT 2
22707: PPUSH
22708: LD_VAR 0 3
22712: PPUSH
22713: LD_INT 1
22715: PPUSH
22716: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22720: LD_INT 3
22722: PPUSH
22723: LD_VAR 0 3
22727: PPUSH
22728: LD_INT 1
22730: PPUSH
22731: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22735: LD_INT 4
22737: PPUSH
22738: LD_VAR 0 3
22742: PPUSH
22743: LD_INT 1
22745: PPUSH
22746: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22750: LD_INT 6
22752: PPUSH
22753: LD_VAR 0 3
22757: PPUSH
22758: LD_INT 1
22760: PPUSH
22761: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22765: LD_INT 7
22767: PPUSH
22768: LD_VAR 0 3
22772: PPUSH
22773: LD_INT 1
22775: PPUSH
22776: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22780: LD_INT 8
22782: PPUSH
22783: LD_VAR 0 3
22787: PPUSH
22788: LD_INT 1
22790: PPUSH
22791: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22795: LD_INT 10
22797: PPUSH
22798: LD_VAR 0 3
22802: PPUSH
22803: LD_INT 1
22805: PPUSH
22806: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22810: LD_INT 15
22812: PPUSH
22813: LD_VAR 0 3
22817: PPUSH
22818: LD_INT 1
22820: PPUSH
22821: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22825: LD_INT 16
22827: PPUSH
22828: LD_VAR 0 3
22832: PPUSH
22833: LD_INT 1
22835: PPUSH
22836: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22840: LD_INT 17
22842: PPUSH
22843: LD_VAR 0 3
22847: PPUSH
22848: LD_INT 1
22850: PPUSH
22851: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22855: LD_INT 20
22857: PPUSH
22858: LD_VAR 0 3
22862: PPUSH
22863: LD_INT 1
22865: PPUSH
22866: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22870: LD_INT 26
22872: PPUSH
22873: LD_VAR 0 3
22877: PPUSH
22878: LD_INT 1
22880: PPUSH
22881: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22885: LD_INT 27
22887: PPUSH
22888: LD_VAR 0 3
22892: PPUSH
22893: LD_INT 1
22895: PPUSH
22896: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22900: LD_INT 29
22902: PPUSH
22903: LD_VAR 0 3
22907: PPUSH
22908: LD_INT 1
22910: PPUSH
22911: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22915: LD_INT 31
22917: PPUSH
22918: LD_VAR 0 3
22922: PPUSH
22923: LD_INT 1
22925: PPUSH
22926: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22930: LD_INT 32
22932: PPUSH
22933: LD_VAR 0 3
22937: PPUSH
22938: LD_INT 1
22940: PPUSH
22941: CALL_OW 324
// end ; 4 :
22945: GO 26032
22947: LD_INT 4
22949: DOUBLE
22950: EQUAL
22951: IFTRUE 22955
22953: GO 23903
22955: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22956: LD_INT 35
22958: PPUSH
22959: LD_VAR 0 3
22963: PPUSH
22964: LD_INT 1
22966: PPUSH
22967: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22971: LD_INT 45
22973: PPUSH
22974: LD_VAR 0 3
22978: PPUSH
22979: LD_INT 1
22981: PPUSH
22982: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22986: LD_INT 46
22988: PPUSH
22989: LD_VAR 0 3
22993: PPUSH
22994: LD_INT 1
22996: PPUSH
22997: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23001: LD_INT 47
23003: PPUSH
23004: LD_VAR 0 3
23008: PPUSH
23009: LD_INT 1
23011: PPUSH
23012: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23016: LD_INT 1
23018: PPUSH
23019: LD_VAR 0 3
23023: PPUSH
23024: LD_INT 1
23026: PPUSH
23027: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23031: LD_INT 2
23033: PPUSH
23034: LD_VAR 0 3
23038: PPUSH
23039: LD_INT 1
23041: PPUSH
23042: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23046: LD_INT 11
23048: PPUSH
23049: LD_VAR 0 3
23053: PPUSH
23054: LD_INT 1
23056: PPUSH
23057: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23061: LD_INT 20
23063: PPUSH
23064: LD_VAR 0 3
23068: PPUSH
23069: LD_INT 1
23071: PPUSH
23072: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23076: LD_INT 48
23078: PPUSH
23079: LD_VAR 0 3
23083: PPUSH
23084: LD_INT 1
23086: PPUSH
23087: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23091: LD_INT 49
23093: PPUSH
23094: LD_VAR 0 3
23098: PPUSH
23099: LD_INT 1
23101: PPUSH
23102: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23106: LD_INT 69
23108: PPUSH
23109: LD_VAR 0 3
23113: PPUSH
23114: LD_INT 1
23116: PPUSH
23117: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23121: LD_INT 39
23123: PPUSH
23124: LD_VAR 0 3
23128: PPUSH
23129: LD_INT 1
23131: PPUSH
23132: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23136: LD_INT 34
23138: PPUSH
23139: LD_VAR 0 3
23143: PPUSH
23144: LD_INT 1
23146: PPUSH
23147: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23151: LD_INT 42
23153: PPUSH
23154: LD_VAR 0 3
23158: PPUSH
23159: LD_INT 1
23161: PPUSH
23162: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23166: LD_INT 44
23168: PPUSH
23169: LD_VAR 0 3
23173: PPUSH
23174: LD_INT 1
23176: PPUSH
23177: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23181: LD_INT 41
23183: PPUSH
23184: LD_VAR 0 3
23188: PPUSH
23189: LD_INT 1
23191: PPUSH
23192: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23196: LD_INT 43
23198: PPUSH
23199: LD_VAR 0 3
23203: PPUSH
23204: LD_INT 1
23206: PPUSH
23207: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23211: LD_INT 70
23213: PPUSH
23214: LD_VAR 0 3
23218: PPUSH
23219: LD_INT 1
23221: PPUSH
23222: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23226: LD_INT 51
23228: PPUSH
23229: LD_VAR 0 3
23233: PPUSH
23234: LD_INT 1
23236: PPUSH
23237: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23241: LD_INT 52
23243: PPUSH
23244: LD_VAR 0 3
23248: PPUSH
23249: LD_INT 1
23251: PPUSH
23252: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23256: LD_INT 6
23258: PPUSH
23259: LD_VAR 0 3
23263: PPUSH
23264: LD_INT 1
23266: PPUSH
23267: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23271: LD_INT 15
23273: PPUSH
23274: LD_VAR 0 3
23278: PPUSH
23279: LD_INT 1
23281: PPUSH
23282: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23286: LD_INT 7
23288: PPUSH
23289: LD_VAR 0 3
23293: PPUSH
23294: LD_INT 1
23296: PPUSH
23297: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23301: LD_INT 12
23303: PPUSH
23304: LD_VAR 0 3
23308: PPUSH
23309: LD_INT 1
23311: PPUSH
23312: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23316: LD_INT 18
23318: PPUSH
23319: LD_VAR 0 3
23323: PPUSH
23324: LD_INT 1
23326: PPUSH
23327: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23331: LD_INT 60
23333: PPUSH
23334: LD_VAR 0 3
23338: PPUSH
23339: LD_INT 1
23341: PPUSH
23342: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23346: LD_INT 9
23348: PPUSH
23349: LD_VAR 0 3
23353: PPUSH
23354: LD_INT 1
23356: PPUSH
23357: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23361: LD_INT 30
23363: PPUSH
23364: LD_VAR 0 3
23368: PPUSH
23369: LD_INT 1
23371: PPUSH
23372: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23376: LD_INT 37
23378: PPUSH
23379: LD_VAR 0 3
23383: PPUSH
23384: LD_INT 1
23386: PPUSH
23387: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23391: LD_INT 5
23393: PPUSH
23394: LD_VAR 0 3
23398: PPUSH
23399: LD_INT 1
23401: PPUSH
23402: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23406: LD_INT 66
23408: PPUSH
23409: LD_VAR 0 3
23413: PPUSH
23414: LD_INT 1
23416: PPUSH
23417: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23421: LD_INT 21
23423: PPUSH
23424: LD_VAR 0 3
23428: PPUSH
23429: LD_INT 1
23431: PPUSH
23432: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23436: LD_INT 22
23438: PPUSH
23439: LD_VAR 0 3
23443: PPUSH
23444: LD_INT 1
23446: PPUSH
23447: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23451: LD_INT 54
23453: PPUSH
23454: LD_VAR 0 3
23458: PPUSH
23459: LD_INT 1
23461: PPUSH
23462: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23466: LD_INT 0
23468: PPUSH
23469: LD_VAR 0 3
23473: PPUSH
23474: LD_INT 1
23476: PPUSH
23477: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23481: LD_INT 1
23483: PPUSH
23484: LD_VAR 0 3
23488: PPUSH
23489: LD_INT 1
23491: PPUSH
23492: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23496: LD_INT 2
23498: PPUSH
23499: LD_VAR 0 3
23503: PPUSH
23504: LD_INT 1
23506: PPUSH
23507: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23511: LD_INT 3
23513: PPUSH
23514: LD_VAR 0 3
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23526: LD_INT 4
23528: PPUSH
23529: LD_VAR 0 3
23533: PPUSH
23534: LD_INT 1
23536: PPUSH
23537: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23541: LD_INT 5
23543: PPUSH
23544: LD_VAR 0 3
23548: PPUSH
23549: LD_INT 1
23551: PPUSH
23552: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23556: LD_INT 6
23558: PPUSH
23559: LD_VAR 0 3
23563: PPUSH
23564: LD_INT 1
23566: PPUSH
23567: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23571: LD_INT 7
23573: PPUSH
23574: LD_VAR 0 3
23578: PPUSH
23579: LD_INT 1
23581: PPUSH
23582: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23586: LD_INT 8
23588: PPUSH
23589: LD_VAR 0 3
23593: PPUSH
23594: LD_INT 1
23596: PPUSH
23597: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23601: LD_INT 10
23603: PPUSH
23604: LD_VAR 0 3
23608: PPUSH
23609: LD_INT 1
23611: PPUSH
23612: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23616: LD_INT 11
23618: PPUSH
23619: LD_VAR 0 3
23623: PPUSH
23624: LD_INT 1
23626: PPUSH
23627: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23631: LD_INT 12
23633: PPUSH
23634: LD_VAR 0 3
23638: PPUSH
23639: LD_INT 1
23641: PPUSH
23642: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23646: LD_INT 13
23648: PPUSH
23649: LD_VAR 0 3
23653: PPUSH
23654: LD_INT 1
23656: PPUSH
23657: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23661: LD_INT 14
23663: PPUSH
23664: LD_VAR 0 3
23668: PPUSH
23669: LD_INT 1
23671: PPUSH
23672: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23676: LD_INT 15
23678: PPUSH
23679: LD_VAR 0 3
23683: PPUSH
23684: LD_INT 1
23686: PPUSH
23687: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23691: LD_INT 16
23693: PPUSH
23694: LD_VAR 0 3
23698: PPUSH
23699: LD_INT 1
23701: PPUSH
23702: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23706: LD_INT 17
23708: PPUSH
23709: LD_VAR 0 3
23713: PPUSH
23714: LD_INT 1
23716: PPUSH
23717: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23721: LD_INT 19
23723: PPUSH
23724: LD_VAR 0 3
23728: PPUSH
23729: LD_INT 1
23731: PPUSH
23732: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23736: LD_INT 20
23738: PPUSH
23739: LD_VAR 0 3
23743: PPUSH
23744: LD_INT 1
23746: PPUSH
23747: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23751: LD_INT 21
23753: PPUSH
23754: LD_VAR 0 3
23758: PPUSH
23759: LD_INT 1
23761: PPUSH
23762: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23766: LD_INT 23
23768: PPUSH
23769: LD_VAR 0 3
23773: PPUSH
23774: LD_INT 1
23776: PPUSH
23777: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23781: LD_INT 26
23783: PPUSH
23784: LD_VAR 0 3
23788: PPUSH
23789: LD_INT 1
23791: PPUSH
23792: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23796: LD_INT 27
23798: PPUSH
23799: LD_VAR 0 3
23803: PPUSH
23804: LD_INT 1
23806: PPUSH
23807: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23811: LD_INT 28
23813: PPUSH
23814: LD_VAR 0 3
23818: PPUSH
23819: LD_INT 1
23821: PPUSH
23822: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23826: LD_INT 29
23828: PPUSH
23829: LD_VAR 0 3
23833: PPUSH
23834: LD_INT 1
23836: PPUSH
23837: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23841: LD_INT 30
23843: PPUSH
23844: LD_VAR 0 3
23848: PPUSH
23849: LD_INT 1
23851: PPUSH
23852: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23856: LD_INT 31
23858: PPUSH
23859: LD_VAR 0 3
23863: PPUSH
23864: LD_INT 1
23866: PPUSH
23867: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23871: LD_INT 32
23873: PPUSH
23874: LD_VAR 0 3
23878: PPUSH
23879: LD_INT 1
23881: PPUSH
23882: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23886: LD_INT 36
23888: PPUSH
23889: LD_VAR 0 3
23893: PPUSH
23894: LD_INT 1
23896: PPUSH
23897: CALL_OW 324
// end ; 5 :
23901: GO 26032
23903: LD_INT 5
23905: DOUBLE
23906: EQUAL
23907: IFTRUE 23911
23909: GO 25024
23911: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23912: LD_INT 35
23914: PPUSH
23915: LD_VAR 0 3
23919: PPUSH
23920: LD_INT 1
23922: PPUSH
23923: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23927: LD_INT 45
23929: PPUSH
23930: LD_VAR 0 3
23934: PPUSH
23935: LD_INT 1
23937: PPUSH
23938: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23942: LD_INT 46
23944: PPUSH
23945: LD_VAR 0 3
23949: PPUSH
23950: LD_INT 1
23952: PPUSH
23953: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23957: LD_INT 47
23959: PPUSH
23960: LD_VAR 0 3
23964: PPUSH
23965: LD_INT 1
23967: PPUSH
23968: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23972: LD_INT 1
23974: PPUSH
23975: LD_VAR 0 3
23979: PPUSH
23980: LD_INT 1
23982: PPUSH
23983: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23987: LD_INT 2
23989: PPUSH
23990: LD_VAR 0 3
23994: PPUSH
23995: LD_INT 1
23997: PPUSH
23998: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
24002: LD_INT 11
24004: PPUSH
24005: LD_VAR 0 3
24009: PPUSH
24010: LD_INT 1
24012: PPUSH
24013: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24017: LD_INT 20
24019: PPUSH
24020: LD_VAR 0 3
24024: PPUSH
24025: LD_INT 1
24027: PPUSH
24028: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24032: LD_INT 48
24034: PPUSH
24035: LD_VAR 0 3
24039: PPUSH
24040: LD_INT 1
24042: PPUSH
24043: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24047: LD_INT 49
24049: PPUSH
24050: LD_VAR 0 3
24054: PPUSH
24055: LD_INT 1
24057: PPUSH
24058: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24062: LD_INT 69
24064: PPUSH
24065: LD_VAR 0 3
24069: PPUSH
24070: LD_INT 1
24072: PPUSH
24073: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24077: LD_INT 39
24079: PPUSH
24080: LD_VAR 0 3
24084: PPUSH
24085: LD_INT 1
24087: PPUSH
24088: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24092: LD_INT 34
24094: PPUSH
24095: LD_VAR 0 3
24099: PPUSH
24100: LD_INT 1
24102: PPUSH
24103: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24107: LD_INT 42
24109: PPUSH
24110: LD_VAR 0 3
24114: PPUSH
24115: LD_INT 1
24117: PPUSH
24118: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24122: LD_INT 44
24124: PPUSH
24125: LD_VAR 0 3
24129: PPUSH
24130: LD_INT 1
24132: PPUSH
24133: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24137: LD_INT 41
24139: PPUSH
24140: LD_VAR 0 3
24144: PPUSH
24145: LD_INT 1
24147: PPUSH
24148: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24152: LD_INT 40
24154: PPUSH
24155: LD_VAR 0 3
24159: PPUSH
24160: LD_INT 1
24162: PPUSH
24163: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24167: LD_INT 43
24169: PPUSH
24170: LD_VAR 0 3
24174: PPUSH
24175: LD_INT 1
24177: PPUSH
24178: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24182: LD_INT 70
24184: PPUSH
24185: LD_VAR 0 3
24189: PPUSH
24190: LD_INT 1
24192: PPUSH
24193: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24197: LD_INT 51
24199: PPUSH
24200: LD_VAR 0 3
24204: PPUSH
24205: LD_INT 1
24207: PPUSH
24208: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24212: LD_INT 52
24214: PPUSH
24215: LD_VAR 0 3
24219: PPUSH
24220: LD_INT 1
24222: PPUSH
24223: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24227: LD_INT 6
24229: PPUSH
24230: LD_VAR 0 3
24234: PPUSH
24235: LD_INT 1
24237: PPUSH
24238: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24242: LD_INT 15
24244: PPUSH
24245: LD_VAR 0 3
24249: PPUSH
24250: LD_INT 1
24252: PPUSH
24253: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24257: LD_INT 7
24259: PPUSH
24260: LD_VAR 0 3
24264: PPUSH
24265: LD_INT 1
24267: PPUSH
24268: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24272: LD_INT 12
24274: PPUSH
24275: LD_VAR 0 3
24279: PPUSH
24280: LD_INT 1
24282: PPUSH
24283: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24287: LD_INT 17
24289: PPUSH
24290: LD_VAR 0 3
24294: PPUSH
24295: LD_INT 1
24297: PPUSH
24298: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24302: LD_INT 18
24304: PPUSH
24305: LD_VAR 0 3
24309: PPUSH
24310: LD_INT 1
24312: PPUSH
24313: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24317: LD_INT 60
24319: PPUSH
24320: LD_VAR 0 3
24324: PPUSH
24325: LD_INT 1
24327: PPUSH
24328: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24332: LD_INT 32
24334: PPUSH
24335: LD_VAR 0 3
24339: PPUSH
24340: LD_INT 1
24342: PPUSH
24343: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24347: LD_INT 9
24349: PPUSH
24350: LD_VAR 0 3
24354: PPUSH
24355: LD_INT 1
24357: PPUSH
24358: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24362: LD_INT 57
24364: PPUSH
24365: LD_VAR 0 3
24369: PPUSH
24370: LD_INT 1
24372: PPUSH
24373: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24377: LD_INT 30
24379: PPUSH
24380: LD_VAR 0 3
24384: PPUSH
24385: LD_INT 1
24387: PPUSH
24388: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24392: LD_INT 37
24394: PPUSH
24395: LD_VAR 0 3
24399: PPUSH
24400: LD_INT 1
24402: PPUSH
24403: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24407: LD_INT 63
24409: PPUSH
24410: LD_VAR 0 3
24414: PPUSH
24415: LD_INT 1
24417: PPUSH
24418: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24422: LD_INT 3
24424: PPUSH
24425: LD_VAR 0 3
24429: PPUSH
24430: LD_INT 1
24432: PPUSH
24433: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24437: LD_INT 4
24439: PPUSH
24440: LD_VAR 0 3
24444: PPUSH
24445: LD_INT 1
24447: PPUSH
24448: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24452: LD_INT 5
24454: PPUSH
24455: LD_VAR 0 3
24459: PPUSH
24460: LD_INT 1
24462: PPUSH
24463: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24467: LD_INT 66
24469: PPUSH
24470: LD_VAR 0 3
24474: PPUSH
24475: LD_INT 1
24477: PPUSH
24478: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24482: LD_INT 21
24484: PPUSH
24485: LD_VAR 0 3
24489: PPUSH
24490: LD_INT 1
24492: PPUSH
24493: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24497: LD_INT 22
24499: PPUSH
24500: LD_VAR 0 3
24504: PPUSH
24505: LD_INT 1
24507: PPUSH
24508: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24512: LD_INT 19
24514: PPUSH
24515: LD_VAR 0 3
24519: PPUSH
24520: LD_INT 1
24522: PPUSH
24523: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24527: LD_INT 54
24529: PPUSH
24530: LD_VAR 0 3
24534: PPUSH
24535: LD_INT 1
24537: PPUSH
24538: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24542: LD_INT 55
24544: PPUSH
24545: LD_VAR 0 3
24549: PPUSH
24550: LD_INT 1
24552: PPUSH
24553: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
24557: LD_INT 0
24559: PPUSH
24560: LD_VAR 0 3
24564: PPUSH
24565: LD_INT 1
24567: PPUSH
24568: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
24572: LD_INT 1
24574: PPUSH
24575: LD_VAR 0 3
24579: PPUSH
24580: LD_INT 1
24582: PPUSH
24583: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24587: LD_INT 2
24589: PPUSH
24590: LD_VAR 0 3
24594: PPUSH
24595: LD_INT 1
24597: PPUSH
24598: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24602: LD_INT 3
24604: PPUSH
24605: LD_VAR 0 3
24609: PPUSH
24610: LD_INT 1
24612: PPUSH
24613: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24617: LD_INT 4
24619: PPUSH
24620: LD_VAR 0 3
24624: PPUSH
24625: LD_INT 1
24627: PPUSH
24628: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24632: LD_INT 5
24634: PPUSH
24635: LD_VAR 0 3
24639: PPUSH
24640: LD_INT 1
24642: PPUSH
24643: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24647: LD_INT 6
24649: PPUSH
24650: LD_VAR 0 3
24654: PPUSH
24655: LD_INT 1
24657: PPUSH
24658: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24662: LD_INT 7
24664: PPUSH
24665: LD_VAR 0 3
24669: PPUSH
24670: LD_INT 1
24672: PPUSH
24673: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24677: LD_INT 8
24679: PPUSH
24680: LD_VAR 0 3
24684: PPUSH
24685: LD_INT 1
24687: PPUSH
24688: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24692: LD_INT 10
24694: PPUSH
24695: LD_VAR 0 3
24699: PPUSH
24700: LD_INT 1
24702: PPUSH
24703: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24707: LD_INT 11
24709: PPUSH
24710: LD_VAR 0 3
24714: PPUSH
24715: LD_INT 1
24717: PPUSH
24718: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24722: LD_INT 12
24724: PPUSH
24725: LD_VAR 0 3
24729: PPUSH
24730: LD_INT 1
24732: PPUSH
24733: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24737: LD_INT 13
24739: PPUSH
24740: LD_VAR 0 3
24744: PPUSH
24745: LD_INT 1
24747: PPUSH
24748: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24752: LD_INT 14
24754: PPUSH
24755: LD_VAR 0 3
24759: PPUSH
24760: LD_INT 1
24762: PPUSH
24763: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24767: LD_INT 15
24769: PPUSH
24770: LD_VAR 0 3
24774: PPUSH
24775: LD_INT 1
24777: PPUSH
24778: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24782: LD_INT 16
24784: PPUSH
24785: LD_VAR 0 3
24789: PPUSH
24790: LD_INT 1
24792: PPUSH
24793: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24797: LD_INT 17
24799: PPUSH
24800: LD_VAR 0 3
24804: PPUSH
24805: LD_INT 1
24807: PPUSH
24808: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24812: LD_INT 18
24814: PPUSH
24815: LD_VAR 0 3
24819: PPUSH
24820: LD_INT 1
24822: PPUSH
24823: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
24827: LD_INT 19
24829: PPUSH
24830: LD_VAR 0 3
24834: PPUSH
24835: LD_INT 1
24837: PPUSH
24838: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
24842: LD_INT 20
24844: PPUSH
24845: LD_VAR 0 3
24849: PPUSH
24850: LD_INT 1
24852: PPUSH
24853: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
24857: LD_INT 21
24859: PPUSH
24860: LD_VAR 0 3
24864: PPUSH
24865: LD_INT 1
24867: PPUSH
24868: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
24872: LD_INT 23
24874: PPUSH
24875: LD_VAR 0 3
24879: PPUSH
24880: LD_INT 1
24882: PPUSH
24883: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
24887: LD_INT 26
24889: PPUSH
24890: LD_VAR 0 3
24894: PPUSH
24895: LD_INT 1
24897: PPUSH
24898: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
24902: LD_INT 27
24904: PPUSH
24905: LD_VAR 0 3
24909: PPUSH
24910: LD_INT 1
24912: PPUSH
24913: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
24917: LD_INT 28
24919: PPUSH
24920: LD_VAR 0 3
24924: PPUSH
24925: LD_INT 1
24927: PPUSH
24928: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
24932: LD_INT 29
24934: PPUSH
24935: LD_VAR 0 3
24939: PPUSH
24940: LD_INT 1
24942: PPUSH
24943: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24947: LD_INT 30
24949: PPUSH
24950: LD_VAR 0 3
24954: PPUSH
24955: LD_INT 1
24957: PPUSH
24958: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24962: LD_INT 31
24964: PPUSH
24965: LD_VAR 0 3
24969: PPUSH
24970: LD_INT 1
24972: PPUSH
24973: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24977: LD_INT 32
24979: PPUSH
24980: LD_VAR 0 3
24984: PPUSH
24985: LD_INT 1
24987: PPUSH
24988: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
24992: LD_INT 33
24994: PPUSH
24995: LD_VAR 0 3
24999: PPUSH
25000: LD_INT 1
25002: PPUSH
25003: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
25007: LD_INT 36
25009: PPUSH
25010: LD_VAR 0 3
25014: PPUSH
25015: LD_INT 1
25017: PPUSH
25018: CALL_OW 324
// end ; 6 :
25022: GO 26032
25024: LD_INT 6
25026: DOUBLE
25027: EQUAL
25028: IFTRUE 25032
25030: GO 25957
25032: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
25033: LD_INT 35
25035: PPUSH
25036: LD_VAR 0 3
25040: PPUSH
25041: LD_INT 1
25043: PPUSH
25044: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
25048: LD_INT 45
25050: PPUSH
25051: LD_VAR 0 3
25055: PPUSH
25056: LD_INT 1
25058: PPUSH
25059: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
25063: LD_INT 46
25065: PPUSH
25066: LD_VAR 0 3
25070: PPUSH
25071: LD_INT 1
25073: PPUSH
25074: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
25078: LD_INT 47
25080: PPUSH
25081: LD_VAR 0 3
25085: PPUSH
25086: LD_INT 1
25088: PPUSH
25089: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
25093: LD_INT 1
25095: PPUSH
25096: LD_VAR 0 3
25100: PPUSH
25101: LD_INT 1
25103: PPUSH
25104: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
25108: LD_INT 2
25110: PPUSH
25111: LD_VAR 0 3
25115: PPUSH
25116: LD_INT 1
25118: PPUSH
25119: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
25123: LD_INT 11
25125: PPUSH
25126: LD_VAR 0 3
25130: PPUSH
25131: LD_INT 1
25133: PPUSH
25134: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
25138: LD_INT 20
25140: PPUSH
25141: LD_VAR 0 3
25145: PPUSH
25146: LD_INT 1
25148: PPUSH
25149: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
25153: LD_INT 48
25155: PPUSH
25156: LD_VAR 0 3
25160: PPUSH
25161: LD_INT 1
25163: PPUSH
25164: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
25168: LD_INT 49
25170: PPUSH
25171: LD_VAR 0 3
25175: PPUSH
25176: LD_INT 1
25178: PPUSH
25179: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
25183: LD_INT 50
25185: PPUSH
25186: LD_VAR 0 3
25190: PPUSH
25191: LD_INT 1
25193: PPUSH
25194: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
25198: LD_INT 69
25200: PPUSH
25201: LD_VAR 0 3
25205: PPUSH
25206: LD_INT 1
25208: PPUSH
25209: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
25213: LD_INT 39
25215: PPUSH
25216: LD_VAR 0 3
25220: PPUSH
25221: LD_INT 1
25223: PPUSH
25224: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
25228: LD_INT 34
25230: PPUSH
25231: LD_VAR 0 3
25235: PPUSH
25236: LD_INT 1
25238: PPUSH
25239: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
25243: LD_INT 42
25245: PPUSH
25246: LD_VAR 0 3
25250: PPUSH
25251: LD_INT 1
25253: PPUSH
25254: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
25258: LD_INT 44
25260: PPUSH
25261: LD_VAR 0 3
25265: PPUSH
25266: LD_INT 1
25268: PPUSH
25269: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
25273: LD_INT 41
25275: PPUSH
25276: LD_VAR 0 3
25280: PPUSH
25281: LD_INT 1
25283: PPUSH
25284: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
25288: LD_INT 13
25290: PPUSH
25291: LD_VAR 0 3
25295: PPUSH
25296: LD_INT 1
25298: PPUSH
25299: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
25303: LD_INT 40
25305: PPUSH
25306: LD_VAR 0 3
25310: PPUSH
25311: LD_INT 1
25313: PPUSH
25314: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
25318: LD_INT 43
25320: PPUSH
25321: LD_VAR 0 3
25325: PPUSH
25326: LD_INT 1
25328: PPUSH
25329: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
25333: LD_INT 70
25335: PPUSH
25336: LD_VAR 0 3
25340: PPUSH
25341: LD_INT 1
25343: PPUSH
25344: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
25348: LD_INT 23
25350: PPUSH
25351: LD_VAR 0 3
25355: PPUSH
25356: LD_INT 1
25358: PPUSH
25359: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
25363: LD_INT 51
25365: PPUSH
25366: LD_VAR 0 3
25370: PPUSH
25371: LD_INT 1
25373: PPUSH
25374: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
25378: LD_INT 52
25380: PPUSH
25381: LD_VAR 0 3
25385: PPUSH
25386: LD_INT 1
25388: PPUSH
25389: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
25393: LD_INT 6
25395: PPUSH
25396: LD_VAR 0 3
25400: PPUSH
25401: LD_INT 1
25403: PPUSH
25404: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
25408: LD_INT 15
25410: PPUSH
25411: LD_VAR 0 3
25415: PPUSH
25416: LD_INT 1
25418: PPUSH
25419: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
25423: LD_INT 7
25425: PPUSH
25426: LD_VAR 0 3
25430: PPUSH
25431: LD_INT 1
25433: PPUSH
25434: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
25438: LD_INT 12
25440: PPUSH
25441: LD_VAR 0 3
25445: PPUSH
25446: LD_INT 1
25448: PPUSH
25449: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
25453: LD_INT 10
25455: PPUSH
25456: LD_VAR 0 3
25460: PPUSH
25461: LD_INT 1
25463: PPUSH
25464: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
25468: LD_INT 17
25470: PPUSH
25471: LD_VAR 0 3
25475: PPUSH
25476: LD_INT 1
25478: PPUSH
25479: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
25483: LD_INT 18
25485: PPUSH
25486: LD_VAR 0 3
25490: PPUSH
25491: LD_INT 1
25493: PPUSH
25494: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
25498: LD_INT 60
25500: PPUSH
25501: LD_VAR 0 3
25505: PPUSH
25506: LD_INT 1
25508: PPUSH
25509: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
25513: LD_INT 61
25515: PPUSH
25516: LD_VAR 0 3
25520: PPUSH
25521: LD_INT 1
25523: PPUSH
25524: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
25528: LD_INT 32
25530: PPUSH
25531: LD_VAR 0 3
25535: PPUSH
25536: LD_INT 1
25538: PPUSH
25539: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
25543: LD_INT 27
25545: PPUSH
25546: LD_VAR 0 3
25550: PPUSH
25551: LD_INT 1
25553: PPUSH
25554: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
25558: LD_INT 36
25560: PPUSH
25561: LD_VAR 0 3
25565: PPUSH
25566: LD_INT 1
25568: PPUSH
25569: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
25573: LD_INT 33
25575: PPUSH
25576: LD_VAR 0 3
25580: PPUSH
25581: LD_INT 1
25583: PPUSH
25584: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25588: LD_INT 9
25590: PPUSH
25591: LD_VAR 0 3
25595: PPUSH
25596: LD_INT 1
25598: PPUSH
25599: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25603: LD_INT 38
25605: PPUSH
25606: LD_VAR 0 3
25610: PPUSH
25611: LD_INT 1
25613: PPUSH
25614: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25618: LD_INT 57
25620: PPUSH
25621: LD_VAR 0 3
25625: PPUSH
25626: LD_INT 1
25628: PPUSH
25629: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25633: LD_INT 58
25635: PPUSH
25636: LD_VAR 0 3
25640: PPUSH
25641: LD_INT 1
25643: PPUSH
25644: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25648: LD_INT 28
25650: PPUSH
25651: LD_VAR 0 3
25655: PPUSH
25656: LD_INT 1
25658: PPUSH
25659: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25663: LD_INT 29
25665: PPUSH
25666: LD_VAR 0 3
25670: PPUSH
25671: LD_INT 1
25673: PPUSH
25674: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25678: LD_INT 30
25680: PPUSH
25681: LD_VAR 0 3
25685: PPUSH
25686: LD_INT 1
25688: PPUSH
25689: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25693: LD_INT 37
25695: PPUSH
25696: LD_VAR 0 3
25700: PPUSH
25701: LD_INT 1
25703: PPUSH
25704: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25708: LD_INT 63
25710: PPUSH
25711: LD_VAR 0 3
25715: PPUSH
25716: LD_INT 1
25718: PPUSH
25719: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25723: LD_INT 64
25725: PPUSH
25726: LD_VAR 0 3
25730: PPUSH
25731: LD_INT 1
25733: PPUSH
25734: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25738: LD_INT 3
25740: PPUSH
25741: LD_VAR 0 3
25745: PPUSH
25746: LD_INT 1
25748: PPUSH
25749: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25753: LD_INT 4
25755: PPUSH
25756: LD_VAR 0 3
25760: PPUSH
25761: LD_INT 1
25763: PPUSH
25764: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25768: LD_INT 5
25770: PPUSH
25771: LD_VAR 0 3
25775: PPUSH
25776: LD_INT 1
25778: PPUSH
25779: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25783: LD_INT 8
25785: PPUSH
25786: LD_VAR 0 3
25790: PPUSH
25791: LD_INT 1
25793: PPUSH
25794: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25798: LD_INT 66
25800: PPUSH
25801: LD_VAR 0 3
25805: PPUSH
25806: LD_INT 1
25808: PPUSH
25809: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25813: LD_INT 67
25815: PPUSH
25816: LD_VAR 0 3
25820: PPUSH
25821: LD_INT 1
25823: PPUSH
25824: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
25828: LD_INT 21
25830: PPUSH
25831: LD_VAR 0 3
25835: PPUSH
25836: LD_INT 1
25838: PPUSH
25839: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
25843: LD_INT 22
25845: PPUSH
25846: LD_VAR 0 3
25850: PPUSH
25851: LD_INT 1
25853: PPUSH
25854: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
25858: LD_INT 19
25860: PPUSH
25861: LD_VAR 0 3
25865: PPUSH
25866: LD_INT 1
25868: PPUSH
25869: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
25873: LD_INT 26
25875: PPUSH
25876: LD_VAR 0 3
25880: PPUSH
25881: LD_INT 1
25883: PPUSH
25884: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
25888: LD_INT 54
25890: PPUSH
25891: LD_VAR 0 3
25895: PPUSH
25896: LD_INT 1
25898: PPUSH
25899: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
25903: LD_INT 55
25905: PPUSH
25906: LD_VAR 0 3
25910: PPUSH
25911: LD_INT 1
25913: PPUSH
25914: CALL_OW 322
// for i = 0 to 39 do
25918: LD_ADDR_VAR 0 4
25922: PUSH
25923: DOUBLE
25924: LD_INT 0
25926: DEC
25927: ST_TO_ADDR
25928: LD_INT 39
25930: PUSH
25931: FOR_TO
25932: IFFALSE 25953
// SetRestrict ( i , side , true ) ;
25934: LD_VAR 0 4
25938: PPUSH
25939: LD_VAR 0 3
25943: PPUSH
25944: LD_INT 1
25946: PPUSH
25947: CALL_OW 324
25951: GO 25931
25953: POP
25954: POP
// end ; else
25955: GO 26032
25957: POP
// begin for i = 1 to 73 do
25958: LD_ADDR_VAR 0 4
25962: PUSH
25963: DOUBLE
25964: LD_INT 1
25966: DEC
25967: ST_TO_ADDR
25968: LD_INT 73
25970: PUSH
25971: FOR_TO
25972: IFFALSE 25993
// SetTech ( i , side , state_enabled ) ;
25974: LD_VAR 0 4
25978: PPUSH
25979: LD_VAR 0 3
25983: PPUSH
25984: LD_INT 1
25986: PPUSH
25987: CALL_OW 322
25991: GO 25971
25993: POP
25994: POP
// for i = 0 to 39 do
25995: LD_ADDR_VAR 0 4
25999: PUSH
26000: DOUBLE
26001: LD_INT 0
26003: DEC
26004: ST_TO_ADDR
26005: LD_INT 39
26007: PUSH
26008: FOR_TO
26009: IFFALSE 26030
// SetRestrict ( i , side , true ) ;
26011: LD_VAR 0 4
26015: PPUSH
26016: LD_VAR 0 3
26020: PPUSH
26021: LD_INT 1
26023: PPUSH
26024: CALL_OW 324
26028: GO 26008
26030: POP
26031: POP
// end ; end ; end ;
26032: GO 22037
26034: POP
26035: POP
// end ;
26036: LD_VAR 0 2
26040: RET
