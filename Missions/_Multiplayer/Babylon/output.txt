// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export Position_Sides ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 48
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 3 ;
 151: LD_ADDR_EXP 48
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// for i := 1 to 8 do
 356: LD_ADDR_VAR 0 2
 360: PUSH
 361: DOUBLE
 362: LD_INT 1
 364: DEC
 365: ST_TO_ADDR
 366: LD_INT 8
 368: PUSH
 369: FOR_TO
 370: IFFALSE 457
// if Multiplayer_GetPlayerIsSpec ( i ) then
 372: LD_VAR 0 2
 376: PPUSH
 377: CALL_OW 530
 381: IFFALSE 455
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 383: LD_ADDR_EXP 23
 387: PUSH
 388: LD_EXP 23
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: LD_INT 0
 400: PPUSH
 401: CALL_OW 1
 405: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 406: LD_ADDR_EXP 22
 410: PUSH
 411: LD_EXP 22
 415: PPUSH
 416: LD_EXP 21
 420: PUSH
 421: LD_VAR 0 2
 425: ARRAY
 426: PPUSH
 427: LD_EXP 22
 431: PUSH
 432: LD_EXP 21
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: ARRAY
 443: PUSH
 444: LD_VAR 0 2
 448: DIFF
 449: PPUSH
 450: CALL_OW 1
 454: ST_TO_ADDR
// end ;
 455: GO 369
 457: POP
 458: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 459: LD_ADDR_EXP 29
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// for i := 1 to 8 do
 482: LD_ADDR_VAR 0 2
 486: PUSH
 487: DOUBLE
 488: LD_INT 1
 490: DEC
 491: ST_TO_ADDR
 492: LD_INT 8
 494: PUSH
 495: FOR_TO
 496: IFFALSE 543
// if Side_Positions [ i ] then
 498: LD_EXP 23
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: IFFALSE 541
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 510: LD_ADDR_EXP 29
 514: PUSH
 515: LD_EXP 29
 519: PPUSH
 520: LD_EXP 23
 524: PUSH
 525: LD_VAR 0 2
 529: ARRAY
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: CALL_OW 1
 540: ST_TO_ADDR
 541: GO 495
 543: POP
 544: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_EXP 21
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: EMPTY
 559: LIST
 560: DIFF
 561: PUSH
 562: LD_INT 1
 564: GREATER
 565: ST_TO_ADDR
// if Multiplayer then
 566: LD_OWVAR 4
 570: IFFALSE 842
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 572: LD_ADDR_EXP 50
 576: PUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 426
 584: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 585: LD_ADDR_EXP 51
 589: PUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 426
 597: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 598: LD_ADDR_EXP 52
 602: PUSH
 603: LD_INT 2
 605: PPUSH
 606: CALL_OW 426
 610: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 611: LD_ADDR_EXP 53
 615: PUSH
 616: LD_INT 3
 618: PPUSH
 619: CALL_OW 426
 623: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 624: LD_ADDR_EXP 54
 628: PUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 426
 636: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 637: LD_ADDR_EXP 55
 641: PUSH
 642: LD_INT 5
 644: PPUSH
 645: CALL_OW 426
 649: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 650: LD_ADDR_EXP 57
 654: PUSH
 655: LD_INT 10
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 663: LD_ADDR_EXP 58
 667: PUSH
 668: LD_INT 11
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 676: LD_ADDR_EXP 59
 680: PUSH
 681: LD_INT 12
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 689: LD_ADDR_EXP 61
 693: PUSH
 694: LD_INT 13
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 702: LD_ADDR_EXP 60
 706: PUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 715: LD_ADDR_EXP 62
 719: PUSH
 720: LD_INT 15
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 728: LD_ADDR_EXP 1
 732: PUSH
 733: LD_INT 6
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 741: LD_ADDR_EXP 2
 745: PUSH
 746: LD_INT 7
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 754: LD_ADDR_EXP 4
 758: PUSH
 759: LD_INT 8
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 767: LD_ADDR_EXP 3
 771: PUSH
 772: LD_INT 9
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 780: LD_ADDR_EXP 5
 784: PUSH
 785: LD_INT 16
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 17
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 806: LD_ADDR_EXP 63
 810: PUSH
 811: LD_INT 20
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 819: LD_ADDR_VAR 0 3
 823: PUSH
 824: LD_INT 22
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_win_rules = 0 ;
 832: LD_ADDR_EXP 19
 836: PUSH
 837: LD_INT 0
 839: ST_TO_ADDR
// end else
 840: GO 1014
// begin Randomize ;
 842: CALL_OW 10
// def_base_level := 2 ;
 846: LD_ADDR_EXP 50
 850: PUSH
 851: LD_INT 2
 853: ST_TO_ADDR
// def_amount_of_people := 1 ;
 854: LD_ADDR_EXP 51
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// def_skill_level := 1 ;
 862: LD_ADDR_EXP 52
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// def_starting_resources := 2 ;
 870: LD_ADDR_EXP 53
 874: PUSH
 875: LD_INT 2
 877: ST_TO_ADDR
// def_shipments_density := 1 ;
 878: LD_ADDR_EXP 54
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 886: LD_ADDR_EXP 55
 890: PUSH
 891: LD_INT 0
 893: ST_TO_ADDR
// def_shared_vision := 1 ;
 894: LD_ADDR_EXP 57
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// def_morale_flags := 1 ;
 902: LD_ADDR_EXP 58
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// def_siberite_detection := 1 ;
 910: LD_ADDR_EXP 59
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 918: LD_ADDR_EXP 61
 922: PUSH
 923: LD_INT 3
 925: ST_TO_ADDR
// def_people_respawning := 2 ;
 926: LD_ADDR_EXP 60
 930: PUSH
 931: LD_INT 2
 933: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 934: LD_ADDR_EXP 62
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// def_artefact_one := 0 ;
 942: LD_ADDR_EXP 1
 946: PUSH
 947: LD_INT 0
 949: ST_TO_ADDR
// def_artefact_two := 0 ;
 950: LD_ADDR_EXP 2
 954: PUSH
 955: LD_INT 0
 957: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 958: LD_ADDR_EXP 4
 962: PUSH
 963: LD_INT 2
 965: ST_TO_ADDR
// def_artefact_three := 0 ;
 966: LD_ADDR_EXP 3
 970: PUSH
 971: LD_INT 0
 973: ST_TO_ADDR
// def_kings_age := 1 ;
 974: LD_ADDR_EXP 5
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// def_public_score := 0 ;
 982: LD_ADDR_EXP 6
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// def_builduptime := 1 ;
 990: LD_ADDR_EXP 63
 994: PUSH
 995: LD_INT 1
 997: ST_TO_ADDR
// tech_level = 4 ;
 998: LD_ADDR_VAR 0 3
1002: PUSH
1003: LD_INT 4
1005: ST_TO_ADDR
// def_win_rules = 0 ;
1006: LD_ADDR_EXP 19
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// end ; InitGameRules ;
1014: CALL 14220 0 0
// if def_game_rules = 0 then
1018: LD_EXP 49
1022: PUSH
1023: LD_INT 0
1025: EQUAL
1026: IFFALSE 1053
// begin if isSGUI then
1028: LD_OWVAR 83
1032: IFFALSE 1040
// setMpTechs ( ) else
1034: CALL 22012 0 0
1038: GO 1053
// begin SetMpTechLevel ( tech_level + 1 ) ;
1040: LD_VAR 0 3
1044: PUSH
1045: LD_INT 1
1047: PLUS
1048: PPUSH
1049: CALL 22159 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1053: LD_ADDR_EXP 7
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 50
1080: PUSH
1081: LD_INT 1
1083: PLUS
1084: ARRAY
1085: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
1086: LD_ADDR_EXP 8
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 2
1099: PUSH
1100: LD_INT 3
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_EXP 50
1113: PUSH
1114: LD_INT 1
1116: PLUS
1117: ARRAY
1118: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1119: LD_ADDR_EXP 9
1123: PUSH
1124: LD_EXP 51
1128: PUSH
1129: LD_INT 4
1131: PLUS
1132: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: LD_INT 4
1146: PUSH
1147: LD_INT 5
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: PUSH
1156: LD_EXP 52
1160: PUSH
1161: LD_INT 1
1163: PLUS
1164: ARRAY
1165: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1166: LD_ADDR_EXP 12
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: LD_INT 0
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 30
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: LD_INT 0
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 50
1201: PUSH
1202: LD_INT 20
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 80
1215: PUSH
1216: LD_INT 40
1218: PUSH
1219: LD_INT 20
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: LD_EXP 53
1237: PUSH
1238: LD_INT 1
1240: PLUS
1241: ARRAY
1242: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1243: LD_ADDR_EXP 11
1247: PUSH
1248: LD_INT 10
1250: PUSH
1251: EMPTY
1252: LIST
1253: PUSH
1254: LD_INT 7
1256: PUSH
1257: LD_INT 14
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 6
1266: PUSH
1267: LD_INT 12
1269: PUSH
1270: LD_INT 18
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 5
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: LD_INT 15
1286: PUSH
1287: LD_INT 20
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_EXP 53
1306: PUSH
1307: LD_INT 1
1309: PLUS
1310: ARRAY
1311: ST_TO_ADDR
// shipments_density := 360 - ( def_shipments_density * 2 ) ;
1312: LD_ADDR_EXP 13
1316: PUSH
1317: LD_INT 360
1319: PUSH
1320: LD_EXP 54
1324: PUSH
1325: LD_INT 2
1327: MUL
1328: MINUS
1329: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1330: LD_ADDR_EXP 15
1334: PUSH
1335: LD_INT 0
1337: PUSH
1338: LD_INT 1
1340: PUSH
1341: LD_INT 2
1343: PUSH
1344: LD_INT 3
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: PUSH
1353: LD_EXP 61
1357: PUSH
1358: LD_INT 1
1360: PLUS
1361: ARRAY
1362: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1363: LD_ADDR_EXP 16
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 12600
1373: PUSH
1374: LD_INT 2100
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_EXP 60
1386: PUSH
1387: LD_INT 1
1389: PLUS
1390: ARRAY
1391: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1392: LD_ADDR_EXP 17
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 21000
1402: PUSH
1403: LD_INT 4200
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 60
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_INT 1
1428: NEG
1429: PUSH
1430: LD_INT 350
1432: PUSH
1433: LD_INT 700
1435: PUSH
1436: LD_INT 1400
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_EXP 58
1453: PUSH
1454: LD_INT 1
1456: PLUS
1457: ARRAY
1458: ST_TO_ADDR
// battle_flags_id := [ ] ;
1459: LD_ADDR_EXP 34
1463: PUSH
1464: EMPTY
1465: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1466: LD_ADDR_EXP 18
1470: PUSH
1471: LD_INT 0
1473: PUSH
1474: LD_INT 1
1476: PUSH
1477: LD_INT 63000
1479: PUSH
1480: LD_INT 126000
1482: PUSH
1483: LD_INT 189000
1485: PUSH
1486: LD_INT 252000
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_EXP 62
1501: PUSH
1502: LD_INT 1
1504: PLUS
1505: ARRAY
1506: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1507: LD_ADDR_EXP 20
1511: PUSH
1512: LD_INT 500
1514: PUSH
1515: LD_INT 1000
1517: PUSH
1518: LD_INT 1500
1520: PUSH
1521: LD_INT 2000
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 5
1534: PUSH
1535: LD_INT 1
1537: PLUS
1538: ARRAY
1539: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1540: LD_ADDR_EXP 47
1544: PUSH
1545: LD_INT 21
1547: PUSH
1548: LD_INT 23
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 22
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 1
1567: RET
// function init_map ; var i ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1572: LD_ADDR_EXP 33
1576: PUSH
1577: LD_INT 43
1579: PUSH
1580: LD_INT 9
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 123
1589: PUSH
1590: LD_INT 10
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 113
1599: PUSH
1600: LD_INT 155
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 186
1609: PUSH
1610: LD_INT 133
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1623: LD_ADDR_EXP 30
1627: PUSH
1628: LD_INT 18
1630: PUSH
1631: LD_INT 17
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 156
1644: PUSH
1645: LD_INT 20
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 83
1658: PUSH
1659: LD_INT 140
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 216
1672: PUSH
1673: LD_INT 143
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: ST_TO_ADDR
// for i in depot_def do
1690: LD_ADDR_VAR 0 2
1694: PUSH
1695: LD_EXP 30
1699: PUSH
1700: FOR_IN
1701: IFFALSE 1775
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1703: LD_ADDR_EXP 32
1707: PUSH
1708: LD_EXP 32
1712: PUSH
1713: LD_VAR 0 2
1717: PUSH
1718: LD_INT 1
1720: ARRAY
1721: PPUSH
1722: LD_VAR 0 2
1726: PUSH
1727: LD_INT 3
1729: ARRAY
1730: PPUSH
1731: LD_INT 6
1733: PPUSH
1734: CALL_OW 272
1738: PUSH
1739: LD_VAR 0 2
1743: PUSH
1744: LD_INT 2
1746: ARRAY
1747: PPUSH
1748: LD_VAR 0 2
1752: PUSH
1753: LD_INT 3
1755: ARRAY
1756: PPUSH
1757: LD_INT 6
1759: PPUSH
1760: CALL_OW 273
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: EMPTY
1770: LIST
1771: ADD
1772: ST_TO_ADDR
1773: GO 1700
1775: POP
1776: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1777: LD_ADDR_EXP 31
1781: PUSH
1782: LD_INT 30
1784: PUSH
1785: LD_INT 36
1787: PUSH
1788: LD_INT 0
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 44
1798: PUSH
1799: LD_INT 21
1801: PUSH
1802: LD_INT 4
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 43
1812: PUSH
1813: LD_INT 33
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 165
1831: PUSH
1832: LD_INT 34
1834: PUSH
1835: LD_INT 0
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 137
1845: PUSH
1846: LD_INT 18
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 153
1859: PUSH
1860: LD_INT 37
1862: PUSH
1863: LD_INT 0
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 86
1878: PUSH
1879: LD_INT 120
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 105
1892: PUSH
1893: LD_INT 147
1895: PUSH
1896: LD_INT 4
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 68
1906: PUSH
1907: LD_INT 118
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 199
1925: PUSH
1926: LD_INT 144
1928: PUSH
1929: LD_INT 1
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 207
1939: PUSH
1940: LD_INT 119
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 195
1953: PUSH
1954: LD_INT 118
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: ST_TO_ADDR
// if not def_extra_oil_deposits then
1976: LD_EXP 55
1980: NOT
1981: IFFALSE 2022
// for i in extra_oil_deposits_locations do
1983: LD_ADDR_VAR 0 2
1987: PUSH
1988: LD_EXP 33
1992: PUSH
1993: FOR_IN
1994: IFFALSE 2020
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1996: LD_VAR 0 2
2000: PUSH
2001: LD_INT 1
2003: ARRAY
2004: PPUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_INT 2
2012: ARRAY
2013: PPUSH
2014: CALL_OW 63
2018: GO 1993
2020: POP
2021: POP
// end ;
2022: LD_VAR 0 1
2026: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2027: LD_INT 0
2029: PPUSH
2030: PPUSH
2031: PPUSH
// if not Team_Game then
2032: LD_EXP 25
2036: NOT
2037: IFFALSE 2135
// begin for i = 1 to 8 do
2039: LD_ADDR_VAR 0 2
2043: PUSH
2044: DOUBLE
2045: LD_INT 1
2047: DEC
2048: ST_TO_ADDR
2049: LD_INT 8
2051: PUSH
2052: FOR_TO
2053: IFFALSE 2131
// for j = 1 to 8 do
2055: LD_ADDR_VAR 0 3
2059: PUSH
2060: DOUBLE
2061: LD_INT 1
2063: DEC
2064: ST_TO_ADDR
2065: LD_INT 8
2067: PUSH
2068: FOR_TO
2069: IFFALSE 2127
// if i <> j then
2071: LD_VAR 0 2
2075: PUSH
2076: LD_VAR 0 3
2080: NONEQUAL
2081: IFFALSE 2105
// SetAttitude ( i , j , att_neutral , true ) else
2083: LD_VAR 0 2
2087: PPUSH
2088: LD_VAR 0 3
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 80
2103: GO 2125
// SetAttitude ( i , j , att_friend , true ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 80
2125: GO 2068
2127: POP
2128: POP
2129: GO 2052
2131: POP
2132: POP
// end else
2133: GO 2310
// begin if def_shared_vision then
2135: LD_EXP 57
2139: IFFALSE 2204
// begin for i in Teams do
2141: LD_ADDR_VAR 0 2
2145: PUSH
2146: LD_EXP 22
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2202
// for j = 2 to i do
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: DOUBLE
2160: LD_INT 2
2162: DEC
2163: ST_TO_ADDR
2164: LD_VAR 0 2
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2198
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2172: LD_VAR 0 2
2176: PUSH
2177: LD_VAR 0 3
2181: ARRAY
2182: PPUSH
2183: LD_VAR 0 2
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: CALL_OW 343
2196: GO 2169
2198: POP
2199: POP
2200: GO 2151
2202: POP
2203: POP
// end ; for i = 1 to 8 do
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: DOUBLE
2210: LD_INT 1
2212: DEC
2213: ST_TO_ADDR
2214: LD_INT 8
2216: PUSH
2217: FOR_TO
2218: IFFALSE 2308
// for j = 1 to 8 do
2220: LD_ADDR_VAR 0 3
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2304
// if Side_Teams [ i ] = Side_Teams [ j ] then
2236: LD_EXP 21
2240: PUSH
2241: LD_VAR 0 2
2245: ARRAY
2246: PUSH
2247: LD_EXP 21
2251: PUSH
2252: LD_VAR 0 3
2256: ARRAY
2257: EQUAL
2258: IFFALSE 2282
// SetAttitude ( i , j , att_friend , true ) else
2260: LD_VAR 0 2
2264: PPUSH
2265: LD_VAR 0 3
2269: PPUSH
2270: LD_INT 1
2272: PPUSH
2273: LD_INT 1
2275: PPUSH
2276: CALL_OW 80
2280: GO 2302
// SetAttitude ( i , j , att_enemy , true ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 3
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL_OW 80
2302: GO 2233
2304: POP
2305: POP
2306: GO 2217
2308: POP
2309: POP
// end ; end ;
2310: LD_VAR 0 1
2314: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2315: LD_INT 0
2317: PPUSH
2318: PPUSH
2319: PPUSH
2320: PPUSH
// result := [ ] ;
2321: LD_ADDR_VAR 0 7
2325: PUSH
2326: EMPTY
2327: ST_TO_ADDR
// for i := 1 to count do
2328: LD_ADDR_VAR 0 8
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_VAR 0 1
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2762
// begin uc_direction := Rand ( 0 , 5 ) ;
2346: LD_ADDR_OWVAR 24
2350: PUSH
2351: LD_INT 0
2353: PPUSH
2354: LD_INT 5
2356: PPUSH
2357: CALL_OW 12
2361: ST_TO_ADDR
// if commander then
2362: LD_LOC 1
2366: IFFALSE 2475
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2368: LD_ADDR_OWVAR 26
2372: PUSH
2373: LD_OWVAR 19
2377: PUSH
2378: LD_OWVAR 20
2382: ARRAY
2383: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2384: LD_INT 1
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: CALL_OW 12
2394: PPUSH
2395: LD_VAR 0 2
2399: PPUSH
2400: LD_EXP 10
2404: PUSH
2405: LD_INT 2
2407: PLUS
2408: PPUSH
2409: CALL_OW 380
// hc_importance := 105 ;
2413: LD_ADDR_OWVAR 32
2417: PUSH
2418: LD_INT 105
2420: ST_TO_ADDR
// commander := false ;
2421: LD_ADDR_LOC 1
2425: PUSH
2426: LD_INT 0
2428: ST_TO_ADDR
// if Multiplayer then
2429: LD_OWVAR 4
2433: IFFALSE 2473
// begin hc_gallery := MULTIAVATARS ;
2435: LD_ADDR_OWVAR 33
2439: PUSH
2440: LD_STRING MULTIAVATARS
2442: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2443: LD_ADDR_OWVAR 34
2447: PUSH
2448: LD_OWVAR 20
2452: PPUSH
2453: CALL_OW 525
2457: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2458: LD_ADDR_OWVAR 27
2462: PUSH
2463: LD_OWVAR 20
2467: PPUSH
2468: CALL_OW 526
2472: ST_TO_ADDR
// end ; end else
2473: GO 2538
// begin hc_name :=  ;
2475: LD_ADDR_OWVAR 26
2479: PUSH
2480: LD_STRING 
2482: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2483: LD_INT 1
2485: PPUSH
2486: LD_INT 2
2488: PPUSH
2489: CALL_OW 12
2493: PPUSH
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_EXP 10
2503: PPUSH
2504: CALL_OW 380
// hc_importance := 0 ;
2508: LD_ADDR_OWVAR 32
2512: PUSH
2513: LD_INT 0
2515: ST_TO_ADDR
// if Multiplayer then
2516: LD_OWVAR 4
2520: IFFALSE 2538
// begin hc_gallery :=  ;
2522: LD_ADDR_OWVAR 33
2526: PUSH
2527: LD_STRING 
2529: ST_TO_ADDR
// hc_face_number := 0 ;
2530: LD_ADDR_OWVAR 34
2534: PUSH
2535: LD_INT 0
2537: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2538: LD_ADDR_VAR 0 10
2542: PUSH
2543: CALL_OW 44
2547: ST_TO_ADDR
// if global_defined then
2548: LD_LOC 3
2552: IFFALSE 2692
// begin if ( cl = class_soldier ) then
2554: LD_VAR 0 2
2558: PUSH
2559: LD_INT 1
2561: EQUAL
2562: IFFALSE 2582
// j := i + soldiers_created else
2564: LD_ADDR_VAR 0 9
2568: PUSH
2569: LD_VAR 0 8
2573: PUSH
2574: LD_LOC 4
2578: PLUS
2579: ST_TO_ADDR
2580: GO 2592
// j := i ;
2582: LD_ADDR_VAR 0 9
2586: PUSH
2587: LD_VAR 0 8
2591: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2592: LD_LOC 2
2596: PUSH
2597: LD_VAR 0 2
2601: ARRAY
2602: PUSH
2603: LD_VAR 0 9
2607: ARRAY
2608: PPUSH
2609: LD_VAR 0 10
2613: PPUSH
2614: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2618: LD_VAR 0 10
2622: PPUSH
2623: LD_INT 2
2625: PPUSH
2626: LD_LOC 2
2630: PUSH
2631: LD_VAR 0 2
2635: ARRAY
2636: PUSH
2637: LD_VAR 0 9
2641: ARRAY
2642: PPUSH
2643: LD_INT 2
2645: PPUSH
2646: CALL_OW 260
2650: PPUSH
2651: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2655: LD_VAR 0 10
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: LD_LOC 2
2667: PUSH
2668: LD_VAR 0 2
2672: ARRAY
2673: PUSH
2674: LD_VAR 0 9
2678: ARRAY
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL_OW 260
2687: PPUSH
2688: CALL_OW 239
// end ; if building then
2692: LD_VAR 0 6
2696: IFFALSE 2714
// PlaceHumanInUnit ( un , building ) else
2698: LD_VAR 0 10
2702: PPUSH
2703: LD_VAR 0 6
2707: PPUSH
2708: CALL_OW 52
2712: GO 2741
// PlaceUnitXYR ( un , x , y , r , false ) ;
2714: LD_VAR 0 10
2718: PPUSH
2719: LD_VAR 0 3
2723: PPUSH
2724: LD_VAR 0 4
2728: PPUSH
2729: LD_VAR 0 5
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL_OW 50
// result := result ^ [ un ] ;
2741: LD_ADDR_VAR 0 7
2745: PUSH
2746: LD_VAR 0 7
2750: PUSH
2751: LD_VAR 0 10
2755: PUSH
2756: EMPTY
2757: LIST
2758: ADD
2759: ST_TO_ADDR
// end ;
2760: GO 2343
2762: POP
2763: POP
// if not global_defined then
2764: LD_LOC 3
2768: NOT
2769: IFFALSE 2847
// if ( global_units >= cl ) then
2771: LD_LOC 2
2775: PUSH
2776: LD_VAR 0 2
2780: GREATEREQUAL
2781: IFFALSE 2822
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2783: LD_ADDR_LOC 2
2787: PUSH
2788: LD_LOC 2
2792: PPUSH
2793: LD_VAR 0 2
2797: PPUSH
2798: LD_LOC 2
2802: PUSH
2803: LD_VAR 0 2
2807: ARRAY
2808: PUSH
2809: LD_VAR 0 7
2813: ADD
2814: PPUSH
2815: CALL_OW 1
2819: ST_TO_ADDR
2820: GO 2847
// global_units := Replace ( global_units , cl , result ) ;
2822: LD_ADDR_LOC 2
2826: PUSH
2827: LD_LOC 2
2831: PPUSH
2832: LD_VAR 0 2
2836: PPUSH
2837: LD_VAR 0 7
2841: PPUSH
2842: CALL_OW 1
2846: ST_TO_ADDR
// if commander then
2847: LD_LOC 1
2851: IFFALSE 2898
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2853: LD_ADDR_EXP 35
2857: PUSH
2858: LD_EXP 35
2862: PPUSH
2863: LD_OWVAR 20
2867: PPUSH
2868: LD_EXP 35
2872: PUSH
2873: LD_OWVAR 20
2877: ARRAY
2878: PUSH
2879: LD_VAR 0 10
2883: ADD
2884: PPUSH
2885: CALL_OW 1
2889: ST_TO_ADDR
// commander := false ;
2890: LD_ADDR_LOC 1
2894: PUSH
2895: LD_INT 0
2897: ST_TO_ADDR
// end ; end ;
2898: LD_VAR 0 7
2902: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2903: LD_INT 0
2905: PPUSH
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
2913: PPUSH
// pos := Side_Positions [ side ] ;
2914: LD_ADDR_VAR 0 3
2918: PUSH
2919: LD_EXP 23
2923: PUSH
2924: LD_VAR 0 1
2928: ARRAY
2929: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2930: LD_ADDR_OWVAR 21
2934: PUSH
2935: LD_EXP 24
2939: PUSH
2940: LD_VAR 0 1
2944: ARRAY
2945: ST_TO_ADDR
// uc_side := side ;
2946: LD_ADDR_OWVAR 20
2950: PUSH
2951: LD_VAR 0 1
2955: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2956: LD_ADDR_VAR 0 4
2960: PUSH
2961: LD_EXP 30
2965: PUSH
2966: LD_VAR 0 3
2970: ARRAY
2971: PUSH
2972: LD_INT 1
2974: ARRAY
2975: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2976: LD_ADDR_VAR 0 5
2980: PUSH
2981: LD_EXP 30
2985: PUSH
2986: LD_VAR 0 3
2990: ARRAY
2991: PUSH
2992: LD_INT 2
2994: ARRAY
2995: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2996: LD_ADDR_VAR 0 6
3000: PUSH
3001: LD_EXP 30
3005: PUSH
3006: LD_VAR 0 3
3010: ARRAY
3011: PUSH
3012: LD_INT 3
3014: ARRAY
3015: ST_TO_ADDR
// if is_depot then
3016: LD_EXP 7
3020: IFFALSE 3153
// begin bc_type = b_depot ;
3022: LD_ADDR_OWVAR 42
3026: PUSH
3027: LD_INT 0
3029: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3030: LD_ADDR_VAR 0 10
3034: PUSH
3035: LD_VAR 0 4
3039: PPUSH
3040: LD_VAR 0 5
3044: PPUSH
3045: LD_VAR 0 6
3049: PPUSH
3050: CALL_OW 47
3054: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3055: LD_VAR 0 10
3059: PPUSH
3060: LD_STRING @
3062: PUSH
3063: LD_VAR 0 1
3067: STR
3068: PPUSH
3069: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3073: LD_VAR 0 10
3077: PPUSH
3078: CALL_OW 274
3082: PPUSH
3083: LD_INT 1
3085: PPUSH
3086: LD_EXP 12
3090: PUSH
3091: LD_INT 1
3093: ARRAY
3094: PPUSH
3095: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3099: LD_VAR 0 10
3103: PPUSH
3104: CALL_OW 274
3108: PPUSH
3109: LD_INT 2
3111: PPUSH
3112: LD_EXP 12
3116: PUSH
3117: LD_INT 2
3119: ARRAY
3120: PPUSH
3121: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3125: LD_VAR 0 10
3129: PPUSH
3130: CALL_OW 274
3134: PPUSH
3135: LD_INT 3
3137: PPUSH
3138: LD_EXP 12
3142: PUSH
3143: LD_INT 3
3145: ARRAY
3146: PPUSH
3147: CALL_OW 277
// end else
3151: GO 3297
// begin for i := 1 to 3 do
3153: LD_ADDR_VAR 0 7
3157: PUSH
3158: DOUBLE
3159: LD_INT 1
3161: DEC
3162: ST_TO_ADDR
3163: LD_INT 3
3165: PUSH
3166: FOR_TO
3167: IFFALSE 3295
// begin r := starting_resources [ i ] ;
3169: LD_ADDR_VAR 0 8
3173: PUSH
3174: LD_EXP 12
3178: PUSH
3179: LD_VAR 0 7
3183: ARRAY
3184: ST_TO_ADDR
// while r >= 10 do
3185: LD_VAR 0 8
3189: PUSH
3190: LD_INT 10
3192: GREATEREQUAL
3193: IFFALSE 3293
// if r > 50 then
3195: LD_VAR 0 8
3199: PUSH
3200: LD_INT 50
3202: GREATER
3203: IFFALSE 3249
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3205: LD_VAR 0 7
3209: PPUSH
3210: LD_INT 5
3212: PPUSH
3213: LD_VAR 0 4
3217: PPUSH
3218: LD_VAR 0 5
3222: PPUSH
3223: LD_INT 4
3225: PPUSH
3226: LD_INT 0
3228: PPUSH
3229: CALL_OW 60
// r := r - 50 ;
3233: LD_ADDR_VAR 0 8
3237: PUSH
3238: LD_VAR 0 8
3242: PUSH
3243: LD_INT 50
3245: MINUS
3246: ST_TO_ADDR
// end else
3247: GO 3291
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3249: LD_VAR 0 7
3253: PPUSH
3254: LD_VAR 0 8
3258: PUSH
3259: LD_INT 10
3261: DIV
3262: PPUSH
3263: LD_VAR 0 4
3267: PPUSH
3268: LD_VAR 0 5
3272: PPUSH
3273: LD_INT 4
3275: PPUSH
3276: LD_INT 0
3278: PPUSH
3279: CALL_OW 60
// r := 0 ;
3283: LD_ADDR_VAR 0 8
3287: PUSH
3288: LD_INT 0
3290: ST_TO_ADDR
// end ;
3291: GO 3185
// end ;
3293: GO 3166
3295: POP
3296: POP
// end ; for r in starting_crates do
3297: LD_ADDR_VAR 0 8
3301: PUSH
3302: LD_EXP 11
3306: PUSH
3307: FOR_IN
3308: IFFALSE 3340
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3310: LD_INT 1
3312: PPUSH
3313: LD_INT 5
3315: PPUSH
3316: LD_VAR 0 4
3320: PPUSH
3321: LD_VAR 0 5
3325: PPUSH
3326: LD_VAR 0 8
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 60
3338: GO 3307
3340: POP
3341: POP
// if def_morale_flags then
3342: LD_EXP 58
3346: IFFALSE 3485
// begin x := start_def [ pos ] [ 1 ] ;
3348: LD_ADDR_VAR 0 4
3352: PUSH
3353: LD_EXP 32
3357: PUSH
3358: LD_VAR 0 3
3362: ARRAY
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3368: LD_ADDR_VAR 0 5
3372: PUSH
3373: LD_EXP 32
3377: PUSH
3378: LD_VAR 0 3
3382: ARRAY
3383: PUSH
3384: LD_INT 2
3386: ARRAY
3387: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3388: LD_VAR 0 4
3392: PPUSH
3393: LD_VAR 0 5
3397: PPUSH
3398: LD_INT 12
3400: PPUSH
3401: LD_INT 2
3403: PPUSH
3404: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3408: LD_ADDR_EXP 34
3412: PUSH
3413: LD_EXP 34
3417: PUSH
3418: LD_VAR 0 1
3422: PPUSH
3423: LD_VAR 0 4
3427: PPUSH
3428: LD_VAR 0 5
3432: PPUSH
3433: LD_INT 1
3435: PUSH
3436: LD_INT 100
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 50
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: PUSH
3453: LD_INT 3
3455: PUSH
3456: LD_INT 20
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: PUSH
3463: LD_INT 20
3465: PUSH
3466: LD_INT 100
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: LIST
3477: LIST
3478: PPUSH
3479: CALL_OW 418
3483: ADD
3484: ST_TO_ADDR
// end ; commander := true ;
3485: LD_ADDR_LOC 1
3489: PUSH
3490: LD_INT 1
3492: ST_TO_ADDR
// soldiers_created := 0 ;
3493: LD_ADDR_LOC 4
3497: PUSH
3498: LD_INT 0
3500: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3501: LD_ADDR_VAR 0 7
3505: PUSH
3506: DOUBLE
3507: LD_INT 1
3509: DEC
3510: ST_TO_ADDR
3511: LD_EXP 8
3515: PUSH
3516: FOR_TO
3517: IFFALSE 3670
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3519: LD_ADDR_VAR 0 4
3523: PUSH
3524: LD_EXP 31
3528: PUSH
3529: LD_VAR 0 3
3533: ARRAY
3534: PUSH
3535: LD_VAR 0 7
3539: ARRAY
3540: PUSH
3541: LD_INT 1
3543: ARRAY
3544: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3545: LD_ADDR_VAR 0 5
3549: PUSH
3550: LD_EXP 31
3554: PUSH
3555: LD_VAR 0 3
3559: ARRAY
3560: PUSH
3561: LD_VAR 0 7
3565: ARRAY
3566: PUSH
3567: LD_INT 2
3569: ARRAY
3570: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3571: LD_ADDR_VAR 0 6
3575: PUSH
3576: LD_EXP 31
3580: PUSH
3581: LD_VAR 0 3
3585: ARRAY
3586: PUSH
3587: LD_VAR 0 7
3591: ARRAY
3592: PUSH
3593: LD_INT 3
3595: ARRAY
3596: ST_TO_ADDR
// bc_type := b_breastwork ;
3597: LD_ADDR_OWVAR 42
3601: PUSH
3602: LD_INT 31
3604: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3605: LD_ADDR_VAR 0 9
3609: PUSH
3610: LD_VAR 0 4
3614: PPUSH
3615: LD_VAR 0 5
3619: PPUSH
3620: LD_VAR 0 6
3624: PPUSH
3625: CALL_OW 47
3629: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3630: LD_INT 1
3632: PPUSH
3633: LD_INT 1
3635: PPUSH
3636: LD_INT 0
3638: PPUSH
3639: LD_INT 0
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: LD_VAR 0 9
3649: PPUSH
3650: CALL 2315 0 6
// soldiers_created := soldiers_created + 1 ;
3654: LD_ADDR_LOC 4
3658: PUSH
3659: LD_LOC 4
3663: PUSH
3664: LD_INT 1
3666: PLUS
3667: ST_TO_ADDR
// end ;
3668: GO 3516
3670: POP
3671: POP
// x := start_def [ pos ] [ 1 ] ;
3672: LD_ADDR_VAR 0 4
3676: PUSH
3677: LD_EXP 32
3681: PUSH
3682: LD_VAR 0 3
3686: ARRAY
3687: PUSH
3688: LD_INT 1
3690: ARRAY
3691: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3692: LD_ADDR_VAR 0 5
3696: PUSH
3697: LD_EXP 32
3701: PUSH
3702: LD_VAR 0 3
3706: ARRAY
3707: PUSH
3708: LD_INT 2
3710: ARRAY
3711: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3712: LD_LOC 8
3716: PUSH
3717: LD_EXP 8
3721: MINUS
3722: PPUSH
3723: LD_INT 1
3725: PPUSH
3726: LD_VAR 0 4
3730: PPUSH
3731: LD_VAR 0 5
3735: PPUSH
3736: LD_INT 5
3738: PPUSH
3739: LD_INT 0
3741: PPUSH
3742: CALL 2315 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3746: LD_LOC 5
3750: PPUSH
3751: LD_INT 2
3753: PPUSH
3754: LD_VAR 0 4
3758: PPUSH
3759: LD_VAR 0 5
3763: PPUSH
3764: LD_INT 5
3766: PPUSH
3767: LD_INT 0
3769: PPUSH
3770: CALL 2315 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3774: LD_LOC 7
3778: PPUSH
3779: LD_INT 3
3781: PPUSH
3782: LD_VAR 0 4
3786: PPUSH
3787: LD_VAR 0 5
3791: PPUSH
3792: LD_INT 5
3794: PPUSH
3795: LD_INT 0
3797: PPUSH
3798: CALL 2315 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3802: LD_LOC 6
3806: PPUSH
3807: LD_INT 4
3809: PPUSH
3810: LD_VAR 0 4
3814: PPUSH
3815: LD_VAR 0 5
3819: PPUSH
3820: LD_INT 5
3822: PPUSH
3823: LD_INT 0
3825: PPUSH
3826: CALL 2315 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3830: LD_EXP 59
3834: PUSH
3835: LD_INT 20
3837: PPUSH
3838: LD_VAR 0 1
3842: PPUSH
3843: CALL_OW 321
3847: PUSH
3848: LD_INT 1
3850: EQUAL
3851: AND
3852: IFFALSE 3869
// SetTech ( tech_SibDet , side , state_researched ) ;
3854: LD_INT 20
3856: PPUSH
3857: LD_VAR 0 1
3861: PPUSH
3862: LD_INT 2
3864: PPUSH
3865: CALL_OW 322
// if def_siberite_bomb = 1 then
3869: LD_EXP 62
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3911
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3879: LD_INT 25
3881: PPUSH
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 1
3889: PPUSH
3890: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3894: LD_INT 73
3896: PPUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: LD_INT 1
3904: PPUSH
3905: CALL_OW 322
// end else
3909: GO 3941
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3911: LD_INT 25
3913: PPUSH
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 0
3921: PPUSH
3922: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3926: LD_INT 73
3928: PPUSH
3929: LD_VAR 0 1
3933: PPUSH
3934: LD_INT 0
3936: PPUSH
3937: CALL_OW 322
// end ; if Game_Type = 3 then
3941: LD_EXP 48
3945: PUSH
3946: LD_INT 3
3948: EQUAL
3949: IFFALSE 3966
// SetTech ( tech_partinvis , side , state_disabled ) ;
3951: LD_INT 16
3953: PPUSH
3954: LD_VAR 0 1
3958: PPUSH
3959: LD_INT 0
3961: PPUSH
3962: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3966: LD_INT 24
3968: PPUSH
3969: LD_VAR 0 1
3973: PPUSH
3974: LD_INT 1
3976: PPUSH
3977: CALL_OW 322
// global_defined := true ;
3981: LD_ADDR_LOC 3
3985: PUSH
3986: LD_INT 1
3988: ST_TO_ADDR
// end ;
3989: LD_VAR 0 2
3993: RET
// every 0 0$1 do
3994: GO 3996
3996: DISABLE
// if ( def_siberite_bomb > 1 ) then
3997: LD_EXP 62
4001: PUSH
4002: LD_INT 1
4004: GREATER
4005: IFFALSE 4020
// begin wait ( siberite_bomb_Delay ) ;
4007: LD_EXP 18
4011: PPUSH
4012: CALL_OW 67
// EnableSibFiss ;
4016: CALL 4021 0 0
// end ;
4020: END
// function EnableSibFiss ; var i ; begin
4021: LD_INT 0
4023: PPUSH
4024: PPUSH
// for i := 1 to 8 do
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: DOUBLE
4031: LD_INT 1
4033: DEC
4034: ST_TO_ADDR
4035: LD_INT 8
4037: PUSH
4038: FOR_TO
4039: IFFALSE 4085
// if Side_Positions [ i ] then
4041: LD_EXP 23
4045: PUSH
4046: LD_VAR 0 2
4050: ARRAY
4051: IFFALSE 4083
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4053: LD_INT 25
4055: PPUSH
4056: LD_VAR 0 2
4060: PPUSH
4061: LD_INT 1
4063: PPUSH
4064: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4068: LD_INT 73
4070: PPUSH
4071: LD_VAR 0 2
4075: PPUSH
4076: LD_INT 1
4078: PPUSH
4079: CALL_OW 322
// end ;
4083: GO 4038
4085: POP
4086: POP
// end ;
4087: LD_VAR 0 1
4091: RET
// function prepare_sides ; var i ; begin
4092: LD_INT 0
4094: PPUSH
4095: PPUSH
// global_units := [ ] ;
4096: LD_ADDR_LOC 2
4100: PUSH
4101: EMPTY
4102: ST_TO_ADDR
// global_defined := false ;
4103: LD_ADDR_LOC 3
4107: PUSH
4108: LD_INT 0
4110: ST_TO_ADDR
// CountClassMembers ;
4111: CALL 4161 0 0
// for i := 1 to 8 do
4115: LD_ADDR_VAR 0 2
4119: PUSH
4120: DOUBLE
4121: LD_INT 1
4123: DEC
4124: ST_TO_ADDR
4125: LD_INT 8
4127: PUSH
4128: FOR_TO
4129: IFFALSE 4154
// if Side_Positions [ i ] then
4131: LD_EXP 23
4135: PUSH
4136: LD_VAR 0 2
4140: ARRAY
4141: IFFALSE 4152
// prepare_side ( i ) ;
4143: LD_VAR 0 2
4147: PPUSH
4148: CALL 2903 0 1
4152: GO 4128
4154: POP
4155: POP
// end ;
4156: LD_VAR 0 1
4160: RET
// function CountClassMembers ; var Mode ; begin
4161: LD_INT 0
4163: PPUSH
4164: PPUSH
// if No_Mechs then
4165: LD_EXP 64
4169: IFFALSE 4181
// Mode := 2 else
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: LD_INT 2
4178: ST_TO_ADDR
4179: GO 4189
// Mode := 1 ;
4181: LD_ADDR_VAR 0 2
4185: PUSH
4186: LD_INT 1
4188: ST_TO_ADDR
// neng := number_of_people ;
4189: LD_ADDR_LOC 5
4193: PUSH
4194: LD_EXP 9
4198: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4199: LD_ADDR_LOC 8
4203: PUSH
4204: LD_LOC 5
4208: PUSH
4209: LD_INT 4
4211: PUSH
4212: LD_INT 3
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_VAR 0 2
4223: ARRAY
4224: DIV
4225: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4226: LD_LOC 8
4230: PUSH
4231: LD_EXP 8
4235: LESS
4236: IFFALSE 4248
// nsol := number_of_breastworks ;
4238: LD_ADDR_LOC 8
4242: PUSH
4243: LD_EXP 8
4247: ST_TO_ADDR
// neng := neng - nsol ;
4248: LD_ADDR_LOC 5
4252: PUSH
4253: LD_LOC 5
4257: PUSH
4258: LD_LOC 8
4262: MINUS
4263: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4264: LD_ADDR_LOC 6
4268: PUSH
4269: LD_LOC 5
4273: PUSH
4274: LD_INT 3
4276: PUSH
4277: LD_INT 2
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_VAR 0 2
4288: ARRAY
4289: DIV
4290: ST_TO_ADDR
// if ( nsci < 1 ) then
4291: LD_LOC 6
4295: PUSH
4296: LD_INT 1
4298: LESS
4299: IFFALSE 4309
// nsci := 1 ;
4301: LD_ADDR_LOC 6
4305: PUSH
4306: LD_INT 1
4308: ST_TO_ADDR
// neng := neng - nsci ;
4309: LD_ADDR_LOC 5
4313: PUSH
4314: LD_LOC 5
4318: PUSH
4319: LD_LOC 6
4323: MINUS
4324: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4325: LD_ADDR_LOC 7
4329: PUSH
4330: LD_LOC 5
4334: PUSH
4335: LD_INT 2
4337: DIV
4338: PUSH
4339: LD_INT 0
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PUSH
4346: LD_VAR 0 2
4350: ARRAY
4351: ST_TO_ADDR
// neng := neng - nmech ;
4352: LD_ADDR_LOC 5
4356: PUSH
4357: LD_LOC 5
4361: PUSH
4362: LD_LOC 7
4366: MINUS
4367: ST_TO_ADDR
// if ( neng < 1 ) then
4368: LD_LOC 5
4372: PUSH
4373: LD_INT 1
4375: LESS
4376: IFFALSE 4386
// neng := 1 ;
4378: LD_ADDR_LOC 5
4382: PUSH
4383: LD_INT 1
4385: ST_TO_ADDR
// end ;
4386: LD_VAR 0 1
4390: RET
// starting begin disable ( 1 ) ;
4391: LD_INT 1
4393: DISABLE_MARKED
// disable ( 2 ) ;
4394: LD_INT 2
4396: DISABLE_MARKED
// disable ( 3 ) ;
4397: LD_INT 3
4399: DISABLE_MARKED
// disable ( 4 ) ;
4400: LD_INT 4
4402: DISABLE_MARKED
// disable ( 5 ) ;
4403: LD_INT 5
4405: DISABLE_MARKED
// disable ( 6 ) ;
4406: LD_INT 6
4408: DISABLE_MARKED
// disable ( 7 ) ;
4409: LD_INT 7
4411: DISABLE_MARKED
// disable ( 10 ) ;
4412: LD_INT 10
4414: DISABLE_MARKED
// disable ( 20 ) ;
4415: LD_INT 20
4417: DISABLE_MARKED
// disable ( 98 ) ;
4418: LD_INT 98
4420: DISABLE_MARKED
// disable ( 99 ) ;
4421: LD_INT 99
4423: DISABLE_MARKED
// disable ( 400 ) ;
4424: LD_INT 400
4426: DISABLE_MARKED
// disable ( 401 ) ;
4427: LD_INT 401
4429: DISABLE_MARKED
// disable ( 600 ) ;
4430: LD_INT 600
4432: DISABLE_MARKED
// mp_selectmsg := true ;
4433: LD_ADDR_OWVAR 13
4437: PUSH
4438: LD_INT 1
4440: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4441: CALL 68 0 0
// init_map ;
4445: CALL 1568 0 0
// init_shipments ;
4449: CALL 4635 0 0
// init_respawn ;
4453: CALL 6318 0 0
// set_shared_visions_and_alliances ;
4457: CALL 2027 0 0
// ResetFog ;
4461: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4465: LD_OWVAR 2
4469: PPUSH
4470: CALL_OW 520
// prepare_sides ;
4474: CALL 4092 0 0
// Init_Win_Condition ;
4478: CALL 18479 0 0
// InitLimits ;
4482: CALL 16352 0 0
// ShowTimer ;
4486: CALL 17289 0 0
// case Game_Type of 2 :
4490: LD_EXP 48
4494: PUSH
4495: LD_INT 2
4497: DOUBLE
4498: EQUAL
4499: IFTRUE 4503
4501: GO 4510
4503: POP
// init_alien_research ; 3 :
4504: CALL 7548 0 0
4508: GO 4530
4510: LD_INT 3
4512: DOUBLE
4513: EQUAL
4514: IFTRUE 4518
4516: GO 4529
4518: POP
// begin InitPoints ( ) ;
4519: CALL 17482 0 0
// init_kings_counting ;
4523: CALL 19842 0 0
// end ; end ;
4527: GO 4530
4529: POP
// music_nat := Side_Nations [ your_side ] ;
4530: LD_ADDR_OWVAR 71
4534: PUSH
4535: LD_EXP 24
4539: PUSH
4540: LD_OWVAR 2
4544: ARRAY
4545: ST_TO_ADDR
// if IAmSpec then
4546: CALL_OW 531
4550: IFFALSE 4574
// begin fogOff ( true ) ;
4552: LD_INT 1
4554: PPUSH
4555: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4559: LD_INT 119
4561: PPUSH
4562: LD_INT 79
4564: PPUSH
4565: CALL_OW 86
// enable ( 400 ) ;
4569: LD_INT 400
4571: ENABLE_MARKED
// end else
4572: GO 4620
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4574: LD_EXP 32
4578: PUSH
4579: LD_EXP 23
4583: PUSH
4584: LD_OWVAR 2
4588: ARRAY
4589: ARRAY
4590: PUSH
4591: LD_INT 1
4593: ARRAY
4594: PPUSH
4595: LD_EXP 32
4599: PUSH
4600: LD_EXP 23
4604: PUSH
4605: LD_OWVAR 2
4609: ARRAY
4610: ARRAY
4611: PUSH
4612: LD_INT 2
4614: ARRAY
4615: PPUSH
4616: CALL_OW 86
// end ; InitApeman ;
4620: CALL 5493 0 0
// if def_builduptime then
4624: LD_EXP 63
4628: IFFALSE 4634
// BeginBuildUp ;
4630: CALL 13542 0 0
// end ; end_of_file
4634: END
// var shipment , tictac ; export function init_shipments ; begin
4635: LD_INT 0
4637: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4638: LD_ADDR_LOC 9
4642: PUSH
4643: LD_INT 0
4645: PPUSH
4646: LD_INT 3
4648: PPUSH
4649: CALL_OW 12
4653: ST_TO_ADDR
// tictac := 0 ;
4654: LD_ADDR_LOC 10
4658: PUSH
4659: LD_INT 0
4661: ST_TO_ADDR
// end ;
4662: LD_VAR 0 1
4666: RET
// every 1 1$0 + 0 0$0.3 do
4667: GO 4669
4669: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
4670: LD_INT 4
4672: PPUSH
4673: LD_INT 5
4675: PPUSH
4676: CALL_OW 12
4680: PPUSH
4681: LD_INT 1
4683: PPUSH
4684: CALL_OW 57
// enable ;
4688: ENABLE
// end ;
4689: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4690: GO 4692
4692: DISABLE
4693: LD_INT 0
4695: PPUSH
4696: PPUSH
// begin case tick of 1 .. 1 1$0 :
4697: LD_OWVAR 1
4701: PUSH
4702: LD_INT 1
4704: DOUBLE
4705: GREATEREQUAL
4706: IFFALSE 4714
4708: LD_INT 2100
4710: DOUBLE
4711: LESSEQUAL
4712: IFTRUE 4716
4714: GO 4744
4716: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4717: LD_EXP 13
4721: PUSH
4722: LD_INT 100
4724: DIVREAL
4725: PUSH
4726: LD_INT 525
4728: PPUSH
4729: LD_INT 1050
4731: PPUSH
4732: CALL_OW 12
4736: MUL
4737: PPUSH
4738: CALL_OW 67
4742: GO 5046
4744: LD_INT 2100
4746: PUSH
4747: LD_INT 1
4749: PLUS
4750: DOUBLE
4751: GREATEREQUAL
4752: IFFALSE 4760
4754: LD_INT 10500
4756: DOUBLE
4757: LESSEQUAL
4758: IFTRUE 4762
4760: GO 4790
4762: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4763: LD_EXP 13
4767: PUSH
4768: LD_INT 100
4770: DIVREAL
4771: PUSH
4772: LD_INT 1050
4774: PPUSH
4775: LD_INT 1225
4777: PPUSH
4778: CALL_OW 12
4782: MUL
4783: PPUSH
4784: CALL_OW 67
4788: GO 5046
4790: LD_INT 10500
4792: PUSH
4793: LD_INT 1
4795: PLUS
4796: DOUBLE
4797: GREATEREQUAL
4798: IFFALSE 4806
4800: LD_INT 21000
4802: DOUBLE
4803: LESSEQUAL
4804: IFTRUE 4808
4806: GO 4836
4808: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4809: LD_EXP 13
4813: PUSH
4814: LD_INT 100
4816: DIVREAL
4817: PUSH
4818: LD_INT 1225
4820: PPUSH
4821: LD_INT 1750
4823: PPUSH
4824: CALL_OW 12
4828: MUL
4829: PPUSH
4830: CALL_OW 67
4834: GO 5046
4836: LD_INT 21000
4838: PUSH
4839: LD_INT 1
4841: PLUS
4842: DOUBLE
4843: GREATEREQUAL
4844: IFFALSE 4852
4846: LD_INT 42000
4848: DOUBLE
4849: LESSEQUAL
4850: IFTRUE 4854
4852: GO 4882
4854: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4855: LD_EXP 13
4859: PUSH
4860: LD_INT 100
4862: DIVREAL
4863: PUSH
4864: LD_INT 1750
4866: PPUSH
4867: LD_INT 2450
4869: PPUSH
4870: CALL_OW 12
4874: MUL
4875: PPUSH
4876: CALL_OW 67
4880: GO 5046
4882: LD_INT 42000
4884: PUSH
4885: LD_INT 1
4887: PLUS
4888: DOUBLE
4889: GREATEREQUAL
4890: IFFALSE 4898
4892: LD_INT 63000
4894: DOUBLE
4895: LESSEQUAL
4896: IFTRUE 4900
4898: GO 4928
4900: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4901: LD_EXP 13
4905: PUSH
4906: LD_INT 100
4908: DIVREAL
4909: PUSH
4910: LD_INT 2450
4912: PPUSH
4913: LD_INT 2800
4915: PPUSH
4916: CALL_OW 12
4920: MUL
4921: PPUSH
4922: CALL_OW 67
4926: GO 5046
4928: LD_INT 63000
4930: PUSH
4931: LD_INT 1
4933: PLUS
4934: DOUBLE
4935: GREATEREQUAL
4936: IFFALSE 4944
4938: LD_INT 105000
4940: DOUBLE
4941: LESSEQUAL
4942: IFTRUE 4946
4944: GO 4974
4946: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4947: LD_EXP 13
4951: PUSH
4952: LD_INT 100
4954: DIVREAL
4955: PUSH
4956: LD_INT 2800
4958: PPUSH
4959: LD_INT 3325
4961: PPUSH
4962: CALL_OW 12
4966: MUL
4967: PPUSH
4968: CALL_OW 67
4972: GO 5046
4974: LD_INT 105000
4976: PUSH
4977: LD_INT 1
4979: PLUS
4980: DOUBLE
4981: GREATEREQUAL
4982: IFFALSE 4990
4984: LD_INT 630000
4986: DOUBLE
4987: LESSEQUAL
4988: IFTRUE 4992
4990: GO 5020
4992: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
4993: LD_EXP 13
4997: PUSH
4998: LD_INT 100
5000: DIVREAL
5001: PUSH
5002: LD_INT 3325
5004: PPUSH
5005: LD_INT 4200
5007: PPUSH
5008: CALL_OW 12
5012: MUL
5013: PPUSH
5014: CALL_OW 67
5018: GO 5046
5020: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5021: LD_EXP 13
5025: PUSH
5026: LD_INT 100
5028: DIVREAL
5029: PUSH
5030: LD_INT 4200
5032: PPUSH
5033: LD_INT 5250
5035: PPUSH
5036: CALL_OW 12
5040: MUL
5041: PPUSH
5042: CALL_OW 67
// amount := Rand ( 1 , 5 ) ;
5046: LD_ADDR_VAR 0 2
5050: PUSH
5051: LD_INT 1
5053: PPUSH
5054: LD_INT 5
5056: PPUSH
5057: CALL_OW 12
5061: ST_TO_ADDR
// for i = 1 to 4 do
5062: LD_ADDR_VAR 0 1
5066: PUSH
5067: DOUBLE
5068: LD_INT 1
5070: DEC
5071: ST_TO_ADDR
5072: LD_INT 4
5074: PUSH
5075: FOR_TO
5076: IFFALSE 5123
// begin wait ( 0 0$3 ) ;
5078: LD_INT 105
5080: PPUSH
5081: CALL_OW 67
// CreateCratesArea ( amount , [ north_east , north_west , south_east , south_west ] [ i ] , true ) ;
5085: LD_VAR 0 2
5089: PPUSH
5090: LD_INT 5
5092: PUSH
5093: LD_INT 4
5095: PUSH
5096: LD_INT 6
5098: PUSH
5099: LD_INT 7
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: PUSH
5108: LD_VAR 0 1
5112: ARRAY
5113: PPUSH
5114: LD_INT 1
5116: PPUSH
5117: CALL_OW 55
// end ;
5121: GO 5075
5123: POP
5124: POP
// enable ;
5125: ENABLE
// end ;
5126: PPOPN 2
5128: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount , is_in ;
5129: LD_OWVAR 1
5133: PUSH
5134: LD_INT 6300
5136: PUSH
5137: LD_LOC 10
5141: MUL
5142: PUSH
5143: LD_LOC 10
5147: PUSH
5148: LD_INT 3150
5150: PUSH
5151: LD_EXP 13
5155: PUSH
5156: LD_INT 70
5158: MUL
5159: MINUS
5160: MUL
5161: PLUS
5162: GREATER
5163: IFFALSE 5299
5165: GO 5167
5167: DISABLE
5168: LD_INT 0
5170: PPUSH
5171: PPUSH
5172: PPUSH
// begin tictac := tictac + 1 ;
5173: LD_ADDR_LOC 10
5177: PUSH
5178: LD_LOC 10
5182: PUSH
5183: LD_INT 1
5185: PLUS
5186: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: LD_INT 3
5194: PPUSH
5195: LD_INT 5
5197: PPUSH
5198: CALL_OW 12
5202: ST_TO_ADDR
// for i = 0 to 3 do
5203: LD_ADDR_VAR 0 1
5207: PUSH
5208: DOUBLE
5209: LD_INT 0
5211: DEC
5212: ST_TO_ADDR
5213: LD_INT 3
5215: PUSH
5216: FOR_TO
5217: IFFALSE 5296
// begin is_in := GetResourceArea ( north_west + i , mat_cans ) ;
5219: LD_ADDR_VAR 0 3
5223: PUSH
5224: LD_INT 4
5226: PUSH
5227: LD_VAR 0 1
5231: PLUS
5232: PPUSH
5233: LD_INT 1
5235: PPUSH
5236: CALL_OW 287
5240: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5241: LD_VAR 0 3
5245: PUSH
5246: LD_INT 500
5248: LESS
5249: PUSH
5250: LD_INT 1
5252: PPUSH
5253: LD_INT 10
5255: PPUSH
5256: CALL_OW 12
5260: PUSH
5261: LD_VAR 0 3
5265: PUSH
5266: LD_INT 100
5268: DIV
5269: GREATER
5270: OR
5271: IFFALSE 5294
// CreateCratesArea ( amount , north_west + i , true ) ;
5273: LD_VAR 0 2
5277: PPUSH
5278: LD_INT 4
5280: PUSH
5281: LD_VAR 0 1
5285: PLUS
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: CALL_OW 55
// end ;
5294: GO 5216
5296: POP
5297: POP
// enable ;
5298: ENABLE
// end ; end_of_file
5299: PPOPN 3
5301: END
// every 20 20$00 trigger apemanNumber do
5302: LD_EXP 36
5306: IFFALSE 5339
5308: GO 5310
5310: DISABLE
// begin enable ;
5311: ENABLE
// if apeLevel >= 8 then
5312: LD_EXP 41
5316: PUSH
5317: LD_INT 8
5319: GREATEREQUAL
5320: IFFALSE 5325
// disable else
5322: DISABLE
5323: GO 5339
// apeLevel := apeLevel + 1 ;
5325: LD_ADDR_EXP 41
5329: PUSH
5330: LD_EXP 41
5334: PUSH
5335: LD_INT 1
5337: PLUS
5338: ST_TO_ADDR
// end ;
5339: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5340: LD_EXP 36
5344: PUSH
5345: LD_EXP 37
5349: LESS
5350: IFFALSE 5490
5352: GO 5354
5354: DISABLE
5355: LD_INT 0
5357: PPUSH
5358: PPUSH
5359: PPUSH
5360: PPUSH
// begin enable ;
5361: ENABLE
// for i := 1 to apemanPos do
5362: LD_ADDR_VAR 0 1
5366: PUSH
5367: DOUBLE
5368: LD_INT 1
5370: DEC
5371: ST_TO_ADDR
5372: LD_EXP 39
5376: PUSH
5377: FOR_TO
5378: IFFALSE 5488
// begin if apemanPlayerCount [ i ] then
5380: LD_EXP 40
5384: PUSH
5385: LD_VAR 0 1
5389: ARRAY
5390: IFFALSE 5486
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5392: LD_EXP 40
5396: PUSH
5397: LD_VAR 0 1
5401: ARRAY
5402: PUSH
5403: LD_EXP 39
5407: PUSH
5408: LD_VAR 0 1
5412: ARRAY
5413: GREATER
5414: IFFALSE 5486
// begin ape := PrepareApeman ;
5416: LD_ADDR_VAR 0 2
5420: PUSH
5421: CALL 5993 0 0
5425: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5426: LD_VAR 0 2
5430: PPUSH
5431: LD_EXP 42
5435: PUSH
5436: LD_VAR 0 1
5440: ARRAY
5441: PPUSH
5442: LD_INT 0
5444: PPUSH
5445: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5449: LD_ADDR_EXP 39
5453: PUSH
5454: LD_EXP 39
5458: PPUSH
5459: LD_VAR 0 1
5463: PPUSH
5464: LD_EXP 39
5468: PUSH
5469: LD_VAR 0 1
5473: ARRAY
5474: PUSH
5475: LD_VAR 0 2
5479: UNION
5480: PPUSH
5481: CALL_OW 1
5485: ST_TO_ADDR
// end ; end ; end ;
5486: GO 5377
5488: POP
5489: POP
// end ;
5490: PPOPN 4
5492: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5493: LD_INT 0
5495: PPUSH
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
5500: PPUSH
5501: PPUSH
// playersAmount := 0 ;
5502: LD_ADDR_VAR 0 3
5506: PUSH
5507: LD_INT 0
5509: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5510: LD_ADDR_VAR 0 7
5514: PUSH
5515: LD_INT 8
5517: PUSH
5518: LD_INT 9
5520: PUSH
5521: LD_INT 11
5523: PUSH
5524: LD_INT 10
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5533: LD_ADDR_EXP 42
5537: PUSH
5538: LD_INT 0
5540: PUSH
5541: LD_INT 0
5543: PUSH
5544: LD_INT 0
5546: PUSH
5547: LD_INT 0
5549: PUSH
5550: LD_INT 0
5552: PUSH
5553: LD_INT 0
5555: PUSH
5556: LD_INT 0
5558: PUSH
5559: LD_INT 0
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: ST_TO_ADDR
// for j = 1 to Side_Positions do
5572: LD_ADDR_VAR 0 4
5576: PUSH
5577: DOUBLE
5578: LD_INT 1
5580: DEC
5581: ST_TO_ADDR
5582: LD_EXP 23
5586: PUSH
5587: FOR_TO
5588: IFFALSE 5655
// if Side_Positions [ j ] then
5590: LD_EXP 23
5594: PUSH
5595: LD_VAR 0 4
5599: ARRAY
5600: IFFALSE 5653
// begin playersAmount := playersAmount + 1 ;
5602: LD_ADDR_VAR 0 3
5606: PUSH
5607: LD_VAR 0 3
5611: PUSH
5612: LD_INT 1
5614: PLUS
5615: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5616: LD_ADDR_EXP 42
5620: PUSH
5621: LD_EXP 42
5625: PPUSH
5626: LD_VAR 0 4
5630: PPUSH
5631: LD_VAR 0 7
5635: PUSH
5636: LD_EXP 23
5640: PUSH
5641: LD_VAR 0 4
5645: ARRAY
5646: ARRAY
5647: PPUSH
5648: CALL_OW 1
5652: ST_TO_ADDR
// end ;
5653: GO 5587
5655: POP
5656: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5657: LD_ADDR_EXP 38
5661: PUSH
5662: LD_INT 3
5664: PUSH
5665: LD_EXP 15
5669: MUL
5670: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5671: LD_ADDR_EXP 36
5675: PUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_EXP 38
5685: MUL
5686: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5687: LD_ADDR_EXP 37
5691: PUSH
5692: LD_EXP 36
5696: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5697: LD_ADDR_EXP 39
5701: PUSH
5702: LD_INT 0
5704: PUSH
5705: LD_INT 0
5707: PUSH
5708: LD_INT 0
5710: PUSH
5711: LD_INT 0
5713: PUSH
5714: LD_INT 0
5716: PUSH
5717: LD_INT 0
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: LD_INT 0
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5736: LD_ADDR_EXP 40
5740: PUSH
5741: LD_INT 0
5743: PUSH
5744: LD_INT 0
5746: PUSH
5747: LD_INT 0
5749: PUSH
5750: LD_INT 0
5752: PUSH
5753: LD_INT 0
5755: PUSH
5756: LD_INT 0
5758: PUSH
5759: LD_INT 0
5761: PUSH
5762: LD_INT 0
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: ST_TO_ADDR
// apeLevel := 1 ;
5775: LD_ADDR_EXP 41
5779: PUSH
5780: LD_INT 1
5782: ST_TO_ADDR
// if not apemanNumber then
5783: LD_EXP 36
5787: NOT
5788: IFFALSE 5792
// exit ;
5790: GO 5988
// for i := 1 to apemanPerPlayer do
5792: LD_ADDR_VAR 0 2
5796: PUSH
5797: DOUBLE
5798: LD_INT 1
5800: DEC
5801: ST_TO_ADDR
5802: LD_EXP 38
5806: PUSH
5807: FOR_TO
5808: IFFALSE 5986
// begin for j := 1 to Side_Positions do
5810: LD_ADDR_VAR 0 4
5814: PUSH
5815: DOUBLE
5816: LD_INT 1
5818: DEC
5819: ST_TO_ADDR
5820: LD_EXP 23
5824: PUSH
5825: FOR_TO
5826: IFFALSE 5982
// if Side_Positions [ j ] then
5828: LD_EXP 23
5832: PUSH
5833: LD_VAR 0 4
5837: ARRAY
5838: IFFALSE 5980
// begin pos := Side_Positions [ j ] ;
5840: LD_ADDR_VAR 0 6
5844: PUSH
5845: LD_EXP 23
5849: PUSH
5850: LD_VAR 0 4
5854: ARRAY
5855: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5856: LD_ADDR_EXP 40
5860: PUSH
5861: LD_EXP 40
5865: PPUSH
5866: LD_VAR 0 4
5870: PPUSH
5871: LD_EXP 40
5875: PUSH
5876: LD_VAR 0 4
5880: ARRAY
5881: PUSH
5882: LD_INT 1
5884: PLUS
5885: PPUSH
5886: CALL_OW 1
5890: ST_TO_ADDR
// ape := PrepareApeman ;
5891: LD_ADDR_VAR 0 5
5895: PUSH
5896: CALL 5993 0 0
5900: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5901: LD_ADDR_EXP 39
5905: PUSH
5906: LD_EXP 39
5910: PPUSH
5911: LD_VAR 0 4
5915: PPUSH
5916: LD_EXP 39
5920: PUSH
5921: LD_VAR 0 4
5925: ARRAY
5926: PPUSH
5927: LD_EXP 39
5931: PUSH
5932: LD_VAR 0 4
5936: ARRAY
5937: PUSH
5938: LD_INT 1
5940: PLUS
5941: PPUSH
5942: LD_VAR 0 5
5946: PPUSH
5947: CALL_OW 1
5951: PPUSH
5952: CALL_OW 1
5956: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5957: LD_VAR 0 5
5961: PPUSH
5962: LD_EXP 42
5966: PUSH
5967: LD_VAR 0 4
5971: ARRAY
5972: PPUSH
5973: LD_INT 0
5975: PPUSH
5976: CALL_OW 49
// end ;
5980: GO 5825
5982: POP
5983: POP
// end ;
5984: GO 5807
5986: POP
5987: POP
// end ;
5988: LD_VAR 0 1
5992: RET
// export function PrepareApeman ; var bonus ; begin
5993: LD_INT 0
5995: PPUSH
5996: PPUSH
// uc_side := 0 ;
5997: LD_ADDR_OWVAR 20
6001: PUSH
6002: LD_INT 0
6004: ST_TO_ADDR
// uc_nation := 0 ;
6005: LD_ADDR_OWVAR 21
6009: PUSH
6010: LD_INT 0
6012: ST_TO_ADDR
// InitHc ;
6013: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6017: LD_ADDR_VAR 0 2
6021: PUSH
6022: LD_INT 1
6024: NEG
6025: PUSH
6026: LD_INT 0
6028: PUSH
6029: LD_INT 1
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_OWVAR 1
6041: PUSH
6042: LD_INT 3
6044: MOD
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: ARRAY
6050: ST_TO_ADDR
// hc_class := class_apeman ;
6051: LD_ADDR_OWVAR 28
6055: PUSH
6056: LD_INT 12
6058: ST_TO_ADDR
// hc_gallery :=  ;
6059: LD_ADDR_OWVAR 33
6063: PUSH
6064: LD_STRING 
6066: ST_TO_ADDR
// hc_name :=  ;
6067: LD_ADDR_OWVAR 26
6071: PUSH
6072: LD_STRING 
6074: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6075: LD_ADDR_OWVAR 31
6079: PUSH
6080: LD_EXP 41
6084: PUSH
6085: LD_VAR 0 2
6089: PLUS
6090: PUSH
6091: LD_EXP 41
6095: PUSH
6096: LD_VAR 0 2
6100: PLUS
6101: PUSH
6102: LD_EXP 41
6106: PUSH
6107: LD_VAR 0 2
6111: PLUS
6112: PUSH
6113: LD_EXP 41
6117: PUSH
6118: LD_VAR 0 2
6122: PLUS
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6130: LD_ADDR_OWVAR 35
6134: PUSH
6135: LD_INT 10
6137: PUSH
6138: LD_VAR 0 2
6142: MUL
6143: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6144: LD_ADDR_OWVAR 29
6148: PUSH
6149: LD_INT 12
6151: PUSH
6152: LD_INT 10
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: ST_TO_ADDR
// result := CreateHuman ;
6159: LD_ADDR_VAR 0 1
6163: PUSH
6164: CALL_OW 44
6168: ST_TO_ADDR
// end ;
6169: LD_VAR 0 1
6173: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6174: LD_INT 0
6176: PPUSH
6177: PPUSH
6178: PPUSH
// if not ape then
6179: LD_VAR 0 1
6183: NOT
6184: IFFALSE 6188
// exit ;
6186: GO 6313
// side := GetSide ( ape ) ;
6188: LD_ADDR_VAR 0 3
6192: PUSH
6193: LD_VAR 0 1
6197: PPUSH
6198: CALL_OW 255
6202: ST_TO_ADDR
// if not side then
6203: LD_VAR 0 3
6207: NOT
6208: IFFALSE 6262
// begin for i = 1 to apemanPos do
6210: LD_ADDR_VAR 0 4
6214: PUSH
6215: DOUBLE
6216: LD_INT 1
6218: DEC
6219: ST_TO_ADDR
6220: LD_EXP 39
6224: PUSH
6225: FOR_TO
6226: IFFALSE 6260
// if ape in apemanPos [ i ] then
6228: LD_VAR 0 1
6232: PUSH
6233: LD_EXP 39
6237: PUSH
6238: LD_VAR 0 4
6242: ARRAY
6243: IN
6244: IFFALSE 6258
// begin side := i ;
6246: LD_ADDR_VAR 0 3
6250: PUSH
6251: LD_VAR 0 4
6255: ST_TO_ADDR
// break ;
6256: GO 6260
// end ;
6258: GO 6225
6260: POP
6261: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6262: LD_ADDR_EXP 39
6266: PUSH
6267: LD_EXP 39
6271: PPUSH
6272: LD_VAR 0 3
6276: PPUSH
6277: LD_EXP 39
6281: PUSH
6282: LD_VAR 0 3
6286: ARRAY
6287: PUSH
6288: LD_VAR 0 1
6292: DIFF
6293: PPUSH
6294: CALL_OW 1
6298: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6299: LD_ADDR_EXP 36
6303: PUSH
6304: LD_EXP 36
6308: PUSH
6309: LD_INT 1
6311: MINUS
6312: ST_TO_ADDR
// end ; end_of_file
6313: LD_VAR 0 2
6317: RET
// var respawn_queue ; export function init_respawn ; begin
6318: LD_INT 0
6320: PPUSH
// if not def_people_respawning then
6321: LD_EXP 60
6325: NOT
6326: IFFALSE 6330
// exit ;
6328: GO 6372
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6330: LD_ADDR_LOC 11
6334: PUSH
6335: LD_INT 0
6337: PUSH
6338: LD_INT 0
6340: PUSH
6341: LD_INT 0
6343: PUSH
6344: LD_INT 0
6346: PUSH
6347: LD_INT 0
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: LD_INT 0
6355: PUSH
6356: LD_INT 0
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: ST_TO_ADDR
// enable ( 10 ) ;
6369: LD_INT 10
6371: ENABLE_MARKED
// end ;
6372: LD_VAR 0 1
6376: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6377: GO 6379
6379: DISABLE
6380: LD_INT 0
6382: PPUSH
6383: PPUSH
6384: PPUSH
6385: PPUSH
// begin for side = 1 to Side_Positions do
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: DOUBLE
6392: LD_INT 1
6394: DEC
6395: ST_TO_ADDR
6396: LD_EXP 23
6400: PUSH
6401: FOR_TO
6402: IFFALSE 6568
// if Side_Positions [ side ] then
6404: LD_EXP 23
6408: PUSH
6409: LD_VAR 0 4
6413: ARRAY
6414: IFFALSE 6566
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6416: LD_ADDR_VAR 0 2
6420: PUSH
6421: LD_INT 22
6423: PUSH
6424: LD_VAR 0 4
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: PUSH
6433: LD_INT 21
6435: PUSH
6436: LD_INT 1
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 3
6445: PUSH
6446: LD_INT 23
6448: PUSH
6449: LD_INT 0
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: PUSH
6456: EMPTY
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PPUSH
6462: CALL_OW 69
6466: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6467: LD_VAR 0 2
6471: PUSH
6472: LD_EXP 9
6476: LESS
6477: PUSH
6478: LD_LOC 11
6482: PUSH
6483: LD_VAR 0 4
6487: ARRAY
6488: NOT
6489: AND
6490: IFFALSE 6506
// set_queue ( side , TICK ) ;
6492: LD_VAR 0 4
6496: PPUSH
6497: LD_OWVAR 1
6501: PPUSH
6502: CALL 6805 0 2
// time := TICK - respawn_queue [ side ] ;
6506: LD_ADDR_VAR 0 3
6510: PUSH
6511: LD_OWVAR 1
6515: PUSH
6516: LD_LOC 11
6520: PUSH
6521: LD_VAR 0 4
6525: ARRAY
6526: MINUS
6527: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6528: LD_LOC 11
6532: PUSH
6533: LD_VAR 0 4
6537: ARRAY
6538: PUSH
6539: LD_VAR 0 3
6543: PUSH
6544: LD_EXP 16
6548: GREATER
6549: AND
6550: IFFALSE 6566
// respawn_character ( side , time ) ;
6552: LD_VAR 0 4
6556: PPUSH
6557: LD_VAR 0 3
6561: PPUSH
6562: CALL 6574 0 2
// end ;
6566: GO 6401
6568: POP
6569: POP
// enable ;
6570: ENABLE
// end ;
6571: PPOPN 4
6573: END
// function respawn_character ( side , time ) ; var dep ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6578: LD_INT 0
6580: PPUSH
6581: LD_INT 1
6583: PPUSH
6584: CALL_OW 12
6588: PUSH
6589: LD_VAR 0 2
6593: PUSH
6594: LD_EXP 17
6598: LESS
6599: AND
6600: IFFALSE 6604
// exit ;
6602: GO 6800
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6604: LD_ADDR_VAR 0 4
6608: PUSH
6609: LD_INT 22
6611: PUSH
6612: LD_VAR 0 1
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: LD_INT 2
6623: PUSH
6624: LD_INT 30
6626: PUSH
6627: LD_INT 0
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 30
6636: PUSH
6637: LD_INT 1
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 50
6651: PUSH
6652: EMPTY
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: PPUSH
6660: CALL_OW 69
6664: ST_TO_ADDR
// if not dep then
6665: LD_VAR 0 4
6669: NOT
6670: IFFALSE 6676
// exit else
6672: GO 6800
6674: GO 6700
// dep := dep [ Rand ( 1 , dep ) ] ;
6676: LD_ADDR_VAR 0 4
6680: PUSH
6681: LD_VAR 0 4
6685: PUSH
6686: LD_INT 1
6688: PPUSH
6689: LD_VAR 0 4
6693: PPUSH
6694: CALL_OW 12
6698: ARRAY
6699: ST_TO_ADDR
// uc_side := side ;
6700: LD_ADDR_OWVAR 20
6704: PUSH
6705: LD_VAR 0 1
6709: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6710: LD_ADDR_OWVAR 21
6714: PUSH
6715: LD_EXP 24
6719: PUSH
6720: LD_VAR 0 1
6724: ARRAY
6725: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6726: LD_INT 0
6728: PPUSH
6729: LD_INT 0
6731: PPUSH
6732: LD_EXP 10
6736: PUSH
6737: LD_INT 2
6739: DIV
6740: PPUSH
6741: CALL_OW 380
// hc_importance := 0 ;
6745: LD_ADDR_OWVAR 32
6749: PUSH
6750: LD_INT 0
6752: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6753: CALL_OW 44
6757: PPUSH
6758: LD_VAR 0 4
6762: PPUSH
6763: CALL_OW 250
6767: PPUSH
6768: LD_VAR 0 4
6772: PPUSH
6773: CALL_OW 251
6777: PPUSH
6778: LD_INT 10
6780: PPUSH
6781: LD_INT 1
6783: PPUSH
6784: CALL_OW 50
// set_queue ( side , 0 ) ;
6788: LD_VAR 0 1
6792: PPUSH
6793: LD_INT 0
6795: PPUSH
6796: CALL 6805 0 2
// end ;
6800: LD_VAR 0 3
6804: RET
// function set_queue ( side , time ) ; begin
6805: LD_INT 0
6807: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6808: LD_ADDR_LOC 11
6812: PUSH
6813: LD_LOC 11
6817: PPUSH
6818: LD_VAR 0 1
6822: PPUSH
6823: CALL_OW 3
6827: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6828: LD_ADDR_LOC 11
6832: PUSH
6833: LD_LOC 11
6837: PPUSH
6838: LD_VAR 0 1
6842: PPUSH
6843: LD_VAR 0 2
6847: PPUSH
6848: CALL_OW 2
6852: ST_TO_ADDR
// end ; end_of_file
6853: LD_VAR 0 3
6857: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6858: LD_VAR 0 1
6862: PPUSH
6863: CALL_OW 266
6867: PUSH
6868: LD_INT 0
6870: PUSH
6871: LD_INT 1
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: IN
6878: IFFALSE 6903
// SetBName ( b , @ & GetSide ( b ) ) ;
6880: LD_VAR 0 1
6884: PPUSH
6885: LD_STRING @
6887: PUSH
6888: LD_VAR 0 1
6892: PPUSH
6893: CALL_OW 255
6897: STR
6898: PPUSH
6899: CALL_OW 500
// if def_game_rules then
6903: LD_EXP 49
6907: IFFALSE 6944
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6909: LD_VAR 0 1
6913: PPUSH
6914: LD_VAR 0 1
6918: PPUSH
6919: CALL_OW 266
6923: PPUSH
6924: LD_VAR 0 1
6928: PPUSH
6929: CALL_OW 255
6933: PPUSH
6934: LD_INT 0
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: CALL 16753 0 5
// end ;
6944: PPOPN 2
6946: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6947: LD_VAR 0 1
6951: PPUSH
6952: CALL_OW 266
6956: PUSH
6957: LD_INT 0
6959: PUSH
6960: LD_INT 1
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: IN
6967: IFFALSE 6992
// SetBName ( b , @ & GetSide ( b ) ) ;
6969: LD_VAR 0 1
6973: PPUSH
6974: LD_STRING @
6976: PUSH
6977: LD_VAR 0 1
6981: PPUSH
6982: CALL_OW 255
6986: STR
6987: PPUSH
6988: CALL_OW 500
// if def_game_rules then
6992: LD_EXP 49
6996: IFFALSE 7035
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6998: LD_VAR 0 1
7002: PPUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: CALL_OW 266
7012: PPUSH
7013: LD_VAR 0 1
7017: PPUSH
7018: CALL_OW 255
7022: PPUSH
7023: LD_VAR 0 2
7027: PPUSH
7028: LD_INT 1
7030: PPUSH
7031: CALL 16753 0 5
// end ;
7035: PPOPN 3
7037: END
// on VehicleConstructed ( veh , fac ) do var side ;
7038: LD_INT 0
7040: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7041: LD_VAR 0 1
7045: PPUSH
7046: CALL_OW 263
7050: PUSH
7051: LD_INT 5
7053: EQUAL
7054: IFFALSE 7196
// begin side := GetSide ( veh ) ;
7056: LD_ADDR_VAR 0 3
7060: PUSH
7061: LD_VAR 0 1
7065: PPUSH
7066: CALL_OW 255
7070: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7071: LD_ADDR_EXP 39
7075: PUSH
7076: LD_EXP 39
7080: PPUSH
7081: LD_VAR 0 3
7085: PPUSH
7086: LD_EXP 39
7090: PUSH
7091: LD_VAR 0 3
7095: ARRAY
7096: PPUSH
7097: LD_INT 52
7099: PUSH
7100: EMPTY
7101: LIST
7102: PPUSH
7103: CALL_OW 72
7107: PUSH
7108: LD_INT 22
7110: PUSH
7111: LD_VAR 0 3
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 2
7122: PUSH
7123: LD_INT 33
7125: PUSH
7126: LD_INT 5
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 25
7135: PUSH
7136: LD_INT 12
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 15
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: LD_INT 25
7155: PUSH
7156: LD_INT 16
7158: PUSH
7159: EMPTY
7160: LIST
7161: LIST
7162: PUSH
7163: LD_INT 25
7165: PUSH
7166: LD_INT 17
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PPUSH
7185: CALL_OW 69
7189: UNION
7190: PPUSH
7191: CALL_OW 1
7195: ST_TO_ADDR
// end ; end ;
7196: PPOPN 3
7198: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7199: LD_INT 0
7201: PPUSH
7202: PPUSH
7203: PPUSH
7204: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 257
7214: PUSH
7215: LD_INT 12
7217: PUSH
7218: LD_INT 15
7220: PUSH
7221: LD_INT 17
7223: PUSH
7224: LD_INT 16
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: IN
7233: PUSH
7234: LD_VAR 0 1
7238: PPUSH
7239: CALL_OW 263
7243: PUSH
7244: LD_INT 5
7246: EQUAL
7247: OR
7248: IFFALSE 7259
// ApeKilled ( j ) ;
7250: LD_VAR 0 1
7254: PPUSH
7255: CALL 6174 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 266
7268: PUSH
7269: LD_INT 0
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: IN
7279: IFFALSE 7361
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7281: LD_ADDR_VAR 0 4
7285: PUSH
7286: LD_EXP 23
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 255
7300: ARRAY
7301: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7302: LD_ADDR_VAR 0 2
7306: PUSH
7307: LD_EXP 32
7311: PUSH
7312: LD_VAR 0 4
7316: ARRAY
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7322: LD_ADDR_VAR 0 3
7326: PUSH
7327: LD_EXP 32
7331: PUSH
7332: LD_VAR 0 4
7336: ARRAY
7337: PUSH
7338: LD_INT 2
7340: ARRAY
7341: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7342: LD_VAR 0 2
7346: PPUSH
7347: LD_VAR 0 3
7351: PPUSH
7352: CALL_OW 420
7356: PPUSH
7357: CALL_OW 419
// end ; if def_game_rules then
7361: LD_EXP 49
7365: IFFALSE 7464
// if ( GetType ( j ) = 3 ) then
7367: LD_VAR 0 1
7371: PPUSH
7372: CALL_OW 247
7376: PUSH
7377: LD_INT 3
7379: EQUAL
7380: IFFALSE 7420
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7382: LD_VAR 0 1
7386: PPUSH
7387: LD_VAR 0 1
7391: PPUSH
7392: CALL_OW 266
7396: PPUSH
7397: LD_VAR 0 1
7401: PPUSH
7402: CALL_OW 255
7406: PPUSH
7407: LD_INT 0
7409: PPUSH
7410: LD_INT 1
7412: NEG
7413: PPUSH
7414: CALL 16753 0 5
7418: GO 7464
// if ( GetChassis ( j ) = 25 ) then
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 265
7429: PUSH
7430: LD_INT 25
7432: EQUAL
7433: IFFALSE 7464
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7435: LD_VAR 0 1
7439: PPUSH
7440: LD_INT 37
7442: PPUSH
7443: LD_VAR 0 1
7447: PPUSH
7448: CALL_OW 255
7452: PPUSH
7453: LD_INT 0
7455: PPUSH
7456: LD_INT 1
7458: NEG
7459: PPUSH
7460: CALL 16753 0 5
// end ;
7464: PPOPN 5
7466: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7467: LD_EXP 49
7471: PUSH
7472: LD_VAR 0 1
7476: PPUSH
7477: CALL_OW 265
7481: PUSH
7482: LD_INT 25
7484: EQUAL
7485: AND
7486: IFFALSE 7518
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7488: LD_VAR 0 1
7492: PPUSH
7493: LD_INT 37
7495: PPUSH
7496: LD_VAR 0 1
7500: PPUSH
7501: CALL_OW 255
7505: PPUSH
7506: LD_VAR 0 3
7510: PPUSH
7511: LD_INT 1
7513: PPUSH
7514: CALL 16753 0 5
// end ;
7518: PPOPN 4
7520: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7521: LD_VAR 0 1
7525: PPUSH
7526: LD_VAR 0 2
7530: PPUSH
7531: LD_VAR 0 3
7535: PPUSH
7536: LD_OWVAR 2
7540: PPUSH
7541: CALL 18240 0 4
7545: PPOPN 3
7547: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
7548: LD_INT 0
7550: PPUSH
7551: PPUSH
7552: PPUSH
7553: PPUSH
7554: PPUSH
7555: PPUSH
// artefact_number := 3 ;
7556: LD_ADDR_EXP 43
7560: PUSH
7561: LD_INT 3
7563: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
7564: LD_ADDR_EXP 44
7568: PUSH
7569: LD_INT 1
7571: PUSH
7572: LD_INT 0
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: LD_INT 0
7580: PUSH
7581: LD_INT 3
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
7591: LD_ADDR_EXP 45
7595: PUSH
7596: LD_INT 1
7598: PUSH
7599: LD_INT 3
7601: PUSH
7602: LD_INT 5
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
7610: LD_ADDR_VAR 0 2
7614: PUSH
7615: LD_INT 1
7617: PUSH
7618: LD_INT 4
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 2
7627: PUSH
7628: LD_INT 5
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 3
7637: PUSH
7638: LD_INT 9
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: LIST
7649: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
7650: LD_ADDR_VAR 0 3
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 4
7660: PUSH
7661: LD_INT 3
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
7669: LD_ADDR_VAR 0 4
7673: PUSH
7674: LD_INT 150
7676: PUSH
7677: LD_INT 250
7679: PUSH
7680: LD_INT 400
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: LIST
7687: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
7688: LD_ADDR_VAR 0 5
7692: PUSH
7693: LD_INT 2
7695: PUSH
7696: LD_INT 10
7698: PUSH
7699: LD_INT 20
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: LIST
7706: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
7707: LD_ADDR_VAR 0 6
7711: PUSH
7712: LD_INT 6
7714: PUSH
7715: LD_INT 18
7717: PUSH
7718: LD_INT 50
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: LIST
7725: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
7726: LD_VAR 0 2
7730: PPUSH
7731: LD_VAR 0 3
7735: PPUSH
7736: LD_VAR 0 4
7740: PPUSH
7741: LD_VAR 0 5
7745: PPUSH
7746: LD_VAR 0 6
7750: PPUSH
7751: CALL 7760 0 5
// end ;
7755: LD_VAR 0 1
7759: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
7760: LD_INT 0
7762: PPUSH
7763: PPUSH
7764: PPUSH
7765: PPUSH
7766: PPUSH
// disable ( 1 ) ;
7767: LD_INT 1
7769: DISABLE_MARKED
// disable ( 5 ) ;
7770: LD_INT 5
7772: DISABLE_MARKED
// disable ( 6 ) ;
7773: LD_INT 6
7775: DISABLE_MARKED
// disable ( 7 ) ;
7776: LD_INT 7
7778: DISABLE_MARKED
// for side = 1 to 8 do
7779: LD_ADDR_VAR 0 9
7783: PUSH
7784: DOUBLE
7785: LD_INT 1
7787: DEC
7788: ST_TO_ADDR
7789: LD_INT 8
7791: PUSH
7792: FOR_TO
7793: IFFALSE 7809
// SetArtifactRes ( side , state_enabled ) ;
7795: LD_VAR 0 9
7799: PPUSH
7800: LD_INT 1
7802: PPUSH
7803: CALL_OW 467
7807: GO 7792
7809: POP
7810: POP
// for un = 0 to ( artefact_number - 1 ) do
7811: LD_ADDR_VAR 0 7
7815: PUSH
7816: DOUBLE
7817: LD_INT 0
7819: DEC
7820: ST_TO_ADDR
7821: LD_EXP 43
7825: PUSH
7826: LD_INT 1
7828: MINUS
7829: PUSH
7830: FOR_TO
7831: IFFALSE 8229
// begin base := un * 100 ;
7833: LD_ADDR_VAR 0 10
7837: PUSH
7838: LD_VAR 0 7
7842: PUSH
7843: LD_INT 100
7845: MUL
7846: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
7847: LD_VAR 0 10
7851: PUSH
7852: LD_INT 1
7854: PLUS
7855: PPUSH
7856: LD_VAR 0 1
7860: PUSH
7861: LD_VAR 0 7
7865: PUSH
7866: LD_INT 1
7868: PLUS
7869: ARRAY
7870: PUSH
7871: LD_INT 1
7873: ARRAY
7874: PPUSH
7875: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7879: LD_VAR 0 10
7883: PUSH
7884: LD_INT 2
7886: PLUS
7887: PPUSH
7888: LD_VAR 0 1
7892: PUSH
7893: LD_VAR 0 7
7897: PUSH
7898: LD_INT 1
7900: PLUS
7901: ARRAY
7902: PUSH
7903: LD_INT 2
7905: ARRAY
7906: PPUSH
7907: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7911: LD_VAR 0 10
7915: PUSH
7916: LD_INT 3
7918: PLUS
7919: PPUSH
7920: LD_VAR 0 2
7924: PUSH
7925: LD_VAR 0 7
7929: PUSH
7930: LD_INT 1
7932: PLUS
7933: ARRAY
7934: PPUSH
7935: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7939: LD_VAR 0 10
7943: PUSH
7944: LD_INT 5
7946: PLUS
7947: PPUSH
7948: LD_VAR 0 3
7952: PUSH
7953: LD_VAR 0 7
7957: PUSH
7958: LD_INT 1
7960: PLUS
7961: ARRAY
7962: PPUSH
7963: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7967: LD_VAR 0 10
7971: PUSH
7972: LD_INT 6
7974: PLUS
7975: PPUSH
7976: LD_VAR 0 4
7980: PUSH
7981: LD_VAR 0 7
7985: PUSH
7986: LD_INT 1
7988: PLUS
7989: ARRAY
7990: PPUSH
7991: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7995: LD_VAR 0 10
7999: PUSH
8000: LD_INT 7
8002: PLUS
8003: PPUSH
8004: LD_VAR 0 5
8008: PUSH
8009: LD_VAR 0 7
8013: PUSH
8014: LD_INT 1
8016: PLUS
8017: ARRAY
8018: PPUSH
8019: CALL_OW 109
// SetTag ( base + 08 , false ) ;
8023: LD_VAR 0 10
8027: PUSH
8028: LD_INT 8
8030: PLUS
8031: PPUSH
8032: LD_INT 0
8034: PPUSH
8035: CALL_OW 109
// SetTag ( base + 09 , false ) ;
8039: LD_VAR 0 10
8043: PUSH
8044: LD_INT 9
8046: PLUS
8047: PPUSH
8048: LD_INT 0
8050: PPUSH
8051: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
8055: LD_VAR 0 10
8059: PUSH
8060: LD_INT 11
8062: PLUS
8063: PPUSH
8064: LD_INT 0
8066: PPUSH
8067: CALL_OW 109
// SetTag ( base + 12 , false ) ;
8071: LD_VAR 0 10
8075: PUSH
8076: LD_INT 12
8078: PLUS
8079: PPUSH
8080: LD_INT 0
8082: PPUSH
8083: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8087: LD_VAR 0 10
8091: PUSH
8092: LD_INT 13
8094: PLUS
8095: PPUSH
8096: LD_INT 0
8098: PPUSH
8099: CALL_OW 109
// for i = 0 to 7 do
8103: LD_ADDR_VAR 0 8
8107: PUSH
8108: DOUBLE
8109: LD_INT 0
8111: DEC
8112: ST_TO_ADDR
8113: LD_INT 7
8115: PUSH
8116: FOR_TO
8117: IFFALSE 8225
// begin SetTag ( base + i * 10 + 21 , false ) ;
8119: LD_VAR 0 10
8123: PUSH
8124: LD_VAR 0 8
8128: PUSH
8129: LD_INT 10
8131: MUL
8132: PLUS
8133: PUSH
8134: LD_INT 21
8136: PLUS
8137: PPUSH
8138: LD_INT 0
8140: PPUSH
8141: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
8145: LD_VAR 0 10
8149: PUSH
8150: LD_VAR 0 8
8154: PUSH
8155: LD_INT 10
8157: MUL
8158: PLUS
8159: PUSH
8160: LD_INT 22
8162: PLUS
8163: PPUSH
8164: LD_INT 0
8166: PPUSH
8167: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
8171: LD_VAR 0 10
8175: PUSH
8176: LD_VAR 0 8
8180: PUSH
8181: LD_INT 10
8183: MUL
8184: PLUS
8185: PUSH
8186: LD_INT 23
8188: PLUS
8189: PPUSH
8190: LD_INT 0
8192: PPUSH
8193: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
8197: LD_VAR 0 10
8201: PUSH
8202: LD_VAR 0 8
8206: PUSH
8207: LD_INT 10
8209: MUL
8210: PLUS
8211: PUSH
8212: LD_INT 25
8214: PLUS
8215: PPUSH
8216: LD_INT 0
8218: PPUSH
8219: CALL_OW 109
// end ;
8223: GO 8116
8225: POP
8226: POP
// end ;
8227: GO 7830
8229: POP
8230: POP
// enable ( 20 ) ;
8231: LD_INT 20
8233: ENABLE_MARKED
// labs_in_use := [ ] ;
8234: LD_ADDR_EXP 46
8238: PUSH
8239: EMPTY
8240: ST_TO_ADDR
// if def_artefact_one then
8241: LD_EXP 1
8245: IFFALSE 8272
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
8247: LD_INT 4
8249: PPUSH
8250: LD_EXP 45
8254: PUSH
8255: LD_INT 1
8257: ARRAY
8258: PPUSH
8259: LD_INT 16
8261: PPUSH
8262: LD_INT 0
8264: PPUSH
8265: CALL_OW 59
// enable ( 5 ) ;
8269: LD_INT 5
8271: ENABLE_MARKED
// end ; if def_artefact_two then
8272: LD_EXP 2
8276: IFFALSE 8303
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
8278: LD_INT 4
8280: PPUSH
8281: LD_EXP 45
8285: PUSH
8286: LD_INT 2
8288: ARRAY
8289: PPUSH
8290: LD_INT 16
8292: PPUSH
8293: LD_INT 0
8295: PPUSH
8296: CALL_OW 59
// enable ( 6 ) ;
8300: LD_INT 6
8302: ENABLE_MARKED
// end ; if def_artefact_three then
8303: LD_EXP 3
8307: IFFALSE 8334
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
8309: LD_INT 4
8311: PPUSH
8312: LD_EXP 45
8316: PUSH
8317: LD_INT 3
8319: ARRAY
8320: PPUSH
8321: LD_INT 16
8323: PPUSH
8324: LD_INT 0
8326: PPUSH
8327: CALL_OW 59
// enable ( 7 ) ;
8331: LD_INT 7
8333: ENABLE_MARKED
// end ; end ;
8334: LD_VAR 0 6
8338: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
8339: LD_INT 0
8341: PPUSH
8342: PPUSH
// begin art := artefact_num [ size ] ;
8343: LD_ADDR_VAR 0 3
8347: PUSH
8348: LD_EXP 44
8352: PUSH
8353: LD_VAR 0 2
8357: ARRAY
8358: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8359: LD_ADDR_VAR 0 4
8363: PUSH
8364: LD_VAR 0 3
8368: PUSH
8369: LD_INT 1
8371: MINUS
8372: PUSH
8373: LD_INT 100
8375: MUL
8376: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
8377: LD_VAR 0 4
8381: PUSH
8382: LD_INT 9
8384: PLUS
8385: PPUSH
8386: LD_INT 0
8388: PPUSH
8389: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8393: LD_VAR 0 4
8397: PUSH
8398: LD_INT 13
8400: PLUS
8401: PPUSH
8402: LD_INT 0
8404: PPUSH
8405: CALL_OW 109
// Init_Lab ( art ) ;
8409: LD_VAR 0 3
8413: PPUSH
8414: CALL 9890 0 1
// end ;
8418: PPOPN 4
8420: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
8421: LD_INT 0
8423: PPUSH
8424: PPUSH
8425: PPUSH
// begin art := artefact_num [ size ] ;
8426: LD_ADDR_VAR 0 3
8430: PUSH
8431: LD_EXP 44
8435: PUSH
8436: LD_VAR 0 2
8440: ARRAY
8441: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8442: LD_ADDR_VAR 0 4
8446: PUSH
8447: LD_VAR 0 3
8451: PUSH
8452: LD_INT 1
8454: MINUS
8455: PUSH
8456: LD_INT 100
8458: MUL
8459: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
8460: LD_VAR 0 4
8464: PUSH
8465: LD_INT 9
8467: PLUS
8468: PPUSH
8469: LD_INT 1
8471: PPUSH
8472: CALL_OW 109
// SetTag ( base + 13 , un ) ;
8476: LD_VAR 0 4
8480: PUSH
8481: LD_INT 13
8483: PLUS
8484: PPUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: CALL_OW 109
// if GetTag ( base + 11 ) then
8494: LD_VAR 0 4
8498: PUSH
8499: LD_INT 11
8501: PLUS
8502: PPUSH
8503: CALL_OW 110
8507: IFFALSE 8670
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
8509: LD_ADDR_VAR 0 5
8513: PUSH
8514: LD_VAR 0 4
8518: PUSH
8519: LD_INT 11
8521: PLUS
8522: PPUSH
8523: CALL_OW 110
8527: PPUSH
8528: CALL_OW 255
8532: ST_TO_ADDR
// if GetTag ( base + 12 ) then
8533: LD_VAR 0 4
8537: PUSH
8538: LD_INT 12
8540: PLUS
8541: PPUSH
8542: CALL_OW 110
8546: IFFALSE 8614
// begin ComCancel ( GetTag ( base + 11 ) ) ;
8548: LD_VAR 0 4
8552: PUSH
8553: LD_INT 11
8555: PLUS
8556: PPUSH
8557: CALL_OW 110
8561: PPUSH
8562: CALL_OW 127
// wait ( 5 ) ;
8566: LD_INT 5
8568: PPUSH
8569: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
8573: LD_ADDR_EXP 46
8577: PUSH
8578: LD_EXP 46
8582: PUSH
8583: LD_VAR 0 4
8587: PUSH
8588: LD_INT 11
8590: PLUS
8591: PPUSH
8592: CALL_OW 110
8596: DIFF
8597: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
8598: LD_VAR 0 4
8602: PUSH
8603: LD_INT 12
8605: PLUS
8606: PPUSH
8607: LD_INT 0
8609: PPUSH
8610: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
8614: LD_VAR 0 4
8618: PUSH
8619: LD_VAR 0 5
8623: PUSH
8624: LD_INT 10
8626: MUL
8627: PLUS
8628: PUSH
8629: LD_INT 11
8631: PLUS
8632: PPUSH
8633: CALL_OW 110
8637: NOT
8638: IFFALSE 8654
// DeInit_Lab ( side , art ) ;
8640: LD_VAR 0 5
8644: PPUSH
8645: LD_VAR 0 3
8649: PPUSH
8650: CALL 10426 0 2
// SetTag ( base + 11 , 0 ) ;
8654: LD_VAR 0 4
8658: PUSH
8659: LD_INT 11
8661: PLUS
8662: PPUSH
8663: LD_INT 0
8665: PPUSH
8666: CALL_OW 109
// end ; end ;
8670: PPOPN 5
8672: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
8673: LD_INT 0
8675: PPUSH
8676: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8677: LD_ADDR_VAR 0 3
8681: PUSH
8682: LD_VAR 0 1
8686: PPUSH
8687: CALL_OW 255
8691: PUSH
8692: LD_INT 1
8694: MINUS
8695: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8696: LD_ADDR_VAR 0 2
8700: PUSH
8701: DOUBLE
8702: LD_INT 0
8704: DEC
8705: ST_TO_ADDR
8706: LD_EXP 43
8710: PUSH
8711: LD_INT 1
8713: MINUS
8714: PUSH
8715: FOR_TO
8716: IFFALSE 8758
// if lab = GetTag ( un * 100 + 11 ) then
8718: LD_VAR 0 1
8722: PUSH
8723: LD_VAR 0 2
8727: PUSH
8728: LD_INT 100
8730: MUL
8731: PUSH
8732: LD_INT 11
8734: PLUS
8735: PPUSH
8736: CALL_OW 110
8740: EQUAL
8741: IFFALSE 8756
// Init_Lab ( un + 1 ) ;
8743: LD_VAR 0 2
8747: PUSH
8748: LD_INT 1
8750: PLUS
8751: PPUSH
8752: CALL 9890 0 1
8756: GO 8715
8758: POP
8759: POP
// end ;
8760: PPOPN 3
8762: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
8763: LD_INT 0
8765: PPUSH
8766: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8767: LD_ADDR_VAR 0 4
8771: PUSH
8772: LD_VAR 0 1
8776: PPUSH
8777: CALL_OW 255
8781: PUSH
8782: LD_INT 1
8784: MINUS
8785: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8786: LD_ADDR_VAR 0 3
8790: PUSH
8791: DOUBLE
8792: LD_INT 0
8794: DEC
8795: ST_TO_ADDR
8796: LD_EXP 43
8800: PUSH
8801: LD_INT 1
8803: MINUS
8804: PUSH
8805: FOR_TO
8806: IFFALSE 8924
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8808: LD_VAR 0 3
8812: PUSH
8813: LD_INT 100
8815: MUL
8816: PUSH
8817: LD_INT 11
8819: PLUS
8820: PPUSH
8821: CALL_OW 110
8825: PUSH
8826: LD_VAR 0 1
8830: EQUAL
8831: PUSH
8832: LD_VAR 0 3
8836: PUSH
8837: LD_INT 100
8839: MUL
8840: PUSH
8841: LD_INT 12
8843: PLUS
8844: PPUSH
8845: CALL_OW 110
8849: AND
8850: IFFALSE 8922
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
8852: LD_VAR 0 3
8856: PUSH
8857: LD_INT 100
8859: MUL
8860: PUSH
8861: LD_VAR 0 4
8865: PUSH
8866: LD_INT 10
8868: MUL
8869: PLUS
8870: PUSH
8871: LD_INT 22
8873: PLUS
8874: PPUSH
8875: LD_VAR 0 2
8879: PPUSH
8880: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8884: LD_VAR 0 3
8888: PUSH
8889: LD_INT 100
8891: MUL
8892: PUSH
8893: LD_INT 12
8895: PLUS
8896: PPUSH
8897: LD_INT 0
8899: PPUSH
8900: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8904: LD_ADDR_EXP 46
8908: PUSH
8909: LD_EXP 46
8913: PUSH
8914: LD_VAR 0 1
8918: DIFF
8919: ST_TO_ADDR
// break ;
8920: GO 8924
// end ;
8922: GO 8805
8924: POP
8925: POP
// Update_Artefact ( lab ) ;
8926: LD_VAR 0 1
8930: PPUSH
8931: CALL 10565 0 1
// end ;
8935: PPOPN 4
8937: END
// on SpecResearchComplete ( lab ) do var un , side ;
8938: LD_INT 0
8940: PPUSH
8941: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8942: LD_ADDR_VAR 0 3
8946: PUSH
8947: LD_VAR 0 1
8951: PPUSH
8952: CALL_OW 255
8956: PUSH
8957: LD_INT 1
8959: MINUS
8960: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8961: LD_ADDR_VAR 0 2
8965: PUSH
8966: DOUBLE
8967: LD_INT 0
8969: DEC
8970: ST_TO_ADDR
8971: LD_EXP 43
8975: PUSH
8976: LD_INT 1
8978: MINUS
8979: PUSH
8980: FOR_TO
8981: IFFALSE 9127
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8983: LD_VAR 0 2
8987: PUSH
8988: LD_INT 100
8990: MUL
8991: PUSH
8992: LD_INT 11
8994: PLUS
8995: PPUSH
8996: CALL_OW 110
9000: PUSH
9001: LD_VAR 0 1
9005: EQUAL
9006: PUSH
9007: LD_VAR 0 2
9011: PUSH
9012: LD_INT 100
9014: MUL
9015: PUSH
9016: LD_INT 12
9018: PLUS
9019: PPUSH
9020: CALL_OW 110
9024: AND
9025: IFFALSE 9125
// begin SetTag ( un * 100 + 12 , false ) ;
9027: LD_VAR 0 2
9031: PUSH
9032: LD_INT 100
9034: MUL
9035: PUSH
9036: LD_INT 12
9038: PLUS
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
9047: LD_VAR 0 2
9051: PUSH
9052: LD_INT 100
9054: MUL
9055: PUSH
9056: LD_VAR 0 3
9060: PUSH
9061: LD_INT 10
9063: MUL
9064: PLUS
9065: PUSH
9066: LD_INT 21
9068: PLUS
9069: PPUSH
9070: LD_INT 1
9072: PPUSH
9073: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
9077: LD_VAR 0 2
9081: PUSH
9082: LD_INT 100
9084: MUL
9085: PUSH
9086: LD_VAR 0 3
9090: PUSH
9091: LD_INT 10
9093: MUL
9094: PLUS
9095: PUSH
9096: LD_INT 25
9098: PLUS
9099: PPUSH
9100: LD_VAR 0 1
9104: PPUSH
9105: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
9109: LD_ADDR_EXP 46
9113: PUSH
9114: LD_EXP 46
9118: PUSH
9119: LD_VAR 0 1
9123: DIFF
9124: ST_TO_ADDR
// end ;
9125: GO 8980
9127: POP
9128: POP
// Update_Artefact ( lab ) ;
9129: LD_VAR 0 1
9133: PPUSH
9134: CALL 10565 0 1
// end ;
9138: PPOPN 3
9140: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
9141: LD_INT 0
9143: PPUSH
9144: PPUSH
9145: PPUSH
9146: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
9147: LD_ADDR_VAR 0 7
9151: PUSH
9152: LD_VAR 0 2
9156: PUSH
9157: LD_INT 1
9159: MINUS
9160: PUSH
9161: LD_INT 3
9163: MOD
9164: PUSH
9165: LD_INT 1
9167: PLUS
9168: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
9169: LD_ADDR_VAR 0 8
9173: PUSH
9174: LD_VAR 0 7
9178: PUSH
9179: LD_INT 1
9181: MINUS
9182: PUSH
9183: LD_INT 100
9185: MUL
9186: ST_TO_ADDR
// if number <= 3 then
9187: LD_VAR 0 2
9191: PUSH
9192: LD_INT 3
9194: LESSEQUAL
9195: IFFALSE 9427
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
9197: LD_VAR 0 8
9201: PUSH
9202: LD_INT 11
9204: PLUS
9205: PPUSH
9206: CALL_OW 110
9210: PPUSH
9211: LD_VAR 0 8
9215: PUSH
9216: LD_INT 5
9218: PLUS
9219: PPUSH
9220: CALL_OW 110
9224: PPUSH
9225: LD_INT 1
9227: PPUSH
9228: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
9232: LD_VAR 0 8
9236: PUSH
9237: LD_INT 11
9239: PLUS
9240: PPUSH
9241: CALL_OW 110
9245: PPUSH
9246: LD_VAR 0 8
9250: PUSH
9251: LD_VAR 0 1
9255: PUSH
9256: LD_INT 10
9258: MUL
9259: PLUS
9260: PUSH
9261: LD_INT 12
9263: PLUS
9264: PPUSH
9265: CALL_OW 110
9269: PPUSH
9270: CALL_OW 329
// SetTag ( base + 12 , true ) ;
9274: LD_VAR 0 8
9278: PUSH
9279: LD_INT 12
9281: PLUS
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
9290: LD_ADDR_EXP 46
9294: PUSH
9295: LD_EXP 46
9299: PUSH
9300: LD_VAR 0 8
9304: PUSH
9305: LD_INT 11
9307: PLUS
9308: PPUSH
9309: CALL_OW 110
9313: ADD
9314: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9315: LD_ADDR_VAR 0 5
9319: PUSH
9320: DOUBLE
9321: LD_INT 0
9323: DEC
9324: ST_TO_ADDR
9325: LD_EXP 43
9329: PUSH
9330: LD_INT 1
9332: MINUS
9333: PUSH
9334: FOR_TO
9335: IFFALSE 9423
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9337: LD_VAR 0 8
9341: PUSH
9342: LD_INT 11
9344: PLUS
9345: PPUSH
9346: CALL_OW 110
9350: PUSH
9351: LD_VAR 0 5
9355: PUSH
9356: LD_INT 100
9358: MUL
9359: PUSH
9360: LD_INT 11
9362: PLUS
9363: PPUSH
9364: CALL_OW 110
9368: PUSH
9369: LD_VAR 0 5
9373: PUSH
9374: LD_INT 100
9376: MUL
9377: PUSH
9378: LD_VAR 0 1
9382: PUSH
9383: LD_INT 10
9385: MUL
9386: PLUS
9387: PUSH
9388: LD_INT 15
9390: PLUS
9391: PPUSH
9392: CALL_OW 110
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: IN
9401: IFFALSE 9421
// DeInit_Lab ( side , un + 1 ) ;
9403: LD_VAR 0 1
9407: PPUSH
9408: LD_VAR 0 5
9412: PUSH
9413: LD_INT 1
9415: PLUS
9416: PPUSH
9417: CALL 10426 0 2
9421: GO 9334
9423: POP
9424: POP
// end else
9425: GO 9601
// begin succes := false ;
9427: LD_ADDR_VAR 0 6
9431: PUSH
9432: LD_INT 0
9434: ST_TO_ADDR
// case art of 1 :
9435: LD_VAR 0 7
9439: PUSH
9440: LD_INT 1
9442: DOUBLE
9443: EQUAL
9444: IFTRUE 9448
9446: GO 9476
9448: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
9449: LD_ADDR_VAR 0 6
9453: PUSH
9454: LD_VAR 0 1
9458: PPUSH
9459: LD_VAR 0 3
9463: PPUSH
9464: LD_VAR 0 4
9468: PPUSH
9469: CALL 10998 0 3
9473: ST_TO_ADDR
9474: GO 9544
9476: LD_INT 2
9478: DOUBLE
9479: EQUAL
9480: IFTRUE 9484
9482: GO 9507
9484: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
9485: LD_ADDR_VAR 0 6
9489: PUSH
9490: LD_VAR 0 1
9494: PPUSH
9495: LD_VAR 0 3
9499: PPUSH
9500: CALL 11236 0 2
9504: ST_TO_ADDR
9505: GO 9544
9507: LD_INT 3
9509: DOUBLE
9510: EQUAL
9511: IFTRUE 9515
9513: GO 9543
9515: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
9516: LD_ADDR_VAR 0 6
9520: PUSH
9521: LD_VAR 0 1
9525: PPUSH
9526: LD_VAR 0 3
9530: PPUSH
9531: LD_VAR 0 4
9535: PPUSH
9536: CALL 11632 0 3
9540: ST_TO_ADDR
9541: GO 9544
9543: POP
// if succes then
9544: LD_VAR 0 6
9548: IFFALSE 9601
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
9550: LD_VAR 0 8
9554: PUSH
9555: LD_VAR 0 1
9559: PUSH
9560: LD_INT 10
9562: MUL
9563: PLUS
9564: PUSH
9565: LD_INT 13
9567: PLUS
9568: PPUSH
9569: LD_VAR 0 8
9573: PUSH
9574: LD_INT 7
9576: PLUS
9577: PPUSH
9578: CALL_OW 110
9582: PPUSH
9583: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
9587: LD_VAR 0 1
9591: PPUSH
9592: LD_VAR 0 7
9596: PPUSH
9597: CALL 9604 0 2
// end ; end ; end ;
9601: PPOPN 8
9603: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
9604: LD_INT 0
9606: PPUSH
9607: PPUSH
9608: PPUSH
// base := ( art - 1 ) * 100 ;
9609: LD_ADDR_VAR 0 4
9613: PUSH
9614: LD_VAR 0 2
9618: PUSH
9619: LD_INT 1
9621: MINUS
9622: PUSH
9623: LD_INT 100
9625: MUL
9626: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9627: LD_ADDR_VAR 0 5
9631: PUSH
9632: LD_VAR 0 4
9636: PUSH
9637: LD_VAR 0 1
9641: PUSH
9642: LD_INT 10
9644: MUL
9645: PLUS
9646: PUSH
9647: LD_INT 15
9649: PLUS
9650: PPUSH
9651: CALL_OW 110
9655: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
9656: LD_VAR 0 5
9660: PUSH
9661: LD_VAR 0 5
9665: PUSH
9666: LD_EXP 46
9670: IN
9671: NOT
9672: AND
9673: IFFALSE 9731
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
9675: LD_VAR 0 1
9679: PPUSH
9680: LD_VAR 0 4
9684: PUSH
9685: LD_INT 1
9687: PLUS
9688: PUSH
9689: LD_VAR 0 4
9693: PUSH
9694: LD_VAR 0 1
9698: PUSH
9699: LD_INT 10
9701: MUL
9702: PLUS
9703: PUSH
9704: LD_INT 11
9706: PLUS
9707: PPUSH
9708: CALL_OW 110
9712: PLUS
9713: PPUSH
9714: CALL_OW 110
9718: PPUSH
9719: LD_INT 1
9721: PPUSH
9722: LD_VAR 0 5
9726: PPUSH
9727: CALL_OW 468
// end ;
9731: LD_VAR 0 3
9735: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
9736: LD_INT 0
9738: PPUSH
9739: PPUSH
9740: PPUSH
// base := ( art - 1 ) * 100 ;
9741: LD_ADDR_VAR 0 4
9745: PUSH
9746: LD_VAR 0 2
9750: PUSH
9751: LD_INT 1
9753: MINUS
9754: PUSH
9755: LD_INT 100
9757: MUL
9758: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9759: LD_ADDR_VAR 0 5
9763: PUSH
9764: LD_VAR 0 4
9768: PUSH
9769: LD_VAR 0 1
9773: PUSH
9774: LD_INT 10
9776: MUL
9777: PLUS
9778: PUSH
9779: LD_INT 15
9781: PLUS
9782: PPUSH
9783: CALL_OW 110
9787: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
9788: LD_VAR 0 5
9792: PUSH
9793: LD_VAR 0 5
9797: PUSH
9798: LD_EXP 46
9802: IN
9803: NOT
9804: AND
9805: PUSH
9806: LD_VAR 0 5
9810: PPUSH
9811: CALL_OW 313
9815: AND
9816: IFFALSE 9885
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
9818: LD_VAR 0 1
9822: PPUSH
9823: LD_VAR 0 4
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: PUSH
9832: LD_VAR 0 4
9836: PUSH
9837: LD_VAR 0 1
9841: PUSH
9842: LD_INT 10
9844: MUL
9845: PLUS
9846: PUSH
9847: LD_INT 11
9849: PLUS
9850: PPUSH
9851: CALL_OW 110
9855: PLUS
9856: PPUSH
9857: CALL_OW 110
9861: PPUSH
9862: LD_VAR 0 4
9866: PUSH
9867: LD_INT 3
9869: PLUS
9870: PPUSH
9871: CALL_OW 110
9875: PPUSH
9876: LD_VAR 0 5
9880: PPUSH
9881: CALL_OW 468
// end ;
9885: LD_VAR 0 3
9889: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9890: LD_INT 0
9892: PPUSH
9893: PPUSH
9894: PPUSH
9895: PPUSH
9896: PPUSH
9897: PPUSH
9898: PPUSH
9899: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9900: LD_ADDR_VAR 0 8
9904: PUSH
9905: LD_EXP 45
9909: PUSH
9910: LD_VAR 0 1
9914: ARRAY
9915: PPUSH
9916: CALL_OW 469
9920: ST_TO_ADDR
// if not art_hex then
9921: LD_VAR 0 8
9925: NOT
9926: IFFALSE 9930
// exit ;
9928: GO 10421
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9930: LD_ADDR_VAR 0 3
9934: PUSH
9935: LD_INT 2
9937: PUSH
9938: LD_INT 30
9940: PUSH
9941: LD_INT 6
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: LD_INT 30
9950: PUSH
9951: LD_INT 7
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 30
9960: PUSH
9961: LD_INT 8
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: PUSH
9974: EMPTY
9975: LIST
9976: PPUSH
9977: CALL_OW 69
9981: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9982: LD_ADDR_VAR 0 9
9986: PUSH
9987: LD_VAR 0 3
9991: PPUSH
9992: LD_VAR 0 8
9996: PUSH
9997: LD_INT 1
9999: ARRAY
10000: PPUSH
10001: LD_VAR 0 8
10005: PUSH
10006: LD_INT 2
10008: ARRAY
10009: PPUSH
10010: CALL_OW 73
10014: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
10015: LD_ADDR_VAR 0 6
10019: PUSH
10020: LD_VAR 0 9
10024: PPUSH
10025: LD_VAR 0 8
10029: PUSH
10030: LD_INT 1
10032: ARRAY
10033: PPUSH
10034: LD_VAR 0 8
10038: PUSH
10039: LD_INT 2
10041: ARRAY
10042: PPUSH
10043: CALL_OW 297
10047: ST_TO_ADDR
// if dist < 9 then
10048: LD_VAR 0 6
10052: PUSH
10053: LD_INT 9
10055: LESS
10056: IFFALSE 10421
// begin side := GetSide ( nearest_lab ) ;
10058: LD_ADDR_VAR 0 4
10062: PUSH
10063: LD_VAR 0 9
10067: PPUSH
10068: CALL_OW 255
10072: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
10073: LD_VAR 0 4
10077: PPUSH
10078: LD_VAR 0 1
10082: PPUSH
10083: CALL 10426 0 2
// base := ( art - 1 ) * 100 ;
10087: LD_ADDR_VAR 0 5
10091: PUSH
10092: LD_VAR 0 1
10096: PUSH
10097: LD_INT 1
10099: MINUS
10100: PUSH
10101: LD_INT 100
10103: MUL
10104: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
10105: LD_INT 24
10107: PPUSH
10108: LD_VAR 0 4
10112: PPUSH
10113: CALL_OW 321
10117: PUSH
10118: LD_INT 2
10120: EQUAL
10121: PUSH
10122: LD_VAR 0 9
10126: PPUSH
10127: CALL_OW 313
10131: AND
10132: IFFALSE 10324
// begin if GetTag ( base + side * 10 + 11 ) then
10134: LD_VAR 0 5
10138: PUSH
10139: LD_VAR 0 4
10143: PUSH
10144: LD_INT 10
10146: MUL
10147: PLUS
10148: PUSH
10149: LD_INT 11
10151: PLUS
10152: PPUSH
10153: CALL_OW 110
10157: IFFALSE 10314
// begin if not GetTag ( base + side * 10 + 13 ) then
10159: LD_VAR 0 5
10163: PUSH
10164: LD_VAR 0 4
10168: PUSH
10169: LD_INT 10
10171: MUL
10172: PLUS
10173: PUSH
10174: LD_INT 13
10176: PLUS
10177: PPUSH
10178: CALL_OW 110
10182: NOT
10183: IFFALSE 10206
// state := GetTag ( base + 03 ) else
10185: LD_ADDR_VAR 0 7
10189: PUSH
10190: LD_VAR 0 5
10194: PUSH
10195: LD_INT 3
10197: PLUS
10198: PPUSH
10199: CALL_OW 110
10203: ST_TO_ADDR
10204: GO 10214
// state := art_gray ;
10206: LD_ADDR_VAR 0 7
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
10214: LD_VAR 0 5
10218: PUSH
10219: LD_VAR 0 4
10223: PUSH
10224: LD_INT 10
10226: MUL
10227: PLUS
10228: PUSH
10229: LD_INT 15
10231: PLUS
10232: PPUSH
10233: CALL_OW 110
10237: PUSH
10238: LD_VAR 0 5
10242: PUSH
10243: LD_VAR 0 4
10247: PUSH
10248: LD_INT 10
10250: MUL
10251: PLUS
10252: PUSH
10253: LD_INT 15
10255: PLUS
10256: PPUSH
10257: CALL_OW 110
10261: PUSH
10262: LD_VAR 0 9
10266: NONEQUAL
10267: AND
10268: IFFALSE 10284
// DeInit_Lab ( side , art ) ;
10270: LD_VAR 0 4
10274: PPUSH
10275: LD_VAR 0 1
10279: PPUSH
10280: CALL 10426 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
10284: LD_VAR 0 5
10288: PUSH
10289: LD_VAR 0 4
10293: PUSH
10294: LD_INT 10
10296: MUL
10297: PLUS
10298: PUSH
10299: LD_INT 15
10301: PLUS
10302: PPUSH
10303: LD_VAR 0 9
10307: PPUSH
10308: CALL_OW 109
// end else
10312: GO 10322
// state := art_instant ;
10314: LD_ADDR_VAR 0 7
10318: PUSH
10319: LD_INT 2
10321: ST_TO_ADDR
// end else
10322: GO 10332
// state := art_gray ;
10324: LD_ADDR_VAR 0 7
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
10332: LD_VAR 0 5
10336: PUSH
10337: LD_INT 11
10339: PLUS
10340: PPUSH
10341: LD_VAR 0 9
10345: PPUSH
10346: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
10350: LD_VAR 0 9
10354: PUSH
10355: LD_EXP 46
10359: IN
10360: NOT
10361: IFFALSE 10421
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
10363: LD_VAR 0 4
10367: PPUSH
10368: LD_VAR 0 5
10372: PUSH
10373: LD_INT 1
10375: PLUS
10376: PUSH
10377: LD_VAR 0 5
10381: PUSH
10382: LD_VAR 0 4
10386: PUSH
10387: LD_INT 10
10389: MUL
10390: PLUS
10391: PUSH
10392: LD_INT 11
10394: PLUS
10395: PPUSH
10396: CALL_OW 110
10400: PLUS
10401: PPUSH
10402: CALL_OW 110
10406: PPUSH
10407: LD_VAR 0 7
10411: PPUSH
10412: LD_VAR 0 9
10416: PPUSH
10417: CALL_OW 468
// end ; end ;
10421: LD_VAR 0 2
10425: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
10426: LD_INT 0
10428: PPUSH
10429: PPUSH
10430: PPUSH
// base := ( art - 1 ) * 100 ;
10431: LD_ADDR_VAR 0 4
10435: PUSH
10436: LD_VAR 0 2
10440: PUSH
10441: LD_INT 1
10443: MINUS
10444: PUSH
10445: LD_INT 100
10447: MUL
10448: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
10449: LD_ADDR_VAR 0 5
10453: PUSH
10454: LD_VAR 0 4
10458: PUSH
10459: LD_VAR 0 1
10463: PUSH
10464: LD_INT 10
10466: MUL
10467: PLUS
10468: PUSH
10469: LD_INT 15
10471: PLUS
10472: PPUSH
10473: CALL_OW 110
10477: ST_TO_ADDR
// if not lab then
10478: LD_VAR 0 5
10482: NOT
10483: IFFALSE 10504
// lab := GetTag ( base + 11 ) ;
10485: LD_ADDR_VAR 0 5
10489: PUSH
10490: LD_VAR 0 4
10494: PUSH
10495: LD_INT 11
10497: PLUS
10498: PPUSH
10499: CALL_OW 110
10503: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
10504: LD_VAR 0 1
10508: PPUSH
10509: LD_VAR 0 4
10513: PUSH
10514: LD_INT 1
10516: PLUS
10517: PUSH
10518: LD_VAR 0 4
10522: PUSH
10523: LD_VAR 0 1
10527: PUSH
10528: LD_INT 10
10530: MUL
10531: PLUS
10532: PUSH
10533: LD_INT 11
10535: PLUS
10536: PPUSH
10537: CALL_OW 110
10541: PLUS
10542: PPUSH
10543: CALL_OW 110
10547: PPUSH
10548: LD_INT 0
10550: PPUSH
10551: LD_VAR 0 5
10555: PPUSH
10556: CALL_OW 468
// end ;
10560: LD_VAR 0 3
10564: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
10565: LD_INT 0
10567: PPUSH
10568: PPUSH
10569: PPUSH
10570: PPUSH
// side := GetSide ( lab ) ;
10571: LD_ADDR_VAR 0 4
10575: PUSH
10576: LD_VAR 0 1
10580: PPUSH
10581: CALL_OW 255
10585: ST_TO_ADDR
// for art = 1 to artefact_number do
10586: LD_ADDR_VAR 0 3
10590: PUSH
10591: DOUBLE
10592: LD_INT 1
10594: DEC
10595: ST_TO_ADDR
10596: LD_EXP 43
10600: PUSH
10601: FOR_TO
10602: IFFALSE 10758
// begin base := ( art - 1 ) * 100 ;
10604: LD_ADDR_VAR 0 5
10608: PUSH
10609: LD_VAR 0 3
10613: PUSH
10614: LD_INT 1
10616: MINUS
10617: PUSH
10618: LD_INT 100
10620: MUL
10621: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
10622: LD_VAR 0 5
10626: PUSH
10627: LD_INT 11
10629: PLUS
10630: PPUSH
10631: CALL_OW 110
10635: PUSH
10636: LD_VAR 0 1
10640: EQUAL
10641: IFFALSE 10654
// Init_Lab ( art ) else
10643: LD_VAR 0 3
10647: PPUSH
10648: CALL 9890 0 1
10652: GO 10756
// begin if lab = GetTag ( base + side * 10 + 15 ) then
10654: LD_VAR 0 1
10658: PUSH
10659: LD_VAR 0 5
10663: PUSH
10664: LD_VAR 0 4
10668: PUSH
10669: LD_INT 10
10671: MUL
10672: PLUS
10673: PUSH
10674: LD_INT 15
10676: PLUS
10677: PPUSH
10678: CALL_OW 110
10682: EQUAL
10683: IFFALSE 10756
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
10685: LD_VAR 0 5
10689: PUSH
10690: LD_VAR 0 4
10694: PUSH
10695: LD_INT 10
10697: MUL
10698: PLUS
10699: PUSH
10700: LD_INT 13
10702: PLUS
10703: PPUSH
10704: CALL_OW 110
10708: PUSH
10709: LD_INT 0
10711: GREATER
10712: PUSH
10713: LD_VAR 0 1
10717: PPUSH
10718: CALL_OW 313
10722: NOT
10723: OR
10724: IFFALSE 10742
// Shadow_Artefact ( side , art ) else
10726: LD_VAR 0 4
10730: PPUSH
10731: LD_VAR 0 3
10735: PPUSH
10736: CALL 9604 0 2
10740: GO 10756
// Highlight_Artefact ( side , art ) ;
10742: LD_VAR 0 4
10746: PPUSH
10747: LD_VAR 0 3
10751: PPUSH
10752: CALL 9736 0 2
// end ; end ; end ;
10756: GO 10601
10758: POP
10759: POP
// end ; end_of_file
10760: LD_VAR 0 2
10764: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
10765: LD_INT 10
10767: PPUSH
10768: CALL_OW 67
// if not IsBusy ( lab ) then
10772: LD_VAR 0 2
10776: PPUSH
10777: CALL_OW 315
10781: NOT
10782: IFFALSE 10809
// begin labs_in_use := labs_in_use diff lab ;
10784: LD_ADDR_EXP 46
10788: PUSH
10789: LD_EXP 46
10793: PUSH
10794: LD_VAR 0 2
10798: DIFF
10799: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10800: LD_VAR 0 2
10804: PPUSH
10805: CALL 10565 0 1
// end ; end ;
10809: PPOPN 2
10811: END
// on ResearchStarted ( tech , lab ) do var un , side ;
10812: LD_INT 0
10814: PPUSH
10815: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
10816: LD_ADDR_EXP 46
10820: PUSH
10821: LD_EXP 46
10825: PUSH
10826: LD_VAR 0 2
10830: ADD
10831: ST_TO_ADDR
// side := GetSide ( lab ) ;
10832: LD_ADDR_VAR 0 4
10836: PUSH
10837: LD_VAR 0 2
10841: PPUSH
10842: CALL_OW 255
10846: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
10847: LD_ADDR_VAR 0 3
10851: PUSH
10852: DOUBLE
10853: LD_INT 0
10855: DEC
10856: ST_TO_ADDR
10857: LD_EXP 43
10861: PUSH
10862: LD_INT 1
10864: MINUS
10865: PUSH
10866: FOR_TO
10867: IFFALSE 10946
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10869: LD_VAR 0 2
10873: PUSH
10874: LD_VAR 0 3
10878: PUSH
10879: LD_INT 100
10881: MUL
10882: PUSH
10883: LD_INT 11
10885: PLUS
10886: PPUSH
10887: CALL_OW 110
10891: PUSH
10892: LD_VAR 0 3
10896: PUSH
10897: LD_INT 100
10899: MUL
10900: PUSH
10901: LD_VAR 0 4
10905: PUSH
10906: LD_INT 10
10908: MUL
10909: PLUS
10910: PUSH
10911: LD_INT 15
10913: PLUS
10914: PPUSH
10915: CALL_OW 110
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: IN
10924: IFFALSE 10944
// DeInit_Lab ( side , un + 1 ) ;
10926: LD_VAR 0 4
10930: PPUSH
10931: LD_VAR 0 3
10935: PUSH
10936: LD_INT 1
10938: PLUS
10939: PPUSH
10940: CALL 10426 0 2
10944: GO 10866
10946: POP
10947: POP
// end ;
10948: PPOPN 4
10950: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10951: LD_INT 10
10953: PPUSH
10954: CALL_OW 67
// if not IsBusy ( lab ) then
10958: LD_VAR 0 2
10962: PPUSH
10963: CALL_OW 315
10967: NOT
10968: IFFALSE 10995
// begin labs_in_use := labs_in_use diff lab ;
10970: LD_ADDR_EXP 46
10974: PUSH
10975: LD_EXP 46
10979: PUSH
10980: LD_VAR 0 2
10984: DIFF
10985: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10986: LD_VAR 0 2
10990: PPUSH
10991: CALL 10565 0 1
// end ; end ; end_of_file
10995: PPOPN 2
10997: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10998: LD_INT 0
11000: PPUSH
11001: PPUSH
11002: PPUSH
// vysledek := true ;
11003: LD_ADDR_VAR 0 5
11007: PUSH
11008: LD_INT 1
11010: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
11011: LD_ADDR_VAR 0 6
11015: PUSH
11016: LD_VAR 0 1
11020: PUSH
11021: LD_INT 10
11023: MUL
11024: PUSH
11025: LD_INT 15
11027: PLUS
11028: PPUSH
11029: CALL_OW 110
11033: PPUSH
11034: CALL_OW 274
11038: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
11039: LD_VAR 0 6
11043: PUSH
11044: LD_VAR 0 6
11048: PPUSH
11049: CALL_OW 279
11053: PUSH
11054: LD_INT 3
11056: ARRAY
11057: PUSH
11058: LD_INT 6
11060: PPUSH
11061: CALL_OW 110
11065: GREATEREQUAL
11066: AND
11067: IFFALSE 11157
// begin PlaceSeeing ( x , y , side , - 15 ) ;
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_VAR 0 3
11078: PPUSH
11079: LD_VAR 0 1
11083: PPUSH
11084: LD_INT 15
11086: NEG
11087: PPUSH
11088: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
11092: LD_VAR 0 6
11096: PPUSH
11097: LD_INT 3
11099: PPUSH
11100: LD_VAR 0 6
11104: PPUSH
11105: CALL_OW 279
11109: PUSH
11110: LD_INT 3
11112: ARRAY
11113: PUSH
11114: LD_INT 6
11116: PPUSH
11117: CALL_OW 110
11121: MINUS
11122: PPUSH
11123: CALL_OW 277
// view_data := [ x , y , side ] ;
11127: LD_ADDR_LOC 12
11131: PUSH
11132: LD_VAR 0 2
11136: PUSH
11137: LD_VAR 0 3
11141: PUSH
11142: LD_VAR 0 1
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: LIST
11151: ST_TO_ADDR
// enable ( 1 ) ;
11152: LD_INT 1
11154: ENABLE_MARKED
// end else
11155: GO 11165
// vysledek := false ;
11157: LD_ADDR_VAR 0 5
11161: PUSH
11162: LD_INT 0
11164: ST_TO_ADDR
// result := vysledek ;
11165: LD_ADDR_VAR 0 4
11169: PUSH
11170: LD_VAR 0 5
11174: ST_TO_ADDR
// end ;
11175: LD_VAR 0 4
11179: RET
// every 0 0$2 trigger view_data marked 1 do
11180: LD_LOC 12
11184: IFFALSE 11235
11186: GO 11188
11188: DISABLE
// begin wait ( 0 0$30 ) ;
11189: LD_INT 1050
11191: PPUSH
11192: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
11196: LD_LOC 12
11200: PUSH
11201: LD_INT 1
11203: ARRAY
11204: PPUSH
11205: LD_LOC 12
11209: PUSH
11210: LD_INT 2
11212: ARRAY
11213: PPUSH
11214: LD_LOC 12
11218: PUSH
11219: LD_INT 3
11221: ARRAY
11222: PPUSH
11223: CALL_OW 331
// view_data := 0 ;
11227: LD_ADDR_LOC 12
11231: PUSH
11232: LD_INT 0
11234: ST_TO_ADDR
// end ;
11235: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
11236: LD_INT 0
11238: PPUSH
11239: PPUSH
11240: PPUSH
11241: PPUSH
11242: PPUSH
11243: PPUSH
11244: PPUSH
11245: PPUSH
// vysledek := true ;
11246: LD_ADDR_VAR 0 4
11250: PUSH
11251: LD_INT 1
11253: ST_TO_ADDR
// it_can := false ;
11254: LD_ADDR_VAR 0 8
11258: PUSH
11259: LD_INT 0
11261: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
11262: LD_ADDR_VAR 0 9
11266: PUSH
11267: LD_INT 30
11269: PUSH
11270: LD_INT 28
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
11277: LD_ADDR_VAR 0 10
11281: PUSH
11282: LD_INT 8
11284: PUSH
11285: LD_INT 48
11287: PUSH
11288: LD_INT 29
11290: PUSH
11291: LD_INT 49
11293: PUSH
11294: LD_INT 10
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
11304: LD_ADDR_VAR 0 7
11308: PUSH
11309: LD_VAR 0 2
11313: PPUSH
11314: CALL_OW 247
11318: PUSH
11319: LD_INT 3
11321: EQUAL
11322: PUSH
11323: LD_VAR 0 2
11327: PPUSH
11328: CALL_OW 266
11332: PUSH
11333: LD_VAR 0 9
11337: IN
11338: PUSH
11339: LD_VAR 0 2
11343: PPUSH
11344: CALL_OW 269
11348: PUSH
11349: LD_VAR 0 10
11353: IN
11354: OR
11355: AND
11356: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
11357: LD_ADDR_VAR 0 6
11361: PUSH
11362: LD_VAR 0 2
11366: PPUSH
11367: CALL_OW 247
11371: PUSH
11372: LD_INT 2
11374: EQUAL
11375: PUSH
11376: LD_VAR 0 2
11380: PPUSH
11381: CALL_OW 264
11385: PUSH
11386: LD_VAR 0 10
11390: IN
11391: PUSH
11392: LD_VAR 0 2
11396: PPUSH
11397: CALL_OW 262
11401: PUSH
11402: LD_INT 3
11404: EQUAL
11405: OR
11406: AND
11407: ST_TO_ADDR
// case def_artefact_two of 1 :
11408: LD_EXP 2
11412: PUSH
11413: LD_INT 1
11415: DOUBLE
11416: EQUAL
11417: IFTRUE 11421
11419: GO 11438
11421: POP
// if b_can then
11422: LD_VAR 0 7
11426: IFFALSE 11436
// it_can := true ; 2 :
11428: LD_ADDR_VAR 0 8
11432: PUSH
11433: LD_INT 1
11435: ST_TO_ADDR
11436: GO 11495
11438: LD_INT 2
11440: DOUBLE
11441: EQUAL
11442: IFTRUE 11446
11444: GO 11463
11446: POP
// if v_can then
11447: LD_VAR 0 6
11451: IFFALSE 11461
// it_can := true ; 3 :
11453: LD_ADDR_VAR 0 8
11457: PUSH
11458: LD_INT 1
11460: ST_TO_ADDR
11461: GO 11495
11463: LD_INT 3
11465: DOUBLE
11466: EQUAL
11467: IFTRUE 11471
11469: GO 11494
11471: POP
// if b_can or v_can then
11472: LD_VAR 0 7
11476: PUSH
11477: LD_VAR 0 6
11481: OR
11482: IFFALSE 11492
// it_can := true ; end ;
11484: LD_ADDR_VAR 0 8
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
11492: GO 11495
11494: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
11495: LD_ADDR_VAR 0 5
11499: PUSH
11500: LD_INT 100
11502: PUSH
11503: LD_VAR 0 1
11507: PUSH
11508: LD_INT 10
11510: MUL
11511: PLUS
11512: PUSH
11513: LD_INT 15
11515: PLUS
11516: PPUSH
11517: CALL_OW 110
11521: PPUSH
11522: CALL_OW 274
11526: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
11527: LD_VAR 0 5
11531: PUSH
11532: LD_VAR 0 8
11536: AND
11537: PUSH
11538: LD_VAR 0 5
11542: PPUSH
11543: CALL_OW 279
11547: PUSH
11548: LD_INT 3
11550: ARRAY
11551: PUSH
11552: LD_INT 106
11554: PPUSH
11555: CALL_OW 110
11559: GREATEREQUAL
11560: AND
11561: IFFALSE 11609
// begin KillUnit ( un ) ;
11563: LD_VAR 0 2
11567: PPUSH
11568: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
11572: LD_VAR 0 5
11576: PPUSH
11577: LD_INT 3
11579: PPUSH
11580: LD_VAR 0 5
11584: PPUSH
11585: CALL_OW 279
11589: PUSH
11590: LD_INT 3
11592: ARRAY
11593: PUSH
11594: LD_INT 106
11596: PPUSH
11597: CALL_OW 110
11601: MINUS
11602: PPUSH
11603: CALL_OW 277
// end else
11607: GO 11617
// vysledek := false ;
11609: LD_ADDR_VAR 0 4
11613: PUSH
11614: LD_INT 0
11616: ST_TO_ADDR
// result := vysledek ;
11617: LD_ADDR_VAR 0 3
11621: PUSH
11622: LD_VAR 0 4
11626: ST_TO_ADDR
// end ;
11627: LD_VAR 0 3
11631: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
11632: LD_INT 0
11634: PPUSH
11635: PPUSH
11636: PPUSH
11637: PPUSH
// vysledek := true ;
11638: LD_ADDR_VAR 0 5
11642: PUSH
11643: LD_INT 1
11645: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
11646: LD_ADDR_VAR 0 7
11650: PUSH
11651: LD_INT 200
11653: PUSH
11654: LD_VAR 0 1
11658: PUSH
11659: LD_INT 10
11661: MUL
11662: PLUS
11663: PUSH
11664: LD_INT 15
11666: PLUS
11667: PPUSH
11668: CALL_OW 110
11672: PPUSH
11673: CALL_OW 274
11677: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
11678: LD_VAR 0 7
11682: PUSH
11683: LD_VAR 0 7
11687: PPUSH
11688: CALL_OW 279
11692: PUSH
11693: LD_INT 3
11695: ARRAY
11696: PUSH
11697: LD_INT 206
11699: PPUSH
11700: CALL_OW 110
11704: GREATEREQUAL
11705: AND
11706: IFFALSE 11762
// begin ArtContamination ( p1 , p2 , 15 ) ;
11708: LD_VAR 0 2
11712: PPUSH
11713: LD_VAR 0 3
11717: PPUSH
11718: LD_INT 15
11720: PPUSH
11721: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
11725: LD_VAR 0 7
11729: PPUSH
11730: LD_INT 3
11732: PPUSH
11733: LD_VAR 0 7
11737: PPUSH
11738: CALL_OW 279
11742: PUSH
11743: LD_INT 3
11745: ARRAY
11746: PUSH
11747: LD_INT 206
11749: PPUSH
11750: CALL_OW 110
11754: MINUS
11755: PPUSH
11756: CALL_OW 277
// end else
11760: GO 11770
// vysledek := false ;
11762: LD_ADDR_VAR 0 5
11766: PUSH
11767: LD_INT 0
11769: ST_TO_ADDR
// result := vysledek ;
11770: LD_ADDR_VAR 0 4
11774: PUSH
11775: LD_VAR 0 5
11779: ST_TO_ADDR
// end ;
11780: LD_VAR 0 4
11784: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
11785: GO 11787
11787: DISABLE
11788: LD_INT 0
11790: PPUSH
11791: PPUSH
11792: PPUSH
// begin for art = 0 to artefact_number do
11793: LD_ADDR_VAR 0 1
11797: PUSH
11798: DOUBLE
11799: LD_INT 0
11801: DEC
11802: ST_TO_ADDR
11803: LD_EXP 43
11807: PUSH
11808: FOR_TO
11809: IFFALSE 11943
// for side = 1 to Side_Positions do
11811: LD_ADDR_VAR 0 2
11815: PUSH
11816: DOUBLE
11817: LD_INT 1
11819: DEC
11820: ST_TO_ADDR
11821: LD_EXP 23
11825: PUSH
11826: FOR_TO
11827: IFFALSE 11939
// begin recharge := art * 100 + side * 10 + 13 ;
11829: LD_ADDR_VAR 0 3
11833: PUSH
11834: LD_VAR 0 1
11838: PUSH
11839: LD_INT 100
11841: MUL
11842: PUSH
11843: LD_VAR 0 2
11847: PUSH
11848: LD_INT 10
11850: MUL
11851: PLUS
11852: PUSH
11853: LD_INT 13
11855: PLUS
11856: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
11857: LD_EXP 23
11861: PUSH
11862: LD_VAR 0 2
11866: ARRAY
11867: PUSH
11868: LD_VAR 0 3
11872: PPUSH
11873: CALL_OW 110
11877: PUSH
11878: LD_INT 0
11880: GREATER
11881: AND
11882: IFFALSE 11937
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11884: LD_VAR 0 3
11888: PPUSH
11889: LD_VAR 0 3
11893: PPUSH
11894: CALL_OW 110
11898: PUSH
11899: LD_INT 1
11901: MINUS
11902: PPUSH
11903: CALL_OW 109
// if not GetTag ( recharge ) then
11907: LD_VAR 0 3
11911: PPUSH
11912: CALL_OW 110
11916: NOT
11917: IFFALSE 11937
// Highlight_Artefact ( side , art + 1 ) ;
11919: LD_VAR 0 2
11923: PPUSH
11924: LD_VAR 0 1
11928: PUSH
11929: LD_INT 1
11931: PLUS
11932: PPUSH
11933: CALL 9736 0 2
// end ; end ;
11937: GO 11826
11939: POP
11940: POP
11941: GO 11808
11943: POP
11944: POP
// enable ;
11945: ENABLE
// end ; end_of_file
11946: PPOPN 3
11948: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11949: LD_INT 0
11951: PPUSH
11952: PPUSH
11953: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11954: LD_INT 18
11956: PPUSH
11957: LD_VAR 0 1
11961: PUSH
11962: LD_INT 1
11964: ARRAY
11965: PPUSH
11966: LD_VAR 0 1
11970: PUSH
11971: LD_INT 2
11973: ARRAY
11974: PPUSH
11975: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11979: LD_VAR 0 1
11983: PUSH
11984: LD_INT 1
11986: ARRAY
11987: PPUSH
11988: LD_VAR 0 1
11992: PUSH
11993: LD_INT 2
11995: ARRAY
11996: PPUSH
11997: CALL_OW 494
// Wait ( 30 ) ;
12001: LD_INT 30
12003: PPUSH
12004: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
12008: LD_INT 18
12010: PPUSH
12011: LD_INT 4
12013: PPUSH
12014: CALL_OW 286
// base := ( art - 1 ) * 100 ;
12018: LD_ADDR_VAR 0 4
12022: PUSH
12023: LD_VAR 0 2
12027: PUSH
12028: LD_INT 1
12030: MINUS
12031: PUSH
12032: LD_INT 100
12034: MUL
12035: ST_TO_ADDR
// if GetTag ( base + 11 ) then
12036: LD_VAR 0 4
12040: PUSH
12041: LD_INT 11
12043: PLUS
12044: PPUSH
12045: CALL_OW 110
12049: IFFALSE 12187
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
12051: LD_ADDR_VAR 0 5
12055: PUSH
12056: LD_VAR 0 4
12060: PUSH
12061: LD_INT 11
12063: PLUS
12064: PPUSH
12065: CALL_OW 110
12069: PPUSH
12070: CALL_OW 255
12074: ST_TO_ADDR
// if GetTag ( base + 12 ) then
12075: LD_VAR 0 4
12079: PUSH
12080: LD_INT 12
12082: PLUS
12083: PPUSH
12084: CALL_OW 110
12088: IFFALSE 12131
// begin ComCancel ( GetTag ( base + 11 ) ) ;
12090: LD_VAR 0 4
12094: PUSH
12095: LD_INT 11
12097: PLUS
12098: PPUSH
12099: CALL_OW 110
12103: PPUSH
12104: CALL_OW 127
// Wait ( 10 ) ;
12108: LD_INT 10
12110: PPUSH
12111: CALL_OW 67
// SetTag ( base + 12 , false ) ;
12115: LD_VAR 0 4
12119: PUSH
12120: LD_INT 12
12122: PLUS
12123: PPUSH
12124: LD_INT 0
12126: PPUSH
12127: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
12131: LD_VAR 0 4
12135: PUSH
12136: LD_VAR 0 5
12140: PUSH
12141: LD_INT 10
12143: MUL
12144: PLUS
12145: PUSH
12146: LD_INT 11
12148: PLUS
12149: PPUSH
12150: CALL_OW 110
12154: NOT
12155: IFFALSE 12171
// DeInit_Lab ( side , art ) ;
12157: LD_VAR 0 5
12161: PPUSH
12162: LD_VAR 0 2
12166: PPUSH
12167: CALL 10426 0 2
// SetTag ( base + 11 , 0 ) ;
12171: LD_VAR 0 4
12175: PUSH
12176: LD_INT 11
12178: PLUS
12179: PPUSH
12180: LD_INT 0
12182: PPUSH
12183: CALL_OW 109
// end ; end ;
12187: LD_VAR 0 3
12191: RET
// every 0 0$5 marked 5 do var hex , un ;
12192: GO 12194
12194: DISABLE
12195: LD_INT 0
12197: PPUSH
12198: PPUSH
// begin wait ( 3 3$0 ) ;
12199: LD_INT 6300
12201: PPUSH
12202: CALL_OW 67
// if GetTag ( 09 ) then
12206: LD_INT 9
12208: PPUSH
12209: CALL_OW 110
12213: IFFALSE 12252
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
12215: LD_ADDR_VAR 0 1
12219: PUSH
12220: LD_INT 13
12222: PPUSH
12223: CALL_OW 110
12227: PPUSH
12228: CALL_OW 250
12232: PUSH
12233: LD_INT 13
12235: PPUSH
12236: CALL_OW 110
12240: PPUSH
12241: CALL_OW 251
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: ST_TO_ADDR
12250: GO 12271
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
12252: LD_ADDR_VAR 0 1
12256: PUSH
12257: LD_EXP 45
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: PPUSH
12266: CALL_OW 469
12270: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12271: LD_VAR 0 1
12275: PUSH
12276: LD_INT 1
12278: ARRAY
12279: PPUSH
12280: LD_VAR 0 1
12284: PUSH
12285: LD_INT 2
12287: ARRAY
12288: PPUSH
12289: LD_INT 16
12291: PPUSH
12292: CALL_OW 309
12296: NOT
12297: IFFALSE 12574
// begin if GetTag ( 09 ) then
12299: LD_INT 9
12301: PPUSH
12302: CALL_OW 110
12306: IFFALSE 12353
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12308: LD_INT 13
12310: PPUSH
12311: CALL_OW 110
12315: PPUSH
12316: LD_INT 4
12318: PPUSH
12319: LD_EXP 45
12323: PUSH
12324: LD_INT 1
12326: ARRAY
12327: NEG
12328: PPUSH
12329: CALL_OW 290
// SetTag ( 09 , 0 ) ;
12333: LD_INT 9
12335: PPUSH
12336: LD_INT 0
12338: PPUSH
12339: CALL_OW 109
// SetTag ( 13 , 0 ) ;
12343: LD_INT 13
12345: PPUSH
12346: LD_INT 0
12348: PPUSH
12349: CALL_OW 109
// end ; DestroyArtefact ( hex , 1 ) ;
12353: LD_VAR 0 1
12357: PPUSH
12358: LD_INT 1
12360: PPUSH
12361: CALL 11949 0 2
// wait ( 5 ) ;
12365: LD_INT 5
12367: PPUSH
12368: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12372: LD_ADDR_VAR 0 1
12376: PUSH
12377: LD_INT 16
12379: PPUSH
12380: LD_INT 0
12382: PPUSH
12383: CALL_OW 16
12387: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12388: LD_ADDR_VAR 0 2
12392: PUSH
12393: LD_VAR 0 1
12397: PUSH
12398: LD_INT 1
12400: ARRAY
12401: PPUSH
12402: LD_VAR 0 1
12406: PUSH
12407: LD_INT 2
12409: ARRAY
12410: PPUSH
12411: CALL_OW 428
12415: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12416: LD_VAR 0 2
12420: PUSH
12421: LD_INT 0
12423: GREATER
12424: PUSH
12425: LD_VAR 0 2
12429: PPUSH
12430: CALL_OW 247
12434: PUSH
12435: LD_INT 3
12437: EQUAL
12438: AND
12439: IFFALSE 12483
// begin KillUnit ( un ) ;
12441: LD_VAR 0 2
12445: PPUSH
12446: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12450: LD_VAR 0 1
12454: PUSH
12455: LD_INT 1
12457: ARRAY
12458: PPUSH
12459: LD_VAR 0 1
12463: PUSH
12464: LD_INT 2
12466: ARRAY
12467: PPUSH
12468: CALL_OW 428
12472: IFFALSE 12483
// wait ( 10 ) ;
12474: LD_INT 10
12476: PPUSH
12477: CALL_OW 67
12481: GO 12450
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12483: LD_VAR 0 1
12487: PUSH
12488: LD_INT 1
12490: ARRAY
12491: PPUSH
12492: LD_VAR 0 1
12496: PUSH
12497: LD_INT 2
12499: ARRAY
12500: PPUSH
12501: CALL_OW 428
12505: NOT
12506: IFFALSE 12372
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12508: LD_VAR 0 1
12512: PUSH
12513: LD_INT 1
12515: ARRAY
12516: PPUSH
12517: LD_VAR 0 1
12521: PUSH
12522: LD_INT 2
12524: ARRAY
12525: PPUSH
12526: CALL_OW 494
// wait ( 30 ) ;
12530: LD_INT 30
12532: PPUSH
12533: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12537: LD_INT 4
12539: PPUSH
12540: LD_EXP 45
12544: PUSH
12545: LD_INT 1
12547: ARRAY
12548: PPUSH
12549: LD_VAR 0 1
12553: PUSH
12554: LD_INT 1
12556: ARRAY
12557: PPUSH
12558: LD_VAR 0 1
12562: PUSH
12563: LD_INT 2
12565: ARRAY
12566: PPUSH
12567: LD_INT 0
12569: PPUSH
12570: CALL_OW 58
// end ; enable ;
12574: ENABLE
// end ;
12575: PPOPN 2
12577: END
// every 0 0$5 marked 6 do var hex , un ;
12578: GO 12580
12580: DISABLE
12581: LD_INT 0
12583: PPUSH
12584: PPUSH
// begin wait ( 3 3$30 ) ;
12585: LD_INT 7350
12587: PPUSH
12588: CALL_OW 67
// if GetTag ( 109 ) then
12592: LD_INT 109
12594: PPUSH
12595: CALL_OW 110
12599: IFFALSE 12638
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
12601: LD_ADDR_VAR 0 1
12605: PUSH
12606: LD_INT 113
12608: PPUSH
12609: CALL_OW 110
12613: PPUSH
12614: CALL_OW 250
12618: PUSH
12619: LD_INT 113
12621: PPUSH
12622: CALL_OW 110
12626: PPUSH
12627: CALL_OW 251
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: ST_TO_ADDR
12636: GO 12657
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
12638: LD_ADDR_VAR 0 1
12642: PUSH
12643: LD_EXP 45
12647: PUSH
12648: LD_INT 2
12650: ARRAY
12651: PPUSH
12652: CALL_OW 469
12656: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12657: LD_VAR 0 1
12661: PUSH
12662: LD_INT 1
12664: ARRAY
12665: PPUSH
12666: LD_VAR 0 1
12670: PUSH
12671: LD_INT 2
12673: ARRAY
12674: PPUSH
12675: LD_INT 16
12677: PPUSH
12678: CALL_OW 309
12682: NOT
12683: IFFALSE 12960
// begin if GetTag ( 109 ) then
12685: LD_INT 109
12687: PPUSH
12688: CALL_OW 110
12692: IFFALSE 12739
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12694: LD_INT 113
12696: PPUSH
12697: CALL_OW 110
12701: PPUSH
12702: LD_INT 4
12704: PPUSH
12705: LD_EXP 45
12709: PUSH
12710: LD_INT 1
12712: ARRAY
12713: NEG
12714: PPUSH
12715: CALL_OW 290
// SetTag ( 109 , 0 ) ;
12719: LD_INT 109
12721: PPUSH
12722: LD_INT 0
12724: PPUSH
12725: CALL_OW 109
// SetTag ( 113 , 0 ) ;
12729: LD_INT 113
12731: PPUSH
12732: LD_INT 0
12734: PPUSH
12735: CALL_OW 109
// end ; DestroyArtefact ( hex , 2 ) ;
12739: LD_VAR 0 1
12743: PPUSH
12744: LD_INT 2
12746: PPUSH
12747: CALL 11949 0 2
// wait ( 5 ) ;
12751: LD_INT 5
12753: PPUSH
12754: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12758: LD_ADDR_VAR 0 1
12762: PUSH
12763: LD_INT 16
12765: PPUSH
12766: LD_INT 0
12768: PPUSH
12769: CALL_OW 16
12773: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12774: LD_ADDR_VAR 0 2
12778: PUSH
12779: LD_VAR 0 1
12783: PUSH
12784: LD_INT 1
12786: ARRAY
12787: PPUSH
12788: LD_VAR 0 1
12792: PUSH
12793: LD_INT 2
12795: ARRAY
12796: PPUSH
12797: CALL_OW 428
12801: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12802: LD_VAR 0 2
12806: PUSH
12807: LD_INT 0
12809: GREATER
12810: PUSH
12811: LD_VAR 0 2
12815: PPUSH
12816: CALL_OW 247
12820: PUSH
12821: LD_INT 3
12823: EQUAL
12824: AND
12825: IFFALSE 12869
// begin KillUnit ( un ) ;
12827: LD_VAR 0 2
12831: PPUSH
12832: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12836: LD_VAR 0 1
12840: PUSH
12841: LD_INT 1
12843: ARRAY
12844: PPUSH
12845: LD_VAR 0 1
12849: PUSH
12850: LD_INT 2
12852: ARRAY
12853: PPUSH
12854: CALL_OW 428
12858: IFFALSE 12869
// wait ( 10 ) ;
12860: LD_INT 10
12862: PPUSH
12863: CALL_OW 67
12867: GO 12836
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12869: LD_VAR 0 1
12873: PUSH
12874: LD_INT 1
12876: ARRAY
12877: PPUSH
12878: LD_VAR 0 1
12882: PUSH
12883: LD_INT 2
12885: ARRAY
12886: PPUSH
12887: CALL_OW 428
12891: NOT
12892: IFFALSE 12758
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12894: LD_VAR 0 1
12898: PUSH
12899: LD_INT 1
12901: ARRAY
12902: PPUSH
12903: LD_VAR 0 1
12907: PUSH
12908: LD_INT 2
12910: ARRAY
12911: PPUSH
12912: CALL_OW 494
// wait ( 30 ) ;
12916: LD_INT 30
12918: PPUSH
12919: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12923: LD_INT 4
12925: PPUSH
12926: LD_EXP 45
12930: PUSH
12931: LD_INT 2
12933: ARRAY
12934: PPUSH
12935: LD_VAR 0 1
12939: PUSH
12940: LD_INT 1
12942: ARRAY
12943: PPUSH
12944: LD_VAR 0 1
12948: PUSH
12949: LD_INT 2
12951: ARRAY
12952: PPUSH
12953: LD_INT 0
12955: PPUSH
12956: CALL_OW 58
// end ; enable ;
12960: ENABLE
// end ;
12961: PPOPN 2
12963: END
// every 0 0$5 marked 7 do var hex , un ;
12964: GO 12966
12966: DISABLE
12967: LD_INT 0
12969: PPUSH
12970: PPUSH
// begin wait ( 4 4$0 ) ;
12971: LD_INT 8400
12973: PPUSH
12974: CALL_OW 67
// if GetTag ( 209 ) then
12978: LD_INT 209
12980: PPUSH
12981: CALL_OW 110
12985: IFFALSE 13024
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12987: LD_ADDR_VAR 0 1
12991: PUSH
12992: LD_INT 213
12994: PPUSH
12995: CALL_OW 110
12999: PPUSH
13000: CALL_OW 250
13004: PUSH
13005: LD_INT 213
13007: PPUSH
13008: CALL_OW 110
13012: PPUSH
13013: CALL_OW 251
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: ST_TO_ADDR
13022: GO 13043
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
13024: LD_ADDR_VAR 0 1
13028: PUSH
13029: LD_EXP 45
13033: PUSH
13034: LD_INT 3
13036: ARRAY
13037: PPUSH
13038: CALL_OW 469
13042: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
13043: LD_VAR 0 1
13047: PUSH
13048: LD_INT 1
13050: ARRAY
13051: PPUSH
13052: LD_VAR 0 1
13056: PUSH
13057: LD_INT 2
13059: ARRAY
13060: PPUSH
13061: LD_INT 16
13063: PPUSH
13064: CALL_OW 309
13068: NOT
13069: IFFALSE 13346
// begin if GetTag ( 209 ) then
13071: LD_INT 209
13073: PPUSH
13074: CALL_OW 110
13078: IFFALSE 13125
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 1 ] ) ;
13080: LD_INT 213
13082: PPUSH
13083: CALL_OW 110
13087: PPUSH
13088: LD_INT 4
13090: PPUSH
13091: LD_EXP 45
13095: PUSH
13096: LD_INT 1
13098: ARRAY
13099: NEG
13100: PPUSH
13101: CALL_OW 290
// SetTag ( 209 , 0 ) ;
13105: LD_INT 209
13107: PPUSH
13108: LD_INT 0
13110: PPUSH
13111: CALL_OW 109
// SetTag ( 213 , 0 ) ;
13115: LD_INT 213
13117: PPUSH
13118: LD_INT 0
13120: PPUSH
13121: CALL_OW 109
// end ; DestroyArtefact ( hex , 3 ) ;
13125: LD_VAR 0 1
13129: PPUSH
13130: LD_INT 3
13132: PPUSH
13133: CALL 11949 0 2
// wait ( 5 ) ;
13137: LD_INT 5
13139: PPUSH
13140: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
13144: LD_ADDR_VAR 0 1
13148: PUSH
13149: LD_INT 16
13151: PPUSH
13152: LD_INT 0
13154: PPUSH
13155: CALL_OW 16
13159: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13160: LD_ADDR_VAR 0 2
13164: PUSH
13165: LD_VAR 0 1
13169: PUSH
13170: LD_INT 1
13172: ARRAY
13173: PPUSH
13174: LD_VAR 0 1
13178: PUSH
13179: LD_INT 2
13181: ARRAY
13182: PPUSH
13183: CALL_OW 428
13187: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
13188: LD_VAR 0 2
13192: PUSH
13193: LD_INT 0
13195: GREATER
13196: PUSH
13197: LD_VAR 0 2
13201: PPUSH
13202: CALL_OW 247
13206: PUSH
13207: LD_INT 3
13209: EQUAL
13210: AND
13211: IFFALSE 13255
// begin KillUnit ( un ) ;
13213: LD_VAR 0 2
13217: PPUSH
13218: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
13222: LD_VAR 0 1
13226: PUSH
13227: LD_INT 1
13229: ARRAY
13230: PPUSH
13231: LD_VAR 0 1
13235: PUSH
13236: LD_INT 2
13238: ARRAY
13239: PPUSH
13240: CALL_OW 428
13244: IFFALSE 13255
// wait ( 10 ) ;
13246: LD_INT 10
13248: PPUSH
13249: CALL_OW 67
13253: GO 13222
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13255: LD_VAR 0 1
13259: PUSH
13260: LD_INT 1
13262: ARRAY
13263: PPUSH
13264: LD_VAR 0 1
13268: PUSH
13269: LD_INT 2
13271: ARRAY
13272: PPUSH
13273: CALL_OW 428
13277: NOT
13278: IFFALSE 13144
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13280: LD_VAR 0 1
13284: PUSH
13285: LD_INT 1
13287: ARRAY
13288: PPUSH
13289: LD_VAR 0 1
13293: PUSH
13294: LD_INT 2
13296: ARRAY
13297: PPUSH
13298: CALL_OW 494
// wait ( 30 ) ;
13302: LD_INT 30
13304: PPUSH
13305: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13309: LD_INT 4
13311: PPUSH
13312: LD_EXP 45
13316: PUSH
13317: LD_INT 3
13319: ARRAY
13320: PPUSH
13321: LD_VAR 0 1
13325: PUSH
13326: LD_INT 1
13328: ARRAY
13329: PPUSH
13330: LD_VAR 0 1
13334: PUSH
13335: LD_INT 2
13337: ARRAY
13338: PPUSH
13339: LD_INT 0
13341: PPUSH
13342: CALL_OW 58
// end ; enable ;
13346: ENABLE
// end ; end_of_file
13347: PPOPN 2
13349: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13350: LD_INT 0
13352: PPUSH
13353: PPUSH
// for un in battle_flags_id do
13354: LD_ADDR_VAR 0 2
13358: PUSH
13359: LD_EXP 34
13363: PUSH
13364: FOR_IN
13365: IFFALSE 13440
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13367: LD_VAR 0 2
13371: PPUSH
13372: LD_INT 1
13374: PUSH
13375: LD_LOC 14
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 2
13386: PUSH
13387: LD_LOC 14
13391: PUSH
13392: LD_INT 2
13394: DIV
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 3
13402: PUSH
13403: LD_LOC 14
13407: PUSH
13408: LD_INT 5
13410: DIV
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: LD_INT 20
13418: PUSH
13419: LD_LOC 14
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 423
13438: GO 13364
13440: POP
13441: POP
// end ;
13442: LD_VAR 0 1
13446: RET
// every 0 0$0.1 do var un ;
13447: GO 13449
13449: DISABLE
13450: LD_INT 0
13452: PPUSH
// begin if not def_morale_flags then
13453: LD_EXP 58
13457: NOT
13458: IFFALSE 13462
// exit ;
13460: GO 13539
// if not morale_decreasing_time then
13462: LD_EXP 14
13466: NOT
13467: IFFALSE 13471
// exit ;
13469: GO 13539
// strength = 100 ;
13471: LD_ADDR_LOC 14
13475: PUSH
13476: LD_INT 100
13478: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13479: LD_EXP 14
13483: PPUSH
13484: CALL_OW 67
// strength := strength - 1 ;
13488: LD_ADDR_LOC 14
13492: PUSH
13493: LD_LOC 14
13497: PUSH
13498: LD_INT 1
13500: MINUS
13501: ST_TO_ADDR
// Update_Flags ;
13502: CALL 13350 0 0
// until not strength ;
13506: LD_LOC 14
13510: NOT
13511: IFFALSE 13479
// for un in battle_flags_id do
13513: LD_ADDR_VAR 0 1
13517: PUSH
13518: LD_EXP 34
13522: PUSH
13523: FOR_IN
13524: IFFALSE 13537
// KillBattleFlag ( un ) ;
13526: LD_VAR 0 1
13530: PPUSH
13531: CALL_OW 419
13535: GO 13523
13537: POP
13538: POP
// end ; end_of_file
13539: PPOPN 1
13541: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
13542: LD_INT 0
13544: PPUSH
13545: PPUSH
13546: PPUSH
// enable ( 600 ) ;
13547: LD_INT 600
13549: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
13550: LD_ADDR_VAR 0 2
13554: PUSH
13555: DOUBLE
13556: LD_INT 1
13558: DEC
13559: ST_TO_ADDR
13560: LD_EXP 47
13564: PUSH
13565: FOR_TO
13566: IFFALSE 13721
// if Position_Sides [ i ] then
13568: LD_EXP 29
13572: PUSH
13573: LD_VAR 0 2
13577: ARRAY
13578: IFFALSE 13719
// for j := 1 to 8 do
13580: LD_ADDR_VAR 0 3
13584: PUSH
13585: DOUBLE
13586: LD_INT 1
13588: DEC
13589: ST_TO_ADDR
13590: LD_INT 8
13592: PUSH
13593: FOR_TO
13594: IFFALSE 13717
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13596: LD_EXP 23
13600: PUSH
13601: LD_VAR 0 3
13605: ARRAY
13606: PUSH
13607: LD_EXP 21
13611: PUSH
13612: LD_EXP 29
13616: PUSH
13617: LD_VAR 0 2
13621: ARRAY
13622: ARRAY
13623: PUSH
13624: LD_EXP 21
13628: PUSH
13629: LD_VAR 0 3
13633: ARRAY
13634: NONEQUAL
13635: PUSH
13636: LD_EXP 25
13640: NOT
13641: PUSH
13642: LD_EXP 29
13646: PUSH
13647: LD_VAR 0 2
13651: ARRAY
13652: PUSH
13653: LD_VAR 0 3
13657: NONEQUAL
13658: AND
13659: OR
13660: AND
13661: IFFALSE 13685
// HideArea ( j , BuildUpAreas [ i ] ) else
13663: LD_VAR 0 3
13667: PPUSH
13668: LD_EXP 47
13672: PUSH
13673: LD_VAR 0 2
13677: ARRAY
13678: PPUSH
13679: CALL_OW 333
13683: GO 13715
// if ( j = your_side ) then
13685: LD_VAR 0 3
13689: PUSH
13690: LD_OWVAR 2
13694: EQUAL
13695: IFFALSE 13715
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13697: LD_EXP 47
13701: PUSH
13702: LD_VAR 0 2
13706: ARRAY
13707: PPUSH
13708: LD_INT 5
13710: PPUSH
13711: CALL_OW 424
13715: GO 13593
13717: POP
13718: POP
13719: GO 13565
13721: POP
13722: POP
// end ;
13723: LD_VAR 0 1
13727: RET
// export function EndBuildUp ; var i , j ; begin
13728: LD_INT 0
13730: PPUSH
13731: PPUSH
13732: PPUSH
// disable ( 600 ) ;
13733: LD_INT 600
13735: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
13736: LD_ADDR_VAR 0 2
13740: PUSH
13741: DOUBLE
13742: LD_INT 1
13744: DEC
13745: ST_TO_ADDR
13746: LD_EXP 47
13750: PUSH
13751: FOR_TO
13752: IFFALSE 13907
// if Position_Sides [ i ] then
13754: LD_EXP 29
13758: PUSH
13759: LD_VAR 0 2
13763: ARRAY
13764: IFFALSE 13905
// for j := 1 to 8 do
13766: LD_ADDR_VAR 0 3
13770: PUSH
13771: DOUBLE
13772: LD_INT 1
13774: DEC
13775: ST_TO_ADDR
13776: LD_INT 8
13778: PUSH
13779: FOR_TO
13780: IFFALSE 13903
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13782: LD_EXP 23
13786: PUSH
13787: LD_VAR 0 3
13791: ARRAY
13792: PUSH
13793: LD_EXP 21
13797: PUSH
13798: LD_EXP 29
13802: PUSH
13803: LD_VAR 0 2
13807: ARRAY
13808: ARRAY
13809: PUSH
13810: LD_EXP 21
13814: PUSH
13815: LD_VAR 0 3
13819: ARRAY
13820: NONEQUAL
13821: PUSH
13822: LD_EXP 25
13826: NOT
13827: PUSH
13828: LD_EXP 29
13832: PUSH
13833: LD_VAR 0 2
13837: ARRAY
13838: PUSH
13839: LD_VAR 0 3
13843: NONEQUAL
13844: AND
13845: OR
13846: AND
13847: IFFALSE 13871
// ShowArea ( j , BuildUpAreas [ i ] ) else
13849: LD_VAR 0 3
13853: PPUSH
13854: LD_EXP 47
13858: PUSH
13859: LD_VAR 0 2
13863: ARRAY
13864: PPUSH
13865: CALL_OW 334
13869: GO 13901
// if ( j = your_side ) then
13871: LD_VAR 0 3
13875: PUSH
13876: LD_OWVAR 2
13880: EQUAL
13881: IFFALSE 13901
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13883: LD_EXP 47
13887: PUSH
13888: LD_VAR 0 2
13892: ARRAY
13893: PPUSH
13894: LD_INT 0
13896: PPUSH
13897: CALL_OW 424
13901: GO 13779
13903: POP
13904: POP
13905: GO 13751
13907: POP
13908: POP
// end ;
13909: LD_VAR 0 1
13913: RET
// every 5 marked 600 do var i , un ;
13914: GO 13916
13916: DISABLE
13917: LD_INT 0
13919: PPUSH
13920: PPUSH
// begin for i := 1 to BuildUpAreas do
13921: LD_ADDR_VAR 0 1
13925: PUSH
13926: DOUBLE
13927: LD_INT 1
13929: DEC
13930: ST_TO_ADDR
13931: LD_EXP 47
13935: PUSH
13936: FOR_TO
13937: IFFALSE 14092
// if Position_Sides [ i ] then
13939: LD_EXP 29
13943: PUSH
13944: LD_VAR 0 1
13948: ARRAY
13949: IFFALSE 14090
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13951: LD_ADDR_VAR 0 2
13955: PUSH
13956: LD_EXP 47
13960: PUSH
13961: LD_VAR 0 1
13965: ARRAY
13966: PPUSH
13967: LD_INT 2
13969: PUSH
13970: LD_INT 21
13972: PUSH
13973: LD_INT 1
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: PUSH
13980: LD_INT 21
13982: PUSH
13983: LD_INT 2
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 22
13997: PUSH
13998: LD_OWVAR 2
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PPUSH
14011: CALL_OW 70
14015: PUSH
14016: FOR_IN
14017: IFFALSE 14088
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
14019: LD_EXP 21
14023: PUSH
14024: LD_EXP 29
14028: PUSH
14029: LD_VAR 0 1
14033: ARRAY
14034: ARRAY
14035: PUSH
14036: LD_EXP 21
14040: PUSH
14041: LD_OWVAR 2
14045: ARRAY
14046: NONEQUAL
14047: PUSH
14048: LD_EXP 25
14052: NOT
14053: PUSH
14054: LD_EXP 29
14058: PUSH
14059: LD_VAR 0 1
14063: ARRAY
14064: PUSH
14065: LD_OWVAR 2
14069: NONEQUAL
14070: AND
14071: OR
14072: IFFALSE 14086
// ComMoveToArea ( un , BuildUpEscape ) ;
14074: LD_VAR 0 2
14078: PPUSH
14079: LD_INT 24
14081: PPUSH
14082: CALL_OW 113
14086: GO 14016
14088: POP
14089: POP
14090: GO 13936
14092: POP
14093: POP
// enable ;
14094: ENABLE
// end ;
14095: PPOPN 2
14097: END
// every 0 0$1 trigger def_builduptime do
14098: LD_EXP 63
14102: IFFALSE 14128
14104: GO 14106
14106: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14107: LD_INT 8400
14109: PUSH
14110: LD_EXP 63
14114: PUSH
14115: LD_INT 2100
14117: MUL
14118: PLUS
14119: PPUSH
14120: CALL_OW 67
// EndBuildUp ;
14124: CALL 13728 0 0
// end ; end_of_file
14128: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
14129: LD_INT 0
14131: PPUSH
14132: PPUSH
// if ( not IAmSpec ) then
14133: CALL_OW 531
14137: NOT
14138: IFFALSE 14154
// Result := Limits_Info ^  ;
14140: LD_ADDR_VAR 0 1
14144: PUSH
14145: LD_LOC 26
14149: PUSH
14150: LD_STRING 
14152: ADD
14153: ST_TO_ADDR
// for i := 1 to 8 do
14154: LD_ADDR_VAR 0 2
14158: PUSH
14159: DOUBLE
14160: LD_INT 1
14162: DEC
14163: ST_TO_ADDR
14164: LD_INT 8
14166: PUSH
14167: FOR_TO
14168: IFFALSE 14213
// if Cheaters [ i ] then
14170: LD_LOC 27
14174: PUSH
14175: LD_VAR 0 2
14179: ARRAY
14180: IFFALSE 14211
// Result := Result ^ [ #Cheater , i , i ] ;
14182: LD_ADDR_VAR 0 1
14186: PUSH
14187: LD_VAR 0 1
14191: PUSH
14192: LD_STRING #Cheater
14194: PUSH
14195: LD_VAR 0 2
14199: PUSH
14200: LD_VAR 0 2
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: LIST
14209: ADD
14210: ST_TO_ADDR
14211: GO 14167
14213: POP
14214: POP
// end ;
14215: LD_VAR 0 1
14219: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14220: LD_INT 0
14222: PPUSH
14223: PPUSH
14224: PPUSH
14225: PPUSH
14226: PPUSH
// case Game_Type of 10 :
14227: LD_EXP 48
14231: PUSH
14232: LD_INT 10
14234: DOUBLE
14235: EQUAL
14236: IFTRUE 14240
14238: GO 14251
14240: POP
// def_game_rules := 1 ; 11 :
14241: LD_ADDR_EXP 49
14245: PUSH
14246: LD_INT 1
14248: ST_TO_ADDR
14249: GO 14271
14251: LD_INT 11
14253: DOUBLE
14254: EQUAL
14255: IFTRUE 14259
14257: GO 14270
14259: POP
// def_game_rules := 3 ; end ;
14260: LD_ADDR_EXP 49
14264: PUSH
14265: LD_INT 3
14267: ST_TO_ADDR
14268: GO 14271
14270: POP
// case def_game_rules of 0 :
14271: LD_EXP 49
14275: PUSH
14276: LD_INT 0
14278: DOUBLE
14279: EQUAL
14280: IFTRUE 14284
14282: GO 14289
14284: POP
// exit ; 1 :
14285: GO 16347
14287: GO 16247
14289: LD_INT 1
14291: DOUBLE
14292: EQUAL
14293: IFTRUE 14297
14295: GO 14513
14297: POP
// begin def_base_level := 2 ;
14298: LD_ADDR_EXP 50
14302: PUSH
14303: LD_INT 2
14305: ST_TO_ADDR
// def_amount_of_people := 2 ;
14306: LD_ADDR_EXP 51
14310: PUSH
14311: LD_INT 2
14313: ST_TO_ADDR
// def_skill_level := 1 ;
14314: LD_ADDR_EXP 52
14318: PUSH
14319: LD_INT 1
14321: ST_TO_ADDR
// def_starting_resources := 2 ;
14322: LD_ADDR_EXP 53
14326: PUSH
14327: LD_INT 2
14329: ST_TO_ADDR
// def_shipments_density := 1 ;
14330: LD_ADDR_EXP 54
14334: PUSH
14335: LD_INT 1
14337: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14338: LD_ADDR_EXP 55
14342: PUSH
14343: LD_INT 0
14345: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14346: LD_ADDR_EXP 56
14350: PUSH
14351: LD_INT 1
14353: ST_TO_ADDR
// def_shared_vision := 1 ;
14354: LD_ADDR_EXP 57
14358: PUSH
14359: LD_INT 1
14361: ST_TO_ADDR
// def_morale_flags := 3 ;
14362: LD_ADDR_EXP 58
14366: PUSH
14367: LD_INT 3
14369: ST_TO_ADDR
// def_siberite_detection := 1 ;
14370: LD_ADDR_EXP 59
14374: PUSH
14375: LD_INT 1
14377: ST_TO_ADDR
// def_people_respawning := 1 ;
14378: LD_ADDR_EXP 60
14382: PUSH
14383: LD_INT 1
14385: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14386: LD_ADDR_EXP 61
14390: PUSH
14391: LD_INT 1
14393: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14394: LD_ADDR_EXP 62
14398: PUSH
14399: LD_INT 0
14401: ST_TO_ADDR
// def_builduptime := 2 ;
14402: LD_ADDR_EXP 63
14406: PUSH
14407: LD_INT 2
14409: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: EMPTY
14416: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: EMPTY
14423: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14424: LD_ADDR_LOC 21
14428: PUSH
14429: EMPTY
14430: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14431: LD_ADDR_LOC 22
14435: PUSH
14436: EMPTY
14437: ST_TO_ADDR
// Banned_Controls := [ ] ;
14438: LD_ADDR_LOC 23
14442: PUSH
14443: EMPTY
14444: ST_TO_ADDR
// Banned_Engines := [ ] ;
14445: LD_ADDR_LOC 24
14449: PUSH
14450: EMPTY
14451: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14452: LD_ADDR_LOC 19
14456: PUSH
14457: LD_INT 37
14459: PUSH
14460: EMPTY
14461: LIST
14462: PUSH
14463: LD_INT 4
14465: PUSH
14466: LD_INT 5
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 31
14475: PUSH
14476: LD_INT 32
14478: PUSH
14479: LD_INT 33
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: LIST
14491: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14492: LD_ADDR_LOC 20
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: LD_INT 2
14502: PUSH
14503: LD_INT 4
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: LIST
14510: ST_TO_ADDR
// end ; 2 :
14511: GO 16247
14513: LD_INT 2
14515: DOUBLE
14516: EQUAL
14517: IFTRUE 14521
14519: GO 14730
14521: POP
// begin def_base_level := 1 ;
14522: LD_ADDR_EXP 50
14526: PUSH
14527: LD_INT 1
14529: ST_TO_ADDR
// def_amount_of_people := 2 ;
14530: LD_ADDR_EXP 51
14534: PUSH
14535: LD_INT 2
14537: ST_TO_ADDR
// def_skill_level := 3 ;
14538: LD_ADDR_EXP 52
14542: PUSH
14543: LD_INT 3
14545: ST_TO_ADDR
// def_starting_resources := 3 ;
14546: LD_ADDR_EXP 53
14550: PUSH
14551: LD_INT 3
14553: ST_TO_ADDR
// def_shipments_density := 2 ;
14554: LD_ADDR_EXP 54
14558: PUSH
14559: LD_INT 2
14561: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14562: LD_ADDR_EXP 55
14566: PUSH
14567: LD_INT 1
14569: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14570: LD_ADDR_EXP 56
14574: PUSH
14575: LD_INT 2
14577: ST_TO_ADDR
// def_shared_vision := 1 ;
14578: LD_ADDR_EXP 57
14582: PUSH
14583: LD_INT 1
14585: ST_TO_ADDR
// def_morale_flags := 0 ;
14586: LD_ADDR_EXP 58
14590: PUSH
14591: LD_INT 0
14593: ST_TO_ADDR
// def_siberite_detection := 1 ;
14594: LD_ADDR_EXP 59
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
// def_people_respawning := 0 ;
14602: LD_ADDR_EXP 60
14606: PUSH
14607: LD_INT 0
14609: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14610: LD_ADDR_EXP 61
14614: PUSH
14615: LD_INT 0
14617: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14618: LD_ADDR_EXP 62
14622: PUSH
14623: LD_INT 0
14625: ST_TO_ADDR
// def_builduptime := 2 ;
14626: LD_ADDR_EXP 63
14630: PUSH
14631: LD_INT 2
14633: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14634: LD_ADDR_VAR 0 2
14638: PUSH
14639: LD_INT 1
14641: PUSH
14642: EMPTY
14643: LIST
14644: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14645: LD_ADDR_VAR 0 3
14649: PUSH
14650: EMPTY
14651: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14652: LD_ADDR_LOC 21
14656: PUSH
14657: EMPTY
14658: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14659: LD_ADDR_LOC 22
14663: PUSH
14664: EMPTY
14665: ST_TO_ADDR
// Banned_Controls := [ ] ;
14666: LD_ADDR_LOC 23
14670: PUSH
14671: EMPTY
14672: ST_TO_ADDR
// Banned_Engines := [ ] ;
14673: LD_ADDR_LOC 24
14677: PUSH
14678: EMPTY
14679: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14680: LD_ADDR_LOC 19
14684: PUSH
14685: LD_INT 4
14687: PUSH
14688: LD_INT 5
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 31
14697: PUSH
14698: LD_INT 32
14700: PUSH
14701: LD_INT 33
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: LIST
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
14713: LD_ADDR_LOC 20
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: LD_INT 2
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: ST_TO_ADDR
// end ; 3 :
14728: GO 16247
14730: LD_INT 3
14732: DOUBLE
14733: EQUAL
14734: IFTRUE 14738
14736: GO 14981
14738: POP
// begin def_base_level := 1 ;
14739: LD_ADDR_EXP 50
14743: PUSH
14744: LD_INT 1
14746: ST_TO_ADDR
// def_amount_of_people := 2 ;
14747: LD_ADDR_EXP 51
14751: PUSH
14752: LD_INT 2
14754: ST_TO_ADDR
// def_skill_level := 3 ;
14755: LD_ADDR_EXP 52
14759: PUSH
14760: LD_INT 3
14762: ST_TO_ADDR
// def_starting_resources := 3 ;
14763: LD_ADDR_EXP 53
14767: PUSH
14768: LD_INT 3
14770: ST_TO_ADDR
// def_shipments_density := 1 ;
14771: LD_ADDR_EXP 54
14775: PUSH
14776: LD_INT 1
14778: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14779: LD_ADDR_EXP 55
14783: PUSH
14784: LD_INT 0
14786: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14787: LD_ADDR_EXP 56
14791: PUSH
14792: LD_INT 1
14794: ST_TO_ADDR
// def_shared_vision := 1 ;
14795: LD_ADDR_EXP 57
14799: PUSH
14800: LD_INT 1
14802: ST_TO_ADDR
// def_morale_flags := 0 ;
14803: LD_ADDR_EXP 58
14807: PUSH
14808: LD_INT 0
14810: ST_TO_ADDR
// def_siberite_detection := 1 ;
14811: LD_ADDR_EXP 59
14815: PUSH
14816: LD_INT 1
14818: ST_TO_ADDR
// def_people_respawning := 0 ;
14819: LD_ADDR_EXP 60
14823: PUSH
14824: LD_INT 0
14826: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14827: LD_ADDR_EXP 61
14831: PUSH
14832: LD_INT 2
14834: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14835: LD_ADDR_EXP 62
14839: PUSH
14840: LD_INT 0
14842: ST_TO_ADDR
// def_builduptime := 1 ;
14843: LD_ADDR_EXP 63
14847: PUSH
14848: LD_INT 1
14850: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14851: LD_ADDR_VAR 0 2
14855: PUSH
14856: LD_INT 23
14858: PUSH
14859: EMPTY
14860: LIST
14861: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14862: LD_ADDR_VAR 0 3
14866: PUSH
14867: LD_INT 2
14869: PUSH
14870: LD_INT 37
14872: PUSH
14873: LD_INT 32
14875: PUSH
14876: LD_INT 33
14878: PUSH
14879: LD_INT 36
14881: PUSH
14882: LD_INT 16
14884: PUSH
14885: LD_INT 23
14887: PUSH
14888: LD_INT 21
14890: PUSH
14891: LD_INT 18
14893: PUSH
14894: LD_INT 22
14896: PUSH
14897: LD_INT 20
14899: PUSH
14900: LD_INT 19
14902: PUSH
14903: LD_INT 25
14905: PUSH
14906: LD_INT 17
14908: PUSH
14909: LD_INT 24
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14929: LD_ADDR_LOC 21
14933: PUSH
14934: EMPTY
14935: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14936: LD_ADDR_LOC 22
14940: PUSH
14941: EMPTY
14942: ST_TO_ADDR
// Banned_Controls := [ ] ;
14943: LD_ADDR_LOC 23
14947: PUSH
14948: EMPTY
14949: ST_TO_ADDR
// Banned_Engines := [ ] ;
14950: LD_ADDR_LOC 24
14954: PUSH
14955: EMPTY
14956: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14957: LD_ADDR_LOC 19
14961: PUSH
14962: EMPTY
14963: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14964: LD_ADDR_LOC 20
14968: PUSH
14969: EMPTY
14970: ST_TO_ADDR
// No_Mechs := true ;
14971: LD_ADDR_EXP 64
14975: PUSH
14976: LD_INT 1
14978: ST_TO_ADDR
// end ; 4 :
14979: GO 16247
14981: LD_INT 4
14983: DOUBLE
14984: EQUAL
14985: IFTRUE 14989
14987: GO 15164
14989: POP
// begin def_base_level := 1 ;
14990: LD_ADDR_EXP 50
14994: PUSH
14995: LD_INT 1
14997: ST_TO_ADDR
// def_amount_of_people := 2 ;
14998: LD_ADDR_EXP 51
15002: PUSH
15003: LD_INT 2
15005: ST_TO_ADDR
// def_skill_level := 3 ;
15006: LD_ADDR_EXP 52
15010: PUSH
15011: LD_INT 3
15013: ST_TO_ADDR
// def_starting_resources := 3 ;
15014: LD_ADDR_EXP 53
15018: PUSH
15019: LD_INT 3
15021: ST_TO_ADDR
// def_shipments_density := 2 ;
15022: LD_ADDR_EXP 54
15026: PUSH
15027: LD_INT 2
15029: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15030: LD_ADDR_EXP 55
15034: PUSH
15035: LD_INT 1
15037: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15038: LD_ADDR_EXP 56
15042: PUSH
15043: LD_INT 2
15045: ST_TO_ADDR
// def_shared_vision := 1 ;
15046: LD_ADDR_EXP 57
15050: PUSH
15051: LD_INT 1
15053: ST_TO_ADDR
// def_morale_flags := 0 ;
15054: LD_ADDR_EXP 58
15058: PUSH
15059: LD_INT 0
15061: ST_TO_ADDR
// def_siberite_detection := 1 ;
15062: LD_ADDR_EXP 59
15066: PUSH
15067: LD_INT 1
15069: ST_TO_ADDR
// def_people_respawning := 0 ;
15070: LD_ADDR_EXP 60
15074: PUSH
15075: LD_INT 0
15077: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
15078: LD_ADDR_EXP 61
15082: PUSH
15083: LD_INT 0
15085: ST_TO_ADDR
// def_siberite_bomb := 1 ;
15086: LD_ADDR_EXP 62
15090: PUSH
15091: LD_INT 1
15093: ST_TO_ADDR
// def_builduptime := 3 ;
15094: LD_ADDR_EXP 63
15098: PUSH
15099: LD_INT 3
15101: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
15102: LD_ADDR_VAR 0 2
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
15113: LD_ADDR_VAR 0 3
15117: PUSH
15118: EMPTY
15119: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15120: LD_ADDR_LOC 21
15124: PUSH
15125: EMPTY
15126: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15127: LD_ADDR_LOC 22
15131: PUSH
15132: EMPTY
15133: ST_TO_ADDR
// Banned_Controls := [ ] ;
15134: LD_ADDR_LOC 23
15138: PUSH
15139: EMPTY
15140: ST_TO_ADDR
// Banned_Engines := [ ] ;
15141: LD_ADDR_LOC 24
15145: PUSH
15146: EMPTY
15147: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15148: LD_ADDR_LOC 19
15152: PUSH
15153: EMPTY
15154: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15155: LD_ADDR_LOC 20
15159: PUSH
15160: EMPTY
15161: ST_TO_ADDR
// end ; 5 :
15162: GO 16247
15164: LD_INT 5
15166: DOUBLE
15167: EQUAL
15168: IFTRUE 15172
15170: GO 15421
15172: POP
// begin def_base_level := 0 ;
15173: LD_ADDR_EXP 50
15177: PUSH
15178: LD_INT 0
15180: ST_TO_ADDR
// def_amount_of_people := 0 ;
15181: LD_ADDR_EXP 51
15185: PUSH
15186: LD_INT 0
15188: ST_TO_ADDR
// def_skill_level := 0 ;
15189: LD_ADDR_EXP 52
15193: PUSH
15194: LD_INT 0
15196: ST_TO_ADDR
// def_starting_resources := 0 ;
15197: LD_ADDR_EXP 53
15201: PUSH
15202: LD_INT 0
15204: ST_TO_ADDR
// def_shipments_density := 0 ;
15205: LD_ADDR_EXP 54
15209: PUSH
15210: LD_INT 0
15212: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15213: LD_ADDR_EXP 55
15217: PUSH
15218: LD_INT 0
15220: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15221: LD_ADDR_EXP 56
15225: PUSH
15226: LD_INT 0
15228: ST_TO_ADDR
// def_shared_vision := 1 ;
15229: LD_ADDR_EXP 57
15233: PUSH
15234: LD_INT 1
15236: ST_TO_ADDR
// def_morale_flags := 0 ;
15237: LD_ADDR_EXP 58
15241: PUSH
15242: LD_INT 0
15244: ST_TO_ADDR
// def_siberite_detection := 0 ;
15245: LD_ADDR_EXP 59
15249: PUSH
15250: LD_INT 0
15252: ST_TO_ADDR
// def_people_respawning := 1 ;
15253: LD_ADDR_EXP 60
15257: PUSH
15258: LD_INT 1
15260: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15261: LD_ADDR_EXP 61
15265: PUSH
15266: LD_INT 1
15268: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15269: LD_ADDR_EXP 62
15273: PUSH
15274: LD_INT 0
15276: ST_TO_ADDR
// def_builduptime := 0 ;
15277: LD_ADDR_EXP 63
15281: PUSH
15282: LD_INT 0
15284: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
15285: LD_ADDR_VAR 0 2
15289: PUSH
15290: LD_INT 10
15292: PUSH
15293: LD_INT 3
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
15300: LD_ADDR_VAR 0 3
15304: PUSH
15305: LD_INT 12
15307: PUSH
15308: LD_INT 11
15310: PUSH
15311: LD_INT 14
15313: PUSH
15314: LD_INT 13
15316: PUSH
15317: LD_INT 5
15319: PUSH
15320: LD_INT 24
15322: PUSH
15323: LD_INT 21
15325: PUSH
15326: LD_INT 33
15328: PUSH
15329: LD_INT 36
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
15343: LD_ADDR_LOC 21
15347: PUSH
15348: LD_INT 31
15350: PUSH
15351: EMPTY
15352: LIST
15353: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15354: LD_ADDR_LOC 22
15358: PUSH
15359: EMPTY
15360: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
15361: LD_ADDR_LOC 23
15365: PUSH
15366: LD_INT 2
15368: PUSH
15369: EMPTY
15370: LIST
15371: ST_TO_ADDR
// Banned_Engines := [ ] ;
15372: LD_ADDR_LOC 24
15376: PUSH
15377: EMPTY
15378: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
15379: LD_ADDR_LOC 19
15383: PUSH
15384: LD_INT 4
15386: PUSH
15387: EMPTY
15388: LIST
15389: PUSH
15390: LD_INT 31
15392: PUSH
15393: LD_INT 32
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
15404: LD_ADDR_LOC 20
15408: PUSH
15409: LD_INT 1
15411: PUSH
15412: LD_INT 1
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: ST_TO_ADDR
// end ; 6 :
15419: GO 16247
15421: LD_INT 6
15423: DOUBLE
15424: EQUAL
15425: IFTRUE 15429
15427: GO 15632
15429: POP
// begin def_base_level := 1 ;
15430: LD_ADDR_EXP 50
15434: PUSH
15435: LD_INT 1
15437: ST_TO_ADDR
// def_amount_of_people := 2 ;
15438: LD_ADDR_EXP 51
15442: PUSH
15443: LD_INT 2
15445: ST_TO_ADDR
// def_skill_level := 3 ;
15446: LD_ADDR_EXP 52
15450: PUSH
15451: LD_INT 3
15453: ST_TO_ADDR
// def_starting_resources := 3 ;
15454: LD_ADDR_EXP 53
15458: PUSH
15459: LD_INT 3
15461: ST_TO_ADDR
// def_shipments_density := 1 ;
15462: LD_ADDR_EXP 54
15466: PUSH
15467: LD_INT 1
15469: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15470: LD_ADDR_EXP 55
15474: PUSH
15475: LD_INT 0
15477: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15478: LD_ADDR_EXP 56
15482: PUSH
15483: LD_INT 1
15485: ST_TO_ADDR
// def_shared_vision := 1 ;
15486: LD_ADDR_EXP 57
15490: PUSH
15491: LD_INT 1
15493: ST_TO_ADDR
// def_morale_flags := 0 ;
15494: LD_ADDR_EXP 58
15498: PUSH
15499: LD_INT 0
15501: ST_TO_ADDR
// def_siberite_detection := 1 ;
15502: LD_ADDR_EXP 59
15506: PUSH
15507: LD_INT 1
15509: ST_TO_ADDR
// def_people_respawning := 2 ;
15510: LD_ADDR_EXP 60
15514: PUSH
15515: LD_INT 2
15517: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15518: LD_ADDR_EXP 61
15522: PUSH
15523: LD_INT 1
15525: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15526: LD_ADDR_EXP 62
15530: PUSH
15531: LD_INT 0
15533: ST_TO_ADDR
// def_builduptime := 1 ;
15534: LD_ADDR_EXP 63
15538: PUSH
15539: LD_INT 1
15541: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15542: LD_ADDR_VAR 0 2
15546: PUSH
15547: LD_INT 23
15549: PUSH
15550: EMPTY
15551: LIST
15552: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
15553: LD_ADDR_VAR 0 3
15557: PUSH
15558: LD_INT 2
15560: PUSH
15561: LD_INT 37
15563: PUSH
15564: LD_INT 31
15566: PUSH
15567: LD_INT 32
15569: PUSH
15570: LD_INT 33
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15580: LD_ADDR_LOC 21
15584: PUSH
15585: EMPTY
15586: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15587: LD_ADDR_LOC 22
15591: PUSH
15592: EMPTY
15593: ST_TO_ADDR
// Banned_Controls := [ ] ;
15594: LD_ADDR_LOC 23
15598: PUSH
15599: EMPTY
15600: ST_TO_ADDR
// Banned_Engines := [ ] ;
15601: LD_ADDR_LOC 24
15605: PUSH
15606: EMPTY
15607: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15608: LD_ADDR_LOC 19
15612: PUSH
15613: EMPTY
15614: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15615: LD_ADDR_LOC 20
15619: PUSH
15620: EMPTY
15621: ST_TO_ADDR
// No_Mechs := true ;
15622: LD_ADDR_EXP 64
15626: PUSH
15627: LD_INT 1
15629: ST_TO_ADDR
// end ; 7 :
15630: GO 16247
15632: LD_INT 7
15634: DOUBLE
15635: EQUAL
15636: IFTRUE 15640
15638: GO 15838
15640: POP
// begin def_base_level := 1 ;
15641: LD_ADDR_EXP 50
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// def_amount_of_people := 2 ;
15649: LD_ADDR_EXP 51
15653: PUSH
15654: LD_INT 2
15656: ST_TO_ADDR
// def_skill_level := 3 ;
15657: LD_ADDR_EXP 52
15661: PUSH
15662: LD_INT 3
15664: ST_TO_ADDR
// def_starting_resources := 3 ;
15665: LD_ADDR_EXP 53
15669: PUSH
15670: LD_INT 3
15672: ST_TO_ADDR
// def_shipments_density := 1 ;
15673: LD_ADDR_EXP 54
15677: PUSH
15678: LD_INT 1
15680: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15681: LD_ADDR_EXP 55
15685: PUSH
15686: LD_INT 1
15688: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15689: LD_ADDR_EXP 56
15693: PUSH
15694: LD_INT 2
15696: ST_TO_ADDR
// def_shared_vision := 1 ;
15697: LD_ADDR_EXP 57
15701: PUSH
15702: LD_INT 1
15704: ST_TO_ADDR
// def_morale_flags := 0 ;
15705: LD_ADDR_EXP 58
15709: PUSH
15710: LD_INT 0
15712: ST_TO_ADDR
// def_siberite_detection := 1 ;
15713: LD_ADDR_EXP 59
15717: PUSH
15718: LD_INT 1
15720: ST_TO_ADDR
// def_people_respawning := 0 ;
15721: LD_ADDR_EXP 60
15725: PUSH
15726: LD_INT 0
15728: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15729: LD_ADDR_EXP 61
15733: PUSH
15734: LD_INT 1
15736: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15737: LD_ADDR_EXP 62
15741: PUSH
15742: LD_INT 0
15744: ST_TO_ADDR
// def_builduptime := 3 ;
15745: LD_ADDR_EXP 63
15749: PUSH
15750: LD_INT 3
15752: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15753: LD_ADDR_VAR 0 2
15757: PUSH
15758: LD_INT 23
15760: PUSH
15761: EMPTY
15762: LIST
15763: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
15764: LD_ADDR_VAR 0 3
15768: PUSH
15769: LD_INT 37
15771: PUSH
15772: EMPTY
15773: LIST
15774: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15775: LD_ADDR_LOC 21
15779: PUSH
15780: EMPTY
15781: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15782: LD_ADDR_LOC 22
15786: PUSH
15787: EMPTY
15788: ST_TO_ADDR
// Banned_Controls := [ ] ;
15789: LD_ADDR_LOC 23
15793: PUSH
15794: EMPTY
15795: ST_TO_ADDR
// Banned_Engines := [ ] ;
15796: LD_ADDR_LOC 24
15800: PUSH
15801: EMPTY
15802: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15803: LD_ADDR_LOC 19
15807: PUSH
15808: LD_INT 31
15810: PUSH
15811: LD_INT 32
15813: PUSH
15814: LD_INT 33
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
15825: LD_ADDR_LOC 20
15829: PUSH
15830: LD_INT 10
15832: PUSH
15833: EMPTY
15834: LIST
15835: ST_TO_ADDR
// end ; 8 :
15836: GO 16247
15838: LD_INT 8
15840: DOUBLE
15841: EQUAL
15842: IFTRUE 15846
15844: GO 16246
15846: POP
// begin def_base_level := 0 ;
15847: LD_ADDR_EXP 50
15851: PUSH
15852: LD_INT 0
15854: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
15855: LD_ADDR_EXP 51
15859: PUSH
15860: LD_INT 0
15862: PPUSH
15863: LD_INT 1
15865: PPUSH
15866: CALL_OW 12
15870: ST_TO_ADDR
// def_skill_level := 0 ;
15871: LD_ADDR_EXP 52
15875: PUSH
15876: LD_INT 0
15878: ST_TO_ADDR
// def_starting_resources := 2 ;
15879: LD_ADDR_EXP 53
15883: PUSH
15884: LD_INT 2
15886: ST_TO_ADDR
// def_shipments_density := 1 ;
15887: LD_ADDR_EXP 54
15891: PUSH
15892: LD_INT 1
15894: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15895: LD_ADDR_EXP 55
15899: PUSH
15900: LD_INT 0
15902: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15903: LD_ADDR_EXP 56
15907: PUSH
15908: LD_INT 0
15910: ST_TO_ADDR
// def_shared_vision := 1 ;
15911: LD_ADDR_EXP 57
15915: PUSH
15916: LD_INT 1
15918: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
15919: LD_ADDR_EXP 58
15923: PUSH
15924: LD_INT 0
15926: PPUSH
15927: LD_INT 2
15929: PPUSH
15930: CALL_OW 12
15934: ST_TO_ADDR
// def_siberite_detection := 0 ;
15935: LD_ADDR_EXP 59
15939: PUSH
15940: LD_INT 0
15942: ST_TO_ADDR
// def_people_respawning := 0 ;
15943: LD_ADDR_EXP 60
15947: PUSH
15948: LD_INT 0
15950: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
15951: LD_ADDR_EXP 61
15955: PUSH
15956: LD_INT 2
15958: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15959: LD_ADDR_EXP 62
15963: PUSH
15964: LD_INT 0
15966: ST_TO_ADDR
// def_builduptime := 0 ;
15967: LD_ADDR_EXP 63
15971: PUSH
15972: LD_INT 0
15974: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
15975: LD_ADDR_VAR 0 2
15979: PUSH
15980: LD_INT 23
15982: PUSH
15983: LD_INT 20
15985: PUSH
15986: LD_INT 40
15988: PUSH
15989: LD_INT 47
15991: PUSH
15992: LD_INT 46
15994: PUSH
15995: LD_INT 39
15997: PUSH
15998: LD_INT 71
16000: PUSH
16001: LD_INT 34
16003: PUSH
16004: LD_INT 41
16006: PUSH
16007: LD_INT 44
16009: PUSH
16010: LD_INT 17
16012: PUSH
16013: LD_INT 16
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
16030: LD_ADDR_VAR 0 3
16034: PUSH
16035: LD_INT 37
16037: PUSH
16038: LD_INT 5
16040: PUSH
16041: LD_INT 13
16043: PUSH
16044: LD_INT 34
16046: PUSH
16047: LD_INT 12
16049: PUSH
16050: LD_INT 15
16052: PUSH
16053: LD_INT 11
16055: PUSH
16056: LD_INT 14
16058: PUSH
16059: LD_INT 29
16061: PUSH
16062: LD_INT 30
16064: PUSH
16065: LD_INT 28
16067: PUSH
16068: LD_INT 24
16070: PUSH
16071: LD_INT 25
16073: PUSH
16074: LD_INT 20
16076: PUSH
16077: LD_INT 21
16079: PUSH
16080: LD_INT 22
16082: PUSH
16083: LD_INT 36
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16105: LD_ADDR_LOC 21
16109: PUSH
16110: EMPTY
16111: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
16112: LD_ADDR_LOC 22
16116: PUSH
16117: LD_INT 14
16119: PUSH
16120: EMPTY
16121: LIST
16122: ST_TO_ADDR
// Banned_Controls := [ ] ;
16123: LD_ADDR_LOC 23
16127: PUSH
16128: EMPTY
16129: ST_TO_ADDR
// Banned_Engines := [ ] ;
16130: LD_ADDR_LOC 24
16134: PUSH
16135: EMPTY
16136: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
16137: LD_ADDR_LOC 19
16141: PUSH
16142: LD_INT 31
16144: PUSH
16145: LD_INT 32
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 4
16154: PUSH
16155: EMPTY
16156: LIST
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
16162: LD_ADDR_LOC 20
16166: PUSH
16167: LD_INT 2
16169: PUSH
16170: LD_INT 1
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: ST_TO_ADDR
// for i := 1 to 8 do
16177: LD_ADDR_VAR 0 4
16181: PUSH
16182: DOUBLE
16183: LD_INT 1
16185: DEC
16186: ST_TO_ADDR
16187: LD_INT 8
16189: PUSH
16190: FOR_TO
16191: IFFALSE 16242
// if ( Side_Nations [ i ] = 3 ) then
16193: LD_EXP 24
16197: PUSH
16198: LD_VAR 0 4
16202: ARRAY
16203: PUSH
16204: LD_INT 3
16206: EQUAL
16207: IFFALSE 16240
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
16209: LD_ADDR_EXP 24
16213: PUSH
16214: LD_EXP 24
16218: PPUSH
16219: LD_VAR 0 4
16223: PPUSH
16224: LD_INT 1
16226: PPUSH
16227: LD_INT 2
16229: PPUSH
16230: CALL_OW 12
16234: PPUSH
16235: CALL_OW 1
16239: ST_TO_ADDR
16240: GO 16190
16242: POP
16243: POP
// end ; end ;
16244: GO 16247
16246: POP
// for i := 1 to 8 do
16247: LD_ADDR_VAR 0 4
16251: PUSH
16252: DOUBLE
16253: LD_INT 1
16255: DEC
16256: ST_TO_ADDR
16257: LD_INT 8
16259: PUSH
16260: FOR_TO
16261: IFFALSE 16345
// if Side_Positions [ i ] then
16263: LD_EXP 23
16267: PUSH
16268: LD_VAR 0 4
16272: ARRAY
16273: IFFALSE 16343
// begin for j in Unavailable_Techs do
16275: LD_ADDR_VAR 0 5
16279: PUSH
16280: LD_VAR 0 2
16284: PUSH
16285: FOR_IN
16286: IFFALSE 16307
// SetTech ( j , i , 0 ) ;
16288: LD_VAR 0 5
16292: PPUSH
16293: LD_VAR 0 4
16297: PPUSH
16298: LD_INT 0
16300: PPUSH
16301: CALL_OW 322
16305: GO 16285
16307: POP
16308: POP
// for j in Unavailable_Builds do
16309: LD_ADDR_VAR 0 5
16313: PUSH
16314: LD_VAR 0 3
16318: PUSH
16319: FOR_IN
16320: IFFALSE 16341
// SetRestrict ( j , i , 0 ) ;
16322: LD_VAR 0 5
16326: PPUSH
16327: LD_VAR 0 4
16331: PPUSH
16332: LD_INT 0
16334: PPUSH
16335: CALL_OW 324
16339: GO 16319
16341: POP
16342: POP
// end ;
16343: GO 16260
16345: POP
16346: POP
// end ;
16347: LD_VAR 0 1
16351: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
16352: LD_INT 0
16354: PPUSH
16355: PPUSH
16356: PPUSH
16357: PPUSH
16358: PPUSH
16359: PPUSH
16360: PPUSH
// for i := 1 to Restricted_Builds do
16361: LD_ADDR_VAR 0 2
16365: PUSH
16366: DOUBLE
16367: LD_INT 1
16369: DEC
16370: ST_TO_ADDR
16371: LD_LOC 19
16375: PUSH
16376: FOR_TO
16377: IFFALSE 16687
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
16379: LD_LOC 19
16383: PUSH
16384: LD_VAR 0 2
16388: ARRAY
16389: PUSH
16390: LD_INT 1
16392: ARRAY
16393: PUSH
16394: LD_INT 31
16396: DOUBLE
16397: EQUAL
16398: IFTRUE 16414
16400: LD_INT 32
16402: DOUBLE
16403: EQUAL
16404: IFTRUE 16414
16406: LD_INT 33
16408: DOUBLE
16409: EQUAL
16410: IFTRUE 16414
16412: GO 16425
16414: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
16415: LD_ADDR_VAR 0 6
16419: PUSH
16420: LD_STRING #Turrets
16422: ST_TO_ADDR
16423: GO 16470
16425: LD_INT 4
16427: DOUBLE
16428: EQUAL
16429: IFTRUE 16439
16431: LD_INT 5
16433: DOUBLE
16434: EQUAL
16435: IFTRUE 16439
16437: GO 16450
16439: POP
// btype := #Armouries ; b_Behemoth :
16440: LD_ADDR_VAR 0 6
16444: PUSH
16445: LD_STRING #Armouries
16447: ST_TO_ADDR
16448: GO 16470
16450: LD_INT 37
16452: DOUBLE
16453: EQUAL
16454: IFTRUE 16458
16456: GO 16469
16458: POP
// btype := #Behemoths ; end ;
16459: LD_ADDR_VAR 0 6
16463: PUSH
16464: LD_STRING #Behemoths
16466: ST_TO_ADDR
16467: GO 16470
16469: POP
// list := [ ] ;
16470: LD_ADDR_VAR 0 7
16474: PUSH
16475: EMPTY
16476: ST_TO_ADDR
// for j := 1 to 8 do
16477: LD_ADDR_VAR 0 3
16481: PUSH
16482: DOUBLE
16483: LD_INT 1
16485: DEC
16486: ST_TO_ADDR
16487: LD_INT 8
16489: PUSH
16490: FOR_TO
16491: IFFALSE 16584
// if Side_Positions [ j ] then
16493: LD_EXP 23
16497: PUSH
16498: LD_VAR 0 3
16502: ARRAY
16503: IFFALSE 16582
// begin amount := 0 ;
16505: LD_ADDR_VAR 0 5
16509: PUSH
16510: LD_INT 0
16512: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
16513: LD_ADDR_VAR 0 4
16517: PUSH
16518: LD_LOC 19
16522: PUSH
16523: LD_VAR 0 2
16527: ARRAY
16528: PUSH
16529: FOR_IN
16530: IFFALSE 16578
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
16532: LD_ADDR_VAR 0 5
16536: PUSH
16537: LD_VAR 0 5
16541: PUSH
16542: LD_INT 22
16544: PUSH
16545: LD_VAR 0 3
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 30
16556: PUSH
16557: LD_VAR 0 4
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PPUSH
16570: CALL_OW 69
16574: PLUS
16575: ST_TO_ADDR
16576: GO 16529
16578: POP
16579: POP
// break ;
16580: GO 16584
// end ;
16582: GO 16490
16584: POP
16585: POP
// list := [ ] ;
16586: LD_ADDR_VAR 0 7
16590: PUSH
16591: EMPTY
16592: ST_TO_ADDR
// for j := 1 to 8 do
16593: LD_ADDR_VAR 0 3
16597: PUSH
16598: DOUBLE
16599: LD_INT 1
16601: DEC
16602: ST_TO_ADDR
16603: LD_INT 8
16605: PUSH
16606: FOR_TO
16607: IFFALSE 16627
// list := list ^ amount ;
16609: LD_ADDR_VAR 0 7
16613: PUSH
16614: LD_VAR 0 7
16618: PUSH
16619: LD_VAR 0 5
16623: ADD
16624: ST_TO_ADDR
16625: GO 16606
16627: POP
16628: POP
// Already_Built := Already_Built ^ [ list ] ;
16629: LD_ADDR_LOC 25
16633: PUSH
16634: LD_LOC 25
16638: PUSH
16639: LD_VAR 0 7
16643: PUSH
16644: EMPTY
16645: LIST
16646: ADD
16647: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
16648: LD_ADDR_LOC 26
16652: PUSH
16653: LD_LOC 26
16657: PUSH
16658: LD_VAR 0 6
16662: PUSH
16663: LD_VAR 0 5
16667: PUSH
16668: LD_LOC 20
16672: PUSH
16673: LD_VAR 0 2
16677: ARRAY
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: ADD
16684: ST_TO_ADDR
// end ;
16685: GO 16376
16687: POP
16688: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16689: LD_ADDR_LOC 27
16693: PUSH
16694: LD_INT 0
16696: PUSH
16697: LD_INT 0
16699: PUSH
16700: LD_INT 0
16702: PUSH
16703: LD_INT 0
16705: PUSH
16706: LD_INT 0
16708: PUSH
16709: LD_INT 0
16711: PUSH
16712: LD_INT 0
16714: PUSH
16715: LD_INT 0
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: ST_TO_ADDR
// if Limits_Info then
16728: LD_LOC 26
16732: IFFALSE 16748
// Limits_Info := #Limits ^ Limits_Info ;
16734: LD_ADDR_LOC 26
16738: PUSH
16739: LD_STRING #Limits
16741: PUSH
16742: LD_LOC 26
16746: ADD
16747: ST_TO_ADDR
// end ;
16748: LD_VAR 0 1
16752: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
16753: LD_INT 0
16755: PPUSH
16756: PPUSH
16757: PPUSH
16758: PPUSH
// for i := 1 to Restricted_Builds do
16759: LD_ADDR_VAR 0 7
16763: PUSH
16764: DOUBLE
16765: LD_INT 1
16767: DEC
16768: ST_TO_ADDR
16769: LD_LOC 19
16773: PUSH
16774: FOR_TO
16775: IFFALSE 17198
// if BType in Restricted_Builds [ i ] then
16777: LD_VAR 0 2
16781: PUSH
16782: LD_LOC 19
16786: PUSH
16787: LD_VAR 0 7
16791: ARRAY
16792: IN
16793: IFFALSE 17196
// begin if old_side then
16795: LD_VAR 0 4
16799: IFFALSE 16925
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
16801: LD_LOC 25
16805: PUSH
16806: LD_VAR 0 7
16810: ARRAY
16811: PUSH
16812: LD_VAR 0 3
16816: ARRAY
16817: PUSH
16818: LD_VAR 0 5
16822: PLUS
16823: PUSH
16824: LD_LOC 20
16828: PUSH
16829: LD_VAR 0 7
16833: ARRAY
16834: GREATER
16835: IFFALSE 16861
// begin SetSide ( un , old_side ) ;
16837: LD_VAR 0 1
16841: PPUSH
16842: LD_VAR 0 4
16846: PPUSH
16847: CALL_OW 235
// count := 0 ;
16851: LD_ADDR_VAR 0 5
16855: PUSH
16856: LD_INT 0
16858: ST_TO_ADDR
// end else
16859: GO 16925
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
16861: LD_ADDR_LOC 25
16865: PUSH
16866: LD_LOC 25
16870: PPUSH
16871: LD_VAR 0 7
16875: PPUSH
16876: LD_LOC 25
16880: PUSH
16881: LD_VAR 0 7
16885: ARRAY
16886: PPUSH
16887: LD_VAR 0 4
16891: PPUSH
16892: LD_LOC 25
16896: PUSH
16897: LD_VAR 0 7
16901: ARRAY
16902: PUSH
16903: LD_VAR 0 4
16907: ARRAY
16908: PUSH
16909: LD_VAR 0 5
16913: MINUS
16914: PPUSH
16915: CALL_OW 1
16919: PPUSH
16920: CALL_OW 1
16924: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
16925: LD_ADDR_LOC 25
16929: PUSH
16930: LD_LOC 25
16934: PPUSH
16935: LD_VAR 0 7
16939: PPUSH
16940: LD_LOC 25
16944: PUSH
16945: LD_VAR 0 7
16949: ARRAY
16950: PPUSH
16951: LD_VAR 0 3
16955: PPUSH
16956: LD_LOC 25
16960: PUSH
16961: LD_VAR 0 7
16965: ARRAY
16966: PUSH
16967: LD_VAR 0 3
16971: ARRAY
16972: PUSH
16973: LD_VAR 0 5
16977: PLUS
16978: PPUSH
16979: CALL_OW 1
16983: PPUSH
16984: CALL_OW 1
16988: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
16989: LD_VAR 0 5
16993: PUSH
16994: LD_INT 0
16996: NONEQUAL
16997: PUSH
16998: LD_VAR 0 3
17002: PUSH
17003: LD_OWVAR 2
17007: EQUAL
17008: AND
17009: IFFALSE 17052
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
17011: LD_ADDR_LOC 26
17015: PUSH
17016: LD_LOC 26
17020: PPUSH
17021: LD_INT 3
17023: PUSH
17024: LD_VAR 0 7
17028: MUL
17029: PPUSH
17030: LD_LOC 25
17034: PUSH
17035: LD_VAR 0 7
17039: ARRAY
17040: PUSH
17041: LD_VAR 0 3
17045: ARRAY
17046: PPUSH
17047: CALL_OW 1
17051: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
17052: LD_LOC 25
17056: PUSH
17057: LD_VAR 0 7
17061: ARRAY
17062: PUSH
17063: LD_VAR 0 3
17067: ARRAY
17068: PUSH
17069: LD_LOC 20
17073: PUSH
17074: LD_VAR 0 7
17078: ARRAY
17079: GREATER
17080: IFFALSE 17107
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
17082: LD_ADDR_LOC 27
17086: PUSH
17087: LD_LOC 27
17091: PPUSH
17092: LD_VAR 0 3
17096: PPUSH
17097: LD_INT 1
17099: PPUSH
17100: CALL_OW 1
17104: ST_TO_ADDR
// end else
17105: GO 17194
// begin for j := 1 to Restricted_Builds do
17107: LD_ADDR_VAR 0 8
17111: PUSH
17112: DOUBLE
17113: LD_INT 1
17115: DEC
17116: ST_TO_ADDR
17117: LD_LOC 19
17121: PUSH
17122: FOR_TO
17123: IFFALSE 17167
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
17125: LD_LOC 25
17129: PUSH
17130: LD_VAR 0 8
17134: ARRAY
17135: PUSH
17136: LD_VAR 0 3
17140: ARRAY
17141: PUSH
17142: LD_LOC 20
17146: PUSH
17147: LD_VAR 0 8
17151: ARRAY
17152: GREATER
17153: IFFALSE 17165
// begin Is_Cheater := true ;
17155: LD_ADDR_VAR 0 9
17159: PUSH
17160: LD_INT 1
17162: ST_TO_ADDR
// break ;
17163: GO 17167
// end ;
17165: GO 17122
17167: POP
17168: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
17169: LD_ADDR_LOC 27
17173: PUSH
17174: LD_LOC 27
17178: PPUSH
17179: LD_VAR 0 3
17183: PPUSH
17184: LD_VAR 0 9
17188: PPUSH
17189: CALL_OW 1
17193: ST_TO_ADDR
// end ; break ;
17194: GO 17198
// end ;
17196: GO 16774
17198: POP
17199: POP
// end ;
17200: LD_VAR 0 6
17204: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
17205: LD_VAR 0 5
17209: PUSH
17210: LD_LOC 21
17214: IN
17215: PUSH
17216: LD_VAR 0 2
17220: PUSH
17221: LD_LOC 22
17225: IN
17226: OR
17227: PUSH
17228: LD_VAR 0 4
17232: PUSH
17233: LD_LOC 23
17237: IN
17238: OR
17239: PUSH
17240: LD_VAR 0 3
17244: PUSH
17245: LD_LOC 24
17249: IN
17250: OR
17251: IFFALSE 17262
// ComCancel ( factory ) ;
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 127
// end ;
17262: PPOPN 5
17264: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
17265: LD_VAR 0 2
17269: PUSH
17270: LD_LOC 21
17274: IN
17275: IFFALSE 17286
// ComCancel ( building ) ;
17277: LD_VAR 0 1
17281: PPUSH
17282: CALL_OW 127
// end ; end_of_file
17286: PPOPN 2
17288: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
17289: LD_INT 0
17291: PPUSH
17292: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
17293: LD_ADDR_VAR 0 2
17297: PUSH
17298: LD_STRING #Multi1x1-Time
17300: PUSH
17301: LD_OWVAR 1
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: ST_TO_ADDR
// if WaitServerStrings then
17310: LD_EXP 66
17314: IFFALSE 17332
// AllStrings = AllStrings ^ WaitServerStrings ;
17316: LD_ADDR_VAR 0 2
17320: PUSH
17321: LD_VAR 0 2
17325: PUSH
17326: LD_EXP 66
17330: ADD
17331: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
17332: LD_INT 0
17334: PUSH
17335: LD_EXP 18
17339: PUSH
17340: LD_OWVAR 1
17344: MINUS
17345: LESSEQUAL
17346: IFFALSE 17377
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
17348: LD_ADDR_VAR 0 2
17352: PUSH
17353: LD_VAR 0 2
17357: PUSH
17358: LD_STRING #allowedsibbomb
17360: PUSH
17361: LD_EXP 18
17365: PUSH
17366: LD_OWVAR 1
17370: MINUS
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: ADD
17376: ST_TO_ADDR
// if ( ExtraStrings ) then
17377: LD_EXP 65
17381: IFFALSE 17403
// AllStrings := AllStrings ^  ^ ExtraStrings ;
17383: LD_ADDR_VAR 0 2
17387: PUSH
17388: LD_VAR 0 2
17392: PUSH
17393: LD_STRING 
17395: ADD
17396: PUSH
17397: LD_EXP 65
17401: ADD
17402: ST_TO_ADDR
// if Display_kings and not isSGUI then
17403: LD_EXP 67
17407: PUSH
17408: LD_OWVAR 83
17412: NOT
17413: AND
17414: IFFALSE 17432
// AllStrings = AllStrings ^ Display_kings ;
17416: LD_ADDR_VAR 0 2
17420: PUSH
17421: LD_VAR 0 2
17425: PUSH
17426: LD_EXP 67
17430: ADD
17431: ST_TO_ADDR
// if ( LimitsStrings ) then
17432: CALL 14129 0 0
17436: IFFALSE 17458
// AllStrings := AllStrings ^  ^ LimitsStrings ;
17438: LD_ADDR_VAR 0 2
17442: PUSH
17443: LD_VAR 0 2
17447: PUSH
17448: LD_STRING 
17450: ADD
17451: PUSH
17452: CALL 14129 0 0
17456: ADD
17457: ST_TO_ADDR
// Display_Strings := AllStrings ;
17458: LD_ADDR_OWVAR 47
17462: PUSH
17463: LD_VAR 0 2
17467: ST_TO_ADDR
// end ;
17468: LD_VAR 0 1
17472: RET
// every 0 0$1 do
17473: GO 17475
17475: DISABLE
// begin ShowTimer ;
17476: CALL 17289 0 0
// enable ;
17480: ENABLE
// end ; end_of_file
17481: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
17482: LD_INT 0
17484: PPUSH
17485: PPUSH
17486: PPUSH
// sharedPoints1 = [ ] ;
17487: LD_ADDR_LOC 28
17491: PUSH
17492: EMPTY
17493: ST_TO_ADDR
// sharedPoints2 = [ ] ;
17494: LD_ADDR_LOC 29
17498: PUSH
17499: EMPTY
17500: ST_TO_ADDR
// sharedPoints3 = [ ] ;
17501: LD_ADDR_LOC 30
17505: PUSH
17506: EMPTY
17507: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
17508: LD_ADDR_VAR 0 2
17512: PUSH
17513: DOUBLE
17514: LD_INT 1
17516: DEC
17517: ST_TO_ADDR
17518: LD_EXP 23
17522: PUSH
17523: LD_INT 0
17525: PLUS
17526: PUSH
17527: FOR_TO
17528: IFFALSE 17630
// begin if not Side_Positions [ i ] = 0 then
17530: LD_EXP 23
17534: PUSH
17535: LD_VAR 0 2
17539: ARRAY
17540: PUSH
17541: LD_INT 0
17543: EQUAL
17544: NOT
17545: IFFALSE 17559
// SetMultiScore ( i , 0 ) ;
17547: LD_VAR 0 2
17551: PPUSH
17552: LD_INT 0
17554: PPUSH
17555: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
17559: LD_ADDR_LOC 28
17563: PUSH
17564: LD_LOC 28
17568: PPUSH
17569: LD_VAR 0 2
17573: PPUSH
17574: LD_INT 0
17576: PPUSH
17577: CALL_OW 1
17581: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
17582: LD_ADDR_LOC 29
17586: PUSH
17587: LD_LOC 29
17591: PPUSH
17592: LD_VAR 0 2
17596: PPUSH
17597: LD_INT 0
17599: PPUSH
17600: CALL_OW 1
17604: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
17605: LD_ADDR_LOC 30
17609: PUSH
17610: LD_LOC 30
17614: PPUSH
17615: LD_VAR 0 2
17619: PPUSH
17620: LD_INT 0
17622: PPUSH
17623: CALL_OW 1
17627: ST_TO_ADDR
// end ;
17628: GO 17527
17630: POP
17631: POP
// pointGame = true ;
17632: LD_ADDR_LOC 31
17636: PUSH
17637: LD_INT 1
17639: ST_TO_ADDR
// end ;
17640: LD_VAR 0 1
17644: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
17645: LD_LOC 31
17649: IFFALSE 18060
17651: GO 17653
17653: DISABLE
17654: LD_INT 0
17656: PPUSH
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
17667: PPUSH
17668: PPUSH
// begin if isSGUI then
17669: LD_OWVAR 83
17673: IFFALSE 18060
// begin if Teams [ 1 ] then
17675: LD_EXP 22
17679: PUSH
17680: LD_INT 1
17682: ARRAY
17683: IFFALSE 17695
// red = true else
17685: LD_ADDR_VAR 0 2
17689: PUSH
17690: LD_INT 1
17692: ST_TO_ADDR
17693: GO 17703
// red = false ;
17695: LD_ADDR_VAR 0 2
17699: PUSH
17700: LD_INT 0
17702: ST_TO_ADDR
// if Teams [ 2 ] then
17703: LD_EXP 22
17707: PUSH
17708: LD_INT 2
17710: ARRAY
17711: IFFALSE 17723
// blue = true else
17713: LD_ADDR_VAR 0 3
17717: PUSH
17718: LD_INT 1
17720: ST_TO_ADDR
17721: GO 17731
// blue = false ;
17723: LD_ADDR_VAR 0 3
17727: PUSH
17728: LD_INT 0
17730: ST_TO_ADDR
// if Teams [ 3 ] then
17731: LD_EXP 22
17735: PUSH
17736: LD_INT 3
17738: ARRAY
17739: IFFALSE 17751
// yel = true else
17741: LD_ADDR_VAR 0 4
17745: PUSH
17746: LD_INT 1
17748: ST_TO_ADDR
17749: GO 17759
// yel = false ;
17751: LD_ADDR_VAR 0 4
17755: PUSH
17756: LD_INT 0
17758: ST_TO_ADDR
// if Teams [ 4 ] then
17759: LD_EXP 22
17763: PUSH
17764: LD_INT 4
17766: ARRAY
17767: IFFALSE 17779
// green = true else
17769: LD_ADDR_VAR 0 5
17773: PUSH
17774: LD_INT 1
17776: ST_TO_ADDR
17777: GO 17787
// green = false ;
17779: LD_ADDR_VAR 0 5
17783: PUSH
17784: LD_INT 0
17786: ST_TO_ADDR
// if def_public_score then
17787: LD_EXP 6
17791: IFFALSE 17803
// p = true else
17793: LD_ADDR_VAR 0 12
17797: PUSH
17798: LD_INT 1
17800: ST_TO_ADDR
17801: GO 17811
// p = false ;
17803: LD_ADDR_VAR 0 12
17807: PUSH
17808: LD_INT 0
17810: ST_TO_ADDR
// if team_game then
17811: LD_EXP 25
17815: IFFALSE 17896
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
17817: LD_ADDR_VAR 0 13
17821: PUSH
17822: LD_INT 3
17824: PUSH
17825: LD_INT 1
17827: PUSH
17828: LD_INT 2
17830: PUSH
17831: LD_INT 7
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: PUSH
17840: LD_EXP 28
17844: ARRAY
17845: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
17846: LD_ADDR_VAR 0 10
17850: PUSH
17851: LD_STRING {
17853: PUSH
17854: LD_VAR 0 3
17858: STR
17859: PUSH
17860: LD_STRING ,
17862: STR
17863: PUSH
17864: LD_VAR 0 4
17868: STR
17869: PUSH
17870: LD_STRING ,
17872: STR
17873: PUSH
17874: LD_VAR 0 2
17878: STR
17879: PUSH
17880: LD_STRING ,0,0,0,
17882: STR
17883: PUSH
17884: LD_VAR 0 5
17888: STR
17889: PUSH
17890: LD_STRING ,0}
17892: STR
17893: ST_TO_ADDR
// end else
17894: GO 17996
// begin you = your_side ;
17896: LD_ADDR_VAR 0 13
17900: PUSH
17901: LD_OWVAR 2
17905: ST_TO_ADDR
// s = { ;
17906: LD_ADDR_VAR 0 10
17910: PUSH
17911: LD_STRING {
17913: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
17914: LD_ADDR_VAR 0 1
17918: PUSH
17919: DOUBLE
17920: LD_INT 1
17922: DEC
17923: ST_TO_ADDR
17924: LD_EXP 23
17928: PUSH
17929: LD_INT 0
17931: PLUS
17932: PUSH
17933: FOR_TO
17934: IFFALSE 17980
// if side_positions [ i ] then
17936: LD_EXP 23
17940: PUSH
17941: LD_VAR 0 1
17945: ARRAY
17946: IFFALSE 17964
// s = s & 1, else
17948: LD_ADDR_VAR 0 10
17952: PUSH
17953: LD_VAR 0 10
17957: PUSH
17958: LD_STRING 1,
17960: STR
17961: ST_TO_ADDR
17962: GO 17978
// s = s & 0, ;
17964: LD_ADDR_VAR 0 10
17968: PUSH
17969: LD_VAR 0 10
17973: PUSH
17974: LD_STRING 0,
17976: STR
17977: ST_TO_ADDR
17978: GO 17933
17980: POP
17981: POP
// s = s & } ;
17982: LD_ADDR_VAR 0 10
17986: PUSH
17987: LD_VAR 0 10
17991: PUSH
17992: LD_STRING }
17994: STR
17995: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
17996: LD_STRING initScore(
17998: PUSH
17999: LD_VAR 0 10
18003: STR
18004: PUSH
18005: LD_STRING ,
18007: STR
18008: PUSH
18009: LD_VAR 0 12
18013: STR
18014: PUSH
18015: LD_STRING ,
18017: STR
18018: PUSH
18019: LD_VAR 0 13
18023: STR
18024: PUSH
18025: LD_STRING  );
18027: STR
18028: PPUSH
18029: CALL_OW 559
// if game_type = 3 then
18033: LD_EXP 48
18037: PUSH
18038: LD_INT 3
18040: EQUAL
18041: IFFALSE 18060
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
18043: LD_STRING AddScorePoints(2,2,
18045: PUSH
18046: LD_EXP 20
18050: STR
18051: PUSH
18052: LD_STRING  );
18054: STR
18055: PPUSH
18056: CALL_OW 559
// end ; end ;
18060: PPOPN 13
18062: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
18063: LD_INT 0
18065: PPUSH
18066: PPUSH
// case typ of 1 :
18067: LD_VAR 0 3
18071: PUSH
18072: LD_INT 1
18074: DOUBLE
18075: EQUAL
18076: IFTRUE 18080
18078: GO 18108
18080: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
18081: LD_ADDR_LOC 28
18085: PUSH
18086: LD_LOC 28
18090: PPUSH
18091: LD_VAR 0 1
18095: PPUSH
18096: LD_VAR 0 2
18100: PPUSH
18101: CALL_OW 1
18105: ST_TO_ADDR
18106: GO 18181
18108: LD_INT 2
18110: DOUBLE
18111: EQUAL
18112: IFTRUE 18116
18114: GO 18144
18116: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
18117: LD_ADDR_LOC 29
18121: PUSH
18122: LD_LOC 29
18126: PPUSH
18127: LD_VAR 0 1
18131: PPUSH
18132: LD_VAR 0 2
18136: PPUSH
18137: CALL_OW 1
18141: ST_TO_ADDR
18142: GO 18181
18144: LD_INT 3
18146: DOUBLE
18147: EQUAL
18148: IFTRUE 18152
18150: GO 18180
18152: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
18153: LD_ADDR_LOC 30
18157: PUSH
18158: LD_LOC 30
18162: PPUSH
18163: LD_VAR 0 1
18167: PPUSH
18168: LD_VAR 0 2
18172: PPUSH
18173: CALL_OW 1
18177: ST_TO_ADDR
18178: GO 18181
18180: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
18181: LD_ADDR_VAR 0 5
18185: PUSH
18186: LD_LOC 28
18190: PUSH
18191: LD_VAR 0 1
18195: ARRAY
18196: PUSH
18197: LD_LOC 29
18201: PUSH
18202: LD_VAR 0 1
18206: ARRAY
18207: PLUS
18208: PUSH
18209: LD_LOC 30
18213: PUSH
18214: LD_VAR 0 1
18218: ARRAY
18219: PLUS
18220: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
18221: LD_VAR 0 1
18225: PPUSH
18226: LD_VAR 0 5
18230: PPUSH
18231: CALL_OW 506
// end ; end_of_file
18235: LD_VAR 0 4
18239: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
18240: LD_INT 0
18242: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
18243: LD_VAR 0 1
18247: PPUSH
18248: CALL_OW 255
18252: PUSH
18253: LD_VAR 0 4
18257: EQUAL
18258: IFFALSE 18277
// begin SetAchievement ( ACH_RAD ) ;
18260: LD_STRING ACH_RAD
18262: PPUSH
18263: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
18267: LD_STRING ACH_NL
18269: PPUSH
18270: LD_INT 1
18272: PPUSH
18273: CALL_OW 564
// end end ;
18277: LD_VAR 0 5
18281: RET
// export function SA_Win ( side ) ; begin
18282: LD_INT 0
18284: PPUSH
// case side of 1 :
18285: LD_VAR 0 1
18289: PUSH
18290: LD_INT 1
18292: DOUBLE
18293: EQUAL
18294: IFTRUE 18298
18296: GO 18311
18298: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18299: LD_STRING ACH_AH
18301: PPUSH
18302: LD_INT 1
18304: PPUSH
18305: CALL_OW 564
18309: GO 18474
18311: LD_INT 2
18313: DOUBLE
18314: EQUAL
18315: IFTRUE 18319
18317: GO 18332
18319: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18320: LD_STRING ACH_E
18322: PPUSH
18323: LD_INT 1
18325: PPUSH
18326: CALL_OW 564
18330: GO 18474
18332: LD_INT 3
18334: DOUBLE
18335: EQUAL
18336: IFTRUE 18340
18338: GO 18353
18340: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18341: LD_STRING ACH_OOL
18343: PPUSH
18344: LD_INT 1
18346: PPUSH
18347: CALL_OW 564
18351: GO 18474
18353: LD_INT 1
18355: PUSH
18356: LD_INT 2
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: DOUBLE
18363: EQUAL
18364: IFTRUE 18368
18366: GO 18393
18368: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18369: LD_STRING ACH_AH
18371: PPUSH
18372: LD_REAL  5.00000000000000E-0001
18375: PPUSH
18376: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18380: LD_STRING ACH_E
18382: PPUSH
18383: LD_REAL  5.00000000000000E-0001
18386: PPUSH
18387: CALL_OW 564
// end ; [ 2 , 3 ] :
18391: GO 18474
18393: LD_INT 2
18395: PUSH
18396: LD_INT 3
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: DOUBLE
18403: EQUAL
18404: IFTRUE 18408
18406: GO 18433
18408: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18409: LD_STRING ACH_OOL
18411: PPUSH
18412: LD_REAL  5.00000000000000E-0001
18415: PPUSH
18416: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18420: LD_STRING ACH_E
18422: PPUSH
18423: LD_REAL  5.00000000000000E-0001
18426: PPUSH
18427: CALL_OW 564
// end ; [ 3 , 1 ] :
18431: GO 18474
18433: LD_INT 3
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: DOUBLE
18443: EQUAL
18444: IFTRUE 18448
18446: GO 18473
18448: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18449: LD_STRING ACH_AH
18451: PPUSH
18452: LD_REAL  5.00000000000000E-0001
18455: PPUSH
18456: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18460: LD_STRING ACH_OOL
18462: PPUSH
18463: LD_REAL  5.00000000000000E-0001
18466: PPUSH
18467: CALL_OW 564
// end ; end ;
18471: GO 18474
18473: POP
// end ; end_of_file
18474: LD_VAR 0 2
18478: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
18479: LD_INT 0
18481: PPUSH
18482: PPUSH
// enable ( 98 ) ;
18483: LD_INT 98
18485: ENABLE_MARKED
// GameEnded = false ;
18486: LD_ADDR_LOC 33
18490: PUSH
18491: LD_INT 0
18493: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18494: LD_ADDR_LOC 32
18498: PUSH
18499: LD_INT 0
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: LD_INT 0
18507: PUSH
18508: LD_INT 0
18510: PUSH
18511: LD_INT 0
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: LD_INT 0
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: ST_TO_ADDR
// unfoged = false ;
18533: LD_ADDR_LOC 34
18537: PUSH
18538: LD_INT 0
18540: ST_TO_ADDR
// for i = 1 to side_positions do
18541: LD_ADDR_VAR 0 2
18545: PUSH
18546: DOUBLE
18547: LD_INT 1
18549: DEC
18550: ST_TO_ADDR
18551: LD_EXP 23
18555: PUSH
18556: FOR_TO
18557: IFFALSE 18597
// if not side_positions [ i ] then
18559: LD_EXP 23
18563: PUSH
18564: LD_VAR 0 2
18568: ARRAY
18569: NOT
18570: IFFALSE 18595
// defaited = replace ( defaited , i , true ) ;
18572: LD_ADDR_LOC 32
18576: PUSH
18577: LD_LOC 32
18581: PPUSH
18582: LD_VAR 0 2
18586: PPUSH
18587: LD_INT 1
18589: PPUSH
18590: CALL_OW 1
18594: ST_TO_ADDR
18595: GO 18556
18597: POP
18598: POP
// end ;
18599: LD_VAR 0 1
18603: RET
// function CanWinLoose ; begin
18604: LD_INT 0
18606: PPUSH
// Result := true ;
18607: LD_ADDR_VAR 0 1
18611: PUSH
18612: LD_INT 1
18614: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
18615: CALL_OW 518
18619: PUSH
18620: CALL_OW 519
18624: PUSH
18625: LD_INT 0
18627: GREATER
18628: AND
18629: IFFALSE 18639
// Result := false ;
18631: LD_ADDR_VAR 0 1
18635: PUSH
18636: LD_INT 0
18638: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18639: CALL_OW 531
18643: PUSH
18644: CALL_OW 519
18648: PUSH
18649: LD_INT 1
18651: GREATER
18652: AND
18653: IFFALSE 18663
// Result := false ;
18655: LD_ADDR_VAR 0 1
18659: PUSH
18660: LD_INT 0
18662: ST_TO_ADDR
// end ;
18663: LD_VAR 0 1
18667: RET
// export function HasPower ( i ) ; var k , h ; begin
18668: LD_INT 0
18670: PPUSH
18671: PPUSH
18672: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18673: LD_VAR 0 1
18677: PPUSH
18678: CALL_OW 108
18682: NOT
18683: PUSH
18684: LD_EXP 26
18688: PUSH
18689: LD_VAR 0 1
18693: ARRAY
18694: NOT
18695: AND
18696: PUSH
18697: LD_OWVAR 4
18701: AND
18702: IFFALSE 18714
// begin result = false ;
18704: LD_ADDR_VAR 0 2
18708: PUSH
18709: LD_INT 0
18711: ST_TO_ADDR
// end else
18712: GO 19009
// case def_win_rules of 0 :
18714: LD_EXP 19
18718: PUSH
18719: LD_INT 0
18721: DOUBLE
18722: EQUAL
18723: IFTRUE 18727
18725: GO 18890
18727: POP
// if def_people_respawning then
18728: LD_EXP 60
18732: IFFALSE 18823
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
18734: LD_ADDR_VAR 0 2
18738: PUSH
18739: LD_INT 22
18741: PUSH
18742: LD_VAR 0 1
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: LD_INT 21
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 33
18766: PUSH
18767: LD_INT 3
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: LD_INT 33
18776: PUSH
18777: LD_INT 5
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 30
18786: PUSH
18787: LD_INT 0
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 30
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PPUSH
18816: CALL_OW 69
18820: ST_TO_ADDR
18821: GO 18888
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18823: LD_ADDR_VAR 0 2
18827: PUSH
18828: LD_INT 22
18830: PUSH
18831: LD_VAR 0 1
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: LD_INT 2
18842: PUSH
18843: LD_INT 21
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 33
18855: PUSH
18856: LD_INT 3
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 33
18865: PUSH
18866: LD_INT 5
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PPUSH
18883: CALL_OW 69
18887: ST_TO_ADDR
18888: GO 19009
18890: LD_INT 1
18892: DOUBLE
18893: EQUAL
18894: IFTRUE 18898
18896: GO 18937
18898: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
18899: LD_ADDR_VAR 0 2
18903: PUSH
18904: LD_INT 22
18906: PUSH
18907: LD_VAR 0 1
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 21
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PPUSH
18930: CALL_OW 69
18934: ST_TO_ADDR
18935: GO 19009
18937: LD_INT 2
18939: DOUBLE
18940: EQUAL
18941: IFTRUE 18945
18943: GO 19008
18945: POP
// begin h = false ;
18946: LD_ADDR_VAR 0 4
18950: PUSH
18951: LD_INT 0
18953: ST_TO_ADDR
// for k in heroes [ i ] do
18954: LD_ADDR_VAR 0 3
18958: PUSH
18959: LD_EXP 35
18963: PUSH
18964: LD_VAR 0 1
18968: ARRAY
18969: PUSH
18970: FOR_IN
18971: IFFALSE 18994
// if IsLive ( k ) then
18973: LD_VAR 0 3
18977: PPUSH
18978: CALL_OW 300
18982: IFFALSE 18992
// h = true ;
18984: LD_ADDR_VAR 0 4
18988: PUSH
18989: LD_INT 1
18991: ST_TO_ADDR
18992: GO 18970
18994: POP
18995: POP
// Result := h ;
18996: LD_ADDR_VAR 0 2
19000: PUSH
19001: LD_VAR 0 4
19005: ST_TO_ADDR
// end ; end ;
19006: GO 19009
19008: POP
// end ;
19009: LD_VAR 0 2
19013: RET
// function AlliedSides ( i , j ) ; begin
19014: LD_INT 0
19016: PPUSH
// Result := false ;
19017: LD_ADDR_VAR 0 3
19021: PUSH
19022: LD_INT 0
19024: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
19025: LD_VAR 0 1
19029: PPUSH
19030: LD_VAR 0 2
19034: PPUSH
19035: CALL_OW 81
19039: PUSH
19040: LD_INT 1
19042: EQUAL
19043: PUSH
19044: LD_VAR 0 2
19048: PPUSH
19049: LD_VAR 0 1
19053: PPUSH
19054: CALL_OW 81
19058: PUSH
19059: LD_INT 1
19061: EQUAL
19062: AND
19063: PUSH
19064: LD_VAR 0 1
19068: PPUSH
19069: CALL_OW 83
19073: AND
19074: PUSH
19075: LD_VAR 0 2
19079: PPUSH
19080: CALL_OW 83
19084: AND
19085: IFFALSE 19095
// Result := true ;
19087: LD_ADDR_VAR 0 3
19091: PUSH
19092: LD_INT 1
19094: ST_TO_ADDR
// end ;
19095: LD_VAR 0 3
19099: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
19100: CALL 18604 0 0
19104: PUSH
19105: LD_LOC 33
19109: NOT
19110: AND
19111: IFFALSE 19127
19113: GO 19115
19115: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
19116: LD_ADDR_EXP 66
19120: PUSH
19121: LD_STRING #Player-Ended
19123: PUSH
19124: EMPTY
19125: LIST
19126: ST_TO_ADDR
19127: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
19128: CALL 18604 0 0
19132: PUSH
19133: LD_LOC 33
19137: AND
19138: IFFALSE 19147
19140: GO 19142
19142: DISABLE
// YouLostInMultiplayer ;
19143: CALL_OW 107
19147: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
19148: CALL 18604 0 0
19152: NOT
19153: PUSH
19154: CALL_OW 531
19158: NOT
19159: AND
19160: IFFALSE 19176
19162: GO 19164
19164: DISABLE
// WaitServerStrings = [ #server-wait ] ;
19165: LD_ADDR_EXP 66
19169: PUSH
19170: LD_STRING #server-wait
19172: PUSH
19173: EMPTY
19174: LIST
19175: ST_TO_ADDR
19176: END
// every 100 trigger IAmSpec do
19177: CALL_OW 531
19181: IFFALSE 19197
19183: GO 19185
19185: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
19186: LD_ADDR_EXP 66
19190: PUSH
19191: LD_STRING #Player-IAmSpec
19193: PUSH
19194: EMPTY
19195: LIST
19196: ST_TO_ADDR
19197: END
// every 100 trigger GameEnded and IAmSpec do
19198: LD_LOC 33
19202: PUSH
19203: CALL_OW 531
19207: AND
19208: IFFALSE 19217
19210: GO 19212
19212: DISABLE
// YouLostInMultiplayer ;
19213: CALL_OW 107
19217: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
19218: CALL 18604 0 0
19222: PUSH
19223: LD_LOC 33
19227: NOT
19228: AND
19229: IFFALSE 19245
19231: GO 19233
19233: DISABLE
// WaitServerStrings = [ $player-win ] ;
19234: LD_ADDR_EXP 66
19238: PUSH
19239: LD_STRING $player-win
19241: PUSH
19242: EMPTY
19243: LIST
19244: ST_TO_ADDR
19245: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
19246: CALL 18604 0 0
19250: PUSH
19251: LD_LOC 33
19255: AND
19256: IFFALSE 19280
19258: GO 19260
19260: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
19261: LD_EXP 24
19265: PUSH
19266: LD_OWVAR 2
19270: ARRAY
19271: PPUSH
19272: CALL 18282 0 1
// YouWinInMultiplayer ;
19276: CALL_OW 106
// end ;
19280: END
// every 100 trigger isEditor marked 401 do
19281: LD_OWVAR 84
19285: IFFALSE 19301
19287: GO 19289
19289: DISABLE
// Debug_Strings = [ You won ] ;
19290: LD_ADDR_OWVAR 48
19294: PUSH
19295: LD_STRING You won
19297: PUSH
19298: EMPTY
19299: LIST
19300: ST_TO_ADDR
19301: END
// every 100 trigger isEditor marked 400 do
19302: LD_OWVAR 84
19306: IFFALSE 19322
19308: GO 19310
19310: DISABLE
// Debug_Strings = [ You loss ] ;
19311: LD_ADDR_OWVAR 48
19315: PUSH
19316: LD_STRING You loss
19318: PUSH
19319: EMPTY
19320: LIST
19321: ST_TO_ADDR
19322: END
// every 100 marked 98 do var i , un ;
19323: GO 19325
19325: DISABLE
19326: LD_INT 0
19328: PPUSH
19329: PPUSH
// begin for i = 1 to side_positions do
19330: LD_ADDR_VAR 0 1
19334: PUSH
19335: DOUBLE
19336: LD_INT 1
19338: DEC
19339: ST_TO_ADDR
19340: LD_EXP 23
19344: PUSH
19345: FOR_TO
19346: IFFALSE 19469
// if side_positions [ i ] then
19348: LD_EXP 23
19352: PUSH
19353: LD_VAR 0 1
19357: ARRAY
19358: IFFALSE 19467
// if not HasPower ( i ) and not Defaited [ i ] then
19360: LD_VAR 0 1
19364: PPUSH
19365: CALL 18668 0 1
19369: NOT
19370: PUSH
19371: LD_LOC 32
19375: PUSH
19376: LD_VAR 0 1
19380: ARRAY
19381: NOT
19382: AND
19383: IFFALSE 19467
// begin un = filterallunits ( [ f_side , i ] ) ;
19385: LD_ADDR_VAR 0 2
19389: PUSH
19390: LD_INT 22
19392: PUSH
19393: LD_VAR 0 1
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PPUSH
19402: CALL_OW 69
19406: ST_TO_ADDR
// if un then
19407: LD_VAR 0 2
19411: IFFALSE 19425
// SetSide ( un , 0 ) ;
19413: LD_VAR 0 2
19417: PPUSH
19418: LD_INT 0
19420: PPUSH
19421: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
19425: LD_ADDR_LOC 32
19429: PUSH
19430: LD_LOC 32
19434: PPUSH
19435: LD_VAR 0 1
19439: PPUSH
19440: LD_INT 1
19442: PPUSH
19443: CALL_OW 1
19447: ST_TO_ADDR
// if i = your_side then
19448: LD_VAR 0 1
19452: PUSH
19453: LD_OWVAR 2
19457: EQUAL
19458: IFFALSE 19467
// begin Multiplayer_Loose_Message ;
19460: CALL_OW 521
// enable ( 400 ) ;
19464: LD_INT 400
19466: ENABLE_MARKED
// end ; end ;
19467: GO 19345
19469: POP
19470: POP
// if not Unfoged and defaited [ your_side ] then
19471: LD_LOC 34
19475: NOT
19476: PUSH
19477: LD_LOC 32
19481: PUSH
19482: LD_OWVAR 2
19486: ARRAY
19487: AND
19488: IFFALSE 19494
// Unfog ;
19490: CALL 19680 0 0
// DidGameEnd ;
19494: CALL 19509 0 0
// if not GameEnded then
19498: LD_LOC 33
19502: NOT
19503: IFFALSE 19506
// enable ;
19505: ENABLE
// end ;
19506: PPOPN 2
19508: END
// function DidGameEnd ; var i , k , enemy ; begin
19509: LD_INT 0
19511: PPUSH
19512: PPUSH
19513: PPUSH
19514: PPUSH
// enemy = [ ] ;
19515: LD_ADDR_VAR 0 4
19519: PUSH
19520: EMPTY
19521: ST_TO_ADDR
// for i = 1 to side_positions do
19522: LD_ADDR_VAR 0 2
19526: PUSH
19527: DOUBLE
19528: LD_INT 1
19530: DEC
19531: ST_TO_ADDR
19532: LD_EXP 23
19536: PUSH
19537: FOR_TO
19538: IFFALSE 19642
// if not defaited [ i ] then
19540: LD_LOC 32
19544: PUSH
19545: LD_VAR 0 2
19549: ARRAY
19550: NOT
19551: IFFALSE 19640
// for k = 1 to side_positions do
19553: LD_ADDR_VAR 0 3
19557: PUSH
19558: DOUBLE
19559: LD_INT 1
19561: DEC
19562: ST_TO_ADDR
19563: LD_EXP 23
19567: PUSH
19568: FOR_TO
19569: IFFALSE 19638
// if not defaited [ k ] then
19571: LD_LOC 32
19575: PUSH
19576: LD_VAR 0 3
19580: ARRAY
19581: NOT
19582: IFFALSE 19636
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
19584: LD_VAR 0 2
19588: PPUSH
19589: LD_VAR 0 3
19593: PPUSH
19594: CALL_OW 81
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: LD_INT 0
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: IN
19609: IFFALSE 19636
// enemy = enemy ^ [ i , k ] ;
19611: LD_ADDR_VAR 0 4
19615: PUSH
19616: LD_VAR 0 4
19620: PUSH
19621: LD_VAR 0 2
19625: PUSH
19626: LD_VAR 0 3
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: ADD
19635: ST_TO_ADDR
19636: GO 19568
19638: POP
19639: POP
19640: GO 19537
19642: POP
19643: POP
// if not enemy then
19644: LD_VAR 0 4
19648: NOT
19649: IFFALSE 19675
// begin GameEnded = true ;
19651: LD_ADDR_LOC 33
19655: PUSH
19656: LD_INT 1
19658: ST_TO_ADDR
// if not defaited [ your_side ] then
19659: LD_LOC 32
19663: PUSH
19664: LD_OWVAR 2
19668: ARRAY
19669: NOT
19670: IFFALSE 19675
// enable ( 401 ) ;
19672: LD_INT 401
19674: ENABLE_MARKED
// end ; end ;
19675: LD_VAR 0 1
19679: RET
// function unfog ; var k , friends ; begin
19680: LD_INT 0
19682: PPUSH
19683: PPUSH
19684: PPUSH
// for k = 1 to side_positions do
19685: LD_ADDR_VAR 0 2
19689: PUSH
19690: DOUBLE
19691: LD_INT 1
19693: DEC
19694: ST_TO_ADDR
19695: LD_EXP 23
19699: PUSH
19700: FOR_TO
19701: IFFALSE 19757
// if not defaited [ k ] then
19703: LD_LOC 32
19707: PUSH
19708: LD_VAR 0 2
19712: ARRAY
19713: NOT
19714: IFFALSE 19755
// if GetAttitude ( your_side , k ) in [ att_friend ] then
19716: LD_OWVAR 2
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: CALL_OW 81
19730: PUSH
19731: LD_INT 1
19733: PUSH
19734: EMPTY
19735: LIST
19736: IN
19737: IFFALSE 19755
// friends = friends ^ k ;
19739: LD_ADDR_VAR 0 3
19743: PUSH
19744: LD_VAR 0 3
19748: PUSH
19749: LD_VAR 0 2
19753: ADD
19754: ST_TO_ADDR
19755: GO 19700
19757: POP
19758: POP
// if not friends then
19759: LD_VAR 0 3
19763: NOT
19764: IFFALSE 19781
// begin fogoff ( true ) ;
19766: LD_INT 1
19768: PPUSH
19769: CALL_OW 344
// unfoged = true ;
19773: LD_ADDR_LOC 34
19777: PUSH
19778: LD_INT 1
19780: ST_TO_ADDR
// end ; end ;
19781: LD_VAR 0 1
19785: RET
// export function MakeGameEnd ; begin
19786: LD_INT 0
19788: PPUSH
// fogoff ( true ) ;
19789: LD_INT 1
19791: PPUSH
19792: CALL_OW 344
// unfoged = true ;
19796: LD_ADDR_LOC 34
19800: PUSH
19801: LD_INT 1
19803: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19804: LD_INT 175
19806: PPUSH
19807: CALL_OW 67
// GameEnded = true ;
19811: LD_ADDR_LOC 33
19815: PUSH
19816: LD_INT 1
19818: ST_TO_ADDR
// end ;
19819: LD_VAR 0 1
19823: RET
// export function GetGameEnded ; begin
19824: LD_INT 0
19826: PPUSH
// result = GameEnded ;
19827: LD_ADDR_VAR 0 1
19831: PUSH
19832: LD_LOC 33
19836: ST_TO_ADDR
// end ; end_of_file
19837: LD_VAR 0 1
19841: RET
// var win ; export function init_kings_counting ; var i ; begin
19842: LD_INT 0
19844: PPUSH
19845: PPUSH
// mp_with_score := true ;
19846: LD_ADDR_OWVAR 14
19850: PUSH
19851: LD_INT 1
19853: ST_TO_ADDR
// ResetMultiScore ;
19854: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19858: LD_INT 19
19860: PPUSH
19861: LD_INT 1
19863: PPUSH
19864: CALL_OW 424
// enable ( 2 ) ;
19868: LD_INT 2
19870: ENABLE_MARKED
// end ;
19871: LD_VAR 0 1
19875: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19876: LD_INT 0
19878: PPUSH
19879: PPUSH
19880: PPUSH
19881: PPUSH
19882: PPUSH
19883: PPUSH
19884: PPUSH
19885: PPUSH
19886: PPUSH
// vypis := [ ] ;
19887: LD_ADDR_VAR 0 3
19891: PUSH
19892: EMPTY
19893: ST_TO_ADDR
// red = 0 ;
19894: LD_ADDR_VAR 0 5
19898: PUSH
19899: LD_INT 0
19901: ST_TO_ADDR
// blue = 0 ;
19902: LD_ADDR_VAR 0 6
19906: PUSH
19907: LD_INT 0
19909: ST_TO_ADDR
// yel = 0 ;
19910: LD_ADDR_VAR 0 7
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
// green = 0 ;
19918: LD_ADDR_VAR 0 8
19922: PUSH
19923: LD_INT 0
19925: ST_TO_ADDR
// if def_public_score or isSGUI then
19926: LD_EXP 6
19930: PUSH
19931: LD_OWVAR 83
19935: OR
19936: IFFALSE 20551
// if not Team_Game then
19938: LD_EXP 25
19942: NOT
19943: IFFALSE 20075
// begin for side = 1 to Side_Positions do
19945: LD_ADDR_VAR 0 2
19949: PUSH
19950: DOUBLE
19951: LD_INT 1
19953: DEC
19954: ST_TO_ADDR
19955: LD_EXP 23
19959: PUSH
19960: FOR_TO
19961: IFFALSE 20071
// if Side_Positions [ side ] then
19963: LD_EXP 23
19967: PUSH
19968: LD_VAR 0 2
19972: ARRAY
19973: IFFALSE 20069
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
19975: LD_ADDR_VAR 0 3
19979: PUSH
19980: LD_VAR 0 3
19984: PUSH
19985: LD_STRING #KingoftheHill-Public
19987: PUSH
19988: LD_VAR 0 2
19992: PUSH
19993: LD_VAR 0 2
19997: PUSH
19998: LD_VAR 0 2
20002: PUSH
20003: LD_INT 10
20005: PLUS
20006: PPUSH
20007: CALL_OW 110
20011: PUSH
20012: LD_INT 3
20014: DIV
20015: PUSH
20016: LD_EXP 20
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: ADD
20028: ST_TO_ADDR
// ToLua ( updateScorePoints(2, & side & , & ( GetTag ( side + 10 ) div 3 ) & ); ) ;
20029: LD_STRING updateScorePoints(2,
20031: PUSH
20032: LD_VAR 0 2
20036: STR
20037: PUSH
20038: LD_STRING ,
20040: STR
20041: PUSH
20042: LD_VAR 0 2
20046: PUSH
20047: LD_INT 10
20049: PLUS
20050: PPUSH
20051: CALL_OW 110
20055: PUSH
20056: LD_INT 3
20058: DIV
20059: STR
20060: PUSH
20061: LD_STRING );
20063: STR
20064: PPUSH
20065: CALL_OW 559
// end ;
20069: GO 19960
20071: POP
20072: POP
// end else
20073: GO 20549
// begin if Teams [ 1 ] then
20075: LD_EXP 22
20079: PUSH
20080: LD_INT 1
20082: ARRAY
20083: IFFALSE 20135
// for i in Teams [ 1 ] do
20085: LD_ADDR_VAR 0 4
20089: PUSH
20090: LD_EXP 22
20094: PUSH
20095: LD_INT 1
20097: ARRAY
20098: PUSH
20099: FOR_IN
20100: IFFALSE 20133
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20102: LD_ADDR_VAR 0 5
20106: PUSH
20107: LD_VAR 0 5
20111: PUSH
20112: LD_VAR 0 4
20116: PUSH
20117: LD_INT 10
20119: PLUS
20120: PPUSH
20121: CALL_OW 110
20125: PUSH
20126: LD_INT 3
20128: DIV
20129: PLUS
20130: ST_TO_ADDR
20131: GO 20099
20133: POP
20134: POP
// if Teams [ 2 ] then
20135: LD_EXP 22
20139: PUSH
20140: LD_INT 2
20142: ARRAY
20143: IFFALSE 20195
// for i in Teams [ 2 ] do
20145: LD_ADDR_VAR 0 4
20149: PUSH
20150: LD_EXP 22
20154: PUSH
20155: LD_INT 2
20157: ARRAY
20158: PUSH
20159: FOR_IN
20160: IFFALSE 20193
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20162: LD_ADDR_VAR 0 6
20166: PUSH
20167: LD_VAR 0 6
20171: PUSH
20172: LD_VAR 0 4
20176: PUSH
20177: LD_INT 10
20179: PLUS
20180: PPUSH
20181: CALL_OW 110
20185: PUSH
20186: LD_INT 3
20188: DIV
20189: PLUS
20190: ST_TO_ADDR
20191: GO 20159
20193: POP
20194: POP
// if Teams [ 3 ] then
20195: LD_EXP 22
20199: PUSH
20200: LD_INT 3
20202: ARRAY
20203: IFFALSE 20255
// for i in Teams [ 3 ] do
20205: LD_ADDR_VAR 0 4
20209: PUSH
20210: LD_EXP 22
20214: PUSH
20215: LD_INT 3
20217: ARRAY
20218: PUSH
20219: FOR_IN
20220: IFFALSE 20253
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20222: LD_ADDR_VAR 0 7
20226: PUSH
20227: LD_VAR 0 7
20231: PUSH
20232: LD_VAR 0 4
20236: PUSH
20237: LD_INT 10
20239: PLUS
20240: PPUSH
20241: CALL_OW 110
20245: PUSH
20246: LD_INT 3
20248: DIV
20249: PLUS
20250: ST_TO_ADDR
20251: GO 20219
20253: POP
20254: POP
// if Teams [ 4 ] then
20255: LD_EXP 22
20259: PUSH
20260: LD_INT 4
20262: ARRAY
20263: IFFALSE 20315
// for i in Teams [ 4 ] do
20265: LD_ADDR_VAR 0 4
20269: PUSH
20270: LD_EXP 22
20274: PUSH
20275: LD_INT 4
20277: ARRAY
20278: PUSH
20279: FOR_IN
20280: IFFALSE 20313
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20282: LD_ADDR_VAR 0 8
20286: PUSH
20287: LD_VAR 0 8
20291: PUSH
20292: LD_VAR 0 4
20296: PUSH
20297: LD_INT 10
20299: PLUS
20300: PPUSH
20301: CALL_OW 110
20305: PUSH
20306: LD_INT 3
20308: DIV
20309: PLUS
20310: ST_TO_ADDR
20311: GO 20279
20313: POP
20314: POP
// if Teams [ 1 ] then
20315: LD_EXP 22
20319: PUSH
20320: LD_INT 1
20322: ARRAY
20323: IFFALSE 20352
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20325: LD_ADDR_VAR 0 3
20329: PUSH
20330: LD_STRING #KingoftheHill-Public-red
20332: PUSH
20333: LD_INT 3
20335: PUSH
20336: LD_VAR 0 5
20340: PUSH
20341: LD_EXP 20
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: ST_TO_ADDR
// if Teams [ 2 ] then
20352: LD_EXP 22
20356: PUSH
20357: LD_INT 2
20359: ARRAY
20360: IFFALSE 20395
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20362: LD_ADDR_VAR 0 3
20366: PUSH
20367: LD_VAR 0 3
20371: PUSH
20372: LD_STRING #KingoftheHill-Public-blue
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: LD_VAR 0 6
20382: PUSH
20383: LD_EXP 20
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: ADD
20394: ST_TO_ADDR
// if Teams [ 3 ] then
20395: LD_EXP 22
20399: PUSH
20400: LD_INT 3
20402: ARRAY
20403: IFFALSE 20438
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20405: LD_ADDR_VAR 0 3
20409: PUSH
20410: LD_VAR 0 3
20414: PUSH
20415: LD_STRING #KingoftheHill-Public-yell
20417: PUSH
20418: LD_INT 2
20420: PUSH
20421: LD_VAR 0 7
20425: PUSH
20426: LD_EXP 20
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: ADD
20437: ST_TO_ADDR
// if Teams [ 4 ] then
20438: LD_EXP 22
20442: PUSH
20443: LD_INT 4
20445: ARRAY
20446: IFFALSE 20481
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20448: LD_ADDR_VAR 0 3
20452: PUSH
20453: LD_VAR 0 3
20457: PUSH
20458: LD_STRING #KingoftheHill-Public-green
20460: PUSH
20461: LD_INT 7
20463: PUSH
20464: LD_VAR 0 8
20468: PUSH
20469: LD_EXP 20
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: ADD
20480: ST_TO_ADDR
// ToLua ( updateScorePoints(2,3, & red & ); ) ;
20481: LD_STRING updateScorePoints(2,3,
20483: PUSH
20484: LD_VAR 0 5
20488: STR
20489: PUSH
20490: LD_STRING );
20492: STR
20493: PPUSH
20494: CALL_OW 559
// ToLua ( updateScorePoints(2,1, & blue & ); ) ;
20498: LD_STRING updateScorePoints(2,1,
20500: PUSH
20501: LD_VAR 0 6
20505: STR
20506: PUSH
20507: LD_STRING );
20509: STR
20510: PPUSH
20511: CALL_OW 559
// ToLua ( updateScorePoints(2,2, & yel & ); ) ;
20515: LD_STRING updateScorePoints(2,2,
20517: PUSH
20518: LD_VAR 0 7
20522: STR
20523: PUSH
20524: LD_STRING );
20526: STR
20527: PPUSH
20528: CALL_OW 559
// ToLua ( updateScorePoints(2,7, & green & ); ) ;
20532: LD_STRING updateScorePoints(2,7,
20534: PUSH
20535: LD_VAR 0 8
20539: STR
20540: PUSH
20541: LD_STRING );
20543: STR
20544: PPUSH
20545: CALL_OW 559
// end else
20549: GO 20986
// if not Team_Game then
20551: LD_EXP 25
20555: NOT
20556: IFFALSE 20614
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
20558: LD_ADDR_VAR 0 3
20562: PUSH
20563: LD_VAR 0 3
20567: PUSH
20568: LD_STRING #KingoftheHill-Private
20570: PUSH
20571: LD_OWVAR 2
20575: PUSH
20576: LD_OWVAR 2
20580: PUSH
20581: LD_VAR 0 2
20585: PUSH
20586: LD_INT 10
20588: PLUS
20589: PPUSH
20590: CALL_OW 110
20594: PUSH
20595: LD_INT 3
20597: DIV
20598: PUSH
20599: LD_EXP 20
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: ADD
20611: ST_TO_ADDR
20612: GO 20986
// begin for i in Teams [ 1 ] do
20614: LD_ADDR_VAR 0 4
20618: PUSH
20619: LD_EXP 22
20623: PUSH
20624: LD_INT 1
20626: ARRAY
20627: PUSH
20628: FOR_IN
20629: IFFALSE 20662
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20631: LD_ADDR_VAR 0 5
20635: PUSH
20636: LD_VAR 0 5
20640: PUSH
20641: LD_VAR 0 4
20645: PUSH
20646: LD_INT 10
20648: PLUS
20649: PPUSH
20650: CALL_OW 110
20654: PUSH
20655: LD_INT 3
20657: DIV
20658: PLUS
20659: ST_TO_ADDR
20660: GO 20628
20662: POP
20663: POP
// for i in Teams [ 2 ] do
20664: LD_ADDR_VAR 0 4
20668: PUSH
20669: LD_EXP 22
20673: PUSH
20674: LD_INT 2
20676: ARRAY
20677: PUSH
20678: FOR_IN
20679: IFFALSE 20712
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20681: LD_ADDR_VAR 0 6
20685: PUSH
20686: LD_VAR 0 6
20690: PUSH
20691: LD_VAR 0 4
20695: PUSH
20696: LD_INT 10
20698: PLUS
20699: PPUSH
20700: CALL_OW 110
20704: PUSH
20705: LD_INT 3
20707: DIV
20708: PLUS
20709: ST_TO_ADDR
20710: GO 20678
20712: POP
20713: POP
// for i in Teams [ 3 ] do
20714: LD_ADDR_VAR 0 4
20718: PUSH
20719: LD_EXP 22
20723: PUSH
20724: LD_INT 3
20726: ARRAY
20727: PUSH
20728: FOR_IN
20729: IFFALSE 20762
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20731: LD_ADDR_VAR 0 7
20735: PUSH
20736: LD_VAR 0 7
20740: PUSH
20741: LD_VAR 0 4
20745: PUSH
20746: LD_INT 10
20748: PLUS
20749: PPUSH
20750: CALL_OW 110
20754: PUSH
20755: LD_INT 3
20757: DIV
20758: PLUS
20759: ST_TO_ADDR
20760: GO 20728
20762: POP
20763: POP
// for i in Teams [ 4 ] do
20764: LD_ADDR_VAR 0 4
20768: PUSH
20769: LD_EXP 22
20773: PUSH
20774: LD_INT 4
20776: ARRAY
20777: PUSH
20778: FOR_IN
20779: IFFALSE 20812
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20781: LD_ADDR_VAR 0 8
20785: PUSH
20786: LD_VAR 0 8
20790: PUSH
20791: LD_VAR 0 4
20795: PUSH
20796: LD_INT 10
20798: PLUS
20799: PPUSH
20800: CALL_OW 110
20804: PUSH
20805: LD_INT 3
20807: DIV
20808: PLUS
20809: ST_TO_ADDR
20810: GO 20778
20812: POP
20813: POP
// if your_side in Teams [ 1 ] then
20814: LD_OWVAR 2
20818: PUSH
20819: LD_EXP 22
20823: PUSH
20824: LD_INT 1
20826: ARRAY
20827: IN
20828: IFFALSE 20857
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20830: LD_ADDR_VAR 0 3
20834: PUSH
20835: LD_STRING #KingoftheHill-Public-red
20837: PUSH
20838: LD_INT 3
20840: PUSH
20841: LD_VAR 0 5
20845: PUSH
20846: LD_EXP 20
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
20857: LD_OWVAR 2
20861: PUSH
20862: LD_EXP 22
20866: PUSH
20867: LD_INT 2
20869: ARRAY
20870: IN
20871: IFFALSE 20900
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20873: LD_ADDR_VAR 0 3
20877: PUSH
20878: LD_STRING #KingoftheHill-Public-blue
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: LD_VAR 0 6
20888: PUSH
20889: LD_EXP 20
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
20900: LD_OWVAR 2
20904: PUSH
20905: LD_EXP 22
20909: PUSH
20910: LD_INT 3
20912: ARRAY
20913: IN
20914: IFFALSE 20943
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20916: LD_ADDR_VAR 0 3
20920: PUSH
20921: LD_STRING #KingoftheHill-Public-yell
20923: PUSH
20924: LD_INT 2
20926: PUSH
20927: LD_VAR 0 7
20931: PUSH
20932: LD_EXP 20
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
20943: LD_OWVAR 2
20947: PUSH
20948: LD_EXP 22
20952: PUSH
20953: LD_INT 4
20955: ARRAY
20956: IN
20957: IFFALSE 20986
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20959: LD_ADDR_VAR 0 3
20963: PUSH
20964: LD_STRING #KingoftheHill-Public-green
20966: PUSH
20967: LD_INT 7
20969: PUSH
20970: LD_VAR 0 8
20974: PUSH
20975: LD_EXP 20
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: ST_TO_ADDR
// end ; Display_kings := vypis ;
20986: LD_ADDR_EXP 67
20990: PUSH
20991: LD_VAR 0 3
20995: ST_TO_ADDR
// end ;
20996: LD_VAR 0 1
21000: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
21001: LD_INT 0
21003: PPUSH
21004: PPUSH
21005: PPUSH
21006: PPUSH
21007: PPUSH
21008: PPUSH
21009: PPUSH
21010: PPUSH
21011: PPUSH
// side := [ ] ;
21012: LD_ADDR_VAR 0 2
21016: PUSH
21017: EMPTY
21018: ST_TO_ADDR
// red = 0 ;
21019: LD_ADDR_VAR 0 5
21023: PUSH
21024: LD_INT 0
21026: ST_TO_ADDR
// blue = 0 ;
21027: LD_ADDR_VAR 0 6
21031: PUSH
21032: LD_INT 0
21034: ST_TO_ADDR
// yel = 0 ;
21035: LD_ADDR_VAR 0 7
21039: PUSH
21040: LD_INT 0
21042: ST_TO_ADDR
// green = 0 ;
21043: LD_ADDR_VAR 0 8
21047: PUSH
21048: LD_INT 0
21050: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
21051: LD_ADDR_VAR 0 3
21055: PUSH
21056: LD_INT 19
21058: PPUSH
21059: LD_INT 21
21061: PUSH
21062: LD_INT 3
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 53
21071: PUSH
21072: EMPTY
21073: LIST
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PPUSH
21079: CALL_OW 70
21083: ST_TO_ADDR
// for un in list do
21084: LD_ADDR_VAR 0 4
21088: PUSH
21089: LD_VAR 0 3
21093: PUSH
21094: FOR_IN
21095: IFFALSE 21120
// side := side union GetSide ( un ) ;
21097: LD_ADDR_VAR 0 2
21101: PUSH
21102: LD_VAR 0 2
21106: PUSH
21107: LD_VAR 0 4
21111: PPUSH
21112: CALL_OW 255
21116: UNION
21117: ST_TO_ADDR
21118: GO 21094
21120: POP
21121: POP
// if side <> 1 then
21122: LD_VAR 0 2
21126: PUSH
21127: LD_INT 1
21129: NONEQUAL
21130: IFFALSE 21134
// exit ;
21132: GO 21497
// side := side [ 1 ] ;
21134: LD_ADDR_VAR 0 2
21138: PUSH
21139: LD_VAR 0 2
21143: PUSH
21144: LD_INT 1
21146: ARRAY
21147: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
21148: LD_VAR 0 2
21152: PUSH
21153: LD_INT 10
21155: PLUS
21156: PPUSH
21157: LD_VAR 0 2
21161: PUSH
21162: LD_INT 10
21164: PLUS
21165: PPUSH
21166: CALL_OW 110
21170: PUSH
21171: LD_INT 1
21173: PLUS
21174: PPUSH
21175: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
21179: LD_VAR 0 2
21183: PPUSH
21184: LD_VAR 0 2
21188: PUSH
21189: LD_INT 10
21191: PLUS
21192: PPUSH
21193: CALL_OW 110
21197: PUSH
21198: LD_INT 3
21200: DIV
21201: PPUSH
21202: LD_INT 2
21204: PPUSH
21205: CALL 18063 0 3
// if not Team_Game then
21209: LD_EXP 25
21213: NOT
21214: IFFALSE 21497
// if GetTag ( side + 10 ) >= final_count * 3 then
21216: LD_VAR 0 2
21220: PUSH
21221: LD_INT 10
21223: PLUS
21224: PPUSH
21225: CALL_OW 110
21229: PUSH
21230: LD_EXP 20
21234: PUSH
21235: LD_INT 3
21237: MUL
21238: GREATEREQUAL
21239: IFFALSE 21246
// enable ( 3 ) else
21241: LD_INT 3
21243: ENABLE_MARKED
21244: GO 21497
// begin for i in Teams [ 1 ] do
21246: LD_ADDR_VAR 0 9
21250: PUSH
21251: LD_EXP 22
21255: PUSH
21256: LD_INT 1
21258: ARRAY
21259: PUSH
21260: FOR_IN
21261: IFFALSE 21294
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21263: LD_ADDR_VAR 0 5
21267: PUSH
21268: LD_VAR 0 5
21272: PUSH
21273: LD_VAR 0 9
21277: PUSH
21278: LD_INT 10
21280: PLUS
21281: PPUSH
21282: CALL_OW 110
21286: PUSH
21287: LD_INT 3
21289: DIV
21290: PLUS
21291: ST_TO_ADDR
21292: GO 21260
21294: POP
21295: POP
// for i in Teams [ 2 ] do
21296: LD_ADDR_VAR 0 9
21300: PUSH
21301: LD_EXP 22
21305: PUSH
21306: LD_INT 2
21308: ARRAY
21309: PUSH
21310: FOR_IN
21311: IFFALSE 21344
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21313: LD_ADDR_VAR 0 6
21317: PUSH
21318: LD_VAR 0 6
21322: PUSH
21323: LD_VAR 0 9
21327: PUSH
21328: LD_INT 10
21330: PLUS
21331: PPUSH
21332: CALL_OW 110
21336: PUSH
21337: LD_INT 3
21339: DIV
21340: PLUS
21341: ST_TO_ADDR
21342: GO 21310
21344: POP
21345: POP
// for i in Teams [ 3 ] do
21346: LD_ADDR_VAR 0 9
21350: PUSH
21351: LD_EXP 22
21355: PUSH
21356: LD_INT 3
21358: ARRAY
21359: PUSH
21360: FOR_IN
21361: IFFALSE 21394
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21363: LD_ADDR_VAR 0 7
21367: PUSH
21368: LD_VAR 0 7
21372: PUSH
21373: LD_VAR 0 9
21377: PUSH
21378: LD_INT 10
21380: PLUS
21381: PPUSH
21382: CALL_OW 110
21386: PUSH
21387: LD_INT 3
21389: DIV
21390: PLUS
21391: ST_TO_ADDR
21392: GO 21360
21394: POP
21395: POP
// for i in Teams [ 4 ] do
21396: LD_ADDR_VAR 0 9
21400: PUSH
21401: LD_EXP 22
21405: PUSH
21406: LD_INT 4
21408: ARRAY
21409: PUSH
21410: FOR_IN
21411: IFFALSE 21444
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21413: LD_ADDR_VAR 0 8
21417: PUSH
21418: LD_VAR 0 8
21422: PUSH
21423: LD_VAR 0 9
21427: PUSH
21428: LD_INT 10
21430: PLUS
21431: PPUSH
21432: CALL_OW 110
21436: PUSH
21437: LD_INT 3
21439: DIV
21440: PLUS
21441: ST_TO_ADDR
21442: GO 21410
21444: POP
21445: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
21446: LD_VAR 0 5
21450: PUSH
21451: LD_EXP 20
21455: GREATEREQUAL
21456: PUSH
21457: LD_VAR 0 6
21461: PUSH
21462: LD_EXP 20
21466: GREATEREQUAL
21467: OR
21468: PUSH
21469: LD_VAR 0 7
21473: PUSH
21474: LD_EXP 20
21478: GREATEREQUAL
21479: OR
21480: PUSH
21481: LD_VAR 0 8
21485: PUSH
21486: LD_EXP 20
21490: GREATEREQUAL
21491: OR
21492: IFFALSE 21497
// enable ( 3 ) ;
21494: LD_INT 3
21496: ENABLE_MARKED
// end ; end ;
21497: LD_VAR 0 1
21501: RET
// every 0 0$1 marked 2 do
21502: GO 21504
21504: DISABLE
// begin count_king ;
21505: CALL 21001 0 0
// show_public_points ;
21509: CALL 19876 0 0
// enable ;
21513: ENABLE
// end ;
21514: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
21515: GO 21517
21517: DISABLE
21518: LD_INT 0
21520: PPUSH
21521: PPUSH
21522: PPUSH
21523: PPUSH
21524: PPUSH
21525: PPUSH
// begin win := [ ] ;
21526: LD_ADDR_LOC 35
21530: PUSH
21531: EMPTY
21532: ST_TO_ADDR
// red = 0 ;
21533: LD_ADDR_VAR 0 2
21537: PUSH
21538: LD_INT 0
21540: ST_TO_ADDR
// blue = 0 ;
21541: LD_ADDR_VAR 0 3
21545: PUSH
21546: LD_INT 0
21548: ST_TO_ADDR
// yel = 0 ;
21549: LD_ADDR_VAR 0 4
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
// green = 0 ;
21557: LD_ADDR_VAR 0 5
21561: PUSH
21562: LD_INT 0
21564: ST_TO_ADDR
// if not Team_Game then
21565: LD_EXP 25
21569: NOT
21570: IFFALSE 21647
// begin for side = 1 to 8 do
21572: LD_ADDR_VAR 0 1
21576: PUSH
21577: DOUBLE
21578: LD_INT 1
21580: DEC
21581: ST_TO_ADDR
21582: LD_INT 8
21584: PUSH
21585: FOR_TO
21586: IFFALSE 21631
// if GetTag ( side + 10 ) >= final_count * 3 then
21588: LD_VAR 0 1
21592: PUSH
21593: LD_INT 10
21595: PLUS
21596: PPUSH
21597: CALL_OW 110
21601: PUSH
21602: LD_EXP 20
21606: PUSH
21607: LD_INT 3
21609: MUL
21610: GREATEREQUAL
21611: IFFALSE 21629
// win := win ^ side ;
21613: LD_ADDR_LOC 35
21617: PUSH
21618: LD_LOC 35
21622: PUSH
21623: LD_VAR 0 1
21627: ADD
21628: ST_TO_ADDR
21629: GO 21585
21631: POP
21632: POP
// if win then
21633: LD_LOC 35
21637: IFFALSE 21644
// enable ( 4 ) else
21639: LD_INT 4
21641: ENABLE_MARKED
21642: GO 21645
// enable ;
21644: ENABLE
// end else
21645: GO 21963
// begin for i in Teams [ 1 ] do
21647: LD_ADDR_VAR 0 6
21651: PUSH
21652: LD_EXP 22
21656: PUSH
21657: LD_INT 1
21659: ARRAY
21660: PUSH
21661: FOR_IN
21662: IFFALSE 21695
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21664: LD_ADDR_VAR 0 2
21668: PUSH
21669: LD_VAR 0 2
21673: PUSH
21674: LD_VAR 0 6
21678: PUSH
21679: LD_INT 10
21681: PLUS
21682: PPUSH
21683: CALL_OW 110
21687: PUSH
21688: LD_INT 3
21690: DIV
21691: PLUS
21692: ST_TO_ADDR
21693: GO 21661
21695: POP
21696: POP
// for i in Teams [ 2 ] do
21697: LD_ADDR_VAR 0 6
21701: PUSH
21702: LD_EXP 22
21706: PUSH
21707: LD_INT 2
21709: ARRAY
21710: PUSH
21711: FOR_IN
21712: IFFALSE 21745
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21714: LD_ADDR_VAR 0 3
21718: PUSH
21719: LD_VAR 0 3
21723: PUSH
21724: LD_VAR 0 6
21728: PUSH
21729: LD_INT 10
21731: PLUS
21732: PPUSH
21733: CALL_OW 110
21737: PUSH
21738: LD_INT 3
21740: DIV
21741: PLUS
21742: ST_TO_ADDR
21743: GO 21711
21745: POP
21746: POP
// for i in Teams [ 3 ] do
21747: LD_ADDR_VAR 0 6
21751: PUSH
21752: LD_EXP 22
21756: PUSH
21757: LD_INT 3
21759: ARRAY
21760: PUSH
21761: FOR_IN
21762: IFFALSE 21795
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21764: LD_ADDR_VAR 0 4
21768: PUSH
21769: LD_VAR 0 4
21773: PUSH
21774: LD_VAR 0 6
21778: PUSH
21779: LD_INT 10
21781: PLUS
21782: PPUSH
21783: CALL_OW 110
21787: PUSH
21788: LD_INT 3
21790: DIV
21791: PLUS
21792: ST_TO_ADDR
21793: GO 21761
21795: POP
21796: POP
// for i in Teams [ 4 ] do
21797: LD_ADDR_VAR 0 6
21801: PUSH
21802: LD_EXP 22
21806: PUSH
21807: LD_INT 4
21809: ARRAY
21810: PUSH
21811: FOR_IN
21812: IFFALSE 21845
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21814: LD_ADDR_VAR 0 5
21818: PUSH
21819: LD_VAR 0 5
21823: PUSH
21824: LD_VAR 0 6
21828: PUSH
21829: LD_INT 10
21831: PLUS
21832: PPUSH
21833: CALL_OW 110
21837: PUSH
21838: LD_INT 3
21840: DIV
21841: PLUS
21842: ST_TO_ADDR
21843: GO 21811
21845: POP
21846: POP
// if red >= final_count then
21847: LD_VAR 0 2
21851: PUSH
21852: LD_EXP 20
21856: GREATEREQUAL
21857: IFFALSE 21873
// win = teams [ 1 ] ;
21859: LD_ADDR_LOC 35
21863: PUSH
21864: LD_EXP 22
21868: PUSH
21869: LD_INT 1
21871: ARRAY
21872: ST_TO_ADDR
// if blue >= final_count then
21873: LD_VAR 0 3
21877: PUSH
21878: LD_EXP 20
21882: GREATEREQUAL
21883: IFFALSE 21899
// win = teams [ 2 ] ;
21885: LD_ADDR_LOC 35
21889: PUSH
21890: LD_EXP 22
21894: PUSH
21895: LD_INT 2
21897: ARRAY
21898: ST_TO_ADDR
// if yel >= final_count then
21899: LD_VAR 0 4
21903: PUSH
21904: LD_EXP 20
21908: GREATEREQUAL
21909: IFFALSE 21925
// win = teams [ 3 ] ;
21911: LD_ADDR_LOC 35
21915: PUSH
21916: LD_EXP 22
21920: PUSH
21921: LD_INT 3
21923: ARRAY
21924: ST_TO_ADDR
// if green >= final_count then
21925: LD_VAR 0 5
21929: PUSH
21930: LD_EXP 20
21934: GREATEREQUAL
21935: IFFALSE 21951
// win = teams [ 4 ] ;
21937: LD_ADDR_LOC 35
21941: PUSH
21942: LD_EXP 22
21946: PUSH
21947: LD_INT 4
21949: ARRAY
21950: ST_TO_ADDR
// if win then
21951: LD_LOC 35
21955: IFFALSE 21962
// enable ( 4 ) else
21957: LD_INT 4
21959: ENABLE_MARKED
21960: GO 21963
// enable ;
21962: ENABLE
// end ; end ;
21963: PPOPN 6
21965: END
// every 0 0$1 marked 4 do
21966: GO 21968
21968: DISABLE
// begin if Player_Side in win then
21969: LD_EXP 27
21973: PUSH
21974: LD_LOC 35
21978: IN
21979: IFFALSE 21995
// begin wait ( 0 0$2 ) ;
21981: LD_INT 70
21983: PPUSH
21984: CALL_OW 67
// enable ( 401 ) ;
21988: LD_INT 401
21990: ENABLE_MARKED
// exit ;
21991: GO 22011
// end else
21993: GO 22011
// begin wait ( 0 0$2 ) ;
21995: LD_INT 70
21997: PPUSH
21998: CALL_OW 67
// Multiplayer_Loose_Message ;
22002: CALL_OW 521
// enable ( 400 ) ;
22006: LD_INT 400
22008: ENABLE_MARKED
// exit ;
22009: GO 22011
// end ; end ; end_of_file
22011: END
// export function SetMpTechs ( ) ; var side , i ; begin
22012: LD_INT 0
22014: PPUSH
22015: PPUSH
22016: PPUSH
// for side = 1 to 8 do
22017: LD_ADDR_VAR 0 2
22021: PUSH
22022: DOUBLE
22023: LD_INT 1
22025: DEC
22026: ST_TO_ADDR
22027: LD_INT 8
22029: PUSH
22030: FOR_TO
22031: IFFALSE 22152
// begin for i = 1 to 72 do
22033: LD_ADDR_VAR 0 3
22037: PUSH
22038: DOUBLE
22039: LD_INT 1
22041: DEC
22042: ST_TO_ADDR
22043: LD_INT 72
22045: PUSH
22046: FOR_TO
22047: IFFALSE 22078
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
22049: LD_VAR 0 3
22053: PPUSH
22054: LD_VAR 0 2
22058: PPUSH
22059: LD_INT 0
22061: PPUSH
22062: LD_VAR 0 3
22066: PPUSH
22067: CALL_OW 565
22071: PPUSH
22072: CALL_OW 322
22076: GO 22046
22078: POP
22079: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
22080: LD_INT 73
22082: PPUSH
22083: LD_VAR 0 2
22087: PPUSH
22088: LD_INT 0
22090: PPUSH
22091: LD_INT 25
22093: PPUSH
22094: CALL_OW 565
22098: PPUSH
22099: CALL_OW 322
// for i = 0 to 40 do
22103: LD_ADDR_VAR 0 3
22107: PUSH
22108: DOUBLE
22109: LD_INT 0
22111: DEC
22112: ST_TO_ADDR
22113: LD_INT 40
22115: PUSH
22116: FOR_TO
22117: IFFALSE 22148
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
22119: LD_VAR 0 3
22123: PPUSH
22124: LD_VAR 0 2
22128: PPUSH
22129: LD_INT 1
22131: PPUSH
22132: LD_VAR 0 3
22136: PPUSH
22137: CALL_OW 565
22141: PPUSH
22142: CALL_OW 324
22146: GO 22116
22148: POP
22149: POP
// end ;
22150: GO 22030
22152: POP
22153: POP
// end ;
22154: LD_VAR 0 1
22158: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
22159: LD_INT 0
22161: PPUSH
22162: PPUSH
22163: PPUSH
// for side = 1 to 8 do
22164: LD_ADDR_VAR 0 3
22168: PUSH
22169: DOUBLE
22170: LD_INT 1
22172: DEC
22173: ST_TO_ADDR
22174: LD_INT 8
22176: PUSH
22177: FOR_TO
22178: IFFALSE 26174
// begin for i = 1 to 73 do
22180: LD_ADDR_VAR 0 4
22184: PUSH
22185: DOUBLE
22186: LD_INT 1
22188: DEC
22189: ST_TO_ADDR
22190: LD_INT 73
22192: PUSH
22193: FOR_TO
22194: IFFALSE 22215
// SetTech ( i , side , state_disabled ) ;
22196: LD_VAR 0 4
22200: PPUSH
22201: LD_VAR 0 3
22205: PPUSH
22206: LD_INT 0
22208: PPUSH
22209: CALL_OW 322
22213: GO 22193
22215: POP
22216: POP
// for i = 0 to 40 do
22217: LD_ADDR_VAR 0 4
22221: PUSH
22222: DOUBLE
22223: LD_INT 0
22225: DEC
22226: ST_TO_ADDR
22227: LD_INT 40
22229: PUSH
22230: FOR_TO
22231: IFFALSE 22252
// SetRestrict ( i , side , false ) ;
22233: LD_VAR 0 4
22237: PPUSH
22238: LD_VAR 0 3
22242: PPUSH
22243: LD_INT 0
22245: PPUSH
22246: CALL_OW 324
22250: GO 22230
22252: POP
22253: POP
// case level of 1 :
22254: LD_VAR 0 1
22258: PUSH
22259: LD_INT 1
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22420
22267: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22268: LD_INT 35
22270: PPUSH
22271: LD_VAR 0 3
22275: PPUSH
22276: LD_INT 1
22278: PPUSH
22279: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22283: LD_INT 45
22285: PPUSH
22286: LD_VAR 0 3
22290: PPUSH
22291: LD_INT 1
22293: PPUSH
22294: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22298: LD_INT 46
22300: PPUSH
22301: LD_VAR 0 3
22305: PPUSH
22306: LD_INT 1
22308: PPUSH
22309: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22313: LD_INT 47
22315: PPUSH
22316: LD_VAR 0 3
22320: PPUSH
22321: LD_INT 1
22323: PPUSH
22324: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22328: LD_INT 0
22330: PPUSH
22331: LD_VAR 0 3
22335: PPUSH
22336: LD_INT 1
22338: PPUSH
22339: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22343: LD_INT 2
22345: PPUSH
22346: LD_VAR 0 3
22350: PPUSH
22351: LD_INT 1
22353: PPUSH
22354: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22358: LD_INT 4
22360: PPUSH
22361: LD_VAR 0 3
22365: PPUSH
22366: LD_INT 1
22368: PPUSH
22369: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22373: LD_INT 6
22375: PPUSH
22376: LD_VAR 0 3
22380: PPUSH
22381: LD_INT 1
22383: PPUSH
22384: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22388: LD_INT 29
22390: PPUSH
22391: LD_VAR 0 3
22395: PPUSH
22396: LD_INT 1
22398: PPUSH
22399: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22403: LD_INT 31
22405: PPUSH
22406: LD_VAR 0 3
22410: PPUSH
22411: LD_INT 1
22413: PPUSH
22414: CALL_OW 324
// end ; 2 :
22418: GO 26172
22420: LD_INT 2
22422: DOUBLE
22423: EQUAL
22424: IFTRUE 22428
22426: GO 22626
22428: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22429: LD_INT 35
22431: PPUSH
22432: LD_VAR 0 3
22436: PPUSH
22437: LD_INT 1
22439: PPUSH
22440: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22444: LD_INT 45
22446: PPUSH
22447: LD_VAR 0 3
22451: PPUSH
22452: LD_INT 1
22454: PPUSH
22455: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22459: LD_INT 46
22461: PPUSH
22462: LD_VAR 0 3
22466: PPUSH
22467: LD_INT 1
22469: PPUSH
22470: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22474: LD_INT 47
22476: PPUSH
22477: LD_VAR 0 3
22481: PPUSH
22482: LD_INT 1
22484: PPUSH
22485: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22489: LD_INT 1
22491: PPUSH
22492: LD_VAR 0 3
22496: PPUSH
22497: LD_INT 1
22499: PPUSH
22500: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22504: LD_INT 2
22506: PPUSH
22507: LD_VAR 0 3
22511: PPUSH
22512: LD_INT 1
22514: PPUSH
22515: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22519: LD_INT 11
22521: PPUSH
22522: LD_VAR 0 3
22526: PPUSH
22527: LD_INT 1
22529: PPUSH
22530: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22534: LD_INT 0
22536: PPUSH
22537: LD_VAR 0 3
22541: PPUSH
22542: LD_INT 1
22544: PPUSH
22545: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22549: LD_INT 2
22551: PPUSH
22552: LD_VAR 0 3
22556: PPUSH
22557: LD_INT 1
22559: PPUSH
22560: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22564: LD_INT 4
22566: PPUSH
22567: LD_VAR 0 3
22571: PPUSH
22572: LD_INT 1
22574: PPUSH
22575: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22579: LD_INT 6
22581: PPUSH
22582: LD_VAR 0 3
22586: PPUSH
22587: LD_INT 1
22589: PPUSH
22590: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22594: LD_INT 29
22596: PPUSH
22597: LD_VAR 0 3
22601: PPUSH
22602: LD_INT 1
22604: PPUSH
22605: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22609: LD_INT 31
22611: PPUSH
22612: LD_VAR 0 3
22616: PPUSH
22617: LD_INT 1
22619: PPUSH
22620: CALL_OW 324
// end ; 3 :
22624: GO 26172
22626: LD_INT 3
22628: DOUBLE
22629: EQUAL
22630: IFTRUE 22634
22632: GO 23087
22634: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22635: LD_INT 35
22637: PPUSH
22638: LD_VAR 0 3
22642: PPUSH
22643: LD_INT 1
22645: PPUSH
22646: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22650: LD_INT 45
22652: PPUSH
22653: LD_VAR 0 3
22657: PPUSH
22658: LD_INT 1
22660: PPUSH
22661: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22665: LD_INT 46
22667: PPUSH
22668: LD_VAR 0 3
22672: PPUSH
22673: LD_INT 1
22675: PPUSH
22676: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22680: LD_INT 47
22682: PPUSH
22683: LD_VAR 0 3
22687: PPUSH
22688: LD_INT 1
22690: PPUSH
22691: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22695: LD_INT 1
22697: PPUSH
22698: LD_VAR 0 3
22702: PPUSH
22703: LD_INT 1
22705: PPUSH
22706: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22710: LD_INT 2
22712: PPUSH
22713: LD_VAR 0 3
22717: PPUSH
22718: LD_INT 1
22720: PPUSH
22721: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22725: LD_INT 11
22727: PPUSH
22728: LD_VAR 0 3
22732: PPUSH
22733: LD_INT 1
22735: PPUSH
22736: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22740: LD_INT 48
22742: PPUSH
22743: LD_VAR 0 3
22747: PPUSH
22748: LD_INT 1
22750: PPUSH
22751: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22755: LD_INT 69
22757: PPUSH
22758: LD_VAR 0 3
22762: PPUSH
22763: LD_INT 1
22765: PPUSH
22766: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22770: LD_INT 39
22772: PPUSH
22773: LD_VAR 0 3
22777: PPUSH
22778: LD_INT 1
22780: PPUSH
22781: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22785: LD_INT 43
22787: PPUSH
22788: LD_VAR 0 3
22792: PPUSH
22793: LD_INT 1
22795: PPUSH
22796: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22800: LD_INT 51
22802: PPUSH
22803: LD_VAR 0 3
22807: PPUSH
22808: LD_INT 1
22810: PPUSH
22811: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22815: LD_INT 6
22817: PPUSH
22818: LD_VAR 0 3
22822: PPUSH
22823: LD_INT 1
22825: PPUSH
22826: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22830: LD_INT 0
22832: PPUSH
22833: LD_VAR 0 3
22837: PPUSH
22838: LD_INT 1
22840: PPUSH
22841: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22845: LD_INT 2
22847: PPUSH
22848: LD_VAR 0 3
22852: PPUSH
22853: LD_INT 1
22855: PPUSH
22856: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22860: LD_INT 3
22862: PPUSH
22863: LD_VAR 0 3
22867: PPUSH
22868: LD_INT 1
22870: PPUSH
22871: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22875: LD_INT 4
22877: PPUSH
22878: LD_VAR 0 3
22882: PPUSH
22883: LD_INT 1
22885: PPUSH
22886: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22890: LD_INT 6
22892: PPUSH
22893: LD_VAR 0 3
22897: PPUSH
22898: LD_INT 1
22900: PPUSH
22901: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22905: LD_INT 7
22907: PPUSH
22908: LD_VAR 0 3
22912: PPUSH
22913: LD_INT 1
22915: PPUSH
22916: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22920: LD_INT 8
22922: PPUSH
22923: LD_VAR 0 3
22927: PPUSH
22928: LD_INT 1
22930: PPUSH
22931: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22935: LD_INT 10
22937: PPUSH
22938: LD_VAR 0 3
22942: PPUSH
22943: LD_INT 1
22945: PPUSH
22946: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22950: LD_INT 15
22952: PPUSH
22953: LD_VAR 0 3
22957: PPUSH
22958: LD_INT 1
22960: PPUSH
22961: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22965: LD_INT 16
22967: PPUSH
22968: LD_VAR 0 3
22972: PPUSH
22973: LD_INT 1
22975: PPUSH
22976: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22980: LD_INT 17
22982: PPUSH
22983: LD_VAR 0 3
22987: PPUSH
22988: LD_INT 1
22990: PPUSH
22991: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22995: LD_INT 20
22997: PPUSH
22998: LD_VAR 0 3
23002: PPUSH
23003: LD_INT 1
23005: PPUSH
23006: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23010: LD_INT 26
23012: PPUSH
23013: LD_VAR 0 3
23017: PPUSH
23018: LD_INT 1
23020: PPUSH
23021: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23025: LD_INT 27
23027: PPUSH
23028: LD_VAR 0 3
23032: PPUSH
23033: LD_INT 1
23035: PPUSH
23036: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23040: LD_INT 29
23042: PPUSH
23043: LD_VAR 0 3
23047: PPUSH
23048: LD_INT 1
23050: PPUSH
23051: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23055: LD_INT 31
23057: PPUSH
23058: LD_VAR 0 3
23062: PPUSH
23063: LD_INT 1
23065: PPUSH
23066: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23070: LD_INT 32
23072: PPUSH
23073: LD_VAR 0 3
23077: PPUSH
23078: LD_INT 1
23080: PPUSH
23081: CALL_OW 324
// end ; 4 :
23085: GO 26172
23087: LD_INT 4
23089: DOUBLE
23090: EQUAL
23091: IFTRUE 23095
23093: GO 24043
23095: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23096: LD_INT 35
23098: PPUSH
23099: LD_VAR 0 3
23103: PPUSH
23104: LD_INT 1
23106: PPUSH
23107: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23111: LD_INT 45
23113: PPUSH
23114: LD_VAR 0 3
23118: PPUSH
23119: LD_INT 1
23121: PPUSH
23122: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23126: LD_INT 46
23128: PPUSH
23129: LD_VAR 0 3
23133: PPUSH
23134: LD_INT 1
23136: PPUSH
23137: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23141: LD_INT 47
23143: PPUSH
23144: LD_VAR 0 3
23148: PPUSH
23149: LD_INT 1
23151: PPUSH
23152: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23156: LD_INT 1
23158: PPUSH
23159: LD_VAR 0 3
23163: PPUSH
23164: LD_INT 1
23166: PPUSH
23167: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23171: LD_INT 2
23173: PPUSH
23174: LD_VAR 0 3
23178: PPUSH
23179: LD_INT 1
23181: PPUSH
23182: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23186: LD_INT 11
23188: PPUSH
23189: LD_VAR 0 3
23193: PPUSH
23194: LD_INT 1
23196: PPUSH
23197: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23201: LD_INT 20
23203: PPUSH
23204: LD_VAR 0 3
23208: PPUSH
23209: LD_INT 1
23211: PPUSH
23212: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23216: LD_INT 48
23218: PPUSH
23219: LD_VAR 0 3
23223: PPUSH
23224: LD_INT 1
23226: PPUSH
23227: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23231: LD_INT 49
23233: PPUSH
23234: LD_VAR 0 3
23238: PPUSH
23239: LD_INT 1
23241: PPUSH
23242: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23246: LD_INT 69
23248: PPUSH
23249: LD_VAR 0 3
23253: PPUSH
23254: LD_INT 1
23256: PPUSH
23257: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23261: LD_INT 39
23263: PPUSH
23264: LD_VAR 0 3
23268: PPUSH
23269: LD_INT 1
23271: PPUSH
23272: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23276: LD_INT 34
23278: PPUSH
23279: LD_VAR 0 3
23283: PPUSH
23284: LD_INT 1
23286: PPUSH
23287: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23291: LD_INT 42
23293: PPUSH
23294: LD_VAR 0 3
23298: PPUSH
23299: LD_INT 1
23301: PPUSH
23302: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23306: LD_INT 44
23308: PPUSH
23309: LD_VAR 0 3
23313: PPUSH
23314: LD_INT 1
23316: PPUSH
23317: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23321: LD_INT 41
23323: PPUSH
23324: LD_VAR 0 3
23328: PPUSH
23329: LD_INT 1
23331: PPUSH
23332: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23336: LD_INT 43
23338: PPUSH
23339: LD_VAR 0 3
23343: PPUSH
23344: LD_INT 1
23346: PPUSH
23347: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23351: LD_INT 70
23353: PPUSH
23354: LD_VAR 0 3
23358: PPUSH
23359: LD_INT 1
23361: PPUSH
23362: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23366: LD_INT 51
23368: PPUSH
23369: LD_VAR 0 3
23373: PPUSH
23374: LD_INT 1
23376: PPUSH
23377: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23381: LD_INT 52
23383: PPUSH
23384: LD_VAR 0 3
23388: PPUSH
23389: LD_INT 1
23391: PPUSH
23392: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23396: LD_INT 6
23398: PPUSH
23399: LD_VAR 0 3
23403: PPUSH
23404: LD_INT 1
23406: PPUSH
23407: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23411: LD_INT 15
23413: PPUSH
23414: LD_VAR 0 3
23418: PPUSH
23419: LD_INT 1
23421: PPUSH
23422: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23426: LD_INT 7
23428: PPUSH
23429: LD_VAR 0 3
23433: PPUSH
23434: LD_INT 1
23436: PPUSH
23437: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23441: LD_INT 12
23443: PPUSH
23444: LD_VAR 0 3
23448: PPUSH
23449: LD_INT 1
23451: PPUSH
23452: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23456: LD_INT 18
23458: PPUSH
23459: LD_VAR 0 3
23463: PPUSH
23464: LD_INT 1
23466: PPUSH
23467: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23471: LD_INT 60
23473: PPUSH
23474: LD_VAR 0 3
23478: PPUSH
23479: LD_INT 1
23481: PPUSH
23482: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23486: LD_INT 9
23488: PPUSH
23489: LD_VAR 0 3
23493: PPUSH
23494: LD_INT 1
23496: PPUSH
23497: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23501: LD_INT 30
23503: PPUSH
23504: LD_VAR 0 3
23508: PPUSH
23509: LD_INT 1
23511: PPUSH
23512: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23516: LD_INT 37
23518: PPUSH
23519: LD_VAR 0 3
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23531: LD_INT 5
23533: PPUSH
23534: LD_VAR 0 3
23538: PPUSH
23539: LD_INT 1
23541: PPUSH
23542: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23546: LD_INT 66
23548: PPUSH
23549: LD_VAR 0 3
23553: PPUSH
23554: LD_INT 1
23556: PPUSH
23557: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23561: LD_INT 21
23563: PPUSH
23564: LD_VAR 0 3
23568: PPUSH
23569: LD_INT 1
23571: PPUSH
23572: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23576: LD_INT 22
23578: PPUSH
23579: LD_VAR 0 3
23583: PPUSH
23584: LD_INT 1
23586: PPUSH
23587: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23591: LD_INT 54
23593: PPUSH
23594: LD_VAR 0 3
23598: PPUSH
23599: LD_INT 1
23601: PPUSH
23602: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23606: LD_INT 0
23608: PPUSH
23609: LD_VAR 0 3
23613: PPUSH
23614: LD_INT 1
23616: PPUSH
23617: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23621: LD_INT 1
23623: PPUSH
23624: LD_VAR 0 3
23628: PPUSH
23629: LD_INT 1
23631: PPUSH
23632: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23636: LD_INT 2
23638: PPUSH
23639: LD_VAR 0 3
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23651: LD_INT 3
23653: PPUSH
23654: LD_VAR 0 3
23658: PPUSH
23659: LD_INT 1
23661: PPUSH
23662: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23666: LD_INT 4
23668: PPUSH
23669: LD_VAR 0 3
23673: PPUSH
23674: LD_INT 1
23676: PPUSH
23677: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23681: LD_INT 5
23683: PPUSH
23684: LD_VAR 0 3
23688: PPUSH
23689: LD_INT 1
23691: PPUSH
23692: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23696: LD_INT 6
23698: PPUSH
23699: LD_VAR 0 3
23703: PPUSH
23704: LD_INT 1
23706: PPUSH
23707: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23711: LD_INT 7
23713: PPUSH
23714: LD_VAR 0 3
23718: PPUSH
23719: LD_INT 1
23721: PPUSH
23722: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23726: LD_INT 8
23728: PPUSH
23729: LD_VAR 0 3
23733: PPUSH
23734: LD_INT 1
23736: PPUSH
23737: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23741: LD_INT 10
23743: PPUSH
23744: LD_VAR 0 3
23748: PPUSH
23749: LD_INT 1
23751: PPUSH
23752: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23756: LD_INT 11
23758: PPUSH
23759: LD_VAR 0 3
23763: PPUSH
23764: LD_INT 1
23766: PPUSH
23767: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23771: LD_INT 12
23773: PPUSH
23774: LD_VAR 0 3
23778: PPUSH
23779: LD_INT 1
23781: PPUSH
23782: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23786: LD_INT 13
23788: PPUSH
23789: LD_VAR 0 3
23793: PPUSH
23794: LD_INT 1
23796: PPUSH
23797: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23801: LD_INT 14
23803: PPUSH
23804: LD_VAR 0 3
23808: PPUSH
23809: LD_INT 1
23811: PPUSH
23812: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23816: LD_INT 15
23818: PPUSH
23819: LD_VAR 0 3
23823: PPUSH
23824: LD_INT 1
23826: PPUSH
23827: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23831: LD_INT 16
23833: PPUSH
23834: LD_VAR 0 3
23838: PPUSH
23839: LD_INT 1
23841: PPUSH
23842: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23846: LD_INT 17
23848: PPUSH
23849: LD_VAR 0 3
23853: PPUSH
23854: LD_INT 1
23856: PPUSH
23857: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23861: LD_INT 19
23863: PPUSH
23864: LD_VAR 0 3
23868: PPUSH
23869: LD_INT 1
23871: PPUSH
23872: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23876: LD_INT 20
23878: PPUSH
23879: LD_VAR 0 3
23883: PPUSH
23884: LD_INT 1
23886: PPUSH
23887: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23891: LD_INT 21
23893: PPUSH
23894: LD_VAR 0 3
23898: PPUSH
23899: LD_INT 1
23901: PPUSH
23902: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23906: LD_INT 23
23908: PPUSH
23909: LD_VAR 0 3
23913: PPUSH
23914: LD_INT 1
23916: PPUSH
23917: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23921: LD_INT 26
23923: PPUSH
23924: LD_VAR 0 3
23928: PPUSH
23929: LD_INT 1
23931: PPUSH
23932: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23936: LD_INT 27
23938: PPUSH
23939: LD_VAR 0 3
23943: PPUSH
23944: LD_INT 1
23946: PPUSH
23947: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23951: LD_INT 28
23953: PPUSH
23954: LD_VAR 0 3
23958: PPUSH
23959: LD_INT 1
23961: PPUSH
23962: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23966: LD_INT 29
23968: PPUSH
23969: LD_VAR 0 3
23973: PPUSH
23974: LD_INT 1
23976: PPUSH
23977: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23981: LD_INT 30
23983: PPUSH
23984: LD_VAR 0 3
23988: PPUSH
23989: LD_INT 1
23991: PPUSH
23992: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23996: LD_INT 31
23998: PPUSH
23999: LD_VAR 0 3
24003: PPUSH
24004: LD_INT 1
24006: PPUSH
24007: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24011: LD_INT 32
24013: PPUSH
24014: LD_VAR 0 3
24018: PPUSH
24019: LD_INT 1
24021: PPUSH
24022: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
24026: LD_INT 36
24028: PPUSH
24029: LD_VAR 0 3
24033: PPUSH
24034: LD_INT 1
24036: PPUSH
24037: CALL_OW 324
// end ; 5 :
24041: GO 26172
24043: LD_INT 5
24045: DOUBLE
24046: EQUAL
24047: IFTRUE 24051
24049: GO 25164
24051: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
24052: LD_INT 35
24054: PPUSH
24055: LD_VAR 0 3
24059: PPUSH
24060: LD_INT 1
24062: PPUSH
24063: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
24067: LD_INT 45
24069: PPUSH
24070: LD_VAR 0 3
24074: PPUSH
24075: LD_INT 1
24077: PPUSH
24078: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
24082: LD_INT 46
24084: PPUSH
24085: LD_VAR 0 3
24089: PPUSH
24090: LD_INT 1
24092: PPUSH
24093: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
24097: LD_INT 47
24099: PPUSH
24100: LD_VAR 0 3
24104: PPUSH
24105: LD_INT 1
24107: PPUSH
24108: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
24112: LD_INT 1
24114: PPUSH
24115: LD_VAR 0 3
24119: PPUSH
24120: LD_INT 1
24122: PPUSH
24123: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
24127: LD_INT 2
24129: PPUSH
24130: LD_VAR 0 3
24134: PPUSH
24135: LD_INT 1
24137: PPUSH
24138: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
24142: LD_INT 11
24144: PPUSH
24145: LD_VAR 0 3
24149: PPUSH
24150: LD_INT 1
24152: PPUSH
24153: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24157: LD_INT 20
24159: PPUSH
24160: LD_VAR 0 3
24164: PPUSH
24165: LD_INT 1
24167: PPUSH
24168: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24172: LD_INT 48
24174: PPUSH
24175: LD_VAR 0 3
24179: PPUSH
24180: LD_INT 1
24182: PPUSH
24183: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24187: LD_INT 49
24189: PPUSH
24190: LD_VAR 0 3
24194: PPUSH
24195: LD_INT 1
24197: PPUSH
24198: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24202: LD_INT 69
24204: PPUSH
24205: LD_VAR 0 3
24209: PPUSH
24210: LD_INT 1
24212: PPUSH
24213: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24217: LD_INT 39
24219: PPUSH
24220: LD_VAR 0 3
24224: PPUSH
24225: LD_INT 1
24227: PPUSH
24228: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24232: LD_INT 34
24234: PPUSH
24235: LD_VAR 0 3
24239: PPUSH
24240: LD_INT 1
24242: PPUSH
24243: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24247: LD_INT 42
24249: PPUSH
24250: LD_VAR 0 3
24254: PPUSH
24255: LD_INT 1
24257: PPUSH
24258: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24262: LD_INT 44
24264: PPUSH
24265: LD_VAR 0 3
24269: PPUSH
24270: LD_INT 1
24272: PPUSH
24273: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24277: LD_INT 41
24279: PPUSH
24280: LD_VAR 0 3
24284: PPUSH
24285: LD_INT 1
24287: PPUSH
24288: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24292: LD_INT 40
24294: PPUSH
24295: LD_VAR 0 3
24299: PPUSH
24300: LD_INT 1
24302: PPUSH
24303: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24307: LD_INT 43
24309: PPUSH
24310: LD_VAR 0 3
24314: PPUSH
24315: LD_INT 1
24317: PPUSH
24318: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24322: LD_INT 70
24324: PPUSH
24325: LD_VAR 0 3
24329: PPUSH
24330: LD_INT 1
24332: PPUSH
24333: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24337: LD_INT 51
24339: PPUSH
24340: LD_VAR 0 3
24344: PPUSH
24345: LD_INT 1
24347: PPUSH
24348: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24352: LD_INT 52
24354: PPUSH
24355: LD_VAR 0 3
24359: PPUSH
24360: LD_INT 1
24362: PPUSH
24363: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24367: LD_INT 6
24369: PPUSH
24370: LD_VAR 0 3
24374: PPUSH
24375: LD_INT 1
24377: PPUSH
24378: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24382: LD_INT 15
24384: PPUSH
24385: LD_VAR 0 3
24389: PPUSH
24390: LD_INT 1
24392: PPUSH
24393: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24397: LD_INT 7
24399: PPUSH
24400: LD_VAR 0 3
24404: PPUSH
24405: LD_INT 1
24407: PPUSH
24408: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24412: LD_INT 12
24414: PPUSH
24415: LD_VAR 0 3
24419: PPUSH
24420: LD_INT 1
24422: PPUSH
24423: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24427: LD_INT 17
24429: PPUSH
24430: LD_VAR 0 3
24434: PPUSH
24435: LD_INT 1
24437: PPUSH
24438: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24442: LD_INT 18
24444: PPUSH
24445: LD_VAR 0 3
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24457: LD_INT 60
24459: PPUSH
24460: LD_VAR 0 3
24464: PPUSH
24465: LD_INT 1
24467: PPUSH
24468: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24472: LD_INT 32
24474: PPUSH
24475: LD_VAR 0 3
24479: PPUSH
24480: LD_INT 1
24482: PPUSH
24483: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24487: LD_INT 9
24489: PPUSH
24490: LD_VAR 0 3
24494: PPUSH
24495: LD_INT 1
24497: PPUSH
24498: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24502: LD_INT 57
24504: PPUSH
24505: LD_VAR 0 3
24509: PPUSH
24510: LD_INT 1
24512: PPUSH
24513: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24517: LD_INT 30
24519: PPUSH
24520: LD_VAR 0 3
24524: PPUSH
24525: LD_INT 1
24527: PPUSH
24528: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24532: LD_INT 37
24534: PPUSH
24535: LD_VAR 0 3
24539: PPUSH
24540: LD_INT 1
24542: PPUSH
24543: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24547: LD_INT 63
24549: PPUSH
24550: LD_VAR 0 3
24554: PPUSH
24555: LD_INT 1
24557: PPUSH
24558: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24562: LD_INT 3
24564: PPUSH
24565: LD_VAR 0 3
24569: PPUSH
24570: LD_INT 1
24572: PPUSH
24573: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24577: LD_INT 4
24579: PPUSH
24580: LD_VAR 0 3
24584: PPUSH
24585: LD_INT 1
24587: PPUSH
24588: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24592: LD_INT 5
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: LD_INT 1
24602: PPUSH
24603: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24607: LD_INT 66
24609: PPUSH
24610: LD_VAR 0 3
24614: PPUSH
24615: LD_INT 1
24617: PPUSH
24618: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24622: LD_INT 21
24624: PPUSH
24625: LD_VAR 0 3
24629: PPUSH
24630: LD_INT 1
24632: PPUSH
24633: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24637: LD_INT 22
24639: PPUSH
24640: LD_VAR 0 3
24644: PPUSH
24645: LD_INT 1
24647: PPUSH
24648: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24652: LD_INT 19
24654: PPUSH
24655: LD_VAR 0 3
24659: PPUSH
24660: LD_INT 1
24662: PPUSH
24663: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24667: LD_INT 54
24669: PPUSH
24670: LD_VAR 0 3
24674: PPUSH
24675: LD_INT 1
24677: PPUSH
24678: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24682: LD_INT 55
24684: PPUSH
24685: LD_VAR 0 3
24689: PPUSH
24690: LD_INT 1
24692: PPUSH
24693: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
24697: LD_INT 0
24699: PPUSH
24700: LD_VAR 0 3
24704: PPUSH
24705: LD_INT 1
24707: PPUSH
24708: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
24712: LD_INT 1
24714: PPUSH
24715: LD_VAR 0 3
24719: PPUSH
24720: LD_INT 1
24722: PPUSH
24723: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24727: LD_INT 2
24729: PPUSH
24730: LD_VAR 0 3
24734: PPUSH
24735: LD_INT 1
24737: PPUSH
24738: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24742: LD_INT 3
24744: PPUSH
24745: LD_VAR 0 3
24749: PPUSH
24750: LD_INT 1
24752: PPUSH
24753: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24757: LD_INT 4
24759: PPUSH
24760: LD_VAR 0 3
24764: PPUSH
24765: LD_INT 1
24767: PPUSH
24768: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24772: LD_INT 5
24774: PPUSH
24775: LD_VAR 0 3
24779: PPUSH
24780: LD_INT 1
24782: PPUSH
24783: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24787: LD_INT 6
24789: PPUSH
24790: LD_VAR 0 3
24794: PPUSH
24795: LD_INT 1
24797: PPUSH
24798: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24802: LD_INT 7
24804: PPUSH
24805: LD_VAR 0 3
24809: PPUSH
24810: LD_INT 1
24812: PPUSH
24813: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24817: LD_INT 8
24819: PPUSH
24820: LD_VAR 0 3
24824: PPUSH
24825: LD_INT 1
24827: PPUSH
24828: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24832: LD_INT 10
24834: PPUSH
24835: LD_VAR 0 3
24839: PPUSH
24840: LD_INT 1
24842: PPUSH
24843: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24847: LD_INT 11
24849: PPUSH
24850: LD_VAR 0 3
24854: PPUSH
24855: LD_INT 1
24857: PPUSH
24858: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24862: LD_INT 12
24864: PPUSH
24865: LD_VAR 0 3
24869: PPUSH
24870: LD_INT 1
24872: PPUSH
24873: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24877: LD_INT 13
24879: PPUSH
24880: LD_VAR 0 3
24884: PPUSH
24885: LD_INT 1
24887: PPUSH
24888: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24892: LD_INT 14
24894: PPUSH
24895: LD_VAR 0 3
24899: PPUSH
24900: LD_INT 1
24902: PPUSH
24903: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24907: LD_INT 15
24909: PPUSH
24910: LD_VAR 0 3
24914: PPUSH
24915: LD_INT 1
24917: PPUSH
24918: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24922: LD_INT 16
24924: PPUSH
24925: LD_VAR 0 3
24929: PPUSH
24930: LD_INT 1
24932: PPUSH
24933: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24937: LD_INT 17
24939: PPUSH
24940: LD_VAR 0 3
24944: PPUSH
24945: LD_INT 1
24947: PPUSH
24948: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24952: LD_INT 18
24954: PPUSH
24955: LD_VAR 0 3
24959: PPUSH
24960: LD_INT 1
24962: PPUSH
24963: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
24967: LD_INT 19
24969: PPUSH
24970: LD_VAR 0 3
24974: PPUSH
24975: LD_INT 1
24977: PPUSH
24978: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
24982: LD_INT 20
24984: PPUSH
24985: LD_VAR 0 3
24989: PPUSH
24990: LD_INT 1
24992: PPUSH
24993: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
24997: LD_INT 21
24999: PPUSH
25000: LD_VAR 0 3
25004: PPUSH
25005: LD_INT 1
25007: PPUSH
25008: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
25012: LD_INT 23
25014: PPUSH
25015: LD_VAR 0 3
25019: PPUSH
25020: LD_INT 1
25022: PPUSH
25023: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
25027: LD_INT 26
25029: PPUSH
25030: LD_VAR 0 3
25034: PPUSH
25035: LD_INT 1
25037: PPUSH
25038: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
25042: LD_INT 27
25044: PPUSH
25045: LD_VAR 0 3
25049: PPUSH
25050: LD_INT 1
25052: PPUSH
25053: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
25057: LD_INT 28
25059: PPUSH
25060: LD_VAR 0 3
25064: PPUSH
25065: LD_INT 1
25067: PPUSH
25068: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
25072: LD_INT 29
25074: PPUSH
25075: LD_VAR 0 3
25079: PPUSH
25080: LD_INT 1
25082: PPUSH
25083: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
25087: LD_INT 30
25089: PPUSH
25090: LD_VAR 0 3
25094: PPUSH
25095: LD_INT 1
25097: PPUSH
25098: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
25102: LD_INT 31
25104: PPUSH
25105: LD_VAR 0 3
25109: PPUSH
25110: LD_INT 1
25112: PPUSH
25113: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
25117: LD_INT 32
25119: PPUSH
25120: LD_VAR 0 3
25124: PPUSH
25125: LD_INT 1
25127: PPUSH
25128: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
25132: LD_INT 33
25134: PPUSH
25135: LD_VAR 0 3
25139: PPUSH
25140: LD_INT 1
25142: PPUSH
25143: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
25147: LD_INT 36
25149: PPUSH
25150: LD_VAR 0 3
25154: PPUSH
25155: LD_INT 1
25157: PPUSH
25158: CALL_OW 324
// end ; 6 :
25162: GO 26172
25164: LD_INT 6
25166: DOUBLE
25167: EQUAL
25168: IFTRUE 25172
25170: GO 26097
25172: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
25173: LD_INT 35
25175: PPUSH
25176: LD_VAR 0 3
25180: PPUSH
25181: LD_INT 1
25183: PPUSH
25184: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
25188: LD_INT 45
25190: PPUSH
25191: LD_VAR 0 3
25195: PPUSH
25196: LD_INT 1
25198: PPUSH
25199: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
25203: LD_INT 46
25205: PPUSH
25206: LD_VAR 0 3
25210: PPUSH
25211: LD_INT 1
25213: PPUSH
25214: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
25218: LD_INT 47
25220: PPUSH
25221: LD_VAR 0 3
25225: PPUSH
25226: LD_INT 1
25228: PPUSH
25229: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
25233: LD_INT 1
25235: PPUSH
25236: LD_VAR 0 3
25240: PPUSH
25241: LD_INT 1
25243: PPUSH
25244: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
25248: LD_INT 2
25250: PPUSH
25251: LD_VAR 0 3
25255: PPUSH
25256: LD_INT 1
25258: PPUSH
25259: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
25263: LD_INT 11
25265: PPUSH
25266: LD_VAR 0 3
25270: PPUSH
25271: LD_INT 1
25273: PPUSH
25274: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
25278: LD_INT 20
25280: PPUSH
25281: LD_VAR 0 3
25285: PPUSH
25286: LD_INT 1
25288: PPUSH
25289: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
25293: LD_INT 48
25295: PPUSH
25296: LD_VAR 0 3
25300: PPUSH
25301: LD_INT 1
25303: PPUSH
25304: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
25308: LD_INT 49
25310: PPUSH
25311: LD_VAR 0 3
25315: PPUSH
25316: LD_INT 1
25318: PPUSH
25319: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
25323: LD_INT 50
25325: PPUSH
25326: LD_VAR 0 3
25330: PPUSH
25331: LD_INT 1
25333: PPUSH
25334: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
25338: LD_INT 69
25340: PPUSH
25341: LD_VAR 0 3
25345: PPUSH
25346: LD_INT 1
25348: PPUSH
25349: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
25353: LD_INT 39
25355: PPUSH
25356: LD_VAR 0 3
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
25368: LD_INT 34
25370: PPUSH
25371: LD_VAR 0 3
25375: PPUSH
25376: LD_INT 1
25378: PPUSH
25379: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
25383: LD_INT 42
25385: PPUSH
25386: LD_VAR 0 3
25390: PPUSH
25391: LD_INT 1
25393: PPUSH
25394: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
25398: LD_INT 44
25400: PPUSH
25401: LD_VAR 0 3
25405: PPUSH
25406: LD_INT 1
25408: PPUSH
25409: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
25413: LD_INT 41
25415: PPUSH
25416: LD_VAR 0 3
25420: PPUSH
25421: LD_INT 1
25423: PPUSH
25424: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
25428: LD_INT 13
25430: PPUSH
25431: LD_VAR 0 3
25435: PPUSH
25436: LD_INT 1
25438: PPUSH
25439: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
25443: LD_INT 40
25445: PPUSH
25446: LD_VAR 0 3
25450: PPUSH
25451: LD_INT 1
25453: PPUSH
25454: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
25458: LD_INT 43
25460: PPUSH
25461: LD_VAR 0 3
25465: PPUSH
25466: LD_INT 1
25468: PPUSH
25469: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
25473: LD_INT 70
25475: PPUSH
25476: LD_VAR 0 3
25480: PPUSH
25481: LD_INT 1
25483: PPUSH
25484: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
25488: LD_INT 23
25490: PPUSH
25491: LD_VAR 0 3
25495: PPUSH
25496: LD_INT 1
25498: PPUSH
25499: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
25503: LD_INT 51
25505: PPUSH
25506: LD_VAR 0 3
25510: PPUSH
25511: LD_INT 1
25513: PPUSH
25514: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
25518: LD_INT 52
25520: PPUSH
25521: LD_VAR 0 3
25525: PPUSH
25526: LD_INT 1
25528: PPUSH
25529: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
25533: LD_INT 6
25535: PPUSH
25536: LD_VAR 0 3
25540: PPUSH
25541: LD_INT 1
25543: PPUSH
25544: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
25548: LD_INT 15
25550: PPUSH
25551: LD_VAR 0 3
25555: PPUSH
25556: LD_INT 1
25558: PPUSH
25559: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
25563: LD_INT 7
25565: PPUSH
25566: LD_VAR 0 3
25570: PPUSH
25571: LD_INT 1
25573: PPUSH
25574: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
25578: LD_INT 12
25580: PPUSH
25581: LD_VAR 0 3
25585: PPUSH
25586: LD_INT 1
25588: PPUSH
25589: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
25593: LD_INT 10
25595: PPUSH
25596: LD_VAR 0 3
25600: PPUSH
25601: LD_INT 1
25603: PPUSH
25604: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
25608: LD_INT 17
25610: PPUSH
25611: LD_VAR 0 3
25615: PPUSH
25616: LD_INT 1
25618: PPUSH
25619: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
25623: LD_INT 18
25625: PPUSH
25626: LD_VAR 0 3
25630: PPUSH
25631: LD_INT 1
25633: PPUSH
25634: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
25638: LD_INT 60
25640: PPUSH
25641: LD_VAR 0 3
25645: PPUSH
25646: LD_INT 1
25648: PPUSH
25649: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
25653: LD_INT 61
25655: PPUSH
25656: LD_VAR 0 3
25660: PPUSH
25661: LD_INT 1
25663: PPUSH
25664: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
25668: LD_INT 32
25670: PPUSH
25671: LD_VAR 0 3
25675: PPUSH
25676: LD_INT 1
25678: PPUSH
25679: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
25683: LD_INT 27
25685: PPUSH
25686: LD_VAR 0 3
25690: PPUSH
25691: LD_INT 1
25693: PPUSH
25694: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
25698: LD_INT 36
25700: PPUSH
25701: LD_VAR 0 3
25705: PPUSH
25706: LD_INT 1
25708: PPUSH
25709: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
25713: LD_INT 33
25715: PPUSH
25716: LD_VAR 0 3
25720: PPUSH
25721: LD_INT 1
25723: PPUSH
25724: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25728: LD_INT 9
25730: PPUSH
25731: LD_VAR 0 3
25735: PPUSH
25736: LD_INT 1
25738: PPUSH
25739: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25743: LD_INT 38
25745: PPUSH
25746: LD_VAR 0 3
25750: PPUSH
25751: LD_INT 1
25753: PPUSH
25754: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25758: LD_INT 57
25760: PPUSH
25761: LD_VAR 0 3
25765: PPUSH
25766: LD_INT 1
25768: PPUSH
25769: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25773: LD_INT 58
25775: PPUSH
25776: LD_VAR 0 3
25780: PPUSH
25781: LD_INT 1
25783: PPUSH
25784: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25788: LD_INT 28
25790: PPUSH
25791: LD_VAR 0 3
25795: PPUSH
25796: LD_INT 1
25798: PPUSH
25799: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25803: LD_INT 29
25805: PPUSH
25806: LD_VAR 0 3
25810: PPUSH
25811: LD_INT 1
25813: PPUSH
25814: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25818: LD_INT 30
25820: PPUSH
25821: LD_VAR 0 3
25825: PPUSH
25826: LD_INT 1
25828: PPUSH
25829: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25833: LD_INT 37
25835: PPUSH
25836: LD_VAR 0 3
25840: PPUSH
25841: LD_INT 1
25843: PPUSH
25844: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25848: LD_INT 63
25850: PPUSH
25851: LD_VAR 0 3
25855: PPUSH
25856: LD_INT 1
25858: PPUSH
25859: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25863: LD_INT 64
25865: PPUSH
25866: LD_VAR 0 3
25870: PPUSH
25871: LD_INT 1
25873: PPUSH
25874: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25878: LD_INT 3
25880: PPUSH
25881: LD_VAR 0 3
25885: PPUSH
25886: LD_INT 1
25888: PPUSH
25889: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25893: LD_INT 4
25895: PPUSH
25896: LD_VAR 0 3
25900: PPUSH
25901: LD_INT 1
25903: PPUSH
25904: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25908: LD_INT 5
25910: PPUSH
25911: LD_VAR 0 3
25915: PPUSH
25916: LD_INT 1
25918: PPUSH
25919: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25923: LD_INT 8
25925: PPUSH
25926: LD_VAR 0 3
25930: PPUSH
25931: LD_INT 1
25933: PPUSH
25934: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25938: LD_INT 66
25940: PPUSH
25941: LD_VAR 0 3
25945: PPUSH
25946: LD_INT 1
25948: PPUSH
25949: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25953: LD_INT 67
25955: PPUSH
25956: LD_VAR 0 3
25960: PPUSH
25961: LD_INT 1
25963: PPUSH
25964: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
25968: LD_INT 21
25970: PPUSH
25971: LD_VAR 0 3
25975: PPUSH
25976: LD_INT 1
25978: PPUSH
25979: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
25983: LD_INT 22
25985: PPUSH
25986: LD_VAR 0 3
25990: PPUSH
25991: LD_INT 1
25993: PPUSH
25994: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
25998: LD_INT 19
26000: PPUSH
26001: LD_VAR 0 3
26005: PPUSH
26006: LD_INT 1
26008: PPUSH
26009: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
26013: LD_INT 26
26015: PPUSH
26016: LD_VAR 0 3
26020: PPUSH
26021: LD_INT 1
26023: PPUSH
26024: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
26028: LD_INT 54
26030: PPUSH
26031: LD_VAR 0 3
26035: PPUSH
26036: LD_INT 1
26038: PPUSH
26039: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
26043: LD_INT 55
26045: PPUSH
26046: LD_VAR 0 3
26050: PPUSH
26051: LD_INT 1
26053: PPUSH
26054: CALL_OW 322
// for i = 0 to 39 do
26058: LD_ADDR_VAR 0 4
26062: PUSH
26063: DOUBLE
26064: LD_INT 0
26066: DEC
26067: ST_TO_ADDR
26068: LD_INT 39
26070: PUSH
26071: FOR_TO
26072: IFFALSE 26093
// SetRestrict ( i , side , true ) ;
26074: LD_VAR 0 4
26078: PPUSH
26079: LD_VAR 0 3
26083: PPUSH
26084: LD_INT 1
26086: PPUSH
26087: CALL_OW 324
26091: GO 26071
26093: POP
26094: POP
// end ; else
26095: GO 26172
26097: POP
// begin for i = 1 to 73 do
26098: LD_ADDR_VAR 0 4
26102: PUSH
26103: DOUBLE
26104: LD_INT 1
26106: DEC
26107: ST_TO_ADDR
26108: LD_INT 73
26110: PUSH
26111: FOR_TO
26112: IFFALSE 26133
// SetTech ( i , side , state_enabled ) ;
26114: LD_VAR 0 4
26118: PPUSH
26119: LD_VAR 0 3
26123: PPUSH
26124: LD_INT 1
26126: PPUSH
26127: CALL_OW 322
26131: GO 26111
26133: POP
26134: POP
// for i = 0 to 39 do
26135: LD_ADDR_VAR 0 4
26139: PUSH
26140: DOUBLE
26141: LD_INT 0
26143: DEC
26144: ST_TO_ADDR
26145: LD_INT 39
26147: PUSH
26148: FOR_TO
26149: IFFALSE 26170
// SetRestrict ( i , side , true ) ;
26151: LD_VAR 0 4
26155: PPUSH
26156: LD_VAR 0 3
26160: PPUSH
26161: LD_INT 1
26163: PPUSH
26164: CALL_OW 324
26168: GO 26148
26170: POP
26171: POP
// end ; end ; end ;
26172: GO 22177
26174: POP
26175: POP
// end ;
26176: LD_VAR 0 2
26180: RET
