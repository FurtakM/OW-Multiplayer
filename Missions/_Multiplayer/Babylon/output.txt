// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 46
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 46
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 356: LD_ADDR_EXP 25
 360: PUSH
 361: LD_EXP 21
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: EMPTY
 370: LIST
 371: DIFF
 372: PUSH
 373: LD_INT 1
 375: GREATER
 376: ST_TO_ADDR
// if Multiplayer then
 377: LD_OWVAR 4
 381: IFFALSE 653
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 383: LD_ADDR_EXP 48
 387: PUSH
 388: LD_INT 0
 390: PPUSH
 391: CALL_OW 426
 395: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 396: LD_ADDR_EXP 49
 400: PUSH
 401: LD_INT 1
 403: PPUSH
 404: CALL_OW 426
 408: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 409: LD_ADDR_EXP 50
 413: PUSH
 414: LD_INT 2
 416: PPUSH
 417: CALL_OW 426
 421: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 422: LD_ADDR_EXP 51
 426: PUSH
 427: LD_INT 3
 429: PPUSH
 430: CALL_OW 426
 434: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 435: LD_ADDR_EXP 52
 439: PUSH
 440: LD_INT 4
 442: PPUSH
 443: CALL_OW 426
 447: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 448: LD_ADDR_EXP 53
 452: PUSH
 453: LD_INT 5
 455: PPUSH
 456: CALL_OW 426
 460: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 461: LD_ADDR_EXP 55
 465: PUSH
 466: LD_INT 10
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 474: LD_ADDR_EXP 56
 478: PUSH
 479: LD_INT 11
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 487: LD_ADDR_EXP 57
 491: PUSH
 492: LD_INT 12
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 500: LD_ADDR_EXP 59
 504: PUSH
 505: LD_INT 13
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 513: LD_ADDR_EXP 58
 517: PUSH
 518: LD_INT 14
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 526: LD_ADDR_EXP 60
 530: PUSH
 531: LD_INT 15
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 539: LD_ADDR_EXP 1
 543: PUSH
 544: LD_INT 6
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 552: LD_ADDR_EXP 2
 556: PUSH
 557: LD_INT 7
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 565: LD_ADDR_EXP 4
 569: PUSH
 570: LD_INT 8
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 578: LD_ADDR_EXP 3
 582: PUSH
 583: LD_INT 9
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 591: LD_ADDR_EXP 5
 595: PUSH
 596: LD_INT 16
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 604: LD_ADDR_EXP 6
 608: PUSH
 609: LD_INT 17
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 617: LD_ADDR_EXP 61
 621: PUSH
 622: LD_INT 20
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 630: LD_ADDR_VAR 0 3
 634: PUSH
 635: LD_INT 22
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_win_rules = 0 ;
 643: LD_ADDR_EXP 19
 647: PUSH
 648: LD_INT 0
 650: ST_TO_ADDR
// end else
 651: GO 825
// begin Randomize ;
 653: CALL_OW 10
// def_base_level := 2 ;
 657: LD_ADDR_EXP 48
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_amount_of_people := 10 ;
 665: LD_ADDR_EXP 49
 669: PUSH
 670: LD_INT 10
 672: ST_TO_ADDR
// def_skill_level := 1 ;
 673: LD_ADDR_EXP 50
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_starting_resources := 2 ;
 681: LD_ADDR_EXP 51
 685: PUSH
 686: LD_INT 2
 688: ST_TO_ADDR
// def_shipments_density := 50 ;
 689: LD_ADDR_EXP 52
 693: PUSH
 694: LD_INT 50
 696: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 697: LD_ADDR_EXP 53
 701: PUSH
 702: LD_INT 0
 704: ST_TO_ADDR
// def_shared_vision := 1 ;
 705: LD_ADDR_EXP 55
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_morale_flags := 1 ;
 713: LD_ADDR_EXP 56
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// def_siberite_detection := 1 ;
 721: LD_ADDR_EXP 57
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 729: LD_ADDR_EXP 59
 733: PUSH
 734: LD_INT 3
 736: ST_TO_ADDR
// def_people_respawning := 2 ;
 737: LD_ADDR_EXP 58
 741: PUSH
 742: LD_INT 2
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 60
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_artefact_one := 1 ;
 753: LD_ADDR_EXP 1
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_artefact_two := 1 ;
 761: LD_ADDR_EXP 2
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 769: LD_ADDR_EXP 4
 773: PUSH
 774: LD_INT 2
 776: ST_TO_ADDR
// def_artefact_three := 1 ;
 777: LD_ADDR_EXP 3
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// def_kings_age := 1 ;
 785: LD_ADDR_EXP 5
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_public_score := 0 ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 0
 800: ST_TO_ADDR
// def_builduptime := 1 ;
 801: LD_ADDR_EXP 61
 805: PUSH
 806: LD_INT 1
 808: ST_TO_ADDR
// tech_level = 4 ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// def_win_rules = 0 ;
 817: LD_ADDR_EXP 19
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// end ; InitGameRules ;
 825: CALL 12940 0 0
// if def_game_rules = 0 then
 829: LD_EXP 47
 833: PUSH
 834: LD_INT 0
 836: EQUAL
 837: IFFALSE 864
// begin if isSGUI then
 839: LD_OWVAR 83
 843: IFFALSE 851
// setMpTechs ( ) else
 845: CALL 21289 0 0
 849: GO 864
// begin SetMpTechLevel ( tech_level + 1 ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: PPUSH
 860: CALL 21436 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 864: LD_ADDR_EXP 7
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: LD_INT 1
 874: PUSH
 875: LD_INT 1
 877: PUSH
 878: LD_INT 1
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: PUSH
 887: LD_EXP 48
 891: PUSH
 892: LD_INT 1
 894: PLUS
 895: ARRAY
 896: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 897: LD_ADDR_EXP 8
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: LD_INT 2
 910: PUSH
 911: LD_INT 3
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_EXP 48
 924: PUSH
 925: LD_INT 1
 927: PLUS
 928: ARRAY
 929: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 930: LD_ADDR_EXP 9
 934: PUSH
 935: LD_EXP 49
 939: PUSH
 940: LD_INT 4
 942: PLUS
 943: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 944: LD_ADDR_EXP 10
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: LD_INT 3
 954: PUSH
 955: LD_INT 4
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: PUSH
 967: LD_EXP 50
 971: PUSH
 972: LD_INT 1
 974: PLUS
 975: ARRAY
 976: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 977: LD_ADDR_EXP 12
 981: PUSH
 982: LD_INT 0
 984: PUSH
 985: LD_INT 0
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 0
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 50
1012: PUSH
1013: LD_INT 20
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 40
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_EXP 51
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1054: LD_ADDR_EXP 11
1058: PUSH
1059: LD_INT 10
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: LD_INT 7
1067: PUSH
1068: LD_INT 14
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 6
1077: PUSH
1078: LD_INT 12
1080: PUSH
1081: LD_INT 18
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 5
1091: PUSH
1092: LD_INT 10
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_EXP 51
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: ARRAY
1122: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1123: LD_ADDR_EXP 13
1127: PUSH
1128: LD_INT 150
1130: PUSH
1131: LD_EXP 52
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: MINUS
1140: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1141: LD_ADDR_EXP 15
1145: PUSH
1146: LD_INT 0
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 2
1154: PUSH
1155: LD_INT 3
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 59
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1174: LD_ADDR_EXP 16
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 12600
1184: PUSH
1185: LD_INT 2100
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 58
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1203: LD_ADDR_EXP 17
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 21000
1213: PUSH
1214: LD_INT 4200
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_EXP 58
1226: PUSH
1227: LD_INT 1
1229: PLUS
1230: ARRAY
1231: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1232: LD_ADDR_EXP 14
1236: PUSH
1237: LD_INT 1
1239: NEG
1240: PUSH
1241: LD_INT 350
1243: PUSH
1244: LD_INT 700
1246: PUSH
1247: LD_INT 1400
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 56
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// battle_flags_id := [ ] ;
1270: LD_ADDR_EXP 33
1274: PUSH
1275: EMPTY
1276: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1277: LD_ADDR_EXP 18
1281: PUSH
1282: LD_INT 0
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 63000
1290: PUSH
1291: LD_INT 126000
1293: PUSH
1294: LD_INT 189000
1296: PUSH
1297: LD_INT 252000
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: PUSH
1308: LD_EXP 60
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1318: LD_ADDR_EXP 20
1322: PUSH
1323: LD_INT 500
1325: PUSH
1326: LD_INT 1000
1328: PUSH
1329: LD_INT 1500
1331: PUSH
1332: LD_INT 2000
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 5
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1351: LD_EXP 60
1355: PUSH
1356: LD_INT 0
1358: EQUAL
1359: IFFALSE 1371
// siberite_bomb_Delay = 0 else
1361: LD_ADDR_EXP 18
1365: PUSH
1366: LD_INT 0
1368: ST_TO_ADDR
1369: GO 1393
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1371: LD_ADDR_EXP 18
1375: PUSH
1376: LD_EXP 60
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: LD_INT 21000
1387: MUL
1388: PUSH
1389: LD_INT 1
1391: PLUS
1392: ST_TO_ADDR
// end ;
1393: LD_VAR 0 1
1397: RET
// function init_map ; var i ; begin
1398: LD_INT 0
1400: PPUSH
1401: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1402: LD_ADDR_EXP 32
1406: PUSH
1407: LD_INT 43
1409: PUSH
1410: LD_INT 9
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 123
1419: PUSH
1420: LD_INT 10
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 113
1429: PUSH
1430: LD_INT 155
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PUSH
1437: LD_INT 186
1439: PUSH
1440: LD_INT 133
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1453: LD_ADDR_EXP 29
1457: PUSH
1458: LD_INT 18
1460: PUSH
1461: LD_INT 17
1463: PUSH
1464: LD_INT 2
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 156
1474: PUSH
1475: LD_INT 20
1477: PUSH
1478: LD_INT 3
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 83
1488: PUSH
1489: LD_INT 140
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 216
1502: PUSH
1503: LD_INT 143
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// for i in depot_def do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: LD_EXP 29
1529: PUSH
1530: FOR_IN
1531: IFFALSE 1605
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1533: LD_ADDR_EXP 31
1537: PUSH
1538: LD_EXP 31
1542: PUSH
1543: LD_VAR 0 2
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 2
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 6
1563: PPUSH
1564: CALL_OW 272
1568: PUSH
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 2
1576: ARRAY
1577: PPUSH
1578: LD_VAR 0 2
1582: PUSH
1583: LD_INT 3
1585: ARRAY
1586: PPUSH
1587: LD_INT 6
1589: PPUSH
1590: CALL_OW 273
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: ADD
1602: ST_TO_ADDR
1603: GO 1530
1605: POP
1606: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1607: LD_ADDR_EXP 30
1611: PUSH
1612: LD_INT 30
1614: PUSH
1615: LD_INT 36
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 44
1628: PUSH
1629: LD_INT 21
1631: PUSH
1632: LD_INT 4
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 43
1642: PUSH
1643: LD_INT 33
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 165
1661: PUSH
1662: LD_INT 34
1664: PUSH
1665: LD_INT 0
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 137
1675: PUSH
1676: LD_INT 18
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 153
1689: PUSH
1690: LD_INT 37
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 86
1708: PUSH
1709: LD_INT 120
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 105
1722: PUSH
1723: LD_INT 147
1725: PUSH
1726: LD_INT 4
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 68
1736: PUSH
1737: LD_INT 118
1739: PUSH
1740: LD_INT 2
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 199
1755: PUSH
1756: LD_INT 144
1758: PUSH
1759: LD_INT 1
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 207
1769: PUSH
1770: LD_INT 119
1772: PUSH
1773: LD_INT 3
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 195
1783: PUSH
1784: LD_INT 118
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: ST_TO_ADDR
// if not def_extra_oil_deposits then
1806: LD_EXP 53
1810: NOT
1811: IFFALSE 1852
// for i in extra_oil_deposits_locations do
1813: LD_ADDR_VAR 0 2
1817: PUSH
1818: LD_EXP 32
1822: PUSH
1823: FOR_IN
1824: IFFALSE 1850
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1826: LD_VAR 0 2
1830: PUSH
1831: LD_INT 1
1833: ARRAY
1834: PPUSH
1835: LD_VAR 0 2
1839: PUSH
1840: LD_INT 2
1842: ARRAY
1843: PPUSH
1844: CALL_OW 63
1848: GO 1823
1850: POP
1851: POP
// end ;
1852: LD_VAR 0 1
1856: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1857: LD_INT 0
1859: PPUSH
1860: PPUSH
1861: PPUSH
// if not Team_Game then
1862: LD_EXP 25
1866: NOT
1867: IFFALSE 1965
// begin for i = 1 to 8 do
1869: LD_ADDR_VAR 0 2
1873: PUSH
1874: DOUBLE
1875: LD_INT 1
1877: DEC
1878: ST_TO_ADDR
1879: LD_INT 8
1881: PUSH
1882: FOR_TO
1883: IFFALSE 1961
// for j = 1 to 8 do
1885: LD_ADDR_VAR 0 3
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 8
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1957
// if i <> j then
1901: LD_VAR 0 2
1905: PUSH
1906: LD_VAR 0 3
1910: NONEQUAL
1911: IFFALSE 1935
// SetAttitude ( i , j , att_neutral , true ) else
1913: LD_VAR 0 2
1917: PPUSH
1918: LD_VAR 0 3
1922: PPUSH
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 80
1933: GO 1955
// SetAttitude ( i , j , att_friend , true ) ;
1935: LD_VAR 0 2
1939: PPUSH
1940: LD_VAR 0 3
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: CALL_OW 80
1955: GO 1898
1957: POP
1958: POP
1959: GO 1882
1961: POP
1962: POP
// end else
1963: GO 2140
// begin if def_shared_vision then
1965: LD_EXP 55
1969: IFFALSE 2034
// begin for i in Teams do
1971: LD_ADDR_VAR 0 2
1975: PUSH
1976: LD_EXP 22
1980: PUSH
1981: FOR_IN
1982: IFFALSE 2032
// for j = 2 to i do
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: DOUBLE
1990: LD_INT 2
1992: DEC
1993: ST_TO_ADDR
1994: LD_VAR 0 2
1998: PUSH
1999: FOR_TO
2000: IFFALSE 2028
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2002: LD_VAR 0 2
2006: PUSH
2007: LD_VAR 0 3
2011: ARRAY
2012: PPUSH
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: CALL_OW 343
2026: GO 1999
2028: POP
2029: POP
2030: GO 1981
2032: POP
2033: POP
// end ; for i = 1 to 8 do
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: DOUBLE
2040: LD_INT 1
2042: DEC
2043: ST_TO_ADDR
2044: LD_INT 8
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2138
// for j = 1 to 8 do
2050: LD_ADDR_VAR 0 3
2054: PUSH
2055: DOUBLE
2056: LD_INT 1
2058: DEC
2059: ST_TO_ADDR
2060: LD_INT 8
2062: PUSH
2063: FOR_TO
2064: IFFALSE 2134
// if Side_Teams [ i ] = Side_Teams [ j ] then
2066: LD_EXP 21
2070: PUSH
2071: LD_VAR 0 2
2075: ARRAY
2076: PUSH
2077: LD_EXP 21
2081: PUSH
2082: LD_VAR 0 3
2086: ARRAY
2087: EQUAL
2088: IFFALSE 2112
// SetAttitude ( i , j , att_friend , true ) else
2090: LD_VAR 0 2
2094: PPUSH
2095: LD_VAR 0 3
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL_OW 80
2110: GO 2132
// SetAttitude ( i , j , att_enemy , true ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: LD_VAR 0 3
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: CALL_OW 80
2132: GO 2063
2134: POP
2135: POP
2136: GO 2047
2138: POP
2139: POP
// end ; end ;
2140: LD_VAR 0 1
2144: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
// result := [ ] ;
2151: LD_ADDR_VAR 0 7
2155: PUSH
2156: EMPTY
2157: ST_TO_ADDR
// for i := 1 to count do
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_VAR 0 1
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2592
// begin uc_direction := Rand ( 0 , 5 ) ;
2176: LD_ADDR_OWVAR 24
2180: PUSH
2181: LD_INT 0
2183: PPUSH
2184: LD_INT 5
2186: PPUSH
2187: CALL_OW 12
2191: ST_TO_ADDR
// if commander then
2192: LD_LOC 1
2196: IFFALSE 2305
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2198: LD_ADDR_OWVAR 26
2202: PUSH
2203: LD_OWVAR 19
2207: PUSH
2208: LD_OWVAR 20
2212: ARRAY
2213: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2214: LD_INT 1
2216: PPUSH
2217: LD_INT 2
2219: PPUSH
2220: CALL_OW 12
2224: PPUSH
2225: LD_VAR 0 2
2229: PPUSH
2230: LD_EXP 10
2234: PUSH
2235: LD_INT 2
2237: PLUS
2238: PPUSH
2239: CALL_OW 380
// hc_importance := 105 ;
2243: LD_ADDR_OWVAR 32
2247: PUSH
2248: LD_INT 105
2250: ST_TO_ADDR
// commander := false ;
2251: LD_ADDR_LOC 1
2255: PUSH
2256: LD_INT 0
2258: ST_TO_ADDR
// if Multiplayer then
2259: LD_OWVAR 4
2263: IFFALSE 2303
// begin hc_gallery := MULTIAVATARS ;
2265: LD_ADDR_OWVAR 33
2269: PUSH
2270: LD_STRING MULTIAVATARS
2272: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2273: LD_ADDR_OWVAR 34
2277: PUSH
2278: LD_OWVAR 20
2282: PPUSH
2283: CALL_OW 525
2287: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2288: LD_ADDR_OWVAR 27
2292: PUSH
2293: LD_OWVAR 20
2297: PPUSH
2298: CALL_OW 526
2302: ST_TO_ADDR
// end ; end else
2303: GO 2368
// begin hc_name :=  ;
2305: LD_ADDR_OWVAR 26
2309: PUSH
2310: LD_STRING 
2312: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2313: LD_INT 1
2315: PPUSH
2316: LD_INT 2
2318: PPUSH
2319: CALL_OW 12
2323: PPUSH
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_EXP 10
2333: PPUSH
2334: CALL_OW 380
// hc_importance := 0 ;
2338: LD_ADDR_OWVAR 32
2342: PUSH
2343: LD_INT 0
2345: ST_TO_ADDR
// if Multiplayer then
2346: LD_OWVAR 4
2350: IFFALSE 2368
// begin hc_gallery :=  ;
2352: LD_ADDR_OWVAR 33
2356: PUSH
2357: LD_STRING 
2359: ST_TO_ADDR
// hc_face_number := 0 ;
2360: LD_ADDR_OWVAR 34
2364: PUSH
2365: LD_INT 0
2367: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2368: LD_ADDR_VAR 0 10
2372: PUSH
2373: CALL_OW 44
2377: ST_TO_ADDR
// if global_defined then
2378: LD_LOC 3
2382: IFFALSE 2522
// begin if ( cl = class_soldier ) then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: EQUAL
2392: IFFALSE 2412
// j := i + soldiers_created else
2394: LD_ADDR_VAR 0 9
2398: PUSH
2399: LD_VAR 0 8
2403: PUSH
2404: LD_LOC 4
2408: PLUS
2409: ST_TO_ADDR
2410: GO 2422
// j := i ;
2412: LD_ADDR_VAR 0 9
2416: PUSH
2417: LD_VAR 0 8
2421: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2422: LD_LOC 2
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: PUSH
2433: LD_VAR 0 9
2437: ARRAY
2438: PPUSH
2439: LD_VAR 0 10
2443: PPUSH
2444: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2448: LD_VAR 0 10
2452: PPUSH
2453: LD_INT 2
2455: PPUSH
2456: LD_LOC 2
2460: PUSH
2461: LD_VAR 0 2
2465: ARRAY
2466: PUSH
2467: LD_VAR 0 9
2471: ARRAY
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: CALL_OW 260
2480: PPUSH
2481: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2485: LD_VAR 0 10
2489: PPUSH
2490: LD_INT 1
2492: PPUSH
2493: LD_LOC 2
2497: PUSH
2498: LD_VAR 0 2
2502: ARRAY
2503: PUSH
2504: LD_VAR 0 9
2508: ARRAY
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 260
2517: PPUSH
2518: CALL_OW 239
// end ; if building then
2522: LD_VAR 0 6
2526: IFFALSE 2544
// PlaceHumanInUnit ( un , building ) else
2528: LD_VAR 0 10
2532: PPUSH
2533: LD_VAR 0 6
2537: PPUSH
2538: CALL_OW 52
2542: GO 2571
// PlaceUnitXYR ( un , x , y , r , false ) ;
2544: LD_VAR 0 10
2548: PPUSH
2549: LD_VAR 0 3
2553: PPUSH
2554: LD_VAR 0 4
2558: PPUSH
2559: LD_VAR 0 5
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: CALL_OW 50
// result := result ^ [ un ] ;
2571: LD_ADDR_VAR 0 7
2575: PUSH
2576: LD_VAR 0 7
2580: PUSH
2581: LD_VAR 0 10
2585: PUSH
2586: EMPTY
2587: LIST
2588: ADD
2589: ST_TO_ADDR
// end ;
2590: GO 2173
2592: POP
2593: POP
// if not global_defined then
2594: LD_LOC 3
2598: NOT
2599: IFFALSE 2677
// if ( global_units >= cl ) then
2601: LD_LOC 2
2605: PUSH
2606: LD_VAR 0 2
2610: GREATEREQUAL
2611: IFFALSE 2652
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2613: LD_ADDR_LOC 2
2617: PUSH
2618: LD_LOC 2
2622: PPUSH
2623: LD_VAR 0 2
2627: PPUSH
2628: LD_LOC 2
2632: PUSH
2633: LD_VAR 0 2
2637: ARRAY
2638: PUSH
2639: LD_VAR 0 7
2643: ADD
2644: PPUSH
2645: CALL_OW 1
2649: ST_TO_ADDR
2650: GO 2677
// global_units := Replace ( global_units , cl , result ) ;
2652: LD_ADDR_LOC 2
2656: PUSH
2657: LD_LOC 2
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_VAR 0 7
2671: PPUSH
2672: CALL_OW 1
2676: ST_TO_ADDR
// if commander then
2677: LD_LOC 1
2681: IFFALSE 2728
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2683: LD_ADDR_EXP 34
2687: PUSH
2688: LD_EXP 34
2692: PPUSH
2693: LD_OWVAR 20
2697: PPUSH
2698: LD_EXP 34
2702: PUSH
2703: LD_OWVAR 20
2707: ARRAY
2708: PUSH
2709: LD_VAR 0 10
2713: ADD
2714: PPUSH
2715: CALL_OW 1
2719: ST_TO_ADDR
// commander := false ;
2720: LD_ADDR_LOC 1
2724: PUSH
2725: LD_INT 0
2727: ST_TO_ADDR
// end ; end ;
2728: LD_VAR 0 7
2732: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
// if side in [ 0 , 9 ] then
2744: LD_VAR 0 1
2748: PUSH
2749: LD_INT 0
2751: PUSH
2752: LD_INT 9
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: IN
2759: IFFALSE 2763
// exit ;
2761: GO 3838
// pos := Side_Positions [ side ] ;
2763: LD_ADDR_VAR 0 3
2767: PUSH
2768: LD_EXP 23
2772: PUSH
2773: LD_VAR 0 1
2777: ARRAY
2778: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2779: LD_ADDR_OWVAR 21
2783: PUSH
2784: LD_EXP 24
2788: PUSH
2789: LD_VAR 0 1
2793: ARRAY
2794: ST_TO_ADDR
// uc_side := side ;
2795: LD_ADDR_OWVAR 20
2799: PUSH
2800: LD_VAR 0 1
2804: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2805: LD_ADDR_VAR 0 4
2809: PUSH
2810: LD_EXP 29
2814: PUSH
2815: LD_VAR 0 3
2819: ARRAY
2820: PUSH
2821: LD_INT 1
2823: ARRAY
2824: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_EXP 29
2834: PUSH
2835: LD_VAR 0 3
2839: ARRAY
2840: PUSH
2841: LD_INT 2
2843: ARRAY
2844: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2845: LD_ADDR_VAR 0 6
2849: PUSH
2850: LD_EXP 29
2854: PUSH
2855: LD_VAR 0 3
2859: ARRAY
2860: PUSH
2861: LD_INT 3
2863: ARRAY
2864: ST_TO_ADDR
// if is_depot then
2865: LD_EXP 7
2869: IFFALSE 3002
// begin bc_type = b_depot ;
2871: LD_ADDR_OWVAR 42
2875: PUSH
2876: LD_INT 0
2878: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2879: LD_ADDR_VAR 0 10
2883: PUSH
2884: LD_VAR 0 4
2888: PPUSH
2889: LD_VAR 0 5
2893: PPUSH
2894: LD_VAR 0 6
2898: PPUSH
2899: CALL_OW 47
2903: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2904: LD_VAR 0 10
2908: PPUSH
2909: LD_STRING @
2911: PUSH
2912: LD_VAR 0 1
2916: STR
2917: PPUSH
2918: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2922: LD_VAR 0 10
2926: PPUSH
2927: CALL_OW 274
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: LD_EXP 12
2939: PUSH
2940: LD_INT 1
2942: ARRAY
2943: PPUSH
2944: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2948: LD_VAR 0 10
2952: PPUSH
2953: CALL_OW 274
2957: PPUSH
2958: LD_INT 2
2960: PPUSH
2961: LD_EXP 12
2965: PUSH
2966: LD_INT 2
2968: ARRAY
2969: PPUSH
2970: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2974: LD_VAR 0 10
2978: PPUSH
2979: CALL_OW 274
2983: PPUSH
2984: LD_INT 3
2986: PPUSH
2987: LD_EXP 12
2991: PUSH
2992: LD_INT 3
2994: ARRAY
2995: PPUSH
2996: CALL_OW 277
// end else
3000: GO 3146
// begin for i := 1 to 3 do
3002: LD_ADDR_VAR 0 7
3006: PUSH
3007: DOUBLE
3008: LD_INT 1
3010: DEC
3011: ST_TO_ADDR
3012: LD_INT 3
3014: PUSH
3015: FOR_TO
3016: IFFALSE 3144
// begin r := starting_resources [ i ] ;
3018: LD_ADDR_VAR 0 8
3022: PUSH
3023: LD_EXP 12
3027: PUSH
3028: LD_VAR 0 7
3032: ARRAY
3033: ST_TO_ADDR
// while r >= 10 do
3034: LD_VAR 0 8
3038: PUSH
3039: LD_INT 10
3041: GREATEREQUAL
3042: IFFALSE 3142
// if r > 50 then
3044: LD_VAR 0 8
3048: PUSH
3049: LD_INT 50
3051: GREATER
3052: IFFALSE 3098
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3054: LD_VAR 0 7
3058: PPUSH
3059: LD_INT 5
3061: PPUSH
3062: LD_VAR 0 4
3066: PPUSH
3067: LD_VAR 0 5
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 60
// r := r - 50 ;
3082: LD_ADDR_VAR 0 8
3086: PUSH
3087: LD_VAR 0 8
3091: PUSH
3092: LD_INT 50
3094: MINUS
3095: ST_TO_ADDR
// end else
3096: GO 3140
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3098: LD_VAR 0 7
3102: PPUSH
3103: LD_VAR 0 8
3107: PUSH
3108: LD_INT 10
3110: DIV
3111: PPUSH
3112: LD_VAR 0 4
3116: PPUSH
3117: LD_VAR 0 5
3121: PPUSH
3122: LD_INT 4
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL_OW 60
// r := 0 ;
3132: LD_ADDR_VAR 0 8
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// end ;
3140: GO 3034
// end ;
3142: GO 3015
3144: POP
3145: POP
// end ; for r in starting_crates do
3146: LD_ADDR_VAR 0 8
3150: PUSH
3151: LD_EXP 11
3155: PUSH
3156: FOR_IN
3157: IFFALSE 3189
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3159: LD_INT 1
3161: PPUSH
3162: LD_INT 5
3164: PPUSH
3165: LD_VAR 0 4
3169: PPUSH
3170: LD_VAR 0 5
3174: PPUSH
3175: LD_VAR 0 8
3179: PPUSH
3180: LD_INT 0
3182: PPUSH
3183: CALL_OW 60
3187: GO 3156
3189: POP
3190: POP
// if def_morale_flags then
3191: LD_EXP 56
3195: IFFALSE 3334
// begin x := start_def [ pos ] [ 1 ] ;
3197: LD_ADDR_VAR 0 4
3201: PUSH
3202: LD_EXP 31
3206: PUSH
3207: LD_VAR 0 3
3211: ARRAY
3212: PUSH
3213: LD_INT 1
3215: ARRAY
3216: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3217: LD_ADDR_VAR 0 5
3221: PUSH
3222: LD_EXP 31
3226: PUSH
3227: LD_VAR 0 3
3231: ARRAY
3232: PUSH
3233: LD_INT 2
3235: ARRAY
3236: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3237: LD_VAR 0 4
3241: PPUSH
3242: LD_VAR 0 5
3246: PPUSH
3247: LD_INT 12
3249: PPUSH
3250: LD_INT 2
3252: PPUSH
3253: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3257: LD_ADDR_EXP 33
3261: PUSH
3262: LD_EXP 33
3266: PUSH
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_VAR 0 4
3276: PPUSH
3277: LD_VAR 0 5
3281: PPUSH
3282: LD_INT 1
3284: PUSH
3285: LD_INT 100
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 2
3294: PUSH
3295: LD_INT 50
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: LD_INT 20
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 20
3314: PUSH
3315: LD_INT 100
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 418
3332: ADD
3333: ST_TO_ADDR
// end ; commander := true ;
3334: LD_ADDR_LOC 1
3338: PUSH
3339: LD_INT 1
3341: ST_TO_ADDR
// soldiers_created := 0 ;
3342: LD_ADDR_LOC 4
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3350: LD_ADDR_VAR 0 7
3354: PUSH
3355: DOUBLE
3356: LD_INT 1
3358: DEC
3359: ST_TO_ADDR
3360: LD_EXP 8
3364: PUSH
3365: FOR_TO
3366: IFFALSE 3519
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3368: LD_ADDR_VAR 0 4
3372: PUSH
3373: LD_EXP 30
3377: PUSH
3378: LD_VAR 0 3
3382: ARRAY
3383: PUSH
3384: LD_VAR 0 7
3388: ARRAY
3389: PUSH
3390: LD_INT 1
3392: ARRAY
3393: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3394: LD_ADDR_VAR 0 5
3398: PUSH
3399: LD_EXP 30
3403: PUSH
3404: LD_VAR 0 3
3408: ARRAY
3409: PUSH
3410: LD_VAR 0 7
3414: ARRAY
3415: PUSH
3416: LD_INT 2
3418: ARRAY
3419: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3420: LD_ADDR_VAR 0 6
3424: PUSH
3425: LD_EXP 30
3429: PUSH
3430: LD_VAR 0 3
3434: ARRAY
3435: PUSH
3436: LD_VAR 0 7
3440: ARRAY
3441: PUSH
3442: LD_INT 3
3444: ARRAY
3445: ST_TO_ADDR
// bc_type := b_breastwork ;
3446: LD_ADDR_OWVAR 42
3450: PUSH
3451: LD_INT 31
3453: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3454: LD_ADDR_VAR 0 9
3458: PUSH
3459: LD_VAR 0 4
3463: PPUSH
3464: LD_VAR 0 5
3468: PPUSH
3469: LD_VAR 0 6
3473: PPUSH
3474: CALL_OW 47
3478: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3479: LD_INT 1
3481: PPUSH
3482: LD_INT 1
3484: PPUSH
3485: LD_INT 0
3487: PPUSH
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 0
3493: PPUSH
3494: LD_VAR 0 9
3498: PPUSH
3499: CALL 2145 0 6
// soldiers_created := soldiers_created + 1 ;
3503: LD_ADDR_LOC 4
3507: PUSH
3508: LD_LOC 4
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: ST_TO_ADDR
// end ;
3517: GO 3365
3519: POP
3520: POP
// x := start_def [ pos ] [ 1 ] ;
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_EXP 31
3530: PUSH
3531: LD_VAR 0 3
3535: ARRAY
3536: PUSH
3537: LD_INT 1
3539: ARRAY
3540: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3541: LD_ADDR_VAR 0 5
3545: PUSH
3546: LD_EXP 31
3550: PUSH
3551: LD_VAR 0 3
3555: ARRAY
3556: PUSH
3557: LD_INT 2
3559: ARRAY
3560: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3561: LD_LOC 8
3565: PUSH
3566: LD_EXP 8
3570: MINUS
3571: PPUSH
3572: LD_INT 1
3574: PPUSH
3575: LD_VAR 0 4
3579: PPUSH
3580: LD_VAR 0 5
3584: PPUSH
3585: LD_INT 5
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: CALL 2145 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3595: LD_LOC 5
3599: PPUSH
3600: LD_INT 2
3602: PPUSH
3603: LD_VAR 0 4
3607: PPUSH
3608: LD_VAR 0 5
3612: PPUSH
3613: LD_INT 5
3615: PPUSH
3616: LD_INT 0
3618: PPUSH
3619: CALL 2145 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3623: LD_LOC 7
3627: PPUSH
3628: LD_INT 3
3630: PPUSH
3631: LD_VAR 0 4
3635: PPUSH
3636: LD_VAR 0 5
3640: PPUSH
3641: LD_INT 5
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL 2145 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3651: LD_LOC 6
3655: PPUSH
3656: LD_INT 4
3658: PPUSH
3659: LD_VAR 0 4
3663: PPUSH
3664: LD_VAR 0 5
3668: PPUSH
3669: LD_INT 5
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: CALL 2145 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3679: LD_EXP 57
3683: PUSH
3684: LD_INT 20
3686: PPUSH
3687: LD_VAR 0 1
3691: PPUSH
3692: CALL_OW 321
3696: PUSH
3697: LD_INT 1
3699: EQUAL
3700: AND
3701: IFFALSE 3718
// SetTech ( tech_SibDet , side , state_researched ) ;
3703: LD_INT 20
3705: PPUSH
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_INT 2
3713: PPUSH
3714: CALL_OW 322
// if def_siberite_bomb = 1 then
3718: LD_EXP 60
3722: PUSH
3723: LD_INT 1
3725: EQUAL
3726: IFFALSE 3760
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3728: LD_INT 25
3730: PPUSH
3731: LD_VAR 0 1
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3743: LD_INT 73
3745: PPUSH
3746: LD_VAR 0 1
3750: PPUSH
3751: LD_INT 1
3753: PPUSH
3754: CALL_OW 322
// end else
3758: GO 3790
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3760: LD_INT 25
3762: PPUSH
3763: LD_VAR 0 1
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3775: LD_INT 73
3777: PPUSH
3778: LD_VAR 0 1
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 322
// end ; if Game_Type = 3 then
3790: LD_EXP 46
3794: PUSH
3795: LD_INT 3
3797: EQUAL
3798: IFFALSE 3815
// SetTech ( tech_partinvis , side , state_disabled ) ;
3800: LD_INT 16
3802: PPUSH
3803: LD_VAR 0 1
3807: PPUSH
3808: LD_INT 0
3810: PPUSH
3811: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3815: LD_INT 24
3817: PPUSH
3818: LD_VAR 0 1
3822: PPUSH
3823: LD_INT 1
3825: PPUSH
3826: CALL_OW 322
// global_defined := true ;
3830: LD_ADDR_LOC 3
3834: PUSH
3835: LD_INT 1
3837: ST_TO_ADDR
// end ;
3838: LD_VAR 0 2
3842: RET
// every 0 0$1 do
3843: GO 3845
3845: DISABLE
// if ( def_siberite_bomb > 1 ) then
3846: LD_EXP 60
3850: PUSH
3851: LD_INT 1
3853: GREATER
3854: IFFALSE 3869
// begin wait ( siberite_bomb_Delay ) ;
3856: LD_EXP 18
3860: PPUSH
3861: CALL_OW 67
// EnableSibFiss ;
3865: CALL 3870 0 0
// end ;
3869: END
// function EnableSibFiss ; var i ; begin
3870: LD_INT 0
3872: PPUSH
3873: PPUSH
// for i := 1 to 8 do
3874: LD_ADDR_VAR 0 2
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_INT 8
3886: PUSH
3887: FOR_TO
3888: IFFALSE 3934
// if Side_Positions [ i ] then
3890: LD_EXP 23
3894: PUSH
3895: LD_VAR 0 2
3899: ARRAY
3900: IFFALSE 3932
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3902: LD_INT 25
3904: PPUSH
3905: LD_VAR 0 2
3909: PPUSH
3910: LD_INT 1
3912: PPUSH
3913: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3917: LD_INT 73
3919: PPUSH
3920: LD_VAR 0 2
3924: PPUSH
3925: LD_INT 1
3927: PPUSH
3928: CALL_OW 322
// end ;
3932: GO 3887
3934: POP
3935: POP
// end ;
3936: LD_VAR 0 1
3940: RET
// function prepare_sides ; var i ; begin
3941: LD_INT 0
3943: PPUSH
3944: PPUSH
// global_units := [ ] ;
3945: LD_ADDR_LOC 2
3949: PUSH
3950: EMPTY
3951: ST_TO_ADDR
// global_defined := false ;
3952: LD_ADDR_LOC 3
3956: PUSH
3957: LD_INT 0
3959: ST_TO_ADDR
// CountClassMembers ;
3960: CALL 4010 0 0
// for i := 1 to 8 do
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: DOUBLE
3970: LD_INT 1
3972: DEC
3973: ST_TO_ADDR
3974: LD_INT 8
3976: PUSH
3977: FOR_TO
3978: IFFALSE 4003
// if Side_Positions [ i ] then
3980: LD_EXP 23
3984: PUSH
3985: LD_VAR 0 2
3989: ARRAY
3990: IFFALSE 4001
// prepare_side ( i ) ;
3992: LD_VAR 0 2
3996: PPUSH
3997: CALL 2733 0 1
4001: GO 3977
4003: POP
4004: POP
// end ;
4005: LD_VAR 0 1
4009: RET
// function CountClassMembers ; var Mode ; begin
4010: LD_INT 0
4012: PPUSH
4013: PPUSH
// if No_Mechs then
4014: LD_EXP 62
4018: IFFALSE 4030
// Mode := 2 else
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: LD_INT 2
4027: ST_TO_ADDR
4028: GO 4038
// Mode := 1 ;
4030: LD_ADDR_VAR 0 2
4034: PUSH
4035: LD_INT 1
4037: ST_TO_ADDR
// neng := number_of_people ;
4038: LD_ADDR_LOC 5
4042: PUSH
4043: LD_EXP 9
4047: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4048: LD_ADDR_LOC 8
4052: PUSH
4053: LD_LOC 5
4057: PUSH
4058: LD_INT 4
4060: PUSH
4061: LD_INT 3
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_VAR 0 2
4072: ARRAY
4073: DIV
4074: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4075: LD_LOC 8
4079: PUSH
4080: LD_EXP 8
4084: LESS
4085: IFFALSE 4097
// nsol := number_of_breastworks ;
4087: LD_ADDR_LOC 8
4091: PUSH
4092: LD_EXP 8
4096: ST_TO_ADDR
// neng := neng - nsol ;
4097: LD_ADDR_LOC 5
4101: PUSH
4102: LD_LOC 5
4106: PUSH
4107: LD_LOC 8
4111: MINUS
4112: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4113: LD_ADDR_LOC 6
4117: PUSH
4118: LD_LOC 5
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 2
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_VAR 0 2
4137: ARRAY
4138: DIV
4139: ST_TO_ADDR
// if ( nsci < 1 ) then
4140: LD_LOC 6
4144: PUSH
4145: LD_INT 1
4147: LESS
4148: IFFALSE 4158
// nsci := 1 ;
4150: LD_ADDR_LOC 6
4154: PUSH
4155: LD_INT 1
4157: ST_TO_ADDR
// neng := neng - nsci ;
4158: LD_ADDR_LOC 5
4162: PUSH
4163: LD_LOC 5
4167: PUSH
4168: LD_LOC 6
4172: MINUS
4173: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4174: LD_ADDR_LOC 7
4178: PUSH
4179: LD_LOC 5
4183: PUSH
4184: LD_INT 2
4186: DIV
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: LD_VAR 0 2
4199: ARRAY
4200: ST_TO_ADDR
// neng := neng - nmech ;
4201: LD_ADDR_LOC 5
4205: PUSH
4206: LD_LOC 5
4210: PUSH
4211: LD_LOC 7
4215: MINUS
4216: ST_TO_ADDR
// if ( neng < 1 ) then
4217: LD_LOC 5
4221: PUSH
4222: LD_INT 1
4224: LESS
4225: IFFALSE 4235
// neng := 1 ;
4227: LD_ADDR_LOC 5
4231: PUSH
4232: LD_INT 1
4234: ST_TO_ADDR
// end ;
4235: LD_VAR 0 1
4239: RET
// starting begin disable ( 1 ) ;
4240: LD_INT 1
4242: DISABLE_MARKED
// disable ( 2 ) ;
4243: LD_INT 2
4245: DISABLE_MARKED
// disable ( 3 ) ;
4246: LD_INT 3
4248: DISABLE_MARKED
// disable ( 4 ) ;
4249: LD_INT 4
4251: DISABLE_MARKED
// disable ( 5 ) ;
4252: LD_INT 5
4254: DISABLE_MARKED
// disable ( 6 ) ;
4255: LD_INT 6
4257: DISABLE_MARKED
// disable ( 7 ) ;
4258: LD_INT 7
4260: DISABLE_MARKED
// disable ( 10 ) ;
4261: LD_INT 10
4263: DISABLE_MARKED
// disable ( 20 ) ;
4264: LD_INT 20
4266: DISABLE_MARKED
// disable ( 98 ) ;
4267: LD_INT 98
4269: DISABLE_MARKED
// disable ( 99 ) ;
4270: LD_INT 99
4272: DISABLE_MARKED
// disable ( 400 ) ;
4273: LD_INT 400
4275: DISABLE_MARKED
// disable ( 401 ) ;
4276: LD_INT 401
4278: DISABLE_MARKED
// disable ( 600 ) ;
4279: LD_INT 600
4281: DISABLE_MARKED
// mp_selectmsg := true ;
4282: LD_ADDR_OWVAR 13
4286: PUSH
4287: LD_INT 1
4289: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4290: CALL 68 0 0
// init_map ;
4294: CALL 1398 0 0
// set_shared_visions_and_alliances ;
4298: CALL 1857 0 0
// ResetFog ;
4302: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4306: LD_OWVAR 2
4310: PPUSH
4311: CALL_OW 520
// prepare_sides ;
4315: CALL 3941 0 0
// init_respawning ;
4319: CALL 27594 0 0
// Init_Win_Condition ;
4323: CALL 17842 0 0
// InitLimits ;
4327: CALL 15072 0 0
// ShowTimer ;
4331: CALL 16009 0 0
// case Game_Type of 2 :
4335: LD_EXP 46
4339: PUSH
4340: LD_INT 2
4342: DOUBLE
4343: EQUAL
4344: IFTRUE 4348
4346: GO 4355
4348: POP
// init_alien_research ; 3 :
4349: CALL 6672 0 0
4353: GO 4375
4355: LD_INT 3
4357: DOUBLE
4358: EQUAL
4359: IFTRUE 4363
4361: GO 4374
4363: POP
// begin InitPoints ( ) ;
4364: CALL 16247 0 0
// init_kings_counting ;
4368: CALL 19137 0 0
// end ; end ;
4372: GO 4375
4374: POP
// music_nat := Side_Nations [ your_side ] ;
4375: LD_ADDR_OWVAR 71
4379: PUSH
4380: LD_EXP 24
4384: PUSH
4385: LD_OWVAR 2
4389: ARRAY
4390: ST_TO_ADDR
// if IAmSpec then
4391: CALL_OW 531
4395: IFFALSE 4419
// begin fogOff ( true ) ;
4397: LD_INT 1
4399: PPUSH
4400: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4404: LD_INT 119
4406: PPUSH
4407: LD_INT 79
4409: PPUSH
4410: CALL_OW 86
// enable ( 400 ) ;
4414: LD_INT 400
4416: ENABLE_MARKED
// end else
4417: GO 4465
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4419: LD_EXP 31
4423: PUSH
4424: LD_EXP 23
4428: PUSH
4429: LD_OWVAR 2
4433: ARRAY
4434: ARRAY
4435: PUSH
4436: LD_INT 1
4438: ARRAY
4439: PPUSH
4440: LD_EXP 31
4444: PUSH
4445: LD_EXP 23
4449: PUSH
4450: LD_OWVAR 2
4454: ARRAY
4455: ARRAY
4456: PUSH
4457: LD_INT 2
4459: ARRAY
4460: PPUSH
4461: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4465: LD_INT 1
4467: PPUSH
4468: CALL_OW 573
// InitApeman ;
4472: CALL 5157 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4476: LD_ADDR_EXP 66
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 23
4486: PUSH
4487: LD_INT 20
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: ST_TO_ADDR
// BeginBuildUp ;
4499: CALL 17005 0 0
// end ; end_of_file
4503: END
// every 1 1$0 + 0 0$0.3 do
4504: GO 4506
4506: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
4507: LD_INT 4
4509: PPUSH
4510: LD_INT 5
4512: PPUSH
4513: CALL_OW 12
4517: PPUSH
4518: LD_INT 25
4520: PPUSH
4521: LD_INT 1
4523: PPUSH
4524: CALL_OW 55
// enable ;
4528: ENABLE
// end ;
4529: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4530: GO 4532
4532: DISABLE
4533: LD_INT 0
4535: PPUSH
4536: PPUSH
// begin case tick of 1 .. 1 1$0 :
4537: LD_OWVAR 1
4541: PUSH
4542: LD_INT 1
4544: DOUBLE
4545: GREATEREQUAL
4546: IFFALSE 4554
4548: LD_INT 2100
4550: DOUBLE
4551: LESSEQUAL
4552: IFTRUE 4556
4554: GO 4584
4556: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4557: LD_EXP 13
4561: PUSH
4562: LD_INT 100
4564: DIVREAL
4565: PUSH
4566: LD_INT 350
4568: PPUSH
4569: LD_INT 1050
4571: PPUSH
4572: CALL_OW 12
4576: MUL
4577: PPUSH
4578: CALL_OW 67
4582: GO 4886
4584: LD_INT 2100
4586: PUSH
4587: LD_INT 1
4589: PLUS
4590: DOUBLE
4591: GREATEREQUAL
4592: IFFALSE 4600
4594: LD_INT 10500
4596: DOUBLE
4597: LESSEQUAL
4598: IFTRUE 4602
4600: GO 4630
4602: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4603: LD_EXP 13
4607: PUSH
4608: LD_INT 100
4610: DIVREAL
4611: PUSH
4612: LD_INT 1050
4614: PPUSH
4615: LD_INT 1575
4617: PPUSH
4618: CALL_OW 12
4622: MUL
4623: PPUSH
4624: CALL_OW 67
4628: GO 4886
4630: LD_INT 10500
4632: PUSH
4633: LD_INT 1
4635: PLUS
4636: DOUBLE
4637: GREATEREQUAL
4638: IFFALSE 4646
4640: LD_INT 21000
4642: DOUBLE
4643: LESSEQUAL
4644: IFTRUE 4648
4646: GO 4676
4648: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4649: LD_EXP 13
4653: PUSH
4654: LD_INT 100
4656: DIVREAL
4657: PUSH
4658: LD_INT 1575
4660: PPUSH
4661: LD_INT 2100
4663: PPUSH
4664: CALL_OW 12
4668: MUL
4669: PPUSH
4670: CALL_OW 67
4674: GO 4886
4676: LD_INT 21000
4678: PUSH
4679: LD_INT 1
4681: PLUS
4682: DOUBLE
4683: GREATEREQUAL
4684: IFFALSE 4692
4686: LD_INT 42000
4688: DOUBLE
4689: LESSEQUAL
4690: IFTRUE 4694
4692: GO 4722
4694: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4695: LD_EXP 13
4699: PUSH
4700: LD_INT 100
4702: DIVREAL
4703: PUSH
4704: LD_INT 2100
4706: PPUSH
4707: LD_INT 2625
4709: PPUSH
4710: CALL_OW 12
4714: MUL
4715: PPUSH
4716: CALL_OW 67
4720: GO 4886
4722: LD_INT 42000
4724: PUSH
4725: LD_INT 1
4727: PLUS
4728: DOUBLE
4729: GREATEREQUAL
4730: IFFALSE 4738
4732: LD_INT 63000
4734: DOUBLE
4735: LESSEQUAL
4736: IFTRUE 4740
4738: GO 4768
4740: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4741: LD_EXP 13
4745: PUSH
4746: LD_INT 100
4748: DIVREAL
4749: PUSH
4750: LD_INT 2625
4752: PPUSH
4753: LD_INT 3150
4755: PPUSH
4756: CALL_OW 12
4760: MUL
4761: PPUSH
4762: CALL_OW 67
4766: GO 4886
4768: LD_INT 63000
4770: PUSH
4771: LD_INT 1
4773: PLUS
4774: DOUBLE
4775: GREATEREQUAL
4776: IFFALSE 4784
4778: LD_INT 105000
4780: DOUBLE
4781: LESSEQUAL
4782: IFTRUE 4786
4784: GO 4814
4786: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4787: LD_EXP 13
4791: PUSH
4792: LD_INT 100
4794: DIVREAL
4795: PUSH
4796: LD_INT 3150
4798: PPUSH
4799: LD_INT 3675
4801: PPUSH
4802: CALL_OW 12
4806: MUL
4807: PPUSH
4808: CALL_OW 67
4812: GO 4886
4814: LD_INT 105000
4816: PUSH
4817: LD_INT 1
4819: PLUS
4820: DOUBLE
4821: GREATEREQUAL
4822: IFFALSE 4830
4824: LD_INT 630000
4826: DOUBLE
4827: LESSEQUAL
4828: IFTRUE 4832
4830: GO 4860
4832: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
4833: LD_EXP 13
4837: PUSH
4838: LD_INT 100
4840: DIVREAL
4841: PUSH
4842: LD_INT 3675
4844: PPUSH
4845: LD_INT 4200
4847: PPUSH
4848: CALL_OW 12
4852: MUL
4853: PPUSH
4854: CALL_OW 67
4858: GO 4886
4860: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
4861: LD_EXP 13
4865: PUSH
4866: LD_INT 100
4868: DIVREAL
4869: PUSH
4870: LD_INT 4200
4872: PPUSH
4873: LD_INT 5250
4875: PPUSH
4876: CALL_OW 12
4880: MUL
4881: PPUSH
4882: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
4886: LD_ADDR_VAR 0 2
4890: PUSH
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 5
4896: PPUSH
4897: CALL_OW 12
4901: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
4902: LD_ADDR_VAR 0 1
4906: PUSH
4907: LD_EXP 23
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: EMPTY
4916: LIST
4917: DIFF
4918: PUSH
4919: FOR_IN
4920: IFFALSE 4960
// CreateCratesArea ( amount , [ north_west , north_east , south_west , south_east ] [ i ] , true ) ;
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 5
4932: PUSH
4933: LD_INT 7
4935: PUSH
4936: LD_INT 6
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: PUSH
4945: LD_VAR 0 1
4949: ARRAY
4950: PPUSH
4951: LD_INT 1
4953: PPUSH
4954: CALL_OW 55
4958: GO 4919
4960: POP
4961: POP
// enable ;
4962: ENABLE
// end ; end_of_file
4963: PPOPN 2
4965: END
// every 20 20$00 trigger apemanNumber do
4966: LD_EXP 35
4970: IFFALSE 5003
4972: GO 4974
4974: DISABLE
// begin enable ;
4975: ENABLE
// if apeLevel >= 8 then
4976: LD_EXP 40
4980: PUSH
4981: LD_INT 8
4983: GREATEREQUAL
4984: IFFALSE 4989
// disable else
4986: DISABLE
4987: GO 5003
// apeLevel := apeLevel + 1 ;
4989: LD_ADDR_EXP 40
4993: PUSH
4994: LD_EXP 40
4998: PUSH
4999: LD_INT 1
5001: PLUS
5002: ST_TO_ADDR
// end ;
5003: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5004: LD_EXP 35
5008: PUSH
5009: LD_EXP 36
5013: LESS
5014: IFFALSE 5154
5016: GO 5018
5018: DISABLE
5019: LD_INT 0
5021: PPUSH
5022: PPUSH
5023: PPUSH
5024: PPUSH
// begin enable ;
5025: ENABLE
// for i := 1 to apemanPos do
5026: LD_ADDR_VAR 0 1
5030: PUSH
5031: DOUBLE
5032: LD_INT 1
5034: DEC
5035: ST_TO_ADDR
5036: LD_EXP 38
5040: PUSH
5041: FOR_TO
5042: IFFALSE 5152
// begin if apemanPlayerCount [ i ] then
5044: LD_EXP 39
5048: PUSH
5049: LD_VAR 0 1
5053: ARRAY
5054: IFFALSE 5150
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5056: LD_EXP 39
5060: PUSH
5061: LD_VAR 0 1
5065: ARRAY
5066: PUSH
5067: LD_EXP 38
5071: PUSH
5072: LD_VAR 0 1
5076: ARRAY
5077: GREATER
5078: IFFALSE 5150
// begin ape := PrepareApeman ;
5080: LD_ADDR_VAR 0 2
5084: PUSH
5085: CALL 5657 0 0
5089: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5090: LD_VAR 0 2
5094: PPUSH
5095: LD_EXP 41
5099: PUSH
5100: LD_VAR 0 1
5104: ARRAY
5105: PPUSH
5106: LD_INT 0
5108: PPUSH
5109: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5113: LD_ADDR_EXP 38
5117: PUSH
5118: LD_EXP 38
5122: PPUSH
5123: LD_VAR 0 1
5127: PPUSH
5128: LD_EXP 38
5132: PUSH
5133: LD_VAR 0 1
5137: ARRAY
5138: PUSH
5139: LD_VAR 0 2
5143: UNION
5144: PPUSH
5145: CALL_OW 1
5149: ST_TO_ADDR
// end ; end ; end ;
5150: GO 5041
5152: POP
5153: POP
// end ;
5154: PPOPN 4
5156: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5157: LD_INT 0
5159: PPUSH
5160: PPUSH
5161: PPUSH
5162: PPUSH
5163: PPUSH
5164: PPUSH
5165: PPUSH
// playersAmount := 0 ;
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: LD_INT 0
5173: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5174: LD_ADDR_VAR 0 7
5178: PUSH
5179: LD_INT 8
5181: PUSH
5182: LD_INT 9
5184: PUSH
5185: LD_INT 11
5187: PUSH
5188: LD_INT 10
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5197: LD_ADDR_EXP 41
5201: PUSH
5202: LD_INT 0
5204: PUSH
5205: LD_INT 0
5207: PUSH
5208: LD_INT 0
5210: PUSH
5211: LD_INT 0
5213: PUSH
5214: LD_INT 0
5216: PUSH
5217: LD_INT 0
5219: PUSH
5220: LD_INT 0
5222: PUSH
5223: LD_INT 0
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: ST_TO_ADDR
// for j = 1 to Side_Positions do
5236: LD_ADDR_VAR 0 4
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_EXP 23
5250: PUSH
5251: FOR_TO
5252: IFFALSE 5319
// if Side_Positions [ j ] then
5254: LD_EXP 23
5258: PUSH
5259: LD_VAR 0 4
5263: ARRAY
5264: IFFALSE 5317
// begin playersAmount := playersAmount + 1 ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PUSH
5276: LD_INT 1
5278: PLUS
5279: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5280: LD_ADDR_EXP 41
5284: PUSH
5285: LD_EXP 41
5289: PPUSH
5290: LD_VAR 0 4
5294: PPUSH
5295: LD_VAR 0 7
5299: PUSH
5300: LD_EXP 23
5304: PUSH
5305: LD_VAR 0 4
5309: ARRAY
5310: ARRAY
5311: PPUSH
5312: CALL_OW 1
5316: ST_TO_ADDR
// end ;
5317: GO 5251
5319: POP
5320: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5321: LD_ADDR_EXP 37
5325: PUSH
5326: LD_INT 3
5328: PUSH
5329: LD_EXP 15
5333: MUL
5334: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5335: LD_ADDR_EXP 35
5339: PUSH
5340: LD_VAR 0 3
5344: PUSH
5345: LD_EXP 37
5349: MUL
5350: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5351: LD_ADDR_EXP 36
5355: PUSH
5356: LD_EXP 35
5360: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5361: LD_ADDR_EXP 38
5365: PUSH
5366: LD_INT 0
5368: PUSH
5369: LD_INT 0
5371: PUSH
5372: LD_INT 0
5374: PUSH
5375: LD_INT 0
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: LD_INT 0
5383: PUSH
5384: LD_INT 0
5386: PUSH
5387: LD_INT 0
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5400: LD_ADDR_EXP 39
5404: PUSH
5405: LD_INT 0
5407: PUSH
5408: LD_INT 0
5410: PUSH
5411: LD_INT 0
5413: PUSH
5414: LD_INT 0
5416: PUSH
5417: LD_INT 0
5419: PUSH
5420: LD_INT 0
5422: PUSH
5423: LD_INT 0
5425: PUSH
5426: LD_INT 0
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: ST_TO_ADDR
// apeLevel := 1 ;
5439: LD_ADDR_EXP 40
5443: PUSH
5444: LD_INT 1
5446: ST_TO_ADDR
// if not apemanNumber then
5447: LD_EXP 35
5451: NOT
5452: IFFALSE 5456
// exit ;
5454: GO 5652
// for i := 1 to apemanPerPlayer do
5456: LD_ADDR_VAR 0 2
5460: PUSH
5461: DOUBLE
5462: LD_INT 1
5464: DEC
5465: ST_TO_ADDR
5466: LD_EXP 37
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5650
// begin for j := 1 to Side_Positions do
5474: LD_ADDR_VAR 0 4
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_EXP 23
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5646
// if Side_Positions [ j ] then
5492: LD_EXP 23
5496: PUSH
5497: LD_VAR 0 4
5501: ARRAY
5502: IFFALSE 5644
// begin pos := Side_Positions [ j ] ;
5504: LD_ADDR_VAR 0 6
5508: PUSH
5509: LD_EXP 23
5513: PUSH
5514: LD_VAR 0 4
5518: ARRAY
5519: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5520: LD_ADDR_EXP 39
5524: PUSH
5525: LD_EXP 39
5529: PPUSH
5530: LD_VAR 0 4
5534: PPUSH
5535: LD_EXP 39
5539: PUSH
5540: LD_VAR 0 4
5544: ARRAY
5545: PUSH
5546: LD_INT 1
5548: PLUS
5549: PPUSH
5550: CALL_OW 1
5554: ST_TO_ADDR
// ape := PrepareApeman ;
5555: LD_ADDR_VAR 0 5
5559: PUSH
5560: CALL 5657 0 0
5564: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5565: LD_ADDR_EXP 38
5569: PUSH
5570: LD_EXP 38
5574: PPUSH
5575: LD_VAR 0 4
5579: PPUSH
5580: LD_EXP 38
5584: PUSH
5585: LD_VAR 0 4
5589: ARRAY
5590: PPUSH
5591: LD_EXP 38
5595: PUSH
5596: LD_VAR 0 4
5600: ARRAY
5601: PUSH
5602: LD_INT 1
5604: PLUS
5605: PPUSH
5606: LD_VAR 0 5
5610: PPUSH
5611: CALL_OW 1
5615: PPUSH
5616: CALL_OW 1
5620: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5621: LD_VAR 0 5
5625: PPUSH
5626: LD_EXP 41
5630: PUSH
5631: LD_VAR 0 4
5635: ARRAY
5636: PPUSH
5637: LD_INT 0
5639: PPUSH
5640: CALL_OW 49
// end ;
5644: GO 5489
5646: POP
5647: POP
// end ;
5648: GO 5471
5650: POP
5651: POP
// end ;
5652: LD_VAR 0 1
5656: RET
// export function PrepareApeman ; var bonus ; begin
5657: LD_INT 0
5659: PPUSH
5660: PPUSH
// uc_side := 0 ;
5661: LD_ADDR_OWVAR 20
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// uc_nation := 0 ;
5669: LD_ADDR_OWVAR 21
5673: PUSH
5674: LD_INT 0
5676: ST_TO_ADDR
// InitHc ;
5677: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5681: LD_ADDR_VAR 0 2
5685: PUSH
5686: LD_INT 1
5688: NEG
5689: PUSH
5690: LD_INT 0
5692: PUSH
5693: LD_INT 1
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: LIST
5700: PUSH
5701: LD_OWVAR 1
5705: PUSH
5706: LD_INT 3
5708: MOD
5709: PUSH
5710: LD_INT 1
5712: PLUS
5713: ARRAY
5714: ST_TO_ADDR
// hc_class := class_apeman ;
5715: LD_ADDR_OWVAR 28
5719: PUSH
5720: LD_INT 12
5722: ST_TO_ADDR
// hc_gallery :=  ;
5723: LD_ADDR_OWVAR 33
5727: PUSH
5728: LD_STRING 
5730: ST_TO_ADDR
// hc_name :=  ;
5731: LD_ADDR_OWVAR 26
5735: PUSH
5736: LD_STRING 
5738: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5739: LD_ADDR_OWVAR 31
5743: PUSH
5744: LD_EXP 40
5748: PUSH
5749: LD_VAR 0 2
5753: PLUS
5754: PUSH
5755: LD_EXP 40
5759: PUSH
5760: LD_VAR 0 2
5764: PLUS
5765: PUSH
5766: LD_EXP 40
5770: PUSH
5771: LD_VAR 0 2
5775: PLUS
5776: PUSH
5777: LD_EXP 40
5781: PUSH
5782: LD_VAR 0 2
5786: PLUS
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5794: LD_ADDR_OWVAR 35
5798: PUSH
5799: LD_INT 10
5801: PUSH
5802: LD_VAR 0 2
5806: MUL
5807: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5808: LD_ADDR_OWVAR 29
5812: PUSH
5813: LD_INT 12
5815: PUSH
5816: LD_INT 10
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: ST_TO_ADDR
// result := CreateHuman ;
5823: LD_ADDR_VAR 0 1
5827: PUSH
5828: CALL_OW 44
5832: ST_TO_ADDR
// end ;
5833: LD_VAR 0 1
5837: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5838: LD_INT 0
5840: PPUSH
5841: PPUSH
5842: PPUSH
// if not ape then
5843: LD_VAR 0 1
5847: NOT
5848: IFFALSE 5852
// exit ;
5850: GO 5977
// side := GetSide ( ape ) ;
5852: LD_ADDR_VAR 0 3
5856: PUSH
5857: LD_VAR 0 1
5861: PPUSH
5862: CALL_OW 255
5866: ST_TO_ADDR
// if not side then
5867: LD_VAR 0 3
5871: NOT
5872: IFFALSE 5926
// begin for i = 1 to apemanPos do
5874: LD_ADDR_VAR 0 4
5878: PUSH
5879: DOUBLE
5880: LD_INT 1
5882: DEC
5883: ST_TO_ADDR
5884: LD_EXP 38
5888: PUSH
5889: FOR_TO
5890: IFFALSE 5924
// if ape in apemanPos [ i ] then
5892: LD_VAR 0 1
5896: PUSH
5897: LD_EXP 38
5901: PUSH
5902: LD_VAR 0 4
5906: ARRAY
5907: IN
5908: IFFALSE 5922
// begin side := i ;
5910: LD_ADDR_VAR 0 3
5914: PUSH
5915: LD_VAR 0 4
5919: ST_TO_ADDR
// break ;
5920: GO 5924
// end ;
5922: GO 5889
5924: POP
5925: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5926: LD_ADDR_EXP 38
5930: PUSH
5931: LD_EXP 38
5935: PPUSH
5936: LD_VAR 0 3
5940: PPUSH
5941: LD_EXP 38
5945: PUSH
5946: LD_VAR 0 3
5950: ARRAY
5951: PUSH
5952: LD_VAR 0 1
5956: DIFF
5957: PPUSH
5958: CALL_OW 1
5962: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5963: LD_ADDR_EXP 35
5967: PUSH
5968: LD_EXP 35
5972: PUSH
5973: LD_INT 1
5975: MINUS
5976: ST_TO_ADDR
// end ; end_of_file
5977: LD_VAR 0 2
5981: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5982: LD_VAR 0 1
5986: PPUSH
5987: CALL_OW 266
5991: PUSH
5992: LD_INT 0
5994: PUSH
5995: LD_INT 1
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: IN
6002: IFFALSE 6027
// SetBName ( b , @ & GetSide ( b ) ) ;
6004: LD_VAR 0 1
6008: PPUSH
6009: LD_STRING @
6011: PUSH
6012: LD_VAR 0 1
6016: PPUSH
6017: CALL_OW 255
6021: STR
6022: PPUSH
6023: CALL_OW 500
// if def_game_rules then
6027: LD_EXP 47
6031: IFFALSE 6068
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_VAR 0 1
6042: PPUSH
6043: CALL_OW 266
6047: PPUSH
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 255
6057: PPUSH
6058: LD_INT 0
6060: PPUSH
6061: LD_INT 1
6063: PPUSH
6064: CALL 15473 0 5
// end ;
6068: PPOPN 2
6070: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6071: LD_VAR 0 1
6075: PPUSH
6076: CALL_OW 266
6080: PUSH
6081: LD_INT 0
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: IN
6091: IFFALSE 6116
// SetBName ( b , @ & GetSide ( b ) ) ;
6093: LD_VAR 0 1
6097: PPUSH
6098: LD_STRING @
6100: PUSH
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 255
6110: STR
6111: PPUSH
6112: CALL_OW 500
// if def_game_rules then
6116: LD_EXP 47
6120: IFFALSE 6159
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6122: LD_VAR 0 1
6126: PPUSH
6127: LD_VAR 0 1
6131: PPUSH
6132: CALL_OW 266
6136: PPUSH
6137: LD_VAR 0 1
6141: PPUSH
6142: CALL_OW 255
6146: PPUSH
6147: LD_VAR 0 2
6151: PPUSH
6152: LD_INT 1
6154: PPUSH
6155: CALL 15473 0 5
// end ;
6159: PPOPN 3
6161: END
// on VehicleConstructed ( veh , fac ) do var side ;
6162: LD_INT 0
6164: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6165: LD_VAR 0 1
6169: PPUSH
6170: CALL_OW 263
6174: PUSH
6175: LD_INT 5
6177: EQUAL
6178: IFFALSE 6320
// begin side := GetSide ( veh ) ;
6180: LD_ADDR_VAR 0 3
6184: PUSH
6185: LD_VAR 0 1
6189: PPUSH
6190: CALL_OW 255
6194: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6195: LD_ADDR_EXP 38
6199: PUSH
6200: LD_EXP 38
6204: PPUSH
6205: LD_VAR 0 3
6209: PPUSH
6210: LD_EXP 38
6214: PUSH
6215: LD_VAR 0 3
6219: ARRAY
6220: PPUSH
6221: LD_INT 52
6223: PUSH
6224: EMPTY
6225: LIST
6226: PPUSH
6227: CALL_OW 72
6231: PUSH
6232: LD_INT 22
6234: PUSH
6235: LD_VAR 0 3
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 2
6246: PUSH
6247: LD_INT 33
6249: PUSH
6250: LD_INT 5
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 12
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 15
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 16
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 17
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PPUSH
6309: CALL_OW 69
6313: UNION
6314: PPUSH
6315: CALL_OW 1
6319: ST_TO_ADDR
// end ; end ;
6320: PPOPN 3
6322: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6323: LD_INT 0
6325: PPUSH
6326: PPUSH
6327: PPUSH
6328: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6329: LD_VAR 0 1
6333: PPUSH
6334: CALL_OW 257
6338: PUSH
6339: LD_INT 12
6341: PUSH
6342: LD_INT 15
6344: PUSH
6345: LD_INT 17
6347: PUSH
6348: LD_INT 16
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: IN
6357: PUSH
6358: LD_VAR 0 1
6362: PPUSH
6363: CALL_OW 263
6367: PUSH
6368: LD_INT 5
6370: EQUAL
6371: OR
6372: IFFALSE 6383
// ApeKilled ( j ) ;
6374: LD_VAR 0 1
6378: PPUSH
6379: CALL 5838 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6383: LD_VAR 0 1
6387: PPUSH
6388: CALL_OW 266
6392: PUSH
6393: LD_INT 0
6395: PUSH
6396: LD_INT 1
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: IN
6403: IFFALSE 6485
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6405: LD_ADDR_VAR 0 4
6409: PUSH
6410: LD_EXP 23
6414: PUSH
6415: LD_VAR 0 1
6419: PPUSH
6420: CALL_OW 255
6424: ARRAY
6425: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6426: LD_ADDR_VAR 0 2
6430: PUSH
6431: LD_EXP 31
6435: PUSH
6436: LD_VAR 0 4
6440: ARRAY
6441: PUSH
6442: LD_INT 1
6444: ARRAY
6445: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6446: LD_ADDR_VAR 0 3
6450: PUSH
6451: LD_EXP 31
6455: PUSH
6456: LD_VAR 0 4
6460: ARRAY
6461: PUSH
6462: LD_INT 2
6464: ARRAY
6465: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6466: LD_VAR 0 2
6470: PPUSH
6471: LD_VAR 0 3
6475: PPUSH
6476: CALL_OW 420
6480: PPUSH
6481: CALL_OW 419
// end ; if def_game_rules then
6485: LD_EXP 47
6489: IFFALSE 6588
// if ( GetType ( j ) = 3 ) then
6491: LD_VAR 0 1
6495: PPUSH
6496: CALL_OW 247
6500: PUSH
6501: LD_INT 3
6503: EQUAL
6504: IFFALSE 6544
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 266
6520: PPUSH
6521: LD_VAR 0 1
6525: PPUSH
6526: CALL_OW 255
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: LD_INT 1
6536: NEG
6537: PPUSH
6538: CALL 15473 0 5
6542: GO 6588
// if ( GetChassis ( j ) = 25 ) then
6544: LD_VAR 0 1
6548: PPUSH
6549: CALL_OW 265
6553: PUSH
6554: LD_INT 25
6556: EQUAL
6557: IFFALSE 6588
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6559: LD_VAR 0 1
6563: PPUSH
6564: LD_INT 37
6566: PPUSH
6567: LD_VAR 0 1
6571: PPUSH
6572: CALL_OW 255
6576: PPUSH
6577: LD_INT 0
6579: PPUSH
6580: LD_INT 1
6582: NEG
6583: PPUSH
6584: CALL 15473 0 5
// end ;
6588: PPOPN 5
6590: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6591: LD_EXP 47
6595: PUSH
6596: LD_VAR 0 1
6600: PPUSH
6601: CALL_OW 265
6605: PUSH
6606: LD_INT 25
6608: EQUAL
6609: AND
6610: IFFALSE 6642
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6612: LD_VAR 0 1
6616: PPUSH
6617: LD_INT 37
6619: PPUSH
6620: LD_VAR 0 1
6624: PPUSH
6625: CALL_OW 255
6629: PPUSH
6630: LD_VAR 0 3
6634: PPUSH
6635: LD_INT 1
6637: PPUSH
6638: CALL 15473 0 5
// end ;
6642: PPOPN 4
6644: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6645: LD_VAR 0 1
6649: PPUSH
6650: LD_VAR 0 2
6654: PPUSH
6655: LD_VAR 0 3
6659: PPUSH
6660: LD_OWVAR 2
6664: PPUSH
6665: CALL 17603 0 4
6669: PPOPN 3
6671: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
6672: LD_INT 0
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
// artefact_number := 3 ;
6680: LD_ADDR_EXP 42
6684: PUSH
6685: LD_INT 3
6687: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
6688: LD_ADDR_EXP 43
6692: PUSH
6693: LD_INT 1
6695: PUSH
6696: LD_INT 0
6698: PUSH
6699: LD_INT 2
6701: PUSH
6702: LD_INT 0
6704: PUSH
6705: LD_INT 3
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
6715: LD_ADDR_EXP 44
6719: PUSH
6720: LD_INT 1
6722: PUSH
6723: LD_INT 3
6725: PUSH
6726: LD_INT 5
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
6734: LD_ADDR_VAR 0 2
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: LD_INT 4
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 2
6751: PUSH
6752: LD_INT 5
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 9
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
6774: LD_ADDR_VAR 0 3
6778: PUSH
6779: LD_INT 3
6781: PUSH
6782: LD_INT 4
6784: PUSH
6785: LD_INT 3
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
6793: LD_ADDR_VAR 0 4
6797: PUSH
6798: LD_INT 150
6800: PUSH
6801: LD_INT 250
6803: PUSH
6804: LD_INT 400
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
6812: LD_ADDR_VAR 0 5
6816: PUSH
6817: LD_INT 2
6819: PUSH
6820: LD_INT 10
6822: PUSH
6823: LD_INT 20
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: LIST
6830: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
6831: LD_ADDR_VAR 0 6
6835: PUSH
6836: LD_INT 6
6838: PUSH
6839: LD_INT 18
6841: PUSH
6842: LD_INT 50
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
6850: LD_VAR 0 2
6854: PPUSH
6855: LD_VAR 0 3
6859: PPUSH
6860: LD_VAR 0 4
6864: PPUSH
6865: LD_VAR 0 5
6869: PPUSH
6870: LD_VAR 0 6
6874: PPUSH
6875: CALL 6884 0 5
// end ;
6879: LD_VAR 0 1
6883: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
6884: LD_INT 0
6886: PPUSH
6887: PPUSH
6888: PPUSH
6889: PPUSH
6890: PPUSH
// disable ( 1 ) ;
6891: LD_INT 1
6893: DISABLE_MARKED
// disable ( 5 ) ;
6894: LD_INT 5
6896: DISABLE_MARKED
// disable ( 6 ) ;
6897: LD_INT 6
6899: DISABLE_MARKED
// disable ( 7 ) ;
6900: LD_INT 7
6902: DISABLE_MARKED
// for side = 1 to 8 do
6903: LD_ADDR_VAR 0 9
6907: PUSH
6908: DOUBLE
6909: LD_INT 1
6911: DEC
6912: ST_TO_ADDR
6913: LD_INT 8
6915: PUSH
6916: FOR_TO
6917: IFFALSE 6933
// SetArtifactRes ( side , state_enabled ) ;
6919: LD_VAR 0 9
6923: PPUSH
6924: LD_INT 1
6926: PPUSH
6927: CALL_OW 467
6931: GO 6916
6933: POP
6934: POP
// for un = 0 to ( artefact_number - 1 ) do
6935: LD_ADDR_VAR 0 7
6939: PUSH
6940: DOUBLE
6941: LD_INT 0
6943: DEC
6944: ST_TO_ADDR
6945: LD_EXP 42
6949: PUSH
6950: LD_INT 1
6952: MINUS
6953: PUSH
6954: FOR_TO
6955: IFFALSE 7353
// begin base := un * 100 ;
6957: LD_ADDR_VAR 0 10
6961: PUSH
6962: LD_VAR 0 7
6966: PUSH
6967: LD_INT 100
6969: MUL
6970: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
6971: LD_VAR 0 10
6975: PUSH
6976: LD_INT 1
6978: PLUS
6979: PPUSH
6980: LD_VAR 0 1
6984: PUSH
6985: LD_VAR 0 7
6989: PUSH
6990: LD_INT 1
6992: PLUS
6993: ARRAY
6994: PUSH
6995: LD_INT 1
6997: ARRAY
6998: PPUSH
6999: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7003: LD_VAR 0 10
7007: PUSH
7008: LD_INT 2
7010: PLUS
7011: PPUSH
7012: LD_VAR 0 1
7016: PUSH
7017: LD_VAR 0 7
7021: PUSH
7022: LD_INT 1
7024: PLUS
7025: ARRAY
7026: PUSH
7027: LD_INT 2
7029: ARRAY
7030: PPUSH
7031: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7035: LD_VAR 0 10
7039: PUSH
7040: LD_INT 3
7042: PLUS
7043: PPUSH
7044: LD_VAR 0 2
7048: PUSH
7049: LD_VAR 0 7
7053: PUSH
7054: LD_INT 1
7056: PLUS
7057: ARRAY
7058: PPUSH
7059: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7063: LD_VAR 0 10
7067: PUSH
7068: LD_INT 5
7070: PLUS
7071: PPUSH
7072: LD_VAR 0 3
7076: PUSH
7077: LD_VAR 0 7
7081: PUSH
7082: LD_INT 1
7084: PLUS
7085: ARRAY
7086: PPUSH
7087: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7091: LD_VAR 0 10
7095: PUSH
7096: LD_INT 6
7098: PLUS
7099: PPUSH
7100: LD_VAR 0 4
7104: PUSH
7105: LD_VAR 0 7
7109: PUSH
7110: LD_INT 1
7112: PLUS
7113: ARRAY
7114: PPUSH
7115: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7119: LD_VAR 0 10
7123: PUSH
7124: LD_INT 7
7126: PLUS
7127: PPUSH
7128: LD_VAR 0 5
7132: PUSH
7133: LD_VAR 0 7
7137: PUSH
7138: LD_INT 1
7140: PLUS
7141: ARRAY
7142: PPUSH
7143: CALL_OW 109
// SetTag ( base + 08 , false ) ;
7147: LD_VAR 0 10
7151: PUSH
7152: LD_INT 8
7154: PLUS
7155: PPUSH
7156: LD_INT 0
7158: PPUSH
7159: CALL_OW 109
// SetTag ( base + 09 , false ) ;
7163: LD_VAR 0 10
7167: PUSH
7168: LD_INT 9
7170: PLUS
7171: PPUSH
7172: LD_INT 0
7174: PPUSH
7175: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
7179: LD_VAR 0 10
7183: PUSH
7184: LD_INT 11
7186: PLUS
7187: PPUSH
7188: LD_INT 0
7190: PPUSH
7191: CALL_OW 109
// SetTag ( base + 12 , false ) ;
7195: LD_VAR 0 10
7199: PUSH
7200: LD_INT 12
7202: PLUS
7203: PPUSH
7204: LD_INT 0
7206: PPUSH
7207: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7211: LD_VAR 0 10
7215: PUSH
7216: LD_INT 13
7218: PLUS
7219: PPUSH
7220: LD_INT 0
7222: PPUSH
7223: CALL_OW 109
// for i = 0 to 7 do
7227: LD_ADDR_VAR 0 8
7231: PUSH
7232: DOUBLE
7233: LD_INT 0
7235: DEC
7236: ST_TO_ADDR
7237: LD_INT 7
7239: PUSH
7240: FOR_TO
7241: IFFALSE 7349
// begin SetTag ( base + i * 10 + 21 , false ) ;
7243: LD_VAR 0 10
7247: PUSH
7248: LD_VAR 0 8
7252: PUSH
7253: LD_INT 10
7255: MUL
7256: PLUS
7257: PUSH
7258: LD_INT 21
7260: PLUS
7261: PPUSH
7262: LD_INT 0
7264: PPUSH
7265: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
7269: LD_VAR 0 10
7273: PUSH
7274: LD_VAR 0 8
7278: PUSH
7279: LD_INT 10
7281: MUL
7282: PLUS
7283: PUSH
7284: LD_INT 22
7286: PLUS
7287: PPUSH
7288: LD_INT 0
7290: PPUSH
7291: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
7295: LD_VAR 0 10
7299: PUSH
7300: LD_VAR 0 8
7304: PUSH
7305: LD_INT 10
7307: MUL
7308: PLUS
7309: PUSH
7310: LD_INT 23
7312: PLUS
7313: PPUSH
7314: LD_INT 0
7316: PPUSH
7317: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
7321: LD_VAR 0 10
7325: PUSH
7326: LD_VAR 0 8
7330: PUSH
7331: LD_INT 10
7333: MUL
7334: PLUS
7335: PUSH
7336: LD_INT 25
7338: PLUS
7339: PPUSH
7340: LD_INT 0
7342: PPUSH
7343: CALL_OW 109
// end ;
7347: GO 7240
7349: POP
7350: POP
// end ;
7351: GO 6954
7353: POP
7354: POP
// enable ( 20 ) ;
7355: LD_INT 20
7357: ENABLE_MARKED
// labs_in_use := [ ] ;
7358: LD_ADDR_EXP 45
7362: PUSH
7363: EMPTY
7364: ST_TO_ADDR
// if def_artefact_one then
7365: LD_EXP 1
7369: IFFALSE 7396
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
7371: LD_INT 4
7373: PPUSH
7374: LD_EXP 44
7378: PUSH
7379: LD_INT 1
7381: ARRAY
7382: PPUSH
7383: LD_INT 16
7385: PPUSH
7386: LD_INT 0
7388: PPUSH
7389: CALL_OW 59
// enable ( 5 ) ;
7393: LD_INT 5
7395: ENABLE_MARKED
// end ; if def_artefact_two then
7396: LD_EXP 2
7400: IFFALSE 7427
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
7402: LD_INT 4
7404: PPUSH
7405: LD_EXP 44
7409: PUSH
7410: LD_INT 2
7412: ARRAY
7413: PPUSH
7414: LD_INT 16
7416: PPUSH
7417: LD_INT 0
7419: PPUSH
7420: CALL_OW 59
// enable ( 6 ) ;
7424: LD_INT 6
7426: ENABLE_MARKED
// end ; if def_artefact_three then
7427: LD_EXP 3
7431: IFFALSE 7458
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
7433: LD_INT 4
7435: PPUSH
7436: LD_EXP 44
7440: PUSH
7441: LD_INT 3
7443: ARRAY
7444: PPUSH
7445: LD_INT 16
7447: PPUSH
7448: LD_INT 0
7450: PPUSH
7451: CALL_OW 59
// enable ( 7 ) ;
7455: LD_INT 7
7457: ENABLE_MARKED
// end ; end ;
7458: LD_VAR 0 6
7462: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
7463: LD_INT 0
7465: PPUSH
7466: PPUSH
// begin art := artefact_num [ size ] ;
7467: LD_ADDR_VAR 0 3
7471: PUSH
7472: LD_EXP 43
7476: PUSH
7477: LD_VAR 0 2
7481: ARRAY
7482: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7483: LD_ADDR_VAR 0 4
7487: PUSH
7488: LD_VAR 0 3
7492: PUSH
7493: LD_INT 1
7495: MINUS
7496: PUSH
7497: LD_INT 100
7499: MUL
7500: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
7501: LD_VAR 0 4
7505: PUSH
7506: LD_INT 9
7508: PLUS
7509: PPUSH
7510: LD_INT 0
7512: PPUSH
7513: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7517: LD_VAR 0 4
7521: PUSH
7522: LD_INT 13
7524: PLUS
7525: PPUSH
7526: LD_INT 0
7528: PPUSH
7529: CALL_OW 109
// Init_Lab ( art ) ;
7533: LD_VAR 0 3
7537: PPUSH
7538: CALL 9014 0 1
// end ;
7542: PPOPN 4
7544: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
7545: LD_INT 0
7547: PPUSH
7548: PPUSH
7549: PPUSH
// begin art := artefact_num [ size ] ;
7550: LD_ADDR_VAR 0 3
7554: PUSH
7555: LD_EXP 43
7559: PUSH
7560: LD_VAR 0 2
7564: ARRAY
7565: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7566: LD_ADDR_VAR 0 4
7570: PUSH
7571: LD_VAR 0 3
7575: PUSH
7576: LD_INT 1
7578: MINUS
7579: PUSH
7580: LD_INT 100
7582: MUL
7583: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
7584: LD_VAR 0 4
7588: PUSH
7589: LD_INT 9
7591: PLUS
7592: PPUSH
7593: LD_INT 1
7595: PPUSH
7596: CALL_OW 109
// SetTag ( base + 13 , un ) ;
7600: LD_VAR 0 4
7604: PUSH
7605: LD_INT 13
7607: PLUS
7608: PPUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: CALL_OW 109
// if GetTag ( base + 11 ) then
7618: LD_VAR 0 4
7622: PUSH
7623: LD_INT 11
7625: PLUS
7626: PPUSH
7627: CALL_OW 110
7631: IFFALSE 7794
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
7633: LD_ADDR_VAR 0 5
7637: PUSH
7638: LD_VAR 0 4
7642: PUSH
7643: LD_INT 11
7645: PLUS
7646: PPUSH
7647: CALL_OW 110
7651: PPUSH
7652: CALL_OW 255
7656: ST_TO_ADDR
// if GetTag ( base + 12 ) then
7657: LD_VAR 0 4
7661: PUSH
7662: LD_INT 12
7664: PLUS
7665: PPUSH
7666: CALL_OW 110
7670: IFFALSE 7738
// begin ComCancel ( GetTag ( base + 11 ) ) ;
7672: LD_VAR 0 4
7676: PUSH
7677: LD_INT 11
7679: PLUS
7680: PPUSH
7681: CALL_OW 110
7685: PPUSH
7686: CALL_OW 127
// wait ( 5 ) ;
7690: LD_INT 5
7692: PPUSH
7693: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
7697: LD_ADDR_EXP 45
7701: PUSH
7702: LD_EXP 45
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_INT 11
7714: PLUS
7715: PPUSH
7716: CALL_OW 110
7720: DIFF
7721: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
7722: LD_VAR 0 4
7726: PUSH
7727: LD_INT 12
7729: PLUS
7730: PPUSH
7731: LD_INT 0
7733: PPUSH
7734: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
7738: LD_VAR 0 4
7742: PUSH
7743: LD_VAR 0 5
7747: PUSH
7748: LD_INT 10
7750: MUL
7751: PLUS
7752: PUSH
7753: LD_INT 11
7755: PLUS
7756: PPUSH
7757: CALL_OW 110
7761: NOT
7762: IFFALSE 7778
// DeInit_Lab ( side , art ) ;
7764: LD_VAR 0 5
7768: PPUSH
7769: LD_VAR 0 3
7773: PPUSH
7774: CALL 9550 0 2
// SetTag ( base + 11 , 0 ) ;
7778: LD_VAR 0 4
7782: PUSH
7783: LD_INT 11
7785: PLUS
7786: PPUSH
7787: LD_INT 0
7789: PPUSH
7790: CALL_OW 109
// end ; end ;
7794: PPOPN 5
7796: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
7797: LD_INT 0
7799: PPUSH
7800: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7801: LD_ADDR_VAR 0 3
7805: PUSH
7806: LD_VAR 0 1
7810: PPUSH
7811: CALL_OW 255
7815: PUSH
7816: LD_INT 1
7818: MINUS
7819: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7820: LD_ADDR_VAR 0 2
7824: PUSH
7825: DOUBLE
7826: LD_INT 0
7828: DEC
7829: ST_TO_ADDR
7830: LD_EXP 42
7834: PUSH
7835: LD_INT 1
7837: MINUS
7838: PUSH
7839: FOR_TO
7840: IFFALSE 7882
// if lab = GetTag ( un * 100 + 11 ) then
7842: LD_VAR 0 1
7846: PUSH
7847: LD_VAR 0 2
7851: PUSH
7852: LD_INT 100
7854: MUL
7855: PUSH
7856: LD_INT 11
7858: PLUS
7859: PPUSH
7860: CALL_OW 110
7864: EQUAL
7865: IFFALSE 7880
// Init_Lab ( un + 1 ) ;
7867: LD_VAR 0 2
7871: PUSH
7872: LD_INT 1
7874: PLUS
7875: PPUSH
7876: CALL 9014 0 1
7880: GO 7839
7882: POP
7883: POP
// end ;
7884: PPOPN 3
7886: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
7887: LD_INT 0
7889: PPUSH
7890: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7891: LD_ADDR_VAR 0 4
7895: PUSH
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 255
7905: PUSH
7906: LD_INT 1
7908: MINUS
7909: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7910: LD_ADDR_VAR 0 3
7914: PUSH
7915: DOUBLE
7916: LD_INT 0
7918: DEC
7919: ST_TO_ADDR
7920: LD_EXP 42
7924: PUSH
7925: LD_INT 1
7927: MINUS
7928: PUSH
7929: FOR_TO
7930: IFFALSE 8048
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
7932: LD_VAR 0 3
7936: PUSH
7937: LD_INT 100
7939: MUL
7940: PUSH
7941: LD_INT 11
7943: PLUS
7944: PPUSH
7945: CALL_OW 110
7949: PUSH
7950: LD_VAR 0 1
7954: EQUAL
7955: PUSH
7956: LD_VAR 0 3
7960: PUSH
7961: LD_INT 100
7963: MUL
7964: PUSH
7965: LD_INT 12
7967: PLUS
7968: PPUSH
7969: CALL_OW 110
7973: AND
7974: IFFALSE 8046
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
7976: LD_VAR 0 3
7980: PUSH
7981: LD_INT 100
7983: MUL
7984: PUSH
7985: LD_VAR 0 4
7989: PUSH
7990: LD_INT 10
7992: MUL
7993: PLUS
7994: PUSH
7995: LD_INT 22
7997: PLUS
7998: PPUSH
7999: LD_VAR 0 2
8003: PPUSH
8004: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 100
8015: MUL
8016: PUSH
8017: LD_INT 12
8019: PLUS
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8028: LD_ADDR_EXP 45
8032: PUSH
8033: LD_EXP 45
8037: PUSH
8038: LD_VAR 0 1
8042: DIFF
8043: ST_TO_ADDR
// break ;
8044: GO 8048
// end ;
8046: GO 7929
8048: POP
8049: POP
// Update_Artefact ( lab ) ;
8050: LD_VAR 0 1
8054: PPUSH
8055: CALL 9689 0 1
// end ;
8059: PPOPN 4
8061: END
// on SpecResearchComplete ( lab ) do var un , side ;
8062: LD_INT 0
8064: PPUSH
8065: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8066: LD_ADDR_VAR 0 3
8070: PUSH
8071: LD_VAR 0 1
8075: PPUSH
8076: CALL_OW 255
8080: PUSH
8081: LD_INT 1
8083: MINUS
8084: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8085: LD_ADDR_VAR 0 2
8089: PUSH
8090: DOUBLE
8091: LD_INT 0
8093: DEC
8094: ST_TO_ADDR
8095: LD_EXP 42
8099: PUSH
8100: LD_INT 1
8102: MINUS
8103: PUSH
8104: FOR_TO
8105: IFFALSE 8251
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8107: LD_VAR 0 2
8111: PUSH
8112: LD_INT 100
8114: MUL
8115: PUSH
8116: LD_INT 11
8118: PLUS
8119: PPUSH
8120: CALL_OW 110
8124: PUSH
8125: LD_VAR 0 1
8129: EQUAL
8130: PUSH
8131: LD_VAR 0 2
8135: PUSH
8136: LD_INT 100
8138: MUL
8139: PUSH
8140: LD_INT 12
8142: PLUS
8143: PPUSH
8144: CALL_OW 110
8148: AND
8149: IFFALSE 8249
// begin SetTag ( un * 100 + 12 , false ) ;
8151: LD_VAR 0 2
8155: PUSH
8156: LD_INT 100
8158: MUL
8159: PUSH
8160: LD_INT 12
8162: PLUS
8163: PPUSH
8164: LD_INT 0
8166: PPUSH
8167: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
8171: LD_VAR 0 2
8175: PUSH
8176: LD_INT 100
8178: MUL
8179: PUSH
8180: LD_VAR 0 3
8184: PUSH
8185: LD_INT 10
8187: MUL
8188: PLUS
8189: PUSH
8190: LD_INT 21
8192: PLUS
8193: PPUSH
8194: LD_INT 1
8196: PPUSH
8197: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
8201: LD_VAR 0 2
8205: PUSH
8206: LD_INT 100
8208: MUL
8209: PUSH
8210: LD_VAR 0 3
8214: PUSH
8215: LD_INT 10
8217: MUL
8218: PLUS
8219: PUSH
8220: LD_INT 25
8222: PLUS
8223: PPUSH
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8233: LD_ADDR_EXP 45
8237: PUSH
8238: LD_EXP 45
8242: PUSH
8243: LD_VAR 0 1
8247: DIFF
8248: ST_TO_ADDR
// end ;
8249: GO 8104
8251: POP
8252: POP
// Update_Artefact ( lab ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: CALL 9689 0 1
// end ;
8262: PPOPN 3
8264: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
8265: LD_INT 0
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_VAR 0 2
8280: PUSH
8281: LD_INT 1
8283: MINUS
8284: PUSH
8285: LD_INT 3
8287: MOD
8288: PUSH
8289: LD_INT 1
8291: PLUS
8292: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8293: LD_ADDR_VAR 0 8
8297: PUSH
8298: LD_VAR 0 7
8302: PUSH
8303: LD_INT 1
8305: MINUS
8306: PUSH
8307: LD_INT 100
8309: MUL
8310: ST_TO_ADDR
// if number <= 3 then
8311: LD_VAR 0 2
8315: PUSH
8316: LD_INT 3
8318: LESSEQUAL
8319: IFFALSE 8551
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
8321: LD_VAR 0 8
8325: PUSH
8326: LD_INT 11
8328: PLUS
8329: PPUSH
8330: CALL_OW 110
8334: PPUSH
8335: LD_VAR 0 8
8339: PUSH
8340: LD_INT 5
8342: PLUS
8343: PPUSH
8344: CALL_OW 110
8348: PPUSH
8349: LD_INT 1
8351: PPUSH
8352: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
8356: LD_VAR 0 8
8360: PUSH
8361: LD_INT 11
8363: PLUS
8364: PPUSH
8365: CALL_OW 110
8369: PPUSH
8370: LD_VAR 0 8
8374: PUSH
8375: LD_VAR 0 1
8379: PUSH
8380: LD_INT 10
8382: MUL
8383: PLUS
8384: PUSH
8385: LD_INT 12
8387: PLUS
8388: PPUSH
8389: CALL_OW 110
8393: PPUSH
8394: CALL_OW 329
// SetTag ( base + 12 , true ) ;
8398: LD_VAR 0 8
8402: PUSH
8403: LD_INT 12
8405: PLUS
8406: PPUSH
8407: LD_INT 1
8409: PPUSH
8410: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
8414: LD_ADDR_EXP 45
8418: PUSH
8419: LD_EXP 45
8423: PUSH
8424: LD_VAR 0 8
8428: PUSH
8429: LD_INT 11
8431: PLUS
8432: PPUSH
8433: CALL_OW 110
8437: ADD
8438: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8439: LD_ADDR_VAR 0 5
8443: PUSH
8444: DOUBLE
8445: LD_INT 0
8447: DEC
8448: ST_TO_ADDR
8449: LD_EXP 42
8453: PUSH
8454: LD_INT 1
8456: MINUS
8457: PUSH
8458: FOR_TO
8459: IFFALSE 8547
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
8461: LD_VAR 0 8
8465: PUSH
8466: LD_INT 11
8468: PLUS
8469: PPUSH
8470: CALL_OW 110
8474: PUSH
8475: LD_VAR 0 5
8479: PUSH
8480: LD_INT 100
8482: MUL
8483: PUSH
8484: LD_INT 11
8486: PLUS
8487: PPUSH
8488: CALL_OW 110
8492: PUSH
8493: LD_VAR 0 5
8497: PUSH
8498: LD_INT 100
8500: MUL
8501: PUSH
8502: LD_VAR 0 1
8506: PUSH
8507: LD_INT 10
8509: MUL
8510: PLUS
8511: PUSH
8512: LD_INT 15
8514: PLUS
8515: PPUSH
8516: CALL_OW 110
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: IN
8525: IFFALSE 8545
// DeInit_Lab ( side , un + 1 ) ;
8527: LD_VAR 0 1
8531: PPUSH
8532: LD_VAR 0 5
8536: PUSH
8537: LD_INT 1
8539: PLUS
8540: PPUSH
8541: CALL 9550 0 2
8545: GO 8458
8547: POP
8548: POP
// end else
8549: GO 8725
// begin succes := false ;
8551: LD_ADDR_VAR 0 6
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// case art of 1 :
8559: LD_VAR 0 7
8563: PUSH
8564: LD_INT 1
8566: DOUBLE
8567: EQUAL
8568: IFTRUE 8572
8570: GO 8600
8572: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
8573: LD_ADDR_VAR 0 6
8577: PUSH
8578: LD_VAR 0 1
8582: PPUSH
8583: LD_VAR 0 3
8587: PPUSH
8588: LD_VAR 0 4
8592: PPUSH
8593: CALL 10122 0 3
8597: ST_TO_ADDR
8598: GO 8668
8600: LD_INT 2
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8631
8608: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_VAR 0 3
8623: PPUSH
8624: CALL 10360 0 2
8628: ST_TO_ADDR
8629: GO 8668
8631: LD_INT 3
8633: DOUBLE
8634: EQUAL
8635: IFTRUE 8639
8637: GO 8667
8639: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
8640: LD_ADDR_VAR 0 6
8644: PUSH
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_VAR 0 3
8654: PPUSH
8655: LD_VAR 0 4
8659: PPUSH
8660: CALL 10756 0 3
8664: ST_TO_ADDR
8665: GO 8668
8667: POP
// if succes then
8668: LD_VAR 0 6
8672: IFFALSE 8725
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
8674: LD_VAR 0 8
8678: PUSH
8679: LD_VAR 0 1
8683: PUSH
8684: LD_INT 10
8686: MUL
8687: PLUS
8688: PUSH
8689: LD_INT 13
8691: PLUS
8692: PPUSH
8693: LD_VAR 0 8
8697: PUSH
8698: LD_INT 7
8700: PLUS
8701: PPUSH
8702: CALL_OW 110
8706: PPUSH
8707: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_VAR 0 7
8720: PPUSH
8721: CALL 8728 0 2
// end ; end ; end ;
8725: PPOPN 8
8727: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
8728: LD_INT 0
8730: PPUSH
8731: PPUSH
8732: PPUSH
// base := ( art - 1 ) * 100 ;
8733: LD_ADDR_VAR 0 4
8737: PUSH
8738: LD_VAR 0 2
8742: PUSH
8743: LD_INT 1
8745: MINUS
8746: PUSH
8747: LD_INT 100
8749: MUL
8750: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8751: LD_ADDR_VAR 0 5
8755: PUSH
8756: LD_VAR 0 4
8760: PUSH
8761: LD_VAR 0 1
8765: PUSH
8766: LD_INT 10
8768: MUL
8769: PLUS
8770: PUSH
8771: LD_INT 15
8773: PLUS
8774: PPUSH
8775: CALL_OW 110
8779: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
8780: LD_VAR 0 5
8784: PUSH
8785: LD_VAR 0 5
8789: PUSH
8790: LD_EXP 45
8794: IN
8795: NOT
8796: AND
8797: IFFALSE 8855
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
8799: LD_VAR 0 1
8803: PPUSH
8804: LD_VAR 0 4
8808: PUSH
8809: LD_INT 1
8811: PLUS
8812: PUSH
8813: LD_VAR 0 4
8817: PUSH
8818: LD_VAR 0 1
8822: PUSH
8823: LD_INT 10
8825: MUL
8826: PLUS
8827: PUSH
8828: LD_INT 11
8830: PLUS
8831: PPUSH
8832: CALL_OW 110
8836: PLUS
8837: PPUSH
8838: CALL_OW 110
8842: PPUSH
8843: LD_INT 1
8845: PPUSH
8846: LD_VAR 0 5
8850: PPUSH
8851: CALL_OW 468
// end ;
8855: LD_VAR 0 3
8859: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
8860: LD_INT 0
8862: PPUSH
8863: PPUSH
8864: PPUSH
// base := ( art - 1 ) * 100 ;
8865: LD_ADDR_VAR 0 4
8869: PUSH
8870: LD_VAR 0 2
8874: PUSH
8875: LD_INT 1
8877: MINUS
8878: PUSH
8879: LD_INT 100
8881: MUL
8882: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8883: LD_ADDR_VAR 0 5
8887: PUSH
8888: LD_VAR 0 4
8892: PUSH
8893: LD_VAR 0 1
8897: PUSH
8898: LD_INT 10
8900: MUL
8901: PLUS
8902: PUSH
8903: LD_INT 15
8905: PLUS
8906: PPUSH
8907: CALL_OW 110
8911: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
8912: LD_VAR 0 5
8916: PUSH
8917: LD_VAR 0 5
8921: PUSH
8922: LD_EXP 45
8926: IN
8927: NOT
8928: AND
8929: PUSH
8930: LD_VAR 0 5
8934: PPUSH
8935: CALL_OW 313
8939: AND
8940: IFFALSE 9009
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
8942: LD_VAR 0 1
8946: PPUSH
8947: LD_VAR 0 4
8951: PUSH
8952: LD_INT 1
8954: PLUS
8955: PUSH
8956: LD_VAR 0 4
8960: PUSH
8961: LD_VAR 0 1
8965: PUSH
8966: LD_INT 10
8968: MUL
8969: PLUS
8970: PUSH
8971: LD_INT 11
8973: PLUS
8974: PPUSH
8975: CALL_OW 110
8979: PLUS
8980: PPUSH
8981: CALL_OW 110
8985: PPUSH
8986: LD_VAR 0 4
8990: PUSH
8991: LD_INT 3
8993: PLUS
8994: PPUSH
8995: CALL_OW 110
8999: PPUSH
9000: LD_VAR 0 5
9004: PPUSH
9005: CALL_OW 468
// end ;
9009: LD_VAR 0 3
9013: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9014: LD_INT 0
9016: PPUSH
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9024: LD_ADDR_VAR 0 8
9028: PUSH
9029: LD_EXP 44
9033: PUSH
9034: LD_VAR 0 1
9038: ARRAY
9039: PPUSH
9040: CALL_OW 469
9044: ST_TO_ADDR
// if not art_hex then
9045: LD_VAR 0 8
9049: NOT
9050: IFFALSE 9054
// exit ;
9052: GO 9545
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9054: LD_ADDR_VAR 0 3
9058: PUSH
9059: LD_INT 2
9061: PUSH
9062: LD_INT 30
9064: PUSH
9065: LD_INT 6
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 30
9074: PUSH
9075: LD_INT 7
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 30
9084: PUSH
9085: LD_INT 8
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: PUSH
9098: EMPTY
9099: LIST
9100: PPUSH
9101: CALL_OW 69
9105: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9106: LD_ADDR_VAR 0 9
9110: PUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: LD_VAR 0 8
9120: PUSH
9121: LD_INT 1
9123: ARRAY
9124: PPUSH
9125: LD_VAR 0 8
9129: PUSH
9130: LD_INT 2
9132: ARRAY
9133: PPUSH
9134: CALL_OW 73
9138: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9139: LD_ADDR_VAR 0 6
9143: PUSH
9144: LD_VAR 0 9
9148: PPUSH
9149: LD_VAR 0 8
9153: PUSH
9154: LD_INT 1
9156: ARRAY
9157: PPUSH
9158: LD_VAR 0 8
9162: PUSH
9163: LD_INT 2
9165: ARRAY
9166: PPUSH
9167: CALL_OW 297
9171: ST_TO_ADDR
// if dist < 9 then
9172: LD_VAR 0 6
9176: PUSH
9177: LD_INT 9
9179: LESS
9180: IFFALSE 9545
// begin side := GetSide ( nearest_lab ) ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: LD_VAR 0 9
9191: PPUSH
9192: CALL_OW 255
9196: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
9197: LD_VAR 0 4
9201: PPUSH
9202: LD_VAR 0 1
9206: PPUSH
9207: CALL 9550 0 2
// base := ( art - 1 ) * 100 ;
9211: LD_ADDR_VAR 0 5
9215: PUSH
9216: LD_VAR 0 1
9220: PUSH
9221: LD_INT 1
9223: MINUS
9224: PUSH
9225: LD_INT 100
9227: MUL
9228: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
9229: LD_INT 24
9231: PPUSH
9232: LD_VAR 0 4
9236: PPUSH
9237: CALL_OW 321
9241: PUSH
9242: LD_INT 2
9244: EQUAL
9245: PUSH
9246: LD_VAR 0 9
9250: PPUSH
9251: CALL_OW 313
9255: AND
9256: IFFALSE 9448
// begin if GetTag ( base + side * 10 + 11 ) then
9258: LD_VAR 0 5
9262: PUSH
9263: LD_VAR 0 4
9267: PUSH
9268: LD_INT 10
9270: MUL
9271: PLUS
9272: PUSH
9273: LD_INT 11
9275: PLUS
9276: PPUSH
9277: CALL_OW 110
9281: IFFALSE 9438
// begin if not GetTag ( base + side * 10 + 13 ) then
9283: LD_VAR 0 5
9287: PUSH
9288: LD_VAR 0 4
9292: PUSH
9293: LD_INT 10
9295: MUL
9296: PLUS
9297: PUSH
9298: LD_INT 13
9300: PLUS
9301: PPUSH
9302: CALL_OW 110
9306: NOT
9307: IFFALSE 9330
// state := GetTag ( base + 03 ) else
9309: LD_ADDR_VAR 0 7
9313: PUSH
9314: LD_VAR 0 5
9318: PUSH
9319: LD_INT 3
9321: PLUS
9322: PPUSH
9323: CALL_OW 110
9327: ST_TO_ADDR
9328: GO 9338
// state := art_gray ;
9330: LD_ADDR_VAR 0 7
9334: PUSH
9335: LD_INT 1
9337: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
9338: LD_VAR 0 5
9342: PUSH
9343: LD_VAR 0 4
9347: PUSH
9348: LD_INT 10
9350: MUL
9351: PLUS
9352: PUSH
9353: LD_INT 15
9355: PLUS
9356: PPUSH
9357: CALL_OW 110
9361: PUSH
9362: LD_VAR 0 5
9366: PUSH
9367: LD_VAR 0 4
9371: PUSH
9372: LD_INT 10
9374: MUL
9375: PLUS
9376: PUSH
9377: LD_INT 15
9379: PLUS
9380: PPUSH
9381: CALL_OW 110
9385: PUSH
9386: LD_VAR 0 9
9390: NONEQUAL
9391: AND
9392: IFFALSE 9408
// DeInit_Lab ( side , art ) ;
9394: LD_VAR 0 4
9398: PPUSH
9399: LD_VAR 0 1
9403: PPUSH
9404: CALL 9550 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
9408: LD_VAR 0 5
9412: PUSH
9413: LD_VAR 0 4
9417: PUSH
9418: LD_INT 10
9420: MUL
9421: PLUS
9422: PUSH
9423: LD_INT 15
9425: PLUS
9426: PPUSH
9427: LD_VAR 0 9
9431: PPUSH
9432: CALL_OW 109
// end else
9436: GO 9446
// state := art_instant ;
9438: LD_ADDR_VAR 0 7
9442: PUSH
9443: LD_INT 2
9445: ST_TO_ADDR
// end else
9446: GO 9456
// state := art_gray ;
9448: LD_ADDR_VAR 0 7
9452: PUSH
9453: LD_INT 1
9455: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
9456: LD_VAR 0 5
9460: PUSH
9461: LD_INT 11
9463: PLUS
9464: PPUSH
9465: LD_VAR 0 9
9469: PPUSH
9470: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
9474: LD_VAR 0 9
9478: PUSH
9479: LD_EXP 45
9483: IN
9484: NOT
9485: IFFALSE 9545
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
9487: LD_VAR 0 4
9491: PPUSH
9492: LD_VAR 0 5
9496: PUSH
9497: LD_INT 1
9499: PLUS
9500: PUSH
9501: LD_VAR 0 5
9505: PUSH
9506: LD_VAR 0 4
9510: PUSH
9511: LD_INT 10
9513: MUL
9514: PLUS
9515: PUSH
9516: LD_INT 11
9518: PLUS
9519: PPUSH
9520: CALL_OW 110
9524: PLUS
9525: PPUSH
9526: CALL_OW 110
9530: PPUSH
9531: LD_VAR 0 7
9535: PPUSH
9536: LD_VAR 0 9
9540: PPUSH
9541: CALL_OW 468
// end ; end ;
9545: LD_VAR 0 2
9549: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
9550: LD_INT 0
9552: PPUSH
9553: PPUSH
9554: PPUSH
// base := ( art - 1 ) * 100 ;
9555: LD_ADDR_VAR 0 4
9559: PUSH
9560: LD_VAR 0 2
9564: PUSH
9565: LD_INT 1
9567: MINUS
9568: PUSH
9569: LD_INT 100
9571: MUL
9572: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9573: LD_ADDR_VAR 0 5
9577: PUSH
9578: LD_VAR 0 4
9582: PUSH
9583: LD_VAR 0 1
9587: PUSH
9588: LD_INT 10
9590: MUL
9591: PLUS
9592: PUSH
9593: LD_INT 15
9595: PLUS
9596: PPUSH
9597: CALL_OW 110
9601: ST_TO_ADDR
// if not lab then
9602: LD_VAR 0 5
9606: NOT
9607: IFFALSE 9628
// lab := GetTag ( base + 11 ) ;
9609: LD_ADDR_VAR 0 5
9613: PUSH
9614: LD_VAR 0 4
9618: PUSH
9619: LD_INT 11
9621: PLUS
9622: PPUSH
9623: CALL_OW 110
9627: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
9628: LD_VAR 0 1
9632: PPUSH
9633: LD_VAR 0 4
9637: PUSH
9638: LD_INT 1
9640: PLUS
9641: PUSH
9642: LD_VAR 0 4
9646: PUSH
9647: LD_VAR 0 1
9651: PUSH
9652: LD_INT 10
9654: MUL
9655: PLUS
9656: PUSH
9657: LD_INT 11
9659: PLUS
9660: PPUSH
9661: CALL_OW 110
9665: PLUS
9666: PPUSH
9667: CALL_OW 110
9671: PPUSH
9672: LD_INT 0
9674: PPUSH
9675: LD_VAR 0 5
9679: PPUSH
9680: CALL_OW 468
// end ;
9684: LD_VAR 0 3
9688: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
9689: LD_INT 0
9691: PPUSH
9692: PPUSH
9693: PPUSH
9694: PPUSH
// side := GetSide ( lab ) ;
9695: LD_ADDR_VAR 0 4
9699: PUSH
9700: LD_VAR 0 1
9704: PPUSH
9705: CALL_OW 255
9709: ST_TO_ADDR
// for art = 1 to artefact_number do
9710: LD_ADDR_VAR 0 3
9714: PUSH
9715: DOUBLE
9716: LD_INT 1
9718: DEC
9719: ST_TO_ADDR
9720: LD_EXP 42
9724: PUSH
9725: FOR_TO
9726: IFFALSE 9882
// begin base := ( art - 1 ) * 100 ;
9728: LD_ADDR_VAR 0 5
9732: PUSH
9733: LD_VAR 0 3
9737: PUSH
9738: LD_INT 1
9740: MINUS
9741: PUSH
9742: LD_INT 100
9744: MUL
9745: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
9746: LD_VAR 0 5
9750: PUSH
9751: LD_INT 11
9753: PLUS
9754: PPUSH
9755: CALL_OW 110
9759: PUSH
9760: LD_VAR 0 1
9764: EQUAL
9765: IFFALSE 9778
// Init_Lab ( art ) else
9767: LD_VAR 0 3
9771: PPUSH
9772: CALL 9014 0 1
9776: GO 9880
// begin if lab = GetTag ( base + side * 10 + 15 ) then
9778: LD_VAR 0 1
9782: PUSH
9783: LD_VAR 0 5
9787: PUSH
9788: LD_VAR 0 4
9792: PUSH
9793: LD_INT 10
9795: MUL
9796: PLUS
9797: PUSH
9798: LD_INT 15
9800: PLUS
9801: PPUSH
9802: CALL_OW 110
9806: EQUAL
9807: IFFALSE 9880
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
9809: LD_VAR 0 5
9813: PUSH
9814: LD_VAR 0 4
9818: PUSH
9819: LD_INT 10
9821: MUL
9822: PLUS
9823: PUSH
9824: LD_INT 13
9826: PLUS
9827: PPUSH
9828: CALL_OW 110
9832: PUSH
9833: LD_INT 0
9835: GREATER
9836: PUSH
9837: LD_VAR 0 1
9841: PPUSH
9842: CALL_OW 313
9846: NOT
9847: OR
9848: IFFALSE 9866
// Shadow_Artefact ( side , art ) else
9850: LD_VAR 0 4
9854: PPUSH
9855: LD_VAR 0 3
9859: PPUSH
9860: CALL 8728 0 2
9864: GO 9880
// Highlight_Artefact ( side , art ) ;
9866: LD_VAR 0 4
9870: PPUSH
9871: LD_VAR 0 3
9875: PPUSH
9876: CALL 8860 0 2
// end ; end ; end ;
9880: GO 9725
9882: POP
9883: POP
// end ; end_of_file
9884: LD_VAR 0 2
9888: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
9889: LD_INT 10
9891: PPUSH
9892: CALL_OW 67
// if not IsBusy ( lab ) then
9896: LD_VAR 0 2
9900: PPUSH
9901: CALL_OW 315
9905: NOT
9906: IFFALSE 9933
// begin labs_in_use := labs_in_use diff lab ;
9908: LD_ADDR_EXP 45
9912: PUSH
9913: LD_EXP 45
9917: PUSH
9918: LD_VAR 0 2
9922: DIFF
9923: ST_TO_ADDR
// Update_Artefact ( lab ) ;
9924: LD_VAR 0 2
9928: PPUSH
9929: CALL 9689 0 1
// end ; end ;
9933: PPOPN 2
9935: END
// on ResearchStarted ( tech , lab ) do var un , side ;
9936: LD_INT 0
9938: PPUSH
9939: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
9940: LD_ADDR_EXP 45
9944: PUSH
9945: LD_EXP 45
9949: PUSH
9950: LD_VAR 0 2
9954: ADD
9955: ST_TO_ADDR
// side := GetSide ( lab ) ;
9956: LD_ADDR_VAR 0 4
9960: PUSH
9961: LD_VAR 0 2
9965: PPUSH
9966: CALL_OW 255
9970: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9971: LD_ADDR_VAR 0 3
9975: PUSH
9976: DOUBLE
9977: LD_INT 0
9979: DEC
9980: ST_TO_ADDR
9981: LD_EXP 42
9985: PUSH
9986: LD_INT 1
9988: MINUS
9989: PUSH
9990: FOR_TO
9991: IFFALSE 10070
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9993: LD_VAR 0 2
9997: PUSH
9998: LD_VAR 0 3
10002: PUSH
10003: LD_INT 100
10005: MUL
10006: PUSH
10007: LD_INT 11
10009: PLUS
10010: PPUSH
10011: CALL_OW 110
10015: PUSH
10016: LD_VAR 0 3
10020: PUSH
10021: LD_INT 100
10023: MUL
10024: PUSH
10025: LD_VAR 0 4
10029: PUSH
10030: LD_INT 10
10032: MUL
10033: PLUS
10034: PUSH
10035: LD_INT 15
10037: PLUS
10038: PPUSH
10039: CALL_OW 110
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: IN
10048: IFFALSE 10068
// DeInit_Lab ( side , un + 1 ) ;
10050: LD_VAR 0 4
10054: PPUSH
10055: LD_VAR 0 3
10059: PUSH
10060: LD_INT 1
10062: PLUS
10063: PPUSH
10064: CALL 9550 0 2
10068: GO 9990
10070: POP
10071: POP
// end ;
10072: PPOPN 4
10074: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10075: LD_INT 10
10077: PPUSH
10078: CALL_OW 67
// if not IsBusy ( lab ) then
10082: LD_VAR 0 2
10086: PPUSH
10087: CALL_OW 315
10091: NOT
10092: IFFALSE 10119
// begin labs_in_use := labs_in_use diff lab ;
10094: LD_ADDR_EXP 45
10098: PUSH
10099: LD_EXP 45
10103: PUSH
10104: LD_VAR 0 2
10108: DIFF
10109: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10110: LD_VAR 0 2
10114: PPUSH
10115: CALL 9689 0 1
// end ; end ; end_of_file
10119: PPOPN 2
10121: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10122: LD_INT 0
10124: PPUSH
10125: PPUSH
10126: PPUSH
// vysledek := true ;
10127: LD_ADDR_VAR 0 5
10131: PUSH
10132: LD_INT 1
10134: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
10135: LD_ADDR_VAR 0 6
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: LD_INT 10
10147: MUL
10148: PUSH
10149: LD_INT 15
10151: PLUS
10152: PPUSH
10153: CALL_OW 110
10157: PPUSH
10158: CALL_OW 274
10162: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
10163: LD_VAR 0 6
10167: PUSH
10168: LD_VAR 0 6
10172: PPUSH
10173: CALL_OW 279
10177: PUSH
10178: LD_INT 3
10180: ARRAY
10181: PUSH
10182: LD_INT 6
10184: PPUSH
10185: CALL_OW 110
10189: GREATEREQUAL
10190: AND
10191: IFFALSE 10281
// begin PlaceSeeing ( x , y , side , - 15 ) ;
10193: LD_VAR 0 2
10197: PPUSH
10198: LD_VAR 0 3
10202: PPUSH
10203: LD_VAR 0 1
10207: PPUSH
10208: LD_INT 15
10210: NEG
10211: PPUSH
10212: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
10216: LD_VAR 0 6
10220: PPUSH
10221: LD_INT 3
10223: PPUSH
10224: LD_VAR 0 6
10228: PPUSH
10229: CALL_OW 279
10233: PUSH
10234: LD_INT 3
10236: ARRAY
10237: PUSH
10238: LD_INT 6
10240: PPUSH
10241: CALL_OW 110
10245: MINUS
10246: PPUSH
10247: CALL_OW 277
// view_data := [ x , y , side ] ;
10251: LD_ADDR_LOC 9
10255: PUSH
10256: LD_VAR 0 2
10260: PUSH
10261: LD_VAR 0 3
10265: PUSH
10266: LD_VAR 0 1
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: ST_TO_ADDR
// enable ( 1 ) ;
10276: LD_INT 1
10278: ENABLE_MARKED
// end else
10279: GO 10289
// vysledek := false ;
10281: LD_ADDR_VAR 0 5
10285: PUSH
10286: LD_INT 0
10288: ST_TO_ADDR
// result := vysledek ;
10289: LD_ADDR_VAR 0 4
10293: PUSH
10294: LD_VAR 0 5
10298: ST_TO_ADDR
// end ;
10299: LD_VAR 0 4
10303: RET
// every 0 0$2 trigger view_data marked 1 do
10304: LD_LOC 9
10308: IFFALSE 10359
10310: GO 10312
10312: DISABLE
// begin wait ( 0 0$30 ) ;
10313: LD_INT 1050
10315: PPUSH
10316: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
10320: LD_LOC 9
10324: PUSH
10325: LD_INT 1
10327: ARRAY
10328: PPUSH
10329: LD_LOC 9
10333: PUSH
10334: LD_INT 2
10336: ARRAY
10337: PPUSH
10338: LD_LOC 9
10342: PUSH
10343: LD_INT 3
10345: ARRAY
10346: PPUSH
10347: CALL_OW 331
// view_data := 0 ;
10351: LD_ADDR_LOC 9
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// end ;
10359: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
10360: LD_INT 0
10362: PPUSH
10363: PPUSH
10364: PPUSH
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
// vysledek := true ;
10370: LD_ADDR_VAR 0 4
10374: PUSH
10375: LD_INT 1
10377: ST_TO_ADDR
// it_can := false ;
10378: LD_ADDR_VAR 0 8
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
10386: LD_ADDR_VAR 0 9
10390: PUSH
10391: LD_INT 30
10393: PUSH
10394: LD_INT 28
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
10401: LD_ADDR_VAR 0 10
10405: PUSH
10406: LD_INT 8
10408: PUSH
10409: LD_INT 48
10411: PUSH
10412: LD_INT 29
10414: PUSH
10415: LD_INT 49
10417: PUSH
10418: LD_INT 10
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
10428: LD_ADDR_VAR 0 7
10432: PUSH
10433: LD_VAR 0 2
10437: PPUSH
10438: CALL_OW 247
10442: PUSH
10443: LD_INT 3
10445: EQUAL
10446: PUSH
10447: LD_VAR 0 2
10451: PPUSH
10452: CALL_OW 266
10456: PUSH
10457: LD_VAR 0 9
10461: IN
10462: PUSH
10463: LD_VAR 0 2
10467: PPUSH
10468: CALL_OW 269
10472: PUSH
10473: LD_VAR 0 10
10477: IN
10478: OR
10479: AND
10480: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
10481: LD_ADDR_VAR 0 6
10485: PUSH
10486: LD_VAR 0 2
10490: PPUSH
10491: CALL_OW 247
10495: PUSH
10496: LD_INT 2
10498: EQUAL
10499: PUSH
10500: LD_VAR 0 2
10504: PPUSH
10505: CALL_OW 264
10509: PUSH
10510: LD_VAR 0 10
10514: IN
10515: PUSH
10516: LD_VAR 0 2
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_INT 3
10528: EQUAL
10529: OR
10530: AND
10531: ST_TO_ADDR
// case def_artefact_two of 1 :
10532: LD_EXP 2
10536: PUSH
10537: LD_INT 1
10539: DOUBLE
10540: EQUAL
10541: IFTRUE 10545
10543: GO 10562
10545: POP
// if b_can then
10546: LD_VAR 0 7
10550: IFFALSE 10560
// it_can := true ; 2 :
10552: LD_ADDR_VAR 0 8
10556: PUSH
10557: LD_INT 1
10559: ST_TO_ADDR
10560: GO 10619
10562: LD_INT 2
10564: DOUBLE
10565: EQUAL
10566: IFTRUE 10570
10568: GO 10587
10570: POP
// if v_can then
10571: LD_VAR 0 6
10575: IFFALSE 10585
// it_can := true ; 3 :
10577: LD_ADDR_VAR 0 8
10581: PUSH
10582: LD_INT 1
10584: ST_TO_ADDR
10585: GO 10619
10587: LD_INT 3
10589: DOUBLE
10590: EQUAL
10591: IFTRUE 10595
10593: GO 10618
10595: POP
// if b_can or v_can then
10596: LD_VAR 0 7
10600: PUSH
10601: LD_VAR 0 6
10605: OR
10606: IFFALSE 10616
// it_can := true ; end ;
10608: LD_ADDR_VAR 0 8
10612: PUSH
10613: LD_INT 1
10615: ST_TO_ADDR
10616: GO 10619
10618: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
10619: LD_ADDR_VAR 0 5
10623: PUSH
10624: LD_INT 100
10626: PUSH
10627: LD_VAR 0 1
10631: PUSH
10632: LD_INT 10
10634: MUL
10635: PLUS
10636: PUSH
10637: LD_INT 15
10639: PLUS
10640: PPUSH
10641: CALL_OW 110
10645: PPUSH
10646: CALL_OW 274
10650: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
10651: LD_VAR 0 5
10655: PUSH
10656: LD_VAR 0 8
10660: AND
10661: PUSH
10662: LD_VAR 0 5
10666: PPUSH
10667: CALL_OW 279
10671: PUSH
10672: LD_INT 3
10674: ARRAY
10675: PUSH
10676: LD_INT 106
10678: PPUSH
10679: CALL_OW 110
10683: GREATEREQUAL
10684: AND
10685: IFFALSE 10733
// begin KillUnit ( un ) ;
10687: LD_VAR 0 2
10691: PPUSH
10692: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
10696: LD_VAR 0 5
10700: PPUSH
10701: LD_INT 3
10703: PPUSH
10704: LD_VAR 0 5
10708: PPUSH
10709: CALL_OW 279
10713: PUSH
10714: LD_INT 3
10716: ARRAY
10717: PUSH
10718: LD_INT 106
10720: PPUSH
10721: CALL_OW 110
10725: MINUS
10726: PPUSH
10727: CALL_OW 277
// end else
10731: GO 10741
// vysledek := false ;
10733: LD_ADDR_VAR 0 4
10737: PUSH
10738: LD_INT 0
10740: ST_TO_ADDR
// result := vysledek ;
10741: LD_ADDR_VAR 0 3
10745: PUSH
10746: LD_VAR 0 4
10750: ST_TO_ADDR
// end ;
10751: LD_VAR 0 3
10755: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
10756: LD_INT 0
10758: PPUSH
10759: PPUSH
10760: PPUSH
10761: PPUSH
// vysledek := true ;
10762: LD_ADDR_VAR 0 5
10766: PUSH
10767: LD_INT 1
10769: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
10770: LD_ADDR_VAR 0 7
10774: PUSH
10775: LD_INT 200
10777: PUSH
10778: LD_VAR 0 1
10782: PUSH
10783: LD_INT 10
10785: MUL
10786: PLUS
10787: PUSH
10788: LD_INT 15
10790: PLUS
10791: PPUSH
10792: CALL_OW 110
10796: PPUSH
10797: CALL_OW 274
10801: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
10802: LD_VAR 0 7
10806: PUSH
10807: LD_VAR 0 7
10811: PPUSH
10812: CALL_OW 279
10816: PUSH
10817: LD_INT 3
10819: ARRAY
10820: PUSH
10821: LD_INT 206
10823: PPUSH
10824: CALL_OW 110
10828: GREATEREQUAL
10829: AND
10830: IFFALSE 10886
// begin ArtContamination ( p1 , p2 , 15 ) ;
10832: LD_VAR 0 2
10836: PPUSH
10837: LD_VAR 0 3
10841: PPUSH
10842: LD_INT 15
10844: PPUSH
10845: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
10849: LD_VAR 0 7
10853: PPUSH
10854: LD_INT 3
10856: PPUSH
10857: LD_VAR 0 7
10861: PPUSH
10862: CALL_OW 279
10866: PUSH
10867: LD_INT 3
10869: ARRAY
10870: PUSH
10871: LD_INT 206
10873: PPUSH
10874: CALL_OW 110
10878: MINUS
10879: PPUSH
10880: CALL_OW 277
// end else
10884: GO 10894
// vysledek := false ;
10886: LD_ADDR_VAR 0 5
10890: PUSH
10891: LD_INT 0
10893: ST_TO_ADDR
// result := vysledek ;
10894: LD_ADDR_VAR 0 4
10898: PUSH
10899: LD_VAR 0 5
10903: ST_TO_ADDR
// end ;
10904: LD_VAR 0 4
10908: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
10909: GO 10911
10911: DISABLE
10912: LD_INT 0
10914: PPUSH
10915: PPUSH
10916: PPUSH
// begin for art = 0 to artefact_number do
10917: LD_ADDR_VAR 0 1
10921: PUSH
10922: DOUBLE
10923: LD_INT 0
10925: DEC
10926: ST_TO_ADDR
10927: LD_EXP 42
10931: PUSH
10932: FOR_TO
10933: IFFALSE 11067
// for side = 1 to Side_Positions do
10935: LD_ADDR_VAR 0 2
10939: PUSH
10940: DOUBLE
10941: LD_INT 1
10943: DEC
10944: ST_TO_ADDR
10945: LD_EXP 23
10949: PUSH
10950: FOR_TO
10951: IFFALSE 11063
// begin recharge := art * 100 + side * 10 + 13 ;
10953: LD_ADDR_VAR 0 3
10957: PUSH
10958: LD_VAR 0 1
10962: PUSH
10963: LD_INT 100
10965: MUL
10966: PUSH
10967: LD_VAR 0 2
10971: PUSH
10972: LD_INT 10
10974: MUL
10975: PLUS
10976: PUSH
10977: LD_INT 13
10979: PLUS
10980: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
10981: LD_EXP 23
10985: PUSH
10986: LD_VAR 0 2
10990: ARRAY
10991: PUSH
10992: LD_VAR 0 3
10996: PPUSH
10997: CALL_OW 110
11001: PUSH
11002: LD_INT 0
11004: GREATER
11005: AND
11006: IFFALSE 11061
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11008: LD_VAR 0 3
11012: PPUSH
11013: LD_VAR 0 3
11017: PPUSH
11018: CALL_OW 110
11022: PUSH
11023: LD_INT 1
11025: MINUS
11026: PPUSH
11027: CALL_OW 109
// if not GetTag ( recharge ) then
11031: LD_VAR 0 3
11035: PPUSH
11036: CALL_OW 110
11040: NOT
11041: IFFALSE 11061
// Highlight_Artefact ( side , art + 1 ) ;
11043: LD_VAR 0 2
11047: PPUSH
11048: LD_VAR 0 1
11052: PUSH
11053: LD_INT 1
11055: PLUS
11056: PPUSH
11057: CALL 8860 0 2
// end ; end ;
11061: GO 10950
11063: POP
11064: POP
11065: GO 10932
11067: POP
11068: POP
// enable ;
11069: ENABLE
// end ; end_of_file
11070: PPOPN 3
11072: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11073: LD_INT 0
11075: PPUSH
11076: PPUSH
11077: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11078: LD_INT 18
11080: PPUSH
11081: LD_VAR 0 1
11085: PUSH
11086: LD_INT 1
11088: ARRAY
11089: PPUSH
11090: LD_VAR 0 1
11094: PUSH
11095: LD_INT 2
11097: ARRAY
11098: PPUSH
11099: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11103: LD_VAR 0 1
11107: PUSH
11108: LD_INT 1
11110: ARRAY
11111: PPUSH
11112: LD_VAR 0 1
11116: PUSH
11117: LD_INT 2
11119: ARRAY
11120: PPUSH
11121: CALL_OW 494
// Wait ( 30 ) ;
11125: LD_INT 30
11127: PPUSH
11128: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
11132: LD_INT 18
11134: PPUSH
11135: LD_INT 4
11137: PPUSH
11138: CALL_OW 286
// base := ( art - 1 ) * 100 ;
11142: LD_ADDR_VAR 0 4
11146: PUSH
11147: LD_VAR 0 2
11151: PUSH
11152: LD_INT 1
11154: MINUS
11155: PUSH
11156: LD_INT 100
11158: MUL
11159: ST_TO_ADDR
// if GetTag ( base + 11 ) then
11160: LD_VAR 0 4
11164: PUSH
11165: LD_INT 11
11167: PLUS
11168: PPUSH
11169: CALL_OW 110
11173: IFFALSE 11311
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
11175: LD_ADDR_VAR 0 5
11179: PUSH
11180: LD_VAR 0 4
11184: PUSH
11185: LD_INT 11
11187: PLUS
11188: PPUSH
11189: CALL_OW 110
11193: PPUSH
11194: CALL_OW 255
11198: ST_TO_ADDR
// if GetTag ( base + 12 ) then
11199: LD_VAR 0 4
11203: PUSH
11204: LD_INT 12
11206: PLUS
11207: PPUSH
11208: CALL_OW 110
11212: IFFALSE 11255
// begin ComCancel ( GetTag ( base + 11 ) ) ;
11214: LD_VAR 0 4
11218: PUSH
11219: LD_INT 11
11221: PLUS
11222: PPUSH
11223: CALL_OW 110
11227: PPUSH
11228: CALL_OW 127
// Wait ( 10 ) ;
11232: LD_INT 10
11234: PPUSH
11235: CALL_OW 67
// SetTag ( base + 12 , false ) ;
11239: LD_VAR 0 4
11243: PUSH
11244: LD_INT 12
11246: PLUS
11247: PPUSH
11248: LD_INT 0
11250: PPUSH
11251: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
11255: LD_VAR 0 4
11259: PUSH
11260: LD_VAR 0 5
11264: PUSH
11265: LD_INT 10
11267: MUL
11268: PLUS
11269: PUSH
11270: LD_INT 11
11272: PLUS
11273: PPUSH
11274: CALL_OW 110
11278: NOT
11279: IFFALSE 11295
// DeInit_Lab ( side , art ) ;
11281: LD_VAR 0 5
11285: PPUSH
11286: LD_VAR 0 2
11290: PPUSH
11291: CALL 9550 0 2
// SetTag ( base + 11 , 0 ) ;
11295: LD_VAR 0 4
11299: PUSH
11300: LD_INT 11
11302: PLUS
11303: PPUSH
11304: LD_INT 0
11306: PPUSH
11307: CALL_OW 109
// end ; end ;
11311: LD_VAR 0 3
11315: RET
// every 0 0$5 marked 5 do var hex , un ;
11316: GO 11318
11318: DISABLE
11319: LD_INT 0
11321: PPUSH
11322: PPUSH
// begin if GetTag ( 09 ) then
11323: LD_INT 9
11325: PPUSH
11326: CALL_OW 110
11330: IFFALSE 11369
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
11332: LD_ADDR_VAR 0 1
11336: PUSH
11337: LD_INT 13
11339: PPUSH
11340: CALL_OW 110
11344: PPUSH
11345: CALL_OW 250
11349: PUSH
11350: LD_INT 13
11352: PPUSH
11353: CALL_OW 110
11357: PPUSH
11358: CALL_OW 251
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: ST_TO_ADDR
11367: GO 11388
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
11369: LD_ADDR_VAR 0 1
11373: PUSH
11374: LD_EXP 44
11378: PUSH
11379: LD_INT 1
11381: ARRAY
11382: PPUSH
11383: CALL_OW 469
11387: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11388: LD_VAR 0 1
11392: PUSH
11393: LD_INT 1
11395: ARRAY
11396: PPUSH
11397: LD_VAR 0 1
11401: PUSH
11402: LD_INT 2
11404: ARRAY
11405: PPUSH
11406: LD_INT 16
11408: PPUSH
11409: CALL_OW 309
11413: NOT
11414: IFFALSE 11759
// begin wait ( 3 3$0 ) ;
11416: LD_INT 6300
11418: PPUSH
11419: CALL_OW 67
// if GetTag ( 09 ) then
11423: LD_INT 9
11425: PPUSH
11426: CALL_OW 110
11430: IFFALSE 11477
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
11432: LD_INT 13
11434: PPUSH
11435: CALL_OW 110
11439: PPUSH
11440: LD_INT 4
11442: PPUSH
11443: LD_EXP 44
11447: PUSH
11448: LD_INT 1
11450: ARRAY
11451: NEG
11452: PPUSH
11453: CALL_OW 290
// SetTag ( 09 , 0 ) ;
11457: LD_INT 9
11459: PPUSH
11460: LD_INT 0
11462: PPUSH
11463: CALL_OW 109
// SetTag ( 13 , 0 ) ;
11467: LD_INT 13
11469: PPUSH
11470: LD_INT 0
11472: PPUSH
11473: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 1 ] ) ;
11477: LD_ADDR_VAR 0 1
11481: PUSH
11482: LD_EXP 44
11486: PUSH
11487: LD_INT 1
11489: ARRAY
11490: PPUSH
11491: CALL_OW 469
11495: ST_TO_ADDR
// if not hex then
11496: LD_VAR 0 1
11500: NOT
11501: IFFALSE 11538
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
11503: LD_ADDR_VAR 0 1
11507: PUSH
11508: LD_INT 13
11510: PPUSH
11511: CALL_OW 110
11515: PPUSH
11516: CALL_OW 250
11520: PUSH
11521: LD_INT 13
11523: PPUSH
11524: CALL_OW 110
11528: PPUSH
11529: CALL_OW 251
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: ST_TO_ADDR
// DestroyArtefact ( hex , 1 ) ;
11538: LD_VAR 0 1
11542: PPUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL 11073 0 2
// wait ( 5 ) ;
11550: LD_INT 5
11552: PPUSH
11553: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: LD_INT 16
11564: PPUSH
11565: LD_INT 0
11567: PPUSH
11568: CALL_OW 16
11572: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11573: LD_ADDR_VAR 0 2
11577: PUSH
11578: LD_VAR 0 1
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: LD_VAR 0 1
11591: PUSH
11592: LD_INT 2
11594: ARRAY
11595: PPUSH
11596: CALL_OW 428
11600: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
11601: LD_VAR 0 2
11605: PUSH
11606: LD_INT 0
11608: GREATER
11609: PUSH
11610: LD_VAR 0 2
11614: PPUSH
11615: CALL_OW 247
11619: PUSH
11620: LD_INT 3
11622: EQUAL
11623: AND
11624: IFFALSE 11668
// begin KillUnit ( un ) ;
11626: LD_VAR 0 2
11630: PPUSH
11631: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
11635: LD_VAR 0 1
11639: PUSH
11640: LD_INT 1
11642: ARRAY
11643: PPUSH
11644: LD_VAR 0 1
11648: PUSH
11649: LD_INT 2
11651: ARRAY
11652: PPUSH
11653: CALL_OW 428
11657: IFFALSE 11668
// wait ( 10 ) ;
11659: LD_INT 10
11661: PPUSH
11662: CALL_OW 67
11666: GO 11635
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11668: LD_VAR 0 1
11672: PUSH
11673: LD_INT 1
11675: ARRAY
11676: PPUSH
11677: LD_VAR 0 1
11681: PUSH
11682: LD_INT 2
11684: ARRAY
11685: PPUSH
11686: CALL_OW 428
11690: NOT
11691: IFFALSE 11557
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11693: LD_VAR 0 1
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: LD_VAR 0 1
11706: PUSH
11707: LD_INT 2
11709: ARRAY
11710: PPUSH
11711: CALL_OW 494
// wait ( 30 ) ;
11715: LD_INT 30
11717: PPUSH
11718: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
11722: LD_INT 4
11724: PPUSH
11725: LD_EXP 44
11729: PUSH
11730: LD_INT 1
11732: ARRAY
11733: PPUSH
11734: LD_VAR 0 1
11738: PUSH
11739: LD_INT 1
11741: ARRAY
11742: PPUSH
11743: LD_VAR 0 1
11747: PUSH
11748: LD_INT 2
11750: ARRAY
11751: PPUSH
11752: LD_INT 0
11754: PPUSH
11755: CALL_OW 58
// end ; enable ;
11759: ENABLE
// end ;
11760: PPOPN 2
11762: END
// every 0 0$5 marked 6 do var hex , un ;
11763: GO 11765
11765: DISABLE
11766: LD_INT 0
11768: PPUSH
11769: PPUSH
// begin if GetTag ( 109 ) then
11770: LD_INT 109
11772: PPUSH
11773: CALL_OW 110
11777: IFFALSE 11816
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
11779: LD_ADDR_VAR 0 1
11783: PUSH
11784: LD_INT 113
11786: PPUSH
11787: CALL_OW 110
11791: PPUSH
11792: CALL_OW 250
11796: PUSH
11797: LD_INT 113
11799: PPUSH
11800: CALL_OW 110
11804: PPUSH
11805: CALL_OW 251
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: ST_TO_ADDR
11814: GO 11835
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
11816: LD_ADDR_VAR 0 1
11820: PUSH
11821: LD_EXP 44
11825: PUSH
11826: LD_INT 2
11828: ARRAY
11829: PPUSH
11830: CALL_OW 469
11834: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11835: LD_VAR 0 1
11839: PUSH
11840: LD_INT 1
11842: ARRAY
11843: PPUSH
11844: LD_VAR 0 1
11848: PUSH
11849: LD_INT 2
11851: ARRAY
11852: PPUSH
11853: LD_INT 16
11855: PPUSH
11856: CALL_OW 309
11860: NOT
11861: IFFALSE 12206
// begin wait ( 3 3$30 ) ;
11863: LD_INT 7350
11865: PPUSH
11866: CALL_OW 67
// if GetTag ( 109 ) then
11870: LD_INT 109
11872: PPUSH
11873: CALL_OW 110
11877: IFFALSE 11924
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 2 ] ) ;
11879: LD_INT 113
11881: PPUSH
11882: CALL_OW 110
11886: PPUSH
11887: LD_INT 4
11889: PPUSH
11890: LD_EXP 44
11894: PUSH
11895: LD_INT 2
11897: ARRAY
11898: NEG
11899: PPUSH
11900: CALL_OW 290
// SetTag ( 109 , 0 ) ;
11904: LD_INT 109
11906: PPUSH
11907: LD_INT 0
11909: PPUSH
11910: CALL_OW 109
// SetTag ( 113 , 0 ) ;
11914: LD_INT 113
11916: PPUSH
11917: LD_INT 0
11919: PPUSH
11920: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 2 ] ) ;
11924: LD_ADDR_VAR 0 1
11928: PUSH
11929: LD_EXP 44
11933: PUSH
11934: LD_INT 2
11936: ARRAY
11937: PPUSH
11938: CALL_OW 469
11942: ST_TO_ADDR
// if not hex then
11943: LD_VAR 0 1
11947: NOT
11948: IFFALSE 11985
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
11950: LD_ADDR_VAR 0 1
11954: PUSH
11955: LD_INT 13
11957: PPUSH
11958: CALL_OW 110
11962: PPUSH
11963: CALL_OW 250
11967: PUSH
11968: LD_INT 13
11970: PPUSH
11971: CALL_OW 110
11975: PPUSH
11976: CALL_OW 251
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: ST_TO_ADDR
// DestroyArtefact ( hex , 2 ) ;
11985: LD_VAR 0 1
11989: PPUSH
11990: LD_INT 2
11992: PPUSH
11993: CALL 11073 0 2
// wait ( 5 ) ;
11997: LD_INT 5
11999: PPUSH
12000: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12004: LD_ADDR_VAR 0 1
12008: PUSH
12009: LD_INT 16
12011: PPUSH
12012: LD_INT 0
12014: PPUSH
12015: CALL_OW 16
12019: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12020: LD_ADDR_VAR 0 2
12024: PUSH
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_VAR 0 1
12038: PUSH
12039: LD_INT 2
12041: ARRAY
12042: PPUSH
12043: CALL_OW 428
12047: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12048: LD_VAR 0 2
12052: PUSH
12053: LD_INT 0
12055: GREATER
12056: PUSH
12057: LD_VAR 0 2
12061: PPUSH
12062: CALL_OW 247
12066: PUSH
12067: LD_INT 3
12069: EQUAL
12070: AND
12071: IFFALSE 12115
// begin KillUnit ( un ) ;
12073: LD_VAR 0 2
12077: PPUSH
12078: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12082: LD_VAR 0 1
12086: PUSH
12087: LD_INT 1
12089: ARRAY
12090: PPUSH
12091: LD_VAR 0 1
12095: PUSH
12096: LD_INT 2
12098: ARRAY
12099: PPUSH
12100: CALL_OW 428
12104: IFFALSE 12115
// wait ( 10 ) ;
12106: LD_INT 10
12108: PPUSH
12109: CALL_OW 67
12113: GO 12082
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12115: LD_VAR 0 1
12119: PUSH
12120: LD_INT 1
12122: ARRAY
12123: PPUSH
12124: LD_VAR 0 1
12128: PUSH
12129: LD_INT 2
12131: ARRAY
12132: PPUSH
12133: CALL_OW 428
12137: NOT
12138: IFFALSE 12004
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12140: LD_VAR 0 1
12144: PUSH
12145: LD_INT 1
12147: ARRAY
12148: PPUSH
12149: LD_VAR 0 1
12153: PUSH
12154: LD_INT 2
12156: ARRAY
12157: PPUSH
12158: CALL_OW 494
// wait ( 30 ) ;
12162: LD_INT 30
12164: PPUSH
12165: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12169: LD_INT 4
12171: PPUSH
12172: LD_EXP 44
12176: PUSH
12177: LD_INT 2
12179: ARRAY
12180: PPUSH
12181: LD_VAR 0 1
12185: PUSH
12186: LD_INT 1
12188: ARRAY
12189: PPUSH
12190: LD_VAR 0 1
12194: PUSH
12195: LD_INT 2
12197: ARRAY
12198: PPUSH
12199: LD_INT 0
12201: PPUSH
12202: CALL_OW 58
// end ; enable ;
12206: ENABLE
// end ;
12207: PPOPN 2
12209: END
// every 0 0$5 marked 7 do var hex , un ;
12210: GO 12212
12212: DISABLE
12213: LD_INT 0
12215: PPUSH
12216: PPUSH
// begin if GetTag ( 209 ) then
12217: LD_INT 209
12219: PPUSH
12220: CALL_OW 110
12224: IFFALSE 12263
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12226: LD_ADDR_VAR 0 1
12230: PUSH
12231: LD_INT 213
12233: PPUSH
12234: CALL_OW 110
12238: PPUSH
12239: CALL_OW 250
12243: PUSH
12244: LD_INT 213
12246: PPUSH
12247: CALL_OW 110
12251: PPUSH
12252: CALL_OW 251
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: ST_TO_ADDR
12261: GO 12282
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
12263: LD_ADDR_VAR 0 1
12267: PUSH
12268: LD_EXP 44
12272: PUSH
12273: LD_INT 3
12275: ARRAY
12276: PPUSH
12277: CALL_OW 469
12281: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12282: LD_VAR 0 1
12286: PUSH
12287: LD_INT 1
12289: ARRAY
12290: PPUSH
12291: LD_VAR 0 1
12295: PUSH
12296: LD_INT 2
12298: ARRAY
12299: PPUSH
12300: LD_INT 16
12302: PPUSH
12303: CALL_OW 309
12307: NOT
12308: IFFALSE 12653
// begin wait ( 4 4$0 ) ;
12310: LD_INT 8400
12312: PPUSH
12313: CALL_OW 67
// if GetTag ( 209 ) then
12317: LD_INT 209
12319: PPUSH
12320: CALL_OW 110
12324: IFFALSE 12371
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 3 ] ) ;
12326: LD_INT 213
12328: PPUSH
12329: CALL_OW 110
12333: PPUSH
12334: LD_INT 4
12336: PPUSH
12337: LD_EXP 44
12341: PUSH
12342: LD_INT 3
12344: ARRAY
12345: NEG
12346: PPUSH
12347: CALL_OW 290
// SetTag ( 209 , 0 ) ;
12351: LD_INT 209
12353: PPUSH
12354: LD_INT 0
12356: PPUSH
12357: CALL_OW 109
// SetTag ( 213 , 0 ) ;
12361: LD_INT 213
12363: PPUSH
12364: LD_INT 0
12366: PPUSH
12367: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 3 ] ) ;
12371: LD_ADDR_VAR 0 1
12375: PUSH
12376: LD_EXP 44
12380: PUSH
12381: LD_INT 3
12383: ARRAY
12384: PPUSH
12385: CALL_OW 469
12389: ST_TO_ADDR
// if not hex then
12390: LD_VAR 0 1
12394: NOT
12395: IFFALSE 12432
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
12397: LD_ADDR_VAR 0 1
12401: PUSH
12402: LD_INT 13
12404: PPUSH
12405: CALL_OW 110
12409: PPUSH
12410: CALL_OW 250
12414: PUSH
12415: LD_INT 13
12417: PPUSH
12418: CALL_OW 110
12422: PPUSH
12423: CALL_OW 251
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: ST_TO_ADDR
// DestroyArtefact ( hex , 3 ) ;
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_INT 3
12439: PPUSH
12440: CALL 11073 0 2
// wait ( 5 ) ;
12444: LD_INT 5
12446: PPUSH
12447: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: LD_INT 16
12458: PPUSH
12459: LD_INT 0
12461: PPUSH
12462: CALL_OW 16
12466: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12467: LD_ADDR_VAR 0 2
12471: PUSH
12472: LD_VAR 0 1
12476: PUSH
12477: LD_INT 1
12479: ARRAY
12480: PPUSH
12481: LD_VAR 0 1
12485: PUSH
12486: LD_INT 2
12488: ARRAY
12489: PPUSH
12490: CALL_OW 428
12494: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12495: LD_VAR 0 2
12499: PUSH
12500: LD_INT 0
12502: GREATER
12503: PUSH
12504: LD_VAR 0 2
12508: PPUSH
12509: CALL_OW 247
12513: PUSH
12514: LD_INT 3
12516: EQUAL
12517: AND
12518: IFFALSE 12562
// begin KillUnit ( un ) ;
12520: LD_VAR 0 2
12524: PPUSH
12525: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12529: LD_VAR 0 1
12533: PUSH
12534: LD_INT 1
12536: ARRAY
12537: PPUSH
12538: LD_VAR 0 1
12542: PUSH
12543: LD_INT 2
12545: ARRAY
12546: PPUSH
12547: CALL_OW 428
12551: IFFALSE 12562
// wait ( 10 ) ;
12553: LD_INT 10
12555: PPUSH
12556: CALL_OW 67
12560: GO 12529
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12562: LD_VAR 0 1
12566: PUSH
12567: LD_INT 1
12569: ARRAY
12570: PPUSH
12571: LD_VAR 0 1
12575: PUSH
12576: LD_INT 2
12578: ARRAY
12579: PPUSH
12580: CALL_OW 428
12584: NOT
12585: IFFALSE 12451
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12587: LD_VAR 0 1
12591: PUSH
12592: LD_INT 1
12594: ARRAY
12595: PPUSH
12596: LD_VAR 0 1
12600: PUSH
12601: LD_INT 2
12603: ARRAY
12604: PPUSH
12605: CALL_OW 494
// wait ( 30 ) ;
12609: LD_INT 30
12611: PPUSH
12612: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12616: LD_INT 4
12618: PPUSH
12619: LD_EXP 44
12623: PUSH
12624: LD_INT 3
12626: ARRAY
12627: PPUSH
12628: LD_VAR 0 1
12632: PUSH
12633: LD_INT 1
12635: ARRAY
12636: PPUSH
12637: LD_VAR 0 1
12641: PUSH
12642: LD_INT 2
12644: ARRAY
12645: PPUSH
12646: LD_INT 0
12648: PPUSH
12649: CALL_OW 58
// end ; enable ;
12653: ENABLE
// end ; end_of_file
12654: PPOPN 2
12656: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
12657: LD_INT 0
12659: PPUSH
12660: PPUSH
// for un in battle_flags_id do
12661: LD_ADDR_VAR 0 2
12665: PUSH
12666: LD_EXP 33
12670: PUSH
12671: FOR_IN
12672: IFFALSE 12747
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
12674: LD_VAR 0 2
12678: PPUSH
12679: LD_INT 1
12681: PUSH
12682: LD_LOC 11
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 2
12693: PUSH
12694: LD_LOC 11
12698: PUSH
12699: LD_INT 2
12701: DIV
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 3
12709: PUSH
12710: LD_LOC 11
12714: PUSH
12715: LD_INT 5
12717: DIV
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 20
12725: PUSH
12726: LD_LOC 11
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 423
12745: GO 12671
12747: POP
12748: POP
// end ;
12749: LD_VAR 0 1
12753: RET
// every 0 0$0.1 do var un ;
12754: GO 12756
12756: DISABLE
12757: LD_INT 0
12759: PPUSH
// begin if not def_morale_flags then
12760: LD_EXP 56
12764: NOT
12765: IFFALSE 12769
// exit ;
12767: GO 12846
// if not morale_decreasing_time then
12769: LD_EXP 14
12773: NOT
12774: IFFALSE 12778
// exit ;
12776: GO 12846
// strength = 100 ;
12778: LD_ADDR_LOC 11
12782: PUSH
12783: LD_INT 100
12785: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
12786: LD_EXP 14
12790: PPUSH
12791: CALL_OW 67
// strength := strength - 1 ;
12795: LD_ADDR_LOC 11
12799: PUSH
12800: LD_LOC 11
12804: PUSH
12805: LD_INT 1
12807: MINUS
12808: ST_TO_ADDR
// Update_Flags ;
12809: CALL 12657 0 0
// until not strength ;
12813: LD_LOC 11
12817: NOT
12818: IFFALSE 12786
// for un in battle_flags_id do
12820: LD_ADDR_VAR 0 1
12824: PUSH
12825: LD_EXP 33
12829: PUSH
12830: FOR_IN
12831: IFFALSE 12844
// KillBattleFlag ( un ) ;
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 419
12842: GO 12830
12844: POP
12845: POP
// end ; end_of_file
12846: PPOPN 1
12848: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
12849: LD_INT 0
12851: PPUSH
12852: PPUSH
// if ( not IAmSpec ) then
12853: CALL_OW 531
12857: NOT
12858: IFFALSE 12874
// Result := Limits_Info ^  ;
12860: LD_ADDR_VAR 0 1
12864: PUSH
12865: LD_LOC 23
12869: PUSH
12870: LD_STRING 
12872: ADD
12873: ST_TO_ADDR
// for i := 1 to 8 do
12874: LD_ADDR_VAR 0 2
12878: PUSH
12879: DOUBLE
12880: LD_INT 1
12882: DEC
12883: ST_TO_ADDR
12884: LD_INT 8
12886: PUSH
12887: FOR_TO
12888: IFFALSE 12933
// if Cheaters [ i ] then
12890: LD_LOC 24
12894: PUSH
12895: LD_VAR 0 2
12899: ARRAY
12900: IFFALSE 12931
// Result := Result ^ [ #Cheater , i , i ] ;
12902: LD_ADDR_VAR 0 1
12906: PUSH
12907: LD_VAR 0 1
12911: PUSH
12912: LD_STRING #Cheater
12914: PUSH
12915: LD_VAR 0 2
12919: PUSH
12920: LD_VAR 0 2
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: ADD
12930: ST_TO_ADDR
12931: GO 12887
12933: POP
12934: POP
// end ;
12935: LD_VAR 0 1
12939: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
12940: LD_INT 0
12942: PPUSH
12943: PPUSH
12944: PPUSH
12945: PPUSH
12946: PPUSH
// case Game_Type of 10 :
12947: LD_EXP 46
12951: PUSH
12952: LD_INT 10
12954: DOUBLE
12955: EQUAL
12956: IFTRUE 12960
12958: GO 12971
12960: POP
// def_game_rules := 1 ; 11 :
12961: LD_ADDR_EXP 47
12965: PUSH
12966: LD_INT 1
12968: ST_TO_ADDR
12969: GO 12991
12971: LD_INT 11
12973: DOUBLE
12974: EQUAL
12975: IFTRUE 12979
12977: GO 12990
12979: POP
// def_game_rules := 3 ; end ;
12980: LD_ADDR_EXP 47
12984: PUSH
12985: LD_INT 3
12987: ST_TO_ADDR
12988: GO 12991
12990: POP
// case def_game_rules of 0 :
12991: LD_EXP 47
12995: PUSH
12996: LD_INT 0
12998: DOUBLE
12999: EQUAL
13000: IFTRUE 13004
13002: GO 13009
13004: POP
// exit ; 1 :
13005: GO 15067
13007: GO 14967
13009: LD_INT 1
13011: DOUBLE
13012: EQUAL
13013: IFTRUE 13017
13015: GO 13233
13017: POP
// begin def_base_level := 2 ;
13018: LD_ADDR_EXP 48
13022: PUSH
13023: LD_INT 2
13025: ST_TO_ADDR
// def_amount_of_people := 2 ;
13026: LD_ADDR_EXP 49
13030: PUSH
13031: LD_INT 2
13033: ST_TO_ADDR
// def_skill_level := 1 ;
13034: LD_ADDR_EXP 50
13038: PUSH
13039: LD_INT 1
13041: ST_TO_ADDR
// def_starting_resources := 2 ;
13042: LD_ADDR_EXP 51
13046: PUSH
13047: LD_INT 2
13049: ST_TO_ADDR
// def_shipments_density := 1 ;
13050: LD_ADDR_EXP 52
13054: PUSH
13055: LD_INT 1
13057: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13058: LD_ADDR_EXP 53
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13066: LD_ADDR_EXP 54
13070: PUSH
13071: LD_INT 1
13073: ST_TO_ADDR
// def_shared_vision := 1 ;
13074: LD_ADDR_EXP 55
13078: PUSH
13079: LD_INT 1
13081: ST_TO_ADDR
// def_morale_flags := 3 ;
13082: LD_ADDR_EXP 56
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// def_siberite_detection := 1 ;
13090: LD_ADDR_EXP 57
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// def_people_respawning := 1 ;
13098: LD_ADDR_EXP 58
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13106: LD_ADDR_EXP 59
13110: PUSH
13111: LD_INT 1
13113: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13114: LD_ADDR_EXP 60
13118: PUSH
13119: LD_INT 0
13121: ST_TO_ADDR
// def_builduptime := 2 ;
13122: LD_ADDR_EXP 61
13126: PUSH
13127: LD_INT 2
13129: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13130: LD_ADDR_VAR 0 2
13134: PUSH
13135: EMPTY
13136: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13137: LD_ADDR_VAR 0 3
13141: PUSH
13142: EMPTY
13143: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13144: LD_ADDR_LOC 18
13148: PUSH
13149: EMPTY
13150: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13151: LD_ADDR_LOC 19
13155: PUSH
13156: EMPTY
13157: ST_TO_ADDR
// Banned_Controls := [ ] ;
13158: LD_ADDR_LOC 20
13162: PUSH
13163: EMPTY
13164: ST_TO_ADDR
// Banned_Engines := [ ] ;
13165: LD_ADDR_LOC 21
13169: PUSH
13170: EMPTY
13171: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13172: LD_ADDR_LOC 16
13176: PUSH
13177: LD_INT 37
13179: PUSH
13180: EMPTY
13181: LIST
13182: PUSH
13183: LD_INT 4
13185: PUSH
13186: LD_INT 5
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 31
13195: PUSH
13196: LD_INT 32
13198: PUSH
13199: LD_INT 33
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
13212: LD_ADDR_LOC 17
13216: PUSH
13217: LD_INT 2
13219: PUSH
13220: LD_INT 2
13222: PUSH
13223: LD_INT 4
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: ST_TO_ADDR
// end ; 2 :
13231: GO 14967
13233: LD_INT 2
13235: DOUBLE
13236: EQUAL
13237: IFTRUE 13241
13239: GO 13450
13241: POP
// begin def_base_level := 1 ;
13242: LD_ADDR_EXP 48
13246: PUSH
13247: LD_INT 1
13249: ST_TO_ADDR
// def_amount_of_people := 2 ;
13250: LD_ADDR_EXP 49
13254: PUSH
13255: LD_INT 2
13257: ST_TO_ADDR
// def_skill_level := 3 ;
13258: LD_ADDR_EXP 50
13262: PUSH
13263: LD_INT 3
13265: ST_TO_ADDR
// def_starting_resources := 3 ;
13266: LD_ADDR_EXP 51
13270: PUSH
13271: LD_INT 3
13273: ST_TO_ADDR
// def_shipments_density := 2 ;
13274: LD_ADDR_EXP 52
13278: PUSH
13279: LD_INT 2
13281: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13282: LD_ADDR_EXP 53
13286: PUSH
13287: LD_INT 1
13289: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13290: LD_ADDR_EXP 54
13294: PUSH
13295: LD_INT 2
13297: ST_TO_ADDR
// def_shared_vision := 1 ;
13298: LD_ADDR_EXP 55
13302: PUSH
13303: LD_INT 1
13305: ST_TO_ADDR
// def_morale_flags := 0 ;
13306: LD_ADDR_EXP 56
13310: PUSH
13311: LD_INT 0
13313: ST_TO_ADDR
// def_siberite_detection := 1 ;
13314: LD_ADDR_EXP 57
13318: PUSH
13319: LD_INT 1
13321: ST_TO_ADDR
// def_people_respawning := 0 ;
13322: LD_ADDR_EXP 58
13326: PUSH
13327: LD_INT 0
13329: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13330: LD_ADDR_EXP 59
13334: PUSH
13335: LD_INT 0
13337: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13338: LD_ADDR_EXP 60
13342: PUSH
13343: LD_INT 0
13345: ST_TO_ADDR
// def_builduptime := 2 ;
13346: LD_ADDR_EXP 61
13350: PUSH
13351: LD_INT 2
13353: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13354: LD_ADDR_VAR 0 2
13358: PUSH
13359: LD_INT 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13365: LD_ADDR_VAR 0 3
13369: PUSH
13370: EMPTY
13371: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13372: LD_ADDR_LOC 18
13376: PUSH
13377: EMPTY
13378: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13379: LD_ADDR_LOC 19
13383: PUSH
13384: EMPTY
13385: ST_TO_ADDR
// Banned_Controls := [ ] ;
13386: LD_ADDR_LOC 20
13390: PUSH
13391: EMPTY
13392: ST_TO_ADDR
// Banned_Engines := [ ] ;
13393: LD_ADDR_LOC 21
13397: PUSH
13398: EMPTY
13399: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13400: LD_ADDR_LOC 16
13404: PUSH
13405: LD_INT 4
13407: PUSH
13408: LD_INT 5
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 31
13417: PUSH
13418: LD_INT 32
13420: PUSH
13421: LD_INT 33
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
13433: LD_ADDR_LOC 17
13437: PUSH
13438: LD_INT 1
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: ST_TO_ADDR
// end ; 3 :
13448: GO 14967
13450: LD_INT 3
13452: DOUBLE
13453: EQUAL
13454: IFTRUE 13458
13456: GO 13701
13458: POP
// begin def_base_level := 1 ;
13459: LD_ADDR_EXP 48
13463: PUSH
13464: LD_INT 1
13466: ST_TO_ADDR
// def_amount_of_people := 2 ;
13467: LD_ADDR_EXP 49
13471: PUSH
13472: LD_INT 2
13474: ST_TO_ADDR
// def_skill_level := 3 ;
13475: LD_ADDR_EXP 50
13479: PUSH
13480: LD_INT 3
13482: ST_TO_ADDR
// def_starting_resources := 3 ;
13483: LD_ADDR_EXP 51
13487: PUSH
13488: LD_INT 3
13490: ST_TO_ADDR
// def_shipments_density := 1 ;
13491: LD_ADDR_EXP 52
13495: PUSH
13496: LD_INT 1
13498: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13499: LD_ADDR_EXP 53
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13507: LD_ADDR_EXP 54
13511: PUSH
13512: LD_INT 1
13514: ST_TO_ADDR
// def_shared_vision := 1 ;
13515: LD_ADDR_EXP 55
13519: PUSH
13520: LD_INT 1
13522: ST_TO_ADDR
// def_morale_flags := 0 ;
13523: LD_ADDR_EXP 56
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// def_siberite_detection := 1 ;
13531: LD_ADDR_EXP 57
13535: PUSH
13536: LD_INT 1
13538: ST_TO_ADDR
// def_people_respawning := 0 ;
13539: LD_ADDR_EXP 58
13543: PUSH
13544: LD_INT 0
13546: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
13547: LD_ADDR_EXP 59
13551: PUSH
13552: LD_INT 2
13554: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13555: LD_ADDR_EXP 60
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// def_builduptime := 1 ;
13563: LD_ADDR_EXP 61
13567: PUSH
13568: LD_INT 1
13570: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
13571: LD_ADDR_VAR 0 2
13575: PUSH
13576: LD_INT 23
13578: PUSH
13579: EMPTY
13580: LIST
13581: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
13582: LD_ADDR_VAR 0 3
13586: PUSH
13587: LD_INT 2
13589: PUSH
13590: LD_INT 37
13592: PUSH
13593: LD_INT 32
13595: PUSH
13596: LD_INT 33
13598: PUSH
13599: LD_INT 36
13601: PUSH
13602: LD_INT 16
13604: PUSH
13605: LD_INT 23
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 18
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_INT 20
13619: PUSH
13620: LD_INT 19
13622: PUSH
13623: LD_INT 25
13625: PUSH
13626: LD_INT 17
13628: PUSH
13629: LD_INT 24
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13649: LD_ADDR_LOC 18
13653: PUSH
13654: EMPTY
13655: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13656: LD_ADDR_LOC 19
13660: PUSH
13661: EMPTY
13662: ST_TO_ADDR
// Banned_Controls := [ ] ;
13663: LD_ADDR_LOC 20
13667: PUSH
13668: EMPTY
13669: ST_TO_ADDR
// Banned_Engines := [ ] ;
13670: LD_ADDR_LOC 21
13674: PUSH
13675: EMPTY
13676: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13677: LD_ADDR_LOC 16
13681: PUSH
13682: EMPTY
13683: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13684: LD_ADDR_LOC 17
13688: PUSH
13689: EMPTY
13690: ST_TO_ADDR
// No_Mechs := true ;
13691: LD_ADDR_EXP 62
13695: PUSH
13696: LD_INT 1
13698: ST_TO_ADDR
// end ; 4 :
13699: GO 14967
13701: LD_INT 4
13703: DOUBLE
13704: EQUAL
13705: IFTRUE 13709
13707: GO 13884
13709: POP
// begin def_base_level := 1 ;
13710: LD_ADDR_EXP 48
13714: PUSH
13715: LD_INT 1
13717: ST_TO_ADDR
// def_amount_of_people := 2 ;
13718: LD_ADDR_EXP 49
13722: PUSH
13723: LD_INT 2
13725: ST_TO_ADDR
// def_skill_level := 3 ;
13726: LD_ADDR_EXP 50
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// def_starting_resources := 3 ;
13734: LD_ADDR_EXP 51
13738: PUSH
13739: LD_INT 3
13741: ST_TO_ADDR
// def_shipments_density := 2 ;
13742: LD_ADDR_EXP 52
13746: PUSH
13747: LD_INT 2
13749: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13750: LD_ADDR_EXP 53
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13758: LD_ADDR_EXP 54
13762: PUSH
13763: LD_INT 2
13765: ST_TO_ADDR
// def_shared_vision := 1 ;
13766: LD_ADDR_EXP 55
13770: PUSH
13771: LD_INT 1
13773: ST_TO_ADDR
// def_morale_flags := 0 ;
13774: LD_ADDR_EXP 56
13778: PUSH
13779: LD_INT 0
13781: ST_TO_ADDR
// def_siberite_detection := 1 ;
13782: LD_ADDR_EXP 57
13786: PUSH
13787: LD_INT 1
13789: ST_TO_ADDR
// def_people_respawning := 0 ;
13790: LD_ADDR_EXP 58
13794: PUSH
13795: LD_INT 0
13797: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13798: LD_ADDR_EXP 59
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// def_siberite_bomb := 1 ;
13806: LD_ADDR_EXP 60
13810: PUSH
13811: LD_INT 1
13813: ST_TO_ADDR
// def_builduptime := 3 ;
13814: LD_ADDR_EXP 61
13818: PUSH
13819: LD_INT 3
13821: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13822: LD_ADDR_VAR 0 2
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13833: LD_ADDR_VAR 0 3
13837: PUSH
13838: EMPTY
13839: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13840: LD_ADDR_LOC 18
13844: PUSH
13845: EMPTY
13846: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13847: LD_ADDR_LOC 19
13851: PUSH
13852: EMPTY
13853: ST_TO_ADDR
// Banned_Controls := [ ] ;
13854: LD_ADDR_LOC 20
13858: PUSH
13859: EMPTY
13860: ST_TO_ADDR
// Banned_Engines := [ ] ;
13861: LD_ADDR_LOC 21
13865: PUSH
13866: EMPTY
13867: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13868: LD_ADDR_LOC 16
13872: PUSH
13873: EMPTY
13874: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13875: LD_ADDR_LOC 17
13879: PUSH
13880: EMPTY
13881: ST_TO_ADDR
// end ; 5 :
13882: GO 14967
13884: LD_INT 5
13886: DOUBLE
13887: EQUAL
13888: IFTRUE 13892
13890: GO 14141
13892: POP
// begin def_base_level := 0 ;
13893: LD_ADDR_EXP 48
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// def_amount_of_people := 0 ;
13901: LD_ADDR_EXP 49
13905: PUSH
13906: LD_INT 0
13908: ST_TO_ADDR
// def_skill_level := 0 ;
13909: LD_ADDR_EXP 50
13913: PUSH
13914: LD_INT 0
13916: ST_TO_ADDR
// def_starting_resources := 0 ;
13917: LD_ADDR_EXP 51
13921: PUSH
13922: LD_INT 0
13924: ST_TO_ADDR
// def_shipments_density := 0 ;
13925: LD_ADDR_EXP 52
13929: PUSH
13930: LD_INT 0
13932: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13933: LD_ADDR_EXP 53
13937: PUSH
13938: LD_INT 0
13940: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
13941: LD_ADDR_EXP 54
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// def_shared_vision := 1 ;
13949: LD_ADDR_EXP 55
13953: PUSH
13954: LD_INT 1
13956: ST_TO_ADDR
// def_morale_flags := 0 ;
13957: LD_ADDR_EXP 56
13961: PUSH
13962: LD_INT 0
13964: ST_TO_ADDR
// def_siberite_detection := 0 ;
13965: LD_ADDR_EXP 57
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// def_people_respawning := 1 ;
13973: LD_ADDR_EXP 58
13977: PUSH
13978: LD_INT 1
13980: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13981: LD_ADDR_EXP 59
13985: PUSH
13986: LD_INT 1
13988: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13989: LD_ADDR_EXP 60
13993: PUSH
13994: LD_INT 0
13996: ST_TO_ADDR
// def_builduptime := 0 ;
13997: LD_ADDR_EXP 61
14001: PUSH
14002: LD_INT 0
14004: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
14005: LD_ADDR_VAR 0 2
14009: PUSH
14010: LD_INT 10
14012: PUSH
14013: LD_INT 3
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
14020: LD_ADDR_VAR 0 3
14024: PUSH
14025: LD_INT 12
14027: PUSH
14028: LD_INT 11
14030: PUSH
14031: LD_INT 14
14033: PUSH
14034: LD_INT 13
14036: PUSH
14037: LD_INT 5
14039: PUSH
14040: LD_INT 24
14042: PUSH
14043: LD_INT 21
14045: PUSH
14046: LD_INT 33
14048: PUSH
14049: LD_INT 36
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
14063: LD_ADDR_LOC 18
14067: PUSH
14068: LD_INT 31
14070: PUSH
14071: EMPTY
14072: LIST
14073: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14074: LD_ADDR_LOC 19
14078: PUSH
14079: EMPTY
14080: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
14081: LD_ADDR_LOC 20
14085: PUSH
14086: LD_INT 2
14088: PUSH
14089: EMPTY
14090: LIST
14091: ST_TO_ADDR
// Banned_Engines := [ ] ;
14092: LD_ADDR_LOC 21
14096: PUSH
14097: EMPTY
14098: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
14099: LD_ADDR_LOC 16
14103: PUSH
14104: LD_INT 4
14106: PUSH
14107: EMPTY
14108: LIST
14109: PUSH
14110: LD_INT 31
14112: PUSH
14113: LD_INT 32
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
14124: LD_ADDR_LOC 17
14128: PUSH
14129: LD_INT 1
14131: PUSH
14132: LD_INT 1
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: ST_TO_ADDR
// end ; 6 :
14139: GO 14967
14141: LD_INT 6
14143: DOUBLE
14144: EQUAL
14145: IFTRUE 14149
14147: GO 14352
14149: POP
// begin def_base_level := 1 ;
14150: LD_ADDR_EXP 48
14154: PUSH
14155: LD_INT 1
14157: ST_TO_ADDR
// def_amount_of_people := 2 ;
14158: LD_ADDR_EXP 49
14162: PUSH
14163: LD_INT 2
14165: ST_TO_ADDR
// def_skill_level := 3 ;
14166: LD_ADDR_EXP 50
14170: PUSH
14171: LD_INT 3
14173: ST_TO_ADDR
// def_starting_resources := 3 ;
14174: LD_ADDR_EXP 51
14178: PUSH
14179: LD_INT 3
14181: ST_TO_ADDR
// def_shipments_density := 1 ;
14182: LD_ADDR_EXP 52
14186: PUSH
14187: LD_INT 1
14189: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14190: LD_ADDR_EXP 53
14194: PUSH
14195: LD_INT 0
14197: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14198: LD_ADDR_EXP 54
14202: PUSH
14203: LD_INT 1
14205: ST_TO_ADDR
// def_shared_vision := 1 ;
14206: LD_ADDR_EXP 55
14210: PUSH
14211: LD_INT 1
14213: ST_TO_ADDR
// def_morale_flags := 0 ;
14214: LD_ADDR_EXP 56
14218: PUSH
14219: LD_INT 0
14221: ST_TO_ADDR
// def_siberite_detection := 1 ;
14222: LD_ADDR_EXP 57
14226: PUSH
14227: LD_INT 1
14229: ST_TO_ADDR
// def_people_respawning := 2 ;
14230: LD_ADDR_EXP 58
14234: PUSH
14235: LD_INT 2
14237: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14238: LD_ADDR_EXP 59
14242: PUSH
14243: LD_INT 1
14245: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14246: LD_ADDR_EXP 60
14250: PUSH
14251: LD_INT 0
14253: ST_TO_ADDR
// def_builduptime := 1 ;
14254: LD_ADDR_EXP 61
14258: PUSH
14259: LD_INT 1
14261: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14262: LD_ADDR_VAR 0 2
14266: PUSH
14267: LD_INT 23
14269: PUSH
14270: EMPTY
14271: LIST
14272: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
14273: LD_ADDR_VAR 0 3
14277: PUSH
14278: LD_INT 2
14280: PUSH
14281: LD_INT 37
14283: PUSH
14284: LD_INT 31
14286: PUSH
14287: LD_INT 32
14289: PUSH
14290: LD_INT 33
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14300: LD_ADDR_LOC 18
14304: PUSH
14305: EMPTY
14306: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14307: LD_ADDR_LOC 19
14311: PUSH
14312: EMPTY
14313: ST_TO_ADDR
// Banned_Controls := [ ] ;
14314: LD_ADDR_LOC 20
14318: PUSH
14319: EMPTY
14320: ST_TO_ADDR
// Banned_Engines := [ ] ;
14321: LD_ADDR_LOC 21
14325: PUSH
14326: EMPTY
14327: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14328: LD_ADDR_LOC 16
14332: PUSH
14333: EMPTY
14334: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14335: LD_ADDR_LOC 17
14339: PUSH
14340: EMPTY
14341: ST_TO_ADDR
// No_Mechs := true ;
14342: LD_ADDR_EXP 62
14346: PUSH
14347: LD_INT 1
14349: ST_TO_ADDR
// end ; 7 :
14350: GO 14967
14352: LD_INT 7
14354: DOUBLE
14355: EQUAL
14356: IFTRUE 14360
14358: GO 14558
14360: POP
// begin def_base_level := 1 ;
14361: LD_ADDR_EXP 48
14365: PUSH
14366: LD_INT 1
14368: ST_TO_ADDR
// def_amount_of_people := 2 ;
14369: LD_ADDR_EXP 49
14373: PUSH
14374: LD_INT 2
14376: ST_TO_ADDR
// def_skill_level := 3 ;
14377: LD_ADDR_EXP 50
14381: PUSH
14382: LD_INT 3
14384: ST_TO_ADDR
// def_starting_resources := 3 ;
14385: LD_ADDR_EXP 51
14389: PUSH
14390: LD_INT 3
14392: ST_TO_ADDR
// def_shipments_density := 1 ;
14393: LD_ADDR_EXP 52
14397: PUSH
14398: LD_INT 1
14400: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14401: LD_ADDR_EXP 53
14405: PUSH
14406: LD_INT 1
14408: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14409: LD_ADDR_EXP 54
14413: PUSH
14414: LD_INT 2
14416: ST_TO_ADDR
// def_shared_vision := 1 ;
14417: LD_ADDR_EXP 55
14421: PUSH
14422: LD_INT 1
14424: ST_TO_ADDR
// def_morale_flags := 0 ;
14425: LD_ADDR_EXP 56
14429: PUSH
14430: LD_INT 0
14432: ST_TO_ADDR
// def_siberite_detection := 1 ;
14433: LD_ADDR_EXP 57
14437: PUSH
14438: LD_INT 1
14440: ST_TO_ADDR
// def_people_respawning := 0 ;
14441: LD_ADDR_EXP 58
14445: PUSH
14446: LD_INT 0
14448: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14449: LD_ADDR_EXP 59
14453: PUSH
14454: LD_INT 1
14456: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14457: LD_ADDR_EXP 60
14461: PUSH
14462: LD_INT 0
14464: ST_TO_ADDR
// def_builduptime := 3 ;
14465: LD_ADDR_EXP 61
14469: PUSH
14470: LD_INT 3
14472: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: LD_INT 23
14480: PUSH
14481: EMPTY
14482: LIST
14483: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
14484: LD_ADDR_VAR 0 3
14488: PUSH
14489: LD_INT 37
14491: PUSH
14492: EMPTY
14493: LIST
14494: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14495: LD_ADDR_LOC 18
14499: PUSH
14500: EMPTY
14501: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14502: LD_ADDR_LOC 19
14506: PUSH
14507: EMPTY
14508: ST_TO_ADDR
// Banned_Controls := [ ] ;
14509: LD_ADDR_LOC 20
14513: PUSH
14514: EMPTY
14515: ST_TO_ADDR
// Banned_Engines := [ ] ;
14516: LD_ADDR_LOC 21
14520: PUSH
14521: EMPTY
14522: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14523: LD_ADDR_LOC 16
14527: PUSH
14528: LD_INT 31
14530: PUSH
14531: LD_INT 32
14533: PUSH
14534: LD_INT 33
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: PUSH
14542: EMPTY
14543: LIST
14544: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
14545: LD_ADDR_LOC 17
14549: PUSH
14550: LD_INT 10
14552: PUSH
14553: EMPTY
14554: LIST
14555: ST_TO_ADDR
// end ; 8 :
14556: GO 14967
14558: LD_INT 8
14560: DOUBLE
14561: EQUAL
14562: IFTRUE 14566
14564: GO 14966
14566: POP
// begin def_base_level := 0 ;
14567: LD_ADDR_EXP 48
14571: PUSH
14572: LD_INT 0
14574: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
14575: LD_ADDR_EXP 49
14579: PUSH
14580: LD_INT 0
14582: PPUSH
14583: LD_INT 1
14585: PPUSH
14586: CALL_OW 12
14590: ST_TO_ADDR
// def_skill_level := 0 ;
14591: LD_ADDR_EXP 50
14595: PUSH
14596: LD_INT 0
14598: ST_TO_ADDR
// def_starting_resources := 2 ;
14599: LD_ADDR_EXP 51
14603: PUSH
14604: LD_INT 2
14606: ST_TO_ADDR
// def_shipments_density := 1 ;
14607: LD_ADDR_EXP 52
14611: PUSH
14612: LD_INT 1
14614: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14615: LD_ADDR_EXP 53
14619: PUSH
14620: LD_INT 0
14622: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
14623: LD_ADDR_EXP 54
14627: PUSH
14628: LD_INT 0
14630: ST_TO_ADDR
// def_shared_vision := 1 ;
14631: LD_ADDR_EXP 55
14635: PUSH
14636: LD_INT 1
14638: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
14639: LD_ADDR_EXP 56
14643: PUSH
14644: LD_INT 0
14646: PPUSH
14647: LD_INT 2
14649: PPUSH
14650: CALL_OW 12
14654: ST_TO_ADDR
// def_siberite_detection := 0 ;
14655: LD_ADDR_EXP 57
14659: PUSH
14660: LD_INT 0
14662: ST_TO_ADDR
// def_people_respawning := 0 ;
14663: LD_ADDR_EXP 58
14667: PUSH
14668: LD_INT 0
14670: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14671: LD_ADDR_EXP 59
14675: PUSH
14676: LD_INT 2
14678: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14679: LD_ADDR_EXP 60
14683: PUSH
14684: LD_INT 0
14686: ST_TO_ADDR
// def_builduptime := 0 ;
14687: LD_ADDR_EXP 61
14691: PUSH
14692: LD_INT 0
14694: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
14695: LD_ADDR_VAR 0 2
14699: PUSH
14700: LD_INT 23
14702: PUSH
14703: LD_INT 20
14705: PUSH
14706: LD_INT 40
14708: PUSH
14709: LD_INT 47
14711: PUSH
14712: LD_INT 46
14714: PUSH
14715: LD_INT 39
14717: PUSH
14718: LD_INT 71
14720: PUSH
14721: LD_INT 34
14723: PUSH
14724: LD_INT 41
14726: PUSH
14727: LD_INT 44
14729: PUSH
14730: LD_INT 17
14732: PUSH
14733: LD_INT 16
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
14750: LD_ADDR_VAR 0 3
14754: PUSH
14755: LD_INT 37
14757: PUSH
14758: LD_INT 5
14760: PUSH
14761: LD_INT 13
14763: PUSH
14764: LD_INT 34
14766: PUSH
14767: LD_INT 12
14769: PUSH
14770: LD_INT 15
14772: PUSH
14773: LD_INT 11
14775: PUSH
14776: LD_INT 14
14778: PUSH
14779: LD_INT 29
14781: PUSH
14782: LD_INT 30
14784: PUSH
14785: LD_INT 28
14787: PUSH
14788: LD_INT 24
14790: PUSH
14791: LD_INT 25
14793: PUSH
14794: LD_INT 20
14796: PUSH
14797: LD_INT 21
14799: PUSH
14800: LD_INT 22
14802: PUSH
14803: LD_INT 36
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14825: LD_ADDR_LOC 18
14829: PUSH
14830: EMPTY
14831: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
14832: LD_ADDR_LOC 19
14836: PUSH
14837: LD_INT 14
14839: PUSH
14840: EMPTY
14841: LIST
14842: ST_TO_ADDR
// Banned_Controls := [ ] ;
14843: LD_ADDR_LOC 20
14847: PUSH
14848: EMPTY
14849: ST_TO_ADDR
// Banned_Engines := [ ] ;
14850: LD_ADDR_LOC 21
14854: PUSH
14855: EMPTY
14856: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
14857: LD_ADDR_LOC 16
14861: PUSH
14862: LD_INT 31
14864: PUSH
14865: LD_INT 32
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 4
14874: PUSH
14875: EMPTY
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
14882: LD_ADDR_LOC 17
14886: PUSH
14887: LD_INT 2
14889: PUSH
14890: LD_INT 1
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: ST_TO_ADDR
// for i := 1 to 8 do
14897: LD_ADDR_VAR 0 4
14901: PUSH
14902: DOUBLE
14903: LD_INT 1
14905: DEC
14906: ST_TO_ADDR
14907: LD_INT 8
14909: PUSH
14910: FOR_TO
14911: IFFALSE 14962
// if ( Side_Nations [ i ] = 3 ) then
14913: LD_EXP 24
14917: PUSH
14918: LD_VAR 0 4
14922: ARRAY
14923: PUSH
14924: LD_INT 3
14926: EQUAL
14927: IFFALSE 14960
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
14929: LD_ADDR_EXP 24
14933: PUSH
14934: LD_EXP 24
14938: PPUSH
14939: LD_VAR 0 4
14943: PPUSH
14944: LD_INT 1
14946: PPUSH
14947: LD_INT 2
14949: PPUSH
14950: CALL_OW 12
14954: PPUSH
14955: CALL_OW 1
14959: ST_TO_ADDR
14960: GO 14910
14962: POP
14963: POP
// end ; end ;
14964: GO 14967
14966: POP
// for i := 1 to 8 do
14967: LD_ADDR_VAR 0 4
14971: PUSH
14972: DOUBLE
14973: LD_INT 1
14975: DEC
14976: ST_TO_ADDR
14977: LD_INT 8
14979: PUSH
14980: FOR_TO
14981: IFFALSE 15065
// if Side_Positions [ i ] then
14983: LD_EXP 23
14987: PUSH
14988: LD_VAR 0 4
14992: ARRAY
14993: IFFALSE 15063
// begin for j in Unavailable_Techs do
14995: LD_ADDR_VAR 0 5
14999: PUSH
15000: LD_VAR 0 2
15004: PUSH
15005: FOR_IN
15006: IFFALSE 15027
// SetTech ( j , i , 0 ) ;
15008: LD_VAR 0 5
15012: PPUSH
15013: LD_VAR 0 4
15017: PPUSH
15018: LD_INT 0
15020: PPUSH
15021: CALL_OW 322
15025: GO 15005
15027: POP
15028: POP
// for j in Unavailable_Builds do
15029: LD_ADDR_VAR 0 5
15033: PUSH
15034: LD_VAR 0 3
15038: PUSH
15039: FOR_IN
15040: IFFALSE 15061
// SetRestrict ( j , i , 0 ) ;
15042: LD_VAR 0 5
15046: PPUSH
15047: LD_VAR 0 4
15051: PPUSH
15052: LD_INT 0
15054: PPUSH
15055: CALL_OW 324
15059: GO 15039
15061: POP
15062: POP
// end ;
15063: GO 14980
15065: POP
15066: POP
// end ;
15067: LD_VAR 0 1
15071: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
15072: LD_INT 0
15074: PPUSH
15075: PPUSH
15076: PPUSH
15077: PPUSH
15078: PPUSH
15079: PPUSH
15080: PPUSH
// for i := 1 to Restricted_Builds do
15081: LD_ADDR_VAR 0 2
15085: PUSH
15086: DOUBLE
15087: LD_INT 1
15089: DEC
15090: ST_TO_ADDR
15091: LD_LOC 16
15095: PUSH
15096: FOR_TO
15097: IFFALSE 15407
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
15099: LD_LOC 16
15103: PUSH
15104: LD_VAR 0 2
15108: ARRAY
15109: PUSH
15110: LD_INT 1
15112: ARRAY
15113: PUSH
15114: LD_INT 31
15116: DOUBLE
15117: EQUAL
15118: IFTRUE 15134
15120: LD_INT 32
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15134
15126: LD_INT 33
15128: DOUBLE
15129: EQUAL
15130: IFTRUE 15134
15132: GO 15145
15134: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
15135: LD_ADDR_VAR 0 6
15139: PUSH
15140: LD_STRING #Turrets
15142: ST_TO_ADDR
15143: GO 15190
15145: LD_INT 4
15147: DOUBLE
15148: EQUAL
15149: IFTRUE 15159
15151: LD_INT 5
15153: DOUBLE
15154: EQUAL
15155: IFTRUE 15159
15157: GO 15170
15159: POP
// btype := #Armouries ; b_Behemoth :
15160: LD_ADDR_VAR 0 6
15164: PUSH
15165: LD_STRING #Armouries
15167: ST_TO_ADDR
15168: GO 15190
15170: LD_INT 37
15172: DOUBLE
15173: EQUAL
15174: IFTRUE 15178
15176: GO 15189
15178: POP
// btype := #Behemoths ; end ;
15179: LD_ADDR_VAR 0 6
15183: PUSH
15184: LD_STRING #Behemoths
15186: ST_TO_ADDR
15187: GO 15190
15189: POP
// list := [ ] ;
15190: LD_ADDR_VAR 0 7
15194: PUSH
15195: EMPTY
15196: ST_TO_ADDR
// for j := 1 to 8 do
15197: LD_ADDR_VAR 0 3
15201: PUSH
15202: DOUBLE
15203: LD_INT 1
15205: DEC
15206: ST_TO_ADDR
15207: LD_INT 8
15209: PUSH
15210: FOR_TO
15211: IFFALSE 15304
// if Side_Positions [ j ] then
15213: LD_EXP 23
15217: PUSH
15218: LD_VAR 0 3
15222: ARRAY
15223: IFFALSE 15302
// begin amount := 0 ;
15225: LD_ADDR_VAR 0 5
15229: PUSH
15230: LD_INT 0
15232: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
15233: LD_ADDR_VAR 0 4
15237: PUSH
15238: LD_LOC 16
15242: PUSH
15243: LD_VAR 0 2
15247: ARRAY
15248: PUSH
15249: FOR_IN
15250: IFFALSE 15298
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
15252: LD_ADDR_VAR 0 5
15256: PUSH
15257: LD_VAR 0 5
15261: PUSH
15262: LD_INT 22
15264: PUSH
15265: LD_VAR 0 3
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 30
15276: PUSH
15277: LD_VAR 0 4
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PPUSH
15290: CALL_OW 69
15294: PLUS
15295: ST_TO_ADDR
15296: GO 15249
15298: POP
15299: POP
// break ;
15300: GO 15304
// end ;
15302: GO 15210
15304: POP
15305: POP
// list := [ ] ;
15306: LD_ADDR_VAR 0 7
15310: PUSH
15311: EMPTY
15312: ST_TO_ADDR
// for j := 1 to 8 do
15313: LD_ADDR_VAR 0 3
15317: PUSH
15318: DOUBLE
15319: LD_INT 1
15321: DEC
15322: ST_TO_ADDR
15323: LD_INT 8
15325: PUSH
15326: FOR_TO
15327: IFFALSE 15347
// list := list ^ amount ;
15329: LD_ADDR_VAR 0 7
15333: PUSH
15334: LD_VAR 0 7
15338: PUSH
15339: LD_VAR 0 5
15343: ADD
15344: ST_TO_ADDR
15345: GO 15326
15347: POP
15348: POP
// Already_Built := Already_Built ^ [ list ] ;
15349: LD_ADDR_LOC 22
15353: PUSH
15354: LD_LOC 22
15358: PUSH
15359: LD_VAR 0 7
15363: PUSH
15364: EMPTY
15365: LIST
15366: ADD
15367: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15368: LD_ADDR_LOC 23
15372: PUSH
15373: LD_LOC 23
15377: PUSH
15378: LD_VAR 0 6
15382: PUSH
15383: LD_VAR 0 5
15387: PUSH
15388: LD_LOC 17
15392: PUSH
15393: LD_VAR 0 2
15397: ARRAY
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: ADD
15404: ST_TO_ADDR
// end ;
15405: GO 15096
15407: POP
15408: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15409: LD_ADDR_LOC 24
15413: PUSH
15414: LD_INT 0
15416: PUSH
15417: LD_INT 0
15419: PUSH
15420: LD_INT 0
15422: PUSH
15423: LD_INT 0
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: LD_INT 0
15431: PUSH
15432: LD_INT 0
15434: PUSH
15435: LD_INT 0
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: ST_TO_ADDR
// if Limits_Info then
15448: LD_LOC 23
15452: IFFALSE 15468
// Limits_Info := #Limits ^ Limits_Info ;
15454: LD_ADDR_LOC 23
15458: PUSH
15459: LD_STRING #Limits
15461: PUSH
15462: LD_LOC 23
15466: ADD
15467: ST_TO_ADDR
// end ;
15468: LD_VAR 0 1
15472: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15473: LD_INT 0
15475: PPUSH
15476: PPUSH
15477: PPUSH
15478: PPUSH
// for i := 1 to Restricted_Builds do
15479: LD_ADDR_VAR 0 7
15483: PUSH
15484: DOUBLE
15485: LD_INT 1
15487: DEC
15488: ST_TO_ADDR
15489: LD_LOC 16
15493: PUSH
15494: FOR_TO
15495: IFFALSE 15918
// if BType in Restricted_Builds [ i ] then
15497: LD_VAR 0 2
15501: PUSH
15502: LD_LOC 16
15506: PUSH
15507: LD_VAR 0 7
15511: ARRAY
15512: IN
15513: IFFALSE 15916
// begin if old_side then
15515: LD_VAR 0 4
15519: IFFALSE 15645
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15521: LD_LOC 22
15525: PUSH
15526: LD_VAR 0 7
15530: ARRAY
15531: PUSH
15532: LD_VAR 0 3
15536: ARRAY
15537: PUSH
15538: LD_VAR 0 5
15542: PLUS
15543: PUSH
15544: LD_LOC 17
15548: PUSH
15549: LD_VAR 0 7
15553: ARRAY
15554: GREATER
15555: IFFALSE 15581
// begin SetSide ( un , old_side ) ;
15557: LD_VAR 0 1
15561: PPUSH
15562: LD_VAR 0 4
15566: PPUSH
15567: CALL_OW 235
// count := 0 ;
15571: LD_ADDR_VAR 0 5
15575: PUSH
15576: LD_INT 0
15578: ST_TO_ADDR
// end else
15579: GO 15645
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15581: LD_ADDR_LOC 22
15585: PUSH
15586: LD_LOC 22
15590: PPUSH
15591: LD_VAR 0 7
15595: PPUSH
15596: LD_LOC 22
15600: PUSH
15601: LD_VAR 0 7
15605: ARRAY
15606: PPUSH
15607: LD_VAR 0 4
15611: PPUSH
15612: LD_LOC 22
15616: PUSH
15617: LD_VAR 0 7
15621: ARRAY
15622: PUSH
15623: LD_VAR 0 4
15627: ARRAY
15628: PUSH
15629: LD_VAR 0 5
15633: MINUS
15634: PPUSH
15635: CALL_OW 1
15639: PPUSH
15640: CALL_OW 1
15644: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15645: LD_ADDR_LOC 22
15649: PUSH
15650: LD_LOC 22
15654: PPUSH
15655: LD_VAR 0 7
15659: PPUSH
15660: LD_LOC 22
15664: PUSH
15665: LD_VAR 0 7
15669: ARRAY
15670: PPUSH
15671: LD_VAR 0 3
15675: PPUSH
15676: LD_LOC 22
15680: PUSH
15681: LD_VAR 0 7
15685: ARRAY
15686: PUSH
15687: LD_VAR 0 3
15691: ARRAY
15692: PUSH
15693: LD_VAR 0 5
15697: PLUS
15698: PPUSH
15699: CALL_OW 1
15703: PPUSH
15704: CALL_OW 1
15708: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15709: LD_VAR 0 5
15713: PUSH
15714: LD_INT 0
15716: NONEQUAL
15717: PUSH
15718: LD_VAR 0 3
15722: PUSH
15723: LD_OWVAR 2
15727: EQUAL
15728: AND
15729: IFFALSE 15772
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15731: LD_ADDR_LOC 23
15735: PUSH
15736: LD_LOC 23
15740: PPUSH
15741: LD_INT 3
15743: PUSH
15744: LD_VAR 0 7
15748: MUL
15749: PPUSH
15750: LD_LOC 22
15754: PUSH
15755: LD_VAR 0 7
15759: ARRAY
15760: PUSH
15761: LD_VAR 0 3
15765: ARRAY
15766: PPUSH
15767: CALL_OW 1
15771: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15772: LD_LOC 22
15776: PUSH
15777: LD_VAR 0 7
15781: ARRAY
15782: PUSH
15783: LD_VAR 0 3
15787: ARRAY
15788: PUSH
15789: LD_LOC 17
15793: PUSH
15794: LD_VAR 0 7
15798: ARRAY
15799: GREATER
15800: IFFALSE 15827
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15802: LD_ADDR_LOC 24
15806: PUSH
15807: LD_LOC 24
15811: PPUSH
15812: LD_VAR 0 3
15816: PPUSH
15817: LD_INT 1
15819: PPUSH
15820: CALL_OW 1
15824: ST_TO_ADDR
// end else
15825: GO 15914
// begin for j := 1 to Restricted_Builds do
15827: LD_ADDR_VAR 0 8
15831: PUSH
15832: DOUBLE
15833: LD_INT 1
15835: DEC
15836: ST_TO_ADDR
15837: LD_LOC 16
15841: PUSH
15842: FOR_TO
15843: IFFALSE 15887
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15845: LD_LOC 22
15849: PUSH
15850: LD_VAR 0 8
15854: ARRAY
15855: PUSH
15856: LD_VAR 0 3
15860: ARRAY
15861: PUSH
15862: LD_LOC 17
15866: PUSH
15867: LD_VAR 0 8
15871: ARRAY
15872: GREATER
15873: IFFALSE 15885
// begin Is_Cheater := true ;
15875: LD_ADDR_VAR 0 9
15879: PUSH
15880: LD_INT 1
15882: ST_TO_ADDR
// break ;
15883: GO 15887
// end ;
15885: GO 15842
15887: POP
15888: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15889: LD_ADDR_LOC 24
15893: PUSH
15894: LD_LOC 24
15898: PPUSH
15899: LD_VAR 0 3
15903: PPUSH
15904: LD_VAR 0 9
15908: PPUSH
15909: CALL_OW 1
15913: ST_TO_ADDR
// end ; break ;
15914: GO 15918
// end ;
15916: GO 15494
15918: POP
15919: POP
// end ;
15920: LD_VAR 0 6
15924: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15925: LD_VAR 0 5
15929: PUSH
15930: LD_LOC 18
15934: IN
15935: PUSH
15936: LD_VAR 0 2
15940: PUSH
15941: LD_LOC 19
15945: IN
15946: OR
15947: PUSH
15948: LD_VAR 0 4
15952: PUSH
15953: LD_LOC 20
15957: IN
15958: OR
15959: PUSH
15960: LD_VAR 0 3
15964: PUSH
15965: LD_LOC 21
15969: IN
15970: OR
15971: IFFALSE 15982
// ComCancel ( factory ) ;
15973: LD_VAR 0 1
15977: PPUSH
15978: CALL_OW 127
// end ;
15982: PPOPN 5
15984: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15985: LD_VAR 0 2
15989: PUSH
15990: LD_LOC 18
15994: IN
15995: IFFALSE 16006
// ComCancel ( building ) ;
15997: LD_VAR 0 1
16001: PPUSH
16002: CALL_OW 127
// end ; end_of_file
16006: PPOPN 2
16008: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
16009: LD_INT 0
16011: PPUSH
16012: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
16013: LD_ADDR_VAR 0 2
16017: PUSH
16018: LD_STRING #Multi1x1-Time
16020: PUSH
16021: LD_OWVAR 1
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: ST_TO_ADDR
// if WaitServerStrings then
16030: LD_EXP 64
16034: IFFALSE 16052
// AllStrings = AllStrings ^ WaitServerStrings ;
16036: LD_ADDR_VAR 0 2
16040: PUSH
16041: LD_VAR 0 2
16045: PUSH
16046: LD_EXP 64
16050: ADD
16051: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
16052: LD_INT 0
16054: PUSH
16055: LD_EXP 18
16059: PUSH
16060: LD_OWVAR 1
16064: MINUS
16065: LESSEQUAL
16066: IFFALSE 16097
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: LD_VAR 0 2
16077: PUSH
16078: LD_STRING #allowedsibbomb
16080: PUSH
16081: LD_EXP 18
16085: PUSH
16086: LD_OWVAR 1
16090: MINUS
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: ADD
16096: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
16097: LD_INT 0
16099: PUSH
16100: LD_EXP 68
16104: PUSH
16105: LD_OWVAR 1
16109: MINUS
16110: LESSEQUAL
16111: IFFALSE 16142
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
16113: LD_ADDR_VAR 0 2
16117: PUSH
16118: LD_VAR 0 2
16122: PUSH
16123: LD_STRING #builduptime
16125: PUSH
16126: LD_EXP 68
16130: PUSH
16131: LD_OWVAR 1
16135: MINUS
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: ADD
16141: ST_TO_ADDR
// if ( ExtraStrings ) then
16142: LD_EXP 63
16146: IFFALSE 16168
// AllStrings := AllStrings ^  ^ ExtraStrings ;
16148: LD_ADDR_VAR 0 2
16152: PUSH
16153: LD_VAR 0 2
16157: PUSH
16158: LD_STRING 
16160: ADD
16161: PUSH
16162: LD_EXP 63
16166: ADD
16167: ST_TO_ADDR
// if Display_kings and not isSGUI then
16168: LD_EXP 65
16172: PUSH
16173: LD_OWVAR 83
16177: NOT
16178: AND
16179: IFFALSE 16197
// AllStrings = AllStrings ^ Display_kings ;
16181: LD_ADDR_VAR 0 2
16185: PUSH
16186: LD_VAR 0 2
16190: PUSH
16191: LD_EXP 65
16195: ADD
16196: ST_TO_ADDR
// if ( LimitsStrings ) then
16197: CALL 12849 0 0
16201: IFFALSE 16223
// AllStrings := AllStrings ^  ^ LimitsStrings ;
16203: LD_ADDR_VAR 0 2
16207: PUSH
16208: LD_VAR 0 2
16212: PUSH
16213: LD_STRING 
16215: ADD
16216: PUSH
16217: CALL 12849 0 0
16221: ADD
16222: ST_TO_ADDR
// Display_Strings := AllStrings ;
16223: LD_ADDR_OWVAR 47
16227: PUSH
16228: LD_VAR 0 2
16232: ST_TO_ADDR
// end ;
16233: LD_VAR 0 1
16237: RET
// every 0 0$1 do
16238: GO 16240
16240: DISABLE
// begin ShowTimer ;
16241: CALL 16009 0 0
// enable ;
16245: ENABLE
// end ; end_of_file
16246: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
16247: LD_INT 0
16249: PPUSH
16250: PPUSH
16251: PPUSH
// sharedPoints1 = [ ] ;
16252: LD_ADDR_LOC 25
16256: PUSH
16257: EMPTY
16258: ST_TO_ADDR
// sharedPoints2 = [ ] ;
16259: LD_ADDR_LOC 26
16263: PUSH
16264: EMPTY
16265: ST_TO_ADDR
// sharedPoints3 = [ ] ;
16266: LD_ADDR_LOC 27
16270: PUSH
16271: EMPTY
16272: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: DOUBLE
16279: LD_INT 1
16281: DEC
16282: ST_TO_ADDR
16283: LD_EXP 23
16287: PUSH
16288: LD_INT 0
16290: PLUS
16291: PUSH
16292: FOR_TO
16293: IFFALSE 16395
// begin if not Side_Positions [ i ] = 0 then
16295: LD_EXP 23
16299: PUSH
16300: LD_VAR 0 2
16304: ARRAY
16305: PUSH
16306: LD_INT 0
16308: EQUAL
16309: NOT
16310: IFFALSE 16324
// SetMultiScore ( i , 0 ) ;
16312: LD_VAR 0 2
16316: PPUSH
16317: LD_INT 0
16319: PPUSH
16320: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
16324: LD_ADDR_LOC 25
16328: PUSH
16329: LD_LOC 25
16333: PPUSH
16334: LD_VAR 0 2
16338: PPUSH
16339: LD_INT 0
16341: PPUSH
16342: CALL_OW 1
16346: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
16347: LD_ADDR_LOC 26
16351: PUSH
16352: LD_LOC 26
16356: PPUSH
16357: LD_VAR 0 2
16361: PPUSH
16362: LD_INT 0
16364: PPUSH
16365: CALL_OW 1
16369: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
16370: LD_ADDR_LOC 27
16374: PUSH
16375: LD_LOC 27
16379: PPUSH
16380: LD_VAR 0 2
16384: PPUSH
16385: LD_INT 0
16387: PPUSH
16388: CALL_OW 1
16392: ST_TO_ADDR
// end ;
16393: GO 16292
16395: POP
16396: POP
// pointGame = true ;
16397: LD_ADDR_LOC 28
16401: PUSH
16402: LD_INT 1
16404: ST_TO_ADDR
// end ;
16405: LD_VAR 0 1
16409: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
16410: LD_LOC 28
16414: IFFALSE 16825
16416: GO 16418
16418: DISABLE
16419: LD_INT 0
16421: PPUSH
16422: PPUSH
16423: PPUSH
16424: PPUSH
16425: PPUSH
16426: PPUSH
16427: PPUSH
16428: PPUSH
16429: PPUSH
16430: PPUSH
16431: PPUSH
16432: PPUSH
16433: PPUSH
// begin if isSGUI then
16434: LD_OWVAR 83
16438: IFFALSE 16825
// begin if Teams [ 1 ] then
16440: LD_EXP 22
16444: PUSH
16445: LD_INT 1
16447: ARRAY
16448: IFFALSE 16460
// red = true else
16450: LD_ADDR_VAR 0 2
16454: PUSH
16455: LD_INT 1
16457: ST_TO_ADDR
16458: GO 16468
// red = false ;
16460: LD_ADDR_VAR 0 2
16464: PUSH
16465: LD_INT 0
16467: ST_TO_ADDR
// if Teams [ 2 ] then
16468: LD_EXP 22
16472: PUSH
16473: LD_INT 2
16475: ARRAY
16476: IFFALSE 16488
// blue = true else
16478: LD_ADDR_VAR 0 3
16482: PUSH
16483: LD_INT 1
16485: ST_TO_ADDR
16486: GO 16496
// blue = false ;
16488: LD_ADDR_VAR 0 3
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// if Teams [ 3 ] then
16496: LD_EXP 22
16500: PUSH
16501: LD_INT 3
16503: ARRAY
16504: IFFALSE 16516
// yel = true else
16506: LD_ADDR_VAR 0 4
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
16514: GO 16524
// yel = false ;
16516: LD_ADDR_VAR 0 4
16520: PUSH
16521: LD_INT 0
16523: ST_TO_ADDR
// if Teams [ 4 ] then
16524: LD_EXP 22
16528: PUSH
16529: LD_INT 4
16531: ARRAY
16532: IFFALSE 16544
// green = true else
16534: LD_ADDR_VAR 0 5
16538: PUSH
16539: LD_INT 1
16541: ST_TO_ADDR
16542: GO 16552
// green = false ;
16544: LD_ADDR_VAR 0 5
16548: PUSH
16549: LD_INT 0
16551: ST_TO_ADDR
// if def_public_score then
16552: LD_EXP 6
16556: IFFALSE 16568
// p = true else
16558: LD_ADDR_VAR 0 12
16562: PUSH
16563: LD_INT 1
16565: ST_TO_ADDR
16566: GO 16576
// p = false ;
16568: LD_ADDR_VAR 0 12
16572: PUSH
16573: LD_INT 0
16575: ST_TO_ADDR
// if team_game then
16576: LD_EXP 25
16580: IFFALSE 16661
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
16582: LD_ADDR_VAR 0 13
16586: PUSH
16587: LD_INT 3
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: LD_INT 2
16595: PUSH
16596: LD_INT 7
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: LD_EXP 28
16609: ARRAY
16610: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
16611: LD_ADDR_VAR 0 10
16615: PUSH
16616: LD_STRING {
16618: PUSH
16619: LD_VAR 0 3
16623: STR
16624: PUSH
16625: LD_STRING ,
16627: STR
16628: PUSH
16629: LD_VAR 0 4
16633: STR
16634: PUSH
16635: LD_STRING ,
16637: STR
16638: PUSH
16639: LD_VAR 0 2
16643: STR
16644: PUSH
16645: LD_STRING ,0,0,0,
16647: STR
16648: PUSH
16649: LD_VAR 0 5
16653: STR
16654: PUSH
16655: LD_STRING ,0}
16657: STR
16658: ST_TO_ADDR
// end else
16659: GO 16761
// begin you = your_side ;
16661: LD_ADDR_VAR 0 13
16665: PUSH
16666: LD_OWVAR 2
16670: ST_TO_ADDR
// s = { ;
16671: LD_ADDR_VAR 0 10
16675: PUSH
16676: LD_STRING {
16678: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
16679: LD_ADDR_VAR 0 1
16683: PUSH
16684: DOUBLE
16685: LD_INT 1
16687: DEC
16688: ST_TO_ADDR
16689: LD_EXP 23
16693: PUSH
16694: LD_INT 0
16696: PLUS
16697: PUSH
16698: FOR_TO
16699: IFFALSE 16745
// if side_positions [ i ] then
16701: LD_EXP 23
16705: PUSH
16706: LD_VAR 0 1
16710: ARRAY
16711: IFFALSE 16729
// s = s & 1, else
16713: LD_ADDR_VAR 0 10
16717: PUSH
16718: LD_VAR 0 10
16722: PUSH
16723: LD_STRING 1,
16725: STR
16726: ST_TO_ADDR
16727: GO 16743
// s = s & 0, ;
16729: LD_ADDR_VAR 0 10
16733: PUSH
16734: LD_VAR 0 10
16738: PUSH
16739: LD_STRING 0,
16741: STR
16742: ST_TO_ADDR
16743: GO 16698
16745: POP
16746: POP
// s = s & } ;
16747: LD_ADDR_VAR 0 10
16751: PUSH
16752: LD_VAR 0 10
16756: PUSH
16757: LD_STRING }
16759: STR
16760: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
16761: LD_STRING initScore(
16763: PUSH
16764: LD_VAR 0 10
16768: STR
16769: PUSH
16770: LD_STRING ,
16772: STR
16773: PUSH
16774: LD_VAR 0 12
16778: STR
16779: PUSH
16780: LD_STRING ,
16782: STR
16783: PUSH
16784: LD_VAR 0 13
16788: STR
16789: PUSH
16790: LD_STRING  );
16792: STR
16793: PPUSH
16794: CALL_OW 559
// if game_type = 3 then
16798: LD_EXP 46
16802: PUSH
16803: LD_INT 3
16805: EQUAL
16806: IFFALSE 16825
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
16808: LD_STRING AddScorePoints(2,2,
16810: PUSH
16811: LD_EXP 20
16815: STR
16816: PUSH
16817: LD_STRING  );
16819: STR
16820: PPUSH
16821: CALL_OW 559
// end ; end ;
16825: PPOPN 13
16827: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
16828: LD_INT 0
16830: PPUSH
16831: PPUSH
// case typ of 1 :
16832: LD_VAR 0 3
16836: PUSH
16837: LD_INT 1
16839: DOUBLE
16840: EQUAL
16841: IFTRUE 16845
16843: GO 16873
16845: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
16846: LD_ADDR_LOC 25
16850: PUSH
16851: LD_LOC 25
16855: PPUSH
16856: LD_VAR 0 1
16860: PPUSH
16861: LD_VAR 0 2
16865: PPUSH
16866: CALL_OW 1
16870: ST_TO_ADDR
16871: GO 16946
16873: LD_INT 2
16875: DOUBLE
16876: EQUAL
16877: IFTRUE 16881
16879: GO 16909
16881: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
16882: LD_ADDR_LOC 26
16886: PUSH
16887: LD_LOC 26
16891: PPUSH
16892: LD_VAR 0 1
16896: PPUSH
16897: LD_VAR 0 2
16901: PPUSH
16902: CALL_OW 1
16906: ST_TO_ADDR
16907: GO 16946
16909: LD_INT 3
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 16945
16917: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
16918: LD_ADDR_LOC 27
16922: PUSH
16923: LD_LOC 27
16927: PPUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: LD_VAR 0 2
16937: PPUSH
16938: CALL_OW 1
16942: ST_TO_ADDR
16943: GO 16946
16945: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
16946: LD_ADDR_VAR 0 5
16950: PUSH
16951: LD_LOC 25
16955: PUSH
16956: LD_VAR 0 1
16960: ARRAY
16961: PUSH
16962: LD_LOC 26
16966: PUSH
16967: LD_VAR 0 1
16971: ARRAY
16972: PLUS
16973: PUSH
16974: LD_LOC 27
16978: PUSH
16979: LD_VAR 0 1
16983: ARRAY
16984: PLUS
16985: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
16986: LD_VAR 0 1
16990: PPUSH
16991: LD_VAR 0 5
16995: PPUSH
16996: CALL_OW 506
// end ; end_of_file
17000: LD_VAR 0 4
17004: RET
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
17005: LD_INT 0
17007: PPUSH
17008: PPUSH
17009: PPUSH
// BuildUpTime_Delay = 0 ;
17010: LD_ADDR_EXP 68
17014: PUSH
17015: LD_INT 0
17017: ST_TO_ADDR
// if not def_builduptime then
17018: LD_EXP 61
17022: NOT
17023: IFFALSE 17027
// exit ;
17025: GO 17210
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
17027: LD_ADDR_EXP 68
17031: PUSH
17032: LD_INT 8400
17034: PUSH
17035: LD_INT 2100
17037: PUSH
17038: LD_EXP 61
17042: MUL
17043: PLUS
17044: ST_TO_ADDR
// BuildUpTimeActive := true ;
17045: LD_ADDR_EXP 67
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
// for i := 1 to 8 do
17053: LD_ADDR_VAR 0 2
17057: PUSH
17058: DOUBLE
17059: LD_INT 1
17061: DEC
17062: ST_TO_ADDR
17063: LD_INT 8
17065: PUSH
17066: FOR_TO
17067: IFFALSE 17208
// if Side_Positions [ i ] then
17069: LD_EXP 23
17073: PUSH
17074: LD_VAR 0 2
17078: ARRAY
17079: IFFALSE 17206
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
17081: LD_EXP 66
17085: PUSH
17086: LD_EXP 23
17090: PUSH
17091: LD_VAR 0 2
17095: ARRAY
17096: ARRAY
17097: PPUSH
17098: LD_INT 5
17100: PPUSH
17101: CALL_OW 424
// for j := 1 to 8 do
17105: LD_ADDR_VAR 0 3
17109: PUSH
17110: DOUBLE
17111: LD_INT 1
17113: DEC
17114: ST_TO_ADDR
17115: LD_INT 8
17117: PUSH
17118: FOR_TO
17119: IFFALSE 17204
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17121: LD_EXP 23
17125: PUSH
17126: LD_VAR 0 3
17130: ARRAY
17131: PUSH
17132: LD_EXP 21
17136: PUSH
17137: LD_VAR 0 2
17141: ARRAY
17142: PUSH
17143: LD_EXP 21
17147: PUSH
17148: LD_VAR 0 3
17152: ARRAY
17153: NONEQUAL
17154: PUSH
17155: LD_EXP 25
17159: NOT
17160: PUSH
17161: LD_VAR 0 2
17165: PUSH
17166: LD_VAR 0 3
17170: NONEQUAL
17171: AND
17172: OR
17173: AND
17174: IFFALSE 17202
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17176: LD_VAR 0 3
17180: PPUSH
17181: LD_EXP 66
17185: PUSH
17186: LD_EXP 23
17190: PUSH
17191: LD_VAR 0 2
17195: ARRAY
17196: ARRAY
17197: PPUSH
17198: CALL_OW 333
17202: GO 17118
17204: POP
17205: POP
// end ;
17206: GO 17066
17208: POP
17209: POP
// end ;
17210: LD_VAR 0 1
17214: RET
// export function EndBuildUp ; var i , j ; begin
17215: LD_INT 0
17217: PPUSH
17218: PPUSH
17219: PPUSH
// BuildUpTimeActive := false ;
17220: LD_ADDR_EXP 67
17224: PUSH
17225: LD_INT 0
17227: ST_TO_ADDR
// for i := 1 to 8 do
17228: LD_ADDR_VAR 0 2
17232: PUSH
17233: DOUBLE
17234: LD_INT 1
17236: DEC
17237: ST_TO_ADDR
17238: LD_INT 8
17240: PUSH
17241: FOR_TO
17242: IFFALSE 17383
// if Side_Positions [ i ] then
17244: LD_EXP 23
17248: PUSH
17249: LD_VAR 0 2
17253: ARRAY
17254: IFFALSE 17381
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
17256: LD_EXP 66
17260: PUSH
17261: LD_EXP 23
17265: PUSH
17266: LD_VAR 0 2
17270: ARRAY
17271: ARRAY
17272: PPUSH
17273: LD_INT 0
17275: PPUSH
17276: CALL_OW 424
// for j := 1 to 8 do
17280: LD_ADDR_VAR 0 3
17284: PUSH
17285: DOUBLE
17286: LD_INT 1
17288: DEC
17289: ST_TO_ADDR
17290: LD_INT 8
17292: PUSH
17293: FOR_TO
17294: IFFALSE 17379
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17296: LD_EXP 23
17300: PUSH
17301: LD_VAR 0 3
17305: ARRAY
17306: PUSH
17307: LD_EXP 21
17311: PUSH
17312: LD_VAR 0 2
17316: ARRAY
17317: PUSH
17318: LD_EXP 21
17322: PUSH
17323: LD_VAR 0 3
17327: ARRAY
17328: NONEQUAL
17329: PUSH
17330: LD_EXP 25
17334: NOT
17335: PUSH
17336: LD_VAR 0 2
17340: PUSH
17341: LD_VAR 0 3
17345: NONEQUAL
17346: AND
17347: OR
17348: AND
17349: IFFALSE 17377
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17351: LD_VAR 0 3
17355: PPUSH
17356: LD_EXP 66
17360: PUSH
17361: LD_EXP 23
17365: PUSH
17366: LD_VAR 0 2
17370: ARRAY
17371: ARRAY
17372: PPUSH
17373: CALL_OW 334
17377: GO 17293
17379: POP
17380: POP
// end ;
17381: GO 17241
17383: POP
17384: POP
// end ;
17385: LD_VAR 0 1
17389: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
17390: LD_EXP 67
17394: IFFALSE 17569
17396: GO 17398
17398: DISABLE
17399: LD_INT 0
17401: PPUSH
17402: PPUSH
// begin for i := 1 to 8 do
17403: LD_ADDR_VAR 0 1
17407: PUSH
17408: DOUBLE
17409: LD_INT 1
17411: DEC
17412: ST_TO_ADDR
17413: LD_INT 8
17415: PUSH
17416: FOR_TO
17417: IFFALSE 17566
// if Side_Positions [ i ] then
17419: LD_EXP 23
17423: PUSH
17424: LD_VAR 0 1
17428: ARRAY
17429: IFFALSE 17564
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
17431: LD_ADDR_VAR 0 2
17435: PUSH
17436: LD_EXP 66
17440: PUSH
17441: LD_EXP 23
17445: PUSH
17446: LD_VAR 0 1
17450: ARRAY
17451: ARRAY
17452: PPUSH
17453: LD_INT 2
17455: PUSH
17456: LD_INT 21
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: LD_INT 21
17468: PUSH
17469: LD_INT 2
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: LIST
17480: PUSH
17481: LD_INT 22
17483: PUSH
17484: LD_OWVAR 2
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PPUSH
17497: CALL_OW 70
17501: PUSH
17502: FOR_IN
17503: IFFALSE 17562
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
17505: LD_EXP 21
17509: PUSH
17510: LD_VAR 0 1
17514: ARRAY
17515: PUSH
17516: LD_EXP 21
17520: PUSH
17521: LD_OWVAR 2
17525: ARRAY
17526: NONEQUAL
17527: PUSH
17528: LD_EXP 25
17532: NOT
17533: PUSH
17534: LD_VAR 0 1
17538: PUSH
17539: LD_OWVAR 2
17543: NONEQUAL
17544: AND
17545: OR
17546: IFFALSE 17560
// ComMoveToArea ( un , BuildUpEscape ) ;
17548: LD_VAR 0 2
17552: PPUSH
17553: LD_INT 24
17555: PPUSH
17556: CALL_OW 113
17560: GO 17502
17562: POP
17563: POP
17564: GO 17416
17566: POP
17567: POP
// enable ;
17568: ENABLE
// end ;
17569: PPOPN 2
17571: END
// every 0 0$1 trigger def_builduptime do
17572: LD_EXP 61
17576: IFFALSE 17602
17578: GO 17580
17580: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
17581: LD_INT 8400
17583: PUSH
17584: LD_EXP 61
17588: PUSH
17589: LD_INT 2100
17591: MUL
17592: PLUS
17593: PPUSH
17594: CALL_OW 67
// EndBuildUp ;
17598: CALL 17215 0 0
// end ; end_of_file
17602: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
17603: LD_INT 0
17605: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 255
17615: PUSH
17616: LD_VAR 0 4
17620: EQUAL
17621: IFFALSE 17640
// begin SetAchievement ( ACH_RAD ) ;
17623: LD_STRING ACH_RAD
17625: PPUSH
17626: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
17630: LD_STRING ACH_NL
17632: PPUSH
17633: LD_INT 1
17635: PPUSH
17636: CALL_OW 564
// end end ;
17640: LD_VAR 0 5
17644: RET
// export function SA_Win ( side ) ; begin
17645: LD_INT 0
17647: PPUSH
// case side of 1 :
17648: LD_VAR 0 1
17652: PUSH
17653: LD_INT 1
17655: DOUBLE
17656: EQUAL
17657: IFTRUE 17661
17659: GO 17674
17661: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
17662: LD_STRING ACH_AH
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: CALL_OW 564
17672: GO 17837
17674: LD_INT 2
17676: DOUBLE
17677: EQUAL
17678: IFTRUE 17682
17680: GO 17695
17682: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
17683: LD_STRING ACH_E
17685: PPUSH
17686: LD_INT 1
17688: PPUSH
17689: CALL_OW 564
17693: GO 17837
17695: LD_INT 3
17697: DOUBLE
17698: EQUAL
17699: IFTRUE 17703
17701: GO 17716
17703: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
17704: LD_STRING ACH_OOL
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: CALL_OW 564
17714: GO 17837
17716: LD_INT 1
17718: PUSH
17719: LD_INT 2
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: DOUBLE
17726: EQUAL
17727: IFTRUE 17731
17729: GO 17756
17731: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17732: LD_STRING ACH_AH
17734: PPUSH
17735: LD_REAL  5.00000000000000E-0001
17738: PPUSH
17739: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17743: LD_STRING ACH_E
17745: PPUSH
17746: LD_REAL  5.00000000000000E-0001
17749: PPUSH
17750: CALL_OW 564
// end ; [ 2 , 3 ] :
17754: GO 17837
17756: LD_INT 2
17758: PUSH
17759: LD_INT 3
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: DOUBLE
17766: EQUAL
17767: IFTRUE 17771
17769: GO 17796
17771: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
17772: LD_STRING ACH_OOL
17774: PPUSH
17775: LD_REAL  5.00000000000000E-0001
17778: PPUSH
17779: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17783: LD_STRING ACH_E
17785: PPUSH
17786: LD_REAL  5.00000000000000E-0001
17789: PPUSH
17790: CALL_OW 564
// end ; [ 3 , 1 ] :
17794: GO 17837
17796: LD_INT 3
17798: PUSH
17799: LD_INT 1
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: DOUBLE
17806: EQUAL
17807: IFTRUE 17811
17809: GO 17836
17811: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17812: LD_STRING ACH_AH
17814: PPUSH
17815: LD_REAL  5.00000000000000E-0001
17818: PPUSH
17819: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
17823: LD_STRING ACH_OOL
17825: PPUSH
17826: LD_REAL  5.00000000000000E-0001
17829: PPUSH
17830: CALL_OW 564
// end ; end ;
17834: GO 17837
17836: POP
// end ; end_of_file
17837: LD_VAR 0 2
17841: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
17842: LD_INT 0
17844: PPUSH
17845: PPUSH
// enable ( 98 ) ;
17846: LD_INT 98
17848: ENABLE_MARKED
// GameEnded = false ;
17849: LD_ADDR_LOC 30
17853: PUSH
17854: LD_INT 0
17856: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
17857: LD_ADDR_LOC 29
17861: PUSH
17862: LD_INT 0
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: LD_INT 0
17870: PUSH
17871: LD_INT 0
17873: PUSH
17874: LD_INT 0
17876: PUSH
17877: LD_INT 0
17879: PUSH
17880: LD_INT 0
17882: PUSH
17883: LD_INT 0
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: ST_TO_ADDR
// unfoged = false ;
17896: LD_ADDR_LOC 31
17900: PUSH
17901: LD_INT 0
17903: ST_TO_ADDR
// defeated_specs := [ ] ;
17904: LD_ADDR_LOC 32
17908: PUSH
17909: EMPTY
17910: ST_TO_ADDR
// for i = 1 to side_positions do
17911: LD_ADDR_VAR 0 2
17915: PUSH
17916: DOUBLE
17917: LD_INT 1
17919: DEC
17920: ST_TO_ADDR
17921: LD_EXP 23
17925: PUSH
17926: FOR_TO
17927: IFFALSE 17967
// if not side_positions [ i ] then
17929: LD_EXP 23
17933: PUSH
17934: LD_VAR 0 2
17938: ARRAY
17939: NOT
17940: IFFALSE 17965
// defeated = replace ( defeated , i , true ) ;
17942: LD_ADDR_LOC 29
17946: PUSH
17947: LD_LOC 29
17951: PPUSH
17952: LD_VAR 0 2
17956: PPUSH
17957: LD_INT 1
17959: PPUSH
17960: CALL_OW 1
17964: ST_TO_ADDR
17965: GO 17926
17967: POP
17968: POP
// end ;
17969: LD_VAR 0 1
17973: RET
// function CanWinLoose ; begin
17974: LD_INT 0
17976: PPUSH
// Result := true ;
17977: LD_ADDR_VAR 0 1
17981: PUSH
17982: LD_INT 1
17984: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
17985: CALL_OW 518
17989: PUSH
17990: CALL_OW 519
17994: PUSH
17995: LD_INT 0
17997: GREATER
17998: AND
17999: IFFALSE 18009
// Result := false ;
18001: LD_ADDR_VAR 0 1
18005: PUSH
18006: LD_INT 0
18008: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18009: CALL_OW 531
18013: PUSH
18014: CALL_OW 519
18018: PUSH
18019: LD_INT 1
18021: GREATER
18022: AND
18023: IFFALSE 18033
// Result := false ;
18025: LD_ADDR_VAR 0 1
18029: PUSH
18030: LD_INT 0
18032: ST_TO_ADDR
// end ;
18033: LD_VAR 0 1
18037: RET
// export function HasPower ( i ) ; var k , h ; begin
18038: LD_INT 0
18040: PPUSH
18041: PPUSH
18042: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18043: LD_VAR 0 1
18047: PPUSH
18048: CALL_OW 108
18052: NOT
18053: PUSH
18054: LD_EXP 26
18058: PUSH
18059: LD_VAR 0 1
18063: ARRAY
18064: NOT
18065: AND
18066: PUSH
18067: LD_OWVAR 4
18071: AND
18072: IFFALSE 18084
// begin result = false ;
18074: LD_ADDR_VAR 0 2
18078: PUSH
18079: LD_INT 0
18081: ST_TO_ADDR
// end else
18082: GO 18379
// case def_win_rules of 0 :
18084: LD_EXP 19
18088: PUSH
18089: LD_INT 0
18091: DOUBLE
18092: EQUAL
18093: IFTRUE 18097
18095: GO 18260
18097: POP
// if def_people_respawning then
18098: LD_EXP 58
18102: IFFALSE 18193
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
18104: LD_ADDR_VAR 0 2
18108: PUSH
18109: LD_INT 22
18111: PUSH
18112: LD_VAR 0 1
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 2
18123: PUSH
18124: LD_INT 21
18126: PUSH
18127: LD_INT 1
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 33
18136: PUSH
18137: LD_INT 3
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 33
18146: PUSH
18147: LD_INT 5
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 30
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 30
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PPUSH
18186: CALL_OW 69
18190: ST_TO_ADDR
18191: GO 18258
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18193: LD_ADDR_VAR 0 2
18197: PUSH
18198: LD_INT 22
18200: PUSH
18201: LD_VAR 0 1
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: LD_INT 21
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 33
18225: PUSH
18226: LD_INT 3
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 33
18235: PUSH
18236: LD_INT 5
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PPUSH
18253: CALL_OW 69
18257: ST_TO_ADDR
18258: GO 18379
18260: LD_INT 1
18262: DOUBLE
18263: EQUAL
18264: IFTRUE 18268
18266: GO 18307
18268: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
18269: LD_ADDR_VAR 0 2
18273: PUSH
18274: LD_INT 22
18276: PUSH
18277: LD_VAR 0 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 21
18288: PUSH
18289: LD_INT 1
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PPUSH
18300: CALL_OW 69
18304: ST_TO_ADDR
18305: GO 18379
18307: LD_INT 2
18309: DOUBLE
18310: EQUAL
18311: IFTRUE 18315
18313: GO 18378
18315: POP
// begin h = false ;
18316: LD_ADDR_VAR 0 4
18320: PUSH
18321: LD_INT 0
18323: ST_TO_ADDR
// for k in heroes [ i ] do
18324: LD_ADDR_VAR 0 3
18328: PUSH
18329: LD_EXP 34
18333: PUSH
18334: LD_VAR 0 1
18338: ARRAY
18339: PUSH
18340: FOR_IN
18341: IFFALSE 18364
// if IsLive ( k ) then
18343: LD_VAR 0 3
18347: PPUSH
18348: CALL_OW 300
18352: IFFALSE 18362
// h = true ;
18354: LD_ADDR_VAR 0 4
18358: PUSH
18359: LD_INT 1
18361: ST_TO_ADDR
18362: GO 18340
18364: POP
18365: POP
// Result := h ;
18366: LD_ADDR_VAR 0 2
18370: PUSH
18371: LD_VAR 0 4
18375: ST_TO_ADDR
// end ; end ;
18376: GO 18379
18378: POP
// end ;
18379: LD_VAR 0 2
18383: RET
// function AlliedSides ( i , j ) ; begin
18384: LD_INT 0
18386: PPUSH
// Result := false ;
18387: LD_ADDR_VAR 0 3
18391: PUSH
18392: LD_INT 0
18394: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
18395: LD_VAR 0 1
18399: PPUSH
18400: LD_VAR 0 2
18404: PPUSH
18405: CALL_OW 81
18409: PUSH
18410: LD_INT 1
18412: EQUAL
18413: PUSH
18414: LD_VAR 0 2
18418: PPUSH
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 81
18428: PUSH
18429: LD_INT 1
18431: EQUAL
18432: AND
18433: PUSH
18434: LD_VAR 0 1
18438: PPUSH
18439: CALL_OW 83
18443: AND
18444: PUSH
18445: LD_VAR 0 2
18449: PPUSH
18450: CALL_OW 83
18454: AND
18455: IFFALSE 18465
// Result := true ;
18457: LD_ADDR_VAR 0 3
18461: PUSH
18462: LD_INT 1
18464: ST_TO_ADDR
// end ;
18465: LD_VAR 0 3
18469: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
18470: CALL 17974 0 0
18474: PUSH
18475: LD_LOC 30
18479: NOT
18480: AND
18481: IFFALSE 18497
18483: GO 18485
18485: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
18486: LD_ADDR_EXP 64
18490: PUSH
18491: LD_STRING #Player-Ended
18493: PUSH
18494: EMPTY
18495: LIST
18496: ST_TO_ADDR
18497: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
18498: CALL 17974 0 0
18502: PUSH
18503: LD_LOC 30
18507: AND
18508: IFFALSE 18517
18510: GO 18512
18512: DISABLE
// YouLostInMultiplayer ;
18513: CALL_OW 107
18517: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
18518: CALL 17974 0 0
18522: NOT
18523: PUSH
18524: CALL_OW 531
18528: NOT
18529: AND
18530: IFFALSE 18546
18532: GO 18534
18534: DISABLE
// WaitServerStrings = [ #server-wait ] ;
18535: LD_ADDR_EXP 64
18539: PUSH
18540: LD_STRING #server-wait
18542: PUSH
18543: EMPTY
18544: LIST
18545: ST_TO_ADDR
18546: END
// every 100 trigger IAmSpec do
18547: CALL_OW 531
18551: IFFALSE 18567
18553: GO 18555
18555: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
18556: LD_ADDR_EXP 64
18560: PUSH
18561: LD_STRING #Player-IAmSpec
18563: PUSH
18564: EMPTY
18565: LIST
18566: ST_TO_ADDR
18567: END
// every 100 trigger GameEnded and IAmSpec do
18568: LD_LOC 30
18572: PUSH
18573: CALL_OW 531
18577: AND
18578: IFFALSE 18587
18580: GO 18582
18582: DISABLE
// YouLostInMultiplayer ;
18583: CALL_OW 107
18587: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
18588: CALL 17974 0 0
18592: PUSH
18593: LD_LOC 30
18597: NOT
18598: AND
18599: IFFALSE 18615
18601: GO 18603
18603: DISABLE
// WaitServerStrings = [ $player-win ] ;
18604: LD_ADDR_EXP 64
18608: PUSH
18609: LD_STRING $player-win
18611: PUSH
18612: EMPTY
18613: LIST
18614: ST_TO_ADDR
18615: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
18616: CALL 17974 0 0
18620: PUSH
18621: LD_LOC 30
18625: AND
18626: IFFALSE 18650
18628: GO 18630
18630: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
18631: LD_EXP 24
18635: PUSH
18636: LD_OWVAR 7
18640: ARRAY
18641: PPUSH
18642: CALL 17645 0 1
// YouWinInMultiplayer ;
18646: CALL_OW 106
// end ;
18650: END
// every 100 trigger isEditor marked 401 do
18651: LD_OWVAR 84
18655: IFFALSE 18671
18657: GO 18659
18659: DISABLE
// Debug_Strings = [ You won ] ;
18660: LD_ADDR_OWVAR 48
18664: PUSH
18665: LD_STRING You won
18667: PUSH
18668: EMPTY
18669: LIST
18670: ST_TO_ADDR
18671: END
// every 100 trigger isEditor marked 400 do
18672: LD_OWVAR 84
18676: IFFALSE 18692
18678: GO 18680
18680: DISABLE
// Debug_Strings = [ You loss ] ;
18681: LD_ADDR_OWVAR 48
18685: PUSH
18686: LD_STRING You loss
18688: PUSH
18689: EMPTY
18690: LIST
18691: ST_TO_ADDR
18692: END
// every 100 marked 98 do var i , un ;
18693: GO 18695
18695: DISABLE
18696: LD_INT 0
18698: PPUSH
18699: PPUSH
// begin for i = 1 to side_positions do
18700: LD_ADDR_VAR 0 1
18704: PUSH
18705: DOUBLE
18706: LD_INT 1
18708: DEC
18709: ST_TO_ADDR
18710: LD_EXP 23
18714: PUSH
18715: FOR_TO
18716: IFFALSE 18803
// begin if side_positions [ i ] then
18718: LD_EXP 23
18722: PUSH
18723: LD_VAR 0 1
18727: ARRAY
18728: IFFALSE 18801
// if not HasPower ( i ) and not defeated [ i ] then
18730: LD_VAR 0 1
18734: PPUSH
18735: CALL 18038 0 1
18739: NOT
18740: PUSH
18741: LD_LOC 29
18745: PUSH
18746: LD_VAR 0 1
18750: ARRAY
18751: NOT
18752: AND
18753: IFFALSE 18801
// begin defeated = replace ( defeated , i , true ) ;
18755: LD_ADDR_LOC 29
18759: PUSH
18760: LD_LOC 29
18764: PPUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: LD_INT 1
18772: PPUSH
18773: CALL_OW 1
18777: ST_TO_ADDR
// if i = mp_player_side then
18778: LD_VAR 0 1
18782: PUSH
18783: LD_OWVAR 7
18787: EQUAL
18788: IFFALSE 18801
// begin Multiplayer_Loose_Message ;
18790: CALL_OW 521
// SetPlayerSpectator ( ) ;
18794: CALL_OW 572
// enable ( 400 ) ;
18798: LD_INT 400
18800: ENABLE_MARKED
// end ; end ; end ;
18801: GO 18715
18803: POP
18804: POP
// DidGameEnd ;
18805: CALL 18820 0 0
// if not GameEnded then
18809: LD_LOC 30
18813: NOT
18814: IFFALSE 18817
// enable ;
18816: ENABLE
// end ;
18817: PPOPN 2
18819: END
// function DidGameEnd ; var i , k , enemy ; begin
18820: LD_INT 0
18822: PPUSH
18823: PPUSH
18824: PPUSH
18825: PPUSH
// enemy = [ ] ;
18826: LD_ADDR_VAR 0 4
18830: PUSH
18831: EMPTY
18832: ST_TO_ADDR
// for i = 1 to side_positions do
18833: LD_ADDR_VAR 0 2
18837: PUSH
18838: DOUBLE
18839: LD_INT 1
18841: DEC
18842: ST_TO_ADDR
18843: LD_EXP 23
18847: PUSH
18848: FOR_TO
18849: IFFALSE 18943
// if not defeated [ i ] then
18851: LD_LOC 29
18855: PUSH
18856: LD_VAR 0 2
18860: ARRAY
18861: NOT
18862: IFFALSE 18941
// for k = 1 to side_positions do
18864: LD_ADDR_VAR 0 3
18868: PUSH
18869: DOUBLE
18870: LD_INT 1
18872: DEC
18873: ST_TO_ADDR
18874: LD_EXP 23
18878: PUSH
18879: FOR_TO
18880: IFFALSE 18939
// if not defeated [ k ] then
18882: LD_LOC 29
18886: PUSH
18887: LD_VAR 0 3
18891: ARRAY
18892: NOT
18893: IFFALSE 18937
// if not AlliedSides ( i , k ) then
18895: LD_VAR 0 2
18899: PPUSH
18900: LD_VAR 0 3
18904: PPUSH
18905: CALL 18384 0 2
18909: NOT
18910: IFFALSE 18937
// enemy = enemy ^ [ i , k ] ;
18912: LD_ADDR_VAR 0 4
18916: PUSH
18917: LD_VAR 0 4
18921: PUSH
18922: LD_VAR 0 2
18926: PUSH
18927: LD_VAR 0 3
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: ADD
18936: ST_TO_ADDR
18937: GO 18879
18939: POP
18940: POP
18941: GO 18848
18943: POP
18944: POP
// if not enemy then
18945: LD_VAR 0 4
18949: NOT
18950: IFFALSE 18976
// begin GameEnded = true ;
18952: LD_ADDR_LOC 30
18956: PUSH
18957: LD_INT 1
18959: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
18960: LD_LOC 29
18964: PUSH
18965: LD_OWVAR 7
18969: ARRAY
18970: NOT
18971: IFFALSE 18976
// enable ( 401 ) ;
18973: LD_INT 401
18975: ENABLE_MARKED
// end ; end ;
18976: LD_VAR 0 1
18980: RET
// function unfog ; var k , friends ; begin
18981: LD_INT 0
18983: PPUSH
18984: PPUSH
18985: PPUSH
// for k = 1 to side_positions do
18986: LD_ADDR_VAR 0 2
18990: PUSH
18991: DOUBLE
18992: LD_INT 1
18994: DEC
18995: ST_TO_ADDR
18996: LD_EXP 23
19000: PUSH
19001: FOR_TO
19002: IFFALSE 19058
// if not defeated [ k ] then
19004: LD_LOC 29
19008: PUSH
19009: LD_VAR 0 2
19013: ARRAY
19014: NOT
19015: IFFALSE 19056
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
19017: LD_OWVAR 7
19021: PPUSH
19022: LD_VAR 0 2
19026: PPUSH
19027: CALL_OW 81
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: IN
19038: IFFALSE 19056
// friends = friends ^ k ;
19040: LD_ADDR_VAR 0 3
19044: PUSH
19045: LD_VAR 0 3
19049: PUSH
19050: LD_VAR 0 2
19054: ADD
19055: ST_TO_ADDR
19056: GO 19001
19058: POP
19059: POP
// if not friends then
19060: LD_VAR 0 3
19064: NOT
19065: IFFALSE 19079
// begin SetPlayerSpectator ( ) ;
19067: CALL_OW 572
// unfoged = true ;
19071: LD_ADDR_LOC 31
19075: PUSH
19076: LD_INT 1
19078: ST_TO_ADDR
// end ; end ;
19079: LD_VAR 0 1
19083: RET
// export function MakeGameEnd ; begin
19084: LD_INT 0
19086: PPUSH
// SetPlayerSpectator ( ) ;
19087: CALL_OW 572
// unfoged = true ;
19091: LD_ADDR_LOC 31
19095: PUSH
19096: LD_INT 1
19098: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19099: LD_INT 175
19101: PPUSH
19102: CALL_OW 67
// GameEnded = true ;
19106: LD_ADDR_LOC 30
19110: PUSH
19111: LD_INT 1
19113: ST_TO_ADDR
// end ;
19114: LD_VAR 0 1
19118: RET
// export function GetGameEnded ; begin
19119: LD_INT 0
19121: PPUSH
// result = GameEnded ;
19122: LD_ADDR_VAR 0 1
19126: PUSH
19127: LD_LOC 30
19131: ST_TO_ADDR
// end ; end_of_file
19132: LD_VAR 0 1
19136: RET
// var win ; export function init_kings_counting ; var i ; begin
19137: LD_INT 0
19139: PPUSH
19140: PPUSH
// mp_with_score := true ;
19141: LD_ADDR_OWVAR 14
19145: PUSH
19146: LD_INT 1
19148: ST_TO_ADDR
// ResetMultiScore ;
19149: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19153: LD_INT 19
19155: PPUSH
19156: LD_INT 1
19158: PPUSH
19159: CALL_OW 424
// enable ( 2 ) ;
19163: LD_INT 2
19165: ENABLE_MARKED
// end ;
19166: LD_VAR 0 1
19170: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19171: LD_INT 0
19173: PPUSH
19174: PPUSH
19175: PPUSH
19176: PPUSH
19177: PPUSH
19178: PPUSH
19179: PPUSH
19180: PPUSH
19181: PPUSH
// vypis := [ ] ;
19182: LD_ADDR_VAR 0 3
19186: PUSH
19187: EMPTY
19188: ST_TO_ADDR
// red = 0 ;
19189: LD_ADDR_VAR 0 5
19193: PUSH
19194: LD_INT 0
19196: ST_TO_ADDR
// blue = 0 ;
19197: LD_ADDR_VAR 0 6
19201: PUSH
19202: LD_INT 0
19204: ST_TO_ADDR
// yel = 0 ;
19205: LD_ADDR_VAR 0 7
19209: PUSH
19210: LD_INT 0
19212: ST_TO_ADDR
// green = 0 ;
19213: LD_ADDR_VAR 0 8
19217: PUSH
19218: LD_INT 0
19220: ST_TO_ADDR
// if def_public_score or isSGUI then
19221: LD_EXP 6
19225: PUSH
19226: LD_OWVAR 83
19230: OR
19231: IFFALSE 19828
// if not Team_Game then
19233: LD_EXP 25
19237: NOT
19238: IFFALSE 19360
// begin for side = 1 to Side_Positions do
19240: LD_ADDR_VAR 0 2
19244: PUSH
19245: DOUBLE
19246: LD_INT 1
19248: DEC
19249: ST_TO_ADDR
19250: LD_EXP 23
19254: PUSH
19255: FOR_TO
19256: IFFALSE 19356
// if Side_Positions [ side ] then
19258: LD_EXP 23
19262: PUSH
19263: LD_VAR 0 2
19267: ARRAY
19268: IFFALSE 19354
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
19270: LD_ADDR_VAR 0 3
19274: PUSH
19275: LD_VAR 0 3
19279: PUSH
19280: LD_STRING #KingoftheHill-Public
19282: PUSH
19283: LD_VAR 0 2
19287: PUSH
19288: LD_VAR 0 2
19292: PUSH
19293: LD_VAR 0 2
19297: PUSH
19298: LD_INT 10
19300: PLUS
19301: PPUSH
19302: CALL_OW 110
19306: PUSH
19307: LD_INT 3
19309: DIV
19310: PUSH
19311: LD_EXP 20
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: ADD
19323: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
19324: LD_INT 2
19326: PPUSH
19327: LD_VAR 0 2
19331: PPUSH
19332: LD_VAR 0 2
19336: PUSH
19337: LD_INT 10
19339: PLUS
19340: PPUSH
19341: CALL_OW 110
19345: PUSH
19346: LD_INT 3
19348: DIV
19349: PPUSH
19350: CALL 26730 0 3
// end ;
19354: GO 19255
19356: POP
19357: POP
// end else
19358: GO 19826
// begin if Teams [ 1 ] then
19360: LD_EXP 22
19364: PUSH
19365: LD_INT 1
19367: ARRAY
19368: IFFALSE 19420
// for i in Teams [ 1 ] do
19370: LD_ADDR_VAR 0 4
19374: PUSH
19375: LD_EXP 22
19379: PUSH
19380: LD_INT 1
19382: ARRAY
19383: PUSH
19384: FOR_IN
19385: IFFALSE 19418
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19387: LD_ADDR_VAR 0 5
19391: PUSH
19392: LD_VAR 0 5
19396: PUSH
19397: LD_VAR 0 4
19401: PUSH
19402: LD_INT 10
19404: PLUS
19405: PPUSH
19406: CALL_OW 110
19410: PUSH
19411: LD_INT 3
19413: DIV
19414: PLUS
19415: ST_TO_ADDR
19416: GO 19384
19418: POP
19419: POP
// if Teams [ 2 ] then
19420: LD_EXP 22
19424: PUSH
19425: LD_INT 2
19427: ARRAY
19428: IFFALSE 19480
// for i in Teams [ 2 ] do
19430: LD_ADDR_VAR 0 4
19434: PUSH
19435: LD_EXP 22
19439: PUSH
19440: LD_INT 2
19442: ARRAY
19443: PUSH
19444: FOR_IN
19445: IFFALSE 19478
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19447: LD_ADDR_VAR 0 6
19451: PUSH
19452: LD_VAR 0 6
19456: PUSH
19457: LD_VAR 0 4
19461: PUSH
19462: LD_INT 10
19464: PLUS
19465: PPUSH
19466: CALL_OW 110
19470: PUSH
19471: LD_INT 3
19473: DIV
19474: PLUS
19475: ST_TO_ADDR
19476: GO 19444
19478: POP
19479: POP
// if Teams [ 3 ] then
19480: LD_EXP 22
19484: PUSH
19485: LD_INT 3
19487: ARRAY
19488: IFFALSE 19540
// for i in Teams [ 3 ] do
19490: LD_ADDR_VAR 0 4
19494: PUSH
19495: LD_EXP 22
19499: PUSH
19500: LD_INT 3
19502: ARRAY
19503: PUSH
19504: FOR_IN
19505: IFFALSE 19538
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
19507: LD_ADDR_VAR 0 7
19511: PUSH
19512: LD_VAR 0 7
19516: PUSH
19517: LD_VAR 0 4
19521: PUSH
19522: LD_INT 10
19524: PLUS
19525: PPUSH
19526: CALL_OW 110
19530: PUSH
19531: LD_INT 3
19533: DIV
19534: PLUS
19535: ST_TO_ADDR
19536: GO 19504
19538: POP
19539: POP
// if Teams [ 4 ] then
19540: LD_EXP 22
19544: PUSH
19545: LD_INT 4
19547: ARRAY
19548: IFFALSE 19600
// for i in Teams [ 4 ] do
19550: LD_ADDR_VAR 0 4
19554: PUSH
19555: LD_EXP 22
19559: PUSH
19560: LD_INT 4
19562: ARRAY
19563: PUSH
19564: FOR_IN
19565: IFFALSE 19598
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
19567: LD_ADDR_VAR 0 8
19571: PUSH
19572: LD_VAR 0 8
19576: PUSH
19577: LD_VAR 0 4
19581: PUSH
19582: LD_INT 10
19584: PLUS
19585: PPUSH
19586: CALL_OW 110
19590: PUSH
19591: LD_INT 3
19593: DIV
19594: PLUS
19595: ST_TO_ADDR
19596: GO 19564
19598: POP
19599: POP
// if Teams [ 1 ] then
19600: LD_EXP 22
19604: PUSH
19605: LD_INT 1
19607: ARRAY
19608: IFFALSE 19637
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
19610: LD_ADDR_VAR 0 3
19614: PUSH
19615: LD_STRING #KingoftheHill-Public-red
19617: PUSH
19618: LD_INT 3
19620: PUSH
19621: LD_VAR 0 5
19625: PUSH
19626: LD_EXP 20
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: ST_TO_ADDR
// if Teams [ 2 ] then
19637: LD_EXP 22
19641: PUSH
19642: LD_INT 2
19644: ARRAY
19645: IFFALSE 19680
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
19647: LD_ADDR_VAR 0 3
19651: PUSH
19652: LD_VAR 0 3
19656: PUSH
19657: LD_STRING #KingoftheHill-Public-blue
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: LD_VAR 0 6
19667: PUSH
19668: LD_EXP 20
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: ADD
19679: ST_TO_ADDR
// if Teams [ 3 ] then
19680: LD_EXP 22
19684: PUSH
19685: LD_INT 3
19687: ARRAY
19688: IFFALSE 19723
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
19690: LD_ADDR_VAR 0 3
19694: PUSH
19695: LD_VAR 0 3
19699: PUSH
19700: LD_STRING #KingoftheHill-Public-yell
19702: PUSH
19703: LD_INT 2
19705: PUSH
19706: LD_VAR 0 7
19710: PUSH
19711: LD_EXP 20
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: ADD
19722: ST_TO_ADDR
// if Teams [ 4 ] then
19723: LD_EXP 22
19727: PUSH
19728: LD_INT 4
19730: ARRAY
19731: IFFALSE 19766
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
19733: LD_ADDR_VAR 0 3
19737: PUSH
19738: LD_VAR 0 3
19742: PUSH
19743: LD_STRING #KingoftheHill-Public-green
19745: PUSH
19746: LD_INT 7
19748: PUSH
19749: LD_VAR 0 8
19753: PUSH
19754: LD_EXP 20
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: ADD
19765: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
19766: LD_INT 2
19768: PPUSH
19769: LD_INT 3
19771: PPUSH
19772: LD_VAR 0 5
19776: PPUSH
19777: CALL 26730 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
19781: LD_INT 2
19783: PPUSH
19784: LD_INT 1
19786: PPUSH
19787: LD_VAR 0 6
19791: PPUSH
19792: CALL 26730 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
19796: LD_INT 2
19798: PPUSH
19799: LD_INT 2
19801: PPUSH
19802: LD_VAR 0 7
19806: PPUSH
19807: CALL 26730 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
19811: LD_INT 2
19813: PPUSH
19814: LD_INT 7
19816: PPUSH
19817: LD_VAR 0 8
19821: PPUSH
19822: CALL 26730 0 3
// end else
19826: GO 20263
// if not Team_Game then
19828: LD_EXP 25
19832: NOT
19833: IFFALSE 19891
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
19835: LD_ADDR_VAR 0 3
19839: PUSH
19840: LD_VAR 0 3
19844: PUSH
19845: LD_STRING #KingoftheHill-Private
19847: PUSH
19848: LD_OWVAR 7
19852: PUSH
19853: LD_OWVAR 7
19857: PUSH
19858: LD_VAR 0 2
19862: PUSH
19863: LD_INT 10
19865: PLUS
19866: PPUSH
19867: CALL_OW 110
19871: PUSH
19872: LD_INT 3
19874: DIV
19875: PUSH
19876: LD_EXP 20
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: ADD
19888: ST_TO_ADDR
19889: GO 20263
// begin for i in Teams [ 1 ] do
19891: LD_ADDR_VAR 0 4
19895: PUSH
19896: LD_EXP 22
19900: PUSH
19901: LD_INT 1
19903: ARRAY
19904: PUSH
19905: FOR_IN
19906: IFFALSE 19939
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19908: LD_ADDR_VAR 0 5
19912: PUSH
19913: LD_VAR 0 5
19917: PUSH
19918: LD_VAR 0 4
19922: PUSH
19923: LD_INT 10
19925: PLUS
19926: PPUSH
19927: CALL_OW 110
19931: PUSH
19932: LD_INT 3
19934: DIV
19935: PLUS
19936: ST_TO_ADDR
19937: GO 19905
19939: POP
19940: POP
// for i in Teams [ 2 ] do
19941: LD_ADDR_VAR 0 4
19945: PUSH
19946: LD_EXP 22
19950: PUSH
19951: LD_INT 2
19953: ARRAY
19954: PUSH
19955: FOR_IN
19956: IFFALSE 19989
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19958: LD_ADDR_VAR 0 6
19962: PUSH
19963: LD_VAR 0 6
19967: PUSH
19968: LD_VAR 0 4
19972: PUSH
19973: LD_INT 10
19975: PLUS
19976: PPUSH
19977: CALL_OW 110
19981: PUSH
19982: LD_INT 3
19984: DIV
19985: PLUS
19986: ST_TO_ADDR
19987: GO 19955
19989: POP
19990: POP
// for i in Teams [ 3 ] do
19991: LD_ADDR_VAR 0 4
19995: PUSH
19996: LD_EXP 22
20000: PUSH
20001: LD_INT 3
20003: ARRAY
20004: PUSH
20005: FOR_IN
20006: IFFALSE 20039
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20008: LD_ADDR_VAR 0 7
20012: PUSH
20013: LD_VAR 0 7
20017: PUSH
20018: LD_VAR 0 4
20022: PUSH
20023: LD_INT 10
20025: PLUS
20026: PPUSH
20027: CALL_OW 110
20031: PUSH
20032: LD_INT 3
20034: DIV
20035: PLUS
20036: ST_TO_ADDR
20037: GO 20005
20039: POP
20040: POP
// for i in Teams [ 4 ] do
20041: LD_ADDR_VAR 0 4
20045: PUSH
20046: LD_EXP 22
20050: PUSH
20051: LD_INT 4
20053: ARRAY
20054: PUSH
20055: FOR_IN
20056: IFFALSE 20089
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20058: LD_ADDR_VAR 0 8
20062: PUSH
20063: LD_VAR 0 8
20067: PUSH
20068: LD_VAR 0 4
20072: PUSH
20073: LD_INT 10
20075: PLUS
20076: PPUSH
20077: CALL_OW 110
20081: PUSH
20082: LD_INT 3
20084: DIV
20085: PLUS
20086: ST_TO_ADDR
20087: GO 20055
20089: POP
20090: POP
// if mp_player_side in Teams [ 1 ] then
20091: LD_OWVAR 7
20095: PUSH
20096: LD_EXP 22
20100: PUSH
20101: LD_INT 1
20103: ARRAY
20104: IN
20105: IFFALSE 20134
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20107: LD_ADDR_VAR 0 3
20111: PUSH
20112: LD_STRING #KingoftheHill-Public-red
20114: PUSH
20115: LD_INT 3
20117: PUSH
20118: LD_VAR 0 5
20122: PUSH
20123: LD_EXP 20
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
20134: LD_OWVAR 7
20138: PUSH
20139: LD_EXP 22
20143: PUSH
20144: LD_INT 2
20146: ARRAY
20147: IN
20148: IFFALSE 20177
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20150: LD_ADDR_VAR 0 3
20154: PUSH
20155: LD_STRING #KingoftheHill-Public-blue
20157: PUSH
20158: LD_INT 1
20160: PUSH
20161: LD_VAR 0 6
20165: PUSH
20166: LD_EXP 20
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
20177: LD_OWVAR 7
20181: PUSH
20182: LD_EXP 22
20186: PUSH
20187: LD_INT 3
20189: ARRAY
20190: IN
20191: IFFALSE 20220
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20193: LD_ADDR_VAR 0 3
20197: PUSH
20198: LD_STRING #KingoftheHill-Public-yell
20200: PUSH
20201: LD_INT 2
20203: PUSH
20204: LD_VAR 0 7
20208: PUSH
20209: LD_EXP 20
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
20220: LD_OWVAR 7
20224: PUSH
20225: LD_EXP 22
20229: PUSH
20230: LD_INT 4
20232: ARRAY
20233: IN
20234: IFFALSE 20263
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20236: LD_ADDR_VAR 0 3
20240: PUSH
20241: LD_STRING #KingoftheHill-Public-green
20243: PUSH
20244: LD_INT 7
20246: PUSH
20247: LD_VAR 0 8
20251: PUSH
20252: LD_EXP 20
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: ST_TO_ADDR
// end ; Display_kings := vypis ;
20263: LD_ADDR_EXP 65
20267: PUSH
20268: LD_VAR 0 3
20272: ST_TO_ADDR
// end ;
20273: LD_VAR 0 1
20277: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
20278: LD_INT 0
20280: PPUSH
20281: PPUSH
20282: PPUSH
20283: PPUSH
20284: PPUSH
20285: PPUSH
20286: PPUSH
20287: PPUSH
20288: PPUSH
// side := [ ] ;
20289: LD_ADDR_VAR 0 2
20293: PUSH
20294: EMPTY
20295: ST_TO_ADDR
// red = 0 ;
20296: LD_ADDR_VAR 0 5
20300: PUSH
20301: LD_INT 0
20303: ST_TO_ADDR
// blue = 0 ;
20304: LD_ADDR_VAR 0 6
20308: PUSH
20309: LD_INT 0
20311: ST_TO_ADDR
// yel = 0 ;
20312: LD_ADDR_VAR 0 7
20316: PUSH
20317: LD_INT 0
20319: ST_TO_ADDR
// green = 0 ;
20320: LD_ADDR_VAR 0 8
20324: PUSH
20325: LD_INT 0
20327: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
20328: LD_ADDR_VAR 0 3
20332: PUSH
20333: LD_INT 19
20335: PPUSH
20336: LD_INT 21
20338: PUSH
20339: LD_INT 3
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 53
20348: PUSH
20349: EMPTY
20350: LIST
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PPUSH
20356: CALL_OW 70
20360: ST_TO_ADDR
// for un in list do
20361: LD_ADDR_VAR 0 4
20365: PUSH
20366: LD_VAR 0 3
20370: PUSH
20371: FOR_IN
20372: IFFALSE 20397
// side := side union GetSide ( un ) ;
20374: LD_ADDR_VAR 0 2
20378: PUSH
20379: LD_VAR 0 2
20383: PUSH
20384: LD_VAR 0 4
20388: PPUSH
20389: CALL_OW 255
20393: UNION
20394: ST_TO_ADDR
20395: GO 20371
20397: POP
20398: POP
// if side <> 1 then
20399: LD_VAR 0 2
20403: PUSH
20404: LD_INT 1
20406: NONEQUAL
20407: IFFALSE 20411
// exit ;
20409: GO 20774
// side := side [ 1 ] ;
20411: LD_ADDR_VAR 0 2
20415: PUSH
20416: LD_VAR 0 2
20420: PUSH
20421: LD_INT 1
20423: ARRAY
20424: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
20425: LD_VAR 0 2
20429: PUSH
20430: LD_INT 10
20432: PLUS
20433: PPUSH
20434: LD_VAR 0 2
20438: PUSH
20439: LD_INT 10
20441: PLUS
20442: PPUSH
20443: CALL_OW 110
20447: PUSH
20448: LD_INT 1
20450: PLUS
20451: PPUSH
20452: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
20456: LD_VAR 0 2
20460: PPUSH
20461: LD_VAR 0 2
20465: PUSH
20466: LD_INT 10
20468: PLUS
20469: PPUSH
20470: CALL_OW 110
20474: PUSH
20475: LD_INT 3
20477: DIV
20478: PPUSH
20479: LD_INT 2
20481: PPUSH
20482: CALL 16828 0 3
// if not Team_Game then
20486: LD_EXP 25
20490: NOT
20491: IFFALSE 20774
// if GetTag ( side + 10 ) >= final_count * 3 then
20493: LD_VAR 0 2
20497: PUSH
20498: LD_INT 10
20500: PLUS
20501: PPUSH
20502: CALL_OW 110
20506: PUSH
20507: LD_EXP 20
20511: PUSH
20512: LD_INT 3
20514: MUL
20515: GREATEREQUAL
20516: IFFALSE 20523
// enable ( 3 ) else
20518: LD_INT 3
20520: ENABLE_MARKED
20521: GO 20774
// begin for i in Teams [ 1 ] do
20523: LD_ADDR_VAR 0 9
20527: PUSH
20528: LD_EXP 22
20532: PUSH
20533: LD_INT 1
20535: ARRAY
20536: PUSH
20537: FOR_IN
20538: IFFALSE 20571
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20540: LD_ADDR_VAR 0 5
20544: PUSH
20545: LD_VAR 0 5
20549: PUSH
20550: LD_VAR 0 9
20554: PUSH
20555: LD_INT 10
20557: PLUS
20558: PPUSH
20559: CALL_OW 110
20563: PUSH
20564: LD_INT 3
20566: DIV
20567: PLUS
20568: ST_TO_ADDR
20569: GO 20537
20571: POP
20572: POP
// for i in Teams [ 2 ] do
20573: LD_ADDR_VAR 0 9
20577: PUSH
20578: LD_EXP 22
20582: PUSH
20583: LD_INT 2
20585: ARRAY
20586: PUSH
20587: FOR_IN
20588: IFFALSE 20621
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20590: LD_ADDR_VAR 0 6
20594: PUSH
20595: LD_VAR 0 6
20599: PUSH
20600: LD_VAR 0 9
20604: PUSH
20605: LD_INT 10
20607: PLUS
20608: PPUSH
20609: CALL_OW 110
20613: PUSH
20614: LD_INT 3
20616: DIV
20617: PLUS
20618: ST_TO_ADDR
20619: GO 20587
20621: POP
20622: POP
// for i in Teams [ 3 ] do
20623: LD_ADDR_VAR 0 9
20627: PUSH
20628: LD_EXP 22
20632: PUSH
20633: LD_INT 3
20635: ARRAY
20636: PUSH
20637: FOR_IN
20638: IFFALSE 20671
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20640: LD_ADDR_VAR 0 7
20644: PUSH
20645: LD_VAR 0 7
20649: PUSH
20650: LD_VAR 0 9
20654: PUSH
20655: LD_INT 10
20657: PLUS
20658: PPUSH
20659: CALL_OW 110
20663: PUSH
20664: LD_INT 3
20666: DIV
20667: PLUS
20668: ST_TO_ADDR
20669: GO 20637
20671: POP
20672: POP
// for i in Teams [ 4 ] do
20673: LD_ADDR_VAR 0 9
20677: PUSH
20678: LD_EXP 22
20682: PUSH
20683: LD_INT 4
20685: ARRAY
20686: PUSH
20687: FOR_IN
20688: IFFALSE 20721
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20690: LD_ADDR_VAR 0 8
20694: PUSH
20695: LD_VAR 0 8
20699: PUSH
20700: LD_VAR 0 9
20704: PUSH
20705: LD_INT 10
20707: PLUS
20708: PPUSH
20709: CALL_OW 110
20713: PUSH
20714: LD_INT 3
20716: DIV
20717: PLUS
20718: ST_TO_ADDR
20719: GO 20687
20721: POP
20722: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
20723: LD_VAR 0 5
20727: PUSH
20728: LD_EXP 20
20732: GREATEREQUAL
20733: PUSH
20734: LD_VAR 0 6
20738: PUSH
20739: LD_EXP 20
20743: GREATEREQUAL
20744: OR
20745: PUSH
20746: LD_VAR 0 7
20750: PUSH
20751: LD_EXP 20
20755: GREATEREQUAL
20756: OR
20757: PUSH
20758: LD_VAR 0 8
20762: PUSH
20763: LD_EXP 20
20767: GREATEREQUAL
20768: OR
20769: IFFALSE 20774
// enable ( 3 ) ;
20771: LD_INT 3
20773: ENABLE_MARKED
// end ; end ;
20774: LD_VAR 0 1
20778: RET
// every 0 0$1 marked 2 do
20779: GO 20781
20781: DISABLE
// begin count_king ;
20782: CALL 20278 0 0
// show_public_points ;
20786: CALL 19171 0 0
// enable ;
20790: ENABLE
// end ;
20791: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
20792: GO 20794
20794: DISABLE
20795: LD_INT 0
20797: PPUSH
20798: PPUSH
20799: PPUSH
20800: PPUSH
20801: PPUSH
20802: PPUSH
// begin win := [ ] ;
20803: LD_ADDR_LOC 33
20807: PUSH
20808: EMPTY
20809: ST_TO_ADDR
// red = 0 ;
20810: LD_ADDR_VAR 0 2
20814: PUSH
20815: LD_INT 0
20817: ST_TO_ADDR
// blue = 0 ;
20818: LD_ADDR_VAR 0 3
20822: PUSH
20823: LD_INT 0
20825: ST_TO_ADDR
// yel = 0 ;
20826: LD_ADDR_VAR 0 4
20830: PUSH
20831: LD_INT 0
20833: ST_TO_ADDR
// green = 0 ;
20834: LD_ADDR_VAR 0 5
20838: PUSH
20839: LD_INT 0
20841: ST_TO_ADDR
// if not Team_Game then
20842: LD_EXP 25
20846: NOT
20847: IFFALSE 20924
// begin for side = 1 to 8 do
20849: LD_ADDR_VAR 0 1
20853: PUSH
20854: DOUBLE
20855: LD_INT 1
20857: DEC
20858: ST_TO_ADDR
20859: LD_INT 8
20861: PUSH
20862: FOR_TO
20863: IFFALSE 20908
// if GetTag ( side + 10 ) >= final_count * 3 then
20865: LD_VAR 0 1
20869: PUSH
20870: LD_INT 10
20872: PLUS
20873: PPUSH
20874: CALL_OW 110
20878: PUSH
20879: LD_EXP 20
20883: PUSH
20884: LD_INT 3
20886: MUL
20887: GREATEREQUAL
20888: IFFALSE 20906
// win := win ^ side ;
20890: LD_ADDR_LOC 33
20894: PUSH
20895: LD_LOC 33
20899: PUSH
20900: LD_VAR 0 1
20904: ADD
20905: ST_TO_ADDR
20906: GO 20862
20908: POP
20909: POP
// if win then
20910: LD_LOC 33
20914: IFFALSE 20921
// enable ( 4 ) else
20916: LD_INT 4
20918: ENABLE_MARKED
20919: GO 20922
// enable ;
20921: ENABLE
// end else
20922: GO 21240
// begin for i in Teams [ 1 ] do
20924: LD_ADDR_VAR 0 6
20928: PUSH
20929: LD_EXP 22
20933: PUSH
20934: LD_INT 1
20936: ARRAY
20937: PUSH
20938: FOR_IN
20939: IFFALSE 20972
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20941: LD_ADDR_VAR 0 2
20945: PUSH
20946: LD_VAR 0 2
20950: PUSH
20951: LD_VAR 0 6
20955: PUSH
20956: LD_INT 10
20958: PLUS
20959: PPUSH
20960: CALL_OW 110
20964: PUSH
20965: LD_INT 3
20967: DIV
20968: PLUS
20969: ST_TO_ADDR
20970: GO 20938
20972: POP
20973: POP
// for i in Teams [ 2 ] do
20974: LD_ADDR_VAR 0 6
20978: PUSH
20979: LD_EXP 22
20983: PUSH
20984: LD_INT 2
20986: ARRAY
20987: PUSH
20988: FOR_IN
20989: IFFALSE 21022
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20991: LD_ADDR_VAR 0 3
20995: PUSH
20996: LD_VAR 0 3
21000: PUSH
21001: LD_VAR 0 6
21005: PUSH
21006: LD_INT 10
21008: PLUS
21009: PPUSH
21010: CALL_OW 110
21014: PUSH
21015: LD_INT 3
21017: DIV
21018: PLUS
21019: ST_TO_ADDR
21020: GO 20988
21022: POP
21023: POP
// for i in Teams [ 3 ] do
21024: LD_ADDR_VAR 0 6
21028: PUSH
21029: LD_EXP 22
21033: PUSH
21034: LD_INT 3
21036: ARRAY
21037: PUSH
21038: FOR_IN
21039: IFFALSE 21072
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21041: LD_ADDR_VAR 0 4
21045: PUSH
21046: LD_VAR 0 4
21050: PUSH
21051: LD_VAR 0 6
21055: PUSH
21056: LD_INT 10
21058: PLUS
21059: PPUSH
21060: CALL_OW 110
21064: PUSH
21065: LD_INT 3
21067: DIV
21068: PLUS
21069: ST_TO_ADDR
21070: GO 21038
21072: POP
21073: POP
// for i in Teams [ 4 ] do
21074: LD_ADDR_VAR 0 6
21078: PUSH
21079: LD_EXP 22
21083: PUSH
21084: LD_INT 4
21086: ARRAY
21087: PUSH
21088: FOR_IN
21089: IFFALSE 21122
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21091: LD_ADDR_VAR 0 5
21095: PUSH
21096: LD_VAR 0 5
21100: PUSH
21101: LD_VAR 0 6
21105: PUSH
21106: LD_INT 10
21108: PLUS
21109: PPUSH
21110: CALL_OW 110
21114: PUSH
21115: LD_INT 3
21117: DIV
21118: PLUS
21119: ST_TO_ADDR
21120: GO 21088
21122: POP
21123: POP
// if red >= final_count then
21124: LD_VAR 0 2
21128: PUSH
21129: LD_EXP 20
21133: GREATEREQUAL
21134: IFFALSE 21150
// win = teams [ 1 ] ;
21136: LD_ADDR_LOC 33
21140: PUSH
21141: LD_EXP 22
21145: PUSH
21146: LD_INT 1
21148: ARRAY
21149: ST_TO_ADDR
// if blue >= final_count then
21150: LD_VAR 0 3
21154: PUSH
21155: LD_EXP 20
21159: GREATEREQUAL
21160: IFFALSE 21176
// win = teams [ 2 ] ;
21162: LD_ADDR_LOC 33
21166: PUSH
21167: LD_EXP 22
21171: PUSH
21172: LD_INT 2
21174: ARRAY
21175: ST_TO_ADDR
// if yel >= final_count then
21176: LD_VAR 0 4
21180: PUSH
21181: LD_EXP 20
21185: GREATEREQUAL
21186: IFFALSE 21202
// win = teams [ 3 ] ;
21188: LD_ADDR_LOC 33
21192: PUSH
21193: LD_EXP 22
21197: PUSH
21198: LD_INT 3
21200: ARRAY
21201: ST_TO_ADDR
// if green >= final_count then
21202: LD_VAR 0 5
21206: PUSH
21207: LD_EXP 20
21211: GREATEREQUAL
21212: IFFALSE 21228
// win = teams [ 4 ] ;
21214: LD_ADDR_LOC 33
21218: PUSH
21219: LD_EXP 22
21223: PUSH
21224: LD_INT 4
21226: ARRAY
21227: ST_TO_ADDR
// if win then
21228: LD_LOC 33
21232: IFFALSE 21239
// enable ( 4 ) else
21234: LD_INT 4
21236: ENABLE_MARKED
21237: GO 21240
// enable ;
21239: ENABLE
// end ; end ;
21240: PPOPN 6
21242: END
// every 0 0$1 marked 4 do
21243: GO 21245
21245: DISABLE
// begin if Player_Side in win then
21246: LD_EXP 27
21250: PUSH
21251: LD_LOC 33
21255: IN
21256: IFFALSE 21272
// begin wait ( 0 0$2 ) ;
21258: LD_INT 70
21260: PPUSH
21261: CALL_OW 67
// enable ( 401 ) ;
21265: LD_INT 401
21267: ENABLE_MARKED
// exit ;
21268: GO 21288
// end else
21270: GO 21288
// begin wait ( 0 0$2 ) ;
21272: LD_INT 70
21274: PPUSH
21275: CALL_OW 67
// Multiplayer_Loose_Message ;
21279: CALL_OW 521
// enable ( 400 ) ;
21283: LD_INT 400
21285: ENABLE_MARKED
// exit ;
21286: GO 21288
// end ; end ; end_of_file
21288: END
// export function SetMpTechs ( ) ; var side , i ; begin
21289: LD_INT 0
21291: PPUSH
21292: PPUSH
21293: PPUSH
// for side = 1 to 8 do
21294: LD_ADDR_VAR 0 2
21298: PUSH
21299: DOUBLE
21300: LD_INT 1
21302: DEC
21303: ST_TO_ADDR
21304: LD_INT 8
21306: PUSH
21307: FOR_TO
21308: IFFALSE 21429
// begin for i = 1 to 72 do
21310: LD_ADDR_VAR 0 3
21314: PUSH
21315: DOUBLE
21316: LD_INT 1
21318: DEC
21319: ST_TO_ADDR
21320: LD_INT 72
21322: PUSH
21323: FOR_TO
21324: IFFALSE 21355
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
21326: LD_VAR 0 3
21330: PPUSH
21331: LD_VAR 0 2
21335: PPUSH
21336: LD_INT 0
21338: PPUSH
21339: LD_VAR 0 3
21343: PPUSH
21344: CALL_OW 565
21348: PPUSH
21349: CALL_OW 322
21353: GO 21323
21355: POP
21356: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
21357: LD_INT 73
21359: PPUSH
21360: LD_VAR 0 2
21364: PPUSH
21365: LD_INT 0
21367: PPUSH
21368: LD_INT 25
21370: PPUSH
21371: CALL_OW 565
21375: PPUSH
21376: CALL_OW 322
// for i = 0 to 40 do
21380: LD_ADDR_VAR 0 3
21384: PUSH
21385: DOUBLE
21386: LD_INT 0
21388: DEC
21389: ST_TO_ADDR
21390: LD_INT 40
21392: PUSH
21393: FOR_TO
21394: IFFALSE 21425
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
21396: LD_VAR 0 3
21400: PPUSH
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_INT 1
21408: PPUSH
21409: LD_VAR 0 3
21413: PPUSH
21414: CALL_OW 565
21418: PPUSH
21419: CALL_OW 324
21423: GO 21393
21425: POP
21426: POP
// end ;
21427: GO 21307
21429: POP
21430: POP
// end ;
21431: LD_VAR 0 1
21435: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
21436: LD_INT 0
21438: PPUSH
21439: PPUSH
21440: PPUSH
// for side = 1 to 8 do
21441: LD_ADDR_VAR 0 3
21445: PUSH
21446: DOUBLE
21447: LD_INT 1
21449: DEC
21450: ST_TO_ADDR
21451: LD_INT 8
21453: PUSH
21454: FOR_TO
21455: IFFALSE 25451
// begin for i = 1 to 73 do
21457: LD_ADDR_VAR 0 4
21461: PUSH
21462: DOUBLE
21463: LD_INT 1
21465: DEC
21466: ST_TO_ADDR
21467: LD_INT 73
21469: PUSH
21470: FOR_TO
21471: IFFALSE 21492
// SetTech ( i , side , state_disabled ) ;
21473: LD_VAR 0 4
21477: PPUSH
21478: LD_VAR 0 3
21482: PPUSH
21483: LD_INT 0
21485: PPUSH
21486: CALL_OW 322
21490: GO 21470
21492: POP
21493: POP
// for i = 0 to 40 do
21494: LD_ADDR_VAR 0 4
21498: PUSH
21499: DOUBLE
21500: LD_INT 0
21502: DEC
21503: ST_TO_ADDR
21504: LD_INT 40
21506: PUSH
21507: FOR_TO
21508: IFFALSE 21529
// SetRestrict ( i , side , false ) ;
21510: LD_VAR 0 4
21514: PPUSH
21515: LD_VAR 0 3
21519: PPUSH
21520: LD_INT 0
21522: PPUSH
21523: CALL_OW 324
21527: GO 21507
21529: POP
21530: POP
// case level of 1 :
21531: LD_VAR 0 1
21535: PUSH
21536: LD_INT 1
21538: DOUBLE
21539: EQUAL
21540: IFTRUE 21544
21542: GO 21697
21544: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21545: LD_INT 35
21547: PPUSH
21548: LD_VAR 0 3
21552: PPUSH
21553: LD_INT 1
21555: PPUSH
21556: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21560: LD_INT 45
21562: PPUSH
21563: LD_VAR 0 3
21567: PPUSH
21568: LD_INT 1
21570: PPUSH
21571: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21575: LD_INT 46
21577: PPUSH
21578: LD_VAR 0 3
21582: PPUSH
21583: LD_INT 1
21585: PPUSH
21586: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21590: LD_INT 47
21592: PPUSH
21593: LD_VAR 0 3
21597: PPUSH
21598: LD_INT 1
21600: PPUSH
21601: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21605: LD_INT 0
21607: PPUSH
21608: LD_VAR 0 3
21612: PPUSH
21613: LD_INT 1
21615: PPUSH
21616: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21620: LD_INT 2
21622: PPUSH
21623: LD_VAR 0 3
21627: PPUSH
21628: LD_INT 1
21630: PPUSH
21631: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21635: LD_INT 4
21637: PPUSH
21638: LD_VAR 0 3
21642: PPUSH
21643: LD_INT 1
21645: PPUSH
21646: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21650: LD_INT 6
21652: PPUSH
21653: LD_VAR 0 3
21657: PPUSH
21658: LD_INT 1
21660: PPUSH
21661: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21665: LD_INT 29
21667: PPUSH
21668: LD_VAR 0 3
21672: PPUSH
21673: LD_INT 1
21675: PPUSH
21676: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21680: LD_INT 31
21682: PPUSH
21683: LD_VAR 0 3
21687: PPUSH
21688: LD_INT 1
21690: PPUSH
21691: CALL_OW 324
// end ; 2 :
21695: GO 25449
21697: LD_INT 2
21699: DOUBLE
21700: EQUAL
21701: IFTRUE 21705
21703: GO 21903
21705: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21706: LD_INT 35
21708: PPUSH
21709: LD_VAR 0 3
21713: PPUSH
21714: LD_INT 1
21716: PPUSH
21717: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21721: LD_INT 45
21723: PPUSH
21724: LD_VAR 0 3
21728: PPUSH
21729: LD_INT 1
21731: PPUSH
21732: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21736: LD_INT 46
21738: PPUSH
21739: LD_VAR 0 3
21743: PPUSH
21744: LD_INT 1
21746: PPUSH
21747: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21751: LD_INT 47
21753: PPUSH
21754: LD_VAR 0 3
21758: PPUSH
21759: LD_INT 1
21761: PPUSH
21762: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21766: LD_INT 1
21768: PPUSH
21769: LD_VAR 0 3
21773: PPUSH
21774: LD_INT 1
21776: PPUSH
21777: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21781: LD_INT 2
21783: PPUSH
21784: LD_VAR 0 3
21788: PPUSH
21789: LD_INT 1
21791: PPUSH
21792: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21796: LD_INT 11
21798: PPUSH
21799: LD_VAR 0 3
21803: PPUSH
21804: LD_INT 1
21806: PPUSH
21807: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21811: LD_INT 0
21813: PPUSH
21814: LD_VAR 0 3
21818: PPUSH
21819: LD_INT 1
21821: PPUSH
21822: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21826: LD_INT 2
21828: PPUSH
21829: LD_VAR 0 3
21833: PPUSH
21834: LD_INT 1
21836: PPUSH
21837: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21841: LD_INT 4
21843: PPUSH
21844: LD_VAR 0 3
21848: PPUSH
21849: LD_INT 1
21851: PPUSH
21852: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21856: LD_INT 6
21858: PPUSH
21859: LD_VAR 0 3
21863: PPUSH
21864: LD_INT 1
21866: PPUSH
21867: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21871: LD_INT 29
21873: PPUSH
21874: LD_VAR 0 3
21878: PPUSH
21879: LD_INT 1
21881: PPUSH
21882: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21886: LD_INT 31
21888: PPUSH
21889: LD_VAR 0 3
21893: PPUSH
21894: LD_INT 1
21896: PPUSH
21897: CALL_OW 324
// end ; 3 :
21901: GO 25449
21903: LD_INT 3
21905: DOUBLE
21906: EQUAL
21907: IFTRUE 21911
21909: GO 22364
21911: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21912: LD_INT 35
21914: PPUSH
21915: LD_VAR 0 3
21919: PPUSH
21920: LD_INT 1
21922: PPUSH
21923: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21927: LD_INT 45
21929: PPUSH
21930: LD_VAR 0 3
21934: PPUSH
21935: LD_INT 1
21937: PPUSH
21938: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21942: LD_INT 46
21944: PPUSH
21945: LD_VAR 0 3
21949: PPUSH
21950: LD_INT 1
21952: PPUSH
21953: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21957: LD_INT 47
21959: PPUSH
21960: LD_VAR 0 3
21964: PPUSH
21965: LD_INT 1
21967: PPUSH
21968: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21972: LD_INT 1
21974: PPUSH
21975: LD_VAR 0 3
21979: PPUSH
21980: LD_INT 1
21982: PPUSH
21983: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21987: LD_INT 2
21989: PPUSH
21990: LD_VAR 0 3
21994: PPUSH
21995: LD_INT 1
21997: PPUSH
21998: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22002: LD_INT 11
22004: PPUSH
22005: LD_VAR 0 3
22009: PPUSH
22010: LD_INT 1
22012: PPUSH
22013: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22017: LD_INT 48
22019: PPUSH
22020: LD_VAR 0 3
22024: PPUSH
22025: LD_INT 1
22027: PPUSH
22028: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22032: LD_INT 69
22034: PPUSH
22035: LD_VAR 0 3
22039: PPUSH
22040: LD_INT 1
22042: PPUSH
22043: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22047: LD_INT 39
22049: PPUSH
22050: LD_VAR 0 3
22054: PPUSH
22055: LD_INT 1
22057: PPUSH
22058: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22062: LD_INT 43
22064: PPUSH
22065: LD_VAR 0 3
22069: PPUSH
22070: LD_INT 1
22072: PPUSH
22073: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22077: LD_INT 51
22079: PPUSH
22080: LD_VAR 0 3
22084: PPUSH
22085: LD_INT 1
22087: PPUSH
22088: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22092: LD_INT 6
22094: PPUSH
22095: LD_VAR 0 3
22099: PPUSH
22100: LD_INT 1
22102: PPUSH
22103: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22107: LD_INT 0
22109: PPUSH
22110: LD_VAR 0 3
22114: PPUSH
22115: LD_INT 1
22117: PPUSH
22118: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22122: LD_INT 2
22124: PPUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: LD_INT 1
22132: PPUSH
22133: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22137: LD_INT 3
22139: PPUSH
22140: LD_VAR 0 3
22144: PPUSH
22145: LD_INT 1
22147: PPUSH
22148: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22152: LD_INT 4
22154: PPUSH
22155: LD_VAR 0 3
22159: PPUSH
22160: LD_INT 1
22162: PPUSH
22163: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22167: LD_INT 6
22169: PPUSH
22170: LD_VAR 0 3
22174: PPUSH
22175: LD_INT 1
22177: PPUSH
22178: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22182: LD_INT 7
22184: PPUSH
22185: LD_VAR 0 3
22189: PPUSH
22190: LD_INT 1
22192: PPUSH
22193: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22197: LD_INT 8
22199: PPUSH
22200: LD_VAR 0 3
22204: PPUSH
22205: LD_INT 1
22207: PPUSH
22208: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22212: LD_INT 10
22214: PPUSH
22215: LD_VAR 0 3
22219: PPUSH
22220: LD_INT 1
22222: PPUSH
22223: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22227: LD_INT 15
22229: PPUSH
22230: LD_VAR 0 3
22234: PPUSH
22235: LD_INT 1
22237: PPUSH
22238: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22242: LD_INT 16
22244: PPUSH
22245: LD_VAR 0 3
22249: PPUSH
22250: LD_INT 1
22252: PPUSH
22253: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22257: LD_INT 17
22259: PPUSH
22260: LD_VAR 0 3
22264: PPUSH
22265: LD_INT 1
22267: PPUSH
22268: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22272: LD_INT 20
22274: PPUSH
22275: LD_VAR 0 3
22279: PPUSH
22280: LD_INT 1
22282: PPUSH
22283: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22287: LD_INT 26
22289: PPUSH
22290: LD_VAR 0 3
22294: PPUSH
22295: LD_INT 1
22297: PPUSH
22298: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22302: LD_INT 27
22304: PPUSH
22305: LD_VAR 0 3
22309: PPUSH
22310: LD_INT 1
22312: PPUSH
22313: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22317: LD_INT 29
22319: PPUSH
22320: LD_VAR 0 3
22324: PPUSH
22325: LD_INT 1
22327: PPUSH
22328: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22332: LD_INT 31
22334: PPUSH
22335: LD_VAR 0 3
22339: PPUSH
22340: LD_INT 1
22342: PPUSH
22343: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22347: LD_INT 32
22349: PPUSH
22350: LD_VAR 0 3
22354: PPUSH
22355: LD_INT 1
22357: PPUSH
22358: CALL_OW 324
// end ; 4 :
22362: GO 25449
22364: LD_INT 4
22366: DOUBLE
22367: EQUAL
22368: IFTRUE 22372
22370: GO 23320
22372: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22373: LD_INT 35
22375: PPUSH
22376: LD_VAR 0 3
22380: PPUSH
22381: LD_INT 1
22383: PPUSH
22384: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22388: LD_INT 45
22390: PPUSH
22391: LD_VAR 0 3
22395: PPUSH
22396: LD_INT 1
22398: PPUSH
22399: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22403: LD_INT 46
22405: PPUSH
22406: LD_VAR 0 3
22410: PPUSH
22411: LD_INT 1
22413: PPUSH
22414: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22418: LD_INT 47
22420: PPUSH
22421: LD_VAR 0 3
22425: PPUSH
22426: LD_INT 1
22428: PPUSH
22429: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22433: LD_INT 1
22435: PPUSH
22436: LD_VAR 0 3
22440: PPUSH
22441: LD_INT 1
22443: PPUSH
22444: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22448: LD_INT 2
22450: PPUSH
22451: LD_VAR 0 3
22455: PPUSH
22456: LD_INT 1
22458: PPUSH
22459: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22463: LD_INT 11
22465: PPUSH
22466: LD_VAR 0 3
22470: PPUSH
22471: LD_INT 1
22473: PPUSH
22474: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22478: LD_INT 20
22480: PPUSH
22481: LD_VAR 0 3
22485: PPUSH
22486: LD_INT 1
22488: PPUSH
22489: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22493: LD_INT 48
22495: PPUSH
22496: LD_VAR 0 3
22500: PPUSH
22501: LD_INT 1
22503: PPUSH
22504: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22508: LD_INT 49
22510: PPUSH
22511: LD_VAR 0 3
22515: PPUSH
22516: LD_INT 1
22518: PPUSH
22519: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22523: LD_INT 69
22525: PPUSH
22526: LD_VAR 0 3
22530: PPUSH
22531: LD_INT 1
22533: PPUSH
22534: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22538: LD_INT 39
22540: PPUSH
22541: LD_VAR 0 3
22545: PPUSH
22546: LD_INT 1
22548: PPUSH
22549: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22553: LD_INT 34
22555: PPUSH
22556: LD_VAR 0 3
22560: PPUSH
22561: LD_INT 1
22563: PPUSH
22564: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22568: LD_INT 42
22570: PPUSH
22571: LD_VAR 0 3
22575: PPUSH
22576: LD_INT 1
22578: PPUSH
22579: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22583: LD_INT 44
22585: PPUSH
22586: LD_VAR 0 3
22590: PPUSH
22591: LD_INT 1
22593: PPUSH
22594: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22598: LD_INT 41
22600: PPUSH
22601: LD_VAR 0 3
22605: PPUSH
22606: LD_INT 1
22608: PPUSH
22609: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22613: LD_INT 43
22615: PPUSH
22616: LD_VAR 0 3
22620: PPUSH
22621: LD_INT 1
22623: PPUSH
22624: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22628: LD_INT 70
22630: PPUSH
22631: LD_VAR 0 3
22635: PPUSH
22636: LD_INT 1
22638: PPUSH
22639: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22643: LD_INT 51
22645: PPUSH
22646: LD_VAR 0 3
22650: PPUSH
22651: LD_INT 1
22653: PPUSH
22654: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22658: LD_INT 52
22660: PPUSH
22661: LD_VAR 0 3
22665: PPUSH
22666: LD_INT 1
22668: PPUSH
22669: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22673: LD_INT 6
22675: PPUSH
22676: LD_VAR 0 3
22680: PPUSH
22681: LD_INT 1
22683: PPUSH
22684: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22688: LD_INT 15
22690: PPUSH
22691: LD_VAR 0 3
22695: PPUSH
22696: LD_INT 1
22698: PPUSH
22699: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22703: LD_INT 7
22705: PPUSH
22706: LD_VAR 0 3
22710: PPUSH
22711: LD_INT 1
22713: PPUSH
22714: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22718: LD_INT 12
22720: PPUSH
22721: LD_VAR 0 3
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22733: LD_INT 18
22735: PPUSH
22736: LD_VAR 0 3
22740: PPUSH
22741: LD_INT 1
22743: PPUSH
22744: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
22748: LD_INT 60
22750: PPUSH
22751: LD_VAR 0 3
22755: PPUSH
22756: LD_INT 1
22758: PPUSH
22759: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
22763: LD_INT 9
22765: PPUSH
22766: LD_VAR 0 3
22770: PPUSH
22771: LD_INT 1
22773: PPUSH
22774: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
22778: LD_INT 30
22780: PPUSH
22781: LD_VAR 0 3
22785: PPUSH
22786: LD_INT 1
22788: PPUSH
22789: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
22793: LD_INT 37
22795: PPUSH
22796: LD_VAR 0 3
22800: PPUSH
22801: LD_INT 1
22803: PPUSH
22804: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
22808: LD_INT 5
22810: PPUSH
22811: LD_VAR 0 3
22815: PPUSH
22816: LD_INT 1
22818: PPUSH
22819: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
22823: LD_INT 66
22825: PPUSH
22826: LD_VAR 0 3
22830: PPUSH
22831: LD_INT 1
22833: PPUSH
22834: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
22838: LD_INT 21
22840: PPUSH
22841: LD_VAR 0 3
22845: PPUSH
22846: LD_INT 1
22848: PPUSH
22849: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22853: LD_INT 22
22855: PPUSH
22856: LD_VAR 0 3
22860: PPUSH
22861: LD_INT 1
22863: PPUSH
22864: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22868: LD_INT 54
22870: PPUSH
22871: LD_VAR 0 3
22875: PPUSH
22876: LD_INT 1
22878: PPUSH
22879: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22883: LD_INT 0
22885: PPUSH
22886: LD_VAR 0 3
22890: PPUSH
22891: LD_INT 1
22893: PPUSH
22894: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22898: LD_INT 1
22900: PPUSH
22901: LD_VAR 0 3
22905: PPUSH
22906: LD_INT 1
22908: PPUSH
22909: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22913: LD_INT 2
22915: PPUSH
22916: LD_VAR 0 3
22920: PPUSH
22921: LD_INT 1
22923: PPUSH
22924: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22928: LD_INT 3
22930: PPUSH
22931: LD_VAR 0 3
22935: PPUSH
22936: LD_INT 1
22938: PPUSH
22939: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22943: LD_INT 4
22945: PPUSH
22946: LD_VAR 0 3
22950: PPUSH
22951: LD_INT 1
22953: PPUSH
22954: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22958: LD_INT 5
22960: PPUSH
22961: LD_VAR 0 3
22965: PPUSH
22966: LD_INT 1
22968: PPUSH
22969: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22973: LD_INT 6
22975: PPUSH
22976: LD_VAR 0 3
22980: PPUSH
22981: LD_INT 1
22983: PPUSH
22984: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22988: LD_INT 7
22990: PPUSH
22991: LD_VAR 0 3
22995: PPUSH
22996: LD_INT 1
22998: PPUSH
22999: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23003: LD_INT 8
23005: PPUSH
23006: LD_VAR 0 3
23010: PPUSH
23011: LD_INT 1
23013: PPUSH
23014: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23018: LD_INT 10
23020: PPUSH
23021: LD_VAR 0 3
23025: PPUSH
23026: LD_INT 1
23028: PPUSH
23029: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23033: LD_INT 11
23035: PPUSH
23036: LD_VAR 0 3
23040: PPUSH
23041: LD_INT 1
23043: PPUSH
23044: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23048: LD_INT 12
23050: PPUSH
23051: LD_VAR 0 3
23055: PPUSH
23056: LD_INT 1
23058: PPUSH
23059: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23063: LD_INT 13
23065: PPUSH
23066: LD_VAR 0 3
23070: PPUSH
23071: LD_INT 1
23073: PPUSH
23074: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23078: LD_INT 14
23080: PPUSH
23081: LD_VAR 0 3
23085: PPUSH
23086: LD_INT 1
23088: PPUSH
23089: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23093: LD_INT 15
23095: PPUSH
23096: LD_VAR 0 3
23100: PPUSH
23101: LD_INT 1
23103: PPUSH
23104: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23108: LD_INT 16
23110: PPUSH
23111: LD_VAR 0 3
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23123: LD_INT 17
23125: PPUSH
23126: LD_VAR 0 3
23130: PPUSH
23131: LD_INT 1
23133: PPUSH
23134: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23138: LD_INT 19
23140: PPUSH
23141: LD_VAR 0 3
23145: PPUSH
23146: LD_INT 1
23148: PPUSH
23149: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23153: LD_INT 20
23155: PPUSH
23156: LD_VAR 0 3
23160: PPUSH
23161: LD_INT 1
23163: PPUSH
23164: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23168: LD_INT 21
23170: PPUSH
23171: LD_VAR 0 3
23175: PPUSH
23176: LD_INT 1
23178: PPUSH
23179: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23183: LD_INT 23
23185: PPUSH
23186: LD_VAR 0 3
23190: PPUSH
23191: LD_INT 1
23193: PPUSH
23194: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23198: LD_INT 26
23200: PPUSH
23201: LD_VAR 0 3
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23213: LD_INT 27
23215: PPUSH
23216: LD_VAR 0 3
23220: PPUSH
23221: LD_INT 1
23223: PPUSH
23224: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23228: LD_INT 28
23230: PPUSH
23231: LD_VAR 0 3
23235: PPUSH
23236: LD_INT 1
23238: PPUSH
23239: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23243: LD_INT 29
23245: PPUSH
23246: LD_VAR 0 3
23250: PPUSH
23251: LD_INT 1
23253: PPUSH
23254: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23258: LD_INT 30
23260: PPUSH
23261: LD_VAR 0 3
23265: PPUSH
23266: LD_INT 1
23268: PPUSH
23269: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23273: LD_INT 31
23275: PPUSH
23276: LD_VAR 0 3
23280: PPUSH
23281: LD_INT 1
23283: PPUSH
23284: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23288: LD_INT 32
23290: PPUSH
23291: LD_VAR 0 3
23295: PPUSH
23296: LD_INT 1
23298: PPUSH
23299: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23303: LD_INT 36
23305: PPUSH
23306: LD_VAR 0 3
23310: PPUSH
23311: LD_INT 1
23313: PPUSH
23314: CALL_OW 324
// end ; 5 :
23318: GO 25449
23320: LD_INT 5
23322: DOUBLE
23323: EQUAL
23324: IFTRUE 23328
23326: GO 24441
23328: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23329: LD_INT 35
23331: PPUSH
23332: LD_VAR 0 3
23336: PPUSH
23337: LD_INT 1
23339: PPUSH
23340: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23344: LD_INT 45
23346: PPUSH
23347: LD_VAR 0 3
23351: PPUSH
23352: LD_INT 1
23354: PPUSH
23355: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23359: LD_INT 46
23361: PPUSH
23362: LD_VAR 0 3
23366: PPUSH
23367: LD_INT 1
23369: PPUSH
23370: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23374: LD_INT 47
23376: PPUSH
23377: LD_VAR 0 3
23381: PPUSH
23382: LD_INT 1
23384: PPUSH
23385: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23389: LD_INT 1
23391: PPUSH
23392: LD_VAR 0 3
23396: PPUSH
23397: LD_INT 1
23399: PPUSH
23400: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23404: LD_INT 2
23406: PPUSH
23407: LD_VAR 0 3
23411: PPUSH
23412: LD_INT 1
23414: PPUSH
23415: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23419: LD_INT 11
23421: PPUSH
23422: LD_VAR 0 3
23426: PPUSH
23427: LD_INT 1
23429: PPUSH
23430: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23434: LD_INT 20
23436: PPUSH
23437: LD_VAR 0 3
23441: PPUSH
23442: LD_INT 1
23444: PPUSH
23445: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23449: LD_INT 48
23451: PPUSH
23452: LD_VAR 0 3
23456: PPUSH
23457: LD_INT 1
23459: PPUSH
23460: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23464: LD_INT 49
23466: PPUSH
23467: LD_VAR 0 3
23471: PPUSH
23472: LD_INT 1
23474: PPUSH
23475: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23479: LD_INT 69
23481: PPUSH
23482: LD_VAR 0 3
23486: PPUSH
23487: LD_INT 1
23489: PPUSH
23490: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23494: LD_INT 39
23496: PPUSH
23497: LD_VAR 0 3
23501: PPUSH
23502: LD_INT 1
23504: PPUSH
23505: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23509: LD_INT 34
23511: PPUSH
23512: LD_VAR 0 3
23516: PPUSH
23517: LD_INT 1
23519: PPUSH
23520: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23524: LD_INT 42
23526: PPUSH
23527: LD_VAR 0 3
23531: PPUSH
23532: LD_INT 1
23534: PPUSH
23535: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23539: LD_INT 44
23541: PPUSH
23542: LD_VAR 0 3
23546: PPUSH
23547: LD_INT 1
23549: PPUSH
23550: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23554: LD_INT 41
23556: PPUSH
23557: LD_VAR 0 3
23561: PPUSH
23562: LD_INT 1
23564: PPUSH
23565: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
23569: LD_INT 40
23571: PPUSH
23572: LD_VAR 0 3
23576: PPUSH
23577: LD_INT 1
23579: PPUSH
23580: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23584: LD_INT 43
23586: PPUSH
23587: LD_VAR 0 3
23591: PPUSH
23592: LD_INT 1
23594: PPUSH
23595: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23599: LD_INT 70
23601: PPUSH
23602: LD_VAR 0 3
23606: PPUSH
23607: LD_INT 1
23609: PPUSH
23610: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23614: LD_INT 51
23616: PPUSH
23617: LD_VAR 0 3
23621: PPUSH
23622: LD_INT 1
23624: PPUSH
23625: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23629: LD_INT 52
23631: PPUSH
23632: LD_VAR 0 3
23636: PPUSH
23637: LD_INT 1
23639: PPUSH
23640: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23644: LD_INT 6
23646: PPUSH
23647: LD_VAR 0 3
23651: PPUSH
23652: LD_INT 1
23654: PPUSH
23655: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23659: LD_INT 15
23661: PPUSH
23662: LD_VAR 0 3
23666: PPUSH
23667: LD_INT 1
23669: PPUSH
23670: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23674: LD_INT 7
23676: PPUSH
23677: LD_VAR 0 3
23681: PPUSH
23682: LD_INT 1
23684: PPUSH
23685: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23689: LD_INT 12
23691: PPUSH
23692: LD_VAR 0 3
23696: PPUSH
23697: LD_INT 1
23699: PPUSH
23700: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
23704: LD_INT 17
23706: PPUSH
23707: LD_VAR 0 3
23711: PPUSH
23712: LD_INT 1
23714: PPUSH
23715: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23719: LD_INT 18
23721: PPUSH
23722: LD_VAR 0 3
23726: PPUSH
23727: LD_INT 1
23729: PPUSH
23730: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23734: LD_INT 60
23736: PPUSH
23737: LD_VAR 0 3
23741: PPUSH
23742: LD_INT 1
23744: PPUSH
23745: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23749: LD_INT 32
23751: PPUSH
23752: LD_VAR 0 3
23756: PPUSH
23757: LD_INT 1
23759: PPUSH
23760: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23764: LD_INT 9
23766: PPUSH
23767: LD_VAR 0 3
23771: PPUSH
23772: LD_INT 1
23774: PPUSH
23775: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23779: LD_INT 57
23781: PPUSH
23782: LD_VAR 0 3
23786: PPUSH
23787: LD_INT 1
23789: PPUSH
23790: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23794: LD_INT 30
23796: PPUSH
23797: LD_VAR 0 3
23801: PPUSH
23802: LD_INT 1
23804: PPUSH
23805: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23809: LD_INT 37
23811: PPUSH
23812: LD_VAR 0 3
23816: PPUSH
23817: LD_INT 1
23819: PPUSH
23820: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23824: LD_INT 63
23826: PPUSH
23827: LD_VAR 0 3
23831: PPUSH
23832: LD_INT 1
23834: PPUSH
23835: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23839: LD_INT 3
23841: PPUSH
23842: LD_VAR 0 3
23846: PPUSH
23847: LD_INT 1
23849: PPUSH
23850: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23854: LD_INT 4
23856: PPUSH
23857: LD_VAR 0 3
23861: PPUSH
23862: LD_INT 1
23864: PPUSH
23865: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23869: LD_INT 5
23871: PPUSH
23872: LD_VAR 0 3
23876: PPUSH
23877: LD_INT 1
23879: PPUSH
23880: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23884: LD_INT 66
23886: PPUSH
23887: LD_VAR 0 3
23891: PPUSH
23892: LD_INT 1
23894: PPUSH
23895: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23899: LD_INT 21
23901: PPUSH
23902: LD_VAR 0 3
23906: PPUSH
23907: LD_INT 1
23909: PPUSH
23910: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23914: LD_INT 22
23916: PPUSH
23917: LD_VAR 0 3
23921: PPUSH
23922: LD_INT 1
23924: PPUSH
23925: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23929: LD_INT 19
23931: PPUSH
23932: LD_VAR 0 3
23936: PPUSH
23937: LD_INT 1
23939: PPUSH
23940: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23944: LD_INT 54
23946: PPUSH
23947: LD_VAR 0 3
23951: PPUSH
23952: LD_INT 1
23954: PPUSH
23955: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23959: LD_INT 55
23961: PPUSH
23962: LD_VAR 0 3
23966: PPUSH
23967: LD_INT 1
23969: PPUSH
23970: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23974: LD_INT 0
23976: PPUSH
23977: LD_VAR 0 3
23981: PPUSH
23982: LD_INT 1
23984: PPUSH
23985: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23989: LD_INT 1
23991: PPUSH
23992: LD_VAR 0 3
23996: PPUSH
23997: LD_INT 1
23999: PPUSH
24000: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24004: LD_INT 2
24006: PPUSH
24007: LD_VAR 0 3
24011: PPUSH
24012: LD_INT 1
24014: PPUSH
24015: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24019: LD_INT 3
24021: PPUSH
24022: LD_VAR 0 3
24026: PPUSH
24027: LD_INT 1
24029: PPUSH
24030: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24034: LD_INT 4
24036: PPUSH
24037: LD_VAR 0 3
24041: PPUSH
24042: LD_INT 1
24044: PPUSH
24045: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24049: LD_INT 5
24051: PPUSH
24052: LD_VAR 0 3
24056: PPUSH
24057: LD_INT 1
24059: PPUSH
24060: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24064: LD_INT 6
24066: PPUSH
24067: LD_VAR 0 3
24071: PPUSH
24072: LD_INT 1
24074: PPUSH
24075: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24079: LD_INT 7
24081: PPUSH
24082: LD_VAR 0 3
24086: PPUSH
24087: LD_INT 1
24089: PPUSH
24090: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24094: LD_INT 8
24096: PPUSH
24097: LD_VAR 0 3
24101: PPUSH
24102: LD_INT 1
24104: PPUSH
24105: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24109: LD_INT 10
24111: PPUSH
24112: LD_VAR 0 3
24116: PPUSH
24117: LD_INT 1
24119: PPUSH
24120: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24124: LD_INT 11
24126: PPUSH
24127: LD_VAR 0 3
24131: PPUSH
24132: LD_INT 1
24134: PPUSH
24135: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24139: LD_INT 12
24141: PPUSH
24142: LD_VAR 0 3
24146: PPUSH
24147: LD_INT 1
24149: PPUSH
24150: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24154: LD_INT 13
24156: PPUSH
24157: LD_VAR 0 3
24161: PPUSH
24162: LD_INT 1
24164: PPUSH
24165: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24169: LD_INT 14
24171: PPUSH
24172: LD_VAR 0 3
24176: PPUSH
24177: LD_INT 1
24179: PPUSH
24180: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24184: LD_INT 15
24186: PPUSH
24187: LD_VAR 0 3
24191: PPUSH
24192: LD_INT 1
24194: PPUSH
24195: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24199: LD_INT 16
24201: PPUSH
24202: LD_VAR 0 3
24206: PPUSH
24207: LD_INT 1
24209: PPUSH
24210: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24214: LD_INT 17
24216: PPUSH
24217: LD_VAR 0 3
24221: PPUSH
24222: LD_INT 1
24224: PPUSH
24225: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24229: LD_INT 18
24231: PPUSH
24232: LD_VAR 0 3
24236: PPUSH
24237: LD_INT 1
24239: PPUSH
24240: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
24244: LD_INT 19
24246: PPUSH
24247: LD_VAR 0 3
24251: PPUSH
24252: LD_INT 1
24254: PPUSH
24255: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
24259: LD_INT 20
24261: PPUSH
24262: LD_VAR 0 3
24266: PPUSH
24267: LD_INT 1
24269: PPUSH
24270: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
24274: LD_INT 21
24276: PPUSH
24277: LD_VAR 0 3
24281: PPUSH
24282: LD_INT 1
24284: PPUSH
24285: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
24289: LD_INT 23
24291: PPUSH
24292: LD_VAR 0 3
24296: PPUSH
24297: LD_INT 1
24299: PPUSH
24300: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
24304: LD_INT 26
24306: PPUSH
24307: LD_VAR 0 3
24311: PPUSH
24312: LD_INT 1
24314: PPUSH
24315: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
24319: LD_INT 27
24321: PPUSH
24322: LD_VAR 0 3
24326: PPUSH
24327: LD_INT 1
24329: PPUSH
24330: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
24334: LD_INT 28
24336: PPUSH
24337: LD_VAR 0 3
24341: PPUSH
24342: LD_INT 1
24344: PPUSH
24345: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
24349: LD_INT 29
24351: PPUSH
24352: LD_VAR 0 3
24356: PPUSH
24357: LD_INT 1
24359: PPUSH
24360: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24364: LD_INT 30
24366: PPUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: LD_INT 1
24374: PPUSH
24375: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24379: LD_INT 31
24381: PPUSH
24382: LD_VAR 0 3
24386: PPUSH
24387: LD_INT 1
24389: PPUSH
24390: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24394: LD_INT 32
24396: PPUSH
24397: LD_VAR 0 3
24401: PPUSH
24402: LD_INT 1
24404: PPUSH
24405: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
24409: LD_INT 33
24411: PPUSH
24412: LD_VAR 0 3
24416: PPUSH
24417: LD_INT 1
24419: PPUSH
24420: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
24424: LD_INT 36
24426: PPUSH
24427: LD_VAR 0 3
24431: PPUSH
24432: LD_INT 1
24434: PPUSH
24435: CALL_OW 324
// end ; 6 :
24439: GO 25449
24441: LD_INT 6
24443: DOUBLE
24444: EQUAL
24445: IFTRUE 24449
24447: GO 25374
24449: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
24450: LD_INT 35
24452: PPUSH
24453: LD_VAR 0 3
24457: PPUSH
24458: LD_INT 1
24460: PPUSH
24461: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
24465: LD_INT 45
24467: PPUSH
24468: LD_VAR 0 3
24472: PPUSH
24473: LD_INT 1
24475: PPUSH
24476: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
24480: LD_INT 46
24482: PPUSH
24483: LD_VAR 0 3
24487: PPUSH
24488: LD_INT 1
24490: PPUSH
24491: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
24495: LD_INT 47
24497: PPUSH
24498: LD_VAR 0 3
24502: PPUSH
24503: LD_INT 1
24505: PPUSH
24506: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
24510: LD_INT 1
24512: PPUSH
24513: LD_VAR 0 3
24517: PPUSH
24518: LD_INT 1
24520: PPUSH
24521: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
24525: LD_INT 2
24527: PPUSH
24528: LD_VAR 0 3
24532: PPUSH
24533: LD_INT 1
24535: PPUSH
24536: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
24540: LD_INT 11
24542: PPUSH
24543: LD_VAR 0 3
24547: PPUSH
24548: LD_INT 1
24550: PPUSH
24551: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24555: LD_INT 20
24557: PPUSH
24558: LD_VAR 0 3
24562: PPUSH
24563: LD_INT 1
24565: PPUSH
24566: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24570: LD_INT 48
24572: PPUSH
24573: LD_VAR 0 3
24577: PPUSH
24578: LD_INT 1
24580: PPUSH
24581: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24585: LD_INT 49
24587: PPUSH
24588: LD_VAR 0 3
24592: PPUSH
24593: LD_INT 1
24595: PPUSH
24596: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
24600: LD_INT 50
24602: PPUSH
24603: LD_VAR 0 3
24607: PPUSH
24608: LD_INT 1
24610: PPUSH
24611: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24615: LD_INT 69
24617: PPUSH
24618: LD_VAR 0 3
24622: PPUSH
24623: LD_INT 1
24625: PPUSH
24626: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24630: LD_INT 39
24632: PPUSH
24633: LD_VAR 0 3
24637: PPUSH
24638: LD_INT 1
24640: PPUSH
24641: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24645: LD_INT 34
24647: PPUSH
24648: LD_VAR 0 3
24652: PPUSH
24653: LD_INT 1
24655: PPUSH
24656: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24660: LD_INT 42
24662: PPUSH
24663: LD_VAR 0 3
24667: PPUSH
24668: LD_INT 1
24670: PPUSH
24671: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24675: LD_INT 44
24677: PPUSH
24678: LD_VAR 0 3
24682: PPUSH
24683: LD_INT 1
24685: PPUSH
24686: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24690: LD_INT 41
24692: PPUSH
24693: LD_VAR 0 3
24697: PPUSH
24698: LD_INT 1
24700: PPUSH
24701: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
24705: LD_INT 13
24707: PPUSH
24708: LD_VAR 0 3
24712: PPUSH
24713: LD_INT 1
24715: PPUSH
24716: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24720: LD_INT 40
24722: PPUSH
24723: LD_VAR 0 3
24727: PPUSH
24728: LD_INT 1
24730: PPUSH
24731: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24735: LD_INT 43
24737: PPUSH
24738: LD_VAR 0 3
24742: PPUSH
24743: LD_INT 1
24745: PPUSH
24746: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24750: LD_INT 70
24752: PPUSH
24753: LD_VAR 0 3
24757: PPUSH
24758: LD_INT 1
24760: PPUSH
24761: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
24765: LD_INT 23
24767: PPUSH
24768: LD_VAR 0 3
24772: PPUSH
24773: LD_INT 1
24775: PPUSH
24776: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24780: LD_INT 51
24782: PPUSH
24783: LD_VAR 0 3
24787: PPUSH
24788: LD_INT 1
24790: PPUSH
24791: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24795: LD_INT 52
24797: PPUSH
24798: LD_VAR 0 3
24802: PPUSH
24803: LD_INT 1
24805: PPUSH
24806: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24810: LD_INT 6
24812: PPUSH
24813: LD_VAR 0 3
24817: PPUSH
24818: LD_INT 1
24820: PPUSH
24821: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24825: LD_INT 15
24827: PPUSH
24828: LD_VAR 0 3
24832: PPUSH
24833: LD_INT 1
24835: PPUSH
24836: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24840: LD_INT 7
24842: PPUSH
24843: LD_VAR 0 3
24847: PPUSH
24848: LD_INT 1
24850: PPUSH
24851: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24855: LD_INT 12
24857: PPUSH
24858: LD_VAR 0 3
24862: PPUSH
24863: LD_INT 1
24865: PPUSH
24866: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
24870: LD_INT 10
24872: PPUSH
24873: LD_VAR 0 3
24877: PPUSH
24878: LD_INT 1
24880: PPUSH
24881: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24885: LD_INT 17
24887: PPUSH
24888: LD_VAR 0 3
24892: PPUSH
24893: LD_INT 1
24895: PPUSH
24896: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24900: LD_INT 18
24902: PPUSH
24903: LD_VAR 0 3
24907: PPUSH
24908: LD_INT 1
24910: PPUSH
24911: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24915: LD_INT 60
24917: PPUSH
24918: LD_VAR 0 3
24922: PPUSH
24923: LD_INT 1
24925: PPUSH
24926: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
24930: LD_INT 61
24932: PPUSH
24933: LD_VAR 0 3
24937: PPUSH
24938: LD_INT 1
24940: PPUSH
24941: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24945: LD_INT 32
24947: PPUSH
24948: LD_VAR 0 3
24952: PPUSH
24953: LD_INT 1
24955: PPUSH
24956: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
24960: LD_INT 27
24962: PPUSH
24963: LD_VAR 0 3
24967: PPUSH
24968: LD_INT 1
24970: PPUSH
24971: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
24975: LD_INT 36
24977: PPUSH
24978: LD_VAR 0 3
24982: PPUSH
24983: LD_INT 1
24985: PPUSH
24986: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
24990: LD_INT 33
24992: PPUSH
24993: LD_VAR 0 3
24997: PPUSH
24998: LD_INT 1
25000: PPUSH
25001: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25005: LD_INT 9
25007: PPUSH
25008: LD_VAR 0 3
25012: PPUSH
25013: LD_INT 1
25015: PPUSH
25016: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25020: LD_INT 38
25022: PPUSH
25023: LD_VAR 0 3
25027: PPUSH
25028: LD_INT 1
25030: PPUSH
25031: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25035: LD_INT 57
25037: PPUSH
25038: LD_VAR 0 3
25042: PPUSH
25043: LD_INT 1
25045: PPUSH
25046: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25050: LD_INT 58
25052: PPUSH
25053: LD_VAR 0 3
25057: PPUSH
25058: LD_INT 1
25060: PPUSH
25061: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25065: LD_INT 28
25067: PPUSH
25068: LD_VAR 0 3
25072: PPUSH
25073: LD_INT 1
25075: PPUSH
25076: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25080: LD_INT 29
25082: PPUSH
25083: LD_VAR 0 3
25087: PPUSH
25088: LD_INT 1
25090: PPUSH
25091: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25095: LD_INT 30
25097: PPUSH
25098: LD_VAR 0 3
25102: PPUSH
25103: LD_INT 1
25105: PPUSH
25106: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25110: LD_INT 37
25112: PPUSH
25113: LD_VAR 0 3
25117: PPUSH
25118: LD_INT 1
25120: PPUSH
25121: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25125: LD_INT 63
25127: PPUSH
25128: LD_VAR 0 3
25132: PPUSH
25133: LD_INT 1
25135: PPUSH
25136: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25140: LD_INT 64
25142: PPUSH
25143: LD_VAR 0 3
25147: PPUSH
25148: LD_INT 1
25150: PPUSH
25151: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25155: LD_INT 3
25157: PPUSH
25158: LD_VAR 0 3
25162: PPUSH
25163: LD_INT 1
25165: PPUSH
25166: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25170: LD_INT 4
25172: PPUSH
25173: LD_VAR 0 3
25177: PPUSH
25178: LD_INT 1
25180: PPUSH
25181: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25185: LD_INT 5
25187: PPUSH
25188: LD_VAR 0 3
25192: PPUSH
25193: LD_INT 1
25195: PPUSH
25196: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25200: LD_INT 8
25202: PPUSH
25203: LD_VAR 0 3
25207: PPUSH
25208: LD_INT 1
25210: PPUSH
25211: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25215: LD_INT 66
25217: PPUSH
25218: LD_VAR 0 3
25222: PPUSH
25223: LD_INT 1
25225: PPUSH
25226: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25230: LD_INT 67
25232: PPUSH
25233: LD_VAR 0 3
25237: PPUSH
25238: LD_INT 1
25240: PPUSH
25241: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
25245: LD_INT 21
25247: PPUSH
25248: LD_VAR 0 3
25252: PPUSH
25253: LD_INT 1
25255: PPUSH
25256: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
25260: LD_INT 22
25262: PPUSH
25263: LD_VAR 0 3
25267: PPUSH
25268: LD_INT 1
25270: PPUSH
25271: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
25275: LD_INT 19
25277: PPUSH
25278: LD_VAR 0 3
25282: PPUSH
25283: LD_INT 1
25285: PPUSH
25286: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
25290: LD_INT 26
25292: PPUSH
25293: LD_VAR 0 3
25297: PPUSH
25298: LD_INT 1
25300: PPUSH
25301: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
25305: LD_INT 54
25307: PPUSH
25308: LD_VAR 0 3
25312: PPUSH
25313: LD_INT 1
25315: PPUSH
25316: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
25320: LD_INT 55
25322: PPUSH
25323: LD_VAR 0 3
25327: PPUSH
25328: LD_INT 1
25330: PPUSH
25331: CALL_OW 322
// for i = 0 to 39 do
25335: LD_ADDR_VAR 0 4
25339: PUSH
25340: DOUBLE
25341: LD_INT 0
25343: DEC
25344: ST_TO_ADDR
25345: LD_INT 39
25347: PUSH
25348: FOR_TO
25349: IFFALSE 25370
// SetRestrict ( i , side , true ) ;
25351: LD_VAR 0 4
25355: PPUSH
25356: LD_VAR 0 3
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: CALL_OW 324
25368: GO 25348
25370: POP
25371: POP
// end ; else
25372: GO 25449
25374: POP
// begin for i = 1 to 73 do
25375: LD_ADDR_VAR 0 4
25379: PUSH
25380: DOUBLE
25381: LD_INT 1
25383: DEC
25384: ST_TO_ADDR
25385: LD_INT 73
25387: PUSH
25388: FOR_TO
25389: IFFALSE 25410
// SetTech ( i , side , state_enabled ) ;
25391: LD_VAR 0 4
25395: PPUSH
25396: LD_VAR 0 3
25400: PPUSH
25401: LD_INT 1
25403: PPUSH
25404: CALL_OW 322
25408: GO 25388
25410: POP
25411: POP
// for i = 0 to 39 do
25412: LD_ADDR_VAR 0 4
25416: PUSH
25417: DOUBLE
25418: LD_INT 0
25420: DEC
25421: ST_TO_ADDR
25422: LD_INT 39
25424: PUSH
25425: FOR_TO
25426: IFFALSE 25447
// SetRestrict ( i , side , true ) ;
25428: LD_VAR 0 4
25432: PPUSH
25433: LD_VAR 0 3
25437: PPUSH
25438: LD_INT 1
25440: PPUSH
25441: CALL_OW 324
25445: GO 25425
25447: POP
25448: POP
// end ; end ; end ;
25449: GO 21454
25451: POP
25452: POP
// end ; end_of_file
25453: LD_VAR 0 2
25457: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
25458: LD_INT 0
25460: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
25461: LD_VAR 0 1
25465: PPUSH
25466: LD_VAR 0 2
25470: PPUSH
25471: LD_VAR 0 3
25475: PPUSH
25476: LD_INT 0
25478: PPUSH
25479: CALL 25488 0 4
// end ;
25483: LD_VAR 0 4
25487: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
25488: LD_INT 0
25490: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
25491: LD_STRING initScore({
25493: PUSH
25494: LD_VAR 0 1
25498: PUSH
25499: LD_INT 1
25501: ARRAY
25502: STR
25503: PUSH
25504: LD_STRING ,
25506: STR
25507: PUSH
25508: LD_VAR 0 1
25512: PUSH
25513: LD_INT 2
25515: ARRAY
25516: STR
25517: PUSH
25518: LD_STRING ,
25520: STR
25521: PUSH
25522: LD_VAR 0 1
25526: PUSH
25527: LD_INT 3
25529: ARRAY
25530: STR
25531: PUSH
25532: LD_STRING ,
25534: STR
25535: PUSH
25536: LD_VAR 0 1
25540: PUSH
25541: LD_INT 4
25543: ARRAY
25544: STR
25545: PUSH
25546: LD_STRING ,
25548: STR
25549: PUSH
25550: LD_VAR 0 1
25554: PUSH
25555: LD_INT 5
25557: ARRAY
25558: STR
25559: PUSH
25560: LD_STRING ,
25562: STR
25563: PUSH
25564: LD_VAR 0 1
25568: PUSH
25569: LD_INT 6
25571: ARRAY
25572: STR
25573: PUSH
25574: LD_STRING ,
25576: STR
25577: PUSH
25578: LD_VAR 0 1
25582: PUSH
25583: LD_INT 7
25585: ARRAY
25586: STR
25587: PUSH
25588: LD_STRING ,
25590: STR
25591: PUSH
25592: LD_VAR 0 1
25596: PUSH
25597: LD_INT 8
25599: ARRAY
25600: STR
25601: PUSH
25602: LD_STRING },
25604: STR
25605: PUSH
25606: LD_VAR 0 2
25610: STR
25611: PUSH
25612: LD_STRING ,
25614: STR
25615: PUSH
25616: LD_VAR 0 3
25620: STR
25621: PUSH
25622: LD_STRING ,
25624: STR
25625: PUSH
25626: LD_VAR 0 4
25630: STR
25631: PUSH
25632: LD_STRING );
25634: STR
25635: PPUSH
25636: CALL_OW 559
// end ;
25640: LD_VAR 0 5
25644: RET
// export function LScore_Reset ( ) ; begin
25645: LD_INT 0
25647: PPUSH
// ToLua ( ResetScorebar(); ) ;
25648: LD_STRING ResetScorebar();
25650: PPUSH
25651: CALL_OW 559
// end ;
25655: LD_VAR 0 1
25659: RET
// export function LScore_Delete ( ID ) ; begin
25660: LD_INT 0
25662: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
25663: LD_STRING deleteScore(
25665: PUSH
25666: LD_VAR 0 1
25670: STR
25671: PUSH
25672: LD_STRING );
25674: STR
25675: PPUSH
25676: CALL_OW 559
// end ;
25680: LD_VAR 0 2
25684: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
25685: LD_INT 0
25687: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
25688: LD_STRING AST(
25690: PUSH
25691: LD_VAR 0 1
25695: STR
25696: PUSH
25697: LD_STRING ,
25699: STR
25700: PUSH
25701: LD_VAR 0 2
25705: STR
25706: PUSH
25707: LD_STRING ,
25709: STR
25710: PUSH
25711: LD_VAR 0 3
25715: STR
25716: PUSH
25717: LD_STRING ,);
25719: STR
25720: PPUSH
25721: CALL_OW 559
// end ;
25725: LD_VAR 0 4
25729: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
25730: LD_INT 0
25732: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
25733: LD_STRING AST(
25735: PUSH
25736: LD_VAR 0 1
25740: STR
25741: PUSH
25742: LD_STRING ,
25744: STR
25745: PUSH
25746: LD_VAR 0 2
25750: STR
25751: PUSH
25752: LD_STRING ,
25754: STR
25755: PUSH
25756: LD_VAR 0 3
25760: STR
25761: PUSH
25762: LD_STRING ,
25764: STR
25765: PUSH
25766: LD_VAR 0 4
25770: STR
25771: PUSH
25772: LD_STRING );
25774: STR
25775: PPUSH
25776: CALL_OW 559
// end ;
25780: LD_VAR 0 5
25784: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
25785: LD_INT 0
25787: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
25788: LD_STRING AST(
25790: PUSH
25791: LD_VAR 0 1
25795: STR
25796: PUSH
25797: LD_STRING ,
25799: STR
25800: PUSH
25801: LD_VAR 0 2
25805: STR
25806: PUSH
25807: LD_STRING ,
25809: STR
25810: PUSH
25811: LD_VAR 0 3
25815: STR
25816: PUSH
25817: LD_STRING ,
25819: STR
25820: PUSH
25821: LD_VAR 0 4
25825: STR
25826: PUSH
25827: LD_STRING ,
25829: STR
25830: PUSH
25831: LD_VAR 0 5
25835: STR
25836: PUSH
25837: LD_STRING );
25839: STR
25840: PPUSH
25841: CALL_OW 559
// end ;
25845: LD_VAR 0 6
25849: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
25850: LD_INT 0
25852: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
25853: LD_STRING ASRT(
25855: PUSH
25856: LD_VAR 0 1
25860: STR
25861: PUSH
25862: LD_STRING ,
25864: STR
25865: PUSH
25866: LD_VAR 0 2
25870: STR
25871: PUSH
25872: LD_STRING ,
25874: STR
25875: PUSH
25876: LD_VAR 0 3
25880: STR
25881: PUSH
25882: LD_STRING ,);
25884: STR
25885: PPUSH
25886: CALL_OW 559
// end ;
25890: LD_VAR 0 4
25894: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
25895: LD_INT 0
25897: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
25898: LD_STRING ASRT(
25900: PUSH
25901: LD_VAR 0 1
25905: STR
25906: PUSH
25907: LD_STRING ,
25909: STR
25910: PUSH
25911: LD_VAR 0 2
25915: STR
25916: PUSH
25917: LD_STRING ,
25919: STR
25920: PUSH
25921: LD_VAR 0 3
25925: STR
25926: PUSH
25927: LD_STRING ,
25929: STR
25930: PUSH
25931: LD_VAR 0 4
25935: STR
25936: PUSH
25937: LD_STRING );
25939: STR
25940: PPUSH
25941: CALL_OW 559
// end ;
25945: LD_VAR 0 5
25949: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
25950: LD_INT 0
25952: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
25953: LD_STRING ASRT(
25955: PUSH
25956: LD_VAR 0 1
25960: STR
25961: PUSH
25962: LD_STRING ,
25964: STR
25965: PUSH
25966: LD_VAR 0 2
25970: STR
25971: PUSH
25972: LD_STRING ,
25974: STR
25975: PUSH
25976: LD_VAR 0 3
25980: STR
25981: PUSH
25982: LD_STRING ,
25984: STR
25985: PUSH
25986: LD_VAR 0 4
25990: STR
25991: PUSH
25992: LD_STRING ,
25994: STR
25995: PUSH
25996: LD_VAR 0 5
26000: STR
26001: PUSH
26002: LD_STRING );
26004: STR
26005: PPUSH
26006: CALL_OW 559
// end ;
26010: LD_VAR 0 6
26014: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
26015: LD_INT 0
26017: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
26018: LD_STRING UST(
26020: PUSH
26021: LD_VAR 0 1
26025: STR
26026: PUSH
26027: LD_STRING ,
26029: STR
26030: PUSH
26031: LD_VAR 0 2
26035: STR
26036: PUSH
26037: LD_STRING );
26039: STR
26040: PPUSH
26041: CALL_OW 559
// end ;
26045: LD_VAR 0 3
26049: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
26050: LD_INT 0
26052: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
26053: LD_STRING UST(
26055: PUSH
26056: LD_VAR 0 1
26060: STR
26061: PUSH
26062: LD_STRING ,
26064: STR
26065: PUSH
26066: LD_VAR 0 2
26070: STR
26071: PUSH
26072: LD_STRING ,
26074: STR
26075: PUSH
26076: LD_VAR 0 3
26080: STR
26081: PUSH
26082: LD_STRING );
26084: STR
26085: PPUSH
26086: CALL_OW 559
// end ;
26090: LD_VAR 0 4
26094: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
26095: LD_INT 0
26097: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
26098: LD_STRING CCST(
26100: PUSH
26101: LD_VAR 0 1
26105: STR
26106: PUSH
26107: LD_STRING ,{
26109: STR
26110: PUSH
26111: LD_VAR 0 2
26115: STR
26116: PUSH
26117: LD_STRING ,
26119: STR
26120: PUSH
26121: LD_VAR 0 3
26125: STR
26126: PUSH
26127: LD_STRING ,
26129: STR
26130: PUSH
26131: LD_VAR 0 4
26135: STR
26136: PUSH
26137: LD_STRING });
26139: STR
26140: PPUSH
26141: CALL_OW 559
// end ;
26145: LD_VAR 0 5
26149: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
26150: LD_INT 0
26152: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
26153: LD_STRING CCST(
26155: PUSH
26156: LD_VAR 0 1
26160: STR
26161: PUSH
26162: LD_STRING ,
26164: STR
26165: PUSH
26166: LD_VAR 0 2
26170: STR
26171: PUSH
26172: LD_STRING );
26174: STR
26175: PPUSH
26176: CALL_OW 559
// end ;
26180: LD_VAR 0 3
26184: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
26185: LD_INT 0
26187: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
26188: LD_STRING ASSP(
26190: PUSH
26191: LD_VAR 0 1
26195: STR
26196: PUSH
26197: LD_STRING ,
26199: STR
26200: PUSH
26201: LD_VAR 0 2
26205: STR
26206: PUSH
26207: LD_STRING ,
26209: STR
26210: PUSH
26211: LD_VAR 0 3
26215: STR
26216: PUSH
26217: LD_STRING ,);
26219: STR
26220: PPUSH
26221: CALL_OW 559
// end ;
26225: LD_VAR 0 4
26229: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
26230: LD_INT 0
26232: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
26233: LD_STRING ASSP(
26235: PUSH
26236: LD_VAR 0 1
26240: STR
26241: PUSH
26242: LD_STRING ,
26244: STR
26245: PUSH
26246: LD_VAR 0 2
26250: STR
26251: PUSH
26252: LD_STRING ,
26254: STR
26255: PUSH
26256: LD_VAR 0 3
26260: STR
26261: PUSH
26262: LD_STRING ,
26264: STR
26265: PUSH
26266: LD_VAR 0 4
26270: STR
26271: PUSH
26272: LD_STRING );
26274: STR
26275: PPUSH
26276: CALL_OW 559
// end ;
26280: LD_VAR 0 5
26284: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
26285: LD_INT 0
26287: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
26288: LD_STRING ASSP(
26290: PUSH
26291: LD_VAR 0 1
26295: STR
26296: PUSH
26297: LD_STRING ,
26299: STR
26300: PUSH
26301: LD_VAR 0 2
26305: STR
26306: PUSH
26307: LD_STRING ,
26309: STR
26310: PUSH
26311: LD_VAR 0 3
26315: STR
26316: PUSH
26317: LD_STRING ,
26319: STR
26320: PUSH
26321: LD_VAR 0 4
26325: STR
26326: PUSH
26327: LD_STRING ,
26329: STR
26330: PUSH
26331: LD_VAR 0 5
26335: STR
26336: PUSH
26337: LD_STRING );
26339: STR
26340: PPUSH
26341: CALL_OW 559
// end ;
26345: LD_VAR 0 6
26349: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
26350: LD_INT 0
26352: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
26353: LD_STRING ASRSP(
26355: PUSH
26356: LD_VAR 0 1
26360: STR
26361: PUSH
26362: LD_STRING ,
26364: STR
26365: PUSH
26366: LD_VAR 0 2
26370: STR
26371: PUSH
26372: LD_STRING ,
26374: STR
26375: PUSH
26376: LD_VAR 0 3
26380: STR
26381: PUSH
26382: LD_STRING ,);
26384: STR
26385: PPUSH
26386: CALL_OW 559
// end ;
26390: LD_VAR 0 4
26394: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
26395: LD_INT 0
26397: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
26398: LD_STRING ASRSP(
26400: PUSH
26401: LD_VAR 0 1
26405: STR
26406: PUSH
26407: LD_STRING ,
26409: STR
26410: PUSH
26411: LD_VAR 0 2
26415: STR
26416: PUSH
26417: LD_STRING ,
26419: STR
26420: PUSH
26421: LD_VAR 0 3
26425: STR
26426: PUSH
26427: LD_STRING ,
26429: STR
26430: PUSH
26431: LD_VAR 0 4
26435: STR
26436: PUSH
26437: LD_STRING );
26439: STR
26440: PPUSH
26441: CALL_OW 559
// end ;
26445: LD_VAR 0 5
26449: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
26450: LD_INT 0
26452: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
26453: LD_STRING ASRSP(
26455: PUSH
26456: LD_VAR 0 1
26460: STR
26461: PUSH
26462: LD_STRING ,
26464: STR
26465: PUSH
26466: LD_VAR 0 2
26470: STR
26471: PUSH
26472: LD_STRING ,
26474: STR
26475: PUSH
26476: LD_VAR 0 3
26480: STR
26481: PUSH
26482: LD_STRING ,
26484: STR
26485: PUSH
26486: LD_VAR 0 4
26490: STR
26491: PUSH
26492: LD_STRING ,
26494: STR
26495: PUSH
26496: LD_VAR 0 5
26500: STR
26501: PUSH
26502: LD_STRING );
26504: STR
26505: PPUSH
26506: CALL_OW 559
// end ;
26510: LD_VAR 0 6
26514: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
26515: LD_INT 0
26517: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
26518: LD_STRING USSP(
26520: PUSH
26521: LD_VAR 0 1
26525: STR
26526: PUSH
26527: LD_STRING ,
26529: STR
26530: PUSH
26531: LD_VAR 0 2
26535: STR
26536: PUSH
26537: LD_STRING );
26539: STR
26540: PPUSH
26541: CALL_OW 559
// end ;
26545: LD_VAR 0 3
26549: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
26550: LD_INT 0
26552: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
26553: LD_STRING USSP(
26555: PUSH
26556: LD_VAR 0 1
26560: STR
26561: PUSH
26562: LD_STRING ,
26564: STR
26565: PUSH
26566: LD_VAR 0 2
26570: STR
26571: PUSH
26572: LD_STRING ,
26574: STR
26575: PUSH
26576: LD_VAR 0 3
26580: STR
26581: PUSH
26582: LD_STRING );
26584: STR
26585: PPUSH
26586: CALL_OW 559
// end ;
26590: LD_VAR 0 4
26594: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
26595: LD_INT 0
26597: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
26598: LD_STRING CCSSP(
26600: PUSH
26601: LD_VAR 0 1
26605: STR
26606: PUSH
26607: LD_STRING ,{
26609: STR
26610: PUSH
26611: LD_VAR 0 2
26615: STR
26616: PUSH
26617: LD_STRING ,
26619: STR
26620: PUSH
26621: LD_VAR 0 3
26625: STR
26626: PUSH
26627: LD_STRING ,
26629: STR
26630: PUSH
26631: LD_VAR 0 4
26635: STR
26636: PUSH
26637: LD_STRING });
26639: STR
26640: PPUSH
26641: CALL_OW 559
// end ;
26645: LD_VAR 0 5
26649: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
26650: LD_INT 0
26652: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
26653: LD_STRING CCSSP(
26655: PUSH
26656: LD_VAR 0 1
26660: STR
26661: PUSH
26662: LD_STRING ,
26664: STR
26665: PUSH
26666: LD_VAR 0 2
26670: STR
26671: PUSH
26672: LD_STRING );
26674: STR
26675: PPUSH
26676: CALL_OW 559
// end ;
26680: LD_VAR 0 3
26684: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
26685: LD_INT 0
26687: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
26688: LD_STRING ASP(
26690: PUSH
26691: LD_VAR 0 1
26695: STR
26696: PUSH
26697: LD_STRING ,
26699: STR
26700: PUSH
26701: LD_VAR 0 2
26705: STR
26706: PUSH
26707: LD_STRING ,
26709: STR
26710: PUSH
26711: LD_VAR 0 3
26715: STR
26716: PUSH
26717: LD_STRING );
26719: STR
26720: PPUSH
26721: CALL_OW 559
// end ;
26725: LD_VAR 0 4
26729: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
26730: LD_INT 0
26732: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
26733: LD_STRING USP(
26735: PUSH
26736: LD_VAR 0 1
26740: STR
26741: PUSH
26742: LD_STRING ,
26744: STR
26745: PUSH
26746: LD_VAR 0 2
26750: STR
26751: PUSH
26752: LD_STRING ,
26754: STR
26755: PUSH
26756: LD_VAR 0 3
26760: STR
26761: PUSH
26762: LD_STRING );
26764: STR
26765: PPUSH
26766: CALL_OW 559
// end ;
26770: LD_VAR 0 4
26774: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
26775: LD_INT 0
26777: PPUSH
26778: PPUSH
// for i = 1 to 8 do
26779: LD_ADDR_VAR 0 4
26783: PUSH
26784: DOUBLE
26785: LD_INT 1
26787: DEC
26788: ST_TO_ADDR
26789: LD_INT 8
26791: PUSH
26792: FOR_TO
26793: IFFALSE 26840
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
26795: LD_STRING USP(
26797: PUSH
26798: LD_VAR 0 1
26802: STR
26803: PUSH
26804: LD_STRING ,
26806: STR
26807: PUSH
26808: LD_VAR 0 4
26812: STR
26813: PUSH
26814: LD_STRING ,
26816: STR
26817: PUSH
26818: LD_VAR 0 2
26822: PUSH
26823: LD_VAR 0 4
26827: ARRAY
26828: STR
26829: PUSH
26830: LD_STRING );
26832: STR
26833: PPUSH
26834: CALL_OW 559
26838: GO 26792
26840: POP
26841: POP
// end ;
26842: LD_VAR 0 3
26846: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
26847: LD_INT 0
26849: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
26850: LD_STRING ASC(
26852: PUSH
26853: LD_VAR 0 1
26857: STR
26858: PUSH
26859: LD_STRING ,
26861: STR
26862: PUSH
26863: LD_VAR 0 2
26867: STR
26868: PUSH
26869: LD_STRING ,
26871: STR
26872: PUSH
26873: LD_VAR 0 3
26877: STR
26878: PUSH
26879: LD_STRING ,
26881: STR
26882: PUSH
26883: LD_VAR 0 4
26887: STR
26888: PUSH
26889: LD_STRING );
26891: STR
26892: PPUSH
26893: CALL_OW 559
// end ;
26897: LD_VAR 0 5
26901: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
26902: LD_INT 0
26904: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
26905: LD_STRING USC(
26907: PUSH
26908: LD_VAR 0 1
26912: STR
26913: PUSH
26914: LD_STRING ,{
26916: STR
26917: PUSH
26918: LD_VAR 0 2
26922: PUSH
26923: LD_INT 1
26925: ARRAY
26926: STR
26927: PUSH
26928: LD_STRING ,
26930: STR
26931: PUSH
26932: LD_VAR 0 2
26936: PUSH
26937: LD_INT 2
26939: ARRAY
26940: STR
26941: PUSH
26942: LD_STRING ,
26944: STR
26945: PUSH
26946: LD_VAR 0 2
26950: PUSH
26951: LD_INT 3
26953: ARRAY
26954: STR
26955: PUSH
26956: LD_STRING ,
26958: STR
26959: PUSH
26960: LD_VAR 0 2
26964: PUSH
26965: LD_INT 4
26967: ARRAY
26968: STR
26969: PUSH
26970: LD_STRING ,
26972: STR
26973: PUSH
26974: LD_VAR 0 2
26978: PUSH
26979: LD_INT 5
26981: ARRAY
26982: STR
26983: PUSH
26984: LD_STRING ,
26986: STR
26987: PUSH
26988: LD_VAR 0 2
26992: PUSH
26993: LD_INT 6
26995: ARRAY
26996: STR
26997: PUSH
26998: LD_STRING ,
27000: STR
27001: PUSH
27002: LD_VAR 0 2
27006: PUSH
27007: LD_INT 7
27009: ARRAY
27010: STR
27011: PUSH
27012: LD_STRING ,
27014: STR
27015: PUSH
27016: LD_VAR 0 2
27020: PUSH
27021: LD_INT 8
27023: ARRAY
27024: STR
27025: PUSH
27026: LD_STRING });
27028: STR
27029: PPUSH
27030: CALL_OW 559
// end ; end_of_file
27034: LD_VAR 0 3
27038: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
27039: LD_INT 0
27041: PPUSH
27042: PPUSH
27043: PPUSH
27044: PPUSH
27045: PPUSH
27046: PPUSH
27047: PPUSH
27048: PPUSH
27049: PPUSH
// for i := 1 to 8 do
27050: LD_ADDR_VAR 0 2
27054: PUSH
27055: DOUBLE
27056: LD_INT 1
27058: DEC
27059: ST_TO_ADDR
27060: LD_INT 8
27062: PUSH
27063: FOR_TO
27064: IFFALSE 27448
// begin if Side_Positions [ i ] then
27066: LD_EXP 23
27070: PUSH
27071: LD_VAR 0 2
27075: ARRAY
27076: IFFALSE 27446
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
27078: LD_ADDR_VAR 0 7
27082: PUSH
27083: LD_INT 22
27085: PUSH
27086: LD_VAR 0 2
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 21
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PPUSH
27109: CALL_OW 69
27113: PUSH
27114: LD_INT 0
27116: PLUS
27117: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27118: LD_ADDR_VAR 0 9
27122: PUSH
27123: LD_INT 22
27125: PUSH
27126: LD_VAR 0 2
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: PUSH
27138: LD_INT 30
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 30
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: LIST
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PPUSH
27167: CALL_OW 69
27171: ST_TO_ADDR
// crates := 0 ;
27172: LD_ADDR_VAR 0 4
27176: PUSH
27177: LD_INT 0
27179: ST_TO_ADDR
// oil := 0 ;
27180: LD_ADDR_VAR 0 5
27184: PUSH
27185: LD_INT 0
27187: ST_TO_ADDR
// sib := 0 ;
27188: LD_ADDR_VAR 0 6
27192: PUSH
27193: LD_INT 0
27195: ST_TO_ADDR
// if bases then
27196: LD_VAR 0 9
27200: IFFALSE 27306
// begin for j in bases do
27202: LD_ADDR_VAR 0 3
27206: PUSH
27207: LD_VAR 0 9
27211: PUSH
27212: FOR_IN
27213: IFFALSE 27304
// begin base := GetBase ( j ) ;
27215: LD_ADDR_VAR 0 8
27219: PUSH
27220: LD_VAR 0 3
27224: PPUSH
27225: CALL_OW 274
27229: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
27230: LD_ADDR_VAR 0 4
27234: PUSH
27235: LD_VAR 0 4
27239: PUSH
27240: LD_VAR 0 8
27244: PPUSH
27245: LD_INT 1
27247: PPUSH
27248: CALL_OW 275
27252: PLUS
27253: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
27254: LD_ADDR_VAR 0 5
27258: PUSH
27259: LD_VAR 0 5
27263: PUSH
27264: LD_VAR 0 8
27268: PPUSH
27269: LD_INT 2
27271: PPUSH
27272: CALL_OW 275
27276: PLUS
27277: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
27278: LD_ADDR_VAR 0 6
27282: PUSH
27283: LD_VAR 0 6
27287: PUSH
27288: LD_VAR 0 8
27292: PPUSH
27293: LD_INT 3
27295: PPUSH
27296: CALL_OW 275
27300: PLUS
27301: ST_TO_ADDR
// end ;
27302: GO 27212
27304: POP
27305: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
27306: LD_STRING setSpecText(
27308: PUSH
27309: LD_VAR 0 2
27313: STR
27314: PUSH
27315: LD_STRING ,
27317: STR
27318: PUSH
27319: LD_INT 2
27321: STR
27322: PUSH
27323: LD_STRING ,
27325: STR
27326: PUSH
27327: LD_VAR 0 4
27331: STR
27332: PUSH
27333: LD_STRING )
27335: STR
27336: PPUSH
27337: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
27341: LD_STRING setSpecText(
27343: PUSH
27344: LD_VAR 0 2
27348: STR
27349: PUSH
27350: LD_STRING ,
27352: STR
27353: PUSH
27354: LD_INT 3
27356: STR
27357: PUSH
27358: LD_STRING ,
27360: STR
27361: PUSH
27362: LD_VAR 0 5
27366: STR
27367: PUSH
27368: LD_STRING )
27370: STR
27371: PPUSH
27372: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
27376: LD_STRING setSpecText(
27378: PUSH
27379: LD_VAR 0 2
27383: STR
27384: PUSH
27385: LD_STRING ,
27387: STR
27388: PUSH
27389: LD_INT 4
27391: STR
27392: PUSH
27393: LD_STRING ,
27395: STR
27396: PUSH
27397: LD_VAR 0 6
27401: STR
27402: PUSH
27403: LD_STRING )
27405: STR
27406: PPUSH
27407: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
27411: LD_STRING setSpecText(
27413: PUSH
27414: LD_VAR 0 2
27418: STR
27419: PUSH
27420: LD_STRING ,
27422: STR
27423: PUSH
27424: LD_INT 5
27426: STR
27427: PUSH
27428: LD_STRING ,
27430: STR
27431: PUSH
27432: LD_VAR 0 7
27436: STR
27437: PUSH
27438: LD_STRING )
27440: STR
27441: PPUSH
27442: CALL_OW 559
// end ; end ;
27446: GO 27063
27448: POP
27449: POP
// end ;
27450: LD_VAR 0 1
27454: RET
// every 0 0$1 do
27455: GO 27457
27457: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
27458: LD_STRING setSpecLogoNumber(
27460: PUSH
27461: LD_INT 2
27463: STR
27464: PUSH
27465: LD_STRING ,
27467: STR
27468: PUSH
27469: LD_INT 1
27471: STR
27472: PUSH
27473: LD_STRING )
27475: STR
27476: PPUSH
27477: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
27481: LD_STRING setSpecLogoNumber(
27483: PUSH
27484: LD_INT 3
27486: STR
27487: PUSH
27488: LD_STRING ,
27490: STR
27491: PUSH
27492: LD_INT 2
27494: STR
27495: PUSH
27496: LD_STRING )
27498: STR
27499: PPUSH
27500: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
27504: LD_STRING setSpecLogoNumber(
27506: PUSH
27507: LD_INT 4
27509: STR
27510: PUSH
27511: LD_STRING ,
27513: STR
27514: PUSH
27515: LD_INT 3
27517: STR
27518: PUSH
27519: LD_STRING )
27521: STR
27522: PPUSH
27523: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
27527: LD_STRING setSpecLogoNumber(
27529: PUSH
27530: LD_INT 5
27532: STR
27533: PUSH
27534: LD_STRING ,
27536: STR
27537: PUSH
27538: LD_INT 4
27540: STR
27541: PUSH
27542: LD_STRING )
27544: STR
27545: PPUSH
27546: CALL_OW 559
// end ;
27550: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
27551: LD_INT 2
27553: PUSH
27554: LD_INT 30
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 30
27566: PUSH
27567: LD_INT 1
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: PPUSH
27579: CALL_OW 69
27583: IFFALSE 27593
27585: GO 27587
27587: DISABLE
// begin enable ;
27588: ENABLE
// UpdateSpectatorBar ;
27589: CALL 27039 0 0
// end ; end_of_file
27593: END
// var respawn , inqueue ; export function init_respawning ; begin
27594: LD_INT 0
27596: PPUSH
// respawn := Rand ( 1 , 8 ) ;
27597: LD_ADDR_LOC 34
27601: PUSH
27602: LD_INT 1
27604: PPUSH
27605: LD_INT 8
27607: PPUSH
27608: CALL_OW 12
27612: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
27613: LD_ADDR_LOC 35
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: ST_TO_ADDR
// end ;
27652: LD_VAR 0 1
27656: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
27657: GO 27659
27659: DISABLE
27660: LD_INT 0
27662: PPUSH
27663: PPUSH
27664: PPUSH
// begin if respawning_time_max = 0 then
27665: LD_EXP 17
27669: PUSH
27670: LD_INT 0
27672: EQUAL
27673: IFFALSE 27677
// exit ;
27675: GO 28085
// if respawn = 8 then
27677: LD_LOC 34
27681: PUSH
27682: LD_INT 8
27684: EQUAL
27685: IFFALSE 27697
// respawn := 1 else
27687: LD_ADDR_LOC 34
27691: PUSH
27692: LD_INT 1
27694: ST_TO_ADDR
27695: GO 27711
// respawn := respawn + 1 ;
27697: LD_ADDR_LOC 34
27701: PUSH
27702: LD_LOC 34
27706: PUSH
27707: LD_INT 1
27709: PLUS
27710: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
27711: LD_EXP 23
27715: PUSH
27716: LD_LOC 34
27720: ARRAY
27721: PUSH
27722: LD_LOC 35
27726: PUSH
27727: LD_LOC 34
27731: ARRAY
27732: NOT
27733: AND
27734: IFFALSE 28084
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
27736: LD_ADDR_VAR 0 1
27740: PUSH
27741: LD_INT 21
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 22
27753: PUSH
27754: LD_LOC 34
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 3
27765: PUSH
27766: LD_INT 23
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: PPUSH
27782: CALL_OW 69
27786: ST_TO_ADDR
// if n < number_of_people then
27787: LD_VAR 0 1
27791: PUSH
27792: LD_EXP 9
27796: LESS
27797: IFFALSE 28081
// begin aktresp := respawn ;
27799: LD_ADDR_VAR 0 3
27803: PUSH
27804: LD_LOC 34
27808: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
27809: LD_ADDR_LOC 35
27813: PUSH
27814: LD_LOC 35
27818: PPUSH
27819: LD_VAR 0 3
27823: PPUSH
27824: LD_INT 1
27826: PPUSH
27827: CALL_OW 1
27831: ST_TO_ADDR
// enable ;
27832: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
27833: LD_EXP 16
27837: PPUSH
27838: LD_EXP 17
27842: PPUSH
27843: CALL_OW 12
27847: PPUSH
27848: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
27852: LD_ADDR_LOC 35
27856: PUSH
27857: LD_LOC 35
27861: PPUSH
27862: LD_VAR 0 3
27866: PPUSH
27867: LD_INT 0
27869: PPUSH
27870: CALL_OW 1
27874: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
27875: LD_ADDR_VAR 0 2
27879: PUSH
27880: LD_INT 21
27882: PUSH
27883: LD_INT 3
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 2
27892: PUSH
27893: LD_INT 30
27895: PUSH
27896: LD_INT 0
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 30
27905: PUSH
27906: LD_INT 1
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 50
27920: PUSH
27921: EMPTY
27922: LIST
27923: PUSH
27924: LD_INT 22
27926: PUSH
27927: LD_VAR 0 3
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: PPUSH
27942: CALL_OW 69
27946: ST_TO_ADDR
// if dep = 0 then
27947: LD_VAR 0 2
27951: PUSH
27952: LD_INT 0
27954: EQUAL
27955: IFFALSE 27959
// exit ;
27957: GO 28085
// hc_name :=  ;
27959: LD_ADDR_OWVAR 26
27963: PUSH
27964: LD_STRING 
27966: ST_TO_ADDR
// hc_importance := 0 ;
27967: LD_ADDR_OWVAR 32
27971: PUSH
27972: LD_INT 0
27974: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
27975: LD_INT 0
27977: PPUSH
27978: LD_INT 0
27980: PPUSH
27981: LD_EXP 10
27985: PUSH
27986: LD_INT 2
27988: DIV
27989: PPUSH
27990: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
27994: LD_ADDR_OWVAR 21
27998: PUSH
27999: LD_EXP 24
28003: PUSH
28004: LD_VAR 0 3
28008: ARRAY
28009: ST_TO_ADDR
// uc_side := aktresp ;
28010: LD_ADDR_OWVAR 20
28014: PUSH
28015: LD_VAR 0 3
28019: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
28020: LD_ADDR_VAR 0 2
28024: PUSH
28025: LD_VAR 0 2
28029: PUSH
28030: LD_INT 1
28032: PPUSH
28033: LD_VAR 0 2
28037: PPUSH
28038: CALL_OW 12
28042: ARRAY
28043: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
28044: CALL_OW 44
28048: PPUSH
28049: LD_VAR 0 2
28053: PPUSH
28054: CALL_OW 250
28058: PPUSH
28059: LD_VAR 0 2
28063: PPUSH
28064: CALL_OW 251
28068: PPUSH
28069: LD_INT 7
28071: PPUSH
28072: LD_INT 1
28074: PPUSH
28075: CALL_OW 50
// end else
28079: GO 28082
// enable ;
28081: ENABLE
// end else
28082: GO 28085
// enable ;
28084: ENABLE
// end ;
28085: PPOPN 3
28087: END
