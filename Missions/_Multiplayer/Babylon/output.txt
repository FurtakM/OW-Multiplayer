// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 46
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 3 ;
 151: LD_ADDR_EXP 46
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 356: LD_ADDR_EXP 25
 360: PUSH
 361: LD_EXP 21
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: EMPTY
 370: LIST
 371: DIFF
 372: PUSH
 373: LD_INT 1
 375: GREATER
 376: ST_TO_ADDR
// if Multiplayer then
 377: LD_OWVAR 4
 381: IFFALSE 653
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 383: LD_ADDR_EXP 48
 387: PUSH
 388: LD_INT 0
 390: PPUSH
 391: CALL_OW 426
 395: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 396: LD_ADDR_EXP 49
 400: PUSH
 401: LD_INT 1
 403: PPUSH
 404: CALL_OW 426
 408: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 409: LD_ADDR_EXP 50
 413: PUSH
 414: LD_INT 2
 416: PPUSH
 417: CALL_OW 426
 421: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 422: LD_ADDR_EXP 51
 426: PUSH
 427: LD_INT 3
 429: PPUSH
 430: CALL_OW 426
 434: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 435: LD_ADDR_EXP 52
 439: PUSH
 440: LD_INT 4
 442: PPUSH
 443: CALL_OW 426
 447: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 448: LD_ADDR_EXP 53
 452: PUSH
 453: LD_INT 5
 455: PPUSH
 456: CALL_OW 426
 460: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 461: LD_ADDR_EXP 55
 465: PUSH
 466: LD_INT 10
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 474: LD_ADDR_EXP 56
 478: PUSH
 479: LD_INT 11
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 487: LD_ADDR_EXP 57
 491: PUSH
 492: LD_INT 12
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 500: LD_ADDR_EXP 59
 504: PUSH
 505: LD_INT 13
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 513: LD_ADDR_EXP 58
 517: PUSH
 518: LD_INT 14
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 526: LD_ADDR_EXP 60
 530: PUSH
 531: LD_INT 15
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 539: LD_ADDR_EXP 1
 543: PUSH
 544: LD_INT 6
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 552: LD_ADDR_EXP 2
 556: PUSH
 557: LD_INT 7
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 565: LD_ADDR_EXP 4
 569: PUSH
 570: LD_INT 8
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 578: LD_ADDR_EXP 3
 582: PUSH
 583: LD_INT 9
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 591: LD_ADDR_EXP 5
 595: PUSH
 596: LD_INT 16
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 604: LD_ADDR_EXP 6
 608: PUSH
 609: LD_INT 17
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 617: LD_ADDR_EXP 61
 621: PUSH
 622: LD_INT 20
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 630: LD_ADDR_VAR 0 3
 634: PUSH
 635: LD_INT 22
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_win_rules = 0 ;
 643: LD_ADDR_EXP 19
 647: PUSH
 648: LD_INT 0
 650: ST_TO_ADDR
// end else
 651: GO 825
// begin Randomize ;
 653: CALL_OW 10
// def_base_level := 2 ;
 657: LD_ADDR_EXP 48
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_amount_of_people := 1 ;
 665: LD_ADDR_EXP 49
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_skill_level := 1 ;
 673: LD_ADDR_EXP 50
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_starting_resources := 2 ;
 681: LD_ADDR_EXP 51
 685: PUSH
 686: LD_INT 2
 688: ST_TO_ADDR
// def_shipments_density := 1 ;
 689: LD_ADDR_EXP 52
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 697: LD_ADDR_EXP 53
 701: PUSH
 702: LD_INT 0
 704: ST_TO_ADDR
// def_shared_vision := 1 ;
 705: LD_ADDR_EXP 55
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_morale_flags := 1 ;
 713: LD_ADDR_EXP 56
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// def_siberite_detection := 1 ;
 721: LD_ADDR_EXP 57
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 729: LD_ADDR_EXP 59
 733: PUSH
 734: LD_INT 3
 736: ST_TO_ADDR
// def_people_respawning := 2 ;
 737: LD_ADDR_EXP 58
 741: PUSH
 742: LD_INT 2
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 60
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_artefact_one := 1 ;
 753: LD_ADDR_EXP 1
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_artefact_two := 1 ;
 761: LD_ADDR_EXP 2
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 769: LD_ADDR_EXP 4
 773: PUSH
 774: LD_INT 2
 776: ST_TO_ADDR
// def_artefact_three := 1 ;
 777: LD_ADDR_EXP 3
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// def_kings_age := 1 ;
 785: LD_ADDR_EXP 5
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_public_score := 0 ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 0
 800: ST_TO_ADDR
// def_builduptime := 1 ;
 801: LD_ADDR_EXP 61
 805: PUSH
 806: LD_INT 1
 808: ST_TO_ADDR
// tech_level = 4 ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// def_win_rules = 0 ;
 817: LD_ADDR_EXP 19
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// end ; InitGameRules ;
 825: CALL 13297 0 0
// if def_game_rules = 0 then
 829: LD_EXP 47
 833: PUSH
 834: LD_INT 0
 836: EQUAL
 837: IFFALSE 864
// begin if isSGUI then
 839: LD_OWVAR 83
 843: IFFALSE 851
// setMpTechs ( ) else
 845: CALL 21646 0 0
 849: GO 864
// begin SetMpTechLevel ( tech_level + 1 ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: PPUSH
 860: CALL 21793 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 864: LD_ADDR_EXP 7
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: LD_INT 1
 874: PUSH
 875: LD_INT 1
 877: PUSH
 878: LD_INT 1
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: PUSH
 887: LD_EXP 48
 891: PUSH
 892: LD_INT 1
 894: PLUS
 895: ARRAY
 896: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 897: LD_ADDR_EXP 8
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: LD_INT 2
 910: PUSH
 911: LD_INT 3
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_EXP 48
 924: PUSH
 925: LD_INT 1
 927: PLUS
 928: ARRAY
 929: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 930: LD_ADDR_EXP 9
 934: PUSH
 935: LD_EXP 49
 939: PUSH
 940: LD_INT 4
 942: PLUS
 943: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 944: LD_ADDR_EXP 10
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: LD_INT 3
 954: PUSH
 955: LD_INT 4
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: PUSH
 967: LD_EXP 50
 971: PUSH
 972: LD_INT 1
 974: PLUS
 975: ARRAY
 976: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 977: LD_ADDR_EXP 12
 981: PUSH
 982: LD_INT 0
 984: PUSH
 985: LD_INT 0
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 0
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 50
1012: PUSH
1013: LD_INT 20
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 40
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_EXP 51
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1054: LD_ADDR_EXP 11
1058: PUSH
1059: LD_INT 10
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: LD_INT 7
1067: PUSH
1068: LD_INT 14
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 6
1077: PUSH
1078: LD_INT 12
1080: PUSH
1081: LD_INT 18
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 5
1091: PUSH
1092: LD_INT 10
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_EXP 51
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: ARRAY
1122: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1123: LD_ADDR_EXP 13
1127: PUSH
1128: LD_INT 150
1130: PUSH
1131: LD_EXP 52
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: MINUS
1140: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1141: LD_ADDR_EXP 15
1145: PUSH
1146: LD_INT 0
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 2
1154: PUSH
1155: LD_INT 3
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 59
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1174: LD_ADDR_EXP 16
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 12600
1184: PUSH
1185: LD_INT 2100
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 58
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1203: LD_ADDR_EXP 17
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 21000
1213: PUSH
1214: LD_INT 4200
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_EXP 58
1226: PUSH
1227: LD_INT 1
1229: PLUS
1230: ARRAY
1231: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1232: LD_ADDR_EXP 14
1236: PUSH
1237: LD_INT 1
1239: NEG
1240: PUSH
1241: LD_INT 350
1243: PUSH
1244: LD_INT 700
1246: PUSH
1247: LD_INT 1400
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 56
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// battle_flags_id := [ ] ;
1270: LD_ADDR_EXP 33
1274: PUSH
1275: EMPTY
1276: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1277: LD_ADDR_EXP 18
1281: PUSH
1282: LD_INT 0
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 63000
1290: PUSH
1291: LD_INT 126000
1293: PUSH
1294: LD_INT 189000
1296: PUSH
1297: LD_INT 252000
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: PUSH
1308: LD_EXP 60
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1318: LD_ADDR_EXP 20
1322: PUSH
1323: LD_INT 500
1325: PUSH
1326: LD_INT 1000
1328: PUSH
1329: LD_INT 1500
1331: PUSH
1332: LD_INT 2000
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 5
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1351: LD_EXP 60
1355: PUSH
1356: LD_INT 0
1358: EQUAL
1359: IFFALSE 1371
// siberite_bomb_Delay = 0 else
1361: LD_ADDR_EXP 18
1365: PUSH
1366: LD_INT 0
1368: ST_TO_ADDR
1369: GO 1393
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1371: LD_ADDR_EXP 18
1375: PUSH
1376: LD_EXP 60
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: LD_INT 21000
1387: MUL
1388: PUSH
1389: LD_INT 1
1391: PLUS
1392: ST_TO_ADDR
// end ;
1393: LD_VAR 0 1
1397: RET
// function init_map ; var i ; begin
1398: LD_INT 0
1400: PPUSH
1401: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1402: LD_ADDR_EXP 32
1406: PUSH
1407: LD_INT 43
1409: PUSH
1410: LD_INT 9
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 123
1419: PUSH
1420: LD_INT 10
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 113
1429: PUSH
1430: LD_INT 155
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PUSH
1437: LD_INT 186
1439: PUSH
1440: LD_INT 133
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1453: LD_ADDR_EXP 29
1457: PUSH
1458: LD_INT 18
1460: PUSH
1461: LD_INT 17
1463: PUSH
1464: LD_INT 2
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 156
1474: PUSH
1475: LD_INT 20
1477: PUSH
1478: LD_INT 3
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 83
1488: PUSH
1489: LD_INT 140
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 216
1502: PUSH
1503: LD_INT 143
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// for i in depot_def do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: LD_EXP 29
1529: PUSH
1530: FOR_IN
1531: IFFALSE 1605
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1533: LD_ADDR_EXP 31
1537: PUSH
1538: LD_EXP 31
1542: PUSH
1543: LD_VAR 0 2
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 2
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 6
1563: PPUSH
1564: CALL_OW 272
1568: PUSH
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 2
1576: ARRAY
1577: PPUSH
1578: LD_VAR 0 2
1582: PUSH
1583: LD_INT 3
1585: ARRAY
1586: PPUSH
1587: LD_INT 6
1589: PPUSH
1590: CALL_OW 273
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: ADD
1602: ST_TO_ADDR
1603: GO 1530
1605: POP
1606: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1607: LD_ADDR_EXP 30
1611: PUSH
1612: LD_INT 30
1614: PUSH
1615: LD_INT 36
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 44
1628: PUSH
1629: LD_INT 21
1631: PUSH
1632: LD_INT 4
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 43
1642: PUSH
1643: LD_INT 33
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 165
1661: PUSH
1662: LD_INT 34
1664: PUSH
1665: LD_INT 0
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 137
1675: PUSH
1676: LD_INT 18
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 153
1689: PUSH
1690: LD_INT 37
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 86
1708: PUSH
1709: LD_INT 120
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 105
1722: PUSH
1723: LD_INT 147
1725: PUSH
1726: LD_INT 4
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 68
1736: PUSH
1737: LD_INT 118
1739: PUSH
1740: LD_INT 2
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 199
1755: PUSH
1756: LD_INT 144
1758: PUSH
1759: LD_INT 1
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 207
1769: PUSH
1770: LD_INT 119
1772: PUSH
1773: LD_INT 3
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 195
1783: PUSH
1784: LD_INT 118
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: ST_TO_ADDR
// if not def_extra_oil_deposits then
1806: LD_EXP 53
1810: NOT
1811: IFFALSE 1852
// for i in extra_oil_deposits_locations do
1813: LD_ADDR_VAR 0 2
1817: PUSH
1818: LD_EXP 32
1822: PUSH
1823: FOR_IN
1824: IFFALSE 1850
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1826: LD_VAR 0 2
1830: PUSH
1831: LD_INT 1
1833: ARRAY
1834: PPUSH
1835: LD_VAR 0 2
1839: PUSH
1840: LD_INT 2
1842: ARRAY
1843: PPUSH
1844: CALL_OW 63
1848: GO 1823
1850: POP
1851: POP
// end ;
1852: LD_VAR 0 1
1856: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1857: LD_INT 0
1859: PPUSH
1860: PPUSH
1861: PPUSH
// if not Team_Game then
1862: LD_EXP 25
1866: NOT
1867: IFFALSE 1965
// begin for i = 1 to 8 do
1869: LD_ADDR_VAR 0 2
1873: PUSH
1874: DOUBLE
1875: LD_INT 1
1877: DEC
1878: ST_TO_ADDR
1879: LD_INT 8
1881: PUSH
1882: FOR_TO
1883: IFFALSE 1961
// for j = 1 to 8 do
1885: LD_ADDR_VAR 0 3
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 8
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1957
// if i <> j then
1901: LD_VAR 0 2
1905: PUSH
1906: LD_VAR 0 3
1910: NONEQUAL
1911: IFFALSE 1935
// SetAttitude ( i , j , att_neutral , true ) else
1913: LD_VAR 0 2
1917: PPUSH
1918: LD_VAR 0 3
1922: PPUSH
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 80
1933: GO 1955
// SetAttitude ( i , j , att_friend , true ) ;
1935: LD_VAR 0 2
1939: PPUSH
1940: LD_VAR 0 3
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: CALL_OW 80
1955: GO 1898
1957: POP
1958: POP
1959: GO 1882
1961: POP
1962: POP
// end else
1963: GO 2140
// begin if def_shared_vision then
1965: LD_EXP 55
1969: IFFALSE 2034
// begin for i in Teams do
1971: LD_ADDR_VAR 0 2
1975: PUSH
1976: LD_EXP 22
1980: PUSH
1981: FOR_IN
1982: IFFALSE 2032
// for j = 2 to i do
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: DOUBLE
1990: LD_INT 2
1992: DEC
1993: ST_TO_ADDR
1994: LD_VAR 0 2
1998: PUSH
1999: FOR_TO
2000: IFFALSE 2028
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2002: LD_VAR 0 2
2006: PUSH
2007: LD_VAR 0 3
2011: ARRAY
2012: PPUSH
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: CALL_OW 343
2026: GO 1999
2028: POP
2029: POP
2030: GO 1981
2032: POP
2033: POP
// end ; for i = 1 to 8 do
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: DOUBLE
2040: LD_INT 1
2042: DEC
2043: ST_TO_ADDR
2044: LD_INT 8
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2138
// for j = 1 to 8 do
2050: LD_ADDR_VAR 0 3
2054: PUSH
2055: DOUBLE
2056: LD_INT 1
2058: DEC
2059: ST_TO_ADDR
2060: LD_INT 8
2062: PUSH
2063: FOR_TO
2064: IFFALSE 2134
// if Side_Teams [ i ] = Side_Teams [ j ] then
2066: LD_EXP 21
2070: PUSH
2071: LD_VAR 0 2
2075: ARRAY
2076: PUSH
2077: LD_EXP 21
2081: PUSH
2082: LD_VAR 0 3
2086: ARRAY
2087: EQUAL
2088: IFFALSE 2112
// SetAttitude ( i , j , att_friend , true ) else
2090: LD_VAR 0 2
2094: PPUSH
2095: LD_VAR 0 3
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL_OW 80
2110: GO 2132
// SetAttitude ( i , j , att_enemy , true ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: LD_VAR 0 3
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: CALL_OW 80
2132: GO 2063
2134: POP
2135: POP
2136: GO 2047
2138: POP
2139: POP
// end ; end ;
2140: LD_VAR 0 1
2144: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
// result := [ ] ;
2151: LD_ADDR_VAR 0 7
2155: PUSH
2156: EMPTY
2157: ST_TO_ADDR
// for i := 1 to count do
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_VAR 0 1
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2592
// begin uc_direction := Rand ( 0 , 5 ) ;
2176: LD_ADDR_OWVAR 24
2180: PUSH
2181: LD_INT 0
2183: PPUSH
2184: LD_INT 5
2186: PPUSH
2187: CALL_OW 12
2191: ST_TO_ADDR
// if commander then
2192: LD_LOC 1
2196: IFFALSE 2305
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2198: LD_ADDR_OWVAR 26
2202: PUSH
2203: LD_OWVAR 19
2207: PUSH
2208: LD_OWVAR 20
2212: ARRAY
2213: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2214: LD_INT 1
2216: PPUSH
2217: LD_INT 2
2219: PPUSH
2220: CALL_OW 12
2224: PPUSH
2225: LD_VAR 0 2
2229: PPUSH
2230: LD_EXP 10
2234: PUSH
2235: LD_INT 2
2237: PLUS
2238: PPUSH
2239: CALL_OW 380
// hc_importance := 105 ;
2243: LD_ADDR_OWVAR 32
2247: PUSH
2248: LD_INT 105
2250: ST_TO_ADDR
// commander := false ;
2251: LD_ADDR_LOC 1
2255: PUSH
2256: LD_INT 0
2258: ST_TO_ADDR
// if Multiplayer then
2259: LD_OWVAR 4
2263: IFFALSE 2303
// begin hc_gallery := MULTIAVATARS ;
2265: LD_ADDR_OWVAR 33
2269: PUSH
2270: LD_STRING MULTIAVATARS
2272: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2273: LD_ADDR_OWVAR 34
2277: PUSH
2278: LD_OWVAR 20
2282: PPUSH
2283: CALL_OW 525
2287: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2288: LD_ADDR_OWVAR 27
2292: PUSH
2293: LD_OWVAR 20
2297: PPUSH
2298: CALL_OW 526
2302: ST_TO_ADDR
// end ; end else
2303: GO 2368
// begin hc_name :=  ;
2305: LD_ADDR_OWVAR 26
2309: PUSH
2310: LD_STRING 
2312: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2313: LD_INT 1
2315: PPUSH
2316: LD_INT 2
2318: PPUSH
2319: CALL_OW 12
2323: PPUSH
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_EXP 10
2333: PPUSH
2334: CALL_OW 380
// hc_importance := 0 ;
2338: LD_ADDR_OWVAR 32
2342: PUSH
2343: LD_INT 0
2345: ST_TO_ADDR
// if Multiplayer then
2346: LD_OWVAR 4
2350: IFFALSE 2368
// begin hc_gallery :=  ;
2352: LD_ADDR_OWVAR 33
2356: PUSH
2357: LD_STRING 
2359: ST_TO_ADDR
// hc_face_number := 0 ;
2360: LD_ADDR_OWVAR 34
2364: PUSH
2365: LD_INT 0
2367: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2368: LD_ADDR_VAR 0 10
2372: PUSH
2373: CALL_OW 44
2377: ST_TO_ADDR
// if global_defined then
2378: LD_LOC 3
2382: IFFALSE 2522
// begin if ( cl = class_soldier ) then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: EQUAL
2392: IFFALSE 2412
// j := i + soldiers_created else
2394: LD_ADDR_VAR 0 9
2398: PUSH
2399: LD_VAR 0 8
2403: PUSH
2404: LD_LOC 4
2408: PLUS
2409: ST_TO_ADDR
2410: GO 2422
// j := i ;
2412: LD_ADDR_VAR 0 9
2416: PUSH
2417: LD_VAR 0 8
2421: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2422: LD_LOC 2
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: PUSH
2433: LD_VAR 0 9
2437: ARRAY
2438: PPUSH
2439: LD_VAR 0 10
2443: PPUSH
2444: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2448: LD_VAR 0 10
2452: PPUSH
2453: LD_INT 2
2455: PPUSH
2456: LD_LOC 2
2460: PUSH
2461: LD_VAR 0 2
2465: ARRAY
2466: PUSH
2467: LD_VAR 0 9
2471: ARRAY
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: CALL_OW 260
2480: PPUSH
2481: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2485: LD_VAR 0 10
2489: PPUSH
2490: LD_INT 1
2492: PPUSH
2493: LD_LOC 2
2497: PUSH
2498: LD_VAR 0 2
2502: ARRAY
2503: PUSH
2504: LD_VAR 0 9
2508: ARRAY
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 260
2517: PPUSH
2518: CALL_OW 239
// end ; if building then
2522: LD_VAR 0 6
2526: IFFALSE 2544
// PlaceHumanInUnit ( un , building ) else
2528: LD_VAR 0 10
2532: PPUSH
2533: LD_VAR 0 6
2537: PPUSH
2538: CALL_OW 52
2542: GO 2571
// PlaceUnitXYR ( un , x , y , r , false ) ;
2544: LD_VAR 0 10
2548: PPUSH
2549: LD_VAR 0 3
2553: PPUSH
2554: LD_VAR 0 4
2558: PPUSH
2559: LD_VAR 0 5
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: CALL_OW 50
// result := result ^ [ un ] ;
2571: LD_ADDR_VAR 0 7
2575: PUSH
2576: LD_VAR 0 7
2580: PUSH
2581: LD_VAR 0 10
2585: PUSH
2586: EMPTY
2587: LIST
2588: ADD
2589: ST_TO_ADDR
// end ;
2590: GO 2173
2592: POP
2593: POP
// if not global_defined then
2594: LD_LOC 3
2598: NOT
2599: IFFALSE 2677
// if ( global_units >= cl ) then
2601: LD_LOC 2
2605: PUSH
2606: LD_VAR 0 2
2610: GREATEREQUAL
2611: IFFALSE 2652
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2613: LD_ADDR_LOC 2
2617: PUSH
2618: LD_LOC 2
2622: PPUSH
2623: LD_VAR 0 2
2627: PPUSH
2628: LD_LOC 2
2632: PUSH
2633: LD_VAR 0 2
2637: ARRAY
2638: PUSH
2639: LD_VAR 0 7
2643: ADD
2644: PPUSH
2645: CALL_OW 1
2649: ST_TO_ADDR
2650: GO 2677
// global_units := Replace ( global_units , cl , result ) ;
2652: LD_ADDR_LOC 2
2656: PUSH
2657: LD_LOC 2
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_VAR 0 7
2671: PPUSH
2672: CALL_OW 1
2676: ST_TO_ADDR
// if commander then
2677: LD_LOC 1
2681: IFFALSE 2728
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2683: LD_ADDR_EXP 34
2687: PUSH
2688: LD_EXP 34
2692: PPUSH
2693: LD_OWVAR 20
2697: PPUSH
2698: LD_EXP 34
2702: PUSH
2703: LD_OWVAR 20
2707: ARRAY
2708: PUSH
2709: LD_VAR 0 10
2713: ADD
2714: PPUSH
2715: CALL_OW 1
2719: ST_TO_ADDR
// commander := false ;
2720: LD_ADDR_LOC 1
2724: PUSH
2725: LD_INT 0
2727: ST_TO_ADDR
// end ; end ;
2728: LD_VAR 0 7
2732: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
// if side in [ 0 , 9 ] then
2744: LD_VAR 0 1
2748: PUSH
2749: LD_INT 0
2751: PUSH
2752: LD_INT 9
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: IN
2759: IFFALSE 2763
// exit ;
2761: GO 3838
// pos := Side_Positions [ side ] ;
2763: LD_ADDR_VAR 0 3
2767: PUSH
2768: LD_EXP 23
2772: PUSH
2773: LD_VAR 0 1
2777: ARRAY
2778: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2779: LD_ADDR_OWVAR 21
2783: PUSH
2784: LD_EXP 24
2788: PUSH
2789: LD_VAR 0 1
2793: ARRAY
2794: ST_TO_ADDR
// uc_side := side ;
2795: LD_ADDR_OWVAR 20
2799: PUSH
2800: LD_VAR 0 1
2804: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2805: LD_ADDR_VAR 0 4
2809: PUSH
2810: LD_EXP 29
2814: PUSH
2815: LD_VAR 0 3
2819: ARRAY
2820: PUSH
2821: LD_INT 1
2823: ARRAY
2824: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_EXP 29
2834: PUSH
2835: LD_VAR 0 3
2839: ARRAY
2840: PUSH
2841: LD_INT 2
2843: ARRAY
2844: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2845: LD_ADDR_VAR 0 6
2849: PUSH
2850: LD_EXP 29
2854: PUSH
2855: LD_VAR 0 3
2859: ARRAY
2860: PUSH
2861: LD_INT 3
2863: ARRAY
2864: ST_TO_ADDR
// if is_depot then
2865: LD_EXP 7
2869: IFFALSE 3002
// begin bc_type = b_depot ;
2871: LD_ADDR_OWVAR 42
2875: PUSH
2876: LD_INT 0
2878: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2879: LD_ADDR_VAR 0 10
2883: PUSH
2884: LD_VAR 0 4
2888: PPUSH
2889: LD_VAR 0 5
2893: PPUSH
2894: LD_VAR 0 6
2898: PPUSH
2899: CALL_OW 47
2903: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2904: LD_VAR 0 10
2908: PPUSH
2909: LD_STRING @
2911: PUSH
2912: LD_VAR 0 1
2916: STR
2917: PPUSH
2918: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2922: LD_VAR 0 10
2926: PPUSH
2927: CALL_OW 274
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: LD_EXP 12
2939: PUSH
2940: LD_INT 1
2942: ARRAY
2943: PPUSH
2944: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2948: LD_VAR 0 10
2952: PPUSH
2953: CALL_OW 274
2957: PPUSH
2958: LD_INT 2
2960: PPUSH
2961: LD_EXP 12
2965: PUSH
2966: LD_INT 2
2968: ARRAY
2969: PPUSH
2970: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2974: LD_VAR 0 10
2978: PPUSH
2979: CALL_OW 274
2983: PPUSH
2984: LD_INT 3
2986: PPUSH
2987: LD_EXP 12
2991: PUSH
2992: LD_INT 3
2994: ARRAY
2995: PPUSH
2996: CALL_OW 277
// end else
3000: GO 3146
// begin for i := 1 to 3 do
3002: LD_ADDR_VAR 0 7
3006: PUSH
3007: DOUBLE
3008: LD_INT 1
3010: DEC
3011: ST_TO_ADDR
3012: LD_INT 3
3014: PUSH
3015: FOR_TO
3016: IFFALSE 3144
// begin r := starting_resources [ i ] ;
3018: LD_ADDR_VAR 0 8
3022: PUSH
3023: LD_EXP 12
3027: PUSH
3028: LD_VAR 0 7
3032: ARRAY
3033: ST_TO_ADDR
// while r >= 10 do
3034: LD_VAR 0 8
3038: PUSH
3039: LD_INT 10
3041: GREATEREQUAL
3042: IFFALSE 3142
// if r > 50 then
3044: LD_VAR 0 8
3048: PUSH
3049: LD_INT 50
3051: GREATER
3052: IFFALSE 3098
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3054: LD_VAR 0 7
3058: PPUSH
3059: LD_INT 5
3061: PPUSH
3062: LD_VAR 0 4
3066: PPUSH
3067: LD_VAR 0 5
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 60
// r := r - 50 ;
3082: LD_ADDR_VAR 0 8
3086: PUSH
3087: LD_VAR 0 8
3091: PUSH
3092: LD_INT 50
3094: MINUS
3095: ST_TO_ADDR
// end else
3096: GO 3140
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3098: LD_VAR 0 7
3102: PPUSH
3103: LD_VAR 0 8
3107: PUSH
3108: LD_INT 10
3110: DIV
3111: PPUSH
3112: LD_VAR 0 4
3116: PPUSH
3117: LD_VAR 0 5
3121: PPUSH
3122: LD_INT 4
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL_OW 60
// r := 0 ;
3132: LD_ADDR_VAR 0 8
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// end ;
3140: GO 3034
// end ;
3142: GO 3015
3144: POP
3145: POP
// end ; for r in starting_crates do
3146: LD_ADDR_VAR 0 8
3150: PUSH
3151: LD_EXP 11
3155: PUSH
3156: FOR_IN
3157: IFFALSE 3189
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3159: LD_INT 1
3161: PPUSH
3162: LD_INT 5
3164: PPUSH
3165: LD_VAR 0 4
3169: PPUSH
3170: LD_VAR 0 5
3174: PPUSH
3175: LD_VAR 0 8
3179: PPUSH
3180: LD_INT 0
3182: PPUSH
3183: CALL_OW 60
3187: GO 3156
3189: POP
3190: POP
// if def_morale_flags then
3191: LD_EXP 56
3195: IFFALSE 3334
// begin x := start_def [ pos ] [ 1 ] ;
3197: LD_ADDR_VAR 0 4
3201: PUSH
3202: LD_EXP 31
3206: PUSH
3207: LD_VAR 0 3
3211: ARRAY
3212: PUSH
3213: LD_INT 1
3215: ARRAY
3216: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3217: LD_ADDR_VAR 0 5
3221: PUSH
3222: LD_EXP 31
3226: PUSH
3227: LD_VAR 0 3
3231: ARRAY
3232: PUSH
3233: LD_INT 2
3235: ARRAY
3236: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3237: LD_VAR 0 4
3241: PPUSH
3242: LD_VAR 0 5
3246: PPUSH
3247: LD_INT 12
3249: PPUSH
3250: LD_INT 2
3252: PPUSH
3253: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3257: LD_ADDR_EXP 33
3261: PUSH
3262: LD_EXP 33
3266: PUSH
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_VAR 0 4
3276: PPUSH
3277: LD_VAR 0 5
3281: PPUSH
3282: LD_INT 1
3284: PUSH
3285: LD_INT 100
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 2
3294: PUSH
3295: LD_INT 50
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: LD_INT 20
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 20
3314: PUSH
3315: LD_INT 100
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 418
3332: ADD
3333: ST_TO_ADDR
// end ; commander := true ;
3334: LD_ADDR_LOC 1
3338: PUSH
3339: LD_INT 1
3341: ST_TO_ADDR
// soldiers_created := 0 ;
3342: LD_ADDR_LOC 4
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3350: LD_ADDR_VAR 0 7
3354: PUSH
3355: DOUBLE
3356: LD_INT 1
3358: DEC
3359: ST_TO_ADDR
3360: LD_EXP 8
3364: PUSH
3365: FOR_TO
3366: IFFALSE 3519
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3368: LD_ADDR_VAR 0 4
3372: PUSH
3373: LD_EXP 30
3377: PUSH
3378: LD_VAR 0 3
3382: ARRAY
3383: PUSH
3384: LD_VAR 0 7
3388: ARRAY
3389: PUSH
3390: LD_INT 1
3392: ARRAY
3393: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3394: LD_ADDR_VAR 0 5
3398: PUSH
3399: LD_EXP 30
3403: PUSH
3404: LD_VAR 0 3
3408: ARRAY
3409: PUSH
3410: LD_VAR 0 7
3414: ARRAY
3415: PUSH
3416: LD_INT 2
3418: ARRAY
3419: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3420: LD_ADDR_VAR 0 6
3424: PUSH
3425: LD_EXP 30
3429: PUSH
3430: LD_VAR 0 3
3434: ARRAY
3435: PUSH
3436: LD_VAR 0 7
3440: ARRAY
3441: PUSH
3442: LD_INT 3
3444: ARRAY
3445: ST_TO_ADDR
// bc_type := b_breastwork ;
3446: LD_ADDR_OWVAR 42
3450: PUSH
3451: LD_INT 31
3453: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3454: LD_ADDR_VAR 0 9
3458: PUSH
3459: LD_VAR 0 4
3463: PPUSH
3464: LD_VAR 0 5
3468: PPUSH
3469: LD_VAR 0 6
3473: PPUSH
3474: CALL_OW 47
3478: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3479: LD_INT 1
3481: PPUSH
3482: LD_INT 1
3484: PPUSH
3485: LD_INT 0
3487: PPUSH
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 0
3493: PPUSH
3494: LD_VAR 0 9
3498: PPUSH
3499: CALL 2145 0 6
// soldiers_created := soldiers_created + 1 ;
3503: LD_ADDR_LOC 4
3507: PUSH
3508: LD_LOC 4
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: ST_TO_ADDR
// end ;
3517: GO 3365
3519: POP
3520: POP
// x := start_def [ pos ] [ 1 ] ;
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_EXP 31
3530: PUSH
3531: LD_VAR 0 3
3535: ARRAY
3536: PUSH
3537: LD_INT 1
3539: ARRAY
3540: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3541: LD_ADDR_VAR 0 5
3545: PUSH
3546: LD_EXP 31
3550: PUSH
3551: LD_VAR 0 3
3555: ARRAY
3556: PUSH
3557: LD_INT 2
3559: ARRAY
3560: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3561: LD_LOC 8
3565: PUSH
3566: LD_EXP 8
3570: MINUS
3571: PPUSH
3572: LD_INT 1
3574: PPUSH
3575: LD_VAR 0 4
3579: PPUSH
3580: LD_VAR 0 5
3584: PPUSH
3585: LD_INT 5
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: CALL 2145 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3595: LD_LOC 5
3599: PPUSH
3600: LD_INT 2
3602: PPUSH
3603: LD_VAR 0 4
3607: PPUSH
3608: LD_VAR 0 5
3612: PPUSH
3613: LD_INT 5
3615: PPUSH
3616: LD_INT 0
3618: PPUSH
3619: CALL 2145 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3623: LD_LOC 7
3627: PPUSH
3628: LD_INT 3
3630: PPUSH
3631: LD_VAR 0 4
3635: PPUSH
3636: LD_VAR 0 5
3640: PPUSH
3641: LD_INT 5
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL 2145 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3651: LD_LOC 6
3655: PPUSH
3656: LD_INT 4
3658: PPUSH
3659: LD_VAR 0 4
3663: PPUSH
3664: LD_VAR 0 5
3668: PPUSH
3669: LD_INT 5
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: CALL 2145 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3679: LD_EXP 57
3683: PUSH
3684: LD_INT 20
3686: PPUSH
3687: LD_VAR 0 1
3691: PPUSH
3692: CALL_OW 321
3696: PUSH
3697: LD_INT 1
3699: EQUAL
3700: AND
3701: IFFALSE 3718
// SetTech ( tech_SibDet , side , state_researched ) ;
3703: LD_INT 20
3705: PPUSH
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_INT 2
3713: PPUSH
3714: CALL_OW 322
// if def_siberite_bomb = 1 then
3718: LD_EXP 60
3722: PUSH
3723: LD_INT 1
3725: EQUAL
3726: IFFALSE 3760
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3728: LD_INT 25
3730: PPUSH
3731: LD_VAR 0 1
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3743: LD_INT 73
3745: PPUSH
3746: LD_VAR 0 1
3750: PPUSH
3751: LD_INT 1
3753: PPUSH
3754: CALL_OW 322
// end else
3758: GO 3790
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3760: LD_INT 25
3762: PPUSH
3763: LD_VAR 0 1
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3775: LD_INT 73
3777: PPUSH
3778: LD_VAR 0 1
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 322
// end ; if Game_Type = 3 then
3790: LD_EXP 46
3794: PUSH
3795: LD_INT 3
3797: EQUAL
3798: IFFALSE 3815
// SetTech ( tech_partinvis , side , state_disabled ) ;
3800: LD_INT 16
3802: PPUSH
3803: LD_VAR 0 1
3807: PPUSH
3808: LD_INT 0
3810: PPUSH
3811: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3815: LD_INT 24
3817: PPUSH
3818: LD_VAR 0 1
3822: PPUSH
3823: LD_INT 1
3825: PPUSH
3826: CALL_OW 322
// global_defined := true ;
3830: LD_ADDR_LOC 3
3834: PUSH
3835: LD_INT 1
3837: ST_TO_ADDR
// end ;
3838: LD_VAR 0 2
3842: RET
// every 0 0$1 do
3843: GO 3845
3845: DISABLE
// if ( def_siberite_bomb > 1 ) then
3846: LD_EXP 60
3850: PUSH
3851: LD_INT 1
3853: GREATER
3854: IFFALSE 3869
// begin wait ( siberite_bomb_Delay ) ;
3856: LD_EXP 18
3860: PPUSH
3861: CALL_OW 67
// EnableSibFiss ;
3865: CALL 3870 0 0
// end ;
3869: END
// function EnableSibFiss ; var i ; begin
3870: LD_INT 0
3872: PPUSH
3873: PPUSH
// for i := 1 to 8 do
3874: LD_ADDR_VAR 0 2
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_INT 8
3886: PUSH
3887: FOR_TO
3888: IFFALSE 3934
// if Side_Positions [ i ] then
3890: LD_EXP 23
3894: PUSH
3895: LD_VAR 0 2
3899: ARRAY
3900: IFFALSE 3932
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3902: LD_INT 25
3904: PPUSH
3905: LD_VAR 0 2
3909: PPUSH
3910: LD_INT 1
3912: PPUSH
3913: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3917: LD_INT 73
3919: PPUSH
3920: LD_VAR 0 2
3924: PPUSH
3925: LD_INT 1
3927: PPUSH
3928: CALL_OW 322
// end ;
3932: GO 3887
3934: POP
3935: POP
// end ;
3936: LD_VAR 0 1
3940: RET
// function prepare_sides ; var i ; begin
3941: LD_INT 0
3943: PPUSH
3944: PPUSH
// global_units := [ ] ;
3945: LD_ADDR_LOC 2
3949: PUSH
3950: EMPTY
3951: ST_TO_ADDR
// global_defined := false ;
3952: LD_ADDR_LOC 3
3956: PUSH
3957: LD_INT 0
3959: ST_TO_ADDR
// CountClassMembers ;
3960: CALL 4010 0 0
// for i := 1 to 8 do
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: DOUBLE
3970: LD_INT 1
3972: DEC
3973: ST_TO_ADDR
3974: LD_INT 8
3976: PUSH
3977: FOR_TO
3978: IFFALSE 4003
// if Side_Positions [ i ] then
3980: LD_EXP 23
3984: PUSH
3985: LD_VAR 0 2
3989: ARRAY
3990: IFFALSE 4001
// prepare_side ( i ) ;
3992: LD_VAR 0 2
3996: PPUSH
3997: CALL 2733 0 1
4001: GO 3977
4003: POP
4004: POP
// end ;
4005: LD_VAR 0 1
4009: RET
// function CountClassMembers ; var Mode ; begin
4010: LD_INT 0
4012: PPUSH
4013: PPUSH
// if No_Mechs then
4014: LD_EXP 62
4018: IFFALSE 4030
// Mode := 2 else
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: LD_INT 2
4027: ST_TO_ADDR
4028: GO 4038
// Mode := 1 ;
4030: LD_ADDR_VAR 0 2
4034: PUSH
4035: LD_INT 1
4037: ST_TO_ADDR
// neng := number_of_people ;
4038: LD_ADDR_LOC 5
4042: PUSH
4043: LD_EXP 9
4047: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4048: LD_ADDR_LOC 8
4052: PUSH
4053: LD_LOC 5
4057: PUSH
4058: LD_INT 4
4060: PUSH
4061: LD_INT 3
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_VAR 0 2
4072: ARRAY
4073: DIV
4074: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4075: LD_LOC 8
4079: PUSH
4080: LD_EXP 8
4084: LESS
4085: IFFALSE 4097
// nsol := number_of_breastworks ;
4087: LD_ADDR_LOC 8
4091: PUSH
4092: LD_EXP 8
4096: ST_TO_ADDR
// neng := neng - nsol ;
4097: LD_ADDR_LOC 5
4101: PUSH
4102: LD_LOC 5
4106: PUSH
4107: LD_LOC 8
4111: MINUS
4112: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4113: LD_ADDR_LOC 6
4117: PUSH
4118: LD_LOC 5
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 2
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_VAR 0 2
4137: ARRAY
4138: DIV
4139: ST_TO_ADDR
// if ( nsci < 1 ) then
4140: LD_LOC 6
4144: PUSH
4145: LD_INT 1
4147: LESS
4148: IFFALSE 4158
// nsci := 1 ;
4150: LD_ADDR_LOC 6
4154: PUSH
4155: LD_INT 1
4157: ST_TO_ADDR
// neng := neng - nsci ;
4158: LD_ADDR_LOC 5
4162: PUSH
4163: LD_LOC 5
4167: PUSH
4168: LD_LOC 6
4172: MINUS
4173: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4174: LD_ADDR_LOC 7
4178: PUSH
4179: LD_LOC 5
4183: PUSH
4184: LD_INT 2
4186: DIV
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: LD_VAR 0 2
4199: ARRAY
4200: ST_TO_ADDR
// neng := neng - nmech ;
4201: LD_ADDR_LOC 5
4205: PUSH
4206: LD_LOC 5
4210: PUSH
4211: LD_LOC 7
4215: MINUS
4216: ST_TO_ADDR
// if ( neng < 1 ) then
4217: LD_LOC 5
4221: PUSH
4222: LD_INT 1
4224: LESS
4225: IFFALSE 4235
// neng := 1 ;
4227: LD_ADDR_LOC 5
4231: PUSH
4232: LD_INT 1
4234: ST_TO_ADDR
// end ;
4235: LD_VAR 0 1
4239: RET
// starting begin disable ( 1 ) ;
4240: LD_INT 1
4242: DISABLE_MARKED
// disable ( 2 ) ;
4243: LD_INT 2
4245: DISABLE_MARKED
// disable ( 3 ) ;
4246: LD_INT 3
4248: DISABLE_MARKED
// disable ( 4 ) ;
4249: LD_INT 4
4251: DISABLE_MARKED
// disable ( 5 ) ;
4252: LD_INT 5
4254: DISABLE_MARKED
// disable ( 6 ) ;
4255: LD_INT 6
4257: DISABLE_MARKED
// disable ( 7 ) ;
4258: LD_INT 7
4260: DISABLE_MARKED
// disable ( 10 ) ;
4261: LD_INT 10
4263: DISABLE_MARKED
// disable ( 20 ) ;
4264: LD_INT 20
4266: DISABLE_MARKED
// disable ( 98 ) ;
4267: LD_INT 98
4269: DISABLE_MARKED
// disable ( 99 ) ;
4270: LD_INT 99
4272: DISABLE_MARKED
// disable ( 400 ) ;
4273: LD_INT 400
4275: DISABLE_MARKED
// disable ( 401 ) ;
4276: LD_INT 401
4278: DISABLE_MARKED
// disable ( 600 ) ;
4279: LD_INT 600
4281: DISABLE_MARKED
// mp_selectmsg := true ;
4282: LD_ADDR_OWVAR 13
4286: PUSH
4287: LD_INT 1
4289: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4290: CALL 68 0 0
// init_map ;
4294: CALL 1398 0 0
// init_respawn ;
4298: CALL 5982 0 0
// set_shared_visions_and_alliances ;
4302: CALL 1857 0 0
// ResetFog ;
4306: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4310: LD_OWVAR 2
4314: PPUSH
4315: CALL_OW 520
// prepare_sides ;
4319: CALL 3941 0 0
// Init_Win_Condition ;
4323: CALL 18199 0 0
// InitLimits ;
4327: CALL 15429 0 0
// ShowTimer ;
4331: CALL 16366 0 0
// case Game_Type of 2 :
4335: LD_EXP 46
4339: PUSH
4340: LD_INT 2
4342: DOUBLE
4343: EQUAL
4344: IFTRUE 4348
4346: GO 4355
4348: POP
// init_alien_research ; 3 :
4349: CALL 7212 0 0
4353: GO 4375
4355: LD_INT 3
4357: DOUBLE
4358: EQUAL
4359: IFTRUE 4363
4361: GO 4374
4363: POP
// begin InitPoints ( ) ;
4364: CALL 16604 0 0
// init_kings_counting ;
4368: CALL 19494 0 0
// end ; end ;
4372: GO 4375
4374: POP
// music_nat := Side_Nations [ your_side ] ;
4375: LD_ADDR_OWVAR 71
4379: PUSH
4380: LD_EXP 24
4384: PUSH
4385: LD_OWVAR 2
4389: ARRAY
4390: ST_TO_ADDR
// if IAmSpec then
4391: CALL_OW 531
4395: IFFALSE 4419
// begin fogOff ( true ) ;
4397: LD_INT 1
4399: PPUSH
4400: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4404: LD_INT 119
4406: PPUSH
4407: LD_INT 79
4409: PPUSH
4410: CALL_OW 86
// enable ( 400 ) ;
4414: LD_INT 400
4416: ENABLE_MARKED
// end else
4417: GO 4465
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4419: LD_EXP 31
4423: PUSH
4424: LD_EXP 23
4428: PUSH
4429: LD_OWVAR 2
4433: ARRAY
4434: ARRAY
4435: PUSH
4436: LD_INT 1
4438: ARRAY
4439: PPUSH
4440: LD_EXP 31
4444: PUSH
4445: LD_EXP 23
4449: PUSH
4450: LD_OWVAR 2
4454: ARRAY
4455: ARRAY
4456: PUSH
4457: LD_INT 2
4459: ARRAY
4460: PPUSH
4461: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4465: LD_INT 1
4467: PPUSH
4468: CALL_OW 573
// InitApeman ;
4472: CALL 5157 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4476: LD_ADDR_EXP 66
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 23
4486: PUSH
4487: LD_INT 20
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: ST_TO_ADDR
// BeginBuildUp ;
4499: CALL 17362 0 0
// end ; end_of_file
4503: END
// every 1 1$0 + 0 0$0.3 do
4504: GO 4506
4506: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
4507: LD_INT 4
4509: PPUSH
4510: LD_INT 5
4512: PPUSH
4513: CALL_OW 12
4517: PPUSH
4518: LD_INT 25
4520: PPUSH
4521: LD_INT 1
4523: PPUSH
4524: CALL_OW 55
// enable ;
4528: ENABLE
// end ;
4529: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4530: GO 4532
4532: DISABLE
4533: LD_INT 0
4535: PPUSH
4536: PPUSH
// begin case tick of 1 .. 1 1$0 :
4537: LD_OWVAR 1
4541: PUSH
4542: LD_INT 1
4544: DOUBLE
4545: GREATEREQUAL
4546: IFFALSE 4554
4548: LD_INT 2100
4550: DOUBLE
4551: LESSEQUAL
4552: IFTRUE 4556
4554: GO 4584
4556: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4557: LD_EXP 13
4561: PUSH
4562: LD_INT 100
4564: DIVREAL
4565: PUSH
4566: LD_INT 350
4568: PPUSH
4569: LD_INT 1050
4571: PPUSH
4572: CALL_OW 12
4576: MUL
4577: PPUSH
4578: CALL_OW 67
4582: GO 4886
4584: LD_INT 2100
4586: PUSH
4587: LD_INT 1
4589: PLUS
4590: DOUBLE
4591: GREATEREQUAL
4592: IFFALSE 4600
4594: LD_INT 10500
4596: DOUBLE
4597: LESSEQUAL
4598: IFTRUE 4602
4600: GO 4630
4602: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4603: LD_EXP 13
4607: PUSH
4608: LD_INT 100
4610: DIVREAL
4611: PUSH
4612: LD_INT 1050
4614: PPUSH
4615: LD_INT 1575
4617: PPUSH
4618: CALL_OW 12
4622: MUL
4623: PPUSH
4624: CALL_OW 67
4628: GO 4886
4630: LD_INT 10500
4632: PUSH
4633: LD_INT 1
4635: PLUS
4636: DOUBLE
4637: GREATEREQUAL
4638: IFFALSE 4646
4640: LD_INT 21000
4642: DOUBLE
4643: LESSEQUAL
4644: IFTRUE 4648
4646: GO 4676
4648: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4649: LD_EXP 13
4653: PUSH
4654: LD_INT 100
4656: DIVREAL
4657: PUSH
4658: LD_INT 1575
4660: PPUSH
4661: LD_INT 2100
4663: PPUSH
4664: CALL_OW 12
4668: MUL
4669: PPUSH
4670: CALL_OW 67
4674: GO 4886
4676: LD_INT 21000
4678: PUSH
4679: LD_INT 1
4681: PLUS
4682: DOUBLE
4683: GREATEREQUAL
4684: IFFALSE 4692
4686: LD_INT 42000
4688: DOUBLE
4689: LESSEQUAL
4690: IFTRUE 4694
4692: GO 4722
4694: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4695: LD_EXP 13
4699: PUSH
4700: LD_INT 100
4702: DIVREAL
4703: PUSH
4704: LD_INT 2100
4706: PPUSH
4707: LD_INT 2625
4709: PPUSH
4710: CALL_OW 12
4714: MUL
4715: PPUSH
4716: CALL_OW 67
4720: GO 4886
4722: LD_INT 42000
4724: PUSH
4725: LD_INT 1
4727: PLUS
4728: DOUBLE
4729: GREATEREQUAL
4730: IFFALSE 4738
4732: LD_INT 63000
4734: DOUBLE
4735: LESSEQUAL
4736: IFTRUE 4740
4738: GO 4768
4740: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4741: LD_EXP 13
4745: PUSH
4746: LD_INT 100
4748: DIVREAL
4749: PUSH
4750: LD_INT 2625
4752: PPUSH
4753: LD_INT 3150
4755: PPUSH
4756: CALL_OW 12
4760: MUL
4761: PPUSH
4762: CALL_OW 67
4766: GO 4886
4768: LD_INT 63000
4770: PUSH
4771: LD_INT 1
4773: PLUS
4774: DOUBLE
4775: GREATEREQUAL
4776: IFFALSE 4784
4778: LD_INT 105000
4780: DOUBLE
4781: LESSEQUAL
4782: IFTRUE 4786
4784: GO 4814
4786: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4787: LD_EXP 13
4791: PUSH
4792: LD_INT 100
4794: DIVREAL
4795: PUSH
4796: LD_INT 3150
4798: PPUSH
4799: LD_INT 3675
4801: PPUSH
4802: CALL_OW 12
4806: MUL
4807: PPUSH
4808: CALL_OW 67
4812: GO 4886
4814: LD_INT 105000
4816: PUSH
4817: LD_INT 1
4819: PLUS
4820: DOUBLE
4821: GREATEREQUAL
4822: IFFALSE 4830
4824: LD_INT 630000
4826: DOUBLE
4827: LESSEQUAL
4828: IFTRUE 4832
4830: GO 4860
4832: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
4833: LD_EXP 13
4837: PUSH
4838: LD_INT 100
4840: DIVREAL
4841: PUSH
4842: LD_INT 3675
4844: PPUSH
4845: LD_INT 4200
4847: PPUSH
4848: CALL_OW 12
4852: MUL
4853: PPUSH
4854: CALL_OW 67
4858: GO 4886
4860: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
4861: LD_EXP 13
4865: PUSH
4866: LD_INT 100
4868: DIVREAL
4869: PUSH
4870: LD_INT 4200
4872: PPUSH
4873: LD_INT 5250
4875: PPUSH
4876: CALL_OW 12
4880: MUL
4881: PPUSH
4882: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
4886: LD_ADDR_VAR 0 2
4890: PUSH
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 5
4896: PPUSH
4897: CALL_OW 12
4901: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
4902: LD_ADDR_VAR 0 1
4906: PUSH
4907: LD_EXP 23
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: EMPTY
4916: LIST
4917: DIFF
4918: PUSH
4919: FOR_IN
4920: IFFALSE 4960
// CreateCratesArea ( amount , [ north_west , north_east , south_west , south_east ] [ i ] , true ) ;
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 5
4932: PUSH
4933: LD_INT 7
4935: PUSH
4936: LD_INT 6
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: PUSH
4945: LD_VAR 0 1
4949: ARRAY
4950: PPUSH
4951: LD_INT 1
4953: PPUSH
4954: CALL_OW 55
4958: GO 4919
4960: POP
4961: POP
// enable ;
4962: ENABLE
// end ; end_of_file
4963: PPOPN 2
4965: END
// every 20 20$00 trigger apemanNumber do
4966: LD_EXP 35
4970: IFFALSE 5003
4972: GO 4974
4974: DISABLE
// begin enable ;
4975: ENABLE
// if apeLevel >= 8 then
4976: LD_EXP 40
4980: PUSH
4981: LD_INT 8
4983: GREATEREQUAL
4984: IFFALSE 4989
// disable else
4986: DISABLE
4987: GO 5003
// apeLevel := apeLevel + 1 ;
4989: LD_ADDR_EXP 40
4993: PUSH
4994: LD_EXP 40
4998: PUSH
4999: LD_INT 1
5001: PLUS
5002: ST_TO_ADDR
// end ;
5003: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5004: LD_EXP 35
5008: PUSH
5009: LD_EXP 36
5013: LESS
5014: IFFALSE 5154
5016: GO 5018
5018: DISABLE
5019: LD_INT 0
5021: PPUSH
5022: PPUSH
5023: PPUSH
5024: PPUSH
// begin enable ;
5025: ENABLE
// for i := 1 to apemanPos do
5026: LD_ADDR_VAR 0 1
5030: PUSH
5031: DOUBLE
5032: LD_INT 1
5034: DEC
5035: ST_TO_ADDR
5036: LD_EXP 38
5040: PUSH
5041: FOR_TO
5042: IFFALSE 5152
// begin if apemanPlayerCount [ i ] then
5044: LD_EXP 39
5048: PUSH
5049: LD_VAR 0 1
5053: ARRAY
5054: IFFALSE 5150
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5056: LD_EXP 39
5060: PUSH
5061: LD_VAR 0 1
5065: ARRAY
5066: PUSH
5067: LD_EXP 38
5071: PUSH
5072: LD_VAR 0 1
5076: ARRAY
5077: GREATER
5078: IFFALSE 5150
// begin ape := PrepareApeman ;
5080: LD_ADDR_VAR 0 2
5084: PUSH
5085: CALL 5657 0 0
5089: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5090: LD_VAR 0 2
5094: PPUSH
5095: LD_EXP 41
5099: PUSH
5100: LD_VAR 0 1
5104: ARRAY
5105: PPUSH
5106: LD_INT 0
5108: PPUSH
5109: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5113: LD_ADDR_EXP 38
5117: PUSH
5118: LD_EXP 38
5122: PPUSH
5123: LD_VAR 0 1
5127: PPUSH
5128: LD_EXP 38
5132: PUSH
5133: LD_VAR 0 1
5137: ARRAY
5138: PUSH
5139: LD_VAR 0 2
5143: UNION
5144: PPUSH
5145: CALL_OW 1
5149: ST_TO_ADDR
// end ; end ; end ;
5150: GO 5041
5152: POP
5153: POP
// end ;
5154: PPOPN 4
5156: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5157: LD_INT 0
5159: PPUSH
5160: PPUSH
5161: PPUSH
5162: PPUSH
5163: PPUSH
5164: PPUSH
5165: PPUSH
// playersAmount := 0 ;
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: LD_INT 0
5173: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5174: LD_ADDR_VAR 0 7
5178: PUSH
5179: LD_INT 8
5181: PUSH
5182: LD_INT 9
5184: PUSH
5185: LD_INT 11
5187: PUSH
5188: LD_INT 10
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5197: LD_ADDR_EXP 41
5201: PUSH
5202: LD_INT 0
5204: PUSH
5205: LD_INT 0
5207: PUSH
5208: LD_INT 0
5210: PUSH
5211: LD_INT 0
5213: PUSH
5214: LD_INT 0
5216: PUSH
5217: LD_INT 0
5219: PUSH
5220: LD_INT 0
5222: PUSH
5223: LD_INT 0
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: ST_TO_ADDR
// for j = 1 to Side_Positions do
5236: LD_ADDR_VAR 0 4
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_EXP 23
5250: PUSH
5251: FOR_TO
5252: IFFALSE 5319
// if Side_Positions [ j ] then
5254: LD_EXP 23
5258: PUSH
5259: LD_VAR 0 4
5263: ARRAY
5264: IFFALSE 5317
// begin playersAmount := playersAmount + 1 ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PUSH
5276: LD_INT 1
5278: PLUS
5279: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5280: LD_ADDR_EXP 41
5284: PUSH
5285: LD_EXP 41
5289: PPUSH
5290: LD_VAR 0 4
5294: PPUSH
5295: LD_VAR 0 7
5299: PUSH
5300: LD_EXP 23
5304: PUSH
5305: LD_VAR 0 4
5309: ARRAY
5310: ARRAY
5311: PPUSH
5312: CALL_OW 1
5316: ST_TO_ADDR
// end ;
5317: GO 5251
5319: POP
5320: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5321: LD_ADDR_EXP 37
5325: PUSH
5326: LD_INT 3
5328: PUSH
5329: LD_EXP 15
5333: MUL
5334: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5335: LD_ADDR_EXP 35
5339: PUSH
5340: LD_VAR 0 3
5344: PUSH
5345: LD_EXP 37
5349: MUL
5350: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5351: LD_ADDR_EXP 36
5355: PUSH
5356: LD_EXP 35
5360: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5361: LD_ADDR_EXP 38
5365: PUSH
5366: LD_INT 0
5368: PUSH
5369: LD_INT 0
5371: PUSH
5372: LD_INT 0
5374: PUSH
5375: LD_INT 0
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: LD_INT 0
5383: PUSH
5384: LD_INT 0
5386: PUSH
5387: LD_INT 0
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5400: LD_ADDR_EXP 39
5404: PUSH
5405: LD_INT 0
5407: PUSH
5408: LD_INT 0
5410: PUSH
5411: LD_INT 0
5413: PUSH
5414: LD_INT 0
5416: PUSH
5417: LD_INT 0
5419: PUSH
5420: LD_INT 0
5422: PUSH
5423: LD_INT 0
5425: PUSH
5426: LD_INT 0
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: ST_TO_ADDR
// apeLevel := 1 ;
5439: LD_ADDR_EXP 40
5443: PUSH
5444: LD_INT 1
5446: ST_TO_ADDR
// if not apemanNumber then
5447: LD_EXP 35
5451: NOT
5452: IFFALSE 5456
// exit ;
5454: GO 5652
// for i := 1 to apemanPerPlayer do
5456: LD_ADDR_VAR 0 2
5460: PUSH
5461: DOUBLE
5462: LD_INT 1
5464: DEC
5465: ST_TO_ADDR
5466: LD_EXP 37
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5650
// begin for j := 1 to Side_Positions do
5474: LD_ADDR_VAR 0 4
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_EXP 23
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5646
// if Side_Positions [ j ] then
5492: LD_EXP 23
5496: PUSH
5497: LD_VAR 0 4
5501: ARRAY
5502: IFFALSE 5644
// begin pos := Side_Positions [ j ] ;
5504: LD_ADDR_VAR 0 6
5508: PUSH
5509: LD_EXP 23
5513: PUSH
5514: LD_VAR 0 4
5518: ARRAY
5519: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5520: LD_ADDR_EXP 39
5524: PUSH
5525: LD_EXP 39
5529: PPUSH
5530: LD_VAR 0 4
5534: PPUSH
5535: LD_EXP 39
5539: PUSH
5540: LD_VAR 0 4
5544: ARRAY
5545: PUSH
5546: LD_INT 1
5548: PLUS
5549: PPUSH
5550: CALL_OW 1
5554: ST_TO_ADDR
// ape := PrepareApeman ;
5555: LD_ADDR_VAR 0 5
5559: PUSH
5560: CALL 5657 0 0
5564: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5565: LD_ADDR_EXP 38
5569: PUSH
5570: LD_EXP 38
5574: PPUSH
5575: LD_VAR 0 4
5579: PPUSH
5580: LD_EXP 38
5584: PUSH
5585: LD_VAR 0 4
5589: ARRAY
5590: PPUSH
5591: LD_EXP 38
5595: PUSH
5596: LD_VAR 0 4
5600: ARRAY
5601: PUSH
5602: LD_INT 1
5604: PLUS
5605: PPUSH
5606: LD_VAR 0 5
5610: PPUSH
5611: CALL_OW 1
5615: PPUSH
5616: CALL_OW 1
5620: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5621: LD_VAR 0 5
5625: PPUSH
5626: LD_EXP 41
5630: PUSH
5631: LD_VAR 0 4
5635: ARRAY
5636: PPUSH
5637: LD_INT 0
5639: PPUSH
5640: CALL_OW 49
// end ;
5644: GO 5489
5646: POP
5647: POP
// end ;
5648: GO 5471
5650: POP
5651: POP
// end ;
5652: LD_VAR 0 1
5656: RET
// export function PrepareApeman ; var bonus ; begin
5657: LD_INT 0
5659: PPUSH
5660: PPUSH
// uc_side := 0 ;
5661: LD_ADDR_OWVAR 20
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// uc_nation := 0 ;
5669: LD_ADDR_OWVAR 21
5673: PUSH
5674: LD_INT 0
5676: ST_TO_ADDR
// InitHc ;
5677: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5681: LD_ADDR_VAR 0 2
5685: PUSH
5686: LD_INT 1
5688: NEG
5689: PUSH
5690: LD_INT 0
5692: PUSH
5693: LD_INT 1
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: LIST
5700: PUSH
5701: LD_OWVAR 1
5705: PUSH
5706: LD_INT 3
5708: MOD
5709: PUSH
5710: LD_INT 1
5712: PLUS
5713: ARRAY
5714: ST_TO_ADDR
// hc_class := class_apeman ;
5715: LD_ADDR_OWVAR 28
5719: PUSH
5720: LD_INT 12
5722: ST_TO_ADDR
// hc_gallery :=  ;
5723: LD_ADDR_OWVAR 33
5727: PUSH
5728: LD_STRING 
5730: ST_TO_ADDR
// hc_name :=  ;
5731: LD_ADDR_OWVAR 26
5735: PUSH
5736: LD_STRING 
5738: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5739: LD_ADDR_OWVAR 31
5743: PUSH
5744: LD_EXP 40
5748: PUSH
5749: LD_VAR 0 2
5753: PLUS
5754: PUSH
5755: LD_EXP 40
5759: PUSH
5760: LD_VAR 0 2
5764: PLUS
5765: PUSH
5766: LD_EXP 40
5770: PUSH
5771: LD_VAR 0 2
5775: PLUS
5776: PUSH
5777: LD_EXP 40
5781: PUSH
5782: LD_VAR 0 2
5786: PLUS
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5794: LD_ADDR_OWVAR 35
5798: PUSH
5799: LD_INT 10
5801: PUSH
5802: LD_VAR 0 2
5806: MUL
5807: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5808: LD_ADDR_OWVAR 29
5812: PUSH
5813: LD_INT 12
5815: PUSH
5816: LD_INT 10
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: ST_TO_ADDR
// result := CreateHuman ;
5823: LD_ADDR_VAR 0 1
5827: PUSH
5828: CALL_OW 44
5832: ST_TO_ADDR
// end ;
5833: LD_VAR 0 1
5837: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5838: LD_INT 0
5840: PPUSH
5841: PPUSH
5842: PPUSH
// if not ape then
5843: LD_VAR 0 1
5847: NOT
5848: IFFALSE 5852
// exit ;
5850: GO 5977
// side := GetSide ( ape ) ;
5852: LD_ADDR_VAR 0 3
5856: PUSH
5857: LD_VAR 0 1
5861: PPUSH
5862: CALL_OW 255
5866: ST_TO_ADDR
// if not side then
5867: LD_VAR 0 3
5871: NOT
5872: IFFALSE 5926
// begin for i = 1 to apemanPos do
5874: LD_ADDR_VAR 0 4
5878: PUSH
5879: DOUBLE
5880: LD_INT 1
5882: DEC
5883: ST_TO_ADDR
5884: LD_EXP 38
5888: PUSH
5889: FOR_TO
5890: IFFALSE 5924
// if ape in apemanPos [ i ] then
5892: LD_VAR 0 1
5896: PUSH
5897: LD_EXP 38
5901: PUSH
5902: LD_VAR 0 4
5906: ARRAY
5907: IN
5908: IFFALSE 5922
// begin side := i ;
5910: LD_ADDR_VAR 0 3
5914: PUSH
5915: LD_VAR 0 4
5919: ST_TO_ADDR
// break ;
5920: GO 5924
// end ;
5922: GO 5889
5924: POP
5925: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5926: LD_ADDR_EXP 38
5930: PUSH
5931: LD_EXP 38
5935: PPUSH
5936: LD_VAR 0 3
5940: PPUSH
5941: LD_EXP 38
5945: PUSH
5946: LD_VAR 0 3
5950: ARRAY
5951: PUSH
5952: LD_VAR 0 1
5956: DIFF
5957: PPUSH
5958: CALL_OW 1
5962: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5963: LD_ADDR_EXP 35
5967: PUSH
5968: LD_EXP 35
5972: PUSH
5973: LD_INT 1
5975: MINUS
5976: ST_TO_ADDR
// end ; end_of_file
5977: LD_VAR 0 2
5981: RET
// var respawn_queue ; export function init_respawn ; begin
5982: LD_INT 0
5984: PPUSH
// if not def_people_respawning then
5985: LD_EXP 58
5989: NOT
5990: IFFALSE 5994
// exit ;
5992: GO 6036
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5994: LD_ADDR_LOC 9
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: LD_INT 0
6013: PUSH
6014: LD_INT 0
6016: PUSH
6017: LD_INT 0
6019: PUSH
6020: LD_INT 0
6022: PUSH
6023: EMPTY
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: ST_TO_ADDR
// enable ( 10 ) ;
6033: LD_INT 10
6035: ENABLE_MARKED
// end ;
6036: LD_VAR 0 1
6040: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6041: GO 6043
6043: DISABLE
6044: LD_INT 0
6046: PPUSH
6047: PPUSH
6048: PPUSH
6049: PPUSH
// begin for side = 1 to Side_Positions do
6050: LD_ADDR_VAR 0 4
6054: PUSH
6055: DOUBLE
6056: LD_INT 1
6058: DEC
6059: ST_TO_ADDR
6060: LD_EXP 23
6064: PUSH
6065: FOR_TO
6066: IFFALSE 6232
// if Side_Positions [ side ] then
6068: LD_EXP 23
6072: PUSH
6073: LD_VAR 0 4
6077: ARRAY
6078: IFFALSE 6230
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6080: LD_ADDR_VAR 0 2
6084: PUSH
6085: LD_INT 22
6087: PUSH
6088: LD_VAR 0 4
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: LD_INT 21
6099: PUSH
6100: LD_INT 1
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 23
6112: PUSH
6113: LD_INT 0
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: PPUSH
6126: CALL_OW 69
6130: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6131: LD_VAR 0 2
6135: PUSH
6136: LD_EXP 9
6140: LESS
6141: PUSH
6142: LD_LOC 9
6146: PUSH
6147: LD_VAR 0 4
6151: ARRAY
6152: NOT
6153: AND
6154: IFFALSE 6170
// set_queue ( side , TICK ) ;
6156: LD_VAR 0 4
6160: PPUSH
6161: LD_OWVAR 1
6165: PPUSH
6166: CALL 6469 0 2
// time := TICK - respawn_queue [ side ] ;
6170: LD_ADDR_VAR 0 3
6174: PUSH
6175: LD_OWVAR 1
6179: PUSH
6180: LD_LOC 9
6184: PUSH
6185: LD_VAR 0 4
6189: ARRAY
6190: MINUS
6191: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6192: LD_LOC 9
6196: PUSH
6197: LD_VAR 0 4
6201: ARRAY
6202: PUSH
6203: LD_VAR 0 3
6207: PUSH
6208: LD_EXP 16
6212: GREATER
6213: AND
6214: IFFALSE 6230
// respawn_character ( side , time ) ;
6216: LD_VAR 0 4
6220: PPUSH
6221: LD_VAR 0 3
6225: PPUSH
6226: CALL 6238 0 2
// end ;
6230: GO 6065
6232: POP
6233: POP
// enable ;
6234: ENABLE
// end ;
6235: PPOPN 4
6237: END
// function respawn_character ( side , time ) ; var dep ; begin
6238: LD_INT 0
6240: PPUSH
6241: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6242: LD_INT 0
6244: PPUSH
6245: LD_INT 1
6247: PPUSH
6248: CALL_OW 12
6252: PUSH
6253: LD_VAR 0 2
6257: PUSH
6258: LD_EXP 17
6262: LESS
6263: AND
6264: IFFALSE 6268
// exit ;
6266: GO 6464
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6268: LD_ADDR_VAR 0 4
6272: PUSH
6273: LD_INT 22
6275: PUSH
6276: LD_VAR 0 1
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: LD_INT 2
6287: PUSH
6288: LD_INT 30
6290: PUSH
6291: LD_INT 0
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 30
6300: PUSH
6301: LD_INT 1
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 50
6315: PUSH
6316: EMPTY
6317: LIST
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: PPUSH
6324: CALL_OW 69
6328: ST_TO_ADDR
// if not dep then
6329: LD_VAR 0 4
6333: NOT
6334: IFFALSE 6340
// exit else
6336: GO 6464
6338: GO 6364
// dep := dep [ Rand ( 1 , dep ) ] ;
6340: LD_ADDR_VAR 0 4
6344: PUSH
6345: LD_VAR 0 4
6349: PUSH
6350: LD_INT 1
6352: PPUSH
6353: LD_VAR 0 4
6357: PPUSH
6358: CALL_OW 12
6362: ARRAY
6363: ST_TO_ADDR
// uc_side := side ;
6364: LD_ADDR_OWVAR 20
6368: PUSH
6369: LD_VAR 0 1
6373: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6374: LD_ADDR_OWVAR 21
6378: PUSH
6379: LD_EXP 24
6383: PUSH
6384: LD_VAR 0 1
6388: ARRAY
6389: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6390: LD_INT 0
6392: PPUSH
6393: LD_INT 0
6395: PPUSH
6396: LD_EXP 10
6400: PUSH
6401: LD_INT 2
6403: DIV
6404: PPUSH
6405: CALL_OW 380
// hc_importance := 0 ;
6409: LD_ADDR_OWVAR 32
6413: PUSH
6414: LD_INT 0
6416: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6417: CALL_OW 44
6421: PPUSH
6422: LD_VAR 0 4
6426: PPUSH
6427: CALL_OW 250
6431: PPUSH
6432: LD_VAR 0 4
6436: PPUSH
6437: CALL_OW 251
6441: PPUSH
6442: LD_INT 10
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL_OW 50
// set_queue ( side , 0 ) ;
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_INT 0
6459: PPUSH
6460: CALL 6469 0 2
// end ;
6464: LD_VAR 0 3
6468: RET
// function set_queue ( side , time ) ; begin
6469: LD_INT 0
6471: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6472: LD_ADDR_LOC 9
6476: PUSH
6477: LD_LOC 9
6481: PPUSH
6482: LD_VAR 0 1
6486: PPUSH
6487: CALL_OW 3
6491: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6492: LD_ADDR_LOC 9
6496: PUSH
6497: LD_LOC 9
6501: PPUSH
6502: LD_VAR 0 1
6506: PPUSH
6507: LD_VAR 0 2
6511: PPUSH
6512: CALL_OW 2
6516: ST_TO_ADDR
// end ; end_of_file
6517: LD_VAR 0 3
6521: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6522: LD_VAR 0 1
6526: PPUSH
6527: CALL_OW 266
6531: PUSH
6532: LD_INT 0
6534: PUSH
6535: LD_INT 1
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: IN
6542: IFFALSE 6567
// SetBName ( b , @ & GetSide ( b ) ) ;
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_STRING @
6551: PUSH
6552: LD_VAR 0 1
6556: PPUSH
6557: CALL_OW 255
6561: STR
6562: PPUSH
6563: CALL_OW 500
// if def_game_rules then
6567: LD_EXP 47
6571: IFFALSE 6608
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6573: LD_VAR 0 1
6577: PPUSH
6578: LD_VAR 0 1
6582: PPUSH
6583: CALL_OW 266
6587: PPUSH
6588: LD_VAR 0 1
6592: PPUSH
6593: CALL_OW 255
6597: PPUSH
6598: LD_INT 0
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: CALL 15830 0 5
// end ;
6608: PPOPN 2
6610: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6611: LD_VAR 0 1
6615: PPUSH
6616: CALL_OW 266
6620: PUSH
6621: LD_INT 0
6623: PUSH
6624: LD_INT 1
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: IN
6631: IFFALSE 6656
// SetBName ( b , @ & GetSide ( b ) ) ;
6633: LD_VAR 0 1
6637: PPUSH
6638: LD_STRING @
6640: PUSH
6641: LD_VAR 0 1
6645: PPUSH
6646: CALL_OW 255
6650: STR
6651: PPUSH
6652: CALL_OW 500
// if def_game_rules then
6656: LD_EXP 47
6660: IFFALSE 6699
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6662: LD_VAR 0 1
6666: PPUSH
6667: LD_VAR 0 1
6671: PPUSH
6672: CALL_OW 266
6676: PPUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 255
6686: PPUSH
6687: LD_VAR 0 2
6691: PPUSH
6692: LD_INT 1
6694: PPUSH
6695: CALL 15830 0 5
// end ;
6699: PPOPN 3
6701: END
// on VehicleConstructed ( veh , fac ) do var side ;
6702: LD_INT 0
6704: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6705: LD_VAR 0 1
6709: PPUSH
6710: CALL_OW 263
6714: PUSH
6715: LD_INT 5
6717: EQUAL
6718: IFFALSE 6860
// begin side := GetSide ( veh ) ;
6720: LD_ADDR_VAR 0 3
6724: PUSH
6725: LD_VAR 0 1
6729: PPUSH
6730: CALL_OW 255
6734: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6735: LD_ADDR_EXP 38
6739: PUSH
6740: LD_EXP 38
6744: PPUSH
6745: LD_VAR 0 3
6749: PPUSH
6750: LD_EXP 38
6754: PUSH
6755: LD_VAR 0 3
6759: ARRAY
6760: PPUSH
6761: LD_INT 52
6763: PUSH
6764: EMPTY
6765: LIST
6766: PPUSH
6767: CALL_OW 72
6771: PUSH
6772: LD_INT 22
6774: PUSH
6775: LD_VAR 0 3
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 2
6786: PUSH
6787: LD_INT 33
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 25
6799: PUSH
6800: LD_INT 12
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 25
6809: PUSH
6810: LD_INT 15
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 25
6819: PUSH
6820: LD_INT 16
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 25
6829: PUSH
6830: LD_INT 17
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PPUSH
6849: CALL_OW 69
6853: UNION
6854: PPUSH
6855: CALL_OW 1
6859: ST_TO_ADDR
// end ; end ;
6860: PPOPN 3
6862: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6863: LD_INT 0
6865: PPUSH
6866: PPUSH
6867: PPUSH
6868: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6869: LD_VAR 0 1
6873: PPUSH
6874: CALL_OW 257
6878: PUSH
6879: LD_INT 12
6881: PUSH
6882: LD_INT 15
6884: PUSH
6885: LD_INT 17
6887: PUSH
6888: LD_INT 16
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: IN
6897: PUSH
6898: LD_VAR 0 1
6902: PPUSH
6903: CALL_OW 263
6907: PUSH
6908: LD_INT 5
6910: EQUAL
6911: OR
6912: IFFALSE 6923
// ApeKilled ( j ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: CALL 5838 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6923: LD_VAR 0 1
6927: PPUSH
6928: CALL_OW 266
6932: PUSH
6933: LD_INT 0
6935: PUSH
6936: LD_INT 1
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: IN
6943: IFFALSE 7025
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6945: LD_ADDR_VAR 0 4
6949: PUSH
6950: LD_EXP 23
6954: PUSH
6955: LD_VAR 0 1
6959: PPUSH
6960: CALL_OW 255
6964: ARRAY
6965: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6966: LD_ADDR_VAR 0 2
6970: PUSH
6971: LD_EXP 31
6975: PUSH
6976: LD_VAR 0 4
6980: ARRAY
6981: PUSH
6982: LD_INT 1
6984: ARRAY
6985: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6986: LD_ADDR_VAR 0 3
6990: PUSH
6991: LD_EXP 31
6995: PUSH
6996: LD_VAR 0 4
7000: ARRAY
7001: PUSH
7002: LD_INT 2
7004: ARRAY
7005: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_VAR 0 3
7015: PPUSH
7016: CALL_OW 420
7020: PPUSH
7021: CALL_OW 419
// end ; if def_game_rules then
7025: LD_EXP 47
7029: IFFALSE 7128
// if ( GetType ( j ) = 3 ) then
7031: LD_VAR 0 1
7035: PPUSH
7036: CALL_OW 247
7040: PUSH
7041: LD_INT 3
7043: EQUAL
7044: IFFALSE 7084
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7046: LD_VAR 0 1
7050: PPUSH
7051: LD_VAR 0 1
7055: PPUSH
7056: CALL_OW 266
7060: PPUSH
7061: LD_VAR 0 1
7065: PPUSH
7066: CALL_OW 255
7070: PPUSH
7071: LD_INT 0
7073: PPUSH
7074: LD_INT 1
7076: NEG
7077: PPUSH
7078: CALL 15830 0 5
7082: GO 7128
// if ( GetChassis ( j ) = 25 ) then
7084: LD_VAR 0 1
7088: PPUSH
7089: CALL_OW 265
7093: PUSH
7094: LD_INT 25
7096: EQUAL
7097: IFFALSE 7128
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_INT 37
7106: PPUSH
7107: LD_VAR 0 1
7111: PPUSH
7112: CALL_OW 255
7116: PPUSH
7117: LD_INT 0
7119: PPUSH
7120: LD_INT 1
7122: NEG
7123: PPUSH
7124: CALL 15830 0 5
// end ;
7128: PPOPN 5
7130: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7131: LD_EXP 47
7135: PUSH
7136: LD_VAR 0 1
7140: PPUSH
7141: CALL_OW 265
7145: PUSH
7146: LD_INT 25
7148: EQUAL
7149: AND
7150: IFFALSE 7182
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7152: LD_VAR 0 1
7156: PPUSH
7157: LD_INT 37
7159: PPUSH
7160: LD_VAR 0 1
7164: PPUSH
7165: CALL_OW 255
7169: PPUSH
7170: LD_VAR 0 3
7174: PPUSH
7175: LD_INT 1
7177: PPUSH
7178: CALL 15830 0 5
// end ;
7182: PPOPN 4
7184: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7185: LD_VAR 0 1
7189: PPUSH
7190: LD_VAR 0 2
7194: PPUSH
7195: LD_VAR 0 3
7199: PPUSH
7200: LD_OWVAR 2
7204: PPUSH
7205: CALL 17960 0 4
7209: PPOPN 3
7211: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
7212: LD_INT 0
7214: PPUSH
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
7219: PPUSH
// artefact_number := 3 ;
7220: LD_ADDR_EXP 42
7224: PUSH
7225: LD_INT 3
7227: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
7228: LD_ADDR_EXP 43
7232: PUSH
7233: LD_INT 1
7235: PUSH
7236: LD_INT 0
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: LD_INT 0
7244: PUSH
7245: LD_INT 3
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
7255: LD_ADDR_EXP 44
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: LD_INT 5
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
7274: LD_ADDR_VAR 0 2
7278: PUSH
7279: LD_INT 1
7281: PUSH
7282: LD_INT 4
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: LD_INT 2
7291: PUSH
7292: LD_INT 5
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: LD_INT 3
7301: PUSH
7302: LD_INT 9
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: LIST
7313: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
7314: LD_ADDR_VAR 0 3
7318: PUSH
7319: LD_INT 3
7321: PUSH
7322: LD_INT 4
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
7333: LD_ADDR_VAR 0 4
7337: PUSH
7338: LD_INT 150
7340: PUSH
7341: LD_INT 250
7343: PUSH
7344: LD_INT 400
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
7352: LD_ADDR_VAR 0 5
7356: PUSH
7357: LD_INT 2
7359: PUSH
7360: LD_INT 10
7362: PUSH
7363: LD_INT 20
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
7371: LD_ADDR_VAR 0 6
7375: PUSH
7376: LD_INT 6
7378: PUSH
7379: LD_INT 18
7381: PUSH
7382: LD_INT 50
7384: PUSH
7385: EMPTY
7386: LIST
7387: LIST
7388: LIST
7389: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
7390: LD_VAR 0 2
7394: PPUSH
7395: LD_VAR 0 3
7399: PPUSH
7400: LD_VAR 0 4
7404: PPUSH
7405: LD_VAR 0 5
7409: PPUSH
7410: LD_VAR 0 6
7414: PPUSH
7415: CALL 7424 0 5
// end ;
7419: LD_VAR 0 1
7423: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
7424: LD_INT 0
7426: PPUSH
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
// disable ( 1 ) ;
7431: LD_INT 1
7433: DISABLE_MARKED
// disable ( 5 ) ;
7434: LD_INT 5
7436: DISABLE_MARKED
// disable ( 6 ) ;
7437: LD_INT 6
7439: DISABLE_MARKED
// disable ( 7 ) ;
7440: LD_INT 7
7442: DISABLE_MARKED
// for side = 1 to 8 do
7443: LD_ADDR_VAR 0 9
7447: PUSH
7448: DOUBLE
7449: LD_INT 1
7451: DEC
7452: ST_TO_ADDR
7453: LD_INT 8
7455: PUSH
7456: FOR_TO
7457: IFFALSE 7473
// SetArtifactRes ( side , state_enabled ) ;
7459: LD_VAR 0 9
7463: PPUSH
7464: LD_INT 1
7466: PPUSH
7467: CALL_OW 467
7471: GO 7456
7473: POP
7474: POP
// for un = 0 to ( artefact_number - 1 ) do
7475: LD_ADDR_VAR 0 7
7479: PUSH
7480: DOUBLE
7481: LD_INT 0
7483: DEC
7484: ST_TO_ADDR
7485: LD_EXP 42
7489: PUSH
7490: LD_INT 1
7492: MINUS
7493: PUSH
7494: FOR_TO
7495: IFFALSE 7893
// begin base := un * 100 ;
7497: LD_ADDR_VAR 0 10
7501: PUSH
7502: LD_VAR 0 7
7506: PUSH
7507: LD_INT 100
7509: MUL
7510: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
7511: LD_VAR 0 10
7515: PUSH
7516: LD_INT 1
7518: PLUS
7519: PPUSH
7520: LD_VAR 0 1
7524: PUSH
7525: LD_VAR 0 7
7529: PUSH
7530: LD_INT 1
7532: PLUS
7533: ARRAY
7534: PUSH
7535: LD_INT 1
7537: ARRAY
7538: PPUSH
7539: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7543: LD_VAR 0 10
7547: PUSH
7548: LD_INT 2
7550: PLUS
7551: PPUSH
7552: LD_VAR 0 1
7556: PUSH
7557: LD_VAR 0 7
7561: PUSH
7562: LD_INT 1
7564: PLUS
7565: ARRAY
7566: PUSH
7567: LD_INT 2
7569: ARRAY
7570: PPUSH
7571: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7575: LD_VAR 0 10
7579: PUSH
7580: LD_INT 3
7582: PLUS
7583: PPUSH
7584: LD_VAR 0 2
7588: PUSH
7589: LD_VAR 0 7
7593: PUSH
7594: LD_INT 1
7596: PLUS
7597: ARRAY
7598: PPUSH
7599: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7603: LD_VAR 0 10
7607: PUSH
7608: LD_INT 5
7610: PLUS
7611: PPUSH
7612: LD_VAR 0 3
7616: PUSH
7617: LD_VAR 0 7
7621: PUSH
7622: LD_INT 1
7624: PLUS
7625: ARRAY
7626: PPUSH
7627: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7631: LD_VAR 0 10
7635: PUSH
7636: LD_INT 6
7638: PLUS
7639: PPUSH
7640: LD_VAR 0 4
7644: PUSH
7645: LD_VAR 0 7
7649: PUSH
7650: LD_INT 1
7652: PLUS
7653: ARRAY
7654: PPUSH
7655: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7659: LD_VAR 0 10
7663: PUSH
7664: LD_INT 7
7666: PLUS
7667: PPUSH
7668: LD_VAR 0 5
7672: PUSH
7673: LD_VAR 0 7
7677: PUSH
7678: LD_INT 1
7680: PLUS
7681: ARRAY
7682: PPUSH
7683: CALL_OW 109
// SetTag ( base + 08 , false ) ;
7687: LD_VAR 0 10
7691: PUSH
7692: LD_INT 8
7694: PLUS
7695: PPUSH
7696: LD_INT 0
7698: PPUSH
7699: CALL_OW 109
// SetTag ( base + 09 , false ) ;
7703: LD_VAR 0 10
7707: PUSH
7708: LD_INT 9
7710: PLUS
7711: PPUSH
7712: LD_INT 0
7714: PPUSH
7715: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
7719: LD_VAR 0 10
7723: PUSH
7724: LD_INT 11
7726: PLUS
7727: PPUSH
7728: LD_INT 0
7730: PPUSH
7731: CALL_OW 109
// SetTag ( base + 12 , false ) ;
7735: LD_VAR 0 10
7739: PUSH
7740: LD_INT 12
7742: PLUS
7743: PPUSH
7744: LD_INT 0
7746: PPUSH
7747: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7751: LD_VAR 0 10
7755: PUSH
7756: LD_INT 13
7758: PLUS
7759: PPUSH
7760: LD_INT 0
7762: PPUSH
7763: CALL_OW 109
// for i = 0 to 7 do
7767: LD_ADDR_VAR 0 8
7771: PUSH
7772: DOUBLE
7773: LD_INT 0
7775: DEC
7776: ST_TO_ADDR
7777: LD_INT 7
7779: PUSH
7780: FOR_TO
7781: IFFALSE 7889
// begin SetTag ( base + i * 10 + 21 , false ) ;
7783: LD_VAR 0 10
7787: PUSH
7788: LD_VAR 0 8
7792: PUSH
7793: LD_INT 10
7795: MUL
7796: PLUS
7797: PUSH
7798: LD_INT 21
7800: PLUS
7801: PPUSH
7802: LD_INT 0
7804: PPUSH
7805: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
7809: LD_VAR 0 10
7813: PUSH
7814: LD_VAR 0 8
7818: PUSH
7819: LD_INT 10
7821: MUL
7822: PLUS
7823: PUSH
7824: LD_INT 22
7826: PLUS
7827: PPUSH
7828: LD_INT 0
7830: PPUSH
7831: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
7835: LD_VAR 0 10
7839: PUSH
7840: LD_VAR 0 8
7844: PUSH
7845: LD_INT 10
7847: MUL
7848: PLUS
7849: PUSH
7850: LD_INT 23
7852: PLUS
7853: PPUSH
7854: LD_INT 0
7856: PPUSH
7857: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
7861: LD_VAR 0 10
7865: PUSH
7866: LD_VAR 0 8
7870: PUSH
7871: LD_INT 10
7873: MUL
7874: PLUS
7875: PUSH
7876: LD_INT 25
7878: PLUS
7879: PPUSH
7880: LD_INT 0
7882: PPUSH
7883: CALL_OW 109
// end ;
7887: GO 7780
7889: POP
7890: POP
// end ;
7891: GO 7494
7893: POP
7894: POP
// enable ( 20 ) ;
7895: LD_INT 20
7897: ENABLE_MARKED
// labs_in_use := [ ] ;
7898: LD_ADDR_EXP 45
7902: PUSH
7903: EMPTY
7904: ST_TO_ADDR
// if def_artefact_one then
7905: LD_EXP 1
7909: IFFALSE 7936
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
7911: LD_INT 4
7913: PPUSH
7914: LD_EXP 44
7918: PUSH
7919: LD_INT 1
7921: ARRAY
7922: PPUSH
7923: LD_INT 16
7925: PPUSH
7926: LD_INT 0
7928: PPUSH
7929: CALL_OW 59
// enable ( 5 ) ;
7933: LD_INT 5
7935: ENABLE_MARKED
// end ; if def_artefact_two then
7936: LD_EXP 2
7940: IFFALSE 7967
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
7942: LD_INT 4
7944: PPUSH
7945: LD_EXP 44
7949: PUSH
7950: LD_INT 2
7952: ARRAY
7953: PPUSH
7954: LD_INT 16
7956: PPUSH
7957: LD_INT 0
7959: PPUSH
7960: CALL_OW 59
// enable ( 6 ) ;
7964: LD_INT 6
7966: ENABLE_MARKED
// end ; if def_artefact_three then
7967: LD_EXP 3
7971: IFFALSE 7998
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
7973: LD_INT 4
7975: PPUSH
7976: LD_EXP 44
7980: PUSH
7981: LD_INT 3
7983: ARRAY
7984: PPUSH
7985: LD_INT 16
7987: PPUSH
7988: LD_INT 0
7990: PPUSH
7991: CALL_OW 59
// enable ( 7 ) ;
7995: LD_INT 7
7997: ENABLE_MARKED
// end ; end ;
7998: LD_VAR 0 6
8002: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
8003: LD_INT 0
8005: PPUSH
8006: PPUSH
// begin art := artefact_num [ size ] ;
8007: LD_ADDR_VAR 0 3
8011: PUSH
8012: LD_EXP 43
8016: PUSH
8017: LD_VAR 0 2
8021: ARRAY
8022: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8023: LD_ADDR_VAR 0 4
8027: PUSH
8028: LD_VAR 0 3
8032: PUSH
8033: LD_INT 1
8035: MINUS
8036: PUSH
8037: LD_INT 100
8039: MUL
8040: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
8041: LD_VAR 0 4
8045: PUSH
8046: LD_INT 9
8048: PLUS
8049: PPUSH
8050: LD_INT 0
8052: PPUSH
8053: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8057: LD_VAR 0 4
8061: PUSH
8062: LD_INT 13
8064: PLUS
8065: PPUSH
8066: LD_INT 0
8068: PPUSH
8069: CALL_OW 109
// Init_Lab ( art ) ;
8073: LD_VAR 0 3
8077: PPUSH
8078: CALL 9554 0 1
// end ;
8082: PPOPN 4
8084: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
8085: LD_INT 0
8087: PPUSH
8088: PPUSH
8089: PPUSH
// begin art := artefact_num [ size ] ;
8090: LD_ADDR_VAR 0 3
8094: PUSH
8095: LD_EXP 43
8099: PUSH
8100: LD_VAR 0 2
8104: ARRAY
8105: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8106: LD_ADDR_VAR 0 4
8110: PUSH
8111: LD_VAR 0 3
8115: PUSH
8116: LD_INT 1
8118: MINUS
8119: PUSH
8120: LD_INT 100
8122: MUL
8123: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
8124: LD_VAR 0 4
8128: PUSH
8129: LD_INT 9
8131: PLUS
8132: PPUSH
8133: LD_INT 1
8135: PPUSH
8136: CALL_OW 109
// SetTag ( base + 13 , un ) ;
8140: LD_VAR 0 4
8144: PUSH
8145: LD_INT 13
8147: PLUS
8148: PPUSH
8149: LD_VAR 0 1
8153: PPUSH
8154: CALL_OW 109
// if GetTag ( base + 11 ) then
8158: LD_VAR 0 4
8162: PUSH
8163: LD_INT 11
8165: PLUS
8166: PPUSH
8167: CALL_OW 110
8171: IFFALSE 8334
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
8173: LD_ADDR_VAR 0 5
8177: PUSH
8178: LD_VAR 0 4
8182: PUSH
8183: LD_INT 11
8185: PLUS
8186: PPUSH
8187: CALL_OW 110
8191: PPUSH
8192: CALL_OW 255
8196: ST_TO_ADDR
// if GetTag ( base + 12 ) then
8197: LD_VAR 0 4
8201: PUSH
8202: LD_INT 12
8204: PLUS
8205: PPUSH
8206: CALL_OW 110
8210: IFFALSE 8278
// begin ComCancel ( GetTag ( base + 11 ) ) ;
8212: LD_VAR 0 4
8216: PUSH
8217: LD_INT 11
8219: PLUS
8220: PPUSH
8221: CALL_OW 110
8225: PPUSH
8226: CALL_OW 127
// wait ( 5 ) ;
8230: LD_INT 5
8232: PPUSH
8233: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
8237: LD_ADDR_EXP 45
8241: PUSH
8242: LD_EXP 45
8246: PUSH
8247: LD_VAR 0 4
8251: PUSH
8252: LD_INT 11
8254: PLUS
8255: PPUSH
8256: CALL_OW 110
8260: DIFF
8261: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
8262: LD_VAR 0 4
8266: PUSH
8267: LD_INT 12
8269: PLUS
8270: PPUSH
8271: LD_INT 0
8273: PPUSH
8274: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
8278: LD_VAR 0 4
8282: PUSH
8283: LD_VAR 0 5
8287: PUSH
8288: LD_INT 10
8290: MUL
8291: PLUS
8292: PUSH
8293: LD_INT 11
8295: PLUS
8296: PPUSH
8297: CALL_OW 110
8301: NOT
8302: IFFALSE 8318
// DeInit_Lab ( side , art ) ;
8304: LD_VAR 0 5
8308: PPUSH
8309: LD_VAR 0 3
8313: PPUSH
8314: CALL 10090 0 2
// SetTag ( base + 11 , 0 ) ;
8318: LD_VAR 0 4
8322: PUSH
8323: LD_INT 11
8325: PLUS
8326: PPUSH
8327: LD_INT 0
8329: PPUSH
8330: CALL_OW 109
// end ; end ;
8334: PPOPN 5
8336: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
8337: LD_INT 0
8339: PPUSH
8340: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8341: LD_ADDR_VAR 0 3
8345: PUSH
8346: LD_VAR 0 1
8350: PPUSH
8351: CALL_OW 255
8355: PUSH
8356: LD_INT 1
8358: MINUS
8359: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8360: LD_ADDR_VAR 0 2
8364: PUSH
8365: DOUBLE
8366: LD_INT 0
8368: DEC
8369: ST_TO_ADDR
8370: LD_EXP 42
8374: PUSH
8375: LD_INT 1
8377: MINUS
8378: PUSH
8379: FOR_TO
8380: IFFALSE 8422
// if lab = GetTag ( un * 100 + 11 ) then
8382: LD_VAR 0 1
8386: PUSH
8387: LD_VAR 0 2
8391: PUSH
8392: LD_INT 100
8394: MUL
8395: PUSH
8396: LD_INT 11
8398: PLUS
8399: PPUSH
8400: CALL_OW 110
8404: EQUAL
8405: IFFALSE 8420
// Init_Lab ( un + 1 ) ;
8407: LD_VAR 0 2
8411: PUSH
8412: LD_INT 1
8414: PLUS
8415: PPUSH
8416: CALL 9554 0 1
8420: GO 8379
8422: POP
8423: POP
// end ;
8424: PPOPN 3
8426: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
8427: LD_INT 0
8429: PPUSH
8430: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8431: LD_ADDR_VAR 0 4
8435: PUSH
8436: LD_VAR 0 1
8440: PPUSH
8441: CALL_OW 255
8445: PUSH
8446: LD_INT 1
8448: MINUS
8449: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: DOUBLE
8456: LD_INT 0
8458: DEC
8459: ST_TO_ADDR
8460: LD_EXP 42
8464: PUSH
8465: LD_INT 1
8467: MINUS
8468: PUSH
8469: FOR_TO
8470: IFFALSE 8588
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8472: LD_VAR 0 3
8476: PUSH
8477: LD_INT 100
8479: MUL
8480: PUSH
8481: LD_INT 11
8483: PLUS
8484: PPUSH
8485: CALL_OW 110
8489: PUSH
8490: LD_VAR 0 1
8494: EQUAL
8495: PUSH
8496: LD_VAR 0 3
8500: PUSH
8501: LD_INT 100
8503: MUL
8504: PUSH
8505: LD_INT 12
8507: PLUS
8508: PPUSH
8509: CALL_OW 110
8513: AND
8514: IFFALSE 8586
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
8516: LD_VAR 0 3
8520: PUSH
8521: LD_INT 100
8523: MUL
8524: PUSH
8525: LD_VAR 0 4
8529: PUSH
8530: LD_INT 10
8532: MUL
8533: PLUS
8534: PUSH
8535: LD_INT 22
8537: PLUS
8538: PPUSH
8539: LD_VAR 0 2
8543: PPUSH
8544: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8548: LD_VAR 0 3
8552: PUSH
8553: LD_INT 100
8555: MUL
8556: PUSH
8557: LD_INT 12
8559: PLUS
8560: PPUSH
8561: LD_INT 0
8563: PPUSH
8564: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8568: LD_ADDR_EXP 45
8572: PUSH
8573: LD_EXP 45
8577: PUSH
8578: LD_VAR 0 1
8582: DIFF
8583: ST_TO_ADDR
// break ;
8584: GO 8588
// end ;
8586: GO 8469
8588: POP
8589: POP
// Update_Artefact ( lab ) ;
8590: LD_VAR 0 1
8594: PPUSH
8595: CALL 10229 0 1
// end ;
8599: PPOPN 4
8601: END
// on SpecResearchComplete ( lab ) do var un , side ;
8602: LD_INT 0
8604: PPUSH
8605: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8606: LD_ADDR_VAR 0 3
8610: PUSH
8611: LD_VAR 0 1
8615: PPUSH
8616: CALL_OW 255
8620: PUSH
8621: LD_INT 1
8623: MINUS
8624: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8625: LD_ADDR_VAR 0 2
8629: PUSH
8630: DOUBLE
8631: LD_INT 0
8633: DEC
8634: ST_TO_ADDR
8635: LD_EXP 42
8639: PUSH
8640: LD_INT 1
8642: MINUS
8643: PUSH
8644: FOR_TO
8645: IFFALSE 8791
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8647: LD_VAR 0 2
8651: PUSH
8652: LD_INT 100
8654: MUL
8655: PUSH
8656: LD_INT 11
8658: PLUS
8659: PPUSH
8660: CALL_OW 110
8664: PUSH
8665: LD_VAR 0 1
8669: EQUAL
8670: PUSH
8671: LD_VAR 0 2
8675: PUSH
8676: LD_INT 100
8678: MUL
8679: PUSH
8680: LD_INT 12
8682: PLUS
8683: PPUSH
8684: CALL_OW 110
8688: AND
8689: IFFALSE 8789
// begin SetTag ( un * 100 + 12 , false ) ;
8691: LD_VAR 0 2
8695: PUSH
8696: LD_INT 100
8698: MUL
8699: PUSH
8700: LD_INT 12
8702: PLUS
8703: PPUSH
8704: LD_INT 0
8706: PPUSH
8707: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
8711: LD_VAR 0 2
8715: PUSH
8716: LD_INT 100
8718: MUL
8719: PUSH
8720: LD_VAR 0 3
8724: PUSH
8725: LD_INT 10
8727: MUL
8728: PLUS
8729: PUSH
8730: LD_INT 21
8732: PLUS
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
8741: LD_VAR 0 2
8745: PUSH
8746: LD_INT 100
8748: MUL
8749: PUSH
8750: LD_VAR 0 3
8754: PUSH
8755: LD_INT 10
8757: MUL
8758: PLUS
8759: PUSH
8760: LD_INT 25
8762: PLUS
8763: PPUSH
8764: LD_VAR 0 1
8768: PPUSH
8769: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8773: LD_ADDR_EXP 45
8777: PUSH
8778: LD_EXP 45
8782: PUSH
8783: LD_VAR 0 1
8787: DIFF
8788: ST_TO_ADDR
// end ;
8789: GO 8644
8791: POP
8792: POP
// Update_Artefact ( lab ) ;
8793: LD_VAR 0 1
8797: PPUSH
8798: CALL 10229 0 1
// end ;
8802: PPOPN 3
8804: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
8805: LD_INT 0
8807: PPUSH
8808: PPUSH
8809: PPUSH
8810: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
8811: LD_ADDR_VAR 0 7
8815: PUSH
8816: LD_VAR 0 2
8820: PUSH
8821: LD_INT 1
8823: MINUS
8824: PUSH
8825: LD_INT 3
8827: MOD
8828: PUSH
8829: LD_INT 1
8831: PLUS
8832: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8833: LD_ADDR_VAR 0 8
8837: PUSH
8838: LD_VAR 0 7
8842: PUSH
8843: LD_INT 1
8845: MINUS
8846: PUSH
8847: LD_INT 100
8849: MUL
8850: ST_TO_ADDR
// if number <= 3 then
8851: LD_VAR 0 2
8855: PUSH
8856: LD_INT 3
8858: LESSEQUAL
8859: IFFALSE 9091
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
8861: LD_VAR 0 8
8865: PUSH
8866: LD_INT 11
8868: PLUS
8869: PPUSH
8870: CALL_OW 110
8874: PPUSH
8875: LD_VAR 0 8
8879: PUSH
8880: LD_INT 5
8882: PLUS
8883: PPUSH
8884: CALL_OW 110
8888: PPUSH
8889: LD_INT 1
8891: PPUSH
8892: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
8896: LD_VAR 0 8
8900: PUSH
8901: LD_INT 11
8903: PLUS
8904: PPUSH
8905: CALL_OW 110
8909: PPUSH
8910: LD_VAR 0 8
8914: PUSH
8915: LD_VAR 0 1
8919: PUSH
8920: LD_INT 10
8922: MUL
8923: PLUS
8924: PUSH
8925: LD_INT 12
8927: PLUS
8928: PPUSH
8929: CALL_OW 110
8933: PPUSH
8934: CALL_OW 329
// SetTag ( base + 12 , true ) ;
8938: LD_VAR 0 8
8942: PUSH
8943: LD_INT 12
8945: PLUS
8946: PPUSH
8947: LD_INT 1
8949: PPUSH
8950: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
8954: LD_ADDR_EXP 45
8958: PUSH
8959: LD_EXP 45
8963: PUSH
8964: LD_VAR 0 8
8968: PUSH
8969: LD_INT 11
8971: PLUS
8972: PPUSH
8973: CALL_OW 110
8977: ADD
8978: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8979: LD_ADDR_VAR 0 5
8983: PUSH
8984: DOUBLE
8985: LD_INT 0
8987: DEC
8988: ST_TO_ADDR
8989: LD_EXP 42
8993: PUSH
8994: LD_INT 1
8996: MINUS
8997: PUSH
8998: FOR_TO
8999: IFFALSE 9087
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9001: LD_VAR 0 8
9005: PUSH
9006: LD_INT 11
9008: PLUS
9009: PPUSH
9010: CALL_OW 110
9014: PUSH
9015: LD_VAR 0 5
9019: PUSH
9020: LD_INT 100
9022: MUL
9023: PUSH
9024: LD_INT 11
9026: PLUS
9027: PPUSH
9028: CALL_OW 110
9032: PUSH
9033: LD_VAR 0 5
9037: PUSH
9038: LD_INT 100
9040: MUL
9041: PUSH
9042: LD_VAR 0 1
9046: PUSH
9047: LD_INT 10
9049: MUL
9050: PLUS
9051: PUSH
9052: LD_INT 15
9054: PLUS
9055: PPUSH
9056: CALL_OW 110
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: IN
9065: IFFALSE 9085
// DeInit_Lab ( side , un + 1 ) ;
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_VAR 0 5
9076: PUSH
9077: LD_INT 1
9079: PLUS
9080: PPUSH
9081: CALL 10090 0 2
9085: GO 8998
9087: POP
9088: POP
// end else
9089: GO 9265
// begin succes := false ;
9091: LD_ADDR_VAR 0 6
9095: PUSH
9096: LD_INT 0
9098: ST_TO_ADDR
// case art of 1 :
9099: LD_VAR 0 7
9103: PUSH
9104: LD_INT 1
9106: DOUBLE
9107: EQUAL
9108: IFTRUE 9112
9110: GO 9140
9112: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
9113: LD_ADDR_VAR 0 6
9117: PUSH
9118: LD_VAR 0 1
9122: PPUSH
9123: LD_VAR 0 3
9127: PPUSH
9128: LD_VAR 0 4
9132: PPUSH
9133: CALL 10662 0 3
9137: ST_TO_ADDR
9138: GO 9208
9140: LD_INT 2
9142: DOUBLE
9143: EQUAL
9144: IFTRUE 9148
9146: GO 9171
9148: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
9149: LD_ADDR_VAR 0 6
9153: PUSH
9154: LD_VAR 0 1
9158: PPUSH
9159: LD_VAR 0 3
9163: PPUSH
9164: CALL 10900 0 2
9168: ST_TO_ADDR
9169: GO 9208
9171: LD_INT 3
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9207
9179: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
9180: LD_ADDR_VAR 0 6
9184: PUSH
9185: LD_VAR 0 1
9189: PPUSH
9190: LD_VAR 0 3
9194: PPUSH
9195: LD_VAR 0 4
9199: PPUSH
9200: CALL 11296 0 3
9204: ST_TO_ADDR
9205: GO 9208
9207: POP
// if succes then
9208: LD_VAR 0 6
9212: IFFALSE 9265
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
9214: LD_VAR 0 8
9218: PUSH
9219: LD_VAR 0 1
9223: PUSH
9224: LD_INT 10
9226: MUL
9227: PLUS
9228: PUSH
9229: LD_INT 13
9231: PLUS
9232: PPUSH
9233: LD_VAR 0 8
9237: PUSH
9238: LD_INT 7
9240: PLUS
9241: PPUSH
9242: CALL_OW 110
9246: PPUSH
9247: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
9251: LD_VAR 0 1
9255: PPUSH
9256: LD_VAR 0 7
9260: PPUSH
9261: CALL 9268 0 2
// end ; end ; end ;
9265: PPOPN 8
9267: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
9268: LD_INT 0
9270: PPUSH
9271: PPUSH
9272: PPUSH
// base := ( art - 1 ) * 100 ;
9273: LD_ADDR_VAR 0 4
9277: PUSH
9278: LD_VAR 0 2
9282: PUSH
9283: LD_INT 1
9285: MINUS
9286: PUSH
9287: LD_INT 100
9289: MUL
9290: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9291: LD_ADDR_VAR 0 5
9295: PUSH
9296: LD_VAR 0 4
9300: PUSH
9301: LD_VAR 0 1
9305: PUSH
9306: LD_INT 10
9308: MUL
9309: PLUS
9310: PUSH
9311: LD_INT 15
9313: PLUS
9314: PPUSH
9315: CALL_OW 110
9319: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
9320: LD_VAR 0 5
9324: PUSH
9325: LD_VAR 0 5
9329: PUSH
9330: LD_EXP 45
9334: IN
9335: NOT
9336: AND
9337: IFFALSE 9395
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
9339: LD_VAR 0 1
9343: PPUSH
9344: LD_VAR 0 4
9348: PUSH
9349: LD_INT 1
9351: PLUS
9352: PUSH
9353: LD_VAR 0 4
9357: PUSH
9358: LD_VAR 0 1
9362: PUSH
9363: LD_INT 10
9365: MUL
9366: PLUS
9367: PUSH
9368: LD_INT 11
9370: PLUS
9371: PPUSH
9372: CALL_OW 110
9376: PLUS
9377: PPUSH
9378: CALL_OW 110
9382: PPUSH
9383: LD_INT 1
9385: PPUSH
9386: LD_VAR 0 5
9390: PPUSH
9391: CALL_OW 468
// end ;
9395: LD_VAR 0 3
9399: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
9400: LD_INT 0
9402: PPUSH
9403: PPUSH
9404: PPUSH
// base := ( art - 1 ) * 100 ;
9405: LD_ADDR_VAR 0 4
9409: PUSH
9410: LD_VAR 0 2
9414: PUSH
9415: LD_INT 1
9417: MINUS
9418: PUSH
9419: LD_INT 100
9421: MUL
9422: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9423: LD_ADDR_VAR 0 5
9427: PUSH
9428: LD_VAR 0 4
9432: PUSH
9433: LD_VAR 0 1
9437: PUSH
9438: LD_INT 10
9440: MUL
9441: PLUS
9442: PUSH
9443: LD_INT 15
9445: PLUS
9446: PPUSH
9447: CALL_OW 110
9451: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
9452: LD_VAR 0 5
9456: PUSH
9457: LD_VAR 0 5
9461: PUSH
9462: LD_EXP 45
9466: IN
9467: NOT
9468: AND
9469: PUSH
9470: LD_VAR 0 5
9474: PPUSH
9475: CALL_OW 313
9479: AND
9480: IFFALSE 9549
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
9482: LD_VAR 0 1
9486: PPUSH
9487: LD_VAR 0 4
9491: PUSH
9492: LD_INT 1
9494: PLUS
9495: PUSH
9496: LD_VAR 0 4
9500: PUSH
9501: LD_VAR 0 1
9505: PUSH
9506: LD_INT 10
9508: MUL
9509: PLUS
9510: PUSH
9511: LD_INT 11
9513: PLUS
9514: PPUSH
9515: CALL_OW 110
9519: PLUS
9520: PPUSH
9521: CALL_OW 110
9525: PPUSH
9526: LD_VAR 0 4
9530: PUSH
9531: LD_INT 3
9533: PLUS
9534: PPUSH
9535: CALL_OW 110
9539: PPUSH
9540: LD_VAR 0 5
9544: PPUSH
9545: CALL_OW 468
// end ;
9549: LD_VAR 0 3
9553: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9554: LD_INT 0
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
9562: PPUSH
9563: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9564: LD_ADDR_VAR 0 8
9568: PUSH
9569: LD_EXP 44
9573: PUSH
9574: LD_VAR 0 1
9578: ARRAY
9579: PPUSH
9580: CALL_OW 469
9584: ST_TO_ADDR
// if not art_hex then
9585: LD_VAR 0 8
9589: NOT
9590: IFFALSE 9594
// exit ;
9592: GO 10085
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9594: LD_ADDR_VAR 0 3
9598: PUSH
9599: LD_INT 2
9601: PUSH
9602: LD_INT 30
9604: PUSH
9605: LD_INT 6
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 30
9614: PUSH
9615: LD_INT 7
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 30
9624: PUSH
9625: LD_INT 8
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: PPUSH
9641: CALL_OW 69
9645: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9646: LD_ADDR_VAR 0 9
9650: PUSH
9651: LD_VAR 0 3
9655: PPUSH
9656: LD_VAR 0 8
9660: PUSH
9661: LD_INT 1
9663: ARRAY
9664: PPUSH
9665: LD_VAR 0 8
9669: PUSH
9670: LD_INT 2
9672: ARRAY
9673: PPUSH
9674: CALL_OW 73
9678: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9679: LD_ADDR_VAR 0 6
9683: PUSH
9684: LD_VAR 0 9
9688: PPUSH
9689: LD_VAR 0 8
9693: PUSH
9694: LD_INT 1
9696: ARRAY
9697: PPUSH
9698: LD_VAR 0 8
9702: PUSH
9703: LD_INT 2
9705: ARRAY
9706: PPUSH
9707: CALL_OW 297
9711: ST_TO_ADDR
// if dist < 9 then
9712: LD_VAR 0 6
9716: PUSH
9717: LD_INT 9
9719: LESS
9720: IFFALSE 10085
// begin side := GetSide ( nearest_lab ) ;
9722: LD_ADDR_VAR 0 4
9726: PUSH
9727: LD_VAR 0 9
9731: PPUSH
9732: CALL_OW 255
9736: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
9737: LD_VAR 0 4
9741: PPUSH
9742: LD_VAR 0 1
9746: PPUSH
9747: CALL 10090 0 2
// base := ( art - 1 ) * 100 ;
9751: LD_ADDR_VAR 0 5
9755: PUSH
9756: LD_VAR 0 1
9760: PUSH
9761: LD_INT 1
9763: MINUS
9764: PUSH
9765: LD_INT 100
9767: MUL
9768: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
9769: LD_INT 24
9771: PPUSH
9772: LD_VAR 0 4
9776: PPUSH
9777: CALL_OW 321
9781: PUSH
9782: LD_INT 2
9784: EQUAL
9785: PUSH
9786: LD_VAR 0 9
9790: PPUSH
9791: CALL_OW 313
9795: AND
9796: IFFALSE 9988
// begin if GetTag ( base + side * 10 + 11 ) then
9798: LD_VAR 0 5
9802: PUSH
9803: LD_VAR 0 4
9807: PUSH
9808: LD_INT 10
9810: MUL
9811: PLUS
9812: PUSH
9813: LD_INT 11
9815: PLUS
9816: PPUSH
9817: CALL_OW 110
9821: IFFALSE 9978
// begin if not GetTag ( base + side * 10 + 13 ) then
9823: LD_VAR 0 5
9827: PUSH
9828: LD_VAR 0 4
9832: PUSH
9833: LD_INT 10
9835: MUL
9836: PLUS
9837: PUSH
9838: LD_INT 13
9840: PLUS
9841: PPUSH
9842: CALL_OW 110
9846: NOT
9847: IFFALSE 9870
// state := GetTag ( base + 03 ) else
9849: LD_ADDR_VAR 0 7
9853: PUSH
9854: LD_VAR 0 5
9858: PUSH
9859: LD_INT 3
9861: PLUS
9862: PPUSH
9863: CALL_OW 110
9867: ST_TO_ADDR
9868: GO 9878
// state := art_gray ;
9870: LD_ADDR_VAR 0 7
9874: PUSH
9875: LD_INT 1
9877: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
9878: LD_VAR 0 5
9882: PUSH
9883: LD_VAR 0 4
9887: PUSH
9888: LD_INT 10
9890: MUL
9891: PLUS
9892: PUSH
9893: LD_INT 15
9895: PLUS
9896: PPUSH
9897: CALL_OW 110
9901: PUSH
9902: LD_VAR 0 5
9906: PUSH
9907: LD_VAR 0 4
9911: PUSH
9912: LD_INT 10
9914: MUL
9915: PLUS
9916: PUSH
9917: LD_INT 15
9919: PLUS
9920: PPUSH
9921: CALL_OW 110
9925: PUSH
9926: LD_VAR 0 9
9930: NONEQUAL
9931: AND
9932: IFFALSE 9948
// DeInit_Lab ( side , art ) ;
9934: LD_VAR 0 4
9938: PPUSH
9939: LD_VAR 0 1
9943: PPUSH
9944: CALL 10090 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
9948: LD_VAR 0 5
9952: PUSH
9953: LD_VAR 0 4
9957: PUSH
9958: LD_INT 10
9960: MUL
9961: PLUS
9962: PUSH
9963: LD_INT 15
9965: PLUS
9966: PPUSH
9967: LD_VAR 0 9
9971: PPUSH
9972: CALL_OW 109
// end else
9976: GO 9986
// state := art_instant ;
9978: LD_ADDR_VAR 0 7
9982: PUSH
9983: LD_INT 2
9985: ST_TO_ADDR
// end else
9986: GO 9996
// state := art_gray ;
9988: LD_ADDR_VAR 0 7
9992: PUSH
9993: LD_INT 1
9995: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
9996: LD_VAR 0 5
10000: PUSH
10001: LD_INT 11
10003: PLUS
10004: PPUSH
10005: LD_VAR 0 9
10009: PPUSH
10010: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
10014: LD_VAR 0 9
10018: PUSH
10019: LD_EXP 45
10023: IN
10024: NOT
10025: IFFALSE 10085
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
10027: LD_VAR 0 4
10031: PPUSH
10032: LD_VAR 0 5
10036: PUSH
10037: LD_INT 1
10039: PLUS
10040: PUSH
10041: LD_VAR 0 5
10045: PUSH
10046: LD_VAR 0 4
10050: PUSH
10051: LD_INT 10
10053: MUL
10054: PLUS
10055: PUSH
10056: LD_INT 11
10058: PLUS
10059: PPUSH
10060: CALL_OW 110
10064: PLUS
10065: PPUSH
10066: CALL_OW 110
10070: PPUSH
10071: LD_VAR 0 7
10075: PPUSH
10076: LD_VAR 0 9
10080: PPUSH
10081: CALL_OW 468
// end ; end ;
10085: LD_VAR 0 2
10089: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
10090: LD_INT 0
10092: PPUSH
10093: PPUSH
10094: PPUSH
// base := ( art - 1 ) * 100 ;
10095: LD_ADDR_VAR 0 4
10099: PUSH
10100: LD_VAR 0 2
10104: PUSH
10105: LD_INT 1
10107: MINUS
10108: PUSH
10109: LD_INT 100
10111: MUL
10112: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
10113: LD_ADDR_VAR 0 5
10117: PUSH
10118: LD_VAR 0 4
10122: PUSH
10123: LD_VAR 0 1
10127: PUSH
10128: LD_INT 10
10130: MUL
10131: PLUS
10132: PUSH
10133: LD_INT 15
10135: PLUS
10136: PPUSH
10137: CALL_OW 110
10141: ST_TO_ADDR
// if not lab then
10142: LD_VAR 0 5
10146: NOT
10147: IFFALSE 10168
// lab := GetTag ( base + 11 ) ;
10149: LD_ADDR_VAR 0 5
10153: PUSH
10154: LD_VAR 0 4
10158: PUSH
10159: LD_INT 11
10161: PLUS
10162: PPUSH
10163: CALL_OW 110
10167: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
10168: LD_VAR 0 1
10172: PPUSH
10173: LD_VAR 0 4
10177: PUSH
10178: LD_INT 1
10180: PLUS
10181: PUSH
10182: LD_VAR 0 4
10186: PUSH
10187: LD_VAR 0 1
10191: PUSH
10192: LD_INT 10
10194: MUL
10195: PLUS
10196: PUSH
10197: LD_INT 11
10199: PLUS
10200: PPUSH
10201: CALL_OW 110
10205: PLUS
10206: PPUSH
10207: CALL_OW 110
10211: PPUSH
10212: LD_INT 0
10214: PPUSH
10215: LD_VAR 0 5
10219: PPUSH
10220: CALL_OW 468
// end ;
10224: LD_VAR 0 3
10228: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
10229: LD_INT 0
10231: PPUSH
10232: PPUSH
10233: PPUSH
10234: PPUSH
// side := GetSide ( lab ) ;
10235: LD_ADDR_VAR 0 4
10239: PUSH
10240: LD_VAR 0 1
10244: PPUSH
10245: CALL_OW 255
10249: ST_TO_ADDR
// for art = 1 to artefact_number do
10250: LD_ADDR_VAR 0 3
10254: PUSH
10255: DOUBLE
10256: LD_INT 1
10258: DEC
10259: ST_TO_ADDR
10260: LD_EXP 42
10264: PUSH
10265: FOR_TO
10266: IFFALSE 10422
// begin base := ( art - 1 ) * 100 ;
10268: LD_ADDR_VAR 0 5
10272: PUSH
10273: LD_VAR 0 3
10277: PUSH
10278: LD_INT 1
10280: MINUS
10281: PUSH
10282: LD_INT 100
10284: MUL
10285: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
10286: LD_VAR 0 5
10290: PUSH
10291: LD_INT 11
10293: PLUS
10294: PPUSH
10295: CALL_OW 110
10299: PUSH
10300: LD_VAR 0 1
10304: EQUAL
10305: IFFALSE 10318
// Init_Lab ( art ) else
10307: LD_VAR 0 3
10311: PPUSH
10312: CALL 9554 0 1
10316: GO 10420
// begin if lab = GetTag ( base + side * 10 + 15 ) then
10318: LD_VAR 0 1
10322: PUSH
10323: LD_VAR 0 5
10327: PUSH
10328: LD_VAR 0 4
10332: PUSH
10333: LD_INT 10
10335: MUL
10336: PLUS
10337: PUSH
10338: LD_INT 15
10340: PLUS
10341: PPUSH
10342: CALL_OW 110
10346: EQUAL
10347: IFFALSE 10420
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
10349: LD_VAR 0 5
10353: PUSH
10354: LD_VAR 0 4
10358: PUSH
10359: LD_INT 10
10361: MUL
10362: PLUS
10363: PUSH
10364: LD_INT 13
10366: PLUS
10367: PPUSH
10368: CALL_OW 110
10372: PUSH
10373: LD_INT 0
10375: GREATER
10376: PUSH
10377: LD_VAR 0 1
10381: PPUSH
10382: CALL_OW 313
10386: NOT
10387: OR
10388: IFFALSE 10406
// Shadow_Artefact ( side , art ) else
10390: LD_VAR 0 4
10394: PPUSH
10395: LD_VAR 0 3
10399: PPUSH
10400: CALL 9268 0 2
10404: GO 10420
// Highlight_Artefact ( side , art ) ;
10406: LD_VAR 0 4
10410: PPUSH
10411: LD_VAR 0 3
10415: PPUSH
10416: CALL 9400 0 2
// end ; end ; end ;
10420: GO 10265
10422: POP
10423: POP
// end ; end_of_file
10424: LD_VAR 0 2
10428: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
10429: LD_INT 10
10431: PPUSH
10432: CALL_OW 67
// if not IsBusy ( lab ) then
10436: LD_VAR 0 2
10440: PPUSH
10441: CALL_OW 315
10445: NOT
10446: IFFALSE 10473
// begin labs_in_use := labs_in_use diff lab ;
10448: LD_ADDR_EXP 45
10452: PUSH
10453: LD_EXP 45
10457: PUSH
10458: LD_VAR 0 2
10462: DIFF
10463: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10464: LD_VAR 0 2
10468: PPUSH
10469: CALL 10229 0 1
// end ; end ;
10473: PPOPN 2
10475: END
// on ResearchStarted ( tech , lab ) do var un , side ;
10476: LD_INT 0
10478: PPUSH
10479: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
10480: LD_ADDR_EXP 45
10484: PUSH
10485: LD_EXP 45
10489: PUSH
10490: LD_VAR 0 2
10494: ADD
10495: ST_TO_ADDR
// side := GetSide ( lab ) ;
10496: LD_ADDR_VAR 0 4
10500: PUSH
10501: LD_VAR 0 2
10505: PPUSH
10506: CALL_OW 255
10510: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
10511: LD_ADDR_VAR 0 3
10515: PUSH
10516: DOUBLE
10517: LD_INT 0
10519: DEC
10520: ST_TO_ADDR
10521: LD_EXP 42
10525: PUSH
10526: LD_INT 1
10528: MINUS
10529: PUSH
10530: FOR_TO
10531: IFFALSE 10610
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10533: LD_VAR 0 2
10537: PUSH
10538: LD_VAR 0 3
10542: PUSH
10543: LD_INT 100
10545: MUL
10546: PUSH
10547: LD_INT 11
10549: PLUS
10550: PPUSH
10551: CALL_OW 110
10555: PUSH
10556: LD_VAR 0 3
10560: PUSH
10561: LD_INT 100
10563: MUL
10564: PUSH
10565: LD_VAR 0 4
10569: PUSH
10570: LD_INT 10
10572: MUL
10573: PLUS
10574: PUSH
10575: LD_INT 15
10577: PLUS
10578: PPUSH
10579: CALL_OW 110
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: IN
10588: IFFALSE 10608
// DeInit_Lab ( side , un + 1 ) ;
10590: LD_VAR 0 4
10594: PPUSH
10595: LD_VAR 0 3
10599: PUSH
10600: LD_INT 1
10602: PLUS
10603: PPUSH
10604: CALL 10090 0 2
10608: GO 10530
10610: POP
10611: POP
// end ;
10612: PPOPN 4
10614: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10615: LD_INT 10
10617: PPUSH
10618: CALL_OW 67
// if not IsBusy ( lab ) then
10622: LD_VAR 0 2
10626: PPUSH
10627: CALL_OW 315
10631: NOT
10632: IFFALSE 10659
// begin labs_in_use := labs_in_use diff lab ;
10634: LD_ADDR_EXP 45
10638: PUSH
10639: LD_EXP 45
10643: PUSH
10644: LD_VAR 0 2
10648: DIFF
10649: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10650: LD_VAR 0 2
10654: PPUSH
10655: CALL 10229 0 1
// end ; end ; end_of_file
10659: PPOPN 2
10661: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10662: LD_INT 0
10664: PPUSH
10665: PPUSH
10666: PPUSH
// vysledek := true ;
10667: LD_ADDR_VAR 0 5
10671: PUSH
10672: LD_INT 1
10674: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
10675: LD_ADDR_VAR 0 6
10679: PUSH
10680: LD_VAR 0 1
10684: PUSH
10685: LD_INT 10
10687: MUL
10688: PUSH
10689: LD_INT 15
10691: PLUS
10692: PPUSH
10693: CALL_OW 110
10697: PPUSH
10698: CALL_OW 274
10702: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
10703: LD_VAR 0 6
10707: PUSH
10708: LD_VAR 0 6
10712: PPUSH
10713: CALL_OW 279
10717: PUSH
10718: LD_INT 3
10720: ARRAY
10721: PUSH
10722: LD_INT 6
10724: PPUSH
10725: CALL_OW 110
10729: GREATEREQUAL
10730: AND
10731: IFFALSE 10821
// begin PlaceSeeing ( x , y , side , - 15 ) ;
10733: LD_VAR 0 2
10737: PPUSH
10738: LD_VAR 0 3
10742: PPUSH
10743: LD_VAR 0 1
10747: PPUSH
10748: LD_INT 15
10750: NEG
10751: PPUSH
10752: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
10756: LD_VAR 0 6
10760: PPUSH
10761: LD_INT 3
10763: PPUSH
10764: LD_VAR 0 6
10768: PPUSH
10769: CALL_OW 279
10773: PUSH
10774: LD_INT 3
10776: ARRAY
10777: PUSH
10778: LD_INT 6
10780: PPUSH
10781: CALL_OW 110
10785: MINUS
10786: PPUSH
10787: CALL_OW 277
// view_data := [ x , y , side ] ;
10791: LD_ADDR_LOC 10
10795: PUSH
10796: LD_VAR 0 2
10800: PUSH
10801: LD_VAR 0 3
10805: PUSH
10806: LD_VAR 0 1
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: ST_TO_ADDR
// enable ( 1 ) ;
10816: LD_INT 1
10818: ENABLE_MARKED
// end else
10819: GO 10829
// vysledek := false ;
10821: LD_ADDR_VAR 0 5
10825: PUSH
10826: LD_INT 0
10828: ST_TO_ADDR
// result := vysledek ;
10829: LD_ADDR_VAR 0 4
10833: PUSH
10834: LD_VAR 0 5
10838: ST_TO_ADDR
// end ;
10839: LD_VAR 0 4
10843: RET
// every 0 0$2 trigger view_data marked 1 do
10844: LD_LOC 10
10848: IFFALSE 10899
10850: GO 10852
10852: DISABLE
// begin wait ( 0 0$30 ) ;
10853: LD_INT 1050
10855: PPUSH
10856: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
10860: LD_LOC 10
10864: PUSH
10865: LD_INT 1
10867: ARRAY
10868: PPUSH
10869: LD_LOC 10
10873: PUSH
10874: LD_INT 2
10876: ARRAY
10877: PPUSH
10878: LD_LOC 10
10882: PUSH
10883: LD_INT 3
10885: ARRAY
10886: PPUSH
10887: CALL_OW 331
// view_data := 0 ;
10891: LD_ADDR_LOC 10
10895: PUSH
10896: LD_INT 0
10898: ST_TO_ADDR
// end ;
10899: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
10900: LD_INT 0
10902: PPUSH
10903: PPUSH
10904: PPUSH
10905: PPUSH
10906: PPUSH
10907: PPUSH
10908: PPUSH
10909: PPUSH
// vysledek := true ;
10910: LD_ADDR_VAR 0 4
10914: PUSH
10915: LD_INT 1
10917: ST_TO_ADDR
// it_can := false ;
10918: LD_ADDR_VAR 0 8
10922: PUSH
10923: LD_INT 0
10925: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
10926: LD_ADDR_VAR 0 9
10930: PUSH
10931: LD_INT 30
10933: PUSH
10934: LD_INT 28
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
10941: LD_ADDR_VAR 0 10
10945: PUSH
10946: LD_INT 8
10948: PUSH
10949: LD_INT 48
10951: PUSH
10952: LD_INT 29
10954: PUSH
10955: LD_INT 49
10957: PUSH
10958: LD_INT 10
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
10968: LD_ADDR_VAR 0 7
10972: PUSH
10973: LD_VAR 0 2
10977: PPUSH
10978: CALL_OW 247
10982: PUSH
10983: LD_INT 3
10985: EQUAL
10986: PUSH
10987: LD_VAR 0 2
10991: PPUSH
10992: CALL_OW 266
10996: PUSH
10997: LD_VAR 0 9
11001: IN
11002: PUSH
11003: LD_VAR 0 2
11007: PPUSH
11008: CALL_OW 269
11012: PUSH
11013: LD_VAR 0 10
11017: IN
11018: OR
11019: AND
11020: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
11021: LD_ADDR_VAR 0 6
11025: PUSH
11026: LD_VAR 0 2
11030: PPUSH
11031: CALL_OW 247
11035: PUSH
11036: LD_INT 2
11038: EQUAL
11039: PUSH
11040: LD_VAR 0 2
11044: PPUSH
11045: CALL_OW 264
11049: PUSH
11050: LD_VAR 0 10
11054: IN
11055: PUSH
11056: LD_VAR 0 2
11060: PPUSH
11061: CALL_OW 262
11065: PUSH
11066: LD_INT 3
11068: EQUAL
11069: OR
11070: AND
11071: ST_TO_ADDR
// case def_artefact_two of 1 :
11072: LD_EXP 2
11076: PUSH
11077: LD_INT 1
11079: DOUBLE
11080: EQUAL
11081: IFTRUE 11085
11083: GO 11102
11085: POP
// if b_can then
11086: LD_VAR 0 7
11090: IFFALSE 11100
// it_can := true ; 2 :
11092: LD_ADDR_VAR 0 8
11096: PUSH
11097: LD_INT 1
11099: ST_TO_ADDR
11100: GO 11159
11102: LD_INT 2
11104: DOUBLE
11105: EQUAL
11106: IFTRUE 11110
11108: GO 11127
11110: POP
// if v_can then
11111: LD_VAR 0 6
11115: IFFALSE 11125
// it_can := true ; 3 :
11117: LD_ADDR_VAR 0 8
11121: PUSH
11122: LD_INT 1
11124: ST_TO_ADDR
11125: GO 11159
11127: LD_INT 3
11129: DOUBLE
11130: EQUAL
11131: IFTRUE 11135
11133: GO 11158
11135: POP
// if b_can or v_can then
11136: LD_VAR 0 7
11140: PUSH
11141: LD_VAR 0 6
11145: OR
11146: IFFALSE 11156
// it_can := true ; end ;
11148: LD_ADDR_VAR 0 8
11152: PUSH
11153: LD_INT 1
11155: ST_TO_ADDR
11156: GO 11159
11158: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
11159: LD_ADDR_VAR 0 5
11163: PUSH
11164: LD_INT 100
11166: PUSH
11167: LD_VAR 0 1
11171: PUSH
11172: LD_INT 10
11174: MUL
11175: PLUS
11176: PUSH
11177: LD_INT 15
11179: PLUS
11180: PPUSH
11181: CALL_OW 110
11185: PPUSH
11186: CALL_OW 274
11190: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
11191: LD_VAR 0 5
11195: PUSH
11196: LD_VAR 0 8
11200: AND
11201: PUSH
11202: LD_VAR 0 5
11206: PPUSH
11207: CALL_OW 279
11211: PUSH
11212: LD_INT 3
11214: ARRAY
11215: PUSH
11216: LD_INT 106
11218: PPUSH
11219: CALL_OW 110
11223: GREATEREQUAL
11224: AND
11225: IFFALSE 11273
// begin KillUnit ( un ) ;
11227: LD_VAR 0 2
11231: PPUSH
11232: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
11236: LD_VAR 0 5
11240: PPUSH
11241: LD_INT 3
11243: PPUSH
11244: LD_VAR 0 5
11248: PPUSH
11249: CALL_OW 279
11253: PUSH
11254: LD_INT 3
11256: ARRAY
11257: PUSH
11258: LD_INT 106
11260: PPUSH
11261: CALL_OW 110
11265: MINUS
11266: PPUSH
11267: CALL_OW 277
// end else
11271: GO 11281
// vysledek := false ;
11273: LD_ADDR_VAR 0 4
11277: PUSH
11278: LD_INT 0
11280: ST_TO_ADDR
// result := vysledek ;
11281: LD_ADDR_VAR 0 3
11285: PUSH
11286: LD_VAR 0 4
11290: ST_TO_ADDR
// end ;
11291: LD_VAR 0 3
11295: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
11296: LD_INT 0
11298: PPUSH
11299: PPUSH
11300: PPUSH
11301: PPUSH
// vysledek := true ;
11302: LD_ADDR_VAR 0 5
11306: PUSH
11307: LD_INT 1
11309: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
11310: LD_ADDR_VAR 0 7
11314: PUSH
11315: LD_INT 200
11317: PUSH
11318: LD_VAR 0 1
11322: PUSH
11323: LD_INT 10
11325: MUL
11326: PLUS
11327: PUSH
11328: LD_INT 15
11330: PLUS
11331: PPUSH
11332: CALL_OW 110
11336: PPUSH
11337: CALL_OW 274
11341: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
11342: LD_VAR 0 7
11346: PUSH
11347: LD_VAR 0 7
11351: PPUSH
11352: CALL_OW 279
11356: PUSH
11357: LD_INT 3
11359: ARRAY
11360: PUSH
11361: LD_INT 206
11363: PPUSH
11364: CALL_OW 110
11368: GREATEREQUAL
11369: AND
11370: IFFALSE 11426
// begin ArtContamination ( p1 , p2 , 15 ) ;
11372: LD_VAR 0 2
11376: PPUSH
11377: LD_VAR 0 3
11381: PPUSH
11382: LD_INT 15
11384: PPUSH
11385: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
11389: LD_VAR 0 7
11393: PPUSH
11394: LD_INT 3
11396: PPUSH
11397: LD_VAR 0 7
11401: PPUSH
11402: CALL_OW 279
11406: PUSH
11407: LD_INT 3
11409: ARRAY
11410: PUSH
11411: LD_INT 206
11413: PPUSH
11414: CALL_OW 110
11418: MINUS
11419: PPUSH
11420: CALL_OW 277
// end else
11424: GO 11434
// vysledek := false ;
11426: LD_ADDR_VAR 0 5
11430: PUSH
11431: LD_INT 0
11433: ST_TO_ADDR
// result := vysledek ;
11434: LD_ADDR_VAR 0 4
11438: PUSH
11439: LD_VAR 0 5
11443: ST_TO_ADDR
// end ;
11444: LD_VAR 0 4
11448: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
11449: GO 11451
11451: DISABLE
11452: LD_INT 0
11454: PPUSH
11455: PPUSH
11456: PPUSH
// begin for art = 0 to artefact_number do
11457: LD_ADDR_VAR 0 1
11461: PUSH
11462: DOUBLE
11463: LD_INT 0
11465: DEC
11466: ST_TO_ADDR
11467: LD_EXP 42
11471: PUSH
11472: FOR_TO
11473: IFFALSE 11607
// for side = 1 to Side_Positions do
11475: LD_ADDR_VAR 0 2
11479: PUSH
11480: DOUBLE
11481: LD_INT 1
11483: DEC
11484: ST_TO_ADDR
11485: LD_EXP 23
11489: PUSH
11490: FOR_TO
11491: IFFALSE 11603
// begin recharge := art * 100 + side * 10 + 13 ;
11493: LD_ADDR_VAR 0 3
11497: PUSH
11498: LD_VAR 0 1
11502: PUSH
11503: LD_INT 100
11505: MUL
11506: PUSH
11507: LD_VAR 0 2
11511: PUSH
11512: LD_INT 10
11514: MUL
11515: PLUS
11516: PUSH
11517: LD_INT 13
11519: PLUS
11520: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
11521: LD_EXP 23
11525: PUSH
11526: LD_VAR 0 2
11530: ARRAY
11531: PUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: CALL_OW 110
11541: PUSH
11542: LD_INT 0
11544: GREATER
11545: AND
11546: IFFALSE 11601
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11548: LD_VAR 0 3
11552: PPUSH
11553: LD_VAR 0 3
11557: PPUSH
11558: CALL_OW 110
11562: PUSH
11563: LD_INT 1
11565: MINUS
11566: PPUSH
11567: CALL_OW 109
// if not GetTag ( recharge ) then
11571: LD_VAR 0 3
11575: PPUSH
11576: CALL_OW 110
11580: NOT
11581: IFFALSE 11601
// Highlight_Artefact ( side , art + 1 ) ;
11583: LD_VAR 0 2
11587: PPUSH
11588: LD_VAR 0 1
11592: PUSH
11593: LD_INT 1
11595: PLUS
11596: PPUSH
11597: CALL 9400 0 2
// end ; end ;
11601: GO 11490
11603: POP
11604: POP
11605: GO 11472
11607: POP
11608: POP
// enable ;
11609: ENABLE
// end ; end_of_file
11610: PPOPN 3
11612: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11613: LD_INT 0
11615: PPUSH
11616: PPUSH
11617: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11618: LD_INT 18
11620: PPUSH
11621: LD_VAR 0 1
11625: PUSH
11626: LD_INT 1
11628: ARRAY
11629: PPUSH
11630: LD_VAR 0 1
11634: PUSH
11635: LD_INT 2
11637: ARRAY
11638: PPUSH
11639: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11643: LD_VAR 0 1
11647: PUSH
11648: LD_INT 1
11650: ARRAY
11651: PPUSH
11652: LD_VAR 0 1
11656: PUSH
11657: LD_INT 2
11659: ARRAY
11660: PPUSH
11661: CALL_OW 494
// Wait ( 30 ) ;
11665: LD_INT 30
11667: PPUSH
11668: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
11672: LD_INT 18
11674: PPUSH
11675: LD_INT 4
11677: PPUSH
11678: CALL_OW 286
// base := ( art - 1 ) * 100 ;
11682: LD_ADDR_VAR 0 4
11686: PUSH
11687: LD_VAR 0 2
11691: PUSH
11692: LD_INT 1
11694: MINUS
11695: PUSH
11696: LD_INT 100
11698: MUL
11699: ST_TO_ADDR
// if GetTag ( base + 11 ) then
11700: LD_VAR 0 4
11704: PUSH
11705: LD_INT 11
11707: PLUS
11708: PPUSH
11709: CALL_OW 110
11713: IFFALSE 11851
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
11715: LD_ADDR_VAR 0 5
11719: PUSH
11720: LD_VAR 0 4
11724: PUSH
11725: LD_INT 11
11727: PLUS
11728: PPUSH
11729: CALL_OW 110
11733: PPUSH
11734: CALL_OW 255
11738: ST_TO_ADDR
// if GetTag ( base + 12 ) then
11739: LD_VAR 0 4
11743: PUSH
11744: LD_INT 12
11746: PLUS
11747: PPUSH
11748: CALL_OW 110
11752: IFFALSE 11795
// begin ComCancel ( GetTag ( base + 11 ) ) ;
11754: LD_VAR 0 4
11758: PUSH
11759: LD_INT 11
11761: PLUS
11762: PPUSH
11763: CALL_OW 110
11767: PPUSH
11768: CALL_OW 127
// Wait ( 10 ) ;
11772: LD_INT 10
11774: PPUSH
11775: CALL_OW 67
// SetTag ( base + 12 , false ) ;
11779: LD_VAR 0 4
11783: PUSH
11784: LD_INT 12
11786: PLUS
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
11795: LD_VAR 0 4
11799: PUSH
11800: LD_VAR 0 5
11804: PUSH
11805: LD_INT 10
11807: MUL
11808: PLUS
11809: PUSH
11810: LD_INT 11
11812: PLUS
11813: PPUSH
11814: CALL_OW 110
11818: NOT
11819: IFFALSE 11835
// DeInit_Lab ( side , art ) ;
11821: LD_VAR 0 5
11825: PPUSH
11826: LD_VAR 0 2
11830: PPUSH
11831: CALL 10090 0 2
// SetTag ( base + 11 , 0 ) ;
11835: LD_VAR 0 4
11839: PUSH
11840: LD_INT 11
11842: PLUS
11843: PPUSH
11844: LD_INT 0
11846: PPUSH
11847: CALL_OW 109
// end ; end ;
11851: LD_VAR 0 3
11855: RET
// every 0 0$5 marked 5 do var hex , un ;
11856: GO 11858
11858: DISABLE
11859: LD_INT 0
11861: PPUSH
11862: PPUSH
// begin wait ( 3 3$0 ) ;
11863: LD_INT 6300
11865: PPUSH
11866: CALL_OW 67
// if GetTag ( 09 ) then
11870: LD_INT 9
11872: PPUSH
11873: CALL_OW 110
11877: IFFALSE 11916
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
11879: LD_ADDR_VAR 0 1
11883: PUSH
11884: LD_INT 13
11886: PPUSH
11887: CALL_OW 110
11891: PPUSH
11892: CALL_OW 250
11896: PUSH
11897: LD_INT 13
11899: PPUSH
11900: CALL_OW 110
11904: PPUSH
11905: CALL_OW 251
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: ST_TO_ADDR
11914: GO 11935
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
11916: LD_ADDR_VAR 0 1
11920: PUSH
11921: LD_EXP 44
11925: PUSH
11926: LD_INT 1
11928: ARRAY
11929: PPUSH
11930: CALL_OW 469
11934: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11935: LD_VAR 0 1
11939: PUSH
11940: LD_INT 1
11942: ARRAY
11943: PPUSH
11944: LD_VAR 0 1
11948: PUSH
11949: LD_INT 2
11951: ARRAY
11952: PPUSH
11953: LD_INT 16
11955: PPUSH
11956: CALL_OW 309
11960: NOT
11961: IFFALSE 12238
// begin if GetTag ( 09 ) then
11963: LD_INT 9
11965: PPUSH
11966: CALL_OW 110
11970: IFFALSE 12017
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
11972: LD_INT 13
11974: PPUSH
11975: CALL_OW 110
11979: PPUSH
11980: LD_INT 4
11982: PPUSH
11983: LD_EXP 44
11987: PUSH
11988: LD_INT 1
11990: ARRAY
11991: NEG
11992: PPUSH
11993: CALL_OW 290
// SetTag ( 09 , 0 ) ;
11997: LD_INT 9
11999: PPUSH
12000: LD_INT 0
12002: PPUSH
12003: CALL_OW 109
// SetTag ( 13 , 0 ) ;
12007: LD_INT 13
12009: PPUSH
12010: LD_INT 0
12012: PPUSH
12013: CALL_OW 109
// end ; DestroyArtefact ( hex , 1 ) ;
12017: LD_VAR 0 1
12021: PPUSH
12022: LD_INT 1
12024: PPUSH
12025: CALL 11613 0 2
// wait ( 5 ) ;
12029: LD_INT 5
12031: PPUSH
12032: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12036: LD_ADDR_VAR 0 1
12040: PUSH
12041: LD_INT 16
12043: PPUSH
12044: LD_INT 0
12046: PPUSH
12047: CALL_OW 16
12051: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12052: LD_ADDR_VAR 0 2
12056: PUSH
12057: LD_VAR 0 1
12061: PUSH
12062: LD_INT 1
12064: ARRAY
12065: PPUSH
12066: LD_VAR 0 1
12070: PUSH
12071: LD_INT 2
12073: ARRAY
12074: PPUSH
12075: CALL_OW 428
12079: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12080: LD_VAR 0 2
12084: PUSH
12085: LD_INT 0
12087: GREATER
12088: PUSH
12089: LD_VAR 0 2
12093: PPUSH
12094: CALL_OW 247
12098: PUSH
12099: LD_INT 3
12101: EQUAL
12102: AND
12103: IFFALSE 12147
// begin KillUnit ( un ) ;
12105: LD_VAR 0 2
12109: PPUSH
12110: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12114: LD_VAR 0 1
12118: PUSH
12119: LD_INT 1
12121: ARRAY
12122: PPUSH
12123: LD_VAR 0 1
12127: PUSH
12128: LD_INT 2
12130: ARRAY
12131: PPUSH
12132: CALL_OW 428
12136: IFFALSE 12147
// wait ( 10 ) ;
12138: LD_INT 10
12140: PPUSH
12141: CALL_OW 67
12145: GO 12114
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12147: LD_VAR 0 1
12151: PUSH
12152: LD_INT 1
12154: ARRAY
12155: PPUSH
12156: LD_VAR 0 1
12160: PUSH
12161: LD_INT 2
12163: ARRAY
12164: PPUSH
12165: CALL_OW 428
12169: NOT
12170: IFFALSE 12036
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12172: LD_VAR 0 1
12176: PUSH
12177: LD_INT 1
12179: ARRAY
12180: PPUSH
12181: LD_VAR 0 1
12185: PUSH
12186: LD_INT 2
12188: ARRAY
12189: PPUSH
12190: CALL_OW 494
// wait ( 30 ) ;
12194: LD_INT 30
12196: PPUSH
12197: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12201: LD_INT 4
12203: PPUSH
12204: LD_EXP 44
12208: PUSH
12209: LD_INT 1
12211: ARRAY
12212: PPUSH
12213: LD_VAR 0 1
12217: PUSH
12218: LD_INT 1
12220: ARRAY
12221: PPUSH
12222: LD_VAR 0 1
12226: PUSH
12227: LD_INT 2
12229: ARRAY
12230: PPUSH
12231: LD_INT 0
12233: PPUSH
12234: CALL_OW 58
// end ; enable ;
12238: ENABLE
// end ;
12239: PPOPN 2
12241: END
// every 0 0$5 marked 6 do var hex , un ;
12242: GO 12244
12244: DISABLE
12245: LD_INT 0
12247: PPUSH
12248: PPUSH
// begin wait ( 3 3$30 ) ;
12249: LD_INT 7350
12251: PPUSH
12252: CALL_OW 67
// if GetTag ( 109 ) then
12256: LD_INT 109
12258: PPUSH
12259: CALL_OW 110
12263: IFFALSE 12302
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
12265: LD_ADDR_VAR 0 1
12269: PUSH
12270: LD_INT 113
12272: PPUSH
12273: CALL_OW 110
12277: PPUSH
12278: CALL_OW 250
12282: PUSH
12283: LD_INT 113
12285: PPUSH
12286: CALL_OW 110
12290: PPUSH
12291: CALL_OW 251
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: ST_TO_ADDR
12300: GO 12321
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
12302: LD_ADDR_VAR 0 1
12306: PUSH
12307: LD_EXP 44
12311: PUSH
12312: LD_INT 2
12314: ARRAY
12315: PPUSH
12316: CALL_OW 469
12320: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12321: LD_VAR 0 1
12325: PUSH
12326: LD_INT 1
12328: ARRAY
12329: PPUSH
12330: LD_VAR 0 1
12334: PUSH
12335: LD_INT 2
12337: ARRAY
12338: PPUSH
12339: LD_INT 16
12341: PPUSH
12342: CALL_OW 309
12346: NOT
12347: IFFALSE 12624
// begin if GetTag ( 109 ) then
12349: LD_INT 109
12351: PPUSH
12352: CALL_OW 110
12356: IFFALSE 12403
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12358: LD_INT 113
12360: PPUSH
12361: CALL_OW 110
12365: PPUSH
12366: LD_INT 4
12368: PPUSH
12369: LD_EXP 44
12373: PUSH
12374: LD_INT 1
12376: ARRAY
12377: NEG
12378: PPUSH
12379: CALL_OW 290
// SetTag ( 109 , 0 ) ;
12383: LD_INT 109
12385: PPUSH
12386: LD_INT 0
12388: PPUSH
12389: CALL_OW 109
// SetTag ( 113 , 0 ) ;
12393: LD_INT 113
12395: PPUSH
12396: LD_INT 0
12398: PPUSH
12399: CALL_OW 109
// end ; DestroyArtefact ( hex , 2 ) ;
12403: LD_VAR 0 1
12407: PPUSH
12408: LD_INT 2
12410: PPUSH
12411: CALL 11613 0 2
// wait ( 5 ) ;
12415: LD_INT 5
12417: PPUSH
12418: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12422: LD_ADDR_VAR 0 1
12426: PUSH
12427: LD_INT 16
12429: PPUSH
12430: LD_INT 0
12432: PPUSH
12433: CALL_OW 16
12437: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12438: LD_ADDR_VAR 0 2
12442: PUSH
12443: LD_VAR 0 1
12447: PUSH
12448: LD_INT 1
12450: ARRAY
12451: PPUSH
12452: LD_VAR 0 1
12456: PUSH
12457: LD_INT 2
12459: ARRAY
12460: PPUSH
12461: CALL_OW 428
12465: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12466: LD_VAR 0 2
12470: PUSH
12471: LD_INT 0
12473: GREATER
12474: PUSH
12475: LD_VAR 0 2
12479: PPUSH
12480: CALL_OW 247
12484: PUSH
12485: LD_INT 3
12487: EQUAL
12488: AND
12489: IFFALSE 12533
// begin KillUnit ( un ) ;
12491: LD_VAR 0 2
12495: PPUSH
12496: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12500: LD_VAR 0 1
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PPUSH
12509: LD_VAR 0 1
12513: PUSH
12514: LD_INT 2
12516: ARRAY
12517: PPUSH
12518: CALL_OW 428
12522: IFFALSE 12533
// wait ( 10 ) ;
12524: LD_INT 10
12526: PPUSH
12527: CALL_OW 67
12531: GO 12500
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12533: LD_VAR 0 1
12537: PUSH
12538: LD_INT 1
12540: ARRAY
12541: PPUSH
12542: LD_VAR 0 1
12546: PUSH
12547: LD_INT 2
12549: ARRAY
12550: PPUSH
12551: CALL_OW 428
12555: NOT
12556: IFFALSE 12422
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12558: LD_VAR 0 1
12562: PUSH
12563: LD_INT 1
12565: ARRAY
12566: PPUSH
12567: LD_VAR 0 1
12571: PUSH
12572: LD_INT 2
12574: ARRAY
12575: PPUSH
12576: CALL_OW 494
// wait ( 30 ) ;
12580: LD_INT 30
12582: PPUSH
12583: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12587: LD_INT 4
12589: PPUSH
12590: LD_EXP 44
12594: PUSH
12595: LD_INT 2
12597: ARRAY
12598: PPUSH
12599: LD_VAR 0 1
12603: PUSH
12604: LD_INT 1
12606: ARRAY
12607: PPUSH
12608: LD_VAR 0 1
12612: PUSH
12613: LD_INT 2
12615: ARRAY
12616: PPUSH
12617: LD_INT 0
12619: PPUSH
12620: CALL_OW 58
// end ; enable ;
12624: ENABLE
// end ;
12625: PPOPN 2
12627: END
// every 0 0$5 marked 7 do var hex , un ;
12628: GO 12630
12630: DISABLE
12631: LD_INT 0
12633: PPUSH
12634: PPUSH
// begin wait ( 4 4$0 ) ;
12635: LD_INT 8400
12637: PPUSH
12638: CALL_OW 67
// if GetTag ( 209 ) then
12642: LD_INT 209
12644: PPUSH
12645: CALL_OW 110
12649: IFFALSE 12688
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12651: LD_ADDR_VAR 0 1
12655: PUSH
12656: LD_INT 213
12658: PPUSH
12659: CALL_OW 110
12663: PPUSH
12664: CALL_OW 250
12668: PUSH
12669: LD_INT 213
12671: PPUSH
12672: CALL_OW 110
12676: PPUSH
12677: CALL_OW 251
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: ST_TO_ADDR
12686: GO 12707
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
12688: LD_ADDR_VAR 0 1
12692: PUSH
12693: LD_EXP 44
12697: PUSH
12698: LD_INT 3
12700: ARRAY
12701: PPUSH
12702: CALL_OW 469
12706: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12707: LD_VAR 0 1
12711: PUSH
12712: LD_INT 1
12714: ARRAY
12715: PPUSH
12716: LD_VAR 0 1
12720: PUSH
12721: LD_INT 2
12723: ARRAY
12724: PPUSH
12725: LD_INT 16
12727: PPUSH
12728: CALL_OW 309
12732: NOT
12733: IFFALSE 13010
// begin if GetTag ( 209 ) then
12735: LD_INT 209
12737: PPUSH
12738: CALL_OW 110
12742: IFFALSE 12789
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12744: LD_INT 213
12746: PPUSH
12747: CALL_OW 110
12751: PPUSH
12752: LD_INT 4
12754: PPUSH
12755: LD_EXP 44
12759: PUSH
12760: LD_INT 1
12762: ARRAY
12763: NEG
12764: PPUSH
12765: CALL_OW 290
// SetTag ( 209 , 0 ) ;
12769: LD_INT 209
12771: PPUSH
12772: LD_INT 0
12774: PPUSH
12775: CALL_OW 109
// SetTag ( 213 , 0 ) ;
12779: LD_INT 213
12781: PPUSH
12782: LD_INT 0
12784: PPUSH
12785: CALL_OW 109
// end ; DestroyArtefact ( hex , 3 ) ;
12789: LD_VAR 0 1
12793: PPUSH
12794: LD_INT 3
12796: PPUSH
12797: CALL 11613 0 2
// wait ( 5 ) ;
12801: LD_INT 5
12803: PPUSH
12804: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12808: LD_ADDR_VAR 0 1
12812: PUSH
12813: LD_INT 16
12815: PPUSH
12816: LD_INT 0
12818: PPUSH
12819: CALL_OW 16
12823: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12824: LD_ADDR_VAR 0 2
12828: PUSH
12829: LD_VAR 0 1
12833: PUSH
12834: LD_INT 1
12836: ARRAY
12837: PPUSH
12838: LD_VAR 0 1
12842: PUSH
12843: LD_INT 2
12845: ARRAY
12846: PPUSH
12847: CALL_OW 428
12851: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12852: LD_VAR 0 2
12856: PUSH
12857: LD_INT 0
12859: GREATER
12860: PUSH
12861: LD_VAR 0 2
12865: PPUSH
12866: CALL_OW 247
12870: PUSH
12871: LD_INT 3
12873: EQUAL
12874: AND
12875: IFFALSE 12919
// begin KillUnit ( un ) ;
12877: LD_VAR 0 2
12881: PPUSH
12882: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12886: LD_VAR 0 1
12890: PUSH
12891: LD_INT 1
12893: ARRAY
12894: PPUSH
12895: LD_VAR 0 1
12899: PUSH
12900: LD_INT 2
12902: ARRAY
12903: PPUSH
12904: CALL_OW 428
12908: IFFALSE 12919
// wait ( 10 ) ;
12910: LD_INT 10
12912: PPUSH
12913: CALL_OW 67
12917: GO 12886
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12919: LD_VAR 0 1
12923: PUSH
12924: LD_INT 1
12926: ARRAY
12927: PPUSH
12928: LD_VAR 0 1
12932: PUSH
12933: LD_INT 2
12935: ARRAY
12936: PPUSH
12937: CALL_OW 428
12941: NOT
12942: IFFALSE 12808
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12944: LD_VAR 0 1
12948: PUSH
12949: LD_INT 1
12951: ARRAY
12952: PPUSH
12953: LD_VAR 0 1
12957: PUSH
12958: LD_INT 2
12960: ARRAY
12961: PPUSH
12962: CALL_OW 494
// wait ( 30 ) ;
12966: LD_INT 30
12968: PPUSH
12969: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12973: LD_INT 4
12975: PPUSH
12976: LD_EXP 44
12980: PUSH
12981: LD_INT 3
12983: ARRAY
12984: PPUSH
12985: LD_VAR 0 1
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PPUSH
12994: LD_VAR 0 1
12998: PUSH
12999: LD_INT 2
13001: ARRAY
13002: PPUSH
13003: LD_INT 0
13005: PPUSH
13006: CALL_OW 58
// end ; enable ;
13010: ENABLE
// end ; end_of_file
13011: PPOPN 2
13013: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13014: LD_INT 0
13016: PPUSH
13017: PPUSH
// for un in battle_flags_id do
13018: LD_ADDR_VAR 0 2
13022: PUSH
13023: LD_EXP 33
13027: PUSH
13028: FOR_IN
13029: IFFALSE 13104
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13031: LD_VAR 0 2
13035: PPUSH
13036: LD_INT 1
13038: PUSH
13039: LD_LOC 12
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 2
13050: PUSH
13051: LD_LOC 12
13055: PUSH
13056: LD_INT 2
13058: DIV
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 3
13066: PUSH
13067: LD_LOC 12
13071: PUSH
13072: LD_INT 5
13074: DIV
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: LD_INT 20
13082: PUSH
13083: LD_LOC 12
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: PPUSH
13098: CALL_OW 423
13102: GO 13028
13104: POP
13105: POP
// end ;
13106: LD_VAR 0 1
13110: RET
// every 0 0$0.1 do var un ;
13111: GO 13113
13113: DISABLE
13114: LD_INT 0
13116: PPUSH
// begin if not def_morale_flags then
13117: LD_EXP 56
13121: NOT
13122: IFFALSE 13126
// exit ;
13124: GO 13203
// if not morale_decreasing_time then
13126: LD_EXP 14
13130: NOT
13131: IFFALSE 13135
// exit ;
13133: GO 13203
// strength = 100 ;
13135: LD_ADDR_LOC 12
13139: PUSH
13140: LD_INT 100
13142: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13143: LD_EXP 14
13147: PPUSH
13148: CALL_OW 67
// strength := strength - 1 ;
13152: LD_ADDR_LOC 12
13156: PUSH
13157: LD_LOC 12
13161: PUSH
13162: LD_INT 1
13164: MINUS
13165: ST_TO_ADDR
// Update_Flags ;
13166: CALL 13014 0 0
// until not strength ;
13170: LD_LOC 12
13174: NOT
13175: IFFALSE 13143
// for un in battle_flags_id do
13177: LD_ADDR_VAR 0 1
13181: PUSH
13182: LD_EXP 33
13186: PUSH
13187: FOR_IN
13188: IFFALSE 13201
// KillBattleFlag ( un ) ;
13190: LD_VAR 0 1
13194: PPUSH
13195: CALL_OW 419
13199: GO 13187
13201: POP
13202: POP
// end ; end_of_file
13203: PPOPN 1
13205: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
13206: LD_INT 0
13208: PPUSH
13209: PPUSH
// if ( not IAmSpec ) then
13210: CALL_OW 531
13214: NOT
13215: IFFALSE 13231
// Result := Limits_Info ^  ;
13217: LD_ADDR_VAR 0 1
13221: PUSH
13222: LD_LOC 24
13226: PUSH
13227: LD_STRING 
13229: ADD
13230: ST_TO_ADDR
// for i := 1 to 8 do
13231: LD_ADDR_VAR 0 2
13235: PUSH
13236: DOUBLE
13237: LD_INT 1
13239: DEC
13240: ST_TO_ADDR
13241: LD_INT 8
13243: PUSH
13244: FOR_TO
13245: IFFALSE 13290
// if Cheaters [ i ] then
13247: LD_LOC 25
13251: PUSH
13252: LD_VAR 0 2
13256: ARRAY
13257: IFFALSE 13288
// Result := Result ^ [ #Cheater , i , i ] ;
13259: LD_ADDR_VAR 0 1
13263: PUSH
13264: LD_VAR 0 1
13268: PUSH
13269: LD_STRING #Cheater
13271: PUSH
13272: LD_VAR 0 2
13276: PUSH
13277: LD_VAR 0 2
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: ADD
13287: ST_TO_ADDR
13288: GO 13244
13290: POP
13291: POP
// end ;
13292: LD_VAR 0 1
13296: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
13297: LD_INT 0
13299: PPUSH
13300: PPUSH
13301: PPUSH
13302: PPUSH
13303: PPUSH
// case Game_Type of 10 :
13304: LD_EXP 46
13308: PUSH
13309: LD_INT 10
13311: DOUBLE
13312: EQUAL
13313: IFTRUE 13317
13315: GO 13328
13317: POP
// def_game_rules := 1 ; 11 :
13318: LD_ADDR_EXP 47
13322: PUSH
13323: LD_INT 1
13325: ST_TO_ADDR
13326: GO 13348
13328: LD_INT 11
13330: DOUBLE
13331: EQUAL
13332: IFTRUE 13336
13334: GO 13347
13336: POP
// def_game_rules := 3 ; end ;
13337: LD_ADDR_EXP 47
13341: PUSH
13342: LD_INT 3
13344: ST_TO_ADDR
13345: GO 13348
13347: POP
// case def_game_rules of 0 :
13348: LD_EXP 47
13352: PUSH
13353: LD_INT 0
13355: DOUBLE
13356: EQUAL
13357: IFTRUE 13361
13359: GO 13366
13361: POP
// exit ; 1 :
13362: GO 15424
13364: GO 15324
13366: LD_INT 1
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13590
13374: POP
// begin def_base_level := 2 ;
13375: LD_ADDR_EXP 48
13379: PUSH
13380: LD_INT 2
13382: ST_TO_ADDR
// def_amount_of_people := 2 ;
13383: LD_ADDR_EXP 49
13387: PUSH
13388: LD_INT 2
13390: ST_TO_ADDR
// def_skill_level := 1 ;
13391: LD_ADDR_EXP 50
13395: PUSH
13396: LD_INT 1
13398: ST_TO_ADDR
// def_starting_resources := 2 ;
13399: LD_ADDR_EXP 51
13403: PUSH
13404: LD_INT 2
13406: ST_TO_ADDR
// def_shipments_density := 1 ;
13407: LD_ADDR_EXP 52
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13415: LD_ADDR_EXP 53
13419: PUSH
13420: LD_INT 0
13422: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13423: LD_ADDR_EXP 54
13427: PUSH
13428: LD_INT 1
13430: ST_TO_ADDR
// def_shared_vision := 1 ;
13431: LD_ADDR_EXP 55
13435: PUSH
13436: LD_INT 1
13438: ST_TO_ADDR
// def_morale_flags := 3 ;
13439: LD_ADDR_EXP 56
13443: PUSH
13444: LD_INT 3
13446: ST_TO_ADDR
// def_siberite_detection := 1 ;
13447: LD_ADDR_EXP 57
13451: PUSH
13452: LD_INT 1
13454: ST_TO_ADDR
// def_people_respawning := 1 ;
13455: LD_ADDR_EXP 58
13459: PUSH
13460: LD_INT 1
13462: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13463: LD_ADDR_EXP 59
13467: PUSH
13468: LD_INT 1
13470: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13471: LD_ADDR_EXP 60
13475: PUSH
13476: LD_INT 0
13478: ST_TO_ADDR
// def_builduptime := 2 ;
13479: LD_ADDR_EXP 61
13483: PUSH
13484: LD_INT 2
13486: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13487: LD_ADDR_VAR 0 2
13491: PUSH
13492: EMPTY
13493: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13494: LD_ADDR_VAR 0 3
13498: PUSH
13499: EMPTY
13500: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13501: LD_ADDR_LOC 19
13505: PUSH
13506: EMPTY
13507: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13508: LD_ADDR_LOC 20
13512: PUSH
13513: EMPTY
13514: ST_TO_ADDR
// Banned_Controls := [ ] ;
13515: LD_ADDR_LOC 21
13519: PUSH
13520: EMPTY
13521: ST_TO_ADDR
// Banned_Engines := [ ] ;
13522: LD_ADDR_LOC 22
13526: PUSH
13527: EMPTY
13528: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13529: LD_ADDR_LOC 17
13533: PUSH
13534: LD_INT 37
13536: PUSH
13537: EMPTY
13538: LIST
13539: PUSH
13540: LD_INT 4
13542: PUSH
13543: LD_INT 5
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 31
13552: PUSH
13553: LD_INT 32
13555: PUSH
13556: LD_INT 33
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
13569: LD_ADDR_LOC 18
13573: PUSH
13574: LD_INT 2
13576: PUSH
13577: LD_INT 2
13579: PUSH
13580: LD_INT 4
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: ST_TO_ADDR
// end ; 2 :
13588: GO 15324
13590: LD_INT 2
13592: DOUBLE
13593: EQUAL
13594: IFTRUE 13598
13596: GO 13807
13598: POP
// begin def_base_level := 1 ;
13599: LD_ADDR_EXP 48
13603: PUSH
13604: LD_INT 1
13606: ST_TO_ADDR
// def_amount_of_people := 2 ;
13607: LD_ADDR_EXP 49
13611: PUSH
13612: LD_INT 2
13614: ST_TO_ADDR
// def_skill_level := 3 ;
13615: LD_ADDR_EXP 50
13619: PUSH
13620: LD_INT 3
13622: ST_TO_ADDR
// def_starting_resources := 3 ;
13623: LD_ADDR_EXP 51
13627: PUSH
13628: LD_INT 3
13630: ST_TO_ADDR
// def_shipments_density := 2 ;
13631: LD_ADDR_EXP 52
13635: PUSH
13636: LD_INT 2
13638: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13639: LD_ADDR_EXP 53
13643: PUSH
13644: LD_INT 1
13646: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13647: LD_ADDR_EXP 54
13651: PUSH
13652: LD_INT 2
13654: ST_TO_ADDR
// def_shared_vision := 1 ;
13655: LD_ADDR_EXP 55
13659: PUSH
13660: LD_INT 1
13662: ST_TO_ADDR
// def_morale_flags := 0 ;
13663: LD_ADDR_EXP 56
13667: PUSH
13668: LD_INT 0
13670: ST_TO_ADDR
// def_siberite_detection := 1 ;
13671: LD_ADDR_EXP 57
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// def_people_respawning := 0 ;
13679: LD_ADDR_EXP 58
13683: PUSH
13684: LD_INT 0
13686: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13687: LD_ADDR_EXP 59
13691: PUSH
13692: LD_INT 0
13694: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13695: LD_ADDR_EXP 60
13699: PUSH
13700: LD_INT 0
13702: ST_TO_ADDR
// def_builduptime := 2 ;
13703: LD_ADDR_EXP 61
13707: PUSH
13708: LD_INT 2
13710: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13711: LD_ADDR_VAR 0 2
13715: PUSH
13716: LD_INT 1
13718: PUSH
13719: EMPTY
13720: LIST
13721: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13722: LD_ADDR_VAR 0 3
13726: PUSH
13727: EMPTY
13728: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13729: LD_ADDR_LOC 19
13733: PUSH
13734: EMPTY
13735: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13736: LD_ADDR_LOC 20
13740: PUSH
13741: EMPTY
13742: ST_TO_ADDR
// Banned_Controls := [ ] ;
13743: LD_ADDR_LOC 21
13747: PUSH
13748: EMPTY
13749: ST_TO_ADDR
// Banned_Engines := [ ] ;
13750: LD_ADDR_LOC 22
13754: PUSH
13755: EMPTY
13756: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13757: LD_ADDR_LOC 17
13761: PUSH
13762: LD_INT 4
13764: PUSH
13765: LD_INT 5
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: LD_INT 31
13774: PUSH
13775: LD_INT 32
13777: PUSH
13778: LD_INT 33
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
13790: LD_ADDR_LOC 18
13794: PUSH
13795: LD_INT 1
13797: PUSH
13798: LD_INT 2
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: ST_TO_ADDR
// end ; 3 :
13805: GO 15324
13807: LD_INT 3
13809: DOUBLE
13810: EQUAL
13811: IFTRUE 13815
13813: GO 14058
13815: POP
// begin def_base_level := 1 ;
13816: LD_ADDR_EXP 48
13820: PUSH
13821: LD_INT 1
13823: ST_TO_ADDR
// def_amount_of_people := 2 ;
13824: LD_ADDR_EXP 49
13828: PUSH
13829: LD_INT 2
13831: ST_TO_ADDR
// def_skill_level := 3 ;
13832: LD_ADDR_EXP 50
13836: PUSH
13837: LD_INT 3
13839: ST_TO_ADDR
// def_starting_resources := 3 ;
13840: LD_ADDR_EXP 51
13844: PUSH
13845: LD_INT 3
13847: ST_TO_ADDR
// def_shipments_density := 1 ;
13848: LD_ADDR_EXP 52
13852: PUSH
13853: LD_INT 1
13855: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13856: LD_ADDR_EXP 53
13860: PUSH
13861: LD_INT 0
13863: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13864: LD_ADDR_EXP 54
13868: PUSH
13869: LD_INT 1
13871: ST_TO_ADDR
// def_shared_vision := 1 ;
13872: LD_ADDR_EXP 55
13876: PUSH
13877: LD_INT 1
13879: ST_TO_ADDR
// def_morale_flags := 0 ;
13880: LD_ADDR_EXP 56
13884: PUSH
13885: LD_INT 0
13887: ST_TO_ADDR
// def_siberite_detection := 1 ;
13888: LD_ADDR_EXP 57
13892: PUSH
13893: LD_INT 1
13895: ST_TO_ADDR
// def_people_respawning := 0 ;
13896: LD_ADDR_EXP 58
13900: PUSH
13901: LD_INT 0
13903: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
13904: LD_ADDR_EXP 59
13908: PUSH
13909: LD_INT 2
13911: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13912: LD_ADDR_EXP 60
13916: PUSH
13917: LD_INT 0
13919: ST_TO_ADDR
// def_builduptime := 1 ;
13920: LD_ADDR_EXP 61
13924: PUSH
13925: LD_INT 1
13927: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
13928: LD_ADDR_VAR 0 2
13932: PUSH
13933: LD_INT 23
13935: PUSH
13936: EMPTY
13937: LIST
13938: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
13939: LD_ADDR_VAR 0 3
13943: PUSH
13944: LD_INT 2
13946: PUSH
13947: LD_INT 37
13949: PUSH
13950: LD_INT 32
13952: PUSH
13953: LD_INT 33
13955: PUSH
13956: LD_INT 36
13958: PUSH
13959: LD_INT 16
13961: PUSH
13962: LD_INT 23
13964: PUSH
13965: LD_INT 21
13967: PUSH
13968: LD_INT 18
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_INT 20
13976: PUSH
13977: LD_INT 19
13979: PUSH
13980: LD_INT 25
13982: PUSH
13983: LD_INT 17
13985: PUSH
13986: LD_INT 24
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14006: LD_ADDR_LOC 19
14010: PUSH
14011: EMPTY
14012: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14013: LD_ADDR_LOC 20
14017: PUSH
14018: EMPTY
14019: ST_TO_ADDR
// Banned_Controls := [ ] ;
14020: LD_ADDR_LOC 21
14024: PUSH
14025: EMPTY
14026: ST_TO_ADDR
// Banned_Engines := [ ] ;
14027: LD_ADDR_LOC 22
14031: PUSH
14032: EMPTY
14033: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14034: LD_ADDR_LOC 17
14038: PUSH
14039: EMPTY
14040: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14041: LD_ADDR_LOC 18
14045: PUSH
14046: EMPTY
14047: ST_TO_ADDR
// No_Mechs := true ;
14048: LD_ADDR_EXP 62
14052: PUSH
14053: LD_INT 1
14055: ST_TO_ADDR
// end ; 4 :
14056: GO 15324
14058: LD_INT 4
14060: DOUBLE
14061: EQUAL
14062: IFTRUE 14066
14064: GO 14241
14066: POP
// begin def_base_level := 1 ;
14067: LD_ADDR_EXP 48
14071: PUSH
14072: LD_INT 1
14074: ST_TO_ADDR
// def_amount_of_people := 2 ;
14075: LD_ADDR_EXP 49
14079: PUSH
14080: LD_INT 2
14082: ST_TO_ADDR
// def_skill_level := 3 ;
14083: LD_ADDR_EXP 50
14087: PUSH
14088: LD_INT 3
14090: ST_TO_ADDR
// def_starting_resources := 3 ;
14091: LD_ADDR_EXP 51
14095: PUSH
14096: LD_INT 3
14098: ST_TO_ADDR
// def_shipments_density := 2 ;
14099: LD_ADDR_EXP 52
14103: PUSH
14104: LD_INT 2
14106: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14107: LD_ADDR_EXP 53
14111: PUSH
14112: LD_INT 1
14114: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14115: LD_ADDR_EXP 54
14119: PUSH
14120: LD_INT 2
14122: ST_TO_ADDR
// def_shared_vision := 1 ;
14123: LD_ADDR_EXP 55
14127: PUSH
14128: LD_INT 1
14130: ST_TO_ADDR
// def_morale_flags := 0 ;
14131: LD_ADDR_EXP 56
14135: PUSH
14136: LD_INT 0
14138: ST_TO_ADDR
// def_siberite_detection := 1 ;
14139: LD_ADDR_EXP 57
14143: PUSH
14144: LD_INT 1
14146: ST_TO_ADDR
// def_people_respawning := 0 ;
14147: LD_ADDR_EXP 58
14151: PUSH
14152: LD_INT 0
14154: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14155: LD_ADDR_EXP 59
14159: PUSH
14160: LD_INT 0
14162: ST_TO_ADDR
// def_siberite_bomb := 1 ;
14163: LD_ADDR_EXP 60
14167: PUSH
14168: LD_INT 1
14170: ST_TO_ADDR
// def_builduptime := 3 ;
14171: LD_ADDR_EXP 61
14175: PUSH
14176: LD_INT 3
14178: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14179: LD_ADDR_VAR 0 2
14183: PUSH
14184: LD_INT 1
14186: PUSH
14187: EMPTY
14188: LIST
14189: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14190: LD_ADDR_VAR 0 3
14194: PUSH
14195: EMPTY
14196: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14197: LD_ADDR_LOC 19
14201: PUSH
14202: EMPTY
14203: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14204: LD_ADDR_LOC 20
14208: PUSH
14209: EMPTY
14210: ST_TO_ADDR
// Banned_Controls := [ ] ;
14211: LD_ADDR_LOC 21
14215: PUSH
14216: EMPTY
14217: ST_TO_ADDR
// Banned_Engines := [ ] ;
14218: LD_ADDR_LOC 22
14222: PUSH
14223: EMPTY
14224: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14225: LD_ADDR_LOC 17
14229: PUSH
14230: EMPTY
14231: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14232: LD_ADDR_LOC 18
14236: PUSH
14237: EMPTY
14238: ST_TO_ADDR
// end ; 5 :
14239: GO 15324
14241: LD_INT 5
14243: DOUBLE
14244: EQUAL
14245: IFTRUE 14249
14247: GO 14498
14249: POP
// begin def_base_level := 0 ;
14250: LD_ADDR_EXP 48
14254: PUSH
14255: LD_INT 0
14257: ST_TO_ADDR
// def_amount_of_people := 0 ;
14258: LD_ADDR_EXP 49
14262: PUSH
14263: LD_INT 0
14265: ST_TO_ADDR
// def_skill_level := 0 ;
14266: LD_ADDR_EXP 50
14270: PUSH
14271: LD_INT 0
14273: ST_TO_ADDR
// def_starting_resources := 0 ;
14274: LD_ADDR_EXP 51
14278: PUSH
14279: LD_INT 0
14281: ST_TO_ADDR
// def_shipments_density := 0 ;
14282: LD_ADDR_EXP 52
14286: PUSH
14287: LD_INT 0
14289: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14290: LD_ADDR_EXP 53
14294: PUSH
14295: LD_INT 0
14297: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
14298: LD_ADDR_EXP 54
14302: PUSH
14303: LD_INT 0
14305: ST_TO_ADDR
// def_shared_vision := 1 ;
14306: LD_ADDR_EXP 55
14310: PUSH
14311: LD_INT 1
14313: ST_TO_ADDR
// def_morale_flags := 0 ;
14314: LD_ADDR_EXP 56
14318: PUSH
14319: LD_INT 0
14321: ST_TO_ADDR
// def_siberite_detection := 0 ;
14322: LD_ADDR_EXP 57
14326: PUSH
14327: LD_INT 0
14329: ST_TO_ADDR
// def_people_respawning := 1 ;
14330: LD_ADDR_EXP 58
14334: PUSH
14335: LD_INT 1
14337: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14338: LD_ADDR_EXP 59
14342: PUSH
14343: LD_INT 1
14345: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14346: LD_ADDR_EXP 60
14350: PUSH
14351: LD_INT 0
14353: ST_TO_ADDR
// def_builduptime := 0 ;
14354: LD_ADDR_EXP 61
14358: PUSH
14359: LD_INT 0
14361: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
14362: LD_ADDR_VAR 0 2
14366: PUSH
14367: LD_INT 10
14369: PUSH
14370: LD_INT 3
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
14377: LD_ADDR_VAR 0 3
14381: PUSH
14382: LD_INT 12
14384: PUSH
14385: LD_INT 11
14387: PUSH
14388: LD_INT 14
14390: PUSH
14391: LD_INT 13
14393: PUSH
14394: LD_INT 5
14396: PUSH
14397: LD_INT 24
14399: PUSH
14400: LD_INT 21
14402: PUSH
14403: LD_INT 33
14405: PUSH
14406: LD_INT 36
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
14420: LD_ADDR_LOC 19
14424: PUSH
14425: LD_INT 31
14427: PUSH
14428: EMPTY
14429: LIST
14430: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14431: LD_ADDR_LOC 20
14435: PUSH
14436: EMPTY
14437: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
14438: LD_ADDR_LOC 21
14442: PUSH
14443: LD_INT 2
14445: PUSH
14446: EMPTY
14447: LIST
14448: ST_TO_ADDR
// Banned_Engines := [ ] ;
14449: LD_ADDR_LOC 22
14453: PUSH
14454: EMPTY
14455: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
14456: LD_ADDR_LOC 17
14460: PUSH
14461: LD_INT 4
14463: PUSH
14464: EMPTY
14465: LIST
14466: PUSH
14467: LD_INT 31
14469: PUSH
14470: LD_INT 32
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
14481: LD_ADDR_LOC 18
14485: PUSH
14486: LD_INT 1
14488: PUSH
14489: LD_INT 1
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: ST_TO_ADDR
// end ; 6 :
14496: GO 15324
14498: LD_INT 6
14500: DOUBLE
14501: EQUAL
14502: IFTRUE 14506
14504: GO 14709
14506: POP
// begin def_base_level := 1 ;
14507: LD_ADDR_EXP 48
14511: PUSH
14512: LD_INT 1
14514: ST_TO_ADDR
// def_amount_of_people := 2 ;
14515: LD_ADDR_EXP 49
14519: PUSH
14520: LD_INT 2
14522: ST_TO_ADDR
// def_skill_level := 3 ;
14523: LD_ADDR_EXP 50
14527: PUSH
14528: LD_INT 3
14530: ST_TO_ADDR
// def_starting_resources := 3 ;
14531: LD_ADDR_EXP 51
14535: PUSH
14536: LD_INT 3
14538: ST_TO_ADDR
// def_shipments_density := 1 ;
14539: LD_ADDR_EXP 52
14543: PUSH
14544: LD_INT 1
14546: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14547: LD_ADDR_EXP 53
14551: PUSH
14552: LD_INT 0
14554: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14555: LD_ADDR_EXP 54
14559: PUSH
14560: LD_INT 1
14562: ST_TO_ADDR
// def_shared_vision := 1 ;
14563: LD_ADDR_EXP 55
14567: PUSH
14568: LD_INT 1
14570: ST_TO_ADDR
// def_morale_flags := 0 ;
14571: LD_ADDR_EXP 56
14575: PUSH
14576: LD_INT 0
14578: ST_TO_ADDR
// def_siberite_detection := 1 ;
14579: LD_ADDR_EXP 57
14583: PUSH
14584: LD_INT 1
14586: ST_TO_ADDR
// def_people_respawning := 2 ;
14587: LD_ADDR_EXP 58
14591: PUSH
14592: LD_INT 2
14594: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14595: LD_ADDR_EXP 59
14599: PUSH
14600: LD_INT 1
14602: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14603: LD_ADDR_EXP 60
14607: PUSH
14608: LD_INT 0
14610: ST_TO_ADDR
// def_builduptime := 1 ;
14611: LD_ADDR_EXP 61
14615: PUSH
14616: LD_INT 1
14618: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14619: LD_ADDR_VAR 0 2
14623: PUSH
14624: LD_INT 23
14626: PUSH
14627: EMPTY
14628: LIST
14629: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
14630: LD_ADDR_VAR 0 3
14634: PUSH
14635: LD_INT 2
14637: PUSH
14638: LD_INT 37
14640: PUSH
14641: LD_INT 31
14643: PUSH
14644: LD_INT 32
14646: PUSH
14647: LD_INT 33
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14657: LD_ADDR_LOC 19
14661: PUSH
14662: EMPTY
14663: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14664: LD_ADDR_LOC 20
14668: PUSH
14669: EMPTY
14670: ST_TO_ADDR
// Banned_Controls := [ ] ;
14671: LD_ADDR_LOC 21
14675: PUSH
14676: EMPTY
14677: ST_TO_ADDR
// Banned_Engines := [ ] ;
14678: LD_ADDR_LOC 22
14682: PUSH
14683: EMPTY
14684: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14685: LD_ADDR_LOC 17
14689: PUSH
14690: EMPTY
14691: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14692: LD_ADDR_LOC 18
14696: PUSH
14697: EMPTY
14698: ST_TO_ADDR
// No_Mechs := true ;
14699: LD_ADDR_EXP 62
14703: PUSH
14704: LD_INT 1
14706: ST_TO_ADDR
// end ; 7 :
14707: GO 15324
14709: LD_INT 7
14711: DOUBLE
14712: EQUAL
14713: IFTRUE 14717
14715: GO 14915
14717: POP
// begin def_base_level := 1 ;
14718: LD_ADDR_EXP 48
14722: PUSH
14723: LD_INT 1
14725: ST_TO_ADDR
// def_amount_of_people := 2 ;
14726: LD_ADDR_EXP 49
14730: PUSH
14731: LD_INT 2
14733: ST_TO_ADDR
// def_skill_level := 3 ;
14734: LD_ADDR_EXP 50
14738: PUSH
14739: LD_INT 3
14741: ST_TO_ADDR
// def_starting_resources := 3 ;
14742: LD_ADDR_EXP 51
14746: PUSH
14747: LD_INT 3
14749: ST_TO_ADDR
// def_shipments_density := 1 ;
14750: LD_ADDR_EXP 52
14754: PUSH
14755: LD_INT 1
14757: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14758: LD_ADDR_EXP 53
14762: PUSH
14763: LD_INT 1
14765: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14766: LD_ADDR_EXP 54
14770: PUSH
14771: LD_INT 2
14773: ST_TO_ADDR
// def_shared_vision := 1 ;
14774: LD_ADDR_EXP 55
14778: PUSH
14779: LD_INT 1
14781: ST_TO_ADDR
// def_morale_flags := 0 ;
14782: LD_ADDR_EXP 56
14786: PUSH
14787: LD_INT 0
14789: ST_TO_ADDR
// def_siberite_detection := 1 ;
14790: LD_ADDR_EXP 57
14794: PUSH
14795: LD_INT 1
14797: ST_TO_ADDR
// def_people_respawning := 0 ;
14798: LD_ADDR_EXP 58
14802: PUSH
14803: LD_INT 0
14805: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14806: LD_ADDR_EXP 59
14810: PUSH
14811: LD_INT 1
14813: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14814: LD_ADDR_EXP 60
14818: PUSH
14819: LD_INT 0
14821: ST_TO_ADDR
// def_builduptime := 3 ;
14822: LD_ADDR_EXP 61
14826: PUSH
14827: LD_INT 3
14829: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14830: LD_ADDR_VAR 0 2
14834: PUSH
14835: LD_INT 23
14837: PUSH
14838: EMPTY
14839: LIST
14840: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
14841: LD_ADDR_VAR 0 3
14845: PUSH
14846: LD_INT 37
14848: PUSH
14849: EMPTY
14850: LIST
14851: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14852: LD_ADDR_LOC 19
14856: PUSH
14857: EMPTY
14858: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14859: LD_ADDR_LOC 20
14863: PUSH
14864: EMPTY
14865: ST_TO_ADDR
// Banned_Controls := [ ] ;
14866: LD_ADDR_LOC 21
14870: PUSH
14871: EMPTY
14872: ST_TO_ADDR
// Banned_Engines := [ ] ;
14873: LD_ADDR_LOC 22
14877: PUSH
14878: EMPTY
14879: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14880: LD_ADDR_LOC 17
14884: PUSH
14885: LD_INT 31
14887: PUSH
14888: LD_INT 32
14890: PUSH
14891: LD_INT 33
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
14902: LD_ADDR_LOC 18
14906: PUSH
14907: LD_INT 10
14909: PUSH
14910: EMPTY
14911: LIST
14912: ST_TO_ADDR
// end ; 8 :
14913: GO 15324
14915: LD_INT 8
14917: DOUBLE
14918: EQUAL
14919: IFTRUE 14923
14921: GO 15323
14923: POP
// begin def_base_level := 0 ;
14924: LD_ADDR_EXP 48
14928: PUSH
14929: LD_INT 0
14931: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
14932: LD_ADDR_EXP 49
14936: PUSH
14937: LD_INT 0
14939: PPUSH
14940: LD_INT 1
14942: PPUSH
14943: CALL_OW 12
14947: ST_TO_ADDR
// def_skill_level := 0 ;
14948: LD_ADDR_EXP 50
14952: PUSH
14953: LD_INT 0
14955: ST_TO_ADDR
// def_starting_resources := 2 ;
14956: LD_ADDR_EXP 51
14960: PUSH
14961: LD_INT 2
14963: ST_TO_ADDR
// def_shipments_density := 1 ;
14964: LD_ADDR_EXP 52
14968: PUSH
14969: LD_INT 1
14971: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14972: LD_ADDR_EXP 53
14976: PUSH
14977: LD_INT 0
14979: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
14980: LD_ADDR_EXP 54
14984: PUSH
14985: LD_INT 0
14987: ST_TO_ADDR
// def_shared_vision := 1 ;
14988: LD_ADDR_EXP 55
14992: PUSH
14993: LD_INT 1
14995: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
14996: LD_ADDR_EXP 56
15000: PUSH
15001: LD_INT 0
15003: PPUSH
15004: LD_INT 2
15006: PPUSH
15007: CALL_OW 12
15011: ST_TO_ADDR
// def_siberite_detection := 0 ;
15012: LD_ADDR_EXP 57
15016: PUSH
15017: LD_INT 0
15019: ST_TO_ADDR
// def_people_respawning := 0 ;
15020: LD_ADDR_EXP 58
15024: PUSH
15025: LD_INT 0
15027: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
15028: LD_ADDR_EXP 59
15032: PUSH
15033: LD_INT 2
15035: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15036: LD_ADDR_EXP 60
15040: PUSH
15041: LD_INT 0
15043: ST_TO_ADDR
// def_builduptime := 0 ;
15044: LD_ADDR_EXP 61
15048: PUSH
15049: LD_INT 0
15051: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
15052: LD_ADDR_VAR 0 2
15056: PUSH
15057: LD_INT 23
15059: PUSH
15060: LD_INT 20
15062: PUSH
15063: LD_INT 40
15065: PUSH
15066: LD_INT 47
15068: PUSH
15069: LD_INT 46
15071: PUSH
15072: LD_INT 39
15074: PUSH
15075: LD_INT 71
15077: PUSH
15078: LD_INT 34
15080: PUSH
15081: LD_INT 41
15083: PUSH
15084: LD_INT 44
15086: PUSH
15087: LD_INT 17
15089: PUSH
15090: LD_INT 16
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
15107: LD_ADDR_VAR 0 3
15111: PUSH
15112: LD_INT 37
15114: PUSH
15115: LD_INT 5
15117: PUSH
15118: LD_INT 13
15120: PUSH
15121: LD_INT 34
15123: PUSH
15124: LD_INT 12
15126: PUSH
15127: LD_INT 15
15129: PUSH
15130: LD_INT 11
15132: PUSH
15133: LD_INT 14
15135: PUSH
15136: LD_INT 29
15138: PUSH
15139: LD_INT 30
15141: PUSH
15142: LD_INT 28
15144: PUSH
15145: LD_INT 24
15147: PUSH
15148: LD_INT 25
15150: PUSH
15151: LD_INT 20
15153: PUSH
15154: LD_INT 21
15156: PUSH
15157: LD_INT 22
15159: PUSH
15160: LD_INT 36
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15182: LD_ADDR_LOC 19
15186: PUSH
15187: EMPTY
15188: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
15189: LD_ADDR_LOC 20
15193: PUSH
15194: LD_INT 14
15196: PUSH
15197: EMPTY
15198: LIST
15199: ST_TO_ADDR
// Banned_Controls := [ ] ;
15200: LD_ADDR_LOC 21
15204: PUSH
15205: EMPTY
15206: ST_TO_ADDR
// Banned_Engines := [ ] ;
15207: LD_ADDR_LOC 22
15211: PUSH
15212: EMPTY
15213: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
15214: LD_ADDR_LOC 17
15218: PUSH
15219: LD_INT 31
15221: PUSH
15222: LD_INT 32
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 4
15231: PUSH
15232: EMPTY
15233: LIST
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
15239: LD_ADDR_LOC 18
15243: PUSH
15244: LD_INT 2
15246: PUSH
15247: LD_INT 1
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: ST_TO_ADDR
// for i := 1 to 8 do
15254: LD_ADDR_VAR 0 4
15258: PUSH
15259: DOUBLE
15260: LD_INT 1
15262: DEC
15263: ST_TO_ADDR
15264: LD_INT 8
15266: PUSH
15267: FOR_TO
15268: IFFALSE 15319
// if ( Side_Nations [ i ] = 3 ) then
15270: LD_EXP 24
15274: PUSH
15275: LD_VAR 0 4
15279: ARRAY
15280: PUSH
15281: LD_INT 3
15283: EQUAL
15284: IFFALSE 15317
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
15286: LD_ADDR_EXP 24
15290: PUSH
15291: LD_EXP 24
15295: PPUSH
15296: LD_VAR 0 4
15300: PPUSH
15301: LD_INT 1
15303: PPUSH
15304: LD_INT 2
15306: PPUSH
15307: CALL_OW 12
15311: PPUSH
15312: CALL_OW 1
15316: ST_TO_ADDR
15317: GO 15267
15319: POP
15320: POP
// end ; end ;
15321: GO 15324
15323: POP
// for i := 1 to 8 do
15324: LD_ADDR_VAR 0 4
15328: PUSH
15329: DOUBLE
15330: LD_INT 1
15332: DEC
15333: ST_TO_ADDR
15334: LD_INT 8
15336: PUSH
15337: FOR_TO
15338: IFFALSE 15422
// if Side_Positions [ i ] then
15340: LD_EXP 23
15344: PUSH
15345: LD_VAR 0 4
15349: ARRAY
15350: IFFALSE 15420
// begin for j in Unavailable_Techs do
15352: LD_ADDR_VAR 0 5
15356: PUSH
15357: LD_VAR 0 2
15361: PUSH
15362: FOR_IN
15363: IFFALSE 15384
// SetTech ( j , i , 0 ) ;
15365: LD_VAR 0 5
15369: PPUSH
15370: LD_VAR 0 4
15374: PPUSH
15375: LD_INT 0
15377: PPUSH
15378: CALL_OW 322
15382: GO 15362
15384: POP
15385: POP
// for j in Unavailable_Builds do
15386: LD_ADDR_VAR 0 5
15390: PUSH
15391: LD_VAR 0 3
15395: PUSH
15396: FOR_IN
15397: IFFALSE 15418
// SetRestrict ( j , i , 0 ) ;
15399: LD_VAR 0 5
15403: PPUSH
15404: LD_VAR 0 4
15408: PPUSH
15409: LD_INT 0
15411: PPUSH
15412: CALL_OW 324
15416: GO 15396
15418: POP
15419: POP
// end ;
15420: GO 15337
15422: POP
15423: POP
// end ;
15424: LD_VAR 0 1
15428: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
15429: LD_INT 0
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
// for i := 1 to Restricted_Builds do
15438: LD_ADDR_VAR 0 2
15442: PUSH
15443: DOUBLE
15444: LD_INT 1
15446: DEC
15447: ST_TO_ADDR
15448: LD_LOC 17
15452: PUSH
15453: FOR_TO
15454: IFFALSE 15764
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
15456: LD_LOC 17
15460: PUSH
15461: LD_VAR 0 2
15465: ARRAY
15466: PUSH
15467: LD_INT 1
15469: ARRAY
15470: PUSH
15471: LD_INT 31
15473: DOUBLE
15474: EQUAL
15475: IFTRUE 15491
15477: LD_INT 32
15479: DOUBLE
15480: EQUAL
15481: IFTRUE 15491
15483: LD_INT 33
15485: DOUBLE
15486: EQUAL
15487: IFTRUE 15491
15489: GO 15502
15491: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
15492: LD_ADDR_VAR 0 6
15496: PUSH
15497: LD_STRING #Turrets
15499: ST_TO_ADDR
15500: GO 15547
15502: LD_INT 4
15504: DOUBLE
15505: EQUAL
15506: IFTRUE 15516
15508: LD_INT 5
15510: DOUBLE
15511: EQUAL
15512: IFTRUE 15516
15514: GO 15527
15516: POP
// btype := #Armouries ; b_Behemoth :
15517: LD_ADDR_VAR 0 6
15521: PUSH
15522: LD_STRING #Armouries
15524: ST_TO_ADDR
15525: GO 15547
15527: LD_INT 37
15529: DOUBLE
15530: EQUAL
15531: IFTRUE 15535
15533: GO 15546
15535: POP
// btype := #Behemoths ; end ;
15536: LD_ADDR_VAR 0 6
15540: PUSH
15541: LD_STRING #Behemoths
15543: ST_TO_ADDR
15544: GO 15547
15546: POP
// list := [ ] ;
15547: LD_ADDR_VAR 0 7
15551: PUSH
15552: EMPTY
15553: ST_TO_ADDR
// for j := 1 to 8 do
15554: LD_ADDR_VAR 0 3
15558: PUSH
15559: DOUBLE
15560: LD_INT 1
15562: DEC
15563: ST_TO_ADDR
15564: LD_INT 8
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15661
// if Side_Positions [ j ] then
15570: LD_EXP 23
15574: PUSH
15575: LD_VAR 0 3
15579: ARRAY
15580: IFFALSE 15659
// begin amount := 0 ;
15582: LD_ADDR_VAR 0 5
15586: PUSH
15587: LD_INT 0
15589: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
15590: LD_ADDR_VAR 0 4
15594: PUSH
15595: LD_LOC 17
15599: PUSH
15600: LD_VAR 0 2
15604: ARRAY
15605: PUSH
15606: FOR_IN
15607: IFFALSE 15655
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
15609: LD_ADDR_VAR 0 5
15613: PUSH
15614: LD_VAR 0 5
15618: PUSH
15619: LD_INT 22
15621: PUSH
15622: LD_VAR 0 3
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 30
15633: PUSH
15634: LD_VAR 0 4
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 69
15651: PLUS
15652: ST_TO_ADDR
15653: GO 15606
15655: POP
15656: POP
// break ;
15657: GO 15661
// end ;
15659: GO 15567
15661: POP
15662: POP
// list := [ ] ;
15663: LD_ADDR_VAR 0 7
15667: PUSH
15668: EMPTY
15669: ST_TO_ADDR
// for j := 1 to 8 do
15670: LD_ADDR_VAR 0 3
15674: PUSH
15675: DOUBLE
15676: LD_INT 1
15678: DEC
15679: ST_TO_ADDR
15680: LD_INT 8
15682: PUSH
15683: FOR_TO
15684: IFFALSE 15704
// list := list ^ amount ;
15686: LD_ADDR_VAR 0 7
15690: PUSH
15691: LD_VAR 0 7
15695: PUSH
15696: LD_VAR 0 5
15700: ADD
15701: ST_TO_ADDR
15702: GO 15683
15704: POP
15705: POP
// Already_Built := Already_Built ^ [ list ] ;
15706: LD_ADDR_LOC 23
15710: PUSH
15711: LD_LOC 23
15715: PUSH
15716: LD_VAR 0 7
15720: PUSH
15721: EMPTY
15722: LIST
15723: ADD
15724: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15725: LD_ADDR_LOC 24
15729: PUSH
15730: LD_LOC 24
15734: PUSH
15735: LD_VAR 0 6
15739: PUSH
15740: LD_VAR 0 5
15744: PUSH
15745: LD_LOC 18
15749: PUSH
15750: LD_VAR 0 2
15754: ARRAY
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: LIST
15760: ADD
15761: ST_TO_ADDR
// end ;
15762: GO 15453
15764: POP
15765: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15766: LD_ADDR_LOC 25
15770: PUSH
15771: LD_INT 0
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: LD_INT 0
15779: PUSH
15780: LD_INT 0
15782: PUSH
15783: LD_INT 0
15785: PUSH
15786: LD_INT 0
15788: PUSH
15789: LD_INT 0
15791: PUSH
15792: LD_INT 0
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: ST_TO_ADDR
// if Limits_Info then
15805: LD_LOC 24
15809: IFFALSE 15825
// Limits_Info := #Limits ^ Limits_Info ;
15811: LD_ADDR_LOC 24
15815: PUSH
15816: LD_STRING #Limits
15818: PUSH
15819: LD_LOC 24
15823: ADD
15824: ST_TO_ADDR
// end ;
15825: LD_VAR 0 1
15829: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15830: LD_INT 0
15832: PPUSH
15833: PPUSH
15834: PPUSH
15835: PPUSH
// for i := 1 to Restricted_Builds do
15836: LD_ADDR_VAR 0 7
15840: PUSH
15841: DOUBLE
15842: LD_INT 1
15844: DEC
15845: ST_TO_ADDR
15846: LD_LOC 17
15850: PUSH
15851: FOR_TO
15852: IFFALSE 16275
// if BType in Restricted_Builds [ i ] then
15854: LD_VAR 0 2
15858: PUSH
15859: LD_LOC 17
15863: PUSH
15864: LD_VAR 0 7
15868: ARRAY
15869: IN
15870: IFFALSE 16273
// begin if old_side then
15872: LD_VAR 0 4
15876: IFFALSE 16002
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15878: LD_LOC 23
15882: PUSH
15883: LD_VAR 0 7
15887: ARRAY
15888: PUSH
15889: LD_VAR 0 3
15893: ARRAY
15894: PUSH
15895: LD_VAR 0 5
15899: PLUS
15900: PUSH
15901: LD_LOC 18
15905: PUSH
15906: LD_VAR 0 7
15910: ARRAY
15911: GREATER
15912: IFFALSE 15938
// begin SetSide ( un , old_side ) ;
15914: LD_VAR 0 1
15918: PPUSH
15919: LD_VAR 0 4
15923: PPUSH
15924: CALL_OW 235
// count := 0 ;
15928: LD_ADDR_VAR 0 5
15932: PUSH
15933: LD_INT 0
15935: ST_TO_ADDR
// end else
15936: GO 16002
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15938: LD_ADDR_LOC 23
15942: PUSH
15943: LD_LOC 23
15947: PPUSH
15948: LD_VAR 0 7
15952: PPUSH
15953: LD_LOC 23
15957: PUSH
15958: LD_VAR 0 7
15962: ARRAY
15963: PPUSH
15964: LD_VAR 0 4
15968: PPUSH
15969: LD_LOC 23
15973: PUSH
15974: LD_VAR 0 7
15978: ARRAY
15979: PUSH
15980: LD_VAR 0 4
15984: ARRAY
15985: PUSH
15986: LD_VAR 0 5
15990: MINUS
15991: PPUSH
15992: CALL_OW 1
15996: PPUSH
15997: CALL_OW 1
16001: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
16002: LD_ADDR_LOC 23
16006: PUSH
16007: LD_LOC 23
16011: PPUSH
16012: LD_VAR 0 7
16016: PPUSH
16017: LD_LOC 23
16021: PUSH
16022: LD_VAR 0 7
16026: ARRAY
16027: PPUSH
16028: LD_VAR 0 3
16032: PPUSH
16033: LD_LOC 23
16037: PUSH
16038: LD_VAR 0 7
16042: ARRAY
16043: PUSH
16044: LD_VAR 0 3
16048: ARRAY
16049: PUSH
16050: LD_VAR 0 5
16054: PLUS
16055: PPUSH
16056: CALL_OW 1
16060: PPUSH
16061: CALL_OW 1
16065: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
16066: LD_VAR 0 5
16070: PUSH
16071: LD_INT 0
16073: NONEQUAL
16074: PUSH
16075: LD_VAR 0 3
16079: PUSH
16080: LD_OWVAR 2
16084: EQUAL
16085: AND
16086: IFFALSE 16129
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
16088: LD_ADDR_LOC 24
16092: PUSH
16093: LD_LOC 24
16097: PPUSH
16098: LD_INT 3
16100: PUSH
16101: LD_VAR 0 7
16105: MUL
16106: PPUSH
16107: LD_LOC 23
16111: PUSH
16112: LD_VAR 0 7
16116: ARRAY
16117: PUSH
16118: LD_VAR 0 3
16122: ARRAY
16123: PPUSH
16124: CALL_OW 1
16128: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
16129: LD_LOC 23
16133: PUSH
16134: LD_VAR 0 7
16138: ARRAY
16139: PUSH
16140: LD_VAR 0 3
16144: ARRAY
16145: PUSH
16146: LD_LOC 18
16150: PUSH
16151: LD_VAR 0 7
16155: ARRAY
16156: GREATER
16157: IFFALSE 16184
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
16159: LD_ADDR_LOC 25
16163: PUSH
16164: LD_LOC 25
16168: PPUSH
16169: LD_VAR 0 3
16173: PPUSH
16174: LD_INT 1
16176: PPUSH
16177: CALL_OW 1
16181: ST_TO_ADDR
// end else
16182: GO 16271
// begin for j := 1 to Restricted_Builds do
16184: LD_ADDR_VAR 0 8
16188: PUSH
16189: DOUBLE
16190: LD_INT 1
16192: DEC
16193: ST_TO_ADDR
16194: LD_LOC 17
16198: PUSH
16199: FOR_TO
16200: IFFALSE 16244
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
16202: LD_LOC 23
16206: PUSH
16207: LD_VAR 0 8
16211: ARRAY
16212: PUSH
16213: LD_VAR 0 3
16217: ARRAY
16218: PUSH
16219: LD_LOC 18
16223: PUSH
16224: LD_VAR 0 8
16228: ARRAY
16229: GREATER
16230: IFFALSE 16242
// begin Is_Cheater := true ;
16232: LD_ADDR_VAR 0 9
16236: PUSH
16237: LD_INT 1
16239: ST_TO_ADDR
// break ;
16240: GO 16244
// end ;
16242: GO 16199
16244: POP
16245: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
16246: LD_ADDR_LOC 25
16250: PUSH
16251: LD_LOC 25
16255: PPUSH
16256: LD_VAR 0 3
16260: PPUSH
16261: LD_VAR 0 9
16265: PPUSH
16266: CALL_OW 1
16270: ST_TO_ADDR
// end ; break ;
16271: GO 16275
// end ;
16273: GO 15851
16275: POP
16276: POP
// end ;
16277: LD_VAR 0 6
16281: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
16282: LD_VAR 0 5
16286: PUSH
16287: LD_LOC 19
16291: IN
16292: PUSH
16293: LD_VAR 0 2
16297: PUSH
16298: LD_LOC 20
16302: IN
16303: OR
16304: PUSH
16305: LD_VAR 0 4
16309: PUSH
16310: LD_LOC 21
16314: IN
16315: OR
16316: PUSH
16317: LD_VAR 0 3
16321: PUSH
16322: LD_LOC 22
16326: IN
16327: OR
16328: IFFALSE 16339
// ComCancel ( factory ) ;
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 127
// end ;
16339: PPOPN 5
16341: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
16342: LD_VAR 0 2
16346: PUSH
16347: LD_LOC 19
16351: IN
16352: IFFALSE 16363
// ComCancel ( building ) ;
16354: LD_VAR 0 1
16358: PPUSH
16359: CALL_OW 127
// end ; end_of_file
16363: PPOPN 2
16365: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
16366: LD_INT 0
16368: PPUSH
16369: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
16370: LD_ADDR_VAR 0 2
16374: PUSH
16375: LD_STRING #Multi1x1-Time
16377: PUSH
16378: LD_OWVAR 1
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: ST_TO_ADDR
// if WaitServerStrings then
16387: LD_EXP 64
16391: IFFALSE 16409
// AllStrings = AllStrings ^ WaitServerStrings ;
16393: LD_ADDR_VAR 0 2
16397: PUSH
16398: LD_VAR 0 2
16402: PUSH
16403: LD_EXP 64
16407: ADD
16408: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
16409: LD_INT 0
16411: PUSH
16412: LD_EXP 18
16416: PUSH
16417: LD_OWVAR 1
16421: MINUS
16422: LESSEQUAL
16423: IFFALSE 16454
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
16425: LD_ADDR_VAR 0 2
16429: PUSH
16430: LD_VAR 0 2
16434: PUSH
16435: LD_STRING #allowedsibbomb
16437: PUSH
16438: LD_EXP 18
16442: PUSH
16443: LD_OWVAR 1
16447: MINUS
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: ADD
16453: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
16454: LD_INT 0
16456: PUSH
16457: LD_EXP 68
16461: PUSH
16462: LD_OWVAR 1
16466: MINUS
16467: LESSEQUAL
16468: IFFALSE 16499
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
16470: LD_ADDR_VAR 0 2
16474: PUSH
16475: LD_VAR 0 2
16479: PUSH
16480: LD_STRING #builduptime
16482: PUSH
16483: LD_EXP 68
16487: PUSH
16488: LD_OWVAR 1
16492: MINUS
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: ADD
16498: ST_TO_ADDR
// if ( ExtraStrings ) then
16499: LD_EXP 63
16503: IFFALSE 16525
// AllStrings := AllStrings ^  ^ ExtraStrings ;
16505: LD_ADDR_VAR 0 2
16509: PUSH
16510: LD_VAR 0 2
16514: PUSH
16515: LD_STRING 
16517: ADD
16518: PUSH
16519: LD_EXP 63
16523: ADD
16524: ST_TO_ADDR
// if Display_kings and not isSGUI then
16525: LD_EXP 65
16529: PUSH
16530: LD_OWVAR 83
16534: NOT
16535: AND
16536: IFFALSE 16554
// AllStrings = AllStrings ^ Display_kings ;
16538: LD_ADDR_VAR 0 2
16542: PUSH
16543: LD_VAR 0 2
16547: PUSH
16548: LD_EXP 65
16552: ADD
16553: ST_TO_ADDR
// if ( LimitsStrings ) then
16554: CALL 13206 0 0
16558: IFFALSE 16580
// AllStrings := AllStrings ^  ^ LimitsStrings ;
16560: LD_ADDR_VAR 0 2
16564: PUSH
16565: LD_VAR 0 2
16569: PUSH
16570: LD_STRING 
16572: ADD
16573: PUSH
16574: CALL 13206 0 0
16578: ADD
16579: ST_TO_ADDR
// Display_Strings := AllStrings ;
16580: LD_ADDR_OWVAR 47
16584: PUSH
16585: LD_VAR 0 2
16589: ST_TO_ADDR
// end ;
16590: LD_VAR 0 1
16594: RET
// every 0 0$1 do
16595: GO 16597
16597: DISABLE
// begin ShowTimer ;
16598: CALL 16366 0 0
// enable ;
16602: ENABLE
// end ; end_of_file
16603: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
16604: LD_INT 0
16606: PPUSH
16607: PPUSH
16608: PPUSH
// sharedPoints1 = [ ] ;
16609: LD_ADDR_LOC 26
16613: PUSH
16614: EMPTY
16615: ST_TO_ADDR
// sharedPoints2 = [ ] ;
16616: LD_ADDR_LOC 27
16620: PUSH
16621: EMPTY
16622: ST_TO_ADDR
// sharedPoints3 = [ ] ;
16623: LD_ADDR_LOC 28
16627: PUSH
16628: EMPTY
16629: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
16630: LD_ADDR_VAR 0 2
16634: PUSH
16635: DOUBLE
16636: LD_INT 1
16638: DEC
16639: ST_TO_ADDR
16640: LD_EXP 23
16644: PUSH
16645: LD_INT 0
16647: PLUS
16648: PUSH
16649: FOR_TO
16650: IFFALSE 16752
// begin if not Side_Positions [ i ] = 0 then
16652: LD_EXP 23
16656: PUSH
16657: LD_VAR 0 2
16661: ARRAY
16662: PUSH
16663: LD_INT 0
16665: EQUAL
16666: NOT
16667: IFFALSE 16681
// SetMultiScore ( i , 0 ) ;
16669: LD_VAR 0 2
16673: PPUSH
16674: LD_INT 0
16676: PPUSH
16677: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
16681: LD_ADDR_LOC 26
16685: PUSH
16686: LD_LOC 26
16690: PPUSH
16691: LD_VAR 0 2
16695: PPUSH
16696: LD_INT 0
16698: PPUSH
16699: CALL_OW 1
16703: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
16704: LD_ADDR_LOC 27
16708: PUSH
16709: LD_LOC 27
16713: PPUSH
16714: LD_VAR 0 2
16718: PPUSH
16719: LD_INT 0
16721: PPUSH
16722: CALL_OW 1
16726: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
16727: LD_ADDR_LOC 28
16731: PUSH
16732: LD_LOC 28
16736: PPUSH
16737: LD_VAR 0 2
16741: PPUSH
16742: LD_INT 0
16744: PPUSH
16745: CALL_OW 1
16749: ST_TO_ADDR
// end ;
16750: GO 16649
16752: POP
16753: POP
// pointGame = true ;
16754: LD_ADDR_LOC 29
16758: PUSH
16759: LD_INT 1
16761: ST_TO_ADDR
// end ;
16762: LD_VAR 0 1
16766: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
16767: LD_LOC 29
16771: IFFALSE 17182
16773: GO 16775
16775: DISABLE
16776: LD_INT 0
16778: PPUSH
16779: PPUSH
16780: PPUSH
16781: PPUSH
16782: PPUSH
16783: PPUSH
16784: PPUSH
16785: PPUSH
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
16790: PPUSH
// begin if isSGUI then
16791: LD_OWVAR 83
16795: IFFALSE 17182
// begin if Teams [ 1 ] then
16797: LD_EXP 22
16801: PUSH
16802: LD_INT 1
16804: ARRAY
16805: IFFALSE 16817
// red = true else
16807: LD_ADDR_VAR 0 2
16811: PUSH
16812: LD_INT 1
16814: ST_TO_ADDR
16815: GO 16825
// red = false ;
16817: LD_ADDR_VAR 0 2
16821: PUSH
16822: LD_INT 0
16824: ST_TO_ADDR
// if Teams [ 2 ] then
16825: LD_EXP 22
16829: PUSH
16830: LD_INT 2
16832: ARRAY
16833: IFFALSE 16845
// blue = true else
16835: LD_ADDR_VAR 0 3
16839: PUSH
16840: LD_INT 1
16842: ST_TO_ADDR
16843: GO 16853
// blue = false ;
16845: LD_ADDR_VAR 0 3
16849: PUSH
16850: LD_INT 0
16852: ST_TO_ADDR
// if Teams [ 3 ] then
16853: LD_EXP 22
16857: PUSH
16858: LD_INT 3
16860: ARRAY
16861: IFFALSE 16873
// yel = true else
16863: LD_ADDR_VAR 0 4
16867: PUSH
16868: LD_INT 1
16870: ST_TO_ADDR
16871: GO 16881
// yel = false ;
16873: LD_ADDR_VAR 0 4
16877: PUSH
16878: LD_INT 0
16880: ST_TO_ADDR
// if Teams [ 4 ] then
16881: LD_EXP 22
16885: PUSH
16886: LD_INT 4
16888: ARRAY
16889: IFFALSE 16901
// green = true else
16891: LD_ADDR_VAR 0 5
16895: PUSH
16896: LD_INT 1
16898: ST_TO_ADDR
16899: GO 16909
// green = false ;
16901: LD_ADDR_VAR 0 5
16905: PUSH
16906: LD_INT 0
16908: ST_TO_ADDR
// if def_public_score then
16909: LD_EXP 6
16913: IFFALSE 16925
// p = true else
16915: LD_ADDR_VAR 0 12
16919: PUSH
16920: LD_INT 1
16922: ST_TO_ADDR
16923: GO 16933
// p = false ;
16925: LD_ADDR_VAR 0 12
16929: PUSH
16930: LD_INT 0
16932: ST_TO_ADDR
// if team_game then
16933: LD_EXP 25
16937: IFFALSE 17018
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
16939: LD_ADDR_VAR 0 13
16943: PUSH
16944: LD_INT 3
16946: PUSH
16947: LD_INT 1
16949: PUSH
16950: LD_INT 2
16952: PUSH
16953: LD_INT 7
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: PUSH
16962: LD_EXP 28
16966: ARRAY
16967: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
16968: LD_ADDR_VAR 0 10
16972: PUSH
16973: LD_STRING {
16975: PUSH
16976: LD_VAR 0 3
16980: STR
16981: PUSH
16982: LD_STRING ,
16984: STR
16985: PUSH
16986: LD_VAR 0 4
16990: STR
16991: PUSH
16992: LD_STRING ,
16994: STR
16995: PUSH
16996: LD_VAR 0 2
17000: STR
17001: PUSH
17002: LD_STRING ,0,0,0,
17004: STR
17005: PUSH
17006: LD_VAR 0 5
17010: STR
17011: PUSH
17012: LD_STRING ,0}
17014: STR
17015: ST_TO_ADDR
// end else
17016: GO 17118
// begin you = your_side ;
17018: LD_ADDR_VAR 0 13
17022: PUSH
17023: LD_OWVAR 2
17027: ST_TO_ADDR
// s = { ;
17028: LD_ADDR_VAR 0 10
17032: PUSH
17033: LD_STRING {
17035: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
17036: LD_ADDR_VAR 0 1
17040: PUSH
17041: DOUBLE
17042: LD_INT 1
17044: DEC
17045: ST_TO_ADDR
17046: LD_EXP 23
17050: PUSH
17051: LD_INT 0
17053: PLUS
17054: PUSH
17055: FOR_TO
17056: IFFALSE 17102
// if side_positions [ i ] then
17058: LD_EXP 23
17062: PUSH
17063: LD_VAR 0 1
17067: ARRAY
17068: IFFALSE 17086
// s = s & 1, else
17070: LD_ADDR_VAR 0 10
17074: PUSH
17075: LD_VAR 0 10
17079: PUSH
17080: LD_STRING 1,
17082: STR
17083: ST_TO_ADDR
17084: GO 17100
// s = s & 0, ;
17086: LD_ADDR_VAR 0 10
17090: PUSH
17091: LD_VAR 0 10
17095: PUSH
17096: LD_STRING 0,
17098: STR
17099: ST_TO_ADDR
17100: GO 17055
17102: POP
17103: POP
// s = s & } ;
17104: LD_ADDR_VAR 0 10
17108: PUSH
17109: LD_VAR 0 10
17113: PUSH
17114: LD_STRING }
17116: STR
17117: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
17118: LD_STRING initScore(
17120: PUSH
17121: LD_VAR 0 10
17125: STR
17126: PUSH
17127: LD_STRING ,
17129: STR
17130: PUSH
17131: LD_VAR 0 12
17135: STR
17136: PUSH
17137: LD_STRING ,
17139: STR
17140: PUSH
17141: LD_VAR 0 13
17145: STR
17146: PUSH
17147: LD_STRING  );
17149: STR
17150: PPUSH
17151: CALL_OW 559
// if game_type = 3 then
17155: LD_EXP 46
17159: PUSH
17160: LD_INT 3
17162: EQUAL
17163: IFFALSE 17182
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
17165: LD_STRING AddScorePoints(2,2,
17167: PUSH
17168: LD_EXP 20
17172: STR
17173: PUSH
17174: LD_STRING  );
17176: STR
17177: PPUSH
17178: CALL_OW 559
// end ; end ;
17182: PPOPN 13
17184: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
17185: LD_INT 0
17187: PPUSH
17188: PPUSH
// case typ of 1 :
17189: LD_VAR 0 3
17193: PUSH
17194: LD_INT 1
17196: DOUBLE
17197: EQUAL
17198: IFTRUE 17202
17200: GO 17230
17202: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
17203: LD_ADDR_LOC 26
17207: PUSH
17208: LD_LOC 26
17212: PPUSH
17213: LD_VAR 0 1
17217: PPUSH
17218: LD_VAR 0 2
17222: PPUSH
17223: CALL_OW 1
17227: ST_TO_ADDR
17228: GO 17303
17230: LD_INT 2
17232: DOUBLE
17233: EQUAL
17234: IFTRUE 17238
17236: GO 17266
17238: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
17239: LD_ADDR_LOC 27
17243: PUSH
17244: LD_LOC 27
17248: PPUSH
17249: LD_VAR 0 1
17253: PPUSH
17254: LD_VAR 0 2
17258: PPUSH
17259: CALL_OW 1
17263: ST_TO_ADDR
17264: GO 17303
17266: LD_INT 3
17268: DOUBLE
17269: EQUAL
17270: IFTRUE 17274
17272: GO 17302
17274: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
17275: LD_ADDR_LOC 28
17279: PUSH
17280: LD_LOC 28
17284: PPUSH
17285: LD_VAR 0 1
17289: PPUSH
17290: LD_VAR 0 2
17294: PPUSH
17295: CALL_OW 1
17299: ST_TO_ADDR
17300: GO 17303
17302: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
17303: LD_ADDR_VAR 0 5
17307: PUSH
17308: LD_LOC 26
17312: PUSH
17313: LD_VAR 0 1
17317: ARRAY
17318: PUSH
17319: LD_LOC 27
17323: PUSH
17324: LD_VAR 0 1
17328: ARRAY
17329: PLUS
17330: PUSH
17331: LD_LOC 28
17335: PUSH
17336: LD_VAR 0 1
17340: ARRAY
17341: PLUS
17342: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
17343: LD_VAR 0 1
17347: PPUSH
17348: LD_VAR 0 5
17352: PPUSH
17353: CALL_OW 506
// end ; end_of_file
17357: LD_VAR 0 4
17361: RET
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
17362: LD_INT 0
17364: PPUSH
17365: PPUSH
17366: PPUSH
// BuildUpTime_Delay = 0 ;
17367: LD_ADDR_EXP 68
17371: PUSH
17372: LD_INT 0
17374: ST_TO_ADDR
// if not def_builduptime then
17375: LD_EXP 61
17379: NOT
17380: IFFALSE 17384
// exit ;
17382: GO 17567
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
17384: LD_ADDR_EXP 68
17388: PUSH
17389: LD_INT 8400
17391: PUSH
17392: LD_INT 2100
17394: PUSH
17395: LD_EXP 61
17399: MUL
17400: PLUS
17401: ST_TO_ADDR
// BuildUpTimeActive := true ;
17402: LD_ADDR_EXP 67
17406: PUSH
17407: LD_INT 1
17409: ST_TO_ADDR
// for i := 1 to 8 do
17410: LD_ADDR_VAR 0 2
17414: PUSH
17415: DOUBLE
17416: LD_INT 1
17418: DEC
17419: ST_TO_ADDR
17420: LD_INT 8
17422: PUSH
17423: FOR_TO
17424: IFFALSE 17565
// if Side_Positions [ i ] then
17426: LD_EXP 23
17430: PUSH
17431: LD_VAR 0 2
17435: ARRAY
17436: IFFALSE 17563
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
17438: LD_EXP 66
17442: PUSH
17443: LD_EXP 23
17447: PUSH
17448: LD_VAR 0 2
17452: ARRAY
17453: ARRAY
17454: PPUSH
17455: LD_INT 5
17457: PPUSH
17458: CALL_OW 424
// for j := 1 to 8 do
17462: LD_ADDR_VAR 0 3
17466: PUSH
17467: DOUBLE
17468: LD_INT 1
17470: DEC
17471: ST_TO_ADDR
17472: LD_INT 8
17474: PUSH
17475: FOR_TO
17476: IFFALSE 17561
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17478: LD_EXP 23
17482: PUSH
17483: LD_VAR 0 3
17487: ARRAY
17488: PUSH
17489: LD_EXP 21
17493: PUSH
17494: LD_VAR 0 2
17498: ARRAY
17499: PUSH
17500: LD_EXP 21
17504: PUSH
17505: LD_VAR 0 3
17509: ARRAY
17510: NONEQUAL
17511: PUSH
17512: LD_EXP 25
17516: NOT
17517: PUSH
17518: LD_VAR 0 2
17522: PUSH
17523: LD_VAR 0 3
17527: NONEQUAL
17528: AND
17529: OR
17530: AND
17531: IFFALSE 17559
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17533: LD_VAR 0 3
17537: PPUSH
17538: LD_EXP 66
17542: PUSH
17543: LD_EXP 23
17547: PUSH
17548: LD_VAR 0 2
17552: ARRAY
17553: ARRAY
17554: PPUSH
17555: CALL_OW 333
17559: GO 17475
17561: POP
17562: POP
// end ;
17563: GO 17423
17565: POP
17566: POP
// end ;
17567: LD_VAR 0 1
17571: RET
// export function EndBuildUp ; var i , j ; begin
17572: LD_INT 0
17574: PPUSH
17575: PPUSH
17576: PPUSH
// BuildUpTimeActive := false ;
17577: LD_ADDR_EXP 67
17581: PUSH
17582: LD_INT 0
17584: ST_TO_ADDR
// for i := 1 to 8 do
17585: LD_ADDR_VAR 0 2
17589: PUSH
17590: DOUBLE
17591: LD_INT 1
17593: DEC
17594: ST_TO_ADDR
17595: LD_INT 8
17597: PUSH
17598: FOR_TO
17599: IFFALSE 17740
// if Side_Positions [ i ] then
17601: LD_EXP 23
17605: PUSH
17606: LD_VAR 0 2
17610: ARRAY
17611: IFFALSE 17738
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
17613: LD_EXP 66
17617: PUSH
17618: LD_EXP 23
17622: PUSH
17623: LD_VAR 0 2
17627: ARRAY
17628: ARRAY
17629: PPUSH
17630: LD_INT 0
17632: PPUSH
17633: CALL_OW 424
// for j := 1 to 8 do
17637: LD_ADDR_VAR 0 3
17641: PUSH
17642: DOUBLE
17643: LD_INT 1
17645: DEC
17646: ST_TO_ADDR
17647: LD_INT 8
17649: PUSH
17650: FOR_TO
17651: IFFALSE 17736
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
17653: LD_EXP 23
17657: PUSH
17658: LD_VAR 0 3
17662: ARRAY
17663: PUSH
17664: LD_EXP 21
17668: PUSH
17669: LD_VAR 0 2
17673: ARRAY
17674: PUSH
17675: LD_EXP 21
17679: PUSH
17680: LD_VAR 0 3
17684: ARRAY
17685: NONEQUAL
17686: PUSH
17687: LD_EXP 25
17691: NOT
17692: PUSH
17693: LD_VAR 0 2
17697: PUSH
17698: LD_VAR 0 3
17702: NONEQUAL
17703: AND
17704: OR
17705: AND
17706: IFFALSE 17734
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
17708: LD_VAR 0 3
17712: PPUSH
17713: LD_EXP 66
17717: PUSH
17718: LD_EXP 23
17722: PUSH
17723: LD_VAR 0 2
17727: ARRAY
17728: ARRAY
17729: PPUSH
17730: CALL_OW 334
17734: GO 17650
17736: POP
17737: POP
// end ;
17738: GO 17598
17740: POP
17741: POP
// end ;
17742: LD_VAR 0 1
17746: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
17747: LD_EXP 67
17751: IFFALSE 17926
17753: GO 17755
17755: DISABLE
17756: LD_INT 0
17758: PPUSH
17759: PPUSH
// begin for i := 1 to 8 do
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: DOUBLE
17766: LD_INT 1
17768: DEC
17769: ST_TO_ADDR
17770: LD_INT 8
17772: PUSH
17773: FOR_TO
17774: IFFALSE 17923
// if Side_Positions [ i ] then
17776: LD_EXP 23
17780: PUSH
17781: LD_VAR 0 1
17785: ARRAY
17786: IFFALSE 17921
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
17788: LD_ADDR_VAR 0 2
17792: PUSH
17793: LD_EXP 66
17797: PUSH
17798: LD_EXP 23
17802: PUSH
17803: LD_VAR 0 1
17807: ARRAY
17808: ARRAY
17809: PPUSH
17810: LD_INT 2
17812: PUSH
17813: LD_INT 21
17815: PUSH
17816: LD_INT 1
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 21
17825: PUSH
17826: LD_INT 2
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 22
17840: PUSH
17841: LD_OWVAR 2
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PPUSH
17854: CALL_OW 70
17858: PUSH
17859: FOR_IN
17860: IFFALSE 17919
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
17862: LD_EXP 21
17866: PUSH
17867: LD_VAR 0 1
17871: ARRAY
17872: PUSH
17873: LD_EXP 21
17877: PUSH
17878: LD_OWVAR 2
17882: ARRAY
17883: NONEQUAL
17884: PUSH
17885: LD_EXP 25
17889: NOT
17890: PUSH
17891: LD_VAR 0 1
17895: PUSH
17896: LD_OWVAR 2
17900: NONEQUAL
17901: AND
17902: OR
17903: IFFALSE 17917
// ComMoveToArea ( un , BuildUpEscape ) ;
17905: LD_VAR 0 2
17909: PPUSH
17910: LD_INT 24
17912: PPUSH
17913: CALL_OW 113
17917: GO 17859
17919: POP
17920: POP
17921: GO 17773
17923: POP
17924: POP
// enable ;
17925: ENABLE
// end ;
17926: PPOPN 2
17928: END
// every 0 0$1 trigger def_builduptime do
17929: LD_EXP 61
17933: IFFALSE 17959
17935: GO 17937
17937: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
17938: LD_INT 8400
17940: PUSH
17941: LD_EXP 61
17945: PUSH
17946: LD_INT 2100
17948: MUL
17949: PLUS
17950: PPUSH
17951: CALL_OW 67
// EndBuildUp ;
17955: CALL 17572 0 0
// end ; end_of_file
17959: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
17960: LD_INT 0
17962: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
17963: LD_VAR 0 1
17967: PPUSH
17968: CALL_OW 255
17972: PUSH
17973: LD_VAR 0 4
17977: EQUAL
17978: IFFALSE 17997
// begin SetAchievement ( ACH_RAD ) ;
17980: LD_STRING ACH_RAD
17982: PPUSH
17983: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
17987: LD_STRING ACH_NL
17989: PPUSH
17990: LD_INT 1
17992: PPUSH
17993: CALL_OW 564
// end end ;
17997: LD_VAR 0 5
18001: RET
// export function SA_Win ( side ) ; begin
18002: LD_INT 0
18004: PPUSH
// case side of 1 :
18005: LD_VAR 0 1
18009: PUSH
18010: LD_INT 1
18012: DOUBLE
18013: EQUAL
18014: IFTRUE 18018
18016: GO 18031
18018: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18019: LD_STRING ACH_AH
18021: PPUSH
18022: LD_INT 1
18024: PPUSH
18025: CALL_OW 564
18029: GO 18194
18031: LD_INT 2
18033: DOUBLE
18034: EQUAL
18035: IFTRUE 18039
18037: GO 18052
18039: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18040: LD_STRING ACH_E
18042: PPUSH
18043: LD_INT 1
18045: PPUSH
18046: CALL_OW 564
18050: GO 18194
18052: LD_INT 3
18054: DOUBLE
18055: EQUAL
18056: IFTRUE 18060
18058: GO 18073
18060: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18061: LD_STRING ACH_OOL
18063: PPUSH
18064: LD_INT 1
18066: PPUSH
18067: CALL_OW 564
18071: GO 18194
18073: LD_INT 1
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: DOUBLE
18083: EQUAL
18084: IFTRUE 18088
18086: GO 18113
18088: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18089: LD_STRING ACH_AH
18091: PPUSH
18092: LD_REAL  5.00000000000000E-0001
18095: PPUSH
18096: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18100: LD_STRING ACH_E
18102: PPUSH
18103: LD_REAL  5.00000000000000E-0001
18106: PPUSH
18107: CALL_OW 564
// end ; [ 2 , 3 ] :
18111: GO 18194
18113: LD_INT 2
18115: PUSH
18116: LD_INT 3
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: DOUBLE
18123: EQUAL
18124: IFTRUE 18128
18126: GO 18153
18128: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18129: LD_STRING ACH_OOL
18131: PPUSH
18132: LD_REAL  5.00000000000000E-0001
18135: PPUSH
18136: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18140: LD_STRING ACH_E
18142: PPUSH
18143: LD_REAL  5.00000000000000E-0001
18146: PPUSH
18147: CALL_OW 564
// end ; [ 3 , 1 ] :
18151: GO 18194
18153: LD_INT 3
18155: PUSH
18156: LD_INT 1
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: DOUBLE
18163: EQUAL
18164: IFTRUE 18168
18166: GO 18193
18168: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18169: LD_STRING ACH_AH
18171: PPUSH
18172: LD_REAL  5.00000000000000E-0001
18175: PPUSH
18176: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18180: LD_STRING ACH_OOL
18182: PPUSH
18183: LD_REAL  5.00000000000000E-0001
18186: PPUSH
18187: CALL_OW 564
// end ; end ;
18191: GO 18194
18193: POP
// end ; end_of_file
18194: LD_VAR 0 2
18198: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
18199: LD_INT 0
18201: PPUSH
18202: PPUSH
// enable ( 98 ) ;
18203: LD_INT 98
18205: ENABLE_MARKED
// GameEnded = false ;
18206: LD_ADDR_LOC 31
18210: PUSH
18211: LD_INT 0
18213: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18214: LD_ADDR_LOC 30
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: LD_INT 0
18227: PUSH
18228: LD_INT 0
18230: PUSH
18231: LD_INT 0
18233: PUSH
18234: LD_INT 0
18236: PUSH
18237: LD_INT 0
18239: PUSH
18240: LD_INT 0
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: ST_TO_ADDR
// unfoged = false ;
18253: LD_ADDR_LOC 32
18257: PUSH
18258: LD_INT 0
18260: ST_TO_ADDR
// defeated_specs := [ ] ;
18261: LD_ADDR_LOC 33
18265: PUSH
18266: EMPTY
18267: ST_TO_ADDR
// for i = 1 to side_positions do
18268: LD_ADDR_VAR 0 2
18272: PUSH
18273: DOUBLE
18274: LD_INT 1
18276: DEC
18277: ST_TO_ADDR
18278: LD_EXP 23
18282: PUSH
18283: FOR_TO
18284: IFFALSE 18324
// if not side_positions [ i ] then
18286: LD_EXP 23
18290: PUSH
18291: LD_VAR 0 2
18295: ARRAY
18296: NOT
18297: IFFALSE 18322
// defeated = replace ( defeated , i , true ) ;
18299: LD_ADDR_LOC 30
18303: PUSH
18304: LD_LOC 30
18308: PPUSH
18309: LD_VAR 0 2
18313: PPUSH
18314: LD_INT 1
18316: PPUSH
18317: CALL_OW 1
18321: ST_TO_ADDR
18322: GO 18283
18324: POP
18325: POP
// end ;
18326: LD_VAR 0 1
18330: RET
// function CanWinLoose ; begin
18331: LD_INT 0
18333: PPUSH
// Result := true ;
18334: LD_ADDR_VAR 0 1
18338: PUSH
18339: LD_INT 1
18341: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
18342: CALL_OW 518
18346: PUSH
18347: CALL_OW 519
18351: PUSH
18352: LD_INT 0
18354: GREATER
18355: AND
18356: IFFALSE 18366
// Result := false ;
18358: LD_ADDR_VAR 0 1
18362: PUSH
18363: LD_INT 0
18365: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18366: CALL_OW 531
18370: PUSH
18371: CALL_OW 519
18375: PUSH
18376: LD_INT 1
18378: GREATER
18379: AND
18380: IFFALSE 18390
// Result := false ;
18382: LD_ADDR_VAR 0 1
18386: PUSH
18387: LD_INT 0
18389: ST_TO_ADDR
// end ;
18390: LD_VAR 0 1
18394: RET
// export function HasPower ( i ) ; var k , h ; begin
18395: LD_INT 0
18397: PPUSH
18398: PPUSH
18399: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18400: LD_VAR 0 1
18404: PPUSH
18405: CALL_OW 108
18409: NOT
18410: PUSH
18411: LD_EXP 26
18415: PUSH
18416: LD_VAR 0 1
18420: ARRAY
18421: NOT
18422: AND
18423: PUSH
18424: LD_OWVAR 4
18428: AND
18429: IFFALSE 18441
// begin result = false ;
18431: LD_ADDR_VAR 0 2
18435: PUSH
18436: LD_INT 0
18438: ST_TO_ADDR
// end else
18439: GO 18736
// case def_win_rules of 0 :
18441: LD_EXP 19
18445: PUSH
18446: LD_INT 0
18448: DOUBLE
18449: EQUAL
18450: IFTRUE 18454
18452: GO 18617
18454: POP
// if def_people_respawning then
18455: LD_EXP 58
18459: IFFALSE 18550
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
18461: LD_ADDR_VAR 0 2
18465: PUSH
18466: LD_INT 22
18468: PUSH
18469: LD_VAR 0 1
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 2
18480: PUSH
18481: LD_INT 21
18483: PUSH
18484: LD_INT 1
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 33
18493: PUSH
18494: LD_INT 3
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 33
18503: PUSH
18504: LD_INT 5
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 30
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 30
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PPUSH
18543: CALL_OW 69
18547: ST_TO_ADDR
18548: GO 18615
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18550: LD_ADDR_VAR 0 2
18554: PUSH
18555: LD_INT 22
18557: PUSH
18558: LD_VAR 0 1
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 2
18569: PUSH
18570: LD_INT 21
18572: PUSH
18573: LD_INT 1
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 33
18582: PUSH
18583: LD_INT 3
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 33
18592: PUSH
18593: LD_INT 5
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PPUSH
18610: CALL_OW 69
18614: ST_TO_ADDR
18615: GO 18736
18617: LD_INT 1
18619: DOUBLE
18620: EQUAL
18621: IFTRUE 18625
18623: GO 18664
18625: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
18626: LD_ADDR_VAR 0 2
18630: PUSH
18631: LD_INT 22
18633: PUSH
18634: LD_VAR 0 1
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 21
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PPUSH
18657: CALL_OW 69
18661: ST_TO_ADDR
18662: GO 18736
18664: LD_INT 2
18666: DOUBLE
18667: EQUAL
18668: IFTRUE 18672
18670: GO 18735
18672: POP
// begin h = false ;
18673: LD_ADDR_VAR 0 4
18677: PUSH
18678: LD_INT 0
18680: ST_TO_ADDR
// for k in heroes [ i ] do
18681: LD_ADDR_VAR 0 3
18685: PUSH
18686: LD_EXP 34
18690: PUSH
18691: LD_VAR 0 1
18695: ARRAY
18696: PUSH
18697: FOR_IN
18698: IFFALSE 18721
// if IsLive ( k ) then
18700: LD_VAR 0 3
18704: PPUSH
18705: CALL_OW 300
18709: IFFALSE 18719
// h = true ;
18711: LD_ADDR_VAR 0 4
18715: PUSH
18716: LD_INT 1
18718: ST_TO_ADDR
18719: GO 18697
18721: POP
18722: POP
// Result := h ;
18723: LD_ADDR_VAR 0 2
18727: PUSH
18728: LD_VAR 0 4
18732: ST_TO_ADDR
// end ; end ;
18733: GO 18736
18735: POP
// end ;
18736: LD_VAR 0 2
18740: RET
// function AlliedSides ( i , j ) ; begin
18741: LD_INT 0
18743: PPUSH
// Result := false ;
18744: LD_ADDR_VAR 0 3
18748: PUSH
18749: LD_INT 0
18751: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
18752: LD_VAR 0 1
18756: PPUSH
18757: LD_VAR 0 2
18761: PPUSH
18762: CALL_OW 81
18766: PUSH
18767: LD_INT 1
18769: EQUAL
18770: PUSH
18771: LD_VAR 0 2
18775: PPUSH
18776: LD_VAR 0 1
18780: PPUSH
18781: CALL_OW 81
18785: PUSH
18786: LD_INT 1
18788: EQUAL
18789: AND
18790: PUSH
18791: LD_VAR 0 1
18795: PPUSH
18796: CALL_OW 83
18800: AND
18801: PUSH
18802: LD_VAR 0 2
18806: PPUSH
18807: CALL_OW 83
18811: AND
18812: IFFALSE 18822
// Result := true ;
18814: LD_ADDR_VAR 0 3
18818: PUSH
18819: LD_INT 1
18821: ST_TO_ADDR
// end ;
18822: LD_VAR 0 3
18826: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
18827: CALL 18331 0 0
18831: PUSH
18832: LD_LOC 31
18836: NOT
18837: AND
18838: IFFALSE 18854
18840: GO 18842
18842: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
18843: LD_ADDR_EXP 64
18847: PUSH
18848: LD_STRING #Player-Ended
18850: PUSH
18851: EMPTY
18852: LIST
18853: ST_TO_ADDR
18854: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
18855: CALL 18331 0 0
18859: PUSH
18860: LD_LOC 31
18864: AND
18865: IFFALSE 18874
18867: GO 18869
18869: DISABLE
// YouLostInMultiplayer ;
18870: CALL_OW 107
18874: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
18875: CALL 18331 0 0
18879: NOT
18880: PUSH
18881: CALL_OW 531
18885: NOT
18886: AND
18887: IFFALSE 18903
18889: GO 18891
18891: DISABLE
// WaitServerStrings = [ #server-wait ] ;
18892: LD_ADDR_EXP 64
18896: PUSH
18897: LD_STRING #server-wait
18899: PUSH
18900: EMPTY
18901: LIST
18902: ST_TO_ADDR
18903: END
// every 100 trigger IAmSpec do
18904: CALL_OW 531
18908: IFFALSE 18924
18910: GO 18912
18912: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
18913: LD_ADDR_EXP 64
18917: PUSH
18918: LD_STRING #Player-IAmSpec
18920: PUSH
18921: EMPTY
18922: LIST
18923: ST_TO_ADDR
18924: END
// every 100 trigger GameEnded and IAmSpec do
18925: LD_LOC 31
18929: PUSH
18930: CALL_OW 531
18934: AND
18935: IFFALSE 18944
18937: GO 18939
18939: DISABLE
// YouLostInMultiplayer ;
18940: CALL_OW 107
18944: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
18945: CALL 18331 0 0
18949: PUSH
18950: LD_LOC 31
18954: NOT
18955: AND
18956: IFFALSE 18972
18958: GO 18960
18960: DISABLE
// WaitServerStrings = [ $player-win ] ;
18961: LD_ADDR_EXP 64
18965: PUSH
18966: LD_STRING $player-win
18968: PUSH
18969: EMPTY
18970: LIST
18971: ST_TO_ADDR
18972: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
18973: CALL 18331 0 0
18977: PUSH
18978: LD_LOC 31
18982: AND
18983: IFFALSE 19007
18985: GO 18987
18987: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
18988: LD_EXP 24
18992: PUSH
18993: LD_OWVAR 7
18997: ARRAY
18998: PPUSH
18999: CALL 18002 0 1
// YouWinInMultiplayer ;
19003: CALL_OW 106
// end ;
19007: END
// every 100 trigger isEditor marked 401 do
19008: LD_OWVAR 84
19012: IFFALSE 19028
19014: GO 19016
19016: DISABLE
// Debug_Strings = [ You won ] ;
19017: LD_ADDR_OWVAR 48
19021: PUSH
19022: LD_STRING You won
19024: PUSH
19025: EMPTY
19026: LIST
19027: ST_TO_ADDR
19028: END
// every 100 trigger isEditor marked 400 do
19029: LD_OWVAR 84
19033: IFFALSE 19049
19035: GO 19037
19037: DISABLE
// Debug_Strings = [ You loss ] ;
19038: LD_ADDR_OWVAR 48
19042: PUSH
19043: LD_STRING You loss
19045: PUSH
19046: EMPTY
19047: LIST
19048: ST_TO_ADDR
19049: END
// every 100 marked 98 do var i , un ;
19050: GO 19052
19052: DISABLE
19053: LD_INT 0
19055: PPUSH
19056: PPUSH
// begin for i = 1 to side_positions do
19057: LD_ADDR_VAR 0 1
19061: PUSH
19062: DOUBLE
19063: LD_INT 1
19065: DEC
19066: ST_TO_ADDR
19067: LD_EXP 23
19071: PUSH
19072: FOR_TO
19073: IFFALSE 19160
// begin if side_positions [ i ] then
19075: LD_EXP 23
19079: PUSH
19080: LD_VAR 0 1
19084: ARRAY
19085: IFFALSE 19158
// if not HasPower ( i ) and not defeated [ i ] then
19087: LD_VAR 0 1
19091: PPUSH
19092: CALL 18395 0 1
19096: NOT
19097: PUSH
19098: LD_LOC 30
19102: PUSH
19103: LD_VAR 0 1
19107: ARRAY
19108: NOT
19109: AND
19110: IFFALSE 19158
// begin defeated = replace ( defeated , i , true ) ;
19112: LD_ADDR_LOC 30
19116: PUSH
19117: LD_LOC 30
19121: PPUSH
19122: LD_VAR 0 1
19126: PPUSH
19127: LD_INT 1
19129: PPUSH
19130: CALL_OW 1
19134: ST_TO_ADDR
// if i = mp_player_side then
19135: LD_VAR 0 1
19139: PUSH
19140: LD_OWVAR 7
19144: EQUAL
19145: IFFALSE 19158
// begin Multiplayer_Loose_Message ;
19147: CALL_OW 521
// SetPlayerSpectator ( ) ;
19151: CALL_OW 572
// enable ( 400 ) ;
19155: LD_INT 400
19157: ENABLE_MARKED
// end ; end ; end ;
19158: GO 19072
19160: POP
19161: POP
// DidGameEnd ;
19162: CALL 19177 0 0
// if not GameEnded then
19166: LD_LOC 31
19170: NOT
19171: IFFALSE 19174
// enable ;
19173: ENABLE
// end ;
19174: PPOPN 2
19176: END
// function DidGameEnd ; var i , k , enemy ; begin
19177: LD_INT 0
19179: PPUSH
19180: PPUSH
19181: PPUSH
19182: PPUSH
// enemy = [ ] ;
19183: LD_ADDR_VAR 0 4
19187: PUSH
19188: EMPTY
19189: ST_TO_ADDR
// for i = 1 to side_positions do
19190: LD_ADDR_VAR 0 2
19194: PUSH
19195: DOUBLE
19196: LD_INT 1
19198: DEC
19199: ST_TO_ADDR
19200: LD_EXP 23
19204: PUSH
19205: FOR_TO
19206: IFFALSE 19300
// if not defeated [ i ] then
19208: LD_LOC 30
19212: PUSH
19213: LD_VAR 0 2
19217: ARRAY
19218: NOT
19219: IFFALSE 19298
// for k = 1 to side_positions do
19221: LD_ADDR_VAR 0 3
19225: PUSH
19226: DOUBLE
19227: LD_INT 1
19229: DEC
19230: ST_TO_ADDR
19231: LD_EXP 23
19235: PUSH
19236: FOR_TO
19237: IFFALSE 19296
// if not defeated [ k ] then
19239: LD_LOC 30
19243: PUSH
19244: LD_VAR 0 3
19248: ARRAY
19249: NOT
19250: IFFALSE 19294
// if not AlliedSides ( i , k ) then
19252: LD_VAR 0 2
19256: PPUSH
19257: LD_VAR 0 3
19261: PPUSH
19262: CALL 18741 0 2
19266: NOT
19267: IFFALSE 19294
// enemy = enemy ^ [ i , k ] ;
19269: LD_ADDR_VAR 0 4
19273: PUSH
19274: LD_VAR 0 4
19278: PUSH
19279: LD_VAR 0 2
19283: PUSH
19284: LD_VAR 0 3
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: ADD
19293: ST_TO_ADDR
19294: GO 19236
19296: POP
19297: POP
19298: GO 19205
19300: POP
19301: POP
// if not enemy then
19302: LD_VAR 0 4
19306: NOT
19307: IFFALSE 19333
// begin GameEnded = true ;
19309: LD_ADDR_LOC 31
19313: PUSH
19314: LD_INT 1
19316: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
19317: LD_LOC 30
19321: PUSH
19322: LD_OWVAR 7
19326: ARRAY
19327: NOT
19328: IFFALSE 19333
// enable ( 401 ) ;
19330: LD_INT 401
19332: ENABLE_MARKED
// end ; end ;
19333: LD_VAR 0 1
19337: RET
// function unfog ; var k , friends ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
19342: PPUSH
// for k = 1 to side_positions do
19343: LD_ADDR_VAR 0 2
19347: PUSH
19348: DOUBLE
19349: LD_INT 1
19351: DEC
19352: ST_TO_ADDR
19353: LD_EXP 23
19357: PUSH
19358: FOR_TO
19359: IFFALSE 19415
// if not defeated [ k ] then
19361: LD_LOC 30
19365: PUSH
19366: LD_VAR 0 2
19370: ARRAY
19371: NOT
19372: IFFALSE 19413
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
19374: LD_OWVAR 7
19378: PPUSH
19379: LD_VAR 0 2
19383: PPUSH
19384: CALL_OW 81
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: IN
19395: IFFALSE 19413
// friends = friends ^ k ;
19397: LD_ADDR_VAR 0 3
19401: PUSH
19402: LD_VAR 0 3
19406: PUSH
19407: LD_VAR 0 2
19411: ADD
19412: ST_TO_ADDR
19413: GO 19358
19415: POP
19416: POP
// if not friends then
19417: LD_VAR 0 3
19421: NOT
19422: IFFALSE 19436
// begin SetPlayerSpectator ( ) ;
19424: CALL_OW 572
// unfoged = true ;
19428: LD_ADDR_LOC 32
19432: PUSH
19433: LD_INT 1
19435: ST_TO_ADDR
// end ; end ;
19436: LD_VAR 0 1
19440: RET
// export function MakeGameEnd ; begin
19441: LD_INT 0
19443: PPUSH
// SetPlayerSpectator ( ) ;
19444: CALL_OW 572
// unfoged = true ;
19448: LD_ADDR_LOC 32
19452: PUSH
19453: LD_INT 1
19455: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19456: LD_INT 175
19458: PPUSH
19459: CALL_OW 67
// GameEnded = true ;
19463: LD_ADDR_LOC 31
19467: PUSH
19468: LD_INT 1
19470: ST_TO_ADDR
// end ;
19471: LD_VAR 0 1
19475: RET
// export function GetGameEnded ; begin
19476: LD_INT 0
19478: PPUSH
// result = GameEnded ;
19479: LD_ADDR_VAR 0 1
19483: PUSH
19484: LD_LOC 31
19488: ST_TO_ADDR
// end ; end_of_file
19489: LD_VAR 0 1
19493: RET
// var win ; export function init_kings_counting ; var i ; begin
19494: LD_INT 0
19496: PPUSH
19497: PPUSH
// mp_with_score := true ;
19498: LD_ADDR_OWVAR 14
19502: PUSH
19503: LD_INT 1
19505: ST_TO_ADDR
// ResetMultiScore ;
19506: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19510: LD_INT 19
19512: PPUSH
19513: LD_INT 1
19515: PPUSH
19516: CALL_OW 424
// enable ( 2 ) ;
19520: LD_INT 2
19522: ENABLE_MARKED
// end ;
19523: LD_VAR 0 1
19527: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19528: LD_INT 0
19530: PPUSH
19531: PPUSH
19532: PPUSH
19533: PPUSH
19534: PPUSH
19535: PPUSH
19536: PPUSH
19537: PPUSH
19538: PPUSH
// vypis := [ ] ;
19539: LD_ADDR_VAR 0 3
19543: PUSH
19544: EMPTY
19545: ST_TO_ADDR
// red = 0 ;
19546: LD_ADDR_VAR 0 5
19550: PUSH
19551: LD_INT 0
19553: ST_TO_ADDR
// blue = 0 ;
19554: LD_ADDR_VAR 0 6
19558: PUSH
19559: LD_INT 0
19561: ST_TO_ADDR
// yel = 0 ;
19562: LD_ADDR_VAR 0 7
19566: PUSH
19567: LD_INT 0
19569: ST_TO_ADDR
// green = 0 ;
19570: LD_ADDR_VAR 0 8
19574: PUSH
19575: LD_INT 0
19577: ST_TO_ADDR
// if def_public_score or isSGUI then
19578: LD_EXP 6
19582: PUSH
19583: LD_OWVAR 83
19587: OR
19588: IFFALSE 20185
// if not Team_Game then
19590: LD_EXP 25
19594: NOT
19595: IFFALSE 19717
// begin for side = 1 to Side_Positions do
19597: LD_ADDR_VAR 0 2
19601: PUSH
19602: DOUBLE
19603: LD_INT 1
19605: DEC
19606: ST_TO_ADDR
19607: LD_EXP 23
19611: PUSH
19612: FOR_TO
19613: IFFALSE 19713
// if Side_Positions [ side ] then
19615: LD_EXP 23
19619: PUSH
19620: LD_VAR 0 2
19624: ARRAY
19625: IFFALSE 19711
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
19627: LD_ADDR_VAR 0 3
19631: PUSH
19632: LD_VAR 0 3
19636: PUSH
19637: LD_STRING #KingoftheHill-Public
19639: PUSH
19640: LD_VAR 0 2
19644: PUSH
19645: LD_VAR 0 2
19649: PUSH
19650: LD_VAR 0 2
19654: PUSH
19655: LD_INT 10
19657: PLUS
19658: PPUSH
19659: CALL_OW 110
19663: PUSH
19664: LD_INT 3
19666: DIV
19667: PUSH
19668: LD_EXP 20
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: ADD
19680: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
19681: LD_INT 2
19683: PPUSH
19684: LD_VAR 0 2
19688: PPUSH
19689: LD_VAR 0 2
19693: PUSH
19694: LD_INT 10
19696: PLUS
19697: PPUSH
19698: CALL_OW 110
19702: PUSH
19703: LD_INT 3
19705: DIV
19706: PPUSH
19707: CALL 27087 0 3
// end ;
19711: GO 19612
19713: POP
19714: POP
// end else
19715: GO 20183
// begin if Teams [ 1 ] then
19717: LD_EXP 22
19721: PUSH
19722: LD_INT 1
19724: ARRAY
19725: IFFALSE 19777
// for i in Teams [ 1 ] do
19727: LD_ADDR_VAR 0 4
19731: PUSH
19732: LD_EXP 22
19736: PUSH
19737: LD_INT 1
19739: ARRAY
19740: PUSH
19741: FOR_IN
19742: IFFALSE 19775
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19744: LD_ADDR_VAR 0 5
19748: PUSH
19749: LD_VAR 0 5
19753: PUSH
19754: LD_VAR 0 4
19758: PUSH
19759: LD_INT 10
19761: PLUS
19762: PPUSH
19763: CALL_OW 110
19767: PUSH
19768: LD_INT 3
19770: DIV
19771: PLUS
19772: ST_TO_ADDR
19773: GO 19741
19775: POP
19776: POP
// if Teams [ 2 ] then
19777: LD_EXP 22
19781: PUSH
19782: LD_INT 2
19784: ARRAY
19785: IFFALSE 19837
// for i in Teams [ 2 ] do
19787: LD_ADDR_VAR 0 4
19791: PUSH
19792: LD_EXP 22
19796: PUSH
19797: LD_INT 2
19799: ARRAY
19800: PUSH
19801: FOR_IN
19802: IFFALSE 19835
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19804: LD_ADDR_VAR 0 6
19808: PUSH
19809: LD_VAR 0 6
19813: PUSH
19814: LD_VAR 0 4
19818: PUSH
19819: LD_INT 10
19821: PLUS
19822: PPUSH
19823: CALL_OW 110
19827: PUSH
19828: LD_INT 3
19830: DIV
19831: PLUS
19832: ST_TO_ADDR
19833: GO 19801
19835: POP
19836: POP
// if Teams [ 3 ] then
19837: LD_EXP 22
19841: PUSH
19842: LD_INT 3
19844: ARRAY
19845: IFFALSE 19897
// for i in Teams [ 3 ] do
19847: LD_ADDR_VAR 0 4
19851: PUSH
19852: LD_EXP 22
19856: PUSH
19857: LD_INT 3
19859: ARRAY
19860: PUSH
19861: FOR_IN
19862: IFFALSE 19895
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
19864: LD_ADDR_VAR 0 7
19868: PUSH
19869: LD_VAR 0 7
19873: PUSH
19874: LD_VAR 0 4
19878: PUSH
19879: LD_INT 10
19881: PLUS
19882: PPUSH
19883: CALL_OW 110
19887: PUSH
19888: LD_INT 3
19890: DIV
19891: PLUS
19892: ST_TO_ADDR
19893: GO 19861
19895: POP
19896: POP
// if Teams [ 4 ] then
19897: LD_EXP 22
19901: PUSH
19902: LD_INT 4
19904: ARRAY
19905: IFFALSE 19957
// for i in Teams [ 4 ] do
19907: LD_ADDR_VAR 0 4
19911: PUSH
19912: LD_EXP 22
19916: PUSH
19917: LD_INT 4
19919: ARRAY
19920: PUSH
19921: FOR_IN
19922: IFFALSE 19955
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
19924: LD_ADDR_VAR 0 8
19928: PUSH
19929: LD_VAR 0 8
19933: PUSH
19934: LD_VAR 0 4
19938: PUSH
19939: LD_INT 10
19941: PLUS
19942: PPUSH
19943: CALL_OW 110
19947: PUSH
19948: LD_INT 3
19950: DIV
19951: PLUS
19952: ST_TO_ADDR
19953: GO 19921
19955: POP
19956: POP
// if Teams [ 1 ] then
19957: LD_EXP 22
19961: PUSH
19962: LD_INT 1
19964: ARRAY
19965: IFFALSE 19994
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
19967: LD_ADDR_VAR 0 3
19971: PUSH
19972: LD_STRING #KingoftheHill-Public-red
19974: PUSH
19975: LD_INT 3
19977: PUSH
19978: LD_VAR 0 5
19982: PUSH
19983: LD_EXP 20
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: ST_TO_ADDR
// if Teams [ 2 ] then
19994: LD_EXP 22
19998: PUSH
19999: LD_INT 2
20001: ARRAY
20002: IFFALSE 20037
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20004: LD_ADDR_VAR 0 3
20008: PUSH
20009: LD_VAR 0 3
20013: PUSH
20014: LD_STRING #KingoftheHill-Public-blue
20016: PUSH
20017: LD_INT 1
20019: PUSH
20020: LD_VAR 0 6
20024: PUSH
20025: LD_EXP 20
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: ADD
20036: ST_TO_ADDR
// if Teams [ 3 ] then
20037: LD_EXP 22
20041: PUSH
20042: LD_INT 3
20044: ARRAY
20045: IFFALSE 20080
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20047: LD_ADDR_VAR 0 3
20051: PUSH
20052: LD_VAR 0 3
20056: PUSH
20057: LD_STRING #KingoftheHill-Public-yell
20059: PUSH
20060: LD_INT 2
20062: PUSH
20063: LD_VAR 0 7
20067: PUSH
20068: LD_EXP 20
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: ADD
20079: ST_TO_ADDR
// if Teams [ 4 ] then
20080: LD_EXP 22
20084: PUSH
20085: LD_INT 4
20087: ARRAY
20088: IFFALSE 20123
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20090: LD_ADDR_VAR 0 3
20094: PUSH
20095: LD_VAR 0 3
20099: PUSH
20100: LD_STRING #KingoftheHill-Public-green
20102: PUSH
20103: LD_INT 7
20105: PUSH
20106: LD_VAR 0 8
20110: PUSH
20111: LD_EXP 20
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: ADD
20122: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
20123: LD_INT 2
20125: PPUSH
20126: LD_INT 3
20128: PPUSH
20129: LD_VAR 0 5
20133: PPUSH
20134: CALL 27087 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
20138: LD_INT 2
20140: PPUSH
20141: LD_INT 1
20143: PPUSH
20144: LD_VAR 0 6
20148: PPUSH
20149: CALL 27087 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
20153: LD_INT 2
20155: PPUSH
20156: LD_INT 2
20158: PPUSH
20159: LD_VAR 0 7
20163: PPUSH
20164: CALL 27087 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
20168: LD_INT 2
20170: PPUSH
20171: LD_INT 7
20173: PPUSH
20174: LD_VAR 0 8
20178: PPUSH
20179: CALL 27087 0 3
// end else
20183: GO 20620
// if not Team_Game then
20185: LD_EXP 25
20189: NOT
20190: IFFALSE 20248
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
20192: LD_ADDR_VAR 0 3
20196: PUSH
20197: LD_VAR 0 3
20201: PUSH
20202: LD_STRING #KingoftheHill-Private
20204: PUSH
20205: LD_OWVAR 7
20209: PUSH
20210: LD_OWVAR 7
20214: PUSH
20215: LD_VAR 0 2
20219: PUSH
20220: LD_INT 10
20222: PLUS
20223: PPUSH
20224: CALL_OW 110
20228: PUSH
20229: LD_INT 3
20231: DIV
20232: PUSH
20233: LD_EXP 20
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: ADD
20245: ST_TO_ADDR
20246: GO 20620
// begin for i in Teams [ 1 ] do
20248: LD_ADDR_VAR 0 4
20252: PUSH
20253: LD_EXP 22
20257: PUSH
20258: LD_INT 1
20260: ARRAY
20261: PUSH
20262: FOR_IN
20263: IFFALSE 20296
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20265: LD_ADDR_VAR 0 5
20269: PUSH
20270: LD_VAR 0 5
20274: PUSH
20275: LD_VAR 0 4
20279: PUSH
20280: LD_INT 10
20282: PLUS
20283: PPUSH
20284: CALL_OW 110
20288: PUSH
20289: LD_INT 3
20291: DIV
20292: PLUS
20293: ST_TO_ADDR
20294: GO 20262
20296: POP
20297: POP
// for i in Teams [ 2 ] do
20298: LD_ADDR_VAR 0 4
20302: PUSH
20303: LD_EXP 22
20307: PUSH
20308: LD_INT 2
20310: ARRAY
20311: PUSH
20312: FOR_IN
20313: IFFALSE 20346
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20315: LD_ADDR_VAR 0 6
20319: PUSH
20320: LD_VAR 0 6
20324: PUSH
20325: LD_VAR 0 4
20329: PUSH
20330: LD_INT 10
20332: PLUS
20333: PPUSH
20334: CALL_OW 110
20338: PUSH
20339: LD_INT 3
20341: DIV
20342: PLUS
20343: ST_TO_ADDR
20344: GO 20312
20346: POP
20347: POP
// for i in Teams [ 3 ] do
20348: LD_ADDR_VAR 0 4
20352: PUSH
20353: LD_EXP 22
20357: PUSH
20358: LD_INT 3
20360: ARRAY
20361: PUSH
20362: FOR_IN
20363: IFFALSE 20396
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20365: LD_ADDR_VAR 0 7
20369: PUSH
20370: LD_VAR 0 7
20374: PUSH
20375: LD_VAR 0 4
20379: PUSH
20380: LD_INT 10
20382: PLUS
20383: PPUSH
20384: CALL_OW 110
20388: PUSH
20389: LD_INT 3
20391: DIV
20392: PLUS
20393: ST_TO_ADDR
20394: GO 20362
20396: POP
20397: POP
// for i in Teams [ 4 ] do
20398: LD_ADDR_VAR 0 4
20402: PUSH
20403: LD_EXP 22
20407: PUSH
20408: LD_INT 4
20410: ARRAY
20411: PUSH
20412: FOR_IN
20413: IFFALSE 20446
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20415: LD_ADDR_VAR 0 8
20419: PUSH
20420: LD_VAR 0 8
20424: PUSH
20425: LD_VAR 0 4
20429: PUSH
20430: LD_INT 10
20432: PLUS
20433: PPUSH
20434: CALL_OW 110
20438: PUSH
20439: LD_INT 3
20441: DIV
20442: PLUS
20443: ST_TO_ADDR
20444: GO 20412
20446: POP
20447: POP
// if mp_player_side in Teams [ 1 ] then
20448: LD_OWVAR 7
20452: PUSH
20453: LD_EXP 22
20457: PUSH
20458: LD_INT 1
20460: ARRAY
20461: IN
20462: IFFALSE 20491
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20464: LD_ADDR_VAR 0 3
20468: PUSH
20469: LD_STRING #KingoftheHill-Public-red
20471: PUSH
20472: LD_INT 3
20474: PUSH
20475: LD_VAR 0 5
20479: PUSH
20480: LD_EXP 20
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
20491: LD_OWVAR 7
20495: PUSH
20496: LD_EXP 22
20500: PUSH
20501: LD_INT 2
20503: ARRAY
20504: IN
20505: IFFALSE 20534
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20507: LD_ADDR_VAR 0 3
20511: PUSH
20512: LD_STRING #KingoftheHill-Public-blue
20514: PUSH
20515: LD_INT 1
20517: PUSH
20518: LD_VAR 0 6
20522: PUSH
20523: LD_EXP 20
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
20534: LD_OWVAR 7
20538: PUSH
20539: LD_EXP 22
20543: PUSH
20544: LD_INT 3
20546: ARRAY
20547: IN
20548: IFFALSE 20577
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20550: LD_ADDR_VAR 0 3
20554: PUSH
20555: LD_STRING #KingoftheHill-Public-yell
20557: PUSH
20558: LD_INT 2
20560: PUSH
20561: LD_VAR 0 7
20565: PUSH
20566: LD_EXP 20
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
20577: LD_OWVAR 7
20581: PUSH
20582: LD_EXP 22
20586: PUSH
20587: LD_INT 4
20589: ARRAY
20590: IN
20591: IFFALSE 20620
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20593: LD_ADDR_VAR 0 3
20597: PUSH
20598: LD_STRING #KingoftheHill-Public-green
20600: PUSH
20601: LD_INT 7
20603: PUSH
20604: LD_VAR 0 8
20608: PUSH
20609: LD_EXP 20
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: ST_TO_ADDR
// end ; Display_kings := vypis ;
20620: LD_ADDR_EXP 65
20624: PUSH
20625: LD_VAR 0 3
20629: ST_TO_ADDR
// end ;
20630: LD_VAR 0 1
20634: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
20635: LD_INT 0
20637: PPUSH
20638: PPUSH
20639: PPUSH
20640: PPUSH
20641: PPUSH
20642: PPUSH
20643: PPUSH
20644: PPUSH
20645: PPUSH
// side := [ ] ;
20646: LD_ADDR_VAR 0 2
20650: PUSH
20651: EMPTY
20652: ST_TO_ADDR
// red = 0 ;
20653: LD_ADDR_VAR 0 5
20657: PUSH
20658: LD_INT 0
20660: ST_TO_ADDR
// blue = 0 ;
20661: LD_ADDR_VAR 0 6
20665: PUSH
20666: LD_INT 0
20668: ST_TO_ADDR
// yel = 0 ;
20669: LD_ADDR_VAR 0 7
20673: PUSH
20674: LD_INT 0
20676: ST_TO_ADDR
// green = 0 ;
20677: LD_ADDR_VAR 0 8
20681: PUSH
20682: LD_INT 0
20684: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
20685: LD_ADDR_VAR 0 3
20689: PUSH
20690: LD_INT 19
20692: PPUSH
20693: LD_INT 21
20695: PUSH
20696: LD_INT 3
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 53
20705: PUSH
20706: EMPTY
20707: LIST
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PPUSH
20713: CALL_OW 70
20717: ST_TO_ADDR
// for un in list do
20718: LD_ADDR_VAR 0 4
20722: PUSH
20723: LD_VAR 0 3
20727: PUSH
20728: FOR_IN
20729: IFFALSE 20754
// side := side union GetSide ( un ) ;
20731: LD_ADDR_VAR 0 2
20735: PUSH
20736: LD_VAR 0 2
20740: PUSH
20741: LD_VAR 0 4
20745: PPUSH
20746: CALL_OW 255
20750: UNION
20751: ST_TO_ADDR
20752: GO 20728
20754: POP
20755: POP
// if side <> 1 then
20756: LD_VAR 0 2
20760: PUSH
20761: LD_INT 1
20763: NONEQUAL
20764: IFFALSE 20768
// exit ;
20766: GO 21131
// side := side [ 1 ] ;
20768: LD_ADDR_VAR 0 2
20772: PUSH
20773: LD_VAR 0 2
20777: PUSH
20778: LD_INT 1
20780: ARRAY
20781: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
20782: LD_VAR 0 2
20786: PUSH
20787: LD_INT 10
20789: PLUS
20790: PPUSH
20791: LD_VAR 0 2
20795: PUSH
20796: LD_INT 10
20798: PLUS
20799: PPUSH
20800: CALL_OW 110
20804: PUSH
20805: LD_INT 1
20807: PLUS
20808: PPUSH
20809: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
20813: LD_VAR 0 2
20817: PPUSH
20818: LD_VAR 0 2
20822: PUSH
20823: LD_INT 10
20825: PLUS
20826: PPUSH
20827: CALL_OW 110
20831: PUSH
20832: LD_INT 3
20834: DIV
20835: PPUSH
20836: LD_INT 2
20838: PPUSH
20839: CALL 17185 0 3
// if not Team_Game then
20843: LD_EXP 25
20847: NOT
20848: IFFALSE 21131
// if GetTag ( side + 10 ) >= final_count * 3 then
20850: LD_VAR 0 2
20854: PUSH
20855: LD_INT 10
20857: PLUS
20858: PPUSH
20859: CALL_OW 110
20863: PUSH
20864: LD_EXP 20
20868: PUSH
20869: LD_INT 3
20871: MUL
20872: GREATEREQUAL
20873: IFFALSE 20880
// enable ( 3 ) else
20875: LD_INT 3
20877: ENABLE_MARKED
20878: GO 21131
// begin for i in Teams [ 1 ] do
20880: LD_ADDR_VAR 0 9
20884: PUSH
20885: LD_EXP 22
20889: PUSH
20890: LD_INT 1
20892: ARRAY
20893: PUSH
20894: FOR_IN
20895: IFFALSE 20928
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20897: LD_ADDR_VAR 0 5
20901: PUSH
20902: LD_VAR 0 5
20906: PUSH
20907: LD_VAR 0 9
20911: PUSH
20912: LD_INT 10
20914: PLUS
20915: PPUSH
20916: CALL_OW 110
20920: PUSH
20921: LD_INT 3
20923: DIV
20924: PLUS
20925: ST_TO_ADDR
20926: GO 20894
20928: POP
20929: POP
// for i in Teams [ 2 ] do
20930: LD_ADDR_VAR 0 9
20934: PUSH
20935: LD_EXP 22
20939: PUSH
20940: LD_INT 2
20942: ARRAY
20943: PUSH
20944: FOR_IN
20945: IFFALSE 20978
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20947: LD_ADDR_VAR 0 6
20951: PUSH
20952: LD_VAR 0 6
20956: PUSH
20957: LD_VAR 0 9
20961: PUSH
20962: LD_INT 10
20964: PLUS
20965: PPUSH
20966: CALL_OW 110
20970: PUSH
20971: LD_INT 3
20973: DIV
20974: PLUS
20975: ST_TO_ADDR
20976: GO 20944
20978: POP
20979: POP
// for i in Teams [ 3 ] do
20980: LD_ADDR_VAR 0 9
20984: PUSH
20985: LD_EXP 22
20989: PUSH
20990: LD_INT 3
20992: ARRAY
20993: PUSH
20994: FOR_IN
20995: IFFALSE 21028
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20997: LD_ADDR_VAR 0 7
21001: PUSH
21002: LD_VAR 0 7
21006: PUSH
21007: LD_VAR 0 9
21011: PUSH
21012: LD_INT 10
21014: PLUS
21015: PPUSH
21016: CALL_OW 110
21020: PUSH
21021: LD_INT 3
21023: DIV
21024: PLUS
21025: ST_TO_ADDR
21026: GO 20994
21028: POP
21029: POP
// for i in Teams [ 4 ] do
21030: LD_ADDR_VAR 0 9
21034: PUSH
21035: LD_EXP 22
21039: PUSH
21040: LD_INT 4
21042: ARRAY
21043: PUSH
21044: FOR_IN
21045: IFFALSE 21078
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21047: LD_ADDR_VAR 0 8
21051: PUSH
21052: LD_VAR 0 8
21056: PUSH
21057: LD_VAR 0 9
21061: PUSH
21062: LD_INT 10
21064: PLUS
21065: PPUSH
21066: CALL_OW 110
21070: PUSH
21071: LD_INT 3
21073: DIV
21074: PLUS
21075: ST_TO_ADDR
21076: GO 21044
21078: POP
21079: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
21080: LD_VAR 0 5
21084: PUSH
21085: LD_EXP 20
21089: GREATEREQUAL
21090: PUSH
21091: LD_VAR 0 6
21095: PUSH
21096: LD_EXP 20
21100: GREATEREQUAL
21101: OR
21102: PUSH
21103: LD_VAR 0 7
21107: PUSH
21108: LD_EXP 20
21112: GREATEREQUAL
21113: OR
21114: PUSH
21115: LD_VAR 0 8
21119: PUSH
21120: LD_EXP 20
21124: GREATEREQUAL
21125: OR
21126: IFFALSE 21131
// enable ( 3 ) ;
21128: LD_INT 3
21130: ENABLE_MARKED
// end ; end ;
21131: LD_VAR 0 1
21135: RET
// every 0 0$1 marked 2 do
21136: GO 21138
21138: DISABLE
// begin count_king ;
21139: CALL 20635 0 0
// show_public_points ;
21143: CALL 19528 0 0
// enable ;
21147: ENABLE
// end ;
21148: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
21149: GO 21151
21151: DISABLE
21152: LD_INT 0
21154: PPUSH
21155: PPUSH
21156: PPUSH
21157: PPUSH
21158: PPUSH
21159: PPUSH
// begin win := [ ] ;
21160: LD_ADDR_LOC 34
21164: PUSH
21165: EMPTY
21166: ST_TO_ADDR
// red = 0 ;
21167: LD_ADDR_VAR 0 2
21171: PUSH
21172: LD_INT 0
21174: ST_TO_ADDR
// blue = 0 ;
21175: LD_ADDR_VAR 0 3
21179: PUSH
21180: LD_INT 0
21182: ST_TO_ADDR
// yel = 0 ;
21183: LD_ADDR_VAR 0 4
21187: PUSH
21188: LD_INT 0
21190: ST_TO_ADDR
// green = 0 ;
21191: LD_ADDR_VAR 0 5
21195: PUSH
21196: LD_INT 0
21198: ST_TO_ADDR
// if not Team_Game then
21199: LD_EXP 25
21203: NOT
21204: IFFALSE 21281
// begin for side = 1 to 8 do
21206: LD_ADDR_VAR 0 1
21210: PUSH
21211: DOUBLE
21212: LD_INT 1
21214: DEC
21215: ST_TO_ADDR
21216: LD_INT 8
21218: PUSH
21219: FOR_TO
21220: IFFALSE 21265
// if GetTag ( side + 10 ) >= final_count * 3 then
21222: LD_VAR 0 1
21226: PUSH
21227: LD_INT 10
21229: PLUS
21230: PPUSH
21231: CALL_OW 110
21235: PUSH
21236: LD_EXP 20
21240: PUSH
21241: LD_INT 3
21243: MUL
21244: GREATEREQUAL
21245: IFFALSE 21263
// win := win ^ side ;
21247: LD_ADDR_LOC 34
21251: PUSH
21252: LD_LOC 34
21256: PUSH
21257: LD_VAR 0 1
21261: ADD
21262: ST_TO_ADDR
21263: GO 21219
21265: POP
21266: POP
// if win then
21267: LD_LOC 34
21271: IFFALSE 21278
// enable ( 4 ) else
21273: LD_INT 4
21275: ENABLE_MARKED
21276: GO 21279
// enable ;
21278: ENABLE
// end else
21279: GO 21597
// begin for i in Teams [ 1 ] do
21281: LD_ADDR_VAR 0 6
21285: PUSH
21286: LD_EXP 22
21290: PUSH
21291: LD_INT 1
21293: ARRAY
21294: PUSH
21295: FOR_IN
21296: IFFALSE 21329
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21298: LD_ADDR_VAR 0 2
21302: PUSH
21303: LD_VAR 0 2
21307: PUSH
21308: LD_VAR 0 6
21312: PUSH
21313: LD_INT 10
21315: PLUS
21316: PPUSH
21317: CALL_OW 110
21321: PUSH
21322: LD_INT 3
21324: DIV
21325: PLUS
21326: ST_TO_ADDR
21327: GO 21295
21329: POP
21330: POP
// for i in Teams [ 2 ] do
21331: LD_ADDR_VAR 0 6
21335: PUSH
21336: LD_EXP 22
21340: PUSH
21341: LD_INT 2
21343: ARRAY
21344: PUSH
21345: FOR_IN
21346: IFFALSE 21379
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21348: LD_ADDR_VAR 0 3
21352: PUSH
21353: LD_VAR 0 3
21357: PUSH
21358: LD_VAR 0 6
21362: PUSH
21363: LD_INT 10
21365: PLUS
21366: PPUSH
21367: CALL_OW 110
21371: PUSH
21372: LD_INT 3
21374: DIV
21375: PLUS
21376: ST_TO_ADDR
21377: GO 21345
21379: POP
21380: POP
// for i in Teams [ 3 ] do
21381: LD_ADDR_VAR 0 6
21385: PUSH
21386: LD_EXP 22
21390: PUSH
21391: LD_INT 3
21393: ARRAY
21394: PUSH
21395: FOR_IN
21396: IFFALSE 21429
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21398: LD_ADDR_VAR 0 4
21402: PUSH
21403: LD_VAR 0 4
21407: PUSH
21408: LD_VAR 0 6
21412: PUSH
21413: LD_INT 10
21415: PLUS
21416: PPUSH
21417: CALL_OW 110
21421: PUSH
21422: LD_INT 3
21424: DIV
21425: PLUS
21426: ST_TO_ADDR
21427: GO 21395
21429: POP
21430: POP
// for i in Teams [ 4 ] do
21431: LD_ADDR_VAR 0 6
21435: PUSH
21436: LD_EXP 22
21440: PUSH
21441: LD_INT 4
21443: ARRAY
21444: PUSH
21445: FOR_IN
21446: IFFALSE 21479
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21448: LD_ADDR_VAR 0 5
21452: PUSH
21453: LD_VAR 0 5
21457: PUSH
21458: LD_VAR 0 6
21462: PUSH
21463: LD_INT 10
21465: PLUS
21466: PPUSH
21467: CALL_OW 110
21471: PUSH
21472: LD_INT 3
21474: DIV
21475: PLUS
21476: ST_TO_ADDR
21477: GO 21445
21479: POP
21480: POP
// if red >= final_count then
21481: LD_VAR 0 2
21485: PUSH
21486: LD_EXP 20
21490: GREATEREQUAL
21491: IFFALSE 21507
// win = teams [ 1 ] ;
21493: LD_ADDR_LOC 34
21497: PUSH
21498: LD_EXP 22
21502: PUSH
21503: LD_INT 1
21505: ARRAY
21506: ST_TO_ADDR
// if blue >= final_count then
21507: LD_VAR 0 3
21511: PUSH
21512: LD_EXP 20
21516: GREATEREQUAL
21517: IFFALSE 21533
// win = teams [ 2 ] ;
21519: LD_ADDR_LOC 34
21523: PUSH
21524: LD_EXP 22
21528: PUSH
21529: LD_INT 2
21531: ARRAY
21532: ST_TO_ADDR
// if yel >= final_count then
21533: LD_VAR 0 4
21537: PUSH
21538: LD_EXP 20
21542: GREATEREQUAL
21543: IFFALSE 21559
// win = teams [ 3 ] ;
21545: LD_ADDR_LOC 34
21549: PUSH
21550: LD_EXP 22
21554: PUSH
21555: LD_INT 3
21557: ARRAY
21558: ST_TO_ADDR
// if green >= final_count then
21559: LD_VAR 0 5
21563: PUSH
21564: LD_EXP 20
21568: GREATEREQUAL
21569: IFFALSE 21585
// win = teams [ 4 ] ;
21571: LD_ADDR_LOC 34
21575: PUSH
21576: LD_EXP 22
21580: PUSH
21581: LD_INT 4
21583: ARRAY
21584: ST_TO_ADDR
// if win then
21585: LD_LOC 34
21589: IFFALSE 21596
// enable ( 4 ) else
21591: LD_INT 4
21593: ENABLE_MARKED
21594: GO 21597
// enable ;
21596: ENABLE
// end ; end ;
21597: PPOPN 6
21599: END
// every 0 0$1 marked 4 do
21600: GO 21602
21602: DISABLE
// begin if Player_Side in win then
21603: LD_EXP 27
21607: PUSH
21608: LD_LOC 34
21612: IN
21613: IFFALSE 21629
// begin wait ( 0 0$2 ) ;
21615: LD_INT 70
21617: PPUSH
21618: CALL_OW 67
// enable ( 401 ) ;
21622: LD_INT 401
21624: ENABLE_MARKED
// exit ;
21625: GO 21645
// end else
21627: GO 21645
// begin wait ( 0 0$2 ) ;
21629: LD_INT 70
21631: PPUSH
21632: CALL_OW 67
// Multiplayer_Loose_Message ;
21636: CALL_OW 521
// enable ( 400 ) ;
21640: LD_INT 400
21642: ENABLE_MARKED
// exit ;
21643: GO 21645
// end ; end ; end_of_file
21645: END
// export function SetMpTechs ( ) ; var side , i ; begin
21646: LD_INT 0
21648: PPUSH
21649: PPUSH
21650: PPUSH
// for side = 1 to 8 do
21651: LD_ADDR_VAR 0 2
21655: PUSH
21656: DOUBLE
21657: LD_INT 1
21659: DEC
21660: ST_TO_ADDR
21661: LD_INT 8
21663: PUSH
21664: FOR_TO
21665: IFFALSE 21786
// begin for i = 1 to 72 do
21667: LD_ADDR_VAR 0 3
21671: PUSH
21672: DOUBLE
21673: LD_INT 1
21675: DEC
21676: ST_TO_ADDR
21677: LD_INT 72
21679: PUSH
21680: FOR_TO
21681: IFFALSE 21712
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
21683: LD_VAR 0 3
21687: PPUSH
21688: LD_VAR 0 2
21692: PPUSH
21693: LD_INT 0
21695: PPUSH
21696: LD_VAR 0 3
21700: PPUSH
21701: CALL_OW 565
21705: PPUSH
21706: CALL_OW 322
21710: GO 21680
21712: POP
21713: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
21714: LD_INT 73
21716: PPUSH
21717: LD_VAR 0 2
21721: PPUSH
21722: LD_INT 0
21724: PPUSH
21725: LD_INT 25
21727: PPUSH
21728: CALL_OW 565
21732: PPUSH
21733: CALL_OW 322
// for i = 0 to 40 do
21737: LD_ADDR_VAR 0 3
21741: PUSH
21742: DOUBLE
21743: LD_INT 0
21745: DEC
21746: ST_TO_ADDR
21747: LD_INT 40
21749: PUSH
21750: FOR_TO
21751: IFFALSE 21782
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
21753: LD_VAR 0 3
21757: PPUSH
21758: LD_VAR 0 2
21762: PPUSH
21763: LD_INT 1
21765: PPUSH
21766: LD_VAR 0 3
21770: PPUSH
21771: CALL_OW 565
21775: PPUSH
21776: CALL_OW 324
21780: GO 21750
21782: POP
21783: POP
// end ;
21784: GO 21664
21786: POP
21787: POP
// end ;
21788: LD_VAR 0 1
21792: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
21793: LD_INT 0
21795: PPUSH
21796: PPUSH
21797: PPUSH
// for side = 1 to 8 do
21798: LD_ADDR_VAR 0 3
21802: PUSH
21803: DOUBLE
21804: LD_INT 1
21806: DEC
21807: ST_TO_ADDR
21808: LD_INT 8
21810: PUSH
21811: FOR_TO
21812: IFFALSE 25808
// begin for i = 1 to 73 do
21814: LD_ADDR_VAR 0 4
21818: PUSH
21819: DOUBLE
21820: LD_INT 1
21822: DEC
21823: ST_TO_ADDR
21824: LD_INT 73
21826: PUSH
21827: FOR_TO
21828: IFFALSE 21849
// SetTech ( i , side , state_disabled ) ;
21830: LD_VAR 0 4
21834: PPUSH
21835: LD_VAR 0 3
21839: PPUSH
21840: LD_INT 0
21842: PPUSH
21843: CALL_OW 322
21847: GO 21827
21849: POP
21850: POP
// for i = 0 to 40 do
21851: LD_ADDR_VAR 0 4
21855: PUSH
21856: DOUBLE
21857: LD_INT 0
21859: DEC
21860: ST_TO_ADDR
21861: LD_INT 40
21863: PUSH
21864: FOR_TO
21865: IFFALSE 21886
// SetRestrict ( i , side , false ) ;
21867: LD_VAR 0 4
21871: PPUSH
21872: LD_VAR 0 3
21876: PPUSH
21877: LD_INT 0
21879: PPUSH
21880: CALL_OW 324
21884: GO 21864
21886: POP
21887: POP
// case level of 1 :
21888: LD_VAR 0 1
21892: PUSH
21893: LD_INT 1
21895: DOUBLE
21896: EQUAL
21897: IFTRUE 21901
21899: GO 22054
21901: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21902: LD_INT 35
21904: PPUSH
21905: LD_VAR 0 3
21909: PPUSH
21910: LD_INT 1
21912: PPUSH
21913: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21917: LD_INT 45
21919: PPUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: LD_INT 1
21927: PPUSH
21928: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21932: LD_INT 46
21934: PPUSH
21935: LD_VAR 0 3
21939: PPUSH
21940: LD_INT 1
21942: PPUSH
21943: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21947: LD_INT 47
21949: PPUSH
21950: LD_VAR 0 3
21954: PPUSH
21955: LD_INT 1
21957: PPUSH
21958: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21962: LD_INT 0
21964: PPUSH
21965: LD_VAR 0 3
21969: PPUSH
21970: LD_INT 1
21972: PPUSH
21973: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21977: LD_INT 2
21979: PPUSH
21980: LD_VAR 0 3
21984: PPUSH
21985: LD_INT 1
21987: PPUSH
21988: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21992: LD_INT 4
21994: PPUSH
21995: LD_VAR 0 3
21999: PPUSH
22000: LD_INT 1
22002: PPUSH
22003: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22007: LD_INT 6
22009: PPUSH
22010: LD_VAR 0 3
22014: PPUSH
22015: LD_INT 1
22017: PPUSH
22018: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22022: LD_INT 29
22024: PPUSH
22025: LD_VAR 0 3
22029: PPUSH
22030: LD_INT 1
22032: PPUSH
22033: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22037: LD_INT 31
22039: PPUSH
22040: LD_VAR 0 3
22044: PPUSH
22045: LD_INT 1
22047: PPUSH
22048: CALL_OW 324
// end ; 2 :
22052: GO 25806
22054: LD_INT 2
22056: DOUBLE
22057: EQUAL
22058: IFTRUE 22062
22060: GO 22260
22062: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22063: LD_INT 35
22065: PPUSH
22066: LD_VAR 0 3
22070: PPUSH
22071: LD_INT 1
22073: PPUSH
22074: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22078: LD_INT 45
22080: PPUSH
22081: LD_VAR 0 3
22085: PPUSH
22086: LD_INT 1
22088: PPUSH
22089: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22093: LD_INT 46
22095: PPUSH
22096: LD_VAR 0 3
22100: PPUSH
22101: LD_INT 1
22103: PPUSH
22104: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22108: LD_INT 47
22110: PPUSH
22111: LD_VAR 0 3
22115: PPUSH
22116: LD_INT 1
22118: PPUSH
22119: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22123: LD_INT 1
22125: PPUSH
22126: LD_VAR 0 3
22130: PPUSH
22131: LD_INT 1
22133: PPUSH
22134: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22138: LD_INT 2
22140: PPUSH
22141: LD_VAR 0 3
22145: PPUSH
22146: LD_INT 1
22148: PPUSH
22149: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22153: LD_INT 11
22155: PPUSH
22156: LD_VAR 0 3
22160: PPUSH
22161: LD_INT 1
22163: PPUSH
22164: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22168: LD_INT 0
22170: PPUSH
22171: LD_VAR 0 3
22175: PPUSH
22176: LD_INT 1
22178: PPUSH
22179: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22183: LD_INT 2
22185: PPUSH
22186: LD_VAR 0 3
22190: PPUSH
22191: LD_INT 1
22193: PPUSH
22194: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22198: LD_INT 4
22200: PPUSH
22201: LD_VAR 0 3
22205: PPUSH
22206: LD_INT 1
22208: PPUSH
22209: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22213: LD_INT 6
22215: PPUSH
22216: LD_VAR 0 3
22220: PPUSH
22221: LD_INT 1
22223: PPUSH
22224: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22228: LD_INT 29
22230: PPUSH
22231: LD_VAR 0 3
22235: PPUSH
22236: LD_INT 1
22238: PPUSH
22239: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22243: LD_INT 31
22245: PPUSH
22246: LD_VAR 0 3
22250: PPUSH
22251: LD_INT 1
22253: PPUSH
22254: CALL_OW 324
// end ; 3 :
22258: GO 25806
22260: LD_INT 3
22262: DOUBLE
22263: EQUAL
22264: IFTRUE 22268
22266: GO 22721
22268: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22269: LD_INT 35
22271: PPUSH
22272: LD_VAR 0 3
22276: PPUSH
22277: LD_INT 1
22279: PPUSH
22280: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22284: LD_INT 45
22286: PPUSH
22287: LD_VAR 0 3
22291: PPUSH
22292: LD_INT 1
22294: PPUSH
22295: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22299: LD_INT 46
22301: PPUSH
22302: LD_VAR 0 3
22306: PPUSH
22307: LD_INT 1
22309: PPUSH
22310: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22314: LD_INT 47
22316: PPUSH
22317: LD_VAR 0 3
22321: PPUSH
22322: LD_INT 1
22324: PPUSH
22325: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22329: LD_INT 1
22331: PPUSH
22332: LD_VAR 0 3
22336: PPUSH
22337: LD_INT 1
22339: PPUSH
22340: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22344: LD_INT 2
22346: PPUSH
22347: LD_VAR 0 3
22351: PPUSH
22352: LD_INT 1
22354: PPUSH
22355: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22359: LD_INT 11
22361: PPUSH
22362: LD_VAR 0 3
22366: PPUSH
22367: LD_INT 1
22369: PPUSH
22370: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22374: LD_INT 48
22376: PPUSH
22377: LD_VAR 0 3
22381: PPUSH
22382: LD_INT 1
22384: PPUSH
22385: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22389: LD_INT 69
22391: PPUSH
22392: LD_VAR 0 3
22396: PPUSH
22397: LD_INT 1
22399: PPUSH
22400: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22404: LD_INT 39
22406: PPUSH
22407: LD_VAR 0 3
22411: PPUSH
22412: LD_INT 1
22414: PPUSH
22415: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22419: LD_INT 43
22421: PPUSH
22422: LD_VAR 0 3
22426: PPUSH
22427: LD_INT 1
22429: PPUSH
22430: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22434: LD_INT 51
22436: PPUSH
22437: LD_VAR 0 3
22441: PPUSH
22442: LD_INT 1
22444: PPUSH
22445: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22449: LD_INT 6
22451: PPUSH
22452: LD_VAR 0 3
22456: PPUSH
22457: LD_INT 1
22459: PPUSH
22460: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22464: LD_INT 0
22466: PPUSH
22467: LD_VAR 0 3
22471: PPUSH
22472: LD_INT 1
22474: PPUSH
22475: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22479: LD_INT 2
22481: PPUSH
22482: LD_VAR 0 3
22486: PPUSH
22487: LD_INT 1
22489: PPUSH
22490: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22494: LD_INT 3
22496: PPUSH
22497: LD_VAR 0 3
22501: PPUSH
22502: LD_INT 1
22504: PPUSH
22505: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22509: LD_INT 4
22511: PPUSH
22512: LD_VAR 0 3
22516: PPUSH
22517: LD_INT 1
22519: PPUSH
22520: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22524: LD_INT 6
22526: PPUSH
22527: LD_VAR 0 3
22531: PPUSH
22532: LD_INT 1
22534: PPUSH
22535: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22539: LD_INT 7
22541: PPUSH
22542: LD_VAR 0 3
22546: PPUSH
22547: LD_INT 1
22549: PPUSH
22550: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22554: LD_INT 8
22556: PPUSH
22557: LD_VAR 0 3
22561: PPUSH
22562: LD_INT 1
22564: PPUSH
22565: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22569: LD_INT 10
22571: PPUSH
22572: LD_VAR 0 3
22576: PPUSH
22577: LD_INT 1
22579: PPUSH
22580: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22584: LD_INT 15
22586: PPUSH
22587: LD_VAR 0 3
22591: PPUSH
22592: LD_INT 1
22594: PPUSH
22595: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22599: LD_INT 16
22601: PPUSH
22602: LD_VAR 0 3
22606: PPUSH
22607: LD_INT 1
22609: PPUSH
22610: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22614: LD_INT 17
22616: PPUSH
22617: LD_VAR 0 3
22621: PPUSH
22622: LD_INT 1
22624: PPUSH
22625: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22629: LD_INT 20
22631: PPUSH
22632: LD_VAR 0 3
22636: PPUSH
22637: LD_INT 1
22639: PPUSH
22640: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22644: LD_INT 26
22646: PPUSH
22647: LD_VAR 0 3
22651: PPUSH
22652: LD_INT 1
22654: PPUSH
22655: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22659: LD_INT 27
22661: PPUSH
22662: LD_VAR 0 3
22666: PPUSH
22667: LD_INT 1
22669: PPUSH
22670: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22674: LD_INT 29
22676: PPUSH
22677: LD_VAR 0 3
22681: PPUSH
22682: LD_INT 1
22684: PPUSH
22685: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22689: LD_INT 31
22691: PPUSH
22692: LD_VAR 0 3
22696: PPUSH
22697: LD_INT 1
22699: PPUSH
22700: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22704: LD_INT 32
22706: PPUSH
22707: LD_VAR 0 3
22711: PPUSH
22712: LD_INT 1
22714: PPUSH
22715: CALL_OW 324
// end ; 4 :
22719: GO 25806
22721: LD_INT 4
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 23677
22729: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22730: LD_INT 35
22732: PPUSH
22733: LD_VAR 0 3
22737: PPUSH
22738: LD_INT 1
22740: PPUSH
22741: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22745: LD_INT 45
22747: PPUSH
22748: LD_VAR 0 3
22752: PPUSH
22753: LD_INT 1
22755: PPUSH
22756: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22760: LD_INT 46
22762: PPUSH
22763: LD_VAR 0 3
22767: PPUSH
22768: LD_INT 1
22770: PPUSH
22771: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22775: LD_INT 47
22777: PPUSH
22778: LD_VAR 0 3
22782: PPUSH
22783: LD_INT 1
22785: PPUSH
22786: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22790: LD_INT 1
22792: PPUSH
22793: LD_VAR 0 3
22797: PPUSH
22798: LD_INT 1
22800: PPUSH
22801: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22805: LD_INT 2
22807: PPUSH
22808: LD_VAR 0 3
22812: PPUSH
22813: LD_INT 1
22815: PPUSH
22816: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22820: LD_INT 11
22822: PPUSH
22823: LD_VAR 0 3
22827: PPUSH
22828: LD_INT 1
22830: PPUSH
22831: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22835: LD_INT 20
22837: PPUSH
22838: LD_VAR 0 3
22842: PPUSH
22843: LD_INT 1
22845: PPUSH
22846: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22850: LD_INT 48
22852: PPUSH
22853: LD_VAR 0 3
22857: PPUSH
22858: LD_INT 1
22860: PPUSH
22861: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22865: LD_INT 49
22867: PPUSH
22868: LD_VAR 0 3
22872: PPUSH
22873: LD_INT 1
22875: PPUSH
22876: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22880: LD_INT 69
22882: PPUSH
22883: LD_VAR 0 3
22887: PPUSH
22888: LD_INT 1
22890: PPUSH
22891: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22895: LD_INT 39
22897: PPUSH
22898: LD_VAR 0 3
22902: PPUSH
22903: LD_INT 1
22905: PPUSH
22906: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22910: LD_INT 34
22912: PPUSH
22913: LD_VAR 0 3
22917: PPUSH
22918: LD_INT 1
22920: PPUSH
22921: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22925: LD_INT 42
22927: PPUSH
22928: LD_VAR 0 3
22932: PPUSH
22933: LD_INT 1
22935: PPUSH
22936: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22940: LD_INT 44
22942: PPUSH
22943: LD_VAR 0 3
22947: PPUSH
22948: LD_INT 1
22950: PPUSH
22951: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22955: LD_INT 41
22957: PPUSH
22958: LD_VAR 0 3
22962: PPUSH
22963: LD_INT 1
22965: PPUSH
22966: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22970: LD_INT 43
22972: PPUSH
22973: LD_VAR 0 3
22977: PPUSH
22978: LD_INT 1
22980: PPUSH
22981: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22985: LD_INT 70
22987: PPUSH
22988: LD_VAR 0 3
22992: PPUSH
22993: LD_INT 1
22995: PPUSH
22996: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23000: LD_INT 51
23002: PPUSH
23003: LD_VAR 0 3
23007: PPUSH
23008: LD_INT 1
23010: PPUSH
23011: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23015: LD_INT 52
23017: PPUSH
23018: LD_VAR 0 3
23022: PPUSH
23023: LD_INT 1
23025: PPUSH
23026: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23030: LD_INT 6
23032: PPUSH
23033: LD_VAR 0 3
23037: PPUSH
23038: LD_INT 1
23040: PPUSH
23041: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23045: LD_INT 15
23047: PPUSH
23048: LD_VAR 0 3
23052: PPUSH
23053: LD_INT 1
23055: PPUSH
23056: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23060: LD_INT 7
23062: PPUSH
23063: LD_VAR 0 3
23067: PPUSH
23068: LD_INT 1
23070: PPUSH
23071: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23075: LD_INT 12
23077: PPUSH
23078: LD_VAR 0 3
23082: PPUSH
23083: LD_INT 1
23085: PPUSH
23086: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23090: LD_INT 18
23092: PPUSH
23093: LD_VAR 0 3
23097: PPUSH
23098: LD_INT 1
23100: PPUSH
23101: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23105: LD_INT 60
23107: PPUSH
23108: LD_VAR 0 3
23112: PPUSH
23113: LD_INT 1
23115: PPUSH
23116: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23120: LD_INT 9
23122: PPUSH
23123: LD_VAR 0 3
23127: PPUSH
23128: LD_INT 1
23130: PPUSH
23131: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23135: LD_INT 30
23137: PPUSH
23138: LD_VAR 0 3
23142: PPUSH
23143: LD_INT 1
23145: PPUSH
23146: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23150: LD_INT 37
23152: PPUSH
23153: LD_VAR 0 3
23157: PPUSH
23158: LD_INT 1
23160: PPUSH
23161: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23165: LD_INT 5
23167: PPUSH
23168: LD_VAR 0 3
23172: PPUSH
23173: LD_INT 1
23175: PPUSH
23176: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23180: LD_INT 66
23182: PPUSH
23183: LD_VAR 0 3
23187: PPUSH
23188: LD_INT 1
23190: PPUSH
23191: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23195: LD_INT 21
23197: PPUSH
23198: LD_VAR 0 3
23202: PPUSH
23203: LD_INT 1
23205: PPUSH
23206: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23210: LD_INT 22
23212: PPUSH
23213: LD_VAR 0 3
23217: PPUSH
23218: LD_INT 1
23220: PPUSH
23221: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23225: LD_INT 54
23227: PPUSH
23228: LD_VAR 0 3
23232: PPUSH
23233: LD_INT 1
23235: PPUSH
23236: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23240: LD_INT 0
23242: PPUSH
23243: LD_VAR 0 3
23247: PPUSH
23248: LD_INT 1
23250: PPUSH
23251: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23255: LD_INT 1
23257: PPUSH
23258: LD_VAR 0 3
23262: PPUSH
23263: LD_INT 1
23265: PPUSH
23266: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23270: LD_INT 2
23272: PPUSH
23273: LD_VAR 0 3
23277: PPUSH
23278: LD_INT 1
23280: PPUSH
23281: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23285: LD_INT 3
23287: PPUSH
23288: LD_VAR 0 3
23292: PPUSH
23293: LD_INT 1
23295: PPUSH
23296: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23300: LD_INT 4
23302: PPUSH
23303: LD_VAR 0 3
23307: PPUSH
23308: LD_INT 1
23310: PPUSH
23311: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23315: LD_INT 5
23317: PPUSH
23318: LD_VAR 0 3
23322: PPUSH
23323: LD_INT 1
23325: PPUSH
23326: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23330: LD_INT 6
23332: PPUSH
23333: LD_VAR 0 3
23337: PPUSH
23338: LD_INT 1
23340: PPUSH
23341: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23345: LD_INT 7
23347: PPUSH
23348: LD_VAR 0 3
23352: PPUSH
23353: LD_INT 1
23355: PPUSH
23356: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23360: LD_INT 8
23362: PPUSH
23363: LD_VAR 0 3
23367: PPUSH
23368: LD_INT 1
23370: PPUSH
23371: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23375: LD_INT 10
23377: PPUSH
23378: LD_VAR 0 3
23382: PPUSH
23383: LD_INT 1
23385: PPUSH
23386: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23390: LD_INT 11
23392: PPUSH
23393: LD_VAR 0 3
23397: PPUSH
23398: LD_INT 1
23400: PPUSH
23401: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23405: LD_INT 12
23407: PPUSH
23408: LD_VAR 0 3
23412: PPUSH
23413: LD_INT 1
23415: PPUSH
23416: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23420: LD_INT 13
23422: PPUSH
23423: LD_VAR 0 3
23427: PPUSH
23428: LD_INT 1
23430: PPUSH
23431: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23435: LD_INT 14
23437: PPUSH
23438: LD_VAR 0 3
23442: PPUSH
23443: LD_INT 1
23445: PPUSH
23446: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23450: LD_INT 15
23452: PPUSH
23453: LD_VAR 0 3
23457: PPUSH
23458: LD_INT 1
23460: PPUSH
23461: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23465: LD_INT 16
23467: PPUSH
23468: LD_VAR 0 3
23472: PPUSH
23473: LD_INT 1
23475: PPUSH
23476: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23480: LD_INT 17
23482: PPUSH
23483: LD_VAR 0 3
23487: PPUSH
23488: LD_INT 1
23490: PPUSH
23491: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23495: LD_INT 19
23497: PPUSH
23498: LD_VAR 0 3
23502: PPUSH
23503: LD_INT 1
23505: PPUSH
23506: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23510: LD_INT 20
23512: PPUSH
23513: LD_VAR 0 3
23517: PPUSH
23518: LD_INT 1
23520: PPUSH
23521: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23525: LD_INT 21
23527: PPUSH
23528: LD_VAR 0 3
23532: PPUSH
23533: LD_INT 1
23535: PPUSH
23536: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23540: LD_INT 23
23542: PPUSH
23543: LD_VAR 0 3
23547: PPUSH
23548: LD_INT 1
23550: PPUSH
23551: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23555: LD_INT 26
23557: PPUSH
23558: LD_VAR 0 3
23562: PPUSH
23563: LD_INT 1
23565: PPUSH
23566: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23570: LD_INT 27
23572: PPUSH
23573: LD_VAR 0 3
23577: PPUSH
23578: LD_INT 1
23580: PPUSH
23581: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23585: LD_INT 28
23587: PPUSH
23588: LD_VAR 0 3
23592: PPUSH
23593: LD_INT 1
23595: PPUSH
23596: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23600: LD_INT 29
23602: PPUSH
23603: LD_VAR 0 3
23607: PPUSH
23608: LD_INT 1
23610: PPUSH
23611: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23615: LD_INT 30
23617: PPUSH
23618: LD_VAR 0 3
23622: PPUSH
23623: LD_INT 1
23625: PPUSH
23626: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23630: LD_INT 31
23632: PPUSH
23633: LD_VAR 0 3
23637: PPUSH
23638: LD_INT 1
23640: PPUSH
23641: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23645: LD_INT 32
23647: PPUSH
23648: LD_VAR 0 3
23652: PPUSH
23653: LD_INT 1
23655: PPUSH
23656: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23660: LD_INT 36
23662: PPUSH
23663: LD_VAR 0 3
23667: PPUSH
23668: LD_INT 1
23670: PPUSH
23671: CALL_OW 324
// end ; 5 :
23675: GO 25806
23677: LD_INT 5
23679: DOUBLE
23680: EQUAL
23681: IFTRUE 23685
23683: GO 24798
23685: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23686: LD_INT 35
23688: PPUSH
23689: LD_VAR 0 3
23693: PPUSH
23694: LD_INT 1
23696: PPUSH
23697: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23701: LD_INT 45
23703: PPUSH
23704: LD_VAR 0 3
23708: PPUSH
23709: LD_INT 1
23711: PPUSH
23712: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23716: LD_INT 46
23718: PPUSH
23719: LD_VAR 0 3
23723: PPUSH
23724: LD_INT 1
23726: PPUSH
23727: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23731: LD_INT 47
23733: PPUSH
23734: LD_VAR 0 3
23738: PPUSH
23739: LD_INT 1
23741: PPUSH
23742: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23746: LD_INT 1
23748: PPUSH
23749: LD_VAR 0 3
23753: PPUSH
23754: LD_INT 1
23756: PPUSH
23757: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23761: LD_INT 2
23763: PPUSH
23764: LD_VAR 0 3
23768: PPUSH
23769: LD_INT 1
23771: PPUSH
23772: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23776: LD_INT 11
23778: PPUSH
23779: LD_VAR 0 3
23783: PPUSH
23784: LD_INT 1
23786: PPUSH
23787: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23791: LD_INT 20
23793: PPUSH
23794: LD_VAR 0 3
23798: PPUSH
23799: LD_INT 1
23801: PPUSH
23802: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23806: LD_INT 48
23808: PPUSH
23809: LD_VAR 0 3
23813: PPUSH
23814: LD_INT 1
23816: PPUSH
23817: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23821: LD_INT 49
23823: PPUSH
23824: LD_VAR 0 3
23828: PPUSH
23829: LD_INT 1
23831: PPUSH
23832: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23836: LD_INT 69
23838: PPUSH
23839: LD_VAR 0 3
23843: PPUSH
23844: LD_INT 1
23846: PPUSH
23847: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23851: LD_INT 39
23853: PPUSH
23854: LD_VAR 0 3
23858: PPUSH
23859: LD_INT 1
23861: PPUSH
23862: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23866: LD_INT 34
23868: PPUSH
23869: LD_VAR 0 3
23873: PPUSH
23874: LD_INT 1
23876: PPUSH
23877: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23881: LD_INT 42
23883: PPUSH
23884: LD_VAR 0 3
23888: PPUSH
23889: LD_INT 1
23891: PPUSH
23892: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23896: LD_INT 44
23898: PPUSH
23899: LD_VAR 0 3
23903: PPUSH
23904: LD_INT 1
23906: PPUSH
23907: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23911: LD_INT 41
23913: PPUSH
23914: LD_VAR 0 3
23918: PPUSH
23919: LD_INT 1
23921: PPUSH
23922: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
23926: LD_INT 40
23928: PPUSH
23929: LD_VAR 0 3
23933: PPUSH
23934: LD_INT 1
23936: PPUSH
23937: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23941: LD_INT 43
23943: PPUSH
23944: LD_VAR 0 3
23948: PPUSH
23949: LD_INT 1
23951: PPUSH
23952: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23956: LD_INT 70
23958: PPUSH
23959: LD_VAR 0 3
23963: PPUSH
23964: LD_INT 1
23966: PPUSH
23967: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23971: LD_INT 51
23973: PPUSH
23974: LD_VAR 0 3
23978: PPUSH
23979: LD_INT 1
23981: PPUSH
23982: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23986: LD_INT 52
23988: PPUSH
23989: LD_VAR 0 3
23993: PPUSH
23994: LD_INT 1
23996: PPUSH
23997: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24001: LD_INT 6
24003: PPUSH
24004: LD_VAR 0 3
24008: PPUSH
24009: LD_INT 1
24011: PPUSH
24012: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24016: LD_INT 15
24018: PPUSH
24019: LD_VAR 0 3
24023: PPUSH
24024: LD_INT 1
24026: PPUSH
24027: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24031: LD_INT 7
24033: PPUSH
24034: LD_VAR 0 3
24038: PPUSH
24039: LD_INT 1
24041: PPUSH
24042: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24046: LD_INT 12
24048: PPUSH
24049: LD_VAR 0 3
24053: PPUSH
24054: LD_INT 1
24056: PPUSH
24057: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24061: LD_INT 17
24063: PPUSH
24064: LD_VAR 0 3
24068: PPUSH
24069: LD_INT 1
24071: PPUSH
24072: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24076: LD_INT 18
24078: PPUSH
24079: LD_VAR 0 3
24083: PPUSH
24084: LD_INT 1
24086: PPUSH
24087: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24091: LD_INT 60
24093: PPUSH
24094: LD_VAR 0 3
24098: PPUSH
24099: LD_INT 1
24101: PPUSH
24102: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24106: LD_INT 32
24108: PPUSH
24109: LD_VAR 0 3
24113: PPUSH
24114: LD_INT 1
24116: PPUSH
24117: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24121: LD_INT 9
24123: PPUSH
24124: LD_VAR 0 3
24128: PPUSH
24129: LD_INT 1
24131: PPUSH
24132: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24136: LD_INT 57
24138: PPUSH
24139: LD_VAR 0 3
24143: PPUSH
24144: LD_INT 1
24146: PPUSH
24147: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24151: LD_INT 30
24153: PPUSH
24154: LD_VAR 0 3
24158: PPUSH
24159: LD_INT 1
24161: PPUSH
24162: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24166: LD_INT 37
24168: PPUSH
24169: LD_VAR 0 3
24173: PPUSH
24174: LD_INT 1
24176: PPUSH
24177: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24181: LD_INT 63
24183: PPUSH
24184: LD_VAR 0 3
24188: PPUSH
24189: LD_INT 1
24191: PPUSH
24192: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24196: LD_INT 3
24198: PPUSH
24199: LD_VAR 0 3
24203: PPUSH
24204: LD_INT 1
24206: PPUSH
24207: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24211: LD_INT 4
24213: PPUSH
24214: LD_VAR 0 3
24218: PPUSH
24219: LD_INT 1
24221: PPUSH
24222: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24226: LD_INT 5
24228: PPUSH
24229: LD_VAR 0 3
24233: PPUSH
24234: LD_INT 1
24236: PPUSH
24237: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24241: LD_INT 66
24243: PPUSH
24244: LD_VAR 0 3
24248: PPUSH
24249: LD_INT 1
24251: PPUSH
24252: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24256: LD_INT 21
24258: PPUSH
24259: LD_VAR 0 3
24263: PPUSH
24264: LD_INT 1
24266: PPUSH
24267: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24271: LD_INT 22
24273: PPUSH
24274: LD_VAR 0 3
24278: PPUSH
24279: LD_INT 1
24281: PPUSH
24282: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24286: LD_INT 19
24288: PPUSH
24289: LD_VAR 0 3
24293: PPUSH
24294: LD_INT 1
24296: PPUSH
24297: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24301: LD_INT 54
24303: PPUSH
24304: LD_VAR 0 3
24308: PPUSH
24309: LD_INT 1
24311: PPUSH
24312: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24316: LD_INT 55
24318: PPUSH
24319: LD_VAR 0 3
24323: PPUSH
24324: LD_INT 1
24326: PPUSH
24327: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
24331: LD_INT 0
24333: PPUSH
24334: LD_VAR 0 3
24338: PPUSH
24339: LD_INT 1
24341: PPUSH
24342: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
24346: LD_INT 1
24348: PPUSH
24349: LD_VAR 0 3
24353: PPUSH
24354: LD_INT 1
24356: PPUSH
24357: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24361: LD_INT 2
24363: PPUSH
24364: LD_VAR 0 3
24368: PPUSH
24369: LD_INT 1
24371: PPUSH
24372: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24376: LD_INT 3
24378: PPUSH
24379: LD_VAR 0 3
24383: PPUSH
24384: LD_INT 1
24386: PPUSH
24387: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24391: LD_INT 4
24393: PPUSH
24394: LD_VAR 0 3
24398: PPUSH
24399: LD_INT 1
24401: PPUSH
24402: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24406: LD_INT 5
24408: PPUSH
24409: LD_VAR 0 3
24413: PPUSH
24414: LD_INT 1
24416: PPUSH
24417: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24421: LD_INT 6
24423: PPUSH
24424: LD_VAR 0 3
24428: PPUSH
24429: LD_INT 1
24431: PPUSH
24432: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24436: LD_INT 7
24438: PPUSH
24439: LD_VAR 0 3
24443: PPUSH
24444: LD_INT 1
24446: PPUSH
24447: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24451: LD_INT 8
24453: PPUSH
24454: LD_VAR 0 3
24458: PPUSH
24459: LD_INT 1
24461: PPUSH
24462: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24466: LD_INT 10
24468: PPUSH
24469: LD_VAR 0 3
24473: PPUSH
24474: LD_INT 1
24476: PPUSH
24477: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24481: LD_INT 11
24483: PPUSH
24484: LD_VAR 0 3
24488: PPUSH
24489: LD_INT 1
24491: PPUSH
24492: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24496: LD_INT 12
24498: PPUSH
24499: LD_VAR 0 3
24503: PPUSH
24504: LD_INT 1
24506: PPUSH
24507: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24511: LD_INT 13
24513: PPUSH
24514: LD_VAR 0 3
24518: PPUSH
24519: LD_INT 1
24521: PPUSH
24522: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24526: LD_INT 14
24528: PPUSH
24529: LD_VAR 0 3
24533: PPUSH
24534: LD_INT 1
24536: PPUSH
24537: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24541: LD_INT 15
24543: PPUSH
24544: LD_VAR 0 3
24548: PPUSH
24549: LD_INT 1
24551: PPUSH
24552: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24556: LD_INT 16
24558: PPUSH
24559: LD_VAR 0 3
24563: PPUSH
24564: LD_INT 1
24566: PPUSH
24567: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24571: LD_INT 17
24573: PPUSH
24574: LD_VAR 0 3
24578: PPUSH
24579: LD_INT 1
24581: PPUSH
24582: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24586: LD_INT 18
24588: PPUSH
24589: LD_VAR 0 3
24593: PPUSH
24594: LD_INT 1
24596: PPUSH
24597: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
24601: LD_INT 19
24603: PPUSH
24604: LD_VAR 0 3
24608: PPUSH
24609: LD_INT 1
24611: PPUSH
24612: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
24616: LD_INT 20
24618: PPUSH
24619: LD_VAR 0 3
24623: PPUSH
24624: LD_INT 1
24626: PPUSH
24627: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
24631: LD_INT 21
24633: PPUSH
24634: LD_VAR 0 3
24638: PPUSH
24639: LD_INT 1
24641: PPUSH
24642: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
24646: LD_INT 23
24648: PPUSH
24649: LD_VAR 0 3
24653: PPUSH
24654: LD_INT 1
24656: PPUSH
24657: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
24661: LD_INT 26
24663: PPUSH
24664: LD_VAR 0 3
24668: PPUSH
24669: LD_INT 1
24671: PPUSH
24672: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
24676: LD_INT 27
24678: PPUSH
24679: LD_VAR 0 3
24683: PPUSH
24684: LD_INT 1
24686: PPUSH
24687: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
24691: LD_INT 28
24693: PPUSH
24694: LD_VAR 0 3
24698: PPUSH
24699: LD_INT 1
24701: PPUSH
24702: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
24706: LD_INT 29
24708: PPUSH
24709: LD_VAR 0 3
24713: PPUSH
24714: LD_INT 1
24716: PPUSH
24717: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24721: LD_INT 30
24723: PPUSH
24724: LD_VAR 0 3
24728: PPUSH
24729: LD_INT 1
24731: PPUSH
24732: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24736: LD_INT 31
24738: PPUSH
24739: LD_VAR 0 3
24743: PPUSH
24744: LD_INT 1
24746: PPUSH
24747: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
24751: LD_INT 32
24753: PPUSH
24754: LD_VAR 0 3
24758: PPUSH
24759: LD_INT 1
24761: PPUSH
24762: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
24766: LD_INT 33
24768: PPUSH
24769: LD_VAR 0 3
24773: PPUSH
24774: LD_INT 1
24776: PPUSH
24777: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
24781: LD_INT 36
24783: PPUSH
24784: LD_VAR 0 3
24788: PPUSH
24789: LD_INT 1
24791: PPUSH
24792: CALL_OW 324
// end ; 6 :
24796: GO 25806
24798: LD_INT 6
24800: DOUBLE
24801: EQUAL
24802: IFTRUE 24806
24804: GO 25731
24806: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
24807: LD_INT 35
24809: PPUSH
24810: LD_VAR 0 3
24814: PPUSH
24815: LD_INT 1
24817: PPUSH
24818: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
24822: LD_INT 45
24824: PPUSH
24825: LD_VAR 0 3
24829: PPUSH
24830: LD_INT 1
24832: PPUSH
24833: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
24837: LD_INT 46
24839: PPUSH
24840: LD_VAR 0 3
24844: PPUSH
24845: LD_INT 1
24847: PPUSH
24848: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
24852: LD_INT 47
24854: PPUSH
24855: LD_VAR 0 3
24859: PPUSH
24860: LD_INT 1
24862: PPUSH
24863: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
24867: LD_INT 1
24869: PPUSH
24870: LD_VAR 0 3
24874: PPUSH
24875: LD_INT 1
24877: PPUSH
24878: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
24882: LD_INT 2
24884: PPUSH
24885: LD_VAR 0 3
24889: PPUSH
24890: LD_INT 1
24892: PPUSH
24893: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
24897: LD_INT 11
24899: PPUSH
24900: LD_VAR 0 3
24904: PPUSH
24905: LD_INT 1
24907: PPUSH
24908: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24912: LD_INT 20
24914: PPUSH
24915: LD_VAR 0 3
24919: PPUSH
24920: LD_INT 1
24922: PPUSH
24923: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24927: LD_INT 48
24929: PPUSH
24930: LD_VAR 0 3
24934: PPUSH
24935: LD_INT 1
24937: PPUSH
24938: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24942: LD_INT 49
24944: PPUSH
24945: LD_VAR 0 3
24949: PPUSH
24950: LD_INT 1
24952: PPUSH
24953: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
24957: LD_INT 50
24959: PPUSH
24960: LD_VAR 0 3
24964: PPUSH
24965: LD_INT 1
24967: PPUSH
24968: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24972: LD_INT 69
24974: PPUSH
24975: LD_VAR 0 3
24979: PPUSH
24980: LD_INT 1
24982: PPUSH
24983: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24987: LD_INT 39
24989: PPUSH
24990: LD_VAR 0 3
24994: PPUSH
24995: LD_INT 1
24997: PPUSH
24998: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
25002: LD_INT 34
25004: PPUSH
25005: LD_VAR 0 3
25009: PPUSH
25010: LD_INT 1
25012: PPUSH
25013: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
25017: LD_INT 42
25019: PPUSH
25020: LD_VAR 0 3
25024: PPUSH
25025: LD_INT 1
25027: PPUSH
25028: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
25032: LD_INT 44
25034: PPUSH
25035: LD_VAR 0 3
25039: PPUSH
25040: LD_INT 1
25042: PPUSH
25043: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
25047: LD_INT 41
25049: PPUSH
25050: LD_VAR 0 3
25054: PPUSH
25055: LD_INT 1
25057: PPUSH
25058: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
25062: LD_INT 13
25064: PPUSH
25065: LD_VAR 0 3
25069: PPUSH
25070: LD_INT 1
25072: PPUSH
25073: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
25077: LD_INT 40
25079: PPUSH
25080: LD_VAR 0 3
25084: PPUSH
25085: LD_INT 1
25087: PPUSH
25088: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
25092: LD_INT 43
25094: PPUSH
25095: LD_VAR 0 3
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
25107: LD_INT 70
25109: PPUSH
25110: LD_VAR 0 3
25114: PPUSH
25115: LD_INT 1
25117: PPUSH
25118: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
25122: LD_INT 23
25124: PPUSH
25125: LD_VAR 0 3
25129: PPUSH
25130: LD_INT 1
25132: PPUSH
25133: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
25137: LD_INT 51
25139: PPUSH
25140: LD_VAR 0 3
25144: PPUSH
25145: LD_INT 1
25147: PPUSH
25148: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
25152: LD_INT 52
25154: PPUSH
25155: LD_VAR 0 3
25159: PPUSH
25160: LD_INT 1
25162: PPUSH
25163: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
25167: LD_INT 6
25169: PPUSH
25170: LD_VAR 0 3
25174: PPUSH
25175: LD_INT 1
25177: PPUSH
25178: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
25182: LD_INT 15
25184: PPUSH
25185: LD_VAR 0 3
25189: PPUSH
25190: LD_INT 1
25192: PPUSH
25193: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
25197: LD_INT 7
25199: PPUSH
25200: LD_VAR 0 3
25204: PPUSH
25205: LD_INT 1
25207: PPUSH
25208: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
25212: LD_INT 12
25214: PPUSH
25215: LD_VAR 0 3
25219: PPUSH
25220: LD_INT 1
25222: PPUSH
25223: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
25227: LD_INT 10
25229: PPUSH
25230: LD_VAR 0 3
25234: PPUSH
25235: LD_INT 1
25237: PPUSH
25238: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
25242: LD_INT 17
25244: PPUSH
25245: LD_VAR 0 3
25249: PPUSH
25250: LD_INT 1
25252: PPUSH
25253: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
25257: LD_INT 18
25259: PPUSH
25260: LD_VAR 0 3
25264: PPUSH
25265: LD_INT 1
25267: PPUSH
25268: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
25272: LD_INT 60
25274: PPUSH
25275: LD_VAR 0 3
25279: PPUSH
25280: LD_INT 1
25282: PPUSH
25283: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
25287: LD_INT 61
25289: PPUSH
25290: LD_VAR 0 3
25294: PPUSH
25295: LD_INT 1
25297: PPUSH
25298: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
25302: LD_INT 32
25304: PPUSH
25305: LD_VAR 0 3
25309: PPUSH
25310: LD_INT 1
25312: PPUSH
25313: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
25317: LD_INT 27
25319: PPUSH
25320: LD_VAR 0 3
25324: PPUSH
25325: LD_INT 1
25327: PPUSH
25328: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
25332: LD_INT 36
25334: PPUSH
25335: LD_VAR 0 3
25339: PPUSH
25340: LD_INT 1
25342: PPUSH
25343: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
25347: LD_INT 33
25349: PPUSH
25350: LD_VAR 0 3
25354: PPUSH
25355: LD_INT 1
25357: PPUSH
25358: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25362: LD_INT 9
25364: PPUSH
25365: LD_VAR 0 3
25369: PPUSH
25370: LD_INT 1
25372: PPUSH
25373: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25377: LD_INT 38
25379: PPUSH
25380: LD_VAR 0 3
25384: PPUSH
25385: LD_INT 1
25387: PPUSH
25388: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25392: LD_INT 57
25394: PPUSH
25395: LD_VAR 0 3
25399: PPUSH
25400: LD_INT 1
25402: PPUSH
25403: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25407: LD_INT 58
25409: PPUSH
25410: LD_VAR 0 3
25414: PPUSH
25415: LD_INT 1
25417: PPUSH
25418: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25422: LD_INT 28
25424: PPUSH
25425: LD_VAR 0 3
25429: PPUSH
25430: LD_INT 1
25432: PPUSH
25433: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25437: LD_INT 29
25439: PPUSH
25440: LD_VAR 0 3
25444: PPUSH
25445: LD_INT 1
25447: PPUSH
25448: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25452: LD_INT 30
25454: PPUSH
25455: LD_VAR 0 3
25459: PPUSH
25460: LD_INT 1
25462: PPUSH
25463: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25467: LD_INT 37
25469: PPUSH
25470: LD_VAR 0 3
25474: PPUSH
25475: LD_INT 1
25477: PPUSH
25478: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25482: LD_INT 63
25484: PPUSH
25485: LD_VAR 0 3
25489: PPUSH
25490: LD_INT 1
25492: PPUSH
25493: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25497: LD_INT 64
25499: PPUSH
25500: LD_VAR 0 3
25504: PPUSH
25505: LD_INT 1
25507: PPUSH
25508: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25512: LD_INT 3
25514: PPUSH
25515: LD_VAR 0 3
25519: PPUSH
25520: LD_INT 1
25522: PPUSH
25523: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25527: LD_INT 4
25529: PPUSH
25530: LD_VAR 0 3
25534: PPUSH
25535: LD_INT 1
25537: PPUSH
25538: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25542: LD_INT 5
25544: PPUSH
25545: LD_VAR 0 3
25549: PPUSH
25550: LD_INT 1
25552: PPUSH
25553: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25557: LD_INT 8
25559: PPUSH
25560: LD_VAR 0 3
25564: PPUSH
25565: LD_INT 1
25567: PPUSH
25568: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25572: LD_INT 66
25574: PPUSH
25575: LD_VAR 0 3
25579: PPUSH
25580: LD_INT 1
25582: PPUSH
25583: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25587: LD_INT 67
25589: PPUSH
25590: LD_VAR 0 3
25594: PPUSH
25595: LD_INT 1
25597: PPUSH
25598: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
25602: LD_INT 21
25604: PPUSH
25605: LD_VAR 0 3
25609: PPUSH
25610: LD_INT 1
25612: PPUSH
25613: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
25617: LD_INT 22
25619: PPUSH
25620: LD_VAR 0 3
25624: PPUSH
25625: LD_INT 1
25627: PPUSH
25628: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
25632: LD_INT 19
25634: PPUSH
25635: LD_VAR 0 3
25639: PPUSH
25640: LD_INT 1
25642: PPUSH
25643: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
25647: LD_INT 26
25649: PPUSH
25650: LD_VAR 0 3
25654: PPUSH
25655: LD_INT 1
25657: PPUSH
25658: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
25662: LD_INT 54
25664: PPUSH
25665: LD_VAR 0 3
25669: PPUSH
25670: LD_INT 1
25672: PPUSH
25673: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
25677: LD_INT 55
25679: PPUSH
25680: LD_VAR 0 3
25684: PPUSH
25685: LD_INT 1
25687: PPUSH
25688: CALL_OW 322
// for i = 0 to 39 do
25692: LD_ADDR_VAR 0 4
25696: PUSH
25697: DOUBLE
25698: LD_INT 0
25700: DEC
25701: ST_TO_ADDR
25702: LD_INT 39
25704: PUSH
25705: FOR_TO
25706: IFFALSE 25727
// SetRestrict ( i , side , true ) ;
25708: LD_VAR 0 4
25712: PPUSH
25713: LD_VAR 0 3
25717: PPUSH
25718: LD_INT 1
25720: PPUSH
25721: CALL_OW 324
25725: GO 25705
25727: POP
25728: POP
// end ; else
25729: GO 25806
25731: POP
// begin for i = 1 to 73 do
25732: LD_ADDR_VAR 0 4
25736: PUSH
25737: DOUBLE
25738: LD_INT 1
25740: DEC
25741: ST_TO_ADDR
25742: LD_INT 73
25744: PUSH
25745: FOR_TO
25746: IFFALSE 25767
// SetTech ( i , side , state_enabled ) ;
25748: LD_VAR 0 4
25752: PPUSH
25753: LD_VAR 0 3
25757: PPUSH
25758: LD_INT 1
25760: PPUSH
25761: CALL_OW 322
25765: GO 25745
25767: POP
25768: POP
// for i = 0 to 39 do
25769: LD_ADDR_VAR 0 4
25773: PUSH
25774: DOUBLE
25775: LD_INT 0
25777: DEC
25778: ST_TO_ADDR
25779: LD_INT 39
25781: PUSH
25782: FOR_TO
25783: IFFALSE 25804
// SetRestrict ( i , side , true ) ;
25785: LD_VAR 0 4
25789: PPUSH
25790: LD_VAR 0 3
25794: PPUSH
25795: LD_INT 1
25797: PPUSH
25798: CALL_OW 324
25802: GO 25782
25804: POP
25805: POP
// end ; end ; end ;
25806: GO 21811
25808: POP
25809: POP
// end ; end_of_file
25810: LD_VAR 0 2
25814: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
25815: LD_INT 0
25817: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
25818: LD_VAR 0 1
25822: PPUSH
25823: LD_VAR 0 2
25827: PPUSH
25828: LD_VAR 0 3
25832: PPUSH
25833: LD_INT 0
25835: PPUSH
25836: CALL 25845 0 4
// end ;
25840: LD_VAR 0 4
25844: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
25845: LD_INT 0
25847: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
25848: LD_STRING initScore({
25850: PUSH
25851: LD_VAR 0 1
25855: PUSH
25856: LD_INT 1
25858: ARRAY
25859: STR
25860: PUSH
25861: LD_STRING ,
25863: STR
25864: PUSH
25865: LD_VAR 0 1
25869: PUSH
25870: LD_INT 2
25872: ARRAY
25873: STR
25874: PUSH
25875: LD_STRING ,
25877: STR
25878: PUSH
25879: LD_VAR 0 1
25883: PUSH
25884: LD_INT 3
25886: ARRAY
25887: STR
25888: PUSH
25889: LD_STRING ,
25891: STR
25892: PUSH
25893: LD_VAR 0 1
25897: PUSH
25898: LD_INT 4
25900: ARRAY
25901: STR
25902: PUSH
25903: LD_STRING ,
25905: STR
25906: PUSH
25907: LD_VAR 0 1
25911: PUSH
25912: LD_INT 5
25914: ARRAY
25915: STR
25916: PUSH
25917: LD_STRING ,
25919: STR
25920: PUSH
25921: LD_VAR 0 1
25925: PUSH
25926: LD_INT 6
25928: ARRAY
25929: STR
25930: PUSH
25931: LD_STRING ,
25933: STR
25934: PUSH
25935: LD_VAR 0 1
25939: PUSH
25940: LD_INT 7
25942: ARRAY
25943: STR
25944: PUSH
25945: LD_STRING ,
25947: STR
25948: PUSH
25949: LD_VAR 0 1
25953: PUSH
25954: LD_INT 8
25956: ARRAY
25957: STR
25958: PUSH
25959: LD_STRING },
25961: STR
25962: PUSH
25963: LD_VAR 0 2
25967: STR
25968: PUSH
25969: LD_STRING ,
25971: STR
25972: PUSH
25973: LD_VAR 0 3
25977: STR
25978: PUSH
25979: LD_STRING ,
25981: STR
25982: PUSH
25983: LD_VAR 0 4
25987: STR
25988: PUSH
25989: LD_STRING );
25991: STR
25992: PPUSH
25993: CALL_OW 559
// end ;
25997: LD_VAR 0 5
26001: RET
// export function LScore_Reset ( ) ; begin
26002: LD_INT 0
26004: PPUSH
// ToLua ( ResetScorebar(); ) ;
26005: LD_STRING ResetScorebar();
26007: PPUSH
26008: CALL_OW 559
// end ;
26012: LD_VAR 0 1
26016: RET
// export function LScore_Delete ( ID ) ; begin
26017: LD_INT 0
26019: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
26020: LD_STRING deleteScore(
26022: PUSH
26023: LD_VAR 0 1
26027: STR
26028: PUSH
26029: LD_STRING );
26031: STR
26032: PPUSH
26033: CALL_OW 559
// end ;
26037: LD_VAR 0 2
26041: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
26042: LD_INT 0
26044: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
26045: LD_STRING AST(
26047: PUSH
26048: LD_VAR 0 1
26052: STR
26053: PUSH
26054: LD_STRING ,
26056: STR
26057: PUSH
26058: LD_VAR 0 2
26062: STR
26063: PUSH
26064: LD_STRING ,
26066: STR
26067: PUSH
26068: LD_VAR 0 3
26072: STR
26073: PUSH
26074: LD_STRING ,);
26076: STR
26077: PPUSH
26078: CALL_OW 559
// end ;
26082: LD_VAR 0 4
26086: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
26087: LD_INT 0
26089: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
26090: LD_STRING AST(
26092: PUSH
26093: LD_VAR 0 1
26097: STR
26098: PUSH
26099: LD_STRING ,
26101: STR
26102: PUSH
26103: LD_VAR 0 2
26107: STR
26108: PUSH
26109: LD_STRING ,
26111: STR
26112: PUSH
26113: LD_VAR 0 3
26117: STR
26118: PUSH
26119: LD_STRING ,
26121: STR
26122: PUSH
26123: LD_VAR 0 4
26127: STR
26128: PUSH
26129: LD_STRING );
26131: STR
26132: PPUSH
26133: CALL_OW 559
// end ;
26137: LD_VAR 0 5
26141: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
26142: LD_INT 0
26144: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
26145: LD_STRING AST(
26147: PUSH
26148: LD_VAR 0 1
26152: STR
26153: PUSH
26154: LD_STRING ,
26156: STR
26157: PUSH
26158: LD_VAR 0 2
26162: STR
26163: PUSH
26164: LD_STRING ,
26166: STR
26167: PUSH
26168: LD_VAR 0 3
26172: STR
26173: PUSH
26174: LD_STRING ,
26176: STR
26177: PUSH
26178: LD_VAR 0 4
26182: STR
26183: PUSH
26184: LD_STRING ,
26186: STR
26187: PUSH
26188: LD_VAR 0 5
26192: STR
26193: PUSH
26194: LD_STRING );
26196: STR
26197: PPUSH
26198: CALL_OW 559
// end ;
26202: LD_VAR 0 6
26206: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
26207: LD_INT 0
26209: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
26210: LD_STRING ASRT(
26212: PUSH
26213: LD_VAR 0 1
26217: STR
26218: PUSH
26219: LD_STRING ,
26221: STR
26222: PUSH
26223: LD_VAR 0 2
26227: STR
26228: PUSH
26229: LD_STRING ,
26231: STR
26232: PUSH
26233: LD_VAR 0 3
26237: STR
26238: PUSH
26239: LD_STRING ,);
26241: STR
26242: PPUSH
26243: CALL_OW 559
// end ;
26247: LD_VAR 0 4
26251: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
26252: LD_INT 0
26254: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
26255: LD_STRING ASRT(
26257: PUSH
26258: LD_VAR 0 1
26262: STR
26263: PUSH
26264: LD_STRING ,
26266: STR
26267: PUSH
26268: LD_VAR 0 2
26272: STR
26273: PUSH
26274: LD_STRING ,
26276: STR
26277: PUSH
26278: LD_VAR 0 3
26282: STR
26283: PUSH
26284: LD_STRING ,
26286: STR
26287: PUSH
26288: LD_VAR 0 4
26292: STR
26293: PUSH
26294: LD_STRING );
26296: STR
26297: PPUSH
26298: CALL_OW 559
// end ;
26302: LD_VAR 0 5
26306: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
26307: LD_INT 0
26309: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
26310: LD_STRING ASRT(
26312: PUSH
26313: LD_VAR 0 1
26317: STR
26318: PUSH
26319: LD_STRING ,
26321: STR
26322: PUSH
26323: LD_VAR 0 2
26327: STR
26328: PUSH
26329: LD_STRING ,
26331: STR
26332: PUSH
26333: LD_VAR 0 3
26337: STR
26338: PUSH
26339: LD_STRING ,
26341: STR
26342: PUSH
26343: LD_VAR 0 4
26347: STR
26348: PUSH
26349: LD_STRING ,
26351: STR
26352: PUSH
26353: LD_VAR 0 5
26357: STR
26358: PUSH
26359: LD_STRING );
26361: STR
26362: PPUSH
26363: CALL_OW 559
// end ;
26367: LD_VAR 0 6
26371: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
26372: LD_INT 0
26374: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
26375: LD_STRING UST(
26377: PUSH
26378: LD_VAR 0 1
26382: STR
26383: PUSH
26384: LD_STRING ,
26386: STR
26387: PUSH
26388: LD_VAR 0 2
26392: STR
26393: PUSH
26394: LD_STRING );
26396: STR
26397: PPUSH
26398: CALL_OW 559
// end ;
26402: LD_VAR 0 3
26406: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
26407: LD_INT 0
26409: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
26410: LD_STRING UST(
26412: PUSH
26413: LD_VAR 0 1
26417: STR
26418: PUSH
26419: LD_STRING ,
26421: STR
26422: PUSH
26423: LD_VAR 0 2
26427: STR
26428: PUSH
26429: LD_STRING ,
26431: STR
26432: PUSH
26433: LD_VAR 0 3
26437: STR
26438: PUSH
26439: LD_STRING );
26441: STR
26442: PPUSH
26443: CALL_OW 559
// end ;
26447: LD_VAR 0 4
26451: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
26452: LD_INT 0
26454: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
26455: LD_STRING CCST(
26457: PUSH
26458: LD_VAR 0 1
26462: STR
26463: PUSH
26464: LD_STRING ,{
26466: STR
26467: PUSH
26468: LD_VAR 0 2
26472: STR
26473: PUSH
26474: LD_STRING ,
26476: STR
26477: PUSH
26478: LD_VAR 0 3
26482: STR
26483: PUSH
26484: LD_STRING ,
26486: STR
26487: PUSH
26488: LD_VAR 0 4
26492: STR
26493: PUSH
26494: LD_STRING });
26496: STR
26497: PPUSH
26498: CALL_OW 559
// end ;
26502: LD_VAR 0 5
26506: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
26507: LD_INT 0
26509: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
26510: LD_STRING CCST(
26512: PUSH
26513: LD_VAR 0 1
26517: STR
26518: PUSH
26519: LD_STRING ,
26521: STR
26522: PUSH
26523: LD_VAR 0 2
26527: STR
26528: PUSH
26529: LD_STRING );
26531: STR
26532: PPUSH
26533: CALL_OW 559
// end ;
26537: LD_VAR 0 3
26541: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
26542: LD_INT 0
26544: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
26545: LD_STRING ASSP(
26547: PUSH
26548: LD_VAR 0 1
26552: STR
26553: PUSH
26554: LD_STRING ,
26556: STR
26557: PUSH
26558: LD_VAR 0 2
26562: STR
26563: PUSH
26564: LD_STRING ,
26566: STR
26567: PUSH
26568: LD_VAR 0 3
26572: STR
26573: PUSH
26574: LD_STRING ,);
26576: STR
26577: PPUSH
26578: CALL_OW 559
// end ;
26582: LD_VAR 0 4
26586: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
26587: LD_INT 0
26589: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
26590: LD_STRING ASSP(
26592: PUSH
26593: LD_VAR 0 1
26597: STR
26598: PUSH
26599: LD_STRING ,
26601: STR
26602: PUSH
26603: LD_VAR 0 2
26607: STR
26608: PUSH
26609: LD_STRING ,
26611: STR
26612: PUSH
26613: LD_VAR 0 3
26617: STR
26618: PUSH
26619: LD_STRING ,
26621: STR
26622: PUSH
26623: LD_VAR 0 4
26627: STR
26628: PUSH
26629: LD_STRING );
26631: STR
26632: PPUSH
26633: CALL_OW 559
// end ;
26637: LD_VAR 0 5
26641: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
26642: LD_INT 0
26644: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
26645: LD_STRING ASSP(
26647: PUSH
26648: LD_VAR 0 1
26652: STR
26653: PUSH
26654: LD_STRING ,
26656: STR
26657: PUSH
26658: LD_VAR 0 2
26662: STR
26663: PUSH
26664: LD_STRING ,
26666: STR
26667: PUSH
26668: LD_VAR 0 3
26672: STR
26673: PUSH
26674: LD_STRING ,
26676: STR
26677: PUSH
26678: LD_VAR 0 4
26682: STR
26683: PUSH
26684: LD_STRING ,
26686: STR
26687: PUSH
26688: LD_VAR 0 5
26692: STR
26693: PUSH
26694: LD_STRING );
26696: STR
26697: PPUSH
26698: CALL_OW 559
// end ;
26702: LD_VAR 0 6
26706: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
26707: LD_INT 0
26709: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
26710: LD_STRING ASRSP(
26712: PUSH
26713: LD_VAR 0 1
26717: STR
26718: PUSH
26719: LD_STRING ,
26721: STR
26722: PUSH
26723: LD_VAR 0 2
26727: STR
26728: PUSH
26729: LD_STRING ,
26731: STR
26732: PUSH
26733: LD_VAR 0 3
26737: STR
26738: PUSH
26739: LD_STRING ,);
26741: STR
26742: PPUSH
26743: CALL_OW 559
// end ;
26747: LD_VAR 0 4
26751: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
26752: LD_INT 0
26754: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
26755: LD_STRING ASRSP(
26757: PUSH
26758: LD_VAR 0 1
26762: STR
26763: PUSH
26764: LD_STRING ,
26766: STR
26767: PUSH
26768: LD_VAR 0 2
26772: STR
26773: PUSH
26774: LD_STRING ,
26776: STR
26777: PUSH
26778: LD_VAR 0 3
26782: STR
26783: PUSH
26784: LD_STRING ,
26786: STR
26787: PUSH
26788: LD_VAR 0 4
26792: STR
26793: PUSH
26794: LD_STRING );
26796: STR
26797: PPUSH
26798: CALL_OW 559
// end ;
26802: LD_VAR 0 5
26806: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
26807: LD_INT 0
26809: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
26810: LD_STRING ASRSP(
26812: PUSH
26813: LD_VAR 0 1
26817: STR
26818: PUSH
26819: LD_STRING ,
26821: STR
26822: PUSH
26823: LD_VAR 0 2
26827: STR
26828: PUSH
26829: LD_STRING ,
26831: STR
26832: PUSH
26833: LD_VAR 0 3
26837: STR
26838: PUSH
26839: LD_STRING ,
26841: STR
26842: PUSH
26843: LD_VAR 0 4
26847: STR
26848: PUSH
26849: LD_STRING ,
26851: STR
26852: PUSH
26853: LD_VAR 0 5
26857: STR
26858: PUSH
26859: LD_STRING );
26861: STR
26862: PPUSH
26863: CALL_OW 559
// end ;
26867: LD_VAR 0 6
26871: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
26872: LD_INT 0
26874: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
26875: LD_STRING USSP(
26877: PUSH
26878: LD_VAR 0 1
26882: STR
26883: PUSH
26884: LD_STRING ,
26886: STR
26887: PUSH
26888: LD_VAR 0 2
26892: STR
26893: PUSH
26894: LD_STRING );
26896: STR
26897: PPUSH
26898: CALL_OW 559
// end ;
26902: LD_VAR 0 3
26906: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
26907: LD_INT 0
26909: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
26910: LD_STRING USSP(
26912: PUSH
26913: LD_VAR 0 1
26917: STR
26918: PUSH
26919: LD_STRING ,
26921: STR
26922: PUSH
26923: LD_VAR 0 2
26927: STR
26928: PUSH
26929: LD_STRING ,
26931: STR
26932: PUSH
26933: LD_VAR 0 3
26937: STR
26938: PUSH
26939: LD_STRING );
26941: STR
26942: PPUSH
26943: CALL_OW 559
// end ;
26947: LD_VAR 0 4
26951: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
26952: LD_INT 0
26954: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
26955: LD_STRING CCSSP(
26957: PUSH
26958: LD_VAR 0 1
26962: STR
26963: PUSH
26964: LD_STRING ,{
26966: STR
26967: PUSH
26968: LD_VAR 0 2
26972: STR
26973: PUSH
26974: LD_STRING ,
26976: STR
26977: PUSH
26978: LD_VAR 0 3
26982: STR
26983: PUSH
26984: LD_STRING ,
26986: STR
26987: PUSH
26988: LD_VAR 0 4
26992: STR
26993: PUSH
26994: LD_STRING });
26996: STR
26997: PPUSH
26998: CALL_OW 559
// end ;
27002: LD_VAR 0 5
27006: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
27007: LD_INT 0
27009: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
27010: LD_STRING CCSSP(
27012: PUSH
27013: LD_VAR 0 1
27017: STR
27018: PUSH
27019: LD_STRING ,
27021: STR
27022: PUSH
27023: LD_VAR 0 2
27027: STR
27028: PUSH
27029: LD_STRING );
27031: STR
27032: PPUSH
27033: CALL_OW 559
// end ;
27037: LD_VAR 0 3
27041: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
27042: LD_INT 0
27044: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
27045: LD_STRING ASP(
27047: PUSH
27048: LD_VAR 0 1
27052: STR
27053: PUSH
27054: LD_STRING ,
27056: STR
27057: PUSH
27058: LD_VAR 0 2
27062: STR
27063: PUSH
27064: LD_STRING ,
27066: STR
27067: PUSH
27068: LD_VAR 0 3
27072: STR
27073: PUSH
27074: LD_STRING );
27076: STR
27077: PPUSH
27078: CALL_OW 559
// end ;
27082: LD_VAR 0 4
27086: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
27087: LD_INT 0
27089: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
27090: LD_STRING USP(
27092: PUSH
27093: LD_VAR 0 1
27097: STR
27098: PUSH
27099: LD_STRING ,
27101: STR
27102: PUSH
27103: LD_VAR 0 2
27107: STR
27108: PUSH
27109: LD_STRING ,
27111: STR
27112: PUSH
27113: LD_VAR 0 3
27117: STR
27118: PUSH
27119: LD_STRING );
27121: STR
27122: PPUSH
27123: CALL_OW 559
// end ;
27127: LD_VAR 0 4
27131: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
27132: LD_INT 0
27134: PPUSH
27135: PPUSH
// for i = 1 to 8 do
27136: LD_ADDR_VAR 0 4
27140: PUSH
27141: DOUBLE
27142: LD_INT 1
27144: DEC
27145: ST_TO_ADDR
27146: LD_INT 8
27148: PUSH
27149: FOR_TO
27150: IFFALSE 27197
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
27152: LD_STRING USP(
27154: PUSH
27155: LD_VAR 0 1
27159: STR
27160: PUSH
27161: LD_STRING ,
27163: STR
27164: PUSH
27165: LD_VAR 0 4
27169: STR
27170: PUSH
27171: LD_STRING ,
27173: STR
27174: PUSH
27175: LD_VAR 0 2
27179: PUSH
27180: LD_VAR 0 4
27184: ARRAY
27185: STR
27186: PUSH
27187: LD_STRING );
27189: STR
27190: PPUSH
27191: CALL_OW 559
27195: GO 27149
27197: POP
27198: POP
// end ;
27199: LD_VAR 0 3
27203: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
27204: LD_INT 0
27206: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
27207: LD_STRING ASC(
27209: PUSH
27210: LD_VAR 0 1
27214: STR
27215: PUSH
27216: LD_STRING ,
27218: STR
27219: PUSH
27220: LD_VAR 0 2
27224: STR
27225: PUSH
27226: LD_STRING ,
27228: STR
27229: PUSH
27230: LD_VAR 0 3
27234: STR
27235: PUSH
27236: LD_STRING ,
27238: STR
27239: PUSH
27240: LD_VAR 0 4
27244: STR
27245: PUSH
27246: LD_STRING );
27248: STR
27249: PPUSH
27250: CALL_OW 559
// end ;
27254: LD_VAR 0 5
27258: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
27259: LD_INT 0
27261: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
27262: LD_STRING USC(
27264: PUSH
27265: LD_VAR 0 1
27269: STR
27270: PUSH
27271: LD_STRING ,{
27273: STR
27274: PUSH
27275: LD_VAR 0 2
27279: PUSH
27280: LD_INT 1
27282: ARRAY
27283: STR
27284: PUSH
27285: LD_STRING ,
27287: STR
27288: PUSH
27289: LD_VAR 0 2
27293: PUSH
27294: LD_INT 2
27296: ARRAY
27297: STR
27298: PUSH
27299: LD_STRING ,
27301: STR
27302: PUSH
27303: LD_VAR 0 2
27307: PUSH
27308: LD_INT 3
27310: ARRAY
27311: STR
27312: PUSH
27313: LD_STRING ,
27315: STR
27316: PUSH
27317: LD_VAR 0 2
27321: PUSH
27322: LD_INT 4
27324: ARRAY
27325: STR
27326: PUSH
27327: LD_STRING ,
27329: STR
27330: PUSH
27331: LD_VAR 0 2
27335: PUSH
27336: LD_INT 5
27338: ARRAY
27339: STR
27340: PUSH
27341: LD_STRING ,
27343: STR
27344: PUSH
27345: LD_VAR 0 2
27349: PUSH
27350: LD_INT 6
27352: ARRAY
27353: STR
27354: PUSH
27355: LD_STRING ,
27357: STR
27358: PUSH
27359: LD_VAR 0 2
27363: PUSH
27364: LD_INT 7
27366: ARRAY
27367: STR
27368: PUSH
27369: LD_STRING ,
27371: STR
27372: PUSH
27373: LD_VAR 0 2
27377: PUSH
27378: LD_INT 8
27380: ARRAY
27381: STR
27382: PUSH
27383: LD_STRING });
27385: STR
27386: PPUSH
27387: CALL_OW 559
// end ; end_of_file
27391: LD_VAR 0 3
27395: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
27396: LD_INT 0
27398: PPUSH
27399: PPUSH
27400: PPUSH
27401: PPUSH
27402: PPUSH
27403: PPUSH
27404: PPUSH
27405: PPUSH
27406: PPUSH
// for i := 1 to 8 do
27407: LD_ADDR_VAR 0 2
27411: PUSH
27412: DOUBLE
27413: LD_INT 1
27415: DEC
27416: ST_TO_ADDR
27417: LD_INT 8
27419: PUSH
27420: FOR_TO
27421: IFFALSE 27805
// begin if Side_Positions [ i ] then
27423: LD_EXP 23
27427: PUSH
27428: LD_VAR 0 2
27432: ARRAY
27433: IFFALSE 27803
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
27435: LD_ADDR_VAR 0 7
27439: PUSH
27440: LD_INT 22
27442: PUSH
27443: LD_VAR 0 2
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 21
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PPUSH
27466: CALL_OW 69
27470: PUSH
27471: LD_INT 0
27473: PLUS
27474: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27475: LD_ADDR_VAR 0 9
27479: PUSH
27480: LD_INT 22
27482: PUSH
27483: LD_VAR 0 2
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 2
27494: PUSH
27495: LD_INT 30
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 30
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: LIST
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PPUSH
27524: CALL_OW 69
27528: ST_TO_ADDR
// crates := 0 ;
27529: LD_ADDR_VAR 0 4
27533: PUSH
27534: LD_INT 0
27536: ST_TO_ADDR
// oil := 0 ;
27537: LD_ADDR_VAR 0 5
27541: PUSH
27542: LD_INT 0
27544: ST_TO_ADDR
// sib := 0 ;
27545: LD_ADDR_VAR 0 6
27549: PUSH
27550: LD_INT 0
27552: ST_TO_ADDR
// if bases then
27553: LD_VAR 0 9
27557: IFFALSE 27663
// begin for j in bases do
27559: LD_ADDR_VAR 0 3
27563: PUSH
27564: LD_VAR 0 9
27568: PUSH
27569: FOR_IN
27570: IFFALSE 27661
// begin base := GetBase ( j ) ;
27572: LD_ADDR_VAR 0 8
27576: PUSH
27577: LD_VAR 0 3
27581: PPUSH
27582: CALL_OW 274
27586: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
27587: LD_ADDR_VAR 0 4
27591: PUSH
27592: LD_VAR 0 4
27596: PUSH
27597: LD_VAR 0 8
27601: PPUSH
27602: LD_INT 1
27604: PPUSH
27605: CALL_OW 275
27609: PLUS
27610: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
27611: LD_ADDR_VAR 0 5
27615: PUSH
27616: LD_VAR 0 5
27620: PUSH
27621: LD_VAR 0 8
27625: PPUSH
27626: LD_INT 2
27628: PPUSH
27629: CALL_OW 275
27633: PLUS
27634: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
27635: LD_ADDR_VAR 0 6
27639: PUSH
27640: LD_VAR 0 6
27644: PUSH
27645: LD_VAR 0 8
27649: PPUSH
27650: LD_INT 3
27652: PPUSH
27653: CALL_OW 275
27657: PLUS
27658: ST_TO_ADDR
// end ;
27659: GO 27569
27661: POP
27662: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
27663: LD_STRING setSpecText(
27665: PUSH
27666: LD_VAR 0 2
27670: STR
27671: PUSH
27672: LD_STRING ,
27674: STR
27675: PUSH
27676: LD_INT 2
27678: STR
27679: PUSH
27680: LD_STRING ,
27682: STR
27683: PUSH
27684: LD_VAR 0 4
27688: STR
27689: PUSH
27690: LD_STRING )
27692: STR
27693: PPUSH
27694: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
27698: LD_STRING setSpecText(
27700: PUSH
27701: LD_VAR 0 2
27705: STR
27706: PUSH
27707: LD_STRING ,
27709: STR
27710: PUSH
27711: LD_INT 3
27713: STR
27714: PUSH
27715: LD_STRING ,
27717: STR
27718: PUSH
27719: LD_VAR 0 5
27723: STR
27724: PUSH
27725: LD_STRING )
27727: STR
27728: PPUSH
27729: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
27733: LD_STRING setSpecText(
27735: PUSH
27736: LD_VAR 0 2
27740: STR
27741: PUSH
27742: LD_STRING ,
27744: STR
27745: PUSH
27746: LD_INT 4
27748: STR
27749: PUSH
27750: LD_STRING ,
27752: STR
27753: PUSH
27754: LD_VAR 0 6
27758: STR
27759: PUSH
27760: LD_STRING )
27762: STR
27763: PPUSH
27764: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
27768: LD_STRING setSpecText(
27770: PUSH
27771: LD_VAR 0 2
27775: STR
27776: PUSH
27777: LD_STRING ,
27779: STR
27780: PUSH
27781: LD_INT 5
27783: STR
27784: PUSH
27785: LD_STRING ,
27787: STR
27788: PUSH
27789: LD_VAR 0 7
27793: STR
27794: PUSH
27795: LD_STRING )
27797: STR
27798: PPUSH
27799: CALL_OW 559
// end ; end ;
27803: GO 27420
27805: POP
27806: POP
// end ;
27807: LD_VAR 0 1
27811: RET
// every 0 0$1 do
27812: GO 27814
27814: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
27815: LD_STRING setSpecLogoNumber(
27817: PUSH
27818: LD_INT 2
27820: STR
27821: PUSH
27822: LD_STRING ,
27824: STR
27825: PUSH
27826: LD_INT 1
27828: STR
27829: PUSH
27830: LD_STRING )
27832: STR
27833: PPUSH
27834: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
27838: LD_STRING setSpecLogoNumber(
27840: PUSH
27841: LD_INT 3
27843: STR
27844: PUSH
27845: LD_STRING ,
27847: STR
27848: PUSH
27849: LD_INT 2
27851: STR
27852: PUSH
27853: LD_STRING )
27855: STR
27856: PPUSH
27857: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
27861: LD_STRING setSpecLogoNumber(
27863: PUSH
27864: LD_INT 4
27866: STR
27867: PUSH
27868: LD_STRING ,
27870: STR
27871: PUSH
27872: LD_INT 3
27874: STR
27875: PUSH
27876: LD_STRING )
27878: STR
27879: PPUSH
27880: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
27884: LD_STRING setSpecLogoNumber(
27886: PUSH
27887: LD_INT 5
27889: STR
27890: PUSH
27891: LD_STRING ,
27893: STR
27894: PUSH
27895: LD_INT 4
27897: STR
27898: PUSH
27899: LD_STRING )
27901: STR
27902: PPUSH
27903: CALL_OW 559
// end ;
27907: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
27908: LD_INT 2
27910: PUSH
27911: LD_INT 30
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 30
27923: PUSH
27924: LD_INT 1
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: PPUSH
27936: CALL_OW 69
27940: IFFALSE 27950
27942: GO 27944
27944: DISABLE
// begin enable ;
27945: ENABLE
// UpdateSpectatorBar ;
27946: CALL 27396 0 0
// end ;
27950: END
