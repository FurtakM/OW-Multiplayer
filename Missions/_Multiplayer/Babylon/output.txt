// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export Position_Sides ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 49
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 3 ;
 151: LD_ADDR_EXP 49
 155: PUSH
 156: LD_INT 3
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// for i := 1 to 8 do
 356: LD_ADDR_VAR 0 2
 360: PUSH
 361: DOUBLE
 362: LD_INT 1
 364: DEC
 365: ST_TO_ADDR
 366: LD_INT 8
 368: PUSH
 369: FOR_TO
 370: IFFALSE 457
// if Multiplayer_GetPlayerIsSpec ( i ) then
 372: LD_VAR 0 2
 376: PPUSH
 377: CALL_OW 530
 381: IFFALSE 455
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 383: LD_ADDR_EXP 23
 387: PUSH
 388: LD_EXP 23
 392: PPUSH
 393: LD_VAR 0 2
 397: PPUSH
 398: LD_INT 0
 400: PPUSH
 401: CALL_OW 1
 405: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 406: LD_ADDR_EXP 22
 410: PUSH
 411: LD_EXP 22
 415: PPUSH
 416: LD_EXP 21
 420: PUSH
 421: LD_VAR 0 2
 425: ARRAY
 426: PPUSH
 427: LD_EXP 22
 431: PUSH
 432: LD_EXP 21
 436: PUSH
 437: LD_VAR 0 2
 441: ARRAY
 442: ARRAY
 443: PUSH
 444: LD_VAR 0 2
 448: DIFF
 449: PPUSH
 450: CALL_OW 1
 454: ST_TO_ADDR
// end ;
 455: GO 369
 457: POP
 458: POP
// Position_Sides := [ 0 , 0 , 0 , 0 ] ;
 459: LD_ADDR_EXP 29
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 0
 472: PUSH
 473: LD_INT 0
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// for i := 1 to 8 do
 482: LD_ADDR_VAR 0 2
 486: PUSH
 487: DOUBLE
 488: LD_INT 1
 490: DEC
 491: ST_TO_ADDR
 492: LD_INT 8
 494: PUSH
 495: FOR_TO
 496: IFFALSE 543
// if Side_Positions [ i ] then
 498: LD_EXP 23
 502: PUSH
 503: LD_VAR 0 2
 507: ARRAY
 508: IFFALSE 541
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 510: LD_ADDR_EXP 29
 514: PUSH
 515: LD_EXP 29
 519: PPUSH
 520: LD_EXP 23
 524: PUSH
 525: LD_VAR 0 2
 529: ARRAY
 530: PPUSH
 531: LD_VAR 0 2
 535: PPUSH
 536: CALL_OW 1
 540: ST_TO_ADDR
 541: GO 495
 543: POP
 544: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 545: LD_ADDR_EXP 25
 549: PUSH
 550: LD_EXP 21
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: EMPTY
 559: LIST
 560: DIFF
 561: PUSH
 562: LD_INT 1
 564: GREATER
 565: ST_TO_ADDR
// if Multiplayer then
 566: LD_OWVAR 4
 570: IFFALSE 842
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 572: LD_ADDR_EXP 51
 576: PUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 426
 584: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 585: LD_ADDR_EXP 52
 589: PUSH
 590: LD_INT 1
 592: PPUSH
 593: CALL_OW 426
 597: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 598: LD_ADDR_EXP 53
 602: PUSH
 603: LD_INT 2
 605: PPUSH
 606: CALL_OW 426
 610: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 611: LD_ADDR_EXP 54
 615: PUSH
 616: LD_INT 3
 618: PPUSH
 619: CALL_OW 426
 623: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 624: LD_ADDR_EXP 55
 628: PUSH
 629: LD_INT 4
 631: PPUSH
 632: CALL_OW 426
 636: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 637: LD_ADDR_EXP 56
 641: PUSH
 642: LD_INT 5
 644: PPUSH
 645: CALL_OW 426
 649: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 650: LD_ADDR_EXP 58
 654: PUSH
 655: LD_INT 10
 657: PPUSH
 658: CALL_OW 426
 662: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 663: LD_ADDR_EXP 59
 667: PUSH
 668: LD_INT 11
 670: PPUSH
 671: CALL_OW 426
 675: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 676: LD_ADDR_EXP 60
 680: PUSH
 681: LD_INT 12
 683: PPUSH
 684: CALL_OW 426
 688: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 689: LD_ADDR_EXP 62
 693: PUSH
 694: LD_INT 13
 696: PPUSH
 697: CALL_OW 426
 701: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 702: LD_ADDR_EXP 61
 706: PUSH
 707: LD_INT 14
 709: PPUSH
 710: CALL_OW 426
 714: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 715: LD_ADDR_EXP 63
 719: PUSH
 720: LD_INT 15
 722: PPUSH
 723: CALL_OW 426
 727: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 728: LD_ADDR_EXP 1
 732: PUSH
 733: LD_INT 6
 735: PPUSH
 736: CALL_OW 426
 740: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 741: LD_ADDR_EXP 2
 745: PUSH
 746: LD_INT 7
 748: PPUSH
 749: CALL_OW 426
 753: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 754: LD_ADDR_EXP 4
 758: PUSH
 759: LD_INT 8
 761: PPUSH
 762: CALL_OW 426
 766: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 767: LD_ADDR_EXP 3
 771: PUSH
 772: LD_INT 9
 774: PPUSH
 775: CALL_OW 426
 779: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 780: LD_ADDR_EXP 5
 784: PUSH
 785: LD_INT 16
 787: PPUSH
 788: CALL_OW 426
 792: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 17
 800: PPUSH
 801: CALL_OW 426
 805: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 806: LD_ADDR_EXP 64
 810: PUSH
 811: LD_INT 20
 813: PPUSH
 814: CALL_OW 426
 818: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 819: LD_ADDR_VAR 0 3
 823: PUSH
 824: LD_INT 22
 826: PPUSH
 827: CALL_OW 426
 831: ST_TO_ADDR
// def_win_rules = 0 ;
 832: LD_ADDR_EXP 19
 836: PUSH
 837: LD_INT 0
 839: ST_TO_ADDR
// end else
 840: GO 1014
// begin Randomize ;
 842: CALL_OW 10
// def_base_level := 2 ;
 846: LD_ADDR_EXP 51
 850: PUSH
 851: LD_INT 2
 853: ST_TO_ADDR
// def_amount_of_people := 1 ;
 854: LD_ADDR_EXP 52
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// def_skill_level := 1 ;
 862: LD_ADDR_EXP 53
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// def_starting_resources := 2 ;
 870: LD_ADDR_EXP 54
 874: PUSH
 875: LD_INT 2
 877: ST_TO_ADDR
// def_shipments_density := 1 ;
 878: LD_ADDR_EXP 55
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 886: LD_ADDR_EXP 56
 890: PUSH
 891: LD_INT 0
 893: ST_TO_ADDR
// def_shared_vision := 1 ;
 894: LD_ADDR_EXP 58
 898: PUSH
 899: LD_INT 1
 901: ST_TO_ADDR
// def_morale_flags := 1 ;
 902: LD_ADDR_EXP 59
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// def_siberite_detection := 1 ;
 910: LD_ADDR_EXP 60
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 918: LD_ADDR_EXP 62
 922: PUSH
 923: LD_INT 3
 925: ST_TO_ADDR
// def_people_respawning := 2 ;
 926: LD_ADDR_EXP 61
 930: PUSH
 931: LD_INT 2
 933: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 934: LD_ADDR_EXP 63
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// def_artefact_one := 1 ;
 942: LD_ADDR_EXP 1
 946: PUSH
 947: LD_INT 1
 949: ST_TO_ADDR
// def_artefact_two := 1 ;
 950: LD_ADDR_EXP 2
 954: PUSH
 955: LD_INT 1
 957: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 958: LD_ADDR_EXP 4
 962: PUSH
 963: LD_INT 2
 965: ST_TO_ADDR
// def_artefact_three := 1 ;
 966: LD_ADDR_EXP 3
 970: PUSH
 971: LD_INT 1
 973: ST_TO_ADDR
// def_kings_age := 1 ;
 974: LD_ADDR_EXP 5
 978: PUSH
 979: LD_INT 1
 981: ST_TO_ADDR
// def_public_score := 0 ;
 982: LD_ADDR_EXP 6
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// def_builduptime := 1 ;
 990: LD_ADDR_EXP 64
 994: PUSH
 995: LD_INT 1
 997: ST_TO_ADDR
// tech_level = 4 ;
 998: LD_ADDR_VAR 0 3
1002: PUSH
1003: LD_INT 4
1005: ST_TO_ADDR
// def_win_rules = 0 ;
1006: LD_ADDR_EXP 19
1010: PUSH
1011: LD_INT 0
1013: ST_TO_ADDR
// end ; InitGameRules ;
1014: CALL 14270 0 0
// if def_game_rules = 0 then
1018: LD_EXP 50
1022: PUSH
1023: LD_INT 0
1025: EQUAL
1026: IFFALSE 1053
// begin if isSGUI then
1028: LD_OWVAR 83
1032: IFFALSE 1040
// setMpTechs ( ) else
1034: CALL 21907 0 0
1038: GO 1053
// begin SetMpTechLevel ( tech_level + 1 ) ;
1040: LD_VAR 0 3
1044: PUSH
1045: LD_INT 1
1047: PLUS
1048: PPUSH
1049: CALL 22054 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1053: LD_ADDR_EXP 7
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: LD_INT 1
1066: PUSH
1067: LD_INT 1
1069: PUSH
1070: EMPTY
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 51
1080: PUSH
1081: LD_INT 1
1083: PLUS
1084: ARRAY
1085: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
1086: LD_ADDR_EXP 8
1090: PUSH
1091: LD_INT 0
1093: PUSH
1094: LD_INT 0
1096: PUSH
1097: LD_INT 2
1099: PUSH
1100: LD_INT 3
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_EXP 51
1113: PUSH
1114: LD_INT 1
1116: PLUS
1117: ARRAY
1118: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1119: LD_ADDR_EXP 9
1123: PUSH
1124: LD_EXP 52
1128: PUSH
1129: LD_INT 4
1131: PLUS
1132: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1133: LD_ADDR_EXP 10
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: LD_INT 4
1146: PUSH
1147: LD_INT 5
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: PUSH
1156: LD_EXP 53
1160: PUSH
1161: LD_INT 1
1163: PLUS
1164: ARRAY
1165: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1166: LD_ADDR_EXP 12
1170: PUSH
1171: LD_INT 0
1173: PUSH
1174: LD_INT 0
1176: PUSH
1177: LD_INT 0
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 30
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: LD_INT 0
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 50
1201: PUSH
1202: LD_INT 20
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 80
1215: PUSH
1216: LD_INT 40
1218: PUSH
1219: LD_INT 20
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: LD_EXP 54
1237: PUSH
1238: LD_INT 1
1240: PLUS
1241: ARRAY
1242: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1243: LD_ADDR_EXP 11
1247: PUSH
1248: LD_INT 10
1250: PUSH
1251: EMPTY
1252: LIST
1253: PUSH
1254: LD_INT 7
1256: PUSH
1257: LD_INT 14
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PUSH
1264: LD_INT 6
1266: PUSH
1267: LD_INT 12
1269: PUSH
1270: LD_INT 18
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 5
1280: PUSH
1281: LD_INT 10
1283: PUSH
1284: LD_INT 15
1286: PUSH
1287: LD_INT 20
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: PUSH
1302: LD_EXP 54
1306: PUSH
1307: LD_INT 1
1309: PLUS
1310: ARRAY
1311: ST_TO_ADDR
// shipments_density := 380 - ( def_shipments_density * 2 ) ;
1312: LD_ADDR_EXP 13
1316: PUSH
1317: LD_INT 380
1319: PUSH
1320: LD_EXP 55
1324: PUSH
1325: LD_INT 2
1327: MUL
1328: MINUS
1329: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1330: LD_ADDR_EXP 15
1334: PUSH
1335: LD_INT 0
1337: PUSH
1338: LD_INT 1
1340: PUSH
1341: LD_INT 2
1343: PUSH
1344: LD_INT 3
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: PUSH
1353: LD_EXP 62
1357: PUSH
1358: LD_INT 1
1360: PLUS
1361: ARRAY
1362: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1363: LD_ADDR_EXP 16
1367: PUSH
1368: LD_INT 0
1370: PUSH
1371: LD_INT 12600
1373: PUSH
1374: LD_INT 2100
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: PUSH
1382: LD_EXP 61
1386: PUSH
1387: LD_INT 1
1389: PLUS
1390: ARRAY
1391: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1392: LD_ADDR_EXP 17
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 21000
1402: PUSH
1403: LD_INT 4200
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PUSH
1411: LD_EXP 61
1415: PUSH
1416: LD_INT 1
1418: PLUS
1419: ARRAY
1420: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1421: LD_ADDR_EXP 14
1425: PUSH
1426: LD_INT 1
1428: NEG
1429: PUSH
1430: LD_INT 350
1432: PUSH
1433: LD_INT 700
1435: PUSH
1436: LD_INT 1400
1438: PUSH
1439: LD_INT 0
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_EXP 59
1453: PUSH
1454: LD_INT 1
1456: PLUS
1457: ARRAY
1458: ST_TO_ADDR
// battle_flags_id := [ ] ;
1459: LD_ADDR_EXP 34
1463: PUSH
1464: EMPTY
1465: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1466: LD_ADDR_EXP 18
1470: PUSH
1471: LD_INT 0
1473: PUSH
1474: LD_INT 1
1476: PUSH
1477: LD_INT 63000
1479: PUSH
1480: LD_INT 126000
1482: PUSH
1483: LD_INT 189000
1485: PUSH
1486: LD_INT 252000
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_EXP 63
1501: PUSH
1502: LD_INT 1
1504: PLUS
1505: ARRAY
1506: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1507: LD_ADDR_EXP 20
1511: PUSH
1512: LD_INT 500
1514: PUSH
1515: LD_INT 1000
1517: PUSH
1518: LD_INT 1500
1520: PUSH
1521: LD_INT 2000
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 5
1534: PUSH
1535: LD_INT 1
1537: PLUS
1538: ARRAY
1539: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
1540: LD_ADDR_EXP 47
1544: PUSH
1545: LD_INT 21
1547: PUSH
1548: LD_INT 23
1550: PUSH
1551: LD_INT 20
1553: PUSH
1554: LD_INT 22
1556: PUSH
1557: EMPTY
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 1
1567: RET
// function init_map ; var i ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1572: LD_ADDR_EXP 33
1576: PUSH
1577: LD_INT 43
1579: PUSH
1580: LD_INT 9
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: LD_INT 123
1589: PUSH
1590: LD_INT 10
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PUSH
1597: LD_INT 113
1599: PUSH
1600: LD_INT 155
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 186
1609: PUSH
1610: LD_INT 133
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: LIST
1622: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1623: LD_ADDR_EXP 30
1627: PUSH
1628: LD_INT 18
1630: PUSH
1631: LD_INT 17
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 156
1644: PUSH
1645: LD_INT 20
1647: PUSH
1648: LD_INT 3
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 83
1658: PUSH
1659: LD_INT 140
1661: PUSH
1662: LD_INT 1
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 216
1672: PUSH
1673: LD_INT 143
1675: PUSH
1676: LD_INT 5
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: LIST
1688: LIST
1689: ST_TO_ADDR
// for i in depot_def do
1690: LD_ADDR_VAR 0 2
1694: PUSH
1695: LD_EXP 30
1699: PUSH
1700: FOR_IN
1701: IFFALSE 1775
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1703: LD_ADDR_EXP 32
1707: PUSH
1708: LD_EXP 32
1712: PUSH
1713: LD_VAR 0 2
1717: PUSH
1718: LD_INT 1
1720: ARRAY
1721: PPUSH
1722: LD_VAR 0 2
1726: PUSH
1727: LD_INT 3
1729: ARRAY
1730: PPUSH
1731: LD_INT 6
1733: PPUSH
1734: CALL_OW 272
1738: PUSH
1739: LD_VAR 0 2
1743: PUSH
1744: LD_INT 2
1746: ARRAY
1747: PPUSH
1748: LD_VAR 0 2
1752: PUSH
1753: LD_INT 3
1755: ARRAY
1756: PPUSH
1757: LD_INT 6
1759: PPUSH
1760: CALL_OW 273
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: EMPTY
1770: LIST
1771: ADD
1772: ST_TO_ADDR
1773: GO 1700
1775: POP
1776: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1777: LD_ADDR_EXP 31
1781: PUSH
1782: LD_INT 30
1784: PUSH
1785: LD_INT 36
1787: PUSH
1788: LD_INT 0
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: PUSH
1796: LD_INT 44
1798: PUSH
1799: LD_INT 21
1801: PUSH
1802: LD_INT 4
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 43
1812: PUSH
1813: LD_INT 33
1815: PUSH
1816: LD_INT 5
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 165
1831: PUSH
1832: LD_INT 34
1834: PUSH
1835: LD_INT 0
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 137
1845: PUSH
1846: LD_INT 18
1848: PUSH
1849: LD_INT 1
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 153
1859: PUSH
1860: LD_INT 37
1862: PUSH
1863: LD_INT 0
1865: PUSH
1866: EMPTY
1867: LIST
1868: LIST
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: PUSH
1876: LD_INT 86
1878: PUSH
1879: LD_INT 120
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 105
1892: PUSH
1893: LD_INT 147
1895: PUSH
1896: LD_INT 4
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 68
1906: PUSH
1907: LD_INT 118
1909: PUSH
1910: LD_INT 2
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 199
1925: PUSH
1926: LD_INT 144
1928: PUSH
1929: LD_INT 1
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: PUSH
1937: LD_INT 207
1939: PUSH
1940: LD_INT 119
1942: PUSH
1943: LD_INT 3
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 195
1953: PUSH
1954: LD_INT 118
1956: PUSH
1957: LD_INT 2
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: ST_TO_ADDR
// if not def_extra_oil_deposits then
1976: LD_EXP 56
1980: NOT
1981: IFFALSE 2022
// for i in extra_oil_deposits_locations do
1983: LD_ADDR_VAR 0 2
1987: PUSH
1988: LD_EXP 33
1992: PUSH
1993: FOR_IN
1994: IFFALSE 2020
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1996: LD_VAR 0 2
2000: PUSH
2001: LD_INT 1
2003: ARRAY
2004: PPUSH
2005: LD_VAR 0 2
2009: PUSH
2010: LD_INT 2
2012: ARRAY
2013: PPUSH
2014: CALL_OW 63
2018: GO 1993
2020: POP
2021: POP
// end ;
2022: LD_VAR 0 1
2026: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2027: LD_INT 0
2029: PPUSH
2030: PPUSH
2031: PPUSH
// if not Team_Game then
2032: LD_EXP 25
2036: NOT
2037: IFFALSE 2135
// begin for i = 1 to 8 do
2039: LD_ADDR_VAR 0 2
2043: PUSH
2044: DOUBLE
2045: LD_INT 1
2047: DEC
2048: ST_TO_ADDR
2049: LD_INT 8
2051: PUSH
2052: FOR_TO
2053: IFFALSE 2131
// for j = 1 to 8 do
2055: LD_ADDR_VAR 0 3
2059: PUSH
2060: DOUBLE
2061: LD_INT 1
2063: DEC
2064: ST_TO_ADDR
2065: LD_INT 8
2067: PUSH
2068: FOR_TO
2069: IFFALSE 2127
// if i <> j then
2071: LD_VAR 0 2
2075: PUSH
2076: LD_VAR 0 3
2080: NONEQUAL
2081: IFFALSE 2105
// SetAttitude ( i , j , att_neutral , true ) else
2083: LD_VAR 0 2
2087: PPUSH
2088: LD_VAR 0 3
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: CALL_OW 80
2103: GO 2125
// SetAttitude ( i , j , att_friend , true ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: LD_VAR 0 3
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 80
2125: GO 2068
2127: POP
2128: POP
2129: GO 2052
2131: POP
2132: POP
// end else
2133: GO 2310
// begin if def_shared_vision then
2135: LD_EXP 58
2139: IFFALSE 2204
// begin for i in Teams do
2141: LD_ADDR_VAR 0 2
2145: PUSH
2146: LD_EXP 22
2150: PUSH
2151: FOR_IN
2152: IFFALSE 2202
// for j = 2 to i do
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: DOUBLE
2160: LD_INT 2
2162: DEC
2163: ST_TO_ADDR
2164: LD_VAR 0 2
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2198
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2172: LD_VAR 0 2
2176: PUSH
2177: LD_VAR 0 3
2181: ARRAY
2182: PPUSH
2183: LD_VAR 0 2
2187: PUSH
2188: LD_INT 1
2190: ARRAY
2191: PPUSH
2192: CALL_OW 343
2196: GO 2169
2198: POP
2199: POP
2200: GO 2151
2202: POP
2203: POP
// end ; for i = 1 to 8 do
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: DOUBLE
2210: LD_INT 1
2212: DEC
2213: ST_TO_ADDR
2214: LD_INT 8
2216: PUSH
2217: FOR_TO
2218: IFFALSE 2308
// for j = 1 to 8 do
2220: LD_ADDR_VAR 0 3
2224: PUSH
2225: DOUBLE
2226: LD_INT 1
2228: DEC
2229: ST_TO_ADDR
2230: LD_INT 8
2232: PUSH
2233: FOR_TO
2234: IFFALSE 2304
// if Side_Teams [ i ] = Side_Teams [ j ] then
2236: LD_EXP 21
2240: PUSH
2241: LD_VAR 0 2
2245: ARRAY
2246: PUSH
2247: LD_EXP 21
2251: PUSH
2252: LD_VAR 0 3
2256: ARRAY
2257: EQUAL
2258: IFFALSE 2282
// SetAttitude ( i , j , att_friend , true ) else
2260: LD_VAR 0 2
2264: PPUSH
2265: LD_VAR 0 3
2269: PPUSH
2270: LD_INT 1
2272: PPUSH
2273: LD_INT 1
2275: PPUSH
2276: CALL_OW 80
2280: GO 2302
// SetAttitude ( i , j , att_enemy , true ) ;
2282: LD_VAR 0 2
2286: PPUSH
2287: LD_VAR 0 3
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL_OW 80
2302: GO 2233
2304: POP
2305: POP
2306: GO 2217
2308: POP
2309: POP
// end ; end ;
2310: LD_VAR 0 1
2314: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2315: LD_INT 0
2317: PPUSH
2318: PPUSH
2319: PPUSH
2320: PPUSH
// result := [ ] ;
2321: LD_ADDR_VAR 0 7
2325: PUSH
2326: EMPTY
2327: ST_TO_ADDR
// for i := 1 to count do
2328: LD_ADDR_VAR 0 8
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_VAR 0 1
2342: PUSH
2343: FOR_TO
2344: IFFALSE 2762
// begin uc_direction := Rand ( 0 , 5 ) ;
2346: LD_ADDR_OWVAR 24
2350: PUSH
2351: LD_INT 0
2353: PPUSH
2354: LD_INT 5
2356: PPUSH
2357: CALL_OW 12
2361: ST_TO_ADDR
// if commander then
2362: LD_LOC 1
2366: IFFALSE 2475
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2368: LD_ADDR_OWVAR 26
2372: PUSH
2373: LD_OWVAR 19
2377: PUSH
2378: LD_OWVAR 20
2382: ARRAY
2383: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2384: LD_INT 1
2386: PPUSH
2387: LD_INT 2
2389: PPUSH
2390: CALL_OW 12
2394: PPUSH
2395: LD_VAR 0 2
2399: PPUSH
2400: LD_EXP 10
2404: PUSH
2405: LD_INT 2
2407: PLUS
2408: PPUSH
2409: CALL_OW 380
// hc_importance := 105 ;
2413: LD_ADDR_OWVAR 32
2417: PUSH
2418: LD_INT 105
2420: ST_TO_ADDR
// commander := false ;
2421: LD_ADDR_LOC 1
2425: PUSH
2426: LD_INT 0
2428: ST_TO_ADDR
// if Multiplayer then
2429: LD_OWVAR 4
2433: IFFALSE 2473
// begin hc_gallery := MULTIAVATARS ;
2435: LD_ADDR_OWVAR 33
2439: PUSH
2440: LD_STRING MULTIAVATARS
2442: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2443: LD_ADDR_OWVAR 34
2447: PUSH
2448: LD_OWVAR 20
2452: PPUSH
2453: CALL_OW 525
2457: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2458: LD_ADDR_OWVAR 27
2462: PUSH
2463: LD_OWVAR 20
2467: PPUSH
2468: CALL_OW 526
2472: ST_TO_ADDR
// end ; end else
2473: GO 2538
// begin hc_name :=  ;
2475: LD_ADDR_OWVAR 26
2479: PUSH
2480: LD_STRING 
2482: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2483: LD_INT 1
2485: PPUSH
2486: LD_INT 2
2488: PPUSH
2489: CALL_OW 12
2493: PPUSH
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_EXP 10
2503: PPUSH
2504: CALL_OW 380
// hc_importance := 0 ;
2508: LD_ADDR_OWVAR 32
2512: PUSH
2513: LD_INT 0
2515: ST_TO_ADDR
// if Multiplayer then
2516: LD_OWVAR 4
2520: IFFALSE 2538
// begin hc_gallery :=  ;
2522: LD_ADDR_OWVAR 33
2526: PUSH
2527: LD_STRING 
2529: ST_TO_ADDR
// hc_face_number := 0 ;
2530: LD_ADDR_OWVAR 34
2534: PUSH
2535: LD_INT 0
2537: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2538: LD_ADDR_VAR 0 10
2542: PUSH
2543: CALL_OW 44
2547: ST_TO_ADDR
// if global_defined then
2548: LD_LOC 3
2552: IFFALSE 2692
// begin if ( cl = class_soldier ) then
2554: LD_VAR 0 2
2558: PUSH
2559: LD_INT 1
2561: EQUAL
2562: IFFALSE 2582
// j := i + soldiers_created else
2564: LD_ADDR_VAR 0 9
2568: PUSH
2569: LD_VAR 0 8
2573: PUSH
2574: LD_LOC 4
2578: PLUS
2579: ST_TO_ADDR
2580: GO 2592
// j := i ;
2582: LD_ADDR_VAR 0 9
2586: PUSH
2587: LD_VAR 0 8
2591: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2592: LD_LOC 2
2596: PUSH
2597: LD_VAR 0 2
2601: ARRAY
2602: PUSH
2603: LD_VAR 0 9
2607: ARRAY
2608: PPUSH
2609: LD_VAR 0 10
2613: PPUSH
2614: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2618: LD_VAR 0 10
2622: PPUSH
2623: LD_INT 2
2625: PPUSH
2626: LD_LOC 2
2630: PUSH
2631: LD_VAR 0 2
2635: ARRAY
2636: PUSH
2637: LD_VAR 0 9
2641: ARRAY
2642: PPUSH
2643: LD_INT 2
2645: PPUSH
2646: CALL_OW 260
2650: PPUSH
2651: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2655: LD_VAR 0 10
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: LD_LOC 2
2667: PUSH
2668: LD_VAR 0 2
2672: ARRAY
2673: PUSH
2674: LD_VAR 0 9
2678: ARRAY
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: CALL_OW 260
2687: PPUSH
2688: CALL_OW 239
// end ; if building then
2692: LD_VAR 0 6
2696: IFFALSE 2714
// PlaceHumanInUnit ( un , building ) else
2698: LD_VAR 0 10
2702: PPUSH
2703: LD_VAR 0 6
2707: PPUSH
2708: CALL_OW 52
2712: GO 2741
// PlaceUnitXYR ( un , x , y , r , false ) ;
2714: LD_VAR 0 10
2718: PPUSH
2719: LD_VAR 0 3
2723: PPUSH
2724: LD_VAR 0 4
2728: PPUSH
2729: LD_VAR 0 5
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL_OW 50
// result := result ^ [ un ] ;
2741: LD_ADDR_VAR 0 7
2745: PUSH
2746: LD_VAR 0 7
2750: PUSH
2751: LD_VAR 0 10
2755: PUSH
2756: EMPTY
2757: LIST
2758: ADD
2759: ST_TO_ADDR
// end ;
2760: GO 2343
2762: POP
2763: POP
// if not global_defined then
2764: LD_LOC 3
2768: NOT
2769: IFFALSE 2847
// if ( global_units >= cl ) then
2771: LD_LOC 2
2775: PUSH
2776: LD_VAR 0 2
2780: GREATEREQUAL
2781: IFFALSE 2822
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2783: LD_ADDR_LOC 2
2787: PUSH
2788: LD_LOC 2
2792: PPUSH
2793: LD_VAR 0 2
2797: PPUSH
2798: LD_LOC 2
2802: PUSH
2803: LD_VAR 0 2
2807: ARRAY
2808: PUSH
2809: LD_VAR 0 7
2813: ADD
2814: PPUSH
2815: CALL_OW 1
2819: ST_TO_ADDR
2820: GO 2847
// global_units := Replace ( global_units , cl , result ) ;
2822: LD_ADDR_LOC 2
2826: PUSH
2827: LD_LOC 2
2831: PPUSH
2832: LD_VAR 0 2
2836: PPUSH
2837: LD_VAR 0 7
2841: PPUSH
2842: CALL_OW 1
2846: ST_TO_ADDR
// if commander then
2847: LD_LOC 1
2851: IFFALSE 2898
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2853: LD_ADDR_EXP 35
2857: PUSH
2858: LD_EXP 35
2862: PPUSH
2863: LD_OWVAR 20
2867: PPUSH
2868: LD_EXP 35
2872: PUSH
2873: LD_OWVAR 20
2877: ARRAY
2878: PUSH
2879: LD_VAR 0 10
2883: ADD
2884: PPUSH
2885: CALL_OW 1
2889: ST_TO_ADDR
// commander := false ;
2890: LD_ADDR_LOC 1
2894: PUSH
2895: LD_INT 0
2897: ST_TO_ADDR
// end ; end ;
2898: LD_VAR 0 7
2902: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2903: LD_INT 0
2905: PPUSH
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
2913: PPUSH
// if side in [ 0 , 9 ] then
2914: LD_VAR 0 1
2918: PUSH
2919: LD_INT 0
2921: PUSH
2922: LD_INT 9
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: IN
2929: IFFALSE 2933
// exit ;
2931: GO 4008
// pos := Side_Positions [ side ] ;
2933: LD_ADDR_VAR 0 3
2937: PUSH
2938: LD_EXP 23
2942: PUSH
2943: LD_VAR 0 1
2947: ARRAY
2948: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2949: LD_ADDR_OWVAR 21
2953: PUSH
2954: LD_EXP 24
2958: PUSH
2959: LD_VAR 0 1
2963: ARRAY
2964: ST_TO_ADDR
// uc_side := side ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_VAR 0 1
2974: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2975: LD_ADDR_VAR 0 4
2979: PUSH
2980: LD_EXP 30
2984: PUSH
2985: LD_VAR 0 3
2989: ARRAY
2990: PUSH
2991: LD_INT 1
2993: ARRAY
2994: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2995: LD_ADDR_VAR 0 5
2999: PUSH
3000: LD_EXP 30
3004: PUSH
3005: LD_VAR 0 3
3009: ARRAY
3010: PUSH
3011: LD_INT 2
3013: ARRAY
3014: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3015: LD_ADDR_VAR 0 6
3019: PUSH
3020: LD_EXP 30
3024: PUSH
3025: LD_VAR 0 3
3029: ARRAY
3030: PUSH
3031: LD_INT 3
3033: ARRAY
3034: ST_TO_ADDR
// if is_depot then
3035: LD_EXP 7
3039: IFFALSE 3172
// begin bc_type = b_depot ;
3041: LD_ADDR_OWVAR 42
3045: PUSH
3046: LD_INT 0
3048: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3049: LD_ADDR_VAR 0 10
3053: PUSH
3054: LD_VAR 0 4
3058: PPUSH
3059: LD_VAR 0 5
3063: PPUSH
3064: LD_VAR 0 6
3068: PPUSH
3069: CALL_OW 47
3073: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3074: LD_VAR 0 10
3078: PPUSH
3079: LD_STRING @
3081: PUSH
3082: LD_VAR 0 1
3086: STR
3087: PPUSH
3088: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3092: LD_VAR 0 10
3096: PPUSH
3097: CALL_OW 274
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: LD_EXP 12
3109: PUSH
3110: LD_INT 1
3112: ARRAY
3113: PPUSH
3114: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3118: LD_VAR 0 10
3122: PPUSH
3123: CALL_OW 274
3127: PPUSH
3128: LD_INT 2
3130: PPUSH
3131: LD_EXP 12
3135: PUSH
3136: LD_INT 2
3138: ARRAY
3139: PPUSH
3140: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3144: LD_VAR 0 10
3148: PPUSH
3149: CALL_OW 274
3153: PPUSH
3154: LD_INT 3
3156: PPUSH
3157: LD_EXP 12
3161: PUSH
3162: LD_INT 3
3164: ARRAY
3165: PPUSH
3166: CALL_OW 277
// end else
3170: GO 3316
// begin for i := 1 to 3 do
3172: LD_ADDR_VAR 0 7
3176: PUSH
3177: DOUBLE
3178: LD_INT 1
3180: DEC
3181: ST_TO_ADDR
3182: LD_INT 3
3184: PUSH
3185: FOR_TO
3186: IFFALSE 3314
// begin r := starting_resources [ i ] ;
3188: LD_ADDR_VAR 0 8
3192: PUSH
3193: LD_EXP 12
3197: PUSH
3198: LD_VAR 0 7
3202: ARRAY
3203: ST_TO_ADDR
// while r >= 10 do
3204: LD_VAR 0 8
3208: PUSH
3209: LD_INT 10
3211: GREATEREQUAL
3212: IFFALSE 3312
// if r > 50 then
3214: LD_VAR 0 8
3218: PUSH
3219: LD_INT 50
3221: GREATER
3222: IFFALSE 3268
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3224: LD_VAR 0 7
3228: PPUSH
3229: LD_INT 5
3231: PPUSH
3232: LD_VAR 0 4
3236: PPUSH
3237: LD_VAR 0 5
3241: PPUSH
3242: LD_INT 4
3244: PPUSH
3245: LD_INT 0
3247: PPUSH
3248: CALL_OW 60
// r := r - 50 ;
3252: LD_ADDR_VAR 0 8
3256: PUSH
3257: LD_VAR 0 8
3261: PUSH
3262: LD_INT 50
3264: MINUS
3265: ST_TO_ADDR
// end else
3266: GO 3310
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3268: LD_VAR 0 7
3272: PPUSH
3273: LD_VAR 0 8
3277: PUSH
3278: LD_INT 10
3280: DIV
3281: PPUSH
3282: LD_VAR 0 4
3286: PPUSH
3287: LD_VAR 0 5
3291: PPUSH
3292: LD_INT 4
3294: PPUSH
3295: LD_INT 0
3297: PPUSH
3298: CALL_OW 60
// r := 0 ;
3302: LD_ADDR_VAR 0 8
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// end ;
3310: GO 3204
// end ;
3312: GO 3185
3314: POP
3315: POP
// end ; for r in starting_crates do
3316: LD_ADDR_VAR 0 8
3320: PUSH
3321: LD_EXP 11
3325: PUSH
3326: FOR_IN
3327: IFFALSE 3359
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3329: LD_INT 1
3331: PPUSH
3332: LD_INT 5
3334: PPUSH
3335: LD_VAR 0 4
3339: PPUSH
3340: LD_VAR 0 5
3344: PPUSH
3345: LD_VAR 0 8
3349: PPUSH
3350: LD_INT 0
3352: PPUSH
3353: CALL_OW 60
3357: GO 3326
3359: POP
3360: POP
// if def_morale_flags then
3361: LD_EXP 59
3365: IFFALSE 3504
// begin x := start_def [ pos ] [ 1 ] ;
3367: LD_ADDR_VAR 0 4
3371: PUSH
3372: LD_EXP 32
3376: PUSH
3377: LD_VAR 0 3
3381: ARRAY
3382: PUSH
3383: LD_INT 1
3385: ARRAY
3386: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3387: LD_ADDR_VAR 0 5
3391: PUSH
3392: LD_EXP 32
3396: PUSH
3397: LD_VAR 0 3
3401: ARRAY
3402: PUSH
3403: LD_INT 2
3405: ARRAY
3406: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3407: LD_VAR 0 4
3411: PPUSH
3412: LD_VAR 0 5
3416: PPUSH
3417: LD_INT 12
3419: PPUSH
3420: LD_INT 2
3422: PPUSH
3423: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3427: LD_ADDR_EXP 34
3431: PUSH
3432: LD_EXP 34
3436: PUSH
3437: LD_VAR 0 1
3441: PPUSH
3442: LD_VAR 0 4
3446: PPUSH
3447: LD_VAR 0 5
3451: PPUSH
3452: LD_INT 1
3454: PUSH
3455: LD_INT 100
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: PUSH
3462: LD_INT 2
3464: PUSH
3465: LD_INT 50
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PUSH
3472: LD_INT 3
3474: PUSH
3475: LD_INT 20
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: PUSH
3482: LD_INT 20
3484: PUSH
3485: LD_INT 100
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: PPUSH
3498: CALL_OW 418
3502: ADD
3503: ST_TO_ADDR
// end ; commander := true ;
3504: LD_ADDR_LOC 1
3508: PUSH
3509: LD_INT 1
3511: ST_TO_ADDR
// soldiers_created := 0 ;
3512: LD_ADDR_LOC 4
3516: PUSH
3517: LD_INT 0
3519: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3520: LD_ADDR_VAR 0 7
3524: PUSH
3525: DOUBLE
3526: LD_INT 1
3528: DEC
3529: ST_TO_ADDR
3530: LD_EXP 8
3534: PUSH
3535: FOR_TO
3536: IFFALSE 3689
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3538: LD_ADDR_VAR 0 4
3542: PUSH
3543: LD_EXP 31
3547: PUSH
3548: LD_VAR 0 3
3552: ARRAY
3553: PUSH
3554: LD_VAR 0 7
3558: ARRAY
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3564: LD_ADDR_VAR 0 5
3568: PUSH
3569: LD_EXP 31
3573: PUSH
3574: LD_VAR 0 3
3578: ARRAY
3579: PUSH
3580: LD_VAR 0 7
3584: ARRAY
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3590: LD_ADDR_VAR 0 6
3594: PUSH
3595: LD_EXP 31
3599: PUSH
3600: LD_VAR 0 3
3604: ARRAY
3605: PUSH
3606: LD_VAR 0 7
3610: ARRAY
3611: PUSH
3612: LD_INT 3
3614: ARRAY
3615: ST_TO_ADDR
// bc_type := b_breastwork ;
3616: LD_ADDR_OWVAR 42
3620: PUSH
3621: LD_INT 31
3623: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3624: LD_ADDR_VAR 0 9
3628: PUSH
3629: LD_VAR 0 4
3633: PPUSH
3634: LD_VAR 0 5
3638: PPUSH
3639: LD_VAR 0 6
3643: PPUSH
3644: CALL_OW 47
3648: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3649: LD_INT 1
3651: PPUSH
3652: LD_INT 1
3654: PPUSH
3655: LD_INT 0
3657: PPUSH
3658: LD_INT 0
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: LD_VAR 0 9
3668: PPUSH
3669: CALL 2315 0 6
// soldiers_created := soldiers_created + 1 ;
3673: LD_ADDR_LOC 4
3677: PUSH
3678: LD_LOC 4
3682: PUSH
3683: LD_INT 1
3685: PLUS
3686: ST_TO_ADDR
// end ;
3687: GO 3535
3689: POP
3690: POP
// x := start_def [ pos ] [ 1 ] ;
3691: LD_ADDR_VAR 0 4
3695: PUSH
3696: LD_EXP 32
3700: PUSH
3701: LD_VAR 0 3
3705: ARRAY
3706: PUSH
3707: LD_INT 1
3709: ARRAY
3710: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3711: LD_ADDR_VAR 0 5
3715: PUSH
3716: LD_EXP 32
3720: PUSH
3721: LD_VAR 0 3
3725: ARRAY
3726: PUSH
3727: LD_INT 2
3729: ARRAY
3730: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3731: LD_LOC 8
3735: PUSH
3736: LD_EXP 8
3740: MINUS
3741: PPUSH
3742: LD_INT 1
3744: PPUSH
3745: LD_VAR 0 4
3749: PPUSH
3750: LD_VAR 0 5
3754: PPUSH
3755: LD_INT 5
3757: PPUSH
3758: LD_INT 0
3760: PPUSH
3761: CALL 2315 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3765: LD_LOC 5
3769: PPUSH
3770: LD_INT 2
3772: PPUSH
3773: LD_VAR 0 4
3777: PPUSH
3778: LD_VAR 0 5
3782: PPUSH
3783: LD_INT 5
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: CALL 2315 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3793: LD_LOC 7
3797: PPUSH
3798: LD_INT 3
3800: PPUSH
3801: LD_VAR 0 4
3805: PPUSH
3806: LD_VAR 0 5
3810: PPUSH
3811: LD_INT 5
3813: PPUSH
3814: LD_INT 0
3816: PPUSH
3817: CALL 2315 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3821: LD_LOC 6
3825: PPUSH
3826: LD_INT 4
3828: PPUSH
3829: LD_VAR 0 4
3833: PPUSH
3834: LD_VAR 0 5
3838: PPUSH
3839: LD_INT 5
3841: PPUSH
3842: LD_INT 0
3844: PPUSH
3845: CALL 2315 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3849: LD_EXP 60
3853: PUSH
3854: LD_INT 20
3856: PPUSH
3857: LD_VAR 0 1
3861: PPUSH
3862: CALL_OW 321
3866: PUSH
3867: LD_INT 1
3869: EQUAL
3870: AND
3871: IFFALSE 3888
// SetTech ( tech_SibDet , side , state_researched ) ;
3873: LD_INT 20
3875: PPUSH
3876: LD_VAR 0 1
3880: PPUSH
3881: LD_INT 2
3883: PPUSH
3884: CALL_OW 322
// if def_siberite_bomb = 1 then
3888: LD_EXP 63
3892: PUSH
3893: LD_INT 1
3895: EQUAL
3896: IFFALSE 3930
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3898: LD_INT 25
3900: PPUSH
3901: LD_VAR 0 1
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3913: LD_INT 73
3915: PPUSH
3916: LD_VAR 0 1
3920: PPUSH
3921: LD_INT 1
3923: PPUSH
3924: CALL_OW 322
// end else
3928: GO 3960
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3930: LD_INT 25
3932: PPUSH
3933: LD_VAR 0 1
3937: PPUSH
3938: LD_INT 0
3940: PPUSH
3941: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3945: LD_INT 73
3947: PPUSH
3948: LD_VAR 0 1
3952: PPUSH
3953: LD_INT 0
3955: PPUSH
3956: CALL_OW 322
// end ; if Game_Type = 3 then
3960: LD_EXP 49
3964: PUSH
3965: LD_INT 3
3967: EQUAL
3968: IFFALSE 3985
// SetTech ( tech_partinvis , side , state_disabled ) ;
3970: LD_INT 16
3972: PPUSH
3973: LD_VAR 0 1
3977: PPUSH
3978: LD_INT 0
3980: PPUSH
3981: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3985: LD_INT 24
3987: PPUSH
3988: LD_VAR 0 1
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: CALL_OW 322
// global_defined := true ;
4000: LD_ADDR_LOC 3
4004: PUSH
4005: LD_INT 1
4007: ST_TO_ADDR
// end ;
4008: LD_VAR 0 2
4012: RET
// every 0 0$1 do
4013: GO 4015
4015: DISABLE
// if ( def_siberite_bomb > 1 ) then
4016: LD_EXP 63
4020: PUSH
4021: LD_INT 1
4023: GREATER
4024: IFFALSE 4039
// begin wait ( siberite_bomb_Delay ) ;
4026: LD_EXP 18
4030: PPUSH
4031: CALL_OW 67
// EnableSibFiss ;
4035: CALL 4040 0 0
// end ;
4039: END
// function EnableSibFiss ; var i ; begin
4040: LD_INT 0
4042: PPUSH
4043: PPUSH
// for i := 1 to 8 do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_INT 8
4056: PUSH
4057: FOR_TO
4058: IFFALSE 4104
// if Side_Positions [ i ] then
4060: LD_EXP 23
4064: PUSH
4065: LD_VAR 0 2
4069: ARRAY
4070: IFFALSE 4102
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4072: LD_INT 25
4074: PPUSH
4075: LD_VAR 0 2
4079: PPUSH
4080: LD_INT 1
4082: PPUSH
4083: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4087: LD_INT 73
4089: PPUSH
4090: LD_VAR 0 2
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: CALL_OW 322
// end ;
4102: GO 4057
4104: POP
4105: POP
// end ;
4106: LD_VAR 0 1
4110: RET
// function prepare_sides ; var i ; begin
4111: LD_INT 0
4113: PPUSH
4114: PPUSH
// global_units := [ ] ;
4115: LD_ADDR_LOC 2
4119: PUSH
4120: EMPTY
4121: ST_TO_ADDR
// global_defined := false ;
4122: LD_ADDR_LOC 3
4126: PUSH
4127: LD_INT 0
4129: ST_TO_ADDR
// CountClassMembers ;
4130: CALL 4180 0 0
// for i := 1 to 8 do
4134: LD_ADDR_VAR 0 2
4138: PUSH
4139: DOUBLE
4140: LD_INT 1
4142: DEC
4143: ST_TO_ADDR
4144: LD_INT 8
4146: PUSH
4147: FOR_TO
4148: IFFALSE 4173
// if Side_Positions [ i ] then
4150: LD_EXP 23
4154: PUSH
4155: LD_VAR 0 2
4159: ARRAY
4160: IFFALSE 4171
// prepare_side ( i ) ;
4162: LD_VAR 0 2
4166: PPUSH
4167: CALL 2903 0 1
4171: GO 4147
4173: POP
4174: POP
// end ;
4175: LD_VAR 0 1
4179: RET
// function CountClassMembers ; var Mode ; begin
4180: LD_INT 0
4182: PPUSH
4183: PPUSH
// if No_Mechs then
4184: LD_EXP 65
4188: IFFALSE 4200
// Mode := 2 else
4190: LD_ADDR_VAR 0 2
4194: PUSH
4195: LD_INT 2
4197: ST_TO_ADDR
4198: GO 4208
// Mode := 1 ;
4200: LD_ADDR_VAR 0 2
4204: PUSH
4205: LD_INT 1
4207: ST_TO_ADDR
// neng := number_of_people ;
4208: LD_ADDR_LOC 5
4212: PUSH
4213: LD_EXP 9
4217: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4218: LD_ADDR_LOC 8
4222: PUSH
4223: LD_LOC 5
4227: PUSH
4228: LD_INT 4
4230: PUSH
4231: LD_INT 3
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: LD_VAR 0 2
4242: ARRAY
4243: DIV
4244: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4245: LD_LOC 8
4249: PUSH
4250: LD_EXP 8
4254: LESS
4255: IFFALSE 4267
// nsol := number_of_breastworks ;
4257: LD_ADDR_LOC 8
4261: PUSH
4262: LD_EXP 8
4266: ST_TO_ADDR
// neng := neng - nsol ;
4267: LD_ADDR_LOC 5
4271: PUSH
4272: LD_LOC 5
4276: PUSH
4277: LD_LOC 8
4281: MINUS
4282: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4283: LD_ADDR_LOC 6
4287: PUSH
4288: LD_LOC 5
4292: PUSH
4293: LD_INT 3
4295: PUSH
4296: LD_INT 2
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_VAR 0 2
4307: ARRAY
4308: DIV
4309: ST_TO_ADDR
// if ( nsci < 1 ) then
4310: LD_LOC 6
4314: PUSH
4315: LD_INT 1
4317: LESS
4318: IFFALSE 4328
// nsci := 1 ;
4320: LD_ADDR_LOC 6
4324: PUSH
4325: LD_INT 1
4327: ST_TO_ADDR
// neng := neng - nsci ;
4328: LD_ADDR_LOC 5
4332: PUSH
4333: LD_LOC 5
4337: PUSH
4338: LD_LOC 6
4342: MINUS
4343: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4344: LD_ADDR_LOC 7
4348: PUSH
4349: LD_LOC 5
4353: PUSH
4354: LD_INT 2
4356: DIV
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_VAR 0 2
4369: ARRAY
4370: ST_TO_ADDR
// neng := neng - nmech ;
4371: LD_ADDR_LOC 5
4375: PUSH
4376: LD_LOC 5
4380: PUSH
4381: LD_LOC 7
4385: MINUS
4386: ST_TO_ADDR
// if ( neng < 1 ) then
4387: LD_LOC 5
4391: PUSH
4392: LD_INT 1
4394: LESS
4395: IFFALSE 4405
// neng := 1 ;
4397: LD_ADDR_LOC 5
4401: PUSH
4402: LD_INT 1
4404: ST_TO_ADDR
// end ;
4405: LD_VAR 0 1
4409: RET
// starting begin disable ( 1 ) ;
4410: LD_INT 1
4412: DISABLE_MARKED
// disable ( 2 ) ;
4413: LD_INT 2
4415: DISABLE_MARKED
// disable ( 3 ) ;
4416: LD_INT 3
4418: DISABLE_MARKED
// disable ( 4 ) ;
4419: LD_INT 4
4421: DISABLE_MARKED
// disable ( 5 ) ;
4422: LD_INT 5
4424: DISABLE_MARKED
// disable ( 6 ) ;
4425: LD_INT 6
4427: DISABLE_MARKED
// disable ( 7 ) ;
4428: LD_INT 7
4430: DISABLE_MARKED
// disable ( 10 ) ;
4431: LD_INT 10
4433: DISABLE_MARKED
// disable ( 20 ) ;
4434: LD_INT 20
4436: DISABLE_MARKED
// disable ( 98 ) ;
4437: LD_INT 98
4439: DISABLE_MARKED
// disable ( 99 ) ;
4440: LD_INT 99
4442: DISABLE_MARKED
// disable ( 400 ) ;
4443: LD_INT 400
4445: DISABLE_MARKED
// disable ( 401 ) ;
4446: LD_INT 401
4448: DISABLE_MARKED
// disable ( 600 ) ;
4449: LD_INT 600
4451: DISABLE_MARKED
// mp_selectmsg := true ;
4452: LD_ADDR_OWVAR 13
4456: PUSH
4457: LD_INT 1
4459: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4460: CALL 68 0 0
// init_map ;
4464: CALL 1568 0 0
// init_shipments ;
4468: CALL 4654 0 0
// init_respawn ;
4472: CALL 6352 0 0
// set_shared_visions_and_alliances ;
4476: CALL 2027 0 0
// ResetFog ;
4480: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4484: LD_OWVAR 2
4488: PPUSH
4489: CALL_OW 520
// prepare_sides ;
4493: CALL 4111 0 0
// Init_Win_Condition ;
4497: CALL 18529 0 0
// InitLimits ;
4501: CALL 16402 0 0
// ShowTimer ;
4505: CALL 17339 0 0
// case Game_Type of 2 :
4509: LD_EXP 49
4513: PUSH
4514: LD_INT 2
4516: DOUBLE
4517: EQUAL
4518: IFTRUE 4522
4520: GO 4529
4522: POP
// init_alien_research ; 3 :
4523: CALL 7582 0 0
4527: GO 4549
4529: LD_INT 3
4531: DOUBLE
4532: EQUAL
4533: IFTRUE 4537
4535: GO 4548
4537: POP
// begin InitPoints ( ) ;
4538: CALL 17532 0 0
// init_kings_counting ;
4542: CALL 19755 0 0
// end ; end ;
4546: GO 4549
4548: POP
// music_nat := Side_Nations [ your_side ] ;
4549: LD_ADDR_OWVAR 71
4553: PUSH
4554: LD_EXP 24
4558: PUSH
4559: LD_OWVAR 2
4563: ARRAY
4564: ST_TO_ADDR
// if IAmSpec then
4565: CALL_OW 531
4569: IFFALSE 4593
// begin fogOff ( true ) ;
4571: LD_INT 1
4573: PPUSH
4574: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4578: LD_INT 119
4580: PPUSH
4581: LD_INT 79
4583: PPUSH
4584: CALL_OW 86
// enable ( 400 ) ;
4588: LD_INT 400
4590: ENABLE_MARKED
// end else
4591: GO 4639
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4593: LD_EXP 32
4597: PUSH
4598: LD_EXP 23
4602: PUSH
4603: LD_OWVAR 2
4607: ARRAY
4608: ARRAY
4609: PUSH
4610: LD_INT 1
4612: ARRAY
4613: PPUSH
4614: LD_EXP 32
4618: PUSH
4619: LD_EXP 23
4623: PUSH
4624: LD_OWVAR 2
4628: ARRAY
4629: ARRAY
4630: PUSH
4631: LD_INT 2
4633: ARRAY
4634: PPUSH
4635: CALL_OW 86
// end ; InitApeman ;
4639: CALL 5527 0 0
// if def_builduptime then
4643: LD_EXP 64
4647: IFFALSE 4653
// BeginBuildUp ;
4649: CALL 13576 0 0
// end ; end_of_file
4653: END
// var shipment , tictac ; export function init_shipments ; begin
4654: LD_INT 0
4656: PPUSH
// shipment := Rand ( 0 , 3 ) ;
4657: LD_ADDR_LOC 9
4661: PUSH
4662: LD_INT 0
4664: PPUSH
4665: LD_INT 3
4667: PPUSH
4668: CALL_OW 12
4672: ST_TO_ADDR
// tictac := 0 ;
4673: LD_ADDR_LOC 10
4677: PUSH
4678: LD_INT 0
4680: ST_TO_ADDR
// end ;
4681: LD_VAR 0 1
4685: RET
// every 1 1$0 + 0 0$0.3 do
4686: GO 4688
4688: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
4689: LD_INT 4
4691: PPUSH
4692: LD_INT 5
4694: PPUSH
4695: CALL_OW 12
4699: PPUSH
4700: LD_INT 1
4702: PPUSH
4703: CALL_OW 57
// enable ;
4707: ENABLE
// end ;
4708: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4709: GO 4711
4711: DISABLE
4712: LD_INT 0
4714: PPUSH
4715: PPUSH
// begin case tick of 1 .. 1 1$0 :
4716: LD_OWVAR 1
4720: PUSH
4721: LD_INT 1
4723: DOUBLE
4724: GREATEREQUAL
4725: IFFALSE 4733
4727: LD_INT 2100
4729: DOUBLE
4730: LESSEQUAL
4731: IFTRUE 4735
4733: GO 4763
4735: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4736: LD_EXP 13
4740: PUSH
4741: LD_INT 100
4743: DIVREAL
4744: PUSH
4745: LD_INT 525
4747: PPUSH
4748: LD_INT 1050
4750: PPUSH
4751: CALL_OW 12
4755: MUL
4756: PPUSH
4757: CALL_OW 67
4761: GO 5065
4763: LD_INT 2100
4765: PUSH
4766: LD_INT 1
4768: PLUS
4769: DOUBLE
4770: GREATEREQUAL
4771: IFFALSE 4779
4773: LD_INT 10500
4775: DOUBLE
4776: LESSEQUAL
4777: IFTRUE 4781
4779: GO 4809
4781: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4782: LD_EXP 13
4786: PUSH
4787: LD_INT 100
4789: DIVREAL
4790: PUSH
4791: LD_INT 1050
4793: PPUSH
4794: LD_INT 1225
4796: PPUSH
4797: CALL_OW 12
4801: MUL
4802: PPUSH
4803: CALL_OW 67
4807: GO 5065
4809: LD_INT 10500
4811: PUSH
4812: LD_INT 1
4814: PLUS
4815: DOUBLE
4816: GREATEREQUAL
4817: IFFALSE 4825
4819: LD_INT 21000
4821: DOUBLE
4822: LESSEQUAL
4823: IFTRUE 4827
4825: GO 4855
4827: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4828: LD_EXP 13
4832: PUSH
4833: LD_INT 100
4835: DIVREAL
4836: PUSH
4837: LD_INT 1225
4839: PPUSH
4840: LD_INT 1750
4842: PPUSH
4843: CALL_OW 12
4847: MUL
4848: PPUSH
4849: CALL_OW 67
4853: GO 5065
4855: LD_INT 21000
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: DOUBLE
4862: GREATEREQUAL
4863: IFFALSE 4871
4865: LD_INT 42000
4867: DOUBLE
4868: LESSEQUAL
4869: IFTRUE 4873
4871: GO 4901
4873: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4874: LD_EXP 13
4878: PUSH
4879: LD_INT 100
4881: DIVREAL
4882: PUSH
4883: LD_INT 1750
4885: PPUSH
4886: LD_INT 2450
4888: PPUSH
4889: CALL_OW 12
4893: MUL
4894: PPUSH
4895: CALL_OW 67
4899: GO 5065
4901: LD_INT 42000
4903: PUSH
4904: LD_INT 1
4906: PLUS
4907: DOUBLE
4908: GREATEREQUAL
4909: IFFALSE 4917
4911: LD_INT 63000
4913: DOUBLE
4914: LESSEQUAL
4915: IFTRUE 4919
4917: GO 4947
4919: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4920: LD_EXP 13
4924: PUSH
4925: LD_INT 100
4927: DIVREAL
4928: PUSH
4929: LD_INT 2450
4931: PPUSH
4932: LD_INT 2800
4934: PPUSH
4935: CALL_OW 12
4939: MUL
4940: PPUSH
4941: CALL_OW 67
4945: GO 5065
4947: LD_INT 63000
4949: PUSH
4950: LD_INT 1
4952: PLUS
4953: DOUBLE
4954: GREATEREQUAL
4955: IFFALSE 4963
4957: LD_INT 105000
4959: DOUBLE
4960: LESSEQUAL
4961: IFTRUE 4965
4963: GO 4993
4965: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4966: LD_EXP 13
4970: PUSH
4971: LD_INT 100
4973: DIVREAL
4974: PUSH
4975: LD_INT 2800
4977: PPUSH
4978: LD_INT 3325
4980: PPUSH
4981: CALL_OW 12
4985: MUL
4986: PPUSH
4987: CALL_OW 67
4991: GO 5065
4993: LD_INT 105000
4995: PUSH
4996: LD_INT 1
4998: PLUS
4999: DOUBLE
5000: GREATEREQUAL
5001: IFFALSE 5009
5003: LD_INT 630000
5005: DOUBLE
5006: LESSEQUAL
5007: IFTRUE 5011
5009: GO 5039
5011: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
5012: LD_EXP 13
5016: PUSH
5017: LD_INT 100
5019: DIVREAL
5020: PUSH
5021: LD_INT 3325
5023: PPUSH
5024: LD_INT 4200
5026: PPUSH
5027: CALL_OW 12
5031: MUL
5032: PPUSH
5033: CALL_OW 67
5037: GO 5065
5039: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5040: LD_EXP 13
5044: PUSH
5045: LD_INT 100
5047: DIVREAL
5048: PUSH
5049: LD_INT 4200
5051: PPUSH
5052: LD_INT 5250
5054: PPUSH
5055: CALL_OW 12
5059: MUL
5060: PPUSH
5061: CALL_OW 67
// amount := Rand ( 1 , 5 ) ;
5065: LD_ADDR_VAR 0 2
5069: PUSH
5070: LD_INT 1
5072: PPUSH
5073: LD_INT 5
5075: PPUSH
5076: CALL_OW 12
5080: ST_TO_ADDR
// for i = 1 to 4 do
5081: LD_ADDR_VAR 0 1
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 4
5093: PUSH
5094: FOR_TO
5095: IFFALSE 5157
// begin if not Side_Positions [ i ] then
5097: LD_EXP 23
5101: PUSH
5102: LD_VAR 0 1
5106: ARRAY
5107: NOT
5108: IFFALSE 5112
// continue ;
5110: GO 5094
// wait ( 0 0$3 ) ;
5112: LD_INT 105
5114: PPUSH
5115: CALL_OW 67
// CreateCratesArea ( amount , [ north_west , north_east , south_west , south_east ] [ i ] , true ) ;
5119: LD_VAR 0 2
5123: PPUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: LD_INT 7
5132: PUSH
5133: LD_INT 6
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_VAR 0 1
5146: ARRAY
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: CALL_OW 55
// end ;
5155: GO 5094
5157: POP
5158: POP
// enable ;
5159: ENABLE
// end ;
5160: PPOPN 2
5162: END
// every 0 0$10 trigger TICK > ( ( 3 3$0 * tictac ) + tictac * ( 1 1$30 - shipments_density * ( 0 0$2 ) ) ) do var i , amount , is_in ;
5163: LD_OWVAR 1
5167: PUSH
5168: LD_INT 6300
5170: PUSH
5171: LD_LOC 10
5175: MUL
5176: PUSH
5177: LD_LOC 10
5181: PUSH
5182: LD_INT 3150
5184: PUSH
5185: LD_EXP 13
5189: PUSH
5190: LD_INT 70
5192: MUL
5193: MINUS
5194: MUL
5195: PLUS
5196: GREATER
5197: IFFALSE 5333
5199: GO 5201
5201: DISABLE
5202: LD_INT 0
5204: PPUSH
5205: PPUSH
5206: PPUSH
// begin tictac := tictac + 1 ;
5207: LD_ADDR_LOC 10
5211: PUSH
5212: LD_LOC 10
5216: PUSH
5217: LD_INT 1
5219: PLUS
5220: ST_TO_ADDR
// amount := Rand ( 3 , 5 ) ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_INT 3
5228: PPUSH
5229: LD_INT 5
5231: PPUSH
5232: CALL_OW 12
5236: ST_TO_ADDR
// for i = 0 to 3 do
5237: LD_ADDR_VAR 0 1
5241: PUSH
5242: DOUBLE
5243: LD_INT 0
5245: DEC
5246: ST_TO_ADDR
5247: LD_INT 3
5249: PUSH
5250: FOR_TO
5251: IFFALSE 5330
// begin is_in := GetResourceArea ( north_west + i , mat_cans ) ;
5253: LD_ADDR_VAR 0 3
5257: PUSH
5258: LD_INT 4
5260: PUSH
5261: LD_VAR 0 1
5265: PLUS
5266: PPUSH
5267: LD_INT 1
5269: PPUSH
5270: CALL_OW 287
5274: ST_TO_ADDR
// if ( is_in < 500 ) or ( Rand ( 1 , 10 ) > ( is_in div 100 ) ) then
5275: LD_VAR 0 3
5279: PUSH
5280: LD_INT 500
5282: LESS
5283: PUSH
5284: LD_INT 1
5286: PPUSH
5287: LD_INT 10
5289: PPUSH
5290: CALL_OW 12
5294: PUSH
5295: LD_VAR 0 3
5299: PUSH
5300: LD_INT 100
5302: DIV
5303: GREATER
5304: OR
5305: IFFALSE 5328
// CreateCratesArea ( amount , north_west + i , true ) ;
5307: LD_VAR 0 2
5311: PPUSH
5312: LD_INT 4
5314: PUSH
5315: LD_VAR 0 1
5319: PLUS
5320: PPUSH
5321: LD_INT 1
5323: PPUSH
5324: CALL_OW 55
// end ;
5328: GO 5250
5330: POP
5331: POP
// enable ;
5332: ENABLE
// end ; end_of_file
5333: PPOPN 3
5335: END
// every 20 20$00 trigger apemanNumber do
5336: LD_EXP 36
5340: IFFALSE 5373
5342: GO 5344
5344: DISABLE
// begin enable ;
5345: ENABLE
// if apeLevel >= 8 then
5346: LD_EXP 41
5350: PUSH
5351: LD_INT 8
5353: GREATEREQUAL
5354: IFFALSE 5359
// disable else
5356: DISABLE
5357: GO 5373
// apeLevel := apeLevel + 1 ;
5359: LD_ADDR_EXP 41
5363: PUSH
5364: LD_EXP 41
5368: PUSH
5369: LD_INT 1
5371: PLUS
5372: ST_TO_ADDR
// end ;
5373: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5374: LD_EXP 36
5378: PUSH
5379: LD_EXP 37
5383: LESS
5384: IFFALSE 5524
5386: GO 5388
5388: DISABLE
5389: LD_INT 0
5391: PPUSH
5392: PPUSH
5393: PPUSH
5394: PPUSH
// begin enable ;
5395: ENABLE
// for i := 1 to apemanPos do
5396: LD_ADDR_VAR 0 1
5400: PUSH
5401: DOUBLE
5402: LD_INT 1
5404: DEC
5405: ST_TO_ADDR
5406: LD_EXP 39
5410: PUSH
5411: FOR_TO
5412: IFFALSE 5522
// begin if apemanPlayerCount [ i ] then
5414: LD_EXP 40
5418: PUSH
5419: LD_VAR 0 1
5423: ARRAY
5424: IFFALSE 5520
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5426: LD_EXP 40
5430: PUSH
5431: LD_VAR 0 1
5435: ARRAY
5436: PUSH
5437: LD_EXP 39
5441: PUSH
5442: LD_VAR 0 1
5446: ARRAY
5447: GREATER
5448: IFFALSE 5520
// begin ape := PrepareApeman ;
5450: LD_ADDR_VAR 0 2
5454: PUSH
5455: CALL 6027 0 0
5459: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5460: LD_VAR 0 2
5464: PPUSH
5465: LD_EXP 42
5469: PUSH
5470: LD_VAR 0 1
5474: ARRAY
5475: PPUSH
5476: LD_INT 0
5478: PPUSH
5479: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5483: LD_ADDR_EXP 39
5487: PUSH
5488: LD_EXP 39
5492: PPUSH
5493: LD_VAR 0 1
5497: PPUSH
5498: LD_EXP 39
5502: PUSH
5503: LD_VAR 0 1
5507: ARRAY
5508: PUSH
5509: LD_VAR 0 2
5513: UNION
5514: PPUSH
5515: CALL_OW 1
5519: ST_TO_ADDR
// end ; end ; end ;
5520: GO 5411
5522: POP
5523: POP
// end ;
5524: PPOPN 4
5526: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
5533: PPUSH
5534: PPUSH
5535: PPUSH
// playersAmount := 0 ;
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_INT 0
5543: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5544: LD_ADDR_VAR 0 7
5548: PUSH
5549: LD_INT 8
5551: PUSH
5552: LD_INT 9
5554: PUSH
5555: LD_INT 11
5557: PUSH
5558: LD_INT 10
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5567: LD_ADDR_EXP 42
5571: PUSH
5572: LD_INT 0
5574: PUSH
5575: LD_INT 0
5577: PUSH
5578: LD_INT 0
5580: PUSH
5581: LD_INT 0
5583: PUSH
5584: LD_INT 0
5586: PUSH
5587: LD_INT 0
5589: PUSH
5590: LD_INT 0
5592: PUSH
5593: LD_INT 0
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: ST_TO_ADDR
// for j = 1 to Side_Positions do
5606: LD_ADDR_VAR 0 4
5610: PUSH
5611: DOUBLE
5612: LD_INT 1
5614: DEC
5615: ST_TO_ADDR
5616: LD_EXP 23
5620: PUSH
5621: FOR_TO
5622: IFFALSE 5689
// if Side_Positions [ j ] then
5624: LD_EXP 23
5628: PUSH
5629: LD_VAR 0 4
5633: ARRAY
5634: IFFALSE 5687
// begin playersAmount := playersAmount + 1 ;
5636: LD_ADDR_VAR 0 3
5640: PUSH
5641: LD_VAR 0 3
5645: PUSH
5646: LD_INT 1
5648: PLUS
5649: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5650: LD_ADDR_EXP 42
5654: PUSH
5655: LD_EXP 42
5659: PPUSH
5660: LD_VAR 0 4
5664: PPUSH
5665: LD_VAR 0 7
5669: PUSH
5670: LD_EXP 23
5674: PUSH
5675: LD_VAR 0 4
5679: ARRAY
5680: ARRAY
5681: PPUSH
5682: CALL_OW 1
5686: ST_TO_ADDR
// end ;
5687: GO 5621
5689: POP
5690: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5691: LD_ADDR_EXP 38
5695: PUSH
5696: LD_INT 3
5698: PUSH
5699: LD_EXP 15
5703: MUL
5704: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5705: LD_ADDR_EXP 36
5709: PUSH
5710: LD_VAR 0 3
5714: PUSH
5715: LD_EXP 38
5719: MUL
5720: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5721: LD_ADDR_EXP 37
5725: PUSH
5726: LD_EXP 36
5730: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5731: LD_ADDR_EXP 39
5735: PUSH
5736: LD_INT 0
5738: PUSH
5739: LD_INT 0
5741: PUSH
5742: LD_INT 0
5744: PUSH
5745: LD_INT 0
5747: PUSH
5748: LD_INT 0
5750: PUSH
5751: LD_INT 0
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5770: LD_ADDR_EXP 40
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: LD_INT 0
5780: PUSH
5781: LD_INT 0
5783: PUSH
5784: LD_INT 0
5786: PUSH
5787: LD_INT 0
5789: PUSH
5790: LD_INT 0
5792: PUSH
5793: LD_INT 0
5795: PUSH
5796: LD_INT 0
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: ST_TO_ADDR
// apeLevel := 1 ;
5809: LD_ADDR_EXP 41
5813: PUSH
5814: LD_INT 1
5816: ST_TO_ADDR
// if not apemanNumber then
5817: LD_EXP 36
5821: NOT
5822: IFFALSE 5826
// exit ;
5824: GO 6022
// for i := 1 to apemanPerPlayer do
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: DOUBLE
5832: LD_INT 1
5834: DEC
5835: ST_TO_ADDR
5836: LD_EXP 38
5840: PUSH
5841: FOR_TO
5842: IFFALSE 6020
// begin for j := 1 to Side_Positions do
5844: LD_ADDR_VAR 0 4
5848: PUSH
5849: DOUBLE
5850: LD_INT 1
5852: DEC
5853: ST_TO_ADDR
5854: LD_EXP 23
5858: PUSH
5859: FOR_TO
5860: IFFALSE 6016
// if Side_Positions [ j ] then
5862: LD_EXP 23
5866: PUSH
5867: LD_VAR 0 4
5871: ARRAY
5872: IFFALSE 6014
// begin pos := Side_Positions [ j ] ;
5874: LD_ADDR_VAR 0 6
5878: PUSH
5879: LD_EXP 23
5883: PUSH
5884: LD_VAR 0 4
5888: ARRAY
5889: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5890: LD_ADDR_EXP 40
5894: PUSH
5895: LD_EXP 40
5899: PPUSH
5900: LD_VAR 0 4
5904: PPUSH
5905: LD_EXP 40
5909: PUSH
5910: LD_VAR 0 4
5914: ARRAY
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: PPUSH
5920: CALL_OW 1
5924: ST_TO_ADDR
// ape := PrepareApeman ;
5925: LD_ADDR_VAR 0 5
5929: PUSH
5930: CALL 6027 0 0
5934: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5935: LD_ADDR_EXP 39
5939: PUSH
5940: LD_EXP 39
5944: PPUSH
5945: LD_VAR 0 4
5949: PPUSH
5950: LD_EXP 39
5954: PUSH
5955: LD_VAR 0 4
5959: ARRAY
5960: PPUSH
5961: LD_EXP 39
5965: PUSH
5966: LD_VAR 0 4
5970: ARRAY
5971: PUSH
5972: LD_INT 1
5974: PLUS
5975: PPUSH
5976: LD_VAR 0 5
5980: PPUSH
5981: CALL_OW 1
5985: PPUSH
5986: CALL_OW 1
5990: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5991: LD_VAR 0 5
5995: PPUSH
5996: LD_EXP 42
6000: PUSH
6001: LD_VAR 0 4
6005: ARRAY
6006: PPUSH
6007: LD_INT 0
6009: PPUSH
6010: CALL_OW 49
// end ;
6014: GO 5859
6016: POP
6017: POP
// end ;
6018: GO 5841
6020: POP
6021: POP
// end ;
6022: LD_VAR 0 1
6026: RET
// export function PrepareApeman ; var bonus ; begin
6027: LD_INT 0
6029: PPUSH
6030: PPUSH
// uc_side := 0 ;
6031: LD_ADDR_OWVAR 20
6035: PUSH
6036: LD_INT 0
6038: ST_TO_ADDR
// uc_nation := 0 ;
6039: LD_ADDR_OWVAR 21
6043: PUSH
6044: LD_INT 0
6046: ST_TO_ADDR
// InitHc ;
6047: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6051: LD_ADDR_VAR 0 2
6055: PUSH
6056: LD_INT 1
6058: NEG
6059: PUSH
6060: LD_INT 0
6062: PUSH
6063: LD_INT 1
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_OWVAR 1
6075: PUSH
6076: LD_INT 3
6078: MOD
6079: PUSH
6080: LD_INT 1
6082: PLUS
6083: ARRAY
6084: ST_TO_ADDR
// hc_class := class_apeman ;
6085: LD_ADDR_OWVAR 28
6089: PUSH
6090: LD_INT 12
6092: ST_TO_ADDR
// hc_gallery :=  ;
6093: LD_ADDR_OWVAR 33
6097: PUSH
6098: LD_STRING 
6100: ST_TO_ADDR
// hc_name :=  ;
6101: LD_ADDR_OWVAR 26
6105: PUSH
6106: LD_STRING 
6108: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6109: LD_ADDR_OWVAR 31
6113: PUSH
6114: LD_EXP 41
6118: PUSH
6119: LD_VAR 0 2
6123: PLUS
6124: PUSH
6125: LD_EXP 41
6129: PUSH
6130: LD_VAR 0 2
6134: PLUS
6135: PUSH
6136: LD_EXP 41
6140: PUSH
6141: LD_VAR 0 2
6145: PLUS
6146: PUSH
6147: LD_EXP 41
6151: PUSH
6152: LD_VAR 0 2
6156: PLUS
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6164: LD_ADDR_OWVAR 35
6168: PUSH
6169: LD_INT 10
6171: PUSH
6172: LD_VAR 0 2
6176: MUL
6177: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6178: LD_ADDR_OWVAR 29
6182: PUSH
6183: LD_INT 12
6185: PUSH
6186: LD_INT 10
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: ST_TO_ADDR
// result := CreateHuman ;
6193: LD_ADDR_VAR 0 1
6197: PUSH
6198: CALL_OW 44
6202: ST_TO_ADDR
// end ;
6203: LD_VAR 0 1
6207: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6208: LD_INT 0
6210: PPUSH
6211: PPUSH
6212: PPUSH
// if not ape then
6213: LD_VAR 0 1
6217: NOT
6218: IFFALSE 6222
// exit ;
6220: GO 6347
// side := GetSide ( ape ) ;
6222: LD_ADDR_VAR 0 3
6226: PUSH
6227: LD_VAR 0 1
6231: PPUSH
6232: CALL_OW 255
6236: ST_TO_ADDR
// if not side then
6237: LD_VAR 0 3
6241: NOT
6242: IFFALSE 6296
// begin for i = 1 to apemanPos do
6244: LD_ADDR_VAR 0 4
6248: PUSH
6249: DOUBLE
6250: LD_INT 1
6252: DEC
6253: ST_TO_ADDR
6254: LD_EXP 39
6258: PUSH
6259: FOR_TO
6260: IFFALSE 6294
// if ape in apemanPos [ i ] then
6262: LD_VAR 0 1
6266: PUSH
6267: LD_EXP 39
6271: PUSH
6272: LD_VAR 0 4
6276: ARRAY
6277: IN
6278: IFFALSE 6292
// begin side := i ;
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_VAR 0 4
6289: ST_TO_ADDR
// break ;
6290: GO 6294
// end ;
6292: GO 6259
6294: POP
6295: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6296: LD_ADDR_EXP 39
6300: PUSH
6301: LD_EXP 39
6305: PPUSH
6306: LD_VAR 0 3
6310: PPUSH
6311: LD_EXP 39
6315: PUSH
6316: LD_VAR 0 3
6320: ARRAY
6321: PUSH
6322: LD_VAR 0 1
6326: DIFF
6327: PPUSH
6328: CALL_OW 1
6332: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6333: LD_ADDR_EXP 36
6337: PUSH
6338: LD_EXP 36
6342: PUSH
6343: LD_INT 1
6345: MINUS
6346: ST_TO_ADDR
// end ; end_of_file
6347: LD_VAR 0 2
6351: RET
// var respawn_queue ; export function init_respawn ; begin
6352: LD_INT 0
6354: PPUSH
// if not def_people_respawning then
6355: LD_EXP 61
6359: NOT
6360: IFFALSE 6364
// exit ;
6362: GO 6406
// respawn_queue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6364: LD_ADDR_LOC 11
6368: PUSH
6369: LD_INT 0
6371: PUSH
6372: LD_INT 0
6374: PUSH
6375: LD_INT 0
6377: PUSH
6378: LD_INT 0
6380: PUSH
6381: LD_INT 0
6383: PUSH
6384: LD_INT 0
6386: PUSH
6387: LD_INT 0
6389: PUSH
6390: LD_INT 0
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: ST_TO_ADDR
// enable ( 10 ) ;
6403: LD_INT 10
6405: ENABLE_MARKED
// end ;
6406: LD_VAR 0 1
6410: RET
// every 0 0$10 marked 10 do var un , list , time , side ;
6411: GO 6413
6413: DISABLE
6414: LD_INT 0
6416: PPUSH
6417: PPUSH
6418: PPUSH
6419: PPUSH
// begin for side = 1 to Side_Positions do
6420: LD_ADDR_VAR 0 4
6424: PUSH
6425: DOUBLE
6426: LD_INT 1
6428: DEC
6429: ST_TO_ADDR
6430: LD_EXP 23
6434: PUSH
6435: FOR_TO
6436: IFFALSE 6602
// if Side_Positions [ side ] then
6438: LD_EXP 23
6442: PUSH
6443: LD_VAR 0 4
6447: ARRAY
6448: IFFALSE 6600
// begin list := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , f_not , [ f_nation , nation_nature ] ] ) ;
6450: LD_ADDR_VAR 0 2
6454: PUSH
6455: LD_INT 22
6457: PUSH
6458: LD_VAR 0 4
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: LD_INT 21
6469: PUSH
6470: LD_INT 1
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 3
6479: PUSH
6480: LD_INT 23
6482: PUSH
6483: LD_INT 0
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PPUSH
6496: CALL_OW 69
6500: ST_TO_ADDR
// if ( list < number_of_people ) and ( not respawn_queue [ side ] ) then
6501: LD_VAR 0 2
6505: PUSH
6506: LD_EXP 9
6510: LESS
6511: PUSH
6512: LD_LOC 11
6516: PUSH
6517: LD_VAR 0 4
6521: ARRAY
6522: NOT
6523: AND
6524: IFFALSE 6540
// set_queue ( side , TICK ) ;
6526: LD_VAR 0 4
6530: PPUSH
6531: LD_OWVAR 1
6535: PPUSH
6536: CALL 6839 0 2
// time := TICK - respawn_queue [ side ] ;
6540: LD_ADDR_VAR 0 3
6544: PUSH
6545: LD_OWVAR 1
6549: PUSH
6550: LD_LOC 11
6554: PUSH
6555: LD_VAR 0 4
6559: ARRAY
6560: MINUS
6561: ST_TO_ADDR
// if ( respawn_queue [ side ] ) and ( time > respawning_time_min ) then
6562: LD_LOC 11
6566: PUSH
6567: LD_VAR 0 4
6571: ARRAY
6572: PUSH
6573: LD_VAR 0 3
6577: PUSH
6578: LD_EXP 16
6582: GREATER
6583: AND
6584: IFFALSE 6600
// respawn_character ( side , time ) ;
6586: LD_VAR 0 4
6590: PPUSH
6591: LD_VAR 0 3
6595: PPUSH
6596: CALL 6608 0 2
// end ;
6600: GO 6435
6602: POP
6603: POP
// enable ;
6604: ENABLE
// end ;
6605: PPOPN 4
6607: END
// function respawn_character ( side , time ) ; var dep ; begin
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
// if Rand ( 0 , 1 ) and ( time < respawning_time_max ) then
6612: LD_INT 0
6614: PPUSH
6615: LD_INT 1
6617: PPUSH
6618: CALL_OW 12
6622: PUSH
6623: LD_VAR 0 2
6627: PUSH
6628: LD_EXP 17
6632: LESS
6633: AND
6634: IFFALSE 6638
// exit ;
6636: GO 6834
// dep := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] ] ) ;
6638: LD_ADDR_VAR 0 4
6642: PUSH
6643: LD_INT 22
6645: PUSH
6646: LD_VAR 0 1
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 2
6657: PUSH
6658: LD_INT 30
6660: PUSH
6661: LD_INT 0
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: PUSH
6668: LD_INT 30
6670: PUSH
6671: LD_INT 1
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 50
6685: PUSH
6686: EMPTY
6687: LIST
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: PPUSH
6694: CALL_OW 69
6698: ST_TO_ADDR
// if not dep then
6699: LD_VAR 0 4
6703: NOT
6704: IFFALSE 6710
// exit else
6706: GO 6834
6708: GO 6734
// dep := dep [ Rand ( 1 , dep ) ] ;
6710: LD_ADDR_VAR 0 4
6714: PUSH
6715: LD_VAR 0 4
6719: PUSH
6720: LD_INT 1
6722: PPUSH
6723: LD_VAR 0 4
6727: PPUSH
6728: CALL_OW 12
6732: ARRAY
6733: ST_TO_ADDR
// uc_side := side ;
6734: LD_ADDR_OWVAR 20
6738: PUSH
6739: LD_VAR 0 1
6743: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
6744: LD_ADDR_OWVAR 21
6748: PUSH
6749: LD_EXP 24
6753: PUSH
6754: LD_VAR 0 1
6758: ARRAY
6759: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6760: LD_INT 0
6762: PPUSH
6763: LD_INT 0
6765: PPUSH
6766: LD_EXP 10
6770: PUSH
6771: LD_INT 2
6773: DIV
6774: PPUSH
6775: CALL_OW 380
// hc_importance := 0 ;
6779: LD_ADDR_OWVAR 32
6783: PUSH
6784: LD_INT 0
6786: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 10 , true ) ;
6787: CALL_OW 44
6791: PPUSH
6792: LD_VAR 0 4
6796: PPUSH
6797: CALL_OW 250
6801: PPUSH
6802: LD_VAR 0 4
6806: PPUSH
6807: CALL_OW 251
6811: PPUSH
6812: LD_INT 10
6814: PPUSH
6815: LD_INT 1
6817: PPUSH
6818: CALL_OW 50
// set_queue ( side , 0 ) ;
6822: LD_VAR 0 1
6826: PPUSH
6827: LD_INT 0
6829: PPUSH
6830: CALL 6839 0 2
// end ;
6834: LD_VAR 0 3
6838: RET
// function set_queue ( side , time ) ; begin
6839: LD_INT 0
6841: PPUSH
// respawn_queue := Delete ( respawn_queue , side ) ;
6842: LD_ADDR_LOC 11
6846: PUSH
6847: LD_LOC 11
6851: PPUSH
6852: LD_VAR 0 1
6856: PPUSH
6857: CALL_OW 3
6861: ST_TO_ADDR
// respawn_queue := Insert ( respawn_queue , side , time ) ;
6862: LD_ADDR_LOC 11
6866: PUSH
6867: LD_LOC 11
6871: PPUSH
6872: LD_VAR 0 1
6876: PPUSH
6877: LD_VAR 0 2
6881: PPUSH
6882: CALL_OW 2
6886: ST_TO_ADDR
// end ; end_of_file
6887: LD_VAR 0 3
6891: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6892: LD_VAR 0 1
6896: PPUSH
6897: CALL_OW 266
6901: PUSH
6902: LD_INT 0
6904: PUSH
6905: LD_INT 1
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: IN
6912: IFFALSE 6937
// SetBName ( b , @ & GetSide ( b ) ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: LD_STRING @
6921: PUSH
6922: LD_VAR 0 1
6926: PPUSH
6927: CALL_OW 255
6931: STR
6932: PPUSH
6933: CALL_OW 500
// if def_game_rules then
6937: LD_EXP 50
6941: IFFALSE 6978
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6943: LD_VAR 0 1
6947: PPUSH
6948: LD_VAR 0 1
6952: PPUSH
6953: CALL_OW 266
6957: PPUSH
6958: LD_VAR 0 1
6962: PPUSH
6963: CALL_OW 255
6967: PPUSH
6968: LD_INT 0
6970: PPUSH
6971: LD_INT 1
6973: PPUSH
6974: CALL 16803 0 5
// end ;
6978: PPOPN 2
6980: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6981: LD_VAR 0 1
6985: PPUSH
6986: CALL_OW 266
6990: PUSH
6991: LD_INT 0
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: IN
7001: IFFALSE 7026
// SetBName ( b , @ & GetSide ( b ) ) ;
7003: LD_VAR 0 1
7007: PPUSH
7008: LD_STRING @
7010: PUSH
7011: LD_VAR 0 1
7015: PPUSH
7016: CALL_OW 255
7020: STR
7021: PPUSH
7022: CALL_OW 500
// if def_game_rules then
7026: LD_EXP 50
7030: IFFALSE 7069
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7032: LD_VAR 0 1
7036: PPUSH
7037: LD_VAR 0 1
7041: PPUSH
7042: CALL_OW 266
7046: PPUSH
7047: LD_VAR 0 1
7051: PPUSH
7052: CALL_OW 255
7056: PPUSH
7057: LD_VAR 0 2
7061: PPUSH
7062: LD_INT 1
7064: PPUSH
7065: CALL 16803 0 5
// end ;
7069: PPOPN 3
7071: END
// on VehicleConstructed ( veh , fac ) do var side ;
7072: LD_INT 0
7074: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7075: LD_VAR 0 1
7079: PPUSH
7080: CALL_OW 263
7084: PUSH
7085: LD_INT 5
7087: EQUAL
7088: IFFALSE 7230
// begin side := GetSide ( veh ) ;
7090: LD_ADDR_VAR 0 3
7094: PUSH
7095: LD_VAR 0 1
7099: PPUSH
7100: CALL_OW 255
7104: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7105: LD_ADDR_EXP 39
7109: PUSH
7110: LD_EXP 39
7114: PPUSH
7115: LD_VAR 0 3
7119: PPUSH
7120: LD_EXP 39
7124: PUSH
7125: LD_VAR 0 3
7129: ARRAY
7130: PPUSH
7131: LD_INT 52
7133: PUSH
7134: EMPTY
7135: LIST
7136: PPUSH
7137: CALL_OW 72
7141: PUSH
7142: LD_INT 22
7144: PUSH
7145: LD_VAR 0 3
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: LD_INT 33
7159: PUSH
7160: LD_INT 5
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 12
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 15
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 25
7189: PUSH
7190: LD_INT 16
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 25
7199: PUSH
7200: LD_INT 17
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PPUSH
7219: CALL_OW 69
7223: UNION
7224: PPUSH
7225: CALL_OW 1
7229: ST_TO_ADDR
// end ; end ;
7230: PPOPN 3
7232: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7233: LD_INT 0
7235: PPUSH
7236: PPUSH
7237: PPUSH
7238: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 257
7248: PUSH
7249: LD_INT 12
7251: PUSH
7252: LD_INT 15
7254: PUSH
7255: LD_INT 17
7257: PUSH
7258: LD_INT 16
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: IN
7267: PUSH
7268: LD_VAR 0 1
7272: PPUSH
7273: CALL_OW 263
7277: PUSH
7278: LD_INT 5
7280: EQUAL
7281: OR
7282: IFFALSE 7293
// ApeKilled ( j ) ;
7284: LD_VAR 0 1
7288: PPUSH
7289: CALL 6208 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7293: LD_VAR 0 1
7297: PPUSH
7298: CALL_OW 266
7302: PUSH
7303: LD_INT 0
7305: PUSH
7306: LD_INT 1
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: IN
7313: IFFALSE 7395
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7315: LD_ADDR_VAR 0 4
7319: PUSH
7320: LD_EXP 23
7324: PUSH
7325: LD_VAR 0 1
7329: PPUSH
7330: CALL_OW 255
7334: ARRAY
7335: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: LD_EXP 32
7345: PUSH
7346: LD_VAR 0 4
7350: ARRAY
7351: PUSH
7352: LD_INT 1
7354: ARRAY
7355: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7356: LD_ADDR_VAR 0 3
7360: PUSH
7361: LD_EXP 32
7365: PUSH
7366: LD_VAR 0 4
7370: ARRAY
7371: PUSH
7372: LD_INT 2
7374: ARRAY
7375: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7376: LD_VAR 0 2
7380: PPUSH
7381: LD_VAR 0 3
7385: PPUSH
7386: CALL_OW 420
7390: PPUSH
7391: CALL_OW 419
// end ; if def_game_rules then
7395: LD_EXP 50
7399: IFFALSE 7498
// if ( GetType ( j ) = 3 ) then
7401: LD_VAR 0 1
7405: PPUSH
7406: CALL_OW 247
7410: PUSH
7411: LD_INT 3
7413: EQUAL
7414: IFFALSE 7454
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7416: LD_VAR 0 1
7420: PPUSH
7421: LD_VAR 0 1
7425: PPUSH
7426: CALL_OW 266
7430: PPUSH
7431: LD_VAR 0 1
7435: PPUSH
7436: CALL_OW 255
7440: PPUSH
7441: LD_INT 0
7443: PPUSH
7444: LD_INT 1
7446: NEG
7447: PPUSH
7448: CALL 16803 0 5
7452: GO 7498
// if ( GetChassis ( j ) = 25 ) then
7454: LD_VAR 0 1
7458: PPUSH
7459: CALL_OW 265
7463: PUSH
7464: LD_INT 25
7466: EQUAL
7467: IFFALSE 7498
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7469: LD_VAR 0 1
7473: PPUSH
7474: LD_INT 37
7476: PPUSH
7477: LD_VAR 0 1
7481: PPUSH
7482: CALL_OW 255
7486: PPUSH
7487: LD_INT 0
7489: PPUSH
7490: LD_INT 1
7492: NEG
7493: PPUSH
7494: CALL 16803 0 5
// end ;
7498: PPOPN 5
7500: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7501: LD_EXP 50
7505: PUSH
7506: LD_VAR 0 1
7510: PPUSH
7511: CALL_OW 265
7515: PUSH
7516: LD_INT 25
7518: EQUAL
7519: AND
7520: IFFALSE 7552
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7522: LD_VAR 0 1
7526: PPUSH
7527: LD_INT 37
7529: PPUSH
7530: LD_VAR 0 1
7534: PPUSH
7535: CALL_OW 255
7539: PPUSH
7540: LD_VAR 0 3
7544: PPUSH
7545: LD_INT 1
7547: PPUSH
7548: CALL 16803 0 5
// end ;
7552: PPOPN 4
7554: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7555: LD_VAR 0 1
7559: PPUSH
7560: LD_VAR 0 2
7564: PPUSH
7565: LD_VAR 0 3
7569: PPUSH
7570: LD_OWVAR 2
7574: PPUSH
7575: CALL 18290 0 4
7579: PPOPN 3
7581: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
7582: LD_INT 0
7584: PPUSH
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
// artefact_number := 3 ;
7590: LD_ADDR_EXP 43
7594: PUSH
7595: LD_INT 3
7597: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
7598: LD_ADDR_EXP 44
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: LD_INT 0
7608: PUSH
7609: LD_INT 2
7611: PUSH
7612: LD_INT 0
7614: PUSH
7615: LD_INT 3
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
7625: LD_ADDR_EXP 45
7629: PUSH
7630: LD_INT 1
7632: PUSH
7633: LD_INT 3
7635: PUSH
7636: LD_INT 5
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: LIST
7643: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
7644: LD_ADDR_VAR 0 2
7648: PUSH
7649: LD_INT 1
7651: PUSH
7652: LD_INT 4
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 2
7661: PUSH
7662: LD_INT 5
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 3
7671: PUSH
7672: LD_INT 9
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: LIST
7683: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
7684: LD_ADDR_VAR 0 3
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: LD_INT 4
7694: PUSH
7695: LD_INT 3
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
7703: LD_ADDR_VAR 0 4
7707: PUSH
7708: LD_INT 150
7710: PUSH
7711: LD_INT 250
7713: PUSH
7714: LD_INT 400
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
7722: LD_ADDR_VAR 0 5
7726: PUSH
7727: LD_INT 2
7729: PUSH
7730: LD_INT 10
7732: PUSH
7733: LD_INT 20
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: LIST
7740: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
7741: LD_ADDR_VAR 0 6
7745: PUSH
7746: LD_INT 6
7748: PUSH
7749: LD_INT 18
7751: PUSH
7752: LD_INT 50
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
7760: LD_VAR 0 2
7764: PPUSH
7765: LD_VAR 0 3
7769: PPUSH
7770: LD_VAR 0 4
7774: PPUSH
7775: LD_VAR 0 5
7779: PPUSH
7780: LD_VAR 0 6
7784: PPUSH
7785: CALL 7794 0 5
// end ;
7789: LD_VAR 0 1
7793: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
7794: LD_INT 0
7796: PPUSH
7797: PPUSH
7798: PPUSH
7799: PPUSH
7800: PPUSH
// disable ( 1 ) ;
7801: LD_INT 1
7803: DISABLE_MARKED
// disable ( 5 ) ;
7804: LD_INT 5
7806: DISABLE_MARKED
// disable ( 6 ) ;
7807: LD_INT 6
7809: DISABLE_MARKED
// disable ( 7 ) ;
7810: LD_INT 7
7812: DISABLE_MARKED
// for side = 1 to 8 do
7813: LD_ADDR_VAR 0 9
7817: PUSH
7818: DOUBLE
7819: LD_INT 1
7821: DEC
7822: ST_TO_ADDR
7823: LD_INT 8
7825: PUSH
7826: FOR_TO
7827: IFFALSE 7843
// SetArtifactRes ( side , state_enabled ) ;
7829: LD_VAR 0 9
7833: PPUSH
7834: LD_INT 1
7836: PPUSH
7837: CALL_OW 467
7841: GO 7826
7843: POP
7844: POP
// for un = 0 to ( artefact_number - 1 ) do
7845: LD_ADDR_VAR 0 7
7849: PUSH
7850: DOUBLE
7851: LD_INT 0
7853: DEC
7854: ST_TO_ADDR
7855: LD_EXP 43
7859: PUSH
7860: LD_INT 1
7862: MINUS
7863: PUSH
7864: FOR_TO
7865: IFFALSE 8263
// begin base := un * 100 ;
7867: LD_ADDR_VAR 0 10
7871: PUSH
7872: LD_VAR 0 7
7876: PUSH
7877: LD_INT 100
7879: MUL
7880: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
7881: LD_VAR 0 10
7885: PUSH
7886: LD_INT 1
7888: PLUS
7889: PPUSH
7890: LD_VAR 0 1
7894: PUSH
7895: LD_VAR 0 7
7899: PUSH
7900: LD_INT 1
7902: PLUS
7903: ARRAY
7904: PUSH
7905: LD_INT 1
7907: ARRAY
7908: PPUSH
7909: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7913: LD_VAR 0 10
7917: PUSH
7918: LD_INT 2
7920: PLUS
7921: PPUSH
7922: LD_VAR 0 1
7926: PUSH
7927: LD_VAR 0 7
7931: PUSH
7932: LD_INT 1
7934: PLUS
7935: ARRAY
7936: PUSH
7937: LD_INT 2
7939: ARRAY
7940: PPUSH
7941: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7945: LD_VAR 0 10
7949: PUSH
7950: LD_INT 3
7952: PLUS
7953: PPUSH
7954: LD_VAR 0 2
7958: PUSH
7959: LD_VAR 0 7
7963: PUSH
7964: LD_INT 1
7966: PLUS
7967: ARRAY
7968: PPUSH
7969: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7973: LD_VAR 0 10
7977: PUSH
7978: LD_INT 5
7980: PLUS
7981: PPUSH
7982: LD_VAR 0 3
7986: PUSH
7987: LD_VAR 0 7
7991: PUSH
7992: LD_INT 1
7994: PLUS
7995: ARRAY
7996: PPUSH
7997: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
8001: LD_VAR 0 10
8005: PUSH
8006: LD_INT 6
8008: PLUS
8009: PPUSH
8010: LD_VAR 0 4
8014: PUSH
8015: LD_VAR 0 7
8019: PUSH
8020: LD_INT 1
8022: PLUS
8023: ARRAY
8024: PPUSH
8025: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
8029: LD_VAR 0 10
8033: PUSH
8034: LD_INT 7
8036: PLUS
8037: PPUSH
8038: LD_VAR 0 5
8042: PUSH
8043: LD_VAR 0 7
8047: PUSH
8048: LD_INT 1
8050: PLUS
8051: ARRAY
8052: PPUSH
8053: CALL_OW 109
// SetTag ( base + 08 , false ) ;
8057: LD_VAR 0 10
8061: PUSH
8062: LD_INT 8
8064: PLUS
8065: PPUSH
8066: LD_INT 0
8068: PPUSH
8069: CALL_OW 109
// SetTag ( base + 09 , false ) ;
8073: LD_VAR 0 10
8077: PUSH
8078: LD_INT 9
8080: PLUS
8081: PPUSH
8082: LD_INT 0
8084: PPUSH
8085: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
8089: LD_VAR 0 10
8093: PUSH
8094: LD_INT 11
8096: PLUS
8097: PPUSH
8098: LD_INT 0
8100: PPUSH
8101: CALL_OW 109
// SetTag ( base + 12 , false ) ;
8105: LD_VAR 0 10
8109: PUSH
8110: LD_INT 12
8112: PLUS
8113: PPUSH
8114: LD_INT 0
8116: PPUSH
8117: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8121: LD_VAR 0 10
8125: PUSH
8126: LD_INT 13
8128: PLUS
8129: PPUSH
8130: LD_INT 0
8132: PPUSH
8133: CALL_OW 109
// for i = 0 to 7 do
8137: LD_ADDR_VAR 0 8
8141: PUSH
8142: DOUBLE
8143: LD_INT 0
8145: DEC
8146: ST_TO_ADDR
8147: LD_INT 7
8149: PUSH
8150: FOR_TO
8151: IFFALSE 8259
// begin SetTag ( base + i * 10 + 21 , false ) ;
8153: LD_VAR 0 10
8157: PUSH
8158: LD_VAR 0 8
8162: PUSH
8163: LD_INT 10
8165: MUL
8166: PLUS
8167: PUSH
8168: LD_INT 21
8170: PLUS
8171: PPUSH
8172: LD_INT 0
8174: PPUSH
8175: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
8179: LD_VAR 0 10
8183: PUSH
8184: LD_VAR 0 8
8188: PUSH
8189: LD_INT 10
8191: MUL
8192: PLUS
8193: PUSH
8194: LD_INT 22
8196: PLUS
8197: PPUSH
8198: LD_INT 0
8200: PPUSH
8201: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
8205: LD_VAR 0 10
8209: PUSH
8210: LD_VAR 0 8
8214: PUSH
8215: LD_INT 10
8217: MUL
8218: PLUS
8219: PUSH
8220: LD_INT 23
8222: PLUS
8223: PPUSH
8224: LD_INT 0
8226: PPUSH
8227: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
8231: LD_VAR 0 10
8235: PUSH
8236: LD_VAR 0 8
8240: PUSH
8241: LD_INT 10
8243: MUL
8244: PLUS
8245: PUSH
8246: LD_INT 25
8248: PLUS
8249: PPUSH
8250: LD_INT 0
8252: PPUSH
8253: CALL_OW 109
// end ;
8257: GO 8150
8259: POP
8260: POP
// end ;
8261: GO 7864
8263: POP
8264: POP
// enable ( 20 ) ;
8265: LD_INT 20
8267: ENABLE_MARKED
// labs_in_use := [ ] ;
8268: LD_ADDR_EXP 46
8272: PUSH
8273: EMPTY
8274: ST_TO_ADDR
// if def_artefact_one then
8275: LD_EXP 1
8279: IFFALSE 8306
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
8281: LD_INT 4
8283: PPUSH
8284: LD_EXP 45
8288: PUSH
8289: LD_INT 1
8291: ARRAY
8292: PPUSH
8293: LD_INT 16
8295: PPUSH
8296: LD_INT 0
8298: PPUSH
8299: CALL_OW 59
// enable ( 5 ) ;
8303: LD_INT 5
8305: ENABLE_MARKED
// end ; if def_artefact_two then
8306: LD_EXP 2
8310: IFFALSE 8337
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
8312: LD_INT 4
8314: PPUSH
8315: LD_EXP 45
8319: PUSH
8320: LD_INT 2
8322: ARRAY
8323: PPUSH
8324: LD_INT 16
8326: PPUSH
8327: LD_INT 0
8329: PPUSH
8330: CALL_OW 59
// enable ( 6 ) ;
8334: LD_INT 6
8336: ENABLE_MARKED
// end ; if def_artefact_three then
8337: LD_EXP 3
8341: IFFALSE 8368
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
8343: LD_INT 4
8345: PPUSH
8346: LD_EXP 45
8350: PUSH
8351: LD_INT 3
8353: ARRAY
8354: PPUSH
8355: LD_INT 16
8357: PPUSH
8358: LD_INT 0
8360: PPUSH
8361: CALL_OW 59
// enable ( 7 ) ;
8365: LD_INT 7
8367: ENABLE_MARKED
// end ; end ;
8368: LD_VAR 0 6
8372: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
8373: LD_INT 0
8375: PPUSH
8376: PPUSH
// begin art := artefact_num [ size ] ;
8377: LD_ADDR_VAR 0 3
8381: PUSH
8382: LD_EXP 44
8386: PUSH
8387: LD_VAR 0 2
8391: ARRAY
8392: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8393: LD_ADDR_VAR 0 4
8397: PUSH
8398: LD_VAR 0 3
8402: PUSH
8403: LD_INT 1
8405: MINUS
8406: PUSH
8407: LD_INT 100
8409: MUL
8410: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
8411: LD_VAR 0 4
8415: PUSH
8416: LD_INT 9
8418: PLUS
8419: PPUSH
8420: LD_INT 0
8422: PPUSH
8423: CALL_OW 109
// SetTag ( base + 13 , false ) ;
8427: LD_VAR 0 4
8431: PUSH
8432: LD_INT 13
8434: PLUS
8435: PPUSH
8436: LD_INT 0
8438: PPUSH
8439: CALL_OW 109
// Init_Lab ( art ) ;
8443: LD_VAR 0 3
8447: PPUSH
8448: CALL 9924 0 1
// end ;
8452: PPOPN 4
8454: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
8455: LD_INT 0
8457: PPUSH
8458: PPUSH
8459: PPUSH
// begin art := artefact_num [ size ] ;
8460: LD_ADDR_VAR 0 3
8464: PUSH
8465: LD_EXP 44
8469: PUSH
8470: LD_VAR 0 2
8474: ARRAY
8475: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8476: LD_ADDR_VAR 0 4
8480: PUSH
8481: LD_VAR 0 3
8485: PUSH
8486: LD_INT 1
8488: MINUS
8489: PUSH
8490: LD_INT 100
8492: MUL
8493: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
8494: LD_VAR 0 4
8498: PUSH
8499: LD_INT 9
8501: PLUS
8502: PPUSH
8503: LD_INT 1
8505: PPUSH
8506: CALL_OW 109
// SetTag ( base + 13 , un ) ;
8510: LD_VAR 0 4
8514: PUSH
8515: LD_INT 13
8517: PLUS
8518: PPUSH
8519: LD_VAR 0 1
8523: PPUSH
8524: CALL_OW 109
// if GetTag ( base + 11 ) then
8528: LD_VAR 0 4
8532: PUSH
8533: LD_INT 11
8535: PLUS
8536: PPUSH
8537: CALL_OW 110
8541: IFFALSE 8704
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
8543: LD_ADDR_VAR 0 5
8547: PUSH
8548: LD_VAR 0 4
8552: PUSH
8553: LD_INT 11
8555: PLUS
8556: PPUSH
8557: CALL_OW 110
8561: PPUSH
8562: CALL_OW 255
8566: ST_TO_ADDR
// if GetTag ( base + 12 ) then
8567: LD_VAR 0 4
8571: PUSH
8572: LD_INT 12
8574: PLUS
8575: PPUSH
8576: CALL_OW 110
8580: IFFALSE 8648
// begin ComCancel ( GetTag ( base + 11 ) ) ;
8582: LD_VAR 0 4
8586: PUSH
8587: LD_INT 11
8589: PLUS
8590: PPUSH
8591: CALL_OW 110
8595: PPUSH
8596: CALL_OW 127
// wait ( 5 ) ;
8600: LD_INT 5
8602: PPUSH
8603: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
8607: LD_ADDR_EXP 46
8611: PUSH
8612: LD_EXP 46
8616: PUSH
8617: LD_VAR 0 4
8621: PUSH
8622: LD_INT 11
8624: PLUS
8625: PPUSH
8626: CALL_OW 110
8630: DIFF
8631: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
8632: LD_VAR 0 4
8636: PUSH
8637: LD_INT 12
8639: PLUS
8640: PPUSH
8641: LD_INT 0
8643: PPUSH
8644: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
8648: LD_VAR 0 4
8652: PUSH
8653: LD_VAR 0 5
8657: PUSH
8658: LD_INT 10
8660: MUL
8661: PLUS
8662: PUSH
8663: LD_INT 11
8665: PLUS
8666: PPUSH
8667: CALL_OW 110
8671: NOT
8672: IFFALSE 8688
// DeInit_Lab ( side , art ) ;
8674: LD_VAR 0 5
8678: PPUSH
8679: LD_VAR 0 3
8683: PPUSH
8684: CALL 10460 0 2
// SetTag ( base + 11 , 0 ) ;
8688: LD_VAR 0 4
8692: PUSH
8693: LD_INT 11
8695: PLUS
8696: PPUSH
8697: LD_INT 0
8699: PPUSH
8700: CALL_OW 109
// end ; end ;
8704: PPOPN 5
8706: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
8707: LD_INT 0
8709: PPUSH
8710: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8711: LD_ADDR_VAR 0 3
8715: PUSH
8716: LD_VAR 0 1
8720: PPUSH
8721: CALL_OW 255
8725: PUSH
8726: LD_INT 1
8728: MINUS
8729: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8730: LD_ADDR_VAR 0 2
8734: PUSH
8735: DOUBLE
8736: LD_INT 0
8738: DEC
8739: ST_TO_ADDR
8740: LD_EXP 43
8744: PUSH
8745: LD_INT 1
8747: MINUS
8748: PUSH
8749: FOR_TO
8750: IFFALSE 8792
// if lab = GetTag ( un * 100 + 11 ) then
8752: LD_VAR 0 1
8756: PUSH
8757: LD_VAR 0 2
8761: PUSH
8762: LD_INT 100
8764: MUL
8765: PUSH
8766: LD_INT 11
8768: PLUS
8769: PPUSH
8770: CALL_OW 110
8774: EQUAL
8775: IFFALSE 8790
// Init_Lab ( un + 1 ) ;
8777: LD_VAR 0 2
8781: PUSH
8782: LD_INT 1
8784: PLUS
8785: PPUSH
8786: CALL 9924 0 1
8790: GO 8749
8792: POP
8793: POP
// end ;
8794: PPOPN 3
8796: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
8797: LD_INT 0
8799: PPUSH
8800: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8801: LD_ADDR_VAR 0 4
8805: PUSH
8806: LD_VAR 0 1
8810: PPUSH
8811: CALL_OW 255
8815: PUSH
8816: LD_INT 1
8818: MINUS
8819: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8820: LD_ADDR_VAR 0 3
8824: PUSH
8825: DOUBLE
8826: LD_INT 0
8828: DEC
8829: ST_TO_ADDR
8830: LD_EXP 43
8834: PUSH
8835: LD_INT 1
8837: MINUS
8838: PUSH
8839: FOR_TO
8840: IFFALSE 8958
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8842: LD_VAR 0 3
8846: PUSH
8847: LD_INT 100
8849: MUL
8850: PUSH
8851: LD_INT 11
8853: PLUS
8854: PPUSH
8855: CALL_OW 110
8859: PUSH
8860: LD_VAR 0 1
8864: EQUAL
8865: PUSH
8866: LD_VAR 0 3
8870: PUSH
8871: LD_INT 100
8873: MUL
8874: PUSH
8875: LD_INT 12
8877: PLUS
8878: PPUSH
8879: CALL_OW 110
8883: AND
8884: IFFALSE 8956
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
8886: LD_VAR 0 3
8890: PUSH
8891: LD_INT 100
8893: MUL
8894: PUSH
8895: LD_VAR 0 4
8899: PUSH
8900: LD_INT 10
8902: MUL
8903: PLUS
8904: PUSH
8905: LD_INT 22
8907: PLUS
8908: PPUSH
8909: LD_VAR 0 2
8913: PPUSH
8914: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8918: LD_VAR 0 3
8922: PUSH
8923: LD_INT 100
8925: MUL
8926: PUSH
8927: LD_INT 12
8929: PLUS
8930: PPUSH
8931: LD_INT 0
8933: PPUSH
8934: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8938: LD_ADDR_EXP 46
8942: PUSH
8943: LD_EXP 46
8947: PUSH
8948: LD_VAR 0 1
8952: DIFF
8953: ST_TO_ADDR
// break ;
8954: GO 8958
// end ;
8956: GO 8839
8958: POP
8959: POP
// Update_Artefact ( lab ) ;
8960: LD_VAR 0 1
8964: PPUSH
8965: CALL 10599 0 1
// end ;
8969: PPOPN 4
8971: END
// on SpecResearchComplete ( lab ) do var un , side ;
8972: LD_INT 0
8974: PPUSH
8975: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8976: LD_ADDR_VAR 0 3
8980: PUSH
8981: LD_VAR 0 1
8985: PPUSH
8986: CALL_OW 255
8990: PUSH
8991: LD_INT 1
8993: MINUS
8994: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8995: LD_ADDR_VAR 0 2
8999: PUSH
9000: DOUBLE
9001: LD_INT 0
9003: DEC
9004: ST_TO_ADDR
9005: LD_EXP 43
9009: PUSH
9010: LD_INT 1
9012: MINUS
9013: PUSH
9014: FOR_TO
9015: IFFALSE 9161
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
9017: LD_VAR 0 2
9021: PUSH
9022: LD_INT 100
9024: MUL
9025: PUSH
9026: LD_INT 11
9028: PLUS
9029: PPUSH
9030: CALL_OW 110
9034: PUSH
9035: LD_VAR 0 1
9039: EQUAL
9040: PUSH
9041: LD_VAR 0 2
9045: PUSH
9046: LD_INT 100
9048: MUL
9049: PUSH
9050: LD_INT 12
9052: PLUS
9053: PPUSH
9054: CALL_OW 110
9058: AND
9059: IFFALSE 9159
// begin SetTag ( un * 100 + 12 , false ) ;
9061: LD_VAR 0 2
9065: PUSH
9066: LD_INT 100
9068: MUL
9069: PUSH
9070: LD_INT 12
9072: PLUS
9073: PPUSH
9074: LD_INT 0
9076: PPUSH
9077: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
9081: LD_VAR 0 2
9085: PUSH
9086: LD_INT 100
9088: MUL
9089: PUSH
9090: LD_VAR 0 3
9094: PUSH
9095: LD_INT 10
9097: MUL
9098: PLUS
9099: PUSH
9100: LD_INT 21
9102: PLUS
9103: PPUSH
9104: LD_INT 1
9106: PPUSH
9107: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
9111: LD_VAR 0 2
9115: PUSH
9116: LD_INT 100
9118: MUL
9119: PUSH
9120: LD_VAR 0 3
9124: PUSH
9125: LD_INT 10
9127: MUL
9128: PLUS
9129: PUSH
9130: LD_INT 25
9132: PLUS
9133: PPUSH
9134: LD_VAR 0 1
9138: PPUSH
9139: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
9143: LD_ADDR_EXP 46
9147: PUSH
9148: LD_EXP 46
9152: PUSH
9153: LD_VAR 0 1
9157: DIFF
9158: ST_TO_ADDR
// end ;
9159: GO 9014
9161: POP
9162: POP
// Update_Artefact ( lab ) ;
9163: LD_VAR 0 1
9167: PPUSH
9168: CALL 10599 0 1
// end ;
9172: PPOPN 3
9174: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
9175: LD_INT 0
9177: PPUSH
9178: PPUSH
9179: PPUSH
9180: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
9181: LD_ADDR_VAR 0 7
9185: PUSH
9186: LD_VAR 0 2
9190: PUSH
9191: LD_INT 1
9193: MINUS
9194: PUSH
9195: LD_INT 3
9197: MOD
9198: PUSH
9199: LD_INT 1
9201: PLUS
9202: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
9203: LD_ADDR_VAR 0 8
9207: PUSH
9208: LD_VAR 0 7
9212: PUSH
9213: LD_INT 1
9215: MINUS
9216: PUSH
9217: LD_INT 100
9219: MUL
9220: ST_TO_ADDR
// if number <= 3 then
9221: LD_VAR 0 2
9225: PUSH
9226: LD_INT 3
9228: LESSEQUAL
9229: IFFALSE 9461
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
9231: LD_VAR 0 8
9235: PUSH
9236: LD_INT 11
9238: PLUS
9239: PPUSH
9240: CALL_OW 110
9244: PPUSH
9245: LD_VAR 0 8
9249: PUSH
9250: LD_INT 5
9252: PLUS
9253: PPUSH
9254: CALL_OW 110
9258: PPUSH
9259: LD_INT 1
9261: PPUSH
9262: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
9266: LD_VAR 0 8
9270: PUSH
9271: LD_INT 11
9273: PLUS
9274: PPUSH
9275: CALL_OW 110
9279: PPUSH
9280: LD_VAR 0 8
9284: PUSH
9285: LD_VAR 0 1
9289: PUSH
9290: LD_INT 10
9292: MUL
9293: PLUS
9294: PUSH
9295: LD_INT 12
9297: PLUS
9298: PPUSH
9299: CALL_OW 110
9303: PPUSH
9304: CALL_OW 329
// SetTag ( base + 12 , true ) ;
9308: LD_VAR 0 8
9312: PUSH
9313: LD_INT 12
9315: PLUS
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
9324: LD_ADDR_EXP 46
9328: PUSH
9329: LD_EXP 46
9333: PUSH
9334: LD_VAR 0 8
9338: PUSH
9339: LD_INT 11
9341: PLUS
9342: PPUSH
9343: CALL_OW 110
9347: ADD
9348: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9349: LD_ADDR_VAR 0 5
9353: PUSH
9354: DOUBLE
9355: LD_INT 0
9357: DEC
9358: ST_TO_ADDR
9359: LD_EXP 43
9363: PUSH
9364: LD_INT 1
9366: MINUS
9367: PUSH
9368: FOR_TO
9369: IFFALSE 9457
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9371: LD_VAR 0 8
9375: PUSH
9376: LD_INT 11
9378: PLUS
9379: PPUSH
9380: CALL_OW 110
9384: PUSH
9385: LD_VAR 0 5
9389: PUSH
9390: LD_INT 100
9392: MUL
9393: PUSH
9394: LD_INT 11
9396: PLUS
9397: PPUSH
9398: CALL_OW 110
9402: PUSH
9403: LD_VAR 0 5
9407: PUSH
9408: LD_INT 100
9410: MUL
9411: PUSH
9412: LD_VAR 0 1
9416: PUSH
9417: LD_INT 10
9419: MUL
9420: PLUS
9421: PUSH
9422: LD_INT 15
9424: PLUS
9425: PPUSH
9426: CALL_OW 110
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: IN
9435: IFFALSE 9455
// DeInit_Lab ( side , un + 1 ) ;
9437: LD_VAR 0 1
9441: PPUSH
9442: LD_VAR 0 5
9446: PUSH
9447: LD_INT 1
9449: PLUS
9450: PPUSH
9451: CALL 10460 0 2
9455: GO 9368
9457: POP
9458: POP
// end else
9459: GO 9635
// begin succes := false ;
9461: LD_ADDR_VAR 0 6
9465: PUSH
9466: LD_INT 0
9468: ST_TO_ADDR
// case art of 1 :
9469: LD_VAR 0 7
9473: PUSH
9474: LD_INT 1
9476: DOUBLE
9477: EQUAL
9478: IFTRUE 9482
9480: GO 9510
9482: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
9483: LD_ADDR_VAR 0 6
9487: PUSH
9488: LD_VAR 0 1
9492: PPUSH
9493: LD_VAR 0 3
9497: PPUSH
9498: LD_VAR 0 4
9502: PPUSH
9503: CALL 11032 0 3
9507: ST_TO_ADDR
9508: GO 9578
9510: LD_INT 2
9512: DOUBLE
9513: EQUAL
9514: IFTRUE 9518
9516: GO 9541
9518: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
9519: LD_ADDR_VAR 0 6
9523: PUSH
9524: LD_VAR 0 1
9528: PPUSH
9529: LD_VAR 0 3
9533: PPUSH
9534: CALL 11270 0 2
9538: ST_TO_ADDR
9539: GO 9578
9541: LD_INT 3
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9577
9549: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
9550: LD_ADDR_VAR 0 6
9554: PUSH
9555: LD_VAR 0 1
9559: PPUSH
9560: LD_VAR 0 3
9564: PPUSH
9565: LD_VAR 0 4
9569: PPUSH
9570: CALL 11666 0 3
9574: ST_TO_ADDR
9575: GO 9578
9577: POP
// if succes then
9578: LD_VAR 0 6
9582: IFFALSE 9635
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
9584: LD_VAR 0 8
9588: PUSH
9589: LD_VAR 0 1
9593: PUSH
9594: LD_INT 10
9596: MUL
9597: PLUS
9598: PUSH
9599: LD_INT 13
9601: PLUS
9602: PPUSH
9603: LD_VAR 0 8
9607: PUSH
9608: LD_INT 7
9610: PLUS
9611: PPUSH
9612: CALL_OW 110
9616: PPUSH
9617: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
9621: LD_VAR 0 1
9625: PPUSH
9626: LD_VAR 0 7
9630: PPUSH
9631: CALL 9638 0 2
// end ; end ; end ;
9635: PPOPN 8
9637: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
9638: LD_INT 0
9640: PPUSH
9641: PPUSH
9642: PPUSH
// base := ( art - 1 ) * 100 ;
9643: LD_ADDR_VAR 0 4
9647: PUSH
9648: LD_VAR 0 2
9652: PUSH
9653: LD_INT 1
9655: MINUS
9656: PUSH
9657: LD_INT 100
9659: MUL
9660: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9661: LD_ADDR_VAR 0 5
9665: PUSH
9666: LD_VAR 0 4
9670: PUSH
9671: LD_VAR 0 1
9675: PUSH
9676: LD_INT 10
9678: MUL
9679: PLUS
9680: PUSH
9681: LD_INT 15
9683: PLUS
9684: PPUSH
9685: CALL_OW 110
9689: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
9690: LD_VAR 0 5
9694: PUSH
9695: LD_VAR 0 5
9699: PUSH
9700: LD_EXP 46
9704: IN
9705: NOT
9706: AND
9707: IFFALSE 9765
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
9709: LD_VAR 0 1
9713: PPUSH
9714: LD_VAR 0 4
9718: PUSH
9719: LD_INT 1
9721: PLUS
9722: PUSH
9723: LD_VAR 0 4
9727: PUSH
9728: LD_VAR 0 1
9732: PUSH
9733: LD_INT 10
9735: MUL
9736: PLUS
9737: PUSH
9738: LD_INT 11
9740: PLUS
9741: PPUSH
9742: CALL_OW 110
9746: PLUS
9747: PPUSH
9748: CALL_OW 110
9752: PPUSH
9753: LD_INT 1
9755: PPUSH
9756: LD_VAR 0 5
9760: PPUSH
9761: CALL_OW 468
// end ;
9765: LD_VAR 0 3
9769: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
9770: LD_INT 0
9772: PPUSH
9773: PPUSH
9774: PPUSH
// base := ( art - 1 ) * 100 ;
9775: LD_ADDR_VAR 0 4
9779: PUSH
9780: LD_VAR 0 2
9784: PUSH
9785: LD_INT 1
9787: MINUS
9788: PUSH
9789: LD_INT 100
9791: MUL
9792: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9793: LD_ADDR_VAR 0 5
9797: PUSH
9798: LD_VAR 0 4
9802: PUSH
9803: LD_VAR 0 1
9807: PUSH
9808: LD_INT 10
9810: MUL
9811: PLUS
9812: PUSH
9813: LD_INT 15
9815: PLUS
9816: PPUSH
9817: CALL_OW 110
9821: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
9822: LD_VAR 0 5
9826: PUSH
9827: LD_VAR 0 5
9831: PUSH
9832: LD_EXP 46
9836: IN
9837: NOT
9838: AND
9839: PUSH
9840: LD_VAR 0 5
9844: PPUSH
9845: CALL_OW 313
9849: AND
9850: IFFALSE 9919
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
9852: LD_VAR 0 1
9856: PPUSH
9857: LD_VAR 0 4
9861: PUSH
9862: LD_INT 1
9864: PLUS
9865: PUSH
9866: LD_VAR 0 4
9870: PUSH
9871: LD_VAR 0 1
9875: PUSH
9876: LD_INT 10
9878: MUL
9879: PLUS
9880: PUSH
9881: LD_INT 11
9883: PLUS
9884: PPUSH
9885: CALL_OW 110
9889: PLUS
9890: PPUSH
9891: CALL_OW 110
9895: PPUSH
9896: LD_VAR 0 4
9900: PUSH
9901: LD_INT 3
9903: PLUS
9904: PPUSH
9905: CALL_OW 110
9909: PPUSH
9910: LD_VAR 0 5
9914: PPUSH
9915: CALL_OW 468
// end ;
9919: LD_VAR 0 3
9923: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9924: LD_INT 0
9926: PPUSH
9927: PPUSH
9928: PPUSH
9929: PPUSH
9930: PPUSH
9931: PPUSH
9932: PPUSH
9933: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9934: LD_ADDR_VAR 0 8
9938: PUSH
9939: LD_EXP 45
9943: PUSH
9944: LD_VAR 0 1
9948: ARRAY
9949: PPUSH
9950: CALL_OW 469
9954: ST_TO_ADDR
// if not art_hex then
9955: LD_VAR 0 8
9959: NOT
9960: IFFALSE 9964
// exit ;
9962: GO 10455
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9964: LD_ADDR_VAR 0 3
9968: PUSH
9969: LD_INT 2
9971: PUSH
9972: LD_INT 30
9974: PUSH
9975: LD_INT 6
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 30
9984: PUSH
9985: LD_INT 7
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 30
9994: PUSH
9995: LD_INT 8
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: PUSH
10008: EMPTY
10009: LIST
10010: PPUSH
10011: CALL_OW 69
10015: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
10016: LD_ADDR_VAR 0 9
10020: PUSH
10021: LD_VAR 0 3
10025: PPUSH
10026: LD_VAR 0 8
10030: PUSH
10031: LD_INT 1
10033: ARRAY
10034: PPUSH
10035: LD_VAR 0 8
10039: PUSH
10040: LD_INT 2
10042: ARRAY
10043: PPUSH
10044: CALL_OW 73
10048: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
10049: LD_ADDR_VAR 0 6
10053: PUSH
10054: LD_VAR 0 9
10058: PPUSH
10059: LD_VAR 0 8
10063: PUSH
10064: LD_INT 1
10066: ARRAY
10067: PPUSH
10068: LD_VAR 0 8
10072: PUSH
10073: LD_INT 2
10075: ARRAY
10076: PPUSH
10077: CALL_OW 297
10081: ST_TO_ADDR
// if dist < 9 then
10082: LD_VAR 0 6
10086: PUSH
10087: LD_INT 9
10089: LESS
10090: IFFALSE 10455
// begin side := GetSide ( nearest_lab ) ;
10092: LD_ADDR_VAR 0 4
10096: PUSH
10097: LD_VAR 0 9
10101: PPUSH
10102: CALL_OW 255
10106: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
10107: LD_VAR 0 4
10111: PPUSH
10112: LD_VAR 0 1
10116: PPUSH
10117: CALL 10460 0 2
// base := ( art - 1 ) * 100 ;
10121: LD_ADDR_VAR 0 5
10125: PUSH
10126: LD_VAR 0 1
10130: PUSH
10131: LD_INT 1
10133: MINUS
10134: PUSH
10135: LD_INT 100
10137: MUL
10138: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
10139: LD_INT 24
10141: PPUSH
10142: LD_VAR 0 4
10146: PPUSH
10147: CALL_OW 321
10151: PUSH
10152: LD_INT 2
10154: EQUAL
10155: PUSH
10156: LD_VAR 0 9
10160: PPUSH
10161: CALL_OW 313
10165: AND
10166: IFFALSE 10358
// begin if GetTag ( base + side * 10 + 11 ) then
10168: LD_VAR 0 5
10172: PUSH
10173: LD_VAR 0 4
10177: PUSH
10178: LD_INT 10
10180: MUL
10181: PLUS
10182: PUSH
10183: LD_INT 11
10185: PLUS
10186: PPUSH
10187: CALL_OW 110
10191: IFFALSE 10348
// begin if not GetTag ( base + side * 10 + 13 ) then
10193: LD_VAR 0 5
10197: PUSH
10198: LD_VAR 0 4
10202: PUSH
10203: LD_INT 10
10205: MUL
10206: PLUS
10207: PUSH
10208: LD_INT 13
10210: PLUS
10211: PPUSH
10212: CALL_OW 110
10216: NOT
10217: IFFALSE 10240
// state := GetTag ( base + 03 ) else
10219: LD_ADDR_VAR 0 7
10223: PUSH
10224: LD_VAR 0 5
10228: PUSH
10229: LD_INT 3
10231: PLUS
10232: PPUSH
10233: CALL_OW 110
10237: ST_TO_ADDR
10238: GO 10248
// state := art_gray ;
10240: LD_ADDR_VAR 0 7
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
10248: LD_VAR 0 5
10252: PUSH
10253: LD_VAR 0 4
10257: PUSH
10258: LD_INT 10
10260: MUL
10261: PLUS
10262: PUSH
10263: LD_INT 15
10265: PLUS
10266: PPUSH
10267: CALL_OW 110
10271: PUSH
10272: LD_VAR 0 5
10276: PUSH
10277: LD_VAR 0 4
10281: PUSH
10282: LD_INT 10
10284: MUL
10285: PLUS
10286: PUSH
10287: LD_INT 15
10289: PLUS
10290: PPUSH
10291: CALL_OW 110
10295: PUSH
10296: LD_VAR 0 9
10300: NONEQUAL
10301: AND
10302: IFFALSE 10318
// DeInit_Lab ( side , art ) ;
10304: LD_VAR 0 4
10308: PPUSH
10309: LD_VAR 0 1
10313: PPUSH
10314: CALL 10460 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
10318: LD_VAR 0 5
10322: PUSH
10323: LD_VAR 0 4
10327: PUSH
10328: LD_INT 10
10330: MUL
10331: PLUS
10332: PUSH
10333: LD_INT 15
10335: PLUS
10336: PPUSH
10337: LD_VAR 0 9
10341: PPUSH
10342: CALL_OW 109
// end else
10346: GO 10356
// state := art_instant ;
10348: LD_ADDR_VAR 0 7
10352: PUSH
10353: LD_INT 2
10355: ST_TO_ADDR
// end else
10356: GO 10366
// state := art_gray ;
10358: LD_ADDR_VAR 0 7
10362: PUSH
10363: LD_INT 1
10365: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
10366: LD_VAR 0 5
10370: PUSH
10371: LD_INT 11
10373: PLUS
10374: PPUSH
10375: LD_VAR 0 9
10379: PPUSH
10380: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
10384: LD_VAR 0 9
10388: PUSH
10389: LD_EXP 46
10393: IN
10394: NOT
10395: IFFALSE 10455
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
10397: LD_VAR 0 4
10401: PPUSH
10402: LD_VAR 0 5
10406: PUSH
10407: LD_INT 1
10409: PLUS
10410: PUSH
10411: LD_VAR 0 5
10415: PUSH
10416: LD_VAR 0 4
10420: PUSH
10421: LD_INT 10
10423: MUL
10424: PLUS
10425: PUSH
10426: LD_INT 11
10428: PLUS
10429: PPUSH
10430: CALL_OW 110
10434: PLUS
10435: PPUSH
10436: CALL_OW 110
10440: PPUSH
10441: LD_VAR 0 7
10445: PPUSH
10446: LD_VAR 0 9
10450: PPUSH
10451: CALL_OW 468
// end ; end ;
10455: LD_VAR 0 2
10459: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
10460: LD_INT 0
10462: PPUSH
10463: PPUSH
10464: PPUSH
// base := ( art - 1 ) * 100 ;
10465: LD_ADDR_VAR 0 4
10469: PUSH
10470: LD_VAR 0 2
10474: PUSH
10475: LD_INT 1
10477: MINUS
10478: PUSH
10479: LD_INT 100
10481: MUL
10482: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
10483: LD_ADDR_VAR 0 5
10487: PUSH
10488: LD_VAR 0 4
10492: PUSH
10493: LD_VAR 0 1
10497: PUSH
10498: LD_INT 10
10500: MUL
10501: PLUS
10502: PUSH
10503: LD_INT 15
10505: PLUS
10506: PPUSH
10507: CALL_OW 110
10511: ST_TO_ADDR
// if not lab then
10512: LD_VAR 0 5
10516: NOT
10517: IFFALSE 10538
// lab := GetTag ( base + 11 ) ;
10519: LD_ADDR_VAR 0 5
10523: PUSH
10524: LD_VAR 0 4
10528: PUSH
10529: LD_INT 11
10531: PLUS
10532: PPUSH
10533: CALL_OW 110
10537: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
10538: LD_VAR 0 1
10542: PPUSH
10543: LD_VAR 0 4
10547: PUSH
10548: LD_INT 1
10550: PLUS
10551: PUSH
10552: LD_VAR 0 4
10556: PUSH
10557: LD_VAR 0 1
10561: PUSH
10562: LD_INT 10
10564: MUL
10565: PLUS
10566: PUSH
10567: LD_INT 11
10569: PLUS
10570: PPUSH
10571: CALL_OW 110
10575: PLUS
10576: PPUSH
10577: CALL_OW 110
10581: PPUSH
10582: LD_INT 0
10584: PPUSH
10585: LD_VAR 0 5
10589: PPUSH
10590: CALL_OW 468
// end ;
10594: LD_VAR 0 3
10598: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
10599: LD_INT 0
10601: PPUSH
10602: PPUSH
10603: PPUSH
10604: PPUSH
// side := GetSide ( lab ) ;
10605: LD_ADDR_VAR 0 4
10609: PUSH
10610: LD_VAR 0 1
10614: PPUSH
10615: CALL_OW 255
10619: ST_TO_ADDR
// for art = 1 to artefact_number do
10620: LD_ADDR_VAR 0 3
10624: PUSH
10625: DOUBLE
10626: LD_INT 1
10628: DEC
10629: ST_TO_ADDR
10630: LD_EXP 43
10634: PUSH
10635: FOR_TO
10636: IFFALSE 10792
// begin base := ( art - 1 ) * 100 ;
10638: LD_ADDR_VAR 0 5
10642: PUSH
10643: LD_VAR 0 3
10647: PUSH
10648: LD_INT 1
10650: MINUS
10651: PUSH
10652: LD_INT 100
10654: MUL
10655: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
10656: LD_VAR 0 5
10660: PUSH
10661: LD_INT 11
10663: PLUS
10664: PPUSH
10665: CALL_OW 110
10669: PUSH
10670: LD_VAR 0 1
10674: EQUAL
10675: IFFALSE 10688
// Init_Lab ( art ) else
10677: LD_VAR 0 3
10681: PPUSH
10682: CALL 9924 0 1
10686: GO 10790
// begin if lab = GetTag ( base + side * 10 + 15 ) then
10688: LD_VAR 0 1
10692: PUSH
10693: LD_VAR 0 5
10697: PUSH
10698: LD_VAR 0 4
10702: PUSH
10703: LD_INT 10
10705: MUL
10706: PLUS
10707: PUSH
10708: LD_INT 15
10710: PLUS
10711: PPUSH
10712: CALL_OW 110
10716: EQUAL
10717: IFFALSE 10790
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
10719: LD_VAR 0 5
10723: PUSH
10724: LD_VAR 0 4
10728: PUSH
10729: LD_INT 10
10731: MUL
10732: PLUS
10733: PUSH
10734: LD_INT 13
10736: PLUS
10737: PPUSH
10738: CALL_OW 110
10742: PUSH
10743: LD_INT 0
10745: GREATER
10746: PUSH
10747: LD_VAR 0 1
10751: PPUSH
10752: CALL_OW 313
10756: NOT
10757: OR
10758: IFFALSE 10776
// Shadow_Artefact ( side , art ) else
10760: LD_VAR 0 4
10764: PPUSH
10765: LD_VAR 0 3
10769: PPUSH
10770: CALL 9638 0 2
10774: GO 10790
// Highlight_Artefact ( side , art ) ;
10776: LD_VAR 0 4
10780: PPUSH
10781: LD_VAR 0 3
10785: PPUSH
10786: CALL 9770 0 2
// end ; end ; end ;
10790: GO 10635
10792: POP
10793: POP
// end ; end_of_file
10794: LD_VAR 0 2
10798: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
10799: LD_INT 10
10801: PPUSH
10802: CALL_OW 67
// if not IsBusy ( lab ) then
10806: LD_VAR 0 2
10810: PPUSH
10811: CALL_OW 315
10815: NOT
10816: IFFALSE 10843
// begin labs_in_use := labs_in_use diff lab ;
10818: LD_ADDR_EXP 46
10822: PUSH
10823: LD_EXP 46
10827: PUSH
10828: LD_VAR 0 2
10832: DIFF
10833: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10834: LD_VAR 0 2
10838: PPUSH
10839: CALL 10599 0 1
// end ; end ;
10843: PPOPN 2
10845: END
// on ResearchStarted ( tech , lab ) do var un , side ;
10846: LD_INT 0
10848: PPUSH
10849: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
10850: LD_ADDR_EXP 46
10854: PUSH
10855: LD_EXP 46
10859: PUSH
10860: LD_VAR 0 2
10864: ADD
10865: ST_TO_ADDR
// side := GetSide ( lab ) ;
10866: LD_ADDR_VAR 0 4
10870: PUSH
10871: LD_VAR 0 2
10875: PPUSH
10876: CALL_OW 255
10880: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
10881: LD_ADDR_VAR 0 3
10885: PUSH
10886: DOUBLE
10887: LD_INT 0
10889: DEC
10890: ST_TO_ADDR
10891: LD_EXP 43
10895: PUSH
10896: LD_INT 1
10898: MINUS
10899: PUSH
10900: FOR_TO
10901: IFFALSE 10980
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
10903: LD_VAR 0 2
10907: PUSH
10908: LD_VAR 0 3
10912: PUSH
10913: LD_INT 100
10915: MUL
10916: PUSH
10917: LD_INT 11
10919: PLUS
10920: PPUSH
10921: CALL_OW 110
10925: PUSH
10926: LD_VAR 0 3
10930: PUSH
10931: LD_INT 100
10933: MUL
10934: PUSH
10935: LD_VAR 0 4
10939: PUSH
10940: LD_INT 10
10942: MUL
10943: PLUS
10944: PUSH
10945: LD_INT 15
10947: PLUS
10948: PPUSH
10949: CALL_OW 110
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: IN
10958: IFFALSE 10978
// DeInit_Lab ( side , un + 1 ) ;
10960: LD_VAR 0 4
10964: PPUSH
10965: LD_VAR 0 3
10969: PUSH
10970: LD_INT 1
10972: PLUS
10973: PPUSH
10974: CALL 10460 0 2
10978: GO 10900
10980: POP
10981: POP
// end ;
10982: PPOPN 4
10984: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10985: LD_INT 10
10987: PPUSH
10988: CALL_OW 67
// if not IsBusy ( lab ) then
10992: LD_VAR 0 2
10996: PPUSH
10997: CALL_OW 315
11001: NOT
11002: IFFALSE 11029
// begin labs_in_use := labs_in_use diff lab ;
11004: LD_ADDR_EXP 46
11008: PUSH
11009: LD_EXP 46
11013: PUSH
11014: LD_VAR 0 2
11018: DIFF
11019: ST_TO_ADDR
// Update_Artefact ( lab ) ;
11020: LD_VAR 0 2
11024: PPUSH
11025: CALL 10599 0 1
// end ; end ; end_of_file
11029: PPOPN 2
11031: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
11032: LD_INT 0
11034: PPUSH
11035: PPUSH
11036: PPUSH
// vysledek := true ;
11037: LD_ADDR_VAR 0 5
11041: PUSH
11042: LD_INT 1
11044: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
11045: LD_ADDR_VAR 0 6
11049: PUSH
11050: LD_VAR 0 1
11054: PUSH
11055: LD_INT 10
11057: MUL
11058: PUSH
11059: LD_INT 15
11061: PLUS
11062: PPUSH
11063: CALL_OW 110
11067: PPUSH
11068: CALL_OW 274
11072: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
11073: LD_VAR 0 6
11077: PUSH
11078: LD_VAR 0 6
11082: PPUSH
11083: CALL_OW 279
11087: PUSH
11088: LD_INT 3
11090: ARRAY
11091: PUSH
11092: LD_INT 6
11094: PPUSH
11095: CALL_OW 110
11099: GREATEREQUAL
11100: AND
11101: IFFALSE 11191
// begin PlaceSeeing ( x , y , side , - 15 ) ;
11103: LD_VAR 0 2
11107: PPUSH
11108: LD_VAR 0 3
11112: PPUSH
11113: LD_VAR 0 1
11117: PPUSH
11118: LD_INT 15
11120: NEG
11121: PPUSH
11122: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
11126: LD_VAR 0 6
11130: PPUSH
11131: LD_INT 3
11133: PPUSH
11134: LD_VAR 0 6
11138: PPUSH
11139: CALL_OW 279
11143: PUSH
11144: LD_INT 3
11146: ARRAY
11147: PUSH
11148: LD_INT 6
11150: PPUSH
11151: CALL_OW 110
11155: MINUS
11156: PPUSH
11157: CALL_OW 277
// view_data := [ x , y , side ] ;
11161: LD_ADDR_LOC 12
11165: PUSH
11166: LD_VAR 0 2
11170: PUSH
11171: LD_VAR 0 3
11175: PUSH
11176: LD_VAR 0 1
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: ST_TO_ADDR
// enable ( 1 ) ;
11186: LD_INT 1
11188: ENABLE_MARKED
// end else
11189: GO 11199
// vysledek := false ;
11191: LD_ADDR_VAR 0 5
11195: PUSH
11196: LD_INT 0
11198: ST_TO_ADDR
// result := vysledek ;
11199: LD_ADDR_VAR 0 4
11203: PUSH
11204: LD_VAR 0 5
11208: ST_TO_ADDR
// end ;
11209: LD_VAR 0 4
11213: RET
// every 0 0$2 trigger view_data marked 1 do
11214: LD_LOC 12
11218: IFFALSE 11269
11220: GO 11222
11222: DISABLE
// begin wait ( 0 0$30 ) ;
11223: LD_INT 1050
11225: PPUSH
11226: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
11230: LD_LOC 12
11234: PUSH
11235: LD_INT 1
11237: ARRAY
11238: PPUSH
11239: LD_LOC 12
11243: PUSH
11244: LD_INT 2
11246: ARRAY
11247: PPUSH
11248: LD_LOC 12
11252: PUSH
11253: LD_INT 3
11255: ARRAY
11256: PPUSH
11257: CALL_OW 331
// view_data := 0 ;
11261: LD_ADDR_LOC 12
11265: PUSH
11266: LD_INT 0
11268: ST_TO_ADDR
// end ;
11269: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
11270: LD_INT 0
11272: PPUSH
11273: PPUSH
11274: PPUSH
11275: PPUSH
11276: PPUSH
11277: PPUSH
11278: PPUSH
11279: PPUSH
// vysledek := true ;
11280: LD_ADDR_VAR 0 4
11284: PUSH
11285: LD_INT 1
11287: ST_TO_ADDR
// it_can := false ;
11288: LD_ADDR_VAR 0 8
11292: PUSH
11293: LD_INT 0
11295: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
11296: LD_ADDR_VAR 0 9
11300: PUSH
11301: LD_INT 30
11303: PUSH
11304: LD_INT 28
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
11311: LD_ADDR_VAR 0 10
11315: PUSH
11316: LD_INT 8
11318: PUSH
11319: LD_INT 48
11321: PUSH
11322: LD_INT 29
11324: PUSH
11325: LD_INT 49
11327: PUSH
11328: LD_INT 10
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
11338: LD_ADDR_VAR 0 7
11342: PUSH
11343: LD_VAR 0 2
11347: PPUSH
11348: CALL_OW 247
11352: PUSH
11353: LD_INT 3
11355: EQUAL
11356: PUSH
11357: LD_VAR 0 2
11361: PPUSH
11362: CALL_OW 266
11366: PUSH
11367: LD_VAR 0 9
11371: IN
11372: PUSH
11373: LD_VAR 0 2
11377: PPUSH
11378: CALL_OW 269
11382: PUSH
11383: LD_VAR 0 10
11387: IN
11388: OR
11389: AND
11390: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
11391: LD_ADDR_VAR 0 6
11395: PUSH
11396: LD_VAR 0 2
11400: PPUSH
11401: CALL_OW 247
11405: PUSH
11406: LD_INT 2
11408: EQUAL
11409: PUSH
11410: LD_VAR 0 2
11414: PPUSH
11415: CALL_OW 264
11419: PUSH
11420: LD_VAR 0 10
11424: IN
11425: PUSH
11426: LD_VAR 0 2
11430: PPUSH
11431: CALL_OW 262
11435: PUSH
11436: LD_INT 3
11438: EQUAL
11439: OR
11440: AND
11441: ST_TO_ADDR
// case def_artefact_two of 1 :
11442: LD_EXP 2
11446: PUSH
11447: LD_INT 1
11449: DOUBLE
11450: EQUAL
11451: IFTRUE 11455
11453: GO 11472
11455: POP
// if b_can then
11456: LD_VAR 0 7
11460: IFFALSE 11470
// it_can := true ; 2 :
11462: LD_ADDR_VAR 0 8
11466: PUSH
11467: LD_INT 1
11469: ST_TO_ADDR
11470: GO 11529
11472: LD_INT 2
11474: DOUBLE
11475: EQUAL
11476: IFTRUE 11480
11478: GO 11497
11480: POP
// if v_can then
11481: LD_VAR 0 6
11485: IFFALSE 11495
// it_can := true ; 3 :
11487: LD_ADDR_VAR 0 8
11491: PUSH
11492: LD_INT 1
11494: ST_TO_ADDR
11495: GO 11529
11497: LD_INT 3
11499: DOUBLE
11500: EQUAL
11501: IFTRUE 11505
11503: GO 11528
11505: POP
// if b_can or v_can then
11506: LD_VAR 0 7
11510: PUSH
11511: LD_VAR 0 6
11515: OR
11516: IFFALSE 11526
// it_can := true ; end ;
11518: LD_ADDR_VAR 0 8
11522: PUSH
11523: LD_INT 1
11525: ST_TO_ADDR
11526: GO 11529
11528: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
11529: LD_ADDR_VAR 0 5
11533: PUSH
11534: LD_INT 100
11536: PUSH
11537: LD_VAR 0 1
11541: PUSH
11542: LD_INT 10
11544: MUL
11545: PLUS
11546: PUSH
11547: LD_INT 15
11549: PLUS
11550: PPUSH
11551: CALL_OW 110
11555: PPUSH
11556: CALL_OW 274
11560: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
11561: LD_VAR 0 5
11565: PUSH
11566: LD_VAR 0 8
11570: AND
11571: PUSH
11572: LD_VAR 0 5
11576: PPUSH
11577: CALL_OW 279
11581: PUSH
11582: LD_INT 3
11584: ARRAY
11585: PUSH
11586: LD_INT 106
11588: PPUSH
11589: CALL_OW 110
11593: GREATEREQUAL
11594: AND
11595: IFFALSE 11643
// begin KillUnit ( un ) ;
11597: LD_VAR 0 2
11601: PPUSH
11602: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
11606: LD_VAR 0 5
11610: PPUSH
11611: LD_INT 3
11613: PPUSH
11614: LD_VAR 0 5
11618: PPUSH
11619: CALL_OW 279
11623: PUSH
11624: LD_INT 3
11626: ARRAY
11627: PUSH
11628: LD_INT 106
11630: PPUSH
11631: CALL_OW 110
11635: MINUS
11636: PPUSH
11637: CALL_OW 277
// end else
11641: GO 11651
// vysledek := false ;
11643: LD_ADDR_VAR 0 4
11647: PUSH
11648: LD_INT 0
11650: ST_TO_ADDR
// result := vysledek ;
11651: LD_ADDR_VAR 0 3
11655: PUSH
11656: LD_VAR 0 4
11660: ST_TO_ADDR
// end ;
11661: LD_VAR 0 3
11665: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
11666: LD_INT 0
11668: PPUSH
11669: PPUSH
11670: PPUSH
11671: PPUSH
// vysledek := true ;
11672: LD_ADDR_VAR 0 5
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
11680: LD_ADDR_VAR 0 7
11684: PUSH
11685: LD_INT 200
11687: PUSH
11688: LD_VAR 0 1
11692: PUSH
11693: LD_INT 10
11695: MUL
11696: PLUS
11697: PUSH
11698: LD_INT 15
11700: PLUS
11701: PPUSH
11702: CALL_OW 110
11706: PPUSH
11707: CALL_OW 274
11711: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
11712: LD_VAR 0 7
11716: PUSH
11717: LD_VAR 0 7
11721: PPUSH
11722: CALL_OW 279
11726: PUSH
11727: LD_INT 3
11729: ARRAY
11730: PUSH
11731: LD_INT 206
11733: PPUSH
11734: CALL_OW 110
11738: GREATEREQUAL
11739: AND
11740: IFFALSE 11796
// begin ArtContamination ( p1 , p2 , 15 ) ;
11742: LD_VAR 0 2
11746: PPUSH
11747: LD_VAR 0 3
11751: PPUSH
11752: LD_INT 15
11754: PPUSH
11755: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
11759: LD_VAR 0 7
11763: PPUSH
11764: LD_INT 3
11766: PPUSH
11767: LD_VAR 0 7
11771: PPUSH
11772: CALL_OW 279
11776: PUSH
11777: LD_INT 3
11779: ARRAY
11780: PUSH
11781: LD_INT 206
11783: PPUSH
11784: CALL_OW 110
11788: MINUS
11789: PPUSH
11790: CALL_OW 277
// end else
11794: GO 11804
// vysledek := false ;
11796: LD_ADDR_VAR 0 5
11800: PUSH
11801: LD_INT 0
11803: ST_TO_ADDR
// result := vysledek ;
11804: LD_ADDR_VAR 0 4
11808: PUSH
11809: LD_VAR 0 5
11813: ST_TO_ADDR
// end ;
11814: LD_VAR 0 4
11818: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
11819: GO 11821
11821: DISABLE
11822: LD_INT 0
11824: PPUSH
11825: PPUSH
11826: PPUSH
// begin for art = 0 to artefact_number do
11827: LD_ADDR_VAR 0 1
11831: PUSH
11832: DOUBLE
11833: LD_INT 0
11835: DEC
11836: ST_TO_ADDR
11837: LD_EXP 43
11841: PUSH
11842: FOR_TO
11843: IFFALSE 11977
// for side = 1 to Side_Positions do
11845: LD_ADDR_VAR 0 2
11849: PUSH
11850: DOUBLE
11851: LD_INT 1
11853: DEC
11854: ST_TO_ADDR
11855: LD_EXP 23
11859: PUSH
11860: FOR_TO
11861: IFFALSE 11973
// begin recharge := art * 100 + side * 10 + 13 ;
11863: LD_ADDR_VAR 0 3
11867: PUSH
11868: LD_VAR 0 1
11872: PUSH
11873: LD_INT 100
11875: MUL
11876: PUSH
11877: LD_VAR 0 2
11881: PUSH
11882: LD_INT 10
11884: MUL
11885: PLUS
11886: PUSH
11887: LD_INT 13
11889: PLUS
11890: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
11891: LD_EXP 23
11895: PUSH
11896: LD_VAR 0 2
11900: ARRAY
11901: PUSH
11902: LD_VAR 0 3
11906: PPUSH
11907: CALL_OW 110
11911: PUSH
11912: LD_INT 0
11914: GREATER
11915: AND
11916: IFFALSE 11971
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11918: LD_VAR 0 3
11922: PPUSH
11923: LD_VAR 0 3
11927: PPUSH
11928: CALL_OW 110
11932: PUSH
11933: LD_INT 1
11935: MINUS
11936: PPUSH
11937: CALL_OW 109
// if not GetTag ( recharge ) then
11941: LD_VAR 0 3
11945: PPUSH
11946: CALL_OW 110
11950: NOT
11951: IFFALSE 11971
// Highlight_Artefact ( side , art + 1 ) ;
11953: LD_VAR 0 2
11957: PPUSH
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 1
11965: PLUS
11966: PPUSH
11967: CALL 9770 0 2
// end ; end ;
11971: GO 11860
11973: POP
11974: POP
11975: GO 11842
11977: POP
11978: POP
// enable ;
11979: ENABLE
// end ; end_of_file
11980: PPOPN 3
11982: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11983: LD_INT 0
11985: PPUSH
11986: PPUSH
11987: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11988: LD_INT 18
11990: PPUSH
11991: LD_VAR 0 1
11995: PUSH
11996: LD_INT 1
11998: ARRAY
11999: PPUSH
12000: LD_VAR 0 1
12004: PUSH
12005: LD_INT 2
12007: ARRAY
12008: PPUSH
12009: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12013: LD_VAR 0 1
12017: PUSH
12018: LD_INT 1
12020: ARRAY
12021: PPUSH
12022: LD_VAR 0 1
12026: PUSH
12027: LD_INT 2
12029: ARRAY
12030: PPUSH
12031: CALL_OW 494
// Wait ( 30 ) ;
12035: LD_INT 30
12037: PPUSH
12038: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
12042: LD_INT 18
12044: PPUSH
12045: LD_INT 4
12047: PPUSH
12048: CALL_OW 286
// base := ( art - 1 ) * 100 ;
12052: LD_ADDR_VAR 0 4
12056: PUSH
12057: LD_VAR 0 2
12061: PUSH
12062: LD_INT 1
12064: MINUS
12065: PUSH
12066: LD_INT 100
12068: MUL
12069: ST_TO_ADDR
// if GetTag ( base + 11 ) then
12070: LD_VAR 0 4
12074: PUSH
12075: LD_INT 11
12077: PLUS
12078: PPUSH
12079: CALL_OW 110
12083: IFFALSE 12221
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
12085: LD_ADDR_VAR 0 5
12089: PUSH
12090: LD_VAR 0 4
12094: PUSH
12095: LD_INT 11
12097: PLUS
12098: PPUSH
12099: CALL_OW 110
12103: PPUSH
12104: CALL_OW 255
12108: ST_TO_ADDR
// if GetTag ( base + 12 ) then
12109: LD_VAR 0 4
12113: PUSH
12114: LD_INT 12
12116: PLUS
12117: PPUSH
12118: CALL_OW 110
12122: IFFALSE 12165
// begin ComCancel ( GetTag ( base + 11 ) ) ;
12124: LD_VAR 0 4
12128: PUSH
12129: LD_INT 11
12131: PLUS
12132: PPUSH
12133: CALL_OW 110
12137: PPUSH
12138: CALL_OW 127
// Wait ( 10 ) ;
12142: LD_INT 10
12144: PPUSH
12145: CALL_OW 67
// SetTag ( base + 12 , false ) ;
12149: LD_VAR 0 4
12153: PUSH
12154: LD_INT 12
12156: PLUS
12157: PPUSH
12158: LD_INT 0
12160: PPUSH
12161: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
12165: LD_VAR 0 4
12169: PUSH
12170: LD_VAR 0 5
12174: PUSH
12175: LD_INT 10
12177: MUL
12178: PLUS
12179: PUSH
12180: LD_INT 11
12182: PLUS
12183: PPUSH
12184: CALL_OW 110
12188: NOT
12189: IFFALSE 12205
// DeInit_Lab ( side , art ) ;
12191: LD_VAR 0 5
12195: PPUSH
12196: LD_VAR 0 2
12200: PPUSH
12201: CALL 10460 0 2
// SetTag ( base + 11 , 0 ) ;
12205: LD_VAR 0 4
12209: PUSH
12210: LD_INT 11
12212: PLUS
12213: PPUSH
12214: LD_INT 0
12216: PPUSH
12217: CALL_OW 109
// end ; end ;
12221: LD_VAR 0 3
12225: RET
// every 0 0$5 marked 5 do var hex , un ;
12226: GO 12228
12228: DISABLE
12229: LD_INT 0
12231: PPUSH
12232: PPUSH
// begin wait ( 3 3$0 ) ;
12233: LD_INT 6300
12235: PPUSH
12236: CALL_OW 67
// if GetTag ( 09 ) then
12240: LD_INT 9
12242: PPUSH
12243: CALL_OW 110
12247: IFFALSE 12286
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
12249: LD_ADDR_VAR 0 1
12253: PUSH
12254: LD_INT 13
12256: PPUSH
12257: CALL_OW 110
12261: PPUSH
12262: CALL_OW 250
12266: PUSH
12267: LD_INT 13
12269: PPUSH
12270: CALL_OW 110
12274: PPUSH
12275: CALL_OW 251
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: ST_TO_ADDR
12284: GO 12305
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: LD_EXP 45
12295: PUSH
12296: LD_INT 1
12298: ARRAY
12299: PPUSH
12300: CALL_OW 469
12304: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12305: LD_VAR 0 1
12309: PUSH
12310: LD_INT 1
12312: ARRAY
12313: PPUSH
12314: LD_VAR 0 1
12318: PUSH
12319: LD_INT 2
12321: ARRAY
12322: PPUSH
12323: LD_INT 16
12325: PPUSH
12326: CALL_OW 309
12330: NOT
12331: IFFALSE 12608
// begin if GetTag ( 09 ) then
12333: LD_INT 9
12335: PPUSH
12336: CALL_OW 110
12340: IFFALSE 12387
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12342: LD_INT 13
12344: PPUSH
12345: CALL_OW 110
12349: PPUSH
12350: LD_INT 4
12352: PPUSH
12353: LD_EXP 45
12357: PUSH
12358: LD_INT 1
12360: ARRAY
12361: NEG
12362: PPUSH
12363: CALL_OW 290
// SetTag ( 09 , 0 ) ;
12367: LD_INT 9
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL_OW 109
// SetTag ( 13 , 0 ) ;
12377: LD_INT 13
12379: PPUSH
12380: LD_INT 0
12382: PPUSH
12383: CALL_OW 109
// end ; DestroyArtefact ( hex , 1 ) ;
12387: LD_VAR 0 1
12391: PPUSH
12392: LD_INT 1
12394: PPUSH
12395: CALL 11983 0 2
// wait ( 5 ) ;
12399: LD_INT 5
12401: PPUSH
12402: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12406: LD_ADDR_VAR 0 1
12410: PUSH
12411: LD_INT 16
12413: PPUSH
12414: LD_INT 0
12416: PPUSH
12417: CALL_OW 16
12421: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12422: LD_ADDR_VAR 0 2
12426: PUSH
12427: LD_VAR 0 1
12431: PUSH
12432: LD_INT 1
12434: ARRAY
12435: PPUSH
12436: LD_VAR 0 1
12440: PUSH
12441: LD_INT 2
12443: ARRAY
12444: PPUSH
12445: CALL_OW 428
12449: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12450: LD_VAR 0 2
12454: PUSH
12455: LD_INT 0
12457: GREATER
12458: PUSH
12459: LD_VAR 0 2
12463: PPUSH
12464: CALL_OW 247
12468: PUSH
12469: LD_INT 3
12471: EQUAL
12472: AND
12473: IFFALSE 12517
// begin KillUnit ( un ) ;
12475: LD_VAR 0 2
12479: PPUSH
12480: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12484: LD_VAR 0 1
12488: PUSH
12489: LD_INT 1
12491: ARRAY
12492: PPUSH
12493: LD_VAR 0 1
12497: PUSH
12498: LD_INT 2
12500: ARRAY
12501: PPUSH
12502: CALL_OW 428
12506: IFFALSE 12517
// wait ( 10 ) ;
12508: LD_INT 10
12510: PPUSH
12511: CALL_OW 67
12515: GO 12484
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12517: LD_VAR 0 1
12521: PUSH
12522: LD_INT 1
12524: ARRAY
12525: PPUSH
12526: LD_VAR 0 1
12530: PUSH
12531: LD_INT 2
12533: ARRAY
12534: PPUSH
12535: CALL_OW 428
12539: NOT
12540: IFFALSE 12406
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12542: LD_VAR 0 1
12546: PUSH
12547: LD_INT 1
12549: ARRAY
12550: PPUSH
12551: LD_VAR 0 1
12555: PUSH
12556: LD_INT 2
12558: ARRAY
12559: PPUSH
12560: CALL_OW 494
// wait ( 30 ) ;
12564: LD_INT 30
12566: PPUSH
12567: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12571: LD_INT 4
12573: PPUSH
12574: LD_EXP 45
12578: PUSH
12579: LD_INT 1
12581: ARRAY
12582: PPUSH
12583: LD_VAR 0 1
12587: PUSH
12588: LD_INT 1
12590: ARRAY
12591: PPUSH
12592: LD_VAR 0 1
12596: PUSH
12597: LD_INT 2
12599: ARRAY
12600: PPUSH
12601: LD_INT 0
12603: PPUSH
12604: CALL_OW 58
// end ; enable ;
12608: ENABLE
// end ;
12609: PPOPN 2
12611: END
// every 0 0$5 marked 6 do var hex , un ;
12612: GO 12614
12614: DISABLE
12615: LD_INT 0
12617: PPUSH
12618: PPUSH
// begin wait ( 3 3$30 ) ;
12619: LD_INT 7350
12621: PPUSH
12622: CALL_OW 67
// if GetTag ( 109 ) then
12626: LD_INT 109
12628: PPUSH
12629: CALL_OW 110
12633: IFFALSE 12672
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
12635: LD_ADDR_VAR 0 1
12639: PUSH
12640: LD_INT 113
12642: PPUSH
12643: CALL_OW 110
12647: PPUSH
12648: CALL_OW 250
12652: PUSH
12653: LD_INT 113
12655: PPUSH
12656: CALL_OW 110
12660: PPUSH
12661: CALL_OW 251
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: ST_TO_ADDR
12670: GO 12691
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
12672: LD_ADDR_VAR 0 1
12676: PUSH
12677: LD_EXP 45
12681: PUSH
12682: LD_INT 2
12684: ARRAY
12685: PPUSH
12686: CALL_OW 469
12690: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12691: LD_VAR 0 1
12695: PUSH
12696: LD_INT 1
12698: ARRAY
12699: PPUSH
12700: LD_VAR 0 1
12704: PUSH
12705: LD_INT 2
12707: ARRAY
12708: PPUSH
12709: LD_INT 16
12711: PPUSH
12712: CALL_OW 309
12716: NOT
12717: IFFALSE 12994
// begin if GetTag ( 109 ) then
12719: LD_INT 109
12721: PPUSH
12722: CALL_OW 110
12726: IFFALSE 12773
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 1 ] ) ;
12728: LD_INT 113
12730: PPUSH
12731: CALL_OW 110
12735: PPUSH
12736: LD_INT 4
12738: PPUSH
12739: LD_EXP 45
12743: PUSH
12744: LD_INT 1
12746: ARRAY
12747: NEG
12748: PPUSH
12749: CALL_OW 290
// SetTag ( 109 , 0 ) ;
12753: LD_INT 109
12755: PPUSH
12756: LD_INT 0
12758: PPUSH
12759: CALL_OW 109
// SetTag ( 113 , 0 ) ;
12763: LD_INT 113
12765: PPUSH
12766: LD_INT 0
12768: PPUSH
12769: CALL_OW 109
// end ; DestroyArtefact ( hex , 2 ) ;
12773: LD_VAR 0 1
12777: PPUSH
12778: LD_INT 2
12780: PPUSH
12781: CALL 11983 0 2
// wait ( 5 ) ;
12785: LD_INT 5
12787: PPUSH
12788: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12792: LD_ADDR_VAR 0 1
12796: PUSH
12797: LD_INT 16
12799: PPUSH
12800: LD_INT 0
12802: PPUSH
12803: CALL_OW 16
12807: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12808: LD_ADDR_VAR 0 2
12812: PUSH
12813: LD_VAR 0 1
12817: PUSH
12818: LD_INT 1
12820: ARRAY
12821: PPUSH
12822: LD_VAR 0 1
12826: PUSH
12827: LD_INT 2
12829: ARRAY
12830: PPUSH
12831: CALL_OW 428
12835: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12836: LD_VAR 0 2
12840: PUSH
12841: LD_INT 0
12843: GREATER
12844: PUSH
12845: LD_VAR 0 2
12849: PPUSH
12850: CALL_OW 247
12854: PUSH
12855: LD_INT 3
12857: EQUAL
12858: AND
12859: IFFALSE 12903
// begin KillUnit ( un ) ;
12861: LD_VAR 0 2
12865: PPUSH
12866: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12870: LD_VAR 0 1
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 1
12883: PUSH
12884: LD_INT 2
12886: ARRAY
12887: PPUSH
12888: CALL_OW 428
12892: IFFALSE 12903
// wait ( 10 ) ;
12894: LD_INT 10
12896: PPUSH
12897: CALL_OW 67
12901: GO 12870
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12903: LD_VAR 0 1
12907: PUSH
12908: LD_INT 1
12910: ARRAY
12911: PPUSH
12912: LD_VAR 0 1
12916: PUSH
12917: LD_INT 2
12919: ARRAY
12920: PPUSH
12921: CALL_OW 428
12925: NOT
12926: IFFALSE 12792
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12928: LD_VAR 0 1
12932: PUSH
12933: LD_INT 1
12935: ARRAY
12936: PPUSH
12937: LD_VAR 0 1
12941: PUSH
12942: LD_INT 2
12944: ARRAY
12945: PPUSH
12946: CALL_OW 494
// wait ( 30 ) ;
12950: LD_INT 30
12952: PPUSH
12953: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12957: LD_INT 4
12959: PPUSH
12960: LD_EXP 45
12964: PUSH
12965: LD_INT 2
12967: ARRAY
12968: PPUSH
12969: LD_VAR 0 1
12973: PUSH
12974: LD_INT 1
12976: ARRAY
12977: PPUSH
12978: LD_VAR 0 1
12982: PUSH
12983: LD_INT 2
12985: ARRAY
12986: PPUSH
12987: LD_INT 0
12989: PPUSH
12990: CALL_OW 58
// end ; enable ;
12994: ENABLE
// end ;
12995: PPOPN 2
12997: END
// every 0 0$5 marked 7 do var hex , un ;
12998: GO 13000
13000: DISABLE
13001: LD_INT 0
13003: PPUSH
13004: PPUSH
// begin wait ( 4 4$0 ) ;
13005: LD_INT 8400
13007: PPUSH
13008: CALL_OW 67
// if GetTag ( 209 ) then
13012: LD_INT 209
13014: PPUSH
13015: CALL_OW 110
13019: IFFALSE 13058
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
13021: LD_ADDR_VAR 0 1
13025: PUSH
13026: LD_INT 213
13028: PPUSH
13029: CALL_OW 110
13033: PPUSH
13034: CALL_OW 250
13038: PUSH
13039: LD_INT 213
13041: PPUSH
13042: CALL_OW 110
13046: PPUSH
13047: CALL_OW 251
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: ST_TO_ADDR
13056: GO 13077
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
13058: LD_ADDR_VAR 0 1
13062: PUSH
13063: LD_EXP 45
13067: PUSH
13068: LD_INT 3
13070: ARRAY
13071: PPUSH
13072: CALL_OW 469
13076: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
13077: LD_VAR 0 1
13081: PUSH
13082: LD_INT 1
13084: ARRAY
13085: PPUSH
13086: LD_VAR 0 1
13090: PUSH
13091: LD_INT 2
13093: ARRAY
13094: PPUSH
13095: LD_INT 16
13097: PPUSH
13098: CALL_OW 309
13102: NOT
13103: IFFALSE 13380
// begin if GetTag ( 209 ) then
13105: LD_INT 209
13107: PPUSH
13108: CALL_OW 110
13112: IFFALSE 13159
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 1 ] ) ;
13114: LD_INT 213
13116: PPUSH
13117: CALL_OW 110
13121: PPUSH
13122: LD_INT 4
13124: PPUSH
13125: LD_EXP 45
13129: PUSH
13130: LD_INT 1
13132: ARRAY
13133: NEG
13134: PPUSH
13135: CALL_OW 290
// SetTag ( 209 , 0 ) ;
13139: LD_INT 209
13141: PPUSH
13142: LD_INT 0
13144: PPUSH
13145: CALL_OW 109
// SetTag ( 213 , 0 ) ;
13149: LD_INT 213
13151: PPUSH
13152: LD_INT 0
13154: PPUSH
13155: CALL_OW 109
// end ; DestroyArtefact ( hex , 3 ) ;
13159: LD_VAR 0 1
13163: PPUSH
13164: LD_INT 3
13166: PPUSH
13167: CALL 11983 0 2
// wait ( 5 ) ;
13171: LD_INT 5
13173: PPUSH
13174: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
13178: LD_ADDR_VAR 0 1
13182: PUSH
13183: LD_INT 16
13185: PPUSH
13186: LD_INT 0
13188: PPUSH
13189: CALL_OW 16
13193: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13194: LD_ADDR_VAR 0 2
13198: PUSH
13199: LD_VAR 0 1
13203: PUSH
13204: LD_INT 1
13206: ARRAY
13207: PPUSH
13208: LD_VAR 0 1
13212: PUSH
13213: LD_INT 2
13215: ARRAY
13216: PPUSH
13217: CALL_OW 428
13221: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
13222: LD_VAR 0 2
13226: PUSH
13227: LD_INT 0
13229: GREATER
13230: PUSH
13231: LD_VAR 0 2
13235: PPUSH
13236: CALL_OW 247
13240: PUSH
13241: LD_INT 3
13243: EQUAL
13244: AND
13245: IFFALSE 13289
// begin KillUnit ( un ) ;
13247: LD_VAR 0 2
13251: PPUSH
13252: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
13256: LD_VAR 0 1
13260: PUSH
13261: LD_INT 1
13263: ARRAY
13264: PPUSH
13265: LD_VAR 0 1
13269: PUSH
13270: LD_INT 2
13272: ARRAY
13273: PPUSH
13274: CALL_OW 428
13278: IFFALSE 13289
// wait ( 10 ) ;
13280: LD_INT 10
13282: PPUSH
13283: CALL_OW 67
13287: GO 13256
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
13289: LD_VAR 0 1
13293: PUSH
13294: LD_INT 1
13296: ARRAY
13297: PPUSH
13298: LD_VAR 0 1
13302: PUSH
13303: LD_INT 2
13305: ARRAY
13306: PPUSH
13307: CALL_OW 428
13311: NOT
13312: IFFALSE 13178
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
13314: LD_VAR 0 1
13318: PUSH
13319: LD_INT 1
13321: ARRAY
13322: PPUSH
13323: LD_VAR 0 1
13327: PUSH
13328: LD_INT 2
13330: ARRAY
13331: PPUSH
13332: CALL_OW 494
// wait ( 30 ) ;
13336: LD_INT 30
13338: PPUSH
13339: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
13343: LD_INT 4
13345: PPUSH
13346: LD_EXP 45
13350: PUSH
13351: LD_INT 3
13353: ARRAY
13354: PPUSH
13355: LD_VAR 0 1
13359: PUSH
13360: LD_INT 1
13362: ARRAY
13363: PPUSH
13364: LD_VAR 0 1
13368: PUSH
13369: LD_INT 2
13371: ARRAY
13372: PPUSH
13373: LD_INT 0
13375: PPUSH
13376: CALL_OW 58
// end ; enable ;
13380: ENABLE
// end ; end_of_file
13381: PPOPN 2
13383: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
13384: LD_INT 0
13386: PPUSH
13387: PPUSH
// for un in battle_flags_id do
13388: LD_ADDR_VAR 0 2
13392: PUSH
13393: LD_EXP 34
13397: PUSH
13398: FOR_IN
13399: IFFALSE 13474
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
13401: LD_VAR 0 2
13405: PPUSH
13406: LD_INT 1
13408: PUSH
13409: LD_LOC 14
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 2
13420: PUSH
13421: LD_LOC 14
13425: PUSH
13426: LD_INT 2
13428: DIV
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 3
13436: PUSH
13437: LD_LOC 14
13441: PUSH
13442: LD_INT 5
13444: DIV
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 20
13452: PUSH
13453: LD_LOC 14
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: PPUSH
13468: CALL_OW 423
13472: GO 13398
13474: POP
13475: POP
// end ;
13476: LD_VAR 0 1
13480: RET
// every 0 0$0.1 do var un ;
13481: GO 13483
13483: DISABLE
13484: LD_INT 0
13486: PPUSH
// begin if not def_morale_flags then
13487: LD_EXP 59
13491: NOT
13492: IFFALSE 13496
// exit ;
13494: GO 13573
// if not morale_decreasing_time then
13496: LD_EXP 14
13500: NOT
13501: IFFALSE 13505
// exit ;
13503: GO 13573
// strength = 100 ;
13505: LD_ADDR_LOC 14
13509: PUSH
13510: LD_INT 100
13512: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
13513: LD_EXP 14
13517: PPUSH
13518: CALL_OW 67
// strength := strength - 1 ;
13522: LD_ADDR_LOC 14
13526: PUSH
13527: LD_LOC 14
13531: PUSH
13532: LD_INT 1
13534: MINUS
13535: ST_TO_ADDR
// Update_Flags ;
13536: CALL 13384 0 0
// until not strength ;
13540: LD_LOC 14
13544: NOT
13545: IFFALSE 13513
// for un in battle_flags_id do
13547: LD_ADDR_VAR 0 1
13551: PUSH
13552: LD_EXP 34
13556: PUSH
13557: FOR_IN
13558: IFFALSE 13571
// KillBattleFlag ( un ) ;
13560: LD_VAR 0 1
13564: PPUSH
13565: CALL_OW 419
13569: GO 13557
13571: POP
13572: POP
// end ; end_of_file
13573: PPOPN 1
13575: END
// export BuildUpAreas ; export buildUpTimeActive ; export function BeginBuildUp ; var i , j ; begin
13576: LD_INT 0
13578: PPUSH
13579: PPUSH
13580: PPUSH
// buildUpTimeActive := true ;
13581: LD_ADDR_EXP 48
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13589: LD_ADDR_VAR 0 2
13593: PUSH
13594: DOUBLE
13595: LD_INT 1
13597: DEC
13598: ST_TO_ADDR
13599: LD_EXP 47
13603: PUSH
13604: FOR_TO
13605: IFFALSE 13760
// if Position_Sides [ i ] then
13607: LD_EXP 29
13611: PUSH
13612: LD_VAR 0 2
13616: ARRAY
13617: IFFALSE 13758
// for j := 1 to 8 do
13619: LD_ADDR_VAR 0 3
13623: PUSH
13624: DOUBLE
13625: LD_INT 1
13627: DEC
13628: ST_TO_ADDR
13629: LD_INT 8
13631: PUSH
13632: FOR_TO
13633: IFFALSE 13756
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13635: LD_EXP 23
13639: PUSH
13640: LD_VAR 0 3
13644: ARRAY
13645: PUSH
13646: LD_EXP 21
13650: PUSH
13651: LD_EXP 29
13655: PUSH
13656: LD_VAR 0 2
13660: ARRAY
13661: ARRAY
13662: PUSH
13663: LD_EXP 21
13667: PUSH
13668: LD_VAR 0 3
13672: ARRAY
13673: NONEQUAL
13674: PUSH
13675: LD_EXP 25
13679: NOT
13680: PUSH
13681: LD_EXP 29
13685: PUSH
13686: LD_VAR 0 2
13690: ARRAY
13691: PUSH
13692: LD_VAR 0 3
13696: NONEQUAL
13697: AND
13698: OR
13699: AND
13700: IFFALSE 13724
// HideArea ( j , BuildUpAreas [ i ] ) else
13702: LD_VAR 0 3
13706: PPUSH
13707: LD_EXP 47
13711: PUSH
13712: LD_VAR 0 2
13716: ARRAY
13717: PPUSH
13718: CALL_OW 333
13722: GO 13754
// if ( j = your_side ) then
13724: LD_VAR 0 3
13728: PUSH
13729: LD_OWVAR 2
13733: EQUAL
13734: IFFALSE 13754
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
13736: LD_EXP 47
13740: PUSH
13741: LD_VAR 0 2
13745: ARRAY
13746: PPUSH
13747: LD_INT 5
13749: PPUSH
13750: CALL_OW 424
13754: GO 13632
13756: POP
13757: POP
13758: GO 13604
13760: POP
13761: POP
// end ;
13762: LD_VAR 0 1
13766: RET
// export function EndBuildUp ; var i , j ; begin
13767: LD_INT 0
13769: PPUSH
13770: PPUSH
13771: PPUSH
// buildUpTimeActive := false ;
13772: LD_ADDR_EXP 48
13776: PUSH
13777: LD_INT 0
13779: ST_TO_ADDR
// for i := 1 to BuildUpAreas do
13780: LD_ADDR_VAR 0 2
13784: PUSH
13785: DOUBLE
13786: LD_INT 1
13788: DEC
13789: ST_TO_ADDR
13790: LD_EXP 47
13794: PUSH
13795: FOR_TO
13796: IFFALSE 13951
// if Position_Sides [ i ] then
13798: LD_EXP 29
13802: PUSH
13803: LD_VAR 0 2
13807: ARRAY
13808: IFFALSE 13949
// for j := 1 to 8 do
13810: LD_ADDR_VAR 0 3
13814: PUSH
13815: DOUBLE
13816: LD_INT 1
13818: DEC
13819: ST_TO_ADDR
13820: LD_INT 8
13822: PUSH
13823: FOR_TO
13824: IFFALSE 13947
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
13826: LD_EXP 23
13830: PUSH
13831: LD_VAR 0 3
13835: ARRAY
13836: PUSH
13837: LD_EXP 21
13841: PUSH
13842: LD_EXP 29
13846: PUSH
13847: LD_VAR 0 2
13851: ARRAY
13852: ARRAY
13853: PUSH
13854: LD_EXP 21
13858: PUSH
13859: LD_VAR 0 3
13863: ARRAY
13864: NONEQUAL
13865: PUSH
13866: LD_EXP 25
13870: NOT
13871: PUSH
13872: LD_EXP 29
13876: PUSH
13877: LD_VAR 0 2
13881: ARRAY
13882: PUSH
13883: LD_VAR 0 3
13887: NONEQUAL
13888: AND
13889: OR
13890: AND
13891: IFFALSE 13915
// ShowArea ( j , BuildUpAreas [ i ] ) else
13893: LD_VAR 0 3
13897: PPUSH
13898: LD_EXP 47
13902: PUSH
13903: LD_VAR 0 2
13907: ARRAY
13908: PPUSH
13909: CALL_OW 334
13913: GO 13945
// if ( j = your_side ) then
13915: LD_VAR 0 3
13919: PUSH
13920: LD_OWVAR 2
13924: EQUAL
13925: IFFALSE 13945
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
13927: LD_EXP 47
13931: PUSH
13932: LD_VAR 0 2
13936: ARRAY
13937: PPUSH
13938: LD_INT 0
13940: PPUSH
13941: CALL_OW 424
13945: GO 13823
13947: POP
13948: POP
13949: GO 13795
13951: POP
13952: POP
// end ;
13953: LD_VAR 0 1
13957: RET
// every 5 trigger buildUpTimeActive do var i , un ;
13958: LD_EXP 48
13962: IFFALSE 14145
13964: GO 13966
13966: DISABLE
13967: LD_INT 0
13969: PPUSH
13970: PPUSH
// begin for i := 1 to BuildUpAreas do
13971: LD_ADDR_VAR 0 1
13975: PUSH
13976: DOUBLE
13977: LD_INT 1
13979: DEC
13980: ST_TO_ADDR
13981: LD_EXP 47
13985: PUSH
13986: FOR_TO
13987: IFFALSE 14142
// if Position_Sides [ i ] then
13989: LD_EXP 29
13993: PUSH
13994: LD_VAR 0 1
13998: ARRAY
13999: IFFALSE 14140
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14001: LD_ADDR_VAR 0 2
14005: PUSH
14006: LD_EXP 47
14010: PUSH
14011: LD_VAR 0 1
14015: ARRAY
14016: PPUSH
14017: LD_INT 2
14019: PUSH
14020: LD_INT 21
14022: PUSH
14023: LD_INT 1
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 21
14032: PUSH
14033: LD_INT 2
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 22
14047: PUSH
14048: LD_OWVAR 2
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PPUSH
14061: CALL_OW 70
14065: PUSH
14066: FOR_IN
14067: IFFALSE 14138
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
14069: LD_EXP 21
14073: PUSH
14074: LD_EXP 29
14078: PUSH
14079: LD_VAR 0 1
14083: ARRAY
14084: ARRAY
14085: PUSH
14086: LD_EXP 21
14090: PUSH
14091: LD_OWVAR 2
14095: ARRAY
14096: NONEQUAL
14097: PUSH
14098: LD_EXP 25
14102: NOT
14103: PUSH
14104: LD_EXP 29
14108: PUSH
14109: LD_VAR 0 1
14113: ARRAY
14114: PUSH
14115: LD_OWVAR 2
14119: NONEQUAL
14120: AND
14121: OR
14122: IFFALSE 14136
// ComMoveToArea ( un , BuildUpEscape ) ;
14124: LD_VAR 0 2
14128: PPUSH
14129: LD_INT 24
14131: PPUSH
14132: CALL_OW 113
14136: GO 14066
14138: POP
14139: POP
14140: GO 13986
14142: POP
14143: POP
// enable ;
14144: ENABLE
// end ;
14145: PPOPN 2
14147: END
// every 0 0$1 trigger def_builduptime do
14148: LD_EXP 64
14152: IFFALSE 14178
14154: GO 14156
14156: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14157: LD_INT 8400
14159: PUSH
14160: LD_EXP 64
14164: PUSH
14165: LD_INT 2100
14167: MUL
14168: PLUS
14169: PPUSH
14170: CALL_OW 67
// EndBuildUp ;
14174: CALL 13767 0 0
// end ; end_of_file
14178: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
14179: LD_INT 0
14181: PPUSH
14182: PPUSH
// if ( not IAmSpec ) then
14183: CALL_OW 531
14187: NOT
14188: IFFALSE 14204
// Result := Limits_Info ^  ;
14190: LD_ADDR_VAR 0 1
14194: PUSH
14195: LD_LOC 26
14199: PUSH
14200: LD_STRING 
14202: ADD
14203: ST_TO_ADDR
// for i := 1 to 8 do
14204: LD_ADDR_VAR 0 2
14208: PUSH
14209: DOUBLE
14210: LD_INT 1
14212: DEC
14213: ST_TO_ADDR
14214: LD_INT 8
14216: PUSH
14217: FOR_TO
14218: IFFALSE 14263
// if Cheaters [ i ] then
14220: LD_LOC 27
14224: PUSH
14225: LD_VAR 0 2
14229: ARRAY
14230: IFFALSE 14261
// Result := Result ^ [ #Cheater , i , i ] ;
14232: LD_ADDR_VAR 0 1
14236: PUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_STRING #Cheater
14244: PUSH
14245: LD_VAR 0 2
14249: PUSH
14250: LD_VAR 0 2
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: LIST
14259: ADD
14260: ST_TO_ADDR
14261: GO 14217
14263: POP
14264: POP
// end ;
14265: LD_VAR 0 1
14269: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
14270: LD_INT 0
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
14276: PPUSH
// case Game_Type of 10 :
14277: LD_EXP 49
14281: PUSH
14282: LD_INT 10
14284: DOUBLE
14285: EQUAL
14286: IFTRUE 14290
14288: GO 14301
14290: POP
// def_game_rules := 1 ; 11 :
14291: LD_ADDR_EXP 50
14295: PUSH
14296: LD_INT 1
14298: ST_TO_ADDR
14299: GO 14321
14301: LD_INT 11
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14320
14309: POP
// def_game_rules := 3 ; end ;
14310: LD_ADDR_EXP 50
14314: PUSH
14315: LD_INT 3
14317: ST_TO_ADDR
14318: GO 14321
14320: POP
// case def_game_rules of 0 :
14321: LD_EXP 50
14325: PUSH
14326: LD_INT 0
14328: DOUBLE
14329: EQUAL
14330: IFTRUE 14334
14332: GO 14339
14334: POP
// exit ; 1 :
14335: GO 16397
14337: GO 16297
14339: LD_INT 1
14341: DOUBLE
14342: EQUAL
14343: IFTRUE 14347
14345: GO 14563
14347: POP
// begin def_base_level := 2 ;
14348: LD_ADDR_EXP 51
14352: PUSH
14353: LD_INT 2
14355: ST_TO_ADDR
// def_amount_of_people := 2 ;
14356: LD_ADDR_EXP 52
14360: PUSH
14361: LD_INT 2
14363: ST_TO_ADDR
// def_skill_level := 1 ;
14364: LD_ADDR_EXP 53
14368: PUSH
14369: LD_INT 1
14371: ST_TO_ADDR
// def_starting_resources := 2 ;
14372: LD_ADDR_EXP 54
14376: PUSH
14377: LD_INT 2
14379: ST_TO_ADDR
// def_shipments_density := 1 ;
14380: LD_ADDR_EXP 55
14384: PUSH
14385: LD_INT 1
14387: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14388: LD_ADDR_EXP 56
14392: PUSH
14393: LD_INT 0
14395: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14396: LD_ADDR_EXP 57
14400: PUSH
14401: LD_INT 1
14403: ST_TO_ADDR
// def_shared_vision := 1 ;
14404: LD_ADDR_EXP 58
14408: PUSH
14409: LD_INT 1
14411: ST_TO_ADDR
// def_morale_flags := 3 ;
14412: LD_ADDR_EXP 59
14416: PUSH
14417: LD_INT 3
14419: ST_TO_ADDR
// def_siberite_detection := 1 ;
14420: LD_ADDR_EXP 60
14424: PUSH
14425: LD_INT 1
14427: ST_TO_ADDR
// def_people_respawning := 1 ;
14428: LD_ADDR_EXP 61
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14436: LD_ADDR_EXP 62
14440: PUSH
14441: LD_INT 1
14443: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14444: LD_ADDR_EXP 63
14448: PUSH
14449: LD_INT 0
14451: ST_TO_ADDR
// def_builduptime := 2 ;
14452: LD_ADDR_EXP 64
14456: PUSH
14457: LD_INT 2
14459: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
14460: LD_ADDR_VAR 0 2
14464: PUSH
14465: EMPTY
14466: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14467: LD_ADDR_VAR 0 3
14471: PUSH
14472: EMPTY
14473: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14474: LD_ADDR_LOC 21
14478: PUSH
14479: EMPTY
14480: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14481: LD_ADDR_LOC 22
14485: PUSH
14486: EMPTY
14487: ST_TO_ADDR
// Banned_Controls := [ ] ;
14488: LD_ADDR_LOC 23
14492: PUSH
14493: EMPTY
14494: ST_TO_ADDR
// Banned_Engines := [ ] ;
14495: LD_ADDR_LOC 24
14499: PUSH
14500: EMPTY
14501: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14502: LD_ADDR_LOC 19
14506: PUSH
14507: LD_INT 37
14509: PUSH
14510: EMPTY
14511: LIST
14512: PUSH
14513: LD_INT 4
14515: PUSH
14516: LD_INT 5
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 31
14525: PUSH
14526: LD_INT 32
14528: PUSH
14529: LD_INT 33
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: LIST
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
14542: LD_ADDR_LOC 20
14546: PUSH
14547: LD_INT 2
14549: PUSH
14550: LD_INT 2
14552: PUSH
14553: LD_INT 4
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: LIST
14560: ST_TO_ADDR
// end ; 2 :
14561: GO 16297
14563: LD_INT 2
14565: DOUBLE
14566: EQUAL
14567: IFTRUE 14571
14569: GO 14780
14571: POP
// begin def_base_level := 1 ;
14572: LD_ADDR_EXP 51
14576: PUSH
14577: LD_INT 1
14579: ST_TO_ADDR
// def_amount_of_people := 2 ;
14580: LD_ADDR_EXP 52
14584: PUSH
14585: LD_INT 2
14587: ST_TO_ADDR
// def_skill_level := 3 ;
14588: LD_ADDR_EXP 53
14592: PUSH
14593: LD_INT 3
14595: ST_TO_ADDR
// def_starting_resources := 3 ;
14596: LD_ADDR_EXP 54
14600: PUSH
14601: LD_INT 3
14603: ST_TO_ADDR
// def_shipments_density := 2 ;
14604: LD_ADDR_EXP 55
14608: PUSH
14609: LD_INT 2
14611: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14612: LD_ADDR_EXP 56
14616: PUSH
14617: LD_INT 1
14619: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14620: LD_ADDR_EXP 57
14624: PUSH
14625: LD_INT 2
14627: ST_TO_ADDR
// def_shared_vision := 1 ;
14628: LD_ADDR_EXP 58
14632: PUSH
14633: LD_INT 1
14635: ST_TO_ADDR
// def_morale_flags := 0 ;
14636: LD_ADDR_EXP 59
14640: PUSH
14641: LD_INT 0
14643: ST_TO_ADDR
// def_siberite_detection := 1 ;
14644: LD_ADDR_EXP 60
14648: PUSH
14649: LD_INT 1
14651: ST_TO_ADDR
// def_people_respawning := 0 ;
14652: LD_ADDR_EXP 61
14656: PUSH
14657: LD_INT 0
14659: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
14660: LD_ADDR_EXP 62
14664: PUSH
14665: LD_INT 0
14667: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14668: LD_ADDR_EXP 63
14672: PUSH
14673: LD_INT 0
14675: ST_TO_ADDR
// def_builduptime := 2 ;
14676: LD_ADDR_EXP 64
14680: PUSH
14681: LD_INT 2
14683: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
14684: LD_ADDR_VAR 0 2
14688: PUSH
14689: LD_INT 1
14691: PUSH
14692: EMPTY
14693: LIST
14694: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: EMPTY
14701: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14702: LD_ADDR_LOC 21
14706: PUSH
14707: EMPTY
14708: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14709: LD_ADDR_LOC 22
14713: PUSH
14714: EMPTY
14715: ST_TO_ADDR
// Banned_Controls := [ ] ;
14716: LD_ADDR_LOC 23
14720: PUSH
14721: EMPTY
14722: ST_TO_ADDR
// Banned_Engines := [ ] ;
14723: LD_ADDR_LOC 24
14727: PUSH
14728: EMPTY
14729: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14730: LD_ADDR_LOC 19
14734: PUSH
14735: LD_INT 4
14737: PUSH
14738: LD_INT 5
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 31
14747: PUSH
14748: LD_INT 32
14750: PUSH
14751: LD_INT 33
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: LIST
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
14763: LD_ADDR_LOC 20
14767: PUSH
14768: LD_INT 1
14770: PUSH
14771: LD_INT 2
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: ST_TO_ADDR
// end ; 3 :
14778: GO 16297
14780: LD_INT 3
14782: DOUBLE
14783: EQUAL
14784: IFTRUE 14788
14786: GO 15031
14788: POP
// begin def_base_level := 1 ;
14789: LD_ADDR_EXP 51
14793: PUSH
14794: LD_INT 1
14796: ST_TO_ADDR
// def_amount_of_people := 2 ;
14797: LD_ADDR_EXP 52
14801: PUSH
14802: LD_INT 2
14804: ST_TO_ADDR
// def_skill_level := 3 ;
14805: LD_ADDR_EXP 53
14809: PUSH
14810: LD_INT 3
14812: ST_TO_ADDR
// def_starting_resources := 3 ;
14813: LD_ADDR_EXP 54
14817: PUSH
14818: LD_INT 3
14820: ST_TO_ADDR
// def_shipments_density := 1 ;
14821: LD_ADDR_EXP 55
14825: PUSH
14826: LD_INT 1
14828: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14829: LD_ADDR_EXP 56
14833: PUSH
14834: LD_INT 0
14836: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14837: LD_ADDR_EXP 57
14841: PUSH
14842: LD_INT 1
14844: ST_TO_ADDR
// def_shared_vision := 1 ;
14845: LD_ADDR_EXP 58
14849: PUSH
14850: LD_INT 1
14852: ST_TO_ADDR
// def_morale_flags := 0 ;
14853: LD_ADDR_EXP 59
14857: PUSH
14858: LD_INT 0
14860: ST_TO_ADDR
// def_siberite_detection := 1 ;
14861: LD_ADDR_EXP 60
14865: PUSH
14866: LD_INT 1
14868: ST_TO_ADDR
// def_people_respawning := 0 ;
14869: LD_ADDR_EXP 61
14873: PUSH
14874: LD_INT 0
14876: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14877: LD_ADDR_EXP 62
14881: PUSH
14882: LD_INT 2
14884: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14885: LD_ADDR_EXP 63
14889: PUSH
14890: LD_INT 0
14892: ST_TO_ADDR
// def_builduptime := 1 ;
14893: LD_ADDR_EXP 64
14897: PUSH
14898: LD_INT 1
14900: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14901: LD_ADDR_VAR 0 2
14905: PUSH
14906: LD_INT 23
14908: PUSH
14909: EMPTY
14910: LIST
14911: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
14912: LD_ADDR_VAR 0 3
14916: PUSH
14917: LD_INT 2
14919: PUSH
14920: LD_INT 37
14922: PUSH
14923: LD_INT 32
14925: PUSH
14926: LD_INT 33
14928: PUSH
14929: LD_INT 36
14931: PUSH
14932: LD_INT 16
14934: PUSH
14935: LD_INT 23
14937: PUSH
14938: LD_INT 21
14940: PUSH
14941: LD_INT 18
14943: PUSH
14944: LD_INT 22
14946: PUSH
14947: LD_INT 20
14949: PUSH
14950: LD_INT 19
14952: PUSH
14953: LD_INT 25
14955: PUSH
14956: LD_INT 17
14958: PUSH
14959: LD_INT 24
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14979: LD_ADDR_LOC 21
14983: PUSH
14984: EMPTY
14985: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14986: LD_ADDR_LOC 22
14990: PUSH
14991: EMPTY
14992: ST_TO_ADDR
// Banned_Controls := [ ] ;
14993: LD_ADDR_LOC 23
14997: PUSH
14998: EMPTY
14999: ST_TO_ADDR
// Banned_Engines := [ ] ;
15000: LD_ADDR_LOC 24
15004: PUSH
15005: EMPTY
15006: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15007: LD_ADDR_LOC 19
15011: PUSH
15012: EMPTY
15013: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15014: LD_ADDR_LOC 20
15018: PUSH
15019: EMPTY
15020: ST_TO_ADDR
// No_Mechs := true ;
15021: LD_ADDR_EXP 65
15025: PUSH
15026: LD_INT 1
15028: ST_TO_ADDR
// end ; 4 :
15029: GO 16297
15031: LD_INT 4
15033: DOUBLE
15034: EQUAL
15035: IFTRUE 15039
15037: GO 15214
15039: POP
// begin def_base_level := 1 ;
15040: LD_ADDR_EXP 51
15044: PUSH
15045: LD_INT 1
15047: ST_TO_ADDR
// def_amount_of_people := 2 ;
15048: LD_ADDR_EXP 52
15052: PUSH
15053: LD_INT 2
15055: ST_TO_ADDR
// def_skill_level := 3 ;
15056: LD_ADDR_EXP 53
15060: PUSH
15061: LD_INT 3
15063: ST_TO_ADDR
// def_starting_resources := 3 ;
15064: LD_ADDR_EXP 54
15068: PUSH
15069: LD_INT 3
15071: ST_TO_ADDR
// def_shipments_density := 2 ;
15072: LD_ADDR_EXP 55
15076: PUSH
15077: LD_INT 2
15079: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15080: LD_ADDR_EXP 56
15084: PUSH
15085: LD_INT 1
15087: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15088: LD_ADDR_EXP 57
15092: PUSH
15093: LD_INT 2
15095: ST_TO_ADDR
// def_shared_vision := 1 ;
15096: LD_ADDR_EXP 58
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// def_morale_flags := 0 ;
15104: LD_ADDR_EXP 59
15108: PUSH
15109: LD_INT 0
15111: ST_TO_ADDR
// def_siberite_detection := 1 ;
15112: LD_ADDR_EXP 60
15116: PUSH
15117: LD_INT 1
15119: ST_TO_ADDR
// def_people_respawning := 0 ;
15120: LD_ADDR_EXP 61
15124: PUSH
15125: LD_INT 0
15127: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
15128: LD_ADDR_EXP 62
15132: PUSH
15133: LD_INT 0
15135: ST_TO_ADDR
// def_siberite_bomb := 1 ;
15136: LD_ADDR_EXP 63
15140: PUSH
15141: LD_INT 1
15143: ST_TO_ADDR
// def_builduptime := 3 ;
15144: LD_ADDR_EXP 64
15148: PUSH
15149: LD_INT 3
15151: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
15152: LD_ADDR_VAR 0 2
15156: PUSH
15157: LD_INT 1
15159: PUSH
15160: EMPTY
15161: LIST
15162: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
15163: LD_ADDR_VAR 0 3
15167: PUSH
15168: EMPTY
15169: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15170: LD_ADDR_LOC 21
15174: PUSH
15175: EMPTY
15176: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15177: LD_ADDR_LOC 22
15181: PUSH
15182: EMPTY
15183: ST_TO_ADDR
// Banned_Controls := [ ] ;
15184: LD_ADDR_LOC 23
15188: PUSH
15189: EMPTY
15190: ST_TO_ADDR
// Banned_Engines := [ ] ;
15191: LD_ADDR_LOC 24
15195: PUSH
15196: EMPTY
15197: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15198: LD_ADDR_LOC 19
15202: PUSH
15203: EMPTY
15204: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15205: LD_ADDR_LOC 20
15209: PUSH
15210: EMPTY
15211: ST_TO_ADDR
// end ; 5 :
15212: GO 16297
15214: LD_INT 5
15216: DOUBLE
15217: EQUAL
15218: IFTRUE 15222
15220: GO 15471
15222: POP
// begin def_base_level := 0 ;
15223: LD_ADDR_EXP 51
15227: PUSH
15228: LD_INT 0
15230: ST_TO_ADDR
// def_amount_of_people := 0 ;
15231: LD_ADDR_EXP 52
15235: PUSH
15236: LD_INT 0
15238: ST_TO_ADDR
// def_skill_level := 0 ;
15239: LD_ADDR_EXP 53
15243: PUSH
15244: LD_INT 0
15246: ST_TO_ADDR
// def_starting_resources := 0 ;
15247: LD_ADDR_EXP 54
15251: PUSH
15252: LD_INT 0
15254: ST_TO_ADDR
// def_shipments_density := 0 ;
15255: LD_ADDR_EXP 55
15259: PUSH
15260: LD_INT 0
15262: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15263: LD_ADDR_EXP 56
15267: PUSH
15268: LD_INT 0
15270: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15271: LD_ADDR_EXP 57
15275: PUSH
15276: LD_INT 0
15278: ST_TO_ADDR
// def_shared_vision := 1 ;
15279: LD_ADDR_EXP 58
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// def_morale_flags := 0 ;
15287: LD_ADDR_EXP 59
15291: PUSH
15292: LD_INT 0
15294: ST_TO_ADDR
// def_siberite_detection := 0 ;
15295: LD_ADDR_EXP 60
15299: PUSH
15300: LD_INT 0
15302: ST_TO_ADDR
// def_people_respawning := 1 ;
15303: LD_ADDR_EXP 61
15307: PUSH
15308: LD_INT 1
15310: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15311: LD_ADDR_EXP 62
15315: PUSH
15316: LD_INT 1
15318: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15319: LD_ADDR_EXP 63
15323: PUSH
15324: LD_INT 0
15326: ST_TO_ADDR
// def_builduptime := 0 ;
15327: LD_ADDR_EXP 64
15331: PUSH
15332: LD_INT 0
15334: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
15335: LD_ADDR_VAR 0 2
15339: PUSH
15340: LD_INT 10
15342: PUSH
15343: LD_INT 3
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
15350: LD_ADDR_VAR 0 3
15354: PUSH
15355: LD_INT 12
15357: PUSH
15358: LD_INT 11
15360: PUSH
15361: LD_INT 14
15363: PUSH
15364: LD_INT 13
15366: PUSH
15367: LD_INT 5
15369: PUSH
15370: LD_INT 24
15372: PUSH
15373: LD_INT 21
15375: PUSH
15376: LD_INT 33
15378: PUSH
15379: LD_INT 36
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
15393: LD_ADDR_LOC 21
15397: PUSH
15398: LD_INT 31
15400: PUSH
15401: EMPTY
15402: LIST
15403: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15404: LD_ADDR_LOC 22
15408: PUSH
15409: EMPTY
15410: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
15411: LD_ADDR_LOC 23
15415: PUSH
15416: LD_INT 2
15418: PUSH
15419: EMPTY
15420: LIST
15421: ST_TO_ADDR
// Banned_Engines := [ ] ;
15422: LD_ADDR_LOC 24
15426: PUSH
15427: EMPTY
15428: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
15429: LD_ADDR_LOC 19
15433: PUSH
15434: LD_INT 4
15436: PUSH
15437: EMPTY
15438: LIST
15439: PUSH
15440: LD_INT 31
15442: PUSH
15443: LD_INT 32
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
15454: LD_ADDR_LOC 20
15458: PUSH
15459: LD_INT 1
15461: PUSH
15462: LD_INT 1
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: ST_TO_ADDR
// end ; 6 :
15469: GO 16297
15471: LD_INT 6
15473: DOUBLE
15474: EQUAL
15475: IFTRUE 15479
15477: GO 15682
15479: POP
// begin def_base_level := 1 ;
15480: LD_ADDR_EXP 51
15484: PUSH
15485: LD_INT 1
15487: ST_TO_ADDR
// def_amount_of_people := 2 ;
15488: LD_ADDR_EXP 52
15492: PUSH
15493: LD_INT 2
15495: ST_TO_ADDR
// def_skill_level := 3 ;
15496: LD_ADDR_EXP 53
15500: PUSH
15501: LD_INT 3
15503: ST_TO_ADDR
// def_starting_resources := 3 ;
15504: LD_ADDR_EXP 54
15508: PUSH
15509: LD_INT 3
15511: ST_TO_ADDR
// def_shipments_density := 1 ;
15512: LD_ADDR_EXP 55
15516: PUSH
15517: LD_INT 1
15519: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15520: LD_ADDR_EXP 56
15524: PUSH
15525: LD_INT 0
15527: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
15528: LD_ADDR_EXP 57
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// def_shared_vision := 1 ;
15536: LD_ADDR_EXP 58
15540: PUSH
15541: LD_INT 1
15543: ST_TO_ADDR
// def_morale_flags := 0 ;
15544: LD_ADDR_EXP 59
15548: PUSH
15549: LD_INT 0
15551: ST_TO_ADDR
// def_siberite_detection := 1 ;
15552: LD_ADDR_EXP 60
15556: PUSH
15557: LD_INT 1
15559: ST_TO_ADDR
// def_people_respawning := 2 ;
15560: LD_ADDR_EXP 61
15564: PUSH
15565: LD_INT 2
15567: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15568: LD_ADDR_EXP 62
15572: PUSH
15573: LD_INT 1
15575: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15576: LD_ADDR_EXP 63
15580: PUSH
15581: LD_INT 0
15583: ST_TO_ADDR
// def_builduptime := 1 ;
15584: LD_ADDR_EXP 64
15588: PUSH
15589: LD_INT 1
15591: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15592: LD_ADDR_VAR 0 2
15596: PUSH
15597: LD_INT 23
15599: PUSH
15600: EMPTY
15601: LIST
15602: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
15603: LD_ADDR_VAR 0 3
15607: PUSH
15608: LD_INT 2
15610: PUSH
15611: LD_INT 37
15613: PUSH
15614: LD_INT 31
15616: PUSH
15617: LD_INT 32
15619: PUSH
15620: LD_INT 33
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15630: LD_ADDR_LOC 21
15634: PUSH
15635: EMPTY
15636: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15637: LD_ADDR_LOC 22
15641: PUSH
15642: EMPTY
15643: ST_TO_ADDR
// Banned_Controls := [ ] ;
15644: LD_ADDR_LOC 23
15648: PUSH
15649: EMPTY
15650: ST_TO_ADDR
// Banned_Engines := [ ] ;
15651: LD_ADDR_LOC 24
15655: PUSH
15656: EMPTY
15657: ST_TO_ADDR
// Restricted_Builds := [ ] ;
15658: LD_ADDR_LOC 19
15662: PUSH
15663: EMPTY
15664: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
15665: LD_ADDR_LOC 20
15669: PUSH
15670: EMPTY
15671: ST_TO_ADDR
// No_Mechs := true ;
15672: LD_ADDR_EXP 65
15676: PUSH
15677: LD_INT 1
15679: ST_TO_ADDR
// end ; 7 :
15680: GO 16297
15682: LD_INT 7
15684: DOUBLE
15685: EQUAL
15686: IFTRUE 15690
15688: GO 15888
15690: POP
// begin def_base_level := 1 ;
15691: LD_ADDR_EXP 51
15695: PUSH
15696: LD_INT 1
15698: ST_TO_ADDR
// def_amount_of_people := 2 ;
15699: LD_ADDR_EXP 52
15703: PUSH
15704: LD_INT 2
15706: ST_TO_ADDR
// def_skill_level := 3 ;
15707: LD_ADDR_EXP 53
15711: PUSH
15712: LD_INT 3
15714: ST_TO_ADDR
// def_starting_resources := 3 ;
15715: LD_ADDR_EXP 54
15719: PUSH
15720: LD_INT 3
15722: ST_TO_ADDR
// def_shipments_density := 1 ;
15723: LD_ADDR_EXP 55
15727: PUSH
15728: LD_INT 1
15730: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
15731: LD_ADDR_EXP 56
15735: PUSH
15736: LD_INT 1
15738: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
15739: LD_ADDR_EXP 57
15743: PUSH
15744: LD_INT 2
15746: ST_TO_ADDR
// def_shared_vision := 1 ;
15747: LD_ADDR_EXP 58
15751: PUSH
15752: LD_INT 1
15754: ST_TO_ADDR
// def_morale_flags := 0 ;
15755: LD_ADDR_EXP 59
15759: PUSH
15760: LD_INT 0
15762: ST_TO_ADDR
// def_siberite_detection := 1 ;
15763: LD_ADDR_EXP 60
15767: PUSH
15768: LD_INT 1
15770: ST_TO_ADDR
// def_people_respawning := 0 ;
15771: LD_ADDR_EXP 61
15775: PUSH
15776: LD_INT 0
15778: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
15779: LD_ADDR_EXP 62
15783: PUSH
15784: LD_INT 1
15786: ST_TO_ADDR
// def_siberite_bomb := 0 ;
15787: LD_ADDR_EXP 63
15791: PUSH
15792: LD_INT 0
15794: ST_TO_ADDR
// def_builduptime := 3 ;
15795: LD_ADDR_EXP 64
15799: PUSH
15800: LD_INT 3
15802: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
15803: LD_ADDR_VAR 0 2
15807: PUSH
15808: LD_INT 23
15810: PUSH
15811: EMPTY
15812: LIST
15813: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
15814: LD_ADDR_VAR 0 3
15818: PUSH
15819: LD_INT 37
15821: PUSH
15822: EMPTY
15823: LIST
15824: ST_TO_ADDR
// Banned_Weapons := [ ] ;
15825: LD_ADDR_LOC 21
15829: PUSH
15830: EMPTY
15831: ST_TO_ADDR
// Banned_Chassis := [ ] ;
15832: LD_ADDR_LOC 22
15836: PUSH
15837: EMPTY
15838: ST_TO_ADDR
// Banned_Controls := [ ] ;
15839: LD_ADDR_LOC 23
15843: PUSH
15844: EMPTY
15845: ST_TO_ADDR
// Banned_Engines := [ ] ;
15846: LD_ADDR_LOC 24
15850: PUSH
15851: EMPTY
15852: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
15853: LD_ADDR_LOC 19
15857: PUSH
15858: LD_INT 31
15860: PUSH
15861: LD_INT 32
15863: PUSH
15864: LD_INT 33
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: PUSH
15872: EMPTY
15873: LIST
15874: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
15875: LD_ADDR_LOC 20
15879: PUSH
15880: LD_INT 10
15882: PUSH
15883: EMPTY
15884: LIST
15885: ST_TO_ADDR
// end ; 8 :
15886: GO 16297
15888: LD_INT 8
15890: DOUBLE
15891: EQUAL
15892: IFTRUE 15896
15894: GO 16296
15896: POP
// begin def_base_level := 0 ;
15897: LD_ADDR_EXP 51
15901: PUSH
15902: LD_INT 0
15904: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
15905: LD_ADDR_EXP 52
15909: PUSH
15910: LD_INT 0
15912: PPUSH
15913: LD_INT 1
15915: PPUSH
15916: CALL_OW 12
15920: ST_TO_ADDR
// def_skill_level := 0 ;
15921: LD_ADDR_EXP 53
15925: PUSH
15926: LD_INT 0
15928: ST_TO_ADDR
// def_starting_resources := 2 ;
15929: LD_ADDR_EXP 54
15933: PUSH
15934: LD_INT 2
15936: ST_TO_ADDR
// def_shipments_density := 1 ;
15937: LD_ADDR_EXP 55
15941: PUSH
15942: LD_INT 1
15944: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
15945: LD_ADDR_EXP 56
15949: PUSH
15950: LD_INT 0
15952: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
15953: LD_ADDR_EXP 57
15957: PUSH
15958: LD_INT 0
15960: ST_TO_ADDR
// def_shared_vision := 1 ;
15961: LD_ADDR_EXP 58
15965: PUSH
15966: LD_INT 1
15968: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
15969: LD_ADDR_EXP 59
15973: PUSH
15974: LD_INT 0
15976: PPUSH
15977: LD_INT 2
15979: PPUSH
15980: CALL_OW 12
15984: ST_TO_ADDR
// def_siberite_detection := 0 ;
15985: LD_ADDR_EXP 60
15989: PUSH
15990: LD_INT 0
15992: ST_TO_ADDR
// def_people_respawning := 0 ;
15993: LD_ADDR_EXP 61
15997: PUSH
15998: LD_INT 0
16000: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
16001: LD_ADDR_EXP 62
16005: PUSH
16006: LD_INT 2
16008: ST_TO_ADDR
// def_siberite_bomb := 0 ;
16009: LD_ADDR_EXP 63
16013: PUSH
16014: LD_INT 0
16016: ST_TO_ADDR
// def_builduptime := 0 ;
16017: LD_ADDR_EXP 64
16021: PUSH
16022: LD_INT 0
16024: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
16025: LD_ADDR_VAR 0 2
16029: PUSH
16030: LD_INT 23
16032: PUSH
16033: LD_INT 20
16035: PUSH
16036: LD_INT 40
16038: PUSH
16039: LD_INT 47
16041: PUSH
16042: LD_INT 46
16044: PUSH
16045: LD_INT 39
16047: PUSH
16048: LD_INT 71
16050: PUSH
16051: LD_INT 34
16053: PUSH
16054: LD_INT 41
16056: PUSH
16057: LD_INT 44
16059: PUSH
16060: LD_INT 17
16062: PUSH
16063: LD_INT 16
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
16080: LD_ADDR_VAR 0 3
16084: PUSH
16085: LD_INT 37
16087: PUSH
16088: LD_INT 5
16090: PUSH
16091: LD_INT 13
16093: PUSH
16094: LD_INT 34
16096: PUSH
16097: LD_INT 12
16099: PUSH
16100: LD_INT 15
16102: PUSH
16103: LD_INT 11
16105: PUSH
16106: LD_INT 14
16108: PUSH
16109: LD_INT 29
16111: PUSH
16112: LD_INT 30
16114: PUSH
16115: LD_INT 28
16117: PUSH
16118: LD_INT 24
16120: PUSH
16121: LD_INT 25
16123: PUSH
16124: LD_INT 20
16126: PUSH
16127: LD_INT 21
16129: PUSH
16130: LD_INT 22
16132: PUSH
16133: LD_INT 36
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: ST_TO_ADDR
// Banned_Weapons := [ ] ;
16155: LD_ADDR_LOC 21
16159: PUSH
16160: EMPTY
16161: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
16162: LD_ADDR_LOC 22
16166: PUSH
16167: LD_INT 14
16169: PUSH
16170: EMPTY
16171: LIST
16172: ST_TO_ADDR
// Banned_Controls := [ ] ;
16173: LD_ADDR_LOC 23
16177: PUSH
16178: EMPTY
16179: ST_TO_ADDR
// Banned_Engines := [ ] ;
16180: LD_ADDR_LOC 24
16184: PUSH
16185: EMPTY
16186: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
16187: LD_ADDR_LOC 19
16191: PUSH
16192: LD_INT 31
16194: PUSH
16195: LD_INT 32
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 4
16204: PUSH
16205: EMPTY
16206: LIST
16207: PUSH
16208: EMPTY
16209: LIST
16210: LIST
16211: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
16212: LD_ADDR_LOC 20
16216: PUSH
16217: LD_INT 2
16219: PUSH
16220: LD_INT 1
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: ST_TO_ADDR
// for i := 1 to 8 do
16227: LD_ADDR_VAR 0 4
16231: PUSH
16232: DOUBLE
16233: LD_INT 1
16235: DEC
16236: ST_TO_ADDR
16237: LD_INT 8
16239: PUSH
16240: FOR_TO
16241: IFFALSE 16292
// if ( Side_Nations [ i ] = 3 ) then
16243: LD_EXP 24
16247: PUSH
16248: LD_VAR 0 4
16252: ARRAY
16253: PUSH
16254: LD_INT 3
16256: EQUAL
16257: IFFALSE 16290
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
16259: LD_ADDR_EXP 24
16263: PUSH
16264: LD_EXP 24
16268: PPUSH
16269: LD_VAR 0 4
16273: PPUSH
16274: LD_INT 1
16276: PPUSH
16277: LD_INT 2
16279: PPUSH
16280: CALL_OW 12
16284: PPUSH
16285: CALL_OW 1
16289: ST_TO_ADDR
16290: GO 16240
16292: POP
16293: POP
// end ; end ;
16294: GO 16297
16296: POP
// for i := 1 to 8 do
16297: LD_ADDR_VAR 0 4
16301: PUSH
16302: DOUBLE
16303: LD_INT 1
16305: DEC
16306: ST_TO_ADDR
16307: LD_INT 8
16309: PUSH
16310: FOR_TO
16311: IFFALSE 16395
// if Side_Positions [ i ] then
16313: LD_EXP 23
16317: PUSH
16318: LD_VAR 0 4
16322: ARRAY
16323: IFFALSE 16393
// begin for j in Unavailable_Techs do
16325: LD_ADDR_VAR 0 5
16329: PUSH
16330: LD_VAR 0 2
16334: PUSH
16335: FOR_IN
16336: IFFALSE 16357
// SetTech ( j , i , 0 ) ;
16338: LD_VAR 0 5
16342: PPUSH
16343: LD_VAR 0 4
16347: PPUSH
16348: LD_INT 0
16350: PPUSH
16351: CALL_OW 322
16355: GO 16335
16357: POP
16358: POP
// for j in Unavailable_Builds do
16359: LD_ADDR_VAR 0 5
16363: PUSH
16364: LD_VAR 0 3
16368: PUSH
16369: FOR_IN
16370: IFFALSE 16391
// SetRestrict ( j , i , 0 ) ;
16372: LD_VAR 0 5
16376: PPUSH
16377: LD_VAR 0 4
16381: PPUSH
16382: LD_INT 0
16384: PPUSH
16385: CALL_OW 324
16389: GO 16369
16391: POP
16392: POP
// end ;
16393: GO 16310
16395: POP
16396: POP
// end ;
16397: LD_VAR 0 1
16401: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
16402: LD_INT 0
16404: PPUSH
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
// for i := 1 to Restricted_Builds do
16411: LD_ADDR_VAR 0 2
16415: PUSH
16416: DOUBLE
16417: LD_INT 1
16419: DEC
16420: ST_TO_ADDR
16421: LD_LOC 19
16425: PUSH
16426: FOR_TO
16427: IFFALSE 16737
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
16429: LD_LOC 19
16433: PUSH
16434: LD_VAR 0 2
16438: ARRAY
16439: PUSH
16440: LD_INT 1
16442: ARRAY
16443: PUSH
16444: LD_INT 31
16446: DOUBLE
16447: EQUAL
16448: IFTRUE 16464
16450: LD_INT 32
16452: DOUBLE
16453: EQUAL
16454: IFTRUE 16464
16456: LD_INT 33
16458: DOUBLE
16459: EQUAL
16460: IFTRUE 16464
16462: GO 16475
16464: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
16465: LD_ADDR_VAR 0 6
16469: PUSH
16470: LD_STRING #Turrets
16472: ST_TO_ADDR
16473: GO 16520
16475: LD_INT 4
16477: DOUBLE
16478: EQUAL
16479: IFTRUE 16489
16481: LD_INT 5
16483: DOUBLE
16484: EQUAL
16485: IFTRUE 16489
16487: GO 16500
16489: POP
// btype := #Armouries ; b_Behemoth :
16490: LD_ADDR_VAR 0 6
16494: PUSH
16495: LD_STRING #Armouries
16497: ST_TO_ADDR
16498: GO 16520
16500: LD_INT 37
16502: DOUBLE
16503: EQUAL
16504: IFTRUE 16508
16506: GO 16519
16508: POP
// btype := #Behemoths ; end ;
16509: LD_ADDR_VAR 0 6
16513: PUSH
16514: LD_STRING #Behemoths
16516: ST_TO_ADDR
16517: GO 16520
16519: POP
// list := [ ] ;
16520: LD_ADDR_VAR 0 7
16524: PUSH
16525: EMPTY
16526: ST_TO_ADDR
// for j := 1 to 8 do
16527: LD_ADDR_VAR 0 3
16531: PUSH
16532: DOUBLE
16533: LD_INT 1
16535: DEC
16536: ST_TO_ADDR
16537: LD_INT 8
16539: PUSH
16540: FOR_TO
16541: IFFALSE 16634
// if Side_Positions [ j ] then
16543: LD_EXP 23
16547: PUSH
16548: LD_VAR 0 3
16552: ARRAY
16553: IFFALSE 16632
// begin amount := 0 ;
16555: LD_ADDR_VAR 0 5
16559: PUSH
16560: LD_INT 0
16562: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
16563: LD_ADDR_VAR 0 4
16567: PUSH
16568: LD_LOC 19
16572: PUSH
16573: LD_VAR 0 2
16577: ARRAY
16578: PUSH
16579: FOR_IN
16580: IFFALSE 16628
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
16582: LD_ADDR_VAR 0 5
16586: PUSH
16587: LD_VAR 0 5
16591: PUSH
16592: LD_INT 22
16594: PUSH
16595: LD_VAR 0 3
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 30
16606: PUSH
16607: LD_VAR 0 4
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PPUSH
16620: CALL_OW 69
16624: PLUS
16625: ST_TO_ADDR
16626: GO 16579
16628: POP
16629: POP
// break ;
16630: GO 16634
// end ;
16632: GO 16540
16634: POP
16635: POP
// list := [ ] ;
16636: LD_ADDR_VAR 0 7
16640: PUSH
16641: EMPTY
16642: ST_TO_ADDR
// for j := 1 to 8 do
16643: LD_ADDR_VAR 0 3
16647: PUSH
16648: DOUBLE
16649: LD_INT 1
16651: DEC
16652: ST_TO_ADDR
16653: LD_INT 8
16655: PUSH
16656: FOR_TO
16657: IFFALSE 16677
// list := list ^ amount ;
16659: LD_ADDR_VAR 0 7
16663: PUSH
16664: LD_VAR 0 7
16668: PUSH
16669: LD_VAR 0 5
16673: ADD
16674: ST_TO_ADDR
16675: GO 16656
16677: POP
16678: POP
// Already_Built := Already_Built ^ [ list ] ;
16679: LD_ADDR_LOC 25
16683: PUSH
16684: LD_LOC 25
16688: PUSH
16689: LD_VAR 0 7
16693: PUSH
16694: EMPTY
16695: LIST
16696: ADD
16697: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
16698: LD_ADDR_LOC 26
16702: PUSH
16703: LD_LOC 26
16707: PUSH
16708: LD_VAR 0 6
16712: PUSH
16713: LD_VAR 0 5
16717: PUSH
16718: LD_LOC 20
16722: PUSH
16723: LD_VAR 0 2
16727: ARRAY
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: LIST
16733: ADD
16734: ST_TO_ADDR
// end ;
16735: GO 16426
16737: POP
16738: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
16739: LD_ADDR_LOC 27
16743: PUSH
16744: LD_INT 0
16746: PUSH
16747: LD_INT 0
16749: PUSH
16750: LD_INT 0
16752: PUSH
16753: LD_INT 0
16755: PUSH
16756: LD_INT 0
16758: PUSH
16759: LD_INT 0
16761: PUSH
16762: LD_INT 0
16764: PUSH
16765: LD_INT 0
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: ST_TO_ADDR
// if Limits_Info then
16778: LD_LOC 26
16782: IFFALSE 16798
// Limits_Info := #Limits ^ Limits_Info ;
16784: LD_ADDR_LOC 26
16788: PUSH
16789: LD_STRING #Limits
16791: PUSH
16792: LD_LOC 26
16796: ADD
16797: ST_TO_ADDR
// end ;
16798: LD_VAR 0 1
16802: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
16803: LD_INT 0
16805: PPUSH
16806: PPUSH
16807: PPUSH
16808: PPUSH
// for i := 1 to Restricted_Builds do
16809: LD_ADDR_VAR 0 7
16813: PUSH
16814: DOUBLE
16815: LD_INT 1
16817: DEC
16818: ST_TO_ADDR
16819: LD_LOC 19
16823: PUSH
16824: FOR_TO
16825: IFFALSE 17248
// if BType in Restricted_Builds [ i ] then
16827: LD_VAR 0 2
16831: PUSH
16832: LD_LOC 19
16836: PUSH
16837: LD_VAR 0 7
16841: ARRAY
16842: IN
16843: IFFALSE 17246
// begin if old_side then
16845: LD_VAR 0 4
16849: IFFALSE 16975
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
16851: LD_LOC 25
16855: PUSH
16856: LD_VAR 0 7
16860: ARRAY
16861: PUSH
16862: LD_VAR 0 3
16866: ARRAY
16867: PUSH
16868: LD_VAR 0 5
16872: PLUS
16873: PUSH
16874: LD_LOC 20
16878: PUSH
16879: LD_VAR 0 7
16883: ARRAY
16884: GREATER
16885: IFFALSE 16911
// begin SetSide ( un , old_side ) ;
16887: LD_VAR 0 1
16891: PPUSH
16892: LD_VAR 0 4
16896: PPUSH
16897: CALL_OW 235
// count := 0 ;
16901: LD_ADDR_VAR 0 5
16905: PUSH
16906: LD_INT 0
16908: ST_TO_ADDR
// end else
16909: GO 16975
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
16911: LD_ADDR_LOC 25
16915: PUSH
16916: LD_LOC 25
16920: PPUSH
16921: LD_VAR 0 7
16925: PPUSH
16926: LD_LOC 25
16930: PUSH
16931: LD_VAR 0 7
16935: ARRAY
16936: PPUSH
16937: LD_VAR 0 4
16941: PPUSH
16942: LD_LOC 25
16946: PUSH
16947: LD_VAR 0 7
16951: ARRAY
16952: PUSH
16953: LD_VAR 0 4
16957: ARRAY
16958: PUSH
16959: LD_VAR 0 5
16963: MINUS
16964: PPUSH
16965: CALL_OW 1
16969: PPUSH
16970: CALL_OW 1
16974: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
16975: LD_ADDR_LOC 25
16979: PUSH
16980: LD_LOC 25
16984: PPUSH
16985: LD_VAR 0 7
16989: PPUSH
16990: LD_LOC 25
16994: PUSH
16995: LD_VAR 0 7
16999: ARRAY
17000: PPUSH
17001: LD_VAR 0 3
17005: PPUSH
17006: LD_LOC 25
17010: PUSH
17011: LD_VAR 0 7
17015: ARRAY
17016: PUSH
17017: LD_VAR 0 3
17021: ARRAY
17022: PUSH
17023: LD_VAR 0 5
17027: PLUS
17028: PPUSH
17029: CALL_OW 1
17033: PPUSH
17034: CALL_OW 1
17038: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
17039: LD_VAR 0 5
17043: PUSH
17044: LD_INT 0
17046: NONEQUAL
17047: PUSH
17048: LD_VAR 0 3
17052: PUSH
17053: LD_OWVAR 2
17057: EQUAL
17058: AND
17059: IFFALSE 17102
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
17061: LD_ADDR_LOC 26
17065: PUSH
17066: LD_LOC 26
17070: PPUSH
17071: LD_INT 3
17073: PUSH
17074: LD_VAR 0 7
17078: MUL
17079: PPUSH
17080: LD_LOC 25
17084: PUSH
17085: LD_VAR 0 7
17089: ARRAY
17090: PUSH
17091: LD_VAR 0 3
17095: ARRAY
17096: PPUSH
17097: CALL_OW 1
17101: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
17102: LD_LOC 25
17106: PUSH
17107: LD_VAR 0 7
17111: ARRAY
17112: PUSH
17113: LD_VAR 0 3
17117: ARRAY
17118: PUSH
17119: LD_LOC 20
17123: PUSH
17124: LD_VAR 0 7
17128: ARRAY
17129: GREATER
17130: IFFALSE 17157
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
17132: LD_ADDR_LOC 27
17136: PUSH
17137: LD_LOC 27
17141: PPUSH
17142: LD_VAR 0 3
17146: PPUSH
17147: LD_INT 1
17149: PPUSH
17150: CALL_OW 1
17154: ST_TO_ADDR
// end else
17155: GO 17244
// begin for j := 1 to Restricted_Builds do
17157: LD_ADDR_VAR 0 8
17161: PUSH
17162: DOUBLE
17163: LD_INT 1
17165: DEC
17166: ST_TO_ADDR
17167: LD_LOC 19
17171: PUSH
17172: FOR_TO
17173: IFFALSE 17217
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
17175: LD_LOC 25
17179: PUSH
17180: LD_VAR 0 8
17184: ARRAY
17185: PUSH
17186: LD_VAR 0 3
17190: ARRAY
17191: PUSH
17192: LD_LOC 20
17196: PUSH
17197: LD_VAR 0 8
17201: ARRAY
17202: GREATER
17203: IFFALSE 17215
// begin Is_Cheater := true ;
17205: LD_ADDR_VAR 0 9
17209: PUSH
17210: LD_INT 1
17212: ST_TO_ADDR
// break ;
17213: GO 17217
// end ;
17215: GO 17172
17217: POP
17218: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
17219: LD_ADDR_LOC 27
17223: PUSH
17224: LD_LOC 27
17228: PPUSH
17229: LD_VAR 0 3
17233: PPUSH
17234: LD_VAR 0 9
17238: PPUSH
17239: CALL_OW 1
17243: ST_TO_ADDR
// end ; break ;
17244: GO 17248
// end ;
17246: GO 16824
17248: POP
17249: POP
// end ;
17250: LD_VAR 0 6
17254: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
17255: LD_VAR 0 5
17259: PUSH
17260: LD_LOC 21
17264: IN
17265: PUSH
17266: LD_VAR 0 2
17270: PUSH
17271: LD_LOC 22
17275: IN
17276: OR
17277: PUSH
17278: LD_VAR 0 4
17282: PUSH
17283: LD_LOC 23
17287: IN
17288: OR
17289: PUSH
17290: LD_VAR 0 3
17294: PUSH
17295: LD_LOC 24
17299: IN
17300: OR
17301: IFFALSE 17312
// ComCancel ( factory ) ;
17303: LD_VAR 0 1
17307: PPUSH
17308: CALL_OW 127
// end ;
17312: PPOPN 5
17314: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
17315: LD_VAR 0 2
17319: PUSH
17320: LD_LOC 21
17324: IN
17325: IFFALSE 17336
// ComCancel ( building ) ;
17327: LD_VAR 0 1
17331: PPUSH
17332: CALL_OW 127
// end ; end_of_file
17336: PPOPN 2
17338: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
17339: LD_INT 0
17341: PPUSH
17342: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
17343: LD_ADDR_VAR 0 2
17347: PUSH
17348: LD_STRING #Multi1x1-Time
17350: PUSH
17351: LD_OWVAR 1
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: ST_TO_ADDR
// if WaitServerStrings then
17360: LD_EXP 67
17364: IFFALSE 17382
// AllStrings = AllStrings ^ WaitServerStrings ;
17366: LD_ADDR_VAR 0 2
17370: PUSH
17371: LD_VAR 0 2
17375: PUSH
17376: LD_EXP 67
17380: ADD
17381: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
17382: LD_INT 0
17384: PUSH
17385: LD_EXP 18
17389: PUSH
17390: LD_OWVAR 1
17394: MINUS
17395: LESSEQUAL
17396: IFFALSE 17427
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
17398: LD_ADDR_VAR 0 2
17402: PUSH
17403: LD_VAR 0 2
17407: PUSH
17408: LD_STRING #allowedsibbomb
17410: PUSH
17411: LD_EXP 18
17415: PUSH
17416: LD_OWVAR 1
17420: MINUS
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: ADD
17426: ST_TO_ADDR
// if ( ExtraStrings ) then
17427: LD_EXP 66
17431: IFFALSE 17453
// AllStrings := AllStrings ^  ^ ExtraStrings ;
17433: LD_ADDR_VAR 0 2
17437: PUSH
17438: LD_VAR 0 2
17442: PUSH
17443: LD_STRING 
17445: ADD
17446: PUSH
17447: LD_EXP 66
17451: ADD
17452: ST_TO_ADDR
// if Display_kings and not isSGUI then
17453: LD_EXP 68
17457: PUSH
17458: LD_OWVAR 83
17462: NOT
17463: AND
17464: IFFALSE 17482
// AllStrings = AllStrings ^ Display_kings ;
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: LD_VAR 0 2
17475: PUSH
17476: LD_EXP 68
17480: ADD
17481: ST_TO_ADDR
// if ( LimitsStrings ) then
17482: CALL 14179 0 0
17486: IFFALSE 17508
// AllStrings := AllStrings ^  ^ LimitsStrings ;
17488: LD_ADDR_VAR 0 2
17492: PUSH
17493: LD_VAR 0 2
17497: PUSH
17498: LD_STRING 
17500: ADD
17501: PUSH
17502: CALL 14179 0 0
17506: ADD
17507: ST_TO_ADDR
// Display_Strings := AllStrings ;
17508: LD_ADDR_OWVAR 47
17512: PUSH
17513: LD_VAR 0 2
17517: ST_TO_ADDR
// end ;
17518: LD_VAR 0 1
17522: RET
// every 0 0$1 do
17523: GO 17525
17525: DISABLE
// begin ShowTimer ;
17526: CALL 17339 0 0
// enable ;
17530: ENABLE
// end ; end_of_file
17531: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
17532: LD_INT 0
17534: PPUSH
17535: PPUSH
17536: PPUSH
// sharedPoints1 = [ ] ;
17537: LD_ADDR_LOC 28
17541: PUSH
17542: EMPTY
17543: ST_TO_ADDR
// sharedPoints2 = [ ] ;
17544: LD_ADDR_LOC 29
17548: PUSH
17549: EMPTY
17550: ST_TO_ADDR
// sharedPoints3 = [ ] ;
17551: LD_ADDR_LOC 30
17555: PUSH
17556: EMPTY
17557: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
17558: LD_ADDR_VAR 0 2
17562: PUSH
17563: DOUBLE
17564: LD_INT 1
17566: DEC
17567: ST_TO_ADDR
17568: LD_EXP 23
17572: PUSH
17573: LD_INT 0
17575: PLUS
17576: PUSH
17577: FOR_TO
17578: IFFALSE 17680
// begin if not Side_Positions [ i ] = 0 then
17580: LD_EXP 23
17584: PUSH
17585: LD_VAR 0 2
17589: ARRAY
17590: PUSH
17591: LD_INT 0
17593: EQUAL
17594: NOT
17595: IFFALSE 17609
// SetMultiScore ( i , 0 ) ;
17597: LD_VAR 0 2
17601: PPUSH
17602: LD_INT 0
17604: PPUSH
17605: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
17609: LD_ADDR_LOC 28
17613: PUSH
17614: LD_LOC 28
17618: PPUSH
17619: LD_VAR 0 2
17623: PPUSH
17624: LD_INT 0
17626: PPUSH
17627: CALL_OW 1
17631: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
17632: LD_ADDR_LOC 29
17636: PUSH
17637: LD_LOC 29
17641: PPUSH
17642: LD_VAR 0 2
17646: PPUSH
17647: LD_INT 0
17649: PPUSH
17650: CALL_OW 1
17654: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
17655: LD_ADDR_LOC 30
17659: PUSH
17660: LD_LOC 30
17664: PPUSH
17665: LD_VAR 0 2
17669: PPUSH
17670: LD_INT 0
17672: PPUSH
17673: CALL_OW 1
17677: ST_TO_ADDR
// end ;
17678: GO 17577
17680: POP
17681: POP
// pointGame = true ;
17682: LD_ADDR_LOC 31
17686: PUSH
17687: LD_INT 1
17689: ST_TO_ADDR
// end ;
17690: LD_VAR 0 1
17694: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
17695: LD_LOC 31
17699: IFFALSE 18110
17701: GO 17703
17703: DISABLE
17704: LD_INT 0
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
// begin if isSGUI then
17719: LD_OWVAR 83
17723: IFFALSE 18110
// begin if Teams [ 1 ] then
17725: LD_EXP 22
17729: PUSH
17730: LD_INT 1
17732: ARRAY
17733: IFFALSE 17745
// red = true else
17735: LD_ADDR_VAR 0 2
17739: PUSH
17740: LD_INT 1
17742: ST_TO_ADDR
17743: GO 17753
// red = false ;
17745: LD_ADDR_VAR 0 2
17749: PUSH
17750: LD_INT 0
17752: ST_TO_ADDR
// if Teams [ 2 ] then
17753: LD_EXP 22
17757: PUSH
17758: LD_INT 2
17760: ARRAY
17761: IFFALSE 17773
// blue = true else
17763: LD_ADDR_VAR 0 3
17767: PUSH
17768: LD_INT 1
17770: ST_TO_ADDR
17771: GO 17781
// blue = false ;
17773: LD_ADDR_VAR 0 3
17777: PUSH
17778: LD_INT 0
17780: ST_TO_ADDR
// if Teams [ 3 ] then
17781: LD_EXP 22
17785: PUSH
17786: LD_INT 3
17788: ARRAY
17789: IFFALSE 17801
// yel = true else
17791: LD_ADDR_VAR 0 4
17795: PUSH
17796: LD_INT 1
17798: ST_TO_ADDR
17799: GO 17809
// yel = false ;
17801: LD_ADDR_VAR 0 4
17805: PUSH
17806: LD_INT 0
17808: ST_TO_ADDR
// if Teams [ 4 ] then
17809: LD_EXP 22
17813: PUSH
17814: LD_INT 4
17816: ARRAY
17817: IFFALSE 17829
// green = true else
17819: LD_ADDR_VAR 0 5
17823: PUSH
17824: LD_INT 1
17826: ST_TO_ADDR
17827: GO 17837
// green = false ;
17829: LD_ADDR_VAR 0 5
17833: PUSH
17834: LD_INT 0
17836: ST_TO_ADDR
// if def_public_score then
17837: LD_EXP 6
17841: IFFALSE 17853
// p = true else
17843: LD_ADDR_VAR 0 12
17847: PUSH
17848: LD_INT 1
17850: ST_TO_ADDR
17851: GO 17861
// p = false ;
17853: LD_ADDR_VAR 0 12
17857: PUSH
17858: LD_INT 0
17860: ST_TO_ADDR
// if team_game then
17861: LD_EXP 25
17865: IFFALSE 17946
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
17867: LD_ADDR_VAR 0 13
17871: PUSH
17872: LD_INT 3
17874: PUSH
17875: LD_INT 1
17877: PUSH
17878: LD_INT 2
17880: PUSH
17881: LD_INT 7
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: PUSH
17890: LD_EXP 28
17894: ARRAY
17895: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
17896: LD_ADDR_VAR 0 10
17900: PUSH
17901: LD_STRING {
17903: PUSH
17904: LD_VAR 0 3
17908: STR
17909: PUSH
17910: LD_STRING ,
17912: STR
17913: PUSH
17914: LD_VAR 0 4
17918: STR
17919: PUSH
17920: LD_STRING ,
17922: STR
17923: PUSH
17924: LD_VAR 0 2
17928: STR
17929: PUSH
17930: LD_STRING ,0,0,0,
17932: STR
17933: PUSH
17934: LD_VAR 0 5
17938: STR
17939: PUSH
17940: LD_STRING ,0}
17942: STR
17943: ST_TO_ADDR
// end else
17944: GO 18046
// begin you = your_side ;
17946: LD_ADDR_VAR 0 13
17950: PUSH
17951: LD_OWVAR 2
17955: ST_TO_ADDR
// s = { ;
17956: LD_ADDR_VAR 0 10
17960: PUSH
17961: LD_STRING {
17963: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
17964: LD_ADDR_VAR 0 1
17968: PUSH
17969: DOUBLE
17970: LD_INT 1
17972: DEC
17973: ST_TO_ADDR
17974: LD_EXP 23
17978: PUSH
17979: LD_INT 0
17981: PLUS
17982: PUSH
17983: FOR_TO
17984: IFFALSE 18030
// if side_positions [ i ] then
17986: LD_EXP 23
17990: PUSH
17991: LD_VAR 0 1
17995: ARRAY
17996: IFFALSE 18014
// s = s & 1, else
17998: LD_ADDR_VAR 0 10
18002: PUSH
18003: LD_VAR 0 10
18007: PUSH
18008: LD_STRING 1,
18010: STR
18011: ST_TO_ADDR
18012: GO 18028
// s = s & 0, ;
18014: LD_ADDR_VAR 0 10
18018: PUSH
18019: LD_VAR 0 10
18023: PUSH
18024: LD_STRING 0,
18026: STR
18027: ST_TO_ADDR
18028: GO 17983
18030: POP
18031: POP
// s = s & } ;
18032: LD_ADDR_VAR 0 10
18036: PUSH
18037: LD_VAR 0 10
18041: PUSH
18042: LD_STRING }
18044: STR
18045: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
18046: LD_STRING initScore(
18048: PUSH
18049: LD_VAR 0 10
18053: STR
18054: PUSH
18055: LD_STRING ,
18057: STR
18058: PUSH
18059: LD_VAR 0 12
18063: STR
18064: PUSH
18065: LD_STRING ,
18067: STR
18068: PUSH
18069: LD_VAR 0 13
18073: STR
18074: PUSH
18075: LD_STRING  );
18077: STR
18078: PPUSH
18079: CALL_OW 559
// if game_type = 3 then
18083: LD_EXP 49
18087: PUSH
18088: LD_INT 3
18090: EQUAL
18091: IFFALSE 18110
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
18093: LD_STRING AddScorePoints(2,2,
18095: PUSH
18096: LD_EXP 20
18100: STR
18101: PUSH
18102: LD_STRING  );
18104: STR
18105: PPUSH
18106: CALL_OW 559
// end ; end ;
18110: PPOPN 13
18112: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
18113: LD_INT 0
18115: PPUSH
18116: PPUSH
// case typ of 1 :
18117: LD_VAR 0 3
18121: PUSH
18122: LD_INT 1
18124: DOUBLE
18125: EQUAL
18126: IFTRUE 18130
18128: GO 18158
18130: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
18131: LD_ADDR_LOC 28
18135: PUSH
18136: LD_LOC 28
18140: PPUSH
18141: LD_VAR 0 1
18145: PPUSH
18146: LD_VAR 0 2
18150: PPUSH
18151: CALL_OW 1
18155: ST_TO_ADDR
18156: GO 18231
18158: LD_INT 2
18160: DOUBLE
18161: EQUAL
18162: IFTRUE 18166
18164: GO 18194
18166: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
18167: LD_ADDR_LOC 29
18171: PUSH
18172: LD_LOC 29
18176: PPUSH
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_VAR 0 2
18186: PPUSH
18187: CALL_OW 1
18191: ST_TO_ADDR
18192: GO 18231
18194: LD_INT 3
18196: DOUBLE
18197: EQUAL
18198: IFTRUE 18202
18200: GO 18230
18202: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
18203: LD_ADDR_LOC 30
18207: PUSH
18208: LD_LOC 30
18212: PPUSH
18213: LD_VAR 0 1
18217: PPUSH
18218: LD_VAR 0 2
18222: PPUSH
18223: CALL_OW 1
18227: ST_TO_ADDR
18228: GO 18231
18230: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
18231: LD_ADDR_VAR 0 5
18235: PUSH
18236: LD_LOC 28
18240: PUSH
18241: LD_VAR 0 1
18245: ARRAY
18246: PUSH
18247: LD_LOC 29
18251: PUSH
18252: LD_VAR 0 1
18256: ARRAY
18257: PLUS
18258: PUSH
18259: LD_LOC 30
18263: PUSH
18264: LD_VAR 0 1
18268: ARRAY
18269: PLUS
18270: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
18271: LD_VAR 0 1
18275: PPUSH
18276: LD_VAR 0 5
18280: PPUSH
18281: CALL_OW 506
// end ; end_of_file
18285: LD_VAR 0 4
18289: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
18290: LD_INT 0
18292: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 255
18302: PUSH
18303: LD_VAR 0 4
18307: EQUAL
18308: IFFALSE 18327
// begin SetAchievement ( ACH_RAD ) ;
18310: LD_STRING ACH_RAD
18312: PPUSH
18313: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
18317: LD_STRING ACH_NL
18319: PPUSH
18320: LD_INT 1
18322: PPUSH
18323: CALL_OW 564
// end end ;
18327: LD_VAR 0 5
18331: RET
// export function SA_Win ( side ) ; begin
18332: LD_INT 0
18334: PPUSH
// case side of 1 :
18335: LD_VAR 0 1
18339: PUSH
18340: LD_INT 1
18342: DOUBLE
18343: EQUAL
18344: IFTRUE 18348
18346: GO 18361
18348: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
18349: LD_STRING ACH_AH
18351: PPUSH
18352: LD_INT 1
18354: PPUSH
18355: CALL_OW 564
18359: GO 18524
18361: LD_INT 2
18363: DOUBLE
18364: EQUAL
18365: IFTRUE 18369
18367: GO 18382
18369: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
18370: LD_STRING ACH_E
18372: PPUSH
18373: LD_INT 1
18375: PPUSH
18376: CALL_OW 564
18380: GO 18524
18382: LD_INT 3
18384: DOUBLE
18385: EQUAL
18386: IFTRUE 18390
18388: GO 18403
18390: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
18391: LD_STRING ACH_OOL
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: CALL_OW 564
18401: GO 18524
18403: LD_INT 1
18405: PUSH
18406: LD_INT 2
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: DOUBLE
18413: EQUAL
18414: IFTRUE 18418
18416: GO 18443
18418: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18419: LD_STRING ACH_AH
18421: PPUSH
18422: LD_REAL  5.00000000000000E-0001
18425: PPUSH
18426: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18430: LD_STRING ACH_E
18432: PPUSH
18433: LD_REAL  5.00000000000000E-0001
18436: PPUSH
18437: CALL_OW 564
// end ; [ 2 , 3 ] :
18441: GO 18524
18443: LD_INT 2
18445: PUSH
18446: LD_INT 3
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: DOUBLE
18453: EQUAL
18454: IFTRUE 18458
18456: GO 18483
18458: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
18459: LD_STRING ACH_OOL
18461: PPUSH
18462: LD_REAL  5.00000000000000E-0001
18465: PPUSH
18466: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
18470: LD_STRING ACH_E
18472: PPUSH
18473: LD_REAL  5.00000000000000E-0001
18476: PPUSH
18477: CALL_OW 564
// end ; [ 3 , 1 ] :
18481: GO 18524
18483: LD_INT 3
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: DOUBLE
18493: EQUAL
18494: IFTRUE 18498
18496: GO 18523
18498: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
18499: LD_STRING ACH_AH
18501: PPUSH
18502: LD_REAL  5.00000000000000E-0001
18505: PPUSH
18506: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
18510: LD_STRING ACH_OOL
18512: PPUSH
18513: LD_REAL  5.00000000000000E-0001
18516: PPUSH
18517: CALL_OW 564
// end ; end ;
18521: GO 18524
18523: POP
// end ; end_of_file
18524: LD_VAR 0 2
18528: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
18529: LD_INT 0
18531: PPUSH
18532: PPUSH
// enable ( 98 ) ;
18533: LD_INT 98
18535: ENABLE_MARKED
// GameEnded = false ;
18536: LD_ADDR_LOC 33
18540: PUSH
18541: LD_INT 0
18543: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
18544: LD_ADDR_LOC 32
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: LD_INT 0
18557: PUSH
18558: LD_INT 0
18560: PUSH
18561: LD_INT 0
18563: PUSH
18564: LD_INT 0
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: LD_INT 0
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: ST_TO_ADDR
// unfoged = false ;
18583: LD_ADDR_LOC 34
18587: PUSH
18588: LD_INT 0
18590: ST_TO_ADDR
// for i = 1 to side_positions do
18591: LD_ADDR_VAR 0 2
18595: PUSH
18596: DOUBLE
18597: LD_INT 1
18599: DEC
18600: ST_TO_ADDR
18601: LD_EXP 23
18605: PUSH
18606: FOR_TO
18607: IFFALSE 18647
// if not side_positions [ i ] then
18609: LD_EXP 23
18613: PUSH
18614: LD_VAR 0 2
18618: ARRAY
18619: NOT
18620: IFFALSE 18645
// defaited = replace ( defaited , i , true ) ;
18622: LD_ADDR_LOC 32
18626: PUSH
18627: LD_LOC 32
18631: PPUSH
18632: LD_VAR 0 2
18636: PPUSH
18637: LD_INT 1
18639: PPUSH
18640: CALL_OW 1
18644: ST_TO_ADDR
18645: GO 18606
18647: POP
18648: POP
// end ;
18649: LD_VAR 0 1
18653: RET
// function CanWinLoose ; begin
18654: LD_INT 0
18656: PPUSH
// Result := true ;
18657: LD_ADDR_VAR 0 1
18661: PUSH
18662: LD_INT 1
18664: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
18665: CALL_OW 518
18669: PUSH
18670: CALL_OW 519
18674: PUSH
18675: LD_INT 0
18677: GREATER
18678: AND
18679: IFFALSE 18689
// Result := false ;
18681: LD_ADDR_VAR 0 1
18685: PUSH
18686: LD_INT 0
18688: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
18689: CALL_OW 531
18693: PUSH
18694: CALL_OW 519
18698: PUSH
18699: LD_INT 1
18701: GREATER
18702: AND
18703: IFFALSE 18713
// Result := false ;
18705: LD_ADDR_VAR 0 1
18709: PUSH
18710: LD_INT 0
18712: ST_TO_ADDR
// end ;
18713: LD_VAR 0 1
18717: RET
// export function HasPower ( i ) ; var k , h ; begin
18718: LD_INT 0
18720: PPUSH
18721: PPUSH
18722: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
18723: LD_VAR 0 1
18727: PPUSH
18728: CALL_OW 108
18732: NOT
18733: PUSH
18734: LD_EXP 26
18738: PUSH
18739: LD_VAR 0 1
18743: ARRAY
18744: NOT
18745: AND
18746: PUSH
18747: LD_OWVAR 4
18751: AND
18752: IFFALSE 18764
// begin result = false ;
18754: LD_ADDR_VAR 0 2
18758: PUSH
18759: LD_INT 0
18761: ST_TO_ADDR
// end else
18762: GO 19059
// case def_win_rules of 0 :
18764: LD_EXP 19
18768: PUSH
18769: LD_INT 0
18771: DOUBLE
18772: EQUAL
18773: IFTRUE 18777
18775: GO 18940
18777: POP
// if def_people_respawning then
18778: LD_EXP 61
18782: IFFALSE 18873
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
18784: LD_ADDR_VAR 0 2
18788: PUSH
18789: LD_INT 22
18791: PUSH
18792: LD_VAR 0 1
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 2
18803: PUSH
18804: LD_INT 21
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 33
18816: PUSH
18817: LD_INT 3
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 33
18826: PUSH
18827: LD_INT 5
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 30
18836: PUSH
18837: LD_INT 0
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 30
18846: PUSH
18847: LD_INT 1
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PPUSH
18866: CALL_OW 69
18870: ST_TO_ADDR
18871: GO 18938
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
18873: LD_ADDR_VAR 0 2
18877: PUSH
18878: LD_INT 22
18880: PUSH
18881: LD_VAR 0 1
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 2
18892: PUSH
18893: LD_INT 21
18895: PUSH
18896: LD_INT 1
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 33
18905: PUSH
18906: LD_INT 3
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 33
18915: PUSH
18916: LD_INT 5
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 69
18937: ST_TO_ADDR
18938: GO 19059
18940: LD_INT 1
18942: DOUBLE
18943: EQUAL
18944: IFTRUE 18948
18946: GO 18987
18948: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
18949: LD_ADDR_VAR 0 2
18953: PUSH
18954: LD_INT 22
18956: PUSH
18957: LD_VAR 0 1
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 21
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PPUSH
18980: CALL_OW 69
18984: ST_TO_ADDR
18985: GO 19059
18987: LD_INT 2
18989: DOUBLE
18990: EQUAL
18991: IFTRUE 18995
18993: GO 19058
18995: POP
// begin h = false ;
18996: LD_ADDR_VAR 0 4
19000: PUSH
19001: LD_INT 0
19003: ST_TO_ADDR
// for k in heroes [ i ] do
19004: LD_ADDR_VAR 0 3
19008: PUSH
19009: LD_EXP 35
19013: PUSH
19014: LD_VAR 0 1
19018: ARRAY
19019: PUSH
19020: FOR_IN
19021: IFFALSE 19044
// if IsLive ( k ) then
19023: LD_VAR 0 3
19027: PPUSH
19028: CALL_OW 300
19032: IFFALSE 19042
// h = true ;
19034: LD_ADDR_VAR 0 4
19038: PUSH
19039: LD_INT 1
19041: ST_TO_ADDR
19042: GO 19020
19044: POP
19045: POP
// Result := h ;
19046: LD_ADDR_VAR 0 2
19050: PUSH
19051: LD_VAR 0 4
19055: ST_TO_ADDR
// end ; end ;
19056: GO 19059
19058: POP
// end ;
19059: LD_VAR 0 2
19063: RET
// function AlliedSides ( i , j ) ; begin
19064: LD_INT 0
19066: PPUSH
// Result := false ;
19067: LD_ADDR_VAR 0 3
19071: PUSH
19072: LD_INT 0
19074: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
19075: LD_VAR 0 1
19079: PPUSH
19080: LD_VAR 0 2
19084: PPUSH
19085: CALL_OW 81
19089: PUSH
19090: LD_INT 1
19092: EQUAL
19093: PUSH
19094: LD_VAR 0 2
19098: PPUSH
19099: LD_VAR 0 1
19103: PPUSH
19104: CALL_OW 81
19108: PUSH
19109: LD_INT 1
19111: EQUAL
19112: AND
19113: PUSH
19114: LD_VAR 0 1
19118: PPUSH
19119: CALL_OW 83
19123: AND
19124: PUSH
19125: LD_VAR 0 2
19129: PPUSH
19130: CALL_OW 83
19134: AND
19135: IFFALSE 19145
// Result := true ;
19137: LD_ADDR_VAR 0 3
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// end ;
19145: LD_VAR 0 3
19149: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
19150: CALL 18654 0 0
19154: PUSH
19155: LD_LOC 33
19159: NOT
19160: AND
19161: IFFALSE 19177
19163: GO 19165
19165: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
19166: LD_ADDR_EXP 67
19170: PUSH
19171: LD_STRING #Player-Ended
19173: PUSH
19174: EMPTY
19175: LIST
19176: ST_TO_ADDR
19177: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
19178: CALL 18654 0 0
19182: PUSH
19183: LD_LOC 33
19187: AND
19188: IFFALSE 19197
19190: GO 19192
19192: DISABLE
// YouLostInMultiplayer ;
19193: CALL_OW 107
19197: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
19198: CALL 18654 0 0
19202: NOT
19203: PUSH
19204: CALL_OW 531
19208: NOT
19209: AND
19210: IFFALSE 19226
19212: GO 19214
19214: DISABLE
// WaitServerStrings = [ #server-wait ] ;
19215: LD_ADDR_EXP 67
19219: PUSH
19220: LD_STRING #server-wait
19222: PUSH
19223: EMPTY
19224: LIST
19225: ST_TO_ADDR
19226: END
// every 100 trigger IAmSpec do
19227: CALL_OW 531
19231: IFFALSE 19247
19233: GO 19235
19235: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
19236: LD_ADDR_EXP 67
19240: PUSH
19241: LD_STRING #Player-IAmSpec
19243: PUSH
19244: EMPTY
19245: LIST
19246: ST_TO_ADDR
19247: END
// every 100 trigger GameEnded and IAmSpec do
19248: LD_LOC 33
19252: PUSH
19253: CALL_OW 531
19257: AND
19258: IFFALSE 19267
19260: GO 19262
19262: DISABLE
// YouLostInMultiplayer ;
19263: CALL_OW 107
19267: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
19268: CALL 18654 0 0
19272: PUSH
19273: LD_LOC 33
19277: NOT
19278: AND
19279: IFFALSE 19295
19281: GO 19283
19283: DISABLE
// WaitServerStrings = [ $player-win ] ;
19284: LD_ADDR_EXP 67
19288: PUSH
19289: LD_STRING $player-win
19291: PUSH
19292: EMPTY
19293: LIST
19294: ST_TO_ADDR
19295: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
19296: CALL 18654 0 0
19300: PUSH
19301: LD_LOC 33
19305: AND
19306: IFFALSE 19330
19308: GO 19310
19310: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
19311: LD_EXP 24
19315: PUSH
19316: LD_OWVAR 2
19320: ARRAY
19321: PPUSH
19322: CALL 18332 0 1
// YouWinInMultiplayer ;
19326: CALL_OW 106
// end ;
19330: END
// every 100 trigger isEditor marked 401 do
19331: LD_OWVAR 84
19335: IFFALSE 19351
19337: GO 19339
19339: DISABLE
// Debug_Strings = [ You won ] ;
19340: LD_ADDR_OWVAR 48
19344: PUSH
19345: LD_STRING You won
19347: PUSH
19348: EMPTY
19349: LIST
19350: ST_TO_ADDR
19351: END
// every 100 trigger isEditor marked 400 do
19352: LD_OWVAR 84
19356: IFFALSE 19372
19358: GO 19360
19360: DISABLE
// Debug_Strings = [ You loss ] ;
19361: LD_ADDR_OWVAR 48
19365: PUSH
19366: LD_STRING You loss
19368: PUSH
19369: EMPTY
19370: LIST
19371: ST_TO_ADDR
19372: END
// every 100 marked 98 do var i , un ;
19373: GO 19375
19375: DISABLE
19376: LD_INT 0
19378: PPUSH
19379: PPUSH
// begin for i = 1 to side_positions do
19380: LD_ADDR_VAR 0 1
19384: PUSH
19385: DOUBLE
19386: LD_INT 1
19388: DEC
19389: ST_TO_ADDR
19390: LD_EXP 23
19394: PUSH
19395: FOR_TO
19396: IFFALSE 19479
// if side_positions [ i ] then
19398: LD_EXP 23
19402: PUSH
19403: LD_VAR 0 1
19407: ARRAY
19408: IFFALSE 19477
// if not HasPower ( i ) and not Defaited [ i ] then
19410: LD_VAR 0 1
19414: PPUSH
19415: CALL 18718 0 1
19419: NOT
19420: PUSH
19421: LD_LOC 32
19425: PUSH
19426: LD_VAR 0 1
19430: ARRAY
19431: NOT
19432: AND
19433: IFFALSE 19477
// begin Defaited = replace ( Defaited , i , true ) ;
19435: LD_ADDR_LOC 32
19439: PUSH
19440: LD_LOC 32
19444: PPUSH
19445: LD_VAR 0 1
19449: PPUSH
19450: LD_INT 1
19452: PPUSH
19453: CALL_OW 1
19457: ST_TO_ADDR
// if i = your_side then
19458: LD_VAR 0 1
19462: PUSH
19463: LD_OWVAR 2
19467: EQUAL
19468: IFFALSE 19477
// begin Multiplayer_Loose_Message ;
19470: CALL_OW 521
// enable ( 400 ) ;
19474: LD_INT 400
19476: ENABLE_MARKED
// end ; end ;
19477: GO 19395
19479: POP
19480: POP
// if not Unfoged and defaited [ your_side ] then
19481: LD_LOC 34
19485: NOT
19486: PUSH
19487: LD_LOC 32
19491: PUSH
19492: LD_OWVAR 2
19496: ARRAY
19497: AND
19498: IFFALSE 19504
// Unfog ;
19500: CALL 19680 0 0
// DidGameEnd ;
19504: CALL 19519 0 0
// if not GameEnded then
19508: LD_LOC 33
19512: NOT
19513: IFFALSE 19516
// enable ;
19515: ENABLE
// end ;
19516: PPOPN 2
19518: END
// function DidGameEnd ; var i , k , enemy ; begin
19519: LD_INT 0
19521: PPUSH
19522: PPUSH
19523: PPUSH
19524: PPUSH
// enemy = [ ] ;
19525: LD_ADDR_VAR 0 4
19529: PUSH
19530: EMPTY
19531: ST_TO_ADDR
// for i = 1 to side_positions do
19532: LD_ADDR_VAR 0 2
19536: PUSH
19537: DOUBLE
19538: LD_INT 1
19540: DEC
19541: ST_TO_ADDR
19542: LD_EXP 23
19546: PUSH
19547: FOR_TO
19548: IFFALSE 19642
// if not defaited [ i ] then
19550: LD_LOC 32
19554: PUSH
19555: LD_VAR 0 2
19559: ARRAY
19560: NOT
19561: IFFALSE 19640
// for k = 1 to side_positions do
19563: LD_ADDR_VAR 0 3
19567: PUSH
19568: DOUBLE
19569: LD_INT 1
19571: DEC
19572: ST_TO_ADDR
19573: LD_EXP 23
19577: PUSH
19578: FOR_TO
19579: IFFALSE 19638
// if not defaited [ k ] then
19581: LD_LOC 32
19585: PUSH
19586: LD_VAR 0 3
19590: ARRAY
19591: NOT
19592: IFFALSE 19636
// if not AlliedSides ( i , k ) then
19594: LD_VAR 0 2
19598: PPUSH
19599: LD_VAR 0 3
19603: PPUSH
19604: CALL 19064 0 2
19608: NOT
19609: IFFALSE 19636
// enemy = enemy ^ [ i , k ] ;
19611: LD_ADDR_VAR 0 4
19615: PUSH
19616: LD_VAR 0 4
19620: PUSH
19621: LD_VAR 0 2
19625: PUSH
19626: LD_VAR 0 3
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: ADD
19635: ST_TO_ADDR
19636: GO 19578
19638: POP
19639: POP
19640: GO 19547
19642: POP
19643: POP
// if not enemy then
19644: LD_VAR 0 4
19648: NOT
19649: IFFALSE 19675
// begin GameEnded = true ;
19651: LD_ADDR_LOC 33
19655: PUSH
19656: LD_INT 1
19658: ST_TO_ADDR
// if not defaited [ your_side ] then
19659: LD_LOC 32
19663: PUSH
19664: LD_OWVAR 2
19668: ARRAY
19669: NOT
19670: IFFALSE 19675
// enable ( 401 ) ;
19672: LD_INT 401
19674: ENABLE_MARKED
// end ; end ;
19675: LD_VAR 0 1
19679: RET
// function unfog ; var k , friends ; begin
19680: LD_INT 0
19682: PPUSH
19683: PPUSH
19684: PPUSH
// SetPlayerSpectator ( ) ;
19685: CALL_OW 572
// unfoged = true ;
19689: LD_ADDR_LOC 34
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// end ;
19697: LD_VAR 0 1
19701: RET
// export function MakeGameEnd ; begin
19702: LD_INT 0
19704: PPUSH
// SetPlayerSpectator ( ) ;
19705: CALL_OW 572
// unfoged = true ;
19709: LD_ADDR_LOC 34
19713: PUSH
19714: LD_INT 1
19716: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19717: LD_INT 175
19719: PPUSH
19720: CALL_OW 67
// GameEnded = true ;
19724: LD_ADDR_LOC 33
19728: PUSH
19729: LD_INT 1
19731: ST_TO_ADDR
// end ;
19732: LD_VAR 0 1
19736: RET
// export function GetGameEnded ; begin
19737: LD_INT 0
19739: PPUSH
// result = GameEnded ;
19740: LD_ADDR_VAR 0 1
19744: PUSH
19745: LD_LOC 33
19749: ST_TO_ADDR
// end ; end_of_file
19750: LD_VAR 0 1
19754: RET
// var win ; export function init_kings_counting ; var i ; begin
19755: LD_INT 0
19757: PPUSH
19758: PPUSH
// mp_with_score := true ;
19759: LD_ADDR_OWVAR 14
19763: PUSH
19764: LD_INT 1
19766: ST_TO_ADDR
// ResetMultiScore ;
19767: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
19771: LD_INT 19
19773: PPUSH
19774: LD_INT 1
19776: PPUSH
19777: CALL_OW 424
// enable ( 2 ) ;
19781: LD_INT 2
19783: ENABLE_MARKED
// end ;
19784: LD_VAR 0 1
19788: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
19789: LD_INT 0
19791: PPUSH
19792: PPUSH
19793: PPUSH
19794: PPUSH
19795: PPUSH
19796: PPUSH
19797: PPUSH
19798: PPUSH
19799: PPUSH
// vypis := [ ] ;
19800: LD_ADDR_VAR 0 3
19804: PUSH
19805: EMPTY
19806: ST_TO_ADDR
// red = 0 ;
19807: LD_ADDR_VAR 0 5
19811: PUSH
19812: LD_INT 0
19814: ST_TO_ADDR
// blue = 0 ;
19815: LD_ADDR_VAR 0 6
19819: PUSH
19820: LD_INT 0
19822: ST_TO_ADDR
// yel = 0 ;
19823: LD_ADDR_VAR 0 7
19827: PUSH
19828: LD_INT 0
19830: ST_TO_ADDR
// green = 0 ;
19831: LD_ADDR_VAR 0 8
19835: PUSH
19836: LD_INT 0
19838: ST_TO_ADDR
// if def_public_score or isSGUI then
19839: LD_EXP 6
19843: PUSH
19844: LD_OWVAR 83
19848: OR
19849: IFFALSE 20446
// if not Team_Game then
19851: LD_EXP 25
19855: NOT
19856: IFFALSE 19978
// begin for side = 1 to Side_Positions do
19858: LD_ADDR_VAR 0 2
19862: PUSH
19863: DOUBLE
19864: LD_INT 1
19866: DEC
19867: ST_TO_ADDR
19868: LD_EXP 23
19872: PUSH
19873: FOR_TO
19874: IFFALSE 19974
// if Side_Positions [ side ] then
19876: LD_EXP 23
19880: PUSH
19881: LD_VAR 0 2
19885: ARRAY
19886: IFFALSE 19972
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
19888: LD_ADDR_VAR 0 3
19892: PUSH
19893: LD_VAR 0 3
19897: PUSH
19898: LD_STRING #KingoftheHill-Public
19900: PUSH
19901: LD_VAR 0 2
19905: PUSH
19906: LD_VAR 0 2
19910: PUSH
19911: LD_VAR 0 2
19915: PUSH
19916: LD_INT 10
19918: PLUS
19919: PPUSH
19920: CALL_OW 110
19924: PUSH
19925: LD_INT 3
19927: DIV
19928: PUSH
19929: LD_EXP 20
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: ADD
19941: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
19942: LD_INT 2
19944: PPUSH
19945: LD_VAR 0 2
19949: PPUSH
19950: LD_VAR 0 2
19954: PUSH
19955: LD_INT 10
19957: PLUS
19958: PPUSH
19959: CALL_OW 110
19963: PUSH
19964: LD_INT 3
19966: DIV
19967: PPUSH
19968: CALL 27348 0 3
// end ;
19972: GO 19873
19974: POP
19975: POP
// end else
19976: GO 20444
// begin if Teams [ 1 ] then
19978: LD_EXP 22
19982: PUSH
19983: LD_INT 1
19985: ARRAY
19986: IFFALSE 20038
// for i in Teams [ 1 ] do
19988: LD_ADDR_VAR 0 4
19992: PUSH
19993: LD_EXP 22
19997: PUSH
19998: LD_INT 1
20000: ARRAY
20001: PUSH
20002: FOR_IN
20003: IFFALSE 20036
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20005: LD_ADDR_VAR 0 5
20009: PUSH
20010: LD_VAR 0 5
20014: PUSH
20015: LD_VAR 0 4
20019: PUSH
20020: LD_INT 10
20022: PLUS
20023: PPUSH
20024: CALL_OW 110
20028: PUSH
20029: LD_INT 3
20031: DIV
20032: PLUS
20033: ST_TO_ADDR
20034: GO 20002
20036: POP
20037: POP
// if Teams [ 2 ] then
20038: LD_EXP 22
20042: PUSH
20043: LD_INT 2
20045: ARRAY
20046: IFFALSE 20098
// for i in Teams [ 2 ] do
20048: LD_ADDR_VAR 0 4
20052: PUSH
20053: LD_EXP 22
20057: PUSH
20058: LD_INT 2
20060: ARRAY
20061: PUSH
20062: FOR_IN
20063: IFFALSE 20096
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20065: LD_ADDR_VAR 0 6
20069: PUSH
20070: LD_VAR 0 6
20074: PUSH
20075: LD_VAR 0 4
20079: PUSH
20080: LD_INT 10
20082: PLUS
20083: PPUSH
20084: CALL_OW 110
20088: PUSH
20089: LD_INT 3
20091: DIV
20092: PLUS
20093: ST_TO_ADDR
20094: GO 20062
20096: POP
20097: POP
// if Teams [ 3 ] then
20098: LD_EXP 22
20102: PUSH
20103: LD_INT 3
20105: ARRAY
20106: IFFALSE 20158
// for i in Teams [ 3 ] do
20108: LD_ADDR_VAR 0 4
20112: PUSH
20113: LD_EXP 22
20117: PUSH
20118: LD_INT 3
20120: ARRAY
20121: PUSH
20122: FOR_IN
20123: IFFALSE 20156
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20125: LD_ADDR_VAR 0 7
20129: PUSH
20130: LD_VAR 0 7
20134: PUSH
20135: LD_VAR 0 4
20139: PUSH
20140: LD_INT 10
20142: PLUS
20143: PPUSH
20144: CALL_OW 110
20148: PUSH
20149: LD_INT 3
20151: DIV
20152: PLUS
20153: ST_TO_ADDR
20154: GO 20122
20156: POP
20157: POP
// if Teams [ 4 ] then
20158: LD_EXP 22
20162: PUSH
20163: LD_INT 4
20165: ARRAY
20166: IFFALSE 20218
// for i in Teams [ 4 ] do
20168: LD_ADDR_VAR 0 4
20172: PUSH
20173: LD_EXP 22
20177: PUSH
20178: LD_INT 4
20180: ARRAY
20181: PUSH
20182: FOR_IN
20183: IFFALSE 20216
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20185: LD_ADDR_VAR 0 8
20189: PUSH
20190: LD_VAR 0 8
20194: PUSH
20195: LD_VAR 0 4
20199: PUSH
20200: LD_INT 10
20202: PLUS
20203: PPUSH
20204: CALL_OW 110
20208: PUSH
20209: LD_INT 3
20211: DIV
20212: PLUS
20213: ST_TO_ADDR
20214: GO 20182
20216: POP
20217: POP
// if Teams [ 1 ] then
20218: LD_EXP 22
20222: PUSH
20223: LD_INT 1
20225: ARRAY
20226: IFFALSE 20255
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20228: LD_ADDR_VAR 0 3
20232: PUSH
20233: LD_STRING #KingoftheHill-Public-red
20235: PUSH
20236: LD_INT 3
20238: PUSH
20239: LD_VAR 0 5
20243: PUSH
20244: LD_EXP 20
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: ST_TO_ADDR
// if Teams [ 2 ] then
20255: LD_EXP 22
20259: PUSH
20260: LD_INT 2
20262: ARRAY
20263: IFFALSE 20298
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20265: LD_ADDR_VAR 0 3
20269: PUSH
20270: LD_VAR 0 3
20274: PUSH
20275: LD_STRING #KingoftheHill-Public-blue
20277: PUSH
20278: LD_INT 1
20280: PUSH
20281: LD_VAR 0 6
20285: PUSH
20286: LD_EXP 20
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: ADD
20297: ST_TO_ADDR
// if Teams [ 3 ] then
20298: LD_EXP 22
20302: PUSH
20303: LD_INT 3
20305: ARRAY
20306: IFFALSE 20341
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20308: LD_ADDR_VAR 0 3
20312: PUSH
20313: LD_VAR 0 3
20317: PUSH
20318: LD_STRING #KingoftheHill-Public-yell
20320: PUSH
20321: LD_INT 2
20323: PUSH
20324: LD_VAR 0 7
20328: PUSH
20329: LD_EXP 20
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: ADD
20340: ST_TO_ADDR
// if Teams [ 4 ] then
20341: LD_EXP 22
20345: PUSH
20346: LD_INT 4
20348: ARRAY
20349: IFFALSE 20384
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20351: LD_ADDR_VAR 0 3
20355: PUSH
20356: LD_VAR 0 3
20360: PUSH
20361: LD_STRING #KingoftheHill-Public-green
20363: PUSH
20364: LD_INT 7
20366: PUSH
20367: LD_VAR 0 8
20371: PUSH
20372: LD_EXP 20
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: ADD
20383: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
20384: LD_INT 2
20386: PPUSH
20387: LD_INT 3
20389: PPUSH
20390: LD_VAR 0 5
20394: PPUSH
20395: CALL 27348 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
20399: LD_INT 2
20401: PPUSH
20402: LD_INT 1
20404: PPUSH
20405: LD_VAR 0 6
20409: PPUSH
20410: CALL 27348 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
20414: LD_INT 2
20416: PPUSH
20417: LD_INT 2
20419: PPUSH
20420: LD_VAR 0 7
20424: PPUSH
20425: CALL 27348 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
20429: LD_INT 2
20431: PPUSH
20432: LD_INT 7
20434: PPUSH
20435: LD_VAR 0 8
20439: PPUSH
20440: CALL 27348 0 3
// end else
20444: GO 20881
// if not Team_Game then
20446: LD_EXP 25
20450: NOT
20451: IFFALSE 20509
// vypis := vypis ^ [ #KingoftheHill-Private , your_side , your_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
20453: LD_ADDR_VAR 0 3
20457: PUSH
20458: LD_VAR 0 3
20462: PUSH
20463: LD_STRING #KingoftheHill-Private
20465: PUSH
20466: LD_OWVAR 2
20470: PUSH
20471: LD_OWVAR 2
20475: PUSH
20476: LD_VAR 0 2
20480: PUSH
20481: LD_INT 10
20483: PLUS
20484: PPUSH
20485: CALL_OW 110
20489: PUSH
20490: LD_INT 3
20492: DIV
20493: PUSH
20494: LD_EXP 20
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: ADD
20506: ST_TO_ADDR
20507: GO 20881
// begin for i in Teams [ 1 ] do
20509: LD_ADDR_VAR 0 4
20513: PUSH
20514: LD_EXP 22
20518: PUSH
20519: LD_INT 1
20521: ARRAY
20522: PUSH
20523: FOR_IN
20524: IFFALSE 20557
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20526: LD_ADDR_VAR 0 5
20530: PUSH
20531: LD_VAR 0 5
20535: PUSH
20536: LD_VAR 0 4
20540: PUSH
20541: LD_INT 10
20543: PLUS
20544: PPUSH
20545: CALL_OW 110
20549: PUSH
20550: LD_INT 3
20552: DIV
20553: PLUS
20554: ST_TO_ADDR
20555: GO 20523
20557: POP
20558: POP
// for i in Teams [ 2 ] do
20559: LD_ADDR_VAR 0 4
20563: PUSH
20564: LD_EXP 22
20568: PUSH
20569: LD_INT 2
20571: ARRAY
20572: PUSH
20573: FOR_IN
20574: IFFALSE 20607
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20576: LD_ADDR_VAR 0 6
20580: PUSH
20581: LD_VAR 0 6
20585: PUSH
20586: LD_VAR 0 4
20590: PUSH
20591: LD_INT 10
20593: PLUS
20594: PPUSH
20595: CALL_OW 110
20599: PUSH
20600: LD_INT 3
20602: DIV
20603: PLUS
20604: ST_TO_ADDR
20605: GO 20573
20607: POP
20608: POP
// for i in Teams [ 3 ] do
20609: LD_ADDR_VAR 0 4
20613: PUSH
20614: LD_EXP 22
20618: PUSH
20619: LD_INT 3
20621: ARRAY
20622: PUSH
20623: FOR_IN
20624: IFFALSE 20657
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20626: LD_ADDR_VAR 0 7
20630: PUSH
20631: LD_VAR 0 7
20635: PUSH
20636: LD_VAR 0 4
20640: PUSH
20641: LD_INT 10
20643: PLUS
20644: PPUSH
20645: CALL_OW 110
20649: PUSH
20650: LD_INT 3
20652: DIV
20653: PLUS
20654: ST_TO_ADDR
20655: GO 20623
20657: POP
20658: POP
// for i in Teams [ 4 ] do
20659: LD_ADDR_VAR 0 4
20663: PUSH
20664: LD_EXP 22
20668: PUSH
20669: LD_INT 4
20671: ARRAY
20672: PUSH
20673: FOR_IN
20674: IFFALSE 20707
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20676: LD_ADDR_VAR 0 8
20680: PUSH
20681: LD_VAR 0 8
20685: PUSH
20686: LD_VAR 0 4
20690: PUSH
20691: LD_INT 10
20693: PLUS
20694: PPUSH
20695: CALL_OW 110
20699: PUSH
20700: LD_INT 3
20702: DIV
20703: PLUS
20704: ST_TO_ADDR
20705: GO 20673
20707: POP
20708: POP
// if your_side in Teams [ 1 ] then
20709: LD_OWVAR 2
20713: PUSH
20714: LD_EXP 22
20718: PUSH
20719: LD_INT 1
20721: ARRAY
20722: IN
20723: IFFALSE 20752
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
20725: LD_ADDR_VAR 0 3
20729: PUSH
20730: LD_STRING #KingoftheHill-Public-red
20732: PUSH
20733: LD_INT 3
20735: PUSH
20736: LD_VAR 0 5
20740: PUSH
20741: LD_EXP 20
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: ST_TO_ADDR
// if your_side in Teams [ 2 ] then
20752: LD_OWVAR 2
20756: PUSH
20757: LD_EXP 22
20761: PUSH
20762: LD_INT 2
20764: ARRAY
20765: IN
20766: IFFALSE 20795
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
20768: LD_ADDR_VAR 0 3
20772: PUSH
20773: LD_STRING #KingoftheHill-Public-blue
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: LD_VAR 0 6
20783: PUSH
20784: LD_EXP 20
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: ST_TO_ADDR
// if your_side in Teams [ 3 ] then
20795: LD_OWVAR 2
20799: PUSH
20800: LD_EXP 22
20804: PUSH
20805: LD_INT 3
20807: ARRAY
20808: IN
20809: IFFALSE 20838
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
20811: LD_ADDR_VAR 0 3
20815: PUSH
20816: LD_STRING #KingoftheHill-Public-yell
20818: PUSH
20819: LD_INT 2
20821: PUSH
20822: LD_VAR 0 7
20826: PUSH
20827: LD_EXP 20
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: ST_TO_ADDR
// if your_side in Teams [ 4 ] then
20838: LD_OWVAR 2
20842: PUSH
20843: LD_EXP 22
20847: PUSH
20848: LD_INT 4
20850: ARRAY
20851: IN
20852: IFFALSE 20881
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
20854: LD_ADDR_VAR 0 3
20858: PUSH
20859: LD_STRING #KingoftheHill-Public-green
20861: PUSH
20862: LD_INT 7
20864: PUSH
20865: LD_VAR 0 8
20869: PUSH
20870: LD_EXP 20
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: ST_TO_ADDR
// end ; Display_kings := vypis ;
20881: LD_ADDR_EXP 68
20885: PUSH
20886: LD_VAR 0 3
20890: ST_TO_ADDR
// end ;
20891: LD_VAR 0 1
20895: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
20896: LD_INT 0
20898: PPUSH
20899: PPUSH
20900: PPUSH
20901: PPUSH
20902: PPUSH
20903: PPUSH
20904: PPUSH
20905: PPUSH
20906: PPUSH
// side := [ ] ;
20907: LD_ADDR_VAR 0 2
20911: PUSH
20912: EMPTY
20913: ST_TO_ADDR
// red = 0 ;
20914: LD_ADDR_VAR 0 5
20918: PUSH
20919: LD_INT 0
20921: ST_TO_ADDR
// blue = 0 ;
20922: LD_ADDR_VAR 0 6
20926: PUSH
20927: LD_INT 0
20929: ST_TO_ADDR
// yel = 0 ;
20930: LD_ADDR_VAR 0 7
20934: PUSH
20935: LD_INT 0
20937: ST_TO_ADDR
// green = 0 ;
20938: LD_ADDR_VAR 0 8
20942: PUSH
20943: LD_INT 0
20945: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
20946: LD_ADDR_VAR 0 3
20950: PUSH
20951: LD_INT 19
20953: PPUSH
20954: LD_INT 21
20956: PUSH
20957: LD_INT 3
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 53
20966: PUSH
20967: EMPTY
20968: LIST
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PPUSH
20974: CALL_OW 70
20978: ST_TO_ADDR
// for un in list do
20979: LD_ADDR_VAR 0 4
20983: PUSH
20984: LD_VAR 0 3
20988: PUSH
20989: FOR_IN
20990: IFFALSE 21015
// side := side union GetSide ( un ) ;
20992: LD_ADDR_VAR 0 2
20996: PUSH
20997: LD_VAR 0 2
21001: PUSH
21002: LD_VAR 0 4
21006: PPUSH
21007: CALL_OW 255
21011: UNION
21012: ST_TO_ADDR
21013: GO 20989
21015: POP
21016: POP
// if side <> 1 then
21017: LD_VAR 0 2
21021: PUSH
21022: LD_INT 1
21024: NONEQUAL
21025: IFFALSE 21029
// exit ;
21027: GO 21392
// side := side [ 1 ] ;
21029: LD_ADDR_VAR 0 2
21033: PUSH
21034: LD_VAR 0 2
21038: PUSH
21039: LD_INT 1
21041: ARRAY
21042: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
21043: LD_VAR 0 2
21047: PUSH
21048: LD_INT 10
21050: PLUS
21051: PPUSH
21052: LD_VAR 0 2
21056: PUSH
21057: LD_INT 10
21059: PLUS
21060: PPUSH
21061: CALL_OW 110
21065: PUSH
21066: LD_INT 1
21068: PLUS
21069: PPUSH
21070: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
21074: LD_VAR 0 2
21078: PPUSH
21079: LD_VAR 0 2
21083: PUSH
21084: LD_INT 10
21086: PLUS
21087: PPUSH
21088: CALL_OW 110
21092: PUSH
21093: LD_INT 3
21095: DIV
21096: PPUSH
21097: LD_INT 2
21099: PPUSH
21100: CALL 18113 0 3
// if not Team_Game then
21104: LD_EXP 25
21108: NOT
21109: IFFALSE 21392
// if GetTag ( side + 10 ) >= final_count * 3 then
21111: LD_VAR 0 2
21115: PUSH
21116: LD_INT 10
21118: PLUS
21119: PPUSH
21120: CALL_OW 110
21124: PUSH
21125: LD_EXP 20
21129: PUSH
21130: LD_INT 3
21132: MUL
21133: GREATEREQUAL
21134: IFFALSE 21141
// enable ( 3 ) else
21136: LD_INT 3
21138: ENABLE_MARKED
21139: GO 21392
// begin for i in Teams [ 1 ] do
21141: LD_ADDR_VAR 0 9
21145: PUSH
21146: LD_EXP 22
21150: PUSH
21151: LD_INT 1
21153: ARRAY
21154: PUSH
21155: FOR_IN
21156: IFFALSE 21189
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21158: LD_ADDR_VAR 0 5
21162: PUSH
21163: LD_VAR 0 5
21167: PUSH
21168: LD_VAR 0 9
21172: PUSH
21173: LD_INT 10
21175: PLUS
21176: PPUSH
21177: CALL_OW 110
21181: PUSH
21182: LD_INT 3
21184: DIV
21185: PLUS
21186: ST_TO_ADDR
21187: GO 21155
21189: POP
21190: POP
// for i in Teams [ 2 ] do
21191: LD_ADDR_VAR 0 9
21195: PUSH
21196: LD_EXP 22
21200: PUSH
21201: LD_INT 2
21203: ARRAY
21204: PUSH
21205: FOR_IN
21206: IFFALSE 21239
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21208: LD_ADDR_VAR 0 6
21212: PUSH
21213: LD_VAR 0 6
21217: PUSH
21218: LD_VAR 0 9
21222: PUSH
21223: LD_INT 10
21225: PLUS
21226: PPUSH
21227: CALL_OW 110
21231: PUSH
21232: LD_INT 3
21234: DIV
21235: PLUS
21236: ST_TO_ADDR
21237: GO 21205
21239: POP
21240: POP
// for i in Teams [ 3 ] do
21241: LD_ADDR_VAR 0 9
21245: PUSH
21246: LD_EXP 22
21250: PUSH
21251: LD_INT 3
21253: ARRAY
21254: PUSH
21255: FOR_IN
21256: IFFALSE 21289
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21258: LD_ADDR_VAR 0 7
21262: PUSH
21263: LD_VAR 0 7
21267: PUSH
21268: LD_VAR 0 9
21272: PUSH
21273: LD_INT 10
21275: PLUS
21276: PPUSH
21277: CALL_OW 110
21281: PUSH
21282: LD_INT 3
21284: DIV
21285: PLUS
21286: ST_TO_ADDR
21287: GO 21255
21289: POP
21290: POP
// for i in Teams [ 4 ] do
21291: LD_ADDR_VAR 0 9
21295: PUSH
21296: LD_EXP 22
21300: PUSH
21301: LD_INT 4
21303: ARRAY
21304: PUSH
21305: FOR_IN
21306: IFFALSE 21339
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21308: LD_ADDR_VAR 0 8
21312: PUSH
21313: LD_VAR 0 8
21317: PUSH
21318: LD_VAR 0 9
21322: PUSH
21323: LD_INT 10
21325: PLUS
21326: PPUSH
21327: CALL_OW 110
21331: PUSH
21332: LD_INT 3
21334: DIV
21335: PLUS
21336: ST_TO_ADDR
21337: GO 21305
21339: POP
21340: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
21341: LD_VAR 0 5
21345: PUSH
21346: LD_EXP 20
21350: GREATEREQUAL
21351: PUSH
21352: LD_VAR 0 6
21356: PUSH
21357: LD_EXP 20
21361: GREATEREQUAL
21362: OR
21363: PUSH
21364: LD_VAR 0 7
21368: PUSH
21369: LD_EXP 20
21373: GREATEREQUAL
21374: OR
21375: PUSH
21376: LD_VAR 0 8
21380: PUSH
21381: LD_EXP 20
21385: GREATEREQUAL
21386: OR
21387: IFFALSE 21392
// enable ( 3 ) ;
21389: LD_INT 3
21391: ENABLE_MARKED
// end ; end ;
21392: LD_VAR 0 1
21396: RET
// every 0 0$1 marked 2 do
21397: GO 21399
21399: DISABLE
// begin count_king ;
21400: CALL 20896 0 0
// show_public_points ;
21404: CALL 19789 0 0
// enable ;
21408: ENABLE
// end ;
21409: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
21410: GO 21412
21412: DISABLE
21413: LD_INT 0
21415: PPUSH
21416: PPUSH
21417: PPUSH
21418: PPUSH
21419: PPUSH
21420: PPUSH
// begin win := [ ] ;
21421: LD_ADDR_LOC 35
21425: PUSH
21426: EMPTY
21427: ST_TO_ADDR
// red = 0 ;
21428: LD_ADDR_VAR 0 2
21432: PUSH
21433: LD_INT 0
21435: ST_TO_ADDR
// blue = 0 ;
21436: LD_ADDR_VAR 0 3
21440: PUSH
21441: LD_INT 0
21443: ST_TO_ADDR
// yel = 0 ;
21444: LD_ADDR_VAR 0 4
21448: PUSH
21449: LD_INT 0
21451: ST_TO_ADDR
// green = 0 ;
21452: LD_ADDR_VAR 0 5
21456: PUSH
21457: LD_INT 0
21459: ST_TO_ADDR
// if not Team_Game then
21460: LD_EXP 25
21464: NOT
21465: IFFALSE 21542
// begin for side = 1 to 8 do
21467: LD_ADDR_VAR 0 1
21471: PUSH
21472: DOUBLE
21473: LD_INT 1
21475: DEC
21476: ST_TO_ADDR
21477: LD_INT 8
21479: PUSH
21480: FOR_TO
21481: IFFALSE 21526
// if GetTag ( side + 10 ) >= final_count * 3 then
21483: LD_VAR 0 1
21487: PUSH
21488: LD_INT 10
21490: PLUS
21491: PPUSH
21492: CALL_OW 110
21496: PUSH
21497: LD_EXP 20
21501: PUSH
21502: LD_INT 3
21504: MUL
21505: GREATEREQUAL
21506: IFFALSE 21524
// win := win ^ side ;
21508: LD_ADDR_LOC 35
21512: PUSH
21513: LD_LOC 35
21517: PUSH
21518: LD_VAR 0 1
21522: ADD
21523: ST_TO_ADDR
21524: GO 21480
21526: POP
21527: POP
// if win then
21528: LD_LOC 35
21532: IFFALSE 21539
// enable ( 4 ) else
21534: LD_INT 4
21536: ENABLE_MARKED
21537: GO 21540
// enable ;
21539: ENABLE
// end else
21540: GO 21858
// begin for i in Teams [ 1 ] do
21542: LD_ADDR_VAR 0 6
21546: PUSH
21547: LD_EXP 22
21551: PUSH
21552: LD_INT 1
21554: ARRAY
21555: PUSH
21556: FOR_IN
21557: IFFALSE 21590
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
21559: LD_ADDR_VAR 0 2
21563: PUSH
21564: LD_VAR 0 2
21568: PUSH
21569: LD_VAR 0 6
21573: PUSH
21574: LD_INT 10
21576: PLUS
21577: PPUSH
21578: CALL_OW 110
21582: PUSH
21583: LD_INT 3
21585: DIV
21586: PLUS
21587: ST_TO_ADDR
21588: GO 21556
21590: POP
21591: POP
// for i in Teams [ 2 ] do
21592: LD_ADDR_VAR 0 6
21596: PUSH
21597: LD_EXP 22
21601: PUSH
21602: LD_INT 2
21604: ARRAY
21605: PUSH
21606: FOR_IN
21607: IFFALSE 21640
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
21609: LD_ADDR_VAR 0 3
21613: PUSH
21614: LD_VAR 0 3
21618: PUSH
21619: LD_VAR 0 6
21623: PUSH
21624: LD_INT 10
21626: PLUS
21627: PPUSH
21628: CALL_OW 110
21632: PUSH
21633: LD_INT 3
21635: DIV
21636: PLUS
21637: ST_TO_ADDR
21638: GO 21606
21640: POP
21641: POP
// for i in Teams [ 3 ] do
21642: LD_ADDR_VAR 0 6
21646: PUSH
21647: LD_EXP 22
21651: PUSH
21652: LD_INT 3
21654: ARRAY
21655: PUSH
21656: FOR_IN
21657: IFFALSE 21690
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
21659: LD_ADDR_VAR 0 4
21663: PUSH
21664: LD_VAR 0 4
21668: PUSH
21669: LD_VAR 0 6
21673: PUSH
21674: LD_INT 10
21676: PLUS
21677: PPUSH
21678: CALL_OW 110
21682: PUSH
21683: LD_INT 3
21685: DIV
21686: PLUS
21687: ST_TO_ADDR
21688: GO 21656
21690: POP
21691: POP
// for i in Teams [ 4 ] do
21692: LD_ADDR_VAR 0 6
21696: PUSH
21697: LD_EXP 22
21701: PUSH
21702: LD_INT 4
21704: ARRAY
21705: PUSH
21706: FOR_IN
21707: IFFALSE 21740
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
21709: LD_ADDR_VAR 0 5
21713: PUSH
21714: LD_VAR 0 5
21718: PUSH
21719: LD_VAR 0 6
21723: PUSH
21724: LD_INT 10
21726: PLUS
21727: PPUSH
21728: CALL_OW 110
21732: PUSH
21733: LD_INT 3
21735: DIV
21736: PLUS
21737: ST_TO_ADDR
21738: GO 21706
21740: POP
21741: POP
// if red >= final_count then
21742: LD_VAR 0 2
21746: PUSH
21747: LD_EXP 20
21751: GREATEREQUAL
21752: IFFALSE 21768
// win = teams [ 1 ] ;
21754: LD_ADDR_LOC 35
21758: PUSH
21759: LD_EXP 22
21763: PUSH
21764: LD_INT 1
21766: ARRAY
21767: ST_TO_ADDR
// if blue >= final_count then
21768: LD_VAR 0 3
21772: PUSH
21773: LD_EXP 20
21777: GREATEREQUAL
21778: IFFALSE 21794
// win = teams [ 2 ] ;
21780: LD_ADDR_LOC 35
21784: PUSH
21785: LD_EXP 22
21789: PUSH
21790: LD_INT 2
21792: ARRAY
21793: ST_TO_ADDR
// if yel >= final_count then
21794: LD_VAR 0 4
21798: PUSH
21799: LD_EXP 20
21803: GREATEREQUAL
21804: IFFALSE 21820
// win = teams [ 3 ] ;
21806: LD_ADDR_LOC 35
21810: PUSH
21811: LD_EXP 22
21815: PUSH
21816: LD_INT 3
21818: ARRAY
21819: ST_TO_ADDR
// if green >= final_count then
21820: LD_VAR 0 5
21824: PUSH
21825: LD_EXP 20
21829: GREATEREQUAL
21830: IFFALSE 21846
// win = teams [ 4 ] ;
21832: LD_ADDR_LOC 35
21836: PUSH
21837: LD_EXP 22
21841: PUSH
21842: LD_INT 4
21844: ARRAY
21845: ST_TO_ADDR
// if win then
21846: LD_LOC 35
21850: IFFALSE 21857
// enable ( 4 ) else
21852: LD_INT 4
21854: ENABLE_MARKED
21855: GO 21858
// enable ;
21857: ENABLE
// end ; end ;
21858: PPOPN 6
21860: END
// every 0 0$1 marked 4 do
21861: GO 21863
21863: DISABLE
// begin if Player_Side in win then
21864: LD_EXP 27
21868: PUSH
21869: LD_LOC 35
21873: IN
21874: IFFALSE 21890
// begin wait ( 0 0$2 ) ;
21876: LD_INT 70
21878: PPUSH
21879: CALL_OW 67
// enable ( 401 ) ;
21883: LD_INT 401
21885: ENABLE_MARKED
// exit ;
21886: GO 21906
// end else
21888: GO 21906
// begin wait ( 0 0$2 ) ;
21890: LD_INT 70
21892: PPUSH
21893: CALL_OW 67
// Multiplayer_Loose_Message ;
21897: CALL_OW 521
// enable ( 400 ) ;
21901: LD_INT 400
21903: ENABLE_MARKED
// exit ;
21904: GO 21906
// end ; end ; end_of_file
21906: END
// export function SetMpTechs ( ) ; var side , i ; begin
21907: LD_INT 0
21909: PPUSH
21910: PPUSH
21911: PPUSH
// for side = 1 to 8 do
21912: LD_ADDR_VAR 0 2
21916: PUSH
21917: DOUBLE
21918: LD_INT 1
21920: DEC
21921: ST_TO_ADDR
21922: LD_INT 8
21924: PUSH
21925: FOR_TO
21926: IFFALSE 22047
// begin for i = 1 to 72 do
21928: LD_ADDR_VAR 0 3
21932: PUSH
21933: DOUBLE
21934: LD_INT 1
21936: DEC
21937: ST_TO_ADDR
21938: LD_INT 72
21940: PUSH
21941: FOR_TO
21942: IFFALSE 21973
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
21944: LD_VAR 0 3
21948: PPUSH
21949: LD_VAR 0 2
21953: PPUSH
21954: LD_INT 0
21956: PPUSH
21957: LD_VAR 0 3
21961: PPUSH
21962: CALL_OW 565
21966: PPUSH
21967: CALL_OW 322
21971: GO 21941
21973: POP
21974: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
21975: LD_INT 73
21977: PPUSH
21978: LD_VAR 0 2
21982: PPUSH
21983: LD_INT 0
21985: PPUSH
21986: LD_INT 25
21988: PPUSH
21989: CALL_OW 565
21993: PPUSH
21994: CALL_OW 322
// for i = 0 to 40 do
21998: LD_ADDR_VAR 0 3
22002: PUSH
22003: DOUBLE
22004: LD_INT 0
22006: DEC
22007: ST_TO_ADDR
22008: LD_INT 40
22010: PUSH
22011: FOR_TO
22012: IFFALSE 22043
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
22014: LD_VAR 0 3
22018: PPUSH
22019: LD_VAR 0 2
22023: PPUSH
22024: LD_INT 1
22026: PPUSH
22027: LD_VAR 0 3
22031: PPUSH
22032: CALL_OW 565
22036: PPUSH
22037: CALL_OW 324
22041: GO 22011
22043: POP
22044: POP
// end ;
22045: GO 21925
22047: POP
22048: POP
// end ;
22049: LD_VAR 0 1
22053: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
22054: LD_INT 0
22056: PPUSH
22057: PPUSH
22058: PPUSH
// for side = 1 to 8 do
22059: LD_ADDR_VAR 0 3
22063: PUSH
22064: DOUBLE
22065: LD_INT 1
22067: DEC
22068: ST_TO_ADDR
22069: LD_INT 8
22071: PUSH
22072: FOR_TO
22073: IFFALSE 26069
// begin for i = 1 to 73 do
22075: LD_ADDR_VAR 0 4
22079: PUSH
22080: DOUBLE
22081: LD_INT 1
22083: DEC
22084: ST_TO_ADDR
22085: LD_INT 73
22087: PUSH
22088: FOR_TO
22089: IFFALSE 22110
// SetTech ( i , side , state_disabled ) ;
22091: LD_VAR 0 4
22095: PPUSH
22096: LD_VAR 0 3
22100: PPUSH
22101: LD_INT 0
22103: PPUSH
22104: CALL_OW 322
22108: GO 22088
22110: POP
22111: POP
// for i = 0 to 40 do
22112: LD_ADDR_VAR 0 4
22116: PUSH
22117: DOUBLE
22118: LD_INT 0
22120: DEC
22121: ST_TO_ADDR
22122: LD_INT 40
22124: PUSH
22125: FOR_TO
22126: IFFALSE 22147
// SetRestrict ( i , side , false ) ;
22128: LD_VAR 0 4
22132: PPUSH
22133: LD_VAR 0 3
22137: PPUSH
22138: LD_INT 0
22140: PPUSH
22141: CALL_OW 324
22145: GO 22125
22147: POP
22148: POP
// case level of 1 :
22149: LD_VAR 0 1
22153: PUSH
22154: LD_INT 1
22156: DOUBLE
22157: EQUAL
22158: IFTRUE 22162
22160: GO 22315
22162: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22163: LD_INT 35
22165: PPUSH
22166: LD_VAR 0 3
22170: PPUSH
22171: LD_INT 1
22173: PPUSH
22174: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22178: LD_INT 45
22180: PPUSH
22181: LD_VAR 0 3
22185: PPUSH
22186: LD_INT 1
22188: PPUSH
22189: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22193: LD_INT 46
22195: PPUSH
22196: LD_VAR 0 3
22200: PPUSH
22201: LD_INT 1
22203: PPUSH
22204: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22208: LD_INT 47
22210: PPUSH
22211: LD_VAR 0 3
22215: PPUSH
22216: LD_INT 1
22218: PPUSH
22219: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22223: LD_INT 0
22225: PPUSH
22226: LD_VAR 0 3
22230: PPUSH
22231: LD_INT 1
22233: PPUSH
22234: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22238: LD_INT 2
22240: PPUSH
22241: LD_VAR 0 3
22245: PPUSH
22246: LD_INT 1
22248: PPUSH
22249: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22253: LD_INT 4
22255: PPUSH
22256: LD_VAR 0 3
22260: PPUSH
22261: LD_INT 1
22263: PPUSH
22264: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22268: LD_INT 6
22270: PPUSH
22271: LD_VAR 0 3
22275: PPUSH
22276: LD_INT 1
22278: PPUSH
22279: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22283: LD_INT 29
22285: PPUSH
22286: LD_VAR 0 3
22290: PPUSH
22291: LD_INT 1
22293: PPUSH
22294: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22298: LD_INT 31
22300: PPUSH
22301: LD_VAR 0 3
22305: PPUSH
22306: LD_INT 1
22308: PPUSH
22309: CALL_OW 324
// end ; 2 :
22313: GO 26067
22315: LD_INT 2
22317: DOUBLE
22318: EQUAL
22319: IFTRUE 22323
22321: GO 22521
22323: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22324: LD_INT 35
22326: PPUSH
22327: LD_VAR 0 3
22331: PPUSH
22332: LD_INT 1
22334: PPUSH
22335: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22339: LD_INT 45
22341: PPUSH
22342: LD_VAR 0 3
22346: PPUSH
22347: LD_INT 1
22349: PPUSH
22350: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22354: LD_INT 46
22356: PPUSH
22357: LD_VAR 0 3
22361: PPUSH
22362: LD_INT 1
22364: PPUSH
22365: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22369: LD_INT 47
22371: PPUSH
22372: LD_VAR 0 3
22376: PPUSH
22377: LD_INT 1
22379: PPUSH
22380: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22384: LD_INT 1
22386: PPUSH
22387: LD_VAR 0 3
22391: PPUSH
22392: LD_INT 1
22394: PPUSH
22395: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22399: LD_INT 2
22401: PPUSH
22402: LD_VAR 0 3
22406: PPUSH
22407: LD_INT 1
22409: PPUSH
22410: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22414: LD_INT 11
22416: PPUSH
22417: LD_VAR 0 3
22421: PPUSH
22422: LD_INT 1
22424: PPUSH
22425: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22429: LD_INT 0
22431: PPUSH
22432: LD_VAR 0 3
22436: PPUSH
22437: LD_INT 1
22439: PPUSH
22440: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22444: LD_INT 2
22446: PPUSH
22447: LD_VAR 0 3
22451: PPUSH
22452: LD_INT 1
22454: PPUSH
22455: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22459: LD_INT 4
22461: PPUSH
22462: LD_VAR 0 3
22466: PPUSH
22467: LD_INT 1
22469: PPUSH
22470: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22474: LD_INT 6
22476: PPUSH
22477: LD_VAR 0 3
22481: PPUSH
22482: LD_INT 1
22484: PPUSH
22485: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22489: LD_INT 29
22491: PPUSH
22492: LD_VAR 0 3
22496: PPUSH
22497: LD_INT 1
22499: PPUSH
22500: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22504: LD_INT 31
22506: PPUSH
22507: LD_VAR 0 3
22511: PPUSH
22512: LD_INT 1
22514: PPUSH
22515: CALL_OW 324
// end ; 3 :
22519: GO 26067
22521: LD_INT 3
22523: DOUBLE
22524: EQUAL
22525: IFTRUE 22529
22527: GO 22982
22529: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22530: LD_INT 35
22532: PPUSH
22533: LD_VAR 0 3
22537: PPUSH
22538: LD_INT 1
22540: PPUSH
22541: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22545: LD_INT 45
22547: PPUSH
22548: LD_VAR 0 3
22552: PPUSH
22553: LD_INT 1
22555: PPUSH
22556: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22560: LD_INT 46
22562: PPUSH
22563: LD_VAR 0 3
22567: PPUSH
22568: LD_INT 1
22570: PPUSH
22571: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22575: LD_INT 47
22577: PPUSH
22578: LD_VAR 0 3
22582: PPUSH
22583: LD_INT 1
22585: PPUSH
22586: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22590: LD_INT 1
22592: PPUSH
22593: LD_VAR 0 3
22597: PPUSH
22598: LD_INT 1
22600: PPUSH
22601: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22605: LD_INT 2
22607: PPUSH
22608: LD_VAR 0 3
22612: PPUSH
22613: LD_INT 1
22615: PPUSH
22616: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22620: LD_INT 11
22622: PPUSH
22623: LD_VAR 0 3
22627: PPUSH
22628: LD_INT 1
22630: PPUSH
22631: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22635: LD_INT 48
22637: PPUSH
22638: LD_VAR 0 3
22642: PPUSH
22643: LD_INT 1
22645: PPUSH
22646: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22650: LD_INT 69
22652: PPUSH
22653: LD_VAR 0 3
22657: PPUSH
22658: LD_INT 1
22660: PPUSH
22661: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22665: LD_INT 39
22667: PPUSH
22668: LD_VAR 0 3
22672: PPUSH
22673: LD_INT 1
22675: PPUSH
22676: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22680: LD_INT 43
22682: PPUSH
22683: LD_VAR 0 3
22687: PPUSH
22688: LD_INT 1
22690: PPUSH
22691: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22695: LD_INT 51
22697: PPUSH
22698: LD_VAR 0 3
22702: PPUSH
22703: LD_INT 1
22705: PPUSH
22706: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22710: LD_INT 6
22712: PPUSH
22713: LD_VAR 0 3
22717: PPUSH
22718: LD_INT 1
22720: PPUSH
22721: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22725: LD_INT 0
22727: PPUSH
22728: LD_VAR 0 3
22732: PPUSH
22733: LD_INT 1
22735: PPUSH
22736: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22740: LD_INT 2
22742: PPUSH
22743: LD_VAR 0 3
22747: PPUSH
22748: LD_INT 1
22750: PPUSH
22751: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22755: LD_INT 3
22757: PPUSH
22758: LD_VAR 0 3
22762: PPUSH
22763: LD_INT 1
22765: PPUSH
22766: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22770: LD_INT 4
22772: PPUSH
22773: LD_VAR 0 3
22777: PPUSH
22778: LD_INT 1
22780: PPUSH
22781: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22785: LD_INT 6
22787: PPUSH
22788: LD_VAR 0 3
22792: PPUSH
22793: LD_INT 1
22795: PPUSH
22796: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22800: LD_INT 7
22802: PPUSH
22803: LD_VAR 0 3
22807: PPUSH
22808: LD_INT 1
22810: PPUSH
22811: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22815: LD_INT 8
22817: PPUSH
22818: LD_VAR 0 3
22822: PPUSH
22823: LD_INT 1
22825: PPUSH
22826: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22830: LD_INT 10
22832: PPUSH
22833: LD_VAR 0 3
22837: PPUSH
22838: LD_INT 1
22840: PPUSH
22841: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22845: LD_INT 15
22847: PPUSH
22848: LD_VAR 0 3
22852: PPUSH
22853: LD_INT 1
22855: PPUSH
22856: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22860: LD_INT 16
22862: PPUSH
22863: LD_VAR 0 3
22867: PPUSH
22868: LD_INT 1
22870: PPUSH
22871: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22875: LD_INT 17
22877: PPUSH
22878: LD_VAR 0 3
22882: PPUSH
22883: LD_INT 1
22885: PPUSH
22886: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22890: LD_INT 20
22892: PPUSH
22893: LD_VAR 0 3
22897: PPUSH
22898: LD_INT 1
22900: PPUSH
22901: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22905: LD_INT 26
22907: PPUSH
22908: LD_VAR 0 3
22912: PPUSH
22913: LD_INT 1
22915: PPUSH
22916: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22920: LD_INT 27
22922: PPUSH
22923: LD_VAR 0 3
22927: PPUSH
22928: LD_INT 1
22930: PPUSH
22931: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22935: LD_INT 29
22937: PPUSH
22938: LD_VAR 0 3
22942: PPUSH
22943: LD_INT 1
22945: PPUSH
22946: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22950: LD_INT 31
22952: PPUSH
22953: LD_VAR 0 3
22957: PPUSH
22958: LD_INT 1
22960: PPUSH
22961: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22965: LD_INT 32
22967: PPUSH
22968: LD_VAR 0 3
22972: PPUSH
22973: LD_INT 1
22975: PPUSH
22976: CALL_OW 324
// end ; 4 :
22980: GO 26067
22982: LD_INT 4
22984: DOUBLE
22985: EQUAL
22986: IFTRUE 22990
22988: GO 23938
22990: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22991: LD_INT 35
22993: PPUSH
22994: LD_VAR 0 3
22998: PPUSH
22999: LD_INT 1
23001: PPUSH
23002: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23006: LD_INT 45
23008: PPUSH
23009: LD_VAR 0 3
23013: PPUSH
23014: LD_INT 1
23016: PPUSH
23017: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23021: LD_INT 46
23023: PPUSH
23024: LD_VAR 0 3
23028: PPUSH
23029: LD_INT 1
23031: PPUSH
23032: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23036: LD_INT 47
23038: PPUSH
23039: LD_VAR 0 3
23043: PPUSH
23044: LD_INT 1
23046: PPUSH
23047: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23051: LD_INT 1
23053: PPUSH
23054: LD_VAR 0 3
23058: PPUSH
23059: LD_INT 1
23061: PPUSH
23062: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23066: LD_INT 2
23068: PPUSH
23069: LD_VAR 0 3
23073: PPUSH
23074: LD_INT 1
23076: PPUSH
23077: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23081: LD_INT 11
23083: PPUSH
23084: LD_VAR 0 3
23088: PPUSH
23089: LD_INT 1
23091: PPUSH
23092: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23096: LD_INT 20
23098: PPUSH
23099: LD_VAR 0 3
23103: PPUSH
23104: LD_INT 1
23106: PPUSH
23107: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23111: LD_INT 48
23113: PPUSH
23114: LD_VAR 0 3
23118: PPUSH
23119: LD_INT 1
23121: PPUSH
23122: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23126: LD_INT 49
23128: PPUSH
23129: LD_VAR 0 3
23133: PPUSH
23134: LD_INT 1
23136: PPUSH
23137: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
23141: LD_INT 69
23143: PPUSH
23144: LD_VAR 0 3
23148: PPUSH
23149: LD_INT 1
23151: PPUSH
23152: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
23156: LD_INT 39
23158: PPUSH
23159: LD_VAR 0 3
23163: PPUSH
23164: LD_INT 1
23166: PPUSH
23167: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
23171: LD_INT 34
23173: PPUSH
23174: LD_VAR 0 3
23178: PPUSH
23179: LD_INT 1
23181: PPUSH
23182: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
23186: LD_INT 42
23188: PPUSH
23189: LD_VAR 0 3
23193: PPUSH
23194: LD_INT 1
23196: PPUSH
23197: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
23201: LD_INT 44
23203: PPUSH
23204: LD_VAR 0 3
23208: PPUSH
23209: LD_INT 1
23211: PPUSH
23212: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
23216: LD_INT 41
23218: PPUSH
23219: LD_VAR 0 3
23223: PPUSH
23224: LD_INT 1
23226: PPUSH
23227: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
23231: LD_INT 43
23233: PPUSH
23234: LD_VAR 0 3
23238: PPUSH
23239: LD_INT 1
23241: PPUSH
23242: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23246: LD_INT 70
23248: PPUSH
23249: LD_VAR 0 3
23253: PPUSH
23254: LD_INT 1
23256: PPUSH
23257: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23261: LD_INT 51
23263: PPUSH
23264: LD_VAR 0 3
23268: PPUSH
23269: LD_INT 1
23271: PPUSH
23272: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23276: LD_INT 52
23278: PPUSH
23279: LD_VAR 0 3
23283: PPUSH
23284: LD_INT 1
23286: PPUSH
23287: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23291: LD_INT 6
23293: PPUSH
23294: LD_VAR 0 3
23298: PPUSH
23299: LD_INT 1
23301: PPUSH
23302: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23306: LD_INT 15
23308: PPUSH
23309: LD_VAR 0 3
23313: PPUSH
23314: LD_INT 1
23316: PPUSH
23317: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23321: LD_INT 7
23323: PPUSH
23324: LD_VAR 0 3
23328: PPUSH
23329: LD_INT 1
23331: PPUSH
23332: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23336: LD_INT 12
23338: PPUSH
23339: LD_VAR 0 3
23343: PPUSH
23344: LD_INT 1
23346: PPUSH
23347: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23351: LD_INT 18
23353: PPUSH
23354: LD_VAR 0 3
23358: PPUSH
23359: LD_INT 1
23361: PPUSH
23362: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23366: LD_INT 60
23368: PPUSH
23369: LD_VAR 0 3
23373: PPUSH
23374: LD_INT 1
23376: PPUSH
23377: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23381: LD_INT 9
23383: PPUSH
23384: LD_VAR 0 3
23388: PPUSH
23389: LD_INT 1
23391: PPUSH
23392: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23396: LD_INT 30
23398: PPUSH
23399: LD_VAR 0 3
23403: PPUSH
23404: LD_INT 1
23406: PPUSH
23407: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23411: LD_INT 37
23413: PPUSH
23414: LD_VAR 0 3
23418: PPUSH
23419: LD_INT 1
23421: PPUSH
23422: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23426: LD_INT 5
23428: PPUSH
23429: LD_VAR 0 3
23433: PPUSH
23434: LD_INT 1
23436: PPUSH
23437: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23441: LD_INT 66
23443: PPUSH
23444: LD_VAR 0 3
23448: PPUSH
23449: LD_INT 1
23451: PPUSH
23452: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23456: LD_INT 21
23458: PPUSH
23459: LD_VAR 0 3
23463: PPUSH
23464: LD_INT 1
23466: PPUSH
23467: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23471: LD_INT 22
23473: PPUSH
23474: LD_VAR 0 3
23478: PPUSH
23479: LD_INT 1
23481: PPUSH
23482: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23486: LD_INT 54
23488: PPUSH
23489: LD_VAR 0 3
23493: PPUSH
23494: LD_INT 1
23496: PPUSH
23497: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23501: LD_INT 0
23503: PPUSH
23504: LD_VAR 0 3
23508: PPUSH
23509: LD_INT 1
23511: PPUSH
23512: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23516: LD_INT 1
23518: PPUSH
23519: LD_VAR 0 3
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23531: LD_INT 2
23533: PPUSH
23534: LD_VAR 0 3
23538: PPUSH
23539: LD_INT 1
23541: PPUSH
23542: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23546: LD_INT 3
23548: PPUSH
23549: LD_VAR 0 3
23553: PPUSH
23554: LD_INT 1
23556: PPUSH
23557: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23561: LD_INT 4
23563: PPUSH
23564: LD_VAR 0 3
23568: PPUSH
23569: LD_INT 1
23571: PPUSH
23572: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23576: LD_INT 5
23578: PPUSH
23579: LD_VAR 0 3
23583: PPUSH
23584: LD_INT 1
23586: PPUSH
23587: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23591: LD_INT 6
23593: PPUSH
23594: LD_VAR 0 3
23598: PPUSH
23599: LD_INT 1
23601: PPUSH
23602: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23606: LD_INT 7
23608: PPUSH
23609: LD_VAR 0 3
23613: PPUSH
23614: LD_INT 1
23616: PPUSH
23617: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23621: LD_INT 8
23623: PPUSH
23624: LD_VAR 0 3
23628: PPUSH
23629: LD_INT 1
23631: PPUSH
23632: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23636: LD_INT 10
23638: PPUSH
23639: LD_VAR 0 3
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23651: LD_INT 11
23653: PPUSH
23654: LD_VAR 0 3
23658: PPUSH
23659: LD_INT 1
23661: PPUSH
23662: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23666: LD_INT 12
23668: PPUSH
23669: LD_VAR 0 3
23673: PPUSH
23674: LD_INT 1
23676: PPUSH
23677: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23681: LD_INT 13
23683: PPUSH
23684: LD_VAR 0 3
23688: PPUSH
23689: LD_INT 1
23691: PPUSH
23692: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23696: LD_INT 14
23698: PPUSH
23699: LD_VAR 0 3
23703: PPUSH
23704: LD_INT 1
23706: PPUSH
23707: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23711: LD_INT 15
23713: PPUSH
23714: LD_VAR 0 3
23718: PPUSH
23719: LD_INT 1
23721: PPUSH
23722: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23726: LD_INT 16
23728: PPUSH
23729: LD_VAR 0 3
23733: PPUSH
23734: LD_INT 1
23736: PPUSH
23737: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23741: LD_INT 17
23743: PPUSH
23744: LD_VAR 0 3
23748: PPUSH
23749: LD_INT 1
23751: PPUSH
23752: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23756: LD_INT 19
23758: PPUSH
23759: LD_VAR 0 3
23763: PPUSH
23764: LD_INT 1
23766: PPUSH
23767: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23771: LD_INT 20
23773: PPUSH
23774: LD_VAR 0 3
23778: PPUSH
23779: LD_INT 1
23781: PPUSH
23782: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23786: LD_INT 21
23788: PPUSH
23789: LD_VAR 0 3
23793: PPUSH
23794: LD_INT 1
23796: PPUSH
23797: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23801: LD_INT 23
23803: PPUSH
23804: LD_VAR 0 3
23808: PPUSH
23809: LD_INT 1
23811: PPUSH
23812: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23816: LD_INT 26
23818: PPUSH
23819: LD_VAR 0 3
23823: PPUSH
23824: LD_INT 1
23826: PPUSH
23827: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23831: LD_INT 27
23833: PPUSH
23834: LD_VAR 0 3
23838: PPUSH
23839: LD_INT 1
23841: PPUSH
23842: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23846: LD_INT 28
23848: PPUSH
23849: LD_VAR 0 3
23853: PPUSH
23854: LD_INT 1
23856: PPUSH
23857: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23861: LD_INT 29
23863: PPUSH
23864: LD_VAR 0 3
23868: PPUSH
23869: LD_INT 1
23871: PPUSH
23872: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23876: LD_INT 30
23878: PPUSH
23879: LD_VAR 0 3
23883: PPUSH
23884: LD_INT 1
23886: PPUSH
23887: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23891: LD_INT 31
23893: PPUSH
23894: LD_VAR 0 3
23898: PPUSH
23899: LD_INT 1
23901: PPUSH
23902: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23906: LD_INT 32
23908: PPUSH
23909: LD_VAR 0 3
23913: PPUSH
23914: LD_INT 1
23916: PPUSH
23917: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23921: LD_INT 36
23923: PPUSH
23924: LD_VAR 0 3
23928: PPUSH
23929: LD_INT 1
23931: PPUSH
23932: CALL_OW 324
// end ; 5 :
23936: GO 26067
23938: LD_INT 5
23940: DOUBLE
23941: EQUAL
23942: IFTRUE 23946
23944: GO 25059
23946: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23947: LD_INT 35
23949: PPUSH
23950: LD_VAR 0 3
23954: PPUSH
23955: LD_INT 1
23957: PPUSH
23958: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23962: LD_INT 45
23964: PPUSH
23965: LD_VAR 0 3
23969: PPUSH
23970: LD_INT 1
23972: PPUSH
23973: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23977: LD_INT 46
23979: PPUSH
23980: LD_VAR 0 3
23984: PPUSH
23985: LD_INT 1
23987: PPUSH
23988: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23992: LD_INT 47
23994: PPUSH
23995: LD_VAR 0 3
23999: PPUSH
24000: LD_INT 1
24002: PPUSH
24003: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
24007: LD_INT 1
24009: PPUSH
24010: LD_VAR 0 3
24014: PPUSH
24015: LD_INT 1
24017: PPUSH
24018: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
24022: LD_INT 2
24024: PPUSH
24025: LD_VAR 0 3
24029: PPUSH
24030: LD_INT 1
24032: PPUSH
24033: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
24037: LD_INT 11
24039: PPUSH
24040: LD_VAR 0 3
24044: PPUSH
24045: LD_INT 1
24047: PPUSH
24048: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
24052: LD_INT 20
24054: PPUSH
24055: LD_VAR 0 3
24059: PPUSH
24060: LD_INT 1
24062: PPUSH
24063: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
24067: LD_INT 48
24069: PPUSH
24070: LD_VAR 0 3
24074: PPUSH
24075: LD_INT 1
24077: PPUSH
24078: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
24082: LD_INT 49
24084: PPUSH
24085: LD_VAR 0 3
24089: PPUSH
24090: LD_INT 1
24092: PPUSH
24093: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24097: LD_INT 69
24099: PPUSH
24100: LD_VAR 0 3
24104: PPUSH
24105: LD_INT 1
24107: PPUSH
24108: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24112: LD_INT 39
24114: PPUSH
24115: LD_VAR 0 3
24119: PPUSH
24120: LD_INT 1
24122: PPUSH
24123: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24127: LD_INT 34
24129: PPUSH
24130: LD_VAR 0 3
24134: PPUSH
24135: LD_INT 1
24137: PPUSH
24138: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24142: LD_INT 42
24144: PPUSH
24145: LD_VAR 0 3
24149: PPUSH
24150: LD_INT 1
24152: PPUSH
24153: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24157: LD_INT 44
24159: PPUSH
24160: LD_VAR 0 3
24164: PPUSH
24165: LD_INT 1
24167: PPUSH
24168: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24172: LD_INT 41
24174: PPUSH
24175: LD_VAR 0 3
24179: PPUSH
24180: LD_INT 1
24182: PPUSH
24183: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24187: LD_INT 40
24189: PPUSH
24190: LD_VAR 0 3
24194: PPUSH
24195: LD_INT 1
24197: PPUSH
24198: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24202: LD_INT 43
24204: PPUSH
24205: LD_VAR 0 3
24209: PPUSH
24210: LD_INT 1
24212: PPUSH
24213: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24217: LD_INT 70
24219: PPUSH
24220: LD_VAR 0 3
24224: PPUSH
24225: LD_INT 1
24227: PPUSH
24228: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24232: LD_INT 51
24234: PPUSH
24235: LD_VAR 0 3
24239: PPUSH
24240: LD_INT 1
24242: PPUSH
24243: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24247: LD_INT 52
24249: PPUSH
24250: LD_VAR 0 3
24254: PPUSH
24255: LD_INT 1
24257: PPUSH
24258: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24262: LD_INT 6
24264: PPUSH
24265: LD_VAR 0 3
24269: PPUSH
24270: LD_INT 1
24272: PPUSH
24273: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24277: LD_INT 15
24279: PPUSH
24280: LD_VAR 0 3
24284: PPUSH
24285: LD_INT 1
24287: PPUSH
24288: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24292: LD_INT 7
24294: PPUSH
24295: LD_VAR 0 3
24299: PPUSH
24300: LD_INT 1
24302: PPUSH
24303: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24307: LD_INT 12
24309: PPUSH
24310: LD_VAR 0 3
24314: PPUSH
24315: LD_INT 1
24317: PPUSH
24318: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24322: LD_INT 17
24324: PPUSH
24325: LD_VAR 0 3
24329: PPUSH
24330: LD_INT 1
24332: PPUSH
24333: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24337: LD_INT 18
24339: PPUSH
24340: LD_VAR 0 3
24344: PPUSH
24345: LD_INT 1
24347: PPUSH
24348: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24352: LD_INT 60
24354: PPUSH
24355: LD_VAR 0 3
24359: PPUSH
24360: LD_INT 1
24362: PPUSH
24363: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24367: LD_INT 32
24369: PPUSH
24370: LD_VAR 0 3
24374: PPUSH
24375: LD_INT 1
24377: PPUSH
24378: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24382: LD_INT 9
24384: PPUSH
24385: LD_VAR 0 3
24389: PPUSH
24390: LD_INT 1
24392: PPUSH
24393: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24397: LD_INT 57
24399: PPUSH
24400: LD_VAR 0 3
24404: PPUSH
24405: LD_INT 1
24407: PPUSH
24408: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24412: LD_INT 30
24414: PPUSH
24415: LD_VAR 0 3
24419: PPUSH
24420: LD_INT 1
24422: PPUSH
24423: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24427: LD_INT 37
24429: PPUSH
24430: LD_VAR 0 3
24434: PPUSH
24435: LD_INT 1
24437: PPUSH
24438: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24442: LD_INT 63
24444: PPUSH
24445: LD_VAR 0 3
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24457: LD_INT 3
24459: PPUSH
24460: LD_VAR 0 3
24464: PPUSH
24465: LD_INT 1
24467: PPUSH
24468: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24472: LD_INT 4
24474: PPUSH
24475: LD_VAR 0 3
24479: PPUSH
24480: LD_INT 1
24482: PPUSH
24483: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24487: LD_INT 5
24489: PPUSH
24490: LD_VAR 0 3
24494: PPUSH
24495: LD_INT 1
24497: PPUSH
24498: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24502: LD_INT 66
24504: PPUSH
24505: LD_VAR 0 3
24509: PPUSH
24510: LD_INT 1
24512: PPUSH
24513: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24517: LD_INT 21
24519: PPUSH
24520: LD_VAR 0 3
24524: PPUSH
24525: LD_INT 1
24527: PPUSH
24528: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24532: LD_INT 22
24534: PPUSH
24535: LD_VAR 0 3
24539: PPUSH
24540: LD_INT 1
24542: PPUSH
24543: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24547: LD_INT 19
24549: PPUSH
24550: LD_VAR 0 3
24554: PPUSH
24555: LD_INT 1
24557: PPUSH
24558: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24562: LD_INT 54
24564: PPUSH
24565: LD_VAR 0 3
24569: PPUSH
24570: LD_INT 1
24572: PPUSH
24573: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24577: LD_INT 55
24579: PPUSH
24580: LD_VAR 0 3
24584: PPUSH
24585: LD_INT 1
24587: PPUSH
24588: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
24592: LD_INT 0
24594: PPUSH
24595: LD_VAR 0 3
24599: PPUSH
24600: LD_INT 1
24602: PPUSH
24603: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
24607: LD_INT 1
24609: PPUSH
24610: LD_VAR 0 3
24614: PPUSH
24615: LD_INT 1
24617: PPUSH
24618: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
24622: LD_INT 2
24624: PPUSH
24625: LD_VAR 0 3
24629: PPUSH
24630: LD_INT 1
24632: PPUSH
24633: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
24637: LD_INT 3
24639: PPUSH
24640: LD_VAR 0 3
24644: PPUSH
24645: LD_INT 1
24647: PPUSH
24648: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
24652: LD_INT 4
24654: PPUSH
24655: LD_VAR 0 3
24659: PPUSH
24660: LD_INT 1
24662: PPUSH
24663: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
24667: LD_INT 5
24669: PPUSH
24670: LD_VAR 0 3
24674: PPUSH
24675: LD_INT 1
24677: PPUSH
24678: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
24682: LD_INT 6
24684: PPUSH
24685: LD_VAR 0 3
24689: PPUSH
24690: LD_INT 1
24692: PPUSH
24693: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
24697: LD_INT 7
24699: PPUSH
24700: LD_VAR 0 3
24704: PPUSH
24705: LD_INT 1
24707: PPUSH
24708: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
24712: LD_INT 8
24714: PPUSH
24715: LD_VAR 0 3
24719: PPUSH
24720: LD_INT 1
24722: PPUSH
24723: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
24727: LD_INT 10
24729: PPUSH
24730: LD_VAR 0 3
24734: PPUSH
24735: LD_INT 1
24737: PPUSH
24738: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
24742: LD_INT 11
24744: PPUSH
24745: LD_VAR 0 3
24749: PPUSH
24750: LD_INT 1
24752: PPUSH
24753: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
24757: LD_INT 12
24759: PPUSH
24760: LD_VAR 0 3
24764: PPUSH
24765: LD_INT 1
24767: PPUSH
24768: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
24772: LD_INT 13
24774: PPUSH
24775: LD_VAR 0 3
24779: PPUSH
24780: LD_INT 1
24782: PPUSH
24783: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
24787: LD_INT 14
24789: PPUSH
24790: LD_VAR 0 3
24794: PPUSH
24795: LD_INT 1
24797: PPUSH
24798: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
24802: LD_INT 15
24804: PPUSH
24805: LD_VAR 0 3
24809: PPUSH
24810: LD_INT 1
24812: PPUSH
24813: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
24817: LD_INT 16
24819: PPUSH
24820: LD_VAR 0 3
24824: PPUSH
24825: LD_INT 1
24827: PPUSH
24828: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
24832: LD_INT 17
24834: PPUSH
24835: LD_VAR 0 3
24839: PPUSH
24840: LD_INT 1
24842: PPUSH
24843: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
24847: LD_INT 18
24849: PPUSH
24850: LD_VAR 0 3
24854: PPUSH
24855: LD_INT 1
24857: PPUSH
24858: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
24862: LD_INT 19
24864: PPUSH
24865: LD_VAR 0 3
24869: PPUSH
24870: LD_INT 1
24872: PPUSH
24873: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
24877: LD_INT 20
24879: PPUSH
24880: LD_VAR 0 3
24884: PPUSH
24885: LD_INT 1
24887: PPUSH
24888: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
24892: LD_INT 21
24894: PPUSH
24895: LD_VAR 0 3
24899: PPUSH
24900: LD_INT 1
24902: PPUSH
24903: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
24907: LD_INT 23
24909: PPUSH
24910: LD_VAR 0 3
24914: PPUSH
24915: LD_INT 1
24917: PPUSH
24918: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
24922: LD_INT 26
24924: PPUSH
24925: LD_VAR 0 3
24929: PPUSH
24930: LD_INT 1
24932: PPUSH
24933: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
24937: LD_INT 27
24939: PPUSH
24940: LD_VAR 0 3
24944: PPUSH
24945: LD_INT 1
24947: PPUSH
24948: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
24952: LD_INT 28
24954: PPUSH
24955: LD_VAR 0 3
24959: PPUSH
24960: LD_INT 1
24962: PPUSH
24963: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
24967: LD_INT 29
24969: PPUSH
24970: LD_VAR 0 3
24974: PPUSH
24975: LD_INT 1
24977: PPUSH
24978: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
24982: LD_INT 30
24984: PPUSH
24985: LD_VAR 0 3
24989: PPUSH
24990: LD_INT 1
24992: PPUSH
24993: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
24997: LD_INT 31
24999: PPUSH
25000: LD_VAR 0 3
25004: PPUSH
25005: LD_INT 1
25007: PPUSH
25008: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
25012: LD_INT 32
25014: PPUSH
25015: LD_VAR 0 3
25019: PPUSH
25020: LD_INT 1
25022: PPUSH
25023: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
25027: LD_INT 33
25029: PPUSH
25030: LD_VAR 0 3
25034: PPUSH
25035: LD_INT 1
25037: PPUSH
25038: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
25042: LD_INT 36
25044: PPUSH
25045: LD_VAR 0 3
25049: PPUSH
25050: LD_INT 1
25052: PPUSH
25053: CALL_OW 324
// end ; 6 :
25057: GO 26067
25059: LD_INT 6
25061: DOUBLE
25062: EQUAL
25063: IFTRUE 25067
25065: GO 25992
25067: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
25068: LD_INT 35
25070: PPUSH
25071: LD_VAR 0 3
25075: PPUSH
25076: LD_INT 1
25078: PPUSH
25079: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
25083: LD_INT 45
25085: PPUSH
25086: LD_VAR 0 3
25090: PPUSH
25091: LD_INT 1
25093: PPUSH
25094: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
25098: LD_INT 46
25100: PPUSH
25101: LD_VAR 0 3
25105: PPUSH
25106: LD_INT 1
25108: PPUSH
25109: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
25113: LD_INT 47
25115: PPUSH
25116: LD_VAR 0 3
25120: PPUSH
25121: LD_INT 1
25123: PPUSH
25124: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
25128: LD_INT 1
25130: PPUSH
25131: LD_VAR 0 3
25135: PPUSH
25136: LD_INT 1
25138: PPUSH
25139: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
25143: LD_INT 2
25145: PPUSH
25146: LD_VAR 0 3
25150: PPUSH
25151: LD_INT 1
25153: PPUSH
25154: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
25158: LD_INT 11
25160: PPUSH
25161: LD_VAR 0 3
25165: PPUSH
25166: LD_INT 1
25168: PPUSH
25169: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
25173: LD_INT 20
25175: PPUSH
25176: LD_VAR 0 3
25180: PPUSH
25181: LD_INT 1
25183: PPUSH
25184: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
25188: LD_INT 48
25190: PPUSH
25191: LD_VAR 0 3
25195: PPUSH
25196: LD_INT 1
25198: PPUSH
25199: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
25203: LD_INT 49
25205: PPUSH
25206: LD_VAR 0 3
25210: PPUSH
25211: LD_INT 1
25213: PPUSH
25214: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
25218: LD_INT 50
25220: PPUSH
25221: LD_VAR 0 3
25225: PPUSH
25226: LD_INT 1
25228: PPUSH
25229: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
25233: LD_INT 69
25235: PPUSH
25236: LD_VAR 0 3
25240: PPUSH
25241: LD_INT 1
25243: PPUSH
25244: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
25248: LD_INT 39
25250: PPUSH
25251: LD_VAR 0 3
25255: PPUSH
25256: LD_INT 1
25258: PPUSH
25259: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
25263: LD_INT 34
25265: PPUSH
25266: LD_VAR 0 3
25270: PPUSH
25271: LD_INT 1
25273: PPUSH
25274: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
25278: LD_INT 42
25280: PPUSH
25281: LD_VAR 0 3
25285: PPUSH
25286: LD_INT 1
25288: PPUSH
25289: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
25293: LD_INT 44
25295: PPUSH
25296: LD_VAR 0 3
25300: PPUSH
25301: LD_INT 1
25303: PPUSH
25304: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
25308: LD_INT 41
25310: PPUSH
25311: LD_VAR 0 3
25315: PPUSH
25316: LD_INT 1
25318: PPUSH
25319: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
25323: LD_INT 13
25325: PPUSH
25326: LD_VAR 0 3
25330: PPUSH
25331: LD_INT 1
25333: PPUSH
25334: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
25338: LD_INT 40
25340: PPUSH
25341: LD_VAR 0 3
25345: PPUSH
25346: LD_INT 1
25348: PPUSH
25349: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
25353: LD_INT 43
25355: PPUSH
25356: LD_VAR 0 3
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
25368: LD_INT 70
25370: PPUSH
25371: LD_VAR 0 3
25375: PPUSH
25376: LD_INT 1
25378: PPUSH
25379: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
25383: LD_INT 23
25385: PPUSH
25386: LD_VAR 0 3
25390: PPUSH
25391: LD_INT 1
25393: PPUSH
25394: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
25398: LD_INT 51
25400: PPUSH
25401: LD_VAR 0 3
25405: PPUSH
25406: LD_INT 1
25408: PPUSH
25409: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
25413: LD_INT 52
25415: PPUSH
25416: LD_VAR 0 3
25420: PPUSH
25421: LD_INT 1
25423: PPUSH
25424: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
25428: LD_INT 6
25430: PPUSH
25431: LD_VAR 0 3
25435: PPUSH
25436: LD_INT 1
25438: PPUSH
25439: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
25443: LD_INT 15
25445: PPUSH
25446: LD_VAR 0 3
25450: PPUSH
25451: LD_INT 1
25453: PPUSH
25454: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
25458: LD_INT 7
25460: PPUSH
25461: LD_VAR 0 3
25465: PPUSH
25466: LD_INT 1
25468: PPUSH
25469: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
25473: LD_INT 12
25475: PPUSH
25476: LD_VAR 0 3
25480: PPUSH
25481: LD_INT 1
25483: PPUSH
25484: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
25488: LD_INT 10
25490: PPUSH
25491: LD_VAR 0 3
25495: PPUSH
25496: LD_INT 1
25498: PPUSH
25499: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
25503: LD_INT 17
25505: PPUSH
25506: LD_VAR 0 3
25510: PPUSH
25511: LD_INT 1
25513: PPUSH
25514: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
25518: LD_INT 18
25520: PPUSH
25521: LD_VAR 0 3
25525: PPUSH
25526: LD_INT 1
25528: PPUSH
25529: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
25533: LD_INT 60
25535: PPUSH
25536: LD_VAR 0 3
25540: PPUSH
25541: LD_INT 1
25543: PPUSH
25544: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
25548: LD_INT 61
25550: PPUSH
25551: LD_VAR 0 3
25555: PPUSH
25556: LD_INT 1
25558: PPUSH
25559: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
25563: LD_INT 32
25565: PPUSH
25566: LD_VAR 0 3
25570: PPUSH
25571: LD_INT 1
25573: PPUSH
25574: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
25578: LD_INT 27
25580: PPUSH
25581: LD_VAR 0 3
25585: PPUSH
25586: LD_INT 1
25588: PPUSH
25589: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
25593: LD_INT 36
25595: PPUSH
25596: LD_VAR 0 3
25600: PPUSH
25601: LD_INT 1
25603: PPUSH
25604: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
25608: LD_INT 33
25610: PPUSH
25611: LD_VAR 0 3
25615: PPUSH
25616: LD_INT 1
25618: PPUSH
25619: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
25623: LD_INT 9
25625: PPUSH
25626: LD_VAR 0 3
25630: PPUSH
25631: LD_INT 1
25633: PPUSH
25634: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
25638: LD_INT 38
25640: PPUSH
25641: LD_VAR 0 3
25645: PPUSH
25646: LD_INT 1
25648: PPUSH
25649: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
25653: LD_INT 57
25655: PPUSH
25656: LD_VAR 0 3
25660: PPUSH
25661: LD_INT 1
25663: PPUSH
25664: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
25668: LD_INT 58
25670: PPUSH
25671: LD_VAR 0 3
25675: PPUSH
25676: LD_INT 1
25678: PPUSH
25679: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
25683: LD_INT 28
25685: PPUSH
25686: LD_VAR 0 3
25690: PPUSH
25691: LD_INT 1
25693: PPUSH
25694: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
25698: LD_INT 29
25700: PPUSH
25701: LD_VAR 0 3
25705: PPUSH
25706: LD_INT 1
25708: PPUSH
25709: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
25713: LD_INT 30
25715: PPUSH
25716: LD_VAR 0 3
25720: PPUSH
25721: LD_INT 1
25723: PPUSH
25724: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
25728: LD_INT 37
25730: PPUSH
25731: LD_VAR 0 3
25735: PPUSH
25736: LD_INT 1
25738: PPUSH
25739: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
25743: LD_INT 63
25745: PPUSH
25746: LD_VAR 0 3
25750: PPUSH
25751: LD_INT 1
25753: PPUSH
25754: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
25758: LD_INT 64
25760: PPUSH
25761: LD_VAR 0 3
25765: PPUSH
25766: LD_INT 1
25768: PPUSH
25769: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
25773: LD_INT 3
25775: PPUSH
25776: LD_VAR 0 3
25780: PPUSH
25781: LD_INT 1
25783: PPUSH
25784: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
25788: LD_INT 4
25790: PPUSH
25791: LD_VAR 0 3
25795: PPUSH
25796: LD_INT 1
25798: PPUSH
25799: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
25803: LD_INT 5
25805: PPUSH
25806: LD_VAR 0 3
25810: PPUSH
25811: LD_INT 1
25813: PPUSH
25814: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
25818: LD_INT 8
25820: PPUSH
25821: LD_VAR 0 3
25825: PPUSH
25826: LD_INT 1
25828: PPUSH
25829: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
25833: LD_INT 66
25835: PPUSH
25836: LD_VAR 0 3
25840: PPUSH
25841: LD_INT 1
25843: PPUSH
25844: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
25848: LD_INT 67
25850: PPUSH
25851: LD_VAR 0 3
25855: PPUSH
25856: LD_INT 1
25858: PPUSH
25859: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
25863: LD_INT 21
25865: PPUSH
25866: LD_VAR 0 3
25870: PPUSH
25871: LD_INT 1
25873: PPUSH
25874: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
25878: LD_INT 22
25880: PPUSH
25881: LD_VAR 0 3
25885: PPUSH
25886: LD_INT 1
25888: PPUSH
25889: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
25893: LD_INT 19
25895: PPUSH
25896: LD_VAR 0 3
25900: PPUSH
25901: LD_INT 1
25903: PPUSH
25904: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
25908: LD_INT 26
25910: PPUSH
25911: LD_VAR 0 3
25915: PPUSH
25916: LD_INT 1
25918: PPUSH
25919: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
25923: LD_INT 54
25925: PPUSH
25926: LD_VAR 0 3
25930: PPUSH
25931: LD_INT 1
25933: PPUSH
25934: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
25938: LD_INT 55
25940: PPUSH
25941: LD_VAR 0 3
25945: PPUSH
25946: LD_INT 1
25948: PPUSH
25949: CALL_OW 322
// for i = 0 to 39 do
25953: LD_ADDR_VAR 0 4
25957: PUSH
25958: DOUBLE
25959: LD_INT 0
25961: DEC
25962: ST_TO_ADDR
25963: LD_INT 39
25965: PUSH
25966: FOR_TO
25967: IFFALSE 25988
// SetRestrict ( i , side , true ) ;
25969: LD_VAR 0 4
25973: PPUSH
25974: LD_VAR 0 3
25978: PPUSH
25979: LD_INT 1
25981: PPUSH
25982: CALL_OW 324
25986: GO 25966
25988: POP
25989: POP
// end ; else
25990: GO 26067
25992: POP
// begin for i = 1 to 73 do
25993: LD_ADDR_VAR 0 4
25997: PUSH
25998: DOUBLE
25999: LD_INT 1
26001: DEC
26002: ST_TO_ADDR
26003: LD_INT 73
26005: PUSH
26006: FOR_TO
26007: IFFALSE 26028
// SetTech ( i , side , state_enabled ) ;
26009: LD_VAR 0 4
26013: PPUSH
26014: LD_VAR 0 3
26018: PPUSH
26019: LD_INT 1
26021: PPUSH
26022: CALL_OW 322
26026: GO 26006
26028: POP
26029: POP
// for i = 0 to 39 do
26030: LD_ADDR_VAR 0 4
26034: PUSH
26035: DOUBLE
26036: LD_INT 0
26038: DEC
26039: ST_TO_ADDR
26040: LD_INT 39
26042: PUSH
26043: FOR_TO
26044: IFFALSE 26065
// SetRestrict ( i , side , true ) ;
26046: LD_VAR 0 4
26050: PPUSH
26051: LD_VAR 0 3
26055: PPUSH
26056: LD_INT 1
26058: PPUSH
26059: CALL_OW 324
26063: GO 26043
26065: POP
26066: POP
// end ; end ; end ;
26067: GO 22072
26069: POP
26070: POP
// end ; end_of_file
26071: LD_VAR 0 2
26075: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
26076: LD_INT 0
26078: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
26079: LD_VAR 0 1
26083: PPUSH
26084: LD_VAR 0 2
26088: PPUSH
26089: LD_VAR 0 3
26093: PPUSH
26094: LD_INT 0
26096: PPUSH
26097: CALL 26106 0 4
// end ;
26101: LD_VAR 0 4
26105: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
26106: LD_INT 0
26108: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
26109: LD_STRING initScore({
26111: PUSH
26112: LD_VAR 0 1
26116: PUSH
26117: LD_INT 1
26119: ARRAY
26120: STR
26121: PUSH
26122: LD_STRING ,
26124: STR
26125: PUSH
26126: LD_VAR 0 1
26130: PUSH
26131: LD_INT 2
26133: ARRAY
26134: STR
26135: PUSH
26136: LD_STRING ,
26138: STR
26139: PUSH
26140: LD_VAR 0 1
26144: PUSH
26145: LD_INT 3
26147: ARRAY
26148: STR
26149: PUSH
26150: LD_STRING ,
26152: STR
26153: PUSH
26154: LD_VAR 0 1
26158: PUSH
26159: LD_INT 4
26161: ARRAY
26162: STR
26163: PUSH
26164: LD_STRING ,
26166: STR
26167: PUSH
26168: LD_VAR 0 1
26172: PUSH
26173: LD_INT 5
26175: ARRAY
26176: STR
26177: PUSH
26178: LD_STRING ,
26180: STR
26181: PUSH
26182: LD_VAR 0 1
26186: PUSH
26187: LD_INT 6
26189: ARRAY
26190: STR
26191: PUSH
26192: LD_STRING ,
26194: STR
26195: PUSH
26196: LD_VAR 0 1
26200: PUSH
26201: LD_INT 7
26203: ARRAY
26204: STR
26205: PUSH
26206: LD_STRING ,
26208: STR
26209: PUSH
26210: LD_VAR 0 1
26214: PUSH
26215: LD_INT 8
26217: ARRAY
26218: STR
26219: PUSH
26220: LD_STRING },
26222: STR
26223: PUSH
26224: LD_VAR 0 2
26228: STR
26229: PUSH
26230: LD_STRING ,
26232: STR
26233: PUSH
26234: LD_VAR 0 3
26238: STR
26239: PUSH
26240: LD_STRING ,
26242: STR
26243: PUSH
26244: LD_VAR 0 4
26248: STR
26249: PUSH
26250: LD_STRING );
26252: STR
26253: PPUSH
26254: CALL_OW 559
// end ;
26258: LD_VAR 0 5
26262: RET
// export function LScore_Reset ( ) ; begin
26263: LD_INT 0
26265: PPUSH
// ToLua ( ResetScorebar(); ) ;
26266: LD_STRING ResetScorebar();
26268: PPUSH
26269: CALL_OW 559
// end ;
26273: LD_VAR 0 1
26277: RET
// export function LScore_Delete ( ID ) ; begin
26278: LD_INT 0
26280: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
26281: LD_STRING deleteScore(
26283: PUSH
26284: LD_VAR 0 1
26288: STR
26289: PUSH
26290: LD_STRING );
26292: STR
26293: PPUSH
26294: CALL_OW 559
// end ;
26298: LD_VAR 0 2
26302: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
26303: LD_INT 0
26305: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
26306: LD_STRING AST(
26308: PUSH
26309: LD_VAR 0 1
26313: STR
26314: PUSH
26315: LD_STRING ,
26317: STR
26318: PUSH
26319: LD_VAR 0 2
26323: STR
26324: PUSH
26325: LD_STRING ,
26327: STR
26328: PUSH
26329: LD_VAR 0 3
26333: STR
26334: PUSH
26335: LD_STRING ,);
26337: STR
26338: PPUSH
26339: CALL_OW 559
// end ;
26343: LD_VAR 0 4
26347: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
26348: LD_INT 0
26350: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
26351: LD_STRING AST(
26353: PUSH
26354: LD_VAR 0 1
26358: STR
26359: PUSH
26360: LD_STRING ,
26362: STR
26363: PUSH
26364: LD_VAR 0 2
26368: STR
26369: PUSH
26370: LD_STRING ,
26372: STR
26373: PUSH
26374: LD_VAR 0 3
26378: STR
26379: PUSH
26380: LD_STRING ,
26382: STR
26383: PUSH
26384: LD_VAR 0 4
26388: STR
26389: PUSH
26390: LD_STRING );
26392: STR
26393: PPUSH
26394: CALL_OW 559
// end ;
26398: LD_VAR 0 5
26402: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
26403: LD_INT 0
26405: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
26406: LD_STRING AST(
26408: PUSH
26409: LD_VAR 0 1
26413: STR
26414: PUSH
26415: LD_STRING ,
26417: STR
26418: PUSH
26419: LD_VAR 0 2
26423: STR
26424: PUSH
26425: LD_STRING ,
26427: STR
26428: PUSH
26429: LD_VAR 0 3
26433: STR
26434: PUSH
26435: LD_STRING ,
26437: STR
26438: PUSH
26439: LD_VAR 0 4
26443: STR
26444: PUSH
26445: LD_STRING ,
26447: STR
26448: PUSH
26449: LD_VAR 0 5
26453: STR
26454: PUSH
26455: LD_STRING );
26457: STR
26458: PPUSH
26459: CALL_OW 559
// end ;
26463: LD_VAR 0 6
26467: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
26468: LD_INT 0
26470: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
26471: LD_STRING ASRT(
26473: PUSH
26474: LD_VAR 0 1
26478: STR
26479: PUSH
26480: LD_STRING ,
26482: STR
26483: PUSH
26484: LD_VAR 0 2
26488: STR
26489: PUSH
26490: LD_STRING ,
26492: STR
26493: PUSH
26494: LD_VAR 0 3
26498: STR
26499: PUSH
26500: LD_STRING ,);
26502: STR
26503: PPUSH
26504: CALL_OW 559
// end ;
26508: LD_VAR 0 4
26512: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
26513: LD_INT 0
26515: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
26516: LD_STRING ASRT(
26518: PUSH
26519: LD_VAR 0 1
26523: STR
26524: PUSH
26525: LD_STRING ,
26527: STR
26528: PUSH
26529: LD_VAR 0 2
26533: STR
26534: PUSH
26535: LD_STRING ,
26537: STR
26538: PUSH
26539: LD_VAR 0 3
26543: STR
26544: PUSH
26545: LD_STRING ,
26547: STR
26548: PUSH
26549: LD_VAR 0 4
26553: STR
26554: PUSH
26555: LD_STRING );
26557: STR
26558: PPUSH
26559: CALL_OW 559
// end ;
26563: LD_VAR 0 5
26567: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
26568: LD_INT 0
26570: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
26571: LD_STRING ASRT(
26573: PUSH
26574: LD_VAR 0 1
26578: STR
26579: PUSH
26580: LD_STRING ,
26582: STR
26583: PUSH
26584: LD_VAR 0 2
26588: STR
26589: PUSH
26590: LD_STRING ,
26592: STR
26593: PUSH
26594: LD_VAR 0 3
26598: STR
26599: PUSH
26600: LD_STRING ,
26602: STR
26603: PUSH
26604: LD_VAR 0 4
26608: STR
26609: PUSH
26610: LD_STRING ,
26612: STR
26613: PUSH
26614: LD_VAR 0 5
26618: STR
26619: PUSH
26620: LD_STRING );
26622: STR
26623: PPUSH
26624: CALL_OW 559
// end ;
26628: LD_VAR 0 6
26632: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
26633: LD_INT 0
26635: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
26636: LD_STRING UST(
26638: PUSH
26639: LD_VAR 0 1
26643: STR
26644: PUSH
26645: LD_STRING ,
26647: STR
26648: PUSH
26649: LD_VAR 0 2
26653: STR
26654: PUSH
26655: LD_STRING );
26657: STR
26658: PPUSH
26659: CALL_OW 559
// end ;
26663: LD_VAR 0 3
26667: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
26668: LD_INT 0
26670: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
26671: LD_STRING UST(
26673: PUSH
26674: LD_VAR 0 1
26678: STR
26679: PUSH
26680: LD_STRING ,
26682: STR
26683: PUSH
26684: LD_VAR 0 2
26688: STR
26689: PUSH
26690: LD_STRING ,
26692: STR
26693: PUSH
26694: LD_VAR 0 3
26698: STR
26699: PUSH
26700: LD_STRING );
26702: STR
26703: PPUSH
26704: CALL_OW 559
// end ;
26708: LD_VAR 0 4
26712: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
26713: LD_INT 0
26715: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
26716: LD_STRING CCST(
26718: PUSH
26719: LD_VAR 0 1
26723: STR
26724: PUSH
26725: LD_STRING ,{
26727: STR
26728: PUSH
26729: LD_VAR 0 2
26733: STR
26734: PUSH
26735: LD_STRING ,
26737: STR
26738: PUSH
26739: LD_VAR 0 3
26743: STR
26744: PUSH
26745: LD_STRING ,
26747: STR
26748: PUSH
26749: LD_VAR 0 4
26753: STR
26754: PUSH
26755: LD_STRING });
26757: STR
26758: PPUSH
26759: CALL_OW 559
// end ;
26763: LD_VAR 0 5
26767: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
26768: LD_INT 0
26770: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
26771: LD_STRING CCST(
26773: PUSH
26774: LD_VAR 0 1
26778: STR
26779: PUSH
26780: LD_STRING ,
26782: STR
26783: PUSH
26784: LD_VAR 0 2
26788: STR
26789: PUSH
26790: LD_STRING );
26792: STR
26793: PPUSH
26794: CALL_OW 559
// end ;
26798: LD_VAR 0 3
26802: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
26803: LD_INT 0
26805: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
26806: LD_STRING ASSP(
26808: PUSH
26809: LD_VAR 0 1
26813: STR
26814: PUSH
26815: LD_STRING ,
26817: STR
26818: PUSH
26819: LD_VAR 0 2
26823: STR
26824: PUSH
26825: LD_STRING ,
26827: STR
26828: PUSH
26829: LD_VAR 0 3
26833: STR
26834: PUSH
26835: LD_STRING ,);
26837: STR
26838: PPUSH
26839: CALL_OW 559
// end ;
26843: LD_VAR 0 4
26847: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
26848: LD_INT 0
26850: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
26851: LD_STRING ASSP(
26853: PUSH
26854: LD_VAR 0 1
26858: STR
26859: PUSH
26860: LD_STRING ,
26862: STR
26863: PUSH
26864: LD_VAR 0 2
26868: STR
26869: PUSH
26870: LD_STRING ,
26872: STR
26873: PUSH
26874: LD_VAR 0 3
26878: STR
26879: PUSH
26880: LD_STRING ,
26882: STR
26883: PUSH
26884: LD_VAR 0 4
26888: STR
26889: PUSH
26890: LD_STRING );
26892: STR
26893: PPUSH
26894: CALL_OW 559
// end ;
26898: LD_VAR 0 5
26902: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
26903: LD_INT 0
26905: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
26906: LD_STRING ASSP(
26908: PUSH
26909: LD_VAR 0 1
26913: STR
26914: PUSH
26915: LD_STRING ,
26917: STR
26918: PUSH
26919: LD_VAR 0 2
26923: STR
26924: PUSH
26925: LD_STRING ,
26927: STR
26928: PUSH
26929: LD_VAR 0 3
26933: STR
26934: PUSH
26935: LD_STRING ,
26937: STR
26938: PUSH
26939: LD_VAR 0 4
26943: STR
26944: PUSH
26945: LD_STRING ,
26947: STR
26948: PUSH
26949: LD_VAR 0 5
26953: STR
26954: PUSH
26955: LD_STRING );
26957: STR
26958: PPUSH
26959: CALL_OW 559
// end ;
26963: LD_VAR 0 6
26967: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
26968: LD_INT 0
26970: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
26971: LD_STRING ASRSP(
26973: PUSH
26974: LD_VAR 0 1
26978: STR
26979: PUSH
26980: LD_STRING ,
26982: STR
26983: PUSH
26984: LD_VAR 0 2
26988: STR
26989: PUSH
26990: LD_STRING ,
26992: STR
26993: PUSH
26994: LD_VAR 0 3
26998: STR
26999: PUSH
27000: LD_STRING ,);
27002: STR
27003: PPUSH
27004: CALL_OW 559
// end ;
27008: LD_VAR 0 4
27012: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
27013: LD_INT 0
27015: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
27016: LD_STRING ASRSP(
27018: PUSH
27019: LD_VAR 0 1
27023: STR
27024: PUSH
27025: LD_STRING ,
27027: STR
27028: PUSH
27029: LD_VAR 0 2
27033: STR
27034: PUSH
27035: LD_STRING ,
27037: STR
27038: PUSH
27039: LD_VAR 0 3
27043: STR
27044: PUSH
27045: LD_STRING ,
27047: STR
27048: PUSH
27049: LD_VAR 0 4
27053: STR
27054: PUSH
27055: LD_STRING );
27057: STR
27058: PPUSH
27059: CALL_OW 559
// end ;
27063: LD_VAR 0 5
27067: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
27068: LD_INT 0
27070: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
27071: LD_STRING ASRSP(
27073: PUSH
27074: LD_VAR 0 1
27078: STR
27079: PUSH
27080: LD_STRING ,
27082: STR
27083: PUSH
27084: LD_VAR 0 2
27088: STR
27089: PUSH
27090: LD_STRING ,
27092: STR
27093: PUSH
27094: LD_VAR 0 3
27098: STR
27099: PUSH
27100: LD_STRING ,
27102: STR
27103: PUSH
27104: LD_VAR 0 4
27108: STR
27109: PUSH
27110: LD_STRING ,
27112: STR
27113: PUSH
27114: LD_VAR 0 5
27118: STR
27119: PUSH
27120: LD_STRING );
27122: STR
27123: PPUSH
27124: CALL_OW 559
// end ;
27128: LD_VAR 0 6
27132: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
27133: LD_INT 0
27135: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
27136: LD_STRING USSP(
27138: PUSH
27139: LD_VAR 0 1
27143: STR
27144: PUSH
27145: LD_STRING ,
27147: STR
27148: PUSH
27149: LD_VAR 0 2
27153: STR
27154: PUSH
27155: LD_STRING );
27157: STR
27158: PPUSH
27159: CALL_OW 559
// end ;
27163: LD_VAR 0 3
27167: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
27168: LD_INT 0
27170: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
27171: LD_STRING USSP(
27173: PUSH
27174: LD_VAR 0 1
27178: STR
27179: PUSH
27180: LD_STRING ,
27182: STR
27183: PUSH
27184: LD_VAR 0 2
27188: STR
27189: PUSH
27190: LD_STRING ,
27192: STR
27193: PUSH
27194: LD_VAR 0 3
27198: STR
27199: PUSH
27200: LD_STRING );
27202: STR
27203: PPUSH
27204: CALL_OW 559
// end ;
27208: LD_VAR 0 4
27212: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
27213: LD_INT 0
27215: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
27216: LD_STRING CCSSP(
27218: PUSH
27219: LD_VAR 0 1
27223: STR
27224: PUSH
27225: LD_STRING ,{
27227: STR
27228: PUSH
27229: LD_VAR 0 2
27233: STR
27234: PUSH
27235: LD_STRING ,
27237: STR
27238: PUSH
27239: LD_VAR 0 3
27243: STR
27244: PUSH
27245: LD_STRING ,
27247: STR
27248: PUSH
27249: LD_VAR 0 4
27253: STR
27254: PUSH
27255: LD_STRING });
27257: STR
27258: PPUSH
27259: CALL_OW 559
// end ;
27263: LD_VAR 0 5
27267: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
27268: LD_INT 0
27270: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
27271: LD_STRING CCSSP(
27273: PUSH
27274: LD_VAR 0 1
27278: STR
27279: PUSH
27280: LD_STRING ,
27282: STR
27283: PUSH
27284: LD_VAR 0 2
27288: STR
27289: PUSH
27290: LD_STRING );
27292: STR
27293: PPUSH
27294: CALL_OW 559
// end ;
27298: LD_VAR 0 3
27302: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
27303: LD_INT 0
27305: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
27306: LD_STRING ASP(
27308: PUSH
27309: LD_VAR 0 1
27313: STR
27314: PUSH
27315: LD_STRING ,
27317: STR
27318: PUSH
27319: LD_VAR 0 2
27323: STR
27324: PUSH
27325: LD_STRING ,
27327: STR
27328: PUSH
27329: LD_VAR 0 3
27333: STR
27334: PUSH
27335: LD_STRING );
27337: STR
27338: PPUSH
27339: CALL_OW 559
// end ;
27343: LD_VAR 0 4
27347: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
27348: LD_INT 0
27350: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
27351: LD_STRING USP(
27353: PUSH
27354: LD_VAR 0 1
27358: STR
27359: PUSH
27360: LD_STRING ,
27362: STR
27363: PUSH
27364: LD_VAR 0 2
27368: STR
27369: PUSH
27370: LD_STRING ,
27372: STR
27373: PUSH
27374: LD_VAR 0 3
27378: STR
27379: PUSH
27380: LD_STRING );
27382: STR
27383: PPUSH
27384: CALL_OW 559
// end ;
27388: LD_VAR 0 4
27392: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
27393: LD_INT 0
27395: PPUSH
27396: PPUSH
// for i = 1 to 8 do
27397: LD_ADDR_VAR 0 4
27401: PUSH
27402: DOUBLE
27403: LD_INT 1
27405: DEC
27406: ST_TO_ADDR
27407: LD_INT 8
27409: PUSH
27410: FOR_TO
27411: IFFALSE 27458
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
27413: LD_STRING USP(
27415: PUSH
27416: LD_VAR 0 1
27420: STR
27421: PUSH
27422: LD_STRING ,
27424: STR
27425: PUSH
27426: LD_VAR 0 4
27430: STR
27431: PUSH
27432: LD_STRING ,
27434: STR
27435: PUSH
27436: LD_VAR 0 2
27440: PUSH
27441: LD_VAR 0 4
27445: ARRAY
27446: STR
27447: PUSH
27448: LD_STRING );
27450: STR
27451: PPUSH
27452: CALL_OW 559
27456: GO 27410
27458: POP
27459: POP
// end ;
27460: LD_VAR 0 3
27464: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
27465: LD_INT 0
27467: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
27468: LD_STRING ASC(
27470: PUSH
27471: LD_VAR 0 1
27475: STR
27476: PUSH
27477: LD_STRING ,
27479: STR
27480: PUSH
27481: LD_VAR 0 2
27485: STR
27486: PUSH
27487: LD_STRING ,
27489: STR
27490: PUSH
27491: LD_VAR 0 3
27495: STR
27496: PUSH
27497: LD_STRING ,
27499: STR
27500: PUSH
27501: LD_VAR 0 4
27505: STR
27506: PUSH
27507: LD_STRING );
27509: STR
27510: PPUSH
27511: CALL_OW 559
// end ;
27515: LD_VAR 0 5
27519: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
27520: LD_INT 0
27522: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
27523: LD_STRING USC(
27525: PUSH
27526: LD_VAR 0 1
27530: STR
27531: PUSH
27532: LD_STRING ,{
27534: STR
27535: PUSH
27536: LD_VAR 0 2
27540: PUSH
27541: LD_INT 1
27543: ARRAY
27544: STR
27545: PUSH
27546: LD_STRING ,
27548: STR
27549: PUSH
27550: LD_VAR 0 2
27554: PUSH
27555: LD_INT 2
27557: ARRAY
27558: STR
27559: PUSH
27560: LD_STRING ,
27562: STR
27563: PUSH
27564: LD_VAR 0 2
27568: PUSH
27569: LD_INT 3
27571: ARRAY
27572: STR
27573: PUSH
27574: LD_STRING ,
27576: STR
27577: PUSH
27578: LD_VAR 0 2
27582: PUSH
27583: LD_INT 4
27585: ARRAY
27586: STR
27587: PUSH
27588: LD_STRING ,
27590: STR
27591: PUSH
27592: LD_VAR 0 2
27596: PUSH
27597: LD_INT 5
27599: ARRAY
27600: STR
27601: PUSH
27602: LD_STRING ,
27604: STR
27605: PUSH
27606: LD_VAR 0 2
27610: PUSH
27611: LD_INT 6
27613: ARRAY
27614: STR
27615: PUSH
27616: LD_STRING ,
27618: STR
27619: PUSH
27620: LD_VAR 0 2
27624: PUSH
27625: LD_INT 7
27627: ARRAY
27628: STR
27629: PUSH
27630: LD_STRING ,
27632: STR
27633: PUSH
27634: LD_VAR 0 2
27638: PUSH
27639: LD_INT 8
27641: ARRAY
27642: STR
27643: PUSH
27644: LD_STRING });
27646: STR
27647: PPUSH
27648: CALL_OW 559
// end ;
27652: LD_VAR 0 3
27656: RET
