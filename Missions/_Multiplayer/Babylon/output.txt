// export def_artefact_one , def_artefact_two , def_artefact_three , def_artefact_two_using , def_kings_age , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules , final_count ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game , Side_Comps ; export player_side , player_team ; export depot_def , breastworks_def , start_def , extra_oil_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 46
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 23
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 21
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 24
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 26
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 22
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 330
// begin Game_Type := 2 ;
 151: LD_ADDR_EXP 46
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// Your_Side := 4 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 4
 166: ST_TO_ADDR
// Side_Positions := [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 167: LD_ADDR_EXP 23
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 3
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: LD_INT 1
 183: PUSH
 184: LD_INT 0
 186: PUSH
 187: LD_INT 2
 189: PUSH
 190: LD_INT 4
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 206: LD_ADDR_EXP 21
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: LD_INT 0
 219: PUSH
 220: LD_INT 0
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: LD_INT 0
 228: PUSH
 229: LD_INT 0
 231: PUSH
 232: LD_INT 0
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 245: LD_ADDR_EXP 24
 249: PUSH
 250: LD_INT 0
 252: PUSH
 253: LD_INT 3
 255: PUSH
 256: LD_INT 0
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 0
 264: PUSH
 265: LD_INT 1
 267: PUSH
 268: LD_INT 3
 270: PUSH
 271: LD_INT 0
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 26
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ ] ;
 323: LD_ADDR_EXP 22
 327: PUSH
 328: EMPTY
 329: ST_TO_ADDR
// end ; player_side = your_side ;
 330: LD_ADDR_EXP 27
 334: PUSH
 335: LD_OWVAR 2
 339: ST_TO_ADDR
// player_team = Side_Teams [ your_side ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_EXP 21
 349: PUSH
 350: LD_OWVAR 2
 354: ARRAY
 355: ST_TO_ADDR
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 356: LD_ADDR_EXP 25
 360: PUSH
 361: LD_EXP 21
 365: PUSH
 366: LD_INT 0
 368: PUSH
 369: EMPTY
 370: LIST
 371: DIFF
 372: PUSH
 373: LD_INT 1
 375: GREATER
 376: ST_TO_ADDR
// if Multiplayer then
 377: LD_OWVAR 4
 381: IFFALSE 653
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 383: LD_ADDR_EXP 48
 387: PUSH
 388: LD_INT 0
 390: PPUSH
 391: CALL_OW 426
 395: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 396: LD_ADDR_EXP 49
 400: PUSH
 401: LD_INT 1
 403: PPUSH
 404: CALL_OW 426
 408: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 409: LD_ADDR_EXP 50
 413: PUSH
 414: LD_INT 2
 416: PPUSH
 417: CALL_OW 426
 421: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 422: LD_ADDR_EXP 51
 426: PUSH
 427: LD_INT 3
 429: PPUSH
 430: CALL_OW 426
 434: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 435: LD_ADDR_EXP 52
 439: PUSH
 440: LD_INT 4
 442: PPUSH
 443: CALL_OW 426
 447: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 448: LD_ADDR_EXP 53
 452: PUSH
 453: LD_INT 5
 455: PPUSH
 456: CALL_OW 426
 460: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 461: LD_ADDR_EXP 55
 465: PUSH
 466: LD_INT 10
 468: PPUSH
 469: CALL_OW 426
 473: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 474: LD_ADDR_EXP 56
 478: PUSH
 479: LD_INT 11
 481: PPUSH
 482: CALL_OW 426
 486: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 487: LD_ADDR_EXP 57
 491: PUSH
 492: LD_INT 12
 494: PPUSH
 495: CALL_OW 426
 499: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 13 ) ;
 500: LD_ADDR_EXP 59
 504: PUSH
 505: LD_INT 13
 507: PPUSH
 508: CALL_OW 426
 512: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 14 ) ;
 513: LD_ADDR_EXP 58
 517: PUSH
 518: LD_INT 14
 520: PPUSH
 521: CALL_OW 426
 525: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 15 ) ;
 526: LD_ADDR_EXP 60
 530: PUSH
 531: LD_INT 15
 533: PPUSH
 534: CALL_OW 426
 538: ST_TO_ADDR
// def_artefact_one := GetMultiplayerSetting ( 6 ) ;
 539: LD_ADDR_EXP 1
 543: PUSH
 544: LD_INT 6
 546: PPUSH
 547: CALL_OW 426
 551: ST_TO_ADDR
// def_artefact_two := GetMultiplayerSetting ( 7 ) ;
 552: LD_ADDR_EXP 2
 556: PUSH
 557: LD_INT 7
 559: PPUSH
 560: CALL_OW 426
 564: ST_TO_ADDR
// def_artefact_two_using := GetMultiplayerSetting ( 8 ) ;
 565: LD_ADDR_EXP 4
 569: PUSH
 570: LD_INT 8
 572: PPUSH
 573: CALL_OW 426
 577: ST_TO_ADDR
// def_artefact_three := GetMultiplayerSetting ( 9 ) ;
 578: LD_ADDR_EXP 3
 582: PUSH
 583: LD_INT 9
 585: PPUSH
 586: CALL_OW 426
 590: ST_TO_ADDR
// def_kings_age := GetMultiplayerSetting ( 16 ) ;
 591: LD_ADDR_EXP 5
 595: PUSH
 596: LD_INT 16
 598: PPUSH
 599: CALL_OW 426
 603: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 17 ) ;
 604: LD_ADDR_EXP 6
 608: PUSH
 609: LD_INT 17
 611: PPUSH
 612: CALL_OW 426
 616: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 617: LD_ADDR_EXP 61
 621: PUSH
 622: LD_INT 20
 624: PPUSH
 625: CALL_OW 426
 629: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 630: LD_ADDR_VAR 0 3
 634: PUSH
 635: LD_INT 22
 637: PPUSH
 638: CALL_OW 426
 642: ST_TO_ADDR
// def_win_rules = 0 ;
 643: LD_ADDR_EXP 19
 647: PUSH
 648: LD_INT 0
 650: ST_TO_ADDR
// end else
 651: GO 825
// begin Randomize ;
 653: CALL_OW 10
// def_base_level := 2 ;
 657: LD_ADDR_EXP 48
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_amount_of_people := 10 ;
 665: LD_ADDR_EXP 49
 669: PUSH
 670: LD_INT 10
 672: ST_TO_ADDR
// def_skill_level := 1 ;
 673: LD_ADDR_EXP 50
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_starting_resources := 2 ;
 681: LD_ADDR_EXP 51
 685: PUSH
 686: LD_INT 2
 688: ST_TO_ADDR
// def_shipments_density := 50 ;
 689: LD_ADDR_EXP 52
 693: PUSH
 694: LD_INT 50
 696: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 697: LD_ADDR_EXP 53
 701: PUSH
 702: LD_INT 0
 704: ST_TO_ADDR
// def_shared_vision := 1 ;
 705: LD_ADDR_EXP 55
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_morale_flags := 1 ;
 713: LD_ADDR_EXP 56
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// def_siberite_detection := 1 ;
 721: LD_ADDR_EXP 57
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 729: LD_ADDR_EXP 59
 733: PUSH
 734: LD_INT 3
 736: ST_TO_ADDR
// def_people_respawning := 2 ;
 737: LD_ADDR_EXP 58
 741: PUSH
 742: LD_INT 2
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 60
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_artefact_one := 1 ;
 753: LD_ADDR_EXP 1
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_artefact_two := 1 ;
 761: LD_ADDR_EXP 2
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// def_artefact_two_using := 2 ;
 769: LD_ADDR_EXP 4
 773: PUSH
 774: LD_INT 2
 776: ST_TO_ADDR
// def_artefact_three := 1 ;
 777: LD_ADDR_EXP 3
 781: PUSH
 782: LD_INT 1
 784: ST_TO_ADDR
// def_kings_age := 1 ;
 785: LD_ADDR_EXP 5
 789: PUSH
 790: LD_INT 1
 792: ST_TO_ADDR
// def_public_score := 0 ;
 793: LD_ADDR_EXP 6
 797: PUSH
 798: LD_INT 0
 800: ST_TO_ADDR
// def_builduptime := 1 ;
 801: LD_ADDR_EXP 61
 805: PUSH
 806: LD_INT 1
 808: ST_TO_ADDR
// tech_level = 4 ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// def_win_rules = 0 ;
 817: LD_ADDR_EXP 19
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// end ; InitGameRules ;
 825: CALL 12940 0 0
// if def_game_rules = 0 then
 829: LD_EXP 47
 833: PUSH
 834: LD_INT 0
 836: EQUAL
 837: IFFALSE 864
// begin if isSGUI then
 839: LD_OWVAR 83
 843: IFFALSE 851
// setMpTechs ( ) else
 845: CALL 20691 0 0
 849: GO 864
// begin SetMpTechLevel ( tech_level + 1 ) ;
 851: LD_VAR 0 3
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: PPUSH
 860: CALL 20838 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
 864: LD_ADDR_EXP 7
 868: PUSH
 869: LD_INT 0
 871: PUSH
 872: LD_INT 1
 874: PUSH
 875: LD_INT 1
 877: PUSH
 878: LD_INT 1
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: PUSH
 887: LD_EXP 48
 891: PUSH
 892: LD_INT 1
 894: PLUS
 895: ARRAY
 896: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 2 , 3 ] [ def_base_level + 1 ] ;
 897: LD_ADDR_EXP 8
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: LD_INT 2
 910: PUSH
 911: LD_INT 3
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_EXP 48
 924: PUSH
 925: LD_INT 1
 927: PLUS
 928: ARRAY
 929: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
 930: LD_ADDR_EXP 9
 934: PUSH
 935: LD_EXP 49
 939: PUSH
 940: LD_INT 4
 942: PLUS
 943: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 944: LD_ADDR_EXP 10
 948: PUSH
 949: LD_INT 2
 951: PUSH
 952: LD_INT 3
 954: PUSH
 955: LD_INT 4
 957: PUSH
 958: LD_INT 5
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: LIST
 965: LIST
 966: PUSH
 967: LD_EXP 50
 971: PUSH
 972: LD_INT 1
 974: PLUS
 975: ARRAY
 976: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 977: LD_ADDR_EXP 12
 981: PUSH
 982: LD_INT 0
 984: PUSH
 985: LD_INT 0
 987: PUSH
 988: LD_INT 0
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: LD_INT 0
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 50
1012: PUSH
1013: LD_INT 20
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 40
1029: PUSH
1030: LD_INT 20
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: LD_EXP 51
1048: PUSH
1049: LD_INT 1
1051: PLUS
1052: ARRAY
1053: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1054: LD_ADDR_EXP 11
1058: PUSH
1059: LD_INT 10
1061: PUSH
1062: EMPTY
1063: LIST
1064: PUSH
1065: LD_INT 7
1067: PUSH
1068: LD_INT 14
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: LD_INT 6
1077: PUSH
1078: LD_INT 12
1080: PUSH
1081: LD_INT 18
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: PUSH
1089: LD_INT 5
1091: PUSH
1092: LD_INT 10
1094: PUSH
1095: LD_INT 15
1097: PUSH
1098: LD_INT 20
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_EXP 51
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: ARRAY
1122: ST_TO_ADDR
// shipments_density := 150 - ( def_shipments_density + 1 ) ;
1123: LD_ADDR_EXP 13
1127: PUSH
1128: LD_INT 150
1130: PUSH
1131: LD_EXP 52
1135: PUSH
1136: LD_INT 1
1138: PLUS
1139: MINUS
1140: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1141: LD_ADDR_EXP 15
1145: PUSH
1146: LD_INT 0
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: LD_INT 2
1154: PUSH
1155: LD_INT 3
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: LIST
1162: LIST
1163: PUSH
1164: LD_EXP 59
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 6 6$00 , 1 1$00 ] [ def_people_respawning + 1 ] ;
1174: LD_ADDR_EXP 16
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 12600
1184: PUSH
1185: LD_INT 2100
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_EXP 58
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1203: LD_ADDR_EXP 17
1207: PUSH
1208: LD_INT 0
1210: PUSH
1211: LD_INT 21000
1213: PUSH
1214: LD_INT 4200
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: LIST
1221: PUSH
1222: LD_EXP 58
1226: PUSH
1227: LD_INT 1
1229: PLUS
1230: ARRAY
1231: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1232: LD_ADDR_EXP 14
1236: PUSH
1237: LD_INT 1
1239: NEG
1240: PUSH
1241: LD_INT 350
1243: PUSH
1244: LD_INT 700
1246: PUSH
1247: LD_INT 1400
1249: PUSH
1250: LD_INT 0
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 56
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// battle_flags_id := [ ] ;
1270: LD_ADDR_EXP 33
1274: PUSH
1275: EMPTY
1276: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1277: LD_ADDR_EXP 18
1281: PUSH
1282: LD_INT 0
1284: PUSH
1285: LD_INT 1
1287: PUSH
1288: LD_INT 63000
1290: PUSH
1291: LD_INT 126000
1293: PUSH
1294: LD_INT 189000
1296: PUSH
1297: LD_INT 252000
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: PUSH
1308: LD_EXP 60
1312: PUSH
1313: LD_INT 1
1315: PLUS
1316: ARRAY
1317: ST_TO_ADDR
// final_count = [ 500 , 1000 , 1500 , 2000 ] [ def_kings_age + 1 ] ;
1318: LD_ADDR_EXP 20
1322: PUSH
1323: LD_INT 500
1325: PUSH
1326: LD_INT 1000
1328: PUSH
1329: LD_INT 1500
1331: PUSH
1332: LD_INT 2000
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 5
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1351: LD_EXP 60
1355: PUSH
1356: LD_INT 0
1358: EQUAL
1359: IFFALSE 1371
// siberite_bomb_Delay = 0 else
1361: LD_ADDR_EXP 18
1365: PUSH
1366: LD_INT 0
1368: ST_TO_ADDR
1369: GO 1393
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1371: LD_ADDR_EXP 18
1375: PUSH
1376: LD_EXP 60
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: LD_INT 21000
1387: MUL
1388: PUSH
1389: LD_INT 1
1391: PLUS
1392: ST_TO_ADDR
// end ;
1393: LD_VAR 0 1
1397: RET
// function init_map ; var i ; begin
1398: LD_INT 0
1400: PPUSH
1401: PPUSH
// extra_oil_deposits_locations := [ [ 43 , 9 ] , [ 123 , 10 ] , [ 113 , 155 ] , [ 186 , 133 ] ] ;
1402: LD_ADDR_EXP 32
1406: PUSH
1407: LD_INT 43
1409: PUSH
1410: LD_INT 9
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 123
1419: PUSH
1420: LD_INT 10
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: LD_INT 113
1429: PUSH
1430: LD_INT 155
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PUSH
1437: LD_INT 186
1439: PUSH
1440: LD_INT 133
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: ST_TO_ADDR
// depot_def := [ [ 18 , 17 , 2 ] , [ 156 , 20 , 3 ] , [ 83 , 140 , 1 ] , [ 216 , 143 , 5 ] ] ;
1453: LD_ADDR_EXP 29
1457: PUSH
1458: LD_INT 18
1460: PUSH
1461: LD_INT 17
1463: PUSH
1464: LD_INT 2
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 156
1474: PUSH
1475: LD_INT 20
1477: PUSH
1478: LD_INT 3
1480: PUSH
1481: EMPTY
1482: LIST
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 83
1488: PUSH
1489: LD_INT 140
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 216
1502: PUSH
1503: LD_INT 143
1505: PUSH
1506: LD_INT 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: ST_TO_ADDR
// for i in depot_def do
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: LD_EXP 29
1529: PUSH
1530: FOR_IN
1531: IFFALSE 1605
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , 6 ) , ShiftY ( i [ 2 ] , i [ 3 ] , 6 ) ] ] ;
1533: LD_ADDR_EXP 31
1537: PUSH
1538: LD_EXP 31
1542: PUSH
1543: LD_VAR 0 2
1547: PUSH
1548: LD_INT 1
1550: ARRAY
1551: PPUSH
1552: LD_VAR 0 2
1556: PUSH
1557: LD_INT 3
1559: ARRAY
1560: PPUSH
1561: LD_INT 6
1563: PPUSH
1564: CALL_OW 272
1568: PUSH
1569: LD_VAR 0 2
1573: PUSH
1574: LD_INT 2
1576: ARRAY
1577: PPUSH
1578: LD_VAR 0 2
1582: PUSH
1583: LD_INT 3
1585: ARRAY
1586: PPUSH
1587: LD_INT 6
1589: PPUSH
1590: CALL_OW 273
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: EMPTY
1600: LIST
1601: ADD
1602: ST_TO_ADDR
1603: GO 1530
1605: POP
1606: POP
// breastworks_def := [ [ [ 30 , 36 , 0 ] , [ 44 , 21 , 4 ] , [ 43 , 33 , 5 ] ] , [ [ 165 , 34 , 0 ] , [ 137 , 18 , 1 ] , [ 153 , 37 , 0 ] ] , [ [ 86 , 120 , 3 ] , [ 105 , 147 , 4 ] , [ 68 , 118 , 2 ] ] , [ [ 199 , 144 , 1 ] , [ 207 , 119 , 3 ] , [ 195 , 118 , 2 ] ] , ] ;
1607: LD_ADDR_EXP 30
1611: PUSH
1612: LD_INT 30
1614: PUSH
1615: LD_INT 36
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 44
1628: PUSH
1629: LD_INT 21
1631: PUSH
1632: LD_INT 4
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 43
1642: PUSH
1643: LD_INT 33
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: LIST
1658: PUSH
1659: LD_INT 165
1661: PUSH
1662: LD_INT 34
1664: PUSH
1665: LD_INT 0
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 137
1675: PUSH
1676: LD_INT 18
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 153
1689: PUSH
1690: LD_INT 37
1692: PUSH
1693: LD_INT 0
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 86
1708: PUSH
1709: LD_INT 120
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 105
1722: PUSH
1723: LD_INT 147
1725: PUSH
1726: LD_INT 4
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: PUSH
1734: LD_INT 68
1736: PUSH
1737: LD_INT 118
1739: PUSH
1740: LD_INT 2
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: LIST
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 199
1755: PUSH
1756: LD_INT 144
1758: PUSH
1759: LD_INT 1
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: LIST
1766: PUSH
1767: LD_INT 207
1769: PUSH
1770: LD_INT 119
1772: PUSH
1773: LD_INT 3
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: LIST
1780: PUSH
1781: LD_INT 195
1783: PUSH
1784: LD_INT 118
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: ST_TO_ADDR
// if not def_extra_oil_deposits then
1806: LD_EXP 53
1810: NOT
1811: IFFALSE 1852
// for i in extra_oil_deposits_locations do
1813: LD_ADDR_VAR 0 2
1817: PUSH
1818: LD_EXP 32
1822: PUSH
1823: FOR_IN
1824: IFFALSE 1850
// RemoveDepositXY ( i [ 1 ] , i [ 2 ] ) ;
1826: LD_VAR 0 2
1830: PUSH
1831: LD_INT 1
1833: ARRAY
1834: PPUSH
1835: LD_VAR 0 2
1839: PUSH
1840: LD_INT 2
1842: ARRAY
1843: PPUSH
1844: CALL_OW 63
1848: GO 1823
1850: POP
1851: POP
// end ;
1852: LD_VAR 0 1
1856: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
1857: LD_INT 0
1859: PPUSH
1860: PPUSH
1861: PPUSH
// if not Team_Game then
1862: LD_EXP 25
1866: NOT
1867: IFFALSE 1965
// begin for i = 1 to 8 do
1869: LD_ADDR_VAR 0 2
1873: PUSH
1874: DOUBLE
1875: LD_INT 1
1877: DEC
1878: ST_TO_ADDR
1879: LD_INT 8
1881: PUSH
1882: FOR_TO
1883: IFFALSE 1961
// for j = 1 to 8 do
1885: LD_ADDR_VAR 0 3
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 8
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1957
// if i <> j then
1901: LD_VAR 0 2
1905: PUSH
1906: LD_VAR 0 3
1910: NONEQUAL
1911: IFFALSE 1935
// SetAttitude ( i , j , att_neutral , true ) else
1913: LD_VAR 0 2
1917: PPUSH
1918: LD_VAR 0 3
1922: PPUSH
1923: LD_INT 0
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: CALL_OW 80
1933: GO 1955
// SetAttitude ( i , j , att_friend , true ) ;
1935: LD_VAR 0 2
1939: PPUSH
1940: LD_VAR 0 3
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: CALL_OW 80
1955: GO 1898
1957: POP
1958: POP
1959: GO 1882
1961: POP
1962: POP
// end else
1963: GO 2140
// begin if def_shared_vision then
1965: LD_EXP 55
1969: IFFALSE 2034
// begin for i in Teams do
1971: LD_ADDR_VAR 0 2
1975: PUSH
1976: LD_EXP 22
1980: PUSH
1981: FOR_IN
1982: IFFALSE 2032
// for j = 2 to i do
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: DOUBLE
1990: LD_INT 2
1992: DEC
1993: ST_TO_ADDR
1994: LD_VAR 0 2
1998: PUSH
1999: FOR_TO
2000: IFFALSE 2028
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2002: LD_VAR 0 2
2006: PUSH
2007: LD_VAR 0 3
2011: ARRAY
2012: PPUSH
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 1
2020: ARRAY
2021: PPUSH
2022: CALL_OW 343
2026: GO 1999
2028: POP
2029: POP
2030: GO 1981
2032: POP
2033: POP
// end ; for i = 1 to 8 do
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: DOUBLE
2040: LD_INT 1
2042: DEC
2043: ST_TO_ADDR
2044: LD_INT 8
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2138
// for j = 1 to 8 do
2050: LD_ADDR_VAR 0 3
2054: PUSH
2055: DOUBLE
2056: LD_INT 1
2058: DEC
2059: ST_TO_ADDR
2060: LD_INT 8
2062: PUSH
2063: FOR_TO
2064: IFFALSE 2134
// if Side_Teams [ i ] = Side_Teams [ j ] then
2066: LD_EXP 21
2070: PUSH
2071: LD_VAR 0 2
2075: ARRAY
2076: PUSH
2077: LD_EXP 21
2081: PUSH
2082: LD_VAR 0 3
2086: ARRAY
2087: EQUAL
2088: IFFALSE 2112
// SetAttitude ( i , j , att_friend , true ) else
2090: LD_VAR 0 2
2094: PPUSH
2095: LD_VAR 0 3
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: LD_INT 1
2105: PPUSH
2106: CALL_OW 80
2110: GO 2132
// SetAttitude ( i , j , att_enemy , true ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: LD_VAR 0 3
2121: PPUSH
2122: LD_INT 2
2124: PPUSH
2125: LD_INT 1
2127: PPUSH
2128: CALL_OW 80
2132: GO 2063
2134: POP
2135: POP
2136: GO 2047
2138: POP
2139: POP
// end ; end ;
2140: LD_VAR 0 1
2144: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2145: LD_INT 0
2147: PPUSH
2148: PPUSH
2149: PPUSH
2150: PPUSH
// result := [ ] ;
2151: LD_ADDR_VAR 0 7
2155: PUSH
2156: EMPTY
2157: ST_TO_ADDR
// for i := 1 to count do
2158: LD_ADDR_VAR 0 8
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_VAR 0 1
2172: PUSH
2173: FOR_TO
2174: IFFALSE 2592
// begin uc_direction := Rand ( 0 , 5 ) ;
2176: LD_ADDR_OWVAR 24
2180: PUSH
2181: LD_INT 0
2183: PPUSH
2184: LD_INT 5
2186: PPUSH
2187: CALL_OW 12
2191: ST_TO_ADDR
// if commander then
2192: LD_LOC 1
2196: IFFALSE 2305
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2198: LD_ADDR_OWVAR 26
2202: PUSH
2203: LD_OWVAR 19
2207: PUSH
2208: LD_OWVAR 20
2212: ARRAY
2213: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2214: LD_INT 1
2216: PPUSH
2217: LD_INT 2
2219: PPUSH
2220: CALL_OW 12
2224: PPUSH
2225: LD_VAR 0 2
2229: PPUSH
2230: LD_EXP 10
2234: PUSH
2235: LD_INT 2
2237: PLUS
2238: PPUSH
2239: CALL_OW 380
// hc_importance := 105 ;
2243: LD_ADDR_OWVAR 32
2247: PUSH
2248: LD_INT 105
2250: ST_TO_ADDR
// commander := false ;
2251: LD_ADDR_LOC 1
2255: PUSH
2256: LD_INT 0
2258: ST_TO_ADDR
// if Multiplayer then
2259: LD_OWVAR 4
2263: IFFALSE 2303
// begin hc_gallery := MULTIAVATARS ;
2265: LD_ADDR_OWVAR 33
2269: PUSH
2270: LD_STRING MULTIAVATARS
2272: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2273: LD_ADDR_OWVAR 34
2277: PUSH
2278: LD_OWVAR 20
2282: PPUSH
2283: CALL_OW 525
2287: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2288: LD_ADDR_OWVAR 27
2292: PUSH
2293: LD_OWVAR 20
2297: PPUSH
2298: CALL_OW 526
2302: ST_TO_ADDR
// end ; end else
2303: GO 2368
// begin hc_name :=  ;
2305: LD_ADDR_OWVAR 26
2309: PUSH
2310: LD_STRING 
2312: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2313: LD_INT 1
2315: PPUSH
2316: LD_INT 2
2318: PPUSH
2319: CALL_OW 12
2323: PPUSH
2324: LD_VAR 0 2
2328: PPUSH
2329: LD_EXP 10
2333: PPUSH
2334: CALL_OW 380
// hc_importance := 0 ;
2338: LD_ADDR_OWVAR 32
2342: PUSH
2343: LD_INT 0
2345: ST_TO_ADDR
// if Multiplayer then
2346: LD_OWVAR 4
2350: IFFALSE 2368
// begin hc_gallery :=  ;
2352: LD_ADDR_OWVAR 33
2356: PUSH
2357: LD_STRING 
2359: ST_TO_ADDR
// hc_face_number := 0 ;
2360: LD_ADDR_OWVAR 34
2364: PUSH
2365: LD_INT 0
2367: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2368: LD_ADDR_VAR 0 10
2372: PUSH
2373: CALL_OW 44
2377: ST_TO_ADDR
// if global_defined then
2378: LD_LOC 3
2382: IFFALSE 2522
// begin if ( cl = class_soldier ) then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: EQUAL
2392: IFFALSE 2412
// j := i + soldiers_created else
2394: LD_ADDR_VAR 0 9
2398: PUSH
2399: LD_VAR 0 8
2403: PUSH
2404: LD_LOC 4
2408: PLUS
2409: ST_TO_ADDR
2410: GO 2422
// j := i ;
2412: LD_ADDR_VAR 0 9
2416: PUSH
2417: LD_VAR 0 8
2421: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2422: LD_LOC 2
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: PUSH
2433: LD_VAR 0 9
2437: ARRAY
2438: PPUSH
2439: LD_VAR 0 10
2443: PPUSH
2444: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
2448: LD_VAR 0 10
2452: PPUSH
2453: LD_INT 2
2455: PPUSH
2456: LD_LOC 2
2460: PUSH
2461: LD_VAR 0 2
2465: ARRAY
2466: PUSH
2467: LD_VAR 0 9
2471: ARRAY
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: CALL_OW 260
2480: PPUSH
2481: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
2485: LD_VAR 0 10
2489: PPUSH
2490: LD_INT 1
2492: PPUSH
2493: LD_LOC 2
2497: PUSH
2498: LD_VAR 0 2
2502: ARRAY
2503: PUSH
2504: LD_VAR 0 9
2508: ARRAY
2509: PPUSH
2510: LD_INT 1
2512: PPUSH
2513: CALL_OW 260
2517: PPUSH
2518: CALL_OW 239
// end ; if building then
2522: LD_VAR 0 6
2526: IFFALSE 2544
// PlaceHumanInUnit ( un , building ) else
2528: LD_VAR 0 10
2532: PPUSH
2533: LD_VAR 0 6
2537: PPUSH
2538: CALL_OW 52
2542: GO 2571
// PlaceUnitXYR ( un , x , y , r , false ) ;
2544: LD_VAR 0 10
2548: PPUSH
2549: LD_VAR 0 3
2553: PPUSH
2554: LD_VAR 0 4
2558: PPUSH
2559: LD_VAR 0 5
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: CALL_OW 50
// result := result ^ [ un ] ;
2571: LD_ADDR_VAR 0 7
2575: PUSH
2576: LD_VAR 0 7
2580: PUSH
2581: LD_VAR 0 10
2585: PUSH
2586: EMPTY
2587: LIST
2588: ADD
2589: ST_TO_ADDR
// end ;
2590: GO 2173
2592: POP
2593: POP
// if not global_defined then
2594: LD_LOC 3
2598: NOT
2599: IFFALSE 2677
// if ( global_units >= cl ) then
2601: LD_LOC 2
2605: PUSH
2606: LD_VAR 0 2
2610: GREATEREQUAL
2611: IFFALSE 2652
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
2613: LD_ADDR_LOC 2
2617: PUSH
2618: LD_LOC 2
2622: PPUSH
2623: LD_VAR 0 2
2627: PPUSH
2628: LD_LOC 2
2632: PUSH
2633: LD_VAR 0 2
2637: ARRAY
2638: PUSH
2639: LD_VAR 0 7
2643: ADD
2644: PPUSH
2645: CALL_OW 1
2649: ST_TO_ADDR
2650: GO 2677
// global_units := Replace ( global_units , cl , result ) ;
2652: LD_ADDR_LOC 2
2656: PUSH
2657: LD_LOC 2
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_VAR 0 7
2671: PPUSH
2672: CALL_OW 1
2676: ST_TO_ADDR
// if commander then
2677: LD_LOC 1
2681: IFFALSE 2728
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
2683: LD_ADDR_EXP 34
2687: PUSH
2688: LD_EXP 34
2692: PPUSH
2693: LD_OWVAR 20
2697: PPUSH
2698: LD_EXP 34
2702: PUSH
2703: LD_OWVAR 20
2707: ARRAY
2708: PUSH
2709: LD_VAR 0 10
2713: ADD
2714: PPUSH
2715: CALL_OW 1
2719: ST_TO_ADDR
// commander := false ;
2720: LD_ADDR_LOC 1
2724: PUSH
2725: LD_INT 0
2727: ST_TO_ADDR
// end ; end ;
2728: LD_VAR 0 7
2732: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
2733: LD_INT 0
2735: PPUSH
2736: PPUSH
2737: PPUSH
2738: PPUSH
2739: PPUSH
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
// if side in [ 0 , 9 ] then
2744: LD_VAR 0 1
2748: PUSH
2749: LD_INT 0
2751: PUSH
2752: LD_INT 9
2754: PUSH
2755: EMPTY
2756: LIST
2757: LIST
2758: IN
2759: IFFALSE 2763
// exit ;
2761: GO 3838
// pos := Side_Positions [ side ] ;
2763: LD_ADDR_VAR 0 3
2767: PUSH
2768: LD_EXP 23
2772: PUSH
2773: LD_VAR 0 1
2777: ARRAY
2778: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2779: LD_ADDR_OWVAR 21
2783: PUSH
2784: LD_EXP 24
2788: PUSH
2789: LD_VAR 0 1
2793: ARRAY
2794: ST_TO_ADDR
// uc_side := side ;
2795: LD_ADDR_OWVAR 20
2799: PUSH
2800: LD_VAR 0 1
2804: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
2805: LD_ADDR_VAR 0 4
2809: PUSH
2810: LD_EXP 29
2814: PUSH
2815: LD_VAR 0 3
2819: ARRAY
2820: PUSH
2821: LD_INT 1
2823: ARRAY
2824: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
2825: LD_ADDR_VAR 0 5
2829: PUSH
2830: LD_EXP 29
2834: PUSH
2835: LD_VAR 0 3
2839: ARRAY
2840: PUSH
2841: LD_INT 2
2843: ARRAY
2844: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
2845: LD_ADDR_VAR 0 6
2849: PUSH
2850: LD_EXP 29
2854: PUSH
2855: LD_VAR 0 3
2859: ARRAY
2860: PUSH
2861: LD_INT 3
2863: ARRAY
2864: ST_TO_ADDR
// if is_depot then
2865: LD_EXP 7
2869: IFFALSE 3002
// begin bc_type = b_depot ;
2871: LD_ADDR_OWVAR 42
2875: PUSH
2876: LD_INT 0
2878: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
2879: LD_ADDR_VAR 0 10
2883: PUSH
2884: LD_VAR 0 4
2888: PPUSH
2889: LD_VAR 0 5
2893: PPUSH
2894: LD_VAR 0 6
2898: PPUSH
2899: CALL_OW 47
2903: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
2904: LD_VAR 0 10
2908: PPUSH
2909: LD_STRING @
2911: PUSH
2912: LD_VAR 0 1
2916: STR
2917: PPUSH
2918: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
2922: LD_VAR 0 10
2926: PPUSH
2927: CALL_OW 274
2931: PPUSH
2932: LD_INT 1
2934: PPUSH
2935: LD_EXP 12
2939: PUSH
2940: LD_INT 1
2942: ARRAY
2943: PPUSH
2944: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
2948: LD_VAR 0 10
2952: PPUSH
2953: CALL_OW 274
2957: PPUSH
2958: LD_INT 2
2960: PPUSH
2961: LD_EXP 12
2965: PUSH
2966: LD_INT 2
2968: ARRAY
2969: PPUSH
2970: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
2974: LD_VAR 0 10
2978: PPUSH
2979: CALL_OW 274
2983: PPUSH
2984: LD_INT 3
2986: PPUSH
2987: LD_EXP 12
2991: PUSH
2992: LD_INT 3
2994: ARRAY
2995: PPUSH
2996: CALL_OW 277
// end else
3000: GO 3146
// begin for i := 1 to 3 do
3002: LD_ADDR_VAR 0 7
3006: PUSH
3007: DOUBLE
3008: LD_INT 1
3010: DEC
3011: ST_TO_ADDR
3012: LD_INT 3
3014: PUSH
3015: FOR_TO
3016: IFFALSE 3144
// begin r := starting_resources [ i ] ;
3018: LD_ADDR_VAR 0 8
3022: PUSH
3023: LD_EXP 12
3027: PUSH
3028: LD_VAR 0 7
3032: ARRAY
3033: ST_TO_ADDR
// while r >= 10 do
3034: LD_VAR 0 8
3038: PUSH
3039: LD_INT 10
3041: GREATEREQUAL
3042: IFFALSE 3142
// if r > 50 then
3044: LD_VAR 0 8
3048: PUSH
3049: LD_INT 50
3051: GREATER
3052: IFFALSE 3098
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3054: LD_VAR 0 7
3058: PPUSH
3059: LD_INT 5
3061: PPUSH
3062: LD_VAR 0 4
3066: PPUSH
3067: LD_VAR 0 5
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 60
// r := r - 50 ;
3082: LD_ADDR_VAR 0 8
3086: PUSH
3087: LD_VAR 0 8
3091: PUSH
3092: LD_INT 50
3094: MINUS
3095: ST_TO_ADDR
// end else
3096: GO 3140
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3098: LD_VAR 0 7
3102: PPUSH
3103: LD_VAR 0 8
3107: PUSH
3108: LD_INT 10
3110: DIV
3111: PPUSH
3112: LD_VAR 0 4
3116: PPUSH
3117: LD_VAR 0 5
3121: PPUSH
3122: LD_INT 4
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL_OW 60
// r := 0 ;
3132: LD_ADDR_VAR 0 8
3136: PUSH
3137: LD_INT 0
3139: ST_TO_ADDR
// end ;
3140: GO 3034
// end ;
3142: GO 3015
3144: POP
3145: POP
// end ; for r in starting_crates do
3146: LD_ADDR_VAR 0 8
3150: PUSH
3151: LD_EXP 11
3155: PUSH
3156: FOR_IN
3157: IFFALSE 3189
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3159: LD_INT 1
3161: PPUSH
3162: LD_INT 5
3164: PPUSH
3165: LD_VAR 0 4
3169: PPUSH
3170: LD_VAR 0 5
3174: PPUSH
3175: LD_VAR 0 8
3179: PPUSH
3180: LD_INT 0
3182: PPUSH
3183: CALL_OW 60
3187: GO 3156
3189: POP
3190: POP
// if def_morale_flags then
3191: LD_EXP 56
3195: IFFALSE 3334
// begin x := start_def [ pos ] [ 1 ] ;
3197: LD_ADDR_VAR 0 4
3201: PUSH
3202: LD_EXP 31
3206: PUSH
3207: LD_VAR 0 3
3211: ARRAY
3212: PUSH
3213: LD_INT 1
3215: ARRAY
3216: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3217: LD_ADDR_VAR 0 5
3221: PUSH
3222: LD_EXP 31
3226: PUSH
3227: LD_VAR 0 3
3231: ARRAY
3232: PUSH
3233: LD_INT 2
3235: ARRAY
3236: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3237: LD_VAR 0 4
3241: PPUSH
3242: LD_VAR 0 5
3246: PPUSH
3247: LD_INT 12
3249: PPUSH
3250: LD_INT 2
3252: PPUSH
3253: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3257: LD_ADDR_EXP 33
3261: PUSH
3262: LD_EXP 33
3266: PUSH
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_VAR 0 4
3276: PPUSH
3277: LD_VAR 0 5
3281: PPUSH
3282: LD_INT 1
3284: PUSH
3285: LD_INT 100
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 2
3294: PUSH
3295: LD_INT 50
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: LD_INT 3
3304: PUSH
3305: LD_INT 20
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 20
3314: PUSH
3315: LD_INT 100
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 418
3332: ADD
3333: ST_TO_ADDR
// end ; commander := true ;
3334: LD_ADDR_LOC 1
3338: PUSH
3339: LD_INT 1
3341: ST_TO_ADDR
// soldiers_created := 0 ;
3342: LD_ADDR_LOC 4
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3350: LD_ADDR_VAR 0 7
3354: PUSH
3355: DOUBLE
3356: LD_INT 1
3358: DEC
3359: ST_TO_ADDR
3360: LD_EXP 8
3364: PUSH
3365: FOR_TO
3366: IFFALSE 3519
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3368: LD_ADDR_VAR 0 4
3372: PUSH
3373: LD_EXP 30
3377: PUSH
3378: LD_VAR 0 3
3382: ARRAY
3383: PUSH
3384: LD_VAR 0 7
3388: ARRAY
3389: PUSH
3390: LD_INT 1
3392: ARRAY
3393: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3394: LD_ADDR_VAR 0 5
3398: PUSH
3399: LD_EXP 30
3403: PUSH
3404: LD_VAR 0 3
3408: ARRAY
3409: PUSH
3410: LD_VAR 0 7
3414: ARRAY
3415: PUSH
3416: LD_INT 2
3418: ARRAY
3419: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3420: LD_ADDR_VAR 0 6
3424: PUSH
3425: LD_EXP 30
3429: PUSH
3430: LD_VAR 0 3
3434: ARRAY
3435: PUSH
3436: LD_VAR 0 7
3440: ARRAY
3441: PUSH
3442: LD_INT 3
3444: ARRAY
3445: ST_TO_ADDR
// bc_type := b_breastwork ;
3446: LD_ADDR_OWVAR 42
3450: PUSH
3451: LD_INT 31
3453: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3454: LD_ADDR_VAR 0 9
3458: PUSH
3459: LD_VAR 0 4
3463: PPUSH
3464: LD_VAR 0 5
3468: PPUSH
3469: LD_VAR 0 6
3473: PPUSH
3474: CALL_OW 47
3478: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3479: LD_INT 1
3481: PPUSH
3482: LD_INT 1
3484: PPUSH
3485: LD_INT 0
3487: PPUSH
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 0
3493: PPUSH
3494: LD_VAR 0 9
3498: PPUSH
3499: CALL 2145 0 6
// soldiers_created := soldiers_created + 1 ;
3503: LD_ADDR_LOC 4
3507: PUSH
3508: LD_LOC 4
3512: PUSH
3513: LD_INT 1
3515: PLUS
3516: ST_TO_ADDR
// end ;
3517: GO 3365
3519: POP
3520: POP
// x := start_def [ pos ] [ 1 ] ;
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_EXP 31
3530: PUSH
3531: LD_VAR 0 3
3535: ARRAY
3536: PUSH
3537: LD_INT 1
3539: ARRAY
3540: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3541: LD_ADDR_VAR 0 5
3545: PUSH
3546: LD_EXP 31
3550: PUSH
3551: LD_VAR 0 3
3555: ARRAY
3556: PUSH
3557: LD_INT 2
3559: ARRAY
3560: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
3561: LD_LOC 8
3565: PUSH
3566: LD_EXP 8
3570: MINUS
3571: PPUSH
3572: LD_INT 1
3574: PPUSH
3575: LD_VAR 0 4
3579: PPUSH
3580: LD_VAR 0 5
3584: PPUSH
3585: LD_INT 5
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: CALL 2145 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
3595: LD_LOC 5
3599: PPUSH
3600: LD_INT 2
3602: PPUSH
3603: LD_VAR 0 4
3607: PPUSH
3608: LD_VAR 0 5
3612: PPUSH
3613: LD_INT 5
3615: PPUSH
3616: LD_INT 0
3618: PPUSH
3619: CALL 2145 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
3623: LD_LOC 7
3627: PPUSH
3628: LD_INT 3
3630: PPUSH
3631: LD_VAR 0 4
3635: PPUSH
3636: LD_VAR 0 5
3640: PPUSH
3641: LD_INT 5
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: CALL 2145 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
3651: LD_LOC 6
3655: PPUSH
3656: LD_INT 4
3658: PPUSH
3659: LD_VAR 0 4
3663: PPUSH
3664: LD_VAR 0 5
3668: PPUSH
3669: LD_INT 5
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: CALL 2145 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
3679: LD_EXP 57
3683: PUSH
3684: LD_INT 20
3686: PPUSH
3687: LD_VAR 0 1
3691: PPUSH
3692: CALL_OW 321
3696: PUSH
3697: LD_INT 1
3699: EQUAL
3700: AND
3701: IFFALSE 3718
// SetTech ( tech_SibDet , side , state_researched ) ;
3703: LD_INT 20
3705: PPUSH
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_INT 2
3713: PPUSH
3714: CALL_OW 322
// if def_siberite_bomb = 1 then
3718: LD_EXP 60
3722: PUSH
3723: LD_INT 1
3725: EQUAL
3726: IFFALSE 3760
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
3728: LD_INT 25
3730: PPUSH
3731: LD_VAR 0 1
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
3743: LD_INT 73
3745: PPUSH
3746: LD_VAR 0 1
3750: PPUSH
3751: LD_INT 1
3753: PPUSH
3754: CALL_OW 322
// end else
3758: GO 3790
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
3760: LD_INT 25
3762: PPUSH
3763: LD_VAR 0 1
3767: PPUSH
3768: LD_INT 0
3770: PPUSH
3771: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
3775: LD_INT 73
3777: PPUSH
3778: LD_VAR 0 1
3782: PPUSH
3783: LD_INT 0
3785: PPUSH
3786: CALL_OW 322
// end ; if Game_Type = 3 then
3790: LD_EXP 46
3794: PUSH
3795: LD_INT 3
3797: EQUAL
3798: IFFALSE 3815
// SetTech ( tech_partinvis , side , state_disabled ) ;
3800: LD_INT 16
3802: PPUSH
3803: LD_VAR 0 1
3807: PPUSH
3808: LD_INT 0
3810: PPUSH
3811: CALL_OW 322
// SetTech ( tech_artifact , side , state_enabled ) ;
3815: LD_INT 24
3817: PPUSH
3818: LD_VAR 0 1
3822: PPUSH
3823: LD_INT 1
3825: PPUSH
3826: CALL_OW 322
// global_defined := true ;
3830: LD_ADDR_LOC 3
3834: PUSH
3835: LD_INT 1
3837: ST_TO_ADDR
// end ;
3838: LD_VAR 0 2
3842: RET
// every 0 0$1 do
3843: GO 3845
3845: DISABLE
// if ( def_siberite_bomb > 1 ) then
3846: LD_EXP 60
3850: PUSH
3851: LD_INT 1
3853: GREATER
3854: IFFALSE 3869
// begin wait ( siberite_bomb_Delay ) ;
3856: LD_EXP 18
3860: PPUSH
3861: CALL_OW 67
// EnableSibFiss ;
3865: CALL 3870 0 0
// end ;
3869: END
// function EnableSibFiss ; var i ; begin
3870: LD_INT 0
3872: PPUSH
3873: PPUSH
// for i := 1 to 8 do
3874: LD_ADDR_VAR 0 2
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_INT 8
3886: PUSH
3887: FOR_TO
3888: IFFALSE 3934
// if Side_Positions [ i ] then
3890: LD_EXP 23
3894: PUSH
3895: LD_VAR 0 2
3899: ARRAY
3900: IFFALSE 3932
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
3902: LD_INT 25
3904: PPUSH
3905: LD_VAR 0 2
3909: PPUSH
3910: LD_INT 1
3912: PPUSH
3913: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
3917: LD_INT 73
3919: PPUSH
3920: LD_VAR 0 2
3924: PPUSH
3925: LD_INT 1
3927: PPUSH
3928: CALL_OW 322
// end ;
3932: GO 3887
3934: POP
3935: POP
// end ;
3936: LD_VAR 0 1
3940: RET
// function prepare_sides ; var i ; begin
3941: LD_INT 0
3943: PPUSH
3944: PPUSH
// global_units := [ ] ;
3945: LD_ADDR_LOC 2
3949: PUSH
3950: EMPTY
3951: ST_TO_ADDR
// global_defined := false ;
3952: LD_ADDR_LOC 3
3956: PUSH
3957: LD_INT 0
3959: ST_TO_ADDR
// CountClassMembers ;
3960: CALL 4010 0 0
// for i := 1 to 8 do
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: DOUBLE
3970: LD_INT 1
3972: DEC
3973: ST_TO_ADDR
3974: LD_INT 8
3976: PUSH
3977: FOR_TO
3978: IFFALSE 4003
// if Side_Positions [ i ] then
3980: LD_EXP 23
3984: PUSH
3985: LD_VAR 0 2
3989: ARRAY
3990: IFFALSE 4001
// prepare_side ( i ) ;
3992: LD_VAR 0 2
3996: PPUSH
3997: CALL 2733 0 1
4001: GO 3977
4003: POP
4004: POP
// end ;
4005: LD_VAR 0 1
4009: RET
// function CountClassMembers ; var Mode ; begin
4010: LD_INT 0
4012: PPUSH
4013: PPUSH
// if No_Mechs then
4014: LD_EXP 62
4018: IFFALSE 4030
// Mode := 2 else
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: LD_INT 2
4027: ST_TO_ADDR
4028: GO 4038
// Mode := 1 ;
4030: LD_ADDR_VAR 0 2
4034: PUSH
4035: LD_INT 1
4037: ST_TO_ADDR
// neng := number_of_people ;
4038: LD_ADDR_LOC 5
4042: PUSH
4043: LD_EXP 9
4047: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4048: LD_ADDR_LOC 8
4052: PUSH
4053: LD_LOC 5
4057: PUSH
4058: LD_INT 4
4060: PUSH
4061: LD_INT 3
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PUSH
4068: LD_VAR 0 2
4072: ARRAY
4073: DIV
4074: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4075: LD_LOC 8
4079: PUSH
4080: LD_EXP 8
4084: LESS
4085: IFFALSE 4097
// nsol := number_of_breastworks ;
4087: LD_ADDR_LOC 8
4091: PUSH
4092: LD_EXP 8
4096: ST_TO_ADDR
// neng := neng - nsol ;
4097: LD_ADDR_LOC 5
4101: PUSH
4102: LD_LOC 5
4106: PUSH
4107: LD_LOC 8
4111: MINUS
4112: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4113: LD_ADDR_LOC 6
4117: PUSH
4118: LD_LOC 5
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 2
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_VAR 0 2
4137: ARRAY
4138: DIV
4139: ST_TO_ADDR
// if ( nsci < 1 ) then
4140: LD_LOC 6
4144: PUSH
4145: LD_INT 1
4147: LESS
4148: IFFALSE 4158
// nsci := 1 ;
4150: LD_ADDR_LOC 6
4154: PUSH
4155: LD_INT 1
4157: ST_TO_ADDR
// neng := neng - nsci ;
4158: LD_ADDR_LOC 5
4162: PUSH
4163: LD_LOC 5
4167: PUSH
4168: LD_LOC 6
4172: MINUS
4173: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4174: LD_ADDR_LOC 7
4178: PUSH
4179: LD_LOC 5
4183: PUSH
4184: LD_INT 2
4186: DIV
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PUSH
4195: LD_VAR 0 2
4199: ARRAY
4200: ST_TO_ADDR
// neng := neng - nmech ;
4201: LD_ADDR_LOC 5
4205: PUSH
4206: LD_LOC 5
4210: PUSH
4211: LD_LOC 7
4215: MINUS
4216: ST_TO_ADDR
// if ( neng < 1 ) then
4217: LD_LOC 5
4221: PUSH
4222: LD_INT 1
4224: LESS
4225: IFFALSE 4235
// neng := 1 ;
4227: LD_ADDR_LOC 5
4231: PUSH
4232: LD_INT 1
4234: ST_TO_ADDR
// end ;
4235: LD_VAR 0 1
4239: RET
// starting begin disable ( 1 ) ;
4240: LD_INT 1
4242: DISABLE_MARKED
// disable ( 2 ) ;
4243: LD_INT 2
4245: DISABLE_MARKED
// disable ( 3 ) ;
4246: LD_INT 3
4248: DISABLE_MARKED
// disable ( 4 ) ;
4249: LD_INT 4
4251: DISABLE_MARKED
// disable ( 5 ) ;
4252: LD_INT 5
4254: DISABLE_MARKED
// disable ( 6 ) ;
4255: LD_INT 6
4257: DISABLE_MARKED
// disable ( 7 ) ;
4258: LD_INT 7
4260: DISABLE_MARKED
// disable ( 10 ) ;
4261: LD_INT 10
4263: DISABLE_MARKED
// disable ( 20 ) ;
4264: LD_INT 20
4266: DISABLE_MARKED
// disable ( 98 ) ;
4267: LD_INT 98
4269: DISABLE_MARKED
// disable ( 99 ) ;
4270: LD_INT 99
4272: DISABLE_MARKED
// disable ( 400 ) ;
4273: LD_INT 400
4275: DISABLE_MARKED
// disable ( 401 ) ;
4276: LD_INT 401
4278: DISABLE_MARKED
// disable ( 600 ) ;
4279: LD_INT 600
4281: DISABLE_MARKED
// mp_selectmsg := true ;
4282: LD_ADDR_OWVAR 13
4286: PUSH
4287: LD_INT 1
4289: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4290: CALL 68 0 0
// init_map ;
4294: CALL 1398 0 0
// set_shared_visions_and_alliances ;
4298: CALL 1857 0 0
// ResetFog ;
4302: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4306: LD_OWVAR 2
4310: PPUSH
4311: CALL_OW 520
// prepare_sides ;
4315: CALL 3941 0 0
// init_respawning ;
4319: CALL 26996 0 0
// Init_Win_Condition ;
4323: CALL 17244 0 0
// InitLimits ;
4327: CALL 15072 0 0
// ShowTimer ;
4331: CALL 16009 0 0
// case Game_Type of 2 :
4335: LD_EXP 46
4339: PUSH
4340: LD_INT 2
4342: DOUBLE
4343: EQUAL
4344: IFTRUE 4348
4346: GO 4355
4348: POP
// init_alien_research ; 3 :
4349: CALL 6672 0 0
4353: GO 4375
4355: LD_INT 3
4357: DOUBLE
4358: EQUAL
4359: IFTRUE 4363
4361: GO 4374
4363: POP
// begin InitPoints ( ) ;
4364: CALL 16247 0 0
// init_kings_counting ;
4368: CALL 18539 0 0
// end ; end ;
4372: GO 4375
4374: POP
// music_nat := Side_Nations [ your_side ] ;
4375: LD_ADDR_OWVAR 71
4379: PUSH
4380: LD_EXP 24
4384: PUSH
4385: LD_OWVAR 2
4389: ARRAY
4390: ST_TO_ADDR
// if IAmSpec then
4391: CALL_OW 531
4395: IFFALSE 4419
// begin fogOff ( true ) ;
4397: LD_INT 1
4399: PPUSH
4400: CALL_OW 344
// CenterNowOnXY ( 119 , 79 ) ;
4404: LD_INT 119
4406: PPUSH
4407: LD_INT 79
4409: PPUSH
4410: CALL_OW 86
// enable ( 400 ) ;
4414: LD_INT 400
4416: ENABLE_MARKED
// end else
4417: GO 4465
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4419: LD_EXP 31
4423: PUSH
4424: LD_EXP 23
4428: PUSH
4429: LD_OWVAR 2
4433: ARRAY
4434: ARRAY
4435: PUSH
4436: LD_INT 1
4438: ARRAY
4439: PPUSH
4440: LD_EXP 31
4444: PUSH
4445: LD_EXP 23
4449: PUSH
4450: LD_OWVAR 2
4454: ARRAY
4455: ARRAY
4456: PUSH
4457: LD_INT 2
4459: ARRAY
4460: PPUSH
4461: CALL_OW 86
// end ; AnimateTrees ( true ) ;
4465: LD_INT 1
4467: PPUSH
4468: CALL_OW 573
// InitApeman ;
4472: CALL 5157 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 ] ;
4476: LD_ADDR_EXP 66
4480: PUSH
4481: LD_INT 21
4483: PUSH
4484: LD_INT 23
4486: PUSH
4487: LD_INT 20
4489: PUSH
4490: LD_INT 22
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: ST_TO_ADDR
// BeginBuildUp ;
4499: CALL 27490 0 0
// end ; end_of_file
4503: END
// every 1 1$0 + 0 0$0.3 do
4504: GO 4506
4506: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
4507: LD_INT 4
4509: PPUSH
4510: LD_INT 5
4512: PPUSH
4513: CALL_OW 12
4517: PPUSH
4518: LD_INT 25
4520: PPUSH
4521: LD_INT 1
4523: PPUSH
4524: CALL_OW 55
// enable ;
4528: ENABLE
// end ;
4529: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
4530: GO 4532
4532: DISABLE
4533: LD_INT 0
4535: PPUSH
4536: PPUSH
// begin case tick of 1 .. 1 1$0 :
4537: LD_OWVAR 1
4541: PUSH
4542: LD_INT 1
4544: DOUBLE
4545: GREATEREQUAL
4546: IFFALSE 4554
4548: LD_INT 2100
4550: DOUBLE
4551: LESSEQUAL
4552: IFTRUE 4556
4554: GO 4584
4556: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
4557: LD_EXP 13
4561: PUSH
4562: LD_INT 100
4564: DIVREAL
4565: PUSH
4566: LD_INT 350
4568: PPUSH
4569: LD_INT 1050
4571: PPUSH
4572: CALL_OW 12
4576: MUL
4577: PPUSH
4578: CALL_OW 67
4582: GO 4886
4584: LD_INT 2100
4586: PUSH
4587: LD_INT 1
4589: PLUS
4590: DOUBLE
4591: GREATEREQUAL
4592: IFFALSE 4600
4594: LD_INT 10500
4596: DOUBLE
4597: LESSEQUAL
4598: IFTRUE 4602
4600: GO 4630
4602: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
4603: LD_EXP 13
4607: PUSH
4608: LD_INT 100
4610: DIVREAL
4611: PUSH
4612: LD_INT 1050
4614: PPUSH
4615: LD_INT 1575
4617: PPUSH
4618: CALL_OW 12
4622: MUL
4623: PPUSH
4624: CALL_OW 67
4628: GO 4886
4630: LD_INT 10500
4632: PUSH
4633: LD_INT 1
4635: PLUS
4636: DOUBLE
4637: GREATEREQUAL
4638: IFFALSE 4646
4640: LD_INT 21000
4642: DOUBLE
4643: LESSEQUAL
4644: IFTRUE 4648
4646: GO 4676
4648: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
4649: LD_EXP 13
4653: PUSH
4654: LD_INT 100
4656: DIVREAL
4657: PUSH
4658: LD_INT 1575
4660: PPUSH
4661: LD_INT 2100
4663: PPUSH
4664: CALL_OW 12
4668: MUL
4669: PPUSH
4670: CALL_OW 67
4674: GO 4886
4676: LD_INT 21000
4678: PUSH
4679: LD_INT 1
4681: PLUS
4682: DOUBLE
4683: GREATEREQUAL
4684: IFFALSE 4692
4686: LD_INT 42000
4688: DOUBLE
4689: LESSEQUAL
4690: IFTRUE 4694
4692: GO 4722
4694: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
4695: LD_EXP 13
4699: PUSH
4700: LD_INT 100
4702: DIVREAL
4703: PUSH
4704: LD_INT 2100
4706: PPUSH
4707: LD_INT 2625
4709: PPUSH
4710: CALL_OW 12
4714: MUL
4715: PPUSH
4716: CALL_OW 67
4720: GO 4886
4722: LD_INT 42000
4724: PUSH
4725: LD_INT 1
4727: PLUS
4728: DOUBLE
4729: GREATEREQUAL
4730: IFFALSE 4738
4732: LD_INT 63000
4734: DOUBLE
4735: LESSEQUAL
4736: IFTRUE 4740
4738: GO 4768
4740: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
4741: LD_EXP 13
4745: PUSH
4746: LD_INT 100
4748: DIVREAL
4749: PUSH
4750: LD_INT 2625
4752: PPUSH
4753: LD_INT 3150
4755: PPUSH
4756: CALL_OW 12
4760: MUL
4761: PPUSH
4762: CALL_OW 67
4766: GO 4886
4768: LD_INT 63000
4770: PUSH
4771: LD_INT 1
4773: PLUS
4774: DOUBLE
4775: GREATEREQUAL
4776: IFFALSE 4784
4778: LD_INT 105000
4780: DOUBLE
4781: LESSEQUAL
4782: IFTRUE 4786
4784: GO 4814
4786: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
4787: LD_EXP 13
4791: PUSH
4792: LD_INT 100
4794: DIVREAL
4795: PUSH
4796: LD_INT 3150
4798: PPUSH
4799: LD_INT 3675
4801: PPUSH
4802: CALL_OW 12
4806: MUL
4807: PPUSH
4808: CALL_OW 67
4812: GO 4886
4814: LD_INT 105000
4816: PUSH
4817: LD_INT 1
4819: PLUS
4820: DOUBLE
4821: GREATEREQUAL
4822: IFFALSE 4830
4824: LD_INT 630000
4826: DOUBLE
4827: LESSEQUAL
4828: IFTRUE 4832
4830: GO 4860
4832: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
4833: LD_EXP 13
4837: PUSH
4838: LD_INT 100
4840: DIVREAL
4841: PUSH
4842: LD_INT 3675
4844: PPUSH
4845: LD_INT 4200
4847: PPUSH
4848: CALL_OW 12
4852: MUL
4853: PPUSH
4854: CALL_OW 67
4858: GO 4886
4860: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
4861: LD_EXP 13
4865: PUSH
4866: LD_INT 100
4868: DIVREAL
4869: PUSH
4870: LD_INT 4200
4872: PPUSH
4873: LD_INT 5250
4875: PPUSH
4876: CALL_OW 12
4880: MUL
4881: PPUSH
4882: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
4886: LD_ADDR_VAR 0 2
4890: PUSH
4891: LD_INT 3
4893: PPUSH
4894: LD_INT 5
4896: PPUSH
4897: CALL_OW 12
4901: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
4902: LD_ADDR_VAR 0 1
4906: PUSH
4907: LD_EXP 23
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: EMPTY
4916: LIST
4917: DIFF
4918: PUSH
4919: FOR_IN
4920: IFFALSE 4960
// CreateCratesArea ( amount , [ north_west , north_east , south_west , south_east ] [ i ] , true ) ;
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_INT 4
4929: PUSH
4930: LD_INT 5
4932: PUSH
4933: LD_INT 7
4935: PUSH
4936: LD_INT 6
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: PUSH
4945: LD_VAR 0 1
4949: ARRAY
4950: PPUSH
4951: LD_INT 1
4953: PPUSH
4954: CALL_OW 55
4958: GO 4919
4960: POP
4961: POP
// enable ;
4962: ENABLE
// end ; end_of_file
4963: PPOPN 2
4965: END
// every 20 20$00 trigger apemanNumber do
4966: LD_EXP 35
4970: IFFALSE 5003
4972: GO 4974
4974: DISABLE
// begin enable ;
4975: ENABLE
// if apeLevel >= 8 then
4976: LD_EXP 40
4980: PUSH
4981: LD_INT 8
4983: GREATEREQUAL
4984: IFFALSE 4989
// disable else
4986: DISABLE
4987: GO 5003
// apeLevel := apeLevel + 1 ;
4989: LD_ADDR_EXP 40
4993: PUSH
4994: LD_EXP 40
4998: PUSH
4999: LD_INT 1
5001: PLUS
5002: ST_TO_ADDR
// end ;
5003: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5004: LD_EXP 35
5008: PUSH
5009: LD_EXP 36
5013: LESS
5014: IFFALSE 5154
5016: GO 5018
5018: DISABLE
5019: LD_INT 0
5021: PPUSH
5022: PPUSH
5023: PPUSH
5024: PPUSH
// begin enable ;
5025: ENABLE
// for i := 1 to apemanPos do
5026: LD_ADDR_VAR 0 1
5030: PUSH
5031: DOUBLE
5032: LD_INT 1
5034: DEC
5035: ST_TO_ADDR
5036: LD_EXP 38
5040: PUSH
5041: FOR_TO
5042: IFFALSE 5152
// begin if apemanPlayerCount [ i ] then
5044: LD_EXP 39
5048: PUSH
5049: LD_VAR 0 1
5053: ARRAY
5054: IFFALSE 5150
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5056: LD_EXP 39
5060: PUSH
5061: LD_VAR 0 1
5065: ARRAY
5066: PUSH
5067: LD_EXP 38
5071: PUSH
5072: LD_VAR 0 1
5076: ARRAY
5077: GREATER
5078: IFFALSE 5150
// begin ape := PrepareApeman ;
5080: LD_ADDR_VAR 0 2
5084: PUSH
5085: CALL 5657 0 0
5089: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5090: LD_VAR 0 2
5094: PPUSH
5095: LD_EXP 41
5099: PUSH
5100: LD_VAR 0 1
5104: ARRAY
5105: PPUSH
5106: LD_INT 0
5108: PPUSH
5109: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5113: LD_ADDR_EXP 38
5117: PUSH
5118: LD_EXP 38
5122: PPUSH
5123: LD_VAR 0 1
5127: PPUSH
5128: LD_EXP 38
5132: PUSH
5133: LD_VAR 0 1
5137: ARRAY
5138: PUSH
5139: LD_VAR 0 2
5143: UNION
5144: PPUSH
5145: CALL_OW 1
5149: ST_TO_ADDR
// end ; end ; end ;
5150: GO 5041
5152: POP
5153: POP
// end ;
5154: PPOPN 4
5156: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5157: LD_INT 0
5159: PPUSH
5160: PPUSH
5161: PPUSH
5162: PPUSH
5163: PPUSH
5164: PPUSH
5165: PPUSH
// playersAmount := 0 ;
5166: LD_ADDR_VAR 0 3
5170: PUSH
5171: LD_INT 0
5173: ST_TO_ADDR
// _apeAreas := [ apeman_north , apeman_east , apeman_west , apeman_south ] ;
5174: LD_ADDR_VAR 0 7
5178: PUSH
5179: LD_INT 8
5181: PUSH
5182: LD_INT 9
5184: PUSH
5185: LD_INT 11
5187: PUSH
5188: LD_INT 10
5190: PUSH
5191: EMPTY
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5197: LD_ADDR_EXP 41
5201: PUSH
5202: LD_INT 0
5204: PUSH
5205: LD_INT 0
5207: PUSH
5208: LD_INT 0
5210: PUSH
5211: LD_INT 0
5213: PUSH
5214: LD_INT 0
5216: PUSH
5217: LD_INT 0
5219: PUSH
5220: LD_INT 0
5222: PUSH
5223: LD_INT 0
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: ST_TO_ADDR
// for j = 1 to Side_Positions do
5236: LD_ADDR_VAR 0 4
5240: PUSH
5241: DOUBLE
5242: LD_INT 1
5244: DEC
5245: ST_TO_ADDR
5246: LD_EXP 23
5250: PUSH
5251: FOR_TO
5252: IFFALSE 5319
// if Side_Positions [ j ] then
5254: LD_EXP 23
5258: PUSH
5259: LD_VAR 0 4
5263: ARRAY
5264: IFFALSE 5317
// begin playersAmount := playersAmount + 1 ;
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_VAR 0 3
5275: PUSH
5276: LD_INT 1
5278: PLUS
5279: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5280: LD_ADDR_EXP 41
5284: PUSH
5285: LD_EXP 41
5289: PPUSH
5290: LD_VAR 0 4
5294: PPUSH
5295: LD_VAR 0 7
5299: PUSH
5300: LD_EXP 23
5304: PUSH
5305: LD_VAR 0 4
5309: ARRAY
5310: ARRAY
5311: PPUSH
5312: CALL_OW 1
5316: ST_TO_ADDR
// end ;
5317: GO 5251
5319: POP
5320: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5321: LD_ADDR_EXP 37
5325: PUSH
5326: LD_INT 3
5328: PUSH
5329: LD_EXP 15
5333: MUL
5334: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5335: LD_ADDR_EXP 35
5339: PUSH
5340: LD_VAR 0 3
5344: PUSH
5345: LD_EXP 37
5349: MUL
5350: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5351: LD_ADDR_EXP 36
5355: PUSH
5356: LD_EXP 35
5360: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5361: LD_ADDR_EXP 38
5365: PUSH
5366: LD_INT 0
5368: PUSH
5369: LD_INT 0
5371: PUSH
5372: LD_INT 0
5374: PUSH
5375: LD_INT 0
5377: PUSH
5378: LD_INT 0
5380: PUSH
5381: LD_INT 0
5383: PUSH
5384: LD_INT 0
5386: PUSH
5387: LD_INT 0
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5400: LD_ADDR_EXP 39
5404: PUSH
5405: LD_INT 0
5407: PUSH
5408: LD_INT 0
5410: PUSH
5411: LD_INT 0
5413: PUSH
5414: LD_INT 0
5416: PUSH
5417: LD_INT 0
5419: PUSH
5420: LD_INT 0
5422: PUSH
5423: LD_INT 0
5425: PUSH
5426: LD_INT 0
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: ST_TO_ADDR
// apeLevel := 1 ;
5439: LD_ADDR_EXP 40
5443: PUSH
5444: LD_INT 1
5446: ST_TO_ADDR
// if not apemanNumber then
5447: LD_EXP 35
5451: NOT
5452: IFFALSE 5456
// exit ;
5454: GO 5652
// for i := 1 to apemanPerPlayer do
5456: LD_ADDR_VAR 0 2
5460: PUSH
5461: DOUBLE
5462: LD_INT 1
5464: DEC
5465: ST_TO_ADDR
5466: LD_EXP 37
5470: PUSH
5471: FOR_TO
5472: IFFALSE 5650
// begin for j := 1 to Side_Positions do
5474: LD_ADDR_VAR 0 4
5478: PUSH
5479: DOUBLE
5480: LD_INT 1
5482: DEC
5483: ST_TO_ADDR
5484: LD_EXP 23
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5646
// if Side_Positions [ j ] then
5492: LD_EXP 23
5496: PUSH
5497: LD_VAR 0 4
5501: ARRAY
5502: IFFALSE 5644
// begin pos := Side_Positions [ j ] ;
5504: LD_ADDR_VAR 0 6
5508: PUSH
5509: LD_EXP 23
5513: PUSH
5514: LD_VAR 0 4
5518: ARRAY
5519: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
5520: LD_ADDR_EXP 39
5524: PUSH
5525: LD_EXP 39
5529: PPUSH
5530: LD_VAR 0 4
5534: PPUSH
5535: LD_EXP 39
5539: PUSH
5540: LD_VAR 0 4
5544: ARRAY
5545: PUSH
5546: LD_INT 1
5548: PLUS
5549: PPUSH
5550: CALL_OW 1
5554: ST_TO_ADDR
// ape := PrepareApeman ;
5555: LD_ADDR_VAR 0 5
5559: PUSH
5560: CALL 5657 0 0
5564: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
5565: LD_ADDR_EXP 38
5569: PUSH
5570: LD_EXP 38
5574: PPUSH
5575: LD_VAR 0 4
5579: PPUSH
5580: LD_EXP 38
5584: PUSH
5585: LD_VAR 0 4
5589: ARRAY
5590: PPUSH
5591: LD_EXP 38
5595: PUSH
5596: LD_VAR 0 4
5600: ARRAY
5601: PUSH
5602: LD_INT 1
5604: PLUS
5605: PPUSH
5606: LD_VAR 0 5
5610: PPUSH
5611: CALL_OW 1
5615: PPUSH
5616: CALL_OW 1
5620: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
5621: LD_VAR 0 5
5625: PPUSH
5626: LD_EXP 41
5630: PUSH
5631: LD_VAR 0 4
5635: ARRAY
5636: PPUSH
5637: LD_INT 0
5639: PPUSH
5640: CALL_OW 49
// end ;
5644: GO 5489
5646: POP
5647: POP
// end ;
5648: GO 5471
5650: POP
5651: POP
// end ;
5652: LD_VAR 0 1
5656: RET
// export function PrepareApeman ; var bonus ; begin
5657: LD_INT 0
5659: PPUSH
5660: PPUSH
// uc_side := 0 ;
5661: LD_ADDR_OWVAR 20
5665: PUSH
5666: LD_INT 0
5668: ST_TO_ADDR
// uc_nation := 0 ;
5669: LD_ADDR_OWVAR 21
5673: PUSH
5674: LD_INT 0
5676: ST_TO_ADDR
// InitHc ;
5677: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
5681: LD_ADDR_VAR 0 2
5685: PUSH
5686: LD_INT 1
5688: NEG
5689: PUSH
5690: LD_INT 0
5692: PUSH
5693: LD_INT 1
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: LIST
5700: PUSH
5701: LD_OWVAR 1
5705: PUSH
5706: LD_INT 3
5708: MOD
5709: PUSH
5710: LD_INT 1
5712: PLUS
5713: ARRAY
5714: ST_TO_ADDR
// hc_class := class_apeman ;
5715: LD_ADDR_OWVAR 28
5719: PUSH
5720: LD_INT 12
5722: ST_TO_ADDR
// hc_gallery :=  ;
5723: LD_ADDR_OWVAR 33
5727: PUSH
5728: LD_STRING 
5730: ST_TO_ADDR
// hc_name :=  ;
5731: LD_ADDR_OWVAR 26
5735: PUSH
5736: LD_STRING 
5738: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
5739: LD_ADDR_OWVAR 31
5743: PUSH
5744: LD_EXP 40
5748: PUSH
5749: LD_VAR 0 2
5753: PLUS
5754: PUSH
5755: LD_EXP 40
5759: PUSH
5760: LD_VAR 0 2
5764: PLUS
5765: PUSH
5766: LD_EXP 40
5770: PUSH
5771: LD_VAR 0 2
5775: PLUS
5776: PUSH
5777: LD_EXP 40
5781: PUSH
5782: LD_VAR 0 2
5786: PLUS
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
5794: LD_ADDR_OWVAR 35
5798: PUSH
5799: LD_INT 10
5801: PUSH
5802: LD_VAR 0 2
5806: MUL
5807: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
5808: LD_ADDR_OWVAR 29
5812: PUSH
5813: LD_INT 12
5815: PUSH
5816: LD_INT 10
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: ST_TO_ADDR
// result := CreateHuman ;
5823: LD_ADDR_VAR 0 1
5827: PUSH
5828: CALL_OW 44
5832: ST_TO_ADDR
// end ;
5833: LD_VAR 0 1
5837: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
5838: LD_INT 0
5840: PPUSH
5841: PPUSH
5842: PPUSH
// if not ape then
5843: LD_VAR 0 1
5847: NOT
5848: IFFALSE 5852
// exit ;
5850: GO 5977
// side := GetSide ( ape ) ;
5852: LD_ADDR_VAR 0 3
5856: PUSH
5857: LD_VAR 0 1
5861: PPUSH
5862: CALL_OW 255
5866: ST_TO_ADDR
// if not side then
5867: LD_VAR 0 3
5871: NOT
5872: IFFALSE 5926
// begin for i = 1 to apemanPos do
5874: LD_ADDR_VAR 0 4
5878: PUSH
5879: DOUBLE
5880: LD_INT 1
5882: DEC
5883: ST_TO_ADDR
5884: LD_EXP 38
5888: PUSH
5889: FOR_TO
5890: IFFALSE 5924
// if ape in apemanPos [ i ] then
5892: LD_VAR 0 1
5896: PUSH
5897: LD_EXP 38
5901: PUSH
5902: LD_VAR 0 4
5906: ARRAY
5907: IN
5908: IFFALSE 5922
// begin side := i ;
5910: LD_ADDR_VAR 0 3
5914: PUSH
5915: LD_VAR 0 4
5919: ST_TO_ADDR
// break ;
5920: GO 5924
// end ;
5922: GO 5889
5924: POP
5925: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
5926: LD_ADDR_EXP 38
5930: PUSH
5931: LD_EXP 38
5935: PPUSH
5936: LD_VAR 0 3
5940: PPUSH
5941: LD_EXP 38
5945: PUSH
5946: LD_VAR 0 3
5950: ARRAY
5951: PUSH
5952: LD_VAR 0 1
5956: DIFF
5957: PPUSH
5958: CALL_OW 1
5962: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
5963: LD_ADDR_EXP 35
5967: PUSH
5968: LD_EXP 35
5972: PUSH
5973: LD_INT 1
5975: MINUS
5976: ST_TO_ADDR
// end ; end_of_file
5977: LD_VAR 0 2
5981: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
5982: LD_VAR 0 1
5986: PPUSH
5987: CALL_OW 266
5991: PUSH
5992: LD_INT 0
5994: PUSH
5995: LD_INT 1
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: IN
6002: IFFALSE 6027
// SetBName ( b , @ & GetSide ( b ) ) ;
6004: LD_VAR 0 1
6008: PPUSH
6009: LD_STRING @
6011: PUSH
6012: LD_VAR 0 1
6016: PPUSH
6017: CALL_OW 255
6021: STR
6022: PPUSH
6023: CALL_OW 500
// if def_game_rules then
6027: LD_EXP 47
6031: IFFALSE 6068
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_VAR 0 1
6042: PPUSH
6043: CALL_OW 266
6047: PPUSH
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 255
6057: PPUSH
6058: LD_INT 0
6060: PPUSH
6061: LD_INT 1
6063: PPUSH
6064: CALL 15473 0 5
// end ;
6068: PPOPN 2
6070: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6071: LD_VAR 0 1
6075: PPUSH
6076: CALL_OW 266
6080: PUSH
6081: LD_INT 0
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: IN
6091: IFFALSE 6116
// SetBName ( b , @ & GetSide ( b ) ) ;
6093: LD_VAR 0 1
6097: PPUSH
6098: LD_STRING @
6100: PUSH
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 255
6110: STR
6111: PPUSH
6112: CALL_OW 500
// if def_game_rules then
6116: LD_EXP 47
6120: IFFALSE 6159
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6122: LD_VAR 0 1
6126: PPUSH
6127: LD_VAR 0 1
6131: PPUSH
6132: CALL_OW 266
6136: PPUSH
6137: LD_VAR 0 1
6141: PPUSH
6142: CALL_OW 255
6146: PPUSH
6147: LD_VAR 0 2
6151: PPUSH
6152: LD_INT 1
6154: PPUSH
6155: CALL 15473 0 5
// end ;
6159: PPOPN 3
6161: END
// on VehicleConstructed ( veh , fac ) do var side ;
6162: LD_INT 0
6164: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6165: LD_VAR 0 1
6169: PPUSH
6170: CALL_OW 263
6174: PUSH
6175: LD_INT 5
6177: EQUAL
6178: IFFALSE 6320
// begin side := GetSide ( veh ) ;
6180: LD_ADDR_VAR 0 3
6184: PUSH
6185: LD_VAR 0 1
6189: PPUSH
6190: CALL_OW 255
6194: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6195: LD_ADDR_EXP 38
6199: PUSH
6200: LD_EXP 38
6204: PPUSH
6205: LD_VAR 0 3
6209: PPUSH
6210: LD_EXP 38
6214: PUSH
6215: LD_VAR 0 3
6219: ARRAY
6220: PPUSH
6221: LD_INT 52
6223: PUSH
6224: EMPTY
6225: LIST
6226: PPUSH
6227: CALL_OW 72
6231: PUSH
6232: LD_INT 22
6234: PUSH
6235: LD_VAR 0 3
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 2
6246: PUSH
6247: LD_INT 33
6249: PUSH
6250: LD_INT 5
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 12
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 15
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 16
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 17
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PPUSH
6309: CALL_OW 69
6313: UNION
6314: PPUSH
6315: CALL_OW 1
6319: ST_TO_ADDR
// end ; end ;
6320: PPOPN 3
6322: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6323: LD_INT 0
6325: PPUSH
6326: PPUSH
6327: PPUSH
6328: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6329: LD_VAR 0 1
6333: PPUSH
6334: CALL_OW 257
6338: PUSH
6339: LD_INT 12
6341: PUSH
6342: LD_INT 15
6344: PUSH
6345: LD_INT 17
6347: PUSH
6348: LD_INT 16
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: IN
6357: PUSH
6358: LD_VAR 0 1
6362: PPUSH
6363: CALL_OW 263
6367: PUSH
6368: LD_INT 5
6370: EQUAL
6371: OR
6372: IFFALSE 6383
// ApeKilled ( j ) ;
6374: LD_VAR 0 1
6378: PPUSH
6379: CALL 5838 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6383: LD_VAR 0 1
6387: PPUSH
6388: CALL_OW 266
6392: PUSH
6393: LD_INT 0
6395: PUSH
6396: LD_INT 1
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: IN
6403: IFFALSE 6485
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6405: LD_ADDR_VAR 0 4
6409: PUSH
6410: LD_EXP 23
6414: PUSH
6415: LD_VAR 0 1
6419: PPUSH
6420: CALL_OW 255
6424: ARRAY
6425: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6426: LD_ADDR_VAR 0 2
6430: PUSH
6431: LD_EXP 31
6435: PUSH
6436: LD_VAR 0 4
6440: ARRAY
6441: PUSH
6442: LD_INT 1
6444: ARRAY
6445: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6446: LD_ADDR_VAR 0 3
6450: PUSH
6451: LD_EXP 31
6455: PUSH
6456: LD_VAR 0 4
6460: ARRAY
6461: PUSH
6462: LD_INT 2
6464: ARRAY
6465: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6466: LD_VAR 0 2
6470: PPUSH
6471: LD_VAR 0 3
6475: PPUSH
6476: CALL_OW 420
6480: PPUSH
6481: CALL_OW 419
// end ; if def_game_rules then
6485: LD_EXP 47
6489: IFFALSE 6588
// if ( GetType ( j ) = 3 ) then
6491: LD_VAR 0 1
6495: PPUSH
6496: CALL_OW 247
6500: PUSH
6501: LD_INT 3
6503: EQUAL
6504: IFFALSE 6544
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
6506: LD_VAR 0 1
6510: PPUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 266
6520: PPUSH
6521: LD_VAR 0 1
6525: PPUSH
6526: CALL_OW 255
6530: PPUSH
6531: LD_INT 0
6533: PPUSH
6534: LD_INT 1
6536: NEG
6537: PPUSH
6538: CALL 15473 0 5
6542: GO 6588
// if ( GetChassis ( j ) = 25 ) then
6544: LD_VAR 0 1
6548: PPUSH
6549: CALL_OW 265
6553: PUSH
6554: LD_INT 25
6556: EQUAL
6557: IFFALSE 6588
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
6559: LD_VAR 0 1
6563: PPUSH
6564: LD_INT 37
6566: PPUSH
6567: LD_VAR 0 1
6571: PPUSH
6572: CALL_OW 255
6576: PPUSH
6577: LD_INT 0
6579: PPUSH
6580: LD_INT 1
6582: NEG
6583: PPUSH
6584: CALL 15473 0 5
// end ;
6588: PPOPN 5
6590: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
6591: LD_EXP 47
6595: PUSH
6596: LD_VAR 0 1
6600: PPUSH
6601: CALL_OW 265
6605: PUSH
6606: LD_INT 25
6608: EQUAL
6609: AND
6610: IFFALSE 6642
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
6612: LD_VAR 0 1
6616: PPUSH
6617: LD_INT 37
6619: PPUSH
6620: LD_VAR 0 1
6624: PPUSH
6625: CALL_OW 255
6629: PPUSH
6630: LD_VAR 0 3
6634: PPUSH
6635: LD_INT 1
6637: PPUSH
6638: CALL 15473 0 5
// end ;
6642: PPOPN 4
6644: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6645: LD_VAR 0 1
6649: PPUSH
6650: LD_VAR 0 2
6654: PPUSH
6655: LD_VAR 0 3
6659: PPUSH
6660: LD_OWVAR 2
6664: PPUSH
6665: CALL 17005 0 4
6669: PPOPN 3
6671: END
// export artefact_number , artefact_num , artefact_size ; export labs_in_use ; export function init_alien_research ; var art_icons , art_events , art_difficulty , art_cost , art_recharge ; begin
6672: LD_INT 0
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
// artefact_number := 3 ;
6680: LD_ADDR_EXP 42
6684: PUSH
6685: LD_INT 3
6687: ST_TO_ADDR
// artefact_num := [ 1 , 0 , 2 , 0 , 3 ] ;
6688: LD_ADDR_EXP 43
6692: PUSH
6693: LD_INT 1
6695: PUSH
6696: LD_INT 0
6698: PUSH
6699: LD_INT 2
6701: PUSH
6702: LD_INT 0
6704: PUSH
6705: LD_INT 3
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: ST_TO_ADDR
// artefact_size := [ 1 , 3 , 5 ] ;
6715: LD_ADDR_EXP 44
6719: PUSH
6720: LD_INT 1
6722: PUSH
6723: LD_INT 3
6725: PUSH
6726: LD_INT 5
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: ST_TO_ADDR
// art_icons := [ [ art_exp_left , art_use_eye ] , [ art_exp_mid , art_use_sibexplosion ] , [ art_exp_right , art_use_power ] ] ;
6734: LD_ADDR_VAR 0 2
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: LD_INT 4
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 2
6751: PUSH
6752: LD_INT 5
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 9
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: ST_TO_ADDR
// art_events := [ art_place , art_unit , art_place ] ;
6774: LD_ADDR_VAR 0 3
6778: PUSH
6779: LD_INT 3
6781: PUSH
6782: LD_INT 4
6784: PUSH
6785: LD_INT 3
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: ST_TO_ADDR
// art_difficulty := [ 150 , 250 , 400 ] ;
6793: LD_ADDR_VAR 0 4
6797: PUSH
6798: LD_INT 150
6800: PUSH
6801: LD_INT 250
6803: PUSH
6804: LD_INT 400
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: ST_TO_ADDR
// art_cost := [ 2 , 10 , 20 ] ;
6812: LD_ADDR_VAR 0 5
6816: PUSH
6817: LD_INT 2
6819: PUSH
6820: LD_INT 10
6822: PUSH
6823: LD_INT 20
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: LIST
6830: ST_TO_ADDR
// art_recharge := [ 6 , 18 , 50 ] ;
6831: LD_ADDR_VAR 0 6
6835: PUSH
6836: LD_INT 6
6838: PUSH
6839: LD_INT 18
6841: PUSH
6842: LD_INT 50
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: ST_TO_ADDR
// Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ;
6850: LD_VAR 0 2
6854: PPUSH
6855: LD_VAR 0 3
6859: PPUSH
6860: LD_VAR 0 4
6864: PPUSH
6865: LD_VAR 0 5
6869: PPUSH
6870: LD_VAR 0 6
6874: PPUSH
6875: CALL 6884 0 5
// end ;
6879: LD_VAR 0 1
6883: RET
// function Get_Init_Artefacts ( art_icons , art_events , art_difficulty , art_cost , art_recharge ) ; var un , i , side , base ; begin
6884: LD_INT 0
6886: PPUSH
6887: PPUSH
6888: PPUSH
6889: PPUSH
6890: PPUSH
// disable ( 1 ) ;
6891: LD_INT 1
6893: DISABLE_MARKED
// disable ( 5 ) ;
6894: LD_INT 5
6896: DISABLE_MARKED
// disable ( 6 ) ;
6897: LD_INT 6
6899: DISABLE_MARKED
// disable ( 7 ) ;
6900: LD_INT 7
6902: DISABLE_MARKED
// for side = 1 to 8 do
6903: LD_ADDR_VAR 0 9
6907: PUSH
6908: DOUBLE
6909: LD_INT 1
6911: DEC
6912: ST_TO_ADDR
6913: LD_INT 8
6915: PUSH
6916: FOR_TO
6917: IFFALSE 6933
// SetArtifactRes ( side , state_enabled ) ;
6919: LD_VAR 0 9
6923: PPUSH
6924: LD_INT 1
6926: PPUSH
6927: CALL_OW 467
6931: GO 6916
6933: POP
6934: POP
// for un = 0 to ( artefact_number - 1 ) do
6935: LD_ADDR_VAR 0 7
6939: PUSH
6940: DOUBLE
6941: LD_INT 0
6943: DEC
6944: ST_TO_ADDR
6945: LD_EXP 42
6949: PUSH
6950: LD_INT 1
6952: MINUS
6953: PUSH
6954: FOR_TO
6955: IFFALSE 7353
// begin base := un * 100 ;
6957: LD_ADDR_VAR 0 10
6961: PUSH
6962: LD_VAR 0 7
6966: PUSH
6967: LD_INT 100
6969: MUL
6970: ST_TO_ADDR
// SetTag ( base + 01 , art_icons [ un + 1 ] [ 1 ] ) ;
6971: LD_VAR 0 10
6975: PUSH
6976: LD_INT 1
6978: PLUS
6979: PPUSH
6980: LD_VAR 0 1
6984: PUSH
6985: LD_VAR 0 7
6989: PUSH
6990: LD_INT 1
6992: PLUS
6993: ARRAY
6994: PUSH
6995: LD_INT 1
6997: ARRAY
6998: PPUSH
6999: CALL_OW 109
// SetTag ( base + 02 , art_icons [ un + 1 ] [ 2 ] ) ;
7003: LD_VAR 0 10
7007: PUSH
7008: LD_INT 2
7010: PLUS
7011: PPUSH
7012: LD_VAR 0 1
7016: PUSH
7017: LD_VAR 0 7
7021: PUSH
7022: LD_INT 1
7024: PLUS
7025: ARRAY
7026: PUSH
7027: LD_INT 2
7029: ARRAY
7030: PPUSH
7031: CALL_OW 109
// SetTag ( base + 03 , art_events [ un + 1 ] ) ;
7035: LD_VAR 0 10
7039: PUSH
7040: LD_INT 3
7042: PLUS
7043: PPUSH
7044: LD_VAR 0 2
7048: PUSH
7049: LD_VAR 0 7
7053: PUSH
7054: LD_INT 1
7056: PLUS
7057: ARRAY
7058: PPUSH
7059: CALL_OW 109
// SetTag ( base + 05 , art_difficulty [ un + 1 ] ) ;
7063: LD_VAR 0 10
7067: PUSH
7068: LD_INT 5
7070: PLUS
7071: PPUSH
7072: LD_VAR 0 3
7076: PUSH
7077: LD_VAR 0 7
7081: PUSH
7082: LD_INT 1
7084: PLUS
7085: ARRAY
7086: PPUSH
7087: CALL_OW 109
// SetTag ( base + 06 , art_cost [ un + 1 ] ) ;
7091: LD_VAR 0 10
7095: PUSH
7096: LD_INT 6
7098: PLUS
7099: PPUSH
7100: LD_VAR 0 4
7104: PUSH
7105: LD_VAR 0 7
7109: PUSH
7110: LD_INT 1
7112: PLUS
7113: ARRAY
7114: PPUSH
7115: CALL_OW 109
// SetTag ( base + 07 , art_recharge [ un + 1 ] ) ;
7119: LD_VAR 0 10
7123: PUSH
7124: LD_INT 7
7126: PLUS
7127: PPUSH
7128: LD_VAR 0 5
7132: PUSH
7133: LD_VAR 0 7
7137: PUSH
7138: LD_INT 1
7140: PLUS
7141: ARRAY
7142: PPUSH
7143: CALL_OW 109
// SetTag ( base + 08 , false ) ;
7147: LD_VAR 0 10
7151: PUSH
7152: LD_INT 8
7154: PLUS
7155: PPUSH
7156: LD_INT 0
7158: PPUSH
7159: CALL_OW 109
// SetTag ( base + 09 , false ) ;
7163: LD_VAR 0 10
7167: PUSH
7168: LD_INT 9
7170: PLUS
7171: PPUSH
7172: LD_INT 0
7174: PPUSH
7175: CALL_OW 109
// SetTag ( base + 11 , 0 ) ;
7179: LD_VAR 0 10
7183: PUSH
7184: LD_INT 11
7186: PLUS
7187: PPUSH
7188: LD_INT 0
7190: PPUSH
7191: CALL_OW 109
// SetTag ( base + 12 , false ) ;
7195: LD_VAR 0 10
7199: PUSH
7200: LD_INT 12
7202: PLUS
7203: PPUSH
7204: LD_INT 0
7206: PPUSH
7207: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7211: LD_VAR 0 10
7215: PUSH
7216: LD_INT 13
7218: PLUS
7219: PPUSH
7220: LD_INT 0
7222: PPUSH
7223: CALL_OW 109
// for i = 0 to 7 do
7227: LD_ADDR_VAR 0 8
7231: PUSH
7232: DOUBLE
7233: LD_INT 0
7235: DEC
7236: ST_TO_ADDR
7237: LD_INT 7
7239: PUSH
7240: FOR_TO
7241: IFFALSE 7349
// begin SetTag ( base + i * 10 + 21 , false ) ;
7243: LD_VAR 0 10
7247: PUSH
7248: LD_VAR 0 8
7252: PUSH
7253: LD_INT 10
7255: MUL
7256: PLUS
7257: PUSH
7258: LD_INT 21
7260: PLUS
7261: PPUSH
7262: LD_INT 0
7264: PPUSH
7265: CALL_OW 109
// SetTag ( base + i * 10 + 22 , 0 ) ;
7269: LD_VAR 0 10
7273: PUSH
7274: LD_VAR 0 8
7278: PUSH
7279: LD_INT 10
7281: MUL
7282: PLUS
7283: PUSH
7284: LD_INT 22
7286: PLUS
7287: PPUSH
7288: LD_INT 0
7290: PPUSH
7291: CALL_OW 109
// SetTag ( base + i * 10 + 23 , 0 ) ;
7295: LD_VAR 0 10
7299: PUSH
7300: LD_VAR 0 8
7304: PUSH
7305: LD_INT 10
7307: MUL
7308: PLUS
7309: PUSH
7310: LD_INT 23
7312: PLUS
7313: PPUSH
7314: LD_INT 0
7316: PPUSH
7317: CALL_OW 109
// SetTag ( base + i * 10 + 25 , 0 ) ;
7321: LD_VAR 0 10
7325: PUSH
7326: LD_VAR 0 8
7330: PUSH
7331: LD_INT 10
7333: MUL
7334: PLUS
7335: PUSH
7336: LD_INT 25
7338: PLUS
7339: PPUSH
7340: LD_INT 0
7342: PPUSH
7343: CALL_OW 109
// end ;
7347: GO 7240
7349: POP
7350: POP
// end ;
7351: GO 6954
7353: POP
7354: POP
// enable ( 20 ) ;
7355: LD_INT 20
7357: ENABLE_MARKED
// labs_in_use := [ ] ;
7358: LD_ADDR_EXP 45
7362: PUSH
7363: EMPTY
7364: ST_TO_ADDR
// if def_artefact_one then
7365: LD_EXP 1
7369: IFFALSE 7396
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 1 ] , artefact_area , false ) ;
7371: LD_INT 4
7373: PPUSH
7374: LD_EXP 44
7378: PUSH
7379: LD_INT 1
7381: ARRAY
7382: PPUSH
7383: LD_INT 16
7385: PPUSH
7386: LD_INT 0
7388: PPUSH
7389: CALL_OW 59
// enable ( 5 ) ;
7393: LD_INT 5
7395: ENABLE_MARKED
// end ; if def_artefact_two then
7396: LD_EXP 2
7400: IFFALSE 7427
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 2 ] , artefact_area , false ) ;
7402: LD_INT 4
7404: PPUSH
7405: LD_EXP 44
7409: PUSH
7410: LD_INT 2
7412: ARRAY
7413: PPUSH
7414: LD_INT 16
7416: PPUSH
7417: LD_INT 0
7419: PPUSH
7420: CALL_OW 59
// enable ( 6 ) ;
7424: LD_INT 6
7426: ENABLE_MARKED
// end ; if def_artefact_three then
7427: LD_EXP 3
7431: IFFALSE 7458
// begin CreateResourcesArea ( mat_artefact , artefact_size [ 3 ] , artefact_area , false ) ;
7433: LD_INT 4
7435: PPUSH
7436: LD_EXP 44
7440: PUSH
7441: LD_INT 3
7443: ARRAY
7444: PPUSH
7445: LD_INT 16
7447: PPUSH
7448: LD_INT 0
7450: PPUSH
7451: CALL_OW 59
// enable ( 7 ) ;
7455: LD_INT 7
7457: ENABLE_MARKED
// end ; end ;
7458: LD_VAR 0 6
7462: RET
// on ArtifactUnloaded ( un , size ) do var art , base ;
7463: LD_INT 0
7465: PPUSH
7466: PPUSH
// begin art := artefact_num [ size ] ;
7467: LD_ADDR_VAR 0 3
7471: PUSH
7472: LD_EXP 43
7476: PUSH
7477: LD_VAR 0 2
7481: ARRAY
7482: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7483: LD_ADDR_VAR 0 4
7487: PUSH
7488: LD_VAR 0 3
7492: PUSH
7493: LD_INT 1
7495: MINUS
7496: PUSH
7497: LD_INT 100
7499: MUL
7500: ST_TO_ADDR
// SetTag ( base + 09 , false ) ;
7501: LD_VAR 0 4
7505: PUSH
7506: LD_INT 9
7508: PLUS
7509: PPUSH
7510: LD_INT 0
7512: PPUSH
7513: CALL_OW 109
// SetTag ( base + 13 , false ) ;
7517: LD_VAR 0 4
7521: PUSH
7522: LD_INT 13
7524: PLUS
7525: PPUSH
7526: LD_INT 0
7528: PPUSH
7529: CALL_OW 109
// Init_Lab ( art ) ;
7533: LD_VAR 0 3
7537: PPUSH
7538: CALL 9014 0 1
// end ;
7542: PPOPN 4
7544: END
// on ArtifactLoaded ( un , size ) do var art , base , side ;
7545: LD_INT 0
7547: PPUSH
7548: PPUSH
7549: PPUSH
// begin art := artefact_num [ size ] ;
7550: LD_ADDR_VAR 0 3
7554: PUSH
7555: LD_EXP 43
7559: PUSH
7560: LD_VAR 0 2
7564: ARRAY
7565: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
7566: LD_ADDR_VAR 0 4
7570: PUSH
7571: LD_VAR 0 3
7575: PUSH
7576: LD_INT 1
7578: MINUS
7579: PUSH
7580: LD_INT 100
7582: MUL
7583: ST_TO_ADDR
// SetTag ( base + 09 , true ) ;
7584: LD_VAR 0 4
7588: PUSH
7589: LD_INT 9
7591: PLUS
7592: PPUSH
7593: LD_INT 1
7595: PPUSH
7596: CALL_OW 109
// SetTag ( base + 13 , un ) ;
7600: LD_VAR 0 4
7604: PUSH
7605: LD_INT 13
7607: PLUS
7608: PPUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: CALL_OW 109
// if GetTag ( base + 11 ) then
7618: LD_VAR 0 4
7622: PUSH
7623: LD_INT 11
7625: PLUS
7626: PPUSH
7627: CALL_OW 110
7631: IFFALSE 7794
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
7633: LD_ADDR_VAR 0 5
7637: PUSH
7638: LD_VAR 0 4
7642: PUSH
7643: LD_INT 11
7645: PLUS
7646: PPUSH
7647: CALL_OW 110
7651: PPUSH
7652: CALL_OW 255
7656: ST_TO_ADDR
// if GetTag ( base + 12 ) then
7657: LD_VAR 0 4
7661: PUSH
7662: LD_INT 12
7664: PLUS
7665: PPUSH
7666: CALL_OW 110
7670: IFFALSE 7738
// begin ComCancel ( GetTag ( base + 11 ) ) ;
7672: LD_VAR 0 4
7676: PUSH
7677: LD_INT 11
7679: PLUS
7680: PPUSH
7681: CALL_OW 110
7685: PPUSH
7686: CALL_OW 127
// wait ( 5 ) ;
7690: LD_INT 5
7692: PPUSH
7693: CALL_OW 67
// labs_in_use := labs_in_use diff GetTag ( base + 11 ) ;
7697: LD_ADDR_EXP 45
7701: PUSH
7702: LD_EXP 45
7706: PUSH
7707: LD_VAR 0 4
7711: PUSH
7712: LD_INT 11
7714: PLUS
7715: PPUSH
7716: CALL_OW 110
7720: DIFF
7721: ST_TO_ADDR
// SetTag ( base + 12 , false ) ;
7722: LD_VAR 0 4
7726: PUSH
7727: LD_INT 12
7729: PLUS
7730: PPUSH
7731: LD_INT 0
7733: PPUSH
7734: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
7738: LD_VAR 0 4
7742: PUSH
7743: LD_VAR 0 5
7747: PUSH
7748: LD_INT 10
7750: MUL
7751: PLUS
7752: PUSH
7753: LD_INT 11
7755: PLUS
7756: PPUSH
7757: CALL_OW 110
7761: NOT
7762: IFFALSE 7778
// DeInit_Lab ( side , art ) ;
7764: LD_VAR 0 5
7768: PPUSH
7769: LD_VAR 0 3
7773: PPUSH
7774: CALL 9550 0 2
// SetTag ( base + 11 , 0 ) ;
7778: LD_VAR 0 4
7782: PUSH
7783: LD_INT 11
7785: PLUS
7786: PPUSH
7787: LD_INT 0
7789: PPUSH
7790: CALL_OW 109
// end ; end ;
7794: PPOPN 5
7796: END
// on ArtifactResearchComplete ( lab ) do var un , side ;
7797: LD_INT 0
7799: PPUSH
7800: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7801: LD_ADDR_VAR 0 3
7805: PUSH
7806: LD_VAR 0 1
7810: PPUSH
7811: CALL_OW 255
7815: PUSH
7816: LD_INT 1
7818: MINUS
7819: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7820: LD_ADDR_VAR 0 2
7824: PUSH
7825: DOUBLE
7826: LD_INT 0
7828: DEC
7829: ST_TO_ADDR
7830: LD_EXP 42
7834: PUSH
7835: LD_INT 1
7837: MINUS
7838: PUSH
7839: FOR_TO
7840: IFFALSE 7882
// if lab = GetTag ( un * 100 + 11 ) then
7842: LD_VAR 0 1
7846: PUSH
7847: LD_VAR 0 2
7851: PUSH
7852: LD_INT 100
7854: MUL
7855: PUSH
7856: LD_INT 11
7858: PLUS
7859: PPUSH
7860: CALL_OW 110
7864: EQUAL
7865: IFFALSE 7880
// Init_Lab ( un + 1 ) ;
7867: LD_VAR 0 2
7871: PUSH
7872: LD_INT 1
7874: PLUS
7875: PPUSH
7876: CALL 9014 0 1
7880: GO 7839
7882: POP
7883: POP
// end ;
7884: PPOPN 3
7886: END
// on SpecResearchCancel ( lab , progress ) do var un , side ;
7887: LD_INT 0
7889: PPUSH
7890: PPUSH
// begin side := GetSide ( lab ) - 1 ;
7891: LD_ADDR_VAR 0 4
7895: PUSH
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 255
7905: PUSH
7906: LD_INT 1
7908: MINUS
7909: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
7910: LD_ADDR_VAR 0 3
7914: PUSH
7915: DOUBLE
7916: LD_INT 0
7918: DEC
7919: ST_TO_ADDR
7920: LD_EXP 42
7924: PUSH
7925: LD_INT 1
7927: MINUS
7928: PUSH
7929: FOR_TO
7930: IFFALSE 8048
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
7932: LD_VAR 0 3
7936: PUSH
7937: LD_INT 100
7939: MUL
7940: PUSH
7941: LD_INT 11
7943: PLUS
7944: PPUSH
7945: CALL_OW 110
7949: PUSH
7950: LD_VAR 0 1
7954: EQUAL
7955: PUSH
7956: LD_VAR 0 3
7960: PUSH
7961: LD_INT 100
7963: MUL
7964: PUSH
7965: LD_INT 12
7967: PLUS
7968: PPUSH
7969: CALL_OW 110
7973: AND
7974: IFFALSE 8046
// begin SetTag ( un * 100 + side * 10 + 22 , progress ) ;
7976: LD_VAR 0 3
7980: PUSH
7981: LD_INT 100
7983: MUL
7984: PUSH
7985: LD_VAR 0 4
7989: PUSH
7990: LD_INT 10
7992: MUL
7993: PLUS
7994: PUSH
7995: LD_INT 22
7997: PLUS
7998: PPUSH
7999: LD_VAR 0 2
8003: PPUSH
8004: CALL_OW 109
// SetTag ( un * 100 + 12 , false ) ;
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 100
8015: MUL
8016: PUSH
8017: LD_INT 12
8019: PLUS
8020: PPUSH
8021: LD_INT 0
8023: PPUSH
8024: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8028: LD_ADDR_EXP 45
8032: PUSH
8033: LD_EXP 45
8037: PUSH
8038: LD_VAR 0 1
8042: DIFF
8043: ST_TO_ADDR
// break ;
8044: GO 8048
// end ;
8046: GO 7929
8048: POP
8049: POP
// Update_Artefact ( lab ) ;
8050: LD_VAR 0 1
8054: PPUSH
8055: CALL 9689 0 1
// end ;
8059: PPOPN 4
8061: END
// on SpecResearchComplete ( lab ) do var un , side ;
8062: LD_INT 0
8064: PPUSH
8065: PPUSH
// begin side := GetSide ( lab ) - 1 ;
8066: LD_ADDR_VAR 0 3
8070: PUSH
8071: LD_VAR 0 1
8075: PPUSH
8076: CALL_OW 255
8080: PUSH
8081: LD_INT 1
8083: MINUS
8084: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8085: LD_ADDR_VAR 0 2
8089: PUSH
8090: DOUBLE
8091: LD_INT 0
8093: DEC
8094: ST_TO_ADDR
8095: LD_EXP 42
8099: PUSH
8100: LD_INT 1
8102: MINUS
8103: PUSH
8104: FOR_TO
8105: IFFALSE 8251
// if ( GetTag ( un * 100 + 11 ) = lab ) and GetTag ( un * 100 + 12 ) then
8107: LD_VAR 0 2
8111: PUSH
8112: LD_INT 100
8114: MUL
8115: PUSH
8116: LD_INT 11
8118: PLUS
8119: PPUSH
8120: CALL_OW 110
8124: PUSH
8125: LD_VAR 0 1
8129: EQUAL
8130: PUSH
8131: LD_VAR 0 2
8135: PUSH
8136: LD_INT 100
8138: MUL
8139: PUSH
8140: LD_INT 12
8142: PLUS
8143: PPUSH
8144: CALL_OW 110
8148: AND
8149: IFFALSE 8249
// begin SetTag ( un * 100 + 12 , false ) ;
8151: LD_VAR 0 2
8155: PUSH
8156: LD_INT 100
8158: MUL
8159: PUSH
8160: LD_INT 12
8162: PLUS
8163: PPUSH
8164: LD_INT 0
8166: PPUSH
8167: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 21 , true ) ;
8171: LD_VAR 0 2
8175: PUSH
8176: LD_INT 100
8178: MUL
8179: PUSH
8180: LD_VAR 0 3
8184: PUSH
8185: LD_INT 10
8187: MUL
8188: PLUS
8189: PUSH
8190: LD_INT 21
8192: PLUS
8193: PPUSH
8194: LD_INT 1
8196: PPUSH
8197: CALL_OW 109
// SetTag ( un * 100 + side * 10 + 25 , lab ) ;
8201: LD_VAR 0 2
8205: PUSH
8206: LD_INT 100
8208: MUL
8209: PUSH
8210: LD_VAR 0 3
8214: PUSH
8215: LD_INT 10
8217: MUL
8218: PLUS
8219: PUSH
8220: LD_INT 25
8222: PLUS
8223: PPUSH
8224: LD_VAR 0 1
8228: PPUSH
8229: CALL_OW 109
// labs_in_use := labs_in_use diff lab ;
8233: LD_ADDR_EXP 45
8237: PUSH
8238: LD_EXP 45
8242: PUSH
8243: LD_VAR 0 1
8247: DIFF
8248: ST_TO_ADDR
// end ;
8249: GO 8104
8251: POP
8252: POP
// Update_Artefact ( lab ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: CALL 9689 0 1
// end ;
8262: PPOPN 3
8264: END
// on ArtifactUsed ( side , number , p1 , p2 ) do var un , succes , art , base ;
8265: LD_INT 0
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// begin art := ( ( number - 1 ) mod 3 ) + 1 ;
8271: LD_ADDR_VAR 0 7
8275: PUSH
8276: LD_VAR 0 2
8280: PUSH
8281: LD_INT 1
8283: MINUS
8284: PUSH
8285: LD_INT 3
8287: MOD
8288: PUSH
8289: LD_INT 1
8291: PLUS
8292: ST_TO_ADDR
// base := ( art - 1 ) * 100 ;
8293: LD_ADDR_VAR 0 8
8297: PUSH
8298: LD_VAR 0 7
8302: PUSH
8303: LD_INT 1
8305: MINUS
8306: PUSH
8307: LD_INT 100
8309: MUL
8310: ST_TO_ADDR
// if number <= 3 then
8311: LD_VAR 0 2
8315: PUSH
8316: LD_INT 3
8318: LESSEQUAL
8319: IFFALSE 8551
// begin SetSpecResearch ( GetTag ( base + 11 ) , GetTag ( base + 05 ) , true ) ;
8321: LD_VAR 0 8
8325: PUSH
8326: LD_INT 11
8328: PLUS
8329: PPUSH
8330: CALL_OW 110
8334: PPUSH
8335: LD_VAR 0 8
8339: PUSH
8340: LD_INT 5
8342: PLUS
8343: PPUSH
8344: CALL_OW 110
8348: PPUSH
8349: LD_INT 1
8351: PPUSH
8352: CALL_OW 486
// SetWorkingProgress ( GetTag ( base + 11 ) , GetTag ( base + side * 10 + 12 ) ) ;
8356: LD_VAR 0 8
8360: PUSH
8361: LD_INT 11
8363: PLUS
8364: PPUSH
8365: CALL_OW 110
8369: PPUSH
8370: LD_VAR 0 8
8374: PUSH
8375: LD_VAR 0 1
8379: PUSH
8380: LD_INT 10
8382: MUL
8383: PLUS
8384: PUSH
8385: LD_INT 12
8387: PLUS
8388: PPUSH
8389: CALL_OW 110
8393: PPUSH
8394: CALL_OW 329
// SetTag ( base + 12 , true ) ;
8398: LD_VAR 0 8
8402: PUSH
8403: LD_INT 12
8405: PLUS
8406: PPUSH
8407: LD_INT 1
8409: PPUSH
8410: CALL_OW 109
// labs_in_use := labs_in_use ^ GetTag ( base + 11 ) ;
8414: LD_ADDR_EXP 45
8418: PUSH
8419: LD_EXP 45
8423: PUSH
8424: LD_VAR 0 8
8428: PUSH
8429: LD_INT 11
8431: PLUS
8432: PPUSH
8433: CALL_OW 110
8437: ADD
8438: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
8439: LD_ADDR_VAR 0 5
8443: PUSH
8444: DOUBLE
8445: LD_INT 0
8447: DEC
8448: ST_TO_ADDR
8449: LD_EXP 42
8453: PUSH
8454: LD_INT 1
8456: MINUS
8457: PUSH
8458: FOR_TO
8459: IFFALSE 8547
// if GetTag ( base + 11 ) in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
8461: LD_VAR 0 8
8465: PUSH
8466: LD_INT 11
8468: PLUS
8469: PPUSH
8470: CALL_OW 110
8474: PUSH
8475: LD_VAR 0 5
8479: PUSH
8480: LD_INT 100
8482: MUL
8483: PUSH
8484: LD_INT 11
8486: PLUS
8487: PPUSH
8488: CALL_OW 110
8492: PUSH
8493: LD_VAR 0 5
8497: PUSH
8498: LD_INT 100
8500: MUL
8501: PUSH
8502: LD_VAR 0 1
8506: PUSH
8507: LD_INT 10
8509: MUL
8510: PLUS
8511: PUSH
8512: LD_INT 15
8514: PLUS
8515: PPUSH
8516: CALL_OW 110
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: IN
8525: IFFALSE 8545
// DeInit_Lab ( side , un + 1 ) ;
8527: LD_VAR 0 1
8531: PPUSH
8532: LD_VAR 0 5
8536: PUSH
8537: LD_INT 1
8539: PLUS
8540: PPUSH
8541: CALL 9550 0 2
8545: GO 8458
8547: POP
8548: POP
// end else
8549: GO 8725
// begin succes := false ;
8551: LD_ADDR_VAR 0 6
8555: PUSH
8556: LD_INT 0
8558: ST_TO_ADDR
// case art of 1 :
8559: LD_VAR 0 7
8563: PUSH
8564: LD_INT 1
8566: DOUBLE
8567: EQUAL
8568: IFTRUE 8572
8570: GO 8600
8572: POP
// succes := Show_me_map ( side , p1 , p2 ) ; 2 :
8573: LD_ADDR_VAR 0 6
8577: PUSH
8578: LD_VAR 0 1
8582: PPUSH
8583: LD_VAR 0 3
8587: PPUSH
8588: LD_VAR 0 4
8592: PPUSH
8593: CALL 10122 0 3
8597: ST_TO_ADDR
8598: GO 8668
8600: LD_INT 2
8602: DOUBLE
8603: EQUAL
8604: IFTRUE 8608
8606: GO 8631
8608: POP
// succes := Destroy_siberite ( side , p1 ) ; 3 :
8609: LD_ADDR_VAR 0 6
8613: PUSH
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_VAR 0 3
8623: PPUSH
8624: CALL 10360 0 2
8628: ST_TO_ADDR
8629: GO 8668
8631: LD_INT 3
8633: DOUBLE
8634: EQUAL
8635: IFTRUE 8639
8637: GO 8667
8639: POP
// succes := Contamine ( side , p1 , p2 ) ; end ;
8640: LD_ADDR_VAR 0 6
8644: PUSH
8645: LD_VAR 0 1
8649: PPUSH
8650: LD_VAR 0 3
8654: PPUSH
8655: LD_VAR 0 4
8659: PPUSH
8660: CALL 10756 0 3
8664: ST_TO_ADDR
8665: GO 8668
8667: POP
// if succes then
8668: LD_VAR 0 6
8672: IFFALSE 8725
// begin SetTag ( base + side * 10 + 13 , GetTag ( base + 07 ) ) ;
8674: LD_VAR 0 8
8678: PUSH
8679: LD_VAR 0 1
8683: PUSH
8684: LD_INT 10
8686: MUL
8687: PLUS
8688: PUSH
8689: LD_INT 13
8691: PLUS
8692: PPUSH
8693: LD_VAR 0 8
8697: PUSH
8698: LD_INT 7
8700: PLUS
8701: PPUSH
8702: CALL_OW 110
8706: PPUSH
8707: CALL_OW 109
// Shadow_Artefact ( side , art ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_VAR 0 7
8720: PPUSH
8721: CALL 8728 0 2
// end ; end ; end ;
8725: PPOPN 8
8727: END
// export function Shadow_Artefact ( side , art ) ; var base , lab ; begin
8728: LD_INT 0
8730: PPUSH
8731: PPUSH
8732: PPUSH
// base := ( art - 1 ) * 100 ;
8733: LD_ADDR_VAR 0 4
8737: PUSH
8738: LD_VAR 0 2
8742: PUSH
8743: LD_INT 1
8745: MINUS
8746: PUSH
8747: LD_INT 100
8749: MUL
8750: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8751: LD_ADDR_VAR 0 5
8755: PUSH
8756: LD_VAR 0 4
8760: PUSH
8761: LD_VAR 0 1
8765: PUSH
8766: LD_INT 10
8768: MUL
8769: PLUS
8770: PUSH
8771: LD_INT 15
8773: PLUS
8774: PPUSH
8775: CALL_OW 110
8779: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) then
8780: LD_VAR 0 5
8784: PUSH
8785: LD_VAR 0 5
8789: PUSH
8790: LD_EXP 45
8794: IN
8795: NOT
8796: AND
8797: IFFALSE 8855
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_gray , lab ) ;
8799: LD_VAR 0 1
8803: PPUSH
8804: LD_VAR 0 4
8808: PUSH
8809: LD_INT 1
8811: PLUS
8812: PUSH
8813: LD_VAR 0 4
8817: PUSH
8818: LD_VAR 0 1
8822: PUSH
8823: LD_INT 10
8825: MUL
8826: PLUS
8827: PUSH
8828: LD_INT 11
8830: PLUS
8831: PPUSH
8832: CALL_OW 110
8836: PLUS
8837: PPUSH
8838: CALL_OW 110
8842: PPUSH
8843: LD_INT 1
8845: PPUSH
8846: LD_VAR 0 5
8850: PPUSH
8851: CALL_OW 468
// end ;
8855: LD_VAR 0 3
8859: RET
// export function Highlight_Artefact ( side , art ) ; var base , lab ; begin
8860: LD_INT 0
8862: PPUSH
8863: PPUSH
8864: PPUSH
// base := ( art - 1 ) * 100 ;
8865: LD_ADDR_VAR 0 4
8869: PUSH
8870: LD_VAR 0 2
8874: PUSH
8875: LD_INT 1
8877: MINUS
8878: PUSH
8879: LD_INT 100
8881: MUL
8882: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
8883: LD_ADDR_VAR 0 5
8887: PUSH
8888: LD_VAR 0 4
8892: PUSH
8893: LD_VAR 0 1
8897: PUSH
8898: LD_INT 10
8900: MUL
8901: PLUS
8902: PUSH
8903: LD_INT 15
8905: PLUS
8906: PPUSH
8907: CALL_OW 110
8911: ST_TO_ADDR
// if lab and ( not lab in labs_in_use ) and UnitsInside ( lab ) then
8912: LD_VAR 0 5
8916: PUSH
8917: LD_VAR 0 5
8921: PUSH
8922: LD_EXP 45
8926: IN
8927: NOT
8928: AND
8929: PUSH
8930: LD_VAR 0 5
8934: PPUSH
8935: CALL_OW 313
8939: AND
8940: IFFALSE 9009
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , GetTag ( base + 03 ) , lab ) ;
8942: LD_VAR 0 1
8946: PPUSH
8947: LD_VAR 0 4
8951: PUSH
8952: LD_INT 1
8954: PLUS
8955: PUSH
8956: LD_VAR 0 4
8960: PUSH
8961: LD_VAR 0 1
8965: PUSH
8966: LD_INT 10
8968: MUL
8969: PLUS
8970: PUSH
8971: LD_INT 11
8973: PLUS
8974: PPUSH
8975: CALL_OW 110
8979: PLUS
8980: PPUSH
8981: CALL_OW 110
8985: PPUSH
8986: LD_VAR 0 4
8990: PUSH
8991: LD_INT 3
8993: PLUS
8994: PPUSH
8995: CALL_OW 110
8999: PPUSH
9000: LD_VAR 0 5
9004: PPUSH
9005: CALL_OW 468
// end ;
9009: LD_VAR 0 3
9013: RET
// export function Init_Lab ( art ) ; var list , side , base , dist , state , art_hex , nearest_lab ; begin
9014: LD_INT 0
9016: PPUSH
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
// art_hex := FindArtifact ( artefact_size [ art ] ) ;
9024: LD_ADDR_VAR 0 8
9028: PUSH
9029: LD_EXP 44
9033: PUSH
9034: LD_VAR 0 1
9038: ARRAY
9039: PPUSH
9040: CALL_OW 469
9044: ST_TO_ADDR
// if not art_hex then
9045: LD_VAR 0 8
9049: NOT
9050: IFFALSE 9054
// exit ;
9052: GO 9545
// list := FilterAllUnits ( [ [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9054: LD_ADDR_VAR 0 3
9058: PUSH
9059: LD_INT 2
9061: PUSH
9062: LD_INT 30
9064: PUSH
9065: LD_INT 6
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 30
9074: PUSH
9075: LD_INT 7
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 30
9084: PUSH
9085: LD_INT 8
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: PUSH
9098: EMPTY
9099: LIST
9100: PPUSH
9101: CALL_OW 69
9105: ST_TO_ADDR
// nearest_lab := NearestUnitToXY ( list , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9106: LD_ADDR_VAR 0 9
9110: PUSH
9111: LD_VAR 0 3
9115: PPUSH
9116: LD_VAR 0 8
9120: PUSH
9121: LD_INT 1
9123: ARRAY
9124: PPUSH
9125: LD_VAR 0 8
9129: PUSH
9130: LD_INT 2
9132: ARRAY
9133: PPUSH
9134: CALL_OW 73
9138: ST_TO_ADDR
// dist := GetDistUnitXY ( nearest_lab , art_hex [ 1 ] , art_hex [ 2 ] ) ;
9139: LD_ADDR_VAR 0 6
9143: PUSH
9144: LD_VAR 0 9
9148: PPUSH
9149: LD_VAR 0 8
9153: PUSH
9154: LD_INT 1
9156: ARRAY
9157: PPUSH
9158: LD_VAR 0 8
9162: PUSH
9163: LD_INT 2
9165: ARRAY
9166: PPUSH
9167: CALL_OW 297
9171: ST_TO_ADDR
// if dist < 9 then
9172: LD_VAR 0 6
9176: PUSH
9177: LD_INT 9
9179: LESS
9180: IFFALSE 9545
// begin side := GetSide ( nearest_lab ) ;
9182: LD_ADDR_VAR 0 4
9186: PUSH
9187: LD_VAR 0 9
9191: PPUSH
9192: CALL_OW 255
9196: ST_TO_ADDR
// DeInit_Lab ( side , art ) ;
9197: LD_VAR 0 4
9201: PPUSH
9202: LD_VAR 0 1
9206: PPUSH
9207: CALL 9550 0 2
// base := ( art - 1 ) * 100 ;
9211: LD_ADDR_VAR 0 5
9215: PUSH
9216: LD_VAR 0 1
9220: PUSH
9221: LD_INT 1
9223: MINUS
9224: PUSH
9225: LD_INT 100
9227: MUL
9228: ST_TO_ADDR
// if ( GetTech ( tech_Artifact , side ) = state_researched ) and ( UnitsInside ( nearest_lab ) ) then
9229: LD_INT 24
9231: PPUSH
9232: LD_VAR 0 4
9236: PPUSH
9237: CALL_OW 321
9241: PUSH
9242: LD_INT 2
9244: EQUAL
9245: PUSH
9246: LD_VAR 0 9
9250: PPUSH
9251: CALL_OW 313
9255: AND
9256: IFFALSE 9448
// begin if GetTag ( base + side * 10 + 11 ) then
9258: LD_VAR 0 5
9262: PUSH
9263: LD_VAR 0 4
9267: PUSH
9268: LD_INT 10
9270: MUL
9271: PLUS
9272: PUSH
9273: LD_INT 11
9275: PLUS
9276: PPUSH
9277: CALL_OW 110
9281: IFFALSE 9438
// begin if not GetTag ( base + side * 10 + 13 ) then
9283: LD_VAR 0 5
9287: PUSH
9288: LD_VAR 0 4
9292: PUSH
9293: LD_INT 10
9295: MUL
9296: PLUS
9297: PUSH
9298: LD_INT 13
9300: PLUS
9301: PPUSH
9302: CALL_OW 110
9306: NOT
9307: IFFALSE 9330
// state := GetTag ( base + 03 ) else
9309: LD_ADDR_VAR 0 7
9313: PUSH
9314: LD_VAR 0 5
9318: PUSH
9319: LD_INT 3
9321: PLUS
9322: PPUSH
9323: CALL_OW 110
9327: ST_TO_ADDR
9328: GO 9338
// state := art_gray ;
9330: LD_ADDR_VAR 0 7
9334: PUSH
9335: LD_INT 1
9337: ST_TO_ADDR
// if GetTag ( base + side * 10 + 15 ) and ( GetTag ( base + side * 10 + 15 ) <> nearest_lab ) then
9338: LD_VAR 0 5
9342: PUSH
9343: LD_VAR 0 4
9347: PUSH
9348: LD_INT 10
9350: MUL
9351: PLUS
9352: PUSH
9353: LD_INT 15
9355: PLUS
9356: PPUSH
9357: CALL_OW 110
9361: PUSH
9362: LD_VAR 0 5
9366: PUSH
9367: LD_VAR 0 4
9371: PUSH
9372: LD_INT 10
9374: MUL
9375: PLUS
9376: PUSH
9377: LD_INT 15
9379: PLUS
9380: PPUSH
9381: CALL_OW 110
9385: PUSH
9386: LD_VAR 0 9
9390: NONEQUAL
9391: AND
9392: IFFALSE 9408
// DeInit_Lab ( side , art ) ;
9394: LD_VAR 0 4
9398: PPUSH
9399: LD_VAR 0 1
9403: PPUSH
9404: CALL 9550 0 2
// SetTag ( base + side * 10 + 15 , nearest_lab ) ;
9408: LD_VAR 0 5
9412: PUSH
9413: LD_VAR 0 4
9417: PUSH
9418: LD_INT 10
9420: MUL
9421: PLUS
9422: PUSH
9423: LD_INT 15
9425: PLUS
9426: PPUSH
9427: LD_VAR 0 9
9431: PPUSH
9432: CALL_OW 109
// end else
9436: GO 9446
// state := art_instant ;
9438: LD_ADDR_VAR 0 7
9442: PUSH
9443: LD_INT 2
9445: ST_TO_ADDR
// end else
9446: GO 9456
// state := art_gray ;
9448: LD_ADDR_VAR 0 7
9452: PUSH
9453: LD_INT 1
9455: ST_TO_ADDR
// SetTag ( base + 11 , nearest_lab ) ;
9456: LD_VAR 0 5
9460: PUSH
9461: LD_INT 11
9463: PLUS
9464: PPUSH
9465: LD_VAR 0 9
9469: PPUSH
9470: CALL_OW 109
// if not ( nearest_lab in labs_in_use ) then
9474: LD_VAR 0 9
9478: PUSH
9479: LD_EXP 45
9483: IN
9484: NOT
9485: IFFALSE 9545
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , state , nearest_lab ) ;
9487: LD_VAR 0 4
9491: PPUSH
9492: LD_VAR 0 5
9496: PUSH
9497: LD_INT 1
9499: PLUS
9500: PUSH
9501: LD_VAR 0 5
9505: PUSH
9506: LD_VAR 0 4
9510: PUSH
9511: LD_INT 10
9513: MUL
9514: PLUS
9515: PUSH
9516: LD_INT 11
9518: PLUS
9519: PPUSH
9520: CALL_OW 110
9524: PLUS
9525: PPUSH
9526: CALL_OW 110
9530: PPUSH
9531: LD_VAR 0 7
9535: PPUSH
9536: LD_VAR 0 9
9540: PPUSH
9541: CALL_OW 468
// end ; end ;
9545: LD_VAR 0 2
9549: RET
// export function DeInit_Lab ( side , art ) ; var base , lab ; begin
9550: LD_INT 0
9552: PPUSH
9553: PPUSH
9554: PPUSH
// base := ( art - 1 ) * 100 ;
9555: LD_ADDR_VAR 0 4
9559: PUSH
9560: LD_VAR 0 2
9564: PUSH
9565: LD_INT 1
9567: MINUS
9568: PUSH
9569: LD_INT 100
9571: MUL
9572: ST_TO_ADDR
// lab := GetTag ( base + side * 10 + 15 ) ;
9573: LD_ADDR_VAR 0 5
9577: PUSH
9578: LD_VAR 0 4
9582: PUSH
9583: LD_VAR 0 1
9587: PUSH
9588: LD_INT 10
9590: MUL
9591: PLUS
9592: PUSH
9593: LD_INT 15
9595: PLUS
9596: PPUSH
9597: CALL_OW 110
9601: ST_TO_ADDR
// if not lab then
9602: LD_VAR 0 5
9606: NOT
9607: IFFALSE 9628
// lab := GetTag ( base + 11 ) ;
9609: LD_ADDR_VAR 0 5
9613: PUSH
9614: LD_VAR 0 4
9618: PUSH
9619: LD_INT 11
9621: PLUS
9622: PPUSH
9623: CALL_OW 110
9627: ST_TO_ADDR
// SetArtifactUse ( side , GetTag ( base + 01 + GetTag ( base + side * 10 + 11 ) ) , art_no , lab ) ;
9628: LD_VAR 0 1
9632: PPUSH
9633: LD_VAR 0 4
9637: PUSH
9638: LD_INT 1
9640: PLUS
9641: PUSH
9642: LD_VAR 0 4
9646: PUSH
9647: LD_VAR 0 1
9651: PUSH
9652: LD_INT 10
9654: MUL
9655: PLUS
9656: PUSH
9657: LD_INT 11
9659: PLUS
9660: PPUSH
9661: CALL_OW 110
9665: PLUS
9666: PPUSH
9667: CALL_OW 110
9671: PPUSH
9672: LD_INT 0
9674: PPUSH
9675: LD_VAR 0 5
9679: PPUSH
9680: CALL_OW 468
// end ;
9684: LD_VAR 0 3
9688: RET
// export function Update_Artefact ( lab ) ; var art , side , base ; begin
9689: LD_INT 0
9691: PPUSH
9692: PPUSH
9693: PPUSH
9694: PPUSH
// side := GetSide ( lab ) ;
9695: LD_ADDR_VAR 0 4
9699: PUSH
9700: LD_VAR 0 1
9704: PPUSH
9705: CALL_OW 255
9709: ST_TO_ADDR
// for art = 1 to artefact_number do
9710: LD_ADDR_VAR 0 3
9714: PUSH
9715: DOUBLE
9716: LD_INT 1
9718: DEC
9719: ST_TO_ADDR
9720: LD_EXP 42
9724: PUSH
9725: FOR_TO
9726: IFFALSE 9882
// begin base := ( art - 1 ) * 100 ;
9728: LD_ADDR_VAR 0 5
9732: PUSH
9733: LD_VAR 0 3
9737: PUSH
9738: LD_INT 1
9740: MINUS
9741: PUSH
9742: LD_INT 100
9744: MUL
9745: ST_TO_ADDR
// if GetTag ( base + 11 ) = lab then
9746: LD_VAR 0 5
9750: PUSH
9751: LD_INT 11
9753: PLUS
9754: PPUSH
9755: CALL_OW 110
9759: PUSH
9760: LD_VAR 0 1
9764: EQUAL
9765: IFFALSE 9778
// Init_Lab ( art ) else
9767: LD_VAR 0 3
9771: PPUSH
9772: CALL 9014 0 1
9776: GO 9880
// begin if lab = GetTag ( base + side * 10 + 15 ) then
9778: LD_VAR 0 1
9782: PUSH
9783: LD_VAR 0 5
9787: PUSH
9788: LD_VAR 0 4
9792: PUSH
9793: LD_INT 10
9795: MUL
9796: PLUS
9797: PUSH
9798: LD_INT 15
9800: PLUS
9801: PPUSH
9802: CALL_OW 110
9806: EQUAL
9807: IFFALSE 9880
// begin if ( GetTag ( base + side * 10 + 13 ) > 0 ) or ( not UnitsInside ( lab ) ) then
9809: LD_VAR 0 5
9813: PUSH
9814: LD_VAR 0 4
9818: PUSH
9819: LD_INT 10
9821: MUL
9822: PLUS
9823: PUSH
9824: LD_INT 13
9826: PLUS
9827: PPUSH
9828: CALL_OW 110
9832: PUSH
9833: LD_INT 0
9835: GREATER
9836: PUSH
9837: LD_VAR 0 1
9841: PPUSH
9842: CALL_OW 313
9846: NOT
9847: OR
9848: IFFALSE 9866
// Shadow_Artefact ( side , art ) else
9850: LD_VAR 0 4
9854: PPUSH
9855: LD_VAR 0 3
9859: PPUSH
9860: CALL 8728 0 2
9864: GO 9880
// Highlight_Artefact ( side , art ) ;
9866: LD_VAR 0 4
9870: PPUSH
9871: LD_VAR 0 3
9875: PPUSH
9876: CALL 8860 0 2
// end ; end ; end ;
9880: GO 9725
9882: POP
9883: POP
// end ; end_of_file
9884: LD_VAR 0 2
9888: RET
// on ResearchComplete ( tech , lab ) do begin wait ( 10 ) ;
9889: LD_INT 10
9891: PPUSH
9892: CALL_OW 67
// if not IsBusy ( lab ) then
9896: LD_VAR 0 2
9900: PPUSH
9901: CALL_OW 315
9905: NOT
9906: IFFALSE 9933
// begin labs_in_use := labs_in_use diff lab ;
9908: LD_ADDR_EXP 45
9912: PUSH
9913: LD_EXP 45
9917: PUSH
9918: LD_VAR 0 2
9922: DIFF
9923: ST_TO_ADDR
// Update_Artefact ( lab ) ;
9924: LD_VAR 0 2
9928: PPUSH
9929: CALL 9689 0 1
// end ; end ;
9933: PPOPN 2
9935: END
// on ResearchStarted ( tech , lab ) do var un , side ;
9936: LD_INT 0
9938: PPUSH
9939: PPUSH
// begin labs_in_use := labs_in_use ^ lab ;
9940: LD_ADDR_EXP 45
9944: PUSH
9945: LD_EXP 45
9949: PUSH
9950: LD_VAR 0 2
9954: ADD
9955: ST_TO_ADDR
// side := GetSide ( lab ) ;
9956: LD_ADDR_VAR 0 4
9960: PUSH
9961: LD_VAR 0 2
9965: PPUSH
9966: CALL_OW 255
9970: ST_TO_ADDR
// for un = 0 to ( artefact_number - 1 ) do
9971: LD_ADDR_VAR 0 3
9975: PUSH
9976: DOUBLE
9977: LD_INT 0
9979: DEC
9980: ST_TO_ADDR
9981: LD_EXP 42
9985: PUSH
9986: LD_INT 1
9988: MINUS
9989: PUSH
9990: FOR_TO
9991: IFFALSE 10070
// if lab in [ GetTag ( un * 100 + 11 ) , GetTag ( un * 100 + side * 10 + 15 ) ] then
9993: LD_VAR 0 2
9997: PUSH
9998: LD_VAR 0 3
10002: PUSH
10003: LD_INT 100
10005: MUL
10006: PUSH
10007: LD_INT 11
10009: PLUS
10010: PPUSH
10011: CALL_OW 110
10015: PUSH
10016: LD_VAR 0 3
10020: PUSH
10021: LD_INT 100
10023: MUL
10024: PUSH
10025: LD_VAR 0 4
10029: PUSH
10030: LD_INT 10
10032: MUL
10033: PLUS
10034: PUSH
10035: LD_INT 15
10037: PLUS
10038: PPUSH
10039: CALL_OW 110
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: IN
10048: IFFALSE 10068
// DeInit_Lab ( side , un + 1 ) ;
10050: LD_VAR 0 4
10054: PPUSH
10055: LD_VAR 0 3
10059: PUSH
10060: LD_INT 1
10062: PLUS
10063: PPUSH
10064: CALL 9550 0 2
10068: GO 9990
10070: POP
10071: POP
// end ;
10072: PPOPN 4
10074: END
// on ResearchCancel ( tech , lab ) do begin wait ( 10 ) ;
10075: LD_INT 10
10077: PPUSH
10078: CALL_OW 67
// if not IsBusy ( lab ) then
10082: LD_VAR 0 2
10086: PPUSH
10087: CALL_OW 315
10091: NOT
10092: IFFALSE 10119
// begin labs_in_use := labs_in_use diff lab ;
10094: LD_ADDR_EXP 45
10098: PUSH
10099: LD_EXP 45
10103: PUSH
10104: LD_VAR 0 2
10108: DIFF
10109: ST_TO_ADDR
// Update_Artefact ( lab ) ;
10110: LD_VAR 0 2
10114: PPUSH
10115: CALL 9689 0 1
// end ; end ; end_of_file
10119: PPOPN 2
10121: END
// var view_data , human_changed ; export function Show_me_map ( side , x , y ) ; var vysledek , station ; begin
10122: LD_INT 0
10124: PPUSH
10125: PPUSH
10126: PPUSH
// vysledek := true ;
10127: LD_ADDR_VAR 0 5
10131: PUSH
10132: LD_INT 1
10134: ST_TO_ADDR
// station := GetBase ( GetTag ( side * 10 + 15 ) ) ;
10135: LD_ADDR_VAR 0 6
10139: PUSH
10140: LD_VAR 0 1
10144: PUSH
10145: LD_INT 10
10147: MUL
10148: PUSH
10149: LD_INT 15
10151: PLUS
10152: PPUSH
10153: CALL_OW 110
10157: PPUSH
10158: CALL_OW 274
10162: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 06 ) ) then
10163: LD_VAR 0 6
10167: PUSH
10168: LD_VAR 0 6
10172: PPUSH
10173: CALL_OW 279
10177: PUSH
10178: LD_INT 3
10180: ARRAY
10181: PUSH
10182: LD_INT 6
10184: PPUSH
10185: CALL_OW 110
10189: GREATEREQUAL
10190: AND
10191: IFFALSE 10281
// begin PlaceSeeing ( x , y , side , - 15 ) ;
10193: LD_VAR 0 2
10197: PPUSH
10198: LD_VAR 0 3
10202: PPUSH
10203: LD_VAR 0 1
10207: PPUSH
10208: LD_INT 15
10210: NEG
10211: PPUSH
10212: CALL_OW 330
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 06 ) ) ;
10216: LD_VAR 0 6
10220: PPUSH
10221: LD_INT 3
10223: PPUSH
10224: LD_VAR 0 6
10228: PPUSH
10229: CALL_OW 279
10233: PUSH
10234: LD_INT 3
10236: ARRAY
10237: PUSH
10238: LD_INT 6
10240: PPUSH
10241: CALL_OW 110
10245: MINUS
10246: PPUSH
10247: CALL_OW 277
// view_data := [ x , y , side ] ;
10251: LD_ADDR_LOC 9
10255: PUSH
10256: LD_VAR 0 2
10260: PUSH
10261: LD_VAR 0 3
10265: PUSH
10266: LD_VAR 0 1
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: ST_TO_ADDR
// enable ( 1 ) ;
10276: LD_INT 1
10278: ENABLE_MARKED
// end else
10279: GO 10289
// vysledek := false ;
10281: LD_ADDR_VAR 0 5
10285: PUSH
10286: LD_INT 0
10288: ST_TO_ADDR
// result := vysledek ;
10289: LD_ADDR_VAR 0 4
10293: PUSH
10294: LD_VAR 0 5
10298: ST_TO_ADDR
// end ;
10299: LD_VAR 0 4
10303: RET
// every 0 0$2 trigger view_data marked 1 do
10304: LD_LOC 9
10308: IFFALSE 10359
10310: GO 10312
10312: DISABLE
// begin wait ( 0 0$30 ) ;
10313: LD_INT 1050
10315: PPUSH
10316: CALL_OW 67
// RemoveSeeing ( view_data [ 1 ] , view_data [ 2 ] , view_data [ 3 ] ) ;
10320: LD_LOC 9
10324: PUSH
10325: LD_INT 1
10327: ARRAY
10328: PPUSH
10329: LD_LOC 9
10333: PUSH
10334: LD_INT 2
10336: ARRAY
10337: PPUSH
10338: LD_LOC 9
10342: PUSH
10343: LD_INT 3
10345: ARRAY
10346: PPUSH
10347: CALL_OW 331
// view_data := 0 ;
10351: LD_ADDR_LOC 9
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// end ;
10359: END
// export function Destroy_siberite ( side , un ) ; var vysledek , station , v_can , b_can , it_can , building_list , vehicle_list ; begin
10360: LD_INT 0
10362: PPUSH
10363: PPUSH
10364: PPUSH
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
// vysledek := true ;
10370: LD_ADDR_VAR 0 4
10374: PUSH
10375: LD_INT 1
10377: ST_TO_ADDR
// it_can := false ;
10378: LD_ADDR_VAR 0 8
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// building_list := [ b_siberite_mine , b_siberite_power ] ;
10386: LD_ADDR_VAR 0 9
10390: PUSH
10391: LD_INT 30
10393: PUSH
10394: LD_INT 28
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: ST_TO_ADDR
// vehicle_list := [ us_siberium_rocket , ru_siberium_rocket , ar_selfpropelled_bomb , ru_time_lapser , us_double_laser ] ;
10401: LD_ADDR_VAR 0 10
10405: PUSH
10406: LD_INT 8
10408: PUSH
10409: LD_INT 48
10411: PUSH
10412: LD_INT 29
10414: PUSH
10415: LD_INT 49
10417: PUSH
10418: LD_INT 10
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: ST_TO_ADDR
// b_can := ( GetType ( un ) = unit_building ) and ( ( GetBType ( un ) in building_list ) or ( GetBWeapon ( un ) in vehicle_list ) ) ;
10428: LD_ADDR_VAR 0 7
10432: PUSH
10433: LD_VAR 0 2
10437: PPUSH
10438: CALL_OW 247
10442: PUSH
10443: LD_INT 3
10445: EQUAL
10446: PUSH
10447: LD_VAR 0 2
10451: PPUSH
10452: CALL_OW 266
10456: PUSH
10457: LD_VAR 0 9
10461: IN
10462: PUSH
10463: LD_VAR 0 2
10467: PPUSH
10468: CALL_OW 269
10472: PUSH
10473: LD_VAR 0 10
10477: IN
10478: OR
10479: AND
10480: ST_TO_ADDR
// v_can := ( GetType ( un ) = unit_vehicle ) and ( ( GetWeapon ( un ) in vehicle_list ) or ( GetEngine ( un ) = engine_siberite ) ) ;
10481: LD_ADDR_VAR 0 6
10485: PUSH
10486: LD_VAR 0 2
10490: PPUSH
10491: CALL_OW 247
10495: PUSH
10496: LD_INT 2
10498: EQUAL
10499: PUSH
10500: LD_VAR 0 2
10504: PPUSH
10505: CALL_OW 264
10509: PUSH
10510: LD_VAR 0 10
10514: IN
10515: PUSH
10516: LD_VAR 0 2
10520: PPUSH
10521: CALL_OW 262
10525: PUSH
10526: LD_INT 3
10528: EQUAL
10529: OR
10530: AND
10531: ST_TO_ADDR
// case def_artefact_two of 1 :
10532: LD_EXP 2
10536: PUSH
10537: LD_INT 1
10539: DOUBLE
10540: EQUAL
10541: IFTRUE 10545
10543: GO 10562
10545: POP
// if b_can then
10546: LD_VAR 0 7
10550: IFFALSE 10560
// it_can := true ; 2 :
10552: LD_ADDR_VAR 0 8
10556: PUSH
10557: LD_INT 1
10559: ST_TO_ADDR
10560: GO 10619
10562: LD_INT 2
10564: DOUBLE
10565: EQUAL
10566: IFTRUE 10570
10568: GO 10587
10570: POP
// if v_can then
10571: LD_VAR 0 6
10575: IFFALSE 10585
// it_can := true ; 3 :
10577: LD_ADDR_VAR 0 8
10581: PUSH
10582: LD_INT 1
10584: ST_TO_ADDR
10585: GO 10619
10587: LD_INT 3
10589: DOUBLE
10590: EQUAL
10591: IFTRUE 10595
10593: GO 10618
10595: POP
// if b_can or v_can then
10596: LD_VAR 0 7
10600: PUSH
10601: LD_VAR 0 6
10605: OR
10606: IFFALSE 10616
// it_can := true ; end ;
10608: LD_ADDR_VAR 0 8
10612: PUSH
10613: LD_INT 1
10615: ST_TO_ADDR
10616: GO 10619
10618: POP
// station := GetBase ( GetTag ( 100 + side * 10 + 15 ) ) ;
10619: LD_ADDR_VAR 0 5
10623: PUSH
10624: LD_INT 100
10626: PUSH
10627: LD_VAR 0 1
10631: PUSH
10632: LD_INT 10
10634: MUL
10635: PLUS
10636: PUSH
10637: LD_INT 15
10639: PLUS
10640: PPUSH
10641: CALL_OW 110
10645: PPUSH
10646: CALL_OW 274
10650: ST_TO_ADDR
// if station and it_can and ( GetResources ( station ) [ 3 ] >= GetTag ( 106 ) ) then
10651: LD_VAR 0 5
10655: PUSH
10656: LD_VAR 0 8
10660: AND
10661: PUSH
10662: LD_VAR 0 5
10666: PPUSH
10667: CALL_OW 279
10671: PUSH
10672: LD_INT 3
10674: ARRAY
10675: PUSH
10676: LD_INT 106
10678: PPUSH
10679: CALL_OW 110
10683: GREATEREQUAL
10684: AND
10685: IFFALSE 10733
// begin KillUnit ( un ) ;
10687: LD_VAR 0 2
10691: PPUSH
10692: CALL_OW 66
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 106 ) ) ;
10696: LD_VAR 0 5
10700: PPUSH
10701: LD_INT 3
10703: PPUSH
10704: LD_VAR 0 5
10708: PPUSH
10709: CALL_OW 279
10713: PUSH
10714: LD_INT 3
10716: ARRAY
10717: PUSH
10718: LD_INT 106
10720: PPUSH
10721: CALL_OW 110
10725: MINUS
10726: PPUSH
10727: CALL_OW 277
// end else
10731: GO 10741
// vysledek := false ;
10733: LD_ADDR_VAR 0 4
10737: PUSH
10738: LD_INT 0
10740: ST_TO_ADDR
// result := vysledek ;
10741: LD_ADDR_VAR 0 3
10745: PUSH
10746: LD_VAR 0 4
10750: ST_TO_ADDR
// end ;
10751: LD_VAR 0 3
10755: RET
// export function Contamine ( side , p1 , p2 ) ; var vysledek , old_side , station ; begin
10756: LD_INT 0
10758: PPUSH
10759: PPUSH
10760: PPUSH
10761: PPUSH
// vysledek := true ;
10762: LD_ADDR_VAR 0 5
10766: PUSH
10767: LD_INT 1
10769: ST_TO_ADDR
// station := GetBase ( GetTag ( 200 + side * 10 + 15 ) ) ;
10770: LD_ADDR_VAR 0 7
10774: PUSH
10775: LD_INT 200
10777: PUSH
10778: LD_VAR 0 1
10782: PUSH
10783: LD_INT 10
10785: MUL
10786: PLUS
10787: PUSH
10788: LD_INT 15
10790: PLUS
10791: PPUSH
10792: CALL_OW 110
10796: PPUSH
10797: CALL_OW 274
10801: ST_TO_ADDR
// if station and ( GetResources ( station ) [ 3 ] >= GetTag ( 206 ) ) then
10802: LD_VAR 0 7
10806: PUSH
10807: LD_VAR 0 7
10811: PPUSH
10812: CALL_OW 279
10816: PUSH
10817: LD_INT 3
10819: ARRAY
10820: PUSH
10821: LD_INT 206
10823: PPUSH
10824: CALL_OW 110
10828: GREATEREQUAL
10829: AND
10830: IFFALSE 10886
// begin ArtContamination ( p1 , p2 , 15 ) ;
10832: LD_VAR 0 2
10836: PPUSH
10837: LD_VAR 0 3
10841: PPUSH
10842: LD_INT 15
10844: PPUSH
10845: CALL_OW 495
// SetResourceType ( station , mat_siberit , GetResources ( station ) [ 3 ] - GetTag ( 206 ) ) ;
10849: LD_VAR 0 7
10853: PPUSH
10854: LD_INT 3
10856: PPUSH
10857: LD_VAR 0 7
10861: PPUSH
10862: CALL_OW 279
10866: PUSH
10867: LD_INT 3
10869: ARRAY
10870: PUSH
10871: LD_INT 206
10873: PPUSH
10874: CALL_OW 110
10878: MINUS
10879: PPUSH
10880: CALL_OW 277
// end else
10884: GO 10894
// vysledek := false ;
10886: LD_ADDR_VAR 0 5
10890: PUSH
10891: LD_INT 0
10893: ST_TO_ADDR
// result := vysledek ;
10894: LD_ADDR_VAR 0 4
10898: PUSH
10899: LD_VAR 0 5
10903: ST_TO_ADDR
// end ;
10904: LD_VAR 0 4
10908: RET
// every 0 0$5 marked 20 do var art , side , recharge ;
10909: GO 10911
10911: DISABLE
10912: LD_INT 0
10914: PPUSH
10915: PPUSH
10916: PPUSH
// begin for art = 0 to artefact_number do
10917: LD_ADDR_VAR 0 1
10921: PUSH
10922: DOUBLE
10923: LD_INT 0
10925: DEC
10926: ST_TO_ADDR
10927: LD_EXP 42
10931: PUSH
10932: FOR_TO
10933: IFFALSE 11067
// for side = 1 to Side_Positions do
10935: LD_ADDR_VAR 0 2
10939: PUSH
10940: DOUBLE
10941: LD_INT 1
10943: DEC
10944: ST_TO_ADDR
10945: LD_EXP 23
10949: PUSH
10950: FOR_TO
10951: IFFALSE 11063
// begin recharge := art * 100 + side * 10 + 13 ;
10953: LD_ADDR_VAR 0 3
10957: PUSH
10958: LD_VAR 0 1
10962: PUSH
10963: LD_INT 100
10965: MUL
10966: PUSH
10967: LD_VAR 0 2
10971: PUSH
10972: LD_INT 10
10974: MUL
10975: PLUS
10976: PUSH
10977: LD_INT 13
10979: PLUS
10980: ST_TO_ADDR
// if Side_Positions [ side ] and ( GetTag ( recharge ) > 0 ) then
10981: LD_EXP 23
10985: PUSH
10986: LD_VAR 0 2
10990: ARRAY
10991: PUSH
10992: LD_VAR 0 3
10996: PPUSH
10997: CALL_OW 110
11001: PUSH
11002: LD_INT 0
11004: GREATER
11005: AND
11006: IFFALSE 11061
// begin SetTag ( recharge , GetTag ( recharge ) - 1 ) ;
11008: LD_VAR 0 3
11012: PPUSH
11013: LD_VAR 0 3
11017: PPUSH
11018: CALL_OW 110
11022: PUSH
11023: LD_INT 1
11025: MINUS
11026: PPUSH
11027: CALL_OW 109
// if not GetTag ( recharge ) then
11031: LD_VAR 0 3
11035: PPUSH
11036: CALL_OW 110
11040: NOT
11041: IFFALSE 11061
// Highlight_Artefact ( side , art + 1 ) ;
11043: LD_VAR 0 2
11047: PPUSH
11048: LD_VAR 0 1
11052: PUSH
11053: LD_INT 1
11055: PLUS
11056: PPUSH
11057: CALL 8860 0 2
// end ; end ;
11061: GO 10950
11063: POP
11064: POP
11065: GO 10932
11067: POP
11068: POP
// enable ;
11069: ENABLE
// end ; end_of_file
11070: PPOPN 3
11072: END
// function DestroyArtefact ( hex , art ) ; var base , side ; begin
11073: LD_INT 0
11075: PPUSH
11076: PPUSH
11077: PPUSH
// MoveAreaXY ( artefact_end , hex [ 1 ] , hex [ 2 ] ) ;
11078: LD_INT 18
11080: PPUSH
11081: LD_VAR 0 1
11085: PUSH
11086: LD_INT 1
11088: ARRAY
11089: PPUSH
11090: LD_VAR 0 1
11094: PUSH
11095: LD_INT 2
11097: ARRAY
11098: PPUSH
11099: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11103: LD_VAR 0 1
11107: PUSH
11108: LD_INT 1
11110: ARRAY
11111: PPUSH
11112: LD_VAR 0 1
11116: PUSH
11117: LD_INT 2
11119: ARRAY
11120: PPUSH
11121: CALL_OW 494
// Wait ( 30 ) ;
11125: LD_INT 30
11127: PPUSH
11128: CALL_OW 67
// EraseResourceArea ( artefact_end , mat_artefact ) ;
11132: LD_INT 18
11134: PPUSH
11135: LD_INT 4
11137: PPUSH
11138: CALL_OW 286
// base := ( art - 1 ) * 100 ;
11142: LD_ADDR_VAR 0 4
11146: PUSH
11147: LD_VAR 0 2
11151: PUSH
11152: LD_INT 1
11154: MINUS
11155: PUSH
11156: LD_INT 100
11158: MUL
11159: ST_TO_ADDR
// if GetTag ( base + 11 ) then
11160: LD_VAR 0 4
11164: PUSH
11165: LD_INT 11
11167: PLUS
11168: PPUSH
11169: CALL_OW 110
11173: IFFALSE 11311
// begin side := GetSide ( GetTag ( base + 11 ) ) ;
11175: LD_ADDR_VAR 0 5
11179: PUSH
11180: LD_VAR 0 4
11184: PUSH
11185: LD_INT 11
11187: PLUS
11188: PPUSH
11189: CALL_OW 110
11193: PPUSH
11194: CALL_OW 255
11198: ST_TO_ADDR
// if GetTag ( base + 12 ) then
11199: LD_VAR 0 4
11203: PUSH
11204: LD_INT 12
11206: PLUS
11207: PPUSH
11208: CALL_OW 110
11212: IFFALSE 11255
// begin ComCancel ( GetTag ( base + 11 ) ) ;
11214: LD_VAR 0 4
11218: PUSH
11219: LD_INT 11
11221: PLUS
11222: PPUSH
11223: CALL_OW 110
11227: PPUSH
11228: CALL_OW 127
// Wait ( 10 ) ;
11232: LD_INT 10
11234: PPUSH
11235: CALL_OW 67
// SetTag ( base + 12 , false ) ;
11239: LD_VAR 0 4
11243: PUSH
11244: LD_INT 12
11246: PLUS
11247: PPUSH
11248: LD_INT 0
11250: PPUSH
11251: CALL_OW 109
// end ; if not GetTag ( base + side * 10 + 11 ) then
11255: LD_VAR 0 4
11259: PUSH
11260: LD_VAR 0 5
11264: PUSH
11265: LD_INT 10
11267: MUL
11268: PLUS
11269: PUSH
11270: LD_INT 11
11272: PLUS
11273: PPUSH
11274: CALL_OW 110
11278: NOT
11279: IFFALSE 11295
// DeInit_Lab ( side , art ) ;
11281: LD_VAR 0 5
11285: PPUSH
11286: LD_VAR 0 2
11290: PPUSH
11291: CALL 9550 0 2
// SetTag ( base + 11 , 0 ) ;
11295: LD_VAR 0 4
11299: PUSH
11300: LD_INT 11
11302: PLUS
11303: PPUSH
11304: LD_INT 0
11306: PPUSH
11307: CALL_OW 109
// end ; end ;
11311: LD_VAR 0 3
11315: RET
// every 0 0$5 marked 5 do var hex , un ;
11316: GO 11318
11318: DISABLE
11319: LD_INT 0
11321: PPUSH
11322: PPUSH
// begin if GetTag ( 09 ) then
11323: LD_INT 9
11325: PPUSH
11326: CALL_OW 110
11330: IFFALSE 11369
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] else
11332: LD_ADDR_VAR 0 1
11336: PUSH
11337: LD_INT 13
11339: PPUSH
11340: CALL_OW 110
11344: PPUSH
11345: CALL_OW 250
11349: PUSH
11350: LD_INT 13
11352: PPUSH
11353: CALL_OW 110
11357: PPUSH
11358: CALL_OW 251
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: ST_TO_ADDR
11367: GO 11388
// hex := FindArtifact ( artefact_size [ 1 ] ) ;
11369: LD_ADDR_VAR 0 1
11373: PUSH
11374: LD_EXP 44
11378: PUSH
11379: LD_INT 1
11381: ARRAY
11382: PPUSH
11383: CALL_OW 469
11387: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11388: LD_VAR 0 1
11392: PUSH
11393: LD_INT 1
11395: ARRAY
11396: PPUSH
11397: LD_VAR 0 1
11401: PUSH
11402: LD_INT 2
11404: ARRAY
11405: PPUSH
11406: LD_INT 16
11408: PPUSH
11409: CALL_OW 309
11413: NOT
11414: IFFALSE 11759
// begin wait ( 3 3$0 ) ;
11416: LD_INT 6300
11418: PPUSH
11419: CALL_OW 67
// if GetTag ( 09 ) then
11423: LD_INT 9
11425: PPUSH
11426: CALL_OW 110
11430: IFFALSE 11477
// begin SetCargo ( GetTag ( 13 ) , mat_artefact , - artefact_size [ 1 ] ) ;
11432: LD_INT 13
11434: PPUSH
11435: CALL_OW 110
11439: PPUSH
11440: LD_INT 4
11442: PPUSH
11443: LD_EXP 44
11447: PUSH
11448: LD_INT 1
11450: ARRAY
11451: NEG
11452: PPUSH
11453: CALL_OW 290
// SetTag ( 09 , 0 ) ;
11457: LD_INT 9
11459: PPUSH
11460: LD_INT 0
11462: PPUSH
11463: CALL_OW 109
// SetTag ( 13 , 0 ) ;
11467: LD_INT 13
11469: PPUSH
11470: LD_INT 0
11472: PPUSH
11473: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 1 ] ) ;
11477: LD_ADDR_VAR 0 1
11481: PUSH
11482: LD_EXP 44
11486: PUSH
11487: LD_INT 1
11489: ARRAY
11490: PPUSH
11491: CALL_OW 469
11495: ST_TO_ADDR
// if not hex then
11496: LD_VAR 0 1
11500: NOT
11501: IFFALSE 11538
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
11503: LD_ADDR_VAR 0 1
11507: PUSH
11508: LD_INT 13
11510: PPUSH
11511: CALL_OW 110
11515: PPUSH
11516: CALL_OW 250
11520: PUSH
11521: LD_INT 13
11523: PPUSH
11524: CALL_OW 110
11528: PPUSH
11529: CALL_OW 251
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: ST_TO_ADDR
// DestroyArtefact ( hex , 1 ) ;
11538: LD_VAR 0 1
11542: PPUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL 11073 0 2
// wait ( 5 ) ;
11550: LD_INT 5
11552: PPUSH
11553: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: LD_INT 16
11564: PPUSH
11565: LD_INT 0
11567: PPUSH
11568: CALL_OW 16
11572: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11573: LD_ADDR_VAR 0 2
11577: PUSH
11578: LD_VAR 0 1
11582: PUSH
11583: LD_INT 1
11585: ARRAY
11586: PPUSH
11587: LD_VAR 0 1
11591: PUSH
11592: LD_INT 2
11594: ARRAY
11595: PPUSH
11596: CALL_OW 428
11600: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
11601: LD_VAR 0 2
11605: PUSH
11606: LD_INT 0
11608: GREATER
11609: PUSH
11610: LD_VAR 0 2
11614: PPUSH
11615: CALL_OW 247
11619: PUSH
11620: LD_INT 3
11622: EQUAL
11623: AND
11624: IFFALSE 11668
// begin KillUnit ( un ) ;
11626: LD_VAR 0 2
11630: PPUSH
11631: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
11635: LD_VAR 0 1
11639: PUSH
11640: LD_INT 1
11642: ARRAY
11643: PPUSH
11644: LD_VAR 0 1
11648: PUSH
11649: LD_INT 2
11651: ARRAY
11652: PPUSH
11653: CALL_OW 428
11657: IFFALSE 11668
// wait ( 10 ) ;
11659: LD_INT 10
11661: PPUSH
11662: CALL_OW 67
11666: GO 11635
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
11668: LD_VAR 0 1
11672: PUSH
11673: LD_INT 1
11675: ARRAY
11676: PPUSH
11677: LD_VAR 0 1
11681: PUSH
11682: LD_INT 2
11684: ARRAY
11685: PPUSH
11686: CALL_OW 428
11690: NOT
11691: IFFALSE 11557
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
11693: LD_VAR 0 1
11697: PUSH
11698: LD_INT 1
11700: ARRAY
11701: PPUSH
11702: LD_VAR 0 1
11706: PUSH
11707: LD_INT 2
11709: ARRAY
11710: PPUSH
11711: CALL_OW 494
// wait ( 30 ) ;
11715: LD_INT 30
11717: PPUSH
11718: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 1 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
11722: LD_INT 4
11724: PPUSH
11725: LD_EXP 44
11729: PUSH
11730: LD_INT 1
11732: ARRAY
11733: PPUSH
11734: LD_VAR 0 1
11738: PUSH
11739: LD_INT 1
11741: ARRAY
11742: PPUSH
11743: LD_VAR 0 1
11747: PUSH
11748: LD_INT 2
11750: ARRAY
11751: PPUSH
11752: LD_INT 0
11754: PPUSH
11755: CALL_OW 58
// end ; enable ;
11759: ENABLE
// end ;
11760: PPOPN 2
11762: END
// every 0 0$5 marked 6 do var hex , un ;
11763: GO 11765
11765: DISABLE
11766: LD_INT 0
11768: PPUSH
11769: PPUSH
// begin if GetTag ( 109 ) then
11770: LD_INT 109
11772: PPUSH
11773: CALL_OW 110
11777: IFFALSE 11816
// hex := [ GetX ( GetTag ( 113 ) ) , GetY ( GetTag ( 113 ) ) ] else
11779: LD_ADDR_VAR 0 1
11783: PUSH
11784: LD_INT 113
11786: PPUSH
11787: CALL_OW 110
11791: PPUSH
11792: CALL_OW 250
11796: PUSH
11797: LD_INT 113
11799: PPUSH
11800: CALL_OW 110
11804: PPUSH
11805: CALL_OW 251
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: ST_TO_ADDR
11814: GO 11835
// hex := FindArtifact ( artefact_size [ 2 ] ) ;
11816: LD_ADDR_VAR 0 1
11820: PUSH
11821: LD_EXP 44
11825: PUSH
11826: LD_INT 2
11828: ARRAY
11829: PPUSH
11830: CALL_OW 469
11834: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
11835: LD_VAR 0 1
11839: PUSH
11840: LD_INT 1
11842: ARRAY
11843: PPUSH
11844: LD_VAR 0 1
11848: PUSH
11849: LD_INT 2
11851: ARRAY
11852: PPUSH
11853: LD_INT 16
11855: PPUSH
11856: CALL_OW 309
11860: NOT
11861: IFFALSE 12206
// begin wait ( 3 3$30 ) ;
11863: LD_INT 7350
11865: PPUSH
11866: CALL_OW 67
// if GetTag ( 109 ) then
11870: LD_INT 109
11872: PPUSH
11873: CALL_OW 110
11877: IFFALSE 11924
// begin SetCargo ( GetTag ( 113 ) , mat_artefact , - artefact_size [ 2 ] ) ;
11879: LD_INT 113
11881: PPUSH
11882: CALL_OW 110
11886: PPUSH
11887: LD_INT 4
11889: PPUSH
11890: LD_EXP 44
11894: PUSH
11895: LD_INT 2
11897: ARRAY
11898: NEG
11899: PPUSH
11900: CALL_OW 290
// SetTag ( 109 , 0 ) ;
11904: LD_INT 109
11906: PPUSH
11907: LD_INT 0
11909: PPUSH
11910: CALL_OW 109
// SetTag ( 113 , 0 ) ;
11914: LD_INT 113
11916: PPUSH
11917: LD_INT 0
11919: PPUSH
11920: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 2 ] ) ;
11924: LD_ADDR_VAR 0 1
11928: PUSH
11929: LD_EXP 44
11933: PUSH
11934: LD_INT 2
11936: ARRAY
11937: PPUSH
11938: CALL_OW 469
11942: ST_TO_ADDR
// if not hex then
11943: LD_VAR 0 1
11947: NOT
11948: IFFALSE 11985
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
11950: LD_ADDR_VAR 0 1
11954: PUSH
11955: LD_INT 13
11957: PPUSH
11958: CALL_OW 110
11962: PPUSH
11963: CALL_OW 250
11967: PUSH
11968: LD_INT 13
11970: PPUSH
11971: CALL_OW 110
11975: PPUSH
11976: CALL_OW 251
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: ST_TO_ADDR
// DestroyArtefact ( hex , 2 ) ;
11985: LD_VAR 0 1
11989: PPUSH
11990: LD_INT 2
11992: PPUSH
11993: CALL 11073 0 2
// wait ( 5 ) ;
11997: LD_INT 5
11999: PPUSH
12000: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12004: LD_ADDR_VAR 0 1
12008: PUSH
12009: LD_INT 16
12011: PPUSH
12012: LD_INT 0
12014: PPUSH
12015: CALL_OW 16
12019: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12020: LD_ADDR_VAR 0 2
12024: PUSH
12025: LD_VAR 0 1
12029: PUSH
12030: LD_INT 1
12032: ARRAY
12033: PPUSH
12034: LD_VAR 0 1
12038: PUSH
12039: LD_INT 2
12041: ARRAY
12042: PPUSH
12043: CALL_OW 428
12047: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12048: LD_VAR 0 2
12052: PUSH
12053: LD_INT 0
12055: GREATER
12056: PUSH
12057: LD_VAR 0 2
12061: PPUSH
12062: CALL_OW 247
12066: PUSH
12067: LD_INT 3
12069: EQUAL
12070: AND
12071: IFFALSE 12115
// begin KillUnit ( un ) ;
12073: LD_VAR 0 2
12077: PPUSH
12078: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12082: LD_VAR 0 1
12086: PUSH
12087: LD_INT 1
12089: ARRAY
12090: PPUSH
12091: LD_VAR 0 1
12095: PUSH
12096: LD_INT 2
12098: ARRAY
12099: PPUSH
12100: CALL_OW 428
12104: IFFALSE 12115
// wait ( 10 ) ;
12106: LD_INT 10
12108: PPUSH
12109: CALL_OW 67
12113: GO 12082
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12115: LD_VAR 0 1
12119: PUSH
12120: LD_INT 1
12122: ARRAY
12123: PPUSH
12124: LD_VAR 0 1
12128: PUSH
12129: LD_INT 2
12131: ARRAY
12132: PPUSH
12133: CALL_OW 428
12137: NOT
12138: IFFALSE 12004
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12140: LD_VAR 0 1
12144: PUSH
12145: LD_INT 1
12147: ARRAY
12148: PPUSH
12149: LD_VAR 0 1
12153: PUSH
12154: LD_INT 2
12156: ARRAY
12157: PPUSH
12158: CALL_OW 494
// wait ( 30 ) ;
12162: LD_INT 30
12164: PPUSH
12165: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 2 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12169: LD_INT 4
12171: PPUSH
12172: LD_EXP 44
12176: PUSH
12177: LD_INT 2
12179: ARRAY
12180: PPUSH
12181: LD_VAR 0 1
12185: PUSH
12186: LD_INT 1
12188: ARRAY
12189: PPUSH
12190: LD_VAR 0 1
12194: PUSH
12195: LD_INT 2
12197: ARRAY
12198: PPUSH
12199: LD_INT 0
12201: PPUSH
12202: CALL_OW 58
// end ; enable ;
12206: ENABLE
// end ;
12207: PPOPN 2
12209: END
// every 0 0$5 marked 7 do var hex , un ;
12210: GO 12212
12212: DISABLE
12213: LD_INT 0
12215: PPUSH
12216: PPUSH
// begin if GetTag ( 209 ) then
12217: LD_INT 209
12219: PPUSH
12220: CALL_OW 110
12224: IFFALSE 12263
// hex := [ GetX ( GetTag ( 213 ) ) , GetY ( GetTag ( 213 ) ) ] else
12226: LD_ADDR_VAR 0 1
12230: PUSH
12231: LD_INT 213
12233: PPUSH
12234: CALL_OW 110
12238: PPUSH
12239: CALL_OW 250
12243: PUSH
12244: LD_INT 213
12246: PPUSH
12247: CALL_OW 110
12251: PPUSH
12252: CALL_OW 251
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: ST_TO_ADDR
12261: GO 12282
// hex := FindArtifact ( artefact_size [ 3 ] ) ;
12263: LD_ADDR_VAR 0 1
12267: PUSH
12268: LD_EXP 44
12272: PUSH
12273: LD_INT 3
12275: ARRAY
12276: PPUSH
12277: CALL_OW 469
12281: ST_TO_ADDR
// if not InArea ( hex [ 1 ] , hex [ 2 ] , artefact_area ) then
12282: LD_VAR 0 1
12286: PUSH
12287: LD_INT 1
12289: ARRAY
12290: PPUSH
12291: LD_VAR 0 1
12295: PUSH
12296: LD_INT 2
12298: ARRAY
12299: PPUSH
12300: LD_INT 16
12302: PPUSH
12303: CALL_OW 309
12307: NOT
12308: IFFALSE 12653
// begin wait ( 4 4$0 ) ;
12310: LD_INT 8400
12312: PPUSH
12313: CALL_OW 67
// if GetTag ( 209 ) then
12317: LD_INT 209
12319: PPUSH
12320: CALL_OW 110
12324: IFFALSE 12371
// begin SetCargo ( GetTag ( 213 ) , mat_artefact , - artefact_size [ 3 ] ) ;
12326: LD_INT 213
12328: PPUSH
12329: CALL_OW 110
12333: PPUSH
12334: LD_INT 4
12336: PPUSH
12337: LD_EXP 44
12341: PUSH
12342: LD_INT 3
12344: ARRAY
12345: NEG
12346: PPUSH
12347: CALL_OW 290
// SetTag ( 209 , 0 ) ;
12351: LD_INT 209
12353: PPUSH
12354: LD_INT 0
12356: PPUSH
12357: CALL_OW 109
// SetTag ( 213 , 0 ) ;
12361: LD_INT 213
12363: PPUSH
12364: LD_INT 0
12366: PPUSH
12367: CALL_OW 109
// end ; hex := FindArtifact ( artefact_size [ 3 ] ) ;
12371: LD_ADDR_VAR 0 1
12375: PUSH
12376: LD_EXP 44
12380: PUSH
12381: LD_INT 3
12383: ARRAY
12384: PPUSH
12385: CALL_OW 469
12389: ST_TO_ADDR
// if not hex then
12390: LD_VAR 0 1
12394: NOT
12395: IFFALSE 12432
// hex := [ GetX ( GetTag ( 13 ) ) , GetY ( GetTag ( 13 ) ) ] ;
12397: LD_ADDR_VAR 0 1
12401: PUSH
12402: LD_INT 13
12404: PPUSH
12405: CALL_OW 110
12409: PPUSH
12410: CALL_OW 250
12414: PUSH
12415: LD_INT 13
12417: PPUSH
12418: CALL_OW 110
12422: PPUSH
12423: CALL_OW 251
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: ST_TO_ADDR
// DestroyArtefact ( hex , 3 ) ;
12432: LD_VAR 0 1
12436: PPUSH
12437: LD_INT 3
12439: PPUSH
12440: CALL 11073 0 2
// wait ( 5 ) ;
12444: LD_INT 5
12446: PPUSH
12447: CALL_OW 67
// repeat hex := RandHexArea ( artefact_area , false ) ;
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: LD_INT 16
12458: PPUSH
12459: LD_INT 0
12461: PPUSH
12462: CALL_OW 16
12466: ST_TO_ADDR
// un := HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12467: LD_ADDR_VAR 0 2
12471: PUSH
12472: LD_VAR 0 1
12476: PUSH
12477: LD_INT 1
12479: ARRAY
12480: PPUSH
12481: LD_VAR 0 1
12485: PUSH
12486: LD_INT 2
12488: ARRAY
12489: PPUSH
12490: CALL_OW 428
12494: ST_TO_ADDR
// if ( un > 0 ) and ( GetType ( un ) = unit_building ) then
12495: LD_VAR 0 2
12499: PUSH
12500: LD_INT 0
12502: GREATER
12503: PUSH
12504: LD_VAR 0 2
12508: PPUSH
12509: CALL_OW 247
12513: PUSH
12514: LD_INT 3
12516: EQUAL
12517: AND
12518: IFFALSE 12562
// begin KillUnit ( un ) ;
12520: LD_VAR 0 2
12524: PPUSH
12525: CALL_OW 66
// while HexInfo ( hex [ 1 ] , hex [ 2 ] ) do
12529: LD_VAR 0 1
12533: PUSH
12534: LD_INT 1
12536: ARRAY
12537: PPUSH
12538: LD_VAR 0 1
12542: PUSH
12543: LD_INT 2
12545: ARRAY
12546: PPUSH
12547: CALL_OW 428
12551: IFFALSE 12562
// wait ( 10 ) ;
12553: LD_INT 10
12555: PPUSH
12556: CALL_OW 67
12560: GO 12529
// end ; until not HexInfo ( hex [ 1 ] , hex [ 2 ] ) ;
12562: LD_VAR 0 1
12566: PUSH
12567: LD_INT 1
12569: ARRAY
12570: PPUSH
12571: LD_VAR 0 1
12575: PUSH
12576: LD_INT 2
12578: ARRAY
12579: PPUSH
12580: CALL_OW 428
12584: NOT
12585: IFFALSE 12451
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
12587: LD_VAR 0 1
12591: PUSH
12592: LD_INT 1
12594: ARRAY
12595: PPUSH
12596: LD_VAR 0 1
12600: PUSH
12601: LD_INT 2
12603: ARRAY
12604: PPUSH
12605: CALL_OW 494
// wait ( 30 ) ;
12609: LD_INT 30
12611: PPUSH
12612: CALL_OW 67
// CreateResourcesXY ( mat_artefact , artefact_size [ 3 ] , hex [ 1 ] , hex [ 2 ] , false ) ;
12616: LD_INT 4
12618: PPUSH
12619: LD_EXP 44
12623: PUSH
12624: LD_INT 3
12626: ARRAY
12627: PPUSH
12628: LD_VAR 0 1
12632: PUSH
12633: LD_INT 1
12635: ARRAY
12636: PPUSH
12637: LD_VAR 0 1
12641: PUSH
12642: LD_INT 2
12644: ARRAY
12645: PPUSH
12646: LD_INT 0
12648: PPUSH
12649: CALL_OW 58
// end ; enable ;
12653: ENABLE
// end ; end_of_file
12654: PPOPN 2
12656: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
12657: LD_INT 0
12659: PPUSH
12660: PPUSH
// for un in battle_flags_id do
12661: LD_ADDR_VAR 0 2
12665: PUSH
12666: LD_EXP 33
12670: PUSH
12671: FOR_IN
12672: IFFALSE 12747
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
12674: LD_VAR 0 2
12678: PPUSH
12679: LD_INT 1
12681: PUSH
12682: LD_LOC 11
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 2
12693: PUSH
12694: LD_LOC 11
12698: PUSH
12699: LD_INT 2
12701: DIV
12702: PUSH
12703: EMPTY
12704: LIST
12705: LIST
12706: PUSH
12707: LD_INT 3
12709: PUSH
12710: LD_LOC 11
12714: PUSH
12715: LD_INT 5
12717: DIV
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 20
12725: PUSH
12726: LD_LOC 11
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PPUSH
12741: CALL_OW 423
12745: GO 12671
12747: POP
12748: POP
// end ;
12749: LD_VAR 0 1
12753: RET
// every 0 0$0.1 do var un ;
12754: GO 12756
12756: DISABLE
12757: LD_INT 0
12759: PPUSH
// begin if not def_morale_flags then
12760: LD_EXP 56
12764: NOT
12765: IFFALSE 12769
// exit ;
12767: GO 12846
// if not morale_decreasing_time then
12769: LD_EXP 14
12773: NOT
12774: IFFALSE 12778
// exit ;
12776: GO 12846
// strength = 100 ;
12778: LD_ADDR_LOC 11
12782: PUSH
12783: LD_INT 100
12785: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
12786: LD_EXP 14
12790: PPUSH
12791: CALL_OW 67
// strength := strength - 1 ;
12795: LD_ADDR_LOC 11
12799: PUSH
12800: LD_LOC 11
12804: PUSH
12805: LD_INT 1
12807: MINUS
12808: ST_TO_ADDR
// Update_Flags ;
12809: CALL 12657 0 0
// until not strength ;
12813: LD_LOC 11
12817: NOT
12818: IFFALSE 12786
// for un in battle_flags_id do
12820: LD_ADDR_VAR 0 1
12824: PUSH
12825: LD_EXP 33
12829: PUSH
12830: FOR_IN
12831: IFFALSE 12844
// KillBattleFlag ( un ) ;
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 419
12842: GO 12830
12844: POP
12845: POP
// end ; end_of_file
12846: PPOPN 1
12848: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
12849: LD_INT 0
12851: PPUSH
12852: PPUSH
// if ( not IAmSpec ) then
12853: CALL_OW 531
12857: NOT
12858: IFFALSE 12874
// Result := Limits_Info ^  ;
12860: LD_ADDR_VAR 0 1
12864: PUSH
12865: LD_LOC 23
12869: PUSH
12870: LD_STRING 
12872: ADD
12873: ST_TO_ADDR
// for i := 1 to 8 do
12874: LD_ADDR_VAR 0 2
12878: PUSH
12879: DOUBLE
12880: LD_INT 1
12882: DEC
12883: ST_TO_ADDR
12884: LD_INT 8
12886: PUSH
12887: FOR_TO
12888: IFFALSE 12933
// if Cheaters [ i ] then
12890: LD_LOC 24
12894: PUSH
12895: LD_VAR 0 2
12899: ARRAY
12900: IFFALSE 12931
// Result := Result ^ [ #Cheater , i , i ] ;
12902: LD_ADDR_VAR 0 1
12906: PUSH
12907: LD_VAR 0 1
12911: PUSH
12912: LD_STRING #Cheater
12914: PUSH
12915: LD_VAR 0 2
12919: PUSH
12920: LD_VAR 0 2
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: ADD
12930: ST_TO_ADDR
12931: GO 12887
12933: POP
12934: POP
// end ;
12935: LD_VAR 0 1
12939: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
12940: LD_INT 0
12942: PPUSH
12943: PPUSH
12944: PPUSH
12945: PPUSH
12946: PPUSH
// case Game_Type of 10 :
12947: LD_EXP 46
12951: PUSH
12952: LD_INT 10
12954: DOUBLE
12955: EQUAL
12956: IFTRUE 12960
12958: GO 12971
12960: POP
// def_game_rules := 1 ; 11 :
12961: LD_ADDR_EXP 47
12965: PUSH
12966: LD_INT 1
12968: ST_TO_ADDR
12969: GO 12991
12971: LD_INT 11
12973: DOUBLE
12974: EQUAL
12975: IFTRUE 12979
12977: GO 12990
12979: POP
// def_game_rules := 3 ; end ;
12980: LD_ADDR_EXP 47
12984: PUSH
12985: LD_INT 3
12987: ST_TO_ADDR
12988: GO 12991
12990: POP
// case def_game_rules of 0 :
12991: LD_EXP 47
12995: PUSH
12996: LD_INT 0
12998: DOUBLE
12999: EQUAL
13000: IFTRUE 13004
13002: GO 13009
13004: POP
// exit ; 1 :
13005: GO 15067
13007: GO 14967
13009: LD_INT 1
13011: DOUBLE
13012: EQUAL
13013: IFTRUE 13017
13015: GO 13233
13017: POP
// begin def_base_level := 2 ;
13018: LD_ADDR_EXP 48
13022: PUSH
13023: LD_INT 2
13025: ST_TO_ADDR
// def_amount_of_people := 2 ;
13026: LD_ADDR_EXP 49
13030: PUSH
13031: LD_INT 2
13033: ST_TO_ADDR
// def_skill_level := 1 ;
13034: LD_ADDR_EXP 50
13038: PUSH
13039: LD_INT 1
13041: ST_TO_ADDR
// def_starting_resources := 2 ;
13042: LD_ADDR_EXP 51
13046: PUSH
13047: LD_INT 2
13049: ST_TO_ADDR
// def_shipments_density := 1 ;
13050: LD_ADDR_EXP 52
13054: PUSH
13055: LD_INT 1
13057: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13058: LD_ADDR_EXP 53
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13066: LD_ADDR_EXP 54
13070: PUSH
13071: LD_INT 1
13073: ST_TO_ADDR
// def_shared_vision := 1 ;
13074: LD_ADDR_EXP 55
13078: PUSH
13079: LD_INT 1
13081: ST_TO_ADDR
// def_morale_flags := 3 ;
13082: LD_ADDR_EXP 56
13086: PUSH
13087: LD_INT 3
13089: ST_TO_ADDR
// def_siberite_detection := 1 ;
13090: LD_ADDR_EXP 57
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// def_people_respawning := 1 ;
13098: LD_ADDR_EXP 58
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13106: LD_ADDR_EXP 59
13110: PUSH
13111: LD_INT 1
13113: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13114: LD_ADDR_EXP 60
13118: PUSH
13119: LD_INT 0
13121: ST_TO_ADDR
// def_builduptime := 2 ;
13122: LD_ADDR_EXP 61
13126: PUSH
13127: LD_INT 2
13129: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
13130: LD_ADDR_VAR 0 2
13134: PUSH
13135: EMPTY
13136: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13137: LD_ADDR_VAR 0 3
13141: PUSH
13142: EMPTY
13143: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13144: LD_ADDR_LOC 18
13148: PUSH
13149: EMPTY
13150: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13151: LD_ADDR_LOC 19
13155: PUSH
13156: EMPTY
13157: ST_TO_ADDR
// Banned_Controls := [ ] ;
13158: LD_ADDR_LOC 20
13162: PUSH
13163: EMPTY
13164: ST_TO_ADDR
// Banned_Engines := [ ] ;
13165: LD_ADDR_LOC 21
13169: PUSH
13170: EMPTY
13171: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13172: LD_ADDR_LOC 16
13176: PUSH
13177: LD_INT 37
13179: PUSH
13180: EMPTY
13181: LIST
13182: PUSH
13183: LD_INT 4
13185: PUSH
13186: LD_INT 5
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 31
13195: PUSH
13196: LD_INT 32
13198: PUSH
13199: LD_INT 33
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: LIST
13211: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
13212: LD_ADDR_LOC 17
13216: PUSH
13217: LD_INT 2
13219: PUSH
13220: LD_INT 2
13222: PUSH
13223: LD_INT 4
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: ST_TO_ADDR
// end ; 2 :
13231: GO 14967
13233: LD_INT 2
13235: DOUBLE
13236: EQUAL
13237: IFTRUE 13241
13239: GO 13450
13241: POP
// begin def_base_level := 1 ;
13242: LD_ADDR_EXP 48
13246: PUSH
13247: LD_INT 1
13249: ST_TO_ADDR
// def_amount_of_people := 2 ;
13250: LD_ADDR_EXP 49
13254: PUSH
13255: LD_INT 2
13257: ST_TO_ADDR
// def_skill_level := 3 ;
13258: LD_ADDR_EXP 50
13262: PUSH
13263: LD_INT 3
13265: ST_TO_ADDR
// def_starting_resources := 3 ;
13266: LD_ADDR_EXP 51
13270: PUSH
13271: LD_INT 3
13273: ST_TO_ADDR
// def_shipments_density := 2 ;
13274: LD_ADDR_EXP 52
13278: PUSH
13279: LD_INT 2
13281: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13282: LD_ADDR_EXP 53
13286: PUSH
13287: LD_INT 1
13289: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13290: LD_ADDR_EXP 54
13294: PUSH
13295: LD_INT 2
13297: ST_TO_ADDR
// def_shared_vision := 1 ;
13298: LD_ADDR_EXP 55
13302: PUSH
13303: LD_INT 1
13305: ST_TO_ADDR
// def_morale_flags := 0 ;
13306: LD_ADDR_EXP 56
13310: PUSH
13311: LD_INT 0
13313: ST_TO_ADDR
// def_siberite_detection := 1 ;
13314: LD_ADDR_EXP 57
13318: PUSH
13319: LD_INT 1
13321: ST_TO_ADDR
// def_people_respawning := 0 ;
13322: LD_ADDR_EXP 58
13326: PUSH
13327: LD_INT 0
13329: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13330: LD_ADDR_EXP 59
13334: PUSH
13335: LD_INT 0
13337: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13338: LD_ADDR_EXP 60
13342: PUSH
13343: LD_INT 0
13345: ST_TO_ADDR
// def_builduptime := 2 ;
13346: LD_ADDR_EXP 61
13350: PUSH
13351: LD_INT 2
13353: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13354: LD_ADDR_VAR 0 2
13358: PUSH
13359: LD_INT 1
13361: PUSH
13362: EMPTY
13363: LIST
13364: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13365: LD_ADDR_VAR 0 3
13369: PUSH
13370: EMPTY
13371: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13372: LD_ADDR_LOC 18
13376: PUSH
13377: EMPTY
13378: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13379: LD_ADDR_LOC 19
13383: PUSH
13384: EMPTY
13385: ST_TO_ADDR
// Banned_Controls := [ ] ;
13386: LD_ADDR_LOC 20
13390: PUSH
13391: EMPTY
13392: ST_TO_ADDR
// Banned_Engines := [ ] ;
13393: LD_ADDR_LOC 21
13397: PUSH
13398: EMPTY
13399: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
13400: LD_ADDR_LOC 16
13404: PUSH
13405: LD_INT 4
13407: PUSH
13408: LD_INT 5
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 31
13417: PUSH
13418: LD_INT 32
13420: PUSH
13421: LD_INT 33
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
13433: LD_ADDR_LOC 17
13437: PUSH
13438: LD_INT 1
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: ST_TO_ADDR
// end ; 3 :
13448: GO 14967
13450: LD_INT 3
13452: DOUBLE
13453: EQUAL
13454: IFTRUE 13458
13456: GO 13701
13458: POP
// begin def_base_level := 1 ;
13459: LD_ADDR_EXP 48
13463: PUSH
13464: LD_INT 1
13466: ST_TO_ADDR
// def_amount_of_people := 2 ;
13467: LD_ADDR_EXP 49
13471: PUSH
13472: LD_INT 2
13474: ST_TO_ADDR
// def_skill_level := 3 ;
13475: LD_ADDR_EXP 50
13479: PUSH
13480: LD_INT 3
13482: ST_TO_ADDR
// def_starting_resources := 3 ;
13483: LD_ADDR_EXP 51
13487: PUSH
13488: LD_INT 3
13490: ST_TO_ADDR
// def_shipments_density := 1 ;
13491: LD_ADDR_EXP 52
13495: PUSH
13496: LD_INT 1
13498: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13499: LD_ADDR_EXP 53
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
13507: LD_ADDR_EXP 54
13511: PUSH
13512: LD_INT 1
13514: ST_TO_ADDR
// def_shared_vision := 1 ;
13515: LD_ADDR_EXP 55
13519: PUSH
13520: LD_INT 1
13522: ST_TO_ADDR
// def_morale_flags := 0 ;
13523: LD_ADDR_EXP 56
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// def_siberite_detection := 1 ;
13531: LD_ADDR_EXP 57
13535: PUSH
13536: LD_INT 1
13538: ST_TO_ADDR
// def_people_respawning := 0 ;
13539: LD_ADDR_EXP 58
13543: PUSH
13544: LD_INT 0
13546: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
13547: LD_ADDR_EXP 59
13551: PUSH
13552: LD_INT 2
13554: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13555: LD_ADDR_EXP 60
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// def_builduptime := 1 ;
13563: LD_ADDR_EXP 61
13567: PUSH
13568: LD_INT 1
13570: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
13571: LD_ADDR_VAR 0 2
13575: PUSH
13576: LD_INT 23
13578: PUSH
13579: EMPTY
13580: LIST
13581: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
13582: LD_ADDR_VAR 0 3
13586: PUSH
13587: LD_INT 2
13589: PUSH
13590: LD_INT 37
13592: PUSH
13593: LD_INT 32
13595: PUSH
13596: LD_INT 33
13598: PUSH
13599: LD_INT 36
13601: PUSH
13602: LD_INT 16
13604: PUSH
13605: LD_INT 23
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 18
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_INT 20
13619: PUSH
13620: LD_INT 19
13622: PUSH
13623: LD_INT 25
13625: PUSH
13626: LD_INT 17
13628: PUSH
13629: LD_INT 24
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13649: LD_ADDR_LOC 18
13653: PUSH
13654: EMPTY
13655: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13656: LD_ADDR_LOC 19
13660: PUSH
13661: EMPTY
13662: ST_TO_ADDR
// Banned_Controls := [ ] ;
13663: LD_ADDR_LOC 20
13667: PUSH
13668: EMPTY
13669: ST_TO_ADDR
// Banned_Engines := [ ] ;
13670: LD_ADDR_LOC 21
13674: PUSH
13675: EMPTY
13676: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13677: LD_ADDR_LOC 16
13681: PUSH
13682: EMPTY
13683: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13684: LD_ADDR_LOC 17
13688: PUSH
13689: EMPTY
13690: ST_TO_ADDR
// No_Mechs := true ;
13691: LD_ADDR_EXP 62
13695: PUSH
13696: LD_INT 1
13698: ST_TO_ADDR
// end ; 4 :
13699: GO 14967
13701: LD_INT 4
13703: DOUBLE
13704: EQUAL
13705: IFTRUE 13709
13707: GO 13884
13709: POP
// begin def_base_level := 1 ;
13710: LD_ADDR_EXP 48
13714: PUSH
13715: LD_INT 1
13717: ST_TO_ADDR
// def_amount_of_people := 2 ;
13718: LD_ADDR_EXP 49
13722: PUSH
13723: LD_INT 2
13725: ST_TO_ADDR
// def_skill_level := 3 ;
13726: LD_ADDR_EXP 50
13730: PUSH
13731: LD_INT 3
13733: ST_TO_ADDR
// def_starting_resources := 3 ;
13734: LD_ADDR_EXP 51
13738: PUSH
13739: LD_INT 3
13741: ST_TO_ADDR
// def_shipments_density := 2 ;
13742: LD_ADDR_EXP 52
13746: PUSH
13747: LD_INT 2
13749: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
13750: LD_ADDR_EXP 53
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
13758: LD_ADDR_EXP 54
13762: PUSH
13763: LD_INT 2
13765: ST_TO_ADDR
// def_shared_vision := 1 ;
13766: LD_ADDR_EXP 55
13770: PUSH
13771: LD_INT 1
13773: ST_TO_ADDR
// def_morale_flags := 0 ;
13774: LD_ADDR_EXP 56
13778: PUSH
13779: LD_INT 0
13781: ST_TO_ADDR
// def_siberite_detection := 1 ;
13782: LD_ADDR_EXP 57
13786: PUSH
13787: LD_INT 1
13789: ST_TO_ADDR
// def_people_respawning := 0 ;
13790: LD_ADDR_EXP 58
13794: PUSH
13795: LD_INT 0
13797: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
13798: LD_ADDR_EXP 59
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// def_siberite_bomb := 1 ;
13806: LD_ADDR_EXP 60
13810: PUSH
13811: LD_INT 1
13813: ST_TO_ADDR
// def_builduptime := 3 ;
13814: LD_ADDR_EXP 61
13818: PUSH
13819: LD_INT 3
13821: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
13822: LD_ADDR_VAR 0 2
13826: PUSH
13827: LD_INT 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
13833: LD_ADDR_VAR 0 3
13837: PUSH
13838: EMPTY
13839: ST_TO_ADDR
// Banned_Weapons := [ ] ;
13840: LD_ADDR_LOC 18
13844: PUSH
13845: EMPTY
13846: ST_TO_ADDR
// Banned_Chassis := [ ] ;
13847: LD_ADDR_LOC 19
13851: PUSH
13852: EMPTY
13853: ST_TO_ADDR
// Banned_Controls := [ ] ;
13854: LD_ADDR_LOC 20
13858: PUSH
13859: EMPTY
13860: ST_TO_ADDR
// Banned_Engines := [ ] ;
13861: LD_ADDR_LOC 21
13865: PUSH
13866: EMPTY
13867: ST_TO_ADDR
// Restricted_Builds := [ ] ;
13868: LD_ADDR_LOC 16
13872: PUSH
13873: EMPTY
13874: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
13875: LD_ADDR_LOC 17
13879: PUSH
13880: EMPTY
13881: ST_TO_ADDR
// end ; 5 :
13882: GO 14967
13884: LD_INT 5
13886: DOUBLE
13887: EQUAL
13888: IFTRUE 13892
13890: GO 14141
13892: POP
// begin def_base_level := 0 ;
13893: LD_ADDR_EXP 48
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// def_amount_of_people := 0 ;
13901: LD_ADDR_EXP 49
13905: PUSH
13906: LD_INT 0
13908: ST_TO_ADDR
// def_skill_level := 0 ;
13909: LD_ADDR_EXP 50
13913: PUSH
13914: LD_INT 0
13916: ST_TO_ADDR
// def_starting_resources := 0 ;
13917: LD_ADDR_EXP 51
13921: PUSH
13922: LD_INT 0
13924: ST_TO_ADDR
// def_shipments_density := 0 ;
13925: LD_ADDR_EXP 52
13929: PUSH
13930: LD_INT 0
13932: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
13933: LD_ADDR_EXP 53
13937: PUSH
13938: LD_INT 0
13940: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
13941: LD_ADDR_EXP 54
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// def_shared_vision := 1 ;
13949: LD_ADDR_EXP 55
13953: PUSH
13954: LD_INT 1
13956: ST_TO_ADDR
// def_morale_flags := 0 ;
13957: LD_ADDR_EXP 56
13961: PUSH
13962: LD_INT 0
13964: ST_TO_ADDR
// def_siberite_detection := 0 ;
13965: LD_ADDR_EXP 57
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// def_people_respawning := 1 ;
13973: LD_ADDR_EXP 58
13977: PUSH
13978: LD_INT 1
13980: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
13981: LD_ADDR_EXP 59
13985: PUSH
13986: LD_INT 1
13988: ST_TO_ADDR
// def_siberite_bomb := 0 ;
13989: LD_ADDR_EXP 60
13993: PUSH
13994: LD_INT 0
13996: ST_TO_ADDR
// def_builduptime := 0 ;
13997: LD_ADDR_EXP 61
14001: PUSH
14002: LD_INT 0
14004: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
14005: LD_ADDR_VAR 0 2
14009: PUSH
14010: LD_INT 10
14012: PUSH
14013: LD_INT 3
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
14020: LD_ADDR_VAR 0 3
14024: PUSH
14025: LD_INT 12
14027: PUSH
14028: LD_INT 11
14030: PUSH
14031: LD_INT 14
14033: PUSH
14034: LD_INT 13
14036: PUSH
14037: LD_INT 5
14039: PUSH
14040: LD_INT 24
14042: PUSH
14043: LD_INT 21
14045: PUSH
14046: LD_INT 33
14048: PUSH
14049: LD_INT 36
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
14063: LD_ADDR_LOC 18
14067: PUSH
14068: LD_INT 31
14070: PUSH
14071: EMPTY
14072: LIST
14073: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14074: LD_ADDR_LOC 19
14078: PUSH
14079: EMPTY
14080: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
14081: LD_ADDR_LOC 20
14085: PUSH
14086: LD_INT 2
14088: PUSH
14089: EMPTY
14090: LIST
14091: ST_TO_ADDR
// Banned_Engines := [ ] ;
14092: LD_ADDR_LOC 21
14096: PUSH
14097: EMPTY
14098: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
14099: LD_ADDR_LOC 16
14103: PUSH
14104: LD_INT 4
14106: PUSH
14107: EMPTY
14108: LIST
14109: PUSH
14110: LD_INT 31
14112: PUSH
14113: LD_INT 32
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
14124: LD_ADDR_LOC 17
14128: PUSH
14129: LD_INT 1
14131: PUSH
14132: LD_INT 1
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: ST_TO_ADDR
// end ; 6 :
14139: GO 14967
14141: LD_INT 6
14143: DOUBLE
14144: EQUAL
14145: IFTRUE 14149
14147: GO 14352
14149: POP
// begin def_base_level := 1 ;
14150: LD_ADDR_EXP 48
14154: PUSH
14155: LD_INT 1
14157: ST_TO_ADDR
// def_amount_of_people := 2 ;
14158: LD_ADDR_EXP 49
14162: PUSH
14163: LD_INT 2
14165: ST_TO_ADDR
// def_skill_level := 3 ;
14166: LD_ADDR_EXP 50
14170: PUSH
14171: LD_INT 3
14173: ST_TO_ADDR
// def_starting_resources := 3 ;
14174: LD_ADDR_EXP 51
14178: PUSH
14179: LD_INT 3
14181: ST_TO_ADDR
// def_shipments_density := 1 ;
14182: LD_ADDR_EXP 52
14186: PUSH
14187: LD_INT 1
14189: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14190: LD_ADDR_EXP 53
14194: PUSH
14195: LD_INT 0
14197: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
14198: LD_ADDR_EXP 54
14202: PUSH
14203: LD_INT 1
14205: ST_TO_ADDR
// def_shared_vision := 1 ;
14206: LD_ADDR_EXP 55
14210: PUSH
14211: LD_INT 1
14213: ST_TO_ADDR
// def_morale_flags := 0 ;
14214: LD_ADDR_EXP 56
14218: PUSH
14219: LD_INT 0
14221: ST_TO_ADDR
// def_siberite_detection := 1 ;
14222: LD_ADDR_EXP 57
14226: PUSH
14227: LD_INT 1
14229: ST_TO_ADDR
// def_people_respawning := 2 ;
14230: LD_ADDR_EXP 58
14234: PUSH
14235: LD_INT 2
14237: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14238: LD_ADDR_EXP 59
14242: PUSH
14243: LD_INT 1
14245: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14246: LD_ADDR_EXP 60
14250: PUSH
14251: LD_INT 0
14253: ST_TO_ADDR
// def_builduptime := 1 ;
14254: LD_ADDR_EXP 61
14258: PUSH
14259: LD_INT 1
14261: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14262: LD_ADDR_VAR 0 2
14266: PUSH
14267: LD_INT 23
14269: PUSH
14270: EMPTY
14271: LIST
14272: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
14273: LD_ADDR_VAR 0 3
14277: PUSH
14278: LD_INT 2
14280: PUSH
14281: LD_INT 37
14283: PUSH
14284: LD_INT 31
14286: PUSH
14287: LD_INT 32
14289: PUSH
14290: LD_INT 33
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14300: LD_ADDR_LOC 18
14304: PUSH
14305: EMPTY
14306: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14307: LD_ADDR_LOC 19
14311: PUSH
14312: EMPTY
14313: ST_TO_ADDR
// Banned_Controls := [ ] ;
14314: LD_ADDR_LOC 20
14318: PUSH
14319: EMPTY
14320: ST_TO_ADDR
// Banned_Engines := [ ] ;
14321: LD_ADDR_LOC 21
14325: PUSH
14326: EMPTY
14327: ST_TO_ADDR
// Restricted_Builds := [ ] ;
14328: LD_ADDR_LOC 16
14332: PUSH
14333: EMPTY
14334: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
14335: LD_ADDR_LOC 17
14339: PUSH
14340: EMPTY
14341: ST_TO_ADDR
// No_Mechs := true ;
14342: LD_ADDR_EXP 62
14346: PUSH
14347: LD_INT 1
14349: ST_TO_ADDR
// end ; 7 :
14350: GO 14967
14352: LD_INT 7
14354: DOUBLE
14355: EQUAL
14356: IFTRUE 14360
14358: GO 14558
14360: POP
// begin def_base_level := 1 ;
14361: LD_ADDR_EXP 48
14365: PUSH
14366: LD_INT 1
14368: ST_TO_ADDR
// def_amount_of_people := 2 ;
14369: LD_ADDR_EXP 49
14373: PUSH
14374: LD_INT 2
14376: ST_TO_ADDR
// def_skill_level := 3 ;
14377: LD_ADDR_EXP 50
14381: PUSH
14382: LD_INT 3
14384: ST_TO_ADDR
// def_starting_resources := 3 ;
14385: LD_ADDR_EXP 51
14389: PUSH
14390: LD_INT 3
14392: ST_TO_ADDR
// def_shipments_density := 1 ;
14393: LD_ADDR_EXP 52
14397: PUSH
14398: LD_INT 1
14400: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
14401: LD_ADDR_EXP 53
14405: PUSH
14406: LD_INT 1
14408: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
14409: LD_ADDR_EXP 54
14413: PUSH
14414: LD_INT 2
14416: ST_TO_ADDR
// def_shared_vision := 1 ;
14417: LD_ADDR_EXP 55
14421: PUSH
14422: LD_INT 1
14424: ST_TO_ADDR
// def_morale_flags := 0 ;
14425: LD_ADDR_EXP 56
14429: PUSH
14430: LD_INT 0
14432: ST_TO_ADDR
// def_siberite_detection := 1 ;
14433: LD_ADDR_EXP 57
14437: PUSH
14438: LD_INT 1
14440: ST_TO_ADDR
// def_people_respawning := 0 ;
14441: LD_ADDR_EXP 58
14445: PUSH
14446: LD_INT 0
14448: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
14449: LD_ADDR_EXP 59
14453: PUSH
14454: LD_INT 1
14456: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14457: LD_ADDR_EXP 60
14461: PUSH
14462: LD_INT 0
14464: ST_TO_ADDR
// def_builduptime := 3 ;
14465: LD_ADDR_EXP 61
14469: PUSH
14470: LD_INT 3
14472: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: LD_INT 23
14480: PUSH
14481: EMPTY
14482: LIST
14483: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
14484: LD_ADDR_VAR 0 3
14488: PUSH
14489: LD_INT 37
14491: PUSH
14492: EMPTY
14493: LIST
14494: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14495: LD_ADDR_LOC 18
14499: PUSH
14500: EMPTY
14501: ST_TO_ADDR
// Banned_Chassis := [ ] ;
14502: LD_ADDR_LOC 19
14506: PUSH
14507: EMPTY
14508: ST_TO_ADDR
// Banned_Controls := [ ] ;
14509: LD_ADDR_LOC 20
14513: PUSH
14514: EMPTY
14515: ST_TO_ADDR
// Banned_Engines := [ ] ;
14516: LD_ADDR_LOC 21
14520: PUSH
14521: EMPTY
14522: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
14523: LD_ADDR_LOC 16
14527: PUSH
14528: LD_INT 31
14530: PUSH
14531: LD_INT 32
14533: PUSH
14534: LD_INT 33
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: LIST
14541: PUSH
14542: EMPTY
14543: LIST
14544: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
14545: LD_ADDR_LOC 17
14549: PUSH
14550: LD_INT 10
14552: PUSH
14553: EMPTY
14554: LIST
14555: ST_TO_ADDR
// end ; 8 :
14556: GO 14967
14558: LD_INT 8
14560: DOUBLE
14561: EQUAL
14562: IFTRUE 14566
14564: GO 14966
14566: POP
// begin def_base_level := 0 ;
14567: LD_ADDR_EXP 48
14571: PUSH
14572: LD_INT 0
14574: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
14575: LD_ADDR_EXP 49
14579: PUSH
14580: LD_INT 0
14582: PPUSH
14583: LD_INT 1
14585: PPUSH
14586: CALL_OW 12
14590: ST_TO_ADDR
// def_skill_level := 0 ;
14591: LD_ADDR_EXP 50
14595: PUSH
14596: LD_INT 0
14598: ST_TO_ADDR
// def_starting_resources := 2 ;
14599: LD_ADDR_EXP 51
14603: PUSH
14604: LD_INT 2
14606: ST_TO_ADDR
// def_shipments_density := 1 ;
14607: LD_ADDR_EXP 52
14611: PUSH
14612: LD_INT 1
14614: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
14615: LD_ADDR_EXP 53
14619: PUSH
14620: LD_INT 0
14622: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
14623: LD_ADDR_EXP 54
14627: PUSH
14628: LD_INT 0
14630: ST_TO_ADDR
// def_shared_vision := 1 ;
14631: LD_ADDR_EXP 55
14635: PUSH
14636: LD_INT 1
14638: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
14639: LD_ADDR_EXP 56
14643: PUSH
14644: LD_INT 0
14646: PPUSH
14647: LD_INT 2
14649: PPUSH
14650: CALL_OW 12
14654: ST_TO_ADDR
// def_siberite_detection := 0 ;
14655: LD_ADDR_EXP 57
14659: PUSH
14660: LD_INT 0
14662: ST_TO_ADDR
// def_people_respawning := 0 ;
14663: LD_ADDR_EXP 58
14667: PUSH
14668: LD_INT 0
14670: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
14671: LD_ADDR_EXP 59
14675: PUSH
14676: LD_INT 2
14678: ST_TO_ADDR
// def_siberite_bomb := 0 ;
14679: LD_ADDR_EXP 60
14683: PUSH
14684: LD_INT 0
14686: ST_TO_ADDR
// def_builduptime := 0 ;
14687: LD_ADDR_EXP 61
14691: PUSH
14692: LD_INT 0
14694: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
14695: LD_ADDR_VAR 0 2
14699: PUSH
14700: LD_INT 23
14702: PUSH
14703: LD_INT 20
14705: PUSH
14706: LD_INT 40
14708: PUSH
14709: LD_INT 47
14711: PUSH
14712: LD_INT 46
14714: PUSH
14715: LD_INT 39
14717: PUSH
14718: LD_INT 71
14720: PUSH
14721: LD_INT 34
14723: PUSH
14724: LD_INT 41
14726: PUSH
14727: LD_INT 44
14729: PUSH
14730: LD_INT 17
14732: PUSH
14733: LD_INT 16
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
14750: LD_ADDR_VAR 0 3
14754: PUSH
14755: LD_INT 37
14757: PUSH
14758: LD_INT 5
14760: PUSH
14761: LD_INT 13
14763: PUSH
14764: LD_INT 34
14766: PUSH
14767: LD_INT 12
14769: PUSH
14770: LD_INT 15
14772: PUSH
14773: LD_INT 11
14775: PUSH
14776: LD_INT 14
14778: PUSH
14779: LD_INT 29
14781: PUSH
14782: LD_INT 30
14784: PUSH
14785: LD_INT 28
14787: PUSH
14788: LD_INT 24
14790: PUSH
14791: LD_INT 25
14793: PUSH
14794: LD_INT 20
14796: PUSH
14797: LD_INT 21
14799: PUSH
14800: LD_INT 22
14802: PUSH
14803: LD_INT 36
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: ST_TO_ADDR
// Banned_Weapons := [ ] ;
14825: LD_ADDR_LOC 18
14829: PUSH
14830: EMPTY
14831: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
14832: LD_ADDR_LOC 19
14836: PUSH
14837: LD_INT 14
14839: PUSH
14840: EMPTY
14841: LIST
14842: ST_TO_ADDR
// Banned_Controls := [ ] ;
14843: LD_ADDR_LOC 20
14847: PUSH
14848: EMPTY
14849: ST_TO_ADDR
// Banned_Engines := [ ] ;
14850: LD_ADDR_LOC 21
14854: PUSH
14855: EMPTY
14856: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
14857: LD_ADDR_LOC 16
14861: PUSH
14862: LD_INT 31
14864: PUSH
14865: LD_INT 32
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 4
14874: PUSH
14875: EMPTY
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
14882: LD_ADDR_LOC 17
14886: PUSH
14887: LD_INT 2
14889: PUSH
14890: LD_INT 1
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: ST_TO_ADDR
// for i := 1 to 8 do
14897: LD_ADDR_VAR 0 4
14901: PUSH
14902: DOUBLE
14903: LD_INT 1
14905: DEC
14906: ST_TO_ADDR
14907: LD_INT 8
14909: PUSH
14910: FOR_TO
14911: IFFALSE 14962
// if ( Side_Nations [ i ] = 3 ) then
14913: LD_EXP 24
14917: PUSH
14918: LD_VAR 0 4
14922: ARRAY
14923: PUSH
14924: LD_INT 3
14926: EQUAL
14927: IFFALSE 14960
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
14929: LD_ADDR_EXP 24
14933: PUSH
14934: LD_EXP 24
14938: PPUSH
14939: LD_VAR 0 4
14943: PPUSH
14944: LD_INT 1
14946: PPUSH
14947: LD_INT 2
14949: PPUSH
14950: CALL_OW 12
14954: PPUSH
14955: CALL_OW 1
14959: ST_TO_ADDR
14960: GO 14910
14962: POP
14963: POP
// end ; end ;
14964: GO 14967
14966: POP
// for i := 1 to 8 do
14967: LD_ADDR_VAR 0 4
14971: PUSH
14972: DOUBLE
14973: LD_INT 1
14975: DEC
14976: ST_TO_ADDR
14977: LD_INT 8
14979: PUSH
14980: FOR_TO
14981: IFFALSE 15065
// if Side_Positions [ i ] then
14983: LD_EXP 23
14987: PUSH
14988: LD_VAR 0 4
14992: ARRAY
14993: IFFALSE 15063
// begin for j in Unavailable_Techs do
14995: LD_ADDR_VAR 0 5
14999: PUSH
15000: LD_VAR 0 2
15004: PUSH
15005: FOR_IN
15006: IFFALSE 15027
// SetTech ( j , i , 0 ) ;
15008: LD_VAR 0 5
15012: PPUSH
15013: LD_VAR 0 4
15017: PPUSH
15018: LD_INT 0
15020: PPUSH
15021: CALL_OW 322
15025: GO 15005
15027: POP
15028: POP
// for j in Unavailable_Builds do
15029: LD_ADDR_VAR 0 5
15033: PUSH
15034: LD_VAR 0 3
15038: PUSH
15039: FOR_IN
15040: IFFALSE 15061
// SetRestrict ( j , i , 0 ) ;
15042: LD_VAR 0 5
15046: PPUSH
15047: LD_VAR 0 4
15051: PPUSH
15052: LD_INT 0
15054: PPUSH
15055: CALL_OW 324
15059: GO 15039
15061: POP
15062: POP
// end ;
15063: GO 14980
15065: POP
15066: POP
// end ;
15067: LD_VAR 0 1
15071: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
15072: LD_INT 0
15074: PPUSH
15075: PPUSH
15076: PPUSH
15077: PPUSH
15078: PPUSH
15079: PPUSH
15080: PPUSH
// for i := 1 to Restricted_Builds do
15081: LD_ADDR_VAR 0 2
15085: PUSH
15086: DOUBLE
15087: LD_INT 1
15089: DEC
15090: ST_TO_ADDR
15091: LD_LOC 16
15095: PUSH
15096: FOR_TO
15097: IFFALSE 15407
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
15099: LD_LOC 16
15103: PUSH
15104: LD_VAR 0 2
15108: ARRAY
15109: PUSH
15110: LD_INT 1
15112: ARRAY
15113: PUSH
15114: LD_INT 31
15116: DOUBLE
15117: EQUAL
15118: IFTRUE 15134
15120: LD_INT 32
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15134
15126: LD_INT 33
15128: DOUBLE
15129: EQUAL
15130: IFTRUE 15134
15132: GO 15145
15134: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
15135: LD_ADDR_VAR 0 6
15139: PUSH
15140: LD_STRING #Turrets
15142: ST_TO_ADDR
15143: GO 15190
15145: LD_INT 4
15147: DOUBLE
15148: EQUAL
15149: IFTRUE 15159
15151: LD_INT 5
15153: DOUBLE
15154: EQUAL
15155: IFTRUE 15159
15157: GO 15170
15159: POP
// btype := #Armouries ; b_Behemoth :
15160: LD_ADDR_VAR 0 6
15164: PUSH
15165: LD_STRING #Armouries
15167: ST_TO_ADDR
15168: GO 15190
15170: LD_INT 37
15172: DOUBLE
15173: EQUAL
15174: IFTRUE 15178
15176: GO 15189
15178: POP
// btype := #Behemoths ; end ;
15179: LD_ADDR_VAR 0 6
15183: PUSH
15184: LD_STRING #Behemoths
15186: ST_TO_ADDR
15187: GO 15190
15189: POP
// list := [ ] ;
15190: LD_ADDR_VAR 0 7
15194: PUSH
15195: EMPTY
15196: ST_TO_ADDR
// for j := 1 to 8 do
15197: LD_ADDR_VAR 0 3
15201: PUSH
15202: DOUBLE
15203: LD_INT 1
15205: DEC
15206: ST_TO_ADDR
15207: LD_INT 8
15209: PUSH
15210: FOR_TO
15211: IFFALSE 15304
// if Side_Positions [ j ] then
15213: LD_EXP 23
15217: PUSH
15218: LD_VAR 0 3
15222: ARRAY
15223: IFFALSE 15302
// begin amount := 0 ;
15225: LD_ADDR_VAR 0 5
15229: PUSH
15230: LD_INT 0
15232: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
15233: LD_ADDR_VAR 0 4
15237: PUSH
15238: LD_LOC 16
15242: PUSH
15243: LD_VAR 0 2
15247: ARRAY
15248: PUSH
15249: FOR_IN
15250: IFFALSE 15298
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
15252: LD_ADDR_VAR 0 5
15256: PUSH
15257: LD_VAR 0 5
15261: PUSH
15262: LD_INT 22
15264: PUSH
15265: LD_VAR 0 3
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 30
15276: PUSH
15277: LD_VAR 0 4
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PPUSH
15290: CALL_OW 69
15294: PLUS
15295: ST_TO_ADDR
15296: GO 15249
15298: POP
15299: POP
// break ;
15300: GO 15304
// end ;
15302: GO 15210
15304: POP
15305: POP
// list := [ ] ;
15306: LD_ADDR_VAR 0 7
15310: PUSH
15311: EMPTY
15312: ST_TO_ADDR
// for j := 1 to 8 do
15313: LD_ADDR_VAR 0 3
15317: PUSH
15318: DOUBLE
15319: LD_INT 1
15321: DEC
15322: ST_TO_ADDR
15323: LD_INT 8
15325: PUSH
15326: FOR_TO
15327: IFFALSE 15347
// list := list ^ amount ;
15329: LD_ADDR_VAR 0 7
15333: PUSH
15334: LD_VAR 0 7
15338: PUSH
15339: LD_VAR 0 5
15343: ADD
15344: ST_TO_ADDR
15345: GO 15326
15347: POP
15348: POP
// Already_Built := Already_Built ^ [ list ] ;
15349: LD_ADDR_LOC 22
15353: PUSH
15354: LD_LOC 22
15358: PUSH
15359: LD_VAR 0 7
15363: PUSH
15364: EMPTY
15365: LIST
15366: ADD
15367: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
15368: LD_ADDR_LOC 23
15372: PUSH
15373: LD_LOC 23
15377: PUSH
15378: LD_VAR 0 6
15382: PUSH
15383: LD_VAR 0 5
15387: PUSH
15388: LD_LOC 17
15392: PUSH
15393: LD_VAR 0 2
15397: ARRAY
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: ADD
15404: ST_TO_ADDR
// end ;
15405: GO 15096
15407: POP
15408: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
15409: LD_ADDR_LOC 24
15413: PUSH
15414: LD_INT 0
15416: PUSH
15417: LD_INT 0
15419: PUSH
15420: LD_INT 0
15422: PUSH
15423: LD_INT 0
15425: PUSH
15426: LD_INT 0
15428: PUSH
15429: LD_INT 0
15431: PUSH
15432: LD_INT 0
15434: PUSH
15435: LD_INT 0
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: ST_TO_ADDR
// if Limits_Info then
15448: LD_LOC 23
15452: IFFALSE 15468
// Limits_Info := #Limits ^ Limits_Info ;
15454: LD_ADDR_LOC 23
15458: PUSH
15459: LD_STRING #Limits
15461: PUSH
15462: LD_LOC 23
15466: ADD
15467: ST_TO_ADDR
// end ;
15468: LD_VAR 0 1
15472: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
15473: LD_INT 0
15475: PPUSH
15476: PPUSH
15477: PPUSH
15478: PPUSH
// for i := 1 to Restricted_Builds do
15479: LD_ADDR_VAR 0 7
15483: PUSH
15484: DOUBLE
15485: LD_INT 1
15487: DEC
15488: ST_TO_ADDR
15489: LD_LOC 16
15493: PUSH
15494: FOR_TO
15495: IFFALSE 15918
// if BType in Restricted_Builds [ i ] then
15497: LD_VAR 0 2
15501: PUSH
15502: LD_LOC 16
15506: PUSH
15507: LD_VAR 0 7
15511: ARRAY
15512: IN
15513: IFFALSE 15916
// begin if old_side then
15515: LD_VAR 0 4
15519: IFFALSE 15645
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
15521: LD_LOC 22
15525: PUSH
15526: LD_VAR 0 7
15530: ARRAY
15531: PUSH
15532: LD_VAR 0 3
15536: ARRAY
15537: PUSH
15538: LD_VAR 0 5
15542: PLUS
15543: PUSH
15544: LD_LOC 17
15548: PUSH
15549: LD_VAR 0 7
15553: ARRAY
15554: GREATER
15555: IFFALSE 15581
// begin SetSide ( un , old_side ) ;
15557: LD_VAR 0 1
15561: PPUSH
15562: LD_VAR 0 4
15566: PPUSH
15567: CALL_OW 235
// count := 0 ;
15571: LD_ADDR_VAR 0 5
15575: PUSH
15576: LD_INT 0
15578: ST_TO_ADDR
// end else
15579: GO 15645
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
15581: LD_ADDR_LOC 22
15585: PUSH
15586: LD_LOC 22
15590: PPUSH
15591: LD_VAR 0 7
15595: PPUSH
15596: LD_LOC 22
15600: PUSH
15601: LD_VAR 0 7
15605: ARRAY
15606: PPUSH
15607: LD_VAR 0 4
15611: PPUSH
15612: LD_LOC 22
15616: PUSH
15617: LD_VAR 0 7
15621: ARRAY
15622: PUSH
15623: LD_VAR 0 4
15627: ARRAY
15628: PUSH
15629: LD_VAR 0 5
15633: MINUS
15634: PPUSH
15635: CALL_OW 1
15639: PPUSH
15640: CALL_OW 1
15644: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
15645: LD_ADDR_LOC 22
15649: PUSH
15650: LD_LOC 22
15654: PPUSH
15655: LD_VAR 0 7
15659: PPUSH
15660: LD_LOC 22
15664: PUSH
15665: LD_VAR 0 7
15669: ARRAY
15670: PPUSH
15671: LD_VAR 0 3
15675: PPUSH
15676: LD_LOC 22
15680: PUSH
15681: LD_VAR 0 7
15685: ARRAY
15686: PUSH
15687: LD_VAR 0 3
15691: ARRAY
15692: PUSH
15693: LD_VAR 0 5
15697: PLUS
15698: PPUSH
15699: CALL_OW 1
15703: PPUSH
15704: CALL_OW 1
15708: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
15709: LD_VAR 0 5
15713: PUSH
15714: LD_INT 0
15716: NONEQUAL
15717: PUSH
15718: LD_VAR 0 3
15722: PUSH
15723: LD_OWVAR 2
15727: EQUAL
15728: AND
15729: IFFALSE 15772
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
15731: LD_ADDR_LOC 23
15735: PUSH
15736: LD_LOC 23
15740: PPUSH
15741: LD_INT 3
15743: PUSH
15744: LD_VAR 0 7
15748: MUL
15749: PPUSH
15750: LD_LOC 22
15754: PUSH
15755: LD_VAR 0 7
15759: ARRAY
15760: PUSH
15761: LD_VAR 0 3
15765: ARRAY
15766: PPUSH
15767: CALL_OW 1
15771: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
15772: LD_LOC 22
15776: PUSH
15777: LD_VAR 0 7
15781: ARRAY
15782: PUSH
15783: LD_VAR 0 3
15787: ARRAY
15788: PUSH
15789: LD_LOC 17
15793: PUSH
15794: LD_VAR 0 7
15798: ARRAY
15799: GREATER
15800: IFFALSE 15827
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
15802: LD_ADDR_LOC 24
15806: PUSH
15807: LD_LOC 24
15811: PPUSH
15812: LD_VAR 0 3
15816: PPUSH
15817: LD_INT 1
15819: PPUSH
15820: CALL_OW 1
15824: ST_TO_ADDR
// end else
15825: GO 15914
// begin for j := 1 to Restricted_Builds do
15827: LD_ADDR_VAR 0 8
15831: PUSH
15832: DOUBLE
15833: LD_INT 1
15835: DEC
15836: ST_TO_ADDR
15837: LD_LOC 16
15841: PUSH
15842: FOR_TO
15843: IFFALSE 15887
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
15845: LD_LOC 22
15849: PUSH
15850: LD_VAR 0 8
15854: ARRAY
15855: PUSH
15856: LD_VAR 0 3
15860: ARRAY
15861: PUSH
15862: LD_LOC 17
15866: PUSH
15867: LD_VAR 0 8
15871: ARRAY
15872: GREATER
15873: IFFALSE 15885
// begin Is_Cheater := true ;
15875: LD_ADDR_VAR 0 9
15879: PUSH
15880: LD_INT 1
15882: ST_TO_ADDR
// break ;
15883: GO 15887
// end ;
15885: GO 15842
15887: POP
15888: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
15889: LD_ADDR_LOC 24
15893: PUSH
15894: LD_LOC 24
15898: PPUSH
15899: LD_VAR 0 3
15903: PPUSH
15904: LD_VAR 0 9
15908: PPUSH
15909: CALL_OW 1
15913: ST_TO_ADDR
// end ; break ;
15914: GO 15918
// end ;
15916: GO 15494
15918: POP
15919: POP
// end ;
15920: LD_VAR 0 6
15924: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
15925: LD_VAR 0 5
15929: PUSH
15930: LD_LOC 18
15934: IN
15935: PUSH
15936: LD_VAR 0 2
15940: PUSH
15941: LD_LOC 19
15945: IN
15946: OR
15947: PUSH
15948: LD_VAR 0 4
15952: PUSH
15953: LD_LOC 20
15957: IN
15958: OR
15959: PUSH
15960: LD_VAR 0 3
15964: PUSH
15965: LD_LOC 21
15969: IN
15970: OR
15971: IFFALSE 15982
// ComCancel ( factory ) ;
15973: LD_VAR 0 1
15977: PPUSH
15978: CALL_OW 127
// end ;
15982: PPOPN 5
15984: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
15985: LD_VAR 0 2
15989: PUSH
15990: LD_LOC 18
15994: IN
15995: IFFALSE 16006
// ComCancel ( building ) ;
15997: LD_VAR 0 1
16001: PPUSH
16002: CALL_OW 127
// end ; end_of_file
16006: PPOPN 2
16008: END
// export ExtraStrings ; export WaitServerStrings ; export Display_kings ; export function ShowTimer ; var AllStrings ; begin
16009: LD_INT 0
16011: PPUSH
16012: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
16013: LD_ADDR_VAR 0 2
16017: PUSH
16018: LD_STRING #Multi1x1-Time
16020: PUSH
16021: LD_OWVAR 1
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: ST_TO_ADDR
// if WaitServerStrings then
16030: LD_EXP 64
16034: IFFALSE 16052
// AllStrings = AllStrings ^ WaitServerStrings ;
16036: LD_ADDR_VAR 0 2
16040: PUSH
16041: LD_VAR 0 2
16045: PUSH
16046: LD_EXP 64
16050: ADD
16051: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
16052: LD_INT 0
16054: PUSH
16055: LD_EXP 18
16059: PUSH
16060: LD_OWVAR 1
16064: MINUS
16065: LESSEQUAL
16066: IFFALSE 16097
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: LD_VAR 0 2
16077: PUSH
16078: LD_STRING #allowedsibbomb
16080: PUSH
16081: LD_EXP 18
16085: PUSH
16086: LD_OWVAR 1
16090: MINUS
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: ADD
16096: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
16097: LD_INT 0
16099: PUSH
16100: LD_EXP 68
16104: PUSH
16105: LD_OWVAR 1
16109: MINUS
16110: LESSEQUAL
16111: IFFALSE 16142
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
16113: LD_ADDR_VAR 0 2
16117: PUSH
16118: LD_VAR 0 2
16122: PUSH
16123: LD_STRING #builduptime
16125: PUSH
16126: LD_EXP 68
16130: PUSH
16131: LD_OWVAR 1
16135: MINUS
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: ADD
16141: ST_TO_ADDR
// if ( ExtraStrings ) then
16142: LD_EXP 63
16146: IFFALSE 16168
// AllStrings := AllStrings ^  ^ ExtraStrings ;
16148: LD_ADDR_VAR 0 2
16152: PUSH
16153: LD_VAR 0 2
16157: PUSH
16158: LD_STRING 
16160: ADD
16161: PUSH
16162: LD_EXP 63
16166: ADD
16167: ST_TO_ADDR
// if Display_kings and not isSGUI then
16168: LD_EXP 65
16172: PUSH
16173: LD_OWVAR 83
16177: NOT
16178: AND
16179: IFFALSE 16197
// AllStrings = AllStrings ^ Display_kings ;
16181: LD_ADDR_VAR 0 2
16185: PUSH
16186: LD_VAR 0 2
16190: PUSH
16191: LD_EXP 65
16195: ADD
16196: ST_TO_ADDR
// if ( LimitsStrings ) then
16197: CALL 12849 0 0
16201: IFFALSE 16223
// AllStrings := AllStrings ^  ^ LimitsStrings ;
16203: LD_ADDR_VAR 0 2
16207: PUSH
16208: LD_VAR 0 2
16212: PUSH
16213: LD_STRING 
16215: ADD
16216: PUSH
16217: CALL 12849 0 0
16221: ADD
16222: ST_TO_ADDR
// Display_Strings := AllStrings ;
16223: LD_ADDR_OWVAR 47
16227: PUSH
16228: LD_VAR 0 2
16232: ST_TO_ADDR
// end ;
16233: LD_VAR 0 1
16237: RET
// every 0 0$1 do
16238: GO 16240
16240: DISABLE
// begin ShowTimer ;
16241: CALL 16009 0 0
// enable ;
16245: ENABLE
// end ; end_of_file
16246: END
// var sharedPoints1 , sharedPoints2 , sharedPoints3 ; var pointGame ; export function InitPoints ( ) ; var i , d ; begin
16247: LD_INT 0
16249: PPUSH
16250: PPUSH
16251: PPUSH
// sharedPoints1 = [ ] ;
16252: LD_ADDR_LOC 25
16256: PUSH
16257: EMPTY
16258: ST_TO_ADDR
// sharedPoints2 = [ ] ;
16259: LD_ADDR_LOC 26
16263: PUSH
16264: EMPTY
16265: ST_TO_ADDR
// sharedPoints3 = [ ] ;
16266: LD_ADDR_LOC 27
16270: PUSH
16271: EMPTY
16272: ST_TO_ADDR
// for i = 1 to Side_Positions + 0 do
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: DOUBLE
16279: LD_INT 1
16281: DEC
16282: ST_TO_ADDR
16283: LD_EXP 23
16287: PUSH
16288: LD_INT 0
16290: PLUS
16291: PUSH
16292: FOR_TO
16293: IFFALSE 16395
// begin if not Side_Positions [ i ] = 0 then
16295: LD_EXP 23
16299: PUSH
16300: LD_VAR 0 2
16304: ARRAY
16305: PUSH
16306: LD_INT 0
16308: EQUAL
16309: NOT
16310: IFFALSE 16324
// SetMultiScore ( i , 0 ) ;
16312: LD_VAR 0 2
16316: PPUSH
16317: LD_INT 0
16319: PPUSH
16320: CALL_OW 506
// sharedPoints1 = Replace ( sharedPoints1 , i , 0 ) ;
16324: LD_ADDR_LOC 25
16328: PUSH
16329: LD_LOC 25
16333: PPUSH
16334: LD_VAR 0 2
16338: PPUSH
16339: LD_INT 0
16341: PPUSH
16342: CALL_OW 1
16346: ST_TO_ADDR
// sharedPoints2 = Replace ( sharedPoints2 , i , 0 ) ;
16347: LD_ADDR_LOC 26
16351: PUSH
16352: LD_LOC 26
16356: PPUSH
16357: LD_VAR 0 2
16361: PPUSH
16362: LD_INT 0
16364: PPUSH
16365: CALL_OW 1
16369: ST_TO_ADDR
// sharedPoints3 = Replace ( sharedPoints3 , i , 0 ) ;
16370: LD_ADDR_LOC 27
16374: PUSH
16375: LD_LOC 27
16379: PPUSH
16380: LD_VAR 0 2
16384: PPUSH
16385: LD_INT 0
16387: PPUSH
16388: CALL_OW 1
16392: ST_TO_ADDR
// end ;
16393: GO 16292
16395: POP
16396: POP
// pointGame = true ;
16397: LD_ADDR_LOC 28
16401: PUSH
16402: LD_INT 1
16404: ST_TO_ADDR
// end ;
16405: LD_VAR 0 1
16409: RET
// every 0 0$1 trigger pointGame do var i , red , blue , yel , green , redN , blueN , yelN , greenN , s , n , p , you ;
16410: LD_LOC 28
16414: IFFALSE 16825
16416: GO 16418
16418: DISABLE
16419: LD_INT 0
16421: PPUSH
16422: PPUSH
16423: PPUSH
16424: PPUSH
16425: PPUSH
16426: PPUSH
16427: PPUSH
16428: PPUSH
16429: PPUSH
16430: PPUSH
16431: PPUSH
16432: PPUSH
16433: PPUSH
// begin if isSGUI then
16434: LD_OWVAR 83
16438: IFFALSE 16825
// begin if Teams [ 1 ] then
16440: LD_EXP 22
16444: PUSH
16445: LD_INT 1
16447: ARRAY
16448: IFFALSE 16460
// red = true else
16450: LD_ADDR_VAR 0 2
16454: PUSH
16455: LD_INT 1
16457: ST_TO_ADDR
16458: GO 16468
// red = false ;
16460: LD_ADDR_VAR 0 2
16464: PUSH
16465: LD_INT 0
16467: ST_TO_ADDR
// if Teams [ 2 ] then
16468: LD_EXP 22
16472: PUSH
16473: LD_INT 2
16475: ARRAY
16476: IFFALSE 16488
// blue = true else
16478: LD_ADDR_VAR 0 3
16482: PUSH
16483: LD_INT 1
16485: ST_TO_ADDR
16486: GO 16496
// blue = false ;
16488: LD_ADDR_VAR 0 3
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// if Teams [ 3 ] then
16496: LD_EXP 22
16500: PUSH
16501: LD_INT 3
16503: ARRAY
16504: IFFALSE 16516
// yel = true else
16506: LD_ADDR_VAR 0 4
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
16514: GO 16524
// yel = false ;
16516: LD_ADDR_VAR 0 4
16520: PUSH
16521: LD_INT 0
16523: ST_TO_ADDR
// if Teams [ 4 ] then
16524: LD_EXP 22
16528: PUSH
16529: LD_INT 4
16531: ARRAY
16532: IFFALSE 16544
// green = true else
16534: LD_ADDR_VAR 0 5
16538: PUSH
16539: LD_INT 1
16541: ST_TO_ADDR
16542: GO 16552
// green = false ;
16544: LD_ADDR_VAR 0 5
16548: PUSH
16549: LD_INT 0
16551: ST_TO_ADDR
// if def_public_score then
16552: LD_EXP 6
16556: IFFALSE 16568
// p = true else
16558: LD_ADDR_VAR 0 12
16562: PUSH
16563: LD_INT 1
16565: ST_TO_ADDR
16566: GO 16576
// p = false ;
16568: LD_ADDR_VAR 0 12
16572: PUSH
16573: LD_INT 0
16575: ST_TO_ADDR
// if team_game then
16576: LD_EXP 25
16580: IFFALSE 16661
// begin you = [ 3 , 1 , 2 , 7 ] [ player_team ] ;
16582: LD_ADDR_VAR 0 13
16586: PUSH
16587: LD_INT 3
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: LD_INT 2
16595: PUSH
16596: LD_INT 7
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: LD_EXP 28
16609: ARRAY
16610: ST_TO_ADDR
// s = { & blue & , & yel & , & red & ,0,0,0, & green & ,0} ;
16611: LD_ADDR_VAR 0 10
16615: PUSH
16616: LD_STRING {
16618: PUSH
16619: LD_VAR 0 3
16623: STR
16624: PUSH
16625: LD_STRING ,
16627: STR
16628: PUSH
16629: LD_VAR 0 4
16633: STR
16634: PUSH
16635: LD_STRING ,
16637: STR
16638: PUSH
16639: LD_VAR 0 2
16643: STR
16644: PUSH
16645: LD_STRING ,0,0,0,
16647: STR
16648: PUSH
16649: LD_VAR 0 5
16653: STR
16654: PUSH
16655: LD_STRING ,0}
16657: STR
16658: ST_TO_ADDR
// end else
16659: GO 16761
// begin you = your_side ;
16661: LD_ADDR_VAR 0 13
16665: PUSH
16666: LD_OWVAR 2
16670: ST_TO_ADDR
// s = { ;
16671: LD_ADDR_VAR 0 10
16675: PUSH
16676: LD_STRING {
16678: ST_TO_ADDR
// for i = 1 to side_positions + 0 do
16679: LD_ADDR_VAR 0 1
16683: PUSH
16684: DOUBLE
16685: LD_INT 1
16687: DEC
16688: ST_TO_ADDR
16689: LD_EXP 23
16693: PUSH
16694: LD_INT 0
16696: PLUS
16697: PUSH
16698: FOR_TO
16699: IFFALSE 16745
// if side_positions [ i ] then
16701: LD_EXP 23
16705: PUSH
16706: LD_VAR 0 1
16710: ARRAY
16711: IFFALSE 16729
// s = s & 1, else
16713: LD_ADDR_VAR 0 10
16717: PUSH
16718: LD_VAR 0 10
16722: PUSH
16723: LD_STRING 1,
16725: STR
16726: ST_TO_ADDR
16727: GO 16743
// s = s & 0, ;
16729: LD_ADDR_VAR 0 10
16733: PUSH
16734: LD_VAR 0 10
16738: PUSH
16739: LD_STRING 0,
16741: STR
16742: ST_TO_ADDR
16743: GO 16698
16745: POP
16746: POP
// s = s & } ;
16747: LD_ADDR_VAR 0 10
16751: PUSH
16752: LD_VAR 0 10
16756: PUSH
16757: LD_STRING }
16759: STR
16760: ST_TO_ADDR
// end ; ToLua ( initScore( & s & , & p & , & you &  ); ) ;
16761: LD_STRING initScore(
16763: PUSH
16764: LD_VAR 0 10
16768: STR
16769: PUSH
16770: LD_STRING ,
16772: STR
16773: PUSH
16774: LD_VAR 0 12
16778: STR
16779: PUSH
16780: LD_STRING ,
16782: STR
16783: PUSH
16784: LD_VAR 0 13
16788: STR
16789: PUSH
16790: LD_STRING  );
16792: STR
16793: PPUSH
16794: CALL_OW 559
// if game_type = 3 then
16798: LD_EXP 46
16802: PUSH
16803: LD_INT 3
16805: EQUAL
16806: IFFALSE 16825
// ToLua ( AddScorePoints(2,2, & final_count &  ); ) ;
16808: LD_STRING AddScorePoints(2,2,
16810: PUSH
16811: LD_EXP 20
16815: STR
16816: PUSH
16817: LD_STRING  );
16819: STR
16820: PPUSH
16821: CALL_OW 559
// end ; end ;
16825: PPOPN 13
16827: END
// export function SetSharedMultiScore ( side , points , typ ) ; var p ; begin
16828: LD_INT 0
16830: PPUSH
16831: PPUSH
// case typ of 1 :
16832: LD_VAR 0 3
16836: PUSH
16837: LD_INT 1
16839: DOUBLE
16840: EQUAL
16841: IFTRUE 16845
16843: GO 16873
16845: POP
// sharedPoints1 = Replace ( sharedPoints1 , side , points ) ; 2 :
16846: LD_ADDR_LOC 25
16850: PUSH
16851: LD_LOC 25
16855: PPUSH
16856: LD_VAR 0 1
16860: PPUSH
16861: LD_VAR 0 2
16865: PPUSH
16866: CALL_OW 1
16870: ST_TO_ADDR
16871: GO 16946
16873: LD_INT 2
16875: DOUBLE
16876: EQUAL
16877: IFTRUE 16881
16879: GO 16909
16881: POP
// sharedPoints2 = Replace ( sharedPoints2 , side , points ) ; 3 :
16882: LD_ADDR_LOC 26
16886: PUSH
16887: LD_LOC 26
16891: PPUSH
16892: LD_VAR 0 1
16896: PPUSH
16897: LD_VAR 0 2
16901: PPUSH
16902: CALL_OW 1
16906: ST_TO_ADDR
16907: GO 16946
16909: LD_INT 3
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 16945
16917: POP
// sharedPoints3 = Replace ( sharedPoints3 , side , points ) ; end ;
16918: LD_ADDR_LOC 27
16922: PUSH
16923: LD_LOC 27
16927: PPUSH
16928: LD_VAR 0 1
16932: PPUSH
16933: LD_VAR 0 2
16937: PPUSH
16938: CALL_OW 1
16942: ST_TO_ADDR
16943: GO 16946
16945: POP
// p = sharedPoints1 [ side ] + sharedPoints2 [ side ] + sharedPoints3 [ side ] ;
16946: LD_ADDR_VAR 0 5
16950: PUSH
16951: LD_LOC 25
16955: PUSH
16956: LD_VAR 0 1
16960: ARRAY
16961: PUSH
16962: LD_LOC 26
16966: PUSH
16967: LD_VAR 0 1
16971: ARRAY
16972: PLUS
16973: PUSH
16974: LD_LOC 27
16978: PUSH
16979: LD_VAR 0 1
16983: ARRAY
16984: PLUS
16985: ST_TO_ADDR
// SetMultiScore ( side , p ) ;
16986: LD_VAR 0 1
16990: PPUSH
16991: LD_VAR 0 5
16995: PPUSH
16996: CALL_OW 506
// end ; end_of_file
17000: LD_VAR 0 4
17004: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
17005: LD_INT 0
17007: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
17008: LD_VAR 0 1
17012: PPUSH
17013: CALL_OW 255
17017: PUSH
17018: LD_VAR 0 4
17022: EQUAL
17023: IFFALSE 17042
// begin SetAchievement ( ACH_RAD ) ;
17025: LD_STRING ACH_RAD
17027: PPUSH
17028: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
17032: LD_STRING ACH_NL
17034: PPUSH
17035: LD_INT 1
17037: PPUSH
17038: CALL_OW 564
// end end ;
17042: LD_VAR 0 5
17046: RET
// export function SA_Win ( side ) ; begin
17047: LD_INT 0
17049: PPUSH
// case side of 1 :
17050: LD_VAR 0 1
17054: PUSH
17055: LD_INT 1
17057: DOUBLE
17058: EQUAL
17059: IFTRUE 17063
17061: GO 17076
17063: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
17064: LD_STRING ACH_AH
17066: PPUSH
17067: LD_INT 1
17069: PPUSH
17070: CALL_OW 564
17074: GO 17239
17076: LD_INT 2
17078: DOUBLE
17079: EQUAL
17080: IFTRUE 17084
17082: GO 17097
17084: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
17085: LD_STRING ACH_E
17087: PPUSH
17088: LD_INT 1
17090: PPUSH
17091: CALL_OW 564
17095: GO 17239
17097: LD_INT 3
17099: DOUBLE
17100: EQUAL
17101: IFTRUE 17105
17103: GO 17118
17105: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
17106: LD_STRING ACH_OOL
17108: PPUSH
17109: LD_INT 1
17111: PPUSH
17112: CALL_OW 564
17116: GO 17239
17118: LD_INT 1
17120: PUSH
17121: LD_INT 2
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: DOUBLE
17128: EQUAL
17129: IFTRUE 17133
17131: GO 17158
17133: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17134: LD_STRING ACH_AH
17136: PPUSH
17137: LD_REAL  5.00000000000000E-0001
17140: PPUSH
17141: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17145: LD_STRING ACH_E
17147: PPUSH
17148: LD_REAL  5.00000000000000E-0001
17151: PPUSH
17152: CALL_OW 564
// end ; [ 2 , 3 ] :
17156: GO 17239
17158: LD_INT 2
17160: PUSH
17161: LD_INT 3
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: DOUBLE
17168: EQUAL
17169: IFTRUE 17173
17171: GO 17198
17173: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
17174: LD_STRING ACH_OOL
17176: PPUSH
17177: LD_REAL  5.00000000000000E-0001
17180: PPUSH
17181: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
17185: LD_STRING ACH_E
17187: PPUSH
17188: LD_REAL  5.00000000000000E-0001
17191: PPUSH
17192: CALL_OW 564
// end ; [ 3 , 1 ] :
17196: GO 17239
17198: LD_INT 3
17200: PUSH
17201: LD_INT 1
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: DOUBLE
17208: EQUAL
17209: IFTRUE 17213
17211: GO 17238
17213: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
17214: LD_STRING ACH_AH
17216: PPUSH
17217: LD_REAL  5.00000000000000E-0001
17220: PPUSH
17221: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
17225: LD_STRING ACH_OOL
17227: PPUSH
17228: LD_REAL  5.00000000000000E-0001
17231: PPUSH
17232: CALL_OW 564
// end ; end ;
17236: GO 17239
17238: POP
// end ; end_of_file
17239: LD_VAR 0 2
17243: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
17244: LD_INT 0
17246: PPUSH
17247: PPUSH
// enable ( 98 ) ;
17248: LD_INT 98
17250: ENABLE_MARKED
// GameEnded = false ;
17251: LD_ADDR_LOC 30
17255: PUSH
17256: LD_INT 0
17258: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
17259: LD_ADDR_LOC 29
17263: PUSH
17264: LD_INT 0
17266: PUSH
17267: LD_INT 0
17269: PUSH
17270: LD_INT 0
17272: PUSH
17273: LD_INT 0
17275: PUSH
17276: LD_INT 0
17278: PUSH
17279: LD_INT 0
17281: PUSH
17282: LD_INT 0
17284: PUSH
17285: LD_INT 0
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: ST_TO_ADDR
// unfoged = false ;
17298: LD_ADDR_LOC 31
17302: PUSH
17303: LD_INT 0
17305: ST_TO_ADDR
// defeated_specs := [ ] ;
17306: LD_ADDR_LOC 32
17310: PUSH
17311: EMPTY
17312: ST_TO_ADDR
// for i = 1 to side_positions do
17313: LD_ADDR_VAR 0 2
17317: PUSH
17318: DOUBLE
17319: LD_INT 1
17321: DEC
17322: ST_TO_ADDR
17323: LD_EXP 23
17327: PUSH
17328: FOR_TO
17329: IFFALSE 17369
// if not side_positions [ i ] then
17331: LD_EXP 23
17335: PUSH
17336: LD_VAR 0 2
17340: ARRAY
17341: NOT
17342: IFFALSE 17367
// defeated = replace ( defeated , i , true ) ;
17344: LD_ADDR_LOC 29
17348: PUSH
17349: LD_LOC 29
17353: PPUSH
17354: LD_VAR 0 2
17358: PPUSH
17359: LD_INT 1
17361: PPUSH
17362: CALL_OW 1
17366: ST_TO_ADDR
17367: GO 17328
17369: POP
17370: POP
// end ;
17371: LD_VAR 0 1
17375: RET
// function CanWinLoose ; begin
17376: LD_INT 0
17378: PPUSH
// Result := true ;
17379: LD_ADDR_VAR 0 1
17383: PUSH
17384: LD_INT 1
17386: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
17387: CALL_OW 518
17391: PUSH
17392: CALL_OW 519
17396: PUSH
17397: LD_INT 0
17399: GREATER
17400: AND
17401: IFFALSE 17411
// Result := false ;
17403: LD_ADDR_VAR 0 1
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
17411: CALL_OW 531
17415: PUSH
17416: CALL_OW 519
17420: PUSH
17421: LD_INT 1
17423: GREATER
17424: AND
17425: IFFALSE 17435
// Result := false ;
17427: LD_ADDR_VAR 0 1
17431: PUSH
17432: LD_INT 0
17434: ST_TO_ADDR
// end ;
17435: LD_VAR 0 1
17439: RET
// export function HasPower ( i ) ; var k , h ; begin
17440: LD_INT 0
17442: PPUSH
17443: PPUSH
17444: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
17445: LD_VAR 0 1
17449: PPUSH
17450: CALL_OW 108
17454: NOT
17455: PUSH
17456: LD_EXP 26
17460: PUSH
17461: LD_VAR 0 1
17465: ARRAY
17466: NOT
17467: AND
17468: PUSH
17469: LD_OWVAR 4
17473: AND
17474: IFFALSE 17486
// begin result = false ;
17476: LD_ADDR_VAR 0 2
17480: PUSH
17481: LD_INT 0
17483: ST_TO_ADDR
// end else
17484: GO 17781
// case def_win_rules of 0 :
17486: LD_EXP 19
17490: PUSH
17491: LD_INT 0
17493: DOUBLE
17494: EQUAL
17495: IFTRUE 17499
17497: GO 17662
17499: POP
// if def_people_respawning then
17500: LD_EXP 58
17504: IFFALSE 17595
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
17506: LD_ADDR_VAR 0 2
17510: PUSH
17511: LD_INT 22
17513: PUSH
17514: LD_VAR 0 1
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 2
17525: PUSH
17526: LD_INT 21
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 33
17538: PUSH
17539: LD_INT 3
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 33
17548: PUSH
17549: LD_INT 5
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 30
17558: PUSH
17559: LD_INT 0
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 30
17568: PUSH
17569: LD_INT 1
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PPUSH
17588: CALL_OW 69
17592: ST_TO_ADDR
17593: GO 17660
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
17595: LD_ADDR_VAR 0 2
17599: PUSH
17600: LD_INT 22
17602: PUSH
17603: LD_VAR 0 1
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 2
17614: PUSH
17615: LD_INT 21
17617: PUSH
17618: LD_INT 1
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 33
17627: PUSH
17628: LD_INT 3
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 33
17637: PUSH
17638: LD_INT 5
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PPUSH
17655: CALL_OW 69
17659: ST_TO_ADDR
17660: GO 17781
17662: LD_INT 1
17664: DOUBLE
17665: EQUAL
17666: IFTRUE 17670
17668: GO 17709
17670: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
17671: LD_ADDR_VAR 0 2
17675: PUSH
17676: LD_INT 22
17678: PUSH
17679: LD_VAR 0 1
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 21
17690: PUSH
17691: LD_INT 1
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PPUSH
17702: CALL_OW 69
17706: ST_TO_ADDR
17707: GO 17781
17709: LD_INT 2
17711: DOUBLE
17712: EQUAL
17713: IFTRUE 17717
17715: GO 17780
17717: POP
// begin h = false ;
17718: LD_ADDR_VAR 0 4
17722: PUSH
17723: LD_INT 0
17725: ST_TO_ADDR
// for k in heroes [ i ] do
17726: LD_ADDR_VAR 0 3
17730: PUSH
17731: LD_EXP 34
17735: PUSH
17736: LD_VAR 0 1
17740: ARRAY
17741: PUSH
17742: FOR_IN
17743: IFFALSE 17766
// if IsLive ( k ) then
17745: LD_VAR 0 3
17749: PPUSH
17750: CALL_OW 300
17754: IFFALSE 17764
// h = true ;
17756: LD_ADDR_VAR 0 4
17760: PUSH
17761: LD_INT 1
17763: ST_TO_ADDR
17764: GO 17742
17766: POP
17767: POP
// Result := h ;
17768: LD_ADDR_VAR 0 2
17772: PUSH
17773: LD_VAR 0 4
17777: ST_TO_ADDR
// end ; end ;
17778: GO 17781
17780: POP
// end ;
17781: LD_VAR 0 2
17785: RET
// function AlliedSides ( i , j ) ; begin
17786: LD_INT 0
17788: PPUSH
// Result := false ;
17789: LD_ADDR_VAR 0 3
17793: PUSH
17794: LD_INT 0
17796: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
17797: LD_VAR 0 1
17801: PPUSH
17802: LD_VAR 0 2
17806: PPUSH
17807: CALL_OW 81
17811: PUSH
17812: LD_INT 1
17814: EQUAL
17815: PUSH
17816: LD_VAR 0 2
17820: PPUSH
17821: LD_VAR 0 1
17825: PPUSH
17826: CALL_OW 81
17830: PUSH
17831: LD_INT 1
17833: EQUAL
17834: AND
17835: PUSH
17836: LD_VAR 0 1
17840: PPUSH
17841: CALL_OW 83
17845: AND
17846: PUSH
17847: LD_VAR 0 2
17851: PPUSH
17852: CALL_OW 83
17856: AND
17857: IFFALSE 17867
// Result := true ;
17859: LD_ADDR_VAR 0 3
17863: PUSH
17864: LD_INT 1
17866: ST_TO_ADDR
// end ;
17867: LD_VAR 0 3
17871: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
17872: CALL 17376 0 0
17876: PUSH
17877: LD_LOC 30
17881: NOT
17882: AND
17883: IFFALSE 17899
17885: GO 17887
17887: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
17888: LD_ADDR_EXP 64
17892: PUSH
17893: LD_STRING #Player-Ended
17895: PUSH
17896: EMPTY
17897: LIST
17898: ST_TO_ADDR
17899: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
17900: CALL 17376 0 0
17904: PUSH
17905: LD_LOC 30
17909: AND
17910: IFFALSE 17919
17912: GO 17914
17914: DISABLE
// YouLostInMultiplayer ;
17915: CALL_OW 107
17919: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
17920: CALL 17376 0 0
17924: NOT
17925: PUSH
17926: CALL_OW 531
17930: NOT
17931: AND
17932: IFFALSE 17948
17934: GO 17936
17936: DISABLE
// WaitServerStrings = [ #server-wait ] ;
17937: LD_ADDR_EXP 64
17941: PUSH
17942: LD_STRING #server-wait
17944: PUSH
17945: EMPTY
17946: LIST
17947: ST_TO_ADDR
17948: END
// every 100 trigger IAmSpec do
17949: CALL_OW 531
17953: IFFALSE 17969
17955: GO 17957
17957: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
17958: LD_ADDR_EXP 64
17962: PUSH
17963: LD_STRING #Player-IAmSpec
17965: PUSH
17966: EMPTY
17967: LIST
17968: ST_TO_ADDR
17969: END
// every 100 trigger GameEnded and IAmSpec do
17970: LD_LOC 30
17974: PUSH
17975: CALL_OW 531
17979: AND
17980: IFFALSE 17989
17982: GO 17984
17984: DISABLE
// YouLostInMultiplayer ;
17985: CALL_OW 107
17989: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
17990: CALL 17376 0 0
17994: PUSH
17995: LD_LOC 30
17999: NOT
18000: AND
18001: IFFALSE 18017
18003: GO 18005
18005: DISABLE
// WaitServerStrings = [ $player-win ] ;
18006: LD_ADDR_EXP 64
18010: PUSH
18011: LD_STRING $player-win
18013: PUSH
18014: EMPTY
18015: LIST
18016: ST_TO_ADDR
18017: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
18018: CALL 17376 0 0
18022: PUSH
18023: LD_LOC 30
18027: AND
18028: IFFALSE 18052
18030: GO 18032
18032: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
18033: LD_EXP 24
18037: PUSH
18038: LD_OWVAR 7
18042: ARRAY
18043: PPUSH
18044: CALL 17047 0 1
// YouWinInMultiplayer ;
18048: CALL_OW 106
// end ;
18052: END
// every 100 trigger isEditor marked 401 do
18053: LD_OWVAR 84
18057: IFFALSE 18073
18059: GO 18061
18061: DISABLE
// Debug_Strings = [ You won ] ;
18062: LD_ADDR_OWVAR 48
18066: PUSH
18067: LD_STRING You won
18069: PUSH
18070: EMPTY
18071: LIST
18072: ST_TO_ADDR
18073: END
// every 100 trigger isEditor marked 400 do
18074: LD_OWVAR 84
18078: IFFALSE 18094
18080: GO 18082
18082: DISABLE
// Debug_Strings = [ You loss ] ;
18083: LD_ADDR_OWVAR 48
18087: PUSH
18088: LD_STRING You loss
18090: PUSH
18091: EMPTY
18092: LIST
18093: ST_TO_ADDR
18094: END
// every 100 marked 98 do var i , un ;
18095: GO 18097
18097: DISABLE
18098: LD_INT 0
18100: PPUSH
18101: PPUSH
// begin for i = 1 to side_positions do
18102: LD_ADDR_VAR 0 1
18106: PUSH
18107: DOUBLE
18108: LD_INT 1
18110: DEC
18111: ST_TO_ADDR
18112: LD_EXP 23
18116: PUSH
18117: FOR_TO
18118: IFFALSE 18205
// begin if side_positions [ i ] then
18120: LD_EXP 23
18124: PUSH
18125: LD_VAR 0 1
18129: ARRAY
18130: IFFALSE 18203
// if not HasPower ( i ) and not defeated [ i ] then
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL 17440 0 1
18141: NOT
18142: PUSH
18143: LD_LOC 29
18147: PUSH
18148: LD_VAR 0 1
18152: ARRAY
18153: NOT
18154: AND
18155: IFFALSE 18203
// begin defeated = replace ( defeated , i , true ) ;
18157: LD_ADDR_LOC 29
18161: PUSH
18162: LD_LOC 29
18166: PPUSH
18167: LD_VAR 0 1
18171: PPUSH
18172: LD_INT 1
18174: PPUSH
18175: CALL_OW 1
18179: ST_TO_ADDR
// if i = mp_player_side then
18180: LD_VAR 0 1
18184: PUSH
18185: LD_OWVAR 7
18189: EQUAL
18190: IFFALSE 18203
// begin Multiplayer_Loose_Message ;
18192: CALL_OW 521
// SetPlayerSpectator ( ) ;
18196: CALL_OW 572
// enable ( 400 ) ;
18200: LD_INT 400
18202: ENABLE_MARKED
// end ; end ; end ;
18203: GO 18117
18205: POP
18206: POP
// DidGameEnd ;
18207: CALL 18222 0 0
// if not GameEnded then
18211: LD_LOC 30
18215: NOT
18216: IFFALSE 18219
// enable ;
18218: ENABLE
// end ;
18219: PPOPN 2
18221: END
// function DidGameEnd ; var i , k , enemy ; begin
18222: LD_INT 0
18224: PPUSH
18225: PPUSH
18226: PPUSH
18227: PPUSH
// enemy = [ ] ;
18228: LD_ADDR_VAR 0 4
18232: PUSH
18233: EMPTY
18234: ST_TO_ADDR
// for i = 1 to side_positions do
18235: LD_ADDR_VAR 0 2
18239: PUSH
18240: DOUBLE
18241: LD_INT 1
18243: DEC
18244: ST_TO_ADDR
18245: LD_EXP 23
18249: PUSH
18250: FOR_TO
18251: IFFALSE 18345
// if not defeated [ i ] then
18253: LD_LOC 29
18257: PUSH
18258: LD_VAR 0 2
18262: ARRAY
18263: NOT
18264: IFFALSE 18343
// for k = 1 to side_positions do
18266: LD_ADDR_VAR 0 3
18270: PUSH
18271: DOUBLE
18272: LD_INT 1
18274: DEC
18275: ST_TO_ADDR
18276: LD_EXP 23
18280: PUSH
18281: FOR_TO
18282: IFFALSE 18341
// if not defeated [ k ] then
18284: LD_LOC 29
18288: PUSH
18289: LD_VAR 0 3
18293: ARRAY
18294: NOT
18295: IFFALSE 18339
// if not AlliedSides ( i , k ) then
18297: LD_VAR 0 2
18301: PPUSH
18302: LD_VAR 0 3
18306: PPUSH
18307: CALL 17786 0 2
18311: NOT
18312: IFFALSE 18339
// enemy = enemy ^ [ i , k ] ;
18314: LD_ADDR_VAR 0 4
18318: PUSH
18319: LD_VAR 0 4
18323: PUSH
18324: LD_VAR 0 2
18328: PUSH
18329: LD_VAR 0 3
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: ADD
18338: ST_TO_ADDR
18339: GO 18281
18341: POP
18342: POP
18343: GO 18250
18345: POP
18346: POP
// if not enemy then
18347: LD_VAR 0 4
18351: NOT
18352: IFFALSE 18378
// begin GameEnded = true ;
18354: LD_ADDR_LOC 30
18358: PUSH
18359: LD_INT 1
18361: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
18362: LD_LOC 29
18366: PUSH
18367: LD_OWVAR 7
18371: ARRAY
18372: NOT
18373: IFFALSE 18378
// enable ( 401 ) ;
18375: LD_INT 401
18377: ENABLE_MARKED
// end ; end ;
18378: LD_VAR 0 1
18382: RET
// function unfog ; var k , friends ; begin
18383: LD_INT 0
18385: PPUSH
18386: PPUSH
18387: PPUSH
// for k = 1 to side_positions do
18388: LD_ADDR_VAR 0 2
18392: PUSH
18393: DOUBLE
18394: LD_INT 1
18396: DEC
18397: ST_TO_ADDR
18398: LD_EXP 23
18402: PUSH
18403: FOR_TO
18404: IFFALSE 18460
// if not defeated [ k ] then
18406: LD_LOC 29
18410: PUSH
18411: LD_VAR 0 2
18415: ARRAY
18416: NOT
18417: IFFALSE 18458
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
18419: LD_OWVAR 7
18423: PPUSH
18424: LD_VAR 0 2
18428: PPUSH
18429: CALL_OW 81
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: EMPTY
18438: LIST
18439: IN
18440: IFFALSE 18458
// friends = friends ^ k ;
18442: LD_ADDR_VAR 0 3
18446: PUSH
18447: LD_VAR 0 3
18451: PUSH
18452: LD_VAR 0 2
18456: ADD
18457: ST_TO_ADDR
18458: GO 18403
18460: POP
18461: POP
// if not friends then
18462: LD_VAR 0 3
18466: NOT
18467: IFFALSE 18481
// begin SetPlayerSpectator ( ) ;
18469: CALL_OW 572
// unfoged = true ;
18473: LD_ADDR_LOC 31
18477: PUSH
18478: LD_INT 1
18480: ST_TO_ADDR
// end ; end ;
18481: LD_VAR 0 1
18485: RET
// export function MakeGameEnd ; begin
18486: LD_INT 0
18488: PPUSH
// SetPlayerSpectator ( ) ;
18489: CALL_OW 572
// unfoged = true ;
18493: LD_ADDR_LOC 31
18497: PUSH
18498: LD_INT 1
18500: ST_TO_ADDR
// wait ( 0 0$5 ) ;
18501: LD_INT 175
18503: PPUSH
18504: CALL_OW 67
// GameEnded = true ;
18508: LD_ADDR_LOC 30
18512: PUSH
18513: LD_INT 1
18515: ST_TO_ADDR
// end ;
18516: LD_VAR 0 1
18520: RET
// export function GetGameEnded ; begin
18521: LD_INT 0
18523: PPUSH
// result = GameEnded ;
18524: LD_ADDR_VAR 0 1
18528: PUSH
18529: LD_LOC 30
18533: ST_TO_ADDR
// end ; end_of_file
18534: LD_VAR 0 1
18538: RET
// var win ; export function init_kings_counting ; var i ; begin
18539: LD_INT 0
18541: PPUSH
18542: PPUSH
// mp_with_score := true ;
18543: LD_ADDR_OWVAR 14
18547: PUSH
18548: LD_INT 1
18550: ST_TO_ADDR
// ResetMultiScore ;
18551: CALL_OW 508
// SetAreaMapShow ( king_territory , true ) ;
18555: LD_INT 19
18557: PPUSH
18558: LD_INT 1
18560: PPUSH
18561: CALL_OW 424
// enable ( 2 ) ;
18565: LD_INT 2
18567: ENABLE_MARKED
// end ;
18568: LD_VAR 0 1
18572: RET
// function show_public_points ; var side , vypis , i , red , blue , yel , green , p ; begin
18573: LD_INT 0
18575: PPUSH
18576: PPUSH
18577: PPUSH
18578: PPUSH
18579: PPUSH
18580: PPUSH
18581: PPUSH
18582: PPUSH
18583: PPUSH
// vypis := [ ] ;
18584: LD_ADDR_VAR 0 3
18588: PUSH
18589: EMPTY
18590: ST_TO_ADDR
// red = 0 ;
18591: LD_ADDR_VAR 0 5
18595: PUSH
18596: LD_INT 0
18598: ST_TO_ADDR
// blue = 0 ;
18599: LD_ADDR_VAR 0 6
18603: PUSH
18604: LD_INT 0
18606: ST_TO_ADDR
// yel = 0 ;
18607: LD_ADDR_VAR 0 7
18611: PUSH
18612: LD_INT 0
18614: ST_TO_ADDR
// green = 0 ;
18615: LD_ADDR_VAR 0 8
18619: PUSH
18620: LD_INT 0
18622: ST_TO_ADDR
// if def_public_score or isSGUI then
18623: LD_EXP 6
18627: PUSH
18628: LD_OWVAR 83
18632: OR
18633: IFFALSE 19230
// if not Team_Game then
18635: LD_EXP 25
18639: NOT
18640: IFFALSE 18762
// begin for side = 1 to Side_Positions do
18642: LD_ADDR_VAR 0 2
18646: PUSH
18647: DOUBLE
18648: LD_INT 1
18650: DEC
18651: ST_TO_ADDR
18652: LD_EXP 23
18656: PUSH
18657: FOR_TO
18658: IFFALSE 18758
// if Side_Positions [ side ] then
18660: LD_EXP 23
18664: PUSH
18665: LD_VAR 0 2
18669: ARRAY
18670: IFFALSE 18756
// begin vypis := vypis ^ [ #KingoftheHill-Public , side , side , ( GetTag ( side + 10 ) div 3 ) , final_count ] ;
18672: LD_ADDR_VAR 0 3
18676: PUSH
18677: LD_VAR 0 3
18681: PUSH
18682: LD_STRING #KingoftheHill-Public
18684: PUSH
18685: LD_VAR 0 2
18689: PUSH
18690: LD_VAR 0 2
18694: PUSH
18695: LD_VAR 0 2
18699: PUSH
18700: LD_INT 10
18702: PLUS
18703: PPUSH
18704: CALL_OW 110
18708: PUSH
18709: LD_INT 3
18711: DIV
18712: PUSH
18713: LD_EXP 20
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: ADD
18725: ST_TO_ADDR
// LScore_Update_Points ( 2 , side , ( GetTag ( side + 10 ) div 3 ) ) ;
18726: LD_INT 2
18728: PPUSH
18729: LD_VAR 0 2
18733: PPUSH
18734: LD_VAR 0 2
18738: PUSH
18739: LD_INT 10
18741: PLUS
18742: PPUSH
18743: CALL_OW 110
18747: PUSH
18748: LD_INT 3
18750: DIV
18751: PPUSH
18752: CALL 26132 0 3
// end ;
18756: GO 18657
18758: POP
18759: POP
// end else
18760: GO 19228
// begin if Teams [ 1 ] then
18762: LD_EXP 22
18766: PUSH
18767: LD_INT 1
18769: ARRAY
18770: IFFALSE 18822
// for i in Teams [ 1 ] do
18772: LD_ADDR_VAR 0 4
18776: PUSH
18777: LD_EXP 22
18781: PUSH
18782: LD_INT 1
18784: ARRAY
18785: PUSH
18786: FOR_IN
18787: IFFALSE 18820
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
18789: LD_ADDR_VAR 0 5
18793: PUSH
18794: LD_VAR 0 5
18798: PUSH
18799: LD_VAR 0 4
18803: PUSH
18804: LD_INT 10
18806: PLUS
18807: PPUSH
18808: CALL_OW 110
18812: PUSH
18813: LD_INT 3
18815: DIV
18816: PLUS
18817: ST_TO_ADDR
18818: GO 18786
18820: POP
18821: POP
// if Teams [ 2 ] then
18822: LD_EXP 22
18826: PUSH
18827: LD_INT 2
18829: ARRAY
18830: IFFALSE 18882
// for i in Teams [ 2 ] do
18832: LD_ADDR_VAR 0 4
18836: PUSH
18837: LD_EXP 22
18841: PUSH
18842: LD_INT 2
18844: ARRAY
18845: PUSH
18846: FOR_IN
18847: IFFALSE 18880
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
18849: LD_ADDR_VAR 0 6
18853: PUSH
18854: LD_VAR 0 6
18858: PUSH
18859: LD_VAR 0 4
18863: PUSH
18864: LD_INT 10
18866: PLUS
18867: PPUSH
18868: CALL_OW 110
18872: PUSH
18873: LD_INT 3
18875: DIV
18876: PLUS
18877: ST_TO_ADDR
18878: GO 18846
18880: POP
18881: POP
// if Teams [ 3 ] then
18882: LD_EXP 22
18886: PUSH
18887: LD_INT 3
18889: ARRAY
18890: IFFALSE 18942
// for i in Teams [ 3 ] do
18892: LD_ADDR_VAR 0 4
18896: PUSH
18897: LD_EXP 22
18901: PUSH
18902: LD_INT 3
18904: ARRAY
18905: PUSH
18906: FOR_IN
18907: IFFALSE 18940
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
18909: LD_ADDR_VAR 0 7
18913: PUSH
18914: LD_VAR 0 7
18918: PUSH
18919: LD_VAR 0 4
18923: PUSH
18924: LD_INT 10
18926: PLUS
18927: PPUSH
18928: CALL_OW 110
18932: PUSH
18933: LD_INT 3
18935: DIV
18936: PLUS
18937: ST_TO_ADDR
18938: GO 18906
18940: POP
18941: POP
// if Teams [ 4 ] then
18942: LD_EXP 22
18946: PUSH
18947: LD_INT 4
18949: ARRAY
18950: IFFALSE 19002
// for i in Teams [ 4 ] do
18952: LD_ADDR_VAR 0 4
18956: PUSH
18957: LD_EXP 22
18961: PUSH
18962: LD_INT 4
18964: ARRAY
18965: PUSH
18966: FOR_IN
18967: IFFALSE 19000
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
18969: LD_ADDR_VAR 0 8
18973: PUSH
18974: LD_VAR 0 8
18978: PUSH
18979: LD_VAR 0 4
18983: PUSH
18984: LD_INT 10
18986: PLUS
18987: PPUSH
18988: CALL_OW 110
18992: PUSH
18993: LD_INT 3
18995: DIV
18996: PLUS
18997: ST_TO_ADDR
18998: GO 18966
19000: POP
19001: POP
// if Teams [ 1 ] then
19002: LD_EXP 22
19006: PUSH
19007: LD_INT 1
19009: ARRAY
19010: IFFALSE 19039
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
19012: LD_ADDR_VAR 0 3
19016: PUSH
19017: LD_STRING #KingoftheHill-Public-red
19019: PUSH
19020: LD_INT 3
19022: PUSH
19023: LD_VAR 0 5
19027: PUSH
19028: LD_EXP 20
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: ST_TO_ADDR
// if Teams [ 2 ] then
19039: LD_EXP 22
19043: PUSH
19044: LD_INT 2
19046: ARRAY
19047: IFFALSE 19082
// vypis := vypis ^ [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
19049: LD_ADDR_VAR 0 3
19053: PUSH
19054: LD_VAR 0 3
19058: PUSH
19059: LD_STRING #KingoftheHill-Public-blue
19061: PUSH
19062: LD_INT 1
19064: PUSH
19065: LD_VAR 0 6
19069: PUSH
19070: LD_EXP 20
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: ADD
19081: ST_TO_ADDR
// if Teams [ 3 ] then
19082: LD_EXP 22
19086: PUSH
19087: LD_INT 3
19089: ARRAY
19090: IFFALSE 19125
// vypis := vypis ^ [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
19092: LD_ADDR_VAR 0 3
19096: PUSH
19097: LD_VAR 0 3
19101: PUSH
19102: LD_STRING #KingoftheHill-Public-yell
19104: PUSH
19105: LD_INT 2
19107: PUSH
19108: LD_VAR 0 7
19112: PUSH
19113: LD_EXP 20
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: ADD
19124: ST_TO_ADDR
// if Teams [ 4 ] then
19125: LD_EXP 22
19129: PUSH
19130: LD_INT 4
19132: ARRAY
19133: IFFALSE 19168
// vypis := vypis ^ [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: LD_VAR 0 3
19144: PUSH
19145: LD_STRING #KingoftheHill-Public-green
19147: PUSH
19148: LD_INT 7
19150: PUSH
19151: LD_VAR 0 8
19155: PUSH
19156: LD_EXP 20
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: ADD
19167: ST_TO_ADDR
// LScore_Update_Points ( 2 , 3 , red ) ;
19168: LD_INT 2
19170: PPUSH
19171: LD_INT 3
19173: PPUSH
19174: LD_VAR 0 5
19178: PPUSH
19179: CALL 26132 0 3
// LScore_Update_Points ( 2 , 1 , blue ) ;
19183: LD_INT 2
19185: PPUSH
19186: LD_INT 1
19188: PPUSH
19189: LD_VAR 0 6
19193: PPUSH
19194: CALL 26132 0 3
// LScore_Update_Points ( 2 , 2 , yel ) ;
19198: LD_INT 2
19200: PPUSH
19201: LD_INT 2
19203: PPUSH
19204: LD_VAR 0 7
19208: PPUSH
19209: CALL 26132 0 3
// LScore_Update_Points ( 2 , 7 , green ) ;
19213: LD_INT 2
19215: PPUSH
19216: LD_INT 7
19218: PPUSH
19219: LD_VAR 0 8
19223: PPUSH
19224: CALL 26132 0 3
// end else
19228: GO 19665
// if not Team_Game then
19230: LD_EXP 25
19234: NOT
19235: IFFALSE 19293
// vypis := vypis ^ [ #KingoftheHill-Private , mp_player_side , mp_player_side , ( GetTag ( side + 10 ) div 3 ) , final_count ] else
19237: LD_ADDR_VAR 0 3
19241: PUSH
19242: LD_VAR 0 3
19246: PUSH
19247: LD_STRING #KingoftheHill-Private
19249: PUSH
19250: LD_OWVAR 7
19254: PUSH
19255: LD_OWVAR 7
19259: PUSH
19260: LD_VAR 0 2
19264: PUSH
19265: LD_INT 10
19267: PLUS
19268: PPUSH
19269: CALL_OW 110
19273: PUSH
19274: LD_INT 3
19276: DIV
19277: PUSH
19278: LD_EXP 20
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: ADD
19290: ST_TO_ADDR
19291: GO 19665
// begin for i in Teams [ 1 ] do
19293: LD_ADDR_VAR 0 4
19297: PUSH
19298: LD_EXP 22
19302: PUSH
19303: LD_INT 1
19305: ARRAY
19306: PUSH
19307: FOR_IN
19308: IFFALSE 19341
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19310: LD_ADDR_VAR 0 5
19314: PUSH
19315: LD_VAR 0 5
19319: PUSH
19320: LD_VAR 0 4
19324: PUSH
19325: LD_INT 10
19327: PLUS
19328: PPUSH
19329: CALL_OW 110
19333: PUSH
19334: LD_INT 3
19336: DIV
19337: PLUS
19338: ST_TO_ADDR
19339: GO 19307
19341: POP
19342: POP
// for i in Teams [ 2 ] do
19343: LD_ADDR_VAR 0 4
19347: PUSH
19348: LD_EXP 22
19352: PUSH
19353: LD_INT 2
19355: ARRAY
19356: PUSH
19357: FOR_IN
19358: IFFALSE 19391
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19360: LD_ADDR_VAR 0 6
19364: PUSH
19365: LD_VAR 0 6
19369: PUSH
19370: LD_VAR 0 4
19374: PUSH
19375: LD_INT 10
19377: PLUS
19378: PPUSH
19379: CALL_OW 110
19383: PUSH
19384: LD_INT 3
19386: DIV
19387: PLUS
19388: ST_TO_ADDR
19389: GO 19357
19391: POP
19392: POP
// for i in Teams [ 3 ] do
19393: LD_ADDR_VAR 0 4
19397: PUSH
19398: LD_EXP 22
19402: PUSH
19403: LD_INT 3
19405: ARRAY
19406: PUSH
19407: FOR_IN
19408: IFFALSE 19441
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
19410: LD_ADDR_VAR 0 7
19414: PUSH
19415: LD_VAR 0 7
19419: PUSH
19420: LD_VAR 0 4
19424: PUSH
19425: LD_INT 10
19427: PLUS
19428: PPUSH
19429: CALL_OW 110
19433: PUSH
19434: LD_INT 3
19436: DIV
19437: PLUS
19438: ST_TO_ADDR
19439: GO 19407
19441: POP
19442: POP
// for i in Teams [ 4 ] do
19443: LD_ADDR_VAR 0 4
19447: PUSH
19448: LD_EXP 22
19452: PUSH
19453: LD_INT 4
19455: ARRAY
19456: PUSH
19457: FOR_IN
19458: IFFALSE 19491
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
19460: LD_ADDR_VAR 0 8
19464: PUSH
19465: LD_VAR 0 8
19469: PUSH
19470: LD_VAR 0 4
19474: PUSH
19475: LD_INT 10
19477: PLUS
19478: PPUSH
19479: CALL_OW 110
19483: PUSH
19484: LD_INT 3
19486: DIV
19487: PLUS
19488: ST_TO_ADDR
19489: GO 19457
19491: POP
19492: POP
// if mp_player_side in Teams [ 1 ] then
19493: LD_OWVAR 7
19497: PUSH
19498: LD_EXP 22
19502: PUSH
19503: LD_INT 1
19505: ARRAY
19506: IN
19507: IFFALSE 19536
// vypis := [ #KingoftheHill-Public-red , 3 , Red , final_count ] ;
19509: LD_ADDR_VAR 0 3
19513: PUSH
19514: LD_STRING #KingoftheHill-Public-red
19516: PUSH
19517: LD_INT 3
19519: PUSH
19520: LD_VAR 0 5
19524: PUSH
19525: LD_EXP 20
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: ST_TO_ADDR
// if mp_player_side in Teams [ 2 ] then
19536: LD_OWVAR 7
19540: PUSH
19541: LD_EXP 22
19545: PUSH
19546: LD_INT 2
19548: ARRAY
19549: IN
19550: IFFALSE 19579
// vypis := [ #KingoftheHill-Public-blue , 1 , Blue , final_count ] ;
19552: LD_ADDR_VAR 0 3
19556: PUSH
19557: LD_STRING #KingoftheHill-Public-blue
19559: PUSH
19560: LD_INT 1
19562: PUSH
19563: LD_VAR 0 6
19567: PUSH
19568: LD_EXP 20
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: ST_TO_ADDR
// if mp_player_side in Teams [ 3 ] then
19579: LD_OWVAR 7
19583: PUSH
19584: LD_EXP 22
19588: PUSH
19589: LD_INT 3
19591: ARRAY
19592: IN
19593: IFFALSE 19622
// vypis := [ #KingoftheHill-Public-yell , 2 , yel , final_count ] ;
19595: LD_ADDR_VAR 0 3
19599: PUSH
19600: LD_STRING #KingoftheHill-Public-yell
19602: PUSH
19603: LD_INT 2
19605: PUSH
19606: LD_VAR 0 7
19610: PUSH
19611: LD_EXP 20
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: ST_TO_ADDR
// if mp_player_side in Teams [ 4 ] then
19622: LD_OWVAR 7
19626: PUSH
19627: LD_EXP 22
19631: PUSH
19632: LD_INT 4
19634: ARRAY
19635: IN
19636: IFFALSE 19665
// vypis := [ #KingoftheHill-Public-green , 7 , green , final_count ] ;
19638: LD_ADDR_VAR 0 3
19642: PUSH
19643: LD_STRING #KingoftheHill-Public-green
19645: PUSH
19646: LD_INT 7
19648: PUSH
19649: LD_VAR 0 8
19653: PUSH
19654: LD_EXP 20
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: ST_TO_ADDR
// end ; Display_kings := vypis ;
19665: LD_ADDR_EXP 65
19669: PUSH
19670: LD_VAR 0 3
19674: ST_TO_ADDR
// end ;
19675: LD_VAR 0 1
19679: RET
// function count_king ; var side , list , un , red , blue , yel , green , i ; begin
19680: LD_INT 0
19682: PPUSH
19683: PPUSH
19684: PPUSH
19685: PPUSH
19686: PPUSH
19687: PPUSH
19688: PPUSH
19689: PPUSH
19690: PPUSH
// side := [ ] ;
19691: LD_ADDR_VAR 0 2
19695: PUSH
19696: EMPTY
19697: ST_TO_ADDR
// red = 0 ;
19698: LD_ADDR_VAR 0 5
19702: PUSH
19703: LD_INT 0
19705: ST_TO_ADDR
// blue = 0 ;
19706: LD_ADDR_VAR 0 6
19710: PUSH
19711: LD_INT 0
19713: ST_TO_ADDR
// yel = 0 ;
19714: LD_ADDR_VAR 0 7
19718: PUSH
19719: LD_INT 0
19721: ST_TO_ADDR
// green = 0 ;
19722: LD_ADDR_VAR 0 8
19726: PUSH
19727: LD_INT 0
19729: ST_TO_ADDR
// list := FilterUnitsInArea ( king_territory , [ [ f_type , unit_building ] , [ f_ready ] ] ) ;
19730: LD_ADDR_VAR 0 3
19734: PUSH
19735: LD_INT 19
19737: PPUSH
19738: LD_INT 21
19740: PUSH
19741: LD_INT 3
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 53
19750: PUSH
19751: EMPTY
19752: LIST
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PPUSH
19758: CALL_OW 70
19762: ST_TO_ADDR
// for un in list do
19763: LD_ADDR_VAR 0 4
19767: PUSH
19768: LD_VAR 0 3
19772: PUSH
19773: FOR_IN
19774: IFFALSE 19799
// side := side union GetSide ( un ) ;
19776: LD_ADDR_VAR 0 2
19780: PUSH
19781: LD_VAR 0 2
19785: PUSH
19786: LD_VAR 0 4
19790: PPUSH
19791: CALL_OW 255
19795: UNION
19796: ST_TO_ADDR
19797: GO 19773
19799: POP
19800: POP
// if side <> 1 then
19801: LD_VAR 0 2
19805: PUSH
19806: LD_INT 1
19808: NONEQUAL
19809: IFFALSE 19813
// exit ;
19811: GO 20176
// side := side [ 1 ] ;
19813: LD_ADDR_VAR 0 2
19817: PUSH
19818: LD_VAR 0 2
19822: PUSH
19823: LD_INT 1
19825: ARRAY
19826: ST_TO_ADDR
// SetTag ( side + 10 , GetTag ( side + 10 ) + 1 ) ;
19827: LD_VAR 0 2
19831: PUSH
19832: LD_INT 10
19834: PLUS
19835: PPUSH
19836: LD_VAR 0 2
19840: PUSH
19841: LD_INT 10
19843: PLUS
19844: PPUSH
19845: CALL_OW 110
19849: PUSH
19850: LD_INT 1
19852: PLUS
19853: PPUSH
19854: CALL_OW 109
// SetSharedMultiScore ( side , GetTag ( side + 10 ) div 3 , 2 ) ;
19858: LD_VAR 0 2
19862: PPUSH
19863: LD_VAR 0 2
19867: PUSH
19868: LD_INT 10
19870: PLUS
19871: PPUSH
19872: CALL_OW 110
19876: PUSH
19877: LD_INT 3
19879: DIV
19880: PPUSH
19881: LD_INT 2
19883: PPUSH
19884: CALL 16828 0 3
// if not Team_Game then
19888: LD_EXP 25
19892: NOT
19893: IFFALSE 20176
// if GetTag ( side + 10 ) >= final_count * 3 then
19895: LD_VAR 0 2
19899: PUSH
19900: LD_INT 10
19902: PLUS
19903: PPUSH
19904: CALL_OW 110
19908: PUSH
19909: LD_EXP 20
19913: PUSH
19914: LD_INT 3
19916: MUL
19917: GREATEREQUAL
19918: IFFALSE 19925
// enable ( 3 ) else
19920: LD_INT 3
19922: ENABLE_MARKED
19923: GO 20176
// begin for i in Teams [ 1 ] do
19925: LD_ADDR_VAR 0 9
19929: PUSH
19930: LD_EXP 22
19934: PUSH
19935: LD_INT 1
19937: ARRAY
19938: PUSH
19939: FOR_IN
19940: IFFALSE 19973
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
19942: LD_ADDR_VAR 0 5
19946: PUSH
19947: LD_VAR 0 5
19951: PUSH
19952: LD_VAR 0 9
19956: PUSH
19957: LD_INT 10
19959: PLUS
19960: PPUSH
19961: CALL_OW 110
19965: PUSH
19966: LD_INT 3
19968: DIV
19969: PLUS
19970: ST_TO_ADDR
19971: GO 19939
19973: POP
19974: POP
// for i in Teams [ 2 ] do
19975: LD_ADDR_VAR 0 9
19979: PUSH
19980: LD_EXP 22
19984: PUSH
19985: LD_INT 2
19987: ARRAY
19988: PUSH
19989: FOR_IN
19990: IFFALSE 20023
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
19992: LD_ADDR_VAR 0 6
19996: PUSH
19997: LD_VAR 0 6
20001: PUSH
20002: LD_VAR 0 9
20006: PUSH
20007: LD_INT 10
20009: PLUS
20010: PPUSH
20011: CALL_OW 110
20015: PUSH
20016: LD_INT 3
20018: DIV
20019: PLUS
20020: ST_TO_ADDR
20021: GO 19989
20023: POP
20024: POP
// for i in Teams [ 3 ] do
20025: LD_ADDR_VAR 0 9
20029: PUSH
20030: LD_EXP 22
20034: PUSH
20035: LD_INT 3
20037: ARRAY
20038: PUSH
20039: FOR_IN
20040: IFFALSE 20073
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20042: LD_ADDR_VAR 0 7
20046: PUSH
20047: LD_VAR 0 7
20051: PUSH
20052: LD_VAR 0 9
20056: PUSH
20057: LD_INT 10
20059: PLUS
20060: PPUSH
20061: CALL_OW 110
20065: PUSH
20066: LD_INT 3
20068: DIV
20069: PLUS
20070: ST_TO_ADDR
20071: GO 20039
20073: POP
20074: POP
// for i in Teams [ 4 ] do
20075: LD_ADDR_VAR 0 9
20079: PUSH
20080: LD_EXP 22
20084: PUSH
20085: LD_INT 4
20087: ARRAY
20088: PUSH
20089: FOR_IN
20090: IFFALSE 20123
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20092: LD_ADDR_VAR 0 8
20096: PUSH
20097: LD_VAR 0 8
20101: PUSH
20102: LD_VAR 0 9
20106: PUSH
20107: LD_INT 10
20109: PLUS
20110: PPUSH
20111: CALL_OW 110
20115: PUSH
20116: LD_INT 3
20118: DIV
20119: PLUS
20120: ST_TO_ADDR
20121: GO 20089
20123: POP
20124: POP
// if red >= final_count or blue >= final_count or yel >= final_count or green >= final_count then
20125: LD_VAR 0 5
20129: PUSH
20130: LD_EXP 20
20134: GREATEREQUAL
20135: PUSH
20136: LD_VAR 0 6
20140: PUSH
20141: LD_EXP 20
20145: GREATEREQUAL
20146: OR
20147: PUSH
20148: LD_VAR 0 7
20152: PUSH
20153: LD_EXP 20
20157: GREATEREQUAL
20158: OR
20159: PUSH
20160: LD_VAR 0 8
20164: PUSH
20165: LD_EXP 20
20169: GREATEREQUAL
20170: OR
20171: IFFALSE 20176
// enable ( 3 ) ;
20173: LD_INT 3
20175: ENABLE_MARKED
// end ; end ;
20176: LD_VAR 0 1
20180: RET
// every 0 0$1 marked 2 do
20181: GO 20183
20183: DISABLE
// begin count_king ;
20184: CALL 19680 0 0
// show_public_points ;
20188: CALL 18573 0 0
// enable ;
20192: ENABLE
// end ;
20193: END
// every 0 0$1 marked 3 do var side , red , blue , yel , green , i ;
20194: GO 20196
20196: DISABLE
20197: LD_INT 0
20199: PPUSH
20200: PPUSH
20201: PPUSH
20202: PPUSH
20203: PPUSH
20204: PPUSH
// begin win := [ ] ;
20205: LD_ADDR_LOC 33
20209: PUSH
20210: EMPTY
20211: ST_TO_ADDR
// red = 0 ;
20212: LD_ADDR_VAR 0 2
20216: PUSH
20217: LD_INT 0
20219: ST_TO_ADDR
// blue = 0 ;
20220: LD_ADDR_VAR 0 3
20224: PUSH
20225: LD_INT 0
20227: ST_TO_ADDR
// yel = 0 ;
20228: LD_ADDR_VAR 0 4
20232: PUSH
20233: LD_INT 0
20235: ST_TO_ADDR
// green = 0 ;
20236: LD_ADDR_VAR 0 5
20240: PUSH
20241: LD_INT 0
20243: ST_TO_ADDR
// if not Team_Game then
20244: LD_EXP 25
20248: NOT
20249: IFFALSE 20326
// begin for side = 1 to 8 do
20251: LD_ADDR_VAR 0 1
20255: PUSH
20256: DOUBLE
20257: LD_INT 1
20259: DEC
20260: ST_TO_ADDR
20261: LD_INT 8
20263: PUSH
20264: FOR_TO
20265: IFFALSE 20310
// if GetTag ( side + 10 ) >= final_count * 3 then
20267: LD_VAR 0 1
20271: PUSH
20272: LD_INT 10
20274: PLUS
20275: PPUSH
20276: CALL_OW 110
20280: PUSH
20281: LD_EXP 20
20285: PUSH
20286: LD_INT 3
20288: MUL
20289: GREATEREQUAL
20290: IFFALSE 20308
// win := win ^ side ;
20292: LD_ADDR_LOC 33
20296: PUSH
20297: LD_LOC 33
20301: PUSH
20302: LD_VAR 0 1
20306: ADD
20307: ST_TO_ADDR
20308: GO 20264
20310: POP
20311: POP
// if win then
20312: LD_LOC 33
20316: IFFALSE 20323
// enable ( 4 ) else
20318: LD_INT 4
20320: ENABLE_MARKED
20321: GO 20324
// enable ;
20323: ENABLE
// end else
20324: GO 20642
// begin for i in Teams [ 1 ] do
20326: LD_ADDR_VAR 0 6
20330: PUSH
20331: LD_EXP 22
20335: PUSH
20336: LD_INT 1
20338: ARRAY
20339: PUSH
20340: FOR_IN
20341: IFFALSE 20374
// red = red + ( GetTag ( i + 10 ) div 3 ) ;
20343: LD_ADDR_VAR 0 2
20347: PUSH
20348: LD_VAR 0 2
20352: PUSH
20353: LD_VAR 0 6
20357: PUSH
20358: LD_INT 10
20360: PLUS
20361: PPUSH
20362: CALL_OW 110
20366: PUSH
20367: LD_INT 3
20369: DIV
20370: PLUS
20371: ST_TO_ADDR
20372: GO 20340
20374: POP
20375: POP
// for i in Teams [ 2 ] do
20376: LD_ADDR_VAR 0 6
20380: PUSH
20381: LD_EXP 22
20385: PUSH
20386: LD_INT 2
20388: ARRAY
20389: PUSH
20390: FOR_IN
20391: IFFALSE 20424
// blue = blue + ( GetTag ( i + 10 ) div 3 ) ;
20393: LD_ADDR_VAR 0 3
20397: PUSH
20398: LD_VAR 0 3
20402: PUSH
20403: LD_VAR 0 6
20407: PUSH
20408: LD_INT 10
20410: PLUS
20411: PPUSH
20412: CALL_OW 110
20416: PUSH
20417: LD_INT 3
20419: DIV
20420: PLUS
20421: ST_TO_ADDR
20422: GO 20390
20424: POP
20425: POP
// for i in Teams [ 3 ] do
20426: LD_ADDR_VAR 0 6
20430: PUSH
20431: LD_EXP 22
20435: PUSH
20436: LD_INT 3
20438: ARRAY
20439: PUSH
20440: FOR_IN
20441: IFFALSE 20474
// yel = yel + ( GetTag ( i + 10 ) div 3 ) ;
20443: LD_ADDR_VAR 0 4
20447: PUSH
20448: LD_VAR 0 4
20452: PUSH
20453: LD_VAR 0 6
20457: PUSH
20458: LD_INT 10
20460: PLUS
20461: PPUSH
20462: CALL_OW 110
20466: PUSH
20467: LD_INT 3
20469: DIV
20470: PLUS
20471: ST_TO_ADDR
20472: GO 20440
20474: POP
20475: POP
// for i in Teams [ 4 ] do
20476: LD_ADDR_VAR 0 6
20480: PUSH
20481: LD_EXP 22
20485: PUSH
20486: LD_INT 4
20488: ARRAY
20489: PUSH
20490: FOR_IN
20491: IFFALSE 20524
// green = green + ( GetTag ( i + 10 ) div 3 ) ;
20493: LD_ADDR_VAR 0 5
20497: PUSH
20498: LD_VAR 0 5
20502: PUSH
20503: LD_VAR 0 6
20507: PUSH
20508: LD_INT 10
20510: PLUS
20511: PPUSH
20512: CALL_OW 110
20516: PUSH
20517: LD_INT 3
20519: DIV
20520: PLUS
20521: ST_TO_ADDR
20522: GO 20490
20524: POP
20525: POP
// if red >= final_count then
20526: LD_VAR 0 2
20530: PUSH
20531: LD_EXP 20
20535: GREATEREQUAL
20536: IFFALSE 20552
// win = teams [ 1 ] ;
20538: LD_ADDR_LOC 33
20542: PUSH
20543: LD_EXP 22
20547: PUSH
20548: LD_INT 1
20550: ARRAY
20551: ST_TO_ADDR
// if blue >= final_count then
20552: LD_VAR 0 3
20556: PUSH
20557: LD_EXP 20
20561: GREATEREQUAL
20562: IFFALSE 20578
// win = teams [ 2 ] ;
20564: LD_ADDR_LOC 33
20568: PUSH
20569: LD_EXP 22
20573: PUSH
20574: LD_INT 2
20576: ARRAY
20577: ST_TO_ADDR
// if yel >= final_count then
20578: LD_VAR 0 4
20582: PUSH
20583: LD_EXP 20
20587: GREATEREQUAL
20588: IFFALSE 20604
// win = teams [ 3 ] ;
20590: LD_ADDR_LOC 33
20594: PUSH
20595: LD_EXP 22
20599: PUSH
20600: LD_INT 3
20602: ARRAY
20603: ST_TO_ADDR
// if green >= final_count then
20604: LD_VAR 0 5
20608: PUSH
20609: LD_EXP 20
20613: GREATEREQUAL
20614: IFFALSE 20630
// win = teams [ 4 ] ;
20616: LD_ADDR_LOC 33
20620: PUSH
20621: LD_EXP 22
20625: PUSH
20626: LD_INT 4
20628: ARRAY
20629: ST_TO_ADDR
// if win then
20630: LD_LOC 33
20634: IFFALSE 20641
// enable ( 4 ) else
20636: LD_INT 4
20638: ENABLE_MARKED
20639: GO 20642
// enable ;
20641: ENABLE
// end ; end ;
20642: PPOPN 6
20644: END
// every 0 0$1 marked 4 do
20645: GO 20647
20647: DISABLE
// begin if Player_Side in win then
20648: LD_EXP 27
20652: PUSH
20653: LD_LOC 33
20657: IN
20658: IFFALSE 20674
// begin wait ( 0 0$2 ) ;
20660: LD_INT 70
20662: PPUSH
20663: CALL_OW 67
// enable ( 401 ) ;
20667: LD_INT 401
20669: ENABLE_MARKED
// exit ;
20670: GO 20690
// end else
20672: GO 20690
// begin wait ( 0 0$2 ) ;
20674: LD_INT 70
20676: PPUSH
20677: CALL_OW 67
// Multiplayer_Loose_Message ;
20681: CALL_OW 521
// enable ( 400 ) ;
20685: LD_INT 400
20687: ENABLE_MARKED
// exit ;
20688: GO 20690
// end ; end ; end_of_file
20690: END
// export function SetMpTechs ( ) ; var side , i ; begin
20691: LD_INT 0
20693: PPUSH
20694: PPUSH
20695: PPUSH
// for side = 1 to 8 do
20696: LD_ADDR_VAR 0 2
20700: PUSH
20701: DOUBLE
20702: LD_INT 1
20704: DEC
20705: ST_TO_ADDR
20706: LD_INT 8
20708: PUSH
20709: FOR_TO
20710: IFFALSE 20831
// begin for i = 1 to 72 do
20712: LD_ADDR_VAR 0 3
20716: PUSH
20717: DOUBLE
20718: LD_INT 1
20720: DEC
20721: ST_TO_ADDR
20722: LD_INT 72
20724: PUSH
20725: FOR_TO
20726: IFFALSE 20757
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
20728: LD_VAR 0 3
20732: PPUSH
20733: LD_VAR 0 2
20737: PPUSH
20738: LD_INT 0
20740: PPUSH
20741: LD_VAR 0 3
20745: PPUSH
20746: CALL_OW 565
20750: PPUSH
20751: CALL_OW 322
20755: GO 20725
20757: POP
20758: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
20759: LD_INT 73
20761: PPUSH
20762: LD_VAR 0 2
20766: PPUSH
20767: LD_INT 0
20769: PPUSH
20770: LD_INT 25
20772: PPUSH
20773: CALL_OW 565
20777: PPUSH
20778: CALL_OW 322
// for i = 0 to 40 do
20782: LD_ADDR_VAR 0 3
20786: PUSH
20787: DOUBLE
20788: LD_INT 0
20790: DEC
20791: ST_TO_ADDR
20792: LD_INT 40
20794: PUSH
20795: FOR_TO
20796: IFFALSE 20827
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
20798: LD_VAR 0 3
20802: PPUSH
20803: LD_VAR 0 2
20807: PPUSH
20808: LD_INT 1
20810: PPUSH
20811: LD_VAR 0 3
20815: PPUSH
20816: CALL_OW 565
20820: PPUSH
20821: CALL_OW 324
20825: GO 20795
20827: POP
20828: POP
// end ;
20829: GO 20709
20831: POP
20832: POP
// end ;
20833: LD_VAR 0 1
20837: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
20838: LD_INT 0
20840: PPUSH
20841: PPUSH
20842: PPUSH
// for side = 1 to 8 do
20843: LD_ADDR_VAR 0 3
20847: PUSH
20848: DOUBLE
20849: LD_INT 1
20851: DEC
20852: ST_TO_ADDR
20853: LD_INT 8
20855: PUSH
20856: FOR_TO
20857: IFFALSE 24853
// begin for i = 1 to 73 do
20859: LD_ADDR_VAR 0 4
20863: PUSH
20864: DOUBLE
20865: LD_INT 1
20867: DEC
20868: ST_TO_ADDR
20869: LD_INT 73
20871: PUSH
20872: FOR_TO
20873: IFFALSE 20894
// SetTech ( i , side , state_disabled ) ;
20875: LD_VAR 0 4
20879: PPUSH
20880: LD_VAR 0 3
20884: PPUSH
20885: LD_INT 0
20887: PPUSH
20888: CALL_OW 322
20892: GO 20872
20894: POP
20895: POP
// for i = 0 to 40 do
20896: LD_ADDR_VAR 0 4
20900: PUSH
20901: DOUBLE
20902: LD_INT 0
20904: DEC
20905: ST_TO_ADDR
20906: LD_INT 40
20908: PUSH
20909: FOR_TO
20910: IFFALSE 20931
// SetRestrict ( i , side , false ) ;
20912: LD_VAR 0 4
20916: PPUSH
20917: LD_VAR 0 3
20921: PPUSH
20922: LD_INT 0
20924: PPUSH
20925: CALL_OW 324
20929: GO 20909
20931: POP
20932: POP
// case level of 1 :
20933: LD_VAR 0 1
20937: PUSH
20938: LD_INT 1
20940: DOUBLE
20941: EQUAL
20942: IFTRUE 20946
20944: GO 21099
20946: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
20947: LD_INT 35
20949: PPUSH
20950: LD_VAR 0 3
20954: PPUSH
20955: LD_INT 1
20957: PPUSH
20958: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
20962: LD_INT 45
20964: PPUSH
20965: LD_VAR 0 3
20969: PPUSH
20970: LD_INT 1
20972: PPUSH
20973: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
20977: LD_INT 46
20979: PPUSH
20980: LD_VAR 0 3
20984: PPUSH
20985: LD_INT 1
20987: PPUSH
20988: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
20992: LD_INT 47
20994: PPUSH
20995: LD_VAR 0 3
20999: PPUSH
21000: LD_INT 1
21002: PPUSH
21003: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21007: LD_INT 0
21009: PPUSH
21010: LD_VAR 0 3
21014: PPUSH
21015: LD_INT 1
21017: PPUSH
21018: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21022: LD_INT 2
21024: PPUSH
21025: LD_VAR 0 3
21029: PPUSH
21030: LD_INT 1
21032: PPUSH
21033: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21037: LD_INT 4
21039: PPUSH
21040: LD_VAR 0 3
21044: PPUSH
21045: LD_INT 1
21047: PPUSH
21048: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21052: LD_INT 6
21054: PPUSH
21055: LD_VAR 0 3
21059: PPUSH
21060: LD_INT 1
21062: PPUSH
21063: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21067: LD_INT 29
21069: PPUSH
21070: LD_VAR 0 3
21074: PPUSH
21075: LD_INT 1
21077: PPUSH
21078: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21082: LD_INT 31
21084: PPUSH
21085: LD_VAR 0 3
21089: PPUSH
21090: LD_INT 1
21092: PPUSH
21093: CALL_OW 324
// end ; 2 :
21097: GO 24851
21099: LD_INT 2
21101: DOUBLE
21102: EQUAL
21103: IFTRUE 21107
21105: GO 21305
21107: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21108: LD_INT 35
21110: PPUSH
21111: LD_VAR 0 3
21115: PPUSH
21116: LD_INT 1
21118: PPUSH
21119: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21123: LD_INT 45
21125: PPUSH
21126: LD_VAR 0 3
21130: PPUSH
21131: LD_INT 1
21133: PPUSH
21134: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21138: LD_INT 46
21140: PPUSH
21141: LD_VAR 0 3
21145: PPUSH
21146: LD_INT 1
21148: PPUSH
21149: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21153: LD_INT 47
21155: PPUSH
21156: LD_VAR 0 3
21160: PPUSH
21161: LD_INT 1
21163: PPUSH
21164: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21168: LD_INT 1
21170: PPUSH
21171: LD_VAR 0 3
21175: PPUSH
21176: LD_INT 1
21178: PPUSH
21179: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21183: LD_INT 2
21185: PPUSH
21186: LD_VAR 0 3
21190: PPUSH
21191: LD_INT 1
21193: PPUSH
21194: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21198: LD_INT 11
21200: PPUSH
21201: LD_VAR 0 3
21205: PPUSH
21206: LD_INT 1
21208: PPUSH
21209: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21213: LD_INT 0
21215: PPUSH
21216: LD_VAR 0 3
21220: PPUSH
21221: LD_INT 1
21223: PPUSH
21224: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21228: LD_INT 2
21230: PPUSH
21231: LD_VAR 0 3
21235: PPUSH
21236: LD_INT 1
21238: PPUSH
21239: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21243: LD_INT 4
21245: PPUSH
21246: LD_VAR 0 3
21250: PPUSH
21251: LD_INT 1
21253: PPUSH
21254: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21258: LD_INT 6
21260: PPUSH
21261: LD_VAR 0 3
21265: PPUSH
21266: LD_INT 1
21268: PPUSH
21269: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21273: LD_INT 29
21275: PPUSH
21276: LD_VAR 0 3
21280: PPUSH
21281: LD_INT 1
21283: PPUSH
21284: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21288: LD_INT 31
21290: PPUSH
21291: LD_VAR 0 3
21295: PPUSH
21296: LD_INT 1
21298: PPUSH
21299: CALL_OW 324
// end ; 3 :
21303: GO 24851
21305: LD_INT 3
21307: DOUBLE
21308: EQUAL
21309: IFTRUE 21313
21311: GO 21766
21313: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21314: LD_INT 35
21316: PPUSH
21317: LD_VAR 0 3
21321: PPUSH
21322: LD_INT 1
21324: PPUSH
21325: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21329: LD_INT 45
21331: PPUSH
21332: LD_VAR 0 3
21336: PPUSH
21337: LD_INT 1
21339: PPUSH
21340: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21344: LD_INT 46
21346: PPUSH
21347: LD_VAR 0 3
21351: PPUSH
21352: LD_INT 1
21354: PPUSH
21355: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21359: LD_INT 47
21361: PPUSH
21362: LD_VAR 0 3
21366: PPUSH
21367: LD_INT 1
21369: PPUSH
21370: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21374: LD_INT 1
21376: PPUSH
21377: LD_VAR 0 3
21381: PPUSH
21382: LD_INT 1
21384: PPUSH
21385: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21389: LD_INT 2
21391: PPUSH
21392: LD_VAR 0 3
21396: PPUSH
21397: LD_INT 1
21399: PPUSH
21400: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21404: LD_INT 11
21406: PPUSH
21407: LD_VAR 0 3
21411: PPUSH
21412: LD_INT 1
21414: PPUSH
21415: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21419: LD_INT 48
21421: PPUSH
21422: LD_VAR 0 3
21426: PPUSH
21427: LD_INT 1
21429: PPUSH
21430: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21434: LD_INT 69
21436: PPUSH
21437: LD_VAR 0 3
21441: PPUSH
21442: LD_INT 1
21444: PPUSH
21445: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21449: LD_INT 39
21451: PPUSH
21452: LD_VAR 0 3
21456: PPUSH
21457: LD_INT 1
21459: PPUSH
21460: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
21464: LD_INT 43
21466: PPUSH
21467: LD_VAR 0 3
21471: PPUSH
21472: LD_INT 1
21474: PPUSH
21475: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
21479: LD_INT 51
21481: PPUSH
21482: LD_VAR 0 3
21486: PPUSH
21487: LD_INT 1
21489: PPUSH
21490: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
21494: LD_INT 6
21496: PPUSH
21497: LD_VAR 0 3
21501: PPUSH
21502: LD_INT 1
21504: PPUSH
21505: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
21509: LD_INT 0
21511: PPUSH
21512: LD_VAR 0 3
21516: PPUSH
21517: LD_INT 1
21519: PPUSH
21520: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
21524: LD_INT 2
21526: PPUSH
21527: LD_VAR 0 3
21531: PPUSH
21532: LD_INT 1
21534: PPUSH
21535: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
21539: LD_INT 3
21541: PPUSH
21542: LD_VAR 0 3
21546: PPUSH
21547: LD_INT 1
21549: PPUSH
21550: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
21554: LD_INT 4
21556: PPUSH
21557: LD_VAR 0 3
21561: PPUSH
21562: LD_INT 1
21564: PPUSH
21565: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
21569: LD_INT 6
21571: PPUSH
21572: LD_VAR 0 3
21576: PPUSH
21577: LD_INT 1
21579: PPUSH
21580: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
21584: LD_INT 7
21586: PPUSH
21587: LD_VAR 0 3
21591: PPUSH
21592: LD_INT 1
21594: PPUSH
21595: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
21599: LD_INT 8
21601: PPUSH
21602: LD_VAR 0 3
21606: PPUSH
21607: LD_INT 1
21609: PPUSH
21610: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
21614: LD_INT 10
21616: PPUSH
21617: LD_VAR 0 3
21621: PPUSH
21622: LD_INT 1
21624: PPUSH
21625: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
21629: LD_INT 15
21631: PPUSH
21632: LD_VAR 0 3
21636: PPUSH
21637: LD_INT 1
21639: PPUSH
21640: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
21644: LD_INT 16
21646: PPUSH
21647: LD_VAR 0 3
21651: PPUSH
21652: LD_INT 1
21654: PPUSH
21655: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
21659: LD_INT 17
21661: PPUSH
21662: LD_VAR 0 3
21666: PPUSH
21667: LD_INT 1
21669: PPUSH
21670: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
21674: LD_INT 20
21676: PPUSH
21677: LD_VAR 0 3
21681: PPUSH
21682: LD_INT 1
21684: PPUSH
21685: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
21689: LD_INT 26
21691: PPUSH
21692: LD_VAR 0 3
21696: PPUSH
21697: LD_INT 1
21699: PPUSH
21700: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
21704: LD_INT 27
21706: PPUSH
21707: LD_VAR 0 3
21711: PPUSH
21712: LD_INT 1
21714: PPUSH
21715: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
21719: LD_INT 29
21721: PPUSH
21722: LD_VAR 0 3
21726: PPUSH
21727: LD_INT 1
21729: PPUSH
21730: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
21734: LD_INT 31
21736: PPUSH
21737: LD_VAR 0 3
21741: PPUSH
21742: LD_INT 1
21744: PPUSH
21745: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
21749: LD_INT 32
21751: PPUSH
21752: LD_VAR 0 3
21756: PPUSH
21757: LD_INT 1
21759: PPUSH
21760: CALL_OW 324
// end ; 4 :
21764: GO 24851
21766: LD_INT 4
21768: DOUBLE
21769: EQUAL
21770: IFTRUE 21774
21772: GO 22722
21774: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
21775: LD_INT 35
21777: PPUSH
21778: LD_VAR 0 3
21782: PPUSH
21783: LD_INT 1
21785: PPUSH
21786: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
21790: LD_INT 45
21792: PPUSH
21793: LD_VAR 0 3
21797: PPUSH
21798: LD_INT 1
21800: PPUSH
21801: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
21805: LD_INT 46
21807: PPUSH
21808: LD_VAR 0 3
21812: PPUSH
21813: LD_INT 1
21815: PPUSH
21816: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
21820: LD_INT 47
21822: PPUSH
21823: LD_VAR 0 3
21827: PPUSH
21828: LD_INT 1
21830: PPUSH
21831: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
21835: LD_INT 1
21837: PPUSH
21838: LD_VAR 0 3
21842: PPUSH
21843: LD_INT 1
21845: PPUSH
21846: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
21850: LD_INT 2
21852: PPUSH
21853: LD_VAR 0 3
21857: PPUSH
21858: LD_INT 1
21860: PPUSH
21861: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
21865: LD_INT 11
21867: PPUSH
21868: LD_VAR 0 3
21872: PPUSH
21873: LD_INT 1
21875: PPUSH
21876: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
21880: LD_INT 20
21882: PPUSH
21883: LD_VAR 0 3
21887: PPUSH
21888: LD_INT 1
21890: PPUSH
21891: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
21895: LD_INT 48
21897: PPUSH
21898: LD_VAR 0 3
21902: PPUSH
21903: LD_INT 1
21905: PPUSH
21906: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
21910: LD_INT 49
21912: PPUSH
21913: LD_VAR 0 3
21917: PPUSH
21918: LD_INT 1
21920: PPUSH
21921: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
21925: LD_INT 69
21927: PPUSH
21928: LD_VAR 0 3
21932: PPUSH
21933: LD_INT 1
21935: PPUSH
21936: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
21940: LD_INT 39
21942: PPUSH
21943: LD_VAR 0 3
21947: PPUSH
21948: LD_INT 1
21950: PPUSH
21951: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
21955: LD_INT 34
21957: PPUSH
21958: LD_VAR 0 3
21962: PPUSH
21963: LD_INT 1
21965: PPUSH
21966: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
21970: LD_INT 42
21972: PPUSH
21973: LD_VAR 0 3
21977: PPUSH
21978: LD_INT 1
21980: PPUSH
21981: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
21985: LD_INT 44
21987: PPUSH
21988: LD_VAR 0 3
21992: PPUSH
21993: LD_INT 1
21995: PPUSH
21996: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22000: LD_INT 41
22002: PPUSH
22003: LD_VAR 0 3
22007: PPUSH
22008: LD_INT 1
22010: PPUSH
22011: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22015: LD_INT 43
22017: PPUSH
22018: LD_VAR 0 3
22022: PPUSH
22023: LD_INT 1
22025: PPUSH
22026: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
22030: LD_INT 70
22032: PPUSH
22033: LD_VAR 0 3
22037: PPUSH
22038: LD_INT 1
22040: PPUSH
22041: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
22045: LD_INT 51
22047: PPUSH
22048: LD_VAR 0 3
22052: PPUSH
22053: LD_INT 1
22055: PPUSH
22056: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
22060: LD_INT 52
22062: PPUSH
22063: LD_VAR 0 3
22067: PPUSH
22068: LD_INT 1
22070: PPUSH
22071: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
22075: LD_INT 6
22077: PPUSH
22078: LD_VAR 0 3
22082: PPUSH
22083: LD_INT 1
22085: PPUSH
22086: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
22090: LD_INT 15
22092: PPUSH
22093: LD_VAR 0 3
22097: PPUSH
22098: LD_INT 1
22100: PPUSH
22101: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
22105: LD_INT 7
22107: PPUSH
22108: LD_VAR 0 3
22112: PPUSH
22113: LD_INT 1
22115: PPUSH
22116: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
22120: LD_INT 12
22122: PPUSH
22123: LD_VAR 0 3
22127: PPUSH
22128: LD_INT 1
22130: PPUSH
22131: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
22135: LD_INT 18
22137: PPUSH
22138: LD_VAR 0 3
22142: PPUSH
22143: LD_INT 1
22145: PPUSH
22146: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
22150: LD_INT 60
22152: PPUSH
22153: LD_VAR 0 3
22157: PPUSH
22158: LD_INT 1
22160: PPUSH
22161: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
22165: LD_INT 9
22167: PPUSH
22168: LD_VAR 0 3
22172: PPUSH
22173: LD_INT 1
22175: PPUSH
22176: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
22180: LD_INT 30
22182: PPUSH
22183: LD_VAR 0 3
22187: PPUSH
22188: LD_INT 1
22190: PPUSH
22191: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
22195: LD_INT 37
22197: PPUSH
22198: LD_VAR 0 3
22202: PPUSH
22203: LD_INT 1
22205: PPUSH
22206: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
22210: LD_INT 5
22212: PPUSH
22213: LD_VAR 0 3
22217: PPUSH
22218: LD_INT 1
22220: PPUSH
22221: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
22225: LD_INT 66
22227: PPUSH
22228: LD_VAR 0 3
22232: PPUSH
22233: LD_INT 1
22235: PPUSH
22236: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
22240: LD_INT 21
22242: PPUSH
22243: LD_VAR 0 3
22247: PPUSH
22248: LD_INT 1
22250: PPUSH
22251: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
22255: LD_INT 22
22257: PPUSH
22258: LD_VAR 0 3
22262: PPUSH
22263: LD_INT 1
22265: PPUSH
22266: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
22270: LD_INT 54
22272: PPUSH
22273: LD_VAR 0 3
22277: PPUSH
22278: LD_INT 1
22280: PPUSH
22281: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
22285: LD_INT 0
22287: PPUSH
22288: LD_VAR 0 3
22292: PPUSH
22293: LD_INT 1
22295: PPUSH
22296: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
22300: LD_INT 1
22302: PPUSH
22303: LD_VAR 0 3
22307: PPUSH
22308: LD_INT 1
22310: PPUSH
22311: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
22315: LD_INT 2
22317: PPUSH
22318: LD_VAR 0 3
22322: PPUSH
22323: LD_INT 1
22325: PPUSH
22326: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
22330: LD_INT 3
22332: PPUSH
22333: LD_VAR 0 3
22337: PPUSH
22338: LD_INT 1
22340: PPUSH
22341: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
22345: LD_INT 4
22347: PPUSH
22348: LD_VAR 0 3
22352: PPUSH
22353: LD_INT 1
22355: PPUSH
22356: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
22360: LD_INT 5
22362: PPUSH
22363: LD_VAR 0 3
22367: PPUSH
22368: LD_INT 1
22370: PPUSH
22371: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
22375: LD_INT 6
22377: PPUSH
22378: LD_VAR 0 3
22382: PPUSH
22383: LD_INT 1
22385: PPUSH
22386: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
22390: LD_INT 7
22392: PPUSH
22393: LD_VAR 0 3
22397: PPUSH
22398: LD_INT 1
22400: PPUSH
22401: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
22405: LD_INT 8
22407: PPUSH
22408: LD_VAR 0 3
22412: PPUSH
22413: LD_INT 1
22415: PPUSH
22416: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
22420: LD_INT 10
22422: PPUSH
22423: LD_VAR 0 3
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
22435: LD_INT 11
22437: PPUSH
22438: LD_VAR 0 3
22442: PPUSH
22443: LD_INT 1
22445: PPUSH
22446: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
22450: LD_INT 12
22452: PPUSH
22453: LD_VAR 0 3
22457: PPUSH
22458: LD_INT 1
22460: PPUSH
22461: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
22465: LD_INT 13
22467: PPUSH
22468: LD_VAR 0 3
22472: PPUSH
22473: LD_INT 1
22475: PPUSH
22476: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
22480: LD_INT 14
22482: PPUSH
22483: LD_VAR 0 3
22487: PPUSH
22488: LD_INT 1
22490: PPUSH
22491: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
22495: LD_INT 15
22497: PPUSH
22498: LD_VAR 0 3
22502: PPUSH
22503: LD_INT 1
22505: PPUSH
22506: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
22510: LD_INT 16
22512: PPUSH
22513: LD_VAR 0 3
22517: PPUSH
22518: LD_INT 1
22520: PPUSH
22521: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
22525: LD_INT 17
22527: PPUSH
22528: LD_VAR 0 3
22532: PPUSH
22533: LD_INT 1
22535: PPUSH
22536: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
22540: LD_INT 19
22542: PPUSH
22543: LD_VAR 0 3
22547: PPUSH
22548: LD_INT 1
22550: PPUSH
22551: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
22555: LD_INT 20
22557: PPUSH
22558: LD_VAR 0 3
22562: PPUSH
22563: LD_INT 1
22565: PPUSH
22566: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
22570: LD_INT 21
22572: PPUSH
22573: LD_VAR 0 3
22577: PPUSH
22578: LD_INT 1
22580: PPUSH
22581: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
22585: LD_INT 23
22587: PPUSH
22588: LD_VAR 0 3
22592: PPUSH
22593: LD_INT 1
22595: PPUSH
22596: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
22600: LD_INT 26
22602: PPUSH
22603: LD_VAR 0 3
22607: PPUSH
22608: LD_INT 1
22610: PPUSH
22611: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
22615: LD_INT 27
22617: PPUSH
22618: LD_VAR 0 3
22622: PPUSH
22623: LD_INT 1
22625: PPUSH
22626: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
22630: LD_INT 28
22632: PPUSH
22633: LD_VAR 0 3
22637: PPUSH
22638: LD_INT 1
22640: PPUSH
22641: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
22645: LD_INT 29
22647: PPUSH
22648: LD_VAR 0 3
22652: PPUSH
22653: LD_INT 1
22655: PPUSH
22656: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
22660: LD_INT 30
22662: PPUSH
22663: LD_VAR 0 3
22667: PPUSH
22668: LD_INT 1
22670: PPUSH
22671: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
22675: LD_INT 31
22677: PPUSH
22678: LD_VAR 0 3
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
22690: LD_INT 32
22692: PPUSH
22693: LD_VAR 0 3
22697: PPUSH
22698: LD_INT 1
22700: PPUSH
22701: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
22705: LD_INT 36
22707: PPUSH
22708: LD_VAR 0 3
22712: PPUSH
22713: LD_INT 1
22715: PPUSH
22716: CALL_OW 324
// end ; 5 :
22720: GO 24851
22722: LD_INT 5
22724: DOUBLE
22725: EQUAL
22726: IFTRUE 22730
22728: GO 23843
22730: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
22731: LD_INT 35
22733: PPUSH
22734: LD_VAR 0 3
22738: PPUSH
22739: LD_INT 1
22741: PPUSH
22742: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
22746: LD_INT 45
22748: PPUSH
22749: LD_VAR 0 3
22753: PPUSH
22754: LD_INT 1
22756: PPUSH
22757: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
22761: LD_INT 46
22763: PPUSH
22764: LD_VAR 0 3
22768: PPUSH
22769: LD_INT 1
22771: PPUSH
22772: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
22776: LD_INT 47
22778: PPUSH
22779: LD_VAR 0 3
22783: PPUSH
22784: LD_INT 1
22786: PPUSH
22787: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
22791: LD_INT 1
22793: PPUSH
22794: LD_VAR 0 3
22798: PPUSH
22799: LD_INT 1
22801: PPUSH
22802: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
22806: LD_INT 2
22808: PPUSH
22809: LD_VAR 0 3
22813: PPUSH
22814: LD_INT 1
22816: PPUSH
22817: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
22821: LD_INT 11
22823: PPUSH
22824: LD_VAR 0 3
22828: PPUSH
22829: LD_INT 1
22831: PPUSH
22832: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
22836: LD_INT 20
22838: PPUSH
22839: LD_VAR 0 3
22843: PPUSH
22844: LD_INT 1
22846: PPUSH
22847: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
22851: LD_INT 48
22853: PPUSH
22854: LD_VAR 0 3
22858: PPUSH
22859: LD_INT 1
22861: PPUSH
22862: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
22866: LD_INT 49
22868: PPUSH
22869: LD_VAR 0 3
22873: PPUSH
22874: LD_INT 1
22876: PPUSH
22877: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
22881: LD_INT 69
22883: PPUSH
22884: LD_VAR 0 3
22888: PPUSH
22889: LD_INT 1
22891: PPUSH
22892: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
22896: LD_INT 39
22898: PPUSH
22899: LD_VAR 0 3
22903: PPUSH
22904: LD_INT 1
22906: PPUSH
22907: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
22911: LD_INT 34
22913: PPUSH
22914: LD_VAR 0 3
22918: PPUSH
22919: LD_INT 1
22921: PPUSH
22922: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
22926: LD_INT 42
22928: PPUSH
22929: LD_VAR 0 3
22933: PPUSH
22934: LD_INT 1
22936: PPUSH
22937: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
22941: LD_INT 44
22943: PPUSH
22944: LD_VAR 0 3
22948: PPUSH
22949: LD_INT 1
22951: PPUSH
22952: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
22956: LD_INT 41
22958: PPUSH
22959: LD_VAR 0 3
22963: PPUSH
22964: LD_INT 1
22966: PPUSH
22967: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
22971: LD_INT 40
22973: PPUSH
22974: LD_VAR 0 3
22978: PPUSH
22979: LD_INT 1
22981: PPUSH
22982: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
22986: LD_INT 43
22988: PPUSH
22989: LD_VAR 0 3
22993: PPUSH
22994: LD_INT 1
22996: PPUSH
22997: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
23001: LD_INT 70
23003: PPUSH
23004: LD_VAR 0 3
23008: PPUSH
23009: LD_INT 1
23011: PPUSH
23012: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
23016: LD_INT 51
23018: PPUSH
23019: LD_VAR 0 3
23023: PPUSH
23024: LD_INT 1
23026: PPUSH
23027: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
23031: LD_INT 52
23033: PPUSH
23034: LD_VAR 0 3
23038: PPUSH
23039: LD_INT 1
23041: PPUSH
23042: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
23046: LD_INT 6
23048: PPUSH
23049: LD_VAR 0 3
23053: PPUSH
23054: LD_INT 1
23056: PPUSH
23057: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
23061: LD_INT 15
23063: PPUSH
23064: LD_VAR 0 3
23068: PPUSH
23069: LD_INT 1
23071: PPUSH
23072: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
23076: LD_INT 7
23078: PPUSH
23079: LD_VAR 0 3
23083: PPUSH
23084: LD_INT 1
23086: PPUSH
23087: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
23091: LD_INT 12
23093: PPUSH
23094: LD_VAR 0 3
23098: PPUSH
23099: LD_INT 1
23101: PPUSH
23102: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
23106: LD_INT 17
23108: PPUSH
23109: LD_VAR 0 3
23113: PPUSH
23114: LD_INT 1
23116: PPUSH
23117: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
23121: LD_INT 18
23123: PPUSH
23124: LD_VAR 0 3
23128: PPUSH
23129: LD_INT 1
23131: PPUSH
23132: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
23136: LD_INT 60
23138: PPUSH
23139: LD_VAR 0 3
23143: PPUSH
23144: LD_INT 1
23146: PPUSH
23147: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
23151: LD_INT 32
23153: PPUSH
23154: LD_VAR 0 3
23158: PPUSH
23159: LD_INT 1
23161: PPUSH
23162: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
23166: LD_INT 9
23168: PPUSH
23169: LD_VAR 0 3
23173: PPUSH
23174: LD_INT 1
23176: PPUSH
23177: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
23181: LD_INT 57
23183: PPUSH
23184: LD_VAR 0 3
23188: PPUSH
23189: LD_INT 1
23191: PPUSH
23192: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
23196: LD_INT 30
23198: PPUSH
23199: LD_VAR 0 3
23203: PPUSH
23204: LD_INT 1
23206: PPUSH
23207: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
23211: LD_INT 37
23213: PPUSH
23214: LD_VAR 0 3
23218: PPUSH
23219: LD_INT 1
23221: PPUSH
23222: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
23226: LD_INT 63
23228: PPUSH
23229: LD_VAR 0 3
23233: PPUSH
23234: LD_INT 1
23236: PPUSH
23237: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
23241: LD_INT 3
23243: PPUSH
23244: LD_VAR 0 3
23248: PPUSH
23249: LD_INT 1
23251: PPUSH
23252: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
23256: LD_INT 4
23258: PPUSH
23259: LD_VAR 0 3
23263: PPUSH
23264: LD_INT 1
23266: PPUSH
23267: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
23271: LD_INT 5
23273: PPUSH
23274: LD_VAR 0 3
23278: PPUSH
23279: LD_INT 1
23281: PPUSH
23282: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
23286: LD_INT 66
23288: PPUSH
23289: LD_VAR 0 3
23293: PPUSH
23294: LD_INT 1
23296: PPUSH
23297: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
23301: LD_INT 21
23303: PPUSH
23304: LD_VAR 0 3
23308: PPUSH
23309: LD_INT 1
23311: PPUSH
23312: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
23316: LD_INT 22
23318: PPUSH
23319: LD_VAR 0 3
23323: PPUSH
23324: LD_INT 1
23326: PPUSH
23327: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
23331: LD_INT 19
23333: PPUSH
23334: LD_VAR 0 3
23338: PPUSH
23339: LD_INT 1
23341: PPUSH
23342: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
23346: LD_INT 54
23348: PPUSH
23349: LD_VAR 0 3
23353: PPUSH
23354: LD_INT 1
23356: PPUSH
23357: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
23361: LD_INT 55
23363: PPUSH
23364: LD_VAR 0 3
23368: PPUSH
23369: LD_INT 1
23371: PPUSH
23372: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
23376: LD_INT 0
23378: PPUSH
23379: LD_VAR 0 3
23383: PPUSH
23384: LD_INT 1
23386: PPUSH
23387: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
23391: LD_INT 1
23393: PPUSH
23394: LD_VAR 0 3
23398: PPUSH
23399: LD_INT 1
23401: PPUSH
23402: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
23406: LD_INT 2
23408: PPUSH
23409: LD_VAR 0 3
23413: PPUSH
23414: LD_INT 1
23416: PPUSH
23417: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
23421: LD_INT 3
23423: PPUSH
23424: LD_VAR 0 3
23428: PPUSH
23429: LD_INT 1
23431: PPUSH
23432: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
23436: LD_INT 4
23438: PPUSH
23439: LD_VAR 0 3
23443: PPUSH
23444: LD_INT 1
23446: PPUSH
23447: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
23451: LD_INT 5
23453: PPUSH
23454: LD_VAR 0 3
23458: PPUSH
23459: LD_INT 1
23461: PPUSH
23462: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
23466: LD_INT 6
23468: PPUSH
23469: LD_VAR 0 3
23473: PPUSH
23474: LD_INT 1
23476: PPUSH
23477: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
23481: LD_INT 7
23483: PPUSH
23484: LD_VAR 0 3
23488: PPUSH
23489: LD_INT 1
23491: PPUSH
23492: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
23496: LD_INT 8
23498: PPUSH
23499: LD_VAR 0 3
23503: PPUSH
23504: LD_INT 1
23506: PPUSH
23507: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
23511: LD_INT 10
23513: PPUSH
23514: LD_VAR 0 3
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
23526: LD_INT 11
23528: PPUSH
23529: LD_VAR 0 3
23533: PPUSH
23534: LD_INT 1
23536: PPUSH
23537: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
23541: LD_INT 12
23543: PPUSH
23544: LD_VAR 0 3
23548: PPUSH
23549: LD_INT 1
23551: PPUSH
23552: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
23556: LD_INT 13
23558: PPUSH
23559: LD_VAR 0 3
23563: PPUSH
23564: LD_INT 1
23566: PPUSH
23567: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
23571: LD_INT 14
23573: PPUSH
23574: LD_VAR 0 3
23578: PPUSH
23579: LD_INT 1
23581: PPUSH
23582: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
23586: LD_INT 15
23588: PPUSH
23589: LD_VAR 0 3
23593: PPUSH
23594: LD_INT 1
23596: PPUSH
23597: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
23601: LD_INT 16
23603: PPUSH
23604: LD_VAR 0 3
23608: PPUSH
23609: LD_INT 1
23611: PPUSH
23612: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
23616: LD_INT 17
23618: PPUSH
23619: LD_VAR 0 3
23623: PPUSH
23624: LD_INT 1
23626: PPUSH
23627: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
23631: LD_INT 18
23633: PPUSH
23634: LD_VAR 0 3
23638: PPUSH
23639: LD_INT 1
23641: PPUSH
23642: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
23646: LD_INT 19
23648: PPUSH
23649: LD_VAR 0 3
23653: PPUSH
23654: LD_INT 1
23656: PPUSH
23657: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
23661: LD_INT 20
23663: PPUSH
23664: LD_VAR 0 3
23668: PPUSH
23669: LD_INT 1
23671: PPUSH
23672: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
23676: LD_INT 21
23678: PPUSH
23679: LD_VAR 0 3
23683: PPUSH
23684: LD_INT 1
23686: PPUSH
23687: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
23691: LD_INT 23
23693: PPUSH
23694: LD_VAR 0 3
23698: PPUSH
23699: LD_INT 1
23701: PPUSH
23702: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
23706: LD_INT 26
23708: PPUSH
23709: LD_VAR 0 3
23713: PPUSH
23714: LD_INT 1
23716: PPUSH
23717: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
23721: LD_INT 27
23723: PPUSH
23724: LD_VAR 0 3
23728: PPUSH
23729: LD_INT 1
23731: PPUSH
23732: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
23736: LD_INT 28
23738: PPUSH
23739: LD_VAR 0 3
23743: PPUSH
23744: LD_INT 1
23746: PPUSH
23747: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
23751: LD_INT 29
23753: PPUSH
23754: LD_VAR 0 3
23758: PPUSH
23759: LD_INT 1
23761: PPUSH
23762: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
23766: LD_INT 30
23768: PPUSH
23769: LD_VAR 0 3
23773: PPUSH
23774: LD_INT 1
23776: PPUSH
23777: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
23781: LD_INT 31
23783: PPUSH
23784: LD_VAR 0 3
23788: PPUSH
23789: LD_INT 1
23791: PPUSH
23792: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
23796: LD_INT 32
23798: PPUSH
23799: LD_VAR 0 3
23803: PPUSH
23804: LD_INT 1
23806: PPUSH
23807: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
23811: LD_INT 33
23813: PPUSH
23814: LD_VAR 0 3
23818: PPUSH
23819: LD_INT 1
23821: PPUSH
23822: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
23826: LD_INT 36
23828: PPUSH
23829: LD_VAR 0 3
23833: PPUSH
23834: LD_INT 1
23836: PPUSH
23837: CALL_OW 324
// end ; 6 :
23841: GO 24851
23843: LD_INT 6
23845: DOUBLE
23846: EQUAL
23847: IFTRUE 23851
23849: GO 24776
23851: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
23852: LD_INT 35
23854: PPUSH
23855: LD_VAR 0 3
23859: PPUSH
23860: LD_INT 1
23862: PPUSH
23863: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
23867: LD_INT 45
23869: PPUSH
23870: LD_VAR 0 3
23874: PPUSH
23875: LD_INT 1
23877: PPUSH
23878: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
23882: LD_INT 46
23884: PPUSH
23885: LD_VAR 0 3
23889: PPUSH
23890: LD_INT 1
23892: PPUSH
23893: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
23897: LD_INT 47
23899: PPUSH
23900: LD_VAR 0 3
23904: PPUSH
23905: LD_INT 1
23907: PPUSH
23908: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
23912: LD_INT 1
23914: PPUSH
23915: LD_VAR 0 3
23919: PPUSH
23920: LD_INT 1
23922: PPUSH
23923: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
23927: LD_INT 2
23929: PPUSH
23930: LD_VAR 0 3
23934: PPUSH
23935: LD_INT 1
23937: PPUSH
23938: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
23942: LD_INT 11
23944: PPUSH
23945: LD_VAR 0 3
23949: PPUSH
23950: LD_INT 1
23952: PPUSH
23953: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
23957: LD_INT 20
23959: PPUSH
23960: LD_VAR 0 3
23964: PPUSH
23965: LD_INT 1
23967: PPUSH
23968: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
23972: LD_INT 48
23974: PPUSH
23975: LD_VAR 0 3
23979: PPUSH
23980: LD_INT 1
23982: PPUSH
23983: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
23987: LD_INT 49
23989: PPUSH
23990: LD_VAR 0 3
23994: PPUSH
23995: LD_INT 1
23997: PPUSH
23998: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
24002: LD_INT 50
24004: PPUSH
24005: LD_VAR 0 3
24009: PPUSH
24010: LD_INT 1
24012: PPUSH
24013: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
24017: LD_INT 69
24019: PPUSH
24020: LD_VAR 0 3
24024: PPUSH
24025: LD_INT 1
24027: PPUSH
24028: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
24032: LD_INT 39
24034: PPUSH
24035: LD_VAR 0 3
24039: PPUSH
24040: LD_INT 1
24042: PPUSH
24043: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
24047: LD_INT 34
24049: PPUSH
24050: LD_VAR 0 3
24054: PPUSH
24055: LD_INT 1
24057: PPUSH
24058: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
24062: LD_INT 42
24064: PPUSH
24065: LD_VAR 0 3
24069: PPUSH
24070: LD_INT 1
24072: PPUSH
24073: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
24077: LD_INT 44
24079: PPUSH
24080: LD_VAR 0 3
24084: PPUSH
24085: LD_INT 1
24087: PPUSH
24088: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
24092: LD_INT 41
24094: PPUSH
24095: LD_VAR 0 3
24099: PPUSH
24100: LD_INT 1
24102: PPUSH
24103: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
24107: LD_INT 13
24109: PPUSH
24110: LD_VAR 0 3
24114: PPUSH
24115: LD_INT 1
24117: PPUSH
24118: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
24122: LD_INT 40
24124: PPUSH
24125: LD_VAR 0 3
24129: PPUSH
24130: LD_INT 1
24132: PPUSH
24133: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
24137: LD_INT 43
24139: PPUSH
24140: LD_VAR 0 3
24144: PPUSH
24145: LD_INT 1
24147: PPUSH
24148: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
24152: LD_INT 70
24154: PPUSH
24155: LD_VAR 0 3
24159: PPUSH
24160: LD_INT 1
24162: PPUSH
24163: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
24167: LD_INT 23
24169: PPUSH
24170: LD_VAR 0 3
24174: PPUSH
24175: LD_INT 1
24177: PPUSH
24178: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
24182: LD_INT 51
24184: PPUSH
24185: LD_VAR 0 3
24189: PPUSH
24190: LD_INT 1
24192: PPUSH
24193: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
24197: LD_INT 52
24199: PPUSH
24200: LD_VAR 0 3
24204: PPUSH
24205: LD_INT 1
24207: PPUSH
24208: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
24212: LD_INT 6
24214: PPUSH
24215: LD_VAR 0 3
24219: PPUSH
24220: LD_INT 1
24222: PPUSH
24223: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
24227: LD_INT 15
24229: PPUSH
24230: LD_VAR 0 3
24234: PPUSH
24235: LD_INT 1
24237: PPUSH
24238: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
24242: LD_INT 7
24244: PPUSH
24245: LD_VAR 0 3
24249: PPUSH
24250: LD_INT 1
24252: PPUSH
24253: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
24257: LD_INT 12
24259: PPUSH
24260: LD_VAR 0 3
24264: PPUSH
24265: LD_INT 1
24267: PPUSH
24268: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
24272: LD_INT 10
24274: PPUSH
24275: LD_VAR 0 3
24279: PPUSH
24280: LD_INT 1
24282: PPUSH
24283: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
24287: LD_INT 17
24289: PPUSH
24290: LD_VAR 0 3
24294: PPUSH
24295: LD_INT 1
24297: PPUSH
24298: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
24302: LD_INT 18
24304: PPUSH
24305: LD_VAR 0 3
24309: PPUSH
24310: LD_INT 1
24312: PPUSH
24313: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
24317: LD_INT 60
24319: PPUSH
24320: LD_VAR 0 3
24324: PPUSH
24325: LD_INT 1
24327: PPUSH
24328: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
24332: LD_INT 61
24334: PPUSH
24335: LD_VAR 0 3
24339: PPUSH
24340: LD_INT 1
24342: PPUSH
24343: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
24347: LD_INT 32
24349: PPUSH
24350: LD_VAR 0 3
24354: PPUSH
24355: LD_INT 1
24357: PPUSH
24358: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
24362: LD_INT 27
24364: PPUSH
24365: LD_VAR 0 3
24369: PPUSH
24370: LD_INT 1
24372: PPUSH
24373: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
24377: LD_INT 36
24379: PPUSH
24380: LD_VAR 0 3
24384: PPUSH
24385: LD_INT 1
24387: PPUSH
24388: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
24392: LD_INT 33
24394: PPUSH
24395: LD_VAR 0 3
24399: PPUSH
24400: LD_INT 1
24402: PPUSH
24403: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
24407: LD_INT 9
24409: PPUSH
24410: LD_VAR 0 3
24414: PPUSH
24415: LD_INT 1
24417: PPUSH
24418: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
24422: LD_INT 38
24424: PPUSH
24425: LD_VAR 0 3
24429: PPUSH
24430: LD_INT 1
24432: PPUSH
24433: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
24437: LD_INT 57
24439: PPUSH
24440: LD_VAR 0 3
24444: PPUSH
24445: LD_INT 1
24447: PPUSH
24448: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
24452: LD_INT 58
24454: PPUSH
24455: LD_VAR 0 3
24459: PPUSH
24460: LD_INT 1
24462: PPUSH
24463: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
24467: LD_INT 28
24469: PPUSH
24470: LD_VAR 0 3
24474: PPUSH
24475: LD_INT 1
24477: PPUSH
24478: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
24482: LD_INT 29
24484: PPUSH
24485: LD_VAR 0 3
24489: PPUSH
24490: LD_INT 1
24492: PPUSH
24493: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
24497: LD_INT 30
24499: PPUSH
24500: LD_VAR 0 3
24504: PPUSH
24505: LD_INT 1
24507: PPUSH
24508: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
24512: LD_INT 37
24514: PPUSH
24515: LD_VAR 0 3
24519: PPUSH
24520: LD_INT 1
24522: PPUSH
24523: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
24527: LD_INT 63
24529: PPUSH
24530: LD_VAR 0 3
24534: PPUSH
24535: LD_INT 1
24537: PPUSH
24538: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
24542: LD_INT 64
24544: PPUSH
24545: LD_VAR 0 3
24549: PPUSH
24550: LD_INT 1
24552: PPUSH
24553: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
24557: LD_INT 3
24559: PPUSH
24560: LD_VAR 0 3
24564: PPUSH
24565: LD_INT 1
24567: PPUSH
24568: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
24572: LD_INT 4
24574: PPUSH
24575: LD_VAR 0 3
24579: PPUSH
24580: LD_INT 1
24582: PPUSH
24583: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
24587: LD_INT 5
24589: PPUSH
24590: LD_VAR 0 3
24594: PPUSH
24595: LD_INT 1
24597: PPUSH
24598: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
24602: LD_INT 8
24604: PPUSH
24605: LD_VAR 0 3
24609: PPUSH
24610: LD_INT 1
24612: PPUSH
24613: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
24617: LD_INT 66
24619: PPUSH
24620: LD_VAR 0 3
24624: PPUSH
24625: LD_INT 1
24627: PPUSH
24628: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
24632: LD_INT 67
24634: PPUSH
24635: LD_VAR 0 3
24639: PPUSH
24640: LD_INT 1
24642: PPUSH
24643: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
24647: LD_INT 21
24649: PPUSH
24650: LD_VAR 0 3
24654: PPUSH
24655: LD_INT 1
24657: PPUSH
24658: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
24662: LD_INT 22
24664: PPUSH
24665: LD_VAR 0 3
24669: PPUSH
24670: LD_INT 1
24672: PPUSH
24673: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
24677: LD_INT 19
24679: PPUSH
24680: LD_VAR 0 3
24684: PPUSH
24685: LD_INT 1
24687: PPUSH
24688: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
24692: LD_INT 26
24694: PPUSH
24695: LD_VAR 0 3
24699: PPUSH
24700: LD_INT 1
24702: PPUSH
24703: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
24707: LD_INT 54
24709: PPUSH
24710: LD_VAR 0 3
24714: PPUSH
24715: LD_INT 1
24717: PPUSH
24718: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
24722: LD_INT 55
24724: PPUSH
24725: LD_VAR 0 3
24729: PPUSH
24730: LD_INT 1
24732: PPUSH
24733: CALL_OW 322
// for i = 0 to 39 do
24737: LD_ADDR_VAR 0 4
24741: PUSH
24742: DOUBLE
24743: LD_INT 0
24745: DEC
24746: ST_TO_ADDR
24747: LD_INT 39
24749: PUSH
24750: FOR_TO
24751: IFFALSE 24772
// SetRestrict ( i , side , true ) ;
24753: LD_VAR 0 4
24757: PPUSH
24758: LD_VAR 0 3
24762: PPUSH
24763: LD_INT 1
24765: PPUSH
24766: CALL_OW 324
24770: GO 24750
24772: POP
24773: POP
// end ; else
24774: GO 24851
24776: POP
// begin for i = 1 to 73 do
24777: LD_ADDR_VAR 0 4
24781: PUSH
24782: DOUBLE
24783: LD_INT 1
24785: DEC
24786: ST_TO_ADDR
24787: LD_INT 73
24789: PUSH
24790: FOR_TO
24791: IFFALSE 24812
// SetTech ( i , side , state_enabled ) ;
24793: LD_VAR 0 4
24797: PPUSH
24798: LD_VAR 0 3
24802: PPUSH
24803: LD_INT 1
24805: PPUSH
24806: CALL_OW 322
24810: GO 24790
24812: POP
24813: POP
// for i = 0 to 39 do
24814: LD_ADDR_VAR 0 4
24818: PUSH
24819: DOUBLE
24820: LD_INT 0
24822: DEC
24823: ST_TO_ADDR
24824: LD_INT 39
24826: PUSH
24827: FOR_TO
24828: IFFALSE 24849
// SetRestrict ( i , side , true ) ;
24830: LD_VAR 0 4
24834: PPUSH
24835: LD_VAR 0 3
24839: PPUSH
24840: LD_INT 1
24842: PPUSH
24843: CALL_OW 324
24847: GO 24827
24849: POP
24850: POP
// end ; end ; end ;
24851: GO 20856
24853: POP
24854: POP
// end ; end_of_file
24855: LD_VAR 0 2
24859: RET
// export function LScore_Init ( sides , ifPScore , yourSide ) ; begin
24860: LD_INT 0
24862: PPUSH
// LScore_Init2 ( sides , ifPScore , yourSide , false ) ;
24863: LD_VAR 0 1
24867: PPUSH
24868: LD_VAR 0 2
24872: PPUSH
24873: LD_VAR 0 3
24877: PPUSH
24878: LD_INT 0
24880: PPUSH
24881: CALL 24890 0 4
// end ;
24885: LD_VAR 0 4
24889: RET
// export function LScore_Init2 ( sides , ifPScore , yourSide , lockTeam ) ; begin
24890: LD_INT 0
24892: PPUSH
// ToLua ( initScore({ & sides [ 1 ] & , & sides [ 2 ] & , & sides [ 3 ] & , & sides [ 4 ] & , & sides [ 5 ] & , & sides [ 6 ] & , & sides [ 7 ] & , & sides [ 8 ] & }, & ifPScore & , & yourSide & , & lockTeam & ); ) ;
24893: LD_STRING initScore({
24895: PUSH
24896: LD_VAR 0 1
24900: PUSH
24901: LD_INT 1
24903: ARRAY
24904: STR
24905: PUSH
24906: LD_STRING ,
24908: STR
24909: PUSH
24910: LD_VAR 0 1
24914: PUSH
24915: LD_INT 2
24917: ARRAY
24918: STR
24919: PUSH
24920: LD_STRING ,
24922: STR
24923: PUSH
24924: LD_VAR 0 1
24928: PUSH
24929: LD_INT 3
24931: ARRAY
24932: STR
24933: PUSH
24934: LD_STRING ,
24936: STR
24937: PUSH
24938: LD_VAR 0 1
24942: PUSH
24943: LD_INT 4
24945: ARRAY
24946: STR
24947: PUSH
24948: LD_STRING ,
24950: STR
24951: PUSH
24952: LD_VAR 0 1
24956: PUSH
24957: LD_INT 5
24959: ARRAY
24960: STR
24961: PUSH
24962: LD_STRING ,
24964: STR
24965: PUSH
24966: LD_VAR 0 1
24970: PUSH
24971: LD_INT 6
24973: ARRAY
24974: STR
24975: PUSH
24976: LD_STRING ,
24978: STR
24979: PUSH
24980: LD_VAR 0 1
24984: PUSH
24985: LD_INT 7
24987: ARRAY
24988: STR
24989: PUSH
24990: LD_STRING ,
24992: STR
24993: PUSH
24994: LD_VAR 0 1
24998: PUSH
24999: LD_INT 8
25001: ARRAY
25002: STR
25003: PUSH
25004: LD_STRING },
25006: STR
25007: PUSH
25008: LD_VAR 0 2
25012: STR
25013: PUSH
25014: LD_STRING ,
25016: STR
25017: PUSH
25018: LD_VAR 0 3
25022: STR
25023: PUSH
25024: LD_STRING ,
25026: STR
25027: PUSH
25028: LD_VAR 0 4
25032: STR
25033: PUSH
25034: LD_STRING );
25036: STR
25037: PPUSH
25038: CALL_OW 559
// end ;
25042: LD_VAR 0 5
25046: RET
// export function LScore_Reset ( ) ; begin
25047: LD_INT 0
25049: PPUSH
// ToLua ( ResetScorebar(); ) ;
25050: LD_STRING ResetScorebar();
25052: PPUSH
25053: CALL_OW 559
// end ;
25057: LD_VAR 0 1
25061: RET
// export function LScore_Delete ( ID ) ; begin
25062: LD_INT 0
25064: PPUSH
// ToLua ( deleteScore( & ID & ); ) ;
25065: LD_STRING deleteScore(
25067: PUSH
25068: LD_VAR 0 1
25072: STR
25073: PUSH
25074: LD_STRING );
25076: STR
25077: PPUSH
25078: CALL_OW 559
// end ;
25082: LD_VAR 0 2
25086: RET
// export function LScore_Add_Timer ( ID , typ , totalTime ) ; begin
25087: LD_INT 0
25089: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & ,); ) ;
25090: LD_STRING AST(
25092: PUSH
25093: LD_VAR 0 1
25097: STR
25098: PUSH
25099: LD_STRING ,
25101: STR
25102: PUSH
25103: LD_VAR 0 2
25107: STR
25108: PUSH
25109: LD_STRING ,
25111: STR
25112: PUSH
25113: LD_VAR 0 3
25117: STR
25118: PUSH
25119: LD_STRING ,);
25121: STR
25122: PPUSH
25123: CALL_OW 559
// end ;
25127: LD_VAR 0 4
25131: RET
// export function LScore_Add_Timer2 ( ID , typ , totalTime , show_total ) ; begin
25132: LD_INT 0
25134: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
25135: LD_STRING AST(
25137: PUSH
25138: LD_VAR 0 1
25142: STR
25143: PUSH
25144: LD_STRING ,
25146: STR
25147: PUSH
25148: LD_VAR 0 2
25152: STR
25153: PUSH
25154: LD_STRING ,
25156: STR
25157: PUSH
25158: LD_VAR 0 3
25162: STR
25163: PUSH
25164: LD_STRING ,
25166: STR
25167: PUSH
25168: LD_VAR 0 4
25172: STR
25173: PUSH
25174: LD_STRING );
25176: STR
25177: PPUSH
25178: CALL_OW 559
// end ;
25182: LD_VAR 0 5
25186: RET
// export function LScore_Add_Timer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
25187: LD_INT 0
25189: PPUSH
// ToLua ( AST( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
25190: LD_STRING AST(
25192: PUSH
25193: LD_VAR 0 1
25197: STR
25198: PUSH
25199: LD_STRING ,
25201: STR
25202: PUSH
25203: LD_VAR 0 2
25207: STR
25208: PUSH
25209: LD_STRING ,
25211: STR
25212: PUSH
25213: LD_VAR 0 3
25217: STR
25218: PUSH
25219: LD_STRING ,
25221: STR
25222: PUSH
25223: LD_VAR 0 4
25227: STR
25228: PUSH
25229: LD_STRING ,
25231: STR
25232: PUSH
25233: LD_VAR 0 5
25237: STR
25238: PUSH
25239: LD_STRING );
25241: STR
25242: PPUSH
25243: CALL_OW 559
// end ;
25247: LD_VAR 0 6
25251: RET
// export function LScore_Add_ReverseTimer ( ID , typ , totalTime ) ; begin
25252: LD_INT 0
25254: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & ,); ) ;
25255: LD_STRING ASRT(
25257: PUSH
25258: LD_VAR 0 1
25262: STR
25263: PUSH
25264: LD_STRING ,
25266: STR
25267: PUSH
25268: LD_VAR 0 2
25272: STR
25273: PUSH
25274: LD_STRING ,
25276: STR
25277: PUSH
25278: LD_VAR 0 3
25282: STR
25283: PUSH
25284: LD_STRING ,);
25286: STR
25287: PPUSH
25288: CALL_OW 559
// end ;
25292: LD_VAR 0 4
25296: RET
// export function LScore_Add_ReverseTimer2 ( ID , typ , totalTime , show_total ) ; begin
25297: LD_INT 0
25299: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & ); ) ;
25300: LD_STRING ASRT(
25302: PUSH
25303: LD_VAR 0 1
25307: STR
25308: PUSH
25309: LD_STRING ,
25311: STR
25312: PUSH
25313: LD_VAR 0 2
25317: STR
25318: PUSH
25319: LD_STRING ,
25321: STR
25322: PUSH
25323: LD_VAR 0 3
25327: STR
25328: PUSH
25329: LD_STRING ,
25331: STR
25332: PUSH
25333: LD_VAR 0 4
25337: STR
25338: PUSH
25339: LD_STRING );
25341: STR
25342: PPUSH
25343: CALL_OW 559
// end ;
25347: LD_VAR 0 5
25351: RET
// export function LScore_Add_ReverseTimer3 ( ID , typ , totalTime , show_total , currentTime ) ; begin
25352: LD_INT 0
25354: PPUSH
// ToLua ( ASRT( & ID & , & typ & , & totalTime & , & show_total & , & currentTime & ); ) ;
25355: LD_STRING ASRT(
25357: PUSH
25358: LD_VAR 0 1
25362: STR
25363: PUSH
25364: LD_STRING ,
25366: STR
25367: PUSH
25368: LD_VAR 0 2
25372: STR
25373: PUSH
25374: LD_STRING ,
25376: STR
25377: PUSH
25378: LD_VAR 0 3
25382: STR
25383: PUSH
25384: LD_STRING ,
25386: STR
25387: PUSH
25388: LD_VAR 0 4
25392: STR
25393: PUSH
25394: LD_STRING ,
25396: STR
25397: PUSH
25398: LD_VAR 0 5
25402: STR
25403: PUSH
25404: LD_STRING );
25406: STR
25407: PPUSH
25408: CALL_OW 559
// end ;
25412: LD_VAR 0 6
25416: RET
// export function LScore_update_Timer ( ID , currentTime ) ; begin
25417: LD_INT 0
25419: PPUSH
// ToLua ( UST( & id & , & currentTime & ); ) ;
25420: LD_STRING UST(
25422: PUSH
25423: LD_VAR 0 1
25427: STR
25428: PUSH
25429: LD_STRING ,
25431: STR
25432: PUSH
25433: LD_VAR 0 2
25437: STR
25438: PUSH
25439: LD_STRING );
25441: STR
25442: PPUSH
25443: CALL_OW 559
// end ;
25447: LD_VAR 0 3
25451: RET
// export function LScore_update_Timer2 ( ID , currentTime , totalTime ) ; begin
25452: LD_INT 0
25454: PPUSH
// ToLua ( UST( & id & , & currentTime & , & totalTime & ); ) ;
25455: LD_STRING UST(
25457: PUSH
25458: LD_VAR 0 1
25462: STR
25463: PUSH
25464: LD_STRING ,
25466: STR
25467: PUSH
25468: LD_VAR 0 2
25472: STR
25473: PUSH
25474: LD_STRING ,
25476: STR
25477: PUSH
25478: LD_VAR 0 3
25482: STR
25483: PUSH
25484: LD_STRING );
25486: STR
25487: PPUSH
25488: CALL_OW 559
// end ;
25492: LD_VAR 0 4
25496: RET
// export function LScore_Change_TimerColourRGB ( id , red , green , blue ) ; begin
25497: LD_INT 0
25499: PPUSH
// ToLua ( CCST( & id & ,{ & red & , & green & , & blue & }); ) ;
25500: LD_STRING CCST(
25502: PUSH
25503: LD_VAR 0 1
25507: STR
25508: PUSH
25509: LD_STRING ,{
25511: STR
25512: PUSH
25513: LD_VAR 0 2
25517: STR
25518: PUSH
25519: LD_STRING ,
25521: STR
25522: PUSH
25523: LD_VAR 0 3
25527: STR
25528: PUSH
25529: LD_STRING ,
25531: STR
25532: PUSH
25533: LD_VAR 0 4
25537: STR
25538: PUSH
25539: LD_STRING });
25541: STR
25542: PPUSH
25543: CALL_OW 559
// end ;
25547: LD_VAR 0 5
25551: RET
// export function LScore_Change_TimerColour ( id , side ) ; begin
25552: LD_INT 0
25554: PPUSH
// ToLua ( CCST( & id & , & side & ); ) ;
25555: LD_STRING CCST(
25557: PUSH
25558: LD_VAR 0 1
25562: STR
25563: PUSH
25564: LD_STRING ,
25566: STR
25567: PUSH
25568: LD_VAR 0 2
25572: STR
25573: PUSH
25574: LD_STRING );
25576: STR
25577: PPUSH
25578: CALL_OW 559
// end ;
25582: LD_VAR 0 3
25586: RET
// export function LScore_Add_SinglePoints ( ID , typ , totalPoints ) ; begin
25587: LD_INT 0
25589: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & ,); ) ;
25590: LD_STRING ASSP(
25592: PUSH
25593: LD_VAR 0 1
25597: STR
25598: PUSH
25599: LD_STRING ,
25601: STR
25602: PUSH
25603: LD_VAR 0 2
25607: STR
25608: PUSH
25609: LD_STRING ,
25611: STR
25612: PUSH
25613: LD_VAR 0 3
25617: STR
25618: PUSH
25619: LD_STRING ,);
25621: STR
25622: PPUSH
25623: CALL_OW 559
// end ;
25627: LD_VAR 0 4
25631: RET
// export function LScore_Add_SinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
25632: LD_INT 0
25634: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
25635: LD_STRING ASSP(
25637: PUSH
25638: LD_VAR 0 1
25642: STR
25643: PUSH
25644: LD_STRING ,
25646: STR
25647: PUSH
25648: LD_VAR 0 2
25652: STR
25653: PUSH
25654: LD_STRING ,
25656: STR
25657: PUSH
25658: LD_VAR 0 3
25662: STR
25663: PUSH
25664: LD_STRING ,
25666: STR
25667: PUSH
25668: LD_VAR 0 4
25672: STR
25673: PUSH
25674: LD_STRING );
25676: STR
25677: PPUSH
25678: CALL_OW 559
// end ;
25682: LD_VAR 0 5
25686: RET
// export function LScore_Add_SinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
25687: LD_INT 0
25689: PPUSH
// ToLua ( ASSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
25690: LD_STRING ASSP(
25692: PUSH
25693: LD_VAR 0 1
25697: STR
25698: PUSH
25699: LD_STRING ,
25701: STR
25702: PUSH
25703: LD_VAR 0 2
25707: STR
25708: PUSH
25709: LD_STRING ,
25711: STR
25712: PUSH
25713: LD_VAR 0 3
25717: STR
25718: PUSH
25719: LD_STRING ,
25721: STR
25722: PUSH
25723: LD_VAR 0 4
25727: STR
25728: PUSH
25729: LD_STRING ,
25731: STR
25732: PUSH
25733: LD_VAR 0 5
25737: STR
25738: PUSH
25739: LD_STRING );
25741: STR
25742: PPUSH
25743: CALL_OW 559
// end ;
25747: LD_VAR 0 6
25751: RET
// export function LScore_Add_ReverseSinglePoints ( ID , typ , totalPoints ) ; begin
25752: LD_INT 0
25754: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & ,); ) ;
25755: LD_STRING ASRSP(
25757: PUSH
25758: LD_VAR 0 1
25762: STR
25763: PUSH
25764: LD_STRING ,
25766: STR
25767: PUSH
25768: LD_VAR 0 2
25772: STR
25773: PUSH
25774: LD_STRING ,
25776: STR
25777: PUSH
25778: LD_VAR 0 3
25782: STR
25783: PUSH
25784: LD_STRING ,);
25786: STR
25787: PPUSH
25788: CALL_OW 559
// end ;
25792: LD_VAR 0 4
25796: RET
// export function LScore_Add_ReverseSinglePoints2 ( ID , typ , totalPoints , show_total ) ; begin
25797: LD_INT 0
25799: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & ); ) ;
25800: LD_STRING ASRSP(
25802: PUSH
25803: LD_VAR 0 1
25807: STR
25808: PUSH
25809: LD_STRING ,
25811: STR
25812: PUSH
25813: LD_VAR 0 2
25817: STR
25818: PUSH
25819: LD_STRING ,
25821: STR
25822: PUSH
25823: LD_VAR 0 3
25827: STR
25828: PUSH
25829: LD_STRING ,
25831: STR
25832: PUSH
25833: LD_VAR 0 4
25837: STR
25838: PUSH
25839: LD_STRING );
25841: STR
25842: PPUSH
25843: CALL_OW 559
// end ;
25847: LD_VAR 0 5
25851: RET
// export function LScore_Add_ReverseSinglePoints3 ( ID , typ , totalPoints , show_total , currentPoints ) ; begin
25852: LD_INT 0
25854: PPUSH
// ToLua ( ASRSP( & ID & , & typ & , & totalPoints & , & show_total & , & currentPoints & ); ) ;
25855: LD_STRING ASRSP(
25857: PUSH
25858: LD_VAR 0 1
25862: STR
25863: PUSH
25864: LD_STRING ,
25866: STR
25867: PUSH
25868: LD_VAR 0 2
25872: STR
25873: PUSH
25874: LD_STRING ,
25876: STR
25877: PUSH
25878: LD_VAR 0 3
25882: STR
25883: PUSH
25884: LD_STRING ,
25886: STR
25887: PUSH
25888: LD_VAR 0 4
25892: STR
25893: PUSH
25894: LD_STRING ,
25896: STR
25897: PUSH
25898: LD_VAR 0 5
25902: STR
25903: PUSH
25904: LD_STRING );
25906: STR
25907: PPUSH
25908: CALL_OW 559
// end ;
25912: LD_VAR 0 6
25916: RET
// export function LScore_update_SinglePoints ( ID , currentPoints ) ; begin
25917: LD_INT 0
25919: PPUSH
// ToLua ( USSP( & id & , & currentPoints & ); ) ;
25920: LD_STRING USSP(
25922: PUSH
25923: LD_VAR 0 1
25927: STR
25928: PUSH
25929: LD_STRING ,
25931: STR
25932: PUSH
25933: LD_VAR 0 2
25937: STR
25938: PUSH
25939: LD_STRING );
25941: STR
25942: PPUSH
25943: CALL_OW 559
// end ;
25947: LD_VAR 0 3
25951: RET
// export function LScore_update_SinglePoints2 ( ID , currentPoints , totalPoints ) ; begin
25952: LD_INT 0
25954: PPUSH
// ToLua ( USSP( & id & , & currentPoints & , & totalPoints & ); ) ;
25955: LD_STRING USSP(
25957: PUSH
25958: LD_VAR 0 1
25962: STR
25963: PUSH
25964: LD_STRING ,
25966: STR
25967: PUSH
25968: LD_VAR 0 2
25972: STR
25973: PUSH
25974: LD_STRING ,
25976: STR
25977: PUSH
25978: LD_VAR 0 3
25982: STR
25983: PUSH
25984: LD_STRING );
25986: STR
25987: PPUSH
25988: CALL_OW 559
// end ;
25992: LD_VAR 0 4
25996: RET
// export function LScore_Change_SinglePointsRGB ( id , red , green , blue ) ; begin
25997: LD_INT 0
25999: PPUSH
// ToLua ( CCSSP( & id & ,{ & red & , & green & , & blue & }); ) ;
26000: LD_STRING CCSSP(
26002: PUSH
26003: LD_VAR 0 1
26007: STR
26008: PUSH
26009: LD_STRING ,{
26011: STR
26012: PUSH
26013: LD_VAR 0 2
26017: STR
26018: PUSH
26019: LD_STRING ,
26021: STR
26022: PUSH
26023: LD_VAR 0 3
26027: STR
26028: PUSH
26029: LD_STRING ,
26031: STR
26032: PUSH
26033: LD_VAR 0 4
26037: STR
26038: PUSH
26039: LD_STRING });
26041: STR
26042: PPUSH
26043: CALL_OW 559
// end ;
26047: LD_VAR 0 5
26051: RET
// export function LScore_Change_SinglePoints ( id , side ) ; begin
26052: LD_INT 0
26054: PPUSH
// ToLua ( CCSSP( & id & , & side & ); ) ;
26055: LD_STRING CCSSP(
26057: PUSH
26058: LD_VAR 0 1
26062: STR
26063: PUSH
26064: LD_STRING ,
26066: STR
26067: PUSH
26068: LD_VAR 0 2
26072: STR
26073: PUSH
26074: LD_STRING );
26076: STR
26077: PPUSH
26078: CALL_OW 559
// end ;
26082: LD_VAR 0 3
26086: RET
// export function LScore_Add_Points ( ID , typ , goal ) ; begin
26087: LD_INT 0
26089: PPUSH
// ToLua ( ASP( & id & , & typ & , & goal & ); ) ;
26090: LD_STRING ASP(
26092: PUSH
26093: LD_VAR 0 1
26097: STR
26098: PUSH
26099: LD_STRING ,
26101: STR
26102: PUSH
26103: LD_VAR 0 2
26107: STR
26108: PUSH
26109: LD_STRING ,
26111: STR
26112: PUSH
26113: LD_VAR 0 3
26117: STR
26118: PUSH
26119: LD_STRING );
26121: STR
26122: PPUSH
26123: CALL_OW 559
// end ;
26127: LD_VAR 0 4
26131: RET
// export function LScore_Update_Points ( ID , side , points ) ; begin
26132: LD_INT 0
26134: PPUSH
// ToLua ( USP( & id & , & side & , & points & ); ) ;
26135: LD_STRING USP(
26137: PUSH
26138: LD_VAR 0 1
26142: STR
26143: PUSH
26144: LD_STRING ,
26146: STR
26147: PUSH
26148: LD_VAR 0 2
26152: STR
26153: PUSH
26154: LD_STRING ,
26156: STR
26157: PUSH
26158: LD_VAR 0 3
26162: STR
26163: PUSH
26164: LD_STRING );
26166: STR
26167: PPUSH
26168: CALL_OW 559
// end ;
26172: LD_VAR 0 4
26176: RET
// export function LScore_Update_PointsAll ( ID , score ) ; var i ; begin
26177: LD_INT 0
26179: PPUSH
26180: PPUSH
// for i = 1 to 8 do
26181: LD_ADDR_VAR 0 4
26185: PUSH
26186: DOUBLE
26187: LD_INT 1
26189: DEC
26190: ST_TO_ADDR
26191: LD_INT 8
26193: PUSH
26194: FOR_TO
26195: IFFALSE 26242
// ToLua ( USP( & ID & , & i & , & score [ i ] & ); ) ;
26197: LD_STRING USP(
26199: PUSH
26200: LD_VAR 0 1
26204: STR
26205: PUSH
26206: LD_STRING ,
26208: STR
26209: PUSH
26210: LD_VAR 0 4
26214: STR
26215: PUSH
26216: LD_STRING ,
26218: STR
26219: PUSH
26220: LD_VAR 0 2
26224: PUSH
26225: LD_VAR 0 4
26229: ARRAY
26230: STR
26231: PUSH
26232: LD_STRING );
26234: STR
26235: PPUSH
26236: CALL_OW 559
26240: GO 26194
26242: POP
26243: POP
// end ;
26244: LD_VAR 0 3
26248: RET
// export function LScore_Add_Pieces ( id , typ , goal , total ) ; begin
26249: LD_INT 0
26251: PPUSH
// ToLua ( ASC( & id & , & typ & , & goal & , & total & ); ) ;
26252: LD_STRING ASC(
26254: PUSH
26255: LD_VAR 0 1
26259: STR
26260: PUSH
26261: LD_STRING ,
26263: STR
26264: PUSH
26265: LD_VAR 0 2
26269: STR
26270: PUSH
26271: LD_STRING ,
26273: STR
26274: PUSH
26275: LD_VAR 0 3
26279: STR
26280: PUSH
26281: LD_STRING ,
26283: STR
26284: PUSH
26285: LD_VAR 0 4
26289: STR
26290: PUSH
26291: LD_STRING );
26293: STR
26294: PPUSH
26295: CALL_OW 559
// end ;
26299: LD_VAR 0 5
26303: RET
// export function LScore_Update_Peices ( id , sidesChunks ) ; begin
26304: LD_INT 0
26306: PPUSH
// ToLua ( USC( & id & ,{ & sidesChunks [ 1 ] & , & sidesChunks [ 2 ] & , & sidesChunks [ 3 ] & , & sidesChunks [ 4 ] & , & sidesChunks [ 5 ] & , & sidesChunks [ 6 ] & , & sidesChunks [ 7 ] & , & sidesChunks [ 8 ] & }); ) ;
26307: LD_STRING USC(
26309: PUSH
26310: LD_VAR 0 1
26314: STR
26315: PUSH
26316: LD_STRING ,{
26318: STR
26319: PUSH
26320: LD_VAR 0 2
26324: PUSH
26325: LD_INT 1
26327: ARRAY
26328: STR
26329: PUSH
26330: LD_STRING ,
26332: STR
26333: PUSH
26334: LD_VAR 0 2
26338: PUSH
26339: LD_INT 2
26341: ARRAY
26342: STR
26343: PUSH
26344: LD_STRING ,
26346: STR
26347: PUSH
26348: LD_VAR 0 2
26352: PUSH
26353: LD_INT 3
26355: ARRAY
26356: STR
26357: PUSH
26358: LD_STRING ,
26360: STR
26361: PUSH
26362: LD_VAR 0 2
26366: PUSH
26367: LD_INT 4
26369: ARRAY
26370: STR
26371: PUSH
26372: LD_STRING ,
26374: STR
26375: PUSH
26376: LD_VAR 0 2
26380: PUSH
26381: LD_INT 5
26383: ARRAY
26384: STR
26385: PUSH
26386: LD_STRING ,
26388: STR
26389: PUSH
26390: LD_VAR 0 2
26394: PUSH
26395: LD_INT 6
26397: ARRAY
26398: STR
26399: PUSH
26400: LD_STRING ,
26402: STR
26403: PUSH
26404: LD_VAR 0 2
26408: PUSH
26409: LD_INT 7
26411: ARRAY
26412: STR
26413: PUSH
26414: LD_STRING ,
26416: STR
26417: PUSH
26418: LD_VAR 0 2
26422: PUSH
26423: LD_INT 8
26425: ARRAY
26426: STR
26427: PUSH
26428: LD_STRING });
26430: STR
26431: PPUSH
26432: CALL_OW 559
// end ; end_of_file
26436: LD_VAR 0 3
26440: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
26441: LD_INT 0
26443: PPUSH
26444: PPUSH
26445: PPUSH
26446: PPUSH
26447: PPUSH
26448: PPUSH
26449: PPUSH
26450: PPUSH
26451: PPUSH
// for i := 1 to 8 do
26452: LD_ADDR_VAR 0 2
26456: PUSH
26457: DOUBLE
26458: LD_INT 1
26460: DEC
26461: ST_TO_ADDR
26462: LD_INT 8
26464: PUSH
26465: FOR_TO
26466: IFFALSE 26850
// begin if Side_Positions [ i ] then
26468: LD_EXP 23
26472: PUSH
26473: LD_VAR 0 2
26477: ARRAY
26478: IFFALSE 26848
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
26480: LD_ADDR_VAR 0 7
26484: PUSH
26485: LD_INT 22
26487: PUSH
26488: LD_VAR 0 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 21
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PPUSH
26511: CALL_OW 69
26515: PUSH
26516: LD_INT 0
26518: PLUS
26519: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26520: LD_ADDR_VAR 0 9
26524: PUSH
26525: LD_INT 22
26527: PUSH
26528: LD_VAR 0 2
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: LD_INT 30
26542: PUSH
26543: LD_INT 0
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 30
26552: PUSH
26553: LD_INT 1
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: LIST
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PPUSH
26569: CALL_OW 69
26573: ST_TO_ADDR
// crates := 0 ;
26574: LD_ADDR_VAR 0 4
26578: PUSH
26579: LD_INT 0
26581: ST_TO_ADDR
// oil := 0 ;
26582: LD_ADDR_VAR 0 5
26586: PUSH
26587: LD_INT 0
26589: ST_TO_ADDR
// sib := 0 ;
26590: LD_ADDR_VAR 0 6
26594: PUSH
26595: LD_INT 0
26597: ST_TO_ADDR
// if bases then
26598: LD_VAR 0 9
26602: IFFALSE 26708
// begin for j in bases do
26604: LD_ADDR_VAR 0 3
26608: PUSH
26609: LD_VAR 0 9
26613: PUSH
26614: FOR_IN
26615: IFFALSE 26706
// begin base := GetBase ( j ) ;
26617: LD_ADDR_VAR 0 8
26621: PUSH
26622: LD_VAR 0 3
26626: PPUSH
26627: CALL_OW 274
26631: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
26632: LD_ADDR_VAR 0 4
26636: PUSH
26637: LD_VAR 0 4
26641: PUSH
26642: LD_VAR 0 8
26646: PPUSH
26647: LD_INT 1
26649: PPUSH
26650: CALL_OW 275
26654: PLUS
26655: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
26656: LD_ADDR_VAR 0 5
26660: PUSH
26661: LD_VAR 0 5
26665: PUSH
26666: LD_VAR 0 8
26670: PPUSH
26671: LD_INT 2
26673: PPUSH
26674: CALL_OW 275
26678: PLUS
26679: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
26680: LD_ADDR_VAR 0 6
26684: PUSH
26685: LD_VAR 0 6
26689: PUSH
26690: LD_VAR 0 8
26694: PPUSH
26695: LD_INT 3
26697: PPUSH
26698: CALL_OW 275
26702: PLUS
26703: ST_TO_ADDR
// end ;
26704: GO 26614
26706: POP
26707: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
26708: LD_STRING setSpecText(
26710: PUSH
26711: LD_VAR 0 2
26715: STR
26716: PUSH
26717: LD_STRING ,
26719: STR
26720: PUSH
26721: LD_INT 2
26723: STR
26724: PUSH
26725: LD_STRING ,
26727: STR
26728: PUSH
26729: LD_VAR 0 4
26733: STR
26734: PUSH
26735: LD_STRING )
26737: STR
26738: PPUSH
26739: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
26743: LD_STRING setSpecText(
26745: PUSH
26746: LD_VAR 0 2
26750: STR
26751: PUSH
26752: LD_STRING ,
26754: STR
26755: PUSH
26756: LD_INT 3
26758: STR
26759: PUSH
26760: LD_STRING ,
26762: STR
26763: PUSH
26764: LD_VAR 0 5
26768: STR
26769: PUSH
26770: LD_STRING )
26772: STR
26773: PPUSH
26774: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
26778: LD_STRING setSpecText(
26780: PUSH
26781: LD_VAR 0 2
26785: STR
26786: PUSH
26787: LD_STRING ,
26789: STR
26790: PUSH
26791: LD_INT 4
26793: STR
26794: PUSH
26795: LD_STRING ,
26797: STR
26798: PUSH
26799: LD_VAR 0 6
26803: STR
26804: PUSH
26805: LD_STRING )
26807: STR
26808: PPUSH
26809: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
26813: LD_STRING setSpecText(
26815: PUSH
26816: LD_VAR 0 2
26820: STR
26821: PUSH
26822: LD_STRING ,
26824: STR
26825: PUSH
26826: LD_INT 5
26828: STR
26829: PUSH
26830: LD_STRING ,
26832: STR
26833: PUSH
26834: LD_VAR 0 7
26838: STR
26839: PUSH
26840: LD_STRING )
26842: STR
26843: PPUSH
26844: CALL_OW 559
// end ; end ;
26848: GO 26465
26850: POP
26851: POP
// end ;
26852: LD_VAR 0 1
26856: RET
// every 0 0$1 do
26857: GO 26859
26859: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
26860: LD_STRING setSpecLogoNumber(
26862: PUSH
26863: LD_INT 2
26865: STR
26866: PUSH
26867: LD_STRING ,
26869: STR
26870: PUSH
26871: LD_INT 1
26873: STR
26874: PUSH
26875: LD_STRING )
26877: STR
26878: PPUSH
26879: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
26883: LD_STRING setSpecLogoNumber(
26885: PUSH
26886: LD_INT 3
26888: STR
26889: PUSH
26890: LD_STRING ,
26892: STR
26893: PUSH
26894: LD_INT 2
26896: STR
26897: PUSH
26898: LD_STRING )
26900: STR
26901: PPUSH
26902: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
26906: LD_STRING setSpecLogoNumber(
26908: PUSH
26909: LD_INT 4
26911: STR
26912: PUSH
26913: LD_STRING ,
26915: STR
26916: PUSH
26917: LD_INT 3
26919: STR
26920: PUSH
26921: LD_STRING )
26923: STR
26924: PPUSH
26925: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
26929: LD_STRING setSpecLogoNumber(
26931: PUSH
26932: LD_INT 5
26934: STR
26935: PUSH
26936: LD_STRING ,
26938: STR
26939: PUSH
26940: LD_INT 4
26942: STR
26943: PUSH
26944: LD_STRING )
26946: STR
26947: PPUSH
26948: CALL_OW 559
// end ;
26952: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
26953: LD_INT 2
26955: PUSH
26956: LD_INT 30
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 30
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: LIST
26980: PPUSH
26981: CALL_OW 69
26985: IFFALSE 26995
26987: GO 26989
26989: DISABLE
// begin enable ;
26990: ENABLE
// UpdateSpectatorBar ;
26991: CALL 26441 0 0
// end ; end_of_file
26995: END
// var respawn , inqueue ; export function init_respawning ; begin
26996: LD_INT 0
26998: PPUSH
// respawn := Rand ( 1 , 8 ) ;
26999: LD_ADDR_LOC 34
27003: PUSH
27004: LD_INT 1
27006: PPUSH
27007: LD_INT 8
27009: PPUSH
27010: CALL_OW 12
27014: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
27015: LD_ADDR_LOC 35
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: ST_TO_ADDR
// end ;
27054: LD_VAR 0 1
27058: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
27059: GO 27061
27061: DISABLE
27062: LD_INT 0
27064: PPUSH
27065: PPUSH
27066: PPUSH
// begin if respawning_time_max = 0 then
27067: LD_EXP 17
27071: PUSH
27072: LD_INT 0
27074: EQUAL
27075: IFFALSE 27079
// exit ;
27077: GO 27487
// if respawn = 8 then
27079: LD_LOC 34
27083: PUSH
27084: LD_INT 8
27086: EQUAL
27087: IFFALSE 27099
// respawn := 1 else
27089: LD_ADDR_LOC 34
27093: PUSH
27094: LD_INT 1
27096: ST_TO_ADDR
27097: GO 27113
// respawn := respawn + 1 ;
27099: LD_ADDR_LOC 34
27103: PUSH
27104: LD_LOC 34
27108: PUSH
27109: LD_INT 1
27111: PLUS
27112: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
27113: LD_EXP 23
27117: PUSH
27118: LD_LOC 34
27122: ARRAY
27123: PUSH
27124: LD_LOC 35
27128: PUSH
27129: LD_LOC 34
27133: ARRAY
27134: NOT
27135: AND
27136: IFFALSE 27486
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
27138: LD_ADDR_VAR 0 1
27142: PUSH
27143: LD_INT 21
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 22
27155: PUSH
27156: LD_LOC 34
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 3
27167: PUSH
27168: LD_INT 23
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: PPUSH
27184: CALL_OW 69
27188: ST_TO_ADDR
// if n < number_of_people then
27189: LD_VAR 0 1
27193: PUSH
27194: LD_EXP 9
27198: LESS
27199: IFFALSE 27483
// begin aktresp := respawn ;
27201: LD_ADDR_VAR 0 3
27205: PUSH
27206: LD_LOC 34
27210: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
27211: LD_ADDR_LOC 35
27215: PUSH
27216: LD_LOC 35
27220: PPUSH
27221: LD_VAR 0 3
27225: PPUSH
27226: LD_INT 1
27228: PPUSH
27229: CALL_OW 1
27233: ST_TO_ADDR
// enable ;
27234: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
27235: LD_EXP 16
27239: PPUSH
27240: LD_EXP 17
27244: PPUSH
27245: CALL_OW 12
27249: PPUSH
27250: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
27254: LD_ADDR_LOC 35
27258: PUSH
27259: LD_LOC 35
27263: PPUSH
27264: LD_VAR 0 3
27268: PPUSH
27269: LD_INT 0
27271: PPUSH
27272: CALL_OW 1
27276: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
27277: LD_ADDR_VAR 0 2
27281: PUSH
27282: LD_INT 21
27284: PUSH
27285: LD_INT 3
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 2
27294: PUSH
27295: LD_INT 30
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 30
27307: PUSH
27308: LD_INT 1
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 50
27322: PUSH
27323: EMPTY
27324: LIST
27325: PUSH
27326: LD_INT 22
27328: PUSH
27329: LD_VAR 0 3
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: PPUSH
27344: CALL_OW 69
27348: ST_TO_ADDR
// if dep = 0 then
27349: LD_VAR 0 2
27353: PUSH
27354: LD_INT 0
27356: EQUAL
27357: IFFALSE 27361
// exit ;
27359: GO 27487
// hc_name :=  ;
27361: LD_ADDR_OWVAR 26
27365: PUSH
27366: LD_STRING 
27368: ST_TO_ADDR
// hc_importance := 0 ;
27369: LD_ADDR_OWVAR 32
27373: PUSH
27374: LD_INT 0
27376: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
27377: LD_INT 0
27379: PPUSH
27380: LD_INT 0
27382: PPUSH
27383: LD_EXP 10
27387: PUSH
27388: LD_INT 2
27390: DIV
27391: PPUSH
27392: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
27396: LD_ADDR_OWVAR 21
27400: PUSH
27401: LD_EXP 24
27405: PUSH
27406: LD_VAR 0 3
27410: ARRAY
27411: ST_TO_ADDR
// uc_side := aktresp ;
27412: LD_ADDR_OWVAR 20
27416: PUSH
27417: LD_VAR 0 3
27421: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
27422: LD_ADDR_VAR 0 2
27426: PUSH
27427: LD_VAR 0 2
27431: PUSH
27432: LD_INT 1
27434: PPUSH
27435: LD_VAR 0 2
27439: PPUSH
27440: CALL_OW 12
27444: ARRAY
27445: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
27446: CALL_OW 44
27450: PPUSH
27451: LD_VAR 0 2
27455: PPUSH
27456: CALL_OW 250
27460: PPUSH
27461: LD_VAR 0 2
27465: PPUSH
27466: CALL_OW 251
27470: PPUSH
27471: LD_INT 7
27473: PPUSH
27474: LD_INT 1
27476: PPUSH
27477: CALL_OW 50
// end else
27481: GO 27484
// enable ;
27483: ENABLE
// end else
27484: GO 27487
// enable ;
27486: ENABLE
// end ; end_of_file
27487: PPOPN 3
27489: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
27490: LD_INT 0
27492: PPUSH
27493: PPUSH
27494: PPUSH
// BuildUpTime_Delay = 0 ;
27495: LD_ADDR_EXP 68
27499: PUSH
27500: LD_INT 0
27502: ST_TO_ADDR
// if not def_builduptime then
27503: LD_EXP 61
27507: NOT
27508: IFFALSE 27512
// exit ;
27510: GO 27695
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
27512: LD_ADDR_EXP 68
27516: PUSH
27517: LD_INT 8400
27519: PUSH
27520: LD_INT 2100
27522: PUSH
27523: LD_EXP 61
27527: MUL
27528: PLUS
27529: ST_TO_ADDR
// BuildUpTimeActive := true ;
27530: LD_ADDR_EXP 67
27534: PUSH
27535: LD_INT 1
27537: ST_TO_ADDR
// for i := 1 to 8 do
27538: LD_ADDR_VAR 0 2
27542: PUSH
27543: DOUBLE
27544: LD_INT 1
27546: DEC
27547: ST_TO_ADDR
27548: LD_INT 8
27550: PUSH
27551: FOR_TO
27552: IFFALSE 27693
// if Side_Positions [ i ] then
27554: LD_EXP 23
27558: PUSH
27559: LD_VAR 0 2
27563: ARRAY
27564: IFFALSE 27691
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
27566: LD_EXP 66
27570: PUSH
27571: LD_EXP 23
27575: PUSH
27576: LD_VAR 0 2
27580: ARRAY
27581: ARRAY
27582: PPUSH
27583: LD_INT 5
27585: PPUSH
27586: CALL_OW 424
// for j := 1 to 8 do
27590: LD_ADDR_VAR 0 3
27594: PUSH
27595: DOUBLE
27596: LD_INT 1
27598: DEC
27599: ST_TO_ADDR
27600: LD_INT 8
27602: PUSH
27603: FOR_TO
27604: IFFALSE 27689
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
27606: LD_EXP 23
27610: PUSH
27611: LD_VAR 0 3
27615: ARRAY
27616: PUSH
27617: LD_EXP 21
27621: PUSH
27622: LD_VAR 0 2
27626: ARRAY
27627: PUSH
27628: LD_EXP 21
27632: PUSH
27633: LD_VAR 0 3
27637: ARRAY
27638: NONEQUAL
27639: PUSH
27640: LD_EXP 25
27644: NOT
27645: PUSH
27646: LD_VAR 0 2
27650: PUSH
27651: LD_VAR 0 3
27655: NONEQUAL
27656: AND
27657: OR
27658: AND
27659: IFFALSE 27687
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
27661: LD_VAR 0 3
27665: PPUSH
27666: LD_EXP 66
27670: PUSH
27671: LD_EXP 23
27675: PUSH
27676: LD_VAR 0 2
27680: ARRAY
27681: ARRAY
27682: PPUSH
27683: CALL_OW 333
27687: GO 27603
27689: POP
27690: POP
// end ;
27691: GO 27551
27693: POP
27694: POP
// end ;
27695: LD_VAR 0 1
27699: RET
// export function EndBuildUp ; var i , j ; begin
27700: LD_INT 0
27702: PPUSH
27703: PPUSH
27704: PPUSH
// BuildUpTimeActive := false ;
27705: LD_ADDR_EXP 67
27709: PUSH
27710: LD_INT 0
27712: ST_TO_ADDR
// for i := 1 to 8 do
27713: LD_ADDR_VAR 0 2
27717: PUSH
27718: DOUBLE
27719: LD_INT 1
27721: DEC
27722: ST_TO_ADDR
27723: LD_INT 8
27725: PUSH
27726: FOR_TO
27727: IFFALSE 27868
// if Side_Positions [ i ] then
27729: LD_EXP 23
27733: PUSH
27734: LD_VAR 0 2
27738: ARRAY
27739: IFFALSE 27866
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
27741: LD_EXP 66
27745: PUSH
27746: LD_EXP 23
27750: PUSH
27751: LD_VAR 0 2
27755: ARRAY
27756: ARRAY
27757: PPUSH
27758: LD_INT 0
27760: PPUSH
27761: CALL_OW 424
// for j := 1 to 8 do
27765: LD_ADDR_VAR 0 3
27769: PUSH
27770: DOUBLE
27771: LD_INT 1
27773: DEC
27774: ST_TO_ADDR
27775: LD_INT 8
27777: PUSH
27778: FOR_TO
27779: IFFALSE 27864
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
27781: LD_EXP 23
27785: PUSH
27786: LD_VAR 0 3
27790: ARRAY
27791: PUSH
27792: LD_EXP 21
27796: PUSH
27797: LD_VAR 0 2
27801: ARRAY
27802: PUSH
27803: LD_EXP 21
27807: PUSH
27808: LD_VAR 0 3
27812: ARRAY
27813: NONEQUAL
27814: PUSH
27815: LD_EXP 25
27819: NOT
27820: PUSH
27821: LD_VAR 0 2
27825: PUSH
27826: LD_VAR 0 3
27830: NONEQUAL
27831: AND
27832: OR
27833: AND
27834: IFFALSE 27862
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
27836: LD_VAR 0 3
27840: PPUSH
27841: LD_EXP 66
27845: PUSH
27846: LD_EXP 23
27850: PUSH
27851: LD_VAR 0 2
27855: ARRAY
27856: ARRAY
27857: PPUSH
27858: CALL_OW 334
27862: GO 27778
27864: POP
27865: POP
// end ;
27866: GO 27726
27868: POP
27869: POP
// end ;
27870: LD_VAR 0 1
27874: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
27875: LD_EXP 67
27879: IFFALSE 28054
27881: GO 27883
27883: DISABLE
27884: LD_INT 0
27886: PPUSH
27887: PPUSH
// begin for i := 1 to 8 do
27888: LD_ADDR_VAR 0 1
27892: PUSH
27893: DOUBLE
27894: LD_INT 1
27896: DEC
27897: ST_TO_ADDR
27898: LD_INT 8
27900: PUSH
27901: FOR_TO
27902: IFFALSE 28051
// if Side_Positions [ i ] then
27904: LD_EXP 23
27908: PUSH
27909: LD_VAR 0 1
27913: ARRAY
27914: IFFALSE 28049
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
27916: LD_ADDR_VAR 0 2
27920: PUSH
27921: LD_EXP 66
27925: PUSH
27926: LD_EXP 23
27930: PUSH
27931: LD_VAR 0 1
27935: ARRAY
27936: ARRAY
27937: PPUSH
27938: LD_INT 2
27940: PUSH
27941: LD_INT 21
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 21
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 22
27968: PUSH
27969: LD_OWVAR 2
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PPUSH
27982: CALL_OW 70
27986: PUSH
27987: FOR_IN
27988: IFFALSE 28047
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
27990: LD_EXP 21
27994: PUSH
27995: LD_VAR 0 1
27999: ARRAY
28000: PUSH
28001: LD_EXP 21
28005: PUSH
28006: LD_OWVAR 2
28010: ARRAY
28011: NONEQUAL
28012: PUSH
28013: LD_EXP 25
28017: NOT
28018: PUSH
28019: LD_VAR 0 1
28023: PUSH
28024: LD_OWVAR 2
28028: NONEQUAL
28029: AND
28030: OR
28031: IFFALSE 28045
// ComMoveToArea ( un , BuildUpEscape ) ;
28033: LD_VAR 0 2
28037: PPUSH
28038: LD_INT 24
28040: PPUSH
28041: CALL_OW 113
28045: GO 27987
28047: POP
28048: POP
28049: GO 27901
28051: POP
28052: POP
// enable ;
28053: ENABLE
// end ;
28054: PPOPN 2
28056: END
// every 0 0$1 trigger def_builduptime do
28057: LD_EXP 61
28061: IFFALSE 28087
28063: GO 28065
28065: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
28066: LD_INT 8400
28068: PUSH
28069: LD_EXP 61
28073: PUSH
28074: LD_INT 2100
28076: MUL
28077: PLUS
28078: PPUSH
28079: CALL_OW 67
// EndBuildUp ;
28083: CALL 27700 0 0
// end ;
28087: END
