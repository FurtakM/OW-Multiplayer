// export game_type , def_amount_of_people , def_initial_level , def_nations , def_oil_deposits , def_sib_deposits , def_shipments_density , def_amount_of_apemen , def_shared_vision , def_siberite_detection , def_artefacts_to_win , def_gate_opens_interval ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Positions ; export people , apemen ; export x1 , y1 , x2 , y2 , dx , dy ; export crates , time_index , time1 , time2 , LeftPoints , RightPoints , artx , arty , artu ; export npeople , level_bonus , shipments_density , noildeposits , nsibdeposits , ncans , napemen , interval , pointstowin ; function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// if MultiPlayer then
   5: LD_OWVAR 4
   9: IFFALSE 83
// begin game_type = mp_game_type ;
  11: LD_ADDR_EXP 1
  15: PUSH
  16: LD_OWVAR 6
  20: ST_TO_ADDR
// Player_Side = mp_player_side ;
  21: LD_ADDR_EXP 15
  25: PUSH
  26: LD_OWVAR 7
  30: ST_TO_ADDR
// Player_Team = mp_player_team ;
  31: LD_ADDR_EXP 16
  35: PUSH
  36: LD_OWVAR 8
  40: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  41: LD_ADDR_EXP 19
  45: PUSH
  46: LD_OWVAR 17
  50: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  51: LD_ADDR_EXP 17
  55: PUSH
  56: LD_OWVAR 15
  60: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  61: LD_ADDR_EXP 20
  65: PUSH
  66: LD_OWVAR 16
  70: ST_TO_ADDR
// Teams = mp_teams ;
  71: LD_ADDR_EXP 18
  75: PUSH
  76: LD_OWVAR 12
  80: ST_TO_ADDR
// end else
  81: GO 231
// begin game_type = 1 ;
  83: LD_ADDR_EXP 1
  87: PUSH
  88: LD_INT 1
  90: ST_TO_ADDR
// Player_Side = 4 ;
  91: LD_ADDR_EXP 15
  95: PUSH
  96: LD_INT 4
  98: ST_TO_ADDR
// Player_Team = 2 ;
  99: LD_ADDR_EXP 16
 103: PUSH
 104: LD_INT 2
 106: ST_TO_ADDR
// Side_Positions = [ 0 , 0 , 0 , 2 , 0 , 1 , 0 , 0 ] ;
 107: LD_ADDR_EXP 19
 111: PUSH
 112: LD_INT 0
 114: PUSH
 115: LD_INT 0
 117: PUSH
 118: LD_INT 0
 120: PUSH
 121: LD_INT 2
 123: PUSH
 124: LD_INT 0
 126: PUSH
 127: LD_INT 1
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: EMPTY
 137: LIST
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 146: LD_ADDR_EXP 17
 150: PUSH
 151: LD_INT 0
 153: PUSH
 154: LD_INT 0
 156: PUSH
 157: LD_INT 0
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: ST_TO_ADDR
// Side_Nations = [ 0 , 0 , 0 , 2 , 0 , 3 , 0 , 0 ] ;
 185: LD_ADDR_EXP 20
 189: PUSH
 190: LD_INT 0
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 0
 198: PUSH
 199: LD_INT 2
 201: PUSH
 202: LD_INT 0
 204: PUSH
 205: LD_INT 3
 207: PUSH
 208: LD_INT 0
 210: PUSH
 211: LD_INT 0
 213: PUSH
 214: EMPTY
 215: LIST
 216: LIST
 217: LIST
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// Teams = [ ] ;
 224: LD_ADDR_EXP 18
 228: PUSH
 229: EMPTY
 230: ST_TO_ADDR
// end ; Positions = [ 0 , 0 ] ;
 231: LD_ADDR_EXP 23
 235: PUSH
 236: LD_INT 0
 238: PUSH
 239: LD_INT 0
 241: PUSH
 242: EMPTY
 243: LIST
 244: LIST
 245: ST_TO_ADDR
// for i := 1 to Side_Positions do
 246: LD_ADDR_VAR 0 2
 250: PUSH
 251: DOUBLE
 252: LD_INT 1
 254: DEC
 255: ST_TO_ADDR
 256: LD_EXP 19
 260: PUSH
 261: FOR_TO
 262: IFFALSE 309
// if Side_Positions [ i ] then
 264: LD_EXP 19
 268: PUSH
 269: LD_VAR 0 2
 273: ARRAY
 274: IFFALSE 307
// begin Positions := Replace ( Positions , Side_Positions [ i ] , i ) ;
 276: LD_ADDR_EXP 23
 280: PUSH
 281: LD_EXP 23
 285: PPUSH
 286: LD_EXP 19
 290: PUSH
 291: LD_VAR 0 2
 295: ARRAY
 296: PPUSH
 297: LD_VAR 0 2
 301: PPUSH
 302: CALL_OW 1
 306: ST_TO_ADDR
// end ;
 307: GO 261
 309: POP
 310: POP
// Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 311: LD_ADDR_EXP 13
 315: PUSH
 316: LD_EXP 19
 320: PUSH
 321: LD_INT 0
 323: PUSH
 324: EMPTY
 325: LIST
 326: DIFF
 327: PUSH
 328: LD_INT 0
 330: PLUS
 331: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 332: LD_ADDR_EXP 14
 336: PUSH
 337: LD_EXP 17
 341: PUSH
 342: LD_INT 0
 344: PUSH
 345: EMPTY
 346: LIST
 347: DIFF
 348: PUSH
 349: LD_INT 0
 351: PLUS
 352: ST_TO_ADDR
// if MultiPlayer then
 353: LD_OWVAR 4
 357: IFFALSE 517
// begin def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 359: LD_ADDR_EXP 2
 363: PUSH
 364: LD_INT 1
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 372: LD_ADDR_EXP 3
 376: PUSH
 377: LD_INT 2
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_nations = GetMultiplayerSetting ( 3 ) ;
 385: LD_ADDR_EXP 4
 389: PUSH
 390: LD_INT 3
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 398: LD_ADDR_EXP 7
 402: PUSH
 403: LD_INT 4
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 411: LD_ADDR_EXP 5
 415: PUSH
 416: LD_INT 5
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_sib_deposits = GetMultiplayerSetting ( 6 ) ;
 424: LD_ADDR_EXP 6
 428: PUSH
 429: LD_INT 6
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 437: LD_ADDR_EXP 9
 441: PUSH
 442: LD_INT 10
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 450: LD_ADDR_EXP 10
 454: PUSH
 455: LD_INT 12
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 463: LD_ADDR_EXP 8
 467: PUSH
 468: LD_INT 13
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_artefacts_to_win = GetMultiplayerSetting ( 15 ) ;
 476: LD_ADDR_EXP 11
 480: PUSH
 481: LD_INT 15
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_gate_opens_interval = GetMultiplayerSetting ( 16 ) ;
 489: LD_ADDR_EXP 12
 493: PUSH
 494: LD_INT 16
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 502: LD_ADDR_VAR 0 3
 506: PUSH
 507: LD_INT 22
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// end else
 515: GO 617
// begin randomize ;
 517: CALL_OW 10
// def_amount_of_people = 2 ;
 521: LD_ADDR_EXP 2
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// def_initial_level = 1 ;
 529: LD_ADDR_EXP 3
 533: PUSH
 534: LD_INT 1
 536: ST_TO_ADDR
// def_nations = 3 ;
 537: LD_ADDR_EXP 4
 541: PUSH
 542: LD_INT 3
 544: ST_TO_ADDR
// def_shipments_density = 1 ;
 545: LD_ADDR_EXP 7
 549: PUSH
 550: LD_INT 1
 552: ST_TO_ADDR
// def_oil_deposits = 1 ;
 553: LD_ADDR_EXP 5
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// def_sib_deposits = 0 ;
 561: LD_ADDR_EXP 6
 565: PUSH
 566: LD_INT 0
 568: ST_TO_ADDR
// def_shared_vision = 1 ;
 569: LD_ADDR_EXP 9
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// def_siberite_detection = 1 ;
 577: LD_ADDR_EXP 10
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// def_amount_of_apemen = 2 ;
 585: LD_ADDR_EXP 8
 589: PUSH
 590: LD_INT 2
 592: ST_TO_ADDR
// def_artefacts_to_win = 2 ;
 593: LD_ADDR_EXP 11
 597: PUSH
 598: LD_INT 2
 600: ST_TO_ADDR
// def_gate_opens_interval = 0 ;
 601: LD_ADDR_EXP 12
 605: PUSH
 606: LD_INT 0
 608: ST_TO_ADDR
// tech_level = 4 ;
 609: LD_ADDR_VAR 0 3
 613: PUSH
 614: LD_INT 4
 616: ST_TO_ADDR
// end ; if isSGUI then
 617: LD_OWVAR 83
 621: IFFALSE 629
// setMpTechs ( ) else
 623: CALL 5829 0 0
 627: GO 642
// begin SetMpTechLevel ( tech_level + 1 ) ;
 629: LD_VAR 0 3
 633: PUSH
 634: LD_INT 1
 636: PLUS
 637: PPUSH
 638: CALL 5976 0 1
// end ; npeople = [ 9 , 12 , 15 ] [ def_amount_of_people + 1 ] ;
 642: LD_ADDR_EXP 41
 646: PUSH
 647: LD_INT 9
 649: PUSH
 650: LD_INT 12
 652: PUSH
 653: LD_INT 15
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: PUSH
 661: LD_EXP 2
 665: PUSH
 666: LD_INT 1
 668: PLUS
 669: ARRAY
 670: ST_TO_ADDR
// level_bonus = [ 0 , 1 , 2 ] [ def_initial_level + 1 ] ;
 671: LD_ADDR_EXP 42
 675: PUSH
 676: LD_INT 0
 678: PUSH
 679: LD_INT 1
 681: PUSH
 682: LD_INT 2
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: PUSH
 690: LD_EXP 3
 694: PUSH
 695: LD_INT 1
 697: PLUS
 698: ARRAY
 699: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 28 ;
 700: LD_ADDR_EXP 43
 704: PUSH
 705: LD_INT 20
 707: PUSH
 708: LD_EXP 7
 712: PUSH
 713: LD_INT 28
 715: MUL
 716: PLUS
 717: ST_TO_ADDR
// noildeposits = [ 1 , 2 , 3 ] [ def_oil_deposits + 1 ] ;
 718: LD_ADDR_EXP 44
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: LIST
 736: PUSH
 737: LD_EXP 5
 741: PUSH
 742: LD_INT 1
 744: PLUS
 745: ARRAY
 746: ST_TO_ADDR
// nsibdeposits = [ 1 , 2 ] [ def_sib_deposits + 1 ] ;
 747: LD_ADDR_EXP 45
 751: PUSH
 752: LD_INT 1
 754: PUSH
 755: LD_INT 2
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: LD_EXP 6
 766: PUSH
 767: LD_INT 1
 769: PLUS
 770: ARRAY
 771: ST_TO_ADDR
// ncans = 0 ;
 772: LD_ADDR_EXP 46
 776: PUSH
 777: LD_INT 0
 779: ST_TO_ADDR
// napemen = [ 0 , 2 , 4 , 6 ] [ def_amount_of_apemen + 1 ] ;
 780: LD_ADDR_EXP 47
 784: PUSH
 785: LD_INT 0
 787: PUSH
 788: LD_INT 2
 790: PUSH
 791: LD_INT 4
 793: PUSH
 794: LD_INT 6
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: LIST
 801: LIST
 802: PUSH
 803: LD_EXP 8
 807: PUSH
 808: LD_INT 1
 810: PLUS
 811: ARRAY
 812: ST_TO_ADDR
// interval = [ 5 5$0 , 7 7$0 , 10 10$0 , 15 15$0 , 25 25$0 , 40 40$0 ] [ def_gate_opens_interval + 1 ] ;
 813: LD_ADDR_EXP 48
 817: PUSH
 818: LD_INT 10500
 820: PUSH
 821: LD_INT 14700
 823: PUSH
 824: LD_INT 21000
 826: PUSH
 827: LD_INT 31500
 829: PUSH
 830: LD_INT 52500
 832: PUSH
 833: LD_INT 84000
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: LIST
 842: LIST
 843: PUSH
 844: LD_EXP 12
 848: PUSH
 849: LD_INT 1
 851: PLUS
 852: ARRAY
 853: ST_TO_ADDR
// pointstowin = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] [ def_artefacts_to_win + 1 ] ;
 854: LD_ADDR_EXP 49
 858: PUSH
 859: LD_INT 1
 861: PUSH
 862: LD_INT 2
 864: PUSH
 865: LD_INT 3
 867: PUSH
 868: LD_INT 4
 870: PUSH
 871: LD_INT 5
 873: PUSH
 874: LD_INT 6
 876: PUSH
 877: LD_INT 7
 879: PUSH
 880: LD_INT 8
 882: PUSH
 883: LD_INT 9
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: PUSH
 897: LD_EXP 11
 901: PUSH
 902: LD_INT 1
 904: PLUS
 905: ARRAY
 906: ST_TO_ADDR
// case def_nations of 0 :
 907: LD_EXP 4
 911: PUSH
 912: LD_INT 0
 914: DOUBLE
 915: EQUAL
 916: IFTRUE 920
 918: GO 962
 920: POP
// Side_Nations = [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 ] ; 1 :
 921: LD_ADDR_EXP 20
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: LD_INT 1
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: LIST
 959: ST_TO_ADDR
 960: GO 1124
 962: LD_INT 1
 964: DOUBLE
 965: EQUAL
 966: IFTRUE 970
 968: GO 1012
 970: POP
// Side_Nations = [ 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 ] ; 2 :
 971: LD_ADDR_EXP 20
 975: PUSH
 976: LD_INT 3
 978: PUSH
 979: LD_INT 3
 981: PUSH
 982: LD_INT 3
 984: PUSH
 985: LD_INT 3
 987: PUSH
 988: LD_INT 3
 990: PUSH
 991: LD_INT 3
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: LD_INT 3
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: ST_TO_ADDR
1010: GO 1124
1012: LD_INT 2
1014: DOUBLE
1015: EQUAL
1016: IFTRUE 1020
1018: GO 1062
1020: POP
// Side_Nations = [ 2 , 2 , 2 , 2 , 2 , 2 , 2 , 2 ] ; 3 :
1021: LD_ADDR_EXP 20
1025: PUSH
1026: LD_INT 2
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: LD_INT 2
1034: PUSH
1035: LD_INT 2
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 2
1046: PUSH
1047: LD_INT 2
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: ST_TO_ADDR
1060: GO 1124
1062: LD_INT 3
1064: DOUBLE
1065: EQUAL
1066: IFTRUE 1070
1068: GO 1073
1070: POP
// ; 4 :
1071: GO 1124
1073: LD_INT 4
1075: DOUBLE
1076: EQUAL
1077: IFTRUE 1081
1079: GO 1123
1081: POP
// Side_Nations = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ; end ;
1082: LD_ADDR_EXP 20
1086: PUSH
1087: LD_INT 0
1089: PUSH
1090: LD_INT 0
1092: PUSH
1093: LD_INT 0
1095: PUSH
1096: LD_INT 0
1098: PUSH
1099: LD_INT 0
1101: PUSH
1102: LD_INT 0
1104: PUSH
1105: LD_INT 0
1107: PUSH
1108: LD_INT 0
1110: PUSH
1111: EMPTY
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: LIST
1119: LIST
1120: ST_TO_ADDR
1121: GO 1124
1123: POP
// end ;
1124: LD_VAR 0 1
1128: RET
// function prepare_definitions ; var i ; begin
1129: LD_INT 0
1131: PPUSH
1132: PPUSH
// people = [ [ 1 , 3 , Dr. Jones , class_soldier , sex_male , [ 12 , 11 ] , [ 4 , 2 , 2 , 3 ] , nation_american ] , [ 1 , 4 , Dr. Croft , class_soldier , sex_female , [ 11 , 12 ] , [ 4 , 1 , 3 , 1 ] , nation_american ] , [ 2 , 13 , Sgt. Li , class_soldier , sex_female , [ 10 , 11 ] , [ 3 , 1 , 2 , 1 ] , nation_russian ] , [ 3 , 5 , Sgt. Black , class_soldier , sex_male , [ 11 , 10 ] , [ 4 , 1 , 1 , 1 ] , nation_arabian ] , [ 1 , 6 , Dongo , class_engineer , sex_male , [ 16 , 8 ] , [ 2 , 4 , 0 , 0 ] , nation_arabian ] , [ 1 , 7 , Bongo , class_engineer , sex_male , [ 10 , 10 ] , [ 1 , 4 , 1 , 0 ] , nation_russian ] , [ 2 , 14 , Chicken , class_engineer , sex_female , [ 8 , 12 ] , [ 0 , 3 , 2 , 1 ] , nation_american ] , [ 1 , 8 , Swan , class_mechanic , sex_male , [ 10 , 10 ] , [ 1 , 1 , 3 , 1 ] , nation_arabian ] , [ 1 , 15 , Flash , class_mechanic , sex_female , [ 11 , 11 ] , [ 1 , 1 , 4 , 0 ] , nation_american ] , [ 2 , 10 , Red , class_mechanic , sex_male , [ 12 , 10 ] , [ 0 , 3 , 3 , 0 ] , nation_arabian ] , [ 3 , 9 , Roadkill , class_mechanic , sex_male , [ 9 , 10 ] , [ 2 , 2 , 2 , 2 ] , nation_russian ] , [ 1 , 12 , Dr. Olyenko , class_scientistic , sex_male , [ 11 , 10 ] , [ 1 , 1 , 0 , 3 ] , nation_russian ] , [ 1 , 16 , Dr. Olyenko , class_scientistic , sex_female , [ 10 , 11 ] , [ 1 , 1 , 2 , 3 ] , nation_russian ] , [ 1 , 11 , Dr. Wuzashi , class_scientistic , sex_male , [ 12 , 10 ] , [ 3 , 0 , 0 , 3 ] , nation_arabian ] , [ 3 , 17 , Dr. Winston , class_scientistic , sex_female , [ 8 , 6 ] , [ 0 , 0 , 0 , 4 ] , nation_american ] ] ;
1133: LD_ADDR_EXP 24
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: LD_STRING Dr. Jones
1146: PUSH
1147: LD_INT 1
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 12
1155: PUSH
1156: LD_INT 11
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PUSH
1163: LD_INT 4
1165: PUSH
1166: LD_INT 2
1168: PUSH
1169: LD_INT 2
1171: PUSH
1172: LD_INT 3
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 1
1196: PUSH
1197: LD_INT 4
1199: PUSH
1200: LD_STRING Dr. Croft
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 2
1208: PUSH
1209: LD_INT 11
1211: PUSH
1212: LD_INT 12
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PUSH
1219: LD_INT 4
1221: PUSH
1222: LD_INT 1
1224: PUSH
1225: LD_INT 3
1227: PUSH
1228: LD_INT 1
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 2
1252: PUSH
1253: LD_INT 13
1255: PUSH
1256: LD_STRING Sgt. Li
1258: PUSH
1259: LD_INT 1
1261: PUSH
1262: LD_INT 2
1264: PUSH
1265: LD_INT 10
1267: PUSH
1268: LD_INT 11
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 3
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: LD_INT 2
1283: PUSH
1284: LD_INT 1
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: PUSH
1293: LD_INT 3
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: PUSH
1306: LD_INT 3
1308: PUSH
1309: LD_INT 5
1311: PUSH
1312: LD_STRING Sgt. Black
1314: PUSH
1315: LD_INT 1
1317: PUSH
1318: LD_INT 1
1320: PUSH
1321: LD_INT 11
1323: PUSH
1324: LD_INT 10
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 4
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 1
1339: PUSH
1340: LD_INT 1
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 2
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: LD_INT 6
1367: PUSH
1368: LD_STRING Dongo
1370: PUSH
1371: LD_INT 2
1373: PUSH
1374: LD_INT 1
1376: PUSH
1377: LD_INT 16
1379: PUSH
1380: LD_INT 8
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 4
1392: PUSH
1393: LD_INT 0
1395: PUSH
1396: LD_INT 0
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 2
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: LD_INT 7
1423: PUSH
1424: LD_STRING Bongo
1426: PUSH
1427: LD_INT 2
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: LD_INT 10
1435: PUSH
1436: LD_INT 10
1438: PUSH
1439: EMPTY
1440: LIST
1441: LIST
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: LD_INT 4
1448: PUSH
1449: LD_INT 1
1451: PUSH
1452: LD_INT 0
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: PUSH
1461: LD_INT 3
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 2
1476: PUSH
1477: LD_INT 14
1479: PUSH
1480: LD_STRING Chicken
1482: PUSH
1483: LD_INT 2
1485: PUSH
1486: LD_INT 2
1488: PUSH
1489: LD_INT 8
1491: PUSH
1492: LD_INT 12
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 0
1501: PUSH
1502: LD_INT 3
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: LD_INT 1
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 1
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 1
1532: PUSH
1533: LD_INT 8
1535: PUSH
1536: LD_STRING Swan
1538: PUSH
1539: LD_INT 3
1541: PUSH
1542: LD_INT 1
1544: PUSH
1545: LD_INT 10
1547: PUSH
1548: LD_INT 10
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: LD_INT 1
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: LD_INT 3
1563: PUSH
1564: LD_INT 1
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 2
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: PUSH
1586: LD_INT 1
1588: PUSH
1589: LD_INT 15
1591: PUSH
1592: LD_STRING Flash
1594: PUSH
1595: LD_INT 3
1597: PUSH
1598: LD_INT 2
1600: PUSH
1601: LD_INT 11
1603: PUSH
1604: LD_INT 11
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: LD_INT 1
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 4
1619: PUSH
1620: LD_INT 0
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: PUSH
1629: LD_INT 1
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_INT 2
1644: PUSH
1645: LD_INT 10
1647: PUSH
1648: LD_STRING Red
1650: PUSH
1651: LD_INT 3
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: LD_INT 12
1659: PUSH
1660: LD_INT 10
1662: PUSH
1663: EMPTY
1664: LIST
1665: LIST
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: LD_INT 3
1675: PUSH
1676: LD_INT 0
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 2
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: LIST
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: LD_INT 9
1703: PUSH
1704: LD_STRING Roadkill
1706: PUSH
1707: LD_INT 3
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: LD_INT 9
1715: PUSH
1716: LD_INT 10
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: PUSH
1723: LD_INT 2
1725: PUSH
1726: LD_INT 2
1728: PUSH
1729: LD_INT 2
1731: PUSH
1732: LD_INT 2
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 3
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: PUSH
1754: LD_INT 1
1756: PUSH
1757: LD_INT 12
1759: PUSH
1760: LD_STRING Dr. Olyenko
1762: PUSH
1763: LD_INT 4
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: LD_INT 11
1771: PUSH
1772: LD_INT 10
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 1
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: LD_INT 3
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 3
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_INT 1
1812: PUSH
1813: LD_INT 16
1815: PUSH
1816: LD_STRING Dr. Olyenko
1818: PUSH
1819: LD_INT 4
1821: PUSH
1822: LD_INT 2
1824: PUSH
1825: LD_INT 10
1827: PUSH
1828: LD_INT 11
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 1
1837: PUSH
1838: LD_INT 1
1840: PUSH
1841: LD_INT 2
1843: PUSH
1844: LD_INT 3
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 3
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: LIST
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 1
1868: PUSH
1869: LD_INT 11
1871: PUSH
1872: LD_STRING Dr. Wuzashi
1874: PUSH
1875: LD_INT 4
1877: PUSH
1878: LD_INT 1
1880: PUSH
1881: LD_INT 12
1883: PUSH
1884: LD_INT 10
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 3
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 2
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: PUSH
1922: LD_INT 3
1924: PUSH
1925: LD_INT 17
1927: PUSH
1928: LD_STRING Dr. Winston
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: LD_INT 2
1936: PUSH
1937: LD_INT 8
1939: PUSH
1940: LD_INT 6
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: PUSH
1947: LD_INT 0
1949: PUSH
1950: LD_INT 0
1952: PUSH
1953: LD_INT 0
1955: PUSH
1956: LD_INT 4
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 1
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: ST_TO_ADDR
// apemen = [ - 5 , 5 , - 10 , 10 , - 15 , 15 ] ;
1995: LD_ADDR_EXP 25
1999: PUSH
2000: LD_INT 5
2002: NEG
2003: PUSH
2004: LD_INT 5
2006: PUSH
2007: LD_INT 10
2009: NEG
2010: PUSH
2011: LD_INT 10
2013: PUSH
2014: LD_INT 15
2016: NEG
2017: PUSH
2018: LD_INT 15
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: ST_TO_ADDR
// time_index = 0 ;
2029: LD_ADDR_EXP 33
2033: PUSH
2034: LD_INT 0
2036: ST_TO_ADDR
// LeftPoints = 0 ;
2037: LD_ADDR_EXP 36
2041: PUSH
2042: LD_INT 0
2044: ST_TO_ADDR
// RightPoints = 0 ;
2045: LD_ADDR_EXP 37
2049: PUSH
2050: LD_INT 0
2052: ST_TO_ADDR
// artx := - 1 ;
2053: LD_ADDR_EXP 38
2057: PUSH
2058: LD_INT 1
2060: NEG
2061: ST_TO_ADDR
// artu := 0 ;
2062: LD_ADDR_EXP 40
2066: PUSH
2067: LD_INT 0
2069: ST_TO_ADDR
// end ;
2070: LD_VAR 0 1
2074: RET
// function prepare_map ; var i , coord ; begin
2075: LD_INT 0
2077: PPUSH
2078: PPUSH
2079: PPUSH
// for i := 1 to noildeposits do
2080: LD_ADDR_VAR 0 2
2084: PUSH
2085: DOUBLE
2086: LD_INT 1
2088: DEC
2089: ST_TO_ADDR
2090: LD_EXP 44
2094: PUSH
2095: FOR_TO
2096: IFFALSE 2178
// begin coord := RandHexArea ( Deposits , false ) ;
2098: LD_ADDR_VAR 0 3
2102: PUSH
2103: LD_INT 7
2105: PPUSH
2106: LD_INT 0
2108: PPUSH
2109: CALL_OW 16
2113: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_oil ) ;
2114: LD_VAR 0 3
2118: PUSH
2119: LD_INT 1
2121: ARRAY
2122: PPUSH
2123: LD_VAR 0 3
2127: PUSH
2128: LD_INT 2
2130: ARRAY
2131: PPUSH
2132: LD_INT 2
2134: PPUSH
2135: CALL_OW 62
// CreateDepositXY ( coord [ 1 ] + dx , coord [ 2 ] + dy , mat_oil ) ;
2139: LD_VAR 0 3
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PUSH
2148: LD_EXP 30
2152: PLUS
2153: PPUSH
2154: LD_VAR 0 3
2158: PUSH
2159: LD_INT 2
2161: ARRAY
2162: PUSH
2163: LD_EXP 31
2167: PLUS
2168: PPUSH
2169: LD_INT 2
2171: PPUSH
2172: CALL_OW 62
// end ;
2176: GO 2095
2178: POP
2179: POP
// for i := 1 to nsibdeposits do
2180: LD_ADDR_VAR 0 2
2184: PUSH
2185: DOUBLE
2186: LD_INT 1
2188: DEC
2189: ST_TO_ADDR
2190: LD_EXP 45
2194: PUSH
2195: FOR_TO
2196: IFFALSE 2278
// begin coord := RandHexArea ( Deposits , false ) ;
2198: LD_ADDR_VAR 0 3
2202: PUSH
2203: LD_INT 7
2205: PPUSH
2206: LD_INT 0
2208: PPUSH
2209: CALL_OW 16
2213: ST_TO_ADDR
// CreateDepositXY ( coord [ 1 ] , coord [ 2 ] , mat_siberit ) ;
2214: LD_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ARRAY
2222: PPUSH
2223: LD_VAR 0 3
2227: PUSH
2228: LD_INT 2
2230: ARRAY
2231: PPUSH
2232: LD_INT 3
2234: PPUSH
2235: CALL_OW 62
// CreateDepositXY ( coord [ 1 ] + dx , coord [ 2 ] + dy , mat_siberit ) ;
2239: LD_VAR 0 3
2243: PUSH
2244: LD_INT 1
2246: ARRAY
2247: PUSH
2248: LD_EXP 30
2252: PLUS
2253: PPUSH
2254: LD_VAR 0 3
2258: PUSH
2259: LD_INT 2
2261: ARRAY
2262: PUSH
2263: LD_EXP 31
2267: PLUS
2268: PPUSH
2269: LD_INT 3
2271: PPUSH
2272: CALL_OW 62
// end ;
2276: GO 2195
2278: POP
2279: POP
// for i := 1 to ncans do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_EXP 46
2294: PUSH
2295: FOR_TO
2296: IFFALSE 2309
// begin repeat until new_crate ( false ) ;
2298: LD_INT 0
2300: PPUSH
2301: CALL 3298 0 1
2305: IFFALSE 2298
// end ;
2307: GO 2295
2309: POP
2310: POP
// ResetFog ;
2311: CALL_OW 335
// for i := 1 to Side_Positions do
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: DOUBLE
2321: LD_INT 1
2323: DEC
2324: ST_TO_ADDR
2325: LD_EXP 19
2329: PUSH
2330: FOR_TO
2331: IFFALSE 2393
// if Side_Positions [ i ] = 1 then
2333: LD_EXP 19
2337: PUSH
2338: LD_VAR 0 2
2342: ARRAY
2343: PUSH
2344: LD_INT 1
2346: EQUAL
2347: IFFALSE 2363
// HideArea ( i , Ar1 ) else
2349: LD_VAR 0 2
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: CALL_OW 333
2361: GO 2391
// if Side_Positions [ i ] = 2 then
2363: LD_EXP 19
2367: PUSH
2368: LD_VAR 0 2
2372: ARRAY
2373: PUSH
2374: LD_INT 2
2376: EQUAL
2377: IFFALSE 2391
// HideArea ( i , Ar2 ) ;
2379: LD_VAR 0 2
2383: PPUSH
2384: LD_INT 2
2386: PPUSH
2387: CALL_OW 333
2391: GO 2330
2393: POP
2394: POP
// end ;
2395: LD_VAR 0 1
2399: RET
// function prepare_team ( ar , side ) ; var sk , bsk , c , i , def ; begin
2400: LD_INT 0
2402: PPUSH
2403: PPUSH
2404: PPUSH
2405: PPUSH
2406: PPUSH
2407: PPUSH
// uc_side := side ;
2408: LD_ADDR_OWVAR 20
2412: PUSH
2413: LD_VAR 0 2
2417: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
2418: LD_ADDR_OWVAR 21
2422: PUSH
2423: LD_EXP 20
2427: PUSH
2428: LD_VAR 0 2
2432: ARRAY
2433: ST_TO_ADDR
// uc_direction := 0 ;
2434: LD_ADDR_OWVAR 24
2438: PUSH
2439: LD_INT 0
2441: ST_TO_ADDR
// hc_importance := 110 ;
2442: LD_ADDR_OWVAR 32
2446: PUSH
2447: LD_INT 110
2449: ST_TO_ADDR
// for def in people do
2450: LD_ADDR_VAR 0 8
2454: PUSH
2455: LD_EXP 24
2459: PUSH
2460: FOR_IN
2461: IFFALSE 2751
// if def [ 1 ] <= def_amount_of_people + 1 then
2463: LD_VAR 0 8
2467: PUSH
2468: LD_INT 1
2470: ARRAY
2471: PUSH
2472: LD_EXP 2
2476: PUSH
2477: LD_INT 1
2479: PLUS
2480: LESSEQUAL
2481: IFFALSE 2749
// begin if not Side_Nations [ side ] then
2483: LD_EXP 20
2487: PUSH
2488: LD_VAR 0 2
2492: ARRAY
2493: NOT
2494: IFFALSE 2510
// uc_nation := def [ 8 ] ;
2496: LD_ADDR_OWVAR 21
2500: PUSH
2501: LD_VAR 0 8
2505: PUSH
2506: LD_INT 8
2508: ARRAY
2509: ST_TO_ADDR
// if def [ 2 ] <= 4 then
2510: LD_VAR 0 8
2514: PUSH
2515: LD_INT 2
2517: ARRAY
2518: PUSH
2519: LD_INT 4
2521: LESSEQUAL
2522: IFFALSE 2534
// hc_importance := 105 else
2524: LD_ADDR_OWVAR 32
2528: PUSH
2529: LD_INT 105
2531: ST_TO_ADDR
2532: GO 2542
// hc_importance := 0 ;
2534: LD_ADDR_OWVAR 32
2538: PUSH
2539: LD_INT 0
2541: ST_TO_ADDR
// hc_gallery := multi ;
2542: LD_ADDR_OWVAR 33
2546: PUSH
2547: LD_STRING multi
2549: ST_TO_ADDR
// hc_face_number := def [ 2 ] ;
2550: LD_ADDR_OWVAR 34
2554: PUSH
2555: LD_VAR 0 8
2559: PUSH
2560: LD_INT 2
2562: ARRAY
2563: ST_TO_ADDR
// hc_name := def [ 3 ] ;
2564: LD_ADDR_OWVAR 26
2568: PUSH
2569: LD_VAR 0 8
2573: PUSH
2574: LD_INT 3
2576: ARRAY
2577: ST_TO_ADDR
// hc_class := def [ 4 ] ;
2578: LD_ADDR_OWVAR 28
2582: PUSH
2583: LD_VAR 0 8
2587: PUSH
2588: LD_INT 4
2590: ARRAY
2591: ST_TO_ADDR
// hc_sex := def [ 5 ] ;
2592: LD_ADDR_OWVAR 27
2596: PUSH
2597: LD_VAR 0 8
2601: PUSH
2602: LD_INT 5
2604: ARRAY
2605: ST_TO_ADDR
// hc_attr := def [ 6 ] ;
2606: LD_ADDR_OWVAR 29
2610: PUSH
2611: LD_VAR 0 8
2615: PUSH
2616: LD_INT 6
2618: ARRAY
2619: ST_TO_ADDR
// sk := [ ] ;
2620: LD_ADDR_VAR 0 4
2624: PUSH
2625: EMPTY
2626: ST_TO_ADDR
// bsk := [ ] ;
2627: LD_ADDR_VAR 0 5
2631: PUSH
2632: EMPTY
2633: ST_TO_ADDR
// for i := 1 to 4 do
2634: LD_ADDR_VAR 0 7
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_INT 4
2646: PUSH
2647: FOR_TO
2648: IFFALSE 2710
// begin c := def [ 7 ] [ i ] + level_bonus ;
2650: LD_ADDR_VAR 0 6
2654: PUSH
2655: LD_VAR 0 8
2659: PUSH
2660: LD_INT 7
2662: ARRAY
2663: PUSH
2664: LD_VAR 0 7
2668: ARRAY
2669: PUSH
2670: LD_EXP 42
2674: PLUS
2675: ST_TO_ADDR
// sk := sk ^ c ;
2676: LD_ADDR_VAR 0 4
2680: PUSH
2681: LD_VAR 0 4
2685: PUSH
2686: LD_VAR 0 6
2690: ADD
2691: ST_TO_ADDR
// bsk := bsk ^ c ;
2692: LD_ADDR_VAR 0 5
2696: PUSH
2697: LD_VAR 0 5
2701: PUSH
2702: LD_VAR 0 6
2706: ADD
2707: ST_TO_ADDR
// end ;
2708: GO 2647
2710: POP
2711: POP
// hc_basic_skills := bsk ;
2712: LD_ADDR_OWVAR 30
2716: PUSH
2717: LD_VAR 0 5
2721: ST_TO_ADDR
// hc_skills := sk ;
2722: LD_ADDR_OWVAR 31
2726: PUSH
2727: LD_VAR 0 4
2731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , ar , false ) ;
2732: CALL_OW 44
2736: PPUSH
2737: LD_VAR 0 1
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 49
// end ;
2749: GO 2460
2751: POP
2752: POP
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
2753: LD_EXP 10
2757: PUSH
2758: LD_INT 20
2760: PPUSH
2761: LD_VAR 0 2
2765: PPUSH
2766: CALL_OW 321
2770: PUSH
2771: LD_INT 1
2773: EQUAL
2774: AND
2775: IFFALSE 2792
// SetTech ( tech_SibDet , side , state_researched ) ;
2777: LD_INT 20
2779: PPUSH
2780: LD_VAR 0 2
2784: PPUSH
2785: LD_INT 2
2787: PPUSH
2788: CALL_OW 322
// SetTech ( tech_matdet , side , state_disabled ) ;
2792: LD_INT 7
2794: PPUSH
2795: LD_VAR 0 2
2799: PPUSH
2800: LD_INT 0
2802: PPUSH
2803: CALL_OW 322
// SetTech ( tech_matpred , side , state_disabled ) ;
2807: LD_INT 9
2809: PPUSH
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 322
// SetTech ( tech_sibfiss , side , state_disabled ) ;
2822: LD_INT 25
2824: PPUSH
2825: LD_VAR 0 2
2829: PPUSH
2830: LD_INT 0
2832: PPUSH
2833: CALL_OW 322
// end ;
2837: LD_VAR 0 3
2841: RET
// function prepare_apes ; var i , ape1 , ape2 ; begin
2842: LD_INT 0
2844: PPUSH
2845: PPUSH
2846: PPUSH
2847: PPUSH
// for i := 1 to napemen do
2848: LD_ADDR_VAR 0 2
2852: PUSH
2853: DOUBLE
2854: LD_INT 1
2856: DEC
2857: ST_TO_ADDR
2858: LD_EXP 47
2862: PUSH
2863: FOR_TO
2864: IFFALSE 3033
// begin uc_side = 0 ;
2866: LD_ADDR_OWVAR 20
2870: PUSH
2871: LD_INT 0
2873: ST_TO_ADDR
// uc_nation = nation_nature ;
2874: LD_ADDR_OWVAR 21
2878: PUSH
2879: LD_INT 0
2881: ST_TO_ADDR
// hc_class = class_apeman ;
2882: LD_ADDR_OWVAR 28
2886: PUSH
2887: LD_INT 12
2889: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
2890: LD_ADDR_OWVAR 31
2894: PUSH
2895: LD_INT 0
2897: PUSH
2898: LD_INT 0
2900: PUSH
2901: LD_INT 0
2903: PUSH
2904: LD_INT 0
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2913: LD_ADDR_OWVAR 29
2917: PUSH
2918: LD_INT 12
2920: PUSH
2921: LD_INT 10
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: ST_TO_ADDR
// hc_importance = 0 ;
2928: LD_ADDR_OWVAR 32
2932: PUSH
2933: LD_INT 0
2935: ST_TO_ADDR
// hc_agressivity = apemen [ i ] ;
2936: LD_ADDR_OWVAR 35
2940: PUSH
2941: LD_EXP 25
2945: PUSH
2946: LD_VAR 0 2
2950: ARRAY
2951: ST_TO_ADDR
// ape1 = CreateHuman ;
2952: LD_ADDR_VAR 0 3
2956: PUSH
2957: CALL_OW 44
2961: ST_TO_ADDR
// ape2 = CreateHuman ;
2962: LD_ADDR_VAR 0 4
2966: PUSH
2967: CALL_OW 44
2971: ST_TO_ADDR
// PlaceUnitArea ( ape1 , Apes , false ) ;
2972: LD_VAR 0 3
2976: PPUSH
2977: LD_INT 11
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL_OW 49
// PlaceUnitXY ( ape2 , GetX ( ape1 ) + dx , GetY ( ape1 ) + dy , false ) ;
2987: LD_VAR 0 4
2991: PPUSH
2992: LD_VAR 0 3
2996: PPUSH
2997: CALL_OW 250
3001: PUSH
3002: LD_EXP 30
3006: PLUS
3007: PPUSH
3008: LD_VAR 0 3
3012: PPUSH
3013: CALL_OW 251
3017: PUSH
3018: LD_EXP 31
3022: PLUS
3023: PPUSH
3024: LD_INT 0
3026: PPUSH
3027: CALL_OW 48
// end ;
3031: GO 2863
3033: POP
3034: POP
// end ;
3035: LD_VAR 0 1
3039: RET
// function prepare_teams ; var i ; begin
3040: LD_INT 0
3042: PPUSH
3043: PPUSH
// prepare_apes ;
3044: CALL 2842 0 0
// for i := 1 to side_positions do
3048: LD_ADDR_VAR 0 2
3052: PUSH
3053: DOUBLE
3054: LD_INT 1
3056: DEC
3057: ST_TO_ADDR
3058: LD_EXP 19
3062: PUSH
3063: FOR_TO
3064: IFFALSE 3126
// if Side_Positions [ i ] = 1 then
3066: LD_EXP 19
3070: PUSH
3071: LD_VAR 0 2
3075: ARRAY
3076: PUSH
3077: LD_INT 1
3079: EQUAL
3080: IFFALSE 3096
// prepare_team ( Stone1in , i ) else
3082: LD_INT 3
3084: PPUSH
3085: LD_VAR 0 2
3089: PPUSH
3090: CALL 2400 0 2
3094: GO 3124
// if Side_Positions [ i ] = 2 then
3096: LD_EXP 19
3100: PUSH
3101: LD_VAR 0 2
3105: ARRAY
3106: PUSH
3107: LD_INT 2
3109: EQUAL
3110: IFFALSE 3124
// prepare_team ( Stone2in , i ) ;
3112: LD_INT 5
3114: PPUSH
3115: LD_VAR 0 2
3119: PPUSH
3120: CALL 2400 0 2
3124: GO 3063
3126: POP
3127: POP
// end ;
3128: LD_VAR 0 1
3132: RET
// var i ; starting begin x1 = 28 ;
3133: LD_ADDR_EXP 26
3137: PUSH
3138: LD_INT 28
3140: ST_TO_ADDR
// y1 = 55 ;
3141: LD_ADDR_EXP 27
3145: PUSH
3146: LD_INT 55
3148: ST_TO_ADDR
// x2 = 100 ;
3149: LD_ADDR_EXP 28
3153: PUSH
3154: LD_INT 100
3156: ST_TO_ADDR
// y2 = 55 ;
3157: LD_ADDR_EXP 29
3161: PUSH
3162: LD_INT 55
3164: ST_TO_ADDR
// dx = x2 - x1 ;
3165: LD_ADDR_EXP 30
3169: PUSH
3170: LD_EXP 28
3174: PUSH
3175: LD_EXP 26
3179: MINUS
3180: ST_TO_ADDR
// dy = y2 - y1 ;
3181: LD_ADDR_EXP 31
3185: PUSH
3186: LD_EXP 29
3190: PUSH
3191: LD_EXP 27
3195: MINUS
3196: ST_TO_ADDR
// disable_prediction := true ;
3197: LD_ADDR_OWVAR 50
3201: PUSH
3202: LD_INT 1
3204: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
3205: CALL 0 0 0
// your_side := player_side ;
3209: LD_ADDR_OWVAR 2
3213: PUSH
3214: LD_EXP 15
3218: ST_TO_ADDR
// prepare_definitions ;
3219: CALL 1129 0 0
// prepare_teams ;
3223: CALL 3040 0 0
// prepare_map ;
3227: CALL 2075 0 0
// music_nat := Side_Nations [ your_side ] ;
3231: LD_ADDR_OWVAR 71
3235: PUSH
3236: LD_EXP 20
3240: PUSH
3241: LD_OWVAR 2
3245: ARRAY
3246: ST_TO_ADDR
// if Side_Positions [ your_side ] = 1 then
3247: LD_EXP 19
3251: PUSH
3252: LD_OWVAR 2
3256: ARRAY
3257: PUSH
3258: LD_INT 1
3260: EQUAL
3261: IFFALSE 3275
// CenterNowOnXY ( 74 , 130 ) else
3263: LD_INT 74
3265: PPUSH
3266: LD_INT 130
3268: PPUSH
3269: CALL_OW 86
3273: GO 3297
// CenterNowOnXY ( 74 + dx , 130 + dy ) ;
3275: LD_INT 74
3277: PUSH
3278: LD_EXP 30
3282: PLUS
3283: PPUSH
3284: LD_INT 130
3286: PUSH
3287: LD_EXP 31
3291: PLUS
3292: PPUSH
3293: CALL_OW 86
// end ; end_of_file
3297: END
// export function new_crate ( mat ) ; var coord ; begin
3298: LD_INT 0
3300: PPUSH
3301: PPUSH
// result := false ;
3302: LD_ADDR_VAR 0 2
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// coord := RandHexArea ( Land , false ) ;
3310: LD_ADDR_VAR 0 3
3314: PUSH
3315: LD_INT 8
3317: PPUSH
3318: LD_INT 0
3320: PPUSH
3321: CALL_OW 16
3325: ST_TO_ADDR
// CreateCratesXY ( 5 , coord [ 1 ] , coord [ 2 ] , false ) ;
3326: LD_INT 5
3328: PPUSH
3329: LD_VAR 0 3
3333: PUSH
3334: LD_INT 1
3336: ARRAY
3337: PPUSH
3338: LD_VAR 0 3
3342: PUSH
3343: LD_INT 2
3345: ARRAY
3346: PPUSH
3347: LD_INT 0
3349: PPUSH
3350: CALL_OW 54
// if GetResourceAmountXY ( coord [ 1 ] , coord [ 2 ] ) <> 5 then
3354: LD_VAR 0 3
3358: PUSH
3359: LD_INT 1
3361: ARRAY
3362: PPUSH
3363: LD_VAR 0 3
3367: PUSH
3368: LD_INT 2
3370: ARRAY
3371: PPUSH
3372: CALL_OW 284
3376: PUSH
3377: LD_INT 5
3379: NONEQUAL
3380: IFFALSE 3384
// exit ;
3382: GO 3654
// CreateCratesXY ( 5 , coord [ 1 ] + dx , coord [ 2 ] + dy , false ) ;
3384: LD_INT 5
3386: PPUSH
3387: LD_VAR 0 3
3391: PUSH
3392: LD_INT 1
3394: ARRAY
3395: PUSH
3396: LD_EXP 30
3400: PLUS
3401: PPUSH
3402: LD_VAR 0 3
3406: PUSH
3407: LD_INT 2
3409: ARRAY
3410: PUSH
3411: LD_EXP 31
3415: PLUS
3416: PPUSH
3417: LD_INT 0
3419: PPUSH
3420: CALL_OW 54
// if GetResourceAmountXY ( coord [ 1 ] + dx , coord [ 2 ] + dy ) <> 5 then
3424: LD_VAR 0 3
3428: PUSH
3429: LD_INT 1
3431: ARRAY
3432: PUSH
3433: LD_EXP 30
3437: PLUS
3438: PPUSH
3439: LD_VAR 0 3
3443: PUSH
3444: LD_INT 2
3446: ARRAY
3447: PUSH
3448: LD_EXP 31
3452: PLUS
3453: PPUSH
3454: CALL_OW 284
3458: PUSH
3459: LD_INT 5
3461: NONEQUAL
3462: IFFALSE 3491
// begin ChangeResourceAmountXY ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
3464: LD_VAR 0 3
3468: PUSH
3469: LD_INT 1
3471: ARRAY
3472: PPUSH
3473: LD_VAR 0 3
3477: PUSH
3478: LD_INT 2
3480: ARRAY
3481: PPUSH
3482: LD_INT 0
3484: PPUSH
3485: CALL_OW 285
// exit ;
3489: GO 3654
// end ; result := true ;
3491: LD_ADDR_VAR 0 2
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// if mat then
3499: LD_VAR 0 1
3503: IFFALSE 3635
// begin ChangeResourceAmountXY ( coord [ 1 ] , coord [ 2 ] , 0 ) ;
3505: LD_VAR 0 3
3509: PUSH
3510: LD_INT 1
3512: ARRAY
3513: PPUSH
3514: LD_VAR 0 3
3518: PUSH
3519: LD_INT 2
3521: ARRAY
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 285
// ChangeResourceAmountXY ( coord [ 1 ] + dx , coord [ 2 ] + dy , 0 ) ;
3530: LD_VAR 0 3
3534: PUSH
3535: LD_INT 1
3537: ARRAY
3538: PUSH
3539: LD_EXP 30
3543: PLUS
3544: PPUSH
3545: LD_VAR 0 3
3549: PUSH
3550: LD_INT 2
3552: ARRAY
3553: PUSH
3554: LD_EXP 31
3558: PLUS
3559: PPUSH
3560: LD_INT 0
3562: PPUSH
3563: CALL_OW 285
// CreateCratesXY ( 5 , coord [ 1 ] , coord [ 2 ] , true ) ;
3567: LD_INT 5
3569: PPUSH
3570: LD_VAR 0 3
3574: PUSH
3575: LD_INT 1
3577: ARRAY
3578: PPUSH
3579: LD_VAR 0 3
3583: PUSH
3584: LD_INT 2
3586: ARRAY
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 54
// CreateCratesXY ( 5 , coord [ 1 ] + dx , coord [ 2 ] + dy , true ) ;
3595: LD_INT 5
3597: PPUSH
3598: LD_VAR 0 3
3602: PUSH
3603: LD_INT 1
3605: ARRAY
3606: PUSH
3607: LD_EXP 30
3611: PLUS
3612: PPUSH
3613: LD_VAR 0 3
3617: PUSH
3618: LD_INT 2
3620: ARRAY
3621: PUSH
3622: LD_EXP 31
3626: PLUS
3627: PPUSH
3628: LD_INT 1
3630: PPUSH
3631: CALL_OW 54
// end ; crates := crates ^ [ coord ] ;
3635: LD_ADDR_EXP 32
3639: PUSH
3640: LD_EXP 32
3644: PUSH
3645: LD_VAR 0 3
3649: PUSH
3650: EMPTY
3651: LIST
3652: ADD
3653: ST_TO_ADDR
// end ;
3654: LD_VAR 0 2
3658: RET
// every 0 0$0.5 trigger crates do var cr , n1 , n2 , del ;
3659: LD_EXP 32
3663: IFFALSE 3914
3665: GO 3667
3667: DISABLE
3668: LD_INT 0
3670: PPUSH
3671: PPUSH
3672: PPUSH
3673: PPUSH
// begin del := [ ] ;
3674: LD_ADDR_VAR 0 4
3678: PUSH
3679: EMPTY
3680: ST_TO_ADDR
// for cr in crates do
3681: LD_ADDR_VAR 0 1
3685: PUSH
3686: LD_EXP 32
3690: PUSH
3691: FOR_IN
3692: IFFALSE 3895
// begin n1 := GetResourceAmountXY ( cr [ 1 ] , cr [ 2 ] ) ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: LD_VAR 0 1
3703: PUSH
3704: LD_INT 1
3706: ARRAY
3707: PPUSH
3708: LD_VAR 0 1
3712: PUSH
3713: LD_INT 2
3715: ARRAY
3716: PPUSH
3717: CALL_OW 284
3721: ST_TO_ADDR
// n2 := GetResourceAmountXY ( cr [ 1 ] + dx , cr [ 2 ] + dy ) ;
3722: LD_ADDR_VAR 0 3
3726: PUSH
3727: LD_VAR 0 1
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PUSH
3736: LD_EXP 30
3740: PLUS
3741: PPUSH
3742: LD_VAR 0 1
3746: PUSH
3747: LD_INT 2
3749: ARRAY
3750: PUSH
3751: LD_EXP 31
3755: PLUS
3756: PPUSH
3757: CALL_OW 284
3761: ST_TO_ADDR
// if n1 > n2 then
3762: LD_VAR 0 2
3766: PUSH
3767: LD_VAR 0 3
3771: GREATER
3772: IFFALSE 3803
// ChangeResourceAmountXY ( cr [ 1 ] , cr [ 2 ] , n2 ) else
3774: LD_VAR 0 1
3778: PUSH
3779: LD_INT 1
3781: ARRAY
3782: PPUSH
3783: LD_VAR 0 1
3787: PUSH
3788: LD_INT 2
3790: ARRAY
3791: PPUSH
3792: LD_VAR 0 3
3796: PPUSH
3797: CALL_OW 285
3801: GO 3854
// if n1 < n2 then
3803: LD_VAR 0 2
3807: PUSH
3808: LD_VAR 0 3
3812: LESS
3813: IFFALSE 3854
// ChangeResourceAmountXY ( cr [ 1 ] + dx , cr [ 2 ] + dy , n1 ) ;
3815: LD_VAR 0 1
3819: PUSH
3820: LD_INT 1
3822: ARRAY
3823: PUSH
3824: LD_EXP 30
3828: PLUS
3829: PPUSH
3830: LD_VAR 0 1
3834: PUSH
3835: LD_INT 2
3837: ARRAY
3838: PUSH
3839: LD_EXP 31
3843: PLUS
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: CALL_OW 285
// if ( n1 = 0 ) or ( n2 = 0 ) then
3854: LD_VAR 0 2
3858: PUSH
3859: LD_INT 0
3861: EQUAL
3862: PUSH
3863: LD_VAR 0 3
3867: PUSH
3868: LD_INT 0
3870: EQUAL
3871: OR
3872: IFFALSE 3893
// del := del ^ [ cr ] ;
3874: LD_ADDR_VAR 0 4
3878: PUSH
3879: LD_VAR 0 4
3883: PUSH
3884: LD_VAR 0 1
3888: PUSH
3889: EMPTY
3890: LIST
3891: ADD
3892: ST_TO_ADDR
// end ;
3893: GO 3691
3895: POP
3896: POP
// crates := crates diff del ;
3897: LD_ADDR_EXP 32
3901: PUSH
3902: LD_EXP 32
3906: PUSH
3907: LD_VAR 0 4
3911: DIFF
3912: ST_TO_ADDR
// enable ;
3913: ENABLE
// end ; end_of_file
3914: PPOPN 4
3916: END
// function set_strings ; var s ; begin
3917: LD_INT 0
3919: PPUSH
3920: PPUSH
// if time1 > 0 then
3921: LD_EXP 34
3925: PUSH
3926: LD_INT 0
3928: GREATER
3929: IFFALSE 4018
// begin display_strings := [ #timegate , ( time1 div 60 ) , ( time1 mod 60 ) ] ;
3931: LD_ADDR_OWVAR 47
3935: PUSH
3936: LD_STRING #timegate
3938: PUSH
3939: LD_EXP 34
3943: PUSH
3944: LD_INT 60
3946: DIV
3947: PUSH
3948: LD_EXP 34
3952: PUSH
3953: LD_INT 60
3955: MOD
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: ST_TO_ADDR
// if time1 < 2 * 60 then
3962: LD_EXP 34
3966: PUSH
3967: LD_INT 2
3969: PUSH
3970: LD_INT 60
3972: MUL
3973: LESS
3974: IFFALSE 4016
// if time1 mod 2 then
3976: LD_EXP 34
3980: PUSH
3981: LD_INT 2
3983: MOD
3984: IFFALSE 4002
// display_strings := display_strings ^ #opengate1 else
3986: LD_ADDR_OWVAR 47
3990: PUSH
3991: LD_OWVAR 47
3995: PUSH
3996: LD_STRING #opengate1
3998: ADD
3999: ST_TO_ADDR
4000: GO 4016
// display_strings := display_strings ^ #opengate2 ;
4002: LD_ADDR_OWVAR 47
4006: PUSH
4007: LD_OWVAR 47
4011: PUSH
4012: LD_STRING #opengate2
4014: ADD
4015: ST_TO_ADDR
// end else
4016: GO 4029
// display_strings := [ #gatefuture ] ;
4018: LD_ADDR_OWVAR 47
4022: PUSH
4023: LD_STRING #gatefuture
4025: PUSH
4026: EMPTY
4027: LIST
4028: ST_TO_ADDR
// display_strings := display_strings ^  ^ [ #stonehenge-score , Positions [ 1 ] , Positions [ 1 ] , LeftPoints , PointsToWin ] ^ [ #stonehenge-score , Positions [ 2 ] , Positions [ 2 ] , RightPoints , PointsToWin ] ;
4029: LD_ADDR_OWVAR 47
4033: PUSH
4034: LD_OWVAR 47
4038: PUSH
4039: LD_STRING 
4041: ADD
4042: PUSH
4043: LD_STRING #stonehenge-score
4045: PUSH
4046: LD_EXP 23
4050: PUSH
4051: LD_INT 1
4053: ARRAY
4054: PUSH
4055: LD_EXP 23
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PUSH
4064: LD_EXP 36
4068: PUSH
4069: LD_EXP 49
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: ADD
4081: PUSH
4082: LD_STRING #stonehenge-score
4084: PUSH
4085: LD_EXP 23
4089: PUSH
4090: LD_INT 2
4092: ARRAY
4093: PUSH
4094: LD_EXP 23
4098: PUSH
4099: LD_INT 2
4101: ARRAY
4102: PUSH
4103: LD_EXP 37
4107: PUSH
4108: LD_EXP 49
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: ADD
4120: ST_TO_ADDR
// end ;
4121: LD_VAR 0 1
4125: RET
// function teleport ( area1 , x1 , y1 , area2 , x2 , y2 , xm , ym ) ; var un , all , x , y ; begin
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
4131: PPUSH
4132: PPUSH
// all = FilterUnitsInArea ( area1 , [ f_not , [ f_type , unit_building ] , f_not , [ f_inside ] , f_not , [ f_driving ] ] ) ;
4133: LD_ADDR_VAR 0 11
4137: PUSH
4138: LD_VAR 0 1
4142: PPUSH
4143: LD_INT 3
4145: PUSH
4146: LD_INT 21
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: PUSH
4156: LD_INT 3
4158: PUSH
4159: LD_INT 54
4161: PUSH
4162: EMPTY
4163: LIST
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: LD_INT 55
4170: PUSH
4171: EMPTY
4172: LIST
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: PPUSH
4182: CALL_OW 70
4186: ST_TO_ADDR
// for un in all do
4187: LD_ADDR_VAR 0 10
4191: PUSH
4192: LD_VAR 0 11
4196: PUSH
4197: FOR_IN
4198: IFFALSE 4382
// begin SetCargo ( un , mat_cans , 0 ) ;
4200: LD_VAR 0 10
4204: PPUSH
4205: LD_INT 1
4207: PPUSH
4208: LD_INT 0
4210: PPUSH
4211: CALL_OW 290
// SetCargo ( un , mat_oil , 0 ) ;
4215: LD_VAR 0 10
4219: PPUSH
4220: LD_INT 2
4222: PPUSH
4223: LD_INT 0
4225: PPUSH
4226: CALL_OW 290
// SetCargo ( un , mat_siberit , 0 ) ;
4230: LD_VAR 0 10
4234: PPUSH
4235: LD_INT 3
4237: PPUSH
4238: LD_INT 0
4240: PPUSH
4241: CALL_OW 290
// if IsDrivenBy ( un ) then
4245: LD_VAR 0 10
4249: PPUSH
4250: CALL_OW 311
4254: IFFALSE 4301
// begin SetCargo ( un , mat_cans , 0 ) ;
4256: LD_VAR 0 10
4260: PPUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 0
4266: PPUSH
4267: CALL_OW 290
// SetCargo ( un , mat_oil , 0 ) ;
4271: LD_VAR 0 10
4275: PPUSH
4276: LD_INT 2
4278: PPUSH
4279: LD_INT 0
4281: PPUSH
4282: CALL_OW 290
// SetCargo ( un , mat_siberit , 0 ) ;
4286: LD_VAR 0 10
4290: PPUSH
4291: LD_INT 3
4293: PPUSH
4294: LD_INT 0
4296: PPUSH
4297: CALL_OW 290
// end ; x = GetX ( un ) - x1 + x2 ;
4301: LD_ADDR_VAR 0 12
4305: PUSH
4306: LD_VAR 0 10
4310: PPUSH
4311: CALL_OW 250
4315: PUSH
4316: LD_VAR 0 2
4320: MINUS
4321: PUSH
4322: LD_VAR 0 5
4326: PLUS
4327: ST_TO_ADDR
// y = GetY ( un ) - y1 + y2 ;
4328: LD_ADDR_VAR 0 13
4332: PUSH
4333: LD_VAR 0 10
4337: PPUSH
4338: CALL_OW 251
4342: PUSH
4343: LD_VAR 0 3
4347: MINUS
4348: PUSH
4349: LD_VAR 0 6
4353: PLUS
4354: ST_TO_ADDR
// TeleportUnit ( un , x , y , 0 , false ) ;
4355: LD_VAR 0 10
4359: PPUSH
4360: LD_VAR 0 12
4364: PPUSH
4365: LD_VAR 0 13
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: LD_INT 0
4375: PPUSH
4376: CALL_OW 483
// end ;
4380: GO 4197
4382: POP
4383: POP
// end ;
4384: LD_VAR 0 9
4388: RET
// function destroy_remaining_units ; var un ; begin
4389: LD_INT 0
4391: PPUSH
4392: PPUSH
// for un in all_units do
4393: LD_ADDR_VAR 0 2
4397: PUSH
4398: LD_OWVAR 3
4402: PUSH
4403: FOR_IN
4404: IFFALSE 4432
// if GetY ( un ) < 40 then
4406: LD_VAR 0 2
4410: PPUSH
4411: CALL_OW 251
4415: PUSH
4416: LD_INT 40
4418: LESS
4419: IFFALSE 4430
// KillUnit ( un ) ;
4421: LD_VAR 0 2
4425: PPUSH
4426: CALL_OW 66
4430: GO 4403
4432: POP
4433: POP
// end ;
4434: LD_VAR 0 1
4438: RET
// every 0 0$1 do var i ;
4439: GO 4441
4441: DISABLE
4442: LD_INT 0
4444: PPUSH
// begin enable ;
4445: ENABLE
// if time_index = 0 then
4446: LD_EXP 33
4450: PUSH
4451: LD_INT 0
4453: EQUAL
4454: IFFALSE 4492
// begin time_index := 1 ;
4456: LD_ADDR_EXP 33
4460: PUSH
4461: LD_INT 1
4463: ST_TO_ADDR
// time1 := interval div 0 0$1 ;
4464: LD_ADDR_EXP 34
4468: PUSH
4469: LD_EXP 48
4473: PUSH
4474: LD_INT 35
4476: DIV
4477: ST_TO_ADDR
// time2 := 0 ;
4478: LD_ADDR_EXP 35
4482: PUSH
4483: LD_INT 0
4485: ST_TO_ADDR
// set_strings ;
4486: CALL 3917 0 0
// exit ;
4490: GO 4785
// end ; if ( time1 = 0 ) and ( time2 = 0 ) then
4492: LD_EXP 34
4496: PUSH
4497: LD_INT 0
4499: EQUAL
4500: PUSH
4501: LD_EXP 35
4505: PUSH
4506: LD_INT 0
4508: EQUAL
4509: AND
4510: IFFALSE 4515
// begin disable ;
4512: DISABLE
// exit ;
4513: GO 4785
// end ; if time1 > 0 then
4515: LD_EXP 34
4519: PUSH
4520: LD_INT 0
4522: GREATER
4523: IFFALSE 4743
// begin time1 := time1 - 1 ;
4525: LD_ADDR_EXP 34
4529: PUSH
4530: LD_EXP 34
4534: PUSH
4535: LD_INT 1
4537: MINUS
4538: ST_TO_ADDR
// set_strings ;
4539: CALL 3917 0 0
// if time1 = 0 then
4543: LD_EXP 34
4547: PUSH
4548: LD_INT 0
4550: EQUAL
4551: IFFALSE 4743
// begin prepare_artefact ;
4553: CALL 5070 0 0
// for i = 1 to side_positions do
4557: LD_ADDR_VAR 0 1
4561: PUSH
4562: DOUBLE
4563: LD_INT 1
4565: DEC
4566: ST_TO_ADDR
4567: LD_EXP 19
4571: PUSH
4572: FOR_TO
4573: IFFALSE 4601
// if side_positions [ i ] then
4575: LD_EXP 19
4579: PUSH
4580: LD_VAR 0 1
4584: ARRAY
4585: IFFALSE 4599
// begin RevealFogArea ( i , ArtArea ) ;
4587: LD_VAR 0 1
4591: PPUSH
4592: LD_INT 9
4594: PPUSH
4595: CALL_OW 332
// end ;
4599: GO 4572
4601: POP
4602: POP
// teleport ( Stone1in , 67 , 122 , Stone1out , 28 , 15 , 51 , 32 ) ;
4603: LD_INT 3
4605: PPUSH
4606: LD_INT 67
4608: PPUSH
4609: LD_INT 122
4611: PPUSH
4612: LD_INT 4
4614: PPUSH
4615: LD_INT 28
4617: PPUSH
4618: LD_INT 15
4620: PPUSH
4621: LD_INT 51
4623: PPUSH
4624: LD_INT 32
4626: PPUSH
4627: CALL 4126 0 8
// teleport ( Stone2in , 139 , 122 , Stone2out , 120 , 15 , 117 , 32 ) ;
4631: LD_INT 5
4633: PPUSH
4634: LD_INT 139
4636: PPUSH
4637: LD_INT 122
4639: PPUSH
4640: LD_INT 6
4642: PPUSH
4643: LD_INT 120
4645: PPUSH
4646: LD_INT 15
4648: PPUSH
4649: LD_INT 117
4651: PPUSH
4652: LD_INT 32
4654: PPUSH
4655: CALL 4126 0 8
// if Side_Positions [ your_side ] = 1 then
4659: LD_EXP 19
4663: PUSH
4664: LD_OWVAR 2
4668: ARRAY
4669: PUSH
4670: LD_INT 1
4672: EQUAL
4673: IFFALSE 4687
// CenterOnXY ( 28 , 15 ) else
4675: LD_INT 28
4677: PPUSH
4678: LD_INT 15
4680: PPUSH
4681: CALL_OW 84
4685: GO 4697
// CenterOnXY ( 120 , 15 ) ;
4687: LD_INT 120
4689: PPUSH
4690: LD_INT 15
4692: PPUSH
4693: CALL_OW 84
// time2 := interval div 0 0$1 - 5 ;
4697: LD_ADDR_EXP 35
4701: PUSH
4702: LD_EXP 48
4706: PUSH
4707: LD_INT 35
4709: DIV
4710: PUSH
4711: LD_INT 5
4713: MINUS
4714: ST_TO_ADDR
// time_index := time_index + 1 ;
4715: LD_ADDR_EXP 33
4719: PUSH
4720: LD_EXP 33
4724: PUSH
4725: LD_INT 1
4727: PLUS
4728: ST_TO_ADDR
// time1 := interval div 0 0$1 ;
4729: LD_ADDR_EXP 34
4733: PUSH
4734: LD_EXP 48
4738: PUSH
4739: LD_INT 35
4741: DIV
4742: ST_TO_ADDR
// end ; end ; if time2 > 0 then
4743: LD_EXP 35
4747: PUSH
4748: LD_INT 0
4750: GREATER
4751: IFFALSE 4781
// begin time2 := time2 - 1 ;
4753: LD_ADDR_EXP 35
4757: PUSH
4758: LD_EXP 35
4762: PUSH
4763: LD_INT 1
4765: MINUS
4766: ST_TO_ADDR
// if time2 = 0 then
4767: LD_EXP 35
4771: PUSH
4772: LD_INT 0
4774: EQUAL
4775: IFFALSE 4781
// destroy_remaining_units ;
4777: CALL 4389 0 0
// end ; set_strings ;
4781: CALL 3917 0 0
// end ; end_of_file
4785: PPOPN 1
4787: END
// function unit_with_artefact ( ar , side ) ; var un ; begin
4788: LD_INT 0
4790: PPUSH
4791: PPUSH
// for un in FilterUnitsInArea ( ar , [ f_side , side ] ) do
4792: LD_ADDR_VAR 0 4
4796: PUSH
4797: LD_VAR 0 1
4801: PPUSH
4802: LD_INT 22
4804: PUSH
4805: LD_VAR 0 2
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PPUSH
4814: CALL_OW 70
4818: PUSH
4819: FOR_IN
4820: IFFALSE 4848
// if GetCargo ( un , mat_artefact ) then
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_INT 4
4829: PPUSH
4830: CALL_OW 289
4834: IFFALSE 4846
// result := un ;
4836: LD_ADDR_VAR 0 3
4840: PUSH
4841: LD_VAR 0 4
4845: ST_TO_ADDR
4846: GO 4819
4848: POP
4849: POP
// end ;
4850: LD_VAR 0 3
4854: RET
// every 0 0$1 do var i , un ;
4855: GO 4857
4857: DISABLE
4858: LD_INT 0
4860: PPUSH
4861: PPUSH
// begin for i := 1 to Side_Positions do
4862: LD_ADDR_VAR 0 1
4866: PUSH
4867: DOUBLE
4868: LD_INT 1
4870: DEC
4871: ST_TO_ADDR
4872: LD_EXP 19
4876: PUSH
4877: FOR_TO
4878: IFFALSE 5064
// if Side_Positions [ i ] = 1 then
4880: LD_EXP 19
4884: PUSH
4885: LD_VAR 0 1
4889: ARRAY
4890: PUSH
4891: LD_INT 1
4893: EQUAL
4894: IFFALSE 4972
// begin un := unit_with_artefact ( Stone1out , i ) ;
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: LD_INT 4
4903: PPUSH
4904: LD_VAR 0 1
4908: PPUSH
4909: CALL 4788 0 2
4913: ST_TO_ADDR
// if un then
4914: LD_VAR 0 2
4918: IFFALSE 4970
// begin TeleportUnit ( un , 74 , 129 , 8 , true ) ;
4920: LD_VAR 0 2
4924: PPUSH
4925: LD_INT 74
4927: PPUSH
4928: LD_INT 129
4930: PPUSH
4931: LD_INT 8
4933: PPUSH
4934: LD_INT 1
4936: PPUSH
4937: CALL_OW 483
// SetCargo ( un , mat_siberit , 0 ) ;
4941: LD_VAR 0 2
4945: PPUSH
4946: LD_INT 3
4948: PPUSH
4949: LD_INT 0
4951: PPUSH
4952: CALL_OW 290
// LeftPoints := LeftPoints + 1 ;
4956: LD_ADDR_EXP 36
4960: PUSH
4961: LD_EXP 36
4965: PUSH
4966: LD_INT 1
4968: PLUS
4969: ST_TO_ADDR
// end ; end else
4970: GO 5062
// if Side_Positions [ i ] = 2 then
4972: LD_EXP 19
4976: PUSH
4977: LD_VAR 0 1
4981: ARRAY
4982: PUSH
4983: LD_INT 2
4985: EQUAL
4986: IFFALSE 5062
// begin un := unit_with_artefact ( Stone2out , i ) ;
4988: LD_ADDR_VAR 0 2
4992: PUSH
4993: LD_INT 6
4995: PPUSH
4996: LD_VAR 0 1
5000: PPUSH
5001: CALL 4788 0 2
5005: ST_TO_ADDR
// if un then
5006: LD_VAR 0 2
5010: IFFALSE 5062
// begin TeleportUnit ( un , 146 , 129 , 8 , true ) ;
5012: LD_VAR 0 2
5016: PPUSH
5017: LD_INT 146
5019: PPUSH
5020: LD_INT 129
5022: PPUSH
5023: LD_INT 8
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 483
// SetCargo ( un , mat_siberit , 0 ) ;
5033: LD_VAR 0 2
5037: PPUSH
5038: LD_INT 3
5040: PPUSH
5041: LD_INT 0
5043: PPUSH
5044: CALL_OW 290
// RightPoints := RightPoints + 1 ;
5048: LD_ADDR_EXP 37
5052: PUSH
5053: LD_EXP 37
5057: PUSH
5058: LD_INT 1
5060: PLUS
5061: ST_TO_ADDR
// end ; end ;
5062: GO 4877
5064: POP
5065: POP
// enable ;
5066: ENABLE
// end ;
5067: PPOPN 2
5069: END
// export function prepare_artefact ; begin
5070: LD_INT 0
5072: PPUSH
// EraseResourceArea ( Battle , mat_artefact ) ;
5073: LD_INT 10
5075: PPUSH
5076: LD_INT 4
5078: PPUSH
5079: CALL_OW 286
// CreateResourcesXY ( mat_artefact , 1 , 88 , 36 , false ) ;
5083: LD_INT 4
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: LD_INT 88
5091: PPUSH
5092: LD_INT 36
5094: PPUSH
5095: LD_INT 0
5097: PPUSH
5098: CALL_OW 58
// artu := 0 ;
5102: LD_ADDR_EXP 40
5106: PUSH
5107: LD_INT 0
5109: ST_TO_ADDR
// artx := 88 ;
5110: LD_ADDR_EXP 38
5114: PUSH
5115: LD_INT 88
5117: ST_TO_ADDR
// arty := 36 ;
5118: LD_ADDR_EXP 39
5122: PUSH
5123: LD_INT 36
5125: ST_TO_ADDR
// end ; end_of_file
5126: LD_VAR 0 1
5130: RET
// every 0 0$5 + 0 0$1.1 do var d ;
5131: GO 5133
5133: DISABLE
5134: LD_INT 0
5136: PPUSH
// begin case tick - 1 1$00 of 1 .. 1 1$0 :
5137: LD_OWVAR 1
5141: PUSH
5142: LD_INT 2100
5144: MINUS
5145: PUSH
5146: LD_INT 1
5148: DOUBLE
5149: GREATEREQUAL
5150: IFFALSE 5158
5152: LD_INT 2100
5154: DOUBLE
5155: LESSEQUAL
5156: IFTRUE 5160
5158: GO 5171
5160: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5161: LD_ADDR_VAR 0 1
5165: PUSH
5166: LD_INT 150
5168: ST_TO_ADDR
5169: GO 5383
5171: LD_INT 2100
5173: PUSH
5174: LD_INT 1
5176: PLUS
5177: DOUBLE
5178: GREATEREQUAL
5179: IFFALSE 5187
5181: LD_INT 10500
5183: DOUBLE
5184: LESSEQUAL
5185: IFTRUE 5189
5187: GO 5200
5189: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5190: LD_ADDR_VAR 0 1
5194: PUSH
5195: LD_INT 100
5197: ST_TO_ADDR
5198: GO 5383
5200: LD_INT 10500
5202: PUSH
5203: LD_INT 1
5205: PLUS
5206: DOUBLE
5207: GREATEREQUAL
5208: IFFALSE 5216
5210: LD_INT 21000
5212: DOUBLE
5213: LESSEQUAL
5214: IFTRUE 5218
5216: GO 5229
5218: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5219: LD_ADDR_VAR 0 1
5223: PUSH
5224: LD_INT 90
5226: ST_TO_ADDR
5227: GO 5383
5229: LD_INT 21000
5231: PUSH
5232: LD_INT 1
5234: PLUS
5235: DOUBLE
5236: GREATEREQUAL
5237: IFFALSE 5245
5239: LD_INT 42000
5241: DOUBLE
5242: LESSEQUAL
5243: IFTRUE 5247
5245: GO 5258
5247: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5248: LD_ADDR_VAR 0 1
5252: PUSH
5253: LD_INT 70
5255: ST_TO_ADDR
5256: GO 5383
5258: LD_INT 42000
5260: PUSH
5261: LD_INT 1
5263: PLUS
5264: DOUBLE
5265: GREATEREQUAL
5266: IFFALSE 5274
5268: LD_INT 63000
5270: DOUBLE
5271: LESSEQUAL
5272: IFTRUE 5276
5274: GO 5287
5276: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5277: LD_ADDR_VAR 0 1
5281: PUSH
5282: LD_INT 60
5284: ST_TO_ADDR
5285: GO 5383
5287: LD_INT 63000
5289: PUSH
5290: LD_INT 1
5292: PLUS
5293: DOUBLE
5294: GREATEREQUAL
5295: IFFALSE 5303
5297: LD_INT 105000
5299: DOUBLE
5300: LESSEQUAL
5301: IFTRUE 5305
5303: GO 5316
5305: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5306: LD_ADDR_VAR 0 1
5310: PUSH
5311: LD_INT 35
5313: ST_TO_ADDR
5314: GO 5383
5316: LD_INT 105000
5318: PUSH
5319: LD_INT 1
5321: PLUS
5322: DOUBLE
5323: GREATEREQUAL
5324: IFFALSE 5332
5326: LD_INT 630000
5328: DOUBLE
5329: LESSEQUAL
5330: IFTRUE 5334
5332: GO 5345
5334: POP
// d := 20 ; 300 300$0 + 1 .. 900 900$0 :
5335: LD_ADDR_VAR 0 1
5339: PUSH
5340: LD_INT 20
5342: ST_TO_ADDR
5343: GO 5383
5345: LD_INT 630000
5347: PUSH
5348: LD_INT 1
5350: PLUS
5351: DOUBLE
5352: GREATEREQUAL
5353: IFFALSE 5361
5355: LD_INT 1890000
5357: DOUBLE
5358: LESSEQUAL
5359: IFTRUE 5363
5361: GO 5374
5363: POP
// d := 5 ; else
5364: LD_ADDR_VAR 0 1
5368: PUSH
5369: LD_INT 5
5371: ST_TO_ADDR
5372: GO 5383
5374: POP
// d := 0 ; end ;
5375: LD_ADDR_VAR 0 1
5379: PUSH
5380: LD_INT 0
5382: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
5383: LD_INT 1
5385: PPUSH
5386: LD_INT 10000
5388: PPUSH
5389: CALL_OW 12
5393: PUSH
5394: LD_VAR 0 1
5398: PUSH
5399: LD_EXP 43
5403: MUL
5404: PUSH
5405: LD_INT 2
5407: DIV
5408: LESSEQUAL
5409: IFFALSE 5433
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5411: LD_INT 1
5413: PPUSH
5414: LD_INT 140
5416: PPUSH
5417: CALL_OW 12
5421: PPUSH
5422: CALL_OW 67
// new_crate ( true ) ;
5426: LD_INT 1
5428: PPUSH
5429: CALL 3298 0 1
// end ; enable ;
5433: ENABLE
// end ; end_of_file
5434: PPOPN 1
5436: END
// every 0 0$1 do var u1 , u2 , i ;
5437: GO 5439
5439: DISABLE
5440: LD_INT 0
5442: PPUSH
5443: PPUSH
5444: PPUSH
// begin u1 := [ ] ;
5445: LD_ADDR_VAR 0 1
5449: PUSH
5450: EMPTY
5451: ST_TO_ADDR
// u2 := [ ] ;
5452: LD_ADDR_VAR 0 2
5456: PUSH
5457: EMPTY
5458: ST_TO_ADDR
// for i := 1 to side_positions do
5459: LD_ADDR_VAR 0 3
5463: PUSH
5464: DOUBLE
5465: LD_INT 1
5467: DEC
5468: ST_TO_ADDR
5469: LD_EXP 19
5473: PUSH
5474: FOR_TO
5475: IFFALSE 5639
// if side_positions [ i ] = 1 then
5477: LD_EXP 19
5481: PUSH
5482: LD_VAR 0 3
5486: ARRAY
5487: PUSH
5488: LD_INT 1
5490: EQUAL
5491: IFFALSE 5558
// if not multiplayer or MultiplayerSideAlive ( i ) then
5493: LD_OWVAR 4
5497: NOT
5498: PUSH
5499: LD_VAR 0 3
5503: PPUSH
5504: CALL_OW 108
5508: OR
5509: IFFALSE 5549
// u1 := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , i ] ] ) else
5511: LD_ADDR_VAR 0 1
5515: PUSH
5516: LD_INT 21
5518: PUSH
5519: LD_INT 1
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PUSH
5526: LD_INT 22
5528: PUSH
5529: LD_VAR 0 3
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 69
5546: ST_TO_ADDR
5547: GO 5556
// u1 := [ ] else
5549: LD_ADDR_VAR 0 1
5553: PUSH
5554: EMPTY
5555: ST_TO_ADDR
5556: GO 5637
// if side_positions [ i ] = 2 then
5558: LD_EXP 19
5562: PUSH
5563: LD_VAR 0 3
5567: ARRAY
5568: PUSH
5569: LD_INT 2
5571: EQUAL
5572: IFFALSE 5637
// if not multiplayer or MultiplayerSideAlive ( i ) then
5574: LD_OWVAR 4
5578: NOT
5579: PUSH
5580: LD_VAR 0 3
5584: PPUSH
5585: CALL_OW 108
5589: OR
5590: IFFALSE 5630
// u2 := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , i ] ] ) else
5592: LD_ADDR_VAR 0 2
5596: PUSH
5597: LD_INT 21
5599: PUSH
5600: LD_INT 1
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PUSH
5607: LD_INT 22
5609: PUSH
5610: LD_VAR 0 3
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PPUSH
5623: CALL_OW 69
5627: ST_TO_ADDR
5628: GO 5637
// u2 := [ ] ;
5630: LD_ADDR_VAR 0 2
5634: PUSH
5635: EMPTY
5636: ST_TO_ADDR
5637: GO 5474
5639: POP
5640: POP
// if not u1 and not u2 then
5641: LD_VAR 0 1
5645: NOT
5646: PUSH
5647: LD_VAR 0 2
5651: NOT
5652: AND
5653: IFFALSE 5683
// begin wait ( 0 0$3 ) ;
5655: LD_INT 105
5657: PPUSH
5658: CALL_OW 67
// if IAmServer then
5662: CALL_OW 518
5666: IFFALSE 5675
// wait ( 0 0$1 ) ;
5668: LD_INT 35
5670: PPUSH
5671: CALL_OW 67
// YouLostInMultiplayer ;
5675: CALL_OW 107
// exit ;
5679: GO 5826
// end else
5681: GO 5825
// if ( u1 = 0 ) or ( RightPoints = PointsToWin ) then
5683: LD_VAR 0 1
5687: PUSH
5688: LD_INT 0
5690: EQUAL
5691: PUSH
5692: LD_EXP 37
5696: PUSH
5697: LD_EXP 49
5701: EQUAL
5702: OR
5703: IFFALSE 5755
// begin wait ( 0 0$5 ) ;
5705: LD_INT 175
5707: PPUSH
5708: CALL_OW 67
// if IAmServer then
5712: CALL_OW 518
5716: IFFALSE 5725
// wait ( 0 0$1 ) ;
5718: LD_INT 35
5720: PPUSH
5721: CALL_OW 67
// if side_positions [ your_side ] = 1 then
5725: LD_EXP 19
5729: PUSH
5730: LD_OWVAR 2
5734: ARRAY
5735: PUSH
5736: LD_INT 1
5738: EQUAL
5739: IFFALSE 5747
// YouLostInMultiplayer else
5741: CALL_OW 107
5745: GO 5751
// YouWinInMultiplayer ;
5747: CALL_OW 106
// exit ;
5751: GO 5826
// end else
5753: GO 5825
// if ( u2 = 0 ) or ( LeftPoints = PointsToWin ) then
5755: LD_VAR 0 2
5759: PUSH
5760: LD_INT 0
5762: EQUAL
5763: PUSH
5764: LD_EXP 36
5768: PUSH
5769: LD_EXP 49
5773: EQUAL
5774: OR
5775: IFFALSE 5825
// begin wait ( 0 0$5 ) ;
5777: LD_INT 175
5779: PPUSH
5780: CALL_OW 67
// if IAmServer then
5784: CALL_OW 518
5788: IFFALSE 5797
// wait ( 0 0$1 ) ;
5790: LD_INT 35
5792: PPUSH
5793: CALL_OW 67
// if side_positions [ your_side ] = 2 then
5797: LD_EXP 19
5801: PUSH
5802: LD_OWVAR 2
5806: ARRAY
5807: PUSH
5808: LD_INT 2
5810: EQUAL
5811: IFFALSE 5819
// YouLostInMultiplayer else
5813: CALL_OW 107
5817: GO 5823
// YouWinInMultiplayer ;
5819: CALL_OW 106
// exit ;
5823: GO 5826
// end ; enable ;
5825: ENABLE
// end ; end_of_file
5826: PPOPN 3
5828: END
// export function SetMpTechs ( ) ; var side , i ; begin
5829: LD_INT 0
5831: PPUSH
5832: PPUSH
5833: PPUSH
// for side = 1 to 8 do
5834: LD_ADDR_VAR 0 2
5838: PUSH
5839: DOUBLE
5840: LD_INT 1
5842: DEC
5843: ST_TO_ADDR
5844: LD_INT 8
5846: PUSH
5847: FOR_TO
5848: IFFALSE 5969
// begin for i = 1 to 72 do
5850: LD_ADDR_VAR 0 3
5854: PUSH
5855: DOUBLE
5856: LD_INT 1
5858: DEC
5859: ST_TO_ADDR
5860: LD_INT 72
5862: PUSH
5863: FOR_TO
5864: IFFALSE 5895
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
5866: LD_VAR 0 3
5870: PPUSH
5871: LD_VAR 0 2
5875: PPUSH
5876: LD_INT 0
5878: PPUSH
5879: LD_VAR 0 3
5883: PPUSH
5884: CALL_OW 565
5888: PPUSH
5889: CALL_OW 322
5893: GO 5863
5895: POP
5896: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
5897: LD_INT 73
5899: PPUSH
5900: LD_VAR 0 2
5904: PPUSH
5905: LD_INT 0
5907: PPUSH
5908: LD_INT 25
5910: PPUSH
5911: CALL_OW 565
5915: PPUSH
5916: CALL_OW 322
// for i = 0 to 40 do
5920: LD_ADDR_VAR 0 3
5924: PUSH
5925: DOUBLE
5926: LD_INT 0
5928: DEC
5929: ST_TO_ADDR
5930: LD_INT 40
5932: PUSH
5933: FOR_TO
5934: IFFALSE 5965
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
5936: LD_VAR 0 3
5940: PPUSH
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_INT 1
5948: PPUSH
5949: LD_VAR 0 3
5953: PPUSH
5954: CALL_OW 565
5958: PPUSH
5959: CALL_OW 324
5963: GO 5933
5965: POP
5966: POP
// end ;
5967: GO 5847
5969: POP
5970: POP
// end ;
5971: LD_VAR 0 1
5975: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
5976: LD_INT 0
5978: PPUSH
5979: PPUSH
5980: PPUSH
// for side = 1 to 8 do
5981: LD_ADDR_VAR 0 3
5985: PUSH
5986: DOUBLE
5987: LD_INT 1
5989: DEC
5990: ST_TO_ADDR
5991: LD_INT 8
5993: PUSH
5994: FOR_TO
5995: IFFALSE 9991
// begin for i = 1 to 73 do
5997: LD_ADDR_VAR 0 4
6001: PUSH
6002: DOUBLE
6003: LD_INT 1
6005: DEC
6006: ST_TO_ADDR
6007: LD_INT 73
6009: PUSH
6010: FOR_TO
6011: IFFALSE 6032
// SetTech ( i , side , state_disabled ) ;
6013: LD_VAR 0 4
6017: PPUSH
6018: LD_VAR 0 3
6022: PPUSH
6023: LD_INT 0
6025: PPUSH
6026: CALL_OW 322
6030: GO 6010
6032: POP
6033: POP
// for i = 0 to 40 do
6034: LD_ADDR_VAR 0 4
6038: PUSH
6039: DOUBLE
6040: LD_INT 0
6042: DEC
6043: ST_TO_ADDR
6044: LD_INT 40
6046: PUSH
6047: FOR_TO
6048: IFFALSE 6069
// SetRestrict ( i , side , false ) ;
6050: LD_VAR 0 4
6054: PPUSH
6055: LD_VAR 0 3
6059: PPUSH
6060: LD_INT 0
6062: PPUSH
6063: CALL_OW 324
6067: GO 6047
6069: POP
6070: POP
// case level of 1 :
6071: LD_VAR 0 1
6075: PUSH
6076: LD_INT 1
6078: DOUBLE
6079: EQUAL
6080: IFTRUE 6084
6082: GO 6237
6084: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
6085: LD_INT 35
6087: PPUSH
6088: LD_VAR 0 3
6092: PPUSH
6093: LD_INT 1
6095: PPUSH
6096: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
6100: LD_INT 45
6102: PPUSH
6103: LD_VAR 0 3
6107: PPUSH
6108: LD_INT 1
6110: PPUSH
6111: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
6115: LD_INT 46
6117: PPUSH
6118: LD_VAR 0 3
6122: PPUSH
6123: LD_INT 1
6125: PPUSH
6126: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
6130: LD_INT 47
6132: PPUSH
6133: LD_VAR 0 3
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
6145: LD_INT 0
6147: PPUSH
6148: LD_VAR 0 3
6152: PPUSH
6153: LD_INT 1
6155: PPUSH
6156: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
6160: LD_INT 2
6162: PPUSH
6163: LD_VAR 0 3
6167: PPUSH
6168: LD_INT 1
6170: PPUSH
6171: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
6175: LD_INT 4
6177: PPUSH
6178: LD_VAR 0 3
6182: PPUSH
6183: LD_INT 1
6185: PPUSH
6186: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
6190: LD_INT 6
6192: PPUSH
6193: LD_VAR 0 3
6197: PPUSH
6198: LD_INT 1
6200: PPUSH
6201: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
6205: LD_INT 29
6207: PPUSH
6208: LD_VAR 0 3
6212: PPUSH
6213: LD_INT 1
6215: PPUSH
6216: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
6220: LD_INT 31
6222: PPUSH
6223: LD_VAR 0 3
6227: PPUSH
6228: LD_INT 1
6230: PPUSH
6231: CALL_OW 324
// end ; 2 :
6235: GO 9989
6237: LD_INT 2
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6245
6243: GO 6443
6245: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
6246: LD_INT 35
6248: PPUSH
6249: LD_VAR 0 3
6253: PPUSH
6254: LD_INT 1
6256: PPUSH
6257: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
6261: LD_INT 45
6263: PPUSH
6264: LD_VAR 0 3
6268: PPUSH
6269: LD_INT 1
6271: PPUSH
6272: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
6276: LD_INT 46
6278: PPUSH
6279: LD_VAR 0 3
6283: PPUSH
6284: LD_INT 1
6286: PPUSH
6287: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
6291: LD_INT 47
6293: PPUSH
6294: LD_VAR 0 3
6298: PPUSH
6299: LD_INT 1
6301: PPUSH
6302: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
6306: LD_INT 1
6308: PPUSH
6309: LD_VAR 0 3
6313: PPUSH
6314: LD_INT 1
6316: PPUSH
6317: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
6321: LD_INT 2
6323: PPUSH
6324: LD_VAR 0 3
6328: PPUSH
6329: LD_INT 1
6331: PPUSH
6332: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
6336: LD_INT 11
6338: PPUSH
6339: LD_VAR 0 3
6343: PPUSH
6344: LD_INT 1
6346: PPUSH
6347: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
6351: LD_INT 0
6353: PPUSH
6354: LD_VAR 0 3
6358: PPUSH
6359: LD_INT 1
6361: PPUSH
6362: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
6366: LD_INT 2
6368: PPUSH
6369: LD_VAR 0 3
6373: PPUSH
6374: LD_INT 1
6376: PPUSH
6377: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
6381: LD_INT 4
6383: PPUSH
6384: LD_VAR 0 3
6388: PPUSH
6389: LD_INT 1
6391: PPUSH
6392: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
6396: LD_INT 6
6398: PPUSH
6399: LD_VAR 0 3
6403: PPUSH
6404: LD_INT 1
6406: PPUSH
6407: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
6411: LD_INT 29
6413: PPUSH
6414: LD_VAR 0 3
6418: PPUSH
6419: LD_INT 1
6421: PPUSH
6422: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
6426: LD_INT 31
6428: PPUSH
6429: LD_VAR 0 3
6433: PPUSH
6434: LD_INT 1
6436: PPUSH
6437: CALL_OW 324
// end ; 3 :
6441: GO 9989
6443: LD_INT 3
6445: DOUBLE
6446: EQUAL
6447: IFTRUE 6451
6449: GO 6904
6451: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
6452: LD_INT 35
6454: PPUSH
6455: LD_VAR 0 3
6459: PPUSH
6460: LD_INT 1
6462: PPUSH
6463: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
6467: LD_INT 45
6469: PPUSH
6470: LD_VAR 0 3
6474: PPUSH
6475: LD_INT 1
6477: PPUSH
6478: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
6482: LD_INT 46
6484: PPUSH
6485: LD_VAR 0 3
6489: PPUSH
6490: LD_INT 1
6492: PPUSH
6493: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
6497: LD_INT 47
6499: PPUSH
6500: LD_VAR 0 3
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
6512: LD_INT 1
6514: PPUSH
6515: LD_VAR 0 3
6519: PPUSH
6520: LD_INT 1
6522: PPUSH
6523: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
6527: LD_INT 2
6529: PPUSH
6530: LD_VAR 0 3
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
6542: LD_INT 11
6544: PPUSH
6545: LD_VAR 0 3
6549: PPUSH
6550: LD_INT 1
6552: PPUSH
6553: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
6557: LD_INT 48
6559: PPUSH
6560: LD_VAR 0 3
6564: PPUSH
6565: LD_INT 1
6567: PPUSH
6568: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
6572: LD_INT 69
6574: PPUSH
6575: LD_VAR 0 3
6579: PPUSH
6580: LD_INT 1
6582: PPUSH
6583: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
6587: LD_INT 39
6589: PPUSH
6590: LD_VAR 0 3
6594: PPUSH
6595: LD_INT 1
6597: PPUSH
6598: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
6602: LD_INT 43
6604: PPUSH
6605: LD_VAR 0 3
6609: PPUSH
6610: LD_INT 1
6612: PPUSH
6613: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
6617: LD_INT 51
6619: PPUSH
6620: LD_VAR 0 3
6624: PPUSH
6625: LD_INT 1
6627: PPUSH
6628: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
6632: LD_INT 6
6634: PPUSH
6635: LD_VAR 0 3
6639: PPUSH
6640: LD_INT 1
6642: PPUSH
6643: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
6647: LD_INT 0
6649: PPUSH
6650: LD_VAR 0 3
6654: PPUSH
6655: LD_INT 1
6657: PPUSH
6658: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
6662: LD_INT 2
6664: PPUSH
6665: LD_VAR 0 3
6669: PPUSH
6670: LD_INT 1
6672: PPUSH
6673: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
6677: LD_INT 3
6679: PPUSH
6680: LD_VAR 0 3
6684: PPUSH
6685: LD_INT 1
6687: PPUSH
6688: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
6692: LD_INT 4
6694: PPUSH
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_INT 1
6702: PPUSH
6703: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
6707: LD_INT 6
6709: PPUSH
6710: LD_VAR 0 3
6714: PPUSH
6715: LD_INT 1
6717: PPUSH
6718: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
6722: LD_INT 7
6724: PPUSH
6725: LD_VAR 0 3
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
6737: LD_INT 8
6739: PPUSH
6740: LD_VAR 0 3
6744: PPUSH
6745: LD_INT 1
6747: PPUSH
6748: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
6752: LD_INT 10
6754: PPUSH
6755: LD_VAR 0 3
6759: PPUSH
6760: LD_INT 1
6762: PPUSH
6763: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
6767: LD_INT 15
6769: PPUSH
6770: LD_VAR 0 3
6774: PPUSH
6775: LD_INT 1
6777: PPUSH
6778: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
6782: LD_INT 16
6784: PPUSH
6785: LD_VAR 0 3
6789: PPUSH
6790: LD_INT 1
6792: PPUSH
6793: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
6797: LD_INT 17
6799: PPUSH
6800: LD_VAR 0 3
6804: PPUSH
6805: LD_INT 1
6807: PPUSH
6808: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
6812: LD_INT 20
6814: PPUSH
6815: LD_VAR 0 3
6819: PPUSH
6820: LD_INT 1
6822: PPUSH
6823: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
6827: LD_INT 26
6829: PPUSH
6830: LD_VAR 0 3
6834: PPUSH
6835: LD_INT 1
6837: PPUSH
6838: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
6842: LD_INT 27
6844: PPUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
6857: LD_INT 29
6859: PPUSH
6860: LD_VAR 0 3
6864: PPUSH
6865: LD_INT 1
6867: PPUSH
6868: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
6872: LD_INT 31
6874: PPUSH
6875: LD_VAR 0 3
6879: PPUSH
6880: LD_INT 1
6882: PPUSH
6883: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
6887: LD_INT 32
6889: PPUSH
6890: LD_VAR 0 3
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: CALL_OW 324
// end ; 4 :
6902: GO 9989
6904: LD_INT 4
6906: DOUBLE
6907: EQUAL
6908: IFTRUE 6912
6910: GO 7860
6912: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
6913: LD_INT 35
6915: PPUSH
6916: LD_VAR 0 3
6920: PPUSH
6921: LD_INT 1
6923: PPUSH
6924: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
6928: LD_INT 45
6930: PPUSH
6931: LD_VAR 0 3
6935: PPUSH
6936: LD_INT 1
6938: PPUSH
6939: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
6943: LD_INT 46
6945: PPUSH
6946: LD_VAR 0 3
6950: PPUSH
6951: LD_INT 1
6953: PPUSH
6954: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
6958: LD_INT 47
6960: PPUSH
6961: LD_VAR 0 3
6965: PPUSH
6966: LD_INT 1
6968: PPUSH
6969: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
6973: LD_INT 1
6975: PPUSH
6976: LD_VAR 0 3
6980: PPUSH
6981: LD_INT 1
6983: PPUSH
6984: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
6988: LD_INT 2
6990: PPUSH
6991: LD_VAR 0 3
6995: PPUSH
6996: LD_INT 1
6998: PPUSH
6999: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
7003: LD_INT 11
7005: PPUSH
7006: LD_VAR 0 3
7010: PPUSH
7011: LD_INT 1
7013: PPUSH
7014: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
7018: LD_INT 20
7020: PPUSH
7021: LD_VAR 0 3
7025: PPUSH
7026: LD_INT 1
7028: PPUSH
7029: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
7033: LD_INT 48
7035: PPUSH
7036: LD_VAR 0 3
7040: PPUSH
7041: LD_INT 1
7043: PPUSH
7044: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
7048: LD_INT 49
7050: PPUSH
7051: LD_VAR 0 3
7055: PPUSH
7056: LD_INT 1
7058: PPUSH
7059: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
7063: LD_INT 69
7065: PPUSH
7066: LD_VAR 0 3
7070: PPUSH
7071: LD_INT 1
7073: PPUSH
7074: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
7078: LD_INT 39
7080: PPUSH
7081: LD_VAR 0 3
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
7093: LD_INT 34
7095: PPUSH
7096: LD_VAR 0 3
7100: PPUSH
7101: LD_INT 1
7103: PPUSH
7104: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
7108: LD_INT 42
7110: PPUSH
7111: LD_VAR 0 3
7115: PPUSH
7116: LD_INT 1
7118: PPUSH
7119: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
7123: LD_INT 44
7125: PPUSH
7126: LD_VAR 0 3
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
7138: LD_INT 41
7140: PPUSH
7141: LD_VAR 0 3
7145: PPUSH
7146: LD_INT 1
7148: PPUSH
7149: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
7153: LD_INT 43
7155: PPUSH
7156: LD_VAR 0 3
7160: PPUSH
7161: LD_INT 1
7163: PPUSH
7164: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
7168: LD_INT 70
7170: PPUSH
7171: LD_VAR 0 3
7175: PPUSH
7176: LD_INT 1
7178: PPUSH
7179: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
7183: LD_INT 51
7185: PPUSH
7186: LD_VAR 0 3
7190: PPUSH
7191: LD_INT 1
7193: PPUSH
7194: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
7198: LD_INT 52
7200: PPUSH
7201: LD_VAR 0 3
7205: PPUSH
7206: LD_INT 1
7208: PPUSH
7209: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
7213: LD_INT 6
7215: PPUSH
7216: LD_VAR 0 3
7220: PPUSH
7221: LD_INT 1
7223: PPUSH
7224: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
7228: LD_INT 15
7230: PPUSH
7231: LD_VAR 0 3
7235: PPUSH
7236: LD_INT 1
7238: PPUSH
7239: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
7243: LD_INT 7
7245: PPUSH
7246: LD_VAR 0 3
7250: PPUSH
7251: LD_INT 1
7253: PPUSH
7254: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
7258: LD_INT 12
7260: PPUSH
7261: LD_VAR 0 3
7265: PPUSH
7266: LD_INT 1
7268: PPUSH
7269: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
7273: LD_INT 18
7275: PPUSH
7276: LD_VAR 0 3
7280: PPUSH
7281: LD_INT 1
7283: PPUSH
7284: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
7288: LD_INT 60
7290: PPUSH
7291: LD_VAR 0 3
7295: PPUSH
7296: LD_INT 1
7298: PPUSH
7299: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
7303: LD_INT 9
7305: PPUSH
7306: LD_VAR 0 3
7310: PPUSH
7311: LD_INT 1
7313: PPUSH
7314: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
7318: LD_INT 30
7320: PPUSH
7321: LD_VAR 0 3
7325: PPUSH
7326: LD_INT 1
7328: PPUSH
7329: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
7333: LD_INT 37
7335: PPUSH
7336: LD_VAR 0 3
7340: PPUSH
7341: LD_INT 1
7343: PPUSH
7344: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
7348: LD_INT 5
7350: PPUSH
7351: LD_VAR 0 3
7355: PPUSH
7356: LD_INT 1
7358: PPUSH
7359: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
7363: LD_INT 66
7365: PPUSH
7366: LD_VAR 0 3
7370: PPUSH
7371: LD_INT 1
7373: PPUSH
7374: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
7378: LD_INT 21
7380: PPUSH
7381: LD_VAR 0 3
7385: PPUSH
7386: LD_INT 1
7388: PPUSH
7389: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
7393: LD_INT 22
7395: PPUSH
7396: LD_VAR 0 3
7400: PPUSH
7401: LD_INT 1
7403: PPUSH
7404: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
7408: LD_INT 54
7410: PPUSH
7411: LD_VAR 0 3
7415: PPUSH
7416: LD_INT 1
7418: PPUSH
7419: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
7423: LD_INT 0
7425: PPUSH
7426: LD_VAR 0 3
7430: PPUSH
7431: LD_INT 1
7433: PPUSH
7434: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
7438: LD_INT 1
7440: PPUSH
7441: LD_VAR 0 3
7445: PPUSH
7446: LD_INT 1
7448: PPUSH
7449: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
7453: LD_INT 2
7455: PPUSH
7456: LD_VAR 0 3
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
7468: LD_INT 3
7470: PPUSH
7471: LD_VAR 0 3
7475: PPUSH
7476: LD_INT 1
7478: PPUSH
7479: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
7483: LD_INT 4
7485: PPUSH
7486: LD_VAR 0 3
7490: PPUSH
7491: LD_INT 1
7493: PPUSH
7494: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
7498: LD_INT 5
7500: PPUSH
7501: LD_VAR 0 3
7505: PPUSH
7506: LD_INT 1
7508: PPUSH
7509: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
7513: LD_INT 6
7515: PPUSH
7516: LD_VAR 0 3
7520: PPUSH
7521: LD_INT 1
7523: PPUSH
7524: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
7528: LD_INT 7
7530: PPUSH
7531: LD_VAR 0 3
7535: PPUSH
7536: LD_INT 1
7538: PPUSH
7539: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
7543: LD_INT 8
7545: PPUSH
7546: LD_VAR 0 3
7550: PPUSH
7551: LD_INT 1
7553: PPUSH
7554: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
7558: LD_INT 10
7560: PPUSH
7561: LD_VAR 0 3
7565: PPUSH
7566: LD_INT 1
7568: PPUSH
7569: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
7573: LD_INT 11
7575: PPUSH
7576: LD_VAR 0 3
7580: PPUSH
7581: LD_INT 1
7583: PPUSH
7584: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
7588: LD_INT 12
7590: PPUSH
7591: LD_VAR 0 3
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
7603: LD_INT 13
7605: PPUSH
7606: LD_VAR 0 3
7610: PPUSH
7611: LD_INT 1
7613: PPUSH
7614: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
7618: LD_INT 14
7620: PPUSH
7621: LD_VAR 0 3
7625: PPUSH
7626: LD_INT 1
7628: PPUSH
7629: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
7633: LD_INT 15
7635: PPUSH
7636: LD_VAR 0 3
7640: PPUSH
7641: LD_INT 1
7643: PPUSH
7644: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
7648: LD_INT 16
7650: PPUSH
7651: LD_VAR 0 3
7655: PPUSH
7656: LD_INT 1
7658: PPUSH
7659: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
7663: LD_INT 17
7665: PPUSH
7666: LD_VAR 0 3
7670: PPUSH
7671: LD_INT 1
7673: PPUSH
7674: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
7678: LD_INT 19
7680: PPUSH
7681: LD_VAR 0 3
7685: PPUSH
7686: LD_INT 1
7688: PPUSH
7689: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
7693: LD_INT 20
7695: PPUSH
7696: LD_VAR 0 3
7700: PPUSH
7701: LD_INT 1
7703: PPUSH
7704: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
7708: LD_INT 21
7710: PPUSH
7711: LD_VAR 0 3
7715: PPUSH
7716: LD_INT 1
7718: PPUSH
7719: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
7723: LD_INT 23
7725: PPUSH
7726: LD_VAR 0 3
7730: PPUSH
7731: LD_INT 1
7733: PPUSH
7734: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
7738: LD_INT 26
7740: PPUSH
7741: LD_VAR 0 3
7745: PPUSH
7746: LD_INT 1
7748: PPUSH
7749: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
7753: LD_INT 27
7755: PPUSH
7756: LD_VAR 0 3
7760: PPUSH
7761: LD_INT 1
7763: PPUSH
7764: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
7768: LD_INT 28
7770: PPUSH
7771: LD_VAR 0 3
7775: PPUSH
7776: LD_INT 1
7778: PPUSH
7779: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
7783: LD_INT 29
7785: PPUSH
7786: LD_VAR 0 3
7790: PPUSH
7791: LD_INT 1
7793: PPUSH
7794: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
7798: LD_INT 30
7800: PPUSH
7801: LD_VAR 0 3
7805: PPUSH
7806: LD_INT 1
7808: PPUSH
7809: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
7813: LD_INT 31
7815: PPUSH
7816: LD_VAR 0 3
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
7828: LD_INT 32
7830: PPUSH
7831: LD_VAR 0 3
7835: PPUSH
7836: LD_INT 1
7838: PPUSH
7839: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
7843: LD_INT 36
7845: PPUSH
7846: LD_VAR 0 3
7850: PPUSH
7851: LD_INT 1
7853: PPUSH
7854: CALL_OW 324
// end ; 5 :
7858: GO 9989
7860: LD_INT 5
7862: DOUBLE
7863: EQUAL
7864: IFTRUE 7868
7866: GO 8981
7868: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
7869: LD_INT 35
7871: PPUSH
7872: LD_VAR 0 3
7876: PPUSH
7877: LD_INT 1
7879: PPUSH
7880: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
7884: LD_INT 45
7886: PPUSH
7887: LD_VAR 0 3
7891: PPUSH
7892: LD_INT 1
7894: PPUSH
7895: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
7899: LD_INT 46
7901: PPUSH
7902: LD_VAR 0 3
7906: PPUSH
7907: LD_INT 1
7909: PPUSH
7910: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
7914: LD_INT 47
7916: PPUSH
7917: LD_VAR 0 3
7921: PPUSH
7922: LD_INT 1
7924: PPUSH
7925: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
7929: LD_INT 1
7931: PPUSH
7932: LD_VAR 0 3
7936: PPUSH
7937: LD_INT 1
7939: PPUSH
7940: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
7944: LD_INT 2
7946: PPUSH
7947: LD_VAR 0 3
7951: PPUSH
7952: LD_INT 1
7954: PPUSH
7955: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
7959: LD_INT 11
7961: PPUSH
7962: LD_VAR 0 3
7966: PPUSH
7967: LD_INT 1
7969: PPUSH
7970: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
7974: LD_INT 20
7976: PPUSH
7977: LD_VAR 0 3
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
7989: LD_INT 48
7991: PPUSH
7992: LD_VAR 0 3
7996: PPUSH
7997: LD_INT 1
7999: PPUSH
8000: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
8004: LD_INT 49
8006: PPUSH
8007: LD_VAR 0 3
8011: PPUSH
8012: LD_INT 1
8014: PPUSH
8015: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8019: LD_INT 69
8021: PPUSH
8022: LD_VAR 0 3
8026: PPUSH
8027: LD_INT 1
8029: PPUSH
8030: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8034: LD_INT 39
8036: PPUSH
8037: LD_VAR 0 3
8041: PPUSH
8042: LD_INT 1
8044: PPUSH
8045: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
8049: LD_INT 34
8051: PPUSH
8052: LD_VAR 0 3
8056: PPUSH
8057: LD_INT 1
8059: PPUSH
8060: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
8064: LD_INT 42
8066: PPUSH
8067: LD_VAR 0 3
8071: PPUSH
8072: LD_INT 1
8074: PPUSH
8075: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
8079: LD_INT 44
8081: PPUSH
8082: LD_VAR 0 3
8086: PPUSH
8087: LD_INT 1
8089: PPUSH
8090: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
8094: LD_INT 41
8096: PPUSH
8097: LD_VAR 0 3
8101: PPUSH
8102: LD_INT 1
8104: PPUSH
8105: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
8109: LD_INT 40
8111: PPUSH
8112: LD_VAR 0 3
8116: PPUSH
8117: LD_INT 1
8119: PPUSH
8120: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8124: LD_INT 43
8126: PPUSH
8127: LD_VAR 0 3
8131: PPUSH
8132: LD_INT 1
8134: PPUSH
8135: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
8139: LD_INT 70
8141: PPUSH
8142: LD_VAR 0 3
8146: PPUSH
8147: LD_INT 1
8149: PPUSH
8150: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8154: LD_INT 51
8156: PPUSH
8157: LD_VAR 0 3
8161: PPUSH
8162: LD_INT 1
8164: PPUSH
8165: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
8169: LD_INT 52
8171: PPUSH
8172: LD_VAR 0 3
8176: PPUSH
8177: LD_INT 1
8179: PPUSH
8180: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
8184: LD_INT 6
8186: PPUSH
8187: LD_VAR 0 3
8191: PPUSH
8192: LD_INT 1
8194: PPUSH
8195: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
8199: LD_INT 15
8201: PPUSH
8202: LD_VAR 0 3
8206: PPUSH
8207: LD_INT 1
8209: PPUSH
8210: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
8214: LD_INT 7
8216: PPUSH
8217: LD_VAR 0 3
8221: PPUSH
8222: LD_INT 1
8224: PPUSH
8225: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
8229: LD_INT 12
8231: PPUSH
8232: LD_VAR 0 3
8236: PPUSH
8237: LD_INT 1
8239: PPUSH
8240: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
8244: LD_INT 17
8246: PPUSH
8247: LD_VAR 0 3
8251: PPUSH
8252: LD_INT 1
8254: PPUSH
8255: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
8259: LD_INT 18
8261: PPUSH
8262: LD_VAR 0 3
8266: PPUSH
8267: LD_INT 1
8269: PPUSH
8270: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
8274: LD_INT 60
8276: PPUSH
8277: LD_VAR 0 3
8281: PPUSH
8282: LD_INT 1
8284: PPUSH
8285: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
8289: LD_INT 32
8291: PPUSH
8292: LD_VAR 0 3
8296: PPUSH
8297: LD_INT 1
8299: PPUSH
8300: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
8304: LD_INT 9
8306: PPUSH
8307: LD_VAR 0 3
8311: PPUSH
8312: LD_INT 1
8314: PPUSH
8315: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
8319: LD_INT 57
8321: PPUSH
8322: LD_VAR 0 3
8326: PPUSH
8327: LD_INT 1
8329: PPUSH
8330: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
8334: LD_INT 30
8336: PPUSH
8337: LD_VAR 0 3
8341: PPUSH
8342: LD_INT 1
8344: PPUSH
8345: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
8349: LD_INT 37
8351: PPUSH
8352: LD_VAR 0 3
8356: PPUSH
8357: LD_INT 1
8359: PPUSH
8360: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
8364: LD_INT 63
8366: PPUSH
8367: LD_VAR 0 3
8371: PPUSH
8372: LD_INT 1
8374: PPUSH
8375: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
8379: LD_INT 3
8381: PPUSH
8382: LD_VAR 0 3
8386: PPUSH
8387: LD_INT 1
8389: PPUSH
8390: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
8394: LD_INT 4
8396: PPUSH
8397: LD_VAR 0 3
8401: PPUSH
8402: LD_INT 1
8404: PPUSH
8405: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
8409: LD_INT 5
8411: PPUSH
8412: LD_VAR 0 3
8416: PPUSH
8417: LD_INT 1
8419: PPUSH
8420: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
8424: LD_INT 66
8426: PPUSH
8427: LD_VAR 0 3
8431: PPUSH
8432: LD_INT 1
8434: PPUSH
8435: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
8439: LD_INT 21
8441: PPUSH
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 1
8449: PPUSH
8450: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
8454: LD_INT 22
8456: PPUSH
8457: LD_VAR 0 3
8461: PPUSH
8462: LD_INT 1
8464: PPUSH
8465: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
8469: LD_INT 19
8471: PPUSH
8472: LD_VAR 0 3
8476: PPUSH
8477: LD_INT 1
8479: PPUSH
8480: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
8484: LD_INT 54
8486: PPUSH
8487: LD_VAR 0 3
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
8499: LD_INT 55
8501: PPUSH
8502: LD_VAR 0 3
8506: PPUSH
8507: LD_INT 1
8509: PPUSH
8510: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8514: LD_INT 0
8516: PPUSH
8517: LD_VAR 0 3
8521: PPUSH
8522: LD_INT 1
8524: PPUSH
8525: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
8529: LD_INT 1
8531: PPUSH
8532: LD_VAR 0 3
8536: PPUSH
8537: LD_INT 1
8539: PPUSH
8540: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8544: LD_INT 2
8546: PPUSH
8547: LD_VAR 0 3
8551: PPUSH
8552: LD_INT 1
8554: PPUSH
8555: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
8559: LD_INT 3
8561: PPUSH
8562: LD_VAR 0 3
8566: PPUSH
8567: LD_INT 1
8569: PPUSH
8570: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8574: LD_INT 4
8576: PPUSH
8577: LD_VAR 0 3
8581: PPUSH
8582: LD_INT 1
8584: PPUSH
8585: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
8589: LD_INT 5
8591: PPUSH
8592: LD_VAR 0 3
8596: PPUSH
8597: LD_INT 1
8599: PPUSH
8600: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8604: LD_INT 6
8606: PPUSH
8607: LD_VAR 0 3
8611: PPUSH
8612: LD_INT 1
8614: PPUSH
8615: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
8619: LD_INT 7
8621: PPUSH
8622: LD_VAR 0 3
8626: PPUSH
8627: LD_INT 1
8629: PPUSH
8630: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
8634: LD_INT 8
8636: PPUSH
8637: LD_VAR 0 3
8641: PPUSH
8642: LD_INT 1
8644: PPUSH
8645: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
8649: LD_INT 10
8651: PPUSH
8652: LD_VAR 0 3
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
8664: LD_INT 11
8666: PPUSH
8667: LD_VAR 0 3
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
8679: LD_INT 12
8681: PPUSH
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
8694: LD_INT 13
8696: PPUSH
8697: LD_VAR 0 3
8701: PPUSH
8702: LD_INT 1
8704: PPUSH
8705: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
8709: LD_INT 14
8711: PPUSH
8712: LD_VAR 0 3
8716: PPUSH
8717: LD_INT 1
8719: PPUSH
8720: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
8724: LD_INT 15
8726: PPUSH
8727: LD_VAR 0 3
8731: PPUSH
8732: LD_INT 1
8734: PPUSH
8735: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
8739: LD_INT 16
8741: PPUSH
8742: LD_VAR 0 3
8746: PPUSH
8747: LD_INT 1
8749: PPUSH
8750: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
8754: LD_INT 17
8756: PPUSH
8757: LD_VAR 0 3
8761: PPUSH
8762: LD_INT 1
8764: PPUSH
8765: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
8769: LD_INT 18
8771: PPUSH
8772: LD_VAR 0 3
8776: PPUSH
8777: LD_INT 1
8779: PPUSH
8780: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
8784: LD_INT 19
8786: PPUSH
8787: LD_VAR 0 3
8791: PPUSH
8792: LD_INT 1
8794: PPUSH
8795: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
8799: LD_INT 20
8801: PPUSH
8802: LD_VAR 0 3
8806: PPUSH
8807: LD_INT 1
8809: PPUSH
8810: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
8814: LD_INT 21
8816: PPUSH
8817: LD_VAR 0 3
8821: PPUSH
8822: LD_INT 1
8824: PPUSH
8825: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
8829: LD_INT 23
8831: PPUSH
8832: LD_VAR 0 3
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
8844: LD_INT 26
8846: PPUSH
8847: LD_VAR 0 3
8851: PPUSH
8852: LD_INT 1
8854: PPUSH
8855: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
8859: LD_INT 27
8861: PPUSH
8862: LD_VAR 0 3
8866: PPUSH
8867: LD_INT 1
8869: PPUSH
8870: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
8874: LD_INT 28
8876: PPUSH
8877: LD_VAR 0 3
8881: PPUSH
8882: LD_INT 1
8884: PPUSH
8885: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8889: LD_INT 29
8891: PPUSH
8892: LD_VAR 0 3
8896: PPUSH
8897: LD_INT 1
8899: PPUSH
8900: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
8904: LD_INT 30
8906: PPUSH
8907: LD_VAR 0 3
8911: PPUSH
8912: LD_INT 1
8914: PPUSH
8915: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8919: LD_INT 31
8921: PPUSH
8922: LD_VAR 0 3
8926: PPUSH
8927: LD_INT 1
8929: PPUSH
8930: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
8934: LD_INT 32
8936: PPUSH
8937: LD_VAR 0 3
8941: PPUSH
8942: LD_INT 1
8944: PPUSH
8945: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
8949: LD_INT 33
8951: PPUSH
8952: LD_VAR 0 3
8956: PPUSH
8957: LD_INT 1
8959: PPUSH
8960: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
8964: LD_INT 36
8966: PPUSH
8967: LD_VAR 0 3
8971: PPUSH
8972: LD_INT 1
8974: PPUSH
8975: CALL_OW 324
// end ; 6 :
8979: GO 9989
8981: LD_INT 6
8983: DOUBLE
8984: EQUAL
8985: IFTRUE 8989
8987: GO 9914
8989: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8990: LD_INT 35
8992: PPUSH
8993: LD_VAR 0 3
8997: PPUSH
8998: LD_INT 1
9000: PPUSH
9001: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9005: LD_INT 45
9007: PPUSH
9008: LD_VAR 0 3
9012: PPUSH
9013: LD_INT 1
9015: PPUSH
9016: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9020: LD_INT 46
9022: PPUSH
9023: LD_VAR 0 3
9027: PPUSH
9028: LD_INT 1
9030: PPUSH
9031: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9035: LD_INT 47
9037: PPUSH
9038: LD_VAR 0 3
9042: PPUSH
9043: LD_INT 1
9045: PPUSH
9046: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9050: LD_INT 1
9052: PPUSH
9053: LD_VAR 0 3
9057: PPUSH
9058: LD_INT 1
9060: PPUSH
9061: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9065: LD_INT 2
9067: PPUSH
9068: LD_VAR 0 3
9072: PPUSH
9073: LD_INT 1
9075: PPUSH
9076: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9080: LD_INT 11
9082: PPUSH
9083: LD_VAR 0 3
9087: PPUSH
9088: LD_INT 1
9090: PPUSH
9091: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9095: LD_INT 20
9097: PPUSH
9098: LD_VAR 0 3
9102: PPUSH
9103: LD_INT 1
9105: PPUSH
9106: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9110: LD_INT 48
9112: PPUSH
9113: LD_VAR 0 3
9117: PPUSH
9118: LD_INT 1
9120: PPUSH
9121: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9125: LD_INT 49
9127: PPUSH
9128: LD_VAR 0 3
9132: PPUSH
9133: LD_INT 1
9135: PPUSH
9136: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
9140: LD_INT 50
9142: PPUSH
9143: LD_VAR 0 3
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9155: LD_INT 69
9157: PPUSH
9158: LD_VAR 0 3
9162: PPUSH
9163: LD_INT 1
9165: PPUSH
9166: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9170: LD_INT 39
9172: PPUSH
9173: LD_VAR 0 3
9177: PPUSH
9178: LD_INT 1
9180: PPUSH
9181: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9185: LD_INT 34
9187: PPUSH
9188: LD_VAR 0 3
9192: PPUSH
9193: LD_INT 1
9195: PPUSH
9196: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9200: LD_INT 42
9202: PPUSH
9203: LD_VAR 0 3
9207: PPUSH
9208: LD_INT 1
9210: PPUSH
9211: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9215: LD_INT 44
9217: PPUSH
9218: LD_VAR 0 3
9222: PPUSH
9223: LD_INT 1
9225: PPUSH
9226: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9230: LD_INT 41
9232: PPUSH
9233: LD_VAR 0 3
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
9245: LD_INT 13
9247: PPUSH
9248: LD_VAR 0 3
9252: PPUSH
9253: LD_INT 1
9255: PPUSH
9256: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
9260: LD_INT 40
9262: PPUSH
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_INT 1
9270: PPUSH
9271: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9275: LD_INT 43
9277: PPUSH
9278: LD_VAR 0 3
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9290: LD_INT 70
9292: PPUSH
9293: LD_VAR 0 3
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
9305: LD_INT 23
9307: PPUSH
9308: LD_VAR 0 3
9312: PPUSH
9313: LD_INT 1
9315: PPUSH
9316: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9320: LD_INT 51
9322: PPUSH
9323: LD_VAR 0 3
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9335: LD_INT 52
9337: PPUSH
9338: LD_VAR 0 3
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9350: LD_INT 6
9352: PPUSH
9353: LD_VAR 0 3
9357: PPUSH
9358: LD_INT 1
9360: PPUSH
9361: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9365: LD_INT 15
9367: PPUSH
9368: LD_VAR 0 3
9372: PPUSH
9373: LD_INT 1
9375: PPUSH
9376: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9380: LD_INT 7
9382: PPUSH
9383: LD_VAR 0 3
9387: PPUSH
9388: LD_INT 1
9390: PPUSH
9391: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9395: LD_INT 12
9397: PPUSH
9398: LD_VAR 0 3
9402: PPUSH
9403: LD_INT 1
9405: PPUSH
9406: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
9410: LD_INT 10
9412: PPUSH
9413: LD_VAR 0 3
9417: PPUSH
9418: LD_INT 1
9420: PPUSH
9421: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
9425: LD_INT 17
9427: PPUSH
9428: LD_VAR 0 3
9432: PPUSH
9433: LD_INT 1
9435: PPUSH
9436: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9440: LD_INT 18
9442: PPUSH
9443: LD_VAR 0 3
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9455: LD_INT 60
9457: PPUSH
9458: LD_VAR 0 3
9462: PPUSH
9463: LD_INT 1
9465: PPUSH
9466: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
9470: LD_INT 61
9472: PPUSH
9473: LD_VAR 0 3
9477: PPUSH
9478: LD_INT 1
9480: PPUSH
9481: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
9485: LD_INT 32
9487: PPUSH
9488: LD_VAR 0 3
9492: PPUSH
9493: LD_INT 1
9495: PPUSH
9496: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
9500: LD_INT 27
9502: PPUSH
9503: LD_VAR 0 3
9507: PPUSH
9508: LD_INT 1
9510: PPUSH
9511: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
9515: LD_INT 36
9517: PPUSH
9518: LD_VAR 0 3
9522: PPUSH
9523: LD_INT 1
9525: PPUSH
9526: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
9530: LD_INT 33
9532: PPUSH
9533: LD_VAR 0 3
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9545: LD_INT 9
9547: PPUSH
9548: LD_VAR 0 3
9552: PPUSH
9553: LD_INT 1
9555: PPUSH
9556: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
9560: LD_INT 38
9562: PPUSH
9563: LD_VAR 0 3
9567: PPUSH
9568: LD_INT 1
9570: PPUSH
9571: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
9575: LD_INT 57
9577: PPUSH
9578: LD_VAR 0 3
9582: PPUSH
9583: LD_INT 1
9585: PPUSH
9586: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
9590: LD_INT 58
9592: PPUSH
9593: LD_VAR 0 3
9597: PPUSH
9598: LD_INT 1
9600: PPUSH
9601: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
9605: LD_INT 28
9607: PPUSH
9608: LD_VAR 0 3
9612: PPUSH
9613: LD_INT 1
9615: PPUSH
9616: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
9620: LD_INT 29
9622: PPUSH
9623: LD_VAR 0 3
9627: PPUSH
9628: LD_INT 1
9630: PPUSH
9631: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9635: LD_INT 30
9637: PPUSH
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 1
9645: PPUSH
9646: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9650: LD_INT 37
9652: PPUSH
9653: LD_VAR 0 3
9657: PPUSH
9658: LD_INT 1
9660: PPUSH
9661: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
9665: LD_INT 63
9667: PPUSH
9668: LD_VAR 0 3
9672: PPUSH
9673: LD_INT 1
9675: PPUSH
9676: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
9680: LD_INT 64
9682: PPUSH
9683: LD_VAR 0 3
9687: PPUSH
9688: LD_INT 1
9690: PPUSH
9691: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
9695: LD_INT 3
9697: PPUSH
9698: LD_VAR 0 3
9702: PPUSH
9703: LD_INT 1
9705: PPUSH
9706: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
9710: LD_INT 4
9712: PPUSH
9713: LD_VAR 0 3
9717: PPUSH
9718: LD_INT 1
9720: PPUSH
9721: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9725: LD_INT 5
9727: PPUSH
9728: LD_VAR 0 3
9732: PPUSH
9733: LD_INT 1
9735: PPUSH
9736: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
9740: LD_INT 8
9742: PPUSH
9743: LD_VAR 0 3
9747: PPUSH
9748: LD_INT 1
9750: PPUSH
9751: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9755: LD_INT 66
9757: PPUSH
9758: LD_VAR 0 3
9762: PPUSH
9763: LD_INT 1
9765: PPUSH
9766: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
9770: LD_INT 67
9772: PPUSH
9773: LD_VAR 0 3
9777: PPUSH
9778: LD_INT 1
9780: PPUSH
9781: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9785: LD_INT 21
9787: PPUSH
9788: LD_VAR 0 3
9792: PPUSH
9793: LD_INT 1
9795: PPUSH
9796: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9800: LD_INT 22
9802: PPUSH
9803: LD_VAR 0 3
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
9815: LD_INT 19
9817: PPUSH
9818: LD_VAR 0 3
9822: PPUSH
9823: LD_INT 1
9825: PPUSH
9826: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
9830: LD_INT 26
9832: PPUSH
9833: LD_VAR 0 3
9837: PPUSH
9838: LD_INT 1
9840: PPUSH
9841: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9845: LD_INT 54
9847: PPUSH
9848: LD_VAR 0 3
9852: PPUSH
9853: LD_INT 1
9855: PPUSH
9856: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
9860: LD_INT 55
9862: PPUSH
9863: LD_VAR 0 3
9867: PPUSH
9868: LD_INT 1
9870: PPUSH
9871: CALL_OW 322
// for i = 0 to 39 do
9875: LD_ADDR_VAR 0 4
9879: PUSH
9880: DOUBLE
9881: LD_INT 0
9883: DEC
9884: ST_TO_ADDR
9885: LD_INT 39
9887: PUSH
9888: FOR_TO
9889: IFFALSE 9910
// SetRestrict ( i , side , true ) ;
9891: LD_VAR 0 4
9895: PPUSH
9896: LD_VAR 0 3
9900: PPUSH
9901: LD_INT 1
9903: PPUSH
9904: CALL_OW 324
9908: GO 9888
9910: POP
9911: POP
// end ; else
9912: GO 9989
9914: POP
// begin for i = 1 to 73 do
9915: LD_ADDR_VAR 0 4
9919: PUSH
9920: DOUBLE
9921: LD_INT 1
9923: DEC
9924: ST_TO_ADDR
9925: LD_INT 73
9927: PUSH
9928: FOR_TO
9929: IFFALSE 9950
// SetTech ( i , side , state_enabled ) ;
9931: LD_VAR 0 4
9935: PPUSH
9936: LD_VAR 0 3
9940: PPUSH
9941: LD_INT 1
9943: PPUSH
9944: CALL_OW 322
9948: GO 9928
9950: POP
9951: POP
// for i = 0 to 39 do
9952: LD_ADDR_VAR 0 4
9956: PUSH
9957: DOUBLE
9958: LD_INT 0
9960: DEC
9961: ST_TO_ADDR
9962: LD_INT 39
9964: PUSH
9965: FOR_TO
9966: IFFALSE 9987
// SetRestrict ( i , side , true ) ;
9968: LD_VAR 0 4
9972: PPUSH
9973: LD_VAR 0 3
9977: PPUSH
9978: LD_INT 1
9980: PPUSH
9981: CALL_OW 324
9985: GO 9965
9987: POP
9988: POP
// end ; end ; end ;
9989: GO 5994
9991: POP
9992: POP
// end ;
9993: LD_VAR 0 2
9997: RET
