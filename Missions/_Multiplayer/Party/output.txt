// export gametype , def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_oil_deposits , def_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_cost , def_cost_decreasing ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , cost , decr_cost_time , real_cost , oil_dep , sib_dep , amount_of_apemen , siberite_bomb_Delay ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game ; export depot_def , breastworks_def , start_def , deposits_def , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var sides , s1 , s2 , s3 , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
// if MultiPlayer then
   8: LD_OWVAR 4
  12: IFFALSE 86
// begin gametype = mp_game_type ;
  14: LD_ADDR_EXP 1
  18: PUSH
  19: LD_OWVAR 6
  23: ST_TO_ADDR
// Player_Side = mp_player_side ;
  24: LD_ADDR_EXP 36
  28: PUSH
  29: LD_OWVAR 7
  33: ST_TO_ADDR
// Player_Team = mp_player_team ;
  34: LD_ADDR_EXP 37
  38: PUSH
  39: LD_OWVAR 8
  43: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  44: LD_ADDR_EXP 40
  48: PUSH
  49: LD_OWVAR 17
  53: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  54: LD_ADDR_EXP 38
  58: PUSH
  59: LD_OWVAR 15
  63: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  64: LD_ADDR_EXP 41
  68: PUSH
  69: LD_OWVAR 16
  73: ST_TO_ADDR
// Teams = mp_teams ;
  74: LD_ADDR_EXP 39
  78: PUSH
  79: LD_OWVAR 12
  83: ST_TO_ADDR
// end else
  84: GO 256
// begin gametype = 11 ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 11
  93: ST_TO_ADDR
// Player_Side = 4 ;
  94: LD_ADDR_EXP 36
  98: PUSH
  99: LD_INT 4
 101: ST_TO_ADDR
// Player_Team = 2 ;
 102: LD_ADDR_EXP 37
 106: PUSH
 107: LD_INT 2
 109: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 110: LD_ADDR_EXP 40
 114: PUSH
 115: LD_INT 0
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 1
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 4
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 149: LD_ADDR_EXP 38
 153: PUSH
 154: LD_INT 0
 156: PUSH
 157: LD_INT 1
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 188: LD_ADDR_EXP 41
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 3
 198: PUSH
 199: LD_INT 0
 201: PUSH
 202: LD_INT 1
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: LD_INT 3
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Teams = [ [ 2 , 7 ] , [ 6 , 4 ] ] ;
 227: LD_ADDR_EXP 39
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: LD_INT 7
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 6
 244: PUSH
 245: LD_INT 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 256: LD_ADDR_EXP 34
 260: PUSH
 261: LD_EXP 40
 265: PUSH
 266: LD_INT 0
 268: PUSH
 269: EMPTY
 270: LIST
 271: DIFF
 272: PUSH
 273: LD_INT 0
 275: PLUS
 276: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 277: LD_ADDR_EXP 35
 281: PUSH
 282: LD_EXP 38
 286: PUSH
 287: LD_INT 0
 289: PUSH
 290: EMPTY
 291: LIST
 292: DIFF
 293: PUSH
 294: LD_INT 0
 296: PLUS
 297: ST_TO_ADDR
// if MultiPlayer then
 298: LD_OWVAR 4
 302: IFFALSE 534
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 304: LD_ADDR_EXP 2
 308: PUSH
 309: LD_INT 0
 311: PPUSH
 312: CALL_OW 426
 316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 317: LD_ADDR_EXP 3
 321: PUSH
 322: LD_INT 1
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 330: LD_ADDR_EXP 4
 334: PUSH
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 343: LD_ADDR_EXP 5
 347: PUSH
 348: LD_INT 3
 350: PPUSH
 351: CALL_OW 426
 355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 356: LD_ADDR_EXP 6
 360: PUSH
 361: LD_INT 4
 363: PPUSH
 364: CALL_OW 426
 368: ST_TO_ADDR
// def_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 369: LD_ADDR_EXP 7
 373: PUSH
 374: LD_INT 5
 376: PPUSH
 377: CALL_OW 426
 381: ST_TO_ADDR
// def_sib_deposits = GetMultiplayerSetting ( 6 ) ;
 382: LD_ADDR_EXP 8
 386: PUSH
 387: LD_INT 6
 389: PPUSH
 390: CALL_OW 426
 394: ST_TO_ADDR
// if gametype = 11 then
 395: LD_EXP 1
 399: PUSH
 400: LD_INT 11
 402: EQUAL
 403: IFFALSE 415
// def_shared_vision = 0 else
 405: LD_ADDR_EXP 9
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
 413: GO 428
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 415: LD_ADDR_EXP 9
 419: PUSH
 420: LD_INT 10
 422: PPUSH
 423: CALL_OW 426
 427: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 428: LD_ADDR_EXP 10
 432: PUSH
 433: LD_INT 11
 435: PPUSH
 436: CALL_OW 426
 440: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 441: LD_ADDR_EXP 11
 445: PUSH
 446: LD_INT 12
 448: PPUSH
 449: CALL_OW 426
 453: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 454: LD_ADDR_EXP 12
 458: PUSH
 459: LD_INT 13
 461: PPUSH
 462: CALL_OW 426
 466: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 467: LD_ADDR_EXP 13
 471: PUSH
 472: LD_INT 14
 474: PPUSH
 475: CALL_OW 426
 479: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 480: LD_ADDR_EXP 14
 484: PUSH
 485: LD_INT 15
 487: PPUSH
 488: CALL_OW 426
 492: ST_TO_ADDR
// def_cost = GetMultiplayerSetting ( 16 ) ;
 493: LD_ADDR_EXP 15
 497: PUSH
 498: LD_INT 16
 500: PPUSH
 501: CALL_OW 426
 505: ST_TO_ADDR
// def_cost_decreasing = GetMultiplayerSetting ( 17 ) ;
 506: LD_ADDR_EXP 16
 510: PUSH
 511: LD_INT 17
 513: PPUSH
 514: CALL_OW 426
 518: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 519: LD_ADDR_VAR 0 6
 523: PUSH
 524: LD_INT 22
 526: PPUSH
 527: CALL_OW 426
 531: ST_TO_ADDR
// end else
 532: GO 666
// begin randomize ;
 534: CALL_OW 10
// def_base_level = 0 ;
 538: LD_ADDR_EXP 2
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// def_amount_of_people = 4 ;
 546: LD_ADDR_EXP 3
 550: PUSH
 551: LD_INT 4
 553: ST_TO_ADDR
// def_initial_level = 3 ;
 554: LD_ADDR_EXP 4
 558: PUSH
 559: LD_INT 3
 561: ST_TO_ADDR
// def_starting_resources = 3 ;
 562: LD_ADDR_EXP 5
 566: PUSH
 567: LD_INT 3
 569: ST_TO_ADDR
// def_shipments_density = 2 ;
 570: LD_ADDR_EXP 6
 574: PUSH
 575: LD_INT 2
 577: ST_TO_ADDR
// def_oil_deposits = 2 ;
 578: LD_ADDR_EXP 7
 582: PUSH
 583: LD_INT 2
 585: ST_TO_ADDR
// def_sib_deposits = 2 ;
 586: LD_ADDR_EXP 8
 590: PUSH
 591: LD_INT 2
 593: ST_TO_ADDR
// def_shared_vision = 1 ;
 594: LD_ADDR_EXP 9
 598: PUSH
 599: LD_INT 1
 601: ST_TO_ADDR
// def_morale_flags = 4 ;
 602: LD_ADDR_EXP 10
 606: PUSH
 607: LD_INT 4
 609: ST_TO_ADDR
// def_siberite_detection = 1 ;
 610: LD_ADDR_EXP 11
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 618: LD_ADDR_EXP 12
 622: PUSH
 623: LD_INT 3
 625: ST_TO_ADDR
// def_people_respawning = 0 ;
 626: LD_ADDR_EXP 13
 630: PUSH
 631: LD_INT 0
 633: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 634: LD_ADDR_EXP 14
 638: PUSH
 639: LD_INT 0
 641: ST_TO_ADDR
// def_cost = 4 ;
 642: LD_ADDR_EXP 15
 646: PUSH
 647: LD_INT 4
 649: ST_TO_ADDR
// def_cost_decreasing = 0 ;
 650: LD_ADDR_EXP 16
 654: PUSH
 655: LD_INT 0
 657: ST_TO_ADDR
// tech_level = 4 ;
 658: LD_ADDR_VAR 0 6
 662: PUSH
 663: LD_INT 4
 665: ST_TO_ADDR
// end ; if isSGUI then
 666: LD_OWVAR 83
 670: IFFALSE 678
// setMpTechs ( ) else
 672: CALL 10075 0 0
 676: GO 691
// begin SetMpTechLevel ( tech_level + 1 ) ;
 678: LD_VAR 0 6
 682: PUSH
 683: LD_INT 1
 685: PLUS
 686: PPUSH
 687: CALL 10222 0 1
// end ; if gametype = 11 then
 691: LD_EXP 1
 695: PUSH
 696: LD_INT 11
 698: EQUAL
 699: IFFALSE 1041
// begin sides = [ ] ;
 701: LD_ADDR_VAR 0 2
 705: PUSH
 706: EMPTY
 707: ST_TO_ADDR
// for s1 = 1 to Side_Positions do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: DOUBLE
 714: LD_INT 1
 716: DEC
 717: ST_TO_ADDR
 718: LD_EXP 40
 722: PUSH
 723: FOR_TO
 724: IFFALSE 756
// if Side_Positions [ s1 ] then
 726: LD_EXP 40
 730: PUSH
 731: LD_VAR 0 3
 735: ARRAY
 736: IFFALSE 754
// sides = sides ^ s1 ;
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: LD_VAR 0 2
 747: PUSH
 748: LD_VAR 0 3
 752: ADD
 753: ST_TO_ADDR
 754: GO 723
 756: POP
 757: POP
// if sides < 4 then
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 4
 765: LESS
 766: IFFALSE 781
// begin YouLostInMultiplayer ;
 768: CALL_OW 107
// wait ( 0 0$1 ) ;
 772: LD_INT 35
 774: PPUSH
 775: CALL_OW 67
// exit ;
 779: GO 1649
// end ; s1 = sides [ Rand ( 1 , 4 ) ] ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_INT 1
 793: PPUSH
 794: LD_INT 4
 796: PPUSH
 797: CALL_OW 12
 801: ARRAY
 802: ST_TO_ADDR
// sides = sides diff s1 ;
 803: LD_ADDR_VAR 0 2
 807: PUSH
 808: LD_VAR 0 2
 812: PUSH
 813: LD_VAR 0 3
 817: DIFF
 818: ST_TO_ADDR
// s2 = sides [ Rand ( 1 , 3 ) ] ;
 819: LD_ADDR_VAR 0 4
 823: PUSH
 824: LD_VAR 0 2
 828: PUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 12
 839: ARRAY
 840: ST_TO_ADDR
// sides = sides diff s2 ;
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_VAR 0 4
 855: DIFF
 856: ST_TO_ADDR
// s3 = sides [ Rand ( 1 , 2 ) ] ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 2
 866: PUSH
 867: LD_INT 1
 869: PPUSH
 870: LD_INT 2
 872: PPUSH
 873: CALL_OW 12
 877: ARRAY
 878: ST_TO_ADDR
// sides = sides diff s3 ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_VAR 0 2
 888: PUSH
 889: LD_VAR 0 5
 893: DIFF
 894: ST_TO_ADDR
// Teams = [ [ s1 , s2 ] , [ s3 , sides [ 1 ] ] ] ;
 895: LD_ADDR_EXP 39
 899: PUSH
 900: LD_VAR 0 3
 904: PUSH
 905: LD_VAR 0 4
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_VAR 0 5
 918: PUSH
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 936: LD_ADDR_EXP 38
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 0
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: ST_TO_ADDR
// Side_Teams = Replace ( Replace ( Replace ( Replace ( Side_Teams , s1 , 1 ) , s2 , 1 ) , s3 , 2 ) , sides [ 1 ] , 2 ) ;
 975: LD_ADDR_EXP 38
 979: PUSH
 980: LD_EXP 38
 984: PPUSH
 985: LD_VAR 0 3
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 1
 997: PPUSH
 998: LD_VAR 0 4
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 1
1010: PPUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_INT 2
1018: PPUSH
1019: CALL_OW 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PUSH
1029: LD_INT 1
1031: ARRAY
1032: PPUSH
1033: LD_INT 2
1035: PPUSH
1036: CALL_OW 1
1040: ST_TO_ADDR
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1041: LD_ADDR_EXP 17
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: LD_INT 1
1054: PUSH
1055: LD_INT 1
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: LD_EXP 2
1068: PUSH
1069: LD_INT 1
1071: PLUS
1072: ARRAY
1073: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1074: LD_ADDR_EXP 18
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 4
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 2
1101: PUSH
1102: LD_INT 1
1104: PLUS
1105: ARRAY
1106: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1107: LD_ADDR_EXP 20
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: LD_INT 4
1120: PUSH
1121: LD_INT 5
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: LD_EXP 4
1134: PUSH
1135: LD_INT 1
1137: PLUS
1138: ARRAY
1139: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1140: LD_ADDR_EXP 22
1144: PUSH
1145: LD_INT 0
1147: PUSH
1148: LD_INT 0
1150: PUSH
1151: LD_INT 0
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_INT 30
1161: PUSH
1162: LD_INT 0
1164: PUSH
1165: LD_INT 0
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: PUSH
1173: LD_INT 50
1175: PUSH
1176: LD_INT 20
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 80
1189: PUSH
1190: LD_INT 40
1192: PUSH
1193: LD_INT 20
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_EXP 5
1211: PUSH
1212: LD_INT 1
1214: PLUS
1215: ARRAY
1216: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1217: LD_ADDR_EXP 21
1221: PUSH
1222: LD_INT 10
1224: PUSH
1225: EMPTY
1226: LIST
1227: PUSH
1228: LD_INT 7
1230: PUSH
1231: LD_INT 14
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 6
1240: PUSH
1241: LD_INT 12
1243: PUSH
1244: LD_INT 18
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 5
1254: PUSH
1255: LD_INT 10
1257: PUSH
1258: LD_INT 15
1260: PUSH
1261: LD_INT 20
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_EXP 5
1280: PUSH
1281: LD_INT 1
1283: PLUS
1284: ARRAY
1285: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1286: LD_ADDR_EXP 19
1290: PUSH
1291: LD_EXP 3
1295: PUSH
1296: LD_INT 4
1298: PLUS
1299: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 4 ;
1300: LD_ADDR_EXP 23
1304: PUSH
1305: LD_INT 20
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 4
1315: MUL
1316: PLUS
1317: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1318: LD_ADDR_EXP 32
1322: PUSH
1323: LD_INT 0
1325: PUSH
1326: LD_INT 3
1328: PUSH
1329: LD_INT 6
1331: PUSH
1332: LD_INT 9
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 12
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1351: LD_ADDR_EXP 25
1355: PUSH
1356: LD_INT 0
1358: PUSH
1359: LD_INT 8400
1361: PUSH
1362: LD_INT 1750
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 13
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1380: LD_ADDR_EXP 26
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 21000
1390: PUSH
1391: LD_INT 4200
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_EXP 13
1403: PUSH
1404: LD_INT 1
1406: PLUS
1407: ARRAY
1408: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1409: LD_ADDR_EXP 24
1413: PUSH
1414: LD_INT 1
1416: NEG
1417: PUSH
1418: LD_INT 350
1420: PUSH
1421: LD_INT 700
1423: PUSH
1424: LD_INT 1400
1426: PUSH
1427: LD_INT 0
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_EXP 10
1441: PUSH
1442: LD_INT 1
1444: PLUS
1445: ARRAY
1446: ST_TO_ADDR
// battle_flags_id = [ ] ;
1447: LD_ADDR_EXP 49
1451: PUSH
1452: EMPTY
1453: ST_TO_ADDR
// cost = [ 200 , 300 , 400 , 600 , 800 ] [ def_cost + 1 ] ;
1454: LD_ADDR_EXP 27
1458: PUSH
1459: LD_INT 200
1461: PUSH
1462: LD_INT 300
1464: PUSH
1465: LD_INT 400
1467: PUSH
1468: LD_INT 600
1470: PUSH
1471: LD_INT 800
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PUSH
1481: LD_EXP 15
1485: PUSH
1486: LD_INT 1
1488: PLUS
1489: ARRAY
1490: ST_TO_ADDR
// decr_cost_time = [ 0 , 20 20$0 , 10 10$0 , 5 5$0 ] [ def_cost_decreasing + 1 ] ;
1491: LD_ADDR_EXP 28
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: LD_INT 42000
1501: PUSH
1502: LD_INT 21000
1504: PUSH
1505: LD_INT 10500
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: LD_EXP 16
1518: PUSH
1519: LD_INT 1
1521: PLUS
1522: ARRAY
1523: ST_TO_ADDR
// oil_dep = [ [ 1 ] , [ 4 ] , [ 1 , 4 ] ] [ def_oil_deposits + 1 ] ;
1524: LD_ADDR_EXP 30
1528: PUSH
1529: LD_INT 1
1531: PUSH
1532: EMPTY
1533: LIST
1534: PUSH
1535: LD_INT 4
1537: PUSH
1538: EMPTY
1539: LIST
1540: PUSH
1541: LD_INT 1
1543: PUSH
1544: LD_INT 4
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_EXP 7
1560: PUSH
1561: LD_INT 1
1563: PLUS
1564: ARRAY
1565: ST_TO_ADDR
// sib_dep = [ [ 2 ] , [ 3 ] , [ 2 , 3 ] ] [ def_sib_deposits + 1 ] ;
1566: LD_ADDR_EXP 31
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: EMPTY
1575: LIST
1576: PUSH
1577: LD_INT 3
1579: PUSH
1580: EMPTY
1581: LIST
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_EXP 8
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ARRAY
1607: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1608: LD_ADDR_EXP 33
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 63000
1621: PUSH
1622: LD_INT 126000
1624: PUSH
1625: LD_INT 189000
1627: PUSH
1628: LD_INT 252000
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_EXP 14
1643: PUSH
1644: LD_INT 1
1646: PLUS
1647: ARRAY
1648: ST_TO_ADDR
// end ;
1649: LD_VAR 0 1
1653: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i , coord ; begin
1654: LD_INT 0
1656: PPUSH
1657: PPUSH
1658: PPUSH
1659: PPUSH
1660: PPUSH
1661: PPUSH
1662: PPUSH
1663: PPUSH
1664: PPUSH
1665: PPUSH
// depot_def = [ ] ;
1666: LD_ADDR_EXP 45
1670: PUSH
1671: EMPTY
1672: ST_TO_ADDR
// breastworks_def = [ ] ;
1673: LD_ADDR_EXP 46
1677: PUSH
1678: EMPTY
1679: ST_TO_ADDR
// for side := 1 to 4 do
1680: LD_ADDR_VAR 0 2
1684: PUSH
1685: DOUBLE
1686: LD_INT 1
1688: DEC
1689: ST_TO_ADDR
1690: LD_INT 4
1692: PUSH
1693: FOR_TO
1694: IFFALSE 2120
// begin dep := side * 5 - 4 ;
1696: LD_ADDR_VAR 0 3
1700: PUSH
1701: LD_VAR 0 2
1705: PUSH
1706: LD_INT 5
1708: MUL
1709: PUSH
1710: LD_INT 4
1712: MINUS
1713: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1714: LD_ADDR_VAR 0 4
1718: PUSH
1719: LD_VAR 0 2
1723: PUSH
1724: LD_INT 5
1726: MUL
1727: PUSH
1728: LD_INT 3
1730: MINUS
1731: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1732: LD_ADDR_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: PUSH
1742: LD_INT 5
1744: MUL
1745: PUSH
1746: LD_INT 2
1748: MINUS
1749: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1750: LD_ADDR_VAR 0 6
1754: PUSH
1755: LD_VAR 0 2
1759: PUSH
1760: LD_INT 5
1762: MUL
1763: PUSH
1764: LD_INT 1
1766: MINUS
1767: ST_TO_ADDR
// br4 := side * 5 ;
1768: LD_ADDR_VAR 0 7
1772: PUSH
1773: LD_VAR 0 2
1777: PUSH
1778: LD_INT 5
1780: MUL
1781: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1782: LD_ADDR_EXP 45
1786: PUSH
1787: LD_EXP 45
1791: PUSH
1792: LD_VAR 0 3
1796: PPUSH
1797: CALL_OW 250
1801: PUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 251
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: CALL_OW 254
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: ADD
1830: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1831: LD_ADDR_EXP 47
1835: PUSH
1836: LD_EXP 47
1840: PUSH
1841: LD_VAR 0 3
1845: PPUSH
1846: CALL_OW 250
1850: PPUSH
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 254
1860: PUSH
1861: LD_INT 6
1863: MOD
1864: PPUSH
1865: LD_INT 6
1867: PPUSH
1868: CALL_OW 272
1872: PUSH
1873: LD_VAR 0 3
1877: PPUSH
1878: CALL_OW 251
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: CALL_OW 254
1892: PUSH
1893: LD_INT 6
1895: MOD
1896: PPUSH
1897: LD_INT 6
1899: PPUSH
1900: CALL_OW 273
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: ADD
1912: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1913: LD_ADDR_EXP 46
1917: PUSH
1918: LD_EXP 46
1922: PUSH
1923: LD_VAR 0 4
1927: PPUSH
1928: CALL_OW 250
1932: PUSH
1933: LD_VAR 0 4
1937: PPUSH
1938: CALL_OW 251
1942: PUSH
1943: LD_VAR 0 4
1947: PPUSH
1948: CALL_OW 254
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: LD_VAR 0 5
1962: PPUSH
1963: CALL_OW 250
1967: PUSH
1968: LD_VAR 0 5
1972: PPUSH
1973: CALL_OW 251
1977: PUSH
1978: LD_VAR 0 5
1982: PPUSH
1983: CALL_OW 254
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 6
1997: PPUSH
1998: CALL_OW 250
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: CALL_OW 251
2012: PUSH
2013: LD_VAR 0 6
2017: PPUSH
2018: CALL_OW 254
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: LD_VAR 0 7
2032: PPUSH
2033: CALL_OW 250
2037: PUSH
2038: LD_VAR 0 7
2042: PPUSH
2043: CALL_OW 251
2047: PUSH
2048: LD_VAR 0 7
2052: PPUSH
2053: CALL_OW 254
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: EMPTY
2070: LIST
2071: ADD
2072: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: CALL_OW 65
// DestroyUnit ( br1 ) ;
2082: LD_VAR 0 4
2086: PPUSH
2087: CALL_OW 65
// DestroyUnit ( br2 ) ;
2091: LD_VAR 0 5
2095: PPUSH
2096: CALL_OW 65
// DestroyUnit ( br3 ) ;
2100: LD_VAR 0 6
2104: PPUSH
2105: CALL_OW 65
// DestroyUnit ( br4 ) ;
2109: LD_VAR 0 7
2113: PPUSH
2114: CALL_OW 65
// end ;
2118: GO 1693
2120: POP
2121: POP
// deposits_def = [ [ [ 30 , 22 ] , [ 60 , 42 ] , [ 29 , 2 ] , [ 73 , 57 ] ] , [ [ 148 , 24 ] , [ 119 , 20 ] , [ 172 , 36 ] , [ 133 , 50 ] ] , [ [ 84 , 122 ] , [ 101 , 111 ] , [ 74 , 126 ] , [ 109 , 102 ] ] , [ [ 196 , 117 ] , [ 166 , 94 ] , [ 197 , 133 ] , [ 156 , 83 ] ] ] ;
2122: LD_ADDR_EXP 48
2126: PUSH
2127: LD_INT 30
2129: PUSH
2130: LD_INT 22
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PUSH
2137: LD_INT 60
2139: PUSH
2140: LD_INT 42
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 29
2149: PUSH
2150: LD_INT 2
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PUSH
2157: LD_INT 73
2159: PUSH
2160: LD_INT 57
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 148
2175: PUSH
2176: LD_INT 24
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 119
2185: PUSH
2186: LD_INT 20
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 172
2195: PUSH
2196: LD_INT 36
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 133
2205: PUSH
2206: LD_INT 50
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 84
2221: PUSH
2222: LD_INT 122
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 101
2231: PUSH
2232: LD_INT 111
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 74
2241: PUSH
2242: LD_INT 126
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 109
2251: PUSH
2252: LD_INT 102
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 196
2267: PUSH
2268: LD_INT 117
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 166
2277: PUSH
2278: LD_INT 94
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 197
2287: PUSH
2288: LD_INT 133
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 156
2297: PUSH
2298: LD_INT 83
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: EMPTY
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: ST_TO_ADDR
// for i := 1 to 4 do
2317: LD_ADDR_VAR 0 9
2321: PUSH
2322: DOUBLE
2323: LD_INT 1
2325: DEC
2326: ST_TO_ADDR
2327: LD_INT 4
2329: PUSH
2330: FOR_TO
2331: IFFALSE 2401
// for coord in oil_dep do
2333: LD_ADDR_VAR 0 10
2337: PUSH
2338: LD_EXP 30
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2397
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_oil ) ;
2346: LD_EXP 48
2350: PUSH
2351: LD_VAR 0 9
2355: ARRAY
2356: PUSH
2357: LD_VAR 0 10
2361: ARRAY
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: LD_EXP 48
2371: PUSH
2372: LD_VAR 0 9
2376: ARRAY
2377: PUSH
2378: LD_VAR 0 10
2382: ARRAY
2383: PUSH
2384: LD_INT 2
2386: ARRAY
2387: PPUSH
2388: LD_INT 2
2390: PPUSH
2391: CALL_OW 62
// end ;
2395: GO 2343
2397: POP
2398: POP
2399: GO 2330
2401: POP
2402: POP
// for i := 1 to 4 do
2403: LD_ADDR_VAR 0 9
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 4
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2487
// for coord in sib_dep do
2419: LD_ADDR_VAR 0 10
2423: PUSH
2424: LD_EXP 31
2428: PUSH
2429: FOR_IN
2430: IFFALSE 2483
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_siberit ) ;
2432: LD_EXP 48
2436: PUSH
2437: LD_VAR 0 9
2441: ARRAY
2442: PUSH
2443: LD_VAR 0 10
2447: ARRAY
2448: PUSH
2449: LD_INT 1
2451: ARRAY
2452: PPUSH
2453: LD_EXP 48
2457: PUSH
2458: LD_VAR 0 9
2462: ARRAY
2463: PUSH
2464: LD_VAR 0 10
2468: ARRAY
2469: PUSH
2470: LD_INT 2
2472: ARRAY
2473: PPUSH
2474: LD_INT 3
2476: PPUSH
2477: CALL_OW 62
// end ;
2481: GO 2429
2483: POP
2484: POP
2485: GO 2416
2487: POP
2488: POP
// end ;
2489: LD_VAR 0 1
2493: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
// Team_Game := 0 ;
2499: LD_ADDR_EXP 44
2503: PUSH
2504: LD_INT 0
2506: ST_TO_ADDR
// for i = 1 to 8 do
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: DOUBLE
2513: LD_INT 1
2515: DEC
2516: ST_TO_ADDR
2517: LD_INT 8
2519: PUSH
2520: FOR_TO
2521: IFFALSE 2547
// Team_Game := Team_Game + Side_Teams [ i ] ;
2523: LD_ADDR_EXP 44
2527: PUSH
2528: LD_EXP 44
2532: PUSH
2533: LD_EXP 38
2537: PUSH
2538: LD_VAR 0 2
2542: ARRAY
2543: PLUS
2544: ST_TO_ADDR
2545: GO 2520
2547: POP
2548: POP
// if not Team_Game then
2549: LD_EXP 44
2553: NOT
2554: IFFALSE 2566
// Team_Game := false else
2556: LD_ADDR_EXP 44
2560: PUSH
2561: LD_INT 0
2563: ST_TO_ADDR
2564: GO 2574
// Team_Game := true ;
2566: LD_ADDR_EXP 44
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// if not Team_Game then
2574: LD_EXP 44
2578: NOT
2579: IFFALSE 2677
// begin for i = 1 to 8 do
2581: LD_ADDR_VAR 0 2
2585: PUSH
2586: DOUBLE
2587: LD_INT 1
2589: DEC
2590: ST_TO_ADDR
2591: LD_INT 8
2593: PUSH
2594: FOR_TO
2595: IFFALSE 2673
// for j = 1 to 8 do
2597: LD_ADDR_VAR 0 3
2601: PUSH
2602: DOUBLE
2603: LD_INT 1
2605: DEC
2606: ST_TO_ADDR
2607: LD_INT 8
2609: PUSH
2610: FOR_TO
2611: IFFALSE 2669
// if i <> j then
2613: LD_VAR 0 2
2617: PUSH
2618: LD_VAR 0 3
2622: NONEQUAL
2623: IFFALSE 2647
// SetAttitude ( i , j , att_neutral , true ) else
2625: LD_VAR 0 2
2629: PPUSH
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: CALL_OW 80
2645: GO 2667
// SetAttitude ( i , j , att_friend , true ) ;
2647: LD_VAR 0 2
2651: PPUSH
2652: LD_VAR 0 3
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: CALL_OW 80
2667: GO 2610
2669: POP
2670: POP
2671: GO 2594
2673: POP
2674: POP
// end else
2675: GO 2906
// begin if def_shared_vision and ( gametype <> 11 ) then
2677: LD_EXP 9
2681: PUSH
2682: LD_EXP 1
2686: PUSH
2687: LD_INT 11
2689: NONEQUAL
2690: AND
2691: IFFALSE 2756
// begin for i in Teams do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_EXP 39
2702: PUSH
2703: FOR_IN
2704: IFFALSE 2754
// for j = 2 to i do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 2
2714: DEC
2715: ST_TO_ADDR
2716: LD_VAR 0 2
2720: PUSH
2721: FOR_TO
2722: IFFALSE 2750
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2724: LD_VAR 0 2
2728: PUSH
2729: LD_VAR 0 3
2733: ARRAY
2734: PPUSH
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PPUSH
2744: CALL_OW 343
2748: GO 2721
2750: POP
2751: POP
2752: GO 2703
2754: POP
2755: POP
// end ; for i := 1 to 8 do
2756: LD_ADDR_VAR 0 2
2760: PUSH
2761: DOUBLE
2762: LD_INT 1
2764: DEC
2765: ST_TO_ADDR
2766: LD_INT 8
2768: PUSH
2769: FOR_TO
2770: IFFALSE 2904
// for j := 1 to 8 do
2772: LD_ADDR_VAR 0 3
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_INT 8
2784: PUSH
2785: FOR_TO
2786: IFFALSE 2900
// if i <> j then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 3
2797: NONEQUAL
2798: IFFALSE 2898
// if gametype = 11 then
2800: LD_EXP 1
2804: PUSH
2805: LD_INT 11
2807: EQUAL
2808: IFFALSE 2832
// SetAttitude ( i , j , att_neutral , true ) else
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: LD_INT 0
2822: PPUSH
2823: LD_INT 1
2825: PPUSH
2826: CALL_OW 80
2830: GO 2898
// if Side_Teams [ i ] = Side_Teams [ j ] then
2832: LD_EXP 38
2836: PUSH
2837: LD_VAR 0 2
2841: ARRAY
2842: PUSH
2843: LD_EXP 38
2847: PUSH
2848: LD_VAR 0 3
2852: ARRAY
2853: EQUAL
2854: IFFALSE 2878
// SetAttitude ( i , j , att_friend , true ) else
2856: LD_VAR 0 2
2860: PPUSH
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_INT 1
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: CALL_OW 80
2876: GO 2898
// SetAttitude ( i , j , att_enemy , true ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: CALL_OW 80
2898: GO 2785
2900: POP
2901: POP
2902: GO 2769
2904: POP
2905: POP
// end ; end ;
2906: LD_VAR 0 1
2910: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
2916: PPUSH
// result := [ ] ;
2917: LD_ADDR_VAR 0 6
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// for i := 1 to count do
2924: LD_ADDR_VAR 0 7
2928: PUSH
2929: DOUBLE
2930: LD_INT 1
2932: DEC
2933: ST_TO_ADDR
2934: LD_VAR 0 1
2938: PUSH
2939: FOR_TO
2940: IFFALSE 3334
// begin uc_direction := Rand ( 0 , 5 ) ;
2942: LD_ADDR_OWVAR 24
2946: PUSH
2947: LD_INT 0
2949: PPUSH
2950: LD_INT 5
2952: PPUSH
2953: CALL_OW 12
2957: ST_TO_ADDR
// if commander then
2958: LD_LOC 1
2962: IFFALSE 3071
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2964: LD_ADDR_OWVAR 26
2968: PUSH
2969: LD_OWVAR 19
2973: PUSH
2974: LD_OWVAR 20
2978: ARRAY
2979: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 2
2985: PPUSH
2986: CALL_OW 12
2990: PPUSH
2991: LD_VAR 0 2
2995: PPUSH
2996: LD_EXP 20
3000: PUSH
3001: LD_INT 2
3003: PLUS
3004: PPUSH
3005: CALL_OW 380
// hc_importance := 105 ;
3009: LD_ADDR_OWVAR 32
3013: PUSH
3014: LD_INT 105
3016: ST_TO_ADDR
// commander := false ;
3017: LD_ADDR_LOC 1
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// if Multiplayer then
3025: LD_OWVAR 4
3029: IFFALSE 3069
// begin hc_gallery := MULTIAVATARS ;
3031: LD_ADDR_OWVAR 33
3035: PUSH
3036: LD_STRING MULTIAVATARS
3038: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3039: LD_ADDR_OWVAR 34
3043: PUSH
3044: LD_OWVAR 20
3048: PPUSH
3049: CALL_OW 525
3053: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3054: LD_ADDR_OWVAR 27
3058: PUSH
3059: LD_OWVAR 20
3063: PPUSH
3064: CALL_OW 526
3068: ST_TO_ADDR
// end ; end else
3069: GO 3134
// begin hc_name :=  ;
3071: LD_ADDR_OWVAR 26
3075: PUSH
3076: LD_STRING 
3078: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
3079: LD_INT 1
3081: PPUSH
3082: LD_INT 2
3084: PPUSH
3085: CALL_OW 12
3089: PPUSH
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_EXP 20
3099: PPUSH
3100: CALL_OW 380
// hc_importance := 0 ;
3104: LD_ADDR_OWVAR 32
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// if Multiplayer then
3112: LD_OWVAR 4
3116: IFFALSE 3134
// begin hc_gallery :=  ;
3118: LD_ADDR_OWVAR 33
3122: PUSH
3123: LD_STRING 
3125: ST_TO_ADDR
// hc_face_number := 0 ;
3126: LD_ADDR_OWVAR 34
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3134: LD_ADDR_VAR 0 9
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// if global_defined then
3144: LD_LOC 3
3148: IFFALSE 3286
// begin j := i ;
3150: LD_ADDR_VAR 0 8
3154: PUSH
3155: LD_VAR 0 7
3159: ST_TO_ADDR
// if cl = class_soldier then
3160: LD_VAR 0 2
3164: PUSH
3165: LD_INT 1
3167: EQUAL
3168: IFFALSE 3186
// j := i + soldiers_created ;
3170: LD_ADDR_VAR 0 8
3174: PUSH
3175: LD_VAR 0 7
3179: PUSH
3180: LD_LOC 4
3184: PLUS
3185: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3186: LD_LOC 2
3190: PUSH
3191: LD_VAR 0 2
3195: ARRAY
3196: PUSH
3197: LD_VAR 0 8
3201: ARRAY
3202: PPUSH
3203: LD_VAR 0 9
3207: PPUSH
3208: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3212: LD_VAR 0 9
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_LOC 2
3224: PUSH
3225: LD_VAR 0 2
3229: ARRAY
3230: PUSH
3231: LD_VAR 0 8
3235: ARRAY
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: CALL_OW 260
3244: PPUSH
3245: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3249: LD_VAR 0 9
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: PUSH
3268: LD_VAR 0 8
3272: ARRAY
3273: PPUSH
3274: LD_INT 1
3276: PPUSH
3277: CALL_OW 260
3281: PPUSH
3282: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
3286: LD_VAR 0 9
3290: PPUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_VAR 0 4
3300: PPUSH
3301: LD_VAR 0 5
3305: PPUSH
3306: LD_INT 0
3308: PPUSH
3309: CALL_OW 50
// result := result ^ [ un ] ;
3313: LD_ADDR_VAR 0 6
3317: PUSH
3318: LD_VAR 0 6
3322: PUSH
3323: LD_VAR 0 9
3327: PUSH
3328: EMPTY
3329: LIST
3330: ADD
3331: ST_TO_ADDR
// end ;
3332: GO 2939
3334: POP
3335: POP
// if not global_defined then
3336: LD_LOC 3
3340: NOT
3341: IFFALSE 3403
// if cl = class_soldier and global_units then
3343: LD_VAR 0 2
3347: PUSH
3348: LD_INT 1
3350: EQUAL
3351: PUSH
3352: LD_LOC 2
3356: AND
3357: IFFALSE 3384
// global_units := [ global_units [ 1 ] ^ result ] else
3359: LD_ADDR_LOC 2
3363: PUSH
3364: LD_LOC 2
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PUSH
3373: LD_VAR 0 6
3377: ADD
3378: PUSH
3379: EMPTY
3380: LIST
3381: ST_TO_ADDR
3382: GO 3403
// global_units := global_units ^ [ result ] ;
3384: LD_ADDR_LOC 2
3388: PUSH
3389: LD_LOC 2
3393: PUSH
3394: LD_VAR 0 6
3398: PUSH
3399: EMPTY
3400: LIST
3401: ADD
3402: ST_TO_ADDR
// end ;
3403: LD_VAR 0 6
3407: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3408: LD_INT 0
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
3414: PPUSH
3415: PPUSH
3416: PPUSH
3417: PPUSH
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
3422: PPUSH
// pos := Side_Positions [ side ] ;
3423: LD_ADDR_VAR 0 3
3427: PUSH
3428: LD_EXP 40
3432: PUSH
3433: LD_VAR 0 1
3437: ARRAY
3438: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3439: LD_ADDR_OWVAR 21
3443: PUSH
3444: LD_EXP 41
3448: PUSH
3449: LD_VAR 0 1
3453: ARRAY
3454: ST_TO_ADDR
// uc_side := side ;
3455: LD_ADDR_OWVAR 20
3459: PUSH
3460: LD_VAR 0 1
3464: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3465: LD_ADDR_VAR 0 4
3469: PUSH
3470: LD_EXP 45
3474: PUSH
3475: LD_VAR 0 3
3479: ARRAY
3480: PUSH
3481: LD_INT 1
3483: ARRAY
3484: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3485: LD_ADDR_VAR 0 5
3489: PUSH
3490: LD_EXP 45
3494: PUSH
3495: LD_VAR 0 3
3499: ARRAY
3500: PUSH
3501: LD_INT 2
3503: ARRAY
3504: ST_TO_ADDR
// if is_depot then
3505: LD_EXP 17
3509: IFFALSE 3652
// begin bc_type = b_depot ;
3511: LD_ADDR_OWVAR 42
3515: PUSH
3516: LD_INT 0
3518: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3519: LD_ADDR_VAR 0 10
3523: PUSH
3524: LD_VAR 0 4
3528: PPUSH
3529: LD_VAR 0 5
3533: PPUSH
3534: LD_EXP 45
3538: PUSH
3539: LD_VAR 0 3
3543: ARRAY
3544: PUSH
3545: LD_INT 3
3547: ARRAY
3548: PPUSH
3549: CALL_OW 47
3553: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3554: LD_VAR 0 10
3558: PPUSH
3559: LD_STRING @
3561: PUSH
3562: LD_VAR 0 1
3566: STR
3567: PPUSH
3568: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3572: LD_VAR 0 10
3576: PPUSH
3577: CALL_OW 274
3581: PPUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_EXP 22
3589: PUSH
3590: LD_INT 1
3592: ARRAY
3593: PPUSH
3594: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3598: LD_VAR 0 10
3602: PPUSH
3603: CALL_OW 274
3607: PPUSH
3608: LD_INT 2
3610: PPUSH
3611: LD_EXP 22
3615: PUSH
3616: LD_INT 2
3618: ARRAY
3619: PPUSH
3620: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3624: LD_VAR 0 2
3628: PPUSH
3629: CALL_OW 274
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: LD_EXP 22
3641: PUSH
3642: LD_INT 3
3644: ARRAY
3645: PPUSH
3646: CALL_OW 277
// end else
3650: GO 3796
// begin for i := 1 to 3 do
3652: LD_ADDR_VAR 0 6
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 3
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3794
// begin r := starting_resources [ i ] ;
3668: LD_ADDR_VAR 0 7
3672: PUSH
3673: LD_EXP 22
3677: PUSH
3678: LD_VAR 0 6
3682: ARRAY
3683: ST_TO_ADDR
// while r >= 10 do
3684: LD_VAR 0 7
3688: PUSH
3689: LD_INT 10
3691: GREATEREQUAL
3692: IFFALSE 3792
// if r > 50 then
3694: LD_VAR 0 7
3698: PUSH
3699: LD_INT 50
3701: GREATER
3702: IFFALSE 3748
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3704: LD_VAR 0 6
3708: PPUSH
3709: LD_INT 5
3711: PPUSH
3712: LD_VAR 0 4
3716: PPUSH
3717: LD_VAR 0 5
3721: PPUSH
3722: LD_INT 4
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: CALL_OW 60
// r := r - 50 ;
3732: LD_ADDR_VAR 0 7
3736: PUSH
3737: LD_VAR 0 7
3741: PUSH
3742: LD_INT 50
3744: MINUS
3745: ST_TO_ADDR
// end else
3746: GO 3790
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3748: LD_VAR 0 6
3752: PPUSH
3753: LD_VAR 0 7
3757: PUSH
3758: LD_INT 10
3760: DIV
3761: PPUSH
3762: LD_VAR 0 4
3766: PPUSH
3767: LD_VAR 0 5
3771: PPUSH
3772: LD_INT 4
3774: PPUSH
3775: LD_INT 0
3777: PPUSH
3778: CALL_OW 60
// r := 0 ;
3782: LD_ADDR_VAR 0 7
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// end ;
3790: GO 3684
// end ;
3792: GO 3665
3794: POP
3795: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3796: LD_ADDR_VAR 0 4
3800: PUSH
3801: LD_EXP 47
3805: PUSH
3806: LD_VAR 0 3
3810: ARRAY
3811: PUSH
3812: LD_INT 1
3814: ARRAY
3815: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3816: LD_ADDR_VAR 0 5
3820: PUSH
3821: LD_EXP 47
3825: PUSH
3826: LD_VAR 0 3
3830: ARRAY
3831: PUSH
3832: LD_INT 2
3834: ARRAY
3835: ST_TO_ADDR
// for r in starting_crates do
3836: LD_ADDR_VAR 0 7
3840: PUSH
3841: LD_EXP 21
3845: PUSH
3846: FOR_IN
3847: IFFALSE 3879
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3849: LD_INT 1
3851: PPUSH
3852: LD_INT 5
3854: PPUSH
3855: LD_VAR 0 4
3859: PPUSH
3860: LD_VAR 0 5
3864: PPUSH
3865: LD_VAR 0 7
3869: PPUSH
3870: LD_INT 0
3872: PPUSH
3873: CALL_OW 60
3877: GO 3846
3879: POP
3880: POP
// if def_morale_flags then
3881: LD_EXP 10
3885: IFFALSE 3964
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3887: LD_ADDR_EXP 49
3891: PUSH
3892: LD_EXP 49
3896: PUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: LD_VAR 0 4
3906: PPUSH
3907: LD_VAR 0 5
3911: PPUSH
3912: LD_INT 1
3914: PUSH
3915: LD_INT 100
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 2
3924: PUSH
3925: LD_INT 50
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 20
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 20
3944: PUSH
3945: LD_INT 100
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 418
3962: ADD
3963: ST_TO_ADDR
// neng := number_of_people ;
3964: LD_ADDR_VAR 0 11
3968: PUSH
3969: LD_EXP 19
3973: ST_TO_ADDR
// nsol := number_of_breastworks ;
3974: LD_ADDR_VAR 0 14
3978: PUSH
3979: LD_EXP 18
3983: ST_TO_ADDR
// if nsol < neng div 4 then
3984: LD_VAR 0 14
3988: PUSH
3989: LD_VAR 0 11
3993: PUSH
3994: LD_INT 4
3996: DIV
3997: LESS
3998: IFFALSE 4014
// nsol := neng div 4 ;
4000: LD_ADDR_VAR 0 14
4004: PUSH
4005: LD_VAR 0 11
4009: PUSH
4010: LD_INT 4
4012: DIV
4013: ST_TO_ADDR
// neng := neng - nsol ;
4014: LD_ADDR_VAR 0 11
4018: PUSH
4019: LD_VAR 0 11
4023: PUSH
4024: LD_VAR 0 14
4028: MINUS
4029: ST_TO_ADDR
// nsci := neng div 3 ;
4030: LD_ADDR_VAR 0 12
4034: PUSH
4035: LD_VAR 0 11
4039: PUSH
4040: LD_INT 3
4042: DIV
4043: ST_TO_ADDR
// if nsci < 1 then
4044: LD_VAR 0 12
4048: PUSH
4049: LD_INT 1
4051: LESS
4052: IFFALSE 4062
// nsci := 1 ;
4054: LD_ADDR_VAR 0 12
4058: PUSH
4059: LD_INT 1
4061: ST_TO_ADDR
// neng := neng - nsci ;
4062: LD_ADDR_VAR 0 11
4066: PUSH
4067: LD_VAR 0 11
4071: PUSH
4072: LD_VAR 0 12
4076: MINUS
4077: ST_TO_ADDR
// nmech := neng div 2 ;
4078: LD_ADDR_VAR 0 13
4082: PUSH
4083: LD_VAR 0 11
4087: PUSH
4088: LD_INT 2
4090: DIV
4091: ST_TO_ADDR
// neng := neng - nmech ;
4092: LD_ADDR_VAR 0 11
4096: PUSH
4097: LD_VAR 0 11
4101: PUSH
4102: LD_VAR 0 13
4106: MINUS
4107: ST_TO_ADDR
// if neng < 1 then
4108: LD_VAR 0 11
4112: PUSH
4113: LD_INT 1
4115: LESS
4116: IFFALSE 4126
// neng := 1 ;
4118: LD_ADDR_VAR 0 11
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// commander := true ;
4126: LD_ADDR_LOC 1
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// soldiers_created := 0 ;
4134: LD_ADDR_LOC 4
4138: PUSH
4139: LD_INT 0
4141: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4142: LD_ADDR_VAR 0 6
4146: PUSH
4147: DOUBLE
4148: LD_INT 1
4150: DEC
4151: ST_TO_ADDR
4152: LD_EXP 18
4156: PUSH
4157: FOR_TO
4158: IFFALSE 4402
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4160: LD_ADDR_VAR 0 4
4164: PUSH
4165: LD_EXP 46
4169: PUSH
4170: LD_VAR 0 3
4174: ARRAY
4175: PUSH
4176: LD_VAR 0 6
4180: ARRAY
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4186: LD_ADDR_VAR 0 5
4190: PUSH
4191: LD_EXP 46
4195: PUSH
4196: LD_VAR 0 3
4200: ARRAY
4201: PUSH
4202: LD_VAR 0 6
4206: ARRAY
4207: PUSH
4208: LD_INT 2
4210: ARRAY
4211: ST_TO_ADDR
// bc_type := b_breastwork ;
4212: LD_ADDR_OWVAR 42
4216: PUSH
4217: LD_INT 31
4219: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4220: LD_ADDR_VAR 0 9
4224: PUSH
4225: LD_VAR 0 4
4229: PPUSH
4230: LD_VAR 0 5
4234: PPUSH
4235: LD_EXP 46
4239: PUSH
4240: LD_VAR 0 3
4244: ARRAY
4245: PUSH
4246: LD_VAR 0 6
4250: ARRAY
4251: PUSH
4252: LD_INT 3
4254: ARRAY
4255: PPUSH
4256: CALL_OW 47
4260: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4261: LD_ADDR_VAR 0 4
4265: PUSH
4266: LD_VAR 0 4
4270: PPUSH
4271: LD_EXP 46
4275: PUSH
4276: LD_VAR 0 3
4280: ARRAY
4281: PUSH
4282: LD_VAR 0 6
4286: ARRAY
4287: PUSH
4288: LD_INT 3
4290: ARRAY
4291: PPUSH
4292: LD_INT 2
4294: PPUSH
4295: CALL_OW 272
4299: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4300: LD_ADDR_VAR 0 5
4304: PUSH
4305: LD_VAR 0 5
4309: PPUSH
4310: LD_EXP 46
4314: PUSH
4315: LD_VAR 0 3
4319: ARRAY
4320: PUSH
4321: LD_VAR 0 6
4325: ARRAY
4326: PUSH
4327: LD_INT 3
4329: ARRAY
4330: PPUSH
4331: LD_INT 2
4333: PPUSH
4334: CALL_OW 273
4338: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
4339: LD_ADDR_VAR 0 8
4343: PUSH
4344: LD_INT 1
4346: PPUSH
4347: LD_INT 1
4349: PPUSH
4350: LD_VAR 0 4
4354: PPUSH
4355: LD_VAR 0 5
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: CALL 2911 0 5
4367: PUSH
4368: LD_INT 1
4370: ARRAY
4371: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4372: LD_ADDR_LOC 4
4376: PUSH
4377: LD_LOC 4
4381: PUSH
4382: LD_INT 1
4384: PLUS
4385: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4386: LD_VAR 0 8
4390: PPUSH
4391: LD_VAR 0 9
4395: PPUSH
4396: CALL_OW 120
// end ;
4400: GO 4157
4402: POP
4403: POP
// x := start_def [ pos ] [ 1 ] ;
4404: LD_ADDR_VAR 0 4
4408: PUSH
4409: LD_EXP 47
4413: PUSH
4414: LD_VAR 0 3
4418: ARRAY
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4424: LD_ADDR_VAR 0 5
4428: PUSH
4429: LD_EXP 47
4433: PUSH
4434: LD_VAR 0 3
4438: ARRAY
4439: PUSH
4440: LD_INT 2
4442: ARRAY
4443: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4444: LD_VAR 0 14
4448: PUSH
4449: LD_EXP 18
4453: MINUS
4454: PPUSH
4455: LD_INT 1
4457: PPUSH
4458: LD_VAR 0 4
4462: PPUSH
4463: LD_VAR 0 5
4467: PPUSH
4468: LD_INT 5
4470: PPUSH
4471: CALL 2911 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4475: LD_VAR 0 11
4479: PPUSH
4480: LD_INT 2
4482: PPUSH
4483: LD_VAR 0 4
4487: PPUSH
4488: LD_VAR 0 5
4492: PPUSH
4493: LD_INT 5
4495: PPUSH
4496: CALL 2911 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4500: LD_VAR 0 13
4504: PPUSH
4505: LD_INT 3
4507: PPUSH
4508: LD_VAR 0 4
4512: PPUSH
4513: LD_VAR 0 5
4517: PPUSH
4518: LD_INT 5
4520: PPUSH
4521: CALL 2911 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4525: LD_VAR 0 12
4529: PPUSH
4530: LD_INT 4
4532: PPUSH
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_VAR 0 5
4542: PPUSH
4543: LD_INT 5
4545: PPUSH
4546: CALL 2911 0 5
// if not global_defined then
4550: LD_LOC 3
4554: NOT
4555: IFFALSE 4565
// global_defined := true ;
4557: LD_ADDR_LOC 3
4561: PUSH
4562: LD_INT 1
4564: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4565: LD_EXP 11
4569: PUSH
4570: LD_INT 20
4572: PPUSH
4573: LD_VAR 0 1
4577: PPUSH
4578: CALL_OW 321
4582: PUSH
4583: LD_INT 1
4585: EQUAL
4586: AND
4587: IFFALSE 4604
// SetTech ( tech_SibDet , side , state_researched ) ;
4589: LD_INT 20
4591: PPUSH
4592: LD_VAR 0 1
4596: PPUSH
4597: LD_INT 2
4599: PPUSH
4600: CALL_OW 322
// if def_siberite_bomb = 1 then
4604: LD_EXP 14
4608: PUSH
4609: LD_INT 1
4611: EQUAL
4612: IFFALSE 4646
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4614: LD_INT 25
4616: PPUSH
4617: LD_VAR 0 1
4621: PPUSH
4622: LD_INT 1
4624: PPUSH
4625: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4629: LD_INT 73
4631: PPUSH
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: CALL_OW 322
// end else
4644: GO 4676
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4646: LD_INT 25
4648: PPUSH
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_INT 0
4656: PPUSH
4657: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4661: LD_INT 73
4663: PPUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4676: LD_INT 24
4678: PPUSH
4679: LD_VAR 0 1
4683: PPUSH
4684: LD_INT 0
4686: PPUSH
4687: CALL_OW 322
// end ;
4691: LD_VAR 0 2
4695: RET
// every 0 0$1 do
4696: GO 4698
4698: DISABLE
// if ( def_siberite_bomb > 1 ) then
4699: LD_EXP 14
4703: PUSH
4704: LD_INT 1
4706: GREATER
4707: IFFALSE 4722
// begin wait ( siberite_bomb_Delay ) ;
4709: LD_EXP 33
4713: PPUSH
4714: CALL_OW 67
// EnableSibFiss ;
4718: CALL 4723 0 0
// end ;
4722: END
// function EnableSibFiss ; var i ; begin
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
// for i := 1 to 8 do
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_INT 8
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4787
// if Side_Positions [ i ] then
4743: LD_EXP 40
4747: PUSH
4748: LD_VAR 0 2
4752: ARRAY
4753: IFFALSE 4785
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4755: LD_INT 25
4757: PPUSH
4758: LD_VAR 0 2
4762: PPUSH
4763: LD_INT 1
4765: PPUSH
4766: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4770: LD_INT 73
4772: PPUSH
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL_OW 322
// end ;
4785: GO 4740
4787: POP
4788: POP
// end ;
4789: LD_VAR 0 1
4793: RET
// function prepare_sides ; var i ; begin
4794: LD_INT 0
4796: PPUSH
4797: PPUSH
// global_units := [ ] ;
4798: LD_ADDR_LOC 2
4802: PUSH
4803: EMPTY
4804: ST_TO_ADDR
// global_defined := false ;
4805: LD_ADDR_LOC 3
4809: PUSH
4810: LD_INT 0
4812: ST_TO_ADDR
// for i := 1 to 8 do
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: DOUBLE
4819: LD_INT 1
4821: DEC
4822: ST_TO_ADDR
4823: LD_INT 8
4825: PUSH
4826: FOR_TO
4827: IFFALSE 4852
// if Side_Positions [ i ] then
4829: LD_EXP 40
4833: PUSH
4834: LD_VAR 0 2
4838: ARRAY
4839: IFFALSE 4850
// prepare_side ( i ) ;
4841: LD_VAR 0 2
4845: PPUSH
4846: CALL 3408 0 1
4850: GO 4826
4852: POP
4853: POP
// end ;
4854: LD_VAR 0 1
4858: RET
// starting begin disable ( 400 ) ;
4859: LD_INT 400
4861: DISABLE_MARKED
// disable ( 401 ) ;
4862: LD_INT 401
4864: DISABLE_MARKED
// mp_selectmsg := true ;
4865: LD_ADDR_OWVAR 13
4869: PUSH
4870: LD_INT 1
4872: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4873: CALL 0 0 0
// prepare_map_coordinates ;
4877: CALL 1654 0 0
// set_shared_visions_and_alliances ;
4881: CALL 2494 0 0
// prepare_sides ;
4885: CALL 4794 0 0
// Init_Win_Condition ;
4889: CALL 6661 0 0
// AnimateTrees ( true ) ;
4893: LD_INT 1
4895: PPUSH
4896: CALL_OW 573
// InitApeman ;
4900: CALL 9011 0 0
// init_shipments_and_respawning ;
4904: CALL 4989 0 0
// init_infos ;
4908: CALL 7358 0 0
// your_side := Player_Side ;
4912: LD_ADDR_OWVAR 2
4916: PUSH
4917: LD_EXP 36
4921: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4922: LD_ADDR_OWVAR 71
4926: PUSH
4927: LD_EXP 41
4931: PUSH
4932: LD_OWVAR 2
4936: ARRAY
4937: ST_TO_ADDR
// ResetFog ;
4938: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4942: LD_EXP 47
4946: PUSH
4947: LD_EXP 40
4951: PUSH
4952: LD_OWVAR 2
4956: ARRAY
4957: ARRAY
4958: PUSH
4959: LD_INT 1
4961: ARRAY
4962: PPUSH
4963: LD_EXP 47
4967: PUSH
4968: LD_EXP 40
4972: PUSH
4973: LD_OWVAR 2
4977: ARRAY
4978: ARRAY
4979: PUSH
4980: LD_INT 2
4982: ARRAY
4983: PPUSH
4984: CALL_OW 86
// end ; end_of_file
4988: END
// var shipment1 , shipment2 , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4989: LD_INT 0
4991: PPUSH
// shipment1 := [ ] ;
4992: LD_ADDR_LOC 5
4996: PUSH
4997: EMPTY
4998: ST_TO_ADDR
// shipment2 := [ ] ;
4999: LD_ADDR_LOC 6
5003: PUSH
5004: EMPTY
5005: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
5006: LD_ADDR_LOC 7
5010: PUSH
5011: LD_INT 1
5013: PPUSH
5014: LD_INT 8
5016: PPUSH
5017: CALL_OW 12
5021: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5022: LD_ADDR_LOC 8
5026: PUSH
5027: LD_INT 0
5029: PUSH
5030: LD_INT 0
5032: PUSH
5033: LD_INT 0
5035: PUSH
5036: LD_INT 0
5038: PUSH
5039: LD_INT 0
5041: PUSH
5042: LD_INT 0
5044: PUSH
5045: LD_INT 0
5047: PUSH
5048: LD_INT 0
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: ST_TO_ADDR
// end ;
5061: LD_VAR 0 1
5065: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5066: GO 5068
5068: DISABLE
5069: LD_INT 0
5071: PPUSH
5072: PPUSH
5073: PPUSH
5074: PPUSH
// begin if respawning_time_max = 0 then
5075: LD_EXP 26
5079: PUSH
5080: LD_INT 0
5082: EQUAL
5083: IFFALSE 5087
// exit ;
5085: GO 5594
// if respawn = 8 then
5087: LD_LOC 7
5091: PUSH
5092: LD_INT 8
5094: EQUAL
5095: IFFALSE 5107
// respawn := 1 else
5097: LD_ADDR_LOC 7
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
5105: GO 5121
// respawn := respawn + 1 ;
5107: LD_ADDR_LOC 7
5111: PUSH
5112: LD_LOC 7
5116: PUSH
5117: LD_INT 1
5119: PLUS
5120: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5121: LD_EXP 40
5125: PUSH
5126: LD_LOC 7
5130: ARRAY
5131: PUSH
5132: LD_LOC 8
5136: PUSH
5137: LD_LOC 7
5141: ARRAY
5142: NOT
5143: AND
5144: IFFALSE 5593
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5146: LD_ADDR_VAR 0 1
5150: PUSH
5151: LD_INT 21
5153: PUSH
5154: LD_INT 1
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: PUSH
5161: LD_INT 22
5163: PUSH
5164: LD_LOC 7
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: LD_INT 3
5175: PUSH
5176: LD_INT 23
5178: PUSH
5179: LD_INT 0
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: PPUSH
5192: CALL_OW 69
5196: ST_TO_ADDR
// if n < number_of_people then
5197: LD_VAR 0 1
5201: PUSH
5202: LD_EXP 19
5206: LESS
5207: IFFALSE 5590
// begin aktresp := respawn ;
5209: LD_ADDR_VAR 0 3
5213: PUSH
5214: LD_LOC 7
5218: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5219: LD_ADDR_LOC 8
5223: PUSH
5224: LD_LOC 8
5228: PPUSH
5229: LD_VAR 0 3
5233: PPUSH
5234: LD_INT 1
5236: PPUSH
5237: CALL_OW 1
5241: ST_TO_ADDR
// enable ;
5242: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5243: LD_EXP 25
5247: PPUSH
5248: LD_EXP 26
5252: PPUSH
5253: CALL_OW 12
5257: PPUSH
5258: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5262: LD_ADDR_LOC 8
5266: PUSH
5267: LD_LOC 8
5271: PPUSH
5272: LD_VAR 0 3
5276: PPUSH
5277: LD_INT 0
5279: PPUSH
5280: CALL_OW 1
5284: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5285: LD_ADDR_VAR 0 2
5289: PUSH
5290: LD_INT 21
5292: PUSH
5293: LD_INT 3
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: LD_INT 2
5302: PUSH
5303: LD_INT 30
5305: PUSH
5306: LD_INT 0
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 30
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: LIST
5327: PUSH
5328: LD_INT 50
5330: PUSH
5331: EMPTY
5332: LIST
5333: PUSH
5334: LD_INT 22
5336: PUSH
5337: LD_VAR 0 3
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: EMPTY
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: PPUSH
5352: CALL_OW 69
5356: ST_TO_ADDR
// if building_list = 0 then
5357: LD_VAR 0 2
5361: PUSH
5362: LD_INT 0
5364: EQUAL
5365: IFFALSE 5410
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5367: LD_ADDR_VAR 0 2
5371: PUSH
5372: LD_INT 21
5374: PUSH
5375: LD_INT 3
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: LD_INT 50
5384: PUSH
5385: EMPTY
5386: LIST
5387: PUSH
5388: LD_INT 22
5390: PUSH
5391: LD_VAR 0 3
5395: PUSH
5396: EMPTY
5397: LIST
5398: LIST
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: LIST
5404: PPUSH
5405: CALL_OW 69
5409: ST_TO_ADDR
// if building_list = 0 then
5410: LD_VAR 0 2
5414: PUSH
5415: LD_INT 0
5417: EQUAL
5418: IFFALSE 5422
// exit ;
5420: GO 5594
// hc_name :=  ;
5422: LD_ADDR_OWVAR 26
5426: PUSH
5427: LD_STRING 
5429: ST_TO_ADDR
// hc_importance := 0 ;
5430: LD_ADDR_OWVAR 32
5434: PUSH
5435: LD_INT 0
5437: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5438: LD_INT 0
5440: PPUSH
5441: LD_INT 0
5443: PPUSH
5444: LD_EXP 20
5448: PUSH
5449: LD_INT 2
5451: DIV
5452: PPUSH
5453: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5457: LD_ADDR_OWVAR 21
5461: PUSH
5462: LD_EXP 41
5466: PUSH
5467: LD_VAR 0 3
5471: ARRAY
5472: ST_TO_ADDR
// uc_side := aktresp ;
5473: LD_ADDR_OWVAR 20
5477: PUSH
5478: LD_VAR 0 3
5482: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5483: LD_ADDR_VAR 0 4
5487: PUSH
5488: LD_VAR 0 2
5492: PUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_VAR 0 2
5500: PUSH
5501: LD_INT 0
5503: PLUS
5504: PPUSH
5505: CALL_OW 12
5509: ARRAY
5510: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5511: LD_VAR 0 4
5515: PPUSH
5516: CALL_OW 266
5520: PUSH
5521: LD_INT 0
5523: PUSH
5524: LD_INT 1
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: IN
5531: IFFALSE 5543
// n = 25 else
5533: LD_ADDR_VAR 0 1
5537: PUSH
5538: LD_INT 25
5540: ST_TO_ADDR
5541: GO 5551
// n = 10 ;
5543: LD_ADDR_VAR 0 1
5547: PUSH
5548: LD_INT 10
5550: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5551: CALL_OW 44
5555: PPUSH
5556: LD_VAR 0 4
5560: PPUSH
5561: CALL_OW 250
5565: PPUSH
5566: LD_VAR 0 4
5570: PPUSH
5571: CALL_OW 251
5575: PPUSH
5576: LD_VAR 0 1
5580: PPUSH
5581: LD_INT 1
5583: PPUSH
5584: CALL_OW 50
// end else
5588: GO 5591
// enable ;
5590: ENABLE
// end else
5591: GO 5594
// enable ;
5593: ENABLE
// end ;
5594: PPOPN 4
5596: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
5597: GO 5599
5599: DISABLE
5600: LD_INT 0
5602: PPUSH
5603: PPUSH
// begin case tick of 1 .. 1 1$0 :
5604: LD_OWVAR 1
5608: PUSH
5609: LD_INT 1
5611: DOUBLE
5612: GREATEREQUAL
5613: IFFALSE 5621
5615: LD_INT 2100
5617: DOUBLE
5618: LESSEQUAL
5619: IFTRUE 5623
5621: GO 5634
5623: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5624: LD_ADDR_VAR 0 1
5628: PUSH
5629: LD_INT 150
5631: ST_TO_ADDR
5632: GO 5817
5634: LD_INT 2100
5636: PUSH
5637: LD_INT 1
5639: PLUS
5640: DOUBLE
5641: GREATEREQUAL
5642: IFFALSE 5650
5644: LD_INT 10500
5646: DOUBLE
5647: LESSEQUAL
5648: IFTRUE 5652
5650: GO 5663
5652: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5653: LD_ADDR_VAR 0 1
5657: PUSH
5658: LD_INT 100
5660: ST_TO_ADDR
5661: GO 5817
5663: LD_INT 10500
5665: PUSH
5666: LD_INT 1
5668: PLUS
5669: DOUBLE
5670: GREATEREQUAL
5671: IFFALSE 5679
5673: LD_INT 21000
5675: DOUBLE
5676: LESSEQUAL
5677: IFTRUE 5681
5679: GO 5692
5681: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5682: LD_ADDR_VAR 0 1
5686: PUSH
5687: LD_INT 90
5689: ST_TO_ADDR
5690: GO 5817
5692: LD_INT 21000
5694: PUSH
5695: LD_INT 1
5697: PLUS
5698: DOUBLE
5699: GREATEREQUAL
5700: IFFALSE 5708
5702: LD_INT 42000
5704: DOUBLE
5705: LESSEQUAL
5706: IFTRUE 5710
5708: GO 5721
5710: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5711: LD_ADDR_VAR 0 1
5715: PUSH
5716: LD_INT 70
5718: ST_TO_ADDR
5719: GO 5817
5721: LD_INT 42000
5723: PUSH
5724: LD_INT 1
5726: PLUS
5727: DOUBLE
5728: GREATEREQUAL
5729: IFFALSE 5737
5731: LD_INT 63000
5733: DOUBLE
5734: LESSEQUAL
5735: IFTRUE 5739
5737: GO 5750
5739: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5740: LD_ADDR_VAR 0 1
5744: PUSH
5745: LD_INT 60
5747: ST_TO_ADDR
5748: GO 5817
5750: LD_INT 63000
5752: PUSH
5753: LD_INT 1
5755: PLUS
5756: DOUBLE
5757: GREATEREQUAL
5758: IFFALSE 5766
5760: LD_INT 105000
5762: DOUBLE
5763: LESSEQUAL
5764: IFTRUE 5768
5766: GO 5779
5768: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5769: LD_ADDR_VAR 0 1
5773: PUSH
5774: LD_INT 35
5776: ST_TO_ADDR
5777: GO 5817
5779: LD_INT 105000
5781: PUSH
5782: LD_INT 1
5784: PLUS
5785: DOUBLE
5786: GREATEREQUAL
5787: IFFALSE 5795
5789: LD_INT 630000
5791: DOUBLE
5792: LESSEQUAL
5793: IFTRUE 5797
5795: GO 5808
5797: POP
// d := 20 ; else
5798: LD_ADDR_VAR 0 1
5802: PUSH
5803: LD_INT 20
5805: ST_TO_ADDR
5806: GO 5817
5808: POP
// d := 0 ; end ;
5809: LD_ADDR_VAR 0 1
5813: PUSH
5814: LD_INT 0
5816: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
5817: LD_INT 1
5819: PPUSH
5820: LD_INT 10000
5822: PPUSH
5823: CALL_OW 12
5827: PUSH
5828: LD_VAR 0 1
5832: PUSH
5833: LD_EXP 23
5837: MUL
5838: PUSH
5839: LD_INT 2
5841: DIV
5842: LESSEQUAL
5843: IFFALSE 5966
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5845: LD_INT 1
5847: PPUSH
5848: LD_INT 140
5850: PPUSH
5851: CALL_OW 12
5855: PPUSH
5856: CALL_OW 67
// if shipment1 = [ ] then
5860: LD_LOC 5
5864: PUSH
5865: EMPTY
5866: EQUAL
5867: IFFALSE 5908
// shipment1 := [ base1 , base2 , base3 , base4 , safe1 , safe2 , safe3 , safe4 ] ;
5869: LD_ADDR_LOC 5
5873: PUSH
5874: LD_INT 18
5876: PUSH
5877: LD_INT 19
5879: PUSH
5880: LD_INT 20
5882: PUSH
5883: LD_INT 21
5885: PUSH
5886: LD_INT 26
5888: PUSH
5889: LD_INT 27
5891: PUSH
5892: LD_INT 28
5894: PUSH
5895: LD_INT 29
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: LIST
5906: LIST
5907: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
5908: LD_ADDR_VAR 0 2
5912: PUSH
5913: LD_LOC 5
5917: PUSH
5918: LD_INT 1
5920: PPUSH
5921: LD_LOC 5
5925: PPUSH
5926: CALL_OW 12
5930: ARRAY
5931: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
5932: LD_ADDR_LOC 5
5936: PUSH
5937: LD_LOC 5
5941: PUSH
5942: LD_VAR 0 2
5946: PUSH
5947: EMPTY
5948: LIST
5949: DIFF
5950: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
5951: LD_INT 5
5953: PPUSH
5954: LD_VAR 0 2
5958: PPUSH
5959: LD_INT 1
5961: PPUSH
5962: CALL_OW 55
// end ; enable ;
5966: ENABLE
// end ;
5967: PPOPN 2
5969: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
5970: GO 5972
5972: DISABLE
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
// begin case tick of 1 .. 1 1$0 :
5977: LD_OWVAR 1
5981: PUSH
5982: LD_INT 1
5984: DOUBLE
5985: GREATEREQUAL
5986: IFFALSE 5994
5988: LD_INT 2100
5990: DOUBLE
5991: LESSEQUAL
5992: IFTRUE 5996
5994: GO 6007
5996: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5997: LD_ADDR_VAR 0 1
6001: PUSH
6002: LD_INT 150
6004: ST_TO_ADDR
6005: GO 6190
6007: LD_INT 2100
6009: PUSH
6010: LD_INT 1
6012: PLUS
6013: DOUBLE
6014: GREATEREQUAL
6015: IFFALSE 6023
6017: LD_INT 10500
6019: DOUBLE
6020: LESSEQUAL
6021: IFTRUE 6025
6023: GO 6036
6025: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6026: LD_ADDR_VAR 0 1
6030: PUSH
6031: LD_INT 100
6033: ST_TO_ADDR
6034: GO 6190
6036: LD_INT 10500
6038: PUSH
6039: LD_INT 1
6041: PLUS
6042: DOUBLE
6043: GREATEREQUAL
6044: IFFALSE 6052
6046: LD_INT 21000
6048: DOUBLE
6049: LESSEQUAL
6050: IFTRUE 6054
6052: GO 6065
6054: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6055: LD_ADDR_VAR 0 1
6059: PUSH
6060: LD_INT 90
6062: ST_TO_ADDR
6063: GO 6190
6065: LD_INT 21000
6067: PUSH
6068: LD_INT 1
6070: PLUS
6071: DOUBLE
6072: GREATEREQUAL
6073: IFFALSE 6081
6075: LD_INT 42000
6077: DOUBLE
6078: LESSEQUAL
6079: IFTRUE 6083
6081: GO 6094
6083: POP
// d := 80 ; 20 20$0 + 1 .. 30 30$0 :
6084: LD_ADDR_VAR 0 1
6088: PUSH
6089: LD_INT 80
6091: ST_TO_ADDR
6092: GO 6190
6094: LD_INT 42000
6096: PUSH
6097: LD_INT 1
6099: PLUS
6100: DOUBLE
6101: GREATEREQUAL
6102: IFFALSE 6110
6104: LD_INT 63000
6106: DOUBLE
6107: LESSEQUAL
6108: IFTRUE 6112
6110: GO 6123
6112: POP
// d := 70 ; 30 30$0 + 1 .. 50 50$0 :
6113: LD_ADDR_VAR 0 1
6117: PUSH
6118: LD_INT 70
6120: ST_TO_ADDR
6121: GO 6190
6123: LD_INT 63000
6125: PUSH
6126: LD_INT 1
6128: PLUS
6129: DOUBLE
6130: GREATEREQUAL
6131: IFFALSE 6139
6133: LD_INT 105000
6135: DOUBLE
6136: LESSEQUAL
6137: IFTRUE 6141
6139: GO 6152
6141: POP
// d := 55 ; 50 50$0 + 1 .. 300 300$0 :
6142: LD_ADDR_VAR 0 1
6146: PUSH
6147: LD_INT 55
6149: ST_TO_ADDR
6150: GO 6190
6152: LD_INT 105000
6154: PUSH
6155: LD_INT 1
6157: PLUS
6158: DOUBLE
6159: GREATEREQUAL
6160: IFFALSE 6168
6162: LD_INT 630000
6164: DOUBLE
6165: LESSEQUAL
6166: IFTRUE 6170
6168: GO 6181
6170: POP
// d := 40 ; else
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_INT 40
6178: ST_TO_ADDR
6179: GO 6190
6181: POP
// d := 0 ; end ;
6182: LD_ADDR_VAR 0 1
6186: PUSH
6187: LD_INT 0
6189: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density * 2 div 3 then
6190: LD_INT 1
6192: PPUSH
6193: LD_INT 10000
6195: PPUSH
6196: CALL_OW 12
6200: PUSH
6201: LD_VAR 0 1
6205: PUSH
6206: LD_EXP 23
6210: MUL
6211: PUSH
6212: LD_INT 2
6214: MUL
6215: PUSH
6216: LD_INT 3
6218: DIV
6219: LESSEQUAL
6220: IFFALSE 6359
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6222: LD_INT 1
6224: PPUSH
6225: LD_INT 140
6227: PPUSH
6228: CALL_OW 12
6232: PPUSH
6233: CALL_OW 67
// if shipment2 = [ ] then
6237: LD_LOC 6
6241: PUSH
6242: EMPTY
6243: EQUAL
6244: IFFALSE 6301
// shipment2 := [ between1 , between2 , between3 , between4 , ring1 , ring2 , ring3 , ring4 , center , center , center , center ] ;
6246: LD_ADDR_LOC 6
6250: PUSH
6251: LD_INT 30
6253: PUSH
6254: LD_INT 31
6256: PUSH
6257: LD_INT 32
6259: PUSH
6260: LD_INT 33
6262: PUSH
6263: LD_INT 34
6265: PUSH
6266: LD_INT 35
6268: PUSH
6269: LD_INT 36
6271: PUSH
6272: LD_INT 37
6274: PUSH
6275: LD_INT 38
6277: PUSH
6278: LD_INT 38
6280: PUSH
6281: LD_INT 38
6283: PUSH
6284: LD_INT 38
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
6301: LD_ADDR_VAR 0 2
6305: PUSH
6306: LD_LOC 6
6310: PUSH
6311: LD_INT 1
6313: PPUSH
6314: LD_LOC 6
6318: PPUSH
6319: CALL_OW 12
6323: ARRAY
6324: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
6325: LD_ADDR_LOC 6
6329: PUSH
6330: LD_LOC 6
6334: PUSH
6335: LD_VAR 0 2
6339: PUSH
6340: EMPTY
6341: LIST
6342: DIFF
6343: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
6344: LD_INT 5
6346: PPUSH
6347: LD_VAR 0 2
6351: PPUSH
6352: LD_INT 1
6354: PPUSH
6355: CALL_OW 55
// end ; enable ;
6359: ENABLE
// end ; end_of_file
6360: PPOPN 2
6362: END
// function prepare_treasure ( x , y ) ; var sm , i ; begin
6363: LD_INT 0
6365: PPUSH
6366: PPUSH
6367: PPUSH
// sm := rand ( 0 , 6 ) ;
6368: LD_ADDR_VAR 0 4
6372: PUSH
6373: LD_INT 0
6375: PPUSH
6376: LD_INT 6
6378: PPUSH
6379: CALL_OW 12
6383: ST_TO_ADDR
// for i := 0 to 15 do
6384: LD_ADDR_VAR 0 5
6388: PUSH
6389: DOUBLE
6390: LD_INT 0
6392: DEC
6393: ST_TO_ADDR
6394: LD_INT 15
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6504
// begin MoveAreaXY ( p1 + i , x , y ) ;
6400: LD_INT 1
6402: PUSH
6403: LD_VAR 0 5
6407: PLUS
6408: PPUSH
6409: LD_VAR 0 1
6413: PPUSH
6414: LD_VAR 0 2
6418: PPUSH
6419: CALL_OW 425
// if prob ( 30 ) then
6423: LD_INT 30
6425: PPUSH
6426: CALL_OW 13
6430: IFFALSE 6448
// sm := rand ( 0 , 6 ) ;
6432: LD_ADDR_VAR 0 4
6436: PUSH
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 6
6442: PPUSH
6443: CALL_OW 12
6447: ST_TO_ADDR
// x := ShiftX ( x - 1 , sm , 1 ) ;
6448: LD_ADDR_VAR 0 1
6452: PUSH
6453: LD_VAR 0 1
6457: PUSH
6458: LD_INT 1
6460: MINUS
6461: PPUSH
6462: LD_VAR 0 4
6466: PPUSH
6467: LD_INT 1
6469: PPUSH
6470: CALL_OW 272
6474: ST_TO_ADDR
// y := ShiftY ( y - 1 , sm , 1 ) ;
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: LD_VAR 0 2
6484: PUSH
6485: LD_INT 1
6487: MINUS
6488: PPUSH
6489: LD_VAR 0 4
6493: PPUSH
6494: LD_INT 1
6496: PPUSH
6497: CALL_OW 273
6501: ST_TO_ADDR
// end ;
6502: GO 6397
6504: POP
6505: POP
// end ;
6506: LD_VAR 0 3
6510: RET
// function show_treasure ; var i ; begin
6511: LD_INT 0
6513: PPUSH
6514: PPUSH
// SetAreaMapShow ( p16 , 1 ) ;
6515: LD_INT 16
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: CALL_OW 424
// for i := 1 to 15 do
6525: LD_ADDR_VAR 0 2
6529: PUSH
6530: DOUBLE
6531: LD_INT 1
6533: DEC
6534: ST_TO_ADDR
6535: LD_INT 15
6537: PUSH
6538: FOR_TO
6539: IFFALSE 6586
// begin wait ( 0 0$10 ) ;
6541: LD_INT 350
6543: PPUSH
6544: CALL_OW 67
// SetAreaMapShow ( p16 - i + 1 , 0 ) ;
6548: LD_INT 16
6550: PUSH
6551: LD_VAR 0 2
6555: MINUS
6556: PUSH
6557: LD_INT 1
6559: PLUS
6560: PPUSH
6561: LD_INT 0
6563: PPUSH
6564: CALL_OW 424
// SetAreaMapShow ( p16 - i , 1 ) ;
6568: LD_INT 16
6570: PUSH
6571: LD_VAR 0 2
6575: MINUS
6576: PPUSH
6577: LD_INT 1
6579: PPUSH
6580: CALL_OW 424
// end ;
6584: GO 6538
6586: POP
6587: POP
// wait ( 0 0$30 ) ;
6588: LD_INT 1050
6590: PPUSH
6591: CALL_OW 67
// SetAreaMapShow ( p1 , 0 ) ;
6595: LD_INT 1
6597: PPUSH
6598: LD_INT 0
6600: PPUSH
6601: CALL_OW 424
// end ;
6605: LD_VAR 0 1
6609: RET
// export function new_treasure ; var xy ; begin
6610: LD_INT 0
6612: PPUSH
6613: PPUSH
// xy := RandHexArea ( All , false ) ;
6614: LD_ADDR_VAR 0 2
6618: PUSH
6619: LD_INT 17
6621: PPUSH
6622: LD_INT 0
6624: PPUSH
6625: CALL_OW 16
6629: ST_TO_ADDR
// prepare_treasure ( xy [ 1 ] , xy [ 2 ] ) ;
6630: LD_VAR 0 2
6634: PUSH
6635: LD_INT 1
6637: ARRAY
6638: PPUSH
6639: LD_VAR 0 2
6643: PUSH
6644: LD_INT 2
6646: ARRAY
6647: PPUSH
6648: CALL 6363 0 2
// show_treasure ;
6652: CALL 6511 0 0
// end ; end_of_file
6656: LD_VAR 0 1
6660: RET
// export function Init_Win_Condition ; begin
6661: LD_INT 0
6663: PPUSH
// disable ( 98 ) ;
6664: LD_INT 98
6666: DISABLE_MARKED
// disable ( 99 ) ;
6667: LD_INT 99
6669: DISABLE_MARKED
// if Team_Game then
6670: LD_EXP 44
6674: IFFALSE 6681
// enable ( 98 ) else
6676: LD_INT 98
6678: ENABLE_MARKED
6679: GO 6684
// enable ( 99 ) ;
6681: LD_INT 99
6683: ENABLE_MARKED
// end ;
6684: LD_VAR 0 1
6688: RET
// function CanWinLoose ; begin
6689: LD_INT 0
6691: PPUSH
// Result := true ;
6692: LD_ADDR_VAR 0 1
6696: PUSH
6697: LD_INT 1
6699: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6700: CALL_OW 518
6704: PUSH
6705: CALL_OW 519
6709: PUSH
6710: LD_INT 0
6712: GREATER
6713: AND
6714: IFFALSE 6724
// Result := false ;
6716: LD_ADDR_VAR 0 1
6720: PUSH
6721: LD_INT 0
6723: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6724: CALL_OW 531
6728: PUSH
6729: CALL_OW 519
6733: PUSH
6734: LD_INT 1
6736: GREATER
6737: AND
6738: IFFALSE 6748
// Result := false ;
6740: LD_ADDR_VAR 0 1
6744: PUSH
6745: LD_INT 0
6747: ST_TO_ADDR
// end ;
6748: LD_VAR 0 1
6752: RET
// function HasPower ( i ) ; begin
6753: LD_INT 0
6755: PPUSH
// if def_people_respawning then
6756: LD_EXP 13
6760: IFFALSE 6851
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
6762: LD_ADDR_VAR 0 2
6766: PUSH
6767: LD_INT 22
6769: PUSH
6770: LD_VAR 0 1
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 2
6781: PUSH
6782: LD_INT 21
6784: PUSH
6785: LD_INT 1
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: LD_INT 33
6794: PUSH
6795: LD_INT 3
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: PUSH
6802: LD_INT 33
6804: PUSH
6805: LD_INT 5
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 30
6814: PUSH
6815: LD_INT 0
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 30
6824: PUSH
6825: LD_INT 1
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PPUSH
6844: CALL_OW 69
6848: ST_TO_ADDR
6849: GO 6916
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
6851: LD_ADDR_VAR 0 2
6855: PUSH
6856: LD_INT 22
6858: PUSH
6859: LD_VAR 0 1
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: PUSH
6868: LD_INT 2
6870: PUSH
6871: LD_INT 21
6873: PUSH
6874: LD_INT 1
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 33
6883: PUSH
6884: LD_INT 3
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: LD_INT 33
6893: PUSH
6894: LD_INT 5
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PPUSH
6911: CALL_OW 69
6915: ST_TO_ADDR
// end ;
6916: LD_VAR 0 2
6920: RET
// function AlliedSides ( i , j ) ; begin
6921: LD_INT 0
6923: PPUSH
// Result := false ;
6924: LD_ADDR_VAR 0 3
6928: PUSH
6929: LD_INT 0
6931: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
6932: LD_VAR 0 1
6936: PPUSH
6937: LD_VAR 0 2
6941: PPUSH
6942: CALL_OW 81
6946: PUSH
6947: LD_INT 1
6949: EQUAL
6950: PUSH
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_VAR 0 1
6960: PPUSH
6961: CALL_OW 81
6965: PUSH
6966: LD_INT 1
6968: EQUAL
6969: AND
6970: PUSH
6971: LD_VAR 0 1
6975: PPUSH
6976: CALL_OW 83
6980: AND
6981: PUSH
6982: LD_VAR 0 2
6986: PPUSH
6987: CALL_OW 83
6991: AND
6992: IFFALSE 7002
// Result := true ;
6994: LD_ADDR_VAR 0 3
6998: PUSH
6999: LD_INT 1
7001: ST_TO_ADDR
// end ;
7002: LD_VAR 0 3
7006: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7007: CALL 6689 0 0
7011: IFFALSE 7020
7013: GO 7015
7015: DISABLE
// YouLostInMultiplayer ;
7016: CALL_OW 107
7020: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7021: CALL 6689 0 0
7025: IFFALSE 7049
7027: GO 7029
7029: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7030: LD_EXP 41
7034: PUSH
7035: LD_OWVAR 2
7039: ARRAY
7040: PPUSH
7041: CALL 9878 0 1
// YouWinInMultiplayer ;
7045: CALL_OW 106
// end ;
7049: END
// every 0 0$3 marked 98 do var i , CanWin ;
7050: GO 7052
7052: DISABLE
7053: LD_INT 0
7055: PPUSH
7056: PPUSH
// begin if not HasPower ( your_side ) then
7057: LD_OWVAR 2
7061: PPUSH
7062: CALL 6753 0 1
7066: NOT
7067: IFFALSE 7078
// begin Multiplayer_Loose_Message ;
7069: CALL_OW 521
// enable ( 400 ) ;
7073: LD_INT 400
7075: ENABLE_MARKED
// end else
7076: GO 7211
// begin CanWin := true ;
7078: LD_ADDR_VAR 0 2
7082: PUSH
7083: LD_INT 1
7085: ST_TO_ADDR
// for i := 1 to 8 do
7086: LD_ADDR_VAR 0 1
7090: PUSH
7091: DOUBLE
7092: LD_INT 1
7094: DEC
7095: ST_TO_ADDR
7096: LD_INT 8
7098: PUSH
7099: FOR_TO
7100: IFFALSE 7197
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7102: LD_EXP 40
7106: PUSH
7107: LD_VAR 0 1
7111: ARRAY
7112: PUSH
7113: LD_VAR 0 1
7117: PPUSH
7118: CALL_OW 108
7122: AND
7123: PUSH
7124: LD_VAR 0 1
7128: PUSH
7129: LD_OWVAR 2
7133: NONEQUAL
7134: AND
7135: IFFALSE 7195
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7137: LD_EXP 38
7141: PUSH
7142: LD_VAR 0 1
7146: ARRAY
7147: NOT
7148: PUSH
7149: LD_EXP 38
7153: PUSH
7154: LD_VAR 0 1
7158: ARRAY
7159: PUSH
7160: LD_EXP 38
7164: PUSH
7165: LD_OWVAR 2
7169: ARRAY
7170: NONEQUAL
7171: OR
7172: IFFALSE 7195
// if HasPower ( i ) then
7174: LD_VAR 0 1
7178: PPUSH
7179: CALL 6753 0 1
7183: IFFALSE 7195
// begin CanWin := false ;
7185: LD_ADDR_VAR 0 2
7189: PUSH
7190: LD_INT 0
7192: ST_TO_ADDR
// break ;
7193: GO 7197
// end ;
7195: GO 7099
7197: POP
7198: POP
// if CanWin then
7199: LD_VAR 0 2
7203: IFFALSE 7210
// enable ( 401 ) else
7205: LD_INT 401
7207: ENABLE_MARKED
7208: GO 7211
// enable ;
7210: ENABLE
// end ; end ;
7211: PPOPN 2
7213: END
// every 0 0$3 marked 99 do var i , CanWin ;
7214: GO 7216
7216: DISABLE
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
// begin if not HasPower ( your_side ) then
7221: LD_OWVAR 2
7225: PPUSH
7226: CALL 6753 0 1
7230: NOT
7231: IFFALSE 7242
// begin Multiplayer_Loose_Message ;
7233: CALL_OW 521
// enable ( 400 ) ;
7237: LD_INT 400
7239: ENABLE_MARKED
// end else
7240: GO 7355
// begin CanWin := true ;
7242: LD_ADDR_VAR 0 2
7246: PUSH
7247: LD_INT 1
7249: ST_TO_ADDR
// for i := 1 to 8 do
7250: LD_ADDR_VAR 0 1
7254: PUSH
7255: DOUBLE
7256: LD_INT 1
7258: DEC
7259: ST_TO_ADDR
7260: LD_INT 8
7262: PUSH
7263: FOR_TO
7264: IFFALSE 7341
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7266: LD_EXP 40
7270: PUSH
7271: LD_VAR 0 1
7275: ARRAY
7276: PUSH
7277: LD_VAR 0 1
7281: PPUSH
7282: CALL_OW 108
7286: AND
7287: PUSH
7288: LD_VAR 0 1
7292: PUSH
7293: LD_OWVAR 2
7297: NONEQUAL
7298: AND
7299: IFFALSE 7339
// if not AlliedSides ( i , your_side ) then
7301: LD_VAR 0 1
7305: PPUSH
7306: LD_OWVAR 2
7310: PPUSH
7311: CALL 6921 0 2
7315: NOT
7316: IFFALSE 7339
// if HasPower ( i ) then
7318: LD_VAR 0 1
7322: PPUSH
7323: CALL 6753 0 1
7327: IFFALSE 7339
// begin CanWin := false ;
7329: LD_ADDR_VAR 0 2
7333: PUSH
7334: LD_INT 0
7336: ST_TO_ADDR
// break ;
7337: GO 7341
// end ;
7339: GO 7263
7341: POP
7342: POP
// if CanWin then
7343: LD_VAR 0 2
7347: IFFALSE 7354
// enable ( 401 ) else
7349: LD_INT 401
7351: ENABLE_MARKED
7352: GO 7355
// enable ;
7354: ENABLE
// end ; end ; end_of_file
7355: PPOPN 2
7357: END
// var infos ; export function init_infos ; begin
7358: LD_INT 0
7360: PPUSH
// infos = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7361: LD_ADDR_LOC 9
7365: PUSH
7366: LD_INT 0
7368: PUSH
7369: LD_INT 0
7371: PUSH
7372: LD_INT 0
7374: PUSH
7375: LD_INT 0
7377: PUSH
7378: LD_INT 0
7380: PUSH
7381: LD_INT 0
7383: PUSH
7384: LD_INT 0
7386: PUSH
7387: LD_INT 0
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: ST_TO_ADDR
// real_cost = cost ;
7400: LD_ADDR_EXP 29
7404: PUSH
7405: LD_EXP 27
7409: ST_TO_ADDR
// cost = cost * 10 ;
7410: LD_ADDR_EXP 27
7414: PUSH
7415: LD_EXP 27
7419: PUSH
7420: LD_INT 10
7422: MUL
7423: ST_TO_ADDR
// end ;
7424: LD_VAR 0 1
7428: RET
// every 0 0$1 do
7429: GO 7431
7431: DISABLE
// begin if gametype <> 11 then
7432: LD_EXP 1
7436: PUSH
7437: LD_INT 11
7439: NONEQUAL
7440: IFFALSE 7444
// exit ;
7442: GO 7533
// if decr_cost_time = 0 then
7444: LD_EXP 28
7448: PUSH
7449: LD_INT 0
7451: EQUAL
7452: IFFALSE 7474
// real_cost = ( cost div 100 ) * 10 else
7454: LD_ADDR_EXP 29
7458: PUSH
7459: LD_EXP 27
7463: PUSH
7464: LD_INT 100
7466: DIV
7467: PUSH
7468: LD_INT 10
7470: MUL
7471: ST_TO_ADDR
7472: GO 7533
// repeat wait ( decr_cost_time div 5 ) ;
7474: LD_EXP 28
7478: PUSH
7479: LD_INT 5
7481: DIV
7482: PPUSH
7483: CALL_OW 67
// cost = cost * 1000 div 1149 ;
7487: LD_ADDR_EXP 27
7491: PUSH
7492: LD_EXP 27
7496: PUSH
7497: LD_INT 1000
7499: MUL
7500: PUSH
7501: LD_INT 1149
7503: DIV
7504: ST_TO_ADDR
// real_cost = ( cost div 100 ) * 10 ;
7505: LD_ADDR_EXP 29
7509: PUSH
7510: LD_EXP 27
7514: PUSH
7515: LD_INT 100
7517: DIV
7518: PUSH
7519: LD_INT 10
7521: MUL
7522: ST_TO_ADDR
// until real_cost = 10 ;
7523: LD_EXP 29
7527: PUSH
7528: LD_INT 10
7530: EQUAL
7531: IFFALSE 7474
// end ;
7533: END
// every 0 0$2 do
7534: GO 7536
7536: DISABLE
// begin if gametype <> 11 then
7537: LD_EXP 1
7541: PUSH
7542: LD_INT 11
7544: NONEQUAL
7545: IFFALSE 7553
// ShowTimer else
7547: CALL 7971 0 0
7551: GO 7557
// ShowInfos ;
7553: CALL 7559 0 0
// enable ;
7557: ENABLE
// end ;
7558: END
// function ShowInfos ; var inf , en1 , en2 , AllStrings ; begin
7559: LD_INT 0
7561: PPUSH
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
// if gametype <> 11 then
7566: LD_EXP 1
7570: PUSH
7571: LD_INT 11
7573: NONEQUAL
7574: IFFALSE 7578
// exit ;
7576: GO 7966
// if not your_side then
7578: LD_OWVAR 2
7582: NOT
7583: IFFALSE 7588
// begin enable ;
7585: ENABLE
// exit ;
7586: GO 7966
// end ; if Teams [ Side_Teams [ your_side ] ] [ 1 ] = your_side then
7588: LD_EXP 39
7592: PUSH
7593: LD_EXP 38
7597: PUSH
7598: LD_OWVAR 2
7602: ARRAY
7603: ARRAY
7604: PUSH
7605: LD_INT 1
7607: ARRAY
7608: PUSH
7609: LD_OWVAR 2
7613: EQUAL
7614: IFFALSE 7678
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7616: LD_ADDR_VAR 0 3
7620: PUSH
7621: LD_EXP 39
7625: PUSH
7626: LD_INT 3
7628: PUSH
7629: LD_EXP 38
7633: PUSH
7634: LD_OWVAR 2
7638: ARRAY
7639: MINUS
7640: ARRAY
7641: PUSH
7642: LD_INT 2
7644: ARRAY
7645: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7646: LD_ADDR_VAR 0 4
7650: PUSH
7651: LD_EXP 39
7655: PUSH
7656: LD_INT 3
7658: PUSH
7659: LD_EXP 38
7663: PUSH
7664: LD_OWVAR 2
7668: ARRAY
7669: MINUS
7670: ARRAY
7671: PUSH
7672: LD_INT 1
7674: ARRAY
7675: ST_TO_ADDR
// end else
7676: GO 7738
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7678: LD_ADDR_VAR 0 3
7682: PUSH
7683: LD_EXP 39
7687: PUSH
7688: LD_INT 3
7690: PUSH
7691: LD_EXP 38
7695: PUSH
7696: LD_OWVAR 2
7700: ARRAY
7701: MINUS
7702: ARRAY
7703: PUSH
7704: LD_INT 1
7706: ARRAY
7707: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7708: LD_ADDR_VAR 0 4
7712: PUSH
7713: LD_EXP 39
7717: PUSH
7718: LD_INT 3
7720: PUSH
7721: LD_EXP 38
7725: PUSH
7726: LD_OWVAR 2
7730: ARRAY
7731: MINUS
7732: ARRAY
7733: PUSH
7734: LD_INT 2
7736: ARRAY
7737: ST_TO_ADDR
// end ; AllStrings := [ #Multi1x1-Time , tick ] ;
7738: LD_ADDR_VAR 0 5
7742: PUSH
7743: LD_STRING #Multi1x1-Time
7745: PUSH
7746: LD_OWVAR 1
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7755: LD_INT 0
7757: PUSH
7758: LD_EXP 33
7762: PUSH
7763: LD_OWVAR 1
7767: MINUS
7768: LESSEQUAL
7769: IFFALSE 7800
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7771: LD_ADDR_VAR 0 5
7775: PUSH
7776: LD_VAR 0 5
7780: PUSH
7781: LD_STRING #allowedsibbomb
7783: PUSH
7784: LD_EXP 33
7788: PUSH
7789: LD_OWVAR 1
7793: MINUS
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: ADD
7799: ST_TO_ADDR
// case infos [ your_side ] of 0 :
7800: LD_LOC 9
7804: PUSH
7805: LD_OWVAR 2
7809: ARRAY
7810: PUSH
7811: LD_INT 0
7813: DOUBLE
7814: EQUAL
7815: IFTRUE 7819
7817: GO 7846
7819: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Bid1 , real_cost ] ;
7820: LD_ADDR_OWVAR 47
7824: PUSH
7825: LD_VAR 0 5
7829: PUSH
7830: LD_STRING #MultiParty-Bid1
7832: PUSH
7833: LD_EXP 29
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: ADD
7842: ST_TO_ADDR
// enable ;
7843: ENABLE
// end ; 1 :
7844: GO 7966
7846: LD_INT 1
7848: DOUBLE
7849: EQUAL
7850: IFTRUE 7854
7852: GO 7902
7854: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info1 , en1 , en1 , - 1 , #MultiParty-Bid2 , real_cost ] ;
7855: LD_ADDR_OWVAR 47
7859: PUSH
7860: LD_VAR 0 5
7864: PUSH
7865: LD_STRING #MultiParty-Info1
7867: PUSH
7868: LD_VAR 0 3
7872: PUSH
7873: LD_VAR 0 3
7877: PUSH
7878: LD_INT 1
7880: NEG
7881: PUSH
7882: LD_STRING #MultiParty-Bid2
7884: PUSH
7885: LD_EXP 29
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: ADD
7898: ST_TO_ADDR
// enable ;
7899: ENABLE
// end ; 2 :
7900: GO 7966
7902: LD_INT 2
7904: DOUBLE
7905: EQUAL
7906: IFTRUE 7910
7908: GO 7965
7910: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info2 , en1 , en1 , - 1 , en2 , en2 , - 1 ] ;
7911: LD_ADDR_OWVAR 47
7915: PUSH
7916: LD_VAR 0 5
7920: PUSH
7921: LD_STRING #MultiParty-Info2
7923: PUSH
7924: LD_VAR 0 3
7928: PUSH
7929: LD_VAR 0 3
7933: PUSH
7934: LD_INT 1
7936: NEG
7937: PUSH
7938: LD_VAR 0 4
7942: PUSH
7943: LD_VAR 0 4
7947: PUSH
7948: LD_INT 1
7950: NEG
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: ADD
7961: ST_TO_ADDR
// enable ;
7962: ENABLE
// end ; end ;
7963: GO 7966
7965: POP
// end ;
7966: LD_VAR 0 1
7970: RET
// function ShowTimer ; var AllStrings ; begin
7971: LD_INT 0
7973: PPUSH
7974: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7975: LD_ADDR_VAR 0 2
7979: PUSH
7980: LD_STRING #Multi1x1-Time
7982: PUSH
7983: LD_OWVAR 1
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7992: LD_INT 0
7994: PUSH
7995: LD_EXP 33
7999: PUSH
8000: LD_OWVAR 1
8004: MINUS
8005: LESSEQUAL
8006: IFFALSE 8037
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8008: LD_ADDR_VAR 0 2
8012: PUSH
8013: LD_VAR 0 2
8017: PUSH
8018: LD_STRING #allowedsibbomb
8020: PUSH
8021: LD_EXP 33
8025: PUSH
8026: LD_OWVAR 1
8030: MINUS
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: ADD
8036: ST_TO_ADDR
// Display_Strings := AllStrings ;
8037: LD_ADDR_OWVAR 47
8041: PUSH
8042: LD_VAR 0 2
8046: ST_TO_ADDR
// end ;
8047: LD_VAR 0 1
8051: RET
// function check_area ( side , area ) ; begin
8052: LD_INT 0
8054: PPUSH
// if infos [ side ] = 2 then
8055: LD_LOC 9
8059: PUSH
8060: LD_VAR 0 1
8064: ARRAY
8065: PUSH
8066: LD_INT 2
8068: EQUAL
8069: IFFALSE 8073
// exit ;
8071: GO 8144
// if GetResourceArea ( area , mat_cans ) * 10 >= real_cost then
8073: LD_VAR 0 2
8077: PPUSH
8078: LD_INT 1
8080: PPUSH
8081: CALL_OW 287
8085: PUSH
8086: LD_INT 10
8088: MUL
8089: PUSH
8090: LD_EXP 29
8094: GREATEREQUAL
8095: IFFALSE 8144
// begin EraseResourceArea ( area , mat_cans ) ;
8097: LD_VAR 0 2
8101: PPUSH
8102: LD_INT 1
8104: PPUSH
8105: CALL_OW 286
// infos = Replace ( infos , side , infos [ side ] + 1 ) ;
8109: LD_ADDR_LOC 9
8113: PUSH
8114: LD_LOC 9
8118: PPUSH
8119: LD_VAR 0 1
8123: PPUSH
8124: LD_LOC 9
8128: PUSH
8129: LD_VAR 0 1
8133: ARRAY
8134: PUSH
8135: LD_INT 1
8137: PLUS
8138: PPUSH
8139: CALL_OW 1
8143: ST_TO_ADDR
// end ; end ;
8144: LD_VAR 0 3
8148: RET
// every 0 0$5 do var i ;
8149: GO 8151
8151: DISABLE
8152: LD_INT 0
8154: PPUSH
// begin for i := 1 to Side_Positions do
8155: LD_ADDR_VAR 0 1
8159: PUSH
8160: DOUBLE
8161: LD_INT 1
8163: DEC
8164: ST_TO_ADDR
8165: LD_EXP 40
8169: PUSH
8170: FOR_TO
8171: IFFALSE 8279
// case Side_Positions [ i ] of 1 :
8173: LD_EXP 40
8177: PUSH
8178: LD_VAR 0 1
8182: ARRAY
8183: PUSH
8184: LD_INT 1
8186: DOUBLE
8187: EQUAL
8188: IFTRUE 8192
8190: GO 8207
8192: POP
// check_area ( i , exit1 ) ; 2 :
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_INT 22
8200: PPUSH
8201: CALL 8052 0 2
8205: GO 8277
8207: LD_INT 2
8209: DOUBLE
8210: EQUAL
8211: IFTRUE 8215
8213: GO 8230
8215: POP
// check_area ( i , exit2 ) ; 3 :
8216: LD_VAR 0 1
8220: PPUSH
8221: LD_INT 23
8223: PPUSH
8224: CALL 8052 0 2
8228: GO 8277
8230: LD_INT 3
8232: DOUBLE
8233: EQUAL
8234: IFTRUE 8238
8236: GO 8253
8238: POP
// check_area ( i , exit3 ) ; 4 :
8239: LD_VAR 0 1
8243: PPUSH
8244: LD_INT 24
8246: PPUSH
8247: CALL 8052 0 2
8251: GO 8277
8253: LD_INT 4
8255: DOUBLE
8256: EQUAL
8257: IFTRUE 8261
8259: GO 8276
8261: POP
// check_area ( i , exit4 ) ; end ;
8262: LD_VAR 0 1
8266: PPUSH
8267: LD_INT 25
8269: PPUSH
8270: CALL 8052 0 2
8274: GO 8277
8276: POP
8277: GO 8170
8279: POP
8280: POP
// enable ;
8281: ENABLE
// exit ;
8282: GO 8284
// end ; end_of_file
8284: PPOPN 1
8286: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8287: LD_INT 0
8289: PPUSH
8290: PPUSH
// for un in battle_flags_id do
8291: LD_ADDR_VAR 0 2
8295: PUSH
8296: LD_EXP 49
8300: PUSH
8301: FOR_IN
8302: IFFALSE 8377
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8304: LD_VAR 0 2
8308: PPUSH
8309: LD_INT 1
8311: PUSH
8312: LD_LOC 10
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: LD_INT 2
8323: PUSH
8324: LD_LOC 10
8328: PUSH
8329: LD_INT 2
8331: DIV
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PUSH
8337: LD_INT 3
8339: PUSH
8340: LD_LOC 10
8344: PUSH
8345: LD_INT 5
8347: DIV
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 20
8355: PUSH
8356: LD_LOC 10
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PPUSH
8371: CALL_OW 423
8375: GO 8301
8377: POP
8378: POP
// end ;
8379: LD_VAR 0 1
8383: RET
// every 0 0$0.1 do var un ;
8384: GO 8386
8386: DISABLE
8387: LD_INT 0
8389: PPUSH
// begin if not def_morale_flags then
8390: LD_EXP 10
8394: NOT
8395: IFFALSE 8399
// exit ;
8397: GO 8476
// if not morale_decreasing_time then
8399: LD_EXP 24
8403: NOT
8404: IFFALSE 8408
// exit ;
8406: GO 8476
// strength = 100 ;
8408: LD_ADDR_LOC 10
8412: PUSH
8413: LD_INT 100
8415: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8416: LD_EXP 24
8420: PPUSH
8421: CALL_OW 67
// strength := strength - 1 ;
8425: LD_ADDR_LOC 10
8429: PUSH
8430: LD_LOC 10
8434: PUSH
8435: LD_INT 1
8437: MINUS
8438: ST_TO_ADDR
// Update_Flags ;
8439: CALL 8287 0 0
// until not strength ;
8443: LD_LOC 10
8447: NOT
8448: IFFALSE 8416
// for un in battle_flags_id do
8450: LD_ADDR_VAR 0 1
8454: PUSH
8455: LD_EXP 49
8459: PUSH
8460: FOR_IN
8461: IFFALSE 8474
// KillBattleFlag ( un ) ;
8463: LD_VAR 0 1
8467: PPUSH
8468: CALL_OW 419
8472: GO 8460
8474: POP
8475: POP
// end ; end_of_file
8476: PPOPN 1
8478: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8479: LD_VAR 0 1
8483: PPUSH
8484: CALL_OW 266
8488: PUSH
8489: LD_INT 0
8491: PUSH
8492: LD_INT 1
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: IN
8499: IFFALSE 8524
// SetBName ( b , @ & GetSide ( b ) ) ;
8501: LD_VAR 0 1
8505: PPUSH
8506: LD_STRING @
8508: PUSH
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 255
8518: STR
8519: PPUSH
8520: CALL_OW 500
// end ;
8524: PPOPN 2
8526: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8527: LD_VAR 0 1
8531: PPUSH
8532: CALL_OW 266
8536: PUSH
8537: LD_INT 0
8539: PUSH
8540: LD_INT 1
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: IN
8547: IFFALSE 8572
// SetBName ( b , @ & GetSide ( b ) ) ;
8549: LD_VAR 0 1
8553: PPUSH
8554: LD_STRING @
8556: PUSH
8557: LD_VAR 0 1
8561: PPUSH
8562: CALL_OW 255
8566: STR
8567: PPUSH
8568: CALL_OW 500
// end ;
8572: PPOPN 3
8574: END
// on VehicleConstructed ( veh , fac ) do var side ;
8575: LD_INT 0
8577: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8578: LD_VAR 0 1
8582: PPUSH
8583: CALL_OW 263
8587: PUSH
8588: LD_INT 5
8590: EQUAL
8591: IFFALSE 8733
// begin side := GetSide ( veh ) ;
8593: LD_ADDR_VAR 0 3
8597: PUSH
8598: LD_VAR 0 1
8602: PPUSH
8603: CALL_OW 255
8607: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8608: LD_ADDR_EXP 53
8612: PUSH
8613: LD_EXP 53
8617: PPUSH
8618: LD_VAR 0 3
8622: PPUSH
8623: LD_EXP 53
8627: PUSH
8628: LD_VAR 0 3
8632: ARRAY
8633: PPUSH
8634: LD_INT 52
8636: PUSH
8637: EMPTY
8638: LIST
8639: PPUSH
8640: CALL_OW 72
8644: PUSH
8645: LD_INT 22
8647: PUSH
8648: LD_VAR 0 3
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 2
8659: PUSH
8660: LD_INT 33
8662: PUSH
8663: LD_INT 5
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PUSH
8670: LD_INT 25
8672: PUSH
8673: LD_INT 12
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: LD_INT 25
8682: PUSH
8683: LD_INT 15
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: LD_INT 25
8692: PUSH
8693: LD_INT 16
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 25
8702: PUSH
8703: LD_INT 17
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PPUSH
8722: CALL_OW 69
8726: UNION
8727: PPUSH
8728: CALL_OW 1
8732: ST_TO_ADDR
// end ; end ;
8733: PPOPN 3
8735: END
// on UnitDestroyed ( j ) do begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
8736: LD_VAR 0 1
8740: PPUSH
8741: CALL_OW 257
8745: PUSH
8746: LD_INT 12
8748: PUSH
8749: LD_INT 15
8751: PUSH
8752: LD_INT 17
8754: PUSH
8755: LD_INT 16
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: IN
8764: PUSH
8765: LD_VAR 0 1
8769: PPUSH
8770: CALL_OW 263
8774: PUSH
8775: LD_INT 5
8777: EQUAL
8778: OR
8779: IFFALSE 8790
// ApeKilled ( j ) ;
8781: LD_VAR 0 1
8785: PPUSH
8786: CALL 9692 0 1
// end ;
8790: PPOPN 1
8792: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8793: LD_VAR 0 1
8797: PPUSH
8798: LD_VAR 0 2
8802: PPUSH
8803: LD_VAR 0 3
8807: PPUSH
8808: LD_OWVAR 2
8812: PPUSH
8813: CALL 9836 0 4
8817: PPOPN 3
8819: END
// every 20 20$00 trigger apemanNumber do
8820: LD_EXP 50
8824: IFFALSE 8857
8826: GO 8828
8828: DISABLE
// begin enable ;
8829: ENABLE
// if apeLevel >= 8 then
8830: LD_EXP 55
8834: PUSH
8835: LD_INT 8
8837: GREATEREQUAL
8838: IFFALSE 8843
// disable else
8840: DISABLE
8841: GO 8857
// apeLevel := apeLevel + 1 ;
8843: LD_ADDR_EXP 55
8847: PUSH
8848: LD_EXP 55
8852: PUSH
8853: LD_INT 1
8855: PLUS
8856: ST_TO_ADDR
// end ;
8857: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
8858: LD_EXP 50
8862: PUSH
8863: LD_EXP 51
8867: LESS
8868: IFFALSE 9008
8870: GO 8872
8872: DISABLE
8873: LD_INT 0
8875: PPUSH
8876: PPUSH
8877: PPUSH
8878: PPUSH
// begin enable ;
8879: ENABLE
// for i := 1 to apemanPos do
8880: LD_ADDR_VAR 0 1
8884: PUSH
8885: DOUBLE
8886: LD_INT 1
8888: DEC
8889: ST_TO_ADDR
8890: LD_EXP 53
8894: PUSH
8895: FOR_TO
8896: IFFALSE 9006
// begin if apemanPlayerCount [ i ] then
8898: LD_EXP 54
8902: PUSH
8903: LD_VAR 0 1
8907: ARRAY
8908: IFFALSE 9004
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
8910: LD_EXP 54
8914: PUSH
8915: LD_VAR 0 1
8919: ARRAY
8920: PUSH
8921: LD_EXP 53
8925: PUSH
8926: LD_VAR 0 1
8930: ARRAY
8931: GREATER
8932: IFFALSE 9004
// begin ape := PrepareApeman ;
8934: LD_ADDR_VAR 0 2
8938: PUSH
8939: CALL 9511 0 0
8943: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
8944: LD_VAR 0 2
8948: PPUSH
8949: LD_EXP 56
8953: PUSH
8954: LD_VAR 0 1
8958: ARRAY
8959: PPUSH
8960: LD_INT 0
8962: PPUSH
8963: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
8967: LD_ADDR_EXP 53
8971: PUSH
8972: LD_EXP 53
8976: PPUSH
8977: LD_VAR 0 1
8981: PPUSH
8982: LD_EXP 53
8986: PUSH
8987: LD_VAR 0 1
8991: ARRAY
8992: PUSH
8993: LD_VAR 0 2
8997: UNION
8998: PPUSH
8999: CALL_OW 1
9003: ST_TO_ADDR
// end ; end ; end ;
9004: GO 8895
9006: POP
9007: POP
// end ;
9008: PPOPN 4
9010: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
9011: LD_INT 0
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
9018: PPUSH
9019: PPUSH
// playersAmount := 0 ;
9020: LD_ADDR_VAR 0 3
9024: PUSH
9025: LD_INT 0
9027: ST_TO_ADDR
// _apeAreas := [ ape1 , ape2 , ape3 , ape4 ] ;
9028: LD_ADDR_VAR 0 7
9032: PUSH
9033: LD_INT 39
9035: PUSH
9036: LD_INT 40
9038: PUSH
9039: LD_INT 41
9041: PUSH
9042: LD_INT 42
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9051: LD_ADDR_EXP 56
9055: PUSH
9056: LD_INT 0
9058: PUSH
9059: LD_INT 0
9061: PUSH
9062: LD_INT 0
9064: PUSH
9065: LD_INT 0
9067: PUSH
9068: LD_INT 0
9070: PUSH
9071: LD_INT 0
9073: PUSH
9074: LD_INT 0
9076: PUSH
9077: LD_INT 0
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: ST_TO_ADDR
// for j = 1 to Side_Positions do
9090: LD_ADDR_VAR 0 4
9094: PUSH
9095: DOUBLE
9096: LD_INT 1
9098: DEC
9099: ST_TO_ADDR
9100: LD_EXP 40
9104: PUSH
9105: FOR_TO
9106: IFFALSE 9173
// if Side_Positions [ j ] then
9108: LD_EXP 40
9112: PUSH
9113: LD_VAR 0 4
9117: ARRAY
9118: IFFALSE 9171
// begin playersAmount := playersAmount + 1 ;
9120: LD_ADDR_VAR 0 3
9124: PUSH
9125: LD_VAR 0 3
9129: PUSH
9130: LD_INT 1
9132: PLUS
9133: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
9134: LD_ADDR_EXP 56
9138: PUSH
9139: LD_EXP 56
9143: PPUSH
9144: LD_VAR 0 4
9148: PPUSH
9149: LD_VAR 0 7
9153: PUSH
9154: LD_EXP 40
9158: PUSH
9159: LD_VAR 0 4
9163: ARRAY
9164: ARRAY
9165: PPUSH
9166: CALL_OW 1
9170: ST_TO_ADDR
// end ;
9171: GO 9105
9173: POP
9174: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
9175: LD_ADDR_EXP 52
9179: PUSH
9180: LD_INT 3
9182: PUSH
9183: LD_EXP 32
9187: MUL
9188: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
9189: LD_ADDR_EXP 50
9193: PUSH
9194: LD_VAR 0 3
9198: PUSH
9199: LD_EXP 52
9203: MUL
9204: ST_TO_ADDR
// apemanLimit := apemanNumber ;
9205: LD_ADDR_EXP 51
9209: PUSH
9210: LD_EXP 50
9214: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9215: LD_ADDR_EXP 53
9219: PUSH
9220: LD_INT 0
9222: PUSH
9223: LD_INT 0
9225: PUSH
9226: LD_INT 0
9228: PUSH
9229: LD_INT 0
9231: PUSH
9232: LD_INT 0
9234: PUSH
9235: LD_INT 0
9237: PUSH
9238: LD_INT 0
9240: PUSH
9241: LD_INT 0
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9254: LD_ADDR_EXP 54
9258: PUSH
9259: LD_INT 0
9261: PUSH
9262: LD_INT 0
9264: PUSH
9265: LD_INT 0
9267: PUSH
9268: LD_INT 0
9270: PUSH
9271: LD_INT 0
9273: PUSH
9274: LD_INT 0
9276: PUSH
9277: LD_INT 0
9279: PUSH
9280: LD_INT 0
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: ST_TO_ADDR
// apeLevel := 1 ;
9293: LD_ADDR_EXP 55
9297: PUSH
9298: LD_INT 1
9300: ST_TO_ADDR
// if not apemanNumber then
9301: LD_EXP 50
9305: NOT
9306: IFFALSE 9310
// exit ;
9308: GO 9506
// for i := 1 to apemanPerPlayer do
9310: LD_ADDR_VAR 0 2
9314: PUSH
9315: DOUBLE
9316: LD_INT 1
9318: DEC
9319: ST_TO_ADDR
9320: LD_EXP 52
9324: PUSH
9325: FOR_TO
9326: IFFALSE 9504
// begin for j := 1 to Side_Positions do
9328: LD_ADDR_VAR 0 4
9332: PUSH
9333: DOUBLE
9334: LD_INT 1
9336: DEC
9337: ST_TO_ADDR
9338: LD_EXP 40
9342: PUSH
9343: FOR_TO
9344: IFFALSE 9500
// if Side_Positions [ j ] then
9346: LD_EXP 40
9350: PUSH
9351: LD_VAR 0 4
9355: ARRAY
9356: IFFALSE 9498
// begin pos := Side_Positions [ j ] ;
9358: LD_ADDR_VAR 0 6
9362: PUSH
9363: LD_EXP 40
9367: PUSH
9368: LD_VAR 0 4
9372: ARRAY
9373: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
9374: LD_ADDR_EXP 54
9378: PUSH
9379: LD_EXP 54
9383: PPUSH
9384: LD_VAR 0 4
9388: PPUSH
9389: LD_EXP 54
9393: PUSH
9394: LD_VAR 0 4
9398: ARRAY
9399: PUSH
9400: LD_INT 1
9402: PLUS
9403: PPUSH
9404: CALL_OW 1
9408: ST_TO_ADDR
// ape := PrepareApeman ;
9409: LD_ADDR_VAR 0 5
9413: PUSH
9414: CALL 9511 0 0
9418: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
9419: LD_ADDR_EXP 53
9423: PUSH
9424: LD_EXP 53
9428: PPUSH
9429: LD_VAR 0 4
9433: PPUSH
9434: LD_EXP 53
9438: PUSH
9439: LD_VAR 0 4
9443: ARRAY
9444: PPUSH
9445: LD_EXP 53
9449: PUSH
9450: LD_VAR 0 4
9454: ARRAY
9455: PUSH
9456: LD_INT 1
9458: PLUS
9459: PPUSH
9460: LD_VAR 0 5
9464: PPUSH
9465: CALL_OW 1
9469: PPUSH
9470: CALL_OW 1
9474: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
9475: LD_VAR 0 5
9479: PPUSH
9480: LD_EXP 56
9484: PUSH
9485: LD_VAR 0 4
9489: ARRAY
9490: PPUSH
9491: LD_INT 0
9493: PPUSH
9494: CALL_OW 49
// end ;
9498: GO 9343
9500: POP
9501: POP
// end ;
9502: GO 9325
9504: POP
9505: POP
// end ;
9506: LD_VAR 0 1
9510: RET
// export function PrepareApeman ; var bonus ; begin
9511: LD_INT 0
9513: PPUSH
9514: PPUSH
// uc_side := 0 ;
9515: LD_ADDR_OWVAR 20
9519: PUSH
9520: LD_INT 0
9522: ST_TO_ADDR
// uc_nation := 0 ;
9523: LD_ADDR_OWVAR 21
9527: PUSH
9528: LD_INT 0
9530: ST_TO_ADDR
// InitHc ;
9531: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
9535: LD_ADDR_VAR 0 2
9539: PUSH
9540: LD_INT 1
9542: NEG
9543: PUSH
9544: LD_INT 0
9546: PUSH
9547: LD_INT 1
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: PUSH
9555: LD_OWVAR 1
9559: PUSH
9560: LD_INT 3
9562: MOD
9563: PUSH
9564: LD_INT 1
9566: PLUS
9567: ARRAY
9568: ST_TO_ADDR
// hc_class := class_apeman ;
9569: LD_ADDR_OWVAR 28
9573: PUSH
9574: LD_INT 12
9576: ST_TO_ADDR
// hc_gallery :=  ;
9577: LD_ADDR_OWVAR 33
9581: PUSH
9582: LD_STRING 
9584: ST_TO_ADDR
// hc_name :=  ;
9585: LD_ADDR_OWVAR 26
9589: PUSH
9590: LD_STRING 
9592: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
9593: LD_ADDR_OWVAR 31
9597: PUSH
9598: LD_EXP 55
9602: PUSH
9603: LD_VAR 0 2
9607: PLUS
9608: PUSH
9609: LD_EXP 55
9613: PUSH
9614: LD_VAR 0 2
9618: PLUS
9619: PUSH
9620: LD_EXP 55
9624: PUSH
9625: LD_VAR 0 2
9629: PLUS
9630: PUSH
9631: LD_EXP 55
9635: PUSH
9636: LD_VAR 0 2
9640: PLUS
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
9648: LD_ADDR_OWVAR 35
9652: PUSH
9653: LD_INT 10
9655: PUSH
9656: LD_VAR 0 2
9660: MUL
9661: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
9662: LD_ADDR_OWVAR 29
9666: PUSH
9667: LD_INT 12
9669: PUSH
9670: LD_INT 10
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: ST_TO_ADDR
// result := CreateHuman ;
9677: LD_ADDR_VAR 0 1
9681: PUSH
9682: CALL_OW 44
9686: ST_TO_ADDR
// end ;
9687: LD_VAR 0 1
9691: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
9692: LD_INT 0
9694: PPUSH
9695: PPUSH
9696: PPUSH
// if not ape then
9697: LD_VAR 0 1
9701: NOT
9702: IFFALSE 9706
// exit ;
9704: GO 9831
// side := GetSide ( ape ) ;
9706: LD_ADDR_VAR 0 3
9710: PUSH
9711: LD_VAR 0 1
9715: PPUSH
9716: CALL_OW 255
9720: ST_TO_ADDR
// if not side then
9721: LD_VAR 0 3
9725: NOT
9726: IFFALSE 9780
// begin for i = 1 to apemanPos do
9728: LD_ADDR_VAR 0 4
9732: PUSH
9733: DOUBLE
9734: LD_INT 1
9736: DEC
9737: ST_TO_ADDR
9738: LD_EXP 53
9742: PUSH
9743: FOR_TO
9744: IFFALSE 9778
// if ape in apemanPos [ i ] then
9746: LD_VAR 0 1
9750: PUSH
9751: LD_EXP 53
9755: PUSH
9756: LD_VAR 0 4
9760: ARRAY
9761: IN
9762: IFFALSE 9776
// begin side := i ;
9764: LD_ADDR_VAR 0 3
9768: PUSH
9769: LD_VAR 0 4
9773: ST_TO_ADDR
// break ;
9774: GO 9778
// end ;
9776: GO 9743
9778: POP
9779: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
9780: LD_ADDR_EXP 53
9784: PUSH
9785: LD_EXP 53
9789: PPUSH
9790: LD_VAR 0 3
9794: PPUSH
9795: LD_EXP 53
9799: PUSH
9800: LD_VAR 0 3
9804: ARRAY
9805: PUSH
9806: LD_VAR 0 1
9810: DIFF
9811: PPUSH
9812: CALL_OW 1
9816: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
9817: LD_ADDR_EXP 50
9821: PUSH
9822: LD_EXP 50
9826: PUSH
9827: LD_INT 1
9829: MINUS
9830: ST_TO_ADDR
// end ; end_of_file
9831: LD_VAR 0 2
9835: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9836: LD_INT 0
9838: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9839: LD_VAR 0 1
9843: PPUSH
9844: CALL_OW 255
9848: PUSH
9849: LD_VAR 0 4
9853: EQUAL
9854: IFFALSE 9873
// begin SetAchievement ( ACH_RAD ) ;
9856: LD_STRING ACH_RAD
9858: PPUSH
9859: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9863: LD_STRING ACH_NL
9865: PPUSH
9866: LD_INT 1
9868: PPUSH
9869: CALL_OW 564
// end end ;
9873: LD_VAR 0 5
9877: RET
// export function SA_Win ( side ) ; begin
9878: LD_INT 0
9880: PPUSH
// case side of 1 :
9881: LD_VAR 0 1
9885: PUSH
9886: LD_INT 1
9888: DOUBLE
9889: EQUAL
9890: IFTRUE 9894
9892: GO 9907
9894: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9895: LD_STRING ACH_AH
9897: PPUSH
9898: LD_INT 1
9900: PPUSH
9901: CALL_OW 564
9905: GO 10070
9907: LD_INT 2
9909: DOUBLE
9910: EQUAL
9911: IFTRUE 9915
9913: GO 9928
9915: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9916: LD_STRING ACH_E
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: CALL_OW 564
9926: GO 10070
9928: LD_INT 3
9930: DOUBLE
9931: EQUAL
9932: IFTRUE 9936
9934: GO 9949
9936: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9937: LD_STRING ACH_OOL
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL_OW 564
9947: GO 10070
9949: LD_INT 1
9951: PUSH
9952: LD_INT 2
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: DOUBLE
9959: EQUAL
9960: IFTRUE 9964
9962: GO 9989
9964: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9965: LD_STRING ACH_AH
9967: PPUSH
9968: LD_REAL  5.00000000000000E-0001
9971: PPUSH
9972: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9976: LD_STRING ACH_E
9978: PPUSH
9979: LD_REAL  5.00000000000000E-0001
9982: PPUSH
9983: CALL_OW 564
// end ; [ 2 , 3 ] :
9987: GO 10070
9989: LD_INT 2
9991: PUSH
9992: LD_INT 3
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: DOUBLE
9999: EQUAL
10000: IFTRUE 10004
10002: GO 10029
10004: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10005: LD_STRING ACH_OOL
10007: PPUSH
10008: LD_REAL  5.00000000000000E-0001
10011: PPUSH
10012: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10016: LD_STRING ACH_E
10018: PPUSH
10019: LD_REAL  5.00000000000000E-0001
10022: PPUSH
10023: CALL_OW 564
// end ; [ 3 , 1 ] :
10027: GO 10070
10029: LD_INT 3
10031: PUSH
10032: LD_INT 1
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: DOUBLE
10039: EQUAL
10040: IFTRUE 10044
10042: GO 10069
10044: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10045: LD_STRING ACH_AH
10047: PPUSH
10048: LD_REAL  5.00000000000000E-0001
10051: PPUSH
10052: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10056: LD_STRING ACH_OOL
10058: PPUSH
10059: LD_REAL  5.00000000000000E-0001
10062: PPUSH
10063: CALL_OW 564
// end ; end ;
10067: GO 10070
10069: POP
// end ; end_of_file
10070: LD_VAR 0 2
10074: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10075: LD_INT 0
10077: PPUSH
10078: PPUSH
10079: PPUSH
// for side = 1 to 8 do
10080: LD_ADDR_VAR 0 2
10084: PUSH
10085: DOUBLE
10086: LD_INT 1
10088: DEC
10089: ST_TO_ADDR
10090: LD_INT 8
10092: PUSH
10093: FOR_TO
10094: IFFALSE 10215
// begin for i = 1 to 72 do
10096: LD_ADDR_VAR 0 3
10100: PUSH
10101: DOUBLE
10102: LD_INT 1
10104: DEC
10105: ST_TO_ADDR
10106: LD_INT 72
10108: PUSH
10109: FOR_TO
10110: IFFALSE 10141
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
10112: LD_VAR 0 3
10116: PPUSH
10117: LD_VAR 0 2
10121: PPUSH
10122: LD_INT 0
10124: PPUSH
10125: LD_VAR 0 3
10129: PPUSH
10130: CALL_OW 565
10134: PPUSH
10135: CALL_OW 322
10139: GO 10109
10141: POP
10142: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
10143: LD_INT 73
10145: PPUSH
10146: LD_VAR 0 2
10150: PPUSH
10151: LD_INT 0
10153: PPUSH
10154: LD_INT 25
10156: PPUSH
10157: CALL_OW 565
10161: PPUSH
10162: CALL_OW 322
// for i = 0 to 40 do
10166: LD_ADDR_VAR 0 3
10170: PUSH
10171: DOUBLE
10172: LD_INT 0
10174: DEC
10175: ST_TO_ADDR
10176: LD_INT 40
10178: PUSH
10179: FOR_TO
10180: IFFALSE 10211
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
10182: LD_VAR 0 3
10186: PPUSH
10187: LD_VAR 0 2
10191: PPUSH
10192: LD_INT 1
10194: PPUSH
10195: LD_VAR 0 3
10199: PPUSH
10200: CALL_OW 565
10204: PPUSH
10205: CALL_OW 324
10209: GO 10179
10211: POP
10212: POP
// end ;
10213: GO 10093
10215: POP
10216: POP
// end ;
10217: LD_VAR 0 1
10221: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
10222: LD_INT 0
10224: PPUSH
10225: PPUSH
10226: PPUSH
// for side = 1 to 8 do
10227: LD_ADDR_VAR 0 3
10231: PUSH
10232: DOUBLE
10233: LD_INT 1
10235: DEC
10236: ST_TO_ADDR
10237: LD_INT 8
10239: PUSH
10240: FOR_TO
10241: IFFALSE 14237
// begin for i = 1 to 73 do
10243: LD_ADDR_VAR 0 4
10247: PUSH
10248: DOUBLE
10249: LD_INT 1
10251: DEC
10252: ST_TO_ADDR
10253: LD_INT 73
10255: PUSH
10256: FOR_TO
10257: IFFALSE 10278
// SetTech ( i , side , state_disabled ) ;
10259: LD_VAR 0 4
10263: PPUSH
10264: LD_VAR 0 3
10268: PPUSH
10269: LD_INT 0
10271: PPUSH
10272: CALL_OW 322
10276: GO 10256
10278: POP
10279: POP
// for i = 0 to 40 do
10280: LD_ADDR_VAR 0 4
10284: PUSH
10285: DOUBLE
10286: LD_INT 0
10288: DEC
10289: ST_TO_ADDR
10290: LD_INT 40
10292: PUSH
10293: FOR_TO
10294: IFFALSE 10315
// SetRestrict ( i , side , false ) ;
10296: LD_VAR 0 4
10300: PPUSH
10301: LD_VAR 0 3
10305: PPUSH
10306: LD_INT 0
10308: PPUSH
10309: CALL_OW 324
10313: GO 10293
10315: POP
10316: POP
// case level of 1 :
10317: LD_VAR 0 1
10321: PUSH
10322: LD_INT 1
10324: DOUBLE
10325: EQUAL
10326: IFTRUE 10330
10328: GO 10483
10330: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10331: LD_INT 35
10333: PPUSH
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 1
10341: PPUSH
10342: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10346: LD_INT 45
10348: PPUSH
10349: LD_VAR 0 3
10353: PPUSH
10354: LD_INT 1
10356: PPUSH
10357: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10361: LD_INT 46
10363: PPUSH
10364: LD_VAR 0 3
10368: PPUSH
10369: LD_INT 1
10371: PPUSH
10372: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10376: LD_INT 47
10378: PPUSH
10379: LD_VAR 0 3
10383: PPUSH
10384: LD_INT 1
10386: PPUSH
10387: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10391: LD_INT 0
10393: PPUSH
10394: LD_VAR 0 3
10398: PPUSH
10399: LD_INT 1
10401: PPUSH
10402: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10406: LD_INT 2
10408: PPUSH
10409: LD_VAR 0 3
10413: PPUSH
10414: LD_INT 1
10416: PPUSH
10417: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10421: LD_INT 4
10423: PPUSH
10424: LD_VAR 0 3
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10436: LD_INT 6
10438: PPUSH
10439: LD_VAR 0 3
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10451: LD_INT 29
10453: PPUSH
10454: LD_VAR 0 3
10458: PPUSH
10459: LD_INT 1
10461: PPUSH
10462: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10466: LD_INT 31
10468: PPUSH
10469: LD_VAR 0 3
10473: PPUSH
10474: LD_INT 1
10476: PPUSH
10477: CALL_OW 324
// end ; 2 :
10481: GO 14235
10483: LD_INT 2
10485: DOUBLE
10486: EQUAL
10487: IFTRUE 10491
10489: GO 10689
10491: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10492: LD_INT 35
10494: PPUSH
10495: LD_VAR 0 3
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10507: LD_INT 45
10509: PPUSH
10510: LD_VAR 0 3
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10522: LD_INT 46
10524: PPUSH
10525: LD_VAR 0 3
10529: PPUSH
10530: LD_INT 1
10532: PPUSH
10533: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10537: LD_INT 47
10539: PPUSH
10540: LD_VAR 0 3
10544: PPUSH
10545: LD_INT 1
10547: PPUSH
10548: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10552: LD_INT 1
10554: PPUSH
10555: LD_VAR 0 3
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10567: LD_INT 2
10569: PPUSH
10570: LD_VAR 0 3
10574: PPUSH
10575: LD_INT 1
10577: PPUSH
10578: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10582: LD_INT 11
10584: PPUSH
10585: LD_VAR 0 3
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10597: LD_INT 0
10599: PPUSH
10600: LD_VAR 0 3
10604: PPUSH
10605: LD_INT 1
10607: PPUSH
10608: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10612: LD_INT 2
10614: PPUSH
10615: LD_VAR 0 3
10619: PPUSH
10620: LD_INT 1
10622: PPUSH
10623: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10627: LD_INT 4
10629: PPUSH
10630: LD_VAR 0 3
10634: PPUSH
10635: LD_INT 1
10637: PPUSH
10638: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10642: LD_INT 6
10644: PPUSH
10645: LD_VAR 0 3
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10657: LD_INT 29
10659: PPUSH
10660: LD_VAR 0 3
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10672: LD_INT 31
10674: PPUSH
10675: LD_VAR 0 3
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 324
// end ; 3 :
10687: GO 14235
10689: LD_INT 3
10691: DOUBLE
10692: EQUAL
10693: IFTRUE 10697
10695: GO 11150
10697: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10698: LD_INT 35
10700: PPUSH
10701: LD_VAR 0 3
10705: PPUSH
10706: LD_INT 1
10708: PPUSH
10709: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10713: LD_INT 45
10715: PPUSH
10716: LD_VAR 0 3
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10728: LD_INT 46
10730: PPUSH
10731: LD_VAR 0 3
10735: PPUSH
10736: LD_INT 1
10738: PPUSH
10739: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10743: LD_INT 47
10745: PPUSH
10746: LD_VAR 0 3
10750: PPUSH
10751: LD_INT 1
10753: PPUSH
10754: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10758: LD_INT 1
10760: PPUSH
10761: LD_VAR 0 3
10765: PPUSH
10766: LD_INT 1
10768: PPUSH
10769: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10773: LD_INT 2
10775: PPUSH
10776: LD_VAR 0 3
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10788: LD_INT 11
10790: PPUSH
10791: LD_VAR 0 3
10795: PPUSH
10796: LD_INT 1
10798: PPUSH
10799: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10803: LD_INT 48
10805: PPUSH
10806: LD_VAR 0 3
10810: PPUSH
10811: LD_INT 1
10813: PPUSH
10814: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10818: LD_INT 69
10820: PPUSH
10821: LD_VAR 0 3
10825: PPUSH
10826: LD_INT 1
10828: PPUSH
10829: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10833: LD_INT 39
10835: PPUSH
10836: LD_VAR 0 3
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10848: LD_INT 43
10850: PPUSH
10851: LD_VAR 0 3
10855: PPUSH
10856: LD_INT 1
10858: PPUSH
10859: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10863: LD_INT 51
10865: PPUSH
10866: LD_VAR 0 3
10870: PPUSH
10871: LD_INT 1
10873: PPUSH
10874: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10878: LD_INT 6
10880: PPUSH
10881: LD_VAR 0 3
10885: PPUSH
10886: LD_INT 1
10888: PPUSH
10889: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10893: LD_INT 0
10895: PPUSH
10896: LD_VAR 0 3
10900: PPUSH
10901: LD_INT 1
10903: PPUSH
10904: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10908: LD_INT 2
10910: PPUSH
10911: LD_VAR 0 3
10915: PPUSH
10916: LD_INT 1
10918: PPUSH
10919: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10923: LD_INT 3
10925: PPUSH
10926: LD_VAR 0 3
10930: PPUSH
10931: LD_INT 1
10933: PPUSH
10934: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10938: LD_INT 4
10940: PPUSH
10941: LD_VAR 0 3
10945: PPUSH
10946: LD_INT 1
10948: PPUSH
10949: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10953: LD_INT 6
10955: PPUSH
10956: LD_VAR 0 3
10960: PPUSH
10961: LD_INT 1
10963: PPUSH
10964: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10968: LD_INT 7
10970: PPUSH
10971: LD_VAR 0 3
10975: PPUSH
10976: LD_INT 1
10978: PPUSH
10979: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10983: LD_INT 8
10985: PPUSH
10986: LD_VAR 0 3
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10998: LD_INT 10
11000: PPUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: LD_INT 1
11008: PPUSH
11009: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11013: LD_INT 15
11015: PPUSH
11016: LD_VAR 0 3
11020: PPUSH
11021: LD_INT 1
11023: PPUSH
11024: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11028: LD_INT 16
11030: PPUSH
11031: LD_VAR 0 3
11035: PPUSH
11036: LD_INT 1
11038: PPUSH
11039: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11043: LD_INT 17
11045: PPUSH
11046: LD_VAR 0 3
11050: PPUSH
11051: LD_INT 1
11053: PPUSH
11054: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11058: LD_INT 20
11060: PPUSH
11061: LD_VAR 0 3
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11073: LD_INT 26
11075: PPUSH
11076: LD_VAR 0 3
11080: PPUSH
11081: LD_INT 1
11083: PPUSH
11084: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11088: LD_INT 27
11090: PPUSH
11091: LD_VAR 0 3
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11103: LD_INT 29
11105: PPUSH
11106: LD_VAR 0 3
11110: PPUSH
11111: LD_INT 1
11113: PPUSH
11114: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11118: LD_INT 31
11120: PPUSH
11121: LD_VAR 0 3
11125: PPUSH
11126: LD_INT 1
11128: PPUSH
11129: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11133: LD_INT 32
11135: PPUSH
11136: LD_VAR 0 3
11140: PPUSH
11141: LD_INT 1
11143: PPUSH
11144: CALL_OW 324
// end ; 4 :
11148: GO 14235
11150: LD_INT 4
11152: DOUBLE
11153: EQUAL
11154: IFTRUE 11158
11156: GO 12106
11158: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11159: LD_INT 35
11161: PPUSH
11162: LD_VAR 0 3
11166: PPUSH
11167: LD_INT 1
11169: PPUSH
11170: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11174: LD_INT 45
11176: PPUSH
11177: LD_VAR 0 3
11181: PPUSH
11182: LD_INT 1
11184: PPUSH
11185: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11189: LD_INT 46
11191: PPUSH
11192: LD_VAR 0 3
11196: PPUSH
11197: LD_INT 1
11199: PPUSH
11200: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11204: LD_INT 47
11206: PPUSH
11207: LD_VAR 0 3
11211: PPUSH
11212: LD_INT 1
11214: PPUSH
11215: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11219: LD_INT 1
11221: PPUSH
11222: LD_VAR 0 3
11226: PPUSH
11227: LD_INT 1
11229: PPUSH
11230: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11234: LD_INT 2
11236: PPUSH
11237: LD_VAR 0 3
11241: PPUSH
11242: LD_INT 1
11244: PPUSH
11245: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11249: LD_INT 11
11251: PPUSH
11252: LD_VAR 0 3
11256: PPUSH
11257: LD_INT 1
11259: PPUSH
11260: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11264: LD_INT 20
11266: PPUSH
11267: LD_VAR 0 3
11271: PPUSH
11272: LD_INT 1
11274: PPUSH
11275: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11279: LD_INT 48
11281: PPUSH
11282: LD_VAR 0 3
11286: PPUSH
11287: LD_INT 1
11289: PPUSH
11290: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11294: LD_INT 49
11296: PPUSH
11297: LD_VAR 0 3
11301: PPUSH
11302: LD_INT 1
11304: PPUSH
11305: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11309: LD_INT 69
11311: PPUSH
11312: LD_VAR 0 3
11316: PPUSH
11317: LD_INT 1
11319: PPUSH
11320: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11324: LD_INT 39
11326: PPUSH
11327: LD_VAR 0 3
11331: PPUSH
11332: LD_INT 1
11334: PPUSH
11335: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11339: LD_INT 34
11341: PPUSH
11342: LD_VAR 0 3
11346: PPUSH
11347: LD_INT 1
11349: PPUSH
11350: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11354: LD_INT 42
11356: PPUSH
11357: LD_VAR 0 3
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11369: LD_INT 44
11371: PPUSH
11372: LD_VAR 0 3
11376: PPUSH
11377: LD_INT 1
11379: PPUSH
11380: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11384: LD_INT 41
11386: PPUSH
11387: LD_VAR 0 3
11391: PPUSH
11392: LD_INT 1
11394: PPUSH
11395: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11399: LD_INT 43
11401: PPUSH
11402: LD_VAR 0 3
11406: PPUSH
11407: LD_INT 1
11409: PPUSH
11410: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11414: LD_INT 70
11416: PPUSH
11417: LD_VAR 0 3
11421: PPUSH
11422: LD_INT 1
11424: PPUSH
11425: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11429: LD_INT 51
11431: PPUSH
11432: LD_VAR 0 3
11436: PPUSH
11437: LD_INT 1
11439: PPUSH
11440: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11444: LD_INT 52
11446: PPUSH
11447: LD_VAR 0 3
11451: PPUSH
11452: LD_INT 1
11454: PPUSH
11455: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11459: LD_INT 6
11461: PPUSH
11462: LD_VAR 0 3
11466: PPUSH
11467: LD_INT 1
11469: PPUSH
11470: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11474: LD_INT 15
11476: PPUSH
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_INT 1
11484: PPUSH
11485: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11489: LD_INT 7
11491: PPUSH
11492: LD_VAR 0 3
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11504: LD_INT 12
11506: PPUSH
11507: LD_VAR 0 3
11511: PPUSH
11512: LD_INT 1
11514: PPUSH
11515: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11519: LD_INT 18
11521: PPUSH
11522: LD_VAR 0 3
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11534: LD_INT 60
11536: PPUSH
11537: LD_VAR 0 3
11541: PPUSH
11542: LD_INT 1
11544: PPUSH
11545: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11549: LD_INT 9
11551: PPUSH
11552: LD_VAR 0 3
11556: PPUSH
11557: LD_INT 1
11559: PPUSH
11560: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11564: LD_INT 30
11566: PPUSH
11567: LD_VAR 0 3
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11579: LD_INT 37
11581: PPUSH
11582: LD_VAR 0 3
11586: PPUSH
11587: LD_INT 1
11589: PPUSH
11590: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11594: LD_INT 5
11596: PPUSH
11597: LD_VAR 0 3
11601: PPUSH
11602: LD_INT 1
11604: PPUSH
11605: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11609: LD_INT 66
11611: PPUSH
11612: LD_VAR 0 3
11616: PPUSH
11617: LD_INT 1
11619: PPUSH
11620: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11624: LD_INT 21
11626: PPUSH
11627: LD_VAR 0 3
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11639: LD_INT 22
11641: PPUSH
11642: LD_VAR 0 3
11646: PPUSH
11647: LD_INT 1
11649: PPUSH
11650: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11654: LD_INT 54
11656: PPUSH
11657: LD_VAR 0 3
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11669: LD_INT 0
11671: PPUSH
11672: LD_VAR 0 3
11676: PPUSH
11677: LD_INT 1
11679: PPUSH
11680: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11684: LD_INT 1
11686: PPUSH
11687: LD_VAR 0 3
11691: PPUSH
11692: LD_INT 1
11694: PPUSH
11695: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11699: LD_INT 2
11701: PPUSH
11702: LD_VAR 0 3
11706: PPUSH
11707: LD_INT 1
11709: PPUSH
11710: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11714: LD_INT 3
11716: PPUSH
11717: LD_VAR 0 3
11721: PPUSH
11722: LD_INT 1
11724: PPUSH
11725: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11729: LD_INT 4
11731: PPUSH
11732: LD_VAR 0 3
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11744: LD_INT 5
11746: PPUSH
11747: LD_VAR 0 3
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11759: LD_INT 6
11761: PPUSH
11762: LD_VAR 0 3
11766: PPUSH
11767: LD_INT 1
11769: PPUSH
11770: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11774: LD_INT 7
11776: PPUSH
11777: LD_VAR 0 3
11781: PPUSH
11782: LD_INT 1
11784: PPUSH
11785: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11789: LD_INT 8
11791: PPUSH
11792: LD_VAR 0 3
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11804: LD_INT 10
11806: PPUSH
11807: LD_VAR 0 3
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11819: LD_INT 11
11821: PPUSH
11822: LD_VAR 0 3
11826: PPUSH
11827: LD_INT 1
11829: PPUSH
11830: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11834: LD_INT 12
11836: PPUSH
11837: LD_VAR 0 3
11841: PPUSH
11842: LD_INT 1
11844: PPUSH
11845: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11849: LD_INT 13
11851: PPUSH
11852: LD_VAR 0 3
11856: PPUSH
11857: LD_INT 1
11859: PPUSH
11860: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11864: LD_INT 14
11866: PPUSH
11867: LD_VAR 0 3
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11879: LD_INT 15
11881: PPUSH
11882: LD_VAR 0 3
11886: PPUSH
11887: LD_INT 1
11889: PPUSH
11890: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11894: LD_INT 16
11896: PPUSH
11897: LD_VAR 0 3
11901: PPUSH
11902: LD_INT 1
11904: PPUSH
11905: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11909: LD_INT 17
11911: PPUSH
11912: LD_VAR 0 3
11916: PPUSH
11917: LD_INT 1
11919: PPUSH
11920: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11924: LD_INT 19
11926: PPUSH
11927: LD_VAR 0 3
11931: PPUSH
11932: LD_INT 1
11934: PPUSH
11935: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11939: LD_INT 20
11941: PPUSH
11942: LD_VAR 0 3
11946: PPUSH
11947: LD_INT 1
11949: PPUSH
11950: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11954: LD_INT 21
11956: PPUSH
11957: LD_VAR 0 3
11961: PPUSH
11962: LD_INT 1
11964: PPUSH
11965: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11969: LD_INT 23
11971: PPUSH
11972: LD_VAR 0 3
11976: PPUSH
11977: LD_INT 1
11979: PPUSH
11980: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11984: LD_INT 26
11986: PPUSH
11987: LD_VAR 0 3
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11999: LD_INT 27
12001: PPUSH
12002: LD_VAR 0 3
12006: PPUSH
12007: LD_INT 1
12009: PPUSH
12010: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12014: LD_INT 28
12016: PPUSH
12017: LD_VAR 0 3
12021: PPUSH
12022: LD_INT 1
12024: PPUSH
12025: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12029: LD_INT 29
12031: PPUSH
12032: LD_VAR 0 3
12036: PPUSH
12037: LD_INT 1
12039: PPUSH
12040: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12044: LD_INT 30
12046: PPUSH
12047: LD_VAR 0 3
12051: PPUSH
12052: LD_INT 1
12054: PPUSH
12055: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12059: LD_INT 31
12061: PPUSH
12062: LD_VAR 0 3
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12074: LD_INT 32
12076: PPUSH
12077: LD_VAR 0 3
12081: PPUSH
12082: LD_INT 1
12084: PPUSH
12085: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12089: LD_INT 36
12091: PPUSH
12092: LD_VAR 0 3
12096: PPUSH
12097: LD_INT 1
12099: PPUSH
12100: CALL_OW 324
// end ; 5 :
12104: GO 14235
12106: LD_INT 5
12108: DOUBLE
12109: EQUAL
12110: IFTRUE 12114
12112: GO 13227
12114: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12115: LD_INT 35
12117: PPUSH
12118: LD_VAR 0 3
12122: PPUSH
12123: LD_INT 1
12125: PPUSH
12126: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12130: LD_INT 45
12132: PPUSH
12133: LD_VAR 0 3
12137: PPUSH
12138: LD_INT 1
12140: PPUSH
12141: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12145: LD_INT 46
12147: PPUSH
12148: LD_VAR 0 3
12152: PPUSH
12153: LD_INT 1
12155: PPUSH
12156: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12160: LD_INT 47
12162: PPUSH
12163: LD_VAR 0 3
12167: PPUSH
12168: LD_INT 1
12170: PPUSH
12171: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12175: LD_INT 1
12177: PPUSH
12178: LD_VAR 0 3
12182: PPUSH
12183: LD_INT 1
12185: PPUSH
12186: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12190: LD_INT 2
12192: PPUSH
12193: LD_VAR 0 3
12197: PPUSH
12198: LD_INT 1
12200: PPUSH
12201: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12205: LD_INT 11
12207: PPUSH
12208: LD_VAR 0 3
12212: PPUSH
12213: LD_INT 1
12215: PPUSH
12216: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12220: LD_INT 20
12222: PPUSH
12223: LD_VAR 0 3
12227: PPUSH
12228: LD_INT 1
12230: PPUSH
12231: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12235: LD_INT 48
12237: PPUSH
12238: LD_VAR 0 3
12242: PPUSH
12243: LD_INT 1
12245: PPUSH
12246: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12250: LD_INT 49
12252: PPUSH
12253: LD_VAR 0 3
12257: PPUSH
12258: LD_INT 1
12260: PPUSH
12261: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12265: LD_INT 69
12267: PPUSH
12268: LD_VAR 0 3
12272: PPUSH
12273: LD_INT 1
12275: PPUSH
12276: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12280: LD_INT 39
12282: PPUSH
12283: LD_VAR 0 3
12287: PPUSH
12288: LD_INT 1
12290: PPUSH
12291: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12295: LD_INT 34
12297: PPUSH
12298: LD_VAR 0 3
12302: PPUSH
12303: LD_INT 1
12305: PPUSH
12306: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12310: LD_INT 42
12312: PPUSH
12313: LD_VAR 0 3
12317: PPUSH
12318: LD_INT 1
12320: PPUSH
12321: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12325: LD_INT 44
12327: PPUSH
12328: LD_VAR 0 3
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12340: LD_INT 41
12342: PPUSH
12343: LD_VAR 0 3
12347: PPUSH
12348: LD_INT 1
12350: PPUSH
12351: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12355: LD_INT 40
12357: PPUSH
12358: LD_VAR 0 3
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12370: LD_INT 43
12372: PPUSH
12373: LD_VAR 0 3
12377: PPUSH
12378: LD_INT 1
12380: PPUSH
12381: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12385: LD_INT 70
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: LD_INT 1
12395: PPUSH
12396: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12400: LD_INT 51
12402: PPUSH
12403: LD_VAR 0 3
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12415: LD_INT 52
12417: PPUSH
12418: LD_VAR 0 3
12422: PPUSH
12423: LD_INT 1
12425: PPUSH
12426: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12430: LD_INT 6
12432: PPUSH
12433: LD_VAR 0 3
12437: PPUSH
12438: LD_INT 1
12440: PPUSH
12441: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12445: LD_INT 15
12447: PPUSH
12448: LD_VAR 0 3
12452: PPUSH
12453: LD_INT 1
12455: PPUSH
12456: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12460: LD_INT 7
12462: PPUSH
12463: LD_VAR 0 3
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12475: LD_INT 12
12477: PPUSH
12478: LD_VAR 0 3
12482: PPUSH
12483: LD_INT 1
12485: PPUSH
12486: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12490: LD_INT 17
12492: PPUSH
12493: LD_VAR 0 3
12497: PPUSH
12498: LD_INT 1
12500: PPUSH
12501: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12505: LD_INT 18
12507: PPUSH
12508: LD_VAR 0 3
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12520: LD_INT 60
12522: PPUSH
12523: LD_VAR 0 3
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12535: LD_INT 32
12537: PPUSH
12538: LD_VAR 0 3
12542: PPUSH
12543: LD_INT 1
12545: PPUSH
12546: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12550: LD_INT 9
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: LD_INT 1
12560: PPUSH
12561: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12565: LD_INT 57
12567: PPUSH
12568: LD_VAR 0 3
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12580: LD_INT 30
12582: PPUSH
12583: LD_VAR 0 3
12587: PPUSH
12588: LD_INT 1
12590: PPUSH
12591: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12595: LD_INT 37
12597: PPUSH
12598: LD_VAR 0 3
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12610: LD_INT 63
12612: PPUSH
12613: LD_VAR 0 3
12617: PPUSH
12618: LD_INT 1
12620: PPUSH
12621: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12625: LD_INT 3
12627: PPUSH
12628: LD_VAR 0 3
12632: PPUSH
12633: LD_INT 1
12635: PPUSH
12636: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12640: LD_INT 4
12642: PPUSH
12643: LD_VAR 0 3
12647: PPUSH
12648: LD_INT 1
12650: PPUSH
12651: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12655: LD_INT 5
12657: PPUSH
12658: LD_VAR 0 3
12662: PPUSH
12663: LD_INT 1
12665: PPUSH
12666: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12670: LD_INT 66
12672: PPUSH
12673: LD_VAR 0 3
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12685: LD_INT 21
12687: PPUSH
12688: LD_VAR 0 3
12692: PPUSH
12693: LD_INT 1
12695: PPUSH
12696: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12700: LD_INT 22
12702: PPUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: LD_INT 1
12710: PPUSH
12711: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12715: LD_INT 19
12717: PPUSH
12718: LD_VAR 0 3
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12730: LD_INT 54
12732: PPUSH
12733: LD_VAR 0 3
12737: PPUSH
12738: LD_INT 1
12740: PPUSH
12741: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12745: LD_INT 55
12747: PPUSH
12748: LD_VAR 0 3
12752: PPUSH
12753: LD_INT 1
12755: PPUSH
12756: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12760: LD_INT 0
12762: PPUSH
12763: LD_VAR 0 3
12767: PPUSH
12768: LD_INT 1
12770: PPUSH
12771: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12775: LD_INT 1
12777: PPUSH
12778: LD_VAR 0 3
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12790: LD_INT 2
12792: PPUSH
12793: LD_VAR 0 3
12797: PPUSH
12798: LD_INT 1
12800: PPUSH
12801: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12805: LD_INT 3
12807: PPUSH
12808: LD_VAR 0 3
12812: PPUSH
12813: LD_INT 1
12815: PPUSH
12816: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12820: LD_INT 4
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: LD_INT 1
12830: PPUSH
12831: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12835: LD_INT 5
12837: PPUSH
12838: LD_VAR 0 3
12842: PPUSH
12843: LD_INT 1
12845: PPUSH
12846: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12850: LD_INT 6
12852: PPUSH
12853: LD_VAR 0 3
12857: PPUSH
12858: LD_INT 1
12860: PPUSH
12861: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12865: LD_INT 7
12867: PPUSH
12868: LD_VAR 0 3
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12880: LD_INT 8
12882: PPUSH
12883: LD_VAR 0 3
12887: PPUSH
12888: LD_INT 1
12890: PPUSH
12891: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12895: LD_INT 10
12897: PPUSH
12898: LD_VAR 0 3
12902: PPUSH
12903: LD_INT 1
12905: PPUSH
12906: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12910: LD_INT 11
12912: PPUSH
12913: LD_VAR 0 3
12917: PPUSH
12918: LD_INT 1
12920: PPUSH
12921: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12925: LD_INT 12
12927: PPUSH
12928: LD_VAR 0 3
12932: PPUSH
12933: LD_INT 1
12935: PPUSH
12936: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12940: LD_INT 13
12942: PPUSH
12943: LD_VAR 0 3
12947: PPUSH
12948: LD_INT 1
12950: PPUSH
12951: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12955: LD_INT 14
12957: PPUSH
12958: LD_VAR 0 3
12962: PPUSH
12963: LD_INT 1
12965: PPUSH
12966: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12970: LD_INT 15
12972: PPUSH
12973: LD_VAR 0 3
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12985: LD_INT 16
12987: PPUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: LD_INT 1
12995: PPUSH
12996: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13000: LD_INT 17
13002: PPUSH
13003: LD_VAR 0 3
13007: PPUSH
13008: LD_INT 1
13010: PPUSH
13011: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13015: LD_INT 18
13017: PPUSH
13018: LD_VAR 0 3
13022: PPUSH
13023: LD_INT 1
13025: PPUSH
13026: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13030: LD_INT 19
13032: PPUSH
13033: LD_VAR 0 3
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13045: LD_INT 20
13047: PPUSH
13048: LD_VAR 0 3
13052: PPUSH
13053: LD_INT 1
13055: PPUSH
13056: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13060: LD_INT 21
13062: PPUSH
13063: LD_VAR 0 3
13067: PPUSH
13068: LD_INT 1
13070: PPUSH
13071: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13075: LD_INT 23
13077: PPUSH
13078: LD_VAR 0 3
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13090: LD_INT 26
13092: PPUSH
13093: LD_VAR 0 3
13097: PPUSH
13098: LD_INT 1
13100: PPUSH
13101: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13105: LD_INT 27
13107: PPUSH
13108: LD_VAR 0 3
13112: PPUSH
13113: LD_INT 1
13115: PPUSH
13116: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13120: LD_INT 28
13122: PPUSH
13123: LD_VAR 0 3
13127: PPUSH
13128: LD_INT 1
13130: PPUSH
13131: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13135: LD_INT 29
13137: PPUSH
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_INT 1
13145: PPUSH
13146: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13150: LD_INT 30
13152: PPUSH
13153: LD_VAR 0 3
13157: PPUSH
13158: LD_INT 1
13160: PPUSH
13161: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13165: LD_INT 31
13167: PPUSH
13168: LD_VAR 0 3
13172: PPUSH
13173: LD_INT 1
13175: PPUSH
13176: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13180: LD_INT 32
13182: PPUSH
13183: LD_VAR 0 3
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
13195: LD_INT 33
13197: PPUSH
13198: LD_VAR 0 3
13202: PPUSH
13203: LD_INT 1
13205: PPUSH
13206: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13210: LD_INT 36
13212: PPUSH
13213: LD_VAR 0 3
13217: PPUSH
13218: LD_INT 1
13220: PPUSH
13221: CALL_OW 324
// end ; 6 :
13225: GO 14235
13227: LD_INT 6
13229: DOUBLE
13230: EQUAL
13231: IFTRUE 13235
13233: GO 14160
13235: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13236: LD_INT 35
13238: PPUSH
13239: LD_VAR 0 3
13243: PPUSH
13244: LD_INT 1
13246: PPUSH
13247: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13251: LD_INT 45
13253: PPUSH
13254: LD_VAR 0 3
13258: PPUSH
13259: LD_INT 1
13261: PPUSH
13262: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13266: LD_INT 46
13268: PPUSH
13269: LD_VAR 0 3
13273: PPUSH
13274: LD_INT 1
13276: PPUSH
13277: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13281: LD_INT 47
13283: PPUSH
13284: LD_VAR 0 3
13288: PPUSH
13289: LD_INT 1
13291: PPUSH
13292: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13296: LD_INT 1
13298: PPUSH
13299: LD_VAR 0 3
13303: PPUSH
13304: LD_INT 1
13306: PPUSH
13307: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13311: LD_INT 2
13313: PPUSH
13314: LD_VAR 0 3
13318: PPUSH
13319: LD_INT 1
13321: PPUSH
13322: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13326: LD_INT 11
13328: PPUSH
13329: LD_VAR 0 3
13333: PPUSH
13334: LD_INT 1
13336: PPUSH
13337: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13341: LD_INT 20
13343: PPUSH
13344: LD_VAR 0 3
13348: PPUSH
13349: LD_INT 1
13351: PPUSH
13352: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13356: LD_INT 48
13358: PPUSH
13359: LD_VAR 0 3
13363: PPUSH
13364: LD_INT 1
13366: PPUSH
13367: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13371: LD_INT 49
13373: PPUSH
13374: LD_VAR 0 3
13378: PPUSH
13379: LD_INT 1
13381: PPUSH
13382: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13386: LD_INT 50
13388: PPUSH
13389: LD_VAR 0 3
13393: PPUSH
13394: LD_INT 1
13396: PPUSH
13397: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13401: LD_INT 69
13403: PPUSH
13404: LD_VAR 0 3
13408: PPUSH
13409: LD_INT 1
13411: PPUSH
13412: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13416: LD_INT 39
13418: PPUSH
13419: LD_VAR 0 3
13423: PPUSH
13424: LD_INT 1
13426: PPUSH
13427: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13431: LD_INT 34
13433: PPUSH
13434: LD_VAR 0 3
13438: PPUSH
13439: LD_INT 1
13441: PPUSH
13442: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13446: LD_INT 42
13448: PPUSH
13449: LD_VAR 0 3
13453: PPUSH
13454: LD_INT 1
13456: PPUSH
13457: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13461: LD_INT 44
13463: PPUSH
13464: LD_VAR 0 3
13468: PPUSH
13469: LD_INT 1
13471: PPUSH
13472: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13476: LD_INT 41
13478: PPUSH
13479: LD_VAR 0 3
13483: PPUSH
13484: LD_INT 1
13486: PPUSH
13487: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13491: LD_INT 13
13493: PPUSH
13494: LD_VAR 0 3
13498: PPUSH
13499: LD_INT 1
13501: PPUSH
13502: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13506: LD_INT 40
13508: PPUSH
13509: LD_VAR 0 3
13513: PPUSH
13514: LD_INT 1
13516: PPUSH
13517: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13521: LD_INT 43
13523: PPUSH
13524: LD_VAR 0 3
13528: PPUSH
13529: LD_INT 1
13531: PPUSH
13532: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13536: LD_INT 70
13538: PPUSH
13539: LD_VAR 0 3
13543: PPUSH
13544: LD_INT 1
13546: PPUSH
13547: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13551: LD_INT 23
13553: PPUSH
13554: LD_VAR 0 3
13558: PPUSH
13559: LD_INT 1
13561: PPUSH
13562: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13566: LD_INT 51
13568: PPUSH
13569: LD_VAR 0 3
13573: PPUSH
13574: LD_INT 1
13576: PPUSH
13577: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13581: LD_INT 52
13583: PPUSH
13584: LD_VAR 0 3
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13596: LD_INT 6
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: LD_INT 1
13606: PPUSH
13607: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13611: LD_INT 15
13613: PPUSH
13614: LD_VAR 0 3
13618: PPUSH
13619: LD_INT 1
13621: PPUSH
13622: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13626: LD_INT 7
13628: PPUSH
13629: LD_VAR 0 3
13633: PPUSH
13634: LD_INT 1
13636: PPUSH
13637: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13641: LD_INT 12
13643: PPUSH
13644: LD_VAR 0 3
13648: PPUSH
13649: LD_INT 1
13651: PPUSH
13652: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13656: LD_INT 10
13658: PPUSH
13659: LD_VAR 0 3
13663: PPUSH
13664: LD_INT 1
13666: PPUSH
13667: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13671: LD_INT 17
13673: PPUSH
13674: LD_VAR 0 3
13678: PPUSH
13679: LD_INT 1
13681: PPUSH
13682: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13686: LD_INT 18
13688: PPUSH
13689: LD_VAR 0 3
13693: PPUSH
13694: LD_INT 1
13696: PPUSH
13697: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13701: LD_INT 60
13703: PPUSH
13704: LD_VAR 0 3
13708: PPUSH
13709: LD_INT 1
13711: PPUSH
13712: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13716: LD_INT 61
13718: PPUSH
13719: LD_VAR 0 3
13723: PPUSH
13724: LD_INT 1
13726: PPUSH
13727: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13731: LD_INT 32
13733: PPUSH
13734: LD_VAR 0 3
13738: PPUSH
13739: LD_INT 1
13741: PPUSH
13742: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13746: LD_INT 27
13748: PPUSH
13749: LD_VAR 0 3
13753: PPUSH
13754: LD_INT 1
13756: PPUSH
13757: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13761: LD_INT 36
13763: PPUSH
13764: LD_VAR 0 3
13768: PPUSH
13769: LD_INT 1
13771: PPUSH
13772: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13776: LD_INT 33
13778: PPUSH
13779: LD_VAR 0 3
13783: PPUSH
13784: LD_INT 1
13786: PPUSH
13787: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13791: LD_INT 9
13793: PPUSH
13794: LD_VAR 0 3
13798: PPUSH
13799: LD_INT 1
13801: PPUSH
13802: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13806: LD_INT 38
13808: PPUSH
13809: LD_VAR 0 3
13813: PPUSH
13814: LD_INT 1
13816: PPUSH
13817: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13821: LD_INT 57
13823: PPUSH
13824: LD_VAR 0 3
13828: PPUSH
13829: LD_INT 1
13831: PPUSH
13832: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13836: LD_INT 58
13838: PPUSH
13839: LD_VAR 0 3
13843: PPUSH
13844: LD_INT 1
13846: PPUSH
13847: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13851: LD_INT 28
13853: PPUSH
13854: LD_VAR 0 3
13858: PPUSH
13859: LD_INT 1
13861: PPUSH
13862: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13866: LD_INT 29
13868: PPUSH
13869: LD_VAR 0 3
13873: PPUSH
13874: LD_INT 1
13876: PPUSH
13877: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13881: LD_INT 30
13883: PPUSH
13884: LD_VAR 0 3
13888: PPUSH
13889: LD_INT 1
13891: PPUSH
13892: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13896: LD_INT 37
13898: PPUSH
13899: LD_VAR 0 3
13903: PPUSH
13904: LD_INT 1
13906: PPUSH
13907: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13911: LD_INT 63
13913: PPUSH
13914: LD_VAR 0 3
13918: PPUSH
13919: LD_INT 1
13921: PPUSH
13922: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13926: LD_INT 64
13928: PPUSH
13929: LD_VAR 0 3
13933: PPUSH
13934: LD_INT 1
13936: PPUSH
13937: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13941: LD_INT 3
13943: PPUSH
13944: LD_VAR 0 3
13948: PPUSH
13949: LD_INT 1
13951: PPUSH
13952: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13956: LD_INT 4
13958: PPUSH
13959: LD_VAR 0 3
13963: PPUSH
13964: LD_INT 1
13966: PPUSH
13967: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13971: LD_INT 5
13973: PPUSH
13974: LD_VAR 0 3
13978: PPUSH
13979: LD_INT 1
13981: PPUSH
13982: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13986: LD_INT 8
13988: PPUSH
13989: LD_VAR 0 3
13993: PPUSH
13994: LD_INT 1
13996: PPUSH
13997: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14001: LD_INT 66
14003: PPUSH
14004: LD_VAR 0 3
14008: PPUSH
14009: LD_INT 1
14011: PPUSH
14012: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14016: LD_INT 67
14018: PPUSH
14019: LD_VAR 0 3
14023: PPUSH
14024: LD_INT 1
14026: PPUSH
14027: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14031: LD_INT 21
14033: PPUSH
14034: LD_VAR 0 3
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14046: LD_INT 22
14048: PPUSH
14049: LD_VAR 0 3
14053: PPUSH
14054: LD_INT 1
14056: PPUSH
14057: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14061: LD_INT 19
14063: PPUSH
14064: LD_VAR 0 3
14068: PPUSH
14069: LD_INT 1
14071: PPUSH
14072: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14076: LD_INT 26
14078: PPUSH
14079: LD_VAR 0 3
14083: PPUSH
14084: LD_INT 1
14086: PPUSH
14087: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14091: LD_INT 54
14093: PPUSH
14094: LD_VAR 0 3
14098: PPUSH
14099: LD_INT 1
14101: PPUSH
14102: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14106: LD_INT 55
14108: PPUSH
14109: LD_VAR 0 3
14113: PPUSH
14114: LD_INT 1
14116: PPUSH
14117: CALL_OW 322
// for i = 0 to 39 do
14121: LD_ADDR_VAR 0 4
14125: PUSH
14126: DOUBLE
14127: LD_INT 0
14129: DEC
14130: ST_TO_ADDR
14131: LD_INT 39
14133: PUSH
14134: FOR_TO
14135: IFFALSE 14156
// SetRestrict ( i , side , true ) ;
14137: LD_VAR 0 4
14141: PPUSH
14142: LD_VAR 0 3
14146: PPUSH
14147: LD_INT 1
14149: PPUSH
14150: CALL_OW 324
14154: GO 14134
14156: POP
14157: POP
// end ; else
14158: GO 14235
14160: POP
// begin for i = 1 to 73 do
14161: LD_ADDR_VAR 0 4
14165: PUSH
14166: DOUBLE
14167: LD_INT 1
14169: DEC
14170: ST_TO_ADDR
14171: LD_INT 73
14173: PUSH
14174: FOR_TO
14175: IFFALSE 14196
// SetTech ( i , side , state_enabled ) ;
14177: LD_VAR 0 4
14181: PPUSH
14182: LD_VAR 0 3
14186: PPUSH
14187: LD_INT 1
14189: PPUSH
14190: CALL_OW 322
14194: GO 14174
14196: POP
14197: POP
// for i = 0 to 39 do
14198: LD_ADDR_VAR 0 4
14202: PUSH
14203: DOUBLE
14204: LD_INT 0
14206: DEC
14207: ST_TO_ADDR
14208: LD_INT 39
14210: PUSH
14211: FOR_TO
14212: IFFALSE 14233
// SetRestrict ( i , side , true ) ;
14214: LD_VAR 0 4
14218: PPUSH
14219: LD_VAR 0 3
14223: PPUSH
14224: LD_INT 1
14226: PPUSH
14227: CALL_OW 324
14231: GO 14211
14233: POP
14234: POP
// end ; end ; end ;
14235: GO 10240
14237: POP
14238: POP
// end ; end_of_file
14239: LD_VAR 0 2
14243: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
14244: LD_INT 0
14246: PPUSH
14247: PPUSH
14248: PPUSH
14249: PPUSH
14250: PPUSH
14251: PPUSH
14252: PPUSH
14253: PPUSH
14254: PPUSH
// for i := 1 to 8 do
14255: LD_ADDR_VAR 0 2
14259: PUSH
14260: DOUBLE
14261: LD_INT 1
14263: DEC
14264: ST_TO_ADDR
14265: LD_INT 8
14267: PUSH
14268: FOR_TO
14269: IFFALSE 14653
// begin if Side_Positions [ i ] then
14271: LD_EXP 40
14275: PUSH
14276: LD_VAR 0 2
14280: ARRAY
14281: IFFALSE 14651
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14283: LD_ADDR_VAR 0 7
14287: PUSH
14288: LD_INT 22
14290: PUSH
14291: LD_VAR 0 2
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 21
14302: PUSH
14303: LD_INT 1
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 69
14318: PUSH
14319: LD_INT 0
14321: PLUS
14322: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14323: LD_ADDR_VAR 0 9
14327: PUSH
14328: LD_INT 22
14330: PUSH
14331: LD_VAR 0 2
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 2
14342: PUSH
14343: LD_INT 30
14345: PUSH
14346: LD_INT 0
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 30
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PPUSH
14372: CALL_OW 69
14376: ST_TO_ADDR
// crates := 0 ;
14377: LD_ADDR_VAR 0 4
14381: PUSH
14382: LD_INT 0
14384: ST_TO_ADDR
// oil := 0 ;
14385: LD_ADDR_VAR 0 5
14389: PUSH
14390: LD_INT 0
14392: ST_TO_ADDR
// sib := 0 ;
14393: LD_ADDR_VAR 0 6
14397: PUSH
14398: LD_INT 0
14400: ST_TO_ADDR
// if bases then
14401: LD_VAR 0 9
14405: IFFALSE 14511
// begin for j in bases do
14407: LD_ADDR_VAR 0 3
14411: PUSH
14412: LD_VAR 0 9
14416: PUSH
14417: FOR_IN
14418: IFFALSE 14509
// begin base := GetBase ( j ) ;
14420: LD_ADDR_VAR 0 8
14424: PUSH
14425: LD_VAR 0 3
14429: PPUSH
14430: CALL_OW 274
14434: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14435: LD_ADDR_VAR 0 4
14439: PUSH
14440: LD_VAR 0 4
14444: PUSH
14445: LD_VAR 0 8
14449: PPUSH
14450: LD_INT 1
14452: PPUSH
14453: CALL_OW 275
14457: PLUS
14458: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14459: LD_ADDR_VAR 0 5
14463: PUSH
14464: LD_VAR 0 5
14468: PUSH
14469: LD_VAR 0 8
14473: PPUSH
14474: LD_INT 2
14476: PPUSH
14477: CALL_OW 275
14481: PLUS
14482: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14483: LD_ADDR_VAR 0 6
14487: PUSH
14488: LD_VAR 0 6
14492: PUSH
14493: LD_VAR 0 8
14497: PPUSH
14498: LD_INT 3
14500: PPUSH
14501: CALL_OW 275
14505: PLUS
14506: ST_TO_ADDR
// end ;
14507: GO 14417
14509: POP
14510: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14511: LD_STRING setSpecText(
14513: PUSH
14514: LD_VAR 0 2
14518: STR
14519: PUSH
14520: LD_STRING ,
14522: STR
14523: PUSH
14524: LD_INT 2
14526: STR
14527: PUSH
14528: LD_STRING ,
14530: STR
14531: PUSH
14532: LD_VAR 0 4
14536: STR
14537: PUSH
14538: LD_STRING )
14540: STR
14541: PPUSH
14542: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14546: LD_STRING setSpecText(
14548: PUSH
14549: LD_VAR 0 2
14553: STR
14554: PUSH
14555: LD_STRING ,
14557: STR
14558: PUSH
14559: LD_INT 3
14561: STR
14562: PUSH
14563: LD_STRING ,
14565: STR
14566: PUSH
14567: LD_VAR 0 5
14571: STR
14572: PUSH
14573: LD_STRING )
14575: STR
14576: PPUSH
14577: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14581: LD_STRING setSpecText(
14583: PUSH
14584: LD_VAR 0 2
14588: STR
14589: PUSH
14590: LD_STRING ,
14592: STR
14593: PUSH
14594: LD_INT 4
14596: STR
14597: PUSH
14598: LD_STRING ,
14600: STR
14601: PUSH
14602: LD_VAR 0 6
14606: STR
14607: PUSH
14608: LD_STRING )
14610: STR
14611: PPUSH
14612: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14616: LD_STRING setSpecText(
14618: PUSH
14619: LD_VAR 0 2
14623: STR
14624: PUSH
14625: LD_STRING ,
14627: STR
14628: PUSH
14629: LD_INT 5
14631: STR
14632: PUSH
14633: LD_STRING ,
14635: STR
14636: PUSH
14637: LD_VAR 0 7
14641: STR
14642: PUSH
14643: LD_STRING )
14645: STR
14646: PPUSH
14647: CALL_OW 559
// end ; end ;
14651: GO 14268
14653: POP
14654: POP
// end ;
14655: LD_VAR 0 1
14659: RET
// every 0 0$1 do
14660: GO 14662
14662: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14663: LD_STRING setSpecLogoNumber(
14665: PUSH
14666: LD_INT 2
14668: STR
14669: PUSH
14670: LD_STRING ,
14672: STR
14673: PUSH
14674: LD_INT 1
14676: STR
14677: PUSH
14678: LD_STRING )
14680: STR
14681: PPUSH
14682: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14686: LD_STRING setSpecLogoNumber(
14688: PUSH
14689: LD_INT 3
14691: STR
14692: PUSH
14693: LD_STRING ,
14695: STR
14696: PUSH
14697: LD_INT 2
14699: STR
14700: PUSH
14701: LD_STRING )
14703: STR
14704: PPUSH
14705: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14709: LD_STRING setSpecLogoNumber(
14711: PUSH
14712: LD_INT 4
14714: STR
14715: PUSH
14716: LD_STRING ,
14718: STR
14719: PUSH
14720: LD_INT 3
14722: STR
14723: PUSH
14724: LD_STRING )
14726: STR
14727: PPUSH
14728: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14732: LD_STRING setSpecLogoNumber(
14734: PUSH
14735: LD_INT 5
14737: STR
14738: PUSH
14739: LD_STRING ,
14741: STR
14742: PUSH
14743: LD_INT 4
14745: STR
14746: PUSH
14747: LD_STRING )
14749: STR
14750: PPUSH
14751: CALL_OW 559
// end ;
14755: END
// every 20 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14756: LD_INT 2
14758: PUSH
14759: LD_INT 30
14761: PUSH
14762: LD_INT 0
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 30
14771: PUSH
14772: LD_INT 1
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: PPUSH
14784: CALL_OW 69
14788: IFFALSE 14798
14790: GO 14792
14792: DISABLE
// begin enable ;
14793: ENABLE
// UpdateSpectatorBar ;
14794: CALL 14244 0 0
// end ;
14798: END
