// export gametype , def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_oil_deposits , def_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_cost , def_cost_decreasing ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , cost , decr_cost_time , real_cost , oil_dep , sib_dep , amount_of_apemen , siberite_bomb_Delay ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game ; export depot_def , breastworks_def , start_def , deposits_def , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var sides , s1 , s2 , s3 , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
// if MultiPlayer then
   8: LD_OWVAR 4
  12: IFFALSE 86
// begin gametype = mp_game_type ;
  14: LD_ADDR_EXP 1
  18: PUSH
  19: LD_OWVAR 6
  23: ST_TO_ADDR
// Player_Side = mp_player_side ;
  24: LD_ADDR_EXP 36
  28: PUSH
  29: LD_OWVAR 7
  33: ST_TO_ADDR
// Player_Team = mp_player_team ;
  34: LD_ADDR_EXP 37
  38: PUSH
  39: LD_OWVAR 8
  43: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  44: LD_ADDR_EXP 40
  48: PUSH
  49: LD_OWVAR 17
  53: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  54: LD_ADDR_EXP 38
  58: PUSH
  59: LD_OWVAR 15
  63: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  64: LD_ADDR_EXP 41
  68: PUSH
  69: LD_OWVAR 16
  73: ST_TO_ADDR
// Teams = mp_teams ;
  74: LD_ADDR_EXP 39
  78: PUSH
  79: LD_OWVAR 12
  83: ST_TO_ADDR
// end else
  84: GO 256
// begin gametype = 11 ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 11
  93: ST_TO_ADDR
// Player_Side = 4 ;
  94: LD_ADDR_EXP 36
  98: PUSH
  99: LD_INT 4
 101: ST_TO_ADDR
// Player_Team = 2 ;
 102: LD_ADDR_EXP 37
 106: PUSH
 107: LD_INT 2
 109: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 110: LD_ADDR_EXP 40
 114: PUSH
 115: LD_INT 0
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 1
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 4
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 149: LD_ADDR_EXP 38
 153: PUSH
 154: LD_INT 0
 156: PUSH
 157: LD_INT 1
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 188: LD_ADDR_EXP 41
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 3
 198: PUSH
 199: LD_INT 0
 201: PUSH
 202: LD_INT 1
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: LD_INT 3
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Teams = [ [ 2 , 7 ] , [ 6 , 4 ] ] ;
 227: LD_ADDR_EXP 39
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: LD_INT 7
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 6
 244: PUSH
 245: LD_INT 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 256: LD_ADDR_EXP 34
 260: PUSH
 261: LD_EXP 40
 265: PUSH
 266: LD_INT 0
 268: PUSH
 269: EMPTY
 270: LIST
 271: DIFF
 272: PUSH
 273: LD_INT 0
 275: PLUS
 276: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 277: LD_ADDR_EXP 35
 281: PUSH
 282: LD_EXP 38
 286: PUSH
 287: LD_INT 0
 289: PUSH
 290: EMPTY
 291: LIST
 292: DIFF
 293: PUSH
 294: LD_INT 0
 296: PLUS
 297: ST_TO_ADDR
// if MultiPlayer then
 298: LD_OWVAR 4
 302: IFFALSE 534
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 304: LD_ADDR_EXP 2
 308: PUSH
 309: LD_INT 0
 311: PPUSH
 312: CALL_OW 426
 316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 317: LD_ADDR_EXP 3
 321: PUSH
 322: LD_INT 1
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 330: LD_ADDR_EXP 4
 334: PUSH
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 343: LD_ADDR_EXP 5
 347: PUSH
 348: LD_INT 3
 350: PPUSH
 351: CALL_OW 426
 355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 356: LD_ADDR_EXP 6
 360: PUSH
 361: LD_INT 4
 363: PPUSH
 364: CALL_OW 426
 368: ST_TO_ADDR
// def_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 369: LD_ADDR_EXP 7
 373: PUSH
 374: LD_INT 5
 376: PPUSH
 377: CALL_OW 426
 381: ST_TO_ADDR
// def_sib_deposits = GetMultiplayerSetting ( 6 ) ;
 382: LD_ADDR_EXP 8
 386: PUSH
 387: LD_INT 6
 389: PPUSH
 390: CALL_OW 426
 394: ST_TO_ADDR
// if gametype = 11 then
 395: LD_EXP 1
 399: PUSH
 400: LD_INT 11
 402: EQUAL
 403: IFFALSE 415
// def_shared_vision = 0 else
 405: LD_ADDR_EXP 9
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
 413: GO 428
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 415: LD_ADDR_EXP 9
 419: PUSH
 420: LD_INT 10
 422: PPUSH
 423: CALL_OW 426
 427: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 428: LD_ADDR_EXP 10
 432: PUSH
 433: LD_INT 11
 435: PPUSH
 436: CALL_OW 426
 440: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 441: LD_ADDR_EXP 11
 445: PUSH
 446: LD_INT 12
 448: PPUSH
 449: CALL_OW 426
 453: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 454: LD_ADDR_EXP 12
 458: PUSH
 459: LD_INT 13
 461: PPUSH
 462: CALL_OW 426
 466: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 467: LD_ADDR_EXP 13
 471: PUSH
 472: LD_INT 14
 474: PPUSH
 475: CALL_OW 426
 479: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 480: LD_ADDR_EXP 14
 484: PUSH
 485: LD_INT 15
 487: PPUSH
 488: CALL_OW 426
 492: ST_TO_ADDR
// def_cost = GetMultiplayerSetting ( 16 ) ;
 493: LD_ADDR_EXP 15
 497: PUSH
 498: LD_INT 16
 500: PPUSH
 501: CALL_OW 426
 505: ST_TO_ADDR
// def_cost_decreasing = GetMultiplayerSetting ( 17 ) ;
 506: LD_ADDR_EXP 16
 510: PUSH
 511: LD_INT 17
 513: PPUSH
 514: CALL_OW 426
 518: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 519: LD_ADDR_VAR 0 6
 523: PUSH
 524: LD_INT 22
 526: PPUSH
 527: CALL_OW 426
 531: ST_TO_ADDR
// end else
 532: GO 666
// begin randomize ;
 534: CALL_OW 10
// def_base_level = 0 ;
 538: LD_ADDR_EXP 2
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// def_amount_of_people = 4 ;
 546: LD_ADDR_EXP 3
 550: PUSH
 551: LD_INT 4
 553: ST_TO_ADDR
// def_initial_level = 3 ;
 554: LD_ADDR_EXP 4
 558: PUSH
 559: LD_INT 3
 561: ST_TO_ADDR
// def_starting_resources = 3 ;
 562: LD_ADDR_EXP 5
 566: PUSH
 567: LD_INT 3
 569: ST_TO_ADDR
// def_shipments_density = 2 ;
 570: LD_ADDR_EXP 6
 574: PUSH
 575: LD_INT 2
 577: ST_TO_ADDR
// def_oil_deposits = 2 ;
 578: LD_ADDR_EXP 7
 582: PUSH
 583: LD_INT 2
 585: ST_TO_ADDR
// def_sib_deposits = 2 ;
 586: LD_ADDR_EXP 8
 590: PUSH
 591: LD_INT 2
 593: ST_TO_ADDR
// def_shared_vision = 1 ;
 594: LD_ADDR_EXP 9
 598: PUSH
 599: LD_INT 1
 601: ST_TO_ADDR
// def_morale_flags = 4 ;
 602: LD_ADDR_EXP 10
 606: PUSH
 607: LD_INT 4
 609: ST_TO_ADDR
// def_siberite_detection = 1 ;
 610: LD_ADDR_EXP 11
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 618: LD_ADDR_EXP 12
 622: PUSH
 623: LD_INT 3
 625: ST_TO_ADDR
// def_people_respawning = 0 ;
 626: LD_ADDR_EXP 13
 630: PUSH
 631: LD_INT 0
 633: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 634: LD_ADDR_EXP 14
 638: PUSH
 639: LD_INT 0
 641: ST_TO_ADDR
// def_cost = 4 ;
 642: LD_ADDR_EXP 15
 646: PUSH
 647: LD_INT 4
 649: ST_TO_ADDR
// def_cost_decreasing = 0 ;
 650: LD_ADDR_EXP 16
 654: PUSH
 655: LD_INT 0
 657: ST_TO_ADDR
// tech_level = 4 ;
 658: LD_ADDR_VAR 0 6
 662: PUSH
 663: LD_INT 4
 665: ST_TO_ADDR
// end ; if isSGUI then
 666: LD_OWVAR 83
 670: IFFALSE 678
// setMpTechs ( ) else
 672: CALL 9510 0 0
 676: GO 691
// begin SetMpTechLevel ( tech_level + 1 ) ;
 678: LD_VAR 0 6
 682: PUSH
 683: LD_INT 1
 685: PLUS
 686: PPUSH
 687: CALL 9657 0 1
// end ; if gametype = 11 then
 691: LD_EXP 1
 695: PUSH
 696: LD_INT 11
 698: EQUAL
 699: IFFALSE 1041
// begin sides = [ ] ;
 701: LD_ADDR_VAR 0 2
 705: PUSH
 706: EMPTY
 707: ST_TO_ADDR
// for s1 = 1 to Side_Positions do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: DOUBLE
 714: LD_INT 1
 716: DEC
 717: ST_TO_ADDR
 718: LD_EXP 40
 722: PUSH
 723: FOR_TO
 724: IFFALSE 756
// if Side_Positions [ s1 ] then
 726: LD_EXP 40
 730: PUSH
 731: LD_VAR 0 3
 735: ARRAY
 736: IFFALSE 754
// sides = sides ^ s1 ;
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: LD_VAR 0 2
 747: PUSH
 748: LD_VAR 0 3
 752: ADD
 753: ST_TO_ADDR
 754: GO 723
 756: POP
 757: POP
// if sides < 4 then
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 4
 765: LESS
 766: IFFALSE 781
// begin YouLostInMultiplayer ;
 768: CALL_OW 107
// wait ( 0 0$1 ) ;
 772: LD_INT 35
 774: PPUSH
 775: CALL_OW 67
// exit ;
 779: GO 1649
// end ; s1 = sides [ Rand ( 1 , 4 ) ] ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_INT 1
 793: PPUSH
 794: LD_INT 4
 796: PPUSH
 797: CALL_OW 12
 801: ARRAY
 802: ST_TO_ADDR
// sides = sides diff s1 ;
 803: LD_ADDR_VAR 0 2
 807: PUSH
 808: LD_VAR 0 2
 812: PUSH
 813: LD_VAR 0 3
 817: DIFF
 818: ST_TO_ADDR
// s2 = sides [ Rand ( 1 , 3 ) ] ;
 819: LD_ADDR_VAR 0 4
 823: PUSH
 824: LD_VAR 0 2
 828: PUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 12
 839: ARRAY
 840: ST_TO_ADDR
// sides = sides diff s2 ;
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_VAR 0 4
 855: DIFF
 856: ST_TO_ADDR
// s3 = sides [ Rand ( 1 , 2 ) ] ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 2
 866: PUSH
 867: LD_INT 1
 869: PPUSH
 870: LD_INT 2
 872: PPUSH
 873: CALL_OW 12
 877: ARRAY
 878: ST_TO_ADDR
// sides = sides diff s3 ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_VAR 0 2
 888: PUSH
 889: LD_VAR 0 5
 893: DIFF
 894: ST_TO_ADDR
// Teams = [ [ s1 , s2 ] , [ s3 , sides [ 1 ] ] ] ;
 895: LD_ADDR_EXP 39
 899: PUSH
 900: LD_VAR 0 3
 904: PUSH
 905: LD_VAR 0 4
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_VAR 0 5
 918: PUSH
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 936: LD_ADDR_EXP 38
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 0
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: ST_TO_ADDR
// Side_Teams = Replace ( Replace ( Replace ( Replace ( Side_Teams , s1 , 1 ) , s2 , 1 ) , s3 , 2 ) , sides [ 1 ] , 2 ) ;
 975: LD_ADDR_EXP 38
 979: PUSH
 980: LD_EXP 38
 984: PPUSH
 985: LD_VAR 0 3
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 1
 997: PPUSH
 998: LD_VAR 0 4
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 1
1010: PPUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_INT 2
1018: PPUSH
1019: CALL_OW 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PUSH
1029: LD_INT 1
1031: ARRAY
1032: PPUSH
1033: LD_INT 2
1035: PPUSH
1036: CALL_OW 1
1040: ST_TO_ADDR
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1041: LD_ADDR_EXP 17
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: LD_INT 1
1054: PUSH
1055: LD_INT 1
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: LD_EXP 2
1068: PUSH
1069: LD_INT 1
1071: PLUS
1072: ARRAY
1073: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1074: LD_ADDR_EXP 18
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 4
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 2
1101: PUSH
1102: LD_INT 1
1104: PLUS
1105: ARRAY
1106: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1107: LD_ADDR_EXP 20
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: LD_INT 4
1120: PUSH
1121: LD_INT 5
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: LD_EXP 4
1134: PUSH
1135: LD_INT 1
1137: PLUS
1138: ARRAY
1139: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1140: LD_ADDR_EXP 22
1144: PUSH
1145: LD_INT 0
1147: PUSH
1148: LD_INT 0
1150: PUSH
1151: LD_INT 0
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_INT 30
1161: PUSH
1162: LD_INT 0
1164: PUSH
1165: LD_INT 0
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: PUSH
1173: LD_INT 50
1175: PUSH
1176: LD_INT 20
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 80
1189: PUSH
1190: LD_INT 40
1192: PUSH
1193: LD_INT 20
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_EXP 5
1211: PUSH
1212: LD_INT 1
1214: PLUS
1215: ARRAY
1216: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1217: LD_ADDR_EXP 21
1221: PUSH
1222: LD_INT 10
1224: PUSH
1225: EMPTY
1226: LIST
1227: PUSH
1228: LD_INT 7
1230: PUSH
1231: LD_INT 14
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 6
1240: PUSH
1241: LD_INT 12
1243: PUSH
1244: LD_INT 18
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 5
1254: PUSH
1255: LD_INT 10
1257: PUSH
1258: LD_INT 15
1260: PUSH
1261: LD_INT 20
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_EXP 5
1280: PUSH
1281: LD_INT 1
1283: PLUS
1284: ARRAY
1285: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1286: LD_ADDR_EXP 19
1290: PUSH
1291: LD_EXP 3
1295: PUSH
1296: LD_INT 4
1298: PLUS
1299: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 28 ;
1300: LD_ADDR_EXP 23
1304: PUSH
1305: LD_INT 20
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 28
1315: MUL
1316: PLUS
1317: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1318: LD_ADDR_EXP 32
1322: PUSH
1323: LD_INT 0
1325: PUSH
1326: LD_INT 3
1328: PUSH
1329: LD_INT 6
1331: PUSH
1332: LD_INT 9
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 12
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1351: LD_ADDR_EXP 25
1355: PUSH
1356: LD_INT 0
1358: PUSH
1359: LD_INT 8400
1361: PUSH
1362: LD_INT 1750
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 13
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1380: LD_ADDR_EXP 26
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 21000
1390: PUSH
1391: LD_INT 4200
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_EXP 13
1403: PUSH
1404: LD_INT 1
1406: PLUS
1407: ARRAY
1408: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1409: LD_ADDR_EXP 24
1413: PUSH
1414: LD_INT 1
1416: NEG
1417: PUSH
1418: LD_INT 350
1420: PUSH
1421: LD_INT 700
1423: PUSH
1424: LD_INT 1400
1426: PUSH
1427: LD_INT 0
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_EXP 10
1441: PUSH
1442: LD_INT 1
1444: PLUS
1445: ARRAY
1446: ST_TO_ADDR
// battle_flags_id = [ ] ;
1447: LD_ADDR_EXP 49
1451: PUSH
1452: EMPTY
1453: ST_TO_ADDR
// cost = [ 200 , 300 , 400 , 600 , 800 ] [ def_cost + 1 ] ;
1454: LD_ADDR_EXP 27
1458: PUSH
1459: LD_INT 200
1461: PUSH
1462: LD_INT 300
1464: PUSH
1465: LD_INT 400
1467: PUSH
1468: LD_INT 600
1470: PUSH
1471: LD_INT 800
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PUSH
1481: LD_EXP 15
1485: PUSH
1486: LD_INT 1
1488: PLUS
1489: ARRAY
1490: ST_TO_ADDR
// decr_cost_time = [ 0 , 20 20$0 , 10 10$0 , 5 5$0 ] [ def_cost_decreasing + 1 ] ;
1491: LD_ADDR_EXP 28
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: LD_INT 42000
1501: PUSH
1502: LD_INT 21000
1504: PUSH
1505: LD_INT 10500
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: LD_EXP 16
1518: PUSH
1519: LD_INT 1
1521: PLUS
1522: ARRAY
1523: ST_TO_ADDR
// oil_dep = [ [ 1 ] , [ 4 ] , [ 1 , 4 ] ] [ def_oil_deposits + 1 ] ;
1524: LD_ADDR_EXP 30
1528: PUSH
1529: LD_INT 1
1531: PUSH
1532: EMPTY
1533: LIST
1534: PUSH
1535: LD_INT 4
1537: PUSH
1538: EMPTY
1539: LIST
1540: PUSH
1541: LD_INT 1
1543: PUSH
1544: LD_INT 4
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_EXP 7
1560: PUSH
1561: LD_INT 1
1563: PLUS
1564: ARRAY
1565: ST_TO_ADDR
// sib_dep = [ [ 2 ] , [ 3 ] , [ 2 , 3 ] ] [ def_sib_deposits + 1 ] ;
1566: LD_ADDR_EXP 31
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: EMPTY
1575: LIST
1576: PUSH
1577: LD_INT 3
1579: PUSH
1580: EMPTY
1581: LIST
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_EXP 8
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ARRAY
1607: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1608: LD_ADDR_EXP 33
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 63000
1621: PUSH
1622: LD_INT 126000
1624: PUSH
1625: LD_INT 189000
1627: PUSH
1628: LD_INT 252000
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_EXP 14
1643: PUSH
1644: LD_INT 1
1646: PLUS
1647: ARRAY
1648: ST_TO_ADDR
// end ;
1649: LD_VAR 0 1
1653: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i , coord ; begin
1654: LD_INT 0
1656: PPUSH
1657: PPUSH
1658: PPUSH
1659: PPUSH
1660: PPUSH
1661: PPUSH
1662: PPUSH
1663: PPUSH
1664: PPUSH
1665: PPUSH
// depot_def = [ ] ;
1666: LD_ADDR_EXP 45
1670: PUSH
1671: EMPTY
1672: ST_TO_ADDR
// breastworks_def = [ ] ;
1673: LD_ADDR_EXP 46
1677: PUSH
1678: EMPTY
1679: ST_TO_ADDR
// for side := 1 to 4 do
1680: LD_ADDR_VAR 0 2
1684: PUSH
1685: DOUBLE
1686: LD_INT 1
1688: DEC
1689: ST_TO_ADDR
1690: LD_INT 4
1692: PUSH
1693: FOR_TO
1694: IFFALSE 2120
// begin dep := side * 5 - 4 ;
1696: LD_ADDR_VAR 0 3
1700: PUSH
1701: LD_VAR 0 2
1705: PUSH
1706: LD_INT 5
1708: MUL
1709: PUSH
1710: LD_INT 4
1712: MINUS
1713: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1714: LD_ADDR_VAR 0 4
1718: PUSH
1719: LD_VAR 0 2
1723: PUSH
1724: LD_INT 5
1726: MUL
1727: PUSH
1728: LD_INT 3
1730: MINUS
1731: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1732: LD_ADDR_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: PUSH
1742: LD_INT 5
1744: MUL
1745: PUSH
1746: LD_INT 2
1748: MINUS
1749: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1750: LD_ADDR_VAR 0 6
1754: PUSH
1755: LD_VAR 0 2
1759: PUSH
1760: LD_INT 5
1762: MUL
1763: PUSH
1764: LD_INT 1
1766: MINUS
1767: ST_TO_ADDR
// br4 := side * 5 ;
1768: LD_ADDR_VAR 0 7
1772: PUSH
1773: LD_VAR 0 2
1777: PUSH
1778: LD_INT 5
1780: MUL
1781: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1782: LD_ADDR_EXP 45
1786: PUSH
1787: LD_EXP 45
1791: PUSH
1792: LD_VAR 0 3
1796: PPUSH
1797: CALL_OW 250
1801: PUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 251
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: CALL_OW 254
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: ADD
1830: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1831: LD_ADDR_EXP 47
1835: PUSH
1836: LD_EXP 47
1840: PUSH
1841: LD_VAR 0 3
1845: PPUSH
1846: CALL_OW 250
1850: PPUSH
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 254
1860: PUSH
1861: LD_INT 6
1863: MOD
1864: PPUSH
1865: LD_INT 6
1867: PPUSH
1868: CALL_OW 272
1872: PUSH
1873: LD_VAR 0 3
1877: PPUSH
1878: CALL_OW 251
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: CALL_OW 254
1892: PUSH
1893: LD_INT 6
1895: MOD
1896: PPUSH
1897: LD_INT 6
1899: PPUSH
1900: CALL_OW 273
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: ADD
1912: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1913: LD_ADDR_EXP 46
1917: PUSH
1918: LD_EXP 46
1922: PUSH
1923: LD_VAR 0 4
1927: PPUSH
1928: CALL_OW 250
1932: PUSH
1933: LD_VAR 0 4
1937: PPUSH
1938: CALL_OW 251
1942: PUSH
1943: LD_VAR 0 4
1947: PPUSH
1948: CALL_OW 254
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: LD_VAR 0 5
1962: PPUSH
1963: CALL_OW 250
1967: PUSH
1968: LD_VAR 0 5
1972: PPUSH
1973: CALL_OW 251
1977: PUSH
1978: LD_VAR 0 5
1982: PPUSH
1983: CALL_OW 254
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 6
1997: PPUSH
1998: CALL_OW 250
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: CALL_OW 251
2012: PUSH
2013: LD_VAR 0 6
2017: PPUSH
2018: CALL_OW 254
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: LD_VAR 0 7
2032: PPUSH
2033: CALL_OW 250
2037: PUSH
2038: LD_VAR 0 7
2042: PPUSH
2043: CALL_OW 251
2047: PUSH
2048: LD_VAR 0 7
2052: PPUSH
2053: CALL_OW 254
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: EMPTY
2070: LIST
2071: ADD
2072: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: CALL_OW 65
// DestroyUnit ( br1 ) ;
2082: LD_VAR 0 4
2086: PPUSH
2087: CALL_OW 65
// DestroyUnit ( br2 ) ;
2091: LD_VAR 0 5
2095: PPUSH
2096: CALL_OW 65
// DestroyUnit ( br3 ) ;
2100: LD_VAR 0 6
2104: PPUSH
2105: CALL_OW 65
// DestroyUnit ( br4 ) ;
2109: LD_VAR 0 7
2113: PPUSH
2114: CALL_OW 65
// end ;
2118: GO 1693
2120: POP
2121: POP
// deposits_def = [ [ [ 30 , 22 ] , [ 60 , 42 ] , [ 29 , 2 ] , [ 73 , 57 ] ] , [ [ 148 , 24 ] , [ 119 , 20 ] , [ 172 , 36 ] , [ 133 , 50 ] ] , [ [ 84 , 122 ] , [ 101 , 111 ] , [ 74 , 126 ] , [ 109 , 102 ] ] , [ [ 196 , 117 ] , [ 166 , 94 ] , [ 197 , 133 ] , [ 156 , 83 ] ] ] ;
2122: LD_ADDR_EXP 48
2126: PUSH
2127: LD_INT 30
2129: PUSH
2130: LD_INT 22
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PUSH
2137: LD_INT 60
2139: PUSH
2140: LD_INT 42
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 29
2149: PUSH
2150: LD_INT 2
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PUSH
2157: LD_INT 73
2159: PUSH
2160: LD_INT 57
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 148
2175: PUSH
2176: LD_INT 24
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 119
2185: PUSH
2186: LD_INT 20
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 172
2195: PUSH
2196: LD_INT 36
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 133
2205: PUSH
2206: LD_INT 50
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 84
2221: PUSH
2222: LD_INT 122
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 101
2231: PUSH
2232: LD_INT 111
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 74
2241: PUSH
2242: LD_INT 126
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 109
2251: PUSH
2252: LD_INT 102
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 196
2267: PUSH
2268: LD_INT 117
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 166
2277: PUSH
2278: LD_INT 94
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 197
2287: PUSH
2288: LD_INT 133
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 156
2297: PUSH
2298: LD_INT 83
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: EMPTY
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: ST_TO_ADDR
// for i := 1 to 4 do
2317: LD_ADDR_VAR 0 9
2321: PUSH
2322: DOUBLE
2323: LD_INT 1
2325: DEC
2326: ST_TO_ADDR
2327: LD_INT 4
2329: PUSH
2330: FOR_TO
2331: IFFALSE 2401
// for coord in oil_dep do
2333: LD_ADDR_VAR 0 10
2337: PUSH
2338: LD_EXP 30
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2397
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_oil ) ;
2346: LD_EXP 48
2350: PUSH
2351: LD_VAR 0 9
2355: ARRAY
2356: PUSH
2357: LD_VAR 0 10
2361: ARRAY
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: LD_EXP 48
2371: PUSH
2372: LD_VAR 0 9
2376: ARRAY
2377: PUSH
2378: LD_VAR 0 10
2382: ARRAY
2383: PUSH
2384: LD_INT 2
2386: ARRAY
2387: PPUSH
2388: LD_INT 2
2390: PPUSH
2391: CALL_OW 62
// end ;
2395: GO 2343
2397: POP
2398: POP
2399: GO 2330
2401: POP
2402: POP
// for i := 1 to 4 do
2403: LD_ADDR_VAR 0 9
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 4
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2487
// for coord in sib_dep do
2419: LD_ADDR_VAR 0 10
2423: PUSH
2424: LD_EXP 31
2428: PUSH
2429: FOR_IN
2430: IFFALSE 2483
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_siberit ) ;
2432: LD_EXP 48
2436: PUSH
2437: LD_VAR 0 9
2441: ARRAY
2442: PUSH
2443: LD_VAR 0 10
2447: ARRAY
2448: PUSH
2449: LD_INT 1
2451: ARRAY
2452: PPUSH
2453: LD_EXP 48
2457: PUSH
2458: LD_VAR 0 9
2462: ARRAY
2463: PUSH
2464: LD_VAR 0 10
2468: ARRAY
2469: PUSH
2470: LD_INT 2
2472: ARRAY
2473: PPUSH
2474: LD_INT 3
2476: PPUSH
2477: CALL_OW 62
// end ;
2481: GO 2429
2483: POP
2484: POP
2485: GO 2416
2487: POP
2488: POP
// end ;
2489: LD_VAR 0 1
2493: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
// Team_Game := 0 ;
2499: LD_ADDR_EXP 44
2503: PUSH
2504: LD_INT 0
2506: ST_TO_ADDR
// for i = 1 to 8 do
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: DOUBLE
2513: LD_INT 1
2515: DEC
2516: ST_TO_ADDR
2517: LD_INT 8
2519: PUSH
2520: FOR_TO
2521: IFFALSE 2547
// Team_Game := Team_Game + Side_Teams [ i ] ;
2523: LD_ADDR_EXP 44
2527: PUSH
2528: LD_EXP 44
2532: PUSH
2533: LD_EXP 38
2537: PUSH
2538: LD_VAR 0 2
2542: ARRAY
2543: PLUS
2544: ST_TO_ADDR
2545: GO 2520
2547: POP
2548: POP
// if not Team_Game then
2549: LD_EXP 44
2553: NOT
2554: IFFALSE 2566
// Team_Game := false else
2556: LD_ADDR_EXP 44
2560: PUSH
2561: LD_INT 0
2563: ST_TO_ADDR
2564: GO 2574
// Team_Game := true ;
2566: LD_ADDR_EXP 44
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// if not Team_Game then
2574: LD_EXP 44
2578: NOT
2579: IFFALSE 2677
// begin for i = 1 to 8 do
2581: LD_ADDR_VAR 0 2
2585: PUSH
2586: DOUBLE
2587: LD_INT 1
2589: DEC
2590: ST_TO_ADDR
2591: LD_INT 8
2593: PUSH
2594: FOR_TO
2595: IFFALSE 2673
// for j = 1 to 8 do
2597: LD_ADDR_VAR 0 3
2601: PUSH
2602: DOUBLE
2603: LD_INT 1
2605: DEC
2606: ST_TO_ADDR
2607: LD_INT 8
2609: PUSH
2610: FOR_TO
2611: IFFALSE 2669
// if i <> j then
2613: LD_VAR 0 2
2617: PUSH
2618: LD_VAR 0 3
2622: NONEQUAL
2623: IFFALSE 2647
// SetAttitude ( i , j , att_neutral , true ) else
2625: LD_VAR 0 2
2629: PPUSH
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: CALL_OW 80
2645: GO 2667
// SetAttitude ( i , j , att_friend , true ) ;
2647: LD_VAR 0 2
2651: PPUSH
2652: LD_VAR 0 3
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: CALL_OW 80
2667: GO 2610
2669: POP
2670: POP
2671: GO 2594
2673: POP
2674: POP
// end else
2675: GO 2906
// begin if def_shared_vision and ( gametype <> 11 ) then
2677: LD_EXP 9
2681: PUSH
2682: LD_EXP 1
2686: PUSH
2687: LD_INT 11
2689: NONEQUAL
2690: AND
2691: IFFALSE 2756
// begin for i in Teams do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_EXP 39
2702: PUSH
2703: FOR_IN
2704: IFFALSE 2754
// for j = 2 to i do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 2
2714: DEC
2715: ST_TO_ADDR
2716: LD_VAR 0 2
2720: PUSH
2721: FOR_TO
2722: IFFALSE 2750
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2724: LD_VAR 0 2
2728: PUSH
2729: LD_VAR 0 3
2733: ARRAY
2734: PPUSH
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PPUSH
2744: CALL_OW 343
2748: GO 2721
2750: POP
2751: POP
2752: GO 2703
2754: POP
2755: POP
// end ; for i := 1 to 8 do
2756: LD_ADDR_VAR 0 2
2760: PUSH
2761: DOUBLE
2762: LD_INT 1
2764: DEC
2765: ST_TO_ADDR
2766: LD_INT 8
2768: PUSH
2769: FOR_TO
2770: IFFALSE 2904
// for j := 1 to 8 do
2772: LD_ADDR_VAR 0 3
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_INT 8
2784: PUSH
2785: FOR_TO
2786: IFFALSE 2900
// if i <> j then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 3
2797: NONEQUAL
2798: IFFALSE 2898
// if gametype = 11 then
2800: LD_EXP 1
2804: PUSH
2805: LD_INT 11
2807: EQUAL
2808: IFFALSE 2832
// SetAttitude ( i , j , att_neutral , true ) else
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: LD_INT 0
2822: PPUSH
2823: LD_INT 1
2825: PPUSH
2826: CALL_OW 80
2830: GO 2898
// if Side_Teams [ i ] = Side_Teams [ j ] then
2832: LD_EXP 38
2836: PUSH
2837: LD_VAR 0 2
2841: ARRAY
2842: PUSH
2843: LD_EXP 38
2847: PUSH
2848: LD_VAR 0 3
2852: ARRAY
2853: EQUAL
2854: IFFALSE 2878
// SetAttitude ( i , j , att_friend , true ) else
2856: LD_VAR 0 2
2860: PPUSH
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_INT 1
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: CALL_OW 80
2876: GO 2898
// SetAttitude ( i , j , att_enemy , true ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: CALL_OW 80
2898: GO 2785
2900: POP
2901: POP
2902: GO 2769
2904: POP
2905: POP
// end ; end ;
2906: LD_VAR 0 1
2910: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
2916: PPUSH
// result := [ ] ;
2917: LD_ADDR_VAR 0 6
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// for i := 1 to count do
2924: LD_ADDR_VAR 0 7
2928: PUSH
2929: DOUBLE
2930: LD_INT 1
2932: DEC
2933: ST_TO_ADDR
2934: LD_VAR 0 1
2938: PUSH
2939: FOR_TO
2940: IFFALSE 3334
// begin uc_direction := Rand ( 0 , 5 ) ;
2942: LD_ADDR_OWVAR 24
2946: PUSH
2947: LD_INT 0
2949: PPUSH
2950: LD_INT 5
2952: PPUSH
2953: CALL_OW 12
2957: ST_TO_ADDR
// if commander then
2958: LD_LOC 1
2962: IFFALSE 3071
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2964: LD_ADDR_OWVAR 26
2968: PUSH
2969: LD_OWVAR 19
2973: PUSH
2974: LD_OWVAR 20
2978: ARRAY
2979: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 2
2985: PPUSH
2986: CALL_OW 12
2990: PPUSH
2991: LD_VAR 0 2
2995: PPUSH
2996: LD_EXP 20
3000: PUSH
3001: LD_INT 2
3003: PLUS
3004: PPUSH
3005: CALL_OW 380
// hc_importance := 105 ;
3009: LD_ADDR_OWVAR 32
3013: PUSH
3014: LD_INT 105
3016: ST_TO_ADDR
// commander := false ;
3017: LD_ADDR_LOC 1
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// if Multiplayer then
3025: LD_OWVAR 4
3029: IFFALSE 3069
// begin hc_gallery := MULTIAVATARS ;
3031: LD_ADDR_OWVAR 33
3035: PUSH
3036: LD_STRING MULTIAVATARS
3038: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3039: LD_ADDR_OWVAR 34
3043: PUSH
3044: LD_OWVAR 20
3048: PPUSH
3049: CALL_OW 525
3053: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3054: LD_ADDR_OWVAR 27
3058: PUSH
3059: LD_OWVAR 20
3063: PPUSH
3064: CALL_OW 526
3068: ST_TO_ADDR
// end ; end else
3069: GO 3134
// begin hc_name :=  ;
3071: LD_ADDR_OWVAR 26
3075: PUSH
3076: LD_STRING 
3078: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
3079: LD_INT 1
3081: PPUSH
3082: LD_INT 2
3084: PPUSH
3085: CALL_OW 12
3089: PPUSH
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_EXP 20
3099: PPUSH
3100: CALL_OW 380
// hc_importance := 0 ;
3104: LD_ADDR_OWVAR 32
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// if Multiplayer then
3112: LD_OWVAR 4
3116: IFFALSE 3134
// begin hc_gallery :=  ;
3118: LD_ADDR_OWVAR 33
3122: PUSH
3123: LD_STRING 
3125: ST_TO_ADDR
// hc_face_number := 0 ;
3126: LD_ADDR_OWVAR 34
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3134: LD_ADDR_VAR 0 9
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// if global_defined then
3144: LD_LOC 3
3148: IFFALSE 3286
// begin j := i ;
3150: LD_ADDR_VAR 0 8
3154: PUSH
3155: LD_VAR 0 7
3159: ST_TO_ADDR
// if cl = class_soldier then
3160: LD_VAR 0 2
3164: PUSH
3165: LD_INT 1
3167: EQUAL
3168: IFFALSE 3186
// j := i + soldiers_created ;
3170: LD_ADDR_VAR 0 8
3174: PUSH
3175: LD_VAR 0 7
3179: PUSH
3180: LD_LOC 4
3184: PLUS
3185: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3186: LD_LOC 2
3190: PUSH
3191: LD_VAR 0 2
3195: ARRAY
3196: PUSH
3197: LD_VAR 0 8
3201: ARRAY
3202: PPUSH
3203: LD_VAR 0 9
3207: PPUSH
3208: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3212: LD_VAR 0 9
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_LOC 2
3224: PUSH
3225: LD_VAR 0 2
3229: ARRAY
3230: PUSH
3231: LD_VAR 0 8
3235: ARRAY
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: CALL_OW 260
3244: PPUSH
3245: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3249: LD_VAR 0 9
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: PUSH
3268: LD_VAR 0 8
3272: ARRAY
3273: PPUSH
3274: LD_INT 1
3276: PPUSH
3277: CALL_OW 260
3281: PPUSH
3282: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
3286: LD_VAR 0 9
3290: PPUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_VAR 0 4
3300: PPUSH
3301: LD_VAR 0 5
3305: PPUSH
3306: LD_INT 0
3308: PPUSH
3309: CALL_OW 50
// result := result ^ [ un ] ;
3313: LD_ADDR_VAR 0 6
3317: PUSH
3318: LD_VAR 0 6
3322: PUSH
3323: LD_VAR 0 9
3327: PUSH
3328: EMPTY
3329: LIST
3330: ADD
3331: ST_TO_ADDR
// end ;
3332: GO 2939
3334: POP
3335: POP
// if not global_defined then
3336: LD_LOC 3
3340: NOT
3341: IFFALSE 3403
// if cl = class_soldier and global_units then
3343: LD_VAR 0 2
3347: PUSH
3348: LD_INT 1
3350: EQUAL
3351: PUSH
3352: LD_LOC 2
3356: AND
3357: IFFALSE 3384
// global_units := [ global_units [ 1 ] ^ result ] else
3359: LD_ADDR_LOC 2
3363: PUSH
3364: LD_LOC 2
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PUSH
3373: LD_VAR 0 6
3377: ADD
3378: PUSH
3379: EMPTY
3380: LIST
3381: ST_TO_ADDR
3382: GO 3403
// global_units := global_units ^ [ result ] ;
3384: LD_ADDR_LOC 2
3388: PUSH
3389: LD_LOC 2
3393: PUSH
3394: LD_VAR 0 6
3398: PUSH
3399: EMPTY
3400: LIST
3401: ADD
3402: ST_TO_ADDR
// end ;
3403: LD_VAR 0 6
3407: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3408: LD_INT 0
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
3414: PPUSH
3415: PPUSH
3416: PPUSH
3417: PPUSH
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
3422: PPUSH
// pos := Side_Positions [ side ] ;
3423: LD_ADDR_VAR 0 3
3427: PUSH
3428: LD_EXP 40
3432: PUSH
3433: LD_VAR 0 1
3437: ARRAY
3438: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3439: LD_ADDR_OWVAR 21
3443: PUSH
3444: LD_EXP 41
3448: PUSH
3449: LD_VAR 0 1
3453: ARRAY
3454: ST_TO_ADDR
// uc_side := side ;
3455: LD_ADDR_OWVAR 20
3459: PUSH
3460: LD_VAR 0 1
3464: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3465: LD_ADDR_VAR 0 4
3469: PUSH
3470: LD_EXP 45
3474: PUSH
3475: LD_VAR 0 3
3479: ARRAY
3480: PUSH
3481: LD_INT 1
3483: ARRAY
3484: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3485: LD_ADDR_VAR 0 5
3489: PUSH
3490: LD_EXP 45
3494: PUSH
3495: LD_VAR 0 3
3499: ARRAY
3500: PUSH
3501: LD_INT 2
3503: ARRAY
3504: ST_TO_ADDR
// if is_depot then
3505: LD_EXP 17
3509: IFFALSE 3652
// begin bc_type = b_depot ;
3511: LD_ADDR_OWVAR 42
3515: PUSH
3516: LD_INT 0
3518: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3519: LD_ADDR_VAR 0 10
3523: PUSH
3524: LD_VAR 0 4
3528: PPUSH
3529: LD_VAR 0 5
3533: PPUSH
3534: LD_EXP 45
3538: PUSH
3539: LD_VAR 0 3
3543: ARRAY
3544: PUSH
3545: LD_INT 3
3547: ARRAY
3548: PPUSH
3549: CALL_OW 47
3553: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3554: LD_VAR 0 10
3558: PPUSH
3559: LD_STRING @
3561: PUSH
3562: LD_VAR 0 1
3566: STR
3567: PPUSH
3568: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3572: LD_VAR 0 10
3576: PPUSH
3577: CALL_OW 274
3581: PPUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_EXP 22
3589: PUSH
3590: LD_INT 1
3592: ARRAY
3593: PPUSH
3594: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3598: LD_VAR 0 10
3602: PPUSH
3603: CALL_OW 274
3607: PPUSH
3608: LD_INT 2
3610: PPUSH
3611: LD_EXP 22
3615: PUSH
3616: LD_INT 2
3618: ARRAY
3619: PPUSH
3620: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3624: LD_VAR 0 2
3628: PPUSH
3629: CALL_OW 274
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: LD_EXP 22
3641: PUSH
3642: LD_INT 3
3644: ARRAY
3645: PPUSH
3646: CALL_OW 277
// end else
3650: GO 3796
// begin for i := 1 to 3 do
3652: LD_ADDR_VAR 0 6
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 3
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3794
// begin r := starting_resources [ i ] ;
3668: LD_ADDR_VAR 0 7
3672: PUSH
3673: LD_EXP 22
3677: PUSH
3678: LD_VAR 0 6
3682: ARRAY
3683: ST_TO_ADDR
// while r >= 10 do
3684: LD_VAR 0 7
3688: PUSH
3689: LD_INT 10
3691: GREATEREQUAL
3692: IFFALSE 3792
// if r > 50 then
3694: LD_VAR 0 7
3698: PUSH
3699: LD_INT 50
3701: GREATER
3702: IFFALSE 3748
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3704: LD_VAR 0 6
3708: PPUSH
3709: LD_INT 5
3711: PPUSH
3712: LD_VAR 0 4
3716: PPUSH
3717: LD_VAR 0 5
3721: PPUSH
3722: LD_INT 4
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: CALL_OW 60
// r := r - 50 ;
3732: LD_ADDR_VAR 0 7
3736: PUSH
3737: LD_VAR 0 7
3741: PUSH
3742: LD_INT 50
3744: MINUS
3745: ST_TO_ADDR
// end else
3746: GO 3790
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3748: LD_VAR 0 6
3752: PPUSH
3753: LD_VAR 0 7
3757: PUSH
3758: LD_INT 10
3760: DIV
3761: PPUSH
3762: LD_VAR 0 4
3766: PPUSH
3767: LD_VAR 0 5
3771: PPUSH
3772: LD_INT 4
3774: PPUSH
3775: LD_INT 0
3777: PPUSH
3778: CALL_OW 60
// r := 0 ;
3782: LD_ADDR_VAR 0 7
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// end ;
3790: GO 3684
// end ;
3792: GO 3665
3794: POP
3795: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3796: LD_ADDR_VAR 0 4
3800: PUSH
3801: LD_EXP 47
3805: PUSH
3806: LD_VAR 0 3
3810: ARRAY
3811: PUSH
3812: LD_INT 1
3814: ARRAY
3815: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3816: LD_ADDR_VAR 0 5
3820: PUSH
3821: LD_EXP 47
3825: PUSH
3826: LD_VAR 0 3
3830: ARRAY
3831: PUSH
3832: LD_INT 2
3834: ARRAY
3835: ST_TO_ADDR
// for r in starting_crates do
3836: LD_ADDR_VAR 0 7
3840: PUSH
3841: LD_EXP 21
3845: PUSH
3846: FOR_IN
3847: IFFALSE 3879
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3849: LD_INT 1
3851: PPUSH
3852: LD_INT 5
3854: PPUSH
3855: LD_VAR 0 4
3859: PPUSH
3860: LD_VAR 0 5
3864: PPUSH
3865: LD_VAR 0 7
3869: PPUSH
3870: LD_INT 0
3872: PPUSH
3873: CALL_OW 60
3877: GO 3846
3879: POP
3880: POP
// if def_morale_flags then
3881: LD_EXP 10
3885: IFFALSE 3964
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3887: LD_ADDR_EXP 49
3891: PUSH
3892: LD_EXP 49
3896: PUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: LD_VAR 0 4
3906: PPUSH
3907: LD_VAR 0 5
3911: PPUSH
3912: LD_INT 1
3914: PUSH
3915: LD_INT 100
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 2
3924: PUSH
3925: LD_INT 50
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 20
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 20
3944: PUSH
3945: LD_INT 100
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 418
3962: ADD
3963: ST_TO_ADDR
// neng := number_of_people ;
3964: LD_ADDR_VAR 0 11
3968: PUSH
3969: LD_EXP 19
3973: ST_TO_ADDR
// nsol := number_of_breastworks ;
3974: LD_ADDR_VAR 0 14
3978: PUSH
3979: LD_EXP 18
3983: ST_TO_ADDR
// if nsol < neng div 4 then
3984: LD_VAR 0 14
3988: PUSH
3989: LD_VAR 0 11
3993: PUSH
3994: LD_INT 4
3996: DIV
3997: LESS
3998: IFFALSE 4014
// nsol := neng div 4 ;
4000: LD_ADDR_VAR 0 14
4004: PUSH
4005: LD_VAR 0 11
4009: PUSH
4010: LD_INT 4
4012: DIV
4013: ST_TO_ADDR
// neng := neng - nsol ;
4014: LD_ADDR_VAR 0 11
4018: PUSH
4019: LD_VAR 0 11
4023: PUSH
4024: LD_VAR 0 14
4028: MINUS
4029: ST_TO_ADDR
// nsci := neng div 3 ;
4030: LD_ADDR_VAR 0 12
4034: PUSH
4035: LD_VAR 0 11
4039: PUSH
4040: LD_INT 3
4042: DIV
4043: ST_TO_ADDR
// if nsci < 1 then
4044: LD_VAR 0 12
4048: PUSH
4049: LD_INT 1
4051: LESS
4052: IFFALSE 4062
// nsci := 1 ;
4054: LD_ADDR_VAR 0 12
4058: PUSH
4059: LD_INT 1
4061: ST_TO_ADDR
// neng := neng - nsci ;
4062: LD_ADDR_VAR 0 11
4066: PUSH
4067: LD_VAR 0 11
4071: PUSH
4072: LD_VAR 0 12
4076: MINUS
4077: ST_TO_ADDR
// nmech := neng div 2 ;
4078: LD_ADDR_VAR 0 13
4082: PUSH
4083: LD_VAR 0 11
4087: PUSH
4088: LD_INT 2
4090: DIV
4091: ST_TO_ADDR
// neng := neng - nmech ;
4092: LD_ADDR_VAR 0 11
4096: PUSH
4097: LD_VAR 0 11
4101: PUSH
4102: LD_VAR 0 13
4106: MINUS
4107: ST_TO_ADDR
// if neng < 1 then
4108: LD_VAR 0 11
4112: PUSH
4113: LD_INT 1
4115: LESS
4116: IFFALSE 4126
// neng := 1 ;
4118: LD_ADDR_VAR 0 11
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// commander := true ;
4126: LD_ADDR_LOC 1
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// soldiers_created := 0 ;
4134: LD_ADDR_LOC 4
4138: PUSH
4139: LD_INT 0
4141: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4142: LD_ADDR_VAR 0 6
4146: PUSH
4147: DOUBLE
4148: LD_INT 1
4150: DEC
4151: ST_TO_ADDR
4152: LD_EXP 18
4156: PUSH
4157: FOR_TO
4158: IFFALSE 4402
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4160: LD_ADDR_VAR 0 4
4164: PUSH
4165: LD_EXP 46
4169: PUSH
4170: LD_VAR 0 3
4174: ARRAY
4175: PUSH
4176: LD_VAR 0 6
4180: ARRAY
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4186: LD_ADDR_VAR 0 5
4190: PUSH
4191: LD_EXP 46
4195: PUSH
4196: LD_VAR 0 3
4200: ARRAY
4201: PUSH
4202: LD_VAR 0 6
4206: ARRAY
4207: PUSH
4208: LD_INT 2
4210: ARRAY
4211: ST_TO_ADDR
// bc_type := b_breastwork ;
4212: LD_ADDR_OWVAR 42
4216: PUSH
4217: LD_INT 31
4219: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4220: LD_ADDR_VAR 0 9
4224: PUSH
4225: LD_VAR 0 4
4229: PPUSH
4230: LD_VAR 0 5
4234: PPUSH
4235: LD_EXP 46
4239: PUSH
4240: LD_VAR 0 3
4244: ARRAY
4245: PUSH
4246: LD_VAR 0 6
4250: ARRAY
4251: PUSH
4252: LD_INT 3
4254: ARRAY
4255: PPUSH
4256: CALL_OW 47
4260: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4261: LD_ADDR_VAR 0 4
4265: PUSH
4266: LD_VAR 0 4
4270: PPUSH
4271: LD_EXP 46
4275: PUSH
4276: LD_VAR 0 3
4280: ARRAY
4281: PUSH
4282: LD_VAR 0 6
4286: ARRAY
4287: PUSH
4288: LD_INT 3
4290: ARRAY
4291: PPUSH
4292: LD_INT 2
4294: PPUSH
4295: CALL_OW 272
4299: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4300: LD_ADDR_VAR 0 5
4304: PUSH
4305: LD_VAR 0 5
4309: PPUSH
4310: LD_EXP 46
4314: PUSH
4315: LD_VAR 0 3
4319: ARRAY
4320: PUSH
4321: LD_VAR 0 6
4325: ARRAY
4326: PUSH
4327: LD_INT 3
4329: ARRAY
4330: PPUSH
4331: LD_INT 2
4333: PPUSH
4334: CALL_OW 273
4338: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
4339: LD_ADDR_VAR 0 8
4343: PUSH
4344: LD_INT 1
4346: PPUSH
4347: LD_INT 1
4349: PPUSH
4350: LD_VAR 0 4
4354: PPUSH
4355: LD_VAR 0 5
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: CALL 2911 0 5
4367: PUSH
4368: LD_INT 1
4370: ARRAY
4371: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4372: LD_ADDR_LOC 4
4376: PUSH
4377: LD_LOC 4
4381: PUSH
4382: LD_INT 1
4384: PLUS
4385: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4386: LD_VAR 0 8
4390: PPUSH
4391: LD_VAR 0 9
4395: PPUSH
4396: CALL_OW 120
// end ;
4400: GO 4157
4402: POP
4403: POP
// x := start_def [ pos ] [ 1 ] ;
4404: LD_ADDR_VAR 0 4
4408: PUSH
4409: LD_EXP 47
4413: PUSH
4414: LD_VAR 0 3
4418: ARRAY
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4424: LD_ADDR_VAR 0 5
4428: PUSH
4429: LD_EXP 47
4433: PUSH
4434: LD_VAR 0 3
4438: ARRAY
4439: PUSH
4440: LD_INT 2
4442: ARRAY
4443: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4444: LD_VAR 0 14
4448: PUSH
4449: LD_EXP 18
4453: MINUS
4454: PPUSH
4455: LD_INT 1
4457: PPUSH
4458: LD_VAR 0 4
4462: PPUSH
4463: LD_VAR 0 5
4467: PPUSH
4468: LD_INT 5
4470: PPUSH
4471: CALL 2911 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4475: LD_VAR 0 11
4479: PPUSH
4480: LD_INT 2
4482: PPUSH
4483: LD_VAR 0 4
4487: PPUSH
4488: LD_VAR 0 5
4492: PPUSH
4493: LD_INT 5
4495: PPUSH
4496: CALL 2911 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4500: LD_VAR 0 13
4504: PPUSH
4505: LD_INT 3
4507: PPUSH
4508: LD_VAR 0 4
4512: PPUSH
4513: LD_VAR 0 5
4517: PPUSH
4518: LD_INT 5
4520: PPUSH
4521: CALL 2911 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4525: LD_VAR 0 12
4529: PPUSH
4530: LD_INT 4
4532: PPUSH
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_VAR 0 5
4542: PPUSH
4543: LD_INT 5
4545: PPUSH
4546: CALL 2911 0 5
// if not global_defined then
4550: LD_LOC 3
4554: NOT
4555: IFFALSE 4565
// global_defined := true ;
4557: LD_ADDR_LOC 3
4561: PUSH
4562: LD_INT 1
4564: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4565: LD_EXP 11
4569: PUSH
4570: LD_INT 20
4572: PPUSH
4573: LD_VAR 0 1
4577: PPUSH
4578: CALL_OW 321
4582: PUSH
4583: LD_INT 1
4585: EQUAL
4586: AND
4587: IFFALSE 4604
// SetTech ( tech_SibDet , side , state_researched ) ;
4589: LD_INT 20
4591: PPUSH
4592: LD_VAR 0 1
4596: PPUSH
4597: LD_INT 2
4599: PPUSH
4600: CALL_OW 322
// if def_siberite_bomb = 1 then
4604: LD_EXP 14
4608: PUSH
4609: LD_INT 1
4611: EQUAL
4612: IFFALSE 4646
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4614: LD_INT 25
4616: PPUSH
4617: LD_VAR 0 1
4621: PPUSH
4622: LD_INT 1
4624: PPUSH
4625: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4629: LD_INT 73
4631: PPUSH
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: CALL_OW 322
// end else
4644: GO 4676
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4646: LD_INT 25
4648: PPUSH
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_INT 0
4656: PPUSH
4657: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4661: LD_INT 73
4663: PPUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4676: LD_INT 24
4678: PPUSH
4679: LD_VAR 0 1
4683: PPUSH
4684: LD_INT 0
4686: PPUSH
4687: CALL_OW 322
// end ;
4691: LD_VAR 0 2
4695: RET
// every 0 0$1 do
4696: GO 4698
4698: DISABLE
// if ( def_siberite_bomb > 1 ) then
4699: LD_EXP 14
4703: PUSH
4704: LD_INT 1
4706: GREATER
4707: IFFALSE 4722
// begin wait ( siberite_bomb_Delay ) ;
4709: LD_EXP 33
4713: PPUSH
4714: CALL_OW 67
// EnableSibFiss ;
4718: CALL 4723 0 0
// end ;
4722: END
// function EnableSibFiss ; var i ; begin
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
// for i := 1 to 8 do
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_INT 8
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4787
// if Side_Positions [ i ] then
4743: LD_EXP 40
4747: PUSH
4748: LD_VAR 0 2
4752: ARRAY
4753: IFFALSE 4785
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4755: LD_INT 25
4757: PPUSH
4758: LD_VAR 0 2
4762: PPUSH
4763: LD_INT 1
4765: PPUSH
4766: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4770: LD_INT 73
4772: PPUSH
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL_OW 322
// end ;
4785: GO 4740
4787: POP
4788: POP
// end ;
4789: LD_VAR 0 1
4793: RET
// function prepare_sides ; var i ; begin
4794: LD_INT 0
4796: PPUSH
4797: PPUSH
// global_units := [ ] ;
4798: LD_ADDR_LOC 2
4802: PUSH
4803: EMPTY
4804: ST_TO_ADDR
// global_defined := false ;
4805: LD_ADDR_LOC 3
4809: PUSH
4810: LD_INT 0
4812: ST_TO_ADDR
// for i := 1 to 8 do
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: DOUBLE
4819: LD_INT 1
4821: DEC
4822: ST_TO_ADDR
4823: LD_INT 8
4825: PUSH
4826: FOR_TO
4827: IFFALSE 4852
// if Side_Positions [ i ] then
4829: LD_EXP 40
4833: PUSH
4834: LD_VAR 0 2
4838: ARRAY
4839: IFFALSE 4850
// prepare_side ( i ) ;
4841: LD_VAR 0 2
4845: PPUSH
4846: CALL 3408 0 1
4850: GO 4826
4852: POP
4853: POP
// end ;
4854: LD_VAR 0 1
4858: RET
// starting begin disable ( 400 ) ;
4859: LD_INT 400
4861: DISABLE_MARKED
// disable ( 401 ) ;
4862: LD_INT 401
4864: DISABLE_MARKED
// mp_selectmsg := true ;
4865: LD_ADDR_OWVAR 13
4869: PUSH
4870: LD_INT 1
4872: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4873: CALL 0 0 0
// prepare_map_coordinates ;
4877: CALL 1654 0 0
// set_shared_visions_and_alliances ;
4881: CALL 2494 0 0
// prepare_sides ;
4885: CALL 4794 0 0
// Init_Win_Condition ;
4889: CALL 6650 0 0
// init_shipments_and_respawning ;
4893: CALL 4978 0 0
// init_infos ;
4897: CALL 7413 0 0
// your_side := Player_Side ;
4901: LD_ADDR_OWVAR 2
4905: PUSH
4906: LD_EXP 36
4910: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4911: LD_ADDR_OWVAR 71
4915: PUSH
4916: LD_EXP 41
4920: PUSH
4921: LD_OWVAR 2
4925: ARRAY
4926: ST_TO_ADDR
// ResetFog ;
4927: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4931: LD_EXP 47
4935: PUSH
4936: LD_EXP 40
4940: PUSH
4941: LD_OWVAR 2
4945: ARRAY
4946: ARRAY
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: LD_EXP 47
4956: PUSH
4957: LD_EXP 40
4961: PUSH
4962: LD_OWVAR 2
4966: ARRAY
4967: ARRAY
4968: PUSH
4969: LD_INT 2
4971: ARRAY
4972: PPUSH
4973: CALL_OW 86
// end ; end_of_file
4977: END
// var shipment1 , shipment2 , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4978: LD_INT 0
4980: PPUSH
// shipment1 := [ ] ;
4981: LD_ADDR_LOC 5
4985: PUSH
4986: EMPTY
4987: ST_TO_ADDR
// shipment2 := [ ] ;
4988: LD_ADDR_LOC 6
4992: PUSH
4993: EMPTY
4994: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4995: LD_ADDR_LOC 7
4999: PUSH
5000: LD_INT 1
5002: PPUSH
5003: LD_INT 8
5005: PPUSH
5006: CALL_OW 12
5010: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5011: LD_ADDR_LOC 8
5015: PUSH
5016: LD_INT 0
5018: PUSH
5019: LD_INT 0
5021: PUSH
5022: LD_INT 0
5024: PUSH
5025: LD_INT 0
5027: PUSH
5028: LD_INT 0
5030: PUSH
5031: LD_INT 0
5033: PUSH
5034: LD_INT 0
5036: PUSH
5037: LD_INT 0
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: ST_TO_ADDR
// end ;
5050: LD_VAR 0 1
5054: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5055: GO 5057
5057: DISABLE
5058: LD_INT 0
5060: PPUSH
5061: PPUSH
5062: PPUSH
5063: PPUSH
// begin if respawning_time_max = 0 then
5064: LD_EXP 26
5068: PUSH
5069: LD_INT 0
5071: EQUAL
5072: IFFALSE 5076
// exit ;
5074: GO 5583
// if respawn = 8 then
5076: LD_LOC 7
5080: PUSH
5081: LD_INT 8
5083: EQUAL
5084: IFFALSE 5096
// respawn := 1 else
5086: LD_ADDR_LOC 7
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
5094: GO 5110
// respawn := respawn + 1 ;
5096: LD_ADDR_LOC 7
5100: PUSH
5101: LD_LOC 7
5105: PUSH
5106: LD_INT 1
5108: PLUS
5109: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5110: LD_EXP 40
5114: PUSH
5115: LD_LOC 7
5119: ARRAY
5120: PUSH
5121: LD_LOC 8
5125: PUSH
5126: LD_LOC 7
5130: ARRAY
5131: NOT
5132: AND
5133: IFFALSE 5582
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5135: LD_ADDR_VAR 0 1
5139: PUSH
5140: LD_INT 21
5142: PUSH
5143: LD_INT 1
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 22
5152: PUSH
5153: LD_LOC 7
5157: PUSH
5158: EMPTY
5159: LIST
5160: LIST
5161: PUSH
5162: LD_INT 3
5164: PUSH
5165: LD_INT 23
5167: PUSH
5168: LD_INT 0
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: PPUSH
5181: CALL_OW 69
5185: ST_TO_ADDR
// if n < number_of_people then
5186: LD_VAR 0 1
5190: PUSH
5191: LD_EXP 19
5195: LESS
5196: IFFALSE 5579
// begin aktresp := respawn ;
5198: LD_ADDR_VAR 0 3
5202: PUSH
5203: LD_LOC 7
5207: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5208: LD_ADDR_LOC 8
5212: PUSH
5213: LD_LOC 8
5217: PPUSH
5218: LD_VAR 0 3
5222: PPUSH
5223: LD_INT 1
5225: PPUSH
5226: CALL_OW 1
5230: ST_TO_ADDR
// enable ;
5231: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5232: LD_EXP 25
5236: PPUSH
5237: LD_EXP 26
5241: PPUSH
5242: CALL_OW 12
5246: PPUSH
5247: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5251: LD_ADDR_LOC 8
5255: PUSH
5256: LD_LOC 8
5260: PPUSH
5261: LD_VAR 0 3
5265: PPUSH
5266: LD_INT 0
5268: PPUSH
5269: CALL_OW 1
5273: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5274: LD_ADDR_VAR 0 2
5278: PUSH
5279: LD_INT 21
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 2
5291: PUSH
5292: LD_INT 30
5294: PUSH
5295: LD_INT 0
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PUSH
5302: LD_INT 30
5304: PUSH
5305: LD_INT 1
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: LIST
5316: PUSH
5317: LD_INT 50
5319: PUSH
5320: EMPTY
5321: LIST
5322: PUSH
5323: LD_INT 22
5325: PUSH
5326: LD_VAR 0 3
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: PPUSH
5341: CALL_OW 69
5345: ST_TO_ADDR
// if building_list = 0 then
5346: LD_VAR 0 2
5350: PUSH
5351: LD_INT 0
5353: EQUAL
5354: IFFALSE 5399
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: LD_INT 21
5363: PUSH
5364: LD_INT 3
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: PUSH
5371: LD_INT 50
5373: PUSH
5374: EMPTY
5375: LIST
5376: PUSH
5377: LD_INT 22
5379: PUSH
5380: LD_VAR 0 3
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: LIST
5393: PPUSH
5394: CALL_OW 69
5398: ST_TO_ADDR
// if building_list = 0 then
5399: LD_VAR 0 2
5403: PUSH
5404: LD_INT 0
5406: EQUAL
5407: IFFALSE 5411
// exit ;
5409: GO 5583
// hc_name :=  ;
5411: LD_ADDR_OWVAR 26
5415: PUSH
5416: LD_STRING 
5418: ST_TO_ADDR
// hc_importance := 0 ;
5419: LD_ADDR_OWVAR 32
5423: PUSH
5424: LD_INT 0
5426: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5427: LD_INT 0
5429: PPUSH
5430: LD_INT 0
5432: PPUSH
5433: LD_EXP 20
5437: PUSH
5438: LD_INT 2
5440: DIV
5441: PPUSH
5442: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5446: LD_ADDR_OWVAR 21
5450: PUSH
5451: LD_EXP 41
5455: PUSH
5456: LD_VAR 0 3
5460: ARRAY
5461: ST_TO_ADDR
// uc_side := aktresp ;
5462: LD_ADDR_OWVAR 20
5466: PUSH
5467: LD_VAR 0 3
5471: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5472: LD_ADDR_VAR 0 4
5476: PUSH
5477: LD_VAR 0 2
5481: PUSH
5482: LD_INT 1
5484: PPUSH
5485: LD_VAR 0 2
5489: PUSH
5490: LD_INT 0
5492: PLUS
5493: PPUSH
5494: CALL_OW 12
5498: ARRAY
5499: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5500: LD_VAR 0 4
5504: PPUSH
5505: CALL_OW 266
5509: PUSH
5510: LD_INT 0
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: IN
5520: IFFALSE 5532
// n = 25 else
5522: LD_ADDR_VAR 0 1
5526: PUSH
5527: LD_INT 25
5529: ST_TO_ADDR
5530: GO 5540
// n = 10 ;
5532: LD_ADDR_VAR 0 1
5536: PUSH
5537: LD_INT 10
5539: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5540: CALL_OW 44
5544: PPUSH
5545: LD_VAR 0 4
5549: PPUSH
5550: CALL_OW 250
5554: PPUSH
5555: LD_VAR 0 4
5559: PPUSH
5560: CALL_OW 251
5564: PPUSH
5565: LD_VAR 0 1
5569: PPUSH
5570: LD_INT 1
5572: PPUSH
5573: CALL_OW 50
// end else
5577: GO 5580
// enable ;
5579: ENABLE
// end else
5580: GO 5583
// enable ;
5582: ENABLE
// end ;
5583: PPOPN 4
5585: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
5586: GO 5588
5588: DISABLE
5589: LD_INT 0
5591: PPUSH
5592: PPUSH
// begin case tick of 1 .. 1 1$0 :
5593: LD_OWVAR 1
5597: PUSH
5598: LD_INT 1
5600: DOUBLE
5601: GREATEREQUAL
5602: IFFALSE 5610
5604: LD_INT 2100
5606: DOUBLE
5607: LESSEQUAL
5608: IFTRUE 5612
5610: GO 5623
5612: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5613: LD_ADDR_VAR 0 1
5617: PUSH
5618: LD_INT 150
5620: ST_TO_ADDR
5621: GO 5806
5623: LD_INT 2100
5625: PUSH
5626: LD_INT 1
5628: PLUS
5629: DOUBLE
5630: GREATEREQUAL
5631: IFFALSE 5639
5633: LD_INT 10500
5635: DOUBLE
5636: LESSEQUAL
5637: IFTRUE 5641
5639: GO 5652
5641: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5642: LD_ADDR_VAR 0 1
5646: PUSH
5647: LD_INT 100
5649: ST_TO_ADDR
5650: GO 5806
5652: LD_INT 10500
5654: PUSH
5655: LD_INT 1
5657: PLUS
5658: DOUBLE
5659: GREATEREQUAL
5660: IFFALSE 5668
5662: LD_INT 21000
5664: DOUBLE
5665: LESSEQUAL
5666: IFTRUE 5670
5668: GO 5681
5670: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5671: LD_ADDR_VAR 0 1
5675: PUSH
5676: LD_INT 90
5678: ST_TO_ADDR
5679: GO 5806
5681: LD_INT 21000
5683: PUSH
5684: LD_INT 1
5686: PLUS
5687: DOUBLE
5688: GREATEREQUAL
5689: IFFALSE 5697
5691: LD_INT 42000
5693: DOUBLE
5694: LESSEQUAL
5695: IFTRUE 5699
5697: GO 5710
5699: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5700: LD_ADDR_VAR 0 1
5704: PUSH
5705: LD_INT 70
5707: ST_TO_ADDR
5708: GO 5806
5710: LD_INT 42000
5712: PUSH
5713: LD_INT 1
5715: PLUS
5716: DOUBLE
5717: GREATEREQUAL
5718: IFFALSE 5726
5720: LD_INT 63000
5722: DOUBLE
5723: LESSEQUAL
5724: IFTRUE 5728
5726: GO 5739
5728: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5729: LD_ADDR_VAR 0 1
5733: PUSH
5734: LD_INT 60
5736: ST_TO_ADDR
5737: GO 5806
5739: LD_INT 63000
5741: PUSH
5742: LD_INT 1
5744: PLUS
5745: DOUBLE
5746: GREATEREQUAL
5747: IFFALSE 5755
5749: LD_INT 105000
5751: DOUBLE
5752: LESSEQUAL
5753: IFTRUE 5757
5755: GO 5768
5757: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5758: LD_ADDR_VAR 0 1
5762: PUSH
5763: LD_INT 35
5765: ST_TO_ADDR
5766: GO 5806
5768: LD_INT 105000
5770: PUSH
5771: LD_INT 1
5773: PLUS
5774: DOUBLE
5775: GREATEREQUAL
5776: IFFALSE 5784
5778: LD_INT 630000
5780: DOUBLE
5781: LESSEQUAL
5782: IFTRUE 5786
5784: GO 5797
5786: POP
// d := 20 ; else
5787: LD_ADDR_VAR 0 1
5791: PUSH
5792: LD_INT 20
5794: ST_TO_ADDR
5795: GO 5806
5797: POP
// d := 0 ; end ;
5798: LD_ADDR_VAR 0 1
5802: PUSH
5803: LD_INT 0
5805: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
5806: LD_INT 1
5808: PPUSH
5809: LD_INT 10000
5811: PPUSH
5812: CALL_OW 12
5816: PUSH
5817: LD_VAR 0 1
5821: PUSH
5822: LD_EXP 23
5826: MUL
5827: PUSH
5828: LD_INT 2
5830: DIV
5831: LESSEQUAL
5832: IFFALSE 5955
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5834: LD_INT 1
5836: PPUSH
5837: LD_INT 140
5839: PPUSH
5840: CALL_OW 12
5844: PPUSH
5845: CALL_OW 67
// if shipment1 = [ ] then
5849: LD_LOC 5
5853: PUSH
5854: EMPTY
5855: EQUAL
5856: IFFALSE 5897
// shipment1 := [ base1 , base2 , base3 , base4 , safe1 , safe2 , safe3 , safe4 ] ;
5858: LD_ADDR_LOC 5
5862: PUSH
5863: LD_INT 18
5865: PUSH
5866: LD_INT 19
5868: PUSH
5869: LD_INT 20
5871: PUSH
5872: LD_INT 21
5874: PUSH
5875: LD_INT 26
5877: PUSH
5878: LD_INT 27
5880: PUSH
5881: LD_INT 28
5883: PUSH
5884: LD_INT 29
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
5897: LD_ADDR_VAR 0 2
5901: PUSH
5902: LD_LOC 5
5906: PUSH
5907: LD_INT 1
5909: PPUSH
5910: LD_LOC 5
5914: PPUSH
5915: CALL_OW 12
5919: ARRAY
5920: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
5921: LD_ADDR_LOC 5
5925: PUSH
5926: LD_LOC 5
5930: PUSH
5931: LD_VAR 0 2
5935: PUSH
5936: EMPTY
5937: LIST
5938: DIFF
5939: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
5940: LD_INT 5
5942: PPUSH
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_INT 1
5950: PPUSH
5951: CALL_OW 55
// end ; enable ;
5955: ENABLE
// end ;
5956: PPOPN 2
5958: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
5959: GO 5961
5961: DISABLE
5962: LD_INT 0
5964: PPUSH
5965: PPUSH
// begin case tick of 1 .. 1 1$0 :
5966: LD_OWVAR 1
5970: PUSH
5971: LD_INT 1
5973: DOUBLE
5974: GREATEREQUAL
5975: IFFALSE 5983
5977: LD_INT 2100
5979: DOUBLE
5980: LESSEQUAL
5981: IFTRUE 5985
5983: GO 5996
5985: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5986: LD_ADDR_VAR 0 1
5990: PUSH
5991: LD_INT 150
5993: ST_TO_ADDR
5994: GO 6179
5996: LD_INT 2100
5998: PUSH
5999: LD_INT 1
6001: PLUS
6002: DOUBLE
6003: GREATEREQUAL
6004: IFFALSE 6012
6006: LD_INT 10500
6008: DOUBLE
6009: LESSEQUAL
6010: IFTRUE 6014
6012: GO 6025
6014: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6015: LD_ADDR_VAR 0 1
6019: PUSH
6020: LD_INT 100
6022: ST_TO_ADDR
6023: GO 6179
6025: LD_INT 10500
6027: PUSH
6028: LD_INT 1
6030: PLUS
6031: DOUBLE
6032: GREATEREQUAL
6033: IFFALSE 6041
6035: LD_INT 21000
6037: DOUBLE
6038: LESSEQUAL
6039: IFTRUE 6043
6041: GO 6054
6043: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6044: LD_ADDR_VAR 0 1
6048: PUSH
6049: LD_INT 90
6051: ST_TO_ADDR
6052: GO 6179
6054: LD_INT 21000
6056: PUSH
6057: LD_INT 1
6059: PLUS
6060: DOUBLE
6061: GREATEREQUAL
6062: IFFALSE 6070
6064: LD_INT 42000
6066: DOUBLE
6067: LESSEQUAL
6068: IFTRUE 6072
6070: GO 6083
6072: POP
// d := 80 ; 20 20$0 + 1 .. 30 30$0 :
6073: LD_ADDR_VAR 0 1
6077: PUSH
6078: LD_INT 80
6080: ST_TO_ADDR
6081: GO 6179
6083: LD_INT 42000
6085: PUSH
6086: LD_INT 1
6088: PLUS
6089: DOUBLE
6090: GREATEREQUAL
6091: IFFALSE 6099
6093: LD_INT 63000
6095: DOUBLE
6096: LESSEQUAL
6097: IFTRUE 6101
6099: GO 6112
6101: POP
// d := 70 ; 30 30$0 + 1 .. 50 50$0 :
6102: LD_ADDR_VAR 0 1
6106: PUSH
6107: LD_INT 70
6109: ST_TO_ADDR
6110: GO 6179
6112: LD_INT 63000
6114: PUSH
6115: LD_INT 1
6117: PLUS
6118: DOUBLE
6119: GREATEREQUAL
6120: IFFALSE 6128
6122: LD_INT 105000
6124: DOUBLE
6125: LESSEQUAL
6126: IFTRUE 6130
6128: GO 6141
6130: POP
// d := 55 ; 50 50$0 + 1 .. 300 300$0 :
6131: LD_ADDR_VAR 0 1
6135: PUSH
6136: LD_INT 55
6138: ST_TO_ADDR
6139: GO 6179
6141: LD_INT 105000
6143: PUSH
6144: LD_INT 1
6146: PLUS
6147: DOUBLE
6148: GREATEREQUAL
6149: IFFALSE 6157
6151: LD_INT 630000
6153: DOUBLE
6154: LESSEQUAL
6155: IFTRUE 6159
6157: GO 6170
6159: POP
// d := 40 ; else
6160: LD_ADDR_VAR 0 1
6164: PUSH
6165: LD_INT 40
6167: ST_TO_ADDR
6168: GO 6179
6170: POP
// d := 0 ; end ;
6171: LD_ADDR_VAR 0 1
6175: PUSH
6176: LD_INT 0
6178: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density * 2 div 3 then
6179: LD_INT 1
6181: PPUSH
6182: LD_INT 10000
6184: PPUSH
6185: CALL_OW 12
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: LD_EXP 23
6199: MUL
6200: PUSH
6201: LD_INT 2
6203: MUL
6204: PUSH
6205: LD_INT 3
6207: DIV
6208: LESSEQUAL
6209: IFFALSE 6348
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6211: LD_INT 1
6213: PPUSH
6214: LD_INT 140
6216: PPUSH
6217: CALL_OW 12
6221: PPUSH
6222: CALL_OW 67
// if shipment2 = [ ] then
6226: LD_LOC 6
6230: PUSH
6231: EMPTY
6232: EQUAL
6233: IFFALSE 6290
// shipment2 := [ between1 , between2 , between3 , between4 , ring1 , ring2 , ring3 , ring4 , center , center , center , center ] ;
6235: LD_ADDR_LOC 6
6239: PUSH
6240: LD_INT 30
6242: PUSH
6243: LD_INT 31
6245: PUSH
6246: LD_INT 32
6248: PUSH
6249: LD_INT 33
6251: PUSH
6252: LD_INT 34
6254: PUSH
6255: LD_INT 35
6257: PUSH
6258: LD_INT 36
6260: PUSH
6261: LD_INT 37
6263: PUSH
6264: LD_INT 38
6266: PUSH
6267: LD_INT 38
6269: PUSH
6270: LD_INT 38
6272: PUSH
6273: LD_INT 38
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_LOC 6
6299: PUSH
6300: LD_INT 1
6302: PPUSH
6303: LD_LOC 6
6307: PPUSH
6308: CALL_OW 12
6312: ARRAY
6313: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
6314: LD_ADDR_LOC 6
6318: PUSH
6319: LD_LOC 6
6323: PUSH
6324: LD_VAR 0 2
6328: PUSH
6329: EMPTY
6330: LIST
6331: DIFF
6332: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
6333: LD_INT 5
6335: PPUSH
6336: LD_VAR 0 2
6340: PPUSH
6341: LD_INT 1
6343: PPUSH
6344: CALL_OW 55
// end ; enable ;
6348: ENABLE
// end ; end_of_file
6349: PPOPN 2
6351: END
// function prepare_treasure ( x , y ) ; var sm , i ; begin
6352: LD_INT 0
6354: PPUSH
6355: PPUSH
6356: PPUSH
// sm := rand ( 0 , 6 ) ;
6357: LD_ADDR_VAR 0 4
6361: PUSH
6362: LD_INT 0
6364: PPUSH
6365: LD_INT 6
6367: PPUSH
6368: CALL_OW 12
6372: ST_TO_ADDR
// for i := 0 to 15 do
6373: LD_ADDR_VAR 0 5
6377: PUSH
6378: DOUBLE
6379: LD_INT 0
6381: DEC
6382: ST_TO_ADDR
6383: LD_INT 15
6385: PUSH
6386: FOR_TO
6387: IFFALSE 6493
// begin MoveAreaXY ( p1 + i , x , y ) ;
6389: LD_INT 1
6391: PUSH
6392: LD_VAR 0 5
6396: PLUS
6397: PPUSH
6398: LD_VAR 0 1
6402: PPUSH
6403: LD_VAR 0 2
6407: PPUSH
6408: CALL_OW 425
// if prob ( 30 ) then
6412: LD_INT 30
6414: PPUSH
6415: CALL_OW 13
6419: IFFALSE 6437
// sm := rand ( 0 , 6 ) ;
6421: LD_ADDR_VAR 0 4
6425: PUSH
6426: LD_INT 0
6428: PPUSH
6429: LD_INT 6
6431: PPUSH
6432: CALL_OW 12
6436: ST_TO_ADDR
// x := ShiftX ( x - 1 , sm , 1 ) ;
6437: LD_ADDR_VAR 0 1
6441: PUSH
6442: LD_VAR 0 1
6446: PUSH
6447: LD_INT 1
6449: MINUS
6450: PPUSH
6451: LD_VAR 0 4
6455: PPUSH
6456: LD_INT 1
6458: PPUSH
6459: CALL_OW 272
6463: ST_TO_ADDR
// y := ShiftY ( y - 1 , sm , 1 ) ;
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: LD_VAR 0 2
6473: PUSH
6474: LD_INT 1
6476: MINUS
6477: PPUSH
6478: LD_VAR 0 4
6482: PPUSH
6483: LD_INT 1
6485: PPUSH
6486: CALL_OW 273
6490: ST_TO_ADDR
// end ;
6491: GO 6386
6493: POP
6494: POP
// end ;
6495: LD_VAR 0 3
6499: RET
// function show_treasure ; var i ; begin
6500: LD_INT 0
6502: PPUSH
6503: PPUSH
// SetAreaMapShow ( p16 , 1 ) ;
6504: LD_INT 16
6506: PPUSH
6507: LD_INT 1
6509: PPUSH
6510: CALL_OW 424
// for i := 1 to 15 do
6514: LD_ADDR_VAR 0 2
6518: PUSH
6519: DOUBLE
6520: LD_INT 1
6522: DEC
6523: ST_TO_ADDR
6524: LD_INT 15
6526: PUSH
6527: FOR_TO
6528: IFFALSE 6575
// begin wait ( 0 0$10 ) ;
6530: LD_INT 350
6532: PPUSH
6533: CALL_OW 67
// SetAreaMapShow ( p16 - i + 1 , 0 ) ;
6537: LD_INT 16
6539: PUSH
6540: LD_VAR 0 2
6544: MINUS
6545: PUSH
6546: LD_INT 1
6548: PLUS
6549: PPUSH
6550: LD_INT 0
6552: PPUSH
6553: CALL_OW 424
// SetAreaMapShow ( p16 - i , 1 ) ;
6557: LD_INT 16
6559: PUSH
6560: LD_VAR 0 2
6564: MINUS
6565: PPUSH
6566: LD_INT 1
6568: PPUSH
6569: CALL_OW 424
// end ;
6573: GO 6527
6575: POP
6576: POP
// wait ( 0 0$30 ) ;
6577: LD_INT 1050
6579: PPUSH
6580: CALL_OW 67
// SetAreaMapShow ( p1 , 0 ) ;
6584: LD_INT 1
6586: PPUSH
6587: LD_INT 0
6589: PPUSH
6590: CALL_OW 424
// end ;
6594: LD_VAR 0 1
6598: RET
// export function new_treasure ; var xy ; begin
6599: LD_INT 0
6601: PPUSH
6602: PPUSH
// xy := RandHexArea ( All , false ) ;
6603: LD_ADDR_VAR 0 2
6607: PUSH
6608: LD_INT 17
6610: PPUSH
6611: LD_INT 0
6613: PPUSH
6614: CALL_OW 16
6618: ST_TO_ADDR
// prepare_treasure ( xy [ 1 ] , xy [ 2 ] ) ;
6619: LD_VAR 0 2
6623: PUSH
6624: LD_INT 1
6626: ARRAY
6627: PPUSH
6628: LD_VAR 0 2
6632: PUSH
6633: LD_INT 2
6635: ARRAY
6636: PPUSH
6637: CALL 6352 0 2
// show_treasure ;
6641: CALL 6500 0 0
// end ; end_of_file
6645: LD_VAR 0 1
6649: RET
// export function Init_Win_Condition ; begin
6650: LD_INT 0
6652: PPUSH
// disable ( 98 ) ;
6653: LD_INT 98
6655: DISABLE_MARKED
// disable ( 99 ) ;
6656: LD_INT 99
6658: DISABLE_MARKED
// if Team_Game then
6659: LD_EXP 44
6663: IFFALSE 6670
// enable ( 98 ) else
6665: LD_INT 98
6667: ENABLE_MARKED
6668: GO 6673
// enable ( 99 ) ;
6670: LD_INT 99
6672: ENABLE_MARKED
// end ;
6673: LD_VAR 0 1
6677: RET
// function CanWinLoose ; begin
6678: LD_INT 0
6680: PPUSH
// Result := true ;
6681: LD_ADDR_VAR 0 1
6685: PUSH
6686: LD_INT 1
6688: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6689: CALL_OW 518
6693: PUSH
6694: CALL_OW 519
6698: PUSH
6699: LD_INT 0
6701: GREATER
6702: AND
6703: IFFALSE 6713
// Result := false ;
6705: LD_ADDR_VAR 0 1
6709: PUSH
6710: LD_INT 0
6712: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6713: CALL_OW 531
6717: PUSH
6718: CALL_OW 519
6722: PUSH
6723: LD_INT 1
6725: GREATER
6726: AND
6727: IFFALSE 6737
// Result := false ;
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_INT 0
6736: ST_TO_ADDR
// end ;
6737: LD_VAR 0 1
6741: RET
// function HasPower ( i ) ; begin
6742: LD_INT 0
6744: PPUSH
// if def_people_respawning then
6745: LD_EXP 13
6749: IFFALSE 6840
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
6751: LD_ADDR_VAR 0 2
6755: PUSH
6756: LD_INT 22
6758: PUSH
6759: LD_VAR 0 1
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 2
6770: PUSH
6771: LD_INT 21
6773: PUSH
6774: LD_INT 1
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 33
6783: PUSH
6784: LD_INT 3
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 33
6793: PUSH
6794: LD_INT 5
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 30
6803: PUSH
6804: LD_INT 0
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PUSH
6811: LD_INT 30
6813: PUSH
6814: LD_INT 1
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: ST_TO_ADDR
6838: GO 6905
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
6840: LD_ADDR_VAR 0 2
6844: PUSH
6845: LD_INT 22
6847: PUSH
6848: LD_VAR 0 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 2
6859: PUSH
6860: LD_INT 21
6862: PUSH
6863: LD_INT 1
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 33
6872: PUSH
6873: LD_INT 3
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 33
6882: PUSH
6883: LD_INT 5
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PPUSH
6900: CALL_OW 69
6904: ST_TO_ADDR
// end ;
6905: LD_VAR 0 2
6909: RET
// function AlliedSides ( i , j ) ; begin
6910: LD_INT 0
6912: PPUSH
// Result := false ;
6913: LD_ADDR_VAR 0 3
6917: PUSH
6918: LD_INT 0
6920: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
6921: LD_VAR 0 1
6925: PPUSH
6926: LD_VAR 0 2
6930: PPUSH
6931: CALL_OW 81
6935: PUSH
6936: LD_INT 1
6938: EQUAL
6939: PUSH
6940: LD_VAR 0 2
6944: PPUSH
6945: LD_VAR 0 1
6949: PPUSH
6950: CALL_OW 81
6954: PUSH
6955: LD_INT 1
6957: EQUAL
6958: AND
6959: PUSH
6960: LD_VAR 0 1
6964: PPUSH
6965: CALL_OW 83
6969: AND
6970: PUSH
6971: LD_VAR 0 2
6975: PPUSH
6976: CALL_OW 83
6980: AND
6981: IFFALSE 6991
// Result := true ;
6983: LD_ADDR_VAR 0 3
6987: PUSH
6988: LD_INT 1
6990: ST_TO_ADDR
// end ;
6991: LD_VAR 0 3
6995: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
6996: CALL 6678 0 0
7000: IFFALSE 7009
7002: GO 7004
7004: DISABLE
// YouLostInMultiplayer ;
7005: CALL_OW 107
7009: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7010: CALL 6678 0 0
7014: IFFALSE 7038
7016: GO 7018
7018: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7019: LD_EXP 41
7023: PUSH
7024: LD_OWVAR 2
7028: ARRAY
7029: PPUSH
7030: CALL 9313 0 1
// YouWinInMultiplayer ;
7034: CALL_OW 106
// end ;
7038: END
// every 0 0$3 marked 98 do var i , CanWin ;
7039: GO 7041
7041: DISABLE
7042: LD_INT 0
7044: PPUSH
7045: PPUSH
// begin if not HasPower ( your_side ) then
7046: LD_OWVAR 2
7050: PPUSH
7051: CALL 6742 0 1
7055: NOT
7056: IFFALSE 7067
// begin Multiplayer_Loose_Message ;
7058: CALL_OW 521
// enable ( 400 ) ;
7062: LD_INT 400
7064: ENABLE_MARKED
// end else
7065: GO 7200
// begin CanWin := true ;
7067: LD_ADDR_VAR 0 2
7071: PUSH
7072: LD_INT 1
7074: ST_TO_ADDR
// for i := 1 to 8 do
7075: LD_ADDR_VAR 0 1
7079: PUSH
7080: DOUBLE
7081: LD_INT 1
7083: DEC
7084: ST_TO_ADDR
7085: LD_INT 8
7087: PUSH
7088: FOR_TO
7089: IFFALSE 7186
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7091: LD_EXP 40
7095: PUSH
7096: LD_VAR 0 1
7100: ARRAY
7101: PUSH
7102: LD_VAR 0 1
7106: PPUSH
7107: CALL_OW 108
7111: AND
7112: PUSH
7113: LD_VAR 0 1
7117: PUSH
7118: LD_OWVAR 2
7122: NONEQUAL
7123: AND
7124: IFFALSE 7184
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7126: LD_EXP 38
7130: PUSH
7131: LD_VAR 0 1
7135: ARRAY
7136: NOT
7137: PUSH
7138: LD_EXP 38
7142: PUSH
7143: LD_VAR 0 1
7147: ARRAY
7148: PUSH
7149: LD_EXP 38
7153: PUSH
7154: LD_OWVAR 2
7158: ARRAY
7159: NONEQUAL
7160: OR
7161: IFFALSE 7184
// if HasPower ( i ) then
7163: LD_VAR 0 1
7167: PPUSH
7168: CALL 6742 0 1
7172: IFFALSE 7184
// begin CanWin := false ;
7174: LD_ADDR_VAR 0 2
7178: PUSH
7179: LD_INT 0
7181: ST_TO_ADDR
// break ;
7182: GO 7186
// end ;
7184: GO 7088
7186: POP
7187: POP
// if CanWin then
7188: LD_VAR 0 2
7192: IFFALSE 7199
// enable ( 401 ) else
7194: LD_INT 401
7196: ENABLE_MARKED
7197: GO 7200
// enable ;
7199: ENABLE
// end ; end ;
7200: PPOPN 2
7202: END
// every 0 0$3 marked 99 do var i , CanWin ;
7203: GO 7205
7205: DISABLE
7206: LD_INT 0
7208: PPUSH
7209: PPUSH
// begin if not HasPower ( your_side ) then
7210: LD_OWVAR 2
7214: PPUSH
7215: CALL 6742 0 1
7219: NOT
7220: IFFALSE 7231
// begin Multiplayer_Loose_Message ;
7222: CALL_OW 521
// enable ( 400 ) ;
7226: LD_INT 400
7228: ENABLE_MARKED
// end else
7229: GO 7344
// begin CanWin := true ;
7231: LD_ADDR_VAR 0 2
7235: PUSH
7236: LD_INT 1
7238: ST_TO_ADDR
// for i := 1 to 8 do
7239: LD_ADDR_VAR 0 1
7243: PUSH
7244: DOUBLE
7245: LD_INT 1
7247: DEC
7248: ST_TO_ADDR
7249: LD_INT 8
7251: PUSH
7252: FOR_TO
7253: IFFALSE 7330
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7255: LD_EXP 40
7259: PUSH
7260: LD_VAR 0 1
7264: ARRAY
7265: PUSH
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 108
7275: AND
7276: PUSH
7277: LD_VAR 0 1
7281: PUSH
7282: LD_OWVAR 2
7286: NONEQUAL
7287: AND
7288: IFFALSE 7328
// if not AlliedSides ( i , your_side ) then
7290: LD_VAR 0 1
7294: PPUSH
7295: LD_OWVAR 2
7299: PPUSH
7300: CALL 6910 0 2
7304: NOT
7305: IFFALSE 7328
// if HasPower ( i ) then
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL 6742 0 1
7316: IFFALSE 7328
// begin CanWin := false ;
7318: LD_ADDR_VAR 0 2
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// break ;
7326: GO 7330
// end ;
7328: GO 7252
7330: POP
7331: POP
// if CanWin then
7332: LD_VAR 0 2
7336: IFFALSE 7343
// enable ( 401 ) else
7338: LD_INT 401
7340: ENABLE_MARKED
7341: GO 7344
// enable ;
7343: ENABLE
// end ; end ; end_of_file
7344: PPOPN 2
7346: END
// var _isDay ; every 0 0$10 do
7347: GO 7349
7349: DISABLE
// begin _isDay := true ;
7350: LD_ADDR_LOC 9
7354: PUSH
7355: LD_INT 1
7357: ST_TO_ADDR
// end ;
7358: END
// every 10 10$00 do
7359: GO 7361
7361: DISABLE
// begin _isDay := not _isDay ;
7362: LD_ADDR_LOC 9
7366: PUSH
7367: LD_LOC 9
7371: NOT
7372: ST_TO_ADDR
// if _isDay then
7373: LD_LOC 9
7377: IFFALSE 7396
// begin solar_recharge_percent := 100 ;
7379: LD_ADDR_OWVAR 79
7383: PUSH
7384: LD_INT 100
7386: ST_TO_ADDR
// LoadColorsTXT ( colors.txt ) ;
7387: LD_STRING colors.txt
7389: PPUSH
7390: CALL_OW 544
// end else
7394: GO 7411
// begin solar_recharge_percent := 0 ;
7396: LD_ADDR_OWVAR 79
7400: PUSH
7401: LD_INT 0
7403: ST_TO_ADDR
// LoadColorsTXT ( colors_night.txt ) ;
7404: LD_STRING colors_night.txt
7406: PPUSH
7407: CALL_OW 544
// end ; enable ;
7411: ENABLE
// end ; end_of_file
7412: END
// var infos ; export function init_infos ; begin
7413: LD_INT 0
7415: PPUSH
// infos = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7416: LD_ADDR_LOC 10
7420: PUSH
7421: LD_INT 0
7423: PUSH
7424: LD_INT 0
7426: PUSH
7427: LD_INT 0
7429: PUSH
7430: LD_INT 0
7432: PUSH
7433: LD_INT 0
7435: PUSH
7436: LD_INT 0
7438: PUSH
7439: LD_INT 0
7441: PUSH
7442: LD_INT 0
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: ST_TO_ADDR
// real_cost = cost ;
7455: LD_ADDR_EXP 29
7459: PUSH
7460: LD_EXP 27
7464: ST_TO_ADDR
// cost = cost * 10 ;
7465: LD_ADDR_EXP 27
7469: PUSH
7470: LD_EXP 27
7474: PUSH
7475: LD_INT 10
7477: MUL
7478: ST_TO_ADDR
// end ;
7479: LD_VAR 0 1
7483: RET
// every 0 0$1 do
7484: GO 7486
7486: DISABLE
// begin if gametype <> 11 then
7487: LD_EXP 1
7491: PUSH
7492: LD_INT 11
7494: NONEQUAL
7495: IFFALSE 7499
// exit ;
7497: GO 7588
// if decr_cost_time = 0 then
7499: LD_EXP 28
7503: PUSH
7504: LD_INT 0
7506: EQUAL
7507: IFFALSE 7529
// real_cost = ( cost div 100 ) * 10 else
7509: LD_ADDR_EXP 29
7513: PUSH
7514: LD_EXP 27
7518: PUSH
7519: LD_INT 100
7521: DIV
7522: PUSH
7523: LD_INT 10
7525: MUL
7526: ST_TO_ADDR
7527: GO 7588
// repeat wait ( decr_cost_time div 5 ) ;
7529: LD_EXP 28
7533: PUSH
7534: LD_INT 5
7536: DIV
7537: PPUSH
7538: CALL_OW 67
// cost = cost * 1000 div 1149 ;
7542: LD_ADDR_EXP 27
7546: PUSH
7547: LD_EXP 27
7551: PUSH
7552: LD_INT 1000
7554: MUL
7555: PUSH
7556: LD_INT 1149
7558: DIV
7559: ST_TO_ADDR
// real_cost = ( cost div 100 ) * 10 ;
7560: LD_ADDR_EXP 29
7564: PUSH
7565: LD_EXP 27
7569: PUSH
7570: LD_INT 100
7572: DIV
7573: PUSH
7574: LD_INT 10
7576: MUL
7577: ST_TO_ADDR
// until real_cost = 10 ;
7578: LD_EXP 29
7582: PUSH
7583: LD_INT 10
7585: EQUAL
7586: IFFALSE 7529
// end ;
7588: END
// every 0 0$2 do
7589: GO 7591
7591: DISABLE
// begin if gametype <> 11 then
7592: LD_EXP 1
7596: PUSH
7597: LD_INT 11
7599: NONEQUAL
7600: IFFALSE 7608
// ShowTimer else
7602: CALL 8026 0 0
7606: GO 7612
// ShowInfos ;
7608: CALL 7614 0 0
// enable ;
7612: ENABLE
// end ;
7613: END
// function ShowInfos ; var inf , en1 , en2 , AllStrings ; begin
7614: LD_INT 0
7616: PPUSH
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
// if gametype <> 11 then
7621: LD_EXP 1
7625: PUSH
7626: LD_INT 11
7628: NONEQUAL
7629: IFFALSE 7633
// exit ;
7631: GO 8021
// if not your_side then
7633: LD_OWVAR 2
7637: NOT
7638: IFFALSE 7643
// begin enable ;
7640: ENABLE
// exit ;
7641: GO 8021
// end ; if Teams [ Side_Teams [ your_side ] ] [ 1 ] = your_side then
7643: LD_EXP 39
7647: PUSH
7648: LD_EXP 38
7652: PUSH
7653: LD_OWVAR 2
7657: ARRAY
7658: ARRAY
7659: PUSH
7660: LD_INT 1
7662: ARRAY
7663: PUSH
7664: LD_OWVAR 2
7668: EQUAL
7669: IFFALSE 7733
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7671: LD_ADDR_VAR 0 3
7675: PUSH
7676: LD_EXP 39
7680: PUSH
7681: LD_INT 3
7683: PUSH
7684: LD_EXP 38
7688: PUSH
7689: LD_OWVAR 2
7693: ARRAY
7694: MINUS
7695: ARRAY
7696: PUSH
7697: LD_INT 2
7699: ARRAY
7700: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7701: LD_ADDR_VAR 0 4
7705: PUSH
7706: LD_EXP 39
7710: PUSH
7711: LD_INT 3
7713: PUSH
7714: LD_EXP 38
7718: PUSH
7719: LD_OWVAR 2
7723: ARRAY
7724: MINUS
7725: ARRAY
7726: PUSH
7727: LD_INT 1
7729: ARRAY
7730: ST_TO_ADDR
// end else
7731: GO 7793
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7733: LD_ADDR_VAR 0 3
7737: PUSH
7738: LD_EXP 39
7742: PUSH
7743: LD_INT 3
7745: PUSH
7746: LD_EXP 38
7750: PUSH
7751: LD_OWVAR 2
7755: ARRAY
7756: MINUS
7757: ARRAY
7758: PUSH
7759: LD_INT 1
7761: ARRAY
7762: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7763: LD_ADDR_VAR 0 4
7767: PUSH
7768: LD_EXP 39
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: LD_EXP 38
7780: PUSH
7781: LD_OWVAR 2
7785: ARRAY
7786: MINUS
7787: ARRAY
7788: PUSH
7789: LD_INT 2
7791: ARRAY
7792: ST_TO_ADDR
// end ; AllStrings := [ #Multi1x1-Time , tick ] ;
7793: LD_ADDR_VAR 0 5
7797: PUSH
7798: LD_STRING #Multi1x1-Time
7800: PUSH
7801: LD_OWVAR 1
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7810: LD_INT 0
7812: PUSH
7813: LD_EXP 33
7817: PUSH
7818: LD_OWVAR 1
7822: MINUS
7823: LESSEQUAL
7824: IFFALSE 7855
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7826: LD_ADDR_VAR 0 5
7830: PUSH
7831: LD_VAR 0 5
7835: PUSH
7836: LD_STRING #allowedsibbomb
7838: PUSH
7839: LD_EXP 33
7843: PUSH
7844: LD_OWVAR 1
7848: MINUS
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: ADD
7854: ST_TO_ADDR
// case infos [ your_side ] of 0 :
7855: LD_LOC 10
7859: PUSH
7860: LD_OWVAR 2
7864: ARRAY
7865: PUSH
7866: LD_INT 0
7868: DOUBLE
7869: EQUAL
7870: IFTRUE 7874
7872: GO 7901
7874: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Bid1 , real_cost ] ;
7875: LD_ADDR_OWVAR 47
7879: PUSH
7880: LD_VAR 0 5
7884: PUSH
7885: LD_STRING #MultiParty-Bid1
7887: PUSH
7888: LD_EXP 29
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: ADD
7897: ST_TO_ADDR
// enable ;
7898: ENABLE
// end ; 1 :
7899: GO 8021
7901: LD_INT 1
7903: DOUBLE
7904: EQUAL
7905: IFTRUE 7909
7907: GO 7957
7909: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info1 , en1 , en1 , - 1 , #MultiParty-Bid2 , real_cost ] ;
7910: LD_ADDR_OWVAR 47
7914: PUSH
7915: LD_VAR 0 5
7919: PUSH
7920: LD_STRING #MultiParty-Info1
7922: PUSH
7923: LD_VAR 0 3
7927: PUSH
7928: LD_VAR 0 3
7932: PUSH
7933: LD_INT 1
7935: NEG
7936: PUSH
7937: LD_STRING #MultiParty-Bid2
7939: PUSH
7940: LD_EXP 29
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: ADD
7953: ST_TO_ADDR
// enable ;
7954: ENABLE
// end ; 2 :
7955: GO 8021
7957: LD_INT 2
7959: DOUBLE
7960: EQUAL
7961: IFTRUE 7965
7963: GO 8020
7965: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info2 , en1 , en1 , - 1 , en2 , en2 , - 1 ] ;
7966: LD_ADDR_OWVAR 47
7970: PUSH
7971: LD_VAR 0 5
7975: PUSH
7976: LD_STRING #MultiParty-Info2
7978: PUSH
7979: LD_VAR 0 3
7983: PUSH
7984: LD_VAR 0 3
7988: PUSH
7989: LD_INT 1
7991: NEG
7992: PUSH
7993: LD_VAR 0 4
7997: PUSH
7998: LD_VAR 0 4
8002: PUSH
8003: LD_INT 1
8005: NEG
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: ADD
8016: ST_TO_ADDR
// enable ;
8017: ENABLE
// end ; end ;
8018: GO 8021
8020: POP
// end ;
8021: LD_VAR 0 1
8025: RET
// function ShowTimer ; var AllStrings ; begin
8026: LD_INT 0
8028: PPUSH
8029: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8030: LD_ADDR_VAR 0 2
8034: PUSH
8035: LD_STRING #Multi1x1-Time
8037: PUSH
8038: LD_OWVAR 1
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8047: LD_INT 0
8049: PUSH
8050: LD_EXP 33
8054: PUSH
8055: LD_OWVAR 1
8059: MINUS
8060: LESSEQUAL
8061: IFFALSE 8092
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8063: LD_ADDR_VAR 0 2
8067: PUSH
8068: LD_VAR 0 2
8072: PUSH
8073: LD_STRING #allowedsibbomb
8075: PUSH
8076: LD_EXP 33
8080: PUSH
8081: LD_OWVAR 1
8085: MINUS
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: ADD
8091: ST_TO_ADDR
// Display_Strings := AllStrings ;
8092: LD_ADDR_OWVAR 47
8096: PUSH
8097: LD_VAR 0 2
8101: ST_TO_ADDR
// end ;
8102: LD_VAR 0 1
8106: RET
// function check_area ( side , area ) ; begin
8107: LD_INT 0
8109: PPUSH
// if infos [ side ] = 2 then
8110: LD_LOC 10
8114: PUSH
8115: LD_VAR 0 1
8119: ARRAY
8120: PUSH
8121: LD_INT 2
8123: EQUAL
8124: IFFALSE 8128
// exit ;
8126: GO 8199
// if GetResourceArea ( area , mat_cans ) * 10 >= real_cost then
8128: LD_VAR 0 2
8132: PPUSH
8133: LD_INT 1
8135: PPUSH
8136: CALL_OW 287
8140: PUSH
8141: LD_INT 10
8143: MUL
8144: PUSH
8145: LD_EXP 29
8149: GREATEREQUAL
8150: IFFALSE 8199
// begin EraseResourceArea ( area , mat_cans ) ;
8152: LD_VAR 0 2
8156: PPUSH
8157: LD_INT 1
8159: PPUSH
8160: CALL_OW 286
// infos = Replace ( infos , side , infos [ side ] + 1 ) ;
8164: LD_ADDR_LOC 10
8168: PUSH
8169: LD_LOC 10
8173: PPUSH
8174: LD_VAR 0 1
8178: PPUSH
8179: LD_LOC 10
8183: PUSH
8184: LD_VAR 0 1
8188: ARRAY
8189: PUSH
8190: LD_INT 1
8192: PLUS
8193: PPUSH
8194: CALL_OW 1
8198: ST_TO_ADDR
// end ; end ;
8199: LD_VAR 0 3
8203: RET
// every 0 0$5 do var i ;
8204: GO 8206
8206: DISABLE
8207: LD_INT 0
8209: PPUSH
// begin for i := 1 to Side_Positions do
8210: LD_ADDR_VAR 0 1
8214: PUSH
8215: DOUBLE
8216: LD_INT 1
8218: DEC
8219: ST_TO_ADDR
8220: LD_EXP 40
8224: PUSH
8225: FOR_TO
8226: IFFALSE 8334
// case Side_Positions [ i ] of 1 :
8228: LD_EXP 40
8232: PUSH
8233: LD_VAR 0 1
8237: ARRAY
8238: PUSH
8239: LD_INT 1
8241: DOUBLE
8242: EQUAL
8243: IFTRUE 8247
8245: GO 8262
8247: POP
// check_area ( i , exit1 ) ; 2 :
8248: LD_VAR 0 1
8252: PPUSH
8253: LD_INT 22
8255: PPUSH
8256: CALL 8107 0 2
8260: GO 8332
8262: LD_INT 2
8264: DOUBLE
8265: EQUAL
8266: IFTRUE 8270
8268: GO 8285
8270: POP
// check_area ( i , exit2 ) ; 3 :
8271: LD_VAR 0 1
8275: PPUSH
8276: LD_INT 23
8278: PPUSH
8279: CALL 8107 0 2
8283: GO 8332
8285: LD_INT 3
8287: DOUBLE
8288: EQUAL
8289: IFTRUE 8293
8291: GO 8308
8293: POP
// check_area ( i , exit3 ) ; 4 :
8294: LD_VAR 0 1
8298: PPUSH
8299: LD_INT 24
8301: PPUSH
8302: CALL 8107 0 2
8306: GO 8332
8308: LD_INT 4
8310: DOUBLE
8311: EQUAL
8312: IFTRUE 8316
8314: GO 8331
8316: POP
// check_area ( i , exit4 ) ; end ;
8317: LD_VAR 0 1
8321: PPUSH
8322: LD_INT 25
8324: PPUSH
8325: CALL 8107 0 2
8329: GO 8332
8331: POP
8332: GO 8225
8334: POP
8335: POP
// enable ;
8336: ENABLE
// exit ;
8337: GO 8339
// end ; end_of_file
8339: PPOPN 1
8341: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8342: LD_INT 0
8344: PPUSH
8345: PPUSH
// for un in battle_flags_id do
8346: LD_ADDR_VAR 0 2
8350: PUSH
8351: LD_EXP 49
8355: PUSH
8356: FOR_IN
8357: IFFALSE 8432
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8359: LD_VAR 0 2
8363: PPUSH
8364: LD_INT 1
8366: PUSH
8367: LD_LOC 11
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 2
8378: PUSH
8379: LD_LOC 11
8383: PUSH
8384: LD_INT 2
8386: DIV
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: PUSH
8392: LD_INT 3
8394: PUSH
8395: LD_LOC 11
8399: PUSH
8400: LD_INT 5
8402: DIV
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 20
8410: PUSH
8411: LD_LOC 11
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: PPUSH
8426: CALL_OW 423
8430: GO 8356
8432: POP
8433: POP
// end ;
8434: LD_VAR 0 1
8438: RET
// every 0 0$0.1 do var un ;
8439: GO 8441
8441: DISABLE
8442: LD_INT 0
8444: PPUSH
// begin if not def_morale_flags then
8445: LD_EXP 10
8449: NOT
8450: IFFALSE 8454
// exit ;
8452: GO 8531
// if not morale_decreasing_time then
8454: LD_EXP 24
8458: NOT
8459: IFFALSE 8463
// exit ;
8461: GO 8531
// strength = 100 ;
8463: LD_ADDR_LOC 11
8467: PUSH
8468: LD_INT 100
8470: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8471: LD_EXP 24
8475: PPUSH
8476: CALL_OW 67
// strength := strength - 1 ;
8480: LD_ADDR_LOC 11
8484: PUSH
8485: LD_LOC 11
8489: PUSH
8490: LD_INT 1
8492: MINUS
8493: ST_TO_ADDR
// Update_Flags ;
8494: CALL 8342 0 0
// until not strength ;
8498: LD_LOC 11
8502: NOT
8503: IFFALSE 8471
// for un in battle_flags_id do
8505: LD_ADDR_VAR 0 1
8509: PUSH
8510: LD_EXP 49
8514: PUSH
8515: FOR_IN
8516: IFFALSE 8529
// KillBattleFlag ( un ) ;
8518: LD_VAR 0 1
8522: PPUSH
8523: CALL_OW 419
8527: GO 8515
8529: POP
8530: POP
// end ; end_of_file
8531: PPOPN 1
8533: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8534: LD_VAR 0 1
8538: PPUSH
8539: CALL_OW 266
8543: PUSH
8544: LD_INT 0
8546: PUSH
8547: LD_INT 1
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: IN
8554: IFFALSE 8579
// SetBName ( b , @ & GetSide ( b ) ) ;
8556: LD_VAR 0 1
8560: PPUSH
8561: LD_STRING @
8563: PUSH
8564: LD_VAR 0 1
8568: PPUSH
8569: CALL_OW 255
8573: STR
8574: PPUSH
8575: CALL_OW 500
// end ;
8579: PPOPN 2
8581: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8582: LD_VAR 0 1
8586: PPUSH
8587: CALL_OW 266
8591: PUSH
8592: LD_INT 0
8594: PUSH
8595: LD_INT 1
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: IN
8602: IFFALSE 8627
// SetBName ( b , @ & GetSide ( b ) ) ;
8604: LD_VAR 0 1
8608: PPUSH
8609: LD_STRING @
8611: PUSH
8612: LD_VAR 0 1
8616: PPUSH
8617: CALL_OW 255
8621: STR
8622: PPUSH
8623: CALL_OW 500
// end ;
8627: PPOPN 3
8629: END
// on UnitDestroyed ( j ) do begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
8630: LD_VAR 0 1
8634: PPUSH
8635: CALL_OW 255
8639: PUSH
8640: LD_INT 0
8642: EQUAL
8643: PUSH
8644: LD_VAR 0 1
8648: PPUSH
8649: CALL_OW 257
8653: PUSH
8654: LD_INT 12
8656: EQUAL
8657: AND
8658: IFFALSE 8664
// CheckApemenAmount ;
8660: CALL 8814 0 0
// end ;
8664: PPOPN 1
8666: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8667: LD_VAR 0 1
8671: PPUSH
8672: LD_VAR 0 2
8676: PPUSH
8677: LD_VAR 0 3
8681: PPUSH
8682: LD_OWVAR 2
8686: PPUSH
8687: CALL 9271 0 4
8691: PPOPN 3
8693: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
8694: GO 8696
8696: DISABLE
8697: LD_INT 0
8699: PPUSH
// begin _apemenIncrement := 0 ;
8700: LD_ADDR_LOC 16
8704: PUSH
8705: LD_INT 0
8707: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
8708: LD_ADDR_LOC 18
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// _isSpawning := true ;
8716: LD_ADDR_LOC 20
8720: PUSH
8721: LD_INT 1
8723: ST_TO_ADDR
// _wildApemenAmount := 0 ;
8724: LD_ADDR_LOC 21
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
8732: LD_ADDR_VAR 0 1
8736: PUSH
8737: LD_EXP 40
8741: PUSH
8742: LD_INT 0
8744: PUSH
8745: EMPTY
8746: LIST
8747: DIFF
8748: PUSH
8749: FOR_IN
8750: IFFALSE 8768
// _apemenIncrement := _apemenIncrement + 1 ;
8752: LD_ADDR_LOC 16
8756: PUSH
8757: LD_LOC 16
8761: PUSH
8762: LD_INT 1
8764: PLUS
8765: ST_TO_ADDR
8766: GO 8749
8768: POP
8769: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
8770: LD_ADDR_LOC 17
8774: PUSH
8775: LD_LOC 16
8779: PUSH
8780: LD_EXP 32
8784: MUL
8785: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
8786: LD_ADDR_LOC 19
8790: PUSH
8791: LD_LOC 17
8795: PUSH
8796: LD_INT 2
8798: DIVREAL
8799: ST_TO_ADDR
// prepare_apemen ;
8800: CALL 8892 0 0
// end ;
8804: PPOPN 1
8806: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
8807: CALL 8814 0 0
// end ;
8811: PPOPN 2
8813: END
// export function CheckApemenAmount ; begin
8814: LD_INT 0
8816: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
8817: LD_ADDR_LOC 21
8821: PUSH
8822: LD_LOC 21
8826: PUSH
8827: LD_INT 1
8829: MINUS
8830: ST_TO_ADDR
// if _isSpawning then
8831: LD_LOC 20
8835: IFFALSE 8839
// exit ;
8837: GO 8887
// if _wildApemenAmount <= ( _apemenThreshold ) then
8839: LD_LOC 21
8843: PUSH
8844: LD_LOC 19
8848: LESSEQUAL
8849: IFFALSE 8887
// begin if _apemenSkillLevel < 8 then
8851: LD_LOC 18
8855: PUSH
8856: LD_INT 8
8858: LESS
8859: IFFALSE 8875
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
8861: LD_ADDR_LOC 18
8865: PUSH
8866: LD_LOC 18
8870: PUSH
8871: LD_INT 1
8873: PLUS
8874: ST_TO_ADDR
// _isSpawning := true ;
8875: LD_ADDR_LOC 20
8879: PUSH
8880: LD_INT 1
8882: ST_TO_ADDR
// prepare_apemen ;
8883: CALL 8892 0 0
// end ; end ;
8887: LD_VAR 0 1
8891: RET
// function prepare_apemen ; var i ; begin
8892: LD_INT 0
8894: PPUSH
8895: PPUSH
// if not amount_of_apemen then
8896: LD_EXP 32
8900: NOT
8901: IFFALSE 8905
// exit ;
8903: GO 9084
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
8905: LD_INT 1050
8907: PPUSH
8908: LD_INT 3150
8910: PPUSH
8911: CALL_OW 12
8915: PPUSH
8916: CALL_OW 67
// apeman_init ;
8920: CALL 9089 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
8924: LD_ADDR_VAR 0 2
8928: PUSH
8929: LD_EXP 40
8933: PUSH
8934: LD_INT 0
8936: PUSH
8937: EMPTY
8938: LIST
8939: DIFF
8940: PUSH
8941: FOR_IN
8942: IFFALSE 9046
// begin if i = 1 then
8944: LD_VAR 0 2
8948: PUSH
8949: LD_INT 1
8951: EQUAL
8952: IFFALSE 8969
// PlaceUnitArea ( CreateHuman , ape1 , false ) ;
8954: CALL_OW 44
8958: PPUSH
8959: LD_INT 39
8961: PPUSH
8962: LD_INT 0
8964: PPUSH
8965: CALL_OW 49
// if i = 2 then
8969: LD_VAR 0 2
8973: PUSH
8974: LD_INT 2
8976: EQUAL
8977: IFFALSE 8994
// PlaceUnitArea ( CreateHuman , ape2 , false ) ;
8979: CALL_OW 44
8983: PPUSH
8984: LD_INT 40
8986: PPUSH
8987: LD_INT 0
8989: PPUSH
8990: CALL_OW 49
// if i = 3 then
8994: LD_VAR 0 2
8998: PUSH
8999: LD_INT 3
9001: EQUAL
9002: IFFALSE 9019
// PlaceUnitArea ( CreateHuman , ape3 , false ) ;
9004: CALL_OW 44
9008: PPUSH
9009: LD_INT 41
9011: PPUSH
9012: LD_INT 0
9014: PPUSH
9015: CALL_OW 49
// if i = 4 then
9019: LD_VAR 0 2
9023: PUSH
9024: LD_INT 4
9026: EQUAL
9027: IFFALSE 9044
// PlaceUnitArea ( CreateHuman , ape4 , false ) ;
9029: CALL_OW 44
9033: PPUSH
9034: LD_INT 42
9036: PPUSH
9037: LD_INT 0
9039: PPUSH
9040: CALL_OW 49
// end ;
9044: GO 8941
9046: POP
9047: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
9048: LD_ADDR_LOC 21
9052: PUSH
9053: LD_LOC 21
9057: PUSH
9058: LD_LOC 16
9062: PLUS
9063: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
9064: LD_LOC 21
9068: PUSH
9069: LD_LOC 17
9073: GREATEREQUAL
9074: IFFALSE 8905
// _isSpawning := false ;
9076: LD_ADDR_LOC 20
9080: PUSH
9081: LD_INT 0
9083: ST_TO_ADDR
// end ;
9084: LD_VAR 0 1
9088: RET
// function apeman_init ; begin
9089: LD_INT 0
9091: PPUSH
// uc_side := 0 ;
9092: LD_ADDR_OWVAR 20
9096: PUSH
9097: LD_INT 0
9099: ST_TO_ADDR
// uc_nation := nation_nature ;
9100: LD_ADDR_OWVAR 21
9104: PUSH
9105: LD_INT 0
9107: ST_TO_ADDR
// hc_class := class_apeman ;
9108: LD_ADDR_OWVAR 28
9112: PUSH
9113: LD_INT 12
9115: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
9116: LD_ADDR_OWVAR 30
9120: PUSH
9121: LD_INT 2
9123: PUSH
9124: LD_INT 2
9126: PUSH
9127: LD_INT 2
9129: PUSH
9130: LD_INT 2
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
9139: LD_ADDR_OWVAR 31
9143: PUSH
9144: LD_INT 0
9146: PPUSH
9147: LD_INT 2
9149: PPUSH
9150: CALL_OW 12
9154: PUSH
9155: LD_LOC 18
9159: PLUS
9160: PUSH
9161: LD_INT 0
9163: PPUSH
9164: LD_INT 2
9166: PPUSH
9167: CALL_OW 12
9171: PUSH
9172: LD_LOC 18
9176: PLUS
9177: PUSH
9178: LD_INT 0
9180: PPUSH
9181: LD_INT 2
9183: PPUSH
9184: CALL_OW 12
9188: PUSH
9189: LD_LOC 18
9193: PLUS
9194: PUSH
9195: LD_INT 0
9197: PPUSH
9198: LD_INT 2
9200: PPUSH
9201: CALL_OW 12
9205: PUSH
9206: LD_LOC 18
9210: PLUS
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
9218: LD_ADDR_OWVAR 29
9222: PUSH
9223: LD_INT 10
9225: PUSH
9226: LD_INT 12
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: ST_TO_ADDR
// hc_sex := sex_male ;
9233: LD_ADDR_OWVAR 27
9237: PUSH
9238: LD_INT 1
9240: ST_TO_ADDR
// hc_importance := 0 ;
9241: LD_ADDR_OWVAR 32
9245: PUSH
9246: LD_INT 0
9248: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
9249: LD_ADDR_OWVAR 35
9253: PUSH
9254: LD_INT 20
9256: NEG
9257: PPUSH
9258: LD_INT 20
9260: PPUSH
9261: CALL_OW 12
9265: ST_TO_ADDR
// end ; end_of_file
9266: LD_VAR 0 1
9270: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9271: LD_INT 0
9273: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9274: LD_VAR 0 1
9278: PPUSH
9279: CALL_OW 255
9283: PUSH
9284: LD_VAR 0 4
9288: EQUAL
9289: IFFALSE 9308
// begin SetAchievement ( ACH_RAD ) ;
9291: LD_STRING ACH_RAD
9293: PPUSH
9294: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9298: LD_STRING ACH_NL
9300: PPUSH
9301: LD_INT 1
9303: PPUSH
9304: CALL_OW 564
// end end ;
9308: LD_VAR 0 5
9312: RET
// export function SA_Win ( side ) ; begin
9313: LD_INT 0
9315: PPUSH
// case side of 1 :
9316: LD_VAR 0 1
9320: PUSH
9321: LD_INT 1
9323: DOUBLE
9324: EQUAL
9325: IFTRUE 9329
9327: GO 9342
9329: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9330: LD_STRING ACH_AH
9332: PPUSH
9333: LD_INT 1
9335: PPUSH
9336: CALL_OW 564
9340: GO 9505
9342: LD_INT 2
9344: DOUBLE
9345: EQUAL
9346: IFTRUE 9350
9348: GO 9363
9350: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9351: LD_STRING ACH_E
9353: PPUSH
9354: LD_INT 1
9356: PPUSH
9357: CALL_OW 564
9361: GO 9505
9363: LD_INT 3
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9384
9371: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9372: LD_STRING ACH_OOL
9374: PPUSH
9375: LD_INT 1
9377: PPUSH
9378: CALL_OW 564
9382: GO 9505
9384: LD_INT 1
9386: PUSH
9387: LD_INT 2
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: DOUBLE
9394: EQUAL
9395: IFTRUE 9399
9397: GO 9424
9399: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9400: LD_STRING ACH_AH
9402: PPUSH
9403: LD_REAL  5.00000000000000E-0001
9406: PPUSH
9407: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9411: LD_STRING ACH_E
9413: PPUSH
9414: LD_REAL  5.00000000000000E-0001
9417: PPUSH
9418: CALL_OW 564
// end ; [ 2 , 3 ] :
9422: GO 9505
9424: LD_INT 2
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: DOUBLE
9434: EQUAL
9435: IFTRUE 9439
9437: GO 9464
9439: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9440: LD_STRING ACH_OOL
9442: PPUSH
9443: LD_REAL  5.00000000000000E-0001
9446: PPUSH
9447: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9451: LD_STRING ACH_E
9453: PPUSH
9454: LD_REAL  5.00000000000000E-0001
9457: PPUSH
9458: CALL_OW 564
// end ; [ 3 , 1 ] :
9462: GO 9505
9464: LD_INT 3
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: DOUBLE
9474: EQUAL
9475: IFTRUE 9479
9477: GO 9504
9479: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9480: LD_STRING ACH_AH
9482: PPUSH
9483: LD_REAL  5.00000000000000E-0001
9486: PPUSH
9487: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9491: LD_STRING ACH_OOL
9493: PPUSH
9494: LD_REAL  5.00000000000000E-0001
9497: PPUSH
9498: CALL_OW 564
// end ; end ;
9502: GO 9505
9504: POP
// end ; end_of_file
9505: LD_VAR 0 2
9509: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9510: LD_INT 0
9512: PPUSH
9513: PPUSH
9514: PPUSH
// for side = 1 to 8 do
9515: LD_ADDR_VAR 0 2
9519: PUSH
9520: DOUBLE
9521: LD_INT 1
9523: DEC
9524: ST_TO_ADDR
9525: LD_INT 8
9527: PUSH
9528: FOR_TO
9529: IFFALSE 9650
// begin for i = 1 to 72 do
9531: LD_ADDR_VAR 0 3
9535: PUSH
9536: DOUBLE
9537: LD_INT 1
9539: DEC
9540: ST_TO_ADDR
9541: LD_INT 72
9543: PUSH
9544: FOR_TO
9545: IFFALSE 9576
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9547: LD_VAR 0 3
9551: PPUSH
9552: LD_VAR 0 2
9556: PPUSH
9557: LD_INT 0
9559: PPUSH
9560: LD_VAR 0 3
9564: PPUSH
9565: CALL_OW 565
9569: PPUSH
9570: CALL_OW 322
9574: GO 9544
9576: POP
9577: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9578: LD_INT 73
9580: PPUSH
9581: LD_VAR 0 2
9585: PPUSH
9586: LD_INT 0
9588: PPUSH
9589: LD_INT 25
9591: PPUSH
9592: CALL_OW 565
9596: PPUSH
9597: CALL_OW 322
// for i = 0 to 40 do
9601: LD_ADDR_VAR 0 3
9605: PUSH
9606: DOUBLE
9607: LD_INT 0
9609: DEC
9610: ST_TO_ADDR
9611: LD_INT 40
9613: PUSH
9614: FOR_TO
9615: IFFALSE 9646
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9617: LD_VAR 0 3
9621: PPUSH
9622: LD_VAR 0 2
9626: PPUSH
9627: LD_INT 1
9629: PPUSH
9630: LD_VAR 0 3
9634: PPUSH
9635: CALL_OW 565
9639: PPUSH
9640: CALL_OW 324
9644: GO 9614
9646: POP
9647: POP
// end ;
9648: GO 9528
9650: POP
9651: POP
// end ;
9652: LD_VAR 0 1
9656: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9657: LD_INT 0
9659: PPUSH
9660: PPUSH
9661: PPUSH
// for side = 1 to 8 do
9662: LD_ADDR_VAR 0 3
9666: PUSH
9667: DOUBLE
9668: LD_INT 1
9670: DEC
9671: ST_TO_ADDR
9672: LD_INT 8
9674: PUSH
9675: FOR_TO
9676: IFFALSE 13672
// begin for i = 1 to 73 do
9678: LD_ADDR_VAR 0 4
9682: PUSH
9683: DOUBLE
9684: LD_INT 1
9686: DEC
9687: ST_TO_ADDR
9688: LD_INT 73
9690: PUSH
9691: FOR_TO
9692: IFFALSE 9713
// SetTech ( i , side , state_disabled ) ;
9694: LD_VAR 0 4
9698: PPUSH
9699: LD_VAR 0 3
9703: PPUSH
9704: LD_INT 0
9706: PPUSH
9707: CALL_OW 322
9711: GO 9691
9713: POP
9714: POP
// for i = 0 to 40 do
9715: LD_ADDR_VAR 0 4
9719: PUSH
9720: DOUBLE
9721: LD_INT 0
9723: DEC
9724: ST_TO_ADDR
9725: LD_INT 40
9727: PUSH
9728: FOR_TO
9729: IFFALSE 9750
// SetRestrict ( i , side , false ) ;
9731: LD_VAR 0 4
9735: PPUSH
9736: LD_VAR 0 3
9740: PPUSH
9741: LD_INT 0
9743: PPUSH
9744: CALL_OW 324
9748: GO 9728
9750: POP
9751: POP
// case level of 1 :
9752: LD_VAR 0 1
9756: PUSH
9757: LD_INT 1
9759: DOUBLE
9760: EQUAL
9761: IFTRUE 9765
9763: GO 9918
9765: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9766: LD_INT 35
9768: PPUSH
9769: LD_VAR 0 3
9773: PPUSH
9774: LD_INT 1
9776: PPUSH
9777: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9781: LD_INT 45
9783: PPUSH
9784: LD_VAR 0 3
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9796: LD_INT 46
9798: PPUSH
9799: LD_VAR 0 3
9803: PPUSH
9804: LD_INT 1
9806: PPUSH
9807: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9811: LD_INT 47
9813: PPUSH
9814: LD_VAR 0 3
9818: PPUSH
9819: LD_INT 1
9821: PPUSH
9822: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9826: LD_INT 0
9828: PPUSH
9829: LD_VAR 0 3
9833: PPUSH
9834: LD_INT 1
9836: PPUSH
9837: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9841: LD_INT 2
9843: PPUSH
9844: LD_VAR 0 3
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9856: LD_INT 4
9858: PPUSH
9859: LD_VAR 0 3
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9871: LD_INT 6
9873: PPUSH
9874: LD_VAR 0 3
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9886: LD_INT 29
9888: PPUSH
9889: LD_VAR 0 3
9893: PPUSH
9894: LD_INT 1
9896: PPUSH
9897: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9901: LD_INT 31
9903: PPUSH
9904: LD_VAR 0 3
9908: PPUSH
9909: LD_INT 1
9911: PPUSH
9912: CALL_OW 324
// end ; 2 :
9916: GO 13670
9918: LD_INT 2
9920: DOUBLE
9921: EQUAL
9922: IFTRUE 9926
9924: GO 10124
9926: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9927: LD_INT 35
9929: PPUSH
9930: LD_VAR 0 3
9934: PPUSH
9935: LD_INT 1
9937: PPUSH
9938: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9942: LD_INT 45
9944: PPUSH
9945: LD_VAR 0 3
9949: PPUSH
9950: LD_INT 1
9952: PPUSH
9953: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9957: LD_INT 46
9959: PPUSH
9960: LD_VAR 0 3
9964: PPUSH
9965: LD_INT 1
9967: PPUSH
9968: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9972: LD_INT 47
9974: PPUSH
9975: LD_VAR 0 3
9979: PPUSH
9980: LD_INT 1
9982: PPUSH
9983: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9987: LD_INT 1
9989: PPUSH
9990: LD_VAR 0 3
9994: PPUSH
9995: LD_INT 1
9997: PPUSH
9998: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10002: LD_INT 2
10004: PPUSH
10005: LD_VAR 0 3
10009: PPUSH
10010: LD_INT 1
10012: PPUSH
10013: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10017: LD_INT 11
10019: PPUSH
10020: LD_VAR 0 3
10024: PPUSH
10025: LD_INT 1
10027: PPUSH
10028: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10032: LD_INT 0
10034: PPUSH
10035: LD_VAR 0 3
10039: PPUSH
10040: LD_INT 1
10042: PPUSH
10043: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10047: LD_INT 2
10049: PPUSH
10050: LD_VAR 0 3
10054: PPUSH
10055: LD_INT 1
10057: PPUSH
10058: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10062: LD_INT 4
10064: PPUSH
10065: LD_VAR 0 3
10069: PPUSH
10070: LD_INT 1
10072: PPUSH
10073: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10077: LD_INT 6
10079: PPUSH
10080: LD_VAR 0 3
10084: PPUSH
10085: LD_INT 1
10087: PPUSH
10088: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10092: LD_INT 29
10094: PPUSH
10095: LD_VAR 0 3
10099: PPUSH
10100: LD_INT 1
10102: PPUSH
10103: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10107: LD_INT 31
10109: PPUSH
10110: LD_VAR 0 3
10114: PPUSH
10115: LD_INT 1
10117: PPUSH
10118: CALL_OW 324
// end ; 3 :
10122: GO 13670
10124: LD_INT 3
10126: DOUBLE
10127: EQUAL
10128: IFTRUE 10132
10130: GO 10585
10132: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10133: LD_INT 35
10135: PPUSH
10136: LD_VAR 0 3
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10148: LD_INT 45
10150: PPUSH
10151: LD_VAR 0 3
10155: PPUSH
10156: LD_INT 1
10158: PPUSH
10159: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10163: LD_INT 46
10165: PPUSH
10166: LD_VAR 0 3
10170: PPUSH
10171: LD_INT 1
10173: PPUSH
10174: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10178: LD_INT 47
10180: PPUSH
10181: LD_VAR 0 3
10185: PPUSH
10186: LD_INT 1
10188: PPUSH
10189: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10193: LD_INT 1
10195: PPUSH
10196: LD_VAR 0 3
10200: PPUSH
10201: LD_INT 1
10203: PPUSH
10204: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10208: LD_INT 2
10210: PPUSH
10211: LD_VAR 0 3
10215: PPUSH
10216: LD_INT 1
10218: PPUSH
10219: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10223: LD_INT 11
10225: PPUSH
10226: LD_VAR 0 3
10230: PPUSH
10231: LD_INT 1
10233: PPUSH
10234: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10238: LD_INT 48
10240: PPUSH
10241: LD_VAR 0 3
10245: PPUSH
10246: LD_INT 1
10248: PPUSH
10249: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10253: LD_INT 69
10255: PPUSH
10256: LD_VAR 0 3
10260: PPUSH
10261: LD_INT 1
10263: PPUSH
10264: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10268: LD_INT 39
10270: PPUSH
10271: LD_VAR 0 3
10275: PPUSH
10276: LD_INT 1
10278: PPUSH
10279: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10283: LD_INT 43
10285: PPUSH
10286: LD_VAR 0 3
10290: PPUSH
10291: LD_INT 1
10293: PPUSH
10294: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10298: LD_INT 51
10300: PPUSH
10301: LD_VAR 0 3
10305: PPUSH
10306: LD_INT 1
10308: PPUSH
10309: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10313: LD_INT 6
10315: PPUSH
10316: LD_VAR 0 3
10320: PPUSH
10321: LD_INT 1
10323: PPUSH
10324: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10328: LD_INT 0
10330: PPUSH
10331: LD_VAR 0 3
10335: PPUSH
10336: LD_INT 1
10338: PPUSH
10339: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10343: LD_INT 2
10345: PPUSH
10346: LD_VAR 0 3
10350: PPUSH
10351: LD_INT 1
10353: PPUSH
10354: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10358: LD_INT 3
10360: PPUSH
10361: LD_VAR 0 3
10365: PPUSH
10366: LD_INT 1
10368: PPUSH
10369: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10373: LD_INT 4
10375: PPUSH
10376: LD_VAR 0 3
10380: PPUSH
10381: LD_INT 1
10383: PPUSH
10384: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10388: LD_INT 6
10390: PPUSH
10391: LD_VAR 0 3
10395: PPUSH
10396: LD_INT 1
10398: PPUSH
10399: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10403: LD_INT 7
10405: PPUSH
10406: LD_VAR 0 3
10410: PPUSH
10411: LD_INT 1
10413: PPUSH
10414: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10418: LD_INT 8
10420: PPUSH
10421: LD_VAR 0 3
10425: PPUSH
10426: LD_INT 1
10428: PPUSH
10429: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10433: LD_INT 10
10435: PPUSH
10436: LD_VAR 0 3
10440: PPUSH
10441: LD_INT 1
10443: PPUSH
10444: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10448: LD_INT 15
10450: PPUSH
10451: LD_VAR 0 3
10455: PPUSH
10456: LD_INT 1
10458: PPUSH
10459: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10463: LD_INT 16
10465: PPUSH
10466: LD_VAR 0 3
10470: PPUSH
10471: LD_INT 1
10473: PPUSH
10474: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10478: LD_INT 17
10480: PPUSH
10481: LD_VAR 0 3
10485: PPUSH
10486: LD_INT 1
10488: PPUSH
10489: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10493: LD_INT 20
10495: PPUSH
10496: LD_VAR 0 3
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10508: LD_INT 26
10510: PPUSH
10511: LD_VAR 0 3
10515: PPUSH
10516: LD_INT 1
10518: PPUSH
10519: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10523: LD_INT 27
10525: PPUSH
10526: LD_VAR 0 3
10530: PPUSH
10531: LD_INT 1
10533: PPUSH
10534: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10538: LD_INT 29
10540: PPUSH
10541: LD_VAR 0 3
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10553: LD_INT 31
10555: PPUSH
10556: LD_VAR 0 3
10560: PPUSH
10561: LD_INT 1
10563: PPUSH
10564: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10568: LD_INT 32
10570: PPUSH
10571: LD_VAR 0 3
10575: PPUSH
10576: LD_INT 1
10578: PPUSH
10579: CALL_OW 324
// end ; 4 :
10583: GO 13670
10585: LD_INT 4
10587: DOUBLE
10588: EQUAL
10589: IFTRUE 10593
10591: GO 11541
10593: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10594: LD_INT 35
10596: PPUSH
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 1
10604: PPUSH
10605: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10609: LD_INT 45
10611: PPUSH
10612: LD_VAR 0 3
10616: PPUSH
10617: LD_INT 1
10619: PPUSH
10620: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10624: LD_INT 46
10626: PPUSH
10627: LD_VAR 0 3
10631: PPUSH
10632: LD_INT 1
10634: PPUSH
10635: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10639: LD_INT 47
10641: PPUSH
10642: LD_VAR 0 3
10646: PPUSH
10647: LD_INT 1
10649: PPUSH
10650: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10654: LD_INT 1
10656: PPUSH
10657: LD_VAR 0 3
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10669: LD_INT 2
10671: PPUSH
10672: LD_VAR 0 3
10676: PPUSH
10677: LD_INT 1
10679: PPUSH
10680: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10684: LD_INT 11
10686: PPUSH
10687: LD_VAR 0 3
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10699: LD_INT 20
10701: PPUSH
10702: LD_VAR 0 3
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10714: LD_INT 48
10716: PPUSH
10717: LD_VAR 0 3
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10729: LD_INT 49
10731: PPUSH
10732: LD_VAR 0 3
10736: PPUSH
10737: LD_INT 1
10739: PPUSH
10740: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10744: LD_INT 69
10746: PPUSH
10747: LD_VAR 0 3
10751: PPUSH
10752: LD_INT 1
10754: PPUSH
10755: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10759: LD_INT 39
10761: PPUSH
10762: LD_VAR 0 3
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10774: LD_INT 34
10776: PPUSH
10777: LD_VAR 0 3
10781: PPUSH
10782: LD_INT 1
10784: PPUSH
10785: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10789: LD_INT 42
10791: PPUSH
10792: LD_VAR 0 3
10796: PPUSH
10797: LD_INT 1
10799: PPUSH
10800: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10804: LD_INT 44
10806: PPUSH
10807: LD_VAR 0 3
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10819: LD_INT 41
10821: PPUSH
10822: LD_VAR 0 3
10826: PPUSH
10827: LD_INT 1
10829: PPUSH
10830: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10834: LD_INT 43
10836: PPUSH
10837: LD_VAR 0 3
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10849: LD_INT 70
10851: PPUSH
10852: LD_VAR 0 3
10856: PPUSH
10857: LD_INT 1
10859: PPUSH
10860: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10864: LD_INT 51
10866: PPUSH
10867: LD_VAR 0 3
10871: PPUSH
10872: LD_INT 1
10874: PPUSH
10875: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10879: LD_INT 52
10881: PPUSH
10882: LD_VAR 0 3
10886: PPUSH
10887: LD_INT 1
10889: PPUSH
10890: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10894: LD_INT 6
10896: PPUSH
10897: LD_VAR 0 3
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10909: LD_INT 15
10911: PPUSH
10912: LD_VAR 0 3
10916: PPUSH
10917: LD_INT 1
10919: PPUSH
10920: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10924: LD_INT 7
10926: PPUSH
10927: LD_VAR 0 3
10931: PPUSH
10932: LD_INT 1
10934: PPUSH
10935: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10939: LD_INT 12
10941: PPUSH
10942: LD_VAR 0 3
10946: PPUSH
10947: LD_INT 1
10949: PPUSH
10950: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10954: LD_INT 18
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: LD_INT 1
10964: PPUSH
10965: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10969: LD_INT 60
10971: PPUSH
10972: LD_VAR 0 3
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10984: LD_INT 9
10986: PPUSH
10987: LD_VAR 0 3
10991: PPUSH
10992: LD_INT 1
10994: PPUSH
10995: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10999: LD_INT 30
11001: PPUSH
11002: LD_VAR 0 3
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11014: LD_INT 37
11016: PPUSH
11017: LD_VAR 0 3
11021: PPUSH
11022: LD_INT 1
11024: PPUSH
11025: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11029: LD_INT 5
11031: PPUSH
11032: LD_VAR 0 3
11036: PPUSH
11037: LD_INT 1
11039: PPUSH
11040: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11044: LD_INT 66
11046: PPUSH
11047: LD_VAR 0 3
11051: PPUSH
11052: LD_INT 1
11054: PPUSH
11055: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11059: LD_INT 21
11061: PPUSH
11062: LD_VAR 0 3
11066: PPUSH
11067: LD_INT 1
11069: PPUSH
11070: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11074: LD_INT 22
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: LD_INT 1
11084: PPUSH
11085: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11089: LD_INT 54
11091: PPUSH
11092: LD_VAR 0 3
11096: PPUSH
11097: LD_INT 1
11099: PPUSH
11100: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11104: LD_INT 0
11106: PPUSH
11107: LD_VAR 0 3
11111: PPUSH
11112: LD_INT 1
11114: PPUSH
11115: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11119: LD_INT 1
11121: PPUSH
11122: LD_VAR 0 3
11126: PPUSH
11127: LD_INT 1
11129: PPUSH
11130: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11134: LD_INT 2
11136: PPUSH
11137: LD_VAR 0 3
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11149: LD_INT 3
11151: PPUSH
11152: LD_VAR 0 3
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11164: LD_INT 4
11166: PPUSH
11167: LD_VAR 0 3
11171: PPUSH
11172: LD_INT 1
11174: PPUSH
11175: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11179: LD_INT 5
11181: PPUSH
11182: LD_VAR 0 3
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11194: LD_INT 6
11196: PPUSH
11197: LD_VAR 0 3
11201: PPUSH
11202: LD_INT 1
11204: PPUSH
11205: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11209: LD_INT 7
11211: PPUSH
11212: LD_VAR 0 3
11216: PPUSH
11217: LD_INT 1
11219: PPUSH
11220: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11224: LD_INT 8
11226: PPUSH
11227: LD_VAR 0 3
11231: PPUSH
11232: LD_INT 1
11234: PPUSH
11235: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11239: LD_INT 10
11241: PPUSH
11242: LD_VAR 0 3
11246: PPUSH
11247: LD_INT 1
11249: PPUSH
11250: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11254: LD_INT 11
11256: PPUSH
11257: LD_VAR 0 3
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11269: LD_INT 12
11271: PPUSH
11272: LD_VAR 0 3
11276: PPUSH
11277: LD_INT 1
11279: PPUSH
11280: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11284: LD_INT 13
11286: PPUSH
11287: LD_VAR 0 3
11291: PPUSH
11292: LD_INT 1
11294: PPUSH
11295: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11299: LD_INT 14
11301: PPUSH
11302: LD_VAR 0 3
11306: PPUSH
11307: LD_INT 1
11309: PPUSH
11310: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11314: LD_INT 15
11316: PPUSH
11317: LD_VAR 0 3
11321: PPUSH
11322: LD_INT 1
11324: PPUSH
11325: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11329: LD_INT 16
11331: PPUSH
11332: LD_VAR 0 3
11336: PPUSH
11337: LD_INT 1
11339: PPUSH
11340: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11344: LD_INT 17
11346: PPUSH
11347: LD_VAR 0 3
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11359: LD_INT 19
11361: PPUSH
11362: LD_VAR 0 3
11366: PPUSH
11367: LD_INT 1
11369: PPUSH
11370: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11374: LD_INT 20
11376: PPUSH
11377: LD_VAR 0 3
11381: PPUSH
11382: LD_INT 1
11384: PPUSH
11385: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11389: LD_INT 21
11391: PPUSH
11392: LD_VAR 0 3
11396: PPUSH
11397: LD_INT 1
11399: PPUSH
11400: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11404: LD_INT 23
11406: PPUSH
11407: LD_VAR 0 3
11411: PPUSH
11412: LD_INT 1
11414: PPUSH
11415: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11419: LD_INT 26
11421: PPUSH
11422: LD_VAR 0 3
11426: PPUSH
11427: LD_INT 1
11429: PPUSH
11430: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11434: LD_INT 27
11436: PPUSH
11437: LD_VAR 0 3
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11449: LD_INT 28
11451: PPUSH
11452: LD_VAR 0 3
11456: PPUSH
11457: LD_INT 1
11459: PPUSH
11460: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11464: LD_INT 29
11466: PPUSH
11467: LD_VAR 0 3
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11479: LD_INT 30
11481: PPUSH
11482: LD_VAR 0 3
11486: PPUSH
11487: LD_INT 1
11489: PPUSH
11490: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11494: LD_INT 31
11496: PPUSH
11497: LD_VAR 0 3
11501: PPUSH
11502: LD_INT 1
11504: PPUSH
11505: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11509: LD_INT 32
11511: PPUSH
11512: LD_VAR 0 3
11516: PPUSH
11517: LD_INT 1
11519: PPUSH
11520: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11524: LD_INT 36
11526: PPUSH
11527: LD_VAR 0 3
11531: PPUSH
11532: LD_INT 1
11534: PPUSH
11535: CALL_OW 324
// end ; 5 :
11539: GO 13670
11541: LD_INT 5
11543: DOUBLE
11544: EQUAL
11545: IFTRUE 11549
11547: GO 12662
11549: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11550: LD_INT 35
11552: PPUSH
11553: LD_VAR 0 3
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11565: LD_INT 45
11567: PPUSH
11568: LD_VAR 0 3
11572: PPUSH
11573: LD_INT 1
11575: PPUSH
11576: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11580: LD_INT 46
11582: PPUSH
11583: LD_VAR 0 3
11587: PPUSH
11588: LD_INT 1
11590: PPUSH
11591: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11595: LD_INT 47
11597: PPUSH
11598: LD_VAR 0 3
11602: PPUSH
11603: LD_INT 1
11605: PPUSH
11606: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11610: LD_INT 1
11612: PPUSH
11613: LD_VAR 0 3
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11625: LD_INT 2
11627: PPUSH
11628: LD_VAR 0 3
11632: PPUSH
11633: LD_INT 1
11635: PPUSH
11636: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11640: LD_INT 11
11642: PPUSH
11643: LD_VAR 0 3
11647: PPUSH
11648: LD_INT 1
11650: PPUSH
11651: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11655: LD_INT 20
11657: PPUSH
11658: LD_VAR 0 3
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11670: LD_INT 48
11672: PPUSH
11673: LD_VAR 0 3
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11685: LD_INT 49
11687: PPUSH
11688: LD_VAR 0 3
11692: PPUSH
11693: LD_INT 1
11695: PPUSH
11696: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11700: LD_INT 69
11702: PPUSH
11703: LD_VAR 0 3
11707: PPUSH
11708: LD_INT 1
11710: PPUSH
11711: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11715: LD_INT 39
11717: PPUSH
11718: LD_VAR 0 3
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11730: LD_INT 34
11732: PPUSH
11733: LD_VAR 0 3
11737: PPUSH
11738: LD_INT 1
11740: PPUSH
11741: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11745: LD_INT 42
11747: PPUSH
11748: LD_VAR 0 3
11752: PPUSH
11753: LD_INT 1
11755: PPUSH
11756: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11760: LD_INT 44
11762: PPUSH
11763: LD_VAR 0 3
11767: PPUSH
11768: LD_INT 1
11770: PPUSH
11771: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11775: LD_INT 41
11777: PPUSH
11778: LD_VAR 0 3
11782: PPUSH
11783: LD_INT 1
11785: PPUSH
11786: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11790: LD_INT 40
11792: PPUSH
11793: LD_VAR 0 3
11797: PPUSH
11798: LD_INT 1
11800: PPUSH
11801: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11805: LD_INT 43
11807: PPUSH
11808: LD_VAR 0 3
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11820: LD_INT 70
11822: PPUSH
11823: LD_VAR 0 3
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11835: LD_INT 51
11837: PPUSH
11838: LD_VAR 0 3
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11850: LD_INT 52
11852: PPUSH
11853: LD_VAR 0 3
11857: PPUSH
11858: LD_INT 1
11860: PPUSH
11861: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11865: LD_INT 6
11867: PPUSH
11868: LD_VAR 0 3
11872: PPUSH
11873: LD_INT 1
11875: PPUSH
11876: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11880: LD_INT 15
11882: PPUSH
11883: LD_VAR 0 3
11887: PPUSH
11888: LD_INT 1
11890: PPUSH
11891: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11895: LD_INT 7
11897: PPUSH
11898: LD_VAR 0 3
11902: PPUSH
11903: LD_INT 1
11905: PPUSH
11906: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11910: LD_INT 12
11912: PPUSH
11913: LD_VAR 0 3
11917: PPUSH
11918: LD_INT 1
11920: PPUSH
11921: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11925: LD_INT 17
11927: PPUSH
11928: LD_VAR 0 3
11932: PPUSH
11933: LD_INT 1
11935: PPUSH
11936: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11940: LD_INT 18
11942: PPUSH
11943: LD_VAR 0 3
11947: PPUSH
11948: LD_INT 1
11950: PPUSH
11951: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11955: LD_INT 60
11957: PPUSH
11958: LD_VAR 0 3
11962: PPUSH
11963: LD_INT 1
11965: PPUSH
11966: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11970: LD_INT 32
11972: PPUSH
11973: LD_VAR 0 3
11977: PPUSH
11978: LD_INT 1
11980: PPUSH
11981: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11985: LD_INT 9
11987: PPUSH
11988: LD_VAR 0 3
11992: PPUSH
11993: LD_INT 1
11995: PPUSH
11996: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12000: LD_INT 57
12002: PPUSH
12003: LD_VAR 0 3
12007: PPUSH
12008: LD_INT 1
12010: PPUSH
12011: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12015: LD_INT 30
12017: PPUSH
12018: LD_VAR 0 3
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12030: LD_INT 37
12032: PPUSH
12033: LD_VAR 0 3
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12045: LD_INT 63
12047: PPUSH
12048: LD_VAR 0 3
12052: PPUSH
12053: LD_INT 1
12055: PPUSH
12056: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12060: LD_INT 3
12062: PPUSH
12063: LD_VAR 0 3
12067: PPUSH
12068: LD_INT 1
12070: PPUSH
12071: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12075: LD_INT 4
12077: PPUSH
12078: LD_VAR 0 3
12082: PPUSH
12083: LD_INT 1
12085: PPUSH
12086: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12090: LD_INT 5
12092: PPUSH
12093: LD_VAR 0 3
12097: PPUSH
12098: LD_INT 1
12100: PPUSH
12101: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12105: LD_INT 66
12107: PPUSH
12108: LD_VAR 0 3
12112: PPUSH
12113: LD_INT 1
12115: PPUSH
12116: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12120: LD_INT 21
12122: PPUSH
12123: LD_VAR 0 3
12127: PPUSH
12128: LD_INT 1
12130: PPUSH
12131: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12135: LD_INT 22
12137: PPUSH
12138: LD_VAR 0 3
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12150: LD_INT 19
12152: PPUSH
12153: LD_VAR 0 3
12157: PPUSH
12158: LD_INT 1
12160: PPUSH
12161: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12165: LD_INT 54
12167: PPUSH
12168: LD_VAR 0 3
12172: PPUSH
12173: LD_INT 1
12175: PPUSH
12176: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12180: LD_INT 55
12182: PPUSH
12183: LD_VAR 0 3
12187: PPUSH
12188: LD_INT 1
12190: PPUSH
12191: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12195: LD_INT 0
12197: PPUSH
12198: LD_VAR 0 3
12202: PPUSH
12203: LD_INT 1
12205: PPUSH
12206: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12210: LD_INT 1
12212: PPUSH
12213: LD_VAR 0 3
12217: PPUSH
12218: LD_INT 1
12220: PPUSH
12221: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12225: LD_INT 2
12227: PPUSH
12228: LD_VAR 0 3
12232: PPUSH
12233: LD_INT 1
12235: PPUSH
12236: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12240: LD_INT 3
12242: PPUSH
12243: LD_VAR 0 3
12247: PPUSH
12248: LD_INT 1
12250: PPUSH
12251: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12255: LD_INT 4
12257: PPUSH
12258: LD_VAR 0 3
12262: PPUSH
12263: LD_INT 1
12265: PPUSH
12266: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12270: LD_INT 5
12272: PPUSH
12273: LD_VAR 0 3
12277: PPUSH
12278: LD_INT 1
12280: PPUSH
12281: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12285: LD_INT 6
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: LD_INT 1
12295: PPUSH
12296: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12300: LD_INT 7
12302: PPUSH
12303: LD_VAR 0 3
12307: PPUSH
12308: LD_INT 1
12310: PPUSH
12311: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12315: LD_INT 8
12317: PPUSH
12318: LD_VAR 0 3
12322: PPUSH
12323: LD_INT 1
12325: PPUSH
12326: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12330: LD_INT 10
12332: PPUSH
12333: LD_VAR 0 3
12337: PPUSH
12338: LD_INT 1
12340: PPUSH
12341: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12345: LD_INT 11
12347: PPUSH
12348: LD_VAR 0 3
12352: PPUSH
12353: LD_INT 1
12355: PPUSH
12356: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12360: LD_INT 12
12362: PPUSH
12363: LD_VAR 0 3
12367: PPUSH
12368: LD_INT 1
12370: PPUSH
12371: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12375: LD_INT 13
12377: PPUSH
12378: LD_VAR 0 3
12382: PPUSH
12383: LD_INT 1
12385: PPUSH
12386: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12390: LD_INT 14
12392: PPUSH
12393: LD_VAR 0 3
12397: PPUSH
12398: LD_INT 1
12400: PPUSH
12401: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12405: LD_INT 15
12407: PPUSH
12408: LD_VAR 0 3
12412: PPUSH
12413: LD_INT 1
12415: PPUSH
12416: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12420: LD_INT 16
12422: PPUSH
12423: LD_VAR 0 3
12427: PPUSH
12428: LD_INT 1
12430: PPUSH
12431: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12435: LD_INT 17
12437: PPUSH
12438: LD_VAR 0 3
12442: PPUSH
12443: LD_INT 1
12445: PPUSH
12446: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12450: LD_INT 18
12452: PPUSH
12453: LD_VAR 0 3
12457: PPUSH
12458: LD_INT 1
12460: PPUSH
12461: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12465: LD_INT 19
12467: PPUSH
12468: LD_VAR 0 3
12472: PPUSH
12473: LD_INT 1
12475: PPUSH
12476: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12480: LD_INT 20
12482: PPUSH
12483: LD_VAR 0 3
12487: PPUSH
12488: LD_INT 1
12490: PPUSH
12491: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12495: LD_INT 21
12497: PPUSH
12498: LD_VAR 0 3
12502: PPUSH
12503: LD_INT 1
12505: PPUSH
12506: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12510: LD_INT 23
12512: PPUSH
12513: LD_VAR 0 3
12517: PPUSH
12518: LD_INT 1
12520: PPUSH
12521: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12525: LD_INT 26
12527: PPUSH
12528: LD_VAR 0 3
12532: PPUSH
12533: LD_INT 1
12535: PPUSH
12536: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12540: LD_INT 27
12542: PPUSH
12543: LD_VAR 0 3
12547: PPUSH
12548: LD_INT 1
12550: PPUSH
12551: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12555: LD_INT 28
12557: PPUSH
12558: LD_VAR 0 3
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12570: LD_INT 29
12572: PPUSH
12573: LD_VAR 0 3
12577: PPUSH
12578: LD_INT 1
12580: PPUSH
12581: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12585: LD_INT 30
12587: PPUSH
12588: LD_VAR 0 3
12592: PPUSH
12593: LD_INT 1
12595: PPUSH
12596: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12600: LD_INT 31
12602: PPUSH
12603: LD_VAR 0 3
12607: PPUSH
12608: LD_INT 1
12610: PPUSH
12611: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12615: LD_INT 32
12617: PPUSH
12618: LD_VAR 0 3
12622: PPUSH
12623: LD_INT 1
12625: PPUSH
12626: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12630: LD_INT 33
12632: PPUSH
12633: LD_VAR 0 3
12637: PPUSH
12638: LD_INT 1
12640: PPUSH
12641: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12645: LD_INT 36
12647: PPUSH
12648: LD_VAR 0 3
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 324
// end ; 6 :
12660: GO 13670
12662: LD_INT 6
12664: DOUBLE
12665: EQUAL
12666: IFTRUE 12670
12668: GO 13595
12670: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12671: LD_INT 35
12673: PPUSH
12674: LD_VAR 0 3
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12686: LD_INT 45
12688: PPUSH
12689: LD_VAR 0 3
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12701: LD_INT 46
12703: PPUSH
12704: LD_VAR 0 3
12708: PPUSH
12709: LD_INT 1
12711: PPUSH
12712: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12716: LD_INT 47
12718: PPUSH
12719: LD_VAR 0 3
12723: PPUSH
12724: LD_INT 1
12726: PPUSH
12727: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12731: LD_INT 1
12733: PPUSH
12734: LD_VAR 0 3
12738: PPUSH
12739: LD_INT 1
12741: PPUSH
12742: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12746: LD_INT 2
12748: PPUSH
12749: LD_VAR 0 3
12753: PPUSH
12754: LD_INT 1
12756: PPUSH
12757: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12761: LD_INT 11
12763: PPUSH
12764: LD_VAR 0 3
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12776: LD_INT 20
12778: PPUSH
12779: LD_VAR 0 3
12783: PPUSH
12784: LD_INT 1
12786: PPUSH
12787: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12791: LD_INT 48
12793: PPUSH
12794: LD_VAR 0 3
12798: PPUSH
12799: LD_INT 1
12801: PPUSH
12802: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12806: LD_INT 49
12808: PPUSH
12809: LD_VAR 0 3
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12821: LD_INT 50
12823: PPUSH
12824: LD_VAR 0 3
12828: PPUSH
12829: LD_INT 1
12831: PPUSH
12832: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12836: LD_INT 69
12838: PPUSH
12839: LD_VAR 0 3
12843: PPUSH
12844: LD_INT 1
12846: PPUSH
12847: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12851: LD_INT 39
12853: PPUSH
12854: LD_VAR 0 3
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12866: LD_INT 34
12868: PPUSH
12869: LD_VAR 0 3
12873: PPUSH
12874: LD_INT 1
12876: PPUSH
12877: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12881: LD_INT 42
12883: PPUSH
12884: LD_VAR 0 3
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12896: LD_INT 44
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12911: LD_INT 41
12913: PPUSH
12914: LD_VAR 0 3
12918: PPUSH
12919: LD_INT 1
12921: PPUSH
12922: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12926: LD_INT 13
12928: PPUSH
12929: LD_VAR 0 3
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12941: LD_INT 40
12943: PPUSH
12944: LD_VAR 0 3
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12956: LD_INT 43
12958: PPUSH
12959: LD_VAR 0 3
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12971: LD_INT 70
12973: PPUSH
12974: LD_VAR 0 3
12978: PPUSH
12979: LD_INT 1
12981: PPUSH
12982: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12986: LD_INT 23
12988: PPUSH
12989: LD_VAR 0 3
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13001: LD_INT 51
13003: PPUSH
13004: LD_VAR 0 3
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13016: LD_INT 52
13018: PPUSH
13019: LD_VAR 0 3
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13031: LD_INT 6
13033: PPUSH
13034: LD_VAR 0 3
13038: PPUSH
13039: LD_INT 1
13041: PPUSH
13042: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13046: LD_INT 15
13048: PPUSH
13049: LD_VAR 0 3
13053: PPUSH
13054: LD_INT 1
13056: PPUSH
13057: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13061: LD_INT 7
13063: PPUSH
13064: LD_VAR 0 3
13068: PPUSH
13069: LD_INT 1
13071: PPUSH
13072: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13076: LD_INT 12
13078: PPUSH
13079: LD_VAR 0 3
13083: PPUSH
13084: LD_INT 1
13086: PPUSH
13087: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13091: LD_INT 10
13093: PPUSH
13094: LD_VAR 0 3
13098: PPUSH
13099: LD_INT 1
13101: PPUSH
13102: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13106: LD_INT 17
13108: PPUSH
13109: LD_VAR 0 3
13113: PPUSH
13114: LD_INT 1
13116: PPUSH
13117: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13121: LD_INT 18
13123: PPUSH
13124: LD_VAR 0 3
13128: PPUSH
13129: LD_INT 1
13131: PPUSH
13132: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13136: LD_INT 60
13138: PPUSH
13139: LD_VAR 0 3
13143: PPUSH
13144: LD_INT 1
13146: PPUSH
13147: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13151: LD_INT 61
13153: PPUSH
13154: LD_VAR 0 3
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13166: LD_INT 32
13168: PPUSH
13169: LD_VAR 0 3
13173: PPUSH
13174: LD_INT 1
13176: PPUSH
13177: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13181: LD_INT 27
13183: PPUSH
13184: LD_VAR 0 3
13188: PPUSH
13189: LD_INT 1
13191: PPUSH
13192: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13196: LD_INT 36
13198: PPUSH
13199: LD_VAR 0 3
13203: PPUSH
13204: LD_INT 1
13206: PPUSH
13207: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13211: LD_INT 33
13213: PPUSH
13214: LD_VAR 0 3
13218: PPUSH
13219: LD_INT 1
13221: PPUSH
13222: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13226: LD_INT 9
13228: PPUSH
13229: LD_VAR 0 3
13233: PPUSH
13234: LD_INT 1
13236: PPUSH
13237: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13241: LD_INT 38
13243: PPUSH
13244: LD_VAR 0 3
13248: PPUSH
13249: LD_INT 1
13251: PPUSH
13252: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13256: LD_INT 57
13258: PPUSH
13259: LD_VAR 0 3
13263: PPUSH
13264: LD_INT 1
13266: PPUSH
13267: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13271: LD_INT 58
13273: PPUSH
13274: LD_VAR 0 3
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13286: LD_INT 28
13288: PPUSH
13289: LD_VAR 0 3
13293: PPUSH
13294: LD_INT 1
13296: PPUSH
13297: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13301: LD_INT 29
13303: PPUSH
13304: LD_VAR 0 3
13308: PPUSH
13309: LD_INT 1
13311: PPUSH
13312: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13316: LD_INT 30
13318: PPUSH
13319: LD_VAR 0 3
13323: PPUSH
13324: LD_INT 1
13326: PPUSH
13327: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13331: LD_INT 37
13333: PPUSH
13334: LD_VAR 0 3
13338: PPUSH
13339: LD_INT 1
13341: PPUSH
13342: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13346: LD_INT 63
13348: PPUSH
13349: LD_VAR 0 3
13353: PPUSH
13354: LD_INT 1
13356: PPUSH
13357: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13361: LD_INT 64
13363: PPUSH
13364: LD_VAR 0 3
13368: PPUSH
13369: LD_INT 1
13371: PPUSH
13372: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13376: LD_INT 3
13378: PPUSH
13379: LD_VAR 0 3
13383: PPUSH
13384: LD_INT 1
13386: PPUSH
13387: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13391: LD_INT 4
13393: PPUSH
13394: LD_VAR 0 3
13398: PPUSH
13399: LD_INT 1
13401: PPUSH
13402: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13406: LD_INT 5
13408: PPUSH
13409: LD_VAR 0 3
13413: PPUSH
13414: LD_INT 1
13416: PPUSH
13417: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13421: LD_INT 8
13423: PPUSH
13424: LD_VAR 0 3
13428: PPUSH
13429: LD_INT 1
13431: PPUSH
13432: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13436: LD_INT 66
13438: PPUSH
13439: LD_VAR 0 3
13443: PPUSH
13444: LD_INT 1
13446: PPUSH
13447: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13451: LD_INT 67
13453: PPUSH
13454: LD_VAR 0 3
13458: PPUSH
13459: LD_INT 1
13461: PPUSH
13462: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13466: LD_INT 21
13468: PPUSH
13469: LD_VAR 0 3
13473: PPUSH
13474: LD_INT 1
13476: PPUSH
13477: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13481: LD_INT 22
13483: PPUSH
13484: LD_VAR 0 3
13488: PPUSH
13489: LD_INT 1
13491: PPUSH
13492: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13496: LD_INT 19
13498: PPUSH
13499: LD_VAR 0 3
13503: PPUSH
13504: LD_INT 1
13506: PPUSH
13507: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13511: LD_INT 26
13513: PPUSH
13514: LD_VAR 0 3
13518: PPUSH
13519: LD_INT 1
13521: PPUSH
13522: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13526: LD_INT 54
13528: PPUSH
13529: LD_VAR 0 3
13533: PPUSH
13534: LD_INT 1
13536: PPUSH
13537: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13541: LD_INT 55
13543: PPUSH
13544: LD_VAR 0 3
13548: PPUSH
13549: LD_INT 1
13551: PPUSH
13552: CALL_OW 322
// for i = 0 to 39 do
13556: LD_ADDR_VAR 0 4
13560: PUSH
13561: DOUBLE
13562: LD_INT 0
13564: DEC
13565: ST_TO_ADDR
13566: LD_INT 39
13568: PUSH
13569: FOR_TO
13570: IFFALSE 13591
// SetRestrict ( i , side , true ) ;
13572: LD_VAR 0 4
13576: PPUSH
13577: LD_VAR 0 3
13581: PPUSH
13582: LD_INT 1
13584: PPUSH
13585: CALL_OW 324
13589: GO 13569
13591: POP
13592: POP
// end ; else
13593: GO 13670
13595: POP
// begin for i = 1 to 73 do
13596: LD_ADDR_VAR 0 4
13600: PUSH
13601: DOUBLE
13602: LD_INT 1
13604: DEC
13605: ST_TO_ADDR
13606: LD_INT 73
13608: PUSH
13609: FOR_TO
13610: IFFALSE 13631
// SetTech ( i , side , state_enabled ) ;
13612: LD_VAR 0 4
13616: PPUSH
13617: LD_VAR 0 3
13621: PPUSH
13622: LD_INT 1
13624: PPUSH
13625: CALL_OW 322
13629: GO 13609
13631: POP
13632: POP
// for i = 0 to 39 do
13633: LD_ADDR_VAR 0 4
13637: PUSH
13638: DOUBLE
13639: LD_INT 0
13641: DEC
13642: ST_TO_ADDR
13643: LD_INT 39
13645: PUSH
13646: FOR_TO
13647: IFFALSE 13668
// SetRestrict ( i , side , true ) ;
13649: LD_VAR 0 4
13653: PPUSH
13654: LD_VAR 0 3
13658: PPUSH
13659: LD_INT 1
13661: PPUSH
13662: CALL_OW 324
13666: GO 13646
13668: POP
13669: POP
// end ; end ; end ;
13670: GO 9675
13672: POP
13673: POP
// end ;
13674: LD_VAR 0 2
13678: RET
