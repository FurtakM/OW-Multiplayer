// export gametype , def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_oil_deposits , def_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_cost , def_cost_decreasing ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , cost , decr_cost_time , real_cost , oil_dep , sib_dep , amount_of_apemen , siberite_bomb_Delay ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game ; export depot_def , breastworks_def , start_def , deposits_def , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var sides , s1 , s2 , s3 , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
// if MultiPlayer then
   8: LD_OWVAR 4
  12: IFFALSE 86
// begin gametype = mp_game_type ;
  14: LD_ADDR_EXP 1
  18: PUSH
  19: LD_OWVAR 6
  23: ST_TO_ADDR
// Player_Side = mp_player_side ;
  24: LD_ADDR_EXP 36
  28: PUSH
  29: LD_OWVAR 7
  33: ST_TO_ADDR
// Player_Team = mp_player_team ;
  34: LD_ADDR_EXP 37
  38: PUSH
  39: LD_OWVAR 8
  43: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  44: LD_ADDR_EXP 40
  48: PUSH
  49: LD_OWVAR 17
  53: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  54: LD_ADDR_EXP 38
  58: PUSH
  59: LD_OWVAR 15
  63: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  64: LD_ADDR_EXP 41
  68: PUSH
  69: LD_OWVAR 16
  73: ST_TO_ADDR
// Teams = mp_teams ;
  74: LD_ADDR_EXP 39
  78: PUSH
  79: LD_OWVAR 12
  83: ST_TO_ADDR
// end else
  84: GO 256
// begin gametype = 11 ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 11
  93: ST_TO_ADDR
// Player_Side = 4 ;
  94: LD_ADDR_EXP 36
  98: PUSH
  99: LD_INT 4
 101: ST_TO_ADDR
// Player_Team = 2 ;
 102: LD_ADDR_EXP 37
 106: PUSH
 107: LD_INT 2
 109: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 110: LD_ADDR_EXP 40
 114: PUSH
 115: LD_INT 0
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 1
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 4
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 149: LD_ADDR_EXP 38
 153: PUSH
 154: LD_INT 0
 156: PUSH
 157: LD_INT 1
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 188: LD_ADDR_EXP 41
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 3
 198: PUSH
 199: LD_INT 0
 201: PUSH
 202: LD_INT 1
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: LD_INT 3
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Teams = [ [ 2 , 7 ] , [ 6 , 4 ] ] ;
 227: LD_ADDR_EXP 39
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: LD_INT 7
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 6
 244: PUSH
 245: LD_INT 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 256: LD_ADDR_EXP 34
 260: PUSH
 261: LD_EXP 40
 265: PUSH
 266: LD_INT 0
 268: PUSH
 269: EMPTY
 270: LIST
 271: DIFF
 272: PUSH
 273: LD_INT 0
 275: PLUS
 276: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 277: LD_ADDR_EXP 35
 281: PUSH
 282: LD_EXP 38
 286: PUSH
 287: LD_INT 0
 289: PUSH
 290: EMPTY
 291: LIST
 292: DIFF
 293: PUSH
 294: LD_INT 0
 296: PLUS
 297: ST_TO_ADDR
// if MultiPlayer then
 298: LD_OWVAR 4
 302: IFFALSE 534
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 304: LD_ADDR_EXP 2
 308: PUSH
 309: LD_INT 0
 311: PPUSH
 312: CALL_OW 426
 316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 317: LD_ADDR_EXP 3
 321: PUSH
 322: LD_INT 1
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 330: LD_ADDR_EXP 4
 334: PUSH
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 343: LD_ADDR_EXP 5
 347: PUSH
 348: LD_INT 3
 350: PPUSH
 351: CALL_OW 426
 355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 356: LD_ADDR_EXP 6
 360: PUSH
 361: LD_INT 4
 363: PPUSH
 364: CALL_OW 426
 368: ST_TO_ADDR
// def_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 369: LD_ADDR_EXP 7
 373: PUSH
 374: LD_INT 5
 376: PPUSH
 377: CALL_OW 426
 381: ST_TO_ADDR
// def_sib_deposits = GetMultiplayerSetting ( 6 ) ;
 382: LD_ADDR_EXP 8
 386: PUSH
 387: LD_INT 6
 389: PPUSH
 390: CALL_OW 426
 394: ST_TO_ADDR
// if gametype = 11 then
 395: LD_EXP 1
 399: PUSH
 400: LD_INT 11
 402: EQUAL
 403: IFFALSE 415
// def_shared_vision = 0 else
 405: LD_ADDR_EXP 9
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
 413: GO 428
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 415: LD_ADDR_EXP 9
 419: PUSH
 420: LD_INT 10
 422: PPUSH
 423: CALL_OW 426
 427: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 428: LD_ADDR_EXP 10
 432: PUSH
 433: LD_INT 11
 435: PPUSH
 436: CALL_OW 426
 440: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 441: LD_ADDR_EXP 11
 445: PUSH
 446: LD_INT 12
 448: PPUSH
 449: CALL_OW 426
 453: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 454: LD_ADDR_EXP 12
 458: PUSH
 459: LD_INT 13
 461: PPUSH
 462: CALL_OW 426
 466: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 467: LD_ADDR_EXP 13
 471: PUSH
 472: LD_INT 14
 474: PPUSH
 475: CALL_OW 426
 479: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 480: LD_ADDR_EXP 14
 484: PUSH
 485: LD_INT 15
 487: PPUSH
 488: CALL_OW 426
 492: ST_TO_ADDR
// def_cost = GetMultiplayerSetting ( 16 ) ;
 493: LD_ADDR_EXP 15
 497: PUSH
 498: LD_INT 16
 500: PPUSH
 501: CALL_OW 426
 505: ST_TO_ADDR
// def_cost_decreasing = GetMultiplayerSetting ( 17 ) ;
 506: LD_ADDR_EXP 16
 510: PUSH
 511: LD_INT 17
 513: PPUSH
 514: CALL_OW 426
 518: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 519: LD_ADDR_VAR 0 6
 523: PUSH
 524: LD_INT 22
 526: PPUSH
 527: CALL_OW 426
 531: ST_TO_ADDR
// end else
 532: GO 666
// begin randomize ;
 534: CALL_OW 10
// def_base_level = 0 ;
 538: LD_ADDR_EXP 2
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// def_amount_of_people = 11 ;
 546: LD_ADDR_EXP 3
 550: PUSH
 551: LD_INT 11
 553: ST_TO_ADDR
// def_skill_level = 3 ;
 554: LD_ADDR_EXP 4
 558: PUSH
 559: LD_INT 3
 561: ST_TO_ADDR
// def_starting_resources = 3 ;
 562: LD_ADDR_EXP 5
 566: PUSH
 567: LD_INT 3
 569: ST_TO_ADDR
// def_shipments_density = 50 ;
 570: LD_ADDR_EXP 6
 574: PUSH
 575: LD_INT 50
 577: ST_TO_ADDR
// def_oil_deposits = 2 ;
 578: LD_ADDR_EXP 7
 582: PUSH
 583: LD_INT 2
 585: ST_TO_ADDR
// def_sib_deposits = 2 ;
 586: LD_ADDR_EXP 8
 590: PUSH
 591: LD_INT 2
 593: ST_TO_ADDR
// def_shared_vision = 1 ;
 594: LD_ADDR_EXP 9
 598: PUSH
 599: LD_INT 1
 601: ST_TO_ADDR
// def_morale_flags = 4 ;
 602: LD_ADDR_EXP 10
 606: PUSH
 607: LD_INT 4
 609: ST_TO_ADDR
// def_siberite_detection = 1 ;
 610: LD_ADDR_EXP 11
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 618: LD_ADDR_EXP 12
 622: PUSH
 623: LD_INT 3
 625: ST_TO_ADDR
// def_people_respawning = 0 ;
 626: LD_ADDR_EXP 13
 630: PUSH
 631: LD_INT 0
 633: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 634: LD_ADDR_EXP 14
 638: PUSH
 639: LD_INT 0
 641: ST_TO_ADDR
// def_cost = 4 ;
 642: LD_ADDR_EXP 15
 646: PUSH
 647: LD_INT 4
 649: ST_TO_ADDR
// def_cost_decreasing = 0 ;
 650: LD_ADDR_EXP 16
 654: PUSH
 655: LD_INT 0
 657: ST_TO_ADDR
// tech_level = 4 ;
 658: LD_ADDR_VAR 0 6
 662: PUSH
 663: LD_INT 4
 665: ST_TO_ADDR
// end ; if isSGUI then
 666: LD_OWVAR 83
 670: IFFALSE 678
// setMpTechs ( ) else
 672: CALL 9663 0 0
 676: GO 691
// begin SetMpTechLevel ( tech_level + 1 ) ;
 678: LD_VAR 0 6
 682: PUSH
 683: LD_INT 1
 685: PLUS
 686: PPUSH
 687: CALL 9810 0 1
// end ; if gametype = 11 then
 691: LD_EXP 1
 695: PUSH
 696: LD_INT 11
 698: EQUAL
 699: IFFALSE 1041
// begin sides = [ ] ;
 701: LD_ADDR_VAR 0 2
 705: PUSH
 706: EMPTY
 707: ST_TO_ADDR
// for s1 = 1 to Side_Positions do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: DOUBLE
 714: LD_INT 1
 716: DEC
 717: ST_TO_ADDR
 718: LD_EXP 40
 722: PUSH
 723: FOR_TO
 724: IFFALSE 756
// if Side_Positions [ s1 ] then
 726: LD_EXP 40
 730: PUSH
 731: LD_VAR 0 3
 735: ARRAY
 736: IFFALSE 754
// sides = sides ^ s1 ;
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: LD_VAR 0 2
 747: PUSH
 748: LD_VAR 0 3
 752: ADD
 753: ST_TO_ADDR
 754: GO 723
 756: POP
 757: POP
// if sides < 4 then
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 4
 765: LESS
 766: IFFALSE 781
// begin YouLostInMultiplayer ;
 768: CALL_OW 107
// wait ( 0 0$1 ) ;
 772: LD_INT 35
 774: PPUSH
 775: CALL_OW 67
// exit ;
 779: GO 1646
// end ; s1 = sides [ Rand ( 1 , 4 ) ] ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_INT 1
 793: PPUSH
 794: LD_INT 4
 796: PPUSH
 797: CALL_OW 12
 801: ARRAY
 802: ST_TO_ADDR
// sides = sides diff s1 ;
 803: LD_ADDR_VAR 0 2
 807: PUSH
 808: LD_VAR 0 2
 812: PUSH
 813: LD_VAR 0 3
 817: DIFF
 818: ST_TO_ADDR
// s2 = sides [ Rand ( 1 , 3 ) ] ;
 819: LD_ADDR_VAR 0 4
 823: PUSH
 824: LD_VAR 0 2
 828: PUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 12
 839: ARRAY
 840: ST_TO_ADDR
// sides = sides diff s2 ;
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_VAR 0 4
 855: DIFF
 856: ST_TO_ADDR
// s3 = sides [ Rand ( 1 , 2 ) ] ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 2
 866: PUSH
 867: LD_INT 1
 869: PPUSH
 870: LD_INT 2
 872: PPUSH
 873: CALL_OW 12
 877: ARRAY
 878: ST_TO_ADDR
// sides = sides diff s3 ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_VAR 0 2
 888: PUSH
 889: LD_VAR 0 5
 893: DIFF
 894: ST_TO_ADDR
// Teams = [ [ s1 , s2 ] , [ s3 , sides [ 1 ] ] ] ;
 895: LD_ADDR_EXP 39
 899: PUSH
 900: LD_VAR 0 3
 904: PUSH
 905: LD_VAR 0 4
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_VAR 0 5
 918: PUSH
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 936: LD_ADDR_EXP 38
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 0
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: ST_TO_ADDR
// Side_Teams = Replace ( Replace ( Replace ( Replace ( Side_Teams , s1 , 1 ) , s2 , 1 ) , s3 , 2 ) , sides [ 1 ] , 2 ) ;
 975: LD_ADDR_EXP 38
 979: PUSH
 980: LD_EXP 38
 984: PPUSH
 985: LD_VAR 0 3
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 1
 997: PPUSH
 998: LD_VAR 0 4
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 1
1010: PPUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_INT 2
1018: PPUSH
1019: CALL_OW 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PUSH
1029: LD_INT 1
1031: ARRAY
1032: PPUSH
1033: LD_INT 2
1035: PPUSH
1036: CALL_OW 1
1040: ST_TO_ADDR
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1041: LD_ADDR_EXP 17
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: LD_INT 1
1054: PUSH
1055: LD_INT 1
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: LD_EXP 2
1068: PUSH
1069: LD_INT 1
1071: PLUS
1072: ARRAY
1073: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1074: LD_ADDR_EXP 18
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 4
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 2
1101: PUSH
1102: LD_INT 1
1104: PLUS
1105: ARRAY
1106: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1107: LD_ADDR_EXP 20
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: LD_INT 4
1120: PUSH
1121: LD_INT 5
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: LD_EXP 4
1134: PUSH
1135: LD_INT 1
1137: PLUS
1138: ARRAY
1139: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1140: LD_ADDR_EXP 22
1144: PUSH
1145: LD_INT 0
1147: PUSH
1148: LD_INT 0
1150: PUSH
1151: LD_INT 0
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_INT 30
1161: PUSH
1162: LD_INT 0
1164: PUSH
1165: LD_INT 0
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: PUSH
1173: LD_INT 50
1175: PUSH
1176: LD_INT 20
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 80
1189: PUSH
1190: LD_INT 40
1192: PUSH
1193: LD_INT 20
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_EXP 5
1211: PUSH
1212: LD_INT 1
1214: PLUS
1215: ARRAY
1216: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1217: LD_ADDR_EXP 21
1221: PUSH
1222: LD_INT 10
1224: PUSH
1225: EMPTY
1226: LIST
1227: PUSH
1228: LD_INT 7
1230: PUSH
1231: LD_INT 14
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 6
1240: PUSH
1241: LD_INT 12
1243: PUSH
1244: LD_INT 18
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 5
1254: PUSH
1255: LD_INT 10
1257: PUSH
1258: LD_INT 15
1260: PUSH
1261: LD_INT 20
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_EXP 5
1280: PUSH
1281: LD_INT 1
1283: PLUS
1284: ARRAY
1285: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1286: LD_ADDR_EXP 19
1290: PUSH
1291: LD_EXP 3
1295: PUSH
1296: LD_INT 4
1298: PLUS
1299: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1300: LD_ADDR_EXP 23
1304: PUSH
1305: LD_INT 150
1307: PUSH
1308: LD_EXP 6
1312: MINUS
1313: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1314: LD_ADDR_EXP 32
1318: PUSH
1319: LD_INT 0
1321: PUSH
1322: LD_INT 3
1324: PUSH
1325: LD_INT 6
1327: PUSH
1328: LD_INT 9
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_EXP 12
1341: PUSH
1342: LD_INT 1
1344: PLUS
1345: ARRAY
1346: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1347: LD_ADDR_EXP 25
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 8400
1357: PUSH
1358: LD_INT 1750
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: PUSH
1366: LD_EXP 13
1370: PUSH
1371: LD_INT 1
1373: PLUS
1374: ARRAY
1375: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1376: LD_ADDR_EXP 26
1380: PUSH
1381: LD_INT 0
1383: PUSH
1384: LD_INT 21000
1386: PUSH
1387: LD_INT 4200
1389: PUSH
1390: EMPTY
1391: LIST
1392: LIST
1393: LIST
1394: PUSH
1395: LD_EXP 13
1399: PUSH
1400: LD_INT 1
1402: PLUS
1403: ARRAY
1404: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1405: LD_ADDR_EXP 24
1409: PUSH
1410: LD_INT 1
1412: NEG
1413: PUSH
1414: LD_INT 350
1416: PUSH
1417: LD_INT 700
1419: PUSH
1420: LD_INT 1400
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: PUSH
1433: LD_EXP 10
1437: PUSH
1438: LD_INT 1
1440: PLUS
1441: ARRAY
1442: ST_TO_ADDR
// battle_flags_id = [ ] ;
1443: LD_ADDR_EXP 49
1447: PUSH
1448: EMPTY
1449: ST_TO_ADDR
// cost = [ 200 , 300 , 400 , 600 , 800 ] [ def_cost + 1 ] ;
1450: LD_ADDR_EXP 27
1454: PUSH
1455: LD_INT 200
1457: PUSH
1458: LD_INT 300
1460: PUSH
1461: LD_INT 400
1463: PUSH
1464: LD_INT 600
1466: PUSH
1467: LD_INT 800
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PUSH
1477: LD_EXP 15
1481: PUSH
1482: LD_INT 1
1484: PLUS
1485: ARRAY
1486: ST_TO_ADDR
// decr_cost_time = [ 0 , 20 20$0 , 10 10$0 , 5 5$0 ] [ def_cost_decreasing + 1 ] ;
1487: LD_ADDR_EXP 28
1491: PUSH
1492: LD_INT 0
1494: PUSH
1495: LD_INT 42000
1497: PUSH
1498: LD_INT 21000
1500: PUSH
1501: LD_INT 10500
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: PUSH
1510: LD_EXP 16
1514: PUSH
1515: LD_INT 1
1517: PLUS
1518: ARRAY
1519: ST_TO_ADDR
// oil_dep = [ [ 1 ] , [ 4 ] , [ 1 , 4 ] ] [ def_oil_deposits + 1 ] ;
1520: LD_ADDR_EXP 30
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: EMPTY
1529: LIST
1530: PUSH
1531: LD_INT 4
1533: PUSH
1534: EMPTY
1535: LIST
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: LD_INT 4
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: LIST
1551: PUSH
1552: LD_EXP 7
1556: PUSH
1557: LD_INT 1
1559: PLUS
1560: ARRAY
1561: ST_TO_ADDR
// sib_dep = [ [ 2 ] , [ 3 ] , [ 2 , 3 ] ] [ def_sib_deposits + 1 ] ;
1562: LD_ADDR_EXP 31
1566: PUSH
1567: LD_INT 2
1569: PUSH
1570: EMPTY
1571: LIST
1572: PUSH
1573: LD_INT 3
1575: PUSH
1576: EMPTY
1577: LIST
1578: PUSH
1579: LD_INT 2
1581: PUSH
1582: LD_INT 3
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: LD_EXP 8
1598: PUSH
1599: LD_INT 1
1601: PLUS
1602: ARRAY
1603: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1604: LD_EXP 14
1608: PUSH
1609: LD_INT 0
1611: EQUAL
1612: IFFALSE 1624
// siberite_bomb_Delay = 0 else
1614: LD_ADDR_EXP 33
1618: PUSH
1619: LD_INT 0
1621: ST_TO_ADDR
1622: GO 1646
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1624: LD_ADDR_EXP 33
1628: PUSH
1629: LD_EXP 14
1633: PUSH
1634: LD_INT 1
1636: MINUS
1637: PUSH
1638: LD_INT 21000
1640: MUL
1641: PUSH
1642: LD_INT 1
1644: PLUS
1645: ST_TO_ADDR
// end ;
1646: LD_VAR 0 1
1650: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i , coord ; begin
1651: LD_INT 0
1653: PPUSH
1654: PPUSH
1655: PPUSH
1656: PPUSH
1657: PPUSH
1658: PPUSH
1659: PPUSH
1660: PPUSH
1661: PPUSH
1662: PPUSH
// depot_def = [ ] ;
1663: LD_ADDR_EXP 45
1667: PUSH
1668: EMPTY
1669: ST_TO_ADDR
// breastworks_def = [ ] ;
1670: LD_ADDR_EXP 46
1674: PUSH
1675: EMPTY
1676: ST_TO_ADDR
// for side := 1 to 4 do
1677: LD_ADDR_VAR 0 2
1681: PUSH
1682: DOUBLE
1683: LD_INT 1
1685: DEC
1686: ST_TO_ADDR
1687: LD_INT 4
1689: PUSH
1690: FOR_TO
1691: IFFALSE 2117
// begin dep := side * 5 - 4 ;
1693: LD_ADDR_VAR 0 3
1697: PUSH
1698: LD_VAR 0 2
1702: PUSH
1703: LD_INT 5
1705: MUL
1706: PUSH
1707: LD_INT 4
1709: MINUS
1710: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1711: LD_ADDR_VAR 0 4
1715: PUSH
1716: LD_VAR 0 2
1720: PUSH
1721: LD_INT 5
1723: MUL
1724: PUSH
1725: LD_INT 3
1727: MINUS
1728: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1729: LD_ADDR_VAR 0 5
1733: PUSH
1734: LD_VAR 0 2
1738: PUSH
1739: LD_INT 5
1741: MUL
1742: PUSH
1743: LD_INT 2
1745: MINUS
1746: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1747: LD_ADDR_VAR 0 6
1751: PUSH
1752: LD_VAR 0 2
1756: PUSH
1757: LD_INT 5
1759: MUL
1760: PUSH
1761: LD_INT 1
1763: MINUS
1764: ST_TO_ADDR
// br4 := side * 5 ;
1765: LD_ADDR_VAR 0 7
1769: PUSH
1770: LD_VAR 0 2
1774: PUSH
1775: LD_INT 5
1777: MUL
1778: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1779: LD_ADDR_EXP 45
1783: PUSH
1784: LD_EXP 45
1788: PUSH
1789: LD_VAR 0 3
1793: PPUSH
1794: CALL_OW 250
1798: PUSH
1799: LD_VAR 0 3
1803: PPUSH
1804: CALL_OW 251
1808: PUSH
1809: LD_VAR 0 3
1813: PPUSH
1814: CALL_OW 254
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: LIST
1823: PUSH
1824: EMPTY
1825: LIST
1826: ADD
1827: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1828: LD_ADDR_EXP 47
1832: PUSH
1833: LD_EXP 47
1837: PUSH
1838: LD_VAR 0 3
1842: PPUSH
1843: CALL_OW 250
1847: PPUSH
1848: LD_VAR 0 3
1852: PPUSH
1853: CALL_OW 254
1857: PUSH
1858: LD_INT 6
1860: MOD
1861: PPUSH
1862: LD_INT 6
1864: PPUSH
1865: CALL_OW 272
1869: PUSH
1870: LD_VAR 0 3
1874: PPUSH
1875: CALL_OW 251
1879: PPUSH
1880: LD_VAR 0 3
1884: PPUSH
1885: CALL_OW 254
1889: PUSH
1890: LD_INT 6
1892: MOD
1893: PPUSH
1894: LD_INT 6
1896: PPUSH
1897: CALL_OW 273
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: EMPTY
1907: LIST
1908: ADD
1909: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1910: LD_ADDR_EXP 46
1914: PUSH
1915: LD_EXP 46
1919: PUSH
1920: LD_VAR 0 4
1924: PPUSH
1925: CALL_OW 250
1929: PUSH
1930: LD_VAR 0 4
1934: PPUSH
1935: CALL_OW 251
1939: PUSH
1940: LD_VAR 0 4
1944: PPUSH
1945: CALL_OW 254
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: LD_VAR 0 5
1959: PPUSH
1960: CALL_OW 250
1964: PUSH
1965: LD_VAR 0 5
1969: PPUSH
1970: CALL_OW 251
1974: PUSH
1975: LD_VAR 0 5
1979: PPUSH
1980: CALL_OW 254
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: PUSH
1990: LD_VAR 0 6
1994: PPUSH
1995: CALL_OW 250
1999: PUSH
2000: LD_VAR 0 6
2004: PPUSH
2005: CALL_OW 251
2009: PUSH
2010: LD_VAR 0 6
2014: PPUSH
2015: CALL_OW 254
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_VAR 0 7
2029: PPUSH
2030: CALL_OW 250
2034: PUSH
2035: LD_VAR 0 7
2039: PPUSH
2040: CALL_OW 251
2044: PUSH
2045: LD_VAR 0 7
2049: PPUSH
2050: CALL_OW 254
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: LIST
2065: PUSH
2066: EMPTY
2067: LIST
2068: ADD
2069: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2070: LD_VAR 0 3
2074: PPUSH
2075: CALL_OW 65
// DestroyUnit ( br1 ) ;
2079: LD_VAR 0 4
2083: PPUSH
2084: CALL_OW 65
// DestroyUnit ( br2 ) ;
2088: LD_VAR 0 5
2092: PPUSH
2093: CALL_OW 65
// DestroyUnit ( br3 ) ;
2097: LD_VAR 0 6
2101: PPUSH
2102: CALL_OW 65
// DestroyUnit ( br4 ) ;
2106: LD_VAR 0 7
2110: PPUSH
2111: CALL_OW 65
// end ;
2115: GO 1690
2117: POP
2118: POP
// deposits_def = [ [ [ 30 , 22 ] , [ 60 , 42 ] , [ 29 , 2 ] , [ 73 , 57 ] ] , [ [ 148 , 24 ] , [ 119 , 20 ] , [ 172 , 36 ] , [ 133 , 50 ] ] , [ [ 84 , 122 ] , [ 101 , 111 ] , [ 74 , 126 ] , [ 109 , 102 ] ] , [ [ 196 , 117 ] , [ 166 , 94 ] , [ 197 , 133 ] , [ 156 , 83 ] ] ] ;
2119: LD_ADDR_EXP 48
2123: PUSH
2124: LD_INT 30
2126: PUSH
2127: LD_INT 22
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 60
2136: PUSH
2137: LD_INT 42
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 29
2146: PUSH
2147: LD_INT 2
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 73
2156: PUSH
2157: LD_INT 57
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: PUSH
2170: LD_INT 148
2172: PUSH
2173: LD_INT 24
2175: PUSH
2176: EMPTY
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 119
2182: PUSH
2183: LD_INT 20
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: PUSH
2190: LD_INT 172
2192: PUSH
2193: LD_INT 36
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: PUSH
2200: LD_INT 133
2202: PUSH
2203: LD_INT 50
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 84
2218: PUSH
2219: LD_INT 122
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: LD_INT 101
2228: PUSH
2229: LD_INT 111
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 74
2238: PUSH
2239: LD_INT 126
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: LD_INT 109
2248: PUSH
2249: LD_INT 102
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: PUSH
2262: LD_INT 196
2264: PUSH
2265: LD_INT 117
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PUSH
2272: LD_INT 166
2274: PUSH
2275: LD_INT 94
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 197
2284: PUSH
2285: LD_INT 133
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 156
2294: PUSH
2295: LD_INT 83
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: LIST
2306: LIST
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: LIST
2313: ST_TO_ADDR
// for i := 1 to 4 do
2314: LD_ADDR_VAR 0 9
2318: PUSH
2319: DOUBLE
2320: LD_INT 1
2322: DEC
2323: ST_TO_ADDR
2324: LD_INT 4
2326: PUSH
2327: FOR_TO
2328: IFFALSE 2398
// for coord in oil_dep do
2330: LD_ADDR_VAR 0 10
2334: PUSH
2335: LD_EXP 30
2339: PUSH
2340: FOR_IN
2341: IFFALSE 2394
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_oil ) ;
2343: LD_EXP 48
2347: PUSH
2348: LD_VAR 0 9
2352: ARRAY
2353: PUSH
2354: LD_VAR 0 10
2358: ARRAY
2359: PUSH
2360: LD_INT 1
2362: ARRAY
2363: PPUSH
2364: LD_EXP 48
2368: PUSH
2369: LD_VAR 0 9
2373: ARRAY
2374: PUSH
2375: LD_VAR 0 10
2379: ARRAY
2380: PUSH
2381: LD_INT 2
2383: ARRAY
2384: PPUSH
2385: LD_INT 2
2387: PPUSH
2388: CALL_OW 62
// end ;
2392: GO 2340
2394: POP
2395: POP
2396: GO 2327
2398: POP
2399: POP
// for i := 1 to 4 do
2400: LD_ADDR_VAR 0 9
2404: PUSH
2405: DOUBLE
2406: LD_INT 1
2408: DEC
2409: ST_TO_ADDR
2410: LD_INT 4
2412: PUSH
2413: FOR_TO
2414: IFFALSE 2484
// for coord in sib_dep do
2416: LD_ADDR_VAR 0 10
2420: PUSH
2421: LD_EXP 31
2425: PUSH
2426: FOR_IN
2427: IFFALSE 2480
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_siberit ) ;
2429: LD_EXP 48
2433: PUSH
2434: LD_VAR 0 9
2438: ARRAY
2439: PUSH
2440: LD_VAR 0 10
2444: ARRAY
2445: PUSH
2446: LD_INT 1
2448: ARRAY
2449: PPUSH
2450: LD_EXP 48
2454: PUSH
2455: LD_VAR 0 9
2459: ARRAY
2460: PUSH
2461: LD_VAR 0 10
2465: ARRAY
2466: PUSH
2467: LD_INT 2
2469: ARRAY
2470: PPUSH
2471: LD_INT 3
2473: PPUSH
2474: CALL_OW 62
// end ;
2478: GO 2426
2480: POP
2481: POP
2482: GO 2413
2484: POP
2485: POP
// end ;
2486: LD_VAR 0 1
2490: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2491: LD_INT 0
2493: PPUSH
2494: PPUSH
2495: PPUSH
// Team_Game := 0 ;
2496: LD_ADDR_EXP 44
2500: PUSH
2501: LD_INT 0
2503: ST_TO_ADDR
// for i = 1 to 8 do
2504: LD_ADDR_VAR 0 2
2508: PUSH
2509: DOUBLE
2510: LD_INT 1
2512: DEC
2513: ST_TO_ADDR
2514: LD_INT 8
2516: PUSH
2517: FOR_TO
2518: IFFALSE 2544
// Team_Game := Team_Game + Side_Teams [ i ] ;
2520: LD_ADDR_EXP 44
2524: PUSH
2525: LD_EXP 44
2529: PUSH
2530: LD_EXP 38
2534: PUSH
2535: LD_VAR 0 2
2539: ARRAY
2540: PLUS
2541: ST_TO_ADDR
2542: GO 2517
2544: POP
2545: POP
// if not Team_Game then
2546: LD_EXP 44
2550: NOT
2551: IFFALSE 2563
// Team_Game := false else
2553: LD_ADDR_EXP 44
2557: PUSH
2558: LD_INT 0
2560: ST_TO_ADDR
2561: GO 2571
// Team_Game := true ;
2563: LD_ADDR_EXP 44
2567: PUSH
2568: LD_INT 1
2570: ST_TO_ADDR
// if not Team_Game then
2571: LD_EXP 44
2575: NOT
2576: IFFALSE 2674
// begin for i = 1 to 8 do
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: DOUBLE
2584: LD_INT 1
2586: DEC
2587: ST_TO_ADDR
2588: LD_INT 8
2590: PUSH
2591: FOR_TO
2592: IFFALSE 2670
// for j = 1 to 8 do
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: DOUBLE
2600: LD_INT 1
2602: DEC
2603: ST_TO_ADDR
2604: LD_INT 8
2606: PUSH
2607: FOR_TO
2608: IFFALSE 2666
// if i <> j then
2610: LD_VAR 0 2
2614: PUSH
2615: LD_VAR 0 3
2619: NONEQUAL
2620: IFFALSE 2644
// SetAttitude ( i , j , att_neutral , true ) else
2622: LD_VAR 0 2
2626: PPUSH
2627: LD_VAR 0 3
2631: PPUSH
2632: LD_INT 0
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL_OW 80
2642: GO 2664
// SetAttitude ( i , j , att_friend , true ) ;
2644: LD_VAR 0 2
2648: PPUSH
2649: LD_VAR 0 3
2653: PPUSH
2654: LD_INT 1
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: CALL_OW 80
2664: GO 2607
2666: POP
2667: POP
2668: GO 2591
2670: POP
2671: POP
// end else
2672: GO 2903
// begin if def_shared_vision and ( gametype <> 11 ) then
2674: LD_EXP 9
2678: PUSH
2679: LD_EXP 1
2683: PUSH
2684: LD_INT 11
2686: NONEQUAL
2687: AND
2688: IFFALSE 2753
// begin for i in Teams do
2690: LD_ADDR_VAR 0 2
2694: PUSH
2695: LD_EXP 39
2699: PUSH
2700: FOR_IN
2701: IFFALSE 2751
// for j = 2 to i do
2703: LD_ADDR_VAR 0 3
2707: PUSH
2708: DOUBLE
2709: LD_INT 2
2711: DEC
2712: ST_TO_ADDR
2713: LD_VAR 0 2
2717: PUSH
2718: FOR_TO
2719: IFFALSE 2747
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2721: LD_VAR 0 2
2725: PUSH
2726: LD_VAR 0 3
2730: ARRAY
2731: PPUSH
2732: LD_VAR 0 2
2736: PUSH
2737: LD_INT 1
2739: ARRAY
2740: PPUSH
2741: CALL_OW 343
2745: GO 2718
2747: POP
2748: POP
2749: GO 2700
2751: POP
2752: POP
// end ; for i := 1 to 8 do
2753: LD_ADDR_VAR 0 2
2757: PUSH
2758: DOUBLE
2759: LD_INT 1
2761: DEC
2762: ST_TO_ADDR
2763: LD_INT 8
2765: PUSH
2766: FOR_TO
2767: IFFALSE 2901
// for j := 1 to 8 do
2769: LD_ADDR_VAR 0 3
2773: PUSH
2774: DOUBLE
2775: LD_INT 1
2777: DEC
2778: ST_TO_ADDR
2779: LD_INT 8
2781: PUSH
2782: FOR_TO
2783: IFFALSE 2897
// if i <> j then
2785: LD_VAR 0 2
2789: PUSH
2790: LD_VAR 0 3
2794: NONEQUAL
2795: IFFALSE 2895
// if gametype = 11 then
2797: LD_EXP 1
2801: PUSH
2802: LD_INT 11
2804: EQUAL
2805: IFFALSE 2829
// SetAttitude ( i , j , att_neutral , true ) else
2807: LD_VAR 0 2
2811: PPUSH
2812: LD_VAR 0 3
2816: PPUSH
2817: LD_INT 0
2819: PPUSH
2820: LD_INT 1
2822: PPUSH
2823: CALL_OW 80
2827: GO 2895
// if Side_Teams [ i ] = Side_Teams [ j ] then
2829: LD_EXP 38
2833: PUSH
2834: LD_VAR 0 2
2838: ARRAY
2839: PUSH
2840: LD_EXP 38
2844: PUSH
2845: LD_VAR 0 3
2849: ARRAY
2850: EQUAL
2851: IFFALSE 2875
// SetAttitude ( i , j , att_friend , true ) else
2853: LD_VAR 0 2
2857: PPUSH
2858: LD_VAR 0 3
2862: PPUSH
2863: LD_INT 1
2865: PPUSH
2866: LD_INT 1
2868: PPUSH
2869: CALL_OW 80
2873: GO 2895
// SetAttitude ( i , j , att_enemy , true ) ;
2875: LD_VAR 0 2
2879: PPUSH
2880: LD_VAR 0 3
2884: PPUSH
2885: LD_INT 2
2887: PPUSH
2888: LD_INT 1
2890: PPUSH
2891: CALL_OW 80
2895: GO 2782
2897: POP
2898: POP
2899: GO 2766
2901: POP
2902: POP
// end ; end ;
2903: LD_VAR 0 1
2907: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2908: LD_INT 0
2910: PPUSH
2911: PPUSH
2912: PPUSH
2913: PPUSH
// result := [ ] ;
2914: LD_ADDR_VAR 0 6
2918: PUSH
2919: EMPTY
2920: ST_TO_ADDR
// for i := 1 to count do
2921: LD_ADDR_VAR 0 7
2925: PUSH
2926: DOUBLE
2927: LD_INT 1
2929: DEC
2930: ST_TO_ADDR
2931: LD_VAR 0 1
2935: PUSH
2936: FOR_TO
2937: IFFALSE 3331
// begin uc_direction := Rand ( 0 , 5 ) ;
2939: LD_ADDR_OWVAR 24
2943: PUSH
2944: LD_INT 0
2946: PPUSH
2947: LD_INT 5
2949: PPUSH
2950: CALL_OW 12
2954: ST_TO_ADDR
// if commander then
2955: LD_LOC 1
2959: IFFALSE 3068
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2961: LD_ADDR_OWVAR 26
2965: PUSH
2966: LD_OWVAR 19
2970: PUSH
2971: LD_OWVAR 20
2975: ARRAY
2976: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2977: LD_INT 1
2979: PPUSH
2980: LD_INT 2
2982: PPUSH
2983: CALL_OW 12
2987: PPUSH
2988: LD_VAR 0 2
2992: PPUSH
2993: LD_EXP 20
2997: PUSH
2998: LD_INT 2
3000: PLUS
3001: PPUSH
3002: CALL_OW 380
// hc_importance := 105 ;
3006: LD_ADDR_OWVAR 32
3010: PUSH
3011: LD_INT 105
3013: ST_TO_ADDR
// commander := false ;
3014: LD_ADDR_LOC 1
3018: PUSH
3019: LD_INT 0
3021: ST_TO_ADDR
// if Multiplayer then
3022: LD_OWVAR 4
3026: IFFALSE 3066
// begin hc_gallery := MULTIAVATARS ;
3028: LD_ADDR_OWVAR 33
3032: PUSH
3033: LD_STRING MULTIAVATARS
3035: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3036: LD_ADDR_OWVAR 34
3040: PUSH
3041: LD_OWVAR 20
3045: PPUSH
3046: CALL_OW 525
3050: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3051: LD_ADDR_OWVAR 27
3055: PUSH
3056: LD_OWVAR 20
3060: PPUSH
3061: CALL_OW 526
3065: ST_TO_ADDR
// end ; end else
3066: GO 3131
// begin hc_name :=  ;
3068: LD_ADDR_OWVAR 26
3072: PUSH
3073: LD_STRING 
3075: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3076: LD_INT 1
3078: PPUSH
3079: LD_INT 2
3081: PPUSH
3082: CALL_OW 12
3086: PPUSH
3087: LD_VAR 0 2
3091: PPUSH
3092: LD_EXP 20
3096: PPUSH
3097: CALL_OW 380
// hc_importance := 0 ;
3101: LD_ADDR_OWVAR 32
3105: PUSH
3106: LD_INT 0
3108: ST_TO_ADDR
// if Multiplayer then
3109: LD_OWVAR 4
3113: IFFALSE 3131
// begin hc_gallery :=  ;
3115: LD_ADDR_OWVAR 33
3119: PUSH
3120: LD_STRING 
3122: ST_TO_ADDR
// hc_face_number := 0 ;
3123: LD_ADDR_OWVAR 34
3127: PUSH
3128: LD_INT 0
3130: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3131: LD_ADDR_VAR 0 9
3135: PUSH
3136: CALL_OW 44
3140: ST_TO_ADDR
// if global_defined then
3141: LD_LOC 3
3145: IFFALSE 3283
// begin j := i ;
3147: LD_ADDR_VAR 0 8
3151: PUSH
3152: LD_VAR 0 7
3156: ST_TO_ADDR
// if cl = class_soldier then
3157: LD_VAR 0 2
3161: PUSH
3162: LD_INT 1
3164: EQUAL
3165: IFFALSE 3183
// j := i + soldiers_created ;
3167: LD_ADDR_VAR 0 8
3171: PUSH
3172: LD_VAR 0 7
3176: PUSH
3177: LD_LOC 4
3181: PLUS
3182: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3183: LD_LOC 2
3187: PUSH
3188: LD_VAR 0 2
3192: ARRAY
3193: PUSH
3194: LD_VAR 0 8
3198: ARRAY
3199: PPUSH
3200: LD_VAR 0 9
3204: PPUSH
3205: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3209: LD_VAR 0 9
3213: PPUSH
3214: LD_INT 2
3216: PPUSH
3217: LD_LOC 2
3221: PUSH
3222: LD_VAR 0 2
3226: ARRAY
3227: PUSH
3228: LD_VAR 0 8
3232: ARRAY
3233: PPUSH
3234: LD_INT 2
3236: PPUSH
3237: CALL_OW 260
3241: PPUSH
3242: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3246: LD_VAR 0 9
3250: PPUSH
3251: LD_INT 1
3253: PPUSH
3254: LD_LOC 2
3258: PUSH
3259: LD_VAR 0 2
3263: ARRAY
3264: PUSH
3265: LD_VAR 0 8
3269: ARRAY
3270: PPUSH
3271: LD_INT 1
3273: PPUSH
3274: CALL_OW 260
3278: PPUSH
3279: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
3283: LD_VAR 0 9
3287: PPUSH
3288: LD_VAR 0 3
3292: PPUSH
3293: LD_VAR 0 4
3297: PPUSH
3298: LD_VAR 0 5
3302: PPUSH
3303: LD_INT 0
3305: PPUSH
3306: CALL_OW 50
// result := result ^ [ un ] ;
3310: LD_ADDR_VAR 0 6
3314: PUSH
3315: LD_VAR 0 6
3319: PUSH
3320: LD_VAR 0 9
3324: PUSH
3325: EMPTY
3326: LIST
3327: ADD
3328: ST_TO_ADDR
// end ;
3329: GO 2936
3331: POP
3332: POP
// if not global_defined then
3333: LD_LOC 3
3337: NOT
3338: IFFALSE 3400
// if cl = class_soldier and global_units then
3340: LD_VAR 0 2
3344: PUSH
3345: LD_INT 1
3347: EQUAL
3348: PUSH
3349: LD_LOC 2
3353: AND
3354: IFFALSE 3381
// global_units := [ global_units [ 1 ] ^ result ] else
3356: LD_ADDR_LOC 2
3360: PUSH
3361: LD_LOC 2
3365: PUSH
3366: LD_INT 1
3368: ARRAY
3369: PUSH
3370: LD_VAR 0 6
3374: ADD
3375: PUSH
3376: EMPTY
3377: LIST
3378: ST_TO_ADDR
3379: GO 3400
// global_units := global_units ^ [ result ] ;
3381: LD_ADDR_LOC 2
3385: PUSH
3386: LD_LOC 2
3390: PUSH
3391: LD_VAR 0 6
3395: PUSH
3396: EMPTY
3397: LIST
3398: ADD
3399: ST_TO_ADDR
// end ;
3400: LD_VAR 0 6
3404: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3405: LD_INT 0
3407: PPUSH
3408: PPUSH
3409: PPUSH
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
3414: PPUSH
3415: PPUSH
3416: PPUSH
3417: PPUSH
3418: PPUSH
3419: PPUSH
// pos := Side_Positions [ side ] ;
3420: LD_ADDR_VAR 0 3
3424: PUSH
3425: LD_EXP 40
3429: PUSH
3430: LD_VAR 0 1
3434: ARRAY
3435: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3436: LD_ADDR_OWVAR 21
3440: PUSH
3441: LD_EXP 41
3445: PUSH
3446: LD_VAR 0 1
3450: ARRAY
3451: ST_TO_ADDR
// uc_side := side ;
3452: LD_ADDR_OWVAR 20
3456: PUSH
3457: LD_VAR 0 1
3461: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3462: LD_ADDR_VAR 0 4
3466: PUSH
3467: LD_EXP 45
3471: PUSH
3472: LD_VAR 0 3
3476: ARRAY
3477: PUSH
3478: LD_INT 1
3480: ARRAY
3481: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3482: LD_ADDR_VAR 0 5
3486: PUSH
3487: LD_EXP 45
3491: PUSH
3492: LD_VAR 0 3
3496: ARRAY
3497: PUSH
3498: LD_INT 2
3500: ARRAY
3501: ST_TO_ADDR
// if is_depot then
3502: LD_EXP 17
3506: IFFALSE 3649
// begin bc_type = b_depot ;
3508: LD_ADDR_OWVAR 42
3512: PUSH
3513: LD_INT 0
3515: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3516: LD_ADDR_VAR 0 10
3520: PUSH
3521: LD_VAR 0 4
3525: PPUSH
3526: LD_VAR 0 5
3530: PPUSH
3531: LD_EXP 45
3535: PUSH
3536: LD_VAR 0 3
3540: ARRAY
3541: PUSH
3542: LD_INT 3
3544: ARRAY
3545: PPUSH
3546: CALL_OW 47
3550: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3551: LD_VAR 0 10
3555: PPUSH
3556: LD_STRING @
3558: PUSH
3559: LD_VAR 0 1
3563: STR
3564: PPUSH
3565: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3569: LD_VAR 0 10
3573: PPUSH
3574: CALL_OW 274
3578: PPUSH
3579: LD_INT 1
3581: PPUSH
3582: LD_EXP 22
3586: PUSH
3587: LD_INT 1
3589: ARRAY
3590: PPUSH
3591: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3595: LD_VAR 0 10
3599: PPUSH
3600: CALL_OW 274
3604: PPUSH
3605: LD_INT 2
3607: PPUSH
3608: LD_EXP 22
3612: PUSH
3613: LD_INT 2
3615: ARRAY
3616: PPUSH
3617: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3621: LD_VAR 0 2
3625: PPUSH
3626: CALL_OW 274
3630: PPUSH
3631: LD_INT 3
3633: PPUSH
3634: LD_EXP 22
3638: PUSH
3639: LD_INT 3
3641: ARRAY
3642: PPUSH
3643: CALL_OW 277
// end else
3647: GO 3793
// begin for i := 1 to 3 do
3649: LD_ADDR_VAR 0 6
3653: PUSH
3654: DOUBLE
3655: LD_INT 1
3657: DEC
3658: ST_TO_ADDR
3659: LD_INT 3
3661: PUSH
3662: FOR_TO
3663: IFFALSE 3791
// begin r := starting_resources [ i ] ;
3665: LD_ADDR_VAR 0 7
3669: PUSH
3670: LD_EXP 22
3674: PUSH
3675: LD_VAR 0 6
3679: ARRAY
3680: ST_TO_ADDR
// while r >= 10 do
3681: LD_VAR 0 7
3685: PUSH
3686: LD_INT 10
3688: GREATEREQUAL
3689: IFFALSE 3789
// if r > 50 then
3691: LD_VAR 0 7
3695: PUSH
3696: LD_INT 50
3698: GREATER
3699: IFFALSE 3745
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3701: LD_VAR 0 6
3705: PPUSH
3706: LD_INT 5
3708: PPUSH
3709: LD_VAR 0 4
3713: PPUSH
3714: LD_VAR 0 5
3718: PPUSH
3719: LD_INT 4
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: CALL_OW 60
// r := r - 50 ;
3729: LD_ADDR_VAR 0 7
3733: PUSH
3734: LD_VAR 0 7
3738: PUSH
3739: LD_INT 50
3741: MINUS
3742: ST_TO_ADDR
// end else
3743: GO 3787
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3745: LD_VAR 0 6
3749: PPUSH
3750: LD_VAR 0 7
3754: PUSH
3755: LD_INT 10
3757: DIV
3758: PPUSH
3759: LD_VAR 0 4
3763: PPUSH
3764: LD_VAR 0 5
3768: PPUSH
3769: LD_INT 4
3771: PPUSH
3772: LD_INT 0
3774: PPUSH
3775: CALL_OW 60
// r := 0 ;
3779: LD_ADDR_VAR 0 7
3783: PUSH
3784: LD_INT 0
3786: ST_TO_ADDR
// end ;
3787: GO 3681
// end ;
3789: GO 3662
3791: POP
3792: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3793: LD_ADDR_VAR 0 4
3797: PUSH
3798: LD_EXP 47
3802: PUSH
3803: LD_VAR 0 3
3807: ARRAY
3808: PUSH
3809: LD_INT 1
3811: ARRAY
3812: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3813: LD_ADDR_VAR 0 5
3817: PUSH
3818: LD_EXP 47
3822: PUSH
3823: LD_VAR 0 3
3827: ARRAY
3828: PUSH
3829: LD_INT 2
3831: ARRAY
3832: ST_TO_ADDR
// for r in starting_crates do
3833: LD_ADDR_VAR 0 7
3837: PUSH
3838: LD_EXP 21
3842: PUSH
3843: FOR_IN
3844: IFFALSE 3876
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3846: LD_INT 1
3848: PPUSH
3849: LD_INT 5
3851: PPUSH
3852: LD_VAR 0 4
3856: PPUSH
3857: LD_VAR 0 5
3861: PPUSH
3862: LD_VAR 0 7
3866: PPUSH
3867: LD_INT 0
3869: PPUSH
3870: CALL_OW 60
3874: GO 3843
3876: POP
3877: POP
// if def_morale_flags then
3878: LD_EXP 10
3882: IFFALSE 3961
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3884: LD_ADDR_EXP 49
3888: PUSH
3889: LD_EXP 49
3893: PUSH
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_VAR 0 4
3903: PPUSH
3904: LD_VAR 0 5
3908: PPUSH
3909: LD_INT 1
3911: PUSH
3912: LD_INT 100
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PUSH
3919: LD_INT 2
3921: PUSH
3922: LD_INT 50
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PUSH
3929: LD_INT 3
3931: PUSH
3932: LD_INT 20
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PUSH
3939: LD_INT 20
3941: PUSH
3942: LD_INT 100
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PPUSH
3955: CALL_OW 418
3959: ADD
3960: ST_TO_ADDR
// neng := number_of_people ;
3961: LD_ADDR_VAR 0 11
3965: PUSH
3966: LD_EXP 19
3970: ST_TO_ADDR
// nsol := number_of_breastworks ;
3971: LD_ADDR_VAR 0 14
3975: PUSH
3976: LD_EXP 18
3980: ST_TO_ADDR
// if nsol < neng div 4 then
3981: LD_VAR 0 14
3985: PUSH
3986: LD_VAR 0 11
3990: PUSH
3991: LD_INT 4
3993: DIV
3994: LESS
3995: IFFALSE 4011
// nsol := neng div 4 ;
3997: LD_ADDR_VAR 0 14
4001: PUSH
4002: LD_VAR 0 11
4006: PUSH
4007: LD_INT 4
4009: DIV
4010: ST_TO_ADDR
// neng := neng - nsol ;
4011: LD_ADDR_VAR 0 11
4015: PUSH
4016: LD_VAR 0 11
4020: PUSH
4021: LD_VAR 0 14
4025: MINUS
4026: ST_TO_ADDR
// nsci := neng div 3 ;
4027: LD_ADDR_VAR 0 12
4031: PUSH
4032: LD_VAR 0 11
4036: PUSH
4037: LD_INT 3
4039: DIV
4040: ST_TO_ADDR
// if nsci < 1 then
4041: LD_VAR 0 12
4045: PUSH
4046: LD_INT 1
4048: LESS
4049: IFFALSE 4059
// nsci := 1 ;
4051: LD_ADDR_VAR 0 12
4055: PUSH
4056: LD_INT 1
4058: ST_TO_ADDR
// neng := neng - nsci ;
4059: LD_ADDR_VAR 0 11
4063: PUSH
4064: LD_VAR 0 11
4068: PUSH
4069: LD_VAR 0 12
4073: MINUS
4074: ST_TO_ADDR
// nmech := neng div 2 ;
4075: LD_ADDR_VAR 0 13
4079: PUSH
4080: LD_VAR 0 11
4084: PUSH
4085: LD_INT 2
4087: DIV
4088: ST_TO_ADDR
// neng := neng - nmech ;
4089: LD_ADDR_VAR 0 11
4093: PUSH
4094: LD_VAR 0 11
4098: PUSH
4099: LD_VAR 0 13
4103: MINUS
4104: ST_TO_ADDR
// if neng < 1 then
4105: LD_VAR 0 11
4109: PUSH
4110: LD_INT 1
4112: LESS
4113: IFFALSE 4123
// neng := 1 ;
4115: LD_ADDR_VAR 0 11
4119: PUSH
4120: LD_INT 1
4122: ST_TO_ADDR
// commander := true ;
4123: LD_ADDR_LOC 1
4127: PUSH
4128: LD_INT 1
4130: ST_TO_ADDR
// soldiers_created := 0 ;
4131: LD_ADDR_LOC 4
4135: PUSH
4136: LD_INT 0
4138: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4139: LD_ADDR_VAR 0 6
4143: PUSH
4144: DOUBLE
4145: LD_INT 1
4147: DEC
4148: ST_TO_ADDR
4149: LD_EXP 18
4153: PUSH
4154: FOR_TO
4155: IFFALSE 4399
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4157: LD_ADDR_VAR 0 4
4161: PUSH
4162: LD_EXP 46
4166: PUSH
4167: LD_VAR 0 3
4171: ARRAY
4172: PUSH
4173: LD_VAR 0 6
4177: ARRAY
4178: PUSH
4179: LD_INT 1
4181: ARRAY
4182: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4183: LD_ADDR_VAR 0 5
4187: PUSH
4188: LD_EXP 46
4192: PUSH
4193: LD_VAR 0 3
4197: ARRAY
4198: PUSH
4199: LD_VAR 0 6
4203: ARRAY
4204: PUSH
4205: LD_INT 2
4207: ARRAY
4208: ST_TO_ADDR
// bc_type := b_breastwork ;
4209: LD_ADDR_OWVAR 42
4213: PUSH
4214: LD_INT 31
4216: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4217: LD_ADDR_VAR 0 9
4221: PUSH
4222: LD_VAR 0 4
4226: PPUSH
4227: LD_VAR 0 5
4231: PPUSH
4232: LD_EXP 46
4236: PUSH
4237: LD_VAR 0 3
4241: ARRAY
4242: PUSH
4243: LD_VAR 0 6
4247: ARRAY
4248: PUSH
4249: LD_INT 3
4251: ARRAY
4252: PPUSH
4253: CALL_OW 47
4257: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4258: LD_ADDR_VAR 0 4
4262: PUSH
4263: LD_VAR 0 4
4267: PPUSH
4268: LD_EXP 46
4272: PUSH
4273: LD_VAR 0 3
4277: ARRAY
4278: PUSH
4279: LD_VAR 0 6
4283: ARRAY
4284: PUSH
4285: LD_INT 3
4287: ARRAY
4288: PPUSH
4289: LD_INT 2
4291: PPUSH
4292: CALL_OW 272
4296: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4297: LD_ADDR_VAR 0 5
4301: PUSH
4302: LD_VAR 0 5
4306: PPUSH
4307: LD_EXP 46
4311: PUSH
4312: LD_VAR 0 3
4316: ARRAY
4317: PUSH
4318: LD_VAR 0 6
4322: ARRAY
4323: PUSH
4324: LD_INT 3
4326: ARRAY
4327: PPUSH
4328: LD_INT 2
4330: PPUSH
4331: CALL_OW 273
4335: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
4336: LD_ADDR_VAR 0 8
4340: PUSH
4341: LD_INT 1
4343: PPUSH
4344: LD_INT 1
4346: PPUSH
4347: LD_VAR 0 4
4351: PPUSH
4352: LD_VAR 0 5
4356: PPUSH
4357: LD_INT 0
4359: PPUSH
4360: CALL 2908 0 5
4364: PUSH
4365: LD_INT 1
4367: ARRAY
4368: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4369: LD_ADDR_LOC 4
4373: PUSH
4374: LD_LOC 4
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4383: LD_VAR 0 8
4387: PPUSH
4388: LD_VAR 0 9
4392: PPUSH
4393: CALL_OW 120
// end ;
4397: GO 4154
4399: POP
4400: POP
// x := start_def [ pos ] [ 1 ] ;
4401: LD_ADDR_VAR 0 4
4405: PUSH
4406: LD_EXP 47
4410: PUSH
4411: LD_VAR 0 3
4415: ARRAY
4416: PUSH
4417: LD_INT 1
4419: ARRAY
4420: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4421: LD_ADDR_VAR 0 5
4425: PUSH
4426: LD_EXP 47
4430: PUSH
4431: LD_VAR 0 3
4435: ARRAY
4436: PUSH
4437: LD_INT 2
4439: ARRAY
4440: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4441: LD_VAR 0 14
4445: PUSH
4446: LD_EXP 18
4450: MINUS
4451: PPUSH
4452: LD_INT 1
4454: PPUSH
4455: LD_VAR 0 4
4459: PPUSH
4460: LD_VAR 0 5
4464: PPUSH
4465: LD_INT 5
4467: PPUSH
4468: CALL 2908 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4472: LD_VAR 0 11
4476: PPUSH
4477: LD_INT 2
4479: PPUSH
4480: LD_VAR 0 4
4484: PPUSH
4485: LD_VAR 0 5
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: CALL 2908 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4497: LD_VAR 0 13
4501: PPUSH
4502: LD_INT 3
4504: PPUSH
4505: LD_VAR 0 4
4509: PPUSH
4510: LD_VAR 0 5
4514: PPUSH
4515: LD_INT 5
4517: PPUSH
4518: CALL 2908 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4522: LD_VAR 0 12
4526: PPUSH
4527: LD_INT 4
4529: PPUSH
4530: LD_VAR 0 4
4534: PPUSH
4535: LD_VAR 0 5
4539: PPUSH
4540: LD_INT 5
4542: PPUSH
4543: CALL 2908 0 5
// if not global_defined then
4547: LD_LOC 3
4551: NOT
4552: IFFALSE 4562
// global_defined := true ;
4554: LD_ADDR_LOC 3
4558: PUSH
4559: LD_INT 1
4561: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4562: LD_EXP 11
4566: PUSH
4567: LD_INT 20
4569: PPUSH
4570: LD_VAR 0 1
4574: PPUSH
4575: CALL_OW 321
4579: PUSH
4580: LD_INT 1
4582: EQUAL
4583: AND
4584: IFFALSE 4601
// SetTech ( tech_SibDet , side , state_researched ) ;
4586: LD_INT 20
4588: PPUSH
4589: LD_VAR 0 1
4593: PPUSH
4594: LD_INT 2
4596: PPUSH
4597: CALL_OW 322
// if def_siberite_bomb = 1 then
4601: LD_EXP 14
4605: PUSH
4606: LD_INT 1
4608: EQUAL
4609: IFFALSE 4643
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4611: LD_INT 25
4613: PPUSH
4614: LD_VAR 0 1
4618: PPUSH
4619: LD_INT 1
4621: PPUSH
4622: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4626: LD_INT 73
4628: PPUSH
4629: LD_VAR 0 1
4633: PPUSH
4634: LD_INT 1
4636: PPUSH
4637: CALL_OW 322
// end else
4641: GO 4673
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4643: LD_INT 25
4645: PPUSH
4646: LD_VAR 0 1
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4658: LD_INT 73
4660: PPUSH
4661: LD_VAR 0 1
4665: PPUSH
4666: LD_INT 0
4668: PPUSH
4669: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4673: LD_INT 24
4675: PPUSH
4676: LD_VAR 0 1
4680: PPUSH
4681: LD_INT 0
4683: PPUSH
4684: CALL_OW 322
// end ;
4688: LD_VAR 0 2
4692: RET
// every 0 0$1 do
4693: GO 4695
4695: DISABLE
// if ( def_siberite_bomb > 1 ) then
4696: LD_EXP 14
4700: PUSH
4701: LD_INT 1
4703: GREATER
4704: IFFALSE 4719
// begin wait ( siberite_bomb_Delay ) ;
4706: LD_EXP 33
4710: PPUSH
4711: CALL_OW 67
// EnableSibFiss ;
4715: CALL 4720 0 0
// end ;
4719: END
// function EnableSibFiss ; var i ; begin
4720: LD_INT 0
4722: PPUSH
4723: PPUSH
// for i := 1 to 8 do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_INT 8
4736: PUSH
4737: FOR_TO
4738: IFFALSE 4784
// if Side_Positions [ i ] then
4740: LD_EXP 40
4744: PUSH
4745: LD_VAR 0 2
4749: ARRAY
4750: IFFALSE 4782
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4752: LD_INT 25
4754: PPUSH
4755: LD_VAR 0 2
4759: PPUSH
4760: LD_INT 1
4762: PPUSH
4763: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4767: LD_INT 73
4769: PPUSH
4770: LD_VAR 0 2
4774: PPUSH
4775: LD_INT 1
4777: PPUSH
4778: CALL_OW 322
// end ;
4782: GO 4737
4784: POP
4785: POP
// end ;
4786: LD_VAR 0 1
4790: RET
// function prepare_sides ; var i ; begin
4791: LD_INT 0
4793: PPUSH
4794: PPUSH
// global_units := [ ] ;
4795: LD_ADDR_LOC 2
4799: PUSH
4800: EMPTY
4801: ST_TO_ADDR
// global_defined := false ;
4802: LD_ADDR_LOC 3
4806: PUSH
4807: LD_INT 0
4809: ST_TO_ADDR
// for i := 1 to 8 do
4810: LD_ADDR_VAR 0 2
4814: PUSH
4815: DOUBLE
4816: LD_INT 1
4818: DEC
4819: ST_TO_ADDR
4820: LD_INT 8
4822: PUSH
4823: FOR_TO
4824: IFFALSE 4849
// if Side_Positions [ i ] then
4826: LD_EXP 40
4830: PUSH
4831: LD_VAR 0 2
4835: ARRAY
4836: IFFALSE 4847
// prepare_side ( i ) ;
4838: LD_VAR 0 2
4842: PPUSH
4843: CALL 3405 0 1
4847: GO 4823
4849: POP
4850: POP
// end ;
4851: LD_VAR 0 1
4855: RET
// starting begin disable ( 400 ) ;
4856: LD_INT 400
4858: DISABLE_MARKED
// disable ( 401 ) ;
4859: LD_INT 401
4861: DISABLE_MARKED
// disable ( 10 ) ;
4862: LD_INT 10
4864: DISABLE_MARKED
// disable ( 11 ) ;
4865: LD_INT 11
4867: DISABLE_MARKED
// mp_selectmsg := true ;
4868: LD_ADDR_OWVAR 13
4872: PUSH
4873: LD_INT 1
4875: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4876: CALL 0 0 0
// prepare_map_coordinates ;
4880: CALL 1651 0 0
// set_shared_visions_and_alliances ;
4884: CALL 2491 0 0
// prepare_sides ;
4888: CALL 4791 0 0
// Init_Win_Condition ;
4892: CALL 6260 0 0
// init_respawning ;
4896: CALL 14387 0 0
// AnimateTrees ( true ) ;
4900: LD_INT 1
4902: PPUSH
4903: CALL_OW 573
// InitApeman ;
4907: CALL 8611 0 0
// init_infos ;
4911: CALL 6957 0 0
// your_side := Player_Side ;
4915: LD_ADDR_OWVAR 2
4919: PUSH
4920: LD_EXP 36
4924: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4925: LD_ADDR_OWVAR 71
4929: PUSH
4930: LD_EXP 41
4934: PUSH
4935: LD_OWVAR 2
4939: ARRAY
4940: ST_TO_ADDR
// ResetFog ;
4941: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4945: LD_EXP 47
4949: PUSH
4950: LD_EXP 40
4954: PUSH
4955: LD_OWVAR 2
4959: ARRAY
4960: ARRAY
4961: PUSH
4962: LD_INT 1
4964: ARRAY
4965: PPUSH
4966: LD_EXP 47
4970: PUSH
4971: LD_EXP 40
4975: PUSH
4976: LD_OWVAR 2
4980: ARRAY
4981: ARRAY
4982: PUSH
4983: LD_INT 2
4985: ARRAY
4986: PPUSH
4987: CALL_OW 86
// end ; end_of_file
4991: END
// every 0 0$1 + 0 0$0.6 do var i , Amount ;
4992: GO 4994
4994: DISABLE
4995: LD_INT 0
4997: PPUSH
4998: PPUSH
// begin case tick of 1 .. 1 1$0 :
4999: LD_OWVAR 1
5003: PUSH
5004: LD_INT 1
5006: DOUBLE
5007: GREATEREQUAL
5008: IFFALSE 5016
5010: LD_INT 2100
5012: DOUBLE
5013: LESSEQUAL
5014: IFTRUE 5018
5016: GO 5046
5018: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5019: LD_EXP 23
5023: PUSH
5024: LD_INT 100
5026: DIVREAL
5027: PUSH
5028: LD_INT 525
5030: PPUSH
5031: LD_INT 1050
5033: PPUSH
5034: CALL_OW 12
5038: MUL
5039: PPUSH
5040: CALL_OW 67
5044: GO 5348
5046: LD_INT 2100
5048: PUSH
5049: LD_INT 1
5051: PLUS
5052: DOUBLE
5053: GREATEREQUAL
5054: IFFALSE 5062
5056: LD_INT 10500
5058: DOUBLE
5059: LESSEQUAL
5060: IFTRUE 5064
5062: GO 5092
5064: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5065: LD_EXP 23
5069: PUSH
5070: LD_INT 100
5072: DIVREAL
5073: PUSH
5074: LD_INT 1050
5076: PPUSH
5077: LD_INT 1750
5079: PPUSH
5080: CALL_OW 12
5084: MUL
5085: PPUSH
5086: CALL_OW 67
5090: GO 5348
5092: LD_INT 10500
5094: PUSH
5095: LD_INT 1
5097: PLUS
5098: DOUBLE
5099: GREATEREQUAL
5100: IFFALSE 5108
5102: LD_INT 21000
5104: DOUBLE
5105: LESSEQUAL
5106: IFTRUE 5110
5108: GO 5138
5110: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5111: LD_EXP 23
5115: PUSH
5116: LD_INT 100
5118: DIVREAL
5119: PUSH
5120: LD_INT 1750
5122: PPUSH
5123: LD_INT 2100
5125: PPUSH
5126: CALL_OW 12
5130: MUL
5131: PPUSH
5132: CALL_OW 67
5136: GO 5348
5138: LD_INT 21000
5140: PUSH
5141: LD_INT 1
5143: PLUS
5144: DOUBLE
5145: GREATEREQUAL
5146: IFFALSE 5154
5148: LD_INT 42000
5150: DOUBLE
5151: LESSEQUAL
5152: IFTRUE 5156
5154: GO 5184
5156: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5157: LD_EXP 23
5161: PUSH
5162: LD_INT 100
5164: DIVREAL
5165: PUSH
5166: LD_INT 2100
5168: PPUSH
5169: LD_INT 2275
5171: PPUSH
5172: CALL_OW 12
5176: MUL
5177: PPUSH
5178: CALL_OW 67
5182: GO 5348
5184: LD_INT 42000
5186: PUSH
5187: LD_INT 1
5189: PLUS
5190: DOUBLE
5191: GREATEREQUAL
5192: IFFALSE 5200
5194: LD_INT 63000
5196: DOUBLE
5197: LESSEQUAL
5198: IFTRUE 5202
5200: GO 5230
5202: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5203: LD_EXP 23
5207: PUSH
5208: LD_INT 100
5210: DIVREAL
5211: PUSH
5212: LD_INT 2275
5214: PPUSH
5215: LD_INT 2450
5217: PPUSH
5218: CALL_OW 12
5222: MUL
5223: PPUSH
5224: CALL_OW 67
5228: GO 5348
5230: LD_INT 63000
5232: PUSH
5233: LD_INT 1
5235: PLUS
5236: DOUBLE
5237: GREATEREQUAL
5238: IFFALSE 5246
5240: LD_INT 105000
5242: DOUBLE
5243: LESSEQUAL
5244: IFTRUE 5248
5246: GO 5276
5248: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5249: LD_EXP 23
5253: PUSH
5254: LD_INT 100
5256: DIVREAL
5257: PUSH
5258: LD_INT 2450
5260: PPUSH
5261: LD_INT 2800
5263: PPUSH
5264: CALL_OW 12
5268: MUL
5269: PPUSH
5270: CALL_OW 67
5274: GO 5348
5276: LD_INT 105000
5278: PUSH
5279: LD_INT 1
5281: PLUS
5282: DOUBLE
5283: GREATEREQUAL
5284: IFFALSE 5292
5286: LD_INT 630000
5288: DOUBLE
5289: LESSEQUAL
5290: IFTRUE 5294
5292: GO 5322
5294: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5295: LD_EXP 23
5299: PUSH
5300: LD_INT 100
5302: DIVREAL
5303: PUSH
5304: LD_INT 2800
5306: PPUSH
5307: LD_INT 3500
5309: PPUSH
5310: CALL_OW 12
5314: MUL
5315: PPUSH
5316: CALL_OW 67
5320: GO 5348
5322: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5323: LD_EXP 23
5327: PUSH
5328: LD_INT 100
5330: DIVREAL
5331: PUSH
5332: LD_INT 3500
5334: PPUSH
5335: LD_INT 3850
5337: PPUSH
5338: CALL_OW 12
5342: MUL
5343: PPUSH
5344: CALL_OW 67
// Amount := Rand ( 3 , 5 ) ;
5348: LD_ADDR_VAR 0 2
5352: PUSH
5353: LD_INT 3
5355: PPUSH
5356: LD_INT 5
5358: PPUSH
5359: CALL_OW 12
5363: ST_TO_ADDR
// if Rand ( 0 , 1 ) = 1 then
5364: LD_INT 0
5366: PPUSH
5367: LD_INT 1
5369: PPUSH
5370: CALL_OW 12
5374: PUSH
5375: LD_INT 1
5377: EQUAL
5378: IFFALSE 5442
// for i in ( Side_Positions diff [ 0 ] ) do
5380: LD_ADDR_VAR 0 1
5384: PUSH
5385: LD_EXP 40
5389: PUSH
5390: LD_INT 0
5392: PUSH
5393: EMPTY
5394: LIST
5395: DIFF
5396: PUSH
5397: FOR_IN
5398: IFFALSE 5438
// CreateCratesArea ( Amount , [ Base1 , Base2 , Base3 , Base4 ] [ i ] , true ) else
5400: LD_VAR 0 2
5404: PPUSH
5405: LD_INT 18
5407: PUSH
5408: LD_INT 19
5410: PUSH
5411: LD_INT 20
5413: PUSH
5414: LD_INT 21
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: PUSH
5423: LD_VAR 0 1
5427: ARRAY
5428: PPUSH
5429: LD_INT 1
5431: PPUSH
5432: CALL_OW 55
5436: GO 5397
5438: POP
5439: POP
5440: GO 5502
// for i in ( Side_Positions diff [ 0 ] ) do
5442: LD_ADDR_VAR 0 1
5446: PUSH
5447: LD_EXP 40
5451: PUSH
5452: LD_INT 0
5454: PUSH
5455: EMPTY
5456: LIST
5457: DIFF
5458: PUSH
5459: FOR_IN
5460: IFFALSE 5500
// CreateCratesArea ( Amount , [ Safe1 , Safe2 , Safe3 , Safe4 ] [ i ] , true ) ;
5462: LD_VAR 0 2
5466: PPUSH
5467: LD_INT 26
5469: PUSH
5470: LD_INT 27
5472: PUSH
5473: LD_INT 28
5475: PUSH
5476: LD_INT 29
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: PUSH
5485: LD_VAR 0 1
5489: ARRAY
5490: PPUSH
5491: LD_INT 1
5493: PPUSH
5494: CALL_OW 55
5498: GO 5459
5500: POP
5501: POP
// enable ;
5502: ENABLE
// end ;
5503: PPOPN 2
5505: END
// every 0 0$25 + 0 0$1.0 do
5506: GO 5508
5508: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5509: LD_INT 30
5511: PPUSH
5512: LD_INT 1
5514: PPUSH
5515: CALL_OW 287
5519: PUSH
5520: LD_INT 200
5522: PUSH
5523: LD_EXP 23
5527: MINUS
5528: PUSH
5529: LD_INT 25
5531: DIVREAL
5532: PUSH
5533: LD_INT 5
5535: MUL
5536: LESS
5537: IFFALSE 5560
// CreateCratesArea ( Rand ( 2 , 4 ) , Between1 , true ) ;
5539: LD_INT 2
5541: PPUSH
5542: LD_INT 4
5544: PPUSH
5545: CALL_OW 12
5549: PPUSH
5550: LD_INT 30
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5560: LD_INT 31
5562: PPUSH
5563: LD_INT 1
5565: PPUSH
5566: CALL_OW 287
5570: PUSH
5571: LD_INT 200
5573: PUSH
5574: LD_EXP 23
5578: MINUS
5579: PUSH
5580: LD_INT 25
5582: DIVREAL
5583: PUSH
5584: LD_INT 5
5586: MUL
5587: LESS
5588: IFFALSE 5611
// CreateCratesArea ( Rand ( 2 , 4 ) , Between2 , true ) ;
5590: LD_INT 2
5592: PPUSH
5593: LD_INT 4
5595: PPUSH
5596: CALL_OW 12
5600: PPUSH
5601: LD_INT 31
5603: PPUSH
5604: LD_INT 1
5606: PPUSH
5607: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5611: LD_INT 32
5613: PPUSH
5614: LD_INT 1
5616: PPUSH
5617: CALL_OW 287
5621: PUSH
5622: LD_INT 200
5624: PUSH
5625: LD_EXP 23
5629: MINUS
5630: PUSH
5631: LD_INT 25
5633: DIVREAL
5634: PUSH
5635: LD_INT 5
5637: MUL
5638: LESS
5639: IFFALSE 5662
// CreateCratesArea ( Rand ( 2 , 4 ) , Between3 , true ) ;
5641: LD_INT 2
5643: PPUSH
5644: LD_INT 4
5646: PPUSH
5647: CALL_OW 12
5651: PPUSH
5652: LD_INT 32
5654: PPUSH
5655: LD_INT 1
5657: PPUSH
5658: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5662: LD_INT 33
5664: PPUSH
5665: LD_INT 1
5667: PPUSH
5668: CALL_OW 287
5672: PUSH
5673: LD_INT 200
5675: PUSH
5676: LD_EXP 23
5680: MINUS
5681: PUSH
5682: LD_INT 25
5684: DIVREAL
5685: PUSH
5686: LD_INT 5
5688: MUL
5689: LESS
5690: IFFALSE 5713
// CreateCratesArea ( Rand ( 2 , 4 ) , Between4 , true ) ;
5692: LD_INT 2
5694: PPUSH
5695: LD_INT 4
5697: PPUSH
5698: CALL_OW 12
5702: PPUSH
5703: LD_INT 33
5705: PPUSH
5706: LD_INT 1
5708: PPUSH
5709: CALL_OW 55
// if GetResourceArea ( Ring1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5713: LD_INT 34
5715: PPUSH
5716: LD_INT 1
5718: PPUSH
5719: CALL_OW 287
5723: PUSH
5724: LD_INT 200
5726: PUSH
5727: LD_EXP 23
5731: MINUS
5732: PUSH
5733: LD_INT 50
5735: DIVREAL
5736: PUSH
5737: LD_INT 5
5739: MUL
5740: LESS
5741: IFFALSE 5764
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring1 , true ) ;
5743: LD_INT 3
5745: PPUSH
5746: LD_INT 4
5748: PPUSH
5749: CALL_OW 12
5753: PPUSH
5754: LD_INT 34
5756: PPUSH
5757: LD_INT 1
5759: PPUSH
5760: CALL_OW 55
// if GetResourceArea ( Ring2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5764: LD_INT 35
5766: PPUSH
5767: LD_INT 1
5769: PPUSH
5770: CALL_OW 287
5774: PUSH
5775: LD_INT 200
5777: PUSH
5778: LD_EXP 23
5782: MINUS
5783: PUSH
5784: LD_INT 50
5786: DIVREAL
5787: PUSH
5788: LD_INT 5
5790: MUL
5791: LESS
5792: IFFALSE 5815
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring2 , true ) ;
5794: LD_INT 3
5796: PPUSH
5797: LD_INT 4
5799: PPUSH
5800: CALL_OW 12
5804: PPUSH
5805: LD_INT 35
5807: PPUSH
5808: LD_INT 1
5810: PPUSH
5811: CALL_OW 55
// if GetResourceArea ( Ring3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5815: LD_INT 36
5817: PPUSH
5818: LD_INT 1
5820: PPUSH
5821: CALL_OW 287
5825: PUSH
5826: LD_INT 200
5828: PUSH
5829: LD_EXP 23
5833: MINUS
5834: PUSH
5835: LD_INT 50
5837: DIVREAL
5838: PUSH
5839: LD_INT 5
5841: MUL
5842: LESS
5843: IFFALSE 5866
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring3 , true ) ;
5845: LD_INT 3
5847: PPUSH
5848: LD_INT 4
5850: PPUSH
5851: CALL_OW 12
5855: PPUSH
5856: LD_INT 36
5858: PPUSH
5859: LD_INT 1
5861: PPUSH
5862: CALL_OW 55
// if GetResourceArea ( Ring4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5866: LD_INT 37
5868: PPUSH
5869: LD_INT 1
5871: PPUSH
5872: CALL_OW 287
5876: PUSH
5877: LD_INT 200
5879: PUSH
5880: LD_EXP 23
5884: MINUS
5885: PUSH
5886: LD_INT 50
5888: DIVREAL
5889: PUSH
5890: LD_INT 5
5892: MUL
5893: LESS
5894: IFFALSE 5917
// CreateCratesArea ( Rand ( 3 , 4 ) , Ring4 , true ) ;
5896: LD_INT 3
5898: PPUSH
5899: LD_INT 4
5901: PPUSH
5902: CALL_OW 12
5906: PPUSH
5907: LD_INT 37
5909: PPUSH
5910: LD_INT 1
5912: PPUSH
5913: CALL_OW 55
// if GetResourceArea ( Center , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5917: LD_INT 38
5919: PPUSH
5920: LD_INT 1
5922: PPUSH
5923: CALL_OW 287
5927: PUSH
5928: LD_INT 200
5930: PUSH
5931: LD_EXP 23
5935: MINUS
5936: PUSH
5937: LD_INT 25
5939: DIVREAL
5940: PUSH
5941: LD_INT 5
5943: MUL
5944: LESS
5945: IFFALSE 5960
// CreateCratesArea ( 5 , Center , true ) ;
5947: LD_INT 5
5949: PPUSH
5950: LD_INT 38
5952: PPUSH
5953: LD_INT 1
5955: PPUSH
5956: CALL_OW 55
// enable ;
5960: ENABLE
// end ; end_of_file
5961: END
// function prepare_treasure ( x , y ) ; var sm , i ; begin
5962: LD_INT 0
5964: PPUSH
5965: PPUSH
5966: PPUSH
// sm := rand ( 0 , 6 ) ;
5967: LD_ADDR_VAR 0 4
5971: PUSH
5972: LD_INT 0
5974: PPUSH
5975: LD_INT 6
5977: PPUSH
5978: CALL_OW 12
5982: ST_TO_ADDR
// for i := 0 to 15 do
5983: LD_ADDR_VAR 0 5
5987: PUSH
5988: DOUBLE
5989: LD_INT 0
5991: DEC
5992: ST_TO_ADDR
5993: LD_INT 15
5995: PUSH
5996: FOR_TO
5997: IFFALSE 6103
// begin MoveAreaXY ( p1 + i , x , y ) ;
5999: LD_INT 1
6001: PUSH
6002: LD_VAR 0 5
6006: PLUS
6007: PPUSH
6008: LD_VAR 0 1
6012: PPUSH
6013: LD_VAR 0 2
6017: PPUSH
6018: CALL_OW 425
// if prob ( 30 ) then
6022: LD_INT 30
6024: PPUSH
6025: CALL_OW 13
6029: IFFALSE 6047
// sm := rand ( 0 , 6 ) ;
6031: LD_ADDR_VAR 0 4
6035: PUSH
6036: LD_INT 0
6038: PPUSH
6039: LD_INT 6
6041: PPUSH
6042: CALL_OW 12
6046: ST_TO_ADDR
// x := ShiftX ( x - 1 , sm , 1 ) ;
6047: LD_ADDR_VAR 0 1
6051: PUSH
6052: LD_VAR 0 1
6056: PUSH
6057: LD_INT 1
6059: MINUS
6060: PPUSH
6061: LD_VAR 0 4
6065: PPUSH
6066: LD_INT 1
6068: PPUSH
6069: CALL_OW 272
6073: ST_TO_ADDR
// y := ShiftY ( y - 1 , sm , 1 ) ;
6074: LD_ADDR_VAR 0 2
6078: PUSH
6079: LD_VAR 0 2
6083: PUSH
6084: LD_INT 1
6086: MINUS
6087: PPUSH
6088: LD_VAR 0 4
6092: PPUSH
6093: LD_INT 1
6095: PPUSH
6096: CALL_OW 273
6100: ST_TO_ADDR
// end ;
6101: GO 5996
6103: POP
6104: POP
// end ;
6105: LD_VAR 0 3
6109: RET
// function show_treasure ; var i ; begin
6110: LD_INT 0
6112: PPUSH
6113: PPUSH
// SetAreaMapShow ( p16 , 1 ) ;
6114: LD_INT 16
6116: PPUSH
6117: LD_INT 1
6119: PPUSH
6120: CALL_OW 424
// for i := 1 to 15 do
6124: LD_ADDR_VAR 0 2
6128: PUSH
6129: DOUBLE
6130: LD_INT 1
6132: DEC
6133: ST_TO_ADDR
6134: LD_INT 15
6136: PUSH
6137: FOR_TO
6138: IFFALSE 6185
// begin wait ( 0 0$10 ) ;
6140: LD_INT 350
6142: PPUSH
6143: CALL_OW 67
// SetAreaMapShow ( p16 - i + 1 , 0 ) ;
6147: LD_INT 16
6149: PUSH
6150: LD_VAR 0 2
6154: MINUS
6155: PUSH
6156: LD_INT 1
6158: PLUS
6159: PPUSH
6160: LD_INT 0
6162: PPUSH
6163: CALL_OW 424
// SetAreaMapShow ( p16 - i , 1 ) ;
6167: LD_INT 16
6169: PUSH
6170: LD_VAR 0 2
6174: MINUS
6175: PPUSH
6176: LD_INT 1
6178: PPUSH
6179: CALL_OW 424
// end ;
6183: GO 6137
6185: POP
6186: POP
// wait ( 0 0$30 ) ;
6187: LD_INT 1050
6189: PPUSH
6190: CALL_OW 67
// SetAreaMapShow ( p1 , 0 ) ;
6194: LD_INT 1
6196: PPUSH
6197: LD_INT 0
6199: PPUSH
6200: CALL_OW 424
// end ;
6204: LD_VAR 0 1
6208: RET
// export function new_treasure ; var xy ; begin
6209: LD_INT 0
6211: PPUSH
6212: PPUSH
// xy := RandHexArea ( All , false ) ;
6213: LD_ADDR_VAR 0 2
6217: PUSH
6218: LD_INT 17
6220: PPUSH
6221: LD_INT 0
6223: PPUSH
6224: CALL_OW 16
6228: ST_TO_ADDR
// prepare_treasure ( xy [ 1 ] , xy [ 2 ] ) ;
6229: LD_VAR 0 2
6233: PUSH
6234: LD_INT 1
6236: ARRAY
6237: PPUSH
6238: LD_VAR 0 2
6242: PUSH
6243: LD_INT 2
6245: ARRAY
6246: PPUSH
6247: CALL 5962 0 2
// show_treasure ;
6251: CALL 6110 0 0
// end ; end_of_file
6255: LD_VAR 0 1
6259: RET
// export function Init_Win_Condition ; begin
6260: LD_INT 0
6262: PPUSH
// disable ( 98 ) ;
6263: LD_INT 98
6265: DISABLE_MARKED
// disable ( 99 ) ;
6266: LD_INT 99
6268: DISABLE_MARKED
// if Team_Game then
6269: LD_EXP 44
6273: IFFALSE 6280
// enable ( 98 ) else
6275: LD_INT 98
6277: ENABLE_MARKED
6278: GO 6283
// enable ( 99 ) ;
6280: LD_INT 99
6282: ENABLE_MARKED
// end ;
6283: LD_VAR 0 1
6287: RET
// function CanWinLoose ; begin
6288: LD_INT 0
6290: PPUSH
// Result := true ;
6291: LD_ADDR_VAR 0 1
6295: PUSH
6296: LD_INT 1
6298: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6299: CALL_OW 518
6303: PUSH
6304: CALL_OW 519
6308: PUSH
6309: LD_INT 0
6311: GREATER
6312: AND
6313: IFFALSE 6323
// Result := false ;
6315: LD_ADDR_VAR 0 1
6319: PUSH
6320: LD_INT 0
6322: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6323: CALL_OW 531
6327: PUSH
6328: CALL_OW 519
6332: PUSH
6333: LD_INT 1
6335: GREATER
6336: AND
6337: IFFALSE 6347
// Result := false ;
6339: LD_ADDR_VAR 0 1
6343: PUSH
6344: LD_INT 0
6346: ST_TO_ADDR
// end ;
6347: LD_VAR 0 1
6351: RET
// function HasPower ( i ) ; begin
6352: LD_INT 0
6354: PPUSH
// if def_people_respawning then
6355: LD_EXP 13
6359: IFFALSE 6450
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
6361: LD_ADDR_VAR 0 2
6365: PUSH
6366: LD_INT 22
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: LD_INT 2
6380: PUSH
6381: LD_INT 21
6383: PUSH
6384: LD_INT 1
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 33
6393: PUSH
6394: LD_INT 3
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 33
6403: PUSH
6404: LD_INT 5
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 30
6413: PUSH
6414: LD_INT 0
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 30
6423: PUSH
6424: LD_INT 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PPUSH
6443: CALL_OW 69
6447: ST_TO_ADDR
6448: GO 6515
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
6450: LD_ADDR_VAR 0 2
6454: PUSH
6455: LD_INT 22
6457: PUSH
6458: LD_VAR 0 1
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: LD_INT 2
6469: PUSH
6470: LD_INT 21
6472: PUSH
6473: LD_INT 1
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 33
6482: PUSH
6483: LD_INT 3
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 33
6492: PUSH
6493: LD_INT 5
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PPUSH
6510: CALL_OW 69
6514: ST_TO_ADDR
// end ;
6515: LD_VAR 0 2
6519: RET
// function AlliedSides ( i , j ) ; begin
6520: LD_INT 0
6522: PPUSH
// Result := false ;
6523: LD_ADDR_VAR 0 3
6527: PUSH
6528: LD_INT 0
6530: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
6531: LD_VAR 0 1
6535: PPUSH
6536: LD_VAR 0 2
6540: PPUSH
6541: CALL_OW 81
6545: PUSH
6546: LD_INT 1
6548: EQUAL
6549: PUSH
6550: LD_VAR 0 2
6554: PPUSH
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 81
6564: PUSH
6565: LD_INT 1
6567: EQUAL
6568: AND
6569: PUSH
6570: LD_VAR 0 1
6574: PPUSH
6575: CALL_OW 83
6579: AND
6580: PUSH
6581: LD_VAR 0 2
6585: PPUSH
6586: CALL_OW 83
6590: AND
6591: IFFALSE 6601
// Result := true ;
6593: LD_ADDR_VAR 0 3
6597: PUSH
6598: LD_INT 1
6600: ST_TO_ADDR
// end ;
6601: LD_VAR 0 3
6605: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
6606: CALL 6288 0 0
6610: IFFALSE 6619
6612: GO 6614
6614: DISABLE
// YouLostInMultiplayer ;
6615: CALL_OW 107
6619: END
// every 0 0$3 trigger CanWinLoose marked 401 do
6620: CALL 6288 0 0
6624: IFFALSE 6648
6626: GO 6628
6628: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
6629: LD_EXP 41
6633: PUSH
6634: LD_OWVAR 2
6638: ARRAY
6639: PPUSH
6640: CALL 9466 0 1
// YouWinInMultiplayer ;
6644: CALL_OW 106
// end ;
6648: END
// every 0 0$3 marked 98 do var i , CanWin ;
6649: GO 6651
6651: DISABLE
6652: LD_INT 0
6654: PPUSH
6655: PPUSH
// begin if not HasPower ( your_side ) then
6656: LD_OWVAR 2
6660: PPUSH
6661: CALL 6352 0 1
6665: NOT
6666: IFFALSE 6677
// begin Multiplayer_Loose_Message ;
6668: CALL_OW 521
// enable ( 400 ) ;
6672: LD_INT 400
6674: ENABLE_MARKED
// end else
6675: GO 6810
// begin CanWin := true ;
6677: LD_ADDR_VAR 0 2
6681: PUSH
6682: LD_INT 1
6684: ST_TO_ADDR
// for i := 1 to 8 do
6685: LD_ADDR_VAR 0 1
6689: PUSH
6690: DOUBLE
6691: LD_INT 1
6693: DEC
6694: ST_TO_ADDR
6695: LD_INT 8
6697: PUSH
6698: FOR_TO
6699: IFFALSE 6796
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
6701: LD_EXP 40
6705: PUSH
6706: LD_VAR 0 1
6710: ARRAY
6711: PUSH
6712: LD_VAR 0 1
6716: PPUSH
6717: CALL_OW 108
6721: AND
6722: PUSH
6723: LD_VAR 0 1
6727: PUSH
6728: LD_OWVAR 2
6732: NONEQUAL
6733: AND
6734: IFFALSE 6794
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
6736: LD_EXP 38
6740: PUSH
6741: LD_VAR 0 1
6745: ARRAY
6746: NOT
6747: PUSH
6748: LD_EXP 38
6752: PUSH
6753: LD_VAR 0 1
6757: ARRAY
6758: PUSH
6759: LD_EXP 38
6763: PUSH
6764: LD_OWVAR 2
6768: ARRAY
6769: NONEQUAL
6770: OR
6771: IFFALSE 6794
// if HasPower ( i ) then
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL 6352 0 1
6782: IFFALSE 6794
// begin CanWin := false ;
6784: LD_ADDR_VAR 0 2
6788: PUSH
6789: LD_INT 0
6791: ST_TO_ADDR
// break ;
6792: GO 6796
// end ;
6794: GO 6698
6796: POP
6797: POP
// if CanWin then
6798: LD_VAR 0 2
6802: IFFALSE 6809
// enable ( 401 ) else
6804: LD_INT 401
6806: ENABLE_MARKED
6807: GO 6810
// enable ;
6809: ENABLE
// end ; end ;
6810: PPOPN 2
6812: END
// every 0 0$3 marked 99 do var i , CanWin ;
6813: GO 6815
6815: DISABLE
6816: LD_INT 0
6818: PPUSH
6819: PPUSH
// begin if not HasPower ( your_side ) then
6820: LD_OWVAR 2
6824: PPUSH
6825: CALL 6352 0 1
6829: NOT
6830: IFFALSE 6841
// begin Multiplayer_Loose_Message ;
6832: CALL_OW 521
// enable ( 400 ) ;
6836: LD_INT 400
6838: ENABLE_MARKED
// end else
6839: GO 6954
// begin CanWin := true ;
6841: LD_ADDR_VAR 0 2
6845: PUSH
6846: LD_INT 1
6848: ST_TO_ADDR
// for i := 1 to 8 do
6849: LD_ADDR_VAR 0 1
6853: PUSH
6854: DOUBLE
6855: LD_INT 1
6857: DEC
6858: ST_TO_ADDR
6859: LD_INT 8
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6940
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
6865: LD_EXP 40
6869: PUSH
6870: LD_VAR 0 1
6874: ARRAY
6875: PUSH
6876: LD_VAR 0 1
6880: PPUSH
6881: CALL_OW 108
6885: AND
6886: PUSH
6887: LD_VAR 0 1
6891: PUSH
6892: LD_OWVAR 2
6896: NONEQUAL
6897: AND
6898: IFFALSE 6938
// if not AlliedSides ( i , your_side ) then
6900: LD_VAR 0 1
6904: PPUSH
6905: LD_OWVAR 2
6909: PPUSH
6910: CALL 6520 0 2
6914: NOT
6915: IFFALSE 6938
// if HasPower ( i ) then
6917: LD_VAR 0 1
6921: PPUSH
6922: CALL 6352 0 1
6926: IFFALSE 6938
// begin CanWin := false ;
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_INT 0
6935: ST_TO_ADDR
// break ;
6936: GO 6940
// end ;
6938: GO 6862
6940: POP
6941: POP
// if CanWin then
6942: LD_VAR 0 2
6946: IFFALSE 6953
// enable ( 401 ) else
6948: LD_INT 401
6950: ENABLE_MARKED
6951: GO 6954
// enable ;
6953: ENABLE
// end ; end ; end_of_file
6954: PPOPN 2
6956: END
// var infos ; export function init_infos ; begin
6957: LD_INT 0
6959: PPUSH
// infos = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6960: LD_ADDR_LOC 5
6964: PUSH
6965: LD_INT 0
6967: PUSH
6968: LD_INT 0
6970: PUSH
6971: LD_INT 0
6973: PUSH
6974: LD_INT 0
6976: PUSH
6977: LD_INT 0
6979: PUSH
6980: LD_INT 0
6982: PUSH
6983: LD_INT 0
6985: PUSH
6986: LD_INT 0
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: ST_TO_ADDR
// real_cost = cost ;
6999: LD_ADDR_EXP 29
7003: PUSH
7004: LD_EXP 27
7008: ST_TO_ADDR
// cost = cost * 10 ;
7009: LD_ADDR_EXP 27
7013: PUSH
7014: LD_EXP 27
7018: PUSH
7019: LD_INT 10
7021: MUL
7022: ST_TO_ADDR
// enable ;
7023: ENABLE
// end ;
7024: LD_VAR 0 1
7028: RET
// every 0 0$1 do
7029: GO 7031
7031: DISABLE
// begin if gametype <> 11 then
7032: LD_EXP 1
7036: PUSH
7037: LD_INT 11
7039: NONEQUAL
7040: IFFALSE 7044
// exit ;
7042: GO 7133
// if decr_cost_time = 0 then
7044: LD_EXP 28
7048: PUSH
7049: LD_INT 0
7051: EQUAL
7052: IFFALSE 7074
// real_cost = ( cost div 100 ) * 10 else
7054: LD_ADDR_EXP 29
7058: PUSH
7059: LD_EXP 27
7063: PUSH
7064: LD_INT 100
7066: DIV
7067: PUSH
7068: LD_INT 10
7070: MUL
7071: ST_TO_ADDR
7072: GO 7133
// repeat wait ( decr_cost_time div 5 ) ;
7074: LD_EXP 28
7078: PUSH
7079: LD_INT 5
7081: DIV
7082: PPUSH
7083: CALL_OW 67
// cost = cost * 1000 div 1149 ;
7087: LD_ADDR_EXP 27
7091: PUSH
7092: LD_EXP 27
7096: PUSH
7097: LD_INT 1000
7099: MUL
7100: PUSH
7101: LD_INT 1149
7103: DIV
7104: ST_TO_ADDR
// real_cost = ( cost div 100 ) * 10 ;
7105: LD_ADDR_EXP 29
7109: PUSH
7110: LD_EXP 27
7114: PUSH
7115: LD_INT 100
7117: DIV
7118: PUSH
7119: LD_INT 10
7121: MUL
7122: ST_TO_ADDR
// until real_cost = 10 ;
7123: LD_EXP 29
7127: PUSH
7128: LD_INT 10
7130: EQUAL
7131: IFFALSE 7074
// end ;
7133: END
// every 0 0$1 do
7134: GO 7136
7136: DISABLE
// begin if gametype <> 11 then
7137: LD_EXP 1
7141: PUSH
7142: LD_INT 11
7144: NONEQUAL
7145: IFFALSE 7153
// ShowTimer else
7147: CALL 7571 0 0
7151: GO 7157
// ShowInfos ;
7153: CALL 7159 0 0
// enable ;
7157: ENABLE
// end ;
7158: END
// function ShowInfos ; var inf , en1 , en2 , AllStrings ; begin
7159: LD_INT 0
7161: PPUSH
7162: PPUSH
7163: PPUSH
7164: PPUSH
7165: PPUSH
// if gametype <> 11 then
7166: LD_EXP 1
7170: PUSH
7171: LD_INT 11
7173: NONEQUAL
7174: IFFALSE 7178
// exit ;
7176: GO 7566
// if not your_side then
7178: LD_OWVAR 2
7182: NOT
7183: IFFALSE 7188
// begin enable ;
7185: ENABLE
// exit ;
7186: GO 7566
// end ; if Teams [ Side_Teams [ your_side ] ] [ 1 ] = your_side then
7188: LD_EXP 39
7192: PUSH
7193: LD_EXP 38
7197: PUSH
7198: LD_OWVAR 2
7202: ARRAY
7203: ARRAY
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PUSH
7209: LD_OWVAR 2
7213: EQUAL
7214: IFFALSE 7278
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7216: LD_ADDR_VAR 0 3
7220: PUSH
7221: LD_EXP 39
7225: PUSH
7226: LD_INT 3
7228: PUSH
7229: LD_EXP 38
7233: PUSH
7234: LD_OWVAR 2
7238: ARRAY
7239: MINUS
7240: ARRAY
7241: PUSH
7242: LD_INT 2
7244: ARRAY
7245: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7246: LD_ADDR_VAR 0 4
7250: PUSH
7251: LD_EXP 39
7255: PUSH
7256: LD_INT 3
7258: PUSH
7259: LD_EXP 38
7263: PUSH
7264: LD_OWVAR 2
7268: ARRAY
7269: MINUS
7270: ARRAY
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: ST_TO_ADDR
// end else
7276: GO 7338
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7278: LD_ADDR_VAR 0 3
7282: PUSH
7283: LD_EXP 39
7287: PUSH
7288: LD_INT 3
7290: PUSH
7291: LD_EXP 38
7295: PUSH
7296: LD_OWVAR 2
7300: ARRAY
7301: MINUS
7302: ARRAY
7303: PUSH
7304: LD_INT 1
7306: ARRAY
7307: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7308: LD_ADDR_VAR 0 4
7312: PUSH
7313: LD_EXP 39
7317: PUSH
7318: LD_INT 3
7320: PUSH
7321: LD_EXP 38
7325: PUSH
7326: LD_OWVAR 2
7330: ARRAY
7331: MINUS
7332: ARRAY
7333: PUSH
7334: LD_INT 2
7336: ARRAY
7337: ST_TO_ADDR
// end ; AllStrings := [ #Multi1x1-Time , tick ] ;
7338: LD_ADDR_VAR 0 5
7342: PUSH
7343: LD_STRING #Multi1x1-Time
7345: PUSH
7346: LD_OWVAR 1
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7355: LD_INT 0
7357: PUSH
7358: LD_EXP 33
7362: PUSH
7363: LD_OWVAR 1
7367: MINUS
7368: LESSEQUAL
7369: IFFALSE 7400
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7371: LD_ADDR_VAR 0 5
7375: PUSH
7376: LD_VAR 0 5
7380: PUSH
7381: LD_STRING #allowedsibbomb
7383: PUSH
7384: LD_EXP 33
7388: PUSH
7389: LD_OWVAR 1
7393: MINUS
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: ADD
7399: ST_TO_ADDR
// case infos [ your_side ] of 0 :
7400: LD_LOC 5
7404: PUSH
7405: LD_OWVAR 2
7409: ARRAY
7410: PUSH
7411: LD_INT 0
7413: DOUBLE
7414: EQUAL
7415: IFTRUE 7419
7417: GO 7446
7419: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Bid1 , real_cost ] ;
7420: LD_ADDR_OWVAR 47
7424: PUSH
7425: LD_VAR 0 5
7429: PUSH
7430: LD_STRING #MultiParty-Bid1
7432: PUSH
7433: LD_EXP 29
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: ADD
7442: ST_TO_ADDR
// enable ;
7443: ENABLE
// end ; 1 :
7444: GO 7566
7446: LD_INT 1
7448: DOUBLE
7449: EQUAL
7450: IFTRUE 7454
7452: GO 7502
7454: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info1 , en1 , en1 , - 1 , #MultiParty-Bid2 , real_cost ] ;
7455: LD_ADDR_OWVAR 47
7459: PUSH
7460: LD_VAR 0 5
7464: PUSH
7465: LD_STRING #MultiParty-Info1
7467: PUSH
7468: LD_VAR 0 3
7472: PUSH
7473: LD_VAR 0 3
7477: PUSH
7478: LD_INT 1
7480: NEG
7481: PUSH
7482: LD_STRING #MultiParty-Bid2
7484: PUSH
7485: LD_EXP 29
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: ADD
7498: ST_TO_ADDR
// enable ;
7499: ENABLE
// end ; 2 :
7500: GO 7566
7502: LD_INT 2
7504: DOUBLE
7505: EQUAL
7506: IFTRUE 7510
7508: GO 7565
7510: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info2 , en1 , en1 , - 1 , en2 , en2 , - 1 ] ;
7511: LD_ADDR_OWVAR 47
7515: PUSH
7516: LD_VAR 0 5
7520: PUSH
7521: LD_STRING #MultiParty-Info2
7523: PUSH
7524: LD_VAR 0 3
7528: PUSH
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 1
7536: NEG
7537: PUSH
7538: LD_VAR 0 4
7542: PUSH
7543: LD_VAR 0 4
7547: PUSH
7548: LD_INT 1
7550: NEG
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: ADD
7561: ST_TO_ADDR
// enable ;
7562: ENABLE
// end ; end ;
7563: GO 7566
7565: POP
// end ;
7566: LD_VAR 0 1
7570: RET
// function ShowTimer ; var AllStrings ; begin
7571: LD_INT 0
7573: PPUSH
7574: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7575: LD_ADDR_VAR 0 2
7579: PUSH
7580: LD_STRING #Multi1x1-Time
7582: PUSH
7583: LD_OWVAR 1
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7592: LD_INT 0
7594: PUSH
7595: LD_EXP 33
7599: PUSH
7600: LD_OWVAR 1
7604: MINUS
7605: LESSEQUAL
7606: IFFALSE 7637
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: LD_VAR 0 2
7617: PUSH
7618: LD_STRING #allowedsibbomb
7620: PUSH
7621: LD_EXP 33
7625: PUSH
7626: LD_OWVAR 1
7630: MINUS
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: ADD
7636: ST_TO_ADDR
// Display_Strings := AllStrings ;
7637: LD_ADDR_OWVAR 47
7641: PUSH
7642: LD_VAR 0 2
7646: ST_TO_ADDR
// end ;
7647: LD_VAR 0 1
7651: RET
// function check_area ( side , area ) ; begin
7652: LD_INT 0
7654: PPUSH
// if infos [ side ] = 2 then
7655: LD_LOC 5
7659: PUSH
7660: LD_VAR 0 1
7664: ARRAY
7665: PUSH
7666: LD_INT 2
7668: EQUAL
7669: IFFALSE 7673
// exit ;
7671: GO 7744
// if GetResourceArea ( area , mat_cans ) * 10 >= real_cost then
7673: LD_VAR 0 2
7677: PPUSH
7678: LD_INT 1
7680: PPUSH
7681: CALL_OW 287
7685: PUSH
7686: LD_INT 10
7688: MUL
7689: PUSH
7690: LD_EXP 29
7694: GREATEREQUAL
7695: IFFALSE 7744
// begin EraseResourceArea ( area , mat_cans ) ;
7697: LD_VAR 0 2
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: CALL_OW 286
// infos = Replace ( infos , side , infos [ side ] + 1 ) ;
7709: LD_ADDR_LOC 5
7713: PUSH
7714: LD_LOC 5
7718: PPUSH
7719: LD_VAR 0 1
7723: PPUSH
7724: LD_LOC 5
7728: PUSH
7729: LD_VAR 0 1
7733: ARRAY
7734: PUSH
7735: LD_INT 1
7737: PLUS
7738: PPUSH
7739: CALL_OW 1
7743: ST_TO_ADDR
// end ; end ;
7744: LD_VAR 0 3
7748: RET
// every 0 0$5 do var i ;
7749: GO 7751
7751: DISABLE
7752: LD_INT 0
7754: PPUSH
// begin for i := 1 to Side_Positions do
7755: LD_ADDR_VAR 0 1
7759: PUSH
7760: DOUBLE
7761: LD_INT 1
7763: DEC
7764: ST_TO_ADDR
7765: LD_EXP 40
7769: PUSH
7770: FOR_TO
7771: IFFALSE 7879
// case Side_Positions [ i ] of 1 :
7773: LD_EXP 40
7777: PUSH
7778: LD_VAR 0 1
7782: ARRAY
7783: PUSH
7784: LD_INT 1
7786: DOUBLE
7787: EQUAL
7788: IFTRUE 7792
7790: GO 7807
7792: POP
// check_area ( i , exit1 ) ; 2 :
7793: LD_VAR 0 1
7797: PPUSH
7798: LD_INT 22
7800: PPUSH
7801: CALL 7652 0 2
7805: GO 7877
7807: LD_INT 2
7809: DOUBLE
7810: EQUAL
7811: IFTRUE 7815
7813: GO 7830
7815: POP
// check_area ( i , exit2 ) ; 3 :
7816: LD_VAR 0 1
7820: PPUSH
7821: LD_INT 23
7823: PPUSH
7824: CALL 7652 0 2
7828: GO 7877
7830: LD_INT 3
7832: DOUBLE
7833: EQUAL
7834: IFTRUE 7838
7836: GO 7853
7838: POP
// check_area ( i , exit3 ) ; 4 :
7839: LD_VAR 0 1
7843: PPUSH
7844: LD_INT 24
7846: PPUSH
7847: CALL 7652 0 2
7851: GO 7877
7853: LD_INT 4
7855: DOUBLE
7856: EQUAL
7857: IFTRUE 7861
7859: GO 7876
7861: POP
// check_area ( i , exit4 ) ; end ;
7862: LD_VAR 0 1
7866: PPUSH
7867: LD_INT 25
7869: PPUSH
7870: CALL 7652 0 2
7874: GO 7877
7876: POP
7877: GO 7770
7879: POP
7880: POP
// enable ;
7881: ENABLE
// exit ;
7882: GO 7884
// end ; end_of_file
7884: PPOPN 1
7886: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7887: LD_INT 0
7889: PPUSH
7890: PPUSH
// for un in battle_flags_id do
7891: LD_ADDR_VAR 0 2
7895: PUSH
7896: LD_EXP 49
7900: PUSH
7901: FOR_IN
7902: IFFALSE 7977
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_INT 1
7911: PUSH
7912: LD_LOC 6
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: LD_LOC 6
7928: PUSH
7929: LD_INT 2
7931: DIV
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 3
7939: PUSH
7940: LD_LOC 6
7944: PUSH
7945: LD_INT 5
7947: DIV
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 20
7955: PUSH
7956: LD_LOC 6
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: PPUSH
7971: CALL_OW 423
7975: GO 7901
7977: POP
7978: POP
// end ;
7979: LD_VAR 0 1
7983: RET
// every 0 0$0.1 do var un ;
7984: GO 7986
7986: DISABLE
7987: LD_INT 0
7989: PPUSH
// begin if not def_morale_flags then
7990: LD_EXP 10
7994: NOT
7995: IFFALSE 7999
// exit ;
7997: GO 8076
// if not morale_decreasing_time then
7999: LD_EXP 24
8003: NOT
8004: IFFALSE 8008
// exit ;
8006: GO 8076
// strength = 100 ;
8008: LD_ADDR_LOC 6
8012: PUSH
8013: LD_INT 100
8015: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8016: LD_EXP 24
8020: PPUSH
8021: CALL_OW 67
// strength := strength - 1 ;
8025: LD_ADDR_LOC 6
8029: PUSH
8030: LD_LOC 6
8034: PUSH
8035: LD_INT 1
8037: MINUS
8038: ST_TO_ADDR
// Update_Flags ;
8039: CALL 7887 0 0
// until not strength ;
8043: LD_LOC 6
8047: NOT
8048: IFFALSE 8016
// for un in battle_flags_id do
8050: LD_ADDR_VAR 0 1
8054: PUSH
8055: LD_EXP 49
8059: PUSH
8060: FOR_IN
8061: IFFALSE 8074
// KillBattleFlag ( un ) ;
8063: LD_VAR 0 1
8067: PPUSH
8068: CALL_OW 419
8072: GO 8060
8074: POP
8075: POP
// end ; end_of_file
8076: PPOPN 1
8078: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8079: LD_VAR 0 1
8083: PPUSH
8084: CALL_OW 266
8088: PUSH
8089: LD_INT 0
8091: PUSH
8092: LD_INT 1
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: IN
8099: IFFALSE 8124
// SetBName ( b , @ & GetSide ( b ) ) ;
8101: LD_VAR 0 1
8105: PPUSH
8106: LD_STRING @
8108: PUSH
8109: LD_VAR 0 1
8113: PPUSH
8114: CALL_OW 255
8118: STR
8119: PPUSH
8120: CALL_OW 500
// end ;
8124: PPOPN 2
8126: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8127: LD_VAR 0 1
8131: PPUSH
8132: CALL_OW 266
8136: PUSH
8137: LD_INT 0
8139: PUSH
8140: LD_INT 1
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: IN
8147: IFFALSE 8172
// SetBName ( b , @ & GetSide ( b ) ) ;
8149: LD_VAR 0 1
8153: PPUSH
8154: LD_STRING @
8156: PUSH
8157: LD_VAR 0 1
8161: PPUSH
8162: CALL_OW 255
8166: STR
8167: PPUSH
8168: CALL_OW 500
// end ;
8172: PPOPN 3
8174: END
// on VehicleConstructed ( veh , fac ) do var side ;
8175: LD_INT 0
8177: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8178: LD_VAR 0 1
8182: PPUSH
8183: CALL_OW 263
8187: PUSH
8188: LD_INT 5
8190: EQUAL
8191: IFFALSE 8333
// begin side := GetSide ( veh ) ;
8193: LD_ADDR_VAR 0 3
8197: PUSH
8198: LD_VAR 0 1
8202: PPUSH
8203: CALL_OW 255
8207: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8208: LD_ADDR_EXP 53
8212: PUSH
8213: LD_EXP 53
8217: PPUSH
8218: LD_VAR 0 3
8222: PPUSH
8223: LD_EXP 53
8227: PUSH
8228: LD_VAR 0 3
8232: ARRAY
8233: PPUSH
8234: LD_INT 52
8236: PUSH
8237: EMPTY
8238: LIST
8239: PPUSH
8240: CALL_OW 72
8244: PUSH
8245: LD_INT 22
8247: PUSH
8248: LD_VAR 0 3
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PUSH
8257: LD_INT 2
8259: PUSH
8260: LD_INT 33
8262: PUSH
8263: LD_INT 5
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: LD_INT 25
8272: PUSH
8273: LD_INT 12
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PUSH
8280: LD_INT 25
8282: PUSH
8283: LD_INT 15
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 25
8292: PUSH
8293: LD_INT 16
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 25
8302: PUSH
8303: LD_INT 17
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PPUSH
8322: CALL_OW 69
8326: UNION
8327: PPUSH
8328: CALL_OW 1
8332: ST_TO_ADDR
// end ; end ;
8333: PPOPN 3
8335: END
// on UnitDestroyed ( j ) do begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
8336: LD_VAR 0 1
8340: PPUSH
8341: CALL_OW 257
8345: PUSH
8346: LD_INT 12
8348: PUSH
8349: LD_INT 15
8351: PUSH
8352: LD_INT 17
8354: PUSH
8355: LD_INT 16
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: IN
8364: PUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL_OW 263
8374: PUSH
8375: LD_INT 5
8377: EQUAL
8378: OR
8379: IFFALSE 8390
// ApeKilled ( j ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: CALL 9302 0 1
// end ;
8390: PPOPN 1
8392: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8393: LD_VAR 0 1
8397: PPUSH
8398: LD_VAR 0 2
8402: PPUSH
8403: LD_VAR 0 3
8407: PPUSH
8408: LD_OWVAR 2
8412: PPUSH
8413: CALL 9424 0 4
8417: PPOPN 3
8419: END
// every 20 20$00 trigger apemanNumber do
8420: LD_EXP 50
8424: IFFALSE 8457
8426: GO 8428
8428: DISABLE
// begin enable ;
8429: ENABLE
// if apeLevel >= 8 then
8430: LD_EXP 55
8434: PUSH
8435: LD_INT 8
8437: GREATEREQUAL
8438: IFFALSE 8443
// disable else
8440: DISABLE
8441: GO 8457
// apeLevel := apeLevel + 1 ;
8443: LD_ADDR_EXP 55
8447: PUSH
8448: LD_EXP 55
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ST_TO_ADDR
// end ;
8457: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
8458: LD_EXP 50
8462: PUSH
8463: LD_EXP 51
8467: LESS
8468: IFFALSE 8608
8470: GO 8472
8472: DISABLE
8473: LD_INT 0
8475: PPUSH
8476: PPUSH
8477: PPUSH
8478: PPUSH
// begin enable ;
8479: ENABLE
// for i := 1 to apemanPos do
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: DOUBLE
8486: LD_INT 1
8488: DEC
8489: ST_TO_ADDR
8490: LD_EXP 53
8494: PUSH
8495: FOR_TO
8496: IFFALSE 8606
// begin if apemanPlayerCount [ i ] then
8498: LD_EXP 54
8502: PUSH
8503: LD_VAR 0 1
8507: ARRAY
8508: IFFALSE 8604
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
8510: LD_EXP 54
8514: PUSH
8515: LD_VAR 0 1
8519: ARRAY
8520: PUSH
8521: LD_EXP 53
8525: PUSH
8526: LD_VAR 0 1
8530: ARRAY
8531: GREATER
8532: IFFALSE 8604
// begin ape := PrepareApeman ;
8534: LD_ADDR_VAR 0 2
8538: PUSH
8539: CALL 9111 0 0
8543: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
8544: LD_VAR 0 2
8548: PPUSH
8549: LD_EXP 56
8553: PUSH
8554: LD_VAR 0 1
8558: ARRAY
8559: PPUSH
8560: LD_INT 0
8562: PPUSH
8563: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
8567: LD_ADDR_EXP 53
8571: PUSH
8572: LD_EXP 53
8576: PPUSH
8577: LD_VAR 0 1
8581: PPUSH
8582: LD_EXP 53
8586: PUSH
8587: LD_VAR 0 1
8591: ARRAY
8592: PUSH
8593: LD_VAR 0 2
8597: UNION
8598: PPUSH
8599: CALL_OW 1
8603: ST_TO_ADDR
// end ; end ; end ;
8604: GO 8495
8606: POP
8607: POP
// end ;
8608: PPOPN 4
8610: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
8611: LD_INT 0
8613: PPUSH
8614: PPUSH
8615: PPUSH
8616: PPUSH
8617: PPUSH
8618: PPUSH
8619: PPUSH
// playersAmount := 0 ;
8620: LD_ADDR_VAR 0 3
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// _apeAreas := [ Ape1 , Ape2 , Ape3 , Ape4 ] ;
8628: LD_ADDR_VAR 0 7
8632: PUSH
8633: LD_INT 39
8635: PUSH
8636: LD_INT 40
8638: PUSH
8639: LD_INT 41
8641: PUSH
8642: LD_INT 42
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8651: LD_ADDR_EXP 56
8655: PUSH
8656: LD_INT 0
8658: PUSH
8659: LD_INT 0
8661: PUSH
8662: LD_INT 0
8664: PUSH
8665: LD_INT 0
8667: PUSH
8668: LD_INT 0
8670: PUSH
8671: LD_INT 0
8673: PUSH
8674: LD_INT 0
8676: PUSH
8677: LD_INT 0
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: ST_TO_ADDR
// for j = 1 to Side_Positions do
8690: LD_ADDR_VAR 0 4
8694: PUSH
8695: DOUBLE
8696: LD_INT 1
8698: DEC
8699: ST_TO_ADDR
8700: LD_EXP 40
8704: PUSH
8705: FOR_TO
8706: IFFALSE 8773
// if Side_Positions [ j ] then
8708: LD_EXP 40
8712: PUSH
8713: LD_VAR 0 4
8717: ARRAY
8718: IFFALSE 8771
// begin playersAmount := playersAmount + 1 ;
8720: LD_ADDR_VAR 0 3
8724: PUSH
8725: LD_VAR 0 3
8729: PUSH
8730: LD_INT 1
8732: PLUS
8733: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
8734: LD_ADDR_EXP 56
8738: PUSH
8739: LD_EXP 56
8743: PPUSH
8744: LD_VAR 0 4
8748: PPUSH
8749: LD_VAR 0 7
8753: PUSH
8754: LD_EXP 40
8758: PUSH
8759: LD_VAR 0 4
8763: ARRAY
8764: ARRAY
8765: PPUSH
8766: CALL_OW 1
8770: ST_TO_ADDR
// end ;
8771: GO 8705
8773: POP
8774: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
8775: LD_ADDR_EXP 52
8779: PUSH
8780: LD_INT 3
8782: PUSH
8783: LD_EXP 32
8787: MUL
8788: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
8789: LD_ADDR_EXP 50
8793: PUSH
8794: LD_VAR 0 3
8798: PUSH
8799: LD_EXP 52
8803: MUL
8804: ST_TO_ADDR
// apemanLimit := apemanNumber ;
8805: LD_ADDR_EXP 51
8809: PUSH
8810: LD_EXP 50
8814: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8815: LD_ADDR_EXP 53
8819: PUSH
8820: LD_INT 0
8822: PUSH
8823: LD_INT 0
8825: PUSH
8826: LD_INT 0
8828: PUSH
8829: LD_INT 0
8831: PUSH
8832: LD_INT 0
8834: PUSH
8835: LD_INT 0
8837: PUSH
8838: LD_INT 0
8840: PUSH
8841: LD_INT 0
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8854: LD_ADDR_EXP 54
8858: PUSH
8859: LD_INT 0
8861: PUSH
8862: LD_INT 0
8864: PUSH
8865: LD_INT 0
8867: PUSH
8868: LD_INT 0
8870: PUSH
8871: LD_INT 0
8873: PUSH
8874: LD_INT 0
8876: PUSH
8877: LD_INT 0
8879: PUSH
8880: LD_INT 0
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: ST_TO_ADDR
// apeLevel := 1 ;
8893: LD_ADDR_EXP 55
8897: PUSH
8898: LD_INT 1
8900: ST_TO_ADDR
// if not apemanNumber then
8901: LD_EXP 50
8905: NOT
8906: IFFALSE 8910
// exit ;
8908: GO 9106
// for i := 1 to apemanPerPlayer do
8910: LD_ADDR_VAR 0 2
8914: PUSH
8915: DOUBLE
8916: LD_INT 1
8918: DEC
8919: ST_TO_ADDR
8920: LD_EXP 52
8924: PUSH
8925: FOR_TO
8926: IFFALSE 9104
// begin for j := 1 to Side_Positions do
8928: LD_ADDR_VAR 0 4
8932: PUSH
8933: DOUBLE
8934: LD_INT 1
8936: DEC
8937: ST_TO_ADDR
8938: LD_EXP 40
8942: PUSH
8943: FOR_TO
8944: IFFALSE 9100
// if Side_Positions [ j ] then
8946: LD_EXP 40
8950: PUSH
8951: LD_VAR 0 4
8955: ARRAY
8956: IFFALSE 9098
// begin pos := Side_Positions [ j ] ;
8958: LD_ADDR_VAR 0 6
8962: PUSH
8963: LD_EXP 40
8967: PUSH
8968: LD_VAR 0 4
8972: ARRAY
8973: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
8974: LD_ADDR_EXP 54
8978: PUSH
8979: LD_EXP 54
8983: PPUSH
8984: LD_VAR 0 4
8988: PPUSH
8989: LD_EXP 54
8993: PUSH
8994: LD_VAR 0 4
8998: ARRAY
8999: PUSH
9000: LD_INT 1
9002: PLUS
9003: PPUSH
9004: CALL_OW 1
9008: ST_TO_ADDR
// ape := PrepareApeman ;
9009: LD_ADDR_VAR 0 5
9013: PUSH
9014: CALL 9111 0 0
9018: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
9019: LD_ADDR_EXP 53
9023: PUSH
9024: LD_EXP 53
9028: PPUSH
9029: LD_VAR 0 4
9033: PPUSH
9034: LD_EXP 53
9038: PUSH
9039: LD_VAR 0 4
9043: ARRAY
9044: PPUSH
9045: LD_EXP 53
9049: PUSH
9050: LD_VAR 0 4
9054: ARRAY
9055: PUSH
9056: LD_INT 1
9058: PLUS
9059: PPUSH
9060: LD_VAR 0 5
9064: PPUSH
9065: CALL_OW 1
9069: PPUSH
9070: CALL_OW 1
9074: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
9075: LD_VAR 0 5
9079: PPUSH
9080: LD_EXP 56
9084: PUSH
9085: LD_VAR 0 4
9089: ARRAY
9090: PPUSH
9091: LD_INT 0
9093: PPUSH
9094: CALL_OW 49
// end ;
9098: GO 8943
9100: POP
9101: POP
// end ;
9102: GO 8925
9104: POP
9105: POP
// end ;
9106: LD_VAR 0 1
9110: RET
// export function PrepareApeman ; var bonus ; begin
9111: LD_INT 0
9113: PPUSH
9114: PPUSH
// uc_side := 0 ;
9115: LD_ADDR_OWVAR 20
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// uc_nation := 0 ;
9123: LD_ADDR_OWVAR 21
9127: PUSH
9128: LD_INT 0
9130: ST_TO_ADDR
// InitHc ;
9131: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
9135: LD_ADDR_VAR 0 2
9139: PUSH
9140: LD_INT 1
9142: NEG
9143: PUSH
9144: LD_INT 0
9146: PUSH
9147: LD_INT 1
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 25
9157: PUSH
9158: LD_INT 12
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 69
9169: PUSH
9170: LD_INT 3
9172: MOD
9173: PUSH
9174: LD_INT 1
9176: PLUS
9177: ARRAY
9178: ST_TO_ADDR
// hc_class := class_apeman ;
9179: LD_ADDR_OWVAR 28
9183: PUSH
9184: LD_INT 12
9186: ST_TO_ADDR
// hc_gallery :=  ;
9187: LD_ADDR_OWVAR 33
9191: PUSH
9192: LD_STRING 
9194: ST_TO_ADDR
// hc_name :=  ;
9195: LD_ADDR_OWVAR 26
9199: PUSH
9200: LD_STRING 
9202: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
9203: LD_ADDR_OWVAR 31
9207: PUSH
9208: LD_EXP 55
9212: PUSH
9213: LD_VAR 0 2
9217: PLUS
9218: PUSH
9219: LD_EXP 55
9223: PUSH
9224: LD_VAR 0 2
9228: PLUS
9229: PUSH
9230: LD_EXP 55
9234: PUSH
9235: LD_VAR 0 2
9239: PLUS
9240: PUSH
9241: LD_EXP 55
9245: PUSH
9246: LD_VAR 0 2
9250: PLUS
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
9258: LD_ADDR_OWVAR 35
9262: PUSH
9263: LD_INT 10
9265: PUSH
9266: LD_VAR 0 2
9270: MUL
9271: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9272: LD_ADDR_OWVAR 29
9276: PUSH
9277: LD_INT 12
9279: PUSH
9280: LD_INT 12
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: ST_TO_ADDR
// result := CreateHuman ;
9287: LD_ADDR_VAR 0 1
9291: PUSH
9292: CALL_OW 44
9296: ST_TO_ADDR
// end ;
9297: LD_VAR 0 1
9301: RET
// export function ApeKilled ( ape ) ; var s , i ; begin
9302: LD_INT 0
9304: PPUSH
9305: PPUSH
9306: PPUSH
// if not ape then
9307: LD_VAR 0 1
9311: NOT
9312: IFFALSE 9316
// exit ;
9314: GO 9419
// for i = 1 to apemanPos do
9316: LD_ADDR_VAR 0 4
9320: PUSH
9321: DOUBLE
9322: LD_INT 1
9324: DEC
9325: ST_TO_ADDR
9326: LD_EXP 53
9330: PUSH
9331: FOR_TO
9332: IFFALSE 9366
// if ape in apemanPos [ i ] then
9334: LD_VAR 0 1
9338: PUSH
9339: LD_EXP 53
9343: PUSH
9344: LD_VAR 0 4
9348: ARRAY
9349: IN
9350: IFFALSE 9364
// begin s := i ;
9352: LD_ADDR_VAR 0 3
9356: PUSH
9357: LD_VAR 0 4
9361: ST_TO_ADDR
// break ;
9362: GO 9366
// end ;
9364: GO 9331
9366: POP
9367: POP
// apemanPos := Replace ( apemanPos , s , apemanPos [ s ] diff ape ) ;
9368: LD_ADDR_EXP 53
9372: PUSH
9373: LD_EXP 53
9377: PPUSH
9378: LD_VAR 0 3
9382: PPUSH
9383: LD_EXP 53
9387: PUSH
9388: LD_VAR 0 3
9392: ARRAY
9393: PUSH
9394: LD_VAR 0 1
9398: DIFF
9399: PPUSH
9400: CALL_OW 1
9404: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
9405: LD_ADDR_EXP 50
9409: PUSH
9410: LD_EXP 50
9414: PUSH
9415: LD_INT 1
9417: MINUS
9418: ST_TO_ADDR
// end ; end_of_file
9419: LD_VAR 0 2
9423: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9424: LD_INT 0
9426: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9427: LD_VAR 0 1
9431: PPUSH
9432: CALL_OW 255
9436: PUSH
9437: LD_VAR 0 4
9441: EQUAL
9442: IFFALSE 9461
// begin SetAchievement ( ACH_RAD ) ;
9444: LD_STRING ACH_RAD
9446: PPUSH
9447: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9451: LD_STRING ACH_NL
9453: PPUSH
9454: LD_INT 1
9456: PPUSH
9457: CALL_OW 564
// end end ;
9461: LD_VAR 0 5
9465: RET
// export function SA_Win ( side ) ; begin
9466: LD_INT 0
9468: PPUSH
// case side of 1 :
9469: LD_VAR 0 1
9473: PUSH
9474: LD_INT 1
9476: DOUBLE
9477: EQUAL
9478: IFTRUE 9482
9480: GO 9495
9482: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9483: LD_STRING ACH_AH
9485: PPUSH
9486: LD_INT 1
9488: PPUSH
9489: CALL_OW 564
9493: GO 9658
9495: LD_INT 2
9497: DOUBLE
9498: EQUAL
9499: IFTRUE 9503
9501: GO 9516
9503: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9504: LD_STRING ACH_E
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: CALL_OW 564
9514: GO 9658
9516: LD_INT 3
9518: DOUBLE
9519: EQUAL
9520: IFTRUE 9524
9522: GO 9537
9524: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9525: LD_STRING ACH_OOL
9527: PPUSH
9528: LD_INT 1
9530: PPUSH
9531: CALL_OW 564
9535: GO 9658
9537: LD_INT 1
9539: PUSH
9540: LD_INT 2
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: DOUBLE
9547: EQUAL
9548: IFTRUE 9552
9550: GO 9577
9552: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9553: LD_STRING ACH_AH
9555: PPUSH
9556: LD_REAL  5.00000000000000E-0001
9559: PPUSH
9560: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9564: LD_STRING ACH_E
9566: PPUSH
9567: LD_REAL  5.00000000000000E-0001
9570: PPUSH
9571: CALL_OW 564
// end ; [ 2 , 3 ] :
9575: GO 9658
9577: LD_INT 2
9579: PUSH
9580: LD_INT 3
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: DOUBLE
9587: EQUAL
9588: IFTRUE 9592
9590: GO 9617
9592: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9593: LD_STRING ACH_OOL
9595: PPUSH
9596: LD_REAL  5.00000000000000E-0001
9599: PPUSH
9600: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9604: LD_STRING ACH_E
9606: PPUSH
9607: LD_REAL  5.00000000000000E-0001
9610: PPUSH
9611: CALL_OW 564
// end ; [ 3 , 1 ] :
9615: GO 9658
9617: LD_INT 3
9619: PUSH
9620: LD_INT 1
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: DOUBLE
9627: EQUAL
9628: IFTRUE 9632
9630: GO 9657
9632: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9633: LD_STRING ACH_AH
9635: PPUSH
9636: LD_REAL  5.00000000000000E-0001
9639: PPUSH
9640: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9644: LD_STRING ACH_OOL
9646: PPUSH
9647: LD_REAL  5.00000000000000E-0001
9650: PPUSH
9651: CALL_OW 564
// end ; end ;
9655: GO 9658
9657: POP
// end ; end_of_file
9658: LD_VAR 0 2
9662: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9663: LD_INT 0
9665: PPUSH
9666: PPUSH
9667: PPUSH
// for side = 1 to 8 do
9668: LD_ADDR_VAR 0 2
9672: PUSH
9673: DOUBLE
9674: LD_INT 1
9676: DEC
9677: ST_TO_ADDR
9678: LD_INT 8
9680: PUSH
9681: FOR_TO
9682: IFFALSE 9803
// begin for i = 1 to 72 do
9684: LD_ADDR_VAR 0 3
9688: PUSH
9689: DOUBLE
9690: LD_INT 1
9692: DEC
9693: ST_TO_ADDR
9694: LD_INT 72
9696: PUSH
9697: FOR_TO
9698: IFFALSE 9729
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_VAR 0 2
9709: PPUSH
9710: LD_INT 0
9712: PPUSH
9713: LD_VAR 0 3
9717: PPUSH
9718: CALL_OW 565
9722: PPUSH
9723: CALL_OW 322
9727: GO 9697
9729: POP
9730: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9731: LD_INT 73
9733: PPUSH
9734: LD_VAR 0 2
9738: PPUSH
9739: LD_INT 0
9741: PPUSH
9742: LD_INT 25
9744: PPUSH
9745: CALL_OW 565
9749: PPUSH
9750: CALL_OW 322
// for i = 0 to 40 do
9754: LD_ADDR_VAR 0 3
9758: PUSH
9759: DOUBLE
9760: LD_INT 0
9762: DEC
9763: ST_TO_ADDR
9764: LD_INT 40
9766: PUSH
9767: FOR_TO
9768: IFFALSE 9799
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9770: LD_VAR 0 3
9774: PPUSH
9775: LD_VAR 0 2
9779: PPUSH
9780: LD_INT 1
9782: PPUSH
9783: LD_VAR 0 3
9787: PPUSH
9788: CALL_OW 565
9792: PPUSH
9793: CALL_OW 324
9797: GO 9767
9799: POP
9800: POP
// end ;
9801: GO 9681
9803: POP
9804: POP
// end ;
9805: LD_VAR 0 1
9809: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9810: LD_INT 0
9812: PPUSH
9813: PPUSH
9814: PPUSH
// for side = 1 to 8 do
9815: LD_ADDR_VAR 0 3
9819: PUSH
9820: DOUBLE
9821: LD_INT 1
9823: DEC
9824: ST_TO_ADDR
9825: LD_INT 8
9827: PUSH
9828: FOR_TO
9829: IFFALSE 13825
// begin for i = 1 to 73 do
9831: LD_ADDR_VAR 0 4
9835: PUSH
9836: DOUBLE
9837: LD_INT 1
9839: DEC
9840: ST_TO_ADDR
9841: LD_INT 73
9843: PUSH
9844: FOR_TO
9845: IFFALSE 9866
// SetTech ( i , side , state_disabled ) ;
9847: LD_VAR 0 4
9851: PPUSH
9852: LD_VAR 0 3
9856: PPUSH
9857: LD_INT 0
9859: PPUSH
9860: CALL_OW 322
9864: GO 9844
9866: POP
9867: POP
// for i = 0 to 40 do
9868: LD_ADDR_VAR 0 4
9872: PUSH
9873: DOUBLE
9874: LD_INT 0
9876: DEC
9877: ST_TO_ADDR
9878: LD_INT 40
9880: PUSH
9881: FOR_TO
9882: IFFALSE 9903
// SetRestrict ( i , side , false ) ;
9884: LD_VAR 0 4
9888: PPUSH
9889: LD_VAR 0 3
9893: PPUSH
9894: LD_INT 0
9896: PPUSH
9897: CALL_OW 324
9901: GO 9881
9903: POP
9904: POP
// case level of 1 :
9905: LD_VAR 0 1
9909: PUSH
9910: LD_INT 1
9912: DOUBLE
9913: EQUAL
9914: IFTRUE 9918
9916: GO 10071
9918: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9919: LD_INT 35
9921: PPUSH
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_INT 1
9929: PPUSH
9930: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9934: LD_INT 45
9936: PPUSH
9937: LD_VAR 0 3
9941: PPUSH
9942: LD_INT 1
9944: PPUSH
9945: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9949: LD_INT 46
9951: PPUSH
9952: LD_VAR 0 3
9956: PPUSH
9957: LD_INT 1
9959: PPUSH
9960: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9964: LD_INT 47
9966: PPUSH
9967: LD_VAR 0 3
9971: PPUSH
9972: LD_INT 1
9974: PPUSH
9975: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9979: LD_INT 0
9981: PPUSH
9982: LD_VAR 0 3
9986: PPUSH
9987: LD_INT 1
9989: PPUSH
9990: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9994: LD_INT 2
9996: PPUSH
9997: LD_VAR 0 3
10001: PPUSH
10002: LD_INT 1
10004: PPUSH
10005: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10009: LD_INT 4
10011: PPUSH
10012: LD_VAR 0 3
10016: PPUSH
10017: LD_INT 1
10019: PPUSH
10020: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10024: LD_INT 6
10026: PPUSH
10027: LD_VAR 0 3
10031: PPUSH
10032: LD_INT 1
10034: PPUSH
10035: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10039: LD_INT 29
10041: PPUSH
10042: LD_VAR 0 3
10046: PPUSH
10047: LD_INT 1
10049: PPUSH
10050: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10054: LD_INT 31
10056: PPUSH
10057: LD_VAR 0 3
10061: PPUSH
10062: LD_INT 1
10064: PPUSH
10065: CALL_OW 324
// end ; 2 :
10069: GO 13823
10071: LD_INT 2
10073: DOUBLE
10074: EQUAL
10075: IFTRUE 10079
10077: GO 10277
10079: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10080: LD_INT 35
10082: PPUSH
10083: LD_VAR 0 3
10087: PPUSH
10088: LD_INT 1
10090: PPUSH
10091: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10095: LD_INT 45
10097: PPUSH
10098: LD_VAR 0 3
10102: PPUSH
10103: LD_INT 1
10105: PPUSH
10106: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10110: LD_INT 46
10112: PPUSH
10113: LD_VAR 0 3
10117: PPUSH
10118: LD_INT 1
10120: PPUSH
10121: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10125: LD_INT 47
10127: PPUSH
10128: LD_VAR 0 3
10132: PPUSH
10133: LD_INT 1
10135: PPUSH
10136: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10140: LD_INT 1
10142: PPUSH
10143: LD_VAR 0 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10155: LD_INT 2
10157: PPUSH
10158: LD_VAR 0 3
10162: PPUSH
10163: LD_INT 1
10165: PPUSH
10166: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10170: LD_INT 11
10172: PPUSH
10173: LD_VAR 0 3
10177: PPUSH
10178: LD_INT 1
10180: PPUSH
10181: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10185: LD_INT 0
10187: PPUSH
10188: LD_VAR 0 3
10192: PPUSH
10193: LD_INT 1
10195: PPUSH
10196: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10200: LD_INT 2
10202: PPUSH
10203: LD_VAR 0 3
10207: PPUSH
10208: LD_INT 1
10210: PPUSH
10211: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10215: LD_INT 4
10217: PPUSH
10218: LD_VAR 0 3
10222: PPUSH
10223: LD_INT 1
10225: PPUSH
10226: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10230: LD_INT 6
10232: PPUSH
10233: LD_VAR 0 3
10237: PPUSH
10238: LD_INT 1
10240: PPUSH
10241: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10245: LD_INT 29
10247: PPUSH
10248: LD_VAR 0 3
10252: PPUSH
10253: LD_INT 1
10255: PPUSH
10256: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10260: LD_INT 31
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: CALL_OW 324
// end ; 3 :
10275: GO 13823
10277: LD_INT 3
10279: DOUBLE
10280: EQUAL
10281: IFTRUE 10285
10283: GO 10738
10285: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10286: LD_INT 35
10288: PPUSH
10289: LD_VAR 0 3
10293: PPUSH
10294: LD_INT 1
10296: PPUSH
10297: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10301: LD_INT 45
10303: PPUSH
10304: LD_VAR 0 3
10308: PPUSH
10309: LD_INT 1
10311: PPUSH
10312: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10316: LD_INT 46
10318: PPUSH
10319: LD_VAR 0 3
10323: PPUSH
10324: LD_INT 1
10326: PPUSH
10327: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10331: LD_INT 47
10333: PPUSH
10334: LD_VAR 0 3
10338: PPUSH
10339: LD_INT 1
10341: PPUSH
10342: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10346: LD_INT 1
10348: PPUSH
10349: LD_VAR 0 3
10353: PPUSH
10354: LD_INT 1
10356: PPUSH
10357: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10361: LD_INT 2
10363: PPUSH
10364: LD_VAR 0 3
10368: PPUSH
10369: LD_INT 1
10371: PPUSH
10372: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10376: LD_INT 11
10378: PPUSH
10379: LD_VAR 0 3
10383: PPUSH
10384: LD_INT 1
10386: PPUSH
10387: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10391: LD_INT 48
10393: PPUSH
10394: LD_VAR 0 3
10398: PPUSH
10399: LD_INT 1
10401: PPUSH
10402: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10406: LD_INT 69
10408: PPUSH
10409: LD_VAR 0 3
10413: PPUSH
10414: LD_INT 1
10416: PPUSH
10417: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10421: LD_INT 39
10423: PPUSH
10424: LD_VAR 0 3
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10436: LD_INT 43
10438: PPUSH
10439: LD_VAR 0 3
10443: PPUSH
10444: LD_INT 1
10446: PPUSH
10447: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10451: LD_INT 51
10453: PPUSH
10454: LD_VAR 0 3
10458: PPUSH
10459: LD_INT 1
10461: PPUSH
10462: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10466: LD_INT 6
10468: PPUSH
10469: LD_VAR 0 3
10473: PPUSH
10474: LD_INT 1
10476: PPUSH
10477: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10481: LD_INT 0
10483: PPUSH
10484: LD_VAR 0 3
10488: PPUSH
10489: LD_INT 1
10491: PPUSH
10492: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10496: LD_INT 2
10498: PPUSH
10499: LD_VAR 0 3
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10511: LD_INT 3
10513: PPUSH
10514: LD_VAR 0 3
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10526: LD_INT 4
10528: PPUSH
10529: LD_VAR 0 3
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10541: LD_INT 6
10543: PPUSH
10544: LD_VAR 0 3
10548: PPUSH
10549: LD_INT 1
10551: PPUSH
10552: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10556: LD_INT 7
10558: PPUSH
10559: LD_VAR 0 3
10563: PPUSH
10564: LD_INT 1
10566: PPUSH
10567: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10571: LD_INT 8
10573: PPUSH
10574: LD_VAR 0 3
10578: PPUSH
10579: LD_INT 1
10581: PPUSH
10582: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10586: LD_INT 10
10588: PPUSH
10589: LD_VAR 0 3
10593: PPUSH
10594: LD_INT 1
10596: PPUSH
10597: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10601: LD_INT 15
10603: PPUSH
10604: LD_VAR 0 3
10608: PPUSH
10609: LD_INT 1
10611: PPUSH
10612: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10616: LD_INT 16
10618: PPUSH
10619: LD_VAR 0 3
10623: PPUSH
10624: LD_INT 1
10626: PPUSH
10627: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10631: LD_INT 17
10633: PPUSH
10634: LD_VAR 0 3
10638: PPUSH
10639: LD_INT 1
10641: PPUSH
10642: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10646: LD_INT 20
10648: PPUSH
10649: LD_VAR 0 3
10653: PPUSH
10654: LD_INT 1
10656: PPUSH
10657: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10661: LD_INT 26
10663: PPUSH
10664: LD_VAR 0 3
10668: PPUSH
10669: LD_INT 1
10671: PPUSH
10672: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10676: LD_INT 27
10678: PPUSH
10679: LD_VAR 0 3
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10691: LD_INT 29
10693: PPUSH
10694: LD_VAR 0 3
10698: PPUSH
10699: LD_INT 1
10701: PPUSH
10702: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10706: LD_INT 31
10708: PPUSH
10709: LD_VAR 0 3
10713: PPUSH
10714: LD_INT 1
10716: PPUSH
10717: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10721: LD_INT 32
10723: PPUSH
10724: LD_VAR 0 3
10728: PPUSH
10729: LD_INT 1
10731: PPUSH
10732: CALL_OW 324
// end ; 4 :
10736: GO 13823
10738: LD_INT 4
10740: DOUBLE
10741: EQUAL
10742: IFTRUE 10746
10744: GO 11694
10746: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10747: LD_INT 35
10749: PPUSH
10750: LD_VAR 0 3
10754: PPUSH
10755: LD_INT 1
10757: PPUSH
10758: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10762: LD_INT 45
10764: PPUSH
10765: LD_VAR 0 3
10769: PPUSH
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10777: LD_INT 46
10779: PPUSH
10780: LD_VAR 0 3
10784: PPUSH
10785: LD_INT 1
10787: PPUSH
10788: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10792: LD_INT 47
10794: PPUSH
10795: LD_VAR 0 3
10799: PPUSH
10800: LD_INT 1
10802: PPUSH
10803: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10807: LD_INT 1
10809: PPUSH
10810: LD_VAR 0 3
10814: PPUSH
10815: LD_INT 1
10817: PPUSH
10818: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10822: LD_INT 2
10824: PPUSH
10825: LD_VAR 0 3
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10837: LD_INT 11
10839: PPUSH
10840: LD_VAR 0 3
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10852: LD_INT 20
10854: PPUSH
10855: LD_VAR 0 3
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10867: LD_INT 48
10869: PPUSH
10870: LD_VAR 0 3
10874: PPUSH
10875: LD_INT 1
10877: PPUSH
10878: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10882: LD_INT 49
10884: PPUSH
10885: LD_VAR 0 3
10889: PPUSH
10890: LD_INT 1
10892: PPUSH
10893: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10897: LD_INT 69
10899: PPUSH
10900: LD_VAR 0 3
10904: PPUSH
10905: LD_INT 1
10907: PPUSH
10908: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10912: LD_INT 39
10914: PPUSH
10915: LD_VAR 0 3
10919: PPUSH
10920: LD_INT 1
10922: PPUSH
10923: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10927: LD_INT 34
10929: PPUSH
10930: LD_VAR 0 3
10934: PPUSH
10935: LD_INT 1
10937: PPUSH
10938: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10942: LD_INT 42
10944: PPUSH
10945: LD_VAR 0 3
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10957: LD_INT 44
10959: PPUSH
10960: LD_VAR 0 3
10964: PPUSH
10965: LD_INT 1
10967: PPUSH
10968: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10972: LD_INT 41
10974: PPUSH
10975: LD_VAR 0 3
10979: PPUSH
10980: LD_INT 1
10982: PPUSH
10983: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10987: LD_INT 43
10989: PPUSH
10990: LD_VAR 0 3
10994: PPUSH
10995: LD_INT 1
10997: PPUSH
10998: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11002: LD_INT 70
11004: PPUSH
11005: LD_VAR 0 3
11009: PPUSH
11010: LD_INT 1
11012: PPUSH
11013: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11017: LD_INT 51
11019: PPUSH
11020: LD_VAR 0 3
11024: PPUSH
11025: LD_INT 1
11027: PPUSH
11028: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11032: LD_INT 52
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: LD_INT 1
11042: PPUSH
11043: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11047: LD_INT 6
11049: PPUSH
11050: LD_VAR 0 3
11054: PPUSH
11055: LD_INT 1
11057: PPUSH
11058: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11062: LD_INT 15
11064: PPUSH
11065: LD_VAR 0 3
11069: PPUSH
11070: LD_INT 1
11072: PPUSH
11073: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11077: LD_INT 7
11079: PPUSH
11080: LD_VAR 0 3
11084: PPUSH
11085: LD_INT 1
11087: PPUSH
11088: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11092: LD_INT 12
11094: PPUSH
11095: LD_VAR 0 3
11099: PPUSH
11100: LD_INT 1
11102: PPUSH
11103: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11107: LD_INT 18
11109: PPUSH
11110: LD_VAR 0 3
11114: PPUSH
11115: LD_INT 1
11117: PPUSH
11118: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11122: LD_INT 60
11124: PPUSH
11125: LD_VAR 0 3
11129: PPUSH
11130: LD_INT 1
11132: PPUSH
11133: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11137: LD_INT 9
11139: PPUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: LD_INT 1
11147: PPUSH
11148: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11152: LD_INT 30
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11167: LD_INT 37
11169: PPUSH
11170: LD_VAR 0 3
11174: PPUSH
11175: LD_INT 1
11177: PPUSH
11178: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11182: LD_INT 5
11184: PPUSH
11185: LD_VAR 0 3
11189: PPUSH
11190: LD_INT 1
11192: PPUSH
11193: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11197: LD_INT 66
11199: PPUSH
11200: LD_VAR 0 3
11204: PPUSH
11205: LD_INT 1
11207: PPUSH
11208: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11212: LD_INT 21
11214: PPUSH
11215: LD_VAR 0 3
11219: PPUSH
11220: LD_INT 1
11222: PPUSH
11223: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11227: LD_INT 22
11229: PPUSH
11230: LD_VAR 0 3
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11242: LD_INT 54
11244: PPUSH
11245: LD_VAR 0 3
11249: PPUSH
11250: LD_INT 1
11252: PPUSH
11253: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11257: LD_INT 0
11259: PPUSH
11260: LD_VAR 0 3
11264: PPUSH
11265: LD_INT 1
11267: PPUSH
11268: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11272: LD_INT 1
11274: PPUSH
11275: LD_VAR 0 3
11279: PPUSH
11280: LD_INT 1
11282: PPUSH
11283: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11287: LD_INT 2
11289: PPUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: LD_INT 1
11297: PPUSH
11298: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11302: LD_INT 3
11304: PPUSH
11305: LD_VAR 0 3
11309: PPUSH
11310: LD_INT 1
11312: PPUSH
11313: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11317: LD_INT 4
11319: PPUSH
11320: LD_VAR 0 3
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11332: LD_INT 5
11334: PPUSH
11335: LD_VAR 0 3
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11347: LD_INT 6
11349: PPUSH
11350: LD_VAR 0 3
11354: PPUSH
11355: LD_INT 1
11357: PPUSH
11358: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11362: LD_INT 7
11364: PPUSH
11365: LD_VAR 0 3
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11377: LD_INT 8
11379: PPUSH
11380: LD_VAR 0 3
11384: PPUSH
11385: LD_INT 1
11387: PPUSH
11388: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11392: LD_INT 10
11394: PPUSH
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 1
11402: PPUSH
11403: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11407: LD_INT 11
11409: PPUSH
11410: LD_VAR 0 3
11414: PPUSH
11415: LD_INT 1
11417: PPUSH
11418: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11422: LD_INT 12
11424: PPUSH
11425: LD_VAR 0 3
11429: PPUSH
11430: LD_INT 1
11432: PPUSH
11433: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11437: LD_INT 13
11439: PPUSH
11440: LD_VAR 0 3
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11452: LD_INT 14
11454: PPUSH
11455: LD_VAR 0 3
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11467: LD_INT 15
11469: PPUSH
11470: LD_VAR 0 3
11474: PPUSH
11475: LD_INT 1
11477: PPUSH
11478: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11482: LD_INT 16
11484: PPUSH
11485: LD_VAR 0 3
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11497: LD_INT 17
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: LD_INT 1
11507: PPUSH
11508: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11512: LD_INT 19
11514: PPUSH
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 1
11522: PPUSH
11523: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11527: LD_INT 20
11529: PPUSH
11530: LD_VAR 0 3
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11542: LD_INT 21
11544: PPUSH
11545: LD_VAR 0 3
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11557: LD_INT 23
11559: PPUSH
11560: LD_VAR 0 3
11564: PPUSH
11565: LD_INT 1
11567: PPUSH
11568: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11572: LD_INT 26
11574: PPUSH
11575: LD_VAR 0 3
11579: PPUSH
11580: LD_INT 1
11582: PPUSH
11583: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11587: LD_INT 27
11589: PPUSH
11590: LD_VAR 0 3
11594: PPUSH
11595: LD_INT 1
11597: PPUSH
11598: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11602: LD_INT 28
11604: PPUSH
11605: LD_VAR 0 3
11609: PPUSH
11610: LD_INT 1
11612: PPUSH
11613: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11617: LD_INT 29
11619: PPUSH
11620: LD_VAR 0 3
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11632: LD_INT 30
11634: PPUSH
11635: LD_VAR 0 3
11639: PPUSH
11640: LD_INT 1
11642: PPUSH
11643: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11647: LD_INT 31
11649: PPUSH
11650: LD_VAR 0 3
11654: PPUSH
11655: LD_INT 1
11657: PPUSH
11658: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11662: LD_INT 32
11664: PPUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11677: LD_INT 36
11679: PPUSH
11680: LD_VAR 0 3
11684: PPUSH
11685: LD_INT 1
11687: PPUSH
11688: CALL_OW 324
// end ; 5 :
11692: GO 13823
11694: LD_INT 5
11696: DOUBLE
11697: EQUAL
11698: IFTRUE 11702
11700: GO 12815
11702: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11703: LD_INT 35
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_INT 1
11713: PPUSH
11714: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11718: LD_INT 45
11720: PPUSH
11721: LD_VAR 0 3
11725: PPUSH
11726: LD_INT 1
11728: PPUSH
11729: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11733: LD_INT 46
11735: PPUSH
11736: LD_VAR 0 3
11740: PPUSH
11741: LD_INT 1
11743: PPUSH
11744: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11748: LD_INT 47
11750: PPUSH
11751: LD_VAR 0 3
11755: PPUSH
11756: LD_INT 1
11758: PPUSH
11759: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11763: LD_INT 1
11765: PPUSH
11766: LD_VAR 0 3
11770: PPUSH
11771: LD_INT 1
11773: PPUSH
11774: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11778: LD_INT 2
11780: PPUSH
11781: LD_VAR 0 3
11785: PPUSH
11786: LD_INT 1
11788: PPUSH
11789: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11793: LD_INT 11
11795: PPUSH
11796: LD_VAR 0 3
11800: PPUSH
11801: LD_INT 1
11803: PPUSH
11804: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11808: LD_INT 20
11810: PPUSH
11811: LD_VAR 0 3
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11823: LD_INT 48
11825: PPUSH
11826: LD_VAR 0 3
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11838: LD_INT 49
11840: PPUSH
11841: LD_VAR 0 3
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11853: LD_INT 69
11855: PPUSH
11856: LD_VAR 0 3
11860: PPUSH
11861: LD_INT 1
11863: PPUSH
11864: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11868: LD_INT 39
11870: PPUSH
11871: LD_VAR 0 3
11875: PPUSH
11876: LD_INT 1
11878: PPUSH
11879: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11883: LD_INT 34
11885: PPUSH
11886: LD_VAR 0 3
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11898: LD_INT 42
11900: PPUSH
11901: LD_VAR 0 3
11905: PPUSH
11906: LD_INT 1
11908: PPUSH
11909: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11913: LD_INT 44
11915: PPUSH
11916: LD_VAR 0 3
11920: PPUSH
11921: LD_INT 1
11923: PPUSH
11924: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11928: LD_INT 41
11930: PPUSH
11931: LD_VAR 0 3
11935: PPUSH
11936: LD_INT 1
11938: PPUSH
11939: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11943: LD_INT 40
11945: PPUSH
11946: LD_VAR 0 3
11950: PPUSH
11951: LD_INT 1
11953: PPUSH
11954: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11958: LD_INT 43
11960: PPUSH
11961: LD_VAR 0 3
11965: PPUSH
11966: LD_INT 1
11968: PPUSH
11969: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11973: LD_INT 70
11975: PPUSH
11976: LD_VAR 0 3
11980: PPUSH
11981: LD_INT 1
11983: PPUSH
11984: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11988: LD_INT 51
11990: PPUSH
11991: LD_VAR 0 3
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12003: LD_INT 52
12005: PPUSH
12006: LD_VAR 0 3
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12018: LD_INT 6
12020: PPUSH
12021: LD_VAR 0 3
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12033: LD_INT 15
12035: PPUSH
12036: LD_VAR 0 3
12040: PPUSH
12041: LD_INT 1
12043: PPUSH
12044: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12048: LD_INT 7
12050: PPUSH
12051: LD_VAR 0 3
12055: PPUSH
12056: LD_INT 1
12058: PPUSH
12059: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12063: LD_INT 12
12065: PPUSH
12066: LD_VAR 0 3
12070: PPUSH
12071: LD_INT 1
12073: PPUSH
12074: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12078: LD_INT 17
12080: PPUSH
12081: LD_VAR 0 3
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12093: LD_INT 18
12095: PPUSH
12096: LD_VAR 0 3
12100: PPUSH
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12108: LD_INT 60
12110: PPUSH
12111: LD_VAR 0 3
12115: PPUSH
12116: LD_INT 1
12118: PPUSH
12119: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12123: LD_INT 32
12125: PPUSH
12126: LD_VAR 0 3
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12138: LD_INT 9
12140: PPUSH
12141: LD_VAR 0 3
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12153: LD_INT 57
12155: PPUSH
12156: LD_VAR 0 3
12160: PPUSH
12161: LD_INT 1
12163: PPUSH
12164: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12168: LD_INT 30
12170: PPUSH
12171: LD_VAR 0 3
12175: PPUSH
12176: LD_INT 1
12178: PPUSH
12179: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12183: LD_INT 37
12185: PPUSH
12186: LD_VAR 0 3
12190: PPUSH
12191: LD_INT 1
12193: PPUSH
12194: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12198: LD_INT 63
12200: PPUSH
12201: LD_VAR 0 3
12205: PPUSH
12206: LD_INT 1
12208: PPUSH
12209: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12213: LD_INT 3
12215: PPUSH
12216: LD_VAR 0 3
12220: PPUSH
12221: LD_INT 1
12223: PPUSH
12224: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12228: LD_INT 4
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: LD_INT 1
12238: PPUSH
12239: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12243: LD_INT 5
12245: PPUSH
12246: LD_VAR 0 3
12250: PPUSH
12251: LD_INT 1
12253: PPUSH
12254: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12258: LD_INT 66
12260: PPUSH
12261: LD_VAR 0 3
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12273: LD_INT 21
12275: PPUSH
12276: LD_VAR 0 3
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12288: LD_INT 22
12290: PPUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12303: LD_INT 19
12305: PPUSH
12306: LD_VAR 0 3
12310: PPUSH
12311: LD_INT 1
12313: PPUSH
12314: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12318: LD_INT 54
12320: PPUSH
12321: LD_VAR 0 3
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12333: LD_INT 55
12335: PPUSH
12336: LD_VAR 0 3
12340: PPUSH
12341: LD_INT 1
12343: PPUSH
12344: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12348: LD_INT 0
12350: PPUSH
12351: LD_VAR 0 3
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12363: LD_INT 1
12365: PPUSH
12366: LD_VAR 0 3
12370: PPUSH
12371: LD_INT 1
12373: PPUSH
12374: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12378: LD_INT 2
12380: PPUSH
12381: LD_VAR 0 3
12385: PPUSH
12386: LD_INT 1
12388: PPUSH
12389: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12393: LD_INT 3
12395: PPUSH
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 1
12403: PPUSH
12404: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12408: LD_INT 4
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12423: LD_INT 5
12425: PPUSH
12426: LD_VAR 0 3
12430: PPUSH
12431: LD_INT 1
12433: PPUSH
12434: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12438: LD_INT 6
12440: PPUSH
12441: LD_VAR 0 3
12445: PPUSH
12446: LD_INT 1
12448: PPUSH
12449: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12453: LD_INT 7
12455: PPUSH
12456: LD_VAR 0 3
12460: PPUSH
12461: LD_INT 1
12463: PPUSH
12464: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12468: LD_INT 8
12470: PPUSH
12471: LD_VAR 0 3
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12483: LD_INT 10
12485: PPUSH
12486: LD_VAR 0 3
12490: PPUSH
12491: LD_INT 1
12493: PPUSH
12494: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12498: LD_INT 11
12500: PPUSH
12501: LD_VAR 0 3
12505: PPUSH
12506: LD_INT 1
12508: PPUSH
12509: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12513: LD_INT 12
12515: PPUSH
12516: LD_VAR 0 3
12520: PPUSH
12521: LD_INT 1
12523: PPUSH
12524: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12528: LD_INT 13
12530: PPUSH
12531: LD_VAR 0 3
12535: PPUSH
12536: LD_INT 1
12538: PPUSH
12539: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12543: LD_INT 14
12545: PPUSH
12546: LD_VAR 0 3
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12558: LD_INT 15
12560: PPUSH
12561: LD_VAR 0 3
12565: PPUSH
12566: LD_INT 1
12568: PPUSH
12569: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12573: LD_INT 16
12575: PPUSH
12576: LD_VAR 0 3
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12588: LD_INT 17
12590: PPUSH
12591: LD_VAR 0 3
12595: PPUSH
12596: LD_INT 1
12598: PPUSH
12599: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12603: LD_INT 18
12605: PPUSH
12606: LD_VAR 0 3
12610: PPUSH
12611: LD_INT 1
12613: PPUSH
12614: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12618: LD_INT 19
12620: PPUSH
12621: LD_VAR 0 3
12625: PPUSH
12626: LD_INT 1
12628: PPUSH
12629: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12633: LD_INT 20
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: LD_INT 1
12643: PPUSH
12644: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12648: LD_INT 21
12650: PPUSH
12651: LD_VAR 0 3
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12663: LD_INT 23
12665: PPUSH
12666: LD_VAR 0 3
12670: PPUSH
12671: LD_INT 1
12673: PPUSH
12674: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12678: LD_INT 26
12680: PPUSH
12681: LD_VAR 0 3
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12693: LD_INT 27
12695: PPUSH
12696: LD_VAR 0 3
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12708: LD_INT 28
12710: PPUSH
12711: LD_VAR 0 3
12715: PPUSH
12716: LD_INT 1
12718: PPUSH
12719: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12723: LD_INT 29
12725: PPUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: LD_INT 1
12733: PPUSH
12734: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12738: LD_INT 30
12740: PPUSH
12741: LD_VAR 0 3
12745: PPUSH
12746: LD_INT 1
12748: PPUSH
12749: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12753: LD_INT 31
12755: PPUSH
12756: LD_VAR 0 3
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12768: LD_INT 32
12770: PPUSH
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12783: LD_INT 33
12785: PPUSH
12786: LD_VAR 0 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12798: LD_INT 36
12800: PPUSH
12801: LD_VAR 0 3
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 324
// end ; 6 :
12813: GO 13823
12815: LD_INT 6
12817: DOUBLE
12818: EQUAL
12819: IFTRUE 12823
12821: GO 13748
12823: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12824: LD_INT 35
12826: PPUSH
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 1
12834: PPUSH
12835: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12839: LD_INT 45
12841: PPUSH
12842: LD_VAR 0 3
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12854: LD_INT 46
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12869: LD_INT 47
12871: PPUSH
12872: LD_VAR 0 3
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12884: LD_INT 1
12886: PPUSH
12887: LD_VAR 0 3
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12899: LD_INT 2
12901: PPUSH
12902: LD_VAR 0 3
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12914: LD_INT 11
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12929: LD_INT 20
12931: PPUSH
12932: LD_VAR 0 3
12936: PPUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12944: LD_INT 48
12946: PPUSH
12947: LD_VAR 0 3
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12959: LD_INT 49
12961: PPUSH
12962: LD_VAR 0 3
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12974: LD_INT 50
12976: PPUSH
12977: LD_VAR 0 3
12981: PPUSH
12982: LD_INT 1
12984: PPUSH
12985: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12989: LD_INT 69
12991: PPUSH
12992: LD_VAR 0 3
12996: PPUSH
12997: LD_INT 1
12999: PPUSH
13000: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13004: LD_INT 39
13006: PPUSH
13007: LD_VAR 0 3
13011: PPUSH
13012: LD_INT 1
13014: PPUSH
13015: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13019: LD_INT 34
13021: PPUSH
13022: LD_VAR 0 3
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13034: LD_INT 42
13036: PPUSH
13037: LD_VAR 0 3
13041: PPUSH
13042: LD_INT 1
13044: PPUSH
13045: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13049: LD_INT 44
13051: PPUSH
13052: LD_VAR 0 3
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13064: LD_INT 41
13066: PPUSH
13067: LD_VAR 0 3
13071: PPUSH
13072: LD_INT 1
13074: PPUSH
13075: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13079: LD_INT 13
13081: PPUSH
13082: LD_VAR 0 3
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13094: LD_INT 40
13096: PPUSH
13097: LD_VAR 0 3
13101: PPUSH
13102: LD_INT 1
13104: PPUSH
13105: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13109: LD_INT 43
13111: PPUSH
13112: LD_VAR 0 3
13116: PPUSH
13117: LD_INT 1
13119: PPUSH
13120: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13124: LD_INT 70
13126: PPUSH
13127: LD_VAR 0 3
13131: PPUSH
13132: LD_INT 1
13134: PPUSH
13135: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13139: LD_INT 23
13141: PPUSH
13142: LD_VAR 0 3
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13154: LD_INT 51
13156: PPUSH
13157: LD_VAR 0 3
13161: PPUSH
13162: LD_INT 1
13164: PPUSH
13165: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13169: LD_INT 52
13171: PPUSH
13172: LD_VAR 0 3
13176: PPUSH
13177: LD_INT 1
13179: PPUSH
13180: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13184: LD_INT 6
13186: PPUSH
13187: LD_VAR 0 3
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13199: LD_INT 15
13201: PPUSH
13202: LD_VAR 0 3
13206: PPUSH
13207: LD_INT 1
13209: PPUSH
13210: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13214: LD_INT 7
13216: PPUSH
13217: LD_VAR 0 3
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13229: LD_INT 12
13231: PPUSH
13232: LD_VAR 0 3
13236: PPUSH
13237: LD_INT 1
13239: PPUSH
13240: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13244: LD_INT 10
13246: PPUSH
13247: LD_VAR 0 3
13251: PPUSH
13252: LD_INT 1
13254: PPUSH
13255: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13259: LD_INT 17
13261: PPUSH
13262: LD_VAR 0 3
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13274: LD_INT 18
13276: PPUSH
13277: LD_VAR 0 3
13281: PPUSH
13282: LD_INT 1
13284: PPUSH
13285: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13289: LD_INT 60
13291: PPUSH
13292: LD_VAR 0 3
13296: PPUSH
13297: LD_INT 1
13299: PPUSH
13300: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13304: LD_INT 61
13306: PPUSH
13307: LD_VAR 0 3
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13319: LD_INT 32
13321: PPUSH
13322: LD_VAR 0 3
13326: PPUSH
13327: LD_INT 1
13329: PPUSH
13330: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13334: LD_INT 27
13336: PPUSH
13337: LD_VAR 0 3
13341: PPUSH
13342: LD_INT 1
13344: PPUSH
13345: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13349: LD_INT 36
13351: PPUSH
13352: LD_VAR 0 3
13356: PPUSH
13357: LD_INT 1
13359: PPUSH
13360: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13364: LD_INT 33
13366: PPUSH
13367: LD_VAR 0 3
13371: PPUSH
13372: LD_INT 1
13374: PPUSH
13375: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13379: LD_INT 9
13381: PPUSH
13382: LD_VAR 0 3
13386: PPUSH
13387: LD_INT 1
13389: PPUSH
13390: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13394: LD_INT 38
13396: PPUSH
13397: LD_VAR 0 3
13401: PPUSH
13402: LD_INT 1
13404: PPUSH
13405: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13409: LD_INT 57
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 1
13419: PPUSH
13420: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13424: LD_INT 58
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13439: LD_INT 28
13441: PPUSH
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 1
13449: PPUSH
13450: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13454: LD_INT 29
13456: PPUSH
13457: LD_VAR 0 3
13461: PPUSH
13462: LD_INT 1
13464: PPUSH
13465: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13469: LD_INT 30
13471: PPUSH
13472: LD_VAR 0 3
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13484: LD_INT 37
13486: PPUSH
13487: LD_VAR 0 3
13491: PPUSH
13492: LD_INT 1
13494: PPUSH
13495: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13499: LD_INT 63
13501: PPUSH
13502: LD_VAR 0 3
13506: PPUSH
13507: LD_INT 1
13509: PPUSH
13510: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13514: LD_INT 64
13516: PPUSH
13517: LD_VAR 0 3
13521: PPUSH
13522: LD_INT 1
13524: PPUSH
13525: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13529: LD_INT 3
13531: PPUSH
13532: LD_VAR 0 3
13536: PPUSH
13537: LD_INT 1
13539: PPUSH
13540: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13544: LD_INT 4
13546: PPUSH
13547: LD_VAR 0 3
13551: PPUSH
13552: LD_INT 1
13554: PPUSH
13555: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13559: LD_INT 5
13561: PPUSH
13562: LD_VAR 0 3
13566: PPUSH
13567: LD_INT 1
13569: PPUSH
13570: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13574: LD_INT 8
13576: PPUSH
13577: LD_VAR 0 3
13581: PPUSH
13582: LD_INT 1
13584: PPUSH
13585: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13589: LD_INT 66
13591: PPUSH
13592: LD_VAR 0 3
13596: PPUSH
13597: LD_INT 1
13599: PPUSH
13600: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13604: LD_INT 67
13606: PPUSH
13607: LD_VAR 0 3
13611: PPUSH
13612: LD_INT 1
13614: PPUSH
13615: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13619: LD_INT 21
13621: PPUSH
13622: LD_VAR 0 3
13626: PPUSH
13627: LD_INT 1
13629: PPUSH
13630: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13634: LD_INT 22
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13649: LD_INT 19
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: LD_INT 1
13659: PPUSH
13660: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13664: LD_INT 26
13666: PPUSH
13667: LD_VAR 0 3
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13679: LD_INT 54
13681: PPUSH
13682: LD_VAR 0 3
13686: PPUSH
13687: LD_INT 1
13689: PPUSH
13690: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13694: LD_INT 55
13696: PPUSH
13697: LD_VAR 0 3
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: CALL_OW 322
// for i = 0 to 39 do
13709: LD_ADDR_VAR 0 4
13713: PUSH
13714: DOUBLE
13715: LD_INT 0
13717: DEC
13718: ST_TO_ADDR
13719: LD_INT 39
13721: PUSH
13722: FOR_TO
13723: IFFALSE 13744
// SetRestrict ( i , side , true ) ;
13725: LD_VAR 0 4
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 324
13742: GO 13722
13744: POP
13745: POP
// end ; else
13746: GO 13823
13748: POP
// begin for i = 1 to 73 do
13749: LD_ADDR_VAR 0 4
13753: PUSH
13754: DOUBLE
13755: LD_INT 1
13757: DEC
13758: ST_TO_ADDR
13759: LD_INT 73
13761: PUSH
13762: FOR_TO
13763: IFFALSE 13784
// SetTech ( i , side , state_enabled ) ;
13765: LD_VAR 0 4
13769: PPUSH
13770: LD_VAR 0 3
13774: PPUSH
13775: LD_INT 1
13777: PPUSH
13778: CALL_OW 322
13782: GO 13762
13784: POP
13785: POP
// for i = 0 to 39 do
13786: LD_ADDR_VAR 0 4
13790: PUSH
13791: DOUBLE
13792: LD_INT 0
13794: DEC
13795: ST_TO_ADDR
13796: LD_INT 39
13798: PUSH
13799: FOR_TO
13800: IFFALSE 13821
// SetRestrict ( i , side , true ) ;
13802: LD_VAR 0 4
13806: PPUSH
13807: LD_VAR 0 3
13811: PPUSH
13812: LD_INT 1
13814: PPUSH
13815: CALL_OW 324
13819: GO 13799
13821: POP
13822: POP
// end ; end ; end ;
13823: GO 9828
13825: POP
13826: POP
// end ; end_of_file
13827: LD_VAR 0 2
13831: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13832: LD_INT 0
13834: PPUSH
13835: PPUSH
13836: PPUSH
13837: PPUSH
13838: PPUSH
13839: PPUSH
13840: PPUSH
13841: PPUSH
13842: PPUSH
// for i := 1 to 8 do
13843: LD_ADDR_VAR 0 2
13847: PUSH
13848: DOUBLE
13849: LD_INT 1
13851: DEC
13852: ST_TO_ADDR
13853: LD_INT 8
13855: PUSH
13856: FOR_TO
13857: IFFALSE 14241
// begin if Side_Positions [ i ] then
13859: LD_EXP 40
13863: PUSH
13864: LD_VAR 0 2
13868: ARRAY
13869: IFFALSE 14239
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13871: LD_ADDR_VAR 0 7
13875: PUSH
13876: LD_INT 22
13878: PUSH
13879: LD_VAR 0 2
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 21
13890: PUSH
13891: LD_INT 1
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PPUSH
13902: CALL_OW 69
13906: PUSH
13907: LD_INT 0
13909: PLUS
13910: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13911: LD_ADDR_VAR 0 9
13915: PUSH
13916: LD_INT 22
13918: PUSH
13919: LD_VAR 0 2
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 2
13930: PUSH
13931: LD_INT 30
13933: PUSH
13934: LD_INT 0
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 30
13943: PUSH
13944: LD_INT 1
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: LIST
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 69
13964: ST_TO_ADDR
// crates := 0 ;
13965: LD_ADDR_VAR 0 4
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// oil := 0 ;
13973: LD_ADDR_VAR 0 5
13977: PUSH
13978: LD_INT 0
13980: ST_TO_ADDR
// sib := 0 ;
13981: LD_ADDR_VAR 0 6
13985: PUSH
13986: LD_INT 0
13988: ST_TO_ADDR
// if bases then
13989: LD_VAR 0 9
13993: IFFALSE 14099
// begin for j in bases do
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: LD_VAR 0 9
14004: PUSH
14005: FOR_IN
14006: IFFALSE 14097
// begin base := GetBase ( j ) ;
14008: LD_ADDR_VAR 0 8
14012: PUSH
14013: LD_VAR 0 3
14017: PPUSH
14018: CALL_OW 274
14022: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
14023: LD_ADDR_VAR 0 4
14027: PUSH
14028: LD_VAR 0 4
14032: PUSH
14033: LD_VAR 0 8
14037: PPUSH
14038: LD_INT 1
14040: PPUSH
14041: CALL_OW 275
14045: PLUS
14046: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
14047: LD_ADDR_VAR 0 5
14051: PUSH
14052: LD_VAR 0 5
14056: PUSH
14057: LD_VAR 0 8
14061: PPUSH
14062: LD_INT 2
14064: PPUSH
14065: CALL_OW 275
14069: PLUS
14070: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
14071: LD_ADDR_VAR 0 6
14075: PUSH
14076: LD_VAR 0 6
14080: PUSH
14081: LD_VAR 0 8
14085: PPUSH
14086: LD_INT 3
14088: PPUSH
14089: CALL_OW 275
14093: PLUS
14094: ST_TO_ADDR
// end ;
14095: GO 14005
14097: POP
14098: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14099: LD_STRING setSpecText(
14101: PUSH
14102: LD_VAR 0 2
14106: STR
14107: PUSH
14108: LD_STRING ,
14110: STR
14111: PUSH
14112: LD_INT 2
14114: STR
14115: PUSH
14116: LD_STRING ,
14118: STR
14119: PUSH
14120: LD_VAR 0 4
14124: STR
14125: PUSH
14126: LD_STRING )
14128: STR
14129: PPUSH
14130: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14134: LD_STRING setSpecText(
14136: PUSH
14137: LD_VAR 0 2
14141: STR
14142: PUSH
14143: LD_STRING ,
14145: STR
14146: PUSH
14147: LD_INT 3
14149: STR
14150: PUSH
14151: LD_STRING ,
14153: STR
14154: PUSH
14155: LD_VAR 0 5
14159: STR
14160: PUSH
14161: LD_STRING )
14163: STR
14164: PPUSH
14165: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14169: LD_STRING setSpecText(
14171: PUSH
14172: LD_VAR 0 2
14176: STR
14177: PUSH
14178: LD_STRING ,
14180: STR
14181: PUSH
14182: LD_INT 4
14184: STR
14185: PUSH
14186: LD_STRING ,
14188: STR
14189: PUSH
14190: LD_VAR 0 6
14194: STR
14195: PUSH
14196: LD_STRING )
14198: STR
14199: PPUSH
14200: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14204: LD_STRING setSpecText(
14206: PUSH
14207: LD_VAR 0 2
14211: STR
14212: PUSH
14213: LD_STRING ,
14215: STR
14216: PUSH
14217: LD_INT 5
14219: STR
14220: PUSH
14221: LD_STRING ,
14223: STR
14224: PUSH
14225: LD_VAR 0 7
14229: STR
14230: PUSH
14231: LD_STRING )
14233: STR
14234: PPUSH
14235: CALL_OW 559
// end ; end ;
14239: GO 13856
14241: POP
14242: POP
// end ;
14243: LD_VAR 0 1
14247: RET
// every 0 0$1 do
14248: GO 14250
14250: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14251: LD_STRING setSpecLogoNumber(
14253: PUSH
14254: LD_INT 2
14256: STR
14257: PUSH
14258: LD_STRING ,
14260: STR
14261: PUSH
14262: LD_INT 1
14264: STR
14265: PUSH
14266: LD_STRING )
14268: STR
14269: PPUSH
14270: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14274: LD_STRING setSpecLogoNumber(
14276: PUSH
14277: LD_INT 3
14279: STR
14280: PUSH
14281: LD_STRING ,
14283: STR
14284: PUSH
14285: LD_INT 2
14287: STR
14288: PUSH
14289: LD_STRING )
14291: STR
14292: PPUSH
14293: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14297: LD_STRING setSpecLogoNumber(
14299: PUSH
14300: LD_INT 4
14302: STR
14303: PUSH
14304: LD_STRING ,
14306: STR
14307: PUSH
14308: LD_INT 3
14310: STR
14311: PUSH
14312: LD_STRING )
14314: STR
14315: PPUSH
14316: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14320: LD_STRING setSpecLogoNumber(
14322: PUSH
14323: LD_INT 5
14325: STR
14326: PUSH
14327: LD_STRING ,
14329: STR
14330: PUSH
14331: LD_INT 4
14333: STR
14334: PUSH
14335: LD_STRING )
14337: STR
14338: PPUSH
14339: CALL_OW 559
// end ;
14343: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14344: LD_INT 2
14346: PUSH
14347: LD_INT 30
14349: PUSH
14350: LD_INT 0
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 30
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: LIST
14371: PPUSH
14372: CALL_OW 69
14376: IFFALSE 14386
14378: GO 14380
14380: DISABLE
// begin enable ;
14381: ENABLE
// UpdateSpectatorBar ;
14382: CALL 13832 0 0
// end ; end_of_file
14386: END
// var respawn , inqueue ; export function init_respawning ; begin
14387: LD_INT 0
14389: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14390: LD_ADDR_LOC 11
14394: PUSH
14395: LD_INT 1
14397: PPUSH
14398: LD_INT 8
14400: PPUSH
14401: CALL_OW 12
14405: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14406: LD_ADDR_LOC 12
14410: PUSH
14411: LD_INT 0
14413: PUSH
14414: LD_INT 0
14416: PUSH
14417: LD_INT 0
14419: PUSH
14420: LD_INT 0
14422: PUSH
14423: LD_INT 0
14425: PUSH
14426: LD_INT 0
14428: PUSH
14429: LD_INT 0
14431: PUSH
14432: LD_INT 0
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: ST_TO_ADDR
// end ;
14445: LD_VAR 0 1
14449: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14450: GO 14452
14452: DISABLE
14453: LD_INT 0
14455: PPUSH
14456: PPUSH
14457: PPUSH
// begin if respawning_time_max = 0 then
14458: LD_EXP 26
14462: PUSH
14463: LD_INT 0
14465: EQUAL
14466: IFFALSE 14470
// exit ;
14468: GO 14878
// if respawn = 8 then
14470: LD_LOC 11
14474: PUSH
14475: LD_INT 8
14477: EQUAL
14478: IFFALSE 14490
// respawn := 1 else
14480: LD_ADDR_LOC 11
14484: PUSH
14485: LD_INT 1
14487: ST_TO_ADDR
14488: GO 14504
// respawn := respawn + 1 ;
14490: LD_ADDR_LOC 11
14494: PUSH
14495: LD_LOC 11
14499: PUSH
14500: LD_INT 1
14502: PLUS
14503: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14504: LD_EXP 40
14508: PUSH
14509: LD_LOC 11
14513: ARRAY
14514: PUSH
14515: LD_LOC 12
14519: PUSH
14520: LD_LOC 11
14524: ARRAY
14525: NOT
14526: AND
14527: IFFALSE 14877
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14529: LD_ADDR_VAR 0 1
14533: PUSH
14534: LD_INT 21
14536: PUSH
14537: LD_INT 1
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 22
14546: PUSH
14547: LD_LOC 11
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: LD_INT 23
14561: PUSH
14562: LD_INT 0
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: PPUSH
14575: CALL_OW 69
14579: ST_TO_ADDR
// if n < number_of_people then
14580: LD_VAR 0 1
14584: PUSH
14585: LD_EXP 19
14589: LESS
14590: IFFALSE 14874
// begin aktresp := respawn ;
14592: LD_ADDR_VAR 0 3
14596: PUSH
14597: LD_LOC 11
14601: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14602: LD_ADDR_LOC 12
14606: PUSH
14607: LD_LOC 12
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: CALL_OW 1
14624: ST_TO_ADDR
// enable ;
14625: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14626: LD_EXP 25
14630: PPUSH
14631: LD_EXP 26
14635: PPUSH
14636: CALL_OW 12
14640: PPUSH
14641: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14645: LD_ADDR_LOC 12
14649: PUSH
14650: LD_LOC 12
14654: PPUSH
14655: LD_VAR 0 3
14659: PPUSH
14660: LD_INT 0
14662: PPUSH
14663: CALL_OW 1
14667: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14668: LD_ADDR_VAR 0 2
14672: PUSH
14673: LD_INT 21
14675: PUSH
14676: LD_INT 3
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: LD_INT 30
14688: PUSH
14689: LD_INT 0
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 30
14698: PUSH
14699: LD_INT 1
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 50
14713: PUSH
14714: EMPTY
14715: LIST
14716: PUSH
14717: LD_INT 22
14719: PUSH
14720: LD_VAR 0 3
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: PPUSH
14735: CALL_OW 69
14739: ST_TO_ADDR
// if dep = 0 then
14740: LD_VAR 0 2
14744: PUSH
14745: LD_INT 0
14747: EQUAL
14748: IFFALSE 14752
// exit ;
14750: GO 14878
// hc_name :=  ;
14752: LD_ADDR_OWVAR 26
14756: PUSH
14757: LD_STRING 
14759: ST_TO_ADDR
// hc_importance := 0 ;
14760: LD_ADDR_OWVAR 32
14764: PUSH
14765: LD_INT 0
14767: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14768: LD_INT 0
14770: PPUSH
14771: LD_INT 0
14773: PPUSH
14774: LD_EXP 20
14778: PUSH
14779: LD_INT 2
14781: DIV
14782: PPUSH
14783: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14787: LD_ADDR_OWVAR 21
14791: PUSH
14792: LD_EXP 41
14796: PUSH
14797: LD_VAR 0 3
14801: ARRAY
14802: ST_TO_ADDR
// uc_side := aktresp ;
14803: LD_ADDR_OWVAR 20
14807: PUSH
14808: LD_VAR 0 3
14812: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14813: LD_ADDR_VAR 0 2
14817: PUSH
14818: LD_VAR 0 2
14822: PUSH
14823: LD_INT 1
14825: PPUSH
14826: LD_VAR 0 2
14830: PPUSH
14831: CALL_OW 12
14835: ARRAY
14836: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14837: CALL_OW 44
14841: PPUSH
14842: LD_VAR 0 2
14846: PPUSH
14847: CALL_OW 250
14851: PPUSH
14852: LD_VAR 0 2
14856: PPUSH
14857: CALL_OW 251
14861: PPUSH
14862: LD_INT 7
14864: PPUSH
14865: LD_INT 1
14867: PPUSH
14868: CALL_OW 50
// end else
14872: GO 14875
// enable ;
14874: ENABLE
// end else
14875: GO 14878
// enable ;
14877: ENABLE
// end ;
14878: PPOPN 3
14880: END
