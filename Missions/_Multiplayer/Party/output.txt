// export gametype , def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_oil_deposits , def_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_cost , def_cost_decreasing ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , cost , decr_cost_time , real_cost , oil_dep , sib_dep , amount_of_apemen , siberite_bomb_Delay ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game ; export depot_def , breastworks_def , start_def , deposits_def , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var sides , s1 , s2 , s3 , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
// if MultiPlayer then
   8: LD_OWVAR 4
  12: IFFALSE 86
// begin gametype = mp_game_type ;
  14: LD_ADDR_EXP 1
  18: PUSH
  19: LD_OWVAR 6
  23: ST_TO_ADDR
// Player_Side = mp_player_side ;
  24: LD_ADDR_EXP 36
  28: PUSH
  29: LD_OWVAR 7
  33: ST_TO_ADDR
// Player_Team = mp_player_team ;
  34: LD_ADDR_EXP 37
  38: PUSH
  39: LD_OWVAR 8
  43: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  44: LD_ADDR_EXP 40
  48: PUSH
  49: LD_OWVAR 17
  53: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  54: LD_ADDR_EXP 38
  58: PUSH
  59: LD_OWVAR 15
  63: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  64: LD_ADDR_EXP 41
  68: PUSH
  69: LD_OWVAR 16
  73: ST_TO_ADDR
// Teams = mp_teams ;
  74: LD_ADDR_EXP 39
  78: PUSH
  79: LD_OWVAR 12
  83: ST_TO_ADDR
// end else
  84: GO 256
// begin gametype = 11 ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 11
  93: ST_TO_ADDR
// Player_Side = 4 ;
  94: LD_ADDR_EXP 36
  98: PUSH
  99: LD_INT 4
 101: ST_TO_ADDR
// Player_Team = 2 ;
 102: LD_ADDR_EXP 37
 106: PUSH
 107: LD_INT 2
 109: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 110: LD_ADDR_EXP 40
 114: PUSH
 115: LD_INT 0
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 1
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 4
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 149: LD_ADDR_EXP 38
 153: PUSH
 154: LD_INT 0
 156: PUSH
 157: LD_INT 1
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 188: LD_ADDR_EXP 41
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 3
 198: PUSH
 199: LD_INT 0
 201: PUSH
 202: LD_INT 1
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: LD_INT 3
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Teams = [ [ 2 , 7 ] , [ 6 , 4 ] ] ;
 227: LD_ADDR_EXP 39
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: LD_INT 7
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 6
 244: PUSH
 245: LD_INT 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 256: LD_ADDR_EXP 34
 260: PUSH
 261: LD_EXP 40
 265: PUSH
 266: LD_INT 0
 268: PUSH
 269: EMPTY
 270: LIST
 271: DIFF
 272: PUSH
 273: LD_INT 0
 275: PLUS
 276: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 277: LD_ADDR_EXP 35
 281: PUSH
 282: LD_EXP 38
 286: PUSH
 287: LD_INT 0
 289: PUSH
 290: EMPTY
 291: LIST
 292: DIFF
 293: PUSH
 294: LD_INT 0
 296: PLUS
 297: ST_TO_ADDR
// if MultiPlayer then
 298: LD_OWVAR 4
 302: IFFALSE 534
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 304: LD_ADDR_EXP 2
 308: PUSH
 309: LD_INT 0
 311: PPUSH
 312: CALL_OW 426
 316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 317: LD_ADDR_EXP 3
 321: PUSH
 322: LD_INT 1
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// def_skill_level = GetMultiplayerSetting ( 2 ) ;
 330: LD_ADDR_EXP 4
 334: PUSH
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 343: LD_ADDR_EXP 5
 347: PUSH
 348: LD_INT 3
 350: PPUSH
 351: CALL_OW 426
 355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 356: LD_ADDR_EXP 6
 360: PUSH
 361: LD_INT 4
 363: PPUSH
 364: CALL_OW 426
 368: ST_TO_ADDR
// def_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 369: LD_ADDR_EXP 7
 373: PUSH
 374: LD_INT 5
 376: PPUSH
 377: CALL_OW 426
 381: ST_TO_ADDR
// def_sib_deposits = GetMultiplayerSetting ( 6 ) ;
 382: LD_ADDR_EXP 8
 386: PUSH
 387: LD_INT 6
 389: PPUSH
 390: CALL_OW 426
 394: ST_TO_ADDR
// if gametype = 11 then
 395: LD_EXP 1
 399: PUSH
 400: LD_INT 11
 402: EQUAL
 403: IFFALSE 415
// def_shared_vision = 0 else
 405: LD_ADDR_EXP 9
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
 413: GO 428
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 415: LD_ADDR_EXP 9
 419: PUSH
 420: LD_INT 10
 422: PPUSH
 423: CALL_OW 426
 427: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 428: LD_ADDR_EXP 10
 432: PUSH
 433: LD_INT 11
 435: PPUSH
 436: CALL_OW 426
 440: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 441: LD_ADDR_EXP 11
 445: PUSH
 446: LD_INT 12
 448: PPUSH
 449: CALL_OW 426
 453: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 454: LD_ADDR_EXP 12
 458: PUSH
 459: LD_INT 13
 461: PPUSH
 462: CALL_OW 426
 466: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 467: LD_ADDR_EXP 13
 471: PUSH
 472: LD_INT 14
 474: PPUSH
 475: CALL_OW 426
 479: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 480: LD_ADDR_EXP 14
 484: PUSH
 485: LD_INT 15
 487: PPUSH
 488: CALL_OW 426
 492: ST_TO_ADDR
// def_cost = GetMultiplayerSetting ( 16 ) ;
 493: LD_ADDR_EXP 15
 497: PUSH
 498: LD_INT 16
 500: PPUSH
 501: CALL_OW 426
 505: ST_TO_ADDR
// def_cost_decreasing = GetMultiplayerSetting ( 17 ) ;
 506: LD_ADDR_EXP 16
 510: PUSH
 511: LD_INT 17
 513: PPUSH
 514: CALL_OW 426
 518: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 519: LD_ADDR_VAR 0 6
 523: PUSH
 524: LD_INT 22
 526: PPUSH
 527: CALL_OW 426
 531: ST_TO_ADDR
// end else
 532: GO 666
// begin randomize ;
 534: CALL_OW 10
// def_base_level = 0 ;
 538: LD_ADDR_EXP 2
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// def_amount_of_people = 4 ;
 546: LD_ADDR_EXP 3
 550: PUSH
 551: LD_INT 4
 553: ST_TO_ADDR
// def_skill_level = 3 ;
 554: LD_ADDR_EXP 4
 558: PUSH
 559: LD_INT 3
 561: ST_TO_ADDR
// def_starting_resources = 3 ;
 562: LD_ADDR_EXP 5
 566: PUSH
 567: LD_INT 3
 569: ST_TO_ADDR
// def_shipments_density = 2 ;
 570: LD_ADDR_EXP 6
 574: PUSH
 575: LD_INT 2
 577: ST_TO_ADDR
// def_oil_deposits = 2 ;
 578: LD_ADDR_EXP 7
 582: PUSH
 583: LD_INT 2
 585: ST_TO_ADDR
// def_sib_deposits = 2 ;
 586: LD_ADDR_EXP 8
 590: PUSH
 591: LD_INT 2
 593: ST_TO_ADDR
// def_shared_vision = 1 ;
 594: LD_ADDR_EXP 9
 598: PUSH
 599: LD_INT 1
 601: ST_TO_ADDR
// def_morale_flags = 4 ;
 602: LD_ADDR_EXP 10
 606: PUSH
 607: LD_INT 4
 609: ST_TO_ADDR
// def_siberite_detection = 1 ;
 610: LD_ADDR_EXP 11
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 618: LD_ADDR_EXP 12
 622: PUSH
 623: LD_INT 3
 625: ST_TO_ADDR
// def_people_respawning = 0 ;
 626: LD_ADDR_EXP 13
 630: PUSH
 631: LD_INT 0
 633: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 634: LD_ADDR_EXP 14
 638: PUSH
 639: LD_INT 0
 641: ST_TO_ADDR
// def_cost = 4 ;
 642: LD_ADDR_EXP 15
 646: PUSH
 647: LD_INT 4
 649: ST_TO_ADDR
// def_cost_decreasing = 0 ;
 650: LD_ADDR_EXP 16
 654: PUSH
 655: LD_INT 0
 657: ST_TO_ADDR
// tech_level = 4 ;
 658: LD_ADDR_VAR 0 6
 662: PUSH
 663: LD_INT 4
 665: ST_TO_ADDR
// end ; if isSGUI then
 666: LD_OWVAR 83
 670: IFFALSE 678
// setMpTechs ( ) else
 672: CALL 9493 0 0
 676: GO 691
// begin SetMpTechLevel ( tech_level + 1 ) ;
 678: LD_VAR 0 6
 682: PUSH
 683: LD_INT 1
 685: PLUS
 686: PPUSH
 687: CALL 9640 0 1
// end ; if gametype = 11 then
 691: LD_EXP 1
 695: PUSH
 696: LD_INT 11
 698: EQUAL
 699: IFFALSE 1041
// begin sides = [ ] ;
 701: LD_ADDR_VAR 0 2
 705: PUSH
 706: EMPTY
 707: ST_TO_ADDR
// for s1 = 1 to Side_Positions do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: DOUBLE
 714: LD_INT 1
 716: DEC
 717: ST_TO_ADDR
 718: LD_EXP 40
 722: PUSH
 723: FOR_TO
 724: IFFALSE 756
// if Side_Positions [ s1 ] then
 726: LD_EXP 40
 730: PUSH
 731: LD_VAR 0 3
 735: ARRAY
 736: IFFALSE 754
// sides = sides ^ s1 ;
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: LD_VAR 0 2
 747: PUSH
 748: LD_VAR 0 3
 752: ADD
 753: ST_TO_ADDR
 754: GO 723
 756: POP
 757: POP
// if sides < 4 then
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 4
 765: LESS
 766: IFFALSE 781
// begin YouLostInMultiplayer ;
 768: CALL_OW 107
// wait ( 0 0$1 ) ;
 772: LD_INT 35
 774: PPUSH
 775: CALL_OW 67
// exit ;
 779: GO 1649
// end ; s1 = sides [ Rand ( 1 , 4 ) ] ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_INT 1
 793: PPUSH
 794: LD_INT 4
 796: PPUSH
 797: CALL_OW 12
 801: ARRAY
 802: ST_TO_ADDR
// sides = sides diff s1 ;
 803: LD_ADDR_VAR 0 2
 807: PUSH
 808: LD_VAR 0 2
 812: PUSH
 813: LD_VAR 0 3
 817: DIFF
 818: ST_TO_ADDR
// s2 = sides [ Rand ( 1 , 3 ) ] ;
 819: LD_ADDR_VAR 0 4
 823: PUSH
 824: LD_VAR 0 2
 828: PUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 12
 839: ARRAY
 840: ST_TO_ADDR
// sides = sides diff s2 ;
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_VAR 0 4
 855: DIFF
 856: ST_TO_ADDR
// s3 = sides [ Rand ( 1 , 2 ) ] ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 2
 866: PUSH
 867: LD_INT 1
 869: PPUSH
 870: LD_INT 2
 872: PPUSH
 873: CALL_OW 12
 877: ARRAY
 878: ST_TO_ADDR
// sides = sides diff s3 ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_VAR 0 2
 888: PUSH
 889: LD_VAR 0 5
 893: DIFF
 894: ST_TO_ADDR
// Teams = [ [ s1 , s2 ] , [ s3 , sides [ 1 ] ] ] ;
 895: LD_ADDR_EXP 39
 899: PUSH
 900: LD_VAR 0 3
 904: PUSH
 905: LD_VAR 0 4
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_VAR 0 5
 918: PUSH
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 936: LD_ADDR_EXP 38
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 0
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: ST_TO_ADDR
// Side_Teams = Replace ( Replace ( Replace ( Replace ( Side_Teams , s1 , 1 ) , s2 , 1 ) , s3 , 2 ) , sides [ 1 ] , 2 ) ;
 975: LD_ADDR_EXP 38
 979: PUSH
 980: LD_EXP 38
 984: PPUSH
 985: LD_VAR 0 3
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 1
 997: PPUSH
 998: LD_VAR 0 4
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 1
1010: PPUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_INT 2
1018: PPUSH
1019: CALL_OW 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PUSH
1029: LD_INT 1
1031: ARRAY
1032: PPUSH
1033: LD_INT 2
1035: PPUSH
1036: CALL_OW 1
1040: ST_TO_ADDR
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1041: LD_ADDR_EXP 17
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: LD_INT 1
1054: PUSH
1055: LD_INT 1
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: LD_EXP 2
1068: PUSH
1069: LD_INT 1
1071: PLUS
1072: ARRAY
1073: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1074: LD_ADDR_EXP 18
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 4
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 2
1101: PUSH
1102: LD_INT 1
1104: PLUS
1105: ARRAY
1106: ST_TO_ADDR
// skill_level = [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1107: LD_ADDR_EXP 20
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: LD_INT 4
1120: PUSH
1121: LD_INT 5
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: LD_EXP 4
1134: PUSH
1135: LD_INT 1
1137: PLUS
1138: ARRAY
1139: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1140: LD_ADDR_EXP 22
1144: PUSH
1145: LD_INT 0
1147: PUSH
1148: LD_INT 0
1150: PUSH
1151: LD_INT 0
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_INT 30
1161: PUSH
1162: LD_INT 0
1164: PUSH
1165: LD_INT 0
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: PUSH
1173: LD_INT 50
1175: PUSH
1176: LD_INT 20
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 80
1189: PUSH
1190: LD_INT 40
1192: PUSH
1193: LD_INT 20
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_EXP 5
1211: PUSH
1212: LD_INT 1
1214: PLUS
1215: ARRAY
1216: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1217: LD_ADDR_EXP 21
1221: PUSH
1222: LD_INT 10
1224: PUSH
1225: EMPTY
1226: LIST
1227: PUSH
1228: LD_INT 7
1230: PUSH
1231: LD_INT 14
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 6
1240: PUSH
1241: LD_INT 12
1243: PUSH
1244: LD_INT 18
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 5
1254: PUSH
1255: LD_INT 10
1257: PUSH
1258: LD_INT 15
1260: PUSH
1261: LD_INT 20
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_EXP 5
1280: PUSH
1281: LD_INT 1
1283: PLUS
1284: ARRAY
1285: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1286: LD_ADDR_EXP 19
1290: PUSH
1291: LD_EXP 3
1295: PUSH
1296: LD_INT 4
1298: PLUS
1299: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 4 ;
1300: LD_ADDR_EXP 23
1304: PUSH
1305: LD_INT 20
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 4
1315: MUL
1316: PLUS
1317: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1318: LD_ADDR_EXP 32
1322: PUSH
1323: LD_INT 0
1325: PUSH
1326: LD_INT 3
1328: PUSH
1329: LD_INT 6
1331: PUSH
1332: LD_INT 9
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 12
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1351: LD_ADDR_EXP 25
1355: PUSH
1356: LD_INT 0
1358: PUSH
1359: LD_INT 8400
1361: PUSH
1362: LD_INT 1750
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 13
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1380: LD_ADDR_EXP 26
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 21000
1390: PUSH
1391: LD_INT 4200
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_EXP 13
1403: PUSH
1404: LD_INT 1
1406: PLUS
1407: ARRAY
1408: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1409: LD_ADDR_EXP 24
1413: PUSH
1414: LD_INT 1
1416: NEG
1417: PUSH
1418: LD_INT 350
1420: PUSH
1421: LD_INT 700
1423: PUSH
1424: LD_INT 1400
1426: PUSH
1427: LD_INT 0
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_EXP 10
1441: PUSH
1442: LD_INT 1
1444: PLUS
1445: ARRAY
1446: ST_TO_ADDR
// battle_flags_id = [ ] ;
1447: LD_ADDR_EXP 49
1451: PUSH
1452: EMPTY
1453: ST_TO_ADDR
// cost = [ 200 , 300 , 400 , 600 , 800 ] [ def_cost + 1 ] ;
1454: LD_ADDR_EXP 27
1458: PUSH
1459: LD_INT 200
1461: PUSH
1462: LD_INT 300
1464: PUSH
1465: LD_INT 400
1467: PUSH
1468: LD_INT 600
1470: PUSH
1471: LD_INT 800
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PUSH
1481: LD_EXP 15
1485: PUSH
1486: LD_INT 1
1488: PLUS
1489: ARRAY
1490: ST_TO_ADDR
// decr_cost_time = [ 0 , 20 20$0 , 10 10$0 , 5 5$0 ] [ def_cost_decreasing + 1 ] ;
1491: LD_ADDR_EXP 28
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: LD_INT 42000
1501: PUSH
1502: LD_INT 21000
1504: PUSH
1505: LD_INT 10500
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: LD_EXP 16
1518: PUSH
1519: LD_INT 1
1521: PLUS
1522: ARRAY
1523: ST_TO_ADDR
// oil_dep = [ [ 1 ] , [ 4 ] , [ 1 , 4 ] ] [ def_oil_deposits + 1 ] ;
1524: LD_ADDR_EXP 30
1528: PUSH
1529: LD_INT 1
1531: PUSH
1532: EMPTY
1533: LIST
1534: PUSH
1535: LD_INT 4
1537: PUSH
1538: EMPTY
1539: LIST
1540: PUSH
1541: LD_INT 1
1543: PUSH
1544: LD_INT 4
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_EXP 7
1560: PUSH
1561: LD_INT 1
1563: PLUS
1564: ARRAY
1565: ST_TO_ADDR
// sib_dep = [ [ 2 ] , [ 3 ] , [ 2 , 3 ] ] [ def_sib_deposits + 1 ] ;
1566: LD_ADDR_EXP 31
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: EMPTY
1575: LIST
1576: PUSH
1577: LD_INT 3
1579: PUSH
1580: EMPTY
1581: LIST
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_EXP 8
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ARRAY
1607: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1608: LD_ADDR_EXP 33
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 63000
1621: PUSH
1622: LD_INT 126000
1624: PUSH
1625: LD_INT 189000
1627: PUSH
1628: LD_INT 252000
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_EXP 14
1643: PUSH
1644: LD_INT 1
1646: PLUS
1647: ARRAY
1648: ST_TO_ADDR
// end ;
1649: LD_VAR 0 1
1653: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i , coord ; begin
1654: LD_INT 0
1656: PPUSH
1657: PPUSH
1658: PPUSH
1659: PPUSH
1660: PPUSH
1661: PPUSH
1662: PPUSH
1663: PPUSH
1664: PPUSH
1665: PPUSH
// depot_def = [ ] ;
1666: LD_ADDR_EXP 45
1670: PUSH
1671: EMPTY
1672: ST_TO_ADDR
// breastworks_def = [ ] ;
1673: LD_ADDR_EXP 46
1677: PUSH
1678: EMPTY
1679: ST_TO_ADDR
// for side := 1 to 4 do
1680: LD_ADDR_VAR 0 2
1684: PUSH
1685: DOUBLE
1686: LD_INT 1
1688: DEC
1689: ST_TO_ADDR
1690: LD_INT 4
1692: PUSH
1693: FOR_TO
1694: IFFALSE 2120
// begin dep := side * 5 - 4 ;
1696: LD_ADDR_VAR 0 3
1700: PUSH
1701: LD_VAR 0 2
1705: PUSH
1706: LD_INT 5
1708: MUL
1709: PUSH
1710: LD_INT 4
1712: MINUS
1713: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1714: LD_ADDR_VAR 0 4
1718: PUSH
1719: LD_VAR 0 2
1723: PUSH
1724: LD_INT 5
1726: MUL
1727: PUSH
1728: LD_INT 3
1730: MINUS
1731: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1732: LD_ADDR_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: PUSH
1742: LD_INT 5
1744: MUL
1745: PUSH
1746: LD_INT 2
1748: MINUS
1749: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1750: LD_ADDR_VAR 0 6
1754: PUSH
1755: LD_VAR 0 2
1759: PUSH
1760: LD_INT 5
1762: MUL
1763: PUSH
1764: LD_INT 1
1766: MINUS
1767: ST_TO_ADDR
// br4 := side * 5 ;
1768: LD_ADDR_VAR 0 7
1772: PUSH
1773: LD_VAR 0 2
1777: PUSH
1778: LD_INT 5
1780: MUL
1781: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1782: LD_ADDR_EXP 45
1786: PUSH
1787: LD_EXP 45
1791: PUSH
1792: LD_VAR 0 3
1796: PPUSH
1797: CALL_OW 250
1801: PUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 251
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: CALL_OW 254
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: ADD
1830: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1831: LD_ADDR_EXP 47
1835: PUSH
1836: LD_EXP 47
1840: PUSH
1841: LD_VAR 0 3
1845: PPUSH
1846: CALL_OW 250
1850: PPUSH
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 254
1860: PUSH
1861: LD_INT 6
1863: MOD
1864: PPUSH
1865: LD_INT 6
1867: PPUSH
1868: CALL_OW 272
1872: PUSH
1873: LD_VAR 0 3
1877: PPUSH
1878: CALL_OW 251
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: CALL_OW 254
1892: PUSH
1893: LD_INT 6
1895: MOD
1896: PPUSH
1897: LD_INT 6
1899: PPUSH
1900: CALL_OW 273
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: ADD
1912: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1913: LD_ADDR_EXP 46
1917: PUSH
1918: LD_EXP 46
1922: PUSH
1923: LD_VAR 0 4
1927: PPUSH
1928: CALL_OW 250
1932: PUSH
1933: LD_VAR 0 4
1937: PPUSH
1938: CALL_OW 251
1942: PUSH
1943: LD_VAR 0 4
1947: PPUSH
1948: CALL_OW 254
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: LD_VAR 0 5
1962: PPUSH
1963: CALL_OW 250
1967: PUSH
1968: LD_VAR 0 5
1972: PPUSH
1973: CALL_OW 251
1977: PUSH
1978: LD_VAR 0 5
1982: PPUSH
1983: CALL_OW 254
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 6
1997: PPUSH
1998: CALL_OW 250
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: CALL_OW 251
2012: PUSH
2013: LD_VAR 0 6
2017: PPUSH
2018: CALL_OW 254
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: LD_VAR 0 7
2032: PPUSH
2033: CALL_OW 250
2037: PUSH
2038: LD_VAR 0 7
2042: PPUSH
2043: CALL_OW 251
2047: PUSH
2048: LD_VAR 0 7
2052: PPUSH
2053: CALL_OW 254
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: EMPTY
2070: LIST
2071: ADD
2072: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: CALL_OW 65
// DestroyUnit ( br1 ) ;
2082: LD_VAR 0 4
2086: PPUSH
2087: CALL_OW 65
// DestroyUnit ( br2 ) ;
2091: LD_VAR 0 5
2095: PPUSH
2096: CALL_OW 65
// DestroyUnit ( br3 ) ;
2100: LD_VAR 0 6
2104: PPUSH
2105: CALL_OW 65
// DestroyUnit ( br4 ) ;
2109: LD_VAR 0 7
2113: PPUSH
2114: CALL_OW 65
// end ;
2118: GO 1693
2120: POP
2121: POP
// deposits_def = [ [ [ 30 , 22 ] , [ 60 , 42 ] , [ 29 , 2 ] , [ 73 , 57 ] ] , [ [ 148 , 24 ] , [ 119 , 20 ] , [ 172 , 36 ] , [ 133 , 50 ] ] , [ [ 84 , 122 ] , [ 101 , 111 ] , [ 74 , 126 ] , [ 109 , 102 ] ] , [ [ 196 , 117 ] , [ 166 , 94 ] , [ 197 , 133 ] , [ 156 , 83 ] ] ] ;
2122: LD_ADDR_EXP 48
2126: PUSH
2127: LD_INT 30
2129: PUSH
2130: LD_INT 22
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PUSH
2137: LD_INT 60
2139: PUSH
2140: LD_INT 42
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 29
2149: PUSH
2150: LD_INT 2
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PUSH
2157: LD_INT 73
2159: PUSH
2160: LD_INT 57
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 148
2175: PUSH
2176: LD_INT 24
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 119
2185: PUSH
2186: LD_INT 20
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 172
2195: PUSH
2196: LD_INT 36
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 133
2205: PUSH
2206: LD_INT 50
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 84
2221: PUSH
2222: LD_INT 122
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 101
2231: PUSH
2232: LD_INT 111
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 74
2241: PUSH
2242: LD_INT 126
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 109
2251: PUSH
2252: LD_INT 102
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 196
2267: PUSH
2268: LD_INT 117
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 166
2277: PUSH
2278: LD_INT 94
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 197
2287: PUSH
2288: LD_INT 133
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 156
2297: PUSH
2298: LD_INT 83
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: EMPTY
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: ST_TO_ADDR
// for i := 1 to 4 do
2317: LD_ADDR_VAR 0 9
2321: PUSH
2322: DOUBLE
2323: LD_INT 1
2325: DEC
2326: ST_TO_ADDR
2327: LD_INT 4
2329: PUSH
2330: FOR_TO
2331: IFFALSE 2401
// for coord in oil_dep do
2333: LD_ADDR_VAR 0 10
2337: PUSH
2338: LD_EXP 30
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2397
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_oil ) ;
2346: LD_EXP 48
2350: PUSH
2351: LD_VAR 0 9
2355: ARRAY
2356: PUSH
2357: LD_VAR 0 10
2361: ARRAY
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: LD_EXP 48
2371: PUSH
2372: LD_VAR 0 9
2376: ARRAY
2377: PUSH
2378: LD_VAR 0 10
2382: ARRAY
2383: PUSH
2384: LD_INT 2
2386: ARRAY
2387: PPUSH
2388: LD_INT 2
2390: PPUSH
2391: CALL_OW 62
// end ;
2395: GO 2343
2397: POP
2398: POP
2399: GO 2330
2401: POP
2402: POP
// for i := 1 to 4 do
2403: LD_ADDR_VAR 0 9
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 4
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2487
// for coord in sib_dep do
2419: LD_ADDR_VAR 0 10
2423: PUSH
2424: LD_EXP 31
2428: PUSH
2429: FOR_IN
2430: IFFALSE 2483
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_siberit ) ;
2432: LD_EXP 48
2436: PUSH
2437: LD_VAR 0 9
2441: ARRAY
2442: PUSH
2443: LD_VAR 0 10
2447: ARRAY
2448: PUSH
2449: LD_INT 1
2451: ARRAY
2452: PPUSH
2453: LD_EXP 48
2457: PUSH
2458: LD_VAR 0 9
2462: ARRAY
2463: PUSH
2464: LD_VAR 0 10
2468: ARRAY
2469: PUSH
2470: LD_INT 2
2472: ARRAY
2473: PPUSH
2474: LD_INT 3
2476: PPUSH
2477: CALL_OW 62
// end ;
2481: GO 2429
2483: POP
2484: POP
2485: GO 2416
2487: POP
2488: POP
// end ;
2489: LD_VAR 0 1
2493: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
// Team_Game := 0 ;
2499: LD_ADDR_EXP 44
2503: PUSH
2504: LD_INT 0
2506: ST_TO_ADDR
// for i = 1 to 8 do
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: DOUBLE
2513: LD_INT 1
2515: DEC
2516: ST_TO_ADDR
2517: LD_INT 8
2519: PUSH
2520: FOR_TO
2521: IFFALSE 2547
// Team_Game := Team_Game + Side_Teams [ i ] ;
2523: LD_ADDR_EXP 44
2527: PUSH
2528: LD_EXP 44
2532: PUSH
2533: LD_EXP 38
2537: PUSH
2538: LD_VAR 0 2
2542: ARRAY
2543: PLUS
2544: ST_TO_ADDR
2545: GO 2520
2547: POP
2548: POP
// if not Team_Game then
2549: LD_EXP 44
2553: NOT
2554: IFFALSE 2566
// Team_Game := false else
2556: LD_ADDR_EXP 44
2560: PUSH
2561: LD_INT 0
2563: ST_TO_ADDR
2564: GO 2574
// Team_Game := true ;
2566: LD_ADDR_EXP 44
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// if not Team_Game then
2574: LD_EXP 44
2578: NOT
2579: IFFALSE 2677
// begin for i = 1 to 8 do
2581: LD_ADDR_VAR 0 2
2585: PUSH
2586: DOUBLE
2587: LD_INT 1
2589: DEC
2590: ST_TO_ADDR
2591: LD_INT 8
2593: PUSH
2594: FOR_TO
2595: IFFALSE 2673
// for j = 1 to 8 do
2597: LD_ADDR_VAR 0 3
2601: PUSH
2602: DOUBLE
2603: LD_INT 1
2605: DEC
2606: ST_TO_ADDR
2607: LD_INT 8
2609: PUSH
2610: FOR_TO
2611: IFFALSE 2669
// if i <> j then
2613: LD_VAR 0 2
2617: PUSH
2618: LD_VAR 0 3
2622: NONEQUAL
2623: IFFALSE 2647
// SetAttitude ( i , j , att_neutral , true ) else
2625: LD_VAR 0 2
2629: PPUSH
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: CALL_OW 80
2645: GO 2667
// SetAttitude ( i , j , att_friend , true ) ;
2647: LD_VAR 0 2
2651: PPUSH
2652: LD_VAR 0 3
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: CALL_OW 80
2667: GO 2610
2669: POP
2670: POP
2671: GO 2594
2673: POP
2674: POP
// end else
2675: GO 2906
// begin if def_shared_vision and ( gametype <> 11 ) then
2677: LD_EXP 9
2681: PUSH
2682: LD_EXP 1
2686: PUSH
2687: LD_INT 11
2689: NONEQUAL
2690: AND
2691: IFFALSE 2756
// begin for i in Teams do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_EXP 39
2702: PUSH
2703: FOR_IN
2704: IFFALSE 2754
// for j = 2 to i do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 2
2714: DEC
2715: ST_TO_ADDR
2716: LD_VAR 0 2
2720: PUSH
2721: FOR_TO
2722: IFFALSE 2750
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2724: LD_VAR 0 2
2728: PUSH
2729: LD_VAR 0 3
2733: ARRAY
2734: PPUSH
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PPUSH
2744: CALL_OW 343
2748: GO 2721
2750: POP
2751: POP
2752: GO 2703
2754: POP
2755: POP
// end ; for i := 1 to 8 do
2756: LD_ADDR_VAR 0 2
2760: PUSH
2761: DOUBLE
2762: LD_INT 1
2764: DEC
2765: ST_TO_ADDR
2766: LD_INT 8
2768: PUSH
2769: FOR_TO
2770: IFFALSE 2904
// for j := 1 to 8 do
2772: LD_ADDR_VAR 0 3
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_INT 8
2784: PUSH
2785: FOR_TO
2786: IFFALSE 2900
// if i <> j then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 3
2797: NONEQUAL
2798: IFFALSE 2898
// if gametype = 11 then
2800: LD_EXP 1
2804: PUSH
2805: LD_INT 11
2807: EQUAL
2808: IFFALSE 2832
// SetAttitude ( i , j , att_neutral , true ) else
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: LD_INT 0
2822: PPUSH
2823: LD_INT 1
2825: PPUSH
2826: CALL_OW 80
2830: GO 2898
// if Side_Teams [ i ] = Side_Teams [ j ] then
2832: LD_EXP 38
2836: PUSH
2837: LD_VAR 0 2
2841: ARRAY
2842: PUSH
2843: LD_EXP 38
2847: PUSH
2848: LD_VAR 0 3
2852: ARRAY
2853: EQUAL
2854: IFFALSE 2878
// SetAttitude ( i , j , att_friend , true ) else
2856: LD_VAR 0 2
2860: PPUSH
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_INT 1
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: CALL_OW 80
2876: GO 2898
// SetAttitude ( i , j , att_enemy , true ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: CALL_OW 80
2898: GO 2785
2900: POP
2901: POP
2902: GO 2769
2904: POP
2905: POP
// end ; end ;
2906: LD_VAR 0 1
2910: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
2916: PPUSH
// result := [ ] ;
2917: LD_ADDR_VAR 0 6
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// for i := 1 to count do
2924: LD_ADDR_VAR 0 7
2928: PUSH
2929: DOUBLE
2930: LD_INT 1
2932: DEC
2933: ST_TO_ADDR
2934: LD_VAR 0 1
2938: PUSH
2939: FOR_TO
2940: IFFALSE 3334
// begin uc_direction := Rand ( 0 , 5 ) ;
2942: LD_ADDR_OWVAR 24
2946: PUSH
2947: LD_INT 0
2949: PPUSH
2950: LD_INT 5
2952: PPUSH
2953: CALL_OW 12
2957: ST_TO_ADDR
// if commander then
2958: LD_LOC 1
2962: IFFALSE 3071
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2964: LD_ADDR_OWVAR 26
2968: PUSH
2969: LD_OWVAR 19
2973: PUSH
2974: LD_OWVAR 20
2978: ARRAY
2979: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 2
2985: PPUSH
2986: CALL_OW 12
2990: PPUSH
2991: LD_VAR 0 2
2995: PPUSH
2996: LD_EXP 20
3000: PUSH
3001: LD_INT 2
3003: PLUS
3004: PPUSH
3005: CALL_OW 380
// hc_importance := 105 ;
3009: LD_ADDR_OWVAR 32
3013: PUSH
3014: LD_INT 105
3016: ST_TO_ADDR
// commander := false ;
3017: LD_ADDR_LOC 1
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// if Multiplayer then
3025: LD_OWVAR 4
3029: IFFALSE 3069
// begin hc_gallery := MULTIAVATARS ;
3031: LD_ADDR_OWVAR 33
3035: PUSH
3036: LD_STRING MULTIAVATARS
3038: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3039: LD_ADDR_OWVAR 34
3043: PUSH
3044: LD_OWVAR 20
3048: PPUSH
3049: CALL_OW 525
3053: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3054: LD_ADDR_OWVAR 27
3058: PUSH
3059: LD_OWVAR 20
3063: PPUSH
3064: CALL_OW 526
3068: ST_TO_ADDR
// end ; end else
3069: GO 3134
// begin hc_name :=  ;
3071: LD_ADDR_OWVAR 26
3075: PUSH
3076: LD_STRING 
3078: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3079: LD_INT 1
3081: PPUSH
3082: LD_INT 2
3084: PPUSH
3085: CALL_OW 12
3089: PPUSH
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_EXP 20
3099: PPUSH
3100: CALL_OW 380
// hc_importance := 0 ;
3104: LD_ADDR_OWVAR 32
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// if Multiplayer then
3112: LD_OWVAR 4
3116: IFFALSE 3134
// begin hc_gallery :=  ;
3118: LD_ADDR_OWVAR 33
3122: PUSH
3123: LD_STRING 
3125: ST_TO_ADDR
// hc_face_number := 0 ;
3126: LD_ADDR_OWVAR 34
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3134: LD_ADDR_VAR 0 9
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// if global_defined then
3144: LD_LOC 3
3148: IFFALSE 3286
// begin j := i ;
3150: LD_ADDR_VAR 0 8
3154: PUSH
3155: LD_VAR 0 7
3159: ST_TO_ADDR
// if cl = class_soldier then
3160: LD_VAR 0 2
3164: PUSH
3165: LD_INT 1
3167: EQUAL
3168: IFFALSE 3186
// j := i + soldiers_created ;
3170: LD_ADDR_VAR 0 8
3174: PUSH
3175: LD_VAR 0 7
3179: PUSH
3180: LD_LOC 4
3184: PLUS
3185: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3186: LD_LOC 2
3190: PUSH
3191: LD_VAR 0 2
3195: ARRAY
3196: PUSH
3197: LD_VAR 0 8
3201: ARRAY
3202: PPUSH
3203: LD_VAR 0 9
3207: PPUSH
3208: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3212: LD_VAR 0 9
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_LOC 2
3224: PUSH
3225: LD_VAR 0 2
3229: ARRAY
3230: PUSH
3231: LD_VAR 0 8
3235: ARRAY
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: CALL_OW 260
3244: PPUSH
3245: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3249: LD_VAR 0 9
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: PUSH
3268: LD_VAR 0 8
3272: ARRAY
3273: PPUSH
3274: LD_INT 1
3276: PPUSH
3277: CALL_OW 260
3281: PPUSH
3282: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
3286: LD_VAR 0 9
3290: PPUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_VAR 0 4
3300: PPUSH
3301: LD_VAR 0 5
3305: PPUSH
3306: LD_INT 0
3308: PPUSH
3309: CALL_OW 50
// result := result ^ [ un ] ;
3313: LD_ADDR_VAR 0 6
3317: PUSH
3318: LD_VAR 0 6
3322: PUSH
3323: LD_VAR 0 9
3327: PUSH
3328: EMPTY
3329: LIST
3330: ADD
3331: ST_TO_ADDR
// end ;
3332: GO 2939
3334: POP
3335: POP
// if not global_defined then
3336: LD_LOC 3
3340: NOT
3341: IFFALSE 3403
// if cl = class_soldier and global_units then
3343: LD_VAR 0 2
3347: PUSH
3348: LD_INT 1
3350: EQUAL
3351: PUSH
3352: LD_LOC 2
3356: AND
3357: IFFALSE 3384
// global_units := [ global_units [ 1 ] ^ result ] else
3359: LD_ADDR_LOC 2
3363: PUSH
3364: LD_LOC 2
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PUSH
3373: LD_VAR 0 6
3377: ADD
3378: PUSH
3379: EMPTY
3380: LIST
3381: ST_TO_ADDR
3382: GO 3403
// global_units := global_units ^ [ result ] ;
3384: LD_ADDR_LOC 2
3388: PUSH
3389: LD_LOC 2
3393: PUSH
3394: LD_VAR 0 6
3398: PUSH
3399: EMPTY
3400: LIST
3401: ADD
3402: ST_TO_ADDR
// end ;
3403: LD_VAR 0 6
3407: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3408: LD_INT 0
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
3414: PPUSH
3415: PPUSH
3416: PPUSH
3417: PPUSH
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
3422: PPUSH
// pos := Side_Positions [ side ] ;
3423: LD_ADDR_VAR 0 3
3427: PUSH
3428: LD_EXP 40
3432: PUSH
3433: LD_VAR 0 1
3437: ARRAY
3438: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3439: LD_ADDR_OWVAR 21
3443: PUSH
3444: LD_EXP 41
3448: PUSH
3449: LD_VAR 0 1
3453: ARRAY
3454: ST_TO_ADDR
// uc_side := side ;
3455: LD_ADDR_OWVAR 20
3459: PUSH
3460: LD_VAR 0 1
3464: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3465: LD_ADDR_VAR 0 4
3469: PUSH
3470: LD_EXP 45
3474: PUSH
3475: LD_VAR 0 3
3479: ARRAY
3480: PUSH
3481: LD_INT 1
3483: ARRAY
3484: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3485: LD_ADDR_VAR 0 5
3489: PUSH
3490: LD_EXP 45
3494: PUSH
3495: LD_VAR 0 3
3499: ARRAY
3500: PUSH
3501: LD_INT 2
3503: ARRAY
3504: ST_TO_ADDR
// if is_depot then
3505: LD_EXP 17
3509: IFFALSE 3652
// begin bc_type = b_depot ;
3511: LD_ADDR_OWVAR 42
3515: PUSH
3516: LD_INT 0
3518: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3519: LD_ADDR_VAR 0 10
3523: PUSH
3524: LD_VAR 0 4
3528: PPUSH
3529: LD_VAR 0 5
3533: PPUSH
3534: LD_EXP 45
3538: PUSH
3539: LD_VAR 0 3
3543: ARRAY
3544: PUSH
3545: LD_INT 3
3547: ARRAY
3548: PPUSH
3549: CALL_OW 47
3553: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3554: LD_VAR 0 10
3558: PPUSH
3559: LD_STRING @
3561: PUSH
3562: LD_VAR 0 1
3566: STR
3567: PPUSH
3568: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3572: LD_VAR 0 10
3576: PPUSH
3577: CALL_OW 274
3581: PPUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_EXP 22
3589: PUSH
3590: LD_INT 1
3592: ARRAY
3593: PPUSH
3594: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3598: LD_VAR 0 10
3602: PPUSH
3603: CALL_OW 274
3607: PPUSH
3608: LD_INT 2
3610: PPUSH
3611: LD_EXP 22
3615: PUSH
3616: LD_INT 2
3618: ARRAY
3619: PPUSH
3620: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3624: LD_VAR 0 2
3628: PPUSH
3629: CALL_OW 274
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: LD_EXP 22
3641: PUSH
3642: LD_INT 3
3644: ARRAY
3645: PPUSH
3646: CALL_OW 277
// end else
3650: GO 3796
// begin for i := 1 to 3 do
3652: LD_ADDR_VAR 0 6
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 3
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3794
// begin r := starting_resources [ i ] ;
3668: LD_ADDR_VAR 0 7
3672: PUSH
3673: LD_EXP 22
3677: PUSH
3678: LD_VAR 0 6
3682: ARRAY
3683: ST_TO_ADDR
// while r >= 10 do
3684: LD_VAR 0 7
3688: PUSH
3689: LD_INT 10
3691: GREATEREQUAL
3692: IFFALSE 3792
// if r > 50 then
3694: LD_VAR 0 7
3698: PUSH
3699: LD_INT 50
3701: GREATER
3702: IFFALSE 3748
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3704: LD_VAR 0 6
3708: PPUSH
3709: LD_INT 5
3711: PPUSH
3712: LD_VAR 0 4
3716: PPUSH
3717: LD_VAR 0 5
3721: PPUSH
3722: LD_INT 4
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: CALL_OW 60
// r := r - 50 ;
3732: LD_ADDR_VAR 0 7
3736: PUSH
3737: LD_VAR 0 7
3741: PUSH
3742: LD_INT 50
3744: MINUS
3745: ST_TO_ADDR
// end else
3746: GO 3790
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3748: LD_VAR 0 6
3752: PPUSH
3753: LD_VAR 0 7
3757: PUSH
3758: LD_INT 10
3760: DIV
3761: PPUSH
3762: LD_VAR 0 4
3766: PPUSH
3767: LD_VAR 0 5
3771: PPUSH
3772: LD_INT 4
3774: PPUSH
3775: LD_INT 0
3777: PPUSH
3778: CALL_OW 60
// r := 0 ;
3782: LD_ADDR_VAR 0 7
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// end ;
3790: GO 3684
// end ;
3792: GO 3665
3794: POP
3795: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3796: LD_ADDR_VAR 0 4
3800: PUSH
3801: LD_EXP 47
3805: PUSH
3806: LD_VAR 0 3
3810: ARRAY
3811: PUSH
3812: LD_INT 1
3814: ARRAY
3815: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3816: LD_ADDR_VAR 0 5
3820: PUSH
3821: LD_EXP 47
3825: PUSH
3826: LD_VAR 0 3
3830: ARRAY
3831: PUSH
3832: LD_INT 2
3834: ARRAY
3835: ST_TO_ADDR
// for r in starting_crates do
3836: LD_ADDR_VAR 0 7
3840: PUSH
3841: LD_EXP 21
3845: PUSH
3846: FOR_IN
3847: IFFALSE 3879
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3849: LD_INT 1
3851: PPUSH
3852: LD_INT 5
3854: PPUSH
3855: LD_VAR 0 4
3859: PPUSH
3860: LD_VAR 0 5
3864: PPUSH
3865: LD_VAR 0 7
3869: PPUSH
3870: LD_INT 0
3872: PPUSH
3873: CALL_OW 60
3877: GO 3846
3879: POP
3880: POP
// if def_morale_flags then
3881: LD_EXP 10
3885: IFFALSE 3964
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3887: LD_ADDR_EXP 49
3891: PUSH
3892: LD_EXP 49
3896: PUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: LD_VAR 0 4
3906: PPUSH
3907: LD_VAR 0 5
3911: PPUSH
3912: LD_INT 1
3914: PUSH
3915: LD_INT 100
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 2
3924: PUSH
3925: LD_INT 50
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 20
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 20
3944: PUSH
3945: LD_INT 100
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 418
3962: ADD
3963: ST_TO_ADDR
// neng := number_of_people ;
3964: LD_ADDR_VAR 0 11
3968: PUSH
3969: LD_EXP 19
3973: ST_TO_ADDR
// nsol := number_of_breastworks ;
3974: LD_ADDR_VAR 0 14
3978: PUSH
3979: LD_EXP 18
3983: ST_TO_ADDR
// if nsol < neng div 4 then
3984: LD_VAR 0 14
3988: PUSH
3989: LD_VAR 0 11
3993: PUSH
3994: LD_INT 4
3996: DIV
3997: LESS
3998: IFFALSE 4014
// nsol := neng div 4 ;
4000: LD_ADDR_VAR 0 14
4004: PUSH
4005: LD_VAR 0 11
4009: PUSH
4010: LD_INT 4
4012: DIV
4013: ST_TO_ADDR
// neng := neng - nsol ;
4014: LD_ADDR_VAR 0 11
4018: PUSH
4019: LD_VAR 0 11
4023: PUSH
4024: LD_VAR 0 14
4028: MINUS
4029: ST_TO_ADDR
// nsci := neng div 3 ;
4030: LD_ADDR_VAR 0 12
4034: PUSH
4035: LD_VAR 0 11
4039: PUSH
4040: LD_INT 3
4042: DIV
4043: ST_TO_ADDR
// if nsci < 1 then
4044: LD_VAR 0 12
4048: PUSH
4049: LD_INT 1
4051: LESS
4052: IFFALSE 4062
// nsci := 1 ;
4054: LD_ADDR_VAR 0 12
4058: PUSH
4059: LD_INT 1
4061: ST_TO_ADDR
// neng := neng - nsci ;
4062: LD_ADDR_VAR 0 11
4066: PUSH
4067: LD_VAR 0 11
4071: PUSH
4072: LD_VAR 0 12
4076: MINUS
4077: ST_TO_ADDR
// nmech := neng div 2 ;
4078: LD_ADDR_VAR 0 13
4082: PUSH
4083: LD_VAR 0 11
4087: PUSH
4088: LD_INT 2
4090: DIV
4091: ST_TO_ADDR
// neng := neng - nmech ;
4092: LD_ADDR_VAR 0 11
4096: PUSH
4097: LD_VAR 0 11
4101: PUSH
4102: LD_VAR 0 13
4106: MINUS
4107: ST_TO_ADDR
// if neng < 1 then
4108: LD_VAR 0 11
4112: PUSH
4113: LD_INT 1
4115: LESS
4116: IFFALSE 4126
// neng := 1 ;
4118: LD_ADDR_VAR 0 11
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// commander := true ;
4126: LD_ADDR_LOC 1
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// soldiers_created := 0 ;
4134: LD_ADDR_LOC 4
4138: PUSH
4139: LD_INT 0
4141: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4142: LD_ADDR_VAR 0 6
4146: PUSH
4147: DOUBLE
4148: LD_INT 1
4150: DEC
4151: ST_TO_ADDR
4152: LD_EXP 18
4156: PUSH
4157: FOR_TO
4158: IFFALSE 4402
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4160: LD_ADDR_VAR 0 4
4164: PUSH
4165: LD_EXP 46
4169: PUSH
4170: LD_VAR 0 3
4174: ARRAY
4175: PUSH
4176: LD_VAR 0 6
4180: ARRAY
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4186: LD_ADDR_VAR 0 5
4190: PUSH
4191: LD_EXP 46
4195: PUSH
4196: LD_VAR 0 3
4200: ARRAY
4201: PUSH
4202: LD_VAR 0 6
4206: ARRAY
4207: PUSH
4208: LD_INT 2
4210: ARRAY
4211: ST_TO_ADDR
// bc_type := b_breastwork ;
4212: LD_ADDR_OWVAR 42
4216: PUSH
4217: LD_INT 31
4219: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4220: LD_ADDR_VAR 0 9
4224: PUSH
4225: LD_VAR 0 4
4229: PPUSH
4230: LD_VAR 0 5
4234: PPUSH
4235: LD_EXP 46
4239: PUSH
4240: LD_VAR 0 3
4244: ARRAY
4245: PUSH
4246: LD_VAR 0 6
4250: ARRAY
4251: PUSH
4252: LD_INT 3
4254: ARRAY
4255: PPUSH
4256: CALL_OW 47
4260: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4261: LD_ADDR_VAR 0 4
4265: PUSH
4266: LD_VAR 0 4
4270: PPUSH
4271: LD_EXP 46
4275: PUSH
4276: LD_VAR 0 3
4280: ARRAY
4281: PUSH
4282: LD_VAR 0 6
4286: ARRAY
4287: PUSH
4288: LD_INT 3
4290: ARRAY
4291: PPUSH
4292: LD_INT 2
4294: PPUSH
4295: CALL_OW 272
4299: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4300: LD_ADDR_VAR 0 5
4304: PUSH
4305: LD_VAR 0 5
4309: PPUSH
4310: LD_EXP 46
4314: PUSH
4315: LD_VAR 0 3
4319: ARRAY
4320: PUSH
4321: LD_VAR 0 6
4325: ARRAY
4326: PUSH
4327: LD_INT 3
4329: ARRAY
4330: PPUSH
4331: LD_INT 2
4333: PPUSH
4334: CALL_OW 273
4338: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
4339: LD_ADDR_VAR 0 8
4343: PUSH
4344: LD_INT 1
4346: PPUSH
4347: LD_INT 1
4349: PPUSH
4350: LD_VAR 0 4
4354: PPUSH
4355: LD_VAR 0 5
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: CALL 2911 0 5
4367: PUSH
4368: LD_INT 1
4370: ARRAY
4371: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4372: LD_ADDR_LOC 4
4376: PUSH
4377: LD_LOC 4
4381: PUSH
4382: LD_INT 1
4384: PLUS
4385: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4386: LD_VAR 0 8
4390: PPUSH
4391: LD_VAR 0 9
4395: PPUSH
4396: CALL_OW 120
// end ;
4400: GO 4157
4402: POP
4403: POP
// x := start_def [ pos ] [ 1 ] ;
4404: LD_ADDR_VAR 0 4
4408: PUSH
4409: LD_EXP 47
4413: PUSH
4414: LD_VAR 0 3
4418: ARRAY
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4424: LD_ADDR_VAR 0 5
4428: PUSH
4429: LD_EXP 47
4433: PUSH
4434: LD_VAR 0 3
4438: ARRAY
4439: PUSH
4440: LD_INT 2
4442: ARRAY
4443: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4444: LD_VAR 0 14
4448: PUSH
4449: LD_EXP 18
4453: MINUS
4454: PPUSH
4455: LD_INT 1
4457: PPUSH
4458: LD_VAR 0 4
4462: PPUSH
4463: LD_VAR 0 5
4467: PPUSH
4468: LD_INT 5
4470: PPUSH
4471: CALL 2911 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4475: LD_VAR 0 11
4479: PPUSH
4480: LD_INT 2
4482: PPUSH
4483: LD_VAR 0 4
4487: PPUSH
4488: LD_VAR 0 5
4492: PPUSH
4493: LD_INT 5
4495: PPUSH
4496: CALL 2911 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4500: LD_VAR 0 13
4504: PPUSH
4505: LD_INT 3
4507: PPUSH
4508: LD_VAR 0 4
4512: PPUSH
4513: LD_VAR 0 5
4517: PPUSH
4518: LD_INT 5
4520: PPUSH
4521: CALL 2911 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4525: LD_VAR 0 12
4529: PPUSH
4530: LD_INT 4
4532: PPUSH
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_VAR 0 5
4542: PPUSH
4543: LD_INT 5
4545: PPUSH
4546: CALL 2911 0 5
// if not global_defined then
4550: LD_LOC 3
4554: NOT
4555: IFFALSE 4565
// global_defined := true ;
4557: LD_ADDR_LOC 3
4561: PUSH
4562: LD_INT 1
4564: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4565: LD_EXP 11
4569: PUSH
4570: LD_INT 20
4572: PPUSH
4573: LD_VAR 0 1
4577: PPUSH
4578: CALL_OW 321
4582: PUSH
4583: LD_INT 1
4585: EQUAL
4586: AND
4587: IFFALSE 4604
// SetTech ( tech_SibDet , side , state_researched ) ;
4589: LD_INT 20
4591: PPUSH
4592: LD_VAR 0 1
4596: PPUSH
4597: LD_INT 2
4599: PPUSH
4600: CALL_OW 322
// if def_siberite_bomb = 1 then
4604: LD_EXP 14
4608: PUSH
4609: LD_INT 1
4611: EQUAL
4612: IFFALSE 4646
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4614: LD_INT 25
4616: PPUSH
4617: LD_VAR 0 1
4621: PPUSH
4622: LD_INT 1
4624: PPUSH
4625: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4629: LD_INT 73
4631: PPUSH
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: CALL_OW 322
// end else
4644: GO 4676
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4646: LD_INT 25
4648: PPUSH
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_INT 0
4656: PPUSH
4657: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4661: LD_INT 73
4663: PPUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4676: LD_INT 24
4678: PPUSH
4679: LD_VAR 0 1
4683: PPUSH
4684: LD_INT 0
4686: PPUSH
4687: CALL_OW 322
// end ;
4691: LD_VAR 0 2
4695: RET
// every 0 0$1 do
4696: GO 4698
4698: DISABLE
// if ( def_siberite_bomb > 1 ) then
4699: LD_EXP 14
4703: PUSH
4704: LD_INT 1
4706: GREATER
4707: IFFALSE 4722
// begin wait ( siberite_bomb_Delay ) ;
4709: LD_EXP 33
4713: PPUSH
4714: CALL_OW 67
// EnableSibFiss ;
4718: CALL 4723 0 0
// end ;
4722: END
// function EnableSibFiss ; var i ; begin
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
// for i := 1 to 8 do
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_INT 8
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4787
// if Side_Positions [ i ] then
4743: LD_EXP 40
4747: PUSH
4748: LD_VAR 0 2
4752: ARRAY
4753: IFFALSE 4785
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4755: LD_INT 25
4757: PPUSH
4758: LD_VAR 0 2
4762: PPUSH
4763: LD_INT 1
4765: PPUSH
4766: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4770: LD_INT 73
4772: PPUSH
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL_OW 322
// end ;
4785: GO 4740
4787: POP
4788: POP
// end ;
4789: LD_VAR 0 1
4793: RET
// function prepare_sides ; var i ; begin
4794: LD_INT 0
4796: PPUSH
4797: PPUSH
// global_units := [ ] ;
4798: LD_ADDR_LOC 2
4802: PUSH
4803: EMPTY
4804: ST_TO_ADDR
// global_defined := false ;
4805: LD_ADDR_LOC 3
4809: PUSH
4810: LD_INT 0
4812: ST_TO_ADDR
// for i := 1 to 8 do
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: DOUBLE
4819: LD_INT 1
4821: DEC
4822: ST_TO_ADDR
4823: LD_INT 8
4825: PUSH
4826: FOR_TO
4827: IFFALSE 4852
// if Side_Positions [ i ] then
4829: LD_EXP 40
4833: PUSH
4834: LD_VAR 0 2
4838: ARRAY
4839: IFFALSE 4850
// prepare_side ( i ) ;
4841: LD_VAR 0 2
4845: PPUSH
4846: CALL 3408 0 1
4850: GO 4826
4852: POP
4853: POP
// end ;
4854: LD_VAR 0 1
4858: RET
// starting begin disable ( 400 ) ;
4859: LD_INT 400
4861: DISABLE_MARKED
// disable ( 401 ) ;
4862: LD_INT 401
4864: DISABLE_MARKED
// mp_selectmsg := true ;
4865: LD_ADDR_OWVAR 13
4869: PUSH
4870: LD_INT 1
4872: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4873: CALL 0 0 0
// prepare_map_coordinates ;
4877: CALL 1654 0 0
// set_shared_visions_and_alliances ;
4881: CALL 2494 0 0
// prepare_sides ;
4885: CALL 4794 0 0
// Init_Win_Condition ;
4889: CALL 6079 0 0
// init_respawning ;
4893: CALL 14217 0 0
// AnimateTrees ( true ) ;
4897: LD_INT 1
4899: PPUSH
4900: CALL_OW 573
// InitApeman ;
4904: CALL 8429 0 0
// init_shipments_and_respawning ;
4908: CALL 4993 0 0
// init_infos ;
4912: CALL 6776 0 0
// your_side := Player_Side ;
4916: LD_ADDR_OWVAR 2
4920: PUSH
4921: LD_EXP 36
4925: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4926: LD_ADDR_OWVAR 71
4930: PUSH
4931: LD_EXP 41
4935: PUSH
4936: LD_OWVAR 2
4940: ARRAY
4941: ST_TO_ADDR
// ResetFog ;
4942: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4946: LD_EXP 47
4950: PUSH
4951: LD_EXP 40
4955: PUSH
4956: LD_OWVAR 2
4960: ARRAY
4961: ARRAY
4962: PUSH
4963: LD_INT 1
4965: ARRAY
4966: PPUSH
4967: LD_EXP 47
4971: PUSH
4972: LD_EXP 40
4976: PUSH
4977: LD_OWVAR 2
4981: ARRAY
4982: ARRAY
4983: PUSH
4984: LD_INT 2
4986: ARRAY
4987: PPUSH
4988: CALL_OW 86
// end ; end_of_file
4992: END
// var shipment1 , shipment2 ; export function init_shipments_and_respawning ; begin
4993: LD_INT 0
4995: PPUSH
// shipment1 := [ ] ;
4996: LD_ADDR_LOC 5
5000: PUSH
5001: EMPTY
5002: ST_TO_ADDR
// shipment2 := [ ] ;
5003: LD_ADDR_LOC 6
5007: PUSH
5008: EMPTY
5009: ST_TO_ADDR
// end ;
5010: LD_VAR 0 1
5014: RET
// every 0 0$5 + 0 0$1.1 do var d , q ;
5015: GO 5017
5017: DISABLE
5018: LD_INT 0
5020: PPUSH
5021: PPUSH
// begin case tick of 1 .. 1 1$0 :
5022: LD_OWVAR 1
5026: PUSH
5027: LD_INT 1
5029: DOUBLE
5030: GREATEREQUAL
5031: IFFALSE 5039
5033: LD_INT 2100
5035: DOUBLE
5036: LESSEQUAL
5037: IFTRUE 5041
5039: GO 5052
5041: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5042: LD_ADDR_VAR 0 1
5046: PUSH
5047: LD_INT 150
5049: ST_TO_ADDR
5050: GO 5235
5052: LD_INT 2100
5054: PUSH
5055: LD_INT 1
5057: PLUS
5058: DOUBLE
5059: GREATEREQUAL
5060: IFFALSE 5068
5062: LD_INT 10500
5064: DOUBLE
5065: LESSEQUAL
5066: IFTRUE 5070
5068: GO 5081
5070: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5071: LD_ADDR_VAR 0 1
5075: PUSH
5076: LD_INT 100
5078: ST_TO_ADDR
5079: GO 5235
5081: LD_INT 10500
5083: PUSH
5084: LD_INT 1
5086: PLUS
5087: DOUBLE
5088: GREATEREQUAL
5089: IFFALSE 5097
5091: LD_INT 21000
5093: DOUBLE
5094: LESSEQUAL
5095: IFTRUE 5099
5097: GO 5110
5099: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5100: LD_ADDR_VAR 0 1
5104: PUSH
5105: LD_INT 90
5107: ST_TO_ADDR
5108: GO 5235
5110: LD_INT 21000
5112: PUSH
5113: LD_INT 1
5115: PLUS
5116: DOUBLE
5117: GREATEREQUAL
5118: IFFALSE 5126
5120: LD_INT 42000
5122: DOUBLE
5123: LESSEQUAL
5124: IFTRUE 5128
5126: GO 5139
5128: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: LD_INT 70
5136: ST_TO_ADDR
5137: GO 5235
5139: LD_INT 42000
5141: PUSH
5142: LD_INT 1
5144: PLUS
5145: DOUBLE
5146: GREATEREQUAL
5147: IFFALSE 5155
5149: LD_INT 63000
5151: DOUBLE
5152: LESSEQUAL
5153: IFTRUE 5157
5155: GO 5168
5157: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5158: LD_ADDR_VAR 0 1
5162: PUSH
5163: LD_INT 60
5165: ST_TO_ADDR
5166: GO 5235
5168: LD_INT 63000
5170: PUSH
5171: LD_INT 1
5173: PLUS
5174: DOUBLE
5175: GREATEREQUAL
5176: IFFALSE 5184
5178: LD_INT 105000
5180: DOUBLE
5181: LESSEQUAL
5182: IFTRUE 5186
5184: GO 5197
5186: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5187: LD_ADDR_VAR 0 1
5191: PUSH
5192: LD_INT 35
5194: ST_TO_ADDR
5195: GO 5235
5197: LD_INT 105000
5199: PUSH
5200: LD_INT 1
5202: PLUS
5203: DOUBLE
5204: GREATEREQUAL
5205: IFFALSE 5213
5207: LD_INT 630000
5209: DOUBLE
5210: LESSEQUAL
5211: IFTRUE 5215
5213: GO 5226
5215: POP
// d := 20 ; else
5216: LD_ADDR_VAR 0 1
5220: PUSH
5221: LD_INT 20
5223: ST_TO_ADDR
5224: GO 5235
5226: POP
// d := 0 ; end ;
5227: LD_ADDR_VAR 0 1
5231: PUSH
5232: LD_INT 0
5234: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
5235: LD_INT 1
5237: PPUSH
5238: LD_INT 10000
5240: PPUSH
5241: CALL_OW 12
5245: PUSH
5246: LD_VAR 0 1
5250: PUSH
5251: LD_EXP 23
5255: MUL
5256: PUSH
5257: LD_INT 2
5259: DIV
5260: LESSEQUAL
5261: IFFALSE 5384
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5263: LD_INT 1
5265: PPUSH
5266: LD_INT 140
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: CALL_OW 67
// if shipment1 = [ ] then
5278: LD_LOC 5
5282: PUSH
5283: EMPTY
5284: EQUAL
5285: IFFALSE 5326
// shipment1 := [ base1 , base2 , base3 , base4 , safe1 , safe2 , safe3 , safe4 ] ;
5287: LD_ADDR_LOC 5
5291: PUSH
5292: LD_INT 18
5294: PUSH
5295: LD_INT 19
5297: PUSH
5298: LD_INT 20
5300: PUSH
5301: LD_INT 21
5303: PUSH
5304: LD_INT 26
5306: PUSH
5307: LD_INT 27
5309: PUSH
5310: LD_INT 28
5312: PUSH
5313: LD_INT 29
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
5326: LD_ADDR_VAR 0 2
5330: PUSH
5331: LD_LOC 5
5335: PUSH
5336: LD_INT 1
5338: PPUSH
5339: LD_LOC 5
5343: PPUSH
5344: CALL_OW 12
5348: ARRAY
5349: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
5350: LD_ADDR_LOC 5
5354: PUSH
5355: LD_LOC 5
5359: PUSH
5360: LD_VAR 0 2
5364: PUSH
5365: EMPTY
5366: LIST
5367: DIFF
5368: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
5369: LD_INT 5
5371: PPUSH
5372: LD_VAR 0 2
5376: PPUSH
5377: LD_INT 1
5379: PPUSH
5380: CALL_OW 55
// end ; enable ;
5384: ENABLE
// end ;
5385: PPOPN 2
5387: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
5388: GO 5390
5390: DISABLE
5391: LD_INT 0
5393: PPUSH
5394: PPUSH
// begin case tick of 1 .. 1 1$0 :
5395: LD_OWVAR 1
5399: PUSH
5400: LD_INT 1
5402: DOUBLE
5403: GREATEREQUAL
5404: IFFALSE 5412
5406: LD_INT 2100
5408: DOUBLE
5409: LESSEQUAL
5410: IFTRUE 5414
5412: GO 5425
5414: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5415: LD_ADDR_VAR 0 1
5419: PUSH
5420: LD_INT 150
5422: ST_TO_ADDR
5423: GO 5608
5425: LD_INT 2100
5427: PUSH
5428: LD_INT 1
5430: PLUS
5431: DOUBLE
5432: GREATEREQUAL
5433: IFFALSE 5441
5435: LD_INT 10500
5437: DOUBLE
5438: LESSEQUAL
5439: IFTRUE 5443
5441: GO 5454
5443: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5444: LD_ADDR_VAR 0 1
5448: PUSH
5449: LD_INT 100
5451: ST_TO_ADDR
5452: GO 5608
5454: LD_INT 10500
5456: PUSH
5457: LD_INT 1
5459: PLUS
5460: DOUBLE
5461: GREATEREQUAL
5462: IFFALSE 5470
5464: LD_INT 21000
5466: DOUBLE
5467: LESSEQUAL
5468: IFTRUE 5472
5470: GO 5483
5472: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5473: LD_ADDR_VAR 0 1
5477: PUSH
5478: LD_INT 90
5480: ST_TO_ADDR
5481: GO 5608
5483: LD_INT 21000
5485: PUSH
5486: LD_INT 1
5488: PLUS
5489: DOUBLE
5490: GREATEREQUAL
5491: IFFALSE 5499
5493: LD_INT 42000
5495: DOUBLE
5496: LESSEQUAL
5497: IFTRUE 5501
5499: GO 5512
5501: POP
// d := 80 ; 20 20$0 + 1 .. 30 30$0 :
5502: LD_ADDR_VAR 0 1
5506: PUSH
5507: LD_INT 80
5509: ST_TO_ADDR
5510: GO 5608
5512: LD_INT 42000
5514: PUSH
5515: LD_INT 1
5517: PLUS
5518: DOUBLE
5519: GREATEREQUAL
5520: IFFALSE 5528
5522: LD_INT 63000
5524: DOUBLE
5525: LESSEQUAL
5526: IFTRUE 5530
5528: GO 5541
5530: POP
// d := 70 ; 30 30$0 + 1 .. 50 50$0 :
5531: LD_ADDR_VAR 0 1
5535: PUSH
5536: LD_INT 70
5538: ST_TO_ADDR
5539: GO 5608
5541: LD_INT 63000
5543: PUSH
5544: LD_INT 1
5546: PLUS
5547: DOUBLE
5548: GREATEREQUAL
5549: IFFALSE 5557
5551: LD_INT 105000
5553: DOUBLE
5554: LESSEQUAL
5555: IFTRUE 5559
5557: GO 5570
5559: POP
// d := 55 ; 50 50$0 + 1 .. 300 300$0 :
5560: LD_ADDR_VAR 0 1
5564: PUSH
5565: LD_INT 55
5567: ST_TO_ADDR
5568: GO 5608
5570: LD_INT 105000
5572: PUSH
5573: LD_INT 1
5575: PLUS
5576: DOUBLE
5577: GREATEREQUAL
5578: IFFALSE 5586
5580: LD_INT 630000
5582: DOUBLE
5583: LESSEQUAL
5584: IFTRUE 5588
5586: GO 5599
5588: POP
// d := 40 ; else
5589: LD_ADDR_VAR 0 1
5593: PUSH
5594: LD_INT 40
5596: ST_TO_ADDR
5597: GO 5608
5599: POP
// d := 0 ; end ;
5600: LD_ADDR_VAR 0 1
5604: PUSH
5605: LD_INT 0
5607: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density * 2 div 3 then
5608: LD_INT 1
5610: PPUSH
5611: LD_INT 10000
5613: PPUSH
5614: CALL_OW 12
5618: PUSH
5619: LD_VAR 0 1
5623: PUSH
5624: LD_EXP 23
5628: MUL
5629: PUSH
5630: LD_INT 2
5632: MUL
5633: PUSH
5634: LD_INT 3
5636: DIV
5637: LESSEQUAL
5638: IFFALSE 5777
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5640: LD_INT 1
5642: PPUSH
5643: LD_INT 140
5645: PPUSH
5646: CALL_OW 12
5650: PPUSH
5651: CALL_OW 67
// if shipment2 = [ ] then
5655: LD_LOC 6
5659: PUSH
5660: EMPTY
5661: EQUAL
5662: IFFALSE 5719
// shipment2 := [ between1 , between2 , between3 , between4 , ring1 , ring2 , ring3 , ring4 , center , center , center , center ] ;
5664: LD_ADDR_LOC 6
5668: PUSH
5669: LD_INT 30
5671: PUSH
5672: LD_INT 31
5674: PUSH
5675: LD_INT 32
5677: PUSH
5678: LD_INT 33
5680: PUSH
5681: LD_INT 34
5683: PUSH
5684: LD_INT 35
5686: PUSH
5687: LD_INT 36
5689: PUSH
5690: LD_INT 37
5692: PUSH
5693: LD_INT 38
5695: PUSH
5696: LD_INT 38
5698: PUSH
5699: LD_INT 38
5701: PUSH
5702: LD_INT 38
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
5719: LD_ADDR_VAR 0 2
5723: PUSH
5724: LD_LOC 6
5728: PUSH
5729: LD_INT 1
5731: PPUSH
5732: LD_LOC 6
5736: PPUSH
5737: CALL_OW 12
5741: ARRAY
5742: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
5743: LD_ADDR_LOC 6
5747: PUSH
5748: LD_LOC 6
5752: PUSH
5753: LD_VAR 0 2
5757: PUSH
5758: EMPTY
5759: LIST
5760: DIFF
5761: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
5762: LD_INT 5
5764: PPUSH
5765: LD_VAR 0 2
5769: PPUSH
5770: LD_INT 1
5772: PPUSH
5773: CALL_OW 55
// end ; enable ;
5777: ENABLE
// end ; end_of_file
5778: PPOPN 2
5780: END
// function prepare_treasure ( x , y ) ; var sm , i ; begin
5781: LD_INT 0
5783: PPUSH
5784: PPUSH
5785: PPUSH
// sm := rand ( 0 , 6 ) ;
5786: LD_ADDR_VAR 0 4
5790: PUSH
5791: LD_INT 0
5793: PPUSH
5794: LD_INT 6
5796: PPUSH
5797: CALL_OW 12
5801: ST_TO_ADDR
// for i := 0 to 15 do
5802: LD_ADDR_VAR 0 5
5806: PUSH
5807: DOUBLE
5808: LD_INT 0
5810: DEC
5811: ST_TO_ADDR
5812: LD_INT 15
5814: PUSH
5815: FOR_TO
5816: IFFALSE 5922
// begin MoveAreaXY ( p1 + i , x , y ) ;
5818: LD_INT 1
5820: PUSH
5821: LD_VAR 0 5
5825: PLUS
5826: PPUSH
5827: LD_VAR 0 1
5831: PPUSH
5832: LD_VAR 0 2
5836: PPUSH
5837: CALL_OW 425
// if prob ( 30 ) then
5841: LD_INT 30
5843: PPUSH
5844: CALL_OW 13
5848: IFFALSE 5866
// sm := rand ( 0 , 6 ) ;
5850: LD_ADDR_VAR 0 4
5854: PUSH
5855: LD_INT 0
5857: PPUSH
5858: LD_INT 6
5860: PPUSH
5861: CALL_OW 12
5865: ST_TO_ADDR
// x := ShiftX ( x - 1 , sm , 1 ) ;
5866: LD_ADDR_VAR 0 1
5870: PUSH
5871: LD_VAR 0 1
5875: PUSH
5876: LD_INT 1
5878: MINUS
5879: PPUSH
5880: LD_VAR 0 4
5884: PPUSH
5885: LD_INT 1
5887: PPUSH
5888: CALL_OW 272
5892: ST_TO_ADDR
// y := ShiftY ( y - 1 , sm , 1 ) ;
5893: LD_ADDR_VAR 0 2
5897: PUSH
5898: LD_VAR 0 2
5902: PUSH
5903: LD_INT 1
5905: MINUS
5906: PPUSH
5907: LD_VAR 0 4
5911: PPUSH
5912: LD_INT 1
5914: PPUSH
5915: CALL_OW 273
5919: ST_TO_ADDR
// end ;
5920: GO 5815
5922: POP
5923: POP
// end ;
5924: LD_VAR 0 3
5928: RET
// function show_treasure ; var i ; begin
5929: LD_INT 0
5931: PPUSH
5932: PPUSH
// SetAreaMapShow ( p16 , 1 ) ;
5933: LD_INT 16
5935: PPUSH
5936: LD_INT 1
5938: PPUSH
5939: CALL_OW 424
// for i := 1 to 15 do
5943: LD_ADDR_VAR 0 2
5947: PUSH
5948: DOUBLE
5949: LD_INT 1
5951: DEC
5952: ST_TO_ADDR
5953: LD_INT 15
5955: PUSH
5956: FOR_TO
5957: IFFALSE 6004
// begin wait ( 0 0$10 ) ;
5959: LD_INT 350
5961: PPUSH
5962: CALL_OW 67
// SetAreaMapShow ( p16 - i + 1 , 0 ) ;
5966: LD_INT 16
5968: PUSH
5969: LD_VAR 0 2
5973: MINUS
5974: PUSH
5975: LD_INT 1
5977: PLUS
5978: PPUSH
5979: LD_INT 0
5981: PPUSH
5982: CALL_OW 424
// SetAreaMapShow ( p16 - i , 1 ) ;
5986: LD_INT 16
5988: PUSH
5989: LD_VAR 0 2
5993: MINUS
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: CALL_OW 424
// end ;
6002: GO 5956
6004: POP
6005: POP
// wait ( 0 0$30 ) ;
6006: LD_INT 1050
6008: PPUSH
6009: CALL_OW 67
// SetAreaMapShow ( p1 , 0 ) ;
6013: LD_INT 1
6015: PPUSH
6016: LD_INT 0
6018: PPUSH
6019: CALL_OW 424
// end ;
6023: LD_VAR 0 1
6027: RET
// export function new_treasure ; var xy ; begin
6028: LD_INT 0
6030: PPUSH
6031: PPUSH
// xy := RandHexArea ( All , false ) ;
6032: LD_ADDR_VAR 0 2
6036: PUSH
6037: LD_INT 17
6039: PPUSH
6040: LD_INT 0
6042: PPUSH
6043: CALL_OW 16
6047: ST_TO_ADDR
// prepare_treasure ( xy [ 1 ] , xy [ 2 ] ) ;
6048: LD_VAR 0 2
6052: PUSH
6053: LD_INT 1
6055: ARRAY
6056: PPUSH
6057: LD_VAR 0 2
6061: PUSH
6062: LD_INT 2
6064: ARRAY
6065: PPUSH
6066: CALL 5781 0 2
// show_treasure ;
6070: CALL 5929 0 0
// end ; end_of_file
6074: LD_VAR 0 1
6078: RET
// export function Init_Win_Condition ; begin
6079: LD_INT 0
6081: PPUSH
// disable ( 98 ) ;
6082: LD_INT 98
6084: DISABLE_MARKED
// disable ( 99 ) ;
6085: LD_INT 99
6087: DISABLE_MARKED
// if Team_Game then
6088: LD_EXP 44
6092: IFFALSE 6099
// enable ( 98 ) else
6094: LD_INT 98
6096: ENABLE_MARKED
6097: GO 6102
// enable ( 99 ) ;
6099: LD_INT 99
6101: ENABLE_MARKED
// end ;
6102: LD_VAR 0 1
6106: RET
// function CanWinLoose ; begin
6107: LD_INT 0
6109: PPUSH
// Result := true ;
6110: LD_ADDR_VAR 0 1
6114: PUSH
6115: LD_INT 1
6117: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6118: CALL_OW 518
6122: PUSH
6123: CALL_OW 519
6127: PUSH
6128: LD_INT 0
6130: GREATER
6131: AND
6132: IFFALSE 6142
// Result := false ;
6134: LD_ADDR_VAR 0 1
6138: PUSH
6139: LD_INT 0
6141: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6142: CALL_OW 531
6146: PUSH
6147: CALL_OW 519
6151: PUSH
6152: LD_INT 1
6154: GREATER
6155: AND
6156: IFFALSE 6166
// Result := false ;
6158: LD_ADDR_VAR 0 1
6162: PUSH
6163: LD_INT 0
6165: ST_TO_ADDR
// end ;
6166: LD_VAR 0 1
6170: RET
// function HasPower ( i ) ; begin
6171: LD_INT 0
6173: PPUSH
// if def_people_respawning then
6174: LD_EXP 13
6178: IFFALSE 6269
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
6180: LD_ADDR_VAR 0 2
6184: PUSH
6185: LD_INT 22
6187: PUSH
6188: LD_VAR 0 1
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: LD_INT 2
6199: PUSH
6200: LD_INT 21
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 33
6212: PUSH
6213: LD_INT 3
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 33
6222: PUSH
6223: LD_INT 5
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 30
6232: PUSH
6233: LD_INT 0
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 30
6242: PUSH
6243: LD_INT 1
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PPUSH
6262: CALL_OW 69
6266: ST_TO_ADDR
6267: GO 6334
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
6269: LD_ADDR_VAR 0 2
6273: PUSH
6274: LD_INT 22
6276: PUSH
6277: LD_VAR 0 1
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 2
6288: PUSH
6289: LD_INT 21
6291: PUSH
6292: LD_INT 1
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: PUSH
6299: LD_INT 33
6301: PUSH
6302: LD_INT 3
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 33
6311: PUSH
6312: LD_INT 5
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 69
6333: ST_TO_ADDR
// end ;
6334: LD_VAR 0 2
6338: RET
// function AlliedSides ( i , j ) ; begin
6339: LD_INT 0
6341: PPUSH
// Result := false ;
6342: LD_ADDR_VAR 0 3
6346: PUSH
6347: LD_INT 0
6349: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
6350: LD_VAR 0 1
6354: PPUSH
6355: LD_VAR 0 2
6359: PPUSH
6360: CALL_OW 81
6364: PUSH
6365: LD_INT 1
6367: EQUAL
6368: PUSH
6369: LD_VAR 0 2
6373: PPUSH
6374: LD_VAR 0 1
6378: PPUSH
6379: CALL_OW 81
6383: PUSH
6384: LD_INT 1
6386: EQUAL
6387: AND
6388: PUSH
6389: LD_VAR 0 1
6393: PPUSH
6394: CALL_OW 83
6398: AND
6399: PUSH
6400: LD_VAR 0 2
6404: PPUSH
6405: CALL_OW 83
6409: AND
6410: IFFALSE 6420
// Result := true ;
6412: LD_ADDR_VAR 0 3
6416: PUSH
6417: LD_INT 1
6419: ST_TO_ADDR
// end ;
6420: LD_VAR 0 3
6424: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
6425: CALL 6107 0 0
6429: IFFALSE 6438
6431: GO 6433
6433: DISABLE
// YouLostInMultiplayer ;
6434: CALL_OW 107
6438: END
// every 0 0$3 trigger CanWinLoose marked 401 do
6439: CALL 6107 0 0
6443: IFFALSE 6467
6445: GO 6447
6447: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
6448: LD_EXP 41
6452: PUSH
6453: LD_OWVAR 2
6457: ARRAY
6458: PPUSH
6459: CALL 9296 0 1
// YouWinInMultiplayer ;
6463: CALL_OW 106
// end ;
6467: END
// every 0 0$3 marked 98 do var i , CanWin ;
6468: GO 6470
6470: DISABLE
6471: LD_INT 0
6473: PPUSH
6474: PPUSH
// begin if not HasPower ( your_side ) then
6475: LD_OWVAR 2
6479: PPUSH
6480: CALL 6171 0 1
6484: NOT
6485: IFFALSE 6496
// begin Multiplayer_Loose_Message ;
6487: CALL_OW 521
// enable ( 400 ) ;
6491: LD_INT 400
6493: ENABLE_MARKED
// end else
6494: GO 6629
// begin CanWin := true ;
6496: LD_ADDR_VAR 0 2
6500: PUSH
6501: LD_INT 1
6503: ST_TO_ADDR
// for i := 1 to 8 do
6504: LD_ADDR_VAR 0 1
6508: PUSH
6509: DOUBLE
6510: LD_INT 1
6512: DEC
6513: ST_TO_ADDR
6514: LD_INT 8
6516: PUSH
6517: FOR_TO
6518: IFFALSE 6615
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
6520: LD_EXP 40
6524: PUSH
6525: LD_VAR 0 1
6529: ARRAY
6530: PUSH
6531: LD_VAR 0 1
6535: PPUSH
6536: CALL_OW 108
6540: AND
6541: PUSH
6542: LD_VAR 0 1
6546: PUSH
6547: LD_OWVAR 2
6551: NONEQUAL
6552: AND
6553: IFFALSE 6613
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
6555: LD_EXP 38
6559: PUSH
6560: LD_VAR 0 1
6564: ARRAY
6565: NOT
6566: PUSH
6567: LD_EXP 38
6571: PUSH
6572: LD_VAR 0 1
6576: ARRAY
6577: PUSH
6578: LD_EXP 38
6582: PUSH
6583: LD_OWVAR 2
6587: ARRAY
6588: NONEQUAL
6589: OR
6590: IFFALSE 6613
// if HasPower ( i ) then
6592: LD_VAR 0 1
6596: PPUSH
6597: CALL 6171 0 1
6601: IFFALSE 6613
// begin CanWin := false ;
6603: LD_ADDR_VAR 0 2
6607: PUSH
6608: LD_INT 0
6610: ST_TO_ADDR
// break ;
6611: GO 6615
// end ;
6613: GO 6517
6615: POP
6616: POP
// if CanWin then
6617: LD_VAR 0 2
6621: IFFALSE 6628
// enable ( 401 ) else
6623: LD_INT 401
6625: ENABLE_MARKED
6626: GO 6629
// enable ;
6628: ENABLE
// end ; end ;
6629: PPOPN 2
6631: END
// every 0 0$3 marked 99 do var i , CanWin ;
6632: GO 6634
6634: DISABLE
6635: LD_INT 0
6637: PPUSH
6638: PPUSH
// begin if not HasPower ( your_side ) then
6639: LD_OWVAR 2
6643: PPUSH
6644: CALL 6171 0 1
6648: NOT
6649: IFFALSE 6660
// begin Multiplayer_Loose_Message ;
6651: CALL_OW 521
// enable ( 400 ) ;
6655: LD_INT 400
6657: ENABLE_MARKED
// end else
6658: GO 6773
// begin CanWin := true ;
6660: LD_ADDR_VAR 0 2
6664: PUSH
6665: LD_INT 1
6667: ST_TO_ADDR
// for i := 1 to 8 do
6668: LD_ADDR_VAR 0 1
6672: PUSH
6673: DOUBLE
6674: LD_INT 1
6676: DEC
6677: ST_TO_ADDR
6678: LD_INT 8
6680: PUSH
6681: FOR_TO
6682: IFFALSE 6759
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
6684: LD_EXP 40
6688: PUSH
6689: LD_VAR 0 1
6693: ARRAY
6694: PUSH
6695: LD_VAR 0 1
6699: PPUSH
6700: CALL_OW 108
6704: AND
6705: PUSH
6706: LD_VAR 0 1
6710: PUSH
6711: LD_OWVAR 2
6715: NONEQUAL
6716: AND
6717: IFFALSE 6757
// if not AlliedSides ( i , your_side ) then
6719: LD_VAR 0 1
6723: PPUSH
6724: LD_OWVAR 2
6728: PPUSH
6729: CALL 6339 0 2
6733: NOT
6734: IFFALSE 6757
// if HasPower ( i ) then
6736: LD_VAR 0 1
6740: PPUSH
6741: CALL 6171 0 1
6745: IFFALSE 6757
// begin CanWin := false ;
6747: LD_ADDR_VAR 0 2
6751: PUSH
6752: LD_INT 0
6754: ST_TO_ADDR
// break ;
6755: GO 6759
// end ;
6757: GO 6681
6759: POP
6760: POP
// if CanWin then
6761: LD_VAR 0 2
6765: IFFALSE 6772
// enable ( 401 ) else
6767: LD_INT 401
6769: ENABLE_MARKED
6770: GO 6773
// enable ;
6772: ENABLE
// end ; end ; end_of_file
6773: PPOPN 2
6775: END
// var infos ; export function init_infos ; begin
6776: LD_INT 0
6778: PPUSH
// infos = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6779: LD_ADDR_LOC 7
6783: PUSH
6784: LD_INT 0
6786: PUSH
6787: LD_INT 0
6789: PUSH
6790: LD_INT 0
6792: PUSH
6793: LD_INT 0
6795: PUSH
6796: LD_INT 0
6798: PUSH
6799: LD_INT 0
6801: PUSH
6802: LD_INT 0
6804: PUSH
6805: LD_INT 0
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: ST_TO_ADDR
// real_cost = cost ;
6818: LD_ADDR_EXP 29
6822: PUSH
6823: LD_EXP 27
6827: ST_TO_ADDR
// cost = cost * 10 ;
6828: LD_ADDR_EXP 27
6832: PUSH
6833: LD_EXP 27
6837: PUSH
6838: LD_INT 10
6840: MUL
6841: ST_TO_ADDR
// end ;
6842: LD_VAR 0 1
6846: RET
// every 0 0$1 do
6847: GO 6849
6849: DISABLE
// begin if gametype <> 11 then
6850: LD_EXP 1
6854: PUSH
6855: LD_INT 11
6857: NONEQUAL
6858: IFFALSE 6862
// exit ;
6860: GO 6951
// if decr_cost_time = 0 then
6862: LD_EXP 28
6866: PUSH
6867: LD_INT 0
6869: EQUAL
6870: IFFALSE 6892
// real_cost = ( cost div 100 ) * 10 else
6872: LD_ADDR_EXP 29
6876: PUSH
6877: LD_EXP 27
6881: PUSH
6882: LD_INT 100
6884: DIV
6885: PUSH
6886: LD_INT 10
6888: MUL
6889: ST_TO_ADDR
6890: GO 6951
// repeat wait ( decr_cost_time div 5 ) ;
6892: LD_EXP 28
6896: PUSH
6897: LD_INT 5
6899: DIV
6900: PPUSH
6901: CALL_OW 67
// cost = cost * 1000 div 1149 ;
6905: LD_ADDR_EXP 27
6909: PUSH
6910: LD_EXP 27
6914: PUSH
6915: LD_INT 1000
6917: MUL
6918: PUSH
6919: LD_INT 1149
6921: DIV
6922: ST_TO_ADDR
// real_cost = ( cost div 100 ) * 10 ;
6923: LD_ADDR_EXP 29
6927: PUSH
6928: LD_EXP 27
6932: PUSH
6933: LD_INT 100
6935: DIV
6936: PUSH
6937: LD_INT 10
6939: MUL
6940: ST_TO_ADDR
// until real_cost = 10 ;
6941: LD_EXP 29
6945: PUSH
6946: LD_INT 10
6948: EQUAL
6949: IFFALSE 6892
// end ;
6951: END
// every 0 0$2 do
6952: GO 6954
6954: DISABLE
// begin if gametype <> 11 then
6955: LD_EXP 1
6959: PUSH
6960: LD_INT 11
6962: NONEQUAL
6963: IFFALSE 6971
// ShowTimer else
6965: CALL 7389 0 0
6969: GO 6975
// ShowInfos ;
6971: CALL 6977 0 0
// enable ;
6975: ENABLE
// end ;
6976: END
// function ShowInfos ; var inf , en1 , en2 , AllStrings ; begin
6977: LD_INT 0
6979: PPUSH
6980: PPUSH
6981: PPUSH
6982: PPUSH
6983: PPUSH
// if gametype <> 11 then
6984: LD_EXP 1
6988: PUSH
6989: LD_INT 11
6991: NONEQUAL
6992: IFFALSE 6996
// exit ;
6994: GO 7384
// if not your_side then
6996: LD_OWVAR 2
7000: NOT
7001: IFFALSE 7006
// begin enable ;
7003: ENABLE
// exit ;
7004: GO 7384
// end ; if Teams [ Side_Teams [ your_side ] ] [ 1 ] = your_side then
7006: LD_EXP 39
7010: PUSH
7011: LD_EXP 38
7015: PUSH
7016: LD_OWVAR 2
7020: ARRAY
7021: ARRAY
7022: PUSH
7023: LD_INT 1
7025: ARRAY
7026: PUSH
7027: LD_OWVAR 2
7031: EQUAL
7032: IFFALSE 7096
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: LD_EXP 39
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_EXP 38
7051: PUSH
7052: LD_OWVAR 2
7056: ARRAY
7057: MINUS
7058: ARRAY
7059: PUSH
7060: LD_INT 2
7062: ARRAY
7063: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7064: LD_ADDR_VAR 0 4
7068: PUSH
7069: LD_EXP 39
7073: PUSH
7074: LD_INT 3
7076: PUSH
7077: LD_EXP 38
7081: PUSH
7082: LD_OWVAR 2
7086: ARRAY
7087: MINUS
7088: ARRAY
7089: PUSH
7090: LD_INT 1
7092: ARRAY
7093: ST_TO_ADDR
// end else
7094: GO 7156
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7096: LD_ADDR_VAR 0 3
7100: PUSH
7101: LD_EXP 39
7105: PUSH
7106: LD_INT 3
7108: PUSH
7109: LD_EXP 38
7113: PUSH
7114: LD_OWVAR 2
7118: ARRAY
7119: MINUS
7120: ARRAY
7121: PUSH
7122: LD_INT 1
7124: ARRAY
7125: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7126: LD_ADDR_VAR 0 4
7130: PUSH
7131: LD_EXP 39
7135: PUSH
7136: LD_INT 3
7138: PUSH
7139: LD_EXP 38
7143: PUSH
7144: LD_OWVAR 2
7148: ARRAY
7149: MINUS
7150: ARRAY
7151: PUSH
7152: LD_INT 2
7154: ARRAY
7155: ST_TO_ADDR
// end ; AllStrings := [ #Multi1x1-Time , tick ] ;
7156: LD_ADDR_VAR 0 5
7160: PUSH
7161: LD_STRING #Multi1x1-Time
7163: PUSH
7164: LD_OWVAR 1
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7173: LD_INT 0
7175: PUSH
7176: LD_EXP 33
7180: PUSH
7181: LD_OWVAR 1
7185: MINUS
7186: LESSEQUAL
7187: IFFALSE 7218
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7189: LD_ADDR_VAR 0 5
7193: PUSH
7194: LD_VAR 0 5
7198: PUSH
7199: LD_STRING #allowedsibbomb
7201: PUSH
7202: LD_EXP 33
7206: PUSH
7207: LD_OWVAR 1
7211: MINUS
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: ADD
7217: ST_TO_ADDR
// case infos [ your_side ] of 0 :
7218: LD_LOC 7
7222: PUSH
7223: LD_OWVAR 2
7227: ARRAY
7228: PUSH
7229: LD_INT 0
7231: DOUBLE
7232: EQUAL
7233: IFTRUE 7237
7235: GO 7264
7237: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Bid1 , real_cost ] ;
7238: LD_ADDR_OWVAR 47
7242: PUSH
7243: LD_VAR 0 5
7247: PUSH
7248: LD_STRING #MultiParty-Bid1
7250: PUSH
7251: LD_EXP 29
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: ADD
7260: ST_TO_ADDR
// enable ;
7261: ENABLE
// end ; 1 :
7262: GO 7384
7264: LD_INT 1
7266: DOUBLE
7267: EQUAL
7268: IFTRUE 7272
7270: GO 7320
7272: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info1 , en1 , en1 , - 1 , #MultiParty-Bid2 , real_cost ] ;
7273: LD_ADDR_OWVAR 47
7277: PUSH
7278: LD_VAR 0 5
7282: PUSH
7283: LD_STRING #MultiParty-Info1
7285: PUSH
7286: LD_VAR 0 3
7290: PUSH
7291: LD_VAR 0 3
7295: PUSH
7296: LD_INT 1
7298: NEG
7299: PUSH
7300: LD_STRING #MultiParty-Bid2
7302: PUSH
7303: LD_EXP 29
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: ADD
7316: ST_TO_ADDR
// enable ;
7317: ENABLE
// end ; 2 :
7318: GO 7384
7320: LD_INT 2
7322: DOUBLE
7323: EQUAL
7324: IFTRUE 7328
7326: GO 7383
7328: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info2 , en1 , en1 , - 1 , en2 , en2 , - 1 ] ;
7329: LD_ADDR_OWVAR 47
7333: PUSH
7334: LD_VAR 0 5
7338: PUSH
7339: LD_STRING #MultiParty-Info2
7341: PUSH
7342: LD_VAR 0 3
7346: PUSH
7347: LD_VAR 0 3
7351: PUSH
7352: LD_INT 1
7354: NEG
7355: PUSH
7356: LD_VAR 0 4
7360: PUSH
7361: LD_VAR 0 4
7365: PUSH
7366: LD_INT 1
7368: NEG
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: ADD
7379: ST_TO_ADDR
// enable ;
7380: ENABLE
// end ; end ;
7381: GO 7384
7383: POP
// end ;
7384: LD_VAR 0 1
7388: RET
// function ShowTimer ; var AllStrings ; begin
7389: LD_INT 0
7391: PPUSH
7392: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7393: LD_ADDR_VAR 0 2
7397: PUSH
7398: LD_STRING #Multi1x1-Time
7400: PUSH
7401: LD_OWVAR 1
7405: PUSH
7406: EMPTY
7407: LIST
7408: LIST
7409: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7410: LD_INT 0
7412: PUSH
7413: LD_EXP 33
7417: PUSH
7418: LD_OWVAR 1
7422: MINUS
7423: LESSEQUAL
7424: IFFALSE 7455
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7426: LD_ADDR_VAR 0 2
7430: PUSH
7431: LD_VAR 0 2
7435: PUSH
7436: LD_STRING #allowedsibbomb
7438: PUSH
7439: LD_EXP 33
7443: PUSH
7444: LD_OWVAR 1
7448: MINUS
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: ADD
7454: ST_TO_ADDR
// Display_Strings := AllStrings ;
7455: LD_ADDR_OWVAR 47
7459: PUSH
7460: LD_VAR 0 2
7464: ST_TO_ADDR
// end ;
7465: LD_VAR 0 1
7469: RET
// function check_area ( side , area ) ; begin
7470: LD_INT 0
7472: PPUSH
// if infos [ side ] = 2 then
7473: LD_LOC 7
7477: PUSH
7478: LD_VAR 0 1
7482: ARRAY
7483: PUSH
7484: LD_INT 2
7486: EQUAL
7487: IFFALSE 7491
// exit ;
7489: GO 7562
// if GetResourceArea ( area , mat_cans ) * 10 >= real_cost then
7491: LD_VAR 0 2
7495: PPUSH
7496: LD_INT 1
7498: PPUSH
7499: CALL_OW 287
7503: PUSH
7504: LD_INT 10
7506: MUL
7507: PUSH
7508: LD_EXP 29
7512: GREATEREQUAL
7513: IFFALSE 7562
// begin EraseResourceArea ( area , mat_cans ) ;
7515: LD_VAR 0 2
7519: PPUSH
7520: LD_INT 1
7522: PPUSH
7523: CALL_OW 286
// infos = Replace ( infos , side , infos [ side ] + 1 ) ;
7527: LD_ADDR_LOC 7
7531: PUSH
7532: LD_LOC 7
7536: PPUSH
7537: LD_VAR 0 1
7541: PPUSH
7542: LD_LOC 7
7546: PUSH
7547: LD_VAR 0 1
7551: ARRAY
7552: PUSH
7553: LD_INT 1
7555: PLUS
7556: PPUSH
7557: CALL_OW 1
7561: ST_TO_ADDR
// end ; end ;
7562: LD_VAR 0 3
7566: RET
// every 0 0$5 do var i ;
7567: GO 7569
7569: DISABLE
7570: LD_INT 0
7572: PPUSH
// begin for i := 1 to Side_Positions do
7573: LD_ADDR_VAR 0 1
7577: PUSH
7578: DOUBLE
7579: LD_INT 1
7581: DEC
7582: ST_TO_ADDR
7583: LD_EXP 40
7587: PUSH
7588: FOR_TO
7589: IFFALSE 7697
// case Side_Positions [ i ] of 1 :
7591: LD_EXP 40
7595: PUSH
7596: LD_VAR 0 1
7600: ARRAY
7601: PUSH
7602: LD_INT 1
7604: DOUBLE
7605: EQUAL
7606: IFTRUE 7610
7608: GO 7625
7610: POP
// check_area ( i , exit1 ) ; 2 :
7611: LD_VAR 0 1
7615: PPUSH
7616: LD_INT 22
7618: PPUSH
7619: CALL 7470 0 2
7623: GO 7695
7625: LD_INT 2
7627: DOUBLE
7628: EQUAL
7629: IFTRUE 7633
7631: GO 7648
7633: POP
// check_area ( i , exit2 ) ; 3 :
7634: LD_VAR 0 1
7638: PPUSH
7639: LD_INT 23
7641: PPUSH
7642: CALL 7470 0 2
7646: GO 7695
7648: LD_INT 3
7650: DOUBLE
7651: EQUAL
7652: IFTRUE 7656
7654: GO 7671
7656: POP
// check_area ( i , exit3 ) ; 4 :
7657: LD_VAR 0 1
7661: PPUSH
7662: LD_INT 24
7664: PPUSH
7665: CALL 7470 0 2
7669: GO 7695
7671: LD_INT 4
7673: DOUBLE
7674: EQUAL
7675: IFTRUE 7679
7677: GO 7694
7679: POP
// check_area ( i , exit4 ) ; end ;
7680: LD_VAR 0 1
7684: PPUSH
7685: LD_INT 25
7687: PPUSH
7688: CALL 7470 0 2
7692: GO 7695
7694: POP
7695: GO 7588
7697: POP
7698: POP
// enable ;
7699: ENABLE
// exit ;
7700: GO 7702
// end ; end_of_file
7702: PPOPN 1
7704: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7705: LD_INT 0
7707: PPUSH
7708: PPUSH
// for un in battle_flags_id do
7709: LD_ADDR_VAR 0 2
7713: PUSH
7714: LD_EXP 49
7718: PUSH
7719: FOR_IN
7720: IFFALSE 7795
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7722: LD_VAR 0 2
7726: PPUSH
7727: LD_INT 1
7729: PUSH
7730: LD_LOC 8
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 2
7741: PUSH
7742: LD_LOC 8
7746: PUSH
7747: LD_INT 2
7749: DIV
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 3
7757: PUSH
7758: LD_LOC 8
7762: PUSH
7763: LD_INT 5
7765: DIV
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: LD_INT 20
7773: PUSH
7774: LD_LOC 8
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: PPUSH
7789: CALL_OW 423
7793: GO 7719
7795: POP
7796: POP
// end ;
7797: LD_VAR 0 1
7801: RET
// every 0 0$0.1 do var un ;
7802: GO 7804
7804: DISABLE
7805: LD_INT 0
7807: PPUSH
// begin if not def_morale_flags then
7808: LD_EXP 10
7812: NOT
7813: IFFALSE 7817
// exit ;
7815: GO 7894
// if not morale_decreasing_time then
7817: LD_EXP 24
7821: NOT
7822: IFFALSE 7826
// exit ;
7824: GO 7894
// strength = 100 ;
7826: LD_ADDR_LOC 8
7830: PUSH
7831: LD_INT 100
7833: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7834: LD_EXP 24
7838: PPUSH
7839: CALL_OW 67
// strength := strength - 1 ;
7843: LD_ADDR_LOC 8
7847: PUSH
7848: LD_LOC 8
7852: PUSH
7853: LD_INT 1
7855: MINUS
7856: ST_TO_ADDR
// Update_Flags ;
7857: CALL 7705 0 0
// until not strength ;
7861: LD_LOC 8
7865: NOT
7866: IFFALSE 7834
// for un in battle_flags_id do
7868: LD_ADDR_VAR 0 1
7872: PUSH
7873: LD_EXP 49
7877: PUSH
7878: FOR_IN
7879: IFFALSE 7892
// KillBattleFlag ( un ) ;
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL_OW 419
7890: GO 7878
7892: POP
7893: POP
// end ; end_of_file
7894: PPOPN 1
7896: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7897: LD_VAR 0 1
7901: PPUSH
7902: CALL_OW 266
7906: PUSH
7907: LD_INT 0
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: IN
7917: IFFALSE 7942
// SetBName ( b , @ & GetSide ( b ) ) ;
7919: LD_VAR 0 1
7923: PPUSH
7924: LD_STRING @
7926: PUSH
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 255
7936: STR
7937: PPUSH
7938: CALL_OW 500
// end ;
7942: PPOPN 2
7944: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7945: LD_VAR 0 1
7949: PPUSH
7950: CALL_OW 266
7954: PUSH
7955: LD_INT 0
7957: PUSH
7958: LD_INT 1
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: IN
7965: IFFALSE 7990
// SetBName ( b , @ & GetSide ( b ) ) ;
7967: LD_VAR 0 1
7971: PPUSH
7972: LD_STRING @
7974: PUSH
7975: LD_VAR 0 1
7979: PPUSH
7980: CALL_OW 255
7984: STR
7985: PPUSH
7986: CALL_OW 500
// end ;
7990: PPOPN 3
7992: END
// on VehicleConstructed ( veh , fac ) do var side ;
7993: LD_INT 0
7995: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7996: LD_VAR 0 1
8000: PPUSH
8001: CALL_OW 263
8005: PUSH
8006: LD_INT 5
8008: EQUAL
8009: IFFALSE 8151
// begin side := GetSide ( veh ) ;
8011: LD_ADDR_VAR 0 3
8015: PUSH
8016: LD_VAR 0 1
8020: PPUSH
8021: CALL_OW 255
8025: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8026: LD_ADDR_EXP 53
8030: PUSH
8031: LD_EXP 53
8035: PPUSH
8036: LD_VAR 0 3
8040: PPUSH
8041: LD_EXP 53
8045: PUSH
8046: LD_VAR 0 3
8050: ARRAY
8051: PPUSH
8052: LD_INT 52
8054: PUSH
8055: EMPTY
8056: LIST
8057: PPUSH
8058: CALL_OW 72
8062: PUSH
8063: LD_INT 22
8065: PUSH
8066: LD_VAR 0 3
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 2
8077: PUSH
8078: LD_INT 33
8080: PUSH
8081: LD_INT 5
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 25
8090: PUSH
8091: LD_INT 12
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 25
8100: PUSH
8101: LD_INT 15
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: LD_INT 25
8110: PUSH
8111: LD_INT 16
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 25
8120: PUSH
8121: LD_INT 17
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PPUSH
8140: CALL_OW 69
8144: UNION
8145: PPUSH
8146: CALL_OW 1
8150: ST_TO_ADDR
// end ; end ;
8151: PPOPN 3
8153: END
// on UnitDestroyed ( j ) do begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
8154: LD_VAR 0 1
8158: PPUSH
8159: CALL_OW 257
8163: PUSH
8164: LD_INT 12
8166: PUSH
8167: LD_INT 15
8169: PUSH
8170: LD_INT 17
8172: PUSH
8173: LD_INT 16
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: IN
8182: PUSH
8183: LD_VAR 0 1
8187: PPUSH
8188: CALL_OW 263
8192: PUSH
8193: LD_INT 5
8195: EQUAL
8196: OR
8197: IFFALSE 8208
// ApeKilled ( j ) ;
8199: LD_VAR 0 1
8203: PPUSH
8204: CALL 9110 0 1
// end ;
8208: PPOPN 1
8210: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8211: LD_VAR 0 1
8215: PPUSH
8216: LD_VAR 0 2
8220: PPUSH
8221: LD_VAR 0 3
8225: PPUSH
8226: LD_OWVAR 2
8230: PPUSH
8231: CALL 9254 0 4
8235: PPOPN 3
8237: END
// every 20 20$00 trigger apemanNumber do
8238: LD_EXP 50
8242: IFFALSE 8275
8244: GO 8246
8246: DISABLE
// begin enable ;
8247: ENABLE
// if apeLevel >= 8 then
8248: LD_EXP 55
8252: PUSH
8253: LD_INT 8
8255: GREATEREQUAL
8256: IFFALSE 8261
// disable else
8258: DISABLE
8259: GO 8275
// apeLevel := apeLevel + 1 ;
8261: LD_ADDR_EXP 55
8265: PUSH
8266: LD_EXP 55
8270: PUSH
8271: LD_INT 1
8273: PLUS
8274: ST_TO_ADDR
// end ;
8275: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
8276: LD_EXP 50
8280: PUSH
8281: LD_EXP 51
8285: LESS
8286: IFFALSE 8426
8288: GO 8290
8290: DISABLE
8291: LD_INT 0
8293: PPUSH
8294: PPUSH
8295: PPUSH
8296: PPUSH
// begin enable ;
8297: ENABLE
// for i := 1 to apemanPos do
8298: LD_ADDR_VAR 0 1
8302: PUSH
8303: DOUBLE
8304: LD_INT 1
8306: DEC
8307: ST_TO_ADDR
8308: LD_EXP 53
8312: PUSH
8313: FOR_TO
8314: IFFALSE 8424
// begin if apemanPlayerCount [ i ] then
8316: LD_EXP 54
8320: PUSH
8321: LD_VAR 0 1
8325: ARRAY
8326: IFFALSE 8422
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
8328: LD_EXP 54
8332: PUSH
8333: LD_VAR 0 1
8337: ARRAY
8338: PUSH
8339: LD_EXP 53
8343: PUSH
8344: LD_VAR 0 1
8348: ARRAY
8349: GREATER
8350: IFFALSE 8422
// begin ape := PrepareApeman ;
8352: LD_ADDR_VAR 0 2
8356: PUSH
8357: CALL 8929 0 0
8361: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
8362: LD_VAR 0 2
8366: PPUSH
8367: LD_EXP 56
8371: PUSH
8372: LD_VAR 0 1
8376: ARRAY
8377: PPUSH
8378: LD_INT 0
8380: PPUSH
8381: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
8385: LD_ADDR_EXP 53
8389: PUSH
8390: LD_EXP 53
8394: PPUSH
8395: LD_VAR 0 1
8399: PPUSH
8400: LD_EXP 53
8404: PUSH
8405: LD_VAR 0 1
8409: ARRAY
8410: PUSH
8411: LD_VAR 0 2
8415: UNION
8416: PPUSH
8417: CALL_OW 1
8421: ST_TO_ADDR
// end ; end ; end ;
8422: GO 8313
8424: POP
8425: POP
// end ;
8426: PPOPN 4
8428: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
8429: LD_INT 0
8431: PPUSH
8432: PPUSH
8433: PPUSH
8434: PPUSH
8435: PPUSH
8436: PPUSH
8437: PPUSH
// playersAmount := 0 ;
8438: LD_ADDR_VAR 0 3
8442: PUSH
8443: LD_INT 0
8445: ST_TO_ADDR
// _apeAreas := [ ape1 , ape2 , ape3 , ape4 ] ;
8446: LD_ADDR_VAR 0 7
8450: PUSH
8451: LD_INT 39
8453: PUSH
8454: LD_INT 40
8456: PUSH
8457: LD_INT 41
8459: PUSH
8460: LD_INT 42
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8469: LD_ADDR_EXP 56
8473: PUSH
8474: LD_INT 0
8476: PUSH
8477: LD_INT 0
8479: PUSH
8480: LD_INT 0
8482: PUSH
8483: LD_INT 0
8485: PUSH
8486: LD_INT 0
8488: PUSH
8489: LD_INT 0
8491: PUSH
8492: LD_INT 0
8494: PUSH
8495: LD_INT 0
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: ST_TO_ADDR
// for j = 1 to Side_Positions do
8508: LD_ADDR_VAR 0 4
8512: PUSH
8513: DOUBLE
8514: LD_INT 1
8516: DEC
8517: ST_TO_ADDR
8518: LD_EXP 40
8522: PUSH
8523: FOR_TO
8524: IFFALSE 8591
// if Side_Positions [ j ] then
8526: LD_EXP 40
8530: PUSH
8531: LD_VAR 0 4
8535: ARRAY
8536: IFFALSE 8589
// begin playersAmount := playersAmount + 1 ;
8538: LD_ADDR_VAR 0 3
8542: PUSH
8543: LD_VAR 0 3
8547: PUSH
8548: LD_INT 1
8550: PLUS
8551: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
8552: LD_ADDR_EXP 56
8556: PUSH
8557: LD_EXP 56
8561: PPUSH
8562: LD_VAR 0 4
8566: PPUSH
8567: LD_VAR 0 7
8571: PUSH
8572: LD_EXP 40
8576: PUSH
8577: LD_VAR 0 4
8581: ARRAY
8582: ARRAY
8583: PPUSH
8584: CALL_OW 1
8588: ST_TO_ADDR
// end ;
8589: GO 8523
8591: POP
8592: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
8593: LD_ADDR_EXP 52
8597: PUSH
8598: LD_INT 3
8600: PUSH
8601: LD_EXP 32
8605: MUL
8606: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
8607: LD_ADDR_EXP 50
8611: PUSH
8612: LD_VAR 0 3
8616: PUSH
8617: LD_EXP 52
8621: MUL
8622: ST_TO_ADDR
// apemanLimit := apemanNumber ;
8623: LD_ADDR_EXP 51
8627: PUSH
8628: LD_EXP 50
8632: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8633: LD_ADDR_EXP 53
8637: PUSH
8638: LD_INT 0
8640: PUSH
8641: LD_INT 0
8643: PUSH
8644: LD_INT 0
8646: PUSH
8647: LD_INT 0
8649: PUSH
8650: LD_INT 0
8652: PUSH
8653: LD_INT 0
8655: PUSH
8656: LD_INT 0
8658: PUSH
8659: LD_INT 0
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8672: LD_ADDR_EXP 54
8676: PUSH
8677: LD_INT 0
8679: PUSH
8680: LD_INT 0
8682: PUSH
8683: LD_INT 0
8685: PUSH
8686: LD_INT 0
8688: PUSH
8689: LD_INT 0
8691: PUSH
8692: LD_INT 0
8694: PUSH
8695: LD_INT 0
8697: PUSH
8698: LD_INT 0
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: ST_TO_ADDR
// apeLevel := 1 ;
8711: LD_ADDR_EXP 55
8715: PUSH
8716: LD_INT 1
8718: ST_TO_ADDR
// if not apemanNumber then
8719: LD_EXP 50
8723: NOT
8724: IFFALSE 8728
// exit ;
8726: GO 8924
// for i := 1 to apemanPerPlayer do
8728: LD_ADDR_VAR 0 2
8732: PUSH
8733: DOUBLE
8734: LD_INT 1
8736: DEC
8737: ST_TO_ADDR
8738: LD_EXP 52
8742: PUSH
8743: FOR_TO
8744: IFFALSE 8922
// begin for j := 1 to Side_Positions do
8746: LD_ADDR_VAR 0 4
8750: PUSH
8751: DOUBLE
8752: LD_INT 1
8754: DEC
8755: ST_TO_ADDR
8756: LD_EXP 40
8760: PUSH
8761: FOR_TO
8762: IFFALSE 8918
// if Side_Positions [ j ] then
8764: LD_EXP 40
8768: PUSH
8769: LD_VAR 0 4
8773: ARRAY
8774: IFFALSE 8916
// begin pos := Side_Positions [ j ] ;
8776: LD_ADDR_VAR 0 6
8780: PUSH
8781: LD_EXP 40
8785: PUSH
8786: LD_VAR 0 4
8790: ARRAY
8791: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
8792: LD_ADDR_EXP 54
8796: PUSH
8797: LD_EXP 54
8801: PPUSH
8802: LD_VAR 0 4
8806: PPUSH
8807: LD_EXP 54
8811: PUSH
8812: LD_VAR 0 4
8816: ARRAY
8817: PUSH
8818: LD_INT 1
8820: PLUS
8821: PPUSH
8822: CALL_OW 1
8826: ST_TO_ADDR
// ape := PrepareApeman ;
8827: LD_ADDR_VAR 0 5
8831: PUSH
8832: CALL 8929 0 0
8836: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
8837: LD_ADDR_EXP 53
8841: PUSH
8842: LD_EXP 53
8846: PPUSH
8847: LD_VAR 0 4
8851: PPUSH
8852: LD_EXP 53
8856: PUSH
8857: LD_VAR 0 4
8861: ARRAY
8862: PPUSH
8863: LD_EXP 53
8867: PUSH
8868: LD_VAR 0 4
8872: ARRAY
8873: PUSH
8874: LD_INT 1
8876: PLUS
8877: PPUSH
8878: LD_VAR 0 5
8882: PPUSH
8883: CALL_OW 1
8887: PPUSH
8888: CALL_OW 1
8892: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
8893: LD_VAR 0 5
8897: PPUSH
8898: LD_EXP 56
8902: PUSH
8903: LD_VAR 0 4
8907: ARRAY
8908: PPUSH
8909: LD_INT 0
8911: PPUSH
8912: CALL_OW 49
// end ;
8916: GO 8761
8918: POP
8919: POP
// end ;
8920: GO 8743
8922: POP
8923: POP
// end ;
8924: LD_VAR 0 1
8928: RET
// export function PrepareApeman ; var bonus ; begin
8929: LD_INT 0
8931: PPUSH
8932: PPUSH
// uc_side := 0 ;
8933: LD_ADDR_OWVAR 20
8937: PUSH
8938: LD_INT 0
8940: ST_TO_ADDR
// uc_nation := 0 ;
8941: LD_ADDR_OWVAR 21
8945: PUSH
8946: LD_INT 0
8948: ST_TO_ADDR
// InitHc ;
8949: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
8953: LD_ADDR_VAR 0 2
8957: PUSH
8958: LD_INT 1
8960: NEG
8961: PUSH
8962: LD_INT 0
8964: PUSH
8965: LD_INT 1
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: PUSH
8973: LD_OWVAR 1
8977: PUSH
8978: LD_INT 3
8980: MOD
8981: PUSH
8982: LD_INT 1
8984: PLUS
8985: ARRAY
8986: ST_TO_ADDR
// hc_class := class_apeman ;
8987: LD_ADDR_OWVAR 28
8991: PUSH
8992: LD_INT 12
8994: ST_TO_ADDR
// hc_gallery :=  ;
8995: LD_ADDR_OWVAR 33
8999: PUSH
9000: LD_STRING 
9002: ST_TO_ADDR
// hc_name :=  ;
9003: LD_ADDR_OWVAR 26
9007: PUSH
9008: LD_STRING 
9010: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
9011: LD_ADDR_OWVAR 31
9015: PUSH
9016: LD_EXP 55
9020: PUSH
9021: LD_VAR 0 2
9025: PLUS
9026: PUSH
9027: LD_EXP 55
9031: PUSH
9032: LD_VAR 0 2
9036: PLUS
9037: PUSH
9038: LD_EXP 55
9042: PUSH
9043: LD_VAR 0 2
9047: PLUS
9048: PUSH
9049: LD_EXP 55
9053: PUSH
9054: LD_VAR 0 2
9058: PLUS
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
9066: LD_ADDR_OWVAR 35
9070: PUSH
9071: LD_INT 10
9073: PUSH
9074: LD_VAR 0 2
9078: MUL
9079: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
9080: LD_ADDR_OWVAR 29
9084: PUSH
9085: LD_INT 12
9087: PUSH
9088: LD_INT 10
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: ST_TO_ADDR
// result := CreateHuman ;
9095: LD_ADDR_VAR 0 1
9099: PUSH
9100: CALL_OW 44
9104: ST_TO_ADDR
// end ;
9105: LD_VAR 0 1
9109: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
9110: LD_INT 0
9112: PPUSH
9113: PPUSH
9114: PPUSH
// if not ape then
9115: LD_VAR 0 1
9119: NOT
9120: IFFALSE 9124
// exit ;
9122: GO 9249
// side := GetSide ( ape ) ;
9124: LD_ADDR_VAR 0 3
9128: PUSH
9129: LD_VAR 0 1
9133: PPUSH
9134: CALL_OW 255
9138: ST_TO_ADDR
// if not side then
9139: LD_VAR 0 3
9143: NOT
9144: IFFALSE 9198
// begin for i = 1 to apemanPos do
9146: LD_ADDR_VAR 0 4
9150: PUSH
9151: DOUBLE
9152: LD_INT 1
9154: DEC
9155: ST_TO_ADDR
9156: LD_EXP 53
9160: PUSH
9161: FOR_TO
9162: IFFALSE 9196
// if ape in apemanPos [ i ] then
9164: LD_VAR 0 1
9168: PUSH
9169: LD_EXP 53
9173: PUSH
9174: LD_VAR 0 4
9178: ARRAY
9179: IN
9180: IFFALSE 9194
// begin side := i ;
9182: LD_ADDR_VAR 0 3
9186: PUSH
9187: LD_VAR 0 4
9191: ST_TO_ADDR
// break ;
9192: GO 9196
// end ;
9194: GO 9161
9196: POP
9197: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
9198: LD_ADDR_EXP 53
9202: PUSH
9203: LD_EXP 53
9207: PPUSH
9208: LD_VAR 0 3
9212: PPUSH
9213: LD_EXP 53
9217: PUSH
9218: LD_VAR 0 3
9222: ARRAY
9223: PUSH
9224: LD_VAR 0 1
9228: DIFF
9229: PPUSH
9230: CALL_OW 1
9234: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
9235: LD_ADDR_EXP 50
9239: PUSH
9240: LD_EXP 50
9244: PUSH
9245: LD_INT 1
9247: MINUS
9248: ST_TO_ADDR
// end ; end_of_file
9249: LD_VAR 0 2
9253: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9254: LD_INT 0
9256: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9257: LD_VAR 0 1
9261: PPUSH
9262: CALL_OW 255
9266: PUSH
9267: LD_VAR 0 4
9271: EQUAL
9272: IFFALSE 9291
// begin SetAchievement ( ACH_RAD ) ;
9274: LD_STRING ACH_RAD
9276: PPUSH
9277: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9281: LD_STRING ACH_NL
9283: PPUSH
9284: LD_INT 1
9286: PPUSH
9287: CALL_OW 564
// end end ;
9291: LD_VAR 0 5
9295: RET
// export function SA_Win ( side ) ; begin
9296: LD_INT 0
9298: PPUSH
// case side of 1 :
9299: LD_VAR 0 1
9303: PUSH
9304: LD_INT 1
9306: DOUBLE
9307: EQUAL
9308: IFTRUE 9312
9310: GO 9325
9312: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9313: LD_STRING ACH_AH
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: CALL_OW 564
9323: GO 9488
9325: LD_INT 2
9327: DOUBLE
9328: EQUAL
9329: IFTRUE 9333
9331: GO 9346
9333: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9334: LD_STRING ACH_E
9336: PPUSH
9337: LD_INT 1
9339: PPUSH
9340: CALL_OW 564
9344: GO 9488
9346: LD_INT 3
9348: DOUBLE
9349: EQUAL
9350: IFTRUE 9354
9352: GO 9367
9354: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9355: LD_STRING ACH_OOL
9357: PPUSH
9358: LD_INT 1
9360: PPUSH
9361: CALL_OW 564
9365: GO 9488
9367: LD_INT 1
9369: PUSH
9370: LD_INT 2
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: DOUBLE
9377: EQUAL
9378: IFTRUE 9382
9380: GO 9407
9382: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9383: LD_STRING ACH_AH
9385: PPUSH
9386: LD_REAL  5.00000000000000E-0001
9389: PPUSH
9390: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9394: LD_STRING ACH_E
9396: PPUSH
9397: LD_REAL  5.00000000000000E-0001
9400: PPUSH
9401: CALL_OW 564
// end ; [ 2 , 3 ] :
9405: GO 9488
9407: LD_INT 2
9409: PUSH
9410: LD_INT 3
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: DOUBLE
9417: EQUAL
9418: IFTRUE 9422
9420: GO 9447
9422: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9423: LD_STRING ACH_OOL
9425: PPUSH
9426: LD_REAL  5.00000000000000E-0001
9429: PPUSH
9430: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9434: LD_STRING ACH_E
9436: PPUSH
9437: LD_REAL  5.00000000000000E-0001
9440: PPUSH
9441: CALL_OW 564
// end ; [ 3 , 1 ] :
9445: GO 9488
9447: LD_INT 3
9449: PUSH
9450: LD_INT 1
9452: PUSH
9453: EMPTY
9454: LIST
9455: LIST
9456: DOUBLE
9457: EQUAL
9458: IFTRUE 9462
9460: GO 9487
9462: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9463: LD_STRING ACH_AH
9465: PPUSH
9466: LD_REAL  5.00000000000000E-0001
9469: PPUSH
9470: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9474: LD_STRING ACH_OOL
9476: PPUSH
9477: LD_REAL  5.00000000000000E-0001
9480: PPUSH
9481: CALL_OW 564
// end ; end ;
9485: GO 9488
9487: POP
// end ; end_of_file
9488: LD_VAR 0 2
9492: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9493: LD_INT 0
9495: PPUSH
9496: PPUSH
9497: PPUSH
// for side = 1 to 8 do
9498: LD_ADDR_VAR 0 2
9502: PUSH
9503: DOUBLE
9504: LD_INT 1
9506: DEC
9507: ST_TO_ADDR
9508: LD_INT 8
9510: PUSH
9511: FOR_TO
9512: IFFALSE 9633
// begin for i = 1 to 72 do
9514: LD_ADDR_VAR 0 3
9518: PUSH
9519: DOUBLE
9520: LD_INT 1
9522: DEC
9523: ST_TO_ADDR
9524: LD_INT 72
9526: PUSH
9527: FOR_TO
9528: IFFALSE 9559
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9530: LD_VAR 0 3
9534: PPUSH
9535: LD_VAR 0 2
9539: PPUSH
9540: LD_INT 0
9542: PPUSH
9543: LD_VAR 0 3
9547: PPUSH
9548: CALL_OW 565
9552: PPUSH
9553: CALL_OW 322
9557: GO 9527
9559: POP
9560: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9561: LD_INT 73
9563: PPUSH
9564: LD_VAR 0 2
9568: PPUSH
9569: LD_INT 0
9571: PPUSH
9572: LD_INT 25
9574: PPUSH
9575: CALL_OW 565
9579: PPUSH
9580: CALL_OW 322
// for i = 0 to 40 do
9584: LD_ADDR_VAR 0 3
9588: PUSH
9589: DOUBLE
9590: LD_INT 0
9592: DEC
9593: ST_TO_ADDR
9594: LD_INT 40
9596: PUSH
9597: FOR_TO
9598: IFFALSE 9629
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9600: LD_VAR 0 3
9604: PPUSH
9605: LD_VAR 0 2
9609: PPUSH
9610: LD_INT 1
9612: PPUSH
9613: LD_VAR 0 3
9617: PPUSH
9618: CALL_OW 565
9622: PPUSH
9623: CALL_OW 324
9627: GO 9597
9629: POP
9630: POP
// end ;
9631: GO 9511
9633: POP
9634: POP
// end ;
9635: LD_VAR 0 1
9639: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9640: LD_INT 0
9642: PPUSH
9643: PPUSH
9644: PPUSH
// for side = 1 to 8 do
9645: LD_ADDR_VAR 0 3
9649: PUSH
9650: DOUBLE
9651: LD_INT 1
9653: DEC
9654: ST_TO_ADDR
9655: LD_INT 8
9657: PUSH
9658: FOR_TO
9659: IFFALSE 13655
// begin for i = 1 to 73 do
9661: LD_ADDR_VAR 0 4
9665: PUSH
9666: DOUBLE
9667: LD_INT 1
9669: DEC
9670: ST_TO_ADDR
9671: LD_INT 73
9673: PUSH
9674: FOR_TO
9675: IFFALSE 9696
// SetTech ( i , side , state_disabled ) ;
9677: LD_VAR 0 4
9681: PPUSH
9682: LD_VAR 0 3
9686: PPUSH
9687: LD_INT 0
9689: PPUSH
9690: CALL_OW 322
9694: GO 9674
9696: POP
9697: POP
// for i = 0 to 40 do
9698: LD_ADDR_VAR 0 4
9702: PUSH
9703: DOUBLE
9704: LD_INT 0
9706: DEC
9707: ST_TO_ADDR
9708: LD_INT 40
9710: PUSH
9711: FOR_TO
9712: IFFALSE 9733
// SetRestrict ( i , side , false ) ;
9714: LD_VAR 0 4
9718: PPUSH
9719: LD_VAR 0 3
9723: PPUSH
9724: LD_INT 0
9726: PPUSH
9727: CALL_OW 324
9731: GO 9711
9733: POP
9734: POP
// case level of 1 :
9735: LD_VAR 0 1
9739: PUSH
9740: LD_INT 1
9742: DOUBLE
9743: EQUAL
9744: IFTRUE 9748
9746: GO 9901
9748: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9749: LD_INT 35
9751: PPUSH
9752: LD_VAR 0 3
9756: PPUSH
9757: LD_INT 1
9759: PPUSH
9760: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9764: LD_INT 45
9766: PPUSH
9767: LD_VAR 0 3
9771: PPUSH
9772: LD_INT 1
9774: PPUSH
9775: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9779: LD_INT 46
9781: PPUSH
9782: LD_VAR 0 3
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9794: LD_INT 47
9796: PPUSH
9797: LD_VAR 0 3
9801: PPUSH
9802: LD_INT 1
9804: PPUSH
9805: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9809: LD_INT 0
9811: PPUSH
9812: LD_VAR 0 3
9816: PPUSH
9817: LD_INT 1
9819: PPUSH
9820: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9824: LD_INT 2
9826: PPUSH
9827: LD_VAR 0 3
9831: PPUSH
9832: LD_INT 1
9834: PPUSH
9835: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9839: LD_INT 4
9841: PPUSH
9842: LD_VAR 0 3
9846: PPUSH
9847: LD_INT 1
9849: PPUSH
9850: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9854: LD_INT 6
9856: PPUSH
9857: LD_VAR 0 3
9861: PPUSH
9862: LD_INT 1
9864: PPUSH
9865: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9869: LD_INT 29
9871: PPUSH
9872: LD_VAR 0 3
9876: PPUSH
9877: LD_INT 1
9879: PPUSH
9880: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9884: LD_INT 31
9886: PPUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: LD_INT 1
9894: PPUSH
9895: CALL_OW 324
// end ; 2 :
9899: GO 13653
9901: LD_INT 2
9903: DOUBLE
9904: EQUAL
9905: IFTRUE 9909
9907: GO 10107
9909: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9910: LD_INT 35
9912: PPUSH
9913: LD_VAR 0 3
9917: PPUSH
9918: LD_INT 1
9920: PPUSH
9921: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9925: LD_INT 45
9927: PPUSH
9928: LD_VAR 0 3
9932: PPUSH
9933: LD_INT 1
9935: PPUSH
9936: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9940: LD_INT 46
9942: PPUSH
9943: LD_VAR 0 3
9947: PPUSH
9948: LD_INT 1
9950: PPUSH
9951: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9955: LD_INT 47
9957: PPUSH
9958: LD_VAR 0 3
9962: PPUSH
9963: LD_INT 1
9965: PPUSH
9966: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9970: LD_INT 1
9972: PPUSH
9973: LD_VAR 0 3
9977: PPUSH
9978: LD_INT 1
9980: PPUSH
9981: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9985: LD_INT 2
9987: PPUSH
9988: LD_VAR 0 3
9992: PPUSH
9993: LD_INT 1
9995: PPUSH
9996: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10000: LD_INT 11
10002: PPUSH
10003: LD_VAR 0 3
10007: PPUSH
10008: LD_INT 1
10010: PPUSH
10011: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10015: LD_INT 0
10017: PPUSH
10018: LD_VAR 0 3
10022: PPUSH
10023: LD_INT 1
10025: PPUSH
10026: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10030: LD_INT 2
10032: PPUSH
10033: LD_VAR 0 3
10037: PPUSH
10038: LD_INT 1
10040: PPUSH
10041: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10045: LD_INT 4
10047: PPUSH
10048: LD_VAR 0 3
10052: PPUSH
10053: LD_INT 1
10055: PPUSH
10056: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10060: LD_INT 6
10062: PPUSH
10063: LD_VAR 0 3
10067: PPUSH
10068: LD_INT 1
10070: PPUSH
10071: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10075: LD_INT 29
10077: PPUSH
10078: LD_VAR 0 3
10082: PPUSH
10083: LD_INT 1
10085: PPUSH
10086: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10090: LD_INT 31
10092: PPUSH
10093: LD_VAR 0 3
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: CALL_OW 324
// end ; 3 :
10105: GO 13653
10107: LD_INT 3
10109: DOUBLE
10110: EQUAL
10111: IFTRUE 10115
10113: GO 10568
10115: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10116: LD_INT 35
10118: PPUSH
10119: LD_VAR 0 3
10123: PPUSH
10124: LD_INT 1
10126: PPUSH
10127: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10131: LD_INT 45
10133: PPUSH
10134: LD_VAR 0 3
10138: PPUSH
10139: LD_INT 1
10141: PPUSH
10142: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10146: LD_INT 46
10148: PPUSH
10149: LD_VAR 0 3
10153: PPUSH
10154: LD_INT 1
10156: PPUSH
10157: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10161: LD_INT 47
10163: PPUSH
10164: LD_VAR 0 3
10168: PPUSH
10169: LD_INT 1
10171: PPUSH
10172: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10176: LD_INT 1
10178: PPUSH
10179: LD_VAR 0 3
10183: PPUSH
10184: LD_INT 1
10186: PPUSH
10187: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10191: LD_INT 2
10193: PPUSH
10194: LD_VAR 0 3
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10206: LD_INT 11
10208: PPUSH
10209: LD_VAR 0 3
10213: PPUSH
10214: LD_INT 1
10216: PPUSH
10217: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10221: LD_INT 48
10223: PPUSH
10224: LD_VAR 0 3
10228: PPUSH
10229: LD_INT 1
10231: PPUSH
10232: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10236: LD_INT 69
10238: PPUSH
10239: LD_VAR 0 3
10243: PPUSH
10244: LD_INT 1
10246: PPUSH
10247: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10251: LD_INT 39
10253: PPUSH
10254: LD_VAR 0 3
10258: PPUSH
10259: LD_INT 1
10261: PPUSH
10262: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10266: LD_INT 43
10268: PPUSH
10269: LD_VAR 0 3
10273: PPUSH
10274: LD_INT 1
10276: PPUSH
10277: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10281: LD_INT 51
10283: PPUSH
10284: LD_VAR 0 3
10288: PPUSH
10289: LD_INT 1
10291: PPUSH
10292: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10296: LD_INT 6
10298: PPUSH
10299: LD_VAR 0 3
10303: PPUSH
10304: LD_INT 1
10306: PPUSH
10307: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10311: LD_INT 0
10313: PPUSH
10314: LD_VAR 0 3
10318: PPUSH
10319: LD_INT 1
10321: PPUSH
10322: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10326: LD_INT 2
10328: PPUSH
10329: LD_VAR 0 3
10333: PPUSH
10334: LD_INT 1
10336: PPUSH
10337: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10341: LD_INT 3
10343: PPUSH
10344: LD_VAR 0 3
10348: PPUSH
10349: LD_INT 1
10351: PPUSH
10352: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10356: LD_INT 4
10358: PPUSH
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_INT 1
10366: PPUSH
10367: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10371: LD_INT 6
10373: PPUSH
10374: LD_VAR 0 3
10378: PPUSH
10379: LD_INT 1
10381: PPUSH
10382: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10386: LD_INT 7
10388: PPUSH
10389: LD_VAR 0 3
10393: PPUSH
10394: LD_INT 1
10396: PPUSH
10397: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10401: LD_INT 8
10403: PPUSH
10404: LD_VAR 0 3
10408: PPUSH
10409: LD_INT 1
10411: PPUSH
10412: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10416: LD_INT 10
10418: PPUSH
10419: LD_VAR 0 3
10423: PPUSH
10424: LD_INT 1
10426: PPUSH
10427: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10431: LD_INT 15
10433: PPUSH
10434: LD_VAR 0 3
10438: PPUSH
10439: LD_INT 1
10441: PPUSH
10442: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10446: LD_INT 16
10448: PPUSH
10449: LD_VAR 0 3
10453: PPUSH
10454: LD_INT 1
10456: PPUSH
10457: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10461: LD_INT 17
10463: PPUSH
10464: LD_VAR 0 3
10468: PPUSH
10469: LD_INT 1
10471: PPUSH
10472: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10476: LD_INT 20
10478: PPUSH
10479: LD_VAR 0 3
10483: PPUSH
10484: LD_INT 1
10486: PPUSH
10487: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10491: LD_INT 26
10493: PPUSH
10494: LD_VAR 0 3
10498: PPUSH
10499: LD_INT 1
10501: PPUSH
10502: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10506: LD_INT 27
10508: PPUSH
10509: LD_VAR 0 3
10513: PPUSH
10514: LD_INT 1
10516: PPUSH
10517: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10521: LD_INT 29
10523: PPUSH
10524: LD_VAR 0 3
10528: PPUSH
10529: LD_INT 1
10531: PPUSH
10532: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10536: LD_INT 31
10538: PPUSH
10539: LD_VAR 0 3
10543: PPUSH
10544: LD_INT 1
10546: PPUSH
10547: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10551: LD_INT 32
10553: PPUSH
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_INT 1
10561: PPUSH
10562: CALL_OW 324
// end ; 4 :
10566: GO 13653
10568: LD_INT 4
10570: DOUBLE
10571: EQUAL
10572: IFTRUE 10576
10574: GO 11524
10576: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10577: LD_INT 35
10579: PPUSH
10580: LD_VAR 0 3
10584: PPUSH
10585: LD_INT 1
10587: PPUSH
10588: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10592: LD_INT 45
10594: PPUSH
10595: LD_VAR 0 3
10599: PPUSH
10600: LD_INT 1
10602: PPUSH
10603: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10607: LD_INT 46
10609: PPUSH
10610: LD_VAR 0 3
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10622: LD_INT 47
10624: PPUSH
10625: LD_VAR 0 3
10629: PPUSH
10630: LD_INT 1
10632: PPUSH
10633: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10637: LD_INT 1
10639: PPUSH
10640: LD_VAR 0 3
10644: PPUSH
10645: LD_INT 1
10647: PPUSH
10648: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10652: LD_INT 2
10654: PPUSH
10655: LD_VAR 0 3
10659: PPUSH
10660: LD_INT 1
10662: PPUSH
10663: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10667: LD_INT 11
10669: PPUSH
10670: LD_VAR 0 3
10674: PPUSH
10675: LD_INT 1
10677: PPUSH
10678: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10682: LD_INT 20
10684: PPUSH
10685: LD_VAR 0 3
10689: PPUSH
10690: LD_INT 1
10692: PPUSH
10693: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10697: LD_INT 48
10699: PPUSH
10700: LD_VAR 0 3
10704: PPUSH
10705: LD_INT 1
10707: PPUSH
10708: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10712: LD_INT 49
10714: PPUSH
10715: LD_VAR 0 3
10719: PPUSH
10720: LD_INT 1
10722: PPUSH
10723: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10727: LD_INT 69
10729: PPUSH
10730: LD_VAR 0 3
10734: PPUSH
10735: LD_INT 1
10737: PPUSH
10738: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10742: LD_INT 39
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: LD_INT 1
10752: PPUSH
10753: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10757: LD_INT 34
10759: PPUSH
10760: LD_VAR 0 3
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10772: LD_INT 42
10774: PPUSH
10775: LD_VAR 0 3
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10787: LD_INT 44
10789: PPUSH
10790: LD_VAR 0 3
10794: PPUSH
10795: LD_INT 1
10797: PPUSH
10798: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10802: LD_INT 41
10804: PPUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: LD_INT 1
10812: PPUSH
10813: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10817: LD_INT 43
10819: PPUSH
10820: LD_VAR 0 3
10824: PPUSH
10825: LD_INT 1
10827: PPUSH
10828: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10832: LD_INT 70
10834: PPUSH
10835: LD_VAR 0 3
10839: PPUSH
10840: LD_INT 1
10842: PPUSH
10843: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10847: LD_INT 51
10849: PPUSH
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_INT 1
10857: PPUSH
10858: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10862: LD_INT 52
10864: PPUSH
10865: LD_VAR 0 3
10869: PPUSH
10870: LD_INT 1
10872: PPUSH
10873: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10877: LD_INT 6
10879: PPUSH
10880: LD_VAR 0 3
10884: PPUSH
10885: LD_INT 1
10887: PPUSH
10888: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10892: LD_INT 15
10894: PPUSH
10895: LD_VAR 0 3
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10907: LD_INT 7
10909: PPUSH
10910: LD_VAR 0 3
10914: PPUSH
10915: LD_INT 1
10917: PPUSH
10918: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10922: LD_INT 12
10924: PPUSH
10925: LD_VAR 0 3
10929: PPUSH
10930: LD_INT 1
10932: PPUSH
10933: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10937: LD_INT 18
10939: PPUSH
10940: LD_VAR 0 3
10944: PPUSH
10945: LD_INT 1
10947: PPUSH
10948: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10952: LD_INT 60
10954: PPUSH
10955: LD_VAR 0 3
10959: PPUSH
10960: LD_INT 1
10962: PPUSH
10963: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10967: LD_INT 9
10969: PPUSH
10970: LD_VAR 0 3
10974: PPUSH
10975: LD_INT 1
10977: PPUSH
10978: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10982: LD_INT 30
10984: PPUSH
10985: LD_VAR 0 3
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10997: LD_INT 37
10999: PPUSH
11000: LD_VAR 0 3
11004: PPUSH
11005: LD_INT 1
11007: PPUSH
11008: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11012: LD_INT 5
11014: PPUSH
11015: LD_VAR 0 3
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11027: LD_INT 66
11029: PPUSH
11030: LD_VAR 0 3
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11042: LD_INT 21
11044: PPUSH
11045: LD_VAR 0 3
11049: PPUSH
11050: LD_INT 1
11052: PPUSH
11053: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11057: LD_INT 22
11059: PPUSH
11060: LD_VAR 0 3
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11072: LD_INT 54
11074: PPUSH
11075: LD_VAR 0 3
11079: PPUSH
11080: LD_INT 1
11082: PPUSH
11083: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11087: LD_INT 0
11089: PPUSH
11090: LD_VAR 0 3
11094: PPUSH
11095: LD_INT 1
11097: PPUSH
11098: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11102: LD_INT 1
11104: PPUSH
11105: LD_VAR 0 3
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11117: LD_INT 2
11119: PPUSH
11120: LD_VAR 0 3
11124: PPUSH
11125: LD_INT 1
11127: PPUSH
11128: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11132: LD_INT 3
11134: PPUSH
11135: LD_VAR 0 3
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11147: LD_INT 4
11149: PPUSH
11150: LD_VAR 0 3
11154: PPUSH
11155: LD_INT 1
11157: PPUSH
11158: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11162: LD_INT 5
11164: PPUSH
11165: LD_VAR 0 3
11169: PPUSH
11170: LD_INT 1
11172: PPUSH
11173: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11177: LD_INT 6
11179: PPUSH
11180: LD_VAR 0 3
11184: PPUSH
11185: LD_INT 1
11187: PPUSH
11188: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11192: LD_INT 7
11194: PPUSH
11195: LD_VAR 0 3
11199: PPUSH
11200: LD_INT 1
11202: PPUSH
11203: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11207: LD_INT 8
11209: PPUSH
11210: LD_VAR 0 3
11214: PPUSH
11215: LD_INT 1
11217: PPUSH
11218: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11222: LD_INT 10
11224: PPUSH
11225: LD_VAR 0 3
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11237: LD_INT 11
11239: PPUSH
11240: LD_VAR 0 3
11244: PPUSH
11245: LD_INT 1
11247: PPUSH
11248: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11252: LD_INT 12
11254: PPUSH
11255: LD_VAR 0 3
11259: PPUSH
11260: LD_INT 1
11262: PPUSH
11263: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11267: LD_INT 13
11269: PPUSH
11270: LD_VAR 0 3
11274: PPUSH
11275: LD_INT 1
11277: PPUSH
11278: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11282: LD_INT 14
11284: PPUSH
11285: LD_VAR 0 3
11289: PPUSH
11290: LD_INT 1
11292: PPUSH
11293: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11297: LD_INT 15
11299: PPUSH
11300: LD_VAR 0 3
11304: PPUSH
11305: LD_INT 1
11307: PPUSH
11308: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11312: LD_INT 16
11314: PPUSH
11315: LD_VAR 0 3
11319: PPUSH
11320: LD_INT 1
11322: PPUSH
11323: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11327: LD_INT 17
11329: PPUSH
11330: LD_VAR 0 3
11334: PPUSH
11335: LD_INT 1
11337: PPUSH
11338: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11342: LD_INT 19
11344: PPUSH
11345: LD_VAR 0 3
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11357: LD_INT 20
11359: PPUSH
11360: LD_VAR 0 3
11364: PPUSH
11365: LD_INT 1
11367: PPUSH
11368: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11372: LD_INT 21
11374: PPUSH
11375: LD_VAR 0 3
11379: PPUSH
11380: LD_INT 1
11382: PPUSH
11383: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11387: LD_INT 23
11389: PPUSH
11390: LD_VAR 0 3
11394: PPUSH
11395: LD_INT 1
11397: PPUSH
11398: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11402: LD_INT 26
11404: PPUSH
11405: LD_VAR 0 3
11409: PPUSH
11410: LD_INT 1
11412: PPUSH
11413: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11417: LD_INT 27
11419: PPUSH
11420: LD_VAR 0 3
11424: PPUSH
11425: LD_INT 1
11427: PPUSH
11428: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11432: LD_INT 28
11434: PPUSH
11435: LD_VAR 0 3
11439: PPUSH
11440: LD_INT 1
11442: PPUSH
11443: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11447: LD_INT 29
11449: PPUSH
11450: LD_VAR 0 3
11454: PPUSH
11455: LD_INT 1
11457: PPUSH
11458: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11462: LD_INT 30
11464: PPUSH
11465: LD_VAR 0 3
11469: PPUSH
11470: LD_INT 1
11472: PPUSH
11473: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11477: LD_INT 31
11479: PPUSH
11480: LD_VAR 0 3
11484: PPUSH
11485: LD_INT 1
11487: PPUSH
11488: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11492: LD_INT 32
11494: PPUSH
11495: LD_VAR 0 3
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11507: LD_INT 36
11509: PPUSH
11510: LD_VAR 0 3
11514: PPUSH
11515: LD_INT 1
11517: PPUSH
11518: CALL_OW 324
// end ; 5 :
11522: GO 13653
11524: LD_INT 5
11526: DOUBLE
11527: EQUAL
11528: IFTRUE 11532
11530: GO 12645
11532: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11533: LD_INT 35
11535: PPUSH
11536: LD_VAR 0 3
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11548: LD_INT 45
11550: PPUSH
11551: LD_VAR 0 3
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11563: LD_INT 46
11565: PPUSH
11566: LD_VAR 0 3
11570: PPUSH
11571: LD_INT 1
11573: PPUSH
11574: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11578: LD_INT 47
11580: PPUSH
11581: LD_VAR 0 3
11585: PPUSH
11586: LD_INT 1
11588: PPUSH
11589: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11593: LD_INT 1
11595: PPUSH
11596: LD_VAR 0 3
11600: PPUSH
11601: LD_INT 1
11603: PPUSH
11604: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11608: LD_INT 2
11610: PPUSH
11611: LD_VAR 0 3
11615: PPUSH
11616: LD_INT 1
11618: PPUSH
11619: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11623: LD_INT 11
11625: PPUSH
11626: LD_VAR 0 3
11630: PPUSH
11631: LD_INT 1
11633: PPUSH
11634: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11638: LD_INT 20
11640: PPUSH
11641: LD_VAR 0 3
11645: PPUSH
11646: LD_INT 1
11648: PPUSH
11649: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11653: LD_INT 48
11655: PPUSH
11656: LD_VAR 0 3
11660: PPUSH
11661: LD_INT 1
11663: PPUSH
11664: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11668: LD_INT 49
11670: PPUSH
11671: LD_VAR 0 3
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11683: LD_INT 69
11685: PPUSH
11686: LD_VAR 0 3
11690: PPUSH
11691: LD_INT 1
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11698: LD_INT 39
11700: PPUSH
11701: LD_VAR 0 3
11705: PPUSH
11706: LD_INT 1
11708: PPUSH
11709: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11713: LD_INT 34
11715: PPUSH
11716: LD_VAR 0 3
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11728: LD_INT 42
11730: PPUSH
11731: LD_VAR 0 3
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11743: LD_INT 44
11745: PPUSH
11746: LD_VAR 0 3
11750: PPUSH
11751: LD_INT 1
11753: PPUSH
11754: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11758: LD_INT 41
11760: PPUSH
11761: LD_VAR 0 3
11765: PPUSH
11766: LD_INT 1
11768: PPUSH
11769: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11773: LD_INT 40
11775: PPUSH
11776: LD_VAR 0 3
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11788: LD_INT 43
11790: PPUSH
11791: LD_VAR 0 3
11795: PPUSH
11796: LD_INT 1
11798: PPUSH
11799: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11803: LD_INT 70
11805: PPUSH
11806: LD_VAR 0 3
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11818: LD_INT 51
11820: PPUSH
11821: LD_VAR 0 3
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11833: LD_INT 52
11835: PPUSH
11836: LD_VAR 0 3
11840: PPUSH
11841: LD_INT 1
11843: PPUSH
11844: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11848: LD_INT 6
11850: PPUSH
11851: LD_VAR 0 3
11855: PPUSH
11856: LD_INT 1
11858: PPUSH
11859: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11863: LD_INT 15
11865: PPUSH
11866: LD_VAR 0 3
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11878: LD_INT 7
11880: PPUSH
11881: LD_VAR 0 3
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11893: LD_INT 12
11895: PPUSH
11896: LD_VAR 0 3
11900: PPUSH
11901: LD_INT 1
11903: PPUSH
11904: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11908: LD_INT 17
11910: PPUSH
11911: LD_VAR 0 3
11915: PPUSH
11916: LD_INT 1
11918: PPUSH
11919: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11923: LD_INT 18
11925: PPUSH
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_INT 1
11933: PPUSH
11934: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11938: LD_INT 60
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: LD_INT 1
11948: PPUSH
11949: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11953: LD_INT 32
11955: PPUSH
11956: LD_VAR 0 3
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11968: LD_INT 9
11970: PPUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_INT 1
11978: PPUSH
11979: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11983: LD_INT 57
11985: PPUSH
11986: LD_VAR 0 3
11990: PPUSH
11991: LD_INT 1
11993: PPUSH
11994: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11998: LD_INT 30
12000: PPUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: LD_INT 1
12008: PPUSH
12009: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12013: LD_INT 37
12015: PPUSH
12016: LD_VAR 0 3
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12028: LD_INT 63
12030: PPUSH
12031: LD_VAR 0 3
12035: PPUSH
12036: LD_INT 1
12038: PPUSH
12039: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12043: LD_INT 3
12045: PPUSH
12046: LD_VAR 0 3
12050: PPUSH
12051: LD_INT 1
12053: PPUSH
12054: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12058: LD_INT 4
12060: PPUSH
12061: LD_VAR 0 3
12065: PPUSH
12066: LD_INT 1
12068: PPUSH
12069: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12073: LD_INT 5
12075: PPUSH
12076: LD_VAR 0 3
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12088: LD_INT 66
12090: PPUSH
12091: LD_VAR 0 3
12095: PPUSH
12096: LD_INT 1
12098: PPUSH
12099: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12103: LD_INT 21
12105: PPUSH
12106: LD_VAR 0 3
12110: PPUSH
12111: LD_INT 1
12113: PPUSH
12114: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12118: LD_INT 22
12120: PPUSH
12121: LD_VAR 0 3
12125: PPUSH
12126: LD_INT 1
12128: PPUSH
12129: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12133: LD_INT 19
12135: PPUSH
12136: LD_VAR 0 3
12140: PPUSH
12141: LD_INT 1
12143: PPUSH
12144: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12148: LD_INT 54
12150: PPUSH
12151: LD_VAR 0 3
12155: PPUSH
12156: LD_INT 1
12158: PPUSH
12159: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12163: LD_INT 55
12165: PPUSH
12166: LD_VAR 0 3
12170: PPUSH
12171: LD_INT 1
12173: PPUSH
12174: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12178: LD_INT 0
12180: PPUSH
12181: LD_VAR 0 3
12185: PPUSH
12186: LD_INT 1
12188: PPUSH
12189: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12193: LD_INT 1
12195: PPUSH
12196: LD_VAR 0 3
12200: PPUSH
12201: LD_INT 1
12203: PPUSH
12204: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12208: LD_INT 2
12210: PPUSH
12211: LD_VAR 0 3
12215: PPUSH
12216: LD_INT 1
12218: PPUSH
12219: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12223: LD_INT 3
12225: PPUSH
12226: LD_VAR 0 3
12230: PPUSH
12231: LD_INT 1
12233: PPUSH
12234: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12238: LD_INT 4
12240: PPUSH
12241: LD_VAR 0 3
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12253: LD_INT 5
12255: PPUSH
12256: LD_VAR 0 3
12260: PPUSH
12261: LD_INT 1
12263: PPUSH
12264: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12268: LD_INT 6
12270: PPUSH
12271: LD_VAR 0 3
12275: PPUSH
12276: LD_INT 1
12278: PPUSH
12279: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12283: LD_INT 7
12285: PPUSH
12286: LD_VAR 0 3
12290: PPUSH
12291: LD_INT 1
12293: PPUSH
12294: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12298: LD_INT 8
12300: PPUSH
12301: LD_VAR 0 3
12305: PPUSH
12306: LD_INT 1
12308: PPUSH
12309: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12313: LD_INT 10
12315: PPUSH
12316: LD_VAR 0 3
12320: PPUSH
12321: LD_INT 1
12323: PPUSH
12324: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12328: LD_INT 11
12330: PPUSH
12331: LD_VAR 0 3
12335: PPUSH
12336: LD_INT 1
12338: PPUSH
12339: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12343: LD_INT 12
12345: PPUSH
12346: LD_VAR 0 3
12350: PPUSH
12351: LD_INT 1
12353: PPUSH
12354: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12358: LD_INT 13
12360: PPUSH
12361: LD_VAR 0 3
12365: PPUSH
12366: LD_INT 1
12368: PPUSH
12369: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12373: LD_INT 14
12375: PPUSH
12376: LD_VAR 0 3
12380: PPUSH
12381: LD_INT 1
12383: PPUSH
12384: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12388: LD_INT 15
12390: PPUSH
12391: LD_VAR 0 3
12395: PPUSH
12396: LD_INT 1
12398: PPUSH
12399: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12403: LD_INT 16
12405: PPUSH
12406: LD_VAR 0 3
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12418: LD_INT 17
12420: PPUSH
12421: LD_VAR 0 3
12425: PPUSH
12426: LD_INT 1
12428: PPUSH
12429: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12433: LD_INT 18
12435: PPUSH
12436: LD_VAR 0 3
12440: PPUSH
12441: LD_INT 1
12443: PPUSH
12444: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12448: LD_INT 19
12450: PPUSH
12451: LD_VAR 0 3
12455: PPUSH
12456: LD_INT 1
12458: PPUSH
12459: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12463: LD_INT 20
12465: PPUSH
12466: LD_VAR 0 3
12470: PPUSH
12471: LD_INT 1
12473: PPUSH
12474: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12478: LD_INT 21
12480: PPUSH
12481: LD_VAR 0 3
12485: PPUSH
12486: LD_INT 1
12488: PPUSH
12489: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12493: LD_INT 23
12495: PPUSH
12496: LD_VAR 0 3
12500: PPUSH
12501: LD_INT 1
12503: PPUSH
12504: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12508: LD_INT 26
12510: PPUSH
12511: LD_VAR 0 3
12515: PPUSH
12516: LD_INT 1
12518: PPUSH
12519: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12523: LD_INT 27
12525: PPUSH
12526: LD_VAR 0 3
12530: PPUSH
12531: LD_INT 1
12533: PPUSH
12534: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12538: LD_INT 28
12540: PPUSH
12541: LD_VAR 0 3
12545: PPUSH
12546: LD_INT 1
12548: PPUSH
12549: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12553: LD_INT 29
12555: PPUSH
12556: LD_VAR 0 3
12560: PPUSH
12561: LD_INT 1
12563: PPUSH
12564: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12568: LD_INT 30
12570: PPUSH
12571: LD_VAR 0 3
12575: PPUSH
12576: LD_INT 1
12578: PPUSH
12579: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12583: LD_INT 31
12585: PPUSH
12586: LD_VAR 0 3
12590: PPUSH
12591: LD_INT 1
12593: PPUSH
12594: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12598: LD_INT 32
12600: PPUSH
12601: LD_VAR 0 3
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12613: LD_INT 33
12615: PPUSH
12616: LD_VAR 0 3
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12628: LD_INT 36
12630: PPUSH
12631: LD_VAR 0 3
12635: PPUSH
12636: LD_INT 1
12638: PPUSH
12639: CALL_OW 324
// end ; 6 :
12643: GO 13653
12645: LD_INT 6
12647: DOUBLE
12648: EQUAL
12649: IFTRUE 12653
12651: GO 13578
12653: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12654: LD_INT 35
12656: PPUSH
12657: LD_VAR 0 3
12661: PPUSH
12662: LD_INT 1
12664: PPUSH
12665: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12669: LD_INT 45
12671: PPUSH
12672: LD_VAR 0 3
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12684: LD_INT 46
12686: PPUSH
12687: LD_VAR 0 3
12691: PPUSH
12692: LD_INT 1
12694: PPUSH
12695: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12699: LD_INT 47
12701: PPUSH
12702: LD_VAR 0 3
12706: PPUSH
12707: LD_INT 1
12709: PPUSH
12710: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12714: LD_INT 1
12716: PPUSH
12717: LD_VAR 0 3
12721: PPUSH
12722: LD_INT 1
12724: PPUSH
12725: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12729: LD_INT 2
12731: PPUSH
12732: LD_VAR 0 3
12736: PPUSH
12737: LD_INT 1
12739: PPUSH
12740: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12744: LD_INT 11
12746: PPUSH
12747: LD_VAR 0 3
12751: PPUSH
12752: LD_INT 1
12754: PPUSH
12755: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12759: LD_INT 20
12761: PPUSH
12762: LD_VAR 0 3
12766: PPUSH
12767: LD_INT 1
12769: PPUSH
12770: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12774: LD_INT 48
12776: PPUSH
12777: LD_VAR 0 3
12781: PPUSH
12782: LD_INT 1
12784: PPUSH
12785: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12789: LD_INT 49
12791: PPUSH
12792: LD_VAR 0 3
12796: PPUSH
12797: LD_INT 1
12799: PPUSH
12800: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12804: LD_INT 50
12806: PPUSH
12807: LD_VAR 0 3
12811: PPUSH
12812: LD_INT 1
12814: PPUSH
12815: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12819: LD_INT 69
12821: PPUSH
12822: LD_VAR 0 3
12826: PPUSH
12827: LD_INT 1
12829: PPUSH
12830: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12834: LD_INT 39
12836: PPUSH
12837: LD_VAR 0 3
12841: PPUSH
12842: LD_INT 1
12844: PPUSH
12845: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12849: LD_INT 34
12851: PPUSH
12852: LD_VAR 0 3
12856: PPUSH
12857: LD_INT 1
12859: PPUSH
12860: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12864: LD_INT 42
12866: PPUSH
12867: LD_VAR 0 3
12871: PPUSH
12872: LD_INT 1
12874: PPUSH
12875: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12879: LD_INT 44
12881: PPUSH
12882: LD_VAR 0 3
12886: PPUSH
12887: LD_INT 1
12889: PPUSH
12890: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12894: LD_INT 41
12896: PPUSH
12897: LD_VAR 0 3
12901: PPUSH
12902: LD_INT 1
12904: PPUSH
12905: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12909: LD_INT 13
12911: PPUSH
12912: LD_VAR 0 3
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12924: LD_INT 40
12926: PPUSH
12927: LD_VAR 0 3
12931: PPUSH
12932: LD_INT 1
12934: PPUSH
12935: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12939: LD_INT 43
12941: PPUSH
12942: LD_VAR 0 3
12946: PPUSH
12947: LD_INT 1
12949: PPUSH
12950: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12954: LD_INT 70
12956: PPUSH
12957: LD_VAR 0 3
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12969: LD_INT 23
12971: PPUSH
12972: LD_VAR 0 3
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12984: LD_INT 51
12986: PPUSH
12987: LD_VAR 0 3
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12999: LD_INT 52
13001: PPUSH
13002: LD_VAR 0 3
13006: PPUSH
13007: LD_INT 1
13009: PPUSH
13010: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13014: LD_INT 6
13016: PPUSH
13017: LD_VAR 0 3
13021: PPUSH
13022: LD_INT 1
13024: PPUSH
13025: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13029: LD_INT 15
13031: PPUSH
13032: LD_VAR 0 3
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13044: LD_INT 7
13046: PPUSH
13047: LD_VAR 0 3
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13059: LD_INT 12
13061: PPUSH
13062: LD_VAR 0 3
13066: PPUSH
13067: LD_INT 1
13069: PPUSH
13070: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13074: LD_INT 10
13076: PPUSH
13077: LD_VAR 0 3
13081: PPUSH
13082: LD_INT 1
13084: PPUSH
13085: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13089: LD_INT 17
13091: PPUSH
13092: LD_VAR 0 3
13096: PPUSH
13097: LD_INT 1
13099: PPUSH
13100: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13104: LD_INT 18
13106: PPUSH
13107: LD_VAR 0 3
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13119: LD_INT 60
13121: PPUSH
13122: LD_VAR 0 3
13126: PPUSH
13127: LD_INT 1
13129: PPUSH
13130: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13134: LD_INT 61
13136: PPUSH
13137: LD_VAR 0 3
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13149: LD_INT 32
13151: PPUSH
13152: LD_VAR 0 3
13156: PPUSH
13157: LD_INT 1
13159: PPUSH
13160: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13164: LD_INT 27
13166: PPUSH
13167: LD_VAR 0 3
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13179: LD_INT 36
13181: PPUSH
13182: LD_VAR 0 3
13186: PPUSH
13187: LD_INT 1
13189: PPUSH
13190: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13194: LD_INT 33
13196: PPUSH
13197: LD_VAR 0 3
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13209: LD_INT 9
13211: PPUSH
13212: LD_VAR 0 3
13216: PPUSH
13217: LD_INT 1
13219: PPUSH
13220: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13224: LD_INT 38
13226: PPUSH
13227: LD_VAR 0 3
13231: PPUSH
13232: LD_INT 1
13234: PPUSH
13235: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13239: LD_INT 57
13241: PPUSH
13242: LD_VAR 0 3
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13254: LD_INT 58
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: LD_INT 1
13264: PPUSH
13265: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13269: LD_INT 28
13271: PPUSH
13272: LD_VAR 0 3
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13284: LD_INT 29
13286: PPUSH
13287: LD_VAR 0 3
13291: PPUSH
13292: LD_INT 1
13294: PPUSH
13295: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13299: LD_INT 30
13301: PPUSH
13302: LD_VAR 0 3
13306: PPUSH
13307: LD_INT 1
13309: PPUSH
13310: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13314: LD_INT 37
13316: PPUSH
13317: LD_VAR 0 3
13321: PPUSH
13322: LD_INT 1
13324: PPUSH
13325: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13329: LD_INT 63
13331: PPUSH
13332: LD_VAR 0 3
13336: PPUSH
13337: LD_INT 1
13339: PPUSH
13340: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13344: LD_INT 64
13346: PPUSH
13347: LD_VAR 0 3
13351: PPUSH
13352: LD_INT 1
13354: PPUSH
13355: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13359: LD_INT 3
13361: PPUSH
13362: LD_VAR 0 3
13366: PPUSH
13367: LD_INT 1
13369: PPUSH
13370: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13374: LD_INT 4
13376: PPUSH
13377: LD_VAR 0 3
13381: PPUSH
13382: LD_INT 1
13384: PPUSH
13385: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13389: LD_INT 5
13391: PPUSH
13392: LD_VAR 0 3
13396: PPUSH
13397: LD_INT 1
13399: PPUSH
13400: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13404: LD_INT 8
13406: PPUSH
13407: LD_VAR 0 3
13411: PPUSH
13412: LD_INT 1
13414: PPUSH
13415: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13419: LD_INT 66
13421: PPUSH
13422: LD_VAR 0 3
13426: PPUSH
13427: LD_INT 1
13429: PPUSH
13430: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13434: LD_INT 67
13436: PPUSH
13437: LD_VAR 0 3
13441: PPUSH
13442: LD_INT 1
13444: PPUSH
13445: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13449: LD_INT 21
13451: PPUSH
13452: LD_VAR 0 3
13456: PPUSH
13457: LD_INT 1
13459: PPUSH
13460: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13464: LD_INT 22
13466: PPUSH
13467: LD_VAR 0 3
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13479: LD_INT 19
13481: PPUSH
13482: LD_VAR 0 3
13486: PPUSH
13487: LD_INT 1
13489: PPUSH
13490: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13494: LD_INT 26
13496: PPUSH
13497: LD_VAR 0 3
13501: PPUSH
13502: LD_INT 1
13504: PPUSH
13505: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13509: LD_INT 54
13511: PPUSH
13512: LD_VAR 0 3
13516: PPUSH
13517: LD_INT 1
13519: PPUSH
13520: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13524: LD_INT 55
13526: PPUSH
13527: LD_VAR 0 3
13531: PPUSH
13532: LD_INT 1
13534: PPUSH
13535: CALL_OW 322
// for i = 0 to 39 do
13539: LD_ADDR_VAR 0 4
13543: PUSH
13544: DOUBLE
13545: LD_INT 0
13547: DEC
13548: ST_TO_ADDR
13549: LD_INT 39
13551: PUSH
13552: FOR_TO
13553: IFFALSE 13574
// SetRestrict ( i , side , true ) ;
13555: LD_VAR 0 4
13559: PPUSH
13560: LD_VAR 0 3
13564: PPUSH
13565: LD_INT 1
13567: PPUSH
13568: CALL_OW 324
13572: GO 13552
13574: POP
13575: POP
// end ; else
13576: GO 13653
13578: POP
// begin for i = 1 to 73 do
13579: LD_ADDR_VAR 0 4
13583: PUSH
13584: DOUBLE
13585: LD_INT 1
13587: DEC
13588: ST_TO_ADDR
13589: LD_INT 73
13591: PUSH
13592: FOR_TO
13593: IFFALSE 13614
// SetTech ( i , side , state_enabled ) ;
13595: LD_VAR 0 4
13599: PPUSH
13600: LD_VAR 0 3
13604: PPUSH
13605: LD_INT 1
13607: PPUSH
13608: CALL_OW 322
13612: GO 13592
13614: POP
13615: POP
// for i = 0 to 39 do
13616: LD_ADDR_VAR 0 4
13620: PUSH
13621: DOUBLE
13622: LD_INT 0
13624: DEC
13625: ST_TO_ADDR
13626: LD_INT 39
13628: PUSH
13629: FOR_TO
13630: IFFALSE 13651
// SetRestrict ( i , side , true ) ;
13632: LD_VAR 0 4
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: CALL_OW 324
13649: GO 13629
13651: POP
13652: POP
// end ; end ; end ;
13653: GO 9658
13655: POP
13656: POP
// end ; end_of_file
13657: LD_VAR 0 2
13661: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13662: LD_INT 0
13664: PPUSH
13665: PPUSH
13666: PPUSH
13667: PPUSH
13668: PPUSH
13669: PPUSH
13670: PPUSH
13671: PPUSH
13672: PPUSH
// for i := 1 to 8 do
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: DOUBLE
13679: LD_INT 1
13681: DEC
13682: ST_TO_ADDR
13683: LD_INT 8
13685: PUSH
13686: FOR_TO
13687: IFFALSE 14071
// begin if Side_Positions [ i ] then
13689: LD_EXP 40
13693: PUSH
13694: LD_VAR 0 2
13698: ARRAY
13699: IFFALSE 14069
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13701: LD_ADDR_VAR 0 7
13705: PUSH
13706: LD_INT 22
13708: PUSH
13709: LD_VAR 0 2
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 21
13720: PUSH
13721: LD_INT 1
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 69
13736: PUSH
13737: LD_INT 0
13739: PLUS
13740: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13741: LD_ADDR_VAR 0 9
13745: PUSH
13746: LD_INT 22
13748: PUSH
13749: LD_VAR 0 2
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: LD_INT 30
13763: PUSH
13764: LD_INT 0
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 30
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PPUSH
13790: CALL_OW 69
13794: ST_TO_ADDR
// crates := 0 ;
13795: LD_ADDR_VAR 0 4
13799: PUSH
13800: LD_INT 0
13802: ST_TO_ADDR
// oil := 0 ;
13803: LD_ADDR_VAR 0 5
13807: PUSH
13808: LD_INT 0
13810: ST_TO_ADDR
// sib := 0 ;
13811: LD_ADDR_VAR 0 6
13815: PUSH
13816: LD_INT 0
13818: ST_TO_ADDR
// if bases then
13819: LD_VAR 0 9
13823: IFFALSE 13929
// begin for j in bases do
13825: LD_ADDR_VAR 0 3
13829: PUSH
13830: LD_VAR 0 9
13834: PUSH
13835: FOR_IN
13836: IFFALSE 13927
// begin base := GetBase ( j ) ;
13838: LD_ADDR_VAR 0 8
13842: PUSH
13843: LD_VAR 0 3
13847: PPUSH
13848: CALL_OW 274
13852: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13853: LD_ADDR_VAR 0 4
13857: PUSH
13858: LD_VAR 0 4
13862: PUSH
13863: LD_VAR 0 8
13867: PPUSH
13868: LD_INT 1
13870: PPUSH
13871: CALL_OW 275
13875: PLUS
13876: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13877: LD_ADDR_VAR 0 5
13881: PUSH
13882: LD_VAR 0 5
13886: PUSH
13887: LD_VAR 0 8
13891: PPUSH
13892: LD_INT 2
13894: PPUSH
13895: CALL_OW 275
13899: PLUS
13900: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13901: LD_ADDR_VAR 0 6
13905: PUSH
13906: LD_VAR 0 6
13910: PUSH
13911: LD_VAR 0 8
13915: PPUSH
13916: LD_INT 3
13918: PPUSH
13919: CALL_OW 275
13923: PLUS
13924: ST_TO_ADDR
// end ;
13925: GO 13835
13927: POP
13928: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13929: LD_STRING setSpecText(
13931: PUSH
13932: LD_VAR 0 2
13936: STR
13937: PUSH
13938: LD_STRING ,
13940: STR
13941: PUSH
13942: LD_INT 2
13944: STR
13945: PUSH
13946: LD_STRING ,
13948: STR
13949: PUSH
13950: LD_VAR 0 4
13954: STR
13955: PUSH
13956: LD_STRING )
13958: STR
13959: PPUSH
13960: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13964: LD_STRING setSpecText(
13966: PUSH
13967: LD_VAR 0 2
13971: STR
13972: PUSH
13973: LD_STRING ,
13975: STR
13976: PUSH
13977: LD_INT 3
13979: STR
13980: PUSH
13981: LD_STRING ,
13983: STR
13984: PUSH
13985: LD_VAR 0 5
13989: STR
13990: PUSH
13991: LD_STRING )
13993: STR
13994: PPUSH
13995: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13999: LD_STRING setSpecText(
14001: PUSH
14002: LD_VAR 0 2
14006: STR
14007: PUSH
14008: LD_STRING ,
14010: STR
14011: PUSH
14012: LD_INT 4
14014: STR
14015: PUSH
14016: LD_STRING ,
14018: STR
14019: PUSH
14020: LD_VAR 0 6
14024: STR
14025: PUSH
14026: LD_STRING )
14028: STR
14029: PPUSH
14030: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14034: LD_STRING setSpecText(
14036: PUSH
14037: LD_VAR 0 2
14041: STR
14042: PUSH
14043: LD_STRING ,
14045: STR
14046: PUSH
14047: LD_INT 5
14049: STR
14050: PUSH
14051: LD_STRING ,
14053: STR
14054: PUSH
14055: LD_VAR 0 7
14059: STR
14060: PUSH
14061: LD_STRING )
14063: STR
14064: PPUSH
14065: CALL_OW 559
// end ; end ;
14069: GO 13686
14071: POP
14072: POP
// end ;
14073: LD_VAR 0 1
14077: RET
// every 0 0$1 do
14078: GO 14080
14080: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14081: LD_STRING setSpecLogoNumber(
14083: PUSH
14084: LD_INT 2
14086: STR
14087: PUSH
14088: LD_STRING ,
14090: STR
14091: PUSH
14092: LD_INT 1
14094: STR
14095: PUSH
14096: LD_STRING )
14098: STR
14099: PPUSH
14100: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14104: LD_STRING setSpecLogoNumber(
14106: PUSH
14107: LD_INT 3
14109: STR
14110: PUSH
14111: LD_STRING ,
14113: STR
14114: PUSH
14115: LD_INT 2
14117: STR
14118: PUSH
14119: LD_STRING )
14121: STR
14122: PPUSH
14123: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14127: LD_STRING setSpecLogoNumber(
14129: PUSH
14130: LD_INT 4
14132: STR
14133: PUSH
14134: LD_STRING ,
14136: STR
14137: PUSH
14138: LD_INT 3
14140: STR
14141: PUSH
14142: LD_STRING )
14144: STR
14145: PPUSH
14146: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14150: LD_STRING setSpecLogoNumber(
14152: PUSH
14153: LD_INT 5
14155: STR
14156: PUSH
14157: LD_STRING ,
14159: STR
14160: PUSH
14161: LD_INT 4
14163: STR
14164: PUSH
14165: LD_STRING )
14167: STR
14168: PPUSH
14169: CALL_OW 559
// end ;
14173: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14174: LD_INT 2
14176: PUSH
14177: LD_INT 30
14179: PUSH
14180: LD_INT 0
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 30
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: PPUSH
14202: CALL_OW 69
14206: IFFALSE 14216
14208: GO 14210
14210: DISABLE
// begin enable ;
14211: ENABLE
// UpdateSpectatorBar ;
14212: CALL 13662 0 0
// end ; end_of_file
14216: END
// var respawn , inqueue ; export function init_respawning ; begin
14217: LD_INT 0
14219: PPUSH
// respawn := Rand ( 1 , 8 ) ;
14220: LD_ADDR_LOC 13
14224: PUSH
14225: LD_INT 1
14227: PPUSH
14228: LD_INT 8
14230: PPUSH
14231: CALL_OW 12
14235: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14236: LD_ADDR_LOC 14
14240: PUSH
14241: LD_INT 0
14243: PUSH
14244: LD_INT 0
14246: PUSH
14247: LD_INT 0
14249: PUSH
14250: LD_INT 0
14252: PUSH
14253: LD_INT 0
14255: PUSH
14256: LD_INT 0
14258: PUSH
14259: LD_INT 0
14261: PUSH
14262: LD_INT 0
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: ST_TO_ADDR
// end ;
14275: LD_VAR 0 1
14279: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14280: GO 14282
14282: DISABLE
14283: LD_INT 0
14285: PPUSH
14286: PPUSH
14287: PPUSH
// begin if respawning_time_max = 0 then
14288: LD_EXP 26
14292: PUSH
14293: LD_INT 0
14295: EQUAL
14296: IFFALSE 14300
// exit ;
14298: GO 14708
// if respawn = 8 then
14300: LD_LOC 13
14304: PUSH
14305: LD_INT 8
14307: EQUAL
14308: IFFALSE 14320
// respawn := 1 else
14310: LD_ADDR_LOC 13
14314: PUSH
14315: LD_INT 1
14317: ST_TO_ADDR
14318: GO 14334
// respawn := respawn + 1 ;
14320: LD_ADDR_LOC 13
14324: PUSH
14325: LD_LOC 13
14329: PUSH
14330: LD_INT 1
14332: PLUS
14333: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14334: LD_EXP 40
14338: PUSH
14339: LD_LOC 13
14343: ARRAY
14344: PUSH
14345: LD_LOC 14
14349: PUSH
14350: LD_LOC 13
14354: ARRAY
14355: NOT
14356: AND
14357: IFFALSE 14707
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14359: LD_ADDR_VAR 0 1
14363: PUSH
14364: LD_INT 21
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PUSH
14374: LD_INT 22
14376: PUSH
14377: LD_LOC 13
14381: PUSH
14382: EMPTY
14383: LIST
14384: LIST
14385: PUSH
14386: LD_INT 3
14388: PUSH
14389: LD_INT 23
14391: PUSH
14392: LD_INT 0
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: PPUSH
14405: CALL_OW 69
14409: ST_TO_ADDR
// if n < number_of_people then
14410: LD_VAR 0 1
14414: PUSH
14415: LD_EXP 19
14419: LESS
14420: IFFALSE 14704
// begin aktresp := respawn ;
14422: LD_ADDR_VAR 0 3
14426: PUSH
14427: LD_LOC 13
14431: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14432: LD_ADDR_LOC 14
14436: PUSH
14437: LD_LOC 14
14441: PPUSH
14442: LD_VAR 0 3
14446: PPUSH
14447: LD_INT 1
14449: PPUSH
14450: CALL_OW 1
14454: ST_TO_ADDR
// enable ;
14455: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14456: LD_EXP 25
14460: PPUSH
14461: LD_EXP 26
14465: PPUSH
14466: CALL_OW 12
14470: PPUSH
14471: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14475: LD_ADDR_LOC 14
14479: PUSH
14480: LD_LOC 14
14484: PPUSH
14485: LD_VAR 0 3
14489: PPUSH
14490: LD_INT 0
14492: PPUSH
14493: CALL_OW 1
14497: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14498: LD_ADDR_VAR 0 2
14502: PUSH
14503: LD_INT 21
14505: PUSH
14506: LD_INT 3
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 2
14515: PUSH
14516: LD_INT 30
14518: PUSH
14519: LD_INT 0
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 30
14528: PUSH
14529: LD_INT 1
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 50
14543: PUSH
14544: EMPTY
14545: LIST
14546: PUSH
14547: LD_INT 22
14549: PUSH
14550: LD_VAR 0 3
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: PPUSH
14565: CALL_OW 69
14569: ST_TO_ADDR
// if dep = 0 then
14570: LD_VAR 0 2
14574: PUSH
14575: LD_INT 0
14577: EQUAL
14578: IFFALSE 14582
// exit ;
14580: GO 14708
// hc_name :=  ;
14582: LD_ADDR_OWVAR 26
14586: PUSH
14587: LD_STRING 
14589: ST_TO_ADDR
// hc_importance := 0 ;
14590: LD_ADDR_OWVAR 32
14594: PUSH
14595: LD_INT 0
14597: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14598: LD_INT 0
14600: PPUSH
14601: LD_INT 0
14603: PPUSH
14604: LD_EXP 20
14608: PUSH
14609: LD_INT 2
14611: DIV
14612: PPUSH
14613: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14617: LD_ADDR_OWVAR 21
14621: PUSH
14622: LD_EXP 41
14626: PUSH
14627: LD_VAR 0 3
14631: ARRAY
14632: ST_TO_ADDR
// uc_side := aktresp ;
14633: LD_ADDR_OWVAR 20
14637: PUSH
14638: LD_VAR 0 3
14642: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14643: LD_ADDR_VAR 0 2
14647: PUSH
14648: LD_VAR 0 2
14652: PUSH
14653: LD_INT 1
14655: PPUSH
14656: LD_VAR 0 2
14660: PPUSH
14661: CALL_OW 12
14665: ARRAY
14666: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14667: CALL_OW 44
14671: PPUSH
14672: LD_VAR 0 2
14676: PPUSH
14677: CALL_OW 250
14681: PPUSH
14682: LD_VAR 0 2
14686: PPUSH
14687: CALL_OW 251
14691: PPUSH
14692: LD_INT 7
14694: PPUSH
14695: LD_INT 1
14697: PPUSH
14698: CALL_OW 50
// end else
14702: GO 14705
// enable ;
14704: ENABLE
// end else
14705: GO 14708
// enable ;
14707: ENABLE
// end ;
14708: PPOPN 3
14710: END
