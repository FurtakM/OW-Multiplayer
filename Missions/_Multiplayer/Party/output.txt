// export gametype , def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_oil_deposits , def_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_cost , def_cost_decreasing ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , cost , decr_cost_time , real_cost , oil_dep , sib_dep , amount_of_apemen , siberite_bomb_Delay ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game ; export depot_def , breastworks_def , start_def , deposits_def , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var sides , s1 , s2 , s3 , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
// if MultiPlayer then
   8: LD_OWVAR 4
  12: IFFALSE 86
// begin gametype = mp_game_type ;
  14: LD_ADDR_EXP 1
  18: PUSH
  19: LD_OWVAR 6
  23: ST_TO_ADDR
// Player_Side = mp_player_side ;
  24: LD_ADDR_EXP 36
  28: PUSH
  29: LD_OWVAR 7
  33: ST_TO_ADDR
// Player_Team = mp_player_team ;
  34: LD_ADDR_EXP 37
  38: PUSH
  39: LD_OWVAR 8
  43: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  44: LD_ADDR_EXP 40
  48: PUSH
  49: LD_OWVAR 17
  53: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  54: LD_ADDR_EXP 38
  58: PUSH
  59: LD_OWVAR 15
  63: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  64: LD_ADDR_EXP 41
  68: PUSH
  69: LD_OWVAR 16
  73: ST_TO_ADDR
// Teams = mp_teams ;
  74: LD_ADDR_EXP 39
  78: PUSH
  79: LD_OWVAR 12
  83: ST_TO_ADDR
// end else
  84: GO 256
// begin gametype = 11 ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 11
  93: ST_TO_ADDR
// Player_Side = 4 ;
  94: LD_ADDR_EXP 36
  98: PUSH
  99: LD_INT 4
 101: ST_TO_ADDR
// Player_Team = 2 ;
 102: LD_ADDR_EXP 37
 106: PUSH
 107: LD_INT 2
 109: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 110: LD_ADDR_EXP 40
 114: PUSH
 115: LD_INT 0
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 1
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 4
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 149: LD_ADDR_EXP 38
 153: PUSH
 154: LD_INT 0
 156: PUSH
 157: LD_INT 1
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 188: LD_ADDR_EXP 41
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 3
 198: PUSH
 199: LD_INT 0
 201: PUSH
 202: LD_INT 1
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: LD_INT 3
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Teams = [ [ 2 , 7 ] , [ 6 , 4 ] ] ;
 227: LD_ADDR_EXP 39
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: LD_INT 7
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 6
 244: PUSH
 245: LD_INT 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 256: LD_ADDR_EXP 34
 260: PUSH
 261: LD_EXP 40
 265: PUSH
 266: LD_INT 0
 268: PUSH
 269: EMPTY
 270: LIST
 271: DIFF
 272: PUSH
 273: LD_INT 0
 275: PLUS
 276: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 277: LD_ADDR_EXP 35
 281: PUSH
 282: LD_EXP 38
 286: PUSH
 287: LD_INT 0
 289: PUSH
 290: EMPTY
 291: LIST
 292: DIFF
 293: PUSH
 294: LD_INT 0
 296: PLUS
 297: ST_TO_ADDR
// if MultiPlayer then
 298: LD_OWVAR 4
 302: IFFALSE 534
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 304: LD_ADDR_EXP 2
 308: PUSH
 309: LD_INT 0
 311: PPUSH
 312: CALL_OW 426
 316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 317: LD_ADDR_EXP 3
 321: PUSH
 322: LD_INT 1
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 330: LD_ADDR_EXP 4
 334: PUSH
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 343: LD_ADDR_EXP 5
 347: PUSH
 348: LD_INT 3
 350: PPUSH
 351: CALL_OW 426
 355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 356: LD_ADDR_EXP 6
 360: PUSH
 361: LD_INT 4
 363: PPUSH
 364: CALL_OW 426
 368: ST_TO_ADDR
// def_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 369: LD_ADDR_EXP 7
 373: PUSH
 374: LD_INT 5
 376: PPUSH
 377: CALL_OW 426
 381: ST_TO_ADDR
// def_sib_deposits = GetMultiplayerSetting ( 6 ) ;
 382: LD_ADDR_EXP 8
 386: PUSH
 387: LD_INT 6
 389: PPUSH
 390: CALL_OW 426
 394: ST_TO_ADDR
// if gametype = 11 then
 395: LD_EXP 1
 399: PUSH
 400: LD_INT 11
 402: EQUAL
 403: IFFALSE 415
// def_shared_vision = 0 else
 405: LD_ADDR_EXP 9
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
 413: GO 428
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 415: LD_ADDR_EXP 9
 419: PUSH
 420: LD_INT 10
 422: PPUSH
 423: CALL_OW 426
 427: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 428: LD_ADDR_EXP 10
 432: PUSH
 433: LD_INT 11
 435: PPUSH
 436: CALL_OW 426
 440: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 441: LD_ADDR_EXP 11
 445: PUSH
 446: LD_INT 12
 448: PPUSH
 449: CALL_OW 426
 453: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 454: LD_ADDR_EXP 12
 458: PUSH
 459: LD_INT 13
 461: PPUSH
 462: CALL_OW 426
 466: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 467: LD_ADDR_EXP 13
 471: PUSH
 472: LD_INT 14
 474: PPUSH
 475: CALL_OW 426
 479: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 480: LD_ADDR_EXP 14
 484: PUSH
 485: LD_INT 15
 487: PPUSH
 488: CALL_OW 426
 492: ST_TO_ADDR
// def_cost = GetMultiplayerSetting ( 16 ) ;
 493: LD_ADDR_EXP 15
 497: PUSH
 498: LD_INT 16
 500: PPUSH
 501: CALL_OW 426
 505: ST_TO_ADDR
// def_cost_decreasing = GetMultiplayerSetting ( 17 ) ;
 506: LD_ADDR_EXP 16
 510: PUSH
 511: LD_INT 17
 513: PPUSH
 514: CALL_OW 426
 518: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 519: LD_ADDR_VAR 0 6
 523: PUSH
 524: LD_INT 22
 526: PPUSH
 527: CALL_OW 426
 531: ST_TO_ADDR
// end else
 532: GO 666
// begin randomize ;
 534: CALL_OW 10
// def_base_level = 0 ;
 538: LD_ADDR_EXP 2
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// def_amount_of_people = 4 ;
 546: LD_ADDR_EXP 3
 550: PUSH
 551: LD_INT 4
 553: ST_TO_ADDR
// def_initial_level = 3 ;
 554: LD_ADDR_EXP 4
 558: PUSH
 559: LD_INT 3
 561: ST_TO_ADDR
// def_starting_resources = 3 ;
 562: LD_ADDR_EXP 5
 566: PUSH
 567: LD_INT 3
 569: ST_TO_ADDR
// def_shipments_density = 2 ;
 570: LD_ADDR_EXP 6
 574: PUSH
 575: LD_INT 2
 577: ST_TO_ADDR
// def_oil_deposits = 2 ;
 578: LD_ADDR_EXP 7
 582: PUSH
 583: LD_INT 2
 585: ST_TO_ADDR
// def_sib_deposits = 2 ;
 586: LD_ADDR_EXP 8
 590: PUSH
 591: LD_INT 2
 593: ST_TO_ADDR
// def_shared_vision = 1 ;
 594: LD_ADDR_EXP 9
 598: PUSH
 599: LD_INT 1
 601: ST_TO_ADDR
// def_morale_flags = 4 ;
 602: LD_ADDR_EXP 10
 606: PUSH
 607: LD_INT 4
 609: ST_TO_ADDR
// def_siberite_detection = 1 ;
 610: LD_ADDR_EXP 11
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 618: LD_ADDR_EXP 12
 622: PUSH
 623: LD_INT 3
 625: ST_TO_ADDR
// def_people_respawning = 0 ;
 626: LD_ADDR_EXP 13
 630: PUSH
 631: LD_INT 0
 633: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 634: LD_ADDR_EXP 14
 638: PUSH
 639: LD_INT 0
 641: ST_TO_ADDR
// def_cost = 4 ;
 642: LD_ADDR_EXP 15
 646: PUSH
 647: LD_INT 4
 649: ST_TO_ADDR
// def_cost_decreasing = 0 ;
 650: LD_ADDR_EXP 16
 654: PUSH
 655: LD_INT 0
 657: ST_TO_ADDR
// tech_level = 4 ;
 658: LD_ADDR_VAR 0 6
 662: PUSH
 663: LD_INT 4
 665: ST_TO_ADDR
// end ; if isSGUI then
 666: LD_OWVAR 83
 670: IFFALSE 678
// setMpTechs ( ) else
 672: CALL 10068 0 0
 676: GO 691
// begin SetMpTechLevel ( tech_level + 1 ) ;
 678: LD_VAR 0 6
 682: PUSH
 683: LD_INT 1
 685: PLUS
 686: PPUSH
 687: CALL 10215 0 1
// end ; if gametype = 11 then
 691: LD_EXP 1
 695: PUSH
 696: LD_INT 11
 698: EQUAL
 699: IFFALSE 1041
// begin sides = [ ] ;
 701: LD_ADDR_VAR 0 2
 705: PUSH
 706: EMPTY
 707: ST_TO_ADDR
// for s1 = 1 to Side_Positions do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: DOUBLE
 714: LD_INT 1
 716: DEC
 717: ST_TO_ADDR
 718: LD_EXP 40
 722: PUSH
 723: FOR_TO
 724: IFFALSE 756
// if Side_Positions [ s1 ] then
 726: LD_EXP 40
 730: PUSH
 731: LD_VAR 0 3
 735: ARRAY
 736: IFFALSE 754
// sides = sides ^ s1 ;
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: LD_VAR 0 2
 747: PUSH
 748: LD_VAR 0 3
 752: ADD
 753: ST_TO_ADDR
 754: GO 723
 756: POP
 757: POP
// if sides < 4 then
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 4
 765: LESS
 766: IFFALSE 781
// begin YouLostInMultiplayer ;
 768: CALL_OW 107
// wait ( 0 0$1 ) ;
 772: LD_INT 35
 774: PPUSH
 775: CALL_OW 67
// exit ;
 779: GO 1649
// end ; s1 = sides [ Rand ( 1 , 4 ) ] ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_INT 1
 793: PPUSH
 794: LD_INT 4
 796: PPUSH
 797: CALL_OW 12
 801: ARRAY
 802: ST_TO_ADDR
// sides = sides diff s1 ;
 803: LD_ADDR_VAR 0 2
 807: PUSH
 808: LD_VAR 0 2
 812: PUSH
 813: LD_VAR 0 3
 817: DIFF
 818: ST_TO_ADDR
// s2 = sides [ Rand ( 1 , 3 ) ] ;
 819: LD_ADDR_VAR 0 4
 823: PUSH
 824: LD_VAR 0 2
 828: PUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 12
 839: ARRAY
 840: ST_TO_ADDR
// sides = sides diff s2 ;
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_VAR 0 4
 855: DIFF
 856: ST_TO_ADDR
// s3 = sides [ Rand ( 1 , 2 ) ] ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 2
 866: PUSH
 867: LD_INT 1
 869: PPUSH
 870: LD_INT 2
 872: PPUSH
 873: CALL_OW 12
 877: ARRAY
 878: ST_TO_ADDR
// sides = sides diff s3 ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_VAR 0 2
 888: PUSH
 889: LD_VAR 0 5
 893: DIFF
 894: ST_TO_ADDR
// Teams = [ [ s1 , s2 ] , [ s3 , sides [ 1 ] ] ] ;
 895: LD_ADDR_EXP 39
 899: PUSH
 900: LD_VAR 0 3
 904: PUSH
 905: LD_VAR 0 4
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_VAR 0 5
 918: PUSH
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 936: LD_ADDR_EXP 38
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 0
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: ST_TO_ADDR
// Side_Teams = Replace ( Replace ( Replace ( Replace ( Side_Teams , s1 , 1 ) , s2 , 1 ) , s3 , 2 ) , sides [ 1 ] , 2 ) ;
 975: LD_ADDR_EXP 38
 979: PUSH
 980: LD_EXP 38
 984: PPUSH
 985: LD_VAR 0 3
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 1
 997: PPUSH
 998: LD_VAR 0 4
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 1
1010: PPUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_INT 2
1018: PPUSH
1019: CALL_OW 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PUSH
1029: LD_INT 1
1031: ARRAY
1032: PPUSH
1033: LD_INT 2
1035: PPUSH
1036: CALL_OW 1
1040: ST_TO_ADDR
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1041: LD_ADDR_EXP 17
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: LD_INT 1
1054: PUSH
1055: LD_INT 1
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: LD_EXP 2
1068: PUSH
1069: LD_INT 1
1071: PLUS
1072: ARRAY
1073: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1074: LD_ADDR_EXP 18
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 4
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 2
1101: PUSH
1102: LD_INT 1
1104: PLUS
1105: ARRAY
1106: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1107: LD_ADDR_EXP 20
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: LD_INT 4
1120: PUSH
1121: LD_INT 5
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: LD_EXP 4
1134: PUSH
1135: LD_INT 1
1137: PLUS
1138: ARRAY
1139: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1140: LD_ADDR_EXP 22
1144: PUSH
1145: LD_INT 0
1147: PUSH
1148: LD_INT 0
1150: PUSH
1151: LD_INT 0
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_INT 30
1161: PUSH
1162: LD_INT 0
1164: PUSH
1165: LD_INT 0
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: PUSH
1173: LD_INT 50
1175: PUSH
1176: LD_INT 20
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 80
1189: PUSH
1190: LD_INT 40
1192: PUSH
1193: LD_INT 20
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_EXP 5
1211: PUSH
1212: LD_INT 1
1214: PLUS
1215: ARRAY
1216: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1217: LD_ADDR_EXP 21
1221: PUSH
1222: LD_INT 10
1224: PUSH
1225: EMPTY
1226: LIST
1227: PUSH
1228: LD_INT 7
1230: PUSH
1231: LD_INT 14
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 6
1240: PUSH
1241: LD_INT 12
1243: PUSH
1244: LD_INT 18
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 5
1254: PUSH
1255: LD_INT 10
1257: PUSH
1258: LD_INT 15
1260: PUSH
1261: LD_INT 20
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_EXP 5
1280: PUSH
1281: LD_INT 1
1283: PLUS
1284: ARRAY
1285: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1286: LD_ADDR_EXP 19
1290: PUSH
1291: LD_EXP 3
1295: PUSH
1296: LD_INT 4
1298: PLUS
1299: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 28 ;
1300: LD_ADDR_EXP 23
1304: PUSH
1305: LD_INT 20
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 28
1315: MUL
1316: PLUS
1317: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1318: LD_ADDR_EXP 32
1322: PUSH
1323: LD_INT 0
1325: PUSH
1326: LD_INT 3
1328: PUSH
1329: LD_INT 6
1331: PUSH
1332: LD_INT 9
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 12
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1351: LD_ADDR_EXP 25
1355: PUSH
1356: LD_INT 0
1358: PUSH
1359: LD_INT 8400
1361: PUSH
1362: LD_INT 1750
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 13
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1380: LD_ADDR_EXP 26
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 21000
1390: PUSH
1391: LD_INT 4200
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_EXP 13
1403: PUSH
1404: LD_INT 1
1406: PLUS
1407: ARRAY
1408: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1409: LD_ADDR_EXP 24
1413: PUSH
1414: LD_INT 1
1416: NEG
1417: PUSH
1418: LD_INT 350
1420: PUSH
1421: LD_INT 700
1423: PUSH
1424: LD_INT 1400
1426: PUSH
1427: LD_INT 0
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_EXP 10
1441: PUSH
1442: LD_INT 1
1444: PLUS
1445: ARRAY
1446: ST_TO_ADDR
// battle_flags_id = [ ] ;
1447: LD_ADDR_EXP 49
1451: PUSH
1452: EMPTY
1453: ST_TO_ADDR
// cost = [ 200 , 300 , 400 , 600 , 800 ] [ def_cost + 1 ] ;
1454: LD_ADDR_EXP 27
1458: PUSH
1459: LD_INT 200
1461: PUSH
1462: LD_INT 300
1464: PUSH
1465: LD_INT 400
1467: PUSH
1468: LD_INT 600
1470: PUSH
1471: LD_INT 800
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PUSH
1481: LD_EXP 15
1485: PUSH
1486: LD_INT 1
1488: PLUS
1489: ARRAY
1490: ST_TO_ADDR
// decr_cost_time = [ 0 , 20 20$0 , 10 10$0 , 5 5$0 ] [ def_cost_decreasing + 1 ] ;
1491: LD_ADDR_EXP 28
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: LD_INT 42000
1501: PUSH
1502: LD_INT 21000
1504: PUSH
1505: LD_INT 10500
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: LD_EXP 16
1518: PUSH
1519: LD_INT 1
1521: PLUS
1522: ARRAY
1523: ST_TO_ADDR
// oil_dep = [ [ 1 ] , [ 4 ] , [ 1 , 4 ] ] [ def_oil_deposits + 1 ] ;
1524: LD_ADDR_EXP 30
1528: PUSH
1529: LD_INT 1
1531: PUSH
1532: EMPTY
1533: LIST
1534: PUSH
1535: LD_INT 4
1537: PUSH
1538: EMPTY
1539: LIST
1540: PUSH
1541: LD_INT 1
1543: PUSH
1544: LD_INT 4
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_EXP 7
1560: PUSH
1561: LD_INT 1
1563: PLUS
1564: ARRAY
1565: ST_TO_ADDR
// sib_dep = [ [ 2 ] , [ 3 ] , [ 2 , 3 ] ] [ def_sib_deposits + 1 ] ;
1566: LD_ADDR_EXP 31
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: EMPTY
1575: LIST
1576: PUSH
1577: LD_INT 3
1579: PUSH
1580: EMPTY
1581: LIST
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_EXP 8
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ARRAY
1607: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1608: LD_ADDR_EXP 33
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 63000
1621: PUSH
1622: LD_INT 126000
1624: PUSH
1625: LD_INT 189000
1627: PUSH
1628: LD_INT 252000
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_EXP 14
1643: PUSH
1644: LD_INT 1
1646: PLUS
1647: ARRAY
1648: ST_TO_ADDR
// end ;
1649: LD_VAR 0 1
1653: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i , coord ; begin
1654: LD_INT 0
1656: PPUSH
1657: PPUSH
1658: PPUSH
1659: PPUSH
1660: PPUSH
1661: PPUSH
1662: PPUSH
1663: PPUSH
1664: PPUSH
1665: PPUSH
// depot_def = [ ] ;
1666: LD_ADDR_EXP 45
1670: PUSH
1671: EMPTY
1672: ST_TO_ADDR
// breastworks_def = [ ] ;
1673: LD_ADDR_EXP 46
1677: PUSH
1678: EMPTY
1679: ST_TO_ADDR
// for side := 1 to 4 do
1680: LD_ADDR_VAR 0 2
1684: PUSH
1685: DOUBLE
1686: LD_INT 1
1688: DEC
1689: ST_TO_ADDR
1690: LD_INT 4
1692: PUSH
1693: FOR_TO
1694: IFFALSE 2120
// begin dep := side * 5 - 4 ;
1696: LD_ADDR_VAR 0 3
1700: PUSH
1701: LD_VAR 0 2
1705: PUSH
1706: LD_INT 5
1708: MUL
1709: PUSH
1710: LD_INT 4
1712: MINUS
1713: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1714: LD_ADDR_VAR 0 4
1718: PUSH
1719: LD_VAR 0 2
1723: PUSH
1724: LD_INT 5
1726: MUL
1727: PUSH
1728: LD_INT 3
1730: MINUS
1731: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1732: LD_ADDR_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: PUSH
1742: LD_INT 5
1744: MUL
1745: PUSH
1746: LD_INT 2
1748: MINUS
1749: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1750: LD_ADDR_VAR 0 6
1754: PUSH
1755: LD_VAR 0 2
1759: PUSH
1760: LD_INT 5
1762: MUL
1763: PUSH
1764: LD_INT 1
1766: MINUS
1767: ST_TO_ADDR
// br4 := side * 5 ;
1768: LD_ADDR_VAR 0 7
1772: PUSH
1773: LD_VAR 0 2
1777: PUSH
1778: LD_INT 5
1780: MUL
1781: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1782: LD_ADDR_EXP 45
1786: PUSH
1787: LD_EXP 45
1791: PUSH
1792: LD_VAR 0 3
1796: PPUSH
1797: CALL_OW 250
1801: PUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 251
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: CALL_OW 254
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: ADD
1830: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1831: LD_ADDR_EXP 47
1835: PUSH
1836: LD_EXP 47
1840: PUSH
1841: LD_VAR 0 3
1845: PPUSH
1846: CALL_OW 250
1850: PPUSH
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 254
1860: PUSH
1861: LD_INT 6
1863: MOD
1864: PPUSH
1865: LD_INT 6
1867: PPUSH
1868: CALL_OW 272
1872: PUSH
1873: LD_VAR 0 3
1877: PPUSH
1878: CALL_OW 251
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: CALL_OW 254
1892: PUSH
1893: LD_INT 6
1895: MOD
1896: PPUSH
1897: LD_INT 6
1899: PPUSH
1900: CALL_OW 273
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: ADD
1912: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1913: LD_ADDR_EXP 46
1917: PUSH
1918: LD_EXP 46
1922: PUSH
1923: LD_VAR 0 4
1927: PPUSH
1928: CALL_OW 250
1932: PUSH
1933: LD_VAR 0 4
1937: PPUSH
1938: CALL_OW 251
1942: PUSH
1943: LD_VAR 0 4
1947: PPUSH
1948: CALL_OW 254
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: LD_VAR 0 5
1962: PPUSH
1963: CALL_OW 250
1967: PUSH
1968: LD_VAR 0 5
1972: PPUSH
1973: CALL_OW 251
1977: PUSH
1978: LD_VAR 0 5
1982: PPUSH
1983: CALL_OW 254
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 6
1997: PPUSH
1998: CALL_OW 250
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: CALL_OW 251
2012: PUSH
2013: LD_VAR 0 6
2017: PPUSH
2018: CALL_OW 254
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: LD_VAR 0 7
2032: PPUSH
2033: CALL_OW 250
2037: PUSH
2038: LD_VAR 0 7
2042: PPUSH
2043: CALL_OW 251
2047: PUSH
2048: LD_VAR 0 7
2052: PPUSH
2053: CALL_OW 254
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: EMPTY
2070: LIST
2071: ADD
2072: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: CALL_OW 65
// DestroyUnit ( br1 ) ;
2082: LD_VAR 0 4
2086: PPUSH
2087: CALL_OW 65
// DestroyUnit ( br2 ) ;
2091: LD_VAR 0 5
2095: PPUSH
2096: CALL_OW 65
// DestroyUnit ( br3 ) ;
2100: LD_VAR 0 6
2104: PPUSH
2105: CALL_OW 65
// DestroyUnit ( br4 ) ;
2109: LD_VAR 0 7
2113: PPUSH
2114: CALL_OW 65
// end ;
2118: GO 1693
2120: POP
2121: POP
// deposits_def = [ [ [ 30 , 22 ] , [ 60 , 42 ] , [ 29 , 2 ] , [ 73 , 57 ] ] , [ [ 148 , 24 ] , [ 119 , 20 ] , [ 172 , 36 ] , [ 133 , 50 ] ] , [ [ 84 , 122 ] , [ 101 , 111 ] , [ 74 , 126 ] , [ 109 , 102 ] ] , [ [ 196 , 117 ] , [ 166 , 94 ] , [ 197 , 133 ] , [ 156 , 83 ] ] ] ;
2122: LD_ADDR_EXP 48
2126: PUSH
2127: LD_INT 30
2129: PUSH
2130: LD_INT 22
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PUSH
2137: LD_INT 60
2139: PUSH
2140: LD_INT 42
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 29
2149: PUSH
2150: LD_INT 2
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PUSH
2157: LD_INT 73
2159: PUSH
2160: LD_INT 57
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 148
2175: PUSH
2176: LD_INT 24
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 119
2185: PUSH
2186: LD_INT 20
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 172
2195: PUSH
2196: LD_INT 36
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 133
2205: PUSH
2206: LD_INT 50
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 84
2221: PUSH
2222: LD_INT 122
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 101
2231: PUSH
2232: LD_INT 111
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 74
2241: PUSH
2242: LD_INT 126
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 109
2251: PUSH
2252: LD_INT 102
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 196
2267: PUSH
2268: LD_INT 117
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 166
2277: PUSH
2278: LD_INT 94
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 197
2287: PUSH
2288: LD_INT 133
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 156
2297: PUSH
2298: LD_INT 83
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: EMPTY
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: ST_TO_ADDR
// for i := 1 to 4 do
2317: LD_ADDR_VAR 0 9
2321: PUSH
2322: DOUBLE
2323: LD_INT 1
2325: DEC
2326: ST_TO_ADDR
2327: LD_INT 4
2329: PUSH
2330: FOR_TO
2331: IFFALSE 2401
// for coord in oil_dep do
2333: LD_ADDR_VAR 0 10
2337: PUSH
2338: LD_EXP 30
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2397
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_oil ) ;
2346: LD_EXP 48
2350: PUSH
2351: LD_VAR 0 9
2355: ARRAY
2356: PUSH
2357: LD_VAR 0 10
2361: ARRAY
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: LD_EXP 48
2371: PUSH
2372: LD_VAR 0 9
2376: ARRAY
2377: PUSH
2378: LD_VAR 0 10
2382: ARRAY
2383: PUSH
2384: LD_INT 2
2386: ARRAY
2387: PPUSH
2388: LD_INT 2
2390: PPUSH
2391: CALL_OW 62
// end ;
2395: GO 2343
2397: POP
2398: POP
2399: GO 2330
2401: POP
2402: POP
// for i := 1 to 4 do
2403: LD_ADDR_VAR 0 9
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 4
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2487
// for coord in sib_dep do
2419: LD_ADDR_VAR 0 10
2423: PUSH
2424: LD_EXP 31
2428: PUSH
2429: FOR_IN
2430: IFFALSE 2483
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_siberit ) ;
2432: LD_EXP 48
2436: PUSH
2437: LD_VAR 0 9
2441: ARRAY
2442: PUSH
2443: LD_VAR 0 10
2447: ARRAY
2448: PUSH
2449: LD_INT 1
2451: ARRAY
2452: PPUSH
2453: LD_EXP 48
2457: PUSH
2458: LD_VAR 0 9
2462: ARRAY
2463: PUSH
2464: LD_VAR 0 10
2468: ARRAY
2469: PUSH
2470: LD_INT 2
2472: ARRAY
2473: PPUSH
2474: LD_INT 3
2476: PPUSH
2477: CALL_OW 62
// end ;
2481: GO 2429
2483: POP
2484: POP
2485: GO 2416
2487: POP
2488: POP
// end ;
2489: LD_VAR 0 1
2493: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
// Team_Game := 0 ;
2499: LD_ADDR_EXP 44
2503: PUSH
2504: LD_INT 0
2506: ST_TO_ADDR
// for i = 1 to 8 do
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: DOUBLE
2513: LD_INT 1
2515: DEC
2516: ST_TO_ADDR
2517: LD_INT 8
2519: PUSH
2520: FOR_TO
2521: IFFALSE 2547
// Team_Game := Team_Game + Side_Teams [ i ] ;
2523: LD_ADDR_EXP 44
2527: PUSH
2528: LD_EXP 44
2532: PUSH
2533: LD_EXP 38
2537: PUSH
2538: LD_VAR 0 2
2542: ARRAY
2543: PLUS
2544: ST_TO_ADDR
2545: GO 2520
2547: POP
2548: POP
// if not Team_Game then
2549: LD_EXP 44
2553: NOT
2554: IFFALSE 2566
// Team_Game := false else
2556: LD_ADDR_EXP 44
2560: PUSH
2561: LD_INT 0
2563: ST_TO_ADDR
2564: GO 2574
// Team_Game := true ;
2566: LD_ADDR_EXP 44
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// if not Team_Game then
2574: LD_EXP 44
2578: NOT
2579: IFFALSE 2677
// begin for i = 1 to 8 do
2581: LD_ADDR_VAR 0 2
2585: PUSH
2586: DOUBLE
2587: LD_INT 1
2589: DEC
2590: ST_TO_ADDR
2591: LD_INT 8
2593: PUSH
2594: FOR_TO
2595: IFFALSE 2673
// for j = 1 to 8 do
2597: LD_ADDR_VAR 0 3
2601: PUSH
2602: DOUBLE
2603: LD_INT 1
2605: DEC
2606: ST_TO_ADDR
2607: LD_INT 8
2609: PUSH
2610: FOR_TO
2611: IFFALSE 2669
// if i <> j then
2613: LD_VAR 0 2
2617: PUSH
2618: LD_VAR 0 3
2622: NONEQUAL
2623: IFFALSE 2647
// SetAttitude ( i , j , att_neutral , true ) else
2625: LD_VAR 0 2
2629: PPUSH
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: CALL_OW 80
2645: GO 2667
// SetAttitude ( i , j , att_friend , true ) ;
2647: LD_VAR 0 2
2651: PPUSH
2652: LD_VAR 0 3
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: CALL_OW 80
2667: GO 2610
2669: POP
2670: POP
2671: GO 2594
2673: POP
2674: POP
// end else
2675: GO 2906
// begin if def_shared_vision and ( gametype <> 11 ) then
2677: LD_EXP 9
2681: PUSH
2682: LD_EXP 1
2686: PUSH
2687: LD_INT 11
2689: NONEQUAL
2690: AND
2691: IFFALSE 2756
// begin for i in Teams do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_EXP 39
2702: PUSH
2703: FOR_IN
2704: IFFALSE 2754
// for j = 2 to i do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 2
2714: DEC
2715: ST_TO_ADDR
2716: LD_VAR 0 2
2720: PUSH
2721: FOR_TO
2722: IFFALSE 2750
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2724: LD_VAR 0 2
2728: PUSH
2729: LD_VAR 0 3
2733: ARRAY
2734: PPUSH
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PPUSH
2744: CALL_OW 343
2748: GO 2721
2750: POP
2751: POP
2752: GO 2703
2754: POP
2755: POP
// end ; for i := 1 to 8 do
2756: LD_ADDR_VAR 0 2
2760: PUSH
2761: DOUBLE
2762: LD_INT 1
2764: DEC
2765: ST_TO_ADDR
2766: LD_INT 8
2768: PUSH
2769: FOR_TO
2770: IFFALSE 2904
// for j := 1 to 8 do
2772: LD_ADDR_VAR 0 3
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_INT 8
2784: PUSH
2785: FOR_TO
2786: IFFALSE 2900
// if i <> j then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 3
2797: NONEQUAL
2798: IFFALSE 2898
// if gametype = 11 then
2800: LD_EXP 1
2804: PUSH
2805: LD_INT 11
2807: EQUAL
2808: IFFALSE 2832
// SetAttitude ( i , j , att_neutral , true ) else
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: LD_INT 0
2822: PPUSH
2823: LD_INT 1
2825: PPUSH
2826: CALL_OW 80
2830: GO 2898
// if Side_Teams [ i ] = Side_Teams [ j ] then
2832: LD_EXP 38
2836: PUSH
2837: LD_VAR 0 2
2841: ARRAY
2842: PUSH
2843: LD_EXP 38
2847: PUSH
2848: LD_VAR 0 3
2852: ARRAY
2853: EQUAL
2854: IFFALSE 2878
// SetAttitude ( i , j , att_friend , true ) else
2856: LD_VAR 0 2
2860: PPUSH
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_INT 1
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: CALL_OW 80
2876: GO 2898
// SetAttitude ( i , j , att_enemy , true ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: CALL_OW 80
2898: GO 2785
2900: POP
2901: POP
2902: GO 2769
2904: POP
2905: POP
// end ; end ;
2906: LD_VAR 0 1
2910: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
2916: PPUSH
// result := [ ] ;
2917: LD_ADDR_VAR 0 6
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// for i := 1 to count do
2924: LD_ADDR_VAR 0 7
2928: PUSH
2929: DOUBLE
2930: LD_INT 1
2932: DEC
2933: ST_TO_ADDR
2934: LD_VAR 0 1
2938: PUSH
2939: FOR_TO
2940: IFFALSE 3334
// begin uc_direction := Rand ( 0 , 5 ) ;
2942: LD_ADDR_OWVAR 24
2946: PUSH
2947: LD_INT 0
2949: PPUSH
2950: LD_INT 5
2952: PPUSH
2953: CALL_OW 12
2957: ST_TO_ADDR
// if commander then
2958: LD_LOC 1
2962: IFFALSE 3071
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2964: LD_ADDR_OWVAR 26
2968: PUSH
2969: LD_OWVAR 19
2973: PUSH
2974: LD_OWVAR 20
2978: ARRAY
2979: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 2
2985: PPUSH
2986: CALL_OW 12
2990: PPUSH
2991: LD_VAR 0 2
2995: PPUSH
2996: LD_EXP 20
3000: PUSH
3001: LD_INT 2
3003: PLUS
3004: PPUSH
3005: CALL_OW 380
// hc_importance := 105 ;
3009: LD_ADDR_OWVAR 32
3013: PUSH
3014: LD_INT 105
3016: ST_TO_ADDR
// commander := false ;
3017: LD_ADDR_LOC 1
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// if Multiplayer then
3025: LD_OWVAR 4
3029: IFFALSE 3069
// begin hc_gallery := MULTIAVATARS ;
3031: LD_ADDR_OWVAR 33
3035: PUSH
3036: LD_STRING MULTIAVATARS
3038: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3039: LD_ADDR_OWVAR 34
3043: PUSH
3044: LD_OWVAR 20
3048: PPUSH
3049: CALL_OW 525
3053: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3054: LD_ADDR_OWVAR 27
3058: PUSH
3059: LD_OWVAR 20
3063: PPUSH
3064: CALL_OW 526
3068: ST_TO_ADDR
// end ; end else
3069: GO 3134
// begin hc_name :=  ;
3071: LD_ADDR_OWVAR 26
3075: PUSH
3076: LD_STRING 
3078: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
3079: LD_INT 1
3081: PPUSH
3082: LD_INT 2
3084: PPUSH
3085: CALL_OW 12
3089: PPUSH
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_EXP 20
3099: PPUSH
3100: CALL_OW 380
// hc_importance := 0 ;
3104: LD_ADDR_OWVAR 32
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// if Multiplayer then
3112: LD_OWVAR 4
3116: IFFALSE 3134
// begin hc_gallery :=  ;
3118: LD_ADDR_OWVAR 33
3122: PUSH
3123: LD_STRING 
3125: ST_TO_ADDR
// hc_face_number := 0 ;
3126: LD_ADDR_OWVAR 34
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3134: LD_ADDR_VAR 0 9
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// if global_defined then
3144: LD_LOC 3
3148: IFFALSE 3286
// begin j := i ;
3150: LD_ADDR_VAR 0 8
3154: PUSH
3155: LD_VAR 0 7
3159: ST_TO_ADDR
// if cl = class_soldier then
3160: LD_VAR 0 2
3164: PUSH
3165: LD_INT 1
3167: EQUAL
3168: IFFALSE 3186
// j := i + soldiers_created ;
3170: LD_ADDR_VAR 0 8
3174: PUSH
3175: LD_VAR 0 7
3179: PUSH
3180: LD_LOC 4
3184: PLUS
3185: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3186: LD_LOC 2
3190: PUSH
3191: LD_VAR 0 2
3195: ARRAY
3196: PUSH
3197: LD_VAR 0 8
3201: ARRAY
3202: PPUSH
3203: LD_VAR 0 9
3207: PPUSH
3208: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3212: LD_VAR 0 9
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_LOC 2
3224: PUSH
3225: LD_VAR 0 2
3229: ARRAY
3230: PUSH
3231: LD_VAR 0 8
3235: ARRAY
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: CALL_OW 260
3244: PPUSH
3245: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3249: LD_VAR 0 9
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: PUSH
3268: LD_VAR 0 8
3272: ARRAY
3273: PPUSH
3274: LD_INT 1
3276: PPUSH
3277: CALL_OW 260
3281: PPUSH
3282: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
3286: LD_VAR 0 9
3290: PPUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_VAR 0 4
3300: PPUSH
3301: LD_VAR 0 5
3305: PPUSH
3306: LD_INT 0
3308: PPUSH
3309: CALL_OW 50
// result := result ^ [ un ] ;
3313: LD_ADDR_VAR 0 6
3317: PUSH
3318: LD_VAR 0 6
3322: PUSH
3323: LD_VAR 0 9
3327: PUSH
3328: EMPTY
3329: LIST
3330: ADD
3331: ST_TO_ADDR
// end ;
3332: GO 2939
3334: POP
3335: POP
// if not global_defined then
3336: LD_LOC 3
3340: NOT
3341: IFFALSE 3403
// if cl = class_soldier and global_units then
3343: LD_VAR 0 2
3347: PUSH
3348: LD_INT 1
3350: EQUAL
3351: PUSH
3352: LD_LOC 2
3356: AND
3357: IFFALSE 3384
// global_units := [ global_units [ 1 ] ^ result ] else
3359: LD_ADDR_LOC 2
3363: PUSH
3364: LD_LOC 2
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PUSH
3373: LD_VAR 0 6
3377: ADD
3378: PUSH
3379: EMPTY
3380: LIST
3381: ST_TO_ADDR
3382: GO 3403
// global_units := global_units ^ [ result ] ;
3384: LD_ADDR_LOC 2
3388: PUSH
3389: LD_LOC 2
3393: PUSH
3394: LD_VAR 0 6
3398: PUSH
3399: EMPTY
3400: LIST
3401: ADD
3402: ST_TO_ADDR
// end ;
3403: LD_VAR 0 6
3407: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3408: LD_INT 0
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
3414: PPUSH
3415: PPUSH
3416: PPUSH
3417: PPUSH
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
3422: PPUSH
// pos := Side_Positions [ side ] ;
3423: LD_ADDR_VAR 0 3
3427: PUSH
3428: LD_EXP 40
3432: PUSH
3433: LD_VAR 0 1
3437: ARRAY
3438: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3439: LD_ADDR_OWVAR 21
3443: PUSH
3444: LD_EXP 41
3448: PUSH
3449: LD_VAR 0 1
3453: ARRAY
3454: ST_TO_ADDR
// uc_side := side ;
3455: LD_ADDR_OWVAR 20
3459: PUSH
3460: LD_VAR 0 1
3464: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3465: LD_ADDR_VAR 0 4
3469: PUSH
3470: LD_EXP 45
3474: PUSH
3475: LD_VAR 0 3
3479: ARRAY
3480: PUSH
3481: LD_INT 1
3483: ARRAY
3484: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3485: LD_ADDR_VAR 0 5
3489: PUSH
3490: LD_EXP 45
3494: PUSH
3495: LD_VAR 0 3
3499: ARRAY
3500: PUSH
3501: LD_INT 2
3503: ARRAY
3504: ST_TO_ADDR
// if is_depot then
3505: LD_EXP 17
3509: IFFALSE 3652
// begin bc_type = b_depot ;
3511: LD_ADDR_OWVAR 42
3515: PUSH
3516: LD_INT 0
3518: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3519: LD_ADDR_VAR 0 10
3523: PUSH
3524: LD_VAR 0 4
3528: PPUSH
3529: LD_VAR 0 5
3533: PPUSH
3534: LD_EXP 45
3538: PUSH
3539: LD_VAR 0 3
3543: ARRAY
3544: PUSH
3545: LD_INT 3
3547: ARRAY
3548: PPUSH
3549: CALL_OW 47
3553: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3554: LD_VAR 0 10
3558: PPUSH
3559: LD_STRING @
3561: PUSH
3562: LD_VAR 0 1
3566: STR
3567: PPUSH
3568: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3572: LD_VAR 0 10
3576: PPUSH
3577: CALL_OW 274
3581: PPUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_EXP 22
3589: PUSH
3590: LD_INT 1
3592: ARRAY
3593: PPUSH
3594: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3598: LD_VAR 0 10
3602: PPUSH
3603: CALL_OW 274
3607: PPUSH
3608: LD_INT 2
3610: PPUSH
3611: LD_EXP 22
3615: PUSH
3616: LD_INT 2
3618: ARRAY
3619: PPUSH
3620: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3624: LD_VAR 0 2
3628: PPUSH
3629: CALL_OW 274
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: LD_EXP 22
3641: PUSH
3642: LD_INT 3
3644: ARRAY
3645: PPUSH
3646: CALL_OW 277
// end else
3650: GO 3796
// begin for i := 1 to 3 do
3652: LD_ADDR_VAR 0 6
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 3
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3794
// begin r := starting_resources [ i ] ;
3668: LD_ADDR_VAR 0 7
3672: PUSH
3673: LD_EXP 22
3677: PUSH
3678: LD_VAR 0 6
3682: ARRAY
3683: ST_TO_ADDR
// while r >= 10 do
3684: LD_VAR 0 7
3688: PUSH
3689: LD_INT 10
3691: GREATEREQUAL
3692: IFFALSE 3792
// if r > 50 then
3694: LD_VAR 0 7
3698: PUSH
3699: LD_INT 50
3701: GREATER
3702: IFFALSE 3748
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3704: LD_VAR 0 6
3708: PPUSH
3709: LD_INT 5
3711: PPUSH
3712: LD_VAR 0 4
3716: PPUSH
3717: LD_VAR 0 5
3721: PPUSH
3722: LD_INT 4
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: CALL_OW 60
// r := r - 50 ;
3732: LD_ADDR_VAR 0 7
3736: PUSH
3737: LD_VAR 0 7
3741: PUSH
3742: LD_INT 50
3744: MINUS
3745: ST_TO_ADDR
// end else
3746: GO 3790
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3748: LD_VAR 0 6
3752: PPUSH
3753: LD_VAR 0 7
3757: PUSH
3758: LD_INT 10
3760: DIV
3761: PPUSH
3762: LD_VAR 0 4
3766: PPUSH
3767: LD_VAR 0 5
3771: PPUSH
3772: LD_INT 4
3774: PPUSH
3775: LD_INT 0
3777: PPUSH
3778: CALL_OW 60
// r := 0 ;
3782: LD_ADDR_VAR 0 7
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// end ;
3790: GO 3684
// end ;
3792: GO 3665
3794: POP
3795: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3796: LD_ADDR_VAR 0 4
3800: PUSH
3801: LD_EXP 47
3805: PUSH
3806: LD_VAR 0 3
3810: ARRAY
3811: PUSH
3812: LD_INT 1
3814: ARRAY
3815: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3816: LD_ADDR_VAR 0 5
3820: PUSH
3821: LD_EXP 47
3825: PUSH
3826: LD_VAR 0 3
3830: ARRAY
3831: PUSH
3832: LD_INT 2
3834: ARRAY
3835: ST_TO_ADDR
// for r in starting_crates do
3836: LD_ADDR_VAR 0 7
3840: PUSH
3841: LD_EXP 21
3845: PUSH
3846: FOR_IN
3847: IFFALSE 3879
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3849: LD_INT 1
3851: PPUSH
3852: LD_INT 5
3854: PPUSH
3855: LD_VAR 0 4
3859: PPUSH
3860: LD_VAR 0 5
3864: PPUSH
3865: LD_VAR 0 7
3869: PPUSH
3870: LD_INT 0
3872: PPUSH
3873: CALL_OW 60
3877: GO 3846
3879: POP
3880: POP
// if def_morale_flags then
3881: LD_EXP 10
3885: IFFALSE 3964
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3887: LD_ADDR_EXP 49
3891: PUSH
3892: LD_EXP 49
3896: PUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: LD_VAR 0 4
3906: PPUSH
3907: LD_VAR 0 5
3911: PPUSH
3912: LD_INT 1
3914: PUSH
3915: LD_INT 100
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 2
3924: PUSH
3925: LD_INT 50
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 20
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 20
3944: PUSH
3945: LD_INT 100
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 418
3962: ADD
3963: ST_TO_ADDR
// neng := number_of_people ;
3964: LD_ADDR_VAR 0 11
3968: PUSH
3969: LD_EXP 19
3973: ST_TO_ADDR
// nsol := number_of_breastworks ;
3974: LD_ADDR_VAR 0 14
3978: PUSH
3979: LD_EXP 18
3983: ST_TO_ADDR
// if nsol < neng div 4 then
3984: LD_VAR 0 14
3988: PUSH
3989: LD_VAR 0 11
3993: PUSH
3994: LD_INT 4
3996: DIV
3997: LESS
3998: IFFALSE 4014
// nsol := neng div 4 ;
4000: LD_ADDR_VAR 0 14
4004: PUSH
4005: LD_VAR 0 11
4009: PUSH
4010: LD_INT 4
4012: DIV
4013: ST_TO_ADDR
// neng := neng - nsol ;
4014: LD_ADDR_VAR 0 11
4018: PUSH
4019: LD_VAR 0 11
4023: PUSH
4024: LD_VAR 0 14
4028: MINUS
4029: ST_TO_ADDR
// nsci := neng div 3 ;
4030: LD_ADDR_VAR 0 12
4034: PUSH
4035: LD_VAR 0 11
4039: PUSH
4040: LD_INT 3
4042: DIV
4043: ST_TO_ADDR
// if nsci < 1 then
4044: LD_VAR 0 12
4048: PUSH
4049: LD_INT 1
4051: LESS
4052: IFFALSE 4062
// nsci := 1 ;
4054: LD_ADDR_VAR 0 12
4058: PUSH
4059: LD_INT 1
4061: ST_TO_ADDR
// neng := neng - nsci ;
4062: LD_ADDR_VAR 0 11
4066: PUSH
4067: LD_VAR 0 11
4071: PUSH
4072: LD_VAR 0 12
4076: MINUS
4077: ST_TO_ADDR
// nmech := neng div 2 ;
4078: LD_ADDR_VAR 0 13
4082: PUSH
4083: LD_VAR 0 11
4087: PUSH
4088: LD_INT 2
4090: DIV
4091: ST_TO_ADDR
// neng := neng - nmech ;
4092: LD_ADDR_VAR 0 11
4096: PUSH
4097: LD_VAR 0 11
4101: PUSH
4102: LD_VAR 0 13
4106: MINUS
4107: ST_TO_ADDR
// if neng < 1 then
4108: LD_VAR 0 11
4112: PUSH
4113: LD_INT 1
4115: LESS
4116: IFFALSE 4126
// neng := 1 ;
4118: LD_ADDR_VAR 0 11
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// commander := true ;
4126: LD_ADDR_LOC 1
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// soldiers_created := 0 ;
4134: LD_ADDR_LOC 4
4138: PUSH
4139: LD_INT 0
4141: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4142: LD_ADDR_VAR 0 6
4146: PUSH
4147: DOUBLE
4148: LD_INT 1
4150: DEC
4151: ST_TO_ADDR
4152: LD_EXP 18
4156: PUSH
4157: FOR_TO
4158: IFFALSE 4402
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4160: LD_ADDR_VAR 0 4
4164: PUSH
4165: LD_EXP 46
4169: PUSH
4170: LD_VAR 0 3
4174: ARRAY
4175: PUSH
4176: LD_VAR 0 6
4180: ARRAY
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4186: LD_ADDR_VAR 0 5
4190: PUSH
4191: LD_EXP 46
4195: PUSH
4196: LD_VAR 0 3
4200: ARRAY
4201: PUSH
4202: LD_VAR 0 6
4206: ARRAY
4207: PUSH
4208: LD_INT 2
4210: ARRAY
4211: ST_TO_ADDR
// bc_type := b_breastwork ;
4212: LD_ADDR_OWVAR 42
4216: PUSH
4217: LD_INT 31
4219: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4220: LD_ADDR_VAR 0 9
4224: PUSH
4225: LD_VAR 0 4
4229: PPUSH
4230: LD_VAR 0 5
4234: PPUSH
4235: LD_EXP 46
4239: PUSH
4240: LD_VAR 0 3
4244: ARRAY
4245: PUSH
4246: LD_VAR 0 6
4250: ARRAY
4251: PUSH
4252: LD_INT 3
4254: ARRAY
4255: PPUSH
4256: CALL_OW 47
4260: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4261: LD_ADDR_VAR 0 4
4265: PUSH
4266: LD_VAR 0 4
4270: PPUSH
4271: LD_EXP 46
4275: PUSH
4276: LD_VAR 0 3
4280: ARRAY
4281: PUSH
4282: LD_VAR 0 6
4286: ARRAY
4287: PUSH
4288: LD_INT 3
4290: ARRAY
4291: PPUSH
4292: LD_INT 2
4294: PPUSH
4295: CALL_OW 272
4299: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4300: LD_ADDR_VAR 0 5
4304: PUSH
4305: LD_VAR 0 5
4309: PPUSH
4310: LD_EXP 46
4314: PUSH
4315: LD_VAR 0 3
4319: ARRAY
4320: PUSH
4321: LD_VAR 0 6
4325: ARRAY
4326: PUSH
4327: LD_INT 3
4329: ARRAY
4330: PPUSH
4331: LD_INT 2
4333: PPUSH
4334: CALL_OW 273
4338: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
4339: LD_ADDR_VAR 0 8
4343: PUSH
4344: LD_INT 1
4346: PPUSH
4347: LD_INT 1
4349: PPUSH
4350: LD_VAR 0 4
4354: PPUSH
4355: LD_VAR 0 5
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: CALL 2911 0 5
4367: PUSH
4368: LD_INT 1
4370: ARRAY
4371: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4372: LD_ADDR_LOC 4
4376: PUSH
4377: LD_LOC 4
4381: PUSH
4382: LD_INT 1
4384: PLUS
4385: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4386: LD_VAR 0 8
4390: PPUSH
4391: LD_VAR 0 9
4395: PPUSH
4396: CALL_OW 120
// end ;
4400: GO 4157
4402: POP
4403: POP
// x := start_def [ pos ] [ 1 ] ;
4404: LD_ADDR_VAR 0 4
4408: PUSH
4409: LD_EXP 47
4413: PUSH
4414: LD_VAR 0 3
4418: ARRAY
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4424: LD_ADDR_VAR 0 5
4428: PUSH
4429: LD_EXP 47
4433: PUSH
4434: LD_VAR 0 3
4438: ARRAY
4439: PUSH
4440: LD_INT 2
4442: ARRAY
4443: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4444: LD_VAR 0 14
4448: PUSH
4449: LD_EXP 18
4453: MINUS
4454: PPUSH
4455: LD_INT 1
4457: PPUSH
4458: LD_VAR 0 4
4462: PPUSH
4463: LD_VAR 0 5
4467: PPUSH
4468: LD_INT 5
4470: PPUSH
4471: CALL 2911 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4475: LD_VAR 0 11
4479: PPUSH
4480: LD_INT 2
4482: PPUSH
4483: LD_VAR 0 4
4487: PPUSH
4488: LD_VAR 0 5
4492: PPUSH
4493: LD_INT 5
4495: PPUSH
4496: CALL 2911 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4500: LD_VAR 0 13
4504: PPUSH
4505: LD_INT 3
4507: PPUSH
4508: LD_VAR 0 4
4512: PPUSH
4513: LD_VAR 0 5
4517: PPUSH
4518: LD_INT 5
4520: PPUSH
4521: CALL 2911 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4525: LD_VAR 0 12
4529: PPUSH
4530: LD_INT 4
4532: PPUSH
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_VAR 0 5
4542: PPUSH
4543: LD_INT 5
4545: PPUSH
4546: CALL 2911 0 5
// if not global_defined then
4550: LD_LOC 3
4554: NOT
4555: IFFALSE 4565
// global_defined := true ;
4557: LD_ADDR_LOC 3
4561: PUSH
4562: LD_INT 1
4564: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4565: LD_EXP 11
4569: PUSH
4570: LD_INT 20
4572: PPUSH
4573: LD_VAR 0 1
4577: PPUSH
4578: CALL_OW 321
4582: PUSH
4583: LD_INT 1
4585: EQUAL
4586: AND
4587: IFFALSE 4604
// SetTech ( tech_SibDet , side , state_researched ) ;
4589: LD_INT 20
4591: PPUSH
4592: LD_VAR 0 1
4596: PPUSH
4597: LD_INT 2
4599: PPUSH
4600: CALL_OW 322
// if def_siberite_bomb = 1 then
4604: LD_EXP 14
4608: PUSH
4609: LD_INT 1
4611: EQUAL
4612: IFFALSE 4646
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4614: LD_INT 25
4616: PPUSH
4617: LD_VAR 0 1
4621: PPUSH
4622: LD_INT 1
4624: PPUSH
4625: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4629: LD_INT 73
4631: PPUSH
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: CALL_OW 322
// end else
4644: GO 4676
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4646: LD_INT 25
4648: PPUSH
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_INT 0
4656: PPUSH
4657: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4661: LD_INT 73
4663: PPUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4676: LD_INT 24
4678: PPUSH
4679: LD_VAR 0 1
4683: PPUSH
4684: LD_INT 0
4686: PPUSH
4687: CALL_OW 322
// end ;
4691: LD_VAR 0 2
4695: RET
// every 0 0$1 do
4696: GO 4698
4698: DISABLE
// if ( def_siberite_bomb > 1 ) then
4699: LD_EXP 14
4703: PUSH
4704: LD_INT 1
4706: GREATER
4707: IFFALSE 4722
// begin wait ( siberite_bomb_Delay ) ;
4709: LD_EXP 33
4713: PPUSH
4714: CALL_OW 67
// EnableSibFiss ;
4718: CALL 4723 0 0
// end ;
4722: END
// function EnableSibFiss ; var i ; begin
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
// for i := 1 to 8 do
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_INT 8
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4787
// if Side_Positions [ i ] then
4743: LD_EXP 40
4747: PUSH
4748: LD_VAR 0 2
4752: ARRAY
4753: IFFALSE 4785
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4755: LD_INT 25
4757: PPUSH
4758: LD_VAR 0 2
4762: PPUSH
4763: LD_INT 1
4765: PPUSH
4766: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4770: LD_INT 73
4772: PPUSH
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL_OW 322
// end ;
4785: GO 4740
4787: POP
4788: POP
// end ;
4789: LD_VAR 0 1
4793: RET
// function prepare_sides ; var i ; begin
4794: LD_INT 0
4796: PPUSH
4797: PPUSH
// global_units := [ ] ;
4798: LD_ADDR_LOC 2
4802: PUSH
4803: EMPTY
4804: ST_TO_ADDR
// global_defined := false ;
4805: LD_ADDR_LOC 3
4809: PUSH
4810: LD_INT 0
4812: ST_TO_ADDR
// for i := 1 to 8 do
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: DOUBLE
4819: LD_INT 1
4821: DEC
4822: ST_TO_ADDR
4823: LD_INT 8
4825: PUSH
4826: FOR_TO
4827: IFFALSE 4852
// if Side_Positions [ i ] then
4829: LD_EXP 40
4833: PUSH
4834: LD_VAR 0 2
4838: ARRAY
4839: IFFALSE 4850
// prepare_side ( i ) ;
4841: LD_VAR 0 2
4845: PPUSH
4846: CALL 3408 0 1
4850: GO 4826
4852: POP
4853: POP
// end ;
4854: LD_VAR 0 1
4858: RET
// starting begin disable ( 400 ) ;
4859: LD_INT 400
4861: DISABLE_MARKED
// disable ( 401 ) ;
4862: LD_INT 401
4864: DISABLE_MARKED
// mp_selectmsg := true ;
4865: LD_ADDR_OWVAR 13
4869: PUSH
4870: LD_INT 1
4872: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4873: CALL 0 0 0
// prepare_map_coordinates ;
4877: CALL 1654 0 0
// set_shared_visions_and_alliances ;
4881: CALL 2494 0 0
// prepare_sides ;
4885: CALL 4794 0 0
// Init_Win_Condition ;
4889: CALL 6654 0 0
// InitApeman ;
4893: CALL 9004 0 0
// init_shipments_and_respawning ;
4897: CALL 4982 0 0
// init_infos ;
4901: CALL 7351 0 0
// your_side := Player_Side ;
4905: LD_ADDR_OWVAR 2
4909: PUSH
4910: LD_EXP 36
4914: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4915: LD_ADDR_OWVAR 71
4919: PUSH
4920: LD_EXP 41
4924: PUSH
4925: LD_OWVAR 2
4929: ARRAY
4930: ST_TO_ADDR
// ResetFog ;
4931: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4935: LD_EXP 47
4939: PUSH
4940: LD_EXP 40
4944: PUSH
4945: LD_OWVAR 2
4949: ARRAY
4950: ARRAY
4951: PUSH
4952: LD_INT 1
4954: ARRAY
4955: PPUSH
4956: LD_EXP 47
4960: PUSH
4961: LD_EXP 40
4965: PUSH
4966: LD_OWVAR 2
4970: ARRAY
4971: ARRAY
4972: PUSH
4973: LD_INT 2
4975: ARRAY
4976: PPUSH
4977: CALL_OW 86
// end ; end_of_file
4981: END
// var shipment1 , shipment2 , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4982: LD_INT 0
4984: PPUSH
// shipment1 := [ ] ;
4985: LD_ADDR_LOC 5
4989: PUSH
4990: EMPTY
4991: ST_TO_ADDR
// shipment2 := [ ] ;
4992: LD_ADDR_LOC 6
4996: PUSH
4997: EMPTY
4998: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4999: LD_ADDR_LOC 7
5003: PUSH
5004: LD_INT 1
5006: PPUSH
5007: LD_INT 8
5009: PPUSH
5010: CALL_OW 12
5014: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5015: LD_ADDR_LOC 8
5019: PUSH
5020: LD_INT 0
5022: PUSH
5023: LD_INT 0
5025: PUSH
5026: LD_INT 0
5028: PUSH
5029: LD_INT 0
5031: PUSH
5032: LD_INT 0
5034: PUSH
5035: LD_INT 0
5037: PUSH
5038: LD_INT 0
5040: PUSH
5041: LD_INT 0
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: ST_TO_ADDR
// end ;
5054: LD_VAR 0 1
5058: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5059: GO 5061
5061: DISABLE
5062: LD_INT 0
5064: PPUSH
5065: PPUSH
5066: PPUSH
5067: PPUSH
// begin if respawning_time_max = 0 then
5068: LD_EXP 26
5072: PUSH
5073: LD_INT 0
5075: EQUAL
5076: IFFALSE 5080
// exit ;
5078: GO 5587
// if respawn = 8 then
5080: LD_LOC 7
5084: PUSH
5085: LD_INT 8
5087: EQUAL
5088: IFFALSE 5100
// respawn := 1 else
5090: LD_ADDR_LOC 7
5094: PUSH
5095: LD_INT 1
5097: ST_TO_ADDR
5098: GO 5114
// respawn := respawn + 1 ;
5100: LD_ADDR_LOC 7
5104: PUSH
5105: LD_LOC 7
5109: PUSH
5110: LD_INT 1
5112: PLUS
5113: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5114: LD_EXP 40
5118: PUSH
5119: LD_LOC 7
5123: ARRAY
5124: PUSH
5125: LD_LOC 8
5129: PUSH
5130: LD_LOC 7
5134: ARRAY
5135: NOT
5136: AND
5137: IFFALSE 5586
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5139: LD_ADDR_VAR 0 1
5143: PUSH
5144: LD_INT 21
5146: PUSH
5147: LD_INT 1
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PUSH
5154: LD_INT 22
5156: PUSH
5157: LD_LOC 7
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: LD_INT 23
5171: PUSH
5172: LD_INT 0
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PPUSH
5185: CALL_OW 69
5189: ST_TO_ADDR
// if n < number_of_people then
5190: LD_VAR 0 1
5194: PUSH
5195: LD_EXP 19
5199: LESS
5200: IFFALSE 5583
// begin aktresp := respawn ;
5202: LD_ADDR_VAR 0 3
5206: PUSH
5207: LD_LOC 7
5211: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5212: LD_ADDR_LOC 8
5216: PUSH
5217: LD_LOC 8
5221: PPUSH
5222: LD_VAR 0 3
5226: PPUSH
5227: LD_INT 1
5229: PPUSH
5230: CALL_OW 1
5234: ST_TO_ADDR
// enable ;
5235: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5236: LD_EXP 25
5240: PPUSH
5241: LD_EXP 26
5245: PPUSH
5246: CALL_OW 12
5250: PPUSH
5251: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5255: LD_ADDR_LOC 8
5259: PUSH
5260: LD_LOC 8
5264: PPUSH
5265: LD_VAR 0 3
5269: PPUSH
5270: LD_INT 0
5272: PPUSH
5273: CALL_OW 1
5277: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5278: LD_ADDR_VAR 0 2
5282: PUSH
5283: LD_INT 21
5285: PUSH
5286: LD_INT 3
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 2
5295: PUSH
5296: LD_INT 30
5298: PUSH
5299: LD_INT 0
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PUSH
5306: LD_INT 30
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 50
5323: PUSH
5324: EMPTY
5325: LIST
5326: PUSH
5327: LD_INT 22
5329: PUSH
5330: LD_VAR 0 3
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: PPUSH
5345: CALL_OW 69
5349: ST_TO_ADDR
// if building_list = 0 then
5350: LD_VAR 0 2
5354: PUSH
5355: LD_INT 0
5357: EQUAL
5358: IFFALSE 5403
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5360: LD_ADDR_VAR 0 2
5364: PUSH
5365: LD_INT 21
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 50
5377: PUSH
5378: EMPTY
5379: LIST
5380: PUSH
5381: LD_INT 22
5383: PUSH
5384: LD_VAR 0 3
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: PPUSH
5398: CALL_OW 69
5402: ST_TO_ADDR
// if building_list = 0 then
5403: LD_VAR 0 2
5407: PUSH
5408: LD_INT 0
5410: EQUAL
5411: IFFALSE 5415
// exit ;
5413: GO 5587
// hc_name :=  ;
5415: LD_ADDR_OWVAR 26
5419: PUSH
5420: LD_STRING 
5422: ST_TO_ADDR
// hc_importance := 0 ;
5423: LD_ADDR_OWVAR 32
5427: PUSH
5428: LD_INT 0
5430: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5431: LD_INT 0
5433: PPUSH
5434: LD_INT 0
5436: PPUSH
5437: LD_EXP 20
5441: PUSH
5442: LD_INT 2
5444: DIV
5445: PPUSH
5446: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5450: LD_ADDR_OWVAR 21
5454: PUSH
5455: LD_EXP 41
5459: PUSH
5460: LD_VAR 0 3
5464: ARRAY
5465: ST_TO_ADDR
// uc_side := aktresp ;
5466: LD_ADDR_OWVAR 20
5470: PUSH
5471: LD_VAR 0 3
5475: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5476: LD_ADDR_VAR 0 4
5480: PUSH
5481: LD_VAR 0 2
5485: PUSH
5486: LD_INT 1
5488: PPUSH
5489: LD_VAR 0 2
5493: PUSH
5494: LD_INT 0
5496: PLUS
5497: PPUSH
5498: CALL_OW 12
5502: ARRAY
5503: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5504: LD_VAR 0 4
5508: PPUSH
5509: CALL_OW 266
5513: PUSH
5514: LD_INT 0
5516: PUSH
5517: LD_INT 1
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: IN
5524: IFFALSE 5536
// n = 25 else
5526: LD_ADDR_VAR 0 1
5530: PUSH
5531: LD_INT 25
5533: ST_TO_ADDR
5534: GO 5544
// n = 10 ;
5536: LD_ADDR_VAR 0 1
5540: PUSH
5541: LD_INT 10
5543: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5544: CALL_OW 44
5548: PPUSH
5549: LD_VAR 0 4
5553: PPUSH
5554: CALL_OW 250
5558: PPUSH
5559: LD_VAR 0 4
5563: PPUSH
5564: CALL_OW 251
5568: PPUSH
5569: LD_VAR 0 1
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: CALL_OW 50
// end else
5581: GO 5584
// enable ;
5583: ENABLE
// end else
5584: GO 5587
// enable ;
5586: ENABLE
// end ;
5587: PPOPN 4
5589: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
5590: GO 5592
5592: DISABLE
5593: LD_INT 0
5595: PPUSH
5596: PPUSH
// begin case tick of 1 .. 1 1$0 :
5597: LD_OWVAR 1
5601: PUSH
5602: LD_INT 1
5604: DOUBLE
5605: GREATEREQUAL
5606: IFFALSE 5614
5608: LD_INT 2100
5610: DOUBLE
5611: LESSEQUAL
5612: IFTRUE 5616
5614: GO 5627
5616: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5617: LD_ADDR_VAR 0 1
5621: PUSH
5622: LD_INT 150
5624: ST_TO_ADDR
5625: GO 5810
5627: LD_INT 2100
5629: PUSH
5630: LD_INT 1
5632: PLUS
5633: DOUBLE
5634: GREATEREQUAL
5635: IFFALSE 5643
5637: LD_INT 10500
5639: DOUBLE
5640: LESSEQUAL
5641: IFTRUE 5645
5643: GO 5656
5645: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5646: LD_ADDR_VAR 0 1
5650: PUSH
5651: LD_INT 100
5653: ST_TO_ADDR
5654: GO 5810
5656: LD_INT 10500
5658: PUSH
5659: LD_INT 1
5661: PLUS
5662: DOUBLE
5663: GREATEREQUAL
5664: IFFALSE 5672
5666: LD_INT 21000
5668: DOUBLE
5669: LESSEQUAL
5670: IFTRUE 5674
5672: GO 5685
5674: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5675: LD_ADDR_VAR 0 1
5679: PUSH
5680: LD_INT 90
5682: ST_TO_ADDR
5683: GO 5810
5685: LD_INT 21000
5687: PUSH
5688: LD_INT 1
5690: PLUS
5691: DOUBLE
5692: GREATEREQUAL
5693: IFFALSE 5701
5695: LD_INT 42000
5697: DOUBLE
5698: LESSEQUAL
5699: IFTRUE 5703
5701: GO 5714
5703: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5704: LD_ADDR_VAR 0 1
5708: PUSH
5709: LD_INT 70
5711: ST_TO_ADDR
5712: GO 5810
5714: LD_INT 42000
5716: PUSH
5717: LD_INT 1
5719: PLUS
5720: DOUBLE
5721: GREATEREQUAL
5722: IFFALSE 5730
5724: LD_INT 63000
5726: DOUBLE
5727: LESSEQUAL
5728: IFTRUE 5732
5730: GO 5743
5732: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5733: LD_ADDR_VAR 0 1
5737: PUSH
5738: LD_INT 60
5740: ST_TO_ADDR
5741: GO 5810
5743: LD_INT 63000
5745: PUSH
5746: LD_INT 1
5748: PLUS
5749: DOUBLE
5750: GREATEREQUAL
5751: IFFALSE 5759
5753: LD_INT 105000
5755: DOUBLE
5756: LESSEQUAL
5757: IFTRUE 5761
5759: GO 5772
5761: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5762: LD_ADDR_VAR 0 1
5766: PUSH
5767: LD_INT 35
5769: ST_TO_ADDR
5770: GO 5810
5772: LD_INT 105000
5774: PUSH
5775: LD_INT 1
5777: PLUS
5778: DOUBLE
5779: GREATEREQUAL
5780: IFFALSE 5788
5782: LD_INT 630000
5784: DOUBLE
5785: LESSEQUAL
5786: IFTRUE 5790
5788: GO 5801
5790: POP
// d := 20 ; else
5791: LD_ADDR_VAR 0 1
5795: PUSH
5796: LD_INT 20
5798: ST_TO_ADDR
5799: GO 5810
5801: POP
// d := 0 ; end ;
5802: LD_ADDR_VAR 0 1
5806: PUSH
5807: LD_INT 0
5809: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
5810: LD_INT 1
5812: PPUSH
5813: LD_INT 10000
5815: PPUSH
5816: CALL_OW 12
5820: PUSH
5821: LD_VAR 0 1
5825: PUSH
5826: LD_EXP 23
5830: MUL
5831: PUSH
5832: LD_INT 2
5834: DIV
5835: LESSEQUAL
5836: IFFALSE 5959
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5838: LD_INT 1
5840: PPUSH
5841: LD_INT 140
5843: PPUSH
5844: CALL_OW 12
5848: PPUSH
5849: CALL_OW 67
// if shipment1 = [ ] then
5853: LD_LOC 5
5857: PUSH
5858: EMPTY
5859: EQUAL
5860: IFFALSE 5901
// shipment1 := [ base1 , base2 , base3 , base4 , safe1 , safe2 , safe3 , safe4 ] ;
5862: LD_ADDR_LOC 5
5866: PUSH
5867: LD_INT 18
5869: PUSH
5870: LD_INT 19
5872: PUSH
5873: LD_INT 20
5875: PUSH
5876: LD_INT 21
5878: PUSH
5879: LD_INT 26
5881: PUSH
5882: LD_INT 27
5884: PUSH
5885: LD_INT 28
5887: PUSH
5888: LD_INT 29
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_LOC 5
5910: PUSH
5911: LD_INT 1
5913: PPUSH
5914: LD_LOC 5
5918: PPUSH
5919: CALL_OW 12
5923: ARRAY
5924: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
5925: LD_ADDR_LOC 5
5929: PUSH
5930: LD_LOC 5
5934: PUSH
5935: LD_VAR 0 2
5939: PUSH
5940: EMPTY
5941: LIST
5942: DIFF
5943: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
5944: LD_INT 5
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: LD_INT 1
5954: PPUSH
5955: CALL_OW 55
// end ; enable ;
5959: ENABLE
// end ;
5960: PPOPN 2
5962: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
5963: GO 5965
5965: DISABLE
5966: LD_INT 0
5968: PPUSH
5969: PPUSH
// begin case tick of 1 .. 1 1$0 :
5970: LD_OWVAR 1
5974: PUSH
5975: LD_INT 1
5977: DOUBLE
5978: GREATEREQUAL
5979: IFFALSE 5987
5981: LD_INT 2100
5983: DOUBLE
5984: LESSEQUAL
5985: IFTRUE 5989
5987: GO 6000
5989: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5990: LD_ADDR_VAR 0 1
5994: PUSH
5995: LD_INT 150
5997: ST_TO_ADDR
5998: GO 6183
6000: LD_INT 2100
6002: PUSH
6003: LD_INT 1
6005: PLUS
6006: DOUBLE
6007: GREATEREQUAL
6008: IFFALSE 6016
6010: LD_INT 10500
6012: DOUBLE
6013: LESSEQUAL
6014: IFTRUE 6018
6016: GO 6029
6018: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6019: LD_ADDR_VAR 0 1
6023: PUSH
6024: LD_INT 100
6026: ST_TO_ADDR
6027: GO 6183
6029: LD_INT 10500
6031: PUSH
6032: LD_INT 1
6034: PLUS
6035: DOUBLE
6036: GREATEREQUAL
6037: IFFALSE 6045
6039: LD_INT 21000
6041: DOUBLE
6042: LESSEQUAL
6043: IFTRUE 6047
6045: GO 6058
6047: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6048: LD_ADDR_VAR 0 1
6052: PUSH
6053: LD_INT 90
6055: ST_TO_ADDR
6056: GO 6183
6058: LD_INT 21000
6060: PUSH
6061: LD_INT 1
6063: PLUS
6064: DOUBLE
6065: GREATEREQUAL
6066: IFFALSE 6074
6068: LD_INT 42000
6070: DOUBLE
6071: LESSEQUAL
6072: IFTRUE 6076
6074: GO 6087
6076: POP
// d := 80 ; 20 20$0 + 1 .. 30 30$0 :
6077: LD_ADDR_VAR 0 1
6081: PUSH
6082: LD_INT 80
6084: ST_TO_ADDR
6085: GO 6183
6087: LD_INT 42000
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: DOUBLE
6094: GREATEREQUAL
6095: IFFALSE 6103
6097: LD_INT 63000
6099: DOUBLE
6100: LESSEQUAL
6101: IFTRUE 6105
6103: GO 6116
6105: POP
// d := 70 ; 30 30$0 + 1 .. 50 50$0 :
6106: LD_ADDR_VAR 0 1
6110: PUSH
6111: LD_INT 70
6113: ST_TO_ADDR
6114: GO 6183
6116: LD_INT 63000
6118: PUSH
6119: LD_INT 1
6121: PLUS
6122: DOUBLE
6123: GREATEREQUAL
6124: IFFALSE 6132
6126: LD_INT 105000
6128: DOUBLE
6129: LESSEQUAL
6130: IFTRUE 6134
6132: GO 6145
6134: POP
// d := 55 ; 50 50$0 + 1 .. 300 300$0 :
6135: LD_ADDR_VAR 0 1
6139: PUSH
6140: LD_INT 55
6142: ST_TO_ADDR
6143: GO 6183
6145: LD_INT 105000
6147: PUSH
6148: LD_INT 1
6150: PLUS
6151: DOUBLE
6152: GREATEREQUAL
6153: IFFALSE 6161
6155: LD_INT 630000
6157: DOUBLE
6158: LESSEQUAL
6159: IFTRUE 6163
6161: GO 6174
6163: POP
// d := 40 ; else
6164: LD_ADDR_VAR 0 1
6168: PUSH
6169: LD_INT 40
6171: ST_TO_ADDR
6172: GO 6183
6174: POP
// d := 0 ; end ;
6175: LD_ADDR_VAR 0 1
6179: PUSH
6180: LD_INT 0
6182: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density * 2 div 3 then
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 10000
6188: PPUSH
6189: CALL_OW 12
6193: PUSH
6194: LD_VAR 0 1
6198: PUSH
6199: LD_EXP 23
6203: MUL
6204: PUSH
6205: LD_INT 2
6207: MUL
6208: PUSH
6209: LD_INT 3
6211: DIV
6212: LESSEQUAL
6213: IFFALSE 6352
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6215: LD_INT 1
6217: PPUSH
6218: LD_INT 140
6220: PPUSH
6221: CALL_OW 12
6225: PPUSH
6226: CALL_OW 67
// if shipment2 = [ ] then
6230: LD_LOC 6
6234: PUSH
6235: EMPTY
6236: EQUAL
6237: IFFALSE 6294
// shipment2 := [ between1 , between2 , between3 , between4 , ring1 , ring2 , ring3 , ring4 , center , center , center , center ] ;
6239: LD_ADDR_LOC 6
6243: PUSH
6244: LD_INT 30
6246: PUSH
6247: LD_INT 31
6249: PUSH
6250: LD_INT 32
6252: PUSH
6253: LD_INT 33
6255: PUSH
6256: LD_INT 34
6258: PUSH
6259: LD_INT 35
6261: PUSH
6262: LD_INT 36
6264: PUSH
6265: LD_INT 37
6267: PUSH
6268: LD_INT 38
6270: PUSH
6271: LD_INT 38
6273: PUSH
6274: LD_INT 38
6276: PUSH
6277: LD_INT 38
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
6294: LD_ADDR_VAR 0 2
6298: PUSH
6299: LD_LOC 6
6303: PUSH
6304: LD_INT 1
6306: PPUSH
6307: LD_LOC 6
6311: PPUSH
6312: CALL_OW 12
6316: ARRAY
6317: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
6318: LD_ADDR_LOC 6
6322: PUSH
6323: LD_LOC 6
6327: PUSH
6328: LD_VAR 0 2
6332: PUSH
6333: EMPTY
6334: LIST
6335: DIFF
6336: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
6337: LD_INT 5
6339: PPUSH
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 55
// end ; enable ;
6352: ENABLE
// end ; end_of_file
6353: PPOPN 2
6355: END
// function prepare_treasure ( x , y ) ; var sm , i ; begin
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
6360: PPUSH
// sm := rand ( 0 , 6 ) ;
6361: LD_ADDR_VAR 0 4
6365: PUSH
6366: LD_INT 0
6368: PPUSH
6369: LD_INT 6
6371: PPUSH
6372: CALL_OW 12
6376: ST_TO_ADDR
// for i := 0 to 15 do
6377: LD_ADDR_VAR 0 5
6381: PUSH
6382: DOUBLE
6383: LD_INT 0
6385: DEC
6386: ST_TO_ADDR
6387: LD_INT 15
6389: PUSH
6390: FOR_TO
6391: IFFALSE 6497
// begin MoveAreaXY ( p1 + i , x , y ) ;
6393: LD_INT 1
6395: PUSH
6396: LD_VAR 0 5
6400: PLUS
6401: PPUSH
6402: LD_VAR 0 1
6406: PPUSH
6407: LD_VAR 0 2
6411: PPUSH
6412: CALL_OW 425
// if prob ( 30 ) then
6416: LD_INT 30
6418: PPUSH
6419: CALL_OW 13
6423: IFFALSE 6441
// sm := rand ( 0 , 6 ) ;
6425: LD_ADDR_VAR 0 4
6429: PUSH
6430: LD_INT 0
6432: PPUSH
6433: LD_INT 6
6435: PPUSH
6436: CALL_OW 12
6440: ST_TO_ADDR
// x := ShiftX ( x - 1 , sm , 1 ) ;
6441: LD_ADDR_VAR 0 1
6445: PUSH
6446: LD_VAR 0 1
6450: PUSH
6451: LD_INT 1
6453: MINUS
6454: PPUSH
6455: LD_VAR 0 4
6459: PPUSH
6460: LD_INT 1
6462: PPUSH
6463: CALL_OW 272
6467: ST_TO_ADDR
// y := ShiftY ( y - 1 , sm , 1 ) ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: LD_VAR 0 2
6477: PUSH
6478: LD_INT 1
6480: MINUS
6481: PPUSH
6482: LD_VAR 0 4
6486: PPUSH
6487: LD_INT 1
6489: PPUSH
6490: CALL_OW 273
6494: ST_TO_ADDR
// end ;
6495: GO 6390
6497: POP
6498: POP
// end ;
6499: LD_VAR 0 3
6503: RET
// function show_treasure ; var i ; begin
6504: LD_INT 0
6506: PPUSH
6507: PPUSH
// SetAreaMapShow ( p16 , 1 ) ;
6508: LD_INT 16
6510: PPUSH
6511: LD_INT 1
6513: PPUSH
6514: CALL_OW 424
// for i := 1 to 15 do
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 15
6530: PUSH
6531: FOR_TO
6532: IFFALSE 6579
// begin wait ( 0 0$10 ) ;
6534: LD_INT 350
6536: PPUSH
6537: CALL_OW 67
// SetAreaMapShow ( p16 - i + 1 , 0 ) ;
6541: LD_INT 16
6543: PUSH
6544: LD_VAR 0 2
6548: MINUS
6549: PUSH
6550: LD_INT 1
6552: PLUS
6553: PPUSH
6554: LD_INT 0
6556: PPUSH
6557: CALL_OW 424
// SetAreaMapShow ( p16 - i , 1 ) ;
6561: LD_INT 16
6563: PUSH
6564: LD_VAR 0 2
6568: MINUS
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: CALL_OW 424
// end ;
6577: GO 6531
6579: POP
6580: POP
// wait ( 0 0$30 ) ;
6581: LD_INT 1050
6583: PPUSH
6584: CALL_OW 67
// SetAreaMapShow ( p1 , 0 ) ;
6588: LD_INT 1
6590: PPUSH
6591: LD_INT 0
6593: PPUSH
6594: CALL_OW 424
// end ;
6598: LD_VAR 0 1
6602: RET
// export function new_treasure ; var xy ; begin
6603: LD_INT 0
6605: PPUSH
6606: PPUSH
// xy := RandHexArea ( All , false ) ;
6607: LD_ADDR_VAR 0 2
6611: PUSH
6612: LD_INT 17
6614: PPUSH
6615: LD_INT 0
6617: PPUSH
6618: CALL_OW 16
6622: ST_TO_ADDR
// prepare_treasure ( xy [ 1 ] , xy [ 2 ] ) ;
6623: LD_VAR 0 2
6627: PUSH
6628: LD_INT 1
6630: ARRAY
6631: PPUSH
6632: LD_VAR 0 2
6636: PUSH
6637: LD_INT 2
6639: ARRAY
6640: PPUSH
6641: CALL 6356 0 2
// show_treasure ;
6645: CALL 6504 0 0
// end ; end_of_file
6649: LD_VAR 0 1
6653: RET
// export function Init_Win_Condition ; begin
6654: LD_INT 0
6656: PPUSH
// disable ( 98 ) ;
6657: LD_INT 98
6659: DISABLE_MARKED
// disable ( 99 ) ;
6660: LD_INT 99
6662: DISABLE_MARKED
// if Team_Game then
6663: LD_EXP 44
6667: IFFALSE 6674
// enable ( 98 ) else
6669: LD_INT 98
6671: ENABLE_MARKED
6672: GO 6677
// enable ( 99 ) ;
6674: LD_INT 99
6676: ENABLE_MARKED
// end ;
6677: LD_VAR 0 1
6681: RET
// function CanWinLoose ; begin
6682: LD_INT 0
6684: PPUSH
// Result := true ;
6685: LD_ADDR_VAR 0 1
6689: PUSH
6690: LD_INT 1
6692: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6693: CALL_OW 518
6697: PUSH
6698: CALL_OW 519
6702: PUSH
6703: LD_INT 0
6705: GREATER
6706: AND
6707: IFFALSE 6717
// Result := false ;
6709: LD_ADDR_VAR 0 1
6713: PUSH
6714: LD_INT 0
6716: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6717: CALL_OW 531
6721: PUSH
6722: CALL_OW 519
6726: PUSH
6727: LD_INT 1
6729: GREATER
6730: AND
6731: IFFALSE 6741
// Result := false ;
6733: LD_ADDR_VAR 0 1
6737: PUSH
6738: LD_INT 0
6740: ST_TO_ADDR
// end ;
6741: LD_VAR 0 1
6745: RET
// function HasPower ( i ) ; begin
6746: LD_INT 0
6748: PPUSH
// if def_people_respawning then
6749: LD_EXP 13
6753: IFFALSE 6844
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_INT 22
6762: PUSH
6763: LD_VAR 0 1
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 2
6774: PUSH
6775: LD_INT 21
6777: PUSH
6778: LD_INT 1
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: LD_INT 33
6787: PUSH
6788: LD_INT 3
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PUSH
6795: LD_INT 33
6797: PUSH
6798: LD_INT 5
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: LD_INT 30
6807: PUSH
6808: LD_INT 0
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: PUSH
6815: LD_INT 30
6817: PUSH
6818: LD_INT 1
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: ST_TO_ADDR
6842: GO 6909
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
6844: LD_ADDR_VAR 0 2
6848: PUSH
6849: LD_INT 22
6851: PUSH
6852: LD_VAR 0 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 1
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 33
6876: PUSH
6877: LD_INT 3
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 33
6886: PUSH
6887: LD_INT 5
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PPUSH
6904: CALL_OW 69
6908: ST_TO_ADDR
// end ;
6909: LD_VAR 0 2
6913: RET
// function AlliedSides ( i , j ) ; begin
6914: LD_INT 0
6916: PPUSH
// Result := false ;
6917: LD_ADDR_VAR 0 3
6921: PUSH
6922: LD_INT 0
6924: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
6925: LD_VAR 0 1
6929: PPUSH
6930: LD_VAR 0 2
6934: PPUSH
6935: CALL_OW 81
6939: PUSH
6940: LD_INT 1
6942: EQUAL
6943: PUSH
6944: LD_VAR 0 2
6948: PPUSH
6949: LD_VAR 0 1
6953: PPUSH
6954: CALL_OW 81
6958: PUSH
6959: LD_INT 1
6961: EQUAL
6962: AND
6963: PUSH
6964: LD_VAR 0 1
6968: PPUSH
6969: CALL_OW 83
6973: AND
6974: PUSH
6975: LD_VAR 0 2
6979: PPUSH
6980: CALL_OW 83
6984: AND
6985: IFFALSE 6995
// Result := true ;
6987: LD_ADDR_VAR 0 3
6991: PUSH
6992: LD_INT 1
6994: ST_TO_ADDR
// end ;
6995: LD_VAR 0 3
6999: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7000: CALL 6682 0 0
7004: IFFALSE 7013
7006: GO 7008
7008: DISABLE
// YouLostInMultiplayer ;
7009: CALL_OW 107
7013: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7014: CALL 6682 0 0
7018: IFFALSE 7042
7020: GO 7022
7022: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7023: LD_EXP 41
7027: PUSH
7028: LD_OWVAR 2
7032: ARRAY
7033: PPUSH
7034: CALL 9871 0 1
// YouWinInMultiplayer ;
7038: CALL_OW 106
// end ;
7042: END
// every 0 0$3 marked 98 do var i , CanWin ;
7043: GO 7045
7045: DISABLE
7046: LD_INT 0
7048: PPUSH
7049: PPUSH
// begin if not HasPower ( your_side ) then
7050: LD_OWVAR 2
7054: PPUSH
7055: CALL 6746 0 1
7059: NOT
7060: IFFALSE 7071
// begin Multiplayer_Loose_Message ;
7062: CALL_OW 521
// enable ( 400 ) ;
7066: LD_INT 400
7068: ENABLE_MARKED
// end else
7069: GO 7204
// begin CanWin := true ;
7071: LD_ADDR_VAR 0 2
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
// for i := 1 to 8 do
7079: LD_ADDR_VAR 0 1
7083: PUSH
7084: DOUBLE
7085: LD_INT 1
7087: DEC
7088: ST_TO_ADDR
7089: LD_INT 8
7091: PUSH
7092: FOR_TO
7093: IFFALSE 7190
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7095: LD_EXP 40
7099: PUSH
7100: LD_VAR 0 1
7104: ARRAY
7105: PUSH
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 108
7115: AND
7116: PUSH
7117: LD_VAR 0 1
7121: PUSH
7122: LD_OWVAR 2
7126: NONEQUAL
7127: AND
7128: IFFALSE 7188
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7130: LD_EXP 38
7134: PUSH
7135: LD_VAR 0 1
7139: ARRAY
7140: NOT
7141: PUSH
7142: LD_EXP 38
7146: PUSH
7147: LD_VAR 0 1
7151: ARRAY
7152: PUSH
7153: LD_EXP 38
7157: PUSH
7158: LD_OWVAR 2
7162: ARRAY
7163: NONEQUAL
7164: OR
7165: IFFALSE 7188
// if HasPower ( i ) then
7167: LD_VAR 0 1
7171: PPUSH
7172: CALL 6746 0 1
7176: IFFALSE 7188
// begin CanWin := false ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 0
7185: ST_TO_ADDR
// break ;
7186: GO 7190
// end ;
7188: GO 7092
7190: POP
7191: POP
// if CanWin then
7192: LD_VAR 0 2
7196: IFFALSE 7203
// enable ( 401 ) else
7198: LD_INT 401
7200: ENABLE_MARKED
7201: GO 7204
// enable ;
7203: ENABLE
// end ; end ;
7204: PPOPN 2
7206: END
// every 0 0$3 marked 99 do var i , CanWin ;
7207: GO 7209
7209: DISABLE
7210: LD_INT 0
7212: PPUSH
7213: PPUSH
// begin if not HasPower ( your_side ) then
7214: LD_OWVAR 2
7218: PPUSH
7219: CALL 6746 0 1
7223: NOT
7224: IFFALSE 7235
// begin Multiplayer_Loose_Message ;
7226: CALL_OW 521
// enable ( 400 ) ;
7230: LD_INT 400
7232: ENABLE_MARKED
// end else
7233: GO 7348
// begin CanWin := true ;
7235: LD_ADDR_VAR 0 2
7239: PUSH
7240: LD_INT 1
7242: ST_TO_ADDR
// for i := 1 to 8 do
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: DOUBLE
7249: LD_INT 1
7251: DEC
7252: ST_TO_ADDR
7253: LD_INT 8
7255: PUSH
7256: FOR_TO
7257: IFFALSE 7334
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7259: LD_EXP 40
7263: PUSH
7264: LD_VAR 0 1
7268: ARRAY
7269: PUSH
7270: LD_VAR 0 1
7274: PPUSH
7275: CALL_OW 108
7279: AND
7280: PUSH
7281: LD_VAR 0 1
7285: PUSH
7286: LD_OWVAR 2
7290: NONEQUAL
7291: AND
7292: IFFALSE 7332
// if not AlliedSides ( i , your_side ) then
7294: LD_VAR 0 1
7298: PPUSH
7299: LD_OWVAR 2
7303: PPUSH
7304: CALL 6914 0 2
7308: NOT
7309: IFFALSE 7332
// if HasPower ( i ) then
7311: LD_VAR 0 1
7315: PPUSH
7316: CALL 6746 0 1
7320: IFFALSE 7332
// begin CanWin := false ;
7322: LD_ADDR_VAR 0 2
7326: PUSH
7327: LD_INT 0
7329: ST_TO_ADDR
// break ;
7330: GO 7334
// end ;
7332: GO 7256
7334: POP
7335: POP
// if CanWin then
7336: LD_VAR 0 2
7340: IFFALSE 7347
// enable ( 401 ) else
7342: LD_INT 401
7344: ENABLE_MARKED
7345: GO 7348
// enable ;
7347: ENABLE
// end ; end ; end_of_file
7348: PPOPN 2
7350: END
// var infos ; export function init_infos ; begin
7351: LD_INT 0
7353: PPUSH
// infos = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7354: LD_ADDR_LOC 9
7358: PUSH
7359: LD_INT 0
7361: PUSH
7362: LD_INT 0
7364: PUSH
7365: LD_INT 0
7367: PUSH
7368: LD_INT 0
7370: PUSH
7371: LD_INT 0
7373: PUSH
7374: LD_INT 0
7376: PUSH
7377: LD_INT 0
7379: PUSH
7380: LD_INT 0
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: ST_TO_ADDR
// real_cost = cost ;
7393: LD_ADDR_EXP 29
7397: PUSH
7398: LD_EXP 27
7402: ST_TO_ADDR
// cost = cost * 10 ;
7403: LD_ADDR_EXP 27
7407: PUSH
7408: LD_EXP 27
7412: PUSH
7413: LD_INT 10
7415: MUL
7416: ST_TO_ADDR
// end ;
7417: LD_VAR 0 1
7421: RET
// every 0 0$1 do
7422: GO 7424
7424: DISABLE
// begin if gametype <> 11 then
7425: LD_EXP 1
7429: PUSH
7430: LD_INT 11
7432: NONEQUAL
7433: IFFALSE 7437
// exit ;
7435: GO 7526
// if decr_cost_time = 0 then
7437: LD_EXP 28
7441: PUSH
7442: LD_INT 0
7444: EQUAL
7445: IFFALSE 7467
// real_cost = ( cost div 100 ) * 10 else
7447: LD_ADDR_EXP 29
7451: PUSH
7452: LD_EXP 27
7456: PUSH
7457: LD_INT 100
7459: DIV
7460: PUSH
7461: LD_INT 10
7463: MUL
7464: ST_TO_ADDR
7465: GO 7526
// repeat wait ( decr_cost_time div 5 ) ;
7467: LD_EXP 28
7471: PUSH
7472: LD_INT 5
7474: DIV
7475: PPUSH
7476: CALL_OW 67
// cost = cost * 1000 div 1149 ;
7480: LD_ADDR_EXP 27
7484: PUSH
7485: LD_EXP 27
7489: PUSH
7490: LD_INT 1000
7492: MUL
7493: PUSH
7494: LD_INT 1149
7496: DIV
7497: ST_TO_ADDR
// real_cost = ( cost div 100 ) * 10 ;
7498: LD_ADDR_EXP 29
7502: PUSH
7503: LD_EXP 27
7507: PUSH
7508: LD_INT 100
7510: DIV
7511: PUSH
7512: LD_INT 10
7514: MUL
7515: ST_TO_ADDR
// until real_cost = 10 ;
7516: LD_EXP 29
7520: PUSH
7521: LD_INT 10
7523: EQUAL
7524: IFFALSE 7467
// end ;
7526: END
// every 0 0$2 do
7527: GO 7529
7529: DISABLE
// begin if gametype <> 11 then
7530: LD_EXP 1
7534: PUSH
7535: LD_INT 11
7537: NONEQUAL
7538: IFFALSE 7546
// ShowTimer else
7540: CALL 7964 0 0
7544: GO 7550
// ShowInfos ;
7546: CALL 7552 0 0
// enable ;
7550: ENABLE
// end ;
7551: END
// function ShowInfos ; var inf , en1 , en2 , AllStrings ; begin
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
7556: PPUSH
7557: PPUSH
7558: PPUSH
// if gametype <> 11 then
7559: LD_EXP 1
7563: PUSH
7564: LD_INT 11
7566: NONEQUAL
7567: IFFALSE 7571
// exit ;
7569: GO 7959
// if not your_side then
7571: LD_OWVAR 2
7575: NOT
7576: IFFALSE 7581
// begin enable ;
7578: ENABLE
// exit ;
7579: GO 7959
// end ; if Teams [ Side_Teams [ your_side ] ] [ 1 ] = your_side then
7581: LD_EXP 39
7585: PUSH
7586: LD_EXP 38
7590: PUSH
7591: LD_OWVAR 2
7595: ARRAY
7596: ARRAY
7597: PUSH
7598: LD_INT 1
7600: ARRAY
7601: PUSH
7602: LD_OWVAR 2
7606: EQUAL
7607: IFFALSE 7671
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7609: LD_ADDR_VAR 0 3
7613: PUSH
7614: LD_EXP 39
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: LD_EXP 38
7626: PUSH
7627: LD_OWVAR 2
7631: ARRAY
7632: MINUS
7633: ARRAY
7634: PUSH
7635: LD_INT 2
7637: ARRAY
7638: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7639: LD_ADDR_VAR 0 4
7643: PUSH
7644: LD_EXP 39
7648: PUSH
7649: LD_INT 3
7651: PUSH
7652: LD_EXP 38
7656: PUSH
7657: LD_OWVAR 2
7661: ARRAY
7662: MINUS
7663: ARRAY
7664: PUSH
7665: LD_INT 1
7667: ARRAY
7668: ST_TO_ADDR
// end else
7669: GO 7731
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7671: LD_ADDR_VAR 0 3
7675: PUSH
7676: LD_EXP 39
7680: PUSH
7681: LD_INT 3
7683: PUSH
7684: LD_EXP 38
7688: PUSH
7689: LD_OWVAR 2
7693: ARRAY
7694: MINUS
7695: ARRAY
7696: PUSH
7697: LD_INT 1
7699: ARRAY
7700: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7701: LD_ADDR_VAR 0 4
7705: PUSH
7706: LD_EXP 39
7710: PUSH
7711: LD_INT 3
7713: PUSH
7714: LD_EXP 38
7718: PUSH
7719: LD_OWVAR 2
7723: ARRAY
7724: MINUS
7725: ARRAY
7726: PUSH
7727: LD_INT 2
7729: ARRAY
7730: ST_TO_ADDR
// end ; AllStrings := [ #Multi1x1-Time , tick ] ;
7731: LD_ADDR_VAR 0 5
7735: PUSH
7736: LD_STRING #Multi1x1-Time
7738: PUSH
7739: LD_OWVAR 1
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7748: LD_INT 0
7750: PUSH
7751: LD_EXP 33
7755: PUSH
7756: LD_OWVAR 1
7760: MINUS
7761: LESSEQUAL
7762: IFFALSE 7793
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7764: LD_ADDR_VAR 0 5
7768: PUSH
7769: LD_VAR 0 5
7773: PUSH
7774: LD_STRING #allowedsibbomb
7776: PUSH
7777: LD_EXP 33
7781: PUSH
7782: LD_OWVAR 1
7786: MINUS
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: ADD
7792: ST_TO_ADDR
// case infos [ your_side ] of 0 :
7793: LD_LOC 9
7797: PUSH
7798: LD_OWVAR 2
7802: ARRAY
7803: PUSH
7804: LD_INT 0
7806: DOUBLE
7807: EQUAL
7808: IFTRUE 7812
7810: GO 7839
7812: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Bid1 , real_cost ] ;
7813: LD_ADDR_OWVAR 47
7817: PUSH
7818: LD_VAR 0 5
7822: PUSH
7823: LD_STRING #MultiParty-Bid1
7825: PUSH
7826: LD_EXP 29
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: ADD
7835: ST_TO_ADDR
// enable ;
7836: ENABLE
// end ; 1 :
7837: GO 7959
7839: LD_INT 1
7841: DOUBLE
7842: EQUAL
7843: IFTRUE 7847
7845: GO 7895
7847: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info1 , en1 , en1 , - 1 , #MultiParty-Bid2 , real_cost ] ;
7848: LD_ADDR_OWVAR 47
7852: PUSH
7853: LD_VAR 0 5
7857: PUSH
7858: LD_STRING #MultiParty-Info1
7860: PUSH
7861: LD_VAR 0 3
7865: PUSH
7866: LD_VAR 0 3
7870: PUSH
7871: LD_INT 1
7873: NEG
7874: PUSH
7875: LD_STRING #MultiParty-Bid2
7877: PUSH
7878: LD_EXP 29
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: ADD
7891: ST_TO_ADDR
// enable ;
7892: ENABLE
// end ; 2 :
7893: GO 7959
7895: LD_INT 2
7897: DOUBLE
7898: EQUAL
7899: IFTRUE 7903
7901: GO 7958
7903: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info2 , en1 , en1 , - 1 , en2 , en2 , - 1 ] ;
7904: LD_ADDR_OWVAR 47
7908: PUSH
7909: LD_VAR 0 5
7913: PUSH
7914: LD_STRING #MultiParty-Info2
7916: PUSH
7917: LD_VAR 0 3
7921: PUSH
7922: LD_VAR 0 3
7926: PUSH
7927: LD_INT 1
7929: NEG
7930: PUSH
7931: LD_VAR 0 4
7935: PUSH
7936: LD_VAR 0 4
7940: PUSH
7941: LD_INT 1
7943: NEG
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: ADD
7954: ST_TO_ADDR
// enable ;
7955: ENABLE
// end ; end ;
7956: GO 7959
7958: POP
// end ;
7959: LD_VAR 0 1
7963: RET
// function ShowTimer ; var AllStrings ; begin
7964: LD_INT 0
7966: PPUSH
7967: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7968: LD_ADDR_VAR 0 2
7972: PUSH
7973: LD_STRING #Multi1x1-Time
7975: PUSH
7976: LD_OWVAR 1
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7985: LD_INT 0
7987: PUSH
7988: LD_EXP 33
7992: PUSH
7993: LD_OWVAR 1
7997: MINUS
7998: LESSEQUAL
7999: IFFALSE 8030
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8001: LD_ADDR_VAR 0 2
8005: PUSH
8006: LD_VAR 0 2
8010: PUSH
8011: LD_STRING #allowedsibbomb
8013: PUSH
8014: LD_EXP 33
8018: PUSH
8019: LD_OWVAR 1
8023: MINUS
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: ADD
8029: ST_TO_ADDR
// Display_Strings := AllStrings ;
8030: LD_ADDR_OWVAR 47
8034: PUSH
8035: LD_VAR 0 2
8039: ST_TO_ADDR
// end ;
8040: LD_VAR 0 1
8044: RET
// function check_area ( side , area ) ; begin
8045: LD_INT 0
8047: PPUSH
// if infos [ side ] = 2 then
8048: LD_LOC 9
8052: PUSH
8053: LD_VAR 0 1
8057: ARRAY
8058: PUSH
8059: LD_INT 2
8061: EQUAL
8062: IFFALSE 8066
// exit ;
8064: GO 8137
// if GetResourceArea ( area , mat_cans ) * 10 >= real_cost then
8066: LD_VAR 0 2
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: CALL_OW 287
8078: PUSH
8079: LD_INT 10
8081: MUL
8082: PUSH
8083: LD_EXP 29
8087: GREATEREQUAL
8088: IFFALSE 8137
// begin EraseResourceArea ( area , mat_cans ) ;
8090: LD_VAR 0 2
8094: PPUSH
8095: LD_INT 1
8097: PPUSH
8098: CALL_OW 286
// infos = Replace ( infos , side , infos [ side ] + 1 ) ;
8102: LD_ADDR_LOC 9
8106: PUSH
8107: LD_LOC 9
8111: PPUSH
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_LOC 9
8121: PUSH
8122: LD_VAR 0 1
8126: ARRAY
8127: PUSH
8128: LD_INT 1
8130: PLUS
8131: PPUSH
8132: CALL_OW 1
8136: ST_TO_ADDR
// end ; end ;
8137: LD_VAR 0 3
8141: RET
// every 0 0$5 do var i ;
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
// begin for i := 1 to Side_Positions do
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: DOUBLE
8154: LD_INT 1
8156: DEC
8157: ST_TO_ADDR
8158: LD_EXP 40
8162: PUSH
8163: FOR_TO
8164: IFFALSE 8272
// case Side_Positions [ i ] of 1 :
8166: LD_EXP 40
8170: PUSH
8171: LD_VAR 0 1
8175: ARRAY
8176: PUSH
8177: LD_INT 1
8179: DOUBLE
8180: EQUAL
8181: IFTRUE 8185
8183: GO 8200
8185: POP
// check_area ( i , exit1 ) ; 2 :
8186: LD_VAR 0 1
8190: PPUSH
8191: LD_INT 22
8193: PPUSH
8194: CALL 8045 0 2
8198: GO 8270
8200: LD_INT 2
8202: DOUBLE
8203: EQUAL
8204: IFTRUE 8208
8206: GO 8223
8208: POP
// check_area ( i , exit2 ) ; 3 :
8209: LD_VAR 0 1
8213: PPUSH
8214: LD_INT 23
8216: PPUSH
8217: CALL 8045 0 2
8221: GO 8270
8223: LD_INT 3
8225: DOUBLE
8226: EQUAL
8227: IFTRUE 8231
8229: GO 8246
8231: POP
// check_area ( i , exit3 ) ; 4 :
8232: LD_VAR 0 1
8236: PPUSH
8237: LD_INT 24
8239: PPUSH
8240: CALL 8045 0 2
8244: GO 8270
8246: LD_INT 4
8248: DOUBLE
8249: EQUAL
8250: IFTRUE 8254
8252: GO 8269
8254: POP
// check_area ( i , exit4 ) ; end ;
8255: LD_VAR 0 1
8259: PPUSH
8260: LD_INT 25
8262: PPUSH
8263: CALL 8045 0 2
8267: GO 8270
8269: POP
8270: GO 8163
8272: POP
8273: POP
// enable ;
8274: ENABLE
// exit ;
8275: GO 8277
// end ; end_of_file
8277: PPOPN 1
8279: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8280: LD_INT 0
8282: PPUSH
8283: PPUSH
// for un in battle_flags_id do
8284: LD_ADDR_VAR 0 2
8288: PUSH
8289: LD_EXP 49
8293: PUSH
8294: FOR_IN
8295: IFFALSE 8370
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8297: LD_VAR 0 2
8301: PPUSH
8302: LD_INT 1
8304: PUSH
8305: LD_LOC 10
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: PUSH
8314: LD_INT 2
8316: PUSH
8317: LD_LOC 10
8321: PUSH
8322: LD_INT 2
8324: DIV
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 3
8332: PUSH
8333: LD_LOC 10
8337: PUSH
8338: LD_INT 5
8340: DIV
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: LD_INT 20
8348: PUSH
8349: LD_LOC 10
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: PPUSH
8364: CALL_OW 423
8368: GO 8294
8370: POP
8371: POP
// end ;
8372: LD_VAR 0 1
8376: RET
// every 0 0$0.1 do var un ;
8377: GO 8379
8379: DISABLE
8380: LD_INT 0
8382: PPUSH
// begin if not def_morale_flags then
8383: LD_EXP 10
8387: NOT
8388: IFFALSE 8392
// exit ;
8390: GO 8469
// if not morale_decreasing_time then
8392: LD_EXP 24
8396: NOT
8397: IFFALSE 8401
// exit ;
8399: GO 8469
// strength = 100 ;
8401: LD_ADDR_LOC 10
8405: PUSH
8406: LD_INT 100
8408: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8409: LD_EXP 24
8413: PPUSH
8414: CALL_OW 67
// strength := strength - 1 ;
8418: LD_ADDR_LOC 10
8422: PUSH
8423: LD_LOC 10
8427: PUSH
8428: LD_INT 1
8430: MINUS
8431: ST_TO_ADDR
// Update_Flags ;
8432: CALL 8280 0 0
// until not strength ;
8436: LD_LOC 10
8440: NOT
8441: IFFALSE 8409
// for un in battle_flags_id do
8443: LD_ADDR_VAR 0 1
8447: PUSH
8448: LD_EXP 49
8452: PUSH
8453: FOR_IN
8454: IFFALSE 8467
// KillBattleFlag ( un ) ;
8456: LD_VAR 0 1
8460: PPUSH
8461: CALL_OW 419
8465: GO 8453
8467: POP
8468: POP
// end ; end_of_file
8469: PPOPN 1
8471: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8472: LD_VAR 0 1
8476: PPUSH
8477: CALL_OW 266
8481: PUSH
8482: LD_INT 0
8484: PUSH
8485: LD_INT 1
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: IN
8492: IFFALSE 8517
// SetBName ( b , @ & GetSide ( b ) ) ;
8494: LD_VAR 0 1
8498: PPUSH
8499: LD_STRING @
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 255
8511: STR
8512: PPUSH
8513: CALL_OW 500
// end ;
8517: PPOPN 2
8519: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8520: LD_VAR 0 1
8524: PPUSH
8525: CALL_OW 266
8529: PUSH
8530: LD_INT 0
8532: PUSH
8533: LD_INT 1
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: IN
8540: IFFALSE 8565
// SetBName ( b , @ & GetSide ( b ) ) ;
8542: LD_VAR 0 1
8546: PPUSH
8547: LD_STRING @
8549: PUSH
8550: LD_VAR 0 1
8554: PPUSH
8555: CALL_OW 255
8559: STR
8560: PPUSH
8561: CALL_OW 500
// end ;
8565: PPOPN 3
8567: END
// on VehicleConstructed ( veh , fac ) do var side ;
8568: LD_INT 0
8570: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8571: LD_VAR 0 1
8575: PPUSH
8576: CALL_OW 263
8580: PUSH
8581: LD_INT 5
8583: EQUAL
8584: IFFALSE 8726
// begin side := GetSide ( veh ) ;
8586: LD_ADDR_VAR 0 3
8590: PUSH
8591: LD_VAR 0 1
8595: PPUSH
8596: CALL_OW 255
8600: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8601: LD_ADDR_EXP 53
8605: PUSH
8606: LD_EXP 53
8610: PPUSH
8611: LD_VAR 0 3
8615: PPUSH
8616: LD_EXP 53
8620: PUSH
8621: LD_VAR 0 3
8625: ARRAY
8626: PPUSH
8627: LD_INT 52
8629: PUSH
8630: EMPTY
8631: LIST
8632: PPUSH
8633: CALL_OW 72
8637: PUSH
8638: LD_INT 22
8640: PUSH
8641: LD_VAR 0 3
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 33
8655: PUSH
8656: LD_INT 5
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 25
8665: PUSH
8666: LD_INT 12
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 25
8675: PUSH
8676: LD_INT 15
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 25
8685: PUSH
8686: LD_INT 16
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 25
8695: PUSH
8696: LD_INT 17
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PPUSH
8715: CALL_OW 69
8719: UNION
8720: PPUSH
8721: CALL_OW 1
8725: ST_TO_ADDR
// end ; end ;
8726: PPOPN 3
8728: END
// on UnitDestroyed ( j ) do begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 257
8738: PUSH
8739: LD_INT 12
8741: PUSH
8742: LD_INT 15
8744: PUSH
8745: LD_INT 17
8747: PUSH
8748: LD_INT 16
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: IN
8757: PUSH
8758: LD_VAR 0 1
8762: PPUSH
8763: CALL_OW 263
8767: PUSH
8768: LD_INT 5
8770: EQUAL
8771: OR
8772: IFFALSE 8783
// ApeKilled ( j ) ;
8774: LD_VAR 0 1
8778: PPUSH
8779: CALL 9685 0 1
// end ;
8783: PPOPN 1
8785: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8786: LD_VAR 0 1
8790: PPUSH
8791: LD_VAR 0 2
8795: PPUSH
8796: LD_VAR 0 3
8800: PPUSH
8801: LD_OWVAR 2
8805: PPUSH
8806: CALL 9829 0 4
8810: PPOPN 3
8812: END
// every 20 20$00 trigger apemanNumber do
8813: LD_EXP 50
8817: IFFALSE 8850
8819: GO 8821
8821: DISABLE
// begin enable ;
8822: ENABLE
// if apeLevel >= 8 then
8823: LD_EXP 55
8827: PUSH
8828: LD_INT 8
8830: GREATEREQUAL
8831: IFFALSE 8836
// disable else
8833: DISABLE
8834: GO 8850
// apeLevel := apeLevel + 1 ;
8836: LD_ADDR_EXP 55
8840: PUSH
8841: LD_EXP 55
8845: PUSH
8846: LD_INT 1
8848: PLUS
8849: ST_TO_ADDR
// end ;
8850: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
8851: LD_EXP 50
8855: PUSH
8856: LD_EXP 51
8860: LESS
8861: IFFALSE 9001
8863: GO 8865
8865: DISABLE
8866: LD_INT 0
8868: PPUSH
8869: PPUSH
8870: PPUSH
8871: PPUSH
// begin enable ;
8872: ENABLE
// for i := 1 to apemanPos do
8873: LD_ADDR_VAR 0 1
8877: PUSH
8878: DOUBLE
8879: LD_INT 1
8881: DEC
8882: ST_TO_ADDR
8883: LD_EXP 53
8887: PUSH
8888: FOR_TO
8889: IFFALSE 8999
// begin if apemanPlayerCount [ i ] then
8891: LD_EXP 54
8895: PUSH
8896: LD_VAR 0 1
8900: ARRAY
8901: IFFALSE 8997
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
8903: LD_EXP 54
8907: PUSH
8908: LD_VAR 0 1
8912: ARRAY
8913: PUSH
8914: LD_EXP 53
8918: PUSH
8919: LD_VAR 0 1
8923: ARRAY
8924: GREATER
8925: IFFALSE 8997
// begin ape := PrepareApeman ;
8927: LD_ADDR_VAR 0 2
8931: PUSH
8932: CALL 9504 0 0
8936: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
8937: LD_VAR 0 2
8941: PPUSH
8942: LD_EXP 56
8946: PUSH
8947: LD_VAR 0 1
8951: ARRAY
8952: PPUSH
8953: LD_INT 0
8955: PPUSH
8956: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
8960: LD_ADDR_EXP 53
8964: PUSH
8965: LD_EXP 53
8969: PPUSH
8970: LD_VAR 0 1
8974: PPUSH
8975: LD_EXP 53
8979: PUSH
8980: LD_VAR 0 1
8984: ARRAY
8985: PUSH
8986: LD_VAR 0 2
8990: UNION
8991: PPUSH
8992: CALL_OW 1
8996: ST_TO_ADDR
// end ; end ; end ;
8997: GO 8888
8999: POP
9000: POP
// end ;
9001: PPOPN 4
9003: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
9004: LD_INT 0
9006: PPUSH
9007: PPUSH
9008: PPUSH
9009: PPUSH
9010: PPUSH
9011: PPUSH
9012: PPUSH
// playersAmount := 0 ;
9013: LD_ADDR_VAR 0 3
9017: PUSH
9018: LD_INT 0
9020: ST_TO_ADDR
// _apeAreas := [ ape1 , ape2 , ape3 , ape4 ] ;
9021: LD_ADDR_VAR 0 7
9025: PUSH
9026: LD_INT 39
9028: PUSH
9029: LD_INT 40
9031: PUSH
9032: LD_INT 41
9034: PUSH
9035: LD_INT 42
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9044: LD_ADDR_EXP 56
9048: PUSH
9049: LD_INT 0
9051: PUSH
9052: LD_INT 0
9054: PUSH
9055: LD_INT 0
9057: PUSH
9058: LD_INT 0
9060: PUSH
9061: LD_INT 0
9063: PUSH
9064: LD_INT 0
9066: PUSH
9067: LD_INT 0
9069: PUSH
9070: LD_INT 0
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: ST_TO_ADDR
// for j = 1 to Side_Positions do
9083: LD_ADDR_VAR 0 4
9087: PUSH
9088: DOUBLE
9089: LD_INT 1
9091: DEC
9092: ST_TO_ADDR
9093: LD_EXP 40
9097: PUSH
9098: FOR_TO
9099: IFFALSE 9166
// if Side_Positions [ j ] then
9101: LD_EXP 40
9105: PUSH
9106: LD_VAR 0 4
9110: ARRAY
9111: IFFALSE 9164
// begin playersAmount := playersAmount + 1 ;
9113: LD_ADDR_VAR 0 3
9117: PUSH
9118: LD_VAR 0 3
9122: PUSH
9123: LD_INT 1
9125: PLUS
9126: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
9127: LD_ADDR_EXP 56
9131: PUSH
9132: LD_EXP 56
9136: PPUSH
9137: LD_VAR 0 4
9141: PPUSH
9142: LD_VAR 0 7
9146: PUSH
9147: LD_EXP 40
9151: PUSH
9152: LD_VAR 0 4
9156: ARRAY
9157: ARRAY
9158: PPUSH
9159: CALL_OW 1
9163: ST_TO_ADDR
// end ;
9164: GO 9098
9166: POP
9167: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
9168: LD_ADDR_EXP 52
9172: PUSH
9173: LD_INT 3
9175: PUSH
9176: LD_EXP 32
9180: MUL
9181: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
9182: LD_ADDR_EXP 50
9186: PUSH
9187: LD_VAR 0 3
9191: PUSH
9192: LD_EXP 52
9196: MUL
9197: ST_TO_ADDR
// apemanLimit := apemanNumber ;
9198: LD_ADDR_EXP 51
9202: PUSH
9203: LD_EXP 50
9207: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9208: LD_ADDR_EXP 53
9212: PUSH
9213: LD_INT 0
9215: PUSH
9216: LD_INT 0
9218: PUSH
9219: LD_INT 0
9221: PUSH
9222: LD_INT 0
9224: PUSH
9225: LD_INT 0
9227: PUSH
9228: LD_INT 0
9230: PUSH
9231: LD_INT 0
9233: PUSH
9234: LD_INT 0
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9247: LD_ADDR_EXP 54
9251: PUSH
9252: LD_INT 0
9254: PUSH
9255: LD_INT 0
9257: PUSH
9258: LD_INT 0
9260: PUSH
9261: LD_INT 0
9263: PUSH
9264: LD_INT 0
9266: PUSH
9267: LD_INT 0
9269: PUSH
9270: LD_INT 0
9272: PUSH
9273: LD_INT 0
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: ST_TO_ADDR
// apeLevel := 1 ;
9286: LD_ADDR_EXP 55
9290: PUSH
9291: LD_INT 1
9293: ST_TO_ADDR
// if not apemanNumber then
9294: LD_EXP 50
9298: NOT
9299: IFFALSE 9303
// exit ;
9301: GO 9499
// for i := 1 to apemanPerPlayer do
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: DOUBLE
9309: LD_INT 1
9311: DEC
9312: ST_TO_ADDR
9313: LD_EXP 52
9317: PUSH
9318: FOR_TO
9319: IFFALSE 9497
// begin for j := 1 to Side_Positions do
9321: LD_ADDR_VAR 0 4
9325: PUSH
9326: DOUBLE
9327: LD_INT 1
9329: DEC
9330: ST_TO_ADDR
9331: LD_EXP 40
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9493
// if Side_Positions [ j ] then
9339: LD_EXP 40
9343: PUSH
9344: LD_VAR 0 4
9348: ARRAY
9349: IFFALSE 9491
// begin pos := Side_Positions [ j ] ;
9351: LD_ADDR_VAR 0 6
9355: PUSH
9356: LD_EXP 40
9360: PUSH
9361: LD_VAR 0 4
9365: ARRAY
9366: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
9367: LD_ADDR_EXP 54
9371: PUSH
9372: LD_EXP 54
9376: PPUSH
9377: LD_VAR 0 4
9381: PPUSH
9382: LD_EXP 54
9386: PUSH
9387: LD_VAR 0 4
9391: ARRAY
9392: PUSH
9393: LD_INT 1
9395: PLUS
9396: PPUSH
9397: CALL_OW 1
9401: ST_TO_ADDR
// ape := PrepareApeman ;
9402: LD_ADDR_VAR 0 5
9406: PUSH
9407: CALL 9504 0 0
9411: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
9412: LD_ADDR_EXP 53
9416: PUSH
9417: LD_EXP 53
9421: PPUSH
9422: LD_VAR 0 4
9426: PPUSH
9427: LD_EXP 53
9431: PUSH
9432: LD_VAR 0 4
9436: ARRAY
9437: PPUSH
9438: LD_EXP 53
9442: PUSH
9443: LD_VAR 0 4
9447: ARRAY
9448: PUSH
9449: LD_INT 1
9451: PLUS
9452: PPUSH
9453: LD_VAR 0 5
9457: PPUSH
9458: CALL_OW 1
9462: PPUSH
9463: CALL_OW 1
9467: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
9468: LD_VAR 0 5
9472: PPUSH
9473: LD_EXP 56
9477: PUSH
9478: LD_VAR 0 4
9482: ARRAY
9483: PPUSH
9484: LD_INT 0
9486: PPUSH
9487: CALL_OW 49
// end ;
9491: GO 9336
9493: POP
9494: POP
// end ;
9495: GO 9318
9497: POP
9498: POP
// end ;
9499: LD_VAR 0 1
9503: RET
// export function PrepareApeman ; var bonus ; begin
9504: LD_INT 0
9506: PPUSH
9507: PPUSH
// uc_side := 0 ;
9508: LD_ADDR_OWVAR 20
9512: PUSH
9513: LD_INT 0
9515: ST_TO_ADDR
// uc_nation := 0 ;
9516: LD_ADDR_OWVAR 21
9520: PUSH
9521: LD_INT 0
9523: ST_TO_ADDR
// InitHc ;
9524: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
9528: LD_ADDR_VAR 0 2
9532: PUSH
9533: LD_INT 1
9535: NEG
9536: PUSH
9537: LD_INT 0
9539: PUSH
9540: LD_INT 1
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: LIST
9547: PUSH
9548: LD_OWVAR 1
9552: PUSH
9553: LD_INT 3
9555: MOD
9556: PUSH
9557: LD_INT 1
9559: PLUS
9560: ARRAY
9561: ST_TO_ADDR
// hc_class := class_apeman ;
9562: LD_ADDR_OWVAR 28
9566: PUSH
9567: LD_INT 12
9569: ST_TO_ADDR
// hc_gallery :=  ;
9570: LD_ADDR_OWVAR 33
9574: PUSH
9575: LD_STRING 
9577: ST_TO_ADDR
// hc_name :=  ;
9578: LD_ADDR_OWVAR 26
9582: PUSH
9583: LD_STRING 
9585: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
9586: LD_ADDR_OWVAR 31
9590: PUSH
9591: LD_EXP 55
9595: PUSH
9596: LD_VAR 0 2
9600: PLUS
9601: PUSH
9602: LD_EXP 55
9606: PUSH
9607: LD_VAR 0 2
9611: PLUS
9612: PUSH
9613: LD_EXP 55
9617: PUSH
9618: LD_VAR 0 2
9622: PLUS
9623: PUSH
9624: LD_EXP 55
9628: PUSH
9629: LD_VAR 0 2
9633: PLUS
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
9641: LD_ADDR_OWVAR 35
9645: PUSH
9646: LD_INT 10
9648: PUSH
9649: LD_VAR 0 2
9653: MUL
9654: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
9655: LD_ADDR_OWVAR 29
9659: PUSH
9660: LD_INT 12
9662: PUSH
9663: LD_INT 10
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: ST_TO_ADDR
// result := CreateHuman ;
9670: LD_ADDR_VAR 0 1
9674: PUSH
9675: CALL_OW 44
9679: ST_TO_ADDR
// end ;
9680: LD_VAR 0 1
9684: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
9685: LD_INT 0
9687: PPUSH
9688: PPUSH
9689: PPUSH
// if not ape then
9690: LD_VAR 0 1
9694: NOT
9695: IFFALSE 9699
// exit ;
9697: GO 9824
// side := GetSide ( ape ) ;
9699: LD_ADDR_VAR 0 3
9703: PUSH
9704: LD_VAR 0 1
9708: PPUSH
9709: CALL_OW 255
9713: ST_TO_ADDR
// if not side then
9714: LD_VAR 0 3
9718: NOT
9719: IFFALSE 9773
// begin for i = 1 to apemanPos do
9721: LD_ADDR_VAR 0 4
9725: PUSH
9726: DOUBLE
9727: LD_INT 1
9729: DEC
9730: ST_TO_ADDR
9731: LD_EXP 53
9735: PUSH
9736: FOR_TO
9737: IFFALSE 9771
// if ape in apemanPos [ i ] then
9739: LD_VAR 0 1
9743: PUSH
9744: LD_EXP 53
9748: PUSH
9749: LD_VAR 0 4
9753: ARRAY
9754: IN
9755: IFFALSE 9769
// begin side := i ;
9757: LD_ADDR_VAR 0 3
9761: PUSH
9762: LD_VAR 0 4
9766: ST_TO_ADDR
// break ;
9767: GO 9771
// end ;
9769: GO 9736
9771: POP
9772: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
9773: LD_ADDR_EXP 53
9777: PUSH
9778: LD_EXP 53
9782: PPUSH
9783: LD_VAR 0 3
9787: PPUSH
9788: LD_EXP 53
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PUSH
9799: LD_VAR 0 1
9803: DIFF
9804: PPUSH
9805: CALL_OW 1
9809: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
9810: LD_ADDR_EXP 50
9814: PUSH
9815: LD_EXP 50
9819: PUSH
9820: LD_INT 1
9822: MINUS
9823: ST_TO_ADDR
// end ; end_of_file
9824: LD_VAR 0 2
9828: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9829: LD_INT 0
9831: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9832: LD_VAR 0 1
9836: PPUSH
9837: CALL_OW 255
9841: PUSH
9842: LD_VAR 0 4
9846: EQUAL
9847: IFFALSE 9866
// begin SetAchievement ( ACH_RAD ) ;
9849: LD_STRING ACH_RAD
9851: PPUSH
9852: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9856: LD_STRING ACH_NL
9858: PPUSH
9859: LD_INT 1
9861: PPUSH
9862: CALL_OW 564
// end end ;
9866: LD_VAR 0 5
9870: RET
// export function SA_Win ( side ) ; begin
9871: LD_INT 0
9873: PPUSH
// case side of 1 :
9874: LD_VAR 0 1
9878: PUSH
9879: LD_INT 1
9881: DOUBLE
9882: EQUAL
9883: IFTRUE 9887
9885: GO 9900
9887: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9888: LD_STRING ACH_AH
9890: PPUSH
9891: LD_INT 1
9893: PPUSH
9894: CALL_OW 564
9898: GO 10063
9900: LD_INT 2
9902: DOUBLE
9903: EQUAL
9904: IFTRUE 9908
9906: GO 9921
9908: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9909: LD_STRING ACH_E
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: CALL_OW 564
9919: GO 10063
9921: LD_INT 3
9923: DOUBLE
9924: EQUAL
9925: IFTRUE 9929
9927: GO 9942
9929: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9930: LD_STRING ACH_OOL
9932: PPUSH
9933: LD_INT 1
9935: PPUSH
9936: CALL_OW 564
9940: GO 10063
9942: LD_INT 1
9944: PUSH
9945: LD_INT 2
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: DOUBLE
9952: EQUAL
9953: IFTRUE 9957
9955: GO 9982
9957: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9958: LD_STRING ACH_AH
9960: PPUSH
9961: LD_REAL  5.00000000000000E-0001
9964: PPUSH
9965: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9969: LD_STRING ACH_E
9971: PPUSH
9972: LD_REAL  5.00000000000000E-0001
9975: PPUSH
9976: CALL_OW 564
// end ; [ 2 , 3 ] :
9980: GO 10063
9982: LD_INT 2
9984: PUSH
9985: LD_INT 3
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: DOUBLE
9992: EQUAL
9993: IFTRUE 9997
9995: GO 10022
9997: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9998: LD_STRING ACH_OOL
10000: PPUSH
10001: LD_REAL  5.00000000000000E-0001
10004: PPUSH
10005: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10009: LD_STRING ACH_E
10011: PPUSH
10012: LD_REAL  5.00000000000000E-0001
10015: PPUSH
10016: CALL_OW 564
// end ; [ 3 , 1 ] :
10020: GO 10063
10022: LD_INT 3
10024: PUSH
10025: LD_INT 1
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: DOUBLE
10032: EQUAL
10033: IFTRUE 10037
10035: GO 10062
10037: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10038: LD_STRING ACH_AH
10040: PPUSH
10041: LD_REAL  5.00000000000000E-0001
10044: PPUSH
10045: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10049: LD_STRING ACH_OOL
10051: PPUSH
10052: LD_REAL  5.00000000000000E-0001
10055: PPUSH
10056: CALL_OW 564
// end ; end ;
10060: GO 10063
10062: POP
// end ; end_of_file
10063: LD_VAR 0 2
10067: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10068: LD_INT 0
10070: PPUSH
10071: PPUSH
10072: PPUSH
// for side = 1 to 8 do
10073: LD_ADDR_VAR 0 2
10077: PUSH
10078: DOUBLE
10079: LD_INT 1
10081: DEC
10082: ST_TO_ADDR
10083: LD_INT 8
10085: PUSH
10086: FOR_TO
10087: IFFALSE 10208
// begin for i = 1 to 72 do
10089: LD_ADDR_VAR 0 3
10093: PUSH
10094: DOUBLE
10095: LD_INT 1
10097: DEC
10098: ST_TO_ADDR
10099: LD_INT 72
10101: PUSH
10102: FOR_TO
10103: IFFALSE 10134
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
10105: LD_VAR 0 3
10109: PPUSH
10110: LD_VAR 0 2
10114: PPUSH
10115: LD_INT 0
10117: PPUSH
10118: LD_VAR 0 3
10122: PPUSH
10123: CALL_OW 565
10127: PPUSH
10128: CALL_OW 322
10132: GO 10102
10134: POP
10135: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
10136: LD_INT 73
10138: PPUSH
10139: LD_VAR 0 2
10143: PPUSH
10144: LD_INT 0
10146: PPUSH
10147: LD_INT 25
10149: PPUSH
10150: CALL_OW 565
10154: PPUSH
10155: CALL_OW 322
// for i = 0 to 40 do
10159: LD_ADDR_VAR 0 3
10163: PUSH
10164: DOUBLE
10165: LD_INT 0
10167: DEC
10168: ST_TO_ADDR
10169: LD_INT 40
10171: PUSH
10172: FOR_TO
10173: IFFALSE 10204
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
10175: LD_VAR 0 3
10179: PPUSH
10180: LD_VAR 0 2
10184: PPUSH
10185: LD_INT 1
10187: PPUSH
10188: LD_VAR 0 3
10192: PPUSH
10193: CALL_OW 565
10197: PPUSH
10198: CALL_OW 324
10202: GO 10172
10204: POP
10205: POP
// end ;
10206: GO 10086
10208: POP
10209: POP
// end ;
10210: LD_VAR 0 1
10214: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
10215: LD_INT 0
10217: PPUSH
10218: PPUSH
10219: PPUSH
// for side = 1 to 8 do
10220: LD_ADDR_VAR 0 3
10224: PUSH
10225: DOUBLE
10226: LD_INT 1
10228: DEC
10229: ST_TO_ADDR
10230: LD_INT 8
10232: PUSH
10233: FOR_TO
10234: IFFALSE 14230
// begin for i = 1 to 73 do
10236: LD_ADDR_VAR 0 4
10240: PUSH
10241: DOUBLE
10242: LD_INT 1
10244: DEC
10245: ST_TO_ADDR
10246: LD_INT 73
10248: PUSH
10249: FOR_TO
10250: IFFALSE 10271
// SetTech ( i , side , state_disabled ) ;
10252: LD_VAR 0 4
10256: PPUSH
10257: LD_VAR 0 3
10261: PPUSH
10262: LD_INT 0
10264: PPUSH
10265: CALL_OW 322
10269: GO 10249
10271: POP
10272: POP
// for i = 0 to 40 do
10273: LD_ADDR_VAR 0 4
10277: PUSH
10278: DOUBLE
10279: LD_INT 0
10281: DEC
10282: ST_TO_ADDR
10283: LD_INT 40
10285: PUSH
10286: FOR_TO
10287: IFFALSE 10308
// SetRestrict ( i , side , false ) ;
10289: LD_VAR 0 4
10293: PPUSH
10294: LD_VAR 0 3
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 324
10306: GO 10286
10308: POP
10309: POP
// case level of 1 :
10310: LD_VAR 0 1
10314: PUSH
10315: LD_INT 1
10317: DOUBLE
10318: EQUAL
10319: IFTRUE 10323
10321: GO 10476
10323: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10324: LD_INT 35
10326: PPUSH
10327: LD_VAR 0 3
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10339: LD_INT 45
10341: PPUSH
10342: LD_VAR 0 3
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10354: LD_INT 46
10356: PPUSH
10357: LD_VAR 0 3
10361: PPUSH
10362: LD_INT 1
10364: PPUSH
10365: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10369: LD_INT 47
10371: PPUSH
10372: LD_VAR 0 3
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10384: LD_INT 0
10386: PPUSH
10387: LD_VAR 0 3
10391: PPUSH
10392: LD_INT 1
10394: PPUSH
10395: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10399: LD_INT 2
10401: PPUSH
10402: LD_VAR 0 3
10406: PPUSH
10407: LD_INT 1
10409: PPUSH
10410: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10414: LD_INT 4
10416: PPUSH
10417: LD_VAR 0 3
10421: PPUSH
10422: LD_INT 1
10424: PPUSH
10425: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10429: LD_INT 6
10431: PPUSH
10432: LD_VAR 0 3
10436: PPUSH
10437: LD_INT 1
10439: PPUSH
10440: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10444: LD_INT 29
10446: PPUSH
10447: LD_VAR 0 3
10451: PPUSH
10452: LD_INT 1
10454: PPUSH
10455: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10459: LD_INT 31
10461: PPUSH
10462: LD_VAR 0 3
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 324
// end ; 2 :
10474: GO 14228
10476: LD_INT 2
10478: DOUBLE
10479: EQUAL
10480: IFTRUE 10484
10482: GO 10682
10484: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10485: LD_INT 35
10487: PPUSH
10488: LD_VAR 0 3
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10500: LD_INT 45
10502: PPUSH
10503: LD_VAR 0 3
10507: PPUSH
10508: LD_INT 1
10510: PPUSH
10511: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10515: LD_INT 46
10517: PPUSH
10518: LD_VAR 0 3
10522: PPUSH
10523: LD_INT 1
10525: PPUSH
10526: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10530: LD_INT 47
10532: PPUSH
10533: LD_VAR 0 3
10537: PPUSH
10538: LD_INT 1
10540: PPUSH
10541: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10545: LD_INT 1
10547: PPUSH
10548: LD_VAR 0 3
10552: PPUSH
10553: LD_INT 1
10555: PPUSH
10556: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10560: LD_INT 2
10562: PPUSH
10563: LD_VAR 0 3
10567: PPUSH
10568: LD_INT 1
10570: PPUSH
10571: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10575: LD_INT 11
10577: PPUSH
10578: LD_VAR 0 3
10582: PPUSH
10583: LD_INT 1
10585: PPUSH
10586: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10590: LD_INT 0
10592: PPUSH
10593: LD_VAR 0 3
10597: PPUSH
10598: LD_INT 1
10600: PPUSH
10601: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10605: LD_INT 2
10607: PPUSH
10608: LD_VAR 0 3
10612: PPUSH
10613: LD_INT 1
10615: PPUSH
10616: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10620: LD_INT 4
10622: PPUSH
10623: LD_VAR 0 3
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10635: LD_INT 6
10637: PPUSH
10638: LD_VAR 0 3
10642: PPUSH
10643: LD_INT 1
10645: PPUSH
10646: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10650: LD_INT 29
10652: PPUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: LD_INT 1
10660: PPUSH
10661: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10665: LD_INT 31
10667: PPUSH
10668: LD_VAR 0 3
10672: PPUSH
10673: LD_INT 1
10675: PPUSH
10676: CALL_OW 324
// end ; 3 :
10680: GO 14228
10682: LD_INT 3
10684: DOUBLE
10685: EQUAL
10686: IFTRUE 10690
10688: GO 11143
10690: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10691: LD_INT 35
10693: PPUSH
10694: LD_VAR 0 3
10698: PPUSH
10699: LD_INT 1
10701: PPUSH
10702: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10706: LD_INT 45
10708: PPUSH
10709: LD_VAR 0 3
10713: PPUSH
10714: LD_INT 1
10716: PPUSH
10717: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10721: LD_INT 46
10723: PPUSH
10724: LD_VAR 0 3
10728: PPUSH
10729: LD_INT 1
10731: PPUSH
10732: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10736: LD_INT 47
10738: PPUSH
10739: LD_VAR 0 3
10743: PPUSH
10744: LD_INT 1
10746: PPUSH
10747: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10751: LD_INT 1
10753: PPUSH
10754: LD_VAR 0 3
10758: PPUSH
10759: LD_INT 1
10761: PPUSH
10762: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10766: LD_INT 2
10768: PPUSH
10769: LD_VAR 0 3
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10781: LD_INT 11
10783: PPUSH
10784: LD_VAR 0 3
10788: PPUSH
10789: LD_INT 1
10791: PPUSH
10792: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10796: LD_INT 48
10798: PPUSH
10799: LD_VAR 0 3
10803: PPUSH
10804: LD_INT 1
10806: PPUSH
10807: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10811: LD_INT 69
10813: PPUSH
10814: LD_VAR 0 3
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10826: LD_INT 39
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_INT 1
10836: PPUSH
10837: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10841: LD_INT 43
10843: PPUSH
10844: LD_VAR 0 3
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10856: LD_INT 51
10858: PPUSH
10859: LD_VAR 0 3
10863: PPUSH
10864: LD_INT 1
10866: PPUSH
10867: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10871: LD_INT 6
10873: PPUSH
10874: LD_VAR 0 3
10878: PPUSH
10879: LD_INT 1
10881: PPUSH
10882: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10886: LD_INT 0
10888: PPUSH
10889: LD_VAR 0 3
10893: PPUSH
10894: LD_INT 1
10896: PPUSH
10897: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10901: LD_INT 2
10903: PPUSH
10904: LD_VAR 0 3
10908: PPUSH
10909: LD_INT 1
10911: PPUSH
10912: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10916: LD_INT 3
10918: PPUSH
10919: LD_VAR 0 3
10923: PPUSH
10924: LD_INT 1
10926: PPUSH
10927: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10931: LD_INT 4
10933: PPUSH
10934: LD_VAR 0 3
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10946: LD_INT 6
10948: PPUSH
10949: LD_VAR 0 3
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10961: LD_INT 7
10963: PPUSH
10964: LD_VAR 0 3
10968: PPUSH
10969: LD_INT 1
10971: PPUSH
10972: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10976: LD_INT 8
10978: PPUSH
10979: LD_VAR 0 3
10983: PPUSH
10984: LD_INT 1
10986: PPUSH
10987: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10991: LD_INT 10
10993: PPUSH
10994: LD_VAR 0 3
10998: PPUSH
10999: LD_INT 1
11001: PPUSH
11002: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11006: LD_INT 15
11008: PPUSH
11009: LD_VAR 0 3
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11021: LD_INT 16
11023: PPUSH
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_INT 1
11031: PPUSH
11032: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11036: LD_INT 17
11038: PPUSH
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 1
11046: PPUSH
11047: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11051: LD_INT 20
11053: PPUSH
11054: LD_VAR 0 3
11058: PPUSH
11059: LD_INT 1
11061: PPUSH
11062: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11066: LD_INT 26
11068: PPUSH
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 1
11076: PPUSH
11077: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11081: LD_INT 27
11083: PPUSH
11084: LD_VAR 0 3
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11096: LD_INT 29
11098: PPUSH
11099: LD_VAR 0 3
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11111: LD_INT 31
11113: PPUSH
11114: LD_VAR 0 3
11118: PPUSH
11119: LD_INT 1
11121: PPUSH
11122: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11126: LD_INT 32
11128: PPUSH
11129: LD_VAR 0 3
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: CALL_OW 324
// end ; 4 :
11141: GO 14228
11143: LD_INT 4
11145: DOUBLE
11146: EQUAL
11147: IFTRUE 11151
11149: GO 12099
11151: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11152: LD_INT 35
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11167: LD_INT 45
11169: PPUSH
11170: LD_VAR 0 3
11174: PPUSH
11175: LD_INT 1
11177: PPUSH
11178: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11182: LD_INT 46
11184: PPUSH
11185: LD_VAR 0 3
11189: PPUSH
11190: LD_INT 1
11192: PPUSH
11193: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11197: LD_INT 47
11199: PPUSH
11200: LD_VAR 0 3
11204: PPUSH
11205: LD_INT 1
11207: PPUSH
11208: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11212: LD_INT 1
11214: PPUSH
11215: LD_VAR 0 3
11219: PPUSH
11220: LD_INT 1
11222: PPUSH
11223: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11227: LD_INT 2
11229: PPUSH
11230: LD_VAR 0 3
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11242: LD_INT 11
11244: PPUSH
11245: LD_VAR 0 3
11249: PPUSH
11250: LD_INT 1
11252: PPUSH
11253: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11257: LD_INT 20
11259: PPUSH
11260: LD_VAR 0 3
11264: PPUSH
11265: LD_INT 1
11267: PPUSH
11268: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11272: LD_INT 48
11274: PPUSH
11275: LD_VAR 0 3
11279: PPUSH
11280: LD_INT 1
11282: PPUSH
11283: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11287: LD_INT 49
11289: PPUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: LD_INT 1
11297: PPUSH
11298: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11302: LD_INT 69
11304: PPUSH
11305: LD_VAR 0 3
11309: PPUSH
11310: LD_INT 1
11312: PPUSH
11313: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11317: LD_INT 39
11319: PPUSH
11320: LD_VAR 0 3
11324: PPUSH
11325: LD_INT 1
11327: PPUSH
11328: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11332: LD_INT 34
11334: PPUSH
11335: LD_VAR 0 3
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11347: LD_INT 42
11349: PPUSH
11350: LD_VAR 0 3
11354: PPUSH
11355: LD_INT 1
11357: PPUSH
11358: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11362: LD_INT 44
11364: PPUSH
11365: LD_VAR 0 3
11369: PPUSH
11370: LD_INT 1
11372: PPUSH
11373: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11377: LD_INT 41
11379: PPUSH
11380: LD_VAR 0 3
11384: PPUSH
11385: LD_INT 1
11387: PPUSH
11388: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11392: LD_INT 43
11394: PPUSH
11395: LD_VAR 0 3
11399: PPUSH
11400: LD_INT 1
11402: PPUSH
11403: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11407: LD_INT 70
11409: PPUSH
11410: LD_VAR 0 3
11414: PPUSH
11415: LD_INT 1
11417: PPUSH
11418: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11422: LD_INT 51
11424: PPUSH
11425: LD_VAR 0 3
11429: PPUSH
11430: LD_INT 1
11432: PPUSH
11433: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11437: LD_INT 52
11439: PPUSH
11440: LD_VAR 0 3
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11452: LD_INT 6
11454: PPUSH
11455: LD_VAR 0 3
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11467: LD_INT 15
11469: PPUSH
11470: LD_VAR 0 3
11474: PPUSH
11475: LD_INT 1
11477: PPUSH
11478: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11482: LD_INT 7
11484: PPUSH
11485: LD_VAR 0 3
11489: PPUSH
11490: LD_INT 1
11492: PPUSH
11493: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11497: LD_INT 12
11499: PPUSH
11500: LD_VAR 0 3
11504: PPUSH
11505: LD_INT 1
11507: PPUSH
11508: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11512: LD_INT 18
11514: PPUSH
11515: LD_VAR 0 3
11519: PPUSH
11520: LD_INT 1
11522: PPUSH
11523: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11527: LD_INT 60
11529: PPUSH
11530: LD_VAR 0 3
11534: PPUSH
11535: LD_INT 1
11537: PPUSH
11538: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11542: LD_INT 9
11544: PPUSH
11545: LD_VAR 0 3
11549: PPUSH
11550: LD_INT 1
11552: PPUSH
11553: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11557: LD_INT 30
11559: PPUSH
11560: LD_VAR 0 3
11564: PPUSH
11565: LD_INT 1
11567: PPUSH
11568: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11572: LD_INT 37
11574: PPUSH
11575: LD_VAR 0 3
11579: PPUSH
11580: LD_INT 1
11582: PPUSH
11583: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11587: LD_INT 5
11589: PPUSH
11590: LD_VAR 0 3
11594: PPUSH
11595: LD_INT 1
11597: PPUSH
11598: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11602: LD_INT 66
11604: PPUSH
11605: LD_VAR 0 3
11609: PPUSH
11610: LD_INT 1
11612: PPUSH
11613: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11617: LD_INT 21
11619: PPUSH
11620: LD_VAR 0 3
11624: PPUSH
11625: LD_INT 1
11627: PPUSH
11628: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11632: LD_INT 22
11634: PPUSH
11635: LD_VAR 0 3
11639: PPUSH
11640: LD_INT 1
11642: PPUSH
11643: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11647: LD_INT 54
11649: PPUSH
11650: LD_VAR 0 3
11654: PPUSH
11655: LD_INT 1
11657: PPUSH
11658: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11662: LD_INT 0
11664: PPUSH
11665: LD_VAR 0 3
11669: PPUSH
11670: LD_INT 1
11672: PPUSH
11673: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11677: LD_INT 1
11679: PPUSH
11680: LD_VAR 0 3
11684: PPUSH
11685: LD_INT 1
11687: PPUSH
11688: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11692: LD_INT 2
11694: PPUSH
11695: LD_VAR 0 3
11699: PPUSH
11700: LD_INT 1
11702: PPUSH
11703: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11707: LD_INT 3
11709: PPUSH
11710: LD_VAR 0 3
11714: PPUSH
11715: LD_INT 1
11717: PPUSH
11718: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11722: LD_INT 4
11724: PPUSH
11725: LD_VAR 0 3
11729: PPUSH
11730: LD_INT 1
11732: PPUSH
11733: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11737: LD_INT 5
11739: PPUSH
11740: LD_VAR 0 3
11744: PPUSH
11745: LD_INT 1
11747: PPUSH
11748: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11752: LD_INT 6
11754: PPUSH
11755: LD_VAR 0 3
11759: PPUSH
11760: LD_INT 1
11762: PPUSH
11763: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11767: LD_INT 7
11769: PPUSH
11770: LD_VAR 0 3
11774: PPUSH
11775: LD_INT 1
11777: PPUSH
11778: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11782: LD_INT 8
11784: PPUSH
11785: LD_VAR 0 3
11789: PPUSH
11790: LD_INT 1
11792: PPUSH
11793: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11797: LD_INT 10
11799: PPUSH
11800: LD_VAR 0 3
11804: PPUSH
11805: LD_INT 1
11807: PPUSH
11808: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11812: LD_INT 11
11814: PPUSH
11815: LD_VAR 0 3
11819: PPUSH
11820: LD_INT 1
11822: PPUSH
11823: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11827: LD_INT 12
11829: PPUSH
11830: LD_VAR 0 3
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11842: LD_INT 13
11844: PPUSH
11845: LD_VAR 0 3
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11857: LD_INT 14
11859: PPUSH
11860: LD_VAR 0 3
11864: PPUSH
11865: LD_INT 1
11867: PPUSH
11868: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11872: LD_INT 15
11874: PPUSH
11875: LD_VAR 0 3
11879: PPUSH
11880: LD_INT 1
11882: PPUSH
11883: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11887: LD_INT 16
11889: PPUSH
11890: LD_VAR 0 3
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11902: LD_INT 17
11904: PPUSH
11905: LD_VAR 0 3
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11917: LD_INT 19
11919: PPUSH
11920: LD_VAR 0 3
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11932: LD_INT 20
11934: PPUSH
11935: LD_VAR 0 3
11939: PPUSH
11940: LD_INT 1
11942: PPUSH
11943: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11947: LD_INT 21
11949: PPUSH
11950: LD_VAR 0 3
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11962: LD_INT 23
11964: PPUSH
11965: LD_VAR 0 3
11969: PPUSH
11970: LD_INT 1
11972: PPUSH
11973: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11977: LD_INT 26
11979: PPUSH
11980: LD_VAR 0 3
11984: PPUSH
11985: LD_INT 1
11987: PPUSH
11988: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11992: LD_INT 27
11994: PPUSH
11995: LD_VAR 0 3
11999: PPUSH
12000: LD_INT 1
12002: PPUSH
12003: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12007: LD_INT 28
12009: PPUSH
12010: LD_VAR 0 3
12014: PPUSH
12015: LD_INT 1
12017: PPUSH
12018: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12022: LD_INT 29
12024: PPUSH
12025: LD_VAR 0 3
12029: PPUSH
12030: LD_INT 1
12032: PPUSH
12033: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12037: LD_INT 30
12039: PPUSH
12040: LD_VAR 0 3
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12052: LD_INT 31
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: LD_INT 1
12062: PPUSH
12063: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12067: LD_INT 32
12069: PPUSH
12070: LD_VAR 0 3
12074: PPUSH
12075: LD_INT 1
12077: PPUSH
12078: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12082: LD_INT 36
12084: PPUSH
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 324
// end ; 5 :
12097: GO 14228
12099: LD_INT 5
12101: DOUBLE
12102: EQUAL
12103: IFTRUE 12107
12105: GO 13220
12107: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12108: LD_INT 35
12110: PPUSH
12111: LD_VAR 0 3
12115: PPUSH
12116: LD_INT 1
12118: PPUSH
12119: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12123: LD_INT 45
12125: PPUSH
12126: LD_VAR 0 3
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12138: LD_INT 46
12140: PPUSH
12141: LD_VAR 0 3
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12153: LD_INT 47
12155: PPUSH
12156: LD_VAR 0 3
12160: PPUSH
12161: LD_INT 1
12163: PPUSH
12164: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12168: LD_INT 1
12170: PPUSH
12171: LD_VAR 0 3
12175: PPUSH
12176: LD_INT 1
12178: PPUSH
12179: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12183: LD_INT 2
12185: PPUSH
12186: LD_VAR 0 3
12190: PPUSH
12191: LD_INT 1
12193: PPUSH
12194: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12198: LD_INT 11
12200: PPUSH
12201: LD_VAR 0 3
12205: PPUSH
12206: LD_INT 1
12208: PPUSH
12209: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12213: LD_INT 20
12215: PPUSH
12216: LD_VAR 0 3
12220: PPUSH
12221: LD_INT 1
12223: PPUSH
12224: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12228: LD_INT 48
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: LD_INT 1
12238: PPUSH
12239: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12243: LD_INT 49
12245: PPUSH
12246: LD_VAR 0 3
12250: PPUSH
12251: LD_INT 1
12253: PPUSH
12254: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12258: LD_INT 69
12260: PPUSH
12261: LD_VAR 0 3
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12273: LD_INT 39
12275: PPUSH
12276: LD_VAR 0 3
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12288: LD_INT 34
12290: PPUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12303: LD_INT 42
12305: PPUSH
12306: LD_VAR 0 3
12310: PPUSH
12311: LD_INT 1
12313: PPUSH
12314: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12318: LD_INT 44
12320: PPUSH
12321: LD_VAR 0 3
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12333: LD_INT 41
12335: PPUSH
12336: LD_VAR 0 3
12340: PPUSH
12341: LD_INT 1
12343: PPUSH
12344: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12348: LD_INT 40
12350: PPUSH
12351: LD_VAR 0 3
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12363: LD_INT 43
12365: PPUSH
12366: LD_VAR 0 3
12370: PPUSH
12371: LD_INT 1
12373: PPUSH
12374: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12378: LD_INT 70
12380: PPUSH
12381: LD_VAR 0 3
12385: PPUSH
12386: LD_INT 1
12388: PPUSH
12389: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12393: LD_INT 51
12395: PPUSH
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 1
12403: PPUSH
12404: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12408: LD_INT 52
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: LD_INT 1
12418: PPUSH
12419: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12423: LD_INT 6
12425: PPUSH
12426: LD_VAR 0 3
12430: PPUSH
12431: LD_INT 1
12433: PPUSH
12434: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12438: LD_INT 15
12440: PPUSH
12441: LD_VAR 0 3
12445: PPUSH
12446: LD_INT 1
12448: PPUSH
12449: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12453: LD_INT 7
12455: PPUSH
12456: LD_VAR 0 3
12460: PPUSH
12461: LD_INT 1
12463: PPUSH
12464: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12468: LD_INT 12
12470: PPUSH
12471: LD_VAR 0 3
12475: PPUSH
12476: LD_INT 1
12478: PPUSH
12479: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12483: LD_INT 17
12485: PPUSH
12486: LD_VAR 0 3
12490: PPUSH
12491: LD_INT 1
12493: PPUSH
12494: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12498: LD_INT 18
12500: PPUSH
12501: LD_VAR 0 3
12505: PPUSH
12506: LD_INT 1
12508: PPUSH
12509: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12513: LD_INT 60
12515: PPUSH
12516: LD_VAR 0 3
12520: PPUSH
12521: LD_INT 1
12523: PPUSH
12524: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12528: LD_INT 32
12530: PPUSH
12531: LD_VAR 0 3
12535: PPUSH
12536: LD_INT 1
12538: PPUSH
12539: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12543: LD_INT 9
12545: PPUSH
12546: LD_VAR 0 3
12550: PPUSH
12551: LD_INT 1
12553: PPUSH
12554: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12558: LD_INT 57
12560: PPUSH
12561: LD_VAR 0 3
12565: PPUSH
12566: LD_INT 1
12568: PPUSH
12569: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12573: LD_INT 30
12575: PPUSH
12576: LD_VAR 0 3
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12588: LD_INT 37
12590: PPUSH
12591: LD_VAR 0 3
12595: PPUSH
12596: LD_INT 1
12598: PPUSH
12599: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12603: LD_INT 63
12605: PPUSH
12606: LD_VAR 0 3
12610: PPUSH
12611: LD_INT 1
12613: PPUSH
12614: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12618: LD_INT 3
12620: PPUSH
12621: LD_VAR 0 3
12625: PPUSH
12626: LD_INT 1
12628: PPUSH
12629: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12633: LD_INT 4
12635: PPUSH
12636: LD_VAR 0 3
12640: PPUSH
12641: LD_INT 1
12643: PPUSH
12644: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12648: LD_INT 5
12650: PPUSH
12651: LD_VAR 0 3
12655: PPUSH
12656: LD_INT 1
12658: PPUSH
12659: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12663: LD_INT 66
12665: PPUSH
12666: LD_VAR 0 3
12670: PPUSH
12671: LD_INT 1
12673: PPUSH
12674: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12678: LD_INT 21
12680: PPUSH
12681: LD_VAR 0 3
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12693: LD_INT 22
12695: PPUSH
12696: LD_VAR 0 3
12700: PPUSH
12701: LD_INT 1
12703: PPUSH
12704: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12708: LD_INT 19
12710: PPUSH
12711: LD_VAR 0 3
12715: PPUSH
12716: LD_INT 1
12718: PPUSH
12719: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12723: LD_INT 54
12725: PPUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: LD_INT 1
12733: PPUSH
12734: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12738: LD_INT 55
12740: PPUSH
12741: LD_VAR 0 3
12745: PPUSH
12746: LD_INT 1
12748: PPUSH
12749: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12753: LD_INT 0
12755: PPUSH
12756: LD_VAR 0 3
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12768: LD_INT 1
12770: PPUSH
12771: LD_VAR 0 3
12775: PPUSH
12776: LD_INT 1
12778: PPUSH
12779: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12783: LD_INT 2
12785: PPUSH
12786: LD_VAR 0 3
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12798: LD_INT 3
12800: PPUSH
12801: LD_VAR 0 3
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12813: LD_INT 4
12815: PPUSH
12816: LD_VAR 0 3
12820: PPUSH
12821: LD_INT 1
12823: PPUSH
12824: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12828: LD_INT 5
12830: PPUSH
12831: LD_VAR 0 3
12835: PPUSH
12836: LD_INT 1
12838: PPUSH
12839: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12843: LD_INT 6
12845: PPUSH
12846: LD_VAR 0 3
12850: PPUSH
12851: LD_INT 1
12853: PPUSH
12854: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12858: LD_INT 7
12860: PPUSH
12861: LD_VAR 0 3
12865: PPUSH
12866: LD_INT 1
12868: PPUSH
12869: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12873: LD_INT 8
12875: PPUSH
12876: LD_VAR 0 3
12880: PPUSH
12881: LD_INT 1
12883: PPUSH
12884: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12888: LD_INT 10
12890: PPUSH
12891: LD_VAR 0 3
12895: PPUSH
12896: LD_INT 1
12898: PPUSH
12899: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12903: LD_INT 11
12905: PPUSH
12906: LD_VAR 0 3
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12918: LD_INT 12
12920: PPUSH
12921: LD_VAR 0 3
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12933: LD_INT 13
12935: PPUSH
12936: LD_VAR 0 3
12940: PPUSH
12941: LD_INT 1
12943: PPUSH
12944: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12948: LD_INT 14
12950: PPUSH
12951: LD_VAR 0 3
12955: PPUSH
12956: LD_INT 1
12958: PPUSH
12959: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12963: LD_INT 15
12965: PPUSH
12966: LD_VAR 0 3
12970: PPUSH
12971: LD_INT 1
12973: PPUSH
12974: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12978: LD_INT 16
12980: PPUSH
12981: LD_VAR 0 3
12985: PPUSH
12986: LD_INT 1
12988: PPUSH
12989: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12993: LD_INT 17
12995: PPUSH
12996: LD_VAR 0 3
13000: PPUSH
13001: LD_INT 1
13003: PPUSH
13004: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13008: LD_INT 18
13010: PPUSH
13011: LD_VAR 0 3
13015: PPUSH
13016: LD_INT 1
13018: PPUSH
13019: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13023: LD_INT 19
13025: PPUSH
13026: LD_VAR 0 3
13030: PPUSH
13031: LD_INT 1
13033: PPUSH
13034: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13038: LD_INT 20
13040: PPUSH
13041: LD_VAR 0 3
13045: PPUSH
13046: LD_INT 1
13048: PPUSH
13049: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13053: LD_INT 21
13055: PPUSH
13056: LD_VAR 0 3
13060: PPUSH
13061: LD_INT 1
13063: PPUSH
13064: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13068: LD_INT 23
13070: PPUSH
13071: LD_VAR 0 3
13075: PPUSH
13076: LD_INT 1
13078: PPUSH
13079: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13083: LD_INT 26
13085: PPUSH
13086: LD_VAR 0 3
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13098: LD_INT 27
13100: PPUSH
13101: LD_VAR 0 3
13105: PPUSH
13106: LD_INT 1
13108: PPUSH
13109: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13113: LD_INT 28
13115: PPUSH
13116: LD_VAR 0 3
13120: PPUSH
13121: LD_INT 1
13123: PPUSH
13124: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13128: LD_INT 29
13130: PPUSH
13131: LD_VAR 0 3
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13143: LD_INT 30
13145: PPUSH
13146: LD_VAR 0 3
13150: PPUSH
13151: LD_INT 1
13153: PPUSH
13154: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13158: LD_INT 31
13160: PPUSH
13161: LD_VAR 0 3
13165: PPUSH
13166: LD_INT 1
13168: PPUSH
13169: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13173: LD_INT 32
13175: PPUSH
13176: LD_VAR 0 3
13180: PPUSH
13181: LD_INT 1
13183: PPUSH
13184: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
13188: LD_INT 33
13190: PPUSH
13191: LD_VAR 0 3
13195: PPUSH
13196: LD_INT 1
13198: PPUSH
13199: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13203: LD_INT 36
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: LD_INT 1
13213: PPUSH
13214: CALL_OW 324
// end ; 6 :
13218: GO 14228
13220: LD_INT 6
13222: DOUBLE
13223: EQUAL
13224: IFTRUE 13228
13226: GO 14153
13228: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13229: LD_INT 35
13231: PPUSH
13232: LD_VAR 0 3
13236: PPUSH
13237: LD_INT 1
13239: PPUSH
13240: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13244: LD_INT 45
13246: PPUSH
13247: LD_VAR 0 3
13251: PPUSH
13252: LD_INT 1
13254: PPUSH
13255: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13259: LD_INT 46
13261: PPUSH
13262: LD_VAR 0 3
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13274: LD_INT 47
13276: PPUSH
13277: LD_VAR 0 3
13281: PPUSH
13282: LD_INT 1
13284: PPUSH
13285: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13289: LD_INT 1
13291: PPUSH
13292: LD_VAR 0 3
13296: PPUSH
13297: LD_INT 1
13299: PPUSH
13300: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13304: LD_INT 2
13306: PPUSH
13307: LD_VAR 0 3
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13319: LD_INT 11
13321: PPUSH
13322: LD_VAR 0 3
13326: PPUSH
13327: LD_INT 1
13329: PPUSH
13330: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13334: LD_INT 20
13336: PPUSH
13337: LD_VAR 0 3
13341: PPUSH
13342: LD_INT 1
13344: PPUSH
13345: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13349: LD_INT 48
13351: PPUSH
13352: LD_VAR 0 3
13356: PPUSH
13357: LD_INT 1
13359: PPUSH
13360: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13364: LD_INT 49
13366: PPUSH
13367: LD_VAR 0 3
13371: PPUSH
13372: LD_INT 1
13374: PPUSH
13375: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13379: LD_INT 50
13381: PPUSH
13382: LD_VAR 0 3
13386: PPUSH
13387: LD_INT 1
13389: PPUSH
13390: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13394: LD_INT 69
13396: PPUSH
13397: LD_VAR 0 3
13401: PPUSH
13402: LD_INT 1
13404: PPUSH
13405: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13409: LD_INT 39
13411: PPUSH
13412: LD_VAR 0 3
13416: PPUSH
13417: LD_INT 1
13419: PPUSH
13420: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13424: LD_INT 34
13426: PPUSH
13427: LD_VAR 0 3
13431: PPUSH
13432: LD_INT 1
13434: PPUSH
13435: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13439: LD_INT 42
13441: PPUSH
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 1
13449: PPUSH
13450: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13454: LD_INT 44
13456: PPUSH
13457: LD_VAR 0 3
13461: PPUSH
13462: LD_INT 1
13464: PPUSH
13465: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13469: LD_INT 41
13471: PPUSH
13472: LD_VAR 0 3
13476: PPUSH
13477: LD_INT 1
13479: PPUSH
13480: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13484: LD_INT 13
13486: PPUSH
13487: LD_VAR 0 3
13491: PPUSH
13492: LD_INT 1
13494: PPUSH
13495: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13499: LD_INT 40
13501: PPUSH
13502: LD_VAR 0 3
13506: PPUSH
13507: LD_INT 1
13509: PPUSH
13510: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13514: LD_INT 43
13516: PPUSH
13517: LD_VAR 0 3
13521: PPUSH
13522: LD_INT 1
13524: PPUSH
13525: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13529: LD_INT 70
13531: PPUSH
13532: LD_VAR 0 3
13536: PPUSH
13537: LD_INT 1
13539: PPUSH
13540: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13544: LD_INT 23
13546: PPUSH
13547: LD_VAR 0 3
13551: PPUSH
13552: LD_INT 1
13554: PPUSH
13555: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13559: LD_INT 51
13561: PPUSH
13562: LD_VAR 0 3
13566: PPUSH
13567: LD_INT 1
13569: PPUSH
13570: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13574: LD_INT 52
13576: PPUSH
13577: LD_VAR 0 3
13581: PPUSH
13582: LD_INT 1
13584: PPUSH
13585: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13589: LD_INT 6
13591: PPUSH
13592: LD_VAR 0 3
13596: PPUSH
13597: LD_INT 1
13599: PPUSH
13600: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13604: LD_INT 15
13606: PPUSH
13607: LD_VAR 0 3
13611: PPUSH
13612: LD_INT 1
13614: PPUSH
13615: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13619: LD_INT 7
13621: PPUSH
13622: LD_VAR 0 3
13626: PPUSH
13627: LD_INT 1
13629: PPUSH
13630: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13634: LD_INT 12
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13649: LD_INT 10
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: LD_INT 1
13659: PPUSH
13660: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13664: LD_INT 17
13666: PPUSH
13667: LD_VAR 0 3
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13679: LD_INT 18
13681: PPUSH
13682: LD_VAR 0 3
13686: PPUSH
13687: LD_INT 1
13689: PPUSH
13690: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13694: LD_INT 60
13696: PPUSH
13697: LD_VAR 0 3
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13709: LD_INT 61
13711: PPUSH
13712: LD_VAR 0 3
13716: PPUSH
13717: LD_INT 1
13719: PPUSH
13720: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13724: LD_INT 32
13726: PPUSH
13727: LD_VAR 0 3
13731: PPUSH
13732: LD_INT 1
13734: PPUSH
13735: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13739: LD_INT 27
13741: PPUSH
13742: LD_VAR 0 3
13746: PPUSH
13747: LD_INT 1
13749: PPUSH
13750: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13754: LD_INT 36
13756: PPUSH
13757: LD_VAR 0 3
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13769: LD_INT 33
13771: PPUSH
13772: LD_VAR 0 3
13776: PPUSH
13777: LD_INT 1
13779: PPUSH
13780: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13784: LD_INT 9
13786: PPUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13799: LD_INT 38
13801: PPUSH
13802: LD_VAR 0 3
13806: PPUSH
13807: LD_INT 1
13809: PPUSH
13810: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13814: LD_INT 57
13816: PPUSH
13817: LD_VAR 0 3
13821: PPUSH
13822: LD_INT 1
13824: PPUSH
13825: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13829: LD_INT 58
13831: PPUSH
13832: LD_VAR 0 3
13836: PPUSH
13837: LD_INT 1
13839: PPUSH
13840: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13844: LD_INT 28
13846: PPUSH
13847: LD_VAR 0 3
13851: PPUSH
13852: LD_INT 1
13854: PPUSH
13855: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13859: LD_INT 29
13861: PPUSH
13862: LD_VAR 0 3
13866: PPUSH
13867: LD_INT 1
13869: PPUSH
13870: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13874: LD_INT 30
13876: PPUSH
13877: LD_VAR 0 3
13881: PPUSH
13882: LD_INT 1
13884: PPUSH
13885: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13889: LD_INT 37
13891: PPUSH
13892: LD_VAR 0 3
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13904: LD_INT 63
13906: PPUSH
13907: LD_VAR 0 3
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13919: LD_INT 64
13921: PPUSH
13922: LD_VAR 0 3
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13934: LD_INT 3
13936: PPUSH
13937: LD_VAR 0 3
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13949: LD_INT 4
13951: PPUSH
13952: LD_VAR 0 3
13956: PPUSH
13957: LD_INT 1
13959: PPUSH
13960: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13964: LD_INT 5
13966: PPUSH
13967: LD_VAR 0 3
13971: PPUSH
13972: LD_INT 1
13974: PPUSH
13975: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13979: LD_INT 8
13981: PPUSH
13982: LD_VAR 0 3
13986: PPUSH
13987: LD_INT 1
13989: PPUSH
13990: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13994: LD_INT 66
13996: PPUSH
13997: LD_VAR 0 3
14001: PPUSH
14002: LD_INT 1
14004: PPUSH
14005: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14009: LD_INT 67
14011: PPUSH
14012: LD_VAR 0 3
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14024: LD_INT 21
14026: PPUSH
14027: LD_VAR 0 3
14031: PPUSH
14032: LD_INT 1
14034: PPUSH
14035: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14039: LD_INT 22
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14054: LD_INT 19
14056: PPUSH
14057: LD_VAR 0 3
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14069: LD_INT 26
14071: PPUSH
14072: LD_VAR 0 3
14076: PPUSH
14077: LD_INT 1
14079: PPUSH
14080: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14084: LD_INT 54
14086: PPUSH
14087: LD_VAR 0 3
14091: PPUSH
14092: LD_INT 1
14094: PPUSH
14095: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14099: LD_INT 55
14101: PPUSH
14102: LD_VAR 0 3
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 322
// for i = 0 to 39 do
14114: LD_ADDR_VAR 0 4
14118: PUSH
14119: DOUBLE
14120: LD_INT 0
14122: DEC
14123: ST_TO_ADDR
14124: LD_INT 39
14126: PUSH
14127: FOR_TO
14128: IFFALSE 14149
// SetRestrict ( i , side , true ) ;
14130: LD_VAR 0 4
14134: PPUSH
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_INT 1
14142: PPUSH
14143: CALL_OW 324
14147: GO 14127
14149: POP
14150: POP
// end ; else
14151: GO 14228
14153: POP
// begin for i = 1 to 73 do
14154: LD_ADDR_VAR 0 4
14158: PUSH
14159: DOUBLE
14160: LD_INT 1
14162: DEC
14163: ST_TO_ADDR
14164: LD_INT 73
14166: PUSH
14167: FOR_TO
14168: IFFALSE 14189
// SetTech ( i , side , state_enabled ) ;
14170: LD_VAR 0 4
14174: PPUSH
14175: LD_VAR 0 3
14179: PPUSH
14180: LD_INT 1
14182: PPUSH
14183: CALL_OW 322
14187: GO 14167
14189: POP
14190: POP
// for i = 0 to 39 do
14191: LD_ADDR_VAR 0 4
14195: PUSH
14196: DOUBLE
14197: LD_INT 0
14199: DEC
14200: ST_TO_ADDR
14201: LD_INT 39
14203: PUSH
14204: FOR_TO
14205: IFFALSE 14226
// SetRestrict ( i , side , true ) ;
14207: LD_VAR 0 4
14211: PPUSH
14212: LD_VAR 0 3
14216: PPUSH
14217: LD_INT 1
14219: PPUSH
14220: CALL_OW 324
14224: GO 14204
14226: POP
14227: POP
// end ; end ; end ;
14228: GO 10233
14230: POP
14231: POP
// end ; end_of_file
14232: LD_VAR 0 2
14236: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , bases ; begin
14237: LD_INT 0
14239: PPUSH
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
14246: PPUSH
// for i := 1 to 8 do
14247: LD_ADDR_VAR 0 2
14251: PUSH
14252: DOUBLE
14253: LD_INT 1
14255: DEC
14256: ST_TO_ADDR
14257: LD_INT 8
14259: PUSH
14260: FOR_TO
14261: IFFALSE 14737
// begin if Side_Positions [ i ] then
14263: LD_EXP 40
14267: PUSH
14268: LD_VAR 0 2
14272: ARRAY
14273: IFFALSE 14735
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14275: LD_ADDR_VAR 0 7
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_VAR 0 2
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 21
14294: PUSH
14295: LD_INT 1
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PPUSH
14306: CALL_OW 69
14310: PUSH
14311: LD_INT 0
14313: PLUS
14314: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14315: LD_ADDR_VAR 0 8
14319: PUSH
14320: LD_INT 22
14322: PUSH
14323: LD_VAR 0 2
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 2
14334: PUSH
14335: LD_INT 30
14337: PUSH
14338: LD_INT 0
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 30
14347: PUSH
14348: LD_INT 1
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 69
14368: ST_TO_ADDR
// crates := 0 ;
14369: LD_ADDR_VAR 0 4
14373: PUSH
14374: LD_INT 0
14376: ST_TO_ADDR
// oil := 0 ;
14377: LD_ADDR_VAR 0 5
14381: PUSH
14382: LD_INT 0
14384: ST_TO_ADDR
// sib := 0 ;
14385: LD_ADDR_VAR 0 6
14389: PUSH
14390: LD_INT 0
14392: ST_TO_ADDR
// if bases then
14393: LD_VAR 0 8
14397: IFFALSE 14503
// begin for j in bases do
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_VAR 0 8
14408: PUSH
14409: FOR_IN
14410: IFFALSE 14501
// begin crates := crates + GetResourceType ( GetBase ( j ) , mat_cans ) ;
14412: LD_ADDR_VAR 0 4
14416: PUSH
14417: LD_VAR 0 4
14421: PUSH
14422: LD_VAR 0 3
14426: PPUSH
14427: CALL_OW 274
14431: PPUSH
14432: LD_INT 1
14434: PPUSH
14435: CALL_OW 275
14439: PLUS
14440: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( j ) , mat_oil ) ;
14441: LD_ADDR_VAR 0 5
14445: PUSH
14446: LD_VAR 0 5
14450: PUSH
14451: LD_VAR 0 3
14455: PPUSH
14456: CALL_OW 274
14460: PPUSH
14461: LD_INT 2
14463: PPUSH
14464: CALL_OW 275
14468: PLUS
14469: ST_TO_ADDR
// sib := sib + GetResourceType ( GetBase ( j ) , mat_siberit ) ;
14470: LD_ADDR_VAR 0 6
14474: PUSH
14475: LD_VAR 0 6
14479: PUSH
14480: LD_VAR 0 3
14484: PPUSH
14485: CALL_OW 274
14489: PPUSH
14490: LD_INT 3
14492: PPUSH
14493: CALL_OW 275
14497: PLUS
14498: ST_TO_ADDR
// end ;
14499: GO 14409
14501: POP
14502: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14503: LD_STRING setSpecText(
14505: PUSH
14506: LD_VAR 0 2
14510: STR
14511: PUSH
14512: LD_STRING ,
14514: STR
14515: PUSH
14516: LD_INT 2
14518: STR
14519: PUSH
14520: LD_STRING ,
14522: STR
14523: PUSH
14524: LD_VAR 0 4
14528: STR
14529: PUSH
14530: LD_STRING )
14532: STR
14533: PPUSH
14534: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14538: LD_STRING setSpecText(
14540: PUSH
14541: LD_VAR 0 2
14545: STR
14546: PUSH
14547: LD_STRING ,
14549: STR
14550: PUSH
14551: LD_INT 3
14553: STR
14554: PUSH
14555: LD_STRING ,
14557: STR
14558: PUSH
14559: LD_VAR 0 5
14563: STR
14564: PUSH
14565: LD_STRING )
14567: STR
14568: PPUSH
14569: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14573: LD_STRING setSpecText(
14575: PUSH
14576: LD_VAR 0 2
14580: STR
14581: PUSH
14582: LD_STRING ,
14584: STR
14585: PUSH
14586: LD_INT 4
14588: STR
14589: PUSH
14590: LD_STRING ,
14592: STR
14593: PUSH
14594: LD_VAR 0 6
14598: STR
14599: PUSH
14600: LD_STRING )
14602: STR
14603: PPUSH
14604: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14608: LD_STRING setSpecText(
14610: PUSH
14611: LD_VAR 0 2
14615: STR
14616: PUSH
14617: LD_STRING ,
14619: STR
14620: PUSH
14621: LD_INT 5
14623: STR
14624: PUSH
14625: LD_STRING ,
14627: STR
14628: PUSH
14629: LD_VAR 0 7
14633: STR
14634: PUSH
14635: LD_STRING )
14637: STR
14638: PPUSH
14639: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14643: LD_STRING setSpecLogoNumber(
14645: PUSH
14646: LD_INT 2
14648: STR
14649: PUSH
14650: LD_STRING ,
14652: STR
14653: PUSH
14654: LD_INT 1
14656: STR
14657: PUSH
14658: LD_STRING )
14660: STR
14661: PPUSH
14662: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14666: LD_STRING setSpecLogoNumber(
14668: PUSH
14669: LD_INT 3
14671: STR
14672: PUSH
14673: LD_STRING ,
14675: STR
14676: PUSH
14677: LD_INT 2
14679: STR
14680: PUSH
14681: LD_STRING )
14683: STR
14684: PPUSH
14685: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14689: LD_STRING setSpecLogoNumber(
14691: PUSH
14692: LD_INT 4
14694: STR
14695: PUSH
14696: LD_STRING ,
14698: STR
14699: PUSH
14700: LD_INT 3
14702: STR
14703: PUSH
14704: LD_STRING )
14706: STR
14707: PPUSH
14708: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14712: LD_STRING setSpecLogoNumber(
14714: PUSH
14715: LD_INT 5
14717: STR
14718: PUSH
14719: LD_STRING ,
14721: STR
14722: PUSH
14723: LD_INT 4
14725: STR
14726: PUSH
14727: LD_STRING )
14729: STR
14730: PPUSH
14731: CALL_OW 559
// end ; end ;
14735: GO 14260
14737: POP
14738: POP
// end ;
14739: LD_VAR 0 1
14743: RET
// every 20 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14744: LD_INT 2
14746: PUSH
14747: LD_INT 30
14749: PUSH
14750: LD_INT 0
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 30
14759: PUSH
14760: LD_INT 1
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: LIST
14771: PPUSH
14772: CALL_OW 69
14776: IFFALSE 14786
14778: GO 14780
14780: DISABLE
// begin enable ;
14781: ENABLE
// UpdateSpectatorBar ;
14782: CALL 14237 0 0
// end ;
14786: END
