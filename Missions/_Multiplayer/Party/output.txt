// export gametype , def_base_level , def_amount_of_people , def_initial_level , def_starting_resources , def_shipments_density , def_oil_deposits , def_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_amount_of_apemen , def_people_respawning , def_siberite_bomb , def_cost , def_cost_decreasing ; export is_depot , number_of_breastworks , number_of_people , initial_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , respawning_time_min , respawning_time_max , cost , decr_cost_time , real_cost , oil_dep , sib_dep , amount_of_apemen , siberite_bomb_Delay ; export Side_Count , Team_Count , Player_Side , Player_Team , Side_Teams , Teams ; export Side_Positions , Side_Nations , Side_Names , Team_Names , Team_Game ; export depot_def , breastworks_def , start_def , deposits_def , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; function read_multiplayer_and_game_parameters ; var sides , s1 , s2 , s3 , tech_level ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
   6: PPUSH
   7: PPUSH
// if MultiPlayer then
   8: LD_OWVAR 4
  12: IFFALSE 86
// begin gametype = mp_game_type ;
  14: LD_ADDR_EXP 1
  18: PUSH
  19: LD_OWVAR 6
  23: ST_TO_ADDR
// Player_Side = mp_player_side ;
  24: LD_ADDR_EXP 36
  28: PUSH
  29: LD_OWVAR 7
  33: ST_TO_ADDR
// Player_Team = mp_player_team ;
  34: LD_ADDR_EXP 37
  38: PUSH
  39: LD_OWVAR 8
  43: ST_TO_ADDR
// Side_Positions = mp_sides_positions ;
  44: LD_ADDR_EXP 40
  48: PUSH
  49: LD_OWVAR 17
  53: ST_TO_ADDR
// Side_Teams = mp_sides_teams ;
  54: LD_ADDR_EXP 38
  58: PUSH
  59: LD_OWVAR 15
  63: ST_TO_ADDR
// Side_Nations = mp_sides_nations ;
  64: LD_ADDR_EXP 41
  68: PUSH
  69: LD_OWVAR 16
  73: ST_TO_ADDR
// Teams = mp_teams ;
  74: LD_ADDR_EXP 39
  78: PUSH
  79: LD_OWVAR 12
  83: ST_TO_ADDR
// end else
  84: GO 256
// begin gametype = 11 ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 11
  93: ST_TO_ADDR
// Player_Side = 4 ;
  94: LD_ADDR_EXP 36
  98: PUSH
  99: LD_INT 4
 101: ST_TO_ADDR
// Player_Team = 2 ;
 102: LD_ADDR_EXP 37
 106: PUSH
 107: LD_INT 2
 109: ST_TO_ADDR
// Side_Positions = [ 0 , 3 , 0 , 1 , 0 , 2 , 4 , 0 ] ;
 110: LD_ADDR_EXP 40
 114: PUSH
 115: LD_INT 0
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 1
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 2
 132: PUSH
 133: LD_INT 4
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// Side_Teams = [ 0 , 1 , 0 , 2 , 0 , 1 , 2 , 0 ] ;
 149: LD_ADDR_EXP 38
 153: PUSH
 154: LD_INT 0
 156: PUSH
 157: LD_INT 1
 159: PUSH
 160: LD_INT 0
 162: PUSH
 163: LD_INT 2
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// Side_Nations = [ 0 , 3 , 0 , 1 , 0 , 1 , 3 , 0 ] ;
 188: LD_ADDR_EXP 41
 192: PUSH
 193: LD_INT 0
 195: PUSH
 196: LD_INT 3
 198: PUSH
 199: LD_INT 0
 201: PUSH
 202: LD_INT 1
 204: PUSH
 205: LD_INT 0
 207: PUSH
 208: LD_INT 1
 210: PUSH
 211: LD_INT 3
 213: PUSH
 214: LD_INT 0
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: ST_TO_ADDR
// Teams = [ [ 2 , 7 ] , [ 6 , 4 ] ] ;
 227: LD_ADDR_EXP 39
 231: PUSH
 232: LD_INT 2
 234: PUSH
 235: LD_INT 7
 237: PUSH
 238: EMPTY
 239: LIST
 240: LIST
 241: PUSH
 242: LD_INT 6
 244: PUSH
 245: LD_INT 4
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: ST_TO_ADDR
// end ; Side_Count = ( Side_Positions diff [ 0 ] ) + 0 ;
 256: LD_ADDR_EXP 34
 260: PUSH
 261: LD_EXP 40
 265: PUSH
 266: LD_INT 0
 268: PUSH
 269: EMPTY
 270: LIST
 271: DIFF
 272: PUSH
 273: LD_INT 0
 275: PLUS
 276: ST_TO_ADDR
// Team_Count = ( Side_Teams diff [ 0 ] ) + 0 ;
 277: LD_ADDR_EXP 35
 281: PUSH
 282: LD_EXP 38
 286: PUSH
 287: LD_INT 0
 289: PUSH
 290: EMPTY
 291: LIST
 292: DIFF
 293: PUSH
 294: LD_INT 0
 296: PLUS
 297: ST_TO_ADDR
// if MultiPlayer then
 298: LD_OWVAR 4
 302: IFFALSE 534
// begin def_base_level = GetMultiplayerSetting ( 0 ) ;
 304: LD_ADDR_EXP 2
 308: PUSH
 309: LD_INT 0
 311: PPUSH
 312: CALL_OW 426
 316: ST_TO_ADDR
// def_amount_of_people = GetMultiplayerSetting ( 1 ) ;
 317: LD_ADDR_EXP 3
 321: PUSH
 322: LD_INT 1
 324: PPUSH
 325: CALL_OW 426
 329: ST_TO_ADDR
// def_initial_level = GetMultiplayerSetting ( 2 ) ;
 330: LD_ADDR_EXP 4
 334: PUSH
 335: LD_INT 2
 337: PPUSH
 338: CALL_OW 426
 342: ST_TO_ADDR
// def_starting_resources = GetMultiplayerSetting ( 3 ) ;
 343: LD_ADDR_EXP 5
 347: PUSH
 348: LD_INT 3
 350: PPUSH
 351: CALL_OW 426
 355: ST_TO_ADDR
// def_shipments_density = GetMultiplayerSetting ( 4 ) ;
 356: LD_ADDR_EXP 6
 360: PUSH
 361: LD_INT 4
 363: PPUSH
 364: CALL_OW 426
 368: ST_TO_ADDR
// def_oil_deposits = GetMultiplayerSetting ( 5 ) ;
 369: LD_ADDR_EXP 7
 373: PUSH
 374: LD_INT 5
 376: PPUSH
 377: CALL_OW 426
 381: ST_TO_ADDR
// def_sib_deposits = GetMultiplayerSetting ( 6 ) ;
 382: LD_ADDR_EXP 8
 386: PUSH
 387: LD_INT 6
 389: PPUSH
 390: CALL_OW 426
 394: ST_TO_ADDR
// if gametype = 11 then
 395: LD_EXP 1
 399: PUSH
 400: LD_INT 11
 402: EQUAL
 403: IFFALSE 415
// def_shared_vision = 0 else
 405: LD_ADDR_EXP 9
 409: PUSH
 410: LD_INT 0
 412: ST_TO_ADDR
 413: GO 428
// def_shared_vision = GetMultiplayerSetting ( 10 ) ;
 415: LD_ADDR_EXP 9
 419: PUSH
 420: LD_INT 10
 422: PPUSH
 423: CALL_OW 426
 427: ST_TO_ADDR
// def_morale_flags = GetMultiplayerSetting ( 11 ) ;
 428: LD_ADDR_EXP 10
 432: PUSH
 433: LD_INT 11
 435: PPUSH
 436: CALL_OW 426
 440: ST_TO_ADDR
// def_siberite_detection = GetMultiplayerSetting ( 12 ) ;
 441: LD_ADDR_EXP 11
 445: PUSH
 446: LD_INT 12
 448: PPUSH
 449: CALL_OW 426
 453: ST_TO_ADDR
// def_amount_of_apemen = GetMultiplayerSetting ( 13 ) ;
 454: LD_ADDR_EXP 12
 458: PUSH
 459: LD_INT 13
 461: PPUSH
 462: CALL_OW 426
 466: ST_TO_ADDR
// def_people_respawning = GetMultiplayerSetting ( 14 ) ;
 467: LD_ADDR_EXP 13
 471: PUSH
 472: LD_INT 14
 474: PPUSH
 475: CALL_OW 426
 479: ST_TO_ADDR
// def_siberite_bomb = GetMultiplayerSetting ( 15 ) ;
 480: LD_ADDR_EXP 14
 484: PUSH
 485: LD_INT 15
 487: PPUSH
 488: CALL_OW 426
 492: ST_TO_ADDR
// def_cost = GetMultiplayerSetting ( 16 ) ;
 493: LD_ADDR_EXP 15
 497: PUSH
 498: LD_INT 16
 500: PPUSH
 501: CALL_OW 426
 505: ST_TO_ADDR
// def_cost_decreasing = GetMultiplayerSetting ( 17 ) ;
 506: LD_ADDR_EXP 16
 510: PUSH
 511: LD_INT 17
 513: PPUSH
 514: CALL_OW 426
 518: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 519: LD_ADDR_VAR 0 6
 523: PUSH
 524: LD_INT 22
 526: PPUSH
 527: CALL_OW 426
 531: ST_TO_ADDR
// end else
 532: GO 666
// begin randomize ;
 534: CALL_OW 10
// def_base_level = 0 ;
 538: LD_ADDR_EXP 2
 542: PUSH
 543: LD_INT 0
 545: ST_TO_ADDR
// def_amount_of_people = 4 ;
 546: LD_ADDR_EXP 3
 550: PUSH
 551: LD_INT 4
 553: ST_TO_ADDR
// def_initial_level = 3 ;
 554: LD_ADDR_EXP 4
 558: PUSH
 559: LD_INT 3
 561: ST_TO_ADDR
// def_starting_resources = 3 ;
 562: LD_ADDR_EXP 5
 566: PUSH
 567: LD_INT 3
 569: ST_TO_ADDR
// def_shipments_density = 2 ;
 570: LD_ADDR_EXP 6
 574: PUSH
 575: LD_INT 2
 577: ST_TO_ADDR
// def_oil_deposits = 2 ;
 578: LD_ADDR_EXP 7
 582: PUSH
 583: LD_INT 2
 585: ST_TO_ADDR
// def_sib_deposits = 2 ;
 586: LD_ADDR_EXP 8
 590: PUSH
 591: LD_INT 2
 593: ST_TO_ADDR
// def_shared_vision = 1 ;
 594: LD_ADDR_EXP 9
 598: PUSH
 599: LD_INT 1
 601: ST_TO_ADDR
// def_morale_flags = 4 ;
 602: LD_ADDR_EXP 10
 606: PUSH
 607: LD_INT 4
 609: ST_TO_ADDR
// def_siberite_detection = 1 ;
 610: LD_ADDR_EXP 11
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
// def_amount_of_apemen = 3 ;
 618: LD_ADDR_EXP 12
 622: PUSH
 623: LD_INT 3
 625: ST_TO_ADDR
// def_people_respawning = 0 ;
 626: LD_ADDR_EXP 13
 630: PUSH
 631: LD_INT 0
 633: ST_TO_ADDR
// def_siberite_bomb = 0 ;
 634: LD_ADDR_EXP 14
 638: PUSH
 639: LD_INT 0
 641: ST_TO_ADDR
// def_cost = 4 ;
 642: LD_ADDR_EXP 15
 646: PUSH
 647: LD_INT 4
 649: ST_TO_ADDR
// def_cost_decreasing = 0 ;
 650: LD_ADDR_EXP 16
 654: PUSH
 655: LD_INT 0
 657: ST_TO_ADDR
// tech_level = 4 ;
 658: LD_ADDR_VAR 0 6
 662: PUSH
 663: LD_INT 4
 665: ST_TO_ADDR
// end ; if isSGUI then
 666: LD_OWVAR 83
 670: IFFALSE 678
// setMpTechs ( ) else
 672: CALL 10134 0 0
 676: GO 691
// begin SetMpTechLevel ( tech_level + 1 ) ;
 678: LD_VAR 0 6
 682: PUSH
 683: LD_INT 1
 685: PLUS
 686: PPUSH
 687: CALL 10281 0 1
// end ; if gametype = 11 then
 691: LD_EXP 1
 695: PUSH
 696: LD_INT 11
 698: EQUAL
 699: IFFALSE 1041
// begin sides = [ ] ;
 701: LD_ADDR_VAR 0 2
 705: PUSH
 706: EMPTY
 707: ST_TO_ADDR
// for s1 = 1 to Side_Positions do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: DOUBLE
 714: LD_INT 1
 716: DEC
 717: ST_TO_ADDR
 718: LD_EXP 40
 722: PUSH
 723: FOR_TO
 724: IFFALSE 756
// if Side_Positions [ s1 ] then
 726: LD_EXP 40
 730: PUSH
 731: LD_VAR 0 3
 735: ARRAY
 736: IFFALSE 754
// sides = sides ^ s1 ;
 738: LD_ADDR_VAR 0 2
 742: PUSH
 743: LD_VAR 0 2
 747: PUSH
 748: LD_VAR 0 3
 752: ADD
 753: ST_TO_ADDR
 754: GO 723
 756: POP
 757: POP
// if sides < 4 then
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 4
 765: LESS
 766: IFFALSE 781
// begin YouLostInMultiplayer ;
 768: CALL_OW 107
// wait ( 0 0$1 ) ;
 772: LD_INT 35
 774: PPUSH
 775: CALL_OW 67
// exit ;
 779: GO 1649
// end ; s1 = sides [ Rand ( 1 , 4 ) ] ;
 781: LD_ADDR_VAR 0 3
 785: PUSH
 786: LD_VAR 0 2
 790: PUSH
 791: LD_INT 1
 793: PPUSH
 794: LD_INT 4
 796: PPUSH
 797: CALL_OW 12
 801: ARRAY
 802: ST_TO_ADDR
// sides = sides diff s1 ;
 803: LD_ADDR_VAR 0 2
 807: PUSH
 808: LD_VAR 0 2
 812: PUSH
 813: LD_VAR 0 3
 817: DIFF
 818: ST_TO_ADDR
// s2 = sides [ Rand ( 1 , 3 ) ] ;
 819: LD_ADDR_VAR 0 4
 823: PUSH
 824: LD_VAR 0 2
 828: PUSH
 829: LD_INT 1
 831: PPUSH
 832: LD_INT 3
 834: PPUSH
 835: CALL_OW 12
 839: ARRAY
 840: ST_TO_ADDR
// sides = sides diff s2 ;
 841: LD_ADDR_VAR 0 2
 845: PUSH
 846: LD_VAR 0 2
 850: PUSH
 851: LD_VAR 0 4
 855: DIFF
 856: ST_TO_ADDR
// s3 = sides [ Rand ( 1 , 2 ) ] ;
 857: LD_ADDR_VAR 0 5
 861: PUSH
 862: LD_VAR 0 2
 866: PUSH
 867: LD_INT 1
 869: PPUSH
 870: LD_INT 2
 872: PPUSH
 873: CALL_OW 12
 877: ARRAY
 878: ST_TO_ADDR
// sides = sides diff s3 ;
 879: LD_ADDR_VAR 0 2
 883: PUSH
 884: LD_VAR 0 2
 888: PUSH
 889: LD_VAR 0 5
 893: DIFF
 894: ST_TO_ADDR
// Teams = [ [ s1 , s2 ] , [ s3 , sides [ 1 ] ] ] ;
 895: LD_ADDR_EXP 39
 899: PUSH
 900: LD_VAR 0 3
 904: PUSH
 905: LD_VAR 0 4
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: PUSH
 914: LD_VAR 0 5
 918: PUSH
 919: LD_VAR 0 2
 923: PUSH
 924: LD_INT 1
 926: ARRAY
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: ST_TO_ADDR
// Side_Teams = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 936: LD_ADDR_EXP 38
 940: PUSH
 941: LD_INT 0
 943: PUSH
 944: LD_INT 0
 946: PUSH
 947: LD_INT 0
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 0
 955: PUSH
 956: LD_INT 0
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 0
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: LIST
 973: LIST
 974: ST_TO_ADDR
// Side_Teams = Replace ( Replace ( Replace ( Replace ( Side_Teams , s1 , 1 ) , s2 , 1 ) , s3 , 2 ) , sides [ 1 ] , 2 ) ;
 975: LD_ADDR_EXP 38
 979: PUSH
 980: LD_EXP 38
 984: PPUSH
 985: LD_VAR 0 3
 989: PPUSH
 990: LD_INT 1
 992: PPUSH
 993: CALL_OW 1
 997: PPUSH
 998: LD_VAR 0 4
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: CALL_OW 1
1010: PPUSH
1011: LD_VAR 0 5
1015: PPUSH
1016: LD_INT 2
1018: PPUSH
1019: CALL_OW 1
1023: PPUSH
1024: LD_VAR 0 2
1028: PUSH
1029: LD_INT 1
1031: ARRAY
1032: PPUSH
1033: LD_INT 2
1035: PPUSH
1036: CALL_OW 1
1040: ST_TO_ADDR
// end ; is_depot = [ 0 , 1 , 1 , 1 ] [ def_base_level + 1 ] ;
1041: LD_ADDR_EXP 17
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: LD_INT 1
1054: PUSH
1055: LD_INT 1
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: PUSH
1064: LD_EXP 2
1068: PUSH
1069: LD_INT 1
1071: PLUS
1072: ARRAY
1073: ST_TO_ADDR
// number_of_breastworks = [ 0 , 0 , 2 , 4 ] [ def_base_level + 1 ] ;
1074: LD_ADDR_EXP 18
1078: PUSH
1079: LD_INT 0
1081: PUSH
1082: LD_INT 0
1084: PUSH
1085: LD_INT 2
1087: PUSH
1088: LD_INT 4
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: LIST
1095: LIST
1096: PUSH
1097: LD_EXP 2
1101: PUSH
1102: LD_INT 1
1104: PLUS
1105: ARRAY
1106: ST_TO_ADDR
// initial_level = [ 2 , 3 , 4 , 5 ] [ def_initial_level + 1 ] ;
1107: LD_ADDR_EXP 20
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 3
1117: PUSH
1118: LD_INT 4
1120: PUSH
1121: LD_INT 5
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: LD_EXP 4
1134: PUSH
1135: LD_INT 1
1137: PLUS
1138: ARRAY
1139: ST_TO_ADDR
// starting_resources = [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1140: LD_ADDR_EXP 22
1144: PUSH
1145: LD_INT 0
1147: PUSH
1148: LD_INT 0
1150: PUSH
1151: LD_INT 0
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_INT 30
1161: PUSH
1162: LD_INT 0
1164: PUSH
1165: LD_INT 0
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: LIST
1172: PUSH
1173: LD_INT 50
1175: PUSH
1176: LD_INT 20
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: LIST
1186: PUSH
1187: LD_INT 80
1189: PUSH
1190: LD_INT 40
1192: PUSH
1193: LD_INT 20
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: PUSH
1207: LD_EXP 5
1211: PUSH
1212: LD_INT 1
1214: PLUS
1215: ARRAY
1216: ST_TO_ADDR
// starting_crates = [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1217: LD_ADDR_EXP 21
1221: PUSH
1222: LD_INT 10
1224: PUSH
1225: EMPTY
1226: LIST
1227: PUSH
1228: LD_INT 7
1230: PUSH
1231: LD_INT 14
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 6
1240: PUSH
1241: LD_INT 12
1243: PUSH
1244: LD_INT 18
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: LIST
1251: PUSH
1252: LD_INT 5
1254: PUSH
1255: LD_INT 10
1257: PUSH
1258: LD_INT 15
1260: PUSH
1261: LD_INT 20
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: PUSH
1276: LD_EXP 5
1280: PUSH
1281: LD_INT 1
1283: PLUS
1284: ARRAY
1285: ST_TO_ADDR
// number_of_people := def_amount_of_people + 4 ;
1286: LD_ADDR_EXP 19
1290: PUSH
1291: LD_EXP 3
1295: PUSH
1296: LD_INT 4
1298: PLUS
1299: ST_TO_ADDR
// shipments_density := 20 + ( def_shipments_density ) * 28 ;
1300: LD_ADDR_EXP 23
1304: PUSH
1305: LD_INT 20
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 28
1315: MUL
1316: PLUS
1317: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1318: LD_ADDR_EXP 32
1322: PUSH
1323: LD_INT 0
1325: PUSH
1326: LD_INT 3
1328: PUSH
1329: LD_INT 6
1331: PUSH
1332: LD_INT 9
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_EXP 12
1345: PUSH
1346: LD_INT 1
1348: PLUS
1349: ARRAY
1350: ST_TO_ADDR
// respawning_time_min = [ 0 0$0 , 4 4$00 , 0 0$50 ] [ def_people_respawning + 1 ] ;
1351: LD_ADDR_EXP 25
1355: PUSH
1356: LD_INT 0
1358: PUSH
1359: LD_INT 8400
1361: PUSH
1362: LD_INT 1750
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: LIST
1369: PUSH
1370: LD_EXP 13
1374: PUSH
1375: LD_INT 1
1377: PLUS
1378: ARRAY
1379: ST_TO_ADDR
// respawning_time_max = [ 0 0$0 , 10 10$00 , 2 2$00 ] [ def_people_respawning + 1 ] ;
1380: LD_ADDR_EXP 26
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: LD_INT 21000
1390: PUSH
1391: LD_INT 4200
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_EXP 13
1403: PUSH
1404: LD_INT 1
1406: PLUS
1407: ARRAY
1408: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1409: LD_ADDR_EXP 24
1413: PUSH
1414: LD_INT 1
1416: NEG
1417: PUSH
1418: LD_INT 350
1420: PUSH
1421: LD_INT 700
1423: PUSH
1424: LD_INT 1400
1426: PUSH
1427: LD_INT 0
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_EXP 10
1441: PUSH
1442: LD_INT 1
1444: PLUS
1445: ARRAY
1446: ST_TO_ADDR
// battle_flags_id = [ ] ;
1447: LD_ADDR_EXP 49
1451: PUSH
1452: EMPTY
1453: ST_TO_ADDR
// cost = [ 200 , 300 , 400 , 600 , 800 ] [ def_cost + 1 ] ;
1454: LD_ADDR_EXP 27
1458: PUSH
1459: LD_INT 200
1461: PUSH
1462: LD_INT 300
1464: PUSH
1465: LD_INT 400
1467: PUSH
1468: LD_INT 600
1470: PUSH
1471: LD_INT 800
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: PUSH
1481: LD_EXP 15
1485: PUSH
1486: LD_INT 1
1488: PLUS
1489: ARRAY
1490: ST_TO_ADDR
// decr_cost_time = [ 0 , 20 20$0 , 10 10$0 , 5 5$0 ] [ def_cost_decreasing + 1 ] ;
1491: LD_ADDR_EXP 28
1495: PUSH
1496: LD_INT 0
1498: PUSH
1499: LD_INT 42000
1501: PUSH
1502: LD_INT 21000
1504: PUSH
1505: LD_INT 10500
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: LD_EXP 16
1518: PUSH
1519: LD_INT 1
1521: PLUS
1522: ARRAY
1523: ST_TO_ADDR
// oil_dep = [ [ 1 ] , [ 4 ] , [ 1 , 4 ] ] [ def_oil_deposits + 1 ] ;
1524: LD_ADDR_EXP 30
1528: PUSH
1529: LD_INT 1
1531: PUSH
1532: EMPTY
1533: LIST
1534: PUSH
1535: LD_INT 4
1537: PUSH
1538: EMPTY
1539: LIST
1540: PUSH
1541: LD_INT 1
1543: PUSH
1544: LD_INT 4
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: LIST
1555: PUSH
1556: LD_EXP 7
1560: PUSH
1561: LD_INT 1
1563: PLUS
1564: ARRAY
1565: ST_TO_ADDR
// sib_dep = [ [ 2 ] , [ 3 ] , [ 2 , 3 ] ] [ def_sib_deposits + 1 ] ;
1566: LD_ADDR_EXP 31
1570: PUSH
1571: LD_INT 2
1573: PUSH
1574: EMPTY
1575: LIST
1576: PUSH
1577: LD_INT 3
1579: PUSH
1580: EMPTY
1581: LIST
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_EXP 8
1602: PUSH
1603: LD_INT 1
1605: PLUS
1606: ARRAY
1607: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1608: LD_ADDR_EXP 33
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 63000
1621: PUSH
1622: LD_INT 126000
1624: PUSH
1625: LD_INT 189000
1627: PUSH
1628: LD_INT 252000
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: LD_EXP 14
1643: PUSH
1644: LD_INT 1
1646: PLUS
1647: ARRAY
1648: ST_TO_ADDR
// end ;
1649: LD_VAR 0 1
1653: RET
// function prepare_map_coordinates ; var side , dep , br1 , br2 , br3 , br4 , un , i , coord ; begin
1654: LD_INT 0
1656: PPUSH
1657: PPUSH
1658: PPUSH
1659: PPUSH
1660: PPUSH
1661: PPUSH
1662: PPUSH
1663: PPUSH
1664: PPUSH
1665: PPUSH
// depot_def = [ ] ;
1666: LD_ADDR_EXP 45
1670: PUSH
1671: EMPTY
1672: ST_TO_ADDR
// breastworks_def = [ ] ;
1673: LD_ADDR_EXP 46
1677: PUSH
1678: EMPTY
1679: ST_TO_ADDR
// for side := 1 to 4 do
1680: LD_ADDR_VAR 0 2
1684: PUSH
1685: DOUBLE
1686: LD_INT 1
1688: DEC
1689: ST_TO_ADDR
1690: LD_INT 4
1692: PUSH
1693: FOR_TO
1694: IFFALSE 2120
// begin dep := side * 5 - 4 ;
1696: LD_ADDR_VAR 0 3
1700: PUSH
1701: LD_VAR 0 2
1705: PUSH
1706: LD_INT 5
1708: MUL
1709: PUSH
1710: LD_INT 4
1712: MINUS
1713: ST_TO_ADDR
// br1 := side * 5 - 3 ;
1714: LD_ADDR_VAR 0 4
1718: PUSH
1719: LD_VAR 0 2
1723: PUSH
1724: LD_INT 5
1726: MUL
1727: PUSH
1728: LD_INT 3
1730: MINUS
1731: ST_TO_ADDR
// br2 := side * 5 - 2 ;
1732: LD_ADDR_VAR 0 5
1736: PUSH
1737: LD_VAR 0 2
1741: PUSH
1742: LD_INT 5
1744: MUL
1745: PUSH
1746: LD_INT 2
1748: MINUS
1749: ST_TO_ADDR
// br3 := side * 5 - 1 ;
1750: LD_ADDR_VAR 0 6
1754: PUSH
1755: LD_VAR 0 2
1759: PUSH
1760: LD_INT 5
1762: MUL
1763: PUSH
1764: LD_INT 1
1766: MINUS
1767: ST_TO_ADDR
// br4 := side * 5 ;
1768: LD_ADDR_VAR 0 7
1772: PUSH
1773: LD_VAR 0 2
1777: PUSH
1778: LD_INT 5
1780: MUL
1781: ST_TO_ADDR
// depot_def := depot_def ^ [ [ GetX ( dep ) , GetY ( dep ) , GetDir ( dep ) ] ] ;
1782: LD_ADDR_EXP 45
1786: PUSH
1787: LD_EXP 45
1791: PUSH
1792: LD_VAR 0 3
1796: PPUSH
1797: CALL_OW 250
1801: PUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 251
1811: PUSH
1812: LD_VAR 0 3
1816: PPUSH
1817: CALL_OW 254
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: ADD
1830: ST_TO_ADDR
// start_def := start_def ^ [ [ ShiftX ( GetX ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) , ShiftY ( GetY ( Dep ) , GetDir ( Dep ) mod 6 , 6 ) ] ] ;
1831: LD_ADDR_EXP 47
1835: PUSH
1836: LD_EXP 47
1840: PUSH
1841: LD_VAR 0 3
1845: PPUSH
1846: CALL_OW 250
1850: PPUSH
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 254
1860: PUSH
1861: LD_INT 6
1863: MOD
1864: PPUSH
1865: LD_INT 6
1867: PPUSH
1868: CALL_OW 272
1872: PUSH
1873: LD_VAR 0 3
1877: PPUSH
1878: CALL_OW 251
1882: PPUSH
1883: LD_VAR 0 3
1887: PPUSH
1888: CALL_OW 254
1892: PUSH
1893: LD_INT 6
1895: MOD
1896: PPUSH
1897: LD_INT 6
1899: PPUSH
1900: CALL_OW 273
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: ADD
1912: ST_TO_ADDR
// breastworks_def := breastworks_def ^ [ [ [ GetX ( br1 ) , GetY ( br1 ) , GetDir ( br1 ) ] , [ GetX ( br2 ) , GetY ( br2 ) , GetDir ( br2 ) ] , [ GetX ( br3 ) , GetY ( br3 ) , GetDir ( br3 ) ] , [ GetX ( br4 ) , GetY ( br4 ) , GetDir ( br4 ) ] ] ] ;
1913: LD_ADDR_EXP 46
1917: PUSH
1918: LD_EXP 46
1922: PUSH
1923: LD_VAR 0 4
1927: PPUSH
1928: CALL_OW 250
1932: PUSH
1933: LD_VAR 0 4
1937: PPUSH
1938: CALL_OW 251
1942: PUSH
1943: LD_VAR 0 4
1947: PPUSH
1948: CALL_OW 254
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: PUSH
1958: LD_VAR 0 5
1962: PPUSH
1963: CALL_OW 250
1967: PUSH
1968: LD_VAR 0 5
1972: PPUSH
1973: CALL_OW 251
1977: PUSH
1978: LD_VAR 0 5
1982: PPUSH
1983: CALL_OW 254
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_VAR 0 6
1997: PPUSH
1998: CALL_OW 250
2002: PUSH
2003: LD_VAR 0 6
2007: PPUSH
2008: CALL_OW 251
2012: PUSH
2013: LD_VAR 0 6
2017: PPUSH
2018: CALL_OW 254
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: PUSH
2028: LD_VAR 0 7
2032: PPUSH
2033: CALL_OW 250
2037: PUSH
2038: LD_VAR 0 7
2042: PPUSH
2043: CALL_OW 251
2047: PUSH
2048: LD_VAR 0 7
2052: PPUSH
2053: CALL_OW 254
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: EMPTY
2070: LIST
2071: ADD
2072: ST_TO_ADDR
// DestroyUnit ( dep ) ;
2073: LD_VAR 0 3
2077: PPUSH
2078: CALL_OW 65
// DestroyUnit ( br1 ) ;
2082: LD_VAR 0 4
2086: PPUSH
2087: CALL_OW 65
// DestroyUnit ( br2 ) ;
2091: LD_VAR 0 5
2095: PPUSH
2096: CALL_OW 65
// DestroyUnit ( br3 ) ;
2100: LD_VAR 0 6
2104: PPUSH
2105: CALL_OW 65
// DestroyUnit ( br4 ) ;
2109: LD_VAR 0 7
2113: PPUSH
2114: CALL_OW 65
// end ;
2118: GO 1693
2120: POP
2121: POP
// deposits_def = [ [ [ 30 , 22 ] , [ 60 , 42 ] , [ 29 , 2 ] , [ 73 , 57 ] ] , [ [ 148 , 24 ] , [ 119 , 20 ] , [ 172 , 36 ] , [ 133 , 50 ] ] , [ [ 84 , 122 ] , [ 101 , 111 ] , [ 74 , 126 ] , [ 109 , 102 ] ] , [ [ 196 , 117 ] , [ 166 , 94 ] , [ 197 , 133 ] , [ 156 , 83 ] ] ] ;
2122: LD_ADDR_EXP 48
2126: PUSH
2127: LD_INT 30
2129: PUSH
2130: LD_INT 22
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: PUSH
2137: LD_INT 60
2139: PUSH
2140: LD_INT 42
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: PUSH
2147: LD_INT 29
2149: PUSH
2150: LD_INT 2
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PUSH
2157: LD_INT 73
2159: PUSH
2160: LD_INT 57
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 148
2175: PUSH
2176: LD_INT 24
2178: PUSH
2179: EMPTY
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 119
2185: PUSH
2186: LD_INT 20
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 172
2195: PUSH
2196: LD_INT 36
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 133
2205: PUSH
2206: LD_INT 50
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: PUSH
2219: LD_INT 84
2221: PUSH
2222: LD_INT 122
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 101
2231: PUSH
2232: LD_INT 111
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: PUSH
2239: LD_INT 74
2241: PUSH
2242: LD_INT 126
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 109
2251: PUSH
2252: LD_INT 102
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 196
2267: PUSH
2268: LD_INT 117
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 166
2277: PUSH
2278: LD_INT 94
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 197
2287: PUSH
2288: LD_INT 133
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 156
2297: PUSH
2298: LD_INT 83
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: EMPTY
2312: LIST
2313: LIST
2314: LIST
2315: LIST
2316: ST_TO_ADDR
// for i := 1 to 4 do
2317: LD_ADDR_VAR 0 9
2321: PUSH
2322: DOUBLE
2323: LD_INT 1
2325: DEC
2326: ST_TO_ADDR
2327: LD_INT 4
2329: PUSH
2330: FOR_TO
2331: IFFALSE 2401
// for coord in oil_dep do
2333: LD_ADDR_VAR 0 10
2337: PUSH
2338: LD_EXP 30
2342: PUSH
2343: FOR_IN
2344: IFFALSE 2397
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_oil ) ;
2346: LD_EXP 48
2350: PUSH
2351: LD_VAR 0 9
2355: ARRAY
2356: PUSH
2357: LD_VAR 0 10
2361: ARRAY
2362: PUSH
2363: LD_INT 1
2365: ARRAY
2366: PPUSH
2367: LD_EXP 48
2371: PUSH
2372: LD_VAR 0 9
2376: ARRAY
2377: PUSH
2378: LD_VAR 0 10
2382: ARRAY
2383: PUSH
2384: LD_INT 2
2386: ARRAY
2387: PPUSH
2388: LD_INT 2
2390: PPUSH
2391: CALL_OW 62
// end ;
2395: GO 2343
2397: POP
2398: POP
2399: GO 2330
2401: POP
2402: POP
// for i := 1 to 4 do
2403: LD_ADDR_VAR 0 9
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 4
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2487
// for coord in sib_dep do
2419: LD_ADDR_VAR 0 10
2423: PUSH
2424: LD_EXP 31
2428: PUSH
2429: FOR_IN
2430: IFFALSE 2483
// begin CreateDepositXY ( deposits_def [ i ] [ coord ] [ 1 ] , deposits_def [ i ] [ coord ] [ 2 ] , mat_siberit ) ;
2432: LD_EXP 48
2436: PUSH
2437: LD_VAR 0 9
2441: ARRAY
2442: PUSH
2443: LD_VAR 0 10
2447: ARRAY
2448: PUSH
2449: LD_INT 1
2451: ARRAY
2452: PPUSH
2453: LD_EXP 48
2457: PUSH
2458: LD_VAR 0 9
2462: ARRAY
2463: PUSH
2464: LD_VAR 0 10
2468: ARRAY
2469: PUSH
2470: LD_INT 2
2472: ARRAY
2473: PPUSH
2474: LD_INT 3
2476: PPUSH
2477: CALL_OW 62
// end ;
2481: GO 2429
2483: POP
2484: POP
2485: GO 2416
2487: POP
2488: POP
// end ;
2489: LD_VAR 0 1
2493: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
// Team_Game := 0 ;
2499: LD_ADDR_EXP 44
2503: PUSH
2504: LD_INT 0
2506: ST_TO_ADDR
// for i = 1 to 8 do
2507: LD_ADDR_VAR 0 2
2511: PUSH
2512: DOUBLE
2513: LD_INT 1
2515: DEC
2516: ST_TO_ADDR
2517: LD_INT 8
2519: PUSH
2520: FOR_TO
2521: IFFALSE 2547
// Team_Game := Team_Game + Side_Teams [ i ] ;
2523: LD_ADDR_EXP 44
2527: PUSH
2528: LD_EXP 44
2532: PUSH
2533: LD_EXP 38
2537: PUSH
2538: LD_VAR 0 2
2542: ARRAY
2543: PLUS
2544: ST_TO_ADDR
2545: GO 2520
2547: POP
2548: POP
// if not Team_Game then
2549: LD_EXP 44
2553: NOT
2554: IFFALSE 2566
// Team_Game := false else
2556: LD_ADDR_EXP 44
2560: PUSH
2561: LD_INT 0
2563: ST_TO_ADDR
2564: GO 2574
// Team_Game := true ;
2566: LD_ADDR_EXP 44
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// if not Team_Game then
2574: LD_EXP 44
2578: NOT
2579: IFFALSE 2677
// begin for i = 1 to 8 do
2581: LD_ADDR_VAR 0 2
2585: PUSH
2586: DOUBLE
2587: LD_INT 1
2589: DEC
2590: ST_TO_ADDR
2591: LD_INT 8
2593: PUSH
2594: FOR_TO
2595: IFFALSE 2673
// for j = 1 to 8 do
2597: LD_ADDR_VAR 0 3
2601: PUSH
2602: DOUBLE
2603: LD_INT 1
2605: DEC
2606: ST_TO_ADDR
2607: LD_INT 8
2609: PUSH
2610: FOR_TO
2611: IFFALSE 2669
// if i <> j then
2613: LD_VAR 0 2
2617: PUSH
2618: LD_VAR 0 3
2622: NONEQUAL
2623: IFFALSE 2647
// SetAttitude ( i , j , att_neutral , true ) else
2625: LD_VAR 0 2
2629: PPUSH
2630: LD_VAR 0 3
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: CALL_OW 80
2645: GO 2667
// SetAttitude ( i , j , att_friend , true ) ;
2647: LD_VAR 0 2
2651: PPUSH
2652: LD_VAR 0 3
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: CALL_OW 80
2667: GO 2610
2669: POP
2670: POP
2671: GO 2594
2673: POP
2674: POP
// end else
2675: GO 2906
// begin if def_shared_vision and ( gametype <> 11 ) then
2677: LD_EXP 9
2681: PUSH
2682: LD_EXP 1
2686: PUSH
2687: LD_INT 11
2689: NONEQUAL
2690: AND
2691: IFFALSE 2756
// begin for i in Teams do
2693: LD_ADDR_VAR 0 2
2697: PUSH
2698: LD_EXP 39
2702: PUSH
2703: FOR_IN
2704: IFFALSE 2754
// for j = 2 to i do
2706: LD_ADDR_VAR 0 3
2710: PUSH
2711: DOUBLE
2712: LD_INT 2
2714: DEC
2715: ST_TO_ADDR
2716: LD_VAR 0 2
2720: PUSH
2721: FOR_TO
2722: IFFALSE 2750
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2724: LD_VAR 0 2
2728: PUSH
2729: LD_VAR 0 3
2733: ARRAY
2734: PPUSH
2735: LD_VAR 0 2
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PPUSH
2744: CALL_OW 343
2748: GO 2721
2750: POP
2751: POP
2752: GO 2703
2754: POP
2755: POP
// end ; for i := 1 to 8 do
2756: LD_ADDR_VAR 0 2
2760: PUSH
2761: DOUBLE
2762: LD_INT 1
2764: DEC
2765: ST_TO_ADDR
2766: LD_INT 8
2768: PUSH
2769: FOR_TO
2770: IFFALSE 2904
// for j := 1 to 8 do
2772: LD_ADDR_VAR 0 3
2776: PUSH
2777: DOUBLE
2778: LD_INT 1
2780: DEC
2781: ST_TO_ADDR
2782: LD_INT 8
2784: PUSH
2785: FOR_TO
2786: IFFALSE 2900
// if i <> j then
2788: LD_VAR 0 2
2792: PUSH
2793: LD_VAR 0 3
2797: NONEQUAL
2798: IFFALSE 2898
// if gametype = 11 then
2800: LD_EXP 1
2804: PUSH
2805: LD_INT 11
2807: EQUAL
2808: IFFALSE 2832
// SetAttitude ( i , j , att_neutral , true ) else
2810: LD_VAR 0 2
2814: PPUSH
2815: LD_VAR 0 3
2819: PPUSH
2820: LD_INT 0
2822: PPUSH
2823: LD_INT 1
2825: PPUSH
2826: CALL_OW 80
2830: GO 2898
// if Side_Teams [ i ] = Side_Teams [ j ] then
2832: LD_EXP 38
2836: PUSH
2837: LD_VAR 0 2
2841: ARRAY
2842: PUSH
2843: LD_EXP 38
2847: PUSH
2848: LD_VAR 0 3
2852: ARRAY
2853: EQUAL
2854: IFFALSE 2878
// SetAttitude ( i , j , att_friend , true ) else
2856: LD_VAR 0 2
2860: PPUSH
2861: LD_VAR 0 3
2865: PPUSH
2866: LD_INT 1
2868: PPUSH
2869: LD_INT 1
2871: PPUSH
2872: CALL_OW 80
2876: GO 2898
// SetAttitude ( i , j , att_enemy , true ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: CALL_OW 80
2898: GO 2785
2900: POP
2901: POP
2902: GO 2769
2904: POP
2905: POP
// end ; end ;
2906: LD_VAR 0 1
2910: RET
// function prepare_people ( count , cl , x , y , r ) ; var i , j , un ; begin
2911: LD_INT 0
2913: PPUSH
2914: PPUSH
2915: PPUSH
2916: PPUSH
// result := [ ] ;
2917: LD_ADDR_VAR 0 6
2921: PUSH
2922: EMPTY
2923: ST_TO_ADDR
// for i := 1 to count do
2924: LD_ADDR_VAR 0 7
2928: PUSH
2929: DOUBLE
2930: LD_INT 1
2932: DEC
2933: ST_TO_ADDR
2934: LD_VAR 0 1
2938: PUSH
2939: FOR_TO
2940: IFFALSE 3334
// begin uc_direction := Rand ( 0 , 5 ) ;
2942: LD_ADDR_OWVAR 24
2946: PUSH
2947: LD_INT 0
2949: PPUSH
2950: LD_INT 5
2952: PPUSH
2953: CALL_OW 12
2957: ST_TO_ADDR
// if commander then
2958: LD_LOC 1
2962: IFFALSE 3071
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2964: LD_ADDR_OWVAR 26
2968: PUSH
2969: LD_OWVAR 19
2973: PUSH
2974: LD_OWVAR 20
2978: ARRAY
2979: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , initial_level + 2 ) ;
2980: LD_INT 1
2982: PPUSH
2983: LD_INT 2
2985: PPUSH
2986: CALL_OW 12
2990: PPUSH
2991: LD_VAR 0 2
2995: PPUSH
2996: LD_EXP 20
3000: PUSH
3001: LD_INT 2
3003: PLUS
3004: PPUSH
3005: CALL_OW 380
// hc_importance := 105 ;
3009: LD_ADDR_OWVAR 32
3013: PUSH
3014: LD_INT 105
3016: ST_TO_ADDR
// commander := false ;
3017: LD_ADDR_LOC 1
3021: PUSH
3022: LD_INT 0
3024: ST_TO_ADDR
// if Multiplayer then
3025: LD_OWVAR 4
3029: IFFALSE 3069
// begin hc_gallery := MULTIAVATARS ;
3031: LD_ADDR_OWVAR 33
3035: PUSH
3036: LD_STRING MULTIAVATARS
3038: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3039: LD_ADDR_OWVAR 34
3043: PUSH
3044: LD_OWVAR 20
3048: PPUSH
3049: CALL_OW 525
3053: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3054: LD_ADDR_OWVAR 27
3058: PUSH
3059: LD_OWVAR 20
3063: PPUSH
3064: CALL_OW 526
3068: ST_TO_ADDR
// end ; end else
3069: GO 3134
// begin hc_name :=  ;
3071: LD_ADDR_OWVAR 26
3075: PUSH
3076: LD_STRING 
3078: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , initial_level ) ;
3079: LD_INT 1
3081: PPUSH
3082: LD_INT 2
3084: PPUSH
3085: CALL_OW 12
3089: PPUSH
3090: LD_VAR 0 2
3094: PPUSH
3095: LD_EXP 20
3099: PPUSH
3100: CALL_OW 380
// hc_importance := 0 ;
3104: LD_ADDR_OWVAR 32
3108: PUSH
3109: LD_INT 0
3111: ST_TO_ADDR
// if Multiplayer then
3112: LD_OWVAR 4
3116: IFFALSE 3134
// begin hc_gallery :=  ;
3118: LD_ADDR_OWVAR 33
3122: PUSH
3123: LD_STRING 
3125: ST_TO_ADDR
// hc_face_number := 0 ;
3126: LD_ADDR_OWVAR 34
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3134: LD_ADDR_VAR 0 9
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// if global_defined then
3144: LD_LOC 3
3148: IFFALSE 3286
// begin j := i ;
3150: LD_ADDR_VAR 0 8
3154: PUSH
3155: LD_VAR 0 7
3159: ST_TO_ADDR
// if cl = class_soldier then
3160: LD_VAR 0 2
3164: PUSH
3165: LD_INT 1
3167: EQUAL
3168: IFFALSE 3186
// j := i + soldiers_created ;
3170: LD_ADDR_VAR 0 8
3174: PUSH
3175: LD_VAR 0 7
3179: PUSH
3180: LD_LOC 4
3184: PLUS
3185: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3186: LD_LOC 2
3190: PUSH
3191: LD_VAR 0 2
3195: ARRAY
3196: PUSH
3197: LD_VAR 0 8
3201: ARRAY
3202: PPUSH
3203: LD_VAR 0 9
3207: PPUSH
3208: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3212: LD_VAR 0 9
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_LOC 2
3224: PUSH
3225: LD_VAR 0 2
3229: ARRAY
3230: PUSH
3231: LD_VAR 0 8
3235: ARRAY
3236: PPUSH
3237: LD_INT 2
3239: PPUSH
3240: CALL_OW 260
3244: PPUSH
3245: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3249: LD_VAR 0 9
3253: PPUSH
3254: LD_INT 1
3256: PPUSH
3257: LD_LOC 2
3261: PUSH
3262: LD_VAR 0 2
3266: ARRAY
3267: PUSH
3268: LD_VAR 0 8
3272: ARRAY
3273: PPUSH
3274: LD_INT 1
3276: PPUSH
3277: CALL_OW 260
3281: PPUSH
3282: CALL_OW 239
// end ; PlaceUnitXYR ( un , x , y , r , false ) ;
3286: LD_VAR 0 9
3290: PPUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_VAR 0 4
3300: PPUSH
3301: LD_VAR 0 5
3305: PPUSH
3306: LD_INT 0
3308: PPUSH
3309: CALL_OW 50
// result := result ^ [ un ] ;
3313: LD_ADDR_VAR 0 6
3317: PUSH
3318: LD_VAR 0 6
3322: PUSH
3323: LD_VAR 0 9
3327: PUSH
3328: EMPTY
3329: LIST
3330: ADD
3331: ST_TO_ADDR
// end ;
3332: GO 2939
3334: POP
3335: POP
// if not global_defined then
3336: LD_LOC 3
3340: NOT
3341: IFFALSE 3403
// if cl = class_soldier and global_units then
3343: LD_VAR 0 2
3347: PUSH
3348: LD_INT 1
3350: EQUAL
3351: PUSH
3352: LD_LOC 2
3356: AND
3357: IFFALSE 3384
// global_units := [ global_units [ 1 ] ^ result ] else
3359: LD_ADDR_LOC 2
3363: PUSH
3364: LD_LOC 2
3368: PUSH
3369: LD_INT 1
3371: ARRAY
3372: PUSH
3373: LD_VAR 0 6
3377: ADD
3378: PUSH
3379: EMPTY
3380: LIST
3381: ST_TO_ADDR
3382: GO 3403
// global_units := global_units ^ [ result ] ;
3384: LD_ADDR_LOC 2
3388: PUSH
3389: LD_LOC 2
3393: PUSH
3394: LD_VAR 0 6
3398: PUSH
3399: EMPTY
3400: LIST
3401: ADD
3402: ST_TO_ADDR
// end ;
3403: LD_VAR 0 6
3407: RET
// function prepare_side ( side ) ; var pos , x , y , i , r , sol , br , dep , neng , nsci , nmech , nsol ; begin
3408: LD_INT 0
3410: PPUSH
3411: PPUSH
3412: PPUSH
3413: PPUSH
3414: PPUSH
3415: PPUSH
3416: PPUSH
3417: PPUSH
3418: PPUSH
3419: PPUSH
3420: PPUSH
3421: PPUSH
3422: PPUSH
// pos := Side_Positions [ side ] ;
3423: LD_ADDR_VAR 0 3
3427: PUSH
3428: LD_EXP 40
3432: PUSH
3433: LD_VAR 0 1
3437: ARRAY
3438: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3439: LD_ADDR_OWVAR 21
3443: PUSH
3444: LD_EXP 41
3448: PUSH
3449: LD_VAR 0 1
3453: ARRAY
3454: ST_TO_ADDR
// uc_side := side ;
3455: LD_ADDR_OWVAR 20
3459: PUSH
3460: LD_VAR 0 1
3464: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3465: LD_ADDR_VAR 0 4
3469: PUSH
3470: LD_EXP 45
3474: PUSH
3475: LD_VAR 0 3
3479: ARRAY
3480: PUSH
3481: LD_INT 1
3483: ARRAY
3484: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3485: LD_ADDR_VAR 0 5
3489: PUSH
3490: LD_EXP 45
3494: PUSH
3495: LD_VAR 0 3
3499: ARRAY
3500: PUSH
3501: LD_INT 2
3503: ARRAY
3504: ST_TO_ADDR
// if is_depot then
3505: LD_EXP 17
3509: IFFALSE 3652
// begin bc_type = b_depot ;
3511: LD_ADDR_OWVAR 42
3515: PUSH
3516: LD_INT 0
3518: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , Depot_Def [ pos ] [ 3 ] ) ;
3519: LD_ADDR_VAR 0 10
3523: PUSH
3524: LD_VAR 0 4
3528: PPUSH
3529: LD_VAR 0 5
3533: PPUSH
3534: LD_EXP 45
3538: PUSH
3539: LD_VAR 0 3
3543: ARRAY
3544: PUSH
3545: LD_INT 3
3547: ARRAY
3548: PPUSH
3549: CALL_OW 47
3553: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3554: LD_VAR 0 10
3558: PPUSH
3559: LD_STRING @
3561: PUSH
3562: LD_VAR 0 1
3566: STR
3567: PPUSH
3568: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3572: LD_VAR 0 10
3576: PPUSH
3577: CALL_OW 274
3581: PPUSH
3582: LD_INT 1
3584: PPUSH
3585: LD_EXP 22
3589: PUSH
3590: LD_INT 1
3592: ARRAY
3593: PPUSH
3594: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3598: LD_VAR 0 10
3602: PPUSH
3603: CALL_OW 274
3607: PPUSH
3608: LD_INT 2
3610: PPUSH
3611: LD_EXP 22
3615: PUSH
3616: LD_INT 2
3618: ARRAY
3619: PPUSH
3620: CALL_OW 277
// SetResourceType ( GetBase ( result ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3624: LD_VAR 0 2
3628: PPUSH
3629: CALL_OW 274
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: LD_EXP 22
3641: PUSH
3642: LD_INT 3
3644: ARRAY
3645: PPUSH
3646: CALL_OW 277
// end else
3650: GO 3796
// begin for i := 1 to 3 do
3652: LD_ADDR_VAR 0 6
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 3
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3794
// begin r := starting_resources [ i ] ;
3668: LD_ADDR_VAR 0 7
3672: PUSH
3673: LD_EXP 22
3677: PUSH
3678: LD_VAR 0 6
3682: ARRAY
3683: ST_TO_ADDR
// while r >= 10 do
3684: LD_VAR 0 7
3688: PUSH
3689: LD_INT 10
3691: GREATEREQUAL
3692: IFFALSE 3792
// if r > 50 then
3694: LD_VAR 0 7
3698: PUSH
3699: LD_INT 50
3701: GREATER
3702: IFFALSE 3748
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3704: LD_VAR 0 6
3708: PPUSH
3709: LD_INT 5
3711: PPUSH
3712: LD_VAR 0 4
3716: PPUSH
3717: LD_VAR 0 5
3721: PPUSH
3722: LD_INT 4
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: CALL_OW 60
// r := r - 50 ;
3732: LD_ADDR_VAR 0 7
3736: PUSH
3737: LD_VAR 0 7
3741: PUSH
3742: LD_INT 50
3744: MINUS
3745: ST_TO_ADDR
// end else
3746: GO 3790
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3748: LD_VAR 0 6
3752: PPUSH
3753: LD_VAR 0 7
3757: PUSH
3758: LD_INT 10
3760: DIV
3761: PPUSH
3762: LD_VAR 0 4
3766: PPUSH
3767: LD_VAR 0 5
3771: PPUSH
3772: LD_INT 4
3774: PPUSH
3775: LD_INT 0
3777: PPUSH
3778: CALL_OW 60
// r := 0 ;
3782: LD_ADDR_VAR 0 7
3786: PUSH
3787: LD_INT 0
3789: ST_TO_ADDR
// end ;
3790: GO 3684
// end ;
3792: GO 3665
3794: POP
3795: POP
// end ; x := start_def [ pos ] [ 1 ] ;
3796: LD_ADDR_VAR 0 4
3800: PUSH
3801: LD_EXP 47
3805: PUSH
3806: LD_VAR 0 3
3810: ARRAY
3811: PUSH
3812: LD_INT 1
3814: ARRAY
3815: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3816: LD_ADDR_VAR 0 5
3820: PUSH
3821: LD_EXP 47
3825: PUSH
3826: LD_VAR 0 3
3830: ARRAY
3831: PUSH
3832: LD_INT 2
3834: ARRAY
3835: ST_TO_ADDR
// for r in starting_crates do
3836: LD_ADDR_VAR 0 7
3840: PUSH
3841: LD_EXP 21
3845: PUSH
3846: FOR_IN
3847: IFFALSE 3879
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3849: LD_INT 1
3851: PPUSH
3852: LD_INT 5
3854: PPUSH
3855: LD_VAR 0 4
3859: PPUSH
3860: LD_VAR 0 5
3864: PPUSH
3865: LD_VAR 0 7
3869: PPUSH
3870: LD_INT 0
3872: PPUSH
3873: CALL_OW 60
3877: GO 3846
3879: POP
3880: POP
// if def_morale_flags then
3881: LD_EXP 10
3885: IFFALSE 3964
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3887: LD_ADDR_EXP 49
3891: PUSH
3892: LD_EXP 49
3896: PUSH
3897: LD_VAR 0 1
3901: PPUSH
3902: LD_VAR 0 4
3906: PPUSH
3907: LD_VAR 0 5
3911: PPUSH
3912: LD_INT 1
3914: PUSH
3915: LD_INT 100
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 2
3924: PUSH
3925: LD_INT 50
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 3
3934: PUSH
3935: LD_INT 20
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: LD_INT 20
3944: PUSH
3945: LD_INT 100
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 418
3962: ADD
3963: ST_TO_ADDR
// neng := number_of_people ;
3964: LD_ADDR_VAR 0 11
3968: PUSH
3969: LD_EXP 19
3973: ST_TO_ADDR
// nsol := number_of_breastworks ;
3974: LD_ADDR_VAR 0 14
3978: PUSH
3979: LD_EXP 18
3983: ST_TO_ADDR
// if nsol < neng div 4 then
3984: LD_VAR 0 14
3988: PUSH
3989: LD_VAR 0 11
3993: PUSH
3994: LD_INT 4
3996: DIV
3997: LESS
3998: IFFALSE 4014
// nsol := neng div 4 ;
4000: LD_ADDR_VAR 0 14
4004: PUSH
4005: LD_VAR 0 11
4009: PUSH
4010: LD_INT 4
4012: DIV
4013: ST_TO_ADDR
// neng := neng - nsol ;
4014: LD_ADDR_VAR 0 11
4018: PUSH
4019: LD_VAR 0 11
4023: PUSH
4024: LD_VAR 0 14
4028: MINUS
4029: ST_TO_ADDR
// nsci := neng div 3 ;
4030: LD_ADDR_VAR 0 12
4034: PUSH
4035: LD_VAR 0 11
4039: PUSH
4040: LD_INT 3
4042: DIV
4043: ST_TO_ADDR
// if nsci < 1 then
4044: LD_VAR 0 12
4048: PUSH
4049: LD_INT 1
4051: LESS
4052: IFFALSE 4062
// nsci := 1 ;
4054: LD_ADDR_VAR 0 12
4058: PUSH
4059: LD_INT 1
4061: ST_TO_ADDR
// neng := neng - nsci ;
4062: LD_ADDR_VAR 0 11
4066: PUSH
4067: LD_VAR 0 11
4071: PUSH
4072: LD_VAR 0 12
4076: MINUS
4077: ST_TO_ADDR
// nmech := neng div 2 ;
4078: LD_ADDR_VAR 0 13
4082: PUSH
4083: LD_VAR 0 11
4087: PUSH
4088: LD_INT 2
4090: DIV
4091: ST_TO_ADDR
// neng := neng - nmech ;
4092: LD_ADDR_VAR 0 11
4096: PUSH
4097: LD_VAR 0 11
4101: PUSH
4102: LD_VAR 0 13
4106: MINUS
4107: ST_TO_ADDR
// if neng < 1 then
4108: LD_VAR 0 11
4112: PUSH
4113: LD_INT 1
4115: LESS
4116: IFFALSE 4126
// neng := 1 ;
4118: LD_ADDR_VAR 0 11
4122: PUSH
4123: LD_INT 1
4125: ST_TO_ADDR
// commander := true ;
4126: LD_ADDR_LOC 1
4130: PUSH
4131: LD_INT 1
4133: ST_TO_ADDR
// soldiers_created := 0 ;
4134: LD_ADDR_LOC 4
4138: PUSH
4139: LD_INT 0
4141: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4142: LD_ADDR_VAR 0 6
4146: PUSH
4147: DOUBLE
4148: LD_INT 1
4150: DEC
4151: ST_TO_ADDR
4152: LD_EXP 18
4156: PUSH
4157: FOR_TO
4158: IFFALSE 4402
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4160: LD_ADDR_VAR 0 4
4164: PUSH
4165: LD_EXP 46
4169: PUSH
4170: LD_VAR 0 3
4174: ARRAY
4175: PUSH
4176: LD_VAR 0 6
4180: ARRAY
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4186: LD_ADDR_VAR 0 5
4190: PUSH
4191: LD_EXP 46
4195: PUSH
4196: LD_VAR 0 3
4200: ARRAY
4201: PUSH
4202: LD_VAR 0 6
4206: ARRAY
4207: PUSH
4208: LD_INT 2
4210: ARRAY
4211: ST_TO_ADDR
// bc_type := b_breastwork ;
4212: LD_ADDR_OWVAR 42
4216: PUSH
4217: LD_INT 31
4219: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , breastworks_def [ pos ] [ i ] [ 3 ] ) ;
4220: LD_ADDR_VAR 0 9
4224: PUSH
4225: LD_VAR 0 4
4229: PPUSH
4230: LD_VAR 0 5
4234: PPUSH
4235: LD_EXP 46
4239: PUSH
4240: LD_VAR 0 3
4244: ARRAY
4245: PUSH
4246: LD_VAR 0 6
4250: ARRAY
4251: PUSH
4252: LD_INT 3
4254: ARRAY
4255: PPUSH
4256: CALL_OW 47
4260: ST_TO_ADDR
// x := ShiftX ( x , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4261: LD_ADDR_VAR 0 4
4265: PUSH
4266: LD_VAR 0 4
4270: PPUSH
4271: LD_EXP 46
4275: PUSH
4276: LD_VAR 0 3
4280: ARRAY
4281: PUSH
4282: LD_VAR 0 6
4286: ARRAY
4287: PUSH
4288: LD_INT 3
4290: ARRAY
4291: PPUSH
4292: LD_INT 2
4294: PPUSH
4295: CALL_OW 272
4299: ST_TO_ADDR
// y := ShiftY ( y , breastworks_def [ pos ] [ i ] [ 3 ] , 2 ) ;
4300: LD_ADDR_VAR 0 5
4304: PUSH
4305: LD_VAR 0 5
4309: PPUSH
4310: LD_EXP 46
4314: PUSH
4315: LD_VAR 0 3
4319: ARRAY
4320: PUSH
4321: LD_VAR 0 6
4325: ARRAY
4326: PUSH
4327: LD_INT 3
4329: ARRAY
4330: PPUSH
4331: LD_INT 2
4333: PPUSH
4334: CALL_OW 273
4338: ST_TO_ADDR
// sol := prepare_people ( 1 , class_soldier , x , y , 0 ) [ 1 ] ;
4339: LD_ADDR_VAR 0 8
4343: PUSH
4344: LD_INT 1
4346: PPUSH
4347: LD_INT 1
4349: PPUSH
4350: LD_VAR 0 4
4354: PPUSH
4355: LD_VAR 0 5
4359: PPUSH
4360: LD_INT 0
4362: PPUSH
4363: CALL 2911 0 5
4367: PUSH
4368: LD_INT 1
4370: ARRAY
4371: ST_TO_ADDR
// soldiers_created := soldiers_created + 1 ;
4372: LD_ADDR_LOC 4
4376: PUSH
4377: LD_LOC 4
4381: PUSH
4382: LD_INT 1
4384: PLUS
4385: ST_TO_ADDR
// ComEnterUnit ( sol , br ) ;
4386: LD_VAR 0 8
4390: PPUSH
4391: LD_VAR 0 9
4395: PPUSH
4396: CALL_OW 120
// end ;
4400: GO 4157
4402: POP
4403: POP
// x := start_def [ pos ] [ 1 ] ;
4404: LD_ADDR_VAR 0 4
4408: PUSH
4409: LD_EXP 47
4413: PUSH
4414: LD_VAR 0 3
4418: ARRAY
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4424: LD_ADDR_VAR 0 5
4428: PUSH
4429: LD_EXP 47
4433: PUSH
4434: LD_VAR 0 3
4438: ARRAY
4439: PUSH
4440: LD_INT 2
4442: ARRAY
4443: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 ) ;
4444: LD_VAR 0 14
4448: PUSH
4449: LD_EXP 18
4453: MINUS
4454: PPUSH
4455: LD_INT 1
4457: PPUSH
4458: LD_VAR 0 4
4462: PPUSH
4463: LD_VAR 0 5
4467: PPUSH
4468: LD_INT 5
4470: PPUSH
4471: CALL 2911 0 5
// prepare_people ( neng , class_engineer , x , y , 5 ) ;
4475: LD_VAR 0 11
4479: PPUSH
4480: LD_INT 2
4482: PPUSH
4483: LD_VAR 0 4
4487: PPUSH
4488: LD_VAR 0 5
4492: PPUSH
4493: LD_INT 5
4495: PPUSH
4496: CALL 2911 0 5
// prepare_people ( nmech , class_mechanic , x , y , 5 ) ;
4500: LD_VAR 0 13
4504: PPUSH
4505: LD_INT 3
4507: PPUSH
4508: LD_VAR 0 4
4512: PPUSH
4513: LD_VAR 0 5
4517: PPUSH
4518: LD_INT 5
4520: PPUSH
4521: CALL 2911 0 5
// prepare_people ( nsci , class_scientistic , x , y , 5 ) ;
4525: LD_VAR 0 12
4529: PPUSH
4530: LD_INT 4
4532: PPUSH
4533: LD_VAR 0 4
4537: PPUSH
4538: LD_VAR 0 5
4542: PPUSH
4543: LD_INT 5
4545: PPUSH
4546: CALL 2911 0 5
// if not global_defined then
4550: LD_LOC 3
4554: NOT
4555: IFFALSE 4565
// global_defined := true ;
4557: LD_ADDR_LOC 3
4561: PUSH
4562: LD_INT 1
4564: ST_TO_ADDR
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4565: LD_EXP 11
4569: PUSH
4570: LD_INT 20
4572: PPUSH
4573: LD_VAR 0 1
4577: PPUSH
4578: CALL_OW 321
4582: PUSH
4583: LD_INT 1
4585: EQUAL
4586: AND
4587: IFFALSE 4604
// SetTech ( tech_SibDet , side , state_researched ) ;
4589: LD_INT 20
4591: PPUSH
4592: LD_VAR 0 1
4596: PPUSH
4597: LD_INT 2
4599: PPUSH
4600: CALL_OW 322
// if def_siberite_bomb = 1 then
4604: LD_EXP 14
4608: PUSH
4609: LD_INT 1
4611: EQUAL
4612: IFFALSE 4646
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4614: LD_INT 25
4616: PPUSH
4617: LD_VAR 0 1
4621: PPUSH
4622: LD_INT 1
4624: PPUSH
4625: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4629: LD_INT 73
4631: PPUSH
4632: LD_VAR 0 1
4636: PPUSH
4637: LD_INT 1
4639: PPUSH
4640: CALL_OW 322
// end else
4644: GO 4676
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4646: LD_INT 25
4648: PPUSH
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_INT 0
4656: PPUSH
4657: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4661: LD_INT 73
4663: PPUSH
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4676: LD_INT 24
4678: PPUSH
4679: LD_VAR 0 1
4683: PPUSH
4684: LD_INT 0
4686: PPUSH
4687: CALL_OW 322
// end ;
4691: LD_VAR 0 2
4695: RET
// every 0 0$1 do
4696: GO 4698
4698: DISABLE
// if ( def_siberite_bomb > 1 ) then
4699: LD_EXP 14
4703: PUSH
4704: LD_INT 1
4706: GREATER
4707: IFFALSE 4722
// begin wait ( siberite_bomb_Delay ) ;
4709: LD_EXP 33
4713: PPUSH
4714: CALL_OW 67
// EnableSibFiss ;
4718: CALL 4723 0 0
// end ;
4722: END
// function EnableSibFiss ; var i ; begin
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
// for i := 1 to 8 do
4727: LD_ADDR_VAR 0 2
4731: PUSH
4732: DOUBLE
4733: LD_INT 1
4735: DEC
4736: ST_TO_ADDR
4737: LD_INT 8
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4787
// if Side_Positions [ i ] then
4743: LD_EXP 40
4747: PUSH
4748: LD_VAR 0 2
4752: ARRAY
4753: IFFALSE 4785
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4755: LD_INT 25
4757: PPUSH
4758: LD_VAR 0 2
4762: PPUSH
4763: LD_INT 1
4765: PPUSH
4766: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4770: LD_INT 73
4772: PPUSH
4773: LD_VAR 0 2
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: CALL_OW 322
// end ;
4785: GO 4740
4787: POP
4788: POP
// end ;
4789: LD_VAR 0 1
4793: RET
// function prepare_sides ; var i ; begin
4794: LD_INT 0
4796: PPUSH
4797: PPUSH
// global_units := [ ] ;
4798: LD_ADDR_LOC 2
4802: PUSH
4803: EMPTY
4804: ST_TO_ADDR
// global_defined := false ;
4805: LD_ADDR_LOC 3
4809: PUSH
4810: LD_INT 0
4812: ST_TO_ADDR
// for i := 1 to 8 do
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: DOUBLE
4819: LD_INT 1
4821: DEC
4822: ST_TO_ADDR
4823: LD_INT 8
4825: PUSH
4826: FOR_TO
4827: IFFALSE 4852
// if Side_Positions [ i ] then
4829: LD_EXP 40
4833: PUSH
4834: LD_VAR 0 2
4838: ARRAY
4839: IFFALSE 4850
// prepare_side ( i ) ;
4841: LD_VAR 0 2
4845: PPUSH
4846: CALL 3408 0 1
4850: GO 4826
4852: POP
4853: POP
// end ;
4854: LD_VAR 0 1
4858: RET
// starting begin disable ( 400 ) ;
4859: LD_INT 400
4861: DISABLE_MARKED
// disable ( 401 ) ;
4862: LD_INT 401
4864: DISABLE_MARKED
// mp_selectmsg := true ;
4865: LD_ADDR_OWVAR 13
4869: PUSH
4870: LD_INT 1
4872: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4873: CALL 0 0 0
// prepare_map_coordinates ;
4877: CALL 1654 0 0
// set_shared_visions_and_alliances ;
4881: CALL 2494 0 0
// prepare_sides ;
4885: CALL 4794 0 0
// Init_Win_Condition ;
4889: CALL 6654 0 0
// InitApeman ;
4893: CALL 9070 0 0
// init_shipments_and_respawning ;
4897: CALL 4982 0 0
// init_infos ;
4901: CALL 7417 0 0
// your_side := Player_Side ;
4905: LD_ADDR_OWVAR 2
4909: PUSH
4910: LD_EXP 36
4914: ST_TO_ADDR
// music_nat := Side_Nations [ your_side ] ;
4915: LD_ADDR_OWVAR 71
4919: PUSH
4920: LD_EXP 41
4924: PUSH
4925: LD_OWVAR 2
4929: ARRAY
4930: ST_TO_ADDR
// ResetFog ;
4931: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4935: LD_EXP 47
4939: PUSH
4940: LD_EXP 40
4944: PUSH
4945: LD_OWVAR 2
4949: ARRAY
4950: ARRAY
4951: PUSH
4952: LD_INT 1
4954: ARRAY
4955: PPUSH
4956: LD_EXP 47
4960: PUSH
4961: LD_EXP 40
4965: PUSH
4966: LD_OWVAR 2
4970: ARRAY
4971: ARRAY
4972: PUSH
4973: LD_INT 2
4975: ARRAY
4976: PPUSH
4977: CALL_OW 86
// end ; end_of_file
4981: END
// var shipment1 , shipment2 , respawn , inqueue ; export function init_shipments_and_respawning ; begin
4982: LD_INT 0
4984: PPUSH
// shipment1 := [ ] ;
4985: LD_ADDR_LOC 5
4989: PUSH
4990: EMPTY
4991: ST_TO_ADDR
// shipment2 := [ ] ;
4992: LD_ADDR_LOC 6
4996: PUSH
4997: EMPTY
4998: ST_TO_ADDR
// respawn := Rand ( 1 , 8 ) ;
4999: LD_ADDR_LOC 7
5003: PUSH
5004: LD_INT 1
5006: PPUSH
5007: LD_INT 8
5009: PPUSH
5010: CALL_OW 12
5014: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5015: LD_ADDR_LOC 8
5019: PUSH
5020: LD_INT 0
5022: PUSH
5023: LD_INT 0
5025: PUSH
5026: LD_INT 0
5028: PUSH
5029: LD_INT 0
5031: PUSH
5032: LD_INT 0
5034: PUSH
5035: LD_INT 0
5037: PUSH
5038: LD_INT 0
5040: PUSH
5041: LD_INT 0
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: ST_TO_ADDR
// end ;
5054: LD_VAR 0 1
5058: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5059: GO 5061
5061: DISABLE
5062: LD_INT 0
5064: PPUSH
5065: PPUSH
5066: PPUSH
5067: PPUSH
// begin if respawning_time_max = 0 then
5068: LD_EXP 26
5072: PUSH
5073: LD_INT 0
5075: EQUAL
5076: IFFALSE 5080
// exit ;
5078: GO 5587
// if respawn = 8 then
5080: LD_LOC 7
5084: PUSH
5085: LD_INT 8
5087: EQUAL
5088: IFFALSE 5100
// respawn := 1 else
5090: LD_ADDR_LOC 7
5094: PUSH
5095: LD_INT 1
5097: ST_TO_ADDR
5098: GO 5114
// respawn := respawn + 1 ;
5100: LD_ADDR_LOC 7
5104: PUSH
5105: LD_LOC 7
5109: PUSH
5110: LD_INT 1
5112: PLUS
5113: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5114: LD_EXP 40
5118: PUSH
5119: LD_LOC 7
5123: ARRAY
5124: PUSH
5125: LD_LOC 8
5129: PUSH
5130: LD_LOC 7
5134: ARRAY
5135: NOT
5136: AND
5137: IFFALSE 5586
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5139: LD_ADDR_VAR 0 1
5143: PUSH
5144: LD_INT 21
5146: PUSH
5147: LD_INT 1
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PUSH
5154: LD_INT 22
5156: PUSH
5157: LD_LOC 7
5161: PUSH
5162: EMPTY
5163: LIST
5164: LIST
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: LD_INT 23
5171: PUSH
5172: LD_INT 0
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PPUSH
5185: CALL_OW 69
5189: ST_TO_ADDR
// if n < number_of_people then
5190: LD_VAR 0 1
5194: PUSH
5195: LD_EXP 19
5199: LESS
5200: IFFALSE 5583
// begin aktresp := respawn ;
5202: LD_ADDR_VAR 0 3
5206: PUSH
5207: LD_LOC 7
5211: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5212: LD_ADDR_LOC 8
5216: PUSH
5217: LD_LOC 8
5221: PPUSH
5222: LD_VAR 0 3
5226: PPUSH
5227: LD_INT 1
5229: PPUSH
5230: CALL_OW 1
5234: ST_TO_ADDR
// enable ;
5235: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5236: LD_EXP 25
5240: PPUSH
5241: LD_EXP 26
5245: PPUSH
5246: CALL_OW 12
5250: PPUSH
5251: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5255: LD_ADDR_LOC 8
5259: PUSH
5260: LD_LOC 8
5264: PPUSH
5265: LD_VAR 0 3
5269: PPUSH
5270: LD_INT 0
5272: PPUSH
5273: CALL_OW 1
5277: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5278: LD_ADDR_VAR 0 2
5282: PUSH
5283: LD_INT 21
5285: PUSH
5286: LD_INT 3
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 2
5295: PUSH
5296: LD_INT 30
5298: PUSH
5299: LD_INT 0
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: PUSH
5306: LD_INT 30
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 50
5323: PUSH
5324: EMPTY
5325: LIST
5326: PUSH
5327: LD_INT 22
5329: PUSH
5330: LD_VAR 0 3
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: PPUSH
5345: CALL_OW 69
5349: ST_TO_ADDR
// if building_list = 0 then
5350: LD_VAR 0 2
5354: PUSH
5355: LD_INT 0
5357: EQUAL
5358: IFFALSE 5403
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5360: LD_ADDR_VAR 0 2
5364: PUSH
5365: LD_INT 21
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 50
5377: PUSH
5378: EMPTY
5379: LIST
5380: PUSH
5381: LD_INT 22
5383: PUSH
5384: LD_VAR 0 3
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: PPUSH
5398: CALL_OW 69
5402: ST_TO_ADDR
// if building_list = 0 then
5403: LD_VAR 0 2
5407: PUSH
5408: LD_INT 0
5410: EQUAL
5411: IFFALSE 5415
// exit ;
5413: GO 5587
// hc_name :=  ;
5415: LD_ADDR_OWVAR 26
5419: PUSH
5420: LD_STRING 
5422: ST_TO_ADDR
// hc_importance := 0 ;
5423: LD_ADDR_OWVAR 32
5427: PUSH
5428: LD_INT 0
5430: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , initial_level div 2 ) ;
5431: LD_INT 0
5433: PPUSH
5434: LD_INT 0
5436: PPUSH
5437: LD_EXP 20
5441: PUSH
5442: LD_INT 2
5444: DIV
5445: PPUSH
5446: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
5450: LD_ADDR_OWVAR 21
5454: PUSH
5455: LD_EXP 41
5459: PUSH
5460: LD_VAR 0 3
5464: ARRAY
5465: ST_TO_ADDR
// uc_side := aktresp ;
5466: LD_ADDR_OWVAR 20
5470: PUSH
5471: LD_VAR 0 3
5475: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
5476: LD_ADDR_VAR 0 4
5480: PUSH
5481: LD_VAR 0 2
5485: PUSH
5486: LD_INT 1
5488: PPUSH
5489: LD_VAR 0 2
5493: PUSH
5494: LD_INT 0
5496: PLUS
5497: PPUSH
5498: CALL_OW 12
5502: ARRAY
5503: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
5504: LD_VAR 0 4
5508: PPUSH
5509: CALL_OW 266
5513: PUSH
5514: LD_INT 0
5516: PUSH
5517: LD_INT 1
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: IN
5524: IFFALSE 5536
// n = 25 else
5526: LD_ADDR_VAR 0 1
5530: PUSH
5531: LD_INT 25
5533: ST_TO_ADDR
5534: GO 5544
// n = 10 ;
5536: LD_ADDR_VAR 0 1
5540: PUSH
5541: LD_INT 10
5543: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
5544: CALL_OW 44
5548: PPUSH
5549: LD_VAR 0 4
5553: PPUSH
5554: CALL_OW 250
5558: PPUSH
5559: LD_VAR 0 4
5563: PPUSH
5564: CALL_OW 251
5568: PPUSH
5569: LD_VAR 0 1
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: CALL_OW 50
// end else
5581: GO 5584
// enable ;
5583: ENABLE
// end else
5584: GO 5587
// enable ;
5586: ENABLE
// end ;
5587: PPOPN 4
5589: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
5590: GO 5592
5592: DISABLE
5593: LD_INT 0
5595: PPUSH
5596: PPUSH
// begin case tick of 1 .. 1 1$0 :
5597: LD_OWVAR 1
5601: PUSH
5602: LD_INT 1
5604: DOUBLE
5605: GREATEREQUAL
5606: IFFALSE 5614
5608: LD_INT 2100
5610: DOUBLE
5611: LESSEQUAL
5612: IFTRUE 5616
5614: GO 5627
5616: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5617: LD_ADDR_VAR 0 1
5621: PUSH
5622: LD_INT 150
5624: ST_TO_ADDR
5625: GO 5810
5627: LD_INT 2100
5629: PUSH
5630: LD_INT 1
5632: PLUS
5633: DOUBLE
5634: GREATEREQUAL
5635: IFFALSE 5643
5637: LD_INT 10500
5639: DOUBLE
5640: LESSEQUAL
5641: IFTRUE 5645
5643: GO 5656
5645: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
5646: LD_ADDR_VAR 0 1
5650: PUSH
5651: LD_INT 100
5653: ST_TO_ADDR
5654: GO 5810
5656: LD_INT 10500
5658: PUSH
5659: LD_INT 1
5661: PLUS
5662: DOUBLE
5663: GREATEREQUAL
5664: IFFALSE 5672
5666: LD_INT 21000
5668: DOUBLE
5669: LESSEQUAL
5670: IFTRUE 5674
5672: GO 5685
5674: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
5675: LD_ADDR_VAR 0 1
5679: PUSH
5680: LD_INT 90
5682: ST_TO_ADDR
5683: GO 5810
5685: LD_INT 21000
5687: PUSH
5688: LD_INT 1
5690: PLUS
5691: DOUBLE
5692: GREATEREQUAL
5693: IFFALSE 5701
5695: LD_INT 42000
5697: DOUBLE
5698: LESSEQUAL
5699: IFTRUE 5703
5701: GO 5714
5703: POP
// d := 70 ; 20 20$0 + 1 .. 30 30$0 :
5704: LD_ADDR_VAR 0 1
5708: PUSH
5709: LD_INT 70
5711: ST_TO_ADDR
5712: GO 5810
5714: LD_INT 42000
5716: PUSH
5717: LD_INT 1
5719: PLUS
5720: DOUBLE
5721: GREATEREQUAL
5722: IFFALSE 5730
5724: LD_INT 63000
5726: DOUBLE
5727: LESSEQUAL
5728: IFTRUE 5732
5730: GO 5743
5732: POP
// d := 60 ; 30 30$0 + 1 .. 50 50$0 :
5733: LD_ADDR_VAR 0 1
5737: PUSH
5738: LD_INT 60
5740: ST_TO_ADDR
5741: GO 5810
5743: LD_INT 63000
5745: PUSH
5746: LD_INT 1
5748: PLUS
5749: DOUBLE
5750: GREATEREQUAL
5751: IFFALSE 5759
5753: LD_INT 105000
5755: DOUBLE
5756: LESSEQUAL
5757: IFTRUE 5761
5759: GO 5772
5761: POP
// d := 35 ; 50 50$0 + 1 .. 300 300$0 :
5762: LD_ADDR_VAR 0 1
5766: PUSH
5767: LD_INT 35
5769: ST_TO_ADDR
5770: GO 5810
5772: LD_INT 105000
5774: PUSH
5775: LD_INT 1
5777: PLUS
5778: DOUBLE
5779: GREATEREQUAL
5780: IFFALSE 5788
5782: LD_INT 630000
5784: DOUBLE
5785: LESSEQUAL
5786: IFTRUE 5790
5788: GO 5801
5790: POP
// d := 20 ; else
5791: LD_ADDR_VAR 0 1
5795: PUSH
5796: LD_INT 20
5798: ST_TO_ADDR
5799: GO 5810
5801: POP
// d := 0 ; end ;
5802: LD_ADDR_VAR 0 1
5806: PUSH
5807: LD_INT 0
5809: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density div 2 then
5810: LD_INT 1
5812: PPUSH
5813: LD_INT 10000
5815: PPUSH
5816: CALL_OW 12
5820: PUSH
5821: LD_VAR 0 1
5825: PUSH
5826: LD_EXP 23
5830: MUL
5831: PUSH
5832: LD_INT 2
5834: DIV
5835: LESSEQUAL
5836: IFFALSE 5959
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
5838: LD_INT 1
5840: PPUSH
5841: LD_INT 140
5843: PPUSH
5844: CALL_OW 12
5848: PPUSH
5849: CALL_OW 67
// if shipment1 = [ ] then
5853: LD_LOC 5
5857: PUSH
5858: EMPTY
5859: EQUAL
5860: IFFALSE 5901
// shipment1 := [ base1 , base2 , base3 , base4 , safe1 , safe2 , safe3 , safe4 ] ;
5862: LD_ADDR_LOC 5
5866: PUSH
5867: LD_INT 18
5869: PUSH
5870: LD_INT 19
5872: PUSH
5873: LD_INT 20
5875: PUSH
5876: LD_INT 21
5878: PUSH
5879: LD_INT 26
5881: PUSH
5882: LD_INT 27
5884: PUSH
5885: LD_INT 28
5887: PUSH
5888: LD_INT 29
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: ST_TO_ADDR
// q := shipment1 [ Rand ( 1 , shipment1 ) ] ;
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: LD_LOC 5
5910: PUSH
5911: LD_INT 1
5913: PPUSH
5914: LD_LOC 5
5918: PPUSH
5919: CALL_OW 12
5923: ARRAY
5924: ST_TO_ADDR
// shipment1 := shipment1 diff [ q ] ;
5925: LD_ADDR_LOC 5
5929: PUSH
5930: LD_LOC 5
5934: PUSH
5935: LD_VAR 0 2
5939: PUSH
5940: EMPTY
5941: LIST
5942: DIFF
5943: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
5944: LD_INT 5
5946: PPUSH
5947: LD_VAR 0 2
5951: PPUSH
5952: LD_INT 1
5954: PPUSH
5955: CALL_OW 55
// end ; enable ;
5959: ENABLE
// end ;
5960: PPOPN 2
5962: END
// every 0 0$5 + 0 0$1.1 do var d , q ;
5963: GO 5965
5965: DISABLE
5966: LD_INT 0
5968: PPUSH
5969: PPUSH
// begin case tick of 1 .. 1 1$0 :
5970: LD_OWVAR 1
5974: PUSH
5975: LD_INT 1
5977: DOUBLE
5978: GREATEREQUAL
5979: IFFALSE 5987
5981: LD_INT 2100
5983: DOUBLE
5984: LESSEQUAL
5985: IFTRUE 5989
5987: GO 6000
5989: POP
// d := 150 ; 1 1$0 + 1 .. 5 5$0 :
5990: LD_ADDR_VAR 0 1
5994: PUSH
5995: LD_INT 150
5997: ST_TO_ADDR
5998: GO 6183
6000: LD_INT 2100
6002: PUSH
6003: LD_INT 1
6005: PLUS
6006: DOUBLE
6007: GREATEREQUAL
6008: IFFALSE 6016
6010: LD_INT 10500
6012: DOUBLE
6013: LESSEQUAL
6014: IFTRUE 6018
6016: GO 6029
6018: POP
// d := 100 ; 5 5$0 + 1 .. 10 10$0 :
6019: LD_ADDR_VAR 0 1
6023: PUSH
6024: LD_INT 100
6026: ST_TO_ADDR
6027: GO 6183
6029: LD_INT 10500
6031: PUSH
6032: LD_INT 1
6034: PLUS
6035: DOUBLE
6036: GREATEREQUAL
6037: IFFALSE 6045
6039: LD_INT 21000
6041: DOUBLE
6042: LESSEQUAL
6043: IFTRUE 6047
6045: GO 6058
6047: POP
// d := 90 ; 10 10$0 + 1 .. 20 20$0 :
6048: LD_ADDR_VAR 0 1
6052: PUSH
6053: LD_INT 90
6055: ST_TO_ADDR
6056: GO 6183
6058: LD_INT 21000
6060: PUSH
6061: LD_INT 1
6063: PLUS
6064: DOUBLE
6065: GREATEREQUAL
6066: IFFALSE 6074
6068: LD_INT 42000
6070: DOUBLE
6071: LESSEQUAL
6072: IFTRUE 6076
6074: GO 6087
6076: POP
// d := 80 ; 20 20$0 + 1 .. 30 30$0 :
6077: LD_ADDR_VAR 0 1
6081: PUSH
6082: LD_INT 80
6084: ST_TO_ADDR
6085: GO 6183
6087: LD_INT 42000
6089: PUSH
6090: LD_INT 1
6092: PLUS
6093: DOUBLE
6094: GREATEREQUAL
6095: IFFALSE 6103
6097: LD_INT 63000
6099: DOUBLE
6100: LESSEQUAL
6101: IFTRUE 6105
6103: GO 6116
6105: POP
// d := 70 ; 30 30$0 + 1 .. 50 50$0 :
6106: LD_ADDR_VAR 0 1
6110: PUSH
6111: LD_INT 70
6113: ST_TO_ADDR
6114: GO 6183
6116: LD_INT 63000
6118: PUSH
6119: LD_INT 1
6121: PLUS
6122: DOUBLE
6123: GREATEREQUAL
6124: IFFALSE 6132
6126: LD_INT 105000
6128: DOUBLE
6129: LESSEQUAL
6130: IFTRUE 6134
6132: GO 6145
6134: POP
// d := 55 ; 50 50$0 + 1 .. 300 300$0 :
6135: LD_ADDR_VAR 0 1
6139: PUSH
6140: LD_INT 55
6142: ST_TO_ADDR
6143: GO 6183
6145: LD_INT 105000
6147: PUSH
6148: LD_INT 1
6150: PLUS
6151: DOUBLE
6152: GREATEREQUAL
6153: IFFALSE 6161
6155: LD_INT 630000
6157: DOUBLE
6158: LESSEQUAL
6159: IFTRUE 6163
6161: GO 6174
6163: POP
// d := 40 ; else
6164: LD_ADDR_VAR 0 1
6168: PUSH
6169: LD_INT 40
6171: ST_TO_ADDR
6172: GO 6183
6174: POP
// d := 0 ; end ;
6175: LD_ADDR_VAR 0 1
6179: PUSH
6180: LD_INT 0
6182: ST_TO_ADDR
// if rand ( 1 , 10000 ) <= d * shipments_density * 2 div 3 then
6183: LD_INT 1
6185: PPUSH
6186: LD_INT 10000
6188: PPUSH
6189: CALL_OW 12
6193: PUSH
6194: LD_VAR 0 1
6198: PUSH
6199: LD_EXP 23
6203: MUL
6204: PUSH
6205: LD_INT 2
6207: MUL
6208: PUSH
6209: LD_INT 3
6211: DIV
6212: LESSEQUAL
6213: IFFALSE 6352
// begin wait ( Rand ( 1 , 0 0$4 ) ) ;
6215: LD_INT 1
6217: PPUSH
6218: LD_INT 140
6220: PPUSH
6221: CALL_OW 12
6225: PPUSH
6226: CALL_OW 67
// if shipment2 = [ ] then
6230: LD_LOC 6
6234: PUSH
6235: EMPTY
6236: EQUAL
6237: IFFALSE 6294
// shipment2 := [ between1 , between2 , between3 , between4 , ring1 , ring2 , ring3 , ring4 , center , center , center , center ] ;
6239: LD_ADDR_LOC 6
6243: PUSH
6244: LD_INT 30
6246: PUSH
6247: LD_INT 31
6249: PUSH
6250: LD_INT 32
6252: PUSH
6253: LD_INT 33
6255: PUSH
6256: LD_INT 34
6258: PUSH
6259: LD_INT 35
6261: PUSH
6262: LD_INT 36
6264: PUSH
6265: LD_INT 37
6267: PUSH
6268: LD_INT 38
6270: PUSH
6271: LD_INT 38
6273: PUSH
6274: LD_INT 38
6276: PUSH
6277: LD_INT 38
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: ST_TO_ADDR
// q := shipment2 [ Rand ( 1 , shipment2 ) ] ;
6294: LD_ADDR_VAR 0 2
6298: PUSH
6299: LD_LOC 6
6303: PUSH
6304: LD_INT 1
6306: PPUSH
6307: LD_LOC 6
6311: PPUSH
6312: CALL_OW 12
6316: ARRAY
6317: ST_TO_ADDR
// shipment2 := shipment2 diff [ q ] ;
6318: LD_ADDR_LOC 6
6322: PUSH
6323: LD_LOC 6
6327: PUSH
6328: LD_VAR 0 2
6332: PUSH
6333: EMPTY
6334: LIST
6335: DIFF
6336: ST_TO_ADDR
// CreateCratesArea ( 5 , q , true ) ;
6337: LD_INT 5
6339: PPUSH
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: CALL_OW 55
// end ; enable ;
6352: ENABLE
// end ; end_of_file
6353: PPOPN 2
6355: END
// function prepare_treasure ( x , y ) ; var sm , i ; begin
6356: LD_INT 0
6358: PPUSH
6359: PPUSH
6360: PPUSH
// sm := rand ( 0 , 6 ) ;
6361: LD_ADDR_VAR 0 4
6365: PUSH
6366: LD_INT 0
6368: PPUSH
6369: LD_INT 6
6371: PPUSH
6372: CALL_OW 12
6376: ST_TO_ADDR
// for i := 0 to 15 do
6377: LD_ADDR_VAR 0 5
6381: PUSH
6382: DOUBLE
6383: LD_INT 0
6385: DEC
6386: ST_TO_ADDR
6387: LD_INT 15
6389: PUSH
6390: FOR_TO
6391: IFFALSE 6497
// begin MoveAreaXY ( p1 + i , x , y ) ;
6393: LD_INT 1
6395: PUSH
6396: LD_VAR 0 5
6400: PLUS
6401: PPUSH
6402: LD_VAR 0 1
6406: PPUSH
6407: LD_VAR 0 2
6411: PPUSH
6412: CALL_OW 425
// if prob ( 30 ) then
6416: LD_INT 30
6418: PPUSH
6419: CALL_OW 13
6423: IFFALSE 6441
// sm := rand ( 0 , 6 ) ;
6425: LD_ADDR_VAR 0 4
6429: PUSH
6430: LD_INT 0
6432: PPUSH
6433: LD_INT 6
6435: PPUSH
6436: CALL_OW 12
6440: ST_TO_ADDR
// x := ShiftX ( x - 1 , sm , 1 ) ;
6441: LD_ADDR_VAR 0 1
6445: PUSH
6446: LD_VAR 0 1
6450: PUSH
6451: LD_INT 1
6453: MINUS
6454: PPUSH
6455: LD_VAR 0 4
6459: PPUSH
6460: LD_INT 1
6462: PPUSH
6463: CALL_OW 272
6467: ST_TO_ADDR
// y := ShiftY ( y - 1 , sm , 1 ) ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: LD_VAR 0 2
6477: PUSH
6478: LD_INT 1
6480: MINUS
6481: PPUSH
6482: LD_VAR 0 4
6486: PPUSH
6487: LD_INT 1
6489: PPUSH
6490: CALL_OW 273
6494: ST_TO_ADDR
// end ;
6495: GO 6390
6497: POP
6498: POP
// end ;
6499: LD_VAR 0 3
6503: RET
// function show_treasure ; var i ; begin
6504: LD_INT 0
6506: PPUSH
6507: PPUSH
// SetAreaMapShow ( p16 , 1 ) ;
6508: LD_INT 16
6510: PPUSH
6511: LD_INT 1
6513: PPUSH
6514: CALL_OW 424
// for i := 1 to 15 do
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_INT 15
6530: PUSH
6531: FOR_TO
6532: IFFALSE 6579
// begin wait ( 0 0$10 ) ;
6534: LD_INT 350
6536: PPUSH
6537: CALL_OW 67
// SetAreaMapShow ( p16 - i + 1 , 0 ) ;
6541: LD_INT 16
6543: PUSH
6544: LD_VAR 0 2
6548: MINUS
6549: PUSH
6550: LD_INT 1
6552: PLUS
6553: PPUSH
6554: LD_INT 0
6556: PPUSH
6557: CALL_OW 424
// SetAreaMapShow ( p16 - i , 1 ) ;
6561: LD_INT 16
6563: PUSH
6564: LD_VAR 0 2
6568: MINUS
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: CALL_OW 424
// end ;
6577: GO 6531
6579: POP
6580: POP
// wait ( 0 0$30 ) ;
6581: LD_INT 1050
6583: PPUSH
6584: CALL_OW 67
// SetAreaMapShow ( p1 , 0 ) ;
6588: LD_INT 1
6590: PPUSH
6591: LD_INT 0
6593: PPUSH
6594: CALL_OW 424
// end ;
6598: LD_VAR 0 1
6602: RET
// export function new_treasure ; var xy ; begin
6603: LD_INT 0
6605: PPUSH
6606: PPUSH
// xy := RandHexArea ( All , false ) ;
6607: LD_ADDR_VAR 0 2
6611: PUSH
6612: LD_INT 17
6614: PPUSH
6615: LD_INT 0
6617: PPUSH
6618: CALL_OW 16
6622: ST_TO_ADDR
// prepare_treasure ( xy [ 1 ] , xy [ 2 ] ) ;
6623: LD_VAR 0 2
6627: PUSH
6628: LD_INT 1
6630: ARRAY
6631: PPUSH
6632: LD_VAR 0 2
6636: PUSH
6637: LD_INT 2
6639: ARRAY
6640: PPUSH
6641: CALL 6356 0 2
// show_treasure ;
6645: CALL 6504 0 0
// end ; end_of_file
6649: LD_VAR 0 1
6653: RET
// export function Init_Win_Condition ; begin
6654: LD_INT 0
6656: PPUSH
// disable ( 98 ) ;
6657: LD_INT 98
6659: DISABLE_MARKED
// disable ( 99 ) ;
6660: LD_INT 99
6662: DISABLE_MARKED
// if Team_Game then
6663: LD_EXP 44
6667: IFFALSE 6674
// enable ( 98 ) else
6669: LD_INT 98
6671: ENABLE_MARKED
6672: GO 6677
// enable ( 99 ) ;
6674: LD_INT 99
6676: ENABLE_MARKED
// end ;
6677: LD_VAR 0 1
6681: RET
// function CanWinLoose ; begin
6682: LD_INT 0
6684: PPUSH
// Result := true ;
6685: LD_ADDR_VAR 0 1
6689: PUSH
6690: LD_INT 1
6692: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6693: CALL_OW 518
6697: PUSH
6698: CALL_OW 519
6702: PUSH
6703: LD_INT 0
6705: GREATER
6706: AND
6707: IFFALSE 6717
// Result := false ;
6709: LD_ADDR_VAR 0 1
6713: PUSH
6714: LD_INT 0
6716: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
6717: CALL_OW 531
6721: PUSH
6722: CALL_OW 519
6726: PUSH
6727: LD_INT 1
6729: GREATER
6730: AND
6731: IFFALSE 6741
// Result := false ;
6733: LD_ADDR_VAR 0 1
6737: PUSH
6738: LD_INT 0
6740: ST_TO_ADDR
// end ;
6741: LD_VAR 0 1
6745: RET
// function HasPower ( i ) ; begin
6746: LD_INT 0
6748: PPUSH
// if def_people_respawning then
6749: LD_EXP 13
6753: IFFALSE 6844
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_INT 22
6762: PUSH
6763: LD_VAR 0 1
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 2
6774: PUSH
6775: LD_INT 21
6777: PUSH
6778: LD_INT 1
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: LD_INT 33
6787: PUSH
6788: LD_INT 3
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PUSH
6795: LD_INT 33
6797: PUSH
6798: LD_INT 5
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: LD_INT 30
6807: PUSH
6808: LD_INT 0
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: PUSH
6815: LD_INT 30
6817: PUSH
6818: LD_INT 1
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PPUSH
6837: CALL_OW 69
6841: ST_TO_ADDR
6842: GO 6909
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
6844: LD_ADDR_VAR 0 2
6848: PUSH
6849: LD_INT 22
6851: PUSH
6852: LD_VAR 0 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 2
6863: PUSH
6864: LD_INT 21
6866: PUSH
6867: LD_INT 1
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 33
6876: PUSH
6877: LD_INT 3
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 33
6886: PUSH
6887: LD_INT 5
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PPUSH
6904: CALL_OW 69
6908: ST_TO_ADDR
// end ;
6909: LD_VAR 0 2
6913: RET
// function AlliedSides ( i , j ) ; begin
6914: LD_INT 0
6916: PPUSH
// Result := false ;
6917: LD_ADDR_VAR 0 3
6921: PUSH
6922: LD_INT 0
6924: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
6925: LD_VAR 0 1
6929: PPUSH
6930: LD_VAR 0 2
6934: PPUSH
6935: CALL_OW 81
6939: PUSH
6940: LD_INT 1
6942: EQUAL
6943: PUSH
6944: LD_VAR 0 2
6948: PPUSH
6949: LD_VAR 0 1
6953: PPUSH
6954: CALL_OW 81
6958: PUSH
6959: LD_INT 1
6961: EQUAL
6962: AND
6963: PUSH
6964: LD_VAR 0 1
6968: PPUSH
6969: CALL_OW 83
6973: AND
6974: PUSH
6975: LD_VAR 0 2
6979: PPUSH
6980: CALL_OW 83
6984: AND
6985: IFFALSE 6995
// Result := true ;
6987: LD_ADDR_VAR 0 3
6991: PUSH
6992: LD_INT 1
6994: ST_TO_ADDR
// end ;
6995: LD_VAR 0 3
6999: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7000: CALL 6682 0 0
7004: IFFALSE 7013
7006: GO 7008
7008: DISABLE
// YouLostInMultiplayer ;
7009: CALL_OW 107
7013: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7014: CALL 6682 0 0
7018: IFFALSE 7042
7020: GO 7022
7022: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7023: LD_EXP 41
7027: PUSH
7028: LD_OWVAR 2
7032: ARRAY
7033: PPUSH
7034: CALL 9937 0 1
// YouWinInMultiplayer ;
7038: CALL_OW 106
// end ;
7042: END
// every 0 0$3 marked 98 do var i , CanWin ;
7043: GO 7045
7045: DISABLE
7046: LD_INT 0
7048: PPUSH
7049: PPUSH
// begin if not HasPower ( your_side ) then
7050: LD_OWVAR 2
7054: PPUSH
7055: CALL 6746 0 1
7059: NOT
7060: IFFALSE 7071
// begin Multiplayer_Loose_Message ;
7062: CALL_OW 521
// enable ( 400 ) ;
7066: LD_INT 400
7068: ENABLE_MARKED
// end else
7069: GO 7204
// begin CanWin := true ;
7071: LD_ADDR_VAR 0 2
7075: PUSH
7076: LD_INT 1
7078: ST_TO_ADDR
// for i := 1 to 8 do
7079: LD_ADDR_VAR 0 1
7083: PUSH
7084: DOUBLE
7085: LD_INT 1
7087: DEC
7088: ST_TO_ADDR
7089: LD_INT 8
7091: PUSH
7092: FOR_TO
7093: IFFALSE 7190
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7095: LD_EXP 40
7099: PUSH
7100: LD_VAR 0 1
7104: ARRAY
7105: PUSH
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 108
7115: AND
7116: PUSH
7117: LD_VAR 0 1
7121: PUSH
7122: LD_OWVAR 2
7126: NONEQUAL
7127: AND
7128: IFFALSE 7188
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7130: LD_EXP 38
7134: PUSH
7135: LD_VAR 0 1
7139: ARRAY
7140: NOT
7141: PUSH
7142: LD_EXP 38
7146: PUSH
7147: LD_VAR 0 1
7151: ARRAY
7152: PUSH
7153: LD_EXP 38
7157: PUSH
7158: LD_OWVAR 2
7162: ARRAY
7163: NONEQUAL
7164: OR
7165: IFFALSE 7188
// if HasPower ( i ) then
7167: LD_VAR 0 1
7171: PPUSH
7172: CALL 6746 0 1
7176: IFFALSE 7188
// begin CanWin := false ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_INT 0
7185: ST_TO_ADDR
// break ;
7186: GO 7190
// end ;
7188: GO 7092
7190: POP
7191: POP
// if CanWin then
7192: LD_VAR 0 2
7196: IFFALSE 7203
// enable ( 401 ) else
7198: LD_INT 401
7200: ENABLE_MARKED
7201: GO 7204
// enable ;
7203: ENABLE
// end ; end ;
7204: PPOPN 2
7206: END
// every 0 0$3 marked 99 do var i , CanWin ;
7207: GO 7209
7209: DISABLE
7210: LD_INT 0
7212: PPUSH
7213: PPUSH
// begin if not HasPower ( your_side ) then
7214: LD_OWVAR 2
7218: PPUSH
7219: CALL 6746 0 1
7223: NOT
7224: IFFALSE 7235
// begin Multiplayer_Loose_Message ;
7226: CALL_OW 521
// enable ( 400 ) ;
7230: LD_INT 400
7232: ENABLE_MARKED
// end else
7233: GO 7348
// begin CanWin := true ;
7235: LD_ADDR_VAR 0 2
7239: PUSH
7240: LD_INT 1
7242: ST_TO_ADDR
// for i := 1 to 8 do
7243: LD_ADDR_VAR 0 1
7247: PUSH
7248: DOUBLE
7249: LD_INT 1
7251: DEC
7252: ST_TO_ADDR
7253: LD_INT 8
7255: PUSH
7256: FOR_TO
7257: IFFALSE 7334
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7259: LD_EXP 40
7263: PUSH
7264: LD_VAR 0 1
7268: ARRAY
7269: PUSH
7270: LD_VAR 0 1
7274: PPUSH
7275: CALL_OW 108
7279: AND
7280: PUSH
7281: LD_VAR 0 1
7285: PUSH
7286: LD_OWVAR 2
7290: NONEQUAL
7291: AND
7292: IFFALSE 7332
// if not AlliedSides ( i , your_side ) then
7294: LD_VAR 0 1
7298: PPUSH
7299: LD_OWVAR 2
7303: PPUSH
7304: CALL 6914 0 2
7308: NOT
7309: IFFALSE 7332
// if HasPower ( i ) then
7311: LD_VAR 0 1
7315: PPUSH
7316: CALL 6746 0 1
7320: IFFALSE 7332
// begin CanWin := false ;
7322: LD_ADDR_VAR 0 2
7326: PUSH
7327: LD_INT 0
7329: ST_TO_ADDR
// break ;
7330: GO 7334
// end ;
7332: GO 7256
7334: POP
7335: POP
// if CanWin then
7336: LD_VAR 0 2
7340: IFFALSE 7347
// enable ( 401 ) else
7342: LD_INT 401
7344: ENABLE_MARKED
7345: GO 7348
// enable ;
7347: ENABLE
// end ; end ; end_of_file
7348: PPOPN 2
7350: END
// var _isDay ; every 0 0$10 do
7351: GO 7353
7353: DISABLE
// begin _isDay := true ;
7354: LD_ADDR_LOC 9
7358: PUSH
7359: LD_INT 1
7361: ST_TO_ADDR
// end ;
7362: END
// every 10 10$00 do
7363: GO 7365
7365: DISABLE
// begin _isDay := not _isDay ;
7366: LD_ADDR_LOC 9
7370: PUSH
7371: LD_LOC 9
7375: NOT
7376: ST_TO_ADDR
// if _isDay then
7377: LD_LOC 9
7381: IFFALSE 7400
// begin solar_recharge_percent := 100 ;
7383: LD_ADDR_OWVAR 79
7387: PUSH
7388: LD_INT 100
7390: ST_TO_ADDR
// LoadColorsTXT ( colors.txt ) ;
7391: LD_STRING colors.txt
7393: PPUSH
7394: CALL_OW 544
// end else
7398: GO 7415
// begin solar_recharge_percent := 0 ;
7400: LD_ADDR_OWVAR 79
7404: PUSH
7405: LD_INT 0
7407: ST_TO_ADDR
// LoadColorsTXT ( colors_night.txt ) ;
7408: LD_STRING colors_night.txt
7410: PPUSH
7411: CALL_OW 544
// end ; enable ;
7415: ENABLE
// end ; end_of_file
7416: END
// var infos ; export function init_infos ; begin
7417: LD_INT 0
7419: PPUSH
// infos = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7420: LD_ADDR_LOC 10
7424: PUSH
7425: LD_INT 0
7427: PUSH
7428: LD_INT 0
7430: PUSH
7431: LD_INT 0
7433: PUSH
7434: LD_INT 0
7436: PUSH
7437: LD_INT 0
7439: PUSH
7440: LD_INT 0
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: LD_INT 0
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: ST_TO_ADDR
// real_cost = cost ;
7459: LD_ADDR_EXP 29
7463: PUSH
7464: LD_EXP 27
7468: ST_TO_ADDR
// cost = cost * 10 ;
7469: LD_ADDR_EXP 27
7473: PUSH
7474: LD_EXP 27
7478: PUSH
7479: LD_INT 10
7481: MUL
7482: ST_TO_ADDR
// end ;
7483: LD_VAR 0 1
7487: RET
// every 0 0$1 do
7488: GO 7490
7490: DISABLE
// begin if gametype <> 11 then
7491: LD_EXP 1
7495: PUSH
7496: LD_INT 11
7498: NONEQUAL
7499: IFFALSE 7503
// exit ;
7501: GO 7592
// if decr_cost_time = 0 then
7503: LD_EXP 28
7507: PUSH
7508: LD_INT 0
7510: EQUAL
7511: IFFALSE 7533
// real_cost = ( cost div 100 ) * 10 else
7513: LD_ADDR_EXP 29
7517: PUSH
7518: LD_EXP 27
7522: PUSH
7523: LD_INT 100
7525: DIV
7526: PUSH
7527: LD_INT 10
7529: MUL
7530: ST_TO_ADDR
7531: GO 7592
// repeat wait ( decr_cost_time div 5 ) ;
7533: LD_EXP 28
7537: PUSH
7538: LD_INT 5
7540: DIV
7541: PPUSH
7542: CALL_OW 67
// cost = cost * 1000 div 1149 ;
7546: LD_ADDR_EXP 27
7550: PUSH
7551: LD_EXP 27
7555: PUSH
7556: LD_INT 1000
7558: MUL
7559: PUSH
7560: LD_INT 1149
7562: DIV
7563: ST_TO_ADDR
// real_cost = ( cost div 100 ) * 10 ;
7564: LD_ADDR_EXP 29
7568: PUSH
7569: LD_EXP 27
7573: PUSH
7574: LD_INT 100
7576: DIV
7577: PUSH
7578: LD_INT 10
7580: MUL
7581: ST_TO_ADDR
// until real_cost = 10 ;
7582: LD_EXP 29
7586: PUSH
7587: LD_INT 10
7589: EQUAL
7590: IFFALSE 7533
// end ;
7592: END
// every 0 0$2 do
7593: GO 7595
7595: DISABLE
// begin if gametype <> 11 then
7596: LD_EXP 1
7600: PUSH
7601: LD_INT 11
7603: NONEQUAL
7604: IFFALSE 7612
// ShowTimer else
7606: CALL 8030 0 0
7610: GO 7616
// ShowInfos ;
7612: CALL 7618 0 0
// enable ;
7616: ENABLE
// end ;
7617: END
// function ShowInfos ; var inf , en1 , en2 , AllStrings ; begin
7618: LD_INT 0
7620: PPUSH
7621: PPUSH
7622: PPUSH
7623: PPUSH
7624: PPUSH
// if gametype <> 11 then
7625: LD_EXP 1
7629: PUSH
7630: LD_INT 11
7632: NONEQUAL
7633: IFFALSE 7637
// exit ;
7635: GO 8025
// if not your_side then
7637: LD_OWVAR 2
7641: NOT
7642: IFFALSE 7647
// begin enable ;
7644: ENABLE
// exit ;
7645: GO 8025
// end ; if Teams [ Side_Teams [ your_side ] ] [ 1 ] = your_side then
7647: LD_EXP 39
7651: PUSH
7652: LD_EXP 38
7656: PUSH
7657: LD_OWVAR 2
7661: ARRAY
7662: ARRAY
7663: PUSH
7664: LD_INT 1
7666: ARRAY
7667: PUSH
7668: LD_OWVAR 2
7672: EQUAL
7673: IFFALSE 7737
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7675: LD_ADDR_VAR 0 3
7679: PUSH
7680: LD_EXP 39
7684: PUSH
7685: LD_INT 3
7687: PUSH
7688: LD_EXP 38
7692: PUSH
7693: LD_OWVAR 2
7697: ARRAY
7698: MINUS
7699: ARRAY
7700: PUSH
7701: LD_INT 2
7703: ARRAY
7704: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7705: LD_ADDR_VAR 0 4
7709: PUSH
7710: LD_EXP 39
7714: PUSH
7715: LD_INT 3
7717: PUSH
7718: LD_EXP 38
7722: PUSH
7723: LD_OWVAR 2
7727: ARRAY
7728: MINUS
7729: ARRAY
7730: PUSH
7731: LD_INT 1
7733: ARRAY
7734: ST_TO_ADDR
// end else
7735: GO 7797
// begin en1 = Teams [ 3 - Side_Teams [ your_side ] ] [ 1 ] ;
7737: LD_ADDR_VAR 0 3
7741: PUSH
7742: LD_EXP 39
7746: PUSH
7747: LD_INT 3
7749: PUSH
7750: LD_EXP 38
7754: PUSH
7755: LD_OWVAR 2
7759: ARRAY
7760: MINUS
7761: ARRAY
7762: PUSH
7763: LD_INT 1
7765: ARRAY
7766: ST_TO_ADDR
// en2 = Teams [ 3 - Side_Teams [ your_side ] ] [ 2 ] ;
7767: LD_ADDR_VAR 0 4
7771: PUSH
7772: LD_EXP 39
7776: PUSH
7777: LD_INT 3
7779: PUSH
7780: LD_EXP 38
7784: PUSH
7785: LD_OWVAR 2
7789: ARRAY
7790: MINUS
7791: ARRAY
7792: PUSH
7793: LD_INT 2
7795: ARRAY
7796: ST_TO_ADDR
// end ; AllStrings := [ #Multi1x1-Time , tick ] ;
7797: LD_ADDR_VAR 0 5
7801: PUSH
7802: LD_STRING #Multi1x1-Time
7804: PUSH
7805: LD_OWVAR 1
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7814: LD_INT 0
7816: PUSH
7817: LD_EXP 33
7821: PUSH
7822: LD_OWVAR 1
7826: MINUS
7827: LESSEQUAL
7828: IFFALSE 7859
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7830: LD_ADDR_VAR 0 5
7834: PUSH
7835: LD_VAR 0 5
7839: PUSH
7840: LD_STRING #allowedsibbomb
7842: PUSH
7843: LD_EXP 33
7847: PUSH
7848: LD_OWVAR 1
7852: MINUS
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: ADD
7858: ST_TO_ADDR
// case infos [ your_side ] of 0 :
7859: LD_LOC 10
7863: PUSH
7864: LD_OWVAR 2
7868: ARRAY
7869: PUSH
7870: LD_INT 0
7872: DOUBLE
7873: EQUAL
7874: IFTRUE 7878
7876: GO 7905
7878: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Bid1 , real_cost ] ;
7879: LD_ADDR_OWVAR 47
7883: PUSH
7884: LD_VAR 0 5
7888: PUSH
7889: LD_STRING #MultiParty-Bid1
7891: PUSH
7892: LD_EXP 29
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: ADD
7901: ST_TO_ADDR
// enable ;
7902: ENABLE
// end ; 1 :
7903: GO 8025
7905: LD_INT 1
7907: DOUBLE
7908: EQUAL
7909: IFTRUE 7913
7911: GO 7961
7913: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info1 , en1 , en1 , - 1 , #MultiParty-Bid2 , real_cost ] ;
7914: LD_ADDR_OWVAR 47
7918: PUSH
7919: LD_VAR 0 5
7923: PUSH
7924: LD_STRING #MultiParty-Info1
7926: PUSH
7927: LD_VAR 0 3
7931: PUSH
7932: LD_VAR 0 3
7936: PUSH
7937: LD_INT 1
7939: NEG
7940: PUSH
7941: LD_STRING #MultiParty-Bid2
7943: PUSH
7944: LD_EXP 29
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: ADD
7957: ST_TO_ADDR
// enable ;
7958: ENABLE
// end ; 2 :
7959: GO 8025
7961: LD_INT 2
7963: DOUBLE
7964: EQUAL
7965: IFTRUE 7969
7967: GO 8024
7969: POP
// begin display_strings = AllStrings ^ [ #MultiParty-Info2 , en1 , en1 , - 1 , en2 , en2 , - 1 ] ;
7970: LD_ADDR_OWVAR 47
7974: PUSH
7975: LD_VAR 0 5
7979: PUSH
7980: LD_STRING #MultiParty-Info2
7982: PUSH
7983: LD_VAR 0 3
7987: PUSH
7988: LD_VAR 0 3
7992: PUSH
7993: LD_INT 1
7995: NEG
7996: PUSH
7997: LD_VAR 0 4
8001: PUSH
8002: LD_VAR 0 4
8006: PUSH
8007: LD_INT 1
8009: NEG
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: ADD
8020: ST_TO_ADDR
// enable ;
8021: ENABLE
// end ; end ;
8022: GO 8025
8024: POP
// end ;
8025: LD_VAR 0 1
8029: RET
// function ShowTimer ; var AllStrings ; begin
8030: LD_INT 0
8032: PPUSH
8033: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8034: LD_ADDR_VAR 0 2
8038: PUSH
8039: LD_STRING #Multi1x1-Time
8041: PUSH
8042: LD_OWVAR 1
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8051: LD_INT 0
8053: PUSH
8054: LD_EXP 33
8058: PUSH
8059: LD_OWVAR 1
8063: MINUS
8064: LESSEQUAL
8065: IFFALSE 8096
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8067: LD_ADDR_VAR 0 2
8071: PUSH
8072: LD_VAR 0 2
8076: PUSH
8077: LD_STRING #allowedsibbomb
8079: PUSH
8080: LD_EXP 33
8084: PUSH
8085: LD_OWVAR 1
8089: MINUS
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: ADD
8095: ST_TO_ADDR
// Display_Strings := AllStrings ;
8096: LD_ADDR_OWVAR 47
8100: PUSH
8101: LD_VAR 0 2
8105: ST_TO_ADDR
// end ;
8106: LD_VAR 0 1
8110: RET
// function check_area ( side , area ) ; begin
8111: LD_INT 0
8113: PPUSH
// if infos [ side ] = 2 then
8114: LD_LOC 10
8118: PUSH
8119: LD_VAR 0 1
8123: ARRAY
8124: PUSH
8125: LD_INT 2
8127: EQUAL
8128: IFFALSE 8132
// exit ;
8130: GO 8203
// if GetResourceArea ( area , mat_cans ) * 10 >= real_cost then
8132: LD_VAR 0 2
8136: PPUSH
8137: LD_INT 1
8139: PPUSH
8140: CALL_OW 287
8144: PUSH
8145: LD_INT 10
8147: MUL
8148: PUSH
8149: LD_EXP 29
8153: GREATEREQUAL
8154: IFFALSE 8203
// begin EraseResourceArea ( area , mat_cans ) ;
8156: LD_VAR 0 2
8160: PPUSH
8161: LD_INT 1
8163: PPUSH
8164: CALL_OW 286
// infos = Replace ( infos , side , infos [ side ] + 1 ) ;
8168: LD_ADDR_LOC 10
8172: PUSH
8173: LD_LOC 10
8177: PPUSH
8178: LD_VAR 0 1
8182: PPUSH
8183: LD_LOC 10
8187: PUSH
8188: LD_VAR 0 1
8192: ARRAY
8193: PUSH
8194: LD_INT 1
8196: PLUS
8197: PPUSH
8198: CALL_OW 1
8202: ST_TO_ADDR
// end ; end ;
8203: LD_VAR 0 3
8207: RET
// every 0 0$5 do var i ;
8208: GO 8210
8210: DISABLE
8211: LD_INT 0
8213: PPUSH
// begin for i := 1 to Side_Positions do
8214: LD_ADDR_VAR 0 1
8218: PUSH
8219: DOUBLE
8220: LD_INT 1
8222: DEC
8223: ST_TO_ADDR
8224: LD_EXP 40
8228: PUSH
8229: FOR_TO
8230: IFFALSE 8338
// case Side_Positions [ i ] of 1 :
8232: LD_EXP 40
8236: PUSH
8237: LD_VAR 0 1
8241: ARRAY
8242: PUSH
8243: LD_INT 1
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8266
8251: POP
// check_area ( i , exit1 ) ; 2 :
8252: LD_VAR 0 1
8256: PPUSH
8257: LD_INT 22
8259: PPUSH
8260: CALL 8111 0 2
8264: GO 8336
8266: LD_INT 2
8268: DOUBLE
8269: EQUAL
8270: IFTRUE 8274
8272: GO 8289
8274: POP
// check_area ( i , exit2 ) ; 3 :
8275: LD_VAR 0 1
8279: PPUSH
8280: LD_INT 23
8282: PPUSH
8283: CALL 8111 0 2
8287: GO 8336
8289: LD_INT 3
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8312
8297: POP
// check_area ( i , exit3 ) ; 4 :
8298: LD_VAR 0 1
8302: PPUSH
8303: LD_INT 24
8305: PPUSH
8306: CALL 8111 0 2
8310: GO 8336
8312: LD_INT 4
8314: DOUBLE
8315: EQUAL
8316: IFTRUE 8320
8318: GO 8335
8320: POP
// check_area ( i , exit4 ) ; end ;
8321: LD_VAR 0 1
8325: PPUSH
8326: LD_INT 25
8328: PPUSH
8329: CALL 8111 0 2
8333: GO 8336
8335: POP
8336: GO 8229
8338: POP
8339: POP
// enable ;
8340: ENABLE
// exit ;
8341: GO 8343
// end ; end_of_file
8343: PPOPN 1
8345: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8346: LD_INT 0
8348: PPUSH
8349: PPUSH
// for un in battle_flags_id do
8350: LD_ADDR_VAR 0 2
8354: PUSH
8355: LD_EXP 49
8359: PUSH
8360: FOR_IN
8361: IFFALSE 8436
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8363: LD_VAR 0 2
8367: PPUSH
8368: LD_INT 1
8370: PUSH
8371: LD_LOC 11
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: PUSH
8380: LD_INT 2
8382: PUSH
8383: LD_LOC 11
8387: PUSH
8388: LD_INT 2
8390: DIV
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: LD_INT 3
8398: PUSH
8399: LD_LOC 11
8403: PUSH
8404: LD_INT 5
8406: DIV
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PUSH
8412: LD_INT 20
8414: PUSH
8415: LD_LOC 11
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: PPUSH
8430: CALL_OW 423
8434: GO 8360
8436: POP
8437: POP
// end ;
8438: LD_VAR 0 1
8442: RET
// every 0 0$0.1 do var un ;
8443: GO 8445
8445: DISABLE
8446: LD_INT 0
8448: PPUSH
// begin if not def_morale_flags then
8449: LD_EXP 10
8453: NOT
8454: IFFALSE 8458
// exit ;
8456: GO 8535
// if not morale_decreasing_time then
8458: LD_EXP 24
8462: NOT
8463: IFFALSE 8467
// exit ;
8465: GO 8535
// strength = 100 ;
8467: LD_ADDR_LOC 11
8471: PUSH
8472: LD_INT 100
8474: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8475: LD_EXP 24
8479: PPUSH
8480: CALL_OW 67
// strength := strength - 1 ;
8484: LD_ADDR_LOC 11
8488: PUSH
8489: LD_LOC 11
8493: PUSH
8494: LD_INT 1
8496: MINUS
8497: ST_TO_ADDR
// Update_Flags ;
8498: CALL 8346 0 0
// until not strength ;
8502: LD_LOC 11
8506: NOT
8507: IFFALSE 8475
// for un in battle_flags_id do
8509: LD_ADDR_VAR 0 1
8513: PUSH
8514: LD_EXP 49
8518: PUSH
8519: FOR_IN
8520: IFFALSE 8533
// KillBattleFlag ( un ) ;
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 419
8531: GO 8519
8533: POP
8534: POP
// end ; end_of_file
8535: PPOPN 1
8537: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8538: LD_VAR 0 1
8542: PPUSH
8543: CALL_OW 266
8547: PUSH
8548: LD_INT 0
8550: PUSH
8551: LD_INT 1
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: IN
8558: IFFALSE 8583
// SetBName ( b , @ & GetSide ( b ) ) ;
8560: LD_VAR 0 1
8564: PPUSH
8565: LD_STRING @
8567: PUSH
8568: LD_VAR 0 1
8572: PPUSH
8573: CALL_OW 255
8577: STR
8578: PPUSH
8579: CALL_OW 500
// end ;
8583: PPOPN 2
8585: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 266
8595: PUSH
8596: LD_INT 0
8598: PUSH
8599: LD_INT 1
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: IN
8606: IFFALSE 8631
// SetBName ( b , @ & GetSide ( b ) ) ;
8608: LD_VAR 0 1
8612: PPUSH
8613: LD_STRING @
8615: PUSH
8616: LD_VAR 0 1
8620: PPUSH
8621: CALL_OW 255
8625: STR
8626: PPUSH
8627: CALL_OW 500
// end ;
8631: PPOPN 3
8633: END
// on VehicleConstructed ( veh , fac ) do var side ;
8634: LD_INT 0
8636: PPUSH
// begin if GetControl ( veh ) = control_apeman then
8637: LD_VAR 0 1
8641: PPUSH
8642: CALL_OW 263
8646: PUSH
8647: LD_INT 5
8649: EQUAL
8650: IFFALSE 8792
// begin side := GetSide ( veh ) ;
8652: LD_ADDR_VAR 0 3
8656: PUSH
8657: LD_VAR 0 1
8661: PPUSH
8662: CALL_OW 255
8666: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
8667: LD_ADDR_EXP 53
8671: PUSH
8672: LD_EXP 53
8676: PPUSH
8677: LD_VAR 0 3
8681: PPUSH
8682: LD_EXP 53
8686: PUSH
8687: LD_VAR 0 3
8691: ARRAY
8692: PPUSH
8693: LD_INT 52
8695: PUSH
8696: EMPTY
8697: LIST
8698: PPUSH
8699: CALL_OW 72
8703: PUSH
8704: LD_INT 22
8706: PUSH
8707: LD_VAR 0 3
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PUSH
8716: LD_INT 2
8718: PUSH
8719: LD_INT 33
8721: PUSH
8722: LD_INT 5
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: LD_INT 25
8731: PUSH
8732: LD_INT 12
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 25
8741: PUSH
8742: LD_INT 15
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: LD_INT 25
8751: PUSH
8752: LD_INT 16
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 25
8761: PUSH
8762: LD_INT 17
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PPUSH
8781: CALL_OW 69
8785: UNION
8786: PPUSH
8787: CALL_OW 1
8791: ST_TO_ADDR
// end ; end ;
8792: PPOPN 3
8794: END
// on UnitDestroyed ( j ) do begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
8795: LD_VAR 0 1
8799: PPUSH
8800: CALL_OW 257
8804: PUSH
8805: LD_INT 12
8807: PUSH
8808: LD_INT 15
8810: PUSH
8811: LD_INT 17
8813: PUSH
8814: LD_INT 16
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: IN
8823: PUSH
8824: LD_VAR 0 1
8828: PPUSH
8829: CALL_OW 263
8833: PUSH
8834: LD_INT 5
8836: EQUAL
8837: OR
8838: IFFALSE 8849
// ApeKilled ( j ) ;
8840: LD_VAR 0 1
8844: PPUSH
8845: CALL 9751 0 1
// end ;
8849: PPOPN 1
8851: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8852: LD_VAR 0 1
8856: PPUSH
8857: LD_VAR 0 2
8861: PPUSH
8862: LD_VAR 0 3
8866: PPUSH
8867: LD_OWVAR 2
8871: PPUSH
8872: CALL 9895 0 4
8876: PPOPN 3
8878: END
// every 20 20$00 trigger apemanNumber do
8879: LD_EXP 50
8883: IFFALSE 8916
8885: GO 8887
8887: DISABLE
// begin enable ;
8888: ENABLE
// if apeLevel >= 8 then
8889: LD_EXP 55
8893: PUSH
8894: LD_INT 8
8896: GREATEREQUAL
8897: IFFALSE 8902
// disable else
8899: DISABLE
8900: GO 8916
// apeLevel := apeLevel + 1 ;
8902: LD_ADDR_EXP 55
8906: PUSH
8907: LD_EXP 55
8911: PUSH
8912: LD_INT 1
8914: PLUS
8915: ST_TO_ADDR
// end ;
8916: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
8917: LD_EXP 50
8921: PUSH
8922: LD_EXP 51
8926: LESS
8927: IFFALSE 9067
8929: GO 8931
8931: DISABLE
8932: LD_INT 0
8934: PPUSH
8935: PPUSH
8936: PPUSH
8937: PPUSH
// begin enable ;
8938: ENABLE
// for i := 1 to apemanPos do
8939: LD_ADDR_VAR 0 1
8943: PUSH
8944: DOUBLE
8945: LD_INT 1
8947: DEC
8948: ST_TO_ADDR
8949: LD_EXP 53
8953: PUSH
8954: FOR_TO
8955: IFFALSE 9065
// begin if apemanPlayerCount [ i ] then
8957: LD_EXP 54
8961: PUSH
8962: LD_VAR 0 1
8966: ARRAY
8967: IFFALSE 9063
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
8969: LD_EXP 54
8973: PUSH
8974: LD_VAR 0 1
8978: ARRAY
8979: PUSH
8980: LD_EXP 53
8984: PUSH
8985: LD_VAR 0 1
8989: ARRAY
8990: GREATER
8991: IFFALSE 9063
// begin ape := PrepareApeman ;
8993: LD_ADDR_VAR 0 2
8997: PUSH
8998: CALL 9570 0 0
9002: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
9003: LD_VAR 0 2
9007: PPUSH
9008: LD_EXP 56
9012: PUSH
9013: LD_VAR 0 1
9017: ARRAY
9018: PPUSH
9019: LD_INT 0
9021: PPUSH
9022: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
9026: LD_ADDR_EXP 53
9030: PUSH
9031: LD_EXP 53
9035: PPUSH
9036: LD_VAR 0 1
9040: PPUSH
9041: LD_EXP 53
9045: PUSH
9046: LD_VAR 0 1
9050: ARRAY
9051: PUSH
9052: LD_VAR 0 2
9056: UNION
9057: PPUSH
9058: CALL_OW 1
9062: ST_TO_ADDR
// end ; end ; end ;
9063: GO 8954
9065: POP
9066: POP
// end ;
9067: PPOPN 4
9069: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
9070: LD_INT 0
9072: PPUSH
9073: PPUSH
9074: PPUSH
9075: PPUSH
9076: PPUSH
9077: PPUSH
9078: PPUSH
// playersAmount := 0 ;
9079: LD_ADDR_VAR 0 3
9083: PUSH
9084: LD_INT 0
9086: ST_TO_ADDR
// _apeAreas := [ ape1 , ape2 , ape3 , ape4 ] ;
9087: LD_ADDR_VAR 0 7
9091: PUSH
9092: LD_INT 39
9094: PUSH
9095: LD_INT 40
9097: PUSH
9098: LD_INT 41
9100: PUSH
9101: LD_INT 42
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9110: LD_ADDR_EXP 56
9114: PUSH
9115: LD_INT 0
9117: PUSH
9118: LD_INT 0
9120: PUSH
9121: LD_INT 0
9123: PUSH
9124: LD_INT 0
9126: PUSH
9127: LD_INT 0
9129: PUSH
9130: LD_INT 0
9132: PUSH
9133: LD_INT 0
9135: PUSH
9136: LD_INT 0
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: ST_TO_ADDR
// for j = 1 to Side_Positions do
9149: LD_ADDR_VAR 0 4
9153: PUSH
9154: DOUBLE
9155: LD_INT 1
9157: DEC
9158: ST_TO_ADDR
9159: LD_EXP 40
9163: PUSH
9164: FOR_TO
9165: IFFALSE 9232
// if Side_Positions [ j ] then
9167: LD_EXP 40
9171: PUSH
9172: LD_VAR 0 4
9176: ARRAY
9177: IFFALSE 9230
// begin playersAmount := playersAmount + 1 ;
9179: LD_ADDR_VAR 0 3
9183: PUSH
9184: LD_VAR 0 3
9188: PUSH
9189: LD_INT 1
9191: PLUS
9192: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
9193: LD_ADDR_EXP 56
9197: PUSH
9198: LD_EXP 56
9202: PPUSH
9203: LD_VAR 0 4
9207: PPUSH
9208: LD_VAR 0 7
9212: PUSH
9213: LD_EXP 40
9217: PUSH
9218: LD_VAR 0 4
9222: ARRAY
9223: ARRAY
9224: PPUSH
9225: CALL_OW 1
9229: ST_TO_ADDR
// end ;
9230: GO 9164
9232: POP
9233: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
9234: LD_ADDR_EXP 52
9238: PUSH
9239: LD_INT 3
9241: PUSH
9242: LD_EXP 32
9246: MUL
9247: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
9248: LD_ADDR_EXP 50
9252: PUSH
9253: LD_VAR 0 3
9257: PUSH
9258: LD_EXP 52
9262: MUL
9263: ST_TO_ADDR
// apemanLimit := apemanNumber ;
9264: LD_ADDR_EXP 51
9268: PUSH
9269: LD_EXP 50
9273: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9274: LD_ADDR_EXP 53
9278: PUSH
9279: LD_INT 0
9281: PUSH
9282: LD_INT 0
9284: PUSH
9285: LD_INT 0
9287: PUSH
9288: LD_INT 0
9290: PUSH
9291: LD_INT 0
9293: PUSH
9294: LD_INT 0
9296: PUSH
9297: LD_INT 0
9299: PUSH
9300: LD_INT 0
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
9313: LD_ADDR_EXP 54
9317: PUSH
9318: LD_INT 0
9320: PUSH
9321: LD_INT 0
9323: PUSH
9324: LD_INT 0
9326: PUSH
9327: LD_INT 0
9329: PUSH
9330: LD_INT 0
9332: PUSH
9333: LD_INT 0
9335: PUSH
9336: LD_INT 0
9338: PUSH
9339: LD_INT 0
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: ST_TO_ADDR
// apeLevel := 1 ;
9352: LD_ADDR_EXP 55
9356: PUSH
9357: LD_INT 1
9359: ST_TO_ADDR
// if not apemanNumber then
9360: LD_EXP 50
9364: NOT
9365: IFFALSE 9369
// exit ;
9367: GO 9565
// for i := 1 to apemanPerPlayer do
9369: LD_ADDR_VAR 0 2
9373: PUSH
9374: DOUBLE
9375: LD_INT 1
9377: DEC
9378: ST_TO_ADDR
9379: LD_EXP 52
9383: PUSH
9384: FOR_TO
9385: IFFALSE 9563
// begin for j := 1 to Side_Positions do
9387: LD_ADDR_VAR 0 4
9391: PUSH
9392: DOUBLE
9393: LD_INT 1
9395: DEC
9396: ST_TO_ADDR
9397: LD_EXP 40
9401: PUSH
9402: FOR_TO
9403: IFFALSE 9559
// if Side_Positions [ j ] then
9405: LD_EXP 40
9409: PUSH
9410: LD_VAR 0 4
9414: ARRAY
9415: IFFALSE 9557
// begin pos := Side_Positions [ j ] ;
9417: LD_ADDR_VAR 0 6
9421: PUSH
9422: LD_EXP 40
9426: PUSH
9427: LD_VAR 0 4
9431: ARRAY
9432: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
9433: LD_ADDR_EXP 54
9437: PUSH
9438: LD_EXP 54
9442: PPUSH
9443: LD_VAR 0 4
9447: PPUSH
9448: LD_EXP 54
9452: PUSH
9453: LD_VAR 0 4
9457: ARRAY
9458: PUSH
9459: LD_INT 1
9461: PLUS
9462: PPUSH
9463: CALL_OW 1
9467: ST_TO_ADDR
// ape := PrepareApeman ;
9468: LD_ADDR_VAR 0 5
9472: PUSH
9473: CALL 9570 0 0
9477: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
9478: LD_ADDR_EXP 53
9482: PUSH
9483: LD_EXP 53
9487: PPUSH
9488: LD_VAR 0 4
9492: PPUSH
9493: LD_EXP 53
9497: PUSH
9498: LD_VAR 0 4
9502: ARRAY
9503: PPUSH
9504: LD_EXP 53
9508: PUSH
9509: LD_VAR 0 4
9513: ARRAY
9514: PUSH
9515: LD_INT 1
9517: PLUS
9518: PPUSH
9519: LD_VAR 0 5
9523: PPUSH
9524: CALL_OW 1
9528: PPUSH
9529: CALL_OW 1
9533: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
9534: LD_VAR 0 5
9538: PPUSH
9539: LD_EXP 56
9543: PUSH
9544: LD_VAR 0 4
9548: ARRAY
9549: PPUSH
9550: LD_INT 0
9552: PPUSH
9553: CALL_OW 49
// end ;
9557: GO 9402
9559: POP
9560: POP
// end ;
9561: GO 9384
9563: POP
9564: POP
// end ;
9565: LD_VAR 0 1
9569: RET
// export function PrepareApeman ; var bonus ; begin
9570: LD_INT 0
9572: PPUSH
9573: PPUSH
// uc_side := 0 ;
9574: LD_ADDR_OWVAR 20
9578: PUSH
9579: LD_INT 0
9581: ST_TO_ADDR
// uc_nation := 0 ;
9582: LD_ADDR_OWVAR 21
9586: PUSH
9587: LD_INT 0
9589: ST_TO_ADDR
// InitHc ;
9590: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
9594: LD_ADDR_VAR 0 2
9598: PUSH
9599: LD_INT 1
9601: NEG
9602: PUSH
9603: LD_INT 0
9605: PUSH
9606: LD_INT 1
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: LIST
9613: PUSH
9614: LD_OWVAR 1
9618: PUSH
9619: LD_INT 3
9621: MOD
9622: PUSH
9623: LD_INT 1
9625: PLUS
9626: ARRAY
9627: ST_TO_ADDR
// hc_class := class_apeman ;
9628: LD_ADDR_OWVAR 28
9632: PUSH
9633: LD_INT 12
9635: ST_TO_ADDR
// hc_gallery :=  ;
9636: LD_ADDR_OWVAR 33
9640: PUSH
9641: LD_STRING 
9643: ST_TO_ADDR
// hc_name :=  ;
9644: LD_ADDR_OWVAR 26
9648: PUSH
9649: LD_STRING 
9651: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
9652: LD_ADDR_OWVAR 31
9656: PUSH
9657: LD_EXP 55
9661: PUSH
9662: LD_VAR 0 2
9666: PLUS
9667: PUSH
9668: LD_EXP 55
9672: PUSH
9673: LD_VAR 0 2
9677: PLUS
9678: PUSH
9679: LD_EXP 55
9683: PUSH
9684: LD_VAR 0 2
9688: PLUS
9689: PUSH
9690: LD_EXP 55
9694: PUSH
9695: LD_VAR 0 2
9699: PLUS
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
9707: LD_ADDR_OWVAR 35
9711: PUSH
9712: LD_INT 10
9714: PUSH
9715: LD_VAR 0 2
9719: MUL
9720: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
9721: LD_ADDR_OWVAR 29
9725: PUSH
9726: LD_INT 12
9728: PUSH
9729: LD_INT 10
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: ST_TO_ADDR
// result := CreateHuman ;
9736: LD_ADDR_VAR 0 1
9740: PUSH
9741: CALL_OW 44
9745: ST_TO_ADDR
// end ;
9746: LD_VAR 0 1
9750: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
9751: LD_INT 0
9753: PPUSH
9754: PPUSH
9755: PPUSH
// if not ape then
9756: LD_VAR 0 1
9760: NOT
9761: IFFALSE 9765
// exit ;
9763: GO 9890
// side := GetSide ( ape ) ;
9765: LD_ADDR_VAR 0 3
9769: PUSH
9770: LD_VAR 0 1
9774: PPUSH
9775: CALL_OW 255
9779: ST_TO_ADDR
// if not side then
9780: LD_VAR 0 3
9784: NOT
9785: IFFALSE 9839
// begin for i = 1 to apemanPos do
9787: LD_ADDR_VAR 0 4
9791: PUSH
9792: DOUBLE
9793: LD_INT 1
9795: DEC
9796: ST_TO_ADDR
9797: LD_EXP 53
9801: PUSH
9802: FOR_TO
9803: IFFALSE 9837
// if ape in apemanPos [ i ] then
9805: LD_VAR 0 1
9809: PUSH
9810: LD_EXP 53
9814: PUSH
9815: LD_VAR 0 4
9819: ARRAY
9820: IN
9821: IFFALSE 9835
// begin side := i ;
9823: LD_ADDR_VAR 0 3
9827: PUSH
9828: LD_VAR 0 4
9832: ST_TO_ADDR
// break ;
9833: GO 9837
// end ;
9835: GO 9802
9837: POP
9838: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
9839: LD_ADDR_EXP 53
9843: PUSH
9844: LD_EXP 53
9848: PPUSH
9849: LD_VAR 0 3
9853: PPUSH
9854: LD_EXP 53
9858: PUSH
9859: LD_VAR 0 3
9863: ARRAY
9864: PUSH
9865: LD_VAR 0 1
9869: DIFF
9870: PPUSH
9871: CALL_OW 1
9875: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
9876: LD_ADDR_EXP 50
9880: PUSH
9881: LD_EXP 50
9885: PUSH
9886: LD_INT 1
9888: MINUS
9889: ST_TO_ADDR
// end ; end_of_file
9890: LD_VAR 0 2
9894: RET
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9895: LD_INT 0
9897: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9898: LD_VAR 0 1
9902: PPUSH
9903: CALL_OW 255
9907: PUSH
9908: LD_VAR 0 4
9912: EQUAL
9913: IFFALSE 9932
// begin SetAchievement ( ACH_RAD ) ;
9915: LD_STRING ACH_RAD
9917: PPUSH
9918: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9922: LD_STRING ACH_NL
9924: PPUSH
9925: LD_INT 1
9927: PPUSH
9928: CALL_OW 564
// end end ;
9932: LD_VAR 0 5
9936: RET
// export function SA_Win ( side ) ; begin
9937: LD_INT 0
9939: PPUSH
// case side of 1 :
9940: LD_VAR 0 1
9944: PUSH
9945: LD_INT 1
9947: DOUBLE
9948: EQUAL
9949: IFTRUE 9953
9951: GO 9966
9953: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9954: LD_STRING ACH_AH
9956: PPUSH
9957: LD_INT 1
9959: PPUSH
9960: CALL_OW 564
9964: GO 10129
9966: LD_INT 2
9968: DOUBLE
9969: EQUAL
9970: IFTRUE 9974
9972: GO 9987
9974: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9975: LD_STRING ACH_E
9977: PPUSH
9978: LD_INT 1
9980: PPUSH
9981: CALL_OW 564
9985: GO 10129
9987: LD_INT 3
9989: DOUBLE
9990: EQUAL
9991: IFTRUE 9995
9993: GO 10008
9995: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9996: LD_STRING ACH_OOL
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL_OW 564
10006: GO 10129
10008: LD_INT 1
10010: PUSH
10011: LD_INT 2
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: DOUBLE
10018: EQUAL
10019: IFTRUE 10023
10021: GO 10048
10023: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10024: LD_STRING ACH_AH
10026: PPUSH
10027: LD_REAL  5.00000000000000E-0001
10030: PPUSH
10031: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10035: LD_STRING ACH_E
10037: PPUSH
10038: LD_REAL  5.00000000000000E-0001
10041: PPUSH
10042: CALL_OW 564
// end ; [ 2 , 3 ] :
10046: GO 10129
10048: LD_INT 2
10050: PUSH
10051: LD_INT 3
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: DOUBLE
10058: EQUAL
10059: IFTRUE 10063
10061: GO 10088
10063: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
10064: LD_STRING ACH_OOL
10066: PPUSH
10067: LD_REAL  5.00000000000000E-0001
10070: PPUSH
10071: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
10075: LD_STRING ACH_E
10077: PPUSH
10078: LD_REAL  5.00000000000000E-0001
10081: PPUSH
10082: CALL_OW 564
// end ; [ 3 , 1 ] :
10086: GO 10129
10088: LD_INT 3
10090: PUSH
10091: LD_INT 1
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: DOUBLE
10098: EQUAL
10099: IFTRUE 10103
10101: GO 10128
10103: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
10104: LD_STRING ACH_AH
10106: PPUSH
10107: LD_REAL  5.00000000000000E-0001
10110: PPUSH
10111: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
10115: LD_STRING ACH_OOL
10117: PPUSH
10118: LD_REAL  5.00000000000000E-0001
10121: PPUSH
10122: CALL_OW 564
// end ; end ;
10126: GO 10129
10128: POP
// end ; end_of_file
10129: LD_VAR 0 2
10133: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10134: LD_INT 0
10136: PPUSH
10137: PPUSH
10138: PPUSH
// for side = 1 to 8 do
10139: LD_ADDR_VAR 0 2
10143: PUSH
10144: DOUBLE
10145: LD_INT 1
10147: DEC
10148: ST_TO_ADDR
10149: LD_INT 8
10151: PUSH
10152: FOR_TO
10153: IFFALSE 10274
// begin for i = 1 to 72 do
10155: LD_ADDR_VAR 0 3
10159: PUSH
10160: DOUBLE
10161: LD_INT 1
10163: DEC
10164: ST_TO_ADDR
10165: LD_INT 72
10167: PUSH
10168: FOR_TO
10169: IFFALSE 10200
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
10171: LD_VAR 0 3
10175: PPUSH
10176: LD_VAR 0 2
10180: PPUSH
10181: LD_INT 0
10183: PPUSH
10184: LD_VAR 0 3
10188: PPUSH
10189: CALL_OW 565
10193: PPUSH
10194: CALL_OW 322
10198: GO 10168
10200: POP
10201: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
10202: LD_INT 73
10204: PPUSH
10205: LD_VAR 0 2
10209: PPUSH
10210: LD_INT 0
10212: PPUSH
10213: LD_INT 25
10215: PPUSH
10216: CALL_OW 565
10220: PPUSH
10221: CALL_OW 322
// for i = 0 to 40 do
10225: LD_ADDR_VAR 0 3
10229: PUSH
10230: DOUBLE
10231: LD_INT 0
10233: DEC
10234: ST_TO_ADDR
10235: LD_INT 40
10237: PUSH
10238: FOR_TO
10239: IFFALSE 10270
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
10241: LD_VAR 0 3
10245: PPUSH
10246: LD_VAR 0 2
10250: PPUSH
10251: LD_INT 1
10253: PPUSH
10254: LD_VAR 0 3
10258: PPUSH
10259: CALL_OW 565
10263: PPUSH
10264: CALL_OW 324
10268: GO 10238
10270: POP
10271: POP
// end ;
10272: GO 10152
10274: POP
10275: POP
// end ;
10276: LD_VAR 0 1
10280: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
10281: LD_INT 0
10283: PPUSH
10284: PPUSH
10285: PPUSH
// for side = 1 to 8 do
10286: LD_ADDR_VAR 0 3
10290: PUSH
10291: DOUBLE
10292: LD_INT 1
10294: DEC
10295: ST_TO_ADDR
10296: LD_INT 8
10298: PUSH
10299: FOR_TO
10300: IFFALSE 14296
// begin for i = 1 to 73 do
10302: LD_ADDR_VAR 0 4
10306: PUSH
10307: DOUBLE
10308: LD_INT 1
10310: DEC
10311: ST_TO_ADDR
10312: LD_INT 73
10314: PUSH
10315: FOR_TO
10316: IFFALSE 10337
// SetTech ( i , side , state_disabled ) ;
10318: LD_VAR 0 4
10322: PPUSH
10323: LD_VAR 0 3
10327: PPUSH
10328: LD_INT 0
10330: PPUSH
10331: CALL_OW 322
10335: GO 10315
10337: POP
10338: POP
// for i = 0 to 40 do
10339: LD_ADDR_VAR 0 4
10343: PUSH
10344: DOUBLE
10345: LD_INT 0
10347: DEC
10348: ST_TO_ADDR
10349: LD_INT 40
10351: PUSH
10352: FOR_TO
10353: IFFALSE 10374
// SetRestrict ( i , side , false ) ;
10355: LD_VAR 0 4
10359: PPUSH
10360: LD_VAR 0 3
10364: PPUSH
10365: LD_INT 0
10367: PPUSH
10368: CALL_OW 324
10372: GO 10352
10374: POP
10375: POP
// case level of 1 :
10376: LD_VAR 0 1
10380: PUSH
10381: LD_INT 1
10383: DOUBLE
10384: EQUAL
10385: IFTRUE 10389
10387: GO 10542
10389: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10390: LD_INT 35
10392: PPUSH
10393: LD_VAR 0 3
10397: PPUSH
10398: LD_INT 1
10400: PPUSH
10401: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10405: LD_INT 45
10407: PPUSH
10408: LD_VAR 0 3
10412: PPUSH
10413: LD_INT 1
10415: PPUSH
10416: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10420: LD_INT 46
10422: PPUSH
10423: LD_VAR 0 3
10427: PPUSH
10428: LD_INT 1
10430: PPUSH
10431: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10435: LD_INT 47
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: LD_INT 1
10445: PPUSH
10446: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10450: LD_INT 0
10452: PPUSH
10453: LD_VAR 0 3
10457: PPUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10465: LD_INT 2
10467: PPUSH
10468: LD_VAR 0 3
10472: PPUSH
10473: LD_INT 1
10475: PPUSH
10476: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10480: LD_INT 4
10482: PPUSH
10483: LD_VAR 0 3
10487: PPUSH
10488: LD_INT 1
10490: PPUSH
10491: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10495: LD_INT 6
10497: PPUSH
10498: LD_VAR 0 3
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10510: LD_INT 29
10512: PPUSH
10513: LD_VAR 0 3
10517: PPUSH
10518: LD_INT 1
10520: PPUSH
10521: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10525: LD_INT 31
10527: PPUSH
10528: LD_VAR 0 3
10532: PPUSH
10533: LD_INT 1
10535: PPUSH
10536: CALL_OW 324
// end ; 2 :
10540: GO 14294
10542: LD_INT 2
10544: DOUBLE
10545: EQUAL
10546: IFTRUE 10550
10548: GO 10748
10550: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10551: LD_INT 35
10553: PPUSH
10554: LD_VAR 0 3
10558: PPUSH
10559: LD_INT 1
10561: PPUSH
10562: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10566: LD_INT 45
10568: PPUSH
10569: LD_VAR 0 3
10573: PPUSH
10574: LD_INT 1
10576: PPUSH
10577: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10581: LD_INT 46
10583: PPUSH
10584: LD_VAR 0 3
10588: PPUSH
10589: LD_INT 1
10591: PPUSH
10592: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10596: LD_INT 47
10598: PPUSH
10599: LD_VAR 0 3
10603: PPUSH
10604: LD_INT 1
10606: PPUSH
10607: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10611: LD_INT 1
10613: PPUSH
10614: LD_VAR 0 3
10618: PPUSH
10619: LD_INT 1
10621: PPUSH
10622: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10626: LD_INT 2
10628: PPUSH
10629: LD_VAR 0 3
10633: PPUSH
10634: LD_INT 1
10636: PPUSH
10637: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10641: LD_INT 11
10643: PPUSH
10644: LD_VAR 0 3
10648: PPUSH
10649: LD_INT 1
10651: PPUSH
10652: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10656: LD_INT 0
10658: PPUSH
10659: LD_VAR 0 3
10663: PPUSH
10664: LD_INT 1
10666: PPUSH
10667: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10671: LD_INT 2
10673: PPUSH
10674: LD_VAR 0 3
10678: PPUSH
10679: LD_INT 1
10681: PPUSH
10682: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10686: LD_INT 4
10688: PPUSH
10689: LD_VAR 0 3
10693: PPUSH
10694: LD_INT 1
10696: PPUSH
10697: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10701: LD_INT 6
10703: PPUSH
10704: LD_VAR 0 3
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10716: LD_INT 29
10718: PPUSH
10719: LD_VAR 0 3
10723: PPUSH
10724: LD_INT 1
10726: PPUSH
10727: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10731: LD_INT 31
10733: PPUSH
10734: LD_VAR 0 3
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 324
// end ; 3 :
10746: GO 14294
10748: LD_INT 3
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 11209
10756: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10757: LD_INT 35
10759: PPUSH
10760: LD_VAR 0 3
10764: PPUSH
10765: LD_INT 1
10767: PPUSH
10768: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10772: LD_INT 45
10774: PPUSH
10775: LD_VAR 0 3
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10787: LD_INT 46
10789: PPUSH
10790: LD_VAR 0 3
10794: PPUSH
10795: LD_INT 1
10797: PPUSH
10798: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10802: LD_INT 47
10804: PPUSH
10805: LD_VAR 0 3
10809: PPUSH
10810: LD_INT 1
10812: PPUSH
10813: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10817: LD_INT 1
10819: PPUSH
10820: LD_VAR 0 3
10824: PPUSH
10825: LD_INT 1
10827: PPUSH
10828: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10832: LD_INT 2
10834: PPUSH
10835: LD_VAR 0 3
10839: PPUSH
10840: LD_INT 1
10842: PPUSH
10843: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10847: LD_INT 11
10849: PPUSH
10850: LD_VAR 0 3
10854: PPUSH
10855: LD_INT 1
10857: PPUSH
10858: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10862: LD_INT 48
10864: PPUSH
10865: LD_VAR 0 3
10869: PPUSH
10870: LD_INT 1
10872: PPUSH
10873: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10877: LD_INT 69
10879: PPUSH
10880: LD_VAR 0 3
10884: PPUSH
10885: LD_INT 1
10887: PPUSH
10888: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10892: LD_INT 39
10894: PPUSH
10895: LD_VAR 0 3
10899: PPUSH
10900: LD_INT 1
10902: PPUSH
10903: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10907: LD_INT 43
10909: PPUSH
10910: LD_VAR 0 3
10914: PPUSH
10915: LD_INT 1
10917: PPUSH
10918: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10922: LD_INT 51
10924: PPUSH
10925: LD_VAR 0 3
10929: PPUSH
10930: LD_INT 1
10932: PPUSH
10933: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10937: LD_INT 6
10939: PPUSH
10940: LD_VAR 0 3
10944: PPUSH
10945: LD_INT 1
10947: PPUSH
10948: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10952: LD_INT 0
10954: PPUSH
10955: LD_VAR 0 3
10959: PPUSH
10960: LD_INT 1
10962: PPUSH
10963: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10967: LD_INT 2
10969: PPUSH
10970: LD_VAR 0 3
10974: PPUSH
10975: LD_INT 1
10977: PPUSH
10978: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10982: LD_INT 3
10984: PPUSH
10985: LD_VAR 0 3
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10997: LD_INT 4
10999: PPUSH
11000: LD_VAR 0 3
11004: PPUSH
11005: LD_INT 1
11007: PPUSH
11008: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11012: LD_INT 6
11014: PPUSH
11015: LD_VAR 0 3
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11027: LD_INT 7
11029: PPUSH
11030: LD_VAR 0 3
11034: PPUSH
11035: LD_INT 1
11037: PPUSH
11038: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11042: LD_INT 8
11044: PPUSH
11045: LD_VAR 0 3
11049: PPUSH
11050: LD_INT 1
11052: PPUSH
11053: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11057: LD_INT 10
11059: PPUSH
11060: LD_VAR 0 3
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11072: LD_INT 15
11074: PPUSH
11075: LD_VAR 0 3
11079: PPUSH
11080: LD_INT 1
11082: PPUSH
11083: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11087: LD_INT 16
11089: PPUSH
11090: LD_VAR 0 3
11094: PPUSH
11095: LD_INT 1
11097: PPUSH
11098: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11102: LD_INT 17
11104: PPUSH
11105: LD_VAR 0 3
11109: PPUSH
11110: LD_INT 1
11112: PPUSH
11113: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11117: LD_INT 20
11119: PPUSH
11120: LD_VAR 0 3
11124: PPUSH
11125: LD_INT 1
11127: PPUSH
11128: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11132: LD_INT 26
11134: PPUSH
11135: LD_VAR 0 3
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11147: LD_INT 27
11149: PPUSH
11150: LD_VAR 0 3
11154: PPUSH
11155: LD_INT 1
11157: PPUSH
11158: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11162: LD_INT 29
11164: PPUSH
11165: LD_VAR 0 3
11169: PPUSH
11170: LD_INT 1
11172: PPUSH
11173: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11177: LD_INT 31
11179: PPUSH
11180: LD_VAR 0 3
11184: PPUSH
11185: LD_INT 1
11187: PPUSH
11188: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11192: LD_INT 32
11194: PPUSH
11195: LD_VAR 0 3
11199: PPUSH
11200: LD_INT 1
11202: PPUSH
11203: CALL_OW 324
// end ; 4 :
11207: GO 14294
11209: LD_INT 4
11211: DOUBLE
11212: EQUAL
11213: IFTRUE 11217
11215: GO 12165
11217: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11218: LD_INT 35
11220: PPUSH
11221: LD_VAR 0 3
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11233: LD_INT 45
11235: PPUSH
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11248: LD_INT 46
11250: PPUSH
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11263: LD_INT 47
11265: PPUSH
11266: LD_VAR 0 3
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11278: LD_INT 1
11280: PPUSH
11281: LD_VAR 0 3
11285: PPUSH
11286: LD_INT 1
11288: PPUSH
11289: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11293: LD_INT 2
11295: PPUSH
11296: LD_VAR 0 3
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11308: LD_INT 11
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11323: LD_INT 20
11325: PPUSH
11326: LD_VAR 0 3
11330: PPUSH
11331: LD_INT 1
11333: PPUSH
11334: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11338: LD_INT 48
11340: PPUSH
11341: LD_VAR 0 3
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11353: LD_INT 49
11355: PPUSH
11356: LD_VAR 0 3
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11368: LD_INT 69
11370: PPUSH
11371: LD_VAR 0 3
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11383: LD_INT 39
11385: PPUSH
11386: LD_VAR 0 3
11390: PPUSH
11391: LD_INT 1
11393: PPUSH
11394: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11398: LD_INT 34
11400: PPUSH
11401: LD_VAR 0 3
11405: PPUSH
11406: LD_INT 1
11408: PPUSH
11409: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11413: LD_INT 42
11415: PPUSH
11416: LD_VAR 0 3
11420: PPUSH
11421: LD_INT 1
11423: PPUSH
11424: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11428: LD_INT 44
11430: PPUSH
11431: LD_VAR 0 3
11435: PPUSH
11436: LD_INT 1
11438: PPUSH
11439: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11443: LD_INT 41
11445: PPUSH
11446: LD_VAR 0 3
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11458: LD_INT 43
11460: PPUSH
11461: LD_VAR 0 3
11465: PPUSH
11466: LD_INT 1
11468: PPUSH
11469: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11473: LD_INT 70
11475: PPUSH
11476: LD_VAR 0 3
11480: PPUSH
11481: LD_INT 1
11483: PPUSH
11484: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11488: LD_INT 51
11490: PPUSH
11491: LD_VAR 0 3
11495: PPUSH
11496: LD_INT 1
11498: PPUSH
11499: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11503: LD_INT 52
11505: PPUSH
11506: LD_VAR 0 3
11510: PPUSH
11511: LD_INT 1
11513: PPUSH
11514: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11518: LD_INT 6
11520: PPUSH
11521: LD_VAR 0 3
11525: PPUSH
11526: LD_INT 1
11528: PPUSH
11529: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11533: LD_INT 15
11535: PPUSH
11536: LD_VAR 0 3
11540: PPUSH
11541: LD_INT 1
11543: PPUSH
11544: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11548: LD_INT 7
11550: PPUSH
11551: LD_VAR 0 3
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11563: LD_INT 12
11565: PPUSH
11566: LD_VAR 0 3
11570: PPUSH
11571: LD_INT 1
11573: PPUSH
11574: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11578: LD_INT 18
11580: PPUSH
11581: LD_VAR 0 3
11585: PPUSH
11586: LD_INT 1
11588: PPUSH
11589: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11593: LD_INT 60
11595: PPUSH
11596: LD_VAR 0 3
11600: PPUSH
11601: LD_INT 1
11603: PPUSH
11604: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11608: LD_INT 9
11610: PPUSH
11611: LD_VAR 0 3
11615: PPUSH
11616: LD_INT 1
11618: PPUSH
11619: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11623: LD_INT 30
11625: PPUSH
11626: LD_VAR 0 3
11630: PPUSH
11631: LD_INT 1
11633: PPUSH
11634: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11638: LD_INT 37
11640: PPUSH
11641: LD_VAR 0 3
11645: PPUSH
11646: LD_INT 1
11648: PPUSH
11649: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11653: LD_INT 5
11655: PPUSH
11656: LD_VAR 0 3
11660: PPUSH
11661: LD_INT 1
11663: PPUSH
11664: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11668: LD_INT 66
11670: PPUSH
11671: LD_VAR 0 3
11675: PPUSH
11676: LD_INT 1
11678: PPUSH
11679: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11683: LD_INT 21
11685: PPUSH
11686: LD_VAR 0 3
11690: PPUSH
11691: LD_INT 1
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11698: LD_INT 22
11700: PPUSH
11701: LD_VAR 0 3
11705: PPUSH
11706: LD_INT 1
11708: PPUSH
11709: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11713: LD_INT 54
11715: PPUSH
11716: LD_VAR 0 3
11720: PPUSH
11721: LD_INT 1
11723: PPUSH
11724: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11728: LD_INT 0
11730: PPUSH
11731: LD_VAR 0 3
11735: PPUSH
11736: LD_INT 1
11738: PPUSH
11739: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11743: LD_INT 1
11745: PPUSH
11746: LD_VAR 0 3
11750: PPUSH
11751: LD_INT 1
11753: PPUSH
11754: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11758: LD_INT 2
11760: PPUSH
11761: LD_VAR 0 3
11765: PPUSH
11766: LD_INT 1
11768: PPUSH
11769: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11773: LD_INT 3
11775: PPUSH
11776: LD_VAR 0 3
11780: PPUSH
11781: LD_INT 1
11783: PPUSH
11784: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11788: LD_INT 4
11790: PPUSH
11791: LD_VAR 0 3
11795: PPUSH
11796: LD_INT 1
11798: PPUSH
11799: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11803: LD_INT 5
11805: PPUSH
11806: LD_VAR 0 3
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11818: LD_INT 6
11820: PPUSH
11821: LD_VAR 0 3
11825: PPUSH
11826: LD_INT 1
11828: PPUSH
11829: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11833: LD_INT 7
11835: PPUSH
11836: LD_VAR 0 3
11840: PPUSH
11841: LD_INT 1
11843: PPUSH
11844: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11848: LD_INT 8
11850: PPUSH
11851: LD_VAR 0 3
11855: PPUSH
11856: LD_INT 1
11858: PPUSH
11859: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11863: LD_INT 10
11865: PPUSH
11866: LD_VAR 0 3
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11878: LD_INT 11
11880: PPUSH
11881: LD_VAR 0 3
11885: PPUSH
11886: LD_INT 1
11888: PPUSH
11889: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11893: LD_INT 12
11895: PPUSH
11896: LD_VAR 0 3
11900: PPUSH
11901: LD_INT 1
11903: PPUSH
11904: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11908: LD_INT 13
11910: PPUSH
11911: LD_VAR 0 3
11915: PPUSH
11916: LD_INT 1
11918: PPUSH
11919: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11923: LD_INT 14
11925: PPUSH
11926: LD_VAR 0 3
11930: PPUSH
11931: LD_INT 1
11933: PPUSH
11934: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11938: LD_INT 15
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: LD_INT 1
11948: PPUSH
11949: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11953: LD_INT 16
11955: PPUSH
11956: LD_VAR 0 3
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11968: LD_INT 17
11970: PPUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_INT 1
11978: PPUSH
11979: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11983: LD_INT 19
11985: PPUSH
11986: LD_VAR 0 3
11990: PPUSH
11991: LD_INT 1
11993: PPUSH
11994: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11998: LD_INT 20
12000: PPUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: LD_INT 1
12008: PPUSH
12009: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12013: LD_INT 21
12015: PPUSH
12016: LD_VAR 0 3
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12028: LD_INT 23
12030: PPUSH
12031: LD_VAR 0 3
12035: PPUSH
12036: LD_INT 1
12038: PPUSH
12039: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12043: LD_INT 26
12045: PPUSH
12046: LD_VAR 0 3
12050: PPUSH
12051: LD_INT 1
12053: PPUSH
12054: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12058: LD_INT 27
12060: PPUSH
12061: LD_VAR 0 3
12065: PPUSH
12066: LD_INT 1
12068: PPUSH
12069: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12073: LD_INT 28
12075: PPUSH
12076: LD_VAR 0 3
12080: PPUSH
12081: LD_INT 1
12083: PPUSH
12084: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12088: LD_INT 29
12090: PPUSH
12091: LD_VAR 0 3
12095: PPUSH
12096: LD_INT 1
12098: PPUSH
12099: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12103: LD_INT 30
12105: PPUSH
12106: LD_VAR 0 3
12110: PPUSH
12111: LD_INT 1
12113: PPUSH
12114: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12118: LD_INT 31
12120: PPUSH
12121: LD_VAR 0 3
12125: PPUSH
12126: LD_INT 1
12128: PPUSH
12129: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12133: LD_INT 32
12135: PPUSH
12136: LD_VAR 0 3
12140: PPUSH
12141: LD_INT 1
12143: PPUSH
12144: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12148: LD_INT 36
12150: PPUSH
12151: LD_VAR 0 3
12155: PPUSH
12156: LD_INT 1
12158: PPUSH
12159: CALL_OW 324
// end ; 5 :
12163: GO 14294
12165: LD_INT 5
12167: DOUBLE
12168: EQUAL
12169: IFTRUE 12173
12171: GO 13286
12173: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12174: LD_INT 35
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12189: LD_INT 45
12191: PPUSH
12192: LD_VAR 0 3
12196: PPUSH
12197: LD_INT 1
12199: PPUSH
12200: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12204: LD_INT 46
12206: PPUSH
12207: LD_VAR 0 3
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12219: LD_INT 47
12221: PPUSH
12222: LD_VAR 0 3
12226: PPUSH
12227: LD_INT 1
12229: PPUSH
12230: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12234: LD_INT 1
12236: PPUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12249: LD_INT 2
12251: PPUSH
12252: LD_VAR 0 3
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12264: LD_INT 11
12266: PPUSH
12267: LD_VAR 0 3
12271: PPUSH
12272: LD_INT 1
12274: PPUSH
12275: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12279: LD_INT 20
12281: PPUSH
12282: LD_VAR 0 3
12286: PPUSH
12287: LD_INT 1
12289: PPUSH
12290: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12294: LD_INT 48
12296: PPUSH
12297: LD_VAR 0 3
12301: PPUSH
12302: LD_INT 1
12304: PPUSH
12305: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12309: LD_INT 49
12311: PPUSH
12312: LD_VAR 0 3
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12324: LD_INT 69
12326: PPUSH
12327: LD_VAR 0 3
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12339: LD_INT 39
12341: PPUSH
12342: LD_VAR 0 3
12346: PPUSH
12347: LD_INT 1
12349: PPUSH
12350: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12354: LD_INT 34
12356: PPUSH
12357: LD_VAR 0 3
12361: PPUSH
12362: LD_INT 1
12364: PPUSH
12365: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12369: LD_INT 42
12371: PPUSH
12372: LD_VAR 0 3
12376: PPUSH
12377: LD_INT 1
12379: PPUSH
12380: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12384: LD_INT 44
12386: PPUSH
12387: LD_VAR 0 3
12391: PPUSH
12392: LD_INT 1
12394: PPUSH
12395: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12399: LD_INT 41
12401: PPUSH
12402: LD_VAR 0 3
12406: PPUSH
12407: LD_INT 1
12409: PPUSH
12410: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12414: LD_INT 40
12416: PPUSH
12417: LD_VAR 0 3
12421: PPUSH
12422: LD_INT 1
12424: PPUSH
12425: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12429: LD_INT 43
12431: PPUSH
12432: LD_VAR 0 3
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12444: LD_INT 70
12446: PPUSH
12447: LD_VAR 0 3
12451: PPUSH
12452: LD_INT 1
12454: PPUSH
12455: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12459: LD_INT 51
12461: PPUSH
12462: LD_VAR 0 3
12466: PPUSH
12467: LD_INT 1
12469: PPUSH
12470: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12474: LD_INT 52
12476: PPUSH
12477: LD_VAR 0 3
12481: PPUSH
12482: LD_INT 1
12484: PPUSH
12485: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12489: LD_INT 6
12491: PPUSH
12492: LD_VAR 0 3
12496: PPUSH
12497: LD_INT 1
12499: PPUSH
12500: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12504: LD_INT 15
12506: PPUSH
12507: LD_VAR 0 3
12511: PPUSH
12512: LD_INT 1
12514: PPUSH
12515: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12519: LD_INT 7
12521: PPUSH
12522: LD_VAR 0 3
12526: PPUSH
12527: LD_INT 1
12529: PPUSH
12530: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12534: LD_INT 12
12536: PPUSH
12537: LD_VAR 0 3
12541: PPUSH
12542: LD_INT 1
12544: PPUSH
12545: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12549: LD_INT 17
12551: PPUSH
12552: LD_VAR 0 3
12556: PPUSH
12557: LD_INT 1
12559: PPUSH
12560: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12564: LD_INT 18
12566: PPUSH
12567: LD_VAR 0 3
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12579: LD_INT 60
12581: PPUSH
12582: LD_VAR 0 3
12586: PPUSH
12587: LD_INT 1
12589: PPUSH
12590: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12594: LD_INT 32
12596: PPUSH
12597: LD_VAR 0 3
12601: PPUSH
12602: LD_INT 1
12604: PPUSH
12605: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12609: LD_INT 9
12611: PPUSH
12612: LD_VAR 0 3
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12624: LD_INT 57
12626: PPUSH
12627: LD_VAR 0 3
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12639: LD_INT 30
12641: PPUSH
12642: LD_VAR 0 3
12646: PPUSH
12647: LD_INT 1
12649: PPUSH
12650: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12654: LD_INT 37
12656: PPUSH
12657: LD_VAR 0 3
12661: PPUSH
12662: LD_INT 1
12664: PPUSH
12665: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12669: LD_INT 63
12671: PPUSH
12672: LD_VAR 0 3
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12684: LD_INT 3
12686: PPUSH
12687: LD_VAR 0 3
12691: PPUSH
12692: LD_INT 1
12694: PPUSH
12695: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12699: LD_INT 4
12701: PPUSH
12702: LD_VAR 0 3
12706: PPUSH
12707: LD_INT 1
12709: PPUSH
12710: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12714: LD_INT 5
12716: PPUSH
12717: LD_VAR 0 3
12721: PPUSH
12722: LD_INT 1
12724: PPUSH
12725: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12729: LD_INT 66
12731: PPUSH
12732: LD_VAR 0 3
12736: PPUSH
12737: LD_INT 1
12739: PPUSH
12740: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12744: LD_INT 21
12746: PPUSH
12747: LD_VAR 0 3
12751: PPUSH
12752: LD_INT 1
12754: PPUSH
12755: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12759: LD_INT 22
12761: PPUSH
12762: LD_VAR 0 3
12766: PPUSH
12767: LD_INT 1
12769: PPUSH
12770: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12774: LD_INT 19
12776: PPUSH
12777: LD_VAR 0 3
12781: PPUSH
12782: LD_INT 1
12784: PPUSH
12785: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12789: LD_INT 54
12791: PPUSH
12792: LD_VAR 0 3
12796: PPUSH
12797: LD_INT 1
12799: PPUSH
12800: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12804: LD_INT 55
12806: PPUSH
12807: LD_VAR 0 3
12811: PPUSH
12812: LD_INT 1
12814: PPUSH
12815: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12819: LD_INT 0
12821: PPUSH
12822: LD_VAR 0 3
12826: PPUSH
12827: LD_INT 1
12829: PPUSH
12830: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12834: LD_INT 1
12836: PPUSH
12837: LD_VAR 0 3
12841: PPUSH
12842: LD_INT 1
12844: PPUSH
12845: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12849: LD_INT 2
12851: PPUSH
12852: LD_VAR 0 3
12856: PPUSH
12857: LD_INT 1
12859: PPUSH
12860: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12864: LD_INT 3
12866: PPUSH
12867: LD_VAR 0 3
12871: PPUSH
12872: LD_INT 1
12874: PPUSH
12875: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12879: LD_INT 4
12881: PPUSH
12882: LD_VAR 0 3
12886: PPUSH
12887: LD_INT 1
12889: PPUSH
12890: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12894: LD_INT 5
12896: PPUSH
12897: LD_VAR 0 3
12901: PPUSH
12902: LD_INT 1
12904: PPUSH
12905: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12909: LD_INT 6
12911: PPUSH
12912: LD_VAR 0 3
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12924: LD_INT 7
12926: PPUSH
12927: LD_VAR 0 3
12931: PPUSH
12932: LD_INT 1
12934: PPUSH
12935: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12939: LD_INT 8
12941: PPUSH
12942: LD_VAR 0 3
12946: PPUSH
12947: LD_INT 1
12949: PPUSH
12950: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12954: LD_INT 10
12956: PPUSH
12957: LD_VAR 0 3
12961: PPUSH
12962: LD_INT 1
12964: PPUSH
12965: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12969: LD_INT 11
12971: PPUSH
12972: LD_VAR 0 3
12976: PPUSH
12977: LD_INT 1
12979: PPUSH
12980: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12984: LD_INT 12
12986: PPUSH
12987: LD_VAR 0 3
12991: PPUSH
12992: LD_INT 1
12994: PPUSH
12995: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12999: LD_INT 13
13001: PPUSH
13002: LD_VAR 0 3
13006: PPUSH
13007: LD_INT 1
13009: PPUSH
13010: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
13014: LD_INT 14
13016: PPUSH
13017: LD_VAR 0 3
13021: PPUSH
13022: LD_INT 1
13024: PPUSH
13025: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13029: LD_INT 15
13031: PPUSH
13032: LD_VAR 0 3
13036: PPUSH
13037: LD_INT 1
13039: PPUSH
13040: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13044: LD_INT 16
13046: PPUSH
13047: LD_VAR 0 3
13051: PPUSH
13052: LD_INT 1
13054: PPUSH
13055: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13059: LD_INT 17
13061: PPUSH
13062: LD_VAR 0 3
13066: PPUSH
13067: LD_INT 1
13069: PPUSH
13070: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13074: LD_INT 18
13076: PPUSH
13077: LD_VAR 0 3
13081: PPUSH
13082: LD_INT 1
13084: PPUSH
13085: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13089: LD_INT 19
13091: PPUSH
13092: LD_VAR 0 3
13096: PPUSH
13097: LD_INT 1
13099: PPUSH
13100: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13104: LD_INT 20
13106: PPUSH
13107: LD_VAR 0 3
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13119: LD_INT 21
13121: PPUSH
13122: LD_VAR 0 3
13126: PPUSH
13127: LD_INT 1
13129: PPUSH
13130: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13134: LD_INT 23
13136: PPUSH
13137: LD_VAR 0 3
13141: PPUSH
13142: LD_INT 1
13144: PPUSH
13145: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13149: LD_INT 26
13151: PPUSH
13152: LD_VAR 0 3
13156: PPUSH
13157: LD_INT 1
13159: PPUSH
13160: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13164: LD_INT 27
13166: PPUSH
13167: LD_VAR 0 3
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13179: LD_INT 28
13181: PPUSH
13182: LD_VAR 0 3
13186: PPUSH
13187: LD_INT 1
13189: PPUSH
13190: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13194: LD_INT 29
13196: PPUSH
13197: LD_VAR 0 3
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13209: LD_INT 30
13211: PPUSH
13212: LD_VAR 0 3
13216: PPUSH
13217: LD_INT 1
13219: PPUSH
13220: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13224: LD_INT 31
13226: PPUSH
13227: LD_VAR 0 3
13231: PPUSH
13232: LD_INT 1
13234: PPUSH
13235: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13239: LD_INT 32
13241: PPUSH
13242: LD_VAR 0 3
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
13254: LD_INT 33
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: LD_INT 1
13264: PPUSH
13265: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13269: LD_INT 36
13271: PPUSH
13272: LD_VAR 0 3
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL_OW 324
// end ; 6 :
13284: GO 14294
13286: LD_INT 6
13288: DOUBLE
13289: EQUAL
13290: IFTRUE 13294
13292: GO 14219
13294: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13295: LD_INT 35
13297: PPUSH
13298: LD_VAR 0 3
13302: PPUSH
13303: LD_INT 1
13305: PPUSH
13306: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13310: LD_INT 45
13312: PPUSH
13313: LD_VAR 0 3
13317: PPUSH
13318: LD_INT 1
13320: PPUSH
13321: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13325: LD_INT 46
13327: PPUSH
13328: LD_VAR 0 3
13332: PPUSH
13333: LD_INT 1
13335: PPUSH
13336: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13340: LD_INT 47
13342: PPUSH
13343: LD_VAR 0 3
13347: PPUSH
13348: LD_INT 1
13350: PPUSH
13351: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13355: LD_INT 1
13357: PPUSH
13358: LD_VAR 0 3
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13370: LD_INT 2
13372: PPUSH
13373: LD_VAR 0 3
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13385: LD_INT 11
13387: PPUSH
13388: LD_VAR 0 3
13392: PPUSH
13393: LD_INT 1
13395: PPUSH
13396: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13400: LD_INT 20
13402: PPUSH
13403: LD_VAR 0 3
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13415: LD_INT 48
13417: PPUSH
13418: LD_VAR 0 3
13422: PPUSH
13423: LD_INT 1
13425: PPUSH
13426: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13430: LD_INT 49
13432: PPUSH
13433: LD_VAR 0 3
13437: PPUSH
13438: LD_INT 1
13440: PPUSH
13441: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13445: LD_INT 50
13447: PPUSH
13448: LD_VAR 0 3
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13460: LD_INT 69
13462: PPUSH
13463: LD_VAR 0 3
13467: PPUSH
13468: LD_INT 1
13470: PPUSH
13471: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13475: LD_INT 39
13477: PPUSH
13478: LD_VAR 0 3
13482: PPUSH
13483: LD_INT 1
13485: PPUSH
13486: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13490: LD_INT 34
13492: PPUSH
13493: LD_VAR 0 3
13497: PPUSH
13498: LD_INT 1
13500: PPUSH
13501: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13505: LD_INT 42
13507: PPUSH
13508: LD_VAR 0 3
13512: PPUSH
13513: LD_INT 1
13515: PPUSH
13516: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13520: LD_INT 44
13522: PPUSH
13523: LD_VAR 0 3
13527: PPUSH
13528: LD_INT 1
13530: PPUSH
13531: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13535: LD_INT 41
13537: PPUSH
13538: LD_VAR 0 3
13542: PPUSH
13543: LD_INT 1
13545: PPUSH
13546: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13550: LD_INT 13
13552: PPUSH
13553: LD_VAR 0 3
13557: PPUSH
13558: LD_INT 1
13560: PPUSH
13561: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13565: LD_INT 40
13567: PPUSH
13568: LD_VAR 0 3
13572: PPUSH
13573: LD_INT 1
13575: PPUSH
13576: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13580: LD_INT 43
13582: PPUSH
13583: LD_VAR 0 3
13587: PPUSH
13588: LD_INT 1
13590: PPUSH
13591: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13595: LD_INT 70
13597: PPUSH
13598: LD_VAR 0 3
13602: PPUSH
13603: LD_INT 1
13605: PPUSH
13606: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13610: LD_INT 23
13612: PPUSH
13613: LD_VAR 0 3
13617: PPUSH
13618: LD_INT 1
13620: PPUSH
13621: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13625: LD_INT 51
13627: PPUSH
13628: LD_VAR 0 3
13632: PPUSH
13633: LD_INT 1
13635: PPUSH
13636: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13640: LD_INT 52
13642: PPUSH
13643: LD_VAR 0 3
13647: PPUSH
13648: LD_INT 1
13650: PPUSH
13651: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13655: LD_INT 6
13657: PPUSH
13658: LD_VAR 0 3
13662: PPUSH
13663: LD_INT 1
13665: PPUSH
13666: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13670: LD_INT 15
13672: PPUSH
13673: LD_VAR 0 3
13677: PPUSH
13678: LD_INT 1
13680: PPUSH
13681: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13685: LD_INT 7
13687: PPUSH
13688: LD_VAR 0 3
13692: PPUSH
13693: LD_INT 1
13695: PPUSH
13696: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13700: LD_INT 12
13702: PPUSH
13703: LD_VAR 0 3
13707: PPUSH
13708: LD_INT 1
13710: PPUSH
13711: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13715: LD_INT 10
13717: PPUSH
13718: LD_VAR 0 3
13722: PPUSH
13723: LD_INT 1
13725: PPUSH
13726: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13730: LD_INT 17
13732: PPUSH
13733: LD_VAR 0 3
13737: PPUSH
13738: LD_INT 1
13740: PPUSH
13741: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13745: LD_INT 18
13747: PPUSH
13748: LD_VAR 0 3
13752: PPUSH
13753: LD_INT 1
13755: PPUSH
13756: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13760: LD_INT 60
13762: PPUSH
13763: LD_VAR 0 3
13767: PPUSH
13768: LD_INT 1
13770: PPUSH
13771: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13775: LD_INT 61
13777: PPUSH
13778: LD_VAR 0 3
13782: PPUSH
13783: LD_INT 1
13785: PPUSH
13786: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13790: LD_INT 32
13792: PPUSH
13793: LD_VAR 0 3
13797: PPUSH
13798: LD_INT 1
13800: PPUSH
13801: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13805: LD_INT 27
13807: PPUSH
13808: LD_VAR 0 3
13812: PPUSH
13813: LD_INT 1
13815: PPUSH
13816: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13820: LD_INT 36
13822: PPUSH
13823: LD_VAR 0 3
13827: PPUSH
13828: LD_INT 1
13830: PPUSH
13831: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13835: LD_INT 33
13837: PPUSH
13838: LD_VAR 0 3
13842: PPUSH
13843: LD_INT 1
13845: PPUSH
13846: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13850: LD_INT 9
13852: PPUSH
13853: LD_VAR 0 3
13857: PPUSH
13858: LD_INT 1
13860: PPUSH
13861: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13865: LD_INT 38
13867: PPUSH
13868: LD_VAR 0 3
13872: PPUSH
13873: LD_INT 1
13875: PPUSH
13876: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13880: LD_INT 57
13882: PPUSH
13883: LD_VAR 0 3
13887: PPUSH
13888: LD_INT 1
13890: PPUSH
13891: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13895: LD_INT 58
13897: PPUSH
13898: LD_VAR 0 3
13902: PPUSH
13903: LD_INT 1
13905: PPUSH
13906: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13910: LD_INT 28
13912: PPUSH
13913: LD_VAR 0 3
13917: PPUSH
13918: LD_INT 1
13920: PPUSH
13921: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13925: LD_INT 29
13927: PPUSH
13928: LD_VAR 0 3
13932: PPUSH
13933: LD_INT 1
13935: PPUSH
13936: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13940: LD_INT 30
13942: PPUSH
13943: LD_VAR 0 3
13947: PPUSH
13948: LD_INT 1
13950: PPUSH
13951: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13955: LD_INT 37
13957: PPUSH
13958: LD_VAR 0 3
13962: PPUSH
13963: LD_INT 1
13965: PPUSH
13966: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13970: LD_INT 63
13972: PPUSH
13973: LD_VAR 0 3
13977: PPUSH
13978: LD_INT 1
13980: PPUSH
13981: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13985: LD_INT 64
13987: PPUSH
13988: LD_VAR 0 3
13992: PPUSH
13993: LD_INT 1
13995: PPUSH
13996: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14000: LD_INT 3
14002: PPUSH
14003: LD_VAR 0 3
14007: PPUSH
14008: LD_INT 1
14010: PPUSH
14011: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14015: LD_INT 4
14017: PPUSH
14018: LD_VAR 0 3
14022: PPUSH
14023: LD_INT 1
14025: PPUSH
14026: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14030: LD_INT 5
14032: PPUSH
14033: LD_VAR 0 3
14037: PPUSH
14038: LD_INT 1
14040: PPUSH
14041: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14045: LD_INT 8
14047: PPUSH
14048: LD_VAR 0 3
14052: PPUSH
14053: LD_INT 1
14055: PPUSH
14056: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14060: LD_INT 66
14062: PPUSH
14063: LD_VAR 0 3
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14075: LD_INT 67
14077: PPUSH
14078: LD_VAR 0 3
14082: PPUSH
14083: LD_INT 1
14085: PPUSH
14086: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14090: LD_INT 21
14092: PPUSH
14093: LD_VAR 0 3
14097: PPUSH
14098: LD_INT 1
14100: PPUSH
14101: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14105: LD_INT 22
14107: PPUSH
14108: LD_VAR 0 3
14112: PPUSH
14113: LD_INT 1
14115: PPUSH
14116: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14120: LD_INT 19
14122: PPUSH
14123: LD_VAR 0 3
14127: PPUSH
14128: LD_INT 1
14130: PPUSH
14131: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14135: LD_INT 26
14137: PPUSH
14138: LD_VAR 0 3
14142: PPUSH
14143: LD_INT 1
14145: PPUSH
14146: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14150: LD_INT 54
14152: PPUSH
14153: LD_VAR 0 3
14157: PPUSH
14158: LD_INT 1
14160: PPUSH
14161: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14165: LD_INT 55
14167: PPUSH
14168: LD_VAR 0 3
14172: PPUSH
14173: LD_INT 1
14175: PPUSH
14176: CALL_OW 322
// for i = 0 to 39 do
14180: LD_ADDR_VAR 0 4
14184: PUSH
14185: DOUBLE
14186: LD_INT 0
14188: DEC
14189: ST_TO_ADDR
14190: LD_INT 39
14192: PUSH
14193: FOR_TO
14194: IFFALSE 14215
// SetRestrict ( i , side , true ) ;
14196: LD_VAR 0 4
14200: PPUSH
14201: LD_VAR 0 3
14205: PPUSH
14206: LD_INT 1
14208: PPUSH
14209: CALL_OW 324
14213: GO 14193
14215: POP
14216: POP
// end ; else
14217: GO 14294
14219: POP
// begin for i = 1 to 73 do
14220: LD_ADDR_VAR 0 4
14224: PUSH
14225: DOUBLE
14226: LD_INT 1
14228: DEC
14229: ST_TO_ADDR
14230: LD_INT 73
14232: PUSH
14233: FOR_TO
14234: IFFALSE 14255
// SetTech ( i , side , state_enabled ) ;
14236: LD_VAR 0 4
14240: PPUSH
14241: LD_VAR 0 3
14245: PPUSH
14246: LD_INT 1
14248: PPUSH
14249: CALL_OW 322
14253: GO 14233
14255: POP
14256: POP
// for i = 0 to 39 do
14257: LD_ADDR_VAR 0 4
14261: PUSH
14262: DOUBLE
14263: LD_INT 0
14265: DEC
14266: ST_TO_ADDR
14267: LD_INT 39
14269: PUSH
14270: FOR_TO
14271: IFFALSE 14292
// SetRestrict ( i , side , true ) ;
14273: LD_VAR 0 4
14277: PPUSH
14278: LD_VAR 0 3
14282: PPUSH
14283: LD_INT 1
14285: PPUSH
14286: CALL_OW 324
14290: GO 14270
14292: POP
14293: POP
// end ; end ; end ;
14294: GO 10299
14296: POP
14297: POP
// end ;
14298: LD_VAR 0 2
14302: RET
