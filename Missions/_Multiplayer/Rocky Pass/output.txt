// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , tech_level ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 41
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 21
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 21
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 19
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 22
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 20
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 21
 285: PUSH
 286: LD_EXP 21
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 20
 308: PUSH
 309: LD_EXP 20
 313: PPUSH
 314: LD_EXP 19
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 20
 329: PUSH
 330: LD_EXP 19
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 24
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 21
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 24
 420: PUSH
 421: LD_EXP 24
 425: PPUSH
 426: LD_EXP 21
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 451: LD_ADDR_EXP 23
 455: PUSH
 456: LD_EXP 19
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: EMPTY
 465: LIST
 466: DIFF
 467: PUSH
 468: LD_INT 1
 470: GREATER
 471: ST_TO_ADDR
// if Multiplayer then
 472: LD_OWVAR 4
 476: IFFALSE 727
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 478: LD_ADDR_EXP 43
 482: PUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 491: LD_ADDR_EXP 44
 495: PUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 504: LD_ADDR_EXP 45
 508: PUSH
 509: LD_INT 2
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 517: LD_ADDR_EXP 46
 521: PUSH
 522: LD_INT 3
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 530: LD_ADDR_EXP 47
 534: PUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 543: LD_ADDR_EXP 48
 547: PUSH
 548: LD_INT 5
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 556: LD_ADDR_EXP 49
 560: PUSH
 561: LD_INT 6
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 569: LD_ADDR_EXP 50
 573: PUSH
 574: LD_INT 10
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 582: LD_ADDR_EXP 51
 586: PUSH
 587: LD_INT 11
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 595: LD_ADDR_EXP 52
 599: PUSH
 600: LD_INT 12
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 608: LD_ADDR_EXP 53
 612: PUSH
 613: LD_INT 13
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 621: LD_ADDR_EXP 54
 625: PUSH
 626: LD_INT 14
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 634: LD_ADDR_EXP 1
 638: PUSH
 639: LD_INT 15
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 647: LD_ADDR_EXP 2
 651: PUSH
 652: LD_INT 16
 654: PPUSH
 655: CALL_OW 426
 659: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 660: LD_ADDR_EXP 55
 664: PUSH
 665: LD_INT 17
 667: PPUSH
 668: CALL_OW 426
 672: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 673: LD_ADDR_EXP 56
 677: PUSH
 678: LD_INT 20
 680: PPUSH
 681: CALL_OW 426
 685: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 686: LD_ADDR_EXP 42
 690: PUSH
 691: LD_INT 21
 693: PPUSH
 694: CALL_OW 426
 698: ST_TO_ADDR
// def_spect := GetMultiplayerSetting ( 22 ) ;
 699: LD_ADDR_EXP 16
 703: PUSH
 704: LD_INT 22
 706: PPUSH
 707: CALL_OW 426
 711: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 712: LD_ADDR_EXP 18
 716: PUSH
 717: LD_INT 23
 719: PPUSH
 720: CALL_OW 426
 724: ST_TO_ADDR
// end else
 725: GO 883
// begin Randomize ;
 727: CALL_OW 10
// def_base_level := 2 ;
 731: LD_ADDR_EXP 43
 735: PUSH
 736: LD_INT 2
 738: ST_TO_ADDR
// def_amount_of_people := 0 ;
 739: LD_ADDR_EXP 44
 743: PUSH
 744: LD_INT 0
 746: ST_TO_ADDR
// def_skill_level := 1 ;
 747: LD_ADDR_EXP 45
 751: PUSH
 752: LD_INT 1
 754: ST_TO_ADDR
// def_starting_resources := 2 ;
 755: LD_ADDR_EXP 46
 759: PUSH
 760: LD_INT 2
 762: ST_TO_ADDR
// def_shipments_density := 1 ;
 763: LD_ADDR_EXP 47
 767: PUSH
 768: LD_INT 1
 770: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 771: LD_ADDR_EXP 48
 775: PUSH
 776: LD_INT 0
 778: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 779: LD_ADDR_EXP 49
 783: PUSH
 784: LD_INT 1
 786: ST_TO_ADDR
// def_shared_vision := 1 ;
 787: LD_ADDR_EXP 50
 791: PUSH
 792: LD_INT 1
 794: ST_TO_ADDR
// def_morale_flags := 1 ;
 795: LD_ADDR_EXP 51
 799: PUSH
 800: LD_INT 1
 802: ST_TO_ADDR
// def_siberite_detection := 1 ;
 803: LD_ADDR_EXP 52
 807: PUSH
 808: LD_INT 1
 810: ST_TO_ADDR
// def_people_respawning := 2 ;
 811: LD_ADDR_EXP 53
 815: PUSH
 816: LD_INT 2
 818: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 819: LD_ADDR_EXP 54
 823: PUSH
 824: LD_INT 3
 826: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 827: LD_ADDR_EXP 1
 831: PUSH
 832: LD_INT 0
 834: ST_TO_ADDR
// def_public_score := 0 ;
 835: LD_ADDR_EXP 2
 839: PUSH
 840: LD_INT 0
 842: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 843: LD_ADDR_EXP 55
 847: PUSH
 848: LD_INT 0
 850: ST_TO_ADDR
// def_builduptime := 0 ;
 851: LD_ADDR_EXP 56
 855: PUSH
 856: LD_INT 0
 858: ST_TO_ADDR
// def_game_rules := 1 ;
 859: LD_ADDR_EXP 42
 863: PUSH
 864: LD_INT 1
 866: ST_TO_ADDR
// def_spect := 1 ;
 867: LD_ADDR_EXP 16
 871: PUSH
 872: LD_INT 1
 874: ST_TO_ADDR
// tech_level = 0 ;
 875: LD_ADDR_EXP 18
 879: PUSH
 880: LD_INT 0
 882: ST_TO_ADDR
// end ; InitGameRules ;
 883: CALL 9520 0 0
// if def_game_rules = 0 then
 887: LD_EXP 42
 891: PUSH
 892: LD_INT 0
 894: EQUAL
 895: IFFALSE 922
// begin if isSGUI then
 897: LD_OWVAR 83
 901: IFFALSE 909
// setMpTechs ( ) else
 903: CALL 12970 0 0
 907: GO 922
// begin SetMpTechLevel ( tech_level + 1 ) ;
 909: LD_EXP 18
 913: PUSH
 914: LD_INT 1
 916: PLUS
 917: PPUSH
 918: CALL 13117 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 922: LD_ADDR_EXP 3
 926: PUSH
 927: LD_INT 0
 929: PUSH
 930: LD_INT 1
 932: PUSH
 933: LD_INT 1
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_EXP 43
 945: PUSH
 946: LD_INT 1
 948: PLUS
 949: ARRAY
 950: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 951: LD_ADDR_EXP 4
 955: PUSH
 956: LD_INT 0
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 3
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: PUSH
 970: LD_EXP 43
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: ARRAY
 979: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 980: LD_ADDR_EXP 5
 984: PUSH
 985: LD_INT 9
 987: PUSH
 988: LD_INT 12
 990: PUSH
 991: LD_INT 15
 993: PUSH
 994: LD_INT 24
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: PUSH
1003: LD_EXP 44
1007: PUSH
1008: LD_INT 1
1010: PLUS
1011: ARRAY
1012: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
1013: LD_ADDR_EXP 6
1017: PUSH
1018: LD_INT 2
1020: PUSH
1021: LD_INT 3
1023: PUSH
1024: LD_INT 5
1026: PUSH
1027: LD_INT 6
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_EXP 45
1040: PUSH
1041: LD_INT 1
1043: PLUS
1044: ARRAY
1045: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1046: LD_ADDR_EXP 8
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: LD_INT 0
1056: PUSH
1057: LD_INT 0
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 30
1067: PUSH
1068: LD_INT 0
1070: PUSH
1071: LD_INT 0
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: PUSH
1079: LD_INT 50
1081: PUSH
1082: LD_INT 20
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 80
1095: PUSH
1096: LD_INT 40
1098: PUSH
1099: LD_INT 20
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_EXP 46
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: ARRAY
1122: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1123: LD_ADDR_EXP 7
1127: PUSH
1128: LD_INT 10
1130: PUSH
1131: EMPTY
1132: LIST
1133: PUSH
1134: LD_INT 7
1136: PUSH
1137: LD_INT 14
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 6
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: LD_INT 18
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 5
1160: PUSH
1161: LD_INT 10
1163: PUSH
1164: LD_INT 15
1166: PUSH
1167: LD_INT 20
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_EXP 46
1186: PUSH
1187: LD_INT 1
1189: PLUS
1190: ARRAY
1191: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1192: LD_ADDR_EXP 9
1196: PUSH
1197: LD_INT 150
1199: PUSH
1200: LD_INT 125
1202: PUSH
1203: LD_INT 100
1205: PUSH
1206: LD_INT 50
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_EXP 47
1219: PUSH
1220: LD_INT 1
1222: PLUS
1223: ARRAY
1224: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1225: LD_ADDR_EXP 13
1229: PUSH
1230: LD_INT 0
1232: PUSH
1233: LD_INT 10500
1235: PUSH
1236: LD_INT 6300
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_EXP 53
1248: PUSH
1249: LD_INT 1
1251: PLUS
1252: ARRAY
1253: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1254: LD_ADDR_EXP 14
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: LD_INT 31500
1264: PUSH
1265: LD_INT 10500
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: LIST
1272: PUSH
1273: LD_EXP 53
1277: PUSH
1278: LD_INT 1
1280: PLUS
1281: ARRAY
1282: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1283: LD_ADDR_EXP 11
1287: PUSH
1288: LD_INT 0
1290: PUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 6
1296: PUSH
1297: LD_INT 9
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: PUSH
1306: LD_EXP 54
1310: PUSH
1311: LD_INT 1
1313: PLUS
1314: ARRAY
1315: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1316: LD_ADDR_EXP 12
1320: PUSH
1321: LD_INT 30
1323: PUSH
1324: LD_INT 50
1326: PUSH
1327: LD_INT 80
1329: PUSH
1330: LD_INT 100
1332: PUSH
1333: LD_INT 130
1335: PUSH
1336: LD_INT 150
1338: PUSH
1339: LD_INT 200
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: PUSH
1351: LD_EXP 1
1355: PUSH
1356: LD_INT 1
1358: PLUS
1359: ARRAY
1360: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1361: LD_ADDR_EXP 10
1365: PUSH
1366: LD_INT 1
1368: NEG
1369: PUSH
1370: LD_INT 350
1372: PUSH
1373: LD_INT 700
1375: PUSH
1376: LD_INT 1400
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: PUSH
1389: LD_EXP 51
1393: PUSH
1394: LD_INT 1
1396: PLUS
1397: ARRAY
1398: ST_TO_ADDR
// battle_flags_id := [ ] ;
1399: LD_ADDR_EXP 32
1403: PUSH
1404: EMPTY
1405: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1406: LD_ADDR_EXP 15
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PUSH
1421: LD_EXP 16
1425: PUSH
1426: LD_INT 1
1428: PLUS
1429: ARRAY
1430: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1431: LD_ADDR_EXP 17
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 1
1441: PUSH
1442: LD_INT 63000
1444: PUSH
1445: LD_INT 126000
1447: PUSH
1448: LD_INT 189000
1450: PUSH
1451: LD_INT 252000
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: PUSH
1462: LD_EXP 55
1466: PUSH
1467: LD_INT 1
1469: PLUS
1470: ARRAY
1471: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1472: LD_ADDR_EXP 40
1476: PUSH
1477: LD_INT 7
1479: PUSH
1480: LD_INT 8
1482: PUSH
1483: LD_INT 9
1485: PUSH
1486: LD_INT 10
1488: PUSH
1489: LD_INT 11
1491: PUSH
1492: LD_INT 12
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: ST_TO_ADDR
// end ;
1503: LD_VAR 0 1
1507: RET
// function init_map ; var i , j ; begin
1508: LD_INT 0
1510: PPUSH
1511: PPUSH
1512: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1513: LD_ADDR_EXP 28
1517: PUSH
1518: LD_INT 12
1520: PUSH
1521: LD_INT 4
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PUSH
1528: LD_INT 45
1530: PUSH
1531: LD_INT 81
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PUSH
1538: LD_INT 116
1540: PUSH
1541: LD_INT 195
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 142
1550: PUSH
1551: LD_INT 4
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PUSH
1558: LD_INT 201
1560: PUSH
1561: LD_INT 102
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 234
1570: PUSH
1571: LD_INT 194
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1586: LD_ADDR_EXP 29
1590: PUSH
1591: LD_INT 12
1593: PUSH
1594: LD_INT 4
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 16
1603: PUSH
1604: LD_INT 25
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 45
1617: PUSH
1618: LD_INT 81
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: PUSH
1625: LD_INT 60
1627: PUSH
1628: LD_INT 102
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 116
1641: PUSH
1642: LD_INT 195
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 92
1651: PUSH
1652: LD_INT 167
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: LD_INT 142
1665: PUSH
1666: LD_INT 4
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 167
1675: PUSH
1676: LD_INT 24
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 201
1689: PUSH
1690: LD_INT 102
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 190
1699: PUSH
1700: LD_INT 77
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 234
1713: PUSH
1714: LD_INT 194
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 237
1723: PUSH
1724: LD_INT 171
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1743: LD_ADDR_EXP 30
1747: PUSH
1748: LD_INT 10
1750: PUSH
1751: LD_INT 10
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 51
1760: PUSH
1761: LD_INT 93
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 102
1770: PUSH
1771: LD_INT 187
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 158
1780: PUSH
1781: LD_INT 6
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 203
1790: PUSH
1791: LD_INT 93
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: LD_INT 252
1800: PUSH
1801: LD_INT 194
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1816: LD_ADDR_EXP 31
1820: PUSH
1821: LD_INT 10
1823: PUSH
1824: LD_INT 10
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 36
1833: PUSH
1834: LD_INT 10
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 51
1847: PUSH
1848: LD_INT 93
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 47
1857: PUSH
1858: LD_INT 72
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 102
1871: PUSH
1872: LD_INT 187
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: LD_INT 93
1881: PUSH
1882: LD_INT 175
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 158
1895: PUSH
1896: LD_INT 6
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: PUSH
1903: LD_INT 147
1905: PUSH
1906: LD_INT 5
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 203
1919: PUSH
1920: LD_INT 93
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 173
1929: PUSH
1930: LD_INT 71
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 252
1943: PUSH
1944: LD_INT 194
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 243
1953: PUSH
1954: LD_INT 177
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1973: LD_ADDR_EXP 25
1977: PUSH
1978: LD_INT 23
1980: PUSH
1981: LD_INT 15
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 56
1994: PUSH
1995: LD_INT 85
1997: PUSH
1998: LD_INT 1
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 110
2008: PUSH
2009: LD_INT 177
2011: PUSH
2012: LD_INT 3
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 157
2022: PUSH
2023: LD_INT 13
2025: PUSH
2026: LD_INT 3
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 187
2036: PUSH
2037: LD_INT 87
2039: PUSH
2040: LD_INT 5
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 231
2050: PUSH
2051: LD_INT 181
2053: PUSH
2054: LD_INT 5
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
2070: LD_ADDR_EXP 27
2074: PUSH
2075: LD_INT 30
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 58
2087: PUSH
2088: LD_INT 82
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 113
2097: PUSH
2098: LD_INT 180
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 151
2107: PUSH
2108: LD_INT 24
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 183
2117: PUSH
2118: LD_INT 90
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 223
2127: PUSH
2128: LD_INT 180
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
2143: LD_ADDR_EXP 26
2147: PUSH
2148: LD_INT 33
2150: PUSH
2151: LD_INT 12
2153: PUSH
2154: LD_INT 5
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 42
2164: PUSH
2165: LD_INT 29
2167: PUSH
2168: LD_INT 4
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 36
2178: PUSH
2179: LD_INT 20
2181: PUSH
2182: LD_INT 4
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 72
2197: PUSH
2198: LD_INT 91
2200: PUSH
2201: LD_INT 4
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 65
2211: PUSH
2212: LD_INT 78
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 75
2225: PUSH
2226: LD_INT 100
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 102
2244: PUSH
2245: LD_INT 165
2247: PUSH
2248: LD_INT 3
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 122
2258: PUSH
2259: LD_INT 176
2261: PUSH
2262: LD_INT 4
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 120
2272: PUSH
2273: LD_INT 184
2275: PUSH
2276: LD_INT 4
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 134
2291: PUSH
2292: LD_INT 16
2294: PUSH
2295: LD_INT 1
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: PUSH
2303: LD_INT 132
2305: PUSH
2306: LD_INT 5
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 157
2319: PUSH
2320: LD_INT 27
2322: PUSH
2323: LD_INT 5
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 172
2338: PUSH
2339: LD_INT 77
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 175
2352: PUSH
2353: LD_INT 96
2355: PUSH
2356: LD_INT 1
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: LD_INT 192
2366: PUSH
2367: LD_INT 104
2369: PUSH
2370: LD_INT 1
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 216
2385: PUSH
2386: LD_INT 179
2388: PUSH
2389: LD_INT 1
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 208
2399: PUSH
2400: LD_INT 160
2402: PUSH
2403: LD_INT 2
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 208
2413: PUSH
2414: LD_INT 171
2416: PUSH
2417: LD_INT 2
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: ST_TO_ADDR
// for i = 1 to 6 do
2438: LD_ADDR_VAR 0 2
2442: PUSH
2443: DOUBLE
2444: LD_INT 1
2446: DEC
2447: ST_TO_ADDR
2448: LD_INT 6
2450: PUSH
2451: FOR_TO
2452: IFFALSE 2549
// if def_extra_oil_deposits then
2454: LD_EXP 48
2458: IFFALSE 2510
// for j in extra_oil_deposits_locations [ i ] do
2460: LD_ADDR_VAR 0 3
2464: PUSH
2465: LD_EXP 29
2469: PUSH
2470: LD_VAR 0 2
2474: ARRAY
2475: PUSH
2476: FOR_IN
2477: IFFALSE 2506
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2479: LD_VAR 0 3
2483: PUSH
2484: LD_INT 1
2486: ARRAY
2487: PPUSH
2488: LD_VAR 0 3
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: LD_INT 2
2499: PPUSH
2500: CALL_OW 62
2504: GO 2476
2506: POP
2507: POP
2508: GO 2547
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2510: LD_EXP 28
2514: PUSH
2515: LD_VAR 0 2
2519: ARRAY
2520: PUSH
2521: LD_INT 1
2523: ARRAY
2524: PPUSH
2525: LD_EXP 28
2529: PUSH
2530: LD_VAR 0 2
2534: ARRAY
2535: PUSH
2536: LD_INT 2
2538: ARRAY
2539: PPUSH
2540: LD_INT 2
2542: PPUSH
2543: CALL_OW 62
2547: GO 2451
2549: POP
2550: POP
// if def_extra_sib_deposits then
2551: LD_EXP 49
2555: IFFALSE 2674
// for i = 1 to 6 do
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: DOUBLE
2563: LD_INT 1
2565: DEC
2566: ST_TO_ADDR
2567: LD_INT 6
2569: PUSH
2570: FOR_TO
2571: IFFALSE 2672
// if def_extra_sib_deposits = 2 then
2573: LD_EXP 49
2577: PUSH
2578: LD_INT 2
2580: EQUAL
2581: IFFALSE 2633
// for j in extra_sib_deposits_locations [ i ] do
2583: LD_ADDR_VAR 0 3
2587: PUSH
2588: LD_EXP 31
2592: PUSH
2593: LD_VAR 0 2
2597: ARRAY
2598: PUSH
2599: FOR_IN
2600: IFFALSE 2629
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2602: LD_VAR 0 3
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: LD_VAR 0 3
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PPUSH
2620: LD_INT 3
2622: PPUSH
2623: CALL_OW 62
2627: GO 2599
2629: POP
2630: POP
2631: GO 2670
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2633: LD_EXP 30
2637: PUSH
2638: LD_VAR 0 2
2642: ARRAY
2643: PUSH
2644: LD_INT 1
2646: ARRAY
2647: PPUSH
2648: LD_EXP 30
2652: PUSH
2653: LD_VAR 0 2
2657: ARRAY
2658: PUSH
2659: LD_INT 2
2661: ARRAY
2662: PPUSH
2663: LD_INT 3
2665: PPUSH
2666: CALL_OW 62
2670: GO 2570
2672: POP
2673: POP
// end ;
2674: LD_VAR 0 1
2678: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2679: LD_INT 0
2681: PPUSH
2682: PPUSH
2683: PPUSH
// if not Team_Game then
2684: LD_EXP 23
2688: NOT
2689: IFFALSE 2787
// begin for i = 1 to 8 do
2691: LD_ADDR_VAR 0 2
2695: PUSH
2696: DOUBLE
2697: LD_INT 1
2699: DEC
2700: ST_TO_ADDR
2701: LD_INT 8
2703: PUSH
2704: FOR_TO
2705: IFFALSE 2783
// for j = 1 to 8 do
2707: LD_ADDR_VAR 0 3
2711: PUSH
2712: DOUBLE
2713: LD_INT 1
2715: DEC
2716: ST_TO_ADDR
2717: LD_INT 8
2719: PUSH
2720: FOR_TO
2721: IFFALSE 2779
// if i <> j then
2723: LD_VAR 0 2
2727: PUSH
2728: LD_VAR 0 3
2732: NONEQUAL
2733: IFFALSE 2757
// SetAttitude ( i , j , att_neutral , true ) else
2735: LD_VAR 0 2
2739: PPUSH
2740: LD_VAR 0 3
2744: PPUSH
2745: LD_INT 0
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: CALL_OW 80
2755: GO 2777
// SetAttitude ( i , j , att_friend , true ) ;
2757: LD_VAR 0 2
2761: PPUSH
2762: LD_VAR 0 3
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 1
2772: PPUSH
2773: CALL_OW 80
2777: GO 2720
2779: POP
2780: POP
2781: GO 2704
2783: POP
2784: POP
// end else
2785: GO 2962
// begin if def_shared_vision then
2787: LD_EXP 50
2791: IFFALSE 2856
// begin for i in Teams do
2793: LD_ADDR_VAR 0 2
2797: PUSH
2798: LD_EXP 20
2802: PUSH
2803: FOR_IN
2804: IFFALSE 2854
// for j = 2 to i do
2806: LD_ADDR_VAR 0 3
2810: PUSH
2811: DOUBLE
2812: LD_INT 2
2814: DEC
2815: ST_TO_ADDR
2816: LD_VAR 0 2
2820: PUSH
2821: FOR_TO
2822: IFFALSE 2850
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2824: LD_VAR 0 2
2828: PUSH
2829: LD_VAR 0 3
2833: ARRAY
2834: PPUSH
2835: LD_VAR 0 2
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: CALL_OW 343
2848: GO 2821
2850: POP
2851: POP
2852: GO 2803
2854: POP
2855: POP
// end ; for i = 1 to 8 do
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: DOUBLE
2862: LD_INT 1
2864: DEC
2865: ST_TO_ADDR
2866: LD_INT 8
2868: PUSH
2869: FOR_TO
2870: IFFALSE 2960
// for j = 1 to 8 do
2872: LD_ADDR_VAR 0 3
2876: PUSH
2877: DOUBLE
2878: LD_INT 1
2880: DEC
2881: ST_TO_ADDR
2882: LD_INT 8
2884: PUSH
2885: FOR_TO
2886: IFFALSE 2956
// if Side_Teams [ i ] = Side_Teams [ j ] then
2888: LD_EXP 19
2892: PUSH
2893: LD_VAR 0 2
2897: ARRAY
2898: PUSH
2899: LD_EXP 19
2903: PUSH
2904: LD_VAR 0 3
2908: ARRAY
2909: EQUAL
2910: IFFALSE 2934
// SetAttitude ( i , j , att_friend , true ) else
2912: LD_VAR 0 2
2916: PPUSH
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 1
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: CALL_OW 80
2932: GO 2954
// SetAttitude ( i , j , att_enemy , true ) ;
2934: LD_VAR 0 2
2938: PPUSH
2939: LD_VAR 0 3
2943: PPUSH
2944: LD_INT 2
2946: PPUSH
2947: LD_INT 1
2949: PPUSH
2950: CALL_OW 80
2954: GO 2885
2956: POP
2957: POP
2958: GO 2869
2960: POP
2961: POP
// end ; end ;
2962: LD_VAR 0 1
2966: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2967: LD_INT 0
2969: PPUSH
2970: PPUSH
2971: PPUSH
2972: PPUSH
// result := [ ] ;
2973: LD_ADDR_VAR 0 7
2977: PUSH
2978: EMPTY
2979: ST_TO_ADDR
// for i := 1 to count do
2980: LD_ADDR_VAR 0 8
2984: PUSH
2985: DOUBLE
2986: LD_INT 1
2988: DEC
2989: ST_TO_ADDR
2990: LD_VAR 0 1
2994: PUSH
2995: FOR_TO
2996: IFFALSE 3414
// begin uc_direction := Rand ( 0 , 5 ) ;
2998: LD_ADDR_OWVAR 24
3002: PUSH
3003: LD_INT 0
3005: PPUSH
3006: LD_INT 5
3008: PPUSH
3009: CALL_OW 12
3013: ST_TO_ADDR
// if commander then
3014: LD_LOC 1
3018: IFFALSE 3127
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3020: LD_ADDR_OWVAR 26
3024: PUSH
3025: LD_OWVAR 19
3029: PUSH
3030: LD_OWVAR 20
3034: ARRAY
3035: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3036: LD_INT 1
3038: PPUSH
3039: LD_INT 2
3041: PPUSH
3042: CALL_OW 12
3046: PPUSH
3047: LD_VAR 0 2
3051: PPUSH
3052: LD_EXP 6
3056: PUSH
3057: LD_INT 2
3059: PLUS
3060: PPUSH
3061: CALL_OW 380
// hc_importance := 105 ;
3065: LD_ADDR_OWVAR 32
3069: PUSH
3070: LD_INT 105
3072: ST_TO_ADDR
// commander := false ;
3073: LD_ADDR_LOC 1
3077: PUSH
3078: LD_INT 0
3080: ST_TO_ADDR
// if Multiplayer then
3081: LD_OWVAR 4
3085: IFFALSE 3125
// begin hc_gallery := MULTIAVATARS ;
3087: LD_ADDR_OWVAR 33
3091: PUSH
3092: LD_STRING MULTIAVATARS
3094: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3095: LD_ADDR_OWVAR 34
3099: PUSH
3100: LD_OWVAR 20
3104: PPUSH
3105: CALL_OW 525
3109: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3110: LD_ADDR_OWVAR 27
3114: PUSH
3115: LD_OWVAR 20
3119: PPUSH
3120: CALL_OW 526
3124: ST_TO_ADDR
// end ; end else
3125: GO 3190
// begin hc_name :=  ;
3127: LD_ADDR_OWVAR 26
3131: PUSH
3132: LD_STRING 
3134: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3135: LD_INT 1
3137: PPUSH
3138: LD_INT 2
3140: PPUSH
3141: CALL_OW 12
3145: PPUSH
3146: LD_VAR 0 2
3150: PPUSH
3151: LD_EXP 6
3155: PPUSH
3156: CALL_OW 380
// hc_importance := 0 ;
3160: LD_ADDR_OWVAR 32
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// if Multiplayer then
3168: LD_OWVAR 4
3172: IFFALSE 3190
// begin hc_gallery :=  ;
3174: LD_ADDR_OWVAR 33
3178: PUSH
3179: LD_STRING 
3181: ST_TO_ADDR
// hc_face_number := 0 ;
3182: LD_ADDR_OWVAR 34
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3190: LD_ADDR_VAR 0 10
3194: PUSH
3195: CALL_OW 44
3199: ST_TO_ADDR
// if global_defined then
3200: LD_LOC 3
3204: IFFALSE 3344
// begin if ( cl = class_soldier ) then
3206: LD_VAR 0 2
3210: PUSH
3211: LD_INT 1
3213: EQUAL
3214: IFFALSE 3234
// j := i + soldiers_created else
3216: LD_ADDR_VAR 0 9
3220: PUSH
3221: LD_VAR 0 8
3225: PUSH
3226: LD_LOC 4
3230: PLUS
3231: ST_TO_ADDR
3232: GO 3244
// j := i ;
3234: LD_ADDR_VAR 0 9
3238: PUSH
3239: LD_VAR 0 8
3243: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3244: LD_LOC 2
3248: PUSH
3249: LD_VAR 0 2
3253: ARRAY
3254: PUSH
3255: LD_VAR 0 9
3259: ARRAY
3260: PPUSH
3261: LD_VAR 0 10
3265: PPUSH
3266: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3270: LD_VAR 0 10
3274: PPUSH
3275: LD_INT 2
3277: PPUSH
3278: LD_LOC 2
3282: PUSH
3283: LD_VAR 0 2
3287: ARRAY
3288: PUSH
3289: LD_VAR 0 9
3293: ARRAY
3294: PPUSH
3295: LD_INT 2
3297: PPUSH
3298: CALL_OW 260
3302: PPUSH
3303: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3307: LD_VAR 0 10
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_LOC 2
3319: PUSH
3320: LD_VAR 0 2
3324: ARRAY
3325: PUSH
3326: LD_VAR 0 9
3330: ARRAY
3331: PPUSH
3332: LD_INT 1
3334: PPUSH
3335: CALL_OW 260
3339: PPUSH
3340: CALL_OW 239
// end ; if building then
3344: LD_VAR 0 6
3348: IFFALSE 3366
// PlaceHumanInUnit ( un , building ) else
3350: LD_VAR 0 10
3354: PPUSH
3355: LD_VAR 0 6
3359: PPUSH
3360: CALL_OW 52
3364: GO 3393
// PlaceUnitXYR ( un , x , y , r , false ) ;
3366: LD_VAR 0 10
3370: PPUSH
3371: LD_VAR 0 3
3375: PPUSH
3376: LD_VAR 0 4
3380: PPUSH
3381: LD_VAR 0 5
3385: PPUSH
3386: LD_INT 0
3388: PPUSH
3389: CALL_OW 50
// result := result ^ [ un ] ;
3393: LD_ADDR_VAR 0 7
3397: PUSH
3398: LD_VAR 0 7
3402: PUSH
3403: LD_VAR 0 10
3407: PUSH
3408: EMPTY
3409: LIST
3410: ADD
3411: ST_TO_ADDR
// end ;
3412: GO 2995
3414: POP
3415: POP
// if not global_defined then
3416: LD_LOC 3
3420: NOT
3421: IFFALSE 3499
// if ( global_units >= cl ) then
3423: LD_LOC 2
3427: PUSH
3428: LD_VAR 0 2
3432: GREATEREQUAL
3433: IFFALSE 3474
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3435: LD_ADDR_LOC 2
3439: PUSH
3440: LD_LOC 2
3444: PPUSH
3445: LD_VAR 0 2
3449: PPUSH
3450: LD_LOC 2
3454: PUSH
3455: LD_VAR 0 2
3459: ARRAY
3460: PUSH
3461: LD_VAR 0 7
3465: ADD
3466: PPUSH
3467: CALL_OW 1
3471: ST_TO_ADDR
3472: GO 3499
// global_units := Replace ( global_units , cl , result ) ;
3474: LD_ADDR_LOC 2
3478: PUSH
3479: LD_LOC 2
3483: PPUSH
3484: LD_VAR 0 2
3488: PPUSH
3489: LD_VAR 0 7
3493: PPUSH
3494: CALL_OW 1
3498: ST_TO_ADDR
// end ;
3499: LD_VAR 0 7
3503: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3504: LD_INT 0
3506: PPUSH
3507: PPUSH
3508: PPUSH
3509: PPUSH
3510: PPUSH
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
// if side in [ 0 , 9 ] then
3515: LD_VAR 0 1
3519: PUSH
3520: LD_INT 0
3522: PUSH
3523: LD_INT 9
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: IN
3530: IFFALSE 3534
// exit ;
3532: GO 4551
// pos := Side_Positions [ side ] ;
3534: LD_ADDR_VAR 0 3
3538: PUSH
3539: LD_EXP 21
3543: PUSH
3544: LD_VAR 0 1
3548: ARRAY
3549: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3550: LD_ADDR_OWVAR 21
3554: PUSH
3555: LD_EXP 22
3559: PUSH
3560: LD_VAR 0 1
3564: ARRAY
3565: ST_TO_ADDR
// uc_side := side ;
3566: LD_ADDR_OWVAR 20
3570: PUSH
3571: LD_VAR 0 1
3575: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3576: LD_ADDR_VAR 0 4
3580: PUSH
3581: LD_EXP 25
3585: PUSH
3586: LD_VAR 0 3
3590: ARRAY
3591: PUSH
3592: LD_INT 1
3594: ARRAY
3595: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3596: LD_ADDR_VAR 0 5
3600: PUSH
3601: LD_EXP 25
3605: PUSH
3606: LD_VAR 0 3
3610: ARRAY
3611: PUSH
3612: LD_INT 2
3614: ARRAY
3615: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3616: LD_ADDR_VAR 0 6
3620: PUSH
3621: LD_EXP 25
3625: PUSH
3626: LD_VAR 0 3
3630: ARRAY
3631: PUSH
3632: LD_INT 3
3634: ARRAY
3635: ST_TO_ADDR
// if is_depot then
3636: LD_EXP 3
3640: IFFALSE 3773
// begin bc_type = b_depot ;
3642: LD_ADDR_OWVAR 42
3646: PUSH
3647: LD_INT 0
3649: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3650: LD_ADDR_VAR 0 10
3654: PUSH
3655: LD_VAR 0 4
3659: PPUSH
3660: LD_VAR 0 5
3664: PPUSH
3665: LD_VAR 0 6
3669: PPUSH
3670: CALL_OW 47
3674: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3675: LD_VAR 0 10
3679: PPUSH
3680: LD_STRING @
3682: PUSH
3683: LD_VAR 0 1
3687: STR
3688: PPUSH
3689: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3693: LD_VAR 0 10
3697: PPUSH
3698: CALL_OW 274
3702: PPUSH
3703: LD_INT 1
3705: PPUSH
3706: LD_EXP 8
3710: PUSH
3711: LD_INT 1
3713: ARRAY
3714: PPUSH
3715: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3719: LD_VAR 0 10
3723: PPUSH
3724: CALL_OW 274
3728: PPUSH
3729: LD_INT 2
3731: PPUSH
3732: LD_EXP 8
3736: PUSH
3737: LD_INT 2
3739: ARRAY
3740: PPUSH
3741: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3745: LD_VAR 0 10
3749: PPUSH
3750: CALL_OW 274
3754: PPUSH
3755: LD_INT 3
3757: PPUSH
3758: LD_EXP 8
3762: PUSH
3763: LD_INT 3
3765: ARRAY
3766: PPUSH
3767: CALL_OW 277
// end else
3771: GO 3917
// begin for i := 1 to 3 do
3773: LD_ADDR_VAR 0 7
3777: PUSH
3778: DOUBLE
3779: LD_INT 1
3781: DEC
3782: ST_TO_ADDR
3783: LD_INT 3
3785: PUSH
3786: FOR_TO
3787: IFFALSE 3915
// begin r := starting_resources [ i ] ;
3789: LD_ADDR_VAR 0 8
3793: PUSH
3794: LD_EXP 8
3798: PUSH
3799: LD_VAR 0 7
3803: ARRAY
3804: ST_TO_ADDR
// while r >= 10 do
3805: LD_VAR 0 8
3809: PUSH
3810: LD_INT 10
3812: GREATEREQUAL
3813: IFFALSE 3913
// if r > 50 then
3815: LD_VAR 0 8
3819: PUSH
3820: LD_INT 50
3822: GREATER
3823: IFFALSE 3869
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3825: LD_VAR 0 7
3829: PPUSH
3830: LD_INT 5
3832: PPUSH
3833: LD_VAR 0 4
3837: PPUSH
3838: LD_VAR 0 5
3842: PPUSH
3843: LD_INT 4
3845: PPUSH
3846: LD_INT 0
3848: PPUSH
3849: CALL_OW 60
// r := r - 50 ;
3853: LD_ADDR_VAR 0 8
3857: PUSH
3858: LD_VAR 0 8
3862: PUSH
3863: LD_INT 50
3865: MINUS
3866: ST_TO_ADDR
// end else
3867: GO 3911
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3869: LD_VAR 0 7
3873: PPUSH
3874: LD_VAR 0 8
3878: PUSH
3879: LD_INT 10
3881: DIV
3882: PPUSH
3883: LD_VAR 0 4
3887: PPUSH
3888: LD_VAR 0 5
3892: PPUSH
3893: LD_INT 4
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 60
// r := 0 ;
3903: LD_ADDR_VAR 0 8
3907: PUSH
3908: LD_INT 0
3910: ST_TO_ADDR
// end ;
3911: GO 3805
// end ;
3913: GO 3786
3915: POP
3916: POP
// end ; for r in starting_crates do
3917: LD_ADDR_VAR 0 8
3921: PUSH
3922: LD_EXP 7
3926: PUSH
3927: FOR_IN
3928: IFFALSE 3960
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3930: LD_INT 1
3932: PPUSH
3933: LD_INT 5
3935: PPUSH
3936: LD_VAR 0 4
3940: PPUSH
3941: LD_VAR 0 5
3945: PPUSH
3946: LD_VAR 0 8
3950: PPUSH
3951: LD_INT 0
3953: PPUSH
3954: CALL_OW 60
3958: GO 3927
3960: POP
3961: POP
// if def_morale_flags then
3962: LD_EXP 51
3966: IFFALSE 4105
// begin x := start_def [ pos ] [ 1 ] ;
3968: LD_ADDR_VAR 0 4
3972: PUSH
3973: LD_EXP 27
3977: PUSH
3978: LD_VAR 0 3
3982: ARRAY
3983: PUSH
3984: LD_INT 1
3986: ARRAY
3987: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3988: LD_ADDR_VAR 0 5
3992: PUSH
3993: LD_EXP 27
3997: PUSH
3998: LD_VAR 0 3
4002: ARRAY
4003: PUSH
4004: LD_INT 2
4006: ARRAY
4007: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4008: LD_VAR 0 4
4012: PPUSH
4013: LD_VAR 0 5
4017: PPUSH
4018: LD_INT 12
4020: PPUSH
4021: LD_INT 2
4023: PPUSH
4024: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4028: LD_ADDR_EXP 32
4032: PUSH
4033: LD_EXP 32
4037: PUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: LD_VAR 0 4
4047: PPUSH
4048: LD_VAR 0 5
4052: PPUSH
4053: LD_INT 1
4055: PUSH
4056: LD_INT 100
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PUSH
4063: LD_INT 2
4065: PUSH
4066: LD_INT 50
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: LD_INT 3
4075: PUSH
4076: LD_INT 20
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: PUSH
4083: LD_INT 20
4085: PUSH
4086: LD_INT 100
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 418
4103: ADD
4104: ST_TO_ADDR
// end ; commander := true ;
4105: LD_ADDR_LOC 1
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// soldiers_created := 0 ;
4113: LD_ADDR_LOC 4
4117: PUSH
4118: LD_INT 0
4120: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4121: LD_ADDR_VAR 0 7
4125: PUSH
4126: DOUBLE
4127: LD_INT 1
4129: DEC
4130: ST_TO_ADDR
4131: LD_EXP 4
4135: PUSH
4136: FOR_TO
4137: IFFALSE 4290
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4139: LD_ADDR_VAR 0 4
4143: PUSH
4144: LD_EXP 26
4148: PUSH
4149: LD_VAR 0 3
4153: ARRAY
4154: PUSH
4155: LD_VAR 0 7
4159: ARRAY
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4165: LD_ADDR_VAR 0 5
4169: PUSH
4170: LD_EXP 26
4174: PUSH
4175: LD_VAR 0 3
4179: ARRAY
4180: PUSH
4181: LD_VAR 0 7
4185: ARRAY
4186: PUSH
4187: LD_INT 2
4189: ARRAY
4190: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4191: LD_ADDR_VAR 0 6
4195: PUSH
4196: LD_EXP 26
4200: PUSH
4201: LD_VAR 0 3
4205: ARRAY
4206: PUSH
4207: LD_VAR 0 7
4211: ARRAY
4212: PUSH
4213: LD_INT 3
4215: ARRAY
4216: ST_TO_ADDR
// bc_type := b_breastwork ;
4217: LD_ADDR_OWVAR 42
4221: PUSH
4222: LD_INT 31
4224: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4225: LD_ADDR_VAR 0 9
4229: PUSH
4230: LD_VAR 0 4
4234: PPUSH
4235: LD_VAR 0 5
4239: PPUSH
4240: LD_VAR 0 6
4244: PPUSH
4245: CALL_OW 47
4249: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4250: LD_INT 1
4252: PPUSH
4253: LD_INT 1
4255: PPUSH
4256: LD_INT 0
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: LD_VAR 0 9
4269: PPUSH
4270: CALL 2967 0 6
// soldiers_created := soldiers_created + 1 ;
4274: LD_ADDR_LOC 4
4278: PUSH
4279: LD_LOC 4
4283: PUSH
4284: LD_INT 1
4286: PLUS
4287: ST_TO_ADDR
// end ;
4288: GO 4136
4290: POP
4291: POP
// x := start_def [ pos ] [ 1 ] ;
4292: LD_ADDR_VAR 0 4
4296: PUSH
4297: LD_EXP 27
4301: PUSH
4302: LD_VAR 0 3
4306: ARRAY
4307: PUSH
4308: LD_INT 1
4310: ARRAY
4311: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4312: LD_ADDR_VAR 0 5
4316: PUSH
4317: LD_EXP 27
4321: PUSH
4322: LD_VAR 0 3
4326: ARRAY
4327: PUSH
4328: LD_INT 2
4330: ARRAY
4331: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4332: LD_LOC 8
4336: PUSH
4337: LD_EXP 4
4341: MINUS
4342: PPUSH
4343: LD_INT 1
4345: PPUSH
4346: LD_VAR 0 4
4350: PPUSH
4351: LD_VAR 0 5
4355: PPUSH
4356: LD_INT 5
4358: PPUSH
4359: LD_INT 0
4361: PPUSH
4362: CALL 2967 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4366: LD_LOC 5
4370: PPUSH
4371: LD_INT 2
4373: PPUSH
4374: LD_VAR 0 4
4378: PPUSH
4379: LD_VAR 0 5
4383: PPUSH
4384: LD_INT 5
4386: PPUSH
4387: LD_INT 0
4389: PPUSH
4390: CALL 2967 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4394: LD_LOC 7
4398: PPUSH
4399: LD_INT 3
4401: PPUSH
4402: LD_VAR 0 4
4406: PPUSH
4407: LD_VAR 0 5
4411: PPUSH
4412: LD_INT 5
4414: PPUSH
4415: LD_INT 0
4417: PPUSH
4418: CALL 2967 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4422: LD_LOC 6
4426: PPUSH
4427: LD_INT 4
4429: PPUSH
4430: LD_VAR 0 4
4434: PPUSH
4435: LD_VAR 0 5
4439: PPUSH
4440: LD_INT 5
4442: PPUSH
4443: LD_INT 0
4445: PPUSH
4446: CALL 2967 0 6
// if def_siberite_detection then
4450: LD_EXP 52
4454: IFFALSE 4471
// SetTech ( tech_SibDet , side , state_researched ) ;
4456: LD_INT 20
4458: PPUSH
4459: LD_VAR 0 1
4463: PPUSH
4464: LD_INT 2
4466: PPUSH
4467: CALL_OW 322
// if def_siberite_bomb = 1 then
4471: LD_EXP 55
4475: PUSH
4476: LD_INT 1
4478: EQUAL
4479: IFFALSE 4513
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4481: LD_INT 25
4483: PPUSH
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_INT 1
4491: PPUSH
4492: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4496: LD_INT 73
4498: PPUSH
4499: LD_VAR 0 1
4503: PPUSH
4504: LD_INT 1
4506: PPUSH
4507: CALL_OW 322
// end else
4511: GO 4543
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4513: LD_INT 25
4515: PPUSH
4516: LD_VAR 0 1
4520: PPUSH
4521: LD_INT 0
4523: PPUSH
4524: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4528: LD_INT 73
4530: PPUSH
4531: LD_VAR 0 1
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: CALL_OW 322
// end ; global_defined := true ;
4543: LD_ADDR_LOC 3
4547: PUSH
4548: LD_INT 1
4550: ST_TO_ADDR
// end ;
4551: LD_VAR 0 2
4555: RET
// every 0 0$1 do
4556: GO 4558
4558: DISABLE
// if ( def_siberite_bomb > 1 ) then
4559: LD_EXP 55
4563: PUSH
4564: LD_INT 1
4566: GREATER
4567: IFFALSE 4582
// begin wait ( siberite_bomb_Delay ) ;
4569: LD_EXP 17
4573: PPUSH
4574: CALL_OW 67
// EnableSibFiss ;
4578: CALL 4583 0 0
// end ;
4582: END
// function EnableSibFiss ; var i ; begin
4583: LD_INT 0
4585: PPUSH
4586: PPUSH
// for i := 1 to 8 do
4587: LD_ADDR_VAR 0 2
4591: PUSH
4592: DOUBLE
4593: LD_INT 1
4595: DEC
4596: ST_TO_ADDR
4597: LD_INT 8
4599: PUSH
4600: FOR_TO
4601: IFFALSE 4647
// if Side_Positions [ i ] then
4603: LD_EXP 21
4607: PUSH
4608: LD_VAR 0 2
4612: ARRAY
4613: IFFALSE 4645
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4615: LD_INT 25
4617: PPUSH
4618: LD_VAR 0 2
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4630: LD_INT 73
4632: PPUSH
4633: LD_VAR 0 2
4637: PPUSH
4638: LD_INT 1
4640: PPUSH
4641: CALL_OW 322
// end ;
4645: GO 4600
4647: POP
4648: POP
// end ;
4649: LD_VAR 0 1
4653: RET
// function prepare_sides ; var i ; begin
4654: LD_INT 0
4656: PPUSH
4657: PPUSH
// global_units := [ ] ;
4658: LD_ADDR_LOC 2
4662: PUSH
4663: EMPTY
4664: ST_TO_ADDR
// global_defined := false ;
4665: LD_ADDR_LOC 3
4669: PUSH
4670: LD_INT 0
4672: ST_TO_ADDR
// CountClassMembers ;
4673: CALL 4723 0 0
// for i := 1 to 8 do
4677: LD_ADDR_VAR 0 2
4681: PUSH
4682: DOUBLE
4683: LD_INT 1
4685: DEC
4686: ST_TO_ADDR
4687: LD_INT 8
4689: PUSH
4690: FOR_TO
4691: IFFALSE 4716
// if Side_Positions [ i ] then
4693: LD_EXP 21
4697: PUSH
4698: LD_VAR 0 2
4702: ARRAY
4703: IFFALSE 4714
// prepare_side ( i ) ;
4705: LD_VAR 0 2
4709: PPUSH
4710: CALL 3504 0 1
4714: GO 4690
4716: POP
4717: POP
// end ;
4718: LD_VAR 0 1
4722: RET
// function CountClassMembers ; var Mode ; begin
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
// if No_Mechs then
4727: LD_EXP 57
4731: IFFALSE 4743
// Mode := 2 else
4733: LD_ADDR_VAR 0 2
4737: PUSH
4738: LD_INT 2
4740: ST_TO_ADDR
4741: GO 4751
// Mode := 1 ;
4743: LD_ADDR_VAR 0 2
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// neng := number_of_people ;
4751: LD_ADDR_LOC 5
4755: PUSH
4756: LD_EXP 5
4760: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4761: LD_ADDR_LOC 8
4765: PUSH
4766: LD_LOC 5
4770: PUSH
4771: LD_INT 4
4773: PUSH
4774: LD_INT 3
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PUSH
4781: LD_VAR 0 2
4785: ARRAY
4786: DIV
4787: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4788: LD_LOC 8
4792: PUSH
4793: LD_EXP 4
4797: LESS
4798: IFFALSE 4810
// nsol := number_of_breastworks ;
4800: LD_ADDR_LOC 8
4804: PUSH
4805: LD_EXP 4
4809: ST_TO_ADDR
// neng := neng - nsol ;
4810: LD_ADDR_LOC 5
4814: PUSH
4815: LD_LOC 5
4819: PUSH
4820: LD_LOC 8
4824: MINUS
4825: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4826: LD_ADDR_LOC 6
4830: PUSH
4831: LD_LOC 5
4835: PUSH
4836: LD_INT 3
4838: PUSH
4839: LD_INT 2
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_VAR 0 2
4850: ARRAY
4851: DIV
4852: ST_TO_ADDR
// if ( nsci < 1 ) then
4853: LD_LOC 6
4857: PUSH
4858: LD_INT 1
4860: LESS
4861: IFFALSE 4871
// nsci := 1 ;
4863: LD_ADDR_LOC 6
4867: PUSH
4868: LD_INT 1
4870: ST_TO_ADDR
// neng := neng - nsci ;
4871: LD_ADDR_LOC 5
4875: PUSH
4876: LD_LOC 5
4880: PUSH
4881: LD_LOC 6
4885: MINUS
4886: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4887: LD_ADDR_LOC 7
4891: PUSH
4892: LD_LOC 5
4896: PUSH
4897: LD_INT 2
4899: DIV
4900: PUSH
4901: LD_INT 0
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_VAR 0 2
4912: ARRAY
4913: ST_TO_ADDR
// neng := neng - nmech ;
4914: LD_ADDR_LOC 5
4918: PUSH
4919: LD_LOC 5
4923: PUSH
4924: LD_LOC 7
4928: MINUS
4929: ST_TO_ADDR
// if ( neng < 1 ) then
4930: LD_LOC 5
4934: PUSH
4935: LD_INT 1
4937: LESS
4938: IFFALSE 4948
// neng := 1 ;
4940: LD_ADDR_LOC 5
4944: PUSH
4945: LD_INT 1
4947: ST_TO_ADDR
// end ;
4948: LD_VAR 0 1
4952: RET
// function Init_Win_Condition ; begin
4953: LD_INT 0
4955: PPUSH
// if Team_Game then
4956: LD_EXP 23
4960: IFFALSE 4967
// enable ( 98 ) else
4962: LD_INT 98
4964: ENABLE_MARKED
4965: GO 4970
// enable ( 99 ) ;
4967: LD_INT 99
4969: ENABLE_MARKED
// case Game_Type of 3 :
4970: LD_EXP 41
4974: PUSH
4975: LD_INT 3
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 4983
4981: GO 4989
4983: POP
// enable ( 100 ) ; end ;
4984: LD_INT 100
4986: ENABLE_MARKED
4987: GO 4990
4989: POP
// end ;
4990: LD_VAR 0 1
4994: RET
// starting begin disable ( 98 ) ;
4995: LD_INT 98
4997: DISABLE_MARKED
// disable ( 99 ) ;
4998: LD_INT 99
5000: DISABLE_MARKED
// disable ( 400 ) ;
5001: LD_INT 400
5003: DISABLE_MARKED
// disable ( 401 ) ;
5004: LD_INT 401
5006: DISABLE_MARKED
// disable ( 600 ) ;
5007: LD_INT 600
5009: DISABLE_MARKED
// mp_selectmsg := true ;
5010: LD_ADDR_OWVAR 13
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5018: CALL 0 0 0
// init_map ;
5022: CALL 1508 0 0
// init_respawning ;
5026: CALL 6773 0 0
// set_shared_visions_and_alliances ;
5030: CALL 2679 0 0
// prepare_sides ;
5034: CALL 4654 0 0
// InitLimits ;
5038: CALL 11652 0 0
// ShowTimer ;
5042: CALL 12589 0 0
// music_nat := Side_Nations [ your_side ] ;
5046: LD_ADDR_OWVAR 71
5050: PUSH
5051: LD_EXP 22
5055: PUSH
5056: LD_OWVAR 2
5060: ARRAY
5061: ST_TO_ADDR
// if IAmSpec then
5062: CALL_OW 531
5066: IFFALSE 5102
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5068: LD_INT 0
5070: PPUSH
5071: LD_INT 0
5073: PPUSH
5074: LD_OWVAR 2
5078: PPUSH
5079: LD_INT 32767
5081: NEG
5082: PPUSH
5083: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5087: LD_INT 104
5089: PPUSH
5090: LD_INT 69
5092: PPUSH
5093: CALL_OW 86
// enable ( 400 ) ;
5097: LD_INT 400
5099: ENABLE_MARKED
// end else
5100: GO 5156
// begin ResetFog ;
5102: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5106: LD_EXP 27
5110: PUSH
5111: LD_EXP 21
5115: PUSH
5116: LD_OWVAR 2
5120: ARRAY
5121: ARRAY
5122: PUSH
5123: LD_INT 1
5125: ARRAY
5126: PPUSH
5127: LD_EXP 27
5131: PUSH
5132: LD_EXP 21
5136: PUSH
5137: LD_OWVAR 2
5141: ARRAY
5142: ARRAY
5143: PUSH
5144: LD_INT 2
5146: ARRAY
5147: PPUSH
5148: CALL_OW 86
// Init_Win_Condition ;
5152: CALL 4953 0 0
// end ; InitApeman ;
5156: CALL 5940 0 0
// if def_builduptime then
5160: LD_EXP 56
5164: IFFALSE 5170
// BeginBuildUp ;
5166: CALL 8819 0 0
// end ;
5170: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 and spect = 0 do
5171: LD_INT 22
5173: PUSH
5174: LD_OWVAR 2
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PUSH
5183: LD_INT 2
5185: PUSH
5186: LD_INT 21
5188: PUSH
5189: LD_INT 1
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 33
5198: PUSH
5199: LD_INT 3
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 33
5208: PUSH
5209: LD_INT 5
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 30
5218: PUSH
5219: LD_INT 0
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: LD_INT 30
5228: PUSH
5229: LD_INT 1
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 69
5252: PUSH
5253: LD_INT 0
5255: EQUAL
5256: PUSH
5257: LD_EXP 15
5261: PUSH
5262: LD_INT 0
5264: EQUAL
5265: AND
5266: IFFALSE 5280
5268: GO 5270
5270: DISABLE
// begin fogoff ( your_side ) ;
5271: LD_OWVAR 2
5275: PPUSH
5276: CALL_OW 344
// end ; end_of_file
5280: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5281: GO 5283
5283: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5284: LD_INT 4
5286: PPUSH
5287: LD_INT 5
5289: PPUSH
5290: CALL_OW 12
5294: PPUSH
5295: LD_INT 1
5297: PPUSH
5298: CALL_OW 57
// enable ;
5302: ENABLE
// end ;
5303: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5304: GO 5306
5306: DISABLE
5307: LD_INT 0
5309: PPUSH
5310: PPUSH
// begin case tick of 1 .. 1 1$0 :
5311: LD_OWVAR 1
5315: PUSH
5316: LD_INT 1
5318: DOUBLE
5319: GREATEREQUAL
5320: IFFALSE 5328
5322: LD_INT 2100
5324: DOUBLE
5325: LESSEQUAL
5326: IFTRUE 5330
5328: GO 5358
5330: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5331: LD_EXP 9
5335: PUSH
5336: LD_INT 100
5338: DIVREAL
5339: PUSH
5340: LD_INT 350
5342: PPUSH
5343: LD_INT 1050
5345: PPUSH
5346: CALL_OW 12
5350: MUL
5351: PPUSH
5352: CALL_OW 67
5356: GO 5660
5358: LD_INT 2100
5360: PUSH
5361: LD_INT 1
5363: PLUS
5364: DOUBLE
5365: GREATEREQUAL
5366: IFFALSE 5374
5368: LD_INT 10500
5370: DOUBLE
5371: LESSEQUAL
5372: IFTRUE 5376
5374: GO 5404
5376: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5377: LD_EXP 9
5381: PUSH
5382: LD_INT 100
5384: DIVREAL
5385: PUSH
5386: LD_INT 1050
5388: PPUSH
5389: LD_INT 1575
5391: PPUSH
5392: CALL_OW 12
5396: MUL
5397: PPUSH
5398: CALL_OW 67
5402: GO 5660
5404: LD_INT 10500
5406: PUSH
5407: LD_INT 1
5409: PLUS
5410: DOUBLE
5411: GREATEREQUAL
5412: IFFALSE 5420
5414: LD_INT 21000
5416: DOUBLE
5417: LESSEQUAL
5418: IFTRUE 5422
5420: GO 5450
5422: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5423: LD_EXP 9
5427: PUSH
5428: LD_INT 100
5430: DIVREAL
5431: PUSH
5432: LD_INT 1575
5434: PPUSH
5435: LD_INT 2100
5437: PPUSH
5438: CALL_OW 12
5442: MUL
5443: PPUSH
5444: CALL_OW 67
5448: GO 5660
5450: LD_INT 21000
5452: PUSH
5453: LD_INT 1
5455: PLUS
5456: DOUBLE
5457: GREATEREQUAL
5458: IFFALSE 5466
5460: LD_INT 42000
5462: DOUBLE
5463: LESSEQUAL
5464: IFTRUE 5468
5466: GO 5496
5468: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5469: LD_EXP 9
5473: PUSH
5474: LD_INT 100
5476: DIVREAL
5477: PUSH
5478: LD_INT 2100
5480: PPUSH
5481: LD_INT 2625
5483: PPUSH
5484: CALL_OW 12
5488: MUL
5489: PPUSH
5490: CALL_OW 67
5494: GO 5660
5496: LD_INT 42000
5498: PUSH
5499: LD_INT 1
5501: PLUS
5502: DOUBLE
5503: GREATEREQUAL
5504: IFFALSE 5512
5506: LD_INT 63000
5508: DOUBLE
5509: LESSEQUAL
5510: IFTRUE 5514
5512: GO 5542
5514: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5515: LD_EXP 9
5519: PUSH
5520: LD_INT 100
5522: DIVREAL
5523: PUSH
5524: LD_INT 2625
5526: PPUSH
5527: LD_INT 3150
5529: PPUSH
5530: CALL_OW 12
5534: MUL
5535: PPUSH
5536: CALL_OW 67
5540: GO 5660
5542: LD_INT 63000
5544: PUSH
5545: LD_INT 1
5547: PLUS
5548: DOUBLE
5549: GREATEREQUAL
5550: IFFALSE 5558
5552: LD_INT 105000
5554: DOUBLE
5555: LESSEQUAL
5556: IFTRUE 5560
5558: GO 5588
5560: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5561: LD_EXP 9
5565: PUSH
5566: LD_INT 100
5568: DIVREAL
5569: PUSH
5570: LD_INT 3150
5572: PPUSH
5573: LD_INT 3675
5575: PPUSH
5576: CALL_OW 12
5580: MUL
5581: PPUSH
5582: CALL_OW 67
5586: GO 5660
5588: LD_INT 105000
5590: PUSH
5591: LD_INT 1
5593: PLUS
5594: DOUBLE
5595: GREATEREQUAL
5596: IFFALSE 5604
5598: LD_INT 630000
5600: DOUBLE
5601: LESSEQUAL
5602: IFTRUE 5606
5604: GO 5634
5606: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5607: LD_EXP 9
5611: PUSH
5612: LD_INT 100
5614: DIVREAL
5615: PUSH
5616: LD_INT 3675
5618: PPUSH
5619: LD_INT 4200
5621: PPUSH
5622: CALL_OW 12
5626: MUL
5627: PPUSH
5628: CALL_OW 67
5632: GO 5660
5634: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5635: LD_EXP 9
5639: PUSH
5640: LD_INT 100
5642: DIVREAL
5643: PUSH
5644: LD_INT 4200
5646: PPUSH
5647: LD_INT 5250
5649: PPUSH
5650: CALL_OW 12
5654: MUL
5655: PPUSH
5656: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5660: LD_ADDR_VAR 0 2
5664: PUSH
5665: LD_INT 3
5667: PPUSH
5668: LD_INT 5
5670: PPUSH
5671: CALL_OW 12
5675: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5676: LD_ADDR_VAR 0 1
5680: PUSH
5681: LD_EXP 21
5685: PUSH
5686: LD_INT 0
5688: PUSH
5689: EMPTY
5690: LIST
5691: DIFF
5692: PUSH
5693: FOR_IN
5694: IFFALSE 5743
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5696: LD_VAR 0 2
5700: PPUSH
5701: LD_EXP 27
5705: PUSH
5706: LD_VAR 0 1
5710: ARRAY
5711: PUSH
5712: LD_INT 1
5714: ARRAY
5715: PPUSH
5716: LD_EXP 27
5720: PUSH
5721: LD_VAR 0 1
5725: ARRAY
5726: PUSH
5727: LD_INT 2
5729: ARRAY
5730: PPUSH
5731: LD_INT 20
5733: PPUSH
5734: LD_INT 1
5736: PPUSH
5737: CALL_OW 56
5741: GO 5693
5743: POP
5744: POP
// enable ;
5745: ENABLE
// end ; end_of_file
5746: PPOPN 2
5748: END
// every 20 20$00 trigger apemanNumber do
5749: LD_EXP 33
5753: IFFALSE 5786
5755: GO 5757
5757: DISABLE
// begin enable ;
5758: ENABLE
// if apeLevel >= 8 then
5759: LD_EXP 38
5763: PUSH
5764: LD_INT 8
5766: GREATEREQUAL
5767: IFFALSE 5772
// disable else
5769: DISABLE
5770: GO 5786
// apeLevel := apeLevel + 1 ;
5772: LD_ADDR_EXP 38
5776: PUSH
5777: LD_EXP 38
5781: PUSH
5782: LD_INT 1
5784: PLUS
5785: ST_TO_ADDR
// end ;
5786: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5787: LD_EXP 33
5791: PUSH
5792: LD_EXP 34
5796: LESS
5797: IFFALSE 5937
5799: GO 5801
5801: DISABLE
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
5807: PPUSH
// begin enable ;
5808: ENABLE
// for i := 1 to apemanPos do
5809: LD_ADDR_VAR 0 1
5813: PUSH
5814: DOUBLE
5815: LD_INT 1
5817: DEC
5818: ST_TO_ADDR
5819: LD_EXP 36
5823: PUSH
5824: FOR_TO
5825: IFFALSE 5935
// begin if apemanPlayerCount [ i ] then
5827: LD_EXP 37
5831: PUSH
5832: LD_VAR 0 1
5836: ARRAY
5837: IFFALSE 5933
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5839: LD_EXP 37
5843: PUSH
5844: LD_VAR 0 1
5848: ARRAY
5849: PUSH
5850: LD_EXP 36
5854: PUSH
5855: LD_VAR 0 1
5859: ARRAY
5860: GREATER
5861: IFFALSE 5933
// begin ape := PrepareApeman ;
5863: LD_ADDR_VAR 0 2
5867: PUSH
5868: CALL 6448 0 0
5872: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5873: LD_VAR 0 2
5877: PPUSH
5878: LD_EXP 39
5882: PUSH
5883: LD_VAR 0 1
5887: ARRAY
5888: PPUSH
5889: LD_INT 0
5891: PPUSH
5892: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5896: LD_ADDR_EXP 36
5900: PUSH
5901: LD_EXP 36
5905: PPUSH
5906: LD_VAR 0 1
5910: PPUSH
5911: LD_EXP 36
5915: PUSH
5916: LD_VAR 0 1
5920: ARRAY
5921: PUSH
5922: LD_VAR 0 2
5926: UNION
5927: PPUSH
5928: CALL_OW 1
5932: ST_TO_ADDR
// end ; end ; end ;
5933: GO 5824
5935: POP
5936: POP
// end ;
5937: PPOPN 4
5939: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5940: LD_INT 0
5942: PPUSH
5943: PPUSH
5944: PPUSH
5945: PPUSH
5946: PPUSH
5947: PPUSH
5948: PPUSH
// playersAmount := 0 ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: LD_INT 0
5956: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5957: LD_ADDR_VAR 0 7
5961: PUSH
5962: LD_INT 3
5964: PUSH
5965: LD_INT 2
5967: PUSH
5968: LD_INT 1
5970: PUSH
5971: LD_INT 4
5973: PUSH
5974: LD_INT 6
5976: PUSH
5977: LD_INT 5
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5988: LD_ADDR_EXP 39
5992: PUSH
5993: LD_INT 0
5995: PUSH
5996: LD_INT 0
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: LD_INT 0
6007: PUSH
6008: LD_INT 0
6010: PUSH
6011: LD_INT 0
6013: PUSH
6014: LD_INT 0
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: ST_TO_ADDR
// for j = 1 to Side_Positions do
6027: LD_ADDR_VAR 0 4
6031: PUSH
6032: DOUBLE
6033: LD_INT 1
6035: DEC
6036: ST_TO_ADDR
6037: LD_EXP 21
6041: PUSH
6042: FOR_TO
6043: IFFALSE 6110
// if Side_Positions [ j ] then
6045: LD_EXP 21
6049: PUSH
6050: LD_VAR 0 4
6054: ARRAY
6055: IFFALSE 6108
// begin playersAmount := playersAmount + 1 ;
6057: LD_ADDR_VAR 0 3
6061: PUSH
6062: LD_VAR 0 3
6066: PUSH
6067: LD_INT 1
6069: PLUS
6070: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6071: LD_ADDR_EXP 39
6075: PUSH
6076: LD_EXP 39
6080: PPUSH
6081: LD_VAR 0 4
6085: PPUSH
6086: LD_VAR 0 7
6090: PUSH
6091: LD_EXP 21
6095: PUSH
6096: LD_VAR 0 4
6100: ARRAY
6101: ARRAY
6102: PPUSH
6103: CALL_OW 1
6107: ST_TO_ADDR
// end ;
6108: GO 6042
6110: POP
6111: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6112: LD_ADDR_EXP 35
6116: PUSH
6117: LD_INT 3
6119: PUSH
6120: LD_EXP 11
6124: MUL
6125: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6126: LD_ADDR_EXP 33
6130: PUSH
6131: LD_VAR 0 3
6135: PUSH
6136: LD_EXP 35
6140: MUL
6141: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6142: LD_ADDR_EXP 34
6146: PUSH
6147: LD_EXP 33
6151: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6152: LD_ADDR_EXP 36
6156: PUSH
6157: LD_INT 0
6159: PUSH
6160: LD_INT 0
6162: PUSH
6163: LD_INT 0
6165: PUSH
6166: LD_INT 0
6168: PUSH
6169: LD_INT 0
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6191: LD_ADDR_EXP 37
6195: PUSH
6196: LD_INT 0
6198: PUSH
6199: LD_INT 0
6201: PUSH
6202: LD_INT 0
6204: PUSH
6205: LD_INT 0
6207: PUSH
6208: LD_INT 0
6210: PUSH
6211: LD_INT 0
6213: PUSH
6214: LD_INT 0
6216: PUSH
6217: LD_INT 0
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: ST_TO_ADDR
// apeLevel := 1 ;
6230: LD_ADDR_EXP 38
6234: PUSH
6235: LD_INT 1
6237: ST_TO_ADDR
// if not apemanNumber then
6238: LD_EXP 33
6242: NOT
6243: IFFALSE 6247
// exit ;
6245: GO 6443
// for i := 1 to apemanPerPlayer do
6247: LD_ADDR_VAR 0 2
6251: PUSH
6252: DOUBLE
6253: LD_INT 1
6255: DEC
6256: ST_TO_ADDR
6257: LD_EXP 35
6261: PUSH
6262: FOR_TO
6263: IFFALSE 6441
// begin for j := 1 to Side_Positions do
6265: LD_ADDR_VAR 0 4
6269: PUSH
6270: DOUBLE
6271: LD_INT 1
6273: DEC
6274: ST_TO_ADDR
6275: LD_EXP 21
6279: PUSH
6280: FOR_TO
6281: IFFALSE 6437
// if Side_Positions [ j ] then
6283: LD_EXP 21
6287: PUSH
6288: LD_VAR 0 4
6292: ARRAY
6293: IFFALSE 6435
// begin pos := Side_Positions [ j ] ;
6295: LD_ADDR_VAR 0 6
6299: PUSH
6300: LD_EXP 21
6304: PUSH
6305: LD_VAR 0 4
6309: ARRAY
6310: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6311: LD_ADDR_EXP 37
6315: PUSH
6316: LD_EXP 37
6320: PPUSH
6321: LD_VAR 0 4
6325: PPUSH
6326: LD_EXP 37
6330: PUSH
6331: LD_VAR 0 4
6335: ARRAY
6336: PUSH
6337: LD_INT 1
6339: PLUS
6340: PPUSH
6341: CALL_OW 1
6345: ST_TO_ADDR
// ape := PrepareApeman ;
6346: LD_ADDR_VAR 0 5
6350: PUSH
6351: CALL 6448 0 0
6355: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6356: LD_ADDR_EXP 36
6360: PUSH
6361: LD_EXP 36
6365: PPUSH
6366: LD_VAR 0 4
6370: PPUSH
6371: LD_EXP 36
6375: PUSH
6376: LD_VAR 0 4
6380: ARRAY
6381: PPUSH
6382: LD_EXP 36
6386: PUSH
6387: LD_VAR 0 4
6391: ARRAY
6392: PUSH
6393: LD_INT 1
6395: PLUS
6396: PPUSH
6397: LD_VAR 0 5
6401: PPUSH
6402: CALL_OW 1
6406: PPUSH
6407: CALL_OW 1
6411: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6412: LD_VAR 0 5
6416: PPUSH
6417: LD_EXP 39
6421: PUSH
6422: LD_VAR 0 4
6426: ARRAY
6427: PPUSH
6428: LD_INT 0
6430: PPUSH
6431: CALL_OW 49
// end ;
6435: GO 6280
6437: POP
6438: POP
// end ;
6439: GO 6262
6441: POP
6442: POP
// end ;
6443: LD_VAR 0 1
6447: RET
// export function PrepareApeman ; var bonus ; begin
6448: LD_INT 0
6450: PPUSH
6451: PPUSH
// uc_side := 0 ;
6452: LD_ADDR_OWVAR 20
6456: PUSH
6457: LD_INT 0
6459: ST_TO_ADDR
// uc_nation := 0 ;
6460: LD_ADDR_OWVAR 21
6464: PUSH
6465: LD_INT 0
6467: ST_TO_ADDR
// InitHc ;
6468: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6472: LD_ADDR_VAR 0 2
6476: PUSH
6477: LD_INT 1
6479: NEG
6480: PUSH
6481: LD_INT 0
6483: PUSH
6484: LD_INT 1
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: LD_OWVAR 1
6496: PUSH
6497: LD_INT 3
6499: MOD
6500: PUSH
6501: LD_INT 1
6503: PLUS
6504: ARRAY
6505: ST_TO_ADDR
// hc_class := class_apeman ;
6506: LD_ADDR_OWVAR 28
6510: PUSH
6511: LD_INT 12
6513: ST_TO_ADDR
// hc_gallery :=  ;
6514: LD_ADDR_OWVAR 33
6518: PUSH
6519: LD_STRING 
6521: ST_TO_ADDR
// hc_name :=  ;
6522: LD_ADDR_OWVAR 26
6526: PUSH
6527: LD_STRING 
6529: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6530: LD_ADDR_OWVAR 31
6534: PUSH
6535: LD_EXP 38
6539: PUSH
6540: LD_VAR 0 2
6544: PLUS
6545: PUSH
6546: LD_EXP 38
6550: PUSH
6551: LD_VAR 0 2
6555: PLUS
6556: PUSH
6557: LD_EXP 38
6561: PUSH
6562: LD_VAR 0 2
6566: PLUS
6567: PUSH
6568: LD_EXP 38
6572: PUSH
6573: LD_VAR 0 2
6577: PLUS
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6585: LD_ADDR_OWVAR 35
6589: PUSH
6590: LD_INT 10
6592: PUSH
6593: LD_VAR 0 2
6597: MUL
6598: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6599: LD_ADDR_OWVAR 29
6603: PUSH
6604: LD_INT 12
6606: PUSH
6607: LD_INT 10
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: ST_TO_ADDR
// result := CreateHuman ;
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: CALL_OW 44
6623: ST_TO_ADDR
// end ;
6624: LD_VAR 0 1
6628: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6629: LD_INT 0
6631: PPUSH
6632: PPUSH
6633: PPUSH
// if not ape then
6634: LD_VAR 0 1
6638: NOT
6639: IFFALSE 6643
// exit ;
6641: GO 6768
// side := GetSide ( ape ) ;
6643: LD_ADDR_VAR 0 3
6647: PUSH
6648: LD_VAR 0 1
6652: PPUSH
6653: CALL_OW 255
6657: ST_TO_ADDR
// if not side then
6658: LD_VAR 0 3
6662: NOT
6663: IFFALSE 6717
// begin for i = 1 to apemanPos do
6665: LD_ADDR_VAR 0 4
6669: PUSH
6670: DOUBLE
6671: LD_INT 1
6673: DEC
6674: ST_TO_ADDR
6675: LD_EXP 36
6679: PUSH
6680: FOR_TO
6681: IFFALSE 6715
// if ape in apemanPos [ i ] then
6683: LD_VAR 0 1
6687: PUSH
6688: LD_EXP 36
6692: PUSH
6693: LD_VAR 0 4
6697: ARRAY
6698: IN
6699: IFFALSE 6713
// begin side := i ;
6701: LD_ADDR_VAR 0 3
6705: PUSH
6706: LD_VAR 0 4
6710: ST_TO_ADDR
// break ;
6711: GO 6715
// end ;
6713: GO 6680
6715: POP
6716: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6717: LD_ADDR_EXP 36
6721: PUSH
6722: LD_EXP 36
6726: PPUSH
6727: LD_VAR 0 3
6731: PPUSH
6732: LD_EXP 36
6736: PUSH
6737: LD_VAR 0 3
6741: ARRAY
6742: PUSH
6743: LD_VAR 0 1
6747: DIFF
6748: PPUSH
6749: CALL_OW 1
6753: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6754: LD_ADDR_EXP 33
6758: PUSH
6759: LD_EXP 33
6763: PUSH
6764: LD_INT 1
6766: MINUS
6767: ST_TO_ADDR
// end ; end_of_file
6768: LD_VAR 0 2
6772: RET
// var respawn , inqueue ; export function init_respawning ; begin
6773: LD_INT 0
6775: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6776: LD_ADDR_LOC 9
6780: PUSH
6781: LD_INT 1
6783: PPUSH
6784: LD_INT 8
6786: PPUSH
6787: CALL_OW 12
6791: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6792: LD_ADDR_LOC 10
6796: PUSH
6797: LD_INT 0
6799: PUSH
6800: LD_INT 0
6802: PUSH
6803: LD_INT 0
6805: PUSH
6806: LD_INT 0
6808: PUSH
6809: LD_INT 0
6811: PUSH
6812: LD_INT 0
6814: PUSH
6815: LD_INT 0
6817: PUSH
6818: LD_INT 0
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: ST_TO_ADDR
// end ;
6831: LD_VAR 0 1
6835: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6836: GO 6838
6838: DISABLE
6839: LD_INT 0
6841: PPUSH
6842: PPUSH
6843: PPUSH
// begin if respawning_time_max = 0 then
6844: LD_EXP 14
6848: PUSH
6849: LD_INT 0
6851: EQUAL
6852: IFFALSE 6856
// exit ;
6854: GO 7265
// if respawn = 8 then
6856: LD_LOC 9
6860: PUSH
6861: LD_INT 8
6863: EQUAL
6864: IFFALSE 6876
// respawn := 1 else
6866: LD_ADDR_LOC 9
6870: PUSH
6871: LD_INT 1
6873: ST_TO_ADDR
6874: GO 6890
// respawn := respawn + 1 ;
6876: LD_ADDR_LOC 9
6880: PUSH
6881: LD_LOC 9
6885: PUSH
6886: LD_INT 1
6888: PLUS
6889: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6890: LD_EXP 21
6894: PUSH
6895: LD_LOC 9
6899: ARRAY
6900: PUSH
6901: LD_LOC 10
6905: PUSH
6906: LD_LOC 9
6910: ARRAY
6911: NOT
6912: AND
6913: IFFALSE 7264
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6915: LD_ADDR_VAR 0 1
6919: PUSH
6920: LD_INT 21
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 22
6932: PUSH
6933: LD_LOC 9
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 3
6944: PUSH
6945: LD_INT 23
6947: PUSH
6948: LD_INT 0
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: PPUSH
6961: CALL_OW 69
6965: ST_TO_ADDR
// if n < number_of_people then
6966: LD_VAR 0 1
6970: PUSH
6971: LD_EXP 5
6975: LESS
6976: IFFALSE 7261
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6978: LD_ADDR_VAR 0 2
6982: PUSH
6983: LD_INT 21
6985: PUSH
6986: LD_INT 3
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 2
6995: PUSH
6996: LD_INT 30
6998: PUSH
6999: LD_INT 0
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 30
7008: PUSH
7009: LD_INT 1
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: PUSH
7021: LD_INT 50
7023: PUSH
7024: EMPTY
7025: LIST
7026: PUSH
7027: LD_INT 22
7029: PUSH
7030: LD_LOC 9
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: PPUSH
7045: CALL_OW 69
7049: ST_TO_ADDR
// if dep > 0 then
7050: LD_VAR 0 2
7054: PUSH
7055: LD_INT 0
7057: GREATER
7058: IFFALSE 7258
// begin aktresp := respawn ;
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: LD_LOC 9
7069: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7070: LD_ADDR_LOC 10
7074: PUSH
7075: LD_LOC 10
7079: PPUSH
7080: LD_VAR 0 3
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: CALL_OW 1
7092: ST_TO_ADDR
// enable ;
7093: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7094: LD_EXP 13
7098: PPUSH
7099: LD_EXP 14
7103: PPUSH
7104: CALL_OW 12
7108: PPUSH
7109: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7113: LD_ADDR_LOC 10
7117: PUSH
7118: LD_LOC 10
7122: PPUSH
7123: LD_VAR 0 3
7127: PPUSH
7128: LD_INT 0
7130: PPUSH
7131: CALL_OW 1
7135: ST_TO_ADDR
// hc_name :=  ;
7136: LD_ADDR_OWVAR 26
7140: PUSH
7141: LD_STRING 
7143: ST_TO_ADDR
// hc_importance := 0 ;
7144: LD_ADDR_OWVAR 32
7148: PUSH
7149: LD_INT 0
7151: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7152: LD_INT 0
7154: PPUSH
7155: LD_INT 0
7157: PPUSH
7158: LD_EXP 6
7162: PUSH
7163: LD_INT 2
7165: DIV
7166: PPUSH
7167: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7171: LD_ADDR_OWVAR 21
7175: PUSH
7176: LD_EXP 22
7180: PUSH
7181: LD_VAR 0 3
7185: ARRAY
7186: ST_TO_ADDR
// uc_side := aktresp ;
7187: LD_ADDR_OWVAR 20
7191: PUSH
7192: LD_VAR 0 3
7196: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
7197: LD_ADDR_VAR 0 2
7201: PUSH
7202: LD_VAR 0 2
7206: PUSH
7207: LD_INT 1
7209: PPUSH
7210: LD_VAR 0 2
7214: PPUSH
7215: CALL_OW 12
7219: ARRAY
7220: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
7221: CALL_OW 44
7225: PPUSH
7226: LD_VAR 0 2
7230: PPUSH
7231: CALL_OW 250
7235: PPUSH
7236: LD_VAR 0 2
7240: PPUSH
7241: CALL_OW 251
7245: PPUSH
7246: LD_INT 7
7248: PPUSH
7249: LD_INT 1
7251: PPUSH
7252: CALL_OW 50
// end else
7256: GO 7259
// enable ;
7258: ENABLE
// end else
7259: GO 7262
// enable ;
7261: ENABLE
// end else
7262: GO 7265
// enable ;
7264: ENABLE
// end ; end_of_file
7265: PPOPN 3
7267: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7268: LD_VAR 0 1
7272: PPUSH
7273: CALL_OW 266
7277: PUSH
7278: LD_INT 0
7280: PUSH
7281: LD_INT 1
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: IN
7288: IFFALSE 7313
// SetBName ( b , @ & GetSide ( b ) ) ;
7290: LD_VAR 0 1
7294: PPUSH
7295: LD_STRING @
7297: PUSH
7298: LD_VAR 0 1
7302: PPUSH
7303: CALL_OW 255
7307: STR
7308: PPUSH
7309: CALL_OW 500
// if def_game_rules then
7313: LD_EXP 42
7317: IFFALSE 7354
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7319: LD_VAR 0 1
7323: PPUSH
7324: LD_VAR 0 1
7328: PPUSH
7329: CALL_OW 266
7333: PPUSH
7334: LD_VAR 0 1
7338: PPUSH
7339: CALL_OW 255
7343: PPUSH
7344: LD_INT 0
7346: PPUSH
7347: LD_INT 1
7349: PPUSH
7350: CALL 12053 0 5
// end ;
7354: PPOPN 2
7356: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7357: LD_VAR 0 1
7361: PPUSH
7362: CALL_OW 266
7366: PUSH
7367: LD_INT 0
7369: PUSH
7370: LD_INT 1
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: IN
7377: IFFALSE 7402
// SetBName ( b , @ & GetSide ( b ) ) ;
7379: LD_VAR 0 1
7383: PPUSH
7384: LD_STRING @
7386: PUSH
7387: LD_VAR 0 1
7391: PPUSH
7392: CALL_OW 255
7396: STR
7397: PPUSH
7398: CALL_OW 500
// if def_game_rules then
7402: LD_EXP 42
7406: IFFALSE 7445
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7408: LD_VAR 0 1
7412: PPUSH
7413: LD_VAR 0 1
7417: PPUSH
7418: CALL_OW 266
7422: PPUSH
7423: LD_VAR 0 1
7427: PPUSH
7428: CALL_OW 255
7432: PPUSH
7433: LD_VAR 0 2
7437: PPUSH
7438: LD_INT 1
7440: PPUSH
7441: CALL 12053 0 5
// end ;
7445: PPOPN 3
7447: END
// on VehicleConstructed ( veh , fac ) do var side ;
7448: LD_INT 0
7450: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7451: LD_VAR 0 1
7455: PPUSH
7456: CALL_OW 263
7460: PUSH
7461: LD_INT 5
7463: EQUAL
7464: IFFALSE 7606
// begin side := GetSide ( veh ) ;
7466: LD_ADDR_VAR 0 3
7470: PUSH
7471: LD_VAR 0 1
7475: PPUSH
7476: CALL_OW 255
7480: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7481: LD_ADDR_EXP 36
7485: PUSH
7486: LD_EXP 36
7490: PPUSH
7491: LD_VAR 0 3
7495: PPUSH
7496: LD_EXP 36
7500: PUSH
7501: LD_VAR 0 3
7505: ARRAY
7506: PPUSH
7507: LD_INT 52
7509: PUSH
7510: EMPTY
7511: LIST
7512: PPUSH
7513: CALL_OW 72
7517: PUSH
7518: LD_INT 22
7520: PUSH
7521: LD_VAR 0 3
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: LD_INT 2
7532: PUSH
7533: LD_INT 33
7535: PUSH
7536: LD_INT 5
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 25
7545: PUSH
7546: LD_INT 12
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: LD_INT 25
7555: PUSH
7556: LD_INT 15
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 25
7565: PUSH
7566: LD_INT 16
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: LD_INT 25
7575: PUSH
7576: LD_INT 17
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PPUSH
7595: CALL_OW 69
7599: UNION
7600: PPUSH
7601: CALL_OW 1
7605: ST_TO_ADDR
// end ; end ;
7606: PPOPN 3
7608: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7609: LD_INT 0
7611: PPUSH
7612: PPUSH
7613: PPUSH
7614: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 257
7624: PUSH
7625: LD_INT 12
7627: PUSH
7628: LD_INT 15
7630: PUSH
7631: LD_INT 17
7633: PUSH
7634: LD_INT 16
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: IN
7643: PUSH
7644: LD_VAR 0 1
7648: PPUSH
7649: CALL_OW 263
7653: PUSH
7654: LD_INT 5
7656: EQUAL
7657: OR
7658: IFFALSE 7669
// ApeKilled ( j ) ;
7660: LD_VAR 0 1
7664: PPUSH
7665: CALL 6629 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7669: LD_VAR 0 1
7673: PPUSH
7674: CALL_OW 266
7678: PUSH
7679: LD_INT 0
7681: PUSH
7682: LD_INT 1
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: IN
7689: IFFALSE 7771
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7691: LD_ADDR_VAR 0 4
7695: PUSH
7696: LD_EXP 21
7700: PUSH
7701: LD_VAR 0 1
7705: PPUSH
7706: CALL_OW 255
7710: ARRAY
7711: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7712: LD_ADDR_VAR 0 2
7716: PUSH
7717: LD_EXP 27
7721: PUSH
7722: LD_VAR 0 4
7726: ARRAY
7727: PUSH
7728: LD_INT 1
7730: ARRAY
7731: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7732: LD_ADDR_VAR 0 3
7736: PUSH
7737: LD_EXP 27
7741: PUSH
7742: LD_VAR 0 4
7746: ARRAY
7747: PUSH
7748: LD_INT 2
7750: ARRAY
7751: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7752: LD_VAR 0 2
7756: PPUSH
7757: LD_VAR 0 3
7761: PPUSH
7762: CALL_OW 420
7766: PPUSH
7767: CALL_OW 419
// end ; if def_game_rules then
7771: LD_EXP 42
7775: IFFALSE 7874
// if ( GetType ( j ) = 3 ) then
7777: LD_VAR 0 1
7781: PPUSH
7782: CALL_OW 247
7786: PUSH
7787: LD_INT 3
7789: EQUAL
7790: IFFALSE 7830
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7792: LD_VAR 0 1
7796: PPUSH
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 266
7806: PPUSH
7807: LD_VAR 0 1
7811: PPUSH
7812: CALL_OW 255
7816: PPUSH
7817: LD_INT 0
7819: PPUSH
7820: LD_INT 1
7822: NEG
7823: PPUSH
7824: CALL 12053 0 5
7828: GO 7874
// if ( GetChassis ( j ) = 25 ) then
7830: LD_VAR 0 1
7834: PPUSH
7835: CALL_OW 265
7839: PUSH
7840: LD_INT 25
7842: EQUAL
7843: IFFALSE 7874
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7845: LD_VAR 0 1
7849: PPUSH
7850: LD_INT 37
7852: PPUSH
7853: LD_VAR 0 1
7857: PPUSH
7858: CALL_OW 255
7862: PPUSH
7863: LD_INT 0
7865: PPUSH
7866: LD_INT 1
7868: NEG
7869: PPUSH
7870: CALL 12053 0 5
// end ;
7874: PPOPN 5
7876: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7877: LD_EXP 42
7881: PUSH
7882: LD_VAR 0 1
7886: PPUSH
7887: CALL_OW 265
7891: PUSH
7892: LD_INT 25
7894: EQUAL
7895: AND
7896: IFFALSE 7928
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7898: LD_VAR 0 1
7902: PPUSH
7903: LD_INT 37
7905: PPUSH
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 255
7915: PPUSH
7916: LD_VAR 0 3
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL 12053 0 5
// end ;
7928: PPOPN 4
7930: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7931: LD_VAR 0 1
7935: PPUSH
7936: LD_VAR 0 2
7940: PPUSH
7941: LD_VAR 0 3
7945: PPUSH
7946: LD_OWVAR 2
7950: PPUSH
7951: CALL 12731 0 4
7955: PPOPN 3
7957: END
// function CanWinLoose ; begin
7958: LD_INT 0
7960: PPUSH
// Result := true ;
7961: LD_ADDR_VAR 0 1
7965: PUSH
7966: LD_INT 1
7968: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7969: CALL_OW 518
7973: PUSH
7974: CALL_OW 519
7978: PUSH
7979: LD_INT 0
7981: GREATER
7982: AND
7983: IFFALSE 7993
// Result := false ;
7985: LD_ADDR_VAR 0 1
7989: PUSH
7990: LD_INT 0
7992: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7993: CALL_OW 531
7997: PUSH
7998: CALL_OW 519
8002: PUSH
8003: LD_INT 1
8005: GREATER
8006: AND
8007: IFFALSE 8017
// Result := false ;
8009: LD_ADDR_VAR 0 1
8013: PUSH
8014: LD_INT 0
8016: ST_TO_ADDR
// end ;
8017: LD_VAR 0 1
8021: RET
// function HasPower ( i ) ; begin
8022: LD_INT 0
8024: PPUSH
// if def_people_respawning then
8025: LD_EXP 53
8029: IFFALSE 8120
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8031: LD_ADDR_VAR 0 2
8035: PUSH
8036: LD_INT 22
8038: PUSH
8039: LD_VAR 0 1
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: LD_INT 21
8053: PUSH
8054: LD_INT 1
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 33
8063: PUSH
8064: LD_INT 3
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: LD_INT 33
8073: PUSH
8074: LD_INT 5
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 30
8083: PUSH
8084: LD_INT 0
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: PUSH
8091: LD_INT 30
8093: PUSH
8094: LD_INT 1
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PPUSH
8113: CALL_OW 69
8117: ST_TO_ADDR
8118: GO 8185
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8120: LD_ADDR_VAR 0 2
8124: PUSH
8125: LD_INT 22
8127: PUSH
8128: LD_VAR 0 1
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 2
8139: PUSH
8140: LD_INT 21
8142: PUSH
8143: LD_INT 1
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: PUSH
8150: LD_INT 33
8152: PUSH
8153: LD_INT 3
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: LD_INT 33
8162: PUSH
8163: LD_INT 5
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PPUSH
8180: CALL_OW 69
8184: ST_TO_ADDR
// end ;
8185: LD_VAR 0 2
8189: RET
// function AlliedSides ( i , j ) ; begin
8190: LD_INT 0
8192: PPUSH
// Result := false ;
8193: LD_ADDR_VAR 0 3
8197: PUSH
8198: LD_INT 0
8200: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8201: LD_VAR 0 1
8205: PPUSH
8206: LD_VAR 0 2
8210: PPUSH
8211: CALL_OW 81
8215: PUSH
8216: LD_INT 1
8218: EQUAL
8219: PUSH
8220: LD_VAR 0 2
8224: PPUSH
8225: LD_VAR 0 1
8229: PPUSH
8230: CALL_OW 81
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: AND
8239: PUSH
8240: LD_VAR 0 1
8244: PPUSH
8245: CALL_OW 83
8249: AND
8250: PUSH
8251: LD_VAR 0 2
8255: PPUSH
8256: CALL_OW 83
8260: AND
8261: IFFALSE 8271
// Result := true ;
8263: LD_ADDR_VAR 0 3
8267: PUSH
8268: LD_INT 1
8270: ST_TO_ADDR
// end ;
8271: LD_VAR 0 3
8275: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8276: CALL 7958 0 0
8280: IFFALSE 8289
8282: GO 8284
8284: DISABLE
// YouLostInMultiplayer ;
8285: CALL_OW 107
8289: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8290: CALL 7958 0 0
8294: IFFALSE 8318
8296: GO 8298
8298: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8299: LD_EXP 22
8303: PUSH
8304: LD_OWVAR 2
8308: ARRAY
8309: PPUSH
8310: CALL 12773 0 1
// YouWinInMultiplayer ;
8314: CALL_OW 106
// end ;
8318: END
// every 0 0$3 marked 98 do var i , CanWin ;
8319: GO 8321
8321: DISABLE
8322: LD_INT 0
8324: PPUSH
8325: PPUSH
// begin if not HasPower ( your_side ) then
8326: LD_OWVAR 2
8330: PPUSH
8331: CALL 8022 0 1
8335: NOT
8336: IFFALSE 8347
// begin Multiplayer_Loose_Message ;
8338: CALL_OW 521
// enable ( 400 ) ;
8342: LD_INT 400
8344: ENABLE_MARKED
// end else
8345: GO 8480
// begin CanWin := true ;
8347: LD_ADDR_VAR 0 2
8351: PUSH
8352: LD_INT 1
8354: ST_TO_ADDR
// for i := 1 to 8 do
8355: LD_ADDR_VAR 0 1
8359: PUSH
8360: DOUBLE
8361: LD_INT 1
8363: DEC
8364: ST_TO_ADDR
8365: LD_INT 8
8367: PUSH
8368: FOR_TO
8369: IFFALSE 8466
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8371: LD_EXP 21
8375: PUSH
8376: LD_VAR 0 1
8380: ARRAY
8381: PUSH
8382: LD_VAR 0 1
8386: PPUSH
8387: CALL_OW 108
8391: AND
8392: PUSH
8393: LD_VAR 0 1
8397: PUSH
8398: LD_OWVAR 2
8402: NONEQUAL
8403: AND
8404: IFFALSE 8464
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
8406: LD_EXP 19
8410: PUSH
8411: LD_VAR 0 1
8415: ARRAY
8416: NOT
8417: PUSH
8418: LD_EXP 19
8422: PUSH
8423: LD_VAR 0 1
8427: ARRAY
8428: PUSH
8429: LD_EXP 19
8433: PUSH
8434: LD_OWVAR 2
8438: ARRAY
8439: NONEQUAL
8440: OR
8441: IFFALSE 8464
// if HasPower ( i ) then
8443: LD_VAR 0 1
8447: PPUSH
8448: CALL 8022 0 1
8452: IFFALSE 8464
// begin CanWin := false ;
8454: LD_ADDR_VAR 0 2
8458: PUSH
8459: LD_INT 0
8461: ST_TO_ADDR
// break ;
8462: GO 8466
// end ;
8464: GO 8368
8466: POP
8467: POP
// if CanWin then
8468: LD_VAR 0 2
8472: IFFALSE 8479
// enable ( 401 ) else
8474: LD_INT 401
8476: ENABLE_MARKED
8477: GO 8480
// enable ;
8479: ENABLE
// end ; end ;
8480: PPOPN 2
8482: END
// every 0 0$3 marked 99 do var i , CanWin ;
8483: GO 8485
8485: DISABLE
8486: LD_INT 0
8488: PPUSH
8489: PPUSH
// begin if not HasPower ( your_side ) then
8490: LD_OWVAR 2
8494: PPUSH
8495: CALL 8022 0 1
8499: NOT
8500: IFFALSE 8511
// begin Multiplayer_Loose_Message ;
8502: CALL_OW 521
// enable ( 400 ) ;
8506: LD_INT 400
8508: ENABLE_MARKED
// end else
8509: GO 8624
// begin CanWin := true ;
8511: LD_ADDR_VAR 0 2
8515: PUSH
8516: LD_INT 1
8518: ST_TO_ADDR
// for i := 1 to 8 do
8519: LD_ADDR_VAR 0 1
8523: PUSH
8524: DOUBLE
8525: LD_INT 1
8527: DEC
8528: ST_TO_ADDR
8529: LD_INT 8
8531: PUSH
8532: FOR_TO
8533: IFFALSE 8610
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8535: LD_EXP 21
8539: PUSH
8540: LD_VAR 0 1
8544: ARRAY
8545: PUSH
8546: LD_VAR 0 1
8550: PPUSH
8551: CALL_OW 108
8555: AND
8556: PUSH
8557: LD_VAR 0 1
8561: PUSH
8562: LD_OWVAR 2
8566: NONEQUAL
8567: AND
8568: IFFALSE 8608
// if not AlliedSides ( i , your_side ) then
8570: LD_VAR 0 1
8574: PPUSH
8575: LD_OWVAR 2
8579: PPUSH
8580: CALL 8190 0 2
8584: NOT
8585: IFFALSE 8608
// if HasPower ( i ) then
8587: LD_VAR 0 1
8591: PPUSH
8592: CALL 8022 0 1
8596: IFFALSE 8608
// begin CanWin := false ;
8598: LD_ADDR_VAR 0 2
8602: PUSH
8603: LD_INT 0
8605: ST_TO_ADDR
// break ;
8606: GO 8610
// end ;
8608: GO 8532
8610: POP
8611: POP
// if CanWin then
8612: LD_VAR 0 2
8616: IFFALSE 8623
// enable ( 401 ) else
8618: LD_INT 401
8620: ENABLE_MARKED
8621: GO 8624
// enable ;
8623: ENABLE
// end ; end ; end_of_file
8624: PPOPN 2
8626: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8627: LD_INT 0
8629: PPUSH
8630: PPUSH
// for un in battle_flags_id do
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_EXP 32
8640: PUSH
8641: FOR_IN
8642: IFFALSE 8717
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8644: LD_VAR 0 2
8648: PPUSH
8649: LD_INT 1
8651: PUSH
8652: LD_LOC 11
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: LD_INT 2
8663: PUSH
8664: LD_LOC 11
8668: PUSH
8669: LD_INT 2
8671: DIV
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 3
8679: PUSH
8680: LD_LOC 11
8684: PUSH
8685: LD_INT 5
8687: DIV
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: LD_INT 20
8695: PUSH
8696: LD_LOC 11
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: PPUSH
8711: CALL_OW 423
8715: GO 8641
8717: POP
8718: POP
// end ;
8719: LD_VAR 0 1
8723: RET
// every 1 do var un ;
8724: GO 8726
8726: DISABLE
8727: LD_INT 0
8729: PPUSH
// begin if not def_morale_flags then
8730: LD_EXP 51
8734: NOT
8735: IFFALSE 8739
// exit ;
8737: GO 8816
// if not morale_decreasing_time then
8739: LD_EXP 10
8743: NOT
8744: IFFALSE 8748
// exit ;
8746: GO 8816
// strength = 100 ;
8748: LD_ADDR_LOC 11
8752: PUSH
8753: LD_INT 100
8755: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8756: LD_EXP 10
8760: PPUSH
8761: CALL_OW 67
// strength := strength - 1 ;
8765: LD_ADDR_LOC 11
8769: PUSH
8770: LD_LOC 11
8774: PUSH
8775: LD_INT 1
8777: MINUS
8778: ST_TO_ADDR
// Update_Flags ;
8779: CALL 8627 0 0
// until not strength ;
8783: LD_LOC 11
8787: NOT
8788: IFFALSE 8756
// for un in battle_flags_id do
8790: LD_ADDR_VAR 0 1
8794: PUSH
8795: LD_EXP 32
8799: PUSH
8800: FOR_IN
8801: IFFALSE 8814
// KillBattleFlag ( un ) ;
8803: LD_VAR 0 1
8807: PPUSH
8808: CALL_OW 419
8812: GO 8800
8814: POP
8815: POP
// end ; end_of_file
8816: PPOPN 1
8818: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8819: LD_INT 0
8821: PPUSH
8822: PPUSH
8823: PPUSH
// enable ( 600 ) ;
8824: LD_INT 600
8826: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8827: LD_ADDR_VAR 0 2
8831: PUSH
8832: DOUBLE
8833: LD_INT 1
8835: DEC
8836: ST_TO_ADDR
8837: LD_EXP 40
8841: PUSH
8842: FOR_TO
8843: IFFALSE 8998
// if Position_Sides [ i ] then
8845: LD_EXP 24
8849: PUSH
8850: LD_VAR 0 2
8854: ARRAY
8855: IFFALSE 8996
// for j := 1 to 8 do
8857: LD_ADDR_VAR 0 3
8861: PUSH
8862: DOUBLE
8863: LD_INT 1
8865: DEC
8866: ST_TO_ADDR
8867: LD_INT 8
8869: PUSH
8870: FOR_TO
8871: IFFALSE 8994
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8873: LD_EXP 21
8877: PUSH
8878: LD_VAR 0 3
8882: ARRAY
8883: PUSH
8884: LD_EXP 19
8888: PUSH
8889: LD_EXP 24
8893: PUSH
8894: LD_VAR 0 2
8898: ARRAY
8899: ARRAY
8900: PUSH
8901: LD_EXP 19
8905: PUSH
8906: LD_VAR 0 3
8910: ARRAY
8911: NONEQUAL
8912: PUSH
8913: LD_EXP 23
8917: NOT
8918: PUSH
8919: LD_EXP 24
8923: PUSH
8924: LD_VAR 0 2
8928: ARRAY
8929: PUSH
8930: LD_VAR 0 3
8934: NONEQUAL
8935: AND
8936: OR
8937: AND
8938: IFFALSE 8962
// HideArea ( j , BuildUpAreas [ i ] ) else
8940: LD_VAR 0 3
8944: PPUSH
8945: LD_EXP 40
8949: PUSH
8950: LD_VAR 0 2
8954: ARRAY
8955: PPUSH
8956: CALL_OW 333
8960: GO 8992
// if ( j = your_side ) then
8962: LD_VAR 0 3
8966: PUSH
8967: LD_OWVAR 2
8971: EQUAL
8972: IFFALSE 8992
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8974: LD_EXP 40
8978: PUSH
8979: LD_VAR 0 2
8983: ARRAY
8984: PPUSH
8985: LD_INT 5
8987: PPUSH
8988: CALL_OW 424
8992: GO 8870
8994: POP
8995: POP
8996: GO 8842
8998: POP
8999: POP
// end ;
9000: LD_VAR 0 1
9004: RET
// export function EndBuildUp ; var i , j ; begin
9005: LD_INT 0
9007: PPUSH
9008: PPUSH
9009: PPUSH
// disable ( 600 ) ;
9010: LD_INT 600
9012: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
9013: LD_ADDR_VAR 0 2
9017: PUSH
9018: DOUBLE
9019: LD_INT 1
9021: DEC
9022: ST_TO_ADDR
9023: LD_EXP 40
9027: PUSH
9028: FOR_TO
9029: IFFALSE 9184
// if Position_Sides [ i ] then
9031: LD_EXP 24
9035: PUSH
9036: LD_VAR 0 2
9040: ARRAY
9041: IFFALSE 9182
// for j := 1 to 8 do
9043: LD_ADDR_VAR 0 3
9047: PUSH
9048: DOUBLE
9049: LD_INT 1
9051: DEC
9052: ST_TO_ADDR
9053: LD_INT 8
9055: PUSH
9056: FOR_TO
9057: IFFALSE 9180
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9059: LD_EXP 21
9063: PUSH
9064: LD_VAR 0 3
9068: ARRAY
9069: PUSH
9070: LD_EXP 19
9074: PUSH
9075: LD_EXP 24
9079: PUSH
9080: LD_VAR 0 2
9084: ARRAY
9085: ARRAY
9086: PUSH
9087: LD_EXP 19
9091: PUSH
9092: LD_VAR 0 3
9096: ARRAY
9097: NONEQUAL
9098: PUSH
9099: LD_EXP 23
9103: NOT
9104: PUSH
9105: LD_EXP 24
9109: PUSH
9110: LD_VAR 0 2
9114: ARRAY
9115: PUSH
9116: LD_VAR 0 3
9120: NONEQUAL
9121: AND
9122: OR
9123: AND
9124: IFFALSE 9148
// ShowArea ( j , BuildUpAreas [ i ] ) else
9126: LD_VAR 0 3
9130: PPUSH
9131: LD_EXP 40
9135: PUSH
9136: LD_VAR 0 2
9140: ARRAY
9141: PPUSH
9142: CALL_OW 334
9146: GO 9178
// if ( j = your_side ) then
9148: LD_VAR 0 3
9152: PUSH
9153: LD_OWVAR 2
9157: EQUAL
9158: IFFALSE 9178
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9160: LD_EXP 40
9164: PUSH
9165: LD_VAR 0 2
9169: ARRAY
9170: PPUSH
9171: LD_INT 0
9173: PPUSH
9174: CALL_OW 424
9178: GO 9056
9180: POP
9181: POP
9182: GO 9028
9184: POP
9185: POP
// end ;
9186: LD_VAR 0 1
9190: RET
// every 5 marked 600 do var i , un ;
9191: GO 9193
9193: DISABLE
9194: LD_INT 0
9196: PPUSH
9197: PPUSH
// begin for i := 1 to BuildUpAreas do
9198: LD_ADDR_VAR 0 1
9202: PUSH
9203: DOUBLE
9204: LD_INT 1
9206: DEC
9207: ST_TO_ADDR
9208: LD_EXP 40
9212: PUSH
9213: FOR_TO
9214: IFFALSE 9369
// if Position_Sides [ i ] then
9216: LD_EXP 24
9220: PUSH
9221: LD_VAR 0 1
9225: ARRAY
9226: IFFALSE 9367
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9228: LD_ADDR_VAR 0 2
9232: PUSH
9233: LD_EXP 40
9237: PUSH
9238: LD_VAR 0 1
9242: ARRAY
9243: PPUSH
9244: LD_INT 2
9246: PUSH
9247: LD_INT 21
9249: PUSH
9250: LD_INT 1
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 21
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: LD_INT 22
9274: PUSH
9275: LD_OWVAR 2
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PPUSH
9288: CALL_OW 70
9292: PUSH
9293: FOR_IN
9294: IFFALSE 9365
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9296: LD_EXP 19
9300: PUSH
9301: LD_EXP 24
9305: PUSH
9306: LD_VAR 0 1
9310: ARRAY
9311: ARRAY
9312: PUSH
9313: LD_EXP 19
9317: PUSH
9318: LD_OWVAR 2
9322: ARRAY
9323: NONEQUAL
9324: PUSH
9325: LD_EXP 23
9329: NOT
9330: PUSH
9331: LD_EXP 24
9335: PUSH
9336: LD_VAR 0 1
9340: ARRAY
9341: PUSH
9342: LD_OWVAR 2
9346: NONEQUAL
9347: AND
9348: OR
9349: IFFALSE 9363
// ComMoveToArea ( un , BuildUpEscape ) ;
9351: LD_VAR 0 2
9355: PPUSH
9356: LD_INT 13
9358: PPUSH
9359: CALL_OW 113
9363: GO 9293
9365: POP
9366: POP
9367: GO 9213
9369: POP
9370: POP
// enable ;
9371: ENABLE
// end ;
9372: PPOPN 2
9374: END
// every 5 5$00 do
9375: GO 9377
9377: DISABLE
// if ( def_builduptime = 1 ) then
9378: LD_EXP 56
9382: PUSH
9383: LD_INT 1
9385: EQUAL
9386: IFFALSE 9392
// EndBuildUp ;
9388: CALL 9005 0 0
9392: END
// every 10 10$00 do
9393: GO 9395
9395: DISABLE
// if ( def_builduptime = 2 ) then
9396: LD_EXP 56
9400: PUSH
9401: LD_INT 2
9403: EQUAL
9404: IFFALSE 9410
// EndBuildUp ;
9406: CALL 9005 0 0
9410: END
// every 15 15$00 do
9411: GO 9413
9413: DISABLE
// if ( def_builduptime = 3 ) then
9414: LD_EXP 56
9418: PUSH
9419: LD_INT 3
9421: EQUAL
9422: IFFALSE 9428
// EndBuildUp ; end_of_file
9424: CALL 9005 0 0
9428: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9429: LD_INT 0
9431: PPUSH
9432: PPUSH
// if ( not IAmSpec ) then
9433: CALL_OW 531
9437: NOT
9438: IFFALSE 9454
// Result := Limits_Info ^  ;
9440: LD_ADDR_VAR 0 1
9444: PUSH
9445: LD_LOC 23
9449: PUSH
9450: LD_STRING 
9452: ADD
9453: ST_TO_ADDR
// for i := 1 to 8 do
9454: LD_ADDR_VAR 0 2
9458: PUSH
9459: DOUBLE
9460: LD_INT 1
9462: DEC
9463: ST_TO_ADDR
9464: LD_INT 8
9466: PUSH
9467: FOR_TO
9468: IFFALSE 9513
// if Cheaters [ i ] then
9470: LD_LOC 24
9474: PUSH
9475: LD_VAR 0 2
9479: ARRAY
9480: IFFALSE 9511
// Result := Result ^ [ #Cheater , i , i ] ;
9482: LD_ADDR_VAR 0 1
9486: PUSH
9487: LD_VAR 0 1
9491: PUSH
9492: LD_STRING #Cheater
9494: PUSH
9495: LD_VAR 0 2
9499: PUSH
9500: LD_VAR 0 2
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: LIST
9509: ADD
9510: ST_TO_ADDR
9511: GO 9467
9513: POP
9514: POP
// end ;
9515: LD_VAR 0 1
9519: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9520: LD_INT 0
9522: PPUSH
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
// case Game_Type of 10 :
9527: LD_EXP 41
9531: PUSH
9532: LD_INT 10
9534: DOUBLE
9535: EQUAL
9536: IFTRUE 9540
9538: GO 9551
9540: POP
// def_game_rules := 1 ; 11 :
9541: LD_ADDR_EXP 42
9545: PUSH
9546: LD_INT 1
9548: ST_TO_ADDR
9549: GO 9571
9551: LD_INT 11
9553: DOUBLE
9554: EQUAL
9555: IFTRUE 9559
9557: GO 9570
9559: POP
// def_game_rules := 3 ; end ;
9560: LD_ADDR_EXP 42
9564: PUSH
9565: LD_INT 3
9567: ST_TO_ADDR
9568: GO 9571
9570: POP
// case def_game_rules of 0 :
9571: LD_EXP 42
9575: PUSH
9576: LD_INT 0
9578: DOUBLE
9579: EQUAL
9580: IFTRUE 9584
9582: GO 9589
9584: POP
// exit ; 1 :
9585: GO 11647
9587: GO 11547
9589: LD_INT 1
9591: DOUBLE
9592: EQUAL
9593: IFTRUE 9597
9595: GO 9813
9597: POP
// begin def_base_level := 2 ;
9598: LD_ADDR_EXP 43
9602: PUSH
9603: LD_INT 2
9605: ST_TO_ADDR
// def_amount_of_people := 2 ;
9606: LD_ADDR_EXP 44
9610: PUSH
9611: LD_INT 2
9613: ST_TO_ADDR
// def_skill_level := 1 ;
9614: LD_ADDR_EXP 45
9618: PUSH
9619: LD_INT 1
9621: ST_TO_ADDR
// def_starting_resources := 2 ;
9622: LD_ADDR_EXP 46
9626: PUSH
9627: LD_INT 2
9629: ST_TO_ADDR
// def_shipments_density := 1 ;
9630: LD_ADDR_EXP 47
9634: PUSH
9635: LD_INT 1
9637: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9638: LD_ADDR_EXP 48
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9646: LD_ADDR_EXP 49
9650: PUSH
9651: LD_INT 1
9653: ST_TO_ADDR
// def_shared_vision := 1 ;
9654: LD_ADDR_EXP 50
9658: PUSH
9659: LD_INT 1
9661: ST_TO_ADDR
// def_morale_flags := 3 ;
9662: LD_ADDR_EXP 51
9666: PUSH
9667: LD_INT 3
9669: ST_TO_ADDR
// def_siberite_detection := 1 ;
9670: LD_ADDR_EXP 52
9674: PUSH
9675: LD_INT 1
9677: ST_TO_ADDR
// def_people_respawning := 1 ;
9678: LD_ADDR_EXP 53
9682: PUSH
9683: LD_INT 1
9685: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9686: LD_ADDR_EXP 54
9690: PUSH
9691: LD_INT 1
9693: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9694: LD_ADDR_EXP 55
9698: PUSH
9699: LD_INT 0
9701: ST_TO_ADDR
// def_builduptime := 2 ;
9702: LD_ADDR_EXP 56
9706: PUSH
9707: LD_INT 2
9709: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9710: LD_ADDR_VAR 0 2
9714: PUSH
9715: EMPTY
9716: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9717: LD_ADDR_VAR 0 3
9721: PUSH
9722: EMPTY
9723: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9724: LD_ADDR_LOC 18
9728: PUSH
9729: EMPTY
9730: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9731: LD_ADDR_LOC 19
9735: PUSH
9736: EMPTY
9737: ST_TO_ADDR
// Banned_Controls := [ ] ;
9738: LD_ADDR_LOC 20
9742: PUSH
9743: EMPTY
9744: ST_TO_ADDR
// Banned_Engines := [ ] ;
9745: LD_ADDR_LOC 21
9749: PUSH
9750: EMPTY
9751: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9752: LD_ADDR_LOC 16
9756: PUSH
9757: LD_INT 37
9759: PUSH
9760: EMPTY
9761: LIST
9762: PUSH
9763: LD_INT 4
9765: PUSH
9766: LD_INT 5
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 31
9775: PUSH
9776: LD_INT 32
9778: PUSH
9779: LD_INT 33
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9792: LD_ADDR_LOC 17
9796: PUSH
9797: LD_INT 2
9799: PUSH
9800: LD_INT 2
9802: PUSH
9803: LD_INT 4
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: ST_TO_ADDR
// end ; 2 :
9811: GO 11547
9813: LD_INT 2
9815: DOUBLE
9816: EQUAL
9817: IFTRUE 9821
9819: GO 10030
9821: POP
// begin def_base_level := 1 ;
9822: LD_ADDR_EXP 43
9826: PUSH
9827: LD_INT 1
9829: ST_TO_ADDR
// def_amount_of_people := 2 ;
9830: LD_ADDR_EXP 44
9834: PUSH
9835: LD_INT 2
9837: ST_TO_ADDR
// def_skill_level := 3 ;
9838: LD_ADDR_EXP 45
9842: PUSH
9843: LD_INT 3
9845: ST_TO_ADDR
// def_starting_resources := 3 ;
9846: LD_ADDR_EXP 46
9850: PUSH
9851: LD_INT 3
9853: ST_TO_ADDR
// def_shipments_density := 2 ;
9854: LD_ADDR_EXP 47
9858: PUSH
9859: LD_INT 2
9861: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9862: LD_ADDR_EXP 48
9866: PUSH
9867: LD_INT 1
9869: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9870: LD_ADDR_EXP 49
9874: PUSH
9875: LD_INT 2
9877: ST_TO_ADDR
// def_shared_vision := 1 ;
9878: LD_ADDR_EXP 50
9882: PUSH
9883: LD_INT 1
9885: ST_TO_ADDR
// def_morale_flags := 0 ;
9886: LD_ADDR_EXP 51
9890: PUSH
9891: LD_INT 0
9893: ST_TO_ADDR
// def_siberite_detection := 1 ;
9894: LD_ADDR_EXP 52
9898: PUSH
9899: LD_INT 1
9901: ST_TO_ADDR
// def_people_respawning := 0 ;
9902: LD_ADDR_EXP 53
9906: PUSH
9907: LD_INT 0
9909: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9910: LD_ADDR_EXP 54
9914: PUSH
9915: LD_INT 0
9917: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9918: LD_ADDR_EXP 55
9922: PUSH
9923: LD_INT 0
9925: ST_TO_ADDR
// def_builduptime := 2 ;
9926: LD_ADDR_EXP 56
9930: PUSH
9931: LD_INT 2
9933: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9934: LD_ADDR_VAR 0 2
9938: PUSH
9939: LD_INT 1
9941: PUSH
9942: EMPTY
9943: LIST
9944: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9945: LD_ADDR_VAR 0 3
9949: PUSH
9950: EMPTY
9951: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9952: LD_ADDR_LOC 18
9956: PUSH
9957: EMPTY
9958: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9959: LD_ADDR_LOC 19
9963: PUSH
9964: EMPTY
9965: ST_TO_ADDR
// Banned_Controls := [ ] ;
9966: LD_ADDR_LOC 20
9970: PUSH
9971: EMPTY
9972: ST_TO_ADDR
// Banned_Engines := [ ] ;
9973: LD_ADDR_LOC 21
9977: PUSH
9978: EMPTY
9979: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9980: LD_ADDR_LOC 16
9984: PUSH
9985: LD_INT 4
9987: PUSH
9988: LD_INT 5
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PUSH
9995: LD_INT 31
9997: PUSH
9998: LD_INT 32
10000: PUSH
10001: LD_INT 33
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
10013: LD_ADDR_LOC 17
10017: PUSH
10018: LD_INT 1
10020: PUSH
10021: LD_INT 2
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: ST_TO_ADDR
// end ; 3 :
10028: GO 11547
10030: LD_INT 3
10032: DOUBLE
10033: EQUAL
10034: IFTRUE 10038
10036: GO 10281
10038: POP
// begin def_base_level := 1 ;
10039: LD_ADDR_EXP 43
10043: PUSH
10044: LD_INT 1
10046: ST_TO_ADDR
// def_amount_of_people := 2 ;
10047: LD_ADDR_EXP 44
10051: PUSH
10052: LD_INT 2
10054: ST_TO_ADDR
// def_skill_level := 3 ;
10055: LD_ADDR_EXP 45
10059: PUSH
10060: LD_INT 3
10062: ST_TO_ADDR
// def_starting_resources := 3 ;
10063: LD_ADDR_EXP 46
10067: PUSH
10068: LD_INT 3
10070: ST_TO_ADDR
// def_shipments_density := 1 ;
10071: LD_ADDR_EXP 47
10075: PUSH
10076: LD_INT 1
10078: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10079: LD_ADDR_EXP 48
10083: PUSH
10084: LD_INT 0
10086: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10087: LD_ADDR_EXP 49
10091: PUSH
10092: LD_INT 1
10094: ST_TO_ADDR
// def_shared_vision := 1 ;
10095: LD_ADDR_EXP 50
10099: PUSH
10100: LD_INT 1
10102: ST_TO_ADDR
// def_morale_flags := 0 ;
10103: LD_ADDR_EXP 51
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// def_siberite_detection := 1 ;
10111: LD_ADDR_EXP 52
10115: PUSH
10116: LD_INT 1
10118: ST_TO_ADDR
// def_people_respawning := 0 ;
10119: LD_ADDR_EXP 53
10123: PUSH
10124: LD_INT 0
10126: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10127: LD_ADDR_EXP 54
10131: PUSH
10132: LD_INT 2
10134: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10135: LD_ADDR_EXP 55
10139: PUSH
10140: LD_INT 0
10142: ST_TO_ADDR
// def_builduptime := 1 ;
10143: LD_ADDR_EXP 56
10147: PUSH
10148: LD_INT 1
10150: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10151: LD_ADDR_VAR 0 2
10155: PUSH
10156: LD_INT 23
10158: PUSH
10159: EMPTY
10160: LIST
10161: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
10162: LD_ADDR_VAR 0 3
10166: PUSH
10167: LD_INT 2
10169: PUSH
10170: LD_INT 37
10172: PUSH
10173: LD_INT 32
10175: PUSH
10176: LD_INT 33
10178: PUSH
10179: LD_INT 36
10181: PUSH
10182: LD_INT 16
10184: PUSH
10185: LD_INT 23
10187: PUSH
10188: LD_INT 21
10190: PUSH
10191: LD_INT 18
10193: PUSH
10194: LD_INT 22
10196: PUSH
10197: LD_INT 20
10199: PUSH
10200: LD_INT 19
10202: PUSH
10203: LD_INT 25
10205: PUSH
10206: LD_INT 17
10208: PUSH
10209: LD_INT 24
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10229: LD_ADDR_LOC 18
10233: PUSH
10234: EMPTY
10235: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10236: LD_ADDR_LOC 19
10240: PUSH
10241: EMPTY
10242: ST_TO_ADDR
// Banned_Controls := [ ] ;
10243: LD_ADDR_LOC 20
10247: PUSH
10248: EMPTY
10249: ST_TO_ADDR
// Banned_Engines := [ ] ;
10250: LD_ADDR_LOC 21
10254: PUSH
10255: EMPTY
10256: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10257: LD_ADDR_LOC 16
10261: PUSH
10262: EMPTY
10263: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10264: LD_ADDR_LOC 17
10268: PUSH
10269: EMPTY
10270: ST_TO_ADDR
// No_Mechs := true ;
10271: LD_ADDR_EXP 57
10275: PUSH
10276: LD_INT 1
10278: ST_TO_ADDR
// end ; 4 :
10279: GO 11547
10281: LD_INT 4
10283: DOUBLE
10284: EQUAL
10285: IFTRUE 10289
10287: GO 10464
10289: POP
// begin def_base_level := 1 ;
10290: LD_ADDR_EXP 43
10294: PUSH
10295: LD_INT 1
10297: ST_TO_ADDR
// def_amount_of_people := 2 ;
10298: LD_ADDR_EXP 44
10302: PUSH
10303: LD_INT 2
10305: ST_TO_ADDR
// def_skill_level := 3 ;
10306: LD_ADDR_EXP 45
10310: PUSH
10311: LD_INT 3
10313: ST_TO_ADDR
// def_starting_resources := 3 ;
10314: LD_ADDR_EXP 46
10318: PUSH
10319: LD_INT 3
10321: ST_TO_ADDR
// def_shipments_density := 2 ;
10322: LD_ADDR_EXP 47
10326: PUSH
10327: LD_INT 2
10329: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10330: LD_ADDR_EXP 48
10334: PUSH
10335: LD_INT 1
10337: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10338: LD_ADDR_EXP 49
10342: PUSH
10343: LD_INT 2
10345: ST_TO_ADDR
// def_shared_vision := 1 ;
10346: LD_ADDR_EXP 50
10350: PUSH
10351: LD_INT 1
10353: ST_TO_ADDR
// def_morale_flags := 0 ;
10354: LD_ADDR_EXP 51
10358: PUSH
10359: LD_INT 0
10361: ST_TO_ADDR
// def_siberite_detection := 1 ;
10362: LD_ADDR_EXP 52
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// def_people_respawning := 0 ;
10370: LD_ADDR_EXP 53
10374: PUSH
10375: LD_INT 0
10377: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10378: LD_ADDR_EXP 54
10382: PUSH
10383: LD_INT 0
10385: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10386: LD_ADDR_EXP 55
10390: PUSH
10391: LD_INT 1
10393: ST_TO_ADDR
// def_builduptime := 3 ;
10394: LD_ADDR_EXP 56
10398: PUSH
10399: LD_INT 3
10401: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10402: LD_ADDR_VAR 0 2
10406: PUSH
10407: LD_INT 1
10409: PUSH
10410: EMPTY
10411: LIST
10412: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10413: LD_ADDR_VAR 0 3
10417: PUSH
10418: EMPTY
10419: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10420: LD_ADDR_LOC 18
10424: PUSH
10425: EMPTY
10426: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10427: LD_ADDR_LOC 19
10431: PUSH
10432: EMPTY
10433: ST_TO_ADDR
// Banned_Controls := [ ] ;
10434: LD_ADDR_LOC 20
10438: PUSH
10439: EMPTY
10440: ST_TO_ADDR
// Banned_Engines := [ ] ;
10441: LD_ADDR_LOC 21
10445: PUSH
10446: EMPTY
10447: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10448: LD_ADDR_LOC 16
10452: PUSH
10453: EMPTY
10454: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10455: LD_ADDR_LOC 17
10459: PUSH
10460: EMPTY
10461: ST_TO_ADDR
// end ; 5 :
10462: GO 11547
10464: LD_INT 5
10466: DOUBLE
10467: EQUAL
10468: IFTRUE 10472
10470: GO 10721
10472: POP
// begin def_base_level := 0 ;
10473: LD_ADDR_EXP 43
10477: PUSH
10478: LD_INT 0
10480: ST_TO_ADDR
// def_amount_of_people := 0 ;
10481: LD_ADDR_EXP 44
10485: PUSH
10486: LD_INT 0
10488: ST_TO_ADDR
// def_skill_level := 0 ;
10489: LD_ADDR_EXP 45
10493: PUSH
10494: LD_INT 0
10496: ST_TO_ADDR
// def_starting_resources := 0 ;
10497: LD_ADDR_EXP 46
10501: PUSH
10502: LD_INT 0
10504: ST_TO_ADDR
// def_shipments_density := 0 ;
10505: LD_ADDR_EXP 47
10509: PUSH
10510: LD_INT 0
10512: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10513: LD_ADDR_EXP 48
10517: PUSH
10518: LD_INT 0
10520: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10521: LD_ADDR_EXP 49
10525: PUSH
10526: LD_INT 0
10528: ST_TO_ADDR
// def_shared_vision := 1 ;
10529: LD_ADDR_EXP 50
10533: PUSH
10534: LD_INT 1
10536: ST_TO_ADDR
// def_morale_flags := 0 ;
10537: LD_ADDR_EXP 51
10541: PUSH
10542: LD_INT 0
10544: ST_TO_ADDR
// def_siberite_detection := 0 ;
10545: LD_ADDR_EXP 52
10549: PUSH
10550: LD_INT 0
10552: ST_TO_ADDR
// def_people_respawning := 1 ;
10553: LD_ADDR_EXP 53
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10561: LD_ADDR_EXP 54
10565: PUSH
10566: LD_INT 1
10568: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10569: LD_ADDR_EXP 55
10573: PUSH
10574: LD_INT 0
10576: ST_TO_ADDR
// def_builduptime := 0 ;
10577: LD_ADDR_EXP 56
10581: PUSH
10582: LD_INT 0
10584: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 10
10592: PUSH
10593: LD_INT 3
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10600: LD_ADDR_VAR 0 3
10604: PUSH
10605: LD_INT 12
10607: PUSH
10608: LD_INT 11
10610: PUSH
10611: LD_INT 14
10613: PUSH
10614: LD_INT 13
10616: PUSH
10617: LD_INT 5
10619: PUSH
10620: LD_INT 24
10622: PUSH
10623: LD_INT 21
10625: PUSH
10626: LD_INT 33
10628: PUSH
10629: LD_INT 36
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10643: LD_ADDR_LOC 18
10647: PUSH
10648: LD_INT 31
10650: PUSH
10651: EMPTY
10652: LIST
10653: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10654: LD_ADDR_LOC 19
10658: PUSH
10659: EMPTY
10660: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10661: LD_ADDR_LOC 20
10665: PUSH
10666: LD_INT 2
10668: PUSH
10669: EMPTY
10670: LIST
10671: ST_TO_ADDR
// Banned_Engines := [ ] ;
10672: LD_ADDR_LOC 21
10676: PUSH
10677: EMPTY
10678: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10679: LD_ADDR_LOC 16
10683: PUSH
10684: LD_INT 4
10686: PUSH
10687: EMPTY
10688: LIST
10689: PUSH
10690: LD_INT 31
10692: PUSH
10693: LD_INT 32
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10704: LD_ADDR_LOC 17
10708: PUSH
10709: LD_INT 1
10711: PUSH
10712: LD_INT 1
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: ST_TO_ADDR
// end ; 6 :
10719: GO 11547
10721: LD_INT 6
10723: DOUBLE
10724: EQUAL
10725: IFTRUE 10729
10727: GO 10932
10729: POP
// begin def_base_level := 1 ;
10730: LD_ADDR_EXP 43
10734: PUSH
10735: LD_INT 1
10737: ST_TO_ADDR
// def_amount_of_people := 2 ;
10738: LD_ADDR_EXP 44
10742: PUSH
10743: LD_INT 2
10745: ST_TO_ADDR
// def_skill_level := 3 ;
10746: LD_ADDR_EXP 45
10750: PUSH
10751: LD_INT 3
10753: ST_TO_ADDR
// def_starting_resources := 3 ;
10754: LD_ADDR_EXP 46
10758: PUSH
10759: LD_INT 3
10761: ST_TO_ADDR
// def_shipments_density := 1 ;
10762: LD_ADDR_EXP 47
10766: PUSH
10767: LD_INT 1
10769: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10770: LD_ADDR_EXP 48
10774: PUSH
10775: LD_INT 0
10777: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10778: LD_ADDR_EXP 49
10782: PUSH
10783: LD_INT 1
10785: ST_TO_ADDR
// def_shared_vision := 1 ;
10786: LD_ADDR_EXP 50
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// def_morale_flags := 0 ;
10794: LD_ADDR_EXP 51
10798: PUSH
10799: LD_INT 0
10801: ST_TO_ADDR
// def_siberite_detection := 1 ;
10802: LD_ADDR_EXP 52
10806: PUSH
10807: LD_INT 1
10809: ST_TO_ADDR
// def_people_respawning := 2 ;
10810: LD_ADDR_EXP 53
10814: PUSH
10815: LD_INT 2
10817: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10818: LD_ADDR_EXP 54
10822: PUSH
10823: LD_INT 1
10825: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10826: LD_ADDR_EXP 55
10830: PUSH
10831: LD_INT 0
10833: ST_TO_ADDR
// def_builduptime := 1 ;
10834: LD_ADDR_EXP 56
10838: PUSH
10839: LD_INT 1
10841: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10842: LD_ADDR_VAR 0 2
10846: PUSH
10847: LD_INT 23
10849: PUSH
10850: EMPTY
10851: LIST
10852: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10853: LD_ADDR_VAR 0 3
10857: PUSH
10858: LD_INT 2
10860: PUSH
10861: LD_INT 37
10863: PUSH
10864: LD_INT 31
10866: PUSH
10867: LD_INT 32
10869: PUSH
10870: LD_INT 33
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10880: LD_ADDR_LOC 18
10884: PUSH
10885: EMPTY
10886: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10887: LD_ADDR_LOC 19
10891: PUSH
10892: EMPTY
10893: ST_TO_ADDR
// Banned_Controls := [ ] ;
10894: LD_ADDR_LOC 20
10898: PUSH
10899: EMPTY
10900: ST_TO_ADDR
// Banned_Engines := [ ] ;
10901: LD_ADDR_LOC 21
10905: PUSH
10906: EMPTY
10907: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10908: LD_ADDR_LOC 16
10912: PUSH
10913: EMPTY
10914: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10915: LD_ADDR_LOC 17
10919: PUSH
10920: EMPTY
10921: ST_TO_ADDR
// No_Mechs := true ;
10922: LD_ADDR_EXP 57
10926: PUSH
10927: LD_INT 1
10929: ST_TO_ADDR
// end ; 7 :
10930: GO 11547
10932: LD_INT 7
10934: DOUBLE
10935: EQUAL
10936: IFTRUE 10940
10938: GO 11138
10940: POP
// begin def_base_level := 1 ;
10941: LD_ADDR_EXP 43
10945: PUSH
10946: LD_INT 1
10948: ST_TO_ADDR
// def_amount_of_people := 2 ;
10949: LD_ADDR_EXP 44
10953: PUSH
10954: LD_INT 2
10956: ST_TO_ADDR
// def_skill_level := 3 ;
10957: LD_ADDR_EXP 45
10961: PUSH
10962: LD_INT 3
10964: ST_TO_ADDR
// def_starting_resources := 3 ;
10965: LD_ADDR_EXP 46
10969: PUSH
10970: LD_INT 3
10972: ST_TO_ADDR
// def_shipments_density := 1 ;
10973: LD_ADDR_EXP 47
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10981: LD_ADDR_EXP 48
10985: PUSH
10986: LD_INT 1
10988: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10989: LD_ADDR_EXP 49
10993: PUSH
10994: LD_INT 2
10996: ST_TO_ADDR
// def_shared_vision := 1 ;
10997: LD_ADDR_EXP 50
11001: PUSH
11002: LD_INT 1
11004: ST_TO_ADDR
// def_morale_flags := 0 ;
11005: LD_ADDR_EXP 51
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// def_siberite_detection := 1 ;
11013: LD_ADDR_EXP 52
11017: PUSH
11018: LD_INT 1
11020: ST_TO_ADDR
// def_people_respawning := 0 ;
11021: LD_ADDR_EXP 53
11025: PUSH
11026: LD_INT 0
11028: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11029: LD_ADDR_EXP 54
11033: PUSH
11034: LD_INT 1
11036: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11037: LD_ADDR_EXP 55
11041: PUSH
11042: LD_INT 0
11044: ST_TO_ADDR
// def_builduptime := 3 ;
11045: LD_ADDR_EXP 56
11049: PUSH
11050: LD_INT 3
11052: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11053: LD_ADDR_VAR 0 2
11057: PUSH
11058: LD_INT 23
11060: PUSH
11061: EMPTY
11062: LIST
11063: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
11064: LD_ADDR_VAR 0 3
11068: PUSH
11069: LD_INT 37
11071: PUSH
11072: EMPTY
11073: LIST
11074: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11075: LD_ADDR_LOC 18
11079: PUSH
11080: EMPTY
11081: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11082: LD_ADDR_LOC 19
11086: PUSH
11087: EMPTY
11088: ST_TO_ADDR
// Banned_Controls := [ ] ;
11089: LD_ADDR_LOC 20
11093: PUSH
11094: EMPTY
11095: ST_TO_ADDR
// Banned_Engines := [ ] ;
11096: LD_ADDR_LOC 21
11100: PUSH
11101: EMPTY
11102: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11103: LD_ADDR_LOC 16
11107: PUSH
11108: LD_INT 31
11110: PUSH
11111: LD_INT 32
11113: PUSH
11114: LD_INT 33
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
11125: LD_ADDR_LOC 17
11129: PUSH
11130: LD_INT 10
11132: PUSH
11133: EMPTY
11134: LIST
11135: ST_TO_ADDR
// end ; 8 :
11136: GO 11547
11138: LD_INT 8
11140: DOUBLE
11141: EQUAL
11142: IFTRUE 11146
11144: GO 11546
11146: POP
// begin def_base_level := 0 ;
11147: LD_ADDR_EXP 43
11151: PUSH
11152: LD_INT 0
11154: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
11155: LD_ADDR_EXP 44
11159: PUSH
11160: LD_INT 0
11162: PPUSH
11163: LD_INT 1
11165: PPUSH
11166: CALL_OW 12
11170: ST_TO_ADDR
// def_skill_level := 0 ;
11171: LD_ADDR_EXP 45
11175: PUSH
11176: LD_INT 0
11178: ST_TO_ADDR
// def_starting_resources := 2 ;
11179: LD_ADDR_EXP 46
11183: PUSH
11184: LD_INT 2
11186: ST_TO_ADDR
// def_shipments_density := 1 ;
11187: LD_ADDR_EXP 47
11191: PUSH
11192: LD_INT 1
11194: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11195: LD_ADDR_EXP 48
11199: PUSH
11200: LD_INT 0
11202: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11203: LD_ADDR_EXP 49
11207: PUSH
11208: LD_INT 0
11210: ST_TO_ADDR
// def_shared_vision := 1 ;
11211: LD_ADDR_EXP 50
11215: PUSH
11216: LD_INT 1
11218: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11219: LD_ADDR_EXP 51
11223: PUSH
11224: LD_INT 0
11226: PPUSH
11227: LD_INT 2
11229: PPUSH
11230: CALL_OW 12
11234: ST_TO_ADDR
// def_siberite_detection := 0 ;
11235: LD_ADDR_EXP 52
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// def_people_respawning := 0 ;
11243: LD_ADDR_EXP 53
11247: PUSH
11248: LD_INT 0
11250: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11251: LD_ADDR_EXP 54
11255: PUSH
11256: LD_INT 2
11258: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11259: LD_ADDR_EXP 55
11263: PUSH
11264: LD_INT 0
11266: ST_TO_ADDR
// def_builduptime := 0 ;
11267: LD_ADDR_EXP 56
11271: PUSH
11272: LD_INT 0
11274: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11275: LD_ADDR_VAR 0 2
11279: PUSH
11280: LD_INT 23
11282: PUSH
11283: LD_INT 20
11285: PUSH
11286: LD_INT 40
11288: PUSH
11289: LD_INT 47
11291: PUSH
11292: LD_INT 46
11294: PUSH
11295: LD_INT 39
11297: PUSH
11298: LD_INT 71
11300: PUSH
11301: LD_INT 34
11303: PUSH
11304: LD_INT 41
11306: PUSH
11307: LD_INT 44
11309: PUSH
11310: LD_INT 17
11312: PUSH
11313: LD_INT 16
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11330: LD_ADDR_VAR 0 3
11334: PUSH
11335: LD_INT 37
11337: PUSH
11338: LD_INT 5
11340: PUSH
11341: LD_INT 13
11343: PUSH
11344: LD_INT 34
11346: PUSH
11347: LD_INT 12
11349: PUSH
11350: LD_INT 15
11352: PUSH
11353: LD_INT 11
11355: PUSH
11356: LD_INT 14
11358: PUSH
11359: LD_INT 29
11361: PUSH
11362: LD_INT 30
11364: PUSH
11365: LD_INT 28
11367: PUSH
11368: LD_INT 24
11370: PUSH
11371: LD_INT 25
11373: PUSH
11374: LD_INT 20
11376: PUSH
11377: LD_INT 21
11379: PUSH
11380: LD_INT 22
11382: PUSH
11383: LD_INT 36
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11405: LD_ADDR_LOC 18
11409: PUSH
11410: EMPTY
11411: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11412: LD_ADDR_LOC 19
11416: PUSH
11417: LD_INT 14
11419: PUSH
11420: EMPTY
11421: LIST
11422: ST_TO_ADDR
// Banned_Controls := [ ] ;
11423: LD_ADDR_LOC 20
11427: PUSH
11428: EMPTY
11429: ST_TO_ADDR
// Banned_Engines := [ ] ;
11430: LD_ADDR_LOC 21
11434: PUSH
11435: EMPTY
11436: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11437: LD_ADDR_LOC 16
11441: PUSH
11442: LD_INT 31
11444: PUSH
11445: LD_INT 32
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 4
11454: PUSH
11455: EMPTY
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11462: LD_ADDR_LOC 17
11466: PUSH
11467: LD_INT 2
11469: PUSH
11470: LD_INT 1
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: ST_TO_ADDR
// for i := 1 to 8 do
11477: LD_ADDR_VAR 0 4
11481: PUSH
11482: DOUBLE
11483: LD_INT 1
11485: DEC
11486: ST_TO_ADDR
11487: LD_INT 8
11489: PUSH
11490: FOR_TO
11491: IFFALSE 11542
// if ( Side_Nations [ i ] = 3 ) then
11493: LD_EXP 22
11497: PUSH
11498: LD_VAR 0 4
11502: ARRAY
11503: PUSH
11504: LD_INT 3
11506: EQUAL
11507: IFFALSE 11540
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11509: LD_ADDR_EXP 22
11513: PUSH
11514: LD_EXP 22
11518: PPUSH
11519: LD_VAR 0 4
11523: PPUSH
11524: LD_INT 1
11526: PPUSH
11527: LD_INT 2
11529: PPUSH
11530: CALL_OW 12
11534: PPUSH
11535: CALL_OW 1
11539: ST_TO_ADDR
11540: GO 11490
11542: POP
11543: POP
// end ; end ;
11544: GO 11547
11546: POP
// for i := 1 to 8 do
11547: LD_ADDR_VAR 0 4
11551: PUSH
11552: DOUBLE
11553: LD_INT 1
11555: DEC
11556: ST_TO_ADDR
11557: LD_INT 8
11559: PUSH
11560: FOR_TO
11561: IFFALSE 11645
// if Side_Positions [ i ] then
11563: LD_EXP 21
11567: PUSH
11568: LD_VAR 0 4
11572: ARRAY
11573: IFFALSE 11643
// begin for j in Unavailable_Techs do
11575: LD_ADDR_VAR 0 5
11579: PUSH
11580: LD_VAR 0 2
11584: PUSH
11585: FOR_IN
11586: IFFALSE 11607
// SetTech ( j , i , 0 ) ;
11588: LD_VAR 0 5
11592: PPUSH
11593: LD_VAR 0 4
11597: PPUSH
11598: LD_INT 0
11600: PPUSH
11601: CALL_OW 322
11605: GO 11585
11607: POP
11608: POP
// for j in Unavailable_Builds do
11609: LD_ADDR_VAR 0 5
11613: PUSH
11614: LD_VAR 0 3
11618: PUSH
11619: FOR_IN
11620: IFFALSE 11641
// SetRestrict ( j , i , 0 ) ;
11622: LD_VAR 0 5
11626: PPUSH
11627: LD_VAR 0 4
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL_OW 324
11639: GO 11619
11641: POP
11642: POP
// end ;
11643: GO 11560
11645: POP
11646: POP
// end ;
11647: LD_VAR 0 1
11651: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11652: LD_INT 0
11654: PPUSH
11655: PPUSH
11656: PPUSH
11657: PPUSH
11658: PPUSH
11659: PPUSH
11660: PPUSH
// for i := 1 to Restricted_Builds do
11661: LD_ADDR_VAR 0 2
11665: PUSH
11666: DOUBLE
11667: LD_INT 1
11669: DEC
11670: ST_TO_ADDR
11671: LD_LOC 16
11675: PUSH
11676: FOR_TO
11677: IFFALSE 11987
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11679: LD_LOC 16
11683: PUSH
11684: LD_VAR 0 2
11688: ARRAY
11689: PUSH
11690: LD_INT 1
11692: ARRAY
11693: PUSH
11694: LD_INT 31
11696: DOUBLE
11697: EQUAL
11698: IFTRUE 11714
11700: LD_INT 32
11702: DOUBLE
11703: EQUAL
11704: IFTRUE 11714
11706: LD_INT 33
11708: DOUBLE
11709: EQUAL
11710: IFTRUE 11714
11712: GO 11725
11714: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11715: LD_ADDR_VAR 0 6
11719: PUSH
11720: LD_STRING #Turrets
11722: ST_TO_ADDR
11723: GO 11770
11725: LD_INT 4
11727: DOUBLE
11728: EQUAL
11729: IFTRUE 11739
11731: LD_INT 5
11733: DOUBLE
11734: EQUAL
11735: IFTRUE 11739
11737: GO 11750
11739: POP
// btype := #Armouries ; b_Behemoth :
11740: LD_ADDR_VAR 0 6
11744: PUSH
11745: LD_STRING #Armouries
11747: ST_TO_ADDR
11748: GO 11770
11750: LD_INT 37
11752: DOUBLE
11753: EQUAL
11754: IFTRUE 11758
11756: GO 11769
11758: POP
// btype := #Behemoths ; end ;
11759: LD_ADDR_VAR 0 6
11763: PUSH
11764: LD_STRING #Behemoths
11766: ST_TO_ADDR
11767: GO 11770
11769: POP
// list := [ ] ;
11770: LD_ADDR_VAR 0 7
11774: PUSH
11775: EMPTY
11776: ST_TO_ADDR
// for j := 1 to 8 do
11777: LD_ADDR_VAR 0 3
11781: PUSH
11782: DOUBLE
11783: LD_INT 1
11785: DEC
11786: ST_TO_ADDR
11787: LD_INT 8
11789: PUSH
11790: FOR_TO
11791: IFFALSE 11884
// if Side_Positions [ j ] then
11793: LD_EXP 21
11797: PUSH
11798: LD_VAR 0 3
11802: ARRAY
11803: IFFALSE 11882
// begin amount := 0 ;
11805: LD_ADDR_VAR 0 5
11809: PUSH
11810: LD_INT 0
11812: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11813: LD_ADDR_VAR 0 4
11817: PUSH
11818: LD_LOC 16
11822: PUSH
11823: LD_VAR 0 2
11827: ARRAY
11828: PUSH
11829: FOR_IN
11830: IFFALSE 11878
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11832: LD_ADDR_VAR 0 5
11836: PUSH
11837: LD_VAR 0 5
11841: PUSH
11842: LD_INT 22
11844: PUSH
11845: LD_VAR 0 3
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 30
11856: PUSH
11857: LD_VAR 0 4
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 69
11874: PLUS
11875: ST_TO_ADDR
11876: GO 11829
11878: POP
11879: POP
// break ;
11880: GO 11884
// end ;
11882: GO 11790
11884: POP
11885: POP
// list := [ ] ;
11886: LD_ADDR_VAR 0 7
11890: PUSH
11891: EMPTY
11892: ST_TO_ADDR
// for j := 1 to 8 do
11893: LD_ADDR_VAR 0 3
11897: PUSH
11898: DOUBLE
11899: LD_INT 1
11901: DEC
11902: ST_TO_ADDR
11903: LD_INT 8
11905: PUSH
11906: FOR_TO
11907: IFFALSE 11927
// list := list ^ amount ;
11909: LD_ADDR_VAR 0 7
11913: PUSH
11914: LD_VAR 0 7
11918: PUSH
11919: LD_VAR 0 5
11923: ADD
11924: ST_TO_ADDR
11925: GO 11906
11927: POP
11928: POP
// Already_Built := Already_Built ^ [ list ] ;
11929: LD_ADDR_LOC 22
11933: PUSH
11934: LD_LOC 22
11938: PUSH
11939: LD_VAR 0 7
11943: PUSH
11944: EMPTY
11945: LIST
11946: ADD
11947: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11948: LD_ADDR_LOC 23
11952: PUSH
11953: LD_LOC 23
11957: PUSH
11958: LD_VAR 0 6
11962: PUSH
11963: LD_VAR 0 5
11967: PUSH
11968: LD_LOC 17
11972: PUSH
11973: LD_VAR 0 2
11977: ARRAY
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: LIST
11983: ADD
11984: ST_TO_ADDR
// end ;
11985: GO 11676
11987: POP
11988: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11989: LD_ADDR_LOC 24
11993: PUSH
11994: LD_INT 0
11996: PUSH
11997: LD_INT 0
11999: PUSH
12000: LD_INT 0
12002: PUSH
12003: LD_INT 0
12005: PUSH
12006: LD_INT 0
12008: PUSH
12009: LD_INT 0
12011: PUSH
12012: LD_INT 0
12014: PUSH
12015: LD_INT 0
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: ST_TO_ADDR
// if Limits_Info then
12028: LD_LOC 23
12032: IFFALSE 12048
// Limits_Info := #Limits ^ Limits_Info ;
12034: LD_ADDR_LOC 23
12038: PUSH
12039: LD_STRING #Limits
12041: PUSH
12042: LD_LOC 23
12046: ADD
12047: ST_TO_ADDR
// end ;
12048: LD_VAR 0 1
12052: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
12053: LD_INT 0
12055: PPUSH
12056: PPUSH
12057: PPUSH
12058: PPUSH
// for i := 1 to Restricted_Builds do
12059: LD_ADDR_VAR 0 7
12063: PUSH
12064: DOUBLE
12065: LD_INT 1
12067: DEC
12068: ST_TO_ADDR
12069: LD_LOC 16
12073: PUSH
12074: FOR_TO
12075: IFFALSE 12498
// if BType in Restricted_Builds [ i ] then
12077: LD_VAR 0 2
12081: PUSH
12082: LD_LOC 16
12086: PUSH
12087: LD_VAR 0 7
12091: ARRAY
12092: IN
12093: IFFALSE 12496
// begin if old_side then
12095: LD_VAR 0 4
12099: IFFALSE 12225
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
12101: LD_LOC 22
12105: PUSH
12106: LD_VAR 0 7
12110: ARRAY
12111: PUSH
12112: LD_VAR 0 3
12116: ARRAY
12117: PUSH
12118: LD_VAR 0 5
12122: PLUS
12123: PUSH
12124: LD_LOC 17
12128: PUSH
12129: LD_VAR 0 7
12133: ARRAY
12134: GREATER
12135: IFFALSE 12161
// begin SetSide ( un , old_side ) ;
12137: LD_VAR 0 1
12141: PPUSH
12142: LD_VAR 0 4
12146: PPUSH
12147: CALL_OW 235
// count := 0 ;
12151: LD_ADDR_VAR 0 5
12155: PUSH
12156: LD_INT 0
12158: ST_TO_ADDR
// end else
12159: GO 12225
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
12161: LD_ADDR_LOC 22
12165: PUSH
12166: LD_LOC 22
12170: PPUSH
12171: LD_VAR 0 7
12175: PPUSH
12176: LD_LOC 22
12180: PUSH
12181: LD_VAR 0 7
12185: ARRAY
12186: PPUSH
12187: LD_VAR 0 4
12191: PPUSH
12192: LD_LOC 22
12196: PUSH
12197: LD_VAR 0 7
12201: ARRAY
12202: PUSH
12203: LD_VAR 0 4
12207: ARRAY
12208: PUSH
12209: LD_VAR 0 5
12213: MINUS
12214: PPUSH
12215: CALL_OW 1
12219: PPUSH
12220: CALL_OW 1
12224: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12225: LD_ADDR_LOC 22
12229: PUSH
12230: LD_LOC 22
12234: PPUSH
12235: LD_VAR 0 7
12239: PPUSH
12240: LD_LOC 22
12244: PUSH
12245: LD_VAR 0 7
12249: ARRAY
12250: PPUSH
12251: LD_VAR 0 3
12255: PPUSH
12256: LD_LOC 22
12260: PUSH
12261: LD_VAR 0 7
12265: ARRAY
12266: PUSH
12267: LD_VAR 0 3
12271: ARRAY
12272: PUSH
12273: LD_VAR 0 5
12277: PLUS
12278: PPUSH
12279: CALL_OW 1
12283: PPUSH
12284: CALL_OW 1
12288: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12289: LD_VAR 0 5
12293: PUSH
12294: LD_INT 0
12296: NONEQUAL
12297: PUSH
12298: LD_VAR 0 3
12302: PUSH
12303: LD_OWVAR 2
12307: EQUAL
12308: AND
12309: IFFALSE 12352
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12311: LD_ADDR_LOC 23
12315: PUSH
12316: LD_LOC 23
12320: PPUSH
12321: LD_INT 3
12323: PUSH
12324: LD_VAR 0 7
12328: MUL
12329: PPUSH
12330: LD_LOC 22
12334: PUSH
12335: LD_VAR 0 7
12339: ARRAY
12340: PUSH
12341: LD_VAR 0 3
12345: ARRAY
12346: PPUSH
12347: CALL_OW 1
12351: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12352: LD_LOC 22
12356: PUSH
12357: LD_VAR 0 7
12361: ARRAY
12362: PUSH
12363: LD_VAR 0 3
12367: ARRAY
12368: PUSH
12369: LD_LOC 17
12373: PUSH
12374: LD_VAR 0 7
12378: ARRAY
12379: GREATER
12380: IFFALSE 12407
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12382: LD_ADDR_LOC 24
12386: PUSH
12387: LD_LOC 24
12391: PPUSH
12392: LD_VAR 0 3
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 1
12404: ST_TO_ADDR
// end else
12405: GO 12494
// begin for j := 1 to Restricted_Builds do
12407: LD_ADDR_VAR 0 8
12411: PUSH
12412: DOUBLE
12413: LD_INT 1
12415: DEC
12416: ST_TO_ADDR
12417: LD_LOC 16
12421: PUSH
12422: FOR_TO
12423: IFFALSE 12467
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12425: LD_LOC 22
12429: PUSH
12430: LD_VAR 0 8
12434: ARRAY
12435: PUSH
12436: LD_VAR 0 3
12440: ARRAY
12441: PUSH
12442: LD_LOC 17
12446: PUSH
12447: LD_VAR 0 8
12451: ARRAY
12452: GREATER
12453: IFFALSE 12465
// begin Is_Cheater := true ;
12455: LD_ADDR_VAR 0 9
12459: PUSH
12460: LD_INT 1
12462: ST_TO_ADDR
// break ;
12463: GO 12467
// end ;
12465: GO 12422
12467: POP
12468: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12469: LD_ADDR_LOC 24
12473: PUSH
12474: LD_LOC 24
12478: PPUSH
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_VAR 0 9
12488: PPUSH
12489: CALL_OW 1
12493: ST_TO_ADDR
// end ; break ;
12494: GO 12498
// end ;
12496: GO 12074
12498: POP
12499: POP
// end ;
12500: LD_VAR 0 6
12504: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12505: LD_VAR 0 5
12509: PUSH
12510: LD_LOC 18
12514: IN
12515: PUSH
12516: LD_VAR 0 2
12520: PUSH
12521: LD_LOC 19
12525: IN
12526: OR
12527: PUSH
12528: LD_VAR 0 4
12532: PUSH
12533: LD_LOC 20
12537: IN
12538: OR
12539: PUSH
12540: LD_VAR 0 3
12544: PUSH
12545: LD_LOC 21
12549: IN
12550: OR
12551: IFFALSE 12562
// ComCancel ( factory ) ;
12553: LD_VAR 0 1
12557: PPUSH
12558: CALL_OW 127
// end ;
12562: PPOPN 5
12564: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12565: LD_VAR 0 2
12569: PUSH
12570: LD_LOC 18
12574: IN
12575: IFFALSE 12586
// ComCancel ( building ) ;
12577: LD_VAR 0 1
12581: PPUSH
12582: CALL_OW 127
// end ; end_of_file
12586: PPOPN 2
12588: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
12589: LD_INT 0
12591: PPUSH
12592: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12593: LD_ADDR_VAR 0 2
12597: PUSH
12598: LD_STRING #Multi1x1-Time
12600: PUSH
12601: LD_OWVAR 1
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12610: LD_INT 0
12612: PUSH
12613: LD_EXP 17
12617: PUSH
12618: LD_OWVAR 1
12622: MINUS
12623: LESSEQUAL
12624: IFFALSE 12655
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12626: LD_ADDR_VAR 0 2
12630: PUSH
12631: LD_VAR 0 2
12635: PUSH
12636: LD_STRING #allowedsibbomb
12638: PUSH
12639: LD_EXP 17
12643: PUSH
12644: LD_OWVAR 1
12648: MINUS
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: ADD
12654: ST_TO_ADDR
// if ( ExtraStrings ) then
12655: LD_EXP 58
12659: IFFALSE 12681
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12661: LD_ADDR_VAR 0 2
12665: PUSH
12666: LD_VAR 0 2
12670: PUSH
12671: LD_STRING 
12673: ADD
12674: PUSH
12675: LD_EXP 58
12679: ADD
12680: ST_TO_ADDR
// if ( LimitsStrings ) then
12681: CALL 9429 0 0
12685: IFFALSE 12707
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12687: LD_ADDR_VAR 0 2
12691: PUSH
12692: LD_VAR 0 2
12696: PUSH
12697: LD_STRING 
12699: ADD
12700: PUSH
12701: CALL 9429 0 0
12705: ADD
12706: ST_TO_ADDR
// Display_Strings := AllStrings ;
12707: LD_ADDR_OWVAR 47
12711: PUSH
12712: LD_VAR 0 2
12716: ST_TO_ADDR
// end ;
12717: LD_VAR 0 1
12721: RET
// every 0 0$1 do
12722: GO 12724
12724: DISABLE
// begin ShowTimer ;
12725: CALL 12589 0 0
// enable ;
12729: ENABLE
// end ; end_of_file
12730: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12731: LD_INT 0
12733: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12734: LD_VAR 0 1
12738: PPUSH
12739: CALL_OW 255
12743: PUSH
12744: LD_VAR 0 4
12748: EQUAL
12749: IFFALSE 12768
// begin SetAchievement ( ACH_RAD ) ;
12751: LD_STRING ACH_RAD
12753: PPUSH
12754: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12758: LD_STRING ACH_NL
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 564
// end end ;
12768: LD_VAR 0 5
12772: RET
// export function SA_Win ( side ) ; begin
12773: LD_INT 0
12775: PPUSH
// case side of 1 :
12776: LD_VAR 0 1
12780: PUSH
12781: LD_INT 1
12783: DOUBLE
12784: EQUAL
12785: IFTRUE 12789
12787: GO 12802
12789: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12790: LD_STRING ACH_AH
12792: PPUSH
12793: LD_INT 1
12795: PPUSH
12796: CALL_OW 564
12800: GO 12965
12802: LD_INT 2
12804: DOUBLE
12805: EQUAL
12806: IFTRUE 12810
12808: GO 12823
12810: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12811: LD_STRING ACH_E
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL_OW 564
12821: GO 12965
12823: LD_INT 3
12825: DOUBLE
12826: EQUAL
12827: IFTRUE 12831
12829: GO 12844
12831: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12832: LD_STRING ACH_OOL
12834: PPUSH
12835: LD_INT 1
12837: PPUSH
12838: CALL_OW 564
12842: GO 12965
12844: LD_INT 1
12846: PUSH
12847: LD_INT 2
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: DOUBLE
12854: EQUAL
12855: IFTRUE 12859
12857: GO 12884
12859: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12860: LD_STRING ACH_AH
12862: PPUSH
12863: LD_REAL  5.00000000000000E-0001
12866: PPUSH
12867: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12871: LD_STRING ACH_E
12873: PPUSH
12874: LD_REAL  5.00000000000000E-0001
12877: PPUSH
12878: CALL_OW 564
// end ; [ 2 , 3 ] :
12882: GO 12965
12884: LD_INT 2
12886: PUSH
12887: LD_INT 3
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: DOUBLE
12894: EQUAL
12895: IFTRUE 12899
12897: GO 12924
12899: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12900: LD_STRING ACH_OOL
12902: PPUSH
12903: LD_REAL  5.00000000000000E-0001
12906: PPUSH
12907: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12911: LD_STRING ACH_E
12913: PPUSH
12914: LD_REAL  5.00000000000000E-0001
12917: PPUSH
12918: CALL_OW 564
// end ; [ 3 , 1 ] :
12922: GO 12965
12924: LD_INT 3
12926: PUSH
12927: LD_INT 1
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: DOUBLE
12934: EQUAL
12935: IFTRUE 12939
12937: GO 12964
12939: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12940: LD_STRING ACH_AH
12942: PPUSH
12943: LD_REAL  5.00000000000000E-0001
12946: PPUSH
12947: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12951: LD_STRING ACH_OOL
12953: PPUSH
12954: LD_REAL  5.00000000000000E-0001
12957: PPUSH
12958: CALL_OW 564
// end ; end ;
12962: GO 12965
12964: POP
// end ; end_of_file
12965: LD_VAR 0 2
12969: RET
// export function SetMpTechs ( ) ; var side , i ; begin
12970: LD_INT 0
12972: PPUSH
12973: PPUSH
12974: PPUSH
// for side = 1 to 8 do
12975: LD_ADDR_VAR 0 2
12979: PUSH
12980: DOUBLE
12981: LD_INT 1
12983: DEC
12984: ST_TO_ADDR
12985: LD_INT 8
12987: PUSH
12988: FOR_TO
12989: IFFALSE 13110
// begin for i = 1 to 72 do
12991: LD_ADDR_VAR 0 3
12995: PUSH
12996: DOUBLE
12997: LD_INT 1
12999: DEC
13000: ST_TO_ADDR
13001: LD_INT 72
13003: PUSH
13004: FOR_TO
13005: IFFALSE 13036
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
13007: LD_VAR 0 3
13011: PPUSH
13012: LD_VAR 0 2
13016: PPUSH
13017: LD_INT 0
13019: PPUSH
13020: LD_VAR 0 3
13024: PPUSH
13025: CALL_OW 565
13029: PPUSH
13030: CALL_OW 322
13034: GO 13004
13036: POP
13037: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
13038: LD_INT 73
13040: PPUSH
13041: LD_VAR 0 2
13045: PPUSH
13046: LD_INT 0
13048: PPUSH
13049: LD_INT 25
13051: PPUSH
13052: CALL_OW 565
13056: PPUSH
13057: CALL_OW 322
// for i = 0 to 40 do
13061: LD_ADDR_VAR 0 3
13065: PUSH
13066: DOUBLE
13067: LD_INT 0
13069: DEC
13070: ST_TO_ADDR
13071: LD_INT 40
13073: PUSH
13074: FOR_TO
13075: IFFALSE 13106
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
13077: LD_VAR 0 3
13081: PPUSH
13082: LD_VAR 0 2
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: LD_VAR 0 3
13094: PPUSH
13095: CALL_OW 565
13099: PPUSH
13100: CALL_OW 324
13104: GO 13074
13106: POP
13107: POP
// end ;
13108: GO 12988
13110: POP
13111: POP
// end ;
13112: LD_VAR 0 1
13116: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
13117: LD_INT 0
13119: PPUSH
13120: PPUSH
13121: PPUSH
// for side = 1 to 8 do
13122: LD_ADDR_VAR 0 3
13126: PUSH
13127: DOUBLE
13128: LD_INT 1
13130: DEC
13131: ST_TO_ADDR
13132: LD_INT 8
13134: PUSH
13135: FOR_TO
13136: IFFALSE 17132
// begin for i = 1 to 73 do
13138: LD_ADDR_VAR 0 4
13142: PUSH
13143: DOUBLE
13144: LD_INT 1
13146: DEC
13147: ST_TO_ADDR
13148: LD_INT 73
13150: PUSH
13151: FOR_TO
13152: IFFALSE 13173
// SetTech ( i , side , state_disabled ) ;
13154: LD_VAR 0 4
13158: PPUSH
13159: LD_VAR 0 3
13163: PPUSH
13164: LD_INT 0
13166: PPUSH
13167: CALL_OW 322
13171: GO 13151
13173: POP
13174: POP
// for i = 0 to 40 do
13175: LD_ADDR_VAR 0 4
13179: PUSH
13180: DOUBLE
13181: LD_INT 0
13183: DEC
13184: ST_TO_ADDR
13185: LD_INT 40
13187: PUSH
13188: FOR_TO
13189: IFFALSE 13210
// SetRestrict ( i , side , false ) ;
13191: LD_VAR 0 4
13195: PPUSH
13196: LD_VAR 0 3
13200: PPUSH
13201: LD_INT 0
13203: PPUSH
13204: CALL_OW 324
13208: GO 13188
13210: POP
13211: POP
// case level of 1 :
13212: LD_VAR 0 1
13216: PUSH
13217: LD_INT 1
13219: DOUBLE
13220: EQUAL
13221: IFTRUE 13225
13223: GO 13378
13225: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13226: LD_INT 35
13228: PPUSH
13229: LD_VAR 0 3
13233: PPUSH
13234: LD_INT 1
13236: PPUSH
13237: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13241: LD_INT 45
13243: PPUSH
13244: LD_VAR 0 3
13248: PPUSH
13249: LD_INT 1
13251: PPUSH
13252: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13256: LD_INT 46
13258: PPUSH
13259: LD_VAR 0 3
13263: PPUSH
13264: LD_INT 1
13266: PPUSH
13267: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13271: LD_INT 47
13273: PPUSH
13274: LD_VAR 0 3
13278: PPUSH
13279: LD_INT 1
13281: PPUSH
13282: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13286: LD_INT 0
13288: PPUSH
13289: LD_VAR 0 3
13293: PPUSH
13294: LD_INT 1
13296: PPUSH
13297: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13301: LD_INT 2
13303: PPUSH
13304: LD_VAR 0 3
13308: PPUSH
13309: LD_INT 1
13311: PPUSH
13312: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13316: LD_INT 4
13318: PPUSH
13319: LD_VAR 0 3
13323: PPUSH
13324: LD_INT 1
13326: PPUSH
13327: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13331: LD_INT 6
13333: PPUSH
13334: LD_VAR 0 3
13338: PPUSH
13339: LD_INT 1
13341: PPUSH
13342: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13346: LD_INT 29
13348: PPUSH
13349: LD_VAR 0 3
13353: PPUSH
13354: LD_INT 1
13356: PPUSH
13357: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13361: LD_INT 31
13363: PPUSH
13364: LD_VAR 0 3
13368: PPUSH
13369: LD_INT 1
13371: PPUSH
13372: CALL_OW 324
// end ; 2 :
13376: GO 17130
13378: LD_INT 2
13380: DOUBLE
13381: EQUAL
13382: IFTRUE 13386
13384: GO 13584
13386: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13387: LD_INT 35
13389: PPUSH
13390: LD_VAR 0 3
13394: PPUSH
13395: LD_INT 1
13397: PPUSH
13398: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13402: LD_INT 45
13404: PPUSH
13405: LD_VAR 0 3
13409: PPUSH
13410: LD_INT 1
13412: PPUSH
13413: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13417: LD_INT 46
13419: PPUSH
13420: LD_VAR 0 3
13424: PPUSH
13425: LD_INT 1
13427: PPUSH
13428: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13432: LD_INT 47
13434: PPUSH
13435: LD_VAR 0 3
13439: PPUSH
13440: LD_INT 1
13442: PPUSH
13443: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13447: LD_INT 1
13449: PPUSH
13450: LD_VAR 0 3
13454: PPUSH
13455: LD_INT 1
13457: PPUSH
13458: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13462: LD_INT 2
13464: PPUSH
13465: LD_VAR 0 3
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13477: LD_INT 11
13479: PPUSH
13480: LD_VAR 0 3
13484: PPUSH
13485: LD_INT 1
13487: PPUSH
13488: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13492: LD_INT 0
13494: PPUSH
13495: LD_VAR 0 3
13499: PPUSH
13500: LD_INT 1
13502: PPUSH
13503: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13507: LD_INT 2
13509: PPUSH
13510: LD_VAR 0 3
13514: PPUSH
13515: LD_INT 1
13517: PPUSH
13518: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13522: LD_INT 4
13524: PPUSH
13525: LD_VAR 0 3
13529: PPUSH
13530: LD_INT 1
13532: PPUSH
13533: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13537: LD_INT 6
13539: PPUSH
13540: LD_VAR 0 3
13544: PPUSH
13545: LD_INT 1
13547: PPUSH
13548: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13552: LD_INT 29
13554: PPUSH
13555: LD_VAR 0 3
13559: PPUSH
13560: LD_INT 1
13562: PPUSH
13563: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13567: LD_INT 31
13569: PPUSH
13570: LD_VAR 0 3
13574: PPUSH
13575: LD_INT 1
13577: PPUSH
13578: CALL_OW 324
// end ; 3 :
13582: GO 17130
13584: LD_INT 3
13586: DOUBLE
13587: EQUAL
13588: IFTRUE 13592
13590: GO 14045
13592: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13593: LD_INT 35
13595: PPUSH
13596: LD_VAR 0 3
13600: PPUSH
13601: LD_INT 1
13603: PPUSH
13604: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13608: LD_INT 45
13610: PPUSH
13611: LD_VAR 0 3
13615: PPUSH
13616: LD_INT 1
13618: PPUSH
13619: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13623: LD_INT 46
13625: PPUSH
13626: LD_VAR 0 3
13630: PPUSH
13631: LD_INT 1
13633: PPUSH
13634: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13638: LD_INT 47
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: LD_INT 1
13648: PPUSH
13649: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13653: LD_INT 1
13655: PPUSH
13656: LD_VAR 0 3
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13668: LD_INT 2
13670: PPUSH
13671: LD_VAR 0 3
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13683: LD_INT 11
13685: PPUSH
13686: LD_VAR 0 3
13690: PPUSH
13691: LD_INT 1
13693: PPUSH
13694: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13698: LD_INT 48
13700: PPUSH
13701: LD_VAR 0 3
13705: PPUSH
13706: LD_INT 1
13708: PPUSH
13709: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13713: LD_INT 69
13715: PPUSH
13716: LD_VAR 0 3
13720: PPUSH
13721: LD_INT 1
13723: PPUSH
13724: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13728: LD_INT 39
13730: PPUSH
13731: LD_VAR 0 3
13735: PPUSH
13736: LD_INT 1
13738: PPUSH
13739: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13743: LD_INT 43
13745: PPUSH
13746: LD_VAR 0 3
13750: PPUSH
13751: LD_INT 1
13753: PPUSH
13754: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13758: LD_INT 51
13760: PPUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: LD_INT 1
13768: PPUSH
13769: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13773: LD_INT 6
13775: PPUSH
13776: LD_VAR 0 3
13780: PPUSH
13781: LD_INT 1
13783: PPUSH
13784: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13788: LD_INT 0
13790: PPUSH
13791: LD_VAR 0 3
13795: PPUSH
13796: LD_INT 1
13798: PPUSH
13799: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13803: LD_INT 2
13805: PPUSH
13806: LD_VAR 0 3
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13818: LD_INT 3
13820: PPUSH
13821: LD_VAR 0 3
13825: PPUSH
13826: LD_INT 1
13828: PPUSH
13829: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13833: LD_INT 4
13835: PPUSH
13836: LD_VAR 0 3
13840: PPUSH
13841: LD_INT 1
13843: PPUSH
13844: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13848: LD_INT 6
13850: PPUSH
13851: LD_VAR 0 3
13855: PPUSH
13856: LD_INT 1
13858: PPUSH
13859: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13863: LD_INT 7
13865: PPUSH
13866: LD_VAR 0 3
13870: PPUSH
13871: LD_INT 1
13873: PPUSH
13874: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13878: LD_INT 8
13880: PPUSH
13881: LD_VAR 0 3
13885: PPUSH
13886: LD_INT 1
13888: PPUSH
13889: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13893: LD_INT 10
13895: PPUSH
13896: LD_VAR 0 3
13900: PPUSH
13901: LD_INT 1
13903: PPUSH
13904: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13908: LD_INT 15
13910: PPUSH
13911: LD_VAR 0 3
13915: PPUSH
13916: LD_INT 1
13918: PPUSH
13919: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13923: LD_INT 16
13925: PPUSH
13926: LD_VAR 0 3
13930: PPUSH
13931: LD_INT 1
13933: PPUSH
13934: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13938: LD_INT 17
13940: PPUSH
13941: LD_VAR 0 3
13945: PPUSH
13946: LD_INT 1
13948: PPUSH
13949: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13953: LD_INT 20
13955: PPUSH
13956: LD_VAR 0 3
13960: PPUSH
13961: LD_INT 1
13963: PPUSH
13964: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13968: LD_INT 26
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: LD_INT 1
13978: PPUSH
13979: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13983: LD_INT 27
13985: PPUSH
13986: LD_VAR 0 3
13990: PPUSH
13991: LD_INT 1
13993: PPUSH
13994: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13998: LD_INT 29
14000: PPUSH
14001: LD_VAR 0 3
14005: PPUSH
14006: LD_INT 1
14008: PPUSH
14009: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14013: LD_INT 31
14015: PPUSH
14016: LD_VAR 0 3
14020: PPUSH
14021: LD_INT 1
14023: PPUSH
14024: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14028: LD_INT 32
14030: PPUSH
14031: LD_VAR 0 3
14035: PPUSH
14036: LD_INT 1
14038: PPUSH
14039: CALL_OW 324
// end ; 4 :
14043: GO 17130
14045: LD_INT 4
14047: DOUBLE
14048: EQUAL
14049: IFTRUE 14053
14051: GO 15001
14053: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14054: LD_INT 35
14056: PPUSH
14057: LD_VAR 0 3
14061: PPUSH
14062: LD_INT 1
14064: PPUSH
14065: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14069: LD_INT 45
14071: PPUSH
14072: LD_VAR 0 3
14076: PPUSH
14077: LD_INT 1
14079: PPUSH
14080: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14084: LD_INT 46
14086: PPUSH
14087: LD_VAR 0 3
14091: PPUSH
14092: LD_INT 1
14094: PPUSH
14095: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14099: LD_INT 47
14101: PPUSH
14102: LD_VAR 0 3
14106: PPUSH
14107: LD_INT 1
14109: PPUSH
14110: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14114: LD_INT 1
14116: PPUSH
14117: LD_VAR 0 3
14121: PPUSH
14122: LD_INT 1
14124: PPUSH
14125: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14129: LD_INT 2
14131: PPUSH
14132: LD_VAR 0 3
14136: PPUSH
14137: LD_INT 1
14139: PPUSH
14140: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14144: LD_INT 11
14146: PPUSH
14147: LD_VAR 0 3
14151: PPUSH
14152: LD_INT 1
14154: PPUSH
14155: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14159: LD_INT 20
14161: PPUSH
14162: LD_VAR 0 3
14166: PPUSH
14167: LD_INT 1
14169: PPUSH
14170: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14174: LD_INT 48
14176: PPUSH
14177: LD_VAR 0 3
14181: PPUSH
14182: LD_INT 1
14184: PPUSH
14185: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14189: LD_INT 49
14191: PPUSH
14192: LD_VAR 0 3
14196: PPUSH
14197: LD_INT 1
14199: PPUSH
14200: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14204: LD_INT 69
14206: PPUSH
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14219: LD_INT 39
14221: PPUSH
14222: LD_VAR 0 3
14226: PPUSH
14227: LD_INT 1
14229: PPUSH
14230: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14234: LD_INT 34
14236: PPUSH
14237: LD_VAR 0 3
14241: PPUSH
14242: LD_INT 1
14244: PPUSH
14245: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14249: LD_INT 42
14251: PPUSH
14252: LD_VAR 0 3
14256: PPUSH
14257: LD_INT 1
14259: PPUSH
14260: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14264: LD_INT 44
14266: PPUSH
14267: LD_VAR 0 3
14271: PPUSH
14272: LD_INT 1
14274: PPUSH
14275: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14279: LD_INT 41
14281: PPUSH
14282: LD_VAR 0 3
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14294: LD_INT 43
14296: PPUSH
14297: LD_VAR 0 3
14301: PPUSH
14302: LD_INT 1
14304: PPUSH
14305: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14309: LD_INT 70
14311: PPUSH
14312: LD_VAR 0 3
14316: PPUSH
14317: LD_INT 1
14319: PPUSH
14320: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14324: LD_INT 51
14326: PPUSH
14327: LD_VAR 0 3
14331: PPUSH
14332: LD_INT 1
14334: PPUSH
14335: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14339: LD_INT 52
14341: PPUSH
14342: LD_VAR 0 3
14346: PPUSH
14347: LD_INT 1
14349: PPUSH
14350: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14354: LD_INT 6
14356: PPUSH
14357: LD_VAR 0 3
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14369: LD_INT 15
14371: PPUSH
14372: LD_VAR 0 3
14376: PPUSH
14377: LD_INT 1
14379: PPUSH
14380: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14384: LD_INT 7
14386: PPUSH
14387: LD_VAR 0 3
14391: PPUSH
14392: LD_INT 1
14394: PPUSH
14395: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14399: LD_INT 12
14401: PPUSH
14402: LD_VAR 0 3
14406: PPUSH
14407: LD_INT 1
14409: PPUSH
14410: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14414: LD_INT 18
14416: PPUSH
14417: LD_VAR 0 3
14421: PPUSH
14422: LD_INT 1
14424: PPUSH
14425: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14429: LD_INT 60
14431: PPUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: LD_INT 1
14439: PPUSH
14440: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14444: LD_INT 9
14446: PPUSH
14447: LD_VAR 0 3
14451: PPUSH
14452: LD_INT 1
14454: PPUSH
14455: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14459: LD_INT 30
14461: PPUSH
14462: LD_VAR 0 3
14466: PPUSH
14467: LD_INT 1
14469: PPUSH
14470: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14474: LD_INT 37
14476: PPUSH
14477: LD_VAR 0 3
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14489: LD_INT 5
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: LD_INT 1
14499: PPUSH
14500: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14504: LD_INT 66
14506: PPUSH
14507: LD_VAR 0 3
14511: PPUSH
14512: LD_INT 1
14514: PPUSH
14515: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14519: LD_INT 21
14521: PPUSH
14522: LD_VAR 0 3
14526: PPUSH
14527: LD_INT 1
14529: PPUSH
14530: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14534: LD_INT 22
14536: PPUSH
14537: LD_VAR 0 3
14541: PPUSH
14542: LD_INT 1
14544: PPUSH
14545: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14549: LD_INT 54
14551: PPUSH
14552: LD_VAR 0 3
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14564: LD_INT 0
14566: PPUSH
14567: LD_VAR 0 3
14571: PPUSH
14572: LD_INT 1
14574: PPUSH
14575: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14579: LD_INT 1
14581: PPUSH
14582: LD_VAR 0 3
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14594: LD_INT 2
14596: PPUSH
14597: LD_VAR 0 3
14601: PPUSH
14602: LD_INT 1
14604: PPUSH
14605: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14609: LD_INT 3
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14624: LD_INT 4
14626: PPUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_INT 1
14634: PPUSH
14635: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14639: LD_INT 5
14641: PPUSH
14642: LD_VAR 0 3
14646: PPUSH
14647: LD_INT 1
14649: PPUSH
14650: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14654: LD_INT 6
14656: PPUSH
14657: LD_VAR 0 3
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14669: LD_INT 7
14671: PPUSH
14672: LD_VAR 0 3
14676: PPUSH
14677: LD_INT 1
14679: PPUSH
14680: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14684: LD_INT 8
14686: PPUSH
14687: LD_VAR 0 3
14691: PPUSH
14692: LD_INT 1
14694: PPUSH
14695: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14699: LD_INT 10
14701: PPUSH
14702: LD_VAR 0 3
14706: PPUSH
14707: LD_INT 1
14709: PPUSH
14710: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14714: LD_INT 11
14716: PPUSH
14717: LD_VAR 0 3
14721: PPUSH
14722: LD_INT 1
14724: PPUSH
14725: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14729: LD_INT 12
14731: PPUSH
14732: LD_VAR 0 3
14736: PPUSH
14737: LD_INT 1
14739: PPUSH
14740: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14744: LD_INT 13
14746: PPUSH
14747: LD_VAR 0 3
14751: PPUSH
14752: LD_INT 1
14754: PPUSH
14755: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14759: LD_INT 14
14761: PPUSH
14762: LD_VAR 0 3
14766: PPUSH
14767: LD_INT 1
14769: PPUSH
14770: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14774: LD_INT 15
14776: PPUSH
14777: LD_VAR 0 3
14781: PPUSH
14782: LD_INT 1
14784: PPUSH
14785: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14789: LD_INT 16
14791: PPUSH
14792: LD_VAR 0 3
14796: PPUSH
14797: LD_INT 1
14799: PPUSH
14800: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14804: LD_INT 17
14806: PPUSH
14807: LD_VAR 0 3
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14819: LD_INT 19
14821: PPUSH
14822: LD_VAR 0 3
14826: PPUSH
14827: LD_INT 1
14829: PPUSH
14830: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14834: LD_INT 20
14836: PPUSH
14837: LD_VAR 0 3
14841: PPUSH
14842: LD_INT 1
14844: PPUSH
14845: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14849: LD_INT 21
14851: PPUSH
14852: LD_VAR 0 3
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14864: LD_INT 23
14866: PPUSH
14867: LD_VAR 0 3
14871: PPUSH
14872: LD_INT 1
14874: PPUSH
14875: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14879: LD_INT 26
14881: PPUSH
14882: LD_VAR 0 3
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14894: LD_INT 27
14896: PPUSH
14897: LD_VAR 0 3
14901: PPUSH
14902: LD_INT 1
14904: PPUSH
14905: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14909: LD_INT 28
14911: PPUSH
14912: LD_VAR 0 3
14916: PPUSH
14917: LD_INT 1
14919: PPUSH
14920: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14924: LD_INT 29
14926: PPUSH
14927: LD_VAR 0 3
14931: PPUSH
14932: LD_INT 1
14934: PPUSH
14935: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14939: LD_INT 30
14941: PPUSH
14942: LD_VAR 0 3
14946: PPUSH
14947: LD_INT 1
14949: PPUSH
14950: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14954: LD_INT 31
14956: PPUSH
14957: LD_VAR 0 3
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14969: LD_INT 32
14971: PPUSH
14972: LD_VAR 0 3
14976: PPUSH
14977: LD_INT 1
14979: PPUSH
14980: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14984: LD_INT 36
14986: PPUSH
14987: LD_VAR 0 3
14991: PPUSH
14992: LD_INT 1
14994: PPUSH
14995: CALL_OW 324
// end ; 5 :
14999: GO 17130
15001: LD_INT 5
15003: DOUBLE
15004: EQUAL
15005: IFTRUE 15009
15007: GO 16122
15009: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15010: LD_INT 35
15012: PPUSH
15013: LD_VAR 0 3
15017: PPUSH
15018: LD_INT 1
15020: PPUSH
15021: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15025: LD_INT 45
15027: PPUSH
15028: LD_VAR 0 3
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15040: LD_INT 46
15042: PPUSH
15043: LD_VAR 0 3
15047: PPUSH
15048: LD_INT 1
15050: PPUSH
15051: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15055: LD_INT 47
15057: PPUSH
15058: LD_VAR 0 3
15062: PPUSH
15063: LD_INT 1
15065: PPUSH
15066: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15070: LD_INT 1
15072: PPUSH
15073: LD_VAR 0 3
15077: PPUSH
15078: LD_INT 1
15080: PPUSH
15081: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15085: LD_INT 2
15087: PPUSH
15088: LD_VAR 0 3
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15100: LD_INT 11
15102: PPUSH
15103: LD_VAR 0 3
15107: PPUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15115: LD_INT 20
15117: PPUSH
15118: LD_VAR 0 3
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15130: LD_INT 48
15132: PPUSH
15133: LD_VAR 0 3
15137: PPUSH
15138: LD_INT 1
15140: PPUSH
15141: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15145: LD_INT 49
15147: PPUSH
15148: LD_VAR 0 3
15152: PPUSH
15153: LD_INT 1
15155: PPUSH
15156: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15160: LD_INT 69
15162: PPUSH
15163: LD_VAR 0 3
15167: PPUSH
15168: LD_INT 1
15170: PPUSH
15171: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15175: LD_INT 39
15177: PPUSH
15178: LD_VAR 0 3
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15190: LD_INT 34
15192: PPUSH
15193: LD_VAR 0 3
15197: PPUSH
15198: LD_INT 1
15200: PPUSH
15201: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15205: LD_INT 42
15207: PPUSH
15208: LD_VAR 0 3
15212: PPUSH
15213: LD_INT 1
15215: PPUSH
15216: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15220: LD_INT 44
15222: PPUSH
15223: LD_VAR 0 3
15227: PPUSH
15228: LD_INT 1
15230: PPUSH
15231: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15235: LD_INT 41
15237: PPUSH
15238: LD_VAR 0 3
15242: PPUSH
15243: LD_INT 1
15245: PPUSH
15246: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15250: LD_INT 40
15252: PPUSH
15253: LD_VAR 0 3
15257: PPUSH
15258: LD_INT 1
15260: PPUSH
15261: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15265: LD_INT 43
15267: PPUSH
15268: LD_VAR 0 3
15272: PPUSH
15273: LD_INT 1
15275: PPUSH
15276: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15280: LD_INT 70
15282: PPUSH
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 1
15290: PPUSH
15291: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15295: LD_INT 51
15297: PPUSH
15298: LD_VAR 0 3
15302: PPUSH
15303: LD_INT 1
15305: PPUSH
15306: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15310: LD_INT 52
15312: PPUSH
15313: LD_VAR 0 3
15317: PPUSH
15318: LD_INT 1
15320: PPUSH
15321: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15325: LD_INT 6
15327: PPUSH
15328: LD_VAR 0 3
15332: PPUSH
15333: LD_INT 1
15335: PPUSH
15336: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15340: LD_INT 15
15342: PPUSH
15343: LD_VAR 0 3
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15355: LD_INT 7
15357: PPUSH
15358: LD_VAR 0 3
15362: PPUSH
15363: LD_INT 1
15365: PPUSH
15366: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15370: LD_INT 12
15372: PPUSH
15373: LD_VAR 0 3
15377: PPUSH
15378: LD_INT 1
15380: PPUSH
15381: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15385: LD_INT 17
15387: PPUSH
15388: LD_VAR 0 3
15392: PPUSH
15393: LD_INT 1
15395: PPUSH
15396: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15400: LD_INT 18
15402: PPUSH
15403: LD_VAR 0 3
15407: PPUSH
15408: LD_INT 1
15410: PPUSH
15411: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15415: LD_INT 60
15417: PPUSH
15418: LD_VAR 0 3
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15430: LD_INT 32
15432: PPUSH
15433: LD_VAR 0 3
15437: PPUSH
15438: LD_INT 1
15440: PPUSH
15441: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15445: LD_INT 9
15447: PPUSH
15448: LD_VAR 0 3
15452: PPUSH
15453: LD_INT 1
15455: PPUSH
15456: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15460: LD_INT 57
15462: PPUSH
15463: LD_VAR 0 3
15467: PPUSH
15468: LD_INT 1
15470: PPUSH
15471: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15475: LD_INT 30
15477: PPUSH
15478: LD_VAR 0 3
15482: PPUSH
15483: LD_INT 1
15485: PPUSH
15486: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15490: LD_INT 37
15492: PPUSH
15493: LD_VAR 0 3
15497: PPUSH
15498: LD_INT 1
15500: PPUSH
15501: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15505: LD_INT 63
15507: PPUSH
15508: LD_VAR 0 3
15512: PPUSH
15513: LD_INT 1
15515: PPUSH
15516: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15520: LD_INT 3
15522: PPUSH
15523: LD_VAR 0 3
15527: PPUSH
15528: LD_INT 1
15530: PPUSH
15531: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15535: LD_INT 4
15537: PPUSH
15538: LD_VAR 0 3
15542: PPUSH
15543: LD_INT 1
15545: PPUSH
15546: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15550: LD_INT 5
15552: PPUSH
15553: LD_VAR 0 3
15557: PPUSH
15558: LD_INT 1
15560: PPUSH
15561: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15565: LD_INT 66
15567: PPUSH
15568: LD_VAR 0 3
15572: PPUSH
15573: LD_INT 1
15575: PPUSH
15576: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15580: LD_INT 21
15582: PPUSH
15583: LD_VAR 0 3
15587: PPUSH
15588: LD_INT 1
15590: PPUSH
15591: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15595: LD_INT 22
15597: PPUSH
15598: LD_VAR 0 3
15602: PPUSH
15603: LD_INT 1
15605: PPUSH
15606: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15610: LD_INT 19
15612: PPUSH
15613: LD_VAR 0 3
15617: PPUSH
15618: LD_INT 1
15620: PPUSH
15621: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15625: LD_INT 54
15627: PPUSH
15628: LD_VAR 0 3
15632: PPUSH
15633: LD_INT 1
15635: PPUSH
15636: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15640: LD_INT 55
15642: PPUSH
15643: LD_VAR 0 3
15647: PPUSH
15648: LD_INT 1
15650: PPUSH
15651: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15655: LD_INT 0
15657: PPUSH
15658: LD_VAR 0 3
15662: PPUSH
15663: LD_INT 1
15665: PPUSH
15666: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15670: LD_INT 1
15672: PPUSH
15673: LD_VAR 0 3
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15685: LD_INT 2
15687: PPUSH
15688: LD_VAR 0 3
15692: PPUSH
15693: LD_INT 1
15695: PPUSH
15696: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15700: LD_INT 3
15702: PPUSH
15703: LD_VAR 0 3
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15715: LD_INT 4
15717: PPUSH
15718: LD_VAR 0 3
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15730: LD_INT 5
15732: PPUSH
15733: LD_VAR 0 3
15737: PPUSH
15738: LD_INT 1
15740: PPUSH
15741: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15745: LD_INT 6
15747: PPUSH
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 1
15755: PPUSH
15756: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15760: LD_INT 7
15762: PPUSH
15763: LD_VAR 0 3
15767: PPUSH
15768: LD_INT 1
15770: PPUSH
15771: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15775: LD_INT 8
15777: PPUSH
15778: LD_VAR 0 3
15782: PPUSH
15783: LD_INT 1
15785: PPUSH
15786: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15790: LD_INT 10
15792: PPUSH
15793: LD_VAR 0 3
15797: PPUSH
15798: LD_INT 1
15800: PPUSH
15801: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15805: LD_INT 11
15807: PPUSH
15808: LD_VAR 0 3
15812: PPUSH
15813: LD_INT 1
15815: PPUSH
15816: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15820: LD_INT 12
15822: PPUSH
15823: LD_VAR 0 3
15827: PPUSH
15828: LD_INT 1
15830: PPUSH
15831: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15835: LD_INT 13
15837: PPUSH
15838: LD_VAR 0 3
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15850: LD_INT 14
15852: PPUSH
15853: LD_VAR 0 3
15857: PPUSH
15858: LD_INT 1
15860: PPUSH
15861: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15865: LD_INT 15
15867: PPUSH
15868: LD_VAR 0 3
15872: PPUSH
15873: LD_INT 1
15875: PPUSH
15876: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15880: LD_INT 16
15882: PPUSH
15883: LD_VAR 0 3
15887: PPUSH
15888: LD_INT 1
15890: PPUSH
15891: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15895: LD_INT 17
15897: PPUSH
15898: LD_VAR 0 3
15902: PPUSH
15903: LD_INT 1
15905: PPUSH
15906: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15910: LD_INT 18
15912: PPUSH
15913: LD_VAR 0 3
15917: PPUSH
15918: LD_INT 1
15920: PPUSH
15921: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15925: LD_INT 19
15927: PPUSH
15928: LD_VAR 0 3
15932: PPUSH
15933: LD_INT 1
15935: PPUSH
15936: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15940: LD_INT 20
15942: PPUSH
15943: LD_VAR 0 3
15947: PPUSH
15948: LD_INT 1
15950: PPUSH
15951: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15955: LD_INT 21
15957: PPUSH
15958: LD_VAR 0 3
15962: PPUSH
15963: LD_INT 1
15965: PPUSH
15966: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15970: LD_INT 23
15972: PPUSH
15973: LD_VAR 0 3
15977: PPUSH
15978: LD_INT 1
15980: PPUSH
15981: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15985: LD_INT 26
15987: PPUSH
15988: LD_VAR 0 3
15992: PPUSH
15993: LD_INT 1
15995: PPUSH
15996: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16000: LD_INT 27
16002: PPUSH
16003: LD_VAR 0 3
16007: PPUSH
16008: LD_INT 1
16010: PPUSH
16011: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16015: LD_INT 28
16017: PPUSH
16018: LD_VAR 0 3
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16030: LD_INT 29
16032: PPUSH
16033: LD_VAR 0 3
16037: PPUSH
16038: LD_INT 1
16040: PPUSH
16041: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16045: LD_INT 30
16047: PPUSH
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_INT 1
16055: PPUSH
16056: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16060: LD_INT 31
16062: PPUSH
16063: LD_VAR 0 3
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16075: LD_INT 32
16077: PPUSH
16078: LD_VAR 0 3
16082: PPUSH
16083: LD_INT 1
16085: PPUSH
16086: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
16090: LD_INT 33
16092: PPUSH
16093: LD_VAR 0 3
16097: PPUSH
16098: LD_INT 1
16100: PPUSH
16101: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16105: LD_INT 36
16107: PPUSH
16108: LD_VAR 0 3
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: CALL_OW 324
// end ; 6 :
16120: GO 17130
16122: LD_INT 6
16124: DOUBLE
16125: EQUAL
16126: IFTRUE 16130
16128: GO 17055
16130: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16131: LD_INT 35
16133: PPUSH
16134: LD_VAR 0 3
16138: PPUSH
16139: LD_INT 1
16141: PPUSH
16142: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16146: LD_INT 45
16148: PPUSH
16149: LD_VAR 0 3
16153: PPUSH
16154: LD_INT 1
16156: PPUSH
16157: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16161: LD_INT 46
16163: PPUSH
16164: LD_VAR 0 3
16168: PPUSH
16169: LD_INT 1
16171: PPUSH
16172: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16176: LD_INT 47
16178: PPUSH
16179: LD_VAR 0 3
16183: PPUSH
16184: LD_INT 1
16186: PPUSH
16187: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16191: LD_INT 1
16193: PPUSH
16194: LD_VAR 0 3
16198: PPUSH
16199: LD_INT 1
16201: PPUSH
16202: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16206: LD_INT 2
16208: PPUSH
16209: LD_VAR 0 3
16213: PPUSH
16214: LD_INT 1
16216: PPUSH
16217: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16221: LD_INT 11
16223: PPUSH
16224: LD_VAR 0 3
16228: PPUSH
16229: LD_INT 1
16231: PPUSH
16232: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16236: LD_INT 20
16238: PPUSH
16239: LD_VAR 0 3
16243: PPUSH
16244: LD_INT 1
16246: PPUSH
16247: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16251: LD_INT 48
16253: PPUSH
16254: LD_VAR 0 3
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16266: LD_INT 49
16268: PPUSH
16269: LD_VAR 0 3
16273: PPUSH
16274: LD_INT 1
16276: PPUSH
16277: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
16281: LD_INT 50
16283: PPUSH
16284: LD_VAR 0 3
16288: PPUSH
16289: LD_INT 1
16291: PPUSH
16292: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16296: LD_INT 69
16298: PPUSH
16299: LD_VAR 0 3
16303: PPUSH
16304: LD_INT 1
16306: PPUSH
16307: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16311: LD_INT 39
16313: PPUSH
16314: LD_VAR 0 3
16318: PPUSH
16319: LD_INT 1
16321: PPUSH
16322: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16326: LD_INT 34
16328: PPUSH
16329: LD_VAR 0 3
16333: PPUSH
16334: LD_INT 1
16336: PPUSH
16337: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16341: LD_INT 42
16343: PPUSH
16344: LD_VAR 0 3
16348: PPUSH
16349: LD_INT 1
16351: PPUSH
16352: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16356: LD_INT 44
16358: PPUSH
16359: LD_VAR 0 3
16363: PPUSH
16364: LD_INT 1
16366: PPUSH
16367: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16371: LD_INT 41
16373: PPUSH
16374: LD_VAR 0 3
16378: PPUSH
16379: LD_INT 1
16381: PPUSH
16382: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
16386: LD_INT 13
16388: PPUSH
16389: LD_VAR 0 3
16393: PPUSH
16394: LD_INT 1
16396: PPUSH
16397: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16401: LD_INT 40
16403: PPUSH
16404: LD_VAR 0 3
16408: PPUSH
16409: LD_INT 1
16411: PPUSH
16412: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16416: LD_INT 43
16418: PPUSH
16419: LD_VAR 0 3
16423: PPUSH
16424: LD_INT 1
16426: PPUSH
16427: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16431: LD_INT 70
16433: PPUSH
16434: LD_VAR 0 3
16438: PPUSH
16439: LD_INT 1
16441: PPUSH
16442: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
16446: LD_INT 23
16448: PPUSH
16449: LD_VAR 0 3
16453: PPUSH
16454: LD_INT 1
16456: PPUSH
16457: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16461: LD_INT 51
16463: PPUSH
16464: LD_VAR 0 3
16468: PPUSH
16469: LD_INT 1
16471: PPUSH
16472: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16476: LD_INT 52
16478: PPUSH
16479: LD_VAR 0 3
16483: PPUSH
16484: LD_INT 1
16486: PPUSH
16487: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16491: LD_INT 6
16493: PPUSH
16494: LD_VAR 0 3
16498: PPUSH
16499: LD_INT 1
16501: PPUSH
16502: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16506: LD_INT 15
16508: PPUSH
16509: LD_VAR 0 3
16513: PPUSH
16514: LD_INT 1
16516: PPUSH
16517: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16521: LD_INT 7
16523: PPUSH
16524: LD_VAR 0 3
16528: PPUSH
16529: LD_INT 1
16531: PPUSH
16532: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16536: LD_INT 12
16538: PPUSH
16539: LD_VAR 0 3
16543: PPUSH
16544: LD_INT 1
16546: PPUSH
16547: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
16551: LD_INT 10
16553: PPUSH
16554: LD_VAR 0 3
16558: PPUSH
16559: LD_INT 1
16561: PPUSH
16562: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16566: LD_INT 17
16568: PPUSH
16569: LD_VAR 0 3
16573: PPUSH
16574: LD_INT 1
16576: PPUSH
16577: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16581: LD_INT 18
16583: PPUSH
16584: LD_VAR 0 3
16588: PPUSH
16589: LD_INT 1
16591: PPUSH
16592: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16596: LD_INT 60
16598: PPUSH
16599: LD_VAR 0 3
16603: PPUSH
16604: LD_INT 1
16606: PPUSH
16607: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
16611: LD_INT 61
16613: PPUSH
16614: LD_VAR 0 3
16618: PPUSH
16619: LD_INT 1
16621: PPUSH
16622: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16626: LD_INT 32
16628: PPUSH
16629: LD_VAR 0 3
16633: PPUSH
16634: LD_INT 1
16636: PPUSH
16637: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
16641: LD_INT 27
16643: PPUSH
16644: LD_VAR 0 3
16648: PPUSH
16649: LD_INT 1
16651: PPUSH
16652: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
16656: LD_INT 36
16658: PPUSH
16659: LD_VAR 0 3
16663: PPUSH
16664: LD_INT 1
16666: PPUSH
16667: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
16671: LD_INT 33
16673: PPUSH
16674: LD_VAR 0 3
16678: PPUSH
16679: LD_INT 1
16681: PPUSH
16682: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16686: LD_INT 9
16688: PPUSH
16689: LD_VAR 0 3
16693: PPUSH
16694: LD_INT 1
16696: PPUSH
16697: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
16701: LD_INT 38
16703: PPUSH
16704: LD_VAR 0 3
16708: PPUSH
16709: LD_INT 1
16711: PPUSH
16712: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16716: LD_INT 57
16718: PPUSH
16719: LD_VAR 0 3
16723: PPUSH
16724: LD_INT 1
16726: PPUSH
16727: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
16731: LD_INT 58
16733: PPUSH
16734: LD_VAR 0 3
16738: PPUSH
16739: LD_INT 1
16741: PPUSH
16742: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
16746: LD_INT 28
16748: PPUSH
16749: LD_VAR 0 3
16753: PPUSH
16754: LD_INT 1
16756: PPUSH
16757: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
16761: LD_INT 29
16763: PPUSH
16764: LD_VAR 0 3
16768: PPUSH
16769: LD_INT 1
16771: PPUSH
16772: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16776: LD_INT 30
16778: PPUSH
16779: LD_VAR 0 3
16783: PPUSH
16784: LD_INT 1
16786: PPUSH
16787: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16791: LD_INT 37
16793: PPUSH
16794: LD_VAR 0 3
16798: PPUSH
16799: LD_INT 1
16801: PPUSH
16802: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16806: LD_INT 63
16808: PPUSH
16809: LD_VAR 0 3
16813: PPUSH
16814: LD_INT 1
16816: PPUSH
16817: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
16821: LD_INT 64
16823: PPUSH
16824: LD_VAR 0 3
16828: PPUSH
16829: LD_INT 1
16831: PPUSH
16832: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16836: LD_INT 3
16838: PPUSH
16839: LD_VAR 0 3
16843: PPUSH
16844: LD_INT 1
16846: PPUSH
16847: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16851: LD_INT 4
16853: PPUSH
16854: LD_VAR 0 3
16858: PPUSH
16859: LD_INT 1
16861: PPUSH
16862: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16866: LD_INT 5
16868: PPUSH
16869: LD_VAR 0 3
16873: PPUSH
16874: LD_INT 1
16876: PPUSH
16877: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16881: LD_INT 8
16883: PPUSH
16884: LD_VAR 0 3
16888: PPUSH
16889: LD_INT 1
16891: PPUSH
16892: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16896: LD_INT 66
16898: PPUSH
16899: LD_VAR 0 3
16903: PPUSH
16904: LD_INT 1
16906: PPUSH
16907: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16911: LD_INT 67
16913: PPUSH
16914: LD_VAR 0 3
16918: PPUSH
16919: LD_INT 1
16921: PPUSH
16922: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16926: LD_INT 21
16928: PPUSH
16929: LD_VAR 0 3
16933: PPUSH
16934: LD_INT 1
16936: PPUSH
16937: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16941: LD_INT 22
16943: PPUSH
16944: LD_VAR 0 3
16948: PPUSH
16949: LD_INT 1
16951: PPUSH
16952: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16956: LD_INT 19
16958: PPUSH
16959: LD_VAR 0 3
16963: PPUSH
16964: LD_INT 1
16966: PPUSH
16967: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16971: LD_INT 26
16973: PPUSH
16974: LD_VAR 0 3
16978: PPUSH
16979: LD_INT 1
16981: PPUSH
16982: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16986: LD_INT 54
16988: PPUSH
16989: LD_VAR 0 3
16993: PPUSH
16994: LD_INT 1
16996: PPUSH
16997: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17001: LD_INT 55
17003: PPUSH
17004: LD_VAR 0 3
17008: PPUSH
17009: LD_INT 1
17011: PPUSH
17012: CALL_OW 322
// for i = 0 to 39 do
17016: LD_ADDR_VAR 0 4
17020: PUSH
17021: DOUBLE
17022: LD_INT 0
17024: DEC
17025: ST_TO_ADDR
17026: LD_INT 39
17028: PUSH
17029: FOR_TO
17030: IFFALSE 17051
// SetRestrict ( i , side , true ) ;
17032: LD_VAR 0 4
17036: PPUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: LD_INT 1
17044: PPUSH
17045: CALL_OW 324
17049: GO 17029
17051: POP
17052: POP
// end ; else
17053: GO 17130
17055: POP
// begin for i = 1 to 73 do
17056: LD_ADDR_VAR 0 4
17060: PUSH
17061: DOUBLE
17062: LD_INT 1
17064: DEC
17065: ST_TO_ADDR
17066: LD_INT 73
17068: PUSH
17069: FOR_TO
17070: IFFALSE 17091
// SetTech ( i , side , state_enabled ) ;
17072: LD_VAR 0 4
17076: PPUSH
17077: LD_VAR 0 3
17081: PPUSH
17082: LD_INT 1
17084: PPUSH
17085: CALL_OW 322
17089: GO 17069
17091: POP
17092: POP
// for i = 0 to 39 do
17093: LD_ADDR_VAR 0 4
17097: PUSH
17098: DOUBLE
17099: LD_INT 0
17101: DEC
17102: ST_TO_ADDR
17103: LD_INT 39
17105: PUSH
17106: FOR_TO
17107: IFFALSE 17128
// SetRestrict ( i , side , true ) ;
17109: LD_VAR 0 4
17113: PPUSH
17114: LD_VAR 0 3
17118: PPUSH
17119: LD_INT 1
17121: PPUSH
17122: CALL_OW 324
17126: GO 17106
17128: POP
17129: POP
// end ; end ; end ;
17130: GO 13135
17132: POP
17133: POP
// end ;
17134: LD_VAR 0 2
17138: RET
