// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , tech_level ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 41
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 21
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 21
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 19
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 22
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 20
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 21
 285: PUSH
 286: LD_EXP 21
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 20
 308: PUSH
 309: LD_EXP 20
 313: PPUSH
 314: LD_EXP 19
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 20
 329: PUSH
 330: LD_EXP 19
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 24
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 21
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 24
 420: PUSH
 421: LD_EXP 24
 425: PPUSH
 426: LD_EXP 21
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 451: LD_ADDR_EXP 23
 455: PUSH
 456: LD_EXP 19
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: EMPTY
 465: LIST
 466: DIFF
 467: PUSH
 468: LD_INT 1
 470: GREATER
 471: ST_TO_ADDR
// if Multiplayer then
 472: LD_OWVAR 4
 476: IFFALSE 727
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 478: LD_ADDR_EXP 43
 482: PUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 491: LD_ADDR_EXP 44
 495: PUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 504: LD_ADDR_EXP 45
 508: PUSH
 509: LD_INT 2
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 517: LD_ADDR_EXP 46
 521: PUSH
 522: LD_INT 3
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 530: LD_ADDR_EXP 47
 534: PUSH
 535: LD_INT 4
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 543: LD_ADDR_EXP 48
 547: PUSH
 548: LD_INT 5
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 556: LD_ADDR_EXP 49
 560: PUSH
 561: LD_INT 6
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 569: LD_ADDR_EXP 50
 573: PUSH
 574: LD_INT 10
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 582: LD_ADDR_EXP 51
 586: PUSH
 587: LD_INT 11
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 595: LD_ADDR_EXP 52
 599: PUSH
 600: LD_INT 12
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 608: LD_ADDR_EXP 53
 612: PUSH
 613: LD_INT 13
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 621: LD_ADDR_EXP 54
 625: PUSH
 626: LD_INT 14
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 634: LD_ADDR_EXP 1
 638: PUSH
 639: LD_INT 15
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 647: LD_ADDR_EXP 2
 651: PUSH
 652: LD_INT 16
 654: PPUSH
 655: CALL_OW 426
 659: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 660: LD_ADDR_EXP 55
 664: PUSH
 665: LD_INT 17
 667: PPUSH
 668: CALL_OW 426
 672: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 673: LD_ADDR_EXP 56
 677: PUSH
 678: LD_INT 20
 680: PPUSH
 681: CALL_OW 426
 685: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 686: LD_ADDR_EXP 42
 690: PUSH
 691: LD_INT 21
 693: PPUSH
 694: CALL_OW 426
 698: ST_TO_ADDR
// def_spect := GetMultiplayerSetting ( 22 ) ;
 699: LD_ADDR_EXP 16
 703: PUSH
 704: LD_INT 22
 706: PPUSH
 707: CALL_OW 426
 711: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 712: LD_ADDR_EXP 18
 716: PUSH
 717: LD_INT 23
 719: PPUSH
 720: CALL_OW 426
 724: ST_TO_ADDR
// end else
 725: GO 883
// begin Randomize ;
 727: CALL_OW 10
// def_base_level := 2 ;
 731: LD_ADDR_EXP 43
 735: PUSH
 736: LD_INT 2
 738: ST_TO_ADDR
// def_amount_of_people := 0 ;
 739: LD_ADDR_EXP 44
 743: PUSH
 744: LD_INT 0
 746: ST_TO_ADDR
// def_skill_level := 1 ;
 747: LD_ADDR_EXP 45
 751: PUSH
 752: LD_INT 1
 754: ST_TO_ADDR
// def_starting_resources := 2 ;
 755: LD_ADDR_EXP 46
 759: PUSH
 760: LD_INT 2
 762: ST_TO_ADDR
// def_shipments_density := 1 ;
 763: LD_ADDR_EXP 47
 767: PUSH
 768: LD_INT 1
 770: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 771: LD_ADDR_EXP 48
 775: PUSH
 776: LD_INT 0
 778: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 779: LD_ADDR_EXP 49
 783: PUSH
 784: LD_INT 1
 786: ST_TO_ADDR
// def_shared_vision := 1 ;
 787: LD_ADDR_EXP 50
 791: PUSH
 792: LD_INT 1
 794: ST_TO_ADDR
// def_morale_flags := 1 ;
 795: LD_ADDR_EXP 51
 799: PUSH
 800: LD_INT 1
 802: ST_TO_ADDR
// def_siberite_detection := 1 ;
 803: LD_ADDR_EXP 52
 807: PUSH
 808: LD_INT 1
 810: ST_TO_ADDR
// def_people_respawning := 2 ;
 811: LD_ADDR_EXP 53
 815: PUSH
 816: LD_INT 2
 818: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 819: LD_ADDR_EXP 54
 823: PUSH
 824: LD_INT 3
 826: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 827: LD_ADDR_EXP 1
 831: PUSH
 832: LD_INT 0
 834: ST_TO_ADDR
// def_public_score := 0 ;
 835: LD_ADDR_EXP 2
 839: PUSH
 840: LD_INT 0
 842: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 843: LD_ADDR_EXP 55
 847: PUSH
 848: LD_INT 0
 850: ST_TO_ADDR
// def_builduptime := 0 ;
 851: LD_ADDR_EXP 56
 855: PUSH
 856: LD_INT 0
 858: ST_TO_ADDR
// def_game_rules := 1 ;
 859: LD_ADDR_EXP 42
 863: PUSH
 864: LD_INT 1
 866: ST_TO_ADDR
// def_spect := 1 ;
 867: LD_ADDR_EXP 16
 871: PUSH
 872: LD_INT 1
 874: ST_TO_ADDR
// tech_level = 0 ;
 875: LD_ADDR_EXP 18
 879: PUSH
 880: LD_INT 0
 882: ST_TO_ADDR
// end ; InitGameRules ;
 883: CALL 9501 0 0
// if def_game_rules = 0 then
 887: LD_EXP 42
 891: PUSH
 892: LD_INT 0
 894: EQUAL
 895: IFFALSE 922
// begin if isSGUI then
 897: LD_OWVAR 83
 901: IFFALSE 909
// setMpTechs ( ) else
 903: CALL 12951 0 0
 907: GO 922
// begin SetMpTechLevel ( tech_level + 1 ) ;
 909: LD_EXP 18
 913: PUSH
 914: LD_INT 1
 916: PLUS
 917: PPUSH
 918: CALL 13098 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 922: LD_ADDR_EXP 3
 926: PUSH
 927: LD_INT 0
 929: PUSH
 930: LD_INT 1
 932: PUSH
 933: LD_INT 1
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_EXP 43
 945: PUSH
 946: LD_INT 1
 948: PLUS
 949: ARRAY
 950: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 951: LD_ADDR_EXP 4
 955: PUSH
 956: LD_INT 0
 958: PUSH
 959: LD_INT 0
 961: PUSH
 962: LD_INT 3
 964: PUSH
 965: EMPTY
 966: LIST
 967: LIST
 968: LIST
 969: PUSH
 970: LD_EXP 43
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: ARRAY
 979: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 980: LD_ADDR_EXP 5
 984: PUSH
 985: LD_INT 9
 987: PUSH
 988: LD_INT 12
 990: PUSH
 991: LD_INT 15
 993: PUSH
 994: LD_INT 24
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: LIST
1002: PUSH
1003: LD_EXP 44
1007: PUSH
1008: LD_INT 1
1010: PLUS
1011: ARRAY
1012: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
1013: LD_ADDR_EXP 6
1017: PUSH
1018: LD_INT 2
1020: PUSH
1021: LD_INT 3
1023: PUSH
1024: LD_INT 5
1026: PUSH
1027: LD_INT 6
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_EXP 45
1040: PUSH
1041: LD_INT 1
1043: PLUS
1044: ARRAY
1045: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1046: LD_ADDR_EXP 8
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: LD_INT 0
1056: PUSH
1057: LD_INT 0
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 30
1067: PUSH
1068: LD_INT 0
1070: PUSH
1071: LD_INT 0
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: PUSH
1079: LD_INT 50
1081: PUSH
1082: LD_INT 20
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 80
1095: PUSH
1096: LD_INT 40
1098: PUSH
1099: LD_INT 20
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PUSH
1107: EMPTY
1108: LIST
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_EXP 46
1117: PUSH
1118: LD_INT 1
1120: PLUS
1121: ARRAY
1122: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1123: LD_ADDR_EXP 7
1127: PUSH
1128: LD_INT 10
1130: PUSH
1131: EMPTY
1132: LIST
1133: PUSH
1134: LD_INT 7
1136: PUSH
1137: LD_INT 14
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 6
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: LD_INT 18
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 5
1160: PUSH
1161: LD_INT 10
1163: PUSH
1164: LD_INT 15
1166: PUSH
1167: LD_INT 20
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: LIST
1180: LIST
1181: PUSH
1182: LD_EXP 46
1186: PUSH
1187: LD_INT 1
1189: PLUS
1190: ARRAY
1191: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1192: LD_ADDR_EXP 9
1196: PUSH
1197: LD_INT 150
1199: PUSH
1200: LD_INT 125
1202: PUSH
1203: LD_INT 100
1205: PUSH
1206: LD_INT 50
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: PUSH
1215: LD_EXP 47
1219: PUSH
1220: LD_INT 1
1222: PLUS
1223: ARRAY
1224: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1225: LD_ADDR_EXP 13
1229: PUSH
1230: LD_INT 0
1232: PUSH
1233: LD_INT 10500
1235: PUSH
1236: LD_INT 6300
1238: PUSH
1239: EMPTY
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: LD_EXP 53
1248: PUSH
1249: LD_INT 1
1251: PLUS
1252: ARRAY
1253: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1254: LD_ADDR_EXP 14
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: LD_INT 31500
1264: PUSH
1265: LD_INT 10500
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: LIST
1272: PUSH
1273: LD_EXP 53
1277: PUSH
1278: LD_INT 1
1280: PLUS
1281: ARRAY
1282: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1283: LD_ADDR_EXP 11
1287: PUSH
1288: LD_INT 0
1290: PUSH
1291: LD_INT 3
1293: PUSH
1294: LD_INT 6
1296: PUSH
1297: LD_INT 9
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: PUSH
1306: LD_EXP 54
1310: PUSH
1311: LD_INT 1
1313: PLUS
1314: ARRAY
1315: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1316: LD_ADDR_EXP 12
1320: PUSH
1321: LD_INT 30
1323: PUSH
1324: LD_INT 50
1326: PUSH
1327: LD_INT 80
1329: PUSH
1330: LD_INT 100
1332: PUSH
1333: LD_INT 130
1335: PUSH
1336: LD_INT 150
1338: PUSH
1339: LD_INT 200
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: PUSH
1351: LD_EXP 1
1355: PUSH
1356: LD_INT 1
1358: PLUS
1359: ARRAY
1360: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1361: LD_ADDR_EXP 10
1365: PUSH
1366: LD_INT 1
1368: NEG
1369: PUSH
1370: LD_INT 350
1372: PUSH
1373: LD_INT 700
1375: PUSH
1376: LD_INT 1400
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: PUSH
1389: LD_EXP 51
1393: PUSH
1394: LD_INT 1
1396: PLUS
1397: ARRAY
1398: ST_TO_ADDR
// battle_flags_id := [ ] ;
1399: LD_ADDR_EXP 32
1403: PUSH
1404: EMPTY
1405: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1406: LD_ADDR_EXP 15
1410: PUSH
1411: LD_INT 0
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PUSH
1421: LD_EXP 16
1425: PUSH
1426: LD_INT 1
1428: PLUS
1429: ARRAY
1430: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1431: LD_ADDR_EXP 17
1435: PUSH
1436: LD_INT 0
1438: PUSH
1439: LD_INT 1
1441: PUSH
1442: LD_INT 63000
1444: PUSH
1445: LD_INT 126000
1447: PUSH
1448: LD_INT 189000
1450: PUSH
1451: LD_INT 252000
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: PUSH
1462: LD_EXP 55
1466: PUSH
1467: LD_INT 1
1469: PLUS
1470: ARRAY
1471: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1472: LD_ADDR_EXP 40
1476: PUSH
1477: LD_INT 7
1479: PUSH
1480: LD_INT 8
1482: PUSH
1483: LD_INT 9
1485: PUSH
1486: LD_INT 10
1488: PUSH
1489: LD_INT 11
1491: PUSH
1492: LD_INT 12
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: ST_TO_ADDR
// end ;
1503: LD_VAR 0 1
1507: RET
// function init_map ; var i , j ; begin
1508: LD_INT 0
1510: PPUSH
1511: PPUSH
1512: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1513: LD_ADDR_EXP 28
1517: PUSH
1518: LD_INT 12
1520: PUSH
1521: LD_INT 4
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PUSH
1528: LD_INT 45
1530: PUSH
1531: LD_INT 81
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PUSH
1538: LD_INT 116
1540: PUSH
1541: LD_INT 195
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: LD_INT 142
1550: PUSH
1551: LD_INT 4
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PUSH
1558: LD_INT 201
1560: PUSH
1561: LD_INT 102
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 234
1570: PUSH
1571: LD_INT 194
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1586: LD_ADDR_EXP 29
1590: PUSH
1591: LD_INT 12
1593: PUSH
1594: LD_INT 4
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: PUSH
1601: LD_INT 16
1603: PUSH
1604: LD_INT 25
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 45
1617: PUSH
1618: LD_INT 81
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: PUSH
1625: LD_INT 60
1627: PUSH
1628: LD_INT 102
1630: PUSH
1631: EMPTY
1632: LIST
1633: LIST
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: PUSH
1639: LD_INT 116
1641: PUSH
1642: LD_INT 195
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PUSH
1649: LD_INT 92
1651: PUSH
1652: LD_INT 167
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: LD_INT 142
1665: PUSH
1666: LD_INT 4
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 167
1675: PUSH
1676: LD_INT 24
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 201
1689: PUSH
1690: LD_INT 102
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PUSH
1697: LD_INT 190
1699: PUSH
1700: LD_INT 77
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: PUSH
1711: LD_INT 234
1713: PUSH
1714: LD_INT 194
1716: PUSH
1717: EMPTY
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 237
1723: PUSH
1724: LD_INT 171
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: EMPTY
1732: LIST
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1743: LD_ADDR_EXP 30
1747: PUSH
1748: LD_INT 10
1750: PUSH
1751: LD_INT 10
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 51
1760: PUSH
1761: LD_INT 93
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 102
1770: PUSH
1771: LD_INT 187
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: LD_INT 158
1780: PUSH
1781: LD_INT 6
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: PUSH
1788: LD_INT 203
1790: PUSH
1791: LD_INT 93
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PUSH
1798: LD_INT 252
1800: PUSH
1801: LD_INT 194
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1816: LD_ADDR_EXP 31
1820: PUSH
1821: LD_INT 10
1823: PUSH
1824: LD_INT 10
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 36
1833: PUSH
1834: LD_INT 10
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: EMPTY
1842: LIST
1843: LIST
1844: PUSH
1845: LD_INT 51
1847: PUSH
1848: LD_INT 93
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 47
1857: PUSH
1858: LD_INT 72
1860: PUSH
1861: EMPTY
1862: LIST
1863: LIST
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 102
1871: PUSH
1872: LD_INT 187
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: LD_INT 93
1881: PUSH
1882: LD_INT 175
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: PUSH
1893: LD_INT 158
1895: PUSH
1896: LD_INT 6
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: PUSH
1903: LD_INT 147
1905: PUSH
1906: LD_INT 5
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 203
1919: PUSH
1920: LD_INT 93
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: LD_INT 173
1929: PUSH
1930: LD_INT 71
1932: PUSH
1933: EMPTY
1934: LIST
1935: LIST
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 252
1943: PUSH
1944: LD_INT 194
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 243
1953: PUSH
1954: LD_INT 177
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1973: LD_ADDR_EXP 25
1977: PUSH
1978: LD_INT 23
1980: PUSH
1981: LD_INT 15
1983: PUSH
1984: LD_INT 2
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 56
1994: PUSH
1995: LD_INT 85
1997: PUSH
1998: LD_INT 1
2000: PUSH
2001: EMPTY
2002: LIST
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 110
2008: PUSH
2009: LD_INT 177
2011: PUSH
2012: LD_INT 3
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 157
2022: PUSH
2023: LD_INT 13
2025: PUSH
2026: LD_INT 3
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 187
2036: PUSH
2037: LD_INT 87
2039: PUSH
2040: LD_INT 5
2042: PUSH
2043: EMPTY
2044: LIST
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 231
2050: PUSH
2051: LD_INT 181
2053: PUSH
2054: LD_INT 5
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
2070: LD_ADDR_EXP 27
2074: PUSH
2075: LD_INT 30
2077: PUSH
2078: LD_INT 22
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: LD_INT 58
2087: PUSH
2088: LD_INT 82
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 113
2097: PUSH
2098: LD_INT 180
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 151
2107: PUSH
2108: LD_INT 24
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 183
2117: PUSH
2118: LD_INT 90
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 223
2127: PUSH
2128: LD_INT 180
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: LIST
2142: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
2143: LD_ADDR_EXP 26
2147: PUSH
2148: LD_INT 33
2150: PUSH
2151: LD_INT 12
2153: PUSH
2154: LD_INT 5
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: LD_INT 42
2164: PUSH
2165: LD_INT 29
2167: PUSH
2168: LD_INT 4
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: PUSH
2176: LD_INT 36
2178: PUSH
2179: LD_INT 20
2181: PUSH
2182: LD_INT 4
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 72
2197: PUSH
2198: LD_INT 91
2200: PUSH
2201: LD_INT 4
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: PUSH
2209: LD_INT 65
2211: PUSH
2212: LD_INT 78
2214: PUSH
2215: LD_INT 4
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 75
2225: PUSH
2226: LD_INT 100
2228: PUSH
2229: LD_INT 3
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: LIST
2241: PUSH
2242: LD_INT 102
2244: PUSH
2245: LD_INT 165
2247: PUSH
2248: LD_INT 3
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: PUSH
2256: LD_INT 122
2258: PUSH
2259: LD_INT 176
2261: PUSH
2262: LD_INT 4
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 120
2272: PUSH
2273: LD_INT 184
2275: PUSH
2276: LD_INT 4
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: LIST
2288: PUSH
2289: LD_INT 134
2291: PUSH
2292: LD_INT 16
2294: PUSH
2295: LD_INT 1
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: PUSH
2303: LD_INT 132
2305: PUSH
2306: LD_INT 5
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 157
2319: PUSH
2320: LD_INT 27
2322: PUSH
2323: LD_INT 5
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 172
2338: PUSH
2339: LD_INT 77
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 175
2352: PUSH
2353: LD_INT 96
2355: PUSH
2356: LD_INT 1
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: LD_INT 192
2366: PUSH
2367: LD_INT 104
2369: PUSH
2370: LD_INT 1
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 216
2385: PUSH
2386: LD_INT 179
2388: PUSH
2389: LD_INT 1
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 208
2399: PUSH
2400: LD_INT 160
2402: PUSH
2403: LD_INT 2
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 208
2413: PUSH
2414: LD_INT 171
2416: PUSH
2417: LD_INT 2
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: ST_TO_ADDR
// for i = 1 to 6 do
2438: LD_ADDR_VAR 0 2
2442: PUSH
2443: DOUBLE
2444: LD_INT 1
2446: DEC
2447: ST_TO_ADDR
2448: LD_INT 6
2450: PUSH
2451: FOR_TO
2452: IFFALSE 2549
// if def_extra_oil_deposits then
2454: LD_EXP 48
2458: IFFALSE 2510
// for j in extra_oil_deposits_locations [ i ] do
2460: LD_ADDR_VAR 0 3
2464: PUSH
2465: LD_EXP 29
2469: PUSH
2470: LD_VAR 0 2
2474: ARRAY
2475: PUSH
2476: FOR_IN
2477: IFFALSE 2506
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2479: LD_VAR 0 3
2483: PUSH
2484: LD_INT 1
2486: ARRAY
2487: PPUSH
2488: LD_VAR 0 3
2492: PUSH
2493: LD_INT 2
2495: ARRAY
2496: PPUSH
2497: LD_INT 2
2499: PPUSH
2500: CALL_OW 62
2504: GO 2476
2506: POP
2507: POP
2508: GO 2547
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2510: LD_EXP 28
2514: PUSH
2515: LD_VAR 0 2
2519: ARRAY
2520: PUSH
2521: LD_INT 1
2523: ARRAY
2524: PPUSH
2525: LD_EXP 28
2529: PUSH
2530: LD_VAR 0 2
2534: ARRAY
2535: PUSH
2536: LD_INT 2
2538: ARRAY
2539: PPUSH
2540: LD_INT 2
2542: PPUSH
2543: CALL_OW 62
2547: GO 2451
2549: POP
2550: POP
// if def_extra_sib_deposits then
2551: LD_EXP 49
2555: IFFALSE 2674
// for i = 1 to 6 do
2557: LD_ADDR_VAR 0 2
2561: PUSH
2562: DOUBLE
2563: LD_INT 1
2565: DEC
2566: ST_TO_ADDR
2567: LD_INT 6
2569: PUSH
2570: FOR_TO
2571: IFFALSE 2672
// if def_extra_sib_deposits = 2 then
2573: LD_EXP 49
2577: PUSH
2578: LD_INT 2
2580: EQUAL
2581: IFFALSE 2633
// for j in extra_sib_deposits_locations [ i ] do
2583: LD_ADDR_VAR 0 3
2587: PUSH
2588: LD_EXP 31
2592: PUSH
2593: LD_VAR 0 2
2597: ARRAY
2598: PUSH
2599: FOR_IN
2600: IFFALSE 2629
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2602: LD_VAR 0 3
2606: PUSH
2607: LD_INT 1
2609: ARRAY
2610: PPUSH
2611: LD_VAR 0 3
2615: PUSH
2616: LD_INT 2
2618: ARRAY
2619: PPUSH
2620: LD_INT 3
2622: PPUSH
2623: CALL_OW 62
2627: GO 2599
2629: POP
2630: POP
2631: GO 2670
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2633: LD_EXP 30
2637: PUSH
2638: LD_VAR 0 2
2642: ARRAY
2643: PUSH
2644: LD_INT 1
2646: ARRAY
2647: PPUSH
2648: LD_EXP 30
2652: PUSH
2653: LD_VAR 0 2
2657: ARRAY
2658: PUSH
2659: LD_INT 2
2661: ARRAY
2662: PPUSH
2663: LD_INT 3
2665: PPUSH
2666: CALL_OW 62
2670: GO 2570
2672: POP
2673: POP
// end ;
2674: LD_VAR 0 1
2678: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2679: LD_INT 0
2681: PPUSH
2682: PPUSH
2683: PPUSH
// if not Team_Game then
2684: LD_EXP 23
2688: NOT
2689: IFFALSE 2787
// begin for i = 1 to 8 do
2691: LD_ADDR_VAR 0 2
2695: PUSH
2696: DOUBLE
2697: LD_INT 1
2699: DEC
2700: ST_TO_ADDR
2701: LD_INT 8
2703: PUSH
2704: FOR_TO
2705: IFFALSE 2783
// for j = 1 to 8 do
2707: LD_ADDR_VAR 0 3
2711: PUSH
2712: DOUBLE
2713: LD_INT 1
2715: DEC
2716: ST_TO_ADDR
2717: LD_INT 8
2719: PUSH
2720: FOR_TO
2721: IFFALSE 2779
// if i <> j then
2723: LD_VAR 0 2
2727: PUSH
2728: LD_VAR 0 3
2732: NONEQUAL
2733: IFFALSE 2757
// SetAttitude ( i , j , att_neutral , true ) else
2735: LD_VAR 0 2
2739: PPUSH
2740: LD_VAR 0 3
2744: PPUSH
2745: LD_INT 0
2747: PPUSH
2748: LD_INT 1
2750: PPUSH
2751: CALL_OW 80
2755: GO 2777
// SetAttitude ( i , j , att_friend , true ) ;
2757: LD_VAR 0 2
2761: PPUSH
2762: LD_VAR 0 3
2766: PPUSH
2767: LD_INT 1
2769: PPUSH
2770: LD_INT 1
2772: PPUSH
2773: CALL_OW 80
2777: GO 2720
2779: POP
2780: POP
2781: GO 2704
2783: POP
2784: POP
// end else
2785: GO 2962
// begin if def_shared_vision then
2787: LD_EXP 50
2791: IFFALSE 2856
// begin for i in Teams do
2793: LD_ADDR_VAR 0 2
2797: PUSH
2798: LD_EXP 20
2802: PUSH
2803: FOR_IN
2804: IFFALSE 2854
// for j = 2 to i do
2806: LD_ADDR_VAR 0 3
2810: PUSH
2811: DOUBLE
2812: LD_INT 2
2814: DEC
2815: ST_TO_ADDR
2816: LD_VAR 0 2
2820: PUSH
2821: FOR_TO
2822: IFFALSE 2850
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2824: LD_VAR 0 2
2828: PUSH
2829: LD_VAR 0 3
2833: ARRAY
2834: PPUSH
2835: LD_VAR 0 2
2839: PUSH
2840: LD_INT 1
2842: ARRAY
2843: PPUSH
2844: CALL_OW 343
2848: GO 2821
2850: POP
2851: POP
2852: GO 2803
2854: POP
2855: POP
// end ; for i = 1 to 8 do
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: DOUBLE
2862: LD_INT 1
2864: DEC
2865: ST_TO_ADDR
2866: LD_INT 8
2868: PUSH
2869: FOR_TO
2870: IFFALSE 2960
// for j = 1 to 8 do
2872: LD_ADDR_VAR 0 3
2876: PUSH
2877: DOUBLE
2878: LD_INT 1
2880: DEC
2881: ST_TO_ADDR
2882: LD_INT 8
2884: PUSH
2885: FOR_TO
2886: IFFALSE 2956
// if Side_Teams [ i ] = Side_Teams [ j ] then
2888: LD_EXP 19
2892: PUSH
2893: LD_VAR 0 2
2897: ARRAY
2898: PUSH
2899: LD_EXP 19
2903: PUSH
2904: LD_VAR 0 3
2908: ARRAY
2909: EQUAL
2910: IFFALSE 2934
// SetAttitude ( i , j , att_friend , true ) else
2912: LD_VAR 0 2
2916: PPUSH
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 1
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: CALL_OW 80
2932: GO 2954
// SetAttitude ( i , j , att_enemy , true ) ;
2934: LD_VAR 0 2
2938: PPUSH
2939: LD_VAR 0 3
2943: PPUSH
2944: LD_INT 2
2946: PPUSH
2947: LD_INT 1
2949: PPUSH
2950: CALL_OW 80
2954: GO 2885
2956: POP
2957: POP
2958: GO 2869
2960: POP
2961: POP
// end ; end ;
2962: LD_VAR 0 1
2966: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2967: LD_INT 0
2969: PPUSH
2970: PPUSH
2971: PPUSH
2972: PPUSH
// result := [ ] ;
2973: LD_ADDR_VAR 0 7
2977: PUSH
2978: EMPTY
2979: ST_TO_ADDR
// for i := 1 to count do
2980: LD_ADDR_VAR 0 8
2984: PUSH
2985: DOUBLE
2986: LD_INT 1
2988: DEC
2989: ST_TO_ADDR
2990: LD_VAR 0 1
2994: PUSH
2995: FOR_TO
2996: IFFALSE 3414
// begin uc_direction := Rand ( 0 , 5 ) ;
2998: LD_ADDR_OWVAR 24
3002: PUSH
3003: LD_INT 0
3005: PPUSH
3006: LD_INT 5
3008: PPUSH
3009: CALL_OW 12
3013: ST_TO_ADDR
// if commander then
3014: LD_LOC 1
3018: IFFALSE 3127
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3020: LD_ADDR_OWVAR 26
3024: PUSH
3025: LD_OWVAR 19
3029: PUSH
3030: LD_OWVAR 20
3034: ARRAY
3035: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3036: LD_INT 1
3038: PPUSH
3039: LD_INT 2
3041: PPUSH
3042: CALL_OW 12
3046: PPUSH
3047: LD_VAR 0 2
3051: PPUSH
3052: LD_EXP 6
3056: PUSH
3057: LD_INT 2
3059: PLUS
3060: PPUSH
3061: CALL_OW 380
// hc_importance := 105 ;
3065: LD_ADDR_OWVAR 32
3069: PUSH
3070: LD_INT 105
3072: ST_TO_ADDR
// commander := false ;
3073: LD_ADDR_LOC 1
3077: PUSH
3078: LD_INT 0
3080: ST_TO_ADDR
// if Multiplayer then
3081: LD_OWVAR 4
3085: IFFALSE 3125
// begin hc_gallery := MULTIAVATARS ;
3087: LD_ADDR_OWVAR 33
3091: PUSH
3092: LD_STRING MULTIAVATARS
3094: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3095: LD_ADDR_OWVAR 34
3099: PUSH
3100: LD_OWVAR 20
3104: PPUSH
3105: CALL_OW 525
3109: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3110: LD_ADDR_OWVAR 27
3114: PUSH
3115: LD_OWVAR 20
3119: PPUSH
3120: CALL_OW 526
3124: ST_TO_ADDR
// end ; end else
3125: GO 3190
// begin hc_name :=  ;
3127: LD_ADDR_OWVAR 26
3131: PUSH
3132: LD_STRING 
3134: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3135: LD_INT 1
3137: PPUSH
3138: LD_INT 2
3140: PPUSH
3141: CALL_OW 12
3145: PPUSH
3146: LD_VAR 0 2
3150: PPUSH
3151: LD_EXP 6
3155: PPUSH
3156: CALL_OW 380
// hc_importance := 0 ;
3160: LD_ADDR_OWVAR 32
3164: PUSH
3165: LD_INT 0
3167: ST_TO_ADDR
// if Multiplayer then
3168: LD_OWVAR 4
3172: IFFALSE 3190
// begin hc_gallery :=  ;
3174: LD_ADDR_OWVAR 33
3178: PUSH
3179: LD_STRING 
3181: ST_TO_ADDR
// hc_face_number := 0 ;
3182: LD_ADDR_OWVAR 34
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3190: LD_ADDR_VAR 0 10
3194: PUSH
3195: CALL_OW 44
3199: ST_TO_ADDR
// if global_defined then
3200: LD_LOC 3
3204: IFFALSE 3344
// begin if ( cl = class_soldier ) then
3206: LD_VAR 0 2
3210: PUSH
3211: LD_INT 1
3213: EQUAL
3214: IFFALSE 3234
// j := i + soldiers_created else
3216: LD_ADDR_VAR 0 9
3220: PUSH
3221: LD_VAR 0 8
3225: PUSH
3226: LD_LOC 4
3230: PLUS
3231: ST_TO_ADDR
3232: GO 3244
// j := i ;
3234: LD_ADDR_VAR 0 9
3238: PUSH
3239: LD_VAR 0 8
3243: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3244: LD_LOC 2
3248: PUSH
3249: LD_VAR 0 2
3253: ARRAY
3254: PUSH
3255: LD_VAR 0 9
3259: ARRAY
3260: PPUSH
3261: LD_VAR 0 10
3265: PPUSH
3266: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3270: LD_VAR 0 10
3274: PPUSH
3275: LD_INT 2
3277: PPUSH
3278: LD_LOC 2
3282: PUSH
3283: LD_VAR 0 2
3287: ARRAY
3288: PUSH
3289: LD_VAR 0 9
3293: ARRAY
3294: PPUSH
3295: LD_INT 2
3297: PPUSH
3298: CALL_OW 260
3302: PPUSH
3303: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3307: LD_VAR 0 10
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_LOC 2
3319: PUSH
3320: LD_VAR 0 2
3324: ARRAY
3325: PUSH
3326: LD_VAR 0 9
3330: ARRAY
3331: PPUSH
3332: LD_INT 1
3334: PPUSH
3335: CALL_OW 260
3339: PPUSH
3340: CALL_OW 239
// end ; if building then
3344: LD_VAR 0 6
3348: IFFALSE 3366
// PlaceHumanInUnit ( un , building ) else
3350: LD_VAR 0 10
3354: PPUSH
3355: LD_VAR 0 6
3359: PPUSH
3360: CALL_OW 52
3364: GO 3393
// PlaceUnitXYR ( un , x , y , r , false ) ;
3366: LD_VAR 0 10
3370: PPUSH
3371: LD_VAR 0 3
3375: PPUSH
3376: LD_VAR 0 4
3380: PPUSH
3381: LD_VAR 0 5
3385: PPUSH
3386: LD_INT 0
3388: PPUSH
3389: CALL_OW 50
// result := result ^ [ un ] ;
3393: LD_ADDR_VAR 0 7
3397: PUSH
3398: LD_VAR 0 7
3402: PUSH
3403: LD_VAR 0 10
3407: PUSH
3408: EMPTY
3409: LIST
3410: ADD
3411: ST_TO_ADDR
// end ;
3412: GO 2995
3414: POP
3415: POP
// if not global_defined then
3416: LD_LOC 3
3420: NOT
3421: IFFALSE 3499
// if ( global_units >= cl ) then
3423: LD_LOC 2
3427: PUSH
3428: LD_VAR 0 2
3432: GREATEREQUAL
3433: IFFALSE 3474
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3435: LD_ADDR_LOC 2
3439: PUSH
3440: LD_LOC 2
3444: PPUSH
3445: LD_VAR 0 2
3449: PPUSH
3450: LD_LOC 2
3454: PUSH
3455: LD_VAR 0 2
3459: ARRAY
3460: PUSH
3461: LD_VAR 0 7
3465: ADD
3466: PPUSH
3467: CALL_OW 1
3471: ST_TO_ADDR
3472: GO 3499
// global_units := Replace ( global_units , cl , result ) ;
3474: LD_ADDR_LOC 2
3478: PUSH
3479: LD_LOC 2
3483: PPUSH
3484: LD_VAR 0 2
3488: PPUSH
3489: LD_VAR 0 7
3493: PPUSH
3494: CALL_OW 1
3498: ST_TO_ADDR
// end ;
3499: LD_VAR 0 7
3503: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3504: LD_INT 0
3506: PPUSH
3507: PPUSH
3508: PPUSH
3509: PPUSH
3510: PPUSH
3511: PPUSH
3512: PPUSH
3513: PPUSH
3514: PPUSH
// pos := Side_Positions [ side ] ;
3515: LD_ADDR_VAR 0 3
3519: PUSH
3520: LD_EXP 21
3524: PUSH
3525: LD_VAR 0 1
3529: ARRAY
3530: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3531: LD_ADDR_OWVAR 21
3535: PUSH
3536: LD_EXP 22
3540: PUSH
3541: LD_VAR 0 1
3545: ARRAY
3546: ST_TO_ADDR
// uc_side := side ;
3547: LD_ADDR_OWVAR 20
3551: PUSH
3552: LD_VAR 0 1
3556: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3557: LD_ADDR_VAR 0 4
3561: PUSH
3562: LD_EXP 25
3566: PUSH
3567: LD_VAR 0 3
3571: ARRAY
3572: PUSH
3573: LD_INT 1
3575: ARRAY
3576: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3577: LD_ADDR_VAR 0 5
3581: PUSH
3582: LD_EXP 25
3586: PUSH
3587: LD_VAR 0 3
3591: ARRAY
3592: PUSH
3593: LD_INT 2
3595: ARRAY
3596: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3597: LD_ADDR_VAR 0 6
3601: PUSH
3602: LD_EXP 25
3606: PUSH
3607: LD_VAR 0 3
3611: ARRAY
3612: PUSH
3613: LD_INT 3
3615: ARRAY
3616: ST_TO_ADDR
// if is_depot then
3617: LD_EXP 3
3621: IFFALSE 3754
// begin bc_type = b_depot ;
3623: LD_ADDR_OWVAR 42
3627: PUSH
3628: LD_INT 0
3630: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3631: LD_ADDR_VAR 0 10
3635: PUSH
3636: LD_VAR 0 4
3640: PPUSH
3641: LD_VAR 0 5
3645: PPUSH
3646: LD_VAR 0 6
3650: PPUSH
3651: CALL_OW 47
3655: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3656: LD_VAR 0 10
3660: PPUSH
3661: LD_STRING @
3663: PUSH
3664: LD_VAR 0 1
3668: STR
3669: PPUSH
3670: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3674: LD_VAR 0 10
3678: PPUSH
3679: CALL_OW 274
3683: PPUSH
3684: LD_INT 1
3686: PPUSH
3687: LD_EXP 8
3691: PUSH
3692: LD_INT 1
3694: ARRAY
3695: PPUSH
3696: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3700: LD_VAR 0 10
3704: PPUSH
3705: CALL_OW 274
3709: PPUSH
3710: LD_INT 2
3712: PPUSH
3713: LD_EXP 8
3717: PUSH
3718: LD_INT 2
3720: ARRAY
3721: PPUSH
3722: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3726: LD_VAR 0 10
3730: PPUSH
3731: CALL_OW 274
3735: PPUSH
3736: LD_INT 3
3738: PPUSH
3739: LD_EXP 8
3743: PUSH
3744: LD_INT 3
3746: ARRAY
3747: PPUSH
3748: CALL_OW 277
// end else
3752: GO 3898
// begin for i := 1 to 3 do
3754: LD_ADDR_VAR 0 7
3758: PUSH
3759: DOUBLE
3760: LD_INT 1
3762: DEC
3763: ST_TO_ADDR
3764: LD_INT 3
3766: PUSH
3767: FOR_TO
3768: IFFALSE 3896
// begin r := starting_resources [ i ] ;
3770: LD_ADDR_VAR 0 8
3774: PUSH
3775: LD_EXP 8
3779: PUSH
3780: LD_VAR 0 7
3784: ARRAY
3785: ST_TO_ADDR
// while r >= 10 do
3786: LD_VAR 0 8
3790: PUSH
3791: LD_INT 10
3793: GREATEREQUAL
3794: IFFALSE 3894
// if r > 50 then
3796: LD_VAR 0 8
3800: PUSH
3801: LD_INT 50
3803: GREATER
3804: IFFALSE 3850
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3806: LD_VAR 0 7
3810: PPUSH
3811: LD_INT 5
3813: PPUSH
3814: LD_VAR 0 4
3818: PPUSH
3819: LD_VAR 0 5
3823: PPUSH
3824: LD_INT 4
3826: PPUSH
3827: LD_INT 0
3829: PPUSH
3830: CALL_OW 60
// r := r - 50 ;
3834: LD_ADDR_VAR 0 8
3838: PUSH
3839: LD_VAR 0 8
3843: PUSH
3844: LD_INT 50
3846: MINUS
3847: ST_TO_ADDR
// end else
3848: GO 3892
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3850: LD_VAR 0 7
3854: PPUSH
3855: LD_VAR 0 8
3859: PUSH
3860: LD_INT 10
3862: DIV
3863: PPUSH
3864: LD_VAR 0 4
3868: PPUSH
3869: LD_VAR 0 5
3873: PPUSH
3874: LD_INT 4
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 60
// r := 0 ;
3884: LD_ADDR_VAR 0 8
3888: PUSH
3889: LD_INT 0
3891: ST_TO_ADDR
// end ;
3892: GO 3786
// end ;
3894: GO 3767
3896: POP
3897: POP
// end ; for r in starting_crates do
3898: LD_ADDR_VAR 0 8
3902: PUSH
3903: LD_EXP 7
3907: PUSH
3908: FOR_IN
3909: IFFALSE 3941
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3911: LD_INT 1
3913: PPUSH
3914: LD_INT 5
3916: PPUSH
3917: LD_VAR 0 4
3921: PPUSH
3922: LD_VAR 0 5
3926: PPUSH
3927: LD_VAR 0 8
3931: PPUSH
3932: LD_INT 0
3934: PPUSH
3935: CALL_OW 60
3939: GO 3908
3941: POP
3942: POP
// if def_morale_flags then
3943: LD_EXP 51
3947: IFFALSE 4086
// begin x := start_def [ pos ] [ 1 ] ;
3949: LD_ADDR_VAR 0 4
3953: PUSH
3954: LD_EXP 27
3958: PUSH
3959: LD_VAR 0 3
3963: ARRAY
3964: PUSH
3965: LD_INT 1
3967: ARRAY
3968: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3969: LD_ADDR_VAR 0 5
3973: PUSH
3974: LD_EXP 27
3978: PUSH
3979: LD_VAR 0 3
3983: ARRAY
3984: PUSH
3985: LD_INT 2
3987: ARRAY
3988: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3989: LD_VAR 0 4
3993: PPUSH
3994: LD_VAR 0 5
3998: PPUSH
3999: LD_INT 12
4001: PPUSH
4002: LD_INT 2
4004: PPUSH
4005: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4009: LD_ADDR_EXP 32
4013: PUSH
4014: LD_EXP 32
4018: PUSH
4019: LD_VAR 0 1
4023: PPUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: LD_VAR 0 5
4033: PPUSH
4034: LD_INT 1
4036: PUSH
4037: LD_INT 100
4039: PUSH
4040: EMPTY
4041: LIST
4042: LIST
4043: PUSH
4044: LD_INT 2
4046: PUSH
4047: LD_INT 50
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 3
4056: PUSH
4057: LD_INT 20
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: LD_INT 20
4066: PUSH
4067: LD_INT 100
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: PUSH
4074: EMPTY
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: PPUSH
4080: CALL_OW 418
4084: ADD
4085: ST_TO_ADDR
// end ; commander := true ;
4086: LD_ADDR_LOC 1
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// soldiers_created := 0 ;
4094: LD_ADDR_LOC 4
4098: PUSH
4099: LD_INT 0
4101: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4102: LD_ADDR_VAR 0 7
4106: PUSH
4107: DOUBLE
4108: LD_INT 1
4110: DEC
4111: ST_TO_ADDR
4112: LD_EXP 4
4116: PUSH
4117: FOR_TO
4118: IFFALSE 4271
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4120: LD_ADDR_VAR 0 4
4124: PUSH
4125: LD_EXP 26
4129: PUSH
4130: LD_VAR 0 3
4134: ARRAY
4135: PUSH
4136: LD_VAR 0 7
4140: ARRAY
4141: PUSH
4142: LD_INT 1
4144: ARRAY
4145: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4146: LD_ADDR_VAR 0 5
4150: PUSH
4151: LD_EXP 26
4155: PUSH
4156: LD_VAR 0 3
4160: ARRAY
4161: PUSH
4162: LD_VAR 0 7
4166: ARRAY
4167: PUSH
4168: LD_INT 2
4170: ARRAY
4171: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4172: LD_ADDR_VAR 0 6
4176: PUSH
4177: LD_EXP 26
4181: PUSH
4182: LD_VAR 0 3
4186: ARRAY
4187: PUSH
4188: LD_VAR 0 7
4192: ARRAY
4193: PUSH
4194: LD_INT 3
4196: ARRAY
4197: ST_TO_ADDR
// bc_type := b_breastwork ;
4198: LD_ADDR_OWVAR 42
4202: PUSH
4203: LD_INT 31
4205: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4206: LD_ADDR_VAR 0 9
4210: PUSH
4211: LD_VAR 0 4
4215: PPUSH
4216: LD_VAR 0 5
4220: PPUSH
4221: LD_VAR 0 6
4225: PPUSH
4226: CALL_OW 47
4230: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4231: LD_INT 1
4233: PPUSH
4234: LD_INT 1
4236: PPUSH
4237: LD_INT 0
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: LD_INT 0
4245: PPUSH
4246: LD_VAR 0 9
4250: PPUSH
4251: CALL 2967 0 6
// soldiers_created := soldiers_created + 1 ;
4255: LD_ADDR_LOC 4
4259: PUSH
4260: LD_LOC 4
4264: PUSH
4265: LD_INT 1
4267: PLUS
4268: ST_TO_ADDR
// end ;
4269: GO 4117
4271: POP
4272: POP
// x := start_def [ pos ] [ 1 ] ;
4273: LD_ADDR_VAR 0 4
4277: PUSH
4278: LD_EXP 27
4282: PUSH
4283: LD_VAR 0 3
4287: ARRAY
4288: PUSH
4289: LD_INT 1
4291: ARRAY
4292: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4293: LD_ADDR_VAR 0 5
4297: PUSH
4298: LD_EXP 27
4302: PUSH
4303: LD_VAR 0 3
4307: ARRAY
4308: PUSH
4309: LD_INT 2
4311: ARRAY
4312: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4313: LD_LOC 8
4317: PUSH
4318: LD_EXP 4
4322: MINUS
4323: PPUSH
4324: LD_INT 1
4326: PPUSH
4327: LD_VAR 0 4
4331: PPUSH
4332: LD_VAR 0 5
4336: PPUSH
4337: LD_INT 5
4339: PPUSH
4340: LD_INT 0
4342: PPUSH
4343: CALL 2967 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4347: LD_LOC 5
4351: PPUSH
4352: LD_INT 2
4354: PPUSH
4355: LD_VAR 0 4
4359: PPUSH
4360: LD_VAR 0 5
4364: PPUSH
4365: LD_INT 5
4367: PPUSH
4368: LD_INT 0
4370: PPUSH
4371: CALL 2967 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4375: LD_LOC 7
4379: PPUSH
4380: LD_INT 3
4382: PPUSH
4383: LD_VAR 0 4
4387: PPUSH
4388: LD_VAR 0 5
4392: PPUSH
4393: LD_INT 5
4395: PPUSH
4396: LD_INT 0
4398: PPUSH
4399: CALL 2967 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4403: LD_LOC 6
4407: PPUSH
4408: LD_INT 4
4410: PPUSH
4411: LD_VAR 0 4
4415: PPUSH
4416: LD_VAR 0 5
4420: PPUSH
4421: LD_INT 5
4423: PPUSH
4424: LD_INT 0
4426: PPUSH
4427: CALL 2967 0 6
// if def_siberite_detection then
4431: LD_EXP 52
4435: IFFALSE 4452
// SetTech ( tech_SibDet , side , state_researched ) ;
4437: LD_INT 20
4439: PPUSH
4440: LD_VAR 0 1
4444: PPUSH
4445: LD_INT 2
4447: PPUSH
4448: CALL_OW 322
// if def_siberite_bomb = 1 then
4452: LD_EXP 55
4456: PUSH
4457: LD_INT 1
4459: EQUAL
4460: IFFALSE 4494
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4462: LD_INT 25
4464: PPUSH
4465: LD_VAR 0 1
4469: PPUSH
4470: LD_INT 1
4472: PPUSH
4473: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4477: LD_INT 73
4479: PPUSH
4480: LD_VAR 0 1
4484: PPUSH
4485: LD_INT 1
4487: PPUSH
4488: CALL_OW 322
// end else
4492: GO 4524
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4494: LD_INT 25
4496: PPUSH
4497: LD_VAR 0 1
4501: PPUSH
4502: LD_INT 0
4504: PPUSH
4505: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4509: LD_INT 73
4511: PPUSH
4512: LD_VAR 0 1
4516: PPUSH
4517: LD_INT 0
4519: PPUSH
4520: CALL_OW 322
// end ; global_defined := true ;
4524: LD_ADDR_LOC 3
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// end ;
4532: LD_VAR 0 2
4536: RET
// every 0 0$1 do
4537: GO 4539
4539: DISABLE
// if ( def_siberite_bomb > 1 ) then
4540: LD_EXP 55
4544: PUSH
4545: LD_INT 1
4547: GREATER
4548: IFFALSE 4563
// begin wait ( siberite_bomb_Delay ) ;
4550: LD_EXP 17
4554: PPUSH
4555: CALL_OW 67
// EnableSibFiss ;
4559: CALL 4564 0 0
// end ;
4563: END
// function EnableSibFiss ; var i ; begin
4564: LD_INT 0
4566: PPUSH
4567: PPUSH
// for i := 1 to 8 do
4568: LD_ADDR_VAR 0 2
4572: PUSH
4573: DOUBLE
4574: LD_INT 1
4576: DEC
4577: ST_TO_ADDR
4578: LD_INT 8
4580: PUSH
4581: FOR_TO
4582: IFFALSE 4628
// if Side_Positions [ i ] then
4584: LD_EXP 21
4588: PUSH
4589: LD_VAR 0 2
4593: ARRAY
4594: IFFALSE 4626
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4596: LD_INT 25
4598: PPUSH
4599: LD_VAR 0 2
4603: PPUSH
4604: LD_INT 1
4606: PPUSH
4607: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4611: LD_INT 73
4613: PPUSH
4614: LD_VAR 0 2
4618: PPUSH
4619: LD_INT 1
4621: PPUSH
4622: CALL_OW 322
// end ;
4626: GO 4581
4628: POP
4629: POP
// end ;
4630: LD_VAR 0 1
4634: RET
// function prepare_sides ; var i ; begin
4635: LD_INT 0
4637: PPUSH
4638: PPUSH
// global_units := [ ] ;
4639: LD_ADDR_LOC 2
4643: PUSH
4644: EMPTY
4645: ST_TO_ADDR
// global_defined := false ;
4646: LD_ADDR_LOC 3
4650: PUSH
4651: LD_INT 0
4653: ST_TO_ADDR
// CountClassMembers ;
4654: CALL 4704 0 0
// for i := 1 to 8 do
4658: LD_ADDR_VAR 0 2
4662: PUSH
4663: DOUBLE
4664: LD_INT 1
4666: DEC
4667: ST_TO_ADDR
4668: LD_INT 8
4670: PUSH
4671: FOR_TO
4672: IFFALSE 4697
// if Side_Positions [ i ] then
4674: LD_EXP 21
4678: PUSH
4679: LD_VAR 0 2
4683: ARRAY
4684: IFFALSE 4695
// prepare_side ( i ) ;
4686: LD_VAR 0 2
4690: PPUSH
4691: CALL 3504 0 1
4695: GO 4671
4697: POP
4698: POP
// end ;
4699: LD_VAR 0 1
4703: RET
// function CountClassMembers ; var Mode ; begin
4704: LD_INT 0
4706: PPUSH
4707: PPUSH
// if No_Mechs then
4708: LD_EXP 57
4712: IFFALSE 4724
// Mode := 2 else
4714: LD_ADDR_VAR 0 2
4718: PUSH
4719: LD_INT 2
4721: ST_TO_ADDR
4722: GO 4732
// Mode := 1 ;
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: LD_INT 1
4731: ST_TO_ADDR
// neng := number_of_people ;
4732: LD_ADDR_LOC 5
4736: PUSH
4737: LD_EXP 5
4741: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4742: LD_ADDR_LOC 8
4746: PUSH
4747: LD_LOC 5
4751: PUSH
4752: LD_INT 4
4754: PUSH
4755: LD_INT 3
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_VAR 0 2
4766: ARRAY
4767: DIV
4768: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4769: LD_LOC 8
4773: PUSH
4774: LD_EXP 4
4778: LESS
4779: IFFALSE 4791
// nsol := number_of_breastworks ;
4781: LD_ADDR_LOC 8
4785: PUSH
4786: LD_EXP 4
4790: ST_TO_ADDR
// neng := neng - nsol ;
4791: LD_ADDR_LOC 5
4795: PUSH
4796: LD_LOC 5
4800: PUSH
4801: LD_LOC 8
4805: MINUS
4806: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4807: LD_ADDR_LOC 6
4811: PUSH
4812: LD_LOC 5
4816: PUSH
4817: LD_INT 3
4819: PUSH
4820: LD_INT 2
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: LD_VAR 0 2
4831: ARRAY
4832: DIV
4833: ST_TO_ADDR
// if ( nsci < 1 ) then
4834: LD_LOC 6
4838: PUSH
4839: LD_INT 1
4841: LESS
4842: IFFALSE 4852
// nsci := 1 ;
4844: LD_ADDR_LOC 6
4848: PUSH
4849: LD_INT 1
4851: ST_TO_ADDR
// neng := neng - nsci ;
4852: LD_ADDR_LOC 5
4856: PUSH
4857: LD_LOC 5
4861: PUSH
4862: LD_LOC 6
4866: MINUS
4867: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4868: LD_ADDR_LOC 7
4872: PUSH
4873: LD_LOC 5
4877: PUSH
4878: LD_INT 2
4880: DIV
4881: PUSH
4882: LD_INT 0
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_VAR 0 2
4893: ARRAY
4894: ST_TO_ADDR
// neng := neng - nmech ;
4895: LD_ADDR_LOC 5
4899: PUSH
4900: LD_LOC 5
4904: PUSH
4905: LD_LOC 7
4909: MINUS
4910: ST_TO_ADDR
// if ( neng < 1 ) then
4911: LD_LOC 5
4915: PUSH
4916: LD_INT 1
4918: LESS
4919: IFFALSE 4929
// neng := 1 ;
4921: LD_ADDR_LOC 5
4925: PUSH
4926: LD_INT 1
4928: ST_TO_ADDR
// end ;
4929: LD_VAR 0 1
4933: RET
// function Init_Win_Condition ; begin
4934: LD_INT 0
4936: PPUSH
// if Team_Game then
4937: LD_EXP 23
4941: IFFALSE 4948
// enable ( 98 ) else
4943: LD_INT 98
4945: ENABLE_MARKED
4946: GO 4951
// enable ( 99 ) ;
4948: LD_INT 99
4950: ENABLE_MARKED
// case Game_Type of 3 :
4951: LD_EXP 41
4955: PUSH
4956: LD_INT 3
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4964
4962: GO 4970
4964: POP
// enable ( 100 ) ; end ;
4965: LD_INT 100
4967: ENABLE_MARKED
4968: GO 4971
4970: POP
// end ;
4971: LD_VAR 0 1
4975: RET
// starting begin disable ( 98 ) ;
4976: LD_INT 98
4978: DISABLE_MARKED
// disable ( 99 ) ;
4979: LD_INT 99
4981: DISABLE_MARKED
// disable ( 400 ) ;
4982: LD_INT 400
4984: DISABLE_MARKED
// disable ( 401 ) ;
4985: LD_INT 401
4987: DISABLE_MARKED
// disable ( 600 ) ;
4988: LD_INT 600
4990: DISABLE_MARKED
// mp_selectmsg := true ;
4991: LD_ADDR_OWVAR 13
4995: PUSH
4996: LD_INT 1
4998: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4999: CALL 0 0 0
// init_map ;
5003: CALL 1508 0 0
// init_respawning ;
5007: CALL 6754 0 0
// set_shared_visions_and_alliances ;
5011: CALL 2679 0 0
// prepare_sides ;
5015: CALL 4635 0 0
// InitLimits ;
5019: CALL 11633 0 0
// ShowTimer ;
5023: CALL 12570 0 0
// music_nat := Side_Nations [ your_side ] ;
5027: LD_ADDR_OWVAR 71
5031: PUSH
5032: LD_EXP 22
5036: PUSH
5037: LD_OWVAR 2
5041: ARRAY
5042: ST_TO_ADDR
// if IAmSpec then
5043: CALL_OW 531
5047: IFFALSE 5083
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5049: LD_INT 0
5051: PPUSH
5052: LD_INT 0
5054: PPUSH
5055: LD_OWVAR 2
5059: PPUSH
5060: LD_INT 32767
5062: NEG
5063: PPUSH
5064: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5068: LD_INT 104
5070: PPUSH
5071: LD_INT 69
5073: PPUSH
5074: CALL_OW 86
// enable ( 400 ) ;
5078: LD_INT 400
5080: ENABLE_MARKED
// end else
5081: GO 5137
// begin ResetFog ;
5083: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5087: LD_EXP 27
5091: PUSH
5092: LD_EXP 21
5096: PUSH
5097: LD_OWVAR 2
5101: ARRAY
5102: ARRAY
5103: PUSH
5104: LD_INT 1
5106: ARRAY
5107: PPUSH
5108: LD_EXP 27
5112: PUSH
5113: LD_EXP 21
5117: PUSH
5118: LD_OWVAR 2
5122: ARRAY
5123: ARRAY
5124: PUSH
5125: LD_INT 2
5127: ARRAY
5128: PPUSH
5129: CALL_OW 86
// Init_Win_Condition ;
5133: CALL 4934 0 0
// end ; InitApeman ;
5137: CALL 5921 0 0
// if def_builduptime then
5141: LD_EXP 56
5145: IFFALSE 5151
// BeginBuildUp ;
5147: CALL 8800 0 0
// end ;
5151: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 and spect = 0 do
5152: LD_INT 22
5154: PUSH
5155: LD_OWVAR 2
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: LD_INT 21
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 33
5179: PUSH
5180: LD_INT 3
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 33
5189: PUSH
5190: LD_INT 5
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: LD_INT 30
5199: PUSH
5200: LD_INT 0
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: PUSH
5207: LD_INT 30
5209: PUSH
5210: LD_INT 1
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: PPUSH
5229: CALL_OW 69
5233: PUSH
5234: LD_INT 0
5236: EQUAL
5237: PUSH
5238: LD_EXP 15
5242: PUSH
5243: LD_INT 0
5245: EQUAL
5246: AND
5247: IFFALSE 5261
5249: GO 5251
5251: DISABLE
// begin fogoff ( your_side ) ;
5252: LD_OWVAR 2
5256: PPUSH
5257: CALL_OW 344
// end ; end_of_file
5261: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5262: GO 5264
5264: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5265: LD_INT 4
5267: PPUSH
5268: LD_INT 5
5270: PPUSH
5271: CALL_OW 12
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: CALL_OW 57
// enable ;
5283: ENABLE
// end ;
5284: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5285: GO 5287
5287: DISABLE
5288: LD_INT 0
5290: PPUSH
5291: PPUSH
// begin case tick of 1 .. 1 1$0 :
5292: LD_OWVAR 1
5296: PUSH
5297: LD_INT 1
5299: DOUBLE
5300: GREATEREQUAL
5301: IFFALSE 5309
5303: LD_INT 2100
5305: DOUBLE
5306: LESSEQUAL
5307: IFTRUE 5311
5309: GO 5339
5311: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5312: LD_EXP 9
5316: PUSH
5317: LD_INT 100
5319: DIVREAL
5320: PUSH
5321: LD_INT 350
5323: PPUSH
5324: LD_INT 1050
5326: PPUSH
5327: CALL_OW 12
5331: MUL
5332: PPUSH
5333: CALL_OW 67
5337: GO 5641
5339: LD_INT 2100
5341: PUSH
5342: LD_INT 1
5344: PLUS
5345: DOUBLE
5346: GREATEREQUAL
5347: IFFALSE 5355
5349: LD_INT 10500
5351: DOUBLE
5352: LESSEQUAL
5353: IFTRUE 5357
5355: GO 5385
5357: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5358: LD_EXP 9
5362: PUSH
5363: LD_INT 100
5365: DIVREAL
5366: PUSH
5367: LD_INT 1050
5369: PPUSH
5370: LD_INT 1575
5372: PPUSH
5373: CALL_OW 12
5377: MUL
5378: PPUSH
5379: CALL_OW 67
5383: GO 5641
5385: LD_INT 10500
5387: PUSH
5388: LD_INT 1
5390: PLUS
5391: DOUBLE
5392: GREATEREQUAL
5393: IFFALSE 5401
5395: LD_INT 21000
5397: DOUBLE
5398: LESSEQUAL
5399: IFTRUE 5403
5401: GO 5431
5403: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5404: LD_EXP 9
5408: PUSH
5409: LD_INT 100
5411: DIVREAL
5412: PUSH
5413: LD_INT 1575
5415: PPUSH
5416: LD_INT 2100
5418: PPUSH
5419: CALL_OW 12
5423: MUL
5424: PPUSH
5425: CALL_OW 67
5429: GO 5641
5431: LD_INT 21000
5433: PUSH
5434: LD_INT 1
5436: PLUS
5437: DOUBLE
5438: GREATEREQUAL
5439: IFFALSE 5447
5441: LD_INT 42000
5443: DOUBLE
5444: LESSEQUAL
5445: IFTRUE 5449
5447: GO 5477
5449: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5450: LD_EXP 9
5454: PUSH
5455: LD_INT 100
5457: DIVREAL
5458: PUSH
5459: LD_INT 2100
5461: PPUSH
5462: LD_INT 2625
5464: PPUSH
5465: CALL_OW 12
5469: MUL
5470: PPUSH
5471: CALL_OW 67
5475: GO 5641
5477: LD_INT 42000
5479: PUSH
5480: LD_INT 1
5482: PLUS
5483: DOUBLE
5484: GREATEREQUAL
5485: IFFALSE 5493
5487: LD_INT 63000
5489: DOUBLE
5490: LESSEQUAL
5491: IFTRUE 5495
5493: GO 5523
5495: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5496: LD_EXP 9
5500: PUSH
5501: LD_INT 100
5503: DIVREAL
5504: PUSH
5505: LD_INT 2625
5507: PPUSH
5508: LD_INT 3150
5510: PPUSH
5511: CALL_OW 12
5515: MUL
5516: PPUSH
5517: CALL_OW 67
5521: GO 5641
5523: LD_INT 63000
5525: PUSH
5526: LD_INT 1
5528: PLUS
5529: DOUBLE
5530: GREATEREQUAL
5531: IFFALSE 5539
5533: LD_INT 105000
5535: DOUBLE
5536: LESSEQUAL
5537: IFTRUE 5541
5539: GO 5569
5541: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5542: LD_EXP 9
5546: PUSH
5547: LD_INT 100
5549: DIVREAL
5550: PUSH
5551: LD_INT 3150
5553: PPUSH
5554: LD_INT 3675
5556: PPUSH
5557: CALL_OW 12
5561: MUL
5562: PPUSH
5563: CALL_OW 67
5567: GO 5641
5569: LD_INT 105000
5571: PUSH
5572: LD_INT 1
5574: PLUS
5575: DOUBLE
5576: GREATEREQUAL
5577: IFFALSE 5585
5579: LD_INT 630000
5581: DOUBLE
5582: LESSEQUAL
5583: IFTRUE 5587
5585: GO 5615
5587: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5588: LD_EXP 9
5592: PUSH
5593: LD_INT 100
5595: DIVREAL
5596: PUSH
5597: LD_INT 3675
5599: PPUSH
5600: LD_INT 4200
5602: PPUSH
5603: CALL_OW 12
5607: MUL
5608: PPUSH
5609: CALL_OW 67
5613: GO 5641
5615: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5616: LD_EXP 9
5620: PUSH
5621: LD_INT 100
5623: DIVREAL
5624: PUSH
5625: LD_INT 4200
5627: PPUSH
5628: LD_INT 5250
5630: PPUSH
5631: CALL_OW 12
5635: MUL
5636: PPUSH
5637: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5641: LD_ADDR_VAR 0 2
5645: PUSH
5646: LD_INT 3
5648: PPUSH
5649: LD_INT 5
5651: PPUSH
5652: CALL_OW 12
5656: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5657: LD_ADDR_VAR 0 1
5661: PUSH
5662: LD_EXP 21
5666: PUSH
5667: LD_INT 0
5669: PUSH
5670: EMPTY
5671: LIST
5672: DIFF
5673: PUSH
5674: FOR_IN
5675: IFFALSE 5724
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5677: LD_VAR 0 2
5681: PPUSH
5682: LD_EXP 27
5686: PUSH
5687: LD_VAR 0 1
5691: ARRAY
5692: PUSH
5693: LD_INT 1
5695: ARRAY
5696: PPUSH
5697: LD_EXP 27
5701: PUSH
5702: LD_VAR 0 1
5706: ARRAY
5707: PUSH
5708: LD_INT 2
5710: ARRAY
5711: PPUSH
5712: LD_INT 20
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: CALL_OW 56
5722: GO 5674
5724: POP
5725: POP
// enable ;
5726: ENABLE
// end ; end_of_file
5727: PPOPN 2
5729: END
// every 20 20$00 trigger apemanNumber do
5730: LD_EXP 33
5734: IFFALSE 5767
5736: GO 5738
5738: DISABLE
// begin enable ;
5739: ENABLE
// if apeLevel >= 8 then
5740: LD_EXP 38
5744: PUSH
5745: LD_INT 8
5747: GREATEREQUAL
5748: IFFALSE 5753
// disable else
5750: DISABLE
5751: GO 5767
// apeLevel := apeLevel + 1 ;
5753: LD_ADDR_EXP 38
5757: PUSH
5758: LD_EXP 38
5762: PUSH
5763: LD_INT 1
5765: PLUS
5766: ST_TO_ADDR
// end ;
5767: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5768: LD_EXP 33
5772: PUSH
5773: LD_EXP 34
5777: LESS
5778: IFFALSE 5918
5780: GO 5782
5782: DISABLE
5783: LD_INT 0
5785: PPUSH
5786: PPUSH
5787: PPUSH
5788: PPUSH
// begin enable ;
5789: ENABLE
// for i := 1 to apemanPos do
5790: LD_ADDR_VAR 0 1
5794: PUSH
5795: DOUBLE
5796: LD_INT 1
5798: DEC
5799: ST_TO_ADDR
5800: LD_EXP 36
5804: PUSH
5805: FOR_TO
5806: IFFALSE 5916
// begin if apemanPlayerCount [ i ] then
5808: LD_EXP 37
5812: PUSH
5813: LD_VAR 0 1
5817: ARRAY
5818: IFFALSE 5914
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5820: LD_EXP 37
5824: PUSH
5825: LD_VAR 0 1
5829: ARRAY
5830: PUSH
5831: LD_EXP 36
5835: PUSH
5836: LD_VAR 0 1
5840: ARRAY
5841: GREATER
5842: IFFALSE 5914
// begin ape := PrepareApeman ;
5844: LD_ADDR_VAR 0 2
5848: PUSH
5849: CALL 6429 0 0
5853: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_EXP 39
5863: PUSH
5864: LD_VAR 0 1
5868: ARRAY
5869: PPUSH
5870: LD_INT 0
5872: PPUSH
5873: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5877: LD_ADDR_EXP 36
5881: PUSH
5882: LD_EXP 36
5886: PPUSH
5887: LD_VAR 0 1
5891: PPUSH
5892: LD_EXP 36
5896: PUSH
5897: LD_VAR 0 1
5901: ARRAY
5902: PUSH
5903: LD_VAR 0 2
5907: UNION
5908: PPUSH
5909: CALL_OW 1
5913: ST_TO_ADDR
// end ; end ; end ;
5914: GO 5805
5916: POP
5917: POP
// end ;
5918: PPOPN 4
5920: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5921: LD_INT 0
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// playersAmount := 0 ;
5930: LD_ADDR_VAR 0 3
5934: PUSH
5935: LD_INT 0
5937: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5938: LD_ADDR_VAR 0 7
5942: PUSH
5943: LD_INT 3
5945: PUSH
5946: LD_INT 2
5948: PUSH
5949: LD_INT 1
5951: PUSH
5952: LD_INT 4
5954: PUSH
5955: LD_INT 6
5957: PUSH
5958: LD_INT 5
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5969: LD_ADDR_EXP 39
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: LD_INT 0
5979: PUSH
5980: LD_INT 0
5982: PUSH
5983: LD_INT 0
5985: PUSH
5986: LD_INT 0
5988: PUSH
5989: LD_INT 0
5991: PUSH
5992: LD_INT 0
5994: PUSH
5995: LD_INT 0
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: ST_TO_ADDR
// for j = 1 to Side_Positions do
6008: LD_ADDR_VAR 0 4
6012: PUSH
6013: DOUBLE
6014: LD_INT 1
6016: DEC
6017: ST_TO_ADDR
6018: LD_EXP 21
6022: PUSH
6023: FOR_TO
6024: IFFALSE 6091
// if Side_Positions [ j ] then
6026: LD_EXP 21
6030: PUSH
6031: LD_VAR 0 4
6035: ARRAY
6036: IFFALSE 6089
// begin playersAmount := playersAmount + 1 ;
6038: LD_ADDR_VAR 0 3
6042: PUSH
6043: LD_VAR 0 3
6047: PUSH
6048: LD_INT 1
6050: PLUS
6051: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6052: LD_ADDR_EXP 39
6056: PUSH
6057: LD_EXP 39
6061: PPUSH
6062: LD_VAR 0 4
6066: PPUSH
6067: LD_VAR 0 7
6071: PUSH
6072: LD_EXP 21
6076: PUSH
6077: LD_VAR 0 4
6081: ARRAY
6082: ARRAY
6083: PPUSH
6084: CALL_OW 1
6088: ST_TO_ADDR
// end ;
6089: GO 6023
6091: POP
6092: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6093: LD_ADDR_EXP 35
6097: PUSH
6098: LD_INT 3
6100: PUSH
6101: LD_EXP 11
6105: MUL
6106: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6107: LD_ADDR_EXP 33
6111: PUSH
6112: LD_VAR 0 3
6116: PUSH
6117: LD_EXP 35
6121: MUL
6122: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6123: LD_ADDR_EXP 34
6127: PUSH
6128: LD_EXP 33
6132: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6133: LD_ADDR_EXP 36
6137: PUSH
6138: LD_INT 0
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: LD_INT 0
6146: PUSH
6147: LD_INT 0
6149: PUSH
6150: LD_INT 0
6152: PUSH
6153: LD_INT 0
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: LD_INT 0
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6172: LD_ADDR_EXP 37
6176: PUSH
6177: LD_INT 0
6179: PUSH
6180: LD_INT 0
6182: PUSH
6183: LD_INT 0
6185: PUSH
6186: LD_INT 0
6188: PUSH
6189: LD_INT 0
6191: PUSH
6192: LD_INT 0
6194: PUSH
6195: LD_INT 0
6197: PUSH
6198: LD_INT 0
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: ST_TO_ADDR
// apeLevel := 1 ;
6211: LD_ADDR_EXP 38
6215: PUSH
6216: LD_INT 1
6218: ST_TO_ADDR
// if not apemanNumber then
6219: LD_EXP 33
6223: NOT
6224: IFFALSE 6228
// exit ;
6226: GO 6424
// for i := 1 to apemanPerPlayer do
6228: LD_ADDR_VAR 0 2
6232: PUSH
6233: DOUBLE
6234: LD_INT 1
6236: DEC
6237: ST_TO_ADDR
6238: LD_EXP 35
6242: PUSH
6243: FOR_TO
6244: IFFALSE 6422
// begin for j := 1 to Side_Positions do
6246: LD_ADDR_VAR 0 4
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_EXP 21
6260: PUSH
6261: FOR_TO
6262: IFFALSE 6418
// if Side_Positions [ j ] then
6264: LD_EXP 21
6268: PUSH
6269: LD_VAR 0 4
6273: ARRAY
6274: IFFALSE 6416
// begin pos := Side_Positions [ j ] ;
6276: LD_ADDR_VAR 0 6
6280: PUSH
6281: LD_EXP 21
6285: PUSH
6286: LD_VAR 0 4
6290: ARRAY
6291: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6292: LD_ADDR_EXP 37
6296: PUSH
6297: LD_EXP 37
6301: PPUSH
6302: LD_VAR 0 4
6306: PPUSH
6307: LD_EXP 37
6311: PUSH
6312: LD_VAR 0 4
6316: ARRAY
6317: PUSH
6318: LD_INT 1
6320: PLUS
6321: PPUSH
6322: CALL_OW 1
6326: ST_TO_ADDR
// ape := PrepareApeman ;
6327: LD_ADDR_VAR 0 5
6331: PUSH
6332: CALL 6429 0 0
6336: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6337: LD_ADDR_EXP 36
6341: PUSH
6342: LD_EXP 36
6346: PPUSH
6347: LD_VAR 0 4
6351: PPUSH
6352: LD_EXP 36
6356: PUSH
6357: LD_VAR 0 4
6361: ARRAY
6362: PPUSH
6363: LD_EXP 36
6367: PUSH
6368: LD_VAR 0 4
6372: ARRAY
6373: PUSH
6374: LD_INT 1
6376: PLUS
6377: PPUSH
6378: LD_VAR 0 5
6382: PPUSH
6383: CALL_OW 1
6387: PPUSH
6388: CALL_OW 1
6392: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6393: LD_VAR 0 5
6397: PPUSH
6398: LD_EXP 39
6402: PUSH
6403: LD_VAR 0 4
6407: ARRAY
6408: PPUSH
6409: LD_INT 0
6411: PPUSH
6412: CALL_OW 49
// end ;
6416: GO 6261
6418: POP
6419: POP
// end ;
6420: GO 6243
6422: POP
6423: POP
// end ;
6424: LD_VAR 0 1
6428: RET
// export function PrepareApeman ; var bonus ; begin
6429: LD_INT 0
6431: PPUSH
6432: PPUSH
// uc_side := 0 ;
6433: LD_ADDR_OWVAR 20
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// uc_nation := 0 ;
6441: LD_ADDR_OWVAR 21
6445: PUSH
6446: LD_INT 0
6448: ST_TO_ADDR
// InitHc ;
6449: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6453: LD_ADDR_VAR 0 2
6457: PUSH
6458: LD_INT 1
6460: NEG
6461: PUSH
6462: LD_INT 0
6464: PUSH
6465: LD_INT 1
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: LD_OWVAR 1
6477: PUSH
6478: LD_INT 3
6480: MOD
6481: PUSH
6482: LD_INT 1
6484: PLUS
6485: ARRAY
6486: ST_TO_ADDR
// hc_class := class_apeman ;
6487: LD_ADDR_OWVAR 28
6491: PUSH
6492: LD_INT 12
6494: ST_TO_ADDR
// hc_gallery :=  ;
6495: LD_ADDR_OWVAR 33
6499: PUSH
6500: LD_STRING 
6502: ST_TO_ADDR
// hc_name :=  ;
6503: LD_ADDR_OWVAR 26
6507: PUSH
6508: LD_STRING 
6510: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6511: LD_ADDR_OWVAR 31
6515: PUSH
6516: LD_EXP 38
6520: PUSH
6521: LD_VAR 0 2
6525: PLUS
6526: PUSH
6527: LD_EXP 38
6531: PUSH
6532: LD_VAR 0 2
6536: PLUS
6537: PUSH
6538: LD_EXP 38
6542: PUSH
6543: LD_VAR 0 2
6547: PLUS
6548: PUSH
6549: LD_EXP 38
6553: PUSH
6554: LD_VAR 0 2
6558: PLUS
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6566: LD_ADDR_OWVAR 35
6570: PUSH
6571: LD_INT 10
6573: PUSH
6574: LD_VAR 0 2
6578: MUL
6579: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6580: LD_ADDR_OWVAR 29
6584: PUSH
6585: LD_INT 12
6587: PUSH
6588: LD_INT 10
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: ST_TO_ADDR
// result := CreateHuman ;
6595: LD_ADDR_VAR 0 1
6599: PUSH
6600: CALL_OW 44
6604: ST_TO_ADDR
// end ;
6605: LD_VAR 0 1
6609: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6610: LD_INT 0
6612: PPUSH
6613: PPUSH
6614: PPUSH
// if not ape then
6615: LD_VAR 0 1
6619: NOT
6620: IFFALSE 6624
// exit ;
6622: GO 6749
// side := GetSide ( ape ) ;
6624: LD_ADDR_VAR 0 3
6628: PUSH
6629: LD_VAR 0 1
6633: PPUSH
6634: CALL_OW 255
6638: ST_TO_ADDR
// if not side then
6639: LD_VAR 0 3
6643: NOT
6644: IFFALSE 6698
// begin for i = 1 to apemanPos do
6646: LD_ADDR_VAR 0 4
6650: PUSH
6651: DOUBLE
6652: LD_INT 1
6654: DEC
6655: ST_TO_ADDR
6656: LD_EXP 36
6660: PUSH
6661: FOR_TO
6662: IFFALSE 6696
// if ape in apemanPos [ i ] then
6664: LD_VAR 0 1
6668: PUSH
6669: LD_EXP 36
6673: PUSH
6674: LD_VAR 0 4
6678: ARRAY
6679: IN
6680: IFFALSE 6694
// begin side := i ;
6682: LD_ADDR_VAR 0 3
6686: PUSH
6687: LD_VAR 0 4
6691: ST_TO_ADDR
// break ;
6692: GO 6696
// end ;
6694: GO 6661
6696: POP
6697: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6698: LD_ADDR_EXP 36
6702: PUSH
6703: LD_EXP 36
6707: PPUSH
6708: LD_VAR 0 3
6712: PPUSH
6713: LD_EXP 36
6717: PUSH
6718: LD_VAR 0 3
6722: ARRAY
6723: PUSH
6724: LD_VAR 0 1
6728: DIFF
6729: PPUSH
6730: CALL_OW 1
6734: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6735: LD_ADDR_EXP 33
6739: PUSH
6740: LD_EXP 33
6744: PUSH
6745: LD_INT 1
6747: MINUS
6748: ST_TO_ADDR
// end ; end_of_file
6749: LD_VAR 0 2
6753: RET
// var respawn , inqueue ; export function init_respawning ; begin
6754: LD_INT 0
6756: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6757: LD_ADDR_LOC 9
6761: PUSH
6762: LD_INT 1
6764: PPUSH
6765: LD_INT 8
6767: PPUSH
6768: CALL_OW 12
6772: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6773: LD_ADDR_LOC 10
6777: PUSH
6778: LD_INT 0
6780: PUSH
6781: LD_INT 0
6783: PUSH
6784: LD_INT 0
6786: PUSH
6787: LD_INT 0
6789: PUSH
6790: LD_INT 0
6792: PUSH
6793: LD_INT 0
6795: PUSH
6796: LD_INT 0
6798: PUSH
6799: LD_INT 0
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: ST_TO_ADDR
// end ;
6812: LD_VAR 0 1
6816: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6817: GO 6819
6819: DISABLE
6820: LD_INT 0
6822: PPUSH
6823: PPUSH
6824: PPUSH
// begin if respawning_time_max = 0 then
6825: LD_EXP 14
6829: PUSH
6830: LD_INT 0
6832: EQUAL
6833: IFFALSE 6837
// exit ;
6835: GO 7246
// if respawn = 8 then
6837: LD_LOC 9
6841: PUSH
6842: LD_INT 8
6844: EQUAL
6845: IFFALSE 6857
// respawn := 1 else
6847: LD_ADDR_LOC 9
6851: PUSH
6852: LD_INT 1
6854: ST_TO_ADDR
6855: GO 6871
// respawn := respawn + 1 ;
6857: LD_ADDR_LOC 9
6861: PUSH
6862: LD_LOC 9
6866: PUSH
6867: LD_INT 1
6869: PLUS
6870: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6871: LD_EXP 21
6875: PUSH
6876: LD_LOC 9
6880: ARRAY
6881: PUSH
6882: LD_LOC 10
6886: PUSH
6887: LD_LOC 9
6891: ARRAY
6892: NOT
6893: AND
6894: IFFALSE 7245
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6896: LD_ADDR_VAR 0 1
6900: PUSH
6901: LD_INT 21
6903: PUSH
6904: LD_INT 1
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 22
6913: PUSH
6914: LD_LOC 9
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: LD_INT 23
6928: PUSH
6929: LD_INT 0
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: PPUSH
6942: CALL_OW 69
6946: ST_TO_ADDR
// if n < number_of_people then
6947: LD_VAR 0 1
6951: PUSH
6952: LD_EXP 5
6956: LESS
6957: IFFALSE 7242
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6959: LD_ADDR_VAR 0 2
6963: PUSH
6964: LD_INT 21
6966: PUSH
6967: LD_INT 3
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: LD_INT 30
6979: PUSH
6980: LD_INT 0
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 30
6989: PUSH
6990: LD_INT 1
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 50
7004: PUSH
7005: EMPTY
7006: LIST
7007: PUSH
7008: LD_INT 22
7010: PUSH
7011: LD_LOC 9
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: PPUSH
7026: CALL_OW 69
7030: ST_TO_ADDR
// if dep > 0 then
7031: LD_VAR 0 2
7035: PUSH
7036: LD_INT 0
7038: GREATER
7039: IFFALSE 7239
// begin aktresp := respawn ;
7041: LD_ADDR_VAR 0 3
7045: PUSH
7046: LD_LOC 9
7050: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7051: LD_ADDR_LOC 10
7055: PUSH
7056: LD_LOC 10
7060: PPUSH
7061: LD_VAR 0 3
7065: PPUSH
7066: LD_INT 1
7068: PPUSH
7069: CALL_OW 1
7073: ST_TO_ADDR
// enable ;
7074: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7075: LD_EXP 13
7079: PPUSH
7080: LD_EXP 14
7084: PPUSH
7085: CALL_OW 12
7089: PPUSH
7090: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7094: LD_ADDR_LOC 10
7098: PUSH
7099: LD_LOC 10
7103: PPUSH
7104: LD_VAR 0 3
7108: PPUSH
7109: LD_INT 0
7111: PPUSH
7112: CALL_OW 1
7116: ST_TO_ADDR
// hc_name :=  ;
7117: LD_ADDR_OWVAR 26
7121: PUSH
7122: LD_STRING 
7124: ST_TO_ADDR
// hc_importance := 0 ;
7125: LD_ADDR_OWVAR 32
7129: PUSH
7130: LD_INT 0
7132: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7133: LD_INT 0
7135: PPUSH
7136: LD_INT 0
7138: PPUSH
7139: LD_EXP 6
7143: PUSH
7144: LD_INT 2
7146: DIV
7147: PPUSH
7148: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7152: LD_ADDR_OWVAR 21
7156: PUSH
7157: LD_EXP 22
7161: PUSH
7162: LD_VAR 0 3
7166: ARRAY
7167: ST_TO_ADDR
// uc_side := aktresp ;
7168: LD_ADDR_OWVAR 20
7172: PUSH
7173: LD_VAR 0 3
7177: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
7178: LD_ADDR_VAR 0 2
7182: PUSH
7183: LD_VAR 0 2
7187: PUSH
7188: LD_INT 1
7190: PPUSH
7191: LD_VAR 0 2
7195: PPUSH
7196: CALL_OW 12
7200: ARRAY
7201: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
7202: CALL_OW 44
7206: PPUSH
7207: LD_VAR 0 2
7211: PPUSH
7212: CALL_OW 250
7216: PPUSH
7217: LD_VAR 0 2
7221: PPUSH
7222: CALL_OW 251
7226: PPUSH
7227: LD_INT 7
7229: PPUSH
7230: LD_INT 1
7232: PPUSH
7233: CALL_OW 50
// end else
7237: GO 7240
// enable ;
7239: ENABLE
// end else
7240: GO 7243
// enable ;
7242: ENABLE
// end else
7243: GO 7246
// enable ;
7245: ENABLE
// end ; end_of_file
7246: PPOPN 3
7248: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7249: LD_VAR 0 1
7253: PPUSH
7254: CALL_OW 266
7258: PUSH
7259: LD_INT 0
7261: PUSH
7262: LD_INT 1
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: IN
7269: IFFALSE 7294
// SetBName ( b , @ & GetSide ( b ) ) ;
7271: LD_VAR 0 1
7275: PPUSH
7276: LD_STRING @
7278: PUSH
7279: LD_VAR 0 1
7283: PPUSH
7284: CALL_OW 255
7288: STR
7289: PPUSH
7290: CALL_OW 500
// if def_game_rules then
7294: LD_EXP 42
7298: IFFALSE 7335
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7300: LD_VAR 0 1
7304: PPUSH
7305: LD_VAR 0 1
7309: PPUSH
7310: CALL_OW 266
7314: PPUSH
7315: LD_VAR 0 1
7319: PPUSH
7320: CALL_OW 255
7324: PPUSH
7325: LD_INT 0
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: CALL 12034 0 5
// end ;
7335: PPOPN 2
7337: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7338: LD_VAR 0 1
7342: PPUSH
7343: CALL_OW 266
7347: PUSH
7348: LD_INT 0
7350: PUSH
7351: LD_INT 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: IN
7358: IFFALSE 7383
// SetBName ( b , @ & GetSide ( b ) ) ;
7360: LD_VAR 0 1
7364: PPUSH
7365: LD_STRING @
7367: PUSH
7368: LD_VAR 0 1
7372: PPUSH
7373: CALL_OW 255
7377: STR
7378: PPUSH
7379: CALL_OW 500
// if def_game_rules then
7383: LD_EXP 42
7387: IFFALSE 7426
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7389: LD_VAR 0 1
7393: PPUSH
7394: LD_VAR 0 1
7398: PPUSH
7399: CALL_OW 266
7403: PPUSH
7404: LD_VAR 0 1
7408: PPUSH
7409: CALL_OW 255
7413: PPUSH
7414: LD_VAR 0 2
7418: PPUSH
7419: LD_INT 1
7421: PPUSH
7422: CALL 12034 0 5
// end ;
7426: PPOPN 3
7428: END
// on VehicleConstructed ( veh , fac ) do var side ;
7429: LD_INT 0
7431: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7432: LD_VAR 0 1
7436: PPUSH
7437: CALL_OW 263
7441: PUSH
7442: LD_INT 5
7444: EQUAL
7445: IFFALSE 7587
// begin side := GetSide ( veh ) ;
7447: LD_ADDR_VAR 0 3
7451: PUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 255
7461: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7462: LD_ADDR_EXP 36
7466: PUSH
7467: LD_EXP 36
7471: PPUSH
7472: LD_VAR 0 3
7476: PPUSH
7477: LD_EXP 36
7481: PUSH
7482: LD_VAR 0 3
7486: ARRAY
7487: PPUSH
7488: LD_INT 52
7490: PUSH
7491: EMPTY
7492: LIST
7493: PPUSH
7494: CALL_OW 72
7498: PUSH
7499: LD_INT 22
7501: PUSH
7502: LD_VAR 0 3
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 2
7513: PUSH
7514: LD_INT 33
7516: PUSH
7517: LD_INT 5
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: LD_INT 25
7526: PUSH
7527: LD_INT 12
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 25
7536: PUSH
7537: LD_INT 15
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 25
7546: PUSH
7547: LD_INT 16
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 25
7556: PUSH
7557: LD_INT 17
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PPUSH
7576: CALL_OW 69
7580: UNION
7581: PPUSH
7582: CALL_OW 1
7586: ST_TO_ADDR
// end ; end ;
7587: PPOPN 3
7589: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7590: LD_INT 0
7592: PPUSH
7593: PPUSH
7594: PPUSH
7595: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7596: LD_VAR 0 1
7600: PPUSH
7601: CALL_OW 257
7605: PUSH
7606: LD_INT 12
7608: PUSH
7609: LD_INT 15
7611: PUSH
7612: LD_INT 17
7614: PUSH
7615: LD_INT 16
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: IN
7624: PUSH
7625: LD_VAR 0 1
7629: PPUSH
7630: CALL_OW 263
7634: PUSH
7635: LD_INT 5
7637: EQUAL
7638: OR
7639: IFFALSE 7650
// ApeKilled ( j ) ;
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL 6610 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7650: LD_VAR 0 1
7654: PPUSH
7655: CALL_OW 266
7659: PUSH
7660: LD_INT 0
7662: PUSH
7663: LD_INT 1
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: IN
7670: IFFALSE 7752
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7672: LD_ADDR_VAR 0 4
7676: PUSH
7677: LD_EXP 21
7681: PUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 255
7691: ARRAY
7692: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7693: LD_ADDR_VAR 0 2
7697: PUSH
7698: LD_EXP 27
7702: PUSH
7703: LD_VAR 0 4
7707: ARRAY
7708: PUSH
7709: LD_INT 1
7711: ARRAY
7712: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7713: LD_ADDR_VAR 0 3
7717: PUSH
7718: LD_EXP 27
7722: PUSH
7723: LD_VAR 0 4
7727: ARRAY
7728: PUSH
7729: LD_INT 2
7731: ARRAY
7732: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7733: LD_VAR 0 2
7737: PPUSH
7738: LD_VAR 0 3
7742: PPUSH
7743: CALL_OW 420
7747: PPUSH
7748: CALL_OW 419
// end ; if def_game_rules then
7752: LD_EXP 42
7756: IFFALSE 7855
// if ( GetType ( j ) = 3 ) then
7758: LD_VAR 0 1
7762: PPUSH
7763: CALL_OW 247
7767: PUSH
7768: LD_INT 3
7770: EQUAL
7771: IFFALSE 7811
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7773: LD_VAR 0 1
7777: PPUSH
7778: LD_VAR 0 1
7782: PPUSH
7783: CALL_OW 266
7787: PPUSH
7788: LD_VAR 0 1
7792: PPUSH
7793: CALL_OW 255
7797: PPUSH
7798: LD_INT 0
7800: PPUSH
7801: LD_INT 1
7803: NEG
7804: PPUSH
7805: CALL 12034 0 5
7809: GO 7855
// if ( GetChassis ( j ) = 25 ) then
7811: LD_VAR 0 1
7815: PPUSH
7816: CALL_OW 265
7820: PUSH
7821: LD_INT 25
7823: EQUAL
7824: IFFALSE 7855
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7826: LD_VAR 0 1
7830: PPUSH
7831: LD_INT 37
7833: PPUSH
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 255
7843: PPUSH
7844: LD_INT 0
7846: PPUSH
7847: LD_INT 1
7849: NEG
7850: PPUSH
7851: CALL 12034 0 5
// end ;
7855: PPOPN 5
7857: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7858: LD_EXP 42
7862: PUSH
7863: LD_VAR 0 1
7867: PPUSH
7868: CALL_OW 265
7872: PUSH
7873: LD_INT 25
7875: EQUAL
7876: AND
7877: IFFALSE 7909
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7879: LD_VAR 0 1
7883: PPUSH
7884: LD_INT 37
7886: PPUSH
7887: LD_VAR 0 1
7891: PPUSH
7892: CALL_OW 255
7896: PPUSH
7897: LD_VAR 0 3
7901: PPUSH
7902: LD_INT 1
7904: PPUSH
7905: CALL 12034 0 5
// end ;
7909: PPOPN 4
7911: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7912: LD_VAR 0 1
7916: PPUSH
7917: LD_VAR 0 2
7921: PPUSH
7922: LD_VAR 0 3
7926: PPUSH
7927: LD_OWVAR 2
7931: PPUSH
7932: CALL 12712 0 4
7936: PPOPN 3
7938: END
// function CanWinLoose ; begin
7939: LD_INT 0
7941: PPUSH
// Result := true ;
7942: LD_ADDR_VAR 0 1
7946: PUSH
7947: LD_INT 1
7949: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7950: CALL_OW 518
7954: PUSH
7955: CALL_OW 519
7959: PUSH
7960: LD_INT 0
7962: GREATER
7963: AND
7964: IFFALSE 7974
// Result := false ;
7966: LD_ADDR_VAR 0 1
7970: PUSH
7971: LD_INT 0
7973: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7974: CALL_OW 531
7978: PUSH
7979: CALL_OW 519
7983: PUSH
7984: LD_INT 1
7986: GREATER
7987: AND
7988: IFFALSE 7998
// Result := false ;
7990: LD_ADDR_VAR 0 1
7994: PUSH
7995: LD_INT 0
7997: ST_TO_ADDR
// end ;
7998: LD_VAR 0 1
8002: RET
// function HasPower ( i ) ; begin
8003: LD_INT 0
8005: PPUSH
// if def_people_respawning then
8006: LD_EXP 53
8010: IFFALSE 8101
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8012: LD_ADDR_VAR 0 2
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_VAR 0 1
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 2
8031: PUSH
8032: LD_INT 21
8034: PUSH
8035: LD_INT 1
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 33
8044: PUSH
8045: LD_INT 3
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 33
8054: PUSH
8055: LD_INT 5
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 30
8064: PUSH
8065: LD_INT 0
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 30
8074: PUSH
8075: LD_INT 1
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PPUSH
8094: CALL_OW 69
8098: ST_TO_ADDR
8099: GO 8166
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8101: LD_ADDR_VAR 0 2
8105: PUSH
8106: LD_INT 22
8108: PUSH
8109: LD_VAR 0 1
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 2
8120: PUSH
8121: LD_INT 21
8123: PUSH
8124: LD_INT 1
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 33
8133: PUSH
8134: LD_INT 3
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 33
8143: PUSH
8144: LD_INT 5
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PPUSH
8161: CALL_OW 69
8165: ST_TO_ADDR
// end ;
8166: LD_VAR 0 2
8170: RET
// function AlliedSides ( i , j ) ; begin
8171: LD_INT 0
8173: PPUSH
// Result := false ;
8174: LD_ADDR_VAR 0 3
8178: PUSH
8179: LD_INT 0
8181: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8182: LD_VAR 0 1
8186: PPUSH
8187: LD_VAR 0 2
8191: PPUSH
8192: CALL_OW 81
8196: PUSH
8197: LD_INT 1
8199: EQUAL
8200: PUSH
8201: LD_VAR 0 2
8205: PPUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 81
8215: PUSH
8216: LD_INT 1
8218: EQUAL
8219: AND
8220: PUSH
8221: LD_VAR 0 1
8225: PPUSH
8226: CALL_OW 83
8230: AND
8231: PUSH
8232: LD_VAR 0 2
8236: PPUSH
8237: CALL_OW 83
8241: AND
8242: IFFALSE 8252
// Result := true ;
8244: LD_ADDR_VAR 0 3
8248: PUSH
8249: LD_INT 1
8251: ST_TO_ADDR
// end ;
8252: LD_VAR 0 3
8256: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8257: CALL 7939 0 0
8261: IFFALSE 8270
8263: GO 8265
8265: DISABLE
// YouLostInMultiplayer ;
8266: CALL_OW 107
8270: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8271: CALL 7939 0 0
8275: IFFALSE 8299
8277: GO 8279
8279: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8280: LD_EXP 22
8284: PUSH
8285: LD_OWVAR 2
8289: ARRAY
8290: PPUSH
8291: CALL 12754 0 1
// YouWinInMultiplayer ;
8295: CALL_OW 106
// end ;
8299: END
// every 0 0$3 marked 98 do var i , CanWin ;
8300: GO 8302
8302: DISABLE
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
// begin if not HasPower ( your_side ) then
8307: LD_OWVAR 2
8311: PPUSH
8312: CALL 8003 0 1
8316: NOT
8317: IFFALSE 8328
// begin Multiplayer_Loose_Message ;
8319: CALL_OW 521
// enable ( 400 ) ;
8323: LD_INT 400
8325: ENABLE_MARKED
// end else
8326: GO 8461
// begin CanWin := true ;
8328: LD_ADDR_VAR 0 2
8332: PUSH
8333: LD_INT 1
8335: ST_TO_ADDR
// for i := 1 to 8 do
8336: LD_ADDR_VAR 0 1
8340: PUSH
8341: DOUBLE
8342: LD_INT 1
8344: DEC
8345: ST_TO_ADDR
8346: LD_INT 8
8348: PUSH
8349: FOR_TO
8350: IFFALSE 8447
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8352: LD_EXP 21
8356: PUSH
8357: LD_VAR 0 1
8361: ARRAY
8362: PUSH
8363: LD_VAR 0 1
8367: PPUSH
8368: CALL_OW 108
8372: AND
8373: PUSH
8374: LD_VAR 0 1
8378: PUSH
8379: LD_OWVAR 2
8383: NONEQUAL
8384: AND
8385: IFFALSE 8445
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
8387: LD_EXP 19
8391: PUSH
8392: LD_VAR 0 1
8396: ARRAY
8397: NOT
8398: PUSH
8399: LD_EXP 19
8403: PUSH
8404: LD_VAR 0 1
8408: ARRAY
8409: PUSH
8410: LD_EXP 19
8414: PUSH
8415: LD_OWVAR 2
8419: ARRAY
8420: NONEQUAL
8421: OR
8422: IFFALSE 8445
// if HasPower ( i ) then
8424: LD_VAR 0 1
8428: PPUSH
8429: CALL 8003 0 1
8433: IFFALSE 8445
// begin CanWin := false ;
8435: LD_ADDR_VAR 0 2
8439: PUSH
8440: LD_INT 0
8442: ST_TO_ADDR
// break ;
8443: GO 8447
// end ;
8445: GO 8349
8447: POP
8448: POP
// if CanWin then
8449: LD_VAR 0 2
8453: IFFALSE 8460
// enable ( 401 ) else
8455: LD_INT 401
8457: ENABLE_MARKED
8458: GO 8461
// enable ;
8460: ENABLE
// end ; end ;
8461: PPOPN 2
8463: END
// every 0 0$3 marked 99 do var i , CanWin ;
8464: GO 8466
8466: DISABLE
8467: LD_INT 0
8469: PPUSH
8470: PPUSH
// begin if not HasPower ( your_side ) then
8471: LD_OWVAR 2
8475: PPUSH
8476: CALL 8003 0 1
8480: NOT
8481: IFFALSE 8492
// begin Multiplayer_Loose_Message ;
8483: CALL_OW 521
// enable ( 400 ) ;
8487: LD_INT 400
8489: ENABLE_MARKED
// end else
8490: GO 8605
// begin CanWin := true ;
8492: LD_ADDR_VAR 0 2
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// for i := 1 to 8 do
8500: LD_ADDR_VAR 0 1
8504: PUSH
8505: DOUBLE
8506: LD_INT 1
8508: DEC
8509: ST_TO_ADDR
8510: LD_INT 8
8512: PUSH
8513: FOR_TO
8514: IFFALSE 8591
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8516: LD_EXP 21
8520: PUSH
8521: LD_VAR 0 1
8525: ARRAY
8526: PUSH
8527: LD_VAR 0 1
8531: PPUSH
8532: CALL_OW 108
8536: AND
8537: PUSH
8538: LD_VAR 0 1
8542: PUSH
8543: LD_OWVAR 2
8547: NONEQUAL
8548: AND
8549: IFFALSE 8589
// if not AlliedSides ( i , your_side ) then
8551: LD_VAR 0 1
8555: PPUSH
8556: LD_OWVAR 2
8560: PPUSH
8561: CALL 8171 0 2
8565: NOT
8566: IFFALSE 8589
// if HasPower ( i ) then
8568: LD_VAR 0 1
8572: PPUSH
8573: CALL 8003 0 1
8577: IFFALSE 8589
// begin CanWin := false ;
8579: LD_ADDR_VAR 0 2
8583: PUSH
8584: LD_INT 0
8586: ST_TO_ADDR
// break ;
8587: GO 8591
// end ;
8589: GO 8513
8591: POP
8592: POP
// if CanWin then
8593: LD_VAR 0 2
8597: IFFALSE 8604
// enable ( 401 ) else
8599: LD_INT 401
8601: ENABLE_MARKED
8602: GO 8605
// enable ;
8604: ENABLE
// end ; end ; end_of_file
8605: PPOPN 2
8607: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8608: LD_INT 0
8610: PPUSH
8611: PPUSH
// for un in battle_flags_id do
8612: LD_ADDR_VAR 0 2
8616: PUSH
8617: LD_EXP 32
8621: PUSH
8622: FOR_IN
8623: IFFALSE 8698
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8625: LD_VAR 0 2
8629: PPUSH
8630: LD_INT 1
8632: PUSH
8633: LD_LOC 11
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 2
8644: PUSH
8645: LD_LOC 11
8649: PUSH
8650: LD_INT 2
8652: DIV
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: LD_INT 3
8660: PUSH
8661: LD_LOC 11
8665: PUSH
8666: LD_INT 5
8668: DIV
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 20
8676: PUSH
8677: LD_LOC 11
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: PPUSH
8692: CALL_OW 423
8696: GO 8622
8698: POP
8699: POP
// end ;
8700: LD_VAR 0 1
8704: RET
// every 1 do var un ;
8705: GO 8707
8707: DISABLE
8708: LD_INT 0
8710: PPUSH
// begin if not def_morale_flags then
8711: LD_EXP 51
8715: NOT
8716: IFFALSE 8720
// exit ;
8718: GO 8797
// if not morale_decreasing_time then
8720: LD_EXP 10
8724: NOT
8725: IFFALSE 8729
// exit ;
8727: GO 8797
// strength = 100 ;
8729: LD_ADDR_LOC 11
8733: PUSH
8734: LD_INT 100
8736: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8737: LD_EXP 10
8741: PPUSH
8742: CALL_OW 67
// strength := strength - 1 ;
8746: LD_ADDR_LOC 11
8750: PUSH
8751: LD_LOC 11
8755: PUSH
8756: LD_INT 1
8758: MINUS
8759: ST_TO_ADDR
// Update_Flags ;
8760: CALL 8608 0 0
// until not strength ;
8764: LD_LOC 11
8768: NOT
8769: IFFALSE 8737
// for un in battle_flags_id do
8771: LD_ADDR_VAR 0 1
8775: PUSH
8776: LD_EXP 32
8780: PUSH
8781: FOR_IN
8782: IFFALSE 8795
// KillBattleFlag ( un ) ;
8784: LD_VAR 0 1
8788: PPUSH
8789: CALL_OW 419
8793: GO 8781
8795: POP
8796: POP
// end ; end_of_file
8797: PPOPN 1
8799: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8800: LD_INT 0
8802: PPUSH
8803: PPUSH
8804: PPUSH
// enable ( 600 ) ;
8805: LD_INT 600
8807: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8808: LD_ADDR_VAR 0 2
8812: PUSH
8813: DOUBLE
8814: LD_INT 1
8816: DEC
8817: ST_TO_ADDR
8818: LD_EXP 40
8822: PUSH
8823: FOR_TO
8824: IFFALSE 8979
// if Position_Sides [ i ] then
8826: LD_EXP 24
8830: PUSH
8831: LD_VAR 0 2
8835: ARRAY
8836: IFFALSE 8977
// for j := 1 to 8 do
8838: LD_ADDR_VAR 0 3
8842: PUSH
8843: DOUBLE
8844: LD_INT 1
8846: DEC
8847: ST_TO_ADDR
8848: LD_INT 8
8850: PUSH
8851: FOR_TO
8852: IFFALSE 8975
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8854: LD_EXP 21
8858: PUSH
8859: LD_VAR 0 3
8863: ARRAY
8864: PUSH
8865: LD_EXP 19
8869: PUSH
8870: LD_EXP 24
8874: PUSH
8875: LD_VAR 0 2
8879: ARRAY
8880: ARRAY
8881: PUSH
8882: LD_EXP 19
8886: PUSH
8887: LD_VAR 0 3
8891: ARRAY
8892: NONEQUAL
8893: PUSH
8894: LD_EXP 23
8898: NOT
8899: PUSH
8900: LD_EXP 24
8904: PUSH
8905: LD_VAR 0 2
8909: ARRAY
8910: PUSH
8911: LD_VAR 0 3
8915: NONEQUAL
8916: AND
8917: OR
8918: AND
8919: IFFALSE 8943
// HideArea ( j , BuildUpAreas [ i ] ) else
8921: LD_VAR 0 3
8925: PPUSH
8926: LD_EXP 40
8930: PUSH
8931: LD_VAR 0 2
8935: ARRAY
8936: PPUSH
8937: CALL_OW 333
8941: GO 8973
// if ( j = your_side ) then
8943: LD_VAR 0 3
8947: PUSH
8948: LD_OWVAR 2
8952: EQUAL
8953: IFFALSE 8973
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8955: LD_EXP 40
8959: PUSH
8960: LD_VAR 0 2
8964: ARRAY
8965: PPUSH
8966: LD_INT 5
8968: PPUSH
8969: CALL_OW 424
8973: GO 8851
8975: POP
8976: POP
8977: GO 8823
8979: POP
8980: POP
// end ;
8981: LD_VAR 0 1
8985: RET
// export function EndBuildUp ; var i , j ; begin
8986: LD_INT 0
8988: PPUSH
8989: PPUSH
8990: PPUSH
// disable ( 600 ) ;
8991: LD_INT 600
8993: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
8994: LD_ADDR_VAR 0 2
8998: PUSH
8999: DOUBLE
9000: LD_INT 1
9002: DEC
9003: ST_TO_ADDR
9004: LD_EXP 40
9008: PUSH
9009: FOR_TO
9010: IFFALSE 9165
// if Position_Sides [ i ] then
9012: LD_EXP 24
9016: PUSH
9017: LD_VAR 0 2
9021: ARRAY
9022: IFFALSE 9163
// for j := 1 to 8 do
9024: LD_ADDR_VAR 0 3
9028: PUSH
9029: DOUBLE
9030: LD_INT 1
9032: DEC
9033: ST_TO_ADDR
9034: LD_INT 8
9036: PUSH
9037: FOR_TO
9038: IFFALSE 9161
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9040: LD_EXP 21
9044: PUSH
9045: LD_VAR 0 3
9049: ARRAY
9050: PUSH
9051: LD_EXP 19
9055: PUSH
9056: LD_EXP 24
9060: PUSH
9061: LD_VAR 0 2
9065: ARRAY
9066: ARRAY
9067: PUSH
9068: LD_EXP 19
9072: PUSH
9073: LD_VAR 0 3
9077: ARRAY
9078: NONEQUAL
9079: PUSH
9080: LD_EXP 23
9084: NOT
9085: PUSH
9086: LD_EXP 24
9090: PUSH
9091: LD_VAR 0 2
9095: ARRAY
9096: PUSH
9097: LD_VAR 0 3
9101: NONEQUAL
9102: AND
9103: OR
9104: AND
9105: IFFALSE 9129
// ShowArea ( j , BuildUpAreas [ i ] ) else
9107: LD_VAR 0 3
9111: PPUSH
9112: LD_EXP 40
9116: PUSH
9117: LD_VAR 0 2
9121: ARRAY
9122: PPUSH
9123: CALL_OW 334
9127: GO 9159
// if ( j = your_side ) then
9129: LD_VAR 0 3
9133: PUSH
9134: LD_OWVAR 2
9138: EQUAL
9139: IFFALSE 9159
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9141: LD_EXP 40
9145: PUSH
9146: LD_VAR 0 2
9150: ARRAY
9151: PPUSH
9152: LD_INT 0
9154: PPUSH
9155: CALL_OW 424
9159: GO 9037
9161: POP
9162: POP
9163: GO 9009
9165: POP
9166: POP
// end ;
9167: LD_VAR 0 1
9171: RET
// every 5 marked 600 do var i , un ;
9172: GO 9174
9174: DISABLE
9175: LD_INT 0
9177: PPUSH
9178: PPUSH
// begin for i := 1 to BuildUpAreas do
9179: LD_ADDR_VAR 0 1
9183: PUSH
9184: DOUBLE
9185: LD_INT 1
9187: DEC
9188: ST_TO_ADDR
9189: LD_EXP 40
9193: PUSH
9194: FOR_TO
9195: IFFALSE 9350
// if Position_Sides [ i ] then
9197: LD_EXP 24
9201: PUSH
9202: LD_VAR 0 1
9206: ARRAY
9207: IFFALSE 9348
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9209: LD_ADDR_VAR 0 2
9213: PUSH
9214: LD_EXP 40
9218: PUSH
9219: LD_VAR 0 1
9223: ARRAY
9224: PPUSH
9225: LD_INT 2
9227: PUSH
9228: LD_INT 21
9230: PUSH
9231: LD_INT 1
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PUSH
9238: LD_INT 21
9240: PUSH
9241: LD_INT 2
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 22
9255: PUSH
9256: LD_OWVAR 2
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PPUSH
9269: CALL_OW 70
9273: PUSH
9274: FOR_IN
9275: IFFALSE 9346
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9277: LD_EXP 19
9281: PUSH
9282: LD_EXP 24
9286: PUSH
9287: LD_VAR 0 1
9291: ARRAY
9292: ARRAY
9293: PUSH
9294: LD_EXP 19
9298: PUSH
9299: LD_OWVAR 2
9303: ARRAY
9304: NONEQUAL
9305: PUSH
9306: LD_EXP 23
9310: NOT
9311: PUSH
9312: LD_EXP 24
9316: PUSH
9317: LD_VAR 0 1
9321: ARRAY
9322: PUSH
9323: LD_OWVAR 2
9327: NONEQUAL
9328: AND
9329: OR
9330: IFFALSE 9344
// ComMoveToArea ( un , BuildUpEscape ) ;
9332: LD_VAR 0 2
9336: PPUSH
9337: LD_INT 13
9339: PPUSH
9340: CALL_OW 113
9344: GO 9274
9346: POP
9347: POP
9348: GO 9194
9350: POP
9351: POP
// enable ;
9352: ENABLE
// end ;
9353: PPOPN 2
9355: END
// every 5 5$00 do
9356: GO 9358
9358: DISABLE
// if ( def_builduptime = 1 ) then
9359: LD_EXP 56
9363: PUSH
9364: LD_INT 1
9366: EQUAL
9367: IFFALSE 9373
// EndBuildUp ;
9369: CALL 8986 0 0
9373: END
// every 10 10$00 do
9374: GO 9376
9376: DISABLE
// if ( def_builduptime = 2 ) then
9377: LD_EXP 56
9381: PUSH
9382: LD_INT 2
9384: EQUAL
9385: IFFALSE 9391
// EndBuildUp ;
9387: CALL 8986 0 0
9391: END
// every 15 15$00 do
9392: GO 9394
9394: DISABLE
// if ( def_builduptime = 3 ) then
9395: LD_EXP 56
9399: PUSH
9400: LD_INT 3
9402: EQUAL
9403: IFFALSE 9409
// EndBuildUp ; end_of_file
9405: CALL 8986 0 0
9409: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9410: LD_INT 0
9412: PPUSH
9413: PPUSH
// if ( not IAmSpec ) then
9414: CALL_OW 531
9418: NOT
9419: IFFALSE 9435
// Result := Limits_Info ^  ;
9421: LD_ADDR_VAR 0 1
9425: PUSH
9426: LD_LOC 23
9430: PUSH
9431: LD_STRING 
9433: ADD
9434: ST_TO_ADDR
// for i := 1 to 8 do
9435: LD_ADDR_VAR 0 2
9439: PUSH
9440: DOUBLE
9441: LD_INT 1
9443: DEC
9444: ST_TO_ADDR
9445: LD_INT 8
9447: PUSH
9448: FOR_TO
9449: IFFALSE 9494
// if Cheaters [ i ] then
9451: LD_LOC 24
9455: PUSH
9456: LD_VAR 0 2
9460: ARRAY
9461: IFFALSE 9492
// Result := Result ^ [ #Cheater , i , i ] ;
9463: LD_ADDR_VAR 0 1
9467: PUSH
9468: LD_VAR 0 1
9472: PUSH
9473: LD_STRING #Cheater
9475: PUSH
9476: LD_VAR 0 2
9480: PUSH
9481: LD_VAR 0 2
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: ADD
9491: ST_TO_ADDR
9492: GO 9448
9494: POP
9495: POP
// end ;
9496: LD_VAR 0 1
9500: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9501: LD_INT 0
9503: PPUSH
9504: PPUSH
9505: PPUSH
9506: PPUSH
9507: PPUSH
// case Game_Type of 10 :
9508: LD_EXP 41
9512: PUSH
9513: LD_INT 10
9515: DOUBLE
9516: EQUAL
9517: IFTRUE 9521
9519: GO 9532
9521: POP
// def_game_rules := 1 ; 11 :
9522: LD_ADDR_EXP 42
9526: PUSH
9527: LD_INT 1
9529: ST_TO_ADDR
9530: GO 9552
9532: LD_INT 11
9534: DOUBLE
9535: EQUAL
9536: IFTRUE 9540
9538: GO 9551
9540: POP
// def_game_rules := 3 ; end ;
9541: LD_ADDR_EXP 42
9545: PUSH
9546: LD_INT 3
9548: ST_TO_ADDR
9549: GO 9552
9551: POP
// case def_game_rules of 0 :
9552: LD_EXP 42
9556: PUSH
9557: LD_INT 0
9559: DOUBLE
9560: EQUAL
9561: IFTRUE 9565
9563: GO 9570
9565: POP
// exit ; 1 :
9566: GO 11628
9568: GO 11528
9570: LD_INT 1
9572: DOUBLE
9573: EQUAL
9574: IFTRUE 9578
9576: GO 9794
9578: POP
// begin def_base_level := 2 ;
9579: LD_ADDR_EXP 43
9583: PUSH
9584: LD_INT 2
9586: ST_TO_ADDR
// def_amount_of_people := 2 ;
9587: LD_ADDR_EXP 44
9591: PUSH
9592: LD_INT 2
9594: ST_TO_ADDR
// def_skill_level := 1 ;
9595: LD_ADDR_EXP 45
9599: PUSH
9600: LD_INT 1
9602: ST_TO_ADDR
// def_starting_resources := 2 ;
9603: LD_ADDR_EXP 46
9607: PUSH
9608: LD_INT 2
9610: ST_TO_ADDR
// def_shipments_density := 1 ;
9611: LD_ADDR_EXP 47
9615: PUSH
9616: LD_INT 1
9618: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9619: LD_ADDR_EXP 48
9623: PUSH
9624: LD_INT 0
9626: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9627: LD_ADDR_EXP 49
9631: PUSH
9632: LD_INT 1
9634: ST_TO_ADDR
// def_shared_vision := 1 ;
9635: LD_ADDR_EXP 50
9639: PUSH
9640: LD_INT 1
9642: ST_TO_ADDR
// def_morale_flags := 3 ;
9643: LD_ADDR_EXP 51
9647: PUSH
9648: LD_INT 3
9650: ST_TO_ADDR
// def_siberite_detection := 1 ;
9651: LD_ADDR_EXP 52
9655: PUSH
9656: LD_INT 1
9658: ST_TO_ADDR
// def_people_respawning := 1 ;
9659: LD_ADDR_EXP 53
9663: PUSH
9664: LD_INT 1
9666: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9667: LD_ADDR_EXP 54
9671: PUSH
9672: LD_INT 1
9674: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9675: LD_ADDR_EXP 55
9679: PUSH
9680: LD_INT 0
9682: ST_TO_ADDR
// def_builduptime := 2 ;
9683: LD_ADDR_EXP 56
9687: PUSH
9688: LD_INT 2
9690: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9691: LD_ADDR_VAR 0 2
9695: PUSH
9696: EMPTY
9697: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9698: LD_ADDR_VAR 0 3
9702: PUSH
9703: EMPTY
9704: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9705: LD_ADDR_LOC 18
9709: PUSH
9710: EMPTY
9711: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9712: LD_ADDR_LOC 19
9716: PUSH
9717: EMPTY
9718: ST_TO_ADDR
// Banned_Controls := [ ] ;
9719: LD_ADDR_LOC 20
9723: PUSH
9724: EMPTY
9725: ST_TO_ADDR
// Banned_Engines := [ ] ;
9726: LD_ADDR_LOC 21
9730: PUSH
9731: EMPTY
9732: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9733: LD_ADDR_LOC 16
9737: PUSH
9738: LD_INT 37
9740: PUSH
9741: EMPTY
9742: LIST
9743: PUSH
9744: LD_INT 4
9746: PUSH
9747: LD_INT 5
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 31
9756: PUSH
9757: LD_INT 32
9759: PUSH
9760: LD_INT 33
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9773: LD_ADDR_LOC 17
9777: PUSH
9778: LD_INT 2
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: LD_INT 4
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: ST_TO_ADDR
// end ; 2 :
9792: GO 11528
9794: LD_INT 2
9796: DOUBLE
9797: EQUAL
9798: IFTRUE 9802
9800: GO 10011
9802: POP
// begin def_base_level := 1 ;
9803: LD_ADDR_EXP 43
9807: PUSH
9808: LD_INT 1
9810: ST_TO_ADDR
// def_amount_of_people := 2 ;
9811: LD_ADDR_EXP 44
9815: PUSH
9816: LD_INT 2
9818: ST_TO_ADDR
// def_skill_level := 3 ;
9819: LD_ADDR_EXP 45
9823: PUSH
9824: LD_INT 3
9826: ST_TO_ADDR
// def_starting_resources := 3 ;
9827: LD_ADDR_EXP 46
9831: PUSH
9832: LD_INT 3
9834: ST_TO_ADDR
// def_shipments_density := 2 ;
9835: LD_ADDR_EXP 47
9839: PUSH
9840: LD_INT 2
9842: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9843: LD_ADDR_EXP 48
9847: PUSH
9848: LD_INT 1
9850: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9851: LD_ADDR_EXP 49
9855: PUSH
9856: LD_INT 2
9858: ST_TO_ADDR
// def_shared_vision := 1 ;
9859: LD_ADDR_EXP 50
9863: PUSH
9864: LD_INT 1
9866: ST_TO_ADDR
// def_morale_flags := 0 ;
9867: LD_ADDR_EXP 51
9871: PUSH
9872: LD_INT 0
9874: ST_TO_ADDR
// def_siberite_detection := 1 ;
9875: LD_ADDR_EXP 52
9879: PUSH
9880: LD_INT 1
9882: ST_TO_ADDR
// def_people_respawning := 0 ;
9883: LD_ADDR_EXP 53
9887: PUSH
9888: LD_INT 0
9890: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9891: LD_ADDR_EXP 54
9895: PUSH
9896: LD_INT 0
9898: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9899: LD_ADDR_EXP 55
9903: PUSH
9904: LD_INT 0
9906: ST_TO_ADDR
// def_builduptime := 2 ;
9907: LD_ADDR_EXP 56
9911: PUSH
9912: LD_INT 2
9914: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9915: LD_ADDR_VAR 0 2
9919: PUSH
9920: LD_INT 1
9922: PUSH
9923: EMPTY
9924: LIST
9925: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9926: LD_ADDR_VAR 0 3
9930: PUSH
9931: EMPTY
9932: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9933: LD_ADDR_LOC 18
9937: PUSH
9938: EMPTY
9939: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9940: LD_ADDR_LOC 19
9944: PUSH
9945: EMPTY
9946: ST_TO_ADDR
// Banned_Controls := [ ] ;
9947: LD_ADDR_LOC 20
9951: PUSH
9952: EMPTY
9953: ST_TO_ADDR
// Banned_Engines := [ ] ;
9954: LD_ADDR_LOC 21
9958: PUSH
9959: EMPTY
9960: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9961: LD_ADDR_LOC 16
9965: PUSH
9966: LD_INT 4
9968: PUSH
9969: LD_INT 5
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 31
9978: PUSH
9979: LD_INT 32
9981: PUSH
9982: LD_INT 33
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: LIST
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9994: LD_ADDR_LOC 17
9998: PUSH
9999: LD_INT 1
10001: PUSH
10002: LD_INT 2
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: ST_TO_ADDR
// end ; 3 :
10009: GO 11528
10011: LD_INT 3
10013: DOUBLE
10014: EQUAL
10015: IFTRUE 10019
10017: GO 10262
10019: POP
// begin def_base_level := 1 ;
10020: LD_ADDR_EXP 43
10024: PUSH
10025: LD_INT 1
10027: ST_TO_ADDR
// def_amount_of_people := 2 ;
10028: LD_ADDR_EXP 44
10032: PUSH
10033: LD_INT 2
10035: ST_TO_ADDR
// def_skill_level := 3 ;
10036: LD_ADDR_EXP 45
10040: PUSH
10041: LD_INT 3
10043: ST_TO_ADDR
// def_starting_resources := 3 ;
10044: LD_ADDR_EXP 46
10048: PUSH
10049: LD_INT 3
10051: ST_TO_ADDR
// def_shipments_density := 1 ;
10052: LD_ADDR_EXP 47
10056: PUSH
10057: LD_INT 1
10059: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10060: LD_ADDR_EXP 48
10064: PUSH
10065: LD_INT 0
10067: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10068: LD_ADDR_EXP 49
10072: PUSH
10073: LD_INT 1
10075: ST_TO_ADDR
// def_shared_vision := 1 ;
10076: LD_ADDR_EXP 50
10080: PUSH
10081: LD_INT 1
10083: ST_TO_ADDR
// def_morale_flags := 0 ;
10084: LD_ADDR_EXP 51
10088: PUSH
10089: LD_INT 0
10091: ST_TO_ADDR
// def_siberite_detection := 1 ;
10092: LD_ADDR_EXP 52
10096: PUSH
10097: LD_INT 1
10099: ST_TO_ADDR
// def_people_respawning := 0 ;
10100: LD_ADDR_EXP 53
10104: PUSH
10105: LD_INT 0
10107: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10108: LD_ADDR_EXP 54
10112: PUSH
10113: LD_INT 2
10115: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10116: LD_ADDR_EXP 55
10120: PUSH
10121: LD_INT 0
10123: ST_TO_ADDR
// def_builduptime := 1 ;
10124: LD_ADDR_EXP 56
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10132: LD_ADDR_VAR 0 2
10136: PUSH
10137: LD_INT 23
10139: PUSH
10140: EMPTY
10141: LIST
10142: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
10143: LD_ADDR_VAR 0 3
10147: PUSH
10148: LD_INT 2
10150: PUSH
10151: LD_INT 37
10153: PUSH
10154: LD_INT 32
10156: PUSH
10157: LD_INT 33
10159: PUSH
10160: LD_INT 36
10162: PUSH
10163: LD_INT 16
10165: PUSH
10166: LD_INT 23
10168: PUSH
10169: LD_INT 21
10171: PUSH
10172: LD_INT 18
10174: PUSH
10175: LD_INT 22
10177: PUSH
10178: LD_INT 20
10180: PUSH
10181: LD_INT 19
10183: PUSH
10184: LD_INT 25
10186: PUSH
10187: LD_INT 17
10189: PUSH
10190: LD_INT 24
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10210: LD_ADDR_LOC 18
10214: PUSH
10215: EMPTY
10216: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10217: LD_ADDR_LOC 19
10221: PUSH
10222: EMPTY
10223: ST_TO_ADDR
// Banned_Controls := [ ] ;
10224: LD_ADDR_LOC 20
10228: PUSH
10229: EMPTY
10230: ST_TO_ADDR
// Banned_Engines := [ ] ;
10231: LD_ADDR_LOC 21
10235: PUSH
10236: EMPTY
10237: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10238: LD_ADDR_LOC 16
10242: PUSH
10243: EMPTY
10244: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10245: LD_ADDR_LOC 17
10249: PUSH
10250: EMPTY
10251: ST_TO_ADDR
// No_Mechs := true ;
10252: LD_ADDR_EXP 57
10256: PUSH
10257: LD_INT 1
10259: ST_TO_ADDR
// end ; 4 :
10260: GO 11528
10262: LD_INT 4
10264: DOUBLE
10265: EQUAL
10266: IFTRUE 10270
10268: GO 10445
10270: POP
// begin def_base_level := 1 ;
10271: LD_ADDR_EXP 43
10275: PUSH
10276: LD_INT 1
10278: ST_TO_ADDR
// def_amount_of_people := 2 ;
10279: LD_ADDR_EXP 44
10283: PUSH
10284: LD_INT 2
10286: ST_TO_ADDR
// def_skill_level := 3 ;
10287: LD_ADDR_EXP 45
10291: PUSH
10292: LD_INT 3
10294: ST_TO_ADDR
// def_starting_resources := 3 ;
10295: LD_ADDR_EXP 46
10299: PUSH
10300: LD_INT 3
10302: ST_TO_ADDR
// def_shipments_density := 2 ;
10303: LD_ADDR_EXP 47
10307: PUSH
10308: LD_INT 2
10310: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10311: LD_ADDR_EXP 48
10315: PUSH
10316: LD_INT 1
10318: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10319: LD_ADDR_EXP 49
10323: PUSH
10324: LD_INT 2
10326: ST_TO_ADDR
// def_shared_vision := 1 ;
10327: LD_ADDR_EXP 50
10331: PUSH
10332: LD_INT 1
10334: ST_TO_ADDR
// def_morale_flags := 0 ;
10335: LD_ADDR_EXP 51
10339: PUSH
10340: LD_INT 0
10342: ST_TO_ADDR
// def_siberite_detection := 1 ;
10343: LD_ADDR_EXP 52
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// def_people_respawning := 0 ;
10351: LD_ADDR_EXP 53
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10359: LD_ADDR_EXP 54
10363: PUSH
10364: LD_INT 0
10366: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10367: LD_ADDR_EXP 55
10371: PUSH
10372: LD_INT 1
10374: ST_TO_ADDR
// def_builduptime := 3 ;
10375: LD_ADDR_EXP 56
10379: PUSH
10380: LD_INT 3
10382: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10383: LD_ADDR_VAR 0 2
10387: PUSH
10388: LD_INT 1
10390: PUSH
10391: EMPTY
10392: LIST
10393: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10394: LD_ADDR_VAR 0 3
10398: PUSH
10399: EMPTY
10400: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10401: LD_ADDR_LOC 18
10405: PUSH
10406: EMPTY
10407: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10408: LD_ADDR_LOC 19
10412: PUSH
10413: EMPTY
10414: ST_TO_ADDR
// Banned_Controls := [ ] ;
10415: LD_ADDR_LOC 20
10419: PUSH
10420: EMPTY
10421: ST_TO_ADDR
// Banned_Engines := [ ] ;
10422: LD_ADDR_LOC 21
10426: PUSH
10427: EMPTY
10428: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10429: LD_ADDR_LOC 16
10433: PUSH
10434: EMPTY
10435: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10436: LD_ADDR_LOC 17
10440: PUSH
10441: EMPTY
10442: ST_TO_ADDR
// end ; 5 :
10443: GO 11528
10445: LD_INT 5
10447: DOUBLE
10448: EQUAL
10449: IFTRUE 10453
10451: GO 10702
10453: POP
// begin def_base_level := 0 ;
10454: LD_ADDR_EXP 43
10458: PUSH
10459: LD_INT 0
10461: ST_TO_ADDR
// def_amount_of_people := 0 ;
10462: LD_ADDR_EXP 44
10466: PUSH
10467: LD_INT 0
10469: ST_TO_ADDR
// def_skill_level := 0 ;
10470: LD_ADDR_EXP 45
10474: PUSH
10475: LD_INT 0
10477: ST_TO_ADDR
// def_starting_resources := 0 ;
10478: LD_ADDR_EXP 46
10482: PUSH
10483: LD_INT 0
10485: ST_TO_ADDR
// def_shipments_density := 0 ;
10486: LD_ADDR_EXP 47
10490: PUSH
10491: LD_INT 0
10493: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10494: LD_ADDR_EXP 48
10498: PUSH
10499: LD_INT 0
10501: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10502: LD_ADDR_EXP 49
10506: PUSH
10507: LD_INT 0
10509: ST_TO_ADDR
// def_shared_vision := 1 ;
10510: LD_ADDR_EXP 50
10514: PUSH
10515: LD_INT 1
10517: ST_TO_ADDR
// def_morale_flags := 0 ;
10518: LD_ADDR_EXP 51
10522: PUSH
10523: LD_INT 0
10525: ST_TO_ADDR
// def_siberite_detection := 0 ;
10526: LD_ADDR_EXP 52
10530: PUSH
10531: LD_INT 0
10533: ST_TO_ADDR
// def_people_respawning := 1 ;
10534: LD_ADDR_EXP 53
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10542: LD_ADDR_EXP 54
10546: PUSH
10547: LD_INT 1
10549: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10550: LD_ADDR_EXP 55
10554: PUSH
10555: LD_INT 0
10557: ST_TO_ADDR
// def_builduptime := 0 ;
10558: LD_ADDR_EXP 56
10562: PUSH
10563: LD_INT 0
10565: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10566: LD_ADDR_VAR 0 2
10570: PUSH
10571: LD_INT 10
10573: PUSH
10574: LD_INT 3
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10581: LD_ADDR_VAR 0 3
10585: PUSH
10586: LD_INT 12
10588: PUSH
10589: LD_INT 11
10591: PUSH
10592: LD_INT 14
10594: PUSH
10595: LD_INT 13
10597: PUSH
10598: LD_INT 5
10600: PUSH
10601: LD_INT 24
10603: PUSH
10604: LD_INT 21
10606: PUSH
10607: LD_INT 33
10609: PUSH
10610: LD_INT 36
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10624: LD_ADDR_LOC 18
10628: PUSH
10629: LD_INT 31
10631: PUSH
10632: EMPTY
10633: LIST
10634: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10635: LD_ADDR_LOC 19
10639: PUSH
10640: EMPTY
10641: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10642: LD_ADDR_LOC 20
10646: PUSH
10647: LD_INT 2
10649: PUSH
10650: EMPTY
10651: LIST
10652: ST_TO_ADDR
// Banned_Engines := [ ] ;
10653: LD_ADDR_LOC 21
10657: PUSH
10658: EMPTY
10659: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10660: LD_ADDR_LOC 16
10664: PUSH
10665: LD_INT 4
10667: PUSH
10668: EMPTY
10669: LIST
10670: PUSH
10671: LD_INT 31
10673: PUSH
10674: LD_INT 32
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10685: LD_ADDR_LOC 17
10689: PUSH
10690: LD_INT 1
10692: PUSH
10693: LD_INT 1
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: ST_TO_ADDR
// end ; 6 :
10700: GO 11528
10702: LD_INT 6
10704: DOUBLE
10705: EQUAL
10706: IFTRUE 10710
10708: GO 10913
10710: POP
// begin def_base_level := 1 ;
10711: LD_ADDR_EXP 43
10715: PUSH
10716: LD_INT 1
10718: ST_TO_ADDR
// def_amount_of_people := 2 ;
10719: LD_ADDR_EXP 44
10723: PUSH
10724: LD_INT 2
10726: ST_TO_ADDR
// def_skill_level := 3 ;
10727: LD_ADDR_EXP 45
10731: PUSH
10732: LD_INT 3
10734: ST_TO_ADDR
// def_starting_resources := 3 ;
10735: LD_ADDR_EXP 46
10739: PUSH
10740: LD_INT 3
10742: ST_TO_ADDR
// def_shipments_density := 1 ;
10743: LD_ADDR_EXP 47
10747: PUSH
10748: LD_INT 1
10750: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10751: LD_ADDR_EXP 48
10755: PUSH
10756: LD_INT 0
10758: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10759: LD_ADDR_EXP 49
10763: PUSH
10764: LD_INT 1
10766: ST_TO_ADDR
// def_shared_vision := 1 ;
10767: LD_ADDR_EXP 50
10771: PUSH
10772: LD_INT 1
10774: ST_TO_ADDR
// def_morale_flags := 0 ;
10775: LD_ADDR_EXP 51
10779: PUSH
10780: LD_INT 0
10782: ST_TO_ADDR
// def_siberite_detection := 1 ;
10783: LD_ADDR_EXP 52
10787: PUSH
10788: LD_INT 1
10790: ST_TO_ADDR
// def_people_respawning := 2 ;
10791: LD_ADDR_EXP 53
10795: PUSH
10796: LD_INT 2
10798: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10799: LD_ADDR_EXP 54
10803: PUSH
10804: LD_INT 1
10806: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10807: LD_ADDR_EXP 55
10811: PUSH
10812: LD_INT 0
10814: ST_TO_ADDR
// def_builduptime := 1 ;
10815: LD_ADDR_EXP 56
10819: PUSH
10820: LD_INT 1
10822: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10823: LD_ADDR_VAR 0 2
10827: PUSH
10828: LD_INT 23
10830: PUSH
10831: EMPTY
10832: LIST
10833: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10834: LD_ADDR_VAR 0 3
10838: PUSH
10839: LD_INT 2
10841: PUSH
10842: LD_INT 37
10844: PUSH
10845: LD_INT 31
10847: PUSH
10848: LD_INT 32
10850: PUSH
10851: LD_INT 33
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10861: LD_ADDR_LOC 18
10865: PUSH
10866: EMPTY
10867: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10868: LD_ADDR_LOC 19
10872: PUSH
10873: EMPTY
10874: ST_TO_ADDR
// Banned_Controls := [ ] ;
10875: LD_ADDR_LOC 20
10879: PUSH
10880: EMPTY
10881: ST_TO_ADDR
// Banned_Engines := [ ] ;
10882: LD_ADDR_LOC 21
10886: PUSH
10887: EMPTY
10888: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10889: LD_ADDR_LOC 16
10893: PUSH
10894: EMPTY
10895: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10896: LD_ADDR_LOC 17
10900: PUSH
10901: EMPTY
10902: ST_TO_ADDR
// No_Mechs := true ;
10903: LD_ADDR_EXP 57
10907: PUSH
10908: LD_INT 1
10910: ST_TO_ADDR
// end ; 7 :
10911: GO 11528
10913: LD_INT 7
10915: DOUBLE
10916: EQUAL
10917: IFTRUE 10921
10919: GO 11119
10921: POP
// begin def_base_level := 1 ;
10922: LD_ADDR_EXP 43
10926: PUSH
10927: LD_INT 1
10929: ST_TO_ADDR
// def_amount_of_people := 2 ;
10930: LD_ADDR_EXP 44
10934: PUSH
10935: LD_INT 2
10937: ST_TO_ADDR
// def_skill_level := 3 ;
10938: LD_ADDR_EXP 45
10942: PUSH
10943: LD_INT 3
10945: ST_TO_ADDR
// def_starting_resources := 3 ;
10946: LD_ADDR_EXP 46
10950: PUSH
10951: LD_INT 3
10953: ST_TO_ADDR
// def_shipments_density := 1 ;
10954: LD_ADDR_EXP 47
10958: PUSH
10959: LD_INT 1
10961: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10962: LD_ADDR_EXP 48
10966: PUSH
10967: LD_INT 1
10969: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10970: LD_ADDR_EXP 49
10974: PUSH
10975: LD_INT 2
10977: ST_TO_ADDR
// def_shared_vision := 1 ;
10978: LD_ADDR_EXP 50
10982: PUSH
10983: LD_INT 1
10985: ST_TO_ADDR
// def_morale_flags := 0 ;
10986: LD_ADDR_EXP 51
10990: PUSH
10991: LD_INT 0
10993: ST_TO_ADDR
// def_siberite_detection := 1 ;
10994: LD_ADDR_EXP 52
10998: PUSH
10999: LD_INT 1
11001: ST_TO_ADDR
// def_people_respawning := 0 ;
11002: LD_ADDR_EXP 53
11006: PUSH
11007: LD_INT 0
11009: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11010: LD_ADDR_EXP 54
11014: PUSH
11015: LD_INT 1
11017: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11018: LD_ADDR_EXP 55
11022: PUSH
11023: LD_INT 0
11025: ST_TO_ADDR
// def_builduptime := 3 ;
11026: LD_ADDR_EXP 56
11030: PUSH
11031: LD_INT 3
11033: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11034: LD_ADDR_VAR 0 2
11038: PUSH
11039: LD_INT 23
11041: PUSH
11042: EMPTY
11043: LIST
11044: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
11045: LD_ADDR_VAR 0 3
11049: PUSH
11050: LD_INT 37
11052: PUSH
11053: EMPTY
11054: LIST
11055: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11056: LD_ADDR_LOC 18
11060: PUSH
11061: EMPTY
11062: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11063: LD_ADDR_LOC 19
11067: PUSH
11068: EMPTY
11069: ST_TO_ADDR
// Banned_Controls := [ ] ;
11070: LD_ADDR_LOC 20
11074: PUSH
11075: EMPTY
11076: ST_TO_ADDR
// Banned_Engines := [ ] ;
11077: LD_ADDR_LOC 21
11081: PUSH
11082: EMPTY
11083: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11084: LD_ADDR_LOC 16
11088: PUSH
11089: LD_INT 31
11091: PUSH
11092: LD_INT 32
11094: PUSH
11095: LD_INT 33
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: PUSH
11103: EMPTY
11104: LIST
11105: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
11106: LD_ADDR_LOC 17
11110: PUSH
11111: LD_INT 10
11113: PUSH
11114: EMPTY
11115: LIST
11116: ST_TO_ADDR
// end ; 8 :
11117: GO 11528
11119: LD_INT 8
11121: DOUBLE
11122: EQUAL
11123: IFTRUE 11127
11125: GO 11527
11127: POP
// begin def_base_level := 0 ;
11128: LD_ADDR_EXP 43
11132: PUSH
11133: LD_INT 0
11135: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
11136: LD_ADDR_EXP 44
11140: PUSH
11141: LD_INT 0
11143: PPUSH
11144: LD_INT 1
11146: PPUSH
11147: CALL_OW 12
11151: ST_TO_ADDR
// def_skill_level := 0 ;
11152: LD_ADDR_EXP 45
11156: PUSH
11157: LD_INT 0
11159: ST_TO_ADDR
// def_starting_resources := 2 ;
11160: LD_ADDR_EXP 46
11164: PUSH
11165: LD_INT 2
11167: ST_TO_ADDR
// def_shipments_density := 1 ;
11168: LD_ADDR_EXP 47
11172: PUSH
11173: LD_INT 1
11175: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11176: LD_ADDR_EXP 48
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11184: LD_ADDR_EXP 49
11188: PUSH
11189: LD_INT 0
11191: ST_TO_ADDR
// def_shared_vision := 1 ;
11192: LD_ADDR_EXP 50
11196: PUSH
11197: LD_INT 1
11199: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11200: LD_ADDR_EXP 51
11204: PUSH
11205: LD_INT 0
11207: PPUSH
11208: LD_INT 2
11210: PPUSH
11211: CALL_OW 12
11215: ST_TO_ADDR
// def_siberite_detection := 0 ;
11216: LD_ADDR_EXP 52
11220: PUSH
11221: LD_INT 0
11223: ST_TO_ADDR
// def_people_respawning := 0 ;
11224: LD_ADDR_EXP 53
11228: PUSH
11229: LD_INT 0
11231: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11232: LD_ADDR_EXP 54
11236: PUSH
11237: LD_INT 2
11239: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11240: LD_ADDR_EXP 55
11244: PUSH
11245: LD_INT 0
11247: ST_TO_ADDR
// def_builduptime := 0 ;
11248: LD_ADDR_EXP 56
11252: PUSH
11253: LD_INT 0
11255: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11256: LD_ADDR_VAR 0 2
11260: PUSH
11261: LD_INT 23
11263: PUSH
11264: LD_INT 20
11266: PUSH
11267: LD_INT 40
11269: PUSH
11270: LD_INT 47
11272: PUSH
11273: LD_INT 46
11275: PUSH
11276: LD_INT 39
11278: PUSH
11279: LD_INT 71
11281: PUSH
11282: LD_INT 34
11284: PUSH
11285: LD_INT 41
11287: PUSH
11288: LD_INT 44
11290: PUSH
11291: LD_INT 17
11293: PUSH
11294: LD_INT 16
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11311: LD_ADDR_VAR 0 3
11315: PUSH
11316: LD_INT 37
11318: PUSH
11319: LD_INT 5
11321: PUSH
11322: LD_INT 13
11324: PUSH
11325: LD_INT 34
11327: PUSH
11328: LD_INT 12
11330: PUSH
11331: LD_INT 15
11333: PUSH
11334: LD_INT 11
11336: PUSH
11337: LD_INT 14
11339: PUSH
11340: LD_INT 29
11342: PUSH
11343: LD_INT 30
11345: PUSH
11346: LD_INT 28
11348: PUSH
11349: LD_INT 24
11351: PUSH
11352: LD_INT 25
11354: PUSH
11355: LD_INT 20
11357: PUSH
11358: LD_INT 21
11360: PUSH
11361: LD_INT 22
11363: PUSH
11364: LD_INT 36
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11386: LD_ADDR_LOC 18
11390: PUSH
11391: EMPTY
11392: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11393: LD_ADDR_LOC 19
11397: PUSH
11398: LD_INT 14
11400: PUSH
11401: EMPTY
11402: LIST
11403: ST_TO_ADDR
// Banned_Controls := [ ] ;
11404: LD_ADDR_LOC 20
11408: PUSH
11409: EMPTY
11410: ST_TO_ADDR
// Banned_Engines := [ ] ;
11411: LD_ADDR_LOC 21
11415: PUSH
11416: EMPTY
11417: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11418: LD_ADDR_LOC 16
11422: PUSH
11423: LD_INT 31
11425: PUSH
11426: LD_INT 32
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 4
11435: PUSH
11436: EMPTY
11437: LIST
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11443: LD_ADDR_LOC 17
11447: PUSH
11448: LD_INT 2
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: ST_TO_ADDR
// for i := 1 to 8 do
11458: LD_ADDR_VAR 0 4
11462: PUSH
11463: DOUBLE
11464: LD_INT 1
11466: DEC
11467: ST_TO_ADDR
11468: LD_INT 8
11470: PUSH
11471: FOR_TO
11472: IFFALSE 11523
// if ( Side_Nations [ i ] = 3 ) then
11474: LD_EXP 22
11478: PUSH
11479: LD_VAR 0 4
11483: ARRAY
11484: PUSH
11485: LD_INT 3
11487: EQUAL
11488: IFFALSE 11521
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11490: LD_ADDR_EXP 22
11494: PUSH
11495: LD_EXP 22
11499: PPUSH
11500: LD_VAR 0 4
11504: PPUSH
11505: LD_INT 1
11507: PPUSH
11508: LD_INT 2
11510: PPUSH
11511: CALL_OW 12
11515: PPUSH
11516: CALL_OW 1
11520: ST_TO_ADDR
11521: GO 11471
11523: POP
11524: POP
// end ; end ;
11525: GO 11528
11527: POP
// for i := 1 to 8 do
11528: LD_ADDR_VAR 0 4
11532: PUSH
11533: DOUBLE
11534: LD_INT 1
11536: DEC
11537: ST_TO_ADDR
11538: LD_INT 8
11540: PUSH
11541: FOR_TO
11542: IFFALSE 11626
// if Side_Positions [ i ] then
11544: LD_EXP 21
11548: PUSH
11549: LD_VAR 0 4
11553: ARRAY
11554: IFFALSE 11624
// begin for j in Unavailable_Techs do
11556: LD_ADDR_VAR 0 5
11560: PUSH
11561: LD_VAR 0 2
11565: PUSH
11566: FOR_IN
11567: IFFALSE 11588
// SetTech ( j , i , 0 ) ;
11569: LD_VAR 0 5
11573: PPUSH
11574: LD_VAR 0 4
11578: PPUSH
11579: LD_INT 0
11581: PPUSH
11582: CALL_OW 322
11586: GO 11566
11588: POP
11589: POP
// for j in Unavailable_Builds do
11590: LD_ADDR_VAR 0 5
11594: PUSH
11595: LD_VAR 0 3
11599: PUSH
11600: FOR_IN
11601: IFFALSE 11622
// SetRestrict ( j , i , 0 ) ;
11603: LD_VAR 0 5
11607: PPUSH
11608: LD_VAR 0 4
11612: PPUSH
11613: LD_INT 0
11615: PPUSH
11616: CALL_OW 324
11620: GO 11600
11622: POP
11623: POP
// end ;
11624: GO 11541
11626: POP
11627: POP
// end ;
11628: LD_VAR 0 1
11632: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11633: LD_INT 0
11635: PPUSH
11636: PPUSH
11637: PPUSH
11638: PPUSH
11639: PPUSH
11640: PPUSH
11641: PPUSH
// for i := 1 to Restricted_Builds do
11642: LD_ADDR_VAR 0 2
11646: PUSH
11647: DOUBLE
11648: LD_INT 1
11650: DEC
11651: ST_TO_ADDR
11652: LD_LOC 16
11656: PUSH
11657: FOR_TO
11658: IFFALSE 11968
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11660: LD_LOC 16
11664: PUSH
11665: LD_VAR 0 2
11669: ARRAY
11670: PUSH
11671: LD_INT 1
11673: ARRAY
11674: PUSH
11675: LD_INT 31
11677: DOUBLE
11678: EQUAL
11679: IFTRUE 11695
11681: LD_INT 32
11683: DOUBLE
11684: EQUAL
11685: IFTRUE 11695
11687: LD_INT 33
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11706
11695: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11696: LD_ADDR_VAR 0 6
11700: PUSH
11701: LD_STRING #Turrets
11703: ST_TO_ADDR
11704: GO 11751
11706: LD_INT 4
11708: DOUBLE
11709: EQUAL
11710: IFTRUE 11720
11712: LD_INT 5
11714: DOUBLE
11715: EQUAL
11716: IFTRUE 11720
11718: GO 11731
11720: POP
// btype := #Armouries ; b_Behemoth :
11721: LD_ADDR_VAR 0 6
11725: PUSH
11726: LD_STRING #Armouries
11728: ST_TO_ADDR
11729: GO 11751
11731: LD_INT 37
11733: DOUBLE
11734: EQUAL
11735: IFTRUE 11739
11737: GO 11750
11739: POP
// btype := #Behemoths ; end ;
11740: LD_ADDR_VAR 0 6
11744: PUSH
11745: LD_STRING #Behemoths
11747: ST_TO_ADDR
11748: GO 11751
11750: POP
// list := [ ] ;
11751: LD_ADDR_VAR 0 7
11755: PUSH
11756: EMPTY
11757: ST_TO_ADDR
// for j := 1 to 8 do
11758: LD_ADDR_VAR 0 3
11762: PUSH
11763: DOUBLE
11764: LD_INT 1
11766: DEC
11767: ST_TO_ADDR
11768: LD_INT 8
11770: PUSH
11771: FOR_TO
11772: IFFALSE 11865
// if Side_Positions [ j ] then
11774: LD_EXP 21
11778: PUSH
11779: LD_VAR 0 3
11783: ARRAY
11784: IFFALSE 11863
// begin amount := 0 ;
11786: LD_ADDR_VAR 0 5
11790: PUSH
11791: LD_INT 0
11793: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11794: LD_ADDR_VAR 0 4
11798: PUSH
11799: LD_LOC 16
11803: PUSH
11804: LD_VAR 0 2
11808: ARRAY
11809: PUSH
11810: FOR_IN
11811: IFFALSE 11859
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11813: LD_ADDR_VAR 0 5
11817: PUSH
11818: LD_VAR 0 5
11822: PUSH
11823: LD_INT 22
11825: PUSH
11826: LD_VAR 0 3
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: LD_INT 30
11837: PUSH
11838: LD_VAR 0 4
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 69
11855: PLUS
11856: ST_TO_ADDR
11857: GO 11810
11859: POP
11860: POP
// break ;
11861: GO 11865
// end ;
11863: GO 11771
11865: POP
11866: POP
// list := [ ] ;
11867: LD_ADDR_VAR 0 7
11871: PUSH
11872: EMPTY
11873: ST_TO_ADDR
// for j := 1 to 8 do
11874: LD_ADDR_VAR 0 3
11878: PUSH
11879: DOUBLE
11880: LD_INT 1
11882: DEC
11883: ST_TO_ADDR
11884: LD_INT 8
11886: PUSH
11887: FOR_TO
11888: IFFALSE 11908
// list := list ^ amount ;
11890: LD_ADDR_VAR 0 7
11894: PUSH
11895: LD_VAR 0 7
11899: PUSH
11900: LD_VAR 0 5
11904: ADD
11905: ST_TO_ADDR
11906: GO 11887
11908: POP
11909: POP
// Already_Built := Already_Built ^ [ list ] ;
11910: LD_ADDR_LOC 22
11914: PUSH
11915: LD_LOC 22
11919: PUSH
11920: LD_VAR 0 7
11924: PUSH
11925: EMPTY
11926: LIST
11927: ADD
11928: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11929: LD_ADDR_LOC 23
11933: PUSH
11934: LD_LOC 23
11938: PUSH
11939: LD_VAR 0 6
11943: PUSH
11944: LD_VAR 0 5
11948: PUSH
11949: LD_LOC 17
11953: PUSH
11954: LD_VAR 0 2
11958: ARRAY
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: LIST
11964: ADD
11965: ST_TO_ADDR
// end ;
11966: GO 11657
11968: POP
11969: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11970: LD_ADDR_LOC 24
11974: PUSH
11975: LD_INT 0
11977: PUSH
11978: LD_INT 0
11980: PUSH
11981: LD_INT 0
11983: PUSH
11984: LD_INT 0
11986: PUSH
11987: LD_INT 0
11989: PUSH
11990: LD_INT 0
11992: PUSH
11993: LD_INT 0
11995: PUSH
11996: LD_INT 0
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: ST_TO_ADDR
// if Limits_Info then
12009: LD_LOC 23
12013: IFFALSE 12029
// Limits_Info := #Limits ^ Limits_Info ;
12015: LD_ADDR_LOC 23
12019: PUSH
12020: LD_STRING #Limits
12022: PUSH
12023: LD_LOC 23
12027: ADD
12028: ST_TO_ADDR
// end ;
12029: LD_VAR 0 1
12033: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
12034: LD_INT 0
12036: PPUSH
12037: PPUSH
12038: PPUSH
12039: PPUSH
// for i := 1 to Restricted_Builds do
12040: LD_ADDR_VAR 0 7
12044: PUSH
12045: DOUBLE
12046: LD_INT 1
12048: DEC
12049: ST_TO_ADDR
12050: LD_LOC 16
12054: PUSH
12055: FOR_TO
12056: IFFALSE 12479
// if BType in Restricted_Builds [ i ] then
12058: LD_VAR 0 2
12062: PUSH
12063: LD_LOC 16
12067: PUSH
12068: LD_VAR 0 7
12072: ARRAY
12073: IN
12074: IFFALSE 12477
// begin if old_side then
12076: LD_VAR 0 4
12080: IFFALSE 12206
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
12082: LD_LOC 22
12086: PUSH
12087: LD_VAR 0 7
12091: ARRAY
12092: PUSH
12093: LD_VAR 0 3
12097: ARRAY
12098: PUSH
12099: LD_VAR 0 5
12103: PLUS
12104: PUSH
12105: LD_LOC 17
12109: PUSH
12110: LD_VAR 0 7
12114: ARRAY
12115: GREATER
12116: IFFALSE 12142
// begin SetSide ( un , old_side ) ;
12118: LD_VAR 0 1
12122: PPUSH
12123: LD_VAR 0 4
12127: PPUSH
12128: CALL_OW 235
// count := 0 ;
12132: LD_ADDR_VAR 0 5
12136: PUSH
12137: LD_INT 0
12139: ST_TO_ADDR
// end else
12140: GO 12206
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
12142: LD_ADDR_LOC 22
12146: PUSH
12147: LD_LOC 22
12151: PPUSH
12152: LD_VAR 0 7
12156: PPUSH
12157: LD_LOC 22
12161: PUSH
12162: LD_VAR 0 7
12166: ARRAY
12167: PPUSH
12168: LD_VAR 0 4
12172: PPUSH
12173: LD_LOC 22
12177: PUSH
12178: LD_VAR 0 7
12182: ARRAY
12183: PUSH
12184: LD_VAR 0 4
12188: ARRAY
12189: PUSH
12190: LD_VAR 0 5
12194: MINUS
12195: PPUSH
12196: CALL_OW 1
12200: PPUSH
12201: CALL_OW 1
12205: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12206: LD_ADDR_LOC 22
12210: PUSH
12211: LD_LOC 22
12215: PPUSH
12216: LD_VAR 0 7
12220: PPUSH
12221: LD_LOC 22
12225: PUSH
12226: LD_VAR 0 7
12230: ARRAY
12231: PPUSH
12232: LD_VAR 0 3
12236: PPUSH
12237: LD_LOC 22
12241: PUSH
12242: LD_VAR 0 7
12246: ARRAY
12247: PUSH
12248: LD_VAR 0 3
12252: ARRAY
12253: PUSH
12254: LD_VAR 0 5
12258: PLUS
12259: PPUSH
12260: CALL_OW 1
12264: PPUSH
12265: CALL_OW 1
12269: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12270: LD_VAR 0 5
12274: PUSH
12275: LD_INT 0
12277: NONEQUAL
12278: PUSH
12279: LD_VAR 0 3
12283: PUSH
12284: LD_OWVAR 2
12288: EQUAL
12289: AND
12290: IFFALSE 12333
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12292: LD_ADDR_LOC 23
12296: PUSH
12297: LD_LOC 23
12301: PPUSH
12302: LD_INT 3
12304: PUSH
12305: LD_VAR 0 7
12309: MUL
12310: PPUSH
12311: LD_LOC 22
12315: PUSH
12316: LD_VAR 0 7
12320: ARRAY
12321: PUSH
12322: LD_VAR 0 3
12326: ARRAY
12327: PPUSH
12328: CALL_OW 1
12332: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12333: LD_LOC 22
12337: PUSH
12338: LD_VAR 0 7
12342: ARRAY
12343: PUSH
12344: LD_VAR 0 3
12348: ARRAY
12349: PUSH
12350: LD_LOC 17
12354: PUSH
12355: LD_VAR 0 7
12359: ARRAY
12360: GREATER
12361: IFFALSE 12388
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12363: LD_ADDR_LOC 24
12367: PUSH
12368: LD_LOC 24
12372: PPUSH
12373: LD_VAR 0 3
12377: PPUSH
12378: LD_INT 1
12380: PPUSH
12381: CALL_OW 1
12385: ST_TO_ADDR
// end else
12386: GO 12475
// begin for j := 1 to Restricted_Builds do
12388: LD_ADDR_VAR 0 8
12392: PUSH
12393: DOUBLE
12394: LD_INT 1
12396: DEC
12397: ST_TO_ADDR
12398: LD_LOC 16
12402: PUSH
12403: FOR_TO
12404: IFFALSE 12448
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12406: LD_LOC 22
12410: PUSH
12411: LD_VAR 0 8
12415: ARRAY
12416: PUSH
12417: LD_VAR 0 3
12421: ARRAY
12422: PUSH
12423: LD_LOC 17
12427: PUSH
12428: LD_VAR 0 8
12432: ARRAY
12433: GREATER
12434: IFFALSE 12446
// begin Is_Cheater := true ;
12436: LD_ADDR_VAR 0 9
12440: PUSH
12441: LD_INT 1
12443: ST_TO_ADDR
// break ;
12444: GO 12448
// end ;
12446: GO 12403
12448: POP
12449: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12450: LD_ADDR_LOC 24
12454: PUSH
12455: LD_LOC 24
12459: PPUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_VAR 0 9
12469: PPUSH
12470: CALL_OW 1
12474: ST_TO_ADDR
// end ; break ;
12475: GO 12479
// end ;
12477: GO 12055
12479: POP
12480: POP
// end ;
12481: LD_VAR 0 6
12485: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12486: LD_VAR 0 5
12490: PUSH
12491: LD_LOC 18
12495: IN
12496: PUSH
12497: LD_VAR 0 2
12501: PUSH
12502: LD_LOC 19
12506: IN
12507: OR
12508: PUSH
12509: LD_VAR 0 4
12513: PUSH
12514: LD_LOC 20
12518: IN
12519: OR
12520: PUSH
12521: LD_VAR 0 3
12525: PUSH
12526: LD_LOC 21
12530: IN
12531: OR
12532: IFFALSE 12543
// ComCancel ( factory ) ;
12534: LD_VAR 0 1
12538: PPUSH
12539: CALL_OW 127
// end ;
12543: PPOPN 5
12545: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12546: LD_VAR 0 2
12550: PUSH
12551: LD_LOC 18
12555: IN
12556: IFFALSE 12567
// ComCancel ( building ) ;
12558: LD_VAR 0 1
12562: PPUSH
12563: CALL_OW 127
// end ; end_of_file
12567: PPOPN 2
12569: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
12570: LD_INT 0
12572: PPUSH
12573: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12574: LD_ADDR_VAR 0 2
12578: PUSH
12579: LD_STRING #Multi1x1-Time
12581: PUSH
12582: LD_OWVAR 1
12586: PUSH
12587: EMPTY
12588: LIST
12589: LIST
12590: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12591: LD_INT 0
12593: PUSH
12594: LD_EXP 17
12598: PUSH
12599: LD_OWVAR 1
12603: MINUS
12604: LESSEQUAL
12605: IFFALSE 12636
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12607: LD_ADDR_VAR 0 2
12611: PUSH
12612: LD_VAR 0 2
12616: PUSH
12617: LD_STRING #allowedsibbomb
12619: PUSH
12620: LD_EXP 17
12624: PUSH
12625: LD_OWVAR 1
12629: MINUS
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: ADD
12635: ST_TO_ADDR
// if ( ExtraStrings ) then
12636: LD_EXP 58
12640: IFFALSE 12662
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12642: LD_ADDR_VAR 0 2
12646: PUSH
12647: LD_VAR 0 2
12651: PUSH
12652: LD_STRING 
12654: ADD
12655: PUSH
12656: LD_EXP 58
12660: ADD
12661: ST_TO_ADDR
// if ( LimitsStrings ) then
12662: CALL 9410 0 0
12666: IFFALSE 12688
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12668: LD_ADDR_VAR 0 2
12672: PUSH
12673: LD_VAR 0 2
12677: PUSH
12678: LD_STRING 
12680: ADD
12681: PUSH
12682: CALL 9410 0 0
12686: ADD
12687: ST_TO_ADDR
// Display_Strings := AllStrings ;
12688: LD_ADDR_OWVAR 47
12692: PUSH
12693: LD_VAR 0 2
12697: ST_TO_ADDR
// end ;
12698: LD_VAR 0 1
12702: RET
// every 0 0$1 do
12703: GO 12705
12705: DISABLE
// begin ShowTimer ;
12706: CALL 12570 0 0
// enable ;
12710: ENABLE
// end ; end_of_file
12711: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12712: LD_INT 0
12714: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12715: LD_VAR 0 1
12719: PPUSH
12720: CALL_OW 255
12724: PUSH
12725: LD_VAR 0 4
12729: EQUAL
12730: IFFALSE 12749
// begin SetAchievement ( ACH_RAD ) ;
12732: LD_STRING ACH_RAD
12734: PPUSH
12735: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12739: LD_STRING ACH_NL
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 564
// end end ;
12749: LD_VAR 0 5
12753: RET
// export function SA_Win ( side ) ; begin
12754: LD_INT 0
12756: PPUSH
// case side of 1 :
12757: LD_VAR 0 1
12761: PUSH
12762: LD_INT 1
12764: DOUBLE
12765: EQUAL
12766: IFTRUE 12770
12768: GO 12783
12770: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12771: LD_STRING ACH_AH
12773: PPUSH
12774: LD_INT 1
12776: PPUSH
12777: CALL_OW 564
12781: GO 12946
12783: LD_INT 2
12785: DOUBLE
12786: EQUAL
12787: IFTRUE 12791
12789: GO 12804
12791: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12792: LD_STRING ACH_E
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 564
12802: GO 12946
12804: LD_INT 3
12806: DOUBLE
12807: EQUAL
12808: IFTRUE 12812
12810: GO 12825
12812: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12813: LD_STRING ACH_OOL
12815: PPUSH
12816: LD_INT 1
12818: PPUSH
12819: CALL_OW 564
12823: GO 12946
12825: LD_INT 1
12827: PUSH
12828: LD_INT 2
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: DOUBLE
12835: EQUAL
12836: IFTRUE 12840
12838: GO 12865
12840: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12841: LD_STRING ACH_AH
12843: PPUSH
12844: LD_REAL  5.00000000000000E-0001
12847: PPUSH
12848: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12852: LD_STRING ACH_E
12854: PPUSH
12855: LD_REAL  5.00000000000000E-0001
12858: PPUSH
12859: CALL_OW 564
// end ; [ 2 , 3 ] :
12863: GO 12946
12865: LD_INT 2
12867: PUSH
12868: LD_INT 3
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: DOUBLE
12875: EQUAL
12876: IFTRUE 12880
12878: GO 12905
12880: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12881: LD_STRING ACH_OOL
12883: PPUSH
12884: LD_REAL  5.00000000000000E-0001
12887: PPUSH
12888: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12892: LD_STRING ACH_E
12894: PPUSH
12895: LD_REAL  5.00000000000000E-0001
12898: PPUSH
12899: CALL_OW 564
// end ; [ 3 , 1 ] :
12903: GO 12946
12905: LD_INT 3
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: DOUBLE
12915: EQUAL
12916: IFTRUE 12920
12918: GO 12945
12920: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12921: LD_STRING ACH_AH
12923: PPUSH
12924: LD_REAL  5.00000000000000E-0001
12927: PPUSH
12928: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12932: LD_STRING ACH_OOL
12934: PPUSH
12935: LD_REAL  5.00000000000000E-0001
12938: PPUSH
12939: CALL_OW 564
// end ; end ;
12943: GO 12946
12945: POP
// end ; end_of_file
12946: LD_VAR 0 2
12950: RET
// export function SetMpTechs ( ) ; var side , i ; begin
12951: LD_INT 0
12953: PPUSH
12954: PPUSH
12955: PPUSH
// for side = 1 to 8 do
12956: LD_ADDR_VAR 0 2
12960: PUSH
12961: DOUBLE
12962: LD_INT 1
12964: DEC
12965: ST_TO_ADDR
12966: LD_INT 8
12968: PUSH
12969: FOR_TO
12970: IFFALSE 13091
// begin for i = 1 to 72 do
12972: LD_ADDR_VAR 0 3
12976: PUSH
12977: DOUBLE
12978: LD_INT 1
12980: DEC
12981: ST_TO_ADDR
12982: LD_INT 72
12984: PUSH
12985: FOR_TO
12986: IFFALSE 13017
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12988: LD_VAR 0 3
12992: PPUSH
12993: LD_VAR 0 2
12997: PPUSH
12998: LD_INT 0
13000: PPUSH
13001: LD_VAR 0 3
13005: PPUSH
13006: CALL_OW 565
13010: PPUSH
13011: CALL_OW 322
13015: GO 12985
13017: POP
13018: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
13019: LD_INT 73
13021: PPUSH
13022: LD_VAR 0 2
13026: PPUSH
13027: LD_INT 0
13029: PPUSH
13030: LD_INT 25
13032: PPUSH
13033: CALL_OW 565
13037: PPUSH
13038: CALL_OW 322
// for i = 0 to 40 do
13042: LD_ADDR_VAR 0 3
13046: PUSH
13047: DOUBLE
13048: LD_INT 0
13050: DEC
13051: ST_TO_ADDR
13052: LD_INT 40
13054: PUSH
13055: FOR_TO
13056: IFFALSE 13087
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
13058: LD_VAR 0 3
13062: PPUSH
13063: LD_VAR 0 2
13067: PPUSH
13068: LD_INT 1
13070: PPUSH
13071: LD_VAR 0 3
13075: PPUSH
13076: CALL_OW 565
13080: PPUSH
13081: CALL_OW 324
13085: GO 13055
13087: POP
13088: POP
// end ;
13089: GO 12969
13091: POP
13092: POP
// end ;
13093: LD_VAR 0 1
13097: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
13098: LD_INT 0
13100: PPUSH
13101: PPUSH
13102: PPUSH
// for side = 1 to 8 do
13103: LD_ADDR_VAR 0 3
13107: PUSH
13108: DOUBLE
13109: LD_INT 1
13111: DEC
13112: ST_TO_ADDR
13113: LD_INT 8
13115: PUSH
13116: FOR_TO
13117: IFFALSE 17113
// begin for i = 1 to 73 do
13119: LD_ADDR_VAR 0 4
13123: PUSH
13124: DOUBLE
13125: LD_INT 1
13127: DEC
13128: ST_TO_ADDR
13129: LD_INT 73
13131: PUSH
13132: FOR_TO
13133: IFFALSE 13154
// SetTech ( i , side , state_disabled ) ;
13135: LD_VAR 0 4
13139: PPUSH
13140: LD_VAR 0 3
13144: PPUSH
13145: LD_INT 0
13147: PPUSH
13148: CALL_OW 322
13152: GO 13132
13154: POP
13155: POP
// for i = 0 to 40 do
13156: LD_ADDR_VAR 0 4
13160: PUSH
13161: DOUBLE
13162: LD_INT 0
13164: DEC
13165: ST_TO_ADDR
13166: LD_INT 40
13168: PUSH
13169: FOR_TO
13170: IFFALSE 13191
// SetRestrict ( i , side , false ) ;
13172: LD_VAR 0 4
13176: PPUSH
13177: LD_VAR 0 3
13181: PPUSH
13182: LD_INT 0
13184: PPUSH
13185: CALL_OW 324
13189: GO 13169
13191: POP
13192: POP
// case level of 1 :
13193: LD_VAR 0 1
13197: PUSH
13198: LD_INT 1
13200: DOUBLE
13201: EQUAL
13202: IFTRUE 13206
13204: GO 13359
13206: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13207: LD_INT 35
13209: PPUSH
13210: LD_VAR 0 3
13214: PPUSH
13215: LD_INT 1
13217: PPUSH
13218: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13222: LD_INT 45
13224: PPUSH
13225: LD_VAR 0 3
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13237: LD_INT 46
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13252: LD_INT 47
13254: PPUSH
13255: LD_VAR 0 3
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13267: LD_INT 0
13269: PPUSH
13270: LD_VAR 0 3
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13282: LD_INT 2
13284: PPUSH
13285: LD_VAR 0 3
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13297: LD_INT 4
13299: PPUSH
13300: LD_VAR 0 3
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13312: LD_INT 6
13314: PPUSH
13315: LD_VAR 0 3
13319: PPUSH
13320: LD_INT 1
13322: PPUSH
13323: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13327: LD_INT 29
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13342: LD_INT 31
13344: PPUSH
13345: LD_VAR 0 3
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 324
// end ; 2 :
13357: GO 17111
13359: LD_INT 2
13361: DOUBLE
13362: EQUAL
13363: IFTRUE 13367
13365: GO 13565
13367: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13368: LD_INT 35
13370: PPUSH
13371: LD_VAR 0 3
13375: PPUSH
13376: LD_INT 1
13378: PPUSH
13379: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13383: LD_INT 45
13385: PPUSH
13386: LD_VAR 0 3
13390: PPUSH
13391: LD_INT 1
13393: PPUSH
13394: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13398: LD_INT 46
13400: PPUSH
13401: LD_VAR 0 3
13405: PPUSH
13406: LD_INT 1
13408: PPUSH
13409: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13413: LD_INT 47
13415: PPUSH
13416: LD_VAR 0 3
13420: PPUSH
13421: LD_INT 1
13423: PPUSH
13424: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13428: LD_INT 1
13430: PPUSH
13431: LD_VAR 0 3
13435: PPUSH
13436: LD_INT 1
13438: PPUSH
13439: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13443: LD_INT 2
13445: PPUSH
13446: LD_VAR 0 3
13450: PPUSH
13451: LD_INT 1
13453: PPUSH
13454: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13458: LD_INT 11
13460: PPUSH
13461: LD_VAR 0 3
13465: PPUSH
13466: LD_INT 1
13468: PPUSH
13469: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13473: LD_INT 0
13475: PPUSH
13476: LD_VAR 0 3
13480: PPUSH
13481: LD_INT 1
13483: PPUSH
13484: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13488: LD_INT 2
13490: PPUSH
13491: LD_VAR 0 3
13495: PPUSH
13496: LD_INT 1
13498: PPUSH
13499: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13503: LD_INT 4
13505: PPUSH
13506: LD_VAR 0 3
13510: PPUSH
13511: LD_INT 1
13513: PPUSH
13514: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13518: LD_INT 6
13520: PPUSH
13521: LD_VAR 0 3
13525: PPUSH
13526: LD_INT 1
13528: PPUSH
13529: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13533: LD_INT 29
13535: PPUSH
13536: LD_VAR 0 3
13540: PPUSH
13541: LD_INT 1
13543: PPUSH
13544: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13548: LD_INT 31
13550: PPUSH
13551: LD_VAR 0 3
13555: PPUSH
13556: LD_INT 1
13558: PPUSH
13559: CALL_OW 324
// end ; 3 :
13563: GO 17111
13565: LD_INT 3
13567: DOUBLE
13568: EQUAL
13569: IFTRUE 13573
13571: GO 14026
13573: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13574: LD_INT 35
13576: PPUSH
13577: LD_VAR 0 3
13581: PPUSH
13582: LD_INT 1
13584: PPUSH
13585: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13589: LD_INT 45
13591: PPUSH
13592: LD_VAR 0 3
13596: PPUSH
13597: LD_INT 1
13599: PPUSH
13600: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13604: LD_INT 46
13606: PPUSH
13607: LD_VAR 0 3
13611: PPUSH
13612: LD_INT 1
13614: PPUSH
13615: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13619: LD_INT 47
13621: PPUSH
13622: LD_VAR 0 3
13626: PPUSH
13627: LD_INT 1
13629: PPUSH
13630: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13634: LD_INT 1
13636: PPUSH
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13649: LD_INT 2
13651: PPUSH
13652: LD_VAR 0 3
13656: PPUSH
13657: LD_INT 1
13659: PPUSH
13660: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13664: LD_INT 11
13666: PPUSH
13667: LD_VAR 0 3
13671: PPUSH
13672: LD_INT 1
13674: PPUSH
13675: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13679: LD_INT 48
13681: PPUSH
13682: LD_VAR 0 3
13686: PPUSH
13687: LD_INT 1
13689: PPUSH
13690: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13694: LD_INT 69
13696: PPUSH
13697: LD_VAR 0 3
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13709: LD_INT 39
13711: PPUSH
13712: LD_VAR 0 3
13716: PPUSH
13717: LD_INT 1
13719: PPUSH
13720: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13724: LD_INT 43
13726: PPUSH
13727: LD_VAR 0 3
13731: PPUSH
13732: LD_INT 1
13734: PPUSH
13735: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13739: LD_INT 51
13741: PPUSH
13742: LD_VAR 0 3
13746: PPUSH
13747: LD_INT 1
13749: PPUSH
13750: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13754: LD_INT 6
13756: PPUSH
13757: LD_VAR 0 3
13761: PPUSH
13762: LD_INT 1
13764: PPUSH
13765: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13769: LD_INT 0
13771: PPUSH
13772: LD_VAR 0 3
13776: PPUSH
13777: LD_INT 1
13779: PPUSH
13780: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13784: LD_INT 2
13786: PPUSH
13787: LD_VAR 0 3
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13799: LD_INT 3
13801: PPUSH
13802: LD_VAR 0 3
13806: PPUSH
13807: LD_INT 1
13809: PPUSH
13810: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13814: LD_INT 4
13816: PPUSH
13817: LD_VAR 0 3
13821: PPUSH
13822: LD_INT 1
13824: PPUSH
13825: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13829: LD_INT 6
13831: PPUSH
13832: LD_VAR 0 3
13836: PPUSH
13837: LD_INT 1
13839: PPUSH
13840: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13844: LD_INT 7
13846: PPUSH
13847: LD_VAR 0 3
13851: PPUSH
13852: LD_INT 1
13854: PPUSH
13855: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13859: LD_INT 8
13861: PPUSH
13862: LD_VAR 0 3
13866: PPUSH
13867: LD_INT 1
13869: PPUSH
13870: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13874: LD_INT 10
13876: PPUSH
13877: LD_VAR 0 3
13881: PPUSH
13882: LD_INT 1
13884: PPUSH
13885: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13889: LD_INT 15
13891: PPUSH
13892: LD_VAR 0 3
13896: PPUSH
13897: LD_INT 1
13899: PPUSH
13900: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13904: LD_INT 16
13906: PPUSH
13907: LD_VAR 0 3
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13919: LD_INT 17
13921: PPUSH
13922: LD_VAR 0 3
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13934: LD_INT 20
13936: PPUSH
13937: LD_VAR 0 3
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13949: LD_INT 26
13951: PPUSH
13952: LD_VAR 0 3
13956: PPUSH
13957: LD_INT 1
13959: PPUSH
13960: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13964: LD_INT 27
13966: PPUSH
13967: LD_VAR 0 3
13971: PPUSH
13972: LD_INT 1
13974: PPUSH
13975: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13979: LD_INT 29
13981: PPUSH
13982: LD_VAR 0 3
13986: PPUSH
13987: LD_INT 1
13989: PPUSH
13990: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13994: LD_INT 31
13996: PPUSH
13997: LD_VAR 0 3
14001: PPUSH
14002: LD_INT 1
14004: PPUSH
14005: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14009: LD_INT 32
14011: PPUSH
14012: LD_VAR 0 3
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: CALL_OW 324
// end ; 4 :
14024: GO 17111
14026: LD_INT 4
14028: DOUBLE
14029: EQUAL
14030: IFTRUE 14034
14032: GO 14982
14034: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14035: LD_INT 35
14037: PPUSH
14038: LD_VAR 0 3
14042: PPUSH
14043: LD_INT 1
14045: PPUSH
14046: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14050: LD_INT 45
14052: PPUSH
14053: LD_VAR 0 3
14057: PPUSH
14058: LD_INT 1
14060: PPUSH
14061: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14065: LD_INT 46
14067: PPUSH
14068: LD_VAR 0 3
14072: PPUSH
14073: LD_INT 1
14075: PPUSH
14076: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14080: LD_INT 47
14082: PPUSH
14083: LD_VAR 0 3
14087: PPUSH
14088: LD_INT 1
14090: PPUSH
14091: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14095: LD_INT 1
14097: PPUSH
14098: LD_VAR 0 3
14102: PPUSH
14103: LD_INT 1
14105: PPUSH
14106: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14110: LD_INT 2
14112: PPUSH
14113: LD_VAR 0 3
14117: PPUSH
14118: LD_INT 1
14120: PPUSH
14121: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14125: LD_INT 11
14127: PPUSH
14128: LD_VAR 0 3
14132: PPUSH
14133: LD_INT 1
14135: PPUSH
14136: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14140: LD_INT 20
14142: PPUSH
14143: LD_VAR 0 3
14147: PPUSH
14148: LD_INT 1
14150: PPUSH
14151: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14155: LD_INT 48
14157: PPUSH
14158: LD_VAR 0 3
14162: PPUSH
14163: LD_INT 1
14165: PPUSH
14166: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14170: LD_INT 49
14172: PPUSH
14173: LD_VAR 0 3
14177: PPUSH
14178: LD_INT 1
14180: PPUSH
14181: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14185: LD_INT 69
14187: PPUSH
14188: LD_VAR 0 3
14192: PPUSH
14193: LD_INT 1
14195: PPUSH
14196: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14200: LD_INT 39
14202: PPUSH
14203: LD_VAR 0 3
14207: PPUSH
14208: LD_INT 1
14210: PPUSH
14211: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14215: LD_INT 34
14217: PPUSH
14218: LD_VAR 0 3
14222: PPUSH
14223: LD_INT 1
14225: PPUSH
14226: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14230: LD_INT 42
14232: PPUSH
14233: LD_VAR 0 3
14237: PPUSH
14238: LD_INT 1
14240: PPUSH
14241: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14245: LD_INT 44
14247: PPUSH
14248: LD_VAR 0 3
14252: PPUSH
14253: LD_INT 1
14255: PPUSH
14256: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14260: LD_INT 41
14262: PPUSH
14263: LD_VAR 0 3
14267: PPUSH
14268: LD_INT 1
14270: PPUSH
14271: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14275: LD_INT 43
14277: PPUSH
14278: LD_VAR 0 3
14282: PPUSH
14283: LD_INT 1
14285: PPUSH
14286: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14290: LD_INT 70
14292: PPUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: LD_INT 1
14300: PPUSH
14301: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14305: LD_INT 51
14307: PPUSH
14308: LD_VAR 0 3
14312: PPUSH
14313: LD_INT 1
14315: PPUSH
14316: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14320: LD_INT 52
14322: PPUSH
14323: LD_VAR 0 3
14327: PPUSH
14328: LD_INT 1
14330: PPUSH
14331: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14335: LD_INT 6
14337: PPUSH
14338: LD_VAR 0 3
14342: PPUSH
14343: LD_INT 1
14345: PPUSH
14346: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14350: LD_INT 15
14352: PPUSH
14353: LD_VAR 0 3
14357: PPUSH
14358: LD_INT 1
14360: PPUSH
14361: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14365: LD_INT 7
14367: PPUSH
14368: LD_VAR 0 3
14372: PPUSH
14373: LD_INT 1
14375: PPUSH
14376: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14380: LD_INT 12
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: LD_INT 1
14390: PPUSH
14391: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14395: LD_INT 18
14397: PPUSH
14398: LD_VAR 0 3
14402: PPUSH
14403: LD_INT 1
14405: PPUSH
14406: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14410: LD_INT 60
14412: PPUSH
14413: LD_VAR 0 3
14417: PPUSH
14418: LD_INT 1
14420: PPUSH
14421: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14425: LD_INT 9
14427: PPUSH
14428: LD_VAR 0 3
14432: PPUSH
14433: LD_INT 1
14435: PPUSH
14436: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14440: LD_INT 30
14442: PPUSH
14443: LD_VAR 0 3
14447: PPUSH
14448: LD_INT 1
14450: PPUSH
14451: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14455: LD_INT 37
14457: PPUSH
14458: LD_VAR 0 3
14462: PPUSH
14463: LD_INT 1
14465: PPUSH
14466: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14470: LD_INT 5
14472: PPUSH
14473: LD_VAR 0 3
14477: PPUSH
14478: LD_INT 1
14480: PPUSH
14481: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14485: LD_INT 66
14487: PPUSH
14488: LD_VAR 0 3
14492: PPUSH
14493: LD_INT 1
14495: PPUSH
14496: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14500: LD_INT 21
14502: PPUSH
14503: LD_VAR 0 3
14507: PPUSH
14508: LD_INT 1
14510: PPUSH
14511: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14515: LD_INT 22
14517: PPUSH
14518: LD_VAR 0 3
14522: PPUSH
14523: LD_INT 1
14525: PPUSH
14526: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14530: LD_INT 54
14532: PPUSH
14533: LD_VAR 0 3
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14545: LD_INT 0
14547: PPUSH
14548: LD_VAR 0 3
14552: PPUSH
14553: LD_INT 1
14555: PPUSH
14556: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14560: LD_INT 1
14562: PPUSH
14563: LD_VAR 0 3
14567: PPUSH
14568: LD_INT 1
14570: PPUSH
14571: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14575: LD_INT 2
14577: PPUSH
14578: LD_VAR 0 3
14582: PPUSH
14583: LD_INT 1
14585: PPUSH
14586: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14590: LD_INT 3
14592: PPUSH
14593: LD_VAR 0 3
14597: PPUSH
14598: LD_INT 1
14600: PPUSH
14601: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14605: LD_INT 4
14607: PPUSH
14608: LD_VAR 0 3
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14620: LD_INT 5
14622: PPUSH
14623: LD_VAR 0 3
14627: PPUSH
14628: LD_INT 1
14630: PPUSH
14631: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14635: LD_INT 6
14637: PPUSH
14638: LD_VAR 0 3
14642: PPUSH
14643: LD_INT 1
14645: PPUSH
14646: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14650: LD_INT 7
14652: PPUSH
14653: LD_VAR 0 3
14657: PPUSH
14658: LD_INT 1
14660: PPUSH
14661: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14665: LD_INT 8
14667: PPUSH
14668: LD_VAR 0 3
14672: PPUSH
14673: LD_INT 1
14675: PPUSH
14676: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14680: LD_INT 10
14682: PPUSH
14683: LD_VAR 0 3
14687: PPUSH
14688: LD_INT 1
14690: PPUSH
14691: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14695: LD_INT 11
14697: PPUSH
14698: LD_VAR 0 3
14702: PPUSH
14703: LD_INT 1
14705: PPUSH
14706: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14710: LD_INT 12
14712: PPUSH
14713: LD_VAR 0 3
14717: PPUSH
14718: LD_INT 1
14720: PPUSH
14721: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14725: LD_INT 13
14727: PPUSH
14728: LD_VAR 0 3
14732: PPUSH
14733: LD_INT 1
14735: PPUSH
14736: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14740: LD_INT 14
14742: PPUSH
14743: LD_VAR 0 3
14747: PPUSH
14748: LD_INT 1
14750: PPUSH
14751: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14755: LD_INT 15
14757: PPUSH
14758: LD_VAR 0 3
14762: PPUSH
14763: LD_INT 1
14765: PPUSH
14766: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14770: LD_INT 16
14772: PPUSH
14773: LD_VAR 0 3
14777: PPUSH
14778: LD_INT 1
14780: PPUSH
14781: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14785: LD_INT 17
14787: PPUSH
14788: LD_VAR 0 3
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14800: LD_INT 19
14802: PPUSH
14803: LD_VAR 0 3
14807: PPUSH
14808: LD_INT 1
14810: PPUSH
14811: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14815: LD_INT 20
14817: PPUSH
14818: LD_VAR 0 3
14822: PPUSH
14823: LD_INT 1
14825: PPUSH
14826: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14830: LD_INT 21
14832: PPUSH
14833: LD_VAR 0 3
14837: PPUSH
14838: LD_INT 1
14840: PPUSH
14841: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14845: LD_INT 23
14847: PPUSH
14848: LD_VAR 0 3
14852: PPUSH
14853: LD_INT 1
14855: PPUSH
14856: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14860: LD_INT 26
14862: PPUSH
14863: LD_VAR 0 3
14867: PPUSH
14868: LD_INT 1
14870: PPUSH
14871: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14875: LD_INT 27
14877: PPUSH
14878: LD_VAR 0 3
14882: PPUSH
14883: LD_INT 1
14885: PPUSH
14886: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14890: LD_INT 28
14892: PPUSH
14893: LD_VAR 0 3
14897: PPUSH
14898: LD_INT 1
14900: PPUSH
14901: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14905: LD_INT 29
14907: PPUSH
14908: LD_VAR 0 3
14912: PPUSH
14913: LD_INT 1
14915: PPUSH
14916: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14920: LD_INT 30
14922: PPUSH
14923: LD_VAR 0 3
14927: PPUSH
14928: LD_INT 1
14930: PPUSH
14931: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14935: LD_INT 31
14937: PPUSH
14938: LD_VAR 0 3
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14950: LD_INT 32
14952: PPUSH
14953: LD_VAR 0 3
14957: PPUSH
14958: LD_INT 1
14960: PPUSH
14961: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14965: LD_INT 36
14967: PPUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: LD_INT 1
14975: PPUSH
14976: CALL_OW 324
// end ; 5 :
14980: GO 17111
14982: LD_INT 5
14984: DOUBLE
14985: EQUAL
14986: IFTRUE 14990
14988: GO 16103
14990: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14991: LD_INT 35
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15006: LD_INT 45
15008: PPUSH
15009: LD_VAR 0 3
15013: PPUSH
15014: LD_INT 1
15016: PPUSH
15017: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15021: LD_INT 46
15023: PPUSH
15024: LD_VAR 0 3
15028: PPUSH
15029: LD_INT 1
15031: PPUSH
15032: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15036: LD_INT 47
15038: PPUSH
15039: LD_VAR 0 3
15043: PPUSH
15044: LD_INT 1
15046: PPUSH
15047: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15051: LD_INT 1
15053: PPUSH
15054: LD_VAR 0 3
15058: PPUSH
15059: LD_INT 1
15061: PPUSH
15062: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15066: LD_INT 2
15068: PPUSH
15069: LD_VAR 0 3
15073: PPUSH
15074: LD_INT 1
15076: PPUSH
15077: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15081: LD_INT 11
15083: PPUSH
15084: LD_VAR 0 3
15088: PPUSH
15089: LD_INT 1
15091: PPUSH
15092: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15096: LD_INT 20
15098: PPUSH
15099: LD_VAR 0 3
15103: PPUSH
15104: LD_INT 1
15106: PPUSH
15107: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15111: LD_INT 48
15113: PPUSH
15114: LD_VAR 0 3
15118: PPUSH
15119: LD_INT 1
15121: PPUSH
15122: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15126: LD_INT 49
15128: PPUSH
15129: LD_VAR 0 3
15133: PPUSH
15134: LD_INT 1
15136: PPUSH
15137: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15141: LD_INT 69
15143: PPUSH
15144: LD_VAR 0 3
15148: PPUSH
15149: LD_INT 1
15151: PPUSH
15152: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15156: LD_INT 39
15158: PPUSH
15159: LD_VAR 0 3
15163: PPUSH
15164: LD_INT 1
15166: PPUSH
15167: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15171: LD_INT 34
15173: PPUSH
15174: LD_VAR 0 3
15178: PPUSH
15179: LD_INT 1
15181: PPUSH
15182: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15186: LD_INT 42
15188: PPUSH
15189: LD_VAR 0 3
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15201: LD_INT 44
15203: PPUSH
15204: LD_VAR 0 3
15208: PPUSH
15209: LD_INT 1
15211: PPUSH
15212: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15216: LD_INT 41
15218: PPUSH
15219: LD_VAR 0 3
15223: PPUSH
15224: LD_INT 1
15226: PPUSH
15227: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15231: LD_INT 40
15233: PPUSH
15234: LD_VAR 0 3
15238: PPUSH
15239: LD_INT 1
15241: PPUSH
15242: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15246: LD_INT 43
15248: PPUSH
15249: LD_VAR 0 3
15253: PPUSH
15254: LD_INT 1
15256: PPUSH
15257: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15261: LD_INT 70
15263: PPUSH
15264: LD_VAR 0 3
15268: PPUSH
15269: LD_INT 1
15271: PPUSH
15272: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15276: LD_INT 51
15278: PPUSH
15279: LD_VAR 0 3
15283: PPUSH
15284: LD_INT 1
15286: PPUSH
15287: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15291: LD_INT 52
15293: PPUSH
15294: LD_VAR 0 3
15298: PPUSH
15299: LD_INT 1
15301: PPUSH
15302: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15306: LD_INT 6
15308: PPUSH
15309: LD_VAR 0 3
15313: PPUSH
15314: LD_INT 1
15316: PPUSH
15317: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15321: LD_INT 15
15323: PPUSH
15324: LD_VAR 0 3
15328: PPUSH
15329: LD_INT 1
15331: PPUSH
15332: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15336: LD_INT 7
15338: PPUSH
15339: LD_VAR 0 3
15343: PPUSH
15344: LD_INT 1
15346: PPUSH
15347: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15351: LD_INT 12
15353: PPUSH
15354: LD_VAR 0 3
15358: PPUSH
15359: LD_INT 1
15361: PPUSH
15362: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15366: LD_INT 17
15368: PPUSH
15369: LD_VAR 0 3
15373: PPUSH
15374: LD_INT 1
15376: PPUSH
15377: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15381: LD_INT 18
15383: PPUSH
15384: LD_VAR 0 3
15388: PPUSH
15389: LD_INT 1
15391: PPUSH
15392: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15396: LD_INT 60
15398: PPUSH
15399: LD_VAR 0 3
15403: PPUSH
15404: LD_INT 1
15406: PPUSH
15407: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15411: LD_INT 32
15413: PPUSH
15414: LD_VAR 0 3
15418: PPUSH
15419: LD_INT 1
15421: PPUSH
15422: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15426: LD_INT 9
15428: PPUSH
15429: LD_VAR 0 3
15433: PPUSH
15434: LD_INT 1
15436: PPUSH
15437: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15441: LD_INT 57
15443: PPUSH
15444: LD_VAR 0 3
15448: PPUSH
15449: LD_INT 1
15451: PPUSH
15452: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15456: LD_INT 30
15458: PPUSH
15459: LD_VAR 0 3
15463: PPUSH
15464: LD_INT 1
15466: PPUSH
15467: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15471: LD_INT 37
15473: PPUSH
15474: LD_VAR 0 3
15478: PPUSH
15479: LD_INT 1
15481: PPUSH
15482: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15486: LD_INT 63
15488: PPUSH
15489: LD_VAR 0 3
15493: PPUSH
15494: LD_INT 1
15496: PPUSH
15497: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15501: LD_INT 3
15503: PPUSH
15504: LD_VAR 0 3
15508: PPUSH
15509: LD_INT 1
15511: PPUSH
15512: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15516: LD_INT 4
15518: PPUSH
15519: LD_VAR 0 3
15523: PPUSH
15524: LD_INT 1
15526: PPUSH
15527: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15531: LD_INT 5
15533: PPUSH
15534: LD_VAR 0 3
15538: PPUSH
15539: LD_INT 1
15541: PPUSH
15542: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15546: LD_INT 66
15548: PPUSH
15549: LD_VAR 0 3
15553: PPUSH
15554: LD_INT 1
15556: PPUSH
15557: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15561: LD_INT 21
15563: PPUSH
15564: LD_VAR 0 3
15568: PPUSH
15569: LD_INT 1
15571: PPUSH
15572: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15576: LD_INT 22
15578: PPUSH
15579: LD_VAR 0 3
15583: PPUSH
15584: LD_INT 1
15586: PPUSH
15587: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15591: LD_INT 19
15593: PPUSH
15594: LD_VAR 0 3
15598: PPUSH
15599: LD_INT 1
15601: PPUSH
15602: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15606: LD_INT 54
15608: PPUSH
15609: LD_VAR 0 3
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15621: LD_INT 55
15623: PPUSH
15624: LD_VAR 0 3
15628: PPUSH
15629: LD_INT 1
15631: PPUSH
15632: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15636: LD_INT 0
15638: PPUSH
15639: LD_VAR 0 3
15643: PPUSH
15644: LD_INT 1
15646: PPUSH
15647: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15651: LD_INT 1
15653: PPUSH
15654: LD_VAR 0 3
15658: PPUSH
15659: LD_INT 1
15661: PPUSH
15662: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15666: LD_INT 2
15668: PPUSH
15669: LD_VAR 0 3
15673: PPUSH
15674: LD_INT 1
15676: PPUSH
15677: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15681: LD_INT 3
15683: PPUSH
15684: LD_VAR 0 3
15688: PPUSH
15689: LD_INT 1
15691: PPUSH
15692: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15696: LD_INT 4
15698: PPUSH
15699: LD_VAR 0 3
15703: PPUSH
15704: LD_INT 1
15706: PPUSH
15707: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15711: LD_INT 5
15713: PPUSH
15714: LD_VAR 0 3
15718: PPUSH
15719: LD_INT 1
15721: PPUSH
15722: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15726: LD_INT 6
15728: PPUSH
15729: LD_VAR 0 3
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15741: LD_INT 7
15743: PPUSH
15744: LD_VAR 0 3
15748: PPUSH
15749: LD_INT 1
15751: PPUSH
15752: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15756: LD_INT 8
15758: PPUSH
15759: LD_VAR 0 3
15763: PPUSH
15764: LD_INT 1
15766: PPUSH
15767: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15771: LD_INT 10
15773: PPUSH
15774: LD_VAR 0 3
15778: PPUSH
15779: LD_INT 1
15781: PPUSH
15782: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15786: LD_INT 11
15788: PPUSH
15789: LD_VAR 0 3
15793: PPUSH
15794: LD_INT 1
15796: PPUSH
15797: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15801: LD_INT 12
15803: PPUSH
15804: LD_VAR 0 3
15808: PPUSH
15809: LD_INT 1
15811: PPUSH
15812: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15816: LD_INT 13
15818: PPUSH
15819: LD_VAR 0 3
15823: PPUSH
15824: LD_INT 1
15826: PPUSH
15827: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15831: LD_INT 14
15833: PPUSH
15834: LD_VAR 0 3
15838: PPUSH
15839: LD_INT 1
15841: PPUSH
15842: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15846: LD_INT 15
15848: PPUSH
15849: LD_VAR 0 3
15853: PPUSH
15854: LD_INT 1
15856: PPUSH
15857: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15861: LD_INT 16
15863: PPUSH
15864: LD_VAR 0 3
15868: PPUSH
15869: LD_INT 1
15871: PPUSH
15872: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15876: LD_INT 17
15878: PPUSH
15879: LD_VAR 0 3
15883: PPUSH
15884: LD_INT 1
15886: PPUSH
15887: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15891: LD_INT 18
15893: PPUSH
15894: LD_VAR 0 3
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15906: LD_INT 19
15908: PPUSH
15909: LD_VAR 0 3
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15921: LD_INT 20
15923: PPUSH
15924: LD_VAR 0 3
15928: PPUSH
15929: LD_INT 1
15931: PPUSH
15932: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15936: LD_INT 21
15938: PPUSH
15939: LD_VAR 0 3
15943: PPUSH
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15951: LD_INT 23
15953: PPUSH
15954: LD_VAR 0 3
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15966: LD_INT 26
15968: PPUSH
15969: LD_VAR 0 3
15973: PPUSH
15974: LD_INT 1
15976: PPUSH
15977: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15981: LD_INT 27
15983: PPUSH
15984: LD_VAR 0 3
15988: PPUSH
15989: LD_INT 1
15991: PPUSH
15992: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15996: LD_INT 28
15998: PPUSH
15999: LD_VAR 0 3
16003: PPUSH
16004: LD_INT 1
16006: PPUSH
16007: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16011: LD_INT 29
16013: PPUSH
16014: LD_VAR 0 3
16018: PPUSH
16019: LD_INT 1
16021: PPUSH
16022: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16026: LD_INT 30
16028: PPUSH
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16041: LD_INT 31
16043: PPUSH
16044: LD_VAR 0 3
16048: PPUSH
16049: LD_INT 1
16051: PPUSH
16052: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16056: LD_INT 32
16058: PPUSH
16059: LD_VAR 0 3
16063: PPUSH
16064: LD_INT 1
16066: PPUSH
16067: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
16071: LD_INT 33
16073: PPUSH
16074: LD_VAR 0 3
16078: PPUSH
16079: LD_INT 1
16081: PPUSH
16082: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16086: LD_INT 36
16088: PPUSH
16089: LD_VAR 0 3
16093: PPUSH
16094: LD_INT 1
16096: PPUSH
16097: CALL_OW 324
// end ; 6 :
16101: GO 17111
16103: LD_INT 6
16105: DOUBLE
16106: EQUAL
16107: IFTRUE 16111
16109: GO 17036
16111: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16112: LD_INT 35
16114: PPUSH
16115: LD_VAR 0 3
16119: PPUSH
16120: LD_INT 1
16122: PPUSH
16123: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16127: LD_INT 45
16129: PPUSH
16130: LD_VAR 0 3
16134: PPUSH
16135: LD_INT 1
16137: PPUSH
16138: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16142: LD_INT 46
16144: PPUSH
16145: LD_VAR 0 3
16149: PPUSH
16150: LD_INT 1
16152: PPUSH
16153: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16157: LD_INT 47
16159: PPUSH
16160: LD_VAR 0 3
16164: PPUSH
16165: LD_INT 1
16167: PPUSH
16168: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16172: LD_INT 1
16174: PPUSH
16175: LD_VAR 0 3
16179: PPUSH
16180: LD_INT 1
16182: PPUSH
16183: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16187: LD_INT 2
16189: PPUSH
16190: LD_VAR 0 3
16194: PPUSH
16195: LD_INT 1
16197: PPUSH
16198: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16202: LD_INT 11
16204: PPUSH
16205: LD_VAR 0 3
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16217: LD_INT 20
16219: PPUSH
16220: LD_VAR 0 3
16224: PPUSH
16225: LD_INT 1
16227: PPUSH
16228: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16232: LD_INT 48
16234: PPUSH
16235: LD_VAR 0 3
16239: PPUSH
16240: LD_INT 1
16242: PPUSH
16243: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16247: LD_INT 49
16249: PPUSH
16250: LD_VAR 0 3
16254: PPUSH
16255: LD_INT 1
16257: PPUSH
16258: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
16262: LD_INT 50
16264: PPUSH
16265: LD_VAR 0 3
16269: PPUSH
16270: LD_INT 1
16272: PPUSH
16273: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16277: LD_INT 69
16279: PPUSH
16280: LD_VAR 0 3
16284: PPUSH
16285: LD_INT 1
16287: PPUSH
16288: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16292: LD_INT 39
16294: PPUSH
16295: LD_VAR 0 3
16299: PPUSH
16300: LD_INT 1
16302: PPUSH
16303: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16307: LD_INT 34
16309: PPUSH
16310: LD_VAR 0 3
16314: PPUSH
16315: LD_INT 1
16317: PPUSH
16318: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16322: LD_INT 42
16324: PPUSH
16325: LD_VAR 0 3
16329: PPUSH
16330: LD_INT 1
16332: PPUSH
16333: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16337: LD_INT 44
16339: PPUSH
16340: LD_VAR 0 3
16344: PPUSH
16345: LD_INT 1
16347: PPUSH
16348: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16352: LD_INT 41
16354: PPUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: LD_INT 1
16362: PPUSH
16363: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
16367: LD_INT 13
16369: PPUSH
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_INT 1
16377: PPUSH
16378: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16382: LD_INT 40
16384: PPUSH
16385: LD_VAR 0 3
16389: PPUSH
16390: LD_INT 1
16392: PPUSH
16393: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16397: LD_INT 43
16399: PPUSH
16400: LD_VAR 0 3
16404: PPUSH
16405: LD_INT 1
16407: PPUSH
16408: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16412: LD_INT 70
16414: PPUSH
16415: LD_VAR 0 3
16419: PPUSH
16420: LD_INT 1
16422: PPUSH
16423: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
16427: LD_INT 23
16429: PPUSH
16430: LD_VAR 0 3
16434: PPUSH
16435: LD_INT 1
16437: PPUSH
16438: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16442: LD_INT 51
16444: PPUSH
16445: LD_VAR 0 3
16449: PPUSH
16450: LD_INT 1
16452: PPUSH
16453: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16457: LD_INT 52
16459: PPUSH
16460: LD_VAR 0 3
16464: PPUSH
16465: LD_INT 1
16467: PPUSH
16468: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16472: LD_INT 6
16474: PPUSH
16475: LD_VAR 0 3
16479: PPUSH
16480: LD_INT 1
16482: PPUSH
16483: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16487: LD_INT 15
16489: PPUSH
16490: LD_VAR 0 3
16494: PPUSH
16495: LD_INT 1
16497: PPUSH
16498: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16502: LD_INT 7
16504: PPUSH
16505: LD_VAR 0 3
16509: PPUSH
16510: LD_INT 1
16512: PPUSH
16513: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16517: LD_INT 12
16519: PPUSH
16520: LD_VAR 0 3
16524: PPUSH
16525: LD_INT 1
16527: PPUSH
16528: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
16532: LD_INT 10
16534: PPUSH
16535: LD_VAR 0 3
16539: PPUSH
16540: LD_INT 1
16542: PPUSH
16543: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16547: LD_INT 17
16549: PPUSH
16550: LD_VAR 0 3
16554: PPUSH
16555: LD_INT 1
16557: PPUSH
16558: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16562: LD_INT 18
16564: PPUSH
16565: LD_VAR 0 3
16569: PPUSH
16570: LD_INT 1
16572: PPUSH
16573: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16577: LD_INT 60
16579: PPUSH
16580: LD_VAR 0 3
16584: PPUSH
16585: LD_INT 1
16587: PPUSH
16588: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
16592: LD_INT 61
16594: PPUSH
16595: LD_VAR 0 3
16599: PPUSH
16600: LD_INT 1
16602: PPUSH
16603: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16607: LD_INT 32
16609: PPUSH
16610: LD_VAR 0 3
16614: PPUSH
16615: LD_INT 1
16617: PPUSH
16618: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
16622: LD_INT 27
16624: PPUSH
16625: LD_VAR 0 3
16629: PPUSH
16630: LD_INT 1
16632: PPUSH
16633: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
16637: LD_INT 36
16639: PPUSH
16640: LD_VAR 0 3
16644: PPUSH
16645: LD_INT 1
16647: PPUSH
16648: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
16652: LD_INT 33
16654: PPUSH
16655: LD_VAR 0 3
16659: PPUSH
16660: LD_INT 1
16662: PPUSH
16663: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16667: LD_INT 9
16669: PPUSH
16670: LD_VAR 0 3
16674: PPUSH
16675: LD_INT 1
16677: PPUSH
16678: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
16682: LD_INT 38
16684: PPUSH
16685: LD_VAR 0 3
16689: PPUSH
16690: LD_INT 1
16692: PPUSH
16693: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16697: LD_INT 57
16699: PPUSH
16700: LD_VAR 0 3
16704: PPUSH
16705: LD_INT 1
16707: PPUSH
16708: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
16712: LD_INT 58
16714: PPUSH
16715: LD_VAR 0 3
16719: PPUSH
16720: LD_INT 1
16722: PPUSH
16723: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
16727: LD_INT 28
16729: PPUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: LD_INT 1
16737: PPUSH
16738: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
16742: LD_INT 29
16744: PPUSH
16745: LD_VAR 0 3
16749: PPUSH
16750: LD_INT 1
16752: PPUSH
16753: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16757: LD_INT 30
16759: PPUSH
16760: LD_VAR 0 3
16764: PPUSH
16765: LD_INT 1
16767: PPUSH
16768: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16772: LD_INT 37
16774: PPUSH
16775: LD_VAR 0 3
16779: PPUSH
16780: LD_INT 1
16782: PPUSH
16783: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16787: LD_INT 63
16789: PPUSH
16790: LD_VAR 0 3
16794: PPUSH
16795: LD_INT 1
16797: PPUSH
16798: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
16802: LD_INT 64
16804: PPUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: LD_INT 1
16812: PPUSH
16813: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16817: LD_INT 3
16819: PPUSH
16820: LD_VAR 0 3
16824: PPUSH
16825: LD_INT 1
16827: PPUSH
16828: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16832: LD_INT 4
16834: PPUSH
16835: LD_VAR 0 3
16839: PPUSH
16840: LD_INT 1
16842: PPUSH
16843: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16847: LD_INT 5
16849: PPUSH
16850: LD_VAR 0 3
16854: PPUSH
16855: LD_INT 1
16857: PPUSH
16858: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16862: LD_INT 8
16864: PPUSH
16865: LD_VAR 0 3
16869: PPUSH
16870: LD_INT 1
16872: PPUSH
16873: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16877: LD_INT 66
16879: PPUSH
16880: LD_VAR 0 3
16884: PPUSH
16885: LD_INT 1
16887: PPUSH
16888: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16892: LD_INT 67
16894: PPUSH
16895: LD_VAR 0 3
16899: PPUSH
16900: LD_INT 1
16902: PPUSH
16903: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16907: LD_INT 21
16909: PPUSH
16910: LD_VAR 0 3
16914: PPUSH
16915: LD_INT 1
16917: PPUSH
16918: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16922: LD_INT 22
16924: PPUSH
16925: LD_VAR 0 3
16929: PPUSH
16930: LD_INT 1
16932: PPUSH
16933: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16937: LD_INT 19
16939: PPUSH
16940: LD_VAR 0 3
16944: PPUSH
16945: LD_INT 1
16947: PPUSH
16948: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16952: LD_INT 26
16954: PPUSH
16955: LD_VAR 0 3
16959: PPUSH
16960: LD_INT 1
16962: PPUSH
16963: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16967: LD_INT 54
16969: PPUSH
16970: LD_VAR 0 3
16974: PPUSH
16975: LD_INT 1
16977: PPUSH
16978: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16982: LD_INT 55
16984: PPUSH
16985: LD_VAR 0 3
16989: PPUSH
16990: LD_INT 1
16992: PPUSH
16993: CALL_OW 322
// for i = 0 to 39 do
16997: LD_ADDR_VAR 0 4
17001: PUSH
17002: DOUBLE
17003: LD_INT 0
17005: DEC
17006: ST_TO_ADDR
17007: LD_INT 39
17009: PUSH
17010: FOR_TO
17011: IFFALSE 17032
// SetRestrict ( i , side , true ) ;
17013: LD_VAR 0 4
17017: PPUSH
17018: LD_VAR 0 3
17022: PPUSH
17023: LD_INT 1
17025: PPUSH
17026: CALL_OW 324
17030: GO 17010
17032: POP
17033: POP
// end ; else
17034: GO 17111
17036: POP
// begin for i = 1 to 73 do
17037: LD_ADDR_VAR 0 4
17041: PUSH
17042: DOUBLE
17043: LD_INT 1
17045: DEC
17046: ST_TO_ADDR
17047: LD_INT 73
17049: PUSH
17050: FOR_TO
17051: IFFALSE 17072
// SetTech ( i , side , state_enabled ) ;
17053: LD_VAR 0 4
17057: PPUSH
17058: LD_VAR 0 3
17062: PPUSH
17063: LD_INT 1
17065: PPUSH
17066: CALL_OW 322
17070: GO 17050
17072: POP
17073: POP
// for i = 0 to 39 do
17074: LD_ADDR_VAR 0 4
17078: PUSH
17079: DOUBLE
17080: LD_INT 0
17082: DEC
17083: ST_TO_ADDR
17084: LD_INT 39
17086: PUSH
17087: FOR_TO
17088: IFFALSE 17109
// SetRestrict ( i , side , true ) ;
17090: LD_VAR 0 4
17094: PPUSH
17095: LD_VAR 0 3
17099: PPUSH
17100: LD_INT 1
17102: PPUSH
17103: CALL_OW 324
17107: GO 17087
17109: POP
17110: POP
// end ; end ; end ;
17111: GO 13116
17113: POP
17114: POP
// end ;
17115: LD_VAR 0 2
17119: RET
