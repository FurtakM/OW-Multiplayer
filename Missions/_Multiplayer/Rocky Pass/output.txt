// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , tech_level ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 41
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 21
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 21
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 19
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 22
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 20
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 21
 285: PUSH
 286: LD_EXP 21
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 20
 308: PUSH
 309: LD_EXP 20
 313: PPUSH
 314: LD_EXP 19
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 20
 329: PUSH
 330: LD_EXP 19
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 24
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 21
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 24
 420: PUSH
 421: LD_EXP 24
 425: PPUSH
 426: LD_EXP 21
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := 1 ;
 451: LD_ADDR_EXP 23
 455: PUSH
 456: LD_INT 1
 458: ST_TO_ADDR
// if Multiplayer then
 459: LD_OWVAR 4
 463: IFFALSE 714
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 465: LD_ADDR_EXP 43
 469: PUSH
 470: LD_INT 0
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 478: LD_ADDR_EXP 44
 482: PUSH
 483: LD_INT 1
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 491: LD_ADDR_EXP 45
 495: PUSH
 496: LD_INT 2
 498: PPUSH
 499: CALL_OW 426
 503: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 504: LD_ADDR_EXP 46
 508: PUSH
 509: LD_INT 3
 511: PPUSH
 512: CALL_OW 426
 516: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 517: LD_ADDR_EXP 47
 521: PUSH
 522: LD_INT 4
 524: PPUSH
 525: CALL_OW 426
 529: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 530: LD_ADDR_EXP 48
 534: PUSH
 535: LD_INT 5
 537: PPUSH
 538: CALL_OW 426
 542: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 543: LD_ADDR_EXP 49
 547: PUSH
 548: LD_INT 6
 550: PPUSH
 551: CALL_OW 426
 555: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 556: LD_ADDR_EXP 50
 560: PUSH
 561: LD_INT 10
 563: PPUSH
 564: CALL_OW 426
 568: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 569: LD_ADDR_EXP 51
 573: PUSH
 574: LD_INT 11
 576: PPUSH
 577: CALL_OW 426
 581: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 582: LD_ADDR_EXP 52
 586: PUSH
 587: LD_INT 12
 589: PPUSH
 590: CALL_OW 426
 594: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 595: LD_ADDR_EXP 53
 599: PUSH
 600: LD_INT 13
 602: PPUSH
 603: CALL_OW 426
 607: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 608: LD_ADDR_EXP 54
 612: PUSH
 613: LD_INT 14
 615: PPUSH
 616: CALL_OW 426
 620: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 621: LD_ADDR_EXP 1
 625: PUSH
 626: LD_INT 15
 628: PPUSH
 629: CALL_OW 426
 633: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 634: LD_ADDR_EXP 2
 638: PUSH
 639: LD_INT 16
 641: PPUSH
 642: CALL_OW 426
 646: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 647: LD_ADDR_EXP 55
 651: PUSH
 652: LD_INT 17
 654: PPUSH
 655: CALL_OW 426
 659: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 660: LD_ADDR_EXP 56
 664: PUSH
 665: LD_INT 20
 667: PPUSH
 668: CALL_OW 426
 672: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 673: LD_ADDR_EXP 42
 677: PUSH
 678: LD_INT 21
 680: PPUSH
 681: CALL_OW 426
 685: ST_TO_ADDR
// def_spect := GetMultiplayerSetting ( 22 ) ;
 686: LD_ADDR_EXP 16
 690: PUSH
 691: LD_INT 22
 693: PPUSH
 694: CALL_OW 426
 698: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 699: LD_ADDR_EXP 18
 703: PUSH
 704: LD_INT 23
 706: PPUSH
 707: CALL_OW 426
 711: ST_TO_ADDR
// end else
 712: GO 870
// begin Randomize ;
 714: CALL_OW 10
// def_base_level := 2 ;
 718: LD_ADDR_EXP 43
 722: PUSH
 723: LD_INT 2
 725: ST_TO_ADDR
// def_amount_of_people := 0 ;
 726: LD_ADDR_EXP 44
 730: PUSH
 731: LD_INT 0
 733: ST_TO_ADDR
// def_skill_level := 1 ;
 734: LD_ADDR_EXP 45
 738: PUSH
 739: LD_INT 1
 741: ST_TO_ADDR
// def_starting_resources := 2 ;
 742: LD_ADDR_EXP 46
 746: PUSH
 747: LD_INT 2
 749: ST_TO_ADDR
// def_shipments_density := 1 ;
 750: LD_ADDR_EXP 47
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 758: LD_ADDR_EXP 48
 762: PUSH
 763: LD_INT 0
 765: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 766: LD_ADDR_EXP 49
 770: PUSH
 771: LD_INT 1
 773: ST_TO_ADDR
// def_shared_vision := 1 ;
 774: LD_ADDR_EXP 50
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// def_morale_flags := 1 ;
 782: LD_ADDR_EXP 51
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// def_siberite_detection := 1 ;
 790: LD_ADDR_EXP 52
 794: PUSH
 795: LD_INT 1
 797: ST_TO_ADDR
// def_people_respawning := 2 ;
 798: LD_ADDR_EXP 53
 802: PUSH
 803: LD_INT 2
 805: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 806: LD_ADDR_EXP 54
 810: PUSH
 811: LD_INT 3
 813: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 814: LD_ADDR_EXP 1
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
// def_public_score := 0 ;
 822: LD_ADDR_EXP 2
 826: PUSH
 827: LD_INT 0
 829: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 830: LD_ADDR_EXP 55
 834: PUSH
 835: LD_INT 0
 837: ST_TO_ADDR
// def_builduptime := 0 ;
 838: LD_ADDR_EXP 56
 842: PUSH
 843: LD_INT 0
 845: ST_TO_ADDR
// def_game_rules := 1 ;
 846: LD_ADDR_EXP 42
 850: PUSH
 851: LD_INT 1
 853: ST_TO_ADDR
// def_spect := 1 ;
 854: LD_ADDR_EXP 16
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// tech_level = 0 ;
 862: LD_ADDR_EXP 18
 866: PUSH
 867: LD_INT 0
 869: ST_TO_ADDR
// end ; InitGameRules ;
 870: CALL 9488 0 0
// if def_game_rules = 0 then
 874: LD_EXP 42
 878: PUSH
 879: LD_INT 0
 881: EQUAL
 882: IFFALSE 909
// begin if isSGUI then
 884: LD_OWVAR 83
 888: IFFALSE 896
// setMpTechs ( ) else
 890: CALL 12938 0 0
 894: GO 909
// begin SetMpTechLevel ( tech_level + 1 ) ;
 896: LD_EXP 18
 900: PUSH
 901: LD_INT 1
 903: PLUS
 904: PPUSH
 905: CALL 13085 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 909: LD_ADDR_EXP 3
 913: PUSH
 914: LD_INT 0
 916: PUSH
 917: LD_INT 1
 919: PUSH
 920: LD_INT 1
 922: PUSH
 923: EMPTY
 924: LIST
 925: LIST
 926: LIST
 927: PUSH
 928: LD_EXP 43
 932: PUSH
 933: LD_INT 1
 935: PLUS
 936: ARRAY
 937: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 938: LD_ADDR_EXP 4
 942: PUSH
 943: LD_INT 0
 945: PUSH
 946: LD_INT 0
 948: PUSH
 949: LD_INT 3
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: LIST
 956: PUSH
 957: LD_EXP 43
 961: PUSH
 962: LD_INT 1
 964: PLUS
 965: ARRAY
 966: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 967: LD_ADDR_EXP 5
 971: PUSH
 972: LD_INT 9
 974: PUSH
 975: LD_INT 12
 977: PUSH
 978: LD_INT 15
 980: PUSH
 981: LD_INT 24
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: LIST
 988: LIST
 989: PUSH
 990: LD_EXP 44
 994: PUSH
 995: LD_INT 1
 997: PLUS
 998: ARRAY
 999: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
1000: LD_ADDR_EXP 6
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 3
1010: PUSH
1011: LD_INT 5
1013: PUSH
1014: LD_INT 6
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: PUSH
1023: LD_EXP 45
1027: PUSH
1028: LD_INT 1
1030: PLUS
1031: ARRAY
1032: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1033: LD_ADDR_EXP 8
1037: PUSH
1038: LD_INT 0
1040: PUSH
1041: LD_INT 0
1043: PUSH
1044: LD_INT 0
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_INT 30
1054: PUSH
1055: LD_INT 0
1057: PUSH
1058: LD_INT 0
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: LIST
1065: PUSH
1066: LD_INT 50
1068: PUSH
1069: LD_INT 20
1071: PUSH
1072: LD_INT 0
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: PUSH
1080: LD_INT 80
1082: PUSH
1083: LD_INT 40
1085: PUSH
1086: LD_INT 20
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: LD_EXP 46
1104: PUSH
1105: LD_INT 1
1107: PLUS
1108: ARRAY
1109: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1110: LD_ADDR_EXP 7
1114: PUSH
1115: LD_INT 10
1117: PUSH
1118: EMPTY
1119: LIST
1120: PUSH
1121: LD_INT 7
1123: PUSH
1124: LD_INT 14
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: LD_INT 6
1133: PUSH
1134: LD_INT 12
1136: PUSH
1137: LD_INT 18
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: LIST
1144: PUSH
1145: LD_INT 5
1147: PUSH
1148: LD_INT 10
1150: PUSH
1151: LD_INT 15
1153: PUSH
1154: LD_INT 20
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: LD_EXP 46
1173: PUSH
1174: LD_INT 1
1176: PLUS
1177: ARRAY
1178: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1179: LD_ADDR_EXP 9
1183: PUSH
1184: LD_INT 150
1186: PUSH
1187: LD_INT 125
1189: PUSH
1190: LD_INT 100
1192: PUSH
1193: LD_INT 50
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: LIST
1201: PUSH
1202: LD_EXP 47
1206: PUSH
1207: LD_INT 1
1209: PLUS
1210: ARRAY
1211: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1212: LD_ADDR_EXP 13
1216: PUSH
1217: LD_INT 0
1219: PUSH
1220: LD_INT 10500
1222: PUSH
1223: LD_INT 6300
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: LD_EXP 53
1235: PUSH
1236: LD_INT 1
1238: PLUS
1239: ARRAY
1240: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1241: LD_ADDR_EXP 14
1245: PUSH
1246: LD_INT 0
1248: PUSH
1249: LD_INT 31500
1251: PUSH
1252: LD_INT 10500
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: PUSH
1260: LD_EXP 53
1264: PUSH
1265: LD_INT 1
1267: PLUS
1268: ARRAY
1269: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1270: LD_ADDR_EXP 11
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: LD_INT 3
1280: PUSH
1281: LD_INT 6
1283: PUSH
1284: LD_INT 9
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: PUSH
1293: LD_EXP 54
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1303: LD_ADDR_EXP 12
1307: PUSH
1308: LD_INT 30
1310: PUSH
1311: LD_INT 50
1313: PUSH
1314: LD_INT 80
1316: PUSH
1317: LD_INT 100
1319: PUSH
1320: LD_INT 130
1322: PUSH
1323: LD_INT 150
1325: PUSH
1326: LD_INT 200
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: PUSH
1338: LD_EXP 1
1342: PUSH
1343: LD_INT 1
1345: PLUS
1346: ARRAY
1347: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1348: LD_ADDR_EXP 10
1352: PUSH
1353: LD_INT 1
1355: NEG
1356: PUSH
1357: LD_INT 350
1359: PUSH
1360: LD_INT 700
1362: PUSH
1363: LD_INT 1400
1365: PUSH
1366: LD_INT 0
1368: PUSH
1369: EMPTY
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: PUSH
1376: LD_EXP 51
1380: PUSH
1381: LD_INT 1
1383: PLUS
1384: ARRAY
1385: ST_TO_ADDR
// battle_flags_id := [ ] ;
1386: LD_ADDR_EXP 32
1390: PUSH
1391: EMPTY
1392: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1393: LD_ADDR_EXP 15
1397: PUSH
1398: LD_INT 0
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PUSH
1408: LD_EXP 16
1412: PUSH
1413: LD_INT 1
1415: PLUS
1416: ARRAY
1417: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1418: LD_ADDR_EXP 17
1422: PUSH
1423: LD_INT 0
1425: PUSH
1426: LD_INT 1
1428: PUSH
1429: LD_INT 63000
1431: PUSH
1432: LD_INT 126000
1434: PUSH
1435: LD_INT 189000
1437: PUSH
1438: LD_INT 252000
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: PUSH
1449: LD_EXP 55
1453: PUSH
1454: LD_INT 1
1456: PLUS
1457: ARRAY
1458: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1459: LD_ADDR_EXP 40
1463: PUSH
1464: LD_INT 7
1466: PUSH
1467: LD_INT 8
1469: PUSH
1470: LD_INT 9
1472: PUSH
1473: LD_INT 10
1475: PUSH
1476: LD_INT 11
1478: PUSH
1479: LD_INT 12
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: ST_TO_ADDR
// end ;
1490: LD_VAR 0 1
1494: RET
// function init_map ; var i , j ; begin
1495: LD_INT 0
1497: PPUSH
1498: PPUSH
1499: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1500: LD_ADDR_EXP 28
1504: PUSH
1505: LD_INT 12
1507: PUSH
1508: LD_INT 4
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 45
1517: PUSH
1518: LD_INT 81
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: LD_INT 116
1527: PUSH
1528: LD_INT 195
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 142
1537: PUSH
1538: LD_INT 4
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: LD_INT 201
1547: PUSH
1548: LD_INT 102
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: LD_INT 234
1557: PUSH
1558: LD_INT 194
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1573: LD_ADDR_EXP 29
1577: PUSH
1578: LD_INT 12
1580: PUSH
1581: LD_INT 4
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: PUSH
1588: LD_INT 16
1590: PUSH
1591: LD_INT 25
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 45
1604: PUSH
1605: LD_INT 81
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 60
1614: PUSH
1615: LD_INT 102
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 116
1628: PUSH
1629: LD_INT 195
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 92
1638: PUSH
1639: LD_INT 167
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 142
1652: PUSH
1653: LD_INT 4
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 167
1662: PUSH
1663: LD_INT 24
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 201
1676: PUSH
1677: LD_INT 102
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 190
1686: PUSH
1687: LD_INT 77
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 234
1700: PUSH
1701: LD_INT 194
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 237
1710: PUSH
1711: LD_INT 171
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: LIST
1726: LIST
1727: LIST
1728: LIST
1729: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1730: LD_ADDR_EXP 30
1734: PUSH
1735: LD_INT 10
1737: PUSH
1738: LD_INT 10
1740: PUSH
1741: EMPTY
1742: LIST
1743: LIST
1744: PUSH
1745: LD_INT 51
1747: PUSH
1748: LD_INT 93
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: PUSH
1755: LD_INT 102
1757: PUSH
1758: LD_INT 187
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PUSH
1765: LD_INT 158
1767: PUSH
1768: LD_INT 6
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 203
1777: PUSH
1778: LD_INT 93
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PUSH
1785: LD_INT 252
1787: PUSH
1788: LD_INT 194
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1803: LD_ADDR_EXP 31
1807: PUSH
1808: LD_INT 10
1810: PUSH
1811: LD_INT 10
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 36
1820: PUSH
1821: LD_INT 10
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 51
1834: PUSH
1835: LD_INT 93
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 47
1844: PUSH
1845: LD_INT 72
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 102
1858: PUSH
1859: LD_INT 187
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 93
1868: PUSH
1869: LD_INT 175
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: PUSH
1880: LD_INT 158
1882: PUSH
1883: LD_INT 6
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 147
1892: PUSH
1893: LD_INT 5
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: LD_INT 203
1906: PUSH
1907: LD_INT 93
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 173
1916: PUSH
1917: LD_INT 71
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 252
1930: PUSH
1931: LD_INT 194
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PUSH
1938: LD_INT 243
1940: PUSH
1941: LD_INT 177
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1960: LD_ADDR_EXP 25
1964: PUSH
1965: LD_INT 23
1967: PUSH
1968: LD_INT 15
1970: PUSH
1971: LD_INT 2
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 56
1981: PUSH
1982: LD_INT 85
1984: PUSH
1985: LD_INT 1
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 110
1995: PUSH
1996: LD_INT 177
1998: PUSH
1999: LD_INT 3
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 157
2009: PUSH
2010: LD_INT 13
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 187
2023: PUSH
2024: LD_INT 87
2026: PUSH
2027: LD_INT 5
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_INT 231
2037: PUSH
2038: LD_INT 181
2040: PUSH
2041: LD_INT 5
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
2057: LD_ADDR_EXP 27
2061: PUSH
2062: LD_INT 30
2064: PUSH
2065: LD_INT 22
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 58
2074: PUSH
2075: LD_INT 82
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 113
2084: PUSH
2085: LD_INT 180
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 151
2094: PUSH
2095: LD_INT 24
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 183
2104: PUSH
2105: LD_INT 90
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 223
2114: PUSH
2115: LD_INT 180
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
2130: LD_ADDR_EXP 26
2134: PUSH
2135: LD_INT 33
2137: PUSH
2138: LD_INT 12
2140: PUSH
2141: LD_INT 5
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 42
2151: PUSH
2152: LD_INT 29
2154: PUSH
2155: LD_INT 4
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 36
2165: PUSH
2166: LD_INT 20
2168: PUSH
2169: LD_INT 4
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: LIST
2181: PUSH
2182: LD_INT 72
2184: PUSH
2185: LD_INT 91
2187: PUSH
2188: LD_INT 4
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 65
2198: PUSH
2199: LD_INT 78
2201: PUSH
2202: LD_INT 4
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 75
2212: PUSH
2213: LD_INT 100
2215: PUSH
2216: LD_INT 3
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: EMPTY
2225: LIST
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 102
2231: PUSH
2232: LD_INT 165
2234: PUSH
2235: LD_INT 3
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: LIST
2242: PUSH
2243: LD_INT 122
2245: PUSH
2246: LD_INT 176
2248: PUSH
2249: LD_INT 4
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: LD_INT 120
2259: PUSH
2260: LD_INT 184
2262: PUSH
2263: LD_INT 4
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: LIST
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 134
2278: PUSH
2279: LD_INT 16
2281: PUSH
2282: LD_INT 1
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: LIST
2289: PUSH
2290: LD_INT 132
2292: PUSH
2293: LD_INT 5
2295: PUSH
2296: LD_INT 1
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 157
2306: PUSH
2307: LD_INT 27
2309: PUSH
2310: LD_INT 5
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: PUSH
2323: LD_INT 172
2325: PUSH
2326: LD_INT 77
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: PUSH
2337: LD_INT 175
2339: PUSH
2340: LD_INT 96
2342: PUSH
2343: LD_INT 1
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: LIST
2350: PUSH
2351: LD_INT 192
2353: PUSH
2354: LD_INT 104
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: LIST
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: LIST
2369: PUSH
2370: LD_INT 216
2372: PUSH
2373: LD_INT 179
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: LIST
2383: PUSH
2384: LD_INT 208
2386: PUSH
2387: LD_INT 160
2389: PUSH
2390: LD_INT 2
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: LIST
2397: PUSH
2398: LD_INT 208
2400: PUSH
2401: LD_INT 171
2403: PUSH
2404: LD_INT 2
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: LIST
2411: PUSH
2412: EMPTY
2413: LIST
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: LIST
2424: ST_TO_ADDR
// for i = 1 to 6 do
2425: LD_ADDR_VAR 0 2
2429: PUSH
2430: DOUBLE
2431: LD_INT 1
2433: DEC
2434: ST_TO_ADDR
2435: LD_INT 6
2437: PUSH
2438: FOR_TO
2439: IFFALSE 2536
// if def_extra_oil_deposits then
2441: LD_EXP 48
2445: IFFALSE 2497
// for j in extra_oil_deposits_locations [ i ] do
2447: LD_ADDR_VAR 0 3
2451: PUSH
2452: LD_EXP 29
2456: PUSH
2457: LD_VAR 0 2
2461: ARRAY
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2493
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2466: LD_VAR 0 3
2470: PUSH
2471: LD_INT 1
2473: ARRAY
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 2
2482: ARRAY
2483: PPUSH
2484: LD_INT 2
2486: PPUSH
2487: CALL_OW 62
2491: GO 2463
2493: POP
2494: POP
2495: GO 2534
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2497: LD_EXP 28
2501: PUSH
2502: LD_VAR 0 2
2506: ARRAY
2507: PUSH
2508: LD_INT 1
2510: ARRAY
2511: PPUSH
2512: LD_EXP 28
2516: PUSH
2517: LD_VAR 0 2
2521: ARRAY
2522: PUSH
2523: LD_INT 2
2525: ARRAY
2526: PPUSH
2527: LD_INT 2
2529: PPUSH
2530: CALL_OW 62
2534: GO 2438
2536: POP
2537: POP
// if def_extra_sib_deposits then
2538: LD_EXP 49
2542: IFFALSE 2661
// for i = 1 to 6 do
2544: LD_ADDR_VAR 0 2
2548: PUSH
2549: DOUBLE
2550: LD_INT 1
2552: DEC
2553: ST_TO_ADDR
2554: LD_INT 6
2556: PUSH
2557: FOR_TO
2558: IFFALSE 2659
// if def_extra_sib_deposits = 2 then
2560: LD_EXP 49
2564: PUSH
2565: LD_INT 2
2567: EQUAL
2568: IFFALSE 2620
// for j in extra_sib_deposits_locations [ i ] do
2570: LD_ADDR_VAR 0 3
2574: PUSH
2575: LD_EXP 31
2579: PUSH
2580: LD_VAR 0 2
2584: ARRAY
2585: PUSH
2586: FOR_IN
2587: IFFALSE 2616
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2589: LD_VAR 0 3
2593: PUSH
2594: LD_INT 1
2596: ARRAY
2597: PPUSH
2598: LD_VAR 0 3
2602: PUSH
2603: LD_INT 2
2605: ARRAY
2606: PPUSH
2607: LD_INT 3
2609: PPUSH
2610: CALL_OW 62
2614: GO 2586
2616: POP
2617: POP
2618: GO 2657
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2620: LD_EXP 30
2624: PUSH
2625: LD_VAR 0 2
2629: ARRAY
2630: PUSH
2631: LD_INT 1
2633: ARRAY
2634: PPUSH
2635: LD_EXP 30
2639: PUSH
2640: LD_VAR 0 2
2644: ARRAY
2645: PUSH
2646: LD_INT 2
2648: ARRAY
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 62
2657: GO 2557
2659: POP
2660: POP
// end ;
2661: LD_VAR 0 1
2665: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2666: LD_INT 0
2668: PPUSH
2669: PPUSH
2670: PPUSH
// if not Team_Game then
2671: LD_EXP 23
2675: NOT
2676: IFFALSE 2774
// begin for i = 1 to 8 do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: DOUBLE
2684: LD_INT 1
2686: DEC
2687: ST_TO_ADDR
2688: LD_INT 8
2690: PUSH
2691: FOR_TO
2692: IFFALSE 2770
// for j = 1 to 8 do
2694: LD_ADDR_VAR 0 3
2698: PUSH
2699: DOUBLE
2700: LD_INT 1
2702: DEC
2703: ST_TO_ADDR
2704: LD_INT 8
2706: PUSH
2707: FOR_TO
2708: IFFALSE 2766
// if i <> j then
2710: LD_VAR 0 2
2714: PUSH
2715: LD_VAR 0 3
2719: NONEQUAL
2720: IFFALSE 2744
// SetAttitude ( i , j , att_neutral , true ) else
2722: LD_VAR 0 2
2726: PPUSH
2727: LD_VAR 0 3
2731: PPUSH
2732: LD_INT 0
2734: PPUSH
2735: LD_INT 1
2737: PPUSH
2738: CALL_OW 80
2742: GO 2764
// SetAttitude ( i , j , att_friend , true ) ;
2744: LD_VAR 0 2
2748: PPUSH
2749: LD_VAR 0 3
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: CALL_OW 80
2764: GO 2707
2766: POP
2767: POP
2768: GO 2691
2770: POP
2771: POP
// end else
2772: GO 2949
// begin if def_shared_vision then
2774: LD_EXP 50
2778: IFFALSE 2843
// begin for i in Teams do
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: LD_EXP 20
2789: PUSH
2790: FOR_IN
2791: IFFALSE 2841
// for j = 2 to i do
2793: LD_ADDR_VAR 0 3
2797: PUSH
2798: DOUBLE
2799: LD_INT 2
2801: DEC
2802: ST_TO_ADDR
2803: LD_VAR 0 2
2807: PUSH
2808: FOR_TO
2809: IFFALSE 2837
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2811: LD_VAR 0 2
2815: PUSH
2816: LD_VAR 0 3
2820: ARRAY
2821: PPUSH
2822: LD_VAR 0 2
2826: PUSH
2827: LD_INT 1
2829: ARRAY
2830: PPUSH
2831: CALL_OW 343
2835: GO 2808
2837: POP
2838: POP
2839: GO 2790
2841: POP
2842: POP
// end ; for i = 1 to 8 do
2843: LD_ADDR_VAR 0 2
2847: PUSH
2848: DOUBLE
2849: LD_INT 1
2851: DEC
2852: ST_TO_ADDR
2853: LD_INT 8
2855: PUSH
2856: FOR_TO
2857: IFFALSE 2947
// for j = 1 to 8 do
2859: LD_ADDR_VAR 0 3
2863: PUSH
2864: DOUBLE
2865: LD_INT 1
2867: DEC
2868: ST_TO_ADDR
2869: LD_INT 8
2871: PUSH
2872: FOR_TO
2873: IFFALSE 2943
// if Side_Teams [ i ] = Side_Teams [ j ] then
2875: LD_EXP 19
2879: PUSH
2880: LD_VAR 0 2
2884: ARRAY
2885: PUSH
2886: LD_EXP 19
2890: PUSH
2891: LD_VAR 0 3
2895: ARRAY
2896: EQUAL
2897: IFFALSE 2921
// SetAttitude ( i , j , att_friend , true ) else
2899: LD_VAR 0 2
2903: PPUSH
2904: LD_VAR 0 3
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: LD_INT 1
2914: PPUSH
2915: CALL_OW 80
2919: GO 2941
// SetAttitude ( i , j , att_enemy , true ) ;
2921: LD_VAR 0 2
2925: PPUSH
2926: LD_VAR 0 3
2930: PPUSH
2931: LD_INT 2
2933: PPUSH
2934: LD_INT 1
2936: PPUSH
2937: CALL_OW 80
2941: GO 2872
2943: POP
2944: POP
2945: GO 2856
2947: POP
2948: POP
// end ; end ;
2949: LD_VAR 0 1
2953: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2954: LD_INT 0
2956: PPUSH
2957: PPUSH
2958: PPUSH
2959: PPUSH
// result := [ ] ;
2960: LD_ADDR_VAR 0 7
2964: PUSH
2965: EMPTY
2966: ST_TO_ADDR
// for i := 1 to count do
2967: LD_ADDR_VAR 0 8
2971: PUSH
2972: DOUBLE
2973: LD_INT 1
2975: DEC
2976: ST_TO_ADDR
2977: LD_VAR 0 1
2981: PUSH
2982: FOR_TO
2983: IFFALSE 3401
// begin uc_direction := Rand ( 0 , 5 ) ;
2985: LD_ADDR_OWVAR 24
2989: PUSH
2990: LD_INT 0
2992: PPUSH
2993: LD_INT 5
2995: PPUSH
2996: CALL_OW 12
3000: ST_TO_ADDR
// if commander then
3001: LD_LOC 1
3005: IFFALSE 3114
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3007: LD_ADDR_OWVAR 26
3011: PUSH
3012: LD_OWVAR 19
3016: PUSH
3017: LD_OWVAR 20
3021: ARRAY
3022: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3023: LD_INT 1
3025: PPUSH
3026: LD_INT 2
3028: PPUSH
3029: CALL_OW 12
3033: PPUSH
3034: LD_VAR 0 2
3038: PPUSH
3039: LD_EXP 6
3043: PUSH
3044: LD_INT 2
3046: PLUS
3047: PPUSH
3048: CALL_OW 380
// hc_importance := 105 ;
3052: LD_ADDR_OWVAR 32
3056: PUSH
3057: LD_INT 105
3059: ST_TO_ADDR
// commander := false ;
3060: LD_ADDR_LOC 1
3064: PUSH
3065: LD_INT 0
3067: ST_TO_ADDR
// if Multiplayer then
3068: LD_OWVAR 4
3072: IFFALSE 3112
// begin hc_gallery := MULTIAVATARS ;
3074: LD_ADDR_OWVAR 33
3078: PUSH
3079: LD_STRING MULTIAVATARS
3081: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3082: LD_ADDR_OWVAR 34
3086: PUSH
3087: LD_OWVAR 20
3091: PPUSH
3092: CALL_OW 525
3096: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3097: LD_ADDR_OWVAR 27
3101: PUSH
3102: LD_OWVAR 20
3106: PPUSH
3107: CALL_OW 526
3111: ST_TO_ADDR
// end ; end else
3112: GO 3177
// begin hc_name :=  ;
3114: LD_ADDR_OWVAR 26
3118: PUSH
3119: LD_STRING 
3121: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 2
3127: PPUSH
3128: CALL_OW 12
3132: PPUSH
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_EXP 6
3142: PPUSH
3143: CALL_OW 380
// hc_importance := 0 ;
3147: LD_ADDR_OWVAR 32
3151: PUSH
3152: LD_INT 0
3154: ST_TO_ADDR
// if Multiplayer then
3155: LD_OWVAR 4
3159: IFFALSE 3177
// begin hc_gallery :=  ;
3161: LD_ADDR_OWVAR 33
3165: PUSH
3166: LD_STRING 
3168: ST_TO_ADDR
// hc_face_number := 0 ;
3169: LD_ADDR_OWVAR 34
3173: PUSH
3174: LD_INT 0
3176: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3177: LD_ADDR_VAR 0 10
3181: PUSH
3182: CALL_OW 44
3186: ST_TO_ADDR
// if global_defined then
3187: LD_LOC 3
3191: IFFALSE 3331
// begin if ( cl = class_soldier ) then
3193: LD_VAR 0 2
3197: PUSH
3198: LD_INT 1
3200: EQUAL
3201: IFFALSE 3221
// j := i + soldiers_created else
3203: LD_ADDR_VAR 0 9
3207: PUSH
3208: LD_VAR 0 8
3212: PUSH
3213: LD_LOC 4
3217: PLUS
3218: ST_TO_ADDR
3219: GO 3231
// j := i ;
3221: LD_ADDR_VAR 0 9
3225: PUSH
3226: LD_VAR 0 8
3230: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3231: LD_LOC 2
3235: PUSH
3236: LD_VAR 0 2
3240: ARRAY
3241: PUSH
3242: LD_VAR 0 9
3246: ARRAY
3247: PPUSH
3248: LD_VAR 0 10
3252: PPUSH
3253: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3257: LD_VAR 0 10
3261: PPUSH
3262: LD_INT 2
3264: PPUSH
3265: LD_LOC 2
3269: PUSH
3270: LD_VAR 0 2
3274: ARRAY
3275: PUSH
3276: LD_VAR 0 9
3280: ARRAY
3281: PPUSH
3282: LD_INT 2
3284: PPUSH
3285: CALL_OW 260
3289: PPUSH
3290: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3294: LD_VAR 0 10
3298: PPUSH
3299: LD_INT 1
3301: PPUSH
3302: LD_LOC 2
3306: PUSH
3307: LD_VAR 0 2
3311: ARRAY
3312: PUSH
3313: LD_VAR 0 9
3317: ARRAY
3318: PPUSH
3319: LD_INT 1
3321: PPUSH
3322: CALL_OW 260
3326: PPUSH
3327: CALL_OW 239
// end ; if building then
3331: LD_VAR 0 6
3335: IFFALSE 3353
// PlaceHumanInUnit ( un , building ) else
3337: LD_VAR 0 10
3341: PPUSH
3342: LD_VAR 0 6
3346: PPUSH
3347: CALL_OW 52
3351: GO 3380
// PlaceUnitXYR ( un , x , y , r , false ) ;
3353: LD_VAR 0 10
3357: PPUSH
3358: LD_VAR 0 3
3362: PPUSH
3363: LD_VAR 0 4
3367: PPUSH
3368: LD_VAR 0 5
3372: PPUSH
3373: LD_INT 0
3375: PPUSH
3376: CALL_OW 50
// result := result ^ [ un ] ;
3380: LD_ADDR_VAR 0 7
3384: PUSH
3385: LD_VAR 0 7
3389: PUSH
3390: LD_VAR 0 10
3394: PUSH
3395: EMPTY
3396: LIST
3397: ADD
3398: ST_TO_ADDR
// end ;
3399: GO 2982
3401: POP
3402: POP
// if not global_defined then
3403: LD_LOC 3
3407: NOT
3408: IFFALSE 3486
// if ( global_units >= cl ) then
3410: LD_LOC 2
3414: PUSH
3415: LD_VAR 0 2
3419: GREATEREQUAL
3420: IFFALSE 3461
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3422: LD_ADDR_LOC 2
3426: PUSH
3427: LD_LOC 2
3431: PPUSH
3432: LD_VAR 0 2
3436: PPUSH
3437: LD_LOC 2
3441: PUSH
3442: LD_VAR 0 2
3446: ARRAY
3447: PUSH
3448: LD_VAR 0 7
3452: ADD
3453: PPUSH
3454: CALL_OW 1
3458: ST_TO_ADDR
3459: GO 3486
// global_units := Replace ( global_units , cl , result ) ;
3461: LD_ADDR_LOC 2
3465: PUSH
3466: LD_LOC 2
3470: PPUSH
3471: LD_VAR 0 2
3475: PPUSH
3476: LD_VAR 0 7
3480: PPUSH
3481: CALL_OW 1
3485: ST_TO_ADDR
// end ;
3486: LD_VAR 0 7
3490: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3491: LD_INT 0
3493: PPUSH
3494: PPUSH
3495: PPUSH
3496: PPUSH
3497: PPUSH
3498: PPUSH
3499: PPUSH
3500: PPUSH
3501: PPUSH
// pos := Side_Positions [ side ] ;
3502: LD_ADDR_VAR 0 3
3506: PUSH
3507: LD_EXP 21
3511: PUSH
3512: LD_VAR 0 1
3516: ARRAY
3517: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3518: LD_ADDR_OWVAR 21
3522: PUSH
3523: LD_EXP 22
3527: PUSH
3528: LD_VAR 0 1
3532: ARRAY
3533: ST_TO_ADDR
// uc_side := side ;
3534: LD_ADDR_OWVAR 20
3538: PUSH
3539: LD_VAR 0 1
3543: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3544: LD_ADDR_VAR 0 4
3548: PUSH
3549: LD_EXP 25
3553: PUSH
3554: LD_VAR 0 3
3558: ARRAY
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3564: LD_ADDR_VAR 0 5
3568: PUSH
3569: LD_EXP 25
3573: PUSH
3574: LD_VAR 0 3
3578: ARRAY
3579: PUSH
3580: LD_INT 2
3582: ARRAY
3583: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3584: LD_ADDR_VAR 0 6
3588: PUSH
3589: LD_EXP 25
3593: PUSH
3594: LD_VAR 0 3
3598: ARRAY
3599: PUSH
3600: LD_INT 3
3602: ARRAY
3603: ST_TO_ADDR
// if is_depot then
3604: LD_EXP 3
3608: IFFALSE 3741
// begin bc_type = b_depot ;
3610: LD_ADDR_OWVAR 42
3614: PUSH
3615: LD_INT 0
3617: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3618: LD_ADDR_VAR 0 10
3622: PUSH
3623: LD_VAR 0 4
3627: PPUSH
3628: LD_VAR 0 5
3632: PPUSH
3633: LD_VAR 0 6
3637: PPUSH
3638: CALL_OW 47
3642: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3643: LD_VAR 0 10
3647: PPUSH
3648: LD_STRING @
3650: PUSH
3651: LD_VAR 0 1
3655: STR
3656: PPUSH
3657: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3661: LD_VAR 0 10
3665: PPUSH
3666: CALL_OW 274
3670: PPUSH
3671: LD_INT 1
3673: PPUSH
3674: LD_EXP 8
3678: PUSH
3679: LD_INT 1
3681: ARRAY
3682: PPUSH
3683: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3687: LD_VAR 0 10
3691: PPUSH
3692: CALL_OW 274
3696: PPUSH
3697: LD_INT 2
3699: PPUSH
3700: LD_EXP 8
3704: PUSH
3705: LD_INT 2
3707: ARRAY
3708: PPUSH
3709: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3713: LD_VAR 0 10
3717: PPUSH
3718: CALL_OW 274
3722: PPUSH
3723: LD_INT 3
3725: PPUSH
3726: LD_EXP 8
3730: PUSH
3731: LD_INT 3
3733: ARRAY
3734: PPUSH
3735: CALL_OW 277
// end else
3739: GO 3885
// begin for i := 1 to 3 do
3741: LD_ADDR_VAR 0 7
3745: PUSH
3746: DOUBLE
3747: LD_INT 1
3749: DEC
3750: ST_TO_ADDR
3751: LD_INT 3
3753: PUSH
3754: FOR_TO
3755: IFFALSE 3883
// begin r := starting_resources [ i ] ;
3757: LD_ADDR_VAR 0 8
3761: PUSH
3762: LD_EXP 8
3766: PUSH
3767: LD_VAR 0 7
3771: ARRAY
3772: ST_TO_ADDR
// while r >= 10 do
3773: LD_VAR 0 8
3777: PUSH
3778: LD_INT 10
3780: GREATEREQUAL
3781: IFFALSE 3881
// if r > 50 then
3783: LD_VAR 0 8
3787: PUSH
3788: LD_INT 50
3790: GREATER
3791: IFFALSE 3837
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3793: LD_VAR 0 7
3797: PPUSH
3798: LD_INT 5
3800: PPUSH
3801: LD_VAR 0 4
3805: PPUSH
3806: LD_VAR 0 5
3810: PPUSH
3811: LD_INT 4
3813: PPUSH
3814: LD_INT 0
3816: PPUSH
3817: CALL_OW 60
// r := r - 50 ;
3821: LD_ADDR_VAR 0 8
3825: PUSH
3826: LD_VAR 0 8
3830: PUSH
3831: LD_INT 50
3833: MINUS
3834: ST_TO_ADDR
// end else
3835: GO 3879
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3837: LD_VAR 0 7
3841: PPUSH
3842: LD_VAR 0 8
3846: PUSH
3847: LD_INT 10
3849: DIV
3850: PPUSH
3851: LD_VAR 0 4
3855: PPUSH
3856: LD_VAR 0 5
3860: PPUSH
3861: LD_INT 4
3863: PPUSH
3864: LD_INT 0
3866: PPUSH
3867: CALL_OW 60
// r := 0 ;
3871: LD_ADDR_VAR 0 8
3875: PUSH
3876: LD_INT 0
3878: ST_TO_ADDR
// end ;
3879: GO 3773
// end ;
3881: GO 3754
3883: POP
3884: POP
// end ; for r in starting_crates do
3885: LD_ADDR_VAR 0 8
3889: PUSH
3890: LD_EXP 7
3894: PUSH
3895: FOR_IN
3896: IFFALSE 3928
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3898: LD_INT 1
3900: PPUSH
3901: LD_INT 5
3903: PPUSH
3904: LD_VAR 0 4
3908: PPUSH
3909: LD_VAR 0 5
3913: PPUSH
3914: LD_VAR 0 8
3918: PPUSH
3919: LD_INT 0
3921: PPUSH
3922: CALL_OW 60
3926: GO 3895
3928: POP
3929: POP
// if def_morale_flags then
3930: LD_EXP 51
3934: IFFALSE 4073
// begin x := start_def [ pos ] [ 1 ] ;
3936: LD_ADDR_VAR 0 4
3940: PUSH
3941: LD_EXP 27
3945: PUSH
3946: LD_VAR 0 3
3950: ARRAY
3951: PUSH
3952: LD_INT 1
3954: ARRAY
3955: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3956: LD_ADDR_VAR 0 5
3960: PUSH
3961: LD_EXP 27
3965: PUSH
3966: LD_VAR 0 3
3970: ARRAY
3971: PUSH
3972: LD_INT 2
3974: ARRAY
3975: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3976: LD_VAR 0 4
3980: PPUSH
3981: LD_VAR 0 5
3985: PPUSH
3986: LD_INT 12
3988: PPUSH
3989: LD_INT 2
3991: PPUSH
3992: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3996: LD_ADDR_EXP 32
4000: PUSH
4001: LD_EXP 32
4005: PUSH
4006: LD_VAR 0 1
4010: PPUSH
4011: LD_VAR 0 4
4015: PPUSH
4016: LD_VAR 0 5
4020: PPUSH
4021: LD_INT 1
4023: PUSH
4024: LD_INT 100
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: PUSH
4031: LD_INT 2
4033: PUSH
4034: LD_INT 50
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PUSH
4041: LD_INT 3
4043: PUSH
4044: LD_INT 20
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 20
4053: PUSH
4054: LD_INT 100
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: PPUSH
4067: CALL_OW 418
4071: ADD
4072: ST_TO_ADDR
// end ; commander := true ;
4073: LD_ADDR_LOC 1
4077: PUSH
4078: LD_INT 1
4080: ST_TO_ADDR
// soldiers_created := 0 ;
4081: LD_ADDR_LOC 4
4085: PUSH
4086: LD_INT 0
4088: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4089: LD_ADDR_VAR 0 7
4093: PUSH
4094: DOUBLE
4095: LD_INT 1
4097: DEC
4098: ST_TO_ADDR
4099: LD_EXP 4
4103: PUSH
4104: FOR_TO
4105: IFFALSE 4258
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4107: LD_ADDR_VAR 0 4
4111: PUSH
4112: LD_EXP 26
4116: PUSH
4117: LD_VAR 0 3
4121: ARRAY
4122: PUSH
4123: LD_VAR 0 7
4127: ARRAY
4128: PUSH
4129: LD_INT 1
4131: ARRAY
4132: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4133: LD_ADDR_VAR 0 5
4137: PUSH
4138: LD_EXP 26
4142: PUSH
4143: LD_VAR 0 3
4147: ARRAY
4148: PUSH
4149: LD_VAR 0 7
4153: ARRAY
4154: PUSH
4155: LD_INT 2
4157: ARRAY
4158: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4159: LD_ADDR_VAR 0 6
4163: PUSH
4164: LD_EXP 26
4168: PUSH
4169: LD_VAR 0 3
4173: ARRAY
4174: PUSH
4175: LD_VAR 0 7
4179: ARRAY
4180: PUSH
4181: LD_INT 3
4183: ARRAY
4184: ST_TO_ADDR
// bc_type := b_breastwork ;
4185: LD_ADDR_OWVAR 42
4189: PUSH
4190: LD_INT 31
4192: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4193: LD_ADDR_VAR 0 9
4197: PUSH
4198: LD_VAR 0 4
4202: PPUSH
4203: LD_VAR 0 5
4207: PPUSH
4208: LD_VAR 0 6
4212: PPUSH
4213: CALL_OW 47
4217: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4218: LD_INT 1
4220: PPUSH
4221: LD_INT 1
4223: PPUSH
4224: LD_INT 0
4226: PPUSH
4227: LD_INT 0
4229: PPUSH
4230: LD_INT 0
4232: PPUSH
4233: LD_VAR 0 9
4237: PPUSH
4238: CALL 2954 0 6
// soldiers_created := soldiers_created + 1 ;
4242: LD_ADDR_LOC 4
4246: PUSH
4247: LD_LOC 4
4251: PUSH
4252: LD_INT 1
4254: PLUS
4255: ST_TO_ADDR
// end ;
4256: GO 4104
4258: POP
4259: POP
// x := start_def [ pos ] [ 1 ] ;
4260: LD_ADDR_VAR 0 4
4264: PUSH
4265: LD_EXP 27
4269: PUSH
4270: LD_VAR 0 3
4274: ARRAY
4275: PUSH
4276: LD_INT 1
4278: ARRAY
4279: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4280: LD_ADDR_VAR 0 5
4284: PUSH
4285: LD_EXP 27
4289: PUSH
4290: LD_VAR 0 3
4294: ARRAY
4295: PUSH
4296: LD_INT 2
4298: ARRAY
4299: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4300: LD_LOC 8
4304: PUSH
4305: LD_EXP 4
4309: MINUS
4310: PPUSH
4311: LD_INT 1
4313: PPUSH
4314: LD_VAR 0 4
4318: PPUSH
4319: LD_VAR 0 5
4323: PPUSH
4324: LD_INT 5
4326: PPUSH
4327: LD_INT 0
4329: PPUSH
4330: CALL 2954 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4334: LD_LOC 5
4338: PPUSH
4339: LD_INT 2
4341: PPUSH
4342: LD_VAR 0 4
4346: PPUSH
4347: LD_VAR 0 5
4351: PPUSH
4352: LD_INT 5
4354: PPUSH
4355: LD_INT 0
4357: PPUSH
4358: CALL 2954 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4362: LD_LOC 7
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: LD_VAR 0 4
4374: PPUSH
4375: LD_VAR 0 5
4379: PPUSH
4380: LD_INT 5
4382: PPUSH
4383: LD_INT 0
4385: PPUSH
4386: CALL 2954 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4390: LD_LOC 6
4394: PPUSH
4395: LD_INT 4
4397: PPUSH
4398: LD_VAR 0 4
4402: PPUSH
4403: LD_VAR 0 5
4407: PPUSH
4408: LD_INT 5
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL 2954 0 6
// if def_siberite_detection then
4418: LD_EXP 52
4422: IFFALSE 4439
// SetTech ( tech_SibDet , side , state_researched ) ;
4424: LD_INT 20
4426: PPUSH
4427: LD_VAR 0 1
4431: PPUSH
4432: LD_INT 2
4434: PPUSH
4435: CALL_OW 322
// if def_siberite_bomb = 1 then
4439: LD_EXP 55
4443: PUSH
4444: LD_INT 1
4446: EQUAL
4447: IFFALSE 4481
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4449: LD_INT 25
4451: PPUSH
4452: LD_VAR 0 1
4456: PPUSH
4457: LD_INT 1
4459: PPUSH
4460: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4464: LD_INT 73
4466: PPUSH
4467: LD_VAR 0 1
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL_OW 322
// end else
4479: GO 4511
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4481: LD_INT 25
4483: PPUSH
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4496: LD_INT 73
4498: PPUSH
4499: LD_VAR 0 1
4503: PPUSH
4504: LD_INT 0
4506: PPUSH
4507: CALL_OW 322
// end ; global_defined := true ;
4511: LD_ADDR_LOC 3
4515: PUSH
4516: LD_INT 1
4518: ST_TO_ADDR
// end ;
4519: LD_VAR 0 2
4523: RET
// every 0 0$1 do
4524: GO 4526
4526: DISABLE
// if ( def_siberite_bomb > 1 ) then
4527: LD_EXP 55
4531: PUSH
4532: LD_INT 1
4534: GREATER
4535: IFFALSE 4550
// begin wait ( siberite_bomb_Delay ) ;
4537: LD_EXP 17
4541: PPUSH
4542: CALL_OW 67
// EnableSibFiss ;
4546: CALL 4551 0 0
// end ;
4550: END
// function EnableSibFiss ; var i ; begin
4551: LD_INT 0
4553: PPUSH
4554: PPUSH
// for i := 1 to 8 do
4555: LD_ADDR_VAR 0 2
4559: PUSH
4560: DOUBLE
4561: LD_INT 1
4563: DEC
4564: ST_TO_ADDR
4565: LD_INT 8
4567: PUSH
4568: FOR_TO
4569: IFFALSE 4615
// if Side_Positions [ i ] then
4571: LD_EXP 21
4575: PUSH
4576: LD_VAR 0 2
4580: ARRAY
4581: IFFALSE 4613
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4583: LD_INT 25
4585: PPUSH
4586: LD_VAR 0 2
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4598: LD_INT 73
4600: PPUSH
4601: LD_VAR 0 2
4605: PPUSH
4606: LD_INT 1
4608: PPUSH
4609: CALL_OW 322
// end ;
4613: GO 4568
4615: POP
4616: POP
// end ;
4617: LD_VAR 0 1
4621: RET
// function prepare_sides ; var i ; begin
4622: LD_INT 0
4624: PPUSH
4625: PPUSH
// global_units := [ ] ;
4626: LD_ADDR_LOC 2
4630: PUSH
4631: EMPTY
4632: ST_TO_ADDR
// global_defined := false ;
4633: LD_ADDR_LOC 3
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// CountClassMembers ;
4641: CALL 4691 0 0
// for i := 1 to 8 do
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: DOUBLE
4651: LD_INT 1
4653: DEC
4654: ST_TO_ADDR
4655: LD_INT 8
4657: PUSH
4658: FOR_TO
4659: IFFALSE 4684
// if Side_Positions [ i ] then
4661: LD_EXP 21
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: IFFALSE 4682
// prepare_side ( i ) ;
4673: LD_VAR 0 2
4677: PPUSH
4678: CALL 3491 0 1
4682: GO 4658
4684: POP
4685: POP
// end ;
4686: LD_VAR 0 1
4690: RET
// function CountClassMembers ; var Mode ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
// if No_Mechs then
4695: LD_EXP 57
4699: IFFALSE 4711
// Mode := 2 else
4701: LD_ADDR_VAR 0 2
4705: PUSH
4706: LD_INT 2
4708: ST_TO_ADDR
4709: GO 4719
// Mode := 1 ;
4711: LD_ADDR_VAR 0 2
4715: PUSH
4716: LD_INT 1
4718: ST_TO_ADDR
// neng := number_of_people ;
4719: LD_ADDR_LOC 5
4723: PUSH
4724: LD_EXP 5
4728: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4729: LD_ADDR_LOC 8
4733: PUSH
4734: LD_LOC 5
4738: PUSH
4739: LD_INT 4
4741: PUSH
4742: LD_INT 3
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: LD_VAR 0 2
4753: ARRAY
4754: DIV
4755: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4756: LD_LOC 8
4760: PUSH
4761: LD_EXP 4
4765: LESS
4766: IFFALSE 4778
// nsol := number_of_breastworks ;
4768: LD_ADDR_LOC 8
4772: PUSH
4773: LD_EXP 4
4777: ST_TO_ADDR
// neng := neng - nsol ;
4778: LD_ADDR_LOC 5
4782: PUSH
4783: LD_LOC 5
4787: PUSH
4788: LD_LOC 8
4792: MINUS
4793: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4794: LD_ADDR_LOC 6
4798: PUSH
4799: LD_LOC 5
4803: PUSH
4804: LD_INT 3
4806: PUSH
4807: LD_INT 2
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: LD_VAR 0 2
4818: ARRAY
4819: DIV
4820: ST_TO_ADDR
// if ( nsci < 1 ) then
4821: LD_LOC 6
4825: PUSH
4826: LD_INT 1
4828: LESS
4829: IFFALSE 4839
// nsci := 1 ;
4831: LD_ADDR_LOC 6
4835: PUSH
4836: LD_INT 1
4838: ST_TO_ADDR
// neng := neng - nsci ;
4839: LD_ADDR_LOC 5
4843: PUSH
4844: LD_LOC 5
4848: PUSH
4849: LD_LOC 6
4853: MINUS
4854: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4855: LD_ADDR_LOC 7
4859: PUSH
4860: LD_LOC 5
4864: PUSH
4865: LD_INT 2
4867: DIV
4868: PUSH
4869: LD_INT 0
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_VAR 0 2
4880: ARRAY
4881: ST_TO_ADDR
// neng := neng - nmech ;
4882: LD_ADDR_LOC 5
4886: PUSH
4887: LD_LOC 5
4891: PUSH
4892: LD_LOC 7
4896: MINUS
4897: ST_TO_ADDR
// if ( neng < 1 ) then
4898: LD_LOC 5
4902: PUSH
4903: LD_INT 1
4905: LESS
4906: IFFALSE 4916
// neng := 1 ;
4908: LD_ADDR_LOC 5
4912: PUSH
4913: LD_INT 1
4915: ST_TO_ADDR
// end ;
4916: LD_VAR 0 1
4920: RET
// function Init_Win_Condition ; begin
4921: LD_INT 0
4923: PPUSH
// if Team_Game then
4924: LD_EXP 23
4928: IFFALSE 4935
// enable ( 98 ) else
4930: LD_INT 98
4932: ENABLE_MARKED
4933: GO 4938
// enable ( 99 ) ;
4935: LD_INT 99
4937: ENABLE_MARKED
// case Game_Type of 3 :
4938: LD_EXP 41
4942: PUSH
4943: LD_INT 3
4945: DOUBLE
4946: EQUAL
4947: IFTRUE 4951
4949: GO 4957
4951: POP
// enable ( 100 ) ; end ;
4952: LD_INT 100
4954: ENABLE_MARKED
4955: GO 4958
4957: POP
// end ;
4958: LD_VAR 0 1
4962: RET
// starting begin disable ( 98 ) ;
4963: LD_INT 98
4965: DISABLE_MARKED
// disable ( 99 ) ;
4966: LD_INT 99
4968: DISABLE_MARKED
// disable ( 400 ) ;
4969: LD_INT 400
4971: DISABLE_MARKED
// disable ( 401 ) ;
4972: LD_INT 401
4974: DISABLE_MARKED
// disable ( 600 ) ;
4975: LD_INT 600
4977: DISABLE_MARKED
// mp_selectmsg := true ;
4978: LD_ADDR_OWVAR 13
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4986: CALL 0 0 0
// init_map ;
4990: CALL 1495 0 0
// init_respawning ;
4994: CALL 6741 0 0
// set_shared_visions_and_alliances ;
4998: CALL 2666 0 0
// prepare_sides ;
5002: CALL 4622 0 0
// InitLimits ;
5006: CALL 11620 0 0
// ShowTimer ;
5010: CALL 12557 0 0
// music_nat := Side_Nations [ your_side ] ;
5014: LD_ADDR_OWVAR 71
5018: PUSH
5019: LD_EXP 22
5023: PUSH
5024: LD_OWVAR 2
5028: ARRAY
5029: ST_TO_ADDR
// if IAmSpec then
5030: CALL_OW 531
5034: IFFALSE 5070
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5036: LD_INT 0
5038: PPUSH
5039: LD_INT 0
5041: PPUSH
5042: LD_OWVAR 2
5046: PPUSH
5047: LD_INT 32767
5049: NEG
5050: PPUSH
5051: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5055: LD_INT 104
5057: PPUSH
5058: LD_INT 69
5060: PPUSH
5061: CALL_OW 86
// enable ( 400 ) ;
5065: LD_INT 400
5067: ENABLE_MARKED
// end else
5068: GO 5124
// begin ResetFog ;
5070: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5074: LD_EXP 27
5078: PUSH
5079: LD_EXP 21
5083: PUSH
5084: LD_OWVAR 2
5088: ARRAY
5089: ARRAY
5090: PUSH
5091: LD_INT 1
5093: ARRAY
5094: PPUSH
5095: LD_EXP 27
5099: PUSH
5100: LD_EXP 21
5104: PUSH
5105: LD_OWVAR 2
5109: ARRAY
5110: ARRAY
5111: PUSH
5112: LD_INT 2
5114: ARRAY
5115: PPUSH
5116: CALL_OW 86
// Init_Win_Condition ;
5120: CALL 4921 0 0
// end ; InitApeman ;
5124: CALL 5908 0 0
// if def_builduptime then
5128: LD_EXP 56
5132: IFFALSE 5138
// BeginBuildUp ;
5134: CALL 8787 0 0
// end ;
5138: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 and spect = 0 do
5139: LD_INT 22
5141: PUSH
5142: LD_OWVAR 2
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PUSH
5151: LD_INT 2
5153: PUSH
5154: LD_INT 21
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PUSH
5164: LD_INT 33
5166: PUSH
5167: LD_INT 3
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: PUSH
5174: LD_INT 33
5176: PUSH
5177: LD_INT 5
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PUSH
5184: LD_INT 30
5186: PUSH
5187: LD_INT 0
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 30
5196: PUSH
5197: LD_INT 1
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PPUSH
5216: CALL_OW 69
5220: PUSH
5221: LD_INT 0
5223: EQUAL
5224: PUSH
5225: LD_EXP 15
5229: PUSH
5230: LD_INT 0
5232: EQUAL
5233: AND
5234: IFFALSE 5248
5236: GO 5238
5238: DISABLE
// begin fogoff ( your_side ) ;
5239: LD_OWVAR 2
5243: PPUSH
5244: CALL_OW 344
// end ; end_of_file
5248: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5249: GO 5251
5251: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5252: LD_INT 4
5254: PPUSH
5255: LD_INT 5
5257: PPUSH
5258: CALL_OW 12
5262: PPUSH
5263: LD_INT 1
5265: PPUSH
5266: CALL_OW 57
// enable ;
5270: ENABLE
// end ;
5271: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5272: GO 5274
5274: DISABLE
5275: LD_INT 0
5277: PPUSH
5278: PPUSH
// begin case tick of 1 .. 1 1$0 :
5279: LD_OWVAR 1
5283: PUSH
5284: LD_INT 1
5286: DOUBLE
5287: GREATEREQUAL
5288: IFFALSE 5296
5290: LD_INT 2100
5292: DOUBLE
5293: LESSEQUAL
5294: IFTRUE 5298
5296: GO 5326
5298: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5299: LD_EXP 9
5303: PUSH
5304: LD_INT 100
5306: DIVREAL
5307: PUSH
5308: LD_INT 350
5310: PPUSH
5311: LD_INT 1050
5313: PPUSH
5314: CALL_OW 12
5318: MUL
5319: PPUSH
5320: CALL_OW 67
5324: GO 5628
5326: LD_INT 2100
5328: PUSH
5329: LD_INT 1
5331: PLUS
5332: DOUBLE
5333: GREATEREQUAL
5334: IFFALSE 5342
5336: LD_INT 10500
5338: DOUBLE
5339: LESSEQUAL
5340: IFTRUE 5344
5342: GO 5372
5344: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5345: LD_EXP 9
5349: PUSH
5350: LD_INT 100
5352: DIVREAL
5353: PUSH
5354: LD_INT 1050
5356: PPUSH
5357: LD_INT 1575
5359: PPUSH
5360: CALL_OW 12
5364: MUL
5365: PPUSH
5366: CALL_OW 67
5370: GO 5628
5372: LD_INT 10500
5374: PUSH
5375: LD_INT 1
5377: PLUS
5378: DOUBLE
5379: GREATEREQUAL
5380: IFFALSE 5388
5382: LD_INT 21000
5384: DOUBLE
5385: LESSEQUAL
5386: IFTRUE 5390
5388: GO 5418
5390: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5391: LD_EXP 9
5395: PUSH
5396: LD_INT 100
5398: DIVREAL
5399: PUSH
5400: LD_INT 1575
5402: PPUSH
5403: LD_INT 2100
5405: PPUSH
5406: CALL_OW 12
5410: MUL
5411: PPUSH
5412: CALL_OW 67
5416: GO 5628
5418: LD_INT 21000
5420: PUSH
5421: LD_INT 1
5423: PLUS
5424: DOUBLE
5425: GREATEREQUAL
5426: IFFALSE 5434
5428: LD_INT 42000
5430: DOUBLE
5431: LESSEQUAL
5432: IFTRUE 5436
5434: GO 5464
5436: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5437: LD_EXP 9
5441: PUSH
5442: LD_INT 100
5444: DIVREAL
5445: PUSH
5446: LD_INT 2100
5448: PPUSH
5449: LD_INT 2625
5451: PPUSH
5452: CALL_OW 12
5456: MUL
5457: PPUSH
5458: CALL_OW 67
5462: GO 5628
5464: LD_INT 42000
5466: PUSH
5467: LD_INT 1
5469: PLUS
5470: DOUBLE
5471: GREATEREQUAL
5472: IFFALSE 5480
5474: LD_INT 63000
5476: DOUBLE
5477: LESSEQUAL
5478: IFTRUE 5482
5480: GO 5510
5482: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5483: LD_EXP 9
5487: PUSH
5488: LD_INT 100
5490: DIVREAL
5491: PUSH
5492: LD_INT 2625
5494: PPUSH
5495: LD_INT 3150
5497: PPUSH
5498: CALL_OW 12
5502: MUL
5503: PPUSH
5504: CALL_OW 67
5508: GO 5628
5510: LD_INT 63000
5512: PUSH
5513: LD_INT 1
5515: PLUS
5516: DOUBLE
5517: GREATEREQUAL
5518: IFFALSE 5526
5520: LD_INT 105000
5522: DOUBLE
5523: LESSEQUAL
5524: IFTRUE 5528
5526: GO 5556
5528: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5529: LD_EXP 9
5533: PUSH
5534: LD_INT 100
5536: DIVREAL
5537: PUSH
5538: LD_INT 3150
5540: PPUSH
5541: LD_INT 3675
5543: PPUSH
5544: CALL_OW 12
5548: MUL
5549: PPUSH
5550: CALL_OW 67
5554: GO 5628
5556: LD_INT 105000
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: DOUBLE
5563: GREATEREQUAL
5564: IFFALSE 5572
5566: LD_INT 630000
5568: DOUBLE
5569: LESSEQUAL
5570: IFTRUE 5574
5572: GO 5602
5574: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5575: LD_EXP 9
5579: PUSH
5580: LD_INT 100
5582: DIVREAL
5583: PUSH
5584: LD_INT 3675
5586: PPUSH
5587: LD_INT 4200
5589: PPUSH
5590: CALL_OW 12
5594: MUL
5595: PPUSH
5596: CALL_OW 67
5600: GO 5628
5602: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5603: LD_EXP 9
5607: PUSH
5608: LD_INT 100
5610: DIVREAL
5611: PUSH
5612: LD_INT 4200
5614: PPUSH
5615: LD_INT 5250
5617: PPUSH
5618: CALL_OW 12
5622: MUL
5623: PPUSH
5624: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_INT 3
5635: PPUSH
5636: LD_INT 5
5638: PPUSH
5639: CALL_OW 12
5643: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5644: LD_ADDR_VAR 0 1
5648: PUSH
5649: LD_EXP 21
5653: PUSH
5654: LD_INT 0
5656: PUSH
5657: EMPTY
5658: LIST
5659: DIFF
5660: PUSH
5661: FOR_IN
5662: IFFALSE 5711
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_EXP 27
5673: PUSH
5674: LD_VAR 0 1
5678: ARRAY
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PPUSH
5684: LD_EXP 27
5688: PUSH
5689: LD_VAR 0 1
5693: ARRAY
5694: PUSH
5695: LD_INT 2
5697: ARRAY
5698: PPUSH
5699: LD_INT 20
5701: PPUSH
5702: LD_INT 1
5704: PPUSH
5705: CALL_OW 56
5709: GO 5661
5711: POP
5712: POP
// enable ;
5713: ENABLE
// end ; end_of_file
5714: PPOPN 2
5716: END
// every 20 20$00 trigger apemanNumber do
5717: LD_EXP 33
5721: IFFALSE 5754
5723: GO 5725
5725: DISABLE
// begin enable ;
5726: ENABLE
// if apeLevel >= 8 then
5727: LD_EXP 38
5731: PUSH
5732: LD_INT 8
5734: GREATEREQUAL
5735: IFFALSE 5740
// disable else
5737: DISABLE
5738: GO 5754
// apeLevel := apeLevel + 1 ;
5740: LD_ADDR_EXP 38
5744: PUSH
5745: LD_EXP 38
5749: PUSH
5750: LD_INT 1
5752: PLUS
5753: ST_TO_ADDR
// end ;
5754: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5755: LD_EXP 33
5759: PUSH
5760: LD_EXP 34
5764: LESS
5765: IFFALSE 5905
5767: GO 5769
5769: DISABLE
5770: LD_INT 0
5772: PPUSH
5773: PPUSH
5774: PPUSH
5775: PPUSH
// begin enable ;
5776: ENABLE
// for i := 1 to apemanPos do
5777: LD_ADDR_VAR 0 1
5781: PUSH
5782: DOUBLE
5783: LD_INT 1
5785: DEC
5786: ST_TO_ADDR
5787: LD_EXP 36
5791: PUSH
5792: FOR_TO
5793: IFFALSE 5903
// begin if apemanPlayerCount [ i ] then
5795: LD_EXP 37
5799: PUSH
5800: LD_VAR 0 1
5804: ARRAY
5805: IFFALSE 5901
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5807: LD_EXP 37
5811: PUSH
5812: LD_VAR 0 1
5816: ARRAY
5817: PUSH
5818: LD_EXP 36
5822: PUSH
5823: LD_VAR 0 1
5827: ARRAY
5828: GREATER
5829: IFFALSE 5901
// begin ape := PrepareApeman ;
5831: LD_ADDR_VAR 0 2
5835: PUSH
5836: CALL 6416 0 0
5840: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5841: LD_VAR 0 2
5845: PPUSH
5846: LD_EXP 39
5850: PUSH
5851: LD_VAR 0 1
5855: ARRAY
5856: PPUSH
5857: LD_INT 0
5859: PPUSH
5860: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5864: LD_ADDR_EXP 36
5868: PUSH
5869: LD_EXP 36
5873: PPUSH
5874: LD_VAR 0 1
5878: PPUSH
5879: LD_EXP 36
5883: PUSH
5884: LD_VAR 0 1
5888: ARRAY
5889: PUSH
5890: LD_VAR 0 2
5894: UNION
5895: PPUSH
5896: CALL_OW 1
5900: ST_TO_ADDR
// end ; end ; end ;
5901: GO 5792
5903: POP
5904: POP
// end ;
5905: PPOPN 4
5907: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5908: LD_INT 0
5910: PPUSH
5911: PPUSH
5912: PPUSH
5913: PPUSH
5914: PPUSH
5915: PPUSH
5916: PPUSH
// playersAmount := 0 ;
5917: LD_ADDR_VAR 0 3
5921: PUSH
5922: LD_INT 0
5924: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5925: LD_ADDR_VAR 0 7
5929: PUSH
5930: LD_INT 3
5932: PUSH
5933: LD_INT 2
5935: PUSH
5936: LD_INT 1
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: LD_INT 6
5944: PUSH
5945: LD_INT 5
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5956: LD_ADDR_EXP 39
5960: PUSH
5961: LD_INT 0
5963: PUSH
5964: LD_INT 0
5966: PUSH
5967: LD_INT 0
5969: PUSH
5970: LD_INT 0
5972: PUSH
5973: LD_INT 0
5975: PUSH
5976: LD_INT 0
5978: PUSH
5979: LD_INT 0
5981: PUSH
5982: LD_INT 0
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: ST_TO_ADDR
// for j = 1 to Side_Positions do
5995: LD_ADDR_VAR 0 4
5999: PUSH
6000: DOUBLE
6001: LD_INT 1
6003: DEC
6004: ST_TO_ADDR
6005: LD_EXP 21
6009: PUSH
6010: FOR_TO
6011: IFFALSE 6078
// if Side_Positions [ j ] then
6013: LD_EXP 21
6017: PUSH
6018: LD_VAR 0 4
6022: ARRAY
6023: IFFALSE 6076
// begin playersAmount := playersAmount + 1 ;
6025: LD_ADDR_VAR 0 3
6029: PUSH
6030: LD_VAR 0 3
6034: PUSH
6035: LD_INT 1
6037: PLUS
6038: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6039: LD_ADDR_EXP 39
6043: PUSH
6044: LD_EXP 39
6048: PPUSH
6049: LD_VAR 0 4
6053: PPUSH
6054: LD_VAR 0 7
6058: PUSH
6059: LD_EXP 21
6063: PUSH
6064: LD_VAR 0 4
6068: ARRAY
6069: ARRAY
6070: PPUSH
6071: CALL_OW 1
6075: ST_TO_ADDR
// end ;
6076: GO 6010
6078: POP
6079: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6080: LD_ADDR_EXP 35
6084: PUSH
6085: LD_INT 3
6087: PUSH
6088: LD_EXP 11
6092: MUL
6093: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6094: LD_ADDR_EXP 33
6098: PUSH
6099: LD_VAR 0 3
6103: PUSH
6104: LD_EXP 35
6108: MUL
6109: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6110: LD_ADDR_EXP 34
6114: PUSH
6115: LD_EXP 33
6119: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6120: LD_ADDR_EXP 36
6124: PUSH
6125: LD_INT 0
6127: PUSH
6128: LD_INT 0
6130: PUSH
6131: LD_INT 0
6133: PUSH
6134: LD_INT 0
6136: PUSH
6137: LD_INT 0
6139: PUSH
6140: LD_INT 0
6142: PUSH
6143: LD_INT 0
6145: PUSH
6146: LD_INT 0
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6159: LD_ADDR_EXP 37
6163: PUSH
6164: LD_INT 0
6166: PUSH
6167: LD_INT 0
6169: PUSH
6170: LD_INT 0
6172: PUSH
6173: LD_INT 0
6175: PUSH
6176: LD_INT 0
6178: PUSH
6179: LD_INT 0
6181: PUSH
6182: LD_INT 0
6184: PUSH
6185: LD_INT 0
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: ST_TO_ADDR
// apeLevel := 1 ;
6198: LD_ADDR_EXP 38
6202: PUSH
6203: LD_INT 1
6205: ST_TO_ADDR
// if not apemanNumber then
6206: LD_EXP 33
6210: NOT
6211: IFFALSE 6215
// exit ;
6213: GO 6411
// for i := 1 to apemanPerPlayer do
6215: LD_ADDR_VAR 0 2
6219: PUSH
6220: DOUBLE
6221: LD_INT 1
6223: DEC
6224: ST_TO_ADDR
6225: LD_EXP 35
6229: PUSH
6230: FOR_TO
6231: IFFALSE 6409
// begin for j := 1 to Side_Positions do
6233: LD_ADDR_VAR 0 4
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_EXP 21
6247: PUSH
6248: FOR_TO
6249: IFFALSE 6405
// if Side_Positions [ j ] then
6251: LD_EXP 21
6255: PUSH
6256: LD_VAR 0 4
6260: ARRAY
6261: IFFALSE 6403
// begin pos := Side_Positions [ j ] ;
6263: LD_ADDR_VAR 0 6
6267: PUSH
6268: LD_EXP 21
6272: PUSH
6273: LD_VAR 0 4
6277: ARRAY
6278: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6279: LD_ADDR_EXP 37
6283: PUSH
6284: LD_EXP 37
6288: PPUSH
6289: LD_VAR 0 4
6293: PPUSH
6294: LD_EXP 37
6298: PUSH
6299: LD_VAR 0 4
6303: ARRAY
6304: PUSH
6305: LD_INT 1
6307: PLUS
6308: PPUSH
6309: CALL_OW 1
6313: ST_TO_ADDR
// ape := PrepareApeman ;
6314: LD_ADDR_VAR 0 5
6318: PUSH
6319: CALL 6416 0 0
6323: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6324: LD_ADDR_EXP 36
6328: PUSH
6329: LD_EXP 36
6333: PPUSH
6334: LD_VAR 0 4
6338: PPUSH
6339: LD_EXP 36
6343: PUSH
6344: LD_VAR 0 4
6348: ARRAY
6349: PPUSH
6350: LD_EXP 36
6354: PUSH
6355: LD_VAR 0 4
6359: ARRAY
6360: PUSH
6361: LD_INT 1
6363: PLUS
6364: PPUSH
6365: LD_VAR 0 5
6369: PPUSH
6370: CALL_OW 1
6374: PPUSH
6375: CALL_OW 1
6379: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6380: LD_VAR 0 5
6384: PPUSH
6385: LD_EXP 39
6389: PUSH
6390: LD_VAR 0 4
6394: ARRAY
6395: PPUSH
6396: LD_INT 0
6398: PPUSH
6399: CALL_OW 49
// end ;
6403: GO 6248
6405: POP
6406: POP
// end ;
6407: GO 6230
6409: POP
6410: POP
// end ;
6411: LD_VAR 0 1
6415: RET
// export function PrepareApeman ; var bonus ; begin
6416: LD_INT 0
6418: PPUSH
6419: PPUSH
// uc_side := 0 ;
6420: LD_ADDR_OWVAR 20
6424: PUSH
6425: LD_INT 0
6427: ST_TO_ADDR
// uc_nation := 0 ;
6428: LD_ADDR_OWVAR 21
6432: PUSH
6433: LD_INT 0
6435: ST_TO_ADDR
// InitHc ;
6436: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6440: LD_ADDR_VAR 0 2
6444: PUSH
6445: LD_INT 1
6447: NEG
6448: PUSH
6449: LD_INT 0
6451: PUSH
6452: LD_INT 1
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: LD_OWVAR 1
6464: PUSH
6465: LD_INT 3
6467: MOD
6468: PUSH
6469: LD_INT 1
6471: PLUS
6472: ARRAY
6473: ST_TO_ADDR
// hc_class := class_apeman ;
6474: LD_ADDR_OWVAR 28
6478: PUSH
6479: LD_INT 12
6481: ST_TO_ADDR
// hc_gallery :=  ;
6482: LD_ADDR_OWVAR 33
6486: PUSH
6487: LD_STRING 
6489: ST_TO_ADDR
// hc_name :=  ;
6490: LD_ADDR_OWVAR 26
6494: PUSH
6495: LD_STRING 
6497: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6498: LD_ADDR_OWVAR 31
6502: PUSH
6503: LD_EXP 38
6507: PUSH
6508: LD_VAR 0 2
6512: PLUS
6513: PUSH
6514: LD_EXP 38
6518: PUSH
6519: LD_VAR 0 2
6523: PLUS
6524: PUSH
6525: LD_EXP 38
6529: PUSH
6530: LD_VAR 0 2
6534: PLUS
6535: PUSH
6536: LD_EXP 38
6540: PUSH
6541: LD_VAR 0 2
6545: PLUS
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6553: LD_ADDR_OWVAR 35
6557: PUSH
6558: LD_INT 10
6560: PUSH
6561: LD_VAR 0 2
6565: MUL
6566: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6567: LD_ADDR_OWVAR 29
6571: PUSH
6572: LD_INT 12
6574: PUSH
6575: LD_INT 10
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: ST_TO_ADDR
// result := CreateHuman ;
6582: LD_ADDR_VAR 0 1
6586: PUSH
6587: CALL_OW 44
6591: ST_TO_ADDR
// end ;
6592: LD_VAR 0 1
6596: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6597: LD_INT 0
6599: PPUSH
6600: PPUSH
6601: PPUSH
// if not ape then
6602: LD_VAR 0 1
6606: NOT
6607: IFFALSE 6611
// exit ;
6609: GO 6736
// side := GetSide ( ape ) ;
6611: LD_ADDR_VAR 0 3
6615: PUSH
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 255
6625: ST_TO_ADDR
// if not side then
6626: LD_VAR 0 3
6630: NOT
6631: IFFALSE 6685
// begin for i = 1 to apemanPos do
6633: LD_ADDR_VAR 0 4
6637: PUSH
6638: DOUBLE
6639: LD_INT 1
6641: DEC
6642: ST_TO_ADDR
6643: LD_EXP 36
6647: PUSH
6648: FOR_TO
6649: IFFALSE 6683
// if ape in apemanPos [ i ] then
6651: LD_VAR 0 1
6655: PUSH
6656: LD_EXP 36
6660: PUSH
6661: LD_VAR 0 4
6665: ARRAY
6666: IN
6667: IFFALSE 6681
// begin side := i ;
6669: LD_ADDR_VAR 0 3
6673: PUSH
6674: LD_VAR 0 4
6678: ST_TO_ADDR
// break ;
6679: GO 6683
// end ;
6681: GO 6648
6683: POP
6684: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6685: LD_ADDR_EXP 36
6689: PUSH
6690: LD_EXP 36
6694: PPUSH
6695: LD_VAR 0 3
6699: PPUSH
6700: LD_EXP 36
6704: PUSH
6705: LD_VAR 0 3
6709: ARRAY
6710: PUSH
6711: LD_VAR 0 1
6715: DIFF
6716: PPUSH
6717: CALL_OW 1
6721: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6722: LD_ADDR_EXP 33
6726: PUSH
6727: LD_EXP 33
6731: PUSH
6732: LD_INT 1
6734: MINUS
6735: ST_TO_ADDR
// end ; end_of_file
6736: LD_VAR 0 2
6740: RET
// var respawn , inqueue ; export function init_respawning ; begin
6741: LD_INT 0
6743: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6744: LD_ADDR_LOC 9
6748: PUSH
6749: LD_INT 1
6751: PPUSH
6752: LD_INT 8
6754: PPUSH
6755: CALL_OW 12
6759: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6760: LD_ADDR_LOC 10
6764: PUSH
6765: LD_INT 0
6767: PUSH
6768: LD_INT 0
6770: PUSH
6771: LD_INT 0
6773: PUSH
6774: LD_INT 0
6776: PUSH
6777: LD_INT 0
6779: PUSH
6780: LD_INT 0
6782: PUSH
6783: LD_INT 0
6785: PUSH
6786: LD_INT 0
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: ST_TO_ADDR
// end ;
6799: LD_VAR 0 1
6803: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6804: GO 6806
6806: DISABLE
6807: LD_INT 0
6809: PPUSH
6810: PPUSH
6811: PPUSH
// begin if respawning_time_max = 0 then
6812: LD_EXP 14
6816: PUSH
6817: LD_INT 0
6819: EQUAL
6820: IFFALSE 6824
// exit ;
6822: GO 7233
// if respawn = 8 then
6824: LD_LOC 9
6828: PUSH
6829: LD_INT 8
6831: EQUAL
6832: IFFALSE 6844
// respawn := 1 else
6834: LD_ADDR_LOC 9
6838: PUSH
6839: LD_INT 1
6841: ST_TO_ADDR
6842: GO 6858
// respawn := respawn + 1 ;
6844: LD_ADDR_LOC 9
6848: PUSH
6849: LD_LOC 9
6853: PUSH
6854: LD_INT 1
6856: PLUS
6857: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6858: LD_EXP 21
6862: PUSH
6863: LD_LOC 9
6867: ARRAY
6868: PUSH
6869: LD_LOC 10
6873: PUSH
6874: LD_LOC 9
6878: ARRAY
6879: NOT
6880: AND
6881: IFFALSE 7232
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6883: LD_ADDR_VAR 0 1
6887: PUSH
6888: LD_INT 21
6890: PUSH
6891: LD_INT 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 22
6900: PUSH
6901: LD_LOC 9
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 3
6912: PUSH
6913: LD_INT 23
6915: PUSH
6916: LD_INT 0
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: PPUSH
6929: CALL_OW 69
6933: ST_TO_ADDR
// if n < number_of_people then
6934: LD_VAR 0 1
6938: PUSH
6939: LD_EXP 5
6943: LESS
6944: IFFALSE 7229
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6946: LD_ADDR_VAR 0 2
6950: PUSH
6951: LD_INT 21
6953: PUSH
6954: LD_INT 3
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: PUSH
6961: LD_INT 2
6963: PUSH
6964: LD_INT 30
6966: PUSH
6967: LD_INT 0
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 30
6976: PUSH
6977: LD_INT 1
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 50
6991: PUSH
6992: EMPTY
6993: LIST
6994: PUSH
6995: LD_INT 22
6997: PUSH
6998: LD_LOC 9
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: PPUSH
7013: CALL_OW 69
7017: ST_TO_ADDR
// if dep > 0 then
7018: LD_VAR 0 2
7022: PUSH
7023: LD_INT 0
7025: GREATER
7026: IFFALSE 7226
// begin aktresp := respawn ;
7028: LD_ADDR_VAR 0 3
7032: PUSH
7033: LD_LOC 9
7037: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7038: LD_ADDR_LOC 10
7042: PUSH
7043: LD_LOC 10
7047: PPUSH
7048: LD_VAR 0 3
7052: PPUSH
7053: LD_INT 1
7055: PPUSH
7056: CALL_OW 1
7060: ST_TO_ADDR
// enable ;
7061: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7062: LD_EXP 13
7066: PPUSH
7067: LD_EXP 14
7071: PPUSH
7072: CALL_OW 12
7076: PPUSH
7077: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7081: LD_ADDR_LOC 10
7085: PUSH
7086: LD_LOC 10
7090: PPUSH
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_INT 0
7098: PPUSH
7099: CALL_OW 1
7103: ST_TO_ADDR
// hc_name :=  ;
7104: LD_ADDR_OWVAR 26
7108: PUSH
7109: LD_STRING 
7111: ST_TO_ADDR
// hc_importance := 0 ;
7112: LD_ADDR_OWVAR 32
7116: PUSH
7117: LD_INT 0
7119: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7120: LD_INT 0
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: LD_EXP 6
7130: PUSH
7131: LD_INT 2
7133: DIV
7134: PPUSH
7135: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7139: LD_ADDR_OWVAR 21
7143: PUSH
7144: LD_EXP 22
7148: PUSH
7149: LD_VAR 0 3
7153: ARRAY
7154: ST_TO_ADDR
// uc_side := aktresp ;
7155: LD_ADDR_OWVAR 20
7159: PUSH
7160: LD_VAR 0 3
7164: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_VAR 0 2
7174: PUSH
7175: LD_INT 1
7177: PPUSH
7178: LD_VAR 0 2
7182: PPUSH
7183: CALL_OW 12
7187: ARRAY
7188: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
7189: CALL_OW 44
7193: PPUSH
7194: LD_VAR 0 2
7198: PPUSH
7199: CALL_OW 250
7203: PPUSH
7204: LD_VAR 0 2
7208: PPUSH
7209: CALL_OW 251
7213: PPUSH
7214: LD_INT 7
7216: PPUSH
7217: LD_INT 1
7219: PPUSH
7220: CALL_OW 50
// end else
7224: GO 7227
// enable ;
7226: ENABLE
// end else
7227: GO 7230
// enable ;
7229: ENABLE
// end else
7230: GO 7233
// enable ;
7232: ENABLE
// end ; end_of_file
7233: PPOPN 3
7235: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7236: LD_VAR 0 1
7240: PPUSH
7241: CALL_OW 266
7245: PUSH
7246: LD_INT 0
7248: PUSH
7249: LD_INT 1
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: IN
7256: IFFALSE 7281
// SetBName ( b , @ & GetSide ( b ) ) ;
7258: LD_VAR 0 1
7262: PPUSH
7263: LD_STRING @
7265: PUSH
7266: LD_VAR 0 1
7270: PPUSH
7271: CALL_OW 255
7275: STR
7276: PPUSH
7277: CALL_OW 500
// if def_game_rules then
7281: LD_EXP 42
7285: IFFALSE 7322
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7287: LD_VAR 0 1
7291: PPUSH
7292: LD_VAR 0 1
7296: PPUSH
7297: CALL_OW 266
7301: PPUSH
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL_OW 255
7311: PPUSH
7312: LD_INT 0
7314: PPUSH
7315: LD_INT 1
7317: PPUSH
7318: CALL 12021 0 5
// end ;
7322: PPOPN 2
7324: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7325: LD_VAR 0 1
7329: PPUSH
7330: CALL_OW 266
7334: PUSH
7335: LD_INT 0
7337: PUSH
7338: LD_INT 1
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: IN
7345: IFFALSE 7370
// SetBName ( b , @ & GetSide ( b ) ) ;
7347: LD_VAR 0 1
7351: PPUSH
7352: LD_STRING @
7354: PUSH
7355: LD_VAR 0 1
7359: PPUSH
7360: CALL_OW 255
7364: STR
7365: PPUSH
7366: CALL_OW 500
// if def_game_rules then
7370: LD_EXP 42
7374: IFFALSE 7413
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7376: LD_VAR 0 1
7380: PPUSH
7381: LD_VAR 0 1
7385: PPUSH
7386: CALL_OW 266
7390: PPUSH
7391: LD_VAR 0 1
7395: PPUSH
7396: CALL_OW 255
7400: PPUSH
7401: LD_VAR 0 2
7405: PPUSH
7406: LD_INT 1
7408: PPUSH
7409: CALL 12021 0 5
// end ;
7413: PPOPN 3
7415: END
// on VehicleConstructed ( veh , fac ) do var side ;
7416: LD_INT 0
7418: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7419: LD_VAR 0 1
7423: PPUSH
7424: CALL_OW 263
7428: PUSH
7429: LD_INT 5
7431: EQUAL
7432: IFFALSE 7574
// begin side := GetSide ( veh ) ;
7434: LD_ADDR_VAR 0 3
7438: PUSH
7439: LD_VAR 0 1
7443: PPUSH
7444: CALL_OW 255
7448: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7449: LD_ADDR_EXP 36
7453: PUSH
7454: LD_EXP 36
7458: PPUSH
7459: LD_VAR 0 3
7463: PPUSH
7464: LD_EXP 36
7468: PUSH
7469: LD_VAR 0 3
7473: ARRAY
7474: PPUSH
7475: LD_INT 52
7477: PUSH
7478: EMPTY
7479: LIST
7480: PPUSH
7481: CALL_OW 72
7485: PUSH
7486: LD_INT 22
7488: PUSH
7489: LD_VAR 0 3
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 2
7500: PUSH
7501: LD_INT 33
7503: PUSH
7504: LD_INT 5
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 25
7513: PUSH
7514: LD_INT 12
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 25
7523: PUSH
7524: LD_INT 15
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_INT 25
7533: PUSH
7534: LD_INT 16
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 25
7543: PUSH
7544: LD_INT 17
7546: PUSH
7547: EMPTY
7548: LIST
7549: LIST
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PPUSH
7563: CALL_OW 69
7567: UNION
7568: PPUSH
7569: CALL_OW 1
7573: ST_TO_ADDR
// end ; end ;
7574: PPOPN 3
7576: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7577: LD_INT 0
7579: PPUSH
7580: PPUSH
7581: PPUSH
7582: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7583: LD_VAR 0 1
7587: PPUSH
7588: CALL_OW 257
7592: PUSH
7593: LD_INT 12
7595: PUSH
7596: LD_INT 15
7598: PUSH
7599: LD_INT 17
7601: PUSH
7602: LD_INT 16
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: IN
7611: PUSH
7612: LD_VAR 0 1
7616: PPUSH
7617: CALL_OW 263
7621: PUSH
7622: LD_INT 5
7624: EQUAL
7625: OR
7626: IFFALSE 7637
// ApeKilled ( j ) ;
7628: LD_VAR 0 1
7632: PPUSH
7633: CALL 6597 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7637: LD_VAR 0 1
7641: PPUSH
7642: CALL_OW 266
7646: PUSH
7647: LD_INT 0
7649: PUSH
7650: LD_INT 1
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: IN
7657: IFFALSE 7739
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7659: LD_ADDR_VAR 0 4
7663: PUSH
7664: LD_EXP 21
7668: PUSH
7669: LD_VAR 0 1
7673: PPUSH
7674: CALL_OW 255
7678: ARRAY
7679: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7680: LD_ADDR_VAR 0 2
7684: PUSH
7685: LD_EXP 27
7689: PUSH
7690: LD_VAR 0 4
7694: ARRAY
7695: PUSH
7696: LD_INT 1
7698: ARRAY
7699: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7700: LD_ADDR_VAR 0 3
7704: PUSH
7705: LD_EXP 27
7709: PUSH
7710: LD_VAR 0 4
7714: ARRAY
7715: PUSH
7716: LD_INT 2
7718: ARRAY
7719: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7720: LD_VAR 0 2
7724: PPUSH
7725: LD_VAR 0 3
7729: PPUSH
7730: CALL_OW 420
7734: PPUSH
7735: CALL_OW 419
// end ; if def_game_rules then
7739: LD_EXP 42
7743: IFFALSE 7842
// if ( GetType ( j ) = 3 ) then
7745: LD_VAR 0 1
7749: PPUSH
7750: CALL_OW 247
7754: PUSH
7755: LD_INT 3
7757: EQUAL
7758: IFFALSE 7798
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7760: LD_VAR 0 1
7764: PPUSH
7765: LD_VAR 0 1
7769: PPUSH
7770: CALL_OW 266
7774: PPUSH
7775: LD_VAR 0 1
7779: PPUSH
7780: CALL_OW 255
7784: PPUSH
7785: LD_INT 0
7787: PPUSH
7788: LD_INT 1
7790: NEG
7791: PPUSH
7792: CALL 12021 0 5
7796: GO 7842
// if ( GetChassis ( j ) = 25 ) then
7798: LD_VAR 0 1
7802: PPUSH
7803: CALL_OW 265
7807: PUSH
7808: LD_INT 25
7810: EQUAL
7811: IFFALSE 7842
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7813: LD_VAR 0 1
7817: PPUSH
7818: LD_INT 37
7820: PPUSH
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 255
7830: PPUSH
7831: LD_INT 0
7833: PPUSH
7834: LD_INT 1
7836: NEG
7837: PPUSH
7838: CALL 12021 0 5
// end ;
7842: PPOPN 5
7844: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7845: LD_EXP 42
7849: PUSH
7850: LD_VAR 0 1
7854: PPUSH
7855: CALL_OW 265
7859: PUSH
7860: LD_INT 25
7862: EQUAL
7863: AND
7864: IFFALSE 7896
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7866: LD_VAR 0 1
7870: PPUSH
7871: LD_INT 37
7873: PPUSH
7874: LD_VAR 0 1
7878: PPUSH
7879: CALL_OW 255
7883: PPUSH
7884: LD_VAR 0 3
7888: PPUSH
7889: LD_INT 1
7891: PPUSH
7892: CALL 12021 0 5
// end ;
7896: PPOPN 4
7898: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7899: LD_VAR 0 1
7903: PPUSH
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_VAR 0 3
7913: PPUSH
7914: LD_OWVAR 2
7918: PPUSH
7919: CALL 12699 0 4
7923: PPOPN 3
7925: END
// function CanWinLoose ; begin
7926: LD_INT 0
7928: PPUSH
// Result := true ;
7929: LD_ADDR_VAR 0 1
7933: PUSH
7934: LD_INT 1
7936: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7937: CALL_OW 518
7941: PUSH
7942: CALL_OW 519
7946: PUSH
7947: LD_INT 0
7949: GREATER
7950: AND
7951: IFFALSE 7961
// Result := false ;
7953: LD_ADDR_VAR 0 1
7957: PUSH
7958: LD_INT 0
7960: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7961: CALL_OW 531
7965: PUSH
7966: CALL_OW 519
7970: PUSH
7971: LD_INT 1
7973: GREATER
7974: AND
7975: IFFALSE 7985
// Result := false ;
7977: LD_ADDR_VAR 0 1
7981: PUSH
7982: LD_INT 0
7984: ST_TO_ADDR
// end ;
7985: LD_VAR 0 1
7989: RET
// function HasPower ( i ) ; begin
7990: LD_INT 0
7992: PPUSH
// if def_people_respawning then
7993: LD_EXP 53
7997: IFFALSE 8088
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7999: LD_ADDR_VAR 0 2
8003: PUSH
8004: LD_INT 22
8006: PUSH
8007: LD_VAR 0 1
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 2
8018: PUSH
8019: LD_INT 21
8021: PUSH
8022: LD_INT 1
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 33
8031: PUSH
8032: LD_INT 3
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: PUSH
8039: LD_INT 33
8041: PUSH
8042: LD_INT 5
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PUSH
8049: LD_INT 30
8051: PUSH
8052: LD_INT 0
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PUSH
8059: LD_INT 30
8061: PUSH
8062: LD_INT 1
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PPUSH
8081: CALL_OW 69
8085: ST_TO_ADDR
8086: GO 8153
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8088: LD_ADDR_VAR 0 2
8092: PUSH
8093: LD_INT 22
8095: PUSH
8096: LD_VAR 0 1
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: LD_INT 21
8110: PUSH
8111: LD_INT 1
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: LD_INT 33
8120: PUSH
8121: LD_INT 3
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: LD_INT 33
8130: PUSH
8131: LD_INT 5
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PPUSH
8148: CALL_OW 69
8152: ST_TO_ADDR
// end ;
8153: LD_VAR 0 2
8157: RET
// function AlliedSides ( i , j ) ; begin
8158: LD_INT 0
8160: PPUSH
// Result := false ;
8161: LD_ADDR_VAR 0 3
8165: PUSH
8166: LD_INT 0
8168: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8169: LD_VAR 0 1
8173: PPUSH
8174: LD_VAR 0 2
8178: PPUSH
8179: CALL_OW 81
8183: PUSH
8184: LD_INT 1
8186: EQUAL
8187: PUSH
8188: LD_VAR 0 2
8192: PPUSH
8193: LD_VAR 0 1
8197: PPUSH
8198: CALL_OW 81
8202: PUSH
8203: LD_INT 1
8205: EQUAL
8206: AND
8207: PUSH
8208: LD_VAR 0 1
8212: PPUSH
8213: CALL_OW 83
8217: AND
8218: PUSH
8219: LD_VAR 0 2
8223: PPUSH
8224: CALL_OW 83
8228: AND
8229: IFFALSE 8239
// Result := true ;
8231: LD_ADDR_VAR 0 3
8235: PUSH
8236: LD_INT 1
8238: ST_TO_ADDR
// end ;
8239: LD_VAR 0 3
8243: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8244: CALL 7926 0 0
8248: IFFALSE 8257
8250: GO 8252
8252: DISABLE
// YouLostInMultiplayer ;
8253: CALL_OW 107
8257: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8258: CALL 7926 0 0
8262: IFFALSE 8286
8264: GO 8266
8266: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8267: LD_EXP 22
8271: PUSH
8272: LD_OWVAR 2
8276: ARRAY
8277: PPUSH
8278: CALL 12741 0 1
// YouWinInMultiplayer ;
8282: CALL_OW 106
// end ;
8286: END
// every 0 0$3 marked 98 do var i , CanWin ;
8287: GO 8289
8289: DISABLE
8290: LD_INT 0
8292: PPUSH
8293: PPUSH
// begin if not HasPower ( your_side ) then
8294: LD_OWVAR 2
8298: PPUSH
8299: CALL 7990 0 1
8303: NOT
8304: IFFALSE 8315
// begin Multiplayer_Loose_Message ;
8306: CALL_OW 521
// enable ( 400 ) ;
8310: LD_INT 400
8312: ENABLE_MARKED
// end else
8313: GO 8448
// begin CanWin := true ;
8315: LD_ADDR_VAR 0 2
8319: PUSH
8320: LD_INT 1
8322: ST_TO_ADDR
// for i := 1 to 8 do
8323: LD_ADDR_VAR 0 1
8327: PUSH
8328: DOUBLE
8329: LD_INT 1
8331: DEC
8332: ST_TO_ADDR
8333: LD_INT 8
8335: PUSH
8336: FOR_TO
8337: IFFALSE 8434
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8339: LD_EXP 21
8343: PUSH
8344: LD_VAR 0 1
8348: ARRAY
8349: PUSH
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 108
8359: AND
8360: PUSH
8361: LD_VAR 0 1
8365: PUSH
8366: LD_OWVAR 2
8370: NONEQUAL
8371: AND
8372: IFFALSE 8432
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
8374: LD_EXP 19
8378: PUSH
8379: LD_VAR 0 1
8383: ARRAY
8384: NOT
8385: PUSH
8386: LD_EXP 19
8390: PUSH
8391: LD_VAR 0 1
8395: ARRAY
8396: PUSH
8397: LD_EXP 19
8401: PUSH
8402: LD_OWVAR 2
8406: ARRAY
8407: NONEQUAL
8408: OR
8409: IFFALSE 8432
// if HasPower ( i ) then
8411: LD_VAR 0 1
8415: PPUSH
8416: CALL 7990 0 1
8420: IFFALSE 8432
// begin CanWin := false ;
8422: LD_ADDR_VAR 0 2
8426: PUSH
8427: LD_INT 0
8429: ST_TO_ADDR
// break ;
8430: GO 8434
// end ;
8432: GO 8336
8434: POP
8435: POP
// if CanWin then
8436: LD_VAR 0 2
8440: IFFALSE 8447
// enable ( 401 ) else
8442: LD_INT 401
8444: ENABLE_MARKED
8445: GO 8448
// enable ;
8447: ENABLE
// end ; end ;
8448: PPOPN 2
8450: END
// every 0 0$3 marked 99 do var i , CanWin ;
8451: GO 8453
8453: DISABLE
8454: LD_INT 0
8456: PPUSH
8457: PPUSH
// begin if not HasPower ( your_side ) then
8458: LD_OWVAR 2
8462: PPUSH
8463: CALL 7990 0 1
8467: NOT
8468: IFFALSE 8479
// begin Multiplayer_Loose_Message ;
8470: CALL_OW 521
// enable ( 400 ) ;
8474: LD_INT 400
8476: ENABLE_MARKED
// end else
8477: GO 8592
// begin CanWin := true ;
8479: LD_ADDR_VAR 0 2
8483: PUSH
8484: LD_INT 1
8486: ST_TO_ADDR
// for i := 1 to 8 do
8487: LD_ADDR_VAR 0 1
8491: PUSH
8492: DOUBLE
8493: LD_INT 1
8495: DEC
8496: ST_TO_ADDR
8497: LD_INT 8
8499: PUSH
8500: FOR_TO
8501: IFFALSE 8578
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8503: LD_EXP 21
8507: PUSH
8508: LD_VAR 0 1
8512: ARRAY
8513: PUSH
8514: LD_VAR 0 1
8518: PPUSH
8519: CALL_OW 108
8523: AND
8524: PUSH
8525: LD_VAR 0 1
8529: PUSH
8530: LD_OWVAR 2
8534: NONEQUAL
8535: AND
8536: IFFALSE 8576
// if not AlliedSides ( i , your_side ) then
8538: LD_VAR 0 1
8542: PPUSH
8543: LD_OWVAR 2
8547: PPUSH
8548: CALL 8158 0 2
8552: NOT
8553: IFFALSE 8576
// if HasPower ( i ) then
8555: LD_VAR 0 1
8559: PPUSH
8560: CALL 7990 0 1
8564: IFFALSE 8576
// begin CanWin := false ;
8566: LD_ADDR_VAR 0 2
8570: PUSH
8571: LD_INT 0
8573: ST_TO_ADDR
// break ;
8574: GO 8578
// end ;
8576: GO 8500
8578: POP
8579: POP
// if CanWin then
8580: LD_VAR 0 2
8584: IFFALSE 8591
// enable ( 401 ) else
8586: LD_INT 401
8588: ENABLE_MARKED
8589: GO 8592
// enable ;
8591: ENABLE
// end ; end ; end_of_file
8592: PPOPN 2
8594: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8595: LD_INT 0
8597: PPUSH
8598: PPUSH
// for un in battle_flags_id do
8599: LD_ADDR_VAR 0 2
8603: PUSH
8604: LD_EXP 32
8608: PUSH
8609: FOR_IN
8610: IFFALSE 8685
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8612: LD_VAR 0 2
8616: PPUSH
8617: LD_INT 1
8619: PUSH
8620: LD_LOC 11
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 2
8631: PUSH
8632: LD_LOC 11
8636: PUSH
8637: LD_INT 2
8639: DIV
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 3
8647: PUSH
8648: LD_LOC 11
8652: PUSH
8653: LD_INT 5
8655: DIV
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: LD_INT 20
8663: PUSH
8664: LD_LOC 11
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: PPUSH
8679: CALL_OW 423
8683: GO 8609
8685: POP
8686: POP
// end ;
8687: LD_VAR 0 1
8691: RET
// every 1 do var un ;
8692: GO 8694
8694: DISABLE
8695: LD_INT 0
8697: PPUSH
// begin if not def_morale_flags then
8698: LD_EXP 51
8702: NOT
8703: IFFALSE 8707
// exit ;
8705: GO 8784
// if not morale_decreasing_time then
8707: LD_EXP 10
8711: NOT
8712: IFFALSE 8716
// exit ;
8714: GO 8784
// strength = 100 ;
8716: LD_ADDR_LOC 11
8720: PUSH
8721: LD_INT 100
8723: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8724: LD_EXP 10
8728: PPUSH
8729: CALL_OW 67
// strength := strength - 1 ;
8733: LD_ADDR_LOC 11
8737: PUSH
8738: LD_LOC 11
8742: PUSH
8743: LD_INT 1
8745: MINUS
8746: ST_TO_ADDR
// Update_Flags ;
8747: CALL 8595 0 0
// until not strength ;
8751: LD_LOC 11
8755: NOT
8756: IFFALSE 8724
// for un in battle_flags_id do
8758: LD_ADDR_VAR 0 1
8762: PUSH
8763: LD_EXP 32
8767: PUSH
8768: FOR_IN
8769: IFFALSE 8782
// KillBattleFlag ( un ) ;
8771: LD_VAR 0 1
8775: PPUSH
8776: CALL_OW 419
8780: GO 8768
8782: POP
8783: POP
// end ; end_of_file
8784: PPOPN 1
8786: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8787: LD_INT 0
8789: PPUSH
8790: PPUSH
8791: PPUSH
// enable ( 600 ) ;
8792: LD_INT 600
8794: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8795: LD_ADDR_VAR 0 2
8799: PUSH
8800: DOUBLE
8801: LD_INT 1
8803: DEC
8804: ST_TO_ADDR
8805: LD_EXP 40
8809: PUSH
8810: FOR_TO
8811: IFFALSE 8966
// if Position_Sides [ i ] then
8813: LD_EXP 24
8817: PUSH
8818: LD_VAR 0 2
8822: ARRAY
8823: IFFALSE 8964
// for j := 1 to 8 do
8825: LD_ADDR_VAR 0 3
8829: PUSH
8830: DOUBLE
8831: LD_INT 1
8833: DEC
8834: ST_TO_ADDR
8835: LD_INT 8
8837: PUSH
8838: FOR_TO
8839: IFFALSE 8962
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8841: LD_EXP 21
8845: PUSH
8846: LD_VAR 0 3
8850: ARRAY
8851: PUSH
8852: LD_EXP 19
8856: PUSH
8857: LD_EXP 24
8861: PUSH
8862: LD_VAR 0 2
8866: ARRAY
8867: ARRAY
8868: PUSH
8869: LD_EXP 19
8873: PUSH
8874: LD_VAR 0 3
8878: ARRAY
8879: NONEQUAL
8880: PUSH
8881: LD_EXP 23
8885: NOT
8886: PUSH
8887: LD_EXP 24
8891: PUSH
8892: LD_VAR 0 2
8896: ARRAY
8897: PUSH
8898: LD_VAR 0 3
8902: NONEQUAL
8903: AND
8904: OR
8905: AND
8906: IFFALSE 8930
// HideArea ( j , BuildUpAreas [ i ] ) else
8908: LD_VAR 0 3
8912: PPUSH
8913: LD_EXP 40
8917: PUSH
8918: LD_VAR 0 2
8922: ARRAY
8923: PPUSH
8924: CALL_OW 333
8928: GO 8960
// if ( j = your_side ) then
8930: LD_VAR 0 3
8934: PUSH
8935: LD_OWVAR 2
8939: EQUAL
8940: IFFALSE 8960
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8942: LD_EXP 40
8946: PUSH
8947: LD_VAR 0 2
8951: ARRAY
8952: PPUSH
8953: LD_INT 5
8955: PPUSH
8956: CALL_OW 424
8960: GO 8838
8962: POP
8963: POP
8964: GO 8810
8966: POP
8967: POP
// end ;
8968: LD_VAR 0 1
8972: RET
// export function EndBuildUp ; var i , j ; begin
8973: LD_INT 0
8975: PPUSH
8976: PPUSH
8977: PPUSH
// disable ( 600 ) ;
8978: LD_INT 600
8980: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
8981: LD_ADDR_VAR 0 2
8985: PUSH
8986: DOUBLE
8987: LD_INT 1
8989: DEC
8990: ST_TO_ADDR
8991: LD_EXP 40
8995: PUSH
8996: FOR_TO
8997: IFFALSE 9152
// if Position_Sides [ i ] then
8999: LD_EXP 24
9003: PUSH
9004: LD_VAR 0 2
9008: ARRAY
9009: IFFALSE 9150
// for j := 1 to 8 do
9011: LD_ADDR_VAR 0 3
9015: PUSH
9016: DOUBLE
9017: LD_INT 1
9019: DEC
9020: ST_TO_ADDR
9021: LD_INT 8
9023: PUSH
9024: FOR_TO
9025: IFFALSE 9148
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9027: LD_EXP 21
9031: PUSH
9032: LD_VAR 0 3
9036: ARRAY
9037: PUSH
9038: LD_EXP 19
9042: PUSH
9043: LD_EXP 24
9047: PUSH
9048: LD_VAR 0 2
9052: ARRAY
9053: ARRAY
9054: PUSH
9055: LD_EXP 19
9059: PUSH
9060: LD_VAR 0 3
9064: ARRAY
9065: NONEQUAL
9066: PUSH
9067: LD_EXP 23
9071: NOT
9072: PUSH
9073: LD_EXP 24
9077: PUSH
9078: LD_VAR 0 2
9082: ARRAY
9083: PUSH
9084: LD_VAR 0 3
9088: NONEQUAL
9089: AND
9090: OR
9091: AND
9092: IFFALSE 9116
// ShowArea ( j , BuildUpAreas [ i ] ) else
9094: LD_VAR 0 3
9098: PPUSH
9099: LD_EXP 40
9103: PUSH
9104: LD_VAR 0 2
9108: ARRAY
9109: PPUSH
9110: CALL_OW 334
9114: GO 9146
// if ( j = your_side ) then
9116: LD_VAR 0 3
9120: PUSH
9121: LD_OWVAR 2
9125: EQUAL
9126: IFFALSE 9146
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9128: LD_EXP 40
9132: PUSH
9133: LD_VAR 0 2
9137: ARRAY
9138: PPUSH
9139: LD_INT 0
9141: PPUSH
9142: CALL_OW 424
9146: GO 9024
9148: POP
9149: POP
9150: GO 8996
9152: POP
9153: POP
// end ;
9154: LD_VAR 0 1
9158: RET
// every 5 marked 600 do var i , un ;
9159: GO 9161
9161: DISABLE
9162: LD_INT 0
9164: PPUSH
9165: PPUSH
// begin for i := 1 to BuildUpAreas do
9166: LD_ADDR_VAR 0 1
9170: PUSH
9171: DOUBLE
9172: LD_INT 1
9174: DEC
9175: ST_TO_ADDR
9176: LD_EXP 40
9180: PUSH
9181: FOR_TO
9182: IFFALSE 9337
// if Position_Sides [ i ] then
9184: LD_EXP 24
9188: PUSH
9189: LD_VAR 0 1
9193: ARRAY
9194: IFFALSE 9335
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9196: LD_ADDR_VAR 0 2
9200: PUSH
9201: LD_EXP 40
9205: PUSH
9206: LD_VAR 0 1
9210: ARRAY
9211: PPUSH
9212: LD_INT 2
9214: PUSH
9215: LD_INT 21
9217: PUSH
9218: LD_INT 1
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: LD_INT 21
9227: PUSH
9228: LD_INT 2
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 22
9242: PUSH
9243: LD_OWVAR 2
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PPUSH
9256: CALL_OW 70
9260: PUSH
9261: FOR_IN
9262: IFFALSE 9333
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9264: LD_EXP 19
9268: PUSH
9269: LD_EXP 24
9273: PUSH
9274: LD_VAR 0 1
9278: ARRAY
9279: ARRAY
9280: PUSH
9281: LD_EXP 19
9285: PUSH
9286: LD_OWVAR 2
9290: ARRAY
9291: NONEQUAL
9292: PUSH
9293: LD_EXP 23
9297: NOT
9298: PUSH
9299: LD_EXP 24
9303: PUSH
9304: LD_VAR 0 1
9308: ARRAY
9309: PUSH
9310: LD_OWVAR 2
9314: NONEQUAL
9315: AND
9316: OR
9317: IFFALSE 9331
// ComMoveToArea ( un , BuildUpEscape ) ;
9319: LD_VAR 0 2
9323: PPUSH
9324: LD_INT 13
9326: PPUSH
9327: CALL_OW 113
9331: GO 9261
9333: POP
9334: POP
9335: GO 9181
9337: POP
9338: POP
// enable ;
9339: ENABLE
// end ;
9340: PPOPN 2
9342: END
// every 5 5$00 do
9343: GO 9345
9345: DISABLE
// if ( def_builduptime = 1 ) then
9346: LD_EXP 56
9350: PUSH
9351: LD_INT 1
9353: EQUAL
9354: IFFALSE 9360
// EndBuildUp ;
9356: CALL 8973 0 0
9360: END
// every 10 10$00 do
9361: GO 9363
9363: DISABLE
// if ( def_builduptime = 2 ) then
9364: LD_EXP 56
9368: PUSH
9369: LD_INT 2
9371: EQUAL
9372: IFFALSE 9378
// EndBuildUp ;
9374: CALL 8973 0 0
9378: END
// every 15 15$00 do
9379: GO 9381
9381: DISABLE
// if ( def_builduptime = 3 ) then
9382: LD_EXP 56
9386: PUSH
9387: LD_INT 3
9389: EQUAL
9390: IFFALSE 9396
// EndBuildUp ; end_of_file
9392: CALL 8973 0 0
9396: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9397: LD_INT 0
9399: PPUSH
9400: PPUSH
// if ( not IAmSpec ) then
9401: CALL_OW 531
9405: NOT
9406: IFFALSE 9422
// Result := Limits_Info ^  ;
9408: LD_ADDR_VAR 0 1
9412: PUSH
9413: LD_LOC 23
9417: PUSH
9418: LD_STRING 
9420: ADD
9421: ST_TO_ADDR
// for i := 1 to 8 do
9422: LD_ADDR_VAR 0 2
9426: PUSH
9427: DOUBLE
9428: LD_INT 1
9430: DEC
9431: ST_TO_ADDR
9432: LD_INT 8
9434: PUSH
9435: FOR_TO
9436: IFFALSE 9481
// if Cheaters [ i ] then
9438: LD_LOC 24
9442: PUSH
9443: LD_VAR 0 2
9447: ARRAY
9448: IFFALSE 9479
// Result := Result ^ [ #Cheater , i , i ] ;
9450: LD_ADDR_VAR 0 1
9454: PUSH
9455: LD_VAR 0 1
9459: PUSH
9460: LD_STRING #Cheater
9462: PUSH
9463: LD_VAR 0 2
9467: PUSH
9468: LD_VAR 0 2
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: ADD
9478: ST_TO_ADDR
9479: GO 9435
9481: POP
9482: POP
// end ;
9483: LD_VAR 0 1
9487: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9488: LD_INT 0
9490: PPUSH
9491: PPUSH
9492: PPUSH
9493: PPUSH
9494: PPUSH
// case Game_Type of 10 :
9495: LD_EXP 41
9499: PUSH
9500: LD_INT 10
9502: DOUBLE
9503: EQUAL
9504: IFTRUE 9508
9506: GO 9519
9508: POP
// def_game_rules := 1 ; 11 :
9509: LD_ADDR_EXP 42
9513: PUSH
9514: LD_INT 1
9516: ST_TO_ADDR
9517: GO 9539
9519: LD_INT 11
9521: DOUBLE
9522: EQUAL
9523: IFTRUE 9527
9525: GO 9538
9527: POP
// def_game_rules := 3 ; end ;
9528: LD_ADDR_EXP 42
9532: PUSH
9533: LD_INT 3
9535: ST_TO_ADDR
9536: GO 9539
9538: POP
// case def_game_rules of 0 :
9539: LD_EXP 42
9543: PUSH
9544: LD_INT 0
9546: DOUBLE
9547: EQUAL
9548: IFTRUE 9552
9550: GO 9557
9552: POP
// exit ; 1 :
9553: GO 11615
9555: GO 11515
9557: LD_INT 1
9559: DOUBLE
9560: EQUAL
9561: IFTRUE 9565
9563: GO 9781
9565: POP
// begin def_base_level := 2 ;
9566: LD_ADDR_EXP 43
9570: PUSH
9571: LD_INT 2
9573: ST_TO_ADDR
// def_amount_of_people := 2 ;
9574: LD_ADDR_EXP 44
9578: PUSH
9579: LD_INT 2
9581: ST_TO_ADDR
// def_skill_level := 1 ;
9582: LD_ADDR_EXP 45
9586: PUSH
9587: LD_INT 1
9589: ST_TO_ADDR
// def_starting_resources := 2 ;
9590: LD_ADDR_EXP 46
9594: PUSH
9595: LD_INT 2
9597: ST_TO_ADDR
// def_shipments_density := 1 ;
9598: LD_ADDR_EXP 47
9602: PUSH
9603: LD_INT 1
9605: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9606: LD_ADDR_EXP 48
9610: PUSH
9611: LD_INT 0
9613: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9614: LD_ADDR_EXP 49
9618: PUSH
9619: LD_INT 1
9621: ST_TO_ADDR
// def_shared_vision := 1 ;
9622: LD_ADDR_EXP 50
9626: PUSH
9627: LD_INT 1
9629: ST_TO_ADDR
// def_morale_flags := 3 ;
9630: LD_ADDR_EXP 51
9634: PUSH
9635: LD_INT 3
9637: ST_TO_ADDR
// def_siberite_detection := 1 ;
9638: LD_ADDR_EXP 52
9642: PUSH
9643: LD_INT 1
9645: ST_TO_ADDR
// def_people_respawning := 1 ;
9646: LD_ADDR_EXP 53
9650: PUSH
9651: LD_INT 1
9653: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9654: LD_ADDR_EXP 54
9658: PUSH
9659: LD_INT 1
9661: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9662: LD_ADDR_EXP 55
9666: PUSH
9667: LD_INT 0
9669: ST_TO_ADDR
// def_builduptime := 2 ;
9670: LD_ADDR_EXP 56
9674: PUSH
9675: LD_INT 2
9677: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9678: LD_ADDR_VAR 0 2
9682: PUSH
9683: EMPTY
9684: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9685: LD_ADDR_VAR 0 3
9689: PUSH
9690: EMPTY
9691: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9692: LD_ADDR_LOC 18
9696: PUSH
9697: EMPTY
9698: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9699: LD_ADDR_LOC 19
9703: PUSH
9704: EMPTY
9705: ST_TO_ADDR
// Banned_Controls := [ ] ;
9706: LD_ADDR_LOC 20
9710: PUSH
9711: EMPTY
9712: ST_TO_ADDR
// Banned_Engines := [ ] ;
9713: LD_ADDR_LOC 21
9717: PUSH
9718: EMPTY
9719: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9720: LD_ADDR_LOC 16
9724: PUSH
9725: LD_INT 37
9727: PUSH
9728: EMPTY
9729: LIST
9730: PUSH
9731: LD_INT 4
9733: PUSH
9734: LD_INT 5
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 31
9743: PUSH
9744: LD_INT 32
9746: PUSH
9747: LD_INT 33
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9760: LD_ADDR_LOC 17
9764: PUSH
9765: LD_INT 2
9767: PUSH
9768: LD_INT 2
9770: PUSH
9771: LD_INT 4
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: ST_TO_ADDR
// end ; 2 :
9779: GO 11515
9781: LD_INT 2
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9998
9789: POP
// begin def_base_level := 1 ;
9790: LD_ADDR_EXP 43
9794: PUSH
9795: LD_INT 1
9797: ST_TO_ADDR
// def_amount_of_people := 2 ;
9798: LD_ADDR_EXP 44
9802: PUSH
9803: LD_INT 2
9805: ST_TO_ADDR
// def_skill_level := 3 ;
9806: LD_ADDR_EXP 45
9810: PUSH
9811: LD_INT 3
9813: ST_TO_ADDR
// def_starting_resources := 3 ;
9814: LD_ADDR_EXP 46
9818: PUSH
9819: LD_INT 3
9821: ST_TO_ADDR
// def_shipments_density := 2 ;
9822: LD_ADDR_EXP 47
9826: PUSH
9827: LD_INT 2
9829: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9830: LD_ADDR_EXP 48
9834: PUSH
9835: LD_INT 1
9837: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9838: LD_ADDR_EXP 49
9842: PUSH
9843: LD_INT 2
9845: ST_TO_ADDR
// def_shared_vision := 1 ;
9846: LD_ADDR_EXP 50
9850: PUSH
9851: LD_INT 1
9853: ST_TO_ADDR
// def_morale_flags := 0 ;
9854: LD_ADDR_EXP 51
9858: PUSH
9859: LD_INT 0
9861: ST_TO_ADDR
// def_siberite_detection := 1 ;
9862: LD_ADDR_EXP 52
9866: PUSH
9867: LD_INT 1
9869: ST_TO_ADDR
// def_people_respawning := 0 ;
9870: LD_ADDR_EXP 53
9874: PUSH
9875: LD_INT 0
9877: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9878: LD_ADDR_EXP 54
9882: PUSH
9883: LD_INT 0
9885: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9886: LD_ADDR_EXP 55
9890: PUSH
9891: LD_INT 0
9893: ST_TO_ADDR
// def_builduptime := 2 ;
9894: LD_ADDR_EXP 56
9898: PUSH
9899: LD_INT 2
9901: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9902: LD_ADDR_VAR 0 2
9906: PUSH
9907: LD_INT 1
9909: PUSH
9910: EMPTY
9911: LIST
9912: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9913: LD_ADDR_VAR 0 3
9917: PUSH
9918: EMPTY
9919: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9920: LD_ADDR_LOC 18
9924: PUSH
9925: EMPTY
9926: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9927: LD_ADDR_LOC 19
9931: PUSH
9932: EMPTY
9933: ST_TO_ADDR
// Banned_Controls := [ ] ;
9934: LD_ADDR_LOC 20
9938: PUSH
9939: EMPTY
9940: ST_TO_ADDR
// Banned_Engines := [ ] ;
9941: LD_ADDR_LOC 21
9945: PUSH
9946: EMPTY
9947: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9948: LD_ADDR_LOC 16
9952: PUSH
9953: LD_INT 4
9955: PUSH
9956: LD_INT 5
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 31
9965: PUSH
9966: LD_INT 32
9968: PUSH
9969: LD_INT 33
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9981: LD_ADDR_LOC 17
9985: PUSH
9986: LD_INT 1
9988: PUSH
9989: LD_INT 2
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: ST_TO_ADDR
// end ; 3 :
9996: GO 11515
9998: LD_INT 3
10000: DOUBLE
10001: EQUAL
10002: IFTRUE 10006
10004: GO 10249
10006: POP
// begin def_base_level := 1 ;
10007: LD_ADDR_EXP 43
10011: PUSH
10012: LD_INT 1
10014: ST_TO_ADDR
// def_amount_of_people := 2 ;
10015: LD_ADDR_EXP 44
10019: PUSH
10020: LD_INT 2
10022: ST_TO_ADDR
// def_skill_level := 3 ;
10023: LD_ADDR_EXP 45
10027: PUSH
10028: LD_INT 3
10030: ST_TO_ADDR
// def_starting_resources := 3 ;
10031: LD_ADDR_EXP 46
10035: PUSH
10036: LD_INT 3
10038: ST_TO_ADDR
// def_shipments_density := 1 ;
10039: LD_ADDR_EXP 47
10043: PUSH
10044: LD_INT 1
10046: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10047: LD_ADDR_EXP 48
10051: PUSH
10052: LD_INT 0
10054: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10055: LD_ADDR_EXP 49
10059: PUSH
10060: LD_INT 1
10062: ST_TO_ADDR
// def_shared_vision := 1 ;
10063: LD_ADDR_EXP 50
10067: PUSH
10068: LD_INT 1
10070: ST_TO_ADDR
// def_morale_flags := 0 ;
10071: LD_ADDR_EXP 51
10075: PUSH
10076: LD_INT 0
10078: ST_TO_ADDR
// def_siberite_detection := 1 ;
10079: LD_ADDR_EXP 52
10083: PUSH
10084: LD_INT 1
10086: ST_TO_ADDR
// def_people_respawning := 0 ;
10087: LD_ADDR_EXP 53
10091: PUSH
10092: LD_INT 0
10094: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10095: LD_ADDR_EXP 54
10099: PUSH
10100: LD_INT 2
10102: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10103: LD_ADDR_EXP 55
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// def_builduptime := 1 ;
10111: LD_ADDR_EXP 56
10115: PUSH
10116: LD_INT 1
10118: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10119: LD_ADDR_VAR 0 2
10123: PUSH
10124: LD_INT 23
10126: PUSH
10127: EMPTY
10128: LIST
10129: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
10130: LD_ADDR_VAR 0 3
10134: PUSH
10135: LD_INT 2
10137: PUSH
10138: LD_INT 37
10140: PUSH
10141: LD_INT 32
10143: PUSH
10144: LD_INT 33
10146: PUSH
10147: LD_INT 36
10149: PUSH
10150: LD_INT 16
10152: PUSH
10153: LD_INT 23
10155: PUSH
10156: LD_INT 21
10158: PUSH
10159: LD_INT 18
10161: PUSH
10162: LD_INT 22
10164: PUSH
10165: LD_INT 20
10167: PUSH
10168: LD_INT 19
10170: PUSH
10171: LD_INT 25
10173: PUSH
10174: LD_INT 17
10176: PUSH
10177: LD_INT 24
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10197: LD_ADDR_LOC 18
10201: PUSH
10202: EMPTY
10203: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10204: LD_ADDR_LOC 19
10208: PUSH
10209: EMPTY
10210: ST_TO_ADDR
// Banned_Controls := [ ] ;
10211: LD_ADDR_LOC 20
10215: PUSH
10216: EMPTY
10217: ST_TO_ADDR
// Banned_Engines := [ ] ;
10218: LD_ADDR_LOC 21
10222: PUSH
10223: EMPTY
10224: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10225: LD_ADDR_LOC 16
10229: PUSH
10230: EMPTY
10231: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10232: LD_ADDR_LOC 17
10236: PUSH
10237: EMPTY
10238: ST_TO_ADDR
// No_Mechs := true ;
10239: LD_ADDR_EXP 57
10243: PUSH
10244: LD_INT 1
10246: ST_TO_ADDR
// end ; 4 :
10247: GO 11515
10249: LD_INT 4
10251: DOUBLE
10252: EQUAL
10253: IFTRUE 10257
10255: GO 10432
10257: POP
// begin def_base_level := 1 ;
10258: LD_ADDR_EXP 43
10262: PUSH
10263: LD_INT 1
10265: ST_TO_ADDR
// def_amount_of_people := 2 ;
10266: LD_ADDR_EXP 44
10270: PUSH
10271: LD_INT 2
10273: ST_TO_ADDR
// def_skill_level := 3 ;
10274: LD_ADDR_EXP 45
10278: PUSH
10279: LD_INT 3
10281: ST_TO_ADDR
// def_starting_resources := 3 ;
10282: LD_ADDR_EXP 46
10286: PUSH
10287: LD_INT 3
10289: ST_TO_ADDR
// def_shipments_density := 2 ;
10290: LD_ADDR_EXP 47
10294: PUSH
10295: LD_INT 2
10297: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10298: LD_ADDR_EXP 48
10302: PUSH
10303: LD_INT 1
10305: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10306: LD_ADDR_EXP 49
10310: PUSH
10311: LD_INT 2
10313: ST_TO_ADDR
// def_shared_vision := 1 ;
10314: LD_ADDR_EXP 50
10318: PUSH
10319: LD_INT 1
10321: ST_TO_ADDR
// def_morale_flags := 0 ;
10322: LD_ADDR_EXP 51
10326: PUSH
10327: LD_INT 0
10329: ST_TO_ADDR
// def_siberite_detection := 1 ;
10330: LD_ADDR_EXP 52
10334: PUSH
10335: LD_INT 1
10337: ST_TO_ADDR
// def_people_respawning := 0 ;
10338: LD_ADDR_EXP 53
10342: PUSH
10343: LD_INT 0
10345: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10346: LD_ADDR_EXP 54
10350: PUSH
10351: LD_INT 0
10353: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10354: LD_ADDR_EXP 55
10358: PUSH
10359: LD_INT 1
10361: ST_TO_ADDR
// def_builduptime := 3 ;
10362: LD_ADDR_EXP 56
10366: PUSH
10367: LD_INT 3
10369: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10370: LD_ADDR_VAR 0 2
10374: PUSH
10375: LD_INT 1
10377: PUSH
10378: EMPTY
10379: LIST
10380: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10381: LD_ADDR_VAR 0 3
10385: PUSH
10386: EMPTY
10387: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10388: LD_ADDR_LOC 18
10392: PUSH
10393: EMPTY
10394: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10395: LD_ADDR_LOC 19
10399: PUSH
10400: EMPTY
10401: ST_TO_ADDR
// Banned_Controls := [ ] ;
10402: LD_ADDR_LOC 20
10406: PUSH
10407: EMPTY
10408: ST_TO_ADDR
// Banned_Engines := [ ] ;
10409: LD_ADDR_LOC 21
10413: PUSH
10414: EMPTY
10415: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10416: LD_ADDR_LOC 16
10420: PUSH
10421: EMPTY
10422: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10423: LD_ADDR_LOC 17
10427: PUSH
10428: EMPTY
10429: ST_TO_ADDR
// end ; 5 :
10430: GO 11515
10432: LD_INT 5
10434: DOUBLE
10435: EQUAL
10436: IFTRUE 10440
10438: GO 10689
10440: POP
// begin def_base_level := 0 ;
10441: LD_ADDR_EXP 43
10445: PUSH
10446: LD_INT 0
10448: ST_TO_ADDR
// def_amount_of_people := 0 ;
10449: LD_ADDR_EXP 44
10453: PUSH
10454: LD_INT 0
10456: ST_TO_ADDR
// def_skill_level := 0 ;
10457: LD_ADDR_EXP 45
10461: PUSH
10462: LD_INT 0
10464: ST_TO_ADDR
// def_starting_resources := 0 ;
10465: LD_ADDR_EXP 46
10469: PUSH
10470: LD_INT 0
10472: ST_TO_ADDR
// def_shipments_density := 0 ;
10473: LD_ADDR_EXP 47
10477: PUSH
10478: LD_INT 0
10480: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10481: LD_ADDR_EXP 48
10485: PUSH
10486: LD_INT 0
10488: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10489: LD_ADDR_EXP 49
10493: PUSH
10494: LD_INT 0
10496: ST_TO_ADDR
// def_shared_vision := 1 ;
10497: LD_ADDR_EXP 50
10501: PUSH
10502: LD_INT 1
10504: ST_TO_ADDR
// def_morale_flags := 0 ;
10505: LD_ADDR_EXP 51
10509: PUSH
10510: LD_INT 0
10512: ST_TO_ADDR
// def_siberite_detection := 0 ;
10513: LD_ADDR_EXP 52
10517: PUSH
10518: LD_INT 0
10520: ST_TO_ADDR
// def_people_respawning := 1 ;
10521: LD_ADDR_EXP 53
10525: PUSH
10526: LD_INT 1
10528: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10529: LD_ADDR_EXP 54
10533: PUSH
10534: LD_INT 1
10536: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10537: LD_ADDR_EXP 55
10541: PUSH
10542: LD_INT 0
10544: ST_TO_ADDR
// def_builduptime := 0 ;
10545: LD_ADDR_EXP 56
10549: PUSH
10550: LD_INT 0
10552: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10553: LD_ADDR_VAR 0 2
10557: PUSH
10558: LD_INT 10
10560: PUSH
10561: LD_INT 3
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10568: LD_ADDR_VAR 0 3
10572: PUSH
10573: LD_INT 12
10575: PUSH
10576: LD_INT 11
10578: PUSH
10579: LD_INT 14
10581: PUSH
10582: LD_INT 13
10584: PUSH
10585: LD_INT 5
10587: PUSH
10588: LD_INT 24
10590: PUSH
10591: LD_INT 21
10593: PUSH
10594: LD_INT 33
10596: PUSH
10597: LD_INT 36
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10611: LD_ADDR_LOC 18
10615: PUSH
10616: LD_INT 31
10618: PUSH
10619: EMPTY
10620: LIST
10621: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10622: LD_ADDR_LOC 19
10626: PUSH
10627: EMPTY
10628: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10629: LD_ADDR_LOC 20
10633: PUSH
10634: LD_INT 2
10636: PUSH
10637: EMPTY
10638: LIST
10639: ST_TO_ADDR
// Banned_Engines := [ ] ;
10640: LD_ADDR_LOC 21
10644: PUSH
10645: EMPTY
10646: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10647: LD_ADDR_LOC 16
10651: PUSH
10652: LD_INT 4
10654: PUSH
10655: EMPTY
10656: LIST
10657: PUSH
10658: LD_INT 31
10660: PUSH
10661: LD_INT 32
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10672: LD_ADDR_LOC 17
10676: PUSH
10677: LD_INT 1
10679: PUSH
10680: LD_INT 1
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: ST_TO_ADDR
// end ; 6 :
10687: GO 11515
10689: LD_INT 6
10691: DOUBLE
10692: EQUAL
10693: IFTRUE 10697
10695: GO 10900
10697: POP
// begin def_base_level := 1 ;
10698: LD_ADDR_EXP 43
10702: PUSH
10703: LD_INT 1
10705: ST_TO_ADDR
// def_amount_of_people := 2 ;
10706: LD_ADDR_EXP 44
10710: PUSH
10711: LD_INT 2
10713: ST_TO_ADDR
// def_skill_level := 3 ;
10714: LD_ADDR_EXP 45
10718: PUSH
10719: LD_INT 3
10721: ST_TO_ADDR
// def_starting_resources := 3 ;
10722: LD_ADDR_EXP 46
10726: PUSH
10727: LD_INT 3
10729: ST_TO_ADDR
// def_shipments_density := 1 ;
10730: LD_ADDR_EXP 47
10734: PUSH
10735: LD_INT 1
10737: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10738: LD_ADDR_EXP 48
10742: PUSH
10743: LD_INT 0
10745: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10746: LD_ADDR_EXP 49
10750: PUSH
10751: LD_INT 1
10753: ST_TO_ADDR
// def_shared_vision := 1 ;
10754: LD_ADDR_EXP 50
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// def_morale_flags := 0 ;
10762: LD_ADDR_EXP 51
10766: PUSH
10767: LD_INT 0
10769: ST_TO_ADDR
// def_siberite_detection := 1 ;
10770: LD_ADDR_EXP 52
10774: PUSH
10775: LD_INT 1
10777: ST_TO_ADDR
// def_people_respawning := 2 ;
10778: LD_ADDR_EXP 53
10782: PUSH
10783: LD_INT 2
10785: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10786: LD_ADDR_EXP 54
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10794: LD_ADDR_EXP 55
10798: PUSH
10799: LD_INT 0
10801: ST_TO_ADDR
// def_builduptime := 1 ;
10802: LD_ADDR_EXP 56
10806: PUSH
10807: LD_INT 1
10809: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10810: LD_ADDR_VAR 0 2
10814: PUSH
10815: LD_INT 23
10817: PUSH
10818: EMPTY
10819: LIST
10820: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_INT 2
10828: PUSH
10829: LD_INT 37
10831: PUSH
10832: LD_INT 31
10834: PUSH
10835: LD_INT 32
10837: PUSH
10838: LD_INT 33
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10848: LD_ADDR_LOC 18
10852: PUSH
10853: EMPTY
10854: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10855: LD_ADDR_LOC 19
10859: PUSH
10860: EMPTY
10861: ST_TO_ADDR
// Banned_Controls := [ ] ;
10862: LD_ADDR_LOC 20
10866: PUSH
10867: EMPTY
10868: ST_TO_ADDR
// Banned_Engines := [ ] ;
10869: LD_ADDR_LOC 21
10873: PUSH
10874: EMPTY
10875: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10876: LD_ADDR_LOC 16
10880: PUSH
10881: EMPTY
10882: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10883: LD_ADDR_LOC 17
10887: PUSH
10888: EMPTY
10889: ST_TO_ADDR
// No_Mechs := true ;
10890: LD_ADDR_EXP 57
10894: PUSH
10895: LD_INT 1
10897: ST_TO_ADDR
// end ; 7 :
10898: GO 11515
10900: LD_INT 7
10902: DOUBLE
10903: EQUAL
10904: IFTRUE 10908
10906: GO 11106
10908: POP
// begin def_base_level := 1 ;
10909: LD_ADDR_EXP 43
10913: PUSH
10914: LD_INT 1
10916: ST_TO_ADDR
// def_amount_of_people := 2 ;
10917: LD_ADDR_EXP 44
10921: PUSH
10922: LD_INT 2
10924: ST_TO_ADDR
// def_skill_level := 3 ;
10925: LD_ADDR_EXP 45
10929: PUSH
10930: LD_INT 3
10932: ST_TO_ADDR
// def_starting_resources := 3 ;
10933: LD_ADDR_EXP 46
10937: PUSH
10938: LD_INT 3
10940: ST_TO_ADDR
// def_shipments_density := 1 ;
10941: LD_ADDR_EXP 47
10945: PUSH
10946: LD_INT 1
10948: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10949: LD_ADDR_EXP 48
10953: PUSH
10954: LD_INT 1
10956: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10957: LD_ADDR_EXP 49
10961: PUSH
10962: LD_INT 2
10964: ST_TO_ADDR
// def_shared_vision := 1 ;
10965: LD_ADDR_EXP 50
10969: PUSH
10970: LD_INT 1
10972: ST_TO_ADDR
// def_morale_flags := 0 ;
10973: LD_ADDR_EXP 51
10977: PUSH
10978: LD_INT 0
10980: ST_TO_ADDR
// def_siberite_detection := 1 ;
10981: LD_ADDR_EXP 52
10985: PUSH
10986: LD_INT 1
10988: ST_TO_ADDR
// def_people_respawning := 0 ;
10989: LD_ADDR_EXP 53
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10997: LD_ADDR_EXP 54
11001: PUSH
11002: LD_INT 1
11004: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11005: LD_ADDR_EXP 55
11009: PUSH
11010: LD_INT 0
11012: ST_TO_ADDR
// def_builduptime := 3 ;
11013: LD_ADDR_EXP 56
11017: PUSH
11018: LD_INT 3
11020: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11021: LD_ADDR_VAR 0 2
11025: PUSH
11026: LD_INT 23
11028: PUSH
11029: EMPTY
11030: LIST
11031: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
11032: LD_ADDR_VAR 0 3
11036: PUSH
11037: LD_INT 37
11039: PUSH
11040: EMPTY
11041: LIST
11042: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11043: LD_ADDR_LOC 18
11047: PUSH
11048: EMPTY
11049: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11050: LD_ADDR_LOC 19
11054: PUSH
11055: EMPTY
11056: ST_TO_ADDR
// Banned_Controls := [ ] ;
11057: LD_ADDR_LOC 20
11061: PUSH
11062: EMPTY
11063: ST_TO_ADDR
// Banned_Engines := [ ] ;
11064: LD_ADDR_LOC 21
11068: PUSH
11069: EMPTY
11070: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11071: LD_ADDR_LOC 16
11075: PUSH
11076: LD_INT 31
11078: PUSH
11079: LD_INT 32
11081: PUSH
11082: LD_INT 33
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
11093: LD_ADDR_LOC 17
11097: PUSH
11098: LD_INT 10
11100: PUSH
11101: EMPTY
11102: LIST
11103: ST_TO_ADDR
// end ; 8 :
11104: GO 11515
11106: LD_INT 8
11108: DOUBLE
11109: EQUAL
11110: IFTRUE 11114
11112: GO 11514
11114: POP
// begin def_base_level := 0 ;
11115: LD_ADDR_EXP 43
11119: PUSH
11120: LD_INT 0
11122: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
11123: LD_ADDR_EXP 44
11127: PUSH
11128: LD_INT 0
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 12
11138: ST_TO_ADDR
// def_skill_level := 0 ;
11139: LD_ADDR_EXP 45
11143: PUSH
11144: LD_INT 0
11146: ST_TO_ADDR
// def_starting_resources := 2 ;
11147: LD_ADDR_EXP 46
11151: PUSH
11152: LD_INT 2
11154: ST_TO_ADDR
// def_shipments_density := 1 ;
11155: LD_ADDR_EXP 47
11159: PUSH
11160: LD_INT 1
11162: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11163: LD_ADDR_EXP 48
11167: PUSH
11168: LD_INT 0
11170: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11171: LD_ADDR_EXP 49
11175: PUSH
11176: LD_INT 0
11178: ST_TO_ADDR
// def_shared_vision := 1 ;
11179: LD_ADDR_EXP 50
11183: PUSH
11184: LD_INT 1
11186: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11187: LD_ADDR_EXP 51
11191: PUSH
11192: LD_INT 0
11194: PPUSH
11195: LD_INT 2
11197: PPUSH
11198: CALL_OW 12
11202: ST_TO_ADDR
// def_siberite_detection := 0 ;
11203: LD_ADDR_EXP 52
11207: PUSH
11208: LD_INT 0
11210: ST_TO_ADDR
// def_people_respawning := 0 ;
11211: LD_ADDR_EXP 53
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11219: LD_ADDR_EXP 54
11223: PUSH
11224: LD_INT 2
11226: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11227: LD_ADDR_EXP 55
11231: PUSH
11232: LD_INT 0
11234: ST_TO_ADDR
// def_builduptime := 0 ;
11235: LD_ADDR_EXP 56
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11243: LD_ADDR_VAR 0 2
11247: PUSH
11248: LD_INT 23
11250: PUSH
11251: LD_INT 20
11253: PUSH
11254: LD_INT 40
11256: PUSH
11257: LD_INT 47
11259: PUSH
11260: LD_INT 46
11262: PUSH
11263: LD_INT 39
11265: PUSH
11266: LD_INT 71
11268: PUSH
11269: LD_INT 34
11271: PUSH
11272: LD_INT 41
11274: PUSH
11275: LD_INT 44
11277: PUSH
11278: LD_INT 17
11280: PUSH
11281: LD_INT 16
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11298: LD_ADDR_VAR 0 3
11302: PUSH
11303: LD_INT 37
11305: PUSH
11306: LD_INT 5
11308: PUSH
11309: LD_INT 13
11311: PUSH
11312: LD_INT 34
11314: PUSH
11315: LD_INT 12
11317: PUSH
11318: LD_INT 15
11320: PUSH
11321: LD_INT 11
11323: PUSH
11324: LD_INT 14
11326: PUSH
11327: LD_INT 29
11329: PUSH
11330: LD_INT 30
11332: PUSH
11333: LD_INT 28
11335: PUSH
11336: LD_INT 24
11338: PUSH
11339: LD_INT 25
11341: PUSH
11342: LD_INT 20
11344: PUSH
11345: LD_INT 21
11347: PUSH
11348: LD_INT 22
11350: PUSH
11351: LD_INT 36
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11373: LD_ADDR_LOC 18
11377: PUSH
11378: EMPTY
11379: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11380: LD_ADDR_LOC 19
11384: PUSH
11385: LD_INT 14
11387: PUSH
11388: EMPTY
11389: LIST
11390: ST_TO_ADDR
// Banned_Controls := [ ] ;
11391: LD_ADDR_LOC 20
11395: PUSH
11396: EMPTY
11397: ST_TO_ADDR
// Banned_Engines := [ ] ;
11398: LD_ADDR_LOC 21
11402: PUSH
11403: EMPTY
11404: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11405: LD_ADDR_LOC 16
11409: PUSH
11410: LD_INT 31
11412: PUSH
11413: LD_INT 32
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 4
11422: PUSH
11423: EMPTY
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11430: LD_ADDR_LOC 17
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: LD_INT 1
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: ST_TO_ADDR
// for i := 1 to 8 do
11445: LD_ADDR_VAR 0 4
11449: PUSH
11450: DOUBLE
11451: LD_INT 1
11453: DEC
11454: ST_TO_ADDR
11455: LD_INT 8
11457: PUSH
11458: FOR_TO
11459: IFFALSE 11510
// if ( Side_Nations [ i ] = 3 ) then
11461: LD_EXP 22
11465: PUSH
11466: LD_VAR 0 4
11470: ARRAY
11471: PUSH
11472: LD_INT 3
11474: EQUAL
11475: IFFALSE 11508
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11477: LD_ADDR_EXP 22
11481: PUSH
11482: LD_EXP 22
11486: PPUSH
11487: LD_VAR 0 4
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: LD_INT 2
11497: PPUSH
11498: CALL_OW 12
11502: PPUSH
11503: CALL_OW 1
11507: ST_TO_ADDR
11508: GO 11458
11510: POP
11511: POP
// end ; end ;
11512: GO 11515
11514: POP
// for i := 1 to 8 do
11515: LD_ADDR_VAR 0 4
11519: PUSH
11520: DOUBLE
11521: LD_INT 1
11523: DEC
11524: ST_TO_ADDR
11525: LD_INT 8
11527: PUSH
11528: FOR_TO
11529: IFFALSE 11613
// if Side_Positions [ i ] then
11531: LD_EXP 21
11535: PUSH
11536: LD_VAR 0 4
11540: ARRAY
11541: IFFALSE 11611
// begin for j in Unavailable_Techs do
11543: LD_ADDR_VAR 0 5
11547: PUSH
11548: LD_VAR 0 2
11552: PUSH
11553: FOR_IN
11554: IFFALSE 11575
// SetTech ( j , i , 0 ) ;
11556: LD_VAR 0 5
11560: PPUSH
11561: LD_VAR 0 4
11565: PPUSH
11566: LD_INT 0
11568: PPUSH
11569: CALL_OW 322
11573: GO 11553
11575: POP
11576: POP
// for j in Unavailable_Builds do
11577: LD_ADDR_VAR 0 5
11581: PUSH
11582: LD_VAR 0 3
11586: PUSH
11587: FOR_IN
11588: IFFALSE 11609
// SetRestrict ( j , i , 0 ) ;
11590: LD_VAR 0 5
11594: PPUSH
11595: LD_VAR 0 4
11599: PPUSH
11600: LD_INT 0
11602: PPUSH
11603: CALL_OW 324
11607: GO 11587
11609: POP
11610: POP
// end ;
11611: GO 11528
11613: POP
11614: POP
// end ;
11615: LD_VAR 0 1
11619: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11620: LD_INT 0
11622: PPUSH
11623: PPUSH
11624: PPUSH
11625: PPUSH
11626: PPUSH
11627: PPUSH
11628: PPUSH
// for i := 1 to Restricted_Builds do
11629: LD_ADDR_VAR 0 2
11633: PUSH
11634: DOUBLE
11635: LD_INT 1
11637: DEC
11638: ST_TO_ADDR
11639: LD_LOC 16
11643: PUSH
11644: FOR_TO
11645: IFFALSE 11955
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11647: LD_LOC 16
11651: PUSH
11652: LD_VAR 0 2
11656: ARRAY
11657: PUSH
11658: LD_INT 1
11660: ARRAY
11661: PUSH
11662: LD_INT 31
11664: DOUBLE
11665: EQUAL
11666: IFTRUE 11682
11668: LD_INT 32
11670: DOUBLE
11671: EQUAL
11672: IFTRUE 11682
11674: LD_INT 33
11676: DOUBLE
11677: EQUAL
11678: IFTRUE 11682
11680: GO 11693
11682: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11683: LD_ADDR_VAR 0 6
11687: PUSH
11688: LD_STRING #Turrets
11690: ST_TO_ADDR
11691: GO 11738
11693: LD_INT 4
11695: DOUBLE
11696: EQUAL
11697: IFTRUE 11707
11699: LD_INT 5
11701: DOUBLE
11702: EQUAL
11703: IFTRUE 11707
11705: GO 11718
11707: POP
// btype := #Armouries ; b_Behemoth :
11708: LD_ADDR_VAR 0 6
11712: PUSH
11713: LD_STRING #Armouries
11715: ST_TO_ADDR
11716: GO 11738
11718: LD_INT 37
11720: DOUBLE
11721: EQUAL
11722: IFTRUE 11726
11724: GO 11737
11726: POP
// btype := #Behemoths ; end ;
11727: LD_ADDR_VAR 0 6
11731: PUSH
11732: LD_STRING #Behemoths
11734: ST_TO_ADDR
11735: GO 11738
11737: POP
// list := [ ] ;
11738: LD_ADDR_VAR 0 7
11742: PUSH
11743: EMPTY
11744: ST_TO_ADDR
// for j := 1 to 8 do
11745: LD_ADDR_VAR 0 3
11749: PUSH
11750: DOUBLE
11751: LD_INT 1
11753: DEC
11754: ST_TO_ADDR
11755: LD_INT 8
11757: PUSH
11758: FOR_TO
11759: IFFALSE 11852
// if Side_Positions [ j ] then
11761: LD_EXP 21
11765: PUSH
11766: LD_VAR 0 3
11770: ARRAY
11771: IFFALSE 11850
// begin amount := 0 ;
11773: LD_ADDR_VAR 0 5
11777: PUSH
11778: LD_INT 0
11780: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11781: LD_ADDR_VAR 0 4
11785: PUSH
11786: LD_LOC 16
11790: PUSH
11791: LD_VAR 0 2
11795: ARRAY
11796: PUSH
11797: FOR_IN
11798: IFFALSE 11846
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11800: LD_ADDR_VAR 0 5
11804: PUSH
11805: LD_VAR 0 5
11809: PUSH
11810: LD_INT 22
11812: PUSH
11813: LD_VAR 0 3
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: LD_INT 30
11824: PUSH
11825: LD_VAR 0 4
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PPUSH
11838: CALL_OW 69
11842: PLUS
11843: ST_TO_ADDR
11844: GO 11797
11846: POP
11847: POP
// break ;
11848: GO 11852
// end ;
11850: GO 11758
11852: POP
11853: POP
// list := [ ] ;
11854: LD_ADDR_VAR 0 7
11858: PUSH
11859: EMPTY
11860: ST_TO_ADDR
// for j := 1 to 8 do
11861: LD_ADDR_VAR 0 3
11865: PUSH
11866: DOUBLE
11867: LD_INT 1
11869: DEC
11870: ST_TO_ADDR
11871: LD_INT 8
11873: PUSH
11874: FOR_TO
11875: IFFALSE 11895
// list := list ^ amount ;
11877: LD_ADDR_VAR 0 7
11881: PUSH
11882: LD_VAR 0 7
11886: PUSH
11887: LD_VAR 0 5
11891: ADD
11892: ST_TO_ADDR
11893: GO 11874
11895: POP
11896: POP
// Already_Built := Already_Built ^ [ list ] ;
11897: LD_ADDR_LOC 22
11901: PUSH
11902: LD_LOC 22
11906: PUSH
11907: LD_VAR 0 7
11911: PUSH
11912: EMPTY
11913: LIST
11914: ADD
11915: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11916: LD_ADDR_LOC 23
11920: PUSH
11921: LD_LOC 23
11925: PUSH
11926: LD_VAR 0 6
11930: PUSH
11931: LD_VAR 0 5
11935: PUSH
11936: LD_LOC 17
11940: PUSH
11941: LD_VAR 0 2
11945: ARRAY
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: LIST
11951: ADD
11952: ST_TO_ADDR
// end ;
11953: GO 11644
11955: POP
11956: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11957: LD_ADDR_LOC 24
11961: PUSH
11962: LD_INT 0
11964: PUSH
11965: LD_INT 0
11967: PUSH
11968: LD_INT 0
11970: PUSH
11971: LD_INT 0
11973: PUSH
11974: LD_INT 0
11976: PUSH
11977: LD_INT 0
11979: PUSH
11980: LD_INT 0
11982: PUSH
11983: LD_INT 0
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: ST_TO_ADDR
// if Limits_Info then
11996: LD_LOC 23
12000: IFFALSE 12016
// Limits_Info := #Limits ^ Limits_Info ;
12002: LD_ADDR_LOC 23
12006: PUSH
12007: LD_STRING #Limits
12009: PUSH
12010: LD_LOC 23
12014: ADD
12015: ST_TO_ADDR
// end ;
12016: LD_VAR 0 1
12020: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
12021: LD_INT 0
12023: PPUSH
12024: PPUSH
12025: PPUSH
12026: PPUSH
// for i := 1 to Restricted_Builds do
12027: LD_ADDR_VAR 0 7
12031: PUSH
12032: DOUBLE
12033: LD_INT 1
12035: DEC
12036: ST_TO_ADDR
12037: LD_LOC 16
12041: PUSH
12042: FOR_TO
12043: IFFALSE 12466
// if BType in Restricted_Builds [ i ] then
12045: LD_VAR 0 2
12049: PUSH
12050: LD_LOC 16
12054: PUSH
12055: LD_VAR 0 7
12059: ARRAY
12060: IN
12061: IFFALSE 12464
// begin if old_side then
12063: LD_VAR 0 4
12067: IFFALSE 12193
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
12069: LD_LOC 22
12073: PUSH
12074: LD_VAR 0 7
12078: ARRAY
12079: PUSH
12080: LD_VAR 0 3
12084: ARRAY
12085: PUSH
12086: LD_VAR 0 5
12090: PLUS
12091: PUSH
12092: LD_LOC 17
12096: PUSH
12097: LD_VAR 0 7
12101: ARRAY
12102: GREATER
12103: IFFALSE 12129
// begin SetSide ( un , old_side ) ;
12105: LD_VAR 0 1
12109: PPUSH
12110: LD_VAR 0 4
12114: PPUSH
12115: CALL_OW 235
// count := 0 ;
12119: LD_ADDR_VAR 0 5
12123: PUSH
12124: LD_INT 0
12126: ST_TO_ADDR
// end else
12127: GO 12193
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
12129: LD_ADDR_LOC 22
12133: PUSH
12134: LD_LOC 22
12138: PPUSH
12139: LD_VAR 0 7
12143: PPUSH
12144: LD_LOC 22
12148: PUSH
12149: LD_VAR 0 7
12153: ARRAY
12154: PPUSH
12155: LD_VAR 0 4
12159: PPUSH
12160: LD_LOC 22
12164: PUSH
12165: LD_VAR 0 7
12169: ARRAY
12170: PUSH
12171: LD_VAR 0 4
12175: ARRAY
12176: PUSH
12177: LD_VAR 0 5
12181: MINUS
12182: PPUSH
12183: CALL_OW 1
12187: PPUSH
12188: CALL_OW 1
12192: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12193: LD_ADDR_LOC 22
12197: PUSH
12198: LD_LOC 22
12202: PPUSH
12203: LD_VAR 0 7
12207: PPUSH
12208: LD_LOC 22
12212: PUSH
12213: LD_VAR 0 7
12217: ARRAY
12218: PPUSH
12219: LD_VAR 0 3
12223: PPUSH
12224: LD_LOC 22
12228: PUSH
12229: LD_VAR 0 7
12233: ARRAY
12234: PUSH
12235: LD_VAR 0 3
12239: ARRAY
12240: PUSH
12241: LD_VAR 0 5
12245: PLUS
12246: PPUSH
12247: CALL_OW 1
12251: PPUSH
12252: CALL_OW 1
12256: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12257: LD_VAR 0 5
12261: PUSH
12262: LD_INT 0
12264: NONEQUAL
12265: PUSH
12266: LD_VAR 0 3
12270: PUSH
12271: LD_OWVAR 2
12275: EQUAL
12276: AND
12277: IFFALSE 12320
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12279: LD_ADDR_LOC 23
12283: PUSH
12284: LD_LOC 23
12288: PPUSH
12289: LD_INT 3
12291: PUSH
12292: LD_VAR 0 7
12296: MUL
12297: PPUSH
12298: LD_LOC 22
12302: PUSH
12303: LD_VAR 0 7
12307: ARRAY
12308: PUSH
12309: LD_VAR 0 3
12313: ARRAY
12314: PPUSH
12315: CALL_OW 1
12319: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12320: LD_LOC 22
12324: PUSH
12325: LD_VAR 0 7
12329: ARRAY
12330: PUSH
12331: LD_VAR 0 3
12335: ARRAY
12336: PUSH
12337: LD_LOC 17
12341: PUSH
12342: LD_VAR 0 7
12346: ARRAY
12347: GREATER
12348: IFFALSE 12375
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12350: LD_ADDR_LOC 24
12354: PUSH
12355: LD_LOC 24
12359: PPUSH
12360: LD_VAR 0 3
12364: PPUSH
12365: LD_INT 1
12367: PPUSH
12368: CALL_OW 1
12372: ST_TO_ADDR
// end else
12373: GO 12462
// begin for j := 1 to Restricted_Builds do
12375: LD_ADDR_VAR 0 8
12379: PUSH
12380: DOUBLE
12381: LD_INT 1
12383: DEC
12384: ST_TO_ADDR
12385: LD_LOC 16
12389: PUSH
12390: FOR_TO
12391: IFFALSE 12435
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12393: LD_LOC 22
12397: PUSH
12398: LD_VAR 0 8
12402: ARRAY
12403: PUSH
12404: LD_VAR 0 3
12408: ARRAY
12409: PUSH
12410: LD_LOC 17
12414: PUSH
12415: LD_VAR 0 8
12419: ARRAY
12420: GREATER
12421: IFFALSE 12433
// begin Is_Cheater := true ;
12423: LD_ADDR_VAR 0 9
12427: PUSH
12428: LD_INT 1
12430: ST_TO_ADDR
// break ;
12431: GO 12435
// end ;
12433: GO 12390
12435: POP
12436: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12437: LD_ADDR_LOC 24
12441: PUSH
12442: LD_LOC 24
12446: PPUSH
12447: LD_VAR 0 3
12451: PPUSH
12452: LD_VAR 0 9
12456: PPUSH
12457: CALL_OW 1
12461: ST_TO_ADDR
// end ; break ;
12462: GO 12466
// end ;
12464: GO 12042
12466: POP
12467: POP
// end ;
12468: LD_VAR 0 6
12472: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12473: LD_VAR 0 5
12477: PUSH
12478: LD_LOC 18
12482: IN
12483: PUSH
12484: LD_VAR 0 2
12488: PUSH
12489: LD_LOC 19
12493: IN
12494: OR
12495: PUSH
12496: LD_VAR 0 4
12500: PUSH
12501: LD_LOC 20
12505: IN
12506: OR
12507: PUSH
12508: LD_VAR 0 3
12512: PUSH
12513: LD_LOC 21
12517: IN
12518: OR
12519: IFFALSE 12530
// ComCancel ( factory ) ;
12521: LD_VAR 0 1
12525: PPUSH
12526: CALL_OW 127
// end ;
12530: PPOPN 5
12532: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12533: LD_VAR 0 2
12537: PUSH
12538: LD_LOC 18
12542: IN
12543: IFFALSE 12554
// ComCancel ( building ) ;
12545: LD_VAR 0 1
12549: PPUSH
12550: CALL_OW 127
// end ; end_of_file
12554: PPOPN 2
12556: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
12557: LD_INT 0
12559: PPUSH
12560: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12561: LD_ADDR_VAR 0 2
12565: PUSH
12566: LD_STRING #Multi1x1-Time
12568: PUSH
12569: LD_OWVAR 1
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12578: LD_INT 0
12580: PUSH
12581: LD_EXP 17
12585: PUSH
12586: LD_OWVAR 1
12590: MINUS
12591: LESSEQUAL
12592: IFFALSE 12623
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12594: LD_ADDR_VAR 0 2
12598: PUSH
12599: LD_VAR 0 2
12603: PUSH
12604: LD_STRING #allowedsibbomb
12606: PUSH
12607: LD_EXP 17
12611: PUSH
12612: LD_OWVAR 1
12616: MINUS
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: ADD
12622: ST_TO_ADDR
// if ( ExtraStrings ) then
12623: LD_EXP 58
12627: IFFALSE 12649
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12629: LD_ADDR_VAR 0 2
12633: PUSH
12634: LD_VAR 0 2
12638: PUSH
12639: LD_STRING 
12641: ADD
12642: PUSH
12643: LD_EXP 58
12647: ADD
12648: ST_TO_ADDR
// if ( LimitsStrings ) then
12649: CALL 9397 0 0
12653: IFFALSE 12675
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12655: LD_ADDR_VAR 0 2
12659: PUSH
12660: LD_VAR 0 2
12664: PUSH
12665: LD_STRING 
12667: ADD
12668: PUSH
12669: CALL 9397 0 0
12673: ADD
12674: ST_TO_ADDR
// Display_Strings := AllStrings ;
12675: LD_ADDR_OWVAR 47
12679: PUSH
12680: LD_VAR 0 2
12684: ST_TO_ADDR
// end ;
12685: LD_VAR 0 1
12689: RET
// every 0 0$1 do
12690: GO 12692
12692: DISABLE
// begin ShowTimer ;
12693: CALL 12557 0 0
// enable ;
12697: ENABLE
// end ; end_of_file
12698: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12699: LD_INT 0
12701: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12702: LD_VAR 0 1
12706: PPUSH
12707: CALL_OW 255
12711: PUSH
12712: LD_VAR 0 4
12716: EQUAL
12717: IFFALSE 12736
// begin SetAchievement ( ACH_RAD ) ;
12719: LD_STRING ACH_RAD
12721: PPUSH
12722: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12726: LD_STRING ACH_NL
12728: PPUSH
12729: LD_INT 1
12731: PPUSH
12732: CALL_OW 564
// end end ;
12736: LD_VAR 0 5
12740: RET
// export function SA_Win ( side ) ; begin
12741: LD_INT 0
12743: PPUSH
// case side of 1 :
12744: LD_VAR 0 1
12748: PUSH
12749: LD_INT 1
12751: DOUBLE
12752: EQUAL
12753: IFTRUE 12757
12755: GO 12770
12757: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12758: LD_STRING ACH_AH
12760: PPUSH
12761: LD_INT 1
12763: PPUSH
12764: CALL_OW 564
12768: GO 12933
12770: LD_INT 2
12772: DOUBLE
12773: EQUAL
12774: IFTRUE 12778
12776: GO 12791
12778: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12779: LD_STRING ACH_E
12781: PPUSH
12782: LD_INT 1
12784: PPUSH
12785: CALL_OW 564
12789: GO 12933
12791: LD_INT 3
12793: DOUBLE
12794: EQUAL
12795: IFTRUE 12799
12797: GO 12812
12799: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12800: LD_STRING ACH_OOL
12802: PPUSH
12803: LD_INT 1
12805: PPUSH
12806: CALL_OW 564
12810: GO 12933
12812: LD_INT 1
12814: PUSH
12815: LD_INT 2
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: DOUBLE
12822: EQUAL
12823: IFTRUE 12827
12825: GO 12852
12827: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12828: LD_STRING ACH_AH
12830: PPUSH
12831: LD_REAL  5.00000000000000E-0001
12834: PPUSH
12835: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12839: LD_STRING ACH_E
12841: PPUSH
12842: LD_REAL  5.00000000000000E-0001
12845: PPUSH
12846: CALL_OW 564
// end ; [ 2 , 3 ] :
12850: GO 12933
12852: LD_INT 2
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: DOUBLE
12862: EQUAL
12863: IFTRUE 12867
12865: GO 12892
12867: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12868: LD_STRING ACH_OOL
12870: PPUSH
12871: LD_REAL  5.00000000000000E-0001
12874: PPUSH
12875: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12879: LD_STRING ACH_E
12881: PPUSH
12882: LD_REAL  5.00000000000000E-0001
12885: PPUSH
12886: CALL_OW 564
// end ; [ 3 , 1 ] :
12890: GO 12933
12892: LD_INT 3
12894: PUSH
12895: LD_INT 1
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: DOUBLE
12902: EQUAL
12903: IFTRUE 12907
12905: GO 12932
12907: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12908: LD_STRING ACH_AH
12910: PPUSH
12911: LD_REAL  5.00000000000000E-0001
12914: PPUSH
12915: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12919: LD_STRING ACH_OOL
12921: PPUSH
12922: LD_REAL  5.00000000000000E-0001
12925: PPUSH
12926: CALL_OW 564
// end ; end ;
12930: GO 12933
12932: POP
// end ; end_of_file
12933: LD_VAR 0 2
12937: RET
// export function SetMpTechs ( ) ; var side , i ; begin
12938: LD_INT 0
12940: PPUSH
12941: PPUSH
12942: PPUSH
// for side = 1 to 8 do
12943: LD_ADDR_VAR 0 2
12947: PUSH
12948: DOUBLE
12949: LD_INT 1
12951: DEC
12952: ST_TO_ADDR
12953: LD_INT 8
12955: PUSH
12956: FOR_TO
12957: IFFALSE 13078
// begin for i = 1 to 72 do
12959: LD_ADDR_VAR 0 3
12963: PUSH
12964: DOUBLE
12965: LD_INT 1
12967: DEC
12968: ST_TO_ADDR
12969: LD_INT 72
12971: PUSH
12972: FOR_TO
12973: IFFALSE 13004
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12975: LD_VAR 0 3
12979: PPUSH
12980: LD_VAR 0 2
12984: PPUSH
12985: LD_INT 0
12987: PPUSH
12988: LD_VAR 0 3
12992: PPUSH
12993: CALL_OW 565
12997: PPUSH
12998: CALL_OW 322
13002: GO 12972
13004: POP
13005: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
13006: LD_INT 73
13008: PPUSH
13009: LD_VAR 0 2
13013: PPUSH
13014: LD_INT 0
13016: PPUSH
13017: LD_INT 25
13019: PPUSH
13020: CALL_OW 565
13024: PPUSH
13025: CALL_OW 322
// for i = 0 to 40 do
13029: LD_ADDR_VAR 0 3
13033: PUSH
13034: DOUBLE
13035: LD_INT 0
13037: DEC
13038: ST_TO_ADDR
13039: LD_INT 40
13041: PUSH
13042: FOR_TO
13043: IFFALSE 13074
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
13045: LD_VAR 0 3
13049: PPUSH
13050: LD_VAR 0 2
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: LD_VAR 0 3
13062: PPUSH
13063: CALL_OW 565
13067: PPUSH
13068: CALL_OW 324
13072: GO 13042
13074: POP
13075: POP
// end ;
13076: GO 12956
13078: POP
13079: POP
// end ;
13080: LD_VAR 0 1
13084: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
13085: LD_INT 0
13087: PPUSH
13088: PPUSH
13089: PPUSH
// for side = 1 to 8 do
13090: LD_ADDR_VAR 0 3
13094: PUSH
13095: DOUBLE
13096: LD_INT 1
13098: DEC
13099: ST_TO_ADDR
13100: LD_INT 8
13102: PUSH
13103: FOR_TO
13104: IFFALSE 17100
// begin for i = 1 to 73 do
13106: LD_ADDR_VAR 0 4
13110: PUSH
13111: DOUBLE
13112: LD_INT 1
13114: DEC
13115: ST_TO_ADDR
13116: LD_INT 73
13118: PUSH
13119: FOR_TO
13120: IFFALSE 13141
// SetTech ( i , side , state_disabled ) ;
13122: LD_VAR 0 4
13126: PPUSH
13127: LD_VAR 0 3
13131: PPUSH
13132: LD_INT 0
13134: PPUSH
13135: CALL_OW 322
13139: GO 13119
13141: POP
13142: POP
// for i = 0 to 40 do
13143: LD_ADDR_VAR 0 4
13147: PUSH
13148: DOUBLE
13149: LD_INT 0
13151: DEC
13152: ST_TO_ADDR
13153: LD_INT 40
13155: PUSH
13156: FOR_TO
13157: IFFALSE 13178
// SetRestrict ( i , side , false ) ;
13159: LD_VAR 0 4
13163: PPUSH
13164: LD_VAR 0 3
13168: PPUSH
13169: LD_INT 0
13171: PPUSH
13172: CALL_OW 324
13176: GO 13156
13178: POP
13179: POP
// case level of 1 :
13180: LD_VAR 0 1
13184: PUSH
13185: LD_INT 1
13187: DOUBLE
13188: EQUAL
13189: IFTRUE 13193
13191: GO 13346
13193: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13194: LD_INT 35
13196: PPUSH
13197: LD_VAR 0 3
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13209: LD_INT 45
13211: PPUSH
13212: LD_VAR 0 3
13216: PPUSH
13217: LD_INT 1
13219: PPUSH
13220: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13224: LD_INT 46
13226: PPUSH
13227: LD_VAR 0 3
13231: PPUSH
13232: LD_INT 1
13234: PPUSH
13235: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13239: LD_INT 47
13241: PPUSH
13242: LD_VAR 0 3
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13254: LD_INT 0
13256: PPUSH
13257: LD_VAR 0 3
13261: PPUSH
13262: LD_INT 1
13264: PPUSH
13265: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13269: LD_INT 2
13271: PPUSH
13272: LD_VAR 0 3
13276: PPUSH
13277: LD_INT 1
13279: PPUSH
13280: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13284: LD_INT 4
13286: PPUSH
13287: LD_VAR 0 3
13291: PPUSH
13292: LD_INT 1
13294: PPUSH
13295: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13299: LD_INT 6
13301: PPUSH
13302: LD_VAR 0 3
13306: PPUSH
13307: LD_INT 1
13309: PPUSH
13310: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13314: LD_INT 29
13316: PPUSH
13317: LD_VAR 0 3
13321: PPUSH
13322: LD_INT 1
13324: PPUSH
13325: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13329: LD_INT 31
13331: PPUSH
13332: LD_VAR 0 3
13336: PPUSH
13337: LD_INT 1
13339: PPUSH
13340: CALL_OW 324
// end ; 2 :
13344: GO 17098
13346: LD_INT 2
13348: DOUBLE
13349: EQUAL
13350: IFTRUE 13354
13352: GO 13552
13354: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13355: LD_INT 35
13357: PPUSH
13358: LD_VAR 0 3
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13370: LD_INT 45
13372: PPUSH
13373: LD_VAR 0 3
13377: PPUSH
13378: LD_INT 1
13380: PPUSH
13381: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13385: LD_INT 46
13387: PPUSH
13388: LD_VAR 0 3
13392: PPUSH
13393: LD_INT 1
13395: PPUSH
13396: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13400: LD_INT 47
13402: PPUSH
13403: LD_VAR 0 3
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13415: LD_INT 1
13417: PPUSH
13418: LD_VAR 0 3
13422: PPUSH
13423: LD_INT 1
13425: PPUSH
13426: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13430: LD_INT 2
13432: PPUSH
13433: LD_VAR 0 3
13437: PPUSH
13438: LD_INT 1
13440: PPUSH
13441: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13445: LD_INT 11
13447: PPUSH
13448: LD_VAR 0 3
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13460: LD_INT 0
13462: PPUSH
13463: LD_VAR 0 3
13467: PPUSH
13468: LD_INT 1
13470: PPUSH
13471: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13475: LD_INT 2
13477: PPUSH
13478: LD_VAR 0 3
13482: PPUSH
13483: LD_INT 1
13485: PPUSH
13486: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13490: LD_INT 4
13492: PPUSH
13493: LD_VAR 0 3
13497: PPUSH
13498: LD_INT 1
13500: PPUSH
13501: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13505: LD_INT 6
13507: PPUSH
13508: LD_VAR 0 3
13512: PPUSH
13513: LD_INT 1
13515: PPUSH
13516: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13520: LD_INT 29
13522: PPUSH
13523: LD_VAR 0 3
13527: PPUSH
13528: LD_INT 1
13530: PPUSH
13531: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13535: LD_INT 31
13537: PPUSH
13538: LD_VAR 0 3
13542: PPUSH
13543: LD_INT 1
13545: PPUSH
13546: CALL_OW 324
// end ; 3 :
13550: GO 17098
13552: LD_INT 3
13554: DOUBLE
13555: EQUAL
13556: IFTRUE 13560
13558: GO 14013
13560: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13561: LD_INT 35
13563: PPUSH
13564: LD_VAR 0 3
13568: PPUSH
13569: LD_INT 1
13571: PPUSH
13572: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13576: LD_INT 45
13578: PPUSH
13579: LD_VAR 0 3
13583: PPUSH
13584: LD_INT 1
13586: PPUSH
13587: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13591: LD_INT 46
13593: PPUSH
13594: LD_VAR 0 3
13598: PPUSH
13599: LD_INT 1
13601: PPUSH
13602: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13606: LD_INT 47
13608: PPUSH
13609: LD_VAR 0 3
13613: PPUSH
13614: LD_INT 1
13616: PPUSH
13617: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13621: LD_INT 1
13623: PPUSH
13624: LD_VAR 0 3
13628: PPUSH
13629: LD_INT 1
13631: PPUSH
13632: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13636: LD_INT 2
13638: PPUSH
13639: LD_VAR 0 3
13643: PPUSH
13644: LD_INT 1
13646: PPUSH
13647: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13651: LD_INT 11
13653: PPUSH
13654: LD_VAR 0 3
13658: PPUSH
13659: LD_INT 1
13661: PPUSH
13662: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13666: LD_INT 48
13668: PPUSH
13669: LD_VAR 0 3
13673: PPUSH
13674: LD_INT 1
13676: PPUSH
13677: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13681: LD_INT 69
13683: PPUSH
13684: LD_VAR 0 3
13688: PPUSH
13689: LD_INT 1
13691: PPUSH
13692: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13696: LD_INT 39
13698: PPUSH
13699: LD_VAR 0 3
13703: PPUSH
13704: LD_INT 1
13706: PPUSH
13707: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13711: LD_INT 43
13713: PPUSH
13714: LD_VAR 0 3
13718: PPUSH
13719: LD_INT 1
13721: PPUSH
13722: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13726: LD_INT 51
13728: PPUSH
13729: LD_VAR 0 3
13733: PPUSH
13734: LD_INT 1
13736: PPUSH
13737: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13741: LD_INT 6
13743: PPUSH
13744: LD_VAR 0 3
13748: PPUSH
13749: LD_INT 1
13751: PPUSH
13752: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13756: LD_INT 0
13758: PPUSH
13759: LD_VAR 0 3
13763: PPUSH
13764: LD_INT 1
13766: PPUSH
13767: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13771: LD_INT 2
13773: PPUSH
13774: LD_VAR 0 3
13778: PPUSH
13779: LD_INT 1
13781: PPUSH
13782: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13786: LD_INT 3
13788: PPUSH
13789: LD_VAR 0 3
13793: PPUSH
13794: LD_INT 1
13796: PPUSH
13797: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13801: LD_INT 4
13803: PPUSH
13804: LD_VAR 0 3
13808: PPUSH
13809: LD_INT 1
13811: PPUSH
13812: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13816: LD_INT 6
13818: PPUSH
13819: LD_VAR 0 3
13823: PPUSH
13824: LD_INT 1
13826: PPUSH
13827: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13831: LD_INT 7
13833: PPUSH
13834: LD_VAR 0 3
13838: PPUSH
13839: LD_INT 1
13841: PPUSH
13842: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13846: LD_INT 8
13848: PPUSH
13849: LD_VAR 0 3
13853: PPUSH
13854: LD_INT 1
13856: PPUSH
13857: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13861: LD_INT 10
13863: PPUSH
13864: LD_VAR 0 3
13868: PPUSH
13869: LD_INT 1
13871: PPUSH
13872: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13876: LD_INT 15
13878: PPUSH
13879: LD_VAR 0 3
13883: PPUSH
13884: LD_INT 1
13886: PPUSH
13887: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13891: LD_INT 16
13893: PPUSH
13894: LD_VAR 0 3
13898: PPUSH
13899: LD_INT 1
13901: PPUSH
13902: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13906: LD_INT 17
13908: PPUSH
13909: LD_VAR 0 3
13913: PPUSH
13914: LD_INT 1
13916: PPUSH
13917: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13921: LD_INT 20
13923: PPUSH
13924: LD_VAR 0 3
13928: PPUSH
13929: LD_INT 1
13931: PPUSH
13932: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13936: LD_INT 26
13938: PPUSH
13939: LD_VAR 0 3
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13951: LD_INT 27
13953: PPUSH
13954: LD_VAR 0 3
13958: PPUSH
13959: LD_INT 1
13961: PPUSH
13962: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13966: LD_INT 29
13968: PPUSH
13969: LD_VAR 0 3
13973: PPUSH
13974: LD_INT 1
13976: PPUSH
13977: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13981: LD_INT 31
13983: PPUSH
13984: LD_VAR 0 3
13988: PPUSH
13989: LD_INT 1
13991: PPUSH
13992: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13996: LD_INT 32
13998: PPUSH
13999: LD_VAR 0 3
14003: PPUSH
14004: LD_INT 1
14006: PPUSH
14007: CALL_OW 324
// end ; 4 :
14011: GO 17098
14013: LD_INT 4
14015: DOUBLE
14016: EQUAL
14017: IFTRUE 14021
14019: GO 14969
14021: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14022: LD_INT 35
14024: PPUSH
14025: LD_VAR 0 3
14029: PPUSH
14030: LD_INT 1
14032: PPUSH
14033: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14037: LD_INT 45
14039: PPUSH
14040: LD_VAR 0 3
14044: PPUSH
14045: LD_INT 1
14047: PPUSH
14048: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14052: LD_INT 46
14054: PPUSH
14055: LD_VAR 0 3
14059: PPUSH
14060: LD_INT 1
14062: PPUSH
14063: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14067: LD_INT 47
14069: PPUSH
14070: LD_VAR 0 3
14074: PPUSH
14075: LD_INT 1
14077: PPUSH
14078: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14082: LD_INT 1
14084: PPUSH
14085: LD_VAR 0 3
14089: PPUSH
14090: LD_INT 1
14092: PPUSH
14093: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14097: LD_INT 2
14099: PPUSH
14100: LD_VAR 0 3
14104: PPUSH
14105: LD_INT 1
14107: PPUSH
14108: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14112: LD_INT 11
14114: PPUSH
14115: LD_VAR 0 3
14119: PPUSH
14120: LD_INT 1
14122: PPUSH
14123: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14127: LD_INT 20
14129: PPUSH
14130: LD_VAR 0 3
14134: PPUSH
14135: LD_INT 1
14137: PPUSH
14138: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14142: LD_INT 48
14144: PPUSH
14145: LD_VAR 0 3
14149: PPUSH
14150: LD_INT 1
14152: PPUSH
14153: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14157: LD_INT 49
14159: PPUSH
14160: LD_VAR 0 3
14164: PPUSH
14165: LD_INT 1
14167: PPUSH
14168: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14172: LD_INT 69
14174: PPUSH
14175: LD_VAR 0 3
14179: PPUSH
14180: LD_INT 1
14182: PPUSH
14183: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14187: LD_INT 39
14189: PPUSH
14190: LD_VAR 0 3
14194: PPUSH
14195: LD_INT 1
14197: PPUSH
14198: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14202: LD_INT 34
14204: PPUSH
14205: LD_VAR 0 3
14209: PPUSH
14210: LD_INT 1
14212: PPUSH
14213: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14217: LD_INT 42
14219: PPUSH
14220: LD_VAR 0 3
14224: PPUSH
14225: LD_INT 1
14227: PPUSH
14228: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14232: LD_INT 44
14234: PPUSH
14235: LD_VAR 0 3
14239: PPUSH
14240: LD_INT 1
14242: PPUSH
14243: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14247: LD_INT 41
14249: PPUSH
14250: LD_VAR 0 3
14254: PPUSH
14255: LD_INT 1
14257: PPUSH
14258: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14262: LD_INT 43
14264: PPUSH
14265: LD_VAR 0 3
14269: PPUSH
14270: LD_INT 1
14272: PPUSH
14273: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14277: LD_INT 70
14279: PPUSH
14280: LD_VAR 0 3
14284: PPUSH
14285: LD_INT 1
14287: PPUSH
14288: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14292: LD_INT 51
14294: PPUSH
14295: LD_VAR 0 3
14299: PPUSH
14300: LD_INT 1
14302: PPUSH
14303: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14307: LD_INT 52
14309: PPUSH
14310: LD_VAR 0 3
14314: PPUSH
14315: LD_INT 1
14317: PPUSH
14318: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14322: LD_INT 6
14324: PPUSH
14325: LD_VAR 0 3
14329: PPUSH
14330: LD_INT 1
14332: PPUSH
14333: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14337: LD_INT 15
14339: PPUSH
14340: LD_VAR 0 3
14344: PPUSH
14345: LD_INT 1
14347: PPUSH
14348: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14352: LD_INT 7
14354: PPUSH
14355: LD_VAR 0 3
14359: PPUSH
14360: LD_INT 1
14362: PPUSH
14363: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14367: LD_INT 12
14369: PPUSH
14370: LD_VAR 0 3
14374: PPUSH
14375: LD_INT 1
14377: PPUSH
14378: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14382: LD_INT 18
14384: PPUSH
14385: LD_VAR 0 3
14389: PPUSH
14390: LD_INT 1
14392: PPUSH
14393: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14397: LD_INT 60
14399: PPUSH
14400: LD_VAR 0 3
14404: PPUSH
14405: LD_INT 1
14407: PPUSH
14408: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14412: LD_INT 9
14414: PPUSH
14415: LD_VAR 0 3
14419: PPUSH
14420: LD_INT 1
14422: PPUSH
14423: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14427: LD_INT 30
14429: PPUSH
14430: LD_VAR 0 3
14434: PPUSH
14435: LD_INT 1
14437: PPUSH
14438: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14442: LD_INT 37
14444: PPUSH
14445: LD_VAR 0 3
14449: PPUSH
14450: LD_INT 1
14452: PPUSH
14453: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14457: LD_INT 5
14459: PPUSH
14460: LD_VAR 0 3
14464: PPUSH
14465: LD_INT 1
14467: PPUSH
14468: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14472: LD_INT 66
14474: PPUSH
14475: LD_VAR 0 3
14479: PPUSH
14480: LD_INT 1
14482: PPUSH
14483: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14487: LD_INT 21
14489: PPUSH
14490: LD_VAR 0 3
14494: PPUSH
14495: LD_INT 1
14497: PPUSH
14498: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14502: LD_INT 22
14504: PPUSH
14505: LD_VAR 0 3
14509: PPUSH
14510: LD_INT 1
14512: PPUSH
14513: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14517: LD_INT 54
14519: PPUSH
14520: LD_VAR 0 3
14524: PPUSH
14525: LD_INT 1
14527: PPUSH
14528: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14532: LD_INT 0
14534: PPUSH
14535: LD_VAR 0 3
14539: PPUSH
14540: LD_INT 1
14542: PPUSH
14543: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14547: LD_INT 1
14549: PPUSH
14550: LD_VAR 0 3
14554: PPUSH
14555: LD_INT 1
14557: PPUSH
14558: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14562: LD_INT 2
14564: PPUSH
14565: LD_VAR 0 3
14569: PPUSH
14570: LD_INT 1
14572: PPUSH
14573: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14577: LD_INT 3
14579: PPUSH
14580: LD_VAR 0 3
14584: PPUSH
14585: LD_INT 1
14587: PPUSH
14588: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14592: LD_INT 4
14594: PPUSH
14595: LD_VAR 0 3
14599: PPUSH
14600: LD_INT 1
14602: PPUSH
14603: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14607: LD_INT 5
14609: PPUSH
14610: LD_VAR 0 3
14614: PPUSH
14615: LD_INT 1
14617: PPUSH
14618: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14622: LD_INT 6
14624: PPUSH
14625: LD_VAR 0 3
14629: PPUSH
14630: LD_INT 1
14632: PPUSH
14633: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14637: LD_INT 7
14639: PPUSH
14640: LD_VAR 0 3
14644: PPUSH
14645: LD_INT 1
14647: PPUSH
14648: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14652: LD_INT 8
14654: PPUSH
14655: LD_VAR 0 3
14659: PPUSH
14660: LD_INT 1
14662: PPUSH
14663: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14667: LD_INT 10
14669: PPUSH
14670: LD_VAR 0 3
14674: PPUSH
14675: LD_INT 1
14677: PPUSH
14678: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14682: LD_INT 11
14684: PPUSH
14685: LD_VAR 0 3
14689: PPUSH
14690: LD_INT 1
14692: PPUSH
14693: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14697: LD_INT 12
14699: PPUSH
14700: LD_VAR 0 3
14704: PPUSH
14705: LD_INT 1
14707: PPUSH
14708: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14712: LD_INT 13
14714: PPUSH
14715: LD_VAR 0 3
14719: PPUSH
14720: LD_INT 1
14722: PPUSH
14723: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14727: LD_INT 14
14729: PPUSH
14730: LD_VAR 0 3
14734: PPUSH
14735: LD_INT 1
14737: PPUSH
14738: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14742: LD_INT 15
14744: PPUSH
14745: LD_VAR 0 3
14749: PPUSH
14750: LD_INT 1
14752: PPUSH
14753: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14757: LD_INT 16
14759: PPUSH
14760: LD_VAR 0 3
14764: PPUSH
14765: LD_INT 1
14767: PPUSH
14768: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14772: LD_INT 17
14774: PPUSH
14775: LD_VAR 0 3
14779: PPUSH
14780: LD_INT 1
14782: PPUSH
14783: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14787: LD_INT 19
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: LD_INT 1
14797: PPUSH
14798: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14802: LD_INT 20
14804: PPUSH
14805: LD_VAR 0 3
14809: PPUSH
14810: LD_INT 1
14812: PPUSH
14813: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14817: LD_INT 21
14819: PPUSH
14820: LD_VAR 0 3
14824: PPUSH
14825: LD_INT 1
14827: PPUSH
14828: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14832: LD_INT 23
14834: PPUSH
14835: LD_VAR 0 3
14839: PPUSH
14840: LD_INT 1
14842: PPUSH
14843: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14847: LD_INT 26
14849: PPUSH
14850: LD_VAR 0 3
14854: PPUSH
14855: LD_INT 1
14857: PPUSH
14858: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14862: LD_INT 27
14864: PPUSH
14865: LD_VAR 0 3
14869: PPUSH
14870: LD_INT 1
14872: PPUSH
14873: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14877: LD_INT 28
14879: PPUSH
14880: LD_VAR 0 3
14884: PPUSH
14885: LD_INT 1
14887: PPUSH
14888: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14892: LD_INT 29
14894: PPUSH
14895: LD_VAR 0 3
14899: PPUSH
14900: LD_INT 1
14902: PPUSH
14903: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14907: LD_INT 30
14909: PPUSH
14910: LD_VAR 0 3
14914: PPUSH
14915: LD_INT 1
14917: PPUSH
14918: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14922: LD_INT 31
14924: PPUSH
14925: LD_VAR 0 3
14929: PPUSH
14930: LD_INT 1
14932: PPUSH
14933: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14937: LD_INT 32
14939: PPUSH
14940: LD_VAR 0 3
14944: PPUSH
14945: LD_INT 1
14947: PPUSH
14948: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14952: LD_INT 36
14954: PPUSH
14955: LD_VAR 0 3
14959: PPUSH
14960: LD_INT 1
14962: PPUSH
14963: CALL_OW 324
// end ; 5 :
14967: GO 17098
14969: LD_INT 5
14971: DOUBLE
14972: EQUAL
14973: IFTRUE 14977
14975: GO 16090
14977: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14978: LD_INT 35
14980: PPUSH
14981: LD_VAR 0 3
14985: PPUSH
14986: LD_INT 1
14988: PPUSH
14989: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14993: LD_INT 45
14995: PPUSH
14996: LD_VAR 0 3
15000: PPUSH
15001: LD_INT 1
15003: PPUSH
15004: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15008: LD_INT 46
15010: PPUSH
15011: LD_VAR 0 3
15015: PPUSH
15016: LD_INT 1
15018: PPUSH
15019: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15023: LD_INT 47
15025: PPUSH
15026: LD_VAR 0 3
15030: PPUSH
15031: LD_INT 1
15033: PPUSH
15034: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15038: LD_INT 1
15040: PPUSH
15041: LD_VAR 0 3
15045: PPUSH
15046: LD_INT 1
15048: PPUSH
15049: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15053: LD_INT 2
15055: PPUSH
15056: LD_VAR 0 3
15060: PPUSH
15061: LD_INT 1
15063: PPUSH
15064: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15068: LD_INT 11
15070: PPUSH
15071: LD_VAR 0 3
15075: PPUSH
15076: LD_INT 1
15078: PPUSH
15079: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15083: LD_INT 20
15085: PPUSH
15086: LD_VAR 0 3
15090: PPUSH
15091: LD_INT 1
15093: PPUSH
15094: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15098: LD_INT 48
15100: PPUSH
15101: LD_VAR 0 3
15105: PPUSH
15106: LD_INT 1
15108: PPUSH
15109: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15113: LD_INT 49
15115: PPUSH
15116: LD_VAR 0 3
15120: PPUSH
15121: LD_INT 1
15123: PPUSH
15124: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15128: LD_INT 69
15130: PPUSH
15131: LD_VAR 0 3
15135: PPUSH
15136: LD_INT 1
15138: PPUSH
15139: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15143: LD_INT 39
15145: PPUSH
15146: LD_VAR 0 3
15150: PPUSH
15151: LD_INT 1
15153: PPUSH
15154: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15158: LD_INT 34
15160: PPUSH
15161: LD_VAR 0 3
15165: PPUSH
15166: LD_INT 1
15168: PPUSH
15169: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15173: LD_INT 42
15175: PPUSH
15176: LD_VAR 0 3
15180: PPUSH
15181: LD_INT 1
15183: PPUSH
15184: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15188: LD_INT 44
15190: PPUSH
15191: LD_VAR 0 3
15195: PPUSH
15196: LD_INT 1
15198: PPUSH
15199: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15203: LD_INT 41
15205: PPUSH
15206: LD_VAR 0 3
15210: PPUSH
15211: LD_INT 1
15213: PPUSH
15214: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15218: LD_INT 40
15220: PPUSH
15221: LD_VAR 0 3
15225: PPUSH
15226: LD_INT 1
15228: PPUSH
15229: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15233: LD_INT 43
15235: PPUSH
15236: LD_VAR 0 3
15240: PPUSH
15241: LD_INT 1
15243: PPUSH
15244: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15248: LD_INT 70
15250: PPUSH
15251: LD_VAR 0 3
15255: PPUSH
15256: LD_INT 1
15258: PPUSH
15259: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15263: LD_INT 51
15265: PPUSH
15266: LD_VAR 0 3
15270: PPUSH
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15278: LD_INT 52
15280: PPUSH
15281: LD_VAR 0 3
15285: PPUSH
15286: LD_INT 1
15288: PPUSH
15289: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15293: LD_INT 6
15295: PPUSH
15296: LD_VAR 0 3
15300: PPUSH
15301: LD_INT 1
15303: PPUSH
15304: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15308: LD_INT 15
15310: PPUSH
15311: LD_VAR 0 3
15315: PPUSH
15316: LD_INT 1
15318: PPUSH
15319: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15323: LD_INT 7
15325: PPUSH
15326: LD_VAR 0 3
15330: PPUSH
15331: LD_INT 1
15333: PPUSH
15334: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15338: LD_INT 12
15340: PPUSH
15341: LD_VAR 0 3
15345: PPUSH
15346: LD_INT 1
15348: PPUSH
15349: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15353: LD_INT 17
15355: PPUSH
15356: LD_VAR 0 3
15360: PPUSH
15361: LD_INT 1
15363: PPUSH
15364: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15368: LD_INT 18
15370: PPUSH
15371: LD_VAR 0 3
15375: PPUSH
15376: LD_INT 1
15378: PPUSH
15379: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15383: LD_INT 60
15385: PPUSH
15386: LD_VAR 0 3
15390: PPUSH
15391: LD_INT 1
15393: PPUSH
15394: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15398: LD_INT 32
15400: PPUSH
15401: LD_VAR 0 3
15405: PPUSH
15406: LD_INT 1
15408: PPUSH
15409: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15413: LD_INT 9
15415: PPUSH
15416: LD_VAR 0 3
15420: PPUSH
15421: LD_INT 1
15423: PPUSH
15424: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15428: LD_INT 57
15430: PPUSH
15431: LD_VAR 0 3
15435: PPUSH
15436: LD_INT 1
15438: PPUSH
15439: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15443: LD_INT 30
15445: PPUSH
15446: LD_VAR 0 3
15450: PPUSH
15451: LD_INT 1
15453: PPUSH
15454: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15458: LD_INT 37
15460: PPUSH
15461: LD_VAR 0 3
15465: PPUSH
15466: LD_INT 1
15468: PPUSH
15469: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15473: LD_INT 63
15475: PPUSH
15476: LD_VAR 0 3
15480: PPUSH
15481: LD_INT 1
15483: PPUSH
15484: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15488: LD_INT 3
15490: PPUSH
15491: LD_VAR 0 3
15495: PPUSH
15496: LD_INT 1
15498: PPUSH
15499: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15503: LD_INT 4
15505: PPUSH
15506: LD_VAR 0 3
15510: PPUSH
15511: LD_INT 1
15513: PPUSH
15514: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15518: LD_INT 5
15520: PPUSH
15521: LD_VAR 0 3
15525: PPUSH
15526: LD_INT 1
15528: PPUSH
15529: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15533: LD_INT 66
15535: PPUSH
15536: LD_VAR 0 3
15540: PPUSH
15541: LD_INT 1
15543: PPUSH
15544: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15548: LD_INT 21
15550: PPUSH
15551: LD_VAR 0 3
15555: PPUSH
15556: LD_INT 1
15558: PPUSH
15559: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15563: LD_INT 22
15565: PPUSH
15566: LD_VAR 0 3
15570: PPUSH
15571: LD_INT 1
15573: PPUSH
15574: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15578: LD_INT 19
15580: PPUSH
15581: LD_VAR 0 3
15585: PPUSH
15586: LD_INT 1
15588: PPUSH
15589: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15593: LD_INT 54
15595: PPUSH
15596: LD_VAR 0 3
15600: PPUSH
15601: LD_INT 1
15603: PPUSH
15604: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15608: LD_INT 55
15610: PPUSH
15611: LD_VAR 0 3
15615: PPUSH
15616: LD_INT 1
15618: PPUSH
15619: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15623: LD_INT 0
15625: PPUSH
15626: LD_VAR 0 3
15630: PPUSH
15631: LD_INT 1
15633: PPUSH
15634: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15638: LD_INT 1
15640: PPUSH
15641: LD_VAR 0 3
15645: PPUSH
15646: LD_INT 1
15648: PPUSH
15649: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15653: LD_INT 2
15655: PPUSH
15656: LD_VAR 0 3
15660: PPUSH
15661: LD_INT 1
15663: PPUSH
15664: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15668: LD_INT 3
15670: PPUSH
15671: LD_VAR 0 3
15675: PPUSH
15676: LD_INT 1
15678: PPUSH
15679: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15683: LD_INT 4
15685: PPUSH
15686: LD_VAR 0 3
15690: PPUSH
15691: LD_INT 1
15693: PPUSH
15694: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15698: LD_INT 5
15700: PPUSH
15701: LD_VAR 0 3
15705: PPUSH
15706: LD_INT 1
15708: PPUSH
15709: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15713: LD_INT 6
15715: PPUSH
15716: LD_VAR 0 3
15720: PPUSH
15721: LD_INT 1
15723: PPUSH
15724: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15728: LD_INT 7
15730: PPUSH
15731: LD_VAR 0 3
15735: PPUSH
15736: LD_INT 1
15738: PPUSH
15739: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15743: LD_INT 8
15745: PPUSH
15746: LD_VAR 0 3
15750: PPUSH
15751: LD_INT 1
15753: PPUSH
15754: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15758: LD_INT 10
15760: PPUSH
15761: LD_VAR 0 3
15765: PPUSH
15766: LD_INT 1
15768: PPUSH
15769: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15773: LD_INT 11
15775: PPUSH
15776: LD_VAR 0 3
15780: PPUSH
15781: LD_INT 1
15783: PPUSH
15784: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15788: LD_INT 12
15790: PPUSH
15791: LD_VAR 0 3
15795: PPUSH
15796: LD_INT 1
15798: PPUSH
15799: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15803: LD_INT 13
15805: PPUSH
15806: LD_VAR 0 3
15810: PPUSH
15811: LD_INT 1
15813: PPUSH
15814: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15818: LD_INT 14
15820: PPUSH
15821: LD_VAR 0 3
15825: PPUSH
15826: LD_INT 1
15828: PPUSH
15829: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15833: LD_INT 15
15835: PPUSH
15836: LD_VAR 0 3
15840: PPUSH
15841: LD_INT 1
15843: PPUSH
15844: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15848: LD_INT 16
15850: PPUSH
15851: LD_VAR 0 3
15855: PPUSH
15856: LD_INT 1
15858: PPUSH
15859: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15863: LD_INT 17
15865: PPUSH
15866: LD_VAR 0 3
15870: PPUSH
15871: LD_INT 1
15873: PPUSH
15874: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15878: LD_INT 18
15880: PPUSH
15881: LD_VAR 0 3
15885: PPUSH
15886: LD_INT 1
15888: PPUSH
15889: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15893: LD_INT 19
15895: PPUSH
15896: LD_VAR 0 3
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15908: LD_INT 20
15910: PPUSH
15911: LD_VAR 0 3
15915: PPUSH
15916: LD_INT 1
15918: PPUSH
15919: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15923: LD_INT 21
15925: PPUSH
15926: LD_VAR 0 3
15930: PPUSH
15931: LD_INT 1
15933: PPUSH
15934: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15938: LD_INT 23
15940: PPUSH
15941: LD_VAR 0 3
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15953: LD_INT 26
15955: PPUSH
15956: LD_VAR 0 3
15960: PPUSH
15961: LD_INT 1
15963: PPUSH
15964: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15968: LD_INT 27
15970: PPUSH
15971: LD_VAR 0 3
15975: PPUSH
15976: LD_INT 1
15978: PPUSH
15979: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15983: LD_INT 28
15985: PPUSH
15986: LD_VAR 0 3
15990: PPUSH
15991: LD_INT 1
15993: PPUSH
15994: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15998: LD_INT 29
16000: PPUSH
16001: LD_VAR 0 3
16005: PPUSH
16006: LD_INT 1
16008: PPUSH
16009: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16013: LD_INT 30
16015: PPUSH
16016: LD_VAR 0 3
16020: PPUSH
16021: LD_INT 1
16023: PPUSH
16024: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16028: LD_INT 31
16030: PPUSH
16031: LD_VAR 0 3
16035: PPUSH
16036: LD_INT 1
16038: PPUSH
16039: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16043: LD_INT 32
16045: PPUSH
16046: LD_VAR 0 3
16050: PPUSH
16051: LD_INT 1
16053: PPUSH
16054: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
16058: LD_INT 33
16060: PPUSH
16061: LD_VAR 0 3
16065: PPUSH
16066: LD_INT 1
16068: PPUSH
16069: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16073: LD_INT 36
16075: PPUSH
16076: LD_VAR 0 3
16080: PPUSH
16081: LD_INT 1
16083: PPUSH
16084: CALL_OW 324
// end ; 6 :
16088: GO 17098
16090: LD_INT 6
16092: DOUBLE
16093: EQUAL
16094: IFTRUE 16098
16096: GO 17023
16098: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16099: LD_INT 35
16101: PPUSH
16102: LD_VAR 0 3
16106: PPUSH
16107: LD_INT 1
16109: PPUSH
16110: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16114: LD_INT 45
16116: PPUSH
16117: LD_VAR 0 3
16121: PPUSH
16122: LD_INT 1
16124: PPUSH
16125: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16129: LD_INT 46
16131: PPUSH
16132: LD_VAR 0 3
16136: PPUSH
16137: LD_INT 1
16139: PPUSH
16140: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16144: LD_INT 47
16146: PPUSH
16147: LD_VAR 0 3
16151: PPUSH
16152: LD_INT 1
16154: PPUSH
16155: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16159: LD_INT 1
16161: PPUSH
16162: LD_VAR 0 3
16166: PPUSH
16167: LD_INT 1
16169: PPUSH
16170: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16174: LD_INT 2
16176: PPUSH
16177: LD_VAR 0 3
16181: PPUSH
16182: LD_INT 1
16184: PPUSH
16185: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16189: LD_INT 11
16191: PPUSH
16192: LD_VAR 0 3
16196: PPUSH
16197: LD_INT 1
16199: PPUSH
16200: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16204: LD_INT 20
16206: PPUSH
16207: LD_VAR 0 3
16211: PPUSH
16212: LD_INT 1
16214: PPUSH
16215: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16219: LD_INT 48
16221: PPUSH
16222: LD_VAR 0 3
16226: PPUSH
16227: LD_INT 1
16229: PPUSH
16230: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16234: LD_INT 49
16236: PPUSH
16237: LD_VAR 0 3
16241: PPUSH
16242: LD_INT 1
16244: PPUSH
16245: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
16249: LD_INT 50
16251: PPUSH
16252: LD_VAR 0 3
16256: PPUSH
16257: LD_INT 1
16259: PPUSH
16260: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16264: LD_INT 69
16266: PPUSH
16267: LD_VAR 0 3
16271: PPUSH
16272: LD_INT 1
16274: PPUSH
16275: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16279: LD_INT 39
16281: PPUSH
16282: LD_VAR 0 3
16286: PPUSH
16287: LD_INT 1
16289: PPUSH
16290: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16294: LD_INT 34
16296: PPUSH
16297: LD_VAR 0 3
16301: PPUSH
16302: LD_INT 1
16304: PPUSH
16305: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16309: LD_INT 42
16311: PPUSH
16312: LD_VAR 0 3
16316: PPUSH
16317: LD_INT 1
16319: PPUSH
16320: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16324: LD_INT 44
16326: PPUSH
16327: LD_VAR 0 3
16331: PPUSH
16332: LD_INT 1
16334: PPUSH
16335: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16339: LD_INT 41
16341: PPUSH
16342: LD_VAR 0 3
16346: PPUSH
16347: LD_INT 1
16349: PPUSH
16350: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
16354: LD_INT 13
16356: PPUSH
16357: LD_VAR 0 3
16361: PPUSH
16362: LD_INT 1
16364: PPUSH
16365: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16369: LD_INT 40
16371: PPUSH
16372: LD_VAR 0 3
16376: PPUSH
16377: LD_INT 1
16379: PPUSH
16380: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16384: LD_INT 43
16386: PPUSH
16387: LD_VAR 0 3
16391: PPUSH
16392: LD_INT 1
16394: PPUSH
16395: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16399: LD_INT 70
16401: PPUSH
16402: LD_VAR 0 3
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
16414: LD_INT 23
16416: PPUSH
16417: LD_VAR 0 3
16421: PPUSH
16422: LD_INT 1
16424: PPUSH
16425: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16429: LD_INT 51
16431: PPUSH
16432: LD_VAR 0 3
16436: PPUSH
16437: LD_INT 1
16439: PPUSH
16440: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16444: LD_INT 52
16446: PPUSH
16447: LD_VAR 0 3
16451: PPUSH
16452: LD_INT 1
16454: PPUSH
16455: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16459: LD_INT 6
16461: PPUSH
16462: LD_VAR 0 3
16466: PPUSH
16467: LD_INT 1
16469: PPUSH
16470: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16474: LD_INT 15
16476: PPUSH
16477: LD_VAR 0 3
16481: PPUSH
16482: LD_INT 1
16484: PPUSH
16485: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16489: LD_INT 7
16491: PPUSH
16492: LD_VAR 0 3
16496: PPUSH
16497: LD_INT 1
16499: PPUSH
16500: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16504: LD_INT 12
16506: PPUSH
16507: LD_VAR 0 3
16511: PPUSH
16512: LD_INT 1
16514: PPUSH
16515: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
16519: LD_INT 10
16521: PPUSH
16522: LD_VAR 0 3
16526: PPUSH
16527: LD_INT 1
16529: PPUSH
16530: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16534: LD_INT 17
16536: PPUSH
16537: LD_VAR 0 3
16541: PPUSH
16542: LD_INT 1
16544: PPUSH
16545: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16549: LD_INT 18
16551: PPUSH
16552: LD_VAR 0 3
16556: PPUSH
16557: LD_INT 1
16559: PPUSH
16560: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16564: LD_INT 60
16566: PPUSH
16567: LD_VAR 0 3
16571: PPUSH
16572: LD_INT 1
16574: PPUSH
16575: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
16579: LD_INT 61
16581: PPUSH
16582: LD_VAR 0 3
16586: PPUSH
16587: LD_INT 1
16589: PPUSH
16590: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16594: LD_INT 32
16596: PPUSH
16597: LD_VAR 0 3
16601: PPUSH
16602: LD_INT 1
16604: PPUSH
16605: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
16609: LD_INT 27
16611: PPUSH
16612: LD_VAR 0 3
16616: PPUSH
16617: LD_INT 1
16619: PPUSH
16620: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
16624: LD_INT 36
16626: PPUSH
16627: LD_VAR 0 3
16631: PPUSH
16632: LD_INT 1
16634: PPUSH
16635: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
16639: LD_INT 33
16641: PPUSH
16642: LD_VAR 0 3
16646: PPUSH
16647: LD_INT 1
16649: PPUSH
16650: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16654: LD_INT 9
16656: PPUSH
16657: LD_VAR 0 3
16661: PPUSH
16662: LD_INT 1
16664: PPUSH
16665: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
16669: LD_INT 38
16671: PPUSH
16672: LD_VAR 0 3
16676: PPUSH
16677: LD_INT 1
16679: PPUSH
16680: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16684: LD_INT 57
16686: PPUSH
16687: LD_VAR 0 3
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
16699: LD_INT 58
16701: PPUSH
16702: LD_VAR 0 3
16706: PPUSH
16707: LD_INT 1
16709: PPUSH
16710: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
16714: LD_INT 28
16716: PPUSH
16717: LD_VAR 0 3
16721: PPUSH
16722: LD_INT 1
16724: PPUSH
16725: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
16729: LD_INT 29
16731: PPUSH
16732: LD_VAR 0 3
16736: PPUSH
16737: LD_INT 1
16739: PPUSH
16740: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16744: LD_INT 30
16746: PPUSH
16747: LD_VAR 0 3
16751: PPUSH
16752: LD_INT 1
16754: PPUSH
16755: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16759: LD_INT 37
16761: PPUSH
16762: LD_VAR 0 3
16766: PPUSH
16767: LD_INT 1
16769: PPUSH
16770: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16774: LD_INT 63
16776: PPUSH
16777: LD_VAR 0 3
16781: PPUSH
16782: LD_INT 1
16784: PPUSH
16785: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
16789: LD_INT 64
16791: PPUSH
16792: LD_VAR 0 3
16796: PPUSH
16797: LD_INT 1
16799: PPUSH
16800: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16804: LD_INT 3
16806: PPUSH
16807: LD_VAR 0 3
16811: PPUSH
16812: LD_INT 1
16814: PPUSH
16815: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16819: LD_INT 4
16821: PPUSH
16822: LD_VAR 0 3
16826: PPUSH
16827: LD_INT 1
16829: PPUSH
16830: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16834: LD_INT 5
16836: PPUSH
16837: LD_VAR 0 3
16841: PPUSH
16842: LD_INT 1
16844: PPUSH
16845: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16849: LD_INT 8
16851: PPUSH
16852: LD_VAR 0 3
16856: PPUSH
16857: LD_INT 1
16859: PPUSH
16860: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16864: LD_INT 66
16866: PPUSH
16867: LD_VAR 0 3
16871: PPUSH
16872: LD_INT 1
16874: PPUSH
16875: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16879: LD_INT 67
16881: PPUSH
16882: LD_VAR 0 3
16886: PPUSH
16887: LD_INT 1
16889: PPUSH
16890: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16894: LD_INT 21
16896: PPUSH
16897: LD_VAR 0 3
16901: PPUSH
16902: LD_INT 1
16904: PPUSH
16905: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16909: LD_INT 22
16911: PPUSH
16912: LD_VAR 0 3
16916: PPUSH
16917: LD_INT 1
16919: PPUSH
16920: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16924: LD_INT 19
16926: PPUSH
16927: LD_VAR 0 3
16931: PPUSH
16932: LD_INT 1
16934: PPUSH
16935: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16939: LD_INT 26
16941: PPUSH
16942: LD_VAR 0 3
16946: PPUSH
16947: LD_INT 1
16949: PPUSH
16950: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16954: LD_INT 54
16956: PPUSH
16957: LD_VAR 0 3
16961: PPUSH
16962: LD_INT 1
16964: PPUSH
16965: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16969: LD_INT 55
16971: PPUSH
16972: LD_VAR 0 3
16976: PPUSH
16977: LD_INT 1
16979: PPUSH
16980: CALL_OW 322
// for i = 0 to 39 do
16984: LD_ADDR_VAR 0 4
16988: PUSH
16989: DOUBLE
16990: LD_INT 0
16992: DEC
16993: ST_TO_ADDR
16994: LD_INT 39
16996: PUSH
16997: FOR_TO
16998: IFFALSE 17019
// SetRestrict ( i , side , true ) ;
17000: LD_VAR 0 4
17004: PPUSH
17005: LD_VAR 0 3
17009: PPUSH
17010: LD_INT 1
17012: PPUSH
17013: CALL_OW 324
17017: GO 16997
17019: POP
17020: POP
// end ; else
17021: GO 17098
17023: POP
// begin for i = 1 to 73 do
17024: LD_ADDR_VAR 0 4
17028: PUSH
17029: DOUBLE
17030: LD_INT 1
17032: DEC
17033: ST_TO_ADDR
17034: LD_INT 73
17036: PUSH
17037: FOR_TO
17038: IFFALSE 17059
// SetTech ( i , side , state_enabled ) ;
17040: LD_VAR 0 4
17044: PPUSH
17045: LD_VAR 0 3
17049: PPUSH
17050: LD_INT 1
17052: PPUSH
17053: CALL_OW 322
17057: GO 17037
17059: POP
17060: POP
// for i = 0 to 39 do
17061: LD_ADDR_VAR 0 4
17065: PUSH
17066: DOUBLE
17067: LD_INT 0
17069: DEC
17070: ST_TO_ADDR
17071: LD_INT 39
17073: PUSH
17074: FOR_TO
17075: IFFALSE 17096
// SetRestrict ( i , side , true ) ;
17077: LD_VAR 0 4
17081: PPUSH
17082: LD_VAR 0 3
17086: PPUSH
17087: LD_INT 1
17089: PPUSH
17090: CALL_OW 324
17094: GO 17074
17096: POP
17097: POP
// end ; end ; end ;
17098: GO 13103
17100: POP
17101: POP
// end ;
17102: LD_VAR 0 2
17106: RET
