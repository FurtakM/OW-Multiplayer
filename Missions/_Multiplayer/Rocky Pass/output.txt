// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , tech_level ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 18
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 37
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 35
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 36
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 18
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 1 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 37
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 35
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 38
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 36
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 254: LD_ADDR_EXP 39
 258: PUSH
 259: LD_EXP 35
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: EMPTY
 268: LIST
 269: DIFF
 270: PUSH
 271: LD_INT 1
 273: GREATER
 274: ST_TO_ADDR
// if Multiplayer then
 275: LD_OWVAR 4
 279: IFFALSE 517
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 281: LD_ADDR_EXP 1
 285: PUSH
 286: LD_INT 0
 288: PPUSH
 289: CALL_OW 426
 293: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 294: LD_ADDR_EXP 2
 298: PUSH
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 426
 306: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 307: LD_ADDR_EXP 3
 311: PUSH
 312: LD_INT 2
 314: PPUSH
 315: CALL_OW 426
 319: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 320: LD_ADDR_EXP 4
 324: PUSH
 325: LD_INT 3
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 333: LD_ADDR_EXP 5
 337: PUSH
 338: LD_INT 4
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 346: LD_ADDR_EXP 6
 350: PUSH
 351: LD_INT 5
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 359: LD_ADDR_EXP 7
 363: PUSH
 364: LD_INT 6
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 372: LD_ADDR_EXP 8
 376: PUSH
 377: LD_INT 10
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 385: LD_ADDR_EXP 9
 389: PUSH
 390: LD_INT 11
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 398: LD_ADDR_EXP 10
 402: PUSH
 403: LD_INT 12
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 411: LD_ADDR_EXP 11
 415: PUSH
 416: LD_INT 13
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 424: LD_ADDR_EXP 12
 428: PUSH
 429: LD_INT 14
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 437: LD_ADDR_EXP 13
 441: PUSH
 442: LD_INT 15
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 450: LD_ADDR_EXP 14
 454: PUSH
 455: LD_INT 16
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 463: LD_ADDR_EXP 15
 467: PUSH
 468: LD_INT 17
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 16
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_spect := GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_EXP 32
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 502: LD_ADDR_EXP 34
 506: PUSH
 507: LD_INT 23
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// end else
 515: GO 665
// begin Randomize ;
 517: CALL_OW 10
// def_base_level := 2 ;
 521: LD_ADDR_EXP 1
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// def_amount_of_people := 0 ;
 529: LD_ADDR_EXP 2
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// def_skill_level := 1 ;
 537: LD_ADDR_EXP 3
 541: PUSH
 542: LD_INT 1
 544: ST_TO_ADDR
// def_starting_resources := 2 ;
 545: LD_ADDR_EXP 4
 549: PUSH
 550: LD_INT 2
 552: ST_TO_ADDR
// def_shipments_density := 1 ;
 553: LD_ADDR_EXP 5
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 561: LD_ADDR_EXP 6
 565: PUSH
 566: LD_INT 0
 568: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 569: LD_ADDR_EXP 7
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// def_shared_vision := 1 ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// def_morale_flags := 1 ;
 585: LD_ADDR_EXP 9
 589: PUSH
 590: LD_INT 1
 592: ST_TO_ADDR
// def_siberite_detection := 1 ;
 593: LD_ADDR_EXP 10
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// def_people_respawning := 2 ;
 601: LD_ADDR_EXP 11
 605: PUSH
 606: LD_INT 2
 608: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 609: LD_ADDR_EXP 12
 613: PUSH
 614: LD_INT 3
 616: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 617: LD_ADDR_EXP 13
 621: PUSH
 622: LD_INT 0
 624: ST_TO_ADDR
// def_public_score := 0 ;
 625: LD_ADDR_EXP 14
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 633: LD_ADDR_EXP 15
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// def_builduptime := 1 ;
 641: LD_ADDR_EXP 16
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
// def_spect := 1 ;
 649: LD_ADDR_EXP 32
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// tech_level = 0 ;
 657: LD_ADDR_EXP 34
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// end ; if isSGUI then
 665: LD_OWVAR 83
 669: IFFALSE 677
// setMpTechs ( ) else
 671: CALL 8248 0 0
 675: GO 690
// SetMpTechLevel ( tech_level + 1 ) ;
 677: LD_EXP 34
 681: PUSH
 682: LD_INT 1
 684: PLUS
 685: PPUSH
 686: CALL 8395 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 690: LD_ADDR_EXP 19
 694: PUSH
 695: LD_INT 0
 697: PUSH
 698: LD_INT 1
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: PUSH
 709: LD_EXP 1
 713: PUSH
 714: LD_INT 1
 716: PLUS
 717: ARRAY
 718: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 719: LD_ADDR_EXP 20
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: PUSH
 738: LD_EXP 1
 742: PUSH
 743: LD_INT 1
 745: PLUS
 746: ARRAY
 747: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 748: LD_ADDR_EXP 21
 752: PUSH
 753: LD_INT 9
 755: PUSH
 756: LD_INT 12
 758: PUSH
 759: LD_INT 15
 761: PUSH
 762: LD_INT 24
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_EXP 2
 775: PUSH
 776: LD_INT 1
 778: PLUS
 779: ARRAY
 780: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
 781: LD_ADDR_EXP 22
 785: PUSH
 786: LD_INT 2
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: LD_INT 5
 794: PUSH
 795: LD_INT 6
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_EXP 3
 808: PUSH
 809: LD_INT 1
 811: PLUS
 812: ARRAY
 813: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 814: LD_ADDR_EXP 24
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: LD_INT 0
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 30
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_INT 50
 849: PUSH
 850: LD_INT 20
 852: PUSH
 853: LD_INT 0
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: LD_INT 80
 863: PUSH
 864: LD_INT 40
 866: PUSH
 867: LD_INT 20
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 4
 885: PUSH
 886: LD_INT 1
 888: PLUS
 889: ARRAY
 890: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 891: LD_ADDR_EXP 23
 895: PUSH
 896: LD_INT 10
 898: PUSH
 899: EMPTY
 900: LIST
 901: PUSH
 902: LD_INT 7
 904: PUSH
 905: LD_INT 14
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 6
 914: PUSH
 915: LD_INT 12
 917: PUSH
 918: LD_INT 18
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: LIST
 925: PUSH
 926: LD_INT 5
 928: PUSH
 929: LD_INT 10
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: LD_INT 20
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 1
 957: PLUS
 958: ARRAY
 959: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
 960: LD_ADDR_EXP 25
 964: PUSH
 965: LD_INT 150
 967: PUSH
 968: LD_INT 125
 970: PUSH
 971: LD_INT 100
 973: PUSH
 974: LD_INT 50
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: PUSH
 983: LD_EXP 5
 987: PUSH
 988: LD_INT 1
 990: PLUS
 991: ARRAY
 992: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
 993: LD_ADDR_EXP 29
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 10500
1003: PUSH
1004: LD_INT 6300
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_EXP 11
1016: PUSH
1017: LD_INT 1
1019: PLUS
1020: ARRAY
1021: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1022: LD_ADDR_EXP 30
1026: PUSH
1027: LD_INT 0
1029: PUSH
1030: LD_INT 31500
1032: PUSH
1033: LD_INT 10500
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_EXP 11
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: ARRAY
1050: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1051: LD_ADDR_EXP 27
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: LD_INT 3
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_EXP 12
1078: PUSH
1079: LD_INT 1
1081: PLUS
1082: ARRAY
1083: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1084: LD_ADDR_EXP 28
1088: PUSH
1089: LD_INT 30
1091: PUSH
1092: LD_INT 50
1094: PUSH
1095: LD_INT 80
1097: PUSH
1098: LD_INT 100
1100: PUSH
1101: LD_INT 130
1103: PUSH
1104: LD_INT 150
1106: PUSH
1107: LD_INT 200
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_EXP 13
1123: PUSH
1124: LD_INT 1
1126: PLUS
1127: ARRAY
1128: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1129: LD_ADDR_EXP 26
1133: PUSH
1134: LD_INT 1
1136: NEG
1137: PUSH
1138: LD_INT 350
1140: PUSH
1141: LD_INT 700
1143: PUSH
1144: LD_INT 1400
1146: PUSH
1147: LD_INT 0
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_EXP 9
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ARRAY
1166: ST_TO_ADDR
// battle_flags_id := [ ] ;
1167: LD_ADDR_EXP 47
1171: PUSH
1172: EMPTY
1173: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1174: LD_ADDR_EXP 31
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_EXP 32
1193: PUSH
1194: LD_INT 1
1196: PLUS
1197: ARRAY
1198: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1199: LD_ADDR_EXP 33
1203: PUSH
1204: LD_INT 0
1206: PUSH
1207: LD_INT 1
1209: PUSH
1210: LD_INT 63000
1212: PUSH
1213: LD_INT 126000
1215: PUSH
1216: LD_INT 189000
1218: PUSH
1219: LD_INT 252000
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: PUSH
1230: LD_EXP 15
1234: PUSH
1235: LD_INT 1
1237: PLUS
1238: ARRAY
1239: ST_TO_ADDR
// end ;
1240: LD_VAR 0 1
1244: RET
// function init_map ; var i , j ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1250: LD_ADDR_EXP 43
1254: PUSH
1255: LD_INT 12
1257: PUSH
1258: LD_INT 4
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PUSH
1265: LD_INT 45
1267: PUSH
1268: LD_INT 81
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 116
1277: PUSH
1278: LD_INT 195
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 142
1287: PUSH
1288: LD_INT 4
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 201
1297: PUSH
1298: LD_INT 102
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 234
1307: PUSH
1308: LD_INT 194
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1323: LD_ADDR_EXP 44
1327: PUSH
1328: LD_INT 12
1330: PUSH
1331: LD_INT 4
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 16
1340: PUSH
1341: LD_INT 25
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 45
1354: PUSH
1355: LD_INT 81
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 102
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 116
1378: PUSH
1379: LD_INT 195
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: LD_INT 92
1388: PUSH
1389: LD_INT 167
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 142
1402: PUSH
1403: LD_INT 4
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: LD_INT 167
1412: PUSH
1413: LD_INT 24
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: LD_INT 201
1426: PUSH
1427: LD_INT 102
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 190
1436: PUSH
1437: LD_INT 77
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: LD_INT 234
1450: PUSH
1451: LD_INT 194
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: PUSH
1458: LD_INT 237
1460: PUSH
1461: LD_INT 171
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1480: LD_ADDR_EXP 45
1484: PUSH
1485: LD_INT 10
1487: PUSH
1488: LD_INT 10
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 93
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: PUSH
1505: LD_INT 102
1507: PUSH
1508: LD_INT 187
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 158
1517: PUSH
1518: LD_INT 6
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: LD_INT 203
1527: PUSH
1528: LD_INT 93
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 252
1537: PUSH
1538: LD_INT 194
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1553: LD_ADDR_EXP 46
1557: PUSH
1558: LD_INT 10
1560: PUSH
1561: LD_INT 10
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 36
1570: PUSH
1571: LD_INT 10
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 51
1584: PUSH
1585: LD_INT 93
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 47
1594: PUSH
1595: LD_INT 72
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 102
1608: PUSH
1609: LD_INT 187
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 93
1618: PUSH
1619: LD_INT 175
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: LD_INT 158
1632: PUSH
1633: LD_INT 6
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 147
1642: PUSH
1643: LD_INT 5
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 203
1656: PUSH
1657: LD_INT 93
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 173
1666: PUSH
1667: LD_INT 71
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 252
1680: PUSH
1681: LD_INT 194
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 243
1690: PUSH
1691: LD_INT 177
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1710: LD_ADDR_EXP 40
1714: PUSH
1715: LD_INT 23
1717: PUSH
1718: LD_INT 15
1720: PUSH
1721: LD_INT 2
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 56
1731: PUSH
1732: LD_INT 85
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 110
1745: PUSH
1746: LD_INT 177
1748: PUSH
1749: LD_INT 3
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 157
1759: PUSH
1760: LD_INT 13
1762: PUSH
1763: LD_INT 3
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 187
1773: PUSH
1774: LD_INT 87
1776: PUSH
1777: LD_INT 5
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_INT 231
1787: PUSH
1788: LD_INT 181
1790: PUSH
1791: LD_INT 5
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
1807: LD_ADDR_EXP 42
1811: PUSH
1812: LD_INT 30
1814: PUSH
1815: LD_INT 22
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 58
1824: PUSH
1825: LD_INT 82
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 113
1834: PUSH
1835: LD_INT 180
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 151
1844: PUSH
1845: LD_INT 24
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 183
1854: PUSH
1855: LD_INT 90
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 223
1864: PUSH
1865: LD_INT 180
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
1880: LD_ADDR_EXP 41
1884: PUSH
1885: LD_INT 33
1887: PUSH
1888: LD_INT 12
1890: PUSH
1891: LD_INT 5
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 42
1901: PUSH
1902: LD_INT 29
1904: PUSH
1905: LD_INT 4
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: PUSH
1913: LD_INT 36
1915: PUSH
1916: LD_INT 20
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 72
1934: PUSH
1935: LD_INT 91
1937: PUSH
1938: LD_INT 4
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 65
1948: PUSH
1949: LD_INT 78
1951: PUSH
1952: LD_INT 4
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 75
1962: PUSH
1963: LD_INT 100
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 102
1981: PUSH
1982: LD_INT 165
1984: PUSH
1985: LD_INT 3
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 122
1995: PUSH
1996: LD_INT 176
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 120
2009: PUSH
2010: LD_INT 184
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 134
2028: PUSH
2029: LD_INT 16
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 132
2042: PUSH
2043: LD_INT 5
2045: PUSH
2046: LD_INT 1
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 157
2056: PUSH
2057: LD_INT 27
2059: PUSH
2060: LD_INT 5
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: LD_INT 172
2075: PUSH
2076: LD_INT 77
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: LIST
2086: PUSH
2087: LD_INT 175
2089: PUSH
2090: LD_INT 96
2092: PUSH
2093: LD_INT 1
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 192
2103: PUSH
2104: LD_INT 104
2106: PUSH
2107: LD_INT 1
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PUSH
2120: LD_INT 216
2122: PUSH
2123: LD_INT 179
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 208
2136: PUSH
2137: LD_INT 160
2139: PUSH
2140: LD_INT 2
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 208
2150: PUSH
2151: LD_INT 171
2153: PUSH
2154: LD_INT 2
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// for i = 1 to 6 do
2175: LD_ADDR_VAR 0 2
2179: PUSH
2180: DOUBLE
2181: LD_INT 1
2183: DEC
2184: ST_TO_ADDR
2185: LD_INT 6
2187: PUSH
2188: FOR_TO
2189: IFFALSE 2286
// if def_extra_oil_deposits then
2191: LD_EXP 6
2195: IFFALSE 2247
// for j in extra_oil_deposits_locations [ i ] do
2197: LD_ADDR_VAR 0 3
2201: PUSH
2202: LD_EXP 44
2206: PUSH
2207: LD_VAR 0 2
2211: ARRAY
2212: PUSH
2213: FOR_IN
2214: IFFALSE 2243
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2216: LD_VAR 0 3
2220: PUSH
2221: LD_INT 1
2223: ARRAY
2224: PPUSH
2225: LD_VAR 0 3
2229: PUSH
2230: LD_INT 2
2232: ARRAY
2233: PPUSH
2234: LD_INT 2
2236: PPUSH
2237: CALL_OW 62
2241: GO 2213
2243: POP
2244: POP
2245: GO 2284
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2247: LD_EXP 43
2251: PUSH
2252: LD_VAR 0 2
2256: ARRAY
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PPUSH
2262: LD_EXP 43
2266: PUSH
2267: LD_VAR 0 2
2271: ARRAY
2272: PUSH
2273: LD_INT 2
2275: ARRAY
2276: PPUSH
2277: LD_INT 2
2279: PPUSH
2280: CALL_OW 62
2284: GO 2188
2286: POP
2287: POP
// if def_extra_sib_deposits then
2288: LD_EXP 7
2292: IFFALSE 2411
// for i = 1 to 6 do
2294: LD_ADDR_VAR 0 2
2298: PUSH
2299: DOUBLE
2300: LD_INT 1
2302: DEC
2303: ST_TO_ADDR
2304: LD_INT 6
2306: PUSH
2307: FOR_TO
2308: IFFALSE 2409
// if def_extra_sib_deposits = 2 then
2310: LD_EXP 7
2314: PUSH
2315: LD_INT 2
2317: EQUAL
2318: IFFALSE 2370
// for j in extra_sib_deposits_locations [ i ] do
2320: LD_ADDR_VAR 0 3
2324: PUSH
2325: LD_EXP 46
2329: PUSH
2330: LD_VAR 0 2
2334: ARRAY
2335: PUSH
2336: FOR_IN
2337: IFFALSE 2366
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2339: LD_VAR 0 3
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 2
2355: ARRAY
2356: PPUSH
2357: LD_INT 3
2359: PPUSH
2360: CALL_OW 62
2364: GO 2336
2366: POP
2367: POP
2368: GO 2407
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2370: LD_EXP 45
2374: PUSH
2375: LD_VAR 0 2
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_EXP 45
2389: PUSH
2390: LD_VAR 0 2
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: LD_INT 3
2402: PPUSH
2403: CALL_OW 62
2407: GO 2307
2409: POP
2410: POP
// end ;
2411: LD_VAR 0 1
2415: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2416: LD_INT 0
2418: PPUSH
2419: PPUSH
2420: PPUSH
// if not Team_Game then
2421: LD_EXP 39
2425: NOT
2426: IFFALSE 2524
// begin for i = 1 to 8 do
2428: LD_ADDR_VAR 0 2
2432: PUSH
2433: DOUBLE
2434: LD_INT 1
2436: DEC
2437: ST_TO_ADDR
2438: LD_INT 8
2440: PUSH
2441: FOR_TO
2442: IFFALSE 2520
// for j = 1 to 8 do
2444: LD_ADDR_VAR 0 3
2448: PUSH
2449: DOUBLE
2450: LD_INT 1
2452: DEC
2453: ST_TO_ADDR
2454: LD_INT 8
2456: PUSH
2457: FOR_TO
2458: IFFALSE 2516
// if i <> j then
2460: LD_VAR 0 2
2464: PUSH
2465: LD_VAR 0 3
2469: NONEQUAL
2470: IFFALSE 2494
// SetAttitude ( i , j , att_neutral , true ) else
2472: LD_VAR 0 2
2476: PPUSH
2477: LD_VAR 0 3
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: LD_INT 1
2487: PPUSH
2488: CALL_OW 80
2492: GO 2514
// SetAttitude ( i , j , att_friend , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: LD_INT 1
2509: PPUSH
2510: CALL_OW 80
2514: GO 2457
2516: POP
2517: POP
2518: GO 2441
2520: POP
2521: POP
// end else
2522: GO 2699
// begin if def_shared_vision then
2524: LD_EXP 8
2528: IFFALSE 2593
// begin for i in Teams do
2530: LD_ADDR_VAR 0 2
2534: PUSH
2535: LD_EXP 36
2539: PUSH
2540: FOR_IN
2541: IFFALSE 2591
// for j = 2 to i do
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: DOUBLE
2549: LD_INT 2
2551: DEC
2552: ST_TO_ADDR
2553: LD_VAR 0 2
2557: PUSH
2558: FOR_TO
2559: IFFALSE 2587
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2561: LD_VAR 0 2
2565: PUSH
2566: LD_VAR 0 3
2570: ARRAY
2571: PPUSH
2572: LD_VAR 0 2
2576: PUSH
2577: LD_INT 1
2579: ARRAY
2580: PPUSH
2581: CALL_OW 343
2585: GO 2558
2587: POP
2588: POP
2589: GO 2540
2591: POP
2592: POP
// end ; for i = 1 to 8 do
2593: LD_ADDR_VAR 0 2
2597: PUSH
2598: DOUBLE
2599: LD_INT 1
2601: DEC
2602: ST_TO_ADDR
2603: LD_INT 8
2605: PUSH
2606: FOR_TO
2607: IFFALSE 2697
// for j = 1 to 8 do
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: DOUBLE
2615: LD_INT 1
2617: DEC
2618: ST_TO_ADDR
2619: LD_INT 8
2621: PUSH
2622: FOR_TO
2623: IFFALSE 2693
// if Side_Teams [ i ] = Side_Teams [ j ] then
2625: LD_EXP 35
2629: PUSH
2630: LD_VAR 0 2
2634: ARRAY
2635: PUSH
2636: LD_EXP 35
2640: PUSH
2641: LD_VAR 0 3
2645: ARRAY
2646: EQUAL
2647: IFFALSE 2671
// SetAttitude ( i , j , att_friend , true ) else
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_INT 1
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: CALL_OW 80
2669: GO 2691
// SetAttitude ( i , j , att_enemy , true ) ;
2671: LD_VAR 0 2
2675: PPUSH
2676: LD_VAR 0 3
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 1
2686: PPUSH
2687: CALL_OW 80
2691: GO 2622
2693: POP
2694: POP
2695: GO 2606
2697: POP
2698: POP
// end ; end ;
2699: LD_VAR 0 1
2703: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
// result := [ ] ;
2710: LD_ADDR_VAR 0 7
2714: PUSH
2715: EMPTY
2716: ST_TO_ADDR
// for i := 1 to count do
2717: LD_ADDR_VAR 0 8
2721: PUSH
2722: DOUBLE
2723: LD_INT 1
2725: DEC
2726: ST_TO_ADDR
2727: LD_VAR 0 1
2731: PUSH
2732: FOR_TO
2733: IFFALSE 3151
// begin uc_direction := Rand ( 0 , 5 ) ;
2735: LD_ADDR_OWVAR 24
2739: PUSH
2740: LD_INT 0
2742: PPUSH
2743: LD_INT 5
2745: PPUSH
2746: CALL_OW 12
2750: ST_TO_ADDR
// if commander then
2751: LD_LOC 1
2755: IFFALSE 2864
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2757: LD_ADDR_OWVAR 26
2761: PUSH
2762: LD_OWVAR 19
2766: PUSH
2767: LD_OWVAR 20
2771: ARRAY
2772: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2773: LD_INT 1
2775: PPUSH
2776: LD_INT 2
2778: PPUSH
2779: CALL_OW 12
2783: PPUSH
2784: LD_VAR 0 2
2788: PPUSH
2789: LD_EXP 22
2793: PUSH
2794: LD_INT 2
2796: PLUS
2797: PPUSH
2798: CALL_OW 380
// hc_importance := 105 ;
2802: LD_ADDR_OWVAR 32
2806: PUSH
2807: LD_INT 105
2809: ST_TO_ADDR
// commander := false ;
2810: LD_ADDR_LOC 1
2814: PUSH
2815: LD_INT 0
2817: ST_TO_ADDR
// if Multiplayer then
2818: LD_OWVAR 4
2822: IFFALSE 2862
// begin hc_gallery := MULTIAVATARS ;
2824: LD_ADDR_OWVAR 33
2828: PUSH
2829: LD_STRING MULTIAVATARS
2831: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2832: LD_ADDR_OWVAR 34
2836: PUSH
2837: LD_OWVAR 20
2841: PPUSH
2842: CALL_OW 525
2846: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2847: LD_ADDR_OWVAR 27
2851: PUSH
2852: LD_OWVAR 20
2856: PPUSH
2857: CALL_OW 526
2861: ST_TO_ADDR
// end ; end else
2862: GO 2927
// begin hc_name :=  ;
2864: LD_ADDR_OWVAR 26
2868: PUSH
2869: LD_STRING 
2871: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2872: LD_INT 1
2874: PPUSH
2875: LD_INT 2
2877: PPUSH
2878: CALL_OW 12
2882: PPUSH
2883: LD_VAR 0 2
2887: PPUSH
2888: LD_EXP 22
2892: PPUSH
2893: CALL_OW 380
// hc_importance := 0 ;
2897: LD_ADDR_OWVAR 32
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// if Multiplayer then
2905: LD_OWVAR 4
2909: IFFALSE 2927
// begin hc_gallery :=  ;
2911: LD_ADDR_OWVAR 33
2915: PUSH
2916: LD_STRING 
2918: ST_TO_ADDR
// hc_face_number := 0 ;
2919: LD_ADDR_OWVAR 34
2923: PUSH
2924: LD_INT 0
2926: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2927: LD_ADDR_VAR 0 10
2931: PUSH
2932: CALL_OW 44
2936: ST_TO_ADDR
// if global_defined then
2937: LD_LOC 3
2941: IFFALSE 3081
// begin if ( cl = class_soldier ) then
2943: LD_VAR 0 2
2947: PUSH
2948: LD_INT 1
2950: EQUAL
2951: IFFALSE 2971
// j := i + soldiers_created else
2953: LD_ADDR_VAR 0 9
2957: PUSH
2958: LD_VAR 0 8
2962: PUSH
2963: LD_LOC 4
2967: PLUS
2968: ST_TO_ADDR
2969: GO 2981
// j := i ;
2971: LD_ADDR_VAR 0 9
2975: PUSH
2976: LD_VAR 0 8
2980: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2981: LD_LOC 2
2985: PUSH
2986: LD_VAR 0 2
2990: ARRAY
2991: PUSH
2992: LD_VAR 0 9
2996: ARRAY
2997: PPUSH
2998: LD_VAR 0 10
3002: PPUSH
3003: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3007: LD_VAR 0 10
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: LD_LOC 2
3019: PUSH
3020: LD_VAR 0 2
3024: ARRAY
3025: PUSH
3026: LD_VAR 0 9
3030: ARRAY
3031: PPUSH
3032: LD_INT 2
3034: PPUSH
3035: CALL_OW 260
3039: PPUSH
3040: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3044: LD_VAR 0 10
3048: PPUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_LOC 2
3056: PUSH
3057: LD_VAR 0 2
3061: ARRAY
3062: PUSH
3063: LD_VAR 0 9
3067: ARRAY
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: CALL_OW 260
3076: PPUSH
3077: CALL_OW 239
// end ; if building then
3081: LD_VAR 0 6
3085: IFFALSE 3103
// PlaceHumanInUnit ( un , building ) else
3087: LD_VAR 0 10
3091: PPUSH
3092: LD_VAR 0 6
3096: PPUSH
3097: CALL_OW 52
3101: GO 3130
// PlaceUnitXYR ( un , x , y , r , false ) ;
3103: LD_VAR 0 10
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PPUSH
3118: LD_VAR 0 5
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 50
// result := result ^ [ un ] ;
3130: LD_ADDR_VAR 0 7
3134: PUSH
3135: LD_VAR 0 7
3139: PUSH
3140: LD_VAR 0 10
3144: PUSH
3145: EMPTY
3146: LIST
3147: ADD
3148: ST_TO_ADDR
// end ;
3149: GO 2732
3151: POP
3152: POP
// if not global_defined then
3153: LD_LOC 3
3157: NOT
3158: IFFALSE 3236
// if ( global_units >= cl ) then
3160: LD_LOC 2
3164: PUSH
3165: LD_VAR 0 2
3169: GREATEREQUAL
3170: IFFALSE 3211
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3172: LD_ADDR_LOC 2
3176: PUSH
3177: LD_LOC 2
3181: PPUSH
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_LOC 2
3191: PUSH
3192: LD_VAR 0 2
3196: ARRAY
3197: PUSH
3198: LD_VAR 0 7
3202: ADD
3203: PPUSH
3204: CALL_OW 1
3208: ST_TO_ADDR
3209: GO 3236
// global_units := Replace ( global_units , cl , result ) ;
3211: LD_ADDR_LOC 2
3215: PUSH
3216: LD_LOC 2
3220: PPUSH
3221: LD_VAR 0 2
3225: PPUSH
3226: LD_VAR 0 7
3230: PPUSH
3231: CALL_OW 1
3235: ST_TO_ADDR
// end ;
3236: LD_VAR 0 7
3240: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3241: LD_INT 0
3243: PPUSH
3244: PPUSH
3245: PPUSH
3246: PPUSH
3247: PPUSH
3248: PPUSH
3249: PPUSH
3250: PPUSH
3251: PPUSH
// if side in [ 0 , 9 ] then
3252: LD_VAR 0 1
3256: PUSH
3257: LD_INT 0
3259: PUSH
3260: LD_INT 9
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: IN
3267: IFFALSE 3271
// exit ;
3269: GO 4288
// pos := Side_Positions [ side ] ;
3271: LD_ADDR_VAR 0 3
3275: PUSH
3276: LD_EXP 37
3280: PUSH
3281: LD_VAR 0 1
3285: ARRAY
3286: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3287: LD_ADDR_OWVAR 21
3291: PUSH
3292: LD_EXP 38
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: ST_TO_ADDR
// uc_side := side ;
3303: LD_ADDR_OWVAR 20
3307: PUSH
3308: LD_VAR 0 1
3312: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3313: LD_ADDR_VAR 0 4
3317: PUSH
3318: LD_EXP 40
3322: PUSH
3323: LD_VAR 0 3
3327: ARRAY
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3333: LD_ADDR_VAR 0 5
3337: PUSH
3338: LD_EXP 40
3342: PUSH
3343: LD_VAR 0 3
3347: ARRAY
3348: PUSH
3349: LD_INT 2
3351: ARRAY
3352: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3353: LD_ADDR_VAR 0 6
3357: PUSH
3358: LD_EXP 40
3362: PUSH
3363: LD_VAR 0 3
3367: ARRAY
3368: PUSH
3369: LD_INT 3
3371: ARRAY
3372: ST_TO_ADDR
// if is_depot then
3373: LD_EXP 19
3377: IFFALSE 3510
// begin bc_type = b_depot ;
3379: LD_ADDR_OWVAR 42
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3387: LD_ADDR_VAR 0 10
3391: PUSH
3392: LD_VAR 0 4
3396: PPUSH
3397: LD_VAR 0 5
3401: PPUSH
3402: LD_VAR 0 6
3406: PPUSH
3407: CALL_OW 47
3411: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3412: LD_VAR 0 10
3416: PPUSH
3417: LD_STRING @
3419: PUSH
3420: LD_VAR 0 1
3424: STR
3425: PPUSH
3426: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3430: LD_VAR 0 10
3434: PPUSH
3435: CALL_OW 274
3439: PPUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_EXP 24
3447: PUSH
3448: LD_INT 1
3450: ARRAY
3451: PPUSH
3452: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3456: LD_VAR 0 10
3460: PPUSH
3461: CALL_OW 274
3465: PPUSH
3466: LD_INT 2
3468: PPUSH
3469: LD_EXP 24
3473: PUSH
3474: LD_INT 2
3476: ARRAY
3477: PPUSH
3478: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3482: LD_VAR 0 10
3486: PPUSH
3487: CALL_OW 274
3491: PPUSH
3492: LD_INT 3
3494: PPUSH
3495: LD_EXP 24
3499: PUSH
3500: LD_INT 3
3502: ARRAY
3503: PPUSH
3504: CALL_OW 277
// end else
3508: GO 3654
// begin for i := 1 to 3 do
3510: LD_ADDR_VAR 0 7
3514: PUSH
3515: DOUBLE
3516: LD_INT 1
3518: DEC
3519: ST_TO_ADDR
3520: LD_INT 3
3522: PUSH
3523: FOR_TO
3524: IFFALSE 3652
// begin r := starting_resources [ i ] ;
3526: LD_ADDR_VAR 0 8
3530: PUSH
3531: LD_EXP 24
3535: PUSH
3536: LD_VAR 0 7
3540: ARRAY
3541: ST_TO_ADDR
// while r >= 10 do
3542: LD_VAR 0 8
3546: PUSH
3547: LD_INT 10
3549: GREATEREQUAL
3550: IFFALSE 3650
// if r > 50 then
3552: LD_VAR 0 8
3556: PUSH
3557: LD_INT 50
3559: GREATER
3560: IFFALSE 3606
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3562: LD_VAR 0 7
3566: PPUSH
3567: LD_INT 5
3569: PPUSH
3570: LD_VAR 0 4
3574: PPUSH
3575: LD_VAR 0 5
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 60
// r := r - 50 ;
3590: LD_ADDR_VAR 0 8
3594: PUSH
3595: LD_VAR 0 8
3599: PUSH
3600: LD_INT 50
3602: MINUS
3603: ST_TO_ADDR
// end else
3604: GO 3648
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3606: LD_VAR 0 7
3610: PPUSH
3611: LD_VAR 0 8
3615: PUSH
3616: LD_INT 10
3618: DIV
3619: PPUSH
3620: LD_VAR 0 4
3624: PPUSH
3625: LD_VAR 0 5
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: LD_INT 0
3635: PPUSH
3636: CALL_OW 60
// r := 0 ;
3640: LD_ADDR_VAR 0 8
3644: PUSH
3645: LD_INT 0
3647: ST_TO_ADDR
// end ;
3648: GO 3542
// end ;
3650: GO 3523
3652: POP
3653: POP
// end ; for r in starting_crates do
3654: LD_ADDR_VAR 0 8
3658: PUSH
3659: LD_EXP 23
3663: PUSH
3664: FOR_IN
3665: IFFALSE 3697
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3667: LD_INT 1
3669: PPUSH
3670: LD_INT 5
3672: PPUSH
3673: LD_VAR 0 4
3677: PPUSH
3678: LD_VAR 0 5
3682: PPUSH
3683: LD_VAR 0 8
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 60
3695: GO 3664
3697: POP
3698: POP
// if def_morale_flags then
3699: LD_EXP 9
3703: IFFALSE 3842
// begin x := start_def [ pos ] [ 1 ] ;
3705: LD_ADDR_VAR 0 4
3709: PUSH
3710: LD_EXP 42
3714: PUSH
3715: LD_VAR 0 3
3719: ARRAY
3720: PUSH
3721: LD_INT 1
3723: ARRAY
3724: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3725: LD_ADDR_VAR 0 5
3729: PUSH
3730: LD_EXP 42
3734: PUSH
3735: LD_VAR 0 3
3739: ARRAY
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3745: LD_VAR 0 4
3749: PPUSH
3750: LD_VAR 0 5
3754: PPUSH
3755: LD_INT 12
3757: PPUSH
3758: LD_INT 2
3760: PPUSH
3761: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3765: LD_ADDR_EXP 47
3769: PUSH
3770: LD_EXP 47
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: LD_VAR 0 4
3784: PPUSH
3785: LD_VAR 0 5
3789: PPUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 100
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: LD_INT 2
3802: PUSH
3803: LD_INT 50
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 20
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 20
3822: PUSH
3823: LD_INT 100
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 418
3840: ADD
3841: ST_TO_ADDR
// end ; commander := true ;
3842: LD_ADDR_LOC 1
3846: PUSH
3847: LD_INT 1
3849: ST_TO_ADDR
// soldiers_created := 0 ;
3850: LD_ADDR_LOC 4
3854: PUSH
3855: LD_INT 0
3857: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3858: LD_ADDR_VAR 0 7
3862: PUSH
3863: DOUBLE
3864: LD_INT 1
3866: DEC
3867: ST_TO_ADDR
3868: LD_EXP 20
3872: PUSH
3873: FOR_TO
3874: IFFALSE 4027
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3876: LD_ADDR_VAR 0 4
3880: PUSH
3881: LD_EXP 41
3885: PUSH
3886: LD_VAR 0 3
3890: ARRAY
3891: PUSH
3892: LD_VAR 0 7
3896: ARRAY
3897: PUSH
3898: LD_INT 1
3900: ARRAY
3901: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3902: LD_ADDR_VAR 0 5
3906: PUSH
3907: LD_EXP 41
3911: PUSH
3912: LD_VAR 0 3
3916: ARRAY
3917: PUSH
3918: LD_VAR 0 7
3922: ARRAY
3923: PUSH
3924: LD_INT 2
3926: ARRAY
3927: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3928: LD_ADDR_VAR 0 6
3932: PUSH
3933: LD_EXP 41
3937: PUSH
3938: LD_VAR 0 3
3942: ARRAY
3943: PUSH
3944: LD_VAR 0 7
3948: ARRAY
3949: PUSH
3950: LD_INT 3
3952: ARRAY
3953: ST_TO_ADDR
// bc_type := b_breastwork ;
3954: LD_ADDR_OWVAR 42
3958: PUSH
3959: LD_INT 31
3961: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3962: LD_ADDR_VAR 0 9
3966: PUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_VAR 0 6
3981: PPUSH
3982: CALL_OW 47
3986: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3987: LD_INT 1
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: LD_INT 0
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: LD_VAR 0 9
4006: PPUSH
4007: CALL 2704 0 6
// soldiers_created := soldiers_created + 1 ;
4011: LD_ADDR_LOC 4
4015: PUSH
4016: LD_LOC 4
4020: PUSH
4021: LD_INT 1
4023: PLUS
4024: ST_TO_ADDR
// end ;
4025: GO 3873
4027: POP
4028: POP
// x := start_def [ pos ] [ 1 ] ;
4029: LD_ADDR_VAR 0 4
4033: PUSH
4034: LD_EXP 42
4038: PUSH
4039: LD_VAR 0 3
4043: ARRAY
4044: PUSH
4045: LD_INT 1
4047: ARRAY
4048: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4049: LD_ADDR_VAR 0 5
4053: PUSH
4054: LD_EXP 42
4058: PUSH
4059: LD_VAR 0 3
4063: ARRAY
4064: PUSH
4065: LD_INT 2
4067: ARRAY
4068: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4069: LD_LOC 8
4073: PUSH
4074: LD_EXP 20
4078: MINUS
4079: PPUSH
4080: LD_INT 1
4082: PPUSH
4083: LD_VAR 0 4
4087: PPUSH
4088: LD_VAR 0 5
4092: PPUSH
4093: LD_INT 5
4095: PPUSH
4096: LD_INT 0
4098: PPUSH
4099: CALL 2704 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4103: LD_LOC 5
4107: PPUSH
4108: LD_INT 2
4110: PPUSH
4111: LD_VAR 0 4
4115: PPUSH
4116: LD_VAR 0 5
4120: PPUSH
4121: LD_INT 5
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL 2704 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4131: LD_LOC 7
4135: PPUSH
4136: LD_INT 3
4138: PPUSH
4139: LD_VAR 0 4
4143: PPUSH
4144: LD_VAR 0 5
4148: PPUSH
4149: LD_INT 5
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: CALL 2704 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4159: LD_LOC 6
4163: PPUSH
4164: LD_INT 4
4166: PPUSH
4167: LD_VAR 0 4
4171: PPUSH
4172: LD_VAR 0 5
4176: PPUSH
4177: LD_INT 5
4179: PPUSH
4180: LD_INT 0
4182: PPUSH
4183: CALL 2704 0 6
// if def_siberite_detection then
4187: LD_EXP 10
4191: IFFALSE 4208
// SetTech ( tech_SibDet , side , state_researched ) ;
4193: LD_INT 20
4195: PPUSH
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_INT 2
4203: PPUSH
4204: CALL_OW 322
// if def_siberite_bomb = 1 then
4208: LD_EXP 15
4212: PUSH
4213: LD_INT 1
4215: EQUAL
4216: IFFALSE 4250
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4218: LD_INT 25
4220: PPUSH
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 1
4228: PPUSH
4229: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4233: LD_INT 73
4235: PPUSH
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 1
4243: PPUSH
4244: CALL_OW 322
// end else
4248: GO 4280
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4250: LD_INT 25
4252: PPUSH
4253: LD_VAR 0 1
4257: PPUSH
4258: LD_INT 0
4260: PPUSH
4261: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4265: LD_INT 73
4267: PPUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 0
4275: PPUSH
4276: CALL_OW 322
// end ; global_defined := true ;
4280: LD_ADDR_LOC 3
4284: PUSH
4285: LD_INT 1
4287: ST_TO_ADDR
// end ;
4288: LD_VAR 0 2
4292: RET
// every 0 0$1 do
4293: GO 4295
4295: DISABLE
// if ( def_siberite_bomb > 1 ) then
4296: LD_EXP 15
4300: PUSH
4301: LD_INT 1
4303: GREATER
4304: IFFALSE 4319
// begin wait ( siberite_bomb_Delay ) ;
4306: LD_EXP 33
4310: PPUSH
4311: CALL_OW 67
// EnableSibFiss ;
4315: CALL 4320 0 0
// end ;
4319: END
// function EnableSibFiss ; var i ; begin
4320: LD_INT 0
4322: PPUSH
4323: PPUSH
// for i := 1 to 8 do
4324: LD_ADDR_VAR 0 2
4328: PUSH
4329: DOUBLE
4330: LD_INT 1
4332: DEC
4333: ST_TO_ADDR
4334: LD_INT 8
4336: PUSH
4337: FOR_TO
4338: IFFALSE 4384
// if Side_Positions [ i ] then
4340: LD_EXP 37
4344: PUSH
4345: LD_VAR 0 2
4349: ARRAY
4350: IFFALSE 4382
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4352: LD_INT 25
4354: PPUSH
4355: LD_VAR 0 2
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4367: LD_INT 73
4369: PPUSH
4370: LD_VAR 0 2
4374: PPUSH
4375: LD_INT 1
4377: PPUSH
4378: CALL_OW 322
// end ;
4382: GO 4337
4384: POP
4385: POP
// end ;
4386: LD_VAR 0 1
4390: RET
// function prepare_sides ; var i ; begin
4391: LD_INT 0
4393: PPUSH
4394: PPUSH
// global_units := [ ] ;
4395: LD_ADDR_LOC 2
4399: PUSH
4400: EMPTY
4401: ST_TO_ADDR
// global_defined := false ;
4402: LD_ADDR_LOC 3
4406: PUSH
4407: LD_INT 0
4409: ST_TO_ADDR
// CountClassMembers ;
4410: CALL 4460 0 0
// for i := 1 to 8 do
4414: LD_ADDR_VAR 0 2
4418: PUSH
4419: DOUBLE
4420: LD_INT 1
4422: DEC
4423: ST_TO_ADDR
4424: LD_INT 8
4426: PUSH
4427: FOR_TO
4428: IFFALSE 4453
// if Side_Positions [ i ] then
4430: LD_EXP 37
4434: PUSH
4435: LD_VAR 0 2
4439: ARRAY
4440: IFFALSE 4451
// prepare_side ( i ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: CALL 3241 0 1
4451: GO 4427
4453: POP
4454: POP
// end ;
4455: LD_VAR 0 1
4459: RET
// function CountClassMembers ; var Mode ; begin
4460: LD_INT 0
4462: PPUSH
4463: PPUSH
// if No_Mechs then
4464: LD_EXP 17
4468: IFFALSE 4480
// Mode := 2 else
4470: LD_ADDR_VAR 0 2
4474: PUSH
4475: LD_INT 2
4477: ST_TO_ADDR
4478: GO 4488
// Mode := 1 ;
4480: LD_ADDR_VAR 0 2
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// neng := number_of_people ;
4488: LD_ADDR_LOC 5
4492: PUSH
4493: LD_EXP 21
4497: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4498: LD_ADDR_LOC 8
4502: PUSH
4503: LD_LOC 5
4507: PUSH
4508: LD_INT 4
4510: PUSH
4511: LD_INT 3
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: DIV
4524: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4525: LD_LOC 8
4529: PUSH
4530: LD_EXP 20
4534: LESS
4535: IFFALSE 4547
// nsol := number_of_breastworks ;
4537: LD_ADDR_LOC 8
4541: PUSH
4542: LD_EXP 20
4546: ST_TO_ADDR
// neng := neng - nsol ;
4547: LD_ADDR_LOC 5
4551: PUSH
4552: LD_LOC 5
4556: PUSH
4557: LD_LOC 8
4561: MINUS
4562: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4563: LD_ADDR_LOC 6
4567: PUSH
4568: LD_LOC 5
4572: PUSH
4573: LD_INT 3
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: DIV
4589: ST_TO_ADDR
// if ( nsci < 1 ) then
4590: LD_LOC 6
4594: PUSH
4595: LD_INT 1
4597: LESS
4598: IFFALSE 4608
// nsci := 1 ;
4600: LD_ADDR_LOC 6
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// neng := neng - nsci ;
4608: LD_ADDR_LOC 5
4612: PUSH
4613: LD_LOC 5
4617: PUSH
4618: LD_LOC 6
4622: MINUS
4623: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4624: LD_ADDR_LOC 7
4628: PUSH
4629: LD_LOC 5
4633: PUSH
4634: LD_INT 2
4636: DIV
4637: PUSH
4638: LD_INT 0
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: LD_VAR 0 2
4649: ARRAY
4650: ST_TO_ADDR
// neng := neng - nmech ;
4651: LD_ADDR_LOC 5
4655: PUSH
4656: LD_LOC 5
4660: PUSH
4661: LD_LOC 7
4665: MINUS
4666: ST_TO_ADDR
// if ( neng < 1 ) then
4667: LD_LOC 5
4671: PUSH
4672: LD_INT 1
4674: LESS
4675: IFFALSE 4685
// neng := 1 ;
4677: LD_ADDR_LOC 5
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// end ;
4685: LD_VAR 0 1
4689: RET
// function Init_Win_Condition ; begin
4690: LD_INT 0
4692: PPUSH
// if Team_Game then
4693: LD_EXP 39
4697: IFFALSE 4704
// enable ( 98 ) else
4699: LD_INT 98
4701: ENABLE_MARKED
4702: GO 4707
// enable ( 99 ) ;
4704: LD_INT 99
4706: ENABLE_MARKED
// case Game_Type of 3 :
4707: LD_EXP 18
4711: PUSH
4712: LD_INT 3
4714: DOUBLE
4715: EQUAL
4716: IFTRUE 4720
4718: GO 4726
4720: POP
// enable ( 100 ) ; end ;
4721: LD_INT 100
4723: ENABLE_MARKED
4724: GO 4727
4726: POP
// end ;
4727: LD_VAR 0 1
4731: RET
// starting begin disable ( 98 ) ;
4732: LD_INT 98
4734: DISABLE_MARKED
// disable ( 99 ) ;
4735: LD_INT 99
4737: DISABLE_MARKED
// disable ( 400 ) ;
4738: LD_INT 400
4740: DISABLE_MARKED
// disable ( 401 ) ;
4741: LD_INT 401
4743: DISABLE_MARKED
// mp_selectmsg := true ;
4744: LD_ADDR_OWVAR 13
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4752: CALL 0 0 0
// init_map ;
4756: CALL 1245 0 0
// init_respawning ;
4760: CALL 12972 0 0
// set_shared_visions_and_alliances ;
4764: CALL 2416 0 0
// prepare_sides ;
4768: CALL 4391 0 0
// ShowTimer ;
4772: CALL 7848 0 0
// music_nat := Side_Nations [ your_side ] ;
4776: LD_ADDR_OWVAR 71
4780: PUSH
4781: LD_EXP 38
4785: PUSH
4786: LD_OWVAR 2
4790: ARRAY
4791: ST_TO_ADDR
// if IAmSpec then
4792: CALL_OW 531
4796: IFFALSE 4832
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4798: LD_INT 0
4800: PPUSH
4801: LD_INT 0
4803: PPUSH
4804: LD_OWVAR 2
4808: PPUSH
4809: LD_INT 32767
4811: NEG
4812: PPUSH
4813: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
4817: LD_INT 104
4819: PPUSH
4820: LD_INT 69
4822: PPUSH
4823: CALL_OW 86
// enable ( 400 ) ;
4827: LD_INT 400
4829: ENABLE_MARKED
// end else
4830: GO 4886
// begin ResetFog ;
4832: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4836: LD_EXP 42
4840: PUSH
4841: LD_EXP 37
4845: PUSH
4846: LD_OWVAR 2
4850: ARRAY
4851: ARRAY
4852: PUSH
4853: LD_INT 1
4855: ARRAY
4856: PPUSH
4857: LD_EXP 42
4861: PUSH
4862: LD_EXP 37
4866: PUSH
4867: LD_OWVAR 2
4871: ARRAY
4872: ARRAY
4873: PUSH
4874: LD_INT 2
4876: ARRAY
4877: PPUSH
4878: CALL_OW 86
// Init_Win_Condition ;
4882: CALL 4690 0 0
// end ; AnimateTrees ( true ) ;
4886: LD_INT 1
4888: PPUSH
4889: CALL_OW 573
// InitApeman ;
4893: CALL 5705 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
4897: LD_ADDR_EXP 56
4901: PUSH
4902: LD_INT 7
4904: PUSH
4905: LD_INT 8
4907: PUSH
4908: LD_INT 9
4910: PUSH
4911: LD_INT 10
4913: PUSH
4914: LD_INT 11
4916: PUSH
4917: LD_INT 12
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: ST_TO_ADDR
// BeginBuildUp ;
4928: CALL 13466 0 0
// end ;
4932: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 and spect = 0 do
4933: LD_INT 22
4935: PUSH
4936: LD_OWVAR 2
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 2
4947: PUSH
4948: LD_INT 21
4950: PUSH
4951: LD_INT 1
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 33
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: LD_INT 33
4970: PUSH
4971: LD_INT 5
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 30
4980: PUSH
4981: LD_INT 0
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 30
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 69
5014: PUSH
5015: LD_INT 0
5017: EQUAL
5018: PUSH
5019: LD_EXP 31
5023: PUSH
5024: LD_INT 0
5026: EQUAL
5027: AND
5028: IFFALSE 5042
5030: GO 5032
5032: DISABLE
// begin fogoff ( your_side ) ;
5033: LD_OWVAR 2
5037: PPUSH
5038: CALL_OW 344
// end ; end_of_file
5042: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5043: GO 5045
5045: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
5046: LD_INT 4
5048: PPUSH
5049: LD_INT 5
5051: PPUSH
5052: CALL_OW 12
5056: PPUSH
5057: LD_INT 14
5059: PPUSH
5060: LD_INT 1
5062: PPUSH
5063: CALL_OW 55
// enable ;
5067: ENABLE
// end ;
5068: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5069: GO 5071
5071: DISABLE
5072: LD_INT 0
5074: PPUSH
5075: PPUSH
// begin case tick of 1 .. 1 1$0 :
5076: LD_OWVAR 1
5080: PUSH
5081: LD_INT 1
5083: DOUBLE
5084: GREATEREQUAL
5085: IFFALSE 5093
5087: LD_INT 2100
5089: DOUBLE
5090: LESSEQUAL
5091: IFTRUE 5095
5093: GO 5123
5095: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5096: LD_EXP 25
5100: PUSH
5101: LD_INT 100
5103: DIVREAL
5104: PUSH
5105: LD_INT 350
5107: PPUSH
5108: LD_INT 1050
5110: PPUSH
5111: CALL_OW 12
5115: MUL
5116: PPUSH
5117: CALL_OW 67
5121: GO 5425
5123: LD_INT 2100
5125: PUSH
5126: LD_INT 1
5128: PLUS
5129: DOUBLE
5130: GREATEREQUAL
5131: IFFALSE 5139
5133: LD_INT 10500
5135: DOUBLE
5136: LESSEQUAL
5137: IFTRUE 5141
5139: GO 5169
5141: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5142: LD_EXP 25
5146: PUSH
5147: LD_INT 100
5149: DIVREAL
5150: PUSH
5151: LD_INT 1050
5153: PPUSH
5154: LD_INT 1575
5156: PPUSH
5157: CALL_OW 12
5161: MUL
5162: PPUSH
5163: CALL_OW 67
5167: GO 5425
5169: LD_INT 10500
5171: PUSH
5172: LD_INT 1
5174: PLUS
5175: DOUBLE
5176: GREATEREQUAL
5177: IFFALSE 5185
5179: LD_INT 21000
5181: DOUBLE
5182: LESSEQUAL
5183: IFTRUE 5187
5185: GO 5215
5187: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5188: LD_EXP 25
5192: PUSH
5193: LD_INT 100
5195: DIVREAL
5196: PUSH
5197: LD_INT 1575
5199: PPUSH
5200: LD_INT 2100
5202: PPUSH
5203: CALL_OW 12
5207: MUL
5208: PPUSH
5209: CALL_OW 67
5213: GO 5425
5215: LD_INT 21000
5217: PUSH
5218: LD_INT 1
5220: PLUS
5221: DOUBLE
5222: GREATEREQUAL
5223: IFFALSE 5231
5225: LD_INT 42000
5227: DOUBLE
5228: LESSEQUAL
5229: IFTRUE 5233
5231: GO 5261
5233: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5234: LD_EXP 25
5238: PUSH
5239: LD_INT 100
5241: DIVREAL
5242: PUSH
5243: LD_INT 2100
5245: PPUSH
5246: LD_INT 2625
5248: PPUSH
5249: CALL_OW 12
5253: MUL
5254: PPUSH
5255: CALL_OW 67
5259: GO 5425
5261: LD_INT 42000
5263: PUSH
5264: LD_INT 1
5266: PLUS
5267: DOUBLE
5268: GREATEREQUAL
5269: IFFALSE 5277
5271: LD_INT 63000
5273: DOUBLE
5274: LESSEQUAL
5275: IFTRUE 5279
5277: GO 5307
5279: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5280: LD_EXP 25
5284: PUSH
5285: LD_INT 100
5287: DIVREAL
5288: PUSH
5289: LD_INT 2625
5291: PPUSH
5292: LD_INT 3150
5294: PPUSH
5295: CALL_OW 12
5299: MUL
5300: PPUSH
5301: CALL_OW 67
5305: GO 5425
5307: LD_INT 63000
5309: PUSH
5310: LD_INT 1
5312: PLUS
5313: DOUBLE
5314: GREATEREQUAL
5315: IFFALSE 5323
5317: LD_INT 105000
5319: DOUBLE
5320: LESSEQUAL
5321: IFTRUE 5325
5323: GO 5353
5325: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5326: LD_EXP 25
5330: PUSH
5331: LD_INT 100
5333: DIVREAL
5334: PUSH
5335: LD_INT 3150
5337: PPUSH
5338: LD_INT 3675
5340: PPUSH
5341: CALL_OW 12
5345: MUL
5346: PPUSH
5347: CALL_OW 67
5351: GO 5425
5353: LD_INT 105000
5355: PUSH
5356: LD_INT 1
5358: PLUS
5359: DOUBLE
5360: GREATEREQUAL
5361: IFFALSE 5369
5363: LD_INT 630000
5365: DOUBLE
5366: LESSEQUAL
5367: IFTRUE 5371
5369: GO 5399
5371: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5372: LD_EXP 25
5376: PUSH
5377: LD_INT 100
5379: DIVREAL
5380: PUSH
5381: LD_INT 3675
5383: PPUSH
5384: LD_INT 4200
5386: PPUSH
5387: CALL_OW 12
5391: MUL
5392: PPUSH
5393: CALL_OW 67
5397: GO 5425
5399: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5400: LD_EXP 25
5404: PUSH
5405: LD_INT 100
5407: DIVREAL
5408: PUSH
5409: LD_INT 4200
5411: PPUSH
5412: LD_INT 5250
5414: PPUSH
5415: CALL_OW 12
5419: MUL
5420: PPUSH
5421: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5425: LD_ADDR_VAR 0 2
5429: PUSH
5430: LD_INT 3
5432: PPUSH
5433: LD_INT 5
5435: PPUSH
5436: CALL_OW 12
5440: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5441: LD_ADDR_VAR 0 1
5445: PUSH
5446: LD_EXP 37
5450: PUSH
5451: LD_INT 0
5453: PUSH
5454: EMPTY
5455: LIST
5456: DIFF
5457: PUSH
5458: FOR_IN
5459: IFFALSE 5508
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5461: LD_VAR 0 2
5465: PPUSH
5466: LD_EXP 42
5470: PUSH
5471: LD_VAR 0 1
5475: ARRAY
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: LD_EXP 42
5485: PUSH
5486: LD_VAR 0 1
5490: ARRAY
5491: PUSH
5492: LD_INT 2
5494: ARRAY
5495: PPUSH
5496: LD_INT 20
5498: PPUSH
5499: LD_INT 1
5501: PPUSH
5502: CALL_OW 56
5506: GO 5458
5508: POP
5509: POP
// enable ;
5510: ENABLE
// end ; end_of_file
5511: PPOPN 2
5513: END
// every 20 20$00 trigger apemanNumber do
5514: LD_EXP 48
5518: IFFALSE 5551
5520: GO 5522
5522: DISABLE
// begin enable ;
5523: ENABLE
// if apeLevel >= 8 then
5524: LD_EXP 53
5528: PUSH
5529: LD_INT 8
5531: GREATEREQUAL
5532: IFFALSE 5537
// disable else
5534: DISABLE
5535: GO 5551
// apeLevel := apeLevel + 1 ;
5537: LD_ADDR_EXP 53
5541: PUSH
5542: LD_EXP 53
5546: PUSH
5547: LD_INT 1
5549: PLUS
5550: ST_TO_ADDR
// end ;
5551: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5552: LD_EXP 48
5556: PUSH
5557: LD_EXP 49
5561: LESS
5562: IFFALSE 5702
5564: GO 5566
5566: DISABLE
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
5571: PPUSH
5572: PPUSH
// begin enable ;
5573: ENABLE
// for i := 1 to apemanPos do
5574: LD_ADDR_VAR 0 1
5578: PUSH
5579: DOUBLE
5580: LD_INT 1
5582: DEC
5583: ST_TO_ADDR
5584: LD_EXP 51
5588: PUSH
5589: FOR_TO
5590: IFFALSE 5700
// begin if apemanPlayerCount [ i ] then
5592: LD_EXP 52
5596: PUSH
5597: LD_VAR 0 1
5601: ARRAY
5602: IFFALSE 5698
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5604: LD_EXP 52
5608: PUSH
5609: LD_VAR 0 1
5613: ARRAY
5614: PUSH
5615: LD_EXP 51
5619: PUSH
5620: LD_VAR 0 1
5624: ARRAY
5625: GREATER
5626: IFFALSE 5698
// begin ape := PrepareApeman ;
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: CALL 6213 0 0
5637: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5638: LD_VAR 0 2
5642: PPUSH
5643: LD_EXP 54
5647: PUSH
5648: LD_VAR 0 1
5652: ARRAY
5653: PPUSH
5654: LD_INT 0
5656: PPUSH
5657: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5661: LD_ADDR_EXP 51
5665: PUSH
5666: LD_EXP 51
5670: PPUSH
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_EXP 51
5680: PUSH
5681: LD_VAR 0 1
5685: ARRAY
5686: PUSH
5687: LD_VAR 0 2
5691: UNION
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; end ; end ;
5698: GO 5589
5700: POP
5701: POP
// end ;
5702: PPOPN 4
5704: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
5709: PPUSH
5710: PPUSH
5711: PPUSH
5712: PPUSH
5713: PPUSH
// playersAmount := 0 ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_INT 0
5721: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5722: LD_ADDR_VAR 0 7
5726: PUSH
5727: LD_INT 3
5729: PUSH
5730: LD_INT 2
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: LD_INT 4
5738: PUSH
5739: LD_INT 6
5741: PUSH
5742: LD_INT 5
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5753: LD_ADDR_EXP 54
5757: PUSH
5758: LD_INT 0
5760: PUSH
5761: LD_INT 0
5763: PUSH
5764: LD_INT 0
5766: PUSH
5767: LD_INT 0
5769: PUSH
5770: LD_INT 0
5772: PUSH
5773: LD_INT 0
5775: PUSH
5776: LD_INT 0
5778: PUSH
5779: LD_INT 0
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: ST_TO_ADDR
// for j = 1 to Side_Positions do
5792: LD_ADDR_VAR 0 4
5796: PUSH
5797: DOUBLE
5798: LD_INT 1
5800: DEC
5801: ST_TO_ADDR
5802: LD_EXP 37
5806: PUSH
5807: FOR_TO
5808: IFFALSE 5875
// if Side_Positions [ j ] then
5810: LD_EXP 37
5814: PUSH
5815: LD_VAR 0 4
5819: ARRAY
5820: IFFALSE 5873
// begin playersAmount := playersAmount + 1 ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_VAR 0 3
5831: PUSH
5832: LD_INT 1
5834: PLUS
5835: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5836: LD_ADDR_EXP 54
5840: PUSH
5841: LD_EXP 54
5845: PPUSH
5846: LD_VAR 0 4
5850: PPUSH
5851: LD_VAR 0 7
5855: PUSH
5856: LD_EXP 37
5860: PUSH
5861: LD_VAR 0 4
5865: ARRAY
5866: ARRAY
5867: PPUSH
5868: CALL_OW 1
5872: ST_TO_ADDR
// end ;
5873: GO 5807
5875: POP
5876: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5877: LD_ADDR_EXP 50
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_EXP 27
5889: MUL
5890: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5891: LD_ADDR_EXP 48
5895: PUSH
5896: LD_VAR 0 3
5900: PUSH
5901: LD_EXP 50
5905: MUL
5906: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5907: LD_ADDR_EXP 49
5911: PUSH
5912: LD_EXP 48
5916: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5917: LD_ADDR_EXP 51
5921: PUSH
5922: LD_INT 0
5924: PUSH
5925: LD_INT 0
5927: PUSH
5928: LD_INT 0
5930: PUSH
5931: LD_INT 0
5933: PUSH
5934: LD_INT 0
5936: PUSH
5937: LD_INT 0
5939: PUSH
5940: LD_INT 0
5942: PUSH
5943: LD_INT 0
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5956: LD_ADDR_EXP 52
5960: PUSH
5961: LD_INT 0
5963: PUSH
5964: LD_INT 0
5966: PUSH
5967: LD_INT 0
5969: PUSH
5970: LD_INT 0
5972: PUSH
5973: LD_INT 0
5975: PUSH
5976: LD_INT 0
5978: PUSH
5979: LD_INT 0
5981: PUSH
5982: LD_INT 0
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: ST_TO_ADDR
// apeLevel := 1 ;
5995: LD_ADDR_EXP 53
5999: PUSH
6000: LD_INT 1
6002: ST_TO_ADDR
// if not apemanNumber then
6003: LD_EXP 48
6007: NOT
6008: IFFALSE 6012
// exit ;
6010: GO 6208
// for i := 1 to apemanPerPlayer do
6012: LD_ADDR_VAR 0 2
6016: PUSH
6017: DOUBLE
6018: LD_INT 1
6020: DEC
6021: ST_TO_ADDR
6022: LD_EXP 50
6026: PUSH
6027: FOR_TO
6028: IFFALSE 6206
// begin for j := 1 to Side_Positions do
6030: LD_ADDR_VAR 0 4
6034: PUSH
6035: DOUBLE
6036: LD_INT 1
6038: DEC
6039: ST_TO_ADDR
6040: LD_EXP 37
6044: PUSH
6045: FOR_TO
6046: IFFALSE 6202
// if Side_Positions [ j ] then
6048: LD_EXP 37
6052: PUSH
6053: LD_VAR 0 4
6057: ARRAY
6058: IFFALSE 6200
// begin pos := Side_Positions [ j ] ;
6060: LD_ADDR_VAR 0 6
6064: PUSH
6065: LD_EXP 37
6069: PUSH
6070: LD_VAR 0 4
6074: ARRAY
6075: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6076: LD_ADDR_EXP 52
6080: PUSH
6081: LD_EXP 52
6085: PPUSH
6086: LD_VAR 0 4
6090: PPUSH
6091: LD_EXP 52
6095: PUSH
6096: LD_VAR 0 4
6100: ARRAY
6101: PUSH
6102: LD_INT 1
6104: PLUS
6105: PPUSH
6106: CALL_OW 1
6110: ST_TO_ADDR
// ape := PrepareApeman ;
6111: LD_ADDR_VAR 0 5
6115: PUSH
6116: CALL 6213 0 0
6120: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6121: LD_ADDR_EXP 51
6125: PUSH
6126: LD_EXP 51
6130: PPUSH
6131: LD_VAR 0 4
6135: PPUSH
6136: LD_EXP 51
6140: PUSH
6141: LD_VAR 0 4
6145: ARRAY
6146: PPUSH
6147: LD_EXP 51
6151: PUSH
6152: LD_VAR 0 4
6156: ARRAY
6157: PUSH
6158: LD_INT 1
6160: PLUS
6161: PPUSH
6162: LD_VAR 0 5
6166: PPUSH
6167: CALL_OW 1
6171: PPUSH
6172: CALL_OW 1
6176: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6177: LD_VAR 0 5
6181: PPUSH
6182: LD_EXP 54
6186: PUSH
6187: LD_VAR 0 4
6191: ARRAY
6192: PPUSH
6193: LD_INT 0
6195: PPUSH
6196: CALL_OW 49
// end ;
6200: GO 6045
6202: POP
6203: POP
// end ;
6204: GO 6027
6206: POP
6207: POP
// end ;
6208: LD_VAR 0 1
6212: RET
// export function PrepareApeman ; var bonus ; begin
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
// uc_side := 0 ;
6217: LD_ADDR_OWVAR 20
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// uc_nation := 0 ;
6225: LD_ADDR_OWVAR 21
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// InitHc ;
6233: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6237: LD_ADDR_VAR 0 2
6241: PUSH
6242: LD_INT 1
6244: NEG
6245: PUSH
6246: LD_INT 0
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_OWVAR 1
6261: PUSH
6262: LD_INT 3
6264: MOD
6265: PUSH
6266: LD_INT 1
6268: PLUS
6269: ARRAY
6270: ST_TO_ADDR
// hc_class := class_apeman ;
6271: LD_ADDR_OWVAR 28
6275: PUSH
6276: LD_INT 12
6278: ST_TO_ADDR
// hc_gallery :=  ;
6279: LD_ADDR_OWVAR 33
6283: PUSH
6284: LD_STRING 
6286: ST_TO_ADDR
// hc_name :=  ;
6287: LD_ADDR_OWVAR 26
6291: PUSH
6292: LD_STRING 
6294: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6295: LD_ADDR_OWVAR 31
6299: PUSH
6300: LD_EXP 53
6304: PUSH
6305: LD_VAR 0 2
6309: PLUS
6310: PUSH
6311: LD_EXP 53
6315: PUSH
6316: LD_VAR 0 2
6320: PLUS
6321: PUSH
6322: LD_EXP 53
6326: PUSH
6327: LD_VAR 0 2
6331: PLUS
6332: PUSH
6333: LD_EXP 53
6337: PUSH
6338: LD_VAR 0 2
6342: PLUS
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6350: LD_ADDR_OWVAR 35
6354: PUSH
6355: LD_INT 10
6357: PUSH
6358: LD_VAR 0 2
6362: MUL
6363: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6364: LD_ADDR_OWVAR 29
6368: PUSH
6369: LD_INT 12
6371: PUSH
6372: LD_INT 10
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: ST_TO_ADDR
// result := CreateHuman ;
6379: LD_ADDR_VAR 0 1
6383: PUSH
6384: CALL_OW 44
6388: ST_TO_ADDR
// end ;
6389: LD_VAR 0 1
6393: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6394: LD_INT 0
6396: PPUSH
6397: PPUSH
6398: PPUSH
// if not ape then
6399: LD_VAR 0 1
6403: NOT
6404: IFFALSE 6408
// exit ;
6406: GO 6533
// side := GetSide ( ape ) ;
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 255
6422: ST_TO_ADDR
// if not side then
6423: LD_VAR 0 3
6427: NOT
6428: IFFALSE 6482
// begin for i = 1 to apemanPos do
6430: LD_ADDR_VAR 0 4
6434: PUSH
6435: DOUBLE
6436: LD_INT 1
6438: DEC
6439: ST_TO_ADDR
6440: LD_EXP 51
6444: PUSH
6445: FOR_TO
6446: IFFALSE 6480
// if ape in apemanPos [ i ] then
6448: LD_VAR 0 1
6452: PUSH
6453: LD_EXP 51
6457: PUSH
6458: LD_VAR 0 4
6462: ARRAY
6463: IN
6464: IFFALSE 6478
// begin side := i ;
6466: LD_ADDR_VAR 0 3
6470: PUSH
6471: LD_VAR 0 4
6475: ST_TO_ADDR
// break ;
6476: GO 6480
// end ;
6478: GO 6445
6480: POP
6481: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6482: LD_ADDR_EXP 51
6486: PUSH
6487: LD_EXP 51
6491: PPUSH
6492: LD_VAR 0 3
6496: PPUSH
6497: LD_EXP 51
6501: PUSH
6502: LD_VAR 0 3
6506: ARRAY
6507: PUSH
6508: LD_VAR 0 1
6512: DIFF
6513: PPUSH
6514: CALL_OW 1
6518: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6519: LD_ADDR_EXP 48
6523: PUSH
6524: LD_EXP 48
6528: PUSH
6529: LD_INT 1
6531: MINUS
6532: ST_TO_ADDR
// end ; end_of_file
6533: LD_VAR 0 2
6537: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6538: LD_VAR 0 1
6542: PPUSH
6543: CALL_OW 266
6547: PUSH
6548: LD_INT 0
6550: PUSH
6551: LD_INT 1
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: IN
6558: IFFALSE 6583
// SetBName ( b , @ & GetSide ( b ) ) ;
6560: LD_VAR 0 1
6564: PPUSH
6565: LD_STRING @
6567: PUSH
6568: LD_VAR 0 1
6572: PPUSH
6573: CALL_OW 255
6577: STR
6578: PPUSH
6579: CALL_OW 500
// end ;
6583: PPOPN 2
6585: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6586: LD_VAR 0 1
6590: PPUSH
6591: CALL_OW 266
6595: PUSH
6596: LD_INT 0
6598: PUSH
6599: LD_INT 1
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: IN
6606: IFFALSE 6631
// SetBName ( b , @ & GetSide ( b ) ) ;
6608: LD_VAR 0 1
6612: PPUSH
6613: LD_STRING @
6615: PUSH
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 255
6625: STR
6626: PPUSH
6627: CALL_OW 500
// end ;
6631: PPOPN 3
6633: END
// on VehicleConstructed ( veh , fac ) do var side ;
6634: LD_INT 0
6636: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6637: LD_VAR 0 1
6641: PPUSH
6642: CALL_OW 263
6646: PUSH
6647: LD_INT 5
6649: EQUAL
6650: IFFALSE 6792
// begin side := GetSide ( veh ) ;
6652: LD_ADDR_VAR 0 3
6656: PUSH
6657: LD_VAR 0 1
6661: PPUSH
6662: CALL_OW 255
6666: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6667: LD_ADDR_EXP 51
6671: PUSH
6672: LD_EXP 51
6676: PPUSH
6677: LD_VAR 0 3
6681: PPUSH
6682: LD_EXP 51
6686: PUSH
6687: LD_VAR 0 3
6691: ARRAY
6692: PPUSH
6693: LD_INT 52
6695: PUSH
6696: EMPTY
6697: LIST
6698: PPUSH
6699: CALL_OW 72
6703: PUSH
6704: LD_INT 22
6706: PUSH
6707: LD_VAR 0 3
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: LD_INT 33
6721: PUSH
6722: LD_INT 5
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 25
6731: PUSH
6732: LD_INT 12
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 25
6741: PUSH
6742: LD_INT 15
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 25
6751: PUSH
6752: LD_INT 16
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 25
6761: PUSH
6762: LD_INT 17
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PPUSH
6781: CALL_OW 69
6785: UNION
6786: PPUSH
6787: CALL_OW 1
6791: ST_TO_ADDR
// end ; end ;
6792: PPOPN 3
6794: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6795: LD_INT 0
6797: PPUSH
6798: PPUSH
6799: PPUSH
6800: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6801: LD_VAR 0 1
6805: PPUSH
6806: CALL_OW 257
6810: PUSH
6811: LD_INT 12
6813: PUSH
6814: LD_INT 15
6816: PUSH
6817: LD_INT 17
6819: PUSH
6820: LD_INT 16
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: IN
6829: PUSH
6830: LD_VAR 0 1
6834: PPUSH
6835: CALL_OW 263
6839: PUSH
6840: LD_INT 5
6842: EQUAL
6843: OR
6844: IFFALSE 6855
// ApeKilled ( j ) ;
6846: LD_VAR 0 1
6850: PPUSH
6851: CALL 6394 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6855: LD_VAR 0 1
6859: PPUSH
6860: CALL_OW 266
6864: PUSH
6865: LD_INT 0
6867: PUSH
6868: LD_INT 1
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: IN
6875: IFFALSE 6957
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6877: LD_ADDR_VAR 0 4
6881: PUSH
6882: LD_EXP 37
6886: PUSH
6887: LD_VAR 0 1
6891: PPUSH
6892: CALL_OW 255
6896: ARRAY
6897: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6898: LD_ADDR_VAR 0 2
6902: PUSH
6903: LD_EXP 42
6907: PUSH
6908: LD_VAR 0 4
6912: ARRAY
6913: PUSH
6914: LD_INT 1
6916: ARRAY
6917: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6918: LD_ADDR_VAR 0 3
6922: PUSH
6923: LD_EXP 42
6927: PUSH
6928: LD_VAR 0 4
6932: ARRAY
6933: PUSH
6934: LD_INT 2
6936: ARRAY
6937: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_VAR 0 3
6947: PPUSH
6948: CALL_OW 420
6952: PPUSH
6953: CALL_OW 419
// end ; end ;
6957: PPOPN 5
6959: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6960: LD_VAR 0 1
6964: PPUSH
6965: LD_VAR 0 2
6969: PPUSH
6970: LD_VAR 0 3
6974: PPUSH
6975: LD_OWVAR 2
6979: PPUSH
6980: CALL 8009 0 4
6984: PPOPN 3
6986: END
// function CanWinLoose ; begin
6987: LD_INT 0
6989: PPUSH
// Result := true ;
6990: LD_ADDR_VAR 0 1
6994: PUSH
6995: LD_INT 1
6997: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6998: CALL_OW 518
7002: PUSH
7003: CALL_OW 519
7007: PUSH
7008: LD_INT 0
7010: GREATER
7011: AND
7012: IFFALSE 7022
// Result := false ;
7014: LD_ADDR_VAR 0 1
7018: PUSH
7019: LD_INT 0
7021: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7022: CALL_OW 531
7026: PUSH
7027: CALL_OW 519
7031: PUSH
7032: LD_INT 1
7034: GREATER
7035: AND
7036: IFFALSE 7046
// Result := false ;
7038: LD_ADDR_VAR 0 1
7042: PUSH
7043: LD_INT 0
7045: ST_TO_ADDR
// end ;
7046: LD_VAR 0 1
7050: RET
// function HasPower ( i ) ; begin
7051: LD_INT 0
7053: PPUSH
// if def_people_respawning then
7054: LD_EXP 11
7058: IFFALSE 7149
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7060: LD_ADDR_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_VAR 0 1
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 2
7079: PUSH
7080: LD_INT 21
7082: PUSH
7083: LD_INT 1
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 33
7092: PUSH
7093: LD_INT 3
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 33
7102: PUSH
7103: LD_INT 5
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: LD_INT 30
7112: PUSH
7113: LD_INT 0
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 30
7122: PUSH
7123: LD_INT 1
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PPUSH
7142: CALL_OW 69
7146: ST_TO_ADDR
7147: GO 7214
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 21
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 33
7181: PUSH
7182: LD_INT 3
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 33
7191: PUSH
7192: LD_INT 5
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PPUSH
7209: CALL_OW 69
7213: ST_TO_ADDR
// end ;
7214: LD_VAR 0 2
7218: RET
// function AlliedSides ( i , j ) ; begin
7219: LD_INT 0
7221: PPUSH
// Result := false ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_VAR 0 2
7239: PPUSH
7240: CALL_OW 81
7244: PUSH
7245: LD_INT 1
7247: EQUAL
7248: PUSH
7249: LD_VAR 0 2
7253: PPUSH
7254: LD_VAR 0 1
7258: PPUSH
7259: CALL_OW 81
7263: PUSH
7264: LD_INT 1
7266: EQUAL
7267: AND
7268: PUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 83
7278: AND
7279: PUSH
7280: LD_VAR 0 2
7284: PPUSH
7285: CALL_OW 83
7289: AND
7290: IFFALSE 7300
// Result := true ;
7292: LD_ADDR_VAR 0 3
7296: PUSH
7297: LD_INT 1
7299: ST_TO_ADDR
// end ;
7300: LD_VAR 0 3
7304: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7305: CALL 6987 0 0
7309: IFFALSE 7318
7311: GO 7313
7313: DISABLE
// YouLostInMultiplayer ;
7314: CALL_OW 107
7318: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7319: CALL 6987 0 0
7323: IFFALSE 7347
7325: GO 7327
7327: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7328: LD_EXP 38
7332: PUSH
7333: LD_OWVAR 2
7337: ARRAY
7338: PPUSH
7339: CALL 8051 0 1
// YouWinInMultiplayer ;
7343: CALL_OW 106
// end ;
7347: END
// every 0 0$3 marked 98 do var i , CanWin ;
7348: GO 7350
7350: DISABLE
7351: LD_INT 0
7353: PPUSH
7354: PPUSH
// begin if not HasPower ( your_side ) then
7355: LD_OWVAR 2
7359: PPUSH
7360: CALL 7051 0 1
7364: NOT
7365: IFFALSE 7376
// begin Multiplayer_Loose_Message ;
7367: CALL_OW 521
// enable ( 400 ) ;
7371: LD_INT 400
7373: ENABLE_MARKED
// end else
7374: GO 7509
// begin CanWin := true ;
7376: LD_ADDR_VAR 0 2
7380: PUSH
7381: LD_INT 1
7383: ST_TO_ADDR
// for i := 1 to 8 do
7384: LD_ADDR_VAR 0 1
7388: PUSH
7389: DOUBLE
7390: LD_INT 1
7392: DEC
7393: ST_TO_ADDR
7394: LD_INT 8
7396: PUSH
7397: FOR_TO
7398: IFFALSE 7495
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7400: LD_EXP 37
7404: PUSH
7405: LD_VAR 0 1
7409: ARRAY
7410: PUSH
7411: LD_VAR 0 1
7415: PPUSH
7416: CALL_OW 108
7420: AND
7421: PUSH
7422: LD_VAR 0 1
7426: PUSH
7427: LD_OWVAR 2
7431: NONEQUAL
7432: AND
7433: IFFALSE 7493
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7435: LD_EXP 35
7439: PUSH
7440: LD_VAR 0 1
7444: ARRAY
7445: NOT
7446: PUSH
7447: LD_EXP 35
7451: PUSH
7452: LD_VAR 0 1
7456: ARRAY
7457: PUSH
7458: LD_EXP 35
7462: PUSH
7463: LD_OWVAR 2
7467: ARRAY
7468: NONEQUAL
7469: OR
7470: IFFALSE 7493
// if HasPower ( i ) then
7472: LD_VAR 0 1
7476: PPUSH
7477: CALL 7051 0 1
7481: IFFALSE 7493
// begin CanWin := false ;
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_INT 0
7490: ST_TO_ADDR
// break ;
7491: GO 7495
// end ;
7493: GO 7397
7495: POP
7496: POP
// if CanWin then
7497: LD_VAR 0 2
7501: IFFALSE 7508
// enable ( 401 ) else
7503: LD_INT 401
7505: ENABLE_MARKED
7506: GO 7509
// enable ;
7508: ENABLE
// end ; end ;
7509: PPOPN 2
7511: END
// every 0 0$3 marked 99 do var i , CanWin ;
7512: GO 7514
7514: DISABLE
7515: LD_INT 0
7517: PPUSH
7518: PPUSH
// begin if not HasPower ( your_side ) then
7519: LD_OWVAR 2
7523: PPUSH
7524: CALL 7051 0 1
7528: NOT
7529: IFFALSE 7540
// begin Multiplayer_Loose_Message ;
7531: CALL_OW 521
// enable ( 400 ) ;
7535: LD_INT 400
7537: ENABLE_MARKED
// end else
7538: GO 7653
// begin CanWin := true ;
7540: LD_ADDR_VAR 0 2
7544: PUSH
7545: LD_INT 1
7547: ST_TO_ADDR
// for i := 1 to 8 do
7548: LD_ADDR_VAR 0 1
7552: PUSH
7553: DOUBLE
7554: LD_INT 1
7556: DEC
7557: ST_TO_ADDR
7558: LD_INT 8
7560: PUSH
7561: FOR_TO
7562: IFFALSE 7639
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7564: LD_EXP 37
7568: PUSH
7569: LD_VAR 0 1
7573: ARRAY
7574: PUSH
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 108
7584: AND
7585: PUSH
7586: LD_VAR 0 1
7590: PUSH
7591: LD_OWVAR 2
7595: NONEQUAL
7596: AND
7597: IFFALSE 7637
// if not AlliedSides ( i , your_side ) then
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_OWVAR 2
7608: PPUSH
7609: CALL 7219 0 2
7613: NOT
7614: IFFALSE 7637
// if HasPower ( i ) then
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL 7051 0 1
7625: IFFALSE 7637
// begin CanWin := false ;
7627: LD_ADDR_VAR 0 2
7631: PUSH
7632: LD_INT 0
7634: ST_TO_ADDR
// break ;
7635: GO 7639
// end ;
7637: GO 7561
7639: POP
7640: POP
// if CanWin then
7641: LD_VAR 0 2
7645: IFFALSE 7652
// enable ( 401 ) else
7647: LD_INT 401
7649: ENABLE_MARKED
7650: GO 7653
// enable ;
7652: ENABLE
// end ; end ; end_of_file
7653: PPOPN 2
7655: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7656: LD_INT 0
7658: PPUSH
7659: PPUSH
// for un in battle_flags_id do
7660: LD_ADDR_VAR 0 2
7664: PUSH
7665: LD_EXP 47
7669: PUSH
7670: FOR_IN
7671: IFFALSE 7746
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7673: LD_VAR 0 2
7677: PPUSH
7678: LD_INT 1
7680: PUSH
7681: LD_LOC 9
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 2
7692: PUSH
7693: LD_LOC 9
7697: PUSH
7698: LD_INT 2
7700: DIV
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 3
7708: PUSH
7709: LD_LOC 9
7713: PUSH
7714: LD_INT 5
7716: DIV
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 20
7724: PUSH
7725: LD_LOC 9
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL_OW 423
7744: GO 7670
7746: POP
7747: POP
// end ;
7748: LD_VAR 0 1
7752: RET
// every 1 do var un ;
7753: GO 7755
7755: DISABLE
7756: LD_INT 0
7758: PPUSH
// begin if not def_morale_flags then
7759: LD_EXP 9
7763: NOT
7764: IFFALSE 7768
// exit ;
7766: GO 7845
// if not morale_decreasing_time then
7768: LD_EXP 26
7772: NOT
7773: IFFALSE 7777
// exit ;
7775: GO 7845
// strength = 100 ;
7777: LD_ADDR_LOC 9
7781: PUSH
7782: LD_INT 100
7784: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7785: LD_EXP 26
7789: PPUSH
7790: CALL_OW 67
// strength := strength - 1 ;
7794: LD_ADDR_LOC 9
7798: PUSH
7799: LD_LOC 9
7803: PUSH
7804: LD_INT 1
7806: MINUS
7807: ST_TO_ADDR
// Update_Flags ;
7808: CALL 7656 0 0
// until not strength ;
7812: LD_LOC 9
7816: NOT
7817: IFFALSE 7785
// for un in battle_flags_id do
7819: LD_ADDR_VAR 0 1
7823: PUSH
7824: LD_EXP 47
7828: PUSH
7829: FOR_IN
7830: IFFALSE 7843
// KillBattleFlag ( un ) ;
7832: LD_VAR 0 1
7836: PPUSH
7837: CALL_OW 419
7841: GO 7829
7843: POP
7844: POP
// end ; end_of_file
7845: PPOPN 1
7847: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
7848: LD_INT 0
7850: PPUSH
7851: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7852: LD_ADDR_VAR 0 2
7856: PUSH
7857: LD_STRING #Multi1x1-Time
7859: PUSH
7860: LD_OWVAR 1
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7869: LD_INT 0
7871: PUSH
7872: LD_EXP 33
7876: PUSH
7877: LD_OWVAR 1
7881: MINUS
7882: LESSEQUAL
7883: IFFALSE 7914
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7885: LD_ADDR_VAR 0 2
7889: PUSH
7890: LD_VAR 0 2
7894: PUSH
7895: LD_STRING #allowedsibbomb
7897: PUSH
7898: LD_EXP 33
7902: PUSH
7903: LD_OWVAR 1
7907: MINUS
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: ADD
7913: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7914: LD_INT 0
7916: PUSH
7917: LD_EXP 58
7921: PUSH
7922: LD_OWVAR 1
7926: MINUS
7927: LESSEQUAL
7928: IFFALSE 7959
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7930: LD_ADDR_VAR 0 2
7934: PUSH
7935: LD_VAR 0 2
7939: PUSH
7940: LD_STRING #builduptime
7942: PUSH
7943: LD_EXP 58
7947: PUSH
7948: LD_OWVAR 1
7952: MINUS
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: ADD
7958: ST_TO_ADDR
// if ( ExtraStrings ) then
7959: LD_EXP 55
7963: IFFALSE 7985
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7965: LD_ADDR_VAR 0 2
7969: PUSH
7970: LD_VAR 0 2
7974: PUSH
7975: LD_STRING 
7977: ADD
7978: PUSH
7979: LD_EXP 55
7983: ADD
7984: ST_TO_ADDR
// Display_Strings := AllStrings ;
7985: LD_ADDR_OWVAR 47
7989: PUSH
7990: LD_VAR 0 2
7994: ST_TO_ADDR
// end ;
7995: LD_VAR 0 1
7999: RET
// every 0 0$1 do
8000: GO 8002
8002: DISABLE
// begin ShowTimer ;
8003: CALL 7848 0 0
// enable ;
8007: ENABLE
// end ; end_of_file
8008: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8009: LD_INT 0
8011: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8012: LD_VAR 0 1
8016: PPUSH
8017: CALL_OW 255
8021: PUSH
8022: LD_VAR 0 4
8026: EQUAL
8027: IFFALSE 8046
// begin SetAchievement ( ACH_RAD ) ;
8029: LD_STRING ACH_RAD
8031: PPUSH
8032: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8036: LD_STRING ACH_NL
8038: PPUSH
8039: LD_INT 1
8041: PPUSH
8042: CALL_OW 564
// end end ;
8046: LD_VAR 0 5
8050: RET
// export function SA_Win ( side ) ; begin
8051: LD_INT 0
8053: PPUSH
// case side of 1 :
8054: LD_VAR 0 1
8058: PUSH
8059: LD_INT 1
8061: DOUBLE
8062: EQUAL
8063: IFTRUE 8067
8065: GO 8080
8067: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8068: LD_STRING ACH_AH
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: CALL_OW 564
8078: GO 8243
8080: LD_INT 2
8082: DOUBLE
8083: EQUAL
8084: IFTRUE 8088
8086: GO 8101
8088: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8089: LD_STRING ACH_E
8091: PPUSH
8092: LD_INT 1
8094: PPUSH
8095: CALL_OW 564
8099: GO 8243
8101: LD_INT 3
8103: DOUBLE
8104: EQUAL
8105: IFTRUE 8109
8107: GO 8122
8109: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8110: LD_STRING ACH_OOL
8112: PPUSH
8113: LD_INT 1
8115: PPUSH
8116: CALL_OW 564
8120: GO 8243
8122: LD_INT 1
8124: PUSH
8125: LD_INT 2
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: DOUBLE
8132: EQUAL
8133: IFTRUE 8137
8135: GO 8162
8137: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8138: LD_STRING ACH_AH
8140: PPUSH
8141: LD_REAL  5.00000000000000E-0001
8144: PPUSH
8145: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8149: LD_STRING ACH_E
8151: PPUSH
8152: LD_REAL  5.00000000000000E-0001
8155: PPUSH
8156: CALL_OW 564
// end ; [ 2 , 3 ] :
8160: GO 8243
8162: LD_INT 2
8164: PUSH
8165: LD_INT 3
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: DOUBLE
8172: EQUAL
8173: IFTRUE 8177
8175: GO 8202
8177: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8178: LD_STRING ACH_OOL
8180: PPUSH
8181: LD_REAL  5.00000000000000E-0001
8184: PPUSH
8185: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8189: LD_STRING ACH_E
8191: PPUSH
8192: LD_REAL  5.00000000000000E-0001
8195: PPUSH
8196: CALL_OW 564
// end ; [ 3 , 1 ] :
8200: GO 8243
8202: LD_INT 3
8204: PUSH
8205: LD_INT 1
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: DOUBLE
8212: EQUAL
8213: IFTRUE 8217
8215: GO 8242
8217: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8218: LD_STRING ACH_AH
8220: PPUSH
8221: LD_REAL  5.00000000000000E-0001
8224: PPUSH
8225: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8229: LD_STRING ACH_OOL
8231: PPUSH
8232: LD_REAL  5.00000000000000E-0001
8235: PPUSH
8236: CALL_OW 564
// end ; end ;
8240: GO 8243
8242: POP
// end ; end_of_file
8243: LD_VAR 0 2
8247: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8248: LD_INT 0
8250: PPUSH
8251: PPUSH
8252: PPUSH
// for side = 1 to 8 do
8253: LD_ADDR_VAR 0 2
8257: PUSH
8258: DOUBLE
8259: LD_INT 1
8261: DEC
8262: ST_TO_ADDR
8263: LD_INT 8
8265: PUSH
8266: FOR_TO
8267: IFFALSE 8388
// begin for i = 1 to 72 do
8269: LD_ADDR_VAR 0 3
8273: PUSH
8274: DOUBLE
8275: LD_INT 1
8277: DEC
8278: ST_TO_ADDR
8279: LD_INT 72
8281: PUSH
8282: FOR_TO
8283: IFFALSE 8314
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8285: LD_VAR 0 3
8289: PPUSH
8290: LD_VAR 0 2
8294: PPUSH
8295: LD_INT 0
8297: PPUSH
8298: LD_VAR 0 3
8302: PPUSH
8303: CALL_OW 565
8307: PPUSH
8308: CALL_OW 322
8312: GO 8282
8314: POP
8315: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8316: LD_INT 73
8318: PPUSH
8319: LD_VAR 0 2
8323: PPUSH
8324: LD_INT 0
8326: PPUSH
8327: LD_INT 25
8329: PPUSH
8330: CALL_OW 565
8334: PPUSH
8335: CALL_OW 322
// for i = 0 to 40 do
8339: LD_ADDR_VAR 0 3
8343: PUSH
8344: DOUBLE
8345: LD_INT 0
8347: DEC
8348: ST_TO_ADDR
8349: LD_INT 40
8351: PUSH
8352: FOR_TO
8353: IFFALSE 8384
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8355: LD_VAR 0 3
8359: PPUSH
8360: LD_VAR 0 2
8364: PPUSH
8365: LD_INT 1
8367: PPUSH
8368: LD_VAR 0 3
8372: PPUSH
8373: CALL_OW 565
8377: PPUSH
8378: CALL_OW 324
8382: GO 8352
8384: POP
8385: POP
// end ;
8386: GO 8266
8388: POP
8389: POP
// end ;
8390: LD_VAR 0 1
8394: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8395: LD_INT 0
8397: PPUSH
8398: PPUSH
8399: PPUSH
// for side = 1 to 8 do
8400: LD_ADDR_VAR 0 3
8404: PUSH
8405: DOUBLE
8406: LD_INT 1
8408: DEC
8409: ST_TO_ADDR
8410: LD_INT 8
8412: PUSH
8413: FOR_TO
8414: IFFALSE 12410
// begin for i = 1 to 73 do
8416: LD_ADDR_VAR 0 4
8420: PUSH
8421: DOUBLE
8422: LD_INT 1
8424: DEC
8425: ST_TO_ADDR
8426: LD_INT 73
8428: PUSH
8429: FOR_TO
8430: IFFALSE 8451
// SetTech ( i , side , state_disabled ) ;
8432: LD_VAR 0 4
8436: PPUSH
8437: LD_VAR 0 3
8441: PPUSH
8442: LD_INT 0
8444: PPUSH
8445: CALL_OW 322
8449: GO 8429
8451: POP
8452: POP
// for i = 0 to 40 do
8453: LD_ADDR_VAR 0 4
8457: PUSH
8458: DOUBLE
8459: LD_INT 0
8461: DEC
8462: ST_TO_ADDR
8463: LD_INT 40
8465: PUSH
8466: FOR_TO
8467: IFFALSE 8488
// SetRestrict ( i , side , false ) ;
8469: LD_VAR 0 4
8473: PPUSH
8474: LD_VAR 0 3
8478: PPUSH
8479: LD_INT 0
8481: PPUSH
8482: CALL_OW 324
8486: GO 8466
8488: POP
8489: POP
// case level of 1 :
8490: LD_VAR 0 1
8494: PUSH
8495: LD_INT 1
8497: DOUBLE
8498: EQUAL
8499: IFTRUE 8503
8501: GO 8656
8503: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8504: LD_INT 35
8506: PPUSH
8507: LD_VAR 0 3
8511: PPUSH
8512: LD_INT 1
8514: PPUSH
8515: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8519: LD_INT 45
8521: PPUSH
8522: LD_VAR 0 3
8526: PPUSH
8527: LD_INT 1
8529: PPUSH
8530: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8534: LD_INT 46
8536: PPUSH
8537: LD_VAR 0 3
8541: PPUSH
8542: LD_INT 1
8544: PPUSH
8545: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8549: LD_INT 47
8551: PPUSH
8552: LD_VAR 0 3
8556: PPUSH
8557: LD_INT 1
8559: PPUSH
8560: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8564: LD_INT 0
8566: PPUSH
8567: LD_VAR 0 3
8571: PPUSH
8572: LD_INT 1
8574: PPUSH
8575: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8579: LD_INT 2
8581: PPUSH
8582: LD_VAR 0 3
8586: PPUSH
8587: LD_INT 1
8589: PPUSH
8590: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8594: LD_INT 4
8596: PPUSH
8597: LD_VAR 0 3
8601: PPUSH
8602: LD_INT 1
8604: PPUSH
8605: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8609: LD_INT 6
8611: PPUSH
8612: LD_VAR 0 3
8616: PPUSH
8617: LD_INT 1
8619: PPUSH
8620: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8624: LD_INT 29
8626: PPUSH
8627: LD_VAR 0 3
8631: PPUSH
8632: LD_INT 1
8634: PPUSH
8635: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8639: LD_INT 31
8641: PPUSH
8642: LD_VAR 0 3
8646: PPUSH
8647: LD_INT 1
8649: PPUSH
8650: CALL_OW 324
// end ; 2 :
8654: GO 12408
8656: LD_INT 2
8658: DOUBLE
8659: EQUAL
8660: IFTRUE 8664
8662: GO 8862
8664: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8665: LD_INT 35
8667: PPUSH
8668: LD_VAR 0 3
8672: PPUSH
8673: LD_INT 1
8675: PPUSH
8676: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8680: LD_INT 45
8682: PPUSH
8683: LD_VAR 0 3
8687: PPUSH
8688: LD_INT 1
8690: PPUSH
8691: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8695: LD_INT 46
8697: PPUSH
8698: LD_VAR 0 3
8702: PPUSH
8703: LD_INT 1
8705: PPUSH
8706: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8710: LD_INT 47
8712: PPUSH
8713: LD_VAR 0 3
8717: PPUSH
8718: LD_INT 1
8720: PPUSH
8721: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8725: LD_INT 1
8727: PPUSH
8728: LD_VAR 0 3
8732: PPUSH
8733: LD_INT 1
8735: PPUSH
8736: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8740: LD_INT 2
8742: PPUSH
8743: LD_VAR 0 3
8747: PPUSH
8748: LD_INT 1
8750: PPUSH
8751: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8755: LD_INT 11
8757: PPUSH
8758: LD_VAR 0 3
8762: PPUSH
8763: LD_INT 1
8765: PPUSH
8766: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8770: LD_INT 0
8772: PPUSH
8773: LD_VAR 0 3
8777: PPUSH
8778: LD_INT 1
8780: PPUSH
8781: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8785: LD_INT 2
8787: PPUSH
8788: LD_VAR 0 3
8792: PPUSH
8793: LD_INT 1
8795: PPUSH
8796: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8800: LD_INT 4
8802: PPUSH
8803: LD_VAR 0 3
8807: PPUSH
8808: LD_INT 1
8810: PPUSH
8811: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8815: LD_INT 6
8817: PPUSH
8818: LD_VAR 0 3
8822: PPUSH
8823: LD_INT 1
8825: PPUSH
8826: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8830: LD_INT 29
8832: PPUSH
8833: LD_VAR 0 3
8837: PPUSH
8838: LD_INT 1
8840: PPUSH
8841: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8845: LD_INT 31
8847: PPUSH
8848: LD_VAR 0 3
8852: PPUSH
8853: LD_INT 1
8855: PPUSH
8856: CALL_OW 324
// end ; 3 :
8860: GO 12408
8862: LD_INT 3
8864: DOUBLE
8865: EQUAL
8866: IFTRUE 8870
8868: GO 9323
8870: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8871: LD_INT 35
8873: PPUSH
8874: LD_VAR 0 3
8878: PPUSH
8879: LD_INT 1
8881: PPUSH
8882: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8886: LD_INT 45
8888: PPUSH
8889: LD_VAR 0 3
8893: PPUSH
8894: LD_INT 1
8896: PPUSH
8897: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8901: LD_INT 46
8903: PPUSH
8904: LD_VAR 0 3
8908: PPUSH
8909: LD_INT 1
8911: PPUSH
8912: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8916: LD_INT 47
8918: PPUSH
8919: LD_VAR 0 3
8923: PPUSH
8924: LD_INT 1
8926: PPUSH
8927: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8931: LD_INT 1
8933: PPUSH
8934: LD_VAR 0 3
8938: PPUSH
8939: LD_INT 1
8941: PPUSH
8942: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8946: LD_INT 2
8948: PPUSH
8949: LD_VAR 0 3
8953: PPUSH
8954: LD_INT 1
8956: PPUSH
8957: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8961: LD_INT 11
8963: PPUSH
8964: LD_VAR 0 3
8968: PPUSH
8969: LD_INT 1
8971: PPUSH
8972: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8976: LD_INT 48
8978: PPUSH
8979: LD_VAR 0 3
8983: PPUSH
8984: LD_INT 1
8986: PPUSH
8987: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8991: LD_INT 69
8993: PPUSH
8994: LD_VAR 0 3
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9006: LD_INT 39
9008: PPUSH
9009: LD_VAR 0 3
9013: PPUSH
9014: LD_INT 1
9016: PPUSH
9017: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9021: LD_INT 43
9023: PPUSH
9024: LD_VAR 0 3
9028: PPUSH
9029: LD_INT 1
9031: PPUSH
9032: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9036: LD_INT 51
9038: PPUSH
9039: LD_VAR 0 3
9043: PPUSH
9044: LD_INT 1
9046: PPUSH
9047: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9051: LD_INT 6
9053: PPUSH
9054: LD_VAR 0 3
9058: PPUSH
9059: LD_INT 1
9061: PPUSH
9062: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9066: LD_INT 0
9068: PPUSH
9069: LD_VAR 0 3
9073: PPUSH
9074: LD_INT 1
9076: PPUSH
9077: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9081: LD_INT 2
9083: PPUSH
9084: LD_VAR 0 3
9088: PPUSH
9089: LD_INT 1
9091: PPUSH
9092: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9096: LD_INT 3
9098: PPUSH
9099: LD_VAR 0 3
9103: PPUSH
9104: LD_INT 1
9106: PPUSH
9107: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9111: LD_INT 4
9113: PPUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: LD_INT 1
9121: PPUSH
9122: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9126: LD_INT 6
9128: PPUSH
9129: LD_VAR 0 3
9133: PPUSH
9134: LD_INT 1
9136: PPUSH
9137: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9141: LD_INT 7
9143: PPUSH
9144: LD_VAR 0 3
9148: PPUSH
9149: LD_INT 1
9151: PPUSH
9152: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9156: LD_INT 8
9158: PPUSH
9159: LD_VAR 0 3
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9171: LD_INT 10
9173: PPUSH
9174: LD_VAR 0 3
9178: PPUSH
9179: LD_INT 1
9181: PPUSH
9182: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9186: LD_INT 15
9188: PPUSH
9189: LD_VAR 0 3
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9201: LD_INT 16
9203: PPUSH
9204: LD_VAR 0 3
9208: PPUSH
9209: LD_INT 1
9211: PPUSH
9212: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9216: LD_INT 17
9218: PPUSH
9219: LD_VAR 0 3
9223: PPUSH
9224: LD_INT 1
9226: PPUSH
9227: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9231: LD_INT 20
9233: PPUSH
9234: LD_VAR 0 3
9238: PPUSH
9239: LD_INT 1
9241: PPUSH
9242: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9246: LD_INT 26
9248: PPUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: LD_INT 1
9256: PPUSH
9257: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9261: LD_INT 27
9263: PPUSH
9264: LD_VAR 0 3
9268: PPUSH
9269: LD_INT 1
9271: PPUSH
9272: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9276: LD_INT 29
9278: PPUSH
9279: LD_VAR 0 3
9283: PPUSH
9284: LD_INT 1
9286: PPUSH
9287: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9291: LD_INT 31
9293: PPUSH
9294: LD_VAR 0 3
9298: PPUSH
9299: LD_INT 1
9301: PPUSH
9302: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9306: LD_INT 32
9308: PPUSH
9309: LD_VAR 0 3
9313: PPUSH
9314: LD_INT 1
9316: PPUSH
9317: CALL_OW 324
// end ; 4 :
9321: GO 12408
9323: LD_INT 4
9325: DOUBLE
9326: EQUAL
9327: IFTRUE 9331
9329: GO 10279
9331: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9332: LD_INT 35
9334: PPUSH
9335: LD_VAR 0 3
9339: PPUSH
9340: LD_INT 1
9342: PPUSH
9343: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9347: LD_INT 45
9349: PPUSH
9350: LD_VAR 0 3
9354: PPUSH
9355: LD_INT 1
9357: PPUSH
9358: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9362: LD_INT 46
9364: PPUSH
9365: LD_VAR 0 3
9369: PPUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9377: LD_INT 47
9379: PPUSH
9380: LD_VAR 0 3
9384: PPUSH
9385: LD_INT 1
9387: PPUSH
9388: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9392: LD_INT 1
9394: PPUSH
9395: LD_VAR 0 3
9399: PPUSH
9400: LD_INT 1
9402: PPUSH
9403: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9407: LD_INT 2
9409: PPUSH
9410: LD_VAR 0 3
9414: PPUSH
9415: LD_INT 1
9417: PPUSH
9418: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9422: LD_INT 11
9424: PPUSH
9425: LD_VAR 0 3
9429: PPUSH
9430: LD_INT 1
9432: PPUSH
9433: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9437: LD_INT 20
9439: PPUSH
9440: LD_VAR 0 3
9444: PPUSH
9445: LD_INT 1
9447: PPUSH
9448: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9452: LD_INT 48
9454: PPUSH
9455: LD_VAR 0 3
9459: PPUSH
9460: LD_INT 1
9462: PPUSH
9463: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9467: LD_INT 49
9469: PPUSH
9470: LD_VAR 0 3
9474: PPUSH
9475: LD_INT 1
9477: PPUSH
9478: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9482: LD_INT 69
9484: PPUSH
9485: LD_VAR 0 3
9489: PPUSH
9490: LD_INT 1
9492: PPUSH
9493: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9497: LD_INT 39
9499: PPUSH
9500: LD_VAR 0 3
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9512: LD_INT 34
9514: PPUSH
9515: LD_VAR 0 3
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9527: LD_INT 42
9529: PPUSH
9530: LD_VAR 0 3
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9542: LD_INT 44
9544: PPUSH
9545: LD_VAR 0 3
9549: PPUSH
9550: LD_INT 1
9552: PPUSH
9553: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9557: LD_INT 41
9559: PPUSH
9560: LD_VAR 0 3
9564: PPUSH
9565: LD_INT 1
9567: PPUSH
9568: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9572: LD_INT 43
9574: PPUSH
9575: LD_VAR 0 3
9579: PPUSH
9580: LD_INT 1
9582: PPUSH
9583: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9587: LD_INT 70
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: LD_INT 1
9597: PPUSH
9598: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9602: LD_INT 51
9604: PPUSH
9605: LD_VAR 0 3
9609: PPUSH
9610: LD_INT 1
9612: PPUSH
9613: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9617: LD_INT 52
9619: PPUSH
9620: LD_VAR 0 3
9624: PPUSH
9625: LD_INT 1
9627: PPUSH
9628: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9632: LD_INT 6
9634: PPUSH
9635: LD_VAR 0 3
9639: PPUSH
9640: LD_INT 1
9642: PPUSH
9643: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9647: LD_INT 15
9649: PPUSH
9650: LD_VAR 0 3
9654: PPUSH
9655: LD_INT 1
9657: PPUSH
9658: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9662: LD_INT 7
9664: PPUSH
9665: LD_VAR 0 3
9669: PPUSH
9670: LD_INT 1
9672: PPUSH
9673: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9677: LD_INT 12
9679: PPUSH
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_INT 1
9687: PPUSH
9688: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9692: LD_INT 18
9694: PPUSH
9695: LD_VAR 0 3
9699: PPUSH
9700: LD_INT 1
9702: PPUSH
9703: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9707: LD_INT 60
9709: PPUSH
9710: LD_VAR 0 3
9714: PPUSH
9715: LD_INT 1
9717: PPUSH
9718: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9722: LD_INT 9
9724: PPUSH
9725: LD_VAR 0 3
9729: PPUSH
9730: LD_INT 1
9732: PPUSH
9733: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9737: LD_INT 30
9739: PPUSH
9740: LD_VAR 0 3
9744: PPUSH
9745: LD_INT 1
9747: PPUSH
9748: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9752: LD_INT 37
9754: PPUSH
9755: LD_VAR 0 3
9759: PPUSH
9760: LD_INT 1
9762: PPUSH
9763: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9767: LD_INT 5
9769: PPUSH
9770: LD_VAR 0 3
9774: PPUSH
9775: LD_INT 1
9777: PPUSH
9778: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9782: LD_INT 66
9784: PPUSH
9785: LD_VAR 0 3
9789: PPUSH
9790: LD_INT 1
9792: PPUSH
9793: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9797: LD_INT 21
9799: PPUSH
9800: LD_VAR 0 3
9804: PPUSH
9805: LD_INT 1
9807: PPUSH
9808: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9812: LD_INT 22
9814: PPUSH
9815: LD_VAR 0 3
9819: PPUSH
9820: LD_INT 1
9822: PPUSH
9823: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9827: LD_INT 54
9829: PPUSH
9830: LD_VAR 0 3
9834: PPUSH
9835: LD_INT 1
9837: PPUSH
9838: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9842: LD_INT 0
9844: PPUSH
9845: LD_VAR 0 3
9849: PPUSH
9850: LD_INT 1
9852: PPUSH
9853: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9857: LD_INT 1
9859: PPUSH
9860: LD_VAR 0 3
9864: PPUSH
9865: LD_INT 1
9867: PPUSH
9868: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9872: LD_INT 2
9874: PPUSH
9875: LD_VAR 0 3
9879: PPUSH
9880: LD_INT 1
9882: PPUSH
9883: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9887: LD_INT 3
9889: PPUSH
9890: LD_VAR 0 3
9894: PPUSH
9895: LD_INT 1
9897: PPUSH
9898: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9902: LD_INT 4
9904: PPUSH
9905: LD_VAR 0 3
9909: PPUSH
9910: LD_INT 1
9912: PPUSH
9913: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
9917: LD_INT 5
9919: PPUSH
9920: LD_VAR 0 3
9924: PPUSH
9925: LD_INT 1
9927: PPUSH
9928: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9932: LD_INT 6
9934: PPUSH
9935: LD_VAR 0 3
9939: PPUSH
9940: LD_INT 1
9942: PPUSH
9943: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9947: LD_INT 7
9949: PPUSH
9950: LD_VAR 0 3
9954: PPUSH
9955: LD_INT 1
9957: PPUSH
9958: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9962: LD_INT 8
9964: PPUSH
9965: LD_VAR 0 3
9969: PPUSH
9970: LD_INT 1
9972: PPUSH
9973: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9977: LD_INT 10
9979: PPUSH
9980: LD_VAR 0 3
9984: PPUSH
9985: LD_INT 1
9987: PPUSH
9988: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
9992: LD_INT 11
9994: PPUSH
9995: LD_VAR 0 3
9999: PPUSH
10000: LD_INT 1
10002: PPUSH
10003: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10007: LD_INT 12
10009: PPUSH
10010: LD_VAR 0 3
10014: PPUSH
10015: LD_INT 1
10017: PPUSH
10018: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10022: LD_INT 13
10024: PPUSH
10025: LD_VAR 0 3
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10037: LD_INT 14
10039: PPUSH
10040: LD_VAR 0 3
10044: PPUSH
10045: LD_INT 1
10047: PPUSH
10048: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10052: LD_INT 15
10054: PPUSH
10055: LD_VAR 0 3
10059: PPUSH
10060: LD_INT 1
10062: PPUSH
10063: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10067: LD_INT 16
10069: PPUSH
10070: LD_VAR 0 3
10074: PPUSH
10075: LD_INT 1
10077: PPUSH
10078: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10082: LD_INT 17
10084: PPUSH
10085: LD_VAR 0 3
10089: PPUSH
10090: LD_INT 1
10092: PPUSH
10093: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10097: LD_INT 19
10099: PPUSH
10100: LD_VAR 0 3
10104: PPUSH
10105: LD_INT 1
10107: PPUSH
10108: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10112: LD_INT 20
10114: PPUSH
10115: LD_VAR 0 3
10119: PPUSH
10120: LD_INT 1
10122: PPUSH
10123: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10127: LD_INT 21
10129: PPUSH
10130: LD_VAR 0 3
10134: PPUSH
10135: LD_INT 1
10137: PPUSH
10138: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10142: LD_INT 23
10144: PPUSH
10145: LD_VAR 0 3
10149: PPUSH
10150: LD_INT 1
10152: PPUSH
10153: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10157: LD_INT 26
10159: PPUSH
10160: LD_VAR 0 3
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10172: LD_INT 27
10174: PPUSH
10175: LD_VAR 0 3
10179: PPUSH
10180: LD_INT 1
10182: PPUSH
10183: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10187: LD_INT 28
10189: PPUSH
10190: LD_VAR 0 3
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10202: LD_INT 29
10204: PPUSH
10205: LD_VAR 0 3
10209: PPUSH
10210: LD_INT 1
10212: PPUSH
10213: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10217: LD_INT 30
10219: PPUSH
10220: LD_VAR 0 3
10224: PPUSH
10225: LD_INT 1
10227: PPUSH
10228: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10232: LD_INT 31
10234: PPUSH
10235: LD_VAR 0 3
10239: PPUSH
10240: LD_INT 1
10242: PPUSH
10243: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10247: LD_INT 32
10249: PPUSH
10250: LD_VAR 0 3
10254: PPUSH
10255: LD_INT 1
10257: PPUSH
10258: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10262: LD_INT 36
10264: PPUSH
10265: LD_VAR 0 3
10269: PPUSH
10270: LD_INT 1
10272: PPUSH
10273: CALL_OW 324
// end ; 5 :
10277: GO 12408
10279: LD_INT 5
10281: DOUBLE
10282: EQUAL
10283: IFTRUE 10287
10285: GO 11400
10287: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10288: LD_INT 35
10290: PPUSH
10291: LD_VAR 0 3
10295: PPUSH
10296: LD_INT 1
10298: PPUSH
10299: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10303: LD_INT 45
10305: PPUSH
10306: LD_VAR 0 3
10310: PPUSH
10311: LD_INT 1
10313: PPUSH
10314: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10318: LD_INT 46
10320: PPUSH
10321: LD_VAR 0 3
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10333: LD_INT 47
10335: PPUSH
10336: LD_VAR 0 3
10340: PPUSH
10341: LD_INT 1
10343: PPUSH
10344: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10348: LD_INT 1
10350: PPUSH
10351: LD_VAR 0 3
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10363: LD_INT 2
10365: PPUSH
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 1
10373: PPUSH
10374: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10378: LD_INT 11
10380: PPUSH
10381: LD_VAR 0 3
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10393: LD_INT 20
10395: PPUSH
10396: LD_VAR 0 3
10400: PPUSH
10401: LD_INT 1
10403: PPUSH
10404: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10408: LD_INT 48
10410: PPUSH
10411: LD_VAR 0 3
10415: PPUSH
10416: LD_INT 1
10418: PPUSH
10419: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10423: LD_INT 49
10425: PPUSH
10426: LD_VAR 0 3
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10438: LD_INT 69
10440: PPUSH
10441: LD_VAR 0 3
10445: PPUSH
10446: LD_INT 1
10448: PPUSH
10449: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10453: LD_INT 39
10455: PPUSH
10456: LD_VAR 0 3
10460: PPUSH
10461: LD_INT 1
10463: PPUSH
10464: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10468: LD_INT 34
10470: PPUSH
10471: LD_VAR 0 3
10475: PPUSH
10476: LD_INT 1
10478: PPUSH
10479: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10483: LD_INT 42
10485: PPUSH
10486: LD_VAR 0 3
10490: PPUSH
10491: LD_INT 1
10493: PPUSH
10494: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10498: LD_INT 44
10500: PPUSH
10501: LD_VAR 0 3
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10513: LD_INT 41
10515: PPUSH
10516: LD_VAR 0 3
10520: PPUSH
10521: LD_INT 1
10523: PPUSH
10524: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
10528: LD_INT 40
10530: PPUSH
10531: LD_VAR 0 3
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10543: LD_INT 43
10545: PPUSH
10546: LD_VAR 0 3
10550: PPUSH
10551: LD_INT 1
10553: PPUSH
10554: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10558: LD_INT 70
10560: PPUSH
10561: LD_VAR 0 3
10565: PPUSH
10566: LD_INT 1
10568: PPUSH
10569: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10573: LD_INT 51
10575: PPUSH
10576: LD_VAR 0 3
10580: PPUSH
10581: LD_INT 1
10583: PPUSH
10584: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10588: LD_INT 52
10590: PPUSH
10591: LD_VAR 0 3
10595: PPUSH
10596: LD_INT 1
10598: PPUSH
10599: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10603: LD_INT 6
10605: PPUSH
10606: LD_VAR 0 3
10610: PPUSH
10611: LD_INT 1
10613: PPUSH
10614: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10618: LD_INT 15
10620: PPUSH
10621: LD_VAR 0 3
10625: PPUSH
10626: LD_INT 1
10628: PPUSH
10629: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10633: LD_INT 7
10635: PPUSH
10636: LD_VAR 0 3
10640: PPUSH
10641: LD_INT 1
10643: PPUSH
10644: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10648: LD_INT 12
10650: PPUSH
10651: LD_VAR 0 3
10655: PPUSH
10656: LD_INT 1
10658: PPUSH
10659: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10663: LD_INT 17
10665: PPUSH
10666: LD_VAR 0 3
10670: PPUSH
10671: LD_INT 1
10673: PPUSH
10674: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10678: LD_INT 18
10680: PPUSH
10681: LD_VAR 0 3
10685: PPUSH
10686: LD_INT 1
10688: PPUSH
10689: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10693: LD_INT 60
10695: PPUSH
10696: LD_VAR 0 3
10700: PPUSH
10701: LD_INT 1
10703: PPUSH
10704: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10708: LD_INT 32
10710: PPUSH
10711: LD_VAR 0 3
10715: PPUSH
10716: LD_INT 1
10718: PPUSH
10719: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10723: LD_INT 9
10725: PPUSH
10726: LD_VAR 0 3
10730: PPUSH
10731: LD_INT 1
10733: PPUSH
10734: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10738: LD_INT 57
10740: PPUSH
10741: LD_VAR 0 3
10745: PPUSH
10746: LD_INT 1
10748: PPUSH
10749: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10753: LD_INT 30
10755: PPUSH
10756: LD_VAR 0 3
10760: PPUSH
10761: LD_INT 1
10763: PPUSH
10764: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10768: LD_INT 37
10770: PPUSH
10771: LD_VAR 0 3
10775: PPUSH
10776: LD_INT 1
10778: PPUSH
10779: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10783: LD_INT 63
10785: PPUSH
10786: LD_VAR 0 3
10790: PPUSH
10791: LD_INT 1
10793: PPUSH
10794: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10798: LD_INT 3
10800: PPUSH
10801: LD_VAR 0 3
10805: PPUSH
10806: LD_INT 1
10808: PPUSH
10809: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10813: LD_INT 4
10815: PPUSH
10816: LD_VAR 0 3
10820: PPUSH
10821: LD_INT 1
10823: PPUSH
10824: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10828: LD_INT 5
10830: PPUSH
10831: LD_VAR 0 3
10835: PPUSH
10836: LD_INT 1
10838: PPUSH
10839: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10843: LD_INT 66
10845: PPUSH
10846: LD_VAR 0 3
10850: PPUSH
10851: LD_INT 1
10853: PPUSH
10854: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10858: LD_INT 21
10860: PPUSH
10861: LD_VAR 0 3
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10873: LD_INT 22
10875: PPUSH
10876: LD_VAR 0 3
10880: PPUSH
10881: LD_INT 1
10883: PPUSH
10884: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10888: LD_INT 19
10890: PPUSH
10891: LD_VAR 0 3
10895: PPUSH
10896: LD_INT 1
10898: PPUSH
10899: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10903: LD_INT 54
10905: PPUSH
10906: LD_VAR 0 3
10910: PPUSH
10911: LD_INT 1
10913: PPUSH
10914: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
10918: LD_INT 55
10920: PPUSH
10921: LD_VAR 0 3
10925: PPUSH
10926: LD_INT 1
10928: PPUSH
10929: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10933: LD_INT 0
10935: PPUSH
10936: LD_VAR 0 3
10940: PPUSH
10941: LD_INT 1
10943: PPUSH
10944: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10948: LD_INT 1
10950: PPUSH
10951: LD_VAR 0 3
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10963: LD_INT 2
10965: PPUSH
10966: LD_VAR 0 3
10970: PPUSH
10971: LD_INT 1
10973: PPUSH
10974: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10978: LD_INT 3
10980: PPUSH
10981: LD_VAR 0 3
10985: PPUSH
10986: LD_INT 1
10988: PPUSH
10989: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10993: LD_INT 4
10995: PPUSH
10996: LD_VAR 0 3
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11008: LD_INT 5
11010: PPUSH
11011: LD_VAR 0 3
11015: PPUSH
11016: LD_INT 1
11018: PPUSH
11019: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11023: LD_INT 6
11025: PPUSH
11026: LD_VAR 0 3
11030: PPUSH
11031: LD_INT 1
11033: PPUSH
11034: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11038: LD_INT 7
11040: PPUSH
11041: LD_VAR 0 3
11045: PPUSH
11046: LD_INT 1
11048: PPUSH
11049: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11053: LD_INT 8
11055: PPUSH
11056: LD_VAR 0 3
11060: PPUSH
11061: LD_INT 1
11063: PPUSH
11064: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11068: LD_INT 10
11070: PPUSH
11071: LD_VAR 0 3
11075: PPUSH
11076: LD_INT 1
11078: PPUSH
11079: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11083: LD_INT 11
11085: PPUSH
11086: LD_VAR 0 3
11090: PPUSH
11091: LD_INT 1
11093: PPUSH
11094: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11098: LD_INT 12
11100: PPUSH
11101: LD_VAR 0 3
11105: PPUSH
11106: LD_INT 1
11108: PPUSH
11109: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11113: LD_INT 13
11115: PPUSH
11116: LD_VAR 0 3
11120: PPUSH
11121: LD_INT 1
11123: PPUSH
11124: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11128: LD_INT 14
11130: PPUSH
11131: LD_VAR 0 3
11135: PPUSH
11136: LD_INT 1
11138: PPUSH
11139: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11143: LD_INT 15
11145: PPUSH
11146: LD_VAR 0 3
11150: PPUSH
11151: LD_INT 1
11153: PPUSH
11154: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11158: LD_INT 16
11160: PPUSH
11161: LD_VAR 0 3
11165: PPUSH
11166: LD_INT 1
11168: PPUSH
11169: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11173: LD_INT 17
11175: PPUSH
11176: LD_VAR 0 3
11180: PPUSH
11181: LD_INT 1
11183: PPUSH
11184: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11188: LD_INT 18
11190: PPUSH
11191: LD_VAR 0 3
11195: PPUSH
11196: LD_INT 1
11198: PPUSH
11199: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11203: LD_INT 19
11205: PPUSH
11206: LD_VAR 0 3
11210: PPUSH
11211: LD_INT 1
11213: PPUSH
11214: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11218: LD_INT 20
11220: PPUSH
11221: LD_VAR 0 3
11225: PPUSH
11226: LD_INT 1
11228: PPUSH
11229: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11233: LD_INT 21
11235: PPUSH
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11248: LD_INT 23
11250: PPUSH
11251: LD_VAR 0 3
11255: PPUSH
11256: LD_INT 1
11258: PPUSH
11259: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11263: LD_INT 26
11265: PPUSH
11266: LD_VAR 0 3
11270: PPUSH
11271: LD_INT 1
11273: PPUSH
11274: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11278: LD_INT 27
11280: PPUSH
11281: LD_VAR 0 3
11285: PPUSH
11286: LD_INT 1
11288: PPUSH
11289: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11293: LD_INT 28
11295: PPUSH
11296: LD_VAR 0 3
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11308: LD_INT 29
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11323: LD_INT 30
11325: PPUSH
11326: LD_VAR 0 3
11330: PPUSH
11331: LD_INT 1
11333: PPUSH
11334: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11338: LD_INT 31
11340: PPUSH
11341: LD_VAR 0 3
11345: PPUSH
11346: LD_INT 1
11348: PPUSH
11349: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11353: LD_INT 32
11355: PPUSH
11356: LD_VAR 0 3
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11368: LD_INT 33
11370: PPUSH
11371: LD_VAR 0 3
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11383: LD_INT 36
11385: PPUSH
11386: LD_VAR 0 3
11390: PPUSH
11391: LD_INT 1
11393: PPUSH
11394: CALL_OW 324
// end ; 6 :
11398: GO 12408
11400: LD_INT 6
11402: DOUBLE
11403: EQUAL
11404: IFTRUE 11408
11406: GO 12333
11408: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11409: LD_INT 35
11411: PPUSH
11412: LD_VAR 0 3
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11424: LD_INT 45
11426: PPUSH
11427: LD_VAR 0 3
11431: PPUSH
11432: LD_INT 1
11434: PPUSH
11435: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11439: LD_INT 46
11441: PPUSH
11442: LD_VAR 0 3
11446: PPUSH
11447: LD_INT 1
11449: PPUSH
11450: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11454: LD_INT 47
11456: PPUSH
11457: LD_VAR 0 3
11461: PPUSH
11462: LD_INT 1
11464: PPUSH
11465: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11469: LD_INT 1
11471: PPUSH
11472: LD_VAR 0 3
11476: PPUSH
11477: LD_INT 1
11479: PPUSH
11480: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11484: LD_INT 2
11486: PPUSH
11487: LD_VAR 0 3
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11499: LD_INT 11
11501: PPUSH
11502: LD_VAR 0 3
11506: PPUSH
11507: LD_INT 1
11509: PPUSH
11510: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11514: LD_INT 20
11516: PPUSH
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11529: LD_INT 48
11531: PPUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11544: LD_INT 49
11546: PPUSH
11547: LD_VAR 0 3
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
11559: LD_INT 50
11561: PPUSH
11562: LD_VAR 0 3
11566: PPUSH
11567: LD_INT 1
11569: PPUSH
11570: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11574: LD_INT 69
11576: PPUSH
11577: LD_VAR 0 3
11581: PPUSH
11582: LD_INT 1
11584: PPUSH
11585: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11589: LD_INT 39
11591: PPUSH
11592: LD_VAR 0 3
11596: PPUSH
11597: LD_INT 1
11599: PPUSH
11600: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11604: LD_INT 34
11606: PPUSH
11607: LD_VAR 0 3
11611: PPUSH
11612: LD_INT 1
11614: PPUSH
11615: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11619: LD_INT 42
11621: PPUSH
11622: LD_VAR 0 3
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11634: LD_INT 44
11636: PPUSH
11637: LD_VAR 0 3
11641: PPUSH
11642: LD_INT 1
11644: PPUSH
11645: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11649: LD_INT 41
11651: PPUSH
11652: LD_VAR 0 3
11656: PPUSH
11657: LD_INT 1
11659: PPUSH
11660: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11664: LD_INT 13
11666: PPUSH
11667: LD_VAR 0 3
11671: PPUSH
11672: LD_INT 1
11674: PPUSH
11675: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11679: LD_INT 40
11681: PPUSH
11682: LD_VAR 0 3
11686: PPUSH
11687: LD_INT 1
11689: PPUSH
11690: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11694: LD_INT 43
11696: PPUSH
11697: LD_VAR 0 3
11701: PPUSH
11702: LD_INT 1
11704: PPUSH
11705: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11709: LD_INT 70
11711: PPUSH
11712: LD_VAR 0 3
11716: PPUSH
11717: LD_INT 1
11719: PPUSH
11720: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11724: LD_INT 23
11726: PPUSH
11727: LD_VAR 0 3
11731: PPUSH
11732: LD_INT 1
11734: PPUSH
11735: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11739: LD_INT 51
11741: PPUSH
11742: LD_VAR 0 3
11746: PPUSH
11747: LD_INT 1
11749: PPUSH
11750: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11754: LD_INT 52
11756: PPUSH
11757: LD_VAR 0 3
11761: PPUSH
11762: LD_INT 1
11764: PPUSH
11765: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11769: LD_INT 6
11771: PPUSH
11772: LD_VAR 0 3
11776: PPUSH
11777: LD_INT 1
11779: PPUSH
11780: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11784: LD_INT 15
11786: PPUSH
11787: LD_VAR 0 3
11791: PPUSH
11792: LD_INT 1
11794: PPUSH
11795: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11799: LD_INT 7
11801: PPUSH
11802: LD_VAR 0 3
11806: PPUSH
11807: LD_INT 1
11809: PPUSH
11810: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11814: LD_INT 12
11816: PPUSH
11817: LD_VAR 0 3
11821: PPUSH
11822: LD_INT 1
11824: PPUSH
11825: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11829: LD_INT 10
11831: PPUSH
11832: LD_VAR 0 3
11836: PPUSH
11837: LD_INT 1
11839: PPUSH
11840: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11844: LD_INT 17
11846: PPUSH
11847: LD_VAR 0 3
11851: PPUSH
11852: LD_INT 1
11854: PPUSH
11855: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11859: LD_INT 18
11861: PPUSH
11862: LD_VAR 0 3
11866: PPUSH
11867: LD_INT 1
11869: PPUSH
11870: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11874: LD_INT 60
11876: PPUSH
11877: LD_VAR 0 3
11881: PPUSH
11882: LD_INT 1
11884: PPUSH
11885: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11889: LD_INT 61
11891: PPUSH
11892: LD_VAR 0 3
11896: PPUSH
11897: LD_INT 1
11899: PPUSH
11900: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11904: LD_INT 32
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
11919: LD_INT 27
11921: PPUSH
11922: LD_VAR 0 3
11926: PPUSH
11927: LD_INT 1
11929: PPUSH
11930: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
11934: LD_INT 36
11936: PPUSH
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_INT 1
11944: PPUSH
11945: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
11949: LD_INT 33
11951: PPUSH
11952: LD_VAR 0 3
11956: PPUSH
11957: LD_INT 1
11959: PPUSH
11960: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11964: LD_INT 9
11966: PPUSH
11967: LD_VAR 0 3
11971: PPUSH
11972: LD_INT 1
11974: PPUSH
11975: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
11979: LD_INT 38
11981: PPUSH
11982: LD_VAR 0 3
11986: PPUSH
11987: LD_INT 1
11989: PPUSH
11990: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11994: LD_INT 57
11996: PPUSH
11997: LD_VAR 0 3
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12009: LD_INT 58
12011: PPUSH
12012: LD_VAR 0 3
12016: PPUSH
12017: LD_INT 1
12019: PPUSH
12020: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12024: LD_INT 28
12026: PPUSH
12027: LD_VAR 0 3
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12039: LD_INT 29
12041: PPUSH
12042: LD_VAR 0 3
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12054: LD_INT 30
12056: PPUSH
12057: LD_VAR 0 3
12061: PPUSH
12062: LD_INT 1
12064: PPUSH
12065: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12069: LD_INT 37
12071: PPUSH
12072: LD_VAR 0 3
12076: PPUSH
12077: LD_INT 1
12079: PPUSH
12080: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12084: LD_INT 63
12086: PPUSH
12087: LD_VAR 0 3
12091: PPUSH
12092: LD_INT 1
12094: PPUSH
12095: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12099: LD_INT 64
12101: PPUSH
12102: LD_VAR 0 3
12106: PPUSH
12107: LD_INT 1
12109: PPUSH
12110: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12114: LD_INT 3
12116: PPUSH
12117: LD_VAR 0 3
12121: PPUSH
12122: LD_INT 1
12124: PPUSH
12125: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12129: LD_INT 4
12131: PPUSH
12132: LD_VAR 0 3
12136: PPUSH
12137: LD_INT 1
12139: PPUSH
12140: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12144: LD_INT 5
12146: PPUSH
12147: LD_VAR 0 3
12151: PPUSH
12152: LD_INT 1
12154: PPUSH
12155: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12159: LD_INT 8
12161: PPUSH
12162: LD_VAR 0 3
12166: PPUSH
12167: LD_INT 1
12169: PPUSH
12170: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12174: LD_INT 66
12176: PPUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: LD_INT 1
12184: PPUSH
12185: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12189: LD_INT 67
12191: PPUSH
12192: LD_VAR 0 3
12196: PPUSH
12197: LD_INT 1
12199: PPUSH
12200: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12204: LD_INT 21
12206: PPUSH
12207: LD_VAR 0 3
12211: PPUSH
12212: LD_INT 1
12214: PPUSH
12215: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12219: LD_INT 22
12221: PPUSH
12222: LD_VAR 0 3
12226: PPUSH
12227: LD_INT 1
12229: PPUSH
12230: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12234: LD_INT 19
12236: PPUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12249: LD_INT 26
12251: PPUSH
12252: LD_VAR 0 3
12256: PPUSH
12257: LD_INT 1
12259: PPUSH
12260: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12264: LD_INT 54
12266: PPUSH
12267: LD_VAR 0 3
12271: PPUSH
12272: LD_INT 1
12274: PPUSH
12275: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12279: LD_INT 55
12281: PPUSH
12282: LD_VAR 0 3
12286: PPUSH
12287: LD_INT 1
12289: PPUSH
12290: CALL_OW 322
// for i = 0 to 39 do
12294: LD_ADDR_VAR 0 4
12298: PUSH
12299: DOUBLE
12300: LD_INT 0
12302: DEC
12303: ST_TO_ADDR
12304: LD_INT 39
12306: PUSH
12307: FOR_TO
12308: IFFALSE 12329
// SetRestrict ( i , side , true ) ;
12310: LD_VAR 0 4
12314: PPUSH
12315: LD_VAR 0 3
12319: PPUSH
12320: LD_INT 1
12322: PPUSH
12323: CALL_OW 324
12327: GO 12307
12329: POP
12330: POP
// end ; else
12331: GO 12408
12333: POP
// begin for i = 1 to 73 do
12334: LD_ADDR_VAR 0 4
12338: PUSH
12339: DOUBLE
12340: LD_INT 1
12342: DEC
12343: ST_TO_ADDR
12344: LD_INT 73
12346: PUSH
12347: FOR_TO
12348: IFFALSE 12369
// SetTech ( i , side , state_enabled ) ;
12350: LD_VAR 0 4
12354: PPUSH
12355: LD_VAR 0 3
12359: PPUSH
12360: LD_INT 1
12362: PPUSH
12363: CALL_OW 322
12367: GO 12347
12369: POP
12370: POP
// for i = 0 to 39 do
12371: LD_ADDR_VAR 0 4
12375: PUSH
12376: DOUBLE
12377: LD_INT 0
12379: DEC
12380: ST_TO_ADDR
12381: LD_INT 39
12383: PUSH
12384: FOR_TO
12385: IFFALSE 12406
// SetRestrict ( i , side , true ) ;
12387: LD_VAR 0 4
12391: PPUSH
12392: LD_VAR 0 3
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 324
12404: GO 12384
12406: POP
12407: POP
// end ; end ; end ;
12408: GO 8413
12410: POP
12411: POP
// end ; end_of_file
12412: LD_VAR 0 2
12416: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
12417: LD_INT 0
12419: PPUSH
12420: PPUSH
12421: PPUSH
12422: PPUSH
12423: PPUSH
12424: PPUSH
12425: PPUSH
12426: PPUSH
12427: PPUSH
// for i := 1 to 8 do
12428: LD_ADDR_VAR 0 2
12432: PUSH
12433: DOUBLE
12434: LD_INT 1
12436: DEC
12437: ST_TO_ADDR
12438: LD_INT 8
12440: PUSH
12441: FOR_TO
12442: IFFALSE 12826
// begin if Side_Positions [ i ] then
12444: LD_EXP 37
12448: PUSH
12449: LD_VAR 0 2
12453: ARRAY
12454: IFFALSE 12824
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
12456: LD_ADDR_VAR 0 7
12460: PUSH
12461: LD_INT 22
12463: PUSH
12464: LD_VAR 0 2
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 21
12475: PUSH
12476: LD_INT 1
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PPUSH
12487: CALL_OW 69
12491: PUSH
12492: LD_INT 0
12494: PLUS
12495: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12496: LD_ADDR_VAR 0 9
12500: PUSH
12501: LD_INT 22
12503: PUSH
12504: LD_VAR 0 2
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: LD_INT 2
12515: PUSH
12516: LD_INT 30
12518: PUSH
12519: LD_INT 0
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 30
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PPUSH
12545: CALL_OW 69
12549: ST_TO_ADDR
// crates := 0 ;
12550: LD_ADDR_VAR 0 4
12554: PUSH
12555: LD_INT 0
12557: ST_TO_ADDR
// oil := 0 ;
12558: LD_ADDR_VAR 0 5
12562: PUSH
12563: LD_INT 0
12565: ST_TO_ADDR
// sib := 0 ;
12566: LD_ADDR_VAR 0 6
12570: PUSH
12571: LD_INT 0
12573: ST_TO_ADDR
// if bases then
12574: LD_VAR 0 9
12578: IFFALSE 12684
// begin for j in bases do
12580: LD_ADDR_VAR 0 3
12584: PUSH
12585: LD_VAR 0 9
12589: PUSH
12590: FOR_IN
12591: IFFALSE 12682
// begin base := GetBase ( j ) ;
12593: LD_ADDR_VAR 0 8
12597: PUSH
12598: LD_VAR 0 3
12602: PPUSH
12603: CALL_OW 274
12607: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
12608: LD_ADDR_VAR 0 4
12612: PUSH
12613: LD_VAR 0 4
12617: PUSH
12618: LD_VAR 0 8
12622: PPUSH
12623: LD_INT 1
12625: PPUSH
12626: CALL_OW 275
12630: PLUS
12631: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12632: LD_ADDR_VAR 0 5
12636: PUSH
12637: LD_VAR 0 5
12641: PUSH
12642: LD_VAR 0 8
12646: PPUSH
12647: LD_INT 2
12649: PPUSH
12650: CALL_OW 275
12654: PLUS
12655: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12656: LD_ADDR_VAR 0 6
12660: PUSH
12661: LD_VAR 0 6
12665: PUSH
12666: LD_VAR 0 8
12670: PPUSH
12671: LD_INT 3
12673: PPUSH
12674: CALL_OW 275
12678: PLUS
12679: ST_TO_ADDR
// end ;
12680: GO 12590
12682: POP
12683: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12684: LD_STRING setSpecText(
12686: PUSH
12687: LD_VAR 0 2
12691: STR
12692: PUSH
12693: LD_STRING ,
12695: STR
12696: PUSH
12697: LD_INT 2
12699: STR
12700: PUSH
12701: LD_STRING ,
12703: STR
12704: PUSH
12705: LD_VAR 0 4
12709: STR
12710: PUSH
12711: LD_STRING )
12713: STR
12714: PPUSH
12715: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12719: LD_STRING setSpecText(
12721: PUSH
12722: LD_VAR 0 2
12726: STR
12727: PUSH
12728: LD_STRING ,
12730: STR
12731: PUSH
12732: LD_INT 3
12734: STR
12735: PUSH
12736: LD_STRING ,
12738: STR
12739: PUSH
12740: LD_VAR 0 5
12744: STR
12745: PUSH
12746: LD_STRING )
12748: STR
12749: PPUSH
12750: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12754: LD_STRING setSpecText(
12756: PUSH
12757: LD_VAR 0 2
12761: STR
12762: PUSH
12763: LD_STRING ,
12765: STR
12766: PUSH
12767: LD_INT 4
12769: STR
12770: PUSH
12771: LD_STRING ,
12773: STR
12774: PUSH
12775: LD_VAR 0 6
12779: STR
12780: PUSH
12781: LD_STRING )
12783: STR
12784: PPUSH
12785: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12789: LD_STRING setSpecText(
12791: PUSH
12792: LD_VAR 0 2
12796: STR
12797: PUSH
12798: LD_STRING ,
12800: STR
12801: PUSH
12802: LD_INT 5
12804: STR
12805: PUSH
12806: LD_STRING ,
12808: STR
12809: PUSH
12810: LD_VAR 0 7
12814: STR
12815: PUSH
12816: LD_STRING )
12818: STR
12819: PPUSH
12820: CALL_OW 559
// end ; end ;
12824: GO 12441
12826: POP
12827: POP
// end ;
12828: LD_VAR 0 1
12832: RET
// every 0 0$1 do
12833: GO 12835
12835: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12836: LD_STRING setSpecLogoNumber(
12838: PUSH
12839: LD_INT 2
12841: STR
12842: PUSH
12843: LD_STRING ,
12845: STR
12846: PUSH
12847: LD_INT 1
12849: STR
12850: PUSH
12851: LD_STRING )
12853: STR
12854: PPUSH
12855: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12859: LD_STRING setSpecLogoNumber(
12861: PUSH
12862: LD_INT 3
12864: STR
12865: PUSH
12866: LD_STRING ,
12868: STR
12869: PUSH
12870: LD_INT 2
12872: STR
12873: PUSH
12874: LD_STRING )
12876: STR
12877: PPUSH
12878: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12882: LD_STRING setSpecLogoNumber(
12884: PUSH
12885: LD_INT 4
12887: STR
12888: PUSH
12889: LD_STRING ,
12891: STR
12892: PUSH
12893: LD_INT 3
12895: STR
12896: PUSH
12897: LD_STRING )
12899: STR
12900: PPUSH
12901: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12905: LD_STRING setSpecLogoNumber(
12907: PUSH
12908: LD_INT 5
12910: STR
12911: PUSH
12912: LD_STRING ,
12914: STR
12915: PUSH
12916: LD_INT 4
12918: STR
12919: PUSH
12920: LD_STRING )
12922: STR
12923: PPUSH
12924: CALL_OW 559
// end ;
12928: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12929: LD_INT 2
12931: PUSH
12932: LD_INT 30
12934: PUSH
12935: LD_INT 0
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 30
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: LIST
12956: PPUSH
12957: CALL_OW 69
12961: IFFALSE 12971
12963: GO 12965
12965: DISABLE
// begin enable ;
12966: ENABLE
// UpdateSpectatorBar ;
12967: CALL 12417 0 0
// end ; end_of_file
12971: END
// var respawn , inqueue ; export function init_respawning ; begin
12972: LD_INT 0
12974: PPUSH
// respawn := Rand ( 1 , 8 ) ;
12975: LD_ADDR_LOC 14
12979: PUSH
12980: LD_INT 1
12982: PPUSH
12983: LD_INT 8
12985: PPUSH
12986: CALL_OW 12
12990: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12991: LD_ADDR_LOC 15
12995: PUSH
12996: LD_INT 0
12998: PUSH
12999: LD_INT 0
13001: PUSH
13002: LD_INT 0
13004: PUSH
13005: LD_INT 0
13007: PUSH
13008: LD_INT 0
13010: PUSH
13011: LD_INT 0
13013: PUSH
13014: LD_INT 0
13016: PUSH
13017: LD_INT 0
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: ST_TO_ADDR
// end ;
13030: LD_VAR 0 1
13034: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13035: GO 13037
13037: DISABLE
13038: LD_INT 0
13040: PPUSH
13041: PPUSH
13042: PPUSH
// begin if respawning_time_max = 0 then
13043: LD_EXP 30
13047: PUSH
13048: LD_INT 0
13050: EQUAL
13051: IFFALSE 13055
// exit ;
13053: GO 13463
// if respawn = 8 then
13055: LD_LOC 14
13059: PUSH
13060: LD_INT 8
13062: EQUAL
13063: IFFALSE 13075
// respawn := 1 else
13065: LD_ADDR_LOC 14
13069: PUSH
13070: LD_INT 1
13072: ST_TO_ADDR
13073: GO 13089
// respawn := respawn + 1 ;
13075: LD_ADDR_LOC 14
13079: PUSH
13080: LD_LOC 14
13084: PUSH
13085: LD_INT 1
13087: PLUS
13088: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13089: LD_EXP 37
13093: PUSH
13094: LD_LOC 14
13098: ARRAY
13099: PUSH
13100: LD_LOC 15
13104: PUSH
13105: LD_LOC 14
13109: ARRAY
13110: NOT
13111: AND
13112: IFFALSE 13462
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13114: LD_ADDR_VAR 0 1
13118: PUSH
13119: LD_INT 21
13121: PUSH
13122: LD_INT 1
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: PUSH
13129: LD_INT 22
13131: PUSH
13132: LD_LOC 14
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 3
13143: PUSH
13144: LD_INT 23
13146: PUSH
13147: LD_INT 0
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PPUSH
13160: CALL_OW 69
13164: ST_TO_ADDR
// if n < number_of_people then
13165: LD_VAR 0 1
13169: PUSH
13170: LD_EXP 21
13174: LESS
13175: IFFALSE 13459
// begin aktresp := respawn ;
13177: LD_ADDR_VAR 0 3
13181: PUSH
13182: LD_LOC 14
13186: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13187: LD_ADDR_LOC 15
13191: PUSH
13192: LD_LOC 15
13196: PPUSH
13197: LD_VAR 0 3
13201: PPUSH
13202: LD_INT 1
13204: PPUSH
13205: CALL_OW 1
13209: ST_TO_ADDR
// enable ;
13210: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13211: LD_EXP 29
13215: PPUSH
13216: LD_EXP 30
13220: PPUSH
13221: CALL_OW 12
13225: PPUSH
13226: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13230: LD_ADDR_LOC 15
13234: PUSH
13235: LD_LOC 15
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: LD_INT 0
13247: PPUSH
13248: CALL_OW 1
13252: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13253: LD_ADDR_VAR 0 2
13257: PUSH
13258: LD_INT 21
13260: PUSH
13261: LD_INT 3
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: LD_INT 30
13273: PUSH
13274: LD_INT 0
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 30
13283: PUSH
13284: LD_INT 1
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 50
13298: PUSH
13299: EMPTY
13300: LIST
13301: PUSH
13302: LD_INT 22
13304: PUSH
13305: LD_VAR 0 3
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: PPUSH
13320: CALL_OW 69
13324: ST_TO_ADDR
// if dep = 0 then
13325: LD_VAR 0 2
13329: PUSH
13330: LD_INT 0
13332: EQUAL
13333: IFFALSE 13337
// exit ;
13335: GO 13463
// hc_name :=  ;
13337: LD_ADDR_OWVAR 26
13341: PUSH
13342: LD_STRING 
13344: ST_TO_ADDR
// hc_importance := 0 ;
13345: LD_ADDR_OWVAR 32
13349: PUSH
13350: LD_INT 0
13352: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13353: LD_INT 0
13355: PPUSH
13356: LD_INT 0
13358: PPUSH
13359: LD_EXP 22
13363: PUSH
13364: LD_INT 2
13366: DIV
13367: PPUSH
13368: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13372: LD_ADDR_OWVAR 21
13376: PUSH
13377: LD_EXP 38
13381: PUSH
13382: LD_VAR 0 3
13386: ARRAY
13387: ST_TO_ADDR
// uc_side := aktresp ;
13388: LD_ADDR_OWVAR 20
13392: PUSH
13393: LD_VAR 0 3
13397: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13398: LD_ADDR_VAR 0 2
13402: PUSH
13403: LD_VAR 0 2
13407: PUSH
13408: LD_INT 1
13410: PPUSH
13411: LD_VAR 0 2
13415: PPUSH
13416: CALL_OW 12
13420: ARRAY
13421: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
13422: CALL_OW 44
13426: PPUSH
13427: LD_VAR 0 2
13431: PPUSH
13432: CALL_OW 250
13436: PPUSH
13437: LD_VAR 0 2
13441: PPUSH
13442: CALL_OW 251
13446: PPUSH
13447: LD_INT 7
13449: PPUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 50
// end else
13457: GO 13460
// enable ;
13459: ENABLE
// end else
13460: GO 13463
// enable ;
13462: ENABLE
// end ; end_of_file
13463: PPOPN 3
13465: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
13466: LD_INT 0
13468: PPUSH
13469: PPUSH
13470: PPUSH
// BuildUpTime_Delay = 0 ;
13471: LD_ADDR_EXP 58
13475: PUSH
13476: LD_INT 0
13478: ST_TO_ADDR
// if not def_builduptime then
13479: LD_EXP 16
13483: NOT
13484: IFFALSE 13488
// exit ;
13486: GO 13671
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
13488: LD_ADDR_EXP 58
13492: PUSH
13493: LD_INT 8400
13495: PUSH
13496: LD_INT 2100
13498: PUSH
13499: LD_EXP 16
13503: MUL
13504: PLUS
13505: ST_TO_ADDR
// BuildUpTimeActive := true ;
13506: LD_ADDR_EXP 57
13510: PUSH
13511: LD_INT 1
13513: ST_TO_ADDR
// for i := 1 to 8 do
13514: LD_ADDR_VAR 0 2
13518: PUSH
13519: DOUBLE
13520: LD_INT 1
13522: DEC
13523: ST_TO_ADDR
13524: LD_INT 8
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13669
// if Side_Positions [ i ] then
13530: LD_EXP 37
13534: PUSH
13535: LD_VAR 0 2
13539: ARRAY
13540: IFFALSE 13667
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
13542: LD_EXP 56
13546: PUSH
13547: LD_EXP 37
13551: PUSH
13552: LD_VAR 0 2
13556: ARRAY
13557: ARRAY
13558: PPUSH
13559: LD_INT 5
13561: PPUSH
13562: CALL_OW 424
// for j := 1 to 8 do
13566: LD_ADDR_VAR 0 3
13570: PUSH
13571: DOUBLE
13572: LD_INT 1
13574: DEC
13575: ST_TO_ADDR
13576: LD_INT 8
13578: PUSH
13579: FOR_TO
13580: IFFALSE 13665
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13582: LD_EXP 37
13586: PUSH
13587: LD_VAR 0 3
13591: ARRAY
13592: PUSH
13593: LD_EXP 35
13597: PUSH
13598: LD_VAR 0 2
13602: ARRAY
13603: PUSH
13604: LD_EXP 35
13608: PUSH
13609: LD_VAR 0 3
13613: ARRAY
13614: NONEQUAL
13615: PUSH
13616: LD_EXP 39
13620: NOT
13621: PUSH
13622: LD_VAR 0 2
13626: PUSH
13627: LD_VAR 0 3
13631: NONEQUAL
13632: AND
13633: OR
13634: AND
13635: IFFALSE 13663
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13637: LD_VAR 0 3
13641: PPUSH
13642: LD_EXP 56
13646: PUSH
13647: LD_EXP 37
13651: PUSH
13652: LD_VAR 0 2
13656: ARRAY
13657: ARRAY
13658: PPUSH
13659: CALL_OW 333
13663: GO 13579
13665: POP
13666: POP
// end ;
13667: GO 13527
13669: POP
13670: POP
// end ;
13671: LD_VAR 0 1
13675: RET
// export function EndBuildUp ; var i , j ; begin
13676: LD_INT 0
13678: PPUSH
13679: PPUSH
13680: PPUSH
// BuildUpTimeActive := false ;
13681: LD_ADDR_EXP 57
13685: PUSH
13686: LD_INT 0
13688: ST_TO_ADDR
// for i := 1 to 8 do
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: DOUBLE
13695: LD_INT 1
13697: DEC
13698: ST_TO_ADDR
13699: LD_INT 8
13701: PUSH
13702: FOR_TO
13703: IFFALSE 13844
// if Side_Positions [ i ] then
13705: LD_EXP 37
13709: PUSH
13710: LD_VAR 0 2
13714: ARRAY
13715: IFFALSE 13842
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13717: LD_EXP 56
13721: PUSH
13722: LD_EXP 37
13726: PUSH
13727: LD_VAR 0 2
13731: ARRAY
13732: ARRAY
13733: PPUSH
13734: LD_INT 0
13736: PPUSH
13737: CALL_OW 424
// for j := 1 to 8 do
13741: LD_ADDR_VAR 0 3
13745: PUSH
13746: DOUBLE
13747: LD_INT 1
13749: DEC
13750: ST_TO_ADDR
13751: LD_INT 8
13753: PUSH
13754: FOR_TO
13755: IFFALSE 13840
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13757: LD_EXP 37
13761: PUSH
13762: LD_VAR 0 3
13766: ARRAY
13767: PUSH
13768: LD_EXP 35
13772: PUSH
13773: LD_VAR 0 2
13777: ARRAY
13778: PUSH
13779: LD_EXP 35
13783: PUSH
13784: LD_VAR 0 3
13788: ARRAY
13789: NONEQUAL
13790: PUSH
13791: LD_EXP 39
13795: NOT
13796: PUSH
13797: LD_VAR 0 2
13801: PUSH
13802: LD_VAR 0 3
13806: NONEQUAL
13807: AND
13808: OR
13809: AND
13810: IFFALSE 13838
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13812: LD_VAR 0 3
13816: PPUSH
13817: LD_EXP 56
13821: PUSH
13822: LD_EXP 37
13826: PUSH
13827: LD_VAR 0 2
13831: ARRAY
13832: ARRAY
13833: PPUSH
13834: CALL_OW 334
13838: GO 13754
13840: POP
13841: POP
// end ;
13842: GO 13702
13844: POP
13845: POP
// end ;
13846: LD_VAR 0 1
13850: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13851: LD_EXP 57
13855: IFFALSE 14030
13857: GO 13859
13859: DISABLE
13860: LD_INT 0
13862: PPUSH
13863: PPUSH
// begin for i := 1 to 8 do
13864: LD_ADDR_VAR 0 1
13868: PUSH
13869: DOUBLE
13870: LD_INT 1
13872: DEC
13873: ST_TO_ADDR
13874: LD_INT 8
13876: PUSH
13877: FOR_TO
13878: IFFALSE 14027
// if Side_Positions [ i ] then
13880: LD_EXP 37
13884: PUSH
13885: LD_VAR 0 1
13889: ARRAY
13890: IFFALSE 14025
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13892: LD_ADDR_VAR 0 2
13896: PUSH
13897: LD_EXP 56
13901: PUSH
13902: LD_EXP 37
13906: PUSH
13907: LD_VAR 0 1
13911: ARRAY
13912: ARRAY
13913: PPUSH
13914: LD_INT 2
13916: PUSH
13917: LD_INT 21
13919: PUSH
13920: LD_INT 1
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 21
13929: PUSH
13930: LD_INT 2
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: PUSH
13942: LD_INT 22
13944: PUSH
13945: LD_OWVAR 2
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PPUSH
13958: CALL_OW 70
13962: PUSH
13963: FOR_IN
13964: IFFALSE 14023
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
13966: LD_EXP 35
13970: PUSH
13971: LD_VAR 0 1
13975: ARRAY
13976: PUSH
13977: LD_EXP 35
13981: PUSH
13982: LD_OWVAR 2
13986: ARRAY
13987: NONEQUAL
13988: PUSH
13989: LD_EXP 39
13993: NOT
13994: PUSH
13995: LD_VAR 0 1
13999: PUSH
14000: LD_OWVAR 2
14004: NONEQUAL
14005: AND
14006: OR
14007: IFFALSE 14021
// ComMoveToArea ( un , BuildUpEscape ) ;
14009: LD_VAR 0 2
14013: PPUSH
14014: LD_INT 13
14016: PPUSH
14017: CALL_OW 113
14021: GO 13963
14023: POP
14024: POP
14025: GO 13877
14027: POP
14028: POP
// enable ;
14029: ENABLE
// end ;
14030: PPOPN 2
14032: END
// every 0 0$1 trigger def_builduptime do
14033: LD_EXP 16
14037: IFFALSE 14063
14039: GO 14041
14041: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14042: LD_INT 8400
14044: PUSH
14045: LD_EXP 16
14049: PUSH
14050: LD_INT 2100
14052: MUL
14053: PLUS
14054: PPUSH
14055: CALL_OW 67
// EndBuildUp ;
14059: CALL 13676 0 0
// end ;
14063: END
