// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , def_win_rules , tech_level ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// if Multiplayer then
  72: LD_OWVAR 4
  76: IFFALSE 150
// begin Game_Type := mp_game_type ;
  78: LD_ADDR_EXP 18
  82: PUSH
  83: LD_OWVAR 6
  87: ST_TO_ADDR
// Your_Side := mp_player_side ;
  88: LD_ADDR_OWVAR 2
  92: PUSH
  93: LD_OWVAR 7
  97: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  98: LD_ADDR_EXP 39
 102: PUSH
 103: LD_OWVAR 17
 107: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 108: LD_ADDR_EXP 36
 112: PUSH
 113: LD_OWVAR 15
 117: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 118: LD_ADDR_EXP 40
 122: PUSH
 123: LD_OWVAR 16
 127: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 128: LD_ADDR_EXP 38
 132: PUSH
 133: CALL 0 0 0
 137: ST_TO_ADDR
// Teams := mp_teams ;
 138: LD_ADDR_EXP 37
 142: PUSH
 143: LD_OWVAR 12
 147: ST_TO_ADDR
// end else
 148: GO 371
// begin Game_Type := 1 ;
 150: LD_ADDR_EXP 18
 154: PUSH
 155: LD_INT 1
 157: ST_TO_ADDR
// Your_Side := 1 ;
 158: LD_ADDR_OWVAR 2
 162: PUSH
 163: LD_INT 1
 165: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 166: LD_ADDR_EXP 39
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 4
 182: PUSH
 183: LD_INT 5
 185: PUSH
 186: LD_INT 6
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 205: LD_ADDR_EXP 36
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: LD_INT 2
 215: PUSH
 216: LD_INT 3
 218: PUSH
 219: LD_INT 4
 221: PUSH
 222: LD_INT 5
 224: PUSH
 225: LD_INT 6
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: LD_INT 0
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 244: LD_ADDR_EXP 40
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: LD_INT 3
 257: PUSH
 258: LD_INT 1
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: LD_INT 3
 266: PUSH
 267: LD_INT 0
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 283: LD_ADDR_EXP 38
 287: PUSH
 288: LD_INT 0
 290: PUSH
 291: LD_INT 0
 293: PUSH
 294: LD_INT 0
 296: PUSH
 297: LD_INT 0
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 0
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 322: LD_ADDR_EXP 37
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: PUSH
 333: LD_INT 2
 335: PUSH
 336: EMPTY
 337: LIST
 338: PUSH
 339: LD_INT 3
 341: PUSH
 342: EMPTY
 343: LIST
 344: PUSH
 345: LD_INT 4
 347: PUSH
 348: EMPTY
 349: LIST
 350: PUSH
 351: LD_INT 5
 353: PUSH
 354: EMPTY
 355: LIST
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: EMPTY
 361: LIST
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 371: LD_ADDR_EXP 41
 375: PUSH
 376: LD_EXP 36
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: DIFF
 387: PUSH
 388: LD_INT 1
 390: GREATER
 391: ST_TO_ADDR
// if Multiplayer then
 392: LD_OWVAR 4
 396: IFFALSE 629
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_EXP 1
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 411: LD_ADDR_EXP 2
 415: PUSH
 416: LD_INT 1
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 424: LD_ADDR_EXP 3
 428: PUSH
 429: LD_INT 2
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 437: LD_ADDR_EXP 4
 441: PUSH
 442: LD_INT 3
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 450: LD_ADDR_EXP 5
 454: PUSH
 455: LD_INT 4
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 463: LD_ADDR_EXP 6
 467: PUSH
 468: LD_INT 5
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 476: LD_ADDR_EXP 7
 480: PUSH
 481: LD_INT 6
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 489: LD_ADDR_EXP 8
 493: PUSH
 494: LD_INT 10
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 502: LD_ADDR_EXP 9
 506: PUSH
 507: LD_INT 11
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 515: LD_ADDR_EXP 10
 519: PUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 426
 527: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 528: LD_ADDR_EXP 11
 532: PUSH
 533: LD_INT 13
 535: PPUSH
 536: CALL_OW 426
 540: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 541: LD_ADDR_EXP 12
 545: PUSH
 546: LD_INT 14
 548: PPUSH
 549: CALL_OW 426
 553: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 554: LD_ADDR_EXP 13
 558: PUSH
 559: LD_INT 15
 561: PPUSH
 562: CALL_OW 426
 566: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 567: LD_ADDR_EXP 14
 571: PUSH
 572: LD_INT 16
 574: PPUSH
 575: CALL_OW 426
 579: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 580: LD_ADDR_EXP 15
 584: PUSH
 585: LD_INT 17
 587: PPUSH
 588: CALL_OW 426
 592: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 593: LD_ADDR_EXP 16
 597: PUSH
 598: LD_INT 20
 600: PPUSH
 601: CALL_OW 426
 605: ST_TO_ADDR
// def_win_rules := 0 ;
 606: LD_ADDR_EXP 34
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 614: LD_ADDR_EXP 35
 618: PUSH
 619: LD_INT 23
 621: PPUSH
 622: CALL_OW 426
 626: ST_TO_ADDR
// end else
 627: GO 777
// begin Randomize ;
 629: CALL_OW 10
// def_base_level := 2 ;
 633: LD_ADDR_EXP 1
 637: PUSH
 638: LD_INT 2
 640: ST_TO_ADDR
// def_amount_of_people := 0 ;
 641: LD_ADDR_EXP 2
 645: PUSH
 646: LD_INT 0
 648: ST_TO_ADDR
// def_skill_level := 1 ;
 649: LD_ADDR_EXP 3
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// def_starting_resources := 2 ;
 657: LD_ADDR_EXP 4
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_shipments_density := 3 ;
 665: LD_ADDR_EXP 5
 669: PUSH
 670: LD_INT 3
 672: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 673: LD_ADDR_EXP 6
 677: PUSH
 678: LD_INT 0
 680: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 681: LD_ADDR_EXP 7
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_shared_vision := 1 ;
 689: LD_ADDR_EXP 8
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_morale_flags := 1 ;
 697: LD_ADDR_EXP 9
 701: PUSH
 702: LD_INT 1
 704: ST_TO_ADDR
// def_siberite_detection := 1 ;
 705: LD_ADDR_EXP 10
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_people_respawning := 2 ;
 713: LD_ADDR_EXP 11
 717: PUSH
 718: LD_INT 2
 720: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 721: LD_ADDR_EXP 12
 725: PUSH
 726: LD_INT 3
 728: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 729: LD_ADDR_EXP 13
 733: PUSH
 734: LD_INT 0
 736: ST_TO_ADDR
// def_public_score := 0 ;
 737: LD_ADDR_EXP 14
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 15
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_builduptime := 1 ;
 753: LD_ADDR_EXP 16
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_win_rules := 0 ;
 761: LD_ADDR_EXP 34
 765: PUSH
 766: LD_INT 0
 768: ST_TO_ADDR
// tech_level := 0 ;
 769: LD_ADDR_EXP 35
 773: PUSH
 774: LD_INT 0
 776: ST_TO_ADDR
// end ; if isSGUI then
 777: LD_OWVAR 83
 781: IFFALSE 789
// setMpTechs ( ) else
 783: CALL 7651 0 0
 787: GO 802
// SetMpTechLevel ( tech_level + 1 ) ;
 789: LD_EXP 35
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: PPUSH
 798: CALL 7798 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 802: LD_ADDR_EXP 19
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_EXP 1
 825: PUSH
 826: LD_INT 1
 828: PLUS
 829: ARRAY
 830: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 831: LD_ADDR_EXP 20
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: PUSH
 850: LD_EXP 1
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: ARRAY
 859: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 860: LD_ADDR_EXP 21
 864: PUSH
 865: LD_INT 9
 867: PUSH
 868: LD_INT 12
 870: PUSH
 871: LD_INT 15
 873: PUSH
 874: LD_INT 24
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_EXP 2
 887: PUSH
 888: LD_INT 1
 890: PLUS
 891: ARRAY
 892: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
 893: LD_ADDR_EXP 22
 897: PUSH
 898: LD_INT 2
 900: PUSH
 901: LD_INT 3
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: LD_INT 6
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: PUSH
 916: LD_EXP 3
 920: PUSH
 921: LD_INT 1
 923: PLUS
 924: ARRAY
 925: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 926: LD_ADDR_EXP 24
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: LD_INT 0
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: LIST
 944: PUSH
 945: LD_INT 30
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: LD_INT 0
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 50
 961: PUSH
 962: LD_INT 20
 964: PUSH
 965: LD_INT 0
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: LD_INT 80
 975: PUSH
 976: LD_INT 40
 978: PUSH
 979: LD_INT 20
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_EXP 4
 997: PUSH
 998: LD_INT 1
1000: PLUS
1001: ARRAY
1002: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1003: LD_ADDR_EXP 23
1007: PUSH
1008: LD_INT 10
1010: PUSH
1011: EMPTY
1012: LIST
1013: PUSH
1014: LD_INT 7
1016: PUSH
1017: LD_INT 14
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 6
1026: PUSH
1027: LD_INT 12
1029: PUSH
1030: LD_INT 18
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: LD_INT 5
1040: PUSH
1041: LD_INT 10
1043: PUSH
1044: LD_INT 15
1046: PUSH
1047: LD_INT 20
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 4
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// shipments_density := [ 125 , 100 , 75 , 50 ] [ def_shipments_density + 1 ] ;
1072: LD_ADDR_EXP 25
1076: PUSH
1077: LD_INT 125
1079: PUSH
1080: LD_INT 100
1082: PUSH
1083: LD_INT 75
1085: PUSH
1086: LD_INT 50
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: LD_EXP 5
1099: PUSH
1100: LD_INT 1
1102: PLUS
1103: ARRAY
1104: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: LD_INT 10500
1115: PUSH
1116: LD_INT 6300
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_EXP 11
1128: PUSH
1129: LD_INT 1
1131: PLUS
1132: ARRAY
1133: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1134: LD_ADDR_EXP 30
1138: PUSH
1139: LD_INT 0
1141: PUSH
1142: LD_INT 31500
1144: PUSH
1145: LD_INT 10500
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_EXP 11
1157: PUSH
1158: LD_INT 1
1160: PLUS
1161: ARRAY
1162: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1163: LD_ADDR_EXP 27
1167: PUSH
1168: LD_INT 0
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_EXP 12
1190: PUSH
1191: LD_INT 1
1193: PLUS
1194: ARRAY
1195: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1196: LD_ADDR_EXP 28
1200: PUSH
1201: LD_INT 30
1203: PUSH
1204: LD_INT 50
1206: PUSH
1207: LD_INT 80
1209: PUSH
1210: LD_INT 100
1212: PUSH
1213: LD_INT 130
1215: PUSH
1216: LD_INT 150
1218: PUSH
1219: LD_INT 200
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: LD_EXP 13
1235: PUSH
1236: LD_INT 1
1238: PLUS
1239: ARRAY
1240: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1241: LD_ADDR_EXP 26
1245: PUSH
1246: LD_INT 1
1248: NEG
1249: PUSH
1250: LD_INT 350
1252: PUSH
1253: LD_INT 700
1255: PUSH
1256: LD_INT 1400
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_EXP 9
1273: PUSH
1274: LD_INT 1
1276: PLUS
1277: ARRAY
1278: ST_TO_ADDR
// battle_flags_id := [ ] ;
1279: LD_ADDR_EXP 49
1283: PUSH
1284: EMPTY
1285: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1286: LD_ADDR_EXP 31
1290: PUSH
1291: LD_INT 0
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 32
1305: PUSH
1306: LD_INT 1
1308: PLUS
1309: ARRAY
1310: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1311: LD_ADDR_EXP 33
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: LD_INT 63000
1324: PUSH
1325: LD_INT 126000
1327: PUSH
1328: LD_INT 189000
1330: PUSH
1331: LD_INT 252000
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: PUSH
1342: LD_EXP 15
1346: PUSH
1347: LD_INT 1
1349: PLUS
1350: ARRAY
1351: ST_TO_ADDR
// end ;
1352: LD_VAR 0 1
1356: RET
// function init_map ; var i , j ; begin
1357: LD_INT 0
1359: PPUSH
1360: PPUSH
1361: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1362: LD_ADDR_EXP 45
1366: PUSH
1367: LD_INT 12
1369: PUSH
1370: LD_INT 4
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 45
1379: PUSH
1380: LD_INT 81
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_INT 116
1389: PUSH
1390: LD_INT 195
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PUSH
1397: LD_INT 142
1399: PUSH
1400: LD_INT 4
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: PUSH
1407: LD_INT 201
1409: PUSH
1410: LD_INT 102
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 234
1419: PUSH
1420: LD_INT 194
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1435: LD_ADDR_EXP 46
1439: PUSH
1440: LD_INT 12
1442: PUSH
1443: LD_INT 4
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 16
1452: PUSH
1453: LD_INT 25
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 45
1466: PUSH
1467: LD_INT 81
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 60
1476: PUSH
1477: LD_INT 102
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 116
1490: PUSH
1491: LD_INT 195
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 92
1500: PUSH
1501: LD_INT 167
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 142
1514: PUSH
1515: LD_INT 4
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 167
1524: PUSH
1525: LD_INT 24
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 201
1538: PUSH
1539: LD_INT 102
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 190
1548: PUSH
1549: LD_INT 77
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 234
1562: PUSH
1563: LD_INT 194
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 237
1572: PUSH
1573: LD_INT 171
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1592: LD_ADDR_EXP 47
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: LD_INT 10
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 51
1609: PUSH
1610: LD_INT 93
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 102
1619: PUSH
1620: LD_INT 187
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 158
1629: PUSH
1630: LD_INT 6
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 203
1639: PUSH
1640: LD_INT 93
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 252
1649: PUSH
1650: LD_INT 194
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1665: LD_ADDR_EXP 48
1669: PUSH
1670: LD_INT 10
1672: PUSH
1673: LD_INT 10
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 36
1682: PUSH
1683: LD_INT 10
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 51
1696: PUSH
1697: LD_INT 93
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 72
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 102
1720: PUSH
1721: LD_INT 187
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 93
1730: PUSH
1731: LD_INT 175
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PUSH
1742: LD_INT 158
1744: PUSH
1745: LD_INT 6
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 147
1754: PUSH
1755: LD_INT 5
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 203
1768: PUSH
1769: LD_INT 93
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 173
1778: PUSH
1779: LD_INT 71
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: LD_INT 252
1792: PUSH
1793: LD_INT 194
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 243
1802: PUSH
1803: LD_INT 177
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: LD_INT 23
1829: PUSH
1830: LD_INT 15
1832: PUSH
1833: LD_INT 2
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 56
1843: PUSH
1844: LD_INT 85
1846: PUSH
1847: LD_INT 1
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 110
1857: PUSH
1858: LD_INT 177
1860: PUSH
1861: LD_INT 3
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 157
1871: PUSH
1872: LD_INT 13
1874: PUSH
1875: LD_INT 3
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 187
1885: PUSH
1886: LD_INT 87
1888: PUSH
1889: LD_INT 5
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 231
1899: PUSH
1900: LD_INT 181
1902: PUSH
1903: LD_INT 5
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
1919: LD_ADDR_EXP 44
1923: PUSH
1924: LD_INT 30
1926: PUSH
1927: LD_INT 22
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 58
1936: PUSH
1937: LD_INT 82
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 113
1946: PUSH
1947: LD_INT 180
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 151
1956: PUSH
1957: LD_INT 24
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 183
1966: PUSH
1967: LD_INT 90
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 223
1976: PUSH
1977: LD_INT 180
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
1992: LD_ADDR_EXP 43
1996: PUSH
1997: LD_INT 33
1999: PUSH
2000: LD_INT 12
2002: PUSH
2003: LD_INT 5
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 42
2013: PUSH
2014: LD_INT 29
2016: PUSH
2017: LD_INT 4
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 36
2027: PUSH
2028: LD_INT 20
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 72
2046: PUSH
2047: LD_INT 91
2049: PUSH
2050: LD_INT 4
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 65
2060: PUSH
2061: LD_INT 78
2063: PUSH
2064: LD_INT 4
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 75
2074: PUSH
2075: LD_INT 100
2077: PUSH
2078: LD_INT 3
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 102
2093: PUSH
2094: LD_INT 165
2096: PUSH
2097: LD_INT 3
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 122
2107: PUSH
2108: LD_INT 176
2110: PUSH
2111: LD_INT 4
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 120
2121: PUSH
2122: LD_INT 184
2124: PUSH
2125: LD_INT 4
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 134
2140: PUSH
2141: LD_INT 16
2143: PUSH
2144: LD_INT 1
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 132
2154: PUSH
2155: LD_INT 5
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: PUSH
2166: LD_INT 157
2168: PUSH
2169: LD_INT 27
2171: PUSH
2172: LD_INT 5
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 172
2187: PUSH
2188: LD_INT 77
2190: PUSH
2191: LD_INT 1
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 175
2201: PUSH
2202: LD_INT 96
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 192
2215: PUSH
2216: LD_INT 104
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 216
2234: PUSH
2235: LD_INT 179
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: LIST
2245: PUSH
2246: LD_INT 208
2248: PUSH
2249: LD_INT 160
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 208
2262: PUSH
2263: LD_INT 171
2265: PUSH
2266: LD_INT 2
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: ST_TO_ADDR
// for i = 1 to 6 do
2287: LD_ADDR_VAR 0 2
2291: PUSH
2292: DOUBLE
2293: LD_INT 1
2295: DEC
2296: ST_TO_ADDR
2297: LD_INT 6
2299: PUSH
2300: FOR_TO
2301: IFFALSE 2398
// if def_extra_oil_deposits then
2303: LD_EXP 6
2307: IFFALSE 2359
// for j in extra_oil_deposits_locations [ i ] do
2309: LD_ADDR_VAR 0 3
2313: PUSH
2314: LD_EXP 46
2318: PUSH
2319: LD_VAR 0 2
2323: ARRAY
2324: PUSH
2325: FOR_IN
2326: IFFALSE 2355
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2328: LD_VAR 0 3
2332: PUSH
2333: LD_INT 1
2335: ARRAY
2336: PPUSH
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
2353: GO 2325
2355: POP
2356: POP
2357: GO 2396
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2359: LD_EXP 45
2363: PUSH
2364: LD_VAR 0 2
2368: ARRAY
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: LD_EXP 45
2378: PUSH
2379: LD_VAR 0 2
2383: ARRAY
2384: PUSH
2385: LD_INT 2
2387: ARRAY
2388: PPUSH
2389: LD_INT 2
2391: PPUSH
2392: CALL_OW 62
2396: GO 2300
2398: POP
2399: POP
// if def_extra_sib_deposits then
2400: LD_EXP 7
2404: IFFALSE 2523
// for i = 1 to 6 do
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: DOUBLE
2412: LD_INT 1
2414: DEC
2415: ST_TO_ADDR
2416: LD_INT 6
2418: PUSH
2419: FOR_TO
2420: IFFALSE 2521
// if def_extra_sib_deposits = 2 then
2422: LD_EXP 7
2426: PUSH
2427: LD_INT 2
2429: EQUAL
2430: IFFALSE 2482
// for j in extra_sib_deposits_locations [ i ] do
2432: LD_ADDR_VAR 0 3
2436: PUSH
2437: LD_EXP 48
2441: PUSH
2442: LD_VAR 0 2
2446: ARRAY
2447: PUSH
2448: FOR_IN
2449: IFFALSE 2478
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2451: LD_VAR 0 3
2455: PUSH
2456: LD_INT 1
2458: ARRAY
2459: PPUSH
2460: LD_VAR 0 3
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 3
2471: PPUSH
2472: CALL_OW 62
2476: GO 2448
2478: POP
2479: POP
2480: GO 2519
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2482: LD_EXP 47
2486: PUSH
2487: LD_VAR 0 2
2491: ARRAY
2492: PUSH
2493: LD_INT 1
2495: ARRAY
2496: PPUSH
2497: LD_EXP 47
2501: PUSH
2502: LD_VAR 0 2
2506: ARRAY
2507: PUSH
2508: LD_INT 2
2510: ARRAY
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: CALL_OW 62
2519: GO 2419
2521: POP
2522: POP
// end ;
2523: LD_VAR 0 1
2527: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2528: LD_INT 0
2530: PPUSH
2531: PPUSH
2532: PPUSH
// if not Team_Game then
2533: LD_EXP 41
2537: NOT
2538: IFFALSE 2636
// begin for i = 1 to 8 do
2540: LD_ADDR_VAR 0 2
2544: PUSH
2545: DOUBLE
2546: LD_INT 1
2548: DEC
2549: ST_TO_ADDR
2550: LD_INT 8
2552: PUSH
2553: FOR_TO
2554: IFFALSE 2632
// for j = 1 to 8 do
2556: LD_ADDR_VAR 0 3
2560: PUSH
2561: DOUBLE
2562: LD_INT 1
2564: DEC
2565: ST_TO_ADDR
2566: LD_INT 8
2568: PUSH
2569: FOR_TO
2570: IFFALSE 2628
// if i <> j then
2572: LD_VAR 0 2
2576: PUSH
2577: LD_VAR 0 3
2581: NONEQUAL
2582: IFFALSE 2606
// SetAttitude ( i , j , att_neutral , true ) else
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 3
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: CALL_OW 80
2604: GO 2626
// SetAttitude ( i , j , att_friend , true ) ;
2606: LD_VAR 0 2
2610: PPUSH
2611: LD_VAR 0 3
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL_OW 80
2626: GO 2569
2628: POP
2629: POP
2630: GO 2553
2632: POP
2633: POP
// end else
2634: GO 2811
// begin if def_shared_vision then
2636: LD_EXP 8
2640: IFFALSE 2705
// begin for i in Teams do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: LD_EXP 37
2651: PUSH
2652: FOR_IN
2653: IFFALSE 2703
// for j = 2 to i do
2655: LD_ADDR_VAR 0 3
2659: PUSH
2660: DOUBLE
2661: LD_INT 2
2663: DEC
2664: ST_TO_ADDR
2665: LD_VAR 0 2
2669: PUSH
2670: FOR_TO
2671: IFFALSE 2699
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2673: LD_VAR 0 2
2677: PUSH
2678: LD_VAR 0 3
2682: ARRAY
2683: PPUSH
2684: LD_VAR 0 2
2688: PUSH
2689: LD_INT 1
2691: ARRAY
2692: PPUSH
2693: CALL_OW 343
2697: GO 2670
2699: POP
2700: POP
2701: GO 2652
2703: POP
2704: POP
// end ; for i = 1 to 8 do
2705: LD_ADDR_VAR 0 2
2709: PUSH
2710: DOUBLE
2711: LD_INT 1
2713: DEC
2714: ST_TO_ADDR
2715: LD_INT 8
2717: PUSH
2718: FOR_TO
2719: IFFALSE 2809
// for j = 1 to 8 do
2721: LD_ADDR_VAR 0 3
2725: PUSH
2726: DOUBLE
2727: LD_INT 1
2729: DEC
2730: ST_TO_ADDR
2731: LD_INT 8
2733: PUSH
2734: FOR_TO
2735: IFFALSE 2805
// if Side_Teams [ i ] = Side_Teams [ j ] then
2737: LD_EXP 36
2741: PUSH
2742: LD_VAR 0 2
2746: ARRAY
2747: PUSH
2748: LD_EXP 36
2752: PUSH
2753: LD_VAR 0 3
2757: ARRAY
2758: EQUAL
2759: IFFALSE 2783
// SetAttitude ( i , j , att_friend , true ) else
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_VAR 0 3
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: CALL_OW 80
2781: GO 2803
// SetAttitude ( i , j , att_enemy , true ) ;
2783: LD_VAR 0 2
2787: PPUSH
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 2
2795: PPUSH
2796: LD_INT 1
2798: PPUSH
2799: CALL_OW 80
2803: GO 2734
2805: POP
2806: POP
2807: GO 2718
2809: POP
2810: POP
// end ; end ;
2811: LD_VAR 0 1
2815: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2816: LD_INT 0
2818: PPUSH
2819: PPUSH
2820: PPUSH
2821: PPUSH
// result := [ ] ;
2822: LD_ADDR_VAR 0 7
2826: PUSH
2827: EMPTY
2828: ST_TO_ADDR
// for i := 1 to count do
2829: LD_ADDR_VAR 0 8
2833: PUSH
2834: DOUBLE
2835: LD_INT 1
2837: DEC
2838: ST_TO_ADDR
2839: LD_VAR 0 1
2843: PUSH
2844: FOR_TO
2845: IFFALSE 3263
// begin uc_direction := Rand ( 0 , 5 ) ;
2847: LD_ADDR_OWVAR 24
2851: PUSH
2852: LD_INT 0
2854: PPUSH
2855: LD_INT 5
2857: PPUSH
2858: CALL_OW 12
2862: ST_TO_ADDR
// if commander then
2863: LD_LOC 1
2867: IFFALSE 2976
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2869: LD_ADDR_OWVAR 26
2873: PUSH
2874: LD_OWVAR 19
2878: PUSH
2879: LD_OWVAR 20
2883: ARRAY
2884: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2885: LD_INT 1
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 12
2895: PPUSH
2896: LD_VAR 0 2
2900: PPUSH
2901: LD_EXP 22
2905: PUSH
2906: LD_INT 2
2908: PLUS
2909: PPUSH
2910: CALL_OW 380
// hc_importance := 105 ;
2914: LD_ADDR_OWVAR 32
2918: PUSH
2919: LD_INT 105
2921: ST_TO_ADDR
// commander := false ;
2922: LD_ADDR_LOC 1
2926: PUSH
2927: LD_INT 0
2929: ST_TO_ADDR
// if Multiplayer then
2930: LD_OWVAR 4
2934: IFFALSE 2974
// begin hc_gallery := MULTIAVATARS ;
2936: LD_ADDR_OWVAR 33
2940: PUSH
2941: LD_STRING MULTIAVATARS
2943: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2944: LD_ADDR_OWVAR 34
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 525
2958: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2959: LD_ADDR_OWVAR 27
2963: PUSH
2964: LD_OWVAR 20
2968: PPUSH
2969: CALL_OW 526
2973: ST_TO_ADDR
// end ; end else
2974: GO 3039
// begin hc_name :=  ;
2976: LD_ADDR_OWVAR 26
2980: PUSH
2981: LD_STRING 
2983: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2984: LD_INT 1
2986: PPUSH
2987: LD_INT 2
2989: PPUSH
2990: CALL_OW 12
2994: PPUSH
2995: LD_VAR 0 2
2999: PPUSH
3000: LD_EXP 22
3004: PPUSH
3005: CALL_OW 380
// hc_importance := 0 ;
3009: LD_ADDR_OWVAR 32
3013: PUSH
3014: LD_INT 0
3016: ST_TO_ADDR
// if Multiplayer then
3017: LD_OWVAR 4
3021: IFFALSE 3039
// begin hc_gallery :=  ;
3023: LD_ADDR_OWVAR 33
3027: PUSH
3028: LD_STRING 
3030: ST_TO_ADDR
// hc_face_number := 0 ;
3031: LD_ADDR_OWVAR 34
3035: PUSH
3036: LD_INT 0
3038: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3039: LD_ADDR_VAR 0 10
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if global_defined then
3049: LD_LOC 3
3053: IFFALSE 3193
// begin if ( cl = class_soldier ) then
3055: LD_VAR 0 2
3059: PUSH
3060: LD_INT 1
3062: EQUAL
3063: IFFALSE 3083
// j := i + soldiers_created else
3065: LD_ADDR_VAR 0 9
3069: PUSH
3070: LD_VAR 0 8
3074: PUSH
3075: LD_LOC 4
3079: PLUS
3080: ST_TO_ADDR
3081: GO 3093
// j := i ;
3083: LD_ADDR_VAR 0 9
3087: PUSH
3088: LD_VAR 0 8
3092: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3093: LD_LOC 2
3097: PUSH
3098: LD_VAR 0 2
3102: ARRAY
3103: PUSH
3104: LD_VAR 0 9
3108: ARRAY
3109: PPUSH
3110: LD_VAR 0 10
3114: PPUSH
3115: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3119: LD_VAR 0 10
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: LD_LOC 2
3131: PUSH
3132: LD_VAR 0 2
3136: ARRAY
3137: PUSH
3138: LD_VAR 0 9
3142: ARRAY
3143: PPUSH
3144: LD_INT 2
3146: PPUSH
3147: CALL_OW 260
3151: PPUSH
3152: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3156: LD_VAR 0 10
3160: PPUSH
3161: LD_INT 1
3163: PPUSH
3164: LD_LOC 2
3168: PUSH
3169: LD_VAR 0 2
3173: ARRAY
3174: PUSH
3175: LD_VAR 0 9
3179: ARRAY
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: CALL_OW 260
3188: PPUSH
3189: CALL_OW 239
// end ; if building then
3193: LD_VAR 0 6
3197: IFFALSE 3215
// PlaceHumanInUnit ( un , building ) else
3199: LD_VAR 0 10
3203: PPUSH
3204: LD_VAR 0 6
3208: PPUSH
3209: CALL_OW 52
3213: GO 3242
// PlaceUnitXYR ( un , x , y , r , false ) ;
3215: LD_VAR 0 10
3219: PPUSH
3220: LD_VAR 0 3
3224: PPUSH
3225: LD_VAR 0 4
3229: PPUSH
3230: LD_VAR 0 5
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 50
// result := result ^ [ un ] ;
3242: LD_ADDR_VAR 0 7
3246: PUSH
3247: LD_VAR 0 7
3251: PUSH
3252: LD_VAR 0 10
3256: PUSH
3257: EMPTY
3258: LIST
3259: ADD
3260: ST_TO_ADDR
// end ;
3261: GO 2844
3263: POP
3264: POP
// if not global_defined then
3265: LD_LOC 3
3269: NOT
3270: IFFALSE 3348
// if ( global_units >= cl ) then
3272: LD_LOC 2
3276: PUSH
3277: LD_VAR 0 2
3281: GREATEREQUAL
3282: IFFALSE 3323
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3284: LD_ADDR_LOC 2
3288: PUSH
3289: LD_LOC 2
3293: PPUSH
3294: LD_VAR 0 2
3298: PPUSH
3299: LD_LOC 2
3303: PUSH
3304: LD_VAR 0 2
3308: ARRAY
3309: PUSH
3310: LD_VAR 0 7
3314: ADD
3315: PPUSH
3316: CALL_OW 1
3320: ST_TO_ADDR
3321: GO 3348
// global_units := Replace ( global_units , cl , result ) ;
3323: LD_ADDR_LOC 2
3327: PUSH
3328: LD_LOC 2
3332: PPUSH
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_VAR 0 7
3342: PPUSH
3343: CALL_OW 1
3347: ST_TO_ADDR
// end ;
3348: LD_VAR 0 7
3352: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3353: LD_INT 0
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
3360: PPUSH
3361: PPUSH
3362: PPUSH
3363: PPUSH
// if side in [ 0 , 9 ] then
3364: LD_VAR 0 1
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: LD_INT 9
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: IN
3379: IFFALSE 3383
// exit ;
3381: GO 4400
// pos := Side_Positions [ side ] ;
3383: LD_ADDR_VAR 0 3
3387: PUSH
3388: LD_EXP 39
3392: PUSH
3393: LD_VAR 0 1
3397: ARRAY
3398: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_EXP 40
3408: PUSH
3409: LD_VAR 0 1
3413: ARRAY
3414: ST_TO_ADDR
// uc_side := side ;
3415: LD_ADDR_OWVAR 20
3419: PUSH
3420: LD_VAR 0 1
3424: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3425: LD_ADDR_VAR 0 4
3429: PUSH
3430: LD_EXP 42
3434: PUSH
3435: LD_VAR 0 3
3439: ARRAY
3440: PUSH
3441: LD_INT 1
3443: ARRAY
3444: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3445: LD_ADDR_VAR 0 5
3449: PUSH
3450: LD_EXP 42
3454: PUSH
3455: LD_VAR 0 3
3459: ARRAY
3460: PUSH
3461: LD_INT 2
3463: ARRAY
3464: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3465: LD_ADDR_VAR 0 6
3469: PUSH
3470: LD_EXP 42
3474: PUSH
3475: LD_VAR 0 3
3479: ARRAY
3480: PUSH
3481: LD_INT 3
3483: ARRAY
3484: ST_TO_ADDR
// if is_depot then
3485: LD_EXP 19
3489: IFFALSE 3622
// begin bc_type = b_depot ;
3491: LD_ADDR_OWVAR 42
3495: PUSH
3496: LD_INT 0
3498: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3499: LD_ADDR_VAR 0 10
3503: PUSH
3504: LD_VAR 0 4
3508: PPUSH
3509: LD_VAR 0 5
3513: PPUSH
3514: LD_VAR 0 6
3518: PPUSH
3519: CALL_OW 47
3523: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3524: LD_VAR 0 10
3528: PPUSH
3529: LD_STRING @
3531: PUSH
3532: LD_VAR 0 1
3536: STR
3537: PPUSH
3538: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3542: LD_VAR 0 10
3546: PPUSH
3547: CALL_OW 274
3551: PPUSH
3552: LD_INT 1
3554: PPUSH
3555: LD_EXP 24
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3568: LD_VAR 0 10
3572: PPUSH
3573: CALL_OW 274
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: LD_EXP 24
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3594: LD_VAR 0 10
3598: PPUSH
3599: CALL_OW 274
3603: PPUSH
3604: LD_INT 3
3606: PPUSH
3607: LD_EXP 24
3611: PUSH
3612: LD_INT 3
3614: ARRAY
3615: PPUSH
3616: CALL_OW 277
// end else
3620: GO 3766
// begin for i := 1 to 3 do
3622: LD_ADDR_VAR 0 7
3626: PUSH
3627: DOUBLE
3628: LD_INT 1
3630: DEC
3631: ST_TO_ADDR
3632: LD_INT 3
3634: PUSH
3635: FOR_TO
3636: IFFALSE 3764
// begin r := starting_resources [ i ] ;
3638: LD_ADDR_VAR 0 8
3642: PUSH
3643: LD_EXP 24
3647: PUSH
3648: LD_VAR 0 7
3652: ARRAY
3653: ST_TO_ADDR
// while r >= 10 do
3654: LD_VAR 0 8
3658: PUSH
3659: LD_INT 10
3661: GREATEREQUAL
3662: IFFALSE 3762
// if r > 50 then
3664: LD_VAR 0 8
3668: PUSH
3669: LD_INT 50
3671: GREATER
3672: IFFALSE 3718
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3674: LD_VAR 0 7
3678: PPUSH
3679: LD_INT 5
3681: PPUSH
3682: LD_VAR 0 4
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_INT 0
3697: PPUSH
3698: CALL_OW 60
// r := r - 50 ;
3702: LD_ADDR_VAR 0 8
3706: PUSH
3707: LD_VAR 0 8
3711: PUSH
3712: LD_INT 50
3714: MINUS
3715: ST_TO_ADDR
// end else
3716: GO 3760
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3718: LD_VAR 0 7
3722: PPUSH
3723: LD_VAR 0 8
3727: PUSH
3728: LD_INT 10
3730: DIV
3731: PPUSH
3732: LD_VAR 0 4
3736: PPUSH
3737: LD_VAR 0 5
3741: PPUSH
3742: LD_INT 4
3744: PPUSH
3745: LD_INT 0
3747: PPUSH
3748: CALL_OW 60
// r := 0 ;
3752: LD_ADDR_VAR 0 8
3756: PUSH
3757: LD_INT 0
3759: ST_TO_ADDR
// end ;
3760: GO 3654
// end ;
3762: GO 3635
3764: POP
3765: POP
// end ; for r in starting_crates do
3766: LD_ADDR_VAR 0 8
3770: PUSH
3771: LD_EXP 23
3775: PUSH
3776: FOR_IN
3777: IFFALSE 3809
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 5
3784: PPUSH
3785: LD_VAR 0 4
3789: PPUSH
3790: LD_VAR 0 5
3794: PPUSH
3795: LD_VAR 0 8
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 60
3807: GO 3776
3809: POP
3810: POP
// if def_morale_flags then
3811: LD_EXP 9
3815: IFFALSE 3954
// begin x := start_def [ pos ] [ 1 ] ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_EXP 44
3826: PUSH
3827: LD_VAR 0 3
3831: ARRAY
3832: PUSH
3833: LD_INT 1
3835: ARRAY
3836: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3837: LD_ADDR_VAR 0 5
3841: PUSH
3842: LD_EXP 44
3846: PUSH
3847: LD_VAR 0 3
3851: ARRAY
3852: PUSH
3853: LD_INT 2
3855: ARRAY
3856: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3857: LD_VAR 0 4
3861: PPUSH
3862: LD_VAR 0 5
3866: PPUSH
3867: LD_INT 12
3869: PPUSH
3870: LD_INT 2
3872: PPUSH
3873: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3877: LD_ADDR_EXP 49
3881: PUSH
3882: LD_EXP 49
3886: PUSH
3887: LD_VAR 0 1
3891: PPUSH
3892: LD_VAR 0 4
3896: PPUSH
3897: LD_VAR 0 5
3901: PPUSH
3902: LD_INT 1
3904: PUSH
3905: LD_INT 100
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: LD_INT 50
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 3
3924: PUSH
3925: LD_INT 20
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 20
3934: PUSH
3935: LD_INT 100
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PPUSH
3948: CALL_OW 418
3952: ADD
3953: ST_TO_ADDR
// end ; commander := true ;
3954: LD_ADDR_LOC 1
3958: PUSH
3959: LD_INT 1
3961: ST_TO_ADDR
// soldiers_created := 0 ;
3962: LD_ADDR_LOC 4
3966: PUSH
3967: LD_INT 0
3969: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3970: LD_ADDR_VAR 0 7
3974: PUSH
3975: DOUBLE
3976: LD_INT 1
3978: DEC
3979: ST_TO_ADDR
3980: LD_EXP 20
3984: PUSH
3985: FOR_TO
3986: IFFALSE 4139
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3988: LD_ADDR_VAR 0 4
3992: PUSH
3993: LD_EXP 43
3997: PUSH
3998: LD_VAR 0 3
4002: ARRAY
4003: PUSH
4004: LD_VAR 0 7
4008: ARRAY
4009: PUSH
4010: LD_INT 1
4012: ARRAY
4013: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4014: LD_ADDR_VAR 0 5
4018: PUSH
4019: LD_EXP 43
4023: PUSH
4024: LD_VAR 0 3
4028: ARRAY
4029: PUSH
4030: LD_VAR 0 7
4034: ARRAY
4035: PUSH
4036: LD_INT 2
4038: ARRAY
4039: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4040: LD_ADDR_VAR 0 6
4044: PUSH
4045: LD_EXP 43
4049: PUSH
4050: LD_VAR 0 3
4054: ARRAY
4055: PUSH
4056: LD_VAR 0 7
4060: ARRAY
4061: PUSH
4062: LD_INT 3
4064: ARRAY
4065: ST_TO_ADDR
// bc_type := b_breastwork ;
4066: LD_ADDR_OWVAR 42
4070: PUSH
4071: LD_INT 31
4073: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4074: LD_ADDR_VAR 0 9
4078: PUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_VAR 0 5
4088: PPUSH
4089: LD_VAR 0 6
4093: PPUSH
4094: CALL_OW 47
4098: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4099: LD_INT 1
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 0
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: LD_INT 0
4113: PPUSH
4114: LD_VAR 0 9
4118: PPUSH
4119: CALL 2816 0 6
// soldiers_created := soldiers_created + 1 ;
4123: LD_ADDR_LOC 4
4127: PUSH
4128: LD_LOC 4
4132: PUSH
4133: LD_INT 1
4135: PLUS
4136: ST_TO_ADDR
// end ;
4137: GO 3985
4139: POP
4140: POP
// x := start_def [ pos ] [ 1 ] ;
4141: LD_ADDR_VAR 0 4
4145: PUSH
4146: LD_EXP 44
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_INT 1
4159: ARRAY
4160: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4161: LD_ADDR_VAR 0 5
4165: PUSH
4166: LD_EXP 44
4170: PUSH
4171: LD_VAR 0 3
4175: ARRAY
4176: PUSH
4177: LD_INT 2
4179: ARRAY
4180: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4181: LD_LOC 8
4185: PUSH
4186: LD_EXP 20
4190: MINUS
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: LD_VAR 0 4
4199: PPUSH
4200: LD_VAR 0 5
4204: PPUSH
4205: LD_INT 5
4207: PPUSH
4208: LD_INT 0
4210: PPUSH
4211: CALL 2816 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4215: LD_LOC 5
4219: PPUSH
4220: LD_INT 2
4222: PPUSH
4223: LD_VAR 0 4
4227: PPUSH
4228: LD_VAR 0 5
4232: PPUSH
4233: LD_INT 5
4235: PPUSH
4236: LD_INT 0
4238: PPUSH
4239: CALL 2816 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4243: LD_LOC 7
4247: PPUSH
4248: LD_INT 3
4250: PPUSH
4251: LD_VAR 0 4
4255: PPUSH
4256: LD_VAR 0 5
4260: PPUSH
4261: LD_INT 5
4263: PPUSH
4264: LD_INT 0
4266: PPUSH
4267: CALL 2816 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4271: LD_LOC 6
4275: PPUSH
4276: LD_INT 4
4278: PPUSH
4279: LD_VAR 0 4
4283: PPUSH
4284: LD_VAR 0 5
4288: PPUSH
4289: LD_INT 5
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL 2816 0 6
// if def_siberite_detection then
4299: LD_EXP 10
4303: IFFALSE 4320
// SetTech ( tech_SibDet , side , state_researched ) ;
4305: LD_INT 20
4307: PPUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_INT 2
4315: PPUSH
4316: CALL_OW 322
// if def_siberite_bomb = 1 then
4320: LD_EXP 15
4324: PUSH
4325: LD_INT 1
4327: EQUAL
4328: IFFALSE 4362
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4330: LD_INT 25
4332: PPUSH
4333: LD_VAR 0 1
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4345: LD_INT 73
4347: PPUSH
4348: LD_VAR 0 1
4352: PPUSH
4353: LD_INT 1
4355: PPUSH
4356: CALL_OW 322
// end else
4360: GO 4392
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4362: LD_INT 25
4364: PPUSH
4365: LD_VAR 0 1
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4377: LD_INT 73
4379: PPUSH
4380: LD_VAR 0 1
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL_OW 322
// end ; global_defined := true ;
4392: LD_ADDR_LOC 3
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// end ;
4400: LD_VAR 0 2
4404: RET
// every 0 0$1 do
4405: GO 4407
4407: DISABLE
// if ( def_siberite_bomb > 1 ) then
4408: LD_EXP 15
4412: PUSH
4413: LD_INT 1
4415: GREATER
4416: IFFALSE 4431
// begin wait ( siberite_bomb_Delay ) ;
4418: LD_EXP 33
4422: PPUSH
4423: CALL_OW 67
// EnableSibFiss ;
4427: CALL 4432 0 0
// end ;
4431: END
// function EnableSibFiss ; var i ; begin
4432: LD_INT 0
4434: PPUSH
4435: PPUSH
// for i := 1 to 8 do
4436: LD_ADDR_VAR 0 2
4440: PUSH
4441: DOUBLE
4442: LD_INT 1
4444: DEC
4445: ST_TO_ADDR
4446: LD_INT 8
4448: PUSH
4449: FOR_TO
4450: IFFALSE 4496
// if Side_Positions [ i ] then
4452: LD_EXP 39
4456: PUSH
4457: LD_VAR 0 2
4461: ARRAY
4462: IFFALSE 4494
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4464: LD_INT 25
4466: PPUSH
4467: LD_VAR 0 2
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4479: LD_INT 73
4481: PPUSH
4482: LD_VAR 0 2
4486: PPUSH
4487: LD_INT 1
4489: PPUSH
4490: CALL_OW 322
// end ;
4494: GO 4449
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// function prepare_sides ; var i ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
// global_units := [ ] ;
4507: LD_ADDR_LOC 2
4511: PUSH
4512: EMPTY
4513: ST_TO_ADDR
// global_defined := false ;
4514: LD_ADDR_LOC 3
4518: PUSH
4519: LD_INT 0
4521: ST_TO_ADDR
// CountClassMembers ;
4522: CALL 4572 0 0
// for i := 1 to 8 do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 8
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4565
// if Side_Positions [ i ] then
4542: LD_EXP 39
4546: PUSH
4547: LD_VAR 0 2
4551: ARRAY
4552: IFFALSE 4563
// prepare_side ( i ) ;
4554: LD_VAR 0 2
4558: PPUSH
4559: CALL 3353 0 1
4563: GO 4539
4565: POP
4566: POP
// end ;
4567: LD_VAR 0 1
4571: RET
// function CountClassMembers ; var Mode ; begin
4572: LD_INT 0
4574: PPUSH
4575: PPUSH
// if No_Mechs then
4576: LD_EXP 17
4580: IFFALSE 4592
// Mode := 2 else
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: LD_INT 2
4589: ST_TO_ADDR
4590: GO 4600
// Mode := 1 ;
4592: LD_ADDR_VAR 0 2
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// neng := number_of_people ;
4600: LD_ADDR_LOC 5
4604: PUSH
4605: LD_EXP 21
4609: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4610: LD_ADDR_LOC 8
4614: PUSH
4615: LD_LOC 5
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: LD_INT 3
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_VAR 0 2
4634: ARRAY
4635: DIV
4636: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4637: LD_LOC 8
4641: PUSH
4642: LD_EXP 20
4646: LESS
4647: IFFALSE 4659
// nsol := number_of_breastworks ;
4649: LD_ADDR_LOC 8
4653: PUSH
4654: LD_EXP 20
4658: ST_TO_ADDR
// neng := neng - nsol ;
4659: LD_ADDR_LOC 5
4663: PUSH
4664: LD_LOC 5
4668: PUSH
4669: LD_LOC 8
4673: MINUS
4674: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4675: LD_ADDR_LOC 6
4679: PUSH
4680: LD_LOC 5
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: LD_INT 2
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_VAR 0 2
4699: ARRAY
4700: DIV
4701: ST_TO_ADDR
// if ( nsci < 1 ) then
4702: LD_LOC 6
4706: PUSH
4707: LD_INT 1
4709: LESS
4710: IFFALSE 4720
// nsci := 1 ;
4712: LD_ADDR_LOC 6
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// neng := neng - nsci ;
4720: LD_ADDR_LOC 5
4724: PUSH
4725: LD_LOC 5
4729: PUSH
4730: LD_LOC 6
4734: MINUS
4735: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4736: LD_ADDR_LOC 7
4740: PUSH
4741: LD_LOC 5
4745: PUSH
4746: LD_INT 2
4748: DIV
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_VAR 0 2
4761: ARRAY
4762: ST_TO_ADDR
// neng := neng - nmech ;
4763: LD_ADDR_LOC 5
4767: PUSH
4768: LD_LOC 5
4772: PUSH
4773: LD_LOC 7
4777: MINUS
4778: ST_TO_ADDR
// if ( neng < 1 ) then
4779: LD_LOC 5
4783: PUSH
4784: LD_INT 1
4786: LESS
4787: IFFALSE 4797
// neng := 1 ;
4789: LD_ADDR_LOC 5
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// end ;
4797: LD_VAR 0 1
4801: RET
// starting begin disable ( 98 ) ;
4802: LD_INT 98
4804: DISABLE_MARKED
// disable ( 99 ) ;
4805: LD_INT 99
4807: DISABLE_MARKED
// disable ( 400 ) ;
4808: LD_INT 400
4810: DISABLE_MARKED
// disable ( 401 ) ;
4811: LD_INT 401
4813: DISABLE_MARKED
// mp_selectmsg := true ;
4814: LD_ADDR_OWVAR 13
4818: PUSH
4819: LD_INT 1
4821: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4822: CALL 68 0 0
// init_map ;
4826: CALL 1357 0 0
// init_respawning ;
4830: CALL 12375 0 0
// set_shared_visions_and_alliances ;
4834: CALL 2528 0 0
// prepare_sides ;
4838: CALL 4503 0 0
// Init_Win_Condition ;
4842: CALL 13467 0 0
// ShowTimer ;
4846: CALL 7229 0 0
// music_nat := Side_Nations [ your_side ] ;
4850: LD_ADDR_OWVAR 71
4854: PUSH
4855: LD_EXP 40
4859: PUSH
4860: LD_OWVAR 2
4864: ARRAY
4865: ST_TO_ADDR
// if IAmSpec then
4866: CALL_OW 531
4870: IFFALSE 4906
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4872: LD_INT 0
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: LD_OWVAR 2
4882: PPUSH
4883: LD_INT 32767
4885: NEG
4886: PPUSH
4887: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
4891: LD_INT 104
4893: PPUSH
4894: LD_INT 69
4896: PPUSH
4897: CALL_OW 86
// enable ( 400 ) ;
4901: LD_INT 400
4903: ENABLE_MARKED
// end else
4904: GO 4960
// begin ResetFog ;
4906: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4910: LD_EXP 44
4914: PUSH
4915: LD_EXP 39
4919: PUSH
4920: LD_OWVAR 2
4924: ARRAY
4925: ARRAY
4926: PUSH
4927: LD_INT 1
4929: ARRAY
4930: PPUSH
4931: LD_EXP 44
4935: PUSH
4936: LD_EXP 39
4940: PUSH
4941: LD_OWVAR 2
4945: ARRAY
4946: ARRAY
4947: PUSH
4948: LD_INT 2
4950: ARRAY
4951: PPUSH
4952: CALL_OW 86
// Init_Win_Condition ;
4956: CALL 13467 0 0
// end ; AnimateTrees ( true ) ;
4960: LD_INT 1
4962: PPUSH
4963: CALL_OW 573
// InitApeman ;
4967: CALL 5745 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
4971: LD_ADDR_EXP 60
4975: PUSH
4976: LD_INT 7
4978: PUSH
4979: LD_INT 8
4981: PUSH
4982: LD_INT 9
4984: PUSH
4985: LD_INT 10
4987: PUSH
4988: LD_INT 11
4990: PUSH
4991: LD_INT 12
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: ST_TO_ADDR
// BeginBuildUp ;
5002: CALL 12869 0 0
// end ; end_of_file
5006: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5007: GO 5009
5009: DISABLE
// begin CreateCratesArea ( rand ( 1 , 5 ) , MZBaseArea , true ) ;
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 5
5015: PPUSH
5016: CALL_OW 12
5020: PPUSH
5021: LD_INT 14
5023: PPUSH
5024: LD_INT 1
5026: PPUSH
5027: CALL_OW 55
// enable ;
5031: ENABLE
// end ;
5032: END
// every 1 1$0 marked 10 do
5033: GO 5035
5035: DISABLE
// begin repeat wait ( shipments_density / 100 * rand ( 0 0$50 , 1 1$00 ) ) ;
5036: LD_EXP 25
5040: PUSH
5041: LD_INT 100
5043: DIVREAL
5044: PUSH
5045: LD_INT 1750
5047: PPUSH
5048: LD_INT 2100
5050: PPUSH
5051: CALL_OW 12
5055: MUL
5056: PPUSH
5057: CALL_OW 67
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
5061: LD_INT 15
5063: PPUSH
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 287
5071: PUSH
5072: LD_INT 30
5074: LESS
5075: IFFALSE 5098
// CreateCratesArea ( Rand ( 3 , 5 ) , MZSpecialArea , true ) ;
5077: LD_INT 3
5079: PPUSH
5080: LD_INT 5
5082: PPUSH
5083: CALL_OW 12
5087: PPUSH
5088: LD_INT 15
5090: PPUSH
5091: LD_INT 1
5093: PPUSH
5094: CALL_OW 55
// until tick >= 300 300$00 ;
5098: LD_OWVAR 1
5102: PUSH
5103: LD_INT 630000
5105: GREATEREQUAL
5106: IFFALSE 5036
// end ;
5108: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5109: GO 5111
5111: DISABLE
5112: LD_INT 0
5114: PPUSH
5115: PPUSH
// begin case tick of 1 .. 1 1$0 :
5116: LD_OWVAR 1
5120: PUSH
5121: LD_INT 1
5123: DOUBLE
5124: GREATEREQUAL
5125: IFFALSE 5133
5127: LD_INT 2100
5129: DOUBLE
5130: LESSEQUAL
5131: IFTRUE 5135
5133: GO 5163
5135: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5136: LD_EXP 25
5140: PUSH
5141: LD_INT 100
5143: DIVREAL
5144: PUSH
5145: LD_INT 525
5147: PPUSH
5148: LD_INT 700
5150: PPUSH
5151: CALL_OW 12
5155: MUL
5156: PPUSH
5157: CALL_OW 67
5161: GO 5465
5163: LD_INT 2100
5165: PUSH
5166: LD_INT 1
5168: PLUS
5169: DOUBLE
5170: GREATEREQUAL
5171: IFFALSE 5179
5173: LD_INT 10500
5175: DOUBLE
5176: LESSEQUAL
5177: IFTRUE 5181
5179: GO 5209
5181: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$40 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5182: LD_EXP 25
5186: PUSH
5187: LD_INT 100
5189: DIVREAL
5190: PUSH
5191: LD_INT 700
5193: PPUSH
5194: LD_INT 1400
5196: PPUSH
5197: CALL_OW 12
5201: MUL
5202: PPUSH
5203: CALL_OW 67
5207: GO 5465
5209: LD_INT 10500
5211: PUSH
5212: LD_INT 1
5214: PLUS
5215: DOUBLE
5216: GREATEREQUAL
5217: IFFALSE 5225
5219: LD_INT 21000
5221: DOUBLE
5222: LESSEQUAL
5223: IFTRUE 5227
5225: GO 5255
5227: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$40 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5228: LD_EXP 25
5232: PUSH
5233: LD_INT 100
5235: DIVREAL
5236: PUSH
5237: LD_INT 1400
5239: PPUSH
5240: LD_INT 1750
5242: PPUSH
5243: CALL_OW 12
5247: MUL
5248: PPUSH
5249: CALL_OW 67
5253: GO 5465
5255: LD_INT 21000
5257: PUSH
5258: LD_INT 1
5260: PLUS
5261: DOUBLE
5262: GREATEREQUAL
5263: IFFALSE 5271
5265: LD_INT 42000
5267: DOUBLE
5268: LESSEQUAL
5269: IFTRUE 5273
5271: GO 5301
5273: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5274: LD_EXP 25
5278: PUSH
5279: LD_INT 100
5281: DIVREAL
5282: PUSH
5283: LD_INT 1750
5285: PPUSH
5286: LD_INT 2100
5288: PPUSH
5289: CALL_OW 12
5293: MUL
5294: PPUSH
5295: CALL_OW 67
5299: GO 5465
5301: LD_INT 42000
5303: PUSH
5304: LD_INT 1
5306: PLUS
5307: DOUBLE
5308: GREATEREQUAL
5309: IFFALSE 5317
5311: LD_INT 63000
5313: DOUBLE
5314: LESSEQUAL
5315: IFTRUE 5319
5317: GO 5347
5319: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5320: LD_EXP 25
5324: PUSH
5325: LD_INT 100
5327: DIVREAL
5328: PUSH
5329: LD_INT 2100
5331: PPUSH
5332: LD_INT 2450
5334: PPUSH
5335: CALL_OW 12
5339: MUL
5340: PPUSH
5341: CALL_OW 67
5345: GO 5465
5347: LD_INT 63000
5349: PUSH
5350: LD_INT 1
5352: PLUS
5353: DOUBLE
5354: GREATEREQUAL
5355: IFFALSE 5363
5357: LD_INT 105000
5359: DOUBLE
5360: LESSEQUAL
5361: IFTRUE 5365
5363: GO 5393
5365: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5366: LD_EXP 25
5370: PUSH
5371: LD_INT 100
5373: DIVREAL
5374: PUSH
5375: LD_INT 2450
5377: PPUSH
5378: LD_INT 2800
5380: PPUSH
5381: CALL_OW 12
5385: MUL
5386: PPUSH
5387: CALL_OW 67
5391: GO 5465
5393: LD_INT 105000
5395: PUSH
5396: LD_INT 1
5398: PLUS
5399: DOUBLE
5400: GREATEREQUAL
5401: IFFALSE 5409
5403: LD_INT 630000
5405: DOUBLE
5406: LESSEQUAL
5407: IFTRUE 5411
5409: GO 5439
5411: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$30 ) ) ; else
5412: LD_EXP 25
5416: PUSH
5417: LD_INT 100
5419: DIVREAL
5420: PUSH
5421: LD_INT 2800
5423: PPUSH
5424: LD_INT 3150
5426: PPUSH
5427: CALL_OW 12
5431: MUL
5432: PPUSH
5433: CALL_OW 67
5437: GO 5465
5439: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5440: LD_EXP 25
5444: PUSH
5445: LD_INT 100
5447: DIVREAL
5448: PUSH
5449: LD_INT 3500
5451: PPUSH
5452: LD_INT 3850
5454: PPUSH
5455: CALL_OW 12
5459: MUL
5460: PPUSH
5461: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5465: LD_ADDR_VAR 0 2
5469: PUSH
5470: LD_INT 3
5472: PPUSH
5473: LD_INT 5
5475: PPUSH
5476: CALL_OW 12
5480: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5481: LD_ADDR_VAR 0 1
5485: PUSH
5486: LD_EXP 39
5490: PUSH
5491: LD_INT 0
5493: PUSH
5494: EMPTY
5495: LIST
5496: DIFF
5497: PUSH
5498: FOR_IN
5499: IFFALSE 5548
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 12 , true ) ;
5501: LD_VAR 0 2
5505: PPUSH
5506: LD_EXP 44
5510: PUSH
5511: LD_VAR 0 1
5515: ARRAY
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: LD_EXP 44
5525: PUSH
5526: LD_VAR 0 1
5530: ARRAY
5531: PUSH
5532: LD_INT 2
5534: ARRAY
5535: PPUSH
5536: LD_INT 12
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 56
5546: GO 5498
5548: POP
5549: POP
// enable ;
5550: ENABLE
// end ; end_of_file
5551: PPOPN 2
5553: END
// every 20 20$00 trigger apemanNumber do
5554: LD_EXP 51
5558: IFFALSE 5591
5560: GO 5562
5562: DISABLE
// begin enable ;
5563: ENABLE
// if apeLevel >= 8 then
5564: LD_EXP 56
5568: PUSH
5569: LD_INT 8
5571: GREATEREQUAL
5572: IFFALSE 5577
// disable else
5574: DISABLE
5575: GO 5591
// apeLevel := apeLevel + 1 ;
5577: LD_ADDR_EXP 56
5581: PUSH
5582: LD_EXP 56
5586: PUSH
5587: LD_INT 1
5589: PLUS
5590: ST_TO_ADDR
// end ;
5591: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5592: LD_EXP 51
5596: PUSH
5597: LD_EXP 52
5601: LESS
5602: IFFALSE 5742
5604: GO 5606
5606: DISABLE
5607: LD_INT 0
5609: PPUSH
5610: PPUSH
5611: PPUSH
5612: PPUSH
// begin enable ;
5613: ENABLE
// for i := 1 to apemanPos do
5614: LD_ADDR_VAR 0 1
5618: PUSH
5619: DOUBLE
5620: LD_INT 1
5622: DEC
5623: ST_TO_ADDR
5624: LD_EXP 54
5628: PUSH
5629: FOR_TO
5630: IFFALSE 5740
// begin if apemanPlayerCount [ i ] then
5632: LD_EXP 55
5636: PUSH
5637: LD_VAR 0 1
5641: ARRAY
5642: IFFALSE 5738
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5644: LD_EXP 55
5648: PUSH
5649: LD_VAR 0 1
5653: ARRAY
5654: PUSH
5655: LD_EXP 54
5659: PUSH
5660: LD_VAR 0 1
5664: ARRAY
5665: GREATER
5666: IFFALSE 5738
// begin ape := PrepareApeman ;
5668: LD_ADDR_VAR 0 2
5672: PUSH
5673: CALL 6253 0 0
5677: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5678: LD_VAR 0 2
5682: PPUSH
5683: LD_EXP 57
5687: PUSH
5688: LD_VAR 0 1
5692: ARRAY
5693: PPUSH
5694: LD_INT 0
5696: PPUSH
5697: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5701: LD_ADDR_EXP 54
5705: PUSH
5706: LD_EXP 54
5710: PPUSH
5711: LD_VAR 0 1
5715: PPUSH
5716: LD_EXP 54
5720: PUSH
5721: LD_VAR 0 1
5725: ARRAY
5726: PUSH
5727: LD_VAR 0 2
5731: UNION
5732: PPUSH
5733: CALL_OW 1
5737: ST_TO_ADDR
// end ; end ; end ;
5738: GO 5629
5740: POP
5741: POP
// end ;
5742: PPOPN 4
5744: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5745: LD_INT 0
5747: PPUSH
5748: PPUSH
5749: PPUSH
5750: PPUSH
5751: PPUSH
5752: PPUSH
5753: PPUSH
// playersAmount := 0 ;
5754: LD_ADDR_VAR 0 3
5758: PUSH
5759: LD_INT 0
5761: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5762: LD_ADDR_VAR 0 7
5766: PUSH
5767: LD_INT 3
5769: PUSH
5770: LD_INT 2
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: LD_INT 4
5778: PUSH
5779: LD_INT 6
5781: PUSH
5782: LD_INT 5
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5793: LD_ADDR_EXP 57
5797: PUSH
5798: LD_INT 0
5800: PUSH
5801: LD_INT 0
5803: PUSH
5804: LD_INT 0
5806: PUSH
5807: LD_INT 0
5809: PUSH
5810: LD_INT 0
5812: PUSH
5813: LD_INT 0
5815: PUSH
5816: LD_INT 0
5818: PUSH
5819: LD_INT 0
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: ST_TO_ADDR
// for j = 1 to Side_Positions do
5832: LD_ADDR_VAR 0 4
5836: PUSH
5837: DOUBLE
5838: LD_INT 1
5840: DEC
5841: ST_TO_ADDR
5842: LD_EXP 39
5846: PUSH
5847: FOR_TO
5848: IFFALSE 5915
// if Side_Positions [ j ] then
5850: LD_EXP 39
5854: PUSH
5855: LD_VAR 0 4
5859: ARRAY
5860: IFFALSE 5913
// begin playersAmount := playersAmount + 1 ;
5862: LD_ADDR_VAR 0 3
5866: PUSH
5867: LD_VAR 0 3
5871: PUSH
5872: LD_INT 1
5874: PLUS
5875: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5876: LD_ADDR_EXP 57
5880: PUSH
5881: LD_EXP 57
5885: PPUSH
5886: LD_VAR 0 4
5890: PPUSH
5891: LD_VAR 0 7
5895: PUSH
5896: LD_EXP 39
5900: PUSH
5901: LD_VAR 0 4
5905: ARRAY
5906: ARRAY
5907: PPUSH
5908: CALL_OW 1
5912: ST_TO_ADDR
// end ;
5913: GO 5847
5915: POP
5916: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5917: LD_ADDR_EXP 53
5921: PUSH
5922: LD_INT 3
5924: PUSH
5925: LD_EXP 27
5929: MUL
5930: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5931: LD_ADDR_EXP 51
5935: PUSH
5936: LD_VAR 0 3
5940: PUSH
5941: LD_EXP 53
5945: MUL
5946: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5947: LD_ADDR_EXP 52
5951: PUSH
5952: LD_EXP 51
5956: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5957: LD_ADDR_EXP 54
5961: PUSH
5962: LD_INT 0
5964: PUSH
5965: LD_INT 0
5967: PUSH
5968: LD_INT 0
5970: PUSH
5971: LD_INT 0
5973: PUSH
5974: LD_INT 0
5976: PUSH
5977: LD_INT 0
5979: PUSH
5980: LD_INT 0
5982: PUSH
5983: LD_INT 0
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5996: LD_ADDR_EXP 55
6000: PUSH
6001: LD_INT 0
6003: PUSH
6004: LD_INT 0
6006: PUSH
6007: LD_INT 0
6009: PUSH
6010: LD_INT 0
6012: PUSH
6013: LD_INT 0
6015: PUSH
6016: LD_INT 0
6018: PUSH
6019: LD_INT 0
6021: PUSH
6022: LD_INT 0
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: ST_TO_ADDR
// apeLevel := 1 ;
6035: LD_ADDR_EXP 56
6039: PUSH
6040: LD_INT 1
6042: ST_TO_ADDR
// if not apemanNumber then
6043: LD_EXP 51
6047: NOT
6048: IFFALSE 6052
// exit ;
6050: GO 6248
// for i := 1 to apemanPerPlayer do
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: DOUBLE
6058: LD_INT 1
6060: DEC
6061: ST_TO_ADDR
6062: LD_EXP 53
6066: PUSH
6067: FOR_TO
6068: IFFALSE 6246
// begin for j := 1 to Side_Positions do
6070: LD_ADDR_VAR 0 4
6074: PUSH
6075: DOUBLE
6076: LD_INT 1
6078: DEC
6079: ST_TO_ADDR
6080: LD_EXP 39
6084: PUSH
6085: FOR_TO
6086: IFFALSE 6242
// if Side_Positions [ j ] then
6088: LD_EXP 39
6092: PUSH
6093: LD_VAR 0 4
6097: ARRAY
6098: IFFALSE 6240
// begin pos := Side_Positions [ j ] ;
6100: LD_ADDR_VAR 0 6
6104: PUSH
6105: LD_EXP 39
6109: PUSH
6110: LD_VAR 0 4
6114: ARRAY
6115: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6116: LD_ADDR_EXP 55
6120: PUSH
6121: LD_EXP 55
6125: PPUSH
6126: LD_VAR 0 4
6130: PPUSH
6131: LD_EXP 55
6135: PUSH
6136: LD_VAR 0 4
6140: ARRAY
6141: PUSH
6142: LD_INT 1
6144: PLUS
6145: PPUSH
6146: CALL_OW 1
6150: ST_TO_ADDR
// ape := PrepareApeman ;
6151: LD_ADDR_VAR 0 5
6155: PUSH
6156: CALL 6253 0 0
6160: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6161: LD_ADDR_EXP 54
6165: PUSH
6166: LD_EXP 54
6170: PPUSH
6171: LD_VAR 0 4
6175: PPUSH
6176: LD_EXP 54
6180: PUSH
6181: LD_VAR 0 4
6185: ARRAY
6186: PPUSH
6187: LD_EXP 54
6191: PUSH
6192: LD_VAR 0 4
6196: ARRAY
6197: PUSH
6198: LD_INT 1
6200: PLUS
6201: PPUSH
6202: LD_VAR 0 5
6206: PPUSH
6207: CALL_OW 1
6211: PPUSH
6212: CALL_OW 1
6216: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6217: LD_VAR 0 5
6221: PPUSH
6222: LD_EXP 57
6226: PUSH
6227: LD_VAR 0 4
6231: ARRAY
6232: PPUSH
6233: LD_INT 0
6235: PPUSH
6236: CALL_OW 49
// end ;
6240: GO 6085
6242: POP
6243: POP
// end ;
6244: GO 6067
6246: POP
6247: POP
// end ;
6248: LD_VAR 0 1
6252: RET
// export function PrepareApeman ; var bonus ; begin
6253: LD_INT 0
6255: PPUSH
6256: PPUSH
// uc_side := 0 ;
6257: LD_ADDR_OWVAR 20
6261: PUSH
6262: LD_INT 0
6264: ST_TO_ADDR
// uc_nation := 0 ;
6265: LD_ADDR_OWVAR 21
6269: PUSH
6270: LD_INT 0
6272: ST_TO_ADDR
// InitHc ;
6273: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6277: LD_ADDR_VAR 0 2
6281: PUSH
6282: LD_INT 1
6284: NEG
6285: PUSH
6286: LD_INT 0
6288: PUSH
6289: LD_INT 1
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 25
6299: PUSH
6300: LD_INT 12
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PPUSH
6307: CALL_OW 69
6311: PUSH
6312: LD_INT 3
6314: MOD
6315: PUSH
6316: LD_INT 1
6318: PLUS
6319: ARRAY
6320: ST_TO_ADDR
// hc_class := class_apeman ;
6321: LD_ADDR_OWVAR 28
6325: PUSH
6326: LD_INT 12
6328: ST_TO_ADDR
// hc_gallery :=  ;
6329: LD_ADDR_OWVAR 33
6333: PUSH
6334: LD_STRING 
6336: ST_TO_ADDR
// hc_name :=  ;
6337: LD_ADDR_OWVAR 26
6341: PUSH
6342: LD_STRING 
6344: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6345: LD_ADDR_OWVAR 31
6349: PUSH
6350: LD_EXP 56
6354: PUSH
6355: LD_VAR 0 2
6359: PLUS
6360: PUSH
6361: LD_EXP 56
6365: PUSH
6366: LD_VAR 0 2
6370: PLUS
6371: PUSH
6372: LD_EXP 56
6376: PUSH
6377: LD_VAR 0 2
6381: PLUS
6382: PUSH
6383: LD_EXP 56
6387: PUSH
6388: LD_VAR 0 2
6392: PLUS
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6400: LD_ADDR_OWVAR 35
6404: PUSH
6405: LD_INT 10
6407: PUSH
6408: LD_VAR 0 2
6412: MUL
6413: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6414: LD_ADDR_OWVAR 29
6418: PUSH
6419: LD_INT 12
6421: PUSH
6422: LD_INT 12
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: ST_TO_ADDR
// result := CreateHuman ;
6429: LD_ADDR_VAR 0 1
6433: PUSH
6434: CALL_OW 44
6438: ST_TO_ADDR
// end ;
6439: LD_VAR 0 1
6443: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6444: LD_INT 0
6446: PPUSH
6447: PPUSH
6448: PPUSH
// if not ape then
6449: LD_VAR 0 1
6453: NOT
6454: IFFALSE 6458
// exit ;
6456: GO 6583
// side := GetSide ( ape ) ;
6458: LD_ADDR_VAR 0 3
6462: PUSH
6463: LD_VAR 0 1
6467: PPUSH
6468: CALL_OW 255
6472: ST_TO_ADDR
// if not side then
6473: LD_VAR 0 3
6477: NOT
6478: IFFALSE 6532
// begin for i = 1 to apemanPos do
6480: LD_ADDR_VAR 0 4
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_EXP 54
6494: PUSH
6495: FOR_TO
6496: IFFALSE 6530
// if ape in apemanPos [ i ] then
6498: LD_VAR 0 1
6502: PUSH
6503: LD_EXP 54
6507: PUSH
6508: LD_VAR 0 4
6512: ARRAY
6513: IN
6514: IFFALSE 6528
// begin side := i ;
6516: LD_ADDR_VAR 0 3
6520: PUSH
6521: LD_VAR 0 4
6525: ST_TO_ADDR
// break ;
6526: GO 6530
// end ;
6528: GO 6495
6530: POP
6531: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6532: LD_ADDR_EXP 54
6536: PUSH
6537: LD_EXP 54
6541: PPUSH
6542: LD_VAR 0 3
6546: PPUSH
6547: LD_EXP 54
6551: PUSH
6552: LD_VAR 0 3
6556: ARRAY
6557: PUSH
6558: LD_VAR 0 1
6562: DIFF
6563: PPUSH
6564: CALL_OW 1
6568: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6569: LD_ADDR_EXP 51
6573: PUSH
6574: LD_EXP 51
6578: PUSH
6579: LD_INT 1
6581: MINUS
6582: ST_TO_ADDR
// end ; end_of_file
6583: LD_VAR 0 2
6587: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6588: LD_VAR 0 1
6592: PPUSH
6593: CALL_OW 266
6597: PUSH
6598: LD_INT 0
6600: PUSH
6601: LD_INT 1
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: IN
6608: IFFALSE 6633
// SetBName ( b , @ & GetSide ( b ) ) ;
6610: LD_VAR 0 1
6614: PPUSH
6615: LD_STRING @
6617: PUSH
6618: LD_VAR 0 1
6622: PPUSH
6623: CALL_OW 255
6627: STR
6628: PPUSH
6629: CALL_OW 500
// end ;
6633: PPOPN 2
6635: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6636: LD_VAR 0 1
6640: PPUSH
6641: CALL_OW 266
6645: PUSH
6646: LD_INT 0
6648: PUSH
6649: LD_INT 1
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: IN
6656: IFFALSE 6681
// SetBName ( b , @ & GetSide ( b ) ) ;
6658: LD_VAR 0 1
6662: PPUSH
6663: LD_STRING @
6665: PUSH
6666: LD_VAR 0 1
6670: PPUSH
6671: CALL_OW 255
6675: STR
6676: PPUSH
6677: CALL_OW 500
// end ;
6681: PPOPN 3
6683: END
// on VehicleConstructed ( veh , fac ) do var side ;
6684: LD_INT 0
6686: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6687: LD_VAR 0 1
6691: PPUSH
6692: CALL_OW 263
6696: PUSH
6697: LD_INT 5
6699: EQUAL
6700: IFFALSE 6842
// begin side := GetSide ( veh ) ;
6702: LD_ADDR_VAR 0 3
6706: PUSH
6707: LD_VAR 0 1
6711: PPUSH
6712: CALL_OW 255
6716: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6717: LD_ADDR_EXP 54
6721: PUSH
6722: LD_EXP 54
6726: PPUSH
6727: LD_VAR 0 3
6731: PPUSH
6732: LD_EXP 54
6736: PUSH
6737: LD_VAR 0 3
6741: ARRAY
6742: PPUSH
6743: LD_INT 52
6745: PUSH
6746: EMPTY
6747: LIST
6748: PPUSH
6749: CALL_OW 72
6753: PUSH
6754: LD_INT 22
6756: PUSH
6757: LD_VAR 0 3
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 2
6768: PUSH
6769: LD_INT 33
6771: PUSH
6772: LD_INT 5
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 25
6781: PUSH
6782: LD_INT 12
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 25
6791: PUSH
6792: LD_INT 15
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 25
6801: PUSH
6802: LD_INT 16
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 25
6811: PUSH
6812: LD_INT 17
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: PPUSH
6831: CALL_OW 69
6835: UNION
6836: PPUSH
6837: CALL_OW 1
6841: ST_TO_ADDR
// end ; end ;
6842: PPOPN 3
6844: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6845: LD_INT 0
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6851: LD_VAR 0 1
6855: PPUSH
6856: CALL_OW 257
6860: PUSH
6861: LD_INT 12
6863: PUSH
6864: LD_INT 15
6866: PUSH
6867: LD_INT 17
6869: PUSH
6870: LD_INT 16
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: IN
6879: PUSH
6880: LD_VAR 0 1
6884: PPUSH
6885: CALL_OW 263
6889: PUSH
6890: LD_INT 5
6892: EQUAL
6893: OR
6894: IFFALSE 6905
// ApeKilled ( j ) ;
6896: LD_VAR 0 1
6900: PPUSH
6901: CALL 6444 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6905: LD_VAR 0 1
6909: PPUSH
6910: CALL_OW 266
6914: PUSH
6915: LD_INT 0
6917: PUSH
6918: LD_INT 1
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: IN
6925: IFFALSE 7007
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6927: LD_ADDR_VAR 0 4
6931: PUSH
6932: LD_EXP 39
6936: PUSH
6937: LD_VAR 0 1
6941: PPUSH
6942: CALL_OW 255
6946: ARRAY
6947: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6948: LD_ADDR_VAR 0 2
6952: PUSH
6953: LD_EXP 44
6957: PUSH
6958: LD_VAR 0 4
6962: ARRAY
6963: PUSH
6964: LD_INT 1
6966: ARRAY
6967: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6968: LD_ADDR_VAR 0 3
6972: PUSH
6973: LD_EXP 44
6977: PUSH
6978: LD_VAR 0 4
6982: ARRAY
6983: PUSH
6984: LD_INT 2
6986: ARRAY
6987: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6988: LD_VAR 0 2
6992: PPUSH
6993: LD_VAR 0 3
6997: PPUSH
6998: CALL_OW 420
7002: PPUSH
7003: CALL_OW 419
// end ; end ;
7007: PPOPN 5
7009: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7010: LD_VAR 0 1
7014: PPUSH
7015: LD_VAR 0 2
7019: PPUSH
7020: LD_VAR 0 3
7024: PPUSH
7025: LD_OWVAR 2
7029: PPUSH
7030: CALL 7412 0 4
7034: PPOPN 3
7036: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7037: LD_INT 0
7039: PPUSH
7040: PPUSH
// for un in battle_flags_id do
7041: LD_ADDR_VAR 0 2
7045: PUSH
7046: LD_EXP 49
7050: PUSH
7051: FOR_IN
7052: IFFALSE 7127
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7054: LD_VAR 0 2
7058: PPUSH
7059: LD_INT 1
7061: PUSH
7062: LD_LOC 9
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: LD_LOC 9
7078: PUSH
7079: LD_INT 2
7081: DIV
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 3
7089: PUSH
7090: LD_LOC 9
7094: PUSH
7095: LD_INT 5
7097: DIV
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_INT 20
7105: PUSH
7106: LD_LOC 9
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: PPUSH
7121: CALL_OW 423
7125: GO 7051
7127: POP
7128: POP
// end ;
7129: LD_VAR 0 1
7133: RET
// every 1 do var un ;
7134: GO 7136
7136: DISABLE
7137: LD_INT 0
7139: PPUSH
// begin if not def_morale_flags then
7140: LD_EXP 9
7144: NOT
7145: IFFALSE 7149
// exit ;
7147: GO 7226
// if not morale_decreasing_time then
7149: LD_EXP 26
7153: NOT
7154: IFFALSE 7158
// exit ;
7156: GO 7226
// strength = 100 ;
7158: LD_ADDR_LOC 9
7162: PUSH
7163: LD_INT 100
7165: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7166: LD_EXP 26
7170: PPUSH
7171: CALL_OW 67
// strength := strength - 1 ;
7175: LD_ADDR_LOC 9
7179: PUSH
7180: LD_LOC 9
7184: PUSH
7185: LD_INT 1
7187: MINUS
7188: ST_TO_ADDR
// Update_Flags ;
7189: CALL 7037 0 0
// until not strength ;
7193: LD_LOC 9
7197: NOT
7198: IFFALSE 7166
// for un in battle_flags_id do
7200: LD_ADDR_VAR 0 1
7204: PUSH
7205: LD_EXP 49
7209: PUSH
7210: FOR_IN
7211: IFFALSE 7224
// KillBattleFlag ( un ) ;
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 419
7222: GO 7210
7224: POP
7225: POP
// end ; end_of_file
7226: PPOPN 1
7228: END
// export ExtraStrings , WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7229: LD_INT 0
7231: PPUSH
7232: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7233: LD_ADDR_VAR 0 2
7237: PUSH
7238: LD_STRING #Multi1x1-Time
7240: PUSH
7241: LD_OWVAR 1
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: ST_TO_ADDR
// if WaitServerStrings then
7250: LD_EXP 59
7254: IFFALSE 7272
// AllStrings = AllStrings ^ WaitServerStrings ;
7256: LD_ADDR_VAR 0 2
7260: PUSH
7261: LD_VAR 0 2
7265: PUSH
7266: LD_EXP 59
7270: ADD
7271: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7272: LD_INT 0
7274: PUSH
7275: LD_EXP 33
7279: PUSH
7280: LD_OWVAR 1
7284: MINUS
7285: LESSEQUAL
7286: IFFALSE 7317
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: LD_VAR 0 2
7297: PUSH
7298: LD_STRING #allowedsibbomb
7300: PUSH
7301: LD_EXP 33
7305: PUSH
7306: LD_OWVAR 1
7310: MINUS
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: ADD
7316: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7317: LD_INT 0
7319: PUSH
7320: LD_EXP 62
7324: PUSH
7325: LD_OWVAR 1
7329: MINUS
7330: LESSEQUAL
7331: IFFALSE 7362
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7333: LD_ADDR_VAR 0 2
7337: PUSH
7338: LD_VAR 0 2
7342: PUSH
7343: LD_STRING #builduptime
7345: PUSH
7346: LD_EXP 62
7350: PUSH
7351: LD_OWVAR 1
7355: MINUS
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: ADD
7361: ST_TO_ADDR
// if ( ExtraStrings ) then
7362: LD_EXP 58
7366: IFFALSE 7388
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7368: LD_ADDR_VAR 0 2
7372: PUSH
7373: LD_VAR 0 2
7377: PUSH
7378: LD_STRING 
7380: ADD
7381: PUSH
7382: LD_EXP 58
7386: ADD
7387: ST_TO_ADDR
// Display_Strings := AllStrings ;
7388: LD_ADDR_OWVAR 47
7392: PUSH
7393: LD_VAR 0 2
7397: ST_TO_ADDR
// end ;
7398: LD_VAR 0 1
7402: RET
// every 0 0$1 do
7403: GO 7405
7405: DISABLE
// begin ShowTimer ;
7406: CALL 7229 0 0
// enable ;
7410: ENABLE
// end ; end_of_file
7411: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7412: LD_INT 0
7414: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7415: LD_VAR 0 1
7419: PPUSH
7420: CALL_OW 255
7424: PUSH
7425: LD_VAR 0 4
7429: EQUAL
7430: IFFALSE 7449
// begin SetAchievement ( ACH_RAD ) ;
7432: LD_STRING ACH_RAD
7434: PPUSH
7435: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7439: LD_STRING ACH_NL
7441: PPUSH
7442: LD_INT 1
7444: PPUSH
7445: CALL_OW 564
// end end ;
7449: LD_VAR 0 5
7453: RET
// export function SA_Win ( side ) ; begin
7454: LD_INT 0
7456: PPUSH
// case side of 1 :
7457: LD_VAR 0 1
7461: PUSH
7462: LD_INT 1
7464: DOUBLE
7465: EQUAL
7466: IFTRUE 7470
7468: GO 7483
7470: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7471: LD_STRING ACH_AH
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: CALL_OW 564
7481: GO 7646
7483: LD_INT 2
7485: DOUBLE
7486: EQUAL
7487: IFTRUE 7491
7489: GO 7504
7491: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7492: LD_STRING ACH_E
7494: PPUSH
7495: LD_INT 1
7497: PPUSH
7498: CALL_OW 564
7502: GO 7646
7504: LD_INT 3
7506: DOUBLE
7507: EQUAL
7508: IFTRUE 7512
7510: GO 7525
7512: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7513: LD_STRING ACH_OOL
7515: PPUSH
7516: LD_INT 1
7518: PPUSH
7519: CALL_OW 564
7523: GO 7646
7525: LD_INT 1
7527: PUSH
7528: LD_INT 2
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: DOUBLE
7535: EQUAL
7536: IFTRUE 7540
7538: GO 7565
7540: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7541: LD_STRING ACH_AH
7543: PPUSH
7544: LD_REAL  5.00000000000000E-0001
7547: PPUSH
7548: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7552: LD_STRING ACH_E
7554: PPUSH
7555: LD_REAL  5.00000000000000E-0001
7558: PPUSH
7559: CALL_OW 564
// end ; [ 2 , 3 ] :
7563: GO 7646
7565: LD_INT 2
7567: PUSH
7568: LD_INT 3
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: DOUBLE
7575: EQUAL
7576: IFTRUE 7580
7578: GO 7605
7580: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7581: LD_STRING ACH_OOL
7583: PPUSH
7584: LD_REAL  5.00000000000000E-0001
7587: PPUSH
7588: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7592: LD_STRING ACH_E
7594: PPUSH
7595: LD_REAL  5.00000000000000E-0001
7598: PPUSH
7599: CALL_OW 564
// end ; [ 3 , 1 ] :
7603: GO 7646
7605: LD_INT 3
7607: PUSH
7608: LD_INT 1
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: DOUBLE
7615: EQUAL
7616: IFTRUE 7620
7618: GO 7645
7620: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7621: LD_STRING ACH_AH
7623: PPUSH
7624: LD_REAL  5.00000000000000E-0001
7627: PPUSH
7628: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7632: LD_STRING ACH_OOL
7634: PPUSH
7635: LD_REAL  5.00000000000000E-0001
7638: PPUSH
7639: CALL_OW 564
// end ; end ;
7643: GO 7646
7645: POP
// end ; end_of_file
7646: LD_VAR 0 2
7650: RET
// export function SetMpTechs ( ) ; var side , i ; begin
7651: LD_INT 0
7653: PPUSH
7654: PPUSH
7655: PPUSH
// for side = 1 to 8 do
7656: LD_ADDR_VAR 0 2
7660: PUSH
7661: DOUBLE
7662: LD_INT 1
7664: DEC
7665: ST_TO_ADDR
7666: LD_INT 8
7668: PUSH
7669: FOR_TO
7670: IFFALSE 7791
// begin for i = 1 to 72 do
7672: LD_ADDR_VAR 0 3
7676: PUSH
7677: DOUBLE
7678: LD_INT 1
7680: DEC
7681: ST_TO_ADDR
7682: LD_INT 72
7684: PUSH
7685: FOR_TO
7686: IFFALSE 7717
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
7688: LD_VAR 0 3
7692: PPUSH
7693: LD_VAR 0 2
7697: PPUSH
7698: LD_INT 0
7700: PPUSH
7701: LD_VAR 0 3
7705: PPUSH
7706: CALL_OW 565
7710: PPUSH
7711: CALL_OW 322
7715: GO 7685
7717: POP
7718: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
7719: LD_INT 73
7721: PPUSH
7722: LD_VAR 0 2
7726: PPUSH
7727: LD_INT 0
7729: PPUSH
7730: LD_INT 25
7732: PPUSH
7733: CALL_OW 565
7737: PPUSH
7738: CALL_OW 322
// for i = 0 to 40 do
7742: LD_ADDR_VAR 0 3
7746: PUSH
7747: DOUBLE
7748: LD_INT 0
7750: DEC
7751: ST_TO_ADDR
7752: LD_INT 40
7754: PUSH
7755: FOR_TO
7756: IFFALSE 7787
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
7758: LD_VAR 0 3
7762: PPUSH
7763: LD_VAR 0 2
7767: PPUSH
7768: LD_INT 1
7770: PPUSH
7771: LD_VAR 0 3
7775: PPUSH
7776: CALL_OW 565
7780: PPUSH
7781: CALL_OW 324
7785: GO 7755
7787: POP
7788: POP
// end ;
7789: GO 7669
7791: POP
7792: POP
// end ;
7793: LD_VAR 0 1
7797: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
7798: LD_INT 0
7800: PPUSH
7801: PPUSH
7802: PPUSH
// for side = 1 to 8 do
7803: LD_ADDR_VAR 0 3
7807: PUSH
7808: DOUBLE
7809: LD_INT 1
7811: DEC
7812: ST_TO_ADDR
7813: LD_INT 8
7815: PUSH
7816: FOR_TO
7817: IFFALSE 11813
// begin for i = 1 to 73 do
7819: LD_ADDR_VAR 0 4
7823: PUSH
7824: DOUBLE
7825: LD_INT 1
7827: DEC
7828: ST_TO_ADDR
7829: LD_INT 73
7831: PUSH
7832: FOR_TO
7833: IFFALSE 7854
// SetTech ( i , side , state_disabled ) ;
7835: LD_VAR 0 4
7839: PPUSH
7840: LD_VAR 0 3
7844: PPUSH
7845: LD_INT 0
7847: PPUSH
7848: CALL_OW 322
7852: GO 7832
7854: POP
7855: POP
// for i = 0 to 40 do
7856: LD_ADDR_VAR 0 4
7860: PUSH
7861: DOUBLE
7862: LD_INT 0
7864: DEC
7865: ST_TO_ADDR
7866: LD_INT 40
7868: PUSH
7869: FOR_TO
7870: IFFALSE 7891
// SetRestrict ( i , side , false ) ;
7872: LD_VAR 0 4
7876: PPUSH
7877: LD_VAR 0 3
7881: PPUSH
7882: LD_INT 0
7884: PPUSH
7885: CALL_OW 324
7889: GO 7869
7891: POP
7892: POP
// case level of 1 :
7893: LD_VAR 0 1
7897: PUSH
7898: LD_INT 1
7900: DOUBLE
7901: EQUAL
7902: IFTRUE 7906
7904: GO 8059
7906: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
7907: LD_INT 35
7909: PPUSH
7910: LD_VAR 0 3
7914: PPUSH
7915: LD_INT 1
7917: PPUSH
7918: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
7922: LD_INT 45
7924: PPUSH
7925: LD_VAR 0 3
7929: PPUSH
7930: LD_INT 1
7932: PPUSH
7933: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
7937: LD_INT 46
7939: PPUSH
7940: LD_VAR 0 3
7944: PPUSH
7945: LD_INT 1
7947: PPUSH
7948: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
7952: LD_INT 47
7954: PPUSH
7955: LD_VAR 0 3
7959: PPUSH
7960: LD_INT 1
7962: PPUSH
7963: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
7967: LD_INT 0
7969: PPUSH
7970: LD_VAR 0 3
7974: PPUSH
7975: LD_INT 1
7977: PPUSH
7978: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
7982: LD_INT 2
7984: PPUSH
7985: LD_VAR 0 3
7989: PPUSH
7990: LD_INT 1
7992: PPUSH
7993: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
7997: LD_INT 4
7999: PPUSH
8000: LD_VAR 0 3
8004: PPUSH
8005: LD_INT 1
8007: PPUSH
8008: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8012: LD_INT 6
8014: PPUSH
8015: LD_VAR 0 3
8019: PPUSH
8020: LD_INT 1
8022: PPUSH
8023: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8027: LD_INT 29
8029: PPUSH
8030: LD_VAR 0 3
8034: PPUSH
8035: LD_INT 1
8037: PPUSH
8038: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8042: LD_INT 31
8044: PPUSH
8045: LD_VAR 0 3
8049: PPUSH
8050: LD_INT 1
8052: PPUSH
8053: CALL_OW 324
// end ; 2 :
8057: GO 11811
8059: LD_INT 2
8061: DOUBLE
8062: EQUAL
8063: IFTRUE 8067
8065: GO 8265
8067: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8068: LD_INT 35
8070: PPUSH
8071: LD_VAR 0 3
8075: PPUSH
8076: LD_INT 1
8078: PPUSH
8079: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8083: LD_INT 45
8085: PPUSH
8086: LD_VAR 0 3
8090: PPUSH
8091: LD_INT 1
8093: PPUSH
8094: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8098: LD_INT 46
8100: PPUSH
8101: LD_VAR 0 3
8105: PPUSH
8106: LD_INT 1
8108: PPUSH
8109: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8113: LD_INT 47
8115: PPUSH
8116: LD_VAR 0 3
8120: PPUSH
8121: LD_INT 1
8123: PPUSH
8124: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8128: LD_INT 1
8130: PPUSH
8131: LD_VAR 0 3
8135: PPUSH
8136: LD_INT 1
8138: PPUSH
8139: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8143: LD_INT 2
8145: PPUSH
8146: LD_VAR 0 3
8150: PPUSH
8151: LD_INT 1
8153: PPUSH
8154: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8158: LD_INT 11
8160: PPUSH
8161: LD_VAR 0 3
8165: PPUSH
8166: LD_INT 1
8168: PPUSH
8169: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8173: LD_INT 0
8175: PPUSH
8176: LD_VAR 0 3
8180: PPUSH
8181: LD_INT 1
8183: PPUSH
8184: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8188: LD_INT 2
8190: PPUSH
8191: LD_VAR 0 3
8195: PPUSH
8196: LD_INT 1
8198: PPUSH
8199: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8203: LD_INT 4
8205: PPUSH
8206: LD_VAR 0 3
8210: PPUSH
8211: LD_INT 1
8213: PPUSH
8214: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8218: LD_INT 6
8220: PPUSH
8221: LD_VAR 0 3
8225: PPUSH
8226: LD_INT 1
8228: PPUSH
8229: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8233: LD_INT 29
8235: PPUSH
8236: LD_VAR 0 3
8240: PPUSH
8241: LD_INT 1
8243: PPUSH
8244: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8248: LD_INT 31
8250: PPUSH
8251: LD_VAR 0 3
8255: PPUSH
8256: LD_INT 1
8258: PPUSH
8259: CALL_OW 324
// end ; 3 :
8263: GO 11811
8265: LD_INT 3
8267: DOUBLE
8268: EQUAL
8269: IFTRUE 8273
8271: GO 8726
8273: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8274: LD_INT 35
8276: PPUSH
8277: LD_VAR 0 3
8281: PPUSH
8282: LD_INT 1
8284: PPUSH
8285: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8289: LD_INT 45
8291: PPUSH
8292: LD_VAR 0 3
8296: PPUSH
8297: LD_INT 1
8299: PPUSH
8300: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8304: LD_INT 46
8306: PPUSH
8307: LD_VAR 0 3
8311: PPUSH
8312: LD_INT 1
8314: PPUSH
8315: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8319: LD_INT 47
8321: PPUSH
8322: LD_VAR 0 3
8326: PPUSH
8327: LD_INT 1
8329: PPUSH
8330: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8334: LD_INT 1
8336: PPUSH
8337: LD_VAR 0 3
8341: PPUSH
8342: LD_INT 1
8344: PPUSH
8345: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8349: LD_INT 2
8351: PPUSH
8352: LD_VAR 0 3
8356: PPUSH
8357: LD_INT 1
8359: PPUSH
8360: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8364: LD_INT 11
8366: PPUSH
8367: LD_VAR 0 3
8371: PPUSH
8372: LD_INT 1
8374: PPUSH
8375: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8379: LD_INT 48
8381: PPUSH
8382: LD_VAR 0 3
8386: PPUSH
8387: LD_INT 1
8389: PPUSH
8390: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8394: LD_INT 69
8396: PPUSH
8397: LD_VAR 0 3
8401: PPUSH
8402: LD_INT 1
8404: PPUSH
8405: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8409: LD_INT 39
8411: PPUSH
8412: LD_VAR 0 3
8416: PPUSH
8417: LD_INT 1
8419: PPUSH
8420: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8424: LD_INT 43
8426: PPUSH
8427: LD_VAR 0 3
8431: PPUSH
8432: LD_INT 1
8434: PPUSH
8435: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8439: LD_INT 51
8441: PPUSH
8442: LD_VAR 0 3
8446: PPUSH
8447: LD_INT 1
8449: PPUSH
8450: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
8454: LD_INT 6
8456: PPUSH
8457: LD_VAR 0 3
8461: PPUSH
8462: LD_INT 1
8464: PPUSH
8465: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8469: LD_INT 0
8471: PPUSH
8472: LD_VAR 0 3
8476: PPUSH
8477: LD_INT 1
8479: PPUSH
8480: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8484: LD_INT 2
8486: PPUSH
8487: LD_VAR 0 3
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
8499: LD_INT 3
8501: PPUSH
8502: LD_VAR 0 3
8506: PPUSH
8507: LD_INT 1
8509: PPUSH
8510: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8514: LD_INT 4
8516: PPUSH
8517: LD_VAR 0 3
8521: PPUSH
8522: LD_INT 1
8524: PPUSH
8525: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8529: LD_INT 6
8531: PPUSH
8532: LD_VAR 0 3
8536: PPUSH
8537: LD_INT 1
8539: PPUSH
8540: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
8544: LD_INT 7
8546: PPUSH
8547: LD_VAR 0 3
8551: PPUSH
8552: LD_INT 1
8554: PPUSH
8555: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
8559: LD_INT 8
8561: PPUSH
8562: LD_VAR 0 3
8566: PPUSH
8567: LD_INT 1
8569: PPUSH
8570: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
8574: LD_INT 10
8576: PPUSH
8577: LD_VAR 0 3
8581: PPUSH
8582: LD_INT 1
8584: PPUSH
8585: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
8589: LD_INT 15
8591: PPUSH
8592: LD_VAR 0 3
8596: PPUSH
8597: LD_INT 1
8599: PPUSH
8600: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
8604: LD_INT 16
8606: PPUSH
8607: LD_VAR 0 3
8611: PPUSH
8612: LD_INT 1
8614: PPUSH
8615: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
8619: LD_INT 17
8621: PPUSH
8622: LD_VAR 0 3
8626: PPUSH
8627: LD_INT 1
8629: PPUSH
8630: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
8634: LD_INT 20
8636: PPUSH
8637: LD_VAR 0 3
8641: PPUSH
8642: LD_INT 1
8644: PPUSH
8645: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
8649: LD_INT 26
8651: PPUSH
8652: LD_VAR 0 3
8656: PPUSH
8657: LD_INT 1
8659: PPUSH
8660: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
8664: LD_INT 27
8666: PPUSH
8667: LD_VAR 0 3
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8679: LD_INT 29
8681: PPUSH
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8694: LD_INT 31
8696: PPUSH
8697: LD_VAR 0 3
8701: PPUSH
8702: LD_INT 1
8704: PPUSH
8705: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
8709: LD_INT 32
8711: PPUSH
8712: LD_VAR 0 3
8716: PPUSH
8717: LD_INT 1
8719: PPUSH
8720: CALL_OW 324
// end ; 4 :
8724: GO 11811
8726: LD_INT 4
8728: DOUBLE
8729: EQUAL
8730: IFTRUE 8734
8732: GO 9682
8734: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8735: LD_INT 35
8737: PPUSH
8738: LD_VAR 0 3
8742: PPUSH
8743: LD_INT 1
8745: PPUSH
8746: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8750: LD_INT 45
8752: PPUSH
8753: LD_VAR 0 3
8757: PPUSH
8758: LD_INT 1
8760: PPUSH
8761: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8765: LD_INT 46
8767: PPUSH
8768: LD_VAR 0 3
8772: PPUSH
8773: LD_INT 1
8775: PPUSH
8776: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8780: LD_INT 47
8782: PPUSH
8783: LD_VAR 0 3
8787: PPUSH
8788: LD_INT 1
8790: PPUSH
8791: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8795: LD_INT 1
8797: PPUSH
8798: LD_VAR 0 3
8802: PPUSH
8803: LD_INT 1
8805: PPUSH
8806: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8810: LD_INT 2
8812: PPUSH
8813: LD_VAR 0 3
8817: PPUSH
8818: LD_INT 1
8820: PPUSH
8821: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8825: LD_INT 11
8827: PPUSH
8828: LD_VAR 0 3
8832: PPUSH
8833: LD_INT 1
8835: PPUSH
8836: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
8840: LD_INT 20
8842: PPUSH
8843: LD_VAR 0 3
8847: PPUSH
8848: LD_INT 1
8850: PPUSH
8851: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8855: LD_INT 48
8857: PPUSH
8858: LD_VAR 0 3
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
8870: LD_INT 49
8872: PPUSH
8873: LD_VAR 0 3
8877: PPUSH
8878: LD_INT 1
8880: PPUSH
8881: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8885: LD_INT 69
8887: PPUSH
8888: LD_VAR 0 3
8892: PPUSH
8893: LD_INT 1
8895: PPUSH
8896: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8900: LD_INT 39
8902: PPUSH
8903: LD_VAR 0 3
8907: PPUSH
8908: LD_INT 1
8910: PPUSH
8911: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
8915: LD_INT 34
8917: PPUSH
8918: LD_VAR 0 3
8922: PPUSH
8923: LD_INT 1
8925: PPUSH
8926: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
8930: LD_INT 42
8932: PPUSH
8933: LD_VAR 0 3
8937: PPUSH
8938: LD_INT 1
8940: PPUSH
8941: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
8945: LD_INT 44
8947: PPUSH
8948: LD_VAR 0 3
8952: PPUSH
8953: LD_INT 1
8955: PPUSH
8956: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
8960: LD_INT 41
8962: PPUSH
8963: LD_VAR 0 3
8967: PPUSH
8968: LD_INT 1
8970: PPUSH
8971: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8975: LD_INT 43
8977: PPUSH
8978: LD_VAR 0 3
8982: PPUSH
8983: LD_INT 1
8985: PPUSH
8986: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
8990: LD_INT 70
8992: PPUSH
8993: LD_VAR 0 3
8997: PPUSH
8998: LD_INT 1
9000: PPUSH
9001: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9005: LD_INT 51
9007: PPUSH
9008: LD_VAR 0 3
9012: PPUSH
9013: LD_INT 1
9015: PPUSH
9016: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9020: LD_INT 52
9022: PPUSH
9023: LD_VAR 0 3
9027: PPUSH
9028: LD_INT 1
9030: PPUSH
9031: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9035: LD_INT 6
9037: PPUSH
9038: LD_VAR 0 3
9042: PPUSH
9043: LD_INT 1
9045: PPUSH
9046: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9050: LD_INT 15
9052: PPUSH
9053: LD_VAR 0 3
9057: PPUSH
9058: LD_INT 1
9060: PPUSH
9061: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9065: LD_INT 7
9067: PPUSH
9068: LD_VAR 0 3
9072: PPUSH
9073: LD_INT 1
9075: PPUSH
9076: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9080: LD_INT 12
9082: PPUSH
9083: LD_VAR 0 3
9087: PPUSH
9088: LD_INT 1
9090: PPUSH
9091: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9095: LD_INT 18
9097: PPUSH
9098: LD_VAR 0 3
9102: PPUSH
9103: LD_INT 1
9105: PPUSH
9106: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9110: LD_INT 60
9112: PPUSH
9113: LD_VAR 0 3
9117: PPUSH
9118: LD_INT 1
9120: PPUSH
9121: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9125: LD_INT 9
9127: PPUSH
9128: LD_VAR 0 3
9132: PPUSH
9133: LD_INT 1
9135: PPUSH
9136: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9140: LD_INT 30
9142: PPUSH
9143: LD_VAR 0 3
9147: PPUSH
9148: LD_INT 1
9150: PPUSH
9151: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9155: LD_INT 37
9157: PPUSH
9158: LD_VAR 0 3
9162: PPUSH
9163: LD_INT 1
9165: PPUSH
9166: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9170: LD_INT 5
9172: PPUSH
9173: LD_VAR 0 3
9177: PPUSH
9178: LD_INT 1
9180: PPUSH
9181: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9185: LD_INT 66
9187: PPUSH
9188: LD_VAR 0 3
9192: PPUSH
9193: LD_INT 1
9195: PPUSH
9196: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9200: LD_INT 21
9202: PPUSH
9203: LD_VAR 0 3
9207: PPUSH
9208: LD_INT 1
9210: PPUSH
9211: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9215: LD_INT 22
9217: PPUSH
9218: LD_VAR 0 3
9222: PPUSH
9223: LD_INT 1
9225: PPUSH
9226: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9230: LD_INT 54
9232: PPUSH
9233: LD_VAR 0 3
9237: PPUSH
9238: LD_INT 1
9240: PPUSH
9241: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9245: LD_INT 0
9247: PPUSH
9248: LD_VAR 0 3
9252: PPUSH
9253: LD_INT 1
9255: PPUSH
9256: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9260: LD_INT 1
9262: PPUSH
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_INT 1
9270: PPUSH
9271: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9275: LD_INT 2
9277: PPUSH
9278: LD_VAR 0 3
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9290: LD_INT 3
9292: PPUSH
9293: LD_VAR 0 3
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9305: LD_INT 4
9307: PPUSH
9308: LD_VAR 0 3
9312: PPUSH
9313: LD_INT 1
9315: PPUSH
9316: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
9320: LD_INT 5
9322: PPUSH
9323: LD_VAR 0 3
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9335: LD_INT 6
9337: PPUSH
9338: LD_VAR 0 3
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9350: LD_INT 7
9352: PPUSH
9353: LD_VAR 0 3
9357: PPUSH
9358: LD_INT 1
9360: PPUSH
9361: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9365: LD_INT 8
9367: PPUSH
9368: LD_VAR 0 3
9372: PPUSH
9373: LD_INT 1
9375: PPUSH
9376: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9380: LD_INT 10
9382: PPUSH
9383: LD_VAR 0 3
9387: PPUSH
9388: LD_INT 1
9390: PPUSH
9391: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
9395: LD_INT 11
9397: PPUSH
9398: LD_VAR 0 3
9402: PPUSH
9403: LD_INT 1
9405: PPUSH
9406: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
9410: LD_INT 12
9412: PPUSH
9413: LD_VAR 0 3
9417: PPUSH
9418: LD_INT 1
9420: PPUSH
9421: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
9425: LD_INT 13
9427: PPUSH
9428: LD_VAR 0 3
9432: PPUSH
9433: LD_INT 1
9435: PPUSH
9436: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
9440: LD_INT 14
9442: PPUSH
9443: LD_VAR 0 3
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9455: LD_INT 15
9457: PPUSH
9458: LD_VAR 0 3
9462: PPUSH
9463: LD_INT 1
9465: PPUSH
9466: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9470: LD_INT 16
9472: PPUSH
9473: LD_VAR 0 3
9477: PPUSH
9478: LD_INT 1
9480: PPUSH
9481: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9485: LD_INT 17
9487: PPUSH
9488: LD_VAR 0 3
9492: PPUSH
9493: LD_INT 1
9495: PPUSH
9496: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
9500: LD_INT 19
9502: PPUSH
9503: LD_VAR 0 3
9507: PPUSH
9508: LD_INT 1
9510: PPUSH
9511: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9515: LD_INT 20
9517: PPUSH
9518: LD_VAR 0 3
9522: PPUSH
9523: LD_INT 1
9525: PPUSH
9526: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
9530: LD_INT 21
9532: PPUSH
9533: LD_VAR 0 3
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
9545: LD_INT 23
9547: PPUSH
9548: LD_VAR 0 3
9552: PPUSH
9553: LD_INT 1
9555: PPUSH
9556: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9560: LD_INT 26
9562: PPUSH
9563: LD_VAR 0 3
9567: PPUSH
9568: LD_INT 1
9570: PPUSH
9571: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9575: LD_INT 27
9577: PPUSH
9578: LD_VAR 0 3
9582: PPUSH
9583: LD_INT 1
9585: PPUSH
9586: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
9590: LD_INT 28
9592: PPUSH
9593: LD_VAR 0 3
9597: PPUSH
9598: LD_INT 1
9600: PPUSH
9601: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9605: LD_INT 29
9607: PPUSH
9608: LD_VAR 0 3
9612: PPUSH
9613: LD_INT 1
9615: PPUSH
9616: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
9620: LD_INT 30
9622: PPUSH
9623: LD_VAR 0 3
9627: PPUSH
9628: LD_INT 1
9630: PPUSH
9631: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9635: LD_INT 31
9637: PPUSH
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 1
9645: PPUSH
9646: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9650: LD_INT 32
9652: PPUSH
9653: LD_VAR 0 3
9657: PPUSH
9658: LD_INT 1
9660: PPUSH
9661: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
9665: LD_INT 36
9667: PPUSH
9668: LD_VAR 0 3
9672: PPUSH
9673: LD_INT 1
9675: PPUSH
9676: CALL_OW 324
// end ; 5 :
9680: GO 11811
9682: LD_INT 5
9684: DOUBLE
9685: EQUAL
9686: IFTRUE 9690
9688: GO 10803
9690: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9691: LD_INT 35
9693: PPUSH
9694: LD_VAR 0 3
9698: PPUSH
9699: LD_INT 1
9701: PPUSH
9702: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9706: LD_INT 45
9708: PPUSH
9709: LD_VAR 0 3
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9721: LD_INT 46
9723: PPUSH
9724: LD_VAR 0 3
9728: PPUSH
9729: LD_INT 1
9731: PPUSH
9732: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9736: LD_INT 47
9738: PPUSH
9739: LD_VAR 0 3
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9751: LD_INT 1
9753: PPUSH
9754: LD_VAR 0 3
9758: PPUSH
9759: LD_INT 1
9761: PPUSH
9762: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9766: LD_INT 2
9768: PPUSH
9769: LD_VAR 0 3
9773: PPUSH
9774: LD_INT 1
9776: PPUSH
9777: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9781: LD_INT 11
9783: PPUSH
9784: LD_VAR 0 3
9788: PPUSH
9789: LD_INT 1
9791: PPUSH
9792: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9796: LD_INT 20
9798: PPUSH
9799: LD_VAR 0 3
9803: PPUSH
9804: LD_INT 1
9806: PPUSH
9807: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9811: LD_INT 48
9813: PPUSH
9814: LD_VAR 0 3
9818: PPUSH
9819: LD_INT 1
9821: PPUSH
9822: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9826: LD_INT 49
9828: PPUSH
9829: LD_VAR 0 3
9833: PPUSH
9834: LD_INT 1
9836: PPUSH
9837: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9841: LD_INT 69
9843: PPUSH
9844: LD_VAR 0 3
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9856: LD_INT 39
9858: PPUSH
9859: LD_VAR 0 3
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9871: LD_INT 34
9873: PPUSH
9874: LD_VAR 0 3
9878: PPUSH
9879: LD_INT 1
9881: PPUSH
9882: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9886: LD_INT 42
9888: PPUSH
9889: LD_VAR 0 3
9893: PPUSH
9894: LD_INT 1
9896: PPUSH
9897: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9901: LD_INT 44
9903: PPUSH
9904: LD_VAR 0 3
9908: PPUSH
9909: LD_INT 1
9911: PPUSH
9912: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9916: LD_INT 41
9918: PPUSH
9919: LD_VAR 0 3
9923: PPUSH
9924: LD_INT 1
9926: PPUSH
9927: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
9931: LD_INT 40
9933: PPUSH
9934: LD_VAR 0 3
9938: PPUSH
9939: LD_INT 1
9941: PPUSH
9942: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9946: LD_INT 43
9948: PPUSH
9949: LD_VAR 0 3
9953: PPUSH
9954: LD_INT 1
9956: PPUSH
9957: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9961: LD_INT 70
9963: PPUSH
9964: LD_VAR 0 3
9968: PPUSH
9969: LD_INT 1
9971: PPUSH
9972: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9976: LD_INT 51
9978: PPUSH
9979: LD_VAR 0 3
9983: PPUSH
9984: LD_INT 1
9986: PPUSH
9987: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9991: LD_INT 52
9993: PPUSH
9994: LD_VAR 0 3
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10006: LD_INT 6
10008: PPUSH
10009: LD_VAR 0 3
10013: PPUSH
10014: LD_INT 1
10016: PPUSH
10017: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10021: LD_INT 15
10023: PPUSH
10024: LD_VAR 0 3
10028: PPUSH
10029: LD_INT 1
10031: PPUSH
10032: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10036: LD_INT 7
10038: PPUSH
10039: LD_VAR 0 3
10043: PPUSH
10044: LD_INT 1
10046: PPUSH
10047: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10051: LD_INT 12
10053: PPUSH
10054: LD_VAR 0 3
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10066: LD_INT 17
10068: PPUSH
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 1
10076: PPUSH
10077: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10081: LD_INT 18
10083: PPUSH
10084: LD_VAR 0 3
10088: PPUSH
10089: LD_INT 1
10091: PPUSH
10092: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10096: LD_INT 60
10098: PPUSH
10099: LD_VAR 0 3
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10111: LD_INT 32
10113: PPUSH
10114: LD_VAR 0 3
10118: PPUSH
10119: LD_INT 1
10121: PPUSH
10122: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10126: LD_INT 9
10128: PPUSH
10129: LD_VAR 0 3
10133: PPUSH
10134: LD_INT 1
10136: PPUSH
10137: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10141: LD_INT 57
10143: PPUSH
10144: LD_VAR 0 3
10148: PPUSH
10149: LD_INT 1
10151: PPUSH
10152: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10156: LD_INT 30
10158: PPUSH
10159: LD_VAR 0 3
10163: PPUSH
10164: LD_INT 1
10166: PPUSH
10167: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10171: LD_INT 37
10173: PPUSH
10174: LD_VAR 0 3
10178: PPUSH
10179: LD_INT 1
10181: PPUSH
10182: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10186: LD_INT 63
10188: PPUSH
10189: LD_VAR 0 3
10193: PPUSH
10194: LD_INT 1
10196: PPUSH
10197: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10201: LD_INT 3
10203: PPUSH
10204: LD_VAR 0 3
10208: PPUSH
10209: LD_INT 1
10211: PPUSH
10212: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10216: LD_INT 4
10218: PPUSH
10219: LD_VAR 0 3
10223: PPUSH
10224: LD_INT 1
10226: PPUSH
10227: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10231: LD_INT 5
10233: PPUSH
10234: LD_VAR 0 3
10238: PPUSH
10239: LD_INT 1
10241: PPUSH
10242: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10246: LD_INT 66
10248: PPUSH
10249: LD_VAR 0 3
10253: PPUSH
10254: LD_INT 1
10256: PPUSH
10257: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10261: LD_INT 21
10263: PPUSH
10264: LD_VAR 0 3
10268: PPUSH
10269: LD_INT 1
10271: PPUSH
10272: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10276: LD_INT 22
10278: PPUSH
10279: LD_VAR 0 3
10283: PPUSH
10284: LD_INT 1
10286: PPUSH
10287: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10291: LD_INT 19
10293: PPUSH
10294: LD_VAR 0 3
10298: PPUSH
10299: LD_INT 1
10301: PPUSH
10302: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10306: LD_INT 54
10308: PPUSH
10309: LD_VAR 0 3
10313: PPUSH
10314: LD_INT 1
10316: PPUSH
10317: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
10321: LD_INT 55
10323: PPUSH
10324: LD_VAR 0 3
10328: PPUSH
10329: LD_INT 1
10331: PPUSH
10332: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10336: LD_INT 0
10338: PPUSH
10339: LD_VAR 0 3
10343: PPUSH
10344: LD_INT 1
10346: PPUSH
10347: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10351: LD_INT 1
10353: PPUSH
10354: LD_VAR 0 3
10358: PPUSH
10359: LD_INT 1
10361: PPUSH
10362: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10366: LD_INT 2
10368: PPUSH
10369: LD_VAR 0 3
10373: PPUSH
10374: LD_INT 1
10376: PPUSH
10377: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10381: LD_INT 3
10383: PPUSH
10384: LD_VAR 0 3
10388: PPUSH
10389: LD_INT 1
10391: PPUSH
10392: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10396: LD_INT 4
10398: PPUSH
10399: LD_VAR 0 3
10403: PPUSH
10404: LD_INT 1
10406: PPUSH
10407: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10411: LD_INT 5
10413: PPUSH
10414: LD_VAR 0 3
10418: PPUSH
10419: LD_INT 1
10421: PPUSH
10422: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10426: LD_INT 6
10428: PPUSH
10429: LD_VAR 0 3
10433: PPUSH
10434: LD_INT 1
10436: PPUSH
10437: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10441: LD_INT 7
10443: PPUSH
10444: LD_VAR 0 3
10448: PPUSH
10449: LD_INT 1
10451: PPUSH
10452: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10456: LD_INT 8
10458: PPUSH
10459: LD_VAR 0 3
10463: PPUSH
10464: LD_INT 1
10466: PPUSH
10467: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10471: LD_INT 10
10473: PPUSH
10474: LD_VAR 0 3
10478: PPUSH
10479: LD_INT 1
10481: PPUSH
10482: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10486: LD_INT 11
10488: PPUSH
10489: LD_VAR 0 3
10493: PPUSH
10494: LD_INT 1
10496: PPUSH
10497: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10501: LD_INT 12
10503: PPUSH
10504: LD_VAR 0 3
10508: PPUSH
10509: LD_INT 1
10511: PPUSH
10512: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10516: LD_INT 13
10518: PPUSH
10519: LD_VAR 0 3
10523: PPUSH
10524: LD_INT 1
10526: PPUSH
10527: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10531: LD_INT 14
10533: PPUSH
10534: LD_VAR 0 3
10538: PPUSH
10539: LD_INT 1
10541: PPUSH
10542: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10546: LD_INT 15
10548: PPUSH
10549: LD_VAR 0 3
10553: PPUSH
10554: LD_INT 1
10556: PPUSH
10557: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10561: LD_INT 16
10563: PPUSH
10564: LD_VAR 0 3
10568: PPUSH
10569: LD_INT 1
10571: PPUSH
10572: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10576: LD_INT 17
10578: PPUSH
10579: LD_VAR 0 3
10583: PPUSH
10584: LD_INT 1
10586: PPUSH
10587: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
10591: LD_INT 18
10593: PPUSH
10594: LD_VAR 0 3
10598: PPUSH
10599: LD_INT 1
10601: PPUSH
10602: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10606: LD_INT 19
10608: PPUSH
10609: LD_VAR 0 3
10613: PPUSH
10614: LD_INT 1
10616: PPUSH
10617: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10621: LD_INT 20
10623: PPUSH
10624: LD_VAR 0 3
10628: PPUSH
10629: LD_INT 1
10631: PPUSH
10632: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10636: LD_INT 21
10638: PPUSH
10639: LD_VAR 0 3
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10651: LD_INT 23
10653: PPUSH
10654: LD_VAR 0 3
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10666: LD_INT 26
10668: PPUSH
10669: LD_VAR 0 3
10673: PPUSH
10674: LD_INT 1
10676: PPUSH
10677: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10681: LD_INT 27
10683: PPUSH
10684: LD_VAR 0 3
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10696: LD_INT 28
10698: PPUSH
10699: LD_VAR 0 3
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10711: LD_INT 29
10713: PPUSH
10714: LD_VAR 0 3
10718: PPUSH
10719: LD_INT 1
10721: PPUSH
10722: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10726: LD_INT 30
10728: PPUSH
10729: LD_VAR 0 3
10733: PPUSH
10734: LD_INT 1
10736: PPUSH
10737: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10741: LD_INT 31
10743: PPUSH
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 1
10751: PPUSH
10752: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10756: LD_INT 32
10758: PPUSH
10759: LD_VAR 0 3
10763: PPUSH
10764: LD_INT 1
10766: PPUSH
10767: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
10771: LD_INT 33
10773: PPUSH
10774: LD_VAR 0 3
10778: PPUSH
10779: LD_INT 1
10781: PPUSH
10782: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10786: LD_INT 36
10788: PPUSH
10789: LD_VAR 0 3
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 324
// end ; 6 :
10801: GO 11811
10803: LD_INT 6
10805: DOUBLE
10806: EQUAL
10807: IFTRUE 10811
10809: GO 11736
10811: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10812: LD_INT 35
10814: PPUSH
10815: LD_VAR 0 3
10819: PPUSH
10820: LD_INT 1
10822: PPUSH
10823: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10827: LD_INT 45
10829: PPUSH
10830: LD_VAR 0 3
10834: PPUSH
10835: LD_INT 1
10837: PPUSH
10838: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10842: LD_INT 46
10844: PPUSH
10845: LD_VAR 0 3
10849: PPUSH
10850: LD_INT 1
10852: PPUSH
10853: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10857: LD_INT 47
10859: PPUSH
10860: LD_VAR 0 3
10864: PPUSH
10865: LD_INT 1
10867: PPUSH
10868: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10872: LD_INT 1
10874: PPUSH
10875: LD_VAR 0 3
10879: PPUSH
10880: LD_INT 1
10882: PPUSH
10883: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10887: LD_INT 2
10889: PPUSH
10890: LD_VAR 0 3
10894: PPUSH
10895: LD_INT 1
10897: PPUSH
10898: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10902: LD_INT 11
10904: PPUSH
10905: LD_VAR 0 3
10909: PPUSH
10910: LD_INT 1
10912: PPUSH
10913: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10917: LD_INT 20
10919: PPUSH
10920: LD_VAR 0 3
10924: PPUSH
10925: LD_INT 1
10927: PPUSH
10928: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10932: LD_INT 48
10934: PPUSH
10935: LD_VAR 0 3
10939: PPUSH
10940: LD_INT 1
10942: PPUSH
10943: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10947: LD_INT 49
10949: PPUSH
10950: LD_VAR 0 3
10954: PPUSH
10955: LD_INT 1
10957: PPUSH
10958: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
10962: LD_INT 50
10964: PPUSH
10965: LD_VAR 0 3
10969: PPUSH
10970: LD_INT 1
10972: PPUSH
10973: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10977: LD_INT 69
10979: PPUSH
10980: LD_VAR 0 3
10984: PPUSH
10985: LD_INT 1
10987: PPUSH
10988: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10992: LD_INT 39
10994: PPUSH
10995: LD_VAR 0 3
10999: PPUSH
11000: LD_INT 1
11002: PPUSH
11003: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11007: LD_INT 34
11009: PPUSH
11010: LD_VAR 0 3
11014: PPUSH
11015: LD_INT 1
11017: PPUSH
11018: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11022: LD_INT 42
11024: PPUSH
11025: LD_VAR 0 3
11029: PPUSH
11030: LD_INT 1
11032: PPUSH
11033: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11037: LD_INT 44
11039: PPUSH
11040: LD_VAR 0 3
11044: PPUSH
11045: LD_INT 1
11047: PPUSH
11048: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11052: LD_INT 41
11054: PPUSH
11055: LD_VAR 0 3
11059: PPUSH
11060: LD_INT 1
11062: PPUSH
11063: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11067: LD_INT 13
11069: PPUSH
11070: LD_VAR 0 3
11074: PPUSH
11075: LD_INT 1
11077: PPUSH
11078: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11082: LD_INT 40
11084: PPUSH
11085: LD_VAR 0 3
11089: PPUSH
11090: LD_INT 1
11092: PPUSH
11093: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11097: LD_INT 43
11099: PPUSH
11100: LD_VAR 0 3
11104: PPUSH
11105: LD_INT 1
11107: PPUSH
11108: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11112: LD_INT 70
11114: PPUSH
11115: LD_VAR 0 3
11119: PPUSH
11120: LD_INT 1
11122: PPUSH
11123: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11127: LD_INT 23
11129: PPUSH
11130: LD_VAR 0 3
11134: PPUSH
11135: LD_INT 1
11137: PPUSH
11138: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11142: LD_INT 51
11144: PPUSH
11145: LD_VAR 0 3
11149: PPUSH
11150: LD_INT 1
11152: PPUSH
11153: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11157: LD_INT 52
11159: PPUSH
11160: LD_VAR 0 3
11164: PPUSH
11165: LD_INT 1
11167: PPUSH
11168: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11172: LD_INT 6
11174: PPUSH
11175: LD_VAR 0 3
11179: PPUSH
11180: LD_INT 1
11182: PPUSH
11183: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11187: LD_INT 15
11189: PPUSH
11190: LD_VAR 0 3
11194: PPUSH
11195: LD_INT 1
11197: PPUSH
11198: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11202: LD_INT 7
11204: PPUSH
11205: LD_VAR 0 3
11209: PPUSH
11210: LD_INT 1
11212: PPUSH
11213: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11217: LD_INT 12
11219: PPUSH
11220: LD_VAR 0 3
11224: PPUSH
11225: LD_INT 1
11227: PPUSH
11228: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11232: LD_INT 10
11234: PPUSH
11235: LD_VAR 0 3
11239: PPUSH
11240: LD_INT 1
11242: PPUSH
11243: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11247: LD_INT 17
11249: PPUSH
11250: LD_VAR 0 3
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11262: LD_INT 18
11264: PPUSH
11265: LD_VAR 0 3
11269: PPUSH
11270: LD_INT 1
11272: PPUSH
11273: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11277: LD_INT 60
11279: PPUSH
11280: LD_VAR 0 3
11284: PPUSH
11285: LD_INT 1
11287: PPUSH
11288: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11292: LD_INT 61
11294: PPUSH
11295: LD_VAR 0 3
11299: PPUSH
11300: LD_INT 1
11302: PPUSH
11303: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11307: LD_INT 32
11309: PPUSH
11310: LD_VAR 0 3
11314: PPUSH
11315: LD_INT 1
11317: PPUSH
11318: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
11322: LD_INT 27
11324: PPUSH
11325: LD_VAR 0 3
11329: PPUSH
11330: LD_INT 1
11332: PPUSH
11333: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
11337: LD_INT 36
11339: PPUSH
11340: LD_VAR 0 3
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
11352: LD_INT 33
11354: PPUSH
11355: LD_VAR 0 3
11359: PPUSH
11360: LD_INT 1
11362: PPUSH
11363: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11367: LD_INT 9
11369: PPUSH
11370: LD_VAR 0 3
11374: PPUSH
11375: LD_INT 1
11377: PPUSH
11378: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
11382: LD_INT 38
11384: PPUSH
11385: LD_VAR 0 3
11389: PPUSH
11390: LD_INT 1
11392: PPUSH
11393: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11397: LD_INT 57
11399: PPUSH
11400: LD_VAR 0 3
11404: PPUSH
11405: LD_INT 1
11407: PPUSH
11408: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
11412: LD_INT 58
11414: PPUSH
11415: LD_VAR 0 3
11419: PPUSH
11420: LD_INT 1
11422: PPUSH
11423: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
11427: LD_INT 28
11429: PPUSH
11430: LD_VAR 0 3
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
11442: LD_INT 29
11444: PPUSH
11445: LD_VAR 0 3
11449: PPUSH
11450: LD_INT 1
11452: PPUSH
11453: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11457: LD_INT 30
11459: PPUSH
11460: LD_VAR 0 3
11464: PPUSH
11465: LD_INT 1
11467: PPUSH
11468: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11472: LD_INT 37
11474: PPUSH
11475: LD_VAR 0 3
11479: PPUSH
11480: LD_INT 1
11482: PPUSH
11483: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11487: LD_INT 63
11489: PPUSH
11490: LD_VAR 0 3
11494: PPUSH
11495: LD_INT 1
11497: PPUSH
11498: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
11502: LD_INT 64
11504: PPUSH
11505: LD_VAR 0 3
11509: PPUSH
11510: LD_INT 1
11512: PPUSH
11513: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11517: LD_INT 3
11519: PPUSH
11520: LD_VAR 0 3
11524: PPUSH
11525: LD_INT 1
11527: PPUSH
11528: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11532: LD_INT 4
11534: PPUSH
11535: LD_VAR 0 3
11539: PPUSH
11540: LD_INT 1
11542: PPUSH
11543: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11547: LD_INT 5
11549: PPUSH
11550: LD_VAR 0 3
11554: PPUSH
11555: LD_INT 1
11557: PPUSH
11558: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
11562: LD_INT 8
11564: PPUSH
11565: LD_VAR 0 3
11569: PPUSH
11570: LD_INT 1
11572: PPUSH
11573: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11577: LD_INT 66
11579: PPUSH
11580: LD_VAR 0 3
11584: PPUSH
11585: LD_INT 1
11587: PPUSH
11588: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
11592: LD_INT 67
11594: PPUSH
11595: LD_VAR 0 3
11599: PPUSH
11600: LD_INT 1
11602: PPUSH
11603: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11607: LD_INT 21
11609: PPUSH
11610: LD_VAR 0 3
11614: PPUSH
11615: LD_INT 1
11617: PPUSH
11618: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11622: LD_INT 22
11624: PPUSH
11625: LD_VAR 0 3
11629: PPUSH
11630: LD_INT 1
11632: PPUSH
11633: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11637: LD_INT 19
11639: PPUSH
11640: LD_VAR 0 3
11644: PPUSH
11645: LD_INT 1
11647: PPUSH
11648: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
11652: LD_INT 26
11654: PPUSH
11655: LD_VAR 0 3
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11667: LD_INT 54
11669: PPUSH
11670: LD_VAR 0 3
11674: PPUSH
11675: LD_INT 1
11677: PPUSH
11678: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11682: LD_INT 55
11684: PPUSH
11685: LD_VAR 0 3
11689: PPUSH
11690: LD_INT 1
11692: PPUSH
11693: CALL_OW 322
// for i = 0 to 39 do
11697: LD_ADDR_VAR 0 4
11701: PUSH
11702: DOUBLE
11703: LD_INT 0
11705: DEC
11706: ST_TO_ADDR
11707: LD_INT 39
11709: PUSH
11710: FOR_TO
11711: IFFALSE 11732
// SetRestrict ( i , side , true ) ;
11713: LD_VAR 0 4
11717: PPUSH
11718: LD_VAR 0 3
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 324
11730: GO 11710
11732: POP
11733: POP
// end ; else
11734: GO 11811
11736: POP
// begin for i = 1 to 73 do
11737: LD_ADDR_VAR 0 4
11741: PUSH
11742: DOUBLE
11743: LD_INT 1
11745: DEC
11746: ST_TO_ADDR
11747: LD_INT 73
11749: PUSH
11750: FOR_TO
11751: IFFALSE 11772
// SetTech ( i , side , state_enabled ) ;
11753: LD_VAR 0 4
11757: PPUSH
11758: LD_VAR 0 3
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 322
11770: GO 11750
11772: POP
11773: POP
// for i = 0 to 39 do
11774: LD_ADDR_VAR 0 4
11778: PUSH
11779: DOUBLE
11780: LD_INT 0
11782: DEC
11783: ST_TO_ADDR
11784: LD_INT 39
11786: PUSH
11787: FOR_TO
11788: IFFALSE 11809
// SetRestrict ( i , side , true ) ;
11790: LD_VAR 0 4
11794: PPUSH
11795: LD_VAR 0 3
11799: PPUSH
11800: LD_INT 1
11802: PPUSH
11803: CALL_OW 324
11807: GO 11787
11809: POP
11810: POP
// end ; end ; end ;
11811: GO 7816
11813: POP
11814: POP
// end ; end_of_file
11815: LD_VAR 0 2
11819: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
11820: LD_INT 0
11822: PPUSH
11823: PPUSH
11824: PPUSH
11825: PPUSH
11826: PPUSH
11827: PPUSH
11828: PPUSH
11829: PPUSH
11830: PPUSH
// for i := 1 to 8 do
11831: LD_ADDR_VAR 0 2
11835: PUSH
11836: DOUBLE
11837: LD_INT 1
11839: DEC
11840: ST_TO_ADDR
11841: LD_INT 8
11843: PUSH
11844: FOR_TO
11845: IFFALSE 12229
// begin if Side_Positions [ i ] then
11847: LD_EXP 39
11851: PUSH
11852: LD_VAR 0 2
11856: ARRAY
11857: IFFALSE 12227
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
11859: LD_ADDR_VAR 0 7
11863: PUSH
11864: LD_INT 22
11866: PUSH
11867: LD_VAR 0 2
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 21
11878: PUSH
11879: LD_INT 1
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: PUSH
11895: LD_INT 0
11897: PLUS
11898: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11899: LD_ADDR_VAR 0 9
11903: PUSH
11904: LD_INT 22
11906: PUSH
11907: LD_VAR 0 2
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 2
11918: PUSH
11919: LD_INT 30
11921: PUSH
11922: LD_INT 0
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: LD_INT 30
11931: PUSH
11932: LD_INT 1
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PPUSH
11948: CALL_OW 69
11952: ST_TO_ADDR
// crates := 0 ;
11953: LD_ADDR_VAR 0 4
11957: PUSH
11958: LD_INT 0
11960: ST_TO_ADDR
// oil := 0 ;
11961: LD_ADDR_VAR 0 5
11965: PUSH
11966: LD_INT 0
11968: ST_TO_ADDR
// sib := 0 ;
11969: LD_ADDR_VAR 0 6
11973: PUSH
11974: LD_INT 0
11976: ST_TO_ADDR
// if bases then
11977: LD_VAR 0 9
11981: IFFALSE 12087
// begin for j in bases do
11983: LD_ADDR_VAR 0 3
11987: PUSH
11988: LD_VAR 0 9
11992: PUSH
11993: FOR_IN
11994: IFFALSE 12085
// begin base := GetBase ( j ) ;
11996: LD_ADDR_VAR 0 8
12000: PUSH
12001: LD_VAR 0 3
12005: PPUSH
12006: CALL_OW 274
12010: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
12011: LD_ADDR_VAR 0 4
12015: PUSH
12016: LD_VAR 0 4
12020: PUSH
12021: LD_VAR 0 8
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: CALL_OW 275
12033: PLUS
12034: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12035: LD_ADDR_VAR 0 5
12039: PUSH
12040: LD_VAR 0 5
12044: PUSH
12045: LD_VAR 0 8
12049: PPUSH
12050: LD_INT 2
12052: PPUSH
12053: CALL_OW 275
12057: PLUS
12058: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12059: LD_ADDR_VAR 0 6
12063: PUSH
12064: LD_VAR 0 6
12068: PUSH
12069: LD_VAR 0 8
12073: PPUSH
12074: LD_INT 3
12076: PPUSH
12077: CALL_OW 275
12081: PLUS
12082: ST_TO_ADDR
// end ;
12083: GO 11993
12085: POP
12086: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12087: LD_STRING setSpecText(
12089: PUSH
12090: LD_VAR 0 2
12094: STR
12095: PUSH
12096: LD_STRING ,
12098: STR
12099: PUSH
12100: LD_INT 2
12102: STR
12103: PUSH
12104: LD_STRING ,
12106: STR
12107: PUSH
12108: LD_VAR 0 4
12112: STR
12113: PUSH
12114: LD_STRING )
12116: STR
12117: PPUSH
12118: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12122: LD_STRING setSpecText(
12124: PUSH
12125: LD_VAR 0 2
12129: STR
12130: PUSH
12131: LD_STRING ,
12133: STR
12134: PUSH
12135: LD_INT 3
12137: STR
12138: PUSH
12139: LD_STRING ,
12141: STR
12142: PUSH
12143: LD_VAR 0 5
12147: STR
12148: PUSH
12149: LD_STRING )
12151: STR
12152: PPUSH
12153: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12157: LD_STRING setSpecText(
12159: PUSH
12160: LD_VAR 0 2
12164: STR
12165: PUSH
12166: LD_STRING ,
12168: STR
12169: PUSH
12170: LD_INT 4
12172: STR
12173: PUSH
12174: LD_STRING ,
12176: STR
12177: PUSH
12178: LD_VAR 0 6
12182: STR
12183: PUSH
12184: LD_STRING )
12186: STR
12187: PPUSH
12188: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12192: LD_STRING setSpecText(
12194: PUSH
12195: LD_VAR 0 2
12199: STR
12200: PUSH
12201: LD_STRING ,
12203: STR
12204: PUSH
12205: LD_INT 5
12207: STR
12208: PUSH
12209: LD_STRING ,
12211: STR
12212: PUSH
12213: LD_VAR 0 7
12217: STR
12218: PUSH
12219: LD_STRING )
12221: STR
12222: PPUSH
12223: CALL_OW 559
// end ; end ;
12227: GO 11844
12229: POP
12230: POP
// end ;
12231: LD_VAR 0 1
12235: RET
// every 0 0$1 do
12236: GO 12238
12238: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12239: LD_STRING setSpecLogoNumber(
12241: PUSH
12242: LD_INT 2
12244: STR
12245: PUSH
12246: LD_STRING ,
12248: STR
12249: PUSH
12250: LD_INT 1
12252: STR
12253: PUSH
12254: LD_STRING )
12256: STR
12257: PPUSH
12258: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12262: LD_STRING setSpecLogoNumber(
12264: PUSH
12265: LD_INT 3
12267: STR
12268: PUSH
12269: LD_STRING ,
12271: STR
12272: PUSH
12273: LD_INT 2
12275: STR
12276: PUSH
12277: LD_STRING )
12279: STR
12280: PPUSH
12281: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12285: LD_STRING setSpecLogoNumber(
12287: PUSH
12288: LD_INT 4
12290: STR
12291: PUSH
12292: LD_STRING ,
12294: STR
12295: PUSH
12296: LD_INT 3
12298: STR
12299: PUSH
12300: LD_STRING )
12302: STR
12303: PPUSH
12304: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12308: LD_STRING setSpecLogoNumber(
12310: PUSH
12311: LD_INT 5
12313: STR
12314: PUSH
12315: LD_STRING ,
12317: STR
12318: PUSH
12319: LD_INT 4
12321: STR
12322: PUSH
12323: LD_STRING )
12325: STR
12326: PPUSH
12327: CALL_OW 559
// end ;
12331: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12332: LD_INT 2
12334: PUSH
12335: LD_INT 30
12337: PUSH
12338: LD_INT 0
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 30
12347: PUSH
12348: LD_INT 1
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 69
12364: IFFALSE 12374
12366: GO 12368
12368: DISABLE
// begin enable ;
12369: ENABLE
// UpdateSpectatorBar ;
12370: CALL 11820 0 0
// end ; end_of_file
12374: END
// var respawn , inqueue ; export function init_respawning ; begin
12375: LD_INT 0
12377: PPUSH
// respawn := Rand ( 1 , 8 ) ;
12378: LD_ADDR_LOC 14
12382: PUSH
12383: LD_INT 1
12385: PPUSH
12386: LD_INT 8
12388: PPUSH
12389: CALL_OW 12
12393: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12394: LD_ADDR_LOC 15
12398: PUSH
12399: LD_INT 0
12401: PUSH
12402: LD_INT 0
12404: PUSH
12405: LD_INT 0
12407: PUSH
12408: LD_INT 0
12410: PUSH
12411: LD_INT 0
12413: PUSH
12414: LD_INT 0
12416: PUSH
12417: LD_INT 0
12419: PUSH
12420: LD_INT 0
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: ST_TO_ADDR
// end ;
12433: LD_VAR 0 1
12437: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
12438: GO 12440
12440: DISABLE
12441: LD_INT 0
12443: PPUSH
12444: PPUSH
12445: PPUSH
// begin if respawning_time_max = 0 then
12446: LD_EXP 30
12450: PUSH
12451: LD_INT 0
12453: EQUAL
12454: IFFALSE 12458
// exit ;
12456: GO 12866
// if respawn = 8 then
12458: LD_LOC 14
12462: PUSH
12463: LD_INT 8
12465: EQUAL
12466: IFFALSE 12478
// respawn := 1 else
12468: LD_ADDR_LOC 14
12472: PUSH
12473: LD_INT 1
12475: ST_TO_ADDR
12476: GO 12492
// respawn := respawn + 1 ;
12478: LD_ADDR_LOC 14
12482: PUSH
12483: LD_LOC 14
12487: PUSH
12488: LD_INT 1
12490: PLUS
12491: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
12492: LD_EXP 39
12496: PUSH
12497: LD_LOC 14
12501: ARRAY
12502: PUSH
12503: LD_LOC 15
12507: PUSH
12508: LD_LOC 14
12512: ARRAY
12513: NOT
12514: AND
12515: IFFALSE 12865
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
12517: LD_ADDR_VAR 0 1
12521: PUSH
12522: LD_INT 21
12524: PUSH
12525: LD_INT 1
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 22
12534: PUSH
12535: LD_LOC 14
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 3
12546: PUSH
12547: LD_INT 23
12549: PUSH
12550: LD_INT 0
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: PPUSH
12563: CALL_OW 69
12567: ST_TO_ADDR
// if n < number_of_people then
12568: LD_VAR 0 1
12572: PUSH
12573: LD_EXP 21
12577: LESS
12578: IFFALSE 12862
// begin aktresp := respawn ;
12580: LD_ADDR_VAR 0 3
12584: PUSH
12585: LD_LOC 14
12589: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
12590: LD_ADDR_LOC 15
12594: PUSH
12595: LD_LOC 15
12599: PPUSH
12600: LD_VAR 0 3
12604: PPUSH
12605: LD_INT 1
12607: PPUSH
12608: CALL_OW 1
12612: ST_TO_ADDR
// enable ;
12613: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
12614: LD_EXP 29
12618: PPUSH
12619: LD_EXP 30
12623: PPUSH
12624: CALL_OW 12
12628: PPUSH
12629: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
12633: LD_ADDR_LOC 15
12637: PUSH
12638: LD_LOC 15
12642: PPUSH
12643: LD_VAR 0 3
12647: PPUSH
12648: LD_INT 0
12650: PPUSH
12651: CALL_OW 1
12655: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
12656: LD_ADDR_VAR 0 2
12660: PUSH
12661: LD_INT 21
12663: PUSH
12664: LD_INT 3
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PUSH
12671: LD_INT 2
12673: PUSH
12674: LD_INT 30
12676: PUSH
12677: LD_INT 0
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 30
12686: PUSH
12687: LD_INT 1
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 50
12701: PUSH
12702: EMPTY
12703: LIST
12704: PUSH
12705: LD_INT 22
12707: PUSH
12708: LD_VAR 0 3
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: PPUSH
12723: CALL_OW 69
12727: ST_TO_ADDR
// if dep = 0 then
12728: LD_VAR 0 2
12732: PUSH
12733: LD_INT 0
12735: EQUAL
12736: IFFALSE 12740
// exit ;
12738: GO 12866
// hc_name :=  ;
12740: LD_ADDR_OWVAR 26
12744: PUSH
12745: LD_STRING 
12747: ST_TO_ADDR
// hc_importance := 0 ;
12748: LD_ADDR_OWVAR 32
12752: PUSH
12753: LD_INT 0
12755: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
12756: LD_INT 0
12758: PPUSH
12759: LD_INT 0
12761: PPUSH
12762: LD_EXP 22
12766: PUSH
12767: LD_INT 2
12769: DIV
12770: PPUSH
12771: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
12775: LD_ADDR_OWVAR 21
12779: PUSH
12780: LD_EXP 40
12784: PUSH
12785: LD_VAR 0 3
12789: ARRAY
12790: ST_TO_ADDR
// uc_side := aktresp ;
12791: LD_ADDR_OWVAR 20
12795: PUSH
12796: LD_VAR 0 3
12800: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
12801: LD_ADDR_VAR 0 2
12805: PUSH
12806: LD_VAR 0 2
12810: PUSH
12811: LD_INT 1
12813: PPUSH
12814: LD_VAR 0 2
12818: PPUSH
12819: CALL_OW 12
12823: ARRAY
12824: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
12825: CALL_OW 44
12829: PPUSH
12830: LD_VAR 0 2
12834: PPUSH
12835: CALL_OW 250
12839: PPUSH
12840: LD_VAR 0 2
12844: PPUSH
12845: CALL_OW 251
12849: PPUSH
12850: LD_INT 7
12852: PPUSH
12853: LD_INT 1
12855: PPUSH
12856: CALL_OW 50
// end else
12860: GO 12863
// enable ;
12862: ENABLE
// end else
12863: GO 12866
// enable ;
12865: ENABLE
// end ; end_of_file
12866: PPOPN 3
12868: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
12869: LD_INT 0
12871: PPUSH
12872: PPUSH
12873: PPUSH
// BuildUpTime_Delay = 0 ;
12874: LD_ADDR_EXP 62
12878: PUSH
12879: LD_INT 0
12881: ST_TO_ADDR
// if not def_builduptime then
12882: LD_EXP 16
12886: NOT
12887: IFFALSE 12891
// exit ;
12889: GO 13074
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
12891: LD_ADDR_EXP 62
12895: PUSH
12896: LD_INT 8400
12898: PUSH
12899: LD_INT 2100
12901: PUSH
12902: LD_EXP 16
12906: MUL
12907: PLUS
12908: ST_TO_ADDR
// BuildUpTimeActive := true ;
12909: LD_ADDR_EXP 61
12913: PUSH
12914: LD_INT 1
12916: ST_TO_ADDR
// for i := 1 to 8 do
12917: LD_ADDR_VAR 0 2
12921: PUSH
12922: DOUBLE
12923: LD_INT 1
12925: DEC
12926: ST_TO_ADDR
12927: LD_INT 8
12929: PUSH
12930: FOR_TO
12931: IFFALSE 13072
// if Side_Positions [ i ] then
12933: LD_EXP 39
12937: PUSH
12938: LD_VAR 0 2
12942: ARRAY
12943: IFFALSE 13070
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
12945: LD_EXP 60
12949: PUSH
12950: LD_EXP 39
12954: PUSH
12955: LD_VAR 0 2
12959: ARRAY
12960: ARRAY
12961: PPUSH
12962: LD_INT 5
12964: PPUSH
12965: CALL_OW 424
// for j := 1 to 8 do
12969: LD_ADDR_VAR 0 3
12973: PUSH
12974: DOUBLE
12975: LD_INT 1
12977: DEC
12978: ST_TO_ADDR
12979: LD_INT 8
12981: PUSH
12982: FOR_TO
12983: IFFALSE 13068
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
12985: LD_EXP 39
12989: PUSH
12990: LD_VAR 0 3
12994: ARRAY
12995: PUSH
12996: LD_EXP 36
13000: PUSH
13001: LD_VAR 0 2
13005: ARRAY
13006: PUSH
13007: LD_EXP 36
13011: PUSH
13012: LD_VAR 0 3
13016: ARRAY
13017: NONEQUAL
13018: PUSH
13019: LD_EXP 41
13023: NOT
13024: PUSH
13025: LD_VAR 0 2
13029: PUSH
13030: LD_VAR 0 3
13034: NONEQUAL
13035: AND
13036: OR
13037: AND
13038: IFFALSE 13066
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13040: LD_VAR 0 3
13044: PPUSH
13045: LD_EXP 60
13049: PUSH
13050: LD_EXP 39
13054: PUSH
13055: LD_VAR 0 2
13059: ARRAY
13060: ARRAY
13061: PPUSH
13062: CALL_OW 333
13066: GO 12982
13068: POP
13069: POP
// end ;
13070: GO 12930
13072: POP
13073: POP
// end ;
13074: LD_VAR 0 1
13078: RET
// export function EndBuildUp ; var i , j ; begin
13079: LD_INT 0
13081: PPUSH
13082: PPUSH
13083: PPUSH
// BuildUpTimeActive := false ;
13084: LD_ADDR_EXP 61
13088: PUSH
13089: LD_INT 0
13091: ST_TO_ADDR
// for i := 1 to 8 do
13092: LD_ADDR_VAR 0 2
13096: PUSH
13097: DOUBLE
13098: LD_INT 1
13100: DEC
13101: ST_TO_ADDR
13102: LD_INT 8
13104: PUSH
13105: FOR_TO
13106: IFFALSE 13247
// if Side_Positions [ i ] then
13108: LD_EXP 39
13112: PUSH
13113: LD_VAR 0 2
13117: ARRAY
13118: IFFALSE 13245
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13120: LD_EXP 60
13124: PUSH
13125: LD_EXP 39
13129: PUSH
13130: LD_VAR 0 2
13134: ARRAY
13135: ARRAY
13136: PPUSH
13137: LD_INT 0
13139: PPUSH
13140: CALL_OW 424
// for j := 1 to 8 do
13144: LD_ADDR_VAR 0 3
13148: PUSH
13149: DOUBLE
13150: LD_INT 1
13152: DEC
13153: ST_TO_ADDR
13154: LD_INT 8
13156: PUSH
13157: FOR_TO
13158: IFFALSE 13243
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13160: LD_EXP 39
13164: PUSH
13165: LD_VAR 0 3
13169: ARRAY
13170: PUSH
13171: LD_EXP 36
13175: PUSH
13176: LD_VAR 0 2
13180: ARRAY
13181: PUSH
13182: LD_EXP 36
13186: PUSH
13187: LD_VAR 0 3
13191: ARRAY
13192: NONEQUAL
13193: PUSH
13194: LD_EXP 41
13198: NOT
13199: PUSH
13200: LD_VAR 0 2
13204: PUSH
13205: LD_VAR 0 3
13209: NONEQUAL
13210: AND
13211: OR
13212: AND
13213: IFFALSE 13241
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13215: LD_VAR 0 3
13219: PPUSH
13220: LD_EXP 60
13224: PUSH
13225: LD_EXP 39
13229: PUSH
13230: LD_VAR 0 2
13234: ARRAY
13235: ARRAY
13236: PPUSH
13237: CALL_OW 334
13241: GO 13157
13243: POP
13244: POP
// end ;
13245: GO 13105
13247: POP
13248: POP
// end ;
13249: LD_VAR 0 1
13253: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13254: LD_EXP 61
13258: IFFALSE 13433
13260: GO 13262
13262: DISABLE
13263: LD_INT 0
13265: PPUSH
13266: PPUSH
// begin for i := 1 to 8 do
13267: LD_ADDR_VAR 0 1
13271: PUSH
13272: DOUBLE
13273: LD_INT 1
13275: DEC
13276: ST_TO_ADDR
13277: LD_INT 8
13279: PUSH
13280: FOR_TO
13281: IFFALSE 13430
// if Side_Positions [ i ] then
13283: LD_EXP 39
13287: PUSH
13288: LD_VAR 0 1
13292: ARRAY
13293: IFFALSE 13428
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13295: LD_ADDR_VAR 0 2
13299: PUSH
13300: LD_EXP 60
13304: PUSH
13305: LD_EXP 39
13309: PUSH
13310: LD_VAR 0 1
13314: ARRAY
13315: ARRAY
13316: PPUSH
13317: LD_INT 2
13319: PUSH
13320: LD_INT 21
13322: PUSH
13323: LD_INT 1
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 21
13332: PUSH
13333: LD_INT 2
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 22
13347: PUSH
13348: LD_OWVAR 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 70
13365: PUSH
13366: FOR_IN
13367: IFFALSE 13426
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
13369: LD_EXP 36
13373: PUSH
13374: LD_VAR 0 1
13378: ARRAY
13379: PUSH
13380: LD_EXP 36
13384: PUSH
13385: LD_OWVAR 2
13389: ARRAY
13390: NONEQUAL
13391: PUSH
13392: LD_EXP 41
13396: NOT
13397: PUSH
13398: LD_VAR 0 1
13402: PUSH
13403: LD_OWVAR 2
13407: NONEQUAL
13408: AND
13409: OR
13410: IFFALSE 13424
// ComMoveToArea ( un , BuildUpEscape ) ;
13412: LD_VAR 0 2
13416: PPUSH
13417: LD_INT 13
13419: PPUSH
13420: CALL_OW 113
13424: GO 13366
13426: POP
13427: POP
13428: GO 13280
13430: POP
13431: POP
// enable ;
13432: ENABLE
// end ;
13433: PPOPN 2
13435: END
// every 0 0$1 trigger def_builduptime do
13436: LD_EXP 16
13440: IFFALSE 13466
13442: GO 13444
13444: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
13445: LD_INT 8400
13447: PUSH
13448: LD_EXP 16
13452: PUSH
13453: LD_INT 2100
13455: MUL
13456: PLUS
13457: PPUSH
13458: CALL_OW 67
// EndBuildUp ;
13462: CALL 13079 0 0
// end ; end_of_file
13466: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
13467: LD_INT 0
13469: PPUSH
13470: PPUSH
// enable ( 98 ) ;
13471: LD_INT 98
13473: ENABLE_MARKED
// GameEnded = false ;
13474: LD_ADDR_LOC 17
13478: PUSH
13479: LD_INT 0
13481: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13482: LD_ADDR_LOC 16
13486: PUSH
13487: LD_INT 0
13489: PUSH
13490: LD_INT 0
13492: PUSH
13493: LD_INT 0
13495: PUSH
13496: LD_INT 0
13498: PUSH
13499: LD_INT 0
13501: PUSH
13502: LD_INT 0
13504: PUSH
13505: LD_INT 0
13507: PUSH
13508: LD_INT 0
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: ST_TO_ADDR
// unfoged = false ;
13521: LD_ADDR_LOC 18
13525: PUSH
13526: LD_INT 0
13528: ST_TO_ADDR
// defeated_specs := [ ] ;
13529: LD_ADDR_LOC 19
13533: PUSH
13534: EMPTY
13535: ST_TO_ADDR
// for i = 1 to side_positions do
13536: LD_ADDR_VAR 0 2
13540: PUSH
13541: DOUBLE
13542: LD_INT 1
13544: DEC
13545: ST_TO_ADDR
13546: LD_EXP 39
13550: PUSH
13551: FOR_TO
13552: IFFALSE 13592
// if not side_positions [ i ] then
13554: LD_EXP 39
13558: PUSH
13559: LD_VAR 0 2
13563: ARRAY
13564: NOT
13565: IFFALSE 13590
// defeated = replace ( defeated , i , true ) ;
13567: LD_ADDR_LOC 16
13571: PUSH
13572: LD_LOC 16
13576: PPUSH
13577: LD_VAR 0 2
13581: PPUSH
13582: LD_INT 1
13584: PPUSH
13585: CALL_OW 1
13589: ST_TO_ADDR
13590: GO 13551
13592: POP
13593: POP
// end ;
13594: LD_VAR 0 1
13598: RET
// function CanWinLoose ; begin
13599: LD_INT 0
13601: PPUSH
// Result := true ;
13602: LD_ADDR_VAR 0 1
13606: PUSH
13607: LD_INT 1
13609: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
13610: CALL_OW 518
13614: PUSH
13615: CALL_OW 519
13619: PUSH
13620: LD_INT 0
13622: GREATER
13623: AND
13624: IFFALSE 13634
// Result := false ;
13626: LD_ADDR_VAR 0 1
13630: PUSH
13631: LD_INT 0
13633: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13634: CALL_OW 531
13638: PUSH
13639: CALL_OW 519
13643: PUSH
13644: LD_INT 1
13646: GREATER
13647: AND
13648: IFFALSE 13658
// Result := false ;
13650: LD_ADDR_VAR 0 1
13654: PUSH
13655: LD_INT 0
13657: ST_TO_ADDR
// end ;
13658: LD_VAR 0 1
13662: RET
// export function HasPower ( i ) ; var k , h ; begin
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
13667: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
13668: LD_VAR 0 1
13672: PPUSH
13673: CALL_OW 108
13677: NOT
13678: PUSH
13679: LD_EXP 38
13683: PUSH
13684: LD_VAR 0 1
13688: ARRAY
13689: NOT
13690: AND
13691: PUSH
13692: LD_OWVAR 4
13696: AND
13697: IFFALSE 13709
// begin result = false ;
13699: LD_ADDR_VAR 0 2
13703: PUSH
13704: LD_INT 0
13706: ST_TO_ADDR
// end else
13707: GO 14004
// case def_win_rules of 0 :
13709: LD_EXP 34
13713: PUSH
13714: LD_INT 0
13716: DOUBLE
13717: EQUAL
13718: IFTRUE 13722
13720: GO 13885
13722: POP
// if def_people_respawning then
13723: LD_EXP 11
13727: IFFALSE 13818
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
13729: LD_ADDR_VAR 0 2
13733: PUSH
13734: LD_INT 22
13736: PUSH
13737: LD_VAR 0 1
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: LD_INT 2
13748: PUSH
13749: LD_INT 21
13751: PUSH
13752: LD_INT 1
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: LD_INT 33
13761: PUSH
13762: LD_INT 3
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 33
13771: PUSH
13772: LD_INT 5
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 30
13781: PUSH
13782: LD_INT 0
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: LD_INT 30
13791: PUSH
13792: LD_INT 1
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PPUSH
13811: CALL_OW 69
13815: ST_TO_ADDR
13816: GO 13883
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
13818: LD_ADDR_VAR 0 2
13822: PUSH
13823: LD_INT 22
13825: PUSH
13826: LD_VAR 0 1
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 2
13837: PUSH
13838: LD_INT 21
13840: PUSH
13841: LD_INT 1
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 33
13850: PUSH
13851: LD_INT 3
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 33
13860: PUSH
13861: LD_INT 5
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PPUSH
13878: CALL_OW 69
13882: ST_TO_ADDR
13883: GO 14004
13885: LD_INT 1
13887: DOUBLE
13888: EQUAL
13889: IFTRUE 13893
13891: GO 13932
13893: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
13894: LD_ADDR_VAR 0 2
13898: PUSH
13899: LD_INT 22
13901: PUSH
13902: LD_VAR 0 1
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 21
13913: PUSH
13914: LD_INT 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PPUSH
13925: CALL_OW 69
13929: ST_TO_ADDR
13930: GO 14004
13932: LD_INT 2
13934: DOUBLE
13935: EQUAL
13936: IFTRUE 13940
13938: GO 14003
13940: POP
// begin h = false ;
13941: LD_ADDR_VAR 0 4
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// for k in heroes [ i ] do
13949: LD_ADDR_VAR 0 3
13953: PUSH
13954: LD_EXP 50
13958: PUSH
13959: LD_VAR 0 1
13963: ARRAY
13964: PUSH
13965: FOR_IN
13966: IFFALSE 13989
// if IsLive ( k ) then
13968: LD_VAR 0 3
13972: PPUSH
13973: CALL_OW 300
13977: IFFALSE 13987
// h = true ;
13979: LD_ADDR_VAR 0 4
13983: PUSH
13984: LD_INT 1
13986: ST_TO_ADDR
13987: GO 13965
13989: POP
13990: POP
// Result := h ;
13991: LD_ADDR_VAR 0 2
13995: PUSH
13996: LD_VAR 0 4
14000: ST_TO_ADDR
// end ; end ;
14001: GO 14004
14003: POP
// end ;
14004: LD_VAR 0 2
14008: RET
// function AlliedSides ( i , j ) ; begin
14009: LD_INT 0
14011: PPUSH
// Result := false ;
14012: LD_ADDR_VAR 0 3
14016: PUSH
14017: LD_INT 0
14019: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
14020: LD_VAR 0 1
14024: PPUSH
14025: LD_VAR 0 2
14029: PPUSH
14030: CALL_OW 81
14034: PUSH
14035: LD_INT 1
14037: EQUAL
14038: PUSH
14039: LD_VAR 0 2
14043: PPUSH
14044: LD_VAR 0 1
14048: PPUSH
14049: CALL_OW 81
14053: PUSH
14054: LD_INT 1
14056: EQUAL
14057: AND
14058: PUSH
14059: LD_VAR 0 1
14063: PPUSH
14064: CALL_OW 83
14068: AND
14069: PUSH
14070: LD_VAR 0 2
14074: PPUSH
14075: CALL_OW 83
14079: AND
14080: IFFALSE 14090
// Result := true ;
14082: LD_ADDR_VAR 0 3
14086: PUSH
14087: LD_INT 1
14089: ST_TO_ADDR
// end ;
14090: LD_VAR 0 3
14094: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14095: CALL 13599 0 0
14099: PUSH
14100: LD_LOC 17
14104: NOT
14105: AND
14106: IFFALSE 14122
14108: GO 14110
14110: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14111: LD_ADDR_EXP 59
14115: PUSH
14116: LD_STRING #Player-Ended
14118: PUSH
14119: EMPTY
14120: LIST
14121: ST_TO_ADDR
14122: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14123: CALL 13599 0 0
14127: PUSH
14128: LD_LOC 17
14132: AND
14133: IFFALSE 14142
14135: GO 14137
14137: DISABLE
// YouLostInMultiplayer ;
14138: CALL_OW 107
14142: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14143: CALL 13599 0 0
14147: NOT
14148: PUSH
14149: CALL_OW 531
14153: NOT
14154: AND
14155: IFFALSE 14171
14157: GO 14159
14159: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14160: LD_ADDR_EXP 59
14164: PUSH
14165: LD_STRING #server-wait
14167: PUSH
14168: EMPTY
14169: LIST
14170: ST_TO_ADDR
14171: END
// every 100 trigger IAmSpec do
14172: CALL_OW 531
14176: IFFALSE 14192
14178: GO 14180
14180: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14181: LD_ADDR_EXP 59
14185: PUSH
14186: LD_STRING #Player-IAmSpec
14188: PUSH
14189: EMPTY
14190: LIST
14191: ST_TO_ADDR
14192: END
// every 100 trigger GameEnded and IAmSpec do
14193: LD_LOC 17
14197: PUSH
14198: CALL_OW 531
14202: AND
14203: IFFALSE 14212
14205: GO 14207
14207: DISABLE
// YouLostInMultiplayer ;
14208: CALL_OW 107
14212: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14213: CALL 13599 0 0
14217: PUSH
14218: LD_LOC 17
14222: NOT
14223: AND
14224: IFFALSE 14240
14226: GO 14228
14228: DISABLE
// WaitServerStrings = [ $player-win ] ;
14229: LD_ADDR_EXP 59
14233: PUSH
14234: LD_STRING $player-win
14236: PUSH
14237: EMPTY
14238: LIST
14239: ST_TO_ADDR
14240: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14241: CALL 13599 0 0
14245: PUSH
14246: LD_LOC 17
14250: AND
14251: IFFALSE 14275
14253: GO 14255
14255: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
14256: LD_EXP 40
14260: PUSH
14261: LD_OWVAR 7
14265: ARRAY
14266: PPUSH
14267: CALL 7454 0 1
// YouWinInMultiplayer ;
14271: CALL_OW 106
// end ;
14275: END
// every 100 trigger isEditor marked 401 do
14276: LD_OWVAR 84
14280: IFFALSE 14296
14282: GO 14284
14284: DISABLE
// Debug_Strings = [ You won ] ;
14285: LD_ADDR_OWVAR 48
14289: PUSH
14290: LD_STRING You won
14292: PUSH
14293: EMPTY
14294: LIST
14295: ST_TO_ADDR
14296: END
// every 100 trigger isEditor marked 400 do
14297: LD_OWVAR 84
14301: IFFALSE 14317
14303: GO 14305
14305: DISABLE
// Debug_Strings = [ You loss ] ;
14306: LD_ADDR_OWVAR 48
14310: PUSH
14311: LD_STRING You loss
14313: PUSH
14314: EMPTY
14315: LIST
14316: ST_TO_ADDR
14317: END
// every 100 marked 98 do var i , un ;
14318: GO 14320
14320: DISABLE
14321: LD_INT 0
14323: PPUSH
14324: PPUSH
// begin for i = 1 to side_positions do
14325: LD_ADDR_VAR 0 1
14329: PUSH
14330: DOUBLE
14331: LD_INT 1
14333: DEC
14334: ST_TO_ADDR
14335: LD_EXP 39
14339: PUSH
14340: FOR_TO
14341: IFFALSE 14428
// begin if side_positions [ i ] then
14343: LD_EXP 39
14347: PUSH
14348: LD_VAR 0 1
14352: ARRAY
14353: IFFALSE 14426
// if not HasPower ( i ) and not defeated [ i ] then
14355: LD_VAR 0 1
14359: PPUSH
14360: CALL 13663 0 1
14364: NOT
14365: PUSH
14366: LD_LOC 16
14370: PUSH
14371: LD_VAR 0 1
14375: ARRAY
14376: NOT
14377: AND
14378: IFFALSE 14426
// begin defeated = replace ( defeated , i , true ) ;
14380: LD_ADDR_LOC 16
14384: PUSH
14385: LD_LOC 16
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: LD_INT 1
14397: PPUSH
14398: CALL_OW 1
14402: ST_TO_ADDR
// if i = mp_player_side then
14403: LD_VAR 0 1
14407: PUSH
14408: LD_OWVAR 7
14412: EQUAL
14413: IFFALSE 14426
// begin Multiplayer_Loose_Message ;
14415: CALL_OW 521
// SetPlayerSpectator ( ) ;
14419: CALL_OW 572
// enable ( 400 ) ;
14423: LD_INT 400
14425: ENABLE_MARKED
// end ; end ; end ;
14426: GO 14340
14428: POP
14429: POP
// DidGameEnd ;
14430: CALL 14445 0 0
// if not GameEnded then
14434: LD_LOC 17
14438: NOT
14439: IFFALSE 14442
// enable ;
14441: ENABLE
// end ;
14442: PPOPN 2
14444: END
// function DidGameEnd ; var i , k , enemy ; begin
14445: LD_INT 0
14447: PPUSH
14448: PPUSH
14449: PPUSH
14450: PPUSH
// enemy = [ ] ;
14451: LD_ADDR_VAR 0 4
14455: PUSH
14456: EMPTY
14457: ST_TO_ADDR
// for i = 1 to side_positions do
14458: LD_ADDR_VAR 0 2
14462: PUSH
14463: DOUBLE
14464: LD_INT 1
14466: DEC
14467: ST_TO_ADDR
14468: LD_EXP 39
14472: PUSH
14473: FOR_TO
14474: IFFALSE 14568
// if not defeated [ i ] then
14476: LD_LOC 16
14480: PUSH
14481: LD_VAR 0 2
14485: ARRAY
14486: NOT
14487: IFFALSE 14566
// for k = 1 to side_positions do
14489: LD_ADDR_VAR 0 3
14493: PUSH
14494: DOUBLE
14495: LD_INT 1
14497: DEC
14498: ST_TO_ADDR
14499: LD_EXP 39
14503: PUSH
14504: FOR_TO
14505: IFFALSE 14564
// if not defeated [ k ] then
14507: LD_LOC 16
14511: PUSH
14512: LD_VAR 0 3
14516: ARRAY
14517: NOT
14518: IFFALSE 14562
// if not AlliedSides ( i , k ) then
14520: LD_VAR 0 2
14524: PPUSH
14525: LD_VAR 0 3
14529: PPUSH
14530: CALL 14009 0 2
14534: NOT
14535: IFFALSE 14562
// enemy = enemy ^ [ i , k ] ;
14537: LD_ADDR_VAR 0 4
14541: PUSH
14542: LD_VAR 0 4
14546: PUSH
14547: LD_VAR 0 2
14551: PUSH
14552: LD_VAR 0 3
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: ADD
14561: ST_TO_ADDR
14562: GO 14504
14564: POP
14565: POP
14566: GO 14473
14568: POP
14569: POP
// if not enemy then
14570: LD_VAR 0 4
14574: NOT
14575: IFFALSE 14601
// begin GameEnded = true ;
14577: LD_ADDR_LOC 17
14581: PUSH
14582: LD_INT 1
14584: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
14585: LD_LOC 16
14589: PUSH
14590: LD_OWVAR 7
14594: ARRAY
14595: NOT
14596: IFFALSE 14601
// enable ( 401 ) ;
14598: LD_INT 401
14600: ENABLE_MARKED
// end ; end ;
14601: LD_VAR 0 1
14605: RET
// function unfog ; var k , friends ; begin
14606: LD_INT 0
14608: PPUSH
14609: PPUSH
14610: PPUSH
// for k = 1 to side_positions do
14611: LD_ADDR_VAR 0 2
14615: PUSH
14616: DOUBLE
14617: LD_INT 1
14619: DEC
14620: ST_TO_ADDR
14621: LD_EXP 39
14625: PUSH
14626: FOR_TO
14627: IFFALSE 14683
// if not defeated [ k ] then
14629: LD_LOC 16
14633: PUSH
14634: LD_VAR 0 2
14638: ARRAY
14639: NOT
14640: IFFALSE 14681
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
14642: LD_OWVAR 7
14646: PPUSH
14647: LD_VAR 0 2
14651: PPUSH
14652: CALL_OW 81
14656: PUSH
14657: LD_INT 1
14659: PUSH
14660: EMPTY
14661: LIST
14662: IN
14663: IFFALSE 14681
// friends = friends ^ k ;
14665: LD_ADDR_VAR 0 3
14669: PUSH
14670: LD_VAR 0 3
14674: PUSH
14675: LD_VAR 0 2
14679: ADD
14680: ST_TO_ADDR
14681: GO 14626
14683: POP
14684: POP
// if not friends then
14685: LD_VAR 0 3
14689: NOT
14690: IFFALSE 14704
// begin SetPlayerSpectator ( ) ;
14692: CALL_OW 572
// unfoged = true ;
14696: LD_ADDR_LOC 18
14700: PUSH
14701: LD_INT 1
14703: ST_TO_ADDR
// end ; end ;
14704: LD_VAR 0 1
14708: RET
// export function MakeGameEnd ; begin
14709: LD_INT 0
14711: PPUSH
// SetPlayerSpectator ( ) ;
14712: CALL_OW 572
// unfoged = true ;
14716: LD_ADDR_LOC 18
14720: PUSH
14721: LD_INT 1
14723: ST_TO_ADDR
// wait ( 0 0$5 ) ;
14724: LD_INT 175
14726: PPUSH
14727: CALL_OW 67
// GameEnded = true ;
14731: LD_ADDR_LOC 17
14735: PUSH
14736: LD_INT 1
14738: ST_TO_ADDR
// end ;
14739: LD_VAR 0 1
14743: RET
// export function GetGameEnded ; begin
14744: LD_INT 0
14746: PPUSH
// result = GameEnded ;
14747: LD_ADDR_VAR 0 1
14751: PUSH
14752: LD_LOC 17
14756: ST_TO_ADDR
// end ;
14757: LD_VAR 0 1
14761: RET
