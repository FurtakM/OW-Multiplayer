// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , tech_level ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 41
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 21
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 41
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 21
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 19
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 22
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 20
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 21
 285: PUSH
 286: LD_EXP 21
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 20
 308: PUSH
 309: LD_EXP 20
 313: PPUSH
 314: LD_EXP 19
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 20
 329: PUSH
 330: LD_EXP 19
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 24
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 21
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 24
 420: PUSH
 421: LD_EXP 24
 425: PPUSH
 426: LD_EXP 21
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := Side_Teams [ your_side ] ;
 451: LD_ADDR_EXP 23
 455: PUSH
 456: LD_EXP 19
 460: PUSH
 461: LD_OWVAR 2
 465: ARRAY
 466: ST_TO_ADDR
// if Multiplayer then
 467: LD_OWVAR 4
 471: IFFALSE 722
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 473: LD_ADDR_EXP 43
 477: PUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 486: LD_ADDR_EXP 44
 490: PUSH
 491: LD_INT 1
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 499: LD_ADDR_EXP 45
 503: PUSH
 504: LD_INT 2
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 512: LD_ADDR_EXP 46
 516: PUSH
 517: LD_INT 3
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 525: LD_ADDR_EXP 47
 529: PUSH
 530: LD_INT 4
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 538: LD_ADDR_EXP 48
 542: PUSH
 543: LD_INT 5
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 551: LD_ADDR_EXP 49
 555: PUSH
 556: LD_INT 6
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 564: LD_ADDR_EXP 50
 568: PUSH
 569: LD_INT 10
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 577: LD_ADDR_EXP 51
 581: PUSH
 582: LD_INT 11
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 590: LD_ADDR_EXP 52
 594: PUSH
 595: LD_INT 12
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 603: LD_ADDR_EXP 53
 607: PUSH
 608: LD_INT 13
 610: PPUSH
 611: CALL_OW 426
 615: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 616: LD_ADDR_EXP 54
 620: PUSH
 621: LD_INT 14
 623: PPUSH
 624: CALL_OW 426
 628: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 629: LD_ADDR_EXP 1
 633: PUSH
 634: LD_INT 15
 636: PPUSH
 637: CALL_OW 426
 641: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 642: LD_ADDR_EXP 2
 646: PUSH
 647: LD_INT 16
 649: PPUSH
 650: CALL_OW 426
 654: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 655: LD_ADDR_EXP 55
 659: PUSH
 660: LD_INT 17
 662: PPUSH
 663: CALL_OW 426
 667: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 668: LD_ADDR_EXP 56
 672: PUSH
 673: LD_INT 20
 675: PPUSH
 676: CALL_OW 426
 680: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 681: LD_ADDR_EXP 42
 685: PUSH
 686: LD_INT 21
 688: PPUSH
 689: CALL_OW 426
 693: ST_TO_ADDR
// def_spect := GetMultiplayerSetting ( 22 ) ;
 694: LD_ADDR_EXP 16
 698: PUSH
 699: LD_INT 22
 701: PPUSH
 702: CALL_OW 426
 706: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 707: LD_ADDR_EXP 18
 711: PUSH
 712: LD_INT 23
 714: PPUSH
 715: CALL_OW 426
 719: ST_TO_ADDR
// end else
 720: GO 878
// begin Randomize ;
 722: CALL_OW 10
// def_base_level := 2 ;
 726: LD_ADDR_EXP 43
 730: PUSH
 731: LD_INT 2
 733: ST_TO_ADDR
// def_amount_of_people := 0 ;
 734: LD_ADDR_EXP 44
 738: PUSH
 739: LD_INT 0
 741: ST_TO_ADDR
// def_skill_level := 1 ;
 742: LD_ADDR_EXP 45
 746: PUSH
 747: LD_INT 1
 749: ST_TO_ADDR
// def_starting_resources := 2 ;
 750: LD_ADDR_EXP 46
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_shipments_density := 1 ;
 758: LD_ADDR_EXP 47
 762: PUSH
 763: LD_INT 1
 765: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 766: LD_ADDR_EXP 48
 770: PUSH
 771: LD_INT 0
 773: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 774: LD_ADDR_EXP 49
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// def_shared_vision := 1 ;
 782: LD_ADDR_EXP 50
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// def_morale_flags := 1 ;
 790: LD_ADDR_EXP 51
 794: PUSH
 795: LD_INT 1
 797: ST_TO_ADDR
// def_siberite_detection := 1 ;
 798: LD_ADDR_EXP 52
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// def_people_respawning := 2 ;
 806: LD_ADDR_EXP 53
 810: PUSH
 811: LD_INT 2
 813: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 814: LD_ADDR_EXP 54
 818: PUSH
 819: LD_INT 3
 821: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 822: LD_ADDR_EXP 1
 826: PUSH
 827: LD_INT 0
 829: ST_TO_ADDR
// def_public_score := 0 ;
 830: LD_ADDR_EXP 2
 834: PUSH
 835: LD_INT 0
 837: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 838: LD_ADDR_EXP 55
 842: PUSH
 843: LD_INT 0
 845: ST_TO_ADDR
// def_builduptime := 0 ;
 846: LD_ADDR_EXP 56
 850: PUSH
 851: LD_INT 0
 853: ST_TO_ADDR
// def_game_rules := 1 ;
 854: LD_ADDR_EXP 42
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// def_spect := 1 ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// tech_level = 0 ;
 870: LD_ADDR_EXP 18
 874: PUSH
 875: LD_INT 0
 877: ST_TO_ADDR
// end ; InitGameRules ;
 878: CALL 9496 0 0
// if def_game_rules = 0 then
 882: LD_EXP 42
 886: PUSH
 887: LD_INT 0
 889: EQUAL
 890: IFFALSE 917
// begin if isSGUI then
 892: LD_OWVAR 83
 896: IFFALSE 904
// setMpTechs ( ) else
 898: CALL 12946 0 0
 902: GO 917
// begin SetMpTechLevel ( tech_level + 1 ) ;
 904: LD_EXP 18
 908: PUSH
 909: LD_INT 1
 911: PLUS
 912: PPUSH
 913: CALL 13093 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 917: LD_ADDR_EXP 3
 921: PUSH
 922: LD_INT 0
 924: PUSH
 925: LD_INT 1
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: PUSH
 936: LD_EXP 43
 940: PUSH
 941: LD_INT 1
 943: PLUS
 944: ARRAY
 945: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 946: LD_ADDR_EXP 4
 950: PUSH
 951: LD_INT 0
 953: PUSH
 954: LD_INT 0
 956: PUSH
 957: LD_INT 3
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: LIST
 964: PUSH
 965: LD_EXP 43
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 975: LD_ADDR_EXP 5
 979: PUSH
 980: LD_INT 9
 982: PUSH
 983: LD_INT 12
 985: PUSH
 986: LD_INT 15
 988: PUSH
 989: LD_INT 24
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: PUSH
 998: LD_EXP 44
1002: PUSH
1003: LD_INT 1
1005: PLUS
1006: ARRAY
1007: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
1008: LD_ADDR_EXP 6
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: LD_INT 3
1018: PUSH
1019: LD_INT 5
1021: PUSH
1022: LD_INT 6
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: PUSH
1031: LD_EXP 45
1035: PUSH
1036: LD_INT 1
1038: PLUS
1039: ARRAY
1040: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1041: LD_ADDR_EXP 8
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 0
1051: PUSH
1052: LD_INT 0
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_INT 30
1062: PUSH
1063: LD_INT 0
1065: PUSH
1066: LD_INT 0
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 50
1076: PUSH
1077: LD_INT 20
1079: PUSH
1080: LD_INT 0
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_INT 80
1090: PUSH
1091: LD_INT 40
1093: PUSH
1094: LD_INT 20
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_EXP 46
1112: PUSH
1113: LD_INT 1
1115: PLUS
1116: ARRAY
1117: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1118: LD_ADDR_EXP 7
1122: PUSH
1123: LD_INT 10
1125: PUSH
1126: EMPTY
1127: LIST
1128: PUSH
1129: LD_INT 7
1131: PUSH
1132: LD_INT 14
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: LD_INT 6
1141: PUSH
1142: LD_INT 12
1144: PUSH
1145: LD_INT 18
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 5
1155: PUSH
1156: LD_INT 10
1158: PUSH
1159: LD_INT 15
1161: PUSH
1162: LD_INT 20
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: LD_EXP 46
1181: PUSH
1182: LD_INT 1
1184: PLUS
1185: ARRAY
1186: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1187: LD_ADDR_EXP 9
1191: PUSH
1192: LD_INT 150
1194: PUSH
1195: LD_INT 125
1197: PUSH
1198: LD_INT 100
1200: PUSH
1201: LD_INT 50
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: LD_EXP 47
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ARRAY
1219: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1220: LD_ADDR_EXP 13
1224: PUSH
1225: LD_INT 0
1227: PUSH
1228: LD_INT 10500
1230: PUSH
1231: LD_INT 6300
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: PUSH
1239: LD_EXP 53
1243: PUSH
1244: LD_INT 1
1246: PLUS
1247: ARRAY
1248: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1249: LD_ADDR_EXP 14
1253: PUSH
1254: LD_INT 0
1256: PUSH
1257: LD_INT 31500
1259: PUSH
1260: LD_INT 10500
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_EXP 53
1272: PUSH
1273: LD_INT 1
1275: PLUS
1276: ARRAY
1277: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1278: LD_ADDR_EXP 11
1282: PUSH
1283: LD_INT 0
1285: PUSH
1286: LD_INT 3
1288: PUSH
1289: LD_INT 6
1291: PUSH
1292: LD_INT 9
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 54
1305: PUSH
1306: LD_INT 1
1308: PLUS
1309: ARRAY
1310: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1311: LD_ADDR_EXP 12
1315: PUSH
1316: LD_INT 30
1318: PUSH
1319: LD_INT 50
1321: PUSH
1322: LD_INT 80
1324: PUSH
1325: LD_INT 100
1327: PUSH
1328: LD_INT 130
1330: PUSH
1331: LD_INT 150
1333: PUSH
1334: LD_INT 200
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: PUSH
1346: LD_EXP 1
1350: PUSH
1351: LD_INT 1
1353: PLUS
1354: ARRAY
1355: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1356: LD_ADDR_EXP 10
1360: PUSH
1361: LD_INT 1
1363: NEG
1364: PUSH
1365: LD_INT 350
1367: PUSH
1368: LD_INT 700
1370: PUSH
1371: LD_INT 1400
1373: PUSH
1374: LD_INT 0
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: PUSH
1384: LD_EXP 51
1388: PUSH
1389: LD_INT 1
1391: PLUS
1392: ARRAY
1393: ST_TO_ADDR
// battle_flags_id := [ ] ;
1394: LD_ADDR_EXP 32
1398: PUSH
1399: EMPTY
1400: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1401: LD_ADDR_EXP 15
1405: PUSH
1406: LD_INT 0
1408: PUSH
1409: LD_INT 1
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PUSH
1416: LD_EXP 16
1420: PUSH
1421: LD_INT 1
1423: PLUS
1424: ARRAY
1425: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1426: LD_ADDR_EXP 17
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 63000
1439: PUSH
1440: LD_INT 126000
1442: PUSH
1443: LD_INT 189000
1445: PUSH
1446: LD_INT 252000
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 55
1461: PUSH
1462: LD_INT 1
1464: PLUS
1465: ARRAY
1466: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1467: LD_ADDR_EXP 40
1471: PUSH
1472: LD_INT 7
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_INT 9
1480: PUSH
1481: LD_INT 10
1483: PUSH
1484: LD_INT 11
1486: PUSH
1487: LD_INT 12
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: ST_TO_ADDR
// end ;
1498: LD_VAR 0 1
1502: RET
// function init_map ; var i , j ; begin
1503: LD_INT 0
1505: PPUSH
1506: PPUSH
1507: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1508: LD_ADDR_EXP 28
1512: PUSH
1513: LD_INT 12
1515: PUSH
1516: LD_INT 4
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 45
1525: PUSH
1526: LD_INT 81
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 116
1535: PUSH
1536: LD_INT 195
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 142
1545: PUSH
1546: LD_INT 4
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 201
1555: PUSH
1556: LD_INT 102
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 234
1565: PUSH
1566: LD_INT 194
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1581: LD_ADDR_EXP 29
1585: PUSH
1586: LD_INT 12
1588: PUSH
1589: LD_INT 4
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 16
1598: PUSH
1599: LD_INT 25
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PUSH
1610: LD_INT 45
1612: PUSH
1613: LD_INT 81
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 60
1622: PUSH
1623: LD_INT 102
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: LD_INT 116
1636: PUSH
1637: LD_INT 195
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: PUSH
1644: LD_INT 92
1646: PUSH
1647: LD_INT 167
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: PUSH
1658: LD_INT 142
1660: PUSH
1661: LD_INT 4
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 167
1670: PUSH
1671: LD_INT 24
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 201
1684: PUSH
1685: LD_INT 102
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: LD_INT 190
1694: PUSH
1695: LD_INT 77
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 234
1708: PUSH
1709: LD_INT 194
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 237
1718: PUSH
1719: LD_INT 171
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1738: LD_ADDR_EXP 30
1742: PUSH
1743: LD_INT 10
1745: PUSH
1746: LD_INT 10
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 51
1755: PUSH
1756: LD_INT 93
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 102
1765: PUSH
1766: LD_INT 187
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 158
1775: PUSH
1776: LD_INT 6
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PUSH
1783: LD_INT 203
1785: PUSH
1786: LD_INT 93
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 252
1795: PUSH
1796: LD_INT 194
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1811: LD_ADDR_EXP 31
1815: PUSH
1816: LD_INT 10
1818: PUSH
1819: LD_INT 10
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PUSH
1826: LD_INT 36
1828: PUSH
1829: LD_INT 10
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 51
1842: PUSH
1843: LD_INT 93
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 47
1852: PUSH
1853: LD_INT 72
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: LD_INT 102
1866: PUSH
1867: LD_INT 187
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 93
1876: PUSH
1877: LD_INT 175
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 158
1890: PUSH
1891: LD_INT 6
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 147
1900: PUSH
1901: LD_INT 5
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: LD_INT 203
1914: PUSH
1915: LD_INT 93
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: PUSH
1922: LD_INT 173
1924: PUSH
1925: LD_INT 71
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 252
1938: PUSH
1939: LD_INT 194
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 243
1948: PUSH
1949: LD_INT 177
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1968: LD_ADDR_EXP 25
1972: PUSH
1973: LD_INT 23
1975: PUSH
1976: LD_INT 15
1978: PUSH
1979: LD_INT 2
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: PUSH
1987: LD_INT 56
1989: PUSH
1990: LD_INT 85
1992: PUSH
1993: LD_INT 1
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 110
2003: PUSH
2004: LD_INT 177
2006: PUSH
2007: LD_INT 3
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 157
2017: PUSH
2018: LD_INT 13
2020: PUSH
2021: LD_INT 3
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 187
2031: PUSH
2032: LD_INT 87
2034: PUSH
2035: LD_INT 5
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 231
2045: PUSH
2046: LD_INT 181
2048: PUSH
2049: LD_INT 5
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
2065: LD_ADDR_EXP 27
2069: PUSH
2070: LD_INT 30
2072: PUSH
2073: LD_INT 22
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 58
2082: PUSH
2083: LD_INT 82
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: LD_INT 113
2092: PUSH
2093: LD_INT 180
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 151
2102: PUSH
2103: LD_INT 24
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 183
2112: PUSH
2113: LD_INT 90
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: PUSH
2120: LD_INT 223
2122: PUSH
2123: LD_INT 180
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
2138: LD_ADDR_EXP 26
2142: PUSH
2143: LD_INT 33
2145: PUSH
2146: LD_INT 12
2148: PUSH
2149: LD_INT 5
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: LIST
2156: PUSH
2157: LD_INT 42
2159: PUSH
2160: LD_INT 29
2162: PUSH
2163: LD_INT 4
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: PUSH
2171: LD_INT 36
2173: PUSH
2174: LD_INT 20
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: PUSH
2190: LD_INT 72
2192: PUSH
2193: LD_INT 91
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 65
2206: PUSH
2207: LD_INT 78
2209: PUSH
2210: LD_INT 4
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: PUSH
2218: LD_INT 75
2220: PUSH
2221: LD_INT 100
2223: PUSH
2224: LD_INT 3
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: PUSH
2237: LD_INT 102
2239: PUSH
2240: LD_INT 165
2242: PUSH
2243: LD_INT 3
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: PUSH
2251: LD_INT 122
2253: PUSH
2254: LD_INT 176
2256: PUSH
2257: LD_INT 4
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 120
2267: PUSH
2268: LD_INT 184
2270: PUSH
2271: LD_INT 4
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: LD_INT 134
2286: PUSH
2287: LD_INT 16
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 132
2300: PUSH
2301: LD_INT 5
2303: PUSH
2304: LD_INT 1
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 157
2314: PUSH
2315: LD_INT 27
2317: PUSH
2318: LD_INT 5
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: PUSH
2331: LD_INT 172
2333: PUSH
2334: LD_INT 77
2336: PUSH
2337: LD_INT 1
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 175
2347: PUSH
2348: LD_INT 96
2350: PUSH
2351: LD_INT 1
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 192
2361: PUSH
2362: LD_INT 104
2364: PUSH
2365: LD_INT 1
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 216
2380: PUSH
2381: LD_INT 179
2383: PUSH
2384: LD_INT 1
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_INT 208
2394: PUSH
2395: LD_INT 160
2397: PUSH
2398: LD_INT 2
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 208
2408: PUSH
2409: LD_INT 171
2411: PUSH
2412: LD_INT 2
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: LIST
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: ST_TO_ADDR
// for i = 1 to 6 do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: DOUBLE
2439: LD_INT 1
2441: DEC
2442: ST_TO_ADDR
2443: LD_INT 6
2445: PUSH
2446: FOR_TO
2447: IFFALSE 2544
// if def_extra_oil_deposits then
2449: LD_EXP 48
2453: IFFALSE 2505
// for j in extra_oil_deposits_locations [ i ] do
2455: LD_ADDR_VAR 0 3
2459: PUSH
2460: LD_EXP 29
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: PUSH
2471: FOR_IN
2472: IFFALSE 2501
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2474: LD_VAR 0 3
2478: PUSH
2479: LD_INT 1
2481: ARRAY
2482: PPUSH
2483: LD_VAR 0 3
2487: PUSH
2488: LD_INT 2
2490: ARRAY
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 62
2499: GO 2471
2501: POP
2502: POP
2503: GO 2542
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2505: LD_EXP 28
2509: PUSH
2510: LD_VAR 0 2
2514: ARRAY
2515: PUSH
2516: LD_INT 1
2518: ARRAY
2519: PPUSH
2520: LD_EXP 28
2524: PUSH
2525: LD_VAR 0 2
2529: ARRAY
2530: PUSH
2531: LD_INT 2
2533: ARRAY
2534: PPUSH
2535: LD_INT 2
2537: PPUSH
2538: CALL_OW 62
2542: GO 2446
2544: POP
2545: POP
// if def_extra_sib_deposits then
2546: LD_EXP 49
2550: IFFALSE 2669
// for i = 1 to 6 do
2552: LD_ADDR_VAR 0 2
2556: PUSH
2557: DOUBLE
2558: LD_INT 1
2560: DEC
2561: ST_TO_ADDR
2562: LD_INT 6
2564: PUSH
2565: FOR_TO
2566: IFFALSE 2667
// if def_extra_sib_deposits = 2 then
2568: LD_EXP 49
2572: PUSH
2573: LD_INT 2
2575: EQUAL
2576: IFFALSE 2628
// for j in extra_sib_deposits_locations [ i ] do
2578: LD_ADDR_VAR 0 3
2582: PUSH
2583: LD_EXP 31
2587: PUSH
2588: LD_VAR 0 2
2592: ARRAY
2593: PUSH
2594: FOR_IN
2595: IFFALSE 2624
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2597: LD_VAR 0 3
2601: PUSH
2602: LD_INT 1
2604: ARRAY
2605: PPUSH
2606: LD_VAR 0 3
2610: PUSH
2611: LD_INT 2
2613: ARRAY
2614: PPUSH
2615: LD_INT 3
2617: PPUSH
2618: CALL_OW 62
2622: GO 2594
2624: POP
2625: POP
2626: GO 2665
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2628: LD_EXP 30
2632: PUSH
2633: LD_VAR 0 2
2637: ARRAY
2638: PUSH
2639: LD_INT 1
2641: ARRAY
2642: PPUSH
2643: LD_EXP 30
2647: PUSH
2648: LD_VAR 0 2
2652: ARRAY
2653: PUSH
2654: LD_INT 2
2656: ARRAY
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: CALL_OW 62
2665: GO 2565
2667: POP
2668: POP
// end ;
2669: LD_VAR 0 1
2673: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
// if not Team_Game then
2679: LD_EXP 23
2683: NOT
2684: IFFALSE 2782
// begin for i = 1 to 8 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 8
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2778
// for j = 1 to 8 do
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: DOUBLE
2708: LD_INT 1
2710: DEC
2711: ST_TO_ADDR
2712: LD_INT 8
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2774
// if i <> j then
2718: LD_VAR 0 2
2722: PUSH
2723: LD_VAR 0 3
2727: NONEQUAL
2728: IFFALSE 2752
// SetAttitude ( i , j , att_neutral , true ) else
2730: LD_VAR 0 2
2734: PPUSH
2735: LD_VAR 0 3
2739: PPUSH
2740: LD_INT 0
2742: PPUSH
2743: LD_INT 1
2745: PPUSH
2746: CALL_OW 80
2750: GO 2772
// SetAttitude ( i , j , att_friend , true ) ;
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_VAR 0 3
2761: PPUSH
2762: LD_INT 1
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL_OW 80
2772: GO 2715
2774: POP
2775: POP
2776: GO 2699
2778: POP
2779: POP
// end else
2780: GO 2957
// begin if def_shared_vision then
2782: LD_EXP 50
2786: IFFALSE 2851
// begin for i in Teams do
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: LD_EXP 20
2797: PUSH
2798: FOR_IN
2799: IFFALSE 2849
// for j = 2 to i do
2801: LD_ADDR_VAR 0 3
2805: PUSH
2806: DOUBLE
2807: LD_INT 2
2809: DEC
2810: ST_TO_ADDR
2811: LD_VAR 0 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2845
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2819: LD_VAR 0 2
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 2
2834: PUSH
2835: LD_INT 1
2837: ARRAY
2838: PPUSH
2839: CALL_OW 343
2843: GO 2816
2845: POP
2846: POP
2847: GO 2798
2849: POP
2850: POP
// end ; for i = 1 to 8 do
2851: LD_ADDR_VAR 0 2
2855: PUSH
2856: DOUBLE
2857: LD_INT 1
2859: DEC
2860: ST_TO_ADDR
2861: LD_INT 8
2863: PUSH
2864: FOR_TO
2865: IFFALSE 2955
// for j = 1 to 8 do
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: DOUBLE
2873: LD_INT 1
2875: DEC
2876: ST_TO_ADDR
2877: LD_INT 8
2879: PUSH
2880: FOR_TO
2881: IFFALSE 2951
// if Side_Teams [ i ] = Side_Teams [ j ] then
2883: LD_EXP 19
2887: PUSH
2888: LD_VAR 0 2
2892: ARRAY
2893: PUSH
2894: LD_EXP 19
2898: PUSH
2899: LD_VAR 0 3
2903: ARRAY
2904: EQUAL
2905: IFFALSE 2929
// SetAttitude ( i , j , att_friend , true ) else
2907: LD_VAR 0 2
2911: PPUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 1
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 80
2927: GO 2949
// SetAttitude ( i , j , att_enemy , true ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 2
2941: PPUSH
2942: LD_INT 1
2944: PPUSH
2945: CALL_OW 80
2949: GO 2880
2951: POP
2952: POP
2953: GO 2864
2955: POP
2956: POP
// end ; end ;
2957: LD_VAR 0 1
2961: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2962: LD_INT 0
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// result := [ ] ;
2968: LD_ADDR_VAR 0 7
2972: PUSH
2973: EMPTY
2974: ST_TO_ADDR
// for i := 1 to count do
2975: LD_ADDR_VAR 0 8
2979: PUSH
2980: DOUBLE
2981: LD_INT 1
2983: DEC
2984: ST_TO_ADDR
2985: LD_VAR 0 1
2989: PUSH
2990: FOR_TO
2991: IFFALSE 3409
// begin uc_direction := Rand ( 0 , 5 ) ;
2993: LD_ADDR_OWVAR 24
2997: PUSH
2998: LD_INT 0
3000: PPUSH
3001: LD_INT 5
3003: PPUSH
3004: CALL_OW 12
3008: ST_TO_ADDR
// if commander then
3009: LD_LOC 1
3013: IFFALSE 3122
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3015: LD_ADDR_OWVAR 26
3019: PUSH
3020: LD_OWVAR 19
3024: PUSH
3025: LD_OWVAR 20
3029: ARRAY
3030: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 2
3036: PPUSH
3037: CALL_OW 12
3041: PPUSH
3042: LD_VAR 0 2
3046: PPUSH
3047: LD_EXP 6
3051: PUSH
3052: LD_INT 2
3054: PLUS
3055: PPUSH
3056: CALL_OW 380
// hc_importance := 105 ;
3060: LD_ADDR_OWVAR 32
3064: PUSH
3065: LD_INT 105
3067: ST_TO_ADDR
// commander := false ;
3068: LD_ADDR_LOC 1
3072: PUSH
3073: LD_INT 0
3075: ST_TO_ADDR
// if Multiplayer then
3076: LD_OWVAR 4
3080: IFFALSE 3120
// begin hc_gallery := MULTIAVATARS ;
3082: LD_ADDR_OWVAR 33
3086: PUSH
3087: LD_STRING MULTIAVATARS
3089: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3090: LD_ADDR_OWVAR 34
3094: PUSH
3095: LD_OWVAR 20
3099: PPUSH
3100: CALL_OW 525
3104: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3105: LD_ADDR_OWVAR 27
3109: PUSH
3110: LD_OWVAR 20
3114: PPUSH
3115: CALL_OW 526
3119: ST_TO_ADDR
// end ; end else
3120: GO 3185
// begin hc_name :=  ;
3122: LD_ADDR_OWVAR 26
3126: PUSH
3127: LD_STRING 
3129: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3130: LD_INT 1
3132: PPUSH
3133: LD_INT 2
3135: PPUSH
3136: CALL_OW 12
3140: PPUSH
3141: LD_VAR 0 2
3145: PPUSH
3146: LD_EXP 6
3150: PPUSH
3151: CALL_OW 380
// hc_importance := 0 ;
3155: LD_ADDR_OWVAR 32
3159: PUSH
3160: LD_INT 0
3162: ST_TO_ADDR
// if Multiplayer then
3163: LD_OWVAR 4
3167: IFFALSE 3185
// begin hc_gallery :=  ;
3169: LD_ADDR_OWVAR 33
3173: PUSH
3174: LD_STRING 
3176: ST_TO_ADDR
// hc_face_number := 0 ;
3177: LD_ADDR_OWVAR 34
3181: PUSH
3182: LD_INT 0
3184: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3185: LD_ADDR_VAR 0 10
3189: PUSH
3190: CALL_OW 44
3194: ST_TO_ADDR
// if global_defined then
3195: LD_LOC 3
3199: IFFALSE 3339
// begin if ( cl = class_soldier ) then
3201: LD_VAR 0 2
3205: PUSH
3206: LD_INT 1
3208: EQUAL
3209: IFFALSE 3229
// j := i + soldiers_created else
3211: LD_ADDR_VAR 0 9
3215: PUSH
3216: LD_VAR 0 8
3220: PUSH
3221: LD_LOC 4
3225: PLUS
3226: ST_TO_ADDR
3227: GO 3239
// j := i ;
3229: LD_ADDR_VAR 0 9
3233: PUSH
3234: LD_VAR 0 8
3238: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3239: LD_LOC 2
3243: PUSH
3244: LD_VAR 0 2
3248: ARRAY
3249: PUSH
3250: LD_VAR 0 9
3254: ARRAY
3255: PPUSH
3256: LD_VAR 0 10
3260: PPUSH
3261: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3265: LD_VAR 0 10
3269: PPUSH
3270: LD_INT 2
3272: PPUSH
3273: LD_LOC 2
3277: PUSH
3278: LD_VAR 0 2
3282: ARRAY
3283: PUSH
3284: LD_VAR 0 9
3288: ARRAY
3289: PPUSH
3290: LD_INT 2
3292: PPUSH
3293: CALL_OW 260
3297: PPUSH
3298: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3302: LD_VAR 0 10
3306: PPUSH
3307: LD_INT 1
3309: PPUSH
3310: LD_LOC 2
3314: PUSH
3315: LD_VAR 0 2
3319: ARRAY
3320: PUSH
3321: LD_VAR 0 9
3325: ARRAY
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: CALL_OW 260
3334: PPUSH
3335: CALL_OW 239
// end ; if building then
3339: LD_VAR 0 6
3343: IFFALSE 3361
// PlaceHumanInUnit ( un , building ) else
3345: LD_VAR 0 10
3349: PPUSH
3350: LD_VAR 0 6
3354: PPUSH
3355: CALL_OW 52
3359: GO 3388
// PlaceUnitXYR ( un , x , y , r , false ) ;
3361: LD_VAR 0 10
3365: PPUSH
3366: LD_VAR 0 3
3370: PPUSH
3371: LD_VAR 0 4
3375: PPUSH
3376: LD_VAR 0 5
3380: PPUSH
3381: LD_INT 0
3383: PPUSH
3384: CALL_OW 50
// result := result ^ [ un ] ;
3388: LD_ADDR_VAR 0 7
3392: PUSH
3393: LD_VAR 0 7
3397: PUSH
3398: LD_VAR 0 10
3402: PUSH
3403: EMPTY
3404: LIST
3405: ADD
3406: ST_TO_ADDR
// end ;
3407: GO 2990
3409: POP
3410: POP
// if not global_defined then
3411: LD_LOC 3
3415: NOT
3416: IFFALSE 3494
// if ( global_units >= cl ) then
3418: LD_LOC 2
3422: PUSH
3423: LD_VAR 0 2
3427: GREATEREQUAL
3428: IFFALSE 3469
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3430: LD_ADDR_LOC 2
3434: PUSH
3435: LD_LOC 2
3439: PPUSH
3440: LD_VAR 0 2
3444: PPUSH
3445: LD_LOC 2
3449: PUSH
3450: LD_VAR 0 2
3454: ARRAY
3455: PUSH
3456: LD_VAR 0 7
3460: ADD
3461: PPUSH
3462: CALL_OW 1
3466: ST_TO_ADDR
3467: GO 3494
// global_units := Replace ( global_units , cl , result ) ;
3469: LD_ADDR_LOC 2
3473: PUSH
3474: LD_LOC 2
3478: PPUSH
3479: LD_VAR 0 2
3483: PPUSH
3484: LD_VAR 0 7
3488: PPUSH
3489: CALL_OW 1
3493: ST_TO_ADDR
// end ;
3494: LD_VAR 0 7
3498: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3499: LD_INT 0
3501: PPUSH
3502: PPUSH
3503: PPUSH
3504: PPUSH
3505: PPUSH
3506: PPUSH
3507: PPUSH
3508: PPUSH
3509: PPUSH
// pos := Side_Positions [ side ] ;
3510: LD_ADDR_VAR 0 3
3514: PUSH
3515: LD_EXP 21
3519: PUSH
3520: LD_VAR 0 1
3524: ARRAY
3525: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3526: LD_ADDR_OWVAR 21
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_VAR 0 1
3540: ARRAY
3541: ST_TO_ADDR
// uc_side := side ;
3542: LD_ADDR_OWVAR 20
3546: PUSH
3547: LD_VAR 0 1
3551: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3552: LD_ADDR_VAR 0 4
3556: PUSH
3557: LD_EXP 25
3561: PUSH
3562: LD_VAR 0 3
3566: ARRAY
3567: PUSH
3568: LD_INT 1
3570: ARRAY
3571: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3572: LD_ADDR_VAR 0 5
3576: PUSH
3577: LD_EXP 25
3581: PUSH
3582: LD_VAR 0 3
3586: ARRAY
3587: PUSH
3588: LD_INT 2
3590: ARRAY
3591: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3592: LD_ADDR_VAR 0 6
3596: PUSH
3597: LD_EXP 25
3601: PUSH
3602: LD_VAR 0 3
3606: ARRAY
3607: PUSH
3608: LD_INT 3
3610: ARRAY
3611: ST_TO_ADDR
// if is_depot then
3612: LD_EXP 3
3616: IFFALSE 3749
// begin bc_type = b_depot ;
3618: LD_ADDR_OWVAR 42
3622: PUSH
3623: LD_INT 0
3625: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3626: LD_ADDR_VAR 0 10
3630: PUSH
3631: LD_VAR 0 4
3635: PPUSH
3636: LD_VAR 0 5
3640: PPUSH
3641: LD_VAR 0 6
3645: PPUSH
3646: CALL_OW 47
3650: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3651: LD_VAR 0 10
3655: PPUSH
3656: LD_STRING @
3658: PUSH
3659: LD_VAR 0 1
3663: STR
3664: PPUSH
3665: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3669: LD_VAR 0 10
3673: PPUSH
3674: CALL_OW 274
3678: PPUSH
3679: LD_INT 1
3681: PPUSH
3682: LD_EXP 8
3686: PUSH
3687: LD_INT 1
3689: ARRAY
3690: PPUSH
3691: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3695: LD_VAR 0 10
3699: PPUSH
3700: CALL_OW 274
3704: PPUSH
3705: LD_INT 2
3707: PPUSH
3708: LD_EXP 8
3712: PUSH
3713: LD_INT 2
3715: ARRAY
3716: PPUSH
3717: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3721: LD_VAR 0 10
3725: PPUSH
3726: CALL_OW 274
3730: PPUSH
3731: LD_INT 3
3733: PPUSH
3734: LD_EXP 8
3738: PUSH
3739: LD_INT 3
3741: ARRAY
3742: PPUSH
3743: CALL_OW 277
// end else
3747: GO 3893
// begin for i := 1 to 3 do
3749: LD_ADDR_VAR 0 7
3753: PUSH
3754: DOUBLE
3755: LD_INT 1
3757: DEC
3758: ST_TO_ADDR
3759: LD_INT 3
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3891
// begin r := starting_resources [ i ] ;
3765: LD_ADDR_VAR 0 8
3769: PUSH
3770: LD_EXP 8
3774: PUSH
3775: LD_VAR 0 7
3779: ARRAY
3780: ST_TO_ADDR
// while r >= 10 do
3781: LD_VAR 0 8
3785: PUSH
3786: LD_INT 10
3788: GREATEREQUAL
3789: IFFALSE 3889
// if r > 50 then
3791: LD_VAR 0 8
3795: PUSH
3796: LD_INT 50
3798: GREATER
3799: IFFALSE 3845
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3801: LD_VAR 0 7
3805: PPUSH
3806: LD_INT 5
3808: PPUSH
3809: LD_VAR 0 4
3813: PPUSH
3814: LD_VAR 0 5
3818: PPUSH
3819: LD_INT 4
3821: PPUSH
3822: LD_INT 0
3824: PPUSH
3825: CALL_OW 60
// r := r - 50 ;
3829: LD_ADDR_VAR 0 8
3833: PUSH
3834: LD_VAR 0 8
3838: PUSH
3839: LD_INT 50
3841: MINUS
3842: ST_TO_ADDR
// end else
3843: GO 3887
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3845: LD_VAR 0 7
3849: PPUSH
3850: LD_VAR 0 8
3854: PUSH
3855: LD_INT 10
3857: DIV
3858: PPUSH
3859: LD_VAR 0 4
3863: PPUSH
3864: LD_VAR 0 5
3868: PPUSH
3869: LD_INT 4
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL_OW 60
// r := 0 ;
3879: LD_ADDR_VAR 0 8
3883: PUSH
3884: LD_INT 0
3886: ST_TO_ADDR
// end ;
3887: GO 3781
// end ;
3889: GO 3762
3891: POP
3892: POP
// end ; for r in starting_crates do
3893: LD_ADDR_VAR 0 8
3897: PUSH
3898: LD_EXP 7
3902: PUSH
3903: FOR_IN
3904: IFFALSE 3936
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3906: LD_INT 1
3908: PPUSH
3909: LD_INT 5
3911: PPUSH
3912: LD_VAR 0 4
3916: PPUSH
3917: LD_VAR 0 5
3921: PPUSH
3922: LD_VAR 0 8
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: CALL_OW 60
3934: GO 3903
3936: POP
3937: POP
// if def_morale_flags then
3938: LD_EXP 51
3942: IFFALSE 4081
// begin x := start_def [ pos ] [ 1 ] ;
3944: LD_ADDR_VAR 0 4
3948: PUSH
3949: LD_EXP 27
3953: PUSH
3954: LD_VAR 0 3
3958: ARRAY
3959: PUSH
3960: LD_INT 1
3962: ARRAY
3963: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3964: LD_ADDR_VAR 0 5
3968: PUSH
3969: LD_EXP 27
3973: PUSH
3974: LD_VAR 0 3
3978: ARRAY
3979: PUSH
3980: LD_INT 2
3982: ARRAY
3983: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3984: LD_VAR 0 4
3988: PPUSH
3989: LD_VAR 0 5
3993: PPUSH
3994: LD_INT 12
3996: PPUSH
3997: LD_INT 2
3999: PPUSH
4000: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4004: LD_ADDR_EXP 32
4008: PUSH
4009: LD_EXP 32
4013: PUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_VAR 0 4
4023: PPUSH
4024: LD_VAR 0 5
4028: PPUSH
4029: LD_INT 1
4031: PUSH
4032: LD_INT 100
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 2
4041: PUSH
4042: LD_INT 50
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 3
4051: PUSH
4052: LD_INT 20
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 20
4061: PUSH
4062: LD_INT 100
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: PPUSH
4075: CALL_OW 418
4079: ADD
4080: ST_TO_ADDR
// end ; commander := true ;
4081: LD_ADDR_LOC 1
4085: PUSH
4086: LD_INT 1
4088: ST_TO_ADDR
// soldiers_created := 0 ;
4089: LD_ADDR_LOC 4
4093: PUSH
4094: LD_INT 0
4096: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4097: LD_ADDR_VAR 0 7
4101: PUSH
4102: DOUBLE
4103: LD_INT 1
4105: DEC
4106: ST_TO_ADDR
4107: LD_EXP 4
4111: PUSH
4112: FOR_TO
4113: IFFALSE 4266
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4115: LD_ADDR_VAR 0 4
4119: PUSH
4120: LD_EXP 26
4124: PUSH
4125: LD_VAR 0 3
4129: ARRAY
4130: PUSH
4131: LD_VAR 0 7
4135: ARRAY
4136: PUSH
4137: LD_INT 1
4139: ARRAY
4140: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4141: LD_ADDR_VAR 0 5
4145: PUSH
4146: LD_EXP 26
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_VAR 0 7
4161: ARRAY
4162: PUSH
4163: LD_INT 2
4165: ARRAY
4166: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4167: LD_ADDR_VAR 0 6
4171: PUSH
4172: LD_EXP 26
4176: PUSH
4177: LD_VAR 0 3
4181: ARRAY
4182: PUSH
4183: LD_VAR 0 7
4187: ARRAY
4188: PUSH
4189: LD_INT 3
4191: ARRAY
4192: ST_TO_ADDR
// bc_type := b_breastwork ;
4193: LD_ADDR_OWVAR 42
4197: PUSH
4198: LD_INT 31
4200: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4201: LD_ADDR_VAR 0 9
4205: PUSH
4206: LD_VAR 0 4
4210: PPUSH
4211: LD_VAR 0 5
4215: PPUSH
4216: LD_VAR 0 6
4220: PPUSH
4221: CALL_OW 47
4225: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4226: LD_INT 1
4228: PPUSH
4229: LD_INT 1
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: LD_INT 0
4237: PPUSH
4238: LD_INT 0
4240: PPUSH
4241: LD_VAR 0 9
4245: PPUSH
4246: CALL 2962 0 6
// soldiers_created := soldiers_created + 1 ;
4250: LD_ADDR_LOC 4
4254: PUSH
4255: LD_LOC 4
4259: PUSH
4260: LD_INT 1
4262: PLUS
4263: ST_TO_ADDR
// end ;
4264: GO 4112
4266: POP
4267: POP
// x := start_def [ pos ] [ 1 ] ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: LD_EXP 27
4277: PUSH
4278: LD_VAR 0 3
4282: ARRAY
4283: PUSH
4284: LD_INT 1
4286: ARRAY
4287: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4288: LD_ADDR_VAR 0 5
4292: PUSH
4293: LD_EXP 27
4297: PUSH
4298: LD_VAR 0 3
4302: ARRAY
4303: PUSH
4304: LD_INT 2
4306: ARRAY
4307: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4308: LD_LOC 8
4312: PUSH
4313: LD_EXP 4
4317: MINUS
4318: PPUSH
4319: LD_INT 1
4321: PPUSH
4322: LD_VAR 0 4
4326: PPUSH
4327: LD_VAR 0 5
4331: PPUSH
4332: LD_INT 5
4334: PPUSH
4335: LD_INT 0
4337: PPUSH
4338: CALL 2962 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4342: LD_LOC 5
4346: PPUSH
4347: LD_INT 2
4349: PPUSH
4350: LD_VAR 0 4
4354: PPUSH
4355: LD_VAR 0 5
4359: PPUSH
4360: LD_INT 5
4362: PPUSH
4363: LD_INT 0
4365: PPUSH
4366: CALL 2962 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4370: LD_LOC 7
4374: PPUSH
4375: LD_INT 3
4377: PPUSH
4378: LD_VAR 0 4
4382: PPUSH
4383: LD_VAR 0 5
4387: PPUSH
4388: LD_INT 5
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL 2962 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4398: LD_LOC 6
4402: PPUSH
4403: LD_INT 4
4405: PPUSH
4406: LD_VAR 0 4
4410: PPUSH
4411: LD_VAR 0 5
4415: PPUSH
4416: LD_INT 5
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL 2962 0 6
// if def_siberite_detection then
4426: LD_EXP 52
4430: IFFALSE 4447
// SetTech ( tech_SibDet , side , state_researched ) ;
4432: LD_INT 20
4434: PPUSH
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_INT 2
4442: PPUSH
4443: CALL_OW 322
// if def_siberite_bomb = 1 then
4447: LD_EXP 55
4451: PUSH
4452: LD_INT 1
4454: EQUAL
4455: IFFALSE 4489
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4457: LD_INT 25
4459: PPUSH
4460: LD_VAR 0 1
4464: PPUSH
4465: LD_INT 1
4467: PPUSH
4468: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4472: LD_INT 73
4474: PPUSH
4475: LD_VAR 0 1
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: CALL_OW 322
// end else
4487: GO 4519
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4489: LD_INT 25
4491: PPUSH
4492: LD_VAR 0 1
4496: PPUSH
4497: LD_INT 0
4499: PPUSH
4500: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4504: LD_INT 73
4506: PPUSH
4507: LD_VAR 0 1
4511: PPUSH
4512: LD_INT 0
4514: PPUSH
4515: CALL_OW 322
// end ; global_defined := true ;
4519: LD_ADDR_LOC 3
4523: PUSH
4524: LD_INT 1
4526: ST_TO_ADDR
// end ;
4527: LD_VAR 0 2
4531: RET
// every 0 0$1 do
4532: GO 4534
4534: DISABLE
// if ( def_siberite_bomb > 1 ) then
4535: LD_EXP 55
4539: PUSH
4540: LD_INT 1
4542: GREATER
4543: IFFALSE 4558
// begin wait ( siberite_bomb_Delay ) ;
4545: LD_EXP 17
4549: PPUSH
4550: CALL_OW 67
// EnableSibFiss ;
4554: CALL 4559 0 0
// end ;
4558: END
// function EnableSibFiss ; var i ; begin
4559: LD_INT 0
4561: PPUSH
4562: PPUSH
// for i := 1 to 8 do
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: DOUBLE
4569: LD_INT 1
4571: DEC
4572: ST_TO_ADDR
4573: LD_INT 8
4575: PUSH
4576: FOR_TO
4577: IFFALSE 4623
// if Side_Positions [ i ] then
4579: LD_EXP 21
4583: PUSH
4584: LD_VAR 0 2
4588: ARRAY
4589: IFFALSE 4621
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4591: LD_INT 25
4593: PPUSH
4594: LD_VAR 0 2
4598: PPUSH
4599: LD_INT 1
4601: PPUSH
4602: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4606: LD_INT 73
4608: PPUSH
4609: LD_VAR 0 2
4613: PPUSH
4614: LD_INT 1
4616: PPUSH
4617: CALL_OW 322
// end ;
4621: GO 4576
4623: POP
4624: POP
// end ;
4625: LD_VAR 0 1
4629: RET
// function prepare_sides ; var i ; begin
4630: LD_INT 0
4632: PPUSH
4633: PPUSH
// global_units := [ ] ;
4634: LD_ADDR_LOC 2
4638: PUSH
4639: EMPTY
4640: ST_TO_ADDR
// global_defined := false ;
4641: LD_ADDR_LOC 3
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// CountClassMembers ;
4649: CALL 4699 0 0
// for i := 1 to 8 do
4653: LD_ADDR_VAR 0 2
4657: PUSH
4658: DOUBLE
4659: LD_INT 1
4661: DEC
4662: ST_TO_ADDR
4663: LD_INT 8
4665: PUSH
4666: FOR_TO
4667: IFFALSE 4692
// if Side_Positions [ i ] then
4669: LD_EXP 21
4673: PUSH
4674: LD_VAR 0 2
4678: ARRAY
4679: IFFALSE 4690
// prepare_side ( i ) ;
4681: LD_VAR 0 2
4685: PPUSH
4686: CALL 3499 0 1
4690: GO 4666
4692: POP
4693: POP
// end ;
4694: LD_VAR 0 1
4698: RET
// function CountClassMembers ; var Mode ; begin
4699: LD_INT 0
4701: PPUSH
4702: PPUSH
// if No_Mechs then
4703: LD_EXP 57
4707: IFFALSE 4719
// Mode := 2 else
4709: LD_ADDR_VAR 0 2
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
4717: GO 4727
// Mode := 1 ;
4719: LD_ADDR_VAR 0 2
4723: PUSH
4724: LD_INT 1
4726: ST_TO_ADDR
// neng := number_of_people ;
4727: LD_ADDR_LOC 5
4731: PUSH
4732: LD_EXP 5
4736: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4737: LD_ADDR_LOC 8
4741: PUSH
4742: LD_LOC 5
4746: PUSH
4747: LD_INT 4
4749: PUSH
4750: LD_INT 3
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_VAR 0 2
4761: ARRAY
4762: DIV
4763: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4764: LD_LOC 8
4768: PUSH
4769: LD_EXP 4
4773: LESS
4774: IFFALSE 4786
// nsol := number_of_breastworks ;
4776: LD_ADDR_LOC 8
4780: PUSH
4781: LD_EXP 4
4785: ST_TO_ADDR
// neng := neng - nsol ;
4786: LD_ADDR_LOC 5
4790: PUSH
4791: LD_LOC 5
4795: PUSH
4796: LD_LOC 8
4800: MINUS
4801: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4802: LD_ADDR_LOC 6
4806: PUSH
4807: LD_LOC 5
4811: PUSH
4812: LD_INT 3
4814: PUSH
4815: LD_INT 2
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_VAR 0 2
4826: ARRAY
4827: DIV
4828: ST_TO_ADDR
// if ( nsci < 1 ) then
4829: LD_LOC 6
4833: PUSH
4834: LD_INT 1
4836: LESS
4837: IFFALSE 4847
// nsci := 1 ;
4839: LD_ADDR_LOC 6
4843: PUSH
4844: LD_INT 1
4846: ST_TO_ADDR
// neng := neng - nsci ;
4847: LD_ADDR_LOC 5
4851: PUSH
4852: LD_LOC 5
4856: PUSH
4857: LD_LOC 6
4861: MINUS
4862: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4863: LD_ADDR_LOC 7
4867: PUSH
4868: LD_LOC 5
4872: PUSH
4873: LD_INT 2
4875: DIV
4876: PUSH
4877: LD_INT 0
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_VAR 0 2
4888: ARRAY
4889: ST_TO_ADDR
// neng := neng - nmech ;
4890: LD_ADDR_LOC 5
4894: PUSH
4895: LD_LOC 5
4899: PUSH
4900: LD_LOC 7
4904: MINUS
4905: ST_TO_ADDR
// if ( neng < 1 ) then
4906: LD_LOC 5
4910: PUSH
4911: LD_INT 1
4913: LESS
4914: IFFALSE 4924
// neng := 1 ;
4916: LD_ADDR_LOC 5
4920: PUSH
4921: LD_INT 1
4923: ST_TO_ADDR
// end ;
4924: LD_VAR 0 1
4928: RET
// function Init_Win_Condition ; begin
4929: LD_INT 0
4931: PPUSH
// if Team_Game then
4932: LD_EXP 23
4936: IFFALSE 4943
// enable ( 98 ) else
4938: LD_INT 98
4940: ENABLE_MARKED
4941: GO 4946
// enable ( 99 ) ;
4943: LD_INT 99
4945: ENABLE_MARKED
// case Game_Type of 3 :
4946: LD_EXP 41
4950: PUSH
4951: LD_INT 3
4953: DOUBLE
4954: EQUAL
4955: IFTRUE 4959
4957: GO 4965
4959: POP
// enable ( 100 ) ; end ;
4960: LD_INT 100
4962: ENABLE_MARKED
4963: GO 4966
4965: POP
// end ;
4966: LD_VAR 0 1
4970: RET
// starting begin disable ( 98 ) ;
4971: LD_INT 98
4973: DISABLE_MARKED
// disable ( 99 ) ;
4974: LD_INT 99
4976: DISABLE_MARKED
// disable ( 400 ) ;
4977: LD_INT 400
4979: DISABLE_MARKED
// disable ( 401 ) ;
4980: LD_INT 401
4982: DISABLE_MARKED
// disable ( 600 ) ;
4983: LD_INT 600
4985: DISABLE_MARKED
// mp_selectmsg := true ;
4986: LD_ADDR_OWVAR 13
4990: PUSH
4991: LD_INT 1
4993: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4994: CALL 0 0 0
// init_map ;
4998: CALL 1503 0 0
// init_respawning ;
5002: CALL 6749 0 0
// set_shared_visions_and_alliances ;
5006: CALL 2674 0 0
// prepare_sides ;
5010: CALL 4630 0 0
// InitLimits ;
5014: CALL 11628 0 0
// ShowTimer ;
5018: CALL 12565 0 0
// music_nat := Side_Nations [ your_side ] ;
5022: LD_ADDR_OWVAR 71
5026: PUSH
5027: LD_EXP 22
5031: PUSH
5032: LD_OWVAR 2
5036: ARRAY
5037: ST_TO_ADDR
// if IAmSpec then
5038: CALL_OW 531
5042: IFFALSE 5078
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5044: LD_INT 0
5046: PPUSH
5047: LD_INT 0
5049: PPUSH
5050: LD_OWVAR 2
5054: PPUSH
5055: LD_INT 32767
5057: NEG
5058: PPUSH
5059: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5063: LD_INT 104
5065: PPUSH
5066: LD_INT 69
5068: PPUSH
5069: CALL_OW 86
// enable ( 400 ) ;
5073: LD_INT 400
5075: ENABLE_MARKED
// end else
5076: GO 5132
// begin ResetFog ;
5078: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5082: LD_EXP 27
5086: PUSH
5087: LD_EXP 21
5091: PUSH
5092: LD_OWVAR 2
5096: ARRAY
5097: ARRAY
5098: PUSH
5099: LD_INT 1
5101: ARRAY
5102: PPUSH
5103: LD_EXP 27
5107: PUSH
5108: LD_EXP 21
5112: PUSH
5113: LD_OWVAR 2
5117: ARRAY
5118: ARRAY
5119: PUSH
5120: LD_INT 2
5122: ARRAY
5123: PPUSH
5124: CALL_OW 86
// Init_Win_Condition ;
5128: CALL 4929 0 0
// end ; InitApeman ;
5132: CALL 5916 0 0
// if def_builduptime then
5136: LD_EXP 56
5140: IFFALSE 5146
// BeginBuildUp ;
5142: CALL 8795 0 0
// end ;
5146: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 and spect = 0 do
5147: LD_INT 22
5149: PUSH
5150: LD_OWVAR 2
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 2
5161: PUSH
5162: LD_INT 21
5164: PUSH
5165: LD_INT 1
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PUSH
5172: LD_INT 33
5174: PUSH
5175: LD_INT 3
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 33
5184: PUSH
5185: LD_INT 5
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 30
5194: PUSH
5195: LD_INT 0
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PUSH
5202: LD_INT 30
5204: PUSH
5205: LD_INT 1
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PPUSH
5224: CALL_OW 69
5228: PUSH
5229: LD_INT 0
5231: EQUAL
5232: PUSH
5233: LD_EXP 15
5237: PUSH
5238: LD_INT 0
5240: EQUAL
5241: AND
5242: IFFALSE 5256
5244: GO 5246
5246: DISABLE
// begin fogoff ( your_side ) ;
5247: LD_OWVAR 2
5251: PPUSH
5252: CALL_OW 344
// end ; end_of_file
5256: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5257: GO 5259
5259: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5260: LD_INT 4
5262: PPUSH
5263: LD_INT 5
5265: PPUSH
5266: CALL_OW 12
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: CALL_OW 57
// enable ;
5278: ENABLE
// end ;
5279: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5280: GO 5282
5282: DISABLE
5283: LD_INT 0
5285: PPUSH
5286: PPUSH
// begin case tick of 1 .. 1 1$0 :
5287: LD_OWVAR 1
5291: PUSH
5292: LD_INT 1
5294: DOUBLE
5295: GREATEREQUAL
5296: IFFALSE 5304
5298: LD_INT 2100
5300: DOUBLE
5301: LESSEQUAL
5302: IFTRUE 5306
5304: GO 5334
5306: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5307: LD_EXP 9
5311: PUSH
5312: LD_INT 100
5314: DIVREAL
5315: PUSH
5316: LD_INT 350
5318: PPUSH
5319: LD_INT 1050
5321: PPUSH
5322: CALL_OW 12
5326: MUL
5327: PPUSH
5328: CALL_OW 67
5332: GO 5636
5334: LD_INT 2100
5336: PUSH
5337: LD_INT 1
5339: PLUS
5340: DOUBLE
5341: GREATEREQUAL
5342: IFFALSE 5350
5344: LD_INT 10500
5346: DOUBLE
5347: LESSEQUAL
5348: IFTRUE 5352
5350: GO 5380
5352: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5353: LD_EXP 9
5357: PUSH
5358: LD_INT 100
5360: DIVREAL
5361: PUSH
5362: LD_INT 1050
5364: PPUSH
5365: LD_INT 1575
5367: PPUSH
5368: CALL_OW 12
5372: MUL
5373: PPUSH
5374: CALL_OW 67
5378: GO 5636
5380: LD_INT 10500
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: DOUBLE
5387: GREATEREQUAL
5388: IFFALSE 5396
5390: LD_INT 21000
5392: DOUBLE
5393: LESSEQUAL
5394: IFTRUE 5398
5396: GO 5426
5398: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5399: LD_EXP 9
5403: PUSH
5404: LD_INT 100
5406: DIVREAL
5407: PUSH
5408: LD_INT 1575
5410: PPUSH
5411: LD_INT 2100
5413: PPUSH
5414: CALL_OW 12
5418: MUL
5419: PPUSH
5420: CALL_OW 67
5424: GO 5636
5426: LD_INT 21000
5428: PUSH
5429: LD_INT 1
5431: PLUS
5432: DOUBLE
5433: GREATEREQUAL
5434: IFFALSE 5442
5436: LD_INT 42000
5438: DOUBLE
5439: LESSEQUAL
5440: IFTRUE 5444
5442: GO 5472
5444: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5445: LD_EXP 9
5449: PUSH
5450: LD_INT 100
5452: DIVREAL
5453: PUSH
5454: LD_INT 2100
5456: PPUSH
5457: LD_INT 2625
5459: PPUSH
5460: CALL_OW 12
5464: MUL
5465: PPUSH
5466: CALL_OW 67
5470: GO 5636
5472: LD_INT 42000
5474: PUSH
5475: LD_INT 1
5477: PLUS
5478: DOUBLE
5479: GREATEREQUAL
5480: IFFALSE 5488
5482: LD_INT 63000
5484: DOUBLE
5485: LESSEQUAL
5486: IFTRUE 5490
5488: GO 5518
5490: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5491: LD_EXP 9
5495: PUSH
5496: LD_INT 100
5498: DIVREAL
5499: PUSH
5500: LD_INT 2625
5502: PPUSH
5503: LD_INT 3150
5505: PPUSH
5506: CALL_OW 12
5510: MUL
5511: PPUSH
5512: CALL_OW 67
5516: GO 5636
5518: LD_INT 63000
5520: PUSH
5521: LD_INT 1
5523: PLUS
5524: DOUBLE
5525: GREATEREQUAL
5526: IFFALSE 5534
5528: LD_INT 105000
5530: DOUBLE
5531: LESSEQUAL
5532: IFTRUE 5536
5534: GO 5564
5536: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5537: LD_EXP 9
5541: PUSH
5542: LD_INT 100
5544: DIVREAL
5545: PUSH
5546: LD_INT 3150
5548: PPUSH
5549: LD_INT 3675
5551: PPUSH
5552: CALL_OW 12
5556: MUL
5557: PPUSH
5558: CALL_OW 67
5562: GO 5636
5564: LD_INT 105000
5566: PUSH
5567: LD_INT 1
5569: PLUS
5570: DOUBLE
5571: GREATEREQUAL
5572: IFFALSE 5580
5574: LD_INT 630000
5576: DOUBLE
5577: LESSEQUAL
5578: IFTRUE 5582
5580: GO 5610
5582: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5583: LD_EXP 9
5587: PUSH
5588: LD_INT 100
5590: DIVREAL
5591: PUSH
5592: LD_INT 3675
5594: PPUSH
5595: LD_INT 4200
5597: PPUSH
5598: CALL_OW 12
5602: MUL
5603: PPUSH
5604: CALL_OW 67
5608: GO 5636
5610: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5611: LD_EXP 9
5615: PUSH
5616: LD_INT 100
5618: DIVREAL
5619: PUSH
5620: LD_INT 4200
5622: PPUSH
5623: LD_INT 5250
5625: PPUSH
5626: CALL_OW 12
5630: MUL
5631: PPUSH
5632: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5636: LD_ADDR_VAR 0 2
5640: PUSH
5641: LD_INT 3
5643: PPUSH
5644: LD_INT 5
5646: PPUSH
5647: CALL_OW 12
5651: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5652: LD_ADDR_VAR 0 1
5656: PUSH
5657: LD_EXP 21
5661: PUSH
5662: LD_INT 0
5664: PUSH
5665: EMPTY
5666: LIST
5667: DIFF
5668: PUSH
5669: FOR_IN
5670: IFFALSE 5719
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5672: LD_VAR 0 2
5676: PPUSH
5677: LD_EXP 27
5681: PUSH
5682: LD_VAR 0 1
5686: ARRAY
5687: PUSH
5688: LD_INT 1
5690: ARRAY
5691: PPUSH
5692: LD_EXP 27
5696: PUSH
5697: LD_VAR 0 1
5701: ARRAY
5702: PUSH
5703: LD_INT 2
5705: ARRAY
5706: PPUSH
5707: LD_INT 20
5709: PPUSH
5710: LD_INT 1
5712: PPUSH
5713: CALL_OW 56
5717: GO 5669
5719: POP
5720: POP
// enable ;
5721: ENABLE
// end ; end_of_file
5722: PPOPN 2
5724: END
// every 20 20$00 trigger apemanNumber do
5725: LD_EXP 33
5729: IFFALSE 5762
5731: GO 5733
5733: DISABLE
// begin enable ;
5734: ENABLE
// if apeLevel >= 8 then
5735: LD_EXP 38
5739: PUSH
5740: LD_INT 8
5742: GREATEREQUAL
5743: IFFALSE 5748
// disable else
5745: DISABLE
5746: GO 5762
// apeLevel := apeLevel + 1 ;
5748: LD_ADDR_EXP 38
5752: PUSH
5753: LD_EXP 38
5757: PUSH
5758: LD_INT 1
5760: PLUS
5761: ST_TO_ADDR
// end ;
5762: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5763: LD_EXP 33
5767: PUSH
5768: LD_EXP 34
5772: LESS
5773: IFFALSE 5913
5775: GO 5777
5777: DISABLE
5778: LD_INT 0
5780: PPUSH
5781: PPUSH
5782: PPUSH
5783: PPUSH
// begin enable ;
5784: ENABLE
// for i := 1 to apemanPos do
5785: LD_ADDR_VAR 0 1
5789: PUSH
5790: DOUBLE
5791: LD_INT 1
5793: DEC
5794: ST_TO_ADDR
5795: LD_EXP 36
5799: PUSH
5800: FOR_TO
5801: IFFALSE 5911
// begin if apemanPlayerCount [ i ] then
5803: LD_EXP 37
5807: PUSH
5808: LD_VAR 0 1
5812: ARRAY
5813: IFFALSE 5909
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5815: LD_EXP 37
5819: PUSH
5820: LD_VAR 0 1
5824: ARRAY
5825: PUSH
5826: LD_EXP 36
5830: PUSH
5831: LD_VAR 0 1
5835: ARRAY
5836: GREATER
5837: IFFALSE 5909
// begin ape := PrepareApeman ;
5839: LD_ADDR_VAR 0 2
5843: PUSH
5844: CALL 6424 0 0
5848: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5849: LD_VAR 0 2
5853: PPUSH
5854: LD_EXP 39
5858: PUSH
5859: LD_VAR 0 1
5863: ARRAY
5864: PPUSH
5865: LD_INT 0
5867: PPUSH
5868: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5872: LD_ADDR_EXP 36
5876: PUSH
5877: LD_EXP 36
5881: PPUSH
5882: LD_VAR 0 1
5886: PPUSH
5887: LD_EXP 36
5891: PUSH
5892: LD_VAR 0 1
5896: ARRAY
5897: PUSH
5898: LD_VAR 0 2
5902: UNION
5903: PPUSH
5904: CALL_OW 1
5908: ST_TO_ADDR
// end ; end ; end ;
5909: GO 5800
5911: POP
5912: POP
// end ;
5913: PPOPN 4
5915: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5916: LD_INT 0
5918: PPUSH
5919: PPUSH
5920: PPUSH
5921: PPUSH
5922: PPUSH
5923: PPUSH
5924: PPUSH
// playersAmount := 0 ;
5925: LD_ADDR_VAR 0 3
5929: PUSH
5930: LD_INT 0
5932: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5933: LD_ADDR_VAR 0 7
5937: PUSH
5938: LD_INT 3
5940: PUSH
5941: LD_INT 2
5943: PUSH
5944: LD_INT 1
5946: PUSH
5947: LD_INT 4
5949: PUSH
5950: LD_INT 6
5952: PUSH
5953: LD_INT 5
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: LIST
5960: LIST
5961: LIST
5962: LIST
5963: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5964: LD_ADDR_EXP 39
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: LD_INT 0
5977: PUSH
5978: LD_INT 0
5980: PUSH
5981: LD_INT 0
5983: PUSH
5984: LD_INT 0
5986: PUSH
5987: LD_INT 0
5989: PUSH
5990: LD_INT 0
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: ST_TO_ADDR
// for j = 1 to Side_Positions do
6003: LD_ADDR_VAR 0 4
6007: PUSH
6008: DOUBLE
6009: LD_INT 1
6011: DEC
6012: ST_TO_ADDR
6013: LD_EXP 21
6017: PUSH
6018: FOR_TO
6019: IFFALSE 6086
// if Side_Positions [ j ] then
6021: LD_EXP 21
6025: PUSH
6026: LD_VAR 0 4
6030: ARRAY
6031: IFFALSE 6084
// begin playersAmount := playersAmount + 1 ;
6033: LD_ADDR_VAR 0 3
6037: PUSH
6038: LD_VAR 0 3
6042: PUSH
6043: LD_INT 1
6045: PLUS
6046: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6047: LD_ADDR_EXP 39
6051: PUSH
6052: LD_EXP 39
6056: PPUSH
6057: LD_VAR 0 4
6061: PPUSH
6062: LD_VAR 0 7
6066: PUSH
6067: LD_EXP 21
6071: PUSH
6072: LD_VAR 0 4
6076: ARRAY
6077: ARRAY
6078: PPUSH
6079: CALL_OW 1
6083: ST_TO_ADDR
// end ;
6084: GO 6018
6086: POP
6087: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6088: LD_ADDR_EXP 35
6092: PUSH
6093: LD_INT 3
6095: PUSH
6096: LD_EXP 11
6100: MUL
6101: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6102: LD_ADDR_EXP 33
6106: PUSH
6107: LD_VAR 0 3
6111: PUSH
6112: LD_EXP 35
6116: MUL
6117: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6118: LD_ADDR_EXP 34
6122: PUSH
6123: LD_EXP 33
6127: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6128: LD_ADDR_EXP 36
6132: PUSH
6133: LD_INT 0
6135: PUSH
6136: LD_INT 0
6138: PUSH
6139: LD_INT 0
6141: PUSH
6142: LD_INT 0
6144: PUSH
6145: LD_INT 0
6147: PUSH
6148: LD_INT 0
6150: PUSH
6151: LD_INT 0
6153: PUSH
6154: LD_INT 0
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6167: LD_ADDR_EXP 37
6171: PUSH
6172: LD_INT 0
6174: PUSH
6175: LD_INT 0
6177: PUSH
6178: LD_INT 0
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: LD_INT 0
6186: PUSH
6187: LD_INT 0
6189: PUSH
6190: LD_INT 0
6192: PUSH
6193: LD_INT 0
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: ST_TO_ADDR
// apeLevel := 1 ;
6206: LD_ADDR_EXP 38
6210: PUSH
6211: LD_INT 1
6213: ST_TO_ADDR
// if not apemanNumber then
6214: LD_EXP 33
6218: NOT
6219: IFFALSE 6223
// exit ;
6221: GO 6419
// for i := 1 to apemanPerPlayer do
6223: LD_ADDR_VAR 0 2
6227: PUSH
6228: DOUBLE
6229: LD_INT 1
6231: DEC
6232: ST_TO_ADDR
6233: LD_EXP 35
6237: PUSH
6238: FOR_TO
6239: IFFALSE 6417
// begin for j := 1 to Side_Positions do
6241: LD_ADDR_VAR 0 4
6245: PUSH
6246: DOUBLE
6247: LD_INT 1
6249: DEC
6250: ST_TO_ADDR
6251: LD_EXP 21
6255: PUSH
6256: FOR_TO
6257: IFFALSE 6413
// if Side_Positions [ j ] then
6259: LD_EXP 21
6263: PUSH
6264: LD_VAR 0 4
6268: ARRAY
6269: IFFALSE 6411
// begin pos := Side_Positions [ j ] ;
6271: LD_ADDR_VAR 0 6
6275: PUSH
6276: LD_EXP 21
6280: PUSH
6281: LD_VAR 0 4
6285: ARRAY
6286: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6287: LD_ADDR_EXP 37
6291: PUSH
6292: LD_EXP 37
6296: PPUSH
6297: LD_VAR 0 4
6301: PPUSH
6302: LD_EXP 37
6306: PUSH
6307: LD_VAR 0 4
6311: ARRAY
6312: PUSH
6313: LD_INT 1
6315: PLUS
6316: PPUSH
6317: CALL_OW 1
6321: ST_TO_ADDR
// ape := PrepareApeman ;
6322: LD_ADDR_VAR 0 5
6326: PUSH
6327: CALL 6424 0 0
6331: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6332: LD_ADDR_EXP 36
6336: PUSH
6337: LD_EXP 36
6341: PPUSH
6342: LD_VAR 0 4
6346: PPUSH
6347: LD_EXP 36
6351: PUSH
6352: LD_VAR 0 4
6356: ARRAY
6357: PPUSH
6358: LD_EXP 36
6362: PUSH
6363: LD_VAR 0 4
6367: ARRAY
6368: PUSH
6369: LD_INT 1
6371: PLUS
6372: PPUSH
6373: LD_VAR 0 5
6377: PPUSH
6378: CALL_OW 1
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6388: LD_VAR 0 5
6392: PPUSH
6393: LD_EXP 39
6397: PUSH
6398: LD_VAR 0 4
6402: ARRAY
6403: PPUSH
6404: LD_INT 0
6406: PPUSH
6407: CALL_OW 49
// end ;
6411: GO 6256
6413: POP
6414: POP
// end ;
6415: GO 6238
6417: POP
6418: POP
// end ;
6419: LD_VAR 0 1
6423: RET
// export function PrepareApeman ; var bonus ; begin
6424: LD_INT 0
6426: PPUSH
6427: PPUSH
// uc_side := 0 ;
6428: LD_ADDR_OWVAR 20
6432: PUSH
6433: LD_INT 0
6435: ST_TO_ADDR
// uc_nation := 0 ;
6436: LD_ADDR_OWVAR 21
6440: PUSH
6441: LD_INT 0
6443: ST_TO_ADDR
// InitHc ;
6444: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6448: LD_ADDR_VAR 0 2
6452: PUSH
6453: LD_INT 1
6455: NEG
6456: PUSH
6457: LD_INT 0
6459: PUSH
6460: LD_INT 1
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: LD_OWVAR 1
6472: PUSH
6473: LD_INT 3
6475: MOD
6476: PUSH
6477: LD_INT 1
6479: PLUS
6480: ARRAY
6481: ST_TO_ADDR
// hc_class := class_apeman ;
6482: LD_ADDR_OWVAR 28
6486: PUSH
6487: LD_INT 12
6489: ST_TO_ADDR
// hc_gallery :=  ;
6490: LD_ADDR_OWVAR 33
6494: PUSH
6495: LD_STRING 
6497: ST_TO_ADDR
// hc_name :=  ;
6498: LD_ADDR_OWVAR 26
6502: PUSH
6503: LD_STRING 
6505: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6506: LD_ADDR_OWVAR 31
6510: PUSH
6511: LD_EXP 38
6515: PUSH
6516: LD_VAR 0 2
6520: PLUS
6521: PUSH
6522: LD_EXP 38
6526: PUSH
6527: LD_VAR 0 2
6531: PLUS
6532: PUSH
6533: LD_EXP 38
6537: PUSH
6538: LD_VAR 0 2
6542: PLUS
6543: PUSH
6544: LD_EXP 38
6548: PUSH
6549: LD_VAR 0 2
6553: PLUS
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6561: LD_ADDR_OWVAR 35
6565: PUSH
6566: LD_INT 10
6568: PUSH
6569: LD_VAR 0 2
6573: MUL
6574: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6575: LD_ADDR_OWVAR 29
6579: PUSH
6580: LD_INT 12
6582: PUSH
6583: LD_INT 10
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: ST_TO_ADDR
// result := CreateHuman ;
6590: LD_ADDR_VAR 0 1
6594: PUSH
6595: CALL_OW 44
6599: ST_TO_ADDR
// end ;
6600: LD_VAR 0 1
6604: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6605: LD_INT 0
6607: PPUSH
6608: PPUSH
6609: PPUSH
// if not ape then
6610: LD_VAR 0 1
6614: NOT
6615: IFFALSE 6619
// exit ;
6617: GO 6744
// side := GetSide ( ape ) ;
6619: LD_ADDR_VAR 0 3
6623: PUSH
6624: LD_VAR 0 1
6628: PPUSH
6629: CALL_OW 255
6633: ST_TO_ADDR
// if not side then
6634: LD_VAR 0 3
6638: NOT
6639: IFFALSE 6693
// begin for i = 1 to apemanPos do
6641: LD_ADDR_VAR 0 4
6645: PUSH
6646: DOUBLE
6647: LD_INT 1
6649: DEC
6650: ST_TO_ADDR
6651: LD_EXP 36
6655: PUSH
6656: FOR_TO
6657: IFFALSE 6691
// if ape in apemanPos [ i ] then
6659: LD_VAR 0 1
6663: PUSH
6664: LD_EXP 36
6668: PUSH
6669: LD_VAR 0 4
6673: ARRAY
6674: IN
6675: IFFALSE 6689
// begin side := i ;
6677: LD_ADDR_VAR 0 3
6681: PUSH
6682: LD_VAR 0 4
6686: ST_TO_ADDR
// break ;
6687: GO 6691
// end ;
6689: GO 6656
6691: POP
6692: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6693: LD_ADDR_EXP 36
6697: PUSH
6698: LD_EXP 36
6702: PPUSH
6703: LD_VAR 0 3
6707: PPUSH
6708: LD_EXP 36
6712: PUSH
6713: LD_VAR 0 3
6717: ARRAY
6718: PUSH
6719: LD_VAR 0 1
6723: DIFF
6724: PPUSH
6725: CALL_OW 1
6729: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6730: LD_ADDR_EXP 33
6734: PUSH
6735: LD_EXP 33
6739: PUSH
6740: LD_INT 1
6742: MINUS
6743: ST_TO_ADDR
// end ; end_of_file
6744: LD_VAR 0 2
6748: RET
// var respawn , inqueue ; export function init_respawning ; begin
6749: LD_INT 0
6751: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6752: LD_ADDR_LOC 9
6756: PUSH
6757: LD_INT 1
6759: PPUSH
6760: LD_INT 8
6762: PPUSH
6763: CALL_OW 12
6767: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6768: LD_ADDR_LOC 10
6772: PUSH
6773: LD_INT 0
6775: PUSH
6776: LD_INT 0
6778: PUSH
6779: LD_INT 0
6781: PUSH
6782: LD_INT 0
6784: PUSH
6785: LD_INT 0
6787: PUSH
6788: LD_INT 0
6790: PUSH
6791: LD_INT 0
6793: PUSH
6794: LD_INT 0
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: ST_TO_ADDR
// end ;
6807: LD_VAR 0 1
6811: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6812: GO 6814
6814: DISABLE
6815: LD_INT 0
6817: PPUSH
6818: PPUSH
6819: PPUSH
// begin if respawning_time_max = 0 then
6820: LD_EXP 14
6824: PUSH
6825: LD_INT 0
6827: EQUAL
6828: IFFALSE 6832
// exit ;
6830: GO 7241
// if respawn = 8 then
6832: LD_LOC 9
6836: PUSH
6837: LD_INT 8
6839: EQUAL
6840: IFFALSE 6852
// respawn := 1 else
6842: LD_ADDR_LOC 9
6846: PUSH
6847: LD_INT 1
6849: ST_TO_ADDR
6850: GO 6866
// respawn := respawn + 1 ;
6852: LD_ADDR_LOC 9
6856: PUSH
6857: LD_LOC 9
6861: PUSH
6862: LD_INT 1
6864: PLUS
6865: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6866: LD_EXP 21
6870: PUSH
6871: LD_LOC 9
6875: ARRAY
6876: PUSH
6877: LD_LOC 10
6881: PUSH
6882: LD_LOC 9
6886: ARRAY
6887: NOT
6888: AND
6889: IFFALSE 7240
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6891: LD_ADDR_VAR 0 1
6895: PUSH
6896: LD_INT 21
6898: PUSH
6899: LD_INT 1
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 22
6908: PUSH
6909: LD_LOC 9
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 3
6920: PUSH
6921: LD_INT 23
6923: PUSH
6924: LD_INT 0
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: PPUSH
6937: CALL_OW 69
6941: ST_TO_ADDR
// if n < number_of_people then
6942: LD_VAR 0 1
6946: PUSH
6947: LD_EXP 5
6951: LESS
6952: IFFALSE 7237
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6954: LD_ADDR_VAR 0 2
6958: PUSH
6959: LD_INT 21
6961: PUSH
6962: LD_INT 3
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 30
6974: PUSH
6975: LD_INT 0
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 30
6984: PUSH
6985: LD_INT 1
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 50
6999: PUSH
7000: EMPTY
7001: LIST
7002: PUSH
7003: LD_INT 22
7005: PUSH
7006: LD_LOC 9
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: CALL_OW 69
7025: ST_TO_ADDR
// if dep > 0 then
7026: LD_VAR 0 2
7030: PUSH
7031: LD_INT 0
7033: GREATER
7034: IFFALSE 7234
// begin aktresp := respawn ;
7036: LD_ADDR_VAR 0 3
7040: PUSH
7041: LD_LOC 9
7045: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
7046: LD_ADDR_LOC 10
7050: PUSH
7051: LD_LOC 10
7055: PPUSH
7056: LD_VAR 0 3
7060: PPUSH
7061: LD_INT 1
7063: PPUSH
7064: CALL_OW 1
7068: ST_TO_ADDR
// enable ;
7069: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
7070: LD_EXP 13
7074: PPUSH
7075: LD_EXP 14
7079: PPUSH
7080: CALL_OW 12
7084: PPUSH
7085: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
7089: LD_ADDR_LOC 10
7093: PUSH
7094: LD_LOC 10
7098: PPUSH
7099: LD_VAR 0 3
7103: PPUSH
7104: LD_INT 0
7106: PPUSH
7107: CALL_OW 1
7111: ST_TO_ADDR
// hc_name :=  ;
7112: LD_ADDR_OWVAR 26
7116: PUSH
7117: LD_STRING 
7119: ST_TO_ADDR
// hc_importance := 0 ;
7120: LD_ADDR_OWVAR 32
7124: PUSH
7125: LD_INT 0
7127: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
7128: LD_INT 0
7130: PPUSH
7131: LD_INT 0
7133: PPUSH
7134: LD_EXP 6
7138: PUSH
7139: LD_INT 2
7141: DIV
7142: PPUSH
7143: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
7147: LD_ADDR_OWVAR 21
7151: PUSH
7152: LD_EXP 22
7156: PUSH
7157: LD_VAR 0 3
7161: ARRAY
7162: ST_TO_ADDR
// uc_side := aktresp ;
7163: LD_ADDR_OWVAR 20
7167: PUSH
7168: LD_VAR 0 3
7172: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
7173: LD_ADDR_VAR 0 2
7177: PUSH
7178: LD_VAR 0 2
7182: PUSH
7183: LD_INT 1
7185: PPUSH
7186: LD_VAR 0 2
7190: PPUSH
7191: CALL_OW 12
7195: ARRAY
7196: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
7197: CALL_OW 44
7201: PPUSH
7202: LD_VAR 0 2
7206: PPUSH
7207: CALL_OW 250
7211: PPUSH
7212: LD_VAR 0 2
7216: PPUSH
7217: CALL_OW 251
7221: PPUSH
7222: LD_INT 7
7224: PPUSH
7225: LD_INT 1
7227: PPUSH
7228: CALL_OW 50
// end else
7232: GO 7235
// enable ;
7234: ENABLE
// end else
7235: GO 7238
// enable ;
7237: ENABLE
// end else
7238: GO 7241
// enable ;
7240: ENABLE
// end ; end_of_file
7241: PPOPN 3
7243: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7244: LD_VAR 0 1
7248: PPUSH
7249: CALL_OW 266
7253: PUSH
7254: LD_INT 0
7256: PUSH
7257: LD_INT 1
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: IN
7264: IFFALSE 7289
// SetBName ( b , @ & GetSide ( b ) ) ;
7266: LD_VAR 0 1
7270: PPUSH
7271: LD_STRING @
7273: PUSH
7274: LD_VAR 0 1
7278: PPUSH
7279: CALL_OW 255
7283: STR
7284: PPUSH
7285: CALL_OW 500
// if def_game_rules then
7289: LD_EXP 42
7293: IFFALSE 7330
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7295: LD_VAR 0 1
7299: PPUSH
7300: LD_VAR 0 1
7304: PPUSH
7305: CALL_OW 266
7309: PPUSH
7310: LD_VAR 0 1
7314: PPUSH
7315: CALL_OW 255
7319: PPUSH
7320: LD_INT 0
7322: PPUSH
7323: LD_INT 1
7325: PPUSH
7326: CALL 12029 0 5
// end ;
7330: PPOPN 2
7332: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7333: LD_VAR 0 1
7337: PPUSH
7338: CALL_OW 266
7342: PUSH
7343: LD_INT 0
7345: PUSH
7346: LD_INT 1
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: IN
7353: IFFALSE 7378
// SetBName ( b , @ & GetSide ( b ) ) ;
7355: LD_VAR 0 1
7359: PPUSH
7360: LD_STRING @
7362: PUSH
7363: LD_VAR 0 1
7367: PPUSH
7368: CALL_OW 255
7372: STR
7373: PPUSH
7374: CALL_OW 500
// if def_game_rules then
7378: LD_EXP 42
7382: IFFALSE 7421
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7384: LD_VAR 0 1
7388: PPUSH
7389: LD_VAR 0 1
7393: PPUSH
7394: CALL_OW 266
7398: PPUSH
7399: LD_VAR 0 1
7403: PPUSH
7404: CALL_OW 255
7408: PPUSH
7409: LD_VAR 0 2
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: CALL 12029 0 5
// end ;
7421: PPOPN 3
7423: END
// on VehicleConstructed ( veh , fac ) do var side ;
7424: LD_INT 0
7426: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7427: LD_VAR 0 1
7431: PPUSH
7432: CALL_OW 263
7436: PUSH
7437: LD_INT 5
7439: EQUAL
7440: IFFALSE 7582
// begin side := GetSide ( veh ) ;
7442: LD_ADDR_VAR 0 3
7446: PUSH
7447: LD_VAR 0 1
7451: PPUSH
7452: CALL_OW 255
7456: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7457: LD_ADDR_EXP 36
7461: PUSH
7462: LD_EXP 36
7466: PPUSH
7467: LD_VAR 0 3
7471: PPUSH
7472: LD_EXP 36
7476: PUSH
7477: LD_VAR 0 3
7481: ARRAY
7482: PPUSH
7483: LD_INT 52
7485: PUSH
7486: EMPTY
7487: LIST
7488: PPUSH
7489: CALL_OW 72
7493: PUSH
7494: LD_INT 22
7496: PUSH
7497: LD_VAR 0 3
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: LD_INT 2
7508: PUSH
7509: LD_INT 33
7511: PUSH
7512: LD_INT 5
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PUSH
7519: LD_INT 25
7521: PUSH
7522: LD_INT 12
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 25
7531: PUSH
7532: LD_INT 15
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 25
7541: PUSH
7542: LD_INT 16
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 25
7551: PUSH
7552: LD_INT 17
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 69
7575: UNION
7576: PPUSH
7577: CALL_OW 1
7581: ST_TO_ADDR
// end ; end ;
7582: PPOPN 3
7584: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7585: LD_INT 0
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7591: LD_VAR 0 1
7595: PPUSH
7596: CALL_OW 257
7600: PUSH
7601: LD_INT 12
7603: PUSH
7604: LD_INT 15
7606: PUSH
7607: LD_INT 17
7609: PUSH
7610: LD_INT 16
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: IN
7619: PUSH
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 263
7629: PUSH
7630: LD_INT 5
7632: EQUAL
7633: OR
7634: IFFALSE 7645
// ApeKilled ( j ) ;
7636: LD_VAR 0 1
7640: PPUSH
7641: CALL 6605 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7645: LD_VAR 0 1
7649: PPUSH
7650: CALL_OW 266
7654: PUSH
7655: LD_INT 0
7657: PUSH
7658: LD_INT 1
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: IN
7665: IFFALSE 7747
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7667: LD_ADDR_VAR 0 4
7671: PUSH
7672: LD_EXP 21
7676: PUSH
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 255
7686: ARRAY
7687: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7688: LD_ADDR_VAR 0 2
7692: PUSH
7693: LD_EXP 27
7697: PUSH
7698: LD_VAR 0 4
7702: ARRAY
7703: PUSH
7704: LD_INT 1
7706: ARRAY
7707: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7708: LD_ADDR_VAR 0 3
7712: PUSH
7713: LD_EXP 27
7717: PUSH
7718: LD_VAR 0 4
7722: ARRAY
7723: PUSH
7724: LD_INT 2
7726: ARRAY
7727: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7728: LD_VAR 0 2
7732: PPUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 420
7742: PPUSH
7743: CALL_OW 419
// end ; if def_game_rules then
7747: LD_EXP 42
7751: IFFALSE 7850
// if ( GetType ( j ) = 3 ) then
7753: LD_VAR 0 1
7757: PPUSH
7758: CALL_OW 247
7762: PUSH
7763: LD_INT 3
7765: EQUAL
7766: IFFALSE 7806
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7768: LD_VAR 0 1
7772: PPUSH
7773: LD_VAR 0 1
7777: PPUSH
7778: CALL_OW 266
7782: PPUSH
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 255
7792: PPUSH
7793: LD_INT 0
7795: PPUSH
7796: LD_INT 1
7798: NEG
7799: PPUSH
7800: CALL 12029 0 5
7804: GO 7850
// if ( GetChassis ( j ) = 25 ) then
7806: LD_VAR 0 1
7810: PPUSH
7811: CALL_OW 265
7815: PUSH
7816: LD_INT 25
7818: EQUAL
7819: IFFALSE 7850
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7821: LD_VAR 0 1
7825: PPUSH
7826: LD_INT 37
7828: PPUSH
7829: LD_VAR 0 1
7833: PPUSH
7834: CALL_OW 255
7838: PPUSH
7839: LD_INT 0
7841: PPUSH
7842: LD_INT 1
7844: NEG
7845: PPUSH
7846: CALL 12029 0 5
// end ;
7850: PPOPN 5
7852: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7853: LD_EXP 42
7857: PUSH
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 265
7867: PUSH
7868: LD_INT 25
7870: EQUAL
7871: AND
7872: IFFALSE 7904
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7874: LD_VAR 0 1
7878: PPUSH
7879: LD_INT 37
7881: PPUSH
7882: LD_VAR 0 1
7886: PPUSH
7887: CALL_OW 255
7891: PPUSH
7892: LD_VAR 0 3
7896: PPUSH
7897: LD_INT 1
7899: PPUSH
7900: CALL 12029 0 5
// end ;
7904: PPOPN 4
7906: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7907: LD_VAR 0 1
7911: PPUSH
7912: LD_VAR 0 2
7916: PPUSH
7917: LD_VAR 0 3
7921: PPUSH
7922: LD_OWVAR 2
7926: PPUSH
7927: CALL 12707 0 4
7931: PPOPN 3
7933: END
// function CanWinLoose ; begin
7934: LD_INT 0
7936: PPUSH
// Result := true ;
7937: LD_ADDR_VAR 0 1
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7945: CALL_OW 518
7949: PUSH
7950: CALL_OW 519
7954: PUSH
7955: LD_INT 0
7957: GREATER
7958: AND
7959: IFFALSE 7969
// Result := false ;
7961: LD_ADDR_VAR 0 1
7965: PUSH
7966: LD_INT 0
7968: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7969: CALL_OW 531
7973: PUSH
7974: CALL_OW 519
7978: PUSH
7979: LD_INT 1
7981: GREATER
7982: AND
7983: IFFALSE 7993
// Result := false ;
7985: LD_ADDR_VAR 0 1
7989: PUSH
7990: LD_INT 0
7992: ST_TO_ADDR
// end ;
7993: LD_VAR 0 1
7997: RET
// function HasPower ( i ) ; begin
7998: LD_INT 0
8000: PPUSH
// if def_people_respawning then
8001: LD_EXP 53
8005: IFFALSE 8096
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8007: LD_ADDR_VAR 0 2
8011: PUSH
8012: LD_INT 22
8014: PUSH
8015: LD_VAR 0 1
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 2
8026: PUSH
8027: LD_INT 21
8029: PUSH
8030: LD_INT 1
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 33
8039: PUSH
8040: LD_INT 3
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 33
8049: PUSH
8050: LD_INT 5
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PUSH
8057: LD_INT 30
8059: PUSH
8060: LD_INT 0
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 30
8069: PUSH
8070: LD_INT 1
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: PPUSH
8089: CALL_OW 69
8093: ST_TO_ADDR
8094: GO 8161
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
8096: LD_ADDR_VAR 0 2
8100: PUSH
8101: LD_INT 22
8103: PUSH
8104: LD_VAR 0 1
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_INT 2
8115: PUSH
8116: LD_INT 21
8118: PUSH
8119: LD_INT 1
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 33
8128: PUSH
8129: LD_INT 3
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PUSH
8136: LD_INT 33
8138: PUSH
8139: LD_INT 5
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PPUSH
8156: CALL_OW 69
8160: ST_TO_ADDR
// end ;
8161: LD_VAR 0 2
8165: RET
// function AlliedSides ( i , j ) ; begin
8166: LD_INT 0
8168: PPUSH
// Result := false ;
8169: LD_ADDR_VAR 0 3
8173: PUSH
8174: LD_INT 0
8176: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8177: LD_VAR 0 1
8181: PPUSH
8182: LD_VAR 0 2
8186: PPUSH
8187: CALL_OW 81
8191: PUSH
8192: LD_INT 1
8194: EQUAL
8195: PUSH
8196: LD_VAR 0 2
8200: PPUSH
8201: LD_VAR 0 1
8205: PPUSH
8206: CALL_OW 81
8210: PUSH
8211: LD_INT 1
8213: EQUAL
8214: AND
8215: PUSH
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 83
8225: AND
8226: PUSH
8227: LD_VAR 0 2
8231: PPUSH
8232: CALL_OW 83
8236: AND
8237: IFFALSE 8247
// Result := true ;
8239: LD_ADDR_VAR 0 3
8243: PUSH
8244: LD_INT 1
8246: ST_TO_ADDR
// end ;
8247: LD_VAR 0 3
8251: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
8252: CALL 7934 0 0
8256: IFFALSE 8265
8258: GO 8260
8260: DISABLE
// YouLostInMultiplayer ;
8261: CALL_OW 107
8265: END
// every 0 0$3 trigger CanWinLoose marked 401 do
8266: CALL 7934 0 0
8270: IFFALSE 8294
8272: GO 8274
8274: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
8275: LD_EXP 22
8279: PUSH
8280: LD_OWVAR 2
8284: ARRAY
8285: PPUSH
8286: CALL 12749 0 1
// YouWinInMultiplayer ;
8290: CALL_OW 106
// end ;
8294: END
// every 0 0$3 marked 98 do var i , CanWin ;
8295: GO 8297
8297: DISABLE
8298: LD_INT 0
8300: PPUSH
8301: PPUSH
// begin if not HasPower ( your_side ) then
8302: LD_OWVAR 2
8306: PPUSH
8307: CALL 7998 0 1
8311: NOT
8312: IFFALSE 8323
// begin Multiplayer_Loose_Message ;
8314: CALL_OW 521
// enable ( 400 ) ;
8318: LD_INT 400
8320: ENABLE_MARKED
// end else
8321: GO 8456
// begin CanWin := true ;
8323: LD_ADDR_VAR 0 2
8327: PUSH
8328: LD_INT 1
8330: ST_TO_ADDR
// for i := 1 to 8 do
8331: LD_ADDR_VAR 0 1
8335: PUSH
8336: DOUBLE
8337: LD_INT 1
8339: DEC
8340: ST_TO_ADDR
8341: LD_INT 8
8343: PUSH
8344: FOR_TO
8345: IFFALSE 8442
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8347: LD_EXP 21
8351: PUSH
8352: LD_VAR 0 1
8356: ARRAY
8357: PUSH
8358: LD_VAR 0 1
8362: PPUSH
8363: CALL_OW 108
8367: AND
8368: PUSH
8369: LD_VAR 0 1
8373: PUSH
8374: LD_OWVAR 2
8378: NONEQUAL
8379: AND
8380: IFFALSE 8440
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
8382: LD_EXP 19
8386: PUSH
8387: LD_VAR 0 1
8391: ARRAY
8392: NOT
8393: PUSH
8394: LD_EXP 19
8398: PUSH
8399: LD_VAR 0 1
8403: ARRAY
8404: PUSH
8405: LD_EXP 19
8409: PUSH
8410: LD_OWVAR 2
8414: ARRAY
8415: NONEQUAL
8416: OR
8417: IFFALSE 8440
// if HasPower ( i ) then
8419: LD_VAR 0 1
8423: PPUSH
8424: CALL 7998 0 1
8428: IFFALSE 8440
// begin CanWin := false ;
8430: LD_ADDR_VAR 0 2
8434: PUSH
8435: LD_INT 0
8437: ST_TO_ADDR
// break ;
8438: GO 8442
// end ;
8440: GO 8344
8442: POP
8443: POP
// if CanWin then
8444: LD_VAR 0 2
8448: IFFALSE 8455
// enable ( 401 ) else
8450: LD_INT 401
8452: ENABLE_MARKED
8453: GO 8456
// enable ;
8455: ENABLE
// end ; end ;
8456: PPOPN 2
8458: END
// every 0 0$3 marked 99 do var i , CanWin ;
8459: GO 8461
8461: DISABLE
8462: LD_INT 0
8464: PPUSH
8465: PPUSH
// begin if not HasPower ( your_side ) then
8466: LD_OWVAR 2
8470: PPUSH
8471: CALL 7998 0 1
8475: NOT
8476: IFFALSE 8487
// begin Multiplayer_Loose_Message ;
8478: CALL_OW 521
// enable ( 400 ) ;
8482: LD_INT 400
8484: ENABLE_MARKED
// end else
8485: GO 8600
// begin CanWin := true ;
8487: LD_ADDR_VAR 0 2
8491: PUSH
8492: LD_INT 1
8494: ST_TO_ADDR
// for i := 1 to 8 do
8495: LD_ADDR_VAR 0 1
8499: PUSH
8500: DOUBLE
8501: LD_INT 1
8503: DEC
8504: ST_TO_ADDR
8505: LD_INT 8
8507: PUSH
8508: FOR_TO
8509: IFFALSE 8586
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8511: LD_EXP 21
8515: PUSH
8516: LD_VAR 0 1
8520: ARRAY
8521: PUSH
8522: LD_VAR 0 1
8526: PPUSH
8527: CALL_OW 108
8531: AND
8532: PUSH
8533: LD_VAR 0 1
8537: PUSH
8538: LD_OWVAR 2
8542: NONEQUAL
8543: AND
8544: IFFALSE 8584
// if not AlliedSides ( i , your_side ) then
8546: LD_VAR 0 1
8550: PPUSH
8551: LD_OWVAR 2
8555: PPUSH
8556: CALL 8166 0 2
8560: NOT
8561: IFFALSE 8584
// if HasPower ( i ) then
8563: LD_VAR 0 1
8567: PPUSH
8568: CALL 7998 0 1
8572: IFFALSE 8584
// begin CanWin := false ;
8574: LD_ADDR_VAR 0 2
8578: PUSH
8579: LD_INT 0
8581: ST_TO_ADDR
// break ;
8582: GO 8586
// end ;
8584: GO 8508
8586: POP
8587: POP
// if CanWin then
8588: LD_VAR 0 2
8592: IFFALSE 8599
// enable ( 401 ) else
8594: LD_INT 401
8596: ENABLE_MARKED
8597: GO 8600
// enable ;
8599: ENABLE
// end ; end ; end_of_file
8600: PPOPN 2
8602: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8603: LD_INT 0
8605: PPUSH
8606: PPUSH
// for un in battle_flags_id do
8607: LD_ADDR_VAR 0 2
8611: PUSH
8612: LD_EXP 32
8616: PUSH
8617: FOR_IN
8618: IFFALSE 8693
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8620: LD_VAR 0 2
8624: PPUSH
8625: LD_INT 1
8627: PUSH
8628: LD_LOC 11
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 2
8639: PUSH
8640: LD_LOC 11
8644: PUSH
8645: LD_INT 2
8647: DIV
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: LD_INT 3
8655: PUSH
8656: LD_LOC 11
8660: PUSH
8661: LD_INT 5
8663: DIV
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 20
8671: PUSH
8672: LD_LOC 11
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PPUSH
8687: CALL_OW 423
8691: GO 8617
8693: POP
8694: POP
// end ;
8695: LD_VAR 0 1
8699: RET
// every 1 do var un ;
8700: GO 8702
8702: DISABLE
8703: LD_INT 0
8705: PPUSH
// begin if not def_morale_flags then
8706: LD_EXP 51
8710: NOT
8711: IFFALSE 8715
// exit ;
8713: GO 8792
// if not morale_decreasing_time then
8715: LD_EXP 10
8719: NOT
8720: IFFALSE 8724
// exit ;
8722: GO 8792
// strength = 100 ;
8724: LD_ADDR_LOC 11
8728: PUSH
8729: LD_INT 100
8731: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8732: LD_EXP 10
8736: PPUSH
8737: CALL_OW 67
// strength := strength - 1 ;
8741: LD_ADDR_LOC 11
8745: PUSH
8746: LD_LOC 11
8750: PUSH
8751: LD_INT 1
8753: MINUS
8754: ST_TO_ADDR
// Update_Flags ;
8755: CALL 8603 0 0
// until not strength ;
8759: LD_LOC 11
8763: NOT
8764: IFFALSE 8732
// for un in battle_flags_id do
8766: LD_ADDR_VAR 0 1
8770: PUSH
8771: LD_EXP 32
8775: PUSH
8776: FOR_IN
8777: IFFALSE 8790
// KillBattleFlag ( un ) ;
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 419
8788: GO 8776
8790: POP
8791: POP
// end ; end_of_file
8792: PPOPN 1
8794: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8795: LD_INT 0
8797: PPUSH
8798: PPUSH
8799: PPUSH
// enable ( 600 ) ;
8800: LD_INT 600
8802: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8803: LD_ADDR_VAR 0 2
8807: PUSH
8808: DOUBLE
8809: LD_INT 1
8811: DEC
8812: ST_TO_ADDR
8813: LD_EXP 40
8817: PUSH
8818: FOR_TO
8819: IFFALSE 8974
// if Position_Sides [ i ] then
8821: LD_EXP 24
8825: PUSH
8826: LD_VAR 0 2
8830: ARRAY
8831: IFFALSE 8972
// for j := 1 to 8 do
8833: LD_ADDR_VAR 0 3
8837: PUSH
8838: DOUBLE
8839: LD_INT 1
8841: DEC
8842: ST_TO_ADDR
8843: LD_INT 8
8845: PUSH
8846: FOR_TO
8847: IFFALSE 8970
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8849: LD_EXP 21
8853: PUSH
8854: LD_VAR 0 3
8858: ARRAY
8859: PUSH
8860: LD_EXP 19
8864: PUSH
8865: LD_EXP 24
8869: PUSH
8870: LD_VAR 0 2
8874: ARRAY
8875: ARRAY
8876: PUSH
8877: LD_EXP 19
8881: PUSH
8882: LD_VAR 0 3
8886: ARRAY
8887: NONEQUAL
8888: PUSH
8889: LD_EXP 23
8893: NOT
8894: PUSH
8895: LD_EXP 24
8899: PUSH
8900: LD_VAR 0 2
8904: ARRAY
8905: PUSH
8906: LD_VAR 0 3
8910: NONEQUAL
8911: AND
8912: OR
8913: AND
8914: IFFALSE 8938
// HideArea ( j , BuildUpAreas [ i ] ) else
8916: LD_VAR 0 3
8920: PPUSH
8921: LD_EXP 40
8925: PUSH
8926: LD_VAR 0 2
8930: ARRAY
8931: PPUSH
8932: CALL_OW 333
8936: GO 8968
// if ( j = your_side ) then
8938: LD_VAR 0 3
8942: PUSH
8943: LD_OWVAR 2
8947: EQUAL
8948: IFFALSE 8968
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8950: LD_EXP 40
8954: PUSH
8955: LD_VAR 0 2
8959: ARRAY
8960: PPUSH
8961: LD_INT 5
8963: PPUSH
8964: CALL_OW 424
8968: GO 8846
8970: POP
8971: POP
8972: GO 8818
8974: POP
8975: POP
// end ;
8976: LD_VAR 0 1
8980: RET
// export function EndBuildUp ; var i , j ; begin
8981: LD_INT 0
8983: PPUSH
8984: PPUSH
8985: PPUSH
// disable ( 600 ) ;
8986: LD_INT 600
8988: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
8989: LD_ADDR_VAR 0 2
8993: PUSH
8994: DOUBLE
8995: LD_INT 1
8997: DEC
8998: ST_TO_ADDR
8999: LD_EXP 40
9003: PUSH
9004: FOR_TO
9005: IFFALSE 9160
// if Position_Sides [ i ] then
9007: LD_EXP 24
9011: PUSH
9012: LD_VAR 0 2
9016: ARRAY
9017: IFFALSE 9158
// for j := 1 to 8 do
9019: LD_ADDR_VAR 0 3
9023: PUSH
9024: DOUBLE
9025: LD_INT 1
9027: DEC
9028: ST_TO_ADDR
9029: LD_INT 8
9031: PUSH
9032: FOR_TO
9033: IFFALSE 9156
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
9035: LD_EXP 21
9039: PUSH
9040: LD_VAR 0 3
9044: ARRAY
9045: PUSH
9046: LD_EXP 19
9050: PUSH
9051: LD_EXP 24
9055: PUSH
9056: LD_VAR 0 2
9060: ARRAY
9061: ARRAY
9062: PUSH
9063: LD_EXP 19
9067: PUSH
9068: LD_VAR 0 3
9072: ARRAY
9073: NONEQUAL
9074: PUSH
9075: LD_EXP 23
9079: NOT
9080: PUSH
9081: LD_EXP 24
9085: PUSH
9086: LD_VAR 0 2
9090: ARRAY
9091: PUSH
9092: LD_VAR 0 3
9096: NONEQUAL
9097: AND
9098: OR
9099: AND
9100: IFFALSE 9124
// ShowArea ( j , BuildUpAreas [ i ] ) else
9102: LD_VAR 0 3
9106: PPUSH
9107: LD_EXP 40
9111: PUSH
9112: LD_VAR 0 2
9116: ARRAY
9117: PPUSH
9118: CALL_OW 334
9122: GO 9154
// if ( j = your_side ) then
9124: LD_VAR 0 3
9128: PUSH
9129: LD_OWVAR 2
9133: EQUAL
9134: IFFALSE 9154
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
9136: LD_EXP 40
9140: PUSH
9141: LD_VAR 0 2
9145: ARRAY
9146: PPUSH
9147: LD_INT 0
9149: PPUSH
9150: CALL_OW 424
9154: GO 9032
9156: POP
9157: POP
9158: GO 9004
9160: POP
9161: POP
// end ;
9162: LD_VAR 0 1
9166: RET
// every 5 marked 600 do var i , un ;
9167: GO 9169
9169: DISABLE
9170: LD_INT 0
9172: PPUSH
9173: PPUSH
// begin for i := 1 to BuildUpAreas do
9174: LD_ADDR_VAR 0 1
9178: PUSH
9179: DOUBLE
9180: LD_INT 1
9182: DEC
9183: ST_TO_ADDR
9184: LD_EXP 40
9188: PUSH
9189: FOR_TO
9190: IFFALSE 9345
// if Position_Sides [ i ] then
9192: LD_EXP 24
9196: PUSH
9197: LD_VAR 0 1
9201: ARRAY
9202: IFFALSE 9343
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: LD_EXP 40
9213: PUSH
9214: LD_VAR 0 1
9218: ARRAY
9219: PPUSH
9220: LD_INT 2
9222: PUSH
9223: LD_INT 21
9225: PUSH
9226: LD_INT 1
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 21
9235: PUSH
9236: LD_INT 2
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: PUSH
9248: LD_INT 22
9250: PUSH
9251: LD_OWVAR 2
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PPUSH
9264: CALL_OW 70
9268: PUSH
9269: FOR_IN
9270: IFFALSE 9341
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
9272: LD_EXP 19
9276: PUSH
9277: LD_EXP 24
9281: PUSH
9282: LD_VAR 0 1
9286: ARRAY
9287: ARRAY
9288: PUSH
9289: LD_EXP 19
9293: PUSH
9294: LD_OWVAR 2
9298: ARRAY
9299: NONEQUAL
9300: PUSH
9301: LD_EXP 23
9305: NOT
9306: PUSH
9307: LD_EXP 24
9311: PUSH
9312: LD_VAR 0 1
9316: ARRAY
9317: PUSH
9318: LD_OWVAR 2
9322: NONEQUAL
9323: AND
9324: OR
9325: IFFALSE 9339
// ComMoveToArea ( un , BuildUpEscape ) ;
9327: LD_VAR 0 2
9331: PPUSH
9332: LD_INT 13
9334: PPUSH
9335: CALL_OW 113
9339: GO 9269
9341: POP
9342: POP
9343: GO 9189
9345: POP
9346: POP
// enable ;
9347: ENABLE
// end ;
9348: PPOPN 2
9350: END
// every 5 5$00 do
9351: GO 9353
9353: DISABLE
// if ( def_builduptime = 1 ) then
9354: LD_EXP 56
9358: PUSH
9359: LD_INT 1
9361: EQUAL
9362: IFFALSE 9368
// EndBuildUp ;
9364: CALL 8981 0 0
9368: END
// every 10 10$00 do
9369: GO 9371
9371: DISABLE
// if ( def_builduptime = 2 ) then
9372: LD_EXP 56
9376: PUSH
9377: LD_INT 2
9379: EQUAL
9380: IFFALSE 9386
// EndBuildUp ;
9382: CALL 8981 0 0
9386: END
// every 15 15$00 do
9387: GO 9389
9389: DISABLE
// if ( def_builduptime = 3 ) then
9390: LD_EXP 56
9394: PUSH
9395: LD_INT 3
9397: EQUAL
9398: IFFALSE 9404
// EndBuildUp ; end_of_file
9400: CALL 8981 0 0
9404: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
// if ( not IAmSpec ) then
9409: CALL_OW 531
9413: NOT
9414: IFFALSE 9430
// Result := Limits_Info ^  ;
9416: LD_ADDR_VAR 0 1
9420: PUSH
9421: LD_LOC 23
9425: PUSH
9426: LD_STRING 
9428: ADD
9429: ST_TO_ADDR
// for i := 1 to 8 do
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: DOUBLE
9436: LD_INT 1
9438: DEC
9439: ST_TO_ADDR
9440: LD_INT 8
9442: PUSH
9443: FOR_TO
9444: IFFALSE 9489
// if Cheaters [ i ] then
9446: LD_LOC 24
9450: PUSH
9451: LD_VAR 0 2
9455: ARRAY
9456: IFFALSE 9487
// Result := Result ^ [ #Cheater , i , i ] ;
9458: LD_ADDR_VAR 0 1
9462: PUSH
9463: LD_VAR 0 1
9467: PUSH
9468: LD_STRING #Cheater
9470: PUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_VAR 0 2
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: LIST
9485: ADD
9486: ST_TO_ADDR
9487: GO 9443
9489: POP
9490: POP
// end ;
9491: LD_VAR 0 1
9495: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9496: LD_INT 0
9498: PPUSH
9499: PPUSH
9500: PPUSH
9501: PPUSH
9502: PPUSH
// case Game_Type of 10 :
9503: LD_EXP 41
9507: PUSH
9508: LD_INT 10
9510: DOUBLE
9511: EQUAL
9512: IFTRUE 9516
9514: GO 9527
9516: POP
// def_game_rules := 1 ; 11 :
9517: LD_ADDR_EXP 42
9521: PUSH
9522: LD_INT 1
9524: ST_TO_ADDR
9525: GO 9547
9527: LD_INT 11
9529: DOUBLE
9530: EQUAL
9531: IFTRUE 9535
9533: GO 9546
9535: POP
// def_game_rules := 3 ; end ;
9536: LD_ADDR_EXP 42
9540: PUSH
9541: LD_INT 3
9543: ST_TO_ADDR
9544: GO 9547
9546: POP
// case def_game_rules of 0 :
9547: LD_EXP 42
9551: PUSH
9552: LD_INT 0
9554: DOUBLE
9555: EQUAL
9556: IFTRUE 9560
9558: GO 9565
9560: POP
// exit ; 1 :
9561: GO 11623
9563: GO 11523
9565: LD_INT 1
9567: DOUBLE
9568: EQUAL
9569: IFTRUE 9573
9571: GO 9789
9573: POP
// begin def_base_level := 2 ;
9574: LD_ADDR_EXP 43
9578: PUSH
9579: LD_INT 2
9581: ST_TO_ADDR
// def_amount_of_people := 2 ;
9582: LD_ADDR_EXP 44
9586: PUSH
9587: LD_INT 2
9589: ST_TO_ADDR
// def_skill_level := 1 ;
9590: LD_ADDR_EXP 45
9594: PUSH
9595: LD_INT 1
9597: ST_TO_ADDR
// def_starting_resources := 2 ;
9598: LD_ADDR_EXP 46
9602: PUSH
9603: LD_INT 2
9605: ST_TO_ADDR
// def_shipments_density := 1 ;
9606: LD_ADDR_EXP 47
9610: PUSH
9611: LD_INT 1
9613: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9614: LD_ADDR_EXP 48
9618: PUSH
9619: LD_INT 0
9621: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9622: LD_ADDR_EXP 49
9626: PUSH
9627: LD_INT 1
9629: ST_TO_ADDR
// def_shared_vision := 1 ;
9630: LD_ADDR_EXP 50
9634: PUSH
9635: LD_INT 1
9637: ST_TO_ADDR
// def_morale_flags := 3 ;
9638: LD_ADDR_EXP 51
9642: PUSH
9643: LD_INT 3
9645: ST_TO_ADDR
// def_siberite_detection := 1 ;
9646: LD_ADDR_EXP 52
9650: PUSH
9651: LD_INT 1
9653: ST_TO_ADDR
// def_people_respawning := 1 ;
9654: LD_ADDR_EXP 53
9658: PUSH
9659: LD_INT 1
9661: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9662: LD_ADDR_EXP 54
9666: PUSH
9667: LD_INT 1
9669: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9670: LD_ADDR_EXP 55
9674: PUSH
9675: LD_INT 0
9677: ST_TO_ADDR
// def_builduptime := 2 ;
9678: LD_ADDR_EXP 56
9682: PUSH
9683: LD_INT 2
9685: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9686: LD_ADDR_VAR 0 2
9690: PUSH
9691: EMPTY
9692: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9693: LD_ADDR_VAR 0 3
9697: PUSH
9698: EMPTY
9699: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9700: LD_ADDR_LOC 18
9704: PUSH
9705: EMPTY
9706: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9707: LD_ADDR_LOC 19
9711: PUSH
9712: EMPTY
9713: ST_TO_ADDR
// Banned_Controls := [ ] ;
9714: LD_ADDR_LOC 20
9718: PUSH
9719: EMPTY
9720: ST_TO_ADDR
// Banned_Engines := [ ] ;
9721: LD_ADDR_LOC 21
9725: PUSH
9726: EMPTY
9727: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9728: LD_ADDR_LOC 16
9732: PUSH
9733: LD_INT 37
9735: PUSH
9736: EMPTY
9737: LIST
9738: PUSH
9739: LD_INT 4
9741: PUSH
9742: LD_INT 5
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: LD_INT 31
9751: PUSH
9752: LD_INT 32
9754: PUSH
9755: LD_INT 33
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9768: LD_ADDR_LOC 17
9772: PUSH
9773: LD_INT 2
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 4
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: ST_TO_ADDR
// end ; 2 :
9787: GO 11523
9789: LD_INT 2
9791: DOUBLE
9792: EQUAL
9793: IFTRUE 9797
9795: GO 10006
9797: POP
// begin def_base_level := 1 ;
9798: LD_ADDR_EXP 43
9802: PUSH
9803: LD_INT 1
9805: ST_TO_ADDR
// def_amount_of_people := 2 ;
9806: LD_ADDR_EXP 44
9810: PUSH
9811: LD_INT 2
9813: ST_TO_ADDR
// def_skill_level := 3 ;
9814: LD_ADDR_EXP 45
9818: PUSH
9819: LD_INT 3
9821: ST_TO_ADDR
// def_starting_resources := 3 ;
9822: LD_ADDR_EXP 46
9826: PUSH
9827: LD_INT 3
9829: ST_TO_ADDR
// def_shipments_density := 2 ;
9830: LD_ADDR_EXP 47
9834: PUSH
9835: LD_INT 2
9837: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9838: LD_ADDR_EXP 48
9842: PUSH
9843: LD_INT 1
9845: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9846: LD_ADDR_EXP 49
9850: PUSH
9851: LD_INT 2
9853: ST_TO_ADDR
// def_shared_vision := 1 ;
9854: LD_ADDR_EXP 50
9858: PUSH
9859: LD_INT 1
9861: ST_TO_ADDR
// def_morale_flags := 0 ;
9862: LD_ADDR_EXP 51
9866: PUSH
9867: LD_INT 0
9869: ST_TO_ADDR
// def_siberite_detection := 1 ;
9870: LD_ADDR_EXP 52
9874: PUSH
9875: LD_INT 1
9877: ST_TO_ADDR
// def_people_respawning := 0 ;
9878: LD_ADDR_EXP 53
9882: PUSH
9883: LD_INT 0
9885: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9886: LD_ADDR_EXP 54
9890: PUSH
9891: LD_INT 0
9893: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9894: LD_ADDR_EXP 55
9898: PUSH
9899: LD_INT 0
9901: ST_TO_ADDR
// def_builduptime := 2 ;
9902: LD_ADDR_EXP 56
9906: PUSH
9907: LD_INT 2
9909: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9910: LD_ADDR_VAR 0 2
9914: PUSH
9915: LD_INT 1
9917: PUSH
9918: EMPTY
9919: LIST
9920: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9921: LD_ADDR_VAR 0 3
9925: PUSH
9926: EMPTY
9927: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9928: LD_ADDR_LOC 18
9932: PUSH
9933: EMPTY
9934: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9935: LD_ADDR_LOC 19
9939: PUSH
9940: EMPTY
9941: ST_TO_ADDR
// Banned_Controls := [ ] ;
9942: LD_ADDR_LOC 20
9946: PUSH
9947: EMPTY
9948: ST_TO_ADDR
// Banned_Engines := [ ] ;
9949: LD_ADDR_LOC 21
9953: PUSH
9954: EMPTY
9955: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9956: LD_ADDR_LOC 16
9960: PUSH
9961: LD_INT 4
9963: PUSH
9964: LD_INT 5
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: LD_INT 31
9973: PUSH
9974: LD_INT 32
9976: PUSH
9977: LD_INT 33
9979: PUSH
9980: EMPTY
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9989: LD_ADDR_LOC 17
9993: PUSH
9994: LD_INT 1
9996: PUSH
9997: LD_INT 2
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: ST_TO_ADDR
// end ; 3 :
10004: GO 11523
10006: LD_INT 3
10008: DOUBLE
10009: EQUAL
10010: IFTRUE 10014
10012: GO 10257
10014: POP
// begin def_base_level := 1 ;
10015: LD_ADDR_EXP 43
10019: PUSH
10020: LD_INT 1
10022: ST_TO_ADDR
// def_amount_of_people := 2 ;
10023: LD_ADDR_EXP 44
10027: PUSH
10028: LD_INT 2
10030: ST_TO_ADDR
// def_skill_level := 3 ;
10031: LD_ADDR_EXP 45
10035: PUSH
10036: LD_INT 3
10038: ST_TO_ADDR
// def_starting_resources := 3 ;
10039: LD_ADDR_EXP 46
10043: PUSH
10044: LD_INT 3
10046: ST_TO_ADDR
// def_shipments_density := 1 ;
10047: LD_ADDR_EXP 47
10051: PUSH
10052: LD_INT 1
10054: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10055: LD_ADDR_EXP 48
10059: PUSH
10060: LD_INT 0
10062: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10063: LD_ADDR_EXP 49
10067: PUSH
10068: LD_INT 1
10070: ST_TO_ADDR
// def_shared_vision := 1 ;
10071: LD_ADDR_EXP 50
10075: PUSH
10076: LD_INT 1
10078: ST_TO_ADDR
// def_morale_flags := 0 ;
10079: LD_ADDR_EXP 51
10083: PUSH
10084: LD_INT 0
10086: ST_TO_ADDR
// def_siberite_detection := 1 ;
10087: LD_ADDR_EXP 52
10091: PUSH
10092: LD_INT 1
10094: ST_TO_ADDR
// def_people_respawning := 0 ;
10095: LD_ADDR_EXP 53
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10103: LD_ADDR_EXP 54
10107: PUSH
10108: LD_INT 2
10110: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10111: LD_ADDR_EXP 55
10115: PUSH
10116: LD_INT 0
10118: ST_TO_ADDR
// def_builduptime := 1 ;
10119: LD_ADDR_EXP 56
10123: PUSH
10124: LD_INT 1
10126: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10127: LD_ADDR_VAR 0 2
10131: PUSH
10132: LD_INT 23
10134: PUSH
10135: EMPTY
10136: LIST
10137: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
10138: LD_ADDR_VAR 0 3
10142: PUSH
10143: LD_INT 2
10145: PUSH
10146: LD_INT 37
10148: PUSH
10149: LD_INT 32
10151: PUSH
10152: LD_INT 33
10154: PUSH
10155: LD_INT 36
10157: PUSH
10158: LD_INT 16
10160: PUSH
10161: LD_INT 23
10163: PUSH
10164: LD_INT 21
10166: PUSH
10167: LD_INT 18
10169: PUSH
10170: LD_INT 22
10172: PUSH
10173: LD_INT 20
10175: PUSH
10176: LD_INT 19
10178: PUSH
10179: LD_INT 25
10181: PUSH
10182: LD_INT 17
10184: PUSH
10185: LD_INT 24
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10205: LD_ADDR_LOC 18
10209: PUSH
10210: EMPTY
10211: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10212: LD_ADDR_LOC 19
10216: PUSH
10217: EMPTY
10218: ST_TO_ADDR
// Banned_Controls := [ ] ;
10219: LD_ADDR_LOC 20
10223: PUSH
10224: EMPTY
10225: ST_TO_ADDR
// Banned_Engines := [ ] ;
10226: LD_ADDR_LOC 21
10230: PUSH
10231: EMPTY
10232: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10233: LD_ADDR_LOC 16
10237: PUSH
10238: EMPTY
10239: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10240: LD_ADDR_LOC 17
10244: PUSH
10245: EMPTY
10246: ST_TO_ADDR
// No_Mechs := true ;
10247: LD_ADDR_EXP 57
10251: PUSH
10252: LD_INT 1
10254: ST_TO_ADDR
// end ; 4 :
10255: GO 11523
10257: LD_INT 4
10259: DOUBLE
10260: EQUAL
10261: IFTRUE 10265
10263: GO 10440
10265: POP
// begin def_base_level := 1 ;
10266: LD_ADDR_EXP 43
10270: PUSH
10271: LD_INT 1
10273: ST_TO_ADDR
// def_amount_of_people := 2 ;
10274: LD_ADDR_EXP 44
10278: PUSH
10279: LD_INT 2
10281: ST_TO_ADDR
// def_skill_level := 3 ;
10282: LD_ADDR_EXP 45
10286: PUSH
10287: LD_INT 3
10289: ST_TO_ADDR
// def_starting_resources := 3 ;
10290: LD_ADDR_EXP 46
10294: PUSH
10295: LD_INT 3
10297: ST_TO_ADDR
// def_shipments_density := 2 ;
10298: LD_ADDR_EXP 47
10302: PUSH
10303: LD_INT 2
10305: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10306: LD_ADDR_EXP 48
10310: PUSH
10311: LD_INT 1
10313: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10314: LD_ADDR_EXP 49
10318: PUSH
10319: LD_INT 2
10321: ST_TO_ADDR
// def_shared_vision := 1 ;
10322: LD_ADDR_EXP 50
10326: PUSH
10327: LD_INT 1
10329: ST_TO_ADDR
// def_morale_flags := 0 ;
10330: LD_ADDR_EXP 51
10334: PUSH
10335: LD_INT 0
10337: ST_TO_ADDR
// def_siberite_detection := 1 ;
10338: LD_ADDR_EXP 52
10342: PUSH
10343: LD_INT 1
10345: ST_TO_ADDR
// def_people_respawning := 0 ;
10346: LD_ADDR_EXP 53
10350: PUSH
10351: LD_INT 0
10353: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
10354: LD_ADDR_EXP 54
10358: PUSH
10359: LD_INT 0
10361: ST_TO_ADDR
// def_siberite_bomb := 1 ;
10362: LD_ADDR_EXP 55
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// def_builduptime := 3 ;
10370: LD_ADDR_EXP 56
10374: PUSH
10375: LD_INT 3
10377: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
10378: LD_ADDR_VAR 0 2
10382: PUSH
10383: LD_INT 1
10385: PUSH
10386: EMPTY
10387: LIST
10388: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
10389: LD_ADDR_VAR 0 3
10393: PUSH
10394: EMPTY
10395: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10396: LD_ADDR_LOC 18
10400: PUSH
10401: EMPTY
10402: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10403: LD_ADDR_LOC 19
10407: PUSH
10408: EMPTY
10409: ST_TO_ADDR
// Banned_Controls := [ ] ;
10410: LD_ADDR_LOC 20
10414: PUSH
10415: EMPTY
10416: ST_TO_ADDR
// Banned_Engines := [ ] ;
10417: LD_ADDR_LOC 21
10421: PUSH
10422: EMPTY
10423: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10424: LD_ADDR_LOC 16
10428: PUSH
10429: EMPTY
10430: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10431: LD_ADDR_LOC 17
10435: PUSH
10436: EMPTY
10437: ST_TO_ADDR
// end ; 5 :
10438: GO 11523
10440: LD_INT 5
10442: DOUBLE
10443: EQUAL
10444: IFTRUE 10448
10446: GO 10697
10448: POP
// begin def_base_level := 0 ;
10449: LD_ADDR_EXP 43
10453: PUSH
10454: LD_INT 0
10456: ST_TO_ADDR
// def_amount_of_people := 0 ;
10457: LD_ADDR_EXP 44
10461: PUSH
10462: LD_INT 0
10464: ST_TO_ADDR
// def_skill_level := 0 ;
10465: LD_ADDR_EXP 45
10469: PUSH
10470: LD_INT 0
10472: ST_TO_ADDR
// def_starting_resources := 0 ;
10473: LD_ADDR_EXP 46
10477: PUSH
10478: LD_INT 0
10480: ST_TO_ADDR
// def_shipments_density := 0 ;
10481: LD_ADDR_EXP 47
10485: PUSH
10486: LD_INT 0
10488: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10489: LD_ADDR_EXP 48
10493: PUSH
10494: LD_INT 0
10496: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10497: LD_ADDR_EXP 49
10501: PUSH
10502: LD_INT 0
10504: ST_TO_ADDR
// def_shared_vision := 1 ;
10505: LD_ADDR_EXP 50
10509: PUSH
10510: LD_INT 1
10512: ST_TO_ADDR
// def_morale_flags := 0 ;
10513: LD_ADDR_EXP 51
10517: PUSH
10518: LD_INT 0
10520: ST_TO_ADDR
// def_siberite_detection := 0 ;
10521: LD_ADDR_EXP 52
10525: PUSH
10526: LD_INT 0
10528: ST_TO_ADDR
// def_people_respawning := 1 ;
10529: LD_ADDR_EXP 53
10533: PUSH
10534: LD_INT 1
10536: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10537: LD_ADDR_EXP 54
10541: PUSH
10542: LD_INT 1
10544: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10545: LD_ADDR_EXP 55
10549: PUSH
10550: LD_INT 0
10552: ST_TO_ADDR
// def_builduptime := 0 ;
10553: LD_ADDR_EXP 56
10557: PUSH
10558: LD_INT 0
10560: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10561: LD_ADDR_VAR 0 2
10565: PUSH
10566: LD_INT 10
10568: PUSH
10569: LD_INT 3
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10576: LD_ADDR_VAR 0 3
10580: PUSH
10581: LD_INT 12
10583: PUSH
10584: LD_INT 11
10586: PUSH
10587: LD_INT 14
10589: PUSH
10590: LD_INT 13
10592: PUSH
10593: LD_INT 5
10595: PUSH
10596: LD_INT 24
10598: PUSH
10599: LD_INT 21
10601: PUSH
10602: LD_INT 33
10604: PUSH
10605: LD_INT 36
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10619: LD_ADDR_LOC 18
10623: PUSH
10624: LD_INT 31
10626: PUSH
10627: EMPTY
10628: LIST
10629: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10630: LD_ADDR_LOC 19
10634: PUSH
10635: EMPTY
10636: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10637: LD_ADDR_LOC 20
10641: PUSH
10642: LD_INT 2
10644: PUSH
10645: EMPTY
10646: LIST
10647: ST_TO_ADDR
// Banned_Engines := [ ] ;
10648: LD_ADDR_LOC 21
10652: PUSH
10653: EMPTY
10654: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10655: LD_ADDR_LOC 16
10659: PUSH
10660: LD_INT 4
10662: PUSH
10663: EMPTY
10664: LIST
10665: PUSH
10666: LD_INT 31
10668: PUSH
10669: LD_INT 32
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10680: LD_ADDR_LOC 17
10684: PUSH
10685: LD_INT 1
10687: PUSH
10688: LD_INT 1
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: ST_TO_ADDR
// end ; 6 :
10695: GO 11523
10697: LD_INT 6
10699: DOUBLE
10700: EQUAL
10701: IFTRUE 10705
10703: GO 10908
10705: POP
// begin def_base_level := 1 ;
10706: LD_ADDR_EXP 43
10710: PUSH
10711: LD_INT 1
10713: ST_TO_ADDR
// def_amount_of_people := 2 ;
10714: LD_ADDR_EXP 44
10718: PUSH
10719: LD_INT 2
10721: ST_TO_ADDR
// def_skill_level := 3 ;
10722: LD_ADDR_EXP 45
10726: PUSH
10727: LD_INT 3
10729: ST_TO_ADDR
// def_starting_resources := 3 ;
10730: LD_ADDR_EXP 46
10734: PUSH
10735: LD_INT 3
10737: ST_TO_ADDR
// def_shipments_density := 1 ;
10738: LD_ADDR_EXP 47
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10746: LD_ADDR_EXP 48
10750: PUSH
10751: LD_INT 0
10753: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10754: LD_ADDR_EXP 49
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// def_shared_vision := 1 ;
10762: LD_ADDR_EXP 50
10766: PUSH
10767: LD_INT 1
10769: ST_TO_ADDR
// def_morale_flags := 0 ;
10770: LD_ADDR_EXP 51
10774: PUSH
10775: LD_INT 0
10777: ST_TO_ADDR
// def_siberite_detection := 1 ;
10778: LD_ADDR_EXP 52
10782: PUSH
10783: LD_INT 1
10785: ST_TO_ADDR
// def_people_respawning := 2 ;
10786: LD_ADDR_EXP 53
10790: PUSH
10791: LD_INT 2
10793: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10794: LD_ADDR_EXP 54
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10802: LD_ADDR_EXP 55
10806: PUSH
10807: LD_INT 0
10809: ST_TO_ADDR
// def_builduptime := 1 ;
10810: LD_ADDR_EXP 56
10814: PUSH
10815: LD_INT 1
10817: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10818: LD_ADDR_VAR 0 2
10822: PUSH
10823: LD_INT 23
10825: PUSH
10826: EMPTY
10827: LIST
10828: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10829: LD_ADDR_VAR 0 3
10833: PUSH
10834: LD_INT 2
10836: PUSH
10837: LD_INT 37
10839: PUSH
10840: LD_INT 31
10842: PUSH
10843: LD_INT 32
10845: PUSH
10846: LD_INT 33
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10856: LD_ADDR_LOC 18
10860: PUSH
10861: EMPTY
10862: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10863: LD_ADDR_LOC 19
10867: PUSH
10868: EMPTY
10869: ST_TO_ADDR
// Banned_Controls := [ ] ;
10870: LD_ADDR_LOC 20
10874: PUSH
10875: EMPTY
10876: ST_TO_ADDR
// Banned_Engines := [ ] ;
10877: LD_ADDR_LOC 21
10881: PUSH
10882: EMPTY
10883: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10884: LD_ADDR_LOC 16
10888: PUSH
10889: EMPTY
10890: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10891: LD_ADDR_LOC 17
10895: PUSH
10896: EMPTY
10897: ST_TO_ADDR
// No_Mechs := true ;
10898: LD_ADDR_EXP 57
10902: PUSH
10903: LD_INT 1
10905: ST_TO_ADDR
// end ; 7 :
10906: GO 11523
10908: LD_INT 7
10910: DOUBLE
10911: EQUAL
10912: IFTRUE 10916
10914: GO 11114
10916: POP
// begin def_base_level := 1 ;
10917: LD_ADDR_EXP 43
10921: PUSH
10922: LD_INT 1
10924: ST_TO_ADDR
// def_amount_of_people := 2 ;
10925: LD_ADDR_EXP 44
10929: PUSH
10930: LD_INT 2
10932: ST_TO_ADDR
// def_skill_level := 3 ;
10933: LD_ADDR_EXP 45
10937: PUSH
10938: LD_INT 3
10940: ST_TO_ADDR
// def_starting_resources := 3 ;
10941: LD_ADDR_EXP 46
10945: PUSH
10946: LD_INT 3
10948: ST_TO_ADDR
// def_shipments_density := 1 ;
10949: LD_ADDR_EXP 47
10953: PUSH
10954: LD_INT 1
10956: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10957: LD_ADDR_EXP 48
10961: PUSH
10962: LD_INT 1
10964: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10965: LD_ADDR_EXP 49
10969: PUSH
10970: LD_INT 2
10972: ST_TO_ADDR
// def_shared_vision := 1 ;
10973: LD_ADDR_EXP 50
10977: PUSH
10978: LD_INT 1
10980: ST_TO_ADDR
// def_morale_flags := 0 ;
10981: LD_ADDR_EXP 51
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// def_siberite_detection := 1 ;
10989: LD_ADDR_EXP 52
10993: PUSH
10994: LD_INT 1
10996: ST_TO_ADDR
// def_people_respawning := 0 ;
10997: LD_ADDR_EXP 53
11001: PUSH
11002: LD_INT 0
11004: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
11005: LD_ADDR_EXP 54
11009: PUSH
11010: LD_INT 1
11012: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11013: LD_ADDR_EXP 55
11017: PUSH
11018: LD_INT 0
11020: ST_TO_ADDR
// def_builduptime := 3 ;
11021: LD_ADDR_EXP 56
11025: PUSH
11026: LD_INT 3
11028: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
11029: LD_ADDR_VAR 0 2
11033: PUSH
11034: LD_INT 23
11036: PUSH
11037: EMPTY
11038: LIST
11039: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
11040: LD_ADDR_VAR 0 3
11044: PUSH
11045: LD_INT 37
11047: PUSH
11048: EMPTY
11049: LIST
11050: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11051: LD_ADDR_LOC 18
11055: PUSH
11056: EMPTY
11057: ST_TO_ADDR
// Banned_Chassis := [ ] ;
11058: LD_ADDR_LOC 19
11062: PUSH
11063: EMPTY
11064: ST_TO_ADDR
// Banned_Controls := [ ] ;
11065: LD_ADDR_LOC 20
11069: PUSH
11070: EMPTY
11071: ST_TO_ADDR
// Banned_Engines := [ ] ;
11072: LD_ADDR_LOC 21
11076: PUSH
11077: EMPTY
11078: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
11079: LD_ADDR_LOC 16
11083: PUSH
11084: LD_INT 31
11086: PUSH
11087: LD_INT 32
11089: PUSH
11090: LD_INT 33
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
11101: LD_ADDR_LOC 17
11105: PUSH
11106: LD_INT 10
11108: PUSH
11109: EMPTY
11110: LIST
11111: ST_TO_ADDR
// end ; 8 :
11112: GO 11523
11114: LD_INT 8
11116: DOUBLE
11117: EQUAL
11118: IFTRUE 11122
11120: GO 11522
11122: POP
// begin def_base_level := 0 ;
11123: LD_ADDR_EXP 43
11127: PUSH
11128: LD_INT 0
11130: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
11131: LD_ADDR_EXP 44
11135: PUSH
11136: LD_INT 0
11138: PPUSH
11139: LD_INT 1
11141: PPUSH
11142: CALL_OW 12
11146: ST_TO_ADDR
// def_skill_level := 0 ;
11147: LD_ADDR_EXP 45
11151: PUSH
11152: LD_INT 0
11154: ST_TO_ADDR
// def_starting_resources := 2 ;
11155: LD_ADDR_EXP 46
11159: PUSH
11160: LD_INT 2
11162: ST_TO_ADDR
// def_shipments_density := 1 ;
11163: LD_ADDR_EXP 47
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
11171: LD_ADDR_EXP 48
11175: PUSH
11176: LD_INT 0
11178: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
11179: LD_ADDR_EXP 49
11183: PUSH
11184: LD_INT 0
11186: ST_TO_ADDR
// def_shared_vision := 1 ;
11187: LD_ADDR_EXP 50
11191: PUSH
11192: LD_INT 1
11194: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
11195: LD_ADDR_EXP 51
11199: PUSH
11200: LD_INT 0
11202: PPUSH
11203: LD_INT 2
11205: PPUSH
11206: CALL_OW 12
11210: ST_TO_ADDR
// def_siberite_detection := 0 ;
11211: LD_ADDR_EXP 52
11215: PUSH
11216: LD_INT 0
11218: ST_TO_ADDR
// def_people_respawning := 0 ;
11219: LD_ADDR_EXP 53
11223: PUSH
11224: LD_INT 0
11226: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
11227: LD_ADDR_EXP 54
11231: PUSH
11232: LD_INT 2
11234: ST_TO_ADDR
// def_siberite_bomb := 0 ;
11235: LD_ADDR_EXP 55
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// def_builduptime := 0 ;
11243: LD_ADDR_EXP 56
11247: PUSH
11248: LD_INT 0
11250: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
11251: LD_ADDR_VAR 0 2
11255: PUSH
11256: LD_INT 23
11258: PUSH
11259: LD_INT 20
11261: PUSH
11262: LD_INT 40
11264: PUSH
11265: LD_INT 47
11267: PUSH
11268: LD_INT 46
11270: PUSH
11271: LD_INT 39
11273: PUSH
11274: LD_INT 71
11276: PUSH
11277: LD_INT 34
11279: PUSH
11280: LD_INT 41
11282: PUSH
11283: LD_INT 44
11285: PUSH
11286: LD_INT 17
11288: PUSH
11289: LD_INT 16
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
11306: LD_ADDR_VAR 0 3
11310: PUSH
11311: LD_INT 37
11313: PUSH
11314: LD_INT 5
11316: PUSH
11317: LD_INT 13
11319: PUSH
11320: LD_INT 34
11322: PUSH
11323: LD_INT 12
11325: PUSH
11326: LD_INT 15
11328: PUSH
11329: LD_INT 11
11331: PUSH
11332: LD_INT 14
11334: PUSH
11335: LD_INT 29
11337: PUSH
11338: LD_INT 30
11340: PUSH
11341: LD_INT 28
11343: PUSH
11344: LD_INT 24
11346: PUSH
11347: LD_INT 25
11349: PUSH
11350: LD_INT 20
11352: PUSH
11353: LD_INT 21
11355: PUSH
11356: LD_INT 22
11358: PUSH
11359: LD_INT 36
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: ST_TO_ADDR
// Banned_Weapons := [ ] ;
11381: LD_ADDR_LOC 18
11385: PUSH
11386: EMPTY
11387: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
11388: LD_ADDR_LOC 19
11392: PUSH
11393: LD_INT 14
11395: PUSH
11396: EMPTY
11397: LIST
11398: ST_TO_ADDR
// Banned_Controls := [ ] ;
11399: LD_ADDR_LOC 20
11403: PUSH
11404: EMPTY
11405: ST_TO_ADDR
// Banned_Engines := [ ] ;
11406: LD_ADDR_LOC 21
11410: PUSH
11411: EMPTY
11412: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
11413: LD_ADDR_LOC 16
11417: PUSH
11418: LD_INT 31
11420: PUSH
11421: LD_INT 32
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PUSH
11428: LD_INT 4
11430: PUSH
11431: EMPTY
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11438: LD_ADDR_LOC 17
11442: PUSH
11443: LD_INT 2
11445: PUSH
11446: LD_INT 1
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: ST_TO_ADDR
// for i := 1 to 8 do
11453: LD_ADDR_VAR 0 4
11457: PUSH
11458: DOUBLE
11459: LD_INT 1
11461: DEC
11462: ST_TO_ADDR
11463: LD_INT 8
11465: PUSH
11466: FOR_TO
11467: IFFALSE 11518
// if ( Side_Nations [ i ] = 3 ) then
11469: LD_EXP 22
11473: PUSH
11474: LD_VAR 0 4
11478: ARRAY
11479: PUSH
11480: LD_INT 3
11482: EQUAL
11483: IFFALSE 11516
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11485: LD_ADDR_EXP 22
11489: PUSH
11490: LD_EXP 22
11494: PPUSH
11495: LD_VAR 0 4
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: LD_INT 2
11505: PPUSH
11506: CALL_OW 12
11510: PPUSH
11511: CALL_OW 1
11515: ST_TO_ADDR
11516: GO 11466
11518: POP
11519: POP
// end ; end ;
11520: GO 11523
11522: POP
// for i := 1 to 8 do
11523: LD_ADDR_VAR 0 4
11527: PUSH
11528: DOUBLE
11529: LD_INT 1
11531: DEC
11532: ST_TO_ADDR
11533: LD_INT 8
11535: PUSH
11536: FOR_TO
11537: IFFALSE 11621
// if Side_Positions [ i ] then
11539: LD_EXP 21
11543: PUSH
11544: LD_VAR 0 4
11548: ARRAY
11549: IFFALSE 11619
// begin for j in Unavailable_Techs do
11551: LD_ADDR_VAR 0 5
11555: PUSH
11556: LD_VAR 0 2
11560: PUSH
11561: FOR_IN
11562: IFFALSE 11583
// SetTech ( j , i , 0 ) ;
11564: LD_VAR 0 5
11568: PPUSH
11569: LD_VAR 0 4
11573: PPUSH
11574: LD_INT 0
11576: PPUSH
11577: CALL_OW 322
11581: GO 11561
11583: POP
11584: POP
// for j in Unavailable_Builds do
11585: LD_ADDR_VAR 0 5
11589: PUSH
11590: LD_VAR 0 3
11594: PUSH
11595: FOR_IN
11596: IFFALSE 11617
// SetRestrict ( j , i , 0 ) ;
11598: LD_VAR 0 5
11602: PPUSH
11603: LD_VAR 0 4
11607: PPUSH
11608: LD_INT 0
11610: PPUSH
11611: CALL_OW 324
11615: GO 11595
11617: POP
11618: POP
// end ;
11619: GO 11536
11621: POP
11622: POP
// end ;
11623: LD_VAR 0 1
11627: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11628: LD_INT 0
11630: PPUSH
11631: PPUSH
11632: PPUSH
11633: PPUSH
11634: PPUSH
11635: PPUSH
11636: PPUSH
// for i := 1 to Restricted_Builds do
11637: LD_ADDR_VAR 0 2
11641: PUSH
11642: DOUBLE
11643: LD_INT 1
11645: DEC
11646: ST_TO_ADDR
11647: LD_LOC 16
11651: PUSH
11652: FOR_TO
11653: IFFALSE 11963
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11655: LD_LOC 16
11659: PUSH
11660: LD_VAR 0 2
11664: ARRAY
11665: PUSH
11666: LD_INT 1
11668: ARRAY
11669: PUSH
11670: LD_INT 31
11672: DOUBLE
11673: EQUAL
11674: IFTRUE 11690
11676: LD_INT 32
11678: DOUBLE
11679: EQUAL
11680: IFTRUE 11690
11682: LD_INT 33
11684: DOUBLE
11685: EQUAL
11686: IFTRUE 11690
11688: GO 11701
11690: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11691: LD_ADDR_VAR 0 6
11695: PUSH
11696: LD_STRING #Turrets
11698: ST_TO_ADDR
11699: GO 11746
11701: LD_INT 4
11703: DOUBLE
11704: EQUAL
11705: IFTRUE 11715
11707: LD_INT 5
11709: DOUBLE
11710: EQUAL
11711: IFTRUE 11715
11713: GO 11726
11715: POP
// btype := #Armouries ; b_Behemoth :
11716: LD_ADDR_VAR 0 6
11720: PUSH
11721: LD_STRING #Armouries
11723: ST_TO_ADDR
11724: GO 11746
11726: LD_INT 37
11728: DOUBLE
11729: EQUAL
11730: IFTRUE 11734
11732: GO 11745
11734: POP
// btype := #Behemoths ; end ;
11735: LD_ADDR_VAR 0 6
11739: PUSH
11740: LD_STRING #Behemoths
11742: ST_TO_ADDR
11743: GO 11746
11745: POP
// list := [ ] ;
11746: LD_ADDR_VAR 0 7
11750: PUSH
11751: EMPTY
11752: ST_TO_ADDR
// for j := 1 to 8 do
11753: LD_ADDR_VAR 0 3
11757: PUSH
11758: DOUBLE
11759: LD_INT 1
11761: DEC
11762: ST_TO_ADDR
11763: LD_INT 8
11765: PUSH
11766: FOR_TO
11767: IFFALSE 11860
// if Side_Positions [ j ] then
11769: LD_EXP 21
11773: PUSH
11774: LD_VAR 0 3
11778: ARRAY
11779: IFFALSE 11858
// begin amount := 0 ;
11781: LD_ADDR_VAR 0 5
11785: PUSH
11786: LD_INT 0
11788: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11789: LD_ADDR_VAR 0 4
11793: PUSH
11794: LD_LOC 16
11798: PUSH
11799: LD_VAR 0 2
11803: ARRAY
11804: PUSH
11805: FOR_IN
11806: IFFALSE 11854
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11808: LD_ADDR_VAR 0 5
11812: PUSH
11813: LD_VAR 0 5
11817: PUSH
11818: LD_INT 22
11820: PUSH
11821: LD_VAR 0 3
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 30
11832: PUSH
11833: LD_VAR 0 4
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PPUSH
11846: CALL_OW 69
11850: PLUS
11851: ST_TO_ADDR
11852: GO 11805
11854: POP
11855: POP
// break ;
11856: GO 11860
// end ;
11858: GO 11766
11860: POP
11861: POP
// list := [ ] ;
11862: LD_ADDR_VAR 0 7
11866: PUSH
11867: EMPTY
11868: ST_TO_ADDR
// for j := 1 to 8 do
11869: LD_ADDR_VAR 0 3
11873: PUSH
11874: DOUBLE
11875: LD_INT 1
11877: DEC
11878: ST_TO_ADDR
11879: LD_INT 8
11881: PUSH
11882: FOR_TO
11883: IFFALSE 11903
// list := list ^ amount ;
11885: LD_ADDR_VAR 0 7
11889: PUSH
11890: LD_VAR 0 7
11894: PUSH
11895: LD_VAR 0 5
11899: ADD
11900: ST_TO_ADDR
11901: GO 11882
11903: POP
11904: POP
// Already_Built := Already_Built ^ [ list ] ;
11905: LD_ADDR_LOC 22
11909: PUSH
11910: LD_LOC 22
11914: PUSH
11915: LD_VAR 0 7
11919: PUSH
11920: EMPTY
11921: LIST
11922: ADD
11923: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11924: LD_ADDR_LOC 23
11928: PUSH
11929: LD_LOC 23
11933: PUSH
11934: LD_VAR 0 6
11938: PUSH
11939: LD_VAR 0 5
11943: PUSH
11944: LD_LOC 17
11948: PUSH
11949: LD_VAR 0 2
11953: ARRAY
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: ADD
11960: ST_TO_ADDR
// end ;
11961: GO 11652
11963: POP
11964: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11965: LD_ADDR_LOC 24
11969: PUSH
11970: LD_INT 0
11972: PUSH
11973: LD_INT 0
11975: PUSH
11976: LD_INT 0
11978: PUSH
11979: LD_INT 0
11981: PUSH
11982: LD_INT 0
11984: PUSH
11985: LD_INT 0
11987: PUSH
11988: LD_INT 0
11990: PUSH
11991: LD_INT 0
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: ST_TO_ADDR
// if Limits_Info then
12004: LD_LOC 23
12008: IFFALSE 12024
// Limits_Info := #Limits ^ Limits_Info ;
12010: LD_ADDR_LOC 23
12014: PUSH
12015: LD_STRING #Limits
12017: PUSH
12018: LD_LOC 23
12022: ADD
12023: ST_TO_ADDR
// end ;
12024: LD_VAR 0 1
12028: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
12029: LD_INT 0
12031: PPUSH
12032: PPUSH
12033: PPUSH
12034: PPUSH
// for i := 1 to Restricted_Builds do
12035: LD_ADDR_VAR 0 7
12039: PUSH
12040: DOUBLE
12041: LD_INT 1
12043: DEC
12044: ST_TO_ADDR
12045: LD_LOC 16
12049: PUSH
12050: FOR_TO
12051: IFFALSE 12474
// if BType in Restricted_Builds [ i ] then
12053: LD_VAR 0 2
12057: PUSH
12058: LD_LOC 16
12062: PUSH
12063: LD_VAR 0 7
12067: ARRAY
12068: IN
12069: IFFALSE 12472
// begin if old_side then
12071: LD_VAR 0 4
12075: IFFALSE 12201
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
12077: LD_LOC 22
12081: PUSH
12082: LD_VAR 0 7
12086: ARRAY
12087: PUSH
12088: LD_VAR 0 3
12092: ARRAY
12093: PUSH
12094: LD_VAR 0 5
12098: PLUS
12099: PUSH
12100: LD_LOC 17
12104: PUSH
12105: LD_VAR 0 7
12109: ARRAY
12110: GREATER
12111: IFFALSE 12137
// begin SetSide ( un , old_side ) ;
12113: LD_VAR 0 1
12117: PPUSH
12118: LD_VAR 0 4
12122: PPUSH
12123: CALL_OW 235
// count := 0 ;
12127: LD_ADDR_VAR 0 5
12131: PUSH
12132: LD_INT 0
12134: ST_TO_ADDR
// end else
12135: GO 12201
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
12137: LD_ADDR_LOC 22
12141: PUSH
12142: LD_LOC 22
12146: PPUSH
12147: LD_VAR 0 7
12151: PPUSH
12152: LD_LOC 22
12156: PUSH
12157: LD_VAR 0 7
12161: ARRAY
12162: PPUSH
12163: LD_VAR 0 4
12167: PPUSH
12168: LD_LOC 22
12172: PUSH
12173: LD_VAR 0 7
12177: ARRAY
12178: PUSH
12179: LD_VAR 0 4
12183: ARRAY
12184: PUSH
12185: LD_VAR 0 5
12189: MINUS
12190: PPUSH
12191: CALL_OW 1
12195: PPUSH
12196: CALL_OW 1
12200: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
12201: LD_ADDR_LOC 22
12205: PUSH
12206: LD_LOC 22
12210: PPUSH
12211: LD_VAR 0 7
12215: PPUSH
12216: LD_LOC 22
12220: PUSH
12221: LD_VAR 0 7
12225: ARRAY
12226: PPUSH
12227: LD_VAR 0 3
12231: PPUSH
12232: LD_LOC 22
12236: PUSH
12237: LD_VAR 0 7
12241: ARRAY
12242: PUSH
12243: LD_VAR 0 3
12247: ARRAY
12248: PUSH
12249: LD_VAR 0 5
12253: PLUS
12254: PPUSH
12255: CALL_OW 1
12259: PPUSH
12260: CALL_OW 1
12264: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
12265: LD_VAR 0 5
12269: PUSH
12270: LD_INT 0
12272: NONEQUAL
12273: PUSH
12274: LD_VAR 0 3
12278: PUSH
12279: LD_OWVAR 2
12283: EQUAL
12284: AND
12285: IFFALSE 12328
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
12287: LD_ADDR_LOC 23
12291: PUSH
12292: LD_LOC 23
12296: PPUSH
12297: LD_INT 3
12299: PUSH
12300: LD_VAR 0 7
12304: MUL
12305: PPUSH
12306: LD_LOC 22
12310: PUSH
12311: LD_VAR 0 7
12315: ARRAY
12316: PUSH
12317: LD_VAR 0 3
12321: ARRAY
12322: PPUSH
12323: CALL_OW 1
12327: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
12328: LD_LOC 22
12332: PUSH
12333: LD_VAR 0 7
12337: ARRAY
12338: PUSH
12339: LD_VAR 0 3
12343: ARRAY
12344: PUSH
12345: LD_LOC 17
12349: PUSH
12350: LD_VAR 0 7
12354: ARRAY
12355: GREATER
12356: IFFALSE 12383
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
12358: LD_ADDR_LOC 24
12362: PUSH
12363: LD_LOC 24
12367: PPUSH
12368: LD_VAR 0 3
12372: PPUSH
12373: LD_INT 1
12375: PPUSH
12376: CALL_OW 1
12380: ST_TO_ADDR
// end else
12381: GO 12470
// begin for j := 1 to Restricted_Builds do
12383: LD_ADDR_VAR 0 8
12387: PUSH
12388: DOUBLE
12389: LD_INT 1
12391: DEC
12392: ST_TO_ADDR
12393: LD_LOC 16
12397: PUSH
12398: FOR_TO
12399: IFFALSE 12443
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
12401: LD_LOC 22
12405: PUSH
12406: LD_VAR 0 8
12410: ARRAY
12411: PUSH
12412: LD_VAR 0 3
12416: ARRAY
12417: PUSH
12418: LD_LOC 17
12422: PUSH
12423: LD_VAR 0 8
12427: ARRAY
12428: GREATER
12429: IFFALSE 12441
// begin Is_Cheater := true ;
12431: LD_ADDR_VAR 0 9
12435: PUSH
12436: LD_INT 1
12438: ST_TO_ADDR
// break ;
12439: GO 12443
// end ;
12441: GO 12398
12443: POP
12444: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12445: LD_ADDR_LOC 24
12449: PUSH
12450: LD_LOC 24
12454: PPUSH
12455: LD_VAR 0 3
12459: PPUSH
12460: LD_VAR 0 9
12464: PPUSH
12465: CALL_OW 1
12469: ST_TO_ADDR
// end ; break ;
12470: GO 12474
// end ;
12472: GO 12050
12474: POP
12475: POP
// end ;
12476: LD_VAR 0 6
12480: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12481: LD_VAR 0 5
12485: PUSH
12486: LD_LOC 18
12490: IN
12491: PUSH
12492: LD_VAR 0 2
12496: PUSH
12497: LD_LOC 19
12501: IN
12502: OR
12503: PUSH
12504: LD_VAR 0 4
12508: PUSH
12509: LD_LOC 20
12513: IN
12514: OR
12515: PUSH
12516: LD_VAR 0 3
12520: PUSH
12521: LD_LOC 21
12525: IN
12526: OR
12527: IFFALSE 12538
// ComCancel ( factory ) ;
12529: LD_VAR 0 1
12533: PPUSH
12534: CALL_OW 127
// end ;
12538: PPOPN 5
12540: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12541: LD_VAR 0 2
12545: PUSH
12546: LD_LOC 18
12550: IN
12551: IFFALSE 12562
// ComCancel ( building ) ;
12553: LD_VAR 0 1
12557: PPUSH
12558: CALL_OW 127
// end ; end_of_file
12562: PPOPN 2
12564: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
12565: LD_INT 0
12567: PPUSH
12568: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12569: LD_ADDR_VAR 0 2
12573: PUSH
12574: LD_STRING #Multi1x1-Time
12576: PUSH
12577: LD_OWVAR 1
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12586: LD_INT 0
12588: PUSH
12589: LD_EXP 17
12593: PUSH
12594: LD_OWVAR 1
12598: MINUS
12599: LESSEQUAL
12600: IFFALSE 12631
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12602: LD_ADDR_VAR 0 2
12606: PUSH
12607: LD_VAR 0 2
12611: PUSH
12612: LD_STRING #allowedsibbomb
12614: PUSH
12615: LD_EXP 17
12619: PUSH
12620: LD_OWVAR 1
12624: MINUS
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: ADD
12630: ST_TO_ADDR
// if ( ExtraStrings ) then
12631: LD_EXP 58
12635: IFFALSE 12657
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12637: LD_ADDR_VAR 0 2
12641: PUSH
12642: LD_VAR 0 2
12646: PUSH
12647: LD_STRING 
12649: ADD
12650: PUSH
12651: LD_EXP 58
12655: ADD
12656: ST_TO_ADDR
// if ( LimitsStrings ) then
12657: CALL 9405 0 0
12661: IFFALSE 12683
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12663: LD_ADDR_VAR 0 2
12667: PUSH
12668: LD_VAR 0 2
12672: PUSH
12673: LD_STRING 
12675: ADD
12676: PUSH
12677: CALL 9405 0 0
12681: ADD
12682: ST_TO_ADDR
// Display_Strings := AllStrings ;
12683: LD_ADDR_OWVAR 47
12687: PUSH
12688: LD_VAR 0 2
12692: ST_TO_ADDR
// end ;
12693: LD_VAR 0 1
12697: RET
// every 0 0$1 do
12698: GO 12700
12700: DISABLE
// begin ShowTimer ;
12701: CALL 12565 0 0
// enable ;
12705: ENABLE
// end ; end_of_file
12706: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12707: LD_INT 0
12709: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12710: LD_VAR 0 1
12714: PPUSH
12715: CALL_OW 255
12719: PUSH
12720: LD_VAR 0 4
12724: EQUAL
12725: IFFALSE 12744
// begin SetAchievement ( ACH_RAD ) ;
12727: LD_STRING ACH_RAD
12729: PPUSH
12730: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12734: LD_STRING ACH_NL
12736: PPUSH
12737: LD_INT 1
12739: PPUSH
12740: CALL_OW 564
// end end ;
12744: LD_VAR 0 5
12748: RET
// export function SA_Win ( side ) ; begin
12749: LD_INT 0
12751: PPUSH
// case side of 1 :
12752: LD_VAR 0 1
12756: PUSH
12757: LD_INT 1
12759: DOUBLE
12760: EQUAL
12761: IFTRUE 12765
12763: GO 12778
12765: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12766: LD_STRING ACH_AH
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: CALL_OW 564
12776: GO 12941
12778: LD_INT 2
12780: DOUBLE
12781: EQUAL
12782: IFTRUE 12786
12784: GO 12799
12786: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12787: LD_STRING ACH_E
12789: PPUSH
12790: LD_INT 1
12792: PPUSH
12793: CALL_OW 564
12797: GO 12941
12799: LD_INT 3
12801: DOUBLE
12802: EQUAL
12803: IFTRUE 12807
12805: GO 12820
12807: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12808: LD_STRING ACH_OOL
12810: PPUSH
12811: LD_INT 1
12813: PPUSH
12814: CALL_OW 564
12818: GO 12941
12820: LD_INT 1
12822: PUSH
12823: LD_INT 2
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: DOUBLE
12830: EQUAL
12831: IFTRUE 12835
12833: GO 12860
12835: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12836: LD_STRING ACH_AH
12838: PPUSH
12839: LD_REAL  5.00000000000000E-0001
12842: PPUSH
12843: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12847: LD_STRING ACH_E
12849: PPUSH
12850: LD_REAL  5.00000000000000E-0001
12853: PPUSH
12854: CALL_OW 564
// end ; [ 2 , 3 ] :
12858: GO 12941
12860: LD_INT 2
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: DOUBLE
12870: EQUAL
12871: IFTRUE 12875
12873: GO 12900
12875: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12876: LD_STRING ACH_OOL
12878: PPUSH
12879: LD_REAL  5.00000000000000E-0001
12882: PPUSH
12883: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12887: LD_STRING ACH_E
12889: PPUSH
12890: LD_REAL  5.00000000000000E-0001
12893: PPUSH
12894: CALL_OW 564
// end ; [ 3 , 1 ] :
12898: GO 12941
12900: LD_INT 3
12902: PUSH
12903: LD_INT 1
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 12940
12915: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12916: LD_STRING ACH_AH
12918: PPUSH
12919: LD_REAL  5.00000000000000E-0001
12922: PPUSH
12923: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12927: LD_STRING ACH_OOL
12929: PPUSH
12930: LD_REAL  5.00000000000000E-0001
12933: PPUSH
12934: CALL_OW 564
// end ; end ;
12938: GO 12941
12940: POP
// end ; end_of_file
12941: LD_VAR 0 2
12945: RET
// export function SetMpTechs ( ) ; var side , i ; begin
12946: LD_INT 0
12948: PPUSH
12949: PPUSH
12950: PPUSH
// for side = 1 to 8 do
12951: LD_ADDR_VAR 0 2
12955: PUSH
12956: DOUBLE
12957: LD_INT 1
12959: DEC
12960: ST_TO_ADDR
12961: LD_INT 8
12963: PUSH
12964: FOR_TO
12965: IFFALSE 13086
// begin for i = 1 to 72 do
12967: LD_ADDR_VAR 0 3
12971: PUSH
12972: DOUBLE
12973: LD_INT 1
12975: DEC
12976: ST_TO_ADDR
12977: LD_INT 72
12979: PUSH
12980: FOR_TO
12981: IFFALSE 13012
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12983: LD_VAR 0 3
12987: PPUSH
12988: LD_VAR 0 2
12992: PPUSH
12993: LD_INT 0
12995: PPUSH
12996: LD_VAR 0 3
13000: PPUSH
13001: CALL_OW 565
13005: PPUSH
13006: CALL_OW 322
13010: GO 12980
13012: POP
13013: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
13014: LD_INT 73
13016: PPUSH
13017: LD_VAR 0 2
13021: PPUSH
13022: LD_INT 0
13024: PPUSH
13025: LD_INT 25
13027: PPUSH
13028: CALL_OW 565
13032: PPUSH
13033: CALL_OW 322
// for i = 0 to 40 do
13037: LD_ADDR_VAR 0 3
13041: PUSH
13042: DOUBLE
13043: LD_INT 0
13045: DEC
13046: ST_TO_ADDR
13047: LD_INT 40
13049: PUSH
13050: FOR_TO
13051: IFFALSE 13082
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
13053: LD_VAR 0 3
13057: PPUSH
13058: LD_VAR 0 2
13062: PPUSH
13063: LD_INT 1
13065: PPUSH
13066: LD_VAR 0 3
13070: PPUSH
13071: CALL_OW 565
13075: PPUSH
13076: CALL_OW 324
13080: GO 13050
13082: POP
13083: POP
// end ;
13084: GO 12964
13086: POP
13087: POP
// end ;
13088: LD_VAR 0 1
13092: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
13093: LD_INT 0
13095: PPUSH
13096: PPUSH
13097: PPUSH
// for side = 1 to 8 do
13098: LD_ADDR_VAR 0 3
13102: PUSH
13103: DOUBLE
13104: LD_INT 1
13106: DEC
13107: ST_TO_ADDR
13108: LD_INT 8
13110: PUSH
13111: FOR_TO
13112: IFFALSE 17108
// begin for i = 1 to 73 do
13114: LD_ADDR_VAR 0 4
13118: PUSH
13119: DOUBLE
13120: LD_INT 1
13122: DEC
13123: ST_TO_ADDR
13124: LD_INT 73
13126: PUSH
13127: FOR_TO
13128: IFFALSE 13149
// SetTech ( i , side , state_disabled ) ;
13130: LD_VAR 0 4
13134: PPUSH
13135: LD_VAR 0 3
13139: PPUSH
13140: LD_INT 0
13142: PPUSH
13143: CALL_OW 322
13147: GO 13127
13149: POP
13150: POP
// for i = 0 to 40 do
13151: LD_ADDR_VAR 0 4
13155: PUSH
13156: DOUBLE
13157: LD_INT 0
13159: DEC
13160: ST_TO_ADDR
13161: LD_INT 40
13163: PUSH
13164: FOR_TO
13165: IFFALSE 13186
// SetRestrict ( i , side , false ) ;
13167: LD_VAR 0 4
13171: PPUSH
13172: LD_VAR 0 3
13176: PPUSH
13177: LD_INT 0
13179: PPUSH
13180: CALL_OW 324
13184: GO 13164
13186: POP
13187: POP
// case level of 1 :
13188: LD_VAR 0 1
13192: PUSH
13193: LD_INT 1
13195: DOUBLE
13196: EQUAL
13197: IFTRUE 13201
13199: GO 13354
13201: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13202: LD_INT 35
13204: PPUSH
13205: LD_VAR 0 3
13209: PPUSH
13210: LD_INT 1
13212: PPUSH
13213: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13217: LD_INT 45
13219: PPUSH
13220: LD_VAR 0 3
13224: PPUSH
13225: LD_INT 1
13227: PPUSH
13228: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13232: LD_INT 46
13234: PPUSH
13235: LD_VAR 0 3
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13247: LD_INT 47
13249: PPUSH
13250: LD_VAR 0 3
13254: PPUSH
13255: LD_INT 1
13257: PPUSH
13258: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13262: LD_INT 0
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: LD_INT 1
13272: PPUSH
13273: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13277: LD_INT 2
13279: PPUSH
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13292: LD_INT 4
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: LD_INT 1
13302: PPUSH
13303: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13307: LD_INT 6
13309: PPUSH
13310: LD_VAR 0 3
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13322: LD_INT 29
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13337: LD_INT 31
13339: PPUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 324
// end ; 2 :
13352: GO 17106
13354: LD_INT 2
13356: DOUBLE
13357: EQUAL
13358: IFTRUE 13362
13360: GO 13560
13362: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13363: LD_INT 35
13365: PPUSH
13366: LD_VAR 0 3
13370: PPUSH
13371: LD_INT 1
13373: PPUSH
13374: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13378: LD_INT 45
13380: PPUSH
13381: LD_VAR 0 3
13385: PPUSH
13386: LD_INT 1
13388: PPUSH
13389: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13393: LD_INT 46
13395: PPUSH
13396: LD_VAR 0 3
13400: PPUSH
13401: LD_INT 1
13403: PPUSH
13404: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13408: LD_INT 47
13410: PPUSH
13411: LD_VAR 0 3
13415: PPUSH
13416: LD_INT 1
13418: PPUSH
13419: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13423: LD_INT 1
13425: PPUSH
13426: LD_VAR 0 3
13430: PPUSH
13431: LD_INT 1
13433: PPUSH
13434: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13438: LD_INT 2
13440: PPUSH
13441: LD_VAR 0 3
13445: PPUSH
13446: LD_INT 1
13448: PPUSH
13449: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13453: LD_INT 11
13455: PPUSH
13456: LD_VAR 0 3
13460: PPUSH
13461: LD_INT 1
13463: PPUSH
13464: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13468: LD_INT 0
13470: PPUSH
13471: LD_VAR 0 3
13475: PPUSH
13476: LD_INT 1
13478: PPUSH
13479: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13483: LD_INT 2
13485: PPUSH
13486: LD_VAR 0 3
13490: PPUSH
13491: LD_INT 1
13493: PPUSH
13494: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13498: LD_INT 4
13500: PPUSH
13501: LD_VAR 0 3
13505: PPUSH
13506: LD_INT 1
13508: PPUSH
13509: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13513: LD_INT 6
13515: PPUSH
13516: LD_VAR 0 3
13520: PPUSH
13521: LD_INT 1
13523: PPUSH
13524: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13528: LD_INT 29
13530: PPUSH
13531: LD_VAR 0 3
13535: PPUSH
13536: LD_INT 1
13538: PPUSH
13539: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13543: LD_INT 31
13545: PPUSH
13546: LD_VAR 0 3
13550: PPUSH
13551: LD_INT 1
13553: PPUSH
13554: CALL_OW 324
// end ; 3 :
13558: GO 17106
13560: LD_INT 3
13562: DOUBLE
13563: EQUAL
13564: IFTRUE 13568
13566: GO 14021
13568: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13569: LD_INT 35
13571: PPUSH
13572: LD_VAR 0 3
13576: PPUSH
13577: LD_INT 1
13579: PPUSH
13580: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13584: LD_INT 45
13586: PPUSH
13587: LD_VAR 0 3
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13599: LD_INT 46
13601: PPUSH
13602: LD_VAR 0 3
13606: PPUSH
13607: LD_INT 1
13609: PPUSH
13610: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13614: LD_INT 47
13616: PPUSH
13617: LD_VAR 0 3
13621: PPUSH
13622: LD_INT 1
13624: PPUSH
13625: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13629: LD_INT 1
13631: PPUSH
13632: LD_VAR 0 3
13636: PPUSH
13637: LD_INT 1
13639: PPUSH
13640: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13644: LD_INT 2
13646: PPUSH
13647: LD_VAR 0 3
13651: PPUSH
13652: LD_INT 1
13654: PPUSH
13655: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13659: LD_INT 11
13661: PPUSH
13662: LD_VAR 0 3
13666: PPUSH
13667: LD_INT 1
13669: PPUSH
13670: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13674: LD_INT 48
13676: PPUSH
13677: LD_VAR 0 3
13681: PPUSH
13682: LD_INT 1
13684: PPUSH
13685: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13689: LD_INT 69
13691: PPUSH
13692: LD_VAR 0 3
13696: PPUSH
13697: LD_INT 1
13699: PPUSH
13700: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13704: LD_INT 39
13706: PPUSH
13707: LD_VAR 0 3
13711: PPUSH
13712: LD_INT 1
13714: PPUSH
13715: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13719: LD_INT 43
13721: PPUSH
13722: LD_VAR 0 3
13726: PPUSH
13727: LD_INT 1
13729: PPUSH
13730: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13734: LD_INT 51
13736: PPUSH
13737: LD_VAR 0 3
13741: PPUSH
13742: LD_INT 1
13744: PPUSH
13745: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13749: LD_INT 6
13751: PPUSH
13752: LD_VAR 0 3
13756: PPUSH
13757: LD_INT 1
13759: PPUSH
13760: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13764: LD_INT 0
13766: PPUSH
13767: LD_VAR 0 3
13771: PPUSH
13772: LD_INT 1
13774: PPUSH
13775: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13779: LD_INT 2
13781: PPUSH
13782: LD_VAR 0 3
13786: PPUSH
13787: LD_INT 1
13789: PPUSH
13790: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13794: LD_INT 3
13796: PPUSH
13797: LD_VAR 0 3
13801: PPUSH
13802: LD_INT 1
13804: PPUSH
13805: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13809: LD_INT 4
13811: PPUSH
13812: LD_VAR 0 3
13816: PPUSH
13817: LD_INT 1
13819: PPUSH
13820: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13824: LD_INT 6
13826: PPUSH
13827: LD_VAR 0 3
13831: PPUSH
13832: LD_INT 1
13834: PPUSH
13835: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13839: LD_INT 7
13841: PPUSH
13842: LD_VAR 0 3
13846: PPUSH
13847: LD_INT 1
13849: PPUSH
13850: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13854: LD_INT 8
13856: PPUSH
13857: LD_VAR 0 3
13861: PPUSH
13862: LD_INT 1
13864: PPUSH
13865: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13869: LD_INT 10
13871: PPUSH
13872: LD_VAR 0 3
13876: PPUSH
13877: LD_INT 1
13879: PPUSH
13880: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13884: LD_INT 15
13886: PPUSH
13887: LD_VAR 0 3
13891: PPUSH
13892: LD_INT 1
13894: PPUSH
13895: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13899: LD_INT 16
13901: PPUSH
13902: LD_VAR 0 3
13906: PPUSH
13907: LD_INT 1
13909: PPUSH
13910: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13914: LD_INT 17
13916: PPUSH
13917: LD_VAR 0 3
13921: PPUSH
13922: LD_INT 1
13924: PPUSH
13925: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13929: LD_INT 20
13931: PPUSH
13932: LD_VAR 0 3
13936: PPUSH
13937: LD_INT 1
13939: PPUSH
13940: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13944: LD_INT 26
13946: PPUSH
13947: LD_VAR 0 3
13951: PPUSH
13952: LD_INT 1
13954: PPUSH
13955: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13959: LD_INT 27
13961: PPUSH
13962: LD_VAR 0 3
13966: PPUSH
13967: LD_INT 1
13969: PPUSH
13970: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13974: LD_INT 29
13976: PPUSH
13977: LD_VAR 0 3
13981: PPUSH
13982: LD_INT 1
13984: PPUSH
13985: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13989: LD_INT 31
13991: PPUSH
13992: LD_VAR 0 3
13996: PPUSH
13997: LD_INT 1
13999: PPUSH
14000: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14004: LD_INT 32
14006: PPUSH
14007: LD_VAR 0 3
14011: PPUSH
14012: LD_INT 1
14014: PPUSH
14015: CALL_OW 324
// end ; 4 :
14019: GO 17106
14021: LD_INT 4
14023: DOUBLE
14024: EQUAL
14025: IFTRUE 14029
14027: GO 14977
14029: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14030: LD_INT 35
14032: PPUSH
14033: LD_VAR 0 3
14037: PPUSH
14038: LD_INT 1
14040: PPUSH
14041: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14045: LD_INT 45
14047: PPUSH
14048: LD_VAR 0 3
14052: PPUSH
14053: LD_INT 1
14055: PPUSH
14056: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14060: LD_INT 46
14062: PPUSH
14063: LD_VAR 0 3
14067: PPUSH
14068: LD_INT 1
14070: PPUSH
14071: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14075: LD_INT 47
14077: PPUSH
14078: LD_VAR 0 3
14082: PPUSH
14083: LD_INT 1
14085: PPUSH
14086: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14090: LD_INT 1
14092: PPUSH
14093: LD_VAR 0 3
14097: PPUSH
14098: LD_INT 1
14100: PPUSH
14101: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14105: LD_INT 2
14107: PPUSH
14108: LD_VAR 0 3
14112: PPUSH
14113: LD_INT 1
14115: PPUSH
14116: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14120: LD_INT 11
14122: PPUSH
14123: LD_VAR 0 3
14127: PPUSH
14128: LD_INT 1
14130: PPUSH
14131: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14135: LD_INT 20
14137: PPUSH
14138: LD_VAR 0 3
14142: PPUSH
14143: LD_INT 1
14145: PPUSH
14146: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14150: LD_INT 48
14152: PPUSH
14153: LD_VAR 0 3
14157: PPUSH
14158: LD_INT 1
14160: PPUSH
14161: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14165: LD_INT 49
14167: PPUSH
14168: LD_VAR 0 3
14172: PPUSH
14173: LD_INT 1
14175: PPUSH
14176: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14180: LD_INT 69
14182: PPUSH
14183: LD_VAR 0 3
14187: PPUSH
14188: LD_INT 1
14190: PPUSH
14191: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14195: LD_INT 39
14197: PPUSH
14198: LD_VAR 0 3
14202: PPUSH
14203: LD_INT 1
14205: PPUSH
14206: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14210: LD_INT 34
14212: PPUSH
14213: LD_VAR 0 3
14217: PPUSH
14218: LD_INT 1
14220: PPUSH
14221: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14225: LD_INT 42
14227: PPUSH
14228: LD_VAR 0 3
14232: PPUSH
14233: LD_INT 1
14235: PPUSH
14236: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14240: LD_INT 44
14242: PPUSH
14243: LD_VAR 0 3
14247: PPUSH
14248: LD_INT 1
14250: PPUSH
14251: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14255: LD_INT 41
14257: PPUSH
14258: LD_VAR 0 3
14262: PPUSH
14263: LD_INT 1
14265: PPUSH
14266: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14270: LD_INT 43
14272: PPUSH
14273: LD_VAR 0 3
14277: PPUSH
14278: LD_INT 1
14280: PPUSH
14281: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14285: LD_INT 70
14287: PPUSH
14288: LD_VAR 0 3
14292: PPUSH
14293: LD_INT 1
14295: PPUSH
14296: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14300: LD_INT 51
14302: PPUSH
14303: LD_VAR 0 3
14307: PPUSH
14308: LD_INT 1
14310: PPUSH
14311: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14315: LD_INT 52
14317: PPUSH
14318: LD_VAR 0 3
14322: PPUSH
14323: LD_INT 1
14325: PPUSH
14326: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14330: LD_INT 6
14332: PPUSH
14333: LD_VAR 0 3
14337: PPUSH
14338: LD_INT 1
14340: PPUSH
14341: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14345: LD_INT 15
14347: PPUSH
14348: LD_VAR 0 3
14352: PPUSH
14353: LD_INT 1
14355: PPUSH
14356: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14360: LD_INT 7
14362: PPUSH
14363: LD_VAR 0 3
14367: PPUSH
14368: LD_INT 1
14370: PPUSH
14371: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14375: LD_INT 12
14377: PPUSH
14378: LD_VAR 0 3
14382: PPUSH
14383: LD_INT 1
14385: PPUSH
14386: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14390: LD_INT 18
14392: PPUSH
14393: LD_VAR 0 3
14397: PPUSH
14398: LD_INT 1
14400: PPUSH
14401: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14405: LD_INT 60
14407: PPUSH
14408: LD_VAR 0 3
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14420: LD_INT 9
14422: PPUSH
14423: LD_VAR 0 3
14427: PPUSH
14428: LD_INT 1
14430: PPUSH
14431: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14435: LD_INT 30
14437: PPUSH
14438: LD_VAR 0 3
14442: PPUSH
14443: LD_INT 1
14445: PPUSH
14446: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14450: LD_INT 37
14452: PPUSH
14453: LD_VAR 0 3
14457: PPUSH
14458: LD_INT 1
14460: PPUSH
14461: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14465: LD_INT 5
14467: PPUSH
14468: LD_VAR 0 3
14472: PPUSH
14473: LD_INT 1
14475: PPUSH
14476: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14480: LD_INT 66
14482: PPUSH
14483: LD_VAR 0 3
14487: PPUSH
14488: LD_INT 1
14490: PPUSH
14491: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14495: LD_INT 21
14497: PPUSH
14498: LD_VAR 0 3
14502: PPUSH
14503: LD_INT 1
14505: PPUSH
14506: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14510: LD_INT 22
14512: PPUSH
14513: LD_VAR 0 3
14517: PPUSH
14518: LD_INT 1
14520: PPUSH
14521: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14525: LD_INT 54
14527: PPUSH
14528: LD_VAR 0 3
14532: PPUSH
14533: LD_INT 1
14535: PPUSH
14536: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14540: LD_INT 0
14542: PPUSH
14543: LD_VAR 0 3
14547: PPUSH
14548: LD_INT 1
14550: PPUSH
14551: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
14555: LD_INT 1
14557: PPUSH
14558: LD_VAR 0 3
14562: PPUSH
14563: LD_INT 1
14565: PPUSH
14566: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14570: LD_INT 2
14572: PPUSH
14573: LD_VAR 0 3
14577: PPUSH
14578: LD_INT 1
14580: PPUSH
14581: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14585: LD_INT 3
14587: PPUSH
14588: LD_VAR 0 3
14592: PPUSH
14593: LD_INT 1
14595: PPUSH
14596: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14600: LD_INT 4
14602: PPUSH
14603: LD_VAR 0 3
14607: PPUSH
14608: LD_INT 1
14610: PPUSH
14611: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14615: LD_INT 5
14617: PPUSH
14618: LD_VAR 0 3
14622: PPUSH
14623: LD_INT 1
14625: PPUSH
14626: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14630: LD_INT 6
14632: PPUSH
14633: LD_VAR 0 3
14637: PPUSH
14638: LD_INT 1
14640: PPUSH
14641: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14645: LD_INT 7
14647: PPUSH
14648: LD_VAR 0 3
14652: PPUSH
14653: LD_INT 1
14655: PPUSH
14656: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14660: LD_INT 8
14662: PPUSH
14663: LD_VAR 0 3
14667: PPUSH
14668: LD_INT 1
14670: PPUSH
14671: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14675: LD_INT 10
14677: PPUSH
14678: LD_VAR 0 3
14682: PPUSH
14683: LD_INT 1
14685: PPUSH
14686: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14690: LD_INT 11
14692: PPUSH
14693: LD_VAR 0 3
14697: PPUSH
14698: LD_INT 1
14700: PPUSH
14701: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14705: LD_INT 12
14707: PPUSH
14708: LD_VAR 0 3
14712: PPUSH
14713: LD_INT 1
14715: PPUSH
14716: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14720: LD_INT 13
14722: PPUSH
14723: LD_VAR 0 3
14727: PPUSH
14728: LD_INT 1
14730: PPUSH
14731: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14735: LD_INT 14
14737: PPUSH
14738: LD_VAR 0 3
14742: PPUSH
14743: LD_INT 1
14745: PPUSH
14746: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14750: LD_INT 15
14752: PPUSH
14753: LD_VAR 0 3
14757: PPUSH
14758: LD_INT 1
14760: PPUSH
14761: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14765: LD_INT 16
14767: PPUSH
14768: LD_VAR 0 3
14772: PPUSH
14773: LD_INT 1
14775: PPUSH
14776: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14780: LD_INT 17
14782: PPUSH
14783: LD_VAR 0 3
14787: PPUSH
14788: LD_INT 1
14790: PPUSH
14791: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14795: LD_INT 19
14797: PPUSH
14798: LD_VAR 0 3
14802: PPUSH
14803: LD_INT 1
14805: PPUSH
14806: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14810: LD_INT 20
14812: PPUSH
14813: LD_VAR 0 3
14817: PPUSH
14818: LD_INT 1
14820: PPUSH
14821: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14825: LD_INT 21
14827: PPUSH
14828: LD_VAR 0 3
14832: PPUSH
14833: LD_INT 1
14835: PPUSH
14836: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14840: LD_INT 23
14842: PPUSH
14843: LD_VAR 0 3
14847: PPUSH
14848: LD_INT 1
14850: PPUSH
14851: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14855: LD_INT 26
14857: PPUSH
14858: LD_VAR 0 3
14862: PPUSH
14863: LD_INT 1
14865: PPUSH
14866: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14870: LD_INT 27
14872: PPUSH
14873: LD_VAR 0 3
14877: PPUSH
14878: LD_INT 1
14880: PPUSH
14881: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14885: LD_INT 28
14887: PPUSH
14888: LD_VAR 0 3
14892: PPUSH
14893: LD_INT 1
14895: PPUSH
14896: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14900: LD_INT 29
14902: PPUSH
14903: LD_VAR 0 3
14907: PPUSH
14908: LD_INT 1
14910: PPUSH
14911: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14915: LD_INT 30
14917: PPUSH
14918: LD_VAR 0 3
14922: PPUSH
14923: LD_INT 1
14925: PPUSH
14926: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14930: LD_INT 31
14932: PPUSH
14933: LD_VAR 0 3
14937: PPUSH
14938: LD_INT 1
14940: PPUSH
14941: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14945: LD_INT 32
14947: PPUSH
14948: LD_VAR 0 3
14952: PPUSH
14953: LD_INT 1
14955: PPUSH
14956: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14960: LD_INT 36
14962: PPUSH
14963: LD_VAR 0 3
14967: PPUSH
14968: LD_INT 1
14970: PPUSH
14971: CALL_OW 324
// end ; 5 :
14975: GO 17106
14977: LD_INT 5
14979: DOUBLE
14980: EQUAL
14981: IFTRUE 14985
14983: GO 16098
14985: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14986: LD_INT 35
14988: PPUSH
14989: LD_VAR 0 3
14993: PPUSH
14994: LD_INT 1
14996: PPUSH
14997: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15001: LD_INT 45
15003: PPUSH
15004: LD_VAR 0 3
15008: PPUSH
15009: LD_INT 1
15011: PPUSH
15012: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15016: LD_INT 46
15018: PPUSH
15019: LD_VAR 0 3
15023: PPUSH
15024: LD_INT 1
15026: PPUSH
15027: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15031: LD_INT 47
15033: PPUSH
15034: LD_VAR 0 3
15038: PPUSH
15039: LD_INT 1
15041: PPUSH
15042: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15046: LD_INT 1
15048: PPUSH
15049: LD_VAR 0 3
15053: PPUSH
15054: LD_INT 1
15056: PPUSH
15057: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15061: LD_INT 2
15063: PPUSH
15064: LD_VAR 0 3
15068: PPUSH
15069: LD_INT 1
15071: PPUSH
15072: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15076: LD_INT 11
15078: PPUSH
15079: LD_VAR 0 3
15083: PPUSH
15084: LD_INT 1
15086: PPUSH
15087: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15091: LD_INT 20
15093: PPUSH
15094: LD_VAR 0 3
15098: PPUSH
15099: LD_INT 1
15101: PPUSH
15102: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15106: LD_INT 48
15108: PPUSH
15109: LD_VAR 0 3
15113: PPUSH
15114: LD_INT 1
15116: PPUSH
15117: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15121: LD_INT 49
15123: PPUSH
15124: LD_VAR 0 3
15128: PPUSH
15129: LD_INT 1
15131: PPUSH
15132: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15136: LD_INT 69
15138: PPUSH
15139: LD_VAR 0 3
15143: PPUSH
15144: LD_INT 1
15146: PPUSH
15147: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15151: LD_INT 39
15153: PPUSH
15154: LD_VAR 0 3
15158: PPUSH
15159: LD_INT 1
15161: PPUSH
15162: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15166: LD_INT 34
15168: PPUSH
15169: LD_VAR 0 3
15173: PPUSH
15174: LD_INT 1
15176: PPUSH
15177: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15181: LD_INT 42
15183: PPUSH
15184: LD_VAR 0 3
15188: PPUSH
15189: LD_INT 1
15191: PPUSH
15192: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15196: LD_INT 44
15198: PPUSH
15199: LD_VAR 0 3
15203: PPUSH
15204: LD_INT 1
15206: PPUSH
15207: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15211: LD_INT 41
15213: PPUSH
15214: LD_VAR 0 3
15218: PPUSH
15219: LD_INT 1
15221: PPUSH
15222: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15226: LD_INT 40
15228: PPUSH
15229: LD_VAR 0 3
15233: PPUSH
15234: LD_INT 1
15236: PPUSH
15237: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15241: LD_INT 43
15243: PPUSH
15244: LD_VAR 0 3
15248: PPUSH
15249: LD_INT 1
15251: PPUSH
15252: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15256: LD_INT 70
15258: PPUSH
15259: LD_VAR 0 3
15263: PPUSH
15264: LD_INT 1
15266: PPUSH
15267: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15271: LD_INT 51
15273: PPUSH
15274: LD_VAR 0 3
15278: PPUSH
15279: LD_INT 1
15281: PPUSH
15282: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15286: LD_INT 52
15288: PPUSH
15289: LD_VAR 0 3
15293: PPUSH
15294: LD_INT 1
15296: PPUSH
15297: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15301: LD_INT 6
15303: PPUSH
15304: LD_VAR 0 3
15308: PPUSH
15309: LD_INT 1
15311: PPUSH
15312: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15316: LD_INT 15
15318: PPUSH
15319: LD_VAR 0 3
15323: PPUSH
15324: LD_INT 1
15326: PPUSH
15327: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15331: LD_INT 7
15333: PPUSH
15334: LD_VAR 0 3
15338: PPUSH
15339: LD_INT 1
15341: PPUSH
15342: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15346: LD_INT 12
15348: PPUSH
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_INT 1
15356: PPUSH
15357: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15361: LD_INT 17
15363: PPUSH
15364: LD_VAR 0 3
15368: PPUSH
15369: LD_INT 1
15371: PPUSH
15372: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15376: LD_INT 18
15378: PPUSH
15379: LD_VAR 0 3
15383: PPUSH
15384: LD_INT 1
15386: PPUSH
15387: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15391: LD_INT 60
15393: PPUSH
15394: LD_VAR 0 3
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
15406: LD_INT 32
15408: PPUSH
15409: LD_VAR 0 3
15413: PPUSH
15414: LD_INT 1
15416: PPUSH
15417: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15421: LD_INT 9
15423: PPUSH
15424: LD_VAR 0 3
15428: PPUSH
15429: LD_INT 1
15431: PPUSH
15432: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
15436: LD_INT 57
15438: PPUSH
15439: LD_VAR 0 3
15443: PPUSH
15444: LD_INT 1
15446: PPUSH
15447: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15451: LD_INT 30
15453: PPUSH
15454: LD_VAR 0 3
15458: PPUSH
15459: LD_INT 1
15461: PPUSH
15462: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15466: LD_INT 37
15468: PPUSH
15469: LD_VAR 0 3
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
15481: LD_INT 63
15483: PPUSH
15484: LD_VAR 0 3
15488: PPUSH
15489: LD_INT 1
15491: PPUSH
15492: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
15496: LD_INT 3
15498: PPUSH
15499: LD_VAR 0 3
15503: PPUSH
15504: LD_INT 1
15506: PPUSH
15507: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
15511: LD_INT 4
15513: PPUSH
15514: LD_VAR 0 3
15518: PPUSH
15519: LD_INT 1
15521: PPUSH
15522: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15526: LD_INT 5
15528: PPUSH
15529: LD_VAR 0 3
15533: PPUSH
15534: LD_INT 1
15536: PPUSH
15537: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15541: LD_INT 66
15543: PPUSH
15544: LD_VAR 0 3
15548: PPUSH
15549: LD_INT 1
15551: PPUSH
15552: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15556: LD_INT 21
15558: PPUSH
15559: LD_VAR 0 3
15563: PPUSH
15564: LD_INT 1
15566: PPUSH
15567: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15571: LD_INT 22
15573: PPUSH
15574: LD_VAR 0 3
15578: PPUSH
15579: LD_INT 1
15581: PPUSH
15582: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15586: LD_INT 19
15588: PPUSH
15589: LD_VAR 0 3
15593: PPUSH
15594: LD_INT 1
15596: PPUSH
15597: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15601: LD_INT 54
15603: PPUSH
15604: LD_VAR 0 3
15608: PPUSH
15609: LD_INT 1
15611: PPUSH
15612: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15616: LD_INT 55
15618: PPUSH
15619: LD_VAR 0 3
15623: PPUSH
15624: LD_INT 1
15626: PPUSH
15627: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15631: LD_INT 0
15633: PPUSH
15634: LD_VAR 0 3
15638: PPUSH
15639: LD_INT 1
15641: PPUSH
15642: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15646: LD_INT 1
15648: PPUSH
15649: LD_VAR 0 3
15653: PPUSH
15654: LD_INT 1
15656: PPUSH
15657: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15661: LD_INT 2
15663: PPUSH
15664: LD_VAR 0 3
15668: PPUSH
15669: LD_INT 1
15671: PPUSH
15672: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15676: LD_INT 3
15678: PPUSH
15679: LD_VAR 0 3
15683: PPUSH
15684: LD_INT 1
15686: PPUSH
15687: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15691: LD_INT 4
15693: PPUSH
15694: LD_VAR 0 3
15698: PPUSH
15699: LD_INT 1
15701: PPUSH
15702: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15706: LD_INT 5
15708: PPUSH
15709: LD_VAR 0 3
15713: PPUSH
15714: LD_INT 1
15716: PPUSH
15717: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15721: LD_INT 6
15723: PPUSH
15724: LD_VAR 0 3
15728: PPUSH
15729: LD_INT 1
15731: PPUSH
15732: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15736: LD_INT 7
15738: PPUSH
15739: LD_VAR 0 3
15743: PPUSH
15744: LD_INT 1
15746: PPUSH
15747: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15751: LD_INT 8
15753: PPUSH
15754: LD_VAR 0 3
15758: PPUSH
15759: LD_INT 1
15761: PPUSH
15762: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15766: LD_INT 10
15768: PPUSH
15769: LD_VAR 0 3
15773: PPUSH
15774: LD_INT 1
15776: PPUSH
15777: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15781: LD_INT 11
15783: PPUSH
15784: LD_VAR 0 3
15788: PPUSH
15789: LD_INT 1
15791: PPUSH
15792: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15796: LD_INT 12
15798: PPUSH
15799: LD_VAR 0 3
15803: PPUSH
15804: LD_INT 1
15806: PPUSH
15807: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15811: LD_INT 13
15813: PPUSH
15814: LD_VAR 0 3
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15826: LD_INT 14
15828: PPUSH
15829: LD_VAR 0 3
15833: PPUSH
15834: LD_INT 1
15836: PPUSH
15837: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15841: LD_INT 15
15843: PPUSH
15844: LD_VAR 0 3
15848: PPUSH
15849: LD_INT 1
15851: PPUSH
15852: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15856: LD_INT 16
15858: PPUSH
15859: LD_VAR 0 3
15863: PPUSH
15864: LD_INT 1
15866: PPUSH
15867: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15871: LD_INT 17
15873: PPUSH
15874: LD_VAR 0 3
15878: PPUSH
15879: LD_INT 1
15881: PPUSH
15882: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15886: LD_INT 18
15888: PPUSH
15889: LD_VAR 0 3
15893: PPUSH
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15901: LD_INT 19
15903: PPUSH
15904: LD_VAR 0 3
15908: PPUSH
15909: LD_INT 1
15911: PPUSH
15912: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15916: LD_INT 20
15918: PPUSH
15919: LD_VAR 0 3
15923: PPUSH
15924: LD_INT 1
15926: PPUSH
15927: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15931: LD_INT 21
15933: PPUSH
15934: LD_VAR 0 3
15938: PPUSH
15939: LD_INT 1
15941: PPUSH
15942: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15946: LD_INT 23
15948: PPUSH
15949: LD_VAR 0 3
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15961: LD_INT 26
15963: PPUSH
15964: LD_VAR 0 3
15968: PPUSH
15969: LD_INT 1
15971: PPUSH
15972: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15976: LD_INT 27
15978: PPUSH
15979: LD_VAR 0 3
15983: PPUSH
15984: LD_INT 1
15986: PPUSH
15987: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15991: LD_INT 28
15993: PPUSH
15994: LD_VAR 0 3
15998: PPUSH
15999: LD_INT 1
16001: PPUSH
16002: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16006: LD_INT 29
16008: PPUSH
16009: LD_VAR 0 3
16013: PPUSH
16014: LD_INT 1
16016: PPUSH
16017: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16021: LD_INT 30
16023: PPUSH
16024: LD_VAR 0 3
16028: PPUSH
16029: LD_INT 1
16031: PPUSH
16032: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16036: LD_INT 31
16038: PPUSH
16039: LD_VAR 0 3
16043: PPUSH
16044: LD_INT 1
16046: PPUSH
16047: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16051: LD_INT 32
16053: PPUSH
16054: LD_VAR 0 3
16058: PPUSH
16059: LD_INT 1
16061: PPUSH
16062: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
16066: LD_INT 33
16068: PPUSH
16069: LD_VAR 0 3
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16081: LD_INT 36
16083: PPUSH
16084: LD_VAR 0 3
16088: PPUSH
16089: LD_INT 1
16091: PPUSH
16092: CALL_OW 324
// end ; 6 :
16096: GO 17106
16098: LD_INT 6
16100: DOUBLE
16101: EQUAL
16102: IFTRUE 16106
16104: GO 17031
16106: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16107: LD_INT 35
16109: PPUSH
16110: LD_VAR 0 3
16114: PPUSH
16115: LD_INT 1
16117: PPUSH
16118: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16122: LD_INT 45
16124: PPUSH
16125: LD_VAR 0 3
16129: PPUSH
16130: LD_INT 1
16132: PPUSH
16133: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
16137: LD_INT 46
16139: PPUSH
16140: LD_VAR 0 3
16144: PPUSH
16145: LD_INT 1
16147: PPUSH
16148: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
16152: LD_INT 47
16154: PPUSH
16155: LD_VAR 0 3
16159: PPUSH
16160: LD_INT 1
16162: PPUSH
16163: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
16167: LD_INT 1
16169: PPUSH
16170: LD_VAR 0 3
16174: PPUSH
16175: LD_INT 1
16177: PPUSH
16178: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
16182: LD_INT 2
16184: PPUSH
16185: LD_VAR 0 3
16189: PPUSH
16190: LD_INT 1
16192: PPUSH
16193: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16197: LD_INT 11
16199: PPUSH
16200: LD_VAR 0 3
16204: PPUSH
16205: LD_INT 1
16207: PPUSH
16208: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16212: LD_INT 20
16214: PPUSH
16215: LD_VAR 0 3
16219: PPUSH
16220: LD_INT 1
16222: PPUSH
16223: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16227: LD_INT 48
16229: PPUSH
16230: LD_VAR 0 3
16234: PPUSH
16235: LD_INT 1
16237: PPUSH
16238: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16242: LD_INT 49
16244: PPUSH
16245: LD_VAR 0 3
16249: PPUSH
16250: LD_INT 1
16252: PPUSH
16253: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
16257: LD_INT 50
16259: PPUSH
16260: LD_VAR 0 3
16264: PPUSH
16265: LD_INT 1
16267: PPUSH
16268: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16272: LD_INT 69
16274: PPUSH
16275: LD_VAR 0 3
16279: PPUSH
16280: LD_INT 1
16282: PPUSH
16283: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16287: LD_INT 39
16289: PPUSH
16290: LD_VAR 0 3
16294: PPUSH
16295: LD_INT 1
16297: PPUSH
16298: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16302: LD_INT 34
16304: PPUSH
16305: LD_VAR 0 3
16309: PPUSH
16310: LD_INT 1
16312: PPUSH
16313: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16317: LD_INT 42
16319: PPUSH
16320: LD_VAR 0 3
16324: PPUSH
16325: LD_INT 1
16327: PPUSH
16328: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16332: LD_INT 44
16334: PPUSH
16335: LD_VAR 0 3
16339: PPUSH
16340: LD_INT 1
16342: PPUSH
16343: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16347: LD_INT 41
16349: PPUSH
16350: LD_VAR 0 3
16354: PPUSH
16355: LD_INT 1
16357: PPUSH
16358: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
16362: LD_INT 13
16364: PPUSH
16365: LD_VAR 0 3
16369: PPUSH
16370: LD_INT 1
16372: PPUSH
16373: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16377: LD_INT 40
16379: PPUSH
16380: LD_VAR 0 3
16384: PPUSH
16385: LD_INT 1
16387: PPUSH
16388: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16392: LD_INT 43
16394: PPUSH
16395: LD_VAR 0 3
16399: PPUSH
16400: LD_INT 1
16402: PPUSH
16403: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16407: LD_INT 70
16409: PPUSH
16410: LD_VAR 0 3
16414: PPUSH
16415: LD_INT 1
16417: PPUSH
16418: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
16422: LD_INT 23
16424: PPUSH
16425: LD_VAR 0 3
16429: PPUSH
16430: LD_INT 1
16432: PPUSH
16433: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16437: LD_INT 51
16439: PPUSH
16440: LD_VAR 0 3
16444: PPUSH
16445: LD_INT 1
16447: PPUSH
16448: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16452: LD_INT 52
16454: PPUSH
16455: LD_VAR 0 3
16459: PPUSH
16460: LD_INT 1
16462: PPUSH
16463: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16467: LD_INT 6
16469: PPUSH
16470: LD_VAR 0 3
16474: PPUSH
16475: LD_INT 1
16477: PPUSH
16478: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16482: LD_INT 15
16484: PPUSH
16485: LD_VAR 0 3
16489: PPUSH
16490: LD_INT 1
16492: PPUSH
16493: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16497: LD_INT 7
16499: PPUSH
16500: LD_VAR 0 3
16504: PPUSH
16505: LD_INT 1
16507: PPUSH
16508: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16512: LD_INT 12
16514: PPUSH
16515: LD_VAR 0 3
16519: PPUSH
16520: LD_INT 1
16522: PPUSH
16523: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
16527: LD_INT 10
16529: PPUSH
16530: LD_VAR 0 3
16534: PPUSH
16535: LD_INT 1
16537: PPUSH
16538: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16542: LD_INT 17
16544: PPUSH
16545: LD_VAR 0 3
16549: PPUSH
16550: LD_INT 1
16552: PPUSH
16553: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16557: LD_INT 18
16559: PPUSH
16560: LD_VAR 0 3
16564: PPUSH
16565: LD_INT 1
16567: PPUSH
16568: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16572: LD_INT 60
16574: PPUSH
16575: LD_VAR 0 3
16579: PPUSH
16580: LD_INT 1
16582: PPUSH
16583: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
16587: LD_INT 61
16589: PPUSH
16590: LD_VAR 0 3
16594: PPUSH
16595: LD_INT 1
16597: PPUSH
16598: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16602: LD_INT 32
16604: PPUSH
16605: LD_VAR 0 3
16609: PPUSH
16610: LD_INT 1
16612: PPUSH
16613: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
16617: LD_INT 27
16619: PPUSH
16620: LD_VAR 0 3
16624: PPUSH
16625: LD_INT 1
16627: PPUSH
16628: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
16632: LD_INT 36
16634: PPUSH
16635: LD_VAR 0 3
16639: PPUSH
16640: LD_INT 1
16642: PPUSH
16643: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
16647: LD_INT 33
16649: PPUSH
16650: LD_VAR 0 3
16654: PPUSH
16655: LD_INT 1
16657: PPUSH
16658: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16662: LD_INT 9
16664: PPUSH
16665: LD_VAR 0 3
16669: PPUSH
16670: LD_INT 1
16672: PPUSH
16673: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
16677: LD_INT 38
16679: PPUSH
16680: LD_VAR 0 3
16684: PPUSH
16685: LD_INT 1
16687: PPUSH
16688: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16692: LD_INT 57
16694: PPUSH
16695: LD_VAR 0 3
16699: PPUSH
16700: LD_INT 1
16702: PPUSH
16703: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
16707: LD_INT 58
16709: PPUSH
16710: LD_VAR 0 3
16714: PPUSH
16715: LD_INT 1
16717: PPUSH
16718: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
16722: LD_INT 28
16724: PPUSH
16725: LD_VAR 0 3
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
16737: LD_INT 29
16739: PPUSH
16740: LD_VAR 0 3
16744: PPUSH
16745: LD_INT 1
16747: PPUSH
16748: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16752: LD_INT 30
16754: PPUSH
16755: LD_VAR 0 3
16759: PPUSH
16760: LD_INT 1
16762: PPUSH
16763: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16767: LD_INT 37
16769: PPUSH
16770: LD_VAR 0 3
16774: PPUSH
16775: LD_INT 1
16777: PPUSH
16778: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16782: LD_INT 63
16784: PPUSH
16785: LD_VAR 0 3
16789: PPUSH
16790: LD_INT 1
16792: PPUSH
16793: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
16797: LD_INT 64
16799: PPUSH
16800: LD_VAR 0 3
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16812: LD_INT 3
16814: PPUSH
16815: LD_VAR 0 3
16819: PPUSH
16820: LD_INT 1
16822: PPUSH
16823: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16827: LD_INT 4
16829: PPUSH
16830: LD_VAR 0 3
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16842: LD_INT 5
16844: PPUSH
16845: LD_VAR 0 3
16849: PPUSH
16850: LD_INT 1
16852: PPUSH
16853: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16857: LD_INT 8
16859: PPUSH
16860: LD_VAR 0 3
16864: PPUSH
16865: LD_INT 1
16867: PPUSH
16868: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16872: LD_INT 66
16874: PPUSH
16875: LD_VAR 0 3
16879: PPUSH
16880: LD_INT 1
16882: PPUSH
16883: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16887: LD_INT 67
16889: PPUSH
16890: LD_VAR 0 3
16894: PPUSH
16895: LD_INT 1
16897: PPUSH
16898: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16902: LD_INT 21
16904: PPUSH
16905: LD_VAR 0 3
16909: PPUSH
16910: LD_INT 1
16912: PPUSH
16913: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16917: LD_INT 22
16919: PPUSH
16920: LD_VAR 0 3
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16932: LD_INT 19
16934: PPUSH
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 1
16942: PPUSH
16943: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16947: LD_INT 26
16949: PPUSH
16950: LD_VAR 0 3
16954: PPUSH
16955: LD_INT 1
16957: PPUSH
16958: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16962: LD_INT 54
16964: PPUSH
16965: LD_VAR 0 3
16969: PPUSH
16970: LD_INT 1
16972: PPUSH
16973: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16977: LD_INT 55
16979: PPUSH
16980: LD_VAR 0 3
16984: PPUSH
16985: LD_INT 1
16987: PPUSH
16988: CALL_OW 322
// for i = 0 to 39 do
16992: LD_ADDR_VAR 0 4
16996: PUSH
16997: DOUBLE
16998: LD_INT 0
17000: DEC
17001: ST_TO_ADDR
17002: LD_INT 39
17004: PUSH
17005: FOR_TO
17006: IFFALSE 17027
// SetRestrict ( i , side , true ) ;
17008: LD_VAR 0 4
17012: PPUSH
17013: LD_VAR 0 3
17017: PPUSH
17018: LD_INT 1
17020: PPUSH
17021: CALL_OW 324
17025: GO 17005
17027: POP
17028: POP
// end ; else
17029: GO 17106
17031: POP
// begin for i = 1 to 73 do
17032: LD_ADDR_VAR 0 4
17036: PUSH
17037: DOUBLE
17038: LD_INT 1
17040: DEC
17041: ST_TO_ADDR
17042: LD_INT 73
17044: PUSH
17045: FOR_TO
17046: IFFALSE 17067
// SetTech ( i , side , state_enabled ) ;
17048: LD_VAR 0 4
17052: PPUSH
17053: LD_VAR 0 3
17057: PPUSH
17058: LD_INT 1
17060: PPUSH
17061: CALL_OW 322
17065: GO 17045
17067: POP
17068: POP
// for i = 0 to 39 do
17069: LD_ADDR_VAR 0 4
17073: PUSH
17074: DOUBLE
17075: LD_INT 0
17077: DEC
17078: ST_TO_ADDR
17079: LD_INT 39
17081: PUSH
17082: FOR_TO
17083: IFFALSE 17104
// SetRestrict ( i , side , true ) ;
17085: LD_VAR 0 4
17089: PPUSH
17090: LD_VAR 0 3
17094: PPUSH
17095: LD_INT 1
17097: PPUSH
17098: CALL_OW 324
17102: GO 17082
17104: POP
17105: POP
// end ; end ; end ;
17106: GO 13111
17108: POP
17109: POP
// end ;
17110: LD_VAR 0 2
17114: RET
