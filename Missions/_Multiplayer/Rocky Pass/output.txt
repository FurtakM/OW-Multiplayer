// export def_amount_of_siberit , def_public_score ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , tech_level ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 34
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 21
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 19
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 22
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 34
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 21
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 19
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 22
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 20
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; for i := 1 to 8 do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_INT 8
 266: PUSH
 267: FOR_TO
 268: IFFALSE 355
// if Multiplayer_GetPlayerIsSpec ( i ) then
 270: LD_VAR 0 2
 274: PPUSH
 275: CALL_OW 530
 279: IFFALSE 353
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 281: LD_ADDR_EXP 21
 285: PUSH
 286: LD_EXP 21
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 1
 303: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 304: LD_ADDR_EXP 20
 308: PUSH
 309: LD_EXP 20
 313: PPUSH
 314: LD_EXP 19
 318: PUSH
 319: LD_VAR 0 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 20
 329: PUSH
 330: LD_EXP 19
 334: PUSH
 335: LD_VAR 0 2
 339: ARRAY
 340: ARRAY
 341: PUSH
 342: LD_VAR 0 2
 346: DIFF
 347: PPUSH
 348: CALL_OW 1
 352: ST_TO_ADDR
// end ;
 353: GO 267
 355: POP
 356: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 357: LD_ADDR_EXP 24
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 0
 370: PUSH
 371: LD_INT 0
 373: PUSH
 374: LD_INT 0
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: LIST
 386: LIST
 387: ST_TO_ADDR
// for i := 1 to 8 do
 388: LD_ADDR_VAR 0 2
 392: PUSH
 393: DOUBLE
 394: LD_INT 1
 396: DEC
 397: ST_TO_ADDR
 398: LD_INT 8
 400: PUSH
 401: FOR_TO
 402: IFFALSE 449
// if Side_Positions [ i ] then
 404: LD_EXP 21
 408: PUSH
 409: LD_VAR 0 2
 413: ARRAY
 414: IFFALSE 447
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 416: LD_ADDR_EXP 24
 420: PUSH
 421: LD_EXP 24
 425: PPUSH
 426: LD_EXP 21
 430: PUSH
 431: LD_VAR 0 2
 435: ARRAY
 436: PPUSH
 437: LD_VAR 0 2
 441: PPUSH
 442: CALL_OW 1
 446: ST_TO_ADDR
 447: GO 401
 449: POP
 450: POP
// Team_Game := Side_Teams [ your_side ] ;
 451: LD_ADDR_EXP 23
 455: PUSH
 456: LD_EXP 19
 460: PUSH
 461: LD_OWVAR 2
 465: ARRAY
 466: ST_TO_ADDR
// if Multiplayer then
 467: LD_OWVAR 4
 471: IFFALSE 722
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 473: LD_ADDR_EXP 36
 477: PUSH
 478: LD_INT 0
 480: PPUSH
 481: CALL_OW 426
 485: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 486: LD_ADDR_EXP 37
 490: PUSH
 491: LD_INT 1
 493: PPUSH
 494: CALL_OW 426
 498: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 499: LD_ADDR_EXP 38
 503: PUSH
 504: LD_INT 2
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 512: LD_ADDR_EXP 39
 516: PUSH
 517: LD_INT 3
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 525: LD_ADDR_EXP 40
 529: PUSH
 530: LD_INT 4
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 538: LD_ADDR_EXP 41
 542: PUSH
 543: LD_INT 5
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 551: LD_ADDR_EXP 42
 555: PUSH
 556: LD_INT 6
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 564: LD_ADDR_EXP 43
 568: PUSH
 569: LD_INT 10
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 577: LD_ADDR_EXP 44
 581: PUSH
 582: LD_INT 11
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 590: LD_ADDR_EXP 45
 594: PUSH
 595: LD_INT 12
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 603: LD_ADDR_EXP 46
 607: PUSH
 608: LD_INT 13
 610: PPUSH
 611: CALL_OW 426
 615: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 616: LD_ADDR_EXP 47
 620: PUSH
 621: LD_INT 14
 623: PPUSH
 624: CALL_OW 426
 628: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 629: LD_ADDR_EXP 1
 633: PUSH
 634: LD_INT 15
 636: PPUSH
 637: CALL_OW 426
 641: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 642: LD_ADDR_EXP 2
 646: PUSH
 647: LD_INT 16
 649: PPUSH
 650: CALL_OW 426
 654: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 655: LD_ADDR_EXP 48
 659: PUSH
 660: LD_INT 17
 662: PPUSH
 663: CALL_OW 426
 667: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 668: LD_ADDR_EXP 49
 672: PUSH
 673: LD_INT 20
 675: PPUSH
 676: CALL_OW 426
 680: ST_TO_ADDR
// def_game_rules := GetMultiplayerSetting ( 21 ) ;
 681: LD_ADDR_EXP 35
 685: PUSH
 686: LD_INT 21
 688: PPUSH
 689: CALL_OW 426
 693: ST_TO_ADDR
// def_spect := GetMultiplayerSetting ( 22 ) ;
 694: LD_ADDR_EXP 16
 698: PUSH
 699: LD_INT 22
 701: PPUSH
 702: CALL_OW 426
 706: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 707: LD_ADDR_EXP 18
 711: PUSH
 712: LD_INT 23
 714: PPUSH
 715: CALL_OW 426
 719: ST_TO_ADDR
// end else
 720: GO 878
// begin Randomize ;
 722: CALL_OW 10
// def_base_level := 2 ;
 726: LD_ADDR_EXP 36
 730: PUSH
 731: LD_INT 2
 733: ST_TO_ADDR
// def_amount_of_people := 0 ;
 734: LD_ADDR_EXP 37
 738: PUSH
 739: LD_INT 0
 741: ST_TO_ADDR
// def_skill_level := 1 ;
 742: LD_ADDR_EXP 38
 746: PUSH
 747: LD_INT 1
 749: ST_TO_ADDR
// def_starting_resources := 2 ;
 750: LD_ADDR_EXP 39
 754: PUSH
 755: LD_INT 2
 757: ST_TO_ADDR
// def_shipments_density := 1 ;
 758: LD_ADDR_EXP 40
 762: PUSH
 763: LD_INT 1
 765: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 766: LD_ADDR_EXP 41
 770: PUSH
 771: LD_INT 0
 773: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 774: LD_ADDR_EXP 42
 778: PUSH
 779: LD_INT 1
 781: ST_TO_ADDR
// def_shared_vision := 1 ;
 782: LD_ADDR_EXP 43
 786: PUSH
 787: LD_INT 1
 789: ST_TO_ADDR
// def_morale_flags := 1 ;
 790: LD_ADDR_EXP 44
 794: PUSH
 795: LD_INT 1
 797: ST_TO_ADDR
// def_siberite_detection := 1 ;
 798: LD_ADDR_EXP 45
 802: PUSH
 803: LD_INT 1
 805: ST_TO_ADDR
// def_people_respawning := 2 ;
 806: LD_ADDR_EXP 46
 810: PUSH
 811: LD_INT 2
 813: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 814: LD_ADDR_EXP 47
 818: PUSH
 819: LD_INT 3
 821: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 822: LD_ADDR_EXP 1
 826: PUSH
 827: LD_INT 0
 829: ST_TO_ADDR
// def_public_score := 0 ;
 830: LD_ADDR_EXP 2
 834: PUSH
 835: LD_INT 0
 837: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 838: LD_ADDR_EXP 48
 842: PUSH
 843: LD_INT 0
 845: ST_TO_ADDR
// def_builduptime := 0 ;
 846: LD_ADDR_EXP 49
 850: PUSH
 851: LD_INT 0
 853: ST_TO_ADDR
// def_game_rules := 1 ;
 854: LD_ADDR_EXP 35
 858: PUSH
 859: LD_INT 1
 861: ST_TO_ADDR
// def_spect := 1 ;
 862: LD_ADDR_EXP 16
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// tech_level = 0 ;
 870: LD_ADDR_EXP 18
 874: PUSH
 875: LD_INT 0
 877: ST_TO_ADDR
// end ; InitGameRules ;
 878: CALL 8914 0 0
// if def_game_rules = 0 then
 882: LD_EXP 35
 886: PUSH
 887: LD_INT 0
 889: EQUAL
 890: IFFALSE 917
// begin if isSGUI then
 892: LD_OWVAR 83
 896: IFFALSE 904
// setMpTechs ( ) else
 898: CALL 12364 0 0
 902: GO 917
// begin SetMpTechLevel ( tech_level + 1 ) ;
 904: LD_EXP 18
 908: PUSH
 909: LD_INT 1
 911: PLUS
 912: PPUSH
 913: CALL 12511 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 917: LD_ADDR_EXP 3
 921: PUSH
 922: LD_INT 0
 924: PUSH
 925: LD_INT 1
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: LIST
 935: PUSH
 936: LD_EXP 36
 940: PUSH
 941: LD_INT 1
 943: PLUS
 944: ARRAY
 945: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 946: LD_ADDR_EXP 4
 950: PUSH
 951: LD_INT 0
 953: PUSH
 954: LD_INT 0
 956: PUSH
 957: LD_INT 3
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: LIST
 964: PUSH
 965: LD_EXP 36
 969: PUSH
 970: LD_INT 1
 972: PLUS
 973: ARRAY
 974: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 975: LD_ADDR_EXP 5
 979: PUSH
 980: LD_INT 9
 982: PUSH
 983: LD_INT 12
 985: PUSH
 986: LD_INT 15
 988: PUSH
 989: LD_INT 24
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: PUSH
 998: LD_EXP 37
1002: PUSH
1003: LD_INT 1
1005: PLUS
1006: ARRAY
1007: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
1008: LD_ADDR_EXP 6
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: LD_INT 3
1018: PUSH
1019: LD_INT 5
1021: PUSH
1022: LD_INT 6
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: PUSH
1031: LD_EXP 38
1035: PUSH
1036: LD_INT 1
1038: PLUS
1039: ARRAY
1040: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1041: LD_ADDR_EXP 8
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: LD_INT 0
1051: PUSH
1052: LD_INT 0
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: LD_INT 30
1062: PUSH
1063: LD_INT 0
1065: PUSH
1066: LD_INT 0
1068: PUSH
1069: EMPTY
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_INT 50
1076: PUSH
1077: LD_INT 20
1079: PUSH
1080: LD_INT 0
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_INT 80
1090: PUSH
1091: LD_INT 40
1093: PUSH
1094: LD_INT 20
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: LIST
1107: PUSH
1108: LD_EXP 39
1112: PUSH
1113: LD_INT 1
1115: PLUS
1116: ARRAY
1117: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1118: LD_ADDR_EXP 7
1122: PUSH
1123: LD_INT 10
1125: PUSH
1126: EMPTY
1127: LIST
1128: PUSH
1129: LD_INT 7
1131: PUSH
1132: LD_INT 14
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: LD_INT 6
1141: PUSH
1142: LD_INT 12
1144: PUSH
1145: LD_INT 18
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 5
1155: PUSH
1156: LD_INT 10
1158: PUSH
1159: LD_INT 15
1161: PUSH
1162: LD_INT 20
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: LD_EXP 39
1181: PUSH
1182: LD_INT 1
1184: PLUS
1185: ARRAY
1186: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1187: LD_ADDR_EXP 9
1191: PUSH
1192: LD_INT 150
1194: PUSH
1195: LD_INT 125
1197: PUSH
1198: LD_INT 100
1200: PUSH
1201: LD_INT 50
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: LIST
1208: LIST
1209: PUSH
1210: LD_EXP 40
1214: PUSH
1215: LD_INT 1
1217: PLUS
1218: ARRAY
1219: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1220: LD_ADDR_EXP 13
1224: PUSH
1225: LD_INT 0
1227: PUSH
1228: LD_INT 10500
1230: PUSH
1231: LD_INT 6300
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: PUSH
1239: LD_EXP 46
1243: PUSH
1244: LD_INT 1
1246: PLUS
1247: ARRAY
1248: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1249: LD_ADDR_EXP 14
1253: PUSH
1254: LD_INT 0
1256: PUSH
1257: LD_INT 31500
1259: PUSH
1260: LD_INT 10500
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_EXP 46
1272: PUSH
1273: LD_INT 1
1275: PLUS
1276: ARRAY
1277: ST_TO_ADDR
// amount_of_apemen := [ 0 , 3 , 6 , 9 ] [ def_amount_of_apemen + 1 ] ;
1278: LD_ADDR_EXP 11
1282: PUSH
1283: LD_INT 0
1285: PUSH
1286: LD_INT 3
1288: PUSH
1289: LD_INT 6
1291: PUSH
1292: LD_INT 9
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 47
1305: PUSH
1306: LD_INT 1
1308: PLUS
1309: ARRAY
1310: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1311: LD_ADDR_EXP 12
1315: PUSH
1316: LD_INT 30
1318: PUSH
1319: LD_INT 50
1321: PUSH
1322: LD_INT 80
1324: PUSH
1325: LD_INT 100
1327: PUSH
1328: LD_INT 130
1330: PUSH
1331: LD_INT 150
1333: PUSH
1334: LD_INT 200
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: PUSH
1346: LD_EXP 1
1350: PUSH
1351: LD_INT 1
1353: PLUS
1354: ARRAY
1355: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1356: LD_ADDR_EXP 10
1360: PUSH
1361: LD_INT 1
1363: NEG
1364: PUSH
1365: LD_INT 350
1367: PUSH
1368: LD_INT 700
1370: PUSH
1371: LD_INT 1400
1373: PUSH
1374: LD_INT 0
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: PUSH
1384: LD_EXP 44
1388: PUSH
1389: LD_INT 1
1391: PLUS
1392: ARRAY
1393: ST_TO_ADDR
// battle_flags_id := [ ] ;
1394: LD_ADDR_EXP 32
1398: PUSH
1399: EMPTY
1400: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1401: LD_ADDR_EXP 15
1405: PUSH
1406: LD_INT 0
1408: PUSH
1409: LD_INT 1
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PUSH
1416: LD_EXP 16
1420: PUSH
1421: LD_INT 1
1423: PLUS
1424: ARRAY
1425: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1426: LD_ADDR_EXP 17
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 63000
1439: PUSH
1440: LD_INT 126000
1442: PUSH
1443: LD_INT 189000
1445: PUSH
1446: LD_INT 252000
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: LIST
1455: LIST
1456: PUSH
1457: LD_EXP 48
1461: PUSH
1462: LD_INT 1
1464: PLUS
1465: ARRAY
1466: ST_TO_ADDR
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
1467: LD_ADDR_EXP 33
1471: PUSH
1472: LD_INT 7
1474: PUSH
1475: LD_INT 8
1477: PUSH
1478: LD_INT 9
1480: PUSH
1481: LD_INT 10
1483: PUSH
1484: LD_INT 11
1486: PUSH
1487: LD_INT 12
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: ST_TO_ADDR
// end ;
1498: LD_VAR 0 1
1502: RET
// function init_map ; var i , j ; begin
1503: LD_INT 0
1505: PPUSH
1506: PPUSH
1507: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1508: LD_ADDR_EXP 28
1512: PUSH
1513: LD_INT 12
1515: PUSH
1516: LD_INT 4
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 45
1525: PUSH
1526: LD_INT 81
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 116
1535: PUSH
1536: LD_INT 195
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: PUSH
1543: LD_INT 142
1545: PUSH
1546: LD_INT 4
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: PUSH
1553: LD_INT 201
1555: PUSH
1556: LD_INT 102
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 234
1565: PUSH
1566: LD_INT 194
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1581: LD_ADDR_EXP 29
1585: PUSH
1586: LD_INT 12
1588: PUSH
1589: LD_INT 4
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: PUSH
1596: LD_INT 16
1598: PUSH
1599: LD_INT 25
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PUSH
1610: LD_INT 45
1612: PUSH
1613: LD_INT 81
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 60
1622: PUSH
1623: LD_INT 102
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: LD_INT 116
1636: PUSH
1637: LD_INT 195
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: PUSH
1644: LD_INT 92
1646: PUSH
1647: LD_INT 167
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: PUSH
1658: LD_INT 142
1660: PUSH
1661: LD_INT 4
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_INT 167
1670: PUSH
1671: LD_INT 24
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: LD_INT 201
1684: PUSH
1685: LD_INT 102
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PUSH
1692: LD_INT 190
1694: PUSH
1695: LD_INT 77
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: LD_INT 234
1708: PUSH
1709: LD_INT 194
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 237
1718: PUSH
1719: LD_INT 171
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: LIST
1735: LIST
1736: LIST
1737: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1738: LD_ADDR_EXP 30
1742: PUSH
1743: LD_INT 10
1745: PUSH
1746: LD_INT 10
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: PUSH
1753: LD_INT 51
1755: PUSH
1756: LD_INT 93
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 102
1765: PUSH
1766: LD_INT 187
1768: PUSH
1769: EMPTY
1770: LIST
1771: LIST
1772: PUSH
1773: LD_INT 158
1775: PUSH
1776: LD_INT 6
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PUSH
1783: LD_INT 203
1785: PUSH
1786: LD_INT 93
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PUSH
1793: LD_INT 252
1795: PUSH
1796: LD_INT 194
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1811: LD_ADDR_EXP 31
1815: PUSH
1816: LD_INT 10
1818: PUSH
1819: LD_INT 10
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PUSH
1826: LD_INT 36
1828: PUSH
1829: LD_INT 10
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 51
1842: PUSH
1843: LD_INT 93
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: LD_INT 47
1852: PUSH
1853: LD_INT 72
1855: PUSH
1856: EMPTY
1857: LIST
1858: LIST
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: LD_INT 102
1866: PUSH
1867: LD_INT 187
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 93
1876: PUSH
1877: LD_INT 175
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: LD_INT 158
1890: PUSH
1891: LD_INT 6
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: PUSH
1898: LD_INT 147
1900: PUSH
1901: LD_INT 5
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: LD_INT 203
1914: PUSH
1915: LD_INT 93
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: PUSH
1922: LD_INT 173
1924: PUSH
1925: LD_INT 71
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 252
1938: PUSH
1939: LD_INT 194
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 243
1948: PUSH
1949: LD_INT 177
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1968: LD_ADDR_EXP 25
1972: PUSH
1973: LD_INT 23
1975: PUSH
1976: LD_INT 15
1978: PUSH
1979: LD_INT 2
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: LIST
1986: PUSH
1987: LD_INT 56
1989: PUSH
1990: LD_INT 85
1992: PUSH
1993: LD_INT 1
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: PUSH
2001: LD_INT 110
2003: PUSH
2004: LD_INT 177
2006: PUSH
2007: LD_INT 3
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 157
2017: PUSH
2018: LD_INT 13
2020: PUSH
2021: LD_INT 3
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: PUSH
2029: LD_INT 187
2031: PUSH
2032: LD_INT 87
2034: PUSH
2035: LD_INT 5
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 231
2045: PUSH
2046: LD_INT 181
2048: PUSH
2049: LD_INT 5
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: PUSH
2057: EMPTY
2058: LIST
2059: LIST
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
2065: LD_ADDR_EXP 27
2069: PUSH
2070: LD_INT 30
2072: PUSH
2073: LD_INT 22
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 58
2082: PUSH
2083: LD_INT 82
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: LD_INT 113
2092: PUSH
2093: LD_INT 180
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 151
2102: PUSH
2103: LD_INT 24
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 183
2112: PUSH
2113: LD_INT 90
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: PUSH
2120: LD_INT 223
2122: PUSH
2123: LD_INT 180
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
2138: LD_ADDR_EXP 26
2142: PUSH
2143: LD_INT 33
2145: PUSH
2146: LD_INT 12
2148: PUSH
2149: LD_INT 5
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: LIST
2156: PUSH
2157: LD_INT 42
2159: PUSH
2160: LD_INT 29
2162: PUSH
2163: LD_INT 4
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: PUSH
2171: LD_INT 36
2173: PUSH
2174: LD_INT 20
2176: PUSH
2177: LD_INT 4
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: PUSH
2190: LD_INT 72
2192: PUSH
2193: LD_INT 91
2195: PUSH
2196: LD_INT 4
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 65
2206: PUSH
2207: LD_INT 78
2209: PUSH
2210: LD_INT 4
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: PUSH
2218: LD_INT 75
2220: PUSH
2221: LD_INT 100
2223: PUSH
2224: LD_INT 3
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: LIST
2236: PUSH
2237: LD_INT 102
2239: PUSH
2240: LD_INT 165
2242: PUSH
2243: LD_INT 3
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: PUSH
2251: LD_INT 122
2253: PUSH
2254: LD_INT 176
2256: PUSH
2257: LD_INT 4
2259: PUSH
2260: EMPTY
2261: LIST
2262: LIST
2263: LIST
2264: PUSH
2265: LD_INT 120
2267: PUSH
2268: LD_INT 184
2270: PUSH
2271: LD_INT 4
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: PUSH
2284: LD_INT 134
2286: PUSH
2287: LD_INT 16
2289: PUSH
2290: LD_INT 1
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 132
2300: PUSH
2301: LD_INT 5
2303: PUSH
2304: LD_INT 1
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 157
2314: PUSH
2315: LD_INT 27
2317: PUSH
2318: LD_INT 5
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: LIST
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: PUSH
2331: LD_INT 172
2333: PUSH
2334: LD_INT 77
2336: PUSH
2337: LD_INT 1
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 175
2347: PUSH
2348: LD_INT 96
2350: PUSH
2351: LD_INT 1
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 192
2361: PUSH
2362: LD_INT 104
2364: PUSH
2365: LD_INT 1
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: PUSH
2378: LD_INT 216
2380: PUSH
2381: LD_INT 179
2383: PUSH
2384: LD_INT 1
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: PUSH
2392: LD_INT 208
2394: PUSH
2395: LD_INT 160
2397: PUSH
2398: LD_INT 2
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: LIST
2405: PUSH
2406: LD_INT 208
2408: PUSH
2409: LD_INT 171
2411: PUSH
2412: LD_INT 2
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: LIST
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: LIST
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: ST_TO_ADDR
// for i = 1 to 6 do
2433: LD_ADDR_VAR 0 2
2437: PUSH
2438: DOUBLE
2439: LD_INT 1
2441: DEC
2442: ST_TO_ADDR
2443: LD_INT 6
2445: PUSH
2446: FOR_TO
2447: IFFALSE 2544
// if def_extra_oil_deposits then
2449: LD_EXP 41
2453: IFFALSE 2505
// for j in extra_oil_deposits_locations [ i ] do
2455: LD_ADDR_VAR 0 3
2459: PUSH
2460: LD_EXP 29
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: PUSH
2471: FOR_IN
2472: IFFALSE 2501
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2474: LD_VAR 0 3
2478: PUSH
2479: LD_INT 1
2481: ARRAY
2482: PPUSH
2483: LD_VAR 0 3
2487: PUSH
2488: LD_INT 2
2490: ARRAY
2491: PPUSH
2492: LD_INT 2
2494: PPUSH
2495: CALL_OW 62
2499: GO 2471
2501: POP
2502: POP
2503: GO 2542
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2505: LD_EXP 28
2509: PUSH
2510: LD_VAR 0 2
2514: ARRAY
2515: PUSH
2516: LD_INT 1
2518: ARRAY
2519: PPUSH
2520: LD_EXP 28
2524: PUSH
2525: LD_VAR 0 2
2529: ARRAY
2530: PUSH
2531: LD_INT 2
2533: ARRAY
2534: PPUSH
2535: LD_INT 2
2537: PPUSH
2538: CALL_OW 62
2542: GO 2446
2544: POP
2545: POP
// if def_extra_sib_deposits then
2546: LD_EXP 42
2550: IFFALSE 2669
// for i = 1 to 6 do
2552: LD_ADDR_VAR 0 2
2556: PUSH
2557: DOUBLE
2558: LD_INT 1
2560: DEC
2561: ST_TO_ADDR
2562: LD_INT 6
2564: PUSH
2565: FOR_TO
2566: IFFALSE 2667
// if def_extra_sib_deposits = 2 then
2568: LD_EXP 42
2572: PUSH
2573: LD_INT 2
2575: EQUAL
2576: IFFALSE 2628
// for j in extra_sib_deposits_locations [ i ] do
2578: LD_ADDR_VAR 0 3
2582: PUSH
2583: LD_EXP 31
2587: PUSH
2588: LD_VAR 0 2
2592: ARRAY
2593: PUSH
2594: FOR_IN
2595: IFFALSE 2624
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2597: LD_VAR 0 3
2601: PUSH
2602: LD_INT 1
2604: ARRAY
2605: PPUSH
2606: LD_VAR 0 3
2610: PUSH
2611: LD_INT 2
2613: ARRAY
2614: PPUSH
2615: LD_INT 3
2617: PPUSH
2618: CALL_OW 62
2622: GO 2594
2624: POP
2625: POP
2626: GO 2665
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2628: LD_EXP 30
2632: PUSH
2633: LD_VAR 0 2
2637: ARRAY
2638: PUSH
2639: LD_INT 1
2641: ARRAY
2642: PPUSH
2643: LD_EXP 30
2647: PUSH
2648: LD_VAR 0 2
2652: ARRAY
2653: PUSH
2654: LD_INT 2
2656: ARRAY
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: CALL_OW 62
2665: GO 2565
2667: POP
2668: POP
// end ;
2669: LD_VAR 0 1
2673: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
// if not Team_Game then
2679: LD_EXP 23
2683: NOT
2684: IFFALSE 2782
// begin for i = 1 to 8 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 8
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2778
// for j = 1 to 8 do
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: DOUBLE
2708: LD_INT 1
2710: DEC
2711: ST_TO_ADDR
2712: LD_INT 8
2714: PUSH
2715: FOR_TO
2716: IFFALSE 2774
// if i <> j then
2718: LD_VAR 0 2
2722: PUSH
2723: LD_VAR 0 3
2727: NONEQUAL
2728: IFFALSE 2752
// SetAttitude ( i , j , att_neutral , true ) else
2730: LD_VAR 0 2
2734: PPUSH
2735: LD_VAR 0 3
2739: PPUSH
2740: LD_INT 0
2742: PPUSH
2743: LD_INT 1
2745: PPUSH
2746: CALL_OW 80
2750: GO 2772
// SetAttitude ( i , j , att_friend , true ) ;
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_VAR 0 3
2761: PPUSH
2762: LD_INT 1
2764: PPUSH
2765: LD_INT 1
2767: PPUSH
2768: CALL_OW 80
2772: GO 2715
2774: POP
2775: POP
2776: GO 2699
2778: POP
2779: POP
// end else
2780: GO 2957
// begin if def_shared_vision then
2782: LD_EXP 43
2786: IFFALSE 2851
// begin for i in Teams do
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: LD_EXP 20
2797: PUSH
2798: FOR_IN
2799: IFFALSE 2849
// for j = 2 to i do
2801: LD_ADDR_VAR 0 3
2805: PUSH
2806: DOUBLE
2807: LD_INT 2
2809: DEC
2810: ST_TO_ADDR
2811: LD_VAR 0 2
2815: PUSH
2816: FOR_TO
2817: IFFALSE 2845
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2819: LD_VAR 0 2
2823: PUSH
2824: LD_VAR 0 3
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 2
2834: PUSH
2835: LD_INT 1
2837: ARRAY
2838: PPUSH
2839: CALL_OW 343
2843: GO 2816
2845: POP
2846: POP
2847: GO 2798
2849: POP
2850: POP
// end ; for i = 1 to 8 do
2851: LD_ADDR_VAR 0 2
2855: PUSH
2856: DOUBLE
2857: LD_INT 1
2859: DEC
2860: ST_TO_ADDR
2861: LD_INT 8
2863: PUSH
2864: FOR_TO
2865: IFFALSE 2955
// for j = 1 to 8 do
2867: LD_ADDR_VAR 0 3
2871: PUSH
2872: DOUBLE
2873: LD_INT 1
2875: DEC
2876: ST_TO_ADDR
2877: LD_INT 8
2879: PUSH
2880: FOR_TO
2881: IFFALSE 2951
// if Side_Teams [ i ] = Side_Teams [ j ] then
2883: LD_EXP 19
2887: PUSH
2888: LD_VAR 0 2
2892: ARRAY
2893: PUSH
2894: LD_EXP 19
2898: PUSH
2899: LD_VAR 0 3
2903: ARRAY
2904: EQUAL
2905: IFFALSE 2929
// SetAttitude ( i , j , att_friend , true ) else
2907: LD_VAR 0 2
2911: PPUSH
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 1
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: CALL_OW 80
2927: GO 2949
// SetAttitude ( i , j , att_enemy , true ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_VAR 0 3
2938: PPUSH
2939: LD_INT 2
2941: PPUSH
2942: LD_INT 1
2944: PPUSH
2945: CALL_OW 80
2949: GO 2880
2951: POP
2952: POP
2953: GO 2864
2955: POP
2956: POP
// end ; end ;
2957: LD_VAR 0 1
2961: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2962: LD_INT 0
2964: PPUSH
2965: PPUSH
2966: PPUSH
2967: PPUSH
// result := [ ] ;
2968: LD_ADDR_VAR 0 7
2972: PUSH
2973: EMPTY
2974: ST_TO_ADDR
// for i := 1 to count do
2975: LD_ADDR_VAR 0 8
2979: PUSH
2980: DOUBLE
2981: LD_INT 1
2983: DEC
2984: ST_TO_ADDR
2985: LD_VAR 0 1
2989: PUSH
2990: FOR_TO
2991: IFFALSE 3409
// begin uc_direction := Rand ( 0 , 5 ) ;
2993: LD_ADDR_OWVAR 24
2997: PUSH
2998: LD_INT 0
3000: PPUSH
3001: LD_INT 5
3003: PPUSH
3004: CALL_OW 12
3008: ST_TO_ADDR
// if commander then
3009: LD_LOC 1
3013: IFFALSE 3122
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3015: LD_ADDR_OWVAR 26
3019: PUSH
3020: LD_OWVAR 19
3024: PUSH
3025: LD_OWVAR 20
3029: ARRAY
3030: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3031: LD_INT 1
3033: PPUSH
3034: LD_INT 2
3036: PPUSH
3037: CALL_OW 12
3041: PPUSH
3042: LD_VAR 0 2
3046: PPUSH
3047: LD_EXP 6
3051: PUSH
3052: LD_INT 2
3054: PLUS
3055: PPUSH
3056: CALL_OW 380
// hc_importance := 105 ;
3060: LD_ADDR_OWVAR 32
3064: PUSH
3065: LD_INT 105
3067: ST_TO_ADDR
// commander := false ;
3068: LD_ADDR_LOC 1
3072: PUSH
3073: LD_INT 0
3075: ST_TO_ADDR
// if Multiplayer then
3076: LD_OWVAR 4
3080: IFFALSE 3120
// begin hc_gallery := MULTIAVATARS ;
3082: LD_ADDR_OWVAR 33
3086: PUSH
3087: LD_STRING MULTIAVATARS
3089: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3090: LD_ADDR_OWVAR 34
3094: PUSH
3095: LD_OWVAR 20
3099: PPUSH
3100: CALL_OW 525
3104: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3105: LD_ADDR_OWVAR 27
3109: PUSH
3110: LD_OWVAR 20
3114: PPUSH
3115: CALL_OW 526
3119: ST_TO_ADDR
// end ; end else
3120: GO 3185
// begin hc_name :=  ;
3122: LD_ADDR_OWVAR 26
3126: PUSH
3127: LD_STRING 
3129: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3130: LD_INT 1
3132: PPUSH
3133: LD_INT 2
3135: PPUSH
3136: CALL_OW 12
3140: PPUSH
3141: LD_VAR 0 2
3145: PPUSH
3146: LD_EXP 6
3150: PPUSH
3151: CALL_OW 380
// hc_importance := 0 ;
3155: LD_ADDR_OWVAR 32
3159: PUSH
3160: LD_INT 0
3162: ST_TO_ADDR
// if Multiplayer then
3163: LD_OWVAR 4
3167: IFFALSE 3185
// begin hc_gallery :=  ;
3169: LD_ADDR_OWVAR 33
3173: PUSH
3174: LD_STRING 
3176: ST_TO_ADDR
// hc_face_number := 0 ;
3177: LD_ADDR_OWVAR 34
3181: PUSH
3182: LD_INT 0
3184: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3185: LD_ADDR_VAR 0 10
3189: PUSH
3190: CALL_OW 44
3194: ST_TO_ADDR
// if global_defined then
3195: LD_LOC 3
3199: IFFALSE 3339
// begin if ( cl = class_soldier ) then
3201: LD_VAR 0 2
3205: PUSH
3206: LD_INT 1
3208: EQUAL
3209: IFFALSE 3229
// j := i + soldiers_created else
3211: LD_ADDR_VAR 0 9
3215: PUSH
3216: LD_VAR 0 8
3220: PUSH
3221: LD_LOC 4
3225: PLUS
3226: ST_TO_ADDR
3227: GO 3239
// j := i ;
3229: LD_ADDR_VAR 0 9
3233: PUSH
3234: LD_VAR 0 8
3238: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3239: LD_LOC 2
3243: PUSH
3244: LD_VAR 0 2
3248: ARRAY
3249: PUSH
3250: LD_VAR 0 9
3254: ARRAY
3255: PPUSH
3256: LD_VAR 0 10
3260: PPUSH
3261: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3265: LD_VAR 0 10
3269: PPUSH
3270: LD_INT 2
3272: PPUSH
3273: LD_LOC 2
3277: PUSH
3278: LD_VAR 0 2
3282: ARRAY
3283: PUSH
3284: LD_VAR 0 9
3288: ARRAY
3289: PPUSH
3290: LD_INT 2
3292: PPUSH
3293: CALL_OW 260
3297: PPUSH
3298: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3302: LD_VAR 0 10
3306: PPUSH
3307: LD_INT 1
3309: PPUSH
3310: LD_LOC 2
3314: PUSH
3315: LD_VAR 0 2
3319: ARRAY
3320: PUSH
3321: LD_VAR 0 9
3325: ARRAY
3326: PPUSH
3327: LD_INT 1
3329: PPUSH
3330: CALL_OW 260
3334: PPUSH
3335: CALL_OW 239
// end ; if building then
3339: LD_VAR 0 6
3343: IFFALSE 3361
// PlaceHumanInUnit ( un , building ) else
3345: LD_VAR 0 10
3349: PPUSH
3350: LD_VAR 0 6
3354: PPUSH
3355: CALL_OW 52
3359: GO 3388
// PlaceUnitXYR ( un , x , y , r , false ) ;
3361: LD_VAR 0 10
3365: PPUSH
3366: LD_VAR 0 3
3370: PPUSH
3371: LD_VAR 0 4
3375: PPUSH
3376: LD_VAR 0 5
3380: PPUSH
3381: LD_INT 0
3383: PPUSH
3384: CALL_OW 50
// result := result ^ [ un ] ;
3388: LD_ADDR_VAR 0 7
3392: PUSH
3393: LD_VAR 0 7
3397: PUSH
3398: LD_VAR 0 10
3402: PUSH
3403: EMPTY
3404: LIST
3405: ADD
3406: ST_TO_ADDR
// end ;
3407: GO 2990
3409: POP
3410: POP
// if not global_defined then
3411: LD_LOC 3
3415: NOT
3416: IFFALSE 3494
// if ( global_units >= cl ) then
3418: LD_LOC 2
3422: PUSH
3423: LD_VAR 0 2
3427: GREATEREQUAL
3428: IFFALSE 3469
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3430: LD_ADDR_LOC 2
3434: PUSH
3435: LD_LOC 2
3439: PPUSH
3440: LD_VAR 0 2
3444: PPUSH
3445: LD_LOC 2
3449: PUSH
3450: LD_VAR 0 2
3454: ARRAY
3455: PUSH
3456: LD_VAR 0 7
3460: ADD
3461: PPUSH
3462: CALL_OW 1
3466: ST_TO_ADDR
3467: GO 3494
// global_units := Replace ( global_units , cl , result ) ;
3469: LD_ADDR_LOC 2
3473: PUSH
3474: LD_LOC 2
3478: PPUSH
3479: LD_VAR 0 2
3483: PPUSH
3484: LD_VAR 0 7
3488: PPUSH
3489: CALL_OW 1
3493: ST_TO_ADDR
// end ;
3494: LD_VAR 0 7
3498: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3499: LD_INT 0
3501: PPUSH
3502: PPUSH
3503: PPUSH
3504: PPUSH
3505: PPUSH
3506: PPUSH
3507: PPUSH
3508: PPUSH
3509: PPUSH
// pos := Side_Positions [ side ] ;
3510: LD_ADDR_VAR 0 3
3514: PUSH
3515: LD_EXP 21
3519: PUSH
3520: LD_VAR 0 1
3524: ARRAY
3525: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3526: LD_ADDR_OWVAR 21
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: LD_VAR 0 1
3540: ARRAY
3541: ST_TO_ADDR
// uc_side := side ;
3542: LD_ADDR_OWVAR 20
3546: PUSH
3547: LD_VAR 0 1
3551: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3552: LD_ADDR_VAR 0 4
3556: PUSH
3557: LD_EXP 25
3561: PUSH
3562: LD_VAR 0 3
3566: ARRAY
3567: PUSH
3568: LD_INT 1
3570: ARRAY
3571: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3572: LD_ADDR_VAR 0 5
3576: PUSH
3577: LD_EXP 25
3581: PUSH
3582: LD_VAR 0 3
3586: ARRAY
3587: PUSH
3588: LD_INT 2
3590: ARRAY
3591: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3592: LD_ADDR_VAR 0 6
3596: PUSH
3597: LD_EXP 25
3601: PUSH
3602: LD_VAR 0 3
3606: ARRAY
3607: PUSH
3608: LD_INT 3
3610: ARRAY
3611: ST_TO_ADDR
// if is_depot then
3612: LD_EXP 3
3616: IFFALSE 3749
// begin bc_type = b_depot ;
3618: LD_ADDR_OWVAR 42
3622: PUSH
3623: LD_INT 0
3625: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3626: LD_ADDR_VAR 0 10
3630: PUSH
3631: LD_VAR 0 4
3635: PPUSH
3636: LD_VAR 0 5
3640: PPUSH
3641: LD_VAR 0 6
3645: PPUSH
3646: CALL_OW 47
3650: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3651: LD_VAR 0 10
3655: PPUSH
3656: LD_STRING @
3658: PUSH
3659: LD_VAR 0 1
3663: STR
3664: PPUSH
3665: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3669: LD_VAR 0 10
3673: PPUSH
3674: CALL_OW 274
3678: PPUSH
3679: LD_INT 1
3681: PPUSH
3682: LD_EXP 8
3686: PUSH
3687: LD_INT 1
3689: ARRAY
3690: PPUSH
3691: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3695: LD_VAR 0 10
3699: PPUSH
3700: CALL_OW 274
3704: PPUSH
3705: LD_INT 2
3707: PPUSH
3708: LD_EXP 8
3712: PUSH
3713: LD_INT 2
3715: ARRAY
3716: PPUSH
3717: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3721: LD_VAR 0 10
3725: PPUSH
3726: CALL_OW 274
3730: PPUSH
3731: LD_INT 3
3733: PPUSH
3734: LD_EXP 8
3738: PUSH
3739: LD_INT 3
3741: ARRAY
3742: PPUSH
3743: CALL_OW 277
// end else
3747: GO 3893
// begin for i := 1 to 3 do
3749: LD_ADDR_VAR 0 7
3753: PUSH
3754: DOUBLE
3755: LD_INT 1
3757: DEC
3758: ST_TO_ADDR
3759: LD_INT 3
3761: PUSH
3762: FOR_TO
3763: IFFALSE 3891
// begin r := starting_resources [ i ] ;
3765: LD_ADDR_VAR 0 8
3769: PUSH
3770: LD_EXP 8
3774: PUSH
3775: LD_VAR 0 7
3779: ARRAY
3780: ST_TO_ADDR
// while r >= 10 do
3781: LD_VAR 0 8
3785: PUSH
3786: LD_INT 10
3788: GREATEREQUAL
3789: IFFALSE 3889
// if r > 50 then
3791: LD_VAR 0 8
3795: PUSH
3796: LD_INT 50
3798: GREATER
3799: IFFALSE 3845
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3801: LD_VAR 0 7
3805: PPUSH
3806: LD_INT 5
3808: PPUSH
3809: LD_VAR 0 4
3813: PPUSH
3814: LD_VAR 0 5
3818: PPUSH
3819: LD_INT 4
3821: PPUSH
3822: LD_INT 0
3824: PPUSH
3825: CALL_OW 60
// r := r - 50 ;
3829: LD_ADDR_VAR 0 8
3833: PUSH
3834: LD_VAR 0 8
3838: PUSH
3839: LD_INT 50
3841: MINUS
3842: ST_TO_ADDR
// end else
3843: GO 3887
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3845: LD_VAR 0 7
3849: PPUSH
3850: LD_VAR 0 8
3854: PUSH
3855: LD_INT 10
3857: DIV
3858: PPUSH
3859: LD_VAR 0 4
3863: PPUSH
3864: LD_VAR 0 5
3868: PPUSH
3869: LD_INT 4
3871: PPUSH
3872: LD_INT 0
3874: PPUSH
3875: CALL_OW 60
// r := 0 ;
3879: LD_ADDR_VAR 0 8
3883: PUSH
3884: LD_INT 0
3886: ST_TO_ADDR
// end ;
3887: GO 3781
// end ;
3889: GO 3762
3891: POP
3892: POP
// end ; for r in starting_crates do
3893: LD_ADDR_VAR 0 8
3897: PUSH
3898: LD_EXP 7
3902: PUSH
3903: FOR_IN
3904: IFFALSE 3936
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3906: LD_INT 1
3908: PPUSH
3909: LD_INT 5
3911: PPUSH
3912: LD_VAR 0 4
3916: PPUSH
3917: LD_VAR 0 5
3921: PPUSH
3922: LD_VAR 0 8
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: CALL_OW 60
3934: GO 3903
3936: POP
3937: POP
// if def_morale_flags then
3938: LD_EXP 44
3942: IFFALSE 4081
// begin x := start_def [ pos ] [ 1 ] ;
3944: LD_ADDR_VAR 0 4
3948: PUSH
3949: LD_EXP 27
3953: PUSH
3954: LD_VAR 0 3
3958: ARRAY
3959: PUSH
3960: LD_INT 1
3962: ARRAY
3963: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3964: LD_ADDR_VAR 0 5
3968: PUSH
3969: LD_EXP 27
3973: PUSH
3974: LD_VAR 0 3
3978: ARRAY
3979: PUSH
3980: LD_INT 2
3982: ARRAY
3983: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3984: LD_VAR 0 4
3988: PPUSH
3989: LD_VAR 0 5
3993: PPUSH
3994: LD_INT 12
3996: PPUSH
3997: LD_INT 2
3999: PPUSH
4000: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4004: LD_ADDR_EXP 32
4008: PUSH
4009: LD_EXP 32
4013: PUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: LD_VAR 0 4
4023: PPUSH
4024: LD_VAR 0 5
4028: PPUSH
4029: LD_INT 1
4031: PUSH
4032: LD_INT 100
4034: PUSH
4035: EMPTY
4036: LIST
4037: LIST
4038: PUSH
4039: LD_INT 2
4041: PUSH
4042: LD_INT 50
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: PUSH
4049: LD_INT 3
4051: PUSH
4052: LD_INT 20
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 20
4061: PUSH
4062: LD_INT 100
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: PPUSH
4075: CALL_OW 418
4079: ADD
4080: ST_TO_ADDR
// end ; commander := true ;
4081: LD_ADDR_LOC 1
4085: PUSH
4086: LD_INT 1
4088: ST_TO_ADDR
// soldiers_created := 0 ;
4089: LD_ADDR_LOC 4
4093: PUSH
4094: LD_INT 0
4096: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4097: LD_ADDR_VAR 0 7
4101: PUSH
4102: DOUBLE
4103: LD_INT 1
4105: DEC
4106: ST_TO_ADDR
4107: LD_EXP 4
4111: PUSH
4112: FOR_TO
4113: IFFALSE 4266
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4115: LD_ADDR_VAR 0 4
4119: PUSH
4120: LD_EXP 26
4124: PUSH
4125: LD_VAR 0 3
4129: ARRAY
4130: PUSH
4131: LD_VAR 0 7
4135: ARRAY
4136: PUSH
4137: LD_INT 1
4139: ARRAY
4140: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4141: LD_ADDR_VAR 0 5
4145: PUSH
4146: LD_EXP 26
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_VAR 0 7
4161: ARRAY
4162: PUSH
4163: LD_INT 2
4165: ARRAY
4166: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4167: LD_ADDR_VAR 0 6
4171: PUSH
4172: LD_EXP 26
4176: PUSH
4177: LD_VAR 0 3
4181: ARRAY
4182: PUSH
4183: LD_VAR 0 7
4187: ARRAY
4188: PUSH
4189: LD_INT 3
4191: ARRAY
4192: ST_TO_ADDR
// bc_type := b_breastwork ;
4193: LD_ADDR_OWVAR 42
4197: PUSH
4198: LD_INT 31
4200: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4201: LD_ADDR_VAR 0 9
4205: PUSH
4206: LD_VAR 0 4
4210: PPUSH
4211: LD_VAR 0 5
4215: PPUSH
4216: LD_VAR 0 6
4220: PPUSH
4221: CALL_OW 47
4225: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4226: LD_INT 1
4228: PPUSH
4229: LD_INT 1
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: LD_INT 0
4237: PPUSH
4238: LD_INT 0
4240: PPUSH
4241: LD_VAR 0 9
4245: PPUSH
4246: CALL 2962 0 6
// soldiers_created := soldiers_created + 1 ;
4250: LD_ADDR_LOC 4
4254: PUSH
4255: LD_LOC 4
4259: PUSH
4260: LD_INT 1
4262: PLUS
4263: ST_TO_ADDR
// end ;
4264: GO 4112
4266: POP
4267: POP
// x := start_def [ pos ] [ 1 ] ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: LD_EXP 27
4277: PUSH
4278: LD_VAR 0 3
4282: ARRAY
4283: PUSH
4284: LD_INT 1
4286: ARRAY
4287: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4288: LD_ADDR_VAR 0 5
4292: PUSH
4293: LD_EXP 27
4297: PUSH
4298: LD_VAR 0 3
4302: ARRAY
4303: PUSH
4304: LD_INT 2
4306: ARRAY
4307: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4308: LD_LOC 8
4312: PUSH
4313: LD_EXP 4
4317: MINUS
4318: PPUSH
4319: LD_INT 1
4321: PPUSH
4322: LD_VAR 0 4
4326: PPUSH
4327: LD_VAR 0 5
4331: PPUSH
4332: LD_INT 5
4334: PPUSH
4335: LD_INT 0
4337: PPUSH
4338: CALL 2962 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4342: LD_LOC 5
4346: PPUSH
4347: LD_INT 2
4349: PPUSH
4350: LD_VAR 0 4
4354: PPUSH
4355: LD_VAR 0 5
4359: PPUSH
4360: LD_INT 5
4362: PPUSH
4363: LD_INT 0
4365: PPUSH
4366: CALL 2962 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4370: LD_LOC 7
4374: PPUSH
4375: LD_INT 3
4377: PPUSH
4378: LD_VAR 0 4
4382: PPUSH
4383: LD_VAR 0 5
4387: PPUSH
4388: LD_INT 5
4390: PPUSH
4391: LD_INT 0
4393: PPUSH
4394: CALL 2962 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4398: LD_LOC 6
4402: PPUSH
4403: LD_INT 4
4405: PPUSH
4406: LD_VAR 0 4
4410: PPUSH
4411: LD_VAR 0 5
4415: PPUSH
4416: LD_INT 5
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL 2962 0 6
// if def_siberite_detection then
4426: LD_EXP 45
4430: IFFALSE 4447
// SetTech ( tech_SibDet , side , state_researched ) ;
4432: LD_INT 20
4434: PPUSH
4435: LD_VAR 0 1
4439: PPUSH
4440: LD_INT 2
4442: PPUSH
4443: CALL_OW 322
// if def_siberite_bomb = 1 then
4447: LD_EXP 48
4451: PUSH
4452: LD_INT 1
4454: EQUAL
4455: IFFALSE 4489
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4457: LD_INT 25
4459: PPUSH
4460: LD_VAR 0 1
4464: PPUSH
4465: LD_INT 1
4467: PPUSH
4468: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4472: LD_INT 73
4474: PPUSH
4475: LD_VAR 0 1
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: CALL_OW 322
// end else
4487: GO 4519
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4489: LD_INT 25
4491: PPUSH
4492: LD_VAR 0 1
4496: PPUSH
4497: LD_INT 0
4499: PPUSH
4500: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4504: LD_INT 73
4506: PPUSH
4507: LD_VAR 0 1
4511: PPUSH
4512: LD_INT 0
4514: PPUSH
4515: CALL_OW 322
// end ; global_defined := true ;
4519: LD_ADDR_LOC 3
4523: PUSH
4524: LD_INT 1
4526: ST_TO_ADDR
// end ;
4527: LD_VAR 0 2
4531: RET
// every 0 0$1 do
4532: GO 4534
4534: DISABLE
// if ( def_siberite_bomb > 1 ) then
4535: LD_EXP 48
4539: PUSH
4540: LD_INT 1
4542: GREATER
4543: IFFALSE 4558
// begin wait ( siberite_bomb_Delay ) ;
4545: LD_EXP 17
4549: PPUSH
4550: CALL_OW 67
// EnableSibFiss ;
4554: CALL 4559 0 0
// end ;
4558: END
// function EnableSibFiss ; var i ; begin
4559: LD_INT 0
4561: PPUSH
4562: PPUSH
// for i := 1 to 8 do
4563: LD_ADDR_VAR 0 2
4567: PUSH
4568: DOUBLE
4569: LD_INT 1
4571: DEC
4572: ST_TO_ADDR
4573: LD_INT 8
4575: PUSH
4576: FOR_TO
4577: IFFALSE 4623
// if Side_Positions [ i ] then
4579: LD_EXP 21
4583: PUSH
4584: LD_VAR 0 2
4588: ARRAY
4589: IFFALSE 4621
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4591: LD_INT 25
4593: PPUSH
4594: LD_VAR 0 2
4598: PPUSH
4599: LD_INT 1
4601: PPUSH
4602: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4606: LD_INT 73
4608: PPUSH
4609: LD_VAR 0 2
4613: PPUSH
4614: LD_INT 1
4616: PPUSH
4617: CALL_OW 322
// end ;
4621: GO 4576
4623: POP
4624: POP
// end ;
4625: LD_VAR 0 1
4629: RET
// function prepare_sides ; var i ; begin
4630: LD_INT 0
4632: PPUSH
4633: PPUSH
// global_units := [ ] ;
4634: LD_ADDR_LOC 2
4638: PUSH
4639: EMPTY
4640: ST_TO_ADDR
// global_defined := false ;
4641: LD_ADDR_LOC 3
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// CountClassMembers ;
4649: CALL 4699 0 0
// for i := 1 to 8 do
4653: LD_ADDR_VAR 0 2
4657: PUSH
4658: DOUBLE
4659: LD_INT 1
4661: DEC
4662: ST_TO_ADDR
4663: LD_INT 8
4665: PUSH
4666: FOR_TO
4667: IFFALSE 4692
// if Side_Positions [ i ] then
4669: LD_EXP 21
4673: PUSH
4674: LD_VAR 0 2
4678: ARRAY
4679: IFFALSE 4690
// prepare_side ( i ) ;
4681: LD_VAR 0 2
4685: PPUSH
4686: CALL 3499 0 1
4690: GO 4666
4692: POP
4693: POP
// end ;
4694: LD_VAR 0 1
4698: RET
// function CountClassMembers ; var Mode ; begin
4699: LD_INT 0
4701: PPUSH
4702: PPUSH
// if No_Mechs then
4703: LD_EXP 50
4707: IFFALSE 4719
// Mode := 2 else
4709: LD_ADDR_VAR 0 2
4713: PUSH
4714: LD_INT 2
4716: ST_TO_ADDR
4717: GO 4727
// Mode := 1 ;
4719: LD_ADDR_VAR 0 2
4723: PUSH
4724: LD_INT 1
4726: ST_TO_ADDR
// neng := number_of_people ;
4727: LD_ADDR_LOC 5
4731: PUSH
4732: LD_EXP 5
4736: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4737: LD_ADDR_LOC 8
4741: PUSH
4742: LD_LOC 5
4746: PUSH
4747: LD_INT 4
4749: PUSH
4750: LD_INT 3
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_VAR 0 2
4761: ARRAY
4762: DIV
4763: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4764: LD_LOC 8
4768: PUSH
4769: LD_EXP 4
4773: LESS
4774: IFFALSE 4786
// nsol := number_of_breastworks ;
4776: LD_ADDR_LOC 8
4780: PUSH
4781: LD_EXP 4
4785: ST_TO_ADDR
// neng := neng - nsol ;
4786: LD_ADDR_LOC 5
4790: PUSH
4791: LD_LOC 5
4795: PUSH
4796: LD_LOC 8
4800: MINUS
4801: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4802: LD_ADDR_LOC 6
4806: PUSH
4807: LD_LOC 5
4811: PUSH
4812: LD_INT 3
4814: PUSH
4815: LD_INT 2
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_VAR 0 2
4826: ARRAY
4827: DIV
4828: ST_TO_ADDR
// if ( nsci < 1 ) then
4829: LD_LOC 6
4833: PUSH
4834: LD_INT 1
4836: LESS
4837: IFFALSE 4847
// nsci := 1 ;
4839: LD_ADDR_LOC 6
4843: PUSH
4844: LD_INT 1
4846: ST_TO_ADDR
// neng := neng - nsci ;
4847: LD_ADDR_LOC 5
4851: PUSH
4852: LD_LOC 5
4856: PUSH
4857: LD_LOC 6
4861: MINUS
4862: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4863: LD_ADDR_LOC 7
4867: PUSH
4868: LD_LOC 5
4872: PUSH
4873: LD_INT 2
4875: DIV
4876: PUSH
4877: LD_INT 0
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_VAR 0 2
4888: ARRAY
4889: ST_TO_ADDR
// neng := neng - nmech ;
4890: LD_ADDR_LOC 5
4894: PUSH
4895: LD_LOC 5
4899: PUSH
4900: LD_LOC 7
4904: MINUS
4905: ST_TO_ADDR
// if ( neng < 1 ) then
4906: LD_LOC 5
4910: PUSH
4911: LD_INT 1
4913: LESS
4914: IFFALSE 4924
// neng := 1 ;
4916: LD_ADDR_LOC 5
4920: PUSH
4921: LD_INT 1
4923: ST_TO_ADDR
// end ;
4924: LD_VAR 0 1
4928: RET
// function Init_Win_Condition ; begin
4929: LD_INT 0
4931: PPUSH
// if Team_Game then
4932: LD_EXP 23
4936: IFFALSE 4943
// enable ( 98 ) else
4938: LD_INT 98
4940: ENABLE_MARKED
4941: GO 4946
// enable ( 99 ) ;
4943: LD_INT 99
4945: ENABLE_MARKED
// case Game_Type of 3 :
4946: LD_EXP 34
4950: PUSH
4951: LD_INT 3
4953: DOUBLE
4954: EQUAL
4955: IFTRUE 4959
4957: GO 4965
4959: POP
// enable ( 100 ) ; end ;
4960: LD_INT 100
4962: ENABLE_MARKED
4963: GO 4966
4965: POP
// end ;
4966: LD_VAR 0 1
4970: RET
// starting begin disable ( 98 ) ;
4971: LD_INT 98
4973: DISABLE_MARKED
// disable ( 99 ) ;
4974: LD_INT 99
4976: DISABLE_MARKED
// disable ( 400 ) ;
4977: LD_INT 400
4979: DISABLE_MARKED
// disable ( 401 ) ;
4980: LD_INT 401
4982: DISABLE_MARKED
// disable ( 600 ) ;
4983: LD_INT 600
4985: DISABLE_MARKED
// mp_selectmsg := true ;
4986: LD_ADDR_OWVAR 13
4990: PUSH
4991: LD_INT 1
4993: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4994: CALL 0 0 0
// init_map ;
4998: CALL 1503 0 0
// init_respawning ;
5002: CALL 6348 0 0
// set_shared_visions_and_alliances ;
5006: CALL 2674 0 0
// prepare_sides ;
5010: CALL 4630 0 0
// InitLimits ;
5014: CALL 11046 0 0
// ShowTimer ;
5018: CALL 11983 0 0
// music_nat := Side_Nations [ your_side ] ;
5022: LD_ADDR_OWVAR 71
5026: PUSH
5027: LD_EXP 22
5031: PUSH
5032: LD_OWVAR 2
5036: ARRAY
5037: ST_TO_ADDR
// if IAmSpec then
5038: CALL_OW 531
5042: IFFALSE 5078
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
5044: LD_INT 0
5046: PPUSH
5047: LD_INT 0
5049: PPUSH
5050: LD_OWVAR 2
5054: PPUSH
5055: LD_INT 32767
5057: NEG
5058: PPUSH
5059: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
5063: LD_INT 104
5065: PPUSH
5066: LD_INT 69
5068: PPUSH
5069: CALL_OW 86
// enable ( 400 ) ;
5073: LD_INT 400
5075: ENABLE_MARKED
// end else
5076: GO 5132
// begin ResetFog ;
5078: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5082: LD_EXP 27
5086: PUSH
5087: LD_EXP 21
5091: PUSH
5092: LD_OWVAR 2
5096: ARRAY
5097: ARRAY
5098: PUSH
5099: LD_INT 1
5101: ARRAY
5102: PPUSH
5103: LD_EXP 27
5107: PUSH
5108: LD_EXP 21
5112: PUSH
5113: LD_OWVAR 2
5117: ARRAY
5118: ARRAY
5119: PUSH
5120: LD_INT 2
5122: ARRAY
5123: PPUSH
5124: CALL_OW 86
// Init_Win_Condition ;
5128: CALL 4929 0 0
// end ; if def_builduptime then
5132: LD_EXP 49
5136: IFFALSE 5142
// BeginBuildUp ;
5138: CALL 8213 0 0
// end ;
5142: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 and spect = 0 do
5143: LD_INT 22
5145: PUSH
5146: LD_OWVAR 2
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PUSH
5155: LD_INT 2
5157: PUSH
5158: LD_INT 21
5160: PUSH
5161: LD_INT 1
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PUSH
5168: LD_INT 33
5170: PUSH
5171: LD_INT 3
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: PUSH
5178: LD_INT 33
5180: PUSH
5181: LD_INT 5
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 30
5190: PUSH
5191: LD_INT 0
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: LD_INT 30
5200: PUSH
5201: LD_INT 1
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: CALL_OW 69
5224: PUSH
5225: LD_INT 0
5227: EQUAL
5228: PUSH
5229: LD_EXP 15
5233: PUSH
5234: LD_INT 0
5236: EQUAL
5237: AND
5238: IFFALSE 5252
5240: GO 5242
5242: DISABLE
// begin fogoff ( your_side ) ;
5243: LD_OWVAR 2
5247: PPUSH
5248: CALL_OW 344
// end ; end_of_file
5252: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5253: GO 5255
5255: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5256: LD_INT 4
5258: PPUSH
5259: LD_INT 5
5261: PPUSH
5262: CALL_OW 12
5266: PPUSH
5267: LD_INT 1
5269: PPUSH
5270: CALL_OW 57
// enable ;
5274: ENABLE
// end ;
5275: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5276: GO 5278
5278: DISABLE
5279: LD_INT 0
5281: PPUSH
5282: PPUSH
// begin case tick of 1 .. 1 1$0 :
5283: LD_OWVAR 1
5287: PUSH
5288: LD_INT 1
5290: DOUBLE
5291: GREATEREQUAL
5292: IFFALSE 5300
5294: LD_INT 2100
5296: DOUBLE
5297: LESSEQUAL
5298: IFTRUE 5302
5300: GO 5330
5302: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5303: LD_EXP 9
5307: PUSH
5308: LD_INT 100
5310: DIVREAL
5311: PUSH
5312: LD_INT 350
5314: PPUSH
5315: LD_INT 1050
5317: PPUSH
5318: CALL_OW 12
5322: MUL
5323: PPUSH
5324: CALL_OW 67
5328: GO 5632
5330: LD_INT 2100
5332: PUSH
5333: LD_INT 1
5335: PLUS
5336: DOUBLE
5337: GREATEREQUAL
5338: IFFALSE 5346
5340: LD_INT 10500
5342: DOUBLE
5343: LESSEQUAL
5344: IFTRUE 5348
5346: GO 5376
5348: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5349: LD_EXP 9
5353: PUSH
5354: LD_INT 100
5356: DIVREAL
5357: PUSH
5358: LD_INT 1050
5360: PPUSH
5361: LD_INT 1575
5363: PPUSH
5364: CALL_OW 12
5368: MUL
5369: PPUSH
5370: CALL_OW 67
5374: GO 5632
5376: LD_INT 10500
5378: PUSH
5379: LD_INT 1
5381: PLUS
5382: DOUBLE
5383: GREATEREQUAL
5384: IFFALSE 5392
5386: LD_INT 21000
5388: DOUBLE
5389: LESSEQUAL
5390: IFTRUE 5394
5392: GO 5422
5394: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5395: LD_EXP 9
5399: PUSH
5400: LD_INT 100
5402: DIVREAL
5403: PUSH
5404: LD_INT 1575
5406: PPUSH
5407: LD_INT 2100
5409: PPUSH
5410: CALL_OW 12
5414: MUL
5415: PPUSH
5416: CALL_OW 67
5420: GO 5632
5422: LD_INT 21000
5424: PUSH
5425: LD_INT 1
5427: PLUS
5428: DOUBLE
5429: GREATEREQUAL
5430: IFFALSE 5438
5432: LD_INT 42000
5434: DOUBLE
5435: LESSEQUAL
5436: IFTRUE 5440
5438: GO 5468
5440: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5441: LD_EXP 9
5445: PUSH
5446: LD_INT 100
5448: DIVREAL
5449: PUSH
5450: LD_INT 2100
5452: PPUSH
5453: LD_INT 2625
5455: PPUSH
5456: CALL_OW 12
5460: MUL
5461: PPUSH
5462: CALL_OW 67
5466: GO 5632
5468: LD_INT 42000
5470: PUSH
5471: LD_INT 1
5473: PLUS
5474: DOUBLE
5475: GREATEREQUAL
5476: IFFALSE 5484
5478: LD_INT 63000
5480: DOUBLE
5481: LESSEQUAL
5482: IFTRUE 5486
5484: GO 5514
5486: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5487: LD_EXP 9
5491: PUSH
5492: LD_INT 100
5494: DIVREAL
5495: PUSH
5496: LD_INT 2625
5498: PPUSH
5499: LD_INT 3150
5501: PPUSH
5502: CALL_OW 12
5506: MUL
5507: PPUSH
5508: CALL_OW 67
5512: GO 5632
5514: LD_INT 63000
5516: PUSH
5517: LD_INT 1
5519: PLUS
5520: DOUBLE
5521: GREATEREQUAL
5522: IFFALSE 5530
5524: LD_INT 105000
5526: DOUBLE
5527: LESSEQUAL
5528: IFTRUE 5532
5530: GO 5560
5532: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5533: LD_EXP 9
5537: PUSH
5538: LD_INT 100
5540: DIVREAL
5541: PUSH
5542: LD_INT 3150
5544: PPUSH
5545: LD_INT 3675
5547: PPUSH
5548: CALL_OW 12
5552: MUL
5553: PPUSH
5554: CALL_OW 67
5558: GO 5632
5560: LD_INT 105000
5562: PUSH
5563: LD_INT 1
5565: PLUS
5566: DOUBLE
5567: GREATEREQUAL
5568: IFFALSE 5576
5570: LD_INT 630000
5572: DOUBLE
5573: LESSEQUAL
5574: IFTRUE 5578
5576: GO 5606
5578: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5579: LD_EXP 9
5583: PUSH
5584: LD_INT 100
5586: DIVREAL
5587: PUSH
5588: LD_INT 3675
5590: PPUSH
5591: LD_INT 4200
5593: PPUSH
5594: CALL_OW 12
5598: MUL
5599: PPUSH
5600: CALL_OW 67
5604: GO 5632
5606: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5607: LD_EXP 9
5611: PUSH
5612: LD_INT 100
5614: DIVREAL
5615: PUSH
5616: LD_INT 4200
5618: PPUSH
5619: LD_INT 5250
5621: PPUSH
5622: CALL_OW 12
5626: MUL
5627: PPUSH
5628: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5632: LD_ADDR_VAR 0 2
5636: PUSH
5637: LD_INT 3
5639: PPUSH
5640: LD_INT 5
5642: PPUSH
5643: CALL_OW 12
5647: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5648: LD_ADDR_VAR 0 1
5652: PUSH
5653: LD_EXP 21
5657: PUSH
5658: LD_INT 0
5660: PUSH
5661: EMPTY
5662: LIST
5663: DIFF
5664: PUSH
5665: FOR_IN
5666: IFFALSE 5715
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5668: LD_VAR 0 2
5672: PPUSH
5673: LD_EXP 27
5677: PUSH
5678: LD_VAR 0 1
5682: ARRAY
5683: PUSH
5684: LD_INT 1
5686: ARRAY
5687: PPUSH
5688: LD_EXP 27
5692: PUSH
5693: LD_VAR 0 1
5697: ARRAY
5698: PUSH
5699: LD_INT 2
5701: ARRAY
5702: PPUSH
5703: LD_INT 20
5705: PPUSH
5706: LD_INT 1
5708: PPUSH
5709: CALL_OW 56
5713: GO 5665
5715: POP
5716: POP
// enable ;
5717: ENABLE
// end ; end_of_file
5718: PPOPN 2
5720: END
// var _apemenIncrement , _apemenMaximum , _apemenSkillLevel , _apemenThreshold , _isSpawning , _wildApemenAmount ; every 0 0$15 do var i ;
5721: GO 5723
5723: DISABLE
5724: LD_INT 0
5726: PPUSH
// begin _apemenIncrement := 0 ;
5727: LD_ADDR_LOC 9
5731: PUSH
5732: LD_INT 0
5734: ST_TO_ADDR
// _apemenSkillLevel := 0 ;
5735: LD_ADDR_LOC 11
5739: PUSH
5740: LD_INT 0
5742: ST_TO_ADDR
// _isSpawning := true ;
5743: LD_ADDR_LOC 13
5747: PUSH
5748: LD_INT 1
5750: ST_TO_ADDR
// _wildApemenAmount := 0 ;
5751: LD_ADDR_LOC 14
5755: PUSH
5756: LD_INT 0
5758: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5759: LD_ADDR_VAR 0 1
5763: PUSH
5764: LD_EXP 21
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: EMPTY
5773: LIST
5774: DIFF
5775: PUSH
5776: FOR_IN
5777: IFFALSE 5795
// _apemenIncrement := _apemenIncrement + 1 ;
5779: LD_ADDR_LOC 9
5783: PUSH
5784: LD_LOC 9
5788: PUSH
5789: LD_INT 1
5791: PLUS
5792: ST_TO_ADDR
5793: GO 5776
5795: POP
5796: POP
// _apemenMaximum := _apemenIncrement * amount_of_apemen ;
5797: LD_ADDR_LOC 10
5801: PUSH
5802: LD_LOC 9
5806: PUSH
5807: LD_EXP 11
5811: MUL
5812: ST_TO_ADDR
// _apemenThreshold := _apemenMaximum / 2 ;
5813: LD_ADDR_LOC 12
5817: PUSH
5818: LD_LOC 10
5822: PUSH
5823: LD_INT 2
5825: DIVREAL
5826: ST_TO_ADDR
// prepare_apemen ;
5827: CALL 5919 0 0
// end ;
5831: PPOPN 1
5833: END
// on ApemanTamed ( tamedApeman , tamerUnit ) do begin CheckApemenAmount ;
5834: CALL 5841 0 0
// end ;
5838: PPOPN 2
5840: END
// export function CheckApemenAmount ; begin
5841: LD_INT 0
5843: PPUSH
// _wildApemenAmount := _wildApemenAmount - 1 ;
5844: LD_ADDR_LOC 14
5848: PUSH
5849: LD_LOC 14
5853: PUSH
5854: LD_INT 1
5856: MINUS
5857: ST_TO_ADDR
// if _isSpawning then
5858: LD_LOC 13
5862: IFFALSE 5866
// exit ;
5864: GO 5914
// if _wildApemenAmount <= ( _apemenThreshold ) then
5866: LD_LOC 14
5870: PUSH
5871: LD_LOC 12
5875: LESSEQUAL
5876: IFFALSE 5914
// begin if _apemenSkillLevel < 8 then
5878: LD_LOC 11
5882: PUSH
5883: LD_INT 8
5885: LESS
5886: IFFALSE 5902
// _apemenSkillLevel := _apemenSkillLevel + 1 ;
5888: LD_ADDR_LOC 11
5892: PUSH
5893: LD_LOC 11
5897: PUSH
5898: LD_INT 1
5900: PLUS
5901: ST_TO_ADDR
// _isSpawning := true ;
5902: LD_ADDR_LOC 13
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
// prepare_apemen ;
5910: CALL 5919 0 0
// end ; end ;
5914: LD_VAR 0 1
5918: RET
// function prepare_apemen ; var i ; begin
5919: LD_INT 0
5921: PPUSH
5922: PPUSH
// if not amount_of_apemen then
5923: LD_EXP 11
5927: NOT
5928: IFFALSE 5932
// exit ;
5930: GO 6161
// repeat Wait ( Rand ( 0 0$30 , 1 1$30 ) ) ;
5932: LD_INT 1050
5934: PPUSH
5935: LD_INT 3150
5937: PPUSH
5938: CALL_OW 12
5942: PPUSH
5943: CALL_OW 67
// apeman_init ;
5947: CALL 6166 0 0
// for i in ( Side_Positions diff [ 0 ] ) do
5951: LD_ADDR_VAR 0 2
5955: PUSH
5956: LD_EXP 21
5960: PUSH
5961: LD_INT 0
5963: PUSH
5964: EMPTY
5965: LIST
5966: DIFF
5967: PUSH
5968: FOR_IN
5969: IFFALSE 6123
// begin if i = 1 then
5971: LD_VAR 0 2
5975: PUSH
5976: LD_INT 1
5978: EQUAL
5979: IFFALSE 5996
// PlaceUnitArea ( CreateHuman , Base1ApeArea , false ) ;
5981: CALL_OW 44
5985: PPUSH
5986: LD_INT 3
5988: PPUSH
5989: LD_INT 0
5991: PPUSH
5992: CALL_OW 49
// if i = 2 then
5996: LD_VAR 0 2
6000: PUSH
6001: LD_INT 2
6003: EQUAL
6004: IFFALSE 6021
// PlaceUnitArea ( CreateHuman , Base2ApeArea , false ) ;
6006: CALL_OW 44
6010: PPUSH
6011: LD_INT 2
6013: PPUSH
6014: LD_INT 0
6016: PPUSH
6017: CALL_OW 49
// if i = 3 then
6021: LD_VAR 0 2
6025: PUSH
6026: LD_INT 3
6028: EQUAL
6029: IFFALSE 6046
// PlaceUnitArea ( CreateHuman , Base3ApeArea , false ) ;
6031: CALL_OW 44
6035: PPUSH
6036: LD_INT 1
6038: PPUSH
6039: LD_INT 0
6041: PPUSH
6042: CALL_OW 49
// if i = 4 then
6046: LD_VAR 0 2
6050: PUSH
6051: LD_INT 4
6053: EQUAL
6054: IFFALSE 6071
// PlaceUnitArea ( CreateHuman , Base4ApeArea , false ) ;
6056: CALL_OW 44
6060: PPUSH
6061: LD_INT 4
6063: PPUSH
6064: LD_INT 0
6066: PPUSH
6067: CALL_OW 49
// if i = 5 then
6071: LD_VAR 0 2
6075: PUSH
6076: LD_INT 5
6078: EQUAL
6079: IFFALSE 6096
// PlaceUnitArea ( CreateHuman , Base5ApeArea , false ) ;
6081: CALL_OW 44
6085: PPUSH
6086: LD_INT 6
6088: PPUSH
6089: LD_INT 0
6091: PPUSH
6092: CALL_OW 49
// if i = 6 then
6096: LD_VAR 0 2
6100: PUSH
6101: LD_INT 6
6103: EQUAL
6104: IFFALSE 6121
// PlaceUnitArea ( CreateHuman , Base6ApeArea , false ) ;
6106: CALL_OW 44
6110: PPUSH
6111: LD_INT 5
6113: PPUSH
6114: LD_INT 0
6116: PPUSH
6117: CALL_OW 49
// end ;
6121: GO 5968
6123: POP
6124: POP
// _wildApemenAmount := _wildApemenAmount + _apemenIncrement ;
6125: LD_ADDR_LOC 14
6129: PUSH
6130: LD_LOC 14
6134: PUSH
6135: LD_LOC 9
6139: PLUS
6140: ST_TO_ADDR
// until _wildApemenAmount >= _apemenMaximum ;
6141: LD_LOC 14
6145: PUSH
6146: LD_LOC 10
6150: GREATEREQUAL
6151: IFFALSE 5932
// _isSpawning := false ;
6153: LD_ADDR_LOC 13
6157: PUSH
6158: LD_INT 0
6160: ST_TO_ADDR
// end ;
6161: LD_VAR 0 1
6165: RET
// function apeman_init ; begin
6166: LD_INT 0
6168: PPUSH
// uc_side := 0 ;
6169: LD_ADDR_OWVAR 20
6173: PUSH
6174: LD_INT 0
6176: ST_TO_ADDR
// uc_nation := nation_nature ;
6177: LD_ADDR_OWVAR 21
6181: PUSH
6182: LD_INT 0
6184: ST_TO_ADDR
// hc_class := class_apeman ;
6185: LD_ADDR_OWVAR 28
6189: PUSH
6190: LD_INT 12
6192: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 2 , 2 ] ;
6193: LD_ADDR_OWVAR 30
6197: PUSH
6198: LD_INT 2
6200: PUSH
6201: LD_INT 2
6203: PUSH
6204: LD_INT 2
6206: PUSH
6207: LD_INT 2
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: ST_TO_ADDR
// hc_skills := [ Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel , Rand ( 0 , 2 ) + _apemenSkillLevel ] ;
6216: LD_ADDR_OWVAR 31
6220: PUSH
6221: LD_INT 0
6223: PPUSH
6224: LD_INT 2
6226: PPUSH
6227: CALL_OW 12
6231: PUSH
6232: LD_LOC 11
6236: PLUS
6237: PUSH
6238: LD_INT 0
6240: PPUSH
6241: LD_INT 2
6243: PPUSH
6244: CALL_OW 12
6248: PUSH
6249: LD_LOC 11
6253: PLUS
6254: PUSH
6255: LD_INT 0
6257: PPUSH
6258: LD_INT 2
6260: PPUSH
6261: CALL_OW 12
6265: PUSH
6266: LD_LOC 11
6270: PLUS
6271: PUSH
6272: LD_INT 0
6274: PPUSH
6275: LD_INT 2
6277: PPUSH
6278: CALL_OW 12
6282: PUSH
6283: LD_LOC 11
6287: PLUS
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
6295: LD_ADDR_OWVAR 29
6299: PUSH
6300: LD_INT 10
6302: PUSH
6303: LD_INT 12
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: ST_TO_ADDR
// hc_sex := sex_male ;
6310: LD_ADDR_OWVAR 27
6314: PUSH
6315: LD_INT 1
6317: ST_TO_ADDR
// hc_importance := 0 ;
6318: LD_ADDR_OWVAR 32
6322: PUSH
6323: LD_INT 0
6325: ST_TO_ADDR
// hc_agressivity := Rand ( - 20 , 20 ) ;
6326: LD_ADDR_OWVAR 35
6330: PUSH
6331: LD_INT 20
6333: NEG
6334: PPUSH
6335: LD_INT 20
6337: PPUSH
6338: CALL_OW 12
6342: ST_TO_ADDR
// end ; end_of_file
6343: LD_VAR 0 1
6347: RET
// var respawn , inqueue ; export function init_respawning ; begin
6348: LD_INT 0
6350: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6351: LD_ADDR_LOC 15
6355: PUSH
6356: LD_INT 1
6358: PPUSH
6359: LD_INT 8
6361: PPUSH
6362: CALL_OW 12
6366: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6367: LD_ADDR_LOC 16
6371: PUSH
6372: LD_INT 0
6374: PUSH
6375: LD_INT 0
6377: PUSH
6378: LD_INT 0
6380: PUSH
6381: LD_INT 0
6383: PUSH
6384: LD_INT 0
6386: PUSH
6387: LD_INT 0
6389: PUSH
6390: LD_INT 0
6392: PUSH
6393: LD_INT 0
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: ST_TO_ADDR
// end ;
6406: LD_VAR 0 1
6410: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6411: GO 6413
6413: DISABLE
6414: LD_INT 0
6416: PPUSH
6417: PPUSH
6418: PPUSH
// begin if respawning_time_max = 0 then
6419: LD_EXP 14
6423: PUSH
6424: LD_INT 0
6426: EQUAL
6427: IFFALSE 6431
// exit ;
6429: GO 6840
// if respawn = 8 then
6431: LD_LOC 15
6435: PUSH
6436: LD_INT 8
6438: EQUAL
6439: IFFALSE 6451
// respawn := 1 else
6441: LD_ADDR_LOC 15
6445: PUSH
6446: LD_INT 1
6448: ST_TO_ADDR
6449: GO 6465
// respawn := respawn + 1 ;
6451: LD_ADDR_LOC 15
6455: PUSH
6456: LD_LOC 15
6460: PUSH
6461: LD_INT 1
6463: PLUS
6464: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6465: LD_EXP 21
6469: PUSH
6470: LD_LOC 15
6474: ARRAY
6475: PUSH
6476: LD_LOC 16
6480: PUSH
6481: LD_LOC 15
6485: ARRAY
6486: NOT
6487: AND
6488: IFFALSE 6839
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6490: LD_ADDR_VAR 0 1
6494: PUSH
6495: LD_INT 21
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: LD_INT 22
6507: PUSH
6508: LD_LOC 15
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: LD_INT 3
6519: PUSH
6520: LD_INT 23
6522: PUSH
6523: LD_INT 0
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: PPUSH
6536: CALL_OW 69
6540: ST_TO_ADDR
// if n < number_of_people then
6541: LD_VAR 0 1
6545: PUSH
6546: LD_EXP 5
6550: LESS
6551: IFFALSE 6836
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6553: LD_ADDR_VAR 0 2
6557: PUSH
6558: LD_INT 21
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 2
6570: PUSH
6571: LD_INT 30
6573: PUSH
6574: LD_INT 0
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 30
6583: PUSH
6584: LD_INT 1
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 50
6598: PUSH
6599: EMPTY
6600: LIST
6601: PUSH
6602: LD_INT 22
6604: PUSH
6605: LD_LOC 15
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PPUSH
6620: CALL_OW 69
6624: ST_TO_ADDR
// if dep > 0 then
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 0
6632: GREATER
6633: IFFALSE 6833
// begin aktresp := respawn ;
6635: LD_ADDR_VAR 0 3
6639: PUSH
6640: LD_LOC 15
6644: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
6645: LD_ADDR_LOC 16
6649: PUSH
6650: LD_LOC 16
6654: PPUSH
6655: LD_VAR 0 3
6659: PPUSH
6660: LD_INT 1
6662: PPUSH
6663: CALL_OW 1
6667: ST_TO_ADDR
// enable ;
6668: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6669: LD_EXP 13
6673: PPUSH
6674: LD_EXP 14
6678: PPUSH
6679: CALL_OW 12
6683: PPUSH
6684: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6688: LD_ADDR_LOC 16
6692: PUSH
6693: LD_LOC 16
6697: PPUSH
6698: LD_VAR 0 3
6702: PPUSH
6703: LD_INT 0
6705: PPUSH
6706: CALL_OW 1
6710: ST_TO_ADDR
// hc_name :=  ;
6711: LD_ADDR_OWVAR 26
6715: PUSH
6716: LD_STRING 
6718: ST_TO_ADDR
// hc_importance := 0 ;
6719: LD_ADDR_OWVAR 32
6723: PUSH
6724: LD_INT 0
6726: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6727: LD_INT 0
6729: PPUSH
6730: LD_INT 0
6732: PPUSH
6733: LD_EXP 6
6737: PUSH
6738: LD_INT 2
6740: DIV
6741: PPUSH
6742: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6746: LD_ADDR_OWVAR 21
6750: PUSH
6751: LD_EXP 22
6755: PUSH
6756: LD_VAR 0 3
6760: ARRAY
6761: ST_TO_ADDR
// uc_side := aktresp ;
6762: LD_ADDR_OWVAR 20
6766: PUSH
6767: LD_VAR 0 3
6771: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
6772: LD_ADDR_VAR 0 2
6776: PUSH
6777: LD_VAR 0 2
6781: PUSH
6782: LD_INT 1
6784: PPUSH
6785: LD_VAR 0 2
6789: PPUSH
6790: CALL_OW 12
6794: ARRAY
6795: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
6796: CALL_OW 44
6800: PPUSH
6801: LD_VAR 0 2
6805: PPUSH
6806: CALL_OW 250
6810: PPUSH
6811: LD_VAR 0 2
6815: PPUSH
6816: CALL_OW 251
6820: PPUSH
6821: LD_INT 7
6823: PPUSH
6824: LD_INT 1
6826: PPUSH
6827: CALL_OW 50
// end else
6831: GO 6834
// enable ;
6833: ENABLE
// end else
6834: GO 6837
// enable ;
6836: ENABLE
// end else
6837: GO 6840
// enable ;
6839: ENABLE
// end ; end_of_file
6840: PPOPN 3
6842: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6843: LD_VAR 0 1
6847: PPUSH
6848: CALL_OW 266
6852: PUSH
6853: LD_INT 0
6855: PUSH
6856: LD_INT 1
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: IN
6863: IFFALSE 6888
// SetBName ( b , @ & GetSide ( b ) ) ;
6865: LD_VAR 0 1
6869: PPUSH
6870: LD_STRING @
6872: PUSH
6873: LD_VAR 0 1
6877: PPUSH
6878: CALL_OW 255
6882: STR
6883: PPUSH
6884: CALL_OW 500
// if def_game_rules then
6888: LD_EXP 35
6892: IFFALSE 6929
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
6894: LD_VAR 0 1
6898: PPUSH
6899: LD_VAR 0 1
6903: PPUSH
6904: CALL_OW 266
6908: PPUSH
6909: LD_VAR 0 1
6913: PPUSH
6914: CALL_OW 255
6918: PPUSH
6919: LD_INT 0
6921: PPUSH
6922: LD_INT 1
6924: PPUSH
6925: CALL 11447 0 5
// end ;
6929: PPOPN 2
6931: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6932: LD_VAR 0 1
6936: PPUSH
6937: CALL_OW 266
6941: PUSH
6942: LD_INT 0
6944: PUSH
6945: LD_INT 1
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: IN
6952: IFFALSE 6977
// SetBName ( b , @ & GetSide ( b ) ) ;
6954: LD_VAR 0 1
6958: PPUSH
6959: LD_STRING @
6961: PUSH
6962: LD_VAR 0 1
6966: PPUSH
6967: CALL_OW 255
6971: STR
6972: PPUSH
6973: CALL_OW 500
// if def_game_rules then
6977: LD_EXP 35
6981: IFFALSE 7020
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
6983: LD_VAR 0 1
6987: PPUSH
6988: LD_VAR 0 1
6992: PPUSH
6993: CALL_OW 266
6997: PPUSH
6998: LD_VAR 0 1
7002: PPUSH
7003: CALL_OW 255
7007: PPUSH
7008: LD_VAR 0 2
7012: PPUSH
7013: LD_INT 1
7015: PPUSH
7016: CALL 11447 0 5
// end ;
7020: PPOPN 3
7022: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7023: LD_INT 0
7025: PPUSH
7026: PPUSH
7027: PPUSH
7028: PPUSH
// begin if GetSide ( j ) = 0 and GetClass ( j ) = class_apeman then
7029: LD_VAR 0 1
7033: PPUSH
7034: CALL_OW 255
7038: PUSH
7039: LD_INT 0
7041: EQUAL
7042: PUSH
7043: LD_VAR 0 1
7047: PPUSH
7048: CALL_OW 257
7052: PUSH
7053: LD_INT 12
7055: EQUAL
7056: AND
7057: IFFALSE 7063
// CheckApemenAmount ;
7059: CALL 5841 0 0
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7063: LD_VAR 0 1
7067: PPUSH
7068: CALL_OW 266
7072: PUSH
7073: LD_INT 0
7075: PUSH
7076: LD_INT 1
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: IN
7083: IFFALSE 7165
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7085: LD_ADDR_VAR 0 4
7089: PUSH
7090: LD_EXP 21
7094: PUSH
7095: LD_VAR 0 1
7099: PPUSH
7100: CALL_OW 255
7104: ARRAY
7105: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7106: LD_ADDR_VAR 0 2
7110: PUSH
7111: LD_EXP 27
7115: PUSH
7116: LD_VAR 0 4
7120: ARRAY
7121: PUSH
7122: LD_INT 1
7124: ARRAY
7125: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7126: LD_ADDR_VAR 0 3
7130: PUSH
7131: LD_EXP 27
7135: PUSH
7136: LD_VAR 0 4
7140: ARRAY
7141: PUSH
7142: LD_INT 2
7144: ARRAY
7145: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7146: LD_VAR 0 2
7150: PPUSH
7151: LD_VAR 0 3
7155: PPUSH
7156: CALL_OW 420
7160: PPUSH
7161: CALL_OW 419
// end ; if def_game_rules then
7165: LD_EXP 35
7169: IFFALSE 7268
// if ( GetType ( j ) = 3 ) then
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 247
7180: PUSH
7181: LD_INT 3
7183: EQUAL
7184: IFFALSE 7224
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7186: LD_VAR 0 1
7190: PPUSH
7191: LD_VAR 0 1
7195: PPUSH
7196: CALL_OW 266
7200: PPUSH
7201: LD_VAR 0 1
7205: PPUSH
7206: CALL_OW 255
7210: PPUSH
7211: LD_INT 0
7213: PPUSH
7214: LD_INT 1
7216: NEG
7217: PPUSH
7218: CALL 11447 0 5
7222: GO 7268
// if ( GetChassis ( j ) = 25 ) then
7224: LD_VAR 0 1
7228: PPUSH
7229: CALL_OW 265
7233: PUSH
7234: LD_INT 25
7236: EQUAL
7237: IFFALSE 7268
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_INT 37
7246: PPUSH
7247: LD_VAR 0 1
7251: PPUSH
7252: CALL_OW 255
7256: PPUSH
7257: LD_INT 0
7259: PPUSH
7260: LD_INT 1
7262: NEG
7263: PPUSH
7264: CALL 11447 0 5
// end ;
7268: PPOPN 5
7270: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
7271: LD_EXP 35
7275: PUSH
7276: LD_VAR 0 1
7280: PPUSH
7281: CALL_OW 265
7285: PUSH
7286: LD_INT 25
7288: EQUAL
7289: AND
7290: IFFALSE 7322
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
7292: LD_VAR 0 1
7296: PPUSH
7297: LD_INT 37
7299: PPUSH
7300: LD_VAR 0 1
7304: PPUSH
7305: CALL_OW 255
7309: PPUSH
7310: LD_VAR 0 3
7314: PPUSH
7315: LD_INT 1
7317: PPUSH
7318: CALL 11447 0 5
// end ;
7322: PPOPN 4
7324: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7325: LD_VAR 0 1
7329: PPUSH
7330: LD_VAR 0 2
7334: PPUSH
7335: LD_VAR 0 3
7339: PPUSH
7340: LD_OWVAR 2
7344: PPUSH
7345: CALL 12125 0 4
7349: PPOPN 3
7351: END
// function CanWinLoose ; begin
7352: LD_INT 0
7354: PPUSH
// Result := true ;
7355: LD_ADDR_VAR 0 1
7359: PUSH
7360: LD_INT 1
7362: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7363: CALL_OW 518
7367: PUSH
7368: CALL_OW 519
7372: PUSH
7373: LD_INT 0
7375: GREATER
7376: AND
7377: IFFALSE 7387
// Result := false ;
7379: LD_ADDR_VAR 0 1
7383: PUSH
7384: LD_INT 0
7386: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7387: CALL_OW 531
7391: PUSH
7392: CALL_OW 519
7396: PUSH
7397: LD_INT 1
7399: GREATER
7400: AND
7401: IFFALSE 7411
// Result := false ;
7403: LD_ADDR_VAR 0 1
7407: PUSH
7408: LD_INT 0
7410: ST_TO_ADDR
// end ;
7411: LD_VAR 0 1
7415: RET
// function HasPower ( i ) ; begin
7416: LD_INT 0
7418: PPUSH
// if def_people_respawning then
7419: LD_EXP 46
7423: IFFALSE 7514
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7425: LD_ADDR_VAR 0 2
7429: PUSH
7430: LD_INT 22
7432: PUSH
7433: LD_VAR 0 1
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 2
7444: PUSH
7445: LD_INT 21
7447: PUSH
7448: LD_INT 1
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 33
7457: PUSH
7458: LD_INT 3
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 33
7467: PUSH
7468: LD_INT 5
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 30
7477: PUSH
7478: LD_INT 0
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 30
7487: PUSH
7488: LD_INT 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: LIST
7499: LIST
7500: LIST
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: PPUSH
7507: CALL_OW 69
7511: ST_TO_ADDR
7512: GO 7579
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_VAR 0 1
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_INT 2
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: LD_INT 33
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 33
7556: PUSH
7557: LD_INT 5
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PPUSH
7574: CALL_OW 69
7578: ST_TO_ADDR
// end ;
7579: LD_VAR 0 2
7583: RET
// function AlliedSides ( i , j ) ; begin
7584: LD_INT 0
7586: PPUSH
// Result := false ;
7587: LD_ADDR_VAR 0 3
7591: PUSH
7592: LD_INT 0
7594: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7595: LD_VAR 0 1
7599: PPUSH
7600: LD_VAR 0 2
7604: PPUSH
7605: CALL_OW 81
7609: PUSH
7610: LD_INT 1
7612: EQUAL
7613: PUSH
7614: LD_VAR 0 2
7618: PPUSH
7619: LD_VAR 0 1
7623: PPUSH
7624: CALL_OW 81
7628: PUSH
7629: LD_INT 1
7631: EQUAL
7632: AND
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 83
7643: AND
7644: PUSH
7645: LD_VAR 0 2
7649: PPUSH
7650: CALL_OW 83
7654: AND
7655: IFFALSE 7665
// Result := true ;
7657: LD_ADDR_VAR 0 3
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// end ;
7665: LD_VAR 0 3
7669: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7670: CALL 7352 0 0
7674: IFFALSE 7683
7676: GO 7678
7678: DISABLE
// YouLostInMultiplayer ;
7679: CALL_OW 107
7683: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7684: CALL 7352 0 0
7688: IFFALSE 7712
7690: GO 7692
7692: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7693: LD_EXP 22
7697: PUSH
7698: LD_OWVAR 2
7702: ARRAY
7703: PPUSH
7704: CALL 12167 0 1
// YouWinInMultiplayer ;
7708: CALL_OW 106
// end ;
7712: END
// every 0 0$3 marked 98 do var i , CanWin ;
7713: GO 7715
7715: DISABLE
7716: LD_INT 0
7718: PPUSH
7719: PPUSH
// begin if not HasPower ( your_side ) then
7720: LD_OWVAR 2
7724: PPUSH
7725: CALL 7416 0 1
7729: NOT
7730: IFFALSE 7741
// begin Multiplayer_Loose_Message ;
7732: CALL_OW 521
// enable ( 400 ) ;
7736: LD_INT 400
7738: ENABLE_MARKED
// end else
7739: GO 7874
// begin CanWin := true ;
7741: LD_ADDR_VAR 0 2
7745: PUSH
7746: LD_INT 1
7748: ST_TO_ADDR
// for i := 1 to 8 do
7749: LD_ADDR_VAR 0 1
7753: PUSH
7754: DOUBLE
7755: LD_INT 1
7757: DEC
7758: ST_TO_ADDR
7759: LD_INT 8
7761: PUSH
7762: FOR_TO
7763: IFFALSE 7860
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7765: LD_EXP 21
7769: PUSH
7770: LD_VAR 0 1
7774: ARRAY
7775: PUSH
7776: LD_VAR 0 1
7780: PPUSH
7781: CALL_OW 108
7785: AND
7786: PUSH
7787: LD_VAR 0 1
7791: PUSH
7792: LD_OWVAR 2
7796: NONEQUAL
7797: AND
7798: IFFALSE 7858
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7800: LD_EXP 19
7804: PUSH
7805: LD_VAR 0 1
7809: ARRAY
7810: NOT
7811: PUSH
7812: LD_EXP 19
7816: PUSH
7817: LD_VAR 0 1
7821: ARRAY
7822: PUSH
7823: LD_EXP 19
7827: PUSH
7828: LD_OWVAR 2
7832: ARRAY
7833: NONEQUAL
7834: OR
7835: IFFALSE 7858
// if HasPower ( i ) then
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL 7416 0 1
7846: IFFALSE 7858
// begin CanWin := false ;
7848: LD_ADDR_VAR 0 2
7852: PUSH
7853: LD_INT 0
7855: ST_TO_ADDR
// break ;
7856: GO 7860
// end ;
7858: GO 7762
7860: POP
7861: POP
// if CanWin then
7862: LD_VAR 0 2
7866: IFFALSE 7873
// enable ( 401 ) else
7868: LD_INT 401
7870: ENABLE_MARKED
7871: GO 7874
// enable ;
7873: ENABLE
// end ; end ;
7874: PPOPN 2
7876: END
// every 0 0$3 marked 99 do var i , CanWin ;
7877: GO 7879
7879: DISABLE
7880: LD_INT 0
7882: PPUSH
7883: PPUSH
// begin if not HasPower ( your_side ) then
7884: LD_OWVAR 2
7888: PPUSH
7889: CALL 7416 0 1
7893: NOT
7894: IFFALSE 7905
// begin Multiplayer_Loose_Message ;
7896: CALL_OW 521
// enable ( 400 ) ;
7900: LD_INT 400
7902: ENABLE_MARKED
// end else
7903: GO 8018
// begin CanWin := true ;
7905: LD_ADDR_VAR 0 2
7909: PUSH
7910: LD_INT 1
7912: ST_TO_ADDR
// for i := 1 to 8 do
7913: LD_ADDR_VAR 0 1
7917: PUSH
7918: DOUBLE
7919: LD_INT 1
7921: DEC
7922: ST_TO_ADDR
7923: LD_INT 8
7925: PUSH
7926: FOR_TO
7927: IFFALSE 8004
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7929: LD_EXP 21
7933: PUSH
7934: LD_VAR 0 1
7938: ARRAY
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 108
7949: AND
7950: PUSH
7951: LD_VAR 0 1
7955: PUSH
7956: LD_OWVAR 2
7960: NONEQUAL
7961: AND
7962: IFFALSE 8002
// if not AlliedSides ( i , your_side ) then
7964: LD_VAR 0 1
7968: PPUSH
7969: LD_OWVAR 2
7973: PPUSH
7974: CALL 7584 0 2
7978: NOT
7979: IFFALSE 8002
// if HasPower ( i ) then
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL 7416 0 1
7990: IFFALSE 8002
// begin CanWin := false ;
7992: LD_ADDR_VAR 0 2
7996: PUSH
7997: LD_INT 0
7999: ST_TO_ADDR
// break ;
8000: GO 8004
// end ;
8002: GO 7926
8004: POP
8005: POP
// if CanWin then
8006: LD_VAR 0 2
8010: IFFALSE 8017
// enable ( 401 ) else
8012: LD_INT 401
8014: ENABLE_MARKED
8015: GO 8018
// enable ;
8017: ENABLE
// end ; end ; end_of_file
8018: PPOPN 2
8020: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8021: LD_INT 0
8023: PPUSH
8024: PPUSH
// for un in battle_flags_id do
8025: LD_ADDR_VAR 0 2
8029: PUSH
8030: LD_EXP 32
8034: PUSH
8035: FOR_IN
8036: IFFALSE 8111
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8038: LD_VAR 0 2
8042: PPUSH
8043: LD_INT 1
8045: PUSH
8046: LD_LOC 17
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 2
8057: PUSH
8058: LD_LOC 17
8062: PUSH
8063: LD_INT 2
8065: DIV
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: LD_LOC 17
8078: PUSH
8079: LD_INT 5
8081: DIV
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 20
8089: PUSH
8090: LD_LOC 17
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: PPUSH
8105: CALL_OW 423
8109: GO 8035
8111: POP
8112: POP
// end ;
8113: LD_VAR 0 1
8117: RET
// every 1 do var un ;
8118: GO 8120
8120: DISABLE
8121: LD_INT 0
8123: PPUSH
// begin if not def_morale_flags then
8124: LD_EXP 44
8128: NOT
8129: IFFALSE 8133
// exit ;
8131: GO 8210
// if not morale_decreasing_time then
8133: LD_EXP 10
8137: NOT
8138: IFFALSE 8142
// exit ;
8140: GO 8210
// strength = 100 ;
8142: LD_ADDR_LOC 17
8146: PUSH
8147: LD_INT 100
8149: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8150: LD_EXP 10
8154: PPUSH
8155: CALL_OW 67
// strength := strength - 1 ;
8159: LD_ADDR_LOC 17
8163: PUSH
8164: LD_LOC 17
8168: PUSH
8169: LD_INT 1
8171: MINUS
8172: ST_TO_ADDR
// Update_Flags ;
8173: CALL 8021 0 0
// until not strength ;
8177: LD_LOC 17
8181: NOT
8182: IFFALSE 8150
// for un in battle_flags_id do
8184: LD_ADDR_VAR 0 1
8188: PUSH
8189: LD_EXP 32
8193: PUSH
8194: FOR_IN
8195: IFFALSE 8208
// KillBattleFlag ( un ) ;
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 419
8206: GO 8194
8208: POP
8209: POP
// end ; end_of_file
8210: PPOPN 1
8212: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8213: LD_INT 0
8215: PPUSH
8216: PPUSH
8217: PPUSH
// enable ( 600 ) ;
8218: LD_INT 600
8220: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8221: LD_ADDR_VAR 0 2
8225: PUSH
8226: DOUBLE
8227: LD_INT 1
8229: DEC
8230: ST_TO_ADDR
8231: LD_EXP 33
8235: PUSH
8236: FOR_TO
8237: IFFALSE 8392
// if Position_Sides [ i ] then
8239: LD_EXP 24
8243: PUSH
8244: LD_VAR 0 2
8248: ARRAY
8249: IFFALSE 8390
// for j := 1 to 8 do
8251: LD_ADDR_VAR 0 3
8255: PUSH
8256: DOUBLE
8257: LD_INT 1
8259: DEC
8260: ST_TO_ADDR
8261: LD_INT 8
8263: PUSH
8264: FOR_TO
8265: IFFALSE 8388
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8267: LD_EXP 21
8271: PUSH
8272: LD_VAR 0 3
8276: ARRAY
8277: PUSH
8278: LD_EXP 19
8282: PUSH
8283: LD_EXP 24
8287: PUSH
8288: LD_VAR 0 2
8292: ARRAY
8293: ARRAY
8294: PUSH
8295: LD_EXP 19
8299: PUSH
8300: LD_VAR 0 3
8304: ARRAY
8305: NONEQUAL
8306: PUSH
8307: LD_EXP 23
8311: NOT
8312: PUSH
8313: LD_EXP 24
8317: PUSH
8318: LD_VAR 0 2
8322: ARRAY
8323: PUSH
8324: LD_VAR 0 3
8328: NONEQUAL
8329: AND
8330: OR
8331: AND
8332: IFFALSE 8356
// HideArea ( j , BuildUpAreas [ i ] ) else
8334: LD_VAR 0 3
8338: PPUSH
8339: LD_EXP 33
8343: PUSH
8344: LD_VAR 0 2
8348: ARRAY
8349: PPUSH
8350: CALL_OW 333
8354: GO 8386
// if ( j = your_side ) then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_OWVAR 2
8365: EQUAL
8366: IFFALSE 8386
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8368: LD_EXP 33
8372: PUSH
8373: LD_VAR 0 2
8377: ARRAY
8378: PPUSH
8379: LD_INT 5
8381: PPUSH
8382: CALL_OW 424
8386: GO 8264
8388: POP
8389: POP
8390: GO 8236
8392: POP
8393: POP
// end ;
8394: LD_VAR 0 1
8398: RET
// export function EndBuildUp ; var i , j ; begin
8399: LD_INT 0
8401: PPUSH
8402: PPUSH
8403: PPUSH
// disable ( 600 ) ;
8404: LD_INT 600
8406: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
8407: LD_ADDR_VAR 0 2
8411: PUSH
8412: DOUBLE
8413: LD_INT 1
8415: DEC
8416: ST_TO_ADDR
8417: LD_EXP 33
8421: PUSH
8422: FOR_TO
8423: IFFALSE 8578
// if Position_Sides [ i ] then
8425: LD_EXP 24
8429: PUSH
8430: LD_VAR 0 2
8434: ARRAY
8435: IFFALSE 8576
// for j := 1 to 8 do
8437: LD_ADDR_VAR 0 3
8441: PUSH
8442: DOUBLE
8443: LD_INT 1
8445: DEC
8446: ST_TO_ADDR
8447: LD_INT 8
8449: PUSH
8450: FOR_TO
8451: IFFALSE 8574
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8453: LD_EXP 21
8457: PUSH
8458: LD_VAR 0 3
8462: ARRAY
8463: PUSH
8464: LD_EXP 19
8468: PUSH
8469: LD_EXP 24
8473: PUSH
8474: LD_VAR 0 2
8478: ARRAY
8479: ARRAY
8480: PUSH
8481: LD_EXP 19
8485: PUSH
8486: LD_VAR 0 3
8490: ARRAY
8491: NONEQUAL
8492: PUSH
8493: LD_EXP 23
8497: NOT
8498: PUSH
8499: LD_EXP 24
8503: PUSH
8504: LD_VAR 0 2
8508: ARRAY
8509: PUSH
8510: LD_VAR 0 3
8514: NONEQUAL
8515: AND
8516: OR
8517: AND
8518: IFFALSE 8542
// ShowArea ( j , BuildUpAreas [ i ] ) else
8520: LD_VAR 0 3
8524: PPUSH
8525: LD_EXP 33
8529: PUSH
8530: LD_VAR 0 2
8534: ARRAY
8535: PPUSH
8536: CALL_OW 334
8540: GO 8572
// if ( j = your_side ) then
8542: LD_VAR 0 3
8546: PUSH
8547: LD_OWVAR 2
8551: EQUAL
8552: IFFALSE 8572
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
8554: LD_EXP 33
8558: PUSH
8559: LD_VAR 0 2
8563: ARRAY
8564: PPUSH
8565: LD_INT 0
8567: PPUSH
8568: CALL_OW 424
8572: GO 8450
8574: POP
8575: POP
8576: GO 8422
8578: POP
8579: POP
// end ;
8580: LD_VAR 0 1
8584: RET
// every 5 marked 600 do var i , un ;
8585: GO 8587
8587: DISABLE
8588: LD_INT 0
8590: PPUSH
8591: PPUSH
// begin for i := 1 to BuildUpAreas do
8592: LD_ADDR_VAR 0 1
8596: PUSH
8597: DOUBLE
8598: LD_INT 1
8600: DEC
8601: ST_TO_ADDR
8602: LD_EXP 33
8606: PUSH
8607: FOR_TO
8608: IFFALSE 8763
// if Position_Sides [ i ] then
8610: LD_EXP 24
8614: PUSH
8615: LD_VAR 0 1
8619: ARRAY
8620: IFFALSE 8761
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8622: LD_ADDR_VAR 0 2
8626: PUSH
8627: LD_EXP 33
8631: PUSH
8632: LD_VAR 0 1
8636: ARRAY
8637: PPUSH
8638: LD_INT 2
8640: PUSH
8641: LD_INT 21
8643: PUSH
8644: LD_INT 1
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 21
8653: PUSH
8654: LD_INT 2
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: PUSH
8666: LD_INT 22
8668: PUSH
8669: LD_OWVAR 2
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 70
8686: PUSH
8687: FOR_IN
8688: IFFALSE 8759
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
8690: LD_EXP 19
8694: PUSH
8695: LD_EXP 24
8699: PUSH
8700: LD_VAR 0 1
8704: ARRAY
8705: ARRAY
8706: PUSH
8707: LD_EXP 19
8711: PUSH
8712: LD_OWVAR 2
8716: ARRAY
8717: NONEQUAL
8718: PUSH
8719: LD_EXP 23
8723: NOT
8724: PUSH
8725: LD_EXP 24
8729: PUSH
8730: LD_VAR 0 1
8734: ARRAY
8735: PUSH
8736: LD_OWVAR 2
8740: NONEQUAL
8741: AND
8742: OR
8743: IFFALSE 8757
// ComMoveToArea ( un , BuildUpEscape ) ;
8745: LD_VAR 0 2
8749: PPUSH
8750: LD_INT 13
8752: PPUSH
8753: CALL_OW 113
8757: GO 8687
8759: POP
8760: POP
8761: GO 8607
8763: POP
8764: POP
// enable ;
8765: ENABLE
// end ;
8766: PPOPN 2
8768: END
// every 5 5$00 do
8769: GO 8771
8771: DISABLE
// if ( def_builduptime = 1 ) then
8772: LD_EXP 49
8776: PUSH
8777: LD_INT 1
8779: EQUAL
8780: IFFALSE 8786
// EndBuildUp ;
8782: CALL 8399 0 0
8786: END
// every 10 10$00 do
8787: GO 8789
8789: DISABLE
// if ( def_builduptime = 2 ) then
8790: LD_EXP 49
8794: PUSH
8795: LD_INT 2
8797: EQUAL
8798: IFFALSE 8804
// EndBuildUp ;
8800: CALL 8399 0 0
8804: END
// every 15 15$00 do
8805: GO 8807
8807: DISABLE
// if ( def_builduptime = 3 ) then
8808: LD_EXP 49
8812: PUSH
8813: LD_INT 3
8815: EQUAL
8816: IFFALSE 8822
// EndBuildUp ; end_of_file
8818: CALL 8399 0 0
8822: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
8823: LD_INT 0
8825: PPUSH
8826: PPUSH
// if ( not IAmSpec ) then
8827: CALL_OW 531
8831: NOT
8832: IFFALSE 8848
// Result := Limits_Info ^  ;
8834: LD_ADDR_VAR 0 1
8838: PUSH
8839: LD_LOC 29
8843: PUSH
8844: LD_STRING 
8846: ADD
8847: ST_TO_ADDR
// for i := 1 to 8 do
8848: LD_ADDR_VAR 0 2
8852: PUSH
8853: DOUBLE
8854: LD_INT 1
8856: DEC
8857: ST_TO_ADDR
8858: LD_INT 8
8860: PUSH
8861: FOR_TO
8862: IFFALSE 8907
// if Cheaters [ i ] then
8864: LD_LOC 30
8868: PUSH
8869: LD_VAR 0 2
8873: ARRAY
8874: IFFALSE 8905
// Result := Result ^ [ #Cheater , i , i ] ;
8876: LD_ADDR_VAR 0 1
8880: PUSH
8881: LD_VAR 0 1
8885: PUSH
8886: LD_STRING #Cheater
8888: PUSH
8889: LD_VAR 0 2
8893: PUSH
8894: LD_VAR 0 2
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: LIST
8903: ADD
8904: ST_TO_ADDR
8905: GO 8861
8907: POP
8908: POP
// end ;
8909: LD_VAR 0 1
8913: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
8914: LD_INT 0
8916: PPUSH
8917: PPUSH
8918: PPUSH
8919: PPUSH
8920: PPUSH
// case Game_Type of 10 :
8921: LD_EXP 34
8925: PUSH
8926: LD_INT 10
8928: DOUBLE
8929: EQUAL
8930: IFTRUE 8934
8932: GO 8945
8934: POP
// def_game_rules := 1 ; 11 :
8935: LD_ADDR_EXP 35
8939: PUSH
8940: LD_INT 1
8942: ST_TO_ADDR
8943: GO 8965
8945: LD_INT 11
8947: DOUBLE
8948: EQUAL
8949: IFTRUE 8953
8951: GO 8964
8953: POP
// def_game_rules := 3 ; end ;
8954: LD_ADDR_EXP 35
8958: PUSH
8959: LD_INT 3
8961: ST_TO_ADDR
8962: GO 8965
8964: POP
// case def_game_rules of 0 :
8965: LD_EXP 35
8969: PUSH
8970: LD_INT 0
8972: DOUBLE
8973: EQUAL
8974: IFTRUE 8978
8976: GO 8983
8978: POP
// exit ; 1 :
8979: GO 11041
8981: GO 10941
8983: LD_INT 1
8985: DOUBLE
8986: EQUAL
8987: IFTRUE 8991
8989: GO 9207
8991: POP
// begin def_base_level := 2 ;
8992: LD_ADDR_EXP 36
8996: PUSH
8997: LD_INT 2
8999: ST_TO_ADDR
// def_amount_of_people := 2 ;
9000: LD_ADDR_EXP 37
9004: PUSH
9005: LD_INT 2
9007: ST_TO_ADDR
// def_skill_level := 1 ;
9008: LD_ADDR_EXP 38
9012: PUSH
9013: LD_INT 1
9015: ST_TO_ADDR
// def_starting_resources := 2 ;
9016: LD_ADDR_EXP 39
9020: PUSH
9021: LD_INT 2
9023: ST_TO_ADDR
// def_shipments_density := 1 ;
9024: LD_ADDR_EXP 40
9028: PUSH
9029: LD_INT 1
9031: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9032: LD_ADDR_EXP 41
9036: PUSH
9037: LD_INT 0
9039: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9040: LD_ADDR_EXP 42
9044: PUSH
9045: LD_INT 1
9047: ST_TO_ADDR
// def_shared_vision := 1 ;
9048: LD_ADDR_EXP 43
9052: PUSH
9053: LD_INT 1
9055: ST_TO_ADDR
// def_morale_flags := 3 ;
9056: LD_ADDR_EXP 44
9060: PUSH
9061: LD_INT 3
9063: ST_TO_ADDR
// def_siberite_detection := 1 ;
9064: LD_ADDR_EXP 45
9068: PUSH
9069: LD_INT 1
9071: ST_TO_ADDR
// def_people_respawning := 1 ;
9072: LD_ADDR_EXP 46
9076: PUSH
9077: LD_INT 1
9079: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9080: LD_ADDR_EXP 47
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9088: LD_ADDR_EXP 48
9092: PUSH
9093: LD_INT 0
9095: ST_TO_ADDR
// def_builduptime := 2 ;
9096: LD_ADDR_EXP 49
9100: PUSH
9101: LD_INT 2
9103: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9104: LD_ADDR_VAR 0 2
9108: PUSH
9109: EMPTY
9110: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9111: LD_ADDR_VAR 0 3
9115: PUSH
9116: EMPTY
9117: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9118: LD_ADDR_LOC 24
9122: PUSH
9123: EMPTY
9124: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9125: LD_ADDR_LOC 25
9129: PUSH
9130: EMPTY
9131: ST_TO_ADDR
// Banned_Controls := [ ] ;
9132: LD_ADDR_LOC 26
9136: PUSH
9137: EMPTY
9138: ST_TO_ADDR
// Banned_Engines := [ ] ;
9139: LD_ADDR_LOC 27
9143: PUSH
9144: EMPTY
9145: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9146: LD_ADDR_LOC 22
9150: PUSH
9151: LD_INT 37
9153: PUSH
9154: EMPTY
9155: LIST
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: LD_INT 5
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: PUSH
9167: LD_INT 31
9169: PUSH
9170: LD_INT 32
9172: PUSH
9173: LD_INT 33
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: LIST
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9186: LD_ADDR_LOC 23
9190: PUSH
9191: LD_INT 2
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 4
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: ST_TO_ADDR
// end ; 2 :
9205: GO 10941
9207: LD_INT 2
9209: DOUBLE
9210: EQUAL
9211: IFTRUE 9215
9213: GO 9424
9215: POP
// begin def_base_level := 1 ;
9216: LD_ADDR_EXP 36
9220: PUSH
9221: LD_INT 1
9223: ST_TO_ADDR
// def_amount_of_people := 2 ;
9224: LD_ADDR_EXP 37
9228: PUSH
9229: LD_INT 2
9231: ST_TO_ADDR
// def_skill_level := 3 ;
9232: LD_ADDR_EXP 38
9236: PUSH
9237: LD_INT 3
9239: ST_TO_ADDR
// def_starting_resources := 3 ;
9240: LD_ADDR_EXP 39
9244: PUSH
9245: LD_INT 3
9247: ST_TO_ADDR
// def_shipments_density := 2 ;
9248: LD_ADDR_EXP 40
9252: PUSH
9253: LD_INT 2
9255: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9256: LD_ADDR_EXP 41
9260: PUSH
9261: LD_INT 1
9263: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9264: LD_ADDR_EXP 42
9268: PUSH
9269: LD_INT 2
9271: ST_TO_ADDR
// def_shared_vision := 1 ;
9272: LD_ADDR_EXP 43
9276: PUSH
9277: LD_INT 1
9279: ST_TO_ADDR
// def_morale_flags := 0 ;
9280: LD_ADDR_EXP 44
9284: PUSH
9285: LD_INT 0
9287: ST_TO_ADDR
// def_siberite_detection := 1 ;
9288: LD_ADDR_EXP 45
9292: PUSH
9293: LD_INT 1
9295: ST_TO_ADDR
// def_people_respawning := 0 ;
9296: LD_ADDR_EXP 46
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9304: LD_ADDR_EXP 47
9308: PUSH
9309: LD_INT 0
9311: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9312: LD_ADDR_EXP 48
9316: PUSH
9317: LD_INT 0
9319: ST_TO_ADDR
// def_builduptime := 2 ;
9320: LD_ADDR_EXP 49
9324: PUSH
9325: LD_INT 2
9327: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9328: LD_ADDR_VAR 0 2
9332: PUSH
9333: LD_INT 1
9335: PUSH
9336: EMPTY
9337: LIST
9338: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: EMPTY
9345: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9346: LD_ADDR_LOC 24
9350: PUSH
9351: EMPTY
9352: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9353: LD_ADDR_LOC 25
9357: PUSH
9358: EMPTY
9359: ST_TO_ADDR
// Banned_Controls := [ ] ;
9360: LD_ADDR_LOC 26
9364: PUSH
9365: EMPTY
9366: ST_TO_ADDR
// Banned_Engines := [ ] ;
9367: LD_ADDR_LOC 27
9371: PUSH
9372: EMPTY
9373: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9374: LD_ADDR_LOC 22
9378: PUSH
9379: LD_INT 4
9381: PUSH
9382: LD_INT 5
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 31
9391: PUSH
9392: LD_INT 32
9394: PUSH
9395: LD_INT 33
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: LIST
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9407: LD_ADDR_LOC 23
9411: PUSH
9412: LD_INT 1
9414: PUSH
9415: LD_INT 2
9417: PUSH
9418: EMPTY
9419: LIST
9420: LIST
9421: ST_TO_ADDR
// end ; 3 :
9422: GO 10941
9424: LD_INT 3
9426: DOUBLE
9427: EQUAL
9428: IFTRUE 9432
9430: GO 9675
9432: POP
// begin def_base_level := 1 ;
9433: LD_ADDR_EXP 36
9437: PUSH
9438: LD_INT 1
9440: ST_TO_ADDR
// def_amount_of_people := 2 ;
9441: LD_ADDR_EXP 37
9445: PUSH
9446: LD_INT 2
9448: ST_TO_ADDR
// def_skill_level := 3 ;
9449: LD_ADDR_EXP 38
9453: PUSH
9454: LD_INT 3
9456: ST_TO_ADDR
// def_starting_resources := 3 ;
9457: LD_ADDR_EXP 39
9461: PUSH
9462: LD_INT 3
9464: ST_TO_ADDR
// def_shipments_density := 1 ;
9465: LD_ADDR_EXP 40
9469: PUSH
9470: LD_INT 1
9472: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9473: LD_ADDR_EXP 41
9477: PUSH
9478: LD_INT 0
9480: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9481: LD_ADDR_EXP 42
9485: PUSH
9486: LD_INT 1
9488: ST_TO_ADDR
// def_shared_vision := 1 ;
9489: LD_ADDR_EXP 43
9493: PUSH
9494: LD_INT 1
9496: ST_TO_ADDR
// def_morale_flags := 0 ;
9497: LD_ADDR_EXP 44
9501: PUSH
9502: LD_INT 0
9504: ST_TO_ADDR
// def_siberite_detection := 1 ;
9505: LD_ADDR_EXP 45
9509: PUSH
9510: LD_INT 1
9512: ST_TO_ADDR
// def_people_respawning := 0 ;
9513: LD_ADDR_EXP 46
9517: PUSH
9518: LD_INT 0
9520: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9521: LD_ADDR_EXP 47
9525: PUSH
9526: LD_INT 2
9528: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9529: LD_ADDR_EXP 48
9533: PUSH
9534: LD_INT 0
9536: ST_TO_ADDR
// def_builduptime := 1 ;
9537: LD_ADDR_EXP 49
9541: PUSH
9542: LD_INT 1
9544: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9545: LD_ADDR_VAR 0 2
9549: PUSH
9550: LD_INT 23
9552: PUSH
9553: EMPTY
9554: LIST
9555: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
9556: LD_ADDR_VAR 0 3
9560: PUSH
9561: LD_INT 2
9563: PUSH
9564: LD_INT 37
9566: PUSH
9567: LD_INT 32
9569: PUSH
9570: LD_INT 33
9572: PUSH
9573: LD_INT 36
9575: PUSH
9576: LD_INT 16
9578: PUSH
9579: LD_INT 23
9581: PUSH
9582: LD_INT 21
9584: PUSH
9585: LD_INT 18
9587: PUSH
9588: LD_INT 22
9590: PUSH
9591: LD_INT 20
9593: PUSH
9594: LD_INT 19
9596: PUSH
9597: LD_INT 25
9599: PUSH
9600: LD_INT 17
9602: PUSH
9603: LD_INT 24
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9623: LD_ADDR_LOC 24
9627: PUSH
9628: EMPTY
9629: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9630: LD_ADDR_LOC 25
9634: PUSH
9635: EMPTY
9636: ST_TO_ADDR
// Banned_Controls := [ ] ;
9637: LD_ADDR_LOC 26
9641: PUSH
9642: EMPTY
9643: ST_TO_ADDR
// Banned_Engines := [ ] ;
9644: LD_ADDR_LOC 27
9648: PUSH
9649: EMPTY
9650: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9651: LD_ADDR_LOC 22
9655: PUSH
9656: EMPTY
9657: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9658: LD_ADDR_LOC 23
9662: PUSH
9663: EMPTY
9664: ST_TO_ADDR
// No_Mechs := true ;
9665: LD_ADDR_EXP 50
9669: PUSH
9670: LD_INT 1
9672: ST_TO_ADDR
// end ; 4 :
9673: GO 10941
9675: LD_INT 4
9677: DOUBLE
9678: EQUAL
9679: IFTRUE 9683
9681: GO 9858
9683: POP
// begin def_base_level := 1 ;
9684: LD_ADDR_EXP 36
9688: PUSH
9689: LD_INT 1
9691: ST_TO_ADDR
// def_amount_of_people := 2 ;
9692: LD_ADDR_EXP 37
9696: PUSH
9697: LD_INT 2
9699: ST_TO_ADDR
// def_skill_level := 3 ;
9700: LD_ADDR_EXP 38
9704: PUSH
9705: LD_INT 3
9707: ST_TO_ADDR
// def_starting_resources := 3 ;
9708: LD_ADDR_EXP 39
9712: PUSH
9713: LD_INT 3
9715: ST_TO_ADDR
// def_shipments_density := 2 ;
9716: LD_ADDR_EXP 40
9720: PUSH
9721: LD_INT 2
9723: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9724: LD_ADDR_EXP 41
9728: PUSH
9729: LD_INT 1
9731: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9732: LD_ADDR_EXP 42
9736: PUSH
9737: LD_INT 2
9739: ST_TO_ADDR
// def_shared_vision := 1 ;
9740: LD_ADDR_EXP 43
9744: PUSH
9745: LD_INT 1
9747: ST_TO_ADDR
// def_morale_flags := 0 ;
9748: LD_ADDR_EXP 44
9752: PUSH
9753: LD_INT 0
9755: ST_TO_ADDR
// def_siberite_detection := 1 ;
9756: LD_ADDR_EXP 45
9760: PUSH
9761: LD_INT 1
9763: ST_TO_ADDR
// def_people_respawning := 0 ;
9764: LD_ADDR_EXP 46
9768: PUSH
9769: LD_INT 0
9771: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9772: LD_ADDR_EXP 47
9776: PUSH
9777: LD_INT 0
9779: ST_TO_ADDR
// def_siberite_bomb := 1 ;
9780: LD_ADDR_EXP 48
9784: PUSH
9785: LD_INT 1
9787: ST_TO_ADDR
// def_builduptime := 3 ;
9788: LD_ADDR_EXP 49
9792: PUSH
9793: LD_INT 3
9795: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9796: LD_ADDR_VAR 0 2
9800: PUSH
9801: LD_INT 1
9803: PUSH
9804: EMPTY
9805: LIST
9806: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9807: LD_ADDR_VAR 0 3
9811: PUSH
9812: EMPTY
9813: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9814: LD_ADDR_LOC 24
9818: PUSH
9819: EMPTY
9820: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9821: LD_ADDR_LOC 25
9825: PUSH
9826: EMPTY
9827: ST_TO_ADDR
// Banned_Controls := [ ] ;
9828: LD_ADDR_LOC 26
9832: PUSH
9833: EMPTY
9834: ST_TO_ADDR
// Banned_Engines := [ ] ;
9835: LD_ADDR_LOC 27
9839: PUSH
9840: EMPTY
9841: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9842: LD_ADDR_LOC 22
9846: PUSH
9847: EMPTY
9848: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9849: LD_ADDR_LOC 23
9853: PUSH
9854: EMPTY
9855: ST_TO_ADDR
// end ; 5 :
9856: GO 10941
9858: LD_INT 5
9860: DOUBLE
9861: EQUAL
9862: IFTRUE 9866
9864: GO 10115
9866: POP
// begin def_base_level := 0 ;
9867: LD_ADDR_EXP 36
9871: PUSH
9872: LD_INT 0
9874: ST_TO_ADDR
// def_amount_of_people := 0 ;
9875: LD_ADDR_EXP 37
9879: PUSH
9880: LD_INT 0
9882: ST_TO_ADDR
// def_skill_level := 0 ;
9883: LD_ADDR_EXP 38
9887: PUSH
9888: LD_INT 0
9890: ST_TO_ADDR
// def_starting_resources := 0 ;
9891: LD_ADDR_EXP 39
9895: PUSH
9896: LD_INT 0
9898: ST_TO_ADDR
// def_shipments_density := 0 ;
9899: LD_ADDR_EXP 40
9903: PUSH
9904: LD_INT 0
9906: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9907: LD_ADDR_EXP 41
9911: PUSH
9912: LD_INT 0
9914: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
9915: LD_ADDR_EXP 42
9919: PUSH
9920: LD_INT 0
9922: ST_TO_ADDR
// def_shared_vision := 1 ;
9923: LD_ADDR_EXP 43
9927: PUSH
9928: LD_INT 1
9930: ST_TO_ADDR
// def_morale_flags := 0 ;
9931: LD_ADDR_EXP 44
9935: PUSH
9936: LD_INT 0
9938: ST_TO_ADDR
// def_siberite_detection := 0 ;
9939: LD_ADDR_EXP 45
9943: PUSH
9944: LD_INT 0
9946: ST_TO_ADDR
// def_people_respawning := 1 ;
9947: LD_ADDR_EXP 46
9951: PUSH
9952: LD_INT 1
9954: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9955: LD_ADDR_EXP 47
9959: PUSH
9960: LD_INT 1
9962: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9963: LD_ADDR_EXP 48
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// def_builduptime := 0 ;
9971: LD_ADDR_EXP 49
9975: PUSH
9976: LD_INT 0
9978: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
9979: LD_ADDR_VAR 0 2
9983: PUSH
9984: LD_INT 10
9986: PUSH
9987: LD_INT 3
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
9994: LD_ADDR_VAR 0 3
9998: PUSH
9999: LD_INT 12
10001: PUSH
10002: LD_INT 11
10004: PUSH
10005: LD_INT 14
10007: PUSH
10008: LD_INT 13
10010: PUSH
10011: LD_INT 5
10013: PUSH
10014: LD_INT 24
10016: PUSH
10017: LD_INT 21
10019: PUSH
10020: LD_INT 33
10022: PUSH
10023: LD_INT 36
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10037: LD_ADDR_LOC 24
10041: PUSH
10042: LD_INT 31
10044: PUSH
10045: EMPTY
10046: LIST
10047: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10048: LD_ADDR_LOC 25
10052: PUSH
10053: EMPTY
10054: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10055: LD_ADDR_LOC 26
10059: PUSH
10060: LD_INT 2
10062: PUSH
10063: EMPTY
10064: LIST
10065: ST_TO_ADDR
// Banned_Engines := [ ] ;
10066: LD_ADDR_LOC 27
10070: PUSH
10071: EMPTY
10072: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10073: LD_ADDR_LOC 22
10077: PUSH
10078: LD_INT 4
10080: PUSH
10081: EMPTY
10082: LIST
10083: PUSH
10084: LD_INT 31
10086: PUSH
10087: LD_INT 32
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10098: LD_ADDR_LOC 23
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: LD_INT 1
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: ST_TO_ADDR
// end ; 6 :
10113: GO 10941
10115: LD_INT 6
10117: DOUBLE
10118: EQUAL
10119: IFTRUE 10123
10121: GO 10326
10123: POP
// begin def_base_level := 1 ;
10124: LD_ADDR_EXP 36
10128: PUSH
10129: LD_INT 1
10131: ST_TO_ADDR
// def_amount_of_people := 2 ;
10132: LD_ADDR_EXP 37
10136: PUSH
10137: LD_INT 2
10139: ST_TO_ADDR
// def_skill_level := 3 ;
10140: LD_ADDR_EXP 38
10144: PUSH
10145: LD_INT 3
10147: ST_TO_ADDR
// def_starting_resources := 3 ;
10148: LD_ADDR_EXP 39
10152: PUSH
10153: LD_INT 3
10155: ST_TO_ADDR
// def_shipments_density := 1 ;
10156: LD_ADDR_EXP 40
10160: PUSH
10161: LD_INT 1
10163: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10164: LD_ADDR_EXP 41
10168: PUSH
10169: LD_INT 0
10171: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10172: LD_ADDR_EXP 42
10176: PUSH
10177: LD_INT 1
10179: ST_TO_ADDR
// def_shared_vision := 1 ;
10180: LD_ADDR_EXP 43
10184: PUSH
10185: LD_INT 1
10187: ST_TO_ADDR
// def_morale_flags := 0 ;
10188: LD_ADDR_EXP 44
10192: PUSH
10193: LD_INT 0
10195: ST_TO_ADDR
// def_siberite_detection := 1 ;
10196: LD_ADDR_EXP 45
10200: PUSH
10201: LD_INT 1
10203: ST_TO_ADDR
// def_people_respawning := 2 ;
10204: LD_ADDR_EXP 46
10208: PUSH
10209: LD_INT 2
10211: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10212: LD_ADDR_EXP 47
10216: PUSH
10217: LD_INT 1
10219: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10220: LD_ADDR_EXP 48
10224: PUSH
10225: LD_INT 0
10227: ST_TO_ADDR
// def_builduptime := 1 ;
10228: LD_ADDR_EXP 49
10232: PUSH
10233: LD_INT 1
10235: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10236: LD_ADDR_VAR 0 2
10240: PUSH
10241: LD_INT 23
10243: PUSH
10244: EMPTY
10245: LIST
10246: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10247: LD_ADDR_VAR 0 3
10251: PUSH
10252: LD_INT 2
10254: PUSH
10255: LD_INT 37
10257: PUSH
10258: LD_INT 31
10260: PUSH
10261: LD_INT 32
10263: PUSH
10264: LD_INT 33
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10274: LD_ADDR_LOC 24
10278: PUSH
10279: EMPTY
10280: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10281: LD_ADDR_LOC 25
10285: PUSH
10286: EMPTY
10287: ST_TO_ADDR
// Banned_Controls := [ ] ;
10288: LD_ADDR_LOC 26
10292: PUSH
10293: EMPTY
10294: ST_TO_ADDR
// Banned_Engines := [ ] ;
10295: LD_ADDR_LOC 27
10299: PUSH
10300: EMPTY
10301: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10302: LD_ADDR_LOC 22
10306: PUSH
10307: EMPTY
10308: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10309: LD_ADDR_LOC 23
10313: PUSH
10314: EMPTY
10315: ST_TO_ADDR
// No_Mechs := true ;
10316: LD_ADDR_EXP 50
10320: PUSH
10321: LD_INT 1
10323: ST_TO_ADDR
// end ; 7 :
10324: GO 10941
10326: LD_INT 7
10328: DOUBLE
10329: EQUAL
10330: IFTRUE 10334
10332: GO 10532
10334: POP
// begin def_base_level := 1 ;
10335: LD_ADDR_EXP 36
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// def_amount_of_people := 2 ;
10343: LD_ADDR_EXP 37
10347: PUSH
10348: LD_INT 2
10350: ST_TO_ADDR
// def_skill_level := 3 ;
10351: LD_ADDR_EXP 38
10355: PUSH
10356: LD_INT 3
10358: ST_TO_ADDR
// def_starting_resources := 3 ;
10359: LD_ADDR_EXP 39
10363: PUSH
10364: LD_INT 3
10366: ST_TO_ADDR
// def_shipments_density := 1 ;
10367: LD_ADDR_EXP 40
10371: PUSH
10372: LD_INT 1
10374: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10375: LD_ADDR_EXP 41
10379: PUSH
10380: LD_INT 1
10382: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10383: LD_ADDR_EXP 42
10387: PUSH
10388: LD_INT 2
10390: ST_TO_ADDR
// def_shared_vision := 1 ;
10391: LD_ADDR_EXP 43
10395: PUSH
10396: LD_INT 1
10398: ST_TO_ADDR
// def_morale_flags := 0 ;
10399: LD_ADDR_EXP 44
10403: PUSH
10404: LD_INT 0
10406: ST_TO_ADDR
// def_siberite_detection := 1 ;
10407: LD_ADDR_EXP 45
10411: PUSH
10412: LD_INT 1
10414: ST_TO_ADDR
// def_people_respawning := 0 ;
10415: LD_ADDR_EXP 46
10419: PUSH
10420: LD_INT 0
10422: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10423: LD_ADDR_EXP 47
10427: PUSH
10428: LD_INT 1
10430: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10431: LD_ADDR_EXP 48
10435: PUSH
10436: LD_INT 0
10438: ST_TO_ADDR
// def_builduptime := 3 ;
10439: LD_ADDR_EXP 49
10443: PUSH
10444: LD_INT 3
10446: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10447: LD_ADDR_VAR 0 2
10451: PUSH
10452: LD_INT 23
10454: PUSH
10455: EMPTY
10456: LIST
10457: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
10458: LD_ADDR_VAR 0 3
10462: PUSH
10463: LD_INT 37
10465: PUSH
10466: EMPTY
10467: LIST
10468: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10469: LD_ADDR_LOC 24
10473: PUSH
10474: EMPTY
10475: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10476: LD_ADDR_LOC 25
10480: PUSH
10481: EMPTY
10482: ST_TO_ADDR
// Banned_Controls := [ ] ;
10483: LD_ADDR_LOC 26
10487: PUSH
10488: EMPTY
10489: ST_TO_ADDR
// Banned_Engines := [ ] ;
10490: LD_ADDR_LOC 27
10494: PUSH
10495: EMPTY
10496: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10497: LD_ADDR_LOC 22
10501: PUSH
10502: LD_INT 31
10504: PUSH
10505: LD_INT 32
10507: PUSH
10508: LD_INT 33
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10519: LD_ADDR_LOC 23
10523: PUSH
10524: LD_INT 10
10526: PUSH
10527: EMPTY
10528: LIST
10529: ST_TO_ADDR
// end ; 8 :
10530: GO 10941
10532: LD_INT 8
10534: DOUBLE
10535: EQUAL
10536: IFTRUE 10540
10538: GO 10940
10540: POP
// begin def_base_level := 0 ;
10541: LD_ADDR_EXP 36
10545: PUSH
10546: LD_INT 0
10548: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
10549: LD_ADDR_EXP 37
10553: PUSH
10554: LD_INT 0
10556: PPUSH
10557: LD_INT 1
10559: PPUSH
10560: CALL_OW 12
10564: ST_TO_ADDR
// def_skill_level := 0 ;
10565: LD_ADDR_EXP 38
10569: PUSH
10570: LD_INT 0
10572: ST_TO_ADDR
// def_starting_resources := 2 ;
10573: LD_ADDR_EXP 39
10577: PUSH
10578: LD_INT 2
10580: ST_TO_ADDR
// def_shipments_density := 1 ;
10581: LD_ADDR_EXP 40
10585: PUSH
10586: LD_INT 1
10588: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10589: LD_ADDR_EXP 41
10593: PUSH
10594: LD_INT 0
10596: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10597: LD_ADDR_EXP 42
10601: PUSH
10602: LD_INT 0
10604: ST_TO_ADDR
// def_shared_vision := 1 ;
10605: LD_ADDR_EXP 43
10609: PUSH
10610: LD_INT 1
10612: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
10613: LD_ADDR_EXP 44
10617: PUSH
10618: LD_INT 0
10620: PPUSH
10621: LD_INT 2
10623: PPUSH
10624: CALL_OW 12
10628: ST_TO_ADDR
// def_siberite_detection := 0 ;
10629: LD_ADDR_EXP 45
10633: PUSH
10634: LD_INT 0
10636: ST_TO_ADDR
// def_people_respawning := 0 ;
10637: LD_ADDR_EXP 46
10641: PUSH
10642: LD_INT 0
10644: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10645: LD_ADDR_EXP 47
10649: PUSH
10650: LD_INT 2
10652: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10653: LD_ADDR_EXP 48
10657: PUSH
10658: LD_INT 0
10660: ST_TO_ADDR
// def_builduptime := 0 ;
10661: LD_ADDR_EXP 49
10665: PUSH
10666: LD_INT 0
10668: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
10669: LD_ADDR_VAR 0 2
10673: PUSH
10674: LD_INT 23
10676: PUSH
10677: LD_INT 20
10679: PUSH
10680: LD_INT 40
10682: PUSH
10683: LD_INT 47
10685: PUSH
10686: LD_INT 46
10688: PUSH
10689: LD_INT 39
10691: PUSH
10692: LD_INT 71
10694: PUSH
10695: LD_INT 34
10697: PUSH
10698: LD_INT 41
10700: PUSH
10701: LD_INT 44
10703: PUSH
10704: LD_INT 17
10706: PUSH
10707: LD_INT 16
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
10724: LD_ADDR_VAR 0 3
10728: PUSH
10729: LD_INT 37
10731: PUSH
10732: LD_INT 5
10734: PUSH
10735: LD_INT 13
10737: PUSH
10738: LD_INT 34
10740: PUSH
10741: LD_INT 12
10743: PUSH
10744: LD_INT 15
10746: PUSH
10747: LD_INT 11
10749: PUSH
10750: LD_INT 14
10752: PUSH
10753: LD_INT 29
10755: PUSH
10756: LD_INT 30
10758: PUSH
10759: LD_INT 28
10761: PUSH
10762: LD_INT 24
10764: PUSH
10765: LD_INT 25
10767: PUSH
10768: LD_INT 20
10770: PUSH
10771: LD_INT 21
10773: PUSH
10774: LD_INT 22
10776: PUSH
10777: LD_INT 36
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10799: LD_ADDR_LOC 24
10803: PUSH
10804: EMPTY
10805: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
10806: LD_ADDR_LOC 25
10810: PUSH
10811: LD_INT 14
10813: PUSH
10814: EMPTY
10815: LIST
10816: ST_TO_ADDR
// Banned_Controls := [ ] ;
10817: LD_ADDR_LOC 26
10821: PUSH
10822: EMPTY
10823: ST_TO_ADDR
// Banned_Engines := [ ] ;
10824: LD_ADDR_LOC 27
10828: PUSH
10829: EMPTY
10830: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
10831: LD_ADDR_LOC 22
10835: PUSH
10836: LD_INT 31
10838: PUSH
10839: LD_INT 32
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 4
10848: PUSH
10849: EMPTY
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
10856: LD_ADDR_LOC 23
10860: PUSH
10861: LD_INT 2
10863: PUSH
10864: LD_INT 1
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: ST_TO_ADDR
// for i := 1 to 8 do
10871: LD_ADDR_VAR 0 4
10875: PUSH
10876: DOUBLE
10877: LD_INT 1
10879: DEC
10880: ST_TO_ADDR
10881: LD_INT 8
10883: PUSH
10884: FOR_TO
10885: IFFALSE 10936
// if ( Side_Nations [ i ] = 3 ) then
10887: LD_EXP 22
10891: PUSH
10892: LD_VAR 0 4
10896: ARRAY
10897: PUSH
10898: LD_INT 3
10900: EQUAL
10901: IFFALSE 10934
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
10903: LD_ADDR_EXP 22
10907: PUSH
10908: LD_EXP 22
10912: PPUSH
10913: LD_VAR 0 4
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: LD_INT 2
10923: PPUSH
10924: CALL_OW 12
10928: PPUSH
10929: CALL_OW 1
10933: ST_TO_ADDR
10934: GO 10884
10936: POP
10937: POP
// end ; end ;
10938: GO 10941
10940: POP
// for i := 1 to 8 do
10941: LD_ADDR_VAR 0 4
10945: PUSH
10946: DOUBLE
10947: LD_INT 1
10949: DEC
10950: ST_TO_ADDR
10951: LD_INT 8
10953: PUSH
10954: FOR_TO
10955: IFFALSE 11039
// if Side_Positions [ i ] then
10957: LD_EXP 21
10961: PUSH
10962: LD_VAR 0 4
10966: ARRAY
10967: IFFALSE 11037
// begin for j in Unavailable_Techs do
10969: LD_ADDR_VAR 0 5
10973: PUSH
10974: LD_VAR 0 2
10978: PUSH
10979: FOR_IN
10980: IFFALSE 11001
// SetTech ( j , i , 0 ) ;
10982: LD_VAR 0 5
10986: PPUSH
10987: LD_VAR 0 4
10991: PPUSH
10992: LD_INT 0
10994: PPUSH
10995: CALL_OW 322
10999: GO 10979
11001: POP
11002: POP
// for j in Unavailable_Builds do
11003: LD_ADDR_VAR 0 5
11007: PUSH
11008: LD_VAR 0 3
11012: PUSH
11013: FOR_IN
11014: IFFALSE 11035
// SetRestrict ( j , i , 0 ) ;
11016: LD_VAR 0 5
11020: PPUSH
11021: LD_VAR 0 4
11025: PPUSH
11026: LD_INT 0
11028: PPUSH
11029: CALL_OW 324
11033: GO 11013
11035: POP
11036: POP
// end ;
11037: GO 10954
11039: POP
11040: POP
// end ;
11041: LD_VAR 0 1
11045: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11046: LD_INT 0
11048: PPUSH
11049: PPUSH
11050: PPUSH
11051: PPUSH
11052: PPUSH
11053: PPUSH
11054: PPUSH
// for i := 1 to Restricted_Builds do
11055: LD_ADDR_VAR 0 2
11059: PUSH
11060: DOUBLE
11061: LD_INT 1
11063: DEC
11064: ST_TO_ADDR
11065: LD_LOC 22
11069: PUSH
11070: FOR_TO
11071: IFFALSE 11381
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11073: LD_LOC 22
11077: PUSH
11078: LD_VAR 0 2
11082: ARRAY
11083: PUSH
11084: LD_INT 1
11086: ARRAY
11087: PUSH
11088: LD_INT 31
11090: DOUBLE
11091: EQUAL
11092: IFTRUE 11108
11094: LD_INT 32
11096: DOUBLE
11097: EQUAL
11098: IFTRUE 11108
11100: LD_INT 33
11102: DOUBLE
11103: EQUAL
11104: IFTRUE 11108
11106: GO 11119
11108: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11109: LD_ADDR_VAR 0 6
11113: PUSH
11114: LD_STRING #Turrets
11116: ST_TO_ADDR
11117: GO 11164
11119: LD_INT 4
11121: DOUBLE
11122: EQUAL
11123: IFTRUE 11133
11125: LD_INT 5
11127: DOUBLE
11128: EQUAL
11129: IFTRUE 11133
11131: GO 11144
11133: POP
// btype := #Armouries ; b_Behemoth :
11134: LD_ADDR_VAR 0 6
11138: PUSH
11139: LD_STRING #Armouries
11141: ST_TO_ADDR
11142: GO 11164
11144: LD_INT 37
11146: DOUBLE
11147: EQUAL
11148: IFTRUE 11152
11150: GO 11163
11152: POP
// btype := #Behemoths ; end ;
11153: LD_ADDR_VAR 0 6
11157: PUSH
11158: LD_STRING #Behemoths
11160: ST_TO_ADDR
11161: GO 11164
11163: POP
// list := [ ] ;
11164: LD_ADDR_VAR 0 7
11168: PUSH
11169: EMPTY
11170: ST_TO_ADDR
// for j := 1 to 8 do
11171: LD_ADDR_VAR 0 3
11175: PUSH
11176: DOUBLE
11177: LD_INT 1
11179: DEC
11180: ST_TO_ADDR
11181: LD_INT 8
11183: PUSH
11184: FOR_TO
11185: IFFALSE 11278
// if Side_Positions [ j ] then
11187: LD_EXP 21
11191: PUSH
11192: LD_VAR 0 3
11196: ARRAY
11197: IFFALSE 11276
// begin amount := 0 ;
11199: LD_ADDR_VAR 0 5
11203: PUSH
11204: LD_INT 0
11206: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11207: LD_ADDR_VAR 0 4
11211: PUSH
11212: LD_LOC 22
11216: PUSH
11217: LD_VAR 0 2
11221: ARRAY
11222: PUSH
11223: FOR_IN
11224: IFFALSE 11272
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11226: LD_ADDR_VAR 0 5
11230: PUSH
11231: LD_VAR 0 5
11235: PUSH
11236: LD_INT 22
11238: PUSH
11239: LD_VAR 0 3
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 30
11250: PUSH
11251: LD_VAR 0 4
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PPUSH
11264: CALL_OW 69
11268: PLUS
11269: ST_TO_ADDR
11270: GO 11223
11272: POP
11273: POP
// break ;
11274: GO 11278
// end ;
11276: GO 11184
11278: POP
11279: POP
// list := [ ] ;
11280: LD_ADDR_VAR 0 7
11284: PUSH
11285: EMPTY
11286: ST_TO_ADDR
// for j := 1 to 8 do
11287: LD_ADDR_VAR 0 3
11291: PUSH
11292: DOUBLE
11293: LD_INT 1
11295: DEC
11296: ST_TO_ADDR
11297: LD_INT 8
11299: PUSH
11300: FOR_TO
11301: IFFALSE 11321
// list := list ^ amount ;
11303: LD_ADDR_VAR 0 7
11307: PUSH
11308: LD_VAR 0 7
11312: PUSH
11313: LD_VAR 0 5
11317: ADD
11318: ST_TO_ADDR
11319: GO 11300
11321: POP
11322: POP
// Already_Built := Already_Built ^ [ list ] ;
11323: LD_ADDR_LOC 28
11327: PUSH
11328: LD_LOC 28
11332: PUSH
11333: LD_VAR 0 7
11337: PUSH
11338: EMPTY
11339: LIST
11340: ADD
11341: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11342: LD_ADDR_LOC 29
11346: PUSH
11347: LD_LOC 29
11351: PUSH
11352: LD_VAR 0 6
11356: PUSH
11357: LD_VAR 0 5
11361: PUSH
11362: LD_LOC 23
11366: PUSH
11367: LD_VAR 0 2
11371: ARRAY
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: LIST
11377: ADD
11378: ST_TO_ADDR
// end ;
11379: GO 11070
11381: POP
11382: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11383: LD_ADDR_LOC 30
11387: PUSH
11388: LD_INT 0
11390: PUSH
11391: LD_INT 0
11393: PUSH
11394: LD_INT 0
11396: PUSH
11397: LD_INT 0
11399: PUSH
11400: LD_INT 0
11402: PUSH
11403: LD_INT 0
11405: PUSH
11406: LD_INT 0
11408: PUSH
11409: LD_INT 0
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: ST_TO_ADDR
// if Limits_Info then
11422: LD_LOC 29
11426: IFFALSE 11442
// Limits_Info := #Limits ^ Limits_Info ;
11428: LD_ADDR_LOC 29
11432: PUSH
11433: LD_STRING #Limits
11435: PUSH
11436: LD_LOC 29
11440: ADD
11441: ST_TO_ADDR
// end ;
11442: LD_VAR 0 1
11446: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
11447: LD_INT 0
11449: PPUSH
11450: PPUSH
11451: PPUSH
11452: PPUSH
// for i := 1 to Restricted_Builds do
11453: LD_ADDR_VAR 0 7
11457: PUSH
11458: DOUBLE
11459: LD_INT 1
11461: DEC
11462: ST_TO_ADDR
11463: LD_LOC 22
11467: PUSH
11468: FOR_TO
11469: IFFALSE 11892
// if BType in Restricted_Builds [ i ] then
11471: LD_VAR 0 2
11475: PUSH
11476: LD_LOC 22
11480: PUSH
11481: LD_VAR 0 7
11485: ARRAY
11486: IN
11487: IFFALSE 11890
// begin if old_side then
11489: LD_VAR 0 4
11493: IFFALSE 11619
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
11495: LD_LOC 28
11499: PUSH
11500: LD_VAR 0 7
11504: ARRAY
11505: PUSH
11506: LD_VAR 0 3
11510: ARRAY
11511: PUSH
11512: LD_VAR 0 5
11516: PLUS
11517: PUSH
11518: LD_LOC 23
11522: PUSH
11523: LD_VAR 0 7
11527: ARRAY
11528: GREATER
11529: IFFALSE 11555
// begin SetSide ( un , old_side ) ;
11531: LD_VAR 0 1
11535: PPUSH
11536: LD_VAR 0 4
11540: PPUSH
11541: CALL_OW 235
// count := 0 ;
11545: LD_ADDR_VAR 0 5
11549: PUSH
11550: LD_INT 0
11552: ST_TO_ADDR
// end else
11553: GO 11619
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
11555: LD_ADDR_LOC 28
11559: PUSH
11560: LD_LOC 28
11564: PPUSH
11565: LD_VAR 0 7
11569: PPUSH
11570: LD_LOC 28
11574: PUSH
11575: LD_VAR 0 7
11579: ARRAY
11580: PPUSH
11581: LD_VAR 0 4
11585: PPUSH
11586: LD_LOC 28
11590: PUSH
11591: LD_VAR 0 7
11595: ARRAY
11596: PUSH
11597: LD_VAR 0 4
11601: ARRAY
11602: PUSH
11603: LD_VAR 0 5
11607: MINUS
11608: PPUSH
11609: CALL_OW 1
11613: PPUSH
11614: CALL_OW 1
11618: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
11619: LD_ADDR_LOC 28
11623: PUSH
11624: LD_LOC 28
11628: PPUSH
11629: LD_VAR 0 7
11633: PPUSH
11634: LD_LOC 28
11638: PUSH
11639: LD_VAR 0 7
11643: ARRAY
11644: PPUSH
11645: LD_VAR 0 3
11649: PPUSH
11650: LD_LOC 28
11654: PUSH
11655: LD_VAR 0 7
11659: ARRAY
11660: PUSH
11661: LD_VAR 0 3
11665: ARRAY
11666: PUSH
11667: LD_VAR 0 5
11671: PLUS
11672: PPUSH
11673: CALL_OW 1
11677: PPUSH
11678: CALL_OW 1
11682: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
11683: LD_VAR 0 5
11687: PUSH
11688: LD_INT 0
11690: NONEQUAL
11691: PUSH
11692: LD_VAR 0 3
11696: PUSH
11697: LD_OWVAR 2
11701: EQUAL
11702: AND
11703: IFFALSE 11746
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
11705: LD_ADDR_LOC 29
11709: PUSH
11710: LD_LOC 29
11714: PPUSH
11715: LD_INT 3
11717: PUSH
11718: LD_VAR 0 7
11722: MUL
11723: PPUSH
11724: LD_LOC 28
11728: PUSH
11729: LD_VAR 0 7
11733: ARRAY
11734: PUSH
11735: LD_VAR 0 3
11739: ARRAY
11740: PPUSH
11741: CALL_OW 1
11745: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
11746: LD_LOC 28
11750: PUSH
11751: LD_VAR 0 7
11755: ARRAY
11756: PUSH
11757: LD_VAR 0 3
11761: ARRAY
11762: PUSH
11763: LD_LOC 23
11767: PUSH
11768: LD_VAR 0 7
11772: ARRAY
11773: GREATER
11774: IFFALSE 11801
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
11776: LD_ADDR_LOC 30
11780: PUSH
11781: LD_LOC 30
11785: PPUSH
11786: LD_VAR 0 3
11790: PPUSH
11791: LD_INT 1
11793: PPUSH
11794: CALL_OW 1
11798: ST_TO_ADDR
// end else
11799: GO 11888
// begin for j := 1 to Restricted_Builds do
11801: LD_ADDR_VAR 0 8
11805: PUSH
11806: DOUBLE
11807: LD_INT 1
11809: DEC
11810: ST_TO_ADDR
11811: LD_LOC 22
11815: PUSH
11816: FOR_TO
11817: IFFALSE 11861
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
11819: LD_LOC 28
11823: PUSH
11824: LD_VAR 0 8
11828: ARRAY
11829: PUSH
11830: LD_VAR 0 3
11834: ARRAY
11835: PUSH
11836: LD_LOC 23
11840: PUSH
11841: LD_VAR 0 8
11845: ARRAY
11846: GREATER
11847: IFFALSE 11859
// begin Is_Cheater := true ;
11849: LD_ADDR_VAR 0 9
11853: PUSH
11854: LD_INT 1
11856: ST_TO_ADDR
// break ;
11857: GO 11861
// end ;
11859: GO 11816
11861: POP
11862: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
11863: LD_ADDR_LOC 30
11867: PUSH
11868: LD_LOC 30
11872: PPUSH
11873: LD_VAR 0 3
11877: PPUSH
11878: LD_VAR 0 9
11882: PPUSH
11883: CALL_OW 1
11887: ST_TO_ADDR
// end ; break ;
11888: GO 11892
// end ;
11890: GO 11468
11892: POP
11893: POP
// end ;
11894: LD_VAR 0 6
11898: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
11899: LD_VAR 0 5
11903: PUSH
11904: LD_LOC 24
11908: IN
11909: PUSH
11910: LD_VAR 0 2
11914: PUSH
11915: LD_LOC 25
11919: IN
11920: OR
11921: PUSH
11922: LD_VAR 0 4
11926: PUSH
11927: LD_LOC 26
11931: IN
11932: OR
11933: PUSH
11934: LD_VAR 0 3
11938: PUSH
11939: LD_LOC 27
11943: IN
11944: OR
11945: IFFALSE 11956
// ComCancel ( factory ) ;
11947: LD_VAR 0 1
11951: PPUSH
11952: CALL_OW 127
// end ;
11956: PPOPN 5
11958: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
11959: LD_VAR 0 2
11963: PUSH
11964: LD_LOC 24
11968: IN
11969: IFFALSE 11980
// ComCancel ( building ) ;
11971: LD_VAR 0 1
11975: PPUSH
11976: CALL_OW 127
// end ; end_of_file
11980: PPOPN 2
11982: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
11983: LD_INT 0
11985: PPUSH
11986: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
11987: LD_ADDR_VAR 0 2
11991: PUSH
11992: LD_STRING #Multi1x1-Time
11994: PUSH
11995: LD_OWVAR 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12004: LD_INT 0
12006: PUSH
12007: LD_EXP 17
12011: PUSH
12012: LD_OWVAR 1
12016: MINUS
12017: LESSEQUAL
12018: IFFALSE 12049
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12020: LD_ADDR_VAR 0 2
12024: PUSH
12025: LD_VAR 0 2
12029: PUSH
12030: LD_STRING #allowedsibbomb
12032: PUSH
12033: LD_EXP 17
12037: PUSH
12038: LD_OWVAR 1
12042: MINUS
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: ADD
12048: ST_TO_ADDR
// if ( ExtraStrings ) then
12049: LD_EXP 51
12053: IFFALSE 12075
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12055: LD_ADDR_VAR 0 2
12059: PUSH
12060: LD_VAR 0 2
12064: PUSH
12065: LD_STRING 
12067: ADD
12068: PUSH
12069: LD_EXP 51
12073: ADD
12074: ST_TO_ADDR
// if ( LimitsStrings ) then
12075: CALL 8823 0 0
12079: IFFALSE 12101
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12081: LD_ADDR_VAR 0 2
12085: PUSH
12086: LD_VAR 0 2
12090: PUSH
12091: LD_STRING 
12093: ADD
12094: PUSH
12095: CALL 8823 0 0
12099: ADD
12100: ST_TO_ADDR
// Display_Strings := AllStrings ;
12101: LD_ADDR_OWVAR 47
12105: PUSH
12106: LD_VAR 0 2
12110: ST_TO_ADDR
// end ;
12111: LD_VAR 0 1
12115: RET
// every 0 0$1 do
12116: GO 12118
12118: DISABLE
// begin ShowTimer ;
12119: CALL 11983 0 0
// enable ;
12123: ENABLE
// end ; end_of_file
12124: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12125: LD_INT 0
12127: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12128: LD_VAR 0 1
12132: PPUSH
12133: CALL_OW 255
12137: PUSH
12138: LD_VAR 0 4
12142: EQUAL
12143: IFFALSE 12162
// begin SetAchievement ( ACH_RAD ) ;
12145: LD_STRING ACH_RAD
12147: PPUSH
12148: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12152: LD_STRING ACH_NL
12154: PPUSH
12155: LD_INT 1
12157: PPUSH
12158: CALL_OW 564
// end end ;
12162: LD_VAR 0 5
12166: RET
// export function SA_Win ( side ) ; begin
12167: LD_INT 0
12169: PPUSH
// case side of 1 :
12170: LD_VAR 0 1
12174: PUSH
12175: LD_INT 1
12177: DOUBLE
12178: EQUAL
12179: IFTRUE 12183
12181: GO 12196
12183: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12184: LD_STRING ACH_AH
12186: PPUSH
12187: LD_INT 1
12189: PPUSH
12190: CALL_OW 564
12194: GO 12359
12196: LD_INT 2
12198: DOUBLE
12199: EQUAL
12200: IFTRUE 12204
12202: GO 12217
12204: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12205: LD_STRING ACH_E
12207: PPUSH
12208: LD_INT 1
12210: PPUSH
12211: CALL_OW 564
12215: GO 12359
12217: LD_INT 3
12219: DOUBLE
12220: EQUAL
12221: IFTRUE 12225
12223: GO 12238
12225: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12226: LD_STRING ACH_OOL
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 564
12236: GO 12359
12238: LD_INT 1
12240: PUSH
12241: LD_INT 2
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: DOUBLE
12248: EQUAL
12249: IFTRUE 12253
12251: GO 12278
12253: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12254: LD_STRING ACH_AH
12256: PPUSH
12257: LD_REAL  5.00000000000000E-0001
12260: PPUSH
12261: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12265: LD_STRING ACH_E
12267: PPUSH
12268: LD_REAL  5.00000000000000E-0001
12271: PPUSH
12272: CALL_OW 564
// end ; [ 2 , 3 ] :
12276: GO 12359
12278: LD_INT 2
12280: PUSH
12281: LD_INT 3
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: DOUBLE
12288: EQUAL
12289: IFTRUE 12293
12291: GO 12318
12293: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12294: LD_STRING ACH_OOL
12296: PPUSH
12297: LD_REAL  5.00000000000000E-0001
12300: PPUSH
12301: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12305: LD_STRING ACH_E
12307: PPUSH
12308: LD_REAL  5.00000000000000E-0001
12311: PPUSH
12312: CALL_OW 564
// end ; [ 3 , 1 ] :
12316: GO 12359
12318: LD_INT 3
12320: PUSH
12321: LD_INT 1
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: DOUBLE
12328: EQUAL
12329: IFTRUE 12333
12331: GO 12358
12333: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12334: LD_STRING ACH_AH
12336: PPUSH
12337: LD_REAL  5.00000000000000E-0001
12340: PPUSH
12341: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12345: LD_STRING ACH_OOL
12347: PPUSH
12348: LD_REAL  5.00000000000000E-0001
12351: PPUSH
12352: CALL_OW 564
// end ; end ;
12356: GO 12359
12358: POP
// end ; end_of_file
12359: LD_VAR 0 2
12363: RET
// export function SetMpTechs ( ) ; var side , i ; begin
12364: LD_INT 0
12366: PPUSH
12367: PPUSH
12368: PPUSH
// for side = 1 to 8 do
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: DOUBLE
12375: LD_INT 1
12377: DEC
12378: ST_TO_ADDR
12379: LD_INT 8
12381: PUSH
12382: FOR_TO
12383: IFFALSE 12504
// begin for i = 1 to 72 do
12385: LD_ADDR_VAR 0 3
12389: PUSH
12390: DOUBLE
12391: LD_INT 1
12393: DEC
12394: ST_TO_ADDR
12395: LD_INT 72
12397: PUSH
12398: FOR_TO
12399: IFFALSE 12430
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
12401: LD_VAR 0 3
12405: PPUSH
12406: LD_VAR 0 2
12410: PPUSH
12411: LD_INT 0
12413: PPUSH
12414: LD_VAR 0 3
12418: PPUSH
12419: CALL_OW 565
12423: PPUSH
12424: CALL_OW 322
12428: GO 12398
12430: POP
12431: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
12432: LD_INT 73
12434: PPUSH
12435: LD_VAR 0 2
12439: PPUSH
12440: LD_INT 0
12442: PPUSH
12443: LD_INT 25
12445: PPUSH
12446: CALL_OW 565
12450: PPUSH
12451: CALL_OW 322
// for i = 0 to 40 do
12455: LD_ADDR_VAR 0 3
12459: PUSH
12460: DOUBLE
12461: LD_INT 0
12463: DEC
12464: ST_TO_ADDR
12465: LD_INT 40
12467: PUSH
12468: FOR_TO
12469: IFFALSE 12500
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
12471: LD_VAR 0 3
12475: PPUSH
12476: LD_VAR 0 2
12480: PPUSH
12481: LD_INT 1
12483: PPUSH
12484: LD_VAR 0 3
12488: PPUSH
12489: CALL_OW 565
12493: PPUSH
12494: CALL_OW 324
12498: GO 12468
12500: POP
12501: POP
// end ;
12502: GO 12382
12504: POP
12505: POP
// end ;
12506: LD_VAR 0 1
12510: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
12511: LD_INT 0
12513: PPUSH
12514: PPUSH
12515: PPUSH
// for side = 1 to 8 do
12516: LD_ADDR_VAR 0 3
12520: PUSH
12521: DOUBLE
12522: LD_INT 1
12524: DEC
12525: ST_TO_ADDR
12526: LD_INT 8
12528: PUSH
12529: FOR_TO
12530: IFFALSE 16526
// begin for i = 1 to 73 do
12532: LD_ADDR_VAR 0 4
12536: PUSH
12537: DOUBLE
12538: LD_INT 1
12540: DEC
12541: ST_TO_ADDR
12542: LD_INT 73
12544: PUSH
12545: FOR_TO
12546: IFFALSE 12567
// SetTech ( i , side , state_disabled ) ;
12548: LD_VAR 0 4
12552: PPUSH
12553: LD_VAR 0 3
12557: PPUSH
12558: LD_INT 0
12560: PPUSH
12561: CALL_OW 322
12565: GO 12545
12567: POP
12568: POP
// for i = 0 to 40 do
12569: LD_ADDR_VAR 0 4
12573: PUSH
12574: DOUBLE
12575: LD_INT 0
12577: DEC
12578: ST_TO_ADDR
12579: LD_INT 40
12581: PUSH
12582: FOR_TO
12583: IFFALSE 12604
// SetRestrict ( i , side , false ) ;
12585: LD_VAR 0 4
12589: PPUSH
12590: LD_VAR 0 3
12594: PPUSH
12595: LD_INT 0
12597: PPUSH
12598: CALL_OW 324
12602: GO 12582
12604: POP
12605: POP
// case level of 1 :
12606: LD_VAR 0 1
12610: PUSH
12611: LD_INT 1
12613: DOUBLE
12614: EQUAL
12615: IFTRUE 12619
12617: GO 12772
12619: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12620: LD_INT 35
12622: PPUSH
12623: LD_VAR 0 3
12627: PPUSH
12628: LD_INT 1
12630: PPUSH
12631: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12635: LD_INT 45
12637: PPUSH
12638: LD_VAR 0 3
12642: PPUSH
12643: LD_INT 1
12645: PPUSH
12646: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12650: LD_INT 46
12652: PPUSH
12653: LD_VAR 0 3
12657: PPUSH
12658: LD_INT 1
12660: PPUSH
12661: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12665: LD_INT 47
12667: PPUSH
12668: LD_VAR 0 3
12672: PPUSH
12673: LD_INT 1
12675: PPUSH
12676: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12680: LD_INT 0
12682: PPUSH
12683: LD_VAR 0 3
12687: PPUSH
12688: LD_INT 1
12690: PPUSH
12691: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12695: LD_INT 2
12697: PPUSH
12698: LD_VAR 0 3
12702: PPUSH
12703: LD_INT 1
12705: PPUSH
12706: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12710: LD_INT 4
12712: PPUSH
12713: LD_VAR 0 3
12717: PPUSH
12718: LD_INT 1
12720: PPUSH
12721: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12725: LD_INT 6
12727: PPUSH
12728: LD_VAR 0 3
12732: PPUSH
12733: LD_INT 1
12735: PPUSH
12736: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12740: LD_INT 29
12742: PPUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: LD_INT 1
12750: PPUSH
12751: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12755: LD_INT 31
12757: PPUSH
12758: LD_VAR 0 3
12762: PPUSH
12763: LD_INT 1
12765: PPUSH
12766: CALL_OW 324
// end ; 2 :
12770: GO 16524
12772: LD_INT 2
12774: DOUBLE
12775: EQUAL
12776: IFTRUE 12780
12778: GO 12978
12780: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12781: LD_INT 35
12783: PPUSH
12784: LD_VAR 0 3
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12796: LD_INT 45
12798: PPUSH
12799: LD_VAR 0 3
12803: PPUSH
12804: LD_INT 1
12806: PPUSH
12807: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12811: LD_INT 46
12813: PPUSH
12814: LD_VAR 0 3
12818: PPUSH
12819: LD_INT 1
12821: PPUSH
12822: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12826: LD_INT 47
12828: PPUSH
12829: LD_VAR 0 3
12833: PPUSH
12834: LD_INT 1
12836: PPUSH
12837: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12841: LD_INT 1
12843: PPUSH
12844: LD_VAR 0 3
12848: PPUSH
12849: LD_INT 1
12851: PPUSH
12852: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12856: LD_INT 2
12858: PPUSH
12859: LD_VAR 0 3
12863: PPUSH
12864: LD_INT 1
12866: PPUSH
12867: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12871: LD_INT 11
12873: PPUSH
12874: LD_VAR 0 3
12878: PPUSH
12879: LD_INT 1
12881: PPUSH
12882: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12886: LD_INT 0
12888: PPUSH
12889: LD_VAR 0 3
12893: PPUSH
12894: LD_INT 1
12896: PPUSH
12897: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12901: LD_INT 2
12903: PPUSH
12904: LD_VAR 0 3
12908: PPUSH
12909: LD_INT 1
12911: PPUSH
12912: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12916: LD_INT 4
12918: PPUSH
12919: LD_VAR 0 3
12923: PPUSH
12924: LD_INT 1
12926: PPUSH
12927: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12931: LD_INT 6
12933: PPUSH
12934: LD_VAR 0 3
12938: PPUSH
12939: LD_INT 1
12941: PPUSH
12942: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12946: LD_INT 29
12948: PPUSH
12949: LD_VAR 0 3
12953: PPUSH
12954: LD_INT 1
12956: PPUSH
12957: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12961: LD_INT 31
12963: PPUSH
12964: LD_VAR 0 3
12968: PPUSH
12969: LD_INT 1
12971: PPUSH
12972: CALL_OW 324
// end ; 3 :
12976: GO 16524
12978: LD_INT 3
12980: DOUBLE
12981: EQUAL
12982: IFTRUE 12986
12984: GO 13439
12986: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12987: LD_INT 35
12989: PPUSH
12990: LD_VAR 0 3
12994: PPUSH
12995: LD_INT 1
12997: PPUSH
12998: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13002: LD_INT 45
13004: PPUSH
13005: LD_VAR 0 3
13009: PPUSH
13010: LD_INT 1
13012: PPUSH
13013: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13017: LD_INT 46
13019: PPUSH
13020: LD_VAR 0 3
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13032: LD_INT 47
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: LD_INT 1
13042: PPUSH
13043: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13047: LD_INT 1
13049: PPUSH
13050: LD_VAR 0 3
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13062: LD_INT 2
13064: PPUSH
13065: LD_VAR 0 3
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13077: LD_INT 11
13079: PPUSH
13080: LD_VAR 0 3
13084: PPUSH
13085: LD_INT 1
13087: PPUSH
13088: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13092: LD_INT 48
13094: PPUSH
13095: LD_VAR 0 3
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13107: LD_INT 69
13109: PPUSH
13110: LD_VAR 0 3
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13122: LD_INT 39
13124: PPUSH
13125: LD_VAR 0 3
13129: PPUSH
13130: LD_INT 1
13132: PPUSH
13133: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13137: LD_INT 43
13139: PPUSH
13140: LD_VAR 0 3
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13152: LD_INT 51
13154: PPUSH
13155: LD_VAR 0 3
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13167: LD_INT 6
13169: PPUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13182: LD_INT 0
13184: PPUSH
13185: LD_VAR 0 3
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13197: LD_INT 2
13199: PPUSH
13200: LD_VAR 0 3
13204: PPUSH
13205: LD_INT 1
13207: PPUSH
13208: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
13212: LD_INT 3
13214: PPUSH
13215: LD_VAR 0 3
13219: PPUSH
13220: LD_INT 1
13222: PPUSH
13223: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
13227: LD_INT 4
13229: PPUSH
13230: LD_VAR 0 3
13234: PPUSH
13235: LD_INT 1
13237: PPUSH
13238: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
13242: LD_INT 6
13244: PPUSH
13245: LD_VAR 0 3
13249: PPUSH
13250: LD_INT 1
13252: PPUSH
13253: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
13257: LD_INT 7
13259: PPUSH
13260: LD_VAR 0 3
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
13272: LD_INT 8
13274: PPUSH
13275: LD_VAR 0 3
13279: PPUSH
13280: LD_INT 1
13282: PPUSH
13283: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
13287: LD_INT 10
13289: PPUSH
13290: LD_VAR 0 3
13294: PPUSH
13295: LD_INT 1
13297: PPUSH
13298: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13302: LD_INT 15
13304: PPUSH
13305: LD_VAR 0 3
13309: PPUSH
13310: LD_INT 1
13312: PPUSH
13313: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13317: LD_INT 16
13319: PPUSH
13320: LD_VAR 0 3
13324: PPUSH
13325: LD_INT 1
13327: PPUSH
13328: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13332: LD_INT 17
13334: PPUSH
13335: LD_VAR 0 3
13339: PPUSH
13340: LD_INT 1
13342: PPUSH
13343: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13347: LD_INT 20
13349: PPUSH
13350: LD_VAR 0 3
13354: PPUSH
13355: LD_INT 1
13357: PPUSH
13358: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13362: LD_INT 26
13364: PPUSH
13365: LD_VAR 0 3
13369: PPUSH
13370: LD_INT 1
13372: PPUSH
13373: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13377: LD_INT 27
13379: PPUSH
13380: LD_VAR 0 3
13384: PPUSH
13385: LD_INT 1
13387: PPUSH
13388: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13392: LD_INT 29
13394: PPUSH
13395: LD_VAR 0 3
13399: PPUSH
13400: LD_INT 1
13402: PPUSH
13403: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13407: LD_INT 31
13409: PPUSH
13410: LD_VAR 0 3
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13422: LD_INT 32
13424: PPUSH
13425: LD_VAR 0 3
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: CALL_OW 324
// end ; 4 :
13437: GO 16524
13439: LD_INT 4
13441: DOUBLE
13442: EQUAL
13443: IFTRUE 13447
13445: GO 14395
13447: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13448: LD_INT 35
13450: PPUSH
13451: LD_VAR 0 3
13455: PPUSH
13456: LD_INT 1
13458: PPUSH
13459: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13463: LD_INT 45
13465: PPUSH
13466: LD_VAR 0 3
13470: PPUSH
13471: LD_INT 1
13473: PPUSH
13474: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13478: LD_INT 46
13480: PPUSH
13481: LD_VAR 0 3
13485: PPUSH
13486: LD_INT 1
13488: PPUSH
13489: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13493: LD_INT 47
13495: PPUSH
13496: LD_VAR 0 3
13500: PPUSH
13501: LD_INT 1
13503: PPUSH
13504: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13508: LD_INT 1
13510: PPUSH
13511: LD_VAR 0 3
13515: PPUSH
13516: LD_INT 1
13518: PPUSH
13519: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13523: LD_INT 2
13525: PPUSH
13526: LD_VAR 0 3
13530: PPUSH
13531: LD_INT 1
13533: PPUSH
13534: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13538: LD_INT 11
13540: PPUSH
13541: LD_VAR 0 3
13545: PPUSH
13546: LD_INT 1
13548: PPUSH
13549: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13553: LD_INT 20
13555: PPUSH
13556: LD_VAR 0 3
13560: PPUSH
13561: LD_INT 1
13563: PPUSH
13564: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13568: LD_INT 48
13570: PPUSH
13571: LD_VAR 0 3
13575: PPUSH
13576: LD_INT 1
13578: PPUSH
13579: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13583: LD_INT 49
13585: PPUSH
13586: LD_VAR 0 3
13590: PPUSH
13591: LD_INT 1
13593: PPUSH
13594: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13598: LD_INT 69
13600: PPUSH
13601: LD_VAR 0 3
13605: PPUSH
13606: LD_INT 1
13608: PPUSH
13609: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13613: LD_INT 39
13615: PPUSH
13616: LD_VAR 0 3
13620: PPUSH
13621: LD_INT 1
13623: PPUSH
13624: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13628: LD_INT 34
13630: PPUSH
13631: LD_VAR 0 3
13635: PPUSH
13636: LD_INT 1
13638: PPUSH
13639: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13643: LD_INT 42
13645: PPUSH
13646: LD_VAR 0 3
13650: PPUSH
13651: LD_INT 1
13653: PPUSH
13654: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13658: LD_INT 44
13660: PPUSH
13661: LD_VAR 0 3
13665: PPUSH
13666: LD_INT 1
13668: PPUSH
13669: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13673: LD_INT 41
13675: PPUSH
13676: LD_VAR 0 3
13680: PPUSH
13681: LD_INT 1
13683: PPUSH
13684: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13688: LD_INT 43
13690: PPUSH
13691: LD_VAR 0 3
13695: PPUSH
13696: LD_INT 1
13698: PPUSH
13699: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13703: LD_INT 70
13705: PPUSH
13706: LD_VAR 0 3
13710: PPUSH
13711: LD_INT 1
13713: PPUSH
13714: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13718: LD_INT 51
13720: PPUSH
13721: LD_VAR 0 3
13725: PPUSH
13726: LD_INT 1
13728: PPUSH
13729: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13733: LD_INT 52
13735: PPUSH
13736: LD_VAR 0 3
13740: PPUSH
13741: LD_INT 1
13743: PPUSH
13744: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13748: LD_INT 6
13750: PPUSH
13751: LD_VAR 0 3
13755: PPUSH
13756: LD_INT 1
13758: PPUSH
13759: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13763: LD_INT 15
13765: PPUSH
13766: LD_VAR 0 3
13770: PPUSH
13771: LD_INT 1
13773: PPUSH
13774: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13778: LD_INT 7
13780: PPUSH
13781: LD_VAR 0 3
13785: PPUSH
13786: LD_INT 1
13788: PPUSH
13789: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13793: LD_INT 12
13795: PPUSH
13796: LD_VAR 0 3
13800: PPUSH
13801: LD_INT 1
13803: PPUSH
13804: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13808: LD_INT 18
13810: PPUSH
13811: LD_VAR 0 3
13815: PPUSH
13816: LD_INT 1
13818: PPUSH
13819: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13823: LD_INT 60
13825: PPUSH
13826: LD_VAR 0 3
13830: PPUSH
13831: LD_INT 1
13833: PPUSH
13834: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13838: LD_INT 9
13840: PPUSH
13841: LD_VAR 0 3
13845: PPUSH
13846: LD_INT 1
13848: PPUSH
13849: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13853: LD_INT 30
13855: PPUSH
13856: LD_VAR 0 3
13860: PPUSH
13861: LD_INT 1
13863: PPUSH
13864: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13868: LD_INT 37
13870: PPUSH
13871: LD_VAR 0 3
13875: PPUSH
13876: LD_INT 1
13878: PPUSH
13879: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13883: LD_INT 5
13885: PPUSH
13886: LD_VAR 0 3
13890: PPUSH
13891: LD_INT 1
13893: PPUSH
13894: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13898: LD_INT 66
13900: PPUSH
13901: LD_VAR 0 3
13905: PPUSH
13906: LD_INT 1
13908: PPUSH
13909: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13913: LD_INT 21
13915: PPUSH
13916: LD_VAR 0 3
13920: PPUSH
13921: LD_INT 1
13923: PPUSH
13924: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13928: LD_INT 22
13930: PPUSH
13931: LD_VAR 0 3
13935: PPUSH
13936: LD_INT 1
13938: PPUSH
13939: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13943: LD_INT 54
13945: PPUSH
13946: LD_VAR 0 3
13950: PPUSH
13951: LD_INT 1
13953: PPUSH
13954: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
13958: LD_INT 0
13960: PPUSH
13961: LD_VAR 0 3
13965: PPUSH
13966: LD_INT 1
13968: PPUSH
13969: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
13973: LD_INT 1
13975: PPUSH
13976: LD_VAR 0 3
13980: PPUSH
13981: LD_INT 1
13983: PPUSH
13984: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
13988: LD_INT 2
13990: PPUSH
13991: LD_VAR 0 3
13995: PPUSH
13996: LD_INT 1
13998: PPUSH
13999: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14003: LD_INT 3
14005: PPUSH
14006: LD_VAR 0 3
14010: PPUSH
14011: LD_INT 1
14013: PPUSH
14014: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14018: LD_INT 4
14020: PPUSH
14021: LD_VAR 0 3
14025: PPUSH
14026: LD_INT 1
14028: PPUSH
14029: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
14033: LD_INT 5
14035: PPUSH
14036: LD_VAR 0 3
14040: PPUSH
14041: LD_INT 1
14043: PPUSH
14044: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14048: LD_INT 6
14050: PPUSH
14051: LD_VAR 0 3
14055: PPUSH
14056: LD_INT 1
14058: PPUSH
14059: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14063: LD_INT 7
14065: PPUSH
14066: LD_VAR 0 3
14070: PPUSH
14071: LD_INT 1
14073: PPUSH
14074: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14078: LD_INT 8
14080: PPUSH
14081: LD_VAR 0 3
14085: PPUSH
14086: LD_INT 1
14088: PPUSH
14089: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14093: LD_INT 10
14095: PPUSH
14096: LD_VAR 0 3
14100: PPUSH
14101: LD_INT 1
14103: PPUSH
14104: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
14108: LD_INT 11
14110: PPUSH
14111: LD_VAR 0 3
14115: PPUSH
14116: LD_INT 1
14118: PPUSH
14119: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
14123: LD_INT 12
14125: PPUSH
14126: LD_VAR 0 3
14130: PPUSH
14131: LD_INT 1
14133: PPUSH
14134: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
14138: LD_INT 13
14140: PPUSH
14141: LD_VAR 0 3
14145: PPUSH
14146: LD_INT 1
14148: PPUSH
14149: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
14153: LD_INT 14
14155: PPUSH
14156: LD_VAR 0 3
14160: PPUSH
14161: LD_INT 1
14163: PPUSH
14164: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14168: LD_INT 15
14170: PPUSH
14171: LD_VAR 0 3
14175: PPUSH
14176: LD_INT 1
14178: PPUSH
14179: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14183: LD_INT 16
14185: PPUSH
14186: LD_VAR 0 3
14190: PPUSH
14191: LD_INT 1
14193: PPUSH
14194: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14198: LD_INT 17
14200: PPUSH
14201: LD_VAR 0 3
14205: PPUSH
14206: LD_INT 1
14208: PPUSH
14209: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
14213: LD_INT 19
14215: PPUSH
14216: LD_VAR 0 3
14220: PPUSH
14221: LD_INT 1
14223: PPUSH
14224: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14228: LD_INT 20
14230: PPUSH
14231: LD_VAR 0 3
14235: PPUSH
14236: LD_INT 1
14238: PPUSH
14239: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
14243: LD_INT 21
14245: PPUSH
14246: LD_VAR 0 3
14250: PPUSH
14251: LD_INT 1
14253: PPUSH
14254: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
14258: LD_INT 23
14260: PPUSH
14261: LD_VAR 0 3
14265: PPUSH
14266: LD_INT 1
14268: PPUSH
14269: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14273: LD_INT 26
14275: PPUSH
14276: LD_VAR 0 3
14280: PPUSH
14281: LD_INT 1
14283: PPUSH
14284: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14288: LD_INT 27
14290: PPUSH
14291: LD_VAR 0 3
14295: PPUSH
14296: LD_INT 1
14298: PPUSH
14299: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
14303: LD_INT 28
14305: PPUSH
14306: LD_VAR 0 3
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14318: LD_INT 29
14320: PPUSH
14321: LD_VAR 0 3
14325: PPUSH
14326: LD_INT 1
14328: PPUSH
14329: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
14333: LD_INT 30
14335: PPUSH
14336: LD_VAR 0 3
14340: PPUSH
14341: LD_INT 1
14343: PPUSH
14344: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14348: LD_INT 31
14350: PPUSH
14351: LD_VAR 0 3
14355: PPUSH
14356: LD_INT 1
14358: PPUSH
14359: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14363: LD_INT 32
14365: PPUSH
14366: LD_VAR 0 3
14370: PPUSH
14371: LD_INT 1
14373: PPUSH
14374: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
14378: LD_INT 36
14380: PPUSH
14381: LD_VAR 0 3
14385: PPUSH
14386: LD_INT 1
14388: PPUSH
14389: CALL_OW 324
// end ; 5 :
14393: GO 16524
14395: LD_INT 5
14397: DOUBLE
14398: EQUAL
14399: IFTRUE 14403
14401: GO 15516
14403: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14404: LD_INT 35
14406: PPUSH
14407: LD_VAR 0 3
14411: PPUSH
14412: LD_INT 1
14414: PPUSH
14415: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14419: LD_INT 45
14421: PPUSH
14422: LD_VAR 0 3
14426: PPUSH
14427: LD_INT 1
14429: PPUSH
14430: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14434: LD_INT 46
14436: PPUSH
14437: LD_VAR 0 3
14441: PPUSH
14442: LD_INT 1
14444: PPUSH
14445: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14449: LD_INT 47
14451: PPUSH
14452: LD_VAR 0 3
14456: PPUSH
14457: LD_INT 1
14459: PPUSH
14460: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14464: LD_INT 1
14466: PPUSH
14467: LD_VAR 0 3
14471: PPUSH
14472: LD_INT 1
14474: PPUSH
14475: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14479: LD_INT 2
14481: PPUSH
14482: LD_VAR 0 3
14486: PPUSH
14487: LD_INT 1
14489: PPUSH
14490: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14494: LD_INT 11
14496: PPUSH
14497: LD_VAR 0 3
14501: PPUSH
14502: LD_INT 1
14504: PPUSH
14505: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
14509: LD_INT 20
14511: PPUSH
14512: LD_VAR 0 3
14516: PPUSH
14517: LD_INT 1
14519: PPUSH
14520: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14524: LD_INT 48
14526: PPUSH
14527: LD_VAR 0 3
14531: PPUSH
14532: LD_INT 1
14534: PPUSH
14535: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
14539: LD_INT 49
14541: PPUSH
14542: LD_VAR 0 3
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14554: LD_INT 69
14556: PPUSH
14557: LD_VAR 0 3
14561: PPUSH
14562: LD_INT 1
14564: PPUSH
14565: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14569: LD_INT 39
14571: PPUSH
14572: LD_VAR 0 3
14576: PPUSH
14577: LD_INT 1
14579: PPUSH
14580: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
14584: LD_INT 34
14586: PPUSH
14587: LD_VAR 0 3
14591: PPUSH
14592: LD_INT 1
14594: PPUSH
14595: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
14599: LD_INT 42
14601: PPUSH
14602: LD_VAR 0 3
14606: PPUSH
14607: LD_INT 1
14609: PPUSH
14610: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
14614: LD_INT 44
14616: PPUSH
14617: LD_VAR 0 3
14621: PPUSH
14622: LD_INT 1
14624: PPUSH
14625: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
14629: LD_INT 41
14631: PPUSH
14632: LD_VAR 0 3
14636: PPUSH
14637: LD_INT 1
14639: PPUSH
14640: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
14644: LD_INT 40
14646: PPUSH
14647: LD_VAR 0 3
14651: PPUSH
14652: LD_INT 1
14654: PPUSH
14655: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14659: LD_INT 43
14661: PPUSH
14662: LD_VAR 0 3
14666: PPUSH
14667: LD_INT 1
14669: PPUSH
14670: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
14674: LD_INT 70
14676: PPUSH
14677: LD_VAR 0 3
14681: PPUSH
14682: LD_INT 1
14684: PPUSH
14685: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14689: LD_INT 51
14691: PPUSH
14692: LD_VAR 0 3
14696: PPUSH
14697: LD_INT 1
14699: PPUSH
14700: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
14704: LD_INT 52
14706: PPUSH
14707: LD_VAR 0 3
14711: PPUSH
14712: LD_INT 1
14714: PPUSH
14715: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14719: LD_INT 6
14721: PPUSH
14722: LD_VAR 0 3
14726: PPUSH
14727: LD_INT 1
14729: PPUSH
14730: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
14734: LD_INT 15
14736: PPUSH
14737: LD_VAR 0 3
14741: PPUSH
14742: LD_INT 1
14744: PPUSH
14745: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
14749: LD_INT 7
14751: PPUSH
14752: LD_VAR 0 3
14756: PPUSH
14757: LD_INT 1
14759: PPUSH
14760: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
14764: LD_INT 12
14766: PPUSH
14767: LD_VAR 0 3
14771: PPUSH
14772: LD_INT 1
14774: PPUSH
14775: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
14779: LD_INT 17
14781: PPUSH
14782: LD_VAR 0 3
14786: PPUSH
14787: LD_INT 1
14789: PPUSH
14790: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
14794: LD_INT 18
14796: PPUSH
14797: LD_VAR 0 3
14801: PPUSH
14802: LD_INT 1
14804: PPUSH
14805: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
14809: LD_INT 60
14811: PPUSH
14812: LD_VAR 0 3
14816: PPUSH
14817: LD_INT 1
14819: PPUSH
14820: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
14824: LD_INT 32
14826: PPUSH
14827: LD_VAR 0 3
14831: PPUSH
14832: LD_INT 1
14834: PPUSH
14835: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
14839: LD_INT 9
14841: PPUSH
14842: LD_VAR 0 3
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
14854: LD_INT 57
14856: PPUSH
14857: LD_VAR 0 3
14861: PPUSH
14862: LD_INT 1
14864: PPUSH
14865: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
14869: LD_INT 30
14871: PPUSH
14872: LD_VAR 0 3
14876: PPUSH
14877: LD_INT 1
14879: PPUSH
14880: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
14884: LD_INT 37
14886: PPUSH
14887: LD_VAR 0 3
14891: PPUSH
14892: LD_INT 1
14894: PPUSH
14895: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
14899: LD_INT 63
14901: PPUSH
14902: LD_VAR 0 3
14906: PPUSH
14907: LD_INT 1
14909: PPUSH
14910: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
14914: LD_INT 3
14916: PPUSH
14917: LD_VAR 0 3
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
14929: LD_INT 4
14931: PPUSH
14932: LD_VAR 0 3
14936: PPUSH
14937: LD_INT 1
14939: PPUSH
14940: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14944: LD_INT 5
14946: PPUSH
14947: LD_VAR 0 3
14951: PPUSH
14952: LD_INT 1
14954: PPUSH
14955: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14959: LD_INT 66
14961: PPUSH
14962: LD_VAR 0 3
14966: PPUSH
14967: LD_INT 1
14969: PPUSH
14970: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14974: LD_INT 21
14976: PPUSH
14977: LD_VAR 0 3
14981: PPUSH
14982: LD_INT 1
14984: PPUSH
14985: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14989: LD_INT 22
14991: PPUSH
14992: LD_VAR 0 3
14996: PPUSH
14997: LD_INT 1
14999: PPUSH
15000: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
15004: LD_INT 19
15006: PPUSH
15007: LD_VAR 0 3
15011: PPUSH
15012: LD_INT 1
15014: PPUSH
15015: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15019: LD_INT 54
15021: PPUSH
15022: LD_VAR 0 3
15026: PPUSH
15027: LD_INT 1
15029: PPUSH
15030: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
15034: LD_INT 55
15036: PPUSH
15037: LD_VAR 0 3
15041: PPUSH
15042: LD_INT 1
15044: PPUSH
15045: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15049: LD_INT 0
15051: PPUSH
15052: LD_VAR 0 3
15056: PPUSH
15057: LD_INT 1
15059: PPUSH
15060: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15064: LD_INT 1
15066: PPUSH
15067: LD_VAR 0 3
15071: PPUSH
15072: LD_INT 1
15074: PPUSH
15075: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15079: LD_INT 2
15081: PPUSH
15082: LD_VAR 0 3
15086: PPUSH
15087: LD_INT 1
15089: PPUSH
15090: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15094: LD_INT 3
15096: PPUSH
15097: LD_VAR 0 3
15101: PPUSH
15102: LD_INT 1
15104: PPUSH
15105: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15109: LD_INT 4
15111: PPUSH
15112: LD_VAR 0 3
15116: PPUSH
15117: LD_INT 1
15119: PPUSH
15120: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15124: LD_INT 5
15126: PPUSH
15127: LD_VAR 0 3
15131: PPUSH
15132: LD_INT 1
15134: PPUSH
15135: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15139: LD_INT 6
15141: PPUSH
15142: LD_VAR 0 3
15146: PPUSH
15147: LD_INT 1
15149: PPUSH
15150: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15154: LD_INT 7
15156: PPUSH
15157: LD_VAR 0 3
15161: PPUSH
15162: LD_INT 1
15164: PPUSH
15165: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15169: LD_INT 8
15171: PPUSH
15172: LD_VAR 0 3
15176: PPUSH
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15184: LD_INT 10
15186: PPUSH
15187: LD_VAR 0 3
15191: PPUSH
15192: LD_INT 1
15194: PPUSH
15195: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15199: LD_INT 11
15201: PPUSH
15202: LD_VAR 0 3
15206: PPUSH
15207: LD_INT 1
15209: PPUSH
15210: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15214: LD_INT 12
15216: PPUSH
15217: LD_VAR 0 3
15221: PPUSH
15222: LD_INT 1
15224: PPUSH
15225: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15229: LD_INT 13
15231: PPUSH
15232: LD_VAR 0 3
15236: PPUSH
15237: LD_INT 1
15239: PPUSH
15240: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15244: LD_INT 14
15246: PPUSH
15247: LD_VAR 0 3
15251: PPUSH
15252: LD_INT 1
15254: PPUSH
15255: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15259: LD_INT 15
15261: PPUSH
15262: LD_VAR 0 3
15266: PPUSH
15267: LD_INT 1
15269: PPUSH
15270: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15274: LD_INT 16
15276: PPUSH
15277: LD_VAR 0 3
15281: PPUSH
15282: LD_INT 1
15284: PPUSH
15285: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15289: LD_INT 17
15291: PPUSH
15292: LD_VAR 0 3
15296: PPUSH
15297: LD_INT 1
15299: PPUSH
15300: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
15304: LD_INT 18
15306: PPUSH
15307: LD_VAR 0 3
15311: PPUSH
15312: LD_INT 1
15314: PPUSH
15315: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15319: LD_INT 19
15321: PPUSH
15322: LD_VAR 0 3
15326: PPUSH
15327: LD_INT 1
15329: PPUSH
15330: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15334: LD_INT 20
15336: PPUSH
15337: LD_VAR 0 3
15341: PPUSH
15342: LD_INT 1
15344: PPUSH
15345: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15349: LD_INT 21
15351: PPUSH
15352: LD_VAR 0 3
15356: PPUSH
15357: LD_INT 1
15359: PPUSH
15360: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15364: LD_INT 23
15366: PPUSH
15367: LD_VAR 0 3
15371: PPUSH
15372: LD_INT 1
15374: PPUSH
15375: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15379: LD_INT 26
15381: PPUSH
15382: LD_VAR 0 3
15386: PPUSH
15387: LD_INT 1
15389: PPUSH
15390: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15394: LD_INT 27
15396: PPUSH
15397: LD_VAR 0 3
15401: PPUSH
15402: LD_INT 1
15404: PPUSH
15405: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15409: LD_INT 28
15411: PPUSH
15412: LD_VAR 0 3
15416: PPUSH
15417: LD_INT 1
15419: PPUSH
15420: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15424: LD_INT 29
15426: PPUSH
15427: LD_VAR 0 3
15431: PPUSH
15432: LD_INT 1
15434: PPUSH
15435: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15439: LD_INT 30
15441: PPUSH
15442: LD_VAR 0 3
15446: PPUSH
15447: LD_INT 1
15449: PPUSH
15450: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15454: LD_INT 31
15456: PPUSH
15457: LD_VAR 0 3
15461: PPUSH
15462: LD_INT 1
15464: PPUSH
15465: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15469: LD_INT 32
15471: PPUSH
15472: LD_VAR 0 3
15476: PPUSH
15477: LD_INT 1
15479: PPUSH
15480: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
15484: LD_INT 33
15486: PPUSH
15487: LD_VAR 0 3
15491: PPUSH
15492: LD_INT 1
15494: PPUSH
15495: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15499: LD_INT 36
15501: PPUSH
15502: LD_VAR 0 3
15506: PPUSH
15507: LD_INT 1
15509: PPUSH
15510: CALL_OW 324
// end ; 6 :
15514: GO 16524
15516: LD_INT 6
15518: DOUBLE
15519: EQUAL
15520: IFTRUE 15524
15522: GO 16449
15524: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15525: LD_INT 35
15527: PPUSH
15528: LD_VAR 0 3
15532: PPUSH
15533: LD_INT 1
15535: PPUSH
15536: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15540: LD_INT 45
15542: PPUSH
15543: LD_VAR 0 3
15547: PPUSH
15548: LD_INT 1
15550: PPUSH
15551: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15555: LD_INT 46
15557: PPUSH
15558: LD_VAR 0 3
15562: PPUSH
15563: LD_INT 1
15565: PPUSH
15566: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15570: LD_INT 47
15572: PPUSH
15573: LD_VAR 0 3
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15585: LD_INT 1
15587: PPUSH
15588: LD_VAR 0 3
15592: PPUSH
15593: LD_INT 1
15595: PPUSH
15596: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15600: LD_INT 2
15602: PPUSH
15603: LD_VAR 0 3
15607: PPUSH
15608: LD_INT 1
15610: PPUSH
15611: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15615: LD_INT 11
15617: PPUSH
15618: LD_VAR 0 3
15622: PPUSH
15623: LD_INT 1
15625: PPUSH
15626: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15630: LD_INT 20
15632: PPUSH
15633: LD_VAR 0 3
15637: PPUSH
15638: LD_INT 1
15640: PPUSH
15641: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15645: LD_INT 48
15647: PPUSH
15648: LD_VAR 0 3
15652: PPUSH
15653: LD_INT 1
15655: PPUSH
15656: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15660: LD_INT 49
15662: PPUSH
15663: LD_VAR 0 3
15667: PPUSH
15668: LD_INT 1
15670: PPUSH
15671: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
15675: LD_INT 50
15677: PPUSH
15678: LD_VAR 0 3
15682: PPUSH
15683: LD_INT 1
15685: PPUSH
15686: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15690: LD_INT 69
15692: PPUSH
15693: LD_VAR 0 3
15697: PPUSH
15698: LD_INT 1
15700: PPUSH
15701: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15705: LD_INT 39
15707: PPUSH
15708: LD_VAR 0 3
15712: PPUSH
15713: LD_INT 1
15715: PPUSH
15716: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15720: LD_INT 34
15722: PPUSH
15723: LD_VAR 0 3
15727: PPUSH
15728: LD_INT 1
15730: PPUSH
15731: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15735: LD_INT 42
15737: PPUSH
15738: LD_VAR 0 3
15742: PPUSH
15743: LD_INT 1
15745: PPUSH
15746: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15750: LD_INT 44
15752: PPUSH
15753: LD_VAR 0 3
15757: PPUSH
15758: LD_INT 1
15760: PPUSH
15761: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15765: LD_INT 41
15767: PPUSH
15768: LD_VAR 0 3
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
15780: LD_INT 13
15782: PPUSH
15783: LD_VAR 0 3
15787: PPUSH
15788: LD_INT 1
15790: PPUSH
15791: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
15795: LD_INT 40
15797: PPUSH
15798: LD_VAR 0 3
15802: PPUSH
15803: LD_INT 1
15805: PPUSH
15806: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15810: LD_INT 43
15812: PPUSH
15813: LD_VAR 0 3
15817: PPUSH
15818: LD_INT 1
15820: PPUSH
15821: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15825: LD_INT 70
15827: PPUSH
15828: LD_VAR 0 3
15832: PPUSH
15833: LD_INT 1
15835: PPUSH
15836: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
15840: LD_INT 23
15842: PPUSH
15843: LD_VAR 0 3
15847: PPUSH
15848: LD_INT 1
15850: PPUSH
15851: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15855: LD_INT 51
15857: PPUSH
15858: LD_VAR 0 3
15862: PPUSH
15863: LD_INT 1
15865: PPUSH
15866: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15870: LD_INT 52
15872: PPUSH
15873: LD_VAR 0 3
15877: PPUSH
15878: LD_INT 1
15880: PPUSH
15881: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15885: LD_INT 6
15887: PPUSH
15888: LD_VAR 0 3
15892: PPUSH
15893: LD_INT 1
15895: PPUSH
15896: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15900: LD_INT 15
15902: PPUSH
15903: LD_VAR 0 3
15907: PPUSH
15908: LD_INT 1
15910: PPUSH
15911: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15915: LD_INT 7
15917: PPUSH
15918: LD_VAR 0 3
15922: PPUSH
15923: LD_INT 1
15925: PPUSH
15926: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15930: LD_INT 12
15932: PPUSH
15933: LD_VAR 0 3
15937: PPUSH
15938: LD_INT 1
15940: PPUSH
15941: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
15945: LD_INT 10
15947: PPUSH
15948: LD_VAR 0 3
15952: PPUSH
15953: LD_INT 1
15955: PPUSH
15956: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
15960: LD_INT 17
15962: PPUSH
15963: LD_VAR 0 3
15967: PPUSH
15968: LD_INT 1
15970: PPUSH
15971: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15975: LD_INT 18
15977: PPUSH
15978: LD_VAR 0 3
15982: PPUSH
15983: LD_INT 1
15985: PPUSH
15986: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15990: LD_INT 60
15992: PPUSH
15993: LD_VAR 0 3
15997: PPUSH
15998: LD_INT 1
16000: PPUSH
16001: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
16005: LD_INT 61
16007: PPUSH
16008: LD_VAR 0 3
16012: PPUSH
16013: LD_INT 1
16015: PPUSH
16016: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16020: LD_INT 32
16022: PPUSH
16023: LD_VAR 0 3
16027: PPUSH
16028: LD_INT 1
16030: PPUSH
16031: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
16035: LD_INT 27
16037: PPUSH
16038: LD_VAR 0 3
16042: PPUSH
16043: LD_INT 1
16045: PPUSH
16046: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
16050: LD_INT 36
16052: PPUSH
16053: LD_VAR 0 3
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
16065: LD_INT 33
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: LD_INT 1
16075: PPUSH
16076: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16080: LD_INT 9
16082: PPUSH
16083: LD_VAR 0 3
16087: PPUSH
16088: LD_INT 1
16090: PPUSH
16091: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
16095: LD_INT 38
16097: PPUSH
16098: LD_VAR 0 3
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16110: LD_INT 57
16112: PPUSH
16113: LD_VAR 0 3
16117: PPUSH
16118: LD_INT 1
16120: PPUSH
16121: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
16125: LD_INT 58
16127: PPUSH
16128: LD_VAR 0 3
16132: PPUSH
16133: LD_INT 1
16135: PPUSH
16136: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
16140: LD_INT 28
16142: PPUSH
16143: LD_VAR 0 3
16147: PPUSH
16148: LD_INT 1
16150: PPUSH
16151: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
16155: LD_INT 29
16157: PPUSH
16158: LD_VAR 0 3
16162: PPUSH
16163: LD_INT 1
16165: PPUSH
16166: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16170: LD_INT 30
16172: PPUSH
16173: LD_VAR 0 3
16177: PPUSH
16178: LD_INT 1
16180: PPUSH
16181: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16185: LD_INT 37
16187: PPUSH
16188: LD_VAR 0 3
16192: PPUSH
16193: LD_INT 1
16195: PPUSH
16196: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16200: LD_INT 63
16202: PPUSH
16203: LD_VAR 0 3
16207: PPUSH
16208: LD_INT 1
16210: PPUSH
16211: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
16215: LD_INT 64
16217: PPUSH
16218: LD_VAR 0 3
16222: PPUSH
16223: LD_INT 1
16225: PPUSH
16226: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16230: LD_INT 3
16232: PPUSH
16233: LD_VAR 0 3
16237: PPUSH
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16245: LD_INT 4
16247: PPUSH
16248: LD_VAR 0 3
16252: PPUSH
16253: LD_INT 1
16255: PPUSH
16256: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16260: LD_INT 5
16262: PPUSH
16263: LD_VAR 0 3
16267: PPUSH
16268: LD_INT 1
16270: PPUSH
16271: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
16275: LD_INT 8
16277: PPUSH
16278: LD_VAR 0 3
16282: PPUSH
16283: LD_INT 1
16285: PPUSH
16286: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16290: LD_INT 66
16292: PPUSH
16293: LD_VAR 0 3
16297: PPUSH
16298: LD_INT 1
16300: PPUSH
16301: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
16305: LD_INT 67
16307: PPUSH
16308: LD_VAR 0 3
16312: PPUSH
16313: LD_INT 1
16315: PPUSH
16316: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16320: LD_INT 21
16322: PPUSH
16323: LD_VAR 0 3
16327: PPUSH
16328: LD_INT 1
16330: PPUSH
16331: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16335: LD_INT 22
16337: PPUSH
16338: LD_VAR 0 3
16342: PPUSH
16343: LD_INT 1
16345: PPUSH
16346: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16350: LD_INT 19
16352: PPUSH
16353: LD_VAR 0 3
16357: PPUSH
16358: LD_INT 1
16360: PPUSH
16361: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
16365: LD_INT 26
16367: PPUSH
16368: LD_VAR 0 3
16372: PPUSH
16373: LD_INT 1
16375: PPUSH
16376: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16380: LD_INT 54
16382: PPUSH
16383: LD_VAR 0 3
16387: PPUSH
16388: LD_INT 1
16390: PPUSH
16391: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16395: LD_INT 55
16397: PPUSH
16398: LD_VAR 0 3
16402: PPUSH
16403: LD_INT 1
16405: PPUSH
16406: CALL_OW 322
// for i = 0 to 39 do
16410: LD_ADDR_VAR 0 4
16414: PUSH
16415: DOUBLE
16416: LD_INT 0
16418: DEC
16419: ST_TO_ADDR
16420: LD_INT 39
16422: PUSH
16423: FOR_TO
16424: IFFALSE 16445
// SetRestrict ( i , side , true ) ;
16426: LD_VAR 0 4
16430: PPUSH
16431: LD_VAR 0 3
16435: PPUSH
16436: LD_INT 1
16438: PPUSH
16439: CALL_OW 324
16443: GO 16423
16445: POP
16446: POP
// end ; else
16447: GO 16524
16449: POP
// begin for i = 1 to 73 do
16450: LD_ADDR_VAR 0 4
16454: PUSH
16455: DOUBLE
16456: LD_INT 1
16458: DEC
16459: ST_TO_ADDR
16460: LD_INT 73
16462: PUSH
16463: FOR_TO
16464: IFFALSE 16485
// SetTech ( i , side , state_enabled ) ;
16466: LD_VAR 0 4
16470: PPUSH
16471: LD_VAR 0 3
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: CALL_OW 322
16483: GO 16463
16485: POP
16486: POP
// for i = 0 to 39 do
16487: LD_ADDR_VAR 0 4
16491: PUSH
16492: DOUBLE
16493: LD_INT 0
16495: DEC
16496: ST_TO_ADDR
16497: LD_INT 39
16499: PUSH
16500: FOR_TO
16501: IFFALSE 16522
// SetRestrict ( i , side , true ) ;
16503: LD_VAR 0 4
16507: PPUSH
16508: LD_VAR 0 3
16512: PPUSH
16513: LD_INT 1
16515: PPUSH
16516: CALL_OW 324
16520: GO 16500
16522: POP
16523: POP
// end ; end ; end ;
16524: GO 12529
16526: POP
16527: POP
// end ;
16528: LD_VAR 0 2
16532: RET
