// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , def_win_rules , tech_level ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// if Multiplayer then
  72: LD_OWVAR 4
  76: IFFALSE 150
// begin Game_Type := mp_game_type ;
  78: LD_ADDR_EXP 18
  82: PUSH
  83: LD_OWVAR 6
  87: ST_TO_ADDR
// Your_Side := mp_player_side ;
  88: LD_ADDR_OWVAR 2
  92: PUSH
  93: LD_OWVAR 7
  97: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  98: LD_ADDR_EXP 39
 102: PUSH
 103: LD_OWVAR 17
 107: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 108: LD_ADDR_EXP 36
 112: PUSH
 113: LD_OWVAR 15
 117: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 118: LD_ADDR_EXP 40
 122: PUSH
 123: LD_OWVAR 16
 127: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 128: LD_ADDR_EXP 38
 132: PUSH
 133: CALL 0 0 0
 137: ST_TO_ADDR
// Teams := mp_teams ;
 138: LD_ADDR_EXP 37
 142: PUSH
 143: LD_OWVAR 12
 147: ST_TO_ADDR
// end else
 148: GO 371
// begin Game_Type := 1 ;
 150: LD_ADDR_EXP 18
 154: PUSH
 155: LD_INT 1
 157: ST_TO_ADDR
// Your_Side := 1 ;
 158: LD_ADDR_OWVAR 2
 162: PUSH
 163: LD_INT 1
 165: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 166: LD_ADDR_EXP 39
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 4
 182: PUSH
 183: LD_INT 5
 185: PUSH
 186: LD_INT 6
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 205: LD_ADDR_EXP 36
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: LD_INT 2
 215: PUSH
 216: LD_INT 3
 218: PUSH
 219: LD_INT 4
 221: PUSH
 222: LD_INT 5
 224: PUSH
 225: LD_INT 6
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: LD_INT 0
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 244: LD_ADDR_EXP 40
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: LD_INT 3
 257: PUSH
 258: LD_INT 1
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: LD_INT 3
 266: PUSH
 267: LD_INT 0
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 283: LD_ADDR_EXP 38
 287: PUSH
 288: LD_INT 0
 290: PUSH
 291: LD_INT 0
 293: PUSH
 294: LD_INT 0
 296: PUSH
 297: LD_INT 0
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 0
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 322: LD_ADDR_EXP 37
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: PUSH
 333: LD_INT 2
 335: PUSH
 336: EMPTY
 337: LIST
 338: PUSH
 339: LD_INT 3
 341: PUSH
 342: EMPTY
 343: LIST
 344: PUSH
 345: LD_INT 4
 347: PUSH
 348: EMPTY
 349: LIST
 350: PUSH
 351: LD_INT 5
 353: PUSH
 354: EMPTY
 355: LIST
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: EMPTY
 361: LIST
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 371: LD_ADDR_EXP 41
 375: PUSH
 376: LD_EXP 36
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: DIFF
 387: PUSH
 388: LD_INT 1
 390: GREATER
 391: ST_TO_ADDR
// if Multiplayer then
 392: LD_OWVAR 4
 396: IFFALSE 629
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_EXP 1
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 411: LD_ADDR_EXP 2
 415: PUSH
 416: LD_INT 1
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 424: LD_ADDR_EXP 3
 428: PUSH
 429: LD_INT 2
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 437: LD_ADDR_EXP 4
 441: PUSH
 442: LD_INT 3
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 450: LD_ADDR_EXP 5
 454: PUSH
 455: LD_INT 4
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 463: LD_ADDR_EXP 6
 467: PUSH
 468: LD_INT 5
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 476: LD_ADDR_EXP 7
 480: PUSH
 481: LD_INT 6
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 489: LD_ADDR_EXP 8
 493: PUSH
 494: LD_INT 10
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 502: LD_ADDR_EXP 9
 506: PUSH
 507: LD_INT 11
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 515: LD_ADDR_EXP 10
 519: PUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 426
 527: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 528: LD_ADDR_EXP 11
 532: PUSH
 533: LD_INT 13
 535: PPUSH
 536: CALL_OW 426
 540: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 541: LD_ADDR_EXP 12
 545: PUSH
 546: LD_INT 14
 548: PPUSH
 549: CALL_OW 426
 553: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 554: LD_ADDR_EXP 13
 558: PUSH
 559: LD_INT 15
 561: PPUSH
 562: CALL_OW 426
 566: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 567: LD_ADDR_EXP 14
 571: PUSH
 572: LD_INT 16
 574: PPUSH
 575: CALL_OW 426
 579: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 580: LD_ADDR_EXP 15
 584: PUSH
 585: LD_INT 17
 587: PPUSH
 588: CALL_OW 426
 592: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 593: LD_ADDR_EXP 16
 597: PUSH
 598: LD_INT 20
 600: PPUSH
 601: CALL_OW 426
 605: ST_TO_ADDR
// def_win_rules := 0 ;
 606: LD_ADDR_EXP 34
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 614: LD_ADDR_EXP 35
 618: PUSH
 619: LD_INT 23
 621: PPUSH
 622: CALL_OW 426
 626: ST_TO_ADDR
// end else
 627: GO 777
// begin Randomize ;
 629: CALL_OW 10
// def_base_level := 2 ;
 633: LD_ADDR_EXP 1
 637: PUSH
 638: LD_INT 2
 640: ST_TO_ADDR
// def_amount_of_people := 0 ;
 641: LD_ADDR_EXP 2
 645: PUSH
 646: LD_INT 0
 648: ST_TO_ADDR
// def_skill_level := 1 ;
 649: LD_ADDR_EXP 3
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// def_starting_resources := 2 ;
 657: LD_ADDR_EXP 4
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_shipments_density := 1 ;
 665: LD_ADDR_EXP 5
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 673: LD_ADDR_EXP 6
 677: PUSH
 678: LD_INT 0
 680: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 681: LD_ADDR_EXP 7
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_shared_vision := 1 ;
 689: LD_ADDR_EXP 8
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_morale_flags := 1 ;
 697: LD_ADDR_EXP 9
 701: PUSH
 702: LD_INT 1
 704: ST_TO_ADDR
// def_siberite_detection := 1 ;
 705: LD_ADDR_EXP 10
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_people_respawning := 2 ;
 713: LD_ADDR_EXP 11
 717: PUSH
 718: LD_INT 2
 720: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 721: LD_ADDR_EXP 12
 725: PUSH
 726: LD_INT 3
 728: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 729: LD_ADDR_EXP 13
 733: PUSH
 734: LD_INT 0
 736: ST_TO_ADDR
// def_public_score := 0 ;
 737: LD_ADDR_EXP 14
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 15
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_builduptime := 1 ;
 753: LD_ADDR_EXP 16
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_win_rules := 0 ;
 761: LD_ADDR_EXP 34
 765: PUSH
 766: LD_INT 0
 768: ST_TO_ADDR
// tech_level := 0 ;
 769: LD_ADDR_EXP 35
 773: PUSH
 774: LD_INT 0
 776: ST_TO_ADDR
// end ; if isSGUI then
 777: LD_OWVAR 83
 781: IFFALSE 789
// setMpTechs ( ) else
 783: CALL 7603 0 0
 787: GO 802
// SetMpTechLevel ( tech_level + 1 ) ;
 789: LD_EXP 35
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: PPUSH
 798: CALL 7750 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 802: LD_ADDR_EXP 19
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_EXP 1
 825: PUSH
 826: LD_INT 1
 828: PLUS
 829: ARRAY
 830: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 831: LD_ADDR_EXP 20
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: PUSH
 850: LD_EXP 1
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: ARRAY
 859: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 860: LD_ADDR_EXP 21
 864: PUSH
 865: LD_INT 9
 867: PUSH
 868: LD_INT 12
 870: PUSH
 871: LD_INT 15
 873: PUSH
 874: LD_INT 24
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_EXP 2
 887: PUSH
 888: LD_INT 1
 890: PLUS
 891: ARRAY
 892: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
 893: LD_ADDR_EXP 22
 897: PUSH
 898: LD_INT 2
 900: PUSH
 901: LD_INT 3
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: LD_INT 6
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: PUSH
 916: LD_EXP 3
 920: PUSH
 921: LD_INT 1
 923: PLUS
 924: ARRAY
 925: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 926: LD_ADDR_EXP 24
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: LD_INT 0
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: LIST
 944: PUSH
 945: LD_INT 30
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: LD_INT 0
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 50
 961: PUSH
 962: LD_INT 20
 964: PUSH
 965: LD_INT 0
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: LD_INT 80
 975: PUSH
 976: LD_INT 40
 978: PUSH
 979: LD_INT 20
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_EXP 4
 997: PUSH
 998: LD_INT 1
1000: PLUS
1001: ARRAY
1002: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1003: LD_ADDR_EXP 23
1007: PUSH
1008: LD_INT 10
1010: PUSH
1011: EMPTY
1012: LIST
1013: PUSH
1014: LD_INT 7
1016: PUSH
1017: LD_INT 14
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 6
1026: PUSH
1027: LD_INT 12
1029: PUSH
1030: LD_INT 18
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: LD_INT 5
1040: PUSH
1041: LD_INT 10
1043: PUSH
1044: LD_INT 15
1046: PUSH
1047: LD_INT 20
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 4
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1072: LD_ADDR_EXP 25
1076: PUSH
1077: LD_INT 150
1079: PUSH
1080: LD_INT 125
1082: PUSH
1083: LD_INT 100
1085: PUSH
1086: LD_INT 50
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: LD_EXP 5
1099: PUSH
1100: LD_INT 1
1102: PLUS
1103: ARRAY
1104: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: LD_INT 10500
1115: PUSH
1116: LD_INT 6300
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_EXP 11
1128: PUSH
1129: LD_INT 1
1131: PLUS
1132: ARRAY
1133: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1134: LD_ADDR_EXP 30
1138: PUSH
1139: LD_INT 0
1141: PUSH
1142: LD_INT 31500
1144: PUSH
1145: LD_INT 10500
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_EXP 11
1157: PUSH
1158: LD_INT 1
1160: PLUS
1161: ARRAY
1162: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1163: LD_ADDR_EXP 27
1167: PUSH
1168: LD_INT 0
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_EXP 12
1190: PUSH
1191: LD_INT 1
1193: PLUS
1194: ARRAY
1195: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1196: LD_ADDR_EXP 28
1200: PUSH
1201: LD_INT 30
1203: PUSH
1204: LD_INT 50
1206: PUSH
1207: LD_INT 80
1209: PUSH
1210: LD_INT 100
1212: PUSH
1213: LD_INT 130
1215: PUSH
1216: LD_INT 150
1218: PUSH
1219: LD_INT 200
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: LD_EXP 13
1235: PUSH
1236: LD_INT 1
1238: PLUS
1239: ARRAY
1240: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1241: LD_ADDR_EXP 26
1245: PUSH
1246: LD_INT 1
1248: NEG
1249: PUSH
1250: LD_INT 350
1252: PUSH
1253: LD_INT 700
1255: PUSH
1256: LD_INT 1400
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_EXP 9
1273: PUSH
1274: LD_INT 1
1276: PLUS
1277: ARRAY
1278: ST_TO_ADDR
// battle_flags_id := [ ] ;
1279: LD_ADDR_EXP 49
1283: PUSH
1284: EMPTY
1285: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1286: LD_ADDR_EXP 31
1290: PUSH
1291: LD_INT 0
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 32
1305: PUSH
1306: LD_INT 1
1308: PLUS
1309: ARRAY
1310: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1311: LD_ADDR_EXP 33
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: LD_INT 63000
1324: PUSH
1325: LD_INT 126000
1327: PUSH
1328: LD_INT 189000
1330: PUSH
1331: LD_INT 252000
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: PUSH
1342: LD_EXP 15
1346: PUSH
1347: LD_INT 1
1349: PLUS
1350: ARRAY
1351: ST_TO_ADDR
// end ;
1352: LD_VAR 0 1
1356: RET
// function init_map ; var i , j ; begin
1357: LD_INT 0
1359: PPUSH
1360: PPUSH
1361: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1362: LD_ADDR_EXP 45
1366: PUSH
1367: LD_INT 12
1369: PUSH
1370: LD_INT 4
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 45
1379: PUSH
1380: LD_INT 81
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_INT 116
1389: PUSH
1390: LD_INT 195
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PUSH
1397: LD_INT 142
1399: PUSH
1400: LD_INT 4
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: PUSH
1407: LD_INT 201
1409: PUSH
1410: LD_INT 102
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 234
1419: PUSH
1420: LD_INT 194
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1435: LD_ADDR_EXP 46
1439: PUSH
1440: LD_INT 12
1442: PUSH
1443: LD_INT 4
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 16
1452: PUSH
1453: LD_INT 25
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 45
1466: PUSH
1467: LD_INT 81
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 60
1476: PUSH
1477: LD_INT 102
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 116
1490: PUSH
1491: LD_INT 195
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 92
1500: PUSH
1501: LD_INT 167
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 142
1514: PUSH
1515: LD_INT 4
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 167
1524: PUSH
1525: LD_INT 24
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 201
1538: PUSH
1539: LD_INT 102
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 190
1548: PUSH
1549: LD_INT 77
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 234
1562: PUSH
1563: LD_INT 194
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 237
1572: PUSH
1573: LD_INT 171
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1592: LD_ADDR_EXP 47
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: LD_INT 10
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 51
1609: PUSH
1610: LD_INT 93
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 102
1619: PUSH
1620: LD_INT 187
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 158
1629: PUSH
1630: LD_INT 6
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 203
1639: PUSH
1640: LD_INT 93
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 252
1649: PUSH
1650: LD_INT 194
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1665: LD_ADDR_EXP 48
1669: PUSH
1670: LD_INT 10
1672: PUSH
1673: LD_INT 10
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 36
1682: PUSH
1683: LD_INT 10
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 51
1696: PUSH
1697: LD_INT 93
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 72
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 102
1720: PUSH
1721: LD_INT 187
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 93
1730: PUSH
1731: LD_INT 175
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PUSH
1742: LD_INT 158
1744: PUSH
1745: LD_INT 6
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 147
1754: PUSH
1755: LD_INT 5
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 203
1768: PUSH
1769: LD_INT 93
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 173
1778: PUSH
1779: LD_INT 71
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: LD_INT 252
1792: PUSH
1793: LD_INT 194
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 243
1802: PUSH
1803: LD_INT 177
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: LD_INT 23
1829: PUSH
1830: LD_INT 15
1832: PUSH
1833: LD_INT 2
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 56
1843: PUSH
1844: LD_INT 85
1846: PUSH
1847: LD_INT 1
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 110
1857: PUSH
1858: LD_INT 177
1860: PUSH
1861: LD_INT 3
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 157
1871: PUSH
1872: LD_INT 13
1874: PUSH
1875: LD_INT 3
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 187
1885: PUSH
1886: LD_INT 87
1888: PUSH
1889: LD_INT 5
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 231
1899: PUSH
1900: LD_INT 181
1902: PUSH
1903: LD_INT 5
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
1919: LD_ADDR_EXP 44
1923: PUSH
1924: LD_INT 30
1926: PUSH
1927: LD_INT 22
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 58
1936: PUSH
1937: LD_INT 82
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 113
1946: PUSH
1947: LD_INT 180
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 151
1956: PUSH
1957: LD_INT 24
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 183
1966: PUSH
1967: LD_INT 90
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 223
1976: PUSH
1977: LD_INT 180
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
1992: LD_ADDR_EXP 43
1996: PUSH
1997: LD_INT 33
1999: PUSH
2000: LD_INT 12
2002: PUSH
2003: LD_INT 5
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 42
2013: PUSH
2014: LD_INT 29
2016: PUSH
2017: LD_INT 4
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 36
2027: PUSH
2028: LD_INT 20
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 72
2046: PUSH
2047: LD_INT 91
2049: PUSH
2050: LD_INT 4
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 65
2060: PUSH
2061: LD_INT 78
2063: PUSH
2064: LD_INT 4
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 75
2074: PUSH
2075: LD_INT 100
2077: PUSH
2078: LD_INT 3
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 102
2093: PUSH
2094: LD_INT 165
2096: PUSH
2097: LD_INT 3
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 122
2107: PUSH
2108: LD_INT 176
2110: PUSH
2111: LD_INT 4
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 120
2121: PUSH
2122: LD_INT 184
2124: PUSH
2125: LD_INT 4
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 134
2140: PUSH
2141: LD_INT 16
2143: PUSH
2144: LD_INT 1
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 132
2154: PUSH
2155: LD_INT 5
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: PUSH
2166: LD_INT 157
2168: PUSH
2169: LD_INT 27
2171: PUSH
2172: LD_INT 5
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 172
2187: PUSH
2188: LD_INT 77
2190: PUSH
2191: LD_INT 1
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 175
2201: PUSH
2202: LD_INT 96
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 192
2215: PUSH
2216: LD_INT 104
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 216
2234: PUSH
2235: LD_INT 179
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: LIST
2245: PUSH
2246: LD_INT 208
2248: PUSH
2249: LD_INT 160
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 208
2262: PUSH
2263: LD_INT 171
2265: PUSH
2266: LD_INT 2
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: ST_TO_ADDR
// for i = 1 to 6 do
2287: LD_ADDR_VAR 0 2
2291: PUSH
2292: DOUBLE
2293: LD_INT 1
2295: DEC
2296: ST_TO_ADDR
2297: LD_INT 6
2299: PUSH
2300: FOR_TO
2301: IFFALSE 2398
// if def_extra_oil_deposits then
2303: LD_EXP 6
2307: IFFALSE 2359
// for j in extra_oil_deposits_locations [ i ] do
2309: LD_ADDR_VAR 0 3
2313: PUSH
2314: LD_EXP 46
2318: PUSH
2319: LD_VAR 0 2
2323: ARRAY
2324: PUSH
2325: FOR_IN
2326: IFFALSE 2355
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2328: LD_VAR 0 3
2332: PUSH
2333: LD_INT 1
2335: ARRAY
2336: PPUSH
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
2353: GO 2325
2355: POP
2356: POP
2357: GO 2396
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2359: LD_EXP 45
2363: PUSH
2364: LD_VAR 0 2
2368: ARRAY
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: LD_EXP 45
2378: PUSH
2379: LD_VAR 0 2
2383: ARRAY
2384: PUSH
2385: LD_INT 2
2387: ARRAY
2388: PPUSH
2389: LD_INT 2
2391: PPUSH
2392: CALL_OW 62
2396: GO 2300
2398: POP
2399: POP
// if def_extra_sib_deposits then
2400: LD_EXP 7
2404: IFFALSE 2523
// for i = 1 to 6 do
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: DOUBLE
2412: LD_INT 1
2414: DEC
2415: ST_TO_ADDR
2416: LD_INT 6
2418: PUSH
2419: FOR_TO
2420: IFFALSE 2521
// if def_extra_sib_deposits = 2 then
2422: LD_EXP 7
2426: PUSH
2427: LD_INT 2
2429: EQUAL
2430: IFFALSE 2482
// for j in extra_sib_deposits_locations [ i ] do
2432: LD_ADDR_VAR 0 3
2436: PUSH
2437: LD_EXP 48
2441: PUSH
2442: LD_VAR 0 2
2446: ARRAY
2447: PUSH
2448: FOR_IN
2449: IFFALSE 2478
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2451: LD_VAR 0 3
2455: PUSH
2456: LD_INT 1
2458: ARRAY
2459: PPUSH
2460: LD_VAR 0 3
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 3
2471: PPUSH
2472: CALL_OW 62
2476: GO 2448
2478: POP
2479: POP
2480: GO 2519
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2482: LD_EXP 47
2486: PUSH
2487: LD_VAR 0 2
2491: ARRAY
2492: PUSH
2493: LD_INT 1
2495: ARRAY
2496: PPUSH
2497: LD_EXP 47
2501: PUSH
2502: LD_VAR 0 2
2506: ARRAY
2507: PUSH
2508: LD_INT 2
2510: ARRAY
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: CALL_OW 62
2519: GO 2419
2521: POP
2522: POP
// end ;
2523: LD_VAR 0 1
2527: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2528: LD_INT 0
2530: PPUSH
2531: PPUSH
2532: PPUSH
// if not Team_Game then
2533: LD_EXP 41
2537: NOT
2538: IFFALSE 2636
// begin for i = 1 to 8 do
2540: LD_ADDR_VAR 0 2
2544: PUSH
2545: DOUBLE
2546: LD_INT 1
2548: DEC
2549: ST_TO_ADDR
2550: LD_INT 8
2552: PUSH
2553: FOR_TO
2554: IFFALSE 2632
// for j = 1 to 8 do
2556: LD_ADDR_VAR 0 3
2560: PUSH
2561: DOUBLE
2562: LD_INT 1
2564: DEC
2565: ST_TO_ADDR
2566: LD_INT 8
2568: PUSH
2569: FOR_TO
2570: IFFALSE 2628
// if i <> j then
2572: LD_VAR 0 2
2576: PUSH
2577: LD_VAR 0 3
2581: NONEQUAL
2582: IFFALSE 2606
// SetAttitude ( i , j , att_neutral , true ) else
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 3
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: CALL_OW 80
2604: GO 2626
// SetAttitude ( i , j , att_friend , true ) ;
2606: LD_VAR 0 2
2610: PPUSH
2611: LD_VAR 0 3
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL_OW 80
2626: GO 2569
2628: POP
2629: POP
2630: GO 2553
2632: POP
2633: POP
// end else
2634: GO 2811
// begin if def_shared_vision then
2636: LD_EXP 8
2640: IFFALSE 2705
// begin for i in Teams do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: LD_EXP 37
2651: PUSH
2652: FOR_IN
2653: IFFALSE 2703
// for j = 2 to i do
2655: LD_ADDR_VAR 0 3
2659: PUSH
2660: DOUBLE
2661: LD_INT 2
2663: DEC
2664: ST_TO_ADDR
2665: LD_VAR 0 2
2669: PUSH
2670: FOR_TO
2671: IFFALSE 2699
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2673: LD_VAR 0 2
2677: PUSH
2678: LD_VAR 0 3
2682: ARRAY
2683: PPUSH
2684: LD_VAR 0 2
2688: PUSH
2689: LD_INT 1
2691: ARRAY
2692: PPUSH
2693: CALL_OW 343
2697: GO 2670
2699: POP
2700: POP
2701: GO 2652
2703: POP
2704: POP
// end ; for i = 1 to 8 do
2705: LD_ADDR_VAR 0 2
2709: PUSH
2710: DOUBLE
2711: LD_INT 1
2713: DEC
2714: ST_TO_ADDR
2715: LD_INT 8
2717: PUSH
2718: FOR_TO
2719: IFFALSE 2809
// for j = 1 to 8 do
2721: LD_ADDR_VAR 0 3
2725: PUSH
2726: DOUBLE
2727: LD_INT 1
2729: DEC
2730: ST_TO_ADDR
2731: LD_INT 8
2733: PUSH
2734: FOR_TO
2735: IFFALSE 2805
// if Side_Teams [ i ] = Side_Teams [ j ] then
2737: LD_EXP 36
2741: PUSH
2742: LD_VAR 0 2
2746: ARRAY
2747: PUSH
2748: LD_EXP 36
2752: PUSH
2753: LD_VAR 0 3
2757: ARRAY
2758: EQUAL
2759: IFFALSE 2783
// SetAttitude ( i , j , att_friend , true ) else
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_VAR 0 3
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: CALL_OW 80
2781: GO 2803
// SetAttitude ( i , j , att_enemy , true ) ;
2783: LD_VAR 0 2
2787: PPUSH
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 2
2795: PPUSH
2796: LD_INT 1
2798: PPUSH
2799: CALL_OW 80
2803: GO 2734
2805: POP
2806: POP
2807: GO 2718
2809: POP
2810: POP
// end ; end ;
2811: LD_VAR 0 1
2815: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2816: LD_INT 0
2818: PPUSH
2819: PPUSH
2820: PPUSH
2821: PPUSH
// result := [ ] ;
2822: LD_ADDR_VAR 0 7
2826: PUSH
2827: EMPTY
2828: ST_TO_ADDR
// for i := 1 to count do
2829: LD_ADDR_VAR 0 8
2833: PUSH
2834: DOUBLE
2835: LD_INT 1
2837: DEC
2838: ST_TO_ADDR
2839: LD_VAR 0 1
2843: PUSH
2844: FOR_TO
2845: IFFALSE 3263
// begin uc_direction := Rand ( 0 , 5 ) ;
2847: LD_ADDR_OWVAR 24
2851: PUSH
2852: LD_INT 0
2854: PPUSH
2855: LD_INT 5
2857: PPUSH
2858: CALL_OW 12
2862: ST_TO_ADDR
// if commander then
2863: LD_LOC 1
2867: IFFALSE 2976
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2869: LD_ADDR_OWVAR 26
2873: PUSH
2874: LD_OWVAR 19
2878: PUSH
2879: LD_OWVAR 20
2883: ARRAY
2884: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2885: LD_INT 1
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 12
2895: PPUSH
2896: LD_VAR 0 2
2900: PPUSH
2901: LD_EXP 22
2905: PUSH
2906: LD_INT 2
2908: PLUS
2909: PPUSH
2910: CALL_OW 380
// hc_importance := 105 ;
2914: LD_ADDR_OWVAR 32
2918: PUSH
2919: LD_INT 105
2921: ST_TO_ADDR
// commander := false ;
2922: LD_ADDR_LOC 1
2926: PUSH
2927: LD_INT 0
2929: ST_TO_ADDR
// if Multiplayer then
2930: LD_OWVAR 4
2934: IFFALSE 2974
// begin hc_gallery := MULTIAVATARS ;
2936: LD_ADDR_OWVAR 33
2940: PUSH
2941: LD_STRING MULTIAVATARS
2943: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2944: LD_ADDR_OWVAR 34
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 525
2958: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2959: LD_ADDR_OWVAR 27
2963: PUSH
2964: LD_OWVAR 20
2968: PPUSH
2969: CALL_OW 526
2973: ST_TO_ADDR
// end ; end else
2974: GO 3039
// begin hc_name :=  ;
2976: LD_ADDR_OWVAR 26
2980: PUSH
2981: LD_STRING 
2983: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2984: LD_INT 1
2986: PPUSH
2987: LD_INT 2
2989: PPUSH
2990: CALL_OW 12
2994: PPUSH
2995: LD_VAR 0 2
2999: PPUSH
3000: LD_EXP 22
3004: PPUSH
3005: CALL_OW 380
// hc_importance := 0 ;
3009: LD_ADDR_OWVAR 32
3013: PUSH
3014: LD_INT 0
3016: ST_TO_ADDR
// if Multiplayer then
3017: LD_OWVAR 4
3021: IFFALSE 3039
// begin hc_gallery :=  ;
3023: LD_ADDR_OWVAR 33
3027: PUSH
3028: LD_STRING 
3030: ST_TO_ADDR
// hc_face_number := 0 ;
3031: LD_ADDR_OWVAR 34
3035: PUSH
3036: LD_INT 0
3038: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3039: LD_ADDR_VAR 0 10
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if global_defined then
3049: LD_LOC 3
3053: IFFALSE 3193
// begin if ( cl = class_soldier ) then
3055: LD_VAR 0 2
3059: PUSH
3060: LD_INT 1
3062: EQUAL
3063: IFFALSE 3083
// j := i + soldiers_created else
3065: LD_ADDR_VAR 0 9
3069: PUSH
3070: LD_VAR 0 8
3074: PUSH
3075: LD_LOC 4
3079: PLUS
3080: ST_TO_ADDR
3081: GO 3093
// j := i ;
3083: LD_ADDR_VAR 0 9
3087: PUSH
3088: LD_VAR 0 8
3092: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3093: LD_LOC 2
3097: PUSH
3098: LD_VAR 0 2
3102: ARRAY
3103: PUSH
3104: LD_VAR 0 9
3108: ARRAY
3109: PPUSH
3110: LD_VAR 0 10
3114: PPUSH
3115: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3119: LD_VAR 0 10
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: LD_LOC 2
3131: PUSH
3132: LD_VAR 0 2
3136: ARRAY
3137: PUSH
3138: LD_VAR 0 9
3142: ARRAY
3143: PPUSH
3144: LD_INT 2
3146: PPUSH
3147: CALL_OW 260
3151: PPUSH
3152: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3156: LD_VAR 0 10
3160: PPUSH
3161: LD_INT 1
3163: PPUSH
3164: LD_LOC 2
3168: PUSH
3169: LD_VAR 0 2
3173: ARRAY
3174: PUSH
3175: LD_VAR 0 9
3179: ARRAY
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: CALL_OW 260
3188: PPUSH
3189: CALL_OW 239
// end ; if building then
3193: LD_VAR 0 6
3197: IFFALSE 3215
// PlaceHumanInUnit ( un , building ) else
3199: LD_VAR 0 10
3203: PPUSH
3204: LD_VAR 0 6
3208: PPUSH
3209: CALL_OW 52
3213: GO 3242
// PlaceUnitXYR ( un , x , y , r , false ) ;
3215: LD_VAR 0 10
3219: PPUSH
3220: LD_VAR 0 3
3224: PPUSH
3225: LD_VAR 0 4
3229: PPUSH
3230: LD_VAR 0 5
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 50
// result := result ^ [ un ] ;
3242: LD_ADDR_VAR 0 7
3246: PUSH
3247: LD_VAR 0 7
3251: PUSH
3252: LD_VAR 0 10
3256: PUSH
3257: EMPTY
3258: LIST
3259: ADD
3260: ST_TO_ADDR
// end ;
3261: GO 2844
3263: POP
3264: POP
// if not global_defined then
3265: LD_LOC 3
3269: NOT
3270: IFFALSE 3348
// if ( global_units >= cl ) then
3272: LD_LOC 2
3276: PUSH
3277: LD_VAR 0 2
3281: GREATEREQUAL
3282: IFFALSE 3323
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3284: LD_ADDR_LOC 2
3288: PUSH
3289: LD_LOC 2
3293: PPUSH
3294: LD_VAR 0 2
3298: PPUSH
3299: LD_LOC 2
3303: PUSH
3304: LD_VAR 0 2
3308: ARRAY
3309: PUSH
3310: LD_VAR 0 7
3314: ADD
3315: PPUSH
3316: CALL_OW 1
3320: ST_TO_ADDR
3321: GO 3348
// global_units := Replace ( global_units , cl , result ) ;
3323: LD_ADDR_LOC 2
3327: PUSH
3328: LD_LOC 2
3332: PPUSH
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_VAR 0 7
3342: PPUSH
3343: CALL_OW 1
3347: ST_TO_ADDR
// end ;
3348: LD_VAR 0 7
3352: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3353: LD_INT 0
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
3360: PPUSH
3361: PPUSH
3362: PPUSH
3363: PPUSH
// if side in [ 0 , 9 ] then
3364: LD_VAR 0 1
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: LD_INT 9
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: IN
3379: IFFALSE 3383
// exit ;
3381: GO 4400
// pos := Side_Positions [ side ] ;
3383: LD_ADDR_VAR 0 3
3387: PUSH
3388: LD_EXP 39
3392: PUSH
3393: LD_VAR 0 1
3397: ARRAY
3398: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_EXP 40
3408: PUSH
3409: LD_VAR 0 1
3413: ARRAY
3414: ST_TO_ADDR
// uc_side := side ;
3415: LD_ADDR_OWVAR 20
3419: PUSH
3420: LD_VAR 0 1
3424: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3425: LD_ADDR_VAR 0 4
3429: PUSH
3430: LD_EXP 42
3434: PUSH
3435: LD_VAR 0 3
3439: ARRAY
3440: PUSH
3441: LD_INT 1
3443: ARRAY
3444: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3445: LD_ADDR_VAR 0 5
3449: PUSH
3450: LD_EXP 42
3454: PUSH
3455: LD_VAR 0 3
3459: ARRAY
3460: PUSH
3461: LD_INT 2
3463: ARRAY
3464: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3465: LD_ADDR_VAR 0 6
3469: PUSH
3470: LD_EXP 42
3474: PUSH
3475: LD_VAR 0 3
3479: ARRAY
3480: PUSH
3481: LD_INT 3
3483: ARRAY
3484: ST_TO_ADDR
// if is_depot then
3485: LD_EXP 19
3489: IFFALSE 3622
// begin bc_type = b_depot ;
3491: LD_ADDR_OWVAR 42
3495: PUSH
3496: LD_INT 0
3498: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3499: LD_ADDR_VAR 0 10
3503: PUSH
3504: LD_VAR 0 4
3508: PPUSH
3509: LD_VAR 0 5
3513: PPUSH
3514: LD_VAR 0 6
3518: PPUSH
3519: CALL_OW 47
3523: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3524: LD_VAR 0 10
3528: PPUSH
3529: LD_STRING @
3531: PUSH
3532: LD_VAR 0 1
3536: STR
3537: PPUSH
3538: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3542: LD_VAR 0 10
3546: PPUSH
3547: CALL_OW 274
3551: PPUSH
3552: LD_INT 1
3554: PPUSH
3555: LD_EXP 24
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3568: LD_VAR 0 10
3572: PPUSH
3573: CALL_OW 274
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: LD_EXP 24
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3594: LD_VAR 0 10
3598: PPUSH
3599: CALL_OW 274
3603: PPUSH
3604: LD_INT 3
3606: PPUSH
3607: LD_EXP 24
3611: PUSH
3612: LD_INT 3
3614: ARRAY
3615: PPUSH
3616: CALL_OW 277
// end else
3620: GO 3766
// begin for i := 1 to 3 do
3622: LD_ADDR_VAR 0 7
3626: PUSH
3627: DOUBLE
3628: LD_INT 1
3630: DEC
3631: ST_TO_ADDR
3632: LD_INT 3
3634: PUSH
3635: FOR_TO
3636: IFFALSE 3764
// begin r := starting_resources [ i ] ;
3638: LD_ADDR_VAR 0 8
3642: PUSH
3643: LD_EXP 24
3647: PUSH
3648: LD_VAR 0 7
3652: ARRAY
3653: ST_TO_ADDR
// while r >= 10 do
3654: LD_VAR 0 8
3658: PUSH
3659: LD_INT 10
3661: GREATEREQUAL
3662: IFFALSE 3762
// if r > 50 then
3664: LD_VAR 0 8
3668: PUSH
3669: LD_INT 50
3671: GREATER
3672: IFFALSE 3718
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3674: LD_VAR 0 7
3678: PPUSH
3679: LD_INT 5
3681: PPUSH
3682: LD_VAR 0 4
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_INT 0
3697: PPUSH
3698: CALL_OW 60
// r := r - 50 ;
3702: LD_ADDR_VAR 0 8
3706: PUSH
3707: LD_VAR 0 8
3711: PUSH
3712: LD_INT 50
3714: MINUS
3715: ST_TO_ADDR
// end else
3716: GO 3760
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3718: LD_VAR 0 7
3722: PPUSH
3723: LD_VAR 0 8
3727: PUSH
3728: LD_INT 10
3730: DIV
3731: PPUSH
3732: LD_VAR 0 4
3736: PPUSH
3737: LD_VAR 0 5
3741: PPUSH
3742: LD_INT 4
3744: PPUSH
3745: LD_INT 0
3747: PPUSH
3748: CALL_OW 60
// r := 0 ;
3752: LD_ADDR_VAR 0 8
3756: PUSH
3757: LD_INT 0
3759: ST_TO_ADDR
// end ;
3760: GO 3654
// end ;
3762: GO 3635
3764: POP
3765: POP
// end ; for r in starting_crates do
3766: LD_ADDR_VAR 0 8
3770: PUSH
3771: LD_EXP 23
3775: PUSH
3776: FOR_IN
3777: IFFALSE 3809
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 5
3784: PPUSH
3785: LD_VAR 0 4
3789: PPUSH
3790: LD_VAR 0 5
3794: PPUSH
3795: LD_VAR 0 8
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 60
3807: GO 3776
3809: POP
3810: POP
// if def_morale_flags then
3811: LD_EXP 9
3815: IFFALSE 3954
// begin x := start_def [ pos ] [ 1 ] ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_EXP 44
3826: PUSH
3827: LD_VAR 0 3
3831: ARRAY
3832: PUSH
3833: LD_INT 1
3835: ARRAY
3836: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3837: LD_ADDR_VAR 0 5
3841: PUSH
3842: LD_EXP 44
3846: PUSH
3847: LD_VAR 0 3
3851: ARRAY
3852: PUSH
3853: LD_INT 2
3855: ARRAY
3856: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3857: LD_VAR 0 4
3861: PPUSH
3862: LD_VAR 0 5
3866: PPUSH
3867: LD_INT 12
3869: PPUSH
3870: LD_INT 2
3872: PPUSH
3873: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3877: LD_ADDR_EXP 49
3881: PUSH
3882: LD_EXP 49
3886: PUSH
3887: LD_VAR 0 1
3891: PPUSH
3892: LD_VAR 0 4
3896: PPUSH
3897: LD_VAR 0 5
3901: PPUSH
3902: LD_INT 1
3904: PUSH
3905: LD_INT 100
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: LD_INT 50
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 3
3924: PUSH
3925: LD_INT 20
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 20
3934: PUSH
3935: LD_INT 100
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PPUSH
3948: CALL_OW 418
3952: ADD
3953: ST_TO_ADDR
// end ; commander := true ;
3954: LD_ADDR_LOC 1
3958: PUSH
3959: LD_INT 1
3961: ST_TO_ADDR
// soldiers_created := 0 ;
3962: LD_ADDR_LOC 4
3966: PUSH
3967: LD_INT 0
3969: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3970: LD_ADDR_VAR 0 7
3974: PUSH
3975: DOUBLE
3976: LD_INT 1
3978: DEC
3979: ST_TO_ADDR
3980: LD_EXP 20
3984: PUSH
3985: FOR_TO
3986: IFFALSE 4139
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3988: LD_ADDR_VAR 0 4
3992: PUSH
3993: LD_EXP 43
3997: PUSH
3998: LD_VAR 0 3
4002: ARRAY
4003: PUSH
4004: LD_VAR 0 7
4008: ARRAY
4009: PUSH
4010: LD_INT 1
4012: ARRAY
4013: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4014: LD_ADDR_VAR 0 5
4018: PUSH
4019: LD_EXP 43
4023: PUSH
4024: LD_VAR 0 3
4028: ARRAY
4029: PUSH
4030: LD_VAR 0 7
4034: ARRAY
4035: PUSH
4036: LD_INT 2
4038: ARRAY
4039: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4040: LD_ADDR_VAR 0 6
4044: PUSH
4045: LD_EXP 43
4049: PUSH
4050: LD_VAR 0 3
4054: ARRAY
4055: PUSH
4056: LD_VAR 0 7
4060: ARRAY
4061: PUSH
4062: LD_INT 3
4064: ARRAY
4065: ST_TO_ADDR
// bc_type := b_breastwork ;
4066: LD_ADDR_OWVAR 42
4070: PUSH
4071: LD_INT 31
4073: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4074: LD_ADDR_VAR 0 9
4078: PUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_VAR 0 5
4088: PPUSH
4089: LD_VAR 0 6
4093: PPUSH
4094: CALL_OW 47
4098: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4099: LD_INT 1
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 0
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: LD_INT 0
4113: PPUSH
4114: LD_VAR 0 9
4118: PPUSH
4119: CALL 2816 0 6
// soldiers_created := soldiers_created + 1 ;
4123: LD_ADDR_LOC 4
4127: PUSH
4128: LD_LOC 4
4132: PUSH
4133: LD_INT 1
4135: PLUS
4136: ST_TO_ADDR
// end ;
4137: GO 3985
4139: POP
4140: POP
// x := start_def [ pos ] [ 1 ] ;
4141: LD_ADDR_VAR 0 4
4145: PUSH
4146: LD_EXP 44
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_INT 1
4159: ARRAY
4160: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4161: LD_ADDR_VAR 0 5
4165: PUSH
4166: LD_EXP 44
4170: PUSH
4171: LD_VAR 0 3
4175: ARRAY
4176: PUSH
4177: LD_INT 2
4179: ARRAY
4180: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4181: LD_LOC 8
4185: PUSH
4186: LD_EXP 20
4190: MINUS
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: LD_VAR 0 4
4199: PPUSH
4200: LD_VAR 0 5
4204: PPUSH
4205: LD_INT 5
4207: PPUSH
4208: LD_INT 0
4210: PPUSH
4211: CALL 2816 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4215: LD_LOC 5
4219: PPUSH
4220: LD_INT 2
4222: PPUSH
4223: LD_VAR 0 4
4227: PPUSH
4228: LD_VAR 0 5
4232: PPUSH
4233: LD_INT 5
4235: PPUSH
4236: LD_INT 0
4238: PPUSH
4239: CALL 2816 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4243: LD_LOC 7
4247: PPUSH
4248: LD_INT 3
4250: PPUSH
4251: LD_VAR 0 4
4255: PPUSH
4256: LD_VAR 0 5
4260: PPUSH
4261: LD_INT 5
4263: PPUSH
4264: LD_INT 0
4266: PPUSH
4267: CALL 2816 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4271: LD_LOC 6
4275: PPUSH
4276: LD_INT 4
4278: PPUSH
4279: LD_VAR 0 4
4283: PPUSH
4284: LD_VAR 0 5
4288: PPUSH
4289: LD_INT 5
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL 2816 0 6
// if def_siberite_detection then
4299: LD_EXP 10
4303: IFFALSE 4320
// SetTech ( tech_SibDet , side , state_researched ) ;
4305: LD_INT 20
4307: PPUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_INT 2
4315: PPUSH
4316: CALL_OW 322
// if def_siberite_bomb = 1 then
4320: LD_EXP 15
4324: PUSH
4325: LD_INT 1
4327: EQUAL
4328: IFFALSE 4362
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4330: LD_INT 25
4332: PPUSH
4333: LD_VAR 0 1
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4345: LD_INT 73
4347: PPUSH
4348: LD_VAR 0 1
4352: PPUSH
4353: LD_INT 1
4355: PPUSH
4356: CALL_OW 322
// end else
4360: GO 4392
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4362: LD_INT 25
4364: PPUSH
4365: LD_VAR 0 1
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4377: LD_INT 73
4379: PPUSH
4380: LD_VAR 0 1
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL_OW 322
// end ; global_defined := true ;
4392: LD_ADDR_LOC 3
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// end ;
4400: LD_VAR 0 2
4404: RET
// every 0 0$1 do
4405: GO 4407
4407: DISABLE
// if ( def_siberite_bomb > 1 ) then
4408: LD_EXP 15
4412: PUSH
4413: LD_INT 1
4415: GREATER
4416: IFFALSE 4431
// begin wait ( siberite_bomb_Delay ) ;
4418: LD_EXP 33
4422: PPUSH
4423: CALL_OW 67
// EnableSibFiss ;
4427: CALL 4432 0 0
// end ;
4431: END
// function EnableSibFiss ; var i ; begin
4432: LD_INT 0
4434: PPUSH
4435: PPUSH
// for i := 1 to 8 do
4436: LD_ADDR_VAR 0 2
4440: PUSH
4441: DOUBLE
4442: LD_INT 1
4444: DEC
4445: ST_TO_ADDR
4446: LD_INT 8
4448: PUSH
4449: FOR_TO
4450: IFFALSE 4496
// if Side_Positions [ i ] then
4452: LD_EXP 39
4456: PUSH
4457: LD_VAR 0 2
4461: ARRAY
4462: IFFALSE 4494
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4464: LD_INT 25
4466: PPUSH
4467: LD_VAR 0 2
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4479: LD_INT 73
4481: PPUSH
4482: LD_VAR 0 2
4486: PPUSH
4487: LD_INT 1
4489: PPUSH
4490: CALL_OW 322
// end ;
4494: GO 4449
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// function prepare_sides ; var i ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
// global_units := [ ] ;
4507: LD_ADDR_LOC 2
4511: PUSH
4512: EMPTY
4513: ST_TO_ADDR
// global_defined := false ;
4514: LD_ADDR_LOC 3
4518: PUSH
4519: LD_INT 0
4521: ST_TO_ADDR
// CountClassMembers ;
4522: CALL 4572 0 0
// for i := 1 to 8 do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 8
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4565
// if Side_Positions [ i ] then
4542: LD_EXP 39
4546: PUSH
4547: LD_VAR 0 2
4551: ARRAY
4552: IFFALSE 4563
// prepare_side ( i ) ;
4554: LD_VAR 0 2
4558: PPUSH
4559: CALL 3353 0 1
4563: GO 4539
4565: POP
4566: POP
// end ;
4567: LD_VAR 0 1
4571: RET
// function CountClassMembers ; var Mode ; begin
4572: LD_INT 0
4574: PPUSH
4575: PPUSH
// if No_Mechs then
4576: LD_EXP 17
4580: IFFALSE 4592
// Mode := 2 else
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: LD_INT 2
4589: ST_TO_ADDR
4590: GO 4600
// Mode := 1 ;
4592: LD_ADDR_VAR 0 2
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// neng := number_of_people ;
4600: LD_ADDR_LOC 5
4604: PUSH
4605: LD_EXP 21
4609: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4610: LD_ADDR_LOC 8
4614: PUSH
4615: LD_LOC 5
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: LD_INT 3
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_VAR 0 2
4634: ARRAY
4635: DIV
4636: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4637: LD_LOC 8
4641: PUSH
4642: LD_EXP 20
4646: LESS
4647: IFFALSE 4659
// nsol := number_of_breastworks ;
4649: LD_ADDR_LOC 8
4653: PUSH
4654: LD_EXP 20
4658: ST_TO_ADDR
// neng := neng - nsol ;
4659: LD_ADDR_LOC 5
4663: PUSH
4664: LD_LOC 5
4668: PUSH
4669: LD_LOC 8
4673: MINUS
4674: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4675: LD_ADDR_LOC 6
4679: PUSH
4680: LD_LOC 5
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: LD_INT 2
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_VAR 0 2
4699: ARRAY
4700: DIV
4701: ST_TO_ADDR
// if ( nsci < 1 ) then
4702: LD_LOC 6
4706: PUSH
4707: LD_INT 1
4709: LESS
4710: IFFALSE 4720
// nsci := 1 ;
4712: LD_ADDR_LOC 6
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// neng := neng - nsci ;
4720: LD_ADDR_LOC 5
4724: PUSH
4725: LD_LOC 5
4729: PUSH
4730: LD_LOC 6
4734: MINUS
4735: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4736: LD_ADDR_LOC 7
4740: PUSH
4741: LD_LOC 5
4745: PUSH
4746: LD_INT 2
4748: DIV
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_VAR 0 2
4761: ARRAY
4762: ST_TO_ADDR
// neng := neng - nmech ;
4763: LD_ADDR_LOC 5
4767: PUSH
4768: LD_LOC 5
4772: PUSH
4773: LD_LOC 7
4777: MINUS
4778: ST_TO_ADDR
// if ( neng < 1 ) then
4779: LD_LOC 5
4783: PUSH
4784: LD_INT 1
4786: LESS
4787: IFFALSE 4797
// neng := 1 ;
4789: LD_ADDR_LOC 5
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// end ;
4797: LD_VAR 0 1
4801: RET
// function Init_Win_Condition ; begin
4802: LD_INT 0
4804: PPUSH
// if Team_Game then
4805: LD_EXP 41
4809: IFFALSE 4816
// enable ( 98 ) else
4811: LD_INT 98
4813: ENABLE_MARKED
4814: GO 4819
// enable ( 99 ) ;
4816: LD_INT 99
4818: ENABLE_MARKED
// case Game_Type of 3 :
4819: LD_EXP 18
4823: PUSH
4824: LD_INT 3
4826: DOUBLE
4827: EQUAL
4828: IFTRUE 4832
4830: GO 4838
4832: POP
// enable ( 100 ) ; end ;
4833: LD_INT 100
4835: ENABLE_MARKED
4836: GO 4839
4838: POP
// end ;
4839: LD_VAR 0 1
4843: RET
// starting begin disable ( 98 ) ;
4844: LD_INT 98
4846: DISABLE_MARKED
// disable ( 99 ) ;
4847: LD_INT 99
4849: DISABLE_MARKED
// disable ( 400 ) ;
4850: LD_INT 400
4852: DISABLE_MARKED
// disable ( 401 ) ;
4853: LD_INT 401
4855: DISABLE_MARKED
// mp_selectmsg := true ;
4856: LD_ADDR_OWVAR 13
4860: PUSH
4861: LD_INT 1
4863: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4864: CALL 68 0 0
// init_map ;
4868: CALL 1357 0 0
// init_respawning ;
4872: CALL 12327 0 0
// set_shared_visions_and_alliances ;
4876: CALL 2528 0 0
// prepare_sides ;
4880: CALL 4503 0 0
// ShowTimer ;
4884: CALL 7181 0 0
// music_nat := Side_Nations [ your_side ] ;
4888: LD_ADDR_OWVAR 71
4892: PUSH
4893: LD_EXP 40
4897: PUSH
4898: LD_OWVAR 2
4902: ARRAY
4903: ST_TO_ADDR
// if IAmSpec then
4904: CALL_OW 531
4908: IFFALSE 4944
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4910: LD_INT 0
4912: PPUSH
4913: LD_INT 0
4915: PPUSH
4916: LD_OWVAR 2
4920: PPUSH
4921: LD_INT 32767
4923: NEG
4924: PPUSH
4925: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
4929: LD_INT 104
4931: PPUSH
4932: LD_INT 69
4934: PPUSH
4935: CALL_OW 86
// enable ( 400 ) ;
4939: LD_INT 400
4941: ENABLE_MARKED
// end else
4942: GO 4998
// begin ResetFog ;
4944: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4948: LD_EXP 44
4952: PUSH
4953: LD_EXP 39
4957: PUSH
4958: LD_OWVAR 2
4962: ARRAY
4963: ARRAY
4964: PUSH
4965: LD_INT 1
4967: ARRAY
4968: PPUSH
4969: LD_EXP 44
4973: PUSH
4974: LD_EXP 39
4978: PUSH
4979: LD_OWVAR 2
4983: ARRAY
4984: ARRAY
4985: PUSH
4986: LD_INT 2
4988: ARRAY
4989: PPUSH
4990: CALL_OW 86
// Init_Win_Condition ;
4994: CALL 4802 0 0
// end ; AnimateTrees ( true ) ;
4998: LD_INT 1
5000: PPUSH
5001: CALL_OW 573
// InitApeman ;
5005: CALL 5707 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5009: LD_ADDR_EXP 60
5013: PUSH
5014: LD_INT 7
5016: PUSH
5017: LD_INT 8
5019: PUSH
5020: LD_INT 9
5022: PUSH
5023: LD_INT 10
5025: PUSH
5026: LD_INT 11
5028: PUSH
5029: LD_INT 12
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// BeginBuildUp ;
5040: CALL 12821 0 0
// end ; end_of_file
5044: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5045: GO 5047
5047: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
5048: LD_INT 4
5050: PPUSH
5051: LD_INT 5
5053: PPUSH
5054: CALL_OW 12
5058: PPUSH
5059: LD_INT 14
5061: PPUSH
5062: LD_INT 1
5064: PPUSH
5065: CALL_OW 55
// enable ;
5069: ENABLE
// end ;
5070: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5071: GO 5073
5073: DISABLE
5074: LD_INT 0
5076: PPUSH
5077: PPUSH
// begin case tick of 1 .. 1 1$0 :
5078: LD_OWVAR 1
5082: PUSH
5083: LD_INT 1
5085: DOUBLE
5086: GREATEREQUAL
5087: IFFALSE 5095
5089: LD_INT 2100
5091: DOUBLE
5092: LESSEQUAL
5093: IFTRUE 5097
5095: GO 5125
5097: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5098: LD_EXP 25
5102: PUSH
5103: LD_INT 100
5105: DIVREAL
5106: PUSH
5107: LD_INT 525
5109: PPUSH
5110: LD_INT 1050
5112: PPUSH
5113: CALL_OW 12
5117: MUL
5118: PPUSH
5119: CALL_OW 67
5123: GO 5427
5125: LD_INT 2100
5127: PUSH
5128: LD_INT 1
5130: PLUS
5131: DOUBLE
5132: GREATEREQUAL
5133: IFFALSE 5141
5135: LD_INT 10500
5137: DOUBLE
5138: LESSEQUAL
5139: IFTRUE 5143
5141: GO 5171
5143: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5144: LD_EXP 25
5148: PUSH
5149: LD_INT 100
5151: DIVREAL
5152: PUSH
5153: LD_INT 1050
5155: PPUSH
5156: LD_INT 1750
5158: PPUSH
5159: CALL_OW 12
5163: MUL
5164: PPUSH
5165: CALL_OW 67
5169: GO 5427
5171: LD_INT 10500
5173: PUSH
5174: LD_INT 1
5176: PLUS
5177: DOUBLE
5178: GREATEREQUAL
5179: IFFALSE 5187
5181: LD_INT 21000
5183: DOUBLE
5184: LESSEQUAL
5185: IFTRUE 5189
5187: GO 5217
5189: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5190: LD_EXP 25
5194: PUSH
5195: LD_INT 100
5197: DIVREAL
5198: PUSH
5199: LD_INT 1750
5201: PPUSH
5202: LD_INT 2100
5204: PPUSH
5205: CALL_OW 12
5209: MUL
5210: PPUSH
5211: CALL_OW 67
5215: GO 5427
5217: LD_INT 21000
5219: PUSH
5220: LD_INT 1
5222: PLUS
5223: DOUBLE
5224: GREATEREQUAL
5225: IFFALSE 5233
5227: LD_INT 42000
5229: DOUBLE
5230: LESSEQUAL
5231: IFTRUE 5235
5233: GO 5263
5235: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5236: LD_EXP 25
5240: PUSH
5241: LD_INT 100
5243: DIVREAL
5244: PUSH
5245: LD_INT 2100
5247: PPUSH
5248: LD_INT 2275
5250: PPUSH
5251: CALL_OW 12
5255: MUL
5256: PPUSH
5257: CALL_OW 67
5261: GO 5427
5263: LD_INT 42000
5265: PUSH
5266: LD_INT 1
5268: PLUS
5269: DOUBLE
5270: GREATEREQUAL
5271: IFFALSE 5279
5273: LD_INT 63000
5275: DOUBLE
5276: LESSEQUAL
5277: IFTRUE 5281
5279: GO 5309
5281: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5282: LD_EXP 25
5286: PUSH
5287: LD_INT 100
5289: DIVREAL
5290: PUSH
5291: LD_INT 2275
5293: PPUSH
5294: LD_INT 2450
5296: PPUSH
5297: CALL_OW 12
5301: MUL
5302: PPUSH
5303: CALL_OW 67
5307: GO 5427
5309: LD_INT 63000
5311: PUSH
5312: LD_INT 1
5314: PLUS
5315: DOUBLE
5316: GREATEREQUAL
5317: IFFALSE 5325
5319: LD_INT 105000
5321: DOUBLE
5322: LESSEQUAL
5323: IFTRUE 5327
5325: GO 5355
5327: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5328: LD_EXP 25
5332: PUSH
5333: LD_INT 100
5335: DIVREAL
5336: PUSH
5337: LD_INT 2450
5339: PPUSH
5340: LD_INT 2800
5342: PPUSH
5343: CALL_OW 12
5347: MUL
5348: PPUSH
5349: CALL_OW 67
5353: GO 5427
5355: LD_INT 105000
5357: PUSH
5358: LD_INT 1
5360: PLUS
5361: DOUBLE
5362: GREATEREQUAL
5363: IFFALSE 5371
5365: LD_INT 630000
5367: DOUBLE
5368: LESSEQUAL
5369: IFTRUE 5373
5371: GO 5401
5373: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5374: LD_EXP 25
5378: PUSH
5379: LD_INT 100
5381: DIVREAL
5382: PUSH
5383: LD_INT 2800
5385: PPUSH
5386: LD_INT 3500
5388: PPUSH
5389: CALL_OW 12
5393: MUL
5394: PPUSH
5395: CALL_OW 67
5399: GO 5427
5401: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5402: LD_EXP 25
5406: PUSH
5407: LD_INT 100
5409: DIVREAL
5410: PUSH
5411: LD_INT 3500
5413: PPUSH
5414: LD_INT 3850
5416: PPUSH
5417: CALL_OW 12
5421: MUL
5422: PPUSH
5423: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5427: LD_ADDR_VAR 0 2
5431: PUSH
5432: LD_INT 3
5434: PPUSH
5435: LD_INT 5
5437: PPUSH
5438: CALL_OW 12
5442: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5443: LD_ADDR_VAR 0 1
5447: PUSH
5448: LD_EXP 39
5452: PUSH
5453: LD_INT 0
5455: PUSH
5456: EMPTY
5457: LIST
5458: DIFF
5459: PUSH
5460: FOR_IN
5461: IFFALSE 5510
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 15 , true ) ;
5463: LD_VAR 0 2
5467: PPUSH
5468: LD_EXP 44
5472: PUSH
5473: LD_VAR 0 1
5477: ARRAY
5478: PUSH
5479: LD_INT 1
5481: ARRAY
5482: PPUSH
5483: LD_EXP 44
5487: PUSH
5488: LD_VAR 0 1
5492: ARRAY
5493: PUSH
5494: LD_INT 2
5496: ARRAY
5497: PPUSH
5498: LD_INT 15
5500: PPUSH
5501: LD_INT 1
5503: PPUSH
5504: CALL_OW 56
5508: GO 5460
5510: POP
5511: POP
// enable ;
5512: ENABLE
// end ; end_of_file
5513: PPOPN 2
5515: END
// every 20 20$00 trigger apemanNumber do
5516: LD_EXP 51
5520: IFFALSE 5553
5522: GO 5524
5524: DISABLE
// begin enable ;
5525: ENABLE
// if apeLevel >= 8 then
5526: LD_EXP 56
5530: PUSH
5531: LD_INT 8
5533: GREATEREQUAL
5534: IFFALSE 5539
// disable else
5536: DISABLE
5537: GO 5553
// apeLevel := apeLevel + 1 ;
5539: LD_ADDR_EXP 56
5543: PUSH
5544: LD_EXP 56
5548: PUSH
5549: LD_INT 1
5551: PLUS
5552: ST_TO_ADDR
// end ;
5553: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5554: LD_EXP 51
5558: PUSH
5559: LD_EXP 52
5563: LESS
5564: IFFALSE 5704
5566: GO 5568
5568: DISABLE
5569: LD_INT 0
5571: PPUSH
5572: PPUSH
5573: PPUSH
5574: PPUSH
// begin enable ;
5575: ENABLE
// for i := 1 to apemanPos do
5576: LD_ADDR_VAR 0 1
5580: PUSH
5581: DOUBLE
5582: LD_INT 1
5584: DEC
5585: ST_TO_ADDR
5586: LD_EXP 54
5590: PUSH
5591: FOR_TO
5592: IFFALSE 5702
// begin if apemanPlayerCount [ i ] then
5594: LD_EXP 55
5598: PUSH
5599: LD_VAR 0 1
5603: ARRAY
5604: IFFALSE 5700
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5606: LD_EXP 55
5610: PUSH
5611: LD_VAR 0 1
5615: ARRAY
5616: PUSH
5617: LD_EXP 54
5621: PUSH
5622: LD_VAR 0 1
5626: ARRAY
5627: GREATER
5628: IFFALSE 5700
// begin ape := PrepareApeman ;
5630: LD_ADDR_VAR 0 2
5634: PUSH
5635: CALL 6215 0 0
5639: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5640: LD_VAR 0 2
5644: PPUSH
5645: LD_EXP 57
5649: PUSH
5650: LD_VAR 0 1
5654: ARRAY
5655: PPUSH
5656: LD_INT 0
5658: PPUSH
5659: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5663: LD_ADDR_EXP 54
5667: PUSH
5668: LD_EXP 54
5672: PPUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_EXP 54
5682: PUSH
5683: LD_VAR 0 1
5687: ARRAY
5688: PUSH
5689: LD_VAR 0 2
5693: UNION
5694: PPUSH
5695: CALL_OW 1
5699: ST_TO_ADDR
// end ; end ; end ;
5700: GO 5591
5702: POP
5703: POP
// end ;
5704: PPOPN 4
5706: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5707: LD_INT 0
5709: PPUSH
5710: PPUSH
5711: PPUSH
5712: PPUSH
5713: PPUSH
5714: PPUSH
5715: PPUSH
// playersAmount := 0 ;
5716: LD_ADDR_VAR 0 3
5720: PUSH
5721: LD_INT 0
5723: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5724: LD_ADDR_VAR 0 7
5728: PUSH
5729: LD_INT 3
5731: PUSH
5732: LD_INT 2
5734: PUSH
5735: LD_INT 1
5737: PUSH
5738: LD_INT 4
5740: PUSH
5741: LD_INT 6
5743: PUSH
5744: LD_INT 5
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5755: LD_ADDR_EXP 57
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: LD_INT 0
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: LD_INT 0
5780: PUSH
5781: LD_INT 0
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: ST_TO_ADDR
// for j = 1 to Side_Positions do
5794: LD_ADDR_VAR 0 4
5798: PUSH
5799: DOUBLE
5800: LD_INT 1
5802: DEC
5803: ST_TO_ADDR
5804: LD_EXP 39
5808: PUSH
5809: FOR_TO
5810: IFFALSE 5877
// if Side_Positions [ j ] then
5812: LD_EXP 39
5816: PUSH
5817: LD_VAR 0 4
5821: ARRAY
5822: IFFALSE 5875
// begin playersAmount := playersAmount + 1 ;
5824: LD_ADDR_VAR 0 3
5828: PUSH
5829: LD_VAR 0 3
5833: PUSH
5834: LD_INT 1
5836: PLUS
5837: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5838: LD_ADDR_EXP 57
5842: PUSH
5843: LD_EXP 57
5847: PPUSH
5848: LD_VAR 0 4
5852: PPUSH
5853: LD_VAR 0 7
5857: PUSH
5858: LD_EXP 39
5862: PUSH
5863: LD_VAR 0 4
5867: ARRAY
5868: ARRAY
5869: PPUSH
5870: CALL_OW 1
5874: ST_TO_ADDR
// end ;
5875: GO 5809
5877: POP
5878: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5879: LD_ADDR_EXP 53
5883: PUSH
5884: LD_INT 3
5886: PUSH
5887: LD_EXP 27
5891: MUL
5892: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5893: LD_ADDR_EXP 51
5897: PUSH
5898: LD_VAR 0 3
5902: PUSH
5903: LD_EXP 53
5907: MUL
5908: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5909: LD_ADDR_EXP 52
5913: PUSH
5914: LD_EXP 51
5918: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5919: LD_ADDR_EXP 54
5923: PUSH
5924: LD_INT 0
5926: PUSH
5927: LD_INT 0
5929: PUSH
5930: LD_INT 0
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: LD_INT 0
5938: PUSH
5939: LD_INT 0
5941: PUSH
5942: LD_INT 0
5944: PUSH
5945: LD_INT 0
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5958: LD_ADDR_EXP 55
5962: PUSH
5963: LD_INT 0
5965: PUSH
5966: LD_INT 0
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: LD_INT 0
5977: PUSH
5978: LD_INT 0
5980: PUSH
5981: LD_INT 0
5983: PUSH
5984: LD_INT 0
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: ST_TO_ADDR
// apeLevel := 1 ;
5997: LD_ADDR_EXP 56
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// if not apemanNumber then
6005: LD_EXP 51
6009: NOT
6010: IFFALSE 6014
// exit ;
6012: GO 6210
// for i := 1 to apemanPerPlayer do
6014: LD_ADDR_VAR 0 2
6018: PUSH
6019: DOUBLE
6020: LD_INT 1
6022: DEC
6023: ST_TO_ADDR
6024: LD_EXP 53
6028: PUSH
6029: FOR_TO
6030: IFFALSE 6208
// begin for j := 1 to Side_Positions do
6032: LD_ADDR_VAR 0 4
6036: PUSH
6037: DOUBLE
6038: LD_INT 1
6040: DEC
6041: ST_TO_ADDR
6042: LD_EXP 39
6046: PUSH
6047: FOR_TO
6048: IFFALSE 6204
// if Side_Positions [ j ] then
6050: LD_EXP 39
6054: PUSH
6055: LD_VAR 0 4
6059: ARRAY
6060: IFFALSE 6202
// begin pos := Side_Positions [ j ] ;
6062: LD_ADDR_VAR 0 6
6066: PUSH
6067: LD_EXP 39
6071: PUSH
6072: LD_VAR 0 4
6076: ARRAY
6077: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6078: LD_ADDR_EXP 55
6082: PUSH
6083: LD_EXP 55
6087: PPUSH
6088: LD_VAR 0 4
6092: PPUSH
6093: LD_EXP 55
6097: PUSH
6098: LD_VAR 0 4
6102: ARRAY
6103: PUSH
6104: LD_INT 1
6106: PLUS
6107: PPUSH
6108: CALL_OW 1
6112: ST_TO_ADDR
// ape := PrepareApeman ;
6113: LD_ADDR_VAR 0 5
6117: PUSH
6118: CALL 6215 0 0
6122: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6123: LD_ADDR_EXP 54
6127: PUSH
6128: LD_EXP 54
6132: PPUSH
6133: LD_VAR 0 4
6137: PPUSH
6138: LD_EXP 54
6142: PUSH
6143: LD_VAR 0 4
6147: ARRAY
6148: PPUSH
6149: LD_EXP 54
6153: PUSH
6154: LD_VAR 0 4
6158: ARRAY
6159: PUSH
6160: LD_INT 1
6162: PLUS
6163: PPUSH
6164: LD_VAR 0 5
6168: PPUSH
6169: CALL_OW 1
6173: PPUSH
6174: CALL_OW 1
6178: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6179: LD_VAR 0 5
6183: PPUSH
6184: LD_EXP 57
6188: PUSH
6189: LD_VAR 0 4
6193: ARRAY
6194: PPUSH
6195: LD_INT 0
6197: PPUSH
6198: CALL_OW 49
// end ;
6202: GO 6047
6204: POP
6205: POP
// end ;
6206: GO 6029
6208: POP
6209: POP
// end ;
6210: LD_VAR 0 1
6214: RET
// export function PrepareApeman ; var bonus ; begin
6215: LD_INT 0
6217: PPUSH
6218: PPUSH
// uc_side := 0 ;
6219: LD_ADDR_OWVAR 20
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// uc_nation := 0 ;
6227: LD_ADDR_OWVAR 21
6231: PUSH
6232: LD_INT 0
6234: ST_TO_ADDR
// InitHc ;
6235: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6239: LD_ADDR_VAR 0 2
6243: PUSH
6244: LD_INT 1
6246: NEG
6247: PUSH
6248: LD_INT 0
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_OWVAR 1
6263: PUSH
6264: LD_INT 3
6266: MOD
6267: PUSH
6268: LD_INT 1
6270: PLUS
6271: ARRAY
6272: ST_TO_ADDR
// hc_class := class_apeman ;
6273: LD_ADDR_OWVAR 28
6277: PUSH
6278: LD_INT 12
6280: ST_TO_ADDR
// hc_gallery :=  ;
6281: LD_ADDR_OWVAR 33
6285: PUSH
6286: LD_STRING 
6288: ST_TO_ADDR
// hc_name :=  ;
6289: LD_ADDR_OWVAR 26
6293: PUSH
6294: LD_STRING 
6296: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6297: LD_ADDR_OWVAR 31
6301: PUSH
6302: LD_EXP 56
6306: PUSH
6307: LD_VAR 0 2
6311: PLUS
6312: PUSH
6313: LD_EXP 56
6317: PUSH
6318: LD_VAR 0 2
6322: PLUS
6323: PUSH
6324: LD_EXP 56
6328: PUSH
6329: LD_VAR 0 2
6333: PLUS
6334: PUSH
6335: LD_EXP 56
6339: PUSH
6340: LD_VAR 0 2
6344: PLUS
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6352: LD_ADDR_OWVAR 35
6356: PUSH
6357: LD_INT 10
6359: PUSH
6360: LD_VAR 0 2
6364: MUL
6365: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6366: LD_ADDR_OWVAR 29
6370: PUSH
6371: LD_INT 12
6373: PUSH
6374: LD_INT 10
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: ST_TO_ADDR
// result := CreateHuman ;
6381: LD_ADDR_VAR 0 1
6385: PUSH
6386: CALL_OW 44
6390: ST_TO_ADDR
// end ;
6391: LD_VAR 0 1
6395: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6396: LD_INT 0
6398: PPUSH
6399: PPUSH
6400: PPUSH
// if not ape then
6401: LD_VAR 0 1
6405: NOT
6406: IFFALSE 6410
// exit ;
6408: GO 6535
// side := GetSide ( ape ) ;
6410: LD_ADDR_VAR 0 3
6414: PUSH
6415: LD_VAR 0 1
6419: PPUSH
6420: CALL_OW 255
6424: ST_TO_ADDR
// if not side then
6425: LD_VAR 0 3
6429: NOT
6430: IFFALSE 6484
// begin for i = 1 to apemanPos do
6432: LD_ADDR_VAR 0 4
6436: PUSH
6437: DOUBLE
6438: LD_INT 1
6440: DEC
6441: ST_TO_ADDR
6442: LD_EXP 54
6446: PUSH
6447: FOR_TO
6448: IFFALSE 6482
// if ape in apemanPos [ i ] then
6450: LD_VAR 0 1
6454: PUSH
6455: LD_EXP 54
6459: PUSH
6460: LD_VAR 0 4
6464: ARRAY
6465: IN
6466: IFFALSE 6480
// begin side := i ;
6468: LD_ADDR_VAR 0 3
6472: PUSH
6473: LD_VAR 0 4
6477: ST_TO_ADDR
// break ;
6478: GO 6482
// end ;
6480: GO 6447
6482: POP
6483: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6484: LD_ADDR_EXP 54
6488: PUSH
6489: LD_EXP 54
6493: PPUSH
6494: LD_VAR 0 3
6498: PPUSH
6499: LD_EXP 54
6503: PUSH
6504: LD_VAR 0 3
6508: ARRAY
6509: PUSH
6510: LD_VAR 0 1
6514: DIFF
6515: PPUSH
6516: CALL_OW 1
6520: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6521: LD_ADDR_EXP 51
6525: PUSH
6526: LD_EXP 51
6530: PUSH
6531: LD_INT 1
6533: MINUS
6534: ST_TO_ADDR
// end ; end_of_file
6535: LD_VAR 0 2
6539: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6540: LD_VAR 0 1
6544: PPUSH
6545: CALL_OW 266
6549: PUSH
6550: LD_INT 0
6552: PUSH
6553: LD_INT 1
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: IN
6560: IFFALSE 6585
// SetBName ( b , @ & GetSide ( b ) ) ;
6562: LD_VAR 0 1
6566: PPUSH
6567: LD_STRING @
6569: PUSH
6570: LD_VAR 0 1
6574: PPUSH
6575: CALL_OW 255
6579: STR
6580: PPUSH
6581: CALL_OW 500
// end ;
6585: PPOPN 2
6587: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6588: LD_VAR 0 1
6592: PPUSH
6593: CALL_OW 266
6597: PUSH
6598: LD_INT 0
6600: PUSH
6601: LD_INT 1
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: IN
6608: IFFALSE 6633
// SetBName ( b , @ & GetSide ( b ) ) ;
6610: LD_VAR 0 1
6614: PPUSH
6615: LD_STRING @
6617: PUSH
6618: LD_VAR 0 1
6622: PPUSH
6623: CALL_OW 255
6627: STR
6628: PPUSH
6629: CALL_OW 500
// end ;
6633: PPOPN 3
6635: END
// on VehicleConstructed ( veh , fac ) do var side ;
6636: LD_INT 0
6638: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6639: LD_VAR 0 1
6643: PPUSH
6644: CALL_OW 263
6648: PUSH
6649: LD_INT 5
6651: EQUAL
6652: IFFALSE 6794
// begin side := GetSide ( veh ) ;
6654: LD_ADDR_VAR 0 3
6658: PUSH
6659: LD_VAR 0 1
6663: PPUSH
6664: CALL_OW 255
6668: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6669: LD_ADDR_EXP 54
6673: PUSH
6674: LD_EXP 54
6678: PPUSH
6679: LD_VAR 0 3
6683: PPUSH
6684: LD_EXP 54
6688: PUSH
6689: LD_VAR 0 3
6693: ARRAY
6694: PPUSH
6695: LD_INT 52
6697: PUSH
6698: EMPTY
6699: LIST
6700: PPUSH
6701: CALL_OW 72
6705: PUSH
6706: LD_INT 22
6708: PUSH
6709: LD_VAR 0 3
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: LD_INT 2
6720: PUSH
6721: LD_INT 33
6723: PUSH
6724: LD_INT 5
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 25
6733: PUSH
6734: LD_INT 12
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 25
6743: PUSH
6744: LD_INT 15
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 25
6753: PUSH
6754: LD_INT 16
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: LD_INT 17
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PPUSH
6783: CALL_OW 69
6787: UNION
6788: PPUSH
6789: CALL_OW 1
6793: ST_TO_ADDR
// end ; end ;
6794: PPOPN 3
6796: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6797: LD_INT 0
6799: PPUSH
6800: PPUSH
6801: PPUSH
6802: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6803: LD_VAR 0 1
6807: PPUSH
6808: CALL_OW 257
6812: PUSH
6813: LD_INT 12
6815: PUSH
6816: LD_INT 15
6818: PUSH
6819: LD_INT 17
6821: PUSH
6822: LD_INT 16
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: IN
6831: PUSH
6832: LD_VAR 0 1
6836: PPUSH
6837: CALL_OW 263
6841: PUSH
6842: LD_INT 5
6844: EQUAL
6845: OR
6846: IFFALSE 6857
// ApeKilled ( j ) ;
6848: LD_VAR 0 1
6852: PPUSH
6853: CALL 6396 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6857: LD_VAR 0 1
6861: PPUSH
6862: CALL_OW 266
6866: PUSH
6867: LD_INT 0
6869: PUSH
6870: LD_INT 1
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: IN
6877: IFFALSE 6959
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6879: LD_ADDR_VAR 0 4
6883: PUSH
6884: LD_EXP 39
6888: PUSH
6889: LD_VAR 0 1
6893: PPUSH
6894: CALL_OW 255
6898: ARRAY
6899: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6900: LD_ADDR_VAR 0 2
6904: PUSH
6905: LD_EXP 44
6909: PUSH
6910: LD_VAR 0 4
6914: ARRAY
6915: PUSH
6916: LD_INT 1
6918: ARRAY
6919: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6920: LD_ADDR_VAR 0 3
6924: PUSH
6925: LD_EXP 44
6929: PUSH
6930: LD_VAR 0 4
6934: ARRAY
6935: PUSH
6936: LD_INT 2
6938: ARRAY
6939: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6940: LD_VAR 0 2
6944: PPUSH
6945: LD_VAR 0 3
6949: PPUSH
6950: CALL_OW 420
6954: PPUSH
6955: CALL_OW 419
// end ; end ;
6959: PPOPN 5
6961: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6962: LD_VAR 0 1
6966: PPUSH
6967: LD_VAR 0 2
6971: PPUSH
6972: LD_VAR 0 3
6976: PPUSH
6977: LD_OWVAR 2
6981: PPUSH
6982: CALL 7364 0 4
6986: PPOPN 3
6988: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6989: LD_INT 0
6991: PPUSH
6992: PPUSH
// for un in battle_flags_id do
6993: LD_ADDR_VAR 0 2
6997: PUSH
6998: LD_EXP 49
7002: PUSH
7003: FOR_IN
7004: IFFALSE 7079
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_INT 1
7013: PUSH
7014: LD_LOC 9
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 2
7025: PUSH
7026: LD_LOC 9
7030: PUSH
7031: LD_INT 2
7033: DIV
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: PUSH
7039: LD_INT 3
7041: PUSH
7042: LD_LOC 9
7046: PUSH
7047: LD_INT 5
7049: DIV
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 20
7057: PUSH
7058: LD_LOC 9
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: PPUSH
7073: CALL_OW 423
7077: GO 7003
7079: POP
7080: POP
// end ;
7081: LD_VAR 0 1
7085: RET
// every 1 do var un ;
7086: GO 7088
7088: DISABLE
7089: LD_INT 0
7091: PPUSH
// begin if not def_morale_flags then
7092: LD_EXP 9
7096: NOT
7097: IFFALSE 7101
// exit ;
7099: GO 7178
// if not morale_decreasing_time then
7101: LD_EXP 26
7105: NOT
7106: IFFALSE 7110
// exit ;
7108: GO 7178
// strength = 100 ;
7110: LD_ADDR_LOC 9
7114: PUSH
7115: LD_INT 100
7117: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7118: LD_EXP 26
7122: PPUSH
7123: CALL_OW 67
// strength := strength - 1 ;
7127: LD_ADDR_LOC 9
7131: PUSH
7132: LD_LOC 9
7136: PUSH
7137: LD_INT 1
7139: MINUS
7140: ST_TO_ADDR
// Update_Flags ;
7141: CALL 6989 0 0
// until not strength ;
7145: LD_LOC 9
7149: NOT
7150: IFFALSE 7118
// for un in battle_flags_id do
7152: LD_ADDR_VAR 0 1
7156: PUSH
7157: LD_EXP 49
7161: PUSH
7162: FOR_IN
7163: IFFALSE 7176
// KillBattleFlag ( un ) ;
7165: LD_VAR 0 1
7169: PPUSH
7170: CALL_OW 419
7174: GO 7162
7176: POP
7177: POP
// end ; end_of_file
7178: PPOPN 1
7180: END
// export ExtraStrings , WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7181: LD_INT 0
7183: PPUSH
7184: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7185: LD_ADDR_VAR 0 2
7189: PUSH
7190: LD_STRING #Multi1x1-Time
7192: PUSH
7193: LD_OWVAR 1
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: ST_TO_ADDR
// if WaitServerStrings then
7202: LD_EXP 59
7206: IFFALSE 7224
// AllStrings = AllStrings ^ WaitServerStrings ;
7208: LD_ADDR_VAR 0 2
7212: PUSH
7213: LD_VAR 0 2
7217: PUSH
7218: LD_EXP 59
7222: ADD
7223: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7224: LD_INT 0
7226: PUSH
7227: LD_EXP 33
7231: PUSH
7232: LD_OWVAR 1
7236: MINUS
7237: LESSEQUAL
7238: IFFALSE 7269
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: LD_VAR 0 2
7249: PUSH
7250: LD_STRING #allowedsibbomb
7252: PUSH
7253: LD_EXP 33
7257: PUSH
7258: LD_OWVAR 1
7262: MINUS
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: ADD
7268: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7269: LD_INT 0
7271: PUSH
7272: LD_EXP 62
7276: PUSH
7277: LD_OWVAR 1
7281: MINUS
7282: LESSEQUAL
7283: IFFALSE 7314
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7285: LD_ADDR_VAR 0 2
7289: PUSH
7290: LD_VAR 0 2
7294: PUSH
7295: LD_STRING #builduptime
7297: PUSH
7298: LD_EXP 62
7302: PUSH
7303: LD_OWVAR 1
7307: MINUS
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: ADD
7313: ST_TO_ADDR
// if ( ExtraStrings ) then
7314: LD_EXP 58
7318: IFFALSE 7340
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7320: LD_ADDR_VAR 0 2
7324: PUSH
7325: LD_VAR 0 2
7329: PUSH
7330: LD_STRING 
7332: ADD
7333: PUSH
7334: LD_EXP 58
7338: ADD
7339: ST_TO_ADDR
// Display_Strings := AllStrings ;
7340: LD_ADDR_OWVAR 47
7344: PUSH
7345: LD_VAR 0 2
7349: ST_TO_ADDR
// end ;
7350: LD_VAR 0 1
7354: RET
// every 0 0$1 do
7355: GO 7357
7357: DISABLE
// begin ShowTimer ;
7358: CALL 7181 0 0
// enable ;
7362: ENABLE
// end ; end_of_file
7363: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7364: LD_INT 0
7366: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7367: LD_VAR 0 1
7371: PPUSH
7372: CALL_OW 255
7376: PUSH
7377: LD_VAR 0 4
7381: EQUAL
7382: IFFALSE 7401
// begin SetAchievement ( ACH_RAD ) ;
7384: LD_STRING ACH_RAD
7386: PPUSH
7387: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7391: LD_STRING ACH_NL
7393: PPUSH
7394: LD_INT 1
7396: PPUSH
7397: CALL_OW 564
// end end ;
7401: LD_VAR 0 5
7405: RET
// export function SA_Win ( side ) ; begin
7406: LD_INT 0
7408: PPUSH
// case side of 1 :
7409: LD_VAR 0 1
7413: PUSH
7414: LD_INT 1
7416: DOUBLE
7417: EQUAL
7418: IFTRUE 7422
7420: GO 7435
7422: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7423: LD_STRING ACH_AH
7425: PPUSH
7426: LD_INT 1
7428: PPUSH
7429: CALL_OW 564
7433: GO 7598
7435: LD_INT 2
7437: DOUBLE
7438: EQUAL
7439: IFTRUE 7443
7441: GO 7456
7443: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7444: LD_STRING ACH_E
7446: PPUSH
7447: LD_INT 1
7449: PPUSH
7450: CALL_OW 564
7454: GO 7598
7456: LD_INT 3
7458: DOUBLE
7459: EQUAL
7460: IFTRUE 7464
7462: GO 7477
7464: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7465: LD_STRING ACH_OOL
7467: PPUSH
7468: LD_INT 1
7470: PPUSH
7471: CALL_OW 564
7475: GO 7598
7477: LD_INT 1
7479: PUSH
7480: LD_INT 2
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: DOUBLE
7487: EQUAL
7488: IFTRUE 7492
7490: GO 7517
7492: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7493: LD_STRING ACH_AH
7495: PPUSH
7496: LD_REAL  5.00000000000000E-0001
7499: PPUSH
7500: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7504: LD_STRING ACH_E
7506: PPUSH
7507: LD_REAL  5.00000000000000E-0001
7510: PPUSH
7511: CALL_OW 564
// end ; [ 2 , 3 ] :
7515: GO 7598
7517: LD_INT 2
7519: PUSH
7520: LD_INT 3
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: DOUBLE
7527: EQUAL
7528: IFTRUE 7532
7530: GO 7557
7532: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7533: LD_STRING ACH_OOL
7535: PPUSH
7536: LD_REAL  5.00000000000000E-0001
7539: PPUSH
7540: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7544: LD_STRING ACH_E
7546: PPUSH
7547: LD_REAL  5.00000000000000E-0001
7550: PPUSH
7551: CALL_OW 564
// end ; [ 3 , 1 ] :
7555: GO 7598
7557: LD_INT 3
7559: PUSH
7560: LD_INT 1
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: DOUBLE
7567: EQUAL
7568: IFTRUE 7572
7570: GO 7597
7572: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7573: LD_STRING ACH_AH
7575: PPUSH
7576: LD_REAL  5.00000000000000E-0001
7579: PPUSH
7580: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7584: LD_STRING ACH_OOL
7586: PPUSH
7587: LD_REAL  5.00000000000000E-0001
7590: PPUSH
7591: CALL_OW 564
// end ; end ;
7595: GO 7598
7597: POP
// end ; end_of_file
7598: LD_VAR 0 2
7602: RET
// export function SetMpTechs ( ) ; var side , i ; begin
7603: LD_INT 0
7605: PPUSH
7606: PPUSH
7607: PPUSH
// for side = 1 to 8 do
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: DOUBLE
7614: LD_INT 1
7616: DEC
7617: ST_TO_ADDR
7618: LD_INT 8
7620: PUSH
7621: FOR_TO
7622: IFFALSE 7743
// begin for i = 1 to 72 do
7624: LD_ADDR_VAR 0 3
7628: PUSH
7629: DOUBLE
7630: LD_INT 1
7632: DEC
7633: ST_TO_ADDR
7634: LD_INT 72
7636: PUSH
7637: FOR_TO
7638: IFFALSE 7669
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
7640: LD_VAR 0 3
7644: PPUSH
7645: LD_VAR 0 2
7649: PPUSH
7650: LD_INT 0
7652: PPUSH
7653: LD_VAR 0 3
7657: PPUSH
7658: CALL_OW 565
7662: PPUSH
7663: CALL_OW 322
7667: GO 7637
7669: POP
7670: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
7671: LD_INT 73
7673: PPUSH
7674: LD_VAR 0 2
7678: PPUSH
7679: LD_INT 0
7681: PPUSH
7682: LD_INT 25
7684: PPUSH
7685: CALL_OW 565
7689: PPUSH
7690: CALL_OW 322
// for i = 0 to 40 do
7694: LD_ADDR_VAR 0 3
7698: PUSH
7699: DOUBLE
7700: LD_INT 0
7702: DEC
7703: ST_TO_ADDR
7704: LD_INT 40
7706: PUSH
7707: FOR_TO
7708: IFFALSE 7739
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
7710: LD_VAR 0 3
7714: PPUSH
7715: LD_VAR 0 2
7719: PPUSH
7720: LD_INT 1
7722: PPUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 565
7732: PPUSH
7733: CALL_OW 324
7737: GO 7707
7739: POP
7740: POP
// end ;
7741: GO 7621
7743: POP
7744: POP
// end ;
7745: LD_VAR 0 1
7749: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
7750: LD_INT 0
7752: PPUSH
7753: PPUSH
7754: PPUSH
// for side = 1 to 8 do
7755: LD_ADDR_VAR 0 3
7759: PUSH
7760: DOUBLE
7761: LD_INT 1
7763: DEC
7764: ST_TO_ADDR
7765: LD_INT 8
7767: PUSH
7768: FOR_TO
7769: IFFALSE 11765
// begin for i = 1 to 73 do
7771: LD_ADDR_VAR 0 4
7775: PUSH
7776: DOUBLE
7777: LD_INT 1
7779: DEC
7780: ST_TO_ADDR
7781: LD_INT 73
7783: PUSH
7784: FOR_TO
7785: IFFALSE 7806
// SetTech ( i , side , state_disabled ) ;
7787: LD_VAR 0 4
7791: PPUSH
7792: LD_VAR 0 3
7796: PPUSH
7797: LD_INT 0
7799: PPUSH
7800: CALL_OW 322
7804: GO 7784
7806: POP
7807: POP
// for i = 0 to 40 do
7808: LD_ADDR_VAR 0 4
7812: PUSH
7813: DOUBLE
7814: LD_INT 0
7816: DEC
7817: ST_TO_ADDR
7818: LD_INT 40
7820: PUSH
7821: FOR_TO
7822: IFFALSE 7843
// SetRestrict ( i , side , false ) ;
7824: LD_VAR 0 4
7828: PPUSH
7829: LD_VAR 0 3
7833: PPUSH
7834: LD_INT 0
7836: PPUSH
7837: CALL_OW 324
7841: GO 7821
7843: POP
7844: POP
// case level of 1 :
7845: LD_VAR 0 1
7849: PUSH
7850: LD_INT 1
7852: DOUBLE
7853: EQUAL
7854: IFTRUE 7858
7856: GO 8011
7858: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
7859: LD_INT 35
7861: PPUSH
7862: LD_VAR 0 3
7866: PPUSH
7867: LD_INT 1
7869: PPUSH
7870: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
7874: LD_INT 45
7876: PPUSH
7877: LD_VAR 0 3
7881: PPUSH
7882: LD_INT 1
7884: PPUSH
7885: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
7889: LD_INT 46
7891: PPUSH
7892: LD_VAR 0 3
7896: PPUSH
7897: LD_INT 1
7899: PPUSH
7900: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
7904: LD_INT 47
7906: PPUSH
7907: LD_VAR 0 3
7911: PPUSH
7912: LD_INT 1
7914: PPUSH
7915: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
7919: LD_INT 0
7921: PPUSH
7922: LD_VAR 0 3
7926: PPUSH
7927: LD_INT 1
7929: PPUSH
7930: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
7934: LD_INT 2
7936: PPUSH
7937: LD_VAR 0 3
7941: PPUSH
7942: LD_INT 1
7944: PPUSH
7945: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
7949: LD_INT 4
7951: PPUSH
7952: LD_VAR 0 3
7956: PPUSH
7957: LD_INT 1
7959: PPUSH
7960: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
7964: LD_INT 6
7966: PPUSH
7967: LD_VAR 0 3
7971: PPUSH
7972: LD_INT 1
7974: PPUSH
7975: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
7979: LD_INT 29
7981: PPUSH
7982: LD_VAR 0 3
7986: PPUSH
7987: LD_INT 1
7989: PPUSH
7990: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
7994: LD_INT 31
7996: PPUSH
7997: LD_VAR 0 3
8001: PPUSH
8002: LD_INT 1
8004: PPUSH
8005: CALL_OW 324
// end ; 2 :
8009: GO 11763
8011: LD_INT 2
8013: DOUBLE
8014: EQUAL
8015: IFTRUE 8019
8017: GO 8217
8019: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8020: LD_INT 35
8022: PPUSH
8023: LD_VAR 0 3
8027: PPUSH
8028: LD_INT 1
8030: PPUSH
8031: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8035: LD_INT 45
8037: PPUSH
8038: LD_VAR 0 3
8042: PPUSH
8043: LD_INT 1
8045: PPUSH
8046: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8050: LD_INT 46
8052: PPUSH
8053: LD_VAR 0 3
8057: PPUSH
8058: LD_INT 1
8060: PPUSH
8061: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8065: LD_INT 47
8067: PPUSH
8068: LD_VAR 0 3
8072: PPUSH
8073: LD_INT 1
8075: PPUSH
8076: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8080: LD_INT 1
8082: PPUSH
8083: LD_VAR 0 3
8087: PPUSH
8088: LD_INT 1
8090: PPUSH
8091: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8095: LD_INT 2
8097: PPUSH
8098: LD_VAR 0 3
8102: PPUSH
8103: LD_INT 1
8105: PPUSH
8106: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8110: LD_INT 11
8112: PPUSH
8113: LD_VAR 0 3
8117: PPUSH
8118: LD_INT 1
8120: PPUSH
8121: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8125: LD_INT 0
8127: PPUSH
8128: LD_VAR 0 3
8132: PPUSH
8133: LD_INT 1
8135: PPUSH
8136: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8140: LD_INT 2
8142: PPUSH
8143: LD_VAR 0 3
8147: PPUSH
8148: LD_INT 1
8150: PPUSH
8151: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8155: LD_INT 4
8157: PPUSH
8158: LD_VAR 0 3
8162: PPUSH
8163: LD_INT 1
8165: PPUSH
8166: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8170: LD_INT 6
8172: PPUSH
8173: LD_VAR 0 3
8177: PPUSH
8178: LD_INT 1
8180: PPUSH
8181: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8185: LD_INT 29
8187: PPUSH
8188: LD_VAR 0 3
8192: PPUSH
8193: LD_INT 1
8195: PPUSH
8196: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8200: LD_INT 31
8202: PPUSH
8203: LD_VAR 0 3
8207: PPUSH
8208: LD_INT 1
8210: PPUSH
8211: CALL_OW 324
// end ; 3 :
8215: GO 11763
8217: LD_INT 3
8219: DOUBLE
8220: EQUAL
8221: IFTRUE 8225
8223: GO 8678
8225: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8226: LD_INT 35
8228: PPUSH
8229: LD_VAR 0 3
8233: PPUSH
8234: LD_INT 1
8236: PPUSH
8237: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8241: LD_INT 45
8243: PPUSH
8244: LD_VAR 0 3
8248: PPUSH
8249: LD_INT 1
8251: PPUSH
8252: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8256: LD_INT 46
8258: PPUSH
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_INT 1
8266: PPUSH
8267: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8271: LD_INT 47
8273: PPUSH
8274: LD_VAR 0 3
8278: PPUSH
8279: LD_INT 1
8281: PPUSH
8282: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8286: LD_INT 1
8288: PPUSH
8289: LD_VAR 0 3
8293: PPUSH
8294: LD_INT 1
8296: PPUSH
8297: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8301: LD_INT 2
8303: PPUSH
8304: LD_VAR 0 3
8308: PPUSH
8309: LD_INT 1
8311: PPUSH
8312: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8316: LD_INT 11
8318: PPUSH
8319: LD_VAR 0 3
8323: PPUSH
8324: LD_INT 1
8326: PPUSH
8327: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8331: LD_INT 48
8333: PPUSH
8334: LD_VAR 0 3
8338: PPUSH
8339: LD_INT 1
8341: PPUSH
8342: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8346: LD_INT 69
8348: PPUSH
8349: LD_VAR 0 3
8353: PPUSH
8354: LD_INT 1
8356: PPUSH
8357: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8361: LD_INT 39
8363: PPUSH
8364: LD_VAR 0 3
8368: PPUSH
8369: LD_INT 1
8371: PPUSH
8372: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8376: LD_INT 43
8378: PPUSH
8379: LD_VAR 0 3
8383: PPUSH
8384: LD_INT 1
8386: PPUSH
8387: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8391: LD_INT 51
8393: PPUSH
8394: LD_VAR 0 3
8398: PPUSH
8399: LD_INT 1
8401: PPUSH
8402: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
8406: LD_INT 6
8408: PPUSH
8409: LD_VAR 0 3
8413: PPUSH
8414: LD_INT 1
8416: PPUSH
8417: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8421: LD_INT 0
8423: PPUSH
8424: LD_VAR 0 3
8428: PPUSH
8429: LD_INT 1
8431: PPUSH
8432: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8436: LD_INT 2
8438: PPUSH
8439: LD_VAR 0 3
8443: PPUSH
8444: LD_INT 1
8446: PPUSH
8447: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
8451: LD_INT 3
8453: PPUSH
8454: LD_VAR 0 3
8458: PPUSH
8459: LD_INT 1
8461: PPUSH
8462: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8466: LD_INT 4
8468: PPUSH
8469: LD_VAR 0 3
8473: PPUSH
8474: LD_INT 1
8476: PPUSH
8477: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8481: LD_INT 6
8483: PPUSH
8484: LD_VAR 0 3
8488: PPUSH
8489: LD_INT 1
8491: PPUSH
8492: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
8496: LD_INT 7
8498: PPUSH
8499: LD_VAR 0 3
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
8511: LD_INT 8
8513: PPUSH
8514: LD_VAR 0 3
8518: PPUSH
8519: LD_INT 1
8521: PPUSH
8522: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
8526: LD_INT 10
8528: PPUSH
8529: LD_VAR 0 3
8533: PPUSH
8534: LD_INT 1
8536: PPUSH
8537: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
8541: LD_INT 15
8543: PPUSH
8544: LD_VAR 0 3
8548: PPUSH
8549: LD_INT 1
8551: PPUSH
8552: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
8556: LD_INT 16
8558: PPUSH
8559: LD_VAR 0 3
8563: PPUSH
8564: LD_INT 1
8566: PPUSH
8567: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
8571: LD_INT 17
8573: PPUSH
8574: LD_VAR 0 3
8578: PPUSH
8579: LD_INT 1
8581: PPUSH
8582: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
8586: LD_INT 20
8588: PPUSH
8589: LD_VAR 0 3
8593: PPUSH
8594: LD_INT 1
8596: PPUSH
8597: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
8601: LD_INT 26
8603: PPUSH
8604: LD_VAR 0 3
8608: PPUSH
8609: LD_INT 1
8611: PPUSH
8612: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
8616: LD_INT 27
8618: PPUSH
8619: LD_VAR 0 3
8623: PPUSH
8624: LD_INT 1
8626: PPUSH
8627: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8631: LD_INT 29
8633: PPUSH
8634: LD_VAR 0 3
8638: PPUSH
8639: LD_INT 1
8641: PPUSH
8642: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8646: LD_INT 31
8648: PPUSH
8649: LD_VAR 0 3
8653: PPUSH
8654: LD_INT 1
8656: PPUSH
8657: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
8661: LD_INT 32
8663: PPUSH
8664: LD_VAR 0 3
8668: PPUSH
8669: LD_INT 1
8671: PPUSH
8672: CALL_OW 324
// end ; 4 :
8676: GO 11763
8678: LD_INT 4
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 9634
8686: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8687: LD_INT 35
8689: PPUSH
8690: LD_VAR 0 3
8694: PPUSH
8695: LD_INT 1
8697: PPUSH
8698: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8702: LD_INT 45
8704: PPUSH
8705: LD_VAR 0 3
8709: PPUSH
8710: LD_INT 1
8712: PPUSH
8713: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8717: LD_INT 46
8719: PPUSH
8720: LD_VAR 0 3
8724: PPUSH
8725: LD_INT 1
8727: PPUSH
8728: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8732: LD_INT 47
8734: PPUSH
8735: LD_VAR 0 3
8739: PPUSH
8740: LD_INT 1
8742: PPUSH
8743: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8747: LD_INT 1
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: LD_INT 1
8757: PPUSH
8758: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8762: LD_INT 2
8764: PPUSH
8765: LD_VAR 0 3
8769: PPUSH
8770: LD_INT 1
8772: PPUSH
8773: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8777: LD_INT 11
8779: PPUSH
8780: LD_VAR 0 3
8784: PPUSH
8785: LD_INT 1
8787: PPUSH
8788: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
8792: LD_INT 20
8794: PPUSH
8795: LD_VAR 0 3
8799: PPUSH
8800: LD_INT 1
8802: PPUSH
8803: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8807: LD_INT 48
8809: PPUSH
8810: LD_VAR 0 3
8814: PPUSH
8815: LD_INT 1
8817: PPUSH
8818: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
8822: LD_INT 49
8824: PPUSH
8825: LD_VAR 0 3
8829: PPUSH
8830: LD_INT 1
8832: PPUSH
8833: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8837: LD_INT 69
8839: PPUSH
8840: LD_VAR 0 3
8844: PPUSH
8845: LD_INT 1
8847: PPUSH
8848: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8852: LD_INT 39
8854: PPUSH
8855: LD_VAR 0 3
8859: PPUSH
8860: LD_INT 1
8862: PPUSH
8863: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
8867: LD_INT 34
8869: PPUSH
8870: LD_VAR 0 3
8874: PPUSH
8875: LD_INT 1
8877: PPUSH
8878: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
8882: LD_INT 42
8884: PPUSH
8885: LD_VAR 0 3
8889: PPUSH
8890: LD_INT 1
8892: PPUSH
8893: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
8897: LD_INT 44
8899: PPUSH
8900: LD_VAR 0 3
8904: PPUSH
8905: LD_INT 1
8907: PPUSH
8908: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
8912: LD_INT 41
8914: PPUSH
8915: LD_VAR 0 3
8919: PPUSH
8920: LD_INT 1
8922: PPUSH
8923: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8927: LD_INT 43
8929: PPUSH
8930: LD_VAR 0 3
8934: PPUSH
8935: LD_INT 1
8937: PPUSH
8938: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
8942: LD_INT 70
8944: PPUSH
8945: LD_VAR 0 3
8949: PPUSH
8950: LD_INT 1
8952: PPUSH
8953: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8957: LD_INT 51
8959: PPUSH
8960: LD_VAR 0 3
8964: PPUSH
8965: LD_INT 1
8967: PPUSH
8968: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
8972: LD_INT 52
8974: PPUSH
8975: LD_VAR 0 3
8979: PPUSH
8980: LD_INT 1
8982: PPUSH
8983: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
8987: LD_INT 6
8989: PPUSH
8990: LD_VAR 0 3
8994: PPUSH
8995: LD_INT 1
8997: PPUSH
8998: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9002: LD_INT 15
9004: PPUSH
9005: LD_VAR 0 3
9009: PPUSH
9010: LD_INT 1
9012: PPUSH
9013: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9017: LD_INT 7
9019: PPUSH
9020: LD_VAR 0 3
9024: PPUSH
9025: LD_INT 1
9027: PPUSH
9028: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9032: LD_INT 12
9034: PPUSH
9035: LD_VAR 0 3
9039: PPUSH
9040: LD_INT 1
9042: PPUSH
9043: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9047: LD_INT 18
9049: PPUSH
9050: LD_VAR 0 3
9054: PPUSH
9055: LD_INT 1
9057: PPUSH
9058: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9062: LD_INT 60
9064: PPUSH
9065: LD_VAR 0 3
9069: PPUSH
9070: LD_INT 1
9072: PPUSH
9073: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9077: LD_INT 9
9079: PPUSH
9080: LD_VAR 0 3
9084: PPUSH
9085: LD_INT 1
9087: PPUSH
9088: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9092: LD_INT 30
9094: PPUSH
9095: LD_VAR 0 3
9099: PPUSH
9100: LD_INT 1
9102: PPUSH
9103: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9107: LD_INT 37
9109: PPUSH
9110: LD_VAR 0 3
9114: PPUSH
9115: LD_INT 1
9117: PPUSH
9118: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9122: LD_INT 5
9124: PPUSH
9125: LD_VAR 0 3
9129: PPUSH
9130: LD_INT 1
9132: PPUSH
9133: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9137: LD_INT 66
9139: PPUSH
9140: LD_VAR 0 3
9144: PPUSH
9145: LD_INT 1
9147: PPUSH
9148: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9152: LD_INT 21
9154: PPUSH
9155: LD_VAR 0 3
9159: PPUSH
9160: LD_INT 1
9162: PPUSH
9163: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9167: LD_INT 22
9169: PPUSH
9170: LD_VAR 0 3
9174: PPUSH
9175: LD_INT 1
9177: PPUSH
9178: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9182: LD_INT 54
9184: PPUSH
9185: LD_VAR 0 3
9189: PPUSH
9190: LD_INT 1
9192: PPUSH
9193: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9197: LD_INT 0
9199: PPUSH
9200: LD_VAR 0 3
9204: PPUSH
9205: LD_INT 1
9207: PPUSH
9208: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9212: LD_INT 1
9214: PPUSH
9215: LD_VAR 0 3
9219: PPUSH
9220: LD_INT 1
9222: PPUSH
9223: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9227: LD_INT 2
9229: PPUSH
9230: LD_VAR 0 3
9234: PPUSH
9235: LD_INT 1
9237: PPUSH
9238: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9242: LD_INT 3
9244: PPUSH
9245: LD_VAR 0 3
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9257: LD_INT 4
9259: PPUSH
9260: LD_VAR 0 3
9264: PPUSH
9265: LD_INT 1
9267: PPUSH
9268: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
9272: LD_INT 5
9274: PPUSH
9275: LD_VAR 0 3
9279: PPUSH
9280: LD_INT 1
9282: PPUSH
9283: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9287: LD_INT 6
9289: PPUSH
9290: LD_VAR 0 3
9294: PPUSH
9295: LD_INT 1
9297: PPUSH
9298: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9302: LD_INT 7
9304: PPUSH
9305: LD_VAR 0 3
9309: PPUSH
9310: LD_INT 1
9312: PPUSH
9313: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9317: LD_INT 8
9319: PPUSH
9320: LD_VAR 0 3
9324: PPUSH
9325: LD_INT 1
9327: PPUSH
9328: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9332: LD_INT 10
9334: PPUSH
9335: LD_VAR 0 3
9339: PPUSH
9340: LD_INT 1
9342: PPUSH
9343: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
9347: LD_INT 11
9349: PPUSH
9350: LD_VAR 0 3
9354: PPUSH
9355: LD_INT 1
9357: PPUSH
9358: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
9362: LD_INT 12
9364: PPUSH
9365: LD_VAR 0 3
9369: PPUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
9377: LD_INT 13
9379: PPUSH
9380: LD_VAR 0 3
9384: PPUSH
9385: LD_INT 1
9387: PPUSH
9388: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
9392: LD_INT 14
9394: PPUSH
9395: LD_VAR 0 3
9399: PPUSH
9400: LD_INT 1
9402: PPUSH
9403: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9407: LD_INT 15
9409: PPUSH
9410: LD_VAR 0 3
9414: PPUSH
9415: LD_INT 1
9417: PPUSH
9418: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9422: LD_INT 16
9424: PPUSH
9425: LD_VAR 0 3
9429: PPUSH
9430: LD_INT 1
9432: PPUSH
9433: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9437: LD_INT 17
9439: PPUSH
9440: LD_VAR 0 3
9444: PPUSH
9445: LD_INT 1
9447: PPUSH
9448: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
9452: LD_INT 19
9454: PPUSH
9455: LD_VAR 0 3
9459: PPUSH
9460: LD_INT 1
9462: PPUSH
9463: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9467: LD_INT 20
9469: PPUSH
9470: LD_VAR 0 3
9474: PPUSH
9475: LD_INT 1
9477: PPUSH
9478: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
9482: LD_INT 21
9484: PPUSH
9485: LD_VAR 0 3
9489: PPUSH
9490: LD_INT 1
9492: PPUSH
9493: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
9497: LD_INT 23
9499: PPUSH
9500: LD_VAR 0 3
9504: PPUSH
9505: LD_INT 1
9507: PPUSH
9508: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9512: LD_INT 26
9514: PPUSH
9515: LD_VAR 0 3
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9527: LD_INT 27
9529: PPUSH
9530: LD_VAR 0 3
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
9542: LD_INT 28
9544: PPUSH
9545: LD_VAR 0 3
9549: PPUSH
9550: LD_INT 1
9552: PPUSH
9553: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9557: LD_INT 29
9559: PPUSH
9560: LD_VAR 0 3
9564: PPUSH
9565: LD_INT 1
9567: PPUSH
9568: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
9572: LD_INT 30
9574: PPUSH
9575: LD_VAR 0 3
9579: PPUSH
9580: LD_INT 1
9582: PPUSH
9583: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9587: LD_INT 31
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: LD_INT 1
9597: PPUSH
9598: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9602: LD_INT 32
9604: PPUSH
9605: LD_VAR 0 3
9609: PPUSH
9610: LD_INT 1
9612: PPUSH
9613: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
9617: LD_INT 36
9619: PPUSH
9620: LD_VAR 0 3
9624: PPUSH
9625: LD_INT 1
9627: PPUSH
9628: CALL_OW 324
// end ; 5 :
9632: GO 11763
9634: LD_INT 5
9636: DOUBLE
9637: EQUAL
9638: IFTRUE 9642
9640: GO 10755
9642: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9643: LD_INT 35
9645: PPUSH
9646: LD_VAR 0 3
9650: PPUSH
9651: LD_INT 1
9653: PPUSH
9654: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9658: LD_INT 45
9660: PPUSH
9661: LD_VAR 0 3
9665: PPUSH
9666: LD_INT 1
9668: PPUSH
9669: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9673: LD_INT 46
9675: PPUSH
9676: LD_VAR 0 3
9680: PPUSH
9681: LD_INT 1
9683: PPUSH
9684: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9688: LD_INT 47
9690: PPUSH
9691: LD_VAR 0 3
9695: PPUSH
9696: LD_INT 1
9698: PPUSH
9699: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9703: LD_INT 1
9705: PPUSH
9706: LD_VAR 0 3
9710: PPUSH
9711: LD_INT 1
9713: PPUSH
9714: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9718: LD_INT 2
9720: PPUSH
9721: LD_VAR 0 3
9725: PPUSH
9726: LD_INT 1
9728: PPUSH
9729: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9733: LD_INT 11
9735: PPUSH
9736: LD_VAR 0 3
9740: PPUSH
9741: LD_INT 1
9743: PPUSH
9744: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9748: LD_INT 20
9750: PPUSH
9751: LD_VAR 0 3
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9763: LD_INT 48
9765: PPUSH
9766: LD_VAR 0 3
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9778: LD_INT 49
9780: PPUSH
9781: LD_VAR 0 3
9785: PPUSH
9786: LD_INT 1
9788: PPUSH
9789: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9793: LD_INT 69
9795: PPUSH
9796: LD_VAR 0 3
9800: PPUSH
9801: LD_INT 1
9803: PPUSH
9804: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9808: LD_INT 39
9810: PPUSH
9811: LD_VAR 0 3
9815: PPUSH
9816: LD_INT 1
9818: PPUSH
9819: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9823: LD_INT 34
9825: PPUSH
9826: LD_VAR 0 3
9830: PPUSH
9831: LD_INT 1
9833: PPUSH
9834: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9838: LD_INT 42
9840: PPUSH
9841: LD_VAR 0 3
9845: PPUSH
9846: LD_INT 1
9848: PPUSH
9849: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9853: LD_INT 44
9855: PPUSH
9856: LD_VAR 0 3
9860: PPUSH
9861: LD_INT 1
9863: PPUSH
9864: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9868: LD_INT 41
9870: PPUSH
9871: LD_VAR 0 3
9875: PPUSH
9876: LD_INT 1
9878: PPUSH
9879: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
9883: LD_INT 40
9885: PPUSH
9886: LD_VAR 0 3
9890: PPUSH
9891: LD_INT 1
9893: PPUSH
9894: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9898: LD_INT 43
9900: PPUSH
9901: LD_VAR 0 3
9905: PPUSH
9906: LD_INT 1
9908: PPUSH
9909: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9913: LD_INT 70
9915: PPUSH
9916: LD_VAR 0 3
9920: PPUSH
9921: LD_INT 1
9923: PPUSH
9924: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9928: LD_INT 51
9930: PPUSH
9931: LD_VAR 0 3
9935: PPUSH
9936: LD_INT 1
9938: PPUSH
9939: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9943: LD_INT 52
9945: PPUSH
9946: LD_VAR 0 3
9950: PPUSH
9951: LD_INT 1
9953: PPUSH
9954: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9958: LD_INT 6
9960: PPUSH
9961: LD_VAR 0 3
9965: PPUSH
9966: LD_INT 1
9968: PPUSH
9969: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9973: LD_INT 15
9975: PPUSH
9976: LD_VAR 0 3
9980: PPUSH
9981: LD_INT 1
9983: PPUSH
9984: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9988: LD_INT 7
9990: PPUSH
9991: LD_VAR 0 3
9995: PPUSH
9996: LD_INT 1
9998: PPUSH
9999: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10003: LD_INT 12
10005: PPUSH
10006: LD_VAR 0 3
10010: PPUSH
10011: LD_INT 1
10013: PPUSH
10014: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10018: LD_INT 17
10020: PPUSH
10021: LD_VAR 0 3
10025: PPUSH
10026: LD_INT 1
10028: PPUSH
10029: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10033: LD_INT 18
10035: PPUSH
10036: LD_VAR 0 3
10040: PPUSH
10041: LD_INT 1
10043: PPUSH
10044: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10048: LD_INT 60
10050: PPUSH
10051: LD_VAR 0 3
10055: PPUSH
10056: LD_INT 1
10058: PPUSH
10059: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10063: LD_INT 32
10065: PPUSH
10066: LD_VAR 0 3
10070: PPUSH
10071: LD_INT 1
10073: PPUSH
10074: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10078: LD_INT 9
10080: PPUSH
10081: LD_VAR 0 3
10085: PPUSH
10086: LD_INT 1
10088: PPUSH
10089: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10093: LD_INT 57
10095: PPUSH
10096: LD_VAR 0 3
10100: PPUSH
10101: LD_INT 1
10103: PPUSH
10104: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10108: LD_INT 30
10110: PPUSH
10111: LD_VAR 0 3
10115: PPUSH
10116: LD_INT 1
10118: PPUSH
10119: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10123: LD_INT 37
10125: PPUSH
10126: LD_VAR 0 3
10130: PPUSH
10131: LD_INT 1
10133: PPUSH
10134: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10138: LD_INT 63
10140: PPUSH
10141: LD_VAR 0 3
10145: PPUSH
10146: LD_INT 1
10148: PPUSH
10149: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10153: LD_INT 3
10155: PPUSH
10156: LD_VAR 0 3
10160: PPUSH
10161: LD_INT 1
10163: PPUSH
10164: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10168: LD_INT 4
10170: PPUSH
10171: LD_VAR 0 3
10175: PPUSH
10176: LD_INT 1
10178: PPUSH
10179: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10183: LD_INT 5
10185: PPUSH
10186: LD_VAR 0 3
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10198: LD_INT 66
10200: PPUSH
10201: LD_VAR 0 3
10205: PPUSH
10206: LD_INT 1
10208: PPUSH
10209: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10213: LD_INT 21
10215: PPUSH
10216: LD_VAR 0 3
10220: PPUSH
10221: LD_INT 1
10223: PPUSH
10224: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10228: LD_INT 22
10230: PPUSH
10231: LD_VAR 0 3
10235: PPUSH
10236: LD_INT 1
10238: PPUSH
10239: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10243: LD_INT 19
10245: PPUSH
10246: LD_VAR 0 3
10250: PPUSH
10251: LD_INT 1
10253: PPUSH
10254: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10258: LD_INT 54
10260: PPUSH
10261: LD_VAR 0 3
10265: PPUSH
10266: LD_INT 1
10268: PPUSH
10269: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
10273: LD_INT 55
10275: PPUSH
10276: LD_VAR 0 3
10280: PPUSH
10281: LD_INT 1
10283: PPUSH
10284: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10288: LD_INT 0
10290: PPUSH
10291: LD_VAR 0 3
10295: PPUSH
10296: LD_INT 1
10298: PPUSH
10299: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10303: LD_INT 1
10305: PPUSH
10306: LD_VAR 0 3
10310: PPUSH
10311: LD_INT 1
10313: PPUSH
10314: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10318: LD_INT 2
10320: PPUSH
10321: LD_VAR 0 3
10325: PPUSH
10326: LD_INT 1
10328: PPUSH
10329: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10333: LD_INT 3
10335: PPUSH
10336: LD_VAR 0 3
10340: PPUSH
10341: LD_INT 1
10343: PPUSH
10344: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10348: LD_INT 4
10350: PPUSH
10351: LD_VAR 0 3
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10363: LD_INT 5
10365: PPUSH
10366: LD_VAR 0 3
10370: PPUSH
10371: LD_INT 1
10373: PPUSH
10374: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10378: LD_INT 6
10380: PPUSH
10381: LD_VAR 0 3
10385: PPUSH
10386: LD_INT 1
10388: PPUSH
10389: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10393: LD_INT 7
10395: PPUSH
10396: LD_VAR 0 3
10400: PPUSH
10401: LD_INT 1
10403: PPUSH
10404: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10408: LD_INT 8
10410: PPUSH
10411: LD_VAR 0 3
10415: PPUSH
10416: LD_INT 1
10418: PPUSH
10419: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10423: LD_INT 10
10425: PPUSH
10426: LD_VAR 0 3
10430: PPUSH
10431: LD_INT 1
10433: PPUSH
10434: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10438: LD_INT 11
10440: PPUSH
10441: LD_VAR 0 3
10445: PPUSH
10446: LD_INT 1
10448: PPUSH
10449: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10453: LD_INT 12
10455: PPUSH
10456: LD_VAR 0 3
10460: PPUSH
10461: LD_INT 1
10463: PPUSH
10464: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10468: LD_INT 13
10470: PPUSH
10471: LD_VAR 0 3
10475: PPUSH
10476: LD_INT 1
10478: PPUSH
10479: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10483: LD_INT 14
10485: PPUSH
10486: LD_VAR 0 3
10490: PPUSH
10491: LD_INT 1
10493: PPUSH
10494: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10498: LD_INT 15
10500: PPUSH
10501: LD_VAR 0 3
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10513: LD_INT 16
10515: PPUSH
10516: LD_VAR 0 3
10520: PPUSH
10521: LD_INT 1
10523: PPUSH
10524: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10528: LD_INT 17
10530: PPUSH
10531: LD_VAR 0 3
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
10543: LD_INT 18
10545: PPUSH
10546: LD_VAR 0 3
10550: PPUSH
10551: LD_INT 1
10553: PPUSH
10554: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10558: LD_INT 19
10560: PPUSH
10561: LD_VAR 0 3
10565: PPUSH
10566: LD_INT 1
10568: PPUSH
10569: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10573: LD_INT 20
10575: PPUSH
10576: LD_VAR 0 3
10580: PPUSH
10581: LD_INT 1
10583: PPUSH
10584: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10588: LD_INT 21
10590: PPUSH
10591: LD_VAR 0 3
10595: PPUSH
10596: LD_INT 1
10598: PPUSH
10599: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10603: LD_INT 23
10605: PPUSH
10606: LD_VAR 0 3
10610: PPUSH
10611: LD_INT 1
10613: PPUSH
10614: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10618: LD_INT 26
10620: PPUSH
10621: LD_VAR 0 3
10625: PPUSH
10626: LD_INT 1
10628: PPUSH
10629: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10633: LD_INT 27
10635: PPUSH
10636: LD_VAR 0 3
10640: PPUSH
10641: LD_INT 1
10643: PPUSH
10644: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10648: LD_INT 28
10650: PPUSH
10651: LD_VAR 0 3
10655: PPUSH
10656: LD_INT 1
10658: PPUSH
10659: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10663: LD_INT 29
10665: PPUSH
10666: LD_VAR 0 3
10670: PPUSH
10671: LD_INT 1
10673: PPUSH
10674: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10678: LD_INT 30
10680: PPUSH
10681: LD_VAR 0 3
10685: PPUSH
10686: LD_INT 1
10688: PPUSH
10689: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10693: LD_INT 31
10695: PPUSH
10696: LD_VAR 0 3
10700: PPUSH
10701: LD_INT 1
10703: PPUSH
10704: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10708: LD_INT 32
10710: PPUSH
10711: LD_VAR 0 3
10715: PPUSH
10716: LD_INT 1
10718: PPUSH
10719: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
10723: LD_INT 33
10725: PPUSH
10726: LD_VAR 0 3
10730: PPUSH
10731: LD_INT 1
10733: PPUSH
10734: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10738: LD_INT 36
10740: PPUSH
10741: LD_VAR 0 3
10745: PPUSH
10746: LD_INT 1
10748: PPUSH
10749: CALL_OW 324
// end ; 6 :
10753: GO 11763
10755: LD_INT 6
10757: DOUBLE
10758: EQUAL
10759: IFTRUE 10763
10761: GO 11688
10763: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10764: LD_INT 35
10766: PPUSH
10767: LD_VAR 0 3
10771: PPUSH
10772: LD_INT 1
10774: PPUSH
10775: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10779: LD_INT 45
10781: PPUSH
10782: LD_VAR 0 3
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10794: LD_INT 46
10796: PPUSH
10797: LD_VAR 0 3
10801: PPUSH
10802: LD_INT 1
10804: PPUSH
10805: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10809: LD_INT 47
10811: PPUSH
10812: LD_VAR 0 3
10816: PPUSH
10817: LD_INT 1
10819: PPUSH
10820: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10824: LD_INT 1
10826: PPUSH
10827: LD_VAR 0 3
10831: PPUSH
10832: LD_INT 1
10834: PPUSH
10835: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10839: LD_INT 2
10841: PPUSH
10842: LD_VAR 0 3
10846: PPUSH
10847: LD_INT 1
10849: PPUSH
10850: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10854: LD_INT 11
10856: PPUSH
10857: LD_VAR 0 3
10861: PPUSH
10862: LD_INT 1
10864: PPUSH
10865: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10869: LD_INT 20
10871: PPUSH
10872: LD_VAR 0 3
10876: PPUSH
10877: LD_INT 1
10879: PPUSH
10880: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10884: LD_INT 48
10886: PPUSH
10887: LD_VAR 0 3
10891: PPUSH
10892: LD_INT 1
10894: PPUSH
10895: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10899: LD_INT 49
10901: PPUSH
10902: LD_VAR 0 3
10906: PPUSH
10907: LD_INT 1
10909: PPUSH
10910: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
10914: LD_INT 50
10916: PPUSH
10917: LD_VAR 0 3
10921: PPUSH
10922: LD_INT 1
10924: PPUSH
10925: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10929: LD_INT 69
10931: PPUSH
10932: LD_VAR 0 3
10936: PPUSH
10937: LD_INT 1
10939: PPUSH
10940: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10944: LD_INT 39
10946: PPUSH
10947: LD_VAR 0 3
10951: PPUSH
10952: LD_INT 1
10954: PPUSH
10955: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10959: LD_INT 34
10961: PPUSH
10962: LD_VAR 0 3
10966: PPUSH
10967: LD_INT 1
10969: PPUSH
10970: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10974: LD_INT 42
10976: PPUSH
10977: LD_VAR 0 3
10981: PPUSH
10982: LD_INT 1
10984: PPUSH
10985: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10989: LD_INT 44
10991: PPUSH
10992: LD_VAR 0 3
10996: PPUSH
10997: LD_INT 1
10999: PPUSH
11000: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11004: LD_INT 41
11006: PPUSH
11007: LD_VAR 0 3
11011: PPUSH
11012: LD_INT 1
11014: PPUSH
11015: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11019: LD_INT 13
11021: PPUSH
11022: LD_VAR 0 3
11026: PPUSH
11027: LD_INT 1
11029: PPUSH
11030: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11034: LD_INT 40
11036: PPUSH
11037: LD_VAR 0 3
11041: PPUSH
11042: LD_INT 1
11044: PPUSH
11045: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11049: LD_INT 43
11051: PPUSH
11052: LD_VAR 0 3
11056: PPUSH
11057: LD_INT 1
11059: PPUSH
11060: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11064: LD_INT 70
11066: PPUSH
11067: LD_VAR 0 3
11071: PPUSH
11072: LD_INT 1
11074: PPUSH
11075: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11079: LD_INT 23
11081: PPUSH
11082: LD_VAR 0 3
11086: PPUSH
11087: LD_INT 1
11089: PPUSH
11090: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11094: LD_INT 51
11096: PPUSH
11097: LD_VAR 0 3
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11109: LD_INT 52
11111: PPUSH
11112: LD_VAR 0 3
11116: PPUSH
11117: LD_INT 1
11119: PPUSH
11120: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11124: LD_INT 6
11126: PPUSH
11127: LD_VAR 0 3
11131: PPUSH
11132: LD_INT 1
11134: PPUSH
11135: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11139: LD_INT 15
11141: PPUSH
11142: LD_VAR 0 3
11146: PPUSH
11147: LD_INT 1
11149: PPUSH
11150: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11154: LD_INT 7
11156: PPUSH
11157: LD_VAR 0 3
11161: PPUSH
11162: LD_INT 1
11164: PPUSH
11165: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11169: LD_INT 12
11171: PPUSH
11172: LD_VAR 0 3
11176: PPUSH
11177: LD_INT 1
11179: PPUSH
11180: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11184: LD_INT 10
11186: PPUSH
11187: LD_VAR 0 3
11191: PPUSH
11192: LD_INT 1
11194: PPUSH
11195: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11199: LD_INT 17
11201: PPUSH
11202: LD_VAR 0 3
11206: PPUSH
11207: LD_INT 1
11209: PPUSH
11210: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11214: LD_INT 18
11216: PPUSH
11217: LD_VAR 0 3
11221: PPUSH
11222: LD_INT 1
11224: PPUSH
11225: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11229: LD_INT 60
11231: PPUSH
11232: LD_VAR 0 3
11236: PPUSH
11237: LD_INT 1
11239: PPUSH
11240: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11244: LD_INT 61
11246: PPUSH
11247: LD_VAR 0 3
11251: PPUSH
11252: LD_INT 1
11254: PPUSH
11255: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11259: LD_INT 32
11261: PPUSH
11262: LD_VAR 0 3
11266: PPUSH
11267: LD_INT 1
11269: PPUSH
11270: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
11274: LD_INT 27
11276: PPUSH
11277: LD_VAR 0 3
11281: PPUSH
11282: LD_INT 1
11284: PPUSH
11285: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
11289: LD_INT 36
11291: PPUSH
11292: LD_VAR 0 3
11296: PPUSH
11297: LD_INT 1
11299: PPUSH
11300: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
11304: LD_INT 33
11306: PPUSH
11307: LD_VAR 0 3
11311: PPUSH
11312: LD_INT 1
11314: PPUSH
11315: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11319: LD_INT 9
11321: PPUSH
11322: LD_VAR 0 3
11326: PPUSH
11327: LD_INT 1
11329: PPUSH
11330: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
11334: LD_INT 38
11336: PPUSH
11337: LD_VAR 0 3
11341: PPUSH
11342: LD_INT 1
11344: PPUSH
11345: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11349: LD_INT 57
11351: PPUSH
11352: LD_VAR 0 3
11356: PPUSH
11357: LD_INT 1
11359: PPUSH
11360: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
11364: LD_INT 58
11366: PPUSH
11367: LD_VAR 0 3
11371: PPUSH
11372: LD_INT 1
11374: PPUSH
11375: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
11379: LD_INT 28
11381: PPUSH
11382: LD_VAR 0 3
11386: PPUSH
11387: LD_INT 1
11389: PPUSH
11390: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
11394: LD_INT 29
11396: PPUSH
11397: LD_VAR 0 3
11401: PPUSH
11402: LD_INT 1
11404: PPUSH
11405: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11409: LD_INT 30
11411: PPUSH
11412: LD_VAR 0 3
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11424: LD_INT 37
11426: PPUSH
11427: LD_VAR 0 3
11431: PPUSH
11432: LD_INT 1
11434: PPUSH
11435: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11439: LD_INT 63
11441: PPUSH
11442: LD_VAR 0 3
11446: PPUSH
11447: LD_INT 1
11449: PPUSH
11450: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
11454: LD_INT 64
11456: PPUSH
11457: LD_VAR 0 3
11461: PPUSH
11462: LD_INT 1
11464: PPUSH
11465: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11469: LD_INT 3
11471: PPUSH
11472: LD_VAR 0 3
11476: PPUSH
11477: LD_INT 1
11479: PPUSH
11480: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11484: LD_INT 4
11486: PPUSH
11487: LD_VAR 0 3
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11499: LD_INT 5
11501: PPUSH
11502: LD_VAR 0 3
11506: PPUSH
11507: LD_INT 1
11509: PPUSH
11510: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
11514: LD_INT 8
11516: PPUSH
11517: LD_VAR 0 3
11521: PPUSH
11522: LD_INT 1
11524: PPUSH
11525: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11529: LD_INT 66
11531: PPUSH
11532: LD_VAR 0 3
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
11544: LD_INT 67
11546: PPUSH
11547: LD_VAR 0 3
11551: PPUSH
11552: LD_INT 1
11554: PPUSH
11555: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11559: LD_INT 21
11561: PPUSH
11562: LD_VAR 0 3
11566: PPUSH
11567: LD_INT 1
11569: PPUSH
11570: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11574: LD_INT 22
11576: PPUSH
11577: LD_VAR 0 3
11581: PPUSH
11582: LD_INT 1
11584: PPUSH
11585: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11589: LD_INT 19
11591: PPUSH
11592: LD_VAR 0 3
11596: PPUSH
11597: LD_INT 1
11599: PPUSH
11600: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
11604: LD_INT 26
11606: PPUSH
11607: LD_VAR 0 3
11611: PPUSH
11612: LD_INT 1
11614: PPUSH
11615: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11619: LD_INT 54
11621: PPUSH
11622: LD_VAR 0 3
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11634: LD_INT 55
11636: PPUSH
11637: LD_VAR 0 3
11641: PPUSH
11642: LD_INT 1
11644: PPUSH
11645: CALL_OW 322
// for i = 0 to 39 do
11649: LD_ADDR_VAR 0 4
11653: PUSH
11654: DOUBLE
11655: LD_INT 0
11657: DEC
11658: ST_TO_ADDR
11659: LD_INT 39
11661: PUSH
11662: FOR_TO
11663: IFFALSE 11684
// SetRestrict ( i , side , true ) ;
11665: LD_VAR 0 4
11669: PPUSH
11670: LD_VAR 0 3
11674: PPUSH
11675: LD_INT 1
11677: PPUSH
11678: CALL_OW 324
11682: GO 11662
11684: POP
11685: POP
// end ; else
11686: GO 11763
11688: POP
// begin for i = 1 to 73 do
11689: LD_ADDR_VAR 0 4
11693: PUSH
11694: DOUBLE
11695: LD_INT 1
11697: DEC
11698: ST_TO_ADDR
11699: LD_INT 73
11701: PUSH
11702: FOR_TO
11703: IFFALSE 11724
// SetTech ( i , side , state_enabled ) ;
11705: LD_VAR 0 4
11709: PPUSH
11710: LD_VAR 0 3
11714: PPUSH
11715: LD_INT 1
11717: PPUSH
11718: CALL_OW 322
11722: GO 11702
11724: POP
11725: POP
// for i = 0 to 39 do
11726: LD_ADDR_VAR 0 4
11730: PUSH
11731: DOUBLE
11732: LD_INT 0
11734: DEC
11735: ST_TO_ADDR
11736: LD_INT 39
11738: PUSH
11739: FOR_TO
11740: IFFALSE 11761
// SetRestrict ( i , side , true ) ;
11742: LD_VAR 0 4
11746: PPUSH
11747: LD_VAR 0 3
11751: PPUSH
11752: LD_INT 1
11754: PPUSH
11755: CALL_OW 324
11759: GO 11739
11761: POP
11762: POP
// end ; end ; end ;
11763: GO 7768
11765: POP
11766: POP
// end ; end_of_file
11767: LD_VAR 0 2
11771: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
11772: LD_INT 0
11774: PPUSH
11775: PPUSH
11776: PPUSH
11777: PPUSH
11778: PPUSH
11779: PPUSH
11780: PPUSH
11781: PPUSH
11782: PPUSH
// for i := 1 to 8 do
11783: LD_ADDR_VAR 0 2
11787: PUSH
11788: DOUBLE
11789: LD_INT 1
11791: DEC
11792: ST_TO_ADDR
11793: LD_INT 8
11795: PUSH
11796: FOR_TO
11797: IFFALSE 12181
// begin if Side_Positions [ i ] then
11799: LD_EXP 39
11803: PUSH
11804: LD_VAR 0 2
11808: ARRAY
11809: IFFALSE 12179
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
11811: LD_ADDR_VAR 0 7
11815: PUSH
11816: LD_INT 22
11818: PUSH
11819: LD_VAR 0 2
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 21
11830: PUSH
11831: LD_INT 1
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PPUSH
11842: CALL_OW 69
11846: PUSH
11847: LD_INT 0
11849: PLUS
11850: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11851: LD_ADDR_VAR 0 9
11855: PUSH
11856: LD_INT 22
11858: PUSH
11859: LD_VAR 0 2
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 2
11870: PUSH
11871: LD_INT 30
11873: PUSH
11874: LD_INT 0
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 30
11883: PUSH
11884: LD_INT 1
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: LIST
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 69
11904: ST_TO_ADDR
// crates := 0 ;
11905: LD_ADDR_VAR 0 4
11909: PUSH
11910: LD_INT 0
11912: ST_TO_ADDR
// oil := 0 ;
11913: LD_ADDR_VAR 0 5
11917: PUSH
11918: LD_INT 0
11920: ST_TO_ADDR
// sib := 0 ;
11921: LD_ADDR_VAR 0 6
11925: PUSH
11926: LD_INT 0
11928: ST_TO_ADDR
// if bases then
11929: LD_VAR 0 9
11933: IFFALSE 12039
// begin for j in bases do
11935: LD_ADDR_VAR 0 3
11939: PUSH
11940: LD_VAR 0 9
11944: PUSH
11945: FOR_IN
11946: IFFALSE 12037
// begin base := GetBase ( j ) ;
11948: LD_ADDR_VAR 0 8
11952: PUSH
11953: LD_VAR 0 3
11957: PPUSH
11958: CALL_OW 274
11962: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
11963: LD_ADDR_VAR 0 4
11967: PUSH
11968: LD_VAR 0 4
11972: PUSH
11973: LD_VAR 0 8
11977: PPUSH
11978: LD_INT 1
11980: PPUSH
11981: CALL_OW 275
11985: PLUS
11986: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
11987: LD_ADDR_VAR 0 5
11991: PUSH
11992: LD_VAR 0 5
11996: PUSH
11997: LD_VAR 0 8
12001: PPUSH
12002: LD_INT 2
12004: PPUSH
12005: CALL_OW 275
12009: PLUS
12010: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12011: LD_ADDR_VAR 0 6
12015: PUSH
12016: LD_VAR 0 6
12020: PUSH
12021: LD_VAR 0 8
12025: PPUSH
12026: LD_INT 3
12028: PPUSH
12029: CALL_OW 275
12033: PLUS
12034: ST_TO_ADDR
// end ;
12035: GO 11945
12037: POP
12038: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12039: LD_STRING setSpecText(
12041: PUSH
12042: LD_VAR 0 2
12046: STR
12047: PUSH
12048: LD_STRING ,
12050: STR
12051: PUSH
12052: LD_INT 2
12054: STR
12055: PUSH
12056: LD_STRING ,
12058: STR
12059: PUSH
12060: LD_VAR 0 4
12064: STR
12065: PUSH
12066: LD_STRING )
12068: STR
12069: PPUSH
12070: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12074: LD_STRING setSpecText(
12076: PUSH
12077: LD_VAR 0 2
12081: STR
12082: PUSH
12083: LD_STRING ,
12085: STR
12086: PUSH
12087: LD_INT 3
12089: STR
12090: PUSH
12091: LD_STRING ,
12093: STR
12094: PUSH
12095: LD_VAR 0 5
12099: STR
12100: PUSH
12101: LD_STRING )
12103: STR
12104: PPUSH
12105: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12109: LD_STRING setSpecText(
12111: PUSH
12112: LD_VAR 0 2
12116: STR
12117: PUSH
12118: LD_STRING ,
12120: STR
12121: PUSH
12122: LD_INT 4
12124: STR
12125: PUSH
12126: LD_STRING ,
12128: STR
12129: PUSH
12130: LD_VAR 0 6
12134: STR
12135: PUSH
12136: LD_STRING )
12138: STR
12139: PPUSH
12140: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12144: LD_STRING setSpecText(
12146: PUSH
12147: LD_VAR 0 2
12151: STR
12152: PUSH
12153: LD_STRING ,
12155: STR
12156: PUSH
12157: LD_INT 5
12159: STR
12160: PUSH
12161: LD_STRING ,
12163: STR
12164: PUSH
12165: LD_VAR 0 7
12169: STR
12170: PUSH
12171: LD_STRING )
12173: STR
12174: PPUSH
12175: CALL_OW 559
// end ; end ;
12179: GO 11796
12181: POP
12182: POP
// end ;
12183: LD_VAR 0 1
12187: RET
// every 0 0$1 do
12188: GO 12190
12190: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12191: LD_STRING setSpecLogoNumber(
12193: PUSH
12194: LD_INT 2
12196: STR
12197: PUSH
12198: LD_STRING ,
12200: STR
12201: PUSH
12202: LD_INT 1
12204: STR
12205: PUSH
12206: LD_STRING )
12208: STR
12209: PPUSH
12210: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12214: LD_STRING setSpecLogoNumber(
12216: PUSH
12217: LD_INT 3
12219: STR
12220: PUSH
12221: LD_STRING ,
12223: STR
12224: PUSH
12225: LD_INT 2
12227: STR
12228: PUSH
12229: LD_STRING )
12231: STR
12232: PPUSH
12233: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12237: LD_STRING setSpecLogoNumber(
12239: PUSH
12240: LD_INT 4
12242: STR
12243: PUSH
12244: LD_STRING ,
12246: STR
12247: PUSH
12248: LD_INT 3
12250: STR
12251: PUSH
12252: LD_STRING )
12254: STR
12255: PPUSH
12256: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12260: LD_STRING setSpecLogoNumber(
12262: PUSH
12263: LD_INT 5
12265: STR
12266: PUSH
12267: LD_STRING ,
12269: STR
12270: PUSH
12271: LD_INT 4
12273: STR
12274: PUSH
12275: LD_STRING )
12277: STR
12278: PPUSH
12279: CALL_OW 559
// end ;
12283: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12284: LD_INT 2
12286: PUSH
12287: LD_INT 30
12289: PUSH
12290: LD_INT 0
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 30
12299: PUSH
12300: LD_INT 1
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: PPUSH
12312: CALL_OW 69
12316: IFFALSE 12326
12318: GO 12320
12320: DISABLE
// begin enable ;
12321: ENABLE
// UpdateSpectatorBar ;
12322: CALL 11772 0 0
// end ; end_of_file
12326: END
// var respawn , inqueue ; export function init_respawning ; begin
12327: LD_INT 0
12329: PPUSH
// respawn := Rand ( 1 , 8 ) ;
12330: LD_ADDR_LOC 14
12334: PUSH
12335: LD_INT 1
12337: PPUSH
12338: LD_INT 8
12340: PPUSH
12341: CALL_OW 12
12345: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12346: LD_ADDR_LOC 15
12350: PUSH
12351: LD_INT 0
12353: PUSH
12354: LD_INT 0
12356: PUSH
12357: LD_INT 0
12359: PUSH
12360: LD_INT 0
12362: PUSH
12363: LD_INT 0
12365: PUSH
12366: LD_INT 0
12368: PUSH
12369: LD_INT 0
12371: PUSH
12372: LD_INT 0
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: ST_TO_ADDR
// end ;
12385: LD_VAR 0 1
12389: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
12390: GO 12392
12392: DISABLE
12393: LD_INT 0
12395: PPUSH
12396: PPUSH
12397: PPUSH
// begin if respawning_time_max = 0 then
12398: LD_EXP 30
12402: PUSH
12403: LD_INT 0
12405: EQUAL
12406: IFFALSE 12410
// exit ;
12408: GO 12818
// if respawn = 8 then
12410: LD_LOC 14
12414: PUSH
12415: LD_INT 8
12417: EQUAL
12418: IFFALSE 12430
// respawn := 1 else
12420: LD_ADDR_LOC 14
12424: PUSH
12425: LD_INT 1
12427: ST_TO_ADDR
12428: GO 12444
// respawn := respawn + 1 ;
12430: LD_ADDR_LOC 14
12434: PUSH
12435: LD_LOC 14
12439: PUSH
12440: LD_INT 1
12442: PLUS
12443: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
12444: LD_EXP 39
12448: PUSH
12449: LD_LOC 14
12453: ARRAY
12454: PUSH
12455: LD_LOC 15
12459: PUSH
12460: LD_LOC 14
12464: ARRAY
12465: NOT
12466: AND
12467: IFFALSE 12817
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
12469: LD_ADDR_VAR 0 1
12473: PUSH
12474: LD_INT 21
12476: PUSH
12477: LD_INT 1
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 22
12486: PUSH
12487: LD_LOC 14
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 3
12498: PUSH
12499: LD_INT 23
12501: PUSH
12502: LD_INT 0
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: PPUSH
12515: CALL_OW 69
12519: ST_TO_ADDR
// if n < number_of_people then
12520: LD_VAR 0 1
12524: PUSH
12525: LD_EXP 21
12529: LESS
12530: IFFALSE 12814
// begin aktresp := respawn ;
12532: LD_ADDR_VAR 0 3
12536: PUSH
12537: LD_LOC 14
12541: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
12542: LD_ADDR_LOC 15
12546: PUSH
12547: LD_LOC 15
12551: PPUSH
12552: LD_VAR 0 3
12556: PPUSH
12557: LD_INT 1
12559: PPUSH
12560: CALL_OW 1
12564: ST_TO_ADDR
// enable ;
12565: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
12566: LD_EXP 29
12570: PPUSH
12571: LD_EXP 30
12575: PPUSH
12576: CALL_OW 12
12580: PPUSH
12581: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
12585: LD_ADDR_LOC 15
12589: PUSH
12590: LD_LOC 15
12594: PPUSH
12595: LD_VAR 0 3
12599: PPUSH
12600: LD_INT 0
12602: PPUSH
12603: CALL_OW 1
12607: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
12608: LD_ADDR_VAR 0 2
12612: PUSH
12613: LD_INT 21
12615: PUSH
12616: LD_INT 3
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: LD_INT 2
12625: PUSH
12626: LD_INT 30
12628: PUSH
12629: LD_INT 0
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: LD_INT 30
12638: PUSH
12639: LD_INT 1
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 50
12653: PUSH
12654: EMPTY
12655: LIST
12656: PUSH
12657: LD_INT 22
12659: PUSH
12660: LD_VAR 0 3
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: PPUSH
12675: CALL_OW 69
12679: ST_TO_ADDR
// if dep = 0 then
12680: LD_VAR 0 2
12684: PUSH
12685: LD_INT 0
12687: EQUAL
12688: IFFALSE 12692
// exit ;
12690: GO 12818
// hc_name :=  ;
12692: LD_ADDR_OWVAR 26
12696: PUSH
12697: LD_STRING 
12699: ST_TO_ADDR
// hc_importance := 0 ;
12700: LD_ADDR_OWVAR 32
12704: PUSH
12705: LD_INT 0
12707: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
12708: LD_INT 0
12710: PPUSH
12711: LD_INT 0
12713: PPUSH
12714: LD_EXP 22
12718: PUSH
12719: LD_INT 2
12721: DIV
12722: PPUSH
12723: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
12727: LD_ADDR_OWVAR 21
12731: PUSH
12732: LD_EXP 40
12736: PUSH
12737: LD_VAR 0 3
12741: ARRAY
12742: ST_TO_ADDR
// uc_side := aktresp ;
12743: LD_ADDR_OWVAR 20
12747: PUSH
12748: LD_VAR 0 3
12752: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
12753: LD_ADDR_VAR 0 2
12757: PUSH
12758: LD_VAR 0 2
12762: PUSH
12763: LD_INT 1
12765: PPUSH
12766: LD_VAR 0 2
12770: PPUSH
12771: CALL_OW 12
12775: ARRAY
12776: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
12777: CALL_OW 44
12781: PPUSH
12782: LD_VAR 0 2
12786: PPUSH
12787: CALL_OW 250
12791: PPUSH
12792: LD_VAR 0 2
12796: PPUSH
12797: CALL_OW 251
12801: PPUSH
12802: LD_INT 7
12804: PPUSH
12805: LD_INT 1
12807: PPUSH
12808: CALL_OW 50
// end else
12812: GO 12815
// enable ;
12814: ENABLE
// end else
12815: GO 12818
// enable ;
12817: ENABLE
// end ; end_of_file
12818: PPOPN 3
12820: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
12821: LD_INT 0
12823: PPUSH
12824: PPUSH
12825: PPUSH
// BuildUpTime_Delay = 0 ;
12826: LD_ADDR_EXP 62
12830: PUSH
12831: LD_INT 0
12833: ST_TO_ADDR
// if not def_builduptime then
12834: LD_EXP 16
12838: NOT
12839: IFFALSE 12843
// exit ;
12841: GO 13026
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
12843: LD_ADDR_EXP 62
12847: PUSH
12848: LD_INT 8400
12850: PUSH
12851: LD_INT 2100
12853: PUSH
12854: LD_EXP 16
12858: MUL
12859: PLUS
12860: ST_TO_ADDR
// BuildUpTimeActive := true ;
12861: LD_ADDR_EXP 61
12865: PUSH
12866: LD_INT 1
12868: ST_TO_ADDR
// for i := 1 to 8 do
12869: LD_ADDR_VAR 0 2
12873: PUSH
12874: DOUBLE
12875: LD_INT 1
12877: DEC
12878: ST_TO_ADDR
12879: LD_INT 8
12881: PUSH
12882: FOR_TO
12883: IFFALSE 13024
// if Side_Positions [ i ] then
12885: LD_EXP 39
12889: PUSH
12890: LD_VAR 0 2
12894: ARRAY
12895: IFFALSE 13022
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
12897: LD_EXP 60
12901: PUSH
12902: LD_EXP 39
12906: PUSH
12907: LD_VAR 0 2
12911: ARRAY
12912: ARRAY
12913: PPUSH
12914: LD_INT 5
12916: PPUSH
12917: CALL_OW 424
// for j := 1 to 8 do
12921: LD_ADDR_VAR 0 3
12925: PUSH
12926: DOUBLE
12927: LD_INT 1
12929: DEC
12930: ST_TO_ADDR
12931: LD_INT 8
12933: PUSH
12934: FOR_TO
12935: IFFALSE 13020
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
12937: LD_EXP 39
12941: PUSH
12942: LD_VAR 0 3
12946: ARRAY
12947: PUSH
12948: LD_EXP 36
12952: PUSH
12953: LD_VAR 0 2
12957: ARRAY
12958: PUSH
12959: LD_EXP 36
12963: PUSH
12964: LD_VAR 0 3
12968: ARRAY
12969: NONEQUAL
12970: PUSH
12971: LD_EXP 41
12975: NOT
12976: PUSH
12977: LD_VAR 0 2
12981: PUSH
12982: LD_VAR 0 3
12986: NONEQUAL
12987: AND
12988: OR
12989: AND
12990: IFFALSE 13018
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
12992: LD_VAR 0 3
12996: PPUSH
12997: LD_EXP 60
13001: PUSH
13002: LD_EXP 39
13006: PUSH
13007: LD_VAR 0 2
13011: ARRAY
13012: ARRAY
13013: PPUSH
13014: CALL_OW 333
13018: GO 12934
13020: POP
13021: POP
// end ;
13022: GO 12882
13024: POP
13025: POP
// end ;
13026: LD_VAR 0 1
13030: RET
// export function EndBuildUp ; var i , j ; begin
13031: LD_INT 0
13033: PPUSH
13034: PPUSH
13035: PPUSH
// BuildUpTimeActive := false ;
13036: LD_ADDR_EXP 61
13040: PUSH
13041: LD_INT 0
13043: ST_TO_ADDR
// for i := 1 to 8 do
13044: LD_ADDR_VAR 0 2
13048: PUSH
13049: DOUBLE
13050: LD_INT 1
13052: DEC
13053: ST_TO_ADDR
13054: LD_INT 8
13056: PUSH
13057: FOR_TO
13058: IFFALSE 13199
// if Side_Positions [ i ] then
13060: LD_EXP 39
13064: PUSH
13065: LD_VAR 0 2
13069: ARRAY
13070: IFFALSE 13197
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13072: LD_EXP 60
13076: PUSH
13077: LD_EXP 39
13081: PUSH
13082: LD_VAR 0 2
13086: ARRAY
13087: ARRAY
13088: PPUSH
13089: LD_INT 0
13091: PPUSH
13092: CALL_OW 424
// for j := 1 to 8 do
13096: LD_ADDR_VAR 0 3
13100: PUSH
13101: DOUBLE
13102: LD_INT 1
13104: DEC
13105: ST_TO_ADDR
13106: LD_INT 8
13108: PUSH
13109: FOR_TO
13110: IFFALSE 13195
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13112: LD_EXP 39
13116: PUSH
13117: LD_VAR 0 3
13121: ARRAY
13122: PUSH
13123: LD_EXP 36
13127: PUSH
13128: LD_VAR 0 2
13132: ARRAY
13133: PUSH
13134: LD_EXP 36
13138: PUSH
13139: LD_VAR 0 3
13143: ARRAY
13144: NONEQUAL
13145: PUSH
13146: LD_EXP 41
13150: NOT
13151: PUSH
13152: LD_VAR 0 2
13156: PUSH
13157: LD_VAR 0 3
13161: NONEQUAL
13162: AND
13163: OR
13164: AND
13165: IFFALSE 13193
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13167: LD_VAR 0 3
13171: PPUSH
13172: LD_EXP 60
13176: PUSH
13177: LD_EXP 39
13181: PUSH
13182: LD_VAR 0 2
13186: ARRAY
13187: ARRAY
13188: PPUSH
13189: CALL_OW 334
13193: GO 13109
13195: POP
13196: POP
// end ;
13197: GO 13057
13199: POP
13200: POP
// end ;
13201: LD_VAR 0 1
13205: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13206: LD_EXP 61
13210: IFFALSE 13385
13212: GO 13214
13214: DISABLE
13215: LD_INT 0
13217: PPUSH
13218: PPUSH
// begin for i := 1 to 8 do
13219: LD_ADDR_VAR 0 1
13223: PUSH
13224: DOUBLE
13225: LD_INT 1
13227: DEC
13228: ST_TO_ADDR
13229: LD_INT 8
13231: PUSH
13232: FOR_TO
13233: IFFALSE 13382
// if Side_Positions [ i ] then
13235: LD_EXP 39
13239: PUSH
13240: LD_VAR 0 1
13244: ARRAY
13245: IFFALSE 13380
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13247: LD_ADDR_VAR 0 2
13251: PUSH
13252: LD_EXP 60
13256: PUSH
13257: LD_EXP 39
13261: PUSH
13262: LD_VAR 0 1
13266: ARRAY
13267: ARRAY
13268: PPUSH
13269: LD_INT 2
13271: PUSH
13272: LD_INT 21
13274: PUSH
13275: LD_INT 1
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 21
13284: PUSH
13285: LD_INT 2
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 22
13299: PUSH
13300: LD_OWVAR 2
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PPUSH
13313: CALL_OW 70
13317: PUSH
13318: FOR_IN
13319: IFFALSE 13378
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
13321: LD_EXP 36
13325: PUSH
13326: LD_VAR 0 1
13330: ARRAY
13331: PUSH
13332: LD_EXP 36
13336: PUSH
13337: LD_OWVAR 2
13341: ARRAY
13342: NONEQUAL
13343: PUSH
13344: LD_EXP 41
13348: NOT
13349: PUSH
13350: LD_VAR 0 1
13354: PUSH
13355: LD_OWVAR 2
13359: NONEQUAL
13360: AND
13361: OR
13362: IFFALSE 13376
// ComMoveToArea ( un , BuildUpEscape ) ;
13364: LD_VAR 0 2
13368: PPUSH
13369: LD_INT 13
13371: PPUSH
13372: CALL_OW 113
13376: GO 13318
13378: POP
13379: POP
13380: GO 13232
13382: POP
13383: POP
// enable ;
13384: ENABLE
// end ;
13385: PPOPN 2
13387: END
// every 0 0$1 trigger def_builduptime do
13388: LD_EXP 16
13392: IFFALSE 13418
13394: GO 13396
13396: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
13397: LD_INT 8400
13399: PUSH
13400: LD_EXP 16
13404: PUSH
13405: LD_INT 2100
13407: MUL
13408: PLUS
13409: PPUSH
13410: CALL_OW 67
// EndBuildUp ;
13414: CALL 13031 0 0
// end ; end_of_file
13418: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
13419: LD_INT 0
13421: PPUSH
13422: PPUSH
// enable ( 98 ) ;
13423: LD_INT 98
13425: ENABLE_MARKED
// GameEnded = false ;
13426: LD_ADDR_LOC 17
13430: PUSH
13431: LD_INT 0
13433: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13434: LD_ADDR_LOC 16
13438: PUSH
13439: LD_INT 0
13441: PUSH
13442: LD_INT 0
13444: PUSH
13445: LD_INT 0
13447: PUSH
13448: LD_INT 0
13450: PUSH
13451: LD_INT 0
13453: PUSH
13454: LD_INT 0
13456: PUSH
13457: LD_INT 0
13459: PUSH
13460: LD_INT 0
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: ST_TO_ADDR
// unfoged = false ;
13473: LD_ADDR_LOC 18
13477: PUSH
13478: LD_INT 0
13480: ST_TO_ADDR
// defeated_specs := [ ] ;
13481: LD_ADDR_LOC 19
13485: PUSH
13486: EMPTY
13487: ST_TO_ADDR
// for i = 1 to side_positions do
13488: LD_ADDR_VAR 0 2
13492: PUSH
13493: DOUBLE
13494: LD_INT 1
13496: DEC
13497: ST_TO_ADDR
13498: LD_EXP 39
13502: PUSH
13503: FOR_TO
13504: IFFALSE 13544
// if not side_positions [ i ] then
13506: LD_EXP 39
13510: PUSH
13511: LD_VAR 0 2
13515: ARRAY
13516: NOT
13517: IFFALSE 13542
// defeated = replace ( defeated , i , true ) ;
13519: LD_ADDR_LOC 16
13523: PUSH
13524: LD_LOC 16
13528: PPUSH
13529: LD_VAR 0 2
13533: PPUSH
13534: LD_INT 1
13536: PPUSH
13537: CALL_OW 1
13541: ST_TO_ADDR
13542: GO 13503
13544: POP
13545: POP
// end ;
13546: LD_VAR 0 1
13550: RET
// function CanWinLoose ; begin
13551: LD_INT 0
13553: PPUSH
// Result := true ;
13554: LD_ADDR_VAR 0 1
13558: PUSH
13559: LD_INT 1
13561: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
13562: CALL_OW 518
13566: PUSH
13567: CALL_OW 519
13571: PUSH
13572: LD_INT 0
13574: GREATER
13575: AND
13576: IFFALSE 13586
// Result := false ;
13578: LD_ADDR_VAR 0 1
13582: PUSH
13583: LD_INT 0
13585: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13586: CALL_OW 531
13590: PUSH
13591: CALL_OW 519
13595: PUSH
13596: LD_INT 1
13598: GREATER
13599: AND
13600: IFFALSE 13610
// Result := false ;
13602: LD_ADDR_VAR 0 1
13606: PUSH
13607: LD_INT 0
13609: ST_TO_ADDR
// end ;
13610: LD_VAR 0 1
13614: RET
// export function HasPower ( i ) ; var k , h ; begin
13615: LD_INT 0
13617: PPUSH
13618: PPUSH
13619: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
13620: LD_VAR 0 1
13624: PPUSH
13625: CALL_OW 108
13629: NOT
13630: PUSH
13631: LD_EXP 38
13635: PUSH
13636: LD_VAR 0 1
13640: ARRAY
13641: NOT
13642: AND
13643: PUSH
13644: LD_OWVAR 4
13648: AND
13649: IFFALSE 13661
// begin result = false ;
13651: LD_ADDR_VAR 0 2
13655: PUSH
13656: LD_INT 0
13658: ST_TO_ADDR
// end else
13659: GO 13956
// case def_win_rules of 0 :
13661: LD_EXP 34
13665: PUSH
13666: LD_INT 0
13668: DOUBLE
13669: EQUAL
13670: IFTRUE 13674
13672: GO 13837
13674: POP
// if def_people_respawning then
13675: LD_EXP 11
13679: IFFALSE 13770
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
13681: LD_ADDR_VAR 0 2
13685: PUSH
13686: LD_INT 22
13688: PUSH
13689: LD_VAR 0 1
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 2
13700: PUSH
13701: LD_INT 21
13703: PUSH
13704: LD_INT 1
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 33
13713: PUSH
13714: LD_INT 3
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 33
13723: PUSH
13724: LD_INT 5
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 30
13733: PUSH
13734: LD_INT 0
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PUSH
13741: LD_INT 30
13743: PUSH
13744: LD_INT 1
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PPUSH
13763: CALL_OW 69
13767: ST_TO_ADDR
13768: GO 13835
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
13770: LD_ADDR_VAR 0 2
13774: PUSH
13775: LD_INT 22
13777: PUSH
13778: LD_VAR 0 1
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 2
13789: PUSH
13790: LD_INT 21
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 33
13802: PUSH
13803: LD_INT 3
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 33
13812: PUSH
13813: LD_INT 5
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PPUSH
13830: CALL_OW 69
13834: ST_TO_ADDR
13835: GO 13956
13837: LD_INT 1
13839: DOUBLE
13840: EQUAL
13841: IFTRUE 13845
13843: GO 13884
13845: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
13846: LD_ADDR_VAR 0 2
13850: PUSH
13851: LD_INT 22
13853: PUSH
13854: LD_VAR 0 1
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 21
13865: PUSH
13866: LD_INT 1
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PPUSH
13877: CALL_OW 69
13881: ST_TO_ADDR
13882: GO 13956
13884: LD_INT 2
13886: DOUBLE
13887: EQUAL
13888: IFTRUE 13892
13890: GO 13955
13892: POP
// begin h = false ;
13893: LD_ADDR_VAR 0 4
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// for k in heroes [ i ] do
13901: LD_ADDR_VAR 0 3
13905: PUSH
13906: LD_EXP 50
13910: PUSH
13911: LD_VAR 0 1
13915: ARRAY
13916: PUSH
13917: FOR_IN
13918: IFFALSE 13941
// if IsLive ( k ) then
13920: LD_VAR 0 3
13924: PPUSH
13925: CALL_OW 300
13929: IFFALSE 13939
// h = true ;
13931: LD_ADDR_VAR 0 4
13935: PUSH
13936: LD_INT 1
13938: ST_TO_ADDR
13939: GO 13917
13941: POP
13942: POP
// Result := h ;
13943: LD_ADDR_VAR 0 2
13947: PUSH
13948: LD_VAR 0 4
13952: ST_TO_ADDR
// end ; end ;
13953: GO 13956
13955: POP
// end ;
13956: LD_VAR 0 2
13960: RET
// function AlliedSides ( i , j ) ; begin
13961: LD_INT 0
13963: PPUSH
// Result := false ;
13964: LD_ADDR_VAR 0 3
13968: PUSH
13969: LD_INT 0
13971: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13972: LD_VAR 0 1
13976: PPUSH
13977: LD_VAR 0 2
13981: PPUSH
13982: CALL_OW 81
13986: PUSH
13987: LD_INT 1
13989: EQUAL
13990: PUSH
13991: LD_VAR 0 2
13995: PPUSH
13996: LD_VAR 0 1
14000: PPUSH
14001: CALL_OW 81
14005: PUSH
14006: LD_INT 1
14008: EQUAL
14009: AND
14010: PUSH
14011: LD_VAR 0 1
14015: PPUSH
14016: CALL_OW 83
14020: AND
14021: PUSH
14022: LD_VAR 0 2
14026: PPUSH
14027: CALL_OW 83
14031: AND
14032: IFFALSE 14042
// Result := true ;
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_INT 1
14041: ST_TO_ADDR
// end ;
14042: LD_VAR 0 3
14046: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14047: CALL 13551 0 0
14051: PUSH
14052: LD_LOC 17
14056: NOT
14057: AND
14058: IFFALSE 14074
14060: GO 14062
14062: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14063: LD_ADDR_EXP 59
14067: PUSH
14068: LD_STRING #Player-Ended
14070: PUSH
14071: EMPTY
14072: LIST
14073: ST_TO_ADDR
14074: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14075: CALL 13551 0 0
14079: PUSH
14080: LD_LOC 17
14084: AND
14085: IFFALSE 14094
14087: GO 14089
14089: DISABLE
// YouLostInMultiplayer ;
14090: CALL_OW 107
14094: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14095: CALL 13551 0 0
14099: NOT
14100: PUSH
14101: CALL_OW 531
14105: NOT
14106: AND
14107: IFFALSE 14123
14109: GO 14111
14111: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14112: LD_ADDR_EXP 59
14116: PUSH
14117: LD_STRING #server-wait
14119: PUSH
14120: EMPTY
14121: LIST
14122: ST_TO_ADDR
14123: END
// every 100 trigger IAmSpec do
14124: CALL_OW 531
14128: IFFALSE 14144
14130: GO 14132
14132: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14133: LD_ADDR_EXP 59
14137: PUSH
14138: LD_STRING #Player-IAmSpec
14140: PUSH
14141: EMPTY
14142: LIST
14143: ST_TO_ADDR
14144: END
// every 100 trigger GameEnded and IAmSpec do
14145: LD_LOC 17
14149: PUSH
14150: CALL_OW 531
14154: AND
14155: IFFALSE 14164
14157: GO 14159
14159: DISABLE
// YouLostInMultiplayer ;
14160: CALL_OW 107
14164: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14165: CALL 13551 0 0
14169: PUSH
14170: LD_LOC 17
14174: NOT
14175: AND
14176: IFFALSE 14192
14178: GO 14180
14180: DISABLE
// WaitServerStrings = [ $player-win ] ;
14181: LD_ADDR_EXP 59
14185: PUSH
14186: LD_STRING $player-win
14188: PUSH
14189: EMPTY
14190: LIST
14191: ST_TO_ADDR
14192: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14193: CALL 13551 0 0
14197: PUSH
14198: LD_LOC 17
14202: AND
14203: IFFALSE 14227
14205: GO 14207
14207: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
14208: LD_EXP 40
14212: PUSH
14213: LD_OWVAR 7
14217: ARRAY
14218: PPUSH
14219: CALL 7406 0 1
// YouWinInMultiplayer ;
14223: CALL_OW 106
// end ;
14227: END
// every 100 trigger isEditor marked 401 do
14228: LD_OWVAR 84
14232: IFFALSE 14248
14234: GO 14236
14236: DISABLE
// Debug_Strings = [ You won ] ;
14237: LD_ADDR_OWVAR 48
14241: PUSH
14242: LD_STRING You won
14244: PUSH
14245: EMPTY
14246: LIST
14247: ST_TO_ADDR
14248: END
// every 100 trigger isEditor marked 400 do
14249: LD_OWVAR 84
14253: IFFALSE 14269
14255: GO 14257
14257: DISABLE
// Debug_Strings = [ You loss ] ;
14258: LD_ADDR_OWVAR 48
14262: PUSH
14263: LD_STRING You loss
14265: PUSH
14266: EMPTY
14267: LIST
14268: ST_TO_ADDR
14269: END
// every 100 marked 98 do var i , un ;
14270: GO 14272
14272: DISABLE
14273: LD_INT 0
14275: PPUSH
14276: PPUSH
// begin for i = 1 to side_positions do
14277: LD_ADDR_VAR 0 1
14281: PUSH
14282: DOUBLE
14283: LD_INT 1
14285: DEC
14286: ST_TO_ADDR
14287: LD_EXP 39
14291: PUSH
14292: FOR_TO
14293: IFFALSE 14380
// begin if side_positions [ i ] then
14295: LD_EXP 39
14299: PUSH
14300: LD_VAR 0 1
14304: ARRAY
14305: IFFALSE 14378
// if not HasPower ( i ) and not defeated [ i ] then
14307: LD_VAR 0 1
14311: PPUSH
14312: CALL 13615 0 1
14316: NOT
14317: PUSH
14318: LD_LOC 16
14322: PUSH
14323: LD_VAR 0 1
14327: ARRAY
14328: NOT
14329: AND
14330: IFFALSE 14378
// begin defeated = replace ( defeated , i , true ) ;
14332: LD_ADDR_LOC 16
14336: PUSH
14337: LD_LOC 16
14341: PPUSH
14342: LD_VAR 0 1
14346: PPUSH
14347: LD_INT 1
14349: PPUSH
14350: CALL_OW 1
14354: ST_TO_ADDR
// if i = mp_player_side then
14355: LD_VAR 0 1
14359: PUSH
14360: LD_OWVAR 7
14364: EQUAL
14365: IFFALSE 14378
// begin Multiplayer_Loose_Message ;
14367: CALL_OW 521
// SetPlayerSpectator ( ) ;
14371: CALL_OW 572
// enable ( 400 ) ;
14375: LD_INT 400
14377: ENABLE_MARKED
// end ; end ; end ;
14378: GO 14292
14380: POP
14381: POP
// DidGameEnd ;
14382: CALL 14397 0 0
// if not GameEnded then
14386: LD_LOC 17
14390: NOT
14391: IFFALSE 14394
// enable ;
14393: ENABLE
// end ;
14394: PPOPN 2
14396: END
// function DidGameEnd ; var i , k , enemy ; begin
14397: LD_INT 0
14399: PPUSH
14400: PPUSH
14401: PPUSH
14402: PPUSH
// enemy = [ ] ;
14403: LD_ADDR_VAR 0 4
14407: PUSH
14408: EMPTY
14409: ST_TO_ADDR
// for i = 1 to side_positions do
14410: LD_ADDR_VAR 0 2
14414: PUSH
14415: DOUBLE
14416: LD_INT 1
14418: DEC
14419: ST_TO_ADDR
14420: LD_EXP 39
14424: PUSH
14425: FOR_TO
14426: IFFALSE 14520
// if not defeated [ i ] then
14428: LD_LOC 16
14432: PUSH
14433: LD_VAR 0 2
14437: ARRAY
14438: NOT
14439: IFFALSE 14518
// for k = 1 to side_positions do
14441: LD_ADDR_VAR 0 3
14445: PUSH
14446: DOUBLE
14447: LD_INT 1
14449: DEC
14450: ST_TO_ADDR
14451: LD_EXP 39
14455: PUSH
14456: FOR_TO
14457: IFFALSE 14516
// if not defeated [ k ] then
14459: LD_LOC 16
14463: PUSH
14464: LD_VAR 0 3
14468: ARRAY
14469: NOT
14470: IFFALSE 14514
// if not AlliedSides ( i , k ) then
14472: LD_VAR 0 2
14476: PPUSH
14477: LD_VAR 0 3
14481: PPUSH
14482: CALL 13961 0 2
14486: NOT
14487: IFFALSE 14514
// enemy = enemy ^ [ i , k ] ;
14489: LD_ADDR_VAR 0 4
14493: PUSH
14494: LD_VAR 0 4
14498: PUSH
14499: LD_VAR 0 2
14503: PUSH
14504: LD_VAR 0 3
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: ADD
14513: ST_TO_ADDR
14514: GO 14456
14516: POP
14517: POP
14518: GO 14425
14520: POP
14521: POP
// if not enemy then
14522: LD_VAR 0 4
14526: NOT
14527: IFFALSE 14553
// begin GameEnded = true ;
14529: LD_ADDR_LOC 17
14533: PUSH
14534: LD_INT 1
14536: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
14537: LD_LOC 16
14541: PUSH
14542: LD_OWVAR 7
14546: ARRAY
14547: NOT
14548: IFFALSE 14553
// enable ( 401 ) ;
14550: LD_INT 401
14552: ENABLE_MARKED
// end ; end ;
14553: LD_VAR 0 1
14557: RET
// function unfog ; var k , friends ; begin
14558: LD_INT 0
14560: PPUSH
14561: PPUSH
14562: PPUSH
// for k = 1 to side_positions do
14563: LD_ADDR_VAR 0 2
14567: PUSH
14568: DOUBLE
14569: LD_INT 1
14571: DEC
14572: ST_TO_ADDR
14573: LD_EXP 39
14577: PUSH
14578: FOR_TO
14579: IFFALSE 14635
// if not defeated [ k ] then
14581: LD_LOC 16
14585: PUSH
14586: LD_VAR 0 2
14590: ARRAY
14591: NOT
14592: IFFALSE 14633
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
14594: LD_OWVAR 7
14598: PPUSH
14599: LD_VAR 0 2
14603: PPUSH
14604: CALL_OW 81
14608: PUSH
14609: LD_INT 1
14611: PUSH
14612: EMPTY
14613: LIST
14614: IN
14615: IFFALSE 14633
// friends = friends ^ k ;
14617: LD_ADDR_VAR 0 3
14621: PUSH
14622: LD_VAR 0 3
14626: PUSH
14627: LD_VAR 0 2
14631: ADD
14632: ST_TO_ADDR
14633: GO 14578
14635: POP
14636: POP
// if not friends then
14637: LD_VAR 0 3
14641: NOT
14642: IFFALSE 14656
// begin SetPlayerSpectator ( ) ;
14644: CALL_OW 572
// unfoged = true ;
14648: LD_ADDR_LOC 18
14652: PUSH
14653: LD_INT 1
14655: ST_TO_ADDR
// end ; end ;
14656: LD_VAR 0 1
14660: RET
// export function MakeGameEnd ; begin
14661: LD_INT 0
14663: PPUSH
// SetPlayerSpectator ( ) ;
14664: CALL_OW 572
// unfoged = true ;
14668: LD_ADDR_LOC 18
14672: PUSH
14673: LD_INT 1
14675: ST_TO_ADDR
// wait ( 0 0$5 ) ;
14676: LD_INT 175
14678: PPUSH
14679: CALL_OW 67
// GameEnded = true ;
14683: LD_ADDR_LOC 17
14687: PUSH
14688: LD_INT 1
14690: ST_TO_ADDR
// end ;
14691: LD_VAR 0 1
14695: RET
// export function GetGameEnded ; begin
14696: LD_INT 0
14698: PPUSH
// result = GameEnded ;
14699: LD_ADDR_VAR 0 1
14703: PUSH
14704: LD_LOC 17
14708: ST_TO_ADDR
// end ;
14709: LD_VAR 0 1
14713: RET
