// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , def_win_rules , tech_level ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// if Multiplayer then
  72: LD_OWVAR 4
  76: IFFALSE 150
// begin Game_Type := mp_game_type ;
  78: LD_ADDR_EXP 18
  82: PUSH
  83: LD_OWVAR 6
  87: ST_TO_ADDR
// Your_Side := mp_player_side ;
  88: LD_ADDR_OWVAR 2
  92: PUSH
  93: LD_OWVAR 7
  97: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  98: LD_ADDR_EXP 39
 102: PUSH
 103: LD_OWVAR 17
 107: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 108: LD_ADDR_EXP 36
 112: PUSH
 113: LD_OWVAR 15
 117: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 118: LD_ADDR_EXP 40
 122: PUSH
 123: LD_OWVAR 16
 127: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 128: LD_ADDR_EXP 38
 132: PUSH
 133: CALL 0 0 0
 137: ST_TO_ADDR
// Teams := mp_teams ;
 138: LD_ADDR_EXP 37
 142: PUSH
 143: LD_OWVAR 12
 147: ST_TO_ADDR
// end else
 148: GO 371
// begin Game_Type := 1 ;
 150: LD_ADDR_EXP 18
 154: PUSH
 155: LD_INT 1
 157: ST_TO_ADDR
// Your_Side := 1 ;
 158: LD_ADDR_OWVAR 2
 162: PUSH
 163: LD_INT 1
 165: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 166: LD_ADDR_EXP 39
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 4
 182: PUSH
 183: LD_INT 5
 185: PUSH
 186: LD_INT 6
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 205: LD_ADDR_EXP 36
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: LD_INT 2
 215: PUSH
 216: LD_INT 3
 218: PUSH
 219: LD_INT 4
 221: PUSH
 222: LD_INT 5
 224: PUSH
 225: LD_INT 6
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: LD_INT 0
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 244: LD_ADDR_EXP 40
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: LD_INT 3
 257: PUSH
 258: LD_INT 1
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: LD_INT 3
 266: PUSH
 267: LD_INT 0
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 283: LD_ADDR_EXP 38
 287: PUSH
 288: LD_INT 0
 290: PUSH
 291: LD_INT 0
 293: PUSH
 294: LD_INT 0
 296: PUSH
 297: LD_INT 0
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 0
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 322: LD_ADDR_EXP 37
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: PUSH
 333: LD_INT 2
 335: PUSH
 336: EMPTY
 337: LIST
 338: PUSH
 339: LD_INT 3
 341: PUSH
 342: EMPTY
 343: LIST
 344: PUSH
 345: LD_INT 4
 347: PUSH
 348: EMPTY
 349: LIST
 350: PUSH
 351: LD_INT 5
 353: PUSH
 354: EMPTY
 355: LIST
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: EMPTY
 361: LIST
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 371: LD_ADDR_EXP 41
 375: PUSH
 376: LD_EXP 36
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: DIFF
 387: PUSH
 388: LD_INT 1
 390: GREATER
 391: ST_TO_ADDR
// if Multiplayer then
 392: LD_OWVAR 4
 396: IFFALSE 629
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_EXP 1
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 411: LD_ADDR_EXP 2
 415: PUSH
 416: LD_INT 1
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 424: LD_ADDR_EXP 3
 428: PUSH
 429: LD_INT 2
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 437: LD_ADDR_EXP 4
 441: PUSH
 442: LD_INT 3
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 450: LD_ADDR_EXP 5
 454: PUSH
 455: LD_INT 4
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 463: LD_ADDR_EXP 6
 467: PUSH
 468: LD_INT 5
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 476: LD_ADDR_EXP 7
 480: PUSH
 481: LD_INT 6
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 489: LD_ADDR_EXP 8
 493: PUSH
 494: LD_INT 10
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 502: LD_ADDR_EXP 9
 506: PUSH
 507: LD_INT 11
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 515: LD_ADDR_EXP 10
 519: PUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 426
 527: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 528: LD_ADDR_EXP 11
 532: PUSH
 533: LD_INT 13
 535: PPUSH
 536: CALL_OW 426
 540: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 541: LD_ADDR_EXP 12
 545: PUSH
 546: LD_INT 14
 548: PPUSH
 549: CALL_OW 426
 553: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 554: LD_ADDR_EXP 13
 558: PUSH
 559: LD_INT 15
 561: PPUSH
 562: CALL_OW 426
 566: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 567: LD_ADDR_EXP 14
 571: PUSH
 572: LD_INT 16
 574: PPUSH
 575: CALL_OW 426
 579: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 580: LD_ADDR_EXP 15
 584: PUSH
 585: LD_INT 17
 587: PPUSH
 588: CALL_OW 426
 592: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 593: LD_ADDR_EXP 16
 597: PUSH
 598: LD_INT 20
 600: PPUSH
 601: CALL_OW 426
 605: ST_TO_ADDR
// def_win_rules := 0 ;
 606: LD_ADDR_EXP 34
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 614: LD_ADDR_EXP 35
 618: PUSH
 619: LD_INT 23
 621: PPUSH
 622: CALL_OW 426
 626: ST_TO_ADDR
// end else
 627: GO 777
// begin Randomize ;
 629: CALL_OW 10
// def_base_level := 2 ;
 633: LD_ADDR_EXP 1
 637: PUSH
 638: LD_INT 2
 640: ST_TO_ADDR
// def_amount_of_people := 0 ;
 641: LD_ADDR_EXP 2
 645: PUSH
 646: LD_INT 0
 648: ST_TO_ADDR
// def_skill_level := 1 ;
 649: LD_ADDR_EXP 3
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// def_starting_resources := 2 ;
 657: LD_ADDR_EXP 4
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_shipments_density := 1 ;
 665: LD_ADDR_EXP 5
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 673: LD_ADDR_EXP 6
 677: PUSH
 678: LD_INT 0
 680: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 681: LD_ADDR_EXP 7
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_shared_vision := 1 ;
 689: LD_ADDR_EXP 8
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_morale_flags := 1 ;
 697: LD_ADDR_EXP 9
 701: PUSH
 702: LD_INT 1
 704: ST_TO_ADDR
// def_siberite_detection := 1 ;
 705: LD_ADDR_EXP 10
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_people_respawning := 2 ;
 713: LD_ADDR_EXP 11
 717: PUSH
 718: LD_INT 2
 720: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 721: LD_ADDR_EXP 12
 725: PUSH
 726: LD_INT 3
 728: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 729: LD_ADDR_EXP 13
 733: PUSH
 734: LD_INT 0
 736: ST_TO_ADDR
// def_public_score := 0 ;
 737: LD_ADDR_EXP 14
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 15
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_builduptime := 1 ;
 753: LD_ADDR_EXP 16
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_win_rules := 0 ;
 761: LD_ADDR_EXP 34
 765: PUSH
 766: LD_INT 0
 768: ST_TO_ADDR
// tech_level := 0 ;
 769: LD_ADDR_EXP 35
 773: PUSH
 774: LD_INT 0
 776: ST_TO_ADDR
// end ; if isSGUI then
 777: LD_OWVAR 83
 781: IFFALSE 789
// setMpTechs ( ) else
 783: CALL 7613 0 0
 787: GO 802
// SetMpTechLevel ( tech_level + 1 ) ;
 789: LD_EXP 35
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: PPUSH
 798: CALL 7760 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 802: LD_ADDR_EXP 19
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_EXP 1
 825: PUSH
 826: LD_INT 1
 828: PLUS
 829: ARRAY
 830: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 831: LD_ADDR_EXP 20
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: PUSH
 850: LD_EXP 1
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: ARRAY
 859: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 860: LD_ADDR_EXP 21
 864: PUSH
 865: LD_INT 9
 867: PUSH
 868: LD_INT 12
 870: PUSH
 871: LD_INT 15
 873: PUSH
 874: LD_INT 24
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_EXP 2
 887: PUSH
 888: LD_INT 1
 890: PLUS
 891: ARRAY
 892: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
 893: LD_ADDR_EXP 22
 897: PUSH
 898: LD_INT 2
 900: PUSH
 901: LD_INT 3
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: LD_INT 6
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: PUSH
 916: LD_EXP 3
 920: PUSH
 921: LD_INT 1
 923: PLUS
 924: ARRAY
 925: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 926: LD_ADDR_EXP 24
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: LD_INT 0
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: LIST
 944: PUSH
 945: LD_INT 30
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: LD_INT 0
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 50
 961: PUSH
 962: LD_INT 20
 964: PUSH
 965: LD_INT 0
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: LD_INT 80
 975: PUSH
 976: LD_INT 40
 978: PUSH
 979: LD_INT 20
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_EXP 4
 997: PUSH
 998: LD_INT 1
1000: PLUS
1001: ARRAY
1002: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1003: LD_ADDR_EXP 23
1007: PUSH
1008: LD_INT 10
1010: PUSH
1011: EMPTY
1012: LIST
1013: PUSH
1014: LD_INT 7
1016: PUSH
1017: LD_INT 14
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 6
1026: PUSH
1027: LD_INT 12
1029: PUSH
1030: LD_INT 18
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: LD_INT 5
1040: PUSH
1041: LD_INT 10
1043: PUSH
1044: LD_INT 15
1046: PUSH
1047: LD_INT 20
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 4
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
1072: LD_ADDR_EXP 25
1076: PUSH
1077: LD_INT 150
1079: PUSH
1080: LD_INT 125
1082: PUSH
1083: LD_INT 100
1085: PUSH
1086: LD_INT 50
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: LD_EXP 5
1099: PUSH
1100: LD_INT 1
1102: PLUS
1103: ARRAY
1104: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: LD_INT 10500
1115: PUSH
1116: LD_INT 6300
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_EXP 11
1128: PUSH
1129: LD_INT 1
1131: PLUS
1132: ARRAY
1133: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1134: LD_ADDR_EXP 30
1138: PUSH
1139: LD_INT 0
1141: PUSH
1142: LD_INT 31500
1144: PUSH
1145: LD_INT 10500
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_EXP 11
1157: PUSH
1158: LD_INT 1
1160: PLUS
1161: ARRAY
1162: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1163: LD_ADDR_EXP 27
1167: PUSH
1168: LD_INT 0
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_EXP 12
1190: PUSH
1191: LD_INT 1
1193: PLUS
1194: ARRAY
1195: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1196: LD_ADDR_EXP 28
1200: PUSH
1201: LD_INT 30
1203: PUSH
1204: LD_INT 50
1206: PUSH
1207: LD_INT 80
1209: PUSH
1210: LD_INT 100
1212: PUSH
1213: LD_INT 130
1215: PUSH
1216: LD_INT 150
1218: PUSH
1219: LD_INT 200
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: LD_EXP 13
1235: PUSH
1236: LD_INT 1
1238: PLUS
1239: ARRAY
1240: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1241: LD_ADDR_EXP 26
1245: PUSH
1246: LD_INT 1
1248: NEG
1249: PUSH
1250: LD_INT 350
1252: PUSH
1253: LD_INT 700
1255: PUSH
1256: LD_INT 1400
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_EXP 9
1273: PUSH
1274: LD_INT 1
1276: PLUS
1277: ARRAY
1278: ST_TO_ADDR
// battle_flags_id := [ ] ;
1279: LD_ADDR_EXP 49
1283: PUSH
1284: EMPTY
1285: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1286: LD_ADDR_EXP 31
1290: PUSH
1291: LD_INT 0
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 32
1305: PUSH
1306: LD_INT 1
1308: PLUS
1309: ARRAY
1310: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1311: LD_ADDR_EXP 33
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: LD_INT 63000
1324: PUSH
1325: LD_INT 126000
1327: PUSH
1328: LD_INT 189000
1330: PUSH
1331: LD_INT 252000
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: PUSH
1342: LD_EXP 15
1346: PUSH
1347: LD_INT 1
1349: PLUS
1350: ARRAY
1351: ST_TO_ADDR
// end ;
1352: LD_VAR 0 1
1356: RET
// function init_map ; var i , j ; begin
1357: LD_INT 0
1359: PPUSH
1360: PPUSH
1361: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1362: LD_ADDR_EXP 45
1366: PUSH
1367: LD_INT 12
1369: PUSH
1370: LD_INT 4
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 45
1379: PUSH
1380: LD_INT 81
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_INT 116
1389: PUSH
1390: LD_INT 195
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PUSH
1397: LD_INT 142
1399: PUSH
1400: LD_INT 4
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: PUSH
1407: LD_INT 201
1409: PUSH
1410: LD_INT 102
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 234
1419: PUSH
1420: LD_INT 194
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1435: LD_ADDR_EXP 46
1439: PUSH
1440: LD_INT 12
1442: PUSH
1443: LD_INT 4
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 16
1452: PUSH
1453: LD_INT 25
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 45
1466: PUSH
1467: LD_INT 81
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 60
1476: PUSH
1477: LD_INT 102
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 116
1490: PUSH
1491: LD_INT 195
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 92
1500: PUSH
1501: LD_INT 167
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 142
1514: PUSH
1515: LD_INT 4
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 167
1524: PUSH
1525: LD_INT 24
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 201
1538: PUSH
1539: LD_INT 102
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 190
1548: PUSH
1549: LD_INT 77
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 234
1562: PUSH
1563: LD_INT 194
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 237
1572: PUSH
1573: LD_INT 171
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1592: LD_ADDR_EXP 47
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: LD_INT 10
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 51
1609: PUSH
1610: LD_INT 93
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 102
1619: PUSH
1620: LD_INT 187
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 158
1629: PUSH
1630: LD_INT 6
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 203
1639: PUSH
1640: LD_INT 93
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 252
1649: PUSH
1650: LD_INT 194
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1665: LD_ADDR_EXP 48
1669: PUSH
1670: LD_INT 10
1672: PUSH
1673: LD_INT 10
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 36
1682: PUSH
1683: LD_INT 10
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 51
1696: PUSH
1697: LD_INT 93
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 72
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 102
1720: PUSH
1721: LD_INT 187
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 93
1730: PUSH
1731: LD_INT 175
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PUSH
1742: LD_INT 158
1744: PUSH
1745: LD_INT 6
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 147
1754: PUSH
1755: LD_INT 5
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 203
1768: PUSH
1769: LD_INT 93
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 173
1778: PUSH
1779: LD_INT 71
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: LD_INT 252
1792: PUSH
1793: LD_INT 194
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 243
1802: PUSH
1803: LD_INT 177
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: LD_INT 23
1829: PUSH
1830: LD_INT 15
1832: PUSH
1833: LD_INT 2
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 56
1843: PUSH
1844: LD_INT 85
1846: PUSH
1847: LD_INT 1
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 110
1857: PUSH
1858: LD_INT 177
1860: PUSH
1861: LD_INT 3
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 157
1871: PUSH
1872: LD_INT 13
1874: PUSH
1875: LD_INT 3
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 187
1885: PUSH
1886: LD_INT 87
1888: PUSH
1889: LD_INT 5
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 231
1899: PUSH
1900: LD_INT 181
1902: PUSH
1903: LD_INT 5
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
1919: LD_ADDR_EXP 44
1923: PUSH
1924: LD_INT 30
1926: PUSH
1927: LD_INT 22
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 58
1936: PUSH
1937: LD_INT 82
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 113
1946: PUSH
1947: LD_INT 180
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 151
1956: PUSH
1957: LD_INT 24
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 183
1966: PUSH
1967: LD_INT 90
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 223
1976: PUSH
1977: LD_INT 180
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
1992: LD_ADDR_EXP 43
1996: PUSH
1997: LD_INT 33
1999: PUSH
2000: LD_INT 12
2002: PUSH
2003: LD_INT 5
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 42
2013: PUSH
2014: LD_INT 29
2016: PUSH
2017: LD_INT 4
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 36
2027: PUSH
2028: LD_INT 20
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 72
2046: PUSH
2047: LD_INT 91
2049: PUSH
2050: LD_INT 4
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 65
2060: PUSH
2061: LD_INT 78
2063: PUSH
2064: LD_INT 4
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 75
2074: PUSH
2075: LD_INT 100
2077: PUSH
2078: LD_INT 3
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 102
2093: PUSH
2094: LD_INT 165
2096: PUSH
2097: LD_INT 3
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 122
2107: PUSH
2108: LD_INT 176
2110: PUSH
2111: LD_INT 4
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 120
2121: PUSH
2122: LD_INT 184
2124: PUSH
2125: LD_INT 4
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 134
2140: PUSH
2141: LD_INT 16
2143: PUSH
2144: LD_INT 1
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 132
2154: PUSH
2155: LD_INT 5
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: PUSH
2166: LD_INT 157
2168: PUSH
2169: LD_INT 27
2171: PUSH
2172: LD_INT 5
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 172
2187: PUSH
2188: LD_INT 77
2190: PUSH
2191: LD_INT 1
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 175
2201: PUSH
2202: LD_INT 96
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 192
2215: PUSH
2216: LD_INT 104
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 216
2234: PUSH
2235: LD_INT 179
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: LIST
2245: PUSH
2246: LD_INT 208
2248: PUSH
2249: LD_INT 160
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 208
2262: PUSH
2263: LD_INT 171
2265: PUSH
2266: LD_INT 2
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: ST_TO_ADDR
// for i = 1 to 6 do
2287: LD_ADDR_VAR 0 2
2291: PUSH
2292: DOUBLE
2293: LD_INT 1
2295: DEC
2296: ST_TO_ADDR
2297: LD_INT 6
2299: PUSH
2300: FOR_TO
2301: IFFALSE 2398
// if def_extra_oil_deposits then
2303: LD_EXP 6
2307: IFFALSE 2359
// for j in extra_oil_deposits_locations [ i ] do
2309: LD_ADDR_VAR 0 3
2313: PUSH
2314: LD_EXP 46
2318: PUSH
2319: LD_VAR 0 2
2323: ARRAY
2324: PUSH
2325: FOR_IN
2326: IFFALSE 2355
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2328: LD_VAR 0 3
2332: PUSH
2333: LD_INT 1
2335: ARRAY
2336: PPUSH
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
2353: GO 2325
2355: POP
2356: POP
2357: GO 2396
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2359: LD_EXP 45
2363: PUSH
2364: LD_VAR 0 2
2368: ARRAY
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: LD_EXP 45
2378: PUSH
2379: LD_VAR 0 2
2383: ARRAY
2384: PUSH
2385: LD_INT 2
2387: ARRAY
2388: PPUSH
2389: LD_INT 2
2391: PPUSH
2392: CALL_OW 62
2396: GO 2300
2398: POP
2399: POP
// if def_extra_sib_deposits then
2400: LD_EXP 7
2404: IFFALSE 2523
// for i = 1 to 6 do
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: DOUBLE
2412: LD_INT 1
2414: DEC
2415: ST_TO_ADDR
2416: LD_INT 6
2418: PUSH
2419: FOR_TO
2420: IFFALSE 2521
// if def_extra_sib_deposits = 2 then
2422: LD_EXP 7
2426: PUSH
2427: LD_INT 2
2429: EQUAL
2430: IFFALSE 2482
// for j in extra_sib_deposits_locations [ i ] do
2432: LD_ADDR_VAR 0 3
2436: PUSH
2437: LD_EXP 48
2441: PUSH
2442: LD_VAR 0 2
2446: ARRAY
2447: PUSH
2448: FOR_IN
2449: IFFALSE 2478
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2451: LD_VAR 0 3
2455: PUSH
2456: LD_INT 1
2458: ARRAY
2459: PPUSH
2460: LD_VAR 0 3
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 3
2471: PPUSH
2472: CALL_OW 62
2476: GO 2448
2478: POP
2479: POP
2480: GO 2519
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2482: LD_EXP 47
2486: PUSH
2487: LD_VAR 0 2
2491: ARRAY
2492: PUSH
2493: LD_INT 1
2495: ARRAY
2496: PPUSH
2497: LD_EXP 47
2501: PUSH
2502: LD_VAR 0 2
2506: ARRAY
2507: PUSH
2508: LD_INT 2
2510: ARRAY
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: CALL_OW 62
2519: GO 2419
2521: POP
2522: POP
// end ;
2523: LD_VAR 0 1
2527: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2528: LD_INT 0
2530: PPUSH
2531: PPUSH
2532: PPUSH
// if not Team_Game then
2533: LD_EXP 41
2537: NOT
2538: IFFALSE 2636
// begin for i = 1 to 8 do
2540: LD_ADDR_VAR 0 2
2544: PUSH
2545: DOUBLE
2546: LD_INT 1
2548: DEC
2549: ST_TO_ADDR
2550: LD_INT 8
2552: PUSH
2553: FOR_TO
2554: IFFALSE 2632
// for j = 1 to 8 do
2556: LD_ADDR_VAR 0 3
2560: PUSH
2561: DOUBLE
2562: LD_INT 1
2564: DEC
2565: ST_TO_ADDR
2566: LD_INT 8
2568: PUSH
2569: FOR_TO
2570: IFFALSE 2628
// if i <> j then
2572: LD_VAR 0 2
2576: PUSH
2577: LD_VAR 0 3
2581: NONEQUAL
2582: IFFALSE 2606
// SetAttitude ( i , j , att_neutral , true ) else
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 3
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: CALL_OW 80
2604: GO 2626
// SetAttitude ( i , j , att_friend , true ) ;
2606: LD_VAR 0 2
2610: PPUSH
2611: LD_VAR 0 3
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL_OW 80
2626: GO 2569
2628: POP
2629: POP
2630: GO 2553
2632: POP
2633: POP
// end else
2634: GO 2811
// begin if def_shared_vision then
2636: LD_EXP 8
2640: IFFALSE 2705
// begin for i in Teams do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: LD_EXP 37
2651: PUSH
2652: FOR_IN
2653: IFFALSE 2703
// for j = 2 to i do
2655: LD_ADDR_VAR 0 3
2659: PUSH
2660: DOUBLE
2661: LD_INT 2
2663: DEC
2664: ST_TO_ADDR
2665: LD_VAR 0 2
2669: PUSH
2670: FOR_TO
2671: IFFALSE 2699
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2673: LD_VAR 0 2
2677: PUSH
2678: LD_VAR 0 3
2682: ARRAY
2683: PPUSH
2684: LD_VAR 0 2
2688: PUSH
2689: LD_INT 1
2691: ARRAY
2692: PPUSH
2693: CALL_OW 343
2697: GO 2670
2699: POP
2700: POP
2701: GO 2652
2703: POP
2704: POP
// end ; for i = 1 to 8 do
2705: LD_ADDR_VAR 0 2
2709: PUSH
2710: DOUBLE
2711: LD_INT 1
2713: DEC
2714: ST_TO_ADDR
2715: LD_INT 8
2717: PUSH
2718: FOR_TO
2719: IFFALSE 2809
// for j = 1 to 8 do
2721: LD_ADDR_VAR 0 3
2725: PUSH
2726: DOUBLE
2727: LD_INT 1
2729: DEC
2730: ST_TO_ADDR
2731: LD_INT 8
2733: PUSH
2734: FOR_TO
2735: IFFALSE 2805
// if Side_Teams [ i ] = Side_Teams [ j ] then
2737: LD_EXP 36
2741: PUSH
2742: LD_VAR 0 2
2746: ARRAY
2747: PUSH
2748: LD_EXP 36
2752: PUSH
2753: LD_VAR 0 3
2757: ARRAY
2758: EQUAL
2759: IFFALSE 2783
// SetAttitude ( i , j , att_friend , true ) else
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_VAR 0 3
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: CALL_OW 80
2781: GO 2803
// SetAttitude ( i , j , att_enemy , true ) ;
2783: LD_VAR 0 2
2787: PPUSH
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 2
2795: PPUSH
2796: LD_INT 1
2798: PPUSH
2799: CALL_OW 80
2803: GO 2734
2805: POP
2806: POP
2807: GO 2718
2809: POP
2810: POP
// end ; end ;
2811: LD_VAR 0 1
2815: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2816: LD_INT 0
2818: PPUSH
2819: PPUSH
2820: PPUSH
2821: PPUSH
// result := [ ] ;
2822: LD_ADDR_VAR 0 7
2826: PUSH
2827: EMPTY
2828: ST_TO_ADDR
// for i := 1 to count do
2829: LD_ADDR_VAR 0 8
2833: PUSH
2834: DOUBLE
2835: LD_INT 1
2837: DEC
2838: ST_TO_ADDR
2839: LD_VAR 0 1
2843: PUSH
2844: FOR_TO
2845: IFFALSE 3263
// begin uc_direction := Rand ( 0 , 5 ) ;
2847: LD_ADDR_OWVAR 24
2851: PUSH
2852: LD_INT 0
2854: PPUSH
2855: LD_INT 5
2857: PPUSH
2858: CALL_OW 12
2862: ST_TO_ADDR
// if commander then
2863: LD_LOC 1
2867: IFFALSE 2976
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2869: LD_ADDR_OWVAR 26
2873: PUSH
2874: LD_OWVAR 19
2878: PUSH
2879: LD_OWVAR 20
2883: ARRAY
2884: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2885: LD_INT 1
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 12
2895: PPUSH
2896: LD_VAR 0 2
2900: PPUSH
2901: LD_EXP 22
2905: PUSH
2906: LD_INT 2
2908: PLUS
2909: PPUSH
2910: CALL_OW 380
// hc_importance := 105 ;
2914: LD_ADDR_OWVAR 32
2918: PUSH
2919: LD_INT 105
2921: ST_TO_ADDR
// commander := false ;
2922: LD_ADDR_LOC 1
2926: PUSH
2927: LD_INT 0
2929: ST_TO_ADDR
// if Multiplayer then
2930: LD_OWVAR 4
2934: IFFALSE 2974
// begin hc_gallery := MULTIAVATARS ;
2936: LD_ADDR_OWVAR 33
2940: PUSH
2941: LD_STRING MULTIAVATARS
2943: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2944: LD_ADDR_OWVAR 34
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 525
2958: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2959: LD_ADDR_OWVAR 27
2963: PUSH
2964: LD_OWVAR 20
2968: PPUSH
2969: CALL_OW 526
2973: ST_TO_ADDR
// end ; end else
2974: GO 3039
// begin hc_name :=  ;
2976: LD_ADDR_OWVAR 26
2980: PUSH
2981: LD_STRING 
2983: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2984: LD_INT 1
2986: PPUSH
2987: LD_INT 2
2989: PPUSH
2990: CALL_OW 12
2994: PPUSH
2995: LD_VAR 0 2
2999: PPUSH
3000: LD_EXP 22
3004: PPUSH
3005: CALL_OW 380
// hc_importance := 0 ;
3009: LD_ADDR_OWVAR 32
3013: PUSH
3014: LD_INT 0
3016: ST_TO_ADDR
// if Multiplayer then
3017: LD_OWVAR 4
3021: IFFALSE 3039
// begin hc_gallery :=  ;
3023: LD_ADDR_OWVAR 33
3027: PUSH
3028: LD_STRING 
3030: ST_TO_ADDR
// hc_face_number := 0 ;
3031: LD_ADDR_OWVAR 34
3035: PUSH
3036: LD_INT 0
3038: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3039: LD_ADDR_VAR 0 10
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if global_defined then
3049: LD_LOC 3
3053: IFFALSE 3193
// begin if ( cl = class_soldier ) then
3055: LD_VAR 0 2
3059: PUSH
3060: LD_INT 1
3062: EQUAL
3063: IFFALSE 3083
// j := i + soldiers_created else
3065: LD_ADDR_VAR 0 9
3069: PUSH
3070: LD_VAR 0 8
3074: PUSH
3075: LD_LOC 4
3079: PLUS
3080: ST_TO_ADDR
3081: GO 3093
// j := i ;
3083: LD_ADDR_VAR 0 9
3087: PUSH
3088: LD_VAR 0 8
3092: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3093: LD_LOC 2
3097: PUSH
3098: LD_VAR 0 2
3102: ARRAY
3103: PUSH
3104: LD_VAR 0 9
3108: ARRAY
3109: PPUSH
3110: LD_VAR 0 10
3114: PPUSH
3115: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3119: LD_VAR 0 10
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: LD_LOC 2
3131: PUSH
3132: LD_VAR 0 2
3136: ARRAY
3137: PUSH
3138: LD_VAR 0 9
3142: ARRAY
3143: PPUSH
3144: LD_INT 2
3146: PPUSH
3147: CALL_OW 260
3151: PPUSH
3152: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3156: LD_VAR 0 10
3160: PPUSH
3161: LD_INT 1
3163: PPUSH
3164: LD_LOC 2
3168: PUSH
3169: LD_VAR 0 2
3173: ARRAY
3174: PUSH
3175: LD_VAR 0 9
3179: ARRAY
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: CALL_OW 260
3188: PPUSH
3189: CALL_OW 239
// end ; if building then
3193: LD_VAR 0 6
3197: IFFALSE 3215
// PlaceHumanInUnit ( un , building ) else
3199: LD_VAR 0 10
3203: PPUSH
3204: LD_VAR 0 6
3208: PPUSH
3209: CALL_OW 52
3213: GO 3242
// PlaceUnitXYR ( un , x , y , r , false ) ;
3215: LD_VAR 0 10
3219: PPUSH
3220: LD_VAR 0 3
3224: PPUSH
3225: LD_VAR 0 4
3229: PPUSH
3230: LD_VAR 0 5
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 50
// result := result ^ [ un ] ;
3242: LD_ADDR_VAR 0 7
3246: PUSH
3247: LD_VAR 0 7
3251: PUSH
3252: LD_VAR 0 10
3256: PUSH
3257: EMPTY
3258: LIST
3259: ADD
3260: ST_TO_ADDR
// end ;
3261: GO 2844
3263: POP
3264: POP
// if not global_defined then
3265: LD_LOC 3
3269: NOT
3270: IFFALSE 3348
// if ( global_units >= cl ) then
3272: LD_LOC 2
3276: PUSH
3277: LD_VAR 0 2
3281: GREATEREQUAL
3282: IFFALSE 3323
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3284: LD_ADDR_LOC 2
3288: PUSH
3289: LD_LOC 2
3293: PPUSH
3294: LD_VAR 0 2
3298: PPUSH
3299: LD_LOC 2
3303: PUSH
3304: LD_VAR 0 2
3308: ARRAY
3309: PUSH
3310: LD_VAR 0 7
3314: ADD
3315: PPUSH
3316: CALL_OW 1
3320: ST_TO_ADDR
3321: GO 3348
// global_units := Replace ( global_units , cl , result ) ;
3323: LD_ADDR_LOC 2
3327: PUSH
3328: LD_LOC 2
3332: PPUSH
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_VAR 0 7
3342: PPUSH
3343: CALL_OW 1
3347: ST_TO_ADDR
// end ;
3348: LD_VAR 0 7
3352: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3353: LD_INT 0
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
3360: PPUSH
3361: PPUSH
3362: PPUSH
3363: PPUSH
// if side in [ 0 , 9 ] then
3364: LD_VAR 0 1
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: LD_INT 9
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: IN
3379: IFFALSE 3383
// exit ;
3381: GO 4400
// pos := Side_Positions [ side ] ;
3383: LD_ADDR_VAR 0 3
3387: PUSH
3388: LD_EXP 39
3392: PUSH
3393: LD_VAR 0 1
3397: ARRAY
3398: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_EXP 40
3408: PUSH
3409: LD_VAR 0 1
3413: ARRAY
3414: ST_TO_ADDR
// uc_side := side ;
3415: LD_ADDR_OWVAR 20
3419: PUSH
3420: LD_VAR 0 1
3424: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3425: LD_ADDR_VAR 0 4
3429: PUSH
3430: LD_EXP 42
3434: PUSH
3435: LD_VAR 0 3
3439: ARRAY
3440: PUSH
3441: LD_INT 1
3443: ARRAY
3444: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3445: LD_ADDR_VAR 0 5
3449: PUSH
3450: LD_EXP 42
3454: PUSH
3455: LD_VAR 0 3
3459: ARRAY
3460: PUSH
3461: LD_INT 2
3463: ARRAY
3464: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3465: LD_ADDR_VAR 0 6
3469: PUSH
3470: LD_EXP 42
3474: PUSH
3475: LD_VAR 0 3
3479: ARRAY
3480: PUSH
3481: LD_INT 3
3483: ARRAY
3484: ST_TO_ADDR
// if is_depot then
3485: LD_EXP 19
3489: IFFALSE 3622
// begin bc_type = b_depot ;
3491: LD_ADDR_OWVAR 42
3495: PUSH
3496: LD_INT 0
3498: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3499: LD_ADDR_VAR 0 10
3503: PUSH
3504: LD_VAR 0 4
3508: PPUSH
3509: LD_VAR 0 5
3513: PPUSH
3514: LD_VAR 0 6
3518: PPUSH
3519: CALL_OW 47
3523: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3524: LD_VAR 0 10
3528: PPUSH
3529: LD_STRING @
3531: PUSH
3532: LD_VAR 0 1
3536: STR
3537: PPUSH
3538: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3542: LD_VAR 0 10
3546: PPUSH
3547: CALL_OW 274
3551: PPUSH
3552: LD_INT 1
3554: PPUSH
3555: LD_EXP 24
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3568: LD_VAR 0 10
3572: PPUSH
3573: CALL_OW 274
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: LD_EXP 24
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3594: LD_VAR 0 10
3598: PPUSH
3599: CALL_OW 274
3603: PPUSH
3604: LD_INT 3
3606: PPUSH
3607: LD_EXP 24
3611: PUSH
3612: LD_INT 3
3614: ARRAY
3615: PPUSH
3616: CALL_OW 277
// end else
3620: GO 3766
// begin for i := 1 to 3 do
3622: LD_ADDR_VAR 0 7
3626: PUSH
3627: DOUBLE
3628: LD_INT 1
3630: DEC
3631: ST_TO_ADDR
3632: LD_INT 3
3634: PUSH
3635: FOR_TO
3636: IFFALSE 3764
// begin r := starting_resources [ i ] ;
3638: LD_ADDR_VAR 0 8
3642: PUSH
3643: LD_EXP 24
3647: PUSH
3648: LD_VAR 0 7
3652: ARRAY
3653: ST_TO_ADDR
// while r >= 10 do
3654: LD_VAR 0 8
3658: PUSH
3659: LD_INT 10
3661: GREATEREQUAL
3662: IFFALSE 3762
// if r > 50 then
3664: LD_VAR 0 8
3668: PUSH
3669: LD_INT 50
3671: GREATER
3672: IFFALSE 3718
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3674: LD_VAR 0 7
3678: PPUSH
3679: LD_INT 5
3681: PPUSH
3682: LD_VAR 0 4
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_INT 0
3697: PPUSH
3698: CALL_OW 60
// r := r - 50 ;
3702: LD_ADDR_VAR 0 8
3706: PUSH
3707: LD_VAR 0 8
3711: PUSH
3712: LD_INT 50
3714: MINUS
3715: ST_TO_ADDR
// end else
3716: GO 3760
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3718: LD_VAR 0 7
3722: PPUSH
3723: LD_VAR 0 8
3727: PUSH
3728: LD_INT 10
3730: DIV
3731: PPUSH
3732: LD_VAR 0 4
3736: PPUSH
3737: LD_VAR 0 5
3741: PPUSH
3742: LD_INT 4
3744: PPUSH
3745: LD_INT 0
3747: PPUSH
3748: CALL_OW 60
// r := 0 ;
3752: LD_ADDR_VAR 0 8
3756: PUSH
3757: LD_INT 0
3759: ST_TO_ADDR
// end ;
3760: GO 3654
// end ;
3762: GO 3635
3764: POP
3765: POP
// end ; for r in starting_crates do
3766: LD_ADDR_VAR 0 8
3770: PUSH
3771: LD_EXP 23
3775: PUSH
3776: FOR_IN
3777: IFFALSE 3809
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 5
3784: PPUSH
3785: LD_VAR 0 4
3789: PPUSH
3790: LD_VAR 0 5
3794: PPUSH
3795: LD_VAR 0 8
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 60
3807: GO 3776
3809: POP
3810: POP
// if def_morale_flags then
3811: LD_EXP 9
3815: IFFALSE 3954
// begin x := start_def [ pos ] [ 1 ] ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_EXP 44
3826: PUSH
3827: LD_VAR 0 3
3831: ARRAY
3832: PUSH
3833: LD_INT 1
3835: ARRAY
3836: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3837: LD_ADDR_VAR 0 5
3841: PUSH
3842: LD_EXP 44
3846: PUSH
3847: LD_VAR 0 3
3851: ARRAY
3852: PUSH
3853: LD_INT 2
3855: ARRAY
3856: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3857: LD_VAR 0 4
3861: PPUSH
3862: LD_VAR 0 5
3866: PPUSH
3867: LD_INT 12
3869: PPUSH
3870: LD_INT 2
3872: PPUSH
3873: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3877: LD_ADDR_EXP 49
3881: PUSH
3882: LD_EXP 49
3886: PUSH
3887: LD_VAR 0 1
3891: PPUSH
3892: LD_VAR 0 4
3896: PPUSH
3897: LD_VAR 0 5
3901: PPUSH
3902: LD_INT 1
3904: PUSH
3905: LD_INT 100
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: LD_INT 50
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 3
3924: PUSH
3925: LD_INT 20
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 20
3934: PUSH
3935: LD_INT 100
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PPUSH
3948: CALL_OW 418
3952: ADD
3953: ST_TO_ADDR
// end ; commander := true ;
3954: LD_ADDR_LOC 1
3958: PUSH
3959: LD_INT 1
3961: ST_TO_ADDR
// soldiers_created := 0 ;
3962: LD_ADDR_LOC 4
3966: PUSH
3967: LD_INT 0
3969: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3970: LD_ADDR_VAR 0 7
3974: PUSH
3975: DOUBLE
3976: LD_INT 1
3978: DEC
3979: ST_TO_ADDR
3980: LD_EXP 20
3984: PUSH
3985: FOR_TO
3986: IFFALSE 4139
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3988: LD_ADDR_VAR 0 4
3992: PUSH
3993: LD_EXP 43
3997: PUSH
3998: LD_VAR 0 3
4002: ARRAY
4003: PUSH
4004: LD_VAR 0 7
4008: ARRAY
4009: PUSH
4010: LD_INT 1
4012: ARRAY
4013: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4014: LD_ADDR_VAR 0 5
4018: PUSH
4019: LD_EXP 43
4023: PUSH
4024: LD_VAR 0 3
4028: ARRAY
4029: PUSH
4030: LD_VAR 0 7
4034: ARRAY
4035: PUSH
4036: LD_INT 2
4038: ARRAY
4039: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4040: LD_ADDR_VAR 0 6
4044: PUSH
4045: LD_EXP 43
4049: PUSH
4050: LD_VAR 0 3
4054: ARRAY
4055: PUSH
4056: LD_VAR 0 7
4060: ARRAY
4061: PUSH
4062: LD_INT 3
4064: ARRAY
4065: ST_TO_ADDR
// bc_type := b_breastwork ;
4066: LD_ADDR_OWVAR 42
4070: PUSH
4071: LD_INT 31
4073: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4074: LD_ADDR_VAR 0 9
4078: PUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_VAR 0 5
4088: PPUSH
4089: LD_VAR 0 6
4093: PPUSH
4094: CALL_OW 47
4098: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4099: LD_INT 1
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 0
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: LD_INT 0
4113: PPUSH
4114: LD_VAR 0 9
4118: PPUSH
4119: CALL 2816 0 6
// soldiers_created := soldiers_created + 1 ;
4123: LD_ADDR_LOC 4
4127: PUSH
4128: LD_LOC 4
4132: PUSH
4133: LD_INT 1
4135: PLUS
4136: ST_TO_ADDR
// end ;
4137: GO 3985
4139: POP
4140: POP
// x := start_def [ pos ] [ 1 ] ;
4141: LD_ADDR_VAR 0 4
4145: PUSH
4146: LD_EXP 44
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_INT 1
4159: ARRAY
4160: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4161: LD_ADDR_VAR 0 5
4165: PUSH
4166: LD_EXP 44
4170: PUSH
4171: LD_VAR 0 3
4175: ARRAY
4176: PUSH
4177: LD_INT 2
4179: ARRAY
4180: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4181: LD_LOC 8
4185: PUSH
4186: LD_EXP 20
4190: MINUS
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: LD_VAR 0 4
4199: PPUSH
4200: LD_VAR 0 5
4204: PPUSH
4205: LD_INT 5
4207: PPUSH
4208: LD_INT 0
4210: PPUSH
4211: CALL 2816 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4215: LD_LOC 5
4219: PPUSH
4220: LD_INT 2
4222: PPUSH
4223: LD_VAR 0 4
4227: PPUSH
4228: LD_VAR 0 5
4232: PPUSH
4233: LD_INT 5
4235: PPUSH
4236: LD_INT 0
4238: PPUSH
4239: CALL 2816 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4243: LD_LOC 7
4247: PPUSH
4248: LD_INT 3
4250: PPUSH
4251: LD_VAR 0 4
4255: PPUSH
4256: LD_VAR 0 5
4260: PPUSH
4261: LD_INT 5
4263: PPUSH
4264: LD_INT 0
4266: PPUSH
4267: CALL 2816 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4271: LD_LOC 6
4275: PPUSH
4276: LD_INT 4
4278: PPUSH
4279: LD_VAR 0 4
4283: PPUSH
4284: LD_VAR 0 5
4288: PPUSH
4289: LD_INT 5
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL 2816 0 6
// if def_siberite_detection then
4299: LD_EXP 10
4303: IFFALSE 4320
// SetTech ( tech_SibDet , side , state_researched ) ;
4305: LD_INT 20
4307: PPUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_INT 2
4315: PPUSH
4316: CALL_OW 322
// if def_siberite_bomb = 1 then
4320: LD_EXP 15
4324: PUSH
4325: LD_INT 1
4327: EQUAL
4328: IFFALSE 4362
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4330: LD_INT 25
4332: PPUSH
4333: LD_VAR 0 1
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4345: LD_INT 73
4347: PPUSH
4348: LD_VAR 0 1
4352: PPUSH
4353: LD_INT 1
4355: PPUSH
4356: CALL_OW 322
// end else
4360: GO 4392
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4362: LD_INT 25
4364: PPUSH
4365: LD_VAR 0 1
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4377: LD_INT 73
4379: PPUSH
4380: LD_VAR 0 1
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL_OW 322
// end ; global_defined := true ;
4392: LD_ADDR_LOC 3
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// end ;
4400: LD_VAR 0 2
4404: RET
// every 0 0$1 do
4405: GO 4407
4407: DISABLE
// if ( def_siberite_bomb > 1 ) then
4408: LD_EXP 15
4412: PUSH
4413: LD_INT 1
4415: GREATER
4416: IFFALSE 4431
// begin wait ( siberite_bomb_Delay ) ;
4418: LD_EXP 33
4422: PPUSH
4423: CALL_OW 67
// EnableSibFiss ;
4427: CALL 4432 0 0
// end ;
4431: END
// function EnableSibFiss ; var i ; begin
4432: LD_INT 0
4434: PPUSH
4435: PPUSH
// for i := 1 to 8 do
4436: LD_ADDR_VAR 0 2
4440: PUSH
4441: DOUBLE
4442: LD_INT 1
4444: DEC
4445: ST_TO_ADDR
4446: LD_INT 8
4448: PUSH
4449: FOR_TO
4450: IFFALSE 4496
// if Side_Positions [ i ] then
4452: LD_EXP 39
4456: PUSH
4457: LD_VAR 0 2
4461: ARRAY
4462: IFFALSE 4494
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4464: LD_INT 25
4466: PPUSH
4467: LD_VAR 0 2
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4479: LD_INT 73
4481: PPUSH
4482: LD_VAR 0 2
4486: PPUSH
4487: LD_INT 1
4489: PPUSH
4490: CALL_OW 322
// end ;
4494: GO 4449
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// function prepare_sides ; var i ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
// global_units := [ ] ;
4507: LD_ADDR_LOC 2
4511: PUSH
4512: EMPTY
4513: ST_TO_ADDR
// global_defined := false ;
4514: LD_ADDR_LOC 3
4518: PUSH
4519: LD_INT 0
4521: ST_TO_ADDR
// CountClassMembers ;
4522: CALL 4572 0 0
// for i := 1 to 8 do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 8
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4565
// if Side_Positions [ i ] then
4542: LD_EXP 39
4546: PUSH
4547: LD_VAR 0 2
4551: ARRAY
4552: IFFALSE 4563
// prepare_side ( i ) ;
4554: LD_VAR 0 2
4558: PPUSH
4559: CALL 3353 0 1
4563: GO 4539
4565: POP
4566: POP
// end ;
4567: LD_VAR 0 1
4571: RET
// function CountClassMembers ; var Mode ; begin
4572: LD_INT 0
4574: PPUSH
4575: PPUSH
// if No_Mechs then
4576: LD_EXP 17
4580: IFFALSE 4592
// Mode := 2 else
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: LD_INT 2
4589: ST_TO_ADDR
4590: GO 4600
// Mode := 1 ;
4592: LD_ADDR_VAR 0 2
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// neng := number_of_people ;
4600: LD_ADDR_LOC 5
4604: PUSH
4605: LD_EXP 21
4609: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4610: LD_ADDR_LOC 8
4614: PUSH
4615: LD_LOC 5
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: LD_INT 3
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_VAR 0 2
4634: ARRAY
4635: DIV
4636: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4637: LD_LOC 8
4641: PUSH
4642: LD_EXP 20
4646: LESS
4647: IFFALSE 4659
// nsol := number_of_breastworks ;
4649: LD_ADDR_LOC 8
4653: PUSH
4654: LD_EXP 20
4658: ST_TO_ADDR
// neng := neng - nsol ;
4659: LD_ADDR_LOC 5
4663: PUSH
4664: LD_LOC 5
4668: PUSH
4669: LD_LOC 8
4673: MINUS
4674: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4675: LD_ADDR_LOC 6
4679: PUSH
4680: LD_LOC 5
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: LD_INT 2
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_VAR 0 2
4699: ARRAY
4700: DIV
4701: ST_TO_ADDR
// if ( nsci < 1 ) then
4702: LD_LOC 6
4706: PUSH
4707: LD_INT 1
4709: LESS
4710: IFFALSE 4720
// nsci := 1 ;
4712: LD_ADDR_LOC 6
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// neng := neng - nsci ;
4720: LD_ADDR_LOC 5
4724: PUSH
4725: LD_LOC 5
4729: PUSH
4730: LD_LOC 6
4734: MINUS
4735: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4736: LD_ADDR_LOC 7
4740: PUSH
4741: LD_LOC 5
4745: PUSH
4746: LD_INT 2
4748: DIV
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_VAR 0 2
4761: ARRAY
4762: ST_TO_ADDR
// neng := neng - nmech ;
4763: LD_ADDR_LOC 5
4767: PUSH
4768: LD_LOC 5
4772: PUSH
4773: LD_LOC 7
4777: MINUS
4778: ST_TO_ADDR
// if ( neng < 1 ) then
4779: LD_LOC 5
4783: PUSH
4784: LD_INT 1
4786: LESS
4787: IFFALSE 4797
// neng := 1 ;
4789: LD_ADDR_LOC 5
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// end ;
4797: LD_VAR 0 1
4801: RET
// function Init_Win_Condition ; begin
4802: LD_INT 0
4804: PPUSH
// if Team_Game then
4805: LD_EXP 41
4809: IFFALSE 4816
// enable ( 98 ) else
4811: LD_INT 98
4813: ENABLE_MARKED
4814: GO 4819
// enable ( 99 ) ;
4816: LD_INT 99
4818: ENABLE_MARKED
// case Game_Type of 3 :
4819: LD_EXP 18
4823: PUSH
4824: LD_INT 3
4826: DOUBLE
4827: EQUAL
4828: IFTRUE 4832
4830: GO 4838
4832: POP
// enable ( 100 ) ; end ;
4833: LD_INT 100
4835: ENABLE_MARKED
4836: GO 4839
4838: POP
// end ;
4839: LD_VAR 0 1
4843: RET
// starting begin disable ( 98 ) ;
4844: LD_INT 98
4846: DISABLE_MARKED
// disable ( 99 ) ;
4847: LD_INT 99
4849: DISABLE_MARKED
// disable ( 400 ) ;
4850: LD_INT 400
4852: DISABLE_MARKED
// disable ( 401 ) ;
4853: LD_INT 401
4855: DISABLE_MARKED
// mp_selectmsg := true ;
4856: LD_ADDR_OWVAR 13
4860: PUSH
4861: LD_INT 1
4863: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4864: CALL 68 0 0
// init_map ;
4868: CALL 1357 0 0
// init_respawning ;
4872: CALL 12337 0 0
// set_shared_visions_and_alliances ;
4876: CALL 2528 0 0
// prepare_sides ;
4880: CALL 4503 0 0
// ShowTimer ;
4884: CALL 7191 0 0
// music_nat := Side_Nations [ your_side ] ;
4888: LD_ADDR_OWVAR 71
4892: PUSH
4893: LD_EXP 40
4897: PUSH
4898: LD_OWVAR 2
4902: ARRAY
4903: ST_TO_ADDR
// if IAmSpec then
4904: CALL_OW 531
4908: IFFALSE 4944
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4910: LD_INT 0
4912: PPUSH
4913: LD_INT 0
4915: PPUSH
4916: LD_OWVAR 2
4920: PPUSH
4921: LD_INT 32767
4923: NEG
4924: PPUSH
4925: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
4929: LD_INT 104
4931: PPUSH
4932: LD_INT 69
4934: PPUSH
4935: CALL_OW 86
// enable ( 400 ) ;
4939: LD_INT 400
4941: ENABLE_MARKED
// end else
4942: GO 4998
// begin ResetFog ;
4944: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4948: LD_EXP 44
4952: PUSH
4953: LD_EXP 39
4957: PUSH
4958: LD_OWVAR 2
4962: ARRAY
4963: ARRAY
4964: PUSH
4965: LD_INT 1
4967: ARRAY
4968: PPUSH
4969: LD_EXP 44
4973: PUSH
4974: LD_EXP 39
4978: PUSH
4979: LD_OWVAR 2
4983: ARRAY
4984: ARRAY
4985: PUSH
4986: LD_INT 2
4988: ARRAY
4989: PPUSH
4990: CALL_OW 86
// Init_Win_Condition ;
4994: CALL 4802 0 0
// end ; AnimateTrees ( true ) ;
4998: LD_INT 1
5000: PPUSH
5001: CALL_OW 573
// InitApeman ;
5005: CALL 5707 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5009: LD_ADDR_EXP 60
5013: PUSH
5014: LD_INT 7
5016: PUSH
5017: LD_INT 8
5019: PUSH
5020: LD_INT 9
5022: PUSH
5023: LD_INT 10
5025: PUSH
5026: LD_INT 11
5028: PUSH
5029: LD_INT 12
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// BeginBuildUp ;
5040: CALL 12831 0 0
// end ; end_of_file
5044: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5045: GO 5047
5047: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
5048: LD_INT 4
5050: PPUSH
5051: LD_INT 5
5053: PPUSH
5054: CALL_OW 12
5058: PPUSH
5059: LD_INT 14
5061: PPUSH
5062: LD_INT 1
5064: PPUSH
5065: CALL_OW 55
// enable ;
5069: ENABLE
// end ;
5070: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5071: GO 5073
5073: DISABLE
5074: LD_INT 0
5076: PPUSH
5077: PPUSH
// begin case tick of 1 .. 1 1$0 :
5078: LD_OWVAR 1
5082: PUSH
5083: LD_INT 1
5085: DOUBLE
5086: GREATEREQUAL
5087: IFFALSE 5095
5089: LD_INT 2100
5091: DOUBLE
5092: LESSEQUAL
5093: IFTRUE 5097
5095: GO 5125
5097: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5098: LD_EXP 25
5102: PUSH
5103: LD_INT 100
5105: DIVREAL
5106: PUSH
5107: LD_INT 525
5109: PPUSH
5110: LD_INT 1050
5112: PPUSH
5113: CALL_OW 12
5117: MUL
5118: PPUSH
5119: CALL_OW 67
5123: GO 5427
5125: LD_INT 2100
5127: PUSH
5128: LD_INT 1
5130: PLUS
5131: DOUBLE
5132: GREATEREQUAL
5133: IFFALSE 5141
5135: LD_INT 10500
5137: DOUBLE
5138: LESSEQUAL
5139: IFTRUE 5143
5141: GO 5171
5143: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5144: LD_EXP 25
5148: PUSH
5149: LD_INT 100
5151: DIVREAL
5152: PUSH
5153: LD_INT 1050
5155: PPUSH
5156: LD_INT 1750
5158: PPUSH
5159: CALL_OW 12
5163: MUL
5164: PPUSH
5165: CALL_OW 67
5169: GO 5427
5171: LD_INT 10500
5173: PUSH
5174: LD_INT 1
5176: PLUS
5177: DOUBLE
5178: GREATEREQUAL
5179: IFFALSE 5187
5181: LD_INT 21000
5183: DOUBLE
5184: LESSEQUAL
5185: IFTRUE 5189
5187: GO 5217
5189: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5190: LD_EXP 25
5194: PUSH
5195: LD_INT 100
5197: DIVREAL
5198: PUSH
5199: LD_INT 1750
5201: PPUSH
5202: LD_INT 2100
5204: PPUSH
5205: CALL_OW 12
5209: MUL
5210: PPUSH
5211: CALL_OW 67
5215: GO 5427
5217: LD_INT 21000
5219: PUSH
5220: LD_INT 1
5222: PLUS
5223: DOUBLE
5224: GREATEREQUAL
5225: IFFALSE 5233
5227: LD_INT 42000
5229: DOUBLE
5230: LESSEQUAL
5231: IFTRUE 5235
5233: GO 5263
5235: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5236: LD_EXP 25
5240: PUSH
5241: LD_INT 100
5243: DIVREAL
5244: PUSH
5245: LD_INT 2100
5247: PPUSH
5248: LD_INT 2275
5250: PPUSH
5251: CALL_OW 12
5255: MUL
5256: PPUSH
5257: CALL_OW 67
5261: GO 5427
5263: LD_INT 42000
5265: PUSH
5266: LD_INT 1
5268: PLUS
5269: DOUBLE
5270: GREATEREQUAL
5271: IFFALSE 5279
5273: LD_INT 63000
5275: DOUBLE
5276: LESSEQUAL
5277: IFTRUE 5281
5279: GO 5309
5281: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5282: LD_EXP 25
5286: PUSH
5287: LD_INT 100
5289: DIVREAL
5290: PUSH
5291: LD_INT 2275
5293: PPUSH
5294: LD_INT 2450
5296: PPUSH
5297: CALL_OW 12
5301: MUL
5302: PPUSH
5303: CALL_OW 67
5307: GO 5427
5309: LD_INT 63000
5311: PUSH
5312: LD_INT 1
5314: PLUS
5315: DOUBLE
5316: GREATEREQUAL
5317: IFFALSE 5325
5319: LD_INT 105000
5321: DOUBLE
5322: LESSEQUAL
5323: IFTRUE 5327
5325: GO 5355
5327: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5328: LD_EXP 25
5332: PUSH
5333: LD_INT 100
5335: DIVREAL
5336: PUSH
5337: LD_INT 2450
5339: PPUSH
5340: LD_INT 2800
5342: PPUSH
5343: CALL_OW 12
5347: MUL
5348: PPUSH
5349: CALL_OW 67
5353: GO 5427
5355: LD_INT 105000
5357: PUSH
5358: LD_INT 1
5360: PLUS
5361: DOUBLE
5362: GREATEREQUAL
5363: IFFALSE 5371
5365: LD_INT 630000
5367: DOUBLE
5368: LESSEQUAL
5369: IFTRUE 5373
5371: GO 5401
5373: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5374: LD_EXP 25
5378: PUSH
5379: LD_INT 100
5381: DIVREAL
5382: PUSH
5383: LD_INT 2800
5385: PPUSH
5386: LD_INT 3500
5388: PPUSH
5389: CALL_OW 12
5393: MUL
5394: PPUSH
5395: CALL_OW 67
5399: GO 5427
5401: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5402: LD_EXP 25
5406: PUSH
5407: LD_INT 100
5409: DIVREAL
5410: PUSH
5411: LD_INT 3500
5413: PPUSH
5414: LD_INT 3850
5416: PPUSH
5417: CALL_OW 12
5421: MUL
5422: PPUSH
5423: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5427: LD_ADDR_VAR 0 2
5431: PUSH
5432: LD_INT 3
5434: PPUSH
5435: LD_INT 5
5437: PPUSH
5438: CALL_OW 12
5442: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5443: LD_ADDR_VAR 0 1
5447: PUSH
5448: LD_EXP 39
5452: PUSH
5453: LD_INT 0
5455: PUSH
5456: EMPTY
5457: LIST
5458: DIFF
5459: PUSH
5460: FOR_IN
5461: IFFALSE 5510
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 15 , true ) ;
5463: LD_VAR 0 2
5467: PPUSH
5468: LD_EXP 44
5472: PUSH
5473: LD_VAR 0 1
5477: ARRAY
5478: PUSH
5479: LD_INT 1
5481: ARRAY
5482: PPUSH
5483: LD_EXP 44
5487: PUSH
5488: LD_VAR 0 1
5492: ARRAY
5493: PUSH
5494: LD_INT 2
5496: ARRAY
5497: PPUSH
5498: LD_INT 15
5500: PPUSH
5501: LD_INT 1
5503: PPUSH
5504: CALL_OW 56
5508: GO 5460
5510: POP
5511: POP
// enable ;
5512: ENABLE
// end ; end_of_file
5513: PPOPN 2
5515: END
// every 20 20$00 trigger apemanNumber do
5516: LD_EXP 51
5520: IFFALSE 5553
5522: GO 5524
5524: DISABLE
// begin enable ;
5525: ENABLE
// if apeLevel >= 8 then
5526: LD_EXP 56
5530: PUSH
5531: LD_INT 8
5533: GREATEREQUAL
5534: IFFALSE 5539
// disable else
5536: DISABLE
5537: GO 5553
// apeLevel := apeLevel + 1 ;
5539: LD_ADDR_EXP 56
5543: PUSH
5544: LD_EXP 56
5548: PUSH
5549: LD_INT 1
5551: PLUS
5552: ST_TO_ADDR
// end ;
5553: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5554: LD_EXP 51
5558: PUSH
5559: LD_EXP 52
5563: LESS
5564: IFFALSE 5704
5566: GO 5568
5568: DISABLE
5569: LD_INT 0
5571: PPUSH
5572: PPUSH
5573: PPUSH
5574: PPUSH
// begin enable ;
5575: ENABLE
// for i := 1 to apemanPos do
5576: LD_ADDR_VAR 0 1
5580: PUSH
5581: DOUBLE
5582: LD_INT 1
5584: DEC
5585: ST_TO_ADDR
5586: LD_EXP 54
5590: PUSH
5591: FOR_TO
5592: IFFALSE 5702
// begin if apemanPlayerCount [ i ] then
5594: LD_EXP 55
5598: PUSH
5599: LD_VAR 0 1
5603: ARRAY
5604: IFFALSE 5700
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5606: LD_EXP 55
5610: PUSH
5611: LD_VAR 0 1
5615: ARRAY
5616: PUSH
5617: LD_EXP 54
5621: PUSH
5622: LD_VAR 0 1
5626: ARRAY
5627: GREATER
5628: IFFALSE 5700
// begin ape := PrepareApeman ;
5630: LD_ADDR_VAR 0 2
5634: PUSH
5635: CALL 6215 0 0
5639: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5640: LD_VAR 0 2
5644: PPUSH
5645: LD_EXP 57
5649: PUSH
5650: LD_VAR 0 1
5654: ARRAY
5655: PPUSH
5656: LD_INT 0
5658: PPUSH
5659: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5663: LD_ADDR_EXP 54
5667: PUSH
5668: LD_EXP 54
5672: PPUSH
5673: LD_VAR 0 1
5677: PPUSH
5678: LD_EXP 54
5682: PUSH
5683: LD_VAR 0 1
5687: ARRAY
5688: PUSH
5689: LD_VAR 0 2
5693: UNION
5694: PPUSH
5695: CALL_OW 1
5699: ST_TO_ADDR
// end ; end ; end ;
5700: GO 5591
5702: POP
5703: POP
// end ;
5704: PPOPN 4
5706: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5707: LD_INT 0
5709: PPUSH
5710: PPUSH
5711: PPUSH
5712: PPUSH
5713: PPUSH
5714: PPUSH
5715: PPUSH
// playersAmount := 0 ;
5716: LD_ADDR_VAR 0 3
5720: PUSH
5721: LD_INT 0
5723: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5724: LD_ADDR_VAR 0 7
5728: PUSH
5729: LD_INT 3
5731: PUSH
5732: LD_INT 2
5734: PUSH
5735: LD_INT 1
5737: PUSH
5738: LD_INT 4
5740: PUSH
5741: LD_INT 6
5743: PUSH
5744: LD_INT 5
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5755: LD_ADDR_EXP 57
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: LD_INT 0
5774: PUSH
5775: LD_INT 0
5777: PUSH
5778: LD_INT 0
5780: PUSH
5781: LD_INT 0
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: ST_TO_ADDR
// for j = 1 to Side_Positions do
5794: LD_ADDR_VAR 0 4
5798: PUSH
5799: DOUBLE
5800: LD_INT 1
5802: DEC
5803: ST_TO_ADDR
5804: LD_EXP 39
5808: PUSH
5809: FOR_TO
5810: IFFALSE 5877
// if Side_Positions [ j ] then
5812: LD_EXP 39
5816: PUSH
5817: LD_VAR 0 4
5821: ARRAY
5822: IFFALSE 5875
// begin playersAmount := playersAmount + 1 ;
5824: LD_ADDR_VAR 0 3
5828: PUSH
5829: LD_VAR 0 3
5833: PUSH
5834: LD_INT 1
5836: PLUS
5837: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5838: LD_ADDR_EXP 57
5842: PUSH
5843: LD_EXP 57
5847: PPUSH
5848: LD_VAR 0 4
5852: PPUSH
5853: LD_VAR 0 7
5857: PUSH
5858: LD_EXP 39
5862: PUSH
5863: LD_VAR 0 4
5867: ARRAY
5868: ARRAY
5869: PPUSH
5870: CALL_OW 1
5874: ST_TO_ADDR
// end ;
5875: GO 5809
5877: POP
5878: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5879: LD_ADDR_EXP 53
5883: PUSH
5884: LD_INT 3
5886: PUSH
5887: LD_EXP 27
5891: MUL
5892: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5893: LD_ADDR_EXP 51
5897: PUSH
5898: LD_VAR 0 3
5902: PUSH
5903: LD_EXP 53
5907: MUL
5908: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5909: LD_ADDR_EXP 52
5913: PUSH
5914: LD_EXP 51
5918: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5919: LD_ADDR_EXP 54
5923: PUSH
5924: LD_INT 0
5926: PUSH
5927: LD_INT 0
5929: PUSH
5930: LD_INT 0
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: LD_INT 0
5938: PUSH
5939: LD_INT 0
5941: PUSH
5942: LD_INT 0
5944: PUSH
5945: LD_INT 0
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: LIST
5957: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5958: LD_ADDR_EXP 55
5962: PUSH
5963: LD_INT 0
5965: PUSH
5966: LD_INT 0
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: LD_INT 0
5977: PUSH
5978: LD_INT 0
5980: PUSH
5981: LD_INT 0
5983: PUSH
5984: LD_INT 0
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: ST_TO_ADDR
// apeLevel := 1 ;
5997: LD_ADDR_EXP 56
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// if not apemanNumber then
6005: LD_EXP 51
6009: NOT
6010: IFFALSE 6014
// exit ;
6012: GO 6210
// for i := 1 to apemanPerPlayer do
6014: LD_ADDR_VAR 0 2
6018: PUSH
6019: DOUBLE
6020: LD_INT 1
6022: DEC
6023: ST_TO_ADDR
6024: LD_EXP 53
6028: PUSH
6029: FOR_TO
6030: IFFALSE 6208
// begin for j := 1 to Side_Positions do
6032: LD_ADDR_VAR 0 4
6036: PUSH
6037: DOUBLE
6038: LD_INT 1
6040: DEC
6041: ST_TO_ADDR
6042: LD_EXP 39
6046: PUSH
6047: FOR_TO
6048: IFFALSE 6204
// if Side_Positions [ j ] then
6050: LD_EXP 39
6054: PUSH
6055: LD_VAR 0 4
6059: ARRAY
6060: IFFALSE 6202
// begin pos := Side_Positions [ j ] ;
6062: LD_ADDR_VAR 0 6
6066: PUSH
6067: LD_EXP 39
6071: PUSH
6072: LD_VAR 0 4
6076: ARRAY
6077: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6078: LD_ADDR_EXP 55
6082: PUSH
6083: LD_EXP 55
6087: PPUSH
6088: LD_VAR 0 4
6092: PPUSH
6093: LD_EXP 55
6097: PUSH
6098: LD_VAR 0 4
6102: ARRAY
6103: PUSH
6104: LD_INT 1
6106: PLUS
6107: PPUSH
6108: CALL_OW 1
6112: ST_TO_ADDR
// ape := PrepareApeman ;
6113: LD_ADDR_VAR 0 5
6117: PUSH
6118: CALL 6215 0 0
6122: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6123: LD_ADDR_EXP 54
6127: PUSH
6128: LD_EXP 54
6132: PPUSH
6133: LD_VAR 0 4
6137: PPUSH
6138: LD_EXP 54
6142: PUSH
6143: LD_VAR 0 4
6147: ARRAY
6148: PPUSH
6149: LD_EXP 54
6153: PUSH
6154: LD_VAR 0 4
6158: ARRAY
6159: PUSH
6160: LD_INT 1
6162: PLUS
6163: PPUSH
6164: LD_VAR 0 5
6168: PPUSH
6169: CALL_OW 1
6173: PPUSH
6174: CALL_OW 1
6178: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6179: LD_VAR 0 5
6183: PPUSH
6184: LD_EXP 57
6188: PUSH
6189: LD_VAR 0 4
6193: ARRAY
6194: PPUSH
6195: LD_INT 0
6197: PPUSH
6198: CALL_OW 49
// end ;
6202: GO 6047
6204: POP
6205: POP
// end ;
6206: GO 6029
6208: POP
6209: POP
// end ;
6210: LD_VAR 0 1
6214: RET
// export function PrepareApeman ; var bonus ; begin
6215: LD_INT 0
6217: PPUSH
6218: PPUSH
// uc_side := 0 ;
6219: LD_ADDR_OWVAR 20
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// uc_nation := 0 ;
6227: LD_ADDR_OWVAR 21
6231: PUSH
6232: LD_INT 0
6234: ST_TO_ADDR
// InitHc ;
6235: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6239: LD_ADDR_VAR 0 2
6243: PUSH
6244: LD_INT 1
6246: NEG
6247: PUSH
6248: LD_INT 0
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 25
6261: PUSH
6262: LD_INT 12
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PPUSH
6269: CALL_OW 69
6273: PUSH
6274: LD_INT 3
6276: MOD
6277: PUSH
6278: LD_INT 1
6280: PLUS
6281: ARRAY
6282: ST_TO_ADDR
// hc_class := class_apeman ;
6283: LD_ADDR_OWVAR 28
6287: PUSH
6288: LD_INT 12
6290: ST_TO_ADDR
// hc_gallery :=  ;
6291: LD_ADDR_OWVAR 33
6295: PUSH
6296: LD_STRING 
6298: ST_TO_ADDR
// hc_name :=  ;
6299: LD_ADDR_OWVAR 26
6303: PUSH
6304: LD_STRING 
6306: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6307: LD_ADDR_OWVAR 31
6311: PUSH
6312: LD_EXP 56
6316: PUSH
6317: LD_VAR 0 2
6321: PLUS
6322: PUSH
6323: LD_EXP 56
6327: PUSH
6328: LD_VAR 0 2
6332: PLUS
6333: PUSH
6334: LD_EXP 56
6338: PUSH
6339: LD_VAR 0 2
6343: PLUS
6344: PUSH
6345: LD_EXP 56
6349: PUSH
6350: LD_VAR 0 2
6354: PLUS
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6362: LD_ADDR_OWVAR 35
6366: PUSH
6367: LD_INT 10
6369: PUSH
6370: LD_VAR 0 2
6374: MUL
6375: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6376: LD_ADDR_OWVAR 29
6380: PUSH
6381: LD_INT 12
6383: PUSH
6384: LD_INT 10
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: ST_TO_ADDR
// result := CreateHuman ;
6391: LD_ADDR_VAR 0 1
6395: PUSH
6396: CALL_OW 44
6400: ST_TO_ADDR
// end ;
6401: LD_VAR 0 1
6405: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6406: LD_INT 0
6408: PPUSH
6409: PPUSH
6410: PPUSH
// if not ape then
6411: LD_VAR 0 1
6415: NOT
6416: IFFALSE 6420
// exit ;
6418: GO 6545
// side := GetSide ( ape ) ;
6420: LD_ADDR_VAR 0 3
6424: PUSH
6425: LD_VAR 0 1
6429: PPUSH
6430: CALL_OW 255
6434: ST_TO_ADDR
// if not side then
6435: LD_VAR 0 3
6439: NOT
6440: IFFALSE 6494
// begin for i = 1 to apemanPos do
6442: LD_ADDR_VAR 0 4
6446: PUSH
6447: DOUBLE
6448: LD_INT 1
6450: DEC
6451: ST_TO_ADDR
6452: LD_EXP 54
6456: PUSH
6457: FOR_TO
6458: IFFALSE 6492
// if ape in apemanPos [ i ] then
6460: LD_VAR 0 1
6464: PUSH
6465: LD_EXP 54
6469: PUSH
6470: LD_VAR 0 4
6474: ARRAY
6475: IN
6476: IFFALSE 6490
// begin side := i ;
6478: LD_ADDR_VAR 0 3
6482: PUSH
6483: LD_VAR 0 4
6487: ST_TO_ADDR
// break ;
6488: GO 6492
// end ;
6490: GO 6457
6492: POP
6493: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6494: LD_ADDR_EXP 54
6498: PUSH
6499: LD_EXP 54
6503: PPUSH
6504: LD_VAR 0 3
6508: PPUSH
6509: LD_EXP 54
6513: PUSH
6514: LD_VAR 0 3
6518: ARRAY
6519: PUSH
6520: LD_VAR 0 1
6524: DIFF
6525: PPUSH
6526: CALL_OW 1
6530: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6531: LD_ADDR_EXP 51
6535: PUSH
6536: LD_EXP 51
6540: PUSH
6541: LD_INT 1
6543: MINUS
6544: ST_TO_ADDR
// end ; end_of_file
6545: LD_VAR 0 2
6549: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6550: LD_VAR 0 1
6554: PPUSH
6555: CALL_OW 266
6559: PUSH
6560: LD_INT 0
6562: PUSH
6563: LD_INT 1
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: IN
6570: IFFALSE 6595
// SetBName ( b , @ & GetSide ( b ) ) ;
6572: LD_VAR 0 1
6576: PPUSH
6577: LD_STRING @
6579: PUSH
6580: LD_VAR 0 1
6584: PPUSH
6585: CALL_OW 255
6589: STR
6590: PPUSH
6591: CALL_OW 500
// end ;
6595: PPOPN 2
6597: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6598: LD_VAR 0 1
6602: PPUSH
6603: CALL_OW 266
6607: PUSH
6608: LD_INT 0
6610: PUSH
6611: LD_INT 1
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: IN
6618: IFFALSE 6643
// SetBName ( b , @ & GetSide ( b ) ) ;
6620: LD_VAR 0 1
6624: PPUSH
6625: LD_STRING @
6627: PUSH
6628: LD_VAR 0 1
6632: PPUSH
6633: CALL_OW 255
6637: STR
6638: PPUSH
6639: CALL_OW 500
// end ;
6643: PPOPN 3
6645: END
// on VehicleConstructed ( veh , fac ) do var side ;
6646: LD_INT 0
6648: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6649: LD_VAR 0 1
6653: PPUSH
6654: CALL_OW 263
6658: PUSH
6659: LD_INT 5
6661: EQUAL
6662: IFFALSE 6804
// begin side := GetSide ( veh ) ;
6664: LD_ADDR_VAR 0 3
6668: PUSH
6669: LD_VAR 0 1
6673: PPUSH
6674: CALL_OW 255
6678: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6679: LD_ADDR_EXP 54
6683: PUSH
6684: LD_EXP 54
6688: PPUSH
6689: LD_VAR 0 3
6693: PPUSH
6694: LD_EXP 54
6698: PUSH
6699: LD_VAR 0 3
6703: ARRAY
6704: PPUSH
6705: LD_INT 52
6707: PUSH
6708: EMPTY
6709: LIST
6710: PPUSH
6711: CALL_OW 72
6715: PUSH
6716: LD_INT 22
6718: PUSH
6719: LD_VAR 0 3
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 2
6730: PUSH
6731: LD_INT 33
6733: PUSH
6734: LD_INT 5
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 25
6743: PUSH
6744: LD_INT 12
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 25
6753: PUSH
6754: LD_INT 15
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 25
6763: PUSH
6764: LD_INT 16
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 25
6773: PUSH
6774: LD_INT 17
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PPUSH
6793: CALL_OW 69
6797: UNION
6798: PPUSH
6799: CALL_OW 1
6803: ST_TO_ADDR
// end ; end ;
6804: PPOPN 3
6806: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6807: LD_INT 0
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 257
6822: PUSH
6823: LD_INT 12
6825: PUSH
6826: LD_INT 15
6828: PUSH
6829: LD_INT 17
6831: PUSH
6832: LD_INT 16
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: IN
6841: PUSH
6842: LD_VAR 0 1
6846: PPUSH
6847: CALL_OW 263
6851: PUSH
6852: LD_INT 5
6854: EQUAL
6855: OR
6856: IFFALSE 6867
// ApeKilled ( j ) ;
6858: LD_VAR 0 1
6862: PPUSH
6863: CALL 6406 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6867: LD_VAR 0 1
6871: PPUSH
6872: CALL_OW 266
6876: PUSH
6877: LD_INT 0
6879: PUSH
6880: LD_INT 1
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: IN
6887: IFFALSE 6969
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6889: LD_ADDR_VAR 0 4
6893: PUSH
6894: LD_EXP 39
6898: PUSH
6899: LD_VAR 0 1
6903: PPUSH
6904: CALL_OW 255
6908: ARRAY
6909: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: LD_EXP 44
6919: PUSH
6920: LD_VAR 0 4
6924: ARRAY
6925: PUSH
6926: LD_INT 1
6928: ARRAY
6929: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6930: LD_ADDR_VAR 0 3
6934: PUSH
6935: LD_EXP 44
6939: PUSH
6940: LD_VAR 0 4
6944: ARRAY
6945: PUSH
6946: LD_INT 2
6948: ARRAY
6949: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6950: LD_VAR 0 2
6954: PPUSH
6955: LD_VAR 0 3
6959: PPUSH
6960: CALL_OW 420
6964: PPUSH
6965: CALL_OW 419
// end ; end ;
6969: PPOPN 5
6971: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6972: LD_VAR 0 1
6976: PPUSH
6977: LD_VAR 0 2
6981: PPUSH
6982: LD_VAR 0 3
6986: PPUSH
6987: LD_OWVAR 2
6991: PPUSH
6992: CALL 7374 0 4
6996: PPOPN 3
6998: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
6999: LD_INT 0
7001: PPUSH
7002: PPUSH
// for un in battle_flags_id do
7003: LD_ADDR_VAR 0 2
7007: PUSH
7008: LD_EXP 49
7012: PUSH
7013: FOR_IN
7014: IFFALSE 7089
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7016: LD_VAR 0 2
7020: PPUSH
7021: LD_INT 1
7023: PUSH
7024: LD_LOC 9
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: LD_LOC 9
7040: PUSH
7041: LD_INT 2
7043: DIV
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: LD_LOC 9
7056: PUSH
7057: LD_INT 5
7059: DIV
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PUSH
7065: LD_INT 20
7067: PUSH
7068: LD_LOC 9
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PPUSH
7083: CALL_OW 423
7087: GO 7013
7089: POP
7090: POP
// end ;
7091: LD_VAR 0 1
7095: RET
// every 1 do var un ;
7096: GO 7098
7098: DISABLE
7099: LD_INT 0
7101: PPUSH
// begin if not def_morale_flags then
7102: LD_EXP 9
7106: NOT
7107: IFFALSE 7111
// exit ;
7109: GO 7188
// if not morale_decreasing_time then
7111: LD_EXP 26
7115: NOT
7116: IFFALSE 7120
// exit ;
7118: GO 7188
// strength = 100 ;
7120: LD_ADDR_LOC 9
7124: PUSH
7125: LD_INT 100
7127: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7128: LD_EXP 26
7132: PPUSH
7133: CALL_OW 67
// strength := strength - 1 ;
7137: LD_ADDR_LOC 9
7141: PUSH
7142: LD_LOC 9
7146: PUSH
7147: LD_INT 1
7149: MINUS
7150: ST_TO_ADDR
// Update_Flags ;
7151: CALL 6999 0 0
// until not strength ;
7155: LD_LOC 9
7159: NOT
7160: IFFALSE 7128
// for un in battle_flags_id do
7162: LD_ADDR_VAR 0 1
7166: PUSH
7167: LD_EXP 49
7171: PUSH
7172: FOR_IN
7173: IFFALSE 7186
// KillBattleFlag ( un ) ;
7175: LD_VAR 0 1
7179: PPUSH
7180: CALL_OW 419
7184: GO 7172
7186: POP
7187: POP
// end ; end_of_file
7188: PPOPN 1
7190: END
// export ExtraStrings , WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7191: LD_INT 0
7193: PPUSH
7194: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7195: LD_ADDR_VAR 0 2
7199: PUSH
7200: LD_STRING #Multi1x1-Time
7202: PUSH
7203: LD_OWVAR 1
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: ST_TO_ADDR
// if WaitServerStrings then
7212: LD_EXP 59
7216: IFFALSE 7234
// AllStrings = AllStrings ^ WaitServerStrings ;
7218: LD_ADDR_VAR 0 2
7222: PUSH
7223: LD_VAR 0 2
7227: PUSH
7228: LD_EXP 59
7232: ADD
7233: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7234: LD_INT 0
7236: PUSH
7237: LD_EXP 33
7241: PUSH
7242: LD_OWVAR 1
7246: MINUS
7247: LESSEQUAL
7248: IFFALSE 7279
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7250: LD_ADDR_VAR 0 2
7254: PUSH
7255: LD_VAR 0 2
7259: PUSH
7260: LD_STRING #allowedsibbomb
7262: PUSH
7263: LD_EXP 33
7267: PUSH
7268: LD_OWVAR 1
7272: MINUS
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: ADD
7278: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7279: LD_INT 0
7281: PUSH
7282: LD_EXP 62
7286: PUSH
7287: LD_OWVAR 1
7291: MINUS
7292: LESSEQUAL
7293: IFFALSE 7324
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7295: LD_ADDR_VAR 0 2
7299: PUSH
7300: LD_VAR 0 2
7304: PUSH
7305: LD_STRING #builduptime
7307: PUSH
7308: LD_EXP 62
7312: PUSH
7313: LD_OWVAR 1
7317: MINUS
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: ADD
7323: ST_TO_ADDR
// if ( ExtraStrings ) then
7324: LD_EXP 58
7328: IFFALSE 7350
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7330: LD_ADDR_VAR 0 2
7334: PUSH
7335: LD_VAR 0 2
7339: PUSH
7340: LD_STRING 
7342: ADD
7343: PUSH
7344: LD_EXP 58
7348: ADD
7349: ST_TO_ADDR
// Display_Strings := AllStrings ;
7350: LD_ADDR_OWVAR 47
7354: PUSH
7355: LD_VAR 0 2
7359: ST_TO_ADDR
// end ;
7360: LD_VAR 0 1
7364: RET
// every 0 0$1 do
7365: GO 7367
7367: DISABLE
// begin ShowTimer ;
7368: CALL 7191 0 0
// enable ;
7372: ENABLE
// end ; end_of_file
7373: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7374: LD_INT 0
7376: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7377: LD_VAR 0 1
7381: PPUSH
7382: CALL_OW 255
7386: PUSH
7387: LD_VAR 0 4
7391: EQUAL
7392: IFFALSE 7411
// begin SetAchievement ( ACH_RAD ) ;
7394: LD_STRING ACH_RAD
7396: PPUSH
7397: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7401: LD_STRING ACH_NL
7403: PPUSH
7404: LD_INT 1
7406: PPUSH
7407: CALL_OW 564
// end end ;
7411: LD_VAR 0 5
7415: RET
// export function SA_Win ( side ) ; begin
7416: LD_INT 0
7418: PPUSH
// case side of 1 :
7419: LD_VAR 0 1
7423: PUSH
7424: LD_INT 1
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7445
7432: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7433: LD_STRING ACH_AH
7435: PPUSH
7436: LD_INT 1
7438: PPUSH
7439: CALL_OW 564
7443: GO 7608
7445: LD_INT 2
7447: DOUBLE
7448: EQUAL
7449: IFTRUE 7453
7451: GO 7466
7453: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7454: LD_STRING ACH_E
7456: PPUSH
7457: LD_INT 1
7459: PPUSH
7460: CALL_OW 564
7464: GO 7608
7466: LD_INT 3
7468: DOUBLE
7469: EQUAL
7470: IFTRUE 7474
7472: GO 7487
7474: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7475: LD_STRING ACH_OOL
7477: PPUSH
7478: LD_INT 1
7480: PPUSH
7481: CALL_OW 564
7485: GO 7608
7487: LD_INT 1
7489: PUSH
7490: LD_INT 2
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: DOUBLE
7497: EQUAL
7498: IFTRUE 7502
7500: GO 7527
7502: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7503: LD_STRING ACH_AH
7505: PPUSH
7506: LD_REAL  5.00000000000000E-0001
7509: PPUSH
7510: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7514: LD_STRING ACH_E
7516: PPUSH
7517: LD_REAL  5.00000000000000E-0001
7520: PPUSH
7521: CALL_OW 564
// end ; [ 2 , 3 ] :
7525: GO 7608
7527: LD_INT 2
7529: PUSH
7530: LD_INT 3
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: DOUBLE
7537: EQUAL
7538: IFTRUE 7542
7540: GO 7567
7542: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7543: LD_STRING ACH_OOL
7545: PPUSH
7546: LD_REAL  5.00000000000000E-0001
7549: PPUSH
7550: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7554: LD_STRING ACH_E
7556: PPUSH
7557: LD_REAL  5.00000000000000E-0001
7560: PPUSH
7561: CALL_OW 564
// end ; [ 3 , 1 ] :
7565: GO 7608
7567: LD_INT 3
7569: PUSH
7570: LD_INT 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: DOUBLE
7577: EQUAL
7578: IFTRUE 7582
7580: GO 7607
7582: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7583: LD_STRING ACH_AH
7585: PPUSH
7586: LD_REAL  5.00000000000000E-0001
7589: PPUSH
7590: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7594: LD_STRING ACH_OOL
7596: PPUSH
7597: LD_REAL  5.00000000000000E-0001
7600: PPUSH
7601: CALL_OW 564
// end ; end ;
7605: GO 7608
7607: POP
// end ; end_of_file
7608: LD_VAR 0 2
7612: RET
// export function SetMpTechs ( ) ; var side , i ; begin
7613: LD_INT 0
7615: PPUSH
7616: PPUSH
7617: PPUSH
// for side = 1 to 8 do
7618: LD_ADDR_VAR 0 2
7622: PUSH
7623: DOUBLE
7624: LD_INT 1
7626: DEC
7627: ST_TO_ADDR
7628: LD_INT 8
7630: PUSH
7631: FOR_TO
7632: IFFALSE 7753
// begin for i = 1 to 72 do
7634: LD_ADDR_VAR 0 3
7638: PUSH
7639: DOUBLE
7640: LD_INT 1
7642: DEC
7643: ST_TO_ADDR
7644: LD_INT 72
7646: PUSH
7647: FOR_TO
7648: IFFALSE 7679
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
7650: LD_VAR 0 3
7654: PPUSH
7655: LD_VAR 0 2
7659: PPUSH
7660: LD_INT 0
7662: PPUSH
7663: LD_VAR 0 3
7667: PPUSH
7668: CALL_OW 565
7672: PPUSH
7673: CALL_OW 322
7677: GO 7647
7679: POP
7680: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
7681: LD_INT 73
7683: PPUSH
7684: LD_VAR 0 2
7688: PPUSH
7689: LD_INT 0
7691: PPUSH
7692: LD_INT 25
7694: PPUSH
7695: CALL_OW 565
7699: PPUSH
7700: CALL_OW 322
// for i = 0 to 40 do
7704: LD_ADDR_VAR 0 3
7708: PUSH
7709: DOUBLE
7710: LD_INT 0
7712: DEC
7713: ST_TO_ADDR
7714: LD_INT 40
7716: PUSH
7717: FOR_TO
7718: IFFALSE 7749
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
7720: LD_VAR 0 3
7724: PPUSH
7725: LD_VAR 0 2
7729: PPUSH
7730: LD_INT 1
7732: PPUSH
7733: LD_VAR 0 3
7737: PPUSH
7738: CALL_OW 565
7742: PPUSH
7743: CALL_OW 324
7747: GO 7717
7749: POP
7750: POP
// end ;
7751: GO 7631
7753: POP
7754: POP
// end ;
7755: LD_VAR 0 1
7759: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
7760: LD_INT 0
7762: PPUSH
7763: PPUSH
7764: PPUSH
// for side = 1 to 8 do
7765: LD_ADDR_VAR 0 3
7769: PUSH
7770: DOUBLE
7771: LD_INT 1
7773: DEC
7774: ST_TO_ADDR
7775: LD_INT 8
7777: PUSH
7778: FOR_TO
7779: IFFALSE 11775
// begin for i = 1 to 73 do
7781: LD_ADDR_VAR 0 4
7785: PUSH
7786: DOUBLE
7787: LD_INT 1
7789: DEC
7790: ST_TO_ADDR
7791: LD_INT 73
7793: PUSH
7794: FOR_TO
7795: IFFALSE 7816
// SetTech ( i , side , state_disabled ) ;
7797: LD_VAR 0 4
7801: PPUSH
7802: LD_VAR 0 3
7806: PPUSH
7807: LD_INT 0
7809: PPUSH
7810: CALL_OW 322
7814: GO 7794
7816: POP
7817: POP
// for i = 0 to 40 do
7818: LD_ADDR_VAR 0 4
7822: PUSH
7823: DOUBLE
7824: LD_INT 0
7826: DEC
7827: ST_TO_ADDR
7828: LD_INT 40
7830: PUSH
7831: FOR_TO
7832: IFFALSE 7853
// SetRestrict ( i , side , false ) ;
7834: LD_VAR 0 4
7838: PPUSH
7839: LD_VAR 0 3
7843: PPUSH
7844: LD_INT 0
7846: PPUSH
7847: CALL_OW 324
7851: GO 7831
7853: POP
7854: POP
// case level of 1 :
7855: LD_VAR 0 1
7859: PUSH
7860: LD_INT 1
7862: DOUBLE
7863: EQUAL
7864: IFTRUE 7868
7866: GO 8021
7868: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
7869: LD_INT 35
7871: PPUSH
7872: LD_VAR 0 3
7876: PPUSH
7877: LD_INT 1
7879: PPUSH
7880: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
7884: LD_INT 45
7886: PPUSH
7887: LD_VAR 0 3
7891: PPUSH
7892: LD_INT 1
7894: PPUSH
7895: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
7899: LD_INT 46
7901: PPUSH
7902: LD_VAR 0 3
7906: PPUSH
7907: LD_INT 1
7909: PPUSH
7910: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
7914: LD_INT 47
7916: PPUSH
7917: LD_VAR 0 3
7921: PPUSH
7922: LD_INT 1
7924: PPUSH
7925: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
7929: LD_INT 0
7931: PPUSH
7932: LD_VAR 0 3
7936: PPUSH
7937: LD_INT 1
7939: PPUSH
7940: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
7944: LD_INT 2
7946: PPUSH
7947: LD_VAR 0 3
7951: PPUSH
7952: LD_INT 1
7954: PPUSH
7955: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
7959: LD_INT 4
7961: PPUSH
7962: LD_VAR 0 3
7966: PPUSH
7967: LD_INT 1
7969: PPUSH
7970: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
7974: LD_INT 6
7976: PPUSH
7977: LD_VAR 0 3
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
7989: LD_INT 29
7991: PPUSH
7992: LD_VAR 0 3
7996: PPUSH
7997: LD_INT 1
7999: PPUSH
8000: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8004: LD_INT 31
8006: PPUSH
8007: LD_VAR 0 3
8011: PPUSH
8012: LD_INT 1
8014: PPUSH
8015: CALL_OW 324
// end ; 2 :
8019: GO 11773
8021: LD_INT 2
8023: DOUBLE
8024: EQUAL
8025: IFTRUE 8029
8027: GO 8227
8029: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8030: LD_INT 35
8032: PPUSH
8033: LD_VAR 0 3
8037: PPUSH
8038: LD_INT 1
8040: PPUSH
8041: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8045: LD_INT 45
8047: PPUSH
8048: LD_VAR 0 3
8052: PPUSH
8053: LD_INT 1
8055: PPUSH
8056: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8060: LD_INT 46
8062: PPUSH
8063: LD_VAR 0 3
8067: PPUSH
8068: LD_INT 1
8070: PPUSH
8071: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8075: LD_INT 47
8077: PPUSH
8078: LD_VAR 0 3
8082: PPUSH
8083: LD_INT 1
8085: PPUSH
8086: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8090: LD_INT 1
8092: PPUSH
8093: LD_VAR 0 3
8097: PPUSH
8098: LD_INT 1
8100: PPUSH
8101: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8105: LD_INT 2
8107: PPUSH
8108: LD_VAR 0 3
8112: PPUSH
8113: LD_INT 1
8115: PPUSH
8116: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8120: LD_INT 11
8122: PPUSH
8123: LD_VAR 0 3
8127: PPUSH
8128: LD_INT 1
8130: PPUSH
8131: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8135: LD_INT 0
8137: PPUSH
8138: LD_VAR 0 3
8142: PPUSH
8143: LD_INT 1
8145: PPUSH
8146: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8150: LD_INT 2
8152: PPUSH
8153: LD_VAR 0 3
8157: PPUSH
8158: LD_INT 1
8160: PPUSH
8161: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8165: LD_INT 4
8167: PPUSH
8168: LD_VAR 0 3
8172: PPUSH
8173: LD_INT 1
8175: PPUSH
8176: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8180: LD_INT 6
8182: PPUSH
8183: LD_VAR 0 3
8187: PPUSH
8188: LD_INT 1
8190: PPUSH
8191: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8195: LD_INT 29
8197: PPUSH
8198: LD_VAR 0 3
8202: PPUSH
8203: LD_INT 1
8205: PPUSH
8206: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8210: LD_INT 31
8212: PPUSH
8213: LD_VAR 0 3
8217: PPUSH
8218: LD_INT 1
8220: PPUSH
8221: CALL_OW 324
// end ; 3 :
8225: GO 11773
8227: LD_INT 3
8229: DOUBLE
8230: EQUAL
8231: IFTRUE 8235
8233: GO 8688
8235: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8236: LD_INT 35
8238: PPUSH
8239: LD_VAR 0 3
8243: PPUSH
8244: LD_INT 1
8246: PPUSH
8247: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8251: LD_INT 45
8253: PPUSH
8254: LD_VAR 0 3
8258: PPUSH
8259: LD_INT 1
8261: PPUSH
8262: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8266: LD_INT 46
8268: PPUSH
8269: LD_VAR 0 3
8273: PPUSH
8274: LD_INT 1
8276: PPUSH
8277: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8281: LD_INT 47
8283: PPUSH
8284: LD_VAR 0 3
8288: PPUSH
8289: LD_INT 1
8291: PPUSH
8292: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8296: LD_INT 1
8298: PPUSH
8299: LD_VAR 0 3
8303: PPUSH
8304: LD_INT 1
8306: PPUSH
8307: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8311: LD_INT 2
8313: PPUSH
8314: LD_VAR 0 3
8318: PPUSH
8319: LD_INT 1
8321: PPUSH
8322: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8326: LD_INT 11
8328: PPUSH
8329: LD_VAR 0 3
8333: PPUSH
8334: LD_INT 1
8336: PPUSH
8337: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8341: LD_INT 48
8343: PPUSH
8344: LD_VAR 0 3
8348: PPUSH
8349: LD_INT 1
8351: PPUSH
8352: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8356: LD_INT 69
8358: PPUSH
8359: LD_VAR 0 3
8363: PPUSH
8364: LD_INT 1
8366: PPUSH
8367: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8371: LD_INT 39
8373: PPUSH
8374: LD_VAR 0 3
8378: PPUSH
8379: LD_INT 1
8381: PPUSH
8382: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8386: LD_INT 43
8388: PPUSH
8389: LD_VAR 0 3
8393: PPUSH
8394: LD_INT 1
8396: PPUSH
8397: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8401: LD_INT 51
8403: PPUSH
8404: LD_VAR 0 3
8408: PPUSH
8409: LD_INT 1
8411: PPUSH
8412: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
8416: LD_INT 6
8418: PPUSH
8419: LD_VAR 0 3
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8431: LD_INT 0
8433: PPUSH
8434: LD_VAR 0 3
8438: PPUSH
8439: LD_INT 1
8441: PPUSH
8442: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8446: LD_INT 2
8448: PPUSH
8449: LD_VAR 0 3
8453: PPUSH
8454: LD_INT 1
8456: PPUSH
8457: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
8461: LD_INT 3
8463: PPUSH
8464: LD_VAR 0 3
8468: PPUSH
8469: LD_INT 1
8471: PPUSH
8472: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8476: LD_INT 4
8478: PPUSH
8479: LD_VAR 0 3
8483: PPUSH
8484: LD_INT 1
8486: PPUSH
8487: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8491: LD_INT 6
8493: PPUSH
8494: LD_VAR 0 3
8498: PPUSH
8499: LD_INT 1
8501: PPUSH
8502: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
8506: LD_INT 7
8508: PPUSH
8509: LD_VAR 0 3
8513: PPUSH
8514: LD_INT 1
8516: PPUSH
8517: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
8521: LD_INT 8
8523: PPUSH
8524: LD_VAR 0 3
8528: PPUSH
8529: LD_INT 1
8531: PPUSH
8532: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
8536: LD_INT 10
8538: PPUSH
8539: LD_VAR 0 3
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
8551: LD_INT 15
8553: PPUSH
8554: LD_VAR 0 3
8558: PPUSH
8559: LD_INT 1
8561: PPUSH
8562: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
8566: LD_INT 16
8568: PPUSH
8569: LD_VAR 0 3
8573: PPUSH
8574: LD_INT 1
8576: PPUSH
8577: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
8581: LD_INT 17
8583: PPUSH
8584: LD_VAR 0 3
8588: PPUSH
8589: LD_INT 1
8591: PPUSH
8592: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
8596: LD_INT 20
8598: PPUSH
8599: LD_VAR 0 3
8603: PPUSH
8604: LD_INT 1
8606: PPUSH
8607: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
8611: LD_INT 26
8613: PPUSH
8614: LD_VAR 0 3
8618: PPUSH
8619: LD_INT 1
8621: PPUSH
8622: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
8626: LD_INT 27
8628: PPUSH
8629: LD_VAR 0 3
8633: PPUSH
8634: LD_INT 1
8636: PPUSH
8637: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8641: LD_INT 29
8643: PPUSH
8644: LD_VAR 0 3
8648: PPUSH
8649: LD_INT 1
8651: PPUSH
8652: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8656: LD_INT 31
8658: PPUSH
8659: LD_VAR 0 3
8663: PPUSH
8664: LD_INT 1
8666: PPUSH
8667: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
8671: LD_INT 32
8673: PPUSH
8674: LD_VAR 0 3
8678: PPUSH
8679: LD_INT 1
8681: PPUSH
8682: CALL_OW 324
// end ; 4 :
8686: GO 11773
8688: LD_INT 4
8690: DOUBLE
8691: EQUAL
8692: IFTRUE 8696
8694: GO 9644
8696: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8697: LD_INT 35
8699: PPUSH
8700: LD_VAR 0 3
8704: PPUSH
8705: LD_INT 1
8707: PPUSH
8708: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8712: LD_INT 45
8714: PPUSH
8715: LD_VAR 0 3
8719: PPUSH
8720: LD_INT 1
8722: PPUSH
8723: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8727: LD_INT 46
8729: PPUSH
8730: LD_VAR 0 3
8734: PPUSH
8735: LD_INT 1
8737: PPUSH
8738: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8742: LD_INT 47
8744: PPUSH
8745: LD_VAR 0 3
8749: PPUSH
8750: LD_INT 1
8752: PPUSH
8753: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8757: LD_INT 1
8759: PPUSH
8760: LD_VAR 0 3
8764: PPUSH
8765: LD_INT 1
8767: PPUSH
8768: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8772: LD_INT 2
8774: PPUSH
8775: LD_VAR 0 3
8779: PPUSH
8780: LD_INT 1
8782: PPUSH
8783: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8787: LD_INT 11
8789: PPUSH
8790: LD_VAR 0 3
8794: PPUSH
8795: LD_INT 1
8797: PPUSH
8798: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
8802: LD_INT 20
8804: PPUSH
8805: LD_VAR 0 3
8809: PPUSH
8810: LD_INT 1
8812: PPUSH
8813: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8817: LD_INT 48
8819: PPUSH
8820: LD_VAR 0 3
8824: PPUSH
8825: LD_INT 1
8827: PPUSH
8828: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
8832: LD_INT 49
8834: PPUSH
8835: LD_VAR 0 3
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8847: LD_INT 69
8849: PPUSH
8850: LD_VAR 0 3
8854: PPUSH
8855: LD_INT 1
8857: PPUSH
8858: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8862: LD_INT 39
8864: PPUSH
8865: LD_VAR 0 3
8869: PPUSH
8870: LD_INT 1
8872: PPUSH
8873: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
8877: LD_INT 34
8879: PPUSH
8880: LD_VAR 0 3
8884: PPUSH
8885: LD_INT 1
8887: PPUSH
8888: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
8892: LD_INT 42
8894: PPUSH
8895: LD_VAR 0 3
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
8907: LD_INT 44
8909: PPUSH
8910: LD_VAR 0 3
8914: PPUSH
8915: LD_INT 1
8917: PPUSH
8918: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
8922: LD_INT 41
8924: PPUSH
8925: LD_VAR 0 3
8929: PPUSH
8930: LD_INT 1
8932: PPUSH
8933: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8937: LD_INT 43
8939: PPUSH
8940: LD_VAR 0 3
8944: PPUSH
8945: LD_INT 1
8947: PPUSH
8948: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
8952: LD_INT 70
8954: PPUSH
8955: LD_VAR 0 3
8959: PPUSH
8960: LD_INT 1
8962: PPUSH
8963: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8967: LD_INT 51
8969: PPUSH
8970: LD_VAR 0 3
8974: PPUSH
8975: LD_INT 1
8977: PPUSH
8978: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
8982: LD_INT 52
8984: PPUSH
8985: LD_VAR 0 3
8989: PPUSH
8990: LD_INT 1
8992: PPUSH
8993: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
8997: LD_INT 6
8999: PPUSH
9000: LD_VAR 0 3
9004: PPUSH
9005: LD_INT 1
9007: PPUSH
9008: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9012: LD_INT 15
9014: PPUSH
9015: LD_VAR 0 3
9019: PPUSH
9020: LD_INT 1
9022: PPUSH
9023: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9027: LD_INT 7
9029: PPUSH
9030: LD_VAR 0 3
9034: PPUSH
9035: LD_INT 1
9037: PPUSH
9038: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9042: LD_INT 12
9044: PPUSH
9045: LD_VAR 0 3
9049: PPUSH
9050: LD_INT 1
9052: PPUSH
9053: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9057: LD_INT 18
9059: PPUSH
9060: LD_VAR 0 3
9064: PPUSH
9065: LD_INT 1
9067: PPUSH
9068: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9072: LD_INT 60
9074: PPUSH
9075: LD_VAR 0 3
9079: PPUSH
9080: LD_INT 1
9082: PPUSH
9083: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9087: LD_INT 9
9089: PPUSH
9090: LD_VAR 0 3
9094: PPUSH
9095: LD_INT 1
9097: PPUSH
9098: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9102: LD_INT 30
9104: PPUSH
9105: LD_VAR 0 3
9109: PPUSH
9110: LD_INT 1
9112: PPUSH
9113: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9117: LD_INT 37
9119: PPUSH
9120: LD_VAR 0 3
9124: PPUSH
9125: LD_INT 1
9127: PPUSH
9128: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9132: LD_INT 5
9134: PPUSH
9135: LD_VAR 0 3
9139: PPUSH
9140: LD_INT 1
9142: PPUSH
9143: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9147: LD_INT 66
9149: PPUSH
9150: LD_VAR 0 3
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9162: LD_INT 21
9164: PPUSH
9165: LD_VAR 0 3
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9177: LD_INT 22
9179: PPUSH
9180: LD_VAR 0 3
9184: PPUSH
9185: LD_INT 1
9187: PPUSH
9188: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9192: LD_INT 54
9194: PPUSH
9195: LD_VAR 0 3
9199: PPUSH
9200: LD_INT 1
9202: PPUSH
9203: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9207: LD_INT 0
9209: PPUSH
9210: LD_VAR 0 3
9214: PPUSH
9215: LD_INT 1
9217: PPUSH
9218: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9222: LD_INT 1
9224: PPUSH
9225: LD_VAR 0 3
9229: PPUSH
9230: LD_INT 1
9232: PPUSH
9233: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9237: LD_INT 2
9239: PPUSH
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_INT 1
9247: PPUSH
9248: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9252: LD_INT 3
9254: PPUSH
9255: LD_VAR 0 3
9259: PPUSH
9260: LD_INT 1
9262: PPUSH
9263: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9267: LD_INT 4
9269: PPUSH
9270: LD_VAR 0 3
9274: PPUSH
9275: LD_INT 1
9277: PPUSH
9278: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
9282: LD_INT 5
9284: PPUSH
9285: LD_VAR 0 3
9289: PPUSH
9290: LD_INT 1
9292: PPUSH
9293: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9297: LD_INT 6
9299: PPUSH
9300: LD_VAR 0 3
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9312: LD_INT 7
9314: PPUSH
9315: LD_VAR 0 3
9319: PPUSH
9320: LD_INT 1
9322: PPUSH
9323: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9327: LD_INT 8
9329: PPUSH
9330: LD_VAR 0 3
9334: PPUSH
9335: LD_INT 1
9337: PPUSH
9338: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9342: LD_INT 10
9344: PPUSH
9345: LD_VAR 0 3
9349: PPUSH
9350: LD_INT 1
9352: PPUSH
9353: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
9357: LD_INT 11
9359: PPUSH
9360: LD_VAR 0 3
9364: PPUSH
9365: LD_INT 1
9367: PPUSH
9368: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
9372: LD_INT 12
9374: PPUSH
9375: LD_VAR 0 3
9379: PPUSH
9380: LD_INT 1
9382: PPUSH
9383: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
9387: LD_INT 13
9389: PPUSH
9390: LD_VAR 0 3
9394: PPUSH
9395: LD_INT 1
9397: PPUSH
9398: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
9402: LD_INT 14
9404: PPUSH
9405: LD_VAR 0 3
9409: PPUSH
9410: LD_INT 1
9412: PPUSH
9413: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9417: LD_INT 15
9419: PPUSH
9420: LD_VAR 0 3
9424: PPUSH
9425: LD_INT 1
9427: PPUSH
9428: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9432: LD_INT 16
9434: PPUSH
9435: LD_VAR 0 3
9439: PPUSH
9440: LD_INT 1
9442: PPUSH
9443: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9447: LD_INT 17
9449: PPUSH
9450: LD_VAR 0 3
9454: PPUSH
9455: LD_INT 1
9457: PPUSH
9458: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
9462: LD_INT 19
9464: PPUSH
9465: LD_VAR 0 3
9469: PPUSH
9470: LD_INT 1
9472: PPUSH
9473: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9477: LD_INT 20
9479: PPUSH
9480: LD_VAR 0 3
9484: PPUSH
9485: LD_INT 1
9487: PPUSH
9488: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
9492: LD_INT 21
9494: PPUSH
9495: LD_VAR 0 3
9499: PPUSH
9500: LD_INT 1
9502: PPUSH
9503: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
9507: LD_INT 23
9509: PPUSH
9510: LD_VAR 0 3
9514: PPUSH
9515: LD_INT 1
9517: PPUSH
9518: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9522: LD_INT 26
9524: PPUSH
9525: LD_VAR 0 3
9529: PPUSH
9530: LD_INT 1
9532: PPUSH
9533: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9537: LD_INT 27
9539: PPUSH
9540: LD_VAR 0 3
9544: PPUSH
9545: LD_INT 1
9547: PPUSH
9548: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
9552: LD_INT 28
9554: PPUSH
9555: LD_VAR 0 3
9559: PPUSH
9560: LD_INT 1
9562: PPUSH
9563: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9567: LD_INT 29
9569: PPUSH
9570: LD_VAR 0 3
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
9582: LD_INT 30
9584: PPUSH
9585: LD_VAR 0 3
9589: PPUSH
9590: LD_INT 1
9592: PPUSH
9593: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9597: LD_INT 31
9599: PPUSH
9600: LD_VAR 0 3
9604: PPUSH
9605: LD_INT 1
9607: PPUSH
9608: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9612: LD_INT 32
9614: PPUSH
9615: LD_VAR 0 3
9619: PPUSH
9620: LD_INT 1
9622: PPUSH
9623: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
9627: LD_INT 36
9629: PPUSH
9630: LD_VAR 0 3
9634: PPUSH
9635: LD_INT 1
9637: PPUSH
9638: CALL_OW 324
// end ; 5 :
9642: GO 11773
9644: LD_INT 5
9646: DOUBLE
9647: EQUAL
9648: IFTRUE 9652
9650: GO 10765
9652: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9653: LD_INT 35
9655: PPUSH
9656: LD_VAR 0 3
9660: PPUSH
9661: LD_INT 1
9663: PPUSH
9664: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9668: LD_INT 45
9670: PPUSH
9671: LD_VAR 0 3
9675: PPUSH
9676: LD_INT 1
9678: PPUSH
9679: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9683: LD_INT 46
9685: PPUSH
9686: LD_VAR 0 3
9690: PPUSH
9691: LD_INT 1
9693: PPUSH
9694: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9698: LD_INT 47
9700: PPUSH
9701: LD_VAR 0 3
9705: PPUSH
9706: LD_INT 1
9708: PPUSH
9709: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9713: LD_INT 1
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: LD_INT 1
9723: PPUSH
9724: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9728: LD_INT 2
9730: PPUSH
9731: LD_VAR 0 3
9735: PPUSH
9736: LD_INT 1
9738: PPUSH
9739: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9743: LD_INT 11
9745: PPUSH
9746: LD_VAR 0 3
9750: PPUSH
9751: LD_INT 1
9753: PPUSH
9754: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9758: LD_INT 20
9760: PPUSH
9761: LD_VAR 0 3
9765: PPUSH
9766: LD_INT 1
9768: PPUSH
9769: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9773: LD_INT 48
9775: PPUSH
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_INT 1
9783: PPUSH
9784: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9788: LD_INT 49
9790: PPUSH
9791: LD_VAR 0 3
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9803: LD_INT 69
9805: PPUSH
9806: LD_VAR 0 3
9810: PPUSH
9811: LD_INT 1
9813: PPUSH
9814: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9818: LD_INT 39
9820: PPUSH
9821: LD_VAR 0 3
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9833: LD_INT 34
9835: PPUSH
9836: LD_VAR 0 3
9840: PPUSH
9841: LD_INT 1
9843: PPUSH
9844: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9848: LD_INT 42
9850: PPUSH
9851: LD_VAR 0 3
9855: PPUSH
9856: LD_INT 1
9858: PPUSH
9859: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9863: LD_INT 44
9865: PPUSH
9866: LD_VAR 0 3
9870: PPUSH
9871: LD_INT 1
9873: PPUSH
9874: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9878: LD_INT 41
9880: PPUSH
9881: LD_VAR 0 3
9885: PPUSH
9886: LD_INT 1
9888: PPUSH
9889: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
9893: LD_INT 40
9895: PPUSH
9896: LD_VAR 0 3
9900: PPUSH
9901: LD_INT 1
9903: PPUSH
9904: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9908: LD_INT 43
9910: PPUSH
9911: LD_VAR 0 3
9915: PPUSH
9916: LD_INT 1
9918: PPUSH
9919: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9923: LD_INT 70
9925: PPUSH
9926: LD_VAR 0 3
9930: PPUSH
9931: LD_INT 1
9933: PPUSH
9934: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9938: LD_INT 51
9940: PPUSH
9941: LD_VAR 0 3
9945: PPUSH
9946: LD_INT 1
9948: PPUSH
9949: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9953: LD_INT 52
9955: PPUSH
9956: LD_VAR 0 3
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9968: LD_INT 6
9970: PPUSH
9971: LD_VAR 0 3
9975: PPUSH
9976: LD_INT 1
9978: PPUSH
9979: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9983: LD_INT 15
9985: PPUSH
9986: LD_VAR 0 3
9990: PPUSH
9991: LD_INT 1
9993: PPUSH
9994: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9998: LD_INT 7
10000: PPUSH
10001: LD_VAR 0 3
10005: PPUSH
10006: LD_INT 1
10008: PPUSH
10009: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10013: LD_INT 12
10015: PPUSH
10016: LD_VAR 0 3
10020: PPUSH
10021: LD_INT 1
10023: PPUSH
10024: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10028: LD_INT 17
10030: PPUSH
10031: LD_VAR 0 3
10035: PPUSH
10036: LD_INT 1
10038: PPUSH
10039: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10043: LD_INT 18
10045: PPUSH
10046: LD_VAR 0 3
10050: PPUSH
10051: LD_INT 1
10053: PPUSH
10054: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10058: LD_INT 60
10060: PPUSH
10061: LD_VAR 0 3
10065: PPUSH
10066: LD_INT 1
10068: PPUSH
10069: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10073: LD_INT 32
10075: PPUSH
10076: LD_VAR 0 3
10080: PPUSH
10081: LD_INT 1
10083: PPUSH
10084: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10088: LD_INT 9
10090: PPUSH
10091: LD_VAR 0 3
10095: PPUSH
10096: LD_INT 1
10098: PPUSH
10099: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10103: LD_INT 57
10105: PPUSH
10106: LD_VAR 0 3
10110: PPUSH
10111: LD_INT 1
10113: PPUSH
10114: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10118: LD_INT 30
10120: PPUSH
10121: LD_VAR 0 3
10125: PPUSH
10126: LD_INT 1
10128: PPUSH
10129: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10133: LD_INT 37
10135: PPUSH
10136: LD_VAR 0 3
10140: PPUSH
10141: LD_INT 1
10143: PPUSH
10144: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10148: LD_INT 63
10150: PPUSH
10151: LD_VAR 0 3
10155: PPUSH
10156: LD_INT 1
10158: PPUSH
10159: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10163: LD_INT 3
10165: PPUSH
10166: LD_VAR 0 3
10170: PPUSH
10171: LD_INT 1
10173: PPUSH
10174: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10178: LD_INT 4
10180: PPUSH
10181: LD_VAR 0 3
10185: PPUSH
10186: LD_INT 1
10188: PPUSH
10189: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10193: LD_INT 5
10195: PPUSH
10196: LD_VAR 0 3
10200: PPUSH
10201: LD_INT 1
10203: PPUSH
10204: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10208: LD_INT 66
10210: PPUSH
10211: LD_VAR 0 3
10215: PPUSH
10216: LD_INT 1
10218: PPUSH
10219: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10223: LD_INT 21
10225: PPUSH
10226: LD_VAR 0 3
10230: PPUSH
10231: LD_INT 1
10233: PPUSH
10234: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10238: LD_INT 22
10240: PPUSH
10241: LD_VAR 0 3
10245: PPUSH
10246: LD_INT 1
10248: PPUSH
10249: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10253: LD_INT 19
10255: PPUSH
10256: LD_VAR 0 3
10260: PPUSH
10261: LD_INT 1
10263: PPUSH
10264: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10268: LD_INT 54
10270: PPUSH
10271: LD_VAR 0 3
10275: PPUSH
10276: LD_INT 1
10278: PPUSH
10279: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
10283: LD_INT 55
10285: PPUSH
10286: LD_VAR 0 3
10290: PPUSH
10291: LD_INT 1
10293: PPUSH
10294: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10298: LD_INT 0
10300: PPUSH
10301: LD_VAR 0 3
10305: PPUSH
10306: LD_INT 1
10308: PPUSH
10309: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10313: LD_INT 1
10315: PPUSH
10316: LD_VAR 0 3
10320: PPUSH
10321: LD_INT 1
10323: PPUSH
10324: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10328: LD_INT 2
10330: PPUSH
10331: LD_VAR 0 3
10335: PPUSH
10336: LD_INT 1
10338: PPUSH
10339: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10343: LD_INT 3
10345: PPUSH
10346: LD_VAR 0 3
10350: PPUSH
10351: LD_INT 1
10353: PPUSH
10354: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10358: LD_INT 4
10360: PPUSH
10361: LD_VAR 0 3
10365: PPUSH
10366: LD_INT 1
10368: PPUSH
10369: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10373: LD_INT 5
10375: PPUSH
10376: LD_VAR 0 3
10380: PPUSH
10381: LD_INT 1
10383: PPUSH
10384: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10388: LD_INT 6
10390: PPUSH
10391: LD_VAR 0 3
10395: PPUSH
10396: LD_INT 1
10398: PPUSH
10399: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10403: LD_INT 7
10405: PPUSH
10406: LD_VAR 0 3
10410: PPUSH
10411: LD_INT 1
10413: PPUSH
10414: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10418: LD_INT 8
10420: PPUSH
10421: LD_VAR 0 3
10425: PPUSH
10426: LD_INT 1
10428: PPUSH
10429: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10433: LD_INT 10
10435: PPUSH
10436: LD_VAR 0 3
10440: PPUSH
10441: LD_INT 1
10443: PPUSH
10444: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10448: LD_INT 11
10450: PPUSH
10451: LD_VAR 0 3
10455: PPUSH
10456: LD_INT 1
10458: PPUSH
10459: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10463: LD_INT 12
10465: PPUSH
10466: LD_VAR 0 3
10470: PPUSH
10471: LD_INT 1
10473: PPUSH
10474: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10478: LD_INT 13
10480: PPUSH
10481: LD_VAR 0 3
10485: PPUSH
10486: LD_INT 1
10488: PPUSH
10489: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10493: LD_INT 14
10495: PPUSH
10496: LD_VAR 0 3
10500: PPUSH
10501: LD_INT 1
10503: PPUSH
10504: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10508: LD_INT 15
10510: PPUSH
10511: LD_VAR 0 3
10515: PPUSH
10516: LD_INT 1
10518: PPUSH
10519: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10523: LD_INT 16
10525: PPUSH
10526: LD_VAR 0 3
10530: PPUSH
10531: LD_INT 1
10533: PPUSH
10534: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10538: LD_INT 17
10540: PPUSH
10541: LD_VAR 0 3
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
10553: LD_INT 18
10555: PPUSH
10556: LD_VAR 0 3
10560: PPUSH
10561: LD_INT 1
10563: PPUSH
10564: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10568: LD_INT 19
10570: PPUSH
10571: LD_VAR 0 3
10575: PPUSH
10576: LD_INT 1
10578: PPUSH
10579: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10583: LD_INT 20
10585: PPUSH
10586: LD_VAR 0 3
10590: PPUSH
10591: LD_INT 1
10593: PPUSH
10594: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10598: LD_INT 21
10600: PPUSH
10601: LD_VAR 0 3
10605: PPUSH
10606: LD_INT 1
10608: PPUSH
10609: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10613: LD_INT 23
10615: PPUSH
10616: LD_VAR 0 3
10620: PPUSH
10621: LD_INT 1
10623: PPUSH
10624: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10628: LD_INT 26
10630: PPUSH
10631: LD_VAR 0 3
10635: PPUSH
10636: LD_INT 1
10638: PPUSH
10639: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10643: LD_INT 27
10645: PPUSH
10646: LD_VAR 0 3
10650: PPUSH
10651: LD_INT 1
10653: PPUSH
10654: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10658: LD_INT 28
10660: PPUSH
10661: LD_VAR 0 3
10665: PPUSH
10666: LD_INT 1
10668: PPUSH
10669: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10673: LD_INT 29
10675: PPUSH
10676: LD_VAR 0 3
10680: PPUSH
10681: LD_INT 1
10683: PPUSH
10684: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10688: LD_INT 30
10690: PPUSH
10691: LD_VAR 0 3
10695: PPUSH
10696: LD_INT 1
10698: PPUSH
10699: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10703: LD_INT 31
10705: PPUSH
10706: LD_VAR 0 3
10710: PPUSH
10711: LD_INT 1
10713: PPUSH
10714: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10718: LD_INT 32
10720: PPUSH
10721: LD_VAR 0 3
10725: PPUSH
10726: LD_INT 1
10728: PPUSH
10729: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
10733: LD_INT 33
10735: PPUSH
10736: LD_VAR 0 3
10740: PPUSH
10741: LD_INT 1
10743: PPUSH
10744: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10748: LD_INT 36
10750: PPUSH
10751: LD_VAR 0 3
10755: PPUSH
10756: LD_INT 1
10758: PPUSH
10759: CALL_OW 324
// end ; 6 :
10763: GO 11773
10765: LD_INT 6
10767: DOUBLE
10768: EQUAL
10769: IFTRUE 10773
10771: GO 11698
10773: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10774: LD_INT 35
10776: PPUSH
10777: LD_VAR 0 3
10781: PPUSH
10782: LD_INT 1
10784: PPUSH
10785: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10789: LD_INT 45
10791: PPUSH
10792: LD_VAR 0 3
10796: PPUSH
10797: LD_INT 1
10799: PPUSH
10800: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10804: LD_INT 46
10806: PPUSH
10807: LD_VAR 0 3
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10819: LD_INT 47
10821: PPUSH
10822: LD_VAR 0 3
10826: PPUSH
10827: LD_INT 1
10829: PPUSH
10830: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10834: LD_INT 1
10836: PPUSH
10837: LD_VAR 0 3
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10849: LD_INT 2
10851: PPUSH
10852: LD_VAR 0 3
10856: PPUSH
10857: LD_INT 1
10859: PPUSH
10860: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10864: LD_INT 11
10866: PPUSH
10867: LD_VAR 0 3
10871: PPUSH
10872: LD_INT 1
10874: PPUSH
10875: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10879: LD_INT 20
10881: PPUSH
10882: LD_VAR 0 3
10886: PPUSH
10887: LD_INT 1
10889: PPUSH
10890: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10894: LD_INT 48
10896: PPUSH
10897: LD_VAR 0 3
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10909: LD_INT 49
10911: PPUSH
10912: LD_VAR 0 3
10916: PPUSH
10917: LD_INT 1
10919: PPUSH
10920: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
10924: LD_INT 50
10926: PPUSH
10927: LD_VAR 0 3
10931: PPUSH
10932: LD_INT 1
10934: PPUSH
10935: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10939: LD_INT 69
10941: PPUSH
10942: LD_VAR 0 3
10946: PPUSH
10947: LD_INT 1
10949: PPUSH
10950: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10954: LD_INT 39
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: LD_INT 1
10964: PPUSH
10965: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10969: LD_INT 34
10971: PPUSH
10972: LD_VAR 0 3
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10984: LD_INT 42
10986: PPUSH
10987: LD_VAR 0 3
10991: PPUSH
10992: LD_INT 1
10994: PPUSH
10995: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10999: LD_INT 44
11001: PPUSH
11002: LD_VAR 0 3
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11014: LD_INT 41
11016: PPUSH
11017: LD_VAR 0 3
11021: PPUSH
11022: LD_INT 1
11024: PPUSH
11025: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11029: LD_INT 13
11031: PPUSH
11032: LD_VAR 0 3
11036: PPUSH
11037: LD_INT 1
11039: PPUSH
11040: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11044: LD_INT 40
11046: PPUSH
11047: LD_VAR 0 3
11051: PPUSH
11052: LD_INT 1
11054: PPUSH
11055: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11059: LD_INT 43
11061: PPUSH
11062: LD_VAR 0 3
11066: PPUSH
11067: LD_INT 1
11069: PPUSH
11070: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11074: LD_INT 70
11076: PPUSH
11077: LD_VAR 0 3
11081: PPUSH
11082: LD_INT 1
11084: PPUSH
11085: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11089: LD_INT 23
11091: PPUSH
11092: LD_VAR 0 3
11096: PPUSH
11097: LD_INT 1
11099: PPUSH
11100: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11104: LD_INT 51
11106: PPUSH
11107: LD_VAR 0 3
11111: PPUSH
11112: LD_INT 1
11114: PPUSH
11115: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11119: LD_INT 52
11121: PPUSH
11122: LD_VAR 0 3
11126: PPUSH
11127: LD_INT 1
11129: PPUSH
11130: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11134: LD_INT 6
11136: PPUSH
11137: LD_VAR 0 3
11141: PPUSH
11142: LD_INT 1
11144: PPUSH
11145: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11149: LD_INT 15
11151: PPUSH
11152: LD_VAR 0 3
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11164: LD_INT 7
11166: PPUSH
11167: LD_VAR 0 3
11171: PPUSH
11172: LD_INT 1
11174: PPUSH
11175: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11179: LD_INT 12
11181: PPUSH
11182: LD_VAR 0 3
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11194: LD_INT 10
11196: PPUSH
11197: LD_VAR 0 3
11201: PPUSH
11202: LD_INT 1
11204: PPUSH
11205: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11209: LD_INT 17
11211: PPUSH
11212: LD_VAR 0 3
11216: PPUSH
11217: LD_INT 1
11219: PPUSH
11220: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11224: LD_INT 18
11226: PPUSH
11227: LD_VAR 0 3
11231: PPUSH
11232: LD_INT 1
11234: PPUSH
11235: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11239: LD_INT 60
11241: PPUSH
11242: LD_VAR 0 3
11246: PPUSH
11247: LD_INT 1
11249: PPUSH
11250: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11254: LD_INT 61
11256: PPUSH
11257: LD_VAR 0 3
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11269: LD_INT 32
11271: PPUSH
11272: LD_VAR 0 3
11276: PPUSH
11277: LD_INT 1
11279: PPUSH
11280: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
11284: LD_INT 27
11286: PPUSH
11287: LD_VAR 0 3
11291: PPUSH
11292: LD_INT 1
11294: PPUSH
11295: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
11299: LD_INT 36
11301: PPUSH
11302: LD_VAR 0 3
11306: PPUSH
11307: LD_INT 1
11309: PPUSH
11310: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
11314: LD_INT 33
11316: PPUSH
11317: LD_VAR 0 3
11321: PPUSH
11322: LD_INT 1
11324: PPUSH
11325: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11329: LD_INT 9
11331: PPUSH
11332: LD_VAR 0 3
11336: PPUSH
11337: LD_INT 1
11339: PPUSH
11340: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
11344: LD_INT 38
11346: PPUSH
11347: LD_VAR 0 3
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11359: LD_INT 57
11361: PPUSH
11362: LD_VAR 0 3
11366: PPUSH
11367: LD_INT 1
11369: PPUSH
11370: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
11374: LD_INT 58
11376: PPUSH
11377: LD_VAR 0 3
11381: PPUSH
11382: LD_INT 1
11384: PPUSH
11385: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
11389: LD_INT 28
11391: PPUSH
11392: LD_VAR 0 3
11396: PPUSH
11397: LD_INT 1
11399: PPUSH
11400: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
11404: LD_INT 29
11406: PPUSH
11407: LD_VAR 0 3
11411: PPUSH
11412: LD_INT 1
11414: PPUSH
11415: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11419: LD_INT 30
11421: PPUSH
11422: LD_VAR 0 3
11426: PPUSH
11427: LD_INT 1
11429: PPUSH
11430: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11434: LD_INT 37
11436: PPUSH
11437: LD_VAR 0 3
11441: PPUSH
11442: LD_INT 1
11444: PPUSH
11445: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11449: LD_INT 63
11451: PPUSH
11452: LD_VAR 0 3
11456: PPUSH
11457: LD_INT 1
11459: PPUSH
11460: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
11464: LD_INT 64
11466: PPUSH
11467: LD_VAR 0 3
11471: PPUSH
11472: LD_INT 1
11474: PPUSH
11475: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11479: LD_INT 3
11481: PPUSH
11482: LD_VAR 0 3
11486: PPUSH
11487: LD_INT 1
11489: PPUSH
11490: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11494: LD_INT 4
11496: PPUSH
11497: LD_VAR 0 3
11501: PPUSH
11502: LD_INT 1
11504: PPUSH
11505: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11509: LD_INT 5
11511: PPUSH
11512: LD_VAR 0 3
11516: PPUSH
11517: LD_INT 1
11519: PPUSH
11520: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
11524: LD_INT 8
11526: PPUSH
11527: LD_VAR 0 3
11531: PPUSH
11532: LD_INT 1
11534: PPUSH
11535: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11539: LD_INT 66
11541: PPUSH
11542: LD_VAR 0 3
11546: PPUSH
11547: LD_INT 1
11549: PPUSH
11550: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
11554: LD_INT 67
11556: PPUSH
11557: LD_VAR 0 3
11561: PPUSH
11562: LD_INT 1
11564: PPUSH
11565: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11569: LD_INT 21
11571: PPUSH
11572: LD_VAR 0 3
11576: PPUSH
11577: LD_INT 1
11579: PPUSH
11580: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11584: LD_INT 22
11586: PPUSH
11587: LD_VAR 0 3
11591: PPUSH
11592: LD_INT 1
11594: PPUSH
11595: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11599: LD_INT 19
11601: PPUSH
11602: LD_VAR 0 3
11606: PPUSH
11607: LD_INT 1
11609: PPUSH
11610: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
11614: LD_INT 26
11616: PPUSH
11617: LD_VAR 0 3
11621: PPUSH
11622: LD_INT 1
11624: PPUSH
11625: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11629: LD_INT 54
11631: PPUSH
11632: LD_VAR 0 3
11636: PPUSH
11637: LD_INT 1
11639: PPUSH
11640: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11644: LD_INT 55
11646: PPUSH
11647: LD_VAR 0 3
11651: PPUSH
11652: LD_INT 1
11654: PPUSH
11655: CALL_OW 322
// for i = 0 to 39 do
11659: LD_ADDR_VAR 0 4
11663: PUSH
11664: DOUBLE
11665: LD_INT 0
11667: DEC
11668: ST_TO_ADDR
11669: LD_INT 39
11671: PUSH
11672: FOR_TO
11673: IFFALSE 11694
// SetRestrict ( i , side , true ) ;
11675: LD_VAR 0 4
11679: PPUSH
11680: LD_VAR 0 3
11684: PPUSH
11685: LD_INT 1
11687: PPUSH
11688: CALL_OW 324
11692: GO 11672
11694: POP
11695: POP
// end ; else
11696: GO 11773
11698: POP
// begin for i = 1 to 73 do
11699: LD_ADDR_VAR 0 4
11703: PUSH
11704: DOUBLE
11705: LD_INT 1
11707: DEC
11708: ST_TO_ADDR
11709: LD_INT 73
11711: PUSH
11712: FOR_TO
11713: IFFALSE 11734
// SetTech ( i , side , state_enabled ) ;
11715: LD_VAR 0 4
11719: PPUSH
11720: LD_VAR 0 3
11724: PPUSH
11725: LD_INT 1
11727: PPUSH
11728: CALL_OW 322
11732: GO 11712
11734: POP
11735: POP
// for i = 0 to 39 do
11736: LD_ADDR_VAR 0 4
11740: PUSH
11741: DOUBLE
11742: LD_INT 0
11744: DEC
11745: ST_TO_ADDR
11746: LD_INT 39
11748: PUSH
11749: FOR_TO
11750: IFFALSE 11771
// SetRestrict ( i , side , true ) ;
11752: LD_VAR 0 4
11756: PPUSH
11757: LD_VAR 0 3
11761: PPUSH
11762: LD_INT 1
11764: PPUSH
11765: CALL_OW 324
11769: GO 11749
11771: POP
11772: POP
// end ; end ; end ;
11773: GO 7778
11775: POP
11776: POP
// end ; end_of_file
11777: LD_VAR 0 2
11781: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
11782: LD_INT 0
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
11788: PPUSH
11789: PPUSH
11790: PPUSH
11791: PPUSH
11792: PPUSH
// for i := 1 to 8 do
11793: LD_ADDR_VAR 0 2
11797: PUSH
11798: DOUBLE
11799: LD_INT 1
11801: DEC
11802: ST_TO_ADDR
11803: LD_INT 8
11805: PUSH
11806: FOR_TO
11807: IFFALSE 12191
// begin if Side_Positions [ i ] then
11809: LD_EXP 39
11813: PUSH
11814: LD_VAR 0 2
11818: ARRAY
11819: IFFALSE 12189
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
11821: LD_ADDR_VAR 0 7
11825: PUSH
11826: LD_INT 22
11828: PUSH
11829: LD_VAR 0 2
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 21
11840: PUSH
11841: LD_INT 1
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PPUSH
11852: CALL_OW 69
11856: PUSH
11857: LD_INT 0
11859: PLUS
11860: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11861: LD_ADDR_VAR 0 9
11865: PUSH
11866: LD_INT 22
11868: PUSH
11869: LD_VAR 0 2
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PUSH
11878: LD_INT 2
11880: PUSH
11881: LD_INT 30
11883: PUSH
11884: LD_INT 0
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 30
11893: PUSH
11894: LD_INT 1
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: LIST
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 69
11914: ST_TO_ADDR
// crates := 0 ;
11915: LD_ADDR_VAR 0 4
11919: PUSH
11920: LD_INT 0
11922: ST_TO_ADDR
// oil := 0 ;
11923: LD_ADDR_VAR 0 5
11927: PUSH
11928: LD_INT 0
11930: ST_TO_ADDR
// sib := 0 ;
11931: LD_ADDR_VAR 0 6
11935: PUSH
11936: LD_INT 0
11938: ST_TO_ADDR
// if bases then
11939: LD_VAR 0 9
11943: IFFALSE 12049
// begin for j in bases do
11945: LD_ADDR_VAR 0 3
11949: PUSH
11950: LD_VAR 0 9
11954: PUSH
11955: FOR_IN
11956: IFFALSE 12047
// begin base := GetBase ( j ) ;
11958: LD_ADDR_VAR 0 8
11962: PUSH
11963: LD_VAR 0 3
11967: PPUSH
11968: CALL_OW 274
11972: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
11973: LD_ADDR_VAR 0 4
11977: PUSH
11978: LD_VAR 0 4
11982: PUSH
11983: LD_VAR 0 8
11987: PPUSH
11988: LD_INT 1
11990: PPUSH
11991: CALL_OW 275
11995: PLUS
11996: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
11997: LD_ADDR_VAR 0 5
12001: PUSH
12002: LD_VAR 0 5
12006: PUSH
12007: LD_VAR 0 8
12011: PPUSH
12012: LD_INT 2
12014: PPUSH
12015: CALL_OW 275
12019: PLUS
12020: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12021: LD_ADDR_VAR 0 6
12025: PUSH
12026: LD_VAR 0 6
12030: PUSH
12031: LD_VAR 0 8
12035: PPUSH
12036: LD_INT 3
12038: PPUSH
12039: CALL_OW 275
12043: PLUS
12044: ST_TO_ADDR
// end ;
12045: GO 11955
12047: POP
12048: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12049: LD_STRING setSpecText(
12051: PUSH
12052: LD_VAR 0 2
12056: STR
12057: PUSH
12058: LD_STRING ,
12060: STR
12061: PUSH
12062: LD_INT 2
12064: STR
12065: PUSH
12066: LD_STRING ,
12068: STR
12069: PUSH
12070: LD_VAR 0 4
12074: STR
12075: PUSH
12076: LD_STRING )
12078: STR
12079: PPUSH
12080: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12084: LD_STRING setSpecText(
12086: PUSH
12087: LD_VAR 0 2
12091: STR
12092: PUSH
12093: LD_STRING ,
12095: STR
12096: PUSH
12097: LD_INT 3
12099: STR
12100: PUSH
12101: LD_STRING ,
12103: STR
12104: PUSH
12105: LD_VAR 0 5
12109: STR
12110: PUSH
12111: LD_STRING )
12113: STR
12114: PPUSH
12115: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12119: LD_STRING setSpecText(
12121: PUSH
12122: LD_VAR 0 2
12126: STR
12127: PUSH
12128: LD_STRING ,
12130: STR
12131: PUSH
12132: LD_INT 4
12134: STR
12135: PUSH
12136: LD_STRING ,
12138: STR
12139: PUSH
12140: LD_VAR 0 6
12144: STR
12145: PUSH
12146: LD_STRING )
12148: STR
12149: PPUSH
12150: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12154: LD_STRING setSpecText(
12156: PUSH
12157: LD_VAR 0 2
12161: STR
12162: PUSH
12163: LD_STRING ,
12165: STR
12166: PUSH
12167: LD_INT 5
12169: STR
12170: PUSH
12171: LD_STRING ,
12173: STR
12174: PUSH
12175: LD_VAR 0 7
12179: STR
12180: PUSH
12181: LD_STRING )
12183: STR
12184: PPUSH
12185: CALL_OW 559
// end ; end ;
12189: GO 11806
12191: POP
12192: POP
// end ;
12193: LD_VAR 0 1
12197: RET
// every 0 0$1 do
12198: GO 12200
12200: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12201: LD_STRING setSpecLogoNumber(
12203: PUSH
12204: LD_INT 2
12206: STR
12207: PUSH
12208: LD_STRING ,
12210: STR
12211: PUSH
12212: LD_INT 1
12214: STR
12215: PUSH
12216: LD_STRING )
12218: STR
12219: PPUSH
12220: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12224: LD_STRING setSpecLogoNumber(
12226: PUSH
12227: LD_INT 3
12229: STR
12230: PUSH
12231: LD_STRING ,
12233: STR
12234: PUSH
12235: LD_INT 2
12237: STR
12238: PUSH
12239: LD_STRING )
12241: STR
12242: PPUSH
12243: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12247: LD_STRING setSpecLogoNumber(
12249: PUSH
12250: LD_INT 4
12252: STR
12253: PUSH
12254: LD_STRING ,
12256: STR
12257: PUSH
12258: LD_INT 3
12260: STR
12261: PUSH
12262: LD_STRING )
12264: STR
12265: PPUSH
12266: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12270: LD_STRING setSpecLogoNumber(
12272: PUSH
12273: LD_INT 5
12275: STR
12276: PUSH
12277: LD_STRING ,
12279: STR
12280: PUSH
12281: LD_INT 4
12283: STR
12284: PUSH
12285: LD_STRING )
12287: STR
12288: PPUSH
12289: CALL_OW 559
// end ;
12293: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12294: LD_INT 2
12296: PUSH
12297: LD_INT 30
12299: PUSH
12300: LD_INT 0
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 30
12309: PUSH
12310: LD_INT 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: PPUSH
12322: CALL_OW 69
12326: IFFALSE 12336
12328: GO 12330
12330: DISABLE
// begin enable ;
12331: ENABLE
// UpdateSpectatorBar ;
12332: CALL 11782 0 0
// end ; end_of_file
12336: END
// var respawn , inqueue ; export function init_respawning ; begin
12337: LD_INT 0
12339: PPUSH
// respawn := Rand ( 1 , 8 ) ;
12340: LD_ADDR_LOC 14
12344: PUSH
12345: LD_INT 1
12347: PPUSH
12348: LD_INT 8
12350: PPUSH
12351: CALL_OW 12
12355: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12356: LD_ADDR_LOC 15
12360: PUSH
12361: LD_INT 0
12363: PUSH
12364: LD_INT 0
12366: PUSH
12367: LD_INT 0
12369: PUSH
12370: LD_INT 0
12372: PUSH
12373: LD_INT 0
12375: PUSH
12376: LD_INT 0
12378: PUSH
12379: LD_INT 0
12381: PUSH
12382: LD_INT 0
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: ST_TO_ADDR
// end ;
12395: LD_VAR 0 1
12399: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
12400: GO 12402
12402: DISABLE
12403: LD_INT 0
12405: PPUSH
12406: PPUSH
12407: PPUSH
// begin if respawning_time_max = 0 then
12408: LD_EXP 30
12412: PUSH
12413: LD_INT 0
12415: EQUAL
12416: IFFALSE 12420
// exit ;
12418: GO 12828
// if respawn = 8 then
12420: LD_LOC 14
12424: PUSH
12425: LD_INT 8
12427: EQUAL
12428: IFFALSE 12440
// respawn := 1 else
12430: LD_ADDR_LOC 14
12434: PUSH
12435: LD_INT 1
12437: ST_TO_ADDR
12438: GO 12454
// respawn := respawn + 1 ;
12440: LD_ADDR_LOC 14
12444: PUSH
12445: LD_LOC 14
12449: PUSH
12450: LD_INT 1
12452: PLUS
12453: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
12454: LD_EXP 39
12458: PUSH
12459: LD_LOC 14
12463: ARRAY
12464: PUSH
12465: LD_LOC 15
12469: PUSH
12470: LD_LOC 14
12474: ARRAY
12475: NOT
12476: AND
12477: IFFALSE 12827
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
12479: LD_ADDR_VAR 0 1
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 22
12496: PUSH
12497: LD_LOC 14
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 3
12508: PUSH
12509: LD_INT 23
12511: PUSH
12512: LD_INT 0
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: PPUSH
12525: CALL_OW 69
12529: ST_TO_ADDR
// if n < number_of_people then
12530: LD_VAR 0 1
12534: PUSH
12535: LD_EXP 21
12539: LESS
12540: IFFALSE 12824
// begin aktresp := respawn ;
12542: LD_ADDR_VAR 0 3
12546: PUSH
12547: LD_LOC 14
12551: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
12552: LD_ADDR_LOC 15
12556: PUSH
12557: LD_LOC 15
12561: PPUSH
12562: LD_VAR 0 3
12566: PPUSH
12567: LD_INT 1
12569: PPUSH
12570: CALL_OW 1
12574: ST_TO_ADDR
// enable ;
12575: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
12576: LD_EXP 29
12580: PPUSH
12581: LD_EXP 30
12585: PPUSH
12586: CALL_OW 12
12590: PPUSH
12591: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
12595: LD_ADDR_LOC 15
12599: PUSH
12600: LD_LOC 15
12604: PPUSH
12605: LD_VAR 0 3
12609: PPUSH
12610: LD_INT 0
12612: PPUSH
12613: CALL_OW 1
12617: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
12618: LD_ADDR_VAR 0 2
12622: PUSH
12623: LD_INT 21
12625: PUSH
12626: LD_INT 3
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 2
12635: PUSH
12636: LD_INT 30
12638: PUSH
12639: LD_INT 0
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: LD_INT 30
12648: PUSH
12649: LD_INT 1
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: PUSH
12661: LD_INT 50
12663: PUSH
12664: EMPTY
12665: LIST
12666: PUSH
12667: LD_INT 22
12669: PUSH
12670: LD_VAR 0 3
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: PPUSH
12685: CALL_OW 69
12689: ST_TO_ADDR
// if dep = 0 then
12690: LD_VAR 0 2
12694: PUSH
12695: LD_INT 0
12697: EQUAL
12698: IFFALSE 12702
// exit ;
12700: GO 12828
// hc_name :=  ;
12702: LD_ADDR_OWVAR 26
12706: PUSH
12707: LD_STRING 
12709: ST_TO_ADDR
// hc_importance := 0 ;
12710: LD_ADDR_OWVAR 32
12714: PUSH
12715: LD_INT 0
12717: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
12718: LD_INT 0
12720: PPUSH
12721: LD_INT 0
12723: PPUSH
12724: LD_EXP 22
12728: PUSH
12729: LD_INT 2
12731: DIV
12732: PPUSH
12733: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
12737: LD_ADDR_OWVAR 21
12741: PUSH
12742: LD_EXP 40
12746: PUSH
12747: LD_VAR 0 3
12751: ARRAY
12752: ST_TO_ADDR
// uc_side := aktresp ;
12753: LD_ADDR_OWVAR 20
12757: PUSH
12758: LD_VAR 0 3
12762: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
12763: LD_ADDR_VAR 0 2
12767: PUSH
12768: LD_VAR 0 2
12772: PUSH
12773: LD_INT 1
12775: PPUSH
12776: LD_VAR 0 2
12780: PPUSH
12781: CALL_OW 12
12785: ARRAY
12786: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
12787: CALL_OW 44
12791: PPUSH
12792: LD_VAR 0 2
12796: PPUSH
12797: CALL_OW 250
12801: PPUSH
12802: LD_VAR 0 2
12806: PPUSH
12807: CALL_OW 251
12811: PPUSH
12812: LD_INT 7
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: CALL_OW 50
// end else
12822: GO 12825
// enable ;
12824: ENABLE
// end else
12825: GO 12828
// enable ;
12827: ENABLE
// end ; end_of_file
12828: PPOPN 3
12830: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
12831: LD_INT 0
12833: PPUSH
12834: PPUSH
12835: PPUSH
// BuildUpTime_Delay = 0 ;
12836: LD_ADDR_EXP 62
12840: PUSH
12841: LD_INT 0
12843: ST_TO_ADDR
// if not def_builduptime then
12844: LD_EXP 16
12848: NOT
12849: IFFALSE 12853
// exit ;
12851: GO 13036
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
12853: LD_ADDR_EXP 62
12857: PUSH
12858: LD_INT 8400
12860: PUSH
12861: LD_INT 2100
12863: PUSH
12864: LD_EXP 16
12868: MUL
12869: PLUS
12870: ST_TO_ADDR
// BuildUpTimeActive := true ;
12871: LD_ADDR_EXP 61
12875: PUSH
12876: LD_INT 1
12878: ST_TO_ADDR
// for i := 1 to 8 do
12879: LD_ADDR_VAR 0 2
12883: PUSH
12884: DOUBLE
12885: LD_INT 1
12887: DEC
12888: ST_TO_ADDR
12889: LD_INT 8
12891: PUSH
12892: FOR_TO
12893: IFFALSE 13034
// if Side_Positions [ i ] then
12895: LD_EXP 39
12899: PUSH
12900: LD_VAR 0 2
12904: ARRAY
12905: IFFALSE 13032
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
12907: LD_EXP 60
12911: PUSH
12912: LD_EXP 39
12916: PUSH
12917: LD_VAR 0 2
12921: ARRAY
12922: ARRAY
12923: PPUSH
12924: LD_INT 5
12926: PPUSH
12927: CALL_OW 424
// for j := 1 to 8 do
12931: LD_ADDR_VAR 0 3
12935: PUSH
12936: DOUBLE
12937: LD_INT 1
12939: DEC
12940: ST_TO_ADDR
12941: LD_INT 8
12943: PUSH
12944: FOR_TO
12945: IFFALSE 13030
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
12947: LD_EXP 39
12951: PUSH
12952: LD_VAR 0 3
12956: ARRAY
12957: PUSH
12958: LD_EXP 36
12962: PUSH
12963: LD_VAR 0 2
12967: ARRAY
12968: PUSH
12969: LD_EXP 36
12973: PUSH
12974: LD_VAR 0 3
12978: ARRAY
12979: NONEQUAL
12980: PUSH
12981: LD_EXP 41
12985: NOT
12986: PUSH
12987: LD_VAR 0 2
12991: PUSH
12992: LD_VAR 0 3
12996: NONEQUAL
12997: AND
12998: OR
12999: AND
13000: IFFALSE 13028
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13002: LD_VAR 0 3
13006: PPUSH
13007: LD_EXP 60
13011: PUSH
13012: LD_EXP 39
13016: PUSH
13017: LD_VAR 0 2
13021: ARRAY
13022: ARRAY
13023: PPUSH
13024: CALL_OW 333
13028: GO 12944
13030: POP
13031: POP
// end ;
13032: GO 12892
13034: POP
13035: POP
// end ;
13036: LD_VAR 0 1
13040: RET
// export function EndBuildUp ; var i , j ; begin
13041: LD_INT 0
13043: PPUSH
13044: PPUSH
13045: PPUSH
// BuildUpTimeActive := false ;
13046: LD_ADDR_EXP 61
13050: PUSH
13051: LD_INT 0
13053: ST_TO_ADDR
// for i := 1 to 8 do
13054: LD_ADDR_VAR 0 2
13058: PUSH
13059: DOUBLE
13060: LD_INT 1
13062: DEC
13063: ST_TO_ADDR
13064: LD_INT 8
13066: PUSH
13067: FOR_TO
13068: IFFALSE 13209
// if Side_Positions [ i ] then
13070: LD_EXP 39
13074: PUSH
13075: LD_VAR 0 2
13079: ARRAY
13080: IFFALSE 13207
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13082: LD_EXP 60
13086: PUSH
13087: LD_EXP 39
13091: PUSH
13092: LD_VAR 0 2
13096: ARRAY
13097: ARRAY
13098: PPUSH
13099: LD_INT 0
13101: PPUSH
13102: CALL_OW 424
// for j := 1 to 8 do
13106: LD_ADDR_VAR 0 3
13110: PUSH
13111: DOUBLE
13112: LD_INT 1
13114: DEC
13115: ST_TO_ADDR
13116: LD_INT 8
13118: PUSH
13119: FOR_TO
13120: IFFALSE 13205
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13122: LD_EXP 39
13126: PUSH
13127: LD_VAR 0 3
13131: ARRAY
13132: PUSH
13133: LD_EXP 36
13137: PUSH
13138: LD_VAR 0 2
13142: ARRAY
13143: PUSH
13144: LD_EXP 36
13148: PUSH
13149: LD_VAR 0 3
13153: ARRAY
13154: NONEQUAL
13155: PUSH
13156: LD_EXP 41
13160: NOT
13161: PUSH
13162: LD_VAR 0 2
13166: PUSH
13167: LD_VAR 0 3
13171: NONEQUAL
13172: AND
13173: OR
13174: AND
13175: IFFALSE 13203
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13177: LD_VAR 0 3
13181: PPUSH
13182: LD_EXP 60
13186: PUSH
13187: LD_EXP 39
13191: PUSH
13192: LD_VAR 0 2
13196: ARRAY
13197: ARRAY
13198: PPUSH
13199: CALL_OW 334
13203: GO 13119
13205: POP
13206: POP
// end ;
13207: GO 13067
13209: POP
13210: POP
// end ;
13211: LD_VAR 0 1
13215: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13216: LD_EXP 61
13220: IFFALSE 13395
13222: GO 13224
13224: DISABLE
13225: LD_INT 0
13227: PPUSH
13228: PPUSH
// begin for i := 1 to 8 do
13229: LD_ADDR_VAR 0 1
13233: PUSH
13234: DOUBLE
13235: LD_INT 1
13237: DEC
13238: ST_TO_ADDR
13239: LD_INT 8
13241: PUSH
13242: FOR_TO
13243: IFFALSE 13392
// if Side_Positions [ i ] then
13245: LD_EXP 39
13249: PUSH
13250: LD_VAR 0 1
13254: ARRAY
13255: IFFALSE 13390
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13257: LD_ADDR_VAR 0 2
13261: PUSH
13262: LD_EXP 60
13266: PUSH
13267: LD_EXP 39
13271: PUSH
13272: LD_VAR 0 1
13276: ARRAY
13277: ARRAY
13278: PPUSH
13279: LD_INT 2
13281: PUSH
13282: LD_INT 21
13284: PUSH
13285: LD_INT 1
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 21
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 22
13309: PUSH
13310: LD_OWVAR 2
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PPUSH
13323: CALL_OW 70
13327: PUSH
13328: FOR_IN
13329: IFFALSE 13388
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
13331: LD_EXP 36
13335: PUSH
13336: LD_VAR 0 1
13340: ARRAY
13341: PUSH
13342: LD_EXP 36
13346: PUSH
13347: LD_OWVAR 2
13351: ARRAY
13352: NONEQUAL
13353: PUSH
13354: LD_EXP 41
13358: NOT
13359: PUSH
13360: LD_VAR 0 1
13364: PUSH
13365: LD_OWVAR 2
13369: NONEQUAL
13370: AND
13371: OR
13372: IFFALSE 13386
// ComMoveToArea ( un , BuildUpEscape ) ;
13374: LD_VAR 0 2
13378: PPUSH
13379: LD_INT 13
13381: PPUSH
13382: CALL_OW 113
13386: GO 13328
13388: POP
13389: POP
13390: GO 13242
13392: POP
13393: POP
// enable ;
13394: ENABLE
// end ;
13395: PPOPN 2
13397: END
// every 0 0$1 trigger def_builduptime do
13398: LD_EXP 16
13402: IFFALSE 13428
13404: GO 13406
13406: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
13407: LD_INT 8400
13409: PUSH
13410: LD_EXP 16
13414: PUSH
13415: LD_INT 2100
13417: MUL
13418: PLUS
13419: PPUSH
13420: CALL_OW 67
// EndBuildUp ;
13424: CALL 13041 0 0
// end ; end_of_file
13428: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
13429: LD_INT 0
13431: PPUSH
13432: PPUSH
// enable ( 98 ) ;
13433: LD_INT 98
13435: ENABLE_MARKED
// GameEnded = false ;
13436: LD_ADDR_LOC 17
13440: PUSH
13441: LD_INT 0
13443: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13444: LD_ADDR_LOC 16
13448: PUSH
13449: LD_INT 0
13451: PUSH
13452: LD_INT 0
13454: PUSH
13455: LD_INT 0
13457: PUSH
13458: LD_INT 0
13460: PUSH
13461: LD_INT 0
13463: PUSH
13464: LD_INT 0
13466: PUSH
13467: LD_INT 0
13469: PUSH
13470: LD_INT 0
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: ST_TO_ADDR
// unfoged = false ;
13483: LD_ADDR_LOC 18
13487: PUSH
13488: LD_INT 0
13490: ST_TO_ADDR
// defeated_specs := [ ] ;
13491: LD_ADDR_LOC 19
13495: PUSH
13496: EMPTY
13497: ST_TO_ADDR
// for i = 1 to side_positions do
13498: LD_ADDR_VAR 0 2
13502: PUSH
13503: DOUBLE
13504: LD_INT 1
13506: DEC
13507: ST_TO_ADDR
13508: LD_EXP 39
13512: PUSH
13513: FOR_TO
13514: IFFALSE 13554
// if not side_positions [ i ] then
13516: LD_EXP 39
13520: PUSH
13521: LD_VAR 0 2
13525: ARRAY
13526: NOT
13527: IFFALSE 13552
// defeated = replace ( defeated , i , true ) ;
13529: LD_ADDR_LOC 16
13533: PUSH
13534: LD_LOC 16
13538: PPUSH
13539: LD_VAR 0 2
13543: PPUSH
13544: LD_INT 1
13546: PPUSH
13547: CALL_OW 1
13551: ST_TO_ADDR
13552: GO 13513
13554: POP
13555: POP
// end ;
13556: LD_VAR 0 1
13560: RET
// function CanWinLoose ; begin
13561: LD_INT 0
13563: PPUSH
// Result := true ;
13564: LD_ADDR_VAR 0 1
13568: PUSH
13569: LD_INT 1
13571: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
13572: CALL_OW 518
13576: PUSH
13577: CALL_OW 519
13581: PUSH
13582: LD_INT 0
13584: GREATER
13585: AND
13586: IFFALSE 13596
// Result := false ;
13588: LD_ADDR_VAR 0 1
13592: PUSH
13593: LD_INT 0
13595: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13596: CALL_OW 531
13600: PUSH
13601: CALL_OW 519
13605: PUSH
13606: LD_INT 1
13608: GREATER
13609: AND
13610: IFFALSE 13620
// Result := false ;
13612: LD_ADDR_VAR 0 1
13616: PUSH
13617: LD_INT 0
13619: ST_TO_ADDR
// end ;
13620: LD_VAR 0 1
13624: RET
// export function HasPower ( i ) ; var k , h ; begin
13625: LD_INT 0
13627: PPUSH
13628: PPUSH
13629: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
13630: LD_VAR 0 1
13634: PPUSH
13635: CALL_OW 108
13639: NOT
13640: PUSH
13641: LD_EXP 38
13645: PUSH
13646: LD_VAR 0 1
13650: ARRAY
13651: NOT
13652: AND
13653: PUSH
13654: LD_OWVAR 4
13658: AND
13659: IFFALSE 13671
// begin result = false ;
13661: LD_ADDR_VAR 0 2
13665: PUSH
13666: LD_INT 0
13668: ST_TO_ADDR
// end else
13669: GO 13966
// case def_win_rules of 0 :
13671: LD_EXP 34
13675: PUSH
13676: LD_INT 0
13678: DOUBLE
13679: EQUAL
13680: IFTRUE 13684
13682: GO 13847
13684: POP
// if def_people_respawning then
13685: LD_EXP 11
13689: IFFALSE 13780
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
13691: LD_ADDR_VAR 0 2
13695: PUSH
13696: LD_INT 22
13698: PUSH
13699: LD_VAR 0 1
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: LD_INT 2
13710: PUSH
13711: LD_INT 21
13713: PUSH
13714: LD_INT 1
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 33
13723: PUSH
13724: LD_INT 3
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 33
13733: PUSH
13734: LD_INT 5
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PUSH
13741: LD_INT 30
13743: PUSH
13744: LD_INT 0
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: PUSH
13751: LD_INT 30
13753: PUSH
13754: LD_INT 1
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PPUSH
13773: CALL_OW 69
13777: ST_TO_ADDR
13778: GO 13845
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
13780: LD_ADDR_VAR 0 2
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_VAR 0 1
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 2
13799: PUSH
13800: LD_INT 21
13802: PUSH
13803: LD_INT 1
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 33
13812: PUSH
13813: LD_INT 3
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 33
13822: PUSH
13823: LD_INT 5
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PPUSH
13840: CALL_OW 69
13844: ST_TO_ADDR
13845: GO 13966
13847: LD_INT 1
13849: DOUBLE
13850: EQUAL
13851: IFTRUE 13855
13853: GO 13894
13855: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
13856: LD_ADDR_VAR 0 2
13860: PUSH
13861: LD_INT 22
13863: PUSH
13864: LD_VAR 0 1
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 21
13875: PUSH
13876: LD_INT 1
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PPUSH
13887: CALL_OW 69
13891: ST_TO_ADDR
13892: GO 13966
13894: LD_INT 2
13896: DOUBLE
13897: EQUAL
13898: IFTRUE 13902
13900: GO 13965
13902: POP
// begin h = false ;
13903: LD_ADDR_VAR 0 4
13907: PUSH
13908: LD_INT 0
13910: ST_TO_ADDR
// for k in heroes [ i ] do
13911: LD_ADDR_VAR 0 3
13915: PUSH
13916: LD_EXP 50
13920: PUSH
13921: LD_VAR 0 1
13925: ARRAY
13926: PUSH
13927: FOR_IN
13928: IFFALSE 13951
// if IsLive ( k ) then
13930: LD_VAR 0 3
13934: PPUSH
13935: CALL_OW 300
13939: IFFALSE 13949
// h = true ;
13941: LD_ADDR_VAR 0 4
13945: PUSH
13946: LD_INT 1
13948: ST_TO_ADDR
13949: GO 13927
13951: POP
13952: POP
// Result := h ;
13953: LD_ADDR_VAR 0 2
13957: PUSH
13958: LD_VAR 0 4
13962: ST_TO_ADDR
// end ; end ;
13963: GO 13966
13965: POP
// end ;
13966: LD_VAR 0 2
13970: RET
// function AlliedSides ( i , j ) ; begin
13971: LD_INT 0
13973: PPUSH
// Result := false ;
13974: LD_ADDR_VAR 0 3
13978: PUSH
13979: LD_INT 0
13981: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13982: LD_VAR 0 1
13986: PPUSH
13987: LD_VAR 0 2
13991: PPUSH
13992: CALL_OW 81
13996: PUSH
13997: LD_INT 1
13999: EQUAL
14000: PUSH
14001: LD_VAR 0 2
14005: PPUSH
14006: LD_VAR 0 1
14010: PPUSH
14011: CALL_OW 81
14015: PUSH
14016: LD_INT 1
14018: EQUAL
14019: AND
14020: PUSH
14021: LD_VAR 0 1
14025: PPUSH
14026: CALL_OW 83
14030: AND
14031: PUSH
14032: LD_VAR 0 2
14036: PPUSH
14037: CALL_OW 83
14041: AND
14042: IFFALSE 14052
// Result := true ;
14044: LD_ADDR_VAR 0 3
14048: PUSH
14049: LD_INT 1
14051: ST_TO_ADDR
// end ;
14052: LD_VAR 0 3
14056: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14057: CALL 13561 0 0
14061: PUSH
14062: LD_LOC 17
14066: NOT
14067: AND
14068: IFFALSE 14084
14070: GO 14072
14072: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14073: LD_ADDR_EXP 59
14077: PUSH
14078: LD_STRING #Player-Ended
14080: PUSH
14081: EMPTY
14082: LIST
14083: ST_TO_ADDR
14084: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14085: CALL 13561 0 0
14089: PUSH
14090: LD_LOC 17
14094: AND
14095: IFFALSE 14104
14097: GO 14099
14099: DISABLE
// YouLostInMultiplayer ;
14100: CALL_OW 107
14104: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14105: CALL 13561 0 0
14109: NOT
14110: PUSH
14111: CALL_OW 531
14115: NOT
14116: AND
14117: IFFALSE 14133
14119: GO 14121
14121: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14122: LD_ADDR_EXP 59
14126: PUSH
14127: LD_STRING #server-wait
14129: PUSH
14130: EMPTY
14131: LIST
14132: ST_TO_ADDR
14133: END
// every 100 trigger IAmSpec do
14134: CALL_OW 531
14138: IFFALSE 14154
14140: GO 14142
14142: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14143: LD_ADDR_EXP 59
14147: PUSH
14148: LD_STRING #Player-IAmSpec
14150: PUSH
14151: EMPTY
14152: LIST
14153: ST_TO_ADDR
14154: END
// every 100 trigger GameEnded and IAmSpec do
14155: LD_LOC 17
14159: PUSH
14160: CALL_OW 531
14164: AND
14165: IFFALSE 14174
14167: GO 14169
14169: DISABLE
// YouLostInMultiplayer ;
14170: CALL_OW 107
14174: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14175: CALL 13561 0 0
14179: PUSH
14180: LD_LOC 17
14184: NOT
14185: AND
14186: IFFALSE 14202
14188: GO 14190
14190: DISABLE
// WaitServerStrings = [ $player-win ] ;
14191: LD_ADDR_EXP 59
14195: PUSH
14196: LD_STRING $player-win
14198: PUSH
14199: EMPTY
14200: LIST
14201: ST_TO_ADDR
14202: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14203: CALL 13561 0 0
14207: PUSH
14208: LD_LOC 17
14212: AND
14213: IFFALSE 14237
14215: GO 14217
14217: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
14218: LD_EXP 40
14222: PUSH
14223: LD_OWVAR 7
14227: ARRAY
14228: PPUSH
14229: CALL 7416 0 1
// YouWinInMultiplayer ;
14233: CALL_OW 106
// end ;
14237: END
// every 100 trigger isEditor marked 401 do
14238: LD_OWVAR 84
14242: IFFALSE 14258
14244: GO 14246
14246: DISABLE
// Debug_Strings = [ You won ] ;
14247: LD_ADDR_OWVAR 48
14251: PUSH
14252: LD_STRING You won
14254: PUSH
14255: EMPTY
14256: LIST
14257: ST_TO_ADDR
14258: END
// every 100 trigger isEditor marked 400 do
14259: LD_OWVAR 84
14263: IFFALSE 14279
14265: GO 14267
14267: DISABLE
// Debug_Strings = [ You loss ] ;
14268: LD_ADDR_OWVAR 48
14272: PUSH
14273: LD_STRING You loss
14275: PUSH
14276: EMPTY
14277: LIST
14278: ST_TO_ADDR
14279: END
// every 100 marked 98 do var i , un ;
14280: GO 14282
14282: DISABLE
14283: LD_INT 0
14285: PPUSH
14286: PPUSH
// begin for i = 1 to side_positions do
14287: LD_ADDR_VAR 0 1
14291: PUSH
14292: DOUBLE
14293: LD_INT 1
14295: DEC
14296: ST_TO_ADDR
14297: LD_EXP 39
14301: PUSH
14302: FOR_TO
14303: IFFALSE 14390
// begin if side_positions [ i ] then
14305: LD_EXP 39
14309: PUSH
14310: LD_VAR 0 1
14314: ARRAY
14315: IFFALSE 14388
// if not HasPower ( i ) and not defeated [ i ] then
14317: LD_VAR 0 1
14321: PPUSH
14322: CALL 13625 0 1
14326: NOT
14327: PUSH
14328: LD_LOC 16
14332: PUSH
14333: LD_VAR 0 1
14337: ARRAY
14338: NOT
14339: AND
14340: IFFALSE 14388
// begin defeated = replace ( defeated , i , true ) ;
14342: LD_ADDR_LOC 16
14346: PUSH
14347: LD_LOC 16
14351: PPUSH
14352: LD_VAR 0 1
14356: PPUSH
14357: LD_INT 1
14359: PPUSH
14360: CALL_OW 1
14364: ST_TO_ADDR
// if i = mp_player_side then
14365: LD_VAR 0 1
14369: PUSH
14370: LD_OWVAR 7
14374: EQUAL
14375: IFFALSE 14388
// begin Multiplayer_Loose_Message ;
14377: CALL_OW 521
// SetPlayerSpectator ( ) ;
14381: CALL_OW 572
// enable ( 400 ) ;
14385: LD_INT 400
14387: ENABLE_MARKED
// end ; end ; end ;
14388: GO 14302
14390: POP
14391: POP
// DidGameEnd ;
14392: CALL 14407 0 0
// if not GameEnded then
14396: LD_LOC 17
14400: NOT
14401: IFFALSE 14404
// enable ;
14403: ENABLE
// end ;
14404: PPOPN 2
14406: END
// function DidGameEnd ; var i , k , enemy ; begin
14407: LD_INT 0
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
// enemy = [ ] ;
14413: LD_ADDR_VAR 0 4
14417: PUSH
14418: EMPTY
14419: ST_TO_ADDR
// for i = 1 to side_positions do
14420: LD_ADDR_VAR 0 2
14424: PUSH
14425: DOUBLE
14426: LD_INT 1
14428: DEC
14429: ST_TO_ADDR
14430: LD_EXP 39
14434: PUSH
14435: FOR_TO
14436: IFFALSE 14530
// if not defeated [ i ] then
14438: LD_LOC 16
14442: PUSH
14443: LD_VAR 0 2
14447: ARRAY
14448: NOT
14449: IFFALSE 14528
// for k = 1 to side_positions do
14451: LD_ADDR_VAR 0 3
14455: PUSH
14456: DOUBLE
14457: LD_INT 1
14459: DEC
14460: ST_TO_ADDR
14461: LD_EXP 39
14465: PUSH
14466: FOR_TO
14467: IFFALSE 14526
// if not defeated [ k ] then
14469: LD_LOC 16
14473: PUSH
14474: LD_VAR 0 3
14478: ARRAY
14479: NOT
14480: IFFALSE 14524
// if not AlliedSides ( i , k ) then
14482: LD_VAR 0 2
14486: PPUSH
14487: LD_VAR 0 3
14491: PPUSH
14492: CALL 13971 0 2
14496: NOT
14497: IFFALSE 14524
// enemy = enemy ^ [ i , k ] ;
14499: LD_ADDR_VAR 0 4
14503: PUSH
14504: LD_VAR 0 4
14508: PUSH
14509: LD_VAR 0 2
14513: PUSH
14514: LD_VAR 0 3
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: ADD
14523: ST_TO_ADDR
14524: GO 14466
14526: POP
14527: POP
14528: GO 14435
14530: POP
14531: POP
// if not enemy then
14532: LD_VAR 0 4
14536: NOT
14537: IFFALSE 14563
// begin GameEnded = true ;
14539: LD_ADDR_LOC 17
14543: PUSH
14544: LD_INT 1
14546: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
14547: LD_LOC 16
14551: PUSH
14552: LD_OWVAR 7
14556: ARRAY
14557: NOT
14558: IFFALSE 14563
// enable ( 401 ) ;
14560: LD_INT 401
14562: ENABLE_MARKED
// end ; end ;
14563: LD_VAR 0 1
14567: RET
// function unfog ; var k , friends ; begin
14568: LD_INT 0
14570: PPUSH
14571: PPUSH
14572: PPUSH
// for k = 1 to side_positions do
14573: LD_ADDR_VAR 0 2
14577: PUSH
14578: DOUBLE
14579: LD_INT 1
14581: DEC
14582: ST_TO_ADDR
14583: LD_EXP 39
14587: PUSH
14588: FOR_TO
14589: IFFALSE 14645
// if not defeated [ k ] then
14591: LD_LOC 16
14595: PUSH
14596: LD_VAR 0 2
14600: ARRAY
14601: NOT
14602: IFFALSE 14643
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
14604: LD_OWVAR 7
14608: PPUSH
14609: LD_VAR 0 2
14613: PPUSH
14614: CALL_OW 81
14618: PUSH
14619: LD_INT 1
14621: PUSH
14622: EMPTY
14623: LIST
14624: IN
14625: IFFALSE 14643
// friends = friends ^ k ;
14627: LD_ADDR_VAR 0 3
14631: PUSH
14632: LD_VAR 0 3
14636: PUSH
14637: LD_VAR 0 2
14641: ADD
14642: ST_TO_ADDR
14643: GO 14588
14645: POP
14646: POP
// if not friends then
14647: LD_VAR 0 3
14651: NOT
14652: IFFALSE 14666
// begin SetPlayerSpectator ( ) ;
14654: CALL_OW 572
// unfoged = true ;
14658: LD_ADDR_LOC 18
14662: PUSH
14663: LD_INT 1
14665: ST_TO_ADDR
// end ; end ;
14666: LD_VAR 0 1
14670: RET
// export function MakeGameEnd ; begin
14671: LD_INT 0
14673: PPUSH
// SetPlayerSpectator ( ) ;
14674: CALL_OW 572
// unfoged = true ;
14678: LD_ADDR_LOC 18
14682: PUSH
14683: LD_INT 1
14685: ST_TO_ADDR
// wait ( 0 0$5 ) ;
14686: LD_INT 175
14688: PPUSH
14689: CALL_OW 67
// GameEnded = true ;
14693: LD_ADDR_LOC 17
14697: PUSH
14698: LD_INT 1
14700: ST_TO_ADDR
// end ;
14701: LD_VAR 0 1
14705: RET
// export function GetGameEnded ; begin
14706: LD_INT 0
14708: PPUSH
// result = GameEnded ;
14709: LD_ADDR_VAR 0 1
14713: PUSH
14714: LD_LOC 17
14718: ST_TO_ADDR
// end ;
14719: LD_VAR 0 1
14723: RET
