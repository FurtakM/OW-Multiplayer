// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , tech_level ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 18
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 37
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 35
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 36
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 18
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 1 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 37
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 35
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 38
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 36
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 254: LD_ADDR_EXP 39
 258: PUSH
 259: LD_EXP 35
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: EMPTY
 268: LIST
 269: DIFF
 270: PUSH
 271: LD_INT 1
 273: GREATER
 274: ST_TO_ADDR
// if Multiplayer then
 275: LD_OWVAR 4
 279: IFFALSE 517
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 281: LD_ADDR_EXP 1
 285: PUSH
 286: LD_INT 0
 288: PPUSH
 289: CALL_OW 426
 293: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 294: LD_ADDR_EXP 2
 298: PUSH
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 426
 306: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 307: LD_ADDR_EXP 3
 311: PUSH
 312: LD_INT 2
 314: PPUSH
 315: CALL_OW 426
 319: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 320: LD_ADDR_EXP 4
 324: PUSH
 325: LD_INT 3
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 333: LD_ADDR_EXP 5
 337: PUSH
 338: LD_INT 4
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 346: LD_ADDR_EXP 6
 350: PUSH
 351: LD_INT 5
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 359: LD_ADDR_EXP 7
 363: PUSH
 364: LD_INT 6
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 372: LD_ADDR_EXP 8
 376: PUSH
 377: LD_INT 10
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 385: LD_ADDR_EXP 9
 389: PUSH
 390: LD_INT 11
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 398: LD_ADDR_EXP 10
 402: PUSH
 403: LD_INT 12
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 411: LD_ADDR_EXP 11
 415: PUSH
 416: LD_INT 13
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 424: LD_ADDR_EXP 12
 428: PUSH
 429: LD_INT 14
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 437: LD_ADDR_EXP 13
 441: PUSH
 442: LD_INT 15
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 450: LD_ADDR_EXP 14
 454: PUSH
 455: LD_INT 16
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 463: LD_ADDR_EXP 15
 467: PUSH
 468: LD_INT 17
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 16
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_spect := GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_EXP 32
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 502: LD_ADDR_EXP 34
 506: PUSH
 507: LD_INT 23
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// end else
 515: GO 665
// begin Randomize ;
 517: CALL_OW 10
// def_base_level := 2 ;
 521: LD_ADDR_EXP 1
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// def_amount_of_people := 0 ;
 529: LD_ADDR_EXP 2
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// def_skill_level := 1 ;
 537: LD_ADDR_EXP 3
 541: PUSH
 542: LD_INT 1
 544: ST_TO_ADDR
// def_starting_resources := 2 ;
 545: LD_ADDR_EXP 4
 549: PUSH
 550: LD_INT 2
 552: ST_TO_ADDR
// def_shipments_density := 1 ;
 553: LD_ADDR_EXP 5
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 561: LD_ADDR_EXP 6
 565: PUSH
 566: LD_INT 0
 568: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 569: LD_ADDR_EXP 7
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// def_shared_vision := 1 ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// def_morale_flags := 1 ;
 585: LD_ADDR_EXP 9
 589: PUSH
 590: LD_INT 1
 592: ST_TO_ADDR
// def_siberite_detection := 1 ;
 593: LD_ADDR_EXP 10
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// def_people_respawning := 2 ;
 601: LD_ADDR_EXP 11
 605: PUSH
 606: LD_INT 2
 608: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 609: LD_ADDR_EXP 12
 613: PUSH
 614: LD_INT 3
 616: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 617: LD_ADDR_EXP 13
 621: PUSH
 622: LD_INT 0
 624: ST_TO_ADDR
// def_public_score := 0 ;
 625: LD_ADDR_EXP 14
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 633: LD_ADDR_EXP 15
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// def_builduptime := 1 ;
 641: LD_ADDR_EXP 16
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
// def_spect := 1 ;
 649: LD_ADDR_EXP 32
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// tech_level = 0 ;
 657: LD_ADDR_EXP 34
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// end ; if isSGUI then
 665: LD_OWVAR 83
 669: IFFALSE 677
// setMpTechs ( ) else
 671: CALL 9341 0 0
 675: GO 690
// SetMpTechLevel ( tech_level + 1 ) ;
 677: LD_EXP 34
 681: PUSH
 682: LD_INT 1
 684: PLUS
 685: PPUSH
 686: CALL 9488 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 690: LD_ADDR_EXP 19
 694: PUSH
 695: LD_INT 0
 697: PUSH
 698: LD_INT 1
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: PUSH
 709: LD_EXP 1
 713: PUSH
 714: LD_INT 1
 716: PLUS
 717: ARRAY
 718: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 719: LD_ADDR_EXP 20
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: PUSH
 738: LD_EXP 1
 742: PUSH
 743: LD_INT 1
 745: PLUS
 746: ARRAY
 747: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 748: LD_ADDR_EXP 21
 752: PUSH
 753: LD_INT 9
 755: PUSH
 756: LD_INT 12
 758: PUSH
 759: LD_INT 15
 761: PUSH
 762: LD_INT 24
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_EXP 2
 775: PUSH
 776: LD_INT 1
 778: PLUS
 779: ARRAY
 780: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
 781: LD_ADDR_EXP 22
 785: PUSH
 786: LD_INT 2
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: LD_INT 5
 794: PUSH
 795: LD_INT 6
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_EXP 3
 808: PUSH
 809: LD_INT 1
 811: PLUS
 812: ARRAY
 813: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 814: LD_ADDR_EXP 24
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: LD_INT 0
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 30
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_INT 50
 849: PUSH
 850: LD_INT 20
 852: PUSH
 853: LD_INT 0
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: LD_INT 80
 863: PUSH
 864: LD_INT 40
 866: PUSH
 867: LD_INT 20
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 4
 885: PUSH
 886: LD_INT 1
 888: PLUS
 889: ARRAY
 890: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 891: LD_ADDR_EXP 23
 895: PUSH
 896: LD_INT 10
 898: PUSH
 899: EMPTY
 900: LIST
 901: PUSH
 902: LD_INT 7
 904: PUSH
 905: LD_INT 14
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 6
 914: PUSH
 915: LD_INT 12
 917: PUSH
 918: LD_INT 18
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: LIST
 925: PUSH
 926: LD_INT 5
 928: PUSH
 929: LD_INT 10
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: LD_INT 20
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 1
 957: PLUS
 958: ARRAY
 959: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
 960: LD_ADDR_EXP 25
 964: PUSH
 965: LD_INT 150
 967: PUSH
 968: LD_INT 125
 970: PUSH
 971: LD_INT 100
 973: PUSH
 974: LD_INT 50
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: PUSH
 983: LD_EXP 5
 987: PUSH
 988: LD_INT 1
 990: PLUS
 991: ARRAY
 992: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
 993: LD_ADDR_EXP 29
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 10500
1003: PUSH
1004: LD_INT 6300
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_EXP 11
1016: PUSH
1017: LD_INT 1
1019: PLUS
1020: ARRAY
1021: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1022: LD_ADDR_EXP 30
1026: PUSH
1027: LD_INT 0
1029: PUSH
1030: LD_INT 31500
1032: PUSH
1033: LD_INT 10500
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_EXP 11
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: ARRAY
1050: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1051: LD_ADDR_EXP 27
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: LD_INT 3
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_EXP 12
1078: PUSH
1079: LD_INT 1
1081: PLUS
1082: ARRAY
1083: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1084: LD_ADDR_EXP 28
1088: PUSH
1089: LD_INT 30
1091: PUSH
1092: LD_INT 50
1094: PUSH
1095: LD_INT 80
1097: PUSH
1098: LD_INT 100
1100: PUSH
1101: LD_INT 130
1103: PUSH
1104: LD_INT 150
1106: PUSH
1107: LD_INT 200
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_EXP 13
1123: PUSH
1124: LD_INT 1
1126: PLUS
1127: ARRAY
1128: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1129: LD_ADDR_EXP 26
1133: PUSH
1134: LD_INT 1
1136: NEG
1137: PUSH
1138: LD_INT 350
1140: PUSH
1141: LD_INT 700
1143: PUSH
1144: LD_INT 1400
1146: PUSH
1147: LD_INT 0
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_EXP 9
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ARRAY
1166: ST_TO_ADDR
// battle_flags_id := [ ] ;
1167: LD_ADDR_EXP 47
1171: PUSH
1172: EMPTY
1173: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1174: LD_ADDR_EXP 31
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_EXP 32
1193: PUSH
1194: LD_INT 1
1196: PLUS
1197: ARRAY
1198: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1199: LD_ADDR_EXP 33
1203: PUSH
1204: LD_INT 0
1206: PUSH
1207: LD_INT 1
1209: PUSH
1210: LD_INT 63000
1212: PUSH
1213: LD_INT 126000
1215: PUSH
1216: LD_INT 189000
1218: PUSH
1219: LD_INT 252000
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: PUSH
1230: LD_EXP 15
1234: PUSH
1235: LD_INT 1
1237: PLUS
1238: ARRAY
1239: ST_TO_ADDR
// end ;
1240: LD_VAR 0 1
1244: RET
// function init_map ; var i , j ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1250: LD_ADDR_EXP 43
1254: PUSH
1255: LD_INT 12
1257: PUSH
1258: LD_INT 4
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PUSH
1265: LD_INT 45
1267: PUSH
1268: LD_INT 81
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 116
1277: PUSH
1278: LD_INT 195
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 142
1287: PUSH
1288: LD_INT 4
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 201
1297: PUSH
1298: LD_INT 102
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 234
1307: PUSH
1308: LD_INT 194
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1323: LD_ADDR_EXP 44
1327: PUSH
1328: LD_INT 12
1330: PUSH
1331: LD_INT 4
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 16
1340: PUSH
1341: LD_INT 25
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 45
1354: PUSH
1355: LD_INT 81
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 102
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 116
1378: PUSH
1379: LD_INT 195
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: LD_INT 92
1388: PUSH
1389: LD_INT 167
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 142
1402: PUSH
1403: LD_INT 4
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: LD_INT 167
1412: PUSH
1413: LD_INT 24
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: LD_INT 201
1426: PUSH
1427: LD_INT 102
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 190
1436: PUSH
1437: LD_INT 77
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: LD_INT 234
1450: PUSH
1451: LD_INT 194
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: PUSH
1458: LD_INT 237
1460: PUSH
1461: LD_INT 171
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1480: LD_ADDR_EXP 45
1484: PUSH
1485: LD_INT 10
1487: PUSH
1488: LD_INT 10
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 93
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: PUSH
1505: LD_INT 102
1507: PUSH
1508: LD_INT 187
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 158
1517: PUSH
1518: LD_INT 6
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: LD_INT 203
1527: PUSH
1528: LD_INT 93
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 252
1537: PUSH
1538: LD_INT 194
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1553: LD_ADDR_EXP 46
1557: PUSH
1558: LD_INT 10
1560: PUSH
1561: LD_INT 10
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 36
1570: PUSH
1571: LD_INT 10
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 51
1584: PUSH
1585: LD_INT 93
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 47
1594: PUSH
1595: LD_INT 72
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 102
1608: PUSH
1609: LD_INT 187
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 93
1618: PUSH
1619: LD_INT 175
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: LD_INT 158
1632: PUSH
1633: LD_INT 6
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 147
1642: PUSH
1643: LD_INT 5
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 203
1656: PUSH
1657: LD_INT 93
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 173
1666: PUSH
1667: LD_INT 71
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 252
1680: PUSH
1681: LD_INT 194
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 243
1690: PUSH
1691: LD_INT 177
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1710: LD_ADDR_EXP 40
1714: PUSH
1715: LD_INT 23
1717: PUSH
1718: LD_INT 15
1720: PUSH
1721: LD_INT 2
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 56
1731: PUSH
1732: LD_INT 85
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 110
1745: PUSH
1746: LD_INT 177
1748: PUSH
1749: LD_INT 3
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 157
1759: PUSH
1760: LD_INT 13
1762: PUSH
1763: LD_INT 3
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 187
1773: PUSH
1774: LD_INT 87
1776: PUSH
1777: LD_INT 5
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_INT 231
1787: PUSH
1788: LD_INT 181
1790: PUSH
1791: LD_INT 5
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
1807: LD_ADDR_EXP 42
1811: PUSH
1812: LD_INT 30
1814: PUSH
1815: LD_INT 22
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 58
1824: PUSH
1825: LD_INT 82
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 113
1834: PUSH
1835: LD_INT 180
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 151
1844: PUSH
1845: LD_INT 24
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 183
1854: PUSH
1855: LD_INT 90
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 223
1864: PUSH
1865: LD_INT 180
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
1880: LD_ADDR_EXP 41
1884: PUSH
1885: LD_INT 33
1887: PUSH
1888: LD_INT 12
1890: PUSH
1891: LD_INT 5
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 42
1901: PUSH
1902: LD_INT 29
1904: PUSH
1905: LD_INT 4
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: PUSH
1913: LD_INT 36
1915: PUSH
1916: LD_INT 20
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 72
1934: PUSH
1935: LD_INT 91
1937: PUSH
1938: LD_INT 4
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 65
1948: PUSH
1949: LD_INT 78
1951: PUSH
1952: LD_INT 4
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 75
1962: PUSH
1963: LD_INT 100
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 102
1981: PUSH
1982: LD_INT 165
1984: PUSH
1985: LD_INT 3
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 122
1995: PUSH
1996: LD_INT 176
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 120
2009: PUSH
2010: LD_INT 184
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 134
2028: PUSH
2029: LD_INT 16
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 132
2042: PUSH
2043: LD_INT 5
2045: PUSH
2046: LD_INT 1
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 157
2056: PUSH
2057: LD_INT 27
2059: PUSH
2060: LD_INT 5
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: LD_INT 172
2075: PUSH
2076: LD_INT 77
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: LIST
2086: PUSH
2087: LD_INT 175
2089: PUSH
2090: LD_INT 96
2092: PUSH
2093: LD_INT 1
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 192
2103: PUSH
2104: LD_INT 104
2106: PUSH
2107: LD_INT 1
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PUSH
2120: LD_INT 216
2122: PUSH
2123: LD_INT 179
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 208
2136: PUSH
2137: LD_INT 160
2139: PUSH
2140: LD_INT 2
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 208
2150: PUSH
2151: LD_INT 171
2153: PUSH
2154: LD_INT 2
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// for i = 1 to 6 do
2175: LD_ADDR_VAR 0 2
2179: PUSH
2180: DOUBLE
2181: LD_INT 1
2183: DEC
2184: ST_TO_ADDR
2185: LD_INT 6
2187: PUSH
2188: FOR_TO
2189: IFFALSE 2286
// if def_extra_oil_deposits then
2191: LD_EXP 6
2195: IFFALSE 2247
// for j in extra_oil_deposits_locations [ i ] do
2197: LD_ADDR_VAR 0 3
2201: PUSH
2202: LD_EXP 44
2206: PUSH
2207: LD_VAR 0 2
2211: ARRAY
2212: PUSH
2213: FOR_IN
2214: IFFALSE 2243
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2216: LD_VAR 0 3
2220: PUSH
2221: LD_INT 1
2223: ARRAY
2224: PPUSH
2225: LD_VAR 0 3
2229: PUSH
2230: LD_INT 2
2232: ARRAY
2233: PPUSH
2234: LD_INT 2
2236: PPUSH
2237: CALL_OW 62
2241: GO 2213
2243: POP
2244: POP
2245: GO 2284
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2247: LD_EXP 43
2251: PUSH
2252: LD_VAR 0 2
2256: ARRAY
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PPUSH
2262: LD_EXP 43
2266: PUSH
2267: LD_VAR 0 2
2271: ARRAY
2272: PUSH
2273: LD_INT 2
2275: ARRAY
2276: PPUSH
2277: LD_INT 2
2279: PPUSH
2280: CALL_OW 62
2284: GO 2188
2286: POP
2287: POP
// if def_extra_sib_deposits then
2288: LD_EXP 7
2292: IFFALSE 2411
// for i = 1 to 6 do
2294: LD_ADDR_VAR 0 2
2298: PUSH
2299: DOUBLE
2300: LD_INT 1
2302: DEC
2303: ST_TO_ADDR
2304: LD_INT 6
2306: PUSH
2307: FOR_TO
2308: IFFALSE 2409
// if def_extra_sib_deposits = 2 then
2310: LD_EXP 7
2314: PUSH
2315: LD_INT 2
2317: EQUAL
2318: IFFALSE 2370
// for j in extra_sib_deposits_locations [ i ] do
2320: LD_ADDR_VAR 0 3
2324: PUSH
2325: LD_EXP 46
2329: PUSH
2330: LD_VAR 0 2
2334: ARRAY
2335: PUSH
2336: FOR_IN
2337: IFFALSE 2366
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2339: LD_VAR 0 3
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 2
2355: ARRAY
2356: PPUSH
2357: LD_INT 3
2359: PPUSH
2360: CALL_OW 62
2364: GO 2336
2366: POP
2367: POP
2368: GO 2407
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2370: LD_EXP 45
2374: PUSH
2375: LD_VAR 0 2
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_EXP 45
2389: PUSH
2390: LD_VAR 0 2
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: LD_INT 3
2402: PPUSH
2403: CALL_OW 62
2407: GO 2307
2409: POP
2410: POP
// end ;
2411: LD_VAR 0 1
2415: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2416: LD_INT 0
2418: PPUSH
2419: PPUSH
2420: PPUSH
// if not Team_Game then
2421: LD_EXP 39
2425: NOT
2426: IFFALSE 2524
// begin for i = 1 to 8 do
2428: LD_ADDR_VAR 0 2
2432: PUSH
2433: DOUBLE
2434: LD_INT 1
2436: DEC
2437: ST_TO_ADDR
2438: LD_INT 8
2440: PUSH
2441: FOR_TO
2442: IFFALSE 2520
// for j = 1 to 8 do
2444: LD_ADDR_VAR 0 3
2448: PUSH
2449: DOUBLE
2450: LD_INT 1
2452: DEC
2453: ST_TO_ADDR
2454: LD_INT 8
2456: PUSH
2457: FOR_TO
2458: IFFALSE 2516
// if i <> j then
2460: LD_VAR 0 2
2464: PUSH
2465: LD_VAR 0 3
2469: NONEQUAL
2470: IFFALSE 2494
// SetAttitude ( i , j , att_neutral , true ) else
2472: LD_VAR 0 2
2476: PPUSH
2477: LD_VAR 0 3
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: LD_INT 1
2487: PPUSH
2488: CALL_OW 80
2492: GO 2514
// SetAttitude ( i , j , att_friend , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: LD_INT 1
2509: PPUSH
2510: CALL_OW 80
2514: GO 2457
2516: POP
2517: POP
2518: GO 2441
2520: POP
2521: POP
// end else
2522: GO 2699
// begin if def_shared_vision then
2524: LD_EXP 8
2528: IFFALSE 2593
// begin for i in Teams do
2530: LD_ADDR_VAR 0 2
2534: PUSH
2535: LD_EXP 36
2539: PUSH
2540: FOR_IN
2541: IFFALSE 2591
// for j = 2 to i do
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: DOUBLE
2549: LD_INT 2
2551: DEC
2552: ST_TO_ADDR
2553: LD_VAR 0 2
2557: PUSH
2558: FOR_TO
2559: IFFALSE 2587
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2561: LD_VAR 0 2
2565: PUSH
2566: LD_VAR 0 3
2570: ARRAY
2571: PPUSH
2572: LD_VAR 0 2
2576: PUSH
2577: LD_INT 1
2579: ARRAY
2580: PPUSH
2581: CALL_OW 343
2585: GO 2558
2587: POP
2588: POP
2589: GO 2540
2591: POP
2592: POP
// end ; for i = 1 to 8 do
2593: LD_ADDR_VAR 0 2
2597: PUSH
2598: DOUBLE
2599: LD_INT 1
2601: DEC
2602: ST_TO_ADDR
2603: LD_INT 8
2605: PUSH
2606: FOR_TO
2607: IFFALSE 2697
// for j = 1 to 8 do
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: DOUBLE
2615: LD_INT 1
2617: DEC
2618: ST_TO_ADDR
2619: LD_INT 8
2621: PUSH
2622: FOR_TO
2623: IFFALSE 2693
// if Side_Teams [ i ] = Side_Teams [ j ] then
2625: LD_EXP 35
2629: PUSH
2630: LD_VAR 0 2
2634: ARRAY
2635: PUSH
2636: LD_EXP 35
2640: PUSH
2641: LD_VAR 0 3
2645: ARRAY
2646: EQUAL
2647: IFFALSE 2671
// SetAttitude ( i , j , att_friend , true ) else
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_INT 1
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: CALL_OW 80
2669: GO 2691
// SetAttitude ( i , j , att_enemy , true ) ;
2671: LD_VAR 0 2
2675: PPUSH
2676: LD_VAR 0 3
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 1
2686: PPUSH
2687: CALL_OW 80
2691: GO 2622
2693: POP
2694: POP
2695: GO 2606
2697: POP
2698: POP
// end ; end ;
2699: LD_VAR 0 1
2703: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
// result := [ ] ;
2710: LD_ADDR_VAR 0 7
2714: PUSH
2715: EMPTY
2716: ST_TO_ADDR
// for i := 1 to count do
2717: LD_ADDR_VAR 0 8
2721: PUSH
2722: DOUBLE
2723: LD_INT 1
2725: DEC
2726: ST_TO_ADDR
2727: LD_VAR 0 1
2731: PUSH
2732: FOR_TO
2733: IFFALSE 3151
// begin uc_direction := Rand ( 0 , 5 ) ;
2735: LD_ADDR_OWVAR 24
2739: PUSH
2740: LD_INT 0
2742: PPUSH
2743: LD_INT 5
2745: PPUSH
2746: CALL_OW 12
2750: ST_TO_ADDR
// if commander then
2751: LD_LOC 1
2755: IFFALSE 2864
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2757: LD_ADDR_OWVAR 26
2761: PUSH
2762: LD_OWVAR 19
2766: PUSH
2767: LD_OWVAR 20
2771: ARRAY
2772: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2773: LD_INT 1
2775: PPUSH
2776: LD_INT 2
2778: PPUSH
2779: CALL_OW 12
2783: PPUSH
2784: LD_VAR 0 2
2788: PPUSH
2789: LD_EXP 22
2793: PUSH
2794: LD_INT 2
2796: PLUS
2797: PPUSH
2798: CALL_OW 380
// hc_importance := 105 ;
2802: LD_ADDR_OWVAR 32
2806: PUSH
2807: LD_INT 105
2809: ST_TO_ADDR
// commander := false ;
2810: LD_ADDR_LOC 1
2814: PUSH
2815: LD_INT 0
2817: ST_TO_ADDR
// if Multiplayer then
2818: LD_OWVAR 4
2822: IFFALSE 2862
// begin hc_gallery := MULTIAVATARS ;
2824: LD_ADDR_OWVAR 33
2828: PUSH
2829: LD_STRING MULTIAVATARS
2831: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2832: LD_ADDR_OWVAR 34
2836: PUSH
2837: LD_OWVAR 20
2841: PPUSH
2842: CALL_OW 525
2846: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2847: LD_ADDR_OWVAR 27
2851: PUSH
2852: LD_OWVAR 20
2856: PPUSH
2857: CALL_OW 526
2861: ST_TO_ADDR
// end ; end else
2862: GO 2927
// begin hc_name :=  ;
2864: LD_ADDR_OWVAR 26
2868: PUSH
2869: LD_STRING 
2871: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2872: LD_INT 1
2874: PPUSH
2875: LD_INT 2
2877: PPUSH
2878: CALL_OW 12
2882: PPUSH
2883: LD_VAR 0 2
2887: PPUSH
2888: LD_EXP 22
2892: PPUSH
2893: CALL_OW 380
// hc_importance := 0 ;
2897: LD_ADDR_OWVAR 32
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// if Multiplayer then
2905: LD_OWVAR 4
2909: IFFALSE 2927
// begin hc_gallery :=  ;
2911: LD_ADDR_OWVAR 33
2915: PUSH
2916: LD_STRING 
2918: ST_TO_ADDR
// hc_face_number := 0 ;
2919: LD_ADDR_OWVAR 34
2923: PUSH
2924: LD_INT 0
2926: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2927: LD_ADDR_VAR 0 10
2931: PUSH
2932: CALL_OW 44
2936: ST_TO_ADDR
// if global_defined then
2937: LD_LOC 3
2941: IFFALSE 3081
// begin if ( cl = class_soldier ) then
2943: LD_VAR 0 2
2947: PUSH
2948: LD_INT 1
2950: EQUAL
2951: IFFALSE 2971
// j := i + soldiers_created else
2953: LD_ADDR_VAR 0 9
2957: PUSH
2958: LD_VAR 0 8
2962: PUSH
2963: LD_LOC 4
2967: PLUS
2968: ST_TO_ADDR
2969: GO 2981
// j := i ;
2971: LD_ADDR_VAR 0 9
2975: PUSH
2976: LD_VAR 0 8
2980: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2981: LD_LOC 2
2985: PUSH
2986: LD_VAR 0 2
2990: ARRAY
2991: PUSH
2992: LD_VAR 0 9
2996: ARRAY
2997: PPUSH
2998: LD_VAR 0 10
3002: PPUSH
3003: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3007: LD_VAR 0 10
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: LD_LOC 2
3019: PUSH
3020: LD_VAR 0 2
3024: ARRAY
3025: PUSH
3026: LD_VAR 0 9
3030: ARRAY
3031: PPUSH
3032: LD_INT 2
3034: PPUSH
3035: CALL_OW 260
3039: PPUSH
3040: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3044: LD_VAR 0 10
3048: PPUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_LOC 2
3056: PUSH
3057: LD_VAR 0 2
3061: ARRAY
3062: PUSH
3063: LD_VAR 0 9
3067: ARRAY
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: CALL_OW 260
3076: PPUSH
3077: CALL_OW 239
// end ; if building then
3081: LD_VAR 0 6
3085: IFFALSE 3103
// PlaceHumanInUnit ( un , building ) else
3087: LD_VAR 0 10
3091: PPUSH
3092: LD_VAR 0 6
3096: PPUSH
3097: CALL_OW 52
3101: GO 3130
// PlaceUnitXYR ( un , x , y , r , false ) ;
3103: LD_VAR 0 10
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PPUSH
3118: LD_VAR 0 5
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 50
// result := result ^ [ un ] ;
3130: LD_ADDR_VAR 0 7
3134: PUSH
3135: LD_VAR 0 7
3139: PUSH
3140: LD_VAR 0 10
3144: PUSH
3145: EMPTY
3146: LIST
3147: ADD
3148: ST_TO_ADDR
// end ;
3149: GO 2732
3151: POP
3152: POP
// if not global_defined then
3153: LD_LOC 3
3157: NOT
3158: IFFALSE 3236
// if ( global_units >= cl ) then
3160: LD_LOC 2
3164: PUSH
3165: LD_VAR 0 2
3169: GREATEREQUAL
3170: IFFALSE 3211
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3172: LD_ADDR_LOC 2
3176: PUSH
3177: LD_LOC 2
3181: PPUSH
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_LOC 2
3191: PUSH
3192: LD_VAR 0 2
3196: ARRAY
3197: PUSH
3198: LD_VAR 0 7
3202: ADD
3203: PPUSH
3204: CALL_OW 1
3208: ST_TO_ADDR
3209: GO 3236
// global_units := Replace ( global_units , cl , result ) ;
3211: LD_ADDR_LOC 2
3215: PUSH
3216: LD_LOC 2
3220: PPUSH
3221: LD_VAR 0 2
3225: PPUSH
3226: LD_VAR 0 7
3230: PPUSH
3231: CALL_OW 1
3235: ST_TO_ADDR
// end ;
3236: LD_VAR 0 7
3240: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3241: LD_INT 0
3243: PPUSH
3244: PPUSH
3245: PPUSH
3246: PPUSH
3247: PPUSH
3248: PPUSH
3249: PPUSH
3250: PPUSH
3251: PPUSH
// if side in [ 0 , 9 ] then
3252: LD_VAR 0 1
3256: PUSH
3257: LD_INT 0
3259: PUSH
3260: LD_INT 9
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: IN
3267: IFFALSE 3271
// exit ;
3269: GO 4288
// pos := Side_Positions [ side ] ;
3271: LD_ADDR_VAR 0 3
3275: PUSH
3276: LD_EXP 37
3280: PUSH
3281: LD_VAR 0 1
3285: ARRAY
3286: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3287: LD_ADDR_OWVAR 21
3291: PUSH
3292: LD_EXP 38
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: ST_TO_ADDR
// uc_side := side ;
3303: LD_ADDR_OWVAR 20
3307: PUSH
3308: LD_VAR 0 1
3312: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3313: LD_ADDR_VAR 0 4
3317: PUSH
3318: LD_EXP 40
3322: PUSH
3323: LD_VAR 0 3
3327: ARRAY
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3333: LD_ADDR_VAR 0 5
3337: PUSH
3338: LD_EXP 40
3342: PUSH
3343: LD_VAR 0 3
3347: ARRAY
3348: PUSH
3349: LD_INT 2
3351: ARRAY
3352: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3353: LD_ADDR_VAR 0 6
3357: PUSH
3358: LD_EXP 40
3362: PUSH
3363: LD_VAR 0 3
3367: ARRAY
3368: PUSH
3369: LD_INT 3
3371: ARRAY
3372: ST_TO_ADDR
// if is_depot then
3373: LD_EXP 19
3377: IFFALSE 3510
// begin bc_type = b_depot ;
3379: LD_ADDR_OWVAR 42
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3387: LD_ADDR_VAR 0 10
3391: PUSH
3392: LD_VAR 0 4
3396: PPUSH
3397: LD_VAR 0 5
3401: PPUSH
3402: LD_VAR 0 6
3406: PPUSH
3407: CALL_OW 47
3411: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3412: LD_VAR 0 10
3416: PPUSH
3417: LD_STRING @
3419: PUSH
3420: LD_VAR 0 1
3424: STR
3425: PPUSH
3426: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3430: LD_VAR 0 10
3434: PPUSH
3435: CALL_OW 274
3439: PPUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_EXP 24
3447: PUSH
3448: LD_INT 1
3450: ARRAY
3451: PPUSH
3452: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3456: LD_VAR 0 10
3460: PPUSH
3461: CALL_OW 274
3465: PPUSH
3466: LD_INT 2
3468: PPUSH
3469: LD_EXP 24
3473: PUSH
3474: LD_INT 2
3476: ARRAY
3477: PPUSH
3478: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3482: LD_VAR 0 10
3486: PPUSH
3487: CALL_OW 274
3491: PPUSH
3492: LD_INT 3
3494: PPUSH
3495: LD_EXP 24
3499: PUSH
3500: LD_INT 3
3502: ARRAY
3503: PPUSH
3504: CALL_OW 277
// end else
3508: GO 3654
// begin for i := 1 to 3 do
3510: LD_ADDR_VAR 0 7
3514: PUSH
3515: DOUBLE
3516: LD_INT 1
3518: DEC
3519: ST_TO_ADDR
3520: LD_INT 3
3522: PUSH
3523: FOR_TO
3524: IFFALSE 3652
// begin r := starting_resources [ i ] ;
3526: LD_ADDR_VAR 0 8
3530: PUSH
3531: LD_EXP 24
3535: PUSH
3536: LD_VAR 0 7
3540: ARRAY
3541: ST_TO_ADDR
// while r >= 10 do
3542: LD_VAR 0 8
3546: PUSH
3547: LD_INT 10
3549: GREATEREQUAL
3550: IFFALSE 3650
// if r > 50 then
3552: LD_VAR 0 8
3556: PUSH
3557: LD_INT 50
3559: GREATER
3560: IFFALSE 3606
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3562: LD_VAR 0 7
3566: PPUSH
3567: LD_INT 5
3569: PPUSH
3570: LD_VAR 0 4
3574: PPUSH
3575: LD_VAR 0 5
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 60
// r := r - 50 ;
3590: LD_ADDR_VAR 0 8
3594: PUSH
3595: LD_VAR 0 8
3599: PUSH
3600: LD_INT 50
3602: MINUS
3603: ST_TO_ADDR
// end else
3604: GO 3648
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3606: LD_VAR 0 7
3610: PPUSH
3611: LD_VAR 0 8
3615: PUSH
3616: LD_INT 10
3618: DIV
3619: PPUSH
3620: LD_VAR 0 4
3624: PPUSH
3625: LD_VAR 0 5
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: LD_INT 0
3635: PPUSH
3636: CALL_OW 60
// r := 0 ;
3640: LD_ADDR_VAR 0 8
3644: PUSH
3645: LD_INT 0
3647: ST_TO_ADDR
// end ;
3648: GO 3542
// end ;
3650: GO 3523
3652: POP
3653: POP
// end ; for r in starting_crates do
3654: LD_ADDR_VAR 0 8
3658: PUSH
3659: LD_EXP 23
3663: PUSH
3664: FOR_IN
3665: IFFALSE 3697
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3667: LD_INT 1
3669: PPUSH
3670: LD_INT 5
3672: PPUSH
3673: LD_VAR 0 4
3677: PPUSH
3678: LD_VAR 0 5
3682: PPUSH
3683: LD_VAR 0 8
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 60
3695: GO 3664
3697: POP
3698: POP
// if def_morale_flags then
3699: LD_EXP 9
3703: IFFALSE 3842
// begin x := start_def [ pos ] [ 1 ] ;
3705: LD_ADDR_VAR 0 4
3709: PUSH
3710: LD_EXP 42
3714: PUSH
3715: LD_VAR 0 3
3719: ARRAY
3720: PUSH
3721: LD_INT 1
3723: ARRAY
3724: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3725: LD_ADDR_VAR 0 5
3729: PUSH
3730: LD_EXP 42
3734: PUSH
3735: LD_VAR 0 3
3739: ARRAY
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3745: LD_VAR 0 4
3749: PPUSH
3750: LD_VAR 0 5
3754: PPUSH
3755: LD_INT 12
3757: PPUSH
3758: LD_INT 2
3760: PPUSH
3761: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3765: LD_ADDR_EXP 47
3769: PUSH
3770: LD_EXP 47
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: LD_VAR 0 4
3784: PPUSH
3785: LD_VAR 0 5
3789: PPUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 100
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: LD_INT 2
3802: PUSH
3803: LD_INT 50
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 20
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 20
3822: PUSH
3823: LD_INT 100
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 418
3840: ADD
3841: ST_TO_ADDR
// end ; commander := true ;
3842: LD_ADDR_LOC 1
3846: PUSH
3847: LD_INT 1
3849: ST_TO_ADDR
// soldiers_created := 0 ;
3850: LD_ADDR_LOC 4
3854: PUSH
3855: LD_INT 0
3857: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3858: LD_ADDR_VAR 0 7
3862: PUSH
3863: DOUBLE
3864: LD_INT 1
3866: DEC
3867: ST_TO_ADDR
3868: LD_EXP 20
3872: PUSH
3873: FOR_TO
3874: IFFALSE 4027
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3876: LD_ADDR_VAR 0 4
3880: PUSH
3881: LD_EXP 41
3885: PUSH
3886: LD_VAR 0 3
3890: ARRAY
3891: PUSH
3892: LD_VAR 0 7
3896: ARRAY
3897: PUSH
3898: LD_INT 1
3900: ARRAY
3901: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3902: LD_ADDR_VAR 0 5
3906: PUSH
3907: LD_EXP 41
3911: PUSH
3912: LD_VAR 0 3
3916: ARRAY
3917: PUSH
3918: LD_VAR 0 7
3922: ARRAY
3923: PUSH
3924: LD_INT 2
3926: ARRAY
3927: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3928: LD_ADDR_VAR 0 6
3932: PUSH
3933: LD_EXP 41
3937: PUSH
3938: LD_VAR 0 3
3942: ARRAY
3943: PUSH
3944: LD_VAR 0 7
3948: ARRAY
3949: PUSH
3950: LD_INT 3
3952: ARRAY
3953: ST_TO_ADDR
// bc_type := b_breastwork ;
3954: LD_ADDR_OWVAR 42
3958: PUSH
3959: LD_INT 31
3961: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3962: LD_ADDR_VAR 0 9
3966: PUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_VAR 0 6
3981: PPUSH
3982: CALL_OW 47
3986: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3987: LD_INT 1
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: LD_INT 0
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: LD_VAR 0 9
4006: PPUSH
4007: CALL 2704 0 6
// soldiers_created := soldiers_created + 1 ;
4011: LD_ADDR_LOC 4
4015: PUSH
4016: LD_LOC 4
4020: PUSH
4021: LD_INT 1
4023: PLUS
4024: ST_TO_ADDR
// end ;
4025: GO 3873
4027: POP
4028: POP
// x := start_def [ pos ] [ 1 ] ;
4029: LD_ADDR_VAR 0 4
4033: PUSH
4034: LD_EXP 42
4038: PUSH
4039: LD_VAR 0 3
4043: ARRAY
4044: PUSH
4045: LD_INT 1
4047: ARRAY
4048: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4049: LD_ADDR_VAR 0 5
4053: PUSH
4054: LD_EXP 42
4058: PUSH
4059: LD_VAR 0 3
4063: ARRAY
4064: PUSH
4065: LD_INT 2
4067: ARRAY
4068: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4069: LD_LOC 8
4073: PUSH
4074: LD_EXP 20
4078: MINUS
4079: PPUSH
4080: LD_INT 1
4082: PPUSH
4083: LD_VAR 0 4
4087: PPUSH
4088: LD_VAR 0 5
4092: PPUSH
4093: LD_INT 5
4095: PPUSH
4096: LD_INT 0
4098: PPUSH
4099: CALL 2704 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4103: LD_LOC 5
4107: PPUSH
4108: LD_INT 2
4110: PPUSH
4111: LD_VAR 0 4
4115: PPUSH
4116: LD_VAR 0 5
4120: PPUSH
4121: LD_INT 5
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL 2704 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4131: LD_LOC 7
4135: PPUSH
4136: LD_INT 3
4138: PPUSH
4139: LD_VAR 0 4
4143: PPUSH
4144: LD_VAR 0 5
4148: PPUSH
4149: LD_INT 5
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: CALL 2704 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4159: LD_LOC 6
4163: PPUSH
4164: LD_INT 4
4166: PPUSH
4167: LD_VAR 0 4
4171: PPUSH
4172: LD_VAR 0 5
4176: PPUSH
4177: LD_INT 5
4179: PPUSH
4180: LD_INT 0
4182: PPUSH
4183: CALL 2704 0 6
// if def_siberite_detection then
4187: LD_EXP 10
4191: IFFALSE 4208
// SetTech ( tech_SibDet , side , state_researched ) ;
4193: LD_INT 20
4195: PPUSH
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_INT 2
4203: PPUSH
4204: CALL_OW 322
// if def_siberite_bomb = 1 then
4208: LD_EXP 15
4212: PUSH
4213: LD_INT 1
4215: EQUAL
4216: IFFALSE 4250
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4218: LD_INT 25
4220: PPUSH
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 1
4228: PPUSH
4229: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4233: LD_INT 73
4235: PPUSH
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 1
4243: PPUSH
4244: CALL_OW 322
// end else
4248: GO 4280
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4250: LD_INT 25
4252: PPUSH
4253: LD_VAR 0 1
4257: PPUSH
4258: LD_INT 0
4260: PPUSH
4261: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4265: LD_INT 73
4267: PPUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 0
4275: PPUSH
4276: CALL_OW 322
// end ; global_defined := true ;
4280: LD_ADDR_LOC 3
4284: PUSH
4285: LD_INT 1
4287: ST_TO_ADDR
// end ;
4288: LD_VAR 0 2
4292: RET
// every 0 0$1 do
4293: GO 4295
4295: DISABLE
// if ( def_siberite_bomb > 1 ) then
4296: LD_EXP 15
4300: PUSH
4301: LD_INT 1
4303: GREATER
4304: IFFALSE 4319
// begin wait ( siberite_bomb_Delay ) ;
4306: LD_EXP 33
4310: PPUSH
4311: CALL_OW 67
// EnableSibFiss ;
4315: CALL 4320 0 0
// end ;
4319: END
// function EnableSibFiss ; var i ; begin
4320: LD_INT 0
4322: PPUSH
4323: PPUSH
// for i := 1 to 8 do
4324: LD_ADDR_VAR 0 2
4328: PUSH
4329: DOUBLE
4330: LD_INT 1
4332: DEC
4333: ST_TO_ADDR
4334: LD_INT 8
4336: PUSH
4337: FOR_TO
4338: IFFALSE 4384
// if Side_Positions [ i ] then
4340: LD_EXP 37
4344: PUSH
4345: LD_VAR 0 2
4349: ARRAY
4350: IFFALSE 4382
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4352: LD_INT 25
4354: PPUSH
4355: LD_VAR 0 2
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4367: LD_INT 73
4369: PPUSH
4370: LD_VAR 0 2
4374: PPUSH
4375: LD_INT 1
4377: PPUSH
4378: CALL_OW 322
// end ;
4382: GO 4337
4384: POP
4385: POP
// end ;
4386: LD_VAR 0 1
4390: RET
// function prepare_sides ; var i ; begin
4391: LD_INT 0
4393: PPUSH
4394: PPUSH
// global_units := [ ] ;
4395: LD_ADDR_LOC 2
4399: PUSH
4400: EMPTY
4401: ST_TO_ADDR
// global_defined := false ;
4402: LD_ADDR_LOC 3
4406: PUSH
4407: LD_INT 0
4409: ST_TO_ADDR
// CountClassMembers ;
4410: CALL 4460 0 0
// for i := 1 to 8 do
4414: LD_ADDR_VAR 0 2
4418: PUSH
4419: DOUBLE
4420: LD_INT 1
4422: DEC
4423: ST_TO_ADDR
4424: LD_INT 8
4426: PUSH
4427: FOR_TO
4428: IFFALSE 4453
// if Side_Positions [ i ] then
4430: LD_EXP 37
4434: PUSH
4435: LD_VAR 0 2
4439: ARRAY
4440: IFFALSE 4451
// prepare_side ( i ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: CALL 3241 0 1
4451: GO 4427
4453: POP
4454: POP
// end ;
4455: LD_VAR 0 1
4459: RET
// function CountClassMembers ; var Mode ; begin
4460: LD_INT 0
4462: PPUSH
4463: PPUSH
// if No_Mechs then
4464: LD_EXP 17
4468: IFFALSE 4480
// Mode := 2 else
4470: LD_ADDR_VAR 0 2
4474: PUSH
4475: LD_INT 2
4477: ST_TO_ADDR
4478: GO 4488
// Mode := 1 ;
4480: LD_ADDR_VAR 0 2
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// neng := number_of_people ;
4488: LD_ADDR_LOC 5
4492: PUSH
4493: LD_EXP 21
4497: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4498: LD_ADDR_LOC 8
4502: PUSH
4503: LD_LOC 5
4507: PUSH
4508: LD_INT 4
4510: PUSH
4511: LD_INT 3
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: DIV
4524: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4525: LD_LOC 8
4529: PUSH
4530: LD_EXP 20
4534: LESS
4535: IFFALSE 4547
// nsol := number_of_breastworks ;
4537: LD_ADDR_LOC 8
4541: PUSH
4542: LD_EXP 20
4546: ST_TO_ADDR
// neng := neng - nsol ;
4547: LD_ADDR_LOC 5
4551: PUSH
4552: LD_LOC 5
4556: PUSH
4557: LD_LOC 8
4561: MINUS
4562: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4563: LD_ADDR_LOC 6
4567: PUSH
4568: LD_LOC 5
4572: PUSH
4573: LD_INT 3
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: DIV
4589: ST_TO_ADDR
// if ( nsci < 1 ) then
4590: LD_LOC 6
4594: PUSH
4595: LD_INT 1
4597: LESS
4598: IFFALSE 4608
// nsci := 1 ;
4600: LD_ADDR_LOC 6
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// neng := neng - nsci ;
4608: LD_ADDR_LOC 5
4612: PUSH
4613: LD_LOC 5
4617: PUSH
4618: LD_LOC 6
4622: MINUS
4623: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4624: LD_ADDR_LOC 7
4628: PUSH
4629: LD_LOC 5
4633: PUSH
4634: LD_INT 2
4636: DIV
4637: PUSH
4638: LD_INT 0
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: LD_VAR 0 2
4649: ARRAY
4650: ST_TO_ADDR
// neng := neng - nmech ;
4651: LD_ADDR_LOC 5
4655: PUSH
4656: LD_LOC 5
4660: PUSH
4661: LD_LOC 7
4665: MINUS
4666: ST_TO_ADDR
// if ( neng < 1 ) then
4667: LD_LOC 5
4671: PUSH
4672: LD_INT 1
4674: LESS
4675: IFFALSE 4685
// neng := 1 ;
4677: LD_ADDR_LOC 5
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// end ;
4685: LD_VAR 0 1
4689: RET
// function Init_Win_Condition ; begin
4690: LD_INT 0
4692: PPUSH
// if Team_Game then
4693: LD_EXP 39
4697: IFFALSE 4704
// enable ( 98 ) else
4699: LD_INT 98
4701: ENABLE_MARKED
4702: GO 4707
// enable ( 99 ) ;
4704: LD_INT 99
4706: ENABLE_MARKED
// case Game_Type of 3 :
4707: LD_EXP 18
4711: PUSH
4712: LD_INT 3
4714: DOUBLE
4715: EQUAL
4716: IFTRUE 4720
4718: GO 4726
4720: POP
// enable ( 100 ) ; end ;
4721: LD_INT 100
4723: ENABLE_MARKED
4724: GO 4727
4726: POP
// end ;
4727: LD_VAR 0 1
4731: RET
// starting begin disable ( 98 ) ;
4732: LD_INT 98
4734: DISABLE_MARKED
// disable ( 99 ) ;
4735: LD_INT 99
4737: DISABLE_MARKED
// disable ( 400 ) ;
4738: LD_INT 400
4740: DISABLE_MARKED
// disable ( 401 ) ;
4741: LD_INT 401
4743: DISABLE_MARKED
// mp_selectmsg := true ;
4744: LD_ADDR_OWVAR 13
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4752: CALL 0 0 0
// init_map ;
4756: CALL 1245 0 0
// init_respawning ;
4760: CALL 6538 0 0
// set_shared_visions_and_alliances ;
4764: CALL 2416 0 0
// prepare_sides ;
4768: CALL 4391 0 0
// ShowTimer ;
4772: CALL 8343 0 0
// music_nat := Side_Nations [ your_side ] ;
4776: LD_ADDR_OWVAR 71
4780: PUSH
4781: LD_EXP 38
4785: PUSH
4786: LD_OWVAR 2
4790: ARRAY
4791: ST_TO_ADDR
// if IAmSpec then
4792: CALL_OW 531
4796: IFFALSE 4832
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4798: LD_INT 0
4800: PPUSH
4801: LD_INT 0
4803: PPUSH
4804: LD_OWVAR 2
4808: PPUSH
4809: LD_INT 32767
4811: NEG
4812: PPUSH
4813: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
4817: LD_INT 104
4819: PPUSH
4820: LD_INT 69
4822: PPUSH
4823: CALL_OW 86
// enable ( 400 ) ;
4827: LD_INT 400
4829: ENABLE_MARKED
// end else
4830: GO 4886
// begin ResetFog ;
4832: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4836: LD_EXP 42
4840: PUSH
4841: LD_EXP 37
4845: PUSH
4846: LD_OWVAR 2
4850: ARRAY
4851: ARRAY
4852: PUSH
4853: LD_INT 1
4855: ARRAY
4856: PPUSH
4857: LD_EXP 42
4861: PUSH
4862: LD_EXP 37
4866: PUSH
4867: LD_OWVAR 2
4871: ARRAY
4872: ARRAY
4873: PUSH
4874: LD_INT 2
4876: ARRAY
4877: PPUSH
4878: CALL_OW 86
// Init_Win_Condition ;
4882: CALL 4690 0 0
// end ; AnimateTrees ( true ) ;
4886: LD_INT 1
4888: PPUSH
4889: CALL_OW 573
// InitApeman ;
4893: CALL 5705 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
4897: LD_ADDR_EXP 56
4901: PUSH
4902: LD_INT 7
4904: PUSH
4905: LD_INT 8
4907: PUSH
4908: LD_INT 9
4910: PUSH
4911: LD_INT 10
4913: PUSH
4914: LD_INT 11
4916: PUSH
4917: LD_INT 12
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: ST_TO_ADDR
// BeginBuildUp ;
4928: CALL 8504 0 0
// end ;
4932: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 and spect = 0 do
4933: LD_INT 22
4935: PUSH
4936: LD_OWVAR 2
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 2
4947: PUSH
4948: LD_INT 21
4950: PUSH
4951: LD_INT 1
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 33
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: LD_INT 33
4970: PUSH
4971: LD_INT 5
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 30
4980: PUSH
4981: LD_INT 0
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 30
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 69
5014: PUSH
5015: LD_INT 0
5017: EQUAL
5018: PUSH
5019: LD_EXP 31
5023: PUSH
5024: LD_INT 0
5026: EQUAL
5027: AND
5028: IFFALSE 5042
5030: GO 5032
5032: DISABLE
// begin fogoff ( your_side ) ;
5033: LD_OWVAR 2
5037: PPUSH
5038: CALL_OW 344
// end ; end_of_file
5042: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5043: GO 5045
5045: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
5046: LD_INT 4
5048: PPUSH
5049: LD_INT 5
5051: PPUSH
5052: CALL_OW 12
5056: PPUSH
5057: LD_INT 14
5059: PPUSH
5060: LD_INT 1
5062: PPUSH
5063: CALL_OW 55
// enable ;
5067: ENABLE
// end ;
5068: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5069: GO 5071
5071: DISABLE
5072: LD_INT 0
5074: PPUSH
5075: PPUSH
// begin case tick of 1 .. 1 1$0 :
5076: LD_OWVAR 1
5080: PUSH
5081: LD_INT 1
5083: DOUBLE
5084: GREATEREQUAL
5085: IFFALSE 5093
5087: LD_INT 2100
5089: DOUBLE
5090: LESSEQUAL
5091: IFTRUE 5095
5093: GO 5123
5095: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5096: LD_EXP 25
5100: PUSH
5101: LD_INT 100
5103: DIVREAL
5104: PUSH
5105: LD_INT 350
5107: PPUSH
5108: LD_INT 1050
5110: PPUSH
5111: CALL_OW 12
5115: MUL
5116: PPUSH
5117: CALL_OW 67
5121: GO 5425
5123: LD_INT 2100
5125: PUSH
5126: LD_INT 1
5128: PLUS
5129: DOUBLE
5130: GREATEREQUAL
5131: IFFALSE 5139
5133: LD_INT 10500
5135: DOUBLE
5136: LESSEQUAL
5137: IFTRUE 5141
5139: GO 5169
5141: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5142: LD_EXP 25
5146: PUSH
5147: LD_INT 100
5149: DIVREAL
5150: PUSH
5151: LD_INT 1050
5153: PPUSH
5154: LD_INT 1575
5156: PPUSH
5157: CALL_OW 12
5161: MUL
5162: PPUSH
5163: CALL_OW 67
5167: GO 5425
5169: LD_INT 10500
5171: PUSH
5172: LD_INT 1
5174: PLUS
5175: DOUBLE
5176: GREATEREQUAL
5177: IFFALSE 5185
5179: LD_INT 21000
5181: DOUBLE
5182: LESSEQUAL
5183: IFTRUE 5187
5185: GO 5215
5187: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5188: LD_EXP 25
5192: PUSH
5193: LD_INT 100
5195: DIVREAL
5196: PUSH
5197: LD_INT 1575
5199: PPUSH
5200: LD_INT 2100
5202: PPUSH
5203: CALL_OW 12
5207: MUL
5208: PPUSH
5209: CALL_OW 67
5213: GO 5425
5215: LD_INT 21000
5217: PUSH
5218: LD_INT 1
5220: PLUS
5221: DOUBLE
5222: GREATEREQUAL
5223: IFFALSE 5231
5225: LD_INT 42000
5227: DOUBLE
5228: LESSEQUAL
5229: IFTRUE 5233
5231: GO 5261
5233: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5234: LD_EXP 25
5238: PUSH
5239: LD_INT 100
5241: DIVREAL
5242: PUSH
5243: LD_INT 2100
5245: PPUSH
5246: LD_INT 2625
5248: PPUSH
5249: CALL_OW 12
5253: MUL
5254: PPUSH
5255: CALL_OW 67
5259: GO 5425
5261: LD_INT 42000
5263: PUSH
5264: LD_INT 1
5266: PLUS
5267: DOUBLE
5268: GREATEREQUAL
5269: IFFALSE 5277
5271: LD_INT 63000
5273: DOUBLE
5274: LESSEQUAL
5275: IFTRUE 5279
5277: GO 5307
5279: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5280: LD_EXP 25
5284: PUSH
5285: LD_INT 100
5287: DIVREAL
5288: PUSH
5289: LD_INT 2625
5291: PPUSH
5292: LD_INT 3150
5294: PPUSH
5295: CALL_OW 12
5299: MUL
5300: PPUSH
5301: CALL_OW 67
5305: GO 5425
5307: LD_INT 63000
5309: PUSH
5310: LD_INT 1
5312: PLUS
5313: DOUBLE
5314: GREATEREQUAL
5315: IFFALSE 5323
5317: LD_INT 105000
5319: DOUBLE
5320: LESSEQUAL
5321: IFTRUE 5325
5323: GO 5353
5325: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5326: LD_EXP 25
5330: PUSH
5331: LD_INT 100
5333: DIVREAL
5334: PUSH
5335: LD_INT 3150
5337: PPUSH
5338: LD_INT 3675
5340: PPUSH
5341: CALL_OW 12
5345: MUL
5346: PPUSH
5347: CALL_OW 67
5351: GO 5425
5353: LD_INT 105000
5355: PUSH
5356: LD_INT 1
5358: PLUS
5359: DOUBLE
5360: GREATEREQUAL
5361: IFFALSE 5369
5363: LD_INT 630000
5365: DOUBLE
5366: LESSEQUAL
5367: IFTRUE 5371
5369: GO 5399
5371: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5372: LD_EXP 25
5376: PUSH
5377: LD_INT 100
5379: DIVREAL
5380: PUSH
5381: LD_INT 3675
5383: PPUSH
5384: LD_INT 4200
5386: PPUSH
5387: CALL_OW 12
5391: MUL
5392: PPUSH
5393: CALL_OW 67
5397: GO 5425
5399: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5400: LD_EXP 25
5404: PUSH
5405: LD_INT 100
5407: DIVREAL
5408: PUSH
5409: LD_INT 4200
5411: PPUSH
5412: LD_INT 5250
5414: PPUSH
5415: CALL_OW 12
5419: MUL
5420: PPUSH
5421: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5425: LD_ADDR_VAR 0 2
5429: PUSH
5430: LD_INT 3
5432: PPUSH
5433: LD_INT 5
5435: PPUSH
5436: CALL_OW 12
5440: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5441: LD_ADDR_VAR 0 1
5445: PUSH
5446: LD_EXP 37
5450: PUSH
5451: LD_INT 0
5453: PUSH
5454: EMPTY
5455: LIST
5456: DIFF
5457: PUSH
5458: FOR_IN
5459: IFFALSE 5508
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5461: LD_VAR 0 2
5465: PPUSH
5466: LD_EXP 42
5470: PUSH
5471: LD_VAR 0 1
5475: ARRAY
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: LD_EXP 42
5485: PUSH
5486: LD_VAR 0 1
5490: ARRAY
5491: PUSH
5492: LD_INT 2
5494: ARRAY
5495: PPUSH
5496: LD_INT 20
5498: PPUSH
5499: LD_INT 1
5501: PPUSH
5502: CALL_OW 56
5506: GO 5458
5508: POP
5509: POP
// enable ;
5510: ENABLE
// end ; end_of_file
5511: PPOPN 2
5513: END
// every 20 20$00 trigger apemanNumber do
5514: LD_EXP 48
5518: IFFALSE 5551
5520: GO 5522
5522: DISABLE
// begin enable ;
5523: ENABLE
// if apeLevel >= 8 then
5524: LD_EXP 53
5528: PUSH
5529: LD_INT 8
5531: GREATEREQUAL
5532: IFFALSE 5537
// disable else
5534: DISABLE
5535: GO 5551
// apeLevel := apeLevel + 1 ;
5537: LD_ADDR_EXP 53
5541: PUSH
5542: LD_EXP 53
5546: PUSH
5547: LD_INT 1
5549: PLUS
5550: ST_TO_ADDR
// end ;
5551: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5552: LD_EXP 48
5556: PUSH
5557: LD_EXP 49
5561: LESS
5562: IFFALSE 5702
5564: GO 5566
5566: DISABLE
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
5571: PPUSH
5572: PPUSH
// begin enable ;
5573: ENABLE
// for i := 1 to apemanPos do
5574: LD_ADDR_VAR 0 1
5578: PUSH
5579: DOUBLE
5580: LD_INT 1
5582: DEC
5583: ST_TO_ADDR
5584: LD_EXP 51
5588: PUSH
5589: FOR_TO
5590: IFFALSE 5700
// begin if apemanPlayerCount [ i ] then
5592: LD_EXP 52
5596: PUSH
5597: LD_VAR 0 1
5601: ARRAY
5602: IFFALSE 5698
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5604: LD_EXP 52
5608: PUSH
5609: LD_VAR 0 1
5613: ARRAY
5614: PUSH
5615: LD_EXP 51
5619: PUSH
5620: LD_VAR 0 1
5624: ARRAY
5625: GREATER
5626: IFFALSE 5698
// begin ape := PrepareApeman ;
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: CALL 6213 0 0
5637: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5638: LD_VAR 0 2
5642: PPUSH
5643: LD_EXP 54
5647: PUSH
5648: LD_VAR 0 1
5652: ARRAY
5653: PPUSH
5654: LD_INT 0
5656: PPUSH
5657: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5661: LD_ADDR_EXP 51
5665: PUSH
5666: LD_EXP 51
5670: PPUSH
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_EXP 51
5680: PUSH
5681: LD_VAR 0 1
5685: ARRAY
5686: PUSH
5687: LD_VAR 0 2
5691: UNION
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; end ; end ;
5698: GO 5589
5700: POP
5701: POP
// end ;
5702: PPOPN 4
5704: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
5709: PPUSH
5710: PPUSH
5711: PPUSH
5712: PPUSH
5713: PPUSH
// playersAmount := 0 ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_INT 0
5721: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5722: LD_ADDR_VAR 0 7
5726: PUSH
5727: LD_INT 3
5729: PUSH
5730: LD_INT 2
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: LD_INT 4
5738: PUSH
5739: LD_INT 6
5741: PUSH
5742: LD_INT 5
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5753: LD_ADDR_EXP 54
5757: PUSH
5758: LD_INT 0
5760: PUSH
5761: LD_INT 0
5763: PUSH
5764: LD_INT 0
5766: PUSH
5767: LD_INT 0
5769: PUSH
5770: LD_INT 0
5772: PUSH
5773: LD_INT 0
5775: PUSH
5776: LD_INT 0
5778: PUSH
5779: LD_INT 0
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: ST_TO_ADDR
// for j = 1 to Side_Positions do
5792: LD_ADDR_VAR 0 4
5796: PUSH
5797: DOUBLE
5798: LD_INT 1
5800: DEC
5801: ST_TO_ADDR
5802: LD_EXP 37
5806: PUSH
5807: FOR_TO
5808: IFFALSE 5875
// if Side_Positions [ j ] then
5810: LD_EXP 37
5814: PUSH
5815: LD_VAR 0 4
5819: ARRAY
5820: IFFALSE 5873
// begin playersAmount := playersAmount + 1 ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_VAR 0 3
5831: PUSH
5832: LD_INT 1
5834: PLUS
5835: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5836: LD_ADDR_EXP 54
5840: PUSH
5841: LD_EXP 54
5845: PPUSH
5846: LD_VAR 0 4
5850: PPUSH
5851: LD_VAR 0 7
5855: PUSH
5856: LD_EXP 37
5860: PUSH
5861: LD_VAR 0 4
5865: ARRAY
5866: ARRAY
5867: PPUSH
5868: CALL_OW 1
5872: ST_TO_ADDR
// end ;
5873: GO 5807
5875: POP
5876: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5877: LD_ADDR_EXP 50
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_EXP 27
5889: MUL
5890: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5891: LD_ADDR_EXP 48
5895: PUSH
5896: LD_VAR 0 3
5900: PUSH
5901: LD_EXP 50
5905: MUL
5906: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5907: LD_ADDR_EXP 49
5911: PUSH
5912: LD_EXP 48
5916: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5917: LD_ADDR_EXP 51
5921: PUSH
5922: LD_INT 0
5924: PUSH
5925: LD_INT 0
5927: PUSH
5928: LD_INT 0
5930: PUSH
5931: LD_INT 0
5933: PUSH
5934: LD_INT 0
5936: PUSH
5937: LD_INT 0
5939: PUSH
5940: LD_INT 0
5942: PUSH
5943: LD_INT 0
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5956: LD_ADDR_EXP 52
5960: PUSH
5961: LD_INT 0
5963: PUSH
5964: LD_INT 0
5966: PUSH
5967: LD_INT 0
5969: PUSH
5970: LD_INT 0
5972: PUSH
5973: LD_INT 0
5975: PUSH
5976: LD_INT 0
5978: PUSH
5979: LD_INT 0
5981: PUSH
5982: LD_INT 0
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: ST_TO_ADDR
// apeLevel := 1 ;
5995: LD_ADDR_EXP 53
5999: PUSH
6000: LD_INT 1
6002: ST_TO_ADDR
// if not apemanNumber then
6003: LD_EXP 48
6007: NOT
6008: IFFALSE 6012
// exit ;
6010: GO 6208
// for i := 1 to apemanPerPlayer do
6012: LD_ADDR_VAR 0 2
6016: PUSH
6017: DOUBLE
6018: LD_INT 1
6020: DEC
6021: ST_TO_ADDR
6022: LD_EXP 50
6026: PUSH
6027: FOR_TO
6028: IFFALSE 6206
// begin for j := 1 to Side_Positions do
6030: LD_ADDR_VAR 0 4
6034: PUSH
6035: DOUBLE
6036: LD_INT 1
6038: DEC
6039: ST_TO_ADDR
6040: LD_EXP 37
6044: PUSH
6045: FOR_TO
6046: IFFALSE 6202
// if Side_Positions [ j ] then
6048: LD_EXP 37
6052: PUSH
6053: LD_VAR 0 4
6057: ARRAY
6058: IFFALSE 6200
// begin pos := Side_Positions [ j ] ;
6060: LD_ADDR_VAR 0 6
6064: PUSH
6065: LD_EXP 37
6069: PUSH
6070: LD_VAR 0 4
6074: ARRAY
6075: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6076: LD_ADDR_EXP 52
6080: PUSH
6081: LD_EXP 52
6085: PPUSH
6086: LD_VAR 0 4
6090: PPUSH
6091: LD_EXP 52
6095: PUSH
6096: LD_VAR 0 4
6100: ARRAY
6101: PUSH
6102: LD_INT 1
6104: PLUS
6105: PPUSH
6106: CALL_OW 1
6110: ST_TO_ADDR
// ape := PrepareApeman ;
6111: LD_ADDR_VAR 0 5
6115: PUSH
6116: CALL 6213 0 0
6120: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6121: LD_ADDR_EXP 51
6125: PUSH
6126: LD_EXP 51
6130: PPUSH
6131: LD_VAR 0 4
6135: PPUSH
6136: LD_EXP 51
6140: PUSH
6141: LD_VAR 0 4
6145: ARRAY
6146: PPUSH
6147: LD_EXP 51
6151: PUSH
6152: LD_VAR 0 4
6156: ARRAY
6157: PUSH
6158: LD_INT 1
6160: PLUS
6161: PPUSH
6162: LD_VAR 0 5
6166: PPUSH
6167: CALL_OW 1
6171: PPUSH
6172: CALL_OW 1
6176: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6177: LD_VAR 0 5
6181: PPUSH
6182: LD_EXP 54
6186: PUSH
6187: LD_VAR 0 4
6191: ARRAY
6192: PPUSH
6193: LD_INT 0
6195: PPUSH
6196: CALL_OW 49
// end ;
6200: GO 6045
6202: POP
6203: POP
// end ;
6204: GO 6027
6206: POP
6207: POP
// end ;
6208: LD_VAR 0 1
6212: RET
// export function PrepareApeman ; var bonus ; begin
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
// uc_side := 0 ;
6217: LD_ADDR_OWVAR 20
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// uc_nation := 0 ;
6225: LD_ADDR_OWVAR 21
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// InitHc ;
6233: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6237: LD_ADDR_VAR 0 2
6241: PUSH
6242: LD_INT 1
6244: NEG
6245: PUSH
6246: LD_INT 0
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_OWVAR 1
6261: PUSH
6262: LD_INT 3
6264: MOD
6265: PUSH
6266: LD_INT 1
6268: PLUS
6269: ARRAY
6270: ST_TO_ADDR
// hc_class := class_apeman ;
6271: LD_ADDR_OWVAR 28
6275: PUSH
6276: LD_INT 12
6278: ST_TO_ADDR
// hc_gallery :=  ;
6279: LD_ADDR_OWVAR 33
6283: PUSH
6284: LD_STRING 
6286: ST_TO_ADDR
// hc_name :=  ;
6287: LD_ADDR_OWVAR 26
6291: PUSH
6292: LD_STRING 
6294: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6295: LD_ADDR_OWVAR 31
6299: PUSH
6300: LD_EXP 53
6304: PUSH
6305: LD_VAR 0 2
6309: PLUS
6310: PUSH
6311: LD_EXP 53
6315: PUSH
6316: LD_VAR 0 2
6320: PLUS
6321: PUSH
6322: LD_EXP 53
6326: PUSH
6327: LD_VAR 0 2
6331: PLUS
6332: PUSH
6333: LD_EXP 53
6337: PUSH
6338: LD_VAR 0 2
6342: PLUS
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6350: LD_ADDR_OWVAR 35
6354: PUSH
6355: LD_INT 10
6357: PUSH
6358: LD_VAR 0 2
6362: MUL
6363: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6364: LD_ADDR_OWVAR 29
6368: PUSH
6369: LD_INT 12
6371: PUSH
6372: LD_INT 10
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: ST_TO_ADDR
// result := CreateHuman ;
6379: LD_ADDR_VAR 0 1
6383: PUSH
6384: CALL_OW 44
6388: ST_TO_ADDR
// end ;
6389: LD_VAR 0 1
6393: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6394: LD_INT 0
6396: PPUSH
6397: PPUSH
6398: PPUSH
// if not ape then
6399: LD_VAR 0 1
6403: NOT
6404: IFFALSE 6408
// exit ;
6406: GO 6533
// side := GetSide ( ape ) ;
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 255
6422: ST_TO_ADDR
// if not side then
6423: LD_VAR 0 3
6427: NOT
6428: IFFALSE 6482
// begin for i = 1 to apemanPos do
6430: LD_ADDR_VAR 0 4
6434: PUSH
6435: DOUBLE
6436: LD_INT 1
6438: DEC
6439: ST_TO_ADDR
6440: LD_EXP 51
6444: PUSH
6445: FOR_TO
6446: IFFALSE 6480
// if ape in apemanPos [ i ] then
6448: LD_VAR 0 1
6452: PUSH
6453: LD_EXP 51
6457: PUSH
6458: LD_VAR 0 4
6462: ARRAY
6463: IN
6464: IFFALSE 6478
// begin side := i ;
6466: LD_ADDR_VAR 0 3
6470: PUSH
6471: LD_VAR 0 4
6475: ST_TO_ADDR
// break ;
6476: GO 6480
// end ;
6478: GO 6445
6480: POP
6481: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6482: LD_ADDR_EXP 51
6486: PUSH
6487: LD_EXP 51
6491: PPUSH
6492: LD_VAR 0 3
6496: PPUSH
6497: LD_EXP 51
6501: PUSH
6502: LD_VAR 0 3
6506: ARRAY
6507: PUSH
6508: LD_VAR 0 1
6512: DIFF
6513: PPUSH
6514: CALL_OW 1
6518: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6519: LD_ADDR_EXP 48
6523: PUSH
6524: LD_EXP 48
6528: PUSH
6529: LD_INT 1
6531: MINUS
6532: ST_TO_ADDR
// end ; end_of_file
6533: LD_VAR 0 2
6537: RET
// var respawn , inqueue ; export function init_respawning ; begin
6538: LD_INT 0
6540: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6541: LD_ADDR_LOC 9
6545: PUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 8
6551: PPUSH
6552: CALL_OW 12
6556: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6557: LD_ADDR_LOC 10
6561: PUSH
6562: LD_INT 0
6564: PUSH
6565: LD_INT 0
6567: PUSH
6568: LD_INT 0
6570: PUSH
6571: LD_INT 0
6573: PUSH
6574: LD_INT 0
6576: PUSH
6577: LD_INT 0
6579: PUSH
6580: LD_INT 0
6582: PUSH
6583: LD_INT 0
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: ST_TO_ADDR
// end ;
6596: LD_VAR 0 1
6600: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6601: GO 6603
6603: DISABLE
6604: LD_INT 0
6606: PPUSH
6607: PPUSH
6608: PPUSH
// begin if respawning_time_max = 0 then
6609: LD_EXP 30
6613: PUSH
6614: LD_INT 0
6616: EQUAL
6617: IFFALSE 6621
// exit ;
6619: GO 7030
// if respawn = 8 then
6621: LD_LOC 9
6625: PUSH
6626: LD_INT 8
6628: EQUAL
6629: IFFALSE 6641
// respawn := 1 else
6631: LD_ADDR_LOC 9
6635: PUSH
6636: LD_INT 1
6638: ST_TO_ADDR
6639: GO 6655
// respawn := respawn + 1 ;
6641: LD_ADDR_LOC 9
6645: PUSH
6646: LD_LOC 9
6650: PUSH
6651: LD_INT 1
6653: PLUS
6654: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6655: LD_EXP 37
6659: PUSH
6660: LD_LOC 9
6664: ARRAY
6665: PUSH
6666: LD_LOC 10
6670: PUSH
6671: LD_LOC 9
6675: ARRAY
6676: NOT
6677: AND
6678: IFFALSE 7029
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6680: LD_ADDR_VAR 0 1
6684: PUSH
6685: LD_INT 21
6687: PUSH
6688: LD_INT 1
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: PUSH
6695: LD_INT 22
6697: PUSH
6698: LD_LOC 9
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 23
6712: PUSH
6713: LD_INT 0
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: PPUSH
6726: CALL_OW 69
6730: ST_TO_ADDR
// if n < number_of_people then
6731: LD_VAR 0 1
6735: PUSH
6736: LD_EXP 21
6740: LESS
6741: IFFALSE 7026
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_INT 21
6750: PUSH
6751: LD_INT 3
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: LD_INT 2
6760: PUSH
6761: LD_INT 30
6763: PUSH
6764: LD_INT 0
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: LD_INT 30
6773: PUSH
6774: LD_INT 1
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: LIST
6785: PUSH
6786: LD_INT 50
6788: PUSH
6789: EMPTY
6790: LIST
6791: PUSH
6792: LD_INT 22
6794: PUSH
6795: LD_LOC 9
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: PPUSH
6810: CALL_OW 69
6814: ST_TO_ADDR
// if dep > 0 then
6815: LD_VAR 0 2
6819: PUSH
6820: LD_INT 0
6822: GREATER
6823: IFFALSE 7023
// begin aktresp := respawn ;
6825: LD_ADDR_VAR 0 3
6829: PUSH
6830: LD_LOC 9
6834: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
6835: LD_ADDR_LOC 10
6839: PUSH
6840: LD_LOC 10
6844: PPUSH
6845: LD_VAR 0 3
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: CALL_OW 1
6857: ST_TO_ADDR
// enable ;
6858: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6859: LD_EXP 29
6863: PPUSH
6864: LD_EXP 30
6868: PPUSH
6869: CALL_OW 12
6873: PPUSH
6874: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6878: LD_ADDR_LOC 10
6882: PUSH
6883: LD_LOC 10
6887: PPUSH
6888: LD_VAR 0 3
6892: PPUSH
6893: LD_INT 0
6895: PPUSH
6896: CALL_OW 1
6900: ST_TO_ADDR
// hc_name :=  ;
6901: LD_ADDR_OWVAR 26
6905: PUSH
6906: LD_STRING 
6908: ST_TO_ADDR
// hc_importance := 0 ;
6909: LD_ADDR_OWVAR 32
6913: PUSH
6914: LD_INT 0
6916: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6917: LD_INT 0
6919: PPUSH
6920: LD_INT 0
6922: PPUSH
6923: LD_EXP 22
6927: PUSH
6928: LD_INT 2
6930: DIV
6931: PPUSH
6932: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6936: LD_ADDR_OWVAR 21
6940: PUSH
6941: LD_EXP 38
6945: PUSH
6946: LD_VAR 0 3
6950: ARRAY
6951: ST_TO_ADDR
// uc_side := aktresp ;
6952: LD_ADDR_OWVAR 20
6956: PUSH
6957: LD_VAR 0 3
6961: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
6962: LD_ADDR_VAR 0 2
6966: PUSH
6967: LD_VAR 0 2
6971: PUSH
6972: LD_INT 1
6974: PPUSH
6975: LD_VAR 0 2
6979: PPUSH
6980: CALL_OW 12
6984: ARRAY
6985: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
6986: CALL_OW 44
6990: PPUSH
6991: LD_VAR 0 2
6995: PPUSH
6996: CALL_OW 250
7000: PPUSH
7001: LD_VAR 0 2
7005: PPUSH
7006: CALL_OW 251
7010: PPUSH
7011: LD_INT 7
7013: PPUSH
7014: LD_INT 1
7016: PPUSH
7017: CALL_OW 50
// end else
7021: GO 7024
// enable ;
7023: ENABLE
// end else
7024: GO 7027
// enable ;
7026: ENABLE
// end else
7027: GO 7030
// enable ;
7029: ENABLE
// end ; end_of_file
7030: PPOPN 3
7032: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7033: LD_VAR 0 1
7037: PPUSH
7038: CALL_OW 266
7042: PUSH
7043: LD_INT 0
7045: PUSH
7046: LD_INT 1
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: IN
7053: IFFALSE 7078
// SetBName ( b , @ & GetSide ( b ) ) ;
7055: LD_VAR 0 1
7059: PPUSH
7060: LD_STRING @
7062: PUSH
7063: LD_VAR 0 1
7067: PPUSH
7068: CALL_OW 255
7072: STR
7073: PPUSH
7074: CALL_OW 500
// end ;
7078: PPOPN 2
7080: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7081: LD_VAR 0 1
7085: PPUSH
7086: CALL_OW 266
7090: PUSH
7091: LD_INT 0
7093: PUSH
7094: LD_INT 1
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: IN
7101: IFFALSE 7126
// SetBName ( b , @ & GetSide ( b ) ) ;
7103: LD_VAR 0 1
7107: PPUSH
7108: LD_STRING @
7110: PUSH
7111: LD_VAR 0 1
7115: PPUSH
7116: CALL_OW 255
7120: STR
7121: PPUSH
7122: CALL_OW 500
// end ;
7126: PPOPN 3
7128: END
// on VehicleConstructed ( veh , fac ) do var side ;
7129: LD_INT 0
7131: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7132: LD_VAR 0 1
7136: PPUSH
7137: CALL_OW 263
7141: PUSH
7142: LD_INT 5
7144: EQUAL
7145: IFFALSE 7287
// begin side := GetSide ( veh ) ;
7147: LD_ADDR_VAR 0 3
7151: PUSH
7152: LD_VAR 0 1
7156: PPUSH
7157: CALL_OW 255
7161: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7162: LD_ADDR_EXP 51
7166: PUSH
7167: LD_EXP 51
7171: PPUSH
7172: LD_VAR 0 3
7176: PPUSH
7177: LD_EXP 51
7181: PUSH
7182: LD_VAR 0 3
7186: ARRAY
7187: PPUSH
7188: LD_INT 52
7190: PUSH
7191: EMPTY
7192: LIST
7193: PPUSH
7194: CALL_OW 72
7198: PUSH
7199: LD_INT 22
7201: PUSH
7202: LD_VAR 0 3
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 2
7213: PUSH
7214: LD_INT 33
7216: PUSH
7217: LD_INT 5
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 25
7226: PUSH
7227: LD_INT 12
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 25
7236: PUSH
7237: LD_INT 15
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 25
7246: PUSH
7247: LD_INT 16
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 25
7256: PUSH
7257: LD_INT 17
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PPUSH
7276: CALL_OW 69
7280: UNION
7281: PPUSH
7282: CALL_OW 1
7286: ST_TO_ADDR
// end ; end ;
7287: PPOPN 3
7289: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7290: LD_INT 0
7292: PPUSH
7293: PPUSH
7294: PPUSH
7295: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7296: LD_VAR 0 1
7300: PPUSH
7301: CALL_OW 257
7305: PUSH
7306: LD_INT 12
7308: PUSH
7309: LD_INT 15
7311: PUSH
7312: LD_INT 17
7314: PUSH
7315: LD_INT 16
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: IN
7324: PUSH
7325: LD_VAR 0 1
7329: PPUSH
7330: CALL_OW 263
7334: PUSH
7335: LD_INT 5
7337: EQUAL
7338: OR
7339: IFFALSE 7350
// ApeKilled ( j ) ;
7341: LD_VAR 0 1
7345: PPUSH
7346: CALL 6394 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7350: LD_VAR 0 1
7354: PPUSH
7355: CALL_OW 266
7359: PUSH
7360: LD_INT 0
7362: PUSH
7363: LD_INT 1
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: IN
7370: IFFALSE 7452
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7372: LD_ADDR_VAR 0 4
7376: PUSH
7377: LD_EXP 37
7381: PUSH
7382: LD_VAR 0 1
7386: PPUSH
7387: CALL_OW 255
7391: ARRAY
7392: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7393: LD_ADDR_VAR 0 2
7397: PUSH
7398: LD_EXP 42
7402: PUSH
7403: LD_VAR 0 4
7407: ARRAY
7408: PUSH
7409: LD_INT 1
7411: ARRAY
7412: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7413: LD_ADDR_VAR 0 3
7417: PUSH
7418: LD_EXP 42
7422: PUSH
7423: LD_VAR 0 4
7427: ARRAY
7428: PUSH
7429: LD_INT 2
7431: ARRAY
7432: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7433: LD_VAR 0 2
7437: PPUSH
7438: LD_VAR 0 3
7442: PPUSH
7443: CALL_OW 420
7447: PPUSH
7448: CALL_OW 419
// end ; end ;
7452: PPOPN 5
7454: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7455: LD_VAR 0 1
7459: PPUSH
7460: LD_VAR 0 2
7464: PPUSH
7465: LD_VAR 0 3
7469: PPUSH
7470: LD_OWVAR 2
7474: PPUSH
7475: CALL 9102 0 4
7479: PPOPN 3
7481: END
// function CanWinLoose ; begin
7482: LD_INT 0
7484: PPUSH
// Result := true ;
7485: LD_ADDR_VAR 0 1
7489: PUSH
7490: LD_INT 1
7492: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7493: CALL_OW 518
7497: PUSH
7498: CALL_OW 519
7502: PUSH
7503: LD_INT 0
7505: GREATER
7506: AND
7507: IFFALSE 7517
// Result := false ;
7509: LD_ADDR_VAR 0 1
7513: PUSH
7514: LD_INT 0
7516: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7517: CALL_OW 531
7521: PUSH
7522: CALL_OW 519
7526: PUSH
7527: LD_INT 1
7529: GREATER
7530: AND
7531: IFFALSE 7541
// Result := false ;
7533: LD_ADDR_VAR 0 1
7537: PUSH
7538: LD_INT 0
7540: ST_TO_ADDR
// end ;
7541: LD_VAR 0 1
7545: RET
// function HasPower ( i ) ; begin
7546: LD_INT 0
7548: PPUSH
// if def_people_respawning then
7549: LD_EXP 11
7553: IFFALSE 7644
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7555: LD_ADDR_VAR 0 2
7559: PUSH
7560: LD_INT 22
7562: PUSH
7563: LD_VAR 0 1
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 2
7574: PUSH
7575: LD_INT 21
7577: PUSH
7578: LD_INT 1
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 33
7587: PUSH
7588: LD_INT 3
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 33
7597: PUSH
7598: LD_INT 5
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 30
7607: PUSH
7608: LD_INT 0
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 30
7617: PUSH
7618: LD_INT 1
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PPUSH
7637: CALL_OW 69
7641: ST_TO_ADDR
7642: GO 7709
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
7644: LD_ADDR_VAR 0 2
7648: PUSH
7649: LD_INT 22
7651: PUSH
7652: LD_VAR 0 1
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 2
7663: PUSH
7664: LD_INT 21
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 33
7676: PUSH
7677: LD_INT 3
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: LD_INT 33
7686: PUSH
7687: LD_INT 5
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PPUSH
7704: CALL_OW 69
7708: ST_TO_ADDR
// end ;
7709: LD_VAR 0 2
7713: RET
// function AlliedSides ( i , j ) ; begin
7714: LD_INT 0
7716: PPUSH
// Result := false ;
7717: LD_ADDR_VAR 0 3
7721: PUSH
7722: LD_INT 0
7724: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7725: LD_VAR 0 1
7729: PPUSH
7730: LD_VAR 0 2
7734: PPUSH
7735: CALL_OW 81
7739: PUSH
7740: LD_INT 1
7742: EQUAL
7743: PUSH
7744: LD_VAR 0 2
7748: PPUSH
7749: LD_VAR 0 1
7753: PPUSH
7754: CALL_OW 81
7758: PUSH
7759: LD_INT 1
7761: EQUAL
7762: AND
7763: PUSH
7764: LD_VAR 0 1
7768: PPUSH
7769: CALL_OW 83
7773: AND
7774: PUSH
7775: LD_VAR 0 2
7779: PPUSH
7780: CALL_OW 83
7784: AND
7785: IFFALSE 7795
// Result := true ;
7787: LD_ADDR_VAR 0 3
7791: PUSH
7792: LD_INT 1
7794: ST_TO_ADDR
// end ;
7795: LD_VAR 0 3
7799: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7800: CALL 7482 0 0
7804: IFFALSE 7813
7806: GO 7808
7808: DISABLE
// YouLostInMultiplayer ;
7809: CALL_OW 107
7813: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7814: CALL 7482 0 0
7818: IFFALSE 7842
7820: GO 7822
7822: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7823: LD_EXP 38
7827: PUSH
7828: LD_OWVAR 2
7832: ARRAY
7833: PPUSH
7834: CALL 9144 0 1
// YouWinInMultiplayer ;
7838: CALL_OW 106
// end ;
7842: END
// every 0 0$3 marked 98 do var i , CanWin ;
7843: GO 7845
7845: DISABLE
7846: LD_INT 0
7848: PPUSH
7849: PPUSH
// begin if not HasPower ( your_side ) then
7850: LD_OWVAR 2
7854: PPUSH
7855: CALL 7546 0 1
7859: NOT
7860: IFFALSE 7871
// begin Multiplayer_Loose_Message ;
7862: CALL_OW 521
// enable ( 400 ) ;
7866: LD_INT 400
7868: ENABLE_MARKED
// end else
7869: GO 8004
// begin CanWin := true ;
7871: LD_ADDR_VAR 0 2
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// for i := 1 to 8 do
7879: LD_ADDR_VAR 0 1
7883: PUSH
7884: DOUBLE
7885: LD_INT 1
7887: DEC
7888: ST_TO_ADDR
7889: LD_INT 8
7891: PUSH
7892: FOR_TO
7893: IFFALSE 7990
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7895: LD_EXP 37
7899: PUSH
7900: LD_VAR 0 1
7904: ARRAY
7905: PUSH
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 108
7915: AND
7916: PUSH
7917: LD_VAR 0 1
7921: PUSH
7922: LD_OWVAR 2
7926: NONEQUAL
7927: AND
7928: IFFALSE 7988
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7930: LD_EXP 35
7934: PUSH
7935: LD_VAR 0 1
7939: ARRAY
7940: NOT
7941: PUSH
7942: LD_EXP 35
7946: PUSH
7947: LD_VAR 0 1
7951: ARRAY
7952: PUSH
7953: LD_EXP 35
7957: PUSH
7958: LD_OWVAR 2
7962: ARRAY
7963: NONEQUAL
7964: OR
7965: IFFALSE 7988
// if HasPower ( i ) then
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL 7546 0 1
7976: IFFALSE 7988
// begin CanWin := false ;
7978: LD_ADDR_VAR 0 2
7982: PUSH
7983: LD_INT 0
7985: ST_TO_ADDR
// break ;
7986: GO 7990
// end ;
7988: GO 7892
7990: POP
7991: POP
// if CanWin then
7992: LD_VAR 0 2
7996: IFFALSE 8003
// enable ( 401 ) else
7998: LD_INT 401
8000: ENABLE_MARKED
8001: GO 8004
// enable ;
8003: ENABLE
// end ; end ;
8004: PPOPN 2
8006: END
// every 0 0$3 marked 99 do var i , CanWin ;
8007: GO 8009
8009: DISABLE
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
// begin if not HasPower ( your_side ) then
8014: LD_OWVAR 2
8018: PPUSH
8019: CALL 7546 0 1
8023: NOT
8024: IFFALSE 8035
// begin Multiplayer_Loose_Message ;
8026: CALL_OW 521
// enable ( 400 ) ;
8030: LD_INT 400
8032: ENABLE_MARKED
// end else
8033: GO 8148
// begin CanWin := true ;
8035: LD_ADDR_VAR 0 2
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// for i := 1 to 8 do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: DOUBLE
8049: LD_INT 1
8051: DEC
8052: ST_TO_ADDR
8053: LD_INT 8
8055: PUSH
8056: FOR_TO
8057: IFFALSE 8134
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8059: LD_EXP 37
8063: PUSH
8064: LD_VAR 0 1
8068: ARRAY
8069: PUSH
8070: LD_VAR 0 1
8074: PPUSH
8075: CALL_OW 108
8079: AND
8080: PUSH
8081: LD_VAR 0 1
8085: PUSH
8086: LD_OWVAR 2
8090: NONEQUAL
8091: AND
8092: IFFALSE 8132
// if not AlliedSides ( i , your_side ) then
8094: LD_VAR 0 1
8098: PPUSH
8099: LD_OWVAR 2
8103: PPUSH
8104: CALL 7714 0 2
8108: NOT
8109: IFFALSE 8132
// if HasPower ( i ) then
8111: LD_VAR 0 1
8115: PPUSH
8116: CALL 7546 0 1
8120: IFFALSE 8132
// begin CanWin := false ;
8122: LD_ADDR_VAR 0 2
8126: PUSH
8127: LD_INT 0
8129: ST_TO_ADDR
// break ;
8130: GO 8134
// end ;
8132: GO 8056
8134: POP
8135: POP
// if CanWin then
8136: LD_VAR 0 2
8140: IFFALSE 8147
// enable ( 401 ) else
8142: LD_INT 401
8144: ENABLE_MARKED
8145: GO 8148
// enable ;
8147: ENABLE
// end ; end ; end_of_file
8148: PPOPN 2
8150: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8151: LD_INT 0
8153: PPUSH
8154: PPUSH
// for un in battle_flags_id do
8155: LD_ADDR_VAR 0 2
8159: PUSH
8160: LD_EXP 47
8164: PUSH
8165: FOR_IN
8166: IFFALSE 8241
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8168: LD_VAR 0 2
8172: PPUSH
8173: LD_INT 1
8175: PUSH
8176: LD_LOC 11
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PUSH
8185: LD_INT 2
8187: PUSH
8188: LD_LOC 11
8192: PUSH
8193: LD_INT 2
8195: DIV
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 3
8203: PUSH
8204: LD_LOC 11
8208: PUSH
8209: LD_INT 5
8211: DIV
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 20
8219: PUSH
8220: LD_LOC 11
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: PPUSH
8235: CALL_OW 423
8239: GO 8165
8241: POP
8242: POP
// end ;
8243: LD_VAR 0 1
8247: RET
// every 1 do var un ;
8248: GO 8250
8250: DISABLE
8251: LD_INT 0
8253: PPUSH
// begin if not def_morale_flags then
8254: LD_EXP 9
8258: NOT
8259: IFFALSE 8263
// exit ;
8261: GO 8340
// if not morale_decreasing_time then
8263: LD_EXP 26
8267: NOT
8268: IFFALSE 8272
// exit ;
8270: GO 8340
// strength = 100 ;
8272: LD_ADDR_LOC 11
8276: PUSH
8277: LD_INT 100
8279: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8280: LD_EXP 26
8284: PPUSH
8285: CALL_OW 67
// strength := strength - 1 ;
8289: LD_ADDR_LOC 11
8293: PUSH
8294: LD_LOC 11
8298: PUSH
8299: LD_INT 1
8301: MINUS
8302: ST_TO_ADDR
// Update_Flags ;
8303: CALL 8151 0 0
// until not strength ;
8307: LD_LOC 11
8311: NOT
8312: IFFALSE 8280
// for un in battle_flags_id do
8314: LD_ADDR_VAR 0 1
8318: PUSH
8319: LD_EXP 47
8323: PUSH
8324: FOR_IN
8325: IFFALSE 8338
// KillBattleFlag ( un ) ;
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 419
8336: GO 8324
8338: POP
8339: POP
// end ; end_of_file
8340: PPOPN 1
8342: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
8343: LD_INT 0
8345: PPUSH
8346: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8347: LD_ADDR_VAR 0 2
8351: PUSH
8352: LD_STRING #Multi1x1-Time
8354: PUSH
8355: LD_OWVAR 1
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8364: LD_INT 0
8366: PUSH
8367: LD_EXP 33
8371: PUSH
8372: LD_OWVAR 1
8376: MINUS
8377: LESSEQUAL
8378: IFFALSE 8409
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8380: LD_ADDR_VAR 0 2
8384: PUSH
8385: LD_VAR 0 2
8389: PUSH
8390: LD_STRING #allowedsibbomb
8392: PUSH
8393: LD_EXP 33
8397: PUSH
8398: LD_OWVAR 1
8402: MINUS
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: ADD
8408: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8409: LD_INT 0
8411: PUSH
8412: LD_EXP 58
8416: PUSH
8417: LD_OWVAR 1
8421: MINUS
8422: LESSEQUAL
8423: IFFALSE 8454
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8425: LD_ADDR_VAR 0 2
8429: PUSH
8430: LD_VAR 0 2
8434: PUSH
8435: LD_STRING #builduptime
8437: PUSH
8438: LD_EXP 58
8442: PUSH
8443: LD_OWVAR 1
8447: MINUS
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: ADD
8453: ST_TO_ADDR
// if ( ExtraStrings ) then
8454: LD_EXP 55
8458: IFFALSE 8480
// AllStrings := AllStrings ^  ^ ExtraStrings ;
8460: LD_ADDR_VAR 0 2
8464: PUSH
8465: LD_VAR 0 2
8469: PUSH
8470: LD_STRING 
8472: ADD
8473: PUSH
8474: LD_EXP 55
8478: ADD
8479: ST_TO_ADDR
// Display_Strings := AllStrings ;
8480: LD_ADDR_OWVAR 47
8484: PUSH
8485: LD_VAR 0 2
8489: ST_TO_ADDR
// end ;
8490: LD_VAR 0 1
8494: RET
// every 0 0$1 do
8495: GO 8497
8497: DISABLE
// begin ShowTimer ;
8498: CALL 8343 0 0
// enable ;
8502: ENABLE
// end ; end_of_file
8503: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
8504: LD_INT 0
8506: PPUSH
8507: PPUSH
8508: PPUSH
// BuildUpTime_Delay = 0 ;
8509: LD_ADDR_EXP 58
8513: PUSH
8514: LD_INT 0
8516: ST_TO_ADDR
// if not def_builduptime then
8517: LD_EXP 16
8521: NOT
8522: IFFALSE 8526
// exit ;
8524: GO 8709
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
8526: LD_ADDR_EXP 58
8530: PUSH
8531: LD_INT 8400
8533: PUSH
8534: LD_INT 2100
8536: PUSH
8537: LD_EXP 16
8541: MUL
8542: PLUS
8543: ST_TO_ADDR
// BuildUpTimeActive := true ;
8544: LD_ADDR_EXP 57
8548: PUSH
8549: LD_INT 1
8551: ST_TO_ADDR
// for i := 1 to 8 do
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: DOUBLE
8558: LD_INT 1
8560: DEC
8561: ST_TO_ADDR
8562: LD_INT 8
8564: PUSH
8565: FOR_TO
8566: IFFALSE 8707
// if Side_Positions [ i ] then
8568: LD_EXP 37
8572: PUSH
8573: LD_VAR 0 2
8577: ARRAY
8578: IFFALSE 8705
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
8580: LD_EXP 56
8584: PUSH
8585: LD_EXP 37
8589: PUSH
8590: LD_VAR 0 2
8594: ARRAY
8595: ARRAY
8596: PPUSH
8597: LD_INT 5
8599: PPUSH
8600: CALL_OW 424
// for j := 1 to 8 do
8604: LD_ADDR_VAR 0 3
8608: PUSH
8609: DOUBLE
8610: LD_INT 1
8612: DEC
8613: ST_TO_ADDR
8614: LD_INT 8
8616: PUSH
8617: FOR_TO
8618: IFFALSE 8703
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8620: LD_EXP 37
8624: PUSH
8625: LD_VAR 0 3
8629: ARRAY
8630: PUSH
8631: LD_EXP 35
8635: PUSH
8636: LD_VAR 0 2
8640: ARRAY
8641: PUSH
8642: LD_EXP 35
8646: PUSH
8647: LD_VAR 0 3
8651: ARRAY
8652: NONEQUAL
8653: PUSH
8654: LD_EXP 39
8658: NOT
8659: PUSH
8660: LD_VAR 0 2
8664: PUSH
8665: LD_VAR 0 3
8669: NONEQUAL
8670: AND
8671: OR
8672: AND
8673: IFFALSE 8701
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8675: LD_VAR 0 3
8679: PPUSH
8680: LD_EXP 56
8684: PUSH
8685: LD_EXP 37
8689: PUSH
8690: LD_VAR 0 2
8694: ARRAY
8695: ARRAY
8696: PPUSH
8697: CALL_OW 333
8701: GO 8617
8703: POP
8704: POP
// end ;
8705: GO 8565
8707: POP
8708: POP
// end ;
8709: LD_VAR 0 1
8713: RET
// export function EndBuildUp ; var i , j ; begin
8714: LD_INT 0
8716: PPUSH
8717: PPUSH
8718: PPUSH
// BuildUpTimeActive := false ;
8719: LD_ADDR_EXP 57
8723: PUSH
8724: LD_INT 0
8726: ST_TO_ADDR
// for i := 1 to 8 do
8727: LD_ADDR_VAR 0 2
8731: PUSH
8732: DOUBLE
8733: LD_INT 1
8735: DEC
8736: ST_TO_ADDR
8737: LD_INT 8
8739: PUSH
8740: FOR_TO
8741: IFFALSE 8882
// if Side_Positions [ i ] then
8743: LD_EXP 37
8747: PUSH
8748: LD_VAR 0 2
8752: ARRAY
8753: IFFALSE 8880
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
8755: LD_EXP 56
8759: PUSH
8760: LD_EXP 37
8764: PUSH
8765: LD_VAR 0 2
8769: ARRAY
8770: ARRAY
8771: PPUSH
8772: LD_INT 0
8774: PPUSH
8775: CALL_OW 424
// for j := 1 to 8 do
8779: LD_ADDR_VAR 0 3
8783: PUSH
8784: DOUBLE
8785: LD_INT 1
8787: DEC
8788: ST_TO_ADDR
8789: LD_INT 8
8791: PUSH
8792: FOR_TO
8793: IFFALSE 8878
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8795: LD_EXP 37
8799: PUSH
8800: LD_VAR 0 3
8804: ARRAY
8805: PUSH
8806: LD_EXP 35
8810: PUSH
8811: LD_VAR 0 2
8815: ARRAY
8816: PUSH
8817: LD_EXP 35
8821: PUSH
8822: LD_VAR 0 3
8826: ARRAY
8827: NONEQUAL
8828: PUSH
8829: LD_EXP 39
8833: NOT
8834: PUSH
8835: LD_VAR 0 2
8839: PUSH
8840: LD_VAR 0 3
8844: NONEQUAL
8845: AND
8846: OR
8847: AND
8848: IFFALSE 8876
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8850: LD_VAR 0 3
8854: PPUSH
8855: LD_EXP 56
8859: PUSH
8860: LD_EXP 37
8864: PUSH
8865: LD_VAR 0 2
8869: ARRAY
8870: ARRAY
8871: PPUSH
8872: CALL_OW 334
8876: GO 8792
8878: POP
8879: POP
// end ;
8880: GO 8740
8882: POP
8883: POP
// end ;
8884: LD_VAR 0 1
8888: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
8889: LD_EXP 57
8893: IFFALSE 9068
8895: GO 8897
8897: DISABLE
8898: LD_INT 0
8900: PPUSH
8901: PPUSH
// begin for i := 1 to 8 do
8902: LD_ADDR_VAR 0 1
8906: PUSH
8907: DOUBLE
8908: LD_INT 1
8910: DEC
8911: ST_TO_ADDR
8912: LD_INT 8
8914: PUSH
8915: FOR_TO
8916: IFFALSE 9065
// if Side_Positions [ i ] then
8918: LD_EXP 37
8922: PUSH
8923: LD_VAR 0 1
8927: ARRAY
8928: IFFALSE 9063
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8930: LD_ADDR_VAR 0 2
8934: PUSH
8935: LD_EXP 56
8939: PUSH
8940: LD_EXP 37
8944: PUSH
8945: LD_VAR 0 1
8949: ARRAY
8950: ARRAY
8951: PPUSH
8952: LD_INT 2
8954: PUSH
8955: LD_INT 21
8957: PUSH
8958: LD_INT 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 21
8967: PUSH
8968: LD_INT 2
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: LIST
8979: PUSH
8980: LD_INT 22
8982: PUSH
8983: LD_OWVAR 2
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PPUSH
8996: CALL_OW 70
9000: PUSH
9001: FOR_IN
9002: IFFALSE 9061
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
9004: LD_EXP 35
9008: PUSH
9009: LD_VAR 0 1
9013: ARRAY
9014: PUSH
9015: LD_EXP 35
9019: PUSH
9020: LD_OWVAR 2
9024: ARRAY
9025: NONEQUAL
9026: PUSH
9027: LD_EXP 39
9031: NOT
9032: PUSH
9033: LD_VAR 0 1
9037: PUSH
9038: LD_OWVAR 2
9042: NONEQUAL
9043: AND
9044: OR
9045: IFFALSE 9059
// ComMoveToArea ( un , BuildUpEscape ) ;
9047: LD_VAR 0 2
9051: PPUSH
9052: LD_INT 13
9054: PPUSH
9055: CALL_OW 113
9059: GO 9001
9061: POP
9062: POP
9063: GO 8915
9065: POP
9066: POP
// enable ;
9067: ENABLE
// end ;
9068: PPOPN 2
9070: END
// every 0 0$1 trigger def_builduptime do
9071: LD_EXP 16
9075: IFFALSE 9101
9077: GO 9079
9079: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
9080: LD_INT 8400
9082: PUSH
9083: LD_EXP 16
9087: PUSH
9088: LD_INT 2100
9090: MUL
9091: PLUS
9092: PPUSH
9093: CALL_OW 67
// EndBuildUp ;
9097: CALL 8714 0 0
// end ; end_of_file
9101: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9102: LD_INT 0
9104: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 255
9114: PUSH
9115: LD_VAR 0 4
9119: EQUAL
9120: IFFALSE 9139
// begin SetAchievement ( ACH_RAD ) ;
9122: LD_STRING ACH_RAD
9124: PPUSH
9125: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9129: LD_STRING ACH_NL
9131: PPUSH
9132: LD_INT 1
9134: PPUSH
9135: CALL_OW 564
// end end ;
9139: LD_VAR 0 5
9143: RET
// export function SA_Win ( side ) ; begin
9144: LD_INT 0
9146: PPUSH
// case side of 1 :
9147: LD_VAR 0 1
9151: PUSH
9152: LD_INT 1
9154: DOUBLE
9155: EQUAL
9156: IFTRUE 9160
9158: GO 9173
9160: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9161: LD_STRING ACH_AH
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: CALL_OW 564
9171: GO 9336
9173: LD_INT 2
9175: DOUBLE
9176: EQUAL
9177: IFTRUE 9181
9179: GO 9194
9181: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9182: LD_STRING ACH_E
9184: PPUSH
9185: LD_INT 1
9187: PPUSH
9188: CALL_OW 564
9192: GO 9336
9194: LD_INT 3
9196: DOUBLE
9197: EQUAL
9198: IFTRUE 9202
9200: GO 9215
9202: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9203: LD_STRING ACH_OOL
9205: PPUSH
9206: LD_INT 1
9208: PPUSH
9209: CALL_OW 564
9213: GO 9336
9215: LD_INT 1
9217: PUSH
9218: LD_INT 2
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: DOUBLE
9225: EQUAL
9226: IFTRUE 9230
9228: GO 9255
9230: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9231: LD_STRING ACH_AH
9233: PPUSH
9234: LD_REAL  5.00000000000000E-0001
9237: PPUSH
9238: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9242: LD_STRING ACH_E
9244: PPUSH
9245: LD_REAL  5.00000000000000E-0001
9248: PPUSH
9249: CALL_OW 564
// end ; [ 2 , 3 ] :
9253: GO 9336
9255: LD_INT 2
9257: PUSH
9258: LD_INT 3
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: DOUBLE
9265: EQUAL
9266: IFTRUE 9270
9268: GO 9295
9270: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9271: LD_STRING ACH_OOL
9273: PPUSH
9274: LD_REAL  5.00000000000000E-0001
9277: PPUSH
9278: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9282: LD_STRING ACH_E
9284: PPUSH
9285: LD_REAL  5.00000000000000E-0001
9288: PPUSH
9289: CALL_OW 564
// end ; [ 3 , 1 ] :
9293: GO 9336
9295: LD_INT 3
9297: PUSH
9298: LD_INT 1
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: DOUBLE
9305: EQUAL
9306: IFTRUE 9310
9308: GO 9335
9310: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9311: LD_STRING ACH_AH
9313: PPUSH
9314: LD_REAL  5.00000000000000E-0001
9317: PPUSH
9318: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9322: LD_STRING ACH_OOL
9324: PPUSH
9325: LD_REAL  5.00000000000000E-0001
9328: PPUSH
9329: CALL_OW 564
// end ; end ;
9333: GO 9336
9335: POP
// end ; end_of_file
9336: LD_VAR 0 2
9340: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9341: LD_INT 0
9343: PPUSH
9344: PPUSH
9345: PPUSH
// for side = 1 to 8 do
9346: LD_ADDR_VAR 0 2
9350: PUSH
9351: DOUBLE
9352: LD_INT 1
9354: DEC
9355: ST_TO_ADDR
9356: LD_INT 8
9358: PUSH
9359: FOR_TO
9360: IFFALSE 9481
// begin for i = 1 to 72 do
9362: LD_ADDR_VAR 0 3
9366: PUSH
9367: DOUBLE
9368: LD_INT 1
9370: DEC
9371: ST_TO_ADDR
9372: LD_INT 72
9374: PUSH
9375: FOR_TO
9376: IFFALSE 9407
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9378: LD_VAR 0 3
9382: PPUSH
9383: LD_VAR 0 2
9387: PPUSH
9388: LD_INT 0
9390: PPUSH
9391: LD_VAR 0 3
9395: PPUSH
9396: CALL_OW 565
9400: PPUSH
9401: CALL_OW 322
9405: GO 9375
9407: POP
9408: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9409: LD_INT 73
9411: PPUSH
9412: LD_VAR 0 2
9416: PPUSH
9417: LD_INT 0
9419: PPUSH
9420: LD_INT 25
9422: PPUSH
9423: CALL_OW 565
9427: PPUSH
9428: CALL_OW 322
// for i = 0 to 40 do
9432: LD_ADDR_VAR 0 3
9436: PUSH
9437: DOUBLE
9438: LD_INT 0
9440: DEC
9441: ST_TO_ADDR
9442: LD_INT 40
9444: PUSH
9445: FOR_TO
9446: IFFALSE 9477
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9448: LD_VAR 0 3
9452: PPUSH
9453: LD_VAR 0 2
9457: PPUSH
9458: LD_INT 1
9460: PPUSH
9461: LD_VAR 0 3
9465: PPUSH
9466: CALL_OW 565
9470: PPUSH
9471: CALL_OW 324
9475: GO 9445
9477: POP
9478: POP
// end ;
9479: GO 9359
9481: POP
9482: POP
// end ;
9483: LD_VAR 0 1
9487: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9488: LD_INT 0
9490: PPUSH
9491: PPUSH
9492: PPUSH
// for side = 1 to 8 do
9493: LD_ADDR_VAR 0 3
9497: PUSH
9498: DOUBLE
9499: LD_INT 1
9501: DEC
9502: ST_TO_ADDR
9503: LD_INT 8
9505: PUSH
9506: FOR_TO
9507: IFFALSE 13503
// begin for i = 1 to 73 do
9509: LD_ADDR_VAR 0 4
9513: PUSH
9514: DOUBLE
9515: LD_INT 1
9517: DEC
9518: ST_TO_ADDR
9519: LD_INT 73
9521: PUSH
9522: FOR_TO
9523: IFFALSE 9544
// SetTech ( i , side , state_disabled ) ;
9525: LD_VAR 0 4
9529: PPUSH
9530: LD_VAR 0 3
9534: PPUSH
9535: LD_INT 0
9537: PPUSH
9538: CALL_OW 322
9542: GO 9522
9544: POP
9545: POP
// for i = 0 to 40 do
9546: LD_ADDR_VAR 0 4
9550: PUSH
9551: DOUBLE
9552: LD_INT 0
9554: DEC
9555: ST_TO_ADDR
9556: LD_INT 40
9558: PUSH
9559: FOR_TO
9560: IFFALSE 9581
// SetRestrict ( i , side , false ) ;
9562: LD_VAR 0 4
9566: PPUSH
9567: LD_VAR 0 3
9571: PPUSH
9572: LD_INT 0
9574: PPUSH
9575: CALL_OW 324
9579: GO 9559
9581: POP
9582: POP
// case level of 1 :
9583: LD_VAR 0 1
9587: PUSH
9588: LD_INT 1
9590: DOUBLE
9591: EQUAL
9592: IFTRUE 9596
9594: GO 9749
9596: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9597: LD_INT 35
9599: PPUSH
9600: LD_VAR 0 3
9604: PPUSH
9605: LD_INT 1
9607: PPUSH
9608: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9612: LD_INT 45
9614: PPUSH
9615: LD_VAR 0 3
9619: PPUSH
9620: LD_INT 1
9622: PPUSH
9623: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9627: LD_INT 46
9629: PPUSH
9630: LD_VAR 0 3
9634: PPUSH
9635: LD_INT 1
9637: PPUSH
9638: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9642: LD_INT 47
9644: PPUSH
9645: LD_VAR 0 3
9649: PPUSH
9650: LD_INT 1
9652: PPUSH
9653: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9657: LD_INT 0
9659: PPUSH
9660: LD_VAR 0 3
9664: PPUSH
9665: LD_INT 1
9667: PPUSH
9668: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9672: LD_INT 2
9674: PPUSH
9675: LD_VAR 0 3
9679: PPUSH
9680: LD_INT 1
9682: PPUSH
9683: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9687: LD_INT 4
9689: PPUSH
9690: LD_VAR 0 3
9694: PPUSH
9695: LD_INT 1
9697: PPUSH
9698: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9702: LD_INT 6
9704: PPUSH
9705: LD_VAR 0 3
9709: PPUSH
9710: LD_INT 1
9712: PPUSH
9713: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9717: LD_INT 29
9719: PPUSH
9720: LD_VAR 0 3
9724: PPUSH
9725: LD_INT 1
9727: PPUSH
9728: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9732: LD_INT 31
9734: PPUSH
9735: LD_VAR 0 3
9739: PPUSH
9740: LD_INT 1
9742: PPUSH
9743: CALL_OW 324
// end ; 2 :
9747: GO 13501
9749: LD_INT 2
9751: DOUBLE
9752: EQUAL
9753: IFTRUE 9757
9755: GO 9955
9757: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9758: LD_INT 35
9760: PPUSH
9761: LD_VAR 0 3
9765: PPUSH
9766: LD_INT 1
9768: PPUSH
9769: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9773: LD_INT 45
9775: PPUSH
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_INT 1
9783: PPUSH
9784: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9788: LD_INT 46
9790: PPUSH
9791: LD_VAR 0 3
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9803: LD_INT 47
9805: PPUSH
9806: LD_VAR 0 3
9810: PPUSH
9811: LD_INT 1
9813: PPUSH
9814: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9818: LD_INT 1
9820: PPUSH
9821: LD_VAR 0 3
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9833: LD_INT 2
9835: PPUSH
9836: LD_VAR 0 3
9840: PPUSH
9841: LD_INT 1
9843: PPUSH
9844: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9848: LD_INT 11
9850: PPUSH
9851: LD_VAR 0 3
9855: PPUSH
9856: LD_INT 1
9858: PPUSH
9859: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9863: LD_INT 0
9865: PPUSH
9866: LD_VAR 0 3
9870: PPUSH
9871: LD_INT 1
9873: PPUSH
9874: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9878: LD_INT 2
9880: PPUSH
9881: LD_VAR 0 3
9885: PPUSH
9886: LD_INT 1
9888: PPUSH
9889: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9893: LD_INT 4
9895: PPUSH
9896: LD_VAR 0 3
9900: PPUSH
9901: LD_INT 1
9903: PPUSH
9904: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9908: LD_INT 6
9910: PPUSH
9911: LD_VAR 0 3
9915: PPUSH
9916: LD_INT 1
9918: PPUSH
9919: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9923: LD_INT 29
9925: PPUSH
9926: LD_VAR 0 3
9930: PPUSH
9931: LD_INT 1
9933: PPUSH
9934: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9938: LD_INT 31
9940: PPUSH
9941: LD_VAR 0 3
9945: PPUSH
9946: LD_INT 1
9948: PPUSH
9949: CALL_OW 324
// end ; 3 :
9953: GO 13501
9955: LD_INT 3
9957: DOUBLE
9958: EQUAL
9959: IFTRUE 9963
9961: GO 10416
9963: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9964: LD_INT 35
9966: PPUSH
9967: LD_VAR 0 3
9971: PPUSH
9972: LD_INT 1
9974: PPUSH
9975: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9979: LD_INT 45
9981: PPUSH
9982: LD_VAR 0 3
9986: PPUSH
9987: LD_INT 1
9989: PPUSH
9990: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9994: LD_INT 46
9996: PPUSH
9997: LD_VAR 0 3
10001: PPUSH
10002: LD_INT 1
10004: PPUSH
10005: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10009: LD_INT 47
10011: PPUSH
10012: LD_VAR 0 3
10016: PPUSH
10017: LD_INT 1
10019: PPUSH
10020: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10024: LD_INT 1
10026: PPUSH
10027: LD_VAR 0 3
10031: PPUSH
10032: LD_INT 1
10034: PPUSH
10035: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10039: LD_INT 2
10041: PPUSH
10042: LD_VAR 0 3
10046: PPUSH
10047: LD_INT 1
10049: PPUSH
10050: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10054: LD_INT 11
10056: PPUSH
10057: LD_VAR 0 3
10061: PPUSH
10062: LD_INT 1
10064: PPUSH
10065: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10069: LD_INT 48
10071: PPUSH
10072: LD_VAR 0 3
10076: PPUSH
10077: LD_INT 1
10079: PPUSH
10080: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10084: LD_INT 69
10086: PPUSH
10087: LD_VAR 0 3
10091: PPUSH
10092: LD_INT 1
10094: PPUSH
10095: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10099: LD_INT 39
10101: PPUSH
10102: LD_VAR 0 3
10106: PPUSH
10107: LD_INT 1
10109: PPUSH
10110: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10114: LD_INT 43
10116: PPUSH
10117: LD_VAR 0 3
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10129: LD_INT 51
10131: PPUSH
10132: LD_VAR 0 3
10136: PPUSH
10137: LD_INT 1
10139: PPUSH
10140: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10144: LD_INT 6
10146: PPUSH
10147: LD_VAR 0 3
10151: PPUSH
10152: LD_INT 1
10154: PPUSH
10155: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10159: LD_INT 0
10161: PPUSH
10162: LD_VAR 0 3
10166: PPUSH
10167: LD_INT 1
10169: PPUSH
10170: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10174: LD_INT 2
10176: PPUSH
10177: LD_VAR 0 3
10181: PPUSH
10182: LD_INT 1
10184: PPUSH
10185: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10189: LD_INT 3
10191: PPUSH
10192: LD_VAR 0 3
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10204: LD_INT 4
10206: PPUSH
10207: LD_VAR 0 3
10211: PPUSH
10212: LD_INT 1
10214: PPUSH
10215: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10219: LD_INT 6
10221: PPUSH
10222: LD_VAR 0 3
10226: PPUSH
10227: LD_INT 1
10229: PPUSH
10230: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10234: LD_INT 7
10236: PPUSH
10237: LD_VAR 0 3
10241: PPUSH
10242: LD_INT 1
10244: PPUSH
10245: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10249: LD_INT 8
10251: PPUSH
10252: LD_VAR 0 3
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10264: LD_INT 10
10266: PPUSH
10267: LD_VAR 0 3
10271: PPUSH
10272: LD_INT 1
10274: PPUSH
10275: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10279: LD_INT 15
10281: PPUSH
10282: LD_VAR 0 3
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10294: LD_INT 16
10296: PPUSH
10297: LD_VAR 0 3
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10309: LD_INT 17
10311: PPUSH
10312: LD_VAR 0 3
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10324: LD_INT 20
10326: PPUSH
10327: LD_VAR 0 3
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10339: LD_INT 26
10341: PPUSH
10342: LD_VAR 0 3
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10354: LD_INT 27
10356: PPUSH
10357: LD_VAR 0 3
10361: PPUSH
10362: LD_INT 1
10364: PPUSH
10365: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10369: LD_INT 29
10371: PPUSH
10372: LD_VAR 0 3
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10384: LD_INT 31
10386: PPUSH
10387: LD_VAR 0 3
10391: PPUSH
10392: LD_INT 1
10394: PPUSH
10395: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10399: LD_INT 32
10401: PPUSH
10402: LD_VAR 0 3
10406: PPUSH
10407: LD_INT 1
10409: PPUSH
10410: CALL_OW 324
// end ; 4 :
10414: GO 13501
10416: LD_INT 4
10418: DOUBLE
10419: EQUAL
10420: IFTRUE 10424
10422: GO 11372
10424: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10425: LD_INT 35
10427: PPUSH
10428: LD_VAR 0 3
10432: PPUSH
10433: LD_INT 1
10435: PPUSH
10436: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10440: LD_INT 45
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10455: LD_INT 46
10457: PPUSH
10458: LD_VAR 0 3
10462: PPUSH
10463: LD_INT 1
10465: PPUSH
10466: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10470: LD_INT 47
10472: PPUSH
10473: LD_VAR 0 3
10477: PPUSH
10478: LD_INT 1
10480: PPUSH
10481: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10485: LD_INT 1
10487: PPUSH
10488: LD_VAR 0 3
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10500: LD_INT 2
10502: PPUSH
10503: LD_VAR 0 3
10507: PPUSH
10508: LD_INT 1
10510: PPUSH
10511: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10515: LD_INT 11
10517: PPUSH
10518: LD_VAR 0 3
10522: PPUSH
10523: LD_INT 1
10525: PPUSH
10526: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10530: LD_INT 20
10532: PPUSH
10533: LD_VAR 0 3
10537: PPUSH
10538: LD_INT 1
10540: PPUSH
10541: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10545: LD_INT 48
10547: PPUSH
10548: LD_VAR 0 3
10552: PPUSH
10553: LD_INT 1
10555: PPUSH
10556: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10560: LD_INT 49
10562: PPUSH
10563: LD_VAR 0 3
10567: PPUSH
10568: LD_INT 1
10570: PPUSH
10571: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10575: LD_INT 69
10577: PPUSH
10578: LD_VAR 0 3
10582: PPUSH
10583: LD_INT 1
10585: PPUSH
10586: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10590: LD_INT 39
10592: PPUSH
10593: LD_VAR 0 3
10597: PPUSH
10598: LD_INT 1
10600: PPUSH
10601: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10605: LD_INT 34
10607: PPUSH
10608: LD_VAR 0 3
10612: PPUSH
10613: LD_INT 1
10615: PPUSH
10616: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10620: LD_INT 42
10622: PPUSH
10623: LD_VAR 0 3
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10635: LD_INT 44
10637: PPUSH
10638: LD_VAR 0 3
10642: PPUSH
10643: LD_INT 1
10645: PPUSH
10646: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10650: LD_INT 41
10652: PPUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: LD_INT 1
10660: PPUSH
10661: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10665: LD_INT 43
10667: PPUSH
10668: LD_VAR 0 3
10672: PPUSH
10673: LD_INT 1
10675: PPUSH
10676: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10680: LD_INT 70
10682: PPUSH
10683: LD_VAR 0 3
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10695: LD_INT 51
10697: PPUSH
10698: LD_VAR 0 3
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10710: LD_INT 52
10712: PPUSH
10713: LD_VAR 0 3
10717: PPUSH
10718: LD_INT 1
10720: PPUSH
10721: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10725: LD_INT 6
10727: PPUSH
10728: LD_VAR 0 3
10732: PPUSH
10733: LD_INT 1
10735: PPUSH
10736: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10740: LD_INT 15
10742: PPUSH
10743: LD_VAR 0 3
10747: PPUSH
10748: LD_INT 1
10750: PPUSH
10751: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10755: LD_INT 7
10757: PPUSH
10758: LD_VAR 0 3
10762: PPUSH
10763: LD_INT 1
10765: PPUSH
10766: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10770: LD_INT 12
10772: PPUSH
10773: LD_VAR 0 3
10777: PPUSH
10778: LD_INT 1
10780: PPUSH
10781: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10785: LD_INT 18
10787: PPUSH
10788: LD_VAR 0 3
10792: PPUSH
10793: LD_INT 1
10795: PPUSH
10796: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10800: LD_INT 60
10802: PPUSH
10803: LD_VAR 0 3
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10815: LD_INT 9
10817: PPUSH
10818: LD_VAR 0 3
10822: PPUSH
10823: LD_INT 1
10825: PPUSH
10826: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10830: LD_INT 30
10832: PPUSH
10833: LD_VAR 0 3
10837: PPUSH
10838: LD_INT 1
10840: PPUSH
10841: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10845: LD_INT 37
10847: PPUSH
10848: LD_VAR 0 3
10852: PPUSH
10853: LD_INT 1
10855: PPUSH
10856: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10860: LD_INT 5
10862: PPUSH
10863: LD_VAR 0 3
10867: PPUSH
10868: LD_INT 1
10870: PPUSH
10871: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10875: LD_INT 66
10877: PPUSH
10878: LD_VAR 0 3
10882: PPUSH
10883: LD_INT 1
10885: PPUSH
10886: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10890: LD_INT 21
10892: PPUSH
10893: LD_VAR 0 3
10897: PPUSH
10898: LD_INT 1
10900: PPUSH
10901: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10905: LD_INT 22
10907: PPUSH
10908: LD_VAR 0 3
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10920: LD_INT 54
10922: PPUSH
10923: LD_VAR 0 3
10927: PPUSH
10928: LD_INT 1
10930: PPUSH
10931: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10935: LD_INT 0
10937: PPUSH
10938: LD_VAR 0 3
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10950: LD_INT 1
10952: PPUSH
10953: LD_VAR 0 3
10957: PPUSH
10958: LD_INT 1
10960: PPUSH
10961: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10965: LD_INT 2
10967: PPUSH
10968: LD_VAR 0 3
10972: PPUSH
10973: LD_INT 1
10975: PPUSH
10976: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10980: LD_INT 3
10982: PPUSH
10983: LD_VAR 0 3
10987: PPUSH
10988: LD_INT 1
10990: PPUSH
10991: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10995: LD_INT 4
10997: PPUSH
10998: LD_VAR 0 3
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11010: LD_INT 5
11012: PPUSH
11013: LD_VAR 0 3
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11025: LD_INT 6
11027: PPUSH
11028: LD_VAR 0 3
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11040: LD_INT 7
11042: PPUSH
11043: LD_VAR 0 3
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11055: LD_INT 8
11057: PPUSH
11058: LD_VAR 0 3
11062: PPUSH
11063: LD_INT 1
11065: PPUSH
11066: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11070: LD_INT 10
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: LD_INT 1
11080: PPUSH
11081: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11085: LD_INT 11
11087: PPUSH
11088: LD_VAR 0 3
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11100: LD_INT 12
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: LD_INT 1
11110: PPUSH
11111: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11115: LD_INT 13
11117: PPUSH
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11130: LD_INT 14
11132: PPUSH
11133: LD_VAR 0 3
11137: PPUSH
11138: LD_INT 1
11140: PPUSH
11141: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11145: LD_INT 15
11147: PPUSH
11148: LD_VAR 0 3
11152: PPUSH
11153: LD_INT 1
11155: PPUSH
11156: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11160: LD_INT 16
11162: PPUSH
11163: LD_VAR 0 3
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11175: LD_INT 17
11177: PPUSH
11178: LD_VAR 0 3
11182: PPUSH
11183: LD_INT 1
11185: PPUSH
11186: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11190: LD_INT 19
11192: PPUSH
11193: LD_VAR 0 3
11197: PPUSH
11198: LD_INT 1
11200: PPUSH
11201: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11205: LD_INT 20
11207: PPUSH
11208: LD_VAR 0 3
11212: PPUSH
11213: LD_INT 1
11215: PPUSH
11216: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11220: LD_INT 21
11222: PPUSH
11223: LD_VAR 0 3
11227: PPUSH
11228: LD_INT 1
11230: PPUSH
11231: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11235: LD_INT 23
11237: PPUSH
11238: LD_VAR 0 3
11242: PPUSH
11243: LD_INT 1
11245: PPUSH
11246: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11250: LD_INT 26
11252: PPUSH
11253: LD_VAR 0 3
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11265: LD_INT 27
11267: PPUSH
11268: LD_VAR 0 3
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11280: LD_INT 28
11282: PPUSH
11283: LD_VAR 0 3
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11295: LD_INT 29
11297: PPUSH
11298: LD_VAR 0 3
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11310: LD_INT 30
11312: PPUSH
11313: LD_VAR 0 3
11317: PPUSH
11318: LD_INT 1
11320: PPUSH
11321: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11325: LD_INT 31
11327: PPUSH
11328: LD_VAR 0 3
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11340: LD_INT 32
11342: PPUSH
11343: LD_VAR 0 3
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11355: LD_INT 36
11357: PPUSH
11358: LD_VAR 0 3
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: CALL_OW 324
// end ; 5 :
11370: GO 13501
11372: LD_INT 5
11374: DOUBLE
11375: EQUAL
11376: IFTRUE 11380
11378: GO 12493
11380: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11381: LD_INT 35
11383: PPUSH
11384: LD_VAR 0 3
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11396: LD_INT 45
11398: PPUSH
11399: LD_VAR 0 3
11403: PPUSH
11404: LD_INT 1
11406: PPUSH
11407: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11411: LD_INT 46
11413: PPUSH
11414: LD_VAR 0 3
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11426: LD_INT 47
11428: PPUSH
11429: LD_VAR 0 3
11433: PPUSH
11434: LD_INT 1
11436: PPUSH
11437: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11441: LD_INT 1
11443: PPUSH
11444: LD_VAR 0 3
11448: PPUSH
11449: LD_INT 1
11451: PPUSH
11452: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11456: LD_INT 2
11458: PPUSH
11459: LD_VAR 0 3
11463: PPUSH
11464: LD_INT 1
11466: PPUSH
11467: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11471: LD_INT 11
11473: PPUSH
11474: LD_VAR 0 3
11478: PPUSH
11479: LD_INT 1
11481: PPUSH
11482: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11486: LD_INT 20
11488: PPUSH
11489: LD_VAR 0 3
11493: PPUSH
11494: LD_INT 1
11496: PPUSH
11497: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11501: LD_INT 48
11503: PPUSH
11504: LD_VAR 0 3
11508: PPUSH
11509: LD_INT 1
11511: PPUSH
11512: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11516: LD_INT 49
11518: PPUSH
11519: LD_VAR 0 3
11523: PPUSH
11524: LD_INT 1
11526: PPUSH
11527: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11531: LD_INT 69
11533: PPUSH
11534: LD_VAR 0 3
11538: PPUSH
11539: LD_INT 1
11541: PPUSH
11542: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11546: LD_INT 39
11548: PPUSH
11549: LD_VAR 0 3
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11561: LD_INT 34
11563: PPUSH
11564: LD_VAR 0 3
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11576: LD_INT 42
11578: PPUSH
11579: LD_VAR 0 3
11583: PPUSH
11584: LD_INT 1
11586: PPUSH
11587: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11591: LD_INT 44
11593: PPUSH
11594: LD_VAR 0 3
11598: PPUSH
11599: LD_INT 1
11601: PPUSH
11602: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11606: LD_INT 41
11608: PPUSH
11609: LD_VAR 0 3
11613: PPUSH
11614: LD_INT 1
11616: PPUSH
11617: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11621: LD_INT 40
11623: PPUSH
11624: LD_VAR 0 3
11628: PPUSH
11629: LD_INT 1
11631: PPUSH
11632: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11636: LD_INT 43
11638: PPUSH
11639: LD_VAR 0 3
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11651: LD_INT 70
11653: PPUSH
11654: LD_VAR 0 3
11658: PPUSH
11659: LD_INT 1
11661: PPUSH
11662: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11666: LD_INT 51
11668: PPUSH
11669: LD_VAR 0 3
11673: PPUSH
11674: LD_INT 1
11676: PPUSH
11677: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11681: LD_INT 52
11683: PPUSH
11684: LD_VAR 0 3
11688: PPUSH
11689: LD_INT 1
11691: PPUSH
11692: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11696: LD_INT 6
11698: PPUSH
11699: LD_VAR 0 3
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11711: LD_INT 15
11713: PPUSH
11714: LD_VAR 0 3
11718: PPUSH
11719: LD_INT 1
11721: PPUSH
11722: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11726: LD_INT 7
11728: PPUSH
11729: LD_VAR 0 3
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11741: LD_INT 12
11743: PPUSH
11744: LD_VAR 0 3
11748: PPUSH
11749: LD_INT 1
11751: PPUSH
11752: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11756: LD_INT 17
11758: PPUSH
11759: LD_VAR 0 3
11763: PPUSH
11764: LD_INT 1
11766: PPUSH
11767: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11771: LD_INT 18
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: LD_INT 1
11781: PPUSH
11782: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11786: LD_INT 60
11788: PPUSH
11789: LD_VAR 0 3
11793: PPUSH
11794: LD_INT 1
11796: PPUSH
11797: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11801: LD_INT 32
11803: PPUSH
11804: LD_VAR 0 3
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11816: LD_INT 9
11818: PPUSH
11819: LD_VAR 0 3
11823: PPUSH
11824: LD_INT 1
11826: PPUSH
11827: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11831: LD_INT 57
11833: PPUSH
11834: LD_VAR 0 3
11838: PPUSH
11839: LD_INT 1
11841: PPUSH
11842: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11846: LD_INT 30
11848: PPUSH
11849: LD_VAR 0 3
11853: PPUSH
11854: LD_INT 1
11856: PPUSH
11857: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11861: LD_INT 37
11863: PPUSH
11864: LD_VAR 0 3
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11876: LD_INT 63
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11891: LD_INT 3
11893: PPUSH
11894: LD_VAR 0 3
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11906: LD_INT 4
11908: PPUSH
11909: LD_VAR 0 3
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11921: LD_INT 5
11923: PPUSH
11924: LD_VAR 0 3
11928: PPUSH
11929: LD_INT 1
11931: PPUSH
11932: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11936: LD_INT 66
11938: PPUSH
11939: LD_VAR 0 3
11943: PPUSH
11944: LD_INT 1
11946: PPUSH
11947: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11951: LD_INT 21
11953: PPUSH
11954: LD_VAR 0 3
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11966: LD_INT 22
11968: PPUSH
11969: LD_VAR 0 3
11973: PPUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11981: LD_INT 19
11983: PPUSH
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 1
11991: PPUSH
11992: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11996: LD_INT 54
11998: PPUSH
11999: LD_VAR 0 3
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12011: LD_INT 55
12013: PPUSH
12014: LD_VAR 0 3
12018: PPUSH
12019: LD_INT 1
12021: PPUSH
12022: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12026: LD_INT 0
12028: PPUSH
12029: LD_VAR 0 3
12033: PPUSH
12034: LD_INT 1
12036: PPUSH
12037: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12041: LD_INT 1
12043: PPUSH
12044: LD_VAR 0 3
12048: PPUSH
12049: LD_INT 1
12051: PPUSH
12052: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12056: LD_INT 2
12058: PPUSH
12059: LD_VAR 0 3
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12071: LD_INT 3
12073: PPUSH
12074: LD_VAR 0 3
12078: PPUSH
12079: LD_INT 1
12081: PPUSH
12082: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12086: LD_INT 4
12088: PPUSH
12089: LD_VAR 0 3
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12101: LD_INT 5
12103: PPUSH
12104: LD_VAR 0 3
12108: PPUSH
12109: LD_INT 1
12111: PPUSH
12112: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12116: LD_INT 6
12118: PPUSH
12119: LD_VAR 0 3
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12131: LD_INT 7
12133: PPUSH
12134: LD_VAR 0 3
12138: PPUSH
12139: LD_INT 1
12141: PPUSH
12142: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12146: LD_INT 8
12148: PPUSH
12149: LD_VAR 0 3
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12161: LD_INT 10
12163: PPUSH
12164: LD_VAR 0 3
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12176: LD_INT 11
12178: PPUSH
12179: LD_VAR 0 3
12183: PPUSH
12184: LD_INT 1
12186: PPUSH
12187: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12191: LD_INT 12
12193: PPUSH
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12206: LD_INT 13
12208: PPUSH
12209: LD_VAR 0 3
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12221: LD_INT 14
12223: PPUSH
12224: LD_VAR 0 3
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12236: LD_INT 15
12238: PPUSH
12239: LD_VAR 0 3
12243: PPUSH
12244: LD_INT 1
12246: PPUSH
12247: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12251: LD_INT 16
12253: PPUSH
12254: LD_VAR 0 3
12258: PPUSH
12259: LD_INT 1
12261: PPUSH
12262: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12266: LD_INT 17
12268: PPUSH
12269: LD_VAR 0 3
12273: PPUSH
12274: LD_INT 1
12276: PPUSH
12277: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12281: LD_INT 18
12283: PPUSH
12284: LD_VAR 0 3
12288: PPUSH
12289: LD_INT 1
12291: PPUSH
12292: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12296: LD_INT 19
12298: PPUSH
12299: LD_VAR 0 3
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12311: LD_INT 20
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12326: LD_INT 21
12328: PPUSH
12329: LD_VAR 0 3
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12341: LD_INT 23
12343: PPUSH
12344: LD_VAR 0 3
12348: PPUSH
12349: LD_INT 1
12351: PPUSH
12352: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12356: LD_INT 26
12358: PPUSH
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 1
12366: PPUSH
12367: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12371: LD_INT 27
12373: PPUSH
12374: LD_VAR 0 3
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12386: LD_INT 28
12388: PPUSH
12389: LD_VAR 0 3
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12401: LD_INT 29
12403: PPUSH
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12416: LD_INT 30
12418: PPUSH
12419: LD_VAR 0 3
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12431: LD_INT 31
12433: PPUSH
12434: LD_VAR 0 3
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12446: LD_INT 32
12448: PPUSH
12449: LD_VAR 0 3
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12461: LD_INT 33
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12476: LD_INT 36
12478: PPUSH
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 324
// end ; 6 :
12491: GO 13501
12493: LD_INT 6
12495: DOUBLE
12496: EQUAL
12497: IFTRUE 12501
12499: GO 13426
12501: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12502: LD_INT 35
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12517: LD_INT 45
12519: PPUSH
12520: LD_VAR 0 3
12524: PPUSH
12525: LD_INT 1
12527: PPUSH
12528: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12532: LD_INT 46
12534: PPUSH
12535: LD_VAR 0 3
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12547: LD_INT 47
12549: PPUSH
12550: LD_VAR 0 3
12554: PPUSH
12555: LD_INT 1
12557: PPUSH
12558: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12562: LD_INT 1
12564: PPUSH
12565: LD_VAR 0 3
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12577: LD_INT 2
12579: PPUSH
12580: LD_VAR 0 3
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12592: LD_INT 11
12594: PPUSH
12595: LD_VAR 0 3
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12607: LD_INT 20
12609: PPUSH
12610: LD_VAR 0 3
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12622: LD_INT 48
12624: PPUSH
12625: LD_VAR 0 3
12629: PPUSH
12630: LD_INT 1
12632: PPUSH
12633: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12637: LD_INT 49
12639: PPUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12652: LD_INT 50
12654: PPUSH
12655: LD_VAR 0 3
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12667: LD_INT 69
12669: PPUSH
12670: LD_VAR 0 3
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12682: LD_INT 39
12684: PPUSH
12685: LD_VAR 0 3
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12697: LD_INT 34
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12712: LD_INT 42
12714: PPUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12727: LD_INT 44
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12742: LD_INT 41
12744: PPUSH
12745: LD_VAR 0 3
12749: PPUSH
12750: LD_INT 1
12752: PPUSH
12753: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12757: LD_INT 13
12759: PPUSH
12760: LD_VAR 0 3
12764: PPUSH
12765: LD_INT 1
12767: PPUSH
12768: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12772: LD_INT 40
12774: PPUSH
12775: LD_VAR 0 3
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12787: LD_INT 43
12789: PPUSH
12790: LD_VAR 0 3
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12802: LD_INT 70
12804: PPUSH
12805: LD_VAR 0 3
12809: PPUSH
12810: LD_INT 1
12812: PPUSH
12813: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12817: LD_INT 23
12819: PPUSH
12820: LD_VAR 0 3
12824: PPUSH
12825: LD_INT 1
12827: PPUSH
12828: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12832: LD_INT 51
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12847: LD_INT 52
12849: PPUSH
12850: LD_VAR 0 3
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12862: LD_INT 6
12864: PPUSH
12865: LD_VAR 0 3
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12877: LD_INT 15
12879: PPUSH
12880: LD_VAR 0 3
12884: PPUSH
12885: LD_INT 1
12887: PPUSH
12888: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12892: LD_INT 7
12894: PPUSH
12895: LD_VAR 0 3
12899: PPUSH
12900: LD_INT 1
12902: PPUSH
12903: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12907: LD_INT 12
12909: PPUSH
12910: LD_VAR 0 3
12914: PPUSH
12915: LD_INT 1
12917: PPUSH
12918: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12922: LD_INT 10
12924: PPUSH
12925: LD_VAR 0 3
12929: PPUSH
12930: LD_INT 1
12932: PPUSH
12933: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12937: LD_INT 17
12939: PPUSH
12940: LD_VAR 0 3
12944: PPUSH
12945: LD_INT 1
12947: PPUSH
12948: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12952: LD_INT 18
12954: PPUSH
12955: LD_VAR 0 3
12959: PPUSH
12960: LD_INT 1
12962: PPUSH
12963: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12967: LD_INT 60
12969: PPUSH
12970: LD_VAR 0 3
12974: PPUSH
12975: LD_INT 1
12977: PPUSH
12978: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12982: LD_INT 61
12984: PPUSH
12985: LD_VAR 0 3
12989: PPUSH
12990: LD_INT 1
12992: PPUSH
12993: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12997: LD_INT 32
12999: PPUSH
13000: LD_VAR 0 3
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13012: LD_INT 27
13014: PPUSH
13015: LD_VAR 0 3
13019: PPUSH
13020: LD_INT 1
13022: PPUSH
13023: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13027: LD_INT 36
13029: PPUSH
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_INT 1
13037: PPUSH
13038: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13042: LD_INT 33
13044: PPUSH
13045: LD_VAR 0 3
13049: PPUSH
13050: LD_INT 1
13052: PPUSH
13053: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13057: LD_INT 9
13059: PPUSH
13060: LD_VAR 0 3
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13072: LD_INT 38
13074: PPUSH
13075: LD_VAR 0 3
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13087: LD_INT 57
13089: PPUSH
13090: LD_VAR 0 3
13094: PPUSH
13095: LD_INT 1
13097: PPUSH
13098: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13102: LD_INT 58
13104: PPUSH
13105: LD_VAR 0 3
13109: PPUSH
13110: LD_INT 1
13112: PPUSH
13113: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13117: LD_INT 28
13119: PPUSH
13120: LD_VAR 0 3
13124: PPUSH
13125: LD_INT 1
13127: PPUSH
13128: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13132: LD_INT 29
13134: PPUSH
13135: LD_VAR 0 3
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13147: LD_INT 30
13149: PPUSH
13150: LD_VAR 0 3
13154: PPUSH
13155: LD_INT 1
13157: PPUSH
13158: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13162: LD_INT 37
13164: PPUSH
13165: LD_VAR 0 3
13169: PPUSH
13170: LD_INT 1
13172: PPUSH
13173: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13177: LD_INT 63
13179: PPUSH
13180: LD_VAR 0 3
13184: PPUSH
13185: LD_INT 1
13187: PPUSH
13188: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13192: LD_INT 64
13194: PPUSH
13195: LD_VAR 0 3
13199: PPUSH
13200: LD_INT 1
13202: PPUSH
13203: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13207: LD_INT 3
13209: PPUSH
13210: LD_VAR 0 3
13214: PPUSH
13215: LD_INT 1
13217: PPUSH
13218: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13222: LD_INT 4
13224: PPUSH
13225: LD_VAR 0 3
13229: PPUSH
13230: LD_INT 1
13232: PPUSH
13233: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13237: LD_INT 5
13239: PPUSH
13240: LD_VAR 0 3
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13252: LD_INT 8
13254: PPUSH
13255: LD_VAR 0 3
13259: PPUSH
13260: LD_INT 1
13262: PPUSH
13263: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13267: LD_INT 66
13269: PPUSH
13270: LD_VAR 0 3
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13282: LD_INT 67
13284: PPUSH
13285: LD_VAR 0 3
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13297: LD_INT 21
13299: PPUSH
13300: LD_VAR 0 3
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13312: LD_INT 22
13314: PPUSH
13315: LD_VAR 0 3
13319: PPUSH
13320: LD_INT 1
13322: PPUSH
13323: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13327: LD_INT 19
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13342: LD_INT 26
13344: PPUSH
13345: LD_VAR 0 3
13349: PPUSH
13350: LD_INT 1
13352: PPUSH
13353: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13357: LD_INT 54
13359: PPUSH
13360: LD_VAR 0 3
13364: PPUSH
13365: LD_INT 1
13367: PPUSH
13368: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13372: LD_INT 55
13374: PPUSH
13375: LD_VAR 0 3
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 322
// for i = 0 to 39 do
13387: LD_ADDR_VAR 0 4
13391: PUSH
13392: DOUBLE
13393: LD_INT 0
13395: DEC
13396: ST_TO_ADDR
13397: LD_INT 39
13399: PUSH
13400: FOR_TO
13401: IFFALSE 13422
// SetRestrict ( i , side , true ) ;
13403: LD_VAR 0 4
13407: PPUSH
13408: LD_VAR 0 3
13412: PPUSH
13413: LD_INT 1
13415: PPUSH
13416: CALL_OW 324
13420: GO 13400
13422: POP
13423: POP
// end ; else
13424: GO 13501
13426: POP
// begin for i = 1 to 73 do
13427: LD_ADDR_VAR 0 4
13431: PUSH
13432: DOUBLE
13433: LD_INT 1
13435: DEC
13436: ST_TO_ADDR
13437: LD_INT 73
13439: PUSH
13440: FOR_TO
13441: IFFALSE 13462
// SetTech ( i , side , state_enabled ) ;
13443: LD_VAR 0 4
13447: PPUSH
13448: LD_VAR 0 3
13452: PPUSH
13453: LD_INT 1
13455: PPUSH
13456: CALL_OW 322
13460: GO 13440
13462: POP
13463: POP
// for i = 0 to 39 do
13464: LD_ADDR_VAR 0 4
13468: PUSH
13469: DOUBLE
13470: LD_INT 0
13472: DEC
13473: ST_TO_ADDR
13474: LD_INT 39
13476: PUSH
13477: FOR_TO
13478: IFFALSE 13499
// SetRestrict ( i , side , true ) ;
13480: LD_VAR 0 4
13484: PPUSH
13485: LD_VAR 0 3
13489: PPUSH
13490: LD_INT 1
13492: PPUSH
13493: CALL_OW 324
13497: GO 13477
13499: POP
13500: POP
// end ; end ; end ;
13501: GO 9506
13503: POP
13504: POP
// end ; end_of_file
13505: LD_VAR 0 2
13509: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , bases ; begin
13510: LD_INT 0
13512: PPUSH
13513: PPUSH
13514: PPUSH
13515: PPUSH
13516: PPUSH
13517: PPUSH
13518: PPUSH
13519: PPUSH
// for i := 1 to 8 do
13520: LD_ADDR_VAR 0 2
13524: PUSH
13525: DOUBLE
13526: LD_INT 1
13528: DEC
13529: ST_TO_ADDR
13530: LD_INT 8
13532: PUSH
13533: FOR_TO
13534: IFFALSE 14010
// begin if Side_Positions [ i ] then
13536: LD_EXP 37
13540: PUSH
13541: LD_VAR 0 2
13545: ARRAY
13546: IFFALSE 14008
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13548: LD_ADDR_VAR 0 7
13552: PUSH
13553: LD_INT 22
13555: PUSH
13556: LD_VAR 0 2
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 21
13567: PUSH
13568: LD_INT 1
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PPUSH
13579: CALL_OW 69
13583: PUSH
13584: LD_INT 0
13586: PLUS
13587: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13588: LD_ADDR_VAR 0 8
13592: PUSH
13593: LD_INT 22
13595: PUSH
13596: LD_VAR 0 2
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 2
13607: PUSH
13608: LD_INT 30
13610: PUSH
13611: LD_INT 0
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: LD_INT 30
13620: PUSH
13621: LD_INT 1
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PPUSH
13637: CALL_OW 69
13641: ST_TO_ADDR
// crates := 0 ;
13642: LD_ADDR_VAR 0 4
13646: PUSH
13647: LD_INT 0
13649: ST_TO_ADDR
// oil := 0 ;
13650: LD_ADDR_VAR 0 5
13654: PUSH
13655: LD_INT 0
13657: ST_TO_ADDR
// sib := 0 ;
13658: LD_ADDR_VAR 0 6
13662: PUSH
13663: LD_INT 0
13665: ST_TO_ADDR
// if bases then
13666: LD_VAR 0 8
13670: IFFALSE 13776
// begin for j in bases do
13672: LD_ADDR_VAR 0 3
13676: PUSH
13677: LD_VAR 0 8
13681: PUSH
13682: FOR_IN
13683: IFFALSE 13774
// begin crates := crates + GetResourceType ( GetBase ( j ) , mat_cans ) ;
13685: LD_ADDR_VAR 0 4
13689: PUSH
13690: LD_VAR 0 4
13694: PUSH
13695: LD_VAR 0 3
13699: PPUSH
13700: CALL_OW 274
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 275
13712: PLUS
13713: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( j ) , mat_oil ) ;
13714: LD_ADDR_VAR 0 5
13718: PUSH
13719: LD_VAR 0 5
13723: PUSH
13724: LD_VAR 0 3
13728: PPUSH
13729: CALL_OW 274
13733: PPUSH
13734: LD_INT 2
13736: PPUSH
13737: CALL_OW 275
13741: PLUS
13742: ST_TO_ADDR
// sib := sib + GetResourceType ( GetBase ( j ) , mat_siberit ) ;
13743: LD_ADDR_VAR 0 6
13747: PUSH
13748: LD_VAR 0 6
13752: PUSH
13753: LD_VAR 0 3
13757: PPUSH
13758: CALL_OW 274
13762: PPUSH
13763: LD_INT 3
13765: PPUSH
13766: CALL_OW 275
13770: PLUS
13771: ST_TO_ADDR
// end ;
13772: GO 13682
13774: POP
13775: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13776: LD_STRING setSpecText(
13778: PUSH
13779: LD_VAR 0 2
13783: STR
13784: PUSH
13785: LD_STRING ,
13787: STR
13788: PUSH
13789: LD_INT 2
13791: STR
13792: PUSH
13793: LD_STRING ,
13795: STR
13796: PUSH
13797: LD_VAR 0 4
13801: STR
13802: PUSH
13803: LD_STRING )
13805: STR
13806: PPUSH
13807: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13811: LD_STRING setSpecText(
13813: PUSH
13814: LD_VAR 0 2
13818: STR
13819: PUSH
13820: LD_STRING ,
13822: STR
13823: PUSH
13824: LD_INT 3
13826: STR
13827: PUSH
13828: LD_STRING ,
13830: STR
13831: PUSH
13832: LD_VAR 0 5
13836: STR
13837: PUSH
13838: LD_STRING )
13840: STR
13841: PPUSH
13842: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13846: LD_STRING setSpecText(
13848: PUSH
13849: LD_VAR 0 2
13853: STR
13854: PUSH
13855: LD_STRING ,
13857: STR
13858: PUSH
13859: LD_INT 4
13861: STR
13862: PUSH
13863: LD_STRING ,
13865: STR
13866: PUSH
13867: LD_VAR 0 6
13871: STR
13872: PUSH
13873: LD_STRING )
13875: STR
13876: PPUSH
13877: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13881: LD_STRING setSpecText(
13883: PUSH
13884: LD_VAR 0 2
13888: STR
13889: PUSH
13890: LD_STRING ,
13892: STR
13893: PUSH
13894: LD_INT 5
13896: STR
13897: PUSH
13898: LD_STRING ,
13900: STR
13901: PUSH
13902: LD_VAR 0 7
13906: STR
13907: PUSH
13908: LD_STRING )
13910: STR
13911: PPUSH
13912: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13916: LD_STRING setSpecLogoNumber(
13918: PUSH
13919: LD_INT 2
13921: STR
13922: PUSH
13923: LD_STRING ,
13925: STR
13926: PUSH
13927: LD_INT 1
13929: STR
13930: PUSH
13931: LD_STRING )
13933: STR
13934: PPUSH
13935: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13939: LD_STRING setSpecLogoNumber(
13941: PUSH
13942: LD_INT 3
13944: STR
13945: PUSH
13946: LD_STRING ,
13948: STR
13949: PUSH
13950: LD_INT 2
13952: STR
13953: PUSH
13954: LD_STRING )
13956: STR
13957: PPUSH
13958: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13962: LD_STRING setSpecLogoNumber(
13964: PUSH
13965: LD_INT 4
13967: STR
13968: PUSH
13969: LD_STRING ,
13971: STR
13972: PUSH
13973: LD_INT 3
13975: STR
13976: PUSH
13977: LD_STRING )
13979: STR
13980: PPUSH
13981: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13985: LD_STRING setSpecLogoNumber(
13987: PUSH
13988: LD_INT 5
13990: STR
13991: PUSH
13992: LD_STRING ,
13994: STR
13995: PUSH
13996: LD_INT 4
13998: STR
13999: PUSH
14000: LD_STRING )
14002: STR
14003: PPUSH
14004: CALL_OW 559
// end ; end ;
14008: GO 13533
14010: POP
14011: POP
// end ;
14012: LD_VAR 0 1
14016: RET
// every 20 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14017: LD_INT 2
14019: PUSH
14020: LD_INT 30
14022: PUSH
14023: LD_INT 0
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 30
14032: PUSH
14033: LD_INT 1
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: PPUSH
14045: CALL_OW 69
14049: IFFALSE 14059
14051: GO 14053
14053: DISABLE
// begin enable ;
14054: ENABLE
// UpdateSpectatorBar ;
14055: CALL 13510 0 0
// end ;
14059: END
