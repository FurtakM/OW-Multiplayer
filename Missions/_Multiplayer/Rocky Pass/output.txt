// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , tech_level ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 18
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 37
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 35
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 36
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 18
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 3 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 3
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 37
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 35
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 38
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 36
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 254: LD_ADDR_EXP 39
 258: PUSH
 259: LD_EXP 35
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: EMPTY
 268: LIST
 269: DIFF
 270: PUSH
 271: LD_INT 1
 273: GREATER
 274: ST_TO_ADDR
// if Multiplayer then
 275: LD_OWVAR 4
 279: IFFALSE 517
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 281: LD_ADDR_EXP 1
 285: PUSH
 286: LD_INT 0
 288: PPUSH
 289: CALL_OW 426
 293: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 294: LD_ADDR_EXP 2
 298: PUSH
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 426
 306: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 307: LD_ADDR_EXP 3
 311: PUSH
 312: LD_INT 2
 314: PPUSH
 315: CALL_OW 426
 319: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 320: LD_ADDR_EXP 4
 324: PUSH
 325: LD_INT 3
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 333: LD_ADDR_EXP 5
 337: PUSH
 338: LD_INT 4
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 346: LD_ADDR_EXP 6
 350: PUSH
 351: LD_INT 5
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 359: LD_ADDR_EXP 7
 363: PUSH
 364: LD_INT 6
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 372: LD_ADDR_EXP 8
 376: PUSH
 377: LD_INT 10
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 385: LD_ADDR_EXP 9
 389: PUSH
 390: LD_INT 11
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 398: LD_ADDR_EXP 10
 402: PUSH
 403: LD_INT 12
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 411: LD_ADDR_EXP 11
 415: PUSH
 416: LD_INT 13
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 424: LD_ADDR_EXP 12
 428: PUSH
 429: LD_INT 14
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 437: LD_ADDR_EXP 13
 441: PUSH
 442: LD_INT 15
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 450: LD_ADDR_EXP 14
 454: PUSH
 455: LD_INT 16
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 463: LD_ADDR_EXP 15
 467: PUSH
 468: LD_INT 17
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 16
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_spect := GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_EXP 32
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 502: LD_ADDR_EXP 34
 506: PUSH
 507: LD_INT 23
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// end else
 515: GO 665
// begin Randomize ;
 517: CALL_OW 10
// def_base_level := 2 ;
 521: LD_ADDR_EXP 1
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// def_amount_of_people := 0 ;
 529: LD_ADDR_EXP 2
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// def_skill_level := 1 ;
 537: LD_ADDR_EXP 3
 541: PUSH
 542: LD_INT 1
 544: ST_TO_ADDR
// def_starting_resources := 2 ;
 545: LD_ADDR_EXP 4
 549: PUSH
 550: LD_INT 2
 552: ST_TO_ADDR
// def_shipments_density := 1 ;
 553: LD_ADDR_EXP 5
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 561: LD_ADDR_EXP 6
 565: PUSH
 566: LD_INT 0
 568: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 569: LD_ADDR_EXP 7
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// def_shared_vision := 1 ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// def_morale_flags := 1 ;
 585: LD_ADDR_EXP 9
 589: PUSH
 590: LD_INT 1
 592: ST_TO_ADDR
// def_siberite_detection := 1 ;
 593: LD_ADDR_EXP 10
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// def_people_respawning := 2 ;
 601: LD_ADDR_EXP 11
 605: PUSH
 606: LD_INT 2
 608: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 609: LD_ADDR_EXP 12
 613: PUSH
 614: LD_INT 3
 616: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 617: LD_ADDR_EXP 13
 621: PUSH
 622: LD_INT 0
 624: ST_TO_ADDR
// def_public_score := 0 ;
 625: LD_ADDR_EXP 14
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 633: LD_ADDR_EXP 15
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// def_builduptime := 1 ;
 641: LD_ADDR_EXP 16
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
// def_spect := 1 ;
 649: LD_ADDR_EXP 32
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// tech_level = 0 ;
 657: LD_ADDR_EXP 34
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// end ; if isSGUI then
 665: LD_OWVAR 83
 669: IFFALSE 677
// setMpTechs ( ) else
 671: CALL 9331 0 0
 675: GO 690
// SetMpTechLevel ( tech_level + 1 ) ;
 677: LD_EXP 34
 681: PUSH
 682: LD_INT 1
 684: PLUS
 685: PPUSH
 686: CALL 9478 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 690: LD_ADDR_EXP 19
 694: PUSH
 695: LD_INT 0
 697: PUSH
 698: LD_INT 1
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: PUSH
 709: LD_EXP 1
 713: PUSH
 714: LD_INT 1
 716: PLUS
 717: ARRAY
 718: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 719: LD_ADDR_EXP 20
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: PUSH
 738: LD_EXP 1
 742: PUSH
 743: LD_INT 1
 745: PLUS
 746: ARRAY
 747: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 748: LD_ADDR_EXP 21
 752: PUSH
 753: LD_INT 9
 755: PUSH
 756: LD_INT 12
 758: PUSH
 759: LD_INT 15
 761: PUSH
 762: LD_INT 24
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_EXP 2
 775: PUSH
 776: LD_INT 1
 778: PLUS
 779: ARRAY
 780: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
 781: LD_ADDR_EXP 22
 785: PUSH
 786: LD_INT 2
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: LD_INT 5
 794: PUSH
 795: LD_INT 6
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_EXP 3
 808: PUSH
 809: LD_INT 1
 811: PLUS
 812: ARRAY
 813: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 814: LD_ADDR_EXP 24
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: LD_INT 0
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 30
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_INT 50
 849: PUSH
 850: LD_INT 20
 852: PUSH
 853: LD_INT 0
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: LD_INT 80
 863: PUSH
 864: LD_INT 40
 866: PUSH
 867: LD_INT 20
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 4
 885: PUSH
 886: LD_INT 1
 888: PLUS
 889: ARRAY
 890: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 891: LD_ADDR_EXP 23
 895: PUSH
 896: LD_INT 10
 898: PUSH
 899: EMPTY
 900: LIST
 901: PUSH
 902: LD_INT 7
 904: PUSH
 905: LD_INT 14
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 6
 914: PUSH
 915: LD_INT 12
 917: PUSH
 918: LD_INT 18
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: LIST
 925: PUSH
 926: LD_INT 5
 928: PUSH
 929: LD_INT 10
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: LD_INT 20
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 1
 957: PLUS
 958: ARRAY
 959: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
 960: LD_ADDR_EXP 25
 964: PUSH
 965: LD_INT 150
 967: PUSH
 968: LD_INT 125
 970: PUSH
 971: LD_INT 100
 973: PUSH
 974: LD_INT 50
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: PUSH
 983: LD_EXP 5
 987: PUSH
 988: LD_INT 1
 990: PLUS
 991: ARRAY
 992: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
 993: LD_ADDR_EXP 29
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 10500
1003: PUSH
1004: LD_INT 6300
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_EXP 11
1016: PUSH
1017: LD_INT 1
1019: PLUS
1020: ARRAY
1021: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1022: LD_ADDR_EXP 30
1026: PUSH
1027: LD_INT 0
1029: PUSH
1030: LD_INT 31500
1032: PUSH
1033: LD_INT 10500
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_EXP 11
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: ARRAY
1050: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1051: LD_ADDR_EXP 27
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: LD_INT 3
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_EXP 12
1078: PUSH
1079: LD_INT 1
1081: PLUS
1082: ARRAY
1083: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1084: LD_ADDR_EXP 28
1088: PUSH
1089: LD_INT 30
1091: PUSH
1092: LD_INT 50
1094: PUSH
1095: LD_INT 80
1097: PUSH
1098: LD_INT 100
1100: PUSH
1101: LD_INT 130
1103: PUSH
1104: LD_INT 150
1106: PUSH
1107: LD_INT 200
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_EXP 13
1123: PUSH
1124: LD_INT 1
1126: PLUS
1127: ARRAY
1128: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1129: LD_ADDR_EXP 26
1133: PUSH
1134: LD_INT 1
1136: NEG
1137: PUSH
1138: LD_INT 350
1140: PUSH
1141: LD_INT 700
1143: PUSH
1144: LD_INT 1400
1146: PUSH
1147: LD_INT 0
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_EXP 9
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ARRAY
1166: ST_TO_ADDR
// battle_flags_id := [ ] ;
1167: LD_ADDR_EXP 47
1171: PUSH
1172: EMPTY
1173: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1174: LD_ADDR_EXP 31
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_EXP 32
1193: PUSH
1194: LD_INT 1
1196: PLUS
1197: ARRAY
1198: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1199: LD_ADDR_EXP 33
1203: PUSH
1204: LD_INT 0
1206: PUSH
1207: LD_INT 1
1209: PUSH
1210: LD_INT 63000
1212: PUSH
1213: LD_INT 126000
1215: PUSH
1216: LD_INT 189000
1218: PUSH
1219: LD_INT 252000
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: PUSH
1230: LD_EXP 15
1234: PUSH
1235: LD_INT 1
1237: PLUS
1238: ARRAY
1239: ST_TO_ADDR
// end ;
1240: LD_VAR 0 1
1244: RET
// function init_map ; var i , j ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1250: LD_ADDR_EXP 43
1254: PUSH
1255: LD_INT 12
1257: PUSH
1258: LD_INT 4
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PUSH
1265: LD_INT 45
1267: PUSH
1268: LD_INT 81
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 116
1277: PUSH
1278: LD_INT 195
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 142
1287: PUSH
1288: LD_INT 4
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 201
1297: PUSH
1298: LD_INT 102
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 234
1307: PUSH
1308: LD_INT 194
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1323: LD_ADDR_EXP 44
1327: PUSH
1328: LD_INT 12
1330: PUSH
1331: LD_INT 4
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 16
1340: PUSH
1341: LD_INT 25
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 45
1354: PUSH
1355: LD_INT 81
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 102
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 116
1378: PUSH
1379: LD_INT 195
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: LD_INT 92
1388: PUSH
1389: LD_INT 167
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 142
1402: PUSH
1403: LD_INT 4
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: LD_INT 167
1412: PUSH
1413: LD_INT 24
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: LD_INT 201
1426: PUSH
1427: LD_INT 102
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 190
1436: PUSH
1437: LD_INT 77
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: LD_INT 234
1450: PUSH
1451: LD_INT 194
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: PUSH
1458: LD_INT 237
1460: PUSH
1461: LD_INT 171
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1480: LD_ADDR_EXP 45
1484: PUSH
1485: LD_INT 10
1487: PUSH
1488: LD_INT 10
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 93
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: PUSH
1505: LD_INT 102
1507: PUSH
1508: LD_INT 187
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 158
1517: PUSH
1518: LD_INT 6
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: LD_INT 203
1527: PUSH
1528: LD_INT 93
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 252
1537: PUSH
1538: LD_INT 194
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1553: LD_ADDR_EXP 46
1557: PUSH
1558: LD_INT 10
1560: PUSH
1561: LD_INT 10
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 36
1570: PUSH
1571: LD_INT 10
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 51
1584: PUSH
1585: LD_INT 93
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 47
1594: PUSH
1595: LD_INT 72
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 102
1608: PUSH
1609: LD_INT 187
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 93
1618: PUSH
1619: LD_INT 175
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: LD_INT 158
1632: PUSH
1633: LD_INT 6
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 147
1642: PUSH
1643: LD_INT 5
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 203
1656: PUSH
1657: LD_INT 93
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 173
1666: PUSH
1667: LD_INT 71
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 252
1680: PUSH
1681: LD_INT 194
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 243
1690: PUSH
1691: LD_INT 177
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1710: LD_ADDR_EXP 40
1714: PUSH
1715: LD_INT 23
1717: PUSH
1718: LD_INT 15
1720: PUSH
1721: LD_INT 2
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 56
1731: PUSH
1732: LD_INT 85
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 110
1745: PUSH
1746: LD_INT 177
1748: PUSH
1749: LD_INT 3
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 157
1759: PUSH
1760: LD_INT 13
1762: PUSH
1763: LD_INT 3
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 187
1773: PUSH
1774: LD_INT 87
1776: PUSH
1777: LD_INT 5
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_INT 231
1787: PUSH
1788: LD_INT 181
1790: PUSH
1791: LD_INT 5
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
1807: LD_ADDR_EXP 42
1811: PUSH
1812: LD_INT 30
1814: PUSH
1815: LD_INT 22
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 58
1824: PUSH
1825: LD_INT 82
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 113
1834: PUSH
1835: LD_INT 180
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 151
1844: PUSH
1845: LD_INT 24
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 183
1854: PUSH
1855: LD_INT 90
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 223
1864: PUSH
1865: LD_INT 180
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
1880: LD_ADDR_EXP 41
1884: PUSH
1885: LD_INT 33
1887: PUSH
1888: LD_INT 12
1890: PUSH
1891: LD_INT 5
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 42
1901: PUSH
1902: LD_INT 29
1904: PUSH
1905: LD_INT 4
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: PUSH
1913: LD_INT 36
1915: PUSH
1916: LD_INT 20
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 72
1934: PUSH
1935: LD_INT 91
1937: PUSH
1938: LD_INT 4
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 65
1948: PUSH
1949: LD_INT 78
1951: PUSH
1952: LD_INT 4
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 75
1962: PUSH
1963: LD_INT 100
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 102
1981: PUSH
1982: LD_INT 165
1984: PUSH
1985: LD_INT 3
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 122
1995: PUSH
1996: LD_INT 176
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 120
2009: PUSH
2010: LD_INT 184
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 134
2028: PUSH
2029: LD_INT 16
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 132
2042: PUSH
2043: LD_INT 5
2045: PUSH
2046: LD_INT 1
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 157
2056: PUSH
2057: LD_INT 27
2059: PUSH
2060: LD_INT 5
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: LD_INT 172
2075: PUSH
2076: LD_INT 77
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: LIST
2086: PUSH
2087: LD_INT 175
2089: PUSH
2090: LD_INT 96
2092: PUSH
2093: LD_INT 1
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 192
2103: PUSH
2104: LD_INT 104
2106: PUSH
2107: LD_INT 1
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PUSH
2120: LD_INT 216
2122: PUSH
2123: LD_INT 179
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 208
2136: PUSH
2137: LD_INT 160
2139: PUSH
2140: LD_INT 2
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 208
2150: PUSH
2151: LD_INT 171
2153: PUSH
2154: LD_INT 2
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// for i = 1 to 6 do
2175: LD_ADDR_VAR 0 2
2179: PUSH
2180: DOUBLE
2181: LD_INT 1
2183: DEC
2184: ST_TO_ADDR
2185: LD_INT 6
2187: PUSH
2188: FOR_TO
2189: IFFALSE 2286
// if def_extra_oil_deposits then
2191: LD_EXP 6
2195: IFFALSE 2247
// for j in extra_oil_deposits_locations [ i ] do
2197: LD_ADDR_VAR 0 3
2201: PUSH
2202: LD_EXP 44
2206: PUSH
2207: LD_VAR 0 2
2211: ARRAY
2212: PUSH
2213: FOR_IN
2214: IFFALSE 2243
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2216: LD_VAR 0 3
2220: PUSH
2221: LD_INT 1
2223: ARRAY
2224: PPUSH
2225: LD_VAR 0 3
2229: PUSH
2230: LD_INT 2
2232: ARRAY
2233: PPUSH
2234: LD_INT 2
2236: PPUSH
2237: CALL_OW 62
2241: GO 2213
2243: POP
2244: POP
2245: GO 2284
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2247: LD_EXP 43
2251: PUSH
2252: LD_VAR 0 2
2256: ARRAY
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PPUSH
2262: LD_EXP 43
2266: PUSH
2267: LD_VAR 0 2
2271: ARRAY
2272: PUSH
2273: LD_INT 2
2275: ARRAY
2276: PPUSH
2277: LD_INT 2
2279: PPUSH
2280: CALL_OW 62
2284: GO 2188
2286: POP
2287: POP
// if def_extra_sib_deposits then
2288: LD_EXP 7
2292: IFFALSE 2411
// for i = 1 to 6 do
2294: LD_ADDR_VAR 0 2
2298: PUSH
2299: DOUBLE
2300: LD_INT 1
2302: DEC
2303: ST_TO_ADDR
2304: LD_INT 6
2306: PUSH
2307: FOR_TO
2308: IFFALSE 2409
// if def_extra_sib_deposits = 2 then
2310: LD_EXP 7
2314: PUSH
2315: LD_INT 2
2317: EQUAL
2318: IFFALSE 2370
// for j in extra_sib_deposits_locations [ i ] do
2320: LD_ADDR_VAR 0 3
2324: PUSH
2325: LD_EXP 46
2329: PUSH
2330: LD_VAR 0 2
2334: ARRAY
2335: PUSH
2336: FOR_IN
2337: IFFALSE 2366
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2339: LD_VAR 0 3
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 2
2355: ARRAY
2356: PPUSH
2357: LD_INT 3
2359: PPUSH
2360: CALL_OW 62
2364: GO 2336
2366: POP
2367: POP
2368: GO 2407
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2370: LD_EXP 45
2374: PUSH
2375: LD_VAR 0 2
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_EXP 45
2389: PUSH
2390: LD_VAR 0 2
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: LD_INT 3
2402: PPUSH
2403: CALL_OW 62
2407: GO 2307
2409: POP
2410: POP
// end ;
2411: LD_VAR 0 1
2415: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2416: LD_INT 0
2418: PPUSH
2419: PPUSH
2420: PPUSH
// if not Team_Game then
2421: LD_EXP 39
2425: NOT
2426: IFFALSE 2524
// begin for i = 1 to 8 do
2428: LD_ADDR_VAR 0 2
2432: PUSH
2433: DOUBLE
2434: LD_INT 1
2436: DEC
2437: ST_TO_ADDR
2438: LD_INT 8
2440: PUSH
2441: FOR_TO
2442: IFFALSE 2520
// for j = 1 to 8 do
2444: LD_ADDR_VAR 0 3
2448: PUSH
2449: DOUBLE
2450: LD_INT 1
2452: DEC
2453: ST_TO_ADDR
2454: LD_INT 8
2456: PUSH
2457: FOR_TO
2458: IFFALSE 2516
// if i <> j then
2460: LD_VAR 0 2
2464: PUSH
2465: LD_VAR 0 3
2469: NONEQUAL
2470: IFFALSE 2494
// SetAttitude ( i , j , att_neutral , true ) else
2472: LD_VAR 0 2
2476: PPUSH
2477: LD_VAR 0 3
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: LD_INT 1
2487: PPUSH
2488: CALL_OW 80
2492: GO 2514
// SetAttitude ( i , j , att_friend , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: LD_INT 1
2509: PPUSH
2510: CALL_OW 80
2514: GO 2457
2516: POP
2517: POP
2518: GO 2441
2520: POP
2521: POP
// end else
2522: GO 2699
// begin if def_shared_vision then
2524: LD_EXP 8
2528: IFFALSE 2593
// begin for i in Teams do
2530: LD_ADDR_VAR 0 2
2534: PUSH
2535: LD_EXP 36
2539: PUSH
2540: FOR_IN
2541: IFFALSE 2591
// for j = 2 to i do
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: DOUBLE
2549: LD_INT 2
2551: DEC
2552: ST_TO_ADDR
2553: LD_VAR 0 2
2557: PUSH
2558: FOR_TO
2559: IFFALSE 2587
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2561: LD_VAR 0 2
2565: PUSH
2566: LD_VAR 0 3
2570: ARRAY
2571: PPUSH
2572: LD_VAR 0 2
2576: PUSH
2577: LD_INT 1
2579: ARRAY
2580: PPUSH
2581: CALL_OW 343
2585: GO 2558
2587: POP
2588: POP
2589: GO 2540
2591: POP
2592: POP
// end ; for i = 1 to 8 do
2593: LD_ADDR_VAR 0 2
2597: PUSH
2598: DOUBLE
2599: LD_INT 1
2601: DEC
2602: ST_TO_ADDR
2603: LD_INT 8
2605: PUSH
2606: FOR_TO
2607: IFFALSE 2697
// for j = 1 to 8 do
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: DOUBLE
2615: LD_INT 1
2617: DEC
2618: ST_TO_ADDR
2619: LD_INT 8
2621: PUSH
2622: FOR_TO
2623: IFFALSE 2693
// if Side_Teams [ i ] = Side_Teams [ j ] then
2625: LD_EXP 35
2629: PUSH
2630: LD_VAR 0 2
2634: ARRAY
2635: PUSH
2636: LD_EXP 35
2640: PUSH
2641: LD_VAR 0 3
2645: ARRAY
2646: EQUAL
2647: IFFALSE 2671
// SetAttitude ( i , j , att_friend , true ) else
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_INT 1
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: CALL_OW 80
2669: GO 2691
// SetAttitude ( i , j , att_enemy , true ) ;
2671: LD_VAR 0 2
2675: PPUSH
2676: LD_VAR 0 3
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 1
2686: PPUSH
2687: CALL_OW 80
2691: GO 2622
2693: POP
2694: POP
2695: GO 2606
2697: POP
2698: POP
// end ; end ;
2699: LD_VAR 0 1
2703: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
// result := [ ] ;
2710: LD_ADDR_VAR 0 7
2714: PUSH
2715: EMPTY
2716: ST_TO_ADDR
// for i := 1 to count do
2717: LD_ADDR_VAR 0 8
2721: PUSH
2722: DOUBLE
2723: LD_INT 1
2725: DEC
2726: ST_TO_ADDR
2727: LD_VAR 0 1
2731: PUSH
2732: FOR_TO
2733: IFFALSE 3151
// begin uc_direction := Rand ( 0 , 5 ) ;
2735: LD_ADDR_OWVAR 24
2739: PUSH
2740: LD_INT 0
2742: PPUSH
2743: LD_INT 5
2745: PPUSH
2746: CALL_OW 12
2750: ST_TO_ADDR
// if commander then
2751: LD_LOC 1
2755: IFFALSE 2864
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2757: LD_ADDR_OWVAR 26
2761: PUSH
2762: LD_OWVAR 19
2766: PUSH
2767: LD_OWVAR 20
2771: ARRAY
2772: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2773: LD_INT 1
2775: PPUSH
2776: LD_INT 2
2778: PPUSH
2779: CALL_OW 12
2783: PPUSH
2784: LD_VAR 0 2
2788: PPUSH
2789: LD_EXP 22
2793: PUSH
2794: LD_INT 2
2796: PLUS
2797: PPUSH
2798: CALL_OW 380
// hc_importance := 105 ;
2802: LD_ADDR_OWVAR 32
2806: PUSH
2807: LD_INT 105
2809: ST_TO_ADDR
// commander := false ;
2810: LD_ADDR_LOC 1
2814: PUSH
2815: LD_INT 0
2817: ST_TO_ADDR
// if Multiplayer then
2818: LD_OWVAR 4
2822: IFFALSE 2862
// begin hc_gallery := MULTIAVATARS ;
2824: LD_ADDR_OWVAR 33
2828: PUSH
2829: LD_STRING MULTIAVATARS
2831: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2832: LD_ADDR_OWVAR 34
2836: PUSH
2837: LD_OWVAR 20
2841: PPUSH
2842: CALL_OW 525
2846: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2847: LD_ADDR_OWVAR 27
2851: PUSH
2852: LD_OWVAR 20
2856: PPUSH
2857: CALL_OW 526
2861: ST_TO_ADDR
// end ; end else
2862: GO 2927
// begin hc_name :=  ;
2864: LD_ADDR_OWVAR 26
2868: PUSH
2869: LD_STRING 
2871: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2872: LD_INT 1
2874: PPUSH
2875: LD_INT 2
2877: PPUSH
2878: CALL_OW 12
2882: PPUSH
2883: LD_VAR 0 2
2887: PPUSH
2888: LD_EXP 22
2892: PPUSH
2893: CALL_OW 380
// hc_importance := 0 ;
2897: LD_ADDR_OWVAR 32
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// if Multiplayer then
2905: LD_OWVAR 4
2909: IFFALSE 2927
// begin hc_gallery :=  ;
2911: LD_ADDR_OWVAR 33
2915: PUSH
2916: LD_STRING 
2918: ST_TO_ADDR
// hc_face_number := 0 ;
2919: LD_ADDR_OWVAR 34
2923: PUSH
2924: LD_INT 0
2926: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2927: LD_ADDR_VAR 0 10
2931: PUSH
2932: CALL_OW 44
2936: ST_TO_ADDR
// if global_defined then
2937: LD_LOC 3
2941: IFFALSE 3081
// begin if ( cl = class_soldier ) then
2943: LD_VAR 0 2
2947: PUSH
2948: LD_INT 1
2950: EQUAL
2951: IFFALSE 2971
// j := i + soldiers_created else
2953: LD_ADDR_VAR 0 9
2957: PUSH
2958: LD_VAR 0 8
2962: PUSH
2963: LD_LOC 4
2967: PLUS
2968: ST_TO_ADDR
2969: GO 2981
// j := i ;
2971: LD_ADDR_VAR 0 9
2975: PUSH
2976: LD_VAR 0 8
2980: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2981: LD_LOC 2
2985: PUSH
2986: LD_VAR 0 2
2990: ARRAY
2991: PUSH
2992: LD_VAR 0 9
2996: ARRAY
2997: PPUSH
2998: LD_VAR 0 10
3002: PPUSH
3003: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3007: LD_VAR 0 10
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: LD_LOC 2
3019: PUSH
3020: LD_VAR 0 2
3024: ARRAY
3025: PUSH
3026: LD_VAR 0 9
3030: ARRAY
3031: PPUSH
3032: LD_INT 2
3034: PPUSH
3035: CALL_OW 260
3039: PPUSH
3040: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3044: LD_VAR 0 10
3048: PPUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_LOC 2
3056: PUSH
3057: LD_VAR 0 2
3061: ARRAY
3062: PUSH
3063: LD_VAR 0 9
3067: ARRAY
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: CALL_OW 260
3076: PPUSH
3077: CALL_OW 239
// end ; if building then
3081: LD_VAR 0 6
3085: IFFALSE 3103
// PlaceHumanInUnit ( un , building ) else
3087: LD_VAR 0 10
3091: PPUSH
3092: LD_VAR 0 6
3096: PPUSH
3097: CALL_OW 52
3101: GO 3130
// PlaceUnitXYR ( un , x , y , r , false ) ;
3103: LD_VAR 0 10
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PPUSH
3118: LD_VAR 0 5
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 50
// result := result ^ [ un ] ;
3130: LD_ADDR_VAR 0 7
3134: PUSH
3135: LD_VAR 0 7
3139: PUSH
3140: LD_VAR 0 10
3144: PUSH
3145: EMPTY
3146: LIST
3147: ADD
3148: ST_TO_ADDR
// end ;
3149: GO 2732
3151: POP
3152: POP
// if not global_defined then
3153: LD_LOC 3
3157: NOT
3158: IFFALSE 3236
// if ( global_units >= cl ) then
3160: LD_LOC 2
3164: PUSH
3165: LD_VAR 0 2
3169: GREATEREQUAL
3170: IFFALSE 3211
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3172: LD_ADDR_LOC 2
3176: PUSH
3177: LD_LOC 2
3181: PPUSH
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_LOC 2
3191: PUSH
3192: LD_VAR 0 2
3196: ARRAY
3197: PUSH
3198: LD_VAR 0 7
3202: ADD
3203: PPUSH
3204: CALL_OW 1
3208: ST_TO_ADDR
3209: GO 3236
// global_units := Replace ( global_units , cl , result ) ;
3211: LD_ADDR_LOC 2
3215: PUSH
3216: LD_LOC 2
3220: PPUSH
3221: LD_VAR 0 2
3225: PPUSH
3226: LD_VAR 0 7
3230: PPUSH
3231: CALL_OW 1
3235: ST_TO_ADDR
// end ;
3236: LD_VAR 0 7
3240: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3241: LD_INT 0
3243: PPUSH
3244: PPUSH
3245: PPUSH
3246: PPUSH
3247: PPUSH
3248: PPUSH
3249: PPUSH
3250: PPUSH
3251: PPUSH
// if side in [ 0 , 9 ] then
3252: LD_VAR 0 1
3256: PUSH
3257: LD_INT 0
3259: PUSH
3260: LD_INT 9
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: IN
3267: IFFALSE 3271
// exit ;
3269: GO 4288
// pos := Side_Positions [ side ] ;
3271: LD_ADDR_VAR 0 3
3275: PUSH
3276: LD_EXP 37
3280: PUSH
3281: LD_VAR 0 1
3285: ARRAY
3286: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3287: LD_ADDR_OWVAR 21
3291: PUSH
3292: LD_EXP 38
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: ST_TO_ADDR
// uc_side := side ;
3303: LD_ADDR_OWVAR 20
3307: PUSH
3308: LD_VAR 0 1
3312: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3313: LD_ADDR_VAR 0 4
3317: PUSH
3318: LD_EXP 40
3322: PUSH
3323: LD_VAR 0 3
3327: ARRAY
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3333: LD_ADDR_VAR 0 5
3337: PUSH
3338: LD_EXP 40
3342: PUSH
3343: LD_VAR 0 3
3347: ARRAY
3348: PUSH
3349: LD_INT 2
3351: ARRAY
3352: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3353: LD_ADDR_VAR 0 6
3357: PUSH
3358: LD_EXP 40
3362: PUSH
3363: LD_VAR 0 3
3367: ARRAY
3368: PUSH
3369: LD_INT 3
3371: ARRAY
3372: ST_TO_ADDR
// if is_depot then
3373: LD_EXP 19
3377: IFFALSE 3510
// begin bc_type = b_depot ;
3379: LD_ADDR_OWVAR 42
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3387: LD_ADDR_VAR 0 10
3391: PUSH
3392: LD_VAR 0 4
3396: PPUSH
3397: LD_VAR 0 5
3401: PPUSH
3402: LD_VAR 0 6
3406: PPUSH
3407: CALL_OW 47
3411: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3412: LD_VAR 0 10
3416: PPUSH
3417: LD_STRING @
3419: PUSH
3420: LD_VAR 0 1
3424: STR
3425: PPUSH
3426: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3430: LD_VAR 0 10
3434: PPUSH
3435: CALL_OW 274
3439: PPUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_EXP 24
3447: PUSH
3448: LD_INT 1
3450: ARRAY
3451: PPUSH
3452: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3456: LD_VAR 0 10
3460: PPUSH
3461: CALL_OW 274
3465: PPUSH
3466: LD_INT 2
3468: PPUSH
3469: LD_EXP 24
3473: PUSH
3474: LD_INT 2
3476: ARRAY
3477: PPUSH
3478: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3482: LD_VAR 0 10
3486: PPUSH
3487: CALL_OW 274
3491: PPUSH
3492: LD_INT 3
3494: PPUSH
3495: LD_EXP 24
3499: PUSH
3500: LD_INT 3
3502: ARRAY
3503: PPUSH
3504: CALL_OW 277
// end else
3508: GO 3654
// begin for i := 1 to 3 do
3510: LD_ADDR_VAR 0 7
3514: PUSH
3515: DOUBLE
3516: LD_INT 1
3518: DEC
3519: ST_TO_ADDR
3520: LD_INT 3
3522: PUSH
3523: FOR_TO
3524: IFFALSE 3652
// begin r := starting_resources [ i ] ;
3526: LD_ADDR_VAR 0 8
3530: PUSH
3531: LD_EXP 24
3535: PUSH
3536: LD_VAR 0 7
3540: ARRAY
3541: ST_TO_ADDR
// while r >= 10 do
3542: LD_VAR 0 8
3546: PUSH
3547: LD_INT 10
3549: GREATEREQUAL
3550: IFFALSE 3650
// if r > 50 then
3552: LD_VAR 0 8
3556: PUSH
3557: LD_INT 50
3559: GREATER
3560: IFFALSE 3606
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3562: LD_VAR 0 7
3566: PPUSH
3567: LD_INT 5
3569: PPUSH
3570: LD_VAR 0 4
3574: PPUSH
3575: LD_VAR 0 5
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 60
// r := r - 50 ;
3590: LD_ADDR_VAR 0 8
3594: PUSH
3595: LD_VAR 0 8
3599: PUSH
3600: LD_INT 50
3602: MINUS
3603: ST_TO_ADDR
// end else
3604: GO 3648
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3606: LD_VAR 0 7
3610: PPUSH
3611: LD_VAR 0 8
3615: PUSH
3616: LD_INT 10
3618: DIV
3619: PPUSH
3620: LD_VAR 0 4
3624: PPUSH
3625: LD_VAR 0 5
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: LD_INT 0
3635: PPUSH
3636: CALL_OW 60
// r := 0 ;
3640: LD_ADDR_VAR 0 8
3644: PUSH
3645: LD_INT 0
3647: ST_TO_ADDR
// end ;
3648: GO 3542
// end ;
3650: GO 3523
3652: POP
3653: POP
// end ; for r in starting_crates do
3654: LD_ADDR_VAR 0 8
3658: PUSH
3659: LD_EXP 23
3663: PUSH
3664: FOR_IN
3665: IFFALSE 3697
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3667: LD_INT 1
3669: PPUSH
3670: LD_INT 5
3672: PPUSH
3673: LD_VAR 0 4
3677: PPUSH
3678: LD_VAR 0 5
3682: PPUSH
3683: LD_VAR 0 8
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 60
3695: GO 3664
3697: POP
3698: POP
// if def_morale_flags then
3699: LD_EXP 9
3703: IFFALSE 3842
// begin x := start_def [ pos ] [ 1 ] ;
3705: LD_ADDR_VAR 0 4
3709: PUSH
3710: LD_EXP 42
3714: PUSH
3715: LD_VAR 0 3
3719: ARRAY
3720: PUSH
3721: LD_INT 1
3723: ARRAY
3724: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3725: LD_ADDR_VAR 0 5
3729: PUSH
3730: LD_EXP 42
3734: PUSH
3735: LD_VAR 0 3
3739: ARRAY
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3745: LD_VAR 0 4
3749: PPUSH
3750: LD_VAR 0 5
3754: PPUSH
3755: LD_INT 12
3757: PPUSH
3758: LD_INT 2
3760: PPUSH
3761: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3765: LD_ADDR_EXP 47
3769: PUSH
3770: LD_EXP 47
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: LD_VAR 0 4
3784: PPUSH
3785: LD_VAR 0 5
3789: PPUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 100
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: LD_INT 2
3802: PUSH
3803: LD_INT 50
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 20
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 20
3822: PUSH
3823: LD_INT 100
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 418
3840: ADD
3841: ST_TO_ADDR
// end ; commander := true ;
3842: LD_ADDR_LOC 1
3846: PUSH
3847: LD_INT 1
3849: ST_TO_ADDR
// soldiers_created := 0 ;
3850: LD_ADDR_LOC 4
3854: PUSH
3855: LD_INT 0
3857: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3858: LD_ADDR_VAR 0 7
3862: PUSH
3863: DOUBLE
3864: LD_INT 1
3866: DEC
3867: ST_TO_ADDR
3868: LD_EXP 20
3872: PUSH
3873: FOR_TO
3874: IFFALSE 4027
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3876: LD_ADDR_VAR 0 4
3880: PUSH
3881: LD_EXP 41
3885: PUSH
3886: LD_VAR 0 3
3890: ARRAY
3891: PUSH
3892: LD_VAR 0 7
3896: ARRAY
3897: PUSH
3898: LD_INT 1
3900: ARRAY
3901: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3902: LD_ADDR_VAR 0 5
3906: PUSH
3907: LD_EXP 41
3911: PUSH
3912: LD_VAR 0 3
3916: ARRAY
3917: PUSH
3918: LD_VAR 0 7
3922: ARRAY
3923: PUSH
3924: LD_INT 2
3926: ARRAY
3927: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3928: LD_ADDR_VAR 0 6
3932: PUSH
3933: LD_EXP 41
3937: PUSH
3938: LD_VAR 0 3
3942: ARRAY
3943: PUSH
3944: LD_VAR 0 7
3948: ARRAY
3949: PUSH
3950: LD_INT 3
3952: ARRAY
3953: ST_TO_ADDR
// bc_type := b_breastwork ;
3954: LD_ADDR_OWVAR 42
3958: PUSH
3959: LD_INT 31
3961: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3962: LD_ADDR_VAR 0 9
3966: PUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_VAR 0 6
3981: PPUSH
3982: CALL_OW 47
3986: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3987: LD_INT 1
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: LD_INT 0
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: LD_VAR 0 9
4006: PPUSH
4007: CALL 2704 0 6
// soldiers_created := soldiers_created + 1 ;
4011: LD_ADDR_LOC 4
4015: PUSH
4016: LD_LOC 4
4020: PUSH
4021: LD_INT 1
4023: PLUS
4024: ST_TO_ADDR
// end ;
4025: GO 3873
4027: POP
4028: POP
// x := start_def [ pos ] [ 1 ] ;
4029: LD_ADDR_VAR 0 4
4033: PUSH
4034: LD_EXP 42
4038: PUSH
4039: LD_VAR 0 3
4043: ARRAY
4044: PUSH
4045: LD_INT 1
4047: ARRAY
4048: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4049: LD_ADDR_VAR 0 5
4053: PUSH
4054: LD_EXP 42
4058: PUSH
4059: LD_VAR 0 3
4063: ARRAY
4064: PUSH
4065: LD_INT 2
4067: ARRAY
4068: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4069: LD_LOC 8
4073: PUSH
4074: LD_EXP 20
4078: MINUS
4079: PPUSH
4080: LD_INT 1
4082: PPUSH
4083: LD_VAR 0 4
4087: PPUSH
4088: LD_VAR 0 5
4092: PPUSH
4093: LD_INT 5
4095: PPUSH
4096: LD_INT 0
4098: PPUSH
4099: CALL 2704 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4103: LD_LOC 5
4107: PPUSH
4108: LD_INT 2
4110: PPUSH
4111: LD_VAR 0 4
4115: PPUSH
4116: LD_VAR 0 5
4120: PPUSH
4121: LD_INT 5
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL 2704 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4131: LD_LOC 7
4135: PPUSH
4136: LD_INT 3
4138: PPUSH
4139: LD_VAR 0 4
4143: PPUSH
4144: LD_VAR 0 5
4148: PPUSH
4149: LD_INT 5
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: CALL 2704 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4159: LD_LOC 6
4163: PPUSH
4164: LD_INT 4
4166: PPUSH
4167: LD_VAR 0 4
4171: PPUSH
4172: LD_VAR 0 5
4176: PPUSH
4177: LD_INT 5
4179: PPUSH
4180: LD_INT 0
4182: PPUSH
4183: CALL 2704 0 6
// if def_siberite_detection then
4187: LD_EXP 10
4191: IFFALSE 4208
// SetTech ( tech_SibDet , side , state_researched ) ;
4193: LD_INT 20
4195: PPUSH
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_INT 2
4203: PPUSH
4204: CALL_OW 322
// if def_siberite_bomb = 1 then
4208: LD_EXP 15
4212: PUSH
4213: LD_INT 1
4215: EQUAL
4216: IFFALSE 4250
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4218: LD_INT 25
4220: PPUSH
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 1
4228: PPUSH
4229: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4233: LD_INT 73
4235: PPUSH
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 1
4243: PPUSH
4244: CALL_OW 322
// end else
4248: GO 4280
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4250: LD_INT 25
4252: PPUSH
4253: LD_VAR 0 1
4257: PPUSH
4258: LD_INT 0
4260: PPUSH
4261: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4265: LD_INT 73
4267: PPUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 0
4275: PPUSH
4276: CALL_OW 322
// end ; global_defined := true ;
4280: LD_ADDR_LOC 3
4284: PUSH
4285: LD_INT 1
4287: ST_TO_ADDR
// end ;
4288: LD_VAR 0 2
4292: RET
// every 0 0$1 do
4293: GO 4295
4295: DISABLE
// if ( def_siberite_bomb > 1 ) then
4296: LD_EXP 15
4300: PUSH
4301: LD_INT 1
4303: GREATER
4304: IFFALSE 4319
// begin wait ( siberite_bomb_Delay ) ;
4306: LD_EXP 33
4310: PPUSH
4311: CALL_OW 67
// EnableSibFiss ;
4315: CALL 4320 0 0
// end ;
4319: END
// function EnableSibFiss ; var i ; begin
4320: LD_INT 0
4322: PPUSH
4323: PPUSH
// for i := 1 to 8 do
4324: LD_ADDR_VAR 0 2
4328: PUSH
4329: DOUBLE
4330: LD_INT 1
4332: DEC
4333: ST_TO_ADDR
4334: LD_INT 8
4336: PUSH
4337: FOR_TO
4338: IFFALSE 4384
// if Side_Positions [ i ] then
4340: LD_EXP 37
4344: PUSH
4345: LD_VAR 0 2
4349: ARRAY
4350: IFFALSE 4382
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4352: LD_INT 25
4354: PPUSH
4355: LD_VAR 0 2
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4367: LD_INT 73
4369: PPUSH
4370: LD_VAR 0 2
4374: PPUSH
4375: LD_INT 1
4377: PPUSH
4378: CALL_OW 322
// end ;
4382: GO 4337
4384: POP
4385: POP
// end ;
4386: LD_VAR 0 1
4390: RET
// function prepare_sides ; var i ; begin
4391: LD_INT 0
4393: PPUSH
4394: PPUSH
// global_units := [ ] ;
4395: LD_ADDR_LOC 2
4399: PUSH
4400: EMPTY
4401: ST_TO_ADDR
// global_defined := false ;
4402: LD_ADDR_LOC 3
4406: PUSH
4407: LD_INT 0
4409: ST_TO_ADDR
// CountClassMembers ;
4410: CALL 4460 0 0
// for i := 1 to 8 do
4414: LD_ADDR_VAR 0 2
4418: PUSH
4419: DOUBLE
4420: LD_INT 1
4422: DEC
4423: ST_TO_ADDR
4424: LD_INT 8
4426: PUSH
4427: FOR_TO
4428: IFFALSE 4453
// if Side_Positions [ i ] then
4430: LD_EXP 37
4434: PUSH
4435: LD_VAR 0 2
4439: ARRAY
4440: IFFALSE 4451
// prepare_side ( i ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: CALL 3241 0 1
4451: GO 4427
4453: POP
4454: POP
// end ;
4455: LD_VAR 0 1
4459: RET
// function CountClassMembers ; var Mode ; begin
4460: LD_INT 0
4462: PPUSH
4463: PPUSH
// if No_Mechs then
4464: LD_EXP 17
4468: IFFALSE 4480
// Mode := 2 else
4470: LD_ADDR_VAR 0 2
4474: PUSH
4475: LD_INT 2
4477: ST_TO_ADDR
4478: GO 4488
// Mode := 1 ;
4480: LD_ADDR_VAR 0 2
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// neng := number_of_people ;
4488: LD_ADDR_LOC 5
4492: PUSH
4493: LD_EXP 21
4497: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4498: LD_ADDR_LOC 8
4502: PUSH
4503: LD_LOC 5
4507: PUSH
4508: LD_INT 4
4510: PUSH
4511: LD_INT 3
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: DIV
4524: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4525: LD_LOC 8
4529: PUSH
4530: LD_EXP 20
4534: LESS
4535: IFFALSE 4547
// nsol := number_of_breastworks ;
4537: LD_ADDR_LOC 8
4541: PUSH
4542: LD_EXP 20
4546: ST_TO_ADDR
// neng := neng - nsol ;
4547: LD_ADDR_LOC 5
4551: PUSH
4552: LD_LOC 5
4556: PUSH
4557: LD_LOC 8
4561: MINUS
4562: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4563: LD_ADDR_LOC 6
4567: PUSH
4568: LD_LOC 5
4572: PUSH
4573: LD_INT 3
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: DIV
4589: ST_TO_ADDR
// if ( nsci < 1 ) then
4590: LD_LOC 6
4594: PUSH
4595: LD_INT 1
4597: LESS
4598: IFFALSE 4608
// nsci := 1 ;
4600: LD_ADDR_LOC 6
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// neng := neng - nsci ;
4608: LD_ADDR_LOC 5
4612: PUSH
4613: LD_LOC 5
4617: PUSH
4618: LD_LOC 6
4622: MINUS
4623: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4624: LD_ADDR_LOC 7
4628: PUSH
4629: LD_LOC 5
4633: PUSH
4634: LD_INT 2
4636: DIV
4637: PUSH
4638: LD_INT 0
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: LD_VAR 0 2
4649: ARRAY
4650: ST_TO_ADDR
// neng := neng - nmech ;
4651: LD_ADDR_LOC 5
4655: PUSH
4656: LD_LOC 5
4660: PUSH
4661: LD_LOC 7
4665: MINUS
4666: ST_TO_ADDR
// if ( neng < 1 ) then
4667: LD_LOC 5
4671: PUSH
4672: LD_INT 1
4674: LESS
4675: IFFALSE 4685
// neng := 1 ;
4677: LD_ADDR_LOC 5
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// end ;
4685: LD_VAR 0 1
4689: RET
// function Init_Win_Condition ; begin
4690: LD_INT 0
4692: PPUSH
// if Team_Game then
4693: LD_EXP 39
4697: IFFALSE 4704
// enable ( 98 ) else
4699: LD_INT 98
4701: ENABLE_MARKED
4702: GO 4707
// enable ( 99 ) ;
4704: LD_INT 99
4706: ENABLE_MARKED
// case Game_Type of 3 :
4707: LD_EXP 18
4711: PUSH
4712: LD_INT 3
4714: DOUBLE
4715: EQUAL
4716: IFTRUE 4720
4718: GO 4726
4720: POP
// enable ( 100 ) ; end ;
4721: LD_INT 100
4723: ENABLE_MARKED
4724: GO 4727
4726: POP
// end ;
4727: LD_VAR 0 1
4731: RET
// starting begin disable ( 98 ) ;
4732: LD_INT 98
4734: DISABLE_MARKED
// disable ( 99 ) ;
4735: LD_INT 99
4737: DISABLE_MARKED
// disable ( 400 ) ;
4738: LD_INT 400
4740: DISABLE_MARKED
// disable ( 401 ) ;
4741: LD_INT 401
4743: DISABLE_MARKED
// mp_selectmsg := true ;
4744: LD_ADDR_OWVAR 13
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4752: CALL 0 0 0
// init_map ;
4756: CALL 1245 0 0
// init_respawning ;
4760: CALL 6528 0 0
// set_shared_visions_and_alliances ;
4764: CALL 2416 0 0
// prepare_sides ;
4768: CALL 4391 0 0
// ShowTimer ;
4772: CALL 8333 0 0
// music_nat := Side_Nations [ your_side ] ;
4776: LD_ADDR_OWVAR 71
4780: PUSH
4781: LD_EXP 38
4785: PUSH
4786: LD_OWVAR 2
4790: ARRAY
4791: ST_TO_ADDR
// if IAmSpec then
4792: CALL_OW 531
4796: IFFALSE 4832
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4798: LD_INT 0
4800: PPUSH
4801: LD_INT 0
4803: PPUSH
4804: LD_OWVAR 2
4808: PPUSH
4809: LD_INT 32767
4811: NEG
4812: PPUSH
4813: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
4817: LD_INT 104
4819: PPUSH
4820: LD_INT 69
4822: PPUSH
4823: CALL_OW 86
// enable ( 400 ) ;
4827: LD_INT 400
4829: ENABLE_MARKED
// end else
4830: GO 4886
// begin ResetFog ;
4832: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4836: LD_EXP 42
4840: PUSH
4841: LD_EXP 37
4845: PUSH
4846: LD_OWVAR 2
4850: ARRAY
4851: ARRAY
4852: PUSH
4853: LD_INT 1
4855: ARRAY
4856: PPUSH
4857: LD_EXP 42
4861: PUSH
4862: LD_EXP 37
4866: PUSH
4867: LD_OWVAR 2
4871: ARRAY
4872: ARRAY
4873: PUSH
4874: LD_INT 2
4876: ARRAY
4877: PPUSH
4878: CALL_OW 86
// Init_Win_Condition ;
4882: CALL 4690 0 0
// end ; InitApeman ;
4886: CALL 5695 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
4890: LD_ADDR_EXP 56
4894: PUSH
4895: LD_INT 7
4897: PUSH
4898: LD_INT 8
4900: PUSH
4901: LD_INT 9
4903: PUSH
4904: LD_INT 10
4906: PUSH
4907: LD_INT 11
4909: PUSH
4910: LD_INT 12
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: ST_TO_ADDR
// BeginBuildUp ;
4921: CALL 8494 0 0
// end ;
4925: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 and spect = 0 do
4926: LD_INT 22
4928: PUSH
4929: LD_OWVAR 2
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 2
4940: PUSH
4941: LD_INT 21
4943: PUSH
4944: LD_INT 1
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 33
4953: PUSH
4954: LD_INT 3
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 33
4963: PUSH
4964: LD_INT 5
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 30
4973: PUSH
4974: LD_INT 0
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 30
4983: PUSH
4984: LD_INT 1
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: PPUSH
5003: CALL_OW 69
5007: PUSH
5008: LD_INT 0
5010: EQUAL
5011: PUSH
5012: LD_EXP 31
5016: PUSH
5017: LD_INT 0
5019: EQUAL
5020: AND
5021: IFFALSE 5035
5023: GO 5025
5025: DISABLE
// begin fogoff ( your_side ) ;
5026: LD_OWVAR 2
5030: PPUSH
5031: CALL_OW 344
// end ; end_of_file
5035: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5036: GO 5038
5038: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5039: LD_INT 4
5041: PPUSH
5042: LD_INT 5
5044: PPUSH
5045: CALL_OW 12
5049: PPUSH
5050: LD_INT 1
5052: PPUSH
5053: CALL_OW 57
// enable ;
5057: ENABLE
// end ;
5058: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5059: GO 5061
5061: DISABLE
5062: LD_INT 0
5064: PPUSH
5065: PPUSH
// begin case tick of 1 .. 1 1$0 :
5066: LD_OWVAR 1
5070: PUSH
5071: LD_INT 1
5073: DOUBLE
5074: GREATEREQUAL
5075: IFFALSE 5083
5077: LD_INT 2100
5079: DOUBLE
5080: LESSEQUAL
5081: IFTRUE 5085
5083: GO 5113
5085: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5086: LD_EXP 25
5090: PUSH
5091: LD_INT 100
5093: DIVREAL
5094: PUSH
5095: LD_INT 350
5097: PPUSH
5098: LD_INT 1050
5100: PPUSH
5101: CALL_OW 12
5105: MUL
5106: PPUSH
5107: CALL_OW 67
5111: GO 5415
5113: LD_INT 2100
5115: PUSH
5116: LD_INT 1
5118: PLUS
5119: DOUBLE
5120: GREATEREQUAL
5121: IFFALSE 5129
5123: LD_INT 10500
5125: DOUBLE
5126: LESSEQUAL
5127: IFTRUE 5131
5129: GO 5159
5131: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5132: LD_EXP 25
5136: PUSH
5137: LD_INT 100
5139: DIVREAL
5140: PUSH
5141: LD_INT 1050
5143: PPUSH
5144: LD_INT 1575
5146: PPUSH
5147: CALL_OW 12
5151: MUL
5152: PPUSH
5153: CALL_OW 67
5157: GO 5415
5159: LD_INT 10500
5161: PUSH
5162: LD_INT 1
5164: PLUS
5165: DOUBLE
5166: GREATEREQUAL
5167: IFFALSE 5175
5169: LD_INT 21000
5171: DOUBLE
5172: LESSEQUAL
5173: IFTRUE 5177
5175: GO 5205
5177: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5178: LD_EXP 25
5182: PUSH
5183: LD_INT 100
5185: DIVREAL
5186: PUSH
5187: LD_INT 1575
5189: PPUSH
5190: LD_INT 2100
5192: PPUSH
5193: CALL_OW 12
5197: MUL
5198: PPUSH
5199: CALL_OW 67
5203: GO 5415
5205: LD_INT 21000
5207: PUSH
5208: LD_INT 1
5210: PLUS
5211: DOUBLE
5212: GREATEREQUAL
5213: IFFALSE 5221
5215: LD_INT 42000
5217: DOUBLE
5218: LESSEQUAL
5219: IFTRUE 5223
5221: GO 5251
5223: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5224: LD_EXP 25
5228: PUSH
5229: LD_INT 100
5231: DIVREAL
5232: PUSH
5233: LD_INT 2100
5235: PPUSH
5236: LD_INT 2625
5238: PPUSH
5239: CALL_OW 12
5243: MUL
5244: PPUSH
5245: CALL_OW 67
5249: GO 5415
5251: LD_INT 42000
5253: PUSH
5254: LD_INT 1
5256: PLUS
5257: DOUBLE
5258: GREATEREQUAL
5259: IFFALSE 5267
5261: LD_INT 63000
5263: DOUBLE
5264: LESSEQUAL
5265: IFTRUE 5269
5267: GO 5297
5269: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5270: LD_EXP 25
5274: PUSH
5275: LD_INT 100
5277: DIVREAL
5278: PUSH
5279: LD_INT 2625
5281: PPUSH
5282: LD_INT 3150
5284: PPUSH
5285: CALL_OW 12
5289: MUL
5290: PPUSH
5291: CALL_OW 67
5295: GO 5415
5297: LD_INT 63000
5299: PUSH
5300: LD_INT 1
5302: PLUS
5303: DOUBLE
5304: GREATEREQUAL
5305: IFFALSE 5313
5307: LD_INT 105000
5309: DOUBLE
5310: LESSEQUAL
5311: IFTRUE 5315
5313: GO 5343
5315: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5316: LD_EXP 25
5320: PUSH
5321: LD_INT 100
5323: DIVREAL
5324: PUSH
5325: LD_INT 3150
5327: PPUSH
5328: LD_INT 3675
5330: PPUSH
5331: CALL_OW 12
5335: MUL
5336: PPUSH
5337: CALL_OW 67
5341: GO 5415
5343: LD_INT 105000
5345: PUSH
5346: LD_INT 1
5348: PLUS
5349: DOUBLE
5350: GREATEREQUAL
5351: IFFALSE 5359
5353: LD_INT 630000
5355: DOUBLE
5356: LESSEQUAL
5357: IFTRUE 5361
5359: GO 5389
5361: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5362: LD_EXP 25
5366: PUSH
5367: LD_INT 100
5369: DIVREAL
5370: PUSH
5371: LD_INT 3675
5373: PPUSH
5374: LD_INT 4200
5376: PPUSH
5377: CALL_OW 12
5381: MUL
5382: PPUSH
5383: CALL_OW 67
5387: GO 5415
5389: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5390: LD_EXP 25
5394: PUSH
5395: LD_INT 100
5397: DIVREAL
5398: PUSH
5399: LD_INT 4200
5401: PPUSH
5402: LD_INT 5250
5404: PPUSH
5405: CALL_OW 12
5409: MUL
5410: PPUSH
5411: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5415: LD_ADDR_VAR 0 2
5419: PUSH
5420: LD_INT 3
5422: PPUSH
5423: LD_INT 5
5425: PPUSH
5426: CALL_OW 12
5430: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5431: LD_ADDR_VAR 0 1
5435: PUSH
5436: LD_EXP 37
5440: PUSH
5441: LD_INT 0
5443: PUSH
5444: EMPTY
5445: LIST
5446: DIFF
5447: PUSH
5448: FOR_IN
5449: IFFALSE 5498
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5451: LD_VAR 0 2
5455: PPUSH
5456: LD_EXP 42
5460: PUSH
5461: LD_VAR 0 1
5465: ARRAY
5466: PUSH
5467: LD_INT 1
5469: ARRAY
5470: PPUSH
5471: LD_EXP 42
5475: PUSH
5476: LD_VAR 0 1
5480: ARRAY
5481: PUSH
5482: LD_INT 2
5484: ARRAY
5485: PPUSH
5486: LD_INT 20
5488: PPUSH
5489: LD_INT 1
5491: PPUSH
5492: CALL_OW 56
5496: GO 5448
5498: POP
5499: POP
// enable ;
5500: ENABLE
// end ; end_of_file
5501: PPOPN 2
5503: END
// every 20 20$00 trigger apemanNumber do
5504: LD_EXP 48
5508: IFFALSE 5541
5510: GO 5512
5512: DISABLE
// begin enable ;
5513: ENABLE
// if apeLevel >= 8 then
5514: LD_EXP 53
5518: PUSH
5519: LD_INT 8
5521: GREATEREQUAL
5522: IFFALSE 5527
// disable else
5524: DISABLE
5525: GO 5541
// apeLevel := apeLevel + 1 ;
5527: LD_ADDR_EXP 53
5531: PUSH
5532: LD_EXP 53
5536: PUSH
5537: LD_INT 1
5539: PLUS
5540: ST_TO_ADDR
// end ;
5541: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5542: LD_EXP 48
5546: PUSH
5547: LD_EXP 49
5551: LESS
5552: IFFALSE 5692
5554: GO 5556
5556: DISABLE
5557: LD_INT 0
5559: PPUSH
5560: PPUSH
5561: PPUSH
5562: PPUSH
// begin enable ;
5563: ENABLE
// for i := 1 to apemanPos do
5564: LD_ADDR_VAR 0 1
5568: PUSH
5569: DOUBLE
5570: LD_INT 1
5572: DEC
5573: ST_TO_ADDR
5574: LD_EXP 51
5578: PUSH
5579: FOR_TO
5580: IFFALSE 5690
// begin if apemanPlayerCount [ i ] then
5582: LD_EXP 52
5586: PUSH
5587: LD_VAR 0 1
5591: ARRAY
5592: IFFALSE 5688
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5594: LD_EXP 52
5598: PUSH
5599: LD_VAR 0 1
5603: ARRAY
5604: PUSH
5605: LD_EXP 51
5609: PUSH
5610: LD_VAR 0 1
5614: ARRAY
5615: GREATER
5616: IFFALSE 5688
// begin ape := PrepareApeman ;
5618: LD_ADDR_VAR 0 2
5622: PUSH
5623: CALL 6203 0 0
5627: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5628: LD_VAR 0 2
5632: PPUSH
5633: LD_EXP 54
5637: PUSH
5638: LD_VAR 0 1
5642: ARRAY
5643: PPUSH
5644: LD_INT 0
5646: PPUSH
5647: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5651: LD_ADDR_EXP 51
5655: PUSH
5656: LD_EXP 51
5660: PPUSH
5661: LD_VAR 0 1
5665: PPUSH
5666: LD_EXP 51
5670: PUSH
5671: LD_VAR 0 1
5675: ARRAY
5676: PUSH
5677: LD_VAR 0 2
5681: UNION
5682: PPUSH
5683: CALL_OW 1
5687: ST_TO_ADDR
// end ; end ; end ;
5688: GO 5579
5690: POP
5691: POP
// end ;
5692: PPOPN 4
5694: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5695: LD_INT 0
5697: PPUSH
5698: PPUSH
5699: PPUSH
5700: PPUSH
5701: PPUSH
5702: PPUSH
5703: PPUSH
// playersAmount := 0 ;
5704: LD_ADDR_VAR 0 3
5708: PUSH
5709: LD_INT 0
5711: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5712: LD_ADDR_VAR 0 7
5716: PUSH
5717: LD_INT 3
5719: PUSH
5720: LD_INT 2
5722: PUSH
5723: LD_INT 1
5725: PUSH
5726: LD_INT 4
5728: PUSH
5729: LD_INT 6
5731: PUSH
5732: LD_INT 5
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5743: LD_ADDR_EXP 54
5747: PUSH
5748: LD_INT 0
5750: PUSH
5751: LD_INT 0
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: LD_INT 0
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: LD_INT 0
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: ST_TO_ADDR
// for j = 1 to Side_Positions do
5782: LD_ADDR_VAR 0 4
5786: PUSH
5787: DOUBLE
5788: LD_INT 1
5790: DEC
5791: ST_TO_ADDR
5792: LD_EXP 37
5796: PUSH
5797: FOR_TO
5798: IFFALSE 5865
// if Side_Positions [ j ] then
5800: LD_EXP 37
5804: PUSH
5805: LD_VAR 0 4
5809: ARRAY
5810: IFFALSE 5863
// begin playersAmount := playersAmount + 1 ;
5812: LD_ADDR_VAR 0 3
5816: PUSH
5817: LD_VAR 0 3
5821: PUSH
5822: LD_INT 1
5824: PLUS
5825: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5826: LD_ADDR_EXP 54
5830: PUSH
5831: LD_EXP 54
5835: PPUSH
5836: LD_VAR 0 4
5840: PPUSH
5841: LD_VAR 0 7
5845: PUSH
5846: LD_EXP 37
5850: PUSH
5851: LD_VAR 0 4
5855: ARRAY
5856: ARRAY
5857: PPUSH
5858: CALL_OW 1
5862: ST_TO_ADDR
// end ;
5863: GO 5797
5865: POP
5866: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5867: LD_ADDR_EXP 50
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_EXP 27
5879: MUL
5880: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5881: LD_ADDR_EXP 48
5885: PUSH
5886: LD_VAR 0 3
5890: PUSH
5891: LD_EXP 50
5895: MUL
5896: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5897: LD_ADDR_EXP 49
5901: PUSH
5902: LD_EXP 48
5906: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5907: LD_ADDR_EXP 51
5911: PUSH
5912: LD_INT 0
5914: PUSH
5915: LD_INT 0
5917: PUSH
5918: LD_INT 0
5920: PUSH
5921: LD_INT 0
5923: PUSH
5924: LD_INT 0
5926: PUSH
5927: LD_INT 0
5929: PUSH
5930: LD_INT 0
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5946: LD_ADDR_EXP 52
5950: PUSH
5951: LD_INT 0
5953: PUSH
5954: LD_INT 0
5956: PUSH
5957: LD_INT 0
5959: PUSH
5960: LD_INT 0
5962: PUSH
5963: LD_INT 0
5965: PUSH
5966: LD_INT 0
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: LD_INT 0
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: ST_TO_ADDR
// apeLevel := 1 ;
5985: LD_ADDR_EXP 53
5989: PUSH
5990: LD_INT 1
5992: ST_TO_ADDR
// if not apemanNumber then
5993: LD_EXP 48
5997: NOT
5998: IFFALSE 6002
// exit ;
6000: GO 6198
// for i := 1 to apemanPerPlayer do
6002: LD_ADDR_VAR 0 2
6006: PUSH
6007: DOUBLE
6008: LD_INT 1
6010: DEC
6011: ST_TO_ADDR
6012: LD_EXP 50
6016: PUSH
6017: FOR_TO
6018: IFFALSE 6196
// begin for j := 1 to Side_Positions do
6020: LD_ADDR_VAR 0 4
6024: PUSH
6025: DOUBLE
6026: LD_INT 1
6028: DEC
6029: ST_TO_ADDR
6030: LD_EXP 37
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6192
// if Side_Positions [ j ] then
6038: LD_EXP 37
6042: PUSH
6043: LD_VAR 0 4
6047: ARRAY
6048: IFFALSE 6190
// begin pos := Side_Positions [ j ] ;
6050: LD_ADDR_VAR 0 6
6054: PUSH
6055: LD_EXP 37
6059: PUSH
6060: LD_VAR 0 4
6064: ARRAY
6065: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6066: LD_ADDR_EXP 52
6070: PUSH
6071: LD_EXP 52
6075: PPUSH
6076: LD_VAR 0 4
6080: PPUSH
6081: LD_EXP 52
6085: PUSH
6086: LD_VAR 0 4
6090: ARRAY
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: PPUSH
6096: CALL_OW 1
6100: ST_TO_ADDR
// ape := PrepareApeman ;
6101: LD_ADDR_VAR 0 5
6105: PUSH
6106: CALL 6203 0 0
6110: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6111: LD_ADDR_EXP 51
6115: PUSH
6116: LD_EXP 51
6120: PPUSH
6121: LD_VAR 0 4
6125: PPUSH
6126: LD_EXP 51
6130: PUSH
6131: LD_VAR 0 4
6135: ARRAY
6136: PPUSH
6137: LD_EXP 51
6141: PUSH
6142: LD_VAR 0 4
6146: ARRAY
6147: PUSH
6148: LD_INT 1
6150: PLUS
6151: PPUSH
6152: LD_VAR 0 5
6156: PPUSH
6157: CALL_OW 1
6161: PPUSH
6162: CALL_OW 1
6166: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6167: LD_VAR 0 5
6171: PPUSH
6172: LD_EXP 54
6176: PUSH
6177: LD_VAR 0 4
6181: ARRAY
6182: PPUSH
6183: LD_INT 0
6185: PPUSH
6186: CALL_OW 49
// end ;
6190: GO 6035
6192: POP
6193: POP
// end ;
6194: GO 6017
6196: POP
6197: POP
// end ;
6198: LD_VAR 0 1
6202: RET
// export function PrepareApeman ; var bonus ; begin
6203: LD_INT 0
6205: PPUSH
6206: PPUSH
// uc_side := 0 ;
6207: LD_ADDR_OWVAR 20
6211: PUSH
6212: LD_INT 0
6214: ST_TO_ADDR
// uc_nation := 0 ;
6215: LD_ADDR_OWVAR 21
6219: PUSH
6220: LD_INT 0
6222: ST_TO_ADDR
// InitHc ;
6223: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6227: LD_ADDR_VAR 0 2
6231: PUSH
6232: LD_INT 1
6234: NEG
6235: PUSH
6236: LD_INT 0
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_OWVAR 1
6251: PUSH
6252: LD_INT 3
6254: MOD
6255: PUSH
6256: LD_INT 1
6258: PLUS
6259: ARRAY
6260: ST_TO_ADDR
// hc_class := class_apeman ;
6261: LD_ADDR_OWVAR 28
6265: PUSH
6266: LD_INT 12
6268: ST_TO_ADDR
// hc_gallery :=  ;
6269: LD_ADDR_OWVAR 33
6273: PUSH
6274: LD_STRING 
6276: ST_TO_ADDR
// hc_name :=  ;
6277: LD_ADDR_OWVAR 26
6281: PUSH
6282: LD_STRING 
6284: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6285: LD_ADDR_OWVAR 31
6289: PUSH
6290: LD_EXP 53
6294: PUSH
6295: LD_VAR 0 2
6299: PLUS
6300: PUSH
6301: LD_EXP 53
6305: PUSH
6306: LD_VAR 0 2
6310: PLUS
6311: PUSH
6312: LD_EXP 53
6316: PUSH
6317: LD_VAR 0 2
6321: PLUS
6322: PUSH
6323: LD_EXP 53
6327: PUSH
6328: LD_VAR 0 2
6332: PLUS
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6340: LD_ADDR_OWVAR 35
6344: PUSH
6345: LD_INT 10
6347: PUSH
6348: LD_VAR 0 2
6352: MUL
6353: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6354: LD_ADDR_OWVAR 29
6358: PUSH
6359: LD_INT 12
6361: PUSH
6362: LD_INT 10
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: ST_TO_ADDR
// result := CreateHuman ;
6369: LD_ADDR_VAR 0 1
6373: PUSH
6374: CALL_OW 44
6378: ST_TO_ADDR
// end ;
6379: LD_VAR 0 1
6383: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6384: LD_INT 0
6386: PPUSH
6387: PPUSH
6388: PPUSH
// if not ape then
6389: LD_VAR 0 1
6393: NOT
6394: IFFALSE 6398
// exit ;
6396: GO 6523
// side := GetSide ( ape ) ;
6398: LD_ADDR_VAR 0 3
6402: PUSH
6403: LD_VAR 0 1
6407: PPUSH
6408: CALL_OW 255
6412: ST_TO_ADDR
// if not side then
6413: LD_VAR 0 3
6417: NOT
6418: IFFALSE 6472
// begin for i = 1 to apemanPos do
6420: LD_ADDR_VAR 0 4
6424: PUSH
6425: DOUBLE
6426: LD_INT 1
6428: DEC
6429: ST_TO_ADDR
6430: LD_EXP 51
6434: PUSH
6435: FOR_TO
6436: IFFALSE 6470
// if ape in apemanPos [ i ] then
6438: LD_VAR 0 1
6442: PUSH
6443: LD_EXP 51
6447: PUSH
6448: LD_VAR 0 4
6452: ARRAY
6453: IN
6454: IFFALSE 6468
// begin side := i ;
6456: LD_ADDR_VAR 0 3
6460: PUSH
6461: LD_VAR 0 4
6465: ST_TO_ADDR
// break ;
6466: GO 6470
// end ;
6468: GO 6435
6470: POP
6471: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6472: LD_ADDR_EXP 51
6476: PUSH
6477: LD_EXP 51
6481: PPUSH
6482: LD_VAR 0 3
6486: PPUSH
6487: LD_EXP 51
6491: PUSH
6492: LD_VAR 0 3
6496: ARRAY
6497: PUSH
6498: LD_VAR 0 1
6502: DIFF
6503: PPUSH
6504: CALL_OW 1
6508: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6509: LD_ADDR_EXP 48
6513: PUSH
6514: LD_EXP 48
6518: PUSH
6519: LD_INT 1
6521: MINUS
6522: ST_TO_ADDR
// end ; end_of_file
6523: LD_VAR 0 2
6527: RET
// var respawn , inqueue ; export function init_respawning ; begin
6528: LD_INT 0
6530: PPUSH
// respawn := Rand ( 1 , 8 ) ;
6531: LD_ADDR_LOC 9
6535: PUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_INT 8
6541: PPUSH
6542: CALL_OW 12
6546: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6547: LD_ADDR_LOC 10
6551: PUSH
6552: LD_INT 0
6554: PUSH
6555: LD_INT 0
6557: PUSH
6558: LD_INT 0
6560: PUSH
6561: LD_INT 0
6563: PUSH
6564: LD_INT 0
6566: PUSH
6567: LD_INT 0
6569: PUSH
6570: LD_INT 0
6572: PUSH
6573: LD_INT 0
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: ST_TO_ADDR
// end ;
6586: LD_VAR 0 1
6590: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
6591: GO 6593
6593: DISABLE
6594: LD_INT 0
6596: PPUSH
6597: PPUSH
6598: PPUSH
// begin if respawning_time_max = 0 then
6599: LD_EXP 30
6603: PUSH
6604: LD_INT 0
6606: EQUAL
6607: IFFALSE 6611
// exit ;
6609: GO 7020
// if respawn = 8 then
6611: LD_LOC 9
6615: PUSH
6616: LD_INT 8
6618: EQUAL
6619: IFFALSE 6631
// respawn := 1 else
6621: LD_ADDR_LOC 9
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
6629: GO 6645
// respawn := respawn + 1 ;
6631: LD_ADDR_LOC 9
6635: PUSH
6636: LD_LOC 9
6640: PUSH
6641: LD_INT 1
6643: PLUS
6644: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
6645: LD_EXP 37
6649: PUSH
6650: LD_LOC 9
6654: ARRAY
6655: PUSH
6656: LD_LOC 10
6660: PUSH
6661: LD_LOC 9
6665: ARRAY
6666: NOT
6667: AND
6668: IFFALSE 7019
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6670: LD_ADDR_VAR 0 1
6674: PUSH
6675: LD_INT 21
6677: PUSH
6678: LD_INT 1
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PUSH
6685: LD_INT 22
6687: PUSH
6688: LD_LOC 9
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 3
6699: PUSH
6700: LD_INT 23
6702: PUSH
6703: LD_INT 0
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 69
6720: ST_TO_ADDR
// if n < number_of_people then
6721: LD_VAR 0 1
6725: PUSH
6726: LD_EXP 21
6730: LESS
6731: IFFALSE 7016
// begin dep := FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , respawn ] ] ) ;
6733: LD_ADDR_VAR 0 2
6737: PUSH
6738: LD_INT 21
6740: PUSH
6741: LD_INT 3
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 2
6750: PUSH
6751: LD_INT 30
6753: PUSH
6754: LD_INT 0
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 30
6763: PUSH
6764: LD_INT 1
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: LIST
6775: PUSH
6776: LD_INT 50
6778: PUSH
6779: EMPTY
6780: LIST
6781: PUSH
6782: LD_INT 22
6784: PUSH
6785: LD_LOC 9
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 69
6804: ST_TO_ADDR
// if dep > 0 then
6805: LD_VAR 0 2
6809: PUSH
6810: LD_INT 0
6812: GREATER
6813: IFFALSE 7013
// begin aktresp := respawn ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: LD_LOC 9
6824: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
6825: LD_ADDR_LOC 10
6829: PUSH
6830: LD_LOC 10
6834: PPUSH
6835: LD_VAR 0 3
6839: PPUSH
6840: LD_INT 1
6842: PPUSH
6843: CALL_OW 1
6847: ST_TO_ADDR
// enable ;
6848: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6849: LD_EXP 29
6853: PPUSH
6854: LD_EXP 30
6858: PPUSH
6859: CALL_OW 12
6863: PPUSH
6864: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6868: LD_ADDR_LOC 10
6872: PUSH
6873: LD_LOC 10
6877: PPUSH
6878: LD_VAR 0 3
6882: PPUSH
6883: LD_INT 0
6885: PPUSH
6886: CALL_OW 1
6890: ST_TO_ADDR
// hc_name :=  ;
6891: LD_ADDR_OWVAR 26
6895: PUSH
6896: LD_STRING 
6898: ST_TO_ADDR
// hc_importance := 0 ;
6899: LD_ADDR_OWVAR 32
6903: PUSH
6904: LD_INT 0
6906: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6907: LD_INT 0
6909: PPUSH
6910: LD_INT 0
6912: PPUSH
6913: LD_EXP 22
6917: PUSH
6918: LD_INT 2
6920: DIV
6921: PPUSH
6922: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6926: LD_ADDR_OWVAR 21
6930: PUSH
6931: LD_EXP 38
6935: PUSH
6936: LD_VAR 0 3
6940: ARRAY
6941: ST_TO_ADDR
// uc_side := aktresp ;
6942: LD_ADDR_OWVAR 20
6946: PUSH
6947: LD_VAR 0 3
6951: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
6952: LD_ADDR_VAR 0 2
6956: PUSH
6957: LD_VAR 0 2
6961: PUSH
6962: LD_INT 1
6964: PPUSH
6965: LD_VAR 0 2
6969: PPUSH
6970: CALL_OW 12
6974: ARRAY
6975: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
6976: CALL_OW 44
6980: PPUSH
6981: LD_VAR 0 2
6985: PPUSH
6986: CALL_OW 250
6990: PPUSH
6991: LD_VAR 0 2
6995: PPUSH
6996: CALL_OW 251
7000: PPUSH
7001: LD_INT 7
7003: PPUSH
7004: LD_INT 1
7006: PPUSH
7007: CALL_OW 50
// end else
7011: GO 7014
// enable ;
7013: ENABLE
// end else
7014: GO 7017
// enable ;
7016: ENABLE
// end else
7017: GO 7020
// enable ;
7019: ENABLE
// end ; end_of_file
7020: PPOPN 3
7022: END
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7023: LD_VAR 0 1
7027: PPUSH
7028: CALL_OW 266
7032: PUSH
7033: LD_INT 0
7035: PUSH
7036: LD_INT 1
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: IN
7043: IFFALSE 7068
// SetBName ( b , @ & GetSide ( b ) ) ;
7045: LD_VAR 0 1
7049: PPUSH
7050: LD_STRING @
7052: PUSH
7053: LD_VAR 0 1
7057: PPUSH
7058: CALL_OW 255
7062: STR
7063: PPUSH
7064: CALL_OW 500
// end ;
7068: PPOPN 2
7070: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7071: LD_VAR 0 1
7075: PPUSH
7076: CALL_OW 266
7080: PUSH
7081: LD_INT 0
7083: PUSH
7084: LD_INT 1
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: IN
7091: IFFALSE 7116
// SetBName ( b , @ & GetSide ( b ) ) ;
7093: LD_VAR 0 1
7097: PPUSH
7098: LD_STRING @
7100: PUSH
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 255
7110: STR
7111: PPUSH
7112: CALL_OW 500
// end ;
7116: PPOPN 3
7118: END
// on VehicleConstructed ( veh , fac ) do var side ;
7119: LD_INT 0
7121: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7122: LD_VAR 0 1
7126: PPUSH
7127: CALL_OW 263
7131: PUSH
7132: LD_INT 5
7134: EQUAL
7135: IFFALSE 7277
// begin side := GetSide ( veh ) ;
7137: LD_ADDR_VAR 0 3
7141: PUSH
7142: LD_VAR 0 1
7146: PPUSH
7147: CALL_OW 255
7151: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7152: LD_ADDR_EXP 51
7156: PUSH
7157: LD_EXP 51
7161: PPUSH
7162: LD_VAR 0 3
7166: PPUSH
7167: LD_EXP 51
7171: PUSH
7172: LD_VAR 0 3
7176: ARRAY
7177: PPUSH
7178: LD_INT 52
7180: PUSH
7181: EMPTY
7182: LIST
7183: PPUSH
7184: CALL_OW 72
7188: PUSH
7189: LD_INT 22
7191: PUSH
7192: LD_VAR 0 3
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 2
7203: PUSH
7204: LD_INT 33
7206: PUSH
7207: LD_INT 5
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 25
7216: PUSH
7217: LD_INT 12
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 25
7226: PUSH
7227: LD_INT 15
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 25
7236: PUSH
7237: LD_INT 16
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 25
7246: PUSH
7247: LD_INT 17
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PPUSH
7266: CALL_OW 69
7270: UNION
7271: PPUSH
7272: CALL_OW 1
7276: ST_TO_ADDR
// end ; end ;
7277: PPOPN 3
7279: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7280: LD_INT 0
7282: PPUSH
7283: PPUSH
7284: PPUSH
7285: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7286: LD_VAR 0 1
7290: PPUSH
7291: CALL_OW 257
7295: PUSH
7296: LD_INT 12
7298: PUSH
7299: LD_INT 15
7301: PUSH
7302: LD_INT 17
7304: PUSH
7305: LD_INT 16
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: IN
7314: PUSH
7315: LD_VAR 0 1
7319: PPUSH
7320: CALL_OW 263
7324: PUSH
7325: LD_INT 5
7327: EQUAL
7328: OR
7329: IFFALSE 7340
// ApeKilled ( j ) ;
7331: LD_VAR 0 1
7335: PPUSH
7336: CALL 6384 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7340: LD_VAR 0 1
7344: PPUSH
7345: CALL_OW 266
7349: PUSH
7350: LD_INT 0
7352: PUSH
7353: LD_INT 1
7355: PUSH
7356: EMPTY
7357: LIST
7358: LIST
7359: IN
7360: IFFALSE 7442
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7362: LD_ADDR_VAR 0 4
7366: PUSH
7367: LD_EXP 37
7371: PUSH
7372: LD_VAR 0 1
7376: PPUSH
7377: CALL_OW 255
7381: ARRAY
7382: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7383: LD_ADDR_VAR 0 2
7387: PUSH
7388: LD_EXP 42
7392: PUSH
7393: LD_VAR 0 4
7397: ARRAY
7398: PUSH
7399: LD_INT 1
7401: ARRAY
7402: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7403: LD_ADDR_VAR 0 3
7407: PUSH
7408: LD_EXP 42
7412: PUSH
7413: LD_VAR 0 4
7417: ARRAY
7418: PUSH
7419: LD_INT 2
7421: ARRAY
7422: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7423: LD_VAR 0 2
7427: PPUSH
7428: LD_VAR 0 3
7432: PPUSH
7433: CALL_OW 420
7437: PPUSH
7438: CALL_OW 419
// end ; end ;
7442: PPOPN 5
7444: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7445: LD_VAR 0 1
7449: PPUSH
7450: LD_VAR 0 2
7454: PPUSH
7455: LD_VAR 0 3
7459: PPUSH
7460: LD_OWVAR 2
7464: PPUSH
7465: CALL 9092 0 4
7469: PPOPN 3
7471: END
// function CanWinLoose ; begin
7472: LD_INT 0
7474: PPUSH
// Result := true ;
7475: LD_ADDR_VAR 0 1
7479: PUSH
7480: LD_INT 1
7482: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7483: CALL_OW 518
7487: PUSH
7488: CALL_OW 519
7492: PUSH
7493: LD_INT 0
7495: GREATER
7496: AND
7497: IFFALSE 7507
// Result := false ;
7499: LD_ADDR_VAR 0 1
7503: PUSH
7504: LD_INT 0
7506: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7507: CALL_OW 531
7511: PUSH
7512: CALL_OW 519
7516: PUSH
7517: LD_INT 1
7519: GREATER
7520: AND
7521: IFFALSE 7531
// Result := false ;
7523: LD_ADDR_VAR 0 1
7527: PUSH
7528: LD_INT 0
7530: ST_TO_ADDR
// end ;
7531: LD_VAR 0 1
7535: RET
// function HasPower ( i ) ; begin
7536: LD_INT 0
7538: PPUSH
// if def_people_respawning then
7539: LD_EXP 11
7543: IFFALSE 7634
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7545: LD_ADDR_VAR 0 2
7549: PUSH
7550: LD_INT 22
7552: PUSH
7553: LD_VAR 0 1
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 2
7564: PUSH
7565: LD_INT 21
7567: PUSH
7568: LD_INT 1
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: PUSH
7575: LD_INT 33
7577: PUSH
7578: LD_INT 3
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 33
7587: PUSH
7588: LD_INT 5
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 30
7597: PUSH
7598: LD_INT 0
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 30
7607: PUSH
7608: LD_INT 1
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PPUSH
7627: CALL_OW 69
7631: ST_TO_ADDR
7632: GO 7699
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
7634: LD_ADDR_VAR 0 2
7638: PUSH
7639: LD_INT 22
7641: PUSH
7642: LD_VAR 0 1
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 2
7653: PUSH
7654: LD_INT 21
7656: PUSH
7657: LD_INT 1
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: PUSH
7664: LD_INT 33
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 33
7676: PUSH
7677: LD_INT 5
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PPUSH
7694: CALL_OW 69
7698: ST_TO_ADDR
// end ;
7699: LD_VAR 0 2
7703: RET
// function AlliedSides ( i , j ) ; begin
7704: LD_INT 0
7706: PPUSH
// Result := false ;
7707: LD_ADDR_VAR 0 3
7711: PUSH
7712: LD_INT 0
7714: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7715: LD_VAR 0 1
7719: PPUSH
7720: LD_VAR 0 2
7724: PPUSH
7725: CALL_OW 81
7729: PUSH
7730: LD_INT 1
7732: EQUAL
7733: PUSH
7734: LD_VAR 0 2
7738: PPUSH
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 81
7748: PUSH
7749: LD_INT 1
7751: EQUAL
7752: AND
7753: PUSH
7754: LD_VAR 0 1
7758: PPUSH
7759: CALL_OW 83
7763: AND
7764: PUSH
7765: LD_VAR 0 2
7769: PPUSH
7770: CALL_OW 83
7774: AND
7775: IFFALSE 7785
// Result := true ;
7777: LD_ADDR_VAR 0 3
7781: PUSH
7782: LD_INT 1
7784: ST_TO_ADDR
// end ;
7785: LD_VAR 0 3
7789: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7790: CALL 7472 0 0
7794: IFFALSE 7803
7796: GO 7798
7798: DISABLE
// YouLostInMultiplayer ;
7799: CALL_OW 107
7803: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7804: CALL 7472 0 0
7808: IFFALSE 7832
7810: GO 7812
7812: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7813: LD_EXP 38
7817: PUSH
7818: LD_OWVAR 2
7822: ARRAY
7823: PPUSH
7824: CALL 9134 0 1
// YouWinInMultiplayer ;
7828: CALL_OW 106
// end ;
7832: END
// every 0 0$3 marked 98 do var i , CanWin ;
7833: GO 7835
7835: DISABLE
7836: LD_INT 0
7838: PPUSH
7839: PPUSH
// begin if not HasPower ( your_side ) then
7840: LD_OWVAR 2
7844: PPUSH
7845: CALL 7536 0 1
7849: NOT
7850: IFFALSE 7861
// begin Multiplayer_Loose_Message ;
7852: CALL_OW 521
// enable ( 400 ) ;
7856: LD_INT 400
7858: ENABLE_MARKED
// end else
7859: GO 7994
// begin CanWin := true ;
7861: LD_ADDR_VAR 0 2
7865: PUSH
7866: LD_INT 1
7868: ST_TO_ADDR
// for i := 1 to 8 do
7869: LD_ADDR_VAR 0 1
7873: PUSH
7874: DOUBLE
7875: LD_INT 1
7877: DEC
7878: ST_TO_ADDR
7879: LD_INT 8
7881: PUSH
7882: FOR_TO
7883: IFFALSE 7980
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7885: LD_EXP 37
7889: PUSH
7890: LD_VAR 0 1
7894: ARRAY
7895: PUSH
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 108
7905: AND
7906: PUSH
7907: LD_VAR 0 1
7911: PUSH
7912: LD_OWVAR 2
7916: NONEQUAL
7917: AND
7918: IFFALSE 7978
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7920: LD_EXP 35
7924: PUSH
7925: LD_VAR 0 1
7929: ARRAY
7930: NOT
7931: PUSH
7932: LD_EXP 35
7936: PUSH
7937: LD_VAR 0 1
7941: ARRAY
7942: PUSH
7943: LD_EXP 35
7947: PUSH
7948: LD_OWVAR 2
7952: ARRAY
7953: NONEQUAL
7954: OR
7955: IFFALSE 7978
// if HasPower ( i ) then
7957: LD_VAR 0 1
7961: PPUSH
7962: CALL 7536 0 1
7966: IFFALSE 7978
// begin CanWin := false ;
7968: LD_ADDR_VAR 0 2
7972: PUSH
7973: LD_INT 0
7975: ST_TO_ADDR
// break ;
7976: GO 7980
// end ;
7978: GO 7882
7980: POP
7981: POP
// if CanWin then
7982: LD_VAR 0 2
7986: IFFALSE 7993
// enable ( 401 ) else
7988: LD_INT 401
7990: ENABLE_MARKED
7991: GO 7994
// enable ;
7993: ENABLE
// end ; end ;
7994: PPOPN 2
7996: END
// every 0 0$3 marked 99 do var i , CanWin ;
7997: GO 7999
7999: DISABLE
8000: LD_INT 0
8002: PPUSH
8003: PPUSH
// begin if not HasPower ( your_side ) then
8004: LD_OWVAR 2
8008: PPUSH
8009: CALL 7536 0 1
8013: NOT
8014: IFFALSE 8025
// begin Multiplayer_Loose_Message ;
8016: CALL_OW 521
// enable ( 400 ) ;
8020: LD_INT 400
8022: ENABLE_MARKED
// end else
8023: GO 8138
// begin CanWin := true ;
8025: LD_ADDR_VAR 0 2
8029: PUSH
8030: LD_INT 1
8032: ST_TO_ADDR
// for i := 1 to 8 do
8033: LD_ADDR_VAR 0 1
8037: PUSH
8038: DOUBLE
8039: LD_INT 1
8041: DEC
8042: ST_TO_ADDR
8043: LD_INT 8
8045: PUSH
8046: FOR_TO
8047: IFFALSE 8124
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8049: LD_EXP 37
8053: PUSH
8054: LD_VAR 0 1
8058: ARRAY
8059: PUSH
8060: LD_VAR 0 1
8064: PPUSH
8065: CALL_OW 108
8069: AND
8070: PUSH
8071: LD_VAR 0 1
8075: PUSH
8076: LD_OWVAR 2
8080: NONEQUAL
8081: AND
8082: IFFALSE 8122
// if not AlliedSides ( i , your_side ) then
8084: LD_VAR 0 1
8088: PPUSH
8089: LD_OWVAR 2
8093: PPUSH
8094: CALL 7704 0 2
8098: NOT
8099: IFFALSE 8122
// if HasPower ( i ) then
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL 7536 0 1
8110: IFFALSE 8122
// begin CanWin := false ;
8112: LD_ADDR_VAR 0 2
8116: PUSH
8117: LD_INT 0
8119: ST_TO_ADDR
// break ;
8120: GO 8124
// end ;
8122: GO 8046
8124: POP
8125: POP
// if CanWin then
8126: LD_VAR 0 2
8130: IFFALSE 8137
// enable ( 401 ) else
8132: LD_INT 401
8134: ENABLE_MARKED
8135: GO 8138
// enable ;
8137: ENABLE
// end ; end ; end_of_file
8138: PPOPN 2
8140: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8141: LD_INT 0
8143: PPUSH
8144: PPUSH
// for un in battle_flags_id do
8145: LD_ADDR_VAR 0 2
8149: PUSH
8150: LD_EXP 47
8154: PUSH
8155: FOR_IN
8156: IFFALSE 8231
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8158: LD_VAR 0 2
8162: PPUSH
8163: LD_INT 1
8165: PUSH
8166: LD_LOC 11
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PUSH
8175: LD_INT 2
8177: PUSH
8178: LD_LOC 11
8182: PUSH
8183: LD_INT 2
8185: DIV
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PUSH
8191: LD_INT 3
8193: PUSH
8194: LD_LOC 11
8198: PUSH
8199: LD_INT 5
8201: DIV
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 20
8209: PUSH
8210: LD_LOC 11
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: PPUSH
8225: CALL_OW 423
8229: GO 8155
8231: POP
8232: POP
// end ;
8233: LD_VAR 0 1
8237: RET
// every 1 do var un ;
8238: GO 8240
8240: DISABLE
8241: LD_INT 0
8243: PPUSH
// begin if not def_morale_flags then
8244: LD_EXP 9
8248: NOT
8249: IFFALSE 8253
// exit ;
8251: GO 8330
// if not morale_decreasing_time then
8253: LD_EXP 26
8257: NOT
8258: IFFALSE 8262
// exit ;
8260: GO 8330
// strength = 100 ;
8262: LD_ADDR_LOC 11
8266: PUSH
8267: LD_INT 100
8269: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8270: LD_EXP 26
8274: PPUSH
8275: CALL_OW 67
// strength := strength - 1 ;
8279: LD_ADDR_LOC 11
8283: PUSH
8284: LD_LOC 11
8288: PUSH
8289: LD_INT 1
8291: MINUS
8292: ST_TO_ADDR
// Update_Flags ;
8293: CALL 8141 0 0
// until not strength ;
8297: LD_LOC 11
8301: NOT
8302: IFFALSE 8270
// for un in battle_flags_id do
8304: LD_ADDR_VAR 0 1
8308: PUSH
8309: LD_EXP 47
8313: PUSH
8314: FOR_IN
8315: IFFALSE 8328
// KillBattleFlag ( un ) ;
8317: LD_VAR 0 1
8321: PPUSH
8322: CALL_OW 419
8326: GO 8314
8328: POP
8329: POP
// end ; end_of_file
8330: PPOPN 1
8332: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
8333: LD_INT 0
8335: PPUSH
8336: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
8337: LD_ADDR_VAR 0 2
8341: PUSH
8342: LD_STRING #Multi1x1-Time
8344: PUSH
8345: LD_OWVAR 1
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
8354: LD_INT 0
8356: PUSH
8357: LD_EXP 33
8361: PUSH
8362: LD_OWVAR 1
8366: MINUS
8367: LESSEQUAL
8368: IFFALSE 8399
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
8370: LD_ADDR_VAR 0 2
8374: PUSH
8375: LD_VAR 0 2
8379: PUSH
8380: LD_STRING #allowedsibbomb
8382: PUSH
8383: LD_EXP 33
8387: PUSH
8388: LD_OWVAR 1
8392: MINUS
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: ADD
8398: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
8399: LD_INT 0
8401: PUSH
8402: LD_EXP 58
8406: PUSH
8407: LD_OWVAR 1
8411: MINUS
8412: LESSEQUAL
8413: IFFALSE 8444
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
8415: LD_ADDR_VAR 0 2
8419: PUSH
8420: LD_VAR 0 2
8424: PUSH
8425: LD_STRING #builduptime
8427: PUSH
8428: LD_EXP 58
8432: PUSH
8433: LD_OWVAR 1
8437: MINUS
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: ADD
8443: ST_TO_ADDR
// if ( ExtraStrings ) then
8444: LD_EXP 55
8448: IFFALSE 8470
// AllStrings := AllStrings ^  ^ ExtraStrings ;
8450: LD_ADDR_VAR 0 2
8454: PUSH
8455: LD_VAR 0 2
8459: PUSH
8460: LD_STRING 
8462: ADD
8463: PUSH
8464: LD_EXP 55
8468: ADD
8469: ST_TO_ADDR
// Display_Strings := AllStrings ;
8470: LD_ADDR_OWVAR 47
8474: PUSH
8475: LD_VAR 0 2
8479: ST_TO_ADDR
// end ;
8480: LD_VAR 0 1
8484: RET
// every 0 0$1 do
8485: GO 8487
8487: DISABLE
// begin ShowTimer ;
8488: CALL 8333 0 0
// enable ;
8492: ENABLE
// end ; end_of_file
8493: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
8494: LD_INT 0
8496: PPUSH
8497: PPUSH
8498: PPUSH
// BuildUpTime_Delay = 0 ;
8499: LD_ADDR_EXP 58
8503: PUSH
8504: LD_INT 0
8506: ST_TO_ADDR
// if not def_builduptime then
8507: LD_EXP 16
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8699
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
8516: LD_ADDR_EXP 58
8520: PUSH
8521: LD_INT 8400
8523: PUSH
8524: LD_INT 2100
8526: PUSH
8527: LD_EXP 16
8531: MUL
8532: PLUS
8533: ST_TO_ADDR
// BuildUpTimeActive := true ;
8534: LD_ADDR_EXP 57
8538: PUSH
8539: LD_INT 1
8541: ST_TO_ADDR
// for i := 1 to 8 do
8542: LD_ADDR_VAR 0 2
8546: PUSH
8547: DOUBLE
8548: LD_INT 1
8550: DEC
8551: ST_TO_ADDR
8552: LD_INT 8
8554: PUSH
8555: FOR_TO
8556: IFFALSE 8697
// if Side_Positions [ i ] then
8558: LD_EXP 37
8562: PUSH
8563: LD_VAR 0 2
8567: ARRAY
8568: IFFALSE 8695
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
8570: LD_EXP 56
8574: PUSH
8575: LD_EXP 37
8579: PUSH
8580: LD_VAR 0 2
8584: ARRAY
8585: ARRAY
8586: PPUSH
8587: LD_INT 5
8589: PPUSH
8590: CALL_OW 424
// for j := 1 to 8 do
8594: LD_ADDR_VAR 0 3
8598: PUSH
8599: DOUBLE
8600: LD_INT 1
8602: DEC
8603: ST_TO_ADDR
8604: LD_INT 8
8606: PUSH
8607: FOR_TO
8608: IFFALSE 8693
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8610: LD_EXP 37
8614: PUSH
8615: LD_VAR 0 3
8619: ARRAY
8620: PUSH
8621: LD_EXP 35
8625: PUSH
8626: LD_VAR 0 2
8630: ARRAY
8631: PUSH
8632: LD_EXP 35
8636: PUSH
8637: LD_VAR 0 3
8641: ARRAY
8642: NONEQUAL
8643: PUSH
8644: LD_EXP 39
8648: NOT
8649: PUSH
8650: LD_VAR 0 2
8654: PUSH
8655: LD_VAR 0 3
8659: NONEQUAL
8660: AND
8661: OR
8662: AND
8663: IFFALSE 8691
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8665: LD_VAR 0 3
8669: PPUSH
8670: LD_EXP 56
8674: PUSH
8675: LD_EXP 37
8679: PUSH
8680: LD_VAR 0 2
8684: ARRAY
8685: ARRAY
8686: PPUSH
8687: CALL_OW 333
8691: GO 8607
8693: POP
8694: POP
// end ;
8695: GO 8555
8697: POP
8698: POP
// end ;
8699: LD_VAR 0 1
8703: RET
// export function EndBuildUp ; var i , j ; begin
8704: LD_INT 0
8706: PPUSH
8707: PPUSH
8708: PPUSH
// BuildUpTimeActive := false ;
8709: LD_ADDR_EXP 57
8713: PUSH
8714: LD_INT 0
8716: ST_TO_ADDR
// for i := 1 to 8 do
8717: LD_ADDR_VAR 0 2
8721: PUSH
8722: DOUBLE
8723: LD_INT 1
8725: DEC
8726: ST_TO_ADDR
8727: LD_INT 8
8729: PUSH
8730: FOR_TO
8731: IFFALSE 8872
// if Side_Positions [ i ] then
8733: LD_EXP 37
8737: PUSH
8738: LD_VAR 0 2
8742: ARRAY
8743: IFFALSE 8870
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
8745: LD_EXP 56
8749: PUSH
8750: LD_EXP 37
8754: PUSH
8755: LD_VAR 0 2
8759: ARRAY
8760: ARRAY
8761: PPUSH
8762: LD_INT 0
8764: PPUSH
8765: CALL_OW 424
// for j := 1 to 8 do
8769: LD_ADDR_VAR 0 3
8773: PUSH
8774: DOUBLE
8775: LD_INT 1
8777: DEC
8778: ST_TO_ADDR
8779: LD_INT 8
8781: PUSH
8782: FOR_TO
8783: IFFALSE 8868
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8785: LD_EXP 37
8789: PUSH
8790: LD_VAR 0 3
8794: ARRAY
8795: PUSH
8796: LD_EXP 35
8800: PUSH
8801: LD_VAR 0 2
8805: ARRAY
8806: PUSH
8807: LD_EXP 35
8811: PUSH
8812: LD_VAR 0 3
8816: ARRAY
8817: NONEQUAL
8818: PUSH
8819: LD_EXP 39
8823: NOT
8824: PUSH
8825: LD_VAR 0 2
8829: PUSH
8830: LD_VAR 0 3
8834: NONEQUAL
8835: AND
8836: OR
8837: AND
8838: IFFALSE 8866
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8840: LD_VAR 0 3
8844: PPUSH
8845: LD_EXP 56
8849: PUSH
8850: LD_EXP 37
8854: PUSH
8855: LD_VAR 0 2
8859: ARRAY
8860: ARRAY
8861: PPUSH
8862: CALL_OW 334
8866: GO 8782
8868: POP
8869: POP
// end ;
8870: GO 8730
8872: POP
8873: POP
// end ;
8874: LD_VAR 0 1
8878: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
8879: LD_EXP 57
8883: IFFALSE 9058
8885: GO 8887
8887: DISABLE
8888: LD_INT 0
8890: PPUSH
8891: PPUSH
// begin for i := 1 to 8 do
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: DOUBLE
8898: LD_INT 1
8900: DEC
8901: ST_TO_ADDR
8902: LD_INT 8
8904: PUSH
8905: FOR_TO
8906: IFFALSE 9055
// if Side_Positions [ i ] then
8908: LD_EXP 37
8912: PUSH
8913: LD_VAR 0 1
8917: ARRAY
8918: IFFALSE 9053
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8920: LD_ADDR_VAR 0 2
8924: PUSH
8925: LD_EXP 56
8929: PUSH
8930: LD_EXP 37
8934: PUSH
8935: LD_VAR 0 1
8939: ARRAY
8940: ARRAY
8941: PPUSH
8942: LD_INT 2
8944: PUSH
8945: LD_INT 21
8947: PUSH
8948: LD_INT 1
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: LD_INT 21
8957: PUSH
8958: LD_INT 2
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: LIST
8969: PUSH
8970: LD_INT 22
8972: PUSH
8973: LD_OWVAR 2
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PPUSH
8986: CALL_OW 70
8990: PUSH
8991: FOR_IN
8992: IFFALSE 9051
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
8994: LD_EXP 35
8998: PUSH
8999: LD_VAR 0 1
9003: ARRAY
9004: PUSH
9005: LD_EXP 35
9009: PUSH
9010: LD_OWVAR 2
9014: ARRAY
9015: NONEQUAL
9016: PUSH
9017: LD_EXP 39
9021: NOT
9022: PUSH
9023: LD_VAR 0 1
9027: PUSH
9028: LD_OWVAR 2
9032: NONEQUAL
9033: AND
9034: OR
9035: IFFALSE 9049
// ComMoveToArea ( un , BuildUpEscape ) ;
9037: LD_VAR 0 2
9041: PPUSH
9042: LD_INT 13
9044: PPUSH
9045: CALL_OW 113
9049: GO 8991
9051: POP
9052: POP
9053: GO 8905
9055: POP
9056: POP
// enable ;
9057: ENABLE
// end ;
9058: PPOPN 2
9060: END
// every 0 0$1 trigger def_builduptime do
9061: LD_EXP 16
9065: IFFALSE 9091
9067: GO 9069
9069: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
9070: LD_INT 8400
9072: PUSH
9073: LD_EXP 16
9077: PUSH
9078: LD_INT 2100
9080: MUL
9081: PLUS
9082: PPUSH
9083: CALL_OW 67
// EndBuildUp ;
9087: CALL 8704 0 0
// end ; end_of_file
9091: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
9092: LD_INT 0
9094: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
9095: LD_VAR 0 1
9099: PPUSH
9100: CALL_OW 255
9104: PUSH
9105: LD_VAR 0 4
9109: EQUAL
9110: IFFALSE 9129
// begin SetAchievement ( ACH_RAD ) ;
9112: LD_STRING ACH_RAD
9114: PPUSH
9115: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
9119: LD_STRING ACH_NL
9121: PPUSH
9122: LD_INT 1
9124: PPUSH
9125: CALL_OW 564
// end end ;
9129: LD_VAR 0 5
9133: RET
// export function SA_Win ( side ) ; begin
9134: LD_INT 0
9136: PPUSH
// case side of 1 :
9137: LD_VAR 0 1
9141: PUSH
9142: LD_INT 1
9144: DOUBLE
9145: EQUAL
9146: IFTRUE 9150
9148: GO 9163
9150: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
9151: LD_STRING ACH_AH
9153: PPUSH
9154: LD_INT 1
9156: PPUSH
9157: CALL_OW 564
9161: GO 9326
9163: LD_INT 2
9165: DOUBLE
9166: EQUAL
9167: IFTRUE 9171
9169: GO 9184
9171: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
9172: LD_STRING ACH_E
9174: PPUSH
9175: LD_INT 1
9177: PPUSH
9178: CALL_OW 564
9182: GO 9326
9184: LD_INT 3
9186: DOUBLE
9187: EQUAL
9188: IFTRUE 9192
9190: GO 9205
9192: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
9193: LD_STRING ACH_OOL
9195: PPUSH
9196: LD_INT 1
9198: PPUSH
9199: CALL_OW 564
9203: GO 9326
9205: LD_INT 1
9207: PUSH
9208: LD_INT 2
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: DOUBLE
9215: EQUAL
9216: IFTRUE 9220
9218: GO 9245
9220: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9221: LD_STRING ACH_AH
9223: PPUSH
9224: LD_REAL  5.00000000000000E-0001
9227: PPUSH
9228: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9232: LD_STRING ACH_E
9234: PPUSH
9235: LD_REAL  5.00000000000000E-0001
9238: PPUSH
9239: CALL_OW 564
// end ; [ 2 , 3 ] :
9243: GO 9326
9245: LD_INT 2
9247: PUSH
9248: LD_INT 3
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: DOUBLE
9255: EQUAL
9256: IFTRUE 9260
9258: GO 9285
9260: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
9261: LD_STRING ACH_OOL
9263: PPUSH
9264: LD_REAL  5.00000000000000E-0001
9267: PPUSH
9268: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
9272: LD_STRING ACH_E
9274: PPUSH
9275: LD_REAL  5.00000000000000E-0001
9278: PPUSH
9279: CALL_OW 564
// end ; [ 3 , 1 ] :
9283: GO 9326
9285: LD_INT 3
9287: PUSH
9288: LD_INT 1
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: DOUBLE
9295: EQUAL
9296: IFTRUE 9300
9298: GO 9325
9300: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
9301: LD_STRING ACH_AH
9303: PPUSH
9304: LD_REAL  5.00000000000000E-0001
9307: PPUSH
9308: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
9312: LD_STRING ACH_OOL
9314: PPUSH
9315: LD_REAL  5.00000000000000E-0001
9318: PPUSH
9319: CALL_OW 564
// end ; end ;
9323: GO 9326
9325: POP
// end ; end_of_file
9326: LD_VAR 0 2
9330: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9331: LD_INT 0
9333: PPUSH
9334: PPUSH
9335: PPUSH
// for side = 1 to 8 do
9336: LD_ADDR_VAR 0 2
9340: PUSH
9341: DOUBLE
9342: LD_INT 1
9344: DEC
9345: ST_TO_ADDR
9346: LD_INT 8
9348: PUSH
9349: FOR_TO
9350: IFFALSE 9471
// begin for i = 1 to 72 do
9352: LD_ADDR_VAR 0 3
9356: PUSH
9357: DOUBLE
9358: LD_INT 1
9360: DEC
9361: ST_TO_ADDR
9362: LD_INT 72
9364: PUSH
9365: FOR_TO
9366: IFFALSE 9397
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9368: LD_VAR 0 3
9372: PPUSH
9373: LD_VAR 0 2
9377: PPUSH
9378: LD_INT 0
9380: PPUSH
9381: LD_VAR 0 3
9385: PPUSH
9386: CALL_OW 565
9390: PPUSH
9391: CALL_OW 322
9395: GO 9365
9397: POP
9398: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9399: LD_INT 73
9401: PPUSH
9402: LD_VAR 0 2
9406: PPUSH
9407: LD_INT 0
9409: PPUSH
9410: LD_INT 25
9412: PPUSH
9413: CALL_OW 565
9417: PPUSH
9418: CALL_OW 322
// for i = 0 to 40 do
9422: LD_ADDR_VAR 0 3
9426: PUSH
9427: DOUBLE
9428: LD_INT 0
9430: DEC
9431: ST_TO_ADDR
9432: LD_INT 40
9434: PUSH
9435: FOR_TO
9436: IFFALSE 9467
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9438: LD_VAR 0 3
9442: PPUSH
9443: LD_VAR 0 2
9447: PPUSH
9448: LD_INT 1
9450: PPUSH
9451: LD_VAR 0 3
9455: PPUSH
9456: CALL_OW 565
9460: PPUSH
9461: CALL_OW 324
9465: GO 9435
9467: POP
9468: POP
// end ;
9469: GO 9349
9471: POP
9472: POP
// end ;
9473: LD_VAR 0 1
9477: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9478: LD_INT 0
9480: PPUSH
9481: PPUSH
9482: PPUSH
// for side = 1 to 8 do
9483: LD_ADDR_VAR 0 3
9487: PUSH
9488: DOUBLE
9489: LD_INT 1
9491: DEC
9492: ST_TO_ADDR
9493: LD_INT 8
9495: PUSH
9496: FOR_TO
9497: IFFALSE 13493
// begin for i = 1 to 73 do
9499: LD_ADDR_VAR 0 4
9503: PUSH
9504: DOUBLE
9505: LD_INT 1
9507: DEC
9508: ST_TO_ADDR
9509: LD_INT 73
9511: PUSH
9512: FOR_TO
9513: IFFALSE 9534
// SetTech ( i , side , state_disabled ) ;
9515: LD_VAR 0 4
9519: PPUSH
9520: LD_VAR 0 3
9524: PPUSH
9525: LD_INT 0
9527: PPUSH
9528: CALL_OW 322
9532: GO 9512
9534: POP
9535: POP
// for i = 0 to 40 do
9536: LD_ADDR_VAR 0 4
9540: PUSH
9541: DOUBLE
9542: LD_INT 0
9544: DEC
9545: ST_TO_ADDR
9546: LD_INT 40
9548: PUSH
9549: FOR_TO
9550: IFFALSE 9571
// SetRestrict ( i , side , false ) ;
9552: LD_VAR 0 4
9556: PPUSH
9557: LD_VAR 0 3
9561: PPUSH
9562: LD_INT 0
9564: PPUSH
9565: CALL_OW 324
9569: GO 9549
9571: POP
9572: POP
// case level of 1 :
9573: LD_VAR 0 1
9577: PUSH
9578: LD_INT 1
9580: DOUBLE
9581: EQUAL
9582: IFTRUE 9586
9584: GO 9739
9586: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9587: LD_INT 35
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: LD_INT 1
9597: PPUSH
9598: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9602: LD_INT 45
9604: PPUSH
9605: LD_VAR 0 3
9609: PPUSH
9610: LD_INT 1
9612: PPUSH
9613: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9617: LD_INT 46
9619: PPUSH
9620: LD_VAR 0 3
9624: PPUSH
9625: LD_INT 1
9627: PPUSH
9628: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9632: LD_INT 47
9634: PPUSH
9635: LD_VAR 0 3
9639: PPUSH
9640: LD_INT 1
9642: PPUSH
9643: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9647: LD_INT 0
9649: PPUSH
9650: LD_VAR 0 3
9654: PPUSH
9655: LD_INT 1
9657: PPUSH
9658: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9662: LD_INT 2
9664: PPUSH
9665: LD_VAR 0 3
9669: PPUSH
9670: LD_INT 1
9672: PPUSH
9673: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9677: LD_INT 4
9679: PPUSH
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_INT 1
9687: PPUSH
9688: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9692: LD_INT 6
9694: PPUSH
9695: LD_VAR 0 3
9699: PPUSH
9700: LD_INT 1
9702: PPUSH
9703: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9707: LD_INT 29
9709: PPUSH
9710: LD_VAR 0 3
9714: PPUSH
9715: LD_INT 1
9717: PPUSH
9718: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9722: LD_INT 31
9724: PPUSH
9725: LD_VAR 0 3
9729: PPUSH
9730: LD_INT 1
9732: PPUSH
9733: CALL_OW 324
// end ; 2 :
9737: GO 13491
9739: LD_INT 2
9741: DOUBLE
9742: EQUAL
9743: IFTRUE 9747
9745: GO 9945
9747: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9748: LD_INT 35
9750: PPUSH
9751: LD_VAR 0 3
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9763: LD_INT 45
9765: PPUSH
9766: LD_VAR 0 3
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9778: LD_INT 46
9780: PPUSH
9781: LD_VAR 0 3
9785: PPUSH
9786: LD_INT 1
9788: PPUSH
9789: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9793: LD_INT 47
9795: PPUSH
9796: LD_VAR 0 3
9800: PPUSH
9801: LD_INT 1
9803: PPUSH
9804: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9808: LD_INT 1
9810: PPUSH
9811: LD_VAR 0 3
9815: PPUSH
9816: LD_INT 1
9818: PPUSH
9819: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9823: LD_INT 2
9825: PPUSH
9826: LD_VAR 0 3
9830: PPUSH
9831: LD_INT 1
9833: PPUSH
9834: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9838: LD_INT 11
9840: PPUSH
9841: LD_VAR 0 3
9845: PPUSH
9846: LD_INT 1
9848: PPUSH
9849: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9853: LD_INT 0
9855: PPUSH
9856: LD_VAR 0 3
9860: PPUSH
9861: LD_INT 1
9863: PPUSH
9864: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9868: LD_INT 2
9870: PPUSH
9871: LD_VAR 0 3
9875: PPUSH
9876: LD_INT 1
9878: PPUSH
9879: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9883: LD_INT 4
9885: PPUSH
9886: LD_VAR 0 3
9890: PPUSH
9891: LD_INT 1
9893: PPUSH
9894: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9898: LD_INT 6
9900: PPUSH
9901: LD_VAR 0 3
9905: PPUSH
9906: LD_INT 1
9908: PPUSH
9909: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9913: LD_INT 29
9915: PPUSH
9916: LD_VAR 0 3
9920: PPUSH
9921: LD_INT 1
9923: PPUSH
9924: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9928: LD_INT 31
9930: PPUSH
9931: LD_VAR 0 3
9935: PPUSH
9936: LD_INT 1
9938: PPUSH
9939: CALL_OW 324
// end ; 3 :
9943: GO 13491
9945: LD_INT 3
9947: DOUBLE
9948: EQUAL
9949: IFTRUE 9953
9951: GO 10406
9953: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9954: LD_INT 35
9956: PPUSH
9957: LD_VAR 0 3
9961: PPUSH
9962: LD_INT 1
9964: PPUSH
9965: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9969: LD_INT 45
9971: PPUSH
9972: LD_VAR 0 3
9976: PPUSH
9977: LD_INT 1
9979: PPUSH
9980: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9984: LD_INT 46
9986: PPUSH
9987: LD_VAR 0 3
9991: PPUSH
9992: LD_INT 1
9994: PPUSH
9995: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9999: LD_INT 47
10001: PPUSH
10002: LD_VAR 0 3
10006: PPUSH
10007: LD_INT 1
10009: PPUSH
10010: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10014: LD_INT 1
10016: PPUSH
10017: LD_VAR 0 3
10021: PPUSH
10022: LD_INT 1
10024: PPUSH
10025: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10029: LD_INT 2
10031: PPUSH
10032: LD_VAR 0 3
10036: PPUSH
10037: LD_INT 1
10039: PPUSH
10040: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10044: LD_INT 11
10046: PPUSH
10047: LD_VAR 0 3
10051: PPUSH
10052: LD_INT 1
10054: PPUSH
10055: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10059: LD_INT 48
10061: PPUSH
10062: LD_VAR 0 3
10066: PPUSH
10067: LD_INT 1
10069: PPUSH
10070: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10074: LD_INT 69
10076: PPUSH
10077: LD_VAR 0 3
10081: PPUSH
10082: LD_INT 1
10084: PPUSH
10085: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10089: LD_INT 39
10091: PPUSH
10092: LD_VAR 0 3
10096: PPUSH
10097: LD_INT 1
10099: PPUSH
10100: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10104: LD_INT 43
10106: PPUSH
10107: LD_VAR 0 3
10111: PPUSH
10112: LD_INT 1
10114: PPUSH
10115: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10119: LD_INT 51
10121: PPUSH
10122: LD_VAR 0 3
10126: PPUSH
10127: LD_INT 1
10129: PPUSH
10130: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10134: LD_INT 6
10136: PPUSH
10137: LD_VAR 0 3
10141: PPUSH
10142: LD_INT 1
10144: PPUSH
10145: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10149: LD_INT 0
10151: PPUSH
10152: LD_VAR 0 3
10156: PPUSH
10157: LD_INT 1
10159: PPUSH
10160: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10164: LD_INT 2
10166: PPUSH
10167: LD_VAR 0 3
10171: PPUSH
10172: LD_INT 1
10174: PPUSH
10175: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10179: LD_INT 3
10181: PPUSH
10182: LD_VAR 0 3
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10194: LD_INT 4
10196: PPUSH
10197: LD_VAR 0 3
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10209: LD_INT 6
10211: PPUSH
10212: LD_VAR 0 3
10216: PPUSH
10217: LD_INT 1
10219: PPUSH
10220: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10224: LD_INT 7
10226: PPUSH
10227: LD_VAR 0 3
10231: PPUSH
10232: LD_INT 1
10234: PPUSH
10235: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10239: LD_INT 8
10241: PPUSH
10242: LD_VAR 0 3
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10254: LD_INT 10
10256: PPUSH
10257: LD_VAR 0 3
10261: PPUSH
10262: LD_INT 1
10264: PPUSH
10265: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10269: LD_INT 15
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10284: LD_INT 16
10286: PPUSH
10287: LD_VAR 0 3
10291: PPUSH
10292: LD_INT 1
10294: PPUSH
10295: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10299: LD_INT 17
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 1
10309: PPUSH
10310: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10314: LD_INT 20
10316: PPUSH
10317: LD_VAR 0 3
10321: PPUSH
10322: LD_INT 1
10324: PPUSH
10325: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10329: LD_INT 26
10331: PPUSH
10332: LD_VAR 0 3
10336: PPUSH
10337: LD_INT 1
10339: PPUSH
10340: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10344: LD_INT 27
10346: PPUSH
10347: LD_VAR 0 3
10351: PPUSH
10352: LD_INT 1
10354: PPUSH
10355: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10359: LD_INT 29
10361: PPUSH
10362: LD_VAR 0 3
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10374: LD_INT 31
10376: PPUSH
10377: LD_VAR 0 3
10381: PPUSH
10382: LD_INT 1
10384: PPUSH
10385: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10389: LD_INT 32
10391: PPUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 1
10399: PPUSH
10400: CALL_OW 324
// end ; 4 :
10404: GO 13491
10406: LD_INT 4
10408: DOUBLE
10409: EQUAL
10410: IFTRUE 10414
10412: GO 11362
10414: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10415: LD_INT 35
10417: PPUSH
10418: LD_VAR 0 3
10422: PPUSH
10423: LD_INT 1
10425: PPUSH
10426: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10430: LD_INT 45
10432: PPUSH
10433: LD_VAR 0 3
10437: PPUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10445: LD_INT 46
10447: PPUSH
10448: LD_VAR 0 3
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10460: LD_INT 47
10462: PPUSH
10463: LD_VAR 0 3
10467: PPUSH
10468: LD_INT 1
10470: PPUSH
10471: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10475: LD_INT 1
10477: PPUSH
10478: LD_VAR 0 3
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10490: LD_INT 2
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_INT 1
10500: PPUSH
10501: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10505: LD_INT 11
10507: PPUSH
10508: LD_VAR 0 3
10512: PPUSH
10513: LD_INT 1
10515: PPUSH
10516: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10520: LD_INT 20
10522: PPUSH
10523: LD_VAR 0 3
10527: PPUSH
10528: LD_INT 1
10530: PPUSH
10531: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10535: LD_INT 48
10537: PPUSH
10538: LD_VAR 0 3
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10550: LD_INT 49
10552: PPUSH
10553: LD_VAR 0 3
10557: PPUSH
10558: LD_INT 1
10560: PPUSH
10561: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10565: LD_INT 69
10567: PPUSH
10568: LD_VAR 0 3
10572: PPUSH
10573: LD_INT 1
10575: PPUSH
10576: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10580: LD_INT 39
10582: PPUSH
10583: LD_VAR 0 3
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10595: LD_INT 34
10597: PPUSH
10598: LD_VAR 0 3
10602: PPUSH
10603: LD_INT 1
10605: PPUSH
10606: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10610: LD_INT 42
10612: PPUSH
10613: LD_VAR 0 3
10617: PPUSH
10618: LD_INT 1
10620: PPUSH
10621: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10625: LD_INT 44
10627: PPUSH
10628: LD_VAR 0 3
10632: PPUSH
10633: LD_INT 1
10635: PPUSH
10636: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10640: LD_INT 41
10642: PPUSH
10643: LD_VAR 0 3
10647: PPUSH
10648: LD_INT 1
10650: PPUSH
10651: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10655: LD_INT 43
10657: PPUSH
10658: LD_VAR 0 3
10662: PPUSH
10663: LD_INT 1
10665: PPUSH
10666: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10670: LD_INT 70
10672: PPUSH
10673: LD_VAR 0 3
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10685: LD_INT 51
10687: PPUSH
10688: LD_VAR 0 3
10692: PPUSH
10693: LD_INT 1
10695: PPUSH
10696: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10700: LD_INT 52
10702: PPUSH
10703: LD_VAR 0 3
10707: PPUSH
10708: LD_INT 1
10710: PPUSH
10711: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10715: LD_INT 6
10717: PPUSH
10718: LD_VAR 0 3
10722: PPUSH
10723: LD_INT 1
10725: PPUSH
10726: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10730: LD_INT 15
10732: PPUSH
10733: LD_VAR 0 3
10737: PPUSH
10738: LD_INT 1
10740: PPUSH
10741: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10745: LD_INT 7
10747: PPUSH
10748: LD_VAR 0 3
10752: PPUSH
10753: LD_INT 1
10755: PPUSH
10756: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10760: LD_INT 12
10762: PPUSH
10763: LD_VAR 0 3
10767: PPUSH
10768: LD_INT 1
10770: PPUSH
10771: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10775: LD_INT 18
10777: PPUSH
10778: LD_VAR 0 3
10782: PPUSH
10783: LD_INT 1
10785: PPUSH
10786: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10790: LD_INT 60
10792: PPUSH
10793: LD_VAR 0 3
10797: PPUSH
10798: LD_INT 1
10800: PPUSH
10801: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10805: LD_INT 9
10807: PPUSH
10808: LD_VAR 0 3
10812: PPUSH
10813: LD_INT 1
10815: PPUSH
10816: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10820: LD_INT 30
10822: PPUSH
10823: LD_VAR 0 3
10827: PPUSH
10828: LD_INT 1
10830: PPUSH
10831: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10835: LD_INT 37
10837: PPUSH
10838: LD_VAR 0 3
10842: PPUSH
10843: LD_INT 1
10845: PPUSH
10846: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10850: LD_INT 5
10852: PPUSH
10853: LD_VAR 0 3
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10865: LD_INT 66
10867: PPUSH
10868: LD_VAR 0 3
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10880: LD_INT 21
10882: PPUSH
10883: LD_VAR 0 3
10887: PPUSH
10888: LD_INT 1
10890: PPUSH
10891: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10895: LD_INT 22
10897: PPUSH
10898: LD_VAR 0 3
10902: PPUSH
10903: LD_INT 1
10905: PPUSH
10906: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10910: LD_INT 54
10912: PPUSH
10913: LD_VAR 0 3
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10925: LD_INT 0
10927: PPUSH
10928: LD_VAR 0 3
10932: PPUSH
10933: LD_INT 1
10935: PPUSH
10936: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10940: LD_INT 1
10942: PPUSH
10943: LD_VAR 0 3
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10955: LD_INT 2
10957: PPUSH
10958: LD_VAR 0 3
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10970: LD_INT 3
10972: PPUSH
10973: LD_VAR 0 3
10977: PPUSH
10978: LD_INT 1
10980: PPUSH
10981: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10985: LD_INT 4
10987: PPUSH
10988: LD_VAR 0 3
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11000: LD_INT 5
11002: PPUSH
11003: LD_VAR 0 3
11007: PPUSH
11008: LD_INT 1
11010: PPUSH
11011: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11015: LD_INT 6
11017: PPUSH
11018: LD_VAR 0 3
11022: PPUSH
11023: LD_INT 1
11025: PPUSH
11026: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11030: LD_INT 7
11032: PPUSH
11033: LD_VAR 0 3
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11045: LD_INT 8
11047: PPUSH
11048: LD_VAR 0 3
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11060: LD_INT 10
11062: PPUSH
11063: LD_VAR 0 3
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11075: LD_INT 11
11077: PPUSH
11078: LD_VAR 0 3
11082: PPUSH
11083: LD_INT 1
11085: PPUSH
11086: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11090: LD_INT 12
11092: PPUSH
11093: LD_VAR 0 3
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11105: LD_INT 13
11107: PPUSH
11108: LD_VAR 0 3
11112: PPUSH
11113: LD_INT 1
11115: PPUSH
11116: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11120: LD_INT 14
11122: PPUSH
11123: LD_VAR 0 3
11127: PPUSH
11128: LD_INT 1
11130: PPUSH
11131: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11135: LD_INT 15
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11150: LD_INT 16
11152: PPUSH
11153: LD_VAR 0 3
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11165: LD_INT 17
11167: PPUSH
11168: LD_VAR 0 3
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11180: LD_INT 19
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: LD_INT 1
11190: PPUSH
11191: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11195: LD_INT 20
11197: PPUSH
11198: LD_VAR 0 3
11202: PPUSH
11203: LD_INT 1
11205: PPUSH
11206: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11210: LD_INT 21
11212: PPUSH
11213: LD_VAR 0 3
11217: PPUSH
11218: LD_INT 1
11220: PPUSH
11221: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11225: LD_INT 23
11227: PPUSH
11228: LD_VAR 0 3
11232: PPUSH
11233: LD_INT 1
11235: PPUSH
11236: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11240: LD_INT 26
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_INT 1
11250: PPUSH
11251: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11255: LD_INT 27
11257: PPUSH
11258: LD_VAR 0 3
11262: PPUSH
11263: LD_INT 1
11265: PPUSH
11266: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11270: LD_INT 28
11272: PPUSH
11273: LD_VAR 0 3
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11285: LD_INT 29
11287: PPUSH
11288: LD_VAR 0 3
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11300: LD_INT 30
11302: PPUSH
11303: LD_VAR 0 3
11307: PPUSH
11308: LD_INT 1
11310: PPUSH
11311: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11315: LD_INT 31
11317: PPUSH
11318: LD_VAR 0 3
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11330: LD_INT 32
11332: PPUSH
11333: LD_VAR 0 3
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11345: LD_INT 36
11347: PPUSH
11348: LD_VAR 0 3
11352: PPUSH
11353: LD_INT 1
11355: PPUSH
11356: CALL_OW 324
// end ; 5 :
11360: GO 13491
11362: LD_INT 5
11364: DOUBLE
11365: EQUAL
11366: IFTRUE 11370
11368: GO 12483
11370: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11371: LD_INT 35
11373: PPUSH
11374: LD_VAR 0 3
11378: PPUSH
11379: LD_INT 1
11381: PPUSH
11382: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11386: LD_INT 45
11388: PPUSH
11389: LD_VAR 0 3
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11401: LD_INT 46
11403: PPUSH
11404: LD_VAR 0 3
11408: PPUSH
11409: LD_INT 1
11411: PPUSH
11412: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11416: LD_INT 47
11418: PPUSH
11419: LD_VAR 0 3
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11431: LD_INT 1
11433: PPUSH
11434: LD_VAR 0 3
11438: PPUSH
11439: LD_INT 1
11441: PPUSH
11442: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11446: LD_INT 2
11448: PPUSH
11449: LD_VAR 0 3
11453: PPUSH
11454: LD_INT 1
11456: PPUSH
11457: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11461: LD_INT 11
11463: PPUSH
11464: LD_VAR 0 3
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11476: LD_INT 20
11478: PPUSH
11479: LD_VAR 0 3
11483: PPUSH
11484: LD_INT 1
11486: PPUSH
11487: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11491: LD_INT 48
11493: PPUSH
11494: LD_VAR 0 3
11498: PPUSH
11499: LD_INT 1
11501: PPUSH
11502: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11506: LD_INT 49
11508: PPUSH
11509: LD_VAR 0 3
11513: PPUSH
11514: LD_INT 1
11516: PPUSH
11517: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11521: LD_INT 69
11523: PPUSH
11524: LD_VAR 0 3
11528: PPUSH
11529: LD_INT 1
11531: PPUSH
11532: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11536: LD_INT 39
11538: PPUSH
11539: LD_VAR 0 3
11543: PPUSH
11544: LD_INT 1
11546: PPUSH
11547: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11551: LD_INT 34
11553: PPUSH
11554: LD_VAR 0 3
11558: PPUSH
11559: LD_INT 1
11561: PPUSH
11562: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11566: LD_INT 42
11568: PPUSH
11569: LD_VAR 0 3
11573: PPUSH
11574: LD_INT 1
11576: PPUSH
11577: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11581: LD_INT 44
11583: PPUSH
11584: LD_VAR 0 3
11588: PPUSH
11589: LD_INT 1
11591: PPUSH
11592: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11596: LD_INT 41
11598: PPUSH
11599: LD_VAR 0 3
11603: PPUSH
11604: LD_INT 1
11606: PPUSH
11607: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11611: LD_INT 40
11613: PPUSH
11614: LD_VAR 0 3
11618: PPUSH
11619: LD_INT 1
11621: PPUSH
11622: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11626: LD_INT 43
11628: PPUSH
11629: LD_VAR 0 3
11633: PPUSH
11634: LD_INT 1
11636: PPUSH
11637: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11641: LD_INT 70
11643: PPUSH
11644: LD_VAR 0 3
11648: PPUSH
11649: LD_INT 1
11651: PPUSH
11652: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11656: LD_INT 51
11658: PPUSH
11659: LD_VAR 0 3
11663: PPUSH
11664: LD_INT 1
11666: PPUSH
11667: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11671: LD_INT 52
11673: PPUSH
11674: LD_VAR 0 3
11678: PPUSH
11679: LD_INT 1
11681: PPUSH
11682: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11686: LD_INT 6
11688: PPUSH
11689: LD_VAR 0 3
11693: PPUSH
11694: LD_INT 1
11696: PPUSH
11697: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11701: LD_INT 15
11703: PPUSH
11704: LD_VAR 0 3
11708: PPUSH
11709: LD_INT 1
11711: PPUSH
11712: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11716: LD_INT 7
11718: PPUSH
11719: LD_VAR 0 3
11723: PPUSH
11724: LD_INT 1
11726: PPUSH
11727: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11731: LD_INT 12
11733: PPUSH
11734: LD_VAR 0 3
11738: PPUSH
11739: LD_INT 1
11741: PPUSH
11742: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11746: LD_INT 17
11748: PPUSH
11749: LD_VAR 0 3
11753: PPUSH
11754: LD_INT 1
11756: PPUSH
11757: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11761: LD_INT 18
11763: PPUSH
11764: LD_VAR 0 3
11768: PPUSH
11769: LD_INT 1
11771: PPUSH
11772: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11776: LD_INT 60
11778: PPUSH
11779: LD_VAR 0 3
11783: PPUSH
11784: LD_INT 1
11786: PPUSH
11787: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11791: LD_INT 32
11793: PPUSH
11794: LD_VAR 0 3
11798: PPUSH
11799: LD_INT 1
11801: PPUSH
11802: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11806: LD_INT 9
11808: PPUSH
11809: LD_VAR 0 3
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11821: LD_INT 57
11823: PPUSH
11824: LD_VAR 0 3
11828: PPUSH
11829: LD_INT 1
11831: PPUSH
11832: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11836: LD_INT 30
11838: PPUSH
11839: LD_VAR 0 3
11843: PPUSH
11844: LD_INT 1
11846: PPUSH
11847: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11851: LD_INT 37
11853: PPUSH
11854: LD_VAR 0 3
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11866: LD_INT 63
11868: PPUSH
11869: LD_VAR 0 3
11873: PPUSH
11874: LD_INT 1
11876: PPUSH
11877: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11881: LD_INT 3
11883: PPUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11896: LD_INT 4
11898: PPUSH
11899: LD_VAR 0 3
11903: PPUSH
11904: LD_INT 1
11906: PPUSH
11907: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11911: LD_INT 5
11913: PPUSH
11914: LD_VAR 0 3
11918: PPUSH
11919: LD_INT 1
11921: PPUSH
11922: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11926: LD_INT 66
11928: PPUSH
11929: LD_VAR 0 3
11933: PPUSH
11934: LD_INT 1
11936: PPUSH
11937: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11941: LD_INT 21
11943: PPUSH
11944: LD_VAR 0 3
11948: PPUSH
11949: LD_INT 1
11951: PPUSH
11952: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11956: LD_INT 22
11958: PPUSH
11959: LD_VAR 0 3
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11971: LD_INT 19
11973: PPUSH
11974: LD_VAR 0 3
11978: PPUSH
11979: LD_INT 1
11981: PPUSH
11982: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11986: LD_INT 54
11988: PPUSH
11989: LD_VAR 0 3
11993: PPUSH
11994: LD_INT 1
11996: PPUSH
11997: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12001: LD_INT 55
12003: PPUSH
12004: LD_VAR 0 3
12008: PPUSH
12009: LD_INT 1
12011: PPUSH
12012: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12016: LD_INT 0
12018: PPUSH
12019: LD_VAR 0 3
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12031: LD_INT 1
12033: PPUSH
12034: LD_VAR 0 3
12038: PPUSH
12039: LD_INT 1
12041: PPUSH
12042: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12046: LD_INT 2
12048: PPUSH
12049: LD_VAR 0 3
12053: PPUSH
12054: LD_INT 1
12056: PPUSH
12057: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12061: LD_INT 3
12063: PPUSH
12064: LD_VAR 0 3
12068: PPUSH
12069: LD_INT 1
12071: PPUSH
12072: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12076: LD_INT 4
12078: PPUSH
12079: LD_VAR 0 3
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12091: LD_INT 5
12093: PPUSH
12094: LD_VAR 0 3
12098: PPUSH
12099: LD_INT 1
12101: PPUSH
12102: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12106: LD_INT 6
12108: PPUSH
12109: LD_VAR 0 3
12113: PPUSH
12114: LD_INT 1
12116: PPUSH
12117: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12121: LD_INT 7
12123: PPUSH
12124: LD_VAR 0 3
12128: PPUSH
12129: LD_INT 1
12131: PPUSH
12132: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12136: LD_INT 8
12138: PPUSH
12139: LD_VAR 0 3
12143: PPUSH
12144: LD_INT 1
12146: PPUSH
12147: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12151: LD_INT 10
12153: PPUSH
12154: LD_VAR 0 3
12158: PPUSH
12159: LD_INT 1
12161: PPUSH
12162: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12166: LD_INT 11
12168: PPUSH
12169: LD_VAR 0 3
12173: PPUSH
12174: LD_INT 1
12176: PPUSH
12177: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12181: LD_INT 12
12183: PPUSH
12184: LD_VAR 0 3
12188: PPUSH
12189: LD_INT 1
12191: PPUSH
12192: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12196: LD_INT 13
12198: PPUSH
12199: LD_VAR 0 3
12203: PPUSH
12204: LD_INT 1
12206: PPUSH
12207: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12211: LD_INT 14
12213: PPUSH
12214: LD_VAR 0 3
12218: PPUSH
12219: LD_INT 1
12221: PPUSH
12222: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12226: LD_INT 15
12228: PPUSH
12229: LD_VAR 0 3
12233: PPUSH
12234: LD_INT 1
12236: PPUSH
12237: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12241: LD_INT 16
12243: PPUSH
12244: LD_VAR 0 3
12248: PPUSH
12249: LD_INT 1
12251: PPUSH
12252: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12256: LD_INT 17
12258: PPUSH
12259: LD_VAR 0 3
12263: PPUSH
12264: LD_INT 1
12266: PPUSH
12267: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12271: LD_INT 18
12273: PPUSH
12274: LD_VAR 0 3
12278: PPUSH
12279: LD_INT 1
12281: PPUSH
12282: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12286: LD_INT 19
12288: PPUSH
12289: LD_VAR 0 3
12293: PPUSH
12294: LD_INT 1
12296: PPUSH
12297: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12301: LD_INT 20
12303: PPUSH
12304: LD_VAR 0 3
12308: PPUSH
12309: LD_INT 1
12311: PPUSH
12312: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12316: LD_INT 21
12318: PPUSH
12319: LD_VAR 0 3
12323: PPUSH
12324: LD_INT 1
12326: PPUSH
12327: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12331: LD_INT 23
12333: PPUSH
12334: LD_VAR 0 3
12338: PPUSH
12339: LD_INT 1
12341: PPUSH
12342: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12346: LD_INT 26
12348: PPUSH
12349: LD_VAR 0 3
12353: PPUSH
12354: LD_INT 1
12356: PPUSH
12357: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12361: LD_INT 27
12363: PPUSH
12364: LD_VAR 0 3
12368: PPUSH
12369: LD_INT 1
12371: PPUSH
12372: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12376: LD_INT 28
12378: PPUSH
12379: LD_VAR 0 3
12383: PPUSH
12384: LD_INT 1
12386: PPUSH
12387: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12391: LD_INT 29
12393: PPUSH
12394: LD_VAR 0 3
12398: PPUSH
12399: LD_INT 1
12401: PPUSH
12402: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12406: LD_INT 30
12408: PPUSH
12409: LD_VAR 0 3
12413: PPUSH
12414: LD_INT 1
12416: PPUSH
12417: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12421: LD_INT 31
12423: PPUSH
12424: LD_VAR 0 3
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12436: LD_INT 32
12438: PPUSH
12439: LD_VAR 0 3
12443: PPUSH
12444: LD_INT 1
12446: PPUSH
12447: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12451: LD_INT 33
12453: PPUSH
12454: LD_VAR 0 3
12458: PPUSH
12459: LD_INT 1
12461: PPUSH
12462: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12466: LD_INT 36
12468: PPUSH
12469: LD_VAR 0 3
12473: PPUSH
12474: LD_INT 1
12476: PPUSH
12477: CALL_OW 324
// end ; 6 :
12481: GO 13491
12483: LD_INT 6
12485: DOUBLE
12486: EQUAL
12487: IFTRUE 12491
12489: GO 13416
12491: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12492: LD_INT 35
12494: PPUSH
12495: LD_VAR 0 3
12499: PPUSH
12500: LD_INT 1
12502: PPUSH
12503: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12507: LD_INT 45
12509: PPUSH
12510: LD_VAR 0 3
12514: PPUSH
12515: LD_INT 1
12517: PPUSH
12518: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12522: LD_INT 46
12524: PPUSH
12525: LD_VAR 0 3
12529: PPUSH
12530: LD_INT 1
12532: PPUSH
12533: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12537: LD_INT 47
12539: PPUSH
12540: LD_VAR 0 3
12544: PPUSH
12545: LD_INT 1
12547: PPUSH
12548: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12552: LD_INT 1
12554: PPUSH
12555: LD_VAR 0 3
12559: PPUSH
12560: LD_INT 1
12562: PPUSH
12563: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12567: LD_INT 2
12569: PPUSH
12570: LD_VAR 0 3
12574: PPUSH
12575: LD_INT 1
12577: PPUSH
12578: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12582: LD_INT 11
12584: PPUSH
12585: LD_VAR 0 3
12589: PPUSH
12590: LD_INT 1
12592: PPUSH
12593: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12597: LD_INT 20
12599: PPUSH
12600: LD_VAR 0 3
12604: PPUSH
12605: LD_INT 1
12607: PPUSH
12608: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12612: LD_INT 48
12614: PPUSH
12615: LD_VAR 0 3
12619: PPUSH
12620: LD_INT 1
12622: PPUSH
12623: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12627: LD_INT 49
12629: PPUSH
12630: LD_VAR 0 3
12634: PPUSH
12635: LD_INT 1
12637: PPUSH
12638: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12642: LD_INT 50
12644: PPUSH
12645: LD_VAR 0 3
12649: PPUSH
12650: LD_INT 1
12652: PPUSH
12653: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12657: LD_INT 69
12659: PPUSH
12660: LD_VAR 0 3
12664: PPUSH
12665: LD_INT 1
12667: PPUSH
12668: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12672: LD_INT 39
12674: PPUSH
12675: LD_VAR 0 3
12679: PPUSH
12680: LD_INT 1
12682: PPUSH
12683: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12687: LD_INT 34
12689: PPUSH
12690: LD_VAR 0 3
12694: PPUSH
12695: LD_INT 1
12697: PPUSH
12698: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12702: LD_INT 42
12704: PPUSH
12705: LD_VAR 0 3
12709: PPUSH
12710: LD_INT 1
12712: PPUSH
12713: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12717: LD_INT 44
12719: PPUSH
12720: LD_VAR 0 3
12724: PPUSH
12725: LD_INT 1
12727: PPUSH
12728: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12732: LD_INT 41
12734: PPUSH
12735: LD_VAR 0 3
12739: PPUSH
12740: LD_INT 1
12742: PPUSH
12743: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12747: LD_INT 13
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12762: LD_INT 40
12764: PPUSH
12765: LD_VAR 0 3
12769: PPUSH
12770: LD_INT 1
12772: PPUSH
12773: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12777: LD_INT 43
12779: PPUSH
12780: LD_VAR 0 3
12784: PPUSH
12785: LD_INT 1
12787: PPUSH
12788: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12792: LD_INT 70
12794: PPUSH
12795: LD_VAR 0 3
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12807: LD_INT 23
12809: PPUSH
12810: LD_VAR 0 3
12814: PPUSH
12815: LD_INT 1
12817: PPUSH
12818: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12822: LD_INT 51
12824: PPUSH
12825: LD_VAR 0 3
12829: PPUSH
12830: LD_INT 1
12832: PPUSH
12833: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12837: LD_INT 52
12839: PPUSH
12840: LD_VAR 0 3
12844: PPUSH
12845: LD_INT 1
12847: PPUSH
12848: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12852: LD_INT 6
12854: PPUSH
12855: LD_VAR 0 3
12859: PPUSH
12860: LD_INT 1
12862: PPUSH
12863: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12867: LD_INT 15
12869: PPUSH
12870: LD_VAR 0 3
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12882: LD_INT 7
12884: PPUSH
12885: LD_VAR 0 3
12889: PPUSH
12890: LD_INT 1
12892: PPUSH
12893: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12897: LD_INT 12
12899: PPUSH
12900: LD_VAR 0 3
12904: PPUSH
12905: LD_INT 1
12907: PPUSH
12908: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12912: LD_INT 10
12914: PPUSH
12915: LD_VAR 0 3
12919: PPUSH
12920: LD_INT 1
12922: PPUSH
12923: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12927: LD_INT 17
12929: PPUSH
12930: LD_VAR 0 3
12934: PPUSH
12935: LD_INT 1
12937: PPUSH
12938: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12942: LD_INT 18
12944: PPUSH
12945: LD_VAR 0 3
12949: PPUSH
12950: LD_INT 1
12952: PPUSH
12953: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12957: LD_INT 60
12959: PPUSH
12960: LD_VAR 0 3
12964: PPUSH
12965: LD_INT 1
12967: PPUSH
12968: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12972: LD_INT 61
12974: PPUSH
12975: LD_VAR 0 3
12979: PPUSH
12980: LD_INT 1
12982: PPUSH
12983: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12987: LD_INT 32
12989: PPUSH
12990: LD_VAR 0 3
12994: PPUSH
12995: LD_INT 1
12997: PPUSH
12998: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13002: LD_INT 27
13004: PPUSH
13005: LD_VAR 0 3
13009: PPUSH
13010: LD_INT 1
13012: PPUSH
13013: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13017: LD_INT 36
13019: PPUSH
13020: LD_VAR 0 3
13024: PPUSH
13025: LD_INT 1
13027: PPUSH
13028: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13032: LD_INT 33
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: LD_INT 1
13042: PPUSH
13043: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13047: LD_INT 9
13049: PPUSH
13050: LD_VAR 0 3
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13062: LD_INT 38
13064: PPUSH
13065: LD_VAR 0 3
13069: PPUSH
13070: LD_INT 1
13072: PPUSH
13073: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13077: LD_INT 57
13079: PPUSH
13080: LD_VAR 0 3
13084: PPUSH
13085: LD_INT 1
13087: PPUSH
13088: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13092: LD_INT 58
13094: PPUSH
13095: LD_VAR 0 3
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13107: LD_INT 28
13109: PPUSH
13110: LD_VAR 0 3
13114: PPUSH
13115: LD_INT 1
13117: PPUSH
13118: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13122: LD_INT 29
13124: PPUSH
13125: LD_VAR 0 3
13129: PPUSH
13130: LD_INT 1
13132: PPUSH
13133: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13137: LD_INT 30
13139: PPUSH
13140: LD_VAR 0 3
13144: PPUSH
13145: LD_INT 1
13147: PPUSH
13148: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13152: LD_INT 37
13154: PPUSH
13155: LD_VAR 0 3
13159: PPUSH
13160: LD_INT 1
13162: PPUSH
13163: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13167: LD_INT 63
13169: PPUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: LD_INT 1
13177: PPUSH
13178: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13182: LD_INT 64
13184: PPUSH
13185: LD_VAR 0 3
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13197: LD_INT 3
13199: PPUSH
13200: LD_VAR 0 3
13204: PPUSH
13205: LD_INT 1
13207: PPUSH
13208: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13212: LD_INT 4
13214: PPUSH
13215: LD_VAR 0 3
13219: PPUSH
13220: LD_INT 1
13222: PPUSH
13223: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13227: LD_INT 5
13229: PPUSH
13230: LD_VAR 0 3
13234: PPUSH
13235: LD_INT 1
13237: PPUSH
13238: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13242: LD_INT 8
13244: PPUSH
13245: LD_VAR 0 3
13249: PPUSH
13250: LD_INT 1
13252: PPUSH
13253: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13257: LD_INT 66
13259: PPUSH
13260: LD_VAR 0 3
13264: PPUSH
13265: LD_INT 1
13267: PPUSH
13268: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13272: LD_INT 67
13274: PPUSH
13275: LD_VAR 0 3
13279: PPUSH
13280: LD_INT 1
13282: PPUSH
13283: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13287: LD_INT 21
13289: PPUSH
13290: LD_VAR 0 3
13294: PPUSH
13295: LD_INT 1
13297: PPUSH
13298: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13302: LD_INT 22
13304: PPUSH
13305: LD_VAR 0 3
13309: PPUSH
13310: LD_INT 1
13312: PPUSH
13313: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13317: LD_INT 19
13319: PPUSH
13320: LD_VAR 0 3
13324: PPUSH
13325: LD_INT 1
13327: PPUSH
13328: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13332: LD_INT 26
13334: PPUSH
13335: LD_VAR 0 3
13339: PPUSH
13340: LD_INT 1
13342: PPUSH
13343: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13347: LD_INT 54
13349: PPUSH
13350: LD_VAR 0 3
13354: PPUSH
13355: LD_INT 1
13357: PPUSH
13358: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13362: LD_INT 55
13364: PPUSH
13365: LD_VAR 0 3
13369: PPUSH
13370: LD_INT 1
13372: PPUSH
13373: CALL_OW 322
// for i = 0 to 39 do
13377: LD_ADDR_VAR 0 4
13381: PUSH
13382: DOUBLE
13383: LD_INT 0
13385: DEC
13386: ST_TO_ADDR
13387: LD_INT 39
13389: PUSH
13390: FOR_TO
13391: IFFALSE 13412
// SetRestrict ( i , side , true ) ;
13393: LD_VAR 0 4
13397: PPUSH
13398: LD_VAR 0 3
13402: PPUSH
13403: LD_INT 1
13405: PPUSH
13406: CALL_OW 324
13410: GO 13390
13412: POP
13413: POP
// end ; else
13414: GO 13491
13416: POP
// begin for i = 1 to 73 do
13417: LD_ADDR_VAR 0 4
13421: PUSH
13422: DOUBLE
13423: LD_INT 1
13425: DEC
13426: ST_TO_ADDR
13427: LD_INT 73
13429: PUSH
13430: FOR_TO
13431: IFFALSE 13452
// SetTech ( i , side , state_enabled ) ;
13433: LD_VAR 0 4
13437: PPUSH
13438: LD_VAR 0 3
13442: PPUSH
13443: LD_INT 1
13445: PPUSH
13446: CALL_OW 322
13450: GO 13430
13452: POP
13453: POP
// for i = 0 to 39 do
13454: LD_ADDR_VAR 0 4
13458: PUSH
13459: DOUBLE
13460: LD_INT 0
13462: DEC
13463: ST_TO_ADDR
13464: LD_INT 39
13466: PUSH
13467: FOR_TO
13468: IFFALSE 13489
// SetRestrict ( i , side , true ) ;
13470: LD_VAR 0 4
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_INT 1
13482: PPUSH
13483: CALL_OW 324
13487: GO 13467
13489: POP
13490: POP
// end ; end ; end ;
13491: GO 9496
13493: POP
13494: POP
// end ;
13495: LD_VAR 0 2
13499: RET
