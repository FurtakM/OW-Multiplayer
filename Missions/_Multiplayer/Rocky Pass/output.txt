// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , def_win_rules , tech_level ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
// if Multiplayer then
  72: LD_OWVAR 4
  76: IFFALSE 150
// begin Game_Type := mp_game_type ;
  78: LD_ADDR_EXP 18
  82: PUSH
  83: LD_OWVAR 6
  87: ST_TO_ADDR
// Your_Side := mp_player_side ;
  88: LD_ADDR_OWVAR 2
  92: PUSH
  93: LD_OWVAR 7
  97: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  98: LD_ADDR_EXP 39
 102: PUSH
 103: LD_OWVAR 17
 107: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 108: LD_ADDR_EXP 36
 112: PUSH
 113: LD_OWVAR 15
 117: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 118: LD_ADDR_EXP 40
 122: PUSH
 123: LD_OWVAR 16
 127: ST_TO_ADDR
// Side_Comps := mp_sides_comps ;
 128: LD_ADDR_EXP 38
 132: PUSH
 133: CALL 0 0 0
 137: ST_TO_ADDR
// Teams := mp_teams ;
 138: LD_ADDR_EXP 37
 142: PUSH
 143: LD_OWVAR 12
 147: ST_TO_ADDR
// end else
 148: GO 371
// begin Game_Type := 1 ;
 150: LD_ADDR_EXP 18
 154: PUSH
 155: LD_INT 1
 157: ST_TO_ADDR
// Your_Side := 1 ;
 158: LD_ADDR_OWVAR 2
 162: PUSH
 163: LD_INT 1
 165: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 166: LD_ADDR_EXP 39
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 4
 182: PUSH
 183: LD_INT 5
 185: PUSH
 186: LD_INT 6
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 205: LD_ADDR_EXP 36
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: LD_INT 2
 215: PUSH
 216: LD_INT 3
 218: PUSH
 219: LD_INT 4
 221: PUSH
 222: LD_INT 5
 224: PUSH
 225: LD_INT 6
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: LD_INT 0
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 244: LD_ADDR_EXP 40
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: LD_INT 3
 257: PUSH
 258: LD_INT 1
 260: PUSH
 261: LD_INT 2
 263: PUSH
 264: LD_INT 3
 266: PUSH
 267: LD_INT 0
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: ST_TO_ADDR
// Side_Comps := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 283: LD_ADDR_EXP 38
 287: PUSH
 288: LD_INT 0
 290: PUSH
 291: LD_INT 0
 293: PUSH
 294: LD_INT 0
 296: PUSH
 297: LD_INT 0
 299: PUSH
 300: LD_INT 0
 302: PUSH
 303: LD_INT 0
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 0
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 322: LD_ADDR_EXP 37
 326: PUSH
 327: LD_INT 1
 329: PUSH
 330: EMPTY
 331: LIST
 332: PUSH
 333: LD_INT 2
 335: PUSH
 336: EMPTY
 337: LIST
 338: PUSH
 339: LD_INT 3
 341: PUSH
 342: EMPTY
 343: LIST
 344: PUSH
 345: LD_INT 4
 347: PUSH
 348: EMPTY
 349: LIST
 350: PUSH
 351: LD_INT 5
 353: PUSH
 354: EMPTY
 355: LIST
 356: PUSH
 357: LD_INT 6
 359: PUSH
 360: EMPTY
 361: LIST
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 371: LD_ADDR_EXP 41
 375: PUSH
 376: LD_EXP 36
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: DIFF
 387: PUSH
 388: LD_INT 1
 390: GREATER
 391: ST_TO_ADDR
// if Multiplayer then
 392: LD_OWVAR 4
 396: IFFALSE 629
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 398: LD_ADDR_EXP 1
 402: PUSH
 403: LD_INT 0
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 411: LD_ADDR_EXP 2
 415: PUSH
 416: LD_INT 1
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 424: LD_ADDR_EXP 3
 428: PUSH
 429: LD_INT 2
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 437: LD_ADDR_EXP 4
 441: PUSH
 442: LD_INT 3
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 450: LD_ADDR_EXP 5
 454: PUSH
 455: LD_INT 4
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 463: LD_ADDR_EXP 6
 467: PUSH
 468: LD_INT 5
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 476: LD_ADDR_EXP 7
 480: PUSH
 481: LD_INT 6
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 489: LD_ADDR_EXP 8
 493: PUSH
 494: LD_INT 10
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 502: LD_ADDR_EXP 9
 506: PUSH
 507: LD_INT 11
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 515: LD_ADDR_EXP 10
 519: PUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 426
 527: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 528: LD_ADDR_EXP 11
 532: PUSH
 533: LD_INT 13
 535: PPUSH
 536: CALL_OW 426
 540: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 541: LD_ADDR_EXP 12
 545: PUSH
 546: LD_INT 14
 548: PPUSH
 549: CALL_OW 426
 553: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 554: LD_ADDR_EXP 13
 558: PUSH
 559: LD_INT 15
 561: PPUSH
 562: CALL_OW 426
 566: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 567: LD_ADDR_EXP 14
 571: PUSH
 572: LD_INT 16
 574: PPUSH
 575: CALL_OW 426
 579: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 580: LD_ADDR_EXP 15
 584: PUSH
 585: LD_INT 17
 587: PPUSH
 588: CALL_OW 426
 592: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 593: LD_ADDR_EXP 16
 597: PUSH
 598: LD_INT 20
 600: PPUSH
 601: CALL_OW 426
 605: ST_TO_ADDR
// def_win_rules := 0 ;
 606: LD_ADDR_EXP 34
 610: PUSH
 611: LD_INT 0
 613: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 614: LD_ADDR_EXP 35
 618: PUSH
 619: LD_INT 23
 621: PPUSH
 622: CALL_OW 426
 626: ST_TO_ADDR
// end else
 627: GO 777
// begin Randomize ;
 629: CALL_OW 10
// def_base_level := 2 ;
 633: LD_ADDR_EXP 1
 637: PUSH
 638: LD_INT 2
 640: ST_TO_ADDR
// def_amount_of_people := 0 ;
 641: LD_ADDR_EXP 2
 645: PUSH
 646: LD_INT 0
 648: ST_TO_ADDR
// def_skill_level := 1 ;
 649: LD_ADDR_EXP 3
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// def_starting_resources := 2 ;
 657: LD_ADDR_EXP 4
 661: PUSH
 662: LD_INT 2
 664: ST_TO_ADDR
// def_shipments_density := 3 ;
 665: LD_ADDR_EXP 5
 669: PUSH
 670: LD_INT 3
 672: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 673: LD_ADDR_EXP 6
 677: PUSH
 678: LD_INT 0
 680: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 681: LD_ADDR_EXP 7
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_shared_vision := 1 ;
 689: LD_ADDR_EXP 8
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_morale_flags := 1 ;
 697: LD_ADDR_EXP 9
 701: PUSH
 702: LD_INT 1
 704: ST_TO_ADDR
// def_siberite_detection := 1 ;
 705: LD_ADDR_EXP 10
 709: PUSH
 710: LD_INT 1
 712: ST_TO_ADDR
// def_people_respawning := 2 ;
 713: LD_ADDR_EXP 11
 717: PUSH
 718: LD_INT 2
 720: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 721: LD_ADDR_EXP 12
 725: PUSH
 726: LD_INT 3
 728: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 729: LD_ADDR_EXP 13
 733: PUSH
 734: LD_INT 0
 736: ST_TO_ADDR
// def_public_score := 0 ;
 737: LD_ADDR_EXP 14
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 745: LD_ADDR_EXP 15
 749: PUSH
 750: LD_INT 0
 752: ST_TO_ADDR
// def_builduptime := 1 ;
 753: LD_ADDR_EXP 16
 757: PUSH
 758: LD_INT 1
 760: ST_TO_ADDR
// def_win_rules := 0 ;
 761: LD_ADDR_EXP 34
 765: PUSH
 766: LD_INT 0
 768: ST_TO_ADDR
// tech_level := 0 ;
 769: LD_ADDR_EXP 35
 773: PUSH
 774: LD_INT 0
 776: ST_TO_ADDR
// end ; if isSGUI then
 777: LD_OWVAR 83
 781: IFFALSE 789
// setMpTechs ( ) else
 783: CALL 7689 0 0
 787: GO 802
// SetMpTechLevel ( tech_level + 1 ) ;
 789: LD_EXP 35
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: PPUSH
 798: CALL 7836 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 802: LD_ADDR_EXP 19
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: LD_INT 1
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: PUSH
 821: LD_EXP 1
 825: PUSH
 826: LD_INT 1
 828: PLUS
 829: ARRAY
 830: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 831: LD_ADDR_EXP 20
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: LD_INT 3
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: PUSH
 850: LD_EXP 1
 854: PUSH
 855: LD_INT 1
 857: PLUS
 858: ARRAY
 859: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 860: LD_ADDR_EXP 21
 864: PUSH
 865: LD_INT 9
 867: PUSH
 868: LD_INT 12
 870: PUSH
 871: LD_INT 15
 873: PUSH
 874: LD_INT 24
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: PUSH
 883: LD_EXP 2
 887: PUSH
 888: LD_INT 1
 890: PLUS
 891: ARRAY
 892: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
 893: LD_ADDR_EXP 22
 897: PUSH
 898: LD_INT 2
 900: PUSH
 901: LD_INT 3
 903: PUSH
 904: LD_INT 5
 906: PUSH
 907: LD_INT 6
 909: PUSH
 910: EMPTY
 911: LIST
 912: LIST
 913: LIST
 914: LIST
 915: PUSH
 916: LD_EXP 3
 920: PUSH
 921: LD_INT 1
 923: PLUS
 924: ARRAY
 925: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 926: LD_ADDR_EXP 24
 930: PUSH
 931: LD_INT 0
 933: PUSH
 934: LD_INT 0
 936: PUSH
 937: LD_INT 0
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: LIST
 944: PUSH
 945: LD_INT 30
 947: PUSH
 948: LD_INT 0
 950: PUSH
 951: LD_INT 0
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 50
 961: PUSH
 962: LD_INT 20
 964: PUSH
 965: LD_INT 0
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: LD_INT 80
 975: PUSH
 976: LD_INT 40
 978: PUSH
 979: LD_INT 20
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: LIST
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: LD_EXP 4
 997: PUSH
 998: LD_INT 1
1000: PLUS
1001: ARRAY
1002: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1003: LD_ADDR_EXP 23
1007: PUSH
1008: LD_INT 10
1010: PUSH
1011: EMPTY
1012: LIST
1013: PUSH
1014: LD_INT 7
1016: PUSH
1017: LD_INT 14
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 6
1026: PUSH
1027: LD_INT 12
1029: PUSH
1030: LD_INT 18
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: PUSH
1038: LD_INT 5
1040: PUSH
1041: LD_INT 10
1043: PUSH
1044: LD_INT 15
1046: PUSH
1047: LD_INT 20
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: PUSH
1062: LD_EXP 4
1066: PUSH
1067: LD_INT 1
1069: PLUS
1070: ARRAY
1071: ST_TO_ADDR
// shipments_density := [ 125 , 100 , 75 , 50 ] [ def_shipments_density + 1 ] ;
1072: LD_ADDR_EXP 25
1076: PUSH
1077: LD_INT 125
1079: PUSH
1080: LD_INT 100
1082: PUSH
1083: LD_INT 75
1085: PUSH
1086: LD_INT 50
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: LD_EXP 5
1099: PUSH
1100: LD_INT 1
1102: PLUS
1103: ARRAY
1104: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: LD_INT 10500
1115: PUSH
1116: LD_INT 6300
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: PUSH
1124: LD_EXP 11
1128: PUSH
1129: LD_INT 1
1131: PLUS
1132: ARRAY
1133: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1134: LD_ADDR_EXP 30
1138: PUSH
1139: LD_INT 0
1141: PUSH
1142: LD_INT 31500
1144: PUSH
1145: LD_INT 10500
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_EXP 11
1157: PUSH
1158: LD_INT 1
1160: PLUS
1161: ARRAY
1162: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1163: LD_ADDR_EXP 27
1167: PUSH
1168: LD_INT 0
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 2
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_EXP 12
1190: PUSH
1191: LD_INT 1
1193: PLUS
1194: ARRAY
1195: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1196: LD_ADDR_EXP 28
1200: PUSH
1201: LD_INT 30
1203: PUSH
1204: LD_INT 50
1206: PUSH
1207: LD_INT 80
1209: PUSH
1210: LD_INT 100
1212: PUSH
1213: LD_INT 130
1215: PUSH
1216: LD_INT 150
1218: PUSH
1219: LD_INT 200
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: LD_EXP 13
1235: PUSH
1236: LD_INT 1
1238: PLUS
1239: ARRAY
1240: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1241: LD_ADDR_EXP 26
1245: PUSH
1246: LD_INT 1
1248: NEG
1249: PUSH
1250: LD_INT 350
1252: PUSH
1253: LD_INT 700
1255: PUSH
1256: LD_INT 1400
1258: PUSH
1259: LD_INT 0
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_EXP 9
1273: PUSH
1274: LD_INT 1
1276: PLUS
1277: ARRAY
1278: ST_TO_ADDR
// battle_flags_id := [ ] ;
1279: LD_ADDR_EXP 49
1283: PUSH
1284: EMPTY
1285: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1286: LD_ADDR_EXP 31
1290: PUSH
1291: LD_INT 0
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_EXP 32
1305: PUSH
1306: LD_INT 1
1308: PLUS
1309: ARRAY
1310: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1311: LD_ADDR_EXP 33
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: LD_INT 63000
1324: PUSH
1325: LD_INT 126000
1327: PUSH
1328: LD_INT 189000
1330: PUSH
1331: LD_INT 252000
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: PUSH
1342: LD_EXP 15
1346: PUSH
1347: LD_INT 1
1349: PLUS
1350: ARRAY
1351: ST_TO_ADDR
// end ;
1352: LD_VAR 0 1
1356: RET
// function init_map ; var i , j ; begin
1357: LD_INT 0
1359: PPUSH
1360: PPUSH
1361: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1362: LD_ADDR_EXP 45
1366: PUSH
1367: LD_INT 12
1369: PUSH
1370: LD_INT 4
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 45
1379: PUSH
1380: LD_INT 81
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: PUSH
1387: LD_INT 116
1389: PUSH
1390: LD_INT 195
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: PUSH
1397: LD_INT 142
1399: PUSH
1400: LD_INT 4
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: PUSH
1407: LD_INT 201
1409: PUSH
1410: LD_INT 102
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 234
1419: PUSH
1420: LD_INT 194
1422: PUSH
1423: EMPTY
1424: LIST
1425: LIST
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: LIST
1433: LIST
1434: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1435: LD_ADDR_EXP 46
1439: PUSH
1440: LD_INT 12
1442: PUSH
1443: LD_INT 4
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PUSH
1450: LD_INT 16
1452: PUSH
1453: LD_INT 25
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 45
1466: PUSH
1467: LD_INT 81
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 60
1476: PUSH
1477: LD_INT 102
1479: PUSH
1480: EMPTY
1481: LIST
1482: LIST
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 116
1490: PUSH
1491: LD_INT 195
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: LD_INT 92
1500: PUSH
1501: LD_INT 167
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 142
1514: PUSH
1515: LD_INT 4
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 167
1524: PUSH
1525: LD_INT 24
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: EMPTY
1533: LIST
1534: LIST
1535: PUSH
1536: LD_INT 201
1538: PUSH
1539: LD_INT 102
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: PUSH
1546: LD_INT 190
1548: PUSH
1549: LD_INT 77
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 234
1562: PUSH
1563: LD_INT 194
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 237
1572: PUSH
1573: LD_INT 171
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PUSH
1584: EMPTY
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1592: LD_ADDR_EXP 47
1596: PUSH
1597: LD_INT 10
1599: PUSH
1600: LD_INT 10
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 51
1609: PUSH
1610: LD_INT 93
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: LD_INT 102
1619: PUSH
1620: LD_INT 187
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 158
1629: PUSH
1630: LD_INT 6
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 203
1639: PUSH
1640: LD_INT 93
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 252
1649: PUSH
1650: LD_INT 194
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1665: LD_ADDR_EXP 48
1669: PUSH
1670: LD_INT 10
1672: PUSH
1673: LD_INT 10
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 36
1682: PUSH
1683: LD_INT 10
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: LD_INT 51
1696: PUSH
1697: LD_INT 93
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 47
1706: PUSH
1707: LD_INT 72
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 102
1720: PUSH
1721: LD_INT 187
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: PUSH
1728: LD_INT 93
1730: PUSH
1731: LD_INT 175
1733: PUSH
1734: EMPTY
1735: LIST
1736: LIST
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PUSH
1742: LD_INT 158
1744: PUSH
1745: LD_INT 6
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: PUSH
1752: LD_INT 147
1754: PUSH
1755: LD_INT 5
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 203
1768: PUSH
1769: LD_INT 93
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 173
1778: PUSH
1779: LD_INT 71
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: LD_INT 252
1792: PUSH
1793: LD_INT 194
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: LD_INT 243
1802: PUSH
1803: LD_INT 177
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1822: LD_ADDR_EXP 42
1826: PUSH
1827: LD_INT 23
1829: PUSH
1830: LD_INT 15
1832: PUSH
1833: LD_INT 2
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 56
1843: PUSH
1844: LD_INT 85
1846: PUSH
1847: LD_INT 1
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 110
1857: PUSH
1858: LD_INT 177
1860: PUSH
1861: LD_INT 3
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 157
1871: PUSH
1872: LD_INT 13
1874: PUSH
1875: LD_INT 3
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PUSH
1883: LD_INT 187
1885: PUSH
1886: LD_INT 87
1888: PUSH
1889: LD_INT 5
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 231
1899: PUSH
1900: LD_INT 181
1902: PUSH
1903: LD_INT 5
1905: PUSH
1906: EMPTY
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
1919: LD_ADDR_EXP 44
1923: PUSH
1924: LD_INT 30
1926: PUSH
1927: LD_INT 22
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 58
1936: PUSH
1937: LD_INT 82
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 113
1946: PUSH
1947: LD_INT 180
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: LD_INT 151
1956: PUSH
1957: LD_INT 24
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 183
1966: PUSH
1967: LD_INT 90
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 223
1976: PUSH
1977: LD_INT 180
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
1992: LD_ADDR_EXP 43
1996: PUSH
1997: LD_INT 33
1999: PUSH
2000: LD_INT 12
2002: PUSH
2003: LD_INT 5
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 42
2013: PUSH
2014: LD_INT 29
2016: PUSH
2017: LD_INT 4
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 36
2027: PUSH
2028: LD_INT 20
2030: PUSH
2031: LD_INT 4
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: LIST
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: LIST
2043: PUSH
2044: LD_INT 72
2046: PUSH
2047: LD_INT 91
2049: PUSH
2050: LD_INT 4
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 65
2060: PUSH
2061: LD_INT 78
2063: PUSH
2064: LD_INT 4
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 75
2074: PUSH
2075: LD_INT 100
2077: PUSH
2078: LD_INT 3
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: LIST
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 102
2093: PUSH
2094: LD_INT 165
2096: PUSH
2097: LD_INT 3
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 122
2107: PUSH
2108: LD_INT 176
2110: PUSH
2111: LD_INT 4
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 120
2121: PUSH
2122: LD_INT 184
2124: PUSH
2125: LD_INT 4
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: LD_INT 134
2140: PUSH
2141: LD_INT 16
2143: PUSH
2144: LD_INT 1
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 132
2154: PUSH
2155: LD_INT 5
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: PUSH
2166: LD_INT 157
2168: PUSH
2169: LD_INT 27
2171: PUSH
2172: LD_INT 5
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: LD_INT 172
2187: PUSH
2188: LD_INT 77
2190: PUSH
2191: LD_INT 1
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: LIST
2198: PUSH
2199: LD_INT 175
2201: PUSH
2202: LD_INT 96
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 192
2215: PUSH
2216: LD_INT 104
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 216
2234: PUSH
2235: LD_INT 179
2237: PUSH
2238: LD_INT 1
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: LIST
2245: PUSH
2246: LD_INT 208
2248: PUSH
2249: LD_INT 160
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 208
2262: PUSH
2263: LD_INT 171
2265: PUSH
2266: LD_INT 2
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: LIST
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: EMPTY
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: ST_TO_ADDR
// for i = 1 to 6 do
2287: LD_ADDR_VAR 0 2
2291: PUSH
2292: DOUBLE
2293: LD_INT 1
2295: DEC
2296: ST_TO_ADDR
2297: LD_INT 6
2299: PUSH
2300: FOR_TO
2301: IFFALSE 2398
// if def_extra_oil_deposits then
2303: LD_EXP 6
2307: IFFALSE 2359
// for j in extra_oil_deposits_locations [ i ] do
2309: LD_ADDR_VAR 0 3
2313: PUSH
2314: LD_EXP 46
2318: PUSH
2319: LD_VAR 0 2
2323: ARRAY
2324: PUSH
2325: FOR_IN
2326: IFFALSE 2355
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2328: LD_VAR 0 3
2332: PUSH
2333: LD_INT 1
2335: ARRAY
2336: PPUSH
2337: LD_VAR 0 3
2341: PUSH
2342: LD_INT 2
2344: ARRAY
2345: PPUSH
2346: LD_INT 2
2348: PPUSH
2349: CALL_OW 62
2353: GO 2325
2355: POP
2356: POP
2357: GO 2396
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2359: LD_EXP 45
2363: PUSH
2364: LD_VAR 0 2
2368: ARRAY
2369: PUSH
2370: LD_INT 1
2372: ARRAY
2373: PPUSH
2374: LD_EXP 45
2378: PUSH
2379: LD_VAR 0 2
2383: ARRAY
2384: PUSH
2385: LD_INT 2
2387: ARRAY
2388: PPUSH
2389: LD_INT 2
2391: PPUSH
2392: CALL_OW 62
2396: GO 2300
2398: POP
2399: POP
// if def_extra_sib_deposits then
2400: LD_EXP 7
2404: IFFALSE 2523
// for i = 1 to 6 do
2406: LD_ADDR_VAR 0 2
2410: PUSH
2411: DOUBLE
2412: LD_INT 1
2414: DEC
2415: ST_TO_ADDR
2416: LD_INT 6
2418: PUSH
2419: FOR_TO
2420: IFFALSE 2521
// if def_extra_sib_deposits = 2 then
2422: LD_EXP 7
2426: PUSH
2427: LD_INT 2
2429: EQUAL
2430: IFFALSE 2482
// for j in extra_sib_deposits_locations [ i ] do
2432: LD_ADDR_VAR 0 3
2436: PUSH
2437: LD_EXP 48
2441: PUSH
2442: LD_VAR 0 2
2446: ARRAY
2447: PUSH
2448: FOR_IN
2449: IFFALSE 2478
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2451: LD_VAR 0 3
2455: PUSH
2456: LD_INT 1
2458: ARRAY
2459: PPUSH
2460: LD_VAR 0 3
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 3
2471: PPUSH
2472: CALL_OW 62
2476: GO 2448
2478: POP
2479: POP
2480: GO 2519
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2482: LD_EXP 47
2486: PUSH
2487: LD_VAR 0 2
2491: ARRAY
2492: PUSH
2493: LD_INT 1
2495: ARRAY
2496: PPUSH
2497: LD_EXP 47
2501: PUSH
2502: LD_VAR 0 2
2506: ARRAY
2507: PUSH
2508: LD_INT 2
2510: ARRAY
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: CALL_OW 62
2519: GO 2419
2521: POP
2522: POP
// end ;
2523: LD_VAR 0 1
2527: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2528: LD_INT 0
2530: PPUSH
2531: PPUSH
2532: PPUSH
// if not Team_Game then
2533: LD_EXP 41
2537: NOT
2538: IFFALSE 2636
// begin for i = 1 to 8 do
2540: LD_ADDR_VAR 0 2
2544: PUSH
2545: DOUBLE
2546: LD_INT 1
2548: DEC
2549: ST_TO_ADDR
2550: LD_INT 8
2552: PUSH
2553: FOR_TO
2554: IFFALSE 2632
// for j = 1 to 8 do
2556: LD_ADDR_VAR 0 3
2560: PUSH
2561: DOUBLE
2562: LD_INT 1
2564: DEC
2565: ST_TO_ADDR
2566: LD_INT 8
2568: PUSH
2569: FOR_TO
2570: IFFALSE 2628
// if i <> j then
2572: LD_VAR 0 2
2576: PUSH
2577: LD_VAR 0 3
2581: NONEQUAL
2582: IFFALSE 2606
// SetAttitude ( i , j , att_neutral , true ) else
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_VAR 0 3
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: CALL_OW 80
2604: GO 2626
// SetAttitude ( i , j , att_friend , true ) ;
2606: LD_VAR 0 2
2610: PPUSH
2611: LD_VAR 0 3
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: CALL_OW 80
2626: GO 2569
2628: POP
2629: POP
2630: GO 2553
2632: POP
2633: POP
// end else
2634: GO 2811
// begin if def_shared_vision then
2636: LD_EXP 8
2640: IFFALSE 2705
// begin for i in Teams do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: LD_EXP 37
2651: PUSH
2652: FOR_IN
2653: IFFALSE 2703
// for j = 2 to i do
2655: LD_ADDR_VAR 0 3
2659: PUSH
2660: DOUBLE
2661: LD_INT 2
2663: DEC
2664: ST_TO_ADDR
2665: LD_VAR 0 2
2669: PUSH
2670: FOR_TO
2671: IFFALSE 2699
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2673: LD_VAR 0 2
2677: PUSH
2678: LD_VAR 0 3
2682: ARRAY
2683: PPUSH
2684: LD_VAR 0 2
2688: PUSH
2689: LD_INT 1
2691: ARRAY
2692: PPUSH
2693: CALL_OW 343
2697: GO 2670
2699: POP
2700: POP
2701: GO 2652
2703: POP
2704: POP
// end ; for i = 1 to 8 do
2705: LD_ADDR_VAR 0 2
2709: PUSH
2710: DOUBLE
2711: LD_INT 1
2713: DEC
2714: ST_TO_ADDR
2715: LD_INT 8
2717: PUSH
2718: FOR_TO
2719: IFFALSE 2809
// for j = 1 to 8 do
2721: LD_ADDR_VAR 0 3
2725: PUSH
2726: DOUBLE
2727: LD_INT 1
2729: DEC
2730: ST_TO_ADDR
2731: LD_INT 8
2733: PUSH
2734: FOR_TO
2735: IFFALSE 2805
// if Side_Teams [ i ] = Side_Teams [ j ] then
2737: LD_EXP 36
2741: PUSH
2742: LD_VAR 0 2
2746: ARRAY
2747: PUSH
2748: LD_EXP 36
2752: PUSH
2753: LD_VAR 0 3
2757: ARRAY
2758: EQUAL
2759: IFFALSE 2783
// SetAttitude ( i , j , att_friend , true ) else
2761: LD_VAR 0 2
2765: PPUSH
2766: LD_VAR 0 3
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: CALL_OW 80
2781: GO 2803
// SetAttitude ( i , j , att_enemy , true ) ;
2783: LD_VAR 0 2
2787: PPUSH
2788: LD_VAR 0 3
2792: PPUSH
2793: LD_INT 2
2795: PPUSH
2796: LD_INT 1
2798: PPUSH
2799: CALL_OW 80
2803: GO 2734
2805: POP
2806: POP
2807: GO 2718
2809: POP
2810: POP
// end ; end ;
2811: LD_VAR 0 1
2815: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2816: LD_INT 0
2818: PPUSH
2819: PPUSH
2820: PPUSH
2821: PPUSH
// result := [ ] ;
2822: LD_ADDR_VAR 0 7
2826: PUSH
2827: EMPTY
2828: ST_TO_ADDR
// for i := 1 to count do
2829: LD_ADDR_VAR 0 8
2833: PUSH
2834: DOUBLE
2835: LD_INT 1
2837: DEC
2838: ST_TO_ADDR
2839: LD_VAR 0 1
2843: PUSH
2844: FOR_TO
2845: IFFALSE 3263
// begin uc_direction := Rand ( 0 , 5 ) ;
2847: LD_ADDR_OWVAR 24
2851: PUSH
2852: LD_INT 0
2854: PPUSH
2855: LD_INT 5
2857: PPUSH
2858: CALL_OW 12
2862: ST_TO_ADDR
// if commander then
2863: LD_LOC 1
2867: IFFALSE 2976
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2869: LD_ADDR_OWVAR 26
2873: PUSH
2874: LD_OWVAR 19
2878: PUSH
2879: LD_OWVAR 20
2883: ARRAY
2884: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2885: LD_INT 1
2887: PPUSH
2888: LD_INT 2
2890: PPUSH
2891: CALL_OW 12
2895: PPUSH
2896: LD_VAR 0 2
2900: PPUSH
2901: LD_EXP 22
2905: PUSH
2906: LD_INT 2
2908: PLUS
2909: PPUSH
2910: CALL_OW 380
// hc_importance := 105 ;
2914: LD_ADDR_OWVAR 32
2918: PUSH
2919: LD_INT 105
2921: ST_TO_ADDR
// commander := false ;
2922: LD_ADDR_LOC 1
2926: PUSH
2927: LD_INT 0
2929: ST_TO_ADDR
// if Multiplayer then
2930: LD_OWVAR 4
2934: IFFALSE 2974
// begin hc_gallery := MULTIAVATARS ;
2936: LD_ADDR_OWVAR 33
2940: PUSH
2941: LD_STRING MULTIAVATARS
2943: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2944: LD_ADDR_OWVAR 34
2948: PUSH
2949: LD_OWVAR 20
2953: PPUSH
2954: CALL_OW 525
2958: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2959: LD_ADDR_OWVAR 27
2963: PUSH
2964: LD_OWVAR 20
2968: PPUSH
2969: CALL_OW 526
2973: ST_TO_ADDR
// end ; end else
2974: GO 3039
// begin hc_name :=  ;
2976: LD_ADDR_OWVAR 26
2980: PUSH
2981: LD_STRING 
2983: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2984: LD_INT 1
2986: PPUSH
2987: LD_INT 2
2989: PPUSH
2990: CALL_OW 12
2994: PPUSH
2995: LD_VAR 0 2
2999: PPUSH
3000: LD_EXP 22
3004: PPUSH
3005: CALL_OW 380
// hc_importance := 0 ;
3009: LD_ADDR_OWVAR 32
3013: PUSH
3014: LD_INT 0
3016: ST_TO_ADDR
// if Multiplayer then
3017: LD_OWVAR 4
3021: IFFALSE 3039
// begin hc_gallery :=  ;
3023: LD_ADDR_OWVAR 33
3027: PUSH
3028: LD_STRING 
3030: ST_TO_ADDR
// hc_face_number := 0 ;
3031: LD_ADDR_OWVAR 34
3035: PUSH
3036: LD_INT 0
3038: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3039: LD_ADDR_VAR 0 10
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if global_defined then
3049: LD_LOC 3
3053: IFFALSE 3193
// begin if ( cl = class_soldier ) then
3055: LD_VAR 0 2
3059: PUSH
3060: LD_INT 1
3062: EQUAL
3063: IFFALSE 3083
// j := i + soldiers_created else
3065: LD_ADDR_VAR 0 9
3069: PUSH
3070: LD_VAR 0 8
3074: PUSH
3075: LD_LOC 4
3079: PLUS
3080: ST_TO_ADDR
3081: GO 3093
// j := i ;
3083: LD_ADDR_VAR 0 9
3087: PUSH
3088: LD_VAR 0 8
3092: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3093: LD_LOC 2
3097: PUSH
3098: LD_VAR 0 2
3102: ARRAY
3103: PUSH
3104: LD_VAR 0 9
3108: ARRAY
3109: PPUSH
3110: LD_VAR 0 10
3114: PPUSH
3115: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3119: LD_VAR 0 10
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: LD_LOC 2
3131: PUSH
3132: LD_VAR 0 2
3136: ARRAY
3137: PUSH
3138: LD_VAR 0 9
3142: ARRAY
3143: PPUSH
3144: LD_INT 2
3146: PPUSH
3147: CALL_OW 260
3151: PPUSH
3152: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3156: LD_VAR 0 10
3160: PPUSH
3161: LD_INT 1
3163: PPUSH
3164: LD_LOC 2
3168: PUSH
3169: LD_VAR 0 2
3173: ARRAY
3174: PUSH
3175: LD_VAR 0 9
3179: ARRAY
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: CALL_OW 260
3188: PPUSH
3189: CALL_OW 239
// end ; if building then
3193: LD_VAR 0 6
3197: IFFALSE 3215
// PlaceHumanInUnit ( un , building ) else
3199: LD_VAR 0 10
3203: PPUSH
3204: LD_VAR 0 6
3208: PPUSH
3209: CALL_OW 52
3213: GO 3242
// PlaceUnitXYR ( un , x , y , r , false ) ;
3215: LD_VAR 0 10
3219: PPUSH
3220: LD_VAR 0 3
3224: PPUSH
3225: LD_VAR 0 4
3229: PPUSH
3230: LD_VAR 0 5
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 50
// result := result ^ [ un ] ;
3242: LD_ADDR_VAR 0 7
3246: PUSH
3247: LD_VAR 0 7
3251: PUSH
3252: LD_VAR 0 10
3256: PUSH
3257: EMPTY
3258: LIST
3259: ADD
3260: ST_TO_ADDR
// end ;
3261: GO 2844
3263: POP
3264: POP
// if not global_defined then
3265: LD_LOC 3
3269: NOT
3270: IFFALSE 3348
// if ( global_units >= cl ) then
3272: LD_LOC 2
3276: PUSH
3277: LD_VAR 0 2
3281: GREATEREQUAL
3282: IFFALSE 3323
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3284: LD_ADDR_LOC 2
3288: PUSH
3289: LD_LOC 2
3293: PPUSH
3294: LD_VAR 0 2
3298: PPUSH
3299: LD_LOC 2
3303: PUSH
3304: LD_VAR 0 2
3308: ARRAY
3309: PUSH
3310: LD_VAR 0 7
3314: ADD
3315: PPUSH
3316: CALL_OW 1
3320: ST_TO_ADDR
3321: GO 3348
// global_units := Replace ( global_units , cl , result ) ;
3323: LD_ADDR_LOC 2
3327: PUSH
3328: LD_LOC 2
3332: PPUSH
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_VAR 0 7
3342: PPUSH
3343: CALL_OW 1
3347: ST_TO_ADDR
// end ;
3348: LD_VAR 0 7
3352: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3353: LD_INT 0
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
3360: PPUSH
3361: PPUSH
3362: PPUSH
3363: PPUSH
// if side in [ 0 , 9 ] then
3364: LD_VAR 0 1
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: LD_INT 9
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: IN
3379: IFFALSE 3383
// exit ;
3381: GO 4400
// pos := Side_Positions [ side ] ;
3383: LD_ADDR_VAR 0 3
3387: PUSH
3388: LD_EXP 39
3392: PUSH
3393: LD_VAR 0 1
3397: ARRAY
3398: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3399: LD_ADDR_OWVAR 21
3403: PUSH
3404: LD_EXP 40
3408: PUSH
3409: LD_VAR 0 1
3413: ARRAY
3414: ST_TO_ADDR
// uc_side := side ;
3415: LD_ADDR_OWVAR 20
3419: PUSH
3420: LD_VAR 0 1
3424: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3425: LD_ADDR_VAR 0 4
3429: PUSH
3430: LD_EXP 42
3434: PUSH
3435: LD_VAR 0 3
3439: ARRAY
3440: PUSH
3441: LD_INT 1
3443: ARRAY
3444: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3445: LD_ADDR_VAR 0 5
3449: PUSH
3450: LD_EXP 42
3454: PUSH
3455: LD_VAR 0 3
3459: ARRAY
3460: PUSH
3461: LD_INT 2
3463: ARRAY
3464: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3465: LD_ADDR_VAR 0 6
3469: PUSH
3470: LD_EXP 42
3474: PUSH
3475: LD_VAR 0 3
3479: ARRAY
3480: PUSH
3481: LD_INT 3
3483: ARRAY
3484: ST_TO_ADDR
// if is_depot then
3485: LD_EXP 19
3489: IFFALSE 3622
// begin bc_type = b_depot ;
3491: LD_ADDR_OWVAR 42
3495: PUSH
3496: LD_INT 0
3498: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3499: LD_ADDR_VAR 0 10
3503: PUSH
3504: LD_VAR 0 4
3508: PPUSH
3509: LD_VAR 0 5
3513: PPUSH
3514: LD_VAR 0 6
3518: PPUSH
3519: CALL_OW 47
3523: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3524: LD_VAR 0 10
3528: PPUSH
3529: LD_STRING @
3531: PUSH
3532: LD_VAR 0 1
3536: STR
3537: PPUSH
3538: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3542: LD_VAR 0 10
3546: PPUSH
3547: CALL_OW 274
3551: PPUSH
3552: LD_INT 1
3554: PPUSH
3555: LD_EXP 24
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3568: LD_VAR 0 10
3572: PPUSH
3573: CALL_OW 274
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: LD_EXP 24
3585: PUSH
3586: LD_INT 2
3588: ARRAY
3589: PPUSH
3590: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3594: LD_VAR 0 10
3598: PPUSH
3599: CALL_OW 274
3603: PPUSH
3604: LD_INT 3
3606: PPUSH
3607: LD_EXP 24
3611: PUSH
3612: LD_INT 3
3614: ARRAY
3615: PPUSH
3616: CALL_OW 277
// end else
3620: GO 3766
// begin for i := 1 to 3 do
3622: LD_ADDR_VAR 0 7
3626: PUSH
3627: DOUBLE
3628: LD_INT 1
3630: DEC
3631: ST_TO_ADDR
3632: LD_INT 3
3634: PUSH
3635: FOR_TO
3636: IFFALSE 3764
// begin r := starting_resources [ i ] ;
3638: LD_ADDR_VAR 0 8
3642: PUSH
3643: LD_EXP 24
3647: PUSH
3648: LD_VAR 0 7
3652: ARRAY
3653: ST_TO_ADDR
// while r >= 10 do
3654: LD_VAR 0 8
3658: PUSH
3659: LD_INT 10
3661: GREATEREQUAL
3662: IFFALSE 3762
// if r > 50 then
3664: LD_VAR 0 8
3668: PUSH
3669: LD_INT 50
3671: GREATER
3672: IFFALSE 3718
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3674: LD_VAR 0 7
3678: PPUSH
3679: LD_INT 5
3681: PPUSH
3682: LD_VAR 0 4
3686: PPUSH
3687: LD_VAR 0 5
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_INT 0
3697: PPUSH
3698: CALL_OW 60
// r := r - 50 ;
3702: LD_ADDR_VAR 0 8
3706: PUSH
3707: LD_VAR 0 8
3711: PUSH
3712: LD_INT 50
3714: MINUS
3715: ST_TO_ADDR
// end else
3716: GO 3760
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3718: LD_VAR 0 7
3722: PPUSH
3723: LD_VAR 0 8
3727: PUSH
3728: LD_INT 10
3730: DIV
3731: PPUSH
3732: LD_VAR 0 4
3736: PPUSH
3737: LD_VAR 0 5
3741: PPUSH
3742: LD_INT 4
3744: PPUSH
3745: LD_INT 0
3747: PPUSH
3748: CALL_OW 60
// r := 0 ;
3752: LD_ADDR_VAR 0 8
3756: PUSH
3757: LD_INT 0
3759: ST_TO_ADDR
// end ;
3760: GO 3654
// end ;
3762: GO 3635
3764: POP
3765: POP
// end ; for r in starting_crates do
3766: LD_ADDR_VAR 0 8
3770: PUSH
3771: LD_EXP 23
3775: PUSH
3776: FOR_IN
3777: IFFALSE 3809
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 5
3784: PPUSH
3785: LD_VAR 0 4
3789: PPUSH
3790: LD_VAR 0 5
3794: PPUSH
3795: LD_VAR 0 8
3799: PPUSH
3800: LD_INT 0
3802: PPUSH
3803: CALL_OW 60
3807: GO 3776
3809: POP
3810: POP
// if def_morale_flags then
3811: LD_EXP 9
3815: IFFALSE 3954
// begin x := start_def [ pos ] [ 1 ] ;
3817: LD_ADDR_VAR 0 4
3821: PUSH
3822: LD_EXP 44
3826: PUSH
3827: LD_VAR 0 3
3831: ARRAY
3832: PUSH
3833: LD_INT 1
3835: ARRAY
3836: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3837: LD_ADDR_VAR 0 5
3841: PUSH
3842: LD_EXP 44
3846: PUSH
3847: LD_VAR 0 3
3851: ARRAY
3852: PUSH
3853: LD_INT 2
3855: ARRAY
3856: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3857: LD_VAR 0 4
3861: PPUSH
3862: LD_VAR 0 5
3866: PPUSH
3867: LD_INT 12
3869: PPUSH
3870: LD_INT 2
3872: PPUSH
3873: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3877: LD_ADDR_EXP 49
3881: PUSH
3882: LD_EXP 49
3886: PUSH
3887: LD_VAR 0 1
3891: PPUSH
3892: LD_VAR 0 4
3896: PPUSH
3897: LD_VAR 0 5
3901: PPUSH
3902: LD_INT 1
3904: PUSH
3905: LD_INT 100
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: LD_INT 50
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_INT 3
3924: PUSH
3925: LD_INT 20
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: PUSH
3932: LD_INT 20
3934: PUSH
3935: LD_INT 100
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PPUSH
3948: CALL_OW 418
3952: ADD
3953: ST_TO_ADDR
// end ; commander := true ;
3954: LD_ADDR_LOC 1
3958: PUSH
3959: LD_INT 1
3961: ST_TO_ADDR
// soldiers_created := 0 ;
3962: LD_ADDR_LOC 4
3966: PUSH
3967: LD_INT 0
3969: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3970: LD_ADDR_VAR 0 7
3974: PUSH
3975: DOUBLE
3976: LD_INT 1
3978: DEC
3979: ST_TO_ADDR
3980: LD_EXP 20
3984: PUSH
3985: FOR_TO
3986: IFFALSE 4139
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3988: LD_ADDR_VAR 0 4
3992: PUSH
3993: LD_EXP 43
3997: PUSH
3998: LD_VAR 0 3
4002: ARRAY
4003: PUSH
4004: LD_VAR 0 7
4008: ARRAY
4009: PUSH
4010: LD_INT 1
4012: ARRAY
4013: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4014: LD_ADDR_VAR 0 5
4018: PUSH
4019: LD_EXP 43
4023: PUSH
4024: LD_VAR 0 3
4028: ARRAY
4029: PUSH
4030: LD_VAR 0 7
4034: ARRAY
4035: PUSH
4036: LD_INT 2
4038: ARRAY
4039: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4040: LD_ADDR_VAR 0 6
4044: PUSH
4045: LD_EXP 43
4049: PUSH
4050: LD_VAR 0 3
4054: ARRAY
4055: PUSH
4056: LD_VAR 0 7
4060: ARRAY
4061: PUSH
4062: LD_INT 3
4064: ARRAY
4065: ST_TO_ADDR
// bc_type := b_breastwork ;
4066: LD_ADDR_OWVAR 42
4070: PUSH
4071: LD_INT 31
4073: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4074: LD_ADDR_VAR 0 9
4078: PUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_VAR 0 5
4088: PPUSH
4089: LD_VAR 0 6
4093: PPUSH
4094: CALL_OW 47
4098: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4099: LD_INT 1
4101: PPUSH
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 0
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: LD_INT 0
4113: PPUSH
4114: LD_VAR 0 9
4118: PPUSH
4119: CALL 2816 0 6
// soldiers_created := soldiers_created + 1 ;
4123: LD_ADDR_LOC 4
4127: PUSH
4128: LD_LOC 4
4132: PUSH
4133: LD_INT 1
4135: PLUS
4136: ST_TO_ADDR
// end ;
4137: GO 3985
4139: POP
4140: POP
// x := start_def [ pos ] [ 1 ] ;
4141: LD_ADDR_VAR 0 4
4145: PUSH
4146: LD_EXP 44
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_INT 1
4159: ARRAY
4160: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4161: LD_ADDR_VAR 0 5
4165: PUSH
4166: LD_EXP 44
4170: PUSH
4171: LD_VAR 0 3
4175: ARRAY
4176: PUSH
4177: LD_INT 2
4179: ARRAY
4180: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4181: LD_LOC 8
4185: PUSH
4186: LD_EXP 20
4190: MINUS
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: LD_VAR 0 4
4199: PPUSH
4200: LD_VAR 0 5
4204: PPUSH
4205: LD_INT 5
4207: PPUSH
4208: LD_INT 0
4210: PPUSH
4211: CALL 2816 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4215: LD_LOC 5
4219: PPUSH
4220: LD_INT 2
4222: PPUSH
4223: LD_VAR 0 4
4227: PPUSH
4228: LD_VAR 0 5
4232: PPUSH
4233: LD_INT 5
4235: PPUSH
4236: LD_INT 0
4238: PPUSH
4239: CALL 2816 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4243: LD_LOC 7
4247: PPUSH
4248: LD_INT 3
4250: PPUSH
4251: LD_VAR 0 4
4255: PPUSH
4256: LD_VAR 0 5
4260: PPUSH
4261: LD_INT 5
4263: PPUSH
4264: LD_INT 0
4266: PPUSH
4267: CALL 2816 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4271: LD_LOC 6
4275: PPUSH
4276: LD_INT 4
4278: PPUSH
4279: LD_VAR 0 4
4283: PPUSH
4284: LD_VAR 0 5
4288: PPUSH
4289: LD_INT 5
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL 2816 0 6
// if def_siberite_detection then
4299: LD_EXP 10
4303: IFFALSE 4320
// SetTech ( tech_SibDet , side , state_researched ) ;
4305: LD_INT 20
4307: PPUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_INT 2
4315: PPUSH
4316: CALL_OW 322
// if def_siberite_bomb = 1 then
4320: LD_EXP 15
4324: PUSH
4325: LD_INT 1
4327: EQUAL
4328: IFFALSE 4362
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4330: LD_INT 25
4332: PPUSH
4333: LD_VAR 0 1
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4345: LD_INT 73
4347: PPUSH
4348: LD_VAR 0 1
4352: PPUSH
4353: LD_INT 1
4355: PPUSH
4356: CALL_OW 322
// end else
4360: GO 4392
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4362: LD_INT 25
4364: PPUSH
4365: LD_VAR 0 1
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4377: LD_INT 73
4379: PPUSH
4380: LD_VAR 0 1
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL_OW 322
// end ; global_defined := true ;
4392: LD_ADDR_LOC 3
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// end ;
4400: LD_VAR 0 2
4404: RET
// every 0 0$1 do
4405: GO 4407
4407: DISABLE
// if ( def_siberite_bomb > 1 ) then
4408: LD_EXP 15
4412: PUSH
4413: LD_INT 1
4415: GREATER
4416: IFFALSE 4431
// begin wait ( siberite_bomb_Delay ) ;
4418: LD_EXP 33
4422: PPUSH
4423: CALL_OW 67
// EnableSibFiss ;
4427: CALL 4432 0 0
// end ;
4431: END
// function EnableSibFiss ; var i ; begin
4432: LD_INT 0
4434: PPUSH
4435: PPUSH
// for i := 1 to 8 do
4436: LD_ADDR_VAR 0 2
4440: PUSH
4441: DOUBLE
4442: LD_INT 1
4444: DEC
4445: ST_TO_ADDR
4446: LD_INT 8
4448: PUSH
4449: FOR_TO
4450: IFFALSE 4496
// if Side_Positions [ i ] then
4452: LD_EXP 39
4456: PUSH
4457: LD_VAR 0 2
4461: ARRAY
4462: IFFALSE 4494
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4464: LD_INT 25
4466: PPUSH
4467: LD_VAR 0 2
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4479: LD_INT 73
4481: PPUSH
4482: LD_VAR 0 2
4486: PPUSH
4487: LD_INT 1
4489: PPUSH
4490: CALL_OW 322
// end ;
4494: GO 4449
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// function prepare_sides ; var i ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
// global_units := [ ] ;
4507: LD_ADDR_LOC 2
4511: PUSH
4512: EMPTY
4513: ST_TO_ADDR
// global_defined := false ;
4514: LD_ADDR_LOC 3
4518: PUSH
4519: LD_INT 0
4521: ST_TO_ADDR
// CountClassMembers ;
4522: CALL 4572 0 0
// for i := 1 to 8 do
4526: LD_ADDR_VAR 0 2
4530: PUSH
4531: DOUBLE
4532: LD_INT 1
4534: DEC
4535: ST_TO_ADDR
4536: LD_INT 8
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4565
// if Side_Positions [ i ] then
4542: LD_EXP 39
4546: PUSH
4547: LD_VAR 0 2
4551: ARRAY
4552: IFFALSE 4563
// prepare_side ( i ) ;
4554: LD_VAR 0 2
4558: PPUSH
4559: CALL 3353 0 1
4563: GO 4539
4565: POP
4566: POP
// end ;
4567: LD_VAR 0 1
4571: RET
// function CountClassMembers ; var Mode ; begin
4572: LD_INT 0
4574: PPUSH
4575: PPUSH
// if No_Mechs then
4576: LD_EXP 17
4580: IFFALSE 4592
// Mode := 2 else
4582: LD_ADDR_VAR 0 2
4586: PUSH
4587: LD_INT 2
4589: ST_TO_ADDR
4590: GO 4600
// Mode := 1 ;
4592: LD_ADDR_VAR 0 2
4596: PUSH
4597: LD_INT 1
4599: ST_TO_ADDR
// neng := number_of_people ;
4600: LD_ADDR_LOC 5
4604: PUSH
4605: LD_EXP 21
4609: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4610: LD_ADDR_LOC 8
4614: PUSH
4615: LD_LOC 5
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: LD_INT 3
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_VAR 0 2
4634: ARRAY
4635: DIV
4636: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4637: LD_LOC 8
4641: PUSH
4642: LD_EXP 20
4646: LESS
4647: IFFALSE 4659
// nsol := number_of_breastworks ;
4649: LD_ADDR_LOC 8
4653: PUSH
4654: LD_EXP 20
4658: ST_TO_ADDR
// neng := neng - nsol ;
4659: LD_ADDR_LOC 5
4663: PUSH
4664: LD_LOC 5
4668: PUSH
4669: LD_LOC 8
4673: MINUS
4674: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4675: LD_ADDR_LOC 6
4679: PUSH
4680: LD_LOC 5
4684: PUSH
4685: LD_INT 3
4687: PUSH
4688: LD_INT 2
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_VAR 0 2
4699: ARRAY
4700: DIV
4701: ST_TO_ADDR
// if ( nsci < 1 ) then
4702: LD_LOC 6
4706: PUSH
4707: LD_INT 1
4709: LESS
4710: IFFALSE 4720
// nsci := 1 ;
4712: LD_ADDR_LOC 6
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// neng := neng - nsci ;
4720: LD_ADDR_LOC 5
4724: PUSH
4725: LD_LOC 5
4729: PUSH
4730: LD_LOC 6
4734: MINUS
4735: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4736: LD_ADDR_LOC 7
4740: PUSH
4741: LD_LOC 5
4745: PUSH
4746: LD_INT 2
4748: DIV
4749: PUSH
4750: LD_INT 0
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_VAR 0 2
4761: ARRAY
4762: ST_TO_ADDR
// neng := neng - nmech ;
4763: LD_ADDR_LOC 5
4767: PUSH
4768: LD_LOC 5
4772: PUSH
4773: LD_LOC 7
4777: MINUS
4778: ST_TO_ADDR
// if ( neng < 1 ) then
4779: LD_LOC 5
4783: PUSH
4784: LD_INT 1
4786: LESS
4787: IFFALSE 4797
// neng := 1 ;
4789: LD_ADDR_LOC 5
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// end ;
4797: LD_VAR 0 1
4801: RET
// function Init_Win_Condition ; begin
4802: LD_INT 0
4804: PPUSH
// if Team_Game then
4805: LD_EXP 41
4809: IFFALSE 4816
// enable ( 98 ) else
4811: LD_INT 98
4813: ENABLE_MARKED
4814: GO 4819
// enable ( 99 ) ;
4816: LD_INT 99
4818: ENABLE_MARKED
// case Game_Type of 3 :
4819: LD_EXP 18
4823: PUSH
4824: LD_INT 3
4826: DOUBLE
4827: EQUAL
4828: IFTRUE 4832
4830: GO 4838
4832: POP
// enable ( 100 ) ; end ;
4833: LD_INT 100
4835: ENABLE_MARKED
4836: GO 4839
4838: POP
// end ;
4839: LD_VAR 0 1
4843: RET
// starting begin disable ( 98 ) ;
4844: LD_INT 98
4846: DISABLE_MARKED
// disable ( 99 ) ;
4847: LD_INT 99
4849: DISABLE_MARKED
// disable ( 400 ) ;
4850: LD_INT 400
4852: DISABLE_MARKED
// disable ( 401 ) ;
4853: LD_INT 401
4855: DISABLE_MARKED
// mp_selectmsg := true ;
4856: LD_ADDR_OWVAR 13
4860: PUSH
4861: LD_INT 1
4863: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4864: CALL 68 0 0
// init_map ;
4868: CALL 1357 0 0
// init_respawning ;
4872: CALL 12413 0 0
// set_shared_visions_and_alliances ;
4876: CALL 2528 0 0
// prepare_sides ;
4880: CALL 4503 0 0
// ShowTimer ;
4884: CALL 7267 0 0
// music_nat := Side_Nations [ your_side ] ;
4888: LD_ADDR_OWVAR 71
4892: PUSH
4893: LD_EXP 40
4897: PUSH
4898: LD_OWVAR 2
4902: ARRAY
4903: ST_TO_ADDR
// if IAmSpec then
4904: CALL_OW 531
4908: IFFALSE 4944
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4910: LD_INT 0
4912: PPUSH
4913: LD_INT 0
4915: PPUSH
4916: LD_OWVAR 2
4920: PPUSH
4921: LD_INT 32767
4923: NEG
4924: PPUSH
4925: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
4929: LD_INT 104
4931: PPUSH
4932: LD_INT 69
4934: PPUSH
4935: CALL_OW 86
// enable ( 400 ) ;
4939: LD_INT 400
4941: ENABLE_MARKED
// end else
4942: GO 4998
// begin ResetFog ;
4944: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4948: LD_EXP 44
4952: PUSH
4953: LD_EXP 39
4957: PUSH
4958: LD_OWVAR 2
4962: ARRAY
4963: ARRAY
4964: PUSH
4965: LD_INT 1
4967: ARRAY
4968: PPUSH
4969: LD_EXP 44
4973: PUSH
4974: LD_EXP 39
4978: PUSH
4979: LD_OWVAR 2
4983: ARRAY
4984: ARRAY
4985: PUSH
4986: LD_INT 2
4988: ARRAY
4989: PPUSH
4990: CALL_OW 86
// Init_Win_Condition ;
4994: CALL 4802 0 0
// end ; AnimateTrees ( true ) ;
4998: LD_INT 1
5000: PPUSH
5001: CALL_OW 573
// InitApeman ;
5005: CALL 5783 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
5009: LD_ADDR_EXP 60
5013: PUSH
5014: LD_INT 7
5016: PUSH
5017: LD_INT 8
5019: PUSH
5020: LD_INT 9
5022: PUSH
5023: LD_INT 10
5025: PUSH
5026: LD_INT 11
5028: PUSH
5029: LD_INT 12
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// BeginBuildUp ;
5040: CALL 12907 0 0
// end ; end_of_file
5044: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5045: GO 5047
5047: DISABLE
// begin CreateCratesArea ( rand ( 1 , 5 ) , MZBaseArea , true ) ;
5048: LD_INT 1
5050: PPUSH
5051: LD_INT 5
5053: PPUSH
5054: CALL_OW 12
5058: PPUSH
5059: LD_INT 14
5061: PPUSH
5062: LD_INT 1
5064: PPUSH
5065: CALL_OW 55
// enable ;
5069: ENABLE
// end ;
5070: END
// every 1 1$0 marked 10 do
5071: GO 5073
5073: DISABLE
// begin repeat wait ( shipments_density / 100 * rand ( 0 0$50 , 1 1$00 ) ) ;
5074: LD_EXP 25
5078: PUSH
5079: LD_INT 100
5081: DIVREAL
5082: PUSH
5083: LD_INT 1750
5085: PPUSH
5086: LD_INT 2100
5088: PPUSH
5089: CALL_OW 12
5093: MUL
5094: PPUSH
5095: CALL_OW 67
// if GetResourceArea ( MZSpecialArea , mat_cans ) < 30 then
5099: LD_INT 15
5101: PPUSH
5102: LD_INT 1
5104: PPUSH
5105: CALL_OW 287
5109: PUSH
5110: LD_INT 30
5112: LESS
5113: IFFALSE 5136
// CreateCratesArea ( Rand ( 3 , 5 ) , MZSpecialArea , true ) ;
5115: LD_INT 3
5117: PPUSH
5118: LD_INT 5
5120: PPUSH
5121: CALL_OW 12
5125: PPUSH
5126: LD_INT 15
5128: PPUSH
5129: LD_INT 1
5131: PPUSH
5132: CALL_OW 55
// until tick >= 300 300$00 ;
5136: LD_OWVAR 1
5140: PUSH
5141: LD_INT 630000
5143: GREATEREQUAL
5144: IFFALSE 5074
// end ;
5146: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5147: GO 5149
5149: DISABLE
5150: LD_INT 0
5152: PPUSH
5153: PPUSH
// begin case tick of 1 .. 1 1$0 :
5154: LD_OWVAR 1
5158: PUSH
5159: LD_INT 1
5161: DOUBLE
5162: GREATEREQUAL
5163: IFFALSE 5171
5165: LD_INT 2100
5167: DOUBLE
5168: LESSEQUAL
5169: IFTRUE 5173
5171: GO 5201
5173: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5174: LD_EXP 25
5178: PUSH
5179: LD_INT 100
5181: DIVREAL
5182: PUSH
5183: LD_INT 525
5185: PPUSH
5186: LD_INT 700
5188: PPUSH
5189: CALL_OW 12
5193: MUL
5194: PPUSH
5195: CALL_OW 67
5199: GO 5503
5201: LD_INT 2100
5203: PUSH
5204: LD_INT 1
5206: PLUS
5207: DOUBLE
5208: GREATEREQUAL
5209: IFFALSE 5217
5211: LD_INT 10500
5213: DOUBLE
5214: LESSEQUAL
5215: IFTRUE 5219
5217: GO 5247
5219: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$40 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5220: LD_EXP 25
5224: PUSH
5225: LD_INT 100
5227: DIVREAL
5228: PUSH
5229: LD_INT 700
5231: PPUSH
5232: LD_INT 1400
5234: PPUSH
5235: CALL_OW 12
5239: MUL
5240: PPUSH
5241: CALL_OW 67
5245: GO 5503
5247: LD_INT 10500
5249: PUSH
5250: LD_INT 1
5252: PLUS
5253: DOUBLE
5254: GREATEREQUAL
5255: IFFALSE 5263
5257: LD_INT 21000
5259: DOUBLE
5260: LESSEQUAL
5261: IFTRUE 5265
5263: GO 5293
5265: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$40 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5266: LD_EXP 25
5270: PUSH
5271: LD_INT 100
5273: DIVREAL
5274: PUSH
5275: LD_INT 1400
5277: PPUSH
5278: LD_INT 1750
5280: PPUSH
5281: CALL_OW 12
5285: MUL
5286: PPUSH
5287: CALL_OW 67
5291: GO 5503
5293: LD_INT 21000
5295: PUSH
5296: LD_INT 1
5298: PLUS
5299: DOUBLE
5300: GREATEREQUAL
5301: IFFALSE 5309
5303: LD_INT 42000
5305: DOUBLE
5306: LESSEQUAL
5307: IFTRUE 5311
5309: GO 5339
5311: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5312: LD_EXP 25
5316: PUSH
5317: LD_INT 100
5319: DIVREAL
5320: PUSH
5321: LD_INT 1750
5323: PPUSH
5324: LD_INT 2100
5326: PPUSH
5327: CALL_OW 12
5331: MUL
5332: PPUSH
5333: CALL_OW 67
5337: GO 5503
5339: LD_INT 42000
5341: PUSH
5342: LD_INT 1
5344: PLUS
5345: DOUBLE
5346: GREATEREQUAL
5347: IFFALSE 5355
5349: LD_INT 63000
5351: DOUBLE
5352: LESSEQUAL
5353: IFTRUE 5357
5355: GO 5385
5357: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5358: LD_EXP 25
5362: PUSH
5363: LD_INT 100
5365: DIVREAL
5366: PUSH
5367: LD_INT 2100
5369: PPUSH
5370: LD_INT 2450
5372: PPUSH
5373: CALL_OW 12
5377: MUL
5378: PPUSH
5379: CALL_OW 67
5383: GO 5503
5385: LD_INT 63000
5387: PUSH
5388: LD_INT 1
5390: PLUS
5391: DOUBLE
5392: GREATEREQUAL
5393: IFFALSE 5401
5395: LD_INT 105000
5397: DOUBLE
5398: LESSEQUAL
5399: IFTRUE 5403
5401: GO 5431
5403: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5404: LD_EXP 25
5408: PUSH
5409: LD_INT 100
5411: DIVREAL
5412: PUSH
5413: LD_INT 2450
5415: PPUSH
5416: LD_INT 2800
5418: PPUSH
5419: CALL_OW 12
5423: MUL
5424: PPUSH
5425: CALL_OW 67
5429: GO 5503
5431: LD_INT 105000
5433: PUSH
5434: LD_INT 1
5436: PLUS
5437: DOUBLE
5438: GREATEREQUAL
5439: IFFALSE 5447
5441: LD_INT 630000
5443: DOUBLE
5444: LESSEQUAL
5445: IFTRUE 5449
5447: GO 5477
5449: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$30 ) ) ; else
5450: LD_EXP 25
5454: PUSH
5455: LD_INT 100
5457: DIVREAL
5458: PUSH
5459: LD_INT 2800
5461: PPUSH
5462: LD_INT 3150
5464: PPUSH
5465: CALL_OW 12
5469: MUL
5470: PPUSH
5471: CALL_OW 67
5475: GO 5503
5477: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5478: LD_EXP 25
5482: PUSH
5483: LD_INT 100
5485: DIVREAL
5486: PUSH
5487: LD_INT 3500
5489: PPUSH
5490: LD_INT 3850
5492: PPUSH
5493: CALL_OW 12
5497: MUL
5498: PPUSH
5499: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5503: LD_ADDR_VAR 0 2
5507: PUSH
5508: LD_INT 3
5510: PPUSH
5511: LD_INT 5
5513: PPUSH
5514: CALL_OW 12
5518: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5519: LD_ADDR_VAR 0 1
5523: PUSH
5524: LD_EXP 39
5528: PUSH
5529: LD_INT 0
5531: PUSH
5532: EMPTY
5533: LIST
5534: DIFF
5535: PUSH
5536: FOR_IN
5537: IFFALSE 5586
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 12 , true ) ;
5539: LD_VAR 0 2
5543: PPUSH
5544: LD_EXP 44
5548: PUSH
5549: LD_VAR 0 1
5553: ARRAY
5554: PUSH
5555: LD_INT 1
5557: ARRAY
5558: PPUSH
5559: LD_EXP 44
5563: PUSH
5564: LD_VAR 0 1
5568: ARRAY
5569: PUSH
5570: LD_INT 2
5572: ARRAY
5573: PPUSH
5574: LD_INT 12
5576: PPUSH
5577: LD_INT 1
5579: PPUSH
5580: CALL_OW 56
5584: GO 5536
5586: POP
5587: POP
// enable ;
5588: ENABLE
// end ; end_of_file
5589: PPOPN 2
5591: END
// every 20 20$00 trigger apemanNumber do
5592: LD_EXP 51
5596: IFFALSE 5629
5598: GO 5600
5600: DISABLE
// begin enable ;
5601: ENABLE
// if apeLevel >= 8 then
5602: LD_EXP 56
5606: PUSH
5607: LD_INT 8
5609: GREATEREQUAL
5610: IFFALSE 5615
// disable else
5612: DISABLE
5613: GO 5629
// apeLevel := apeLevel + 1 ;
5615: LD_ADDR_EXP 56
5619: PUSH
5620: LD_EXP 56
5624: PUSH
5625: LD_INT 1
5627: PLUS
5628: ST_TO_ADDR
// end ;
5629: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5630: LD_EXP 51
5634: PUSH
5635: LD_EXP 52
5639: LESS
5640: IFFALSE 5780
5642: GO 5644
5644: DISABLE
5645: LD_INT 0
5647: PPUSH
5648: PPUSH
5649: PPUSH
5650: PPUSH
// begin enable ;
5651: ENABLE
// for i := 1 to apemanPos do
5652: LD_ADDR_VAR 0 1
5656: PUSH
5657: DOUBLE
5658: LD_INT 1
5660: DEC
5661: ST_TO_ADDR
5662: LD_EXP 54
5666: PUSH
5667: FOR_TO
5668: IFFALSE 5778
// begin if apemanPlayerCount [ i ] then
5670: LD_EXP 55
5674: PUSH
5675: LD_VAR 0 1
5679: ARRAY
5680: IFFALSE 5776
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5682: LD_EXP 55
5686: PUSH
5687: LD_VAR 0 1
5691: ARRAY
5692: PUSH
5693: LD_EXP 54
5697: PUSH
5698: LD_VAR 0 1
5702: ARRAY
5703: GREATER
5704: IFFALSE 5776
// begin ape := PrepareApeman ;
5706: LD_ADDR_VAR 0 2
5710: PUSH
5711: CALL 6291 0 0
5715: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5716: LD_VAR 0 2
5720: PPUSH
5721: LD_EXP 57
5725: PUSH
5726: LD_VAR 0 1
5730: ARRAY
5731: PPUSH
5732: LD_INT 0
5734: PPUSH
5735: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5739: LD_ADDR_EXP 54
5743: PUSH
5744: LD_EXP 54
5748: PPUSH
5749: LD_VAR 0 1
5753: PPUSH
5754: LD_EXP 54
5758: PUSH
5759: LD_VAR 0 1
5763: ARRAY
5764: PUSH
5765: LD_VAR 0 2
5769: UNION
5770: PPUSH
5771: CALL_OW 1
5775: ST_TO_ADDR
// end ; end ; end ;
5776: GO 5667
5778: POP
5779: POP
// end ;
5780: PPOPN 4
5782: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5783: LD_INT 0
5785: PPUSH
5786: PPUSH
5787: PPUSH
5788: PPUSH
5789: PPUSH
5790: PPUSH
5791: PPUSH
// playersAmount := 0 ;
5792: LD_ADDR_VAR 0 3
5796: PUSH
5797: LD_INT 0
5799: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5800: LD_ADDR_VAR 0 7
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: LD_INT 2
5810: PUSH
5811: LD_INT 1
5813: PUSH
5814: LD_INT 4
5816: PUSH
5817: LD_INT 6
5819: PUSH
5820: LD_INT 5
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5831: LD_ADDR_EXP 57
5835: PUSH
5836: LD_INT 0
5838: PUSH
5839: LD_INT 0
5841: PUSH
5842: LD_INT 0
5844: PUSH
5845: LD_INT 0
5847: PUSH
5848: LD_INT 0
5850: PUSH
5851: LD_INT 0
5853: PUSH
5854: LD_INT 0
5856: PUSH
5857: LD_INT 0
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: ST_TO_ADDR
// for j = 1 to Side_Positions do
5870: LD_ADDR_VAR 0 4
5874: PUSH
5875: DOUBLE
5876: LD_INT 1
5878: DEC
5879: ST_TO_ADDR
5880: LD_EXP 39
5884: PUSH
5885: FOR_TO
5886: IFFALSE 5953
// if Side_Positions [ j ] then
5888: LD_EXP 39
5892: PUSH
5893: LD_VAR 0 4
5897: ARRAY
5898: IFFALSE 5951
// begin playersAmount := playersAmount + 1 ;
5900: LD_ADDR_VAR 0 3
5904: PUSH
5905: LD_VAR 0 3
5909: PUSH
5910: LD_INT 1
5912: PLUS
5913: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5914: LD_ADDR_EXP 57
5918: PUSH
5919: LD_EXP 57
5923: PPUSH
5924: LD_VAR 0 4
5928: PPUSH
5929: LD_VAR 0 7
5933: PUSH
5934: LD_EXP 39
5938: PUSH
5939: LD_VAR 0 4
5943: ARRAY
5944: ARRAY
5945: PPUSH
5946: CALL_OW 1
5950: ST_TO_ADDR
// end ;
5951: GO 5885
5953: POP
5954: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5955: LD_ADDR_EXP 53
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: LD_EXP 27
5967: MUL
5968: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5969: LD_ADDR_EXP 51
5973: PUSH
5974: LD_VAR 0 3
5978: PUSH
5979: LD_EXP 53
5983: MUL
5984: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5985: LD_ADDR_EXP 52
5989: PUSH
5990: LD_EXP 51
5994: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5995: LD_ADDR_EXP 54
5999: PUSH
6000: LD_INT 0
6002: PUSH
6003: LD_INT 0
6005: PUSH
6006: LD_INT 0
6008: PUSH
6009: LD_INT 0
6011: PUSH
6012: LD_INT 0
6014: PUSH
6015: LD_INT 0
6017: PUSH
6018: LD_INT 0
6020: PUSH
6021: LD_INT 0
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6034: LD_ADDR_EXP 55
6038: PUSH
6039: LD_INT 0
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 0
6050: PUSH
6051: LD_INT 0
6053: PUSH
6054: LD_INT 0
6056: PUSH
6057: LD_INT 0
6059: PUSH
6060: LD_INT 0
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: ST_TO_ADDR
// apeLevel := 1 ;
6073: LD_ADDR_EXP 56
6077: PUSH
6078: LD_INT 1
6080: ST_TO_ADDR
// if not apemanNumber then
6081: LD_EXP 51
6085: NOT
6086: IFFALSE 6090
// exit ;
6088: GO 6286
// for i := 1 to apemanPerPlayer do
6090: LD_ADDR_VAR 0 2
6094: PUSH
6095: DOUBLE
6096: LD_INT 1
6098: DEC
6099: ST_TO_ADDR
6100: LD_EXP 53
6104: PUSH
6105: FOR_TO
6106: IFFALSE 6284
// begin for j := 1 to Side_Positions do
6108: LD_ADDR_VAR 0 4
6112: PUSH
6113: DOUBLE
6114: LD_INT 1
6116: DEC
6117: ST_TO_ADDR
6118: LD_EXP 39
6122: PUSH
6123: FOR_TO
6124: IFFALSE 6280
// if Side_Positions [ j ] then
6126: LD_EXP 39
6130: PUSH
6131: LD_VAR 0 4
6135: ARRAY
6136: IFFALSE 6278
// begin pos := Side_Positions [ j ] ;
6138: LD_ADDR_VAR 0 6
6142: PUSH
6143: LD_EXP 39
6147: PUSH
6148: LD_VAR 0 4
6152: ARRAY
6153: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6154: LD_ADDR_EXP 55
6158: PUSH
6159: LD_EXP 55
6163: PPUSH
6164: LD_VAR 0 4
6168: PPUSH
6169: LD_EXP 55
6173: PUSH
6174: LD_VAR 0 4
6178: ARRAY
6179: PUSH
6180: LD_INT 1
6182: PLUS
6183: PPUSH
6184: CALL_OW 1
6188: ST_TO_ADDR
// ape := PrepareApeman ;
6189: LD_ADDR_VAR 0 5
6193: PUSH
6194: CALL 6291 0 0
6198: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6199: LD_ADDR_EXP 54
6203: PUSH
6204: LD_EXP 54
6208: PPUSH
6209: LD_VAR 0 4
6213: PPUSH
6214: LD_EXP 54
6218: PUSH
6219: LD_VAR 0 4
6223: ARRAY
6224: PPUSH
6225: LD_EXP 54
6229: PUSH
6230: LD_VAR 0 4
6234: ARRAY
6235: PUSH
6236: LD_INT 1
6238: PLUS
6239: PPUSH
6240: LD_VAR 0 5
6244: PPUSH
6245: CALL_OW 1
6249: PPUSH
6250: CALL_OW 1
6254: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6255: LD_VAR 0 5
6259: PPUSH
6260: LD_EXP 57
6264: PUSH
6265: LD_VAR 0 4
6269: ARRAY
6270: PPUSH
6271: LD_INT 0
6273: PPUSH
6274: CALL_OW 49
// end ;
6278: GO 6123
6280: POP
6281: POP
// end ;
6282: GO 6105
6284: POP
6285: POP
// end ;
6286: LD_VAR 0 1
6290: RET
// export function PrepareApeman ; var bonus ; begin
6291: LD_INT 0
6293: PPUSH
6294: PPUSH
// uc_side := 0 ;
6295: LD_ADDR_OWVAR 20
6299: PUSH
6300: LD_INT 0
6302: ST_TO_ADDR
// uc_nation := 0 ;
6303: LD_ADDR_OWVAR 21
6307: PUSH
6308: LD_INT 0
6310: ST_TO_ADDR
// InitHc ;
6311: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ FilterAllUnits ( [ f_class , class_apeman ] ) mod 3 + 1 ] ;
6315: LD_ADDR_VAR 0 2
6319: PUSH
6320: LD_INT 1
6322: NEG
6323: PUSH
6324: LD_INT 0
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 25
6337: PUSH
6338: LD_INT 12
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: PPUSH
6345: CALL_OW 69
6349: PUSH
6350: LD_INT 3
6352: MOD
6353: PUSH
6354: LD_INT 1
6356: PLUS
6357: ARRAY
6358: ST_TO_ADDR
// hc_class := class_apeman ;
6359: LD_ADDR_OWVAR 28
6363: PUSH
6364: LD_INT 12
6366: ST_TO_ADDR
// hc_gallery :=  ;
6367: LD_ADDR_OWVAR 33
6371: PUSH
6372: LD_STRING 
6374: ST_TO_ADDR
// hc_name :=  ;
6375: LD_ADDR_OWVAR 26
6379: PUSH
6380: LD_STRING 
6382: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6383: LD_ADDR_OWVAR 31
6387: PUSH
6388: LD_EXP 56
6392: PUSH
6393: LD_VAR 0 2
6397: PLUS
6398: PUSH
6399: LD_EXP 56
6403: PUSH
6404: LD_VAR 0 2
6408: PLUS
6409: PUSH
6410: LD_EXP 56
6414: PUSH
6415: LD_VAR 0 2
6419: PLUS
6420: PUSH
6421: LD_EXP 56
6425: PUSH
6426: LD_VAR 0 2
6430: PLUS
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6438: LD_ADDR_OWVAR 35
6442: PUSH
6443: LD_INT 10
6445: PUSH
6446: LD_VAR 0 2
6450: MUL
6451: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
6452: LD_ADDR_OWVAR 29
6456: PUSH
6457: LD_INT 12
6459: PUSH
6460: LD_INT 12
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: ST_TO_ADDR
// result := CreateHuman ;
6467: LD_ADDR_VAR 0 1
6471: PUSH
6472: CALL_OW 44
6476: ST_TO_ADDR
// end ;
6477: LD_VAR 0 1
6481: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6482: LD_INT 0
6484: PPUSH
6485: PPUSH
6486: PPUSH
// if not ape then
6487: LD_VAR 0 1
6491: NOT
6492: IFFALSE 6496
// exit ;
6494: GO 6621
// side := GetSide ( ape ) ;
6496: LD_ADDR_VAR 0 3
6500: PUSH
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 255
6510: ST_TO_ADDR
// if not side then
6511: LD_VAR 0 3
6515: NOT
6516: IFFALSE 6570
// begin for i = 1 to apemanPos do
6518: LD_ADDR_VAR 0 4
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_EXP 54
6532: PUSH
6533: FOR_TO
6534: IFFALSE 6568
// if ape in apemanPos [ i ] then
6536: LD_VAR 0 1
6540: PUSH
6541: LD_EXP 54
6545: PUSH
6546: LD_VAR 0 4
6550: ARRAY
6551: IN
6552: IFFALSE 6566
// begin side := i ;
6554: LD_ADDR_VAR 0 3
6558: PUSH
6559: LD_VAR 0 4
6563: ST_TO_ADDR
// break ;
6564: GO 6568
// end ;
6566: GO 6533
6568: POP
6569: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6570: LD_ADDR_EXP 54
6574: PUSH
6575: LD_EXP 54
6579: PPUSH
6580: LD_VAR 0 3
6584: PPUSH
6585: LD_EXP 54
6589: PUSH
6590: LD_VAR 0 3
6594: ARRAY
6595: PUSH
6596: LD_VAR 0 1
6600: DIFF
6601: PPUSH
6602: CALL_OW 1
6606: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6607: LD_ADDR_EXP 51
6611: PUSH
6612: LD_EXP 51
6616: PUSH
6617: LD_INT 1
6619: MINUS
6620: ST_TO_ADDR
// end ; end_of_file
6621: LD_VAR 0 2
6625: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6626: LD_VAR 0 1
6630: PPUSH
6631: CALL_OW 266
6635: PUSH
6636: LD_INT 0
6638: PUSH
6639: LD_INT 1
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: IN
6646: IFFALSE 6671
// SetBName ( b , @ & GetSide ( b ) ) ;
6648: LD_VAR 0 1
6652: PPUSH
6653: LD_STRING @
6655: PUSH
6656: LD_VAR 0 1
6660: PPUSH
6661: CALL_OW 255
6665: STR
6666: PPUSH
6667: CALL_OW 500
// end ;
6671: PPOPN 2
6673: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6674: LD_VAR 0 1
6678: PPUSH
6679: CALL_OW 266
6683: PUSH
6684: LD_INT 0
6686: PUSH
6687: LD_INT 1
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: IN
6694: IFFALSE 6719
// SetBName ( b , @ & GetSide ( b ) ) ;
6696: LD_VAR 0 1
6700: PPUSH
6701: LD_STRING @
6703: PUSH
6704: LD_VAR 0 1
6708: PPUSH
6709: CALL_OW 255
6713: STR
6714: PPUSH
6715: CALL_OW 500
// end ;
6719: PPOPN 3
6721: END
// on VehicleConstructed ( veh , fac ) do var side ;
6722: LD_INT 0
6724: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6725: LD_VAR 0 1
6729: PPUSH
6730: CALL_OW 263
6734: PUSH
6735: LD_INT 5
6737: EQUAL
6738: IFFALSE 6880
// begin side := GetSide ( veh ) ;
6740: LD_ADDR_VAR 0 3
6744: PUSH
6745: LD_VAR 0 1
6749: PPUSH
6750: CALL_OW 255
6754: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6755: LD_ADDR_EXP 54
6759: PUSH
6760: LD_EXP 54
6764: PPUSH
6765: LD_VAR 0 3
6769: PPUSH
6770: LD_EXP 54
6774: PUSH
6775: LD_VAR 0 3
6779: ARRAY
6780: PPUSH
6781: LD_INT 52
6783: PUSH
6784: EMPTY
6785: LIST
6786: PPUSH
6787: CALL_OW 72
6791: PUSH
6792: LD_INT 22
6794: PUSH
6795: LD_VAR 0 3
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 2
6806: PUSH
6807: LD_INT 33
6809: PUSH
6810: LD_INT 5
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 25
6819: PUSH
6820: LD_INT 12
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 25
6829: PUSH
6830: LD_INT 15
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: LD_INT 25
6839: PUSH
6840: LD_INT 16
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 25
6849: PUSH
6850: LD_INT 17
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PPUSH
6869: CALL_OW 69
6873: UNION
6874: PPUSH
6875: CALL_OW 1
6879: ST_TO_ADDR
// end ; end ;
6880: PPOPN 3
6882: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6883: LD_INT 0
6885: PPUSH
6886: PPUSH
6887: PPUSH
6888: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6889: LD_VAR 0 1
6893: PPUSH
6894: CALL_OW 257
6898: PUSH
6899: LD_INT 12
6901: PUSH
6902: LD_INT 15
6904: PUSH
6905: LD_INT 17
6907: PUSH
6908: LD_INT 16
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: IN
6917: PUSH
6918: LD_VAR 0 1
6922: PPUSH
6923: CALL_OW 263
6927: PUSH
6928: LD_INT 5
6930: EQUAL
6931: OR
6932: IFFALSE 6943
// ApeKilled ( j ) ;
6934: LD_VAR 0 1
6938: PPUSH
6939: CALL 6482 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6943: LD_VAR 0 1
6947: PPUSH
6948: CALL_OW 266
6952: PUSH
6953: LD_INT 0
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: IN
6963: IFFALSE 7045
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6965: LD_ADDR_VAR 0 4
6969: PUSH
6970: LD_EXP 39
6974: PUSH
6975: LD_VAR 0 1
6979: PPUSH
6980: CALL_OW 255
6984: ARRAY
6985: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6986: LD_ADDR_VAR 0 2
6990: PUSH
6991: LD_EXP 44
6995: PUSH
6996: LD_VAR 0 4
7000: ARRAY
7001: PUSH
7002: LD_INT 1
7004: ARRAY
7005: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7006: LD_ADDR_VAR 0 3
7010: PUSH
7011: LD_EXP 44
7015: PUSH
7016: LD_VAR 0 4
7020: ARRAY
7021: PUSH
7022: LD_INT 2
7024: ARRAY
7025: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7026: LD_VAR 0 2
7030: PPUSH
7031: LD_VAR 0 3
7035: PPUSH
7036: CALL_OW 420
7040: PPUSH
7041: CALL_OW 419
// end ; end ;
7045: PPOPN 5
7047: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7048: LD_VAR 0 1
7052: PPUSH
7053: LD_VAR 0 2
7057: PPUSH
7058: LD_VAR 0 3
7062: PPUSH
7063: LD_OWVAR 2
7067: PPUSH
7068: CALL 7450 0 4
7072: PPOPN 3
7074: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7075: LD_INT 0
7077: PPUSH
7078: PPUSH
// for un in battle_flags_id do
7079: LD_ADDR_VAR 0 2
7083: PUSH
7084: LD_EXP 49
7088: PUSH
7089: FOR_IN
7090: IFFALSE 7165
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7092: LD_VAR 0 2
7096: PPUSH
7097: LD_INT 1
7099: PUSH
7100: LD_LOC 9
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: LD_INT 2
7111: PUSH
7112: LD_LOC 9
7116: PUSH
7117: LD_INT 2
7119: DIV
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 3
7127: PUSH
7128: LD_LOC 9
7132: PUSH
7133: LD_INT 5
7135: DIV
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 20
7143: PUSH
7144: LD_LOC 9
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: PPUSH
7159: CALL_OW 423
7163: GO 7089
7165: POP
7166: POP
// end ;
7167: LD_VAR 0 1
7171: RET
// every 1 do var un ;
7172: GO 7174
7174: DISABLE
7175: LD_INT 0
7177: PPUSH
// begin if not def_morale_flags then
7178: LD_EXP 9
7182: NOT
7183: IFFALSE 7187
// exit ;
7185: GO 7264
// if not morale_decreasing_time then
7187: LD_EXP 26
7191: NOT
7192: IFFALSE 7196
// exit ;
7194: GO 7264
// strength = 100 ;
7196: LD_ADDR_LOC 9
7200: PUSH
7201: LD_INT 100
7203: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7204: LD_EXP 26
7208: PPUSH
7209: CALL_OW 67
// strength := strength - 1 ;
7213: LD_ADDR_LOC 9
7217: PUSH
7218: LD_LOC 9
7222: PUSH
7223: LD_INT 1
7225: MINUS
7226: ST_TO_ADDR
// Update_Flags ;
7227: CALL 7075 0 0
// until not strength ;
7231: LD_LOC 9
7235: NOT
7236: IFFALSE 7204
// for un in battle_flags_id do
7238: LD_ADDR_VAR 0 1
7242: PUSH
7243: LD_EXP 49
7247: PUSH
7248: FOR_IN
7249: IFFALSE 7262
// KillBattleFlag ( un ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: CALL_OW 419
7260: GO 7248
7262: POP
7263: POP
// end ; end_of_file
7264: PPOPN 1
7266: END
// export ExtraStrings , WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7267: LD_INT 0
7269: PPUSH
7270: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7271: LD_ADDR_VAR 0 2
7275: PUSH
7276: LD_STRING #Multi1x1-Time
7278: PUSH
7279: LD_OWVAR 1
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: ST_TO_ADDR
// if WaitServerStrings then
7288: LD_EXP 59
7292: IFFALSE 7310
// AllStrings = AllStrings ^ WaitServerStrings ;
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: LD_VAR 0 2
7303: PUSH
7304: LD_EXP 59
7308: ADD
7309: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7310: LD_INT 0
7312: PUSH
7313: LD_EXP 33
7317: PUSH
7318: LD_OWVAR 1
7322: MINUS
7323: LESSEQUAL
7324: IFFALSE 7355
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7326: LD_ADDR_VAR 0 2
7330: PUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_STRING #allowedsibbomb
7338: PUSH
7339: LD_EXP 33
7343: PUSH
7344: LD_OWVAR 1
7348: MINUS
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: ADD
7354: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7355: LD_INT 0
7357: PUSH
7358: LD_EXP 62
7362: PUSH
7363: LD_OWVAR 1
7367: MINUS
7368: LESSEQUAL
7369: IFFALSE 7400
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7371: LD_ADDR_VAR 0 2
7375: PUSH
7376: LD_VAR 0 2
7380: PUSH
7381: LD_STRING #builduptime
7383: PUSH
7384: LD_EXP 62
7388: PUSH
7389: LD_OWVAR 1
7393: MINUS
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: ADD
7399: ST_TO_ADDR
// if ( ExtraStrings ) then
7400: LD_EXP 58
7404: IFFALSE 7426
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7406: LD_ADDR_VAR 0 2
7410: PUSH
7411: LD_VAR 0 2
7415: PUSH
7416: LD_STRING 
7418: ADD
7419: PUSH
7420: LD_EXP 58
7424: ADD
7425: ST_TO_ADDR
// Display_Strings := AllStrings ;
7426: LD_ADDR_OWVAR 47
7430: PUSH
7431: LD_VAR 0 2
7435: ST_TO_ADDR
// end ;
7436: LD_VAR 0 1
7440: RET
// every 0 0$1 do
7441: GO 7443
7443: DISABLE
// begin ShowTimer ;
7444: CALL 7267 0 0
// enable ;
7448: ENABLE
// end ; end_of_file
7449: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7450: LD_INT 0
7452: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7453: LD_VAR 0 1
7457: PPUSH
7458: CALL_OW 255
7462: PUSH
7463: LD_VAR 0 4
7467: EQUAL
7468: IFFALSE 7487
// begin SetAchievement ( ACH_RAD ) ;
7470: LD_STRING ACH_RAD
7472: PPUSH
7473: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7477: LD_STRING ACH_NL
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: CALL_OW 564
// end end ;
7487: LD_VAR 0 5
7491: RET
// export function SA_Win ( side ) ; begin
7492: LD_INT 0
7494: PPUSH
// case side of 1 :
7495: LD_VAR 0 1
7499: PUSH
7500: LD_INT 1
7502: DOUBLE
7503: EQUAL
7504: IFTRUE 7508
7506: GO 7521
7508: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7509: LD_STRING ACH_AH
7511: PPUSH
7512: LD_INT 1
7514: PPUSH
7515: CALL_OW 564
7519: GO 7684
7521: LD_INT 2
7523: DOUBLE
7524: EQUAL
7525: IFTRUE 7529
7527: GO 7542
7529: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7530: LD_STRING ACH_E
7532: PPUSH
7533: LD_INT 1
7535: PPUSH
7536: CALL_OW 564
7540: GO 7684
7542: LD_INT 3
7544: DOUBLE
7545: EQUAL
7546: IFTRUE 7550
7548: GO 7563
7550: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7551: LD_STRING ACH_OOL
7553: PPUSH
7554: LD_INT 1
7556: PPUSH
7557: CALL_OW 564
7561: GO 7684
7563: LD_INT 1
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: DOUBLE
7573: EQUAL
7574: IFTRUE 7578
7576: GO 7603
7578: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7579: LD_STRING ACH_AH
7581: PPUSH
7582: LD_REAL  5.00000000000000E-0001
7585: PPUSH
7586: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7590: LD_STRING ACH_E
7592: PPUSH
7593: LD_REAL  5.00000000000000E-0001
7596: PPUSH
7597: CALL_OW 564
// end ; [ 2 , 3 ] :
7601: GO 7684
7603: LD_INT 2
7605: PUSH
7606: LD_INT 3
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: DOUBLE
7613: EQUAL
7614: IFTRUE 7618
7616: GO 7643
7618: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7619: LD_STRING ACH_OOL
7621: PPUSH
7622: LD_REAL  5.00000000000000E-0001
7625: PPUSH
7626: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7630: LD_STRING ACH_E
7632: PPUSH
7633: LD_REAL  5.00000000000000E-0001
7636: PPUSH
7637: CALL_OW 564
// end ; [ 3 , 1 ] :
7641: GO 7684
7643: LD_INT 3
7645: PUSH
7646: LD_INT 1
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: DOUBLE
7653: EQUAL
7654: IFTRUE 7658
7656: GO 7683
7658: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7659: LD_STRING ACH_AH
7661: PPUSH
7662: LD_REAL  5.00000000000000E-0001
7665: PPUSH
7666: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7670: LD_STRING ACH_OOL
7672: PPUSH
7673: LD_REAL  5.00000000000000E-0001
7676: PPUSH
7677: CALL_OW 564
// end ; end ;
7681: GO 7684
7683: POP
// end ; end_of_file
7684: LD_VAR 0 2
7688: RET
// export function SetMpTechs ( ) ; var side , i ; begin
7689: LD_INT 0
7691: PPUSH
7692: PPUSH
7693: PPUSH
// for side = 1 to 8 do
7694: LD_ADDR_VAR 0 2
7698: PUSH
7699: DOUBLE
7700: LD_INT 1
7702: DEC
7703: ST_TO_ADDR
7704: LD_INT 8
7706: PUSH
7707: FOR_TO
7708: IFFALSE 7829
// begin for i = 1 to 72 do
7710: LD_ADDR_VAR 0 3
7714: PUSH
7715: DOUBLE
7716: LD_INT 1
7718: DEC
7719: ST_TO_ADDR
7720: LD_INT 72
7722: PUSH
7723: FOR_TO
7724: IFFALSE 7755
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
7726: LD_VAR 0 3
7730: PPUSH
7731: LD_VAR 0 2
7735: PPUSH
7736: LD_INT 0
7738: PPUSH
7739: LD_VAR 0 3
7743: PPUSH
7744: CALL_OW 565
7748: PPUSH
7749: CALL_OW 322
7753: GO 7723
7755: POP
7756: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
7757: LD_INT 73
7759: PPUSH
7760: LD_VAR 0 2
7764: PPUSH
7765: LD_INT 0
7767: PPUSH
7768: LD_INT 25
7770: PPUSH
7771: CALL_OW 565
7775: PPUSH
7776: CALL_OW 322
// for i = 0 to 40 do
7780: LD_ADDR_VAR 0 3
7784: PUSH
7785: DOUBLE
7786: LD_INT 0
7788: DEC
7789: ST_TO_ADDR
7790: LD_INT 40
7792: PUSH
7793: FOR_TO
7794: IFFALSE 7825
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
7796: LD_VAR 0 3
7800: PPUSH
7801: LD_VAR 0 2
7805: PPUSH
7806: LD_INT 1
7808: PPUSH
7809: LD_VAR 0 3
7813: PPUSH
7814: CALL_OW 565
7818: PPUSH
7819: CALL_OW 324
7823: GO 7793
7825: POP
7826: POP
// end ;
7827: GO 7707
7829: POP
7830: POP
// end ;
7831: LD_VAR 0 1
7835: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
7836: LD_INT 0
7838: PPUSH
7839: PPUSH
7840: PPUSH
// for side = 1 to 8 do
7841: LD_ADDR_VAR 0 3
7845: PUSH
7846: DOUBLE
7847: LD_INT 1
7849: DEC
7850: ST_TO_ADDR
7851: LD_INT 8
7853: PUSH
7854: FOR_TO
7855: IFFALSE 11851
// begin for i = 1 to 73 do
7857: LD_ADDR_VAR 0 4
7861: PUSH
7862: DOUBLE
7863: LD_INT 1
7865: DEC
7866: ST_TO_ADDR
7867: LD_INT 73
7869: PUSH
7870: FOR_TO
7871: IFFALSE 7892
// SetTech ( i , side , state_disabled ) ;
7873: LD_VAR 0 4
7877: PPUSH
7878: LD_VAR 0 3
7882: PPUSH
7883: LD_INT 0
7885: PPUSH
7886: CALL_OW 322
7890: GO 7870
7892: POP
7893: POP
// for i = 0 to 40 do
7894: LD_ADDR_VAR 0 4
7898: PUSH
7899: DOUBLE
7900: LD_INT 0
7902: DEC
7903: ST_TO_ADDR
7904: LD_INT 40
7906: PUSH
7907: FOR_TO
7908: IFFALSE 7929
// SetRestrict ( i , side , false ) ;
7910: LD_VAR 0 4
7914: PPUSH
7915: LD_VAR 0 3
7919: PPUSH
7920: LD_INT 0
7922: PPUSH
7923: CALL_OW 324
7927: GO 7907
7929: POP
7930: POP
// case level of 1 :
7931: LD_VAR 0 1
7935: PUSH
7936: LD_INT 1
7938: DOUBLE
7939: EQUAL
7940: IFTRUE 7944
7942: GO 8097
7944: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
7945: LD_INT 35
7947: PPUSH
7948: LD_VAR 0 3
7952: PPUSH
7953: LD_INT 1
7955: PPUSH
7956: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
7960: LD_INT 45
7962: PPUSH
7963: LD_VAR 0 3
7967: PPUSH
7968: LD_INT 1
7970: PPUSH
7971: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
7975: LD_INT 46
7977: PPUSH
7978: LD_VAR 0 3
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
7990: LD_INT 47
7992: PPUSH
7993: LD_VAR 0 3
7997: PPUSH
7998: LD_INT 1
8000: PPUSH
8001: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8005: LD_INT 0
8007: PPUSH
8008: LD_VAR 0 3
8012: PPUSH
8013: LD_INT 1
8015: PPUSH
8016: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8020: LD_INT 2
8022: PPUSH
8023: LD_VAR 0 3
8027: PPUSH
8028: LD_INT 1
8030: PPUSH
8031: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8035: LD_INT 4
8037: PPUSH
8038: LD_VAR 0 3
8042: PPUSH
8043: LD_INT 1
8045: PPUSH
8046: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8050: LD_INT 6
8052: PPUSH
8053: LD_VAR 0 3
8057: PPUSH
8058: LD_INT 1
8060: PPUSH
8061: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8065: LD_INT 29
8067: PPUSH
8068: LD_VAR 0 3
8072: PPUSH
8073: LD_INT 1
8075: PPUSH
8076: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8080: LD_INT 31
8082: PPUSH
8083: LD_VAR 0 3
8087: PPUSH
8088: LD_INT 1
8090: PPUSH
8091: CALL_OW 324
// end ; 2 :
8095: GO 11849
8097: LD_INT 2
8099: DOUBLE
8100: EQUAL
8101: IFTRUE 8105
8103: GO 8303
8105: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8106: LD_INT 35
8108: PPUSH
8109: LD_VAR 0 3
8113: PPUSH
8114: LD_INT 1
8116: PPUSH
8117: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8121: LD_INT 45
8123: PPUSH
8124: LD_VAR 0 3
8128: PPUSH
8129: LD_INT 1
8131: PPUSH
8132: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8136: LD_INT 46
8138: PPUSH
8139: LD_VAR 0 3
8143: PPUSH
8144: LD_INT 1
8146: PPUSH
8147: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8151: LD_INT 47
8153: PPUSH
8154: LD_VAR 0 3
8158: PPUSH
8159: LD_INT 1
8161: PPUSH
8162: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8166: LD_INT 1
8168: PPUSH
8169: LD_VAR 0 3
8173: PPUSH
8174: LD_INT 1
8176: PPUSH
8177: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8181: LD_INT 2
8183: PPUSH
8184: LD_VAR 0 3
8188: PPUSH
8189: LD_INT 1
8191: PPUSH
8192: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8196: LD_INT 11
8198: PPUSH
8199: LD_VAR 0 3
8203: PPUSH
8204: LD_INT 1
8206: PPUSH
8207: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8211: LD_INT 0
8213: PPUSH
8214: LD_VAR 0 3
8218: PPUSH
8219: LD_INT 1
8221: PPUSH
8222: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8226: LD_INT 2
8228: PPUSH
8229: LD_VAR 0 3
8233: PPUSH
8234: LD_INT 1
8236: PPUSH
8237: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8241: LD_INT 4
8243: PPUSH
8244: LD_VAR 0 3
8248: PPUSH
8249: LD_INT 1
8251: PPUSH
8252: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8256: LD_INT 6
8258: PPUSH
8259: LD_VAR 0 3
8263: PPUSH
8264: LD_INT 1
8266: PPUSH
8267: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8271: LD_INT 29
8273: PPUSH
8274: LD_VAR 0 3
8278: PPUSH
8279: LD_INT 1
8281: PPUSH
8282: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8286: LD_INT 31
8288: PPUSH
8289: LD_VAR 0 3
8293: PPUSH
8294: LD_INT 1
8296: PPUSH
8297: CALL_OW 324
// end ; 3 :
8301: GO 11849
8303: LD_INT 3
8305: DOUBLE
8306: EQUAL
8307: IFTRUE 8311
8309: GO 8764
8311: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8312: LD_INT 35
8314: PPUSH
8315: LD_VAR 0 3
8319: PPUSH
8320: LD_INT 1
8322: PPUSH
8323: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8327: LD_INT 45
8329: PPUSH
8330: LD_VAR 0 3
8334: PPUSH
8335: LD_INT 1
8337: PPUSH
8338: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8342: LD_INT 46
8344: PPUSH
8345: LD_VAR 0 3
8349: PPUSH
8350: LD_INT 1
8352: PPUSH
8353: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8357: LD_INT 47
8359: PPUSH
8360: LD_VAR 0 3
8364: PPUSH
8365: LD_INT 1
8367: PPUSH
8368: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8372: LD_INT 1
8374: PPUSH
8375: LD_VAR 0 3
8379: PPUSH
8380: LD_INT 1
8382: PPUSH
8383: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8387: LD_INT 2
8389: PPUSH
8390: LD_VAR 0 3
8394: PPUSH
8395: LD_INT 1
8397: PPUSH
8398: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8402: LD_INT 11
8404: PPUSH
8405: LD_VAR 0 3
8409: PPUSH
8410: LD_INT 1
8412: PPUSH
8413: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8417: LD_INT 48
8419: PPUSH
8420: LD_VAR 0 3
8424: PPUSH
8425: LD_INT 1
8427: PPUSH
8428: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8432: LD_INT 69
8434: PPUSH
8435: LD_VAR 0 3
8439: PPUSH
8440: LD_INT 1
8442: PPUSH
8443: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8447: LD_INT 39
8449: PPUSH
8450: LD_VAR 0 3
8454: PPUSH
8455: LD_INT 1
8457: PPUSH
8458: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
8462: LD_INT 43
8464: PPUSH
8465: LD_VAR 0 3
8469: PPUSH
8470: LD_INT 1
8472: PPUSH
8473: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
8477: LD_INT 51
8479: PPUSH
8480: LD_VAR 0 3
8484: PPUSH
8485: LD_INT 1
8487: PPUSH
8488: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
8492: LD_INT 6
8494: PPUSH
8495: LD_VAR 0 3
8499: PPUSH
8500: LD_INT 1
8502: PPUSH
8503: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
8507: LD_INT 0
8509: PPUSH
8510: LD_VAR 0 3
8514: PPUSH
8515: LD_INT 1
8517: PPUSH
8518: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
8522: LD_INT 2
8524: PPUSH
8525: LD_VAR 0 3
8529: PPUSH
8530: LD_INT 1
8532: PPUSH
8533: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
8537: LD_INT 3
8539: PPUSH
8540: LD_VAR 0 3
8544: PPUSH
8545: LD_INT 1
8547: PPUSH
8548: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
8552: LD_INT 4
8554: PPUSH
8555: LD_VAR 0 3
8559: PPUSH
8560: LD_INT 1
8562: PPUSH
8563: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
8567: LD_INT 6
8569: PPUSH
8570: LD_VAR 0 3
8574: PPUSH
8575: LD_INT 1
8577: PPUSH
8578: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
8582: LD_INT 7
8584: PPUSH
8585: LD_VAR 0 3
8589: PPUSH
8590: LD_INT 1
8592: PPUSH
8593: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
8597: LD_INT 8
8599: PPUSH
8600: LD_VAR 0 3
8604: PPUSH
8605: LD_INT 1
8607: PPUSH
8608: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
8612: LD_INT 10
8614: PPUSH
8615: LD_VAR 0 3
8619: PPUSH
8620: LD_INT 1
8622: PPUSH
8623: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
8627: LD_INT 15
8629: PPUSH
8630: LD_VAR 0 3
8634: PPUSH
8635: LD_INT 1
8637: PPUSH
8638: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
8642: LD_INT 16
8644: PPUSH
8645: LD_VAR 0 3
8649: PPUSH
8650: LD_INT 1
8652: PPUSH
8653: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
8657: LD_INT 17
8659: PPUSH
8660: LD_VAR 0 3
8664: PPUSH
8665: LD_INT 1
8667: PPUSH
8668: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
8672: LD_INT 20
8674: PPUSH
8675: LD_VAR 0 3
8679: PPUSH
8680: LD_INT 1
8682: PPUSH
8683: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
8687: LD_INT 26
8689: PPUSH
8690: LD_VAR 0 3
8694: PPUSH
8695: LD_INT 1
8697: PPUSH
8698: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
8702: LD_INT 27
8704: PPUSH
8705: LD_VAR 0 3
8709: PPUSH
8710: LD_INT 1
8712: PPUSH
8713: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
8717: LD_INT 29
8719: PPUSH
8720: LD_VAR 0 3
8724: PPUSH
8725: LD_INT 1
8727: PPUSH
8728: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
8732: LD_INT 31
8734: PPUSH
8735: LD_VAR 0 3
8739: PPUSH
8740: LD_INT 1
8742: PPUSH
8743: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
8747: LD_INT 32
8749: PPUSH
8750: LD_VAR 0 3
8754: PPUSH
8755: LD_INT 1
8757: PPUSH
8758: CALL_OW 324
// end ; 4 :
8762: GO 11849
8764: LD_INT 4
8766: DOUBLE
8767: EQUAL
8768: IFTRUE 8772
8770: GO 9720
8772: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
8773: LD_INT 35
8775: PPUSH
8776: LD_VAR 0 3
8780: PPUSH
8781: LD_INT 1
8783: PPUSH
8784: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
8788: LD_INT 45
8790: PPUSH
8791: LD_VAR 0 3
8795: PPUSH
8796: LD_INT 1
8798: PPUSH
8799: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
8803: LD_INT 46
8805: PPUSH
8806: LD_VAR 0 3
8810: PPUSH
8811: LD_INT 1
8813: PPUSH
8814: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
8818: LD_INT 47
8820: PPUSH
8821: LD_VAR 0 3
8825: PPUSH
8826: LD_INT 1
8828: PPUSH
8829: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
8833: LD_INT 1
8835: PPUSH
8836: LD_VAR 0 3
8840: PPUSH
8841: LD_INT 1
8843: PPUSH
8844: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
8848: LD_INT 2
8850: PPUSH
8851: LD_VAR 0 3
8855: PPUSH
8856: LD_INT 1
8858: PPUSH
8859: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
8863: LD_INT 11
8865: PPUSH
8866: LD_VAR 0 3
8870: PPUSH
8871: LD_INT 1
8873: PPUSH
8874: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
8878: LD_INT 20
8880: PPUSH
8881: LD_VAR 0 3
8885: PPUSH
8886: LD_INT 1
8888: PPUSH
8889: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
8893: LD_INT 48
8895: PPUSH
8896: LD_VAR 0 3
8900: PPUSH
8901: LD_INT 1
8903: PPUSH
8904: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
8908: LD_INT 49
8910: PPUSH
8911: LD_VAR 0 3
8915: PPUSH
8916: LD_INT 1
8918: PPUSH
8919: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
8923: LD_INT 69
8925: PPUSH
8926: LD_VAR 0 3
8930: PPUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
8938: LD_INT 39
8940: PPUSH
8941: LD_VAR 0 3
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
8953: LD_INT 34
8955: PPUSH
8956: LD_VAR 0 3
8960: PPUSH
8961: LD_INT 1
8963: PPUSH
8964: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
8968: LD_INT 42
8970: PPUSH
8971: LD_VAR 0 3
8975: PPUSH
8976: LD_INT 1
8978: PPUSH
8979: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
8983: LD_INT 44
8985: PPUSH
8986: LD_VAR 0 3
8990: PPUSH
8991: LD_INT 1
8993: PPUSH
8994: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
8998: LD_INT 41
9000: PPUSH
9001: LD_VAR 0 3
9005: PPUSH
9006: LD_INT 1
9008: PPUSH
9009: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9013: LD_INT 43
9015: PPUSH
9016: LD_VAR 0 3
9020: PPUSH
9021: LD_INT 1
9023: PPUSH
9024: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9028: LD_INT 70
9030: PPUSH
9031: LD_VAR 0 3
9035: PPUSH
9036: LD_INT 1
9038: PPUSH
9039: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9043: LD_INT 51
9045: PPUSH
9046: LD_VAR 0 3
9050: PPUSH
9051: LD_INT 1
9053: PPUSH
9054: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
9058: LD_INT 52
9060: PPUSH
9061: LD_VAR 0 3
9065: PPUSH
9066: LD_INT 1
9068: PPUSH
9069: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9073: LD_INT 6
9075: PPUSH
9076: LD_VAR 0 3
9080: PPUSH
9081: LD_INT 1
9083: PPUSH
9084: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
9088: LD_INT 15
9090: PPUSH
9091: LD_VAR 0 3
9095: PPUSH
9096: LD_INT 1
9098: PPUSH
9099: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
9103: LD_INT 7
9105: PPUSH
9106: LD_VAR 0 3
9110: PPUSH
9111: LD_INT 1
9113: PPUSH
9114: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
9118: LD_INT 12
9120: PPUSH
9121: LD_VAR 0 3
9125: PPUSH
9126: LD_INT 1
9128: PPUSH
9129: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
9133: LD_INT 18
9135: PPUSH
9136: LD_VAR 0 3
9140: PPUSH
9141: LD_INT 1
9143: PPUSH
9144: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
9148: LD_INT 60
9150: PPUSH
9151: LD_VAR 0 3
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
9163: LD_INT 9
9165: PPUSH
9166: LD_VAR 0 3
9170: PPUSH
9171: LD_INT 1
9173: PPUSH
9174: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
9178: LD_INT 30
9180: PPUSH
9181: LD_VAR 0 3
9185: PPUSH
9186: LD_INT 1
9188: PPUSH
9189: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
9193: LD_INT 37
9195: PPUSH
9196: LD_VAR 0 3
9200: PPUSH
9201: LD_INT 1
9203: PPUSH
9204: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
9208: LD_INT 5
9210: PPUSH
9211: LD_VAR 0 3
9215: PPUSH
9216: LD_INT 1
9218: PPUSH
9219: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
9223: LD_INT 66
9225: PPUSH
9226: LD_VAR 0 3
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
9238: LD_INT 21
9240: PPUSH
9241: LD_VAR 0 3
9245: PPUSH
9246: LD_INT 1
9248: PPUSH
9249: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
9253: LD_INT 22
9255: PPUSH
9256: LD_VAR 0 3
9260: PPUSH
9261: LD_INT 1
9263: PPUSH
9264: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
9268: LD_INT 54
9270: PPUSH
9271: LD_VAR 0 3
9275: PPUSH
9276: LD_INT 1
9278: PPUSH
9279: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9283: LD_INT 0
9285: PPUSH
9286: LD_VAR 0 3
9290: PPUSH
9291: LD_INT 1
9293: PPUSH
9294: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
9298: LD_INT 1
9300: PPUSH
9301: LD_VAR 0 3
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9313: LD_INT 2
9315: PPUSH
9316: LD_VAR 0 3
9320: PPUSH
9321: LD_INT 1
9323: PPUSH
9324: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9328: LD_INT 3
9330: PPUSH
9331: LD_VAR 0 3
9335: PPUSH
9336: LD_INT 1
9338: PPUSH
9339: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9343: LD_INT 4
9345: PPUSH
9346: LD_VAR 0 3
9350: PPUSH
9351: LD_INT 1
9353: PPUSH
9354: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
9358: LD_INT 5
9360: PPUSH
9361: LD_VAR 0 3
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9373: LD_INT 6
9375: PPUSH
9376: LD_VAR 0 3
9380: PPUSH
9381: LD_INT 1
9383: PPUSH
9384: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9388: LD_INT 7
9390: PPUSH
9391: LD_VAR 0 3
9395: PPUSH
9396: LD_INT 1
9398: PPUSH
9399: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9403: LD_INT 8
9405: PPUSH
9406: LD_VAR 0 3
9410: PPUSH
9411: LD_INT 1
9413: PPUSH
9414: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9418: LD_INT 10
9420: PPUSH
9421: LD_VAR 0 3
9425: PPUSH
9426: LD_INT 1
9428: PPUSH
9429: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
9433: LD_INT 11
9435: PPUSH
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_INT 1
9443: PPUSH
9444: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
9448: LD_INT 12
9450: PPUSH
9451: LD_VAR 0 3
9455: PPUSH
9456: LD_INT 1
9458: PPUSH
9459: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
9463: LD_INT 13
9465: PPUSH
9466: LD_VAR 0 3
9470: PPUSH
9471: LD_INT 1
9473: PPUSH
9474: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
9478: LD_INT 14
9480: PPUSH
9481: LD_VAR 0 3
9485: PPUSH
9486: LD_INT 1
9488: PPUSH
9489: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9493: LD_INT 15
9495: PPUSH
9496: LD_VAR 0 3
9500: PPUSH
9501: LD_INT 1
9503: PPUSH
9504: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9508: LD_INT 16
9510: PPUSH
9511: LD_VAR 0 3
9515: PPUSH
9516: LD_INT 1
9518: PPUSH
9519: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9523: LD_INT 17
9525: PPUSH
9526: LD_VAR 0 3
9530: PPUSH
9531: LD_INT 1
9533: PPUSH
9534: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
9538: LD_INT 19
9540: PPUSH
9541: LD_VAR 0 3
9545: PPUSH
9546: LD_INT 1
9548: PPUSH
9549: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9553: LD_INT 20
9555: PPUSH
9556: LD_VAR 0 3
9560: PPUSH
9561: LD_INT 1
9563: PPUSH
9564: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
9568: LD_INT 21
9570: PPUSH
9571: LD_VAR 0 3
9575: PPUSH
9576: LD_INT 1
9578: PPUSH
9579: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
9583: LD_INT 23
9585: PPUSH
9586: LD_VAR 0 3
9590: PPUSH
9591: LD_INT 1
9593: PPUSH
9594: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9598: LD_INT 26
9600: PPUSH
9601: LD_VAR 0 3
9605: PPUSH
9606: LD_INT 1
9608: PPUSH
9609: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9613: LD_INT 27
9615: PPUSH
9616: LD_VAR 0 3
9620: PPUSH
9621: LD_INT 1
9623: PPUSH
9624: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
9628: LD_INT 28
9630: PPUSH
9631: LD_VAR 0 3
9635: PPUSH
9636: LD_INT 1
9638: PPUSH
9639: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9643: LD_INT 29
9645: PPUSH
9646: LD_VAR 0 3
9650: PPUSH
9651: LD_INT 1
9653: PPUSH
9654: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
9658: LD_INT 30
9660: PPUSH
9661: LD_VAR 0 3
9665: PPUSH
9666: LD_INT 1
9668: PPUSH
9669: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9673: LD_INT 31
9675: PPUSH
9676: LD_VAR 0 3
9680: PPUSH
9681: LD_INT 1
9683: PPUSH
9684: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9688: LD_INT 32
9690: PPUSH
9691: LD_VAR 0 3
9695: PPUSH
9696: LD_INT 1
9698: PPUSH
9699: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
9703: LD_INT 36
9705: PPUSH
9706: LD_VAR 0 3
9710: PPUSH
9711: LD_INT 1
9713: PPUSH
9714: CALL_OW 324
// end ; 5 :
9718: GO 11849
9720: LD_INT 5
9722: DOUBLE
9723: EQUAL
9724: IFTRUE 9728
9726: GO 10841
9728: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9729: LD_INT 35
9731: PPUSH
9732: LD_VAR 0 3
9736: PPUSH
9737: LD_INT 1
9739: PPUSH
9740: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9744: LD_INT 45
9746: PPUSH
9747: LD_VAR 0 3
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9759: LD_INT 46
9761: PPUSH
9762: LD_VAR 0 3
9766: PPUSH
9767: LD_INT 1
9769: PPUSH
9770: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9774: LD_INT 47
9776: PPUSH
9777: LD_VAR 0 3
9781: PPUSH
9782: LD_INT 1
9784: PPUSH
9785: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9789: LD_INT 1
9791: PPUSH
9792: LD_VAR 0 3
9796: PPUSH
9797: LD_INT 1
9799: PPUSH
9800: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9804: LD_INT 2
9806: PPUSH
9807: LD_VAR 0 3
9811: PPUSH
9812: LD_INT 1
9814: PPUSH
9815: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9819: LD_INT 11
9821: PPUSH
9822: LD_VAR 0 3
9826: PPUSH
9827: LD_INT 1
9829: PPUSH
9830: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
9834: LD_INT 20
9836: PPUSH
9837: LD_VAR 0 3
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9849: LD_INT 48
9851: PPUSH
9852: LD_VAR 0 3
9856: PPUSH
9857: LD_INT 1
9859: PPUSH
9860: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
9864: LD_INT 49
9866: PPUSH
9867: LD_VAR 0 3
9871: PPUSH
9872: LD_INT 1
9874: PPUSH
9875: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9879: LD_INT 69
9881: PPUSH
9882: LD_VAR 0 3
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9894: LD_INT 39
9896: PPUSH
9897: LD_VAR 0 3
9901: PPUSH
9902: LD_INT 1
9904: PPUSH
9905: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
9909: LD_INT 34
9911: PPUSH
9912: LD_VAR 0 3
9916: PPUSH
9917: LD_INT 1
9919: PPUSH
9920: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
9924: LD_INT 42
9926: PPUSH
9927: LD_VAR 0 3
9931: PPUSH
9932: LD_INT 1
9934: PPUSH
9935: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
9939: LD_INT 44
9941: PPUSH
9942: LD_VAR 0 3
9946: PPUSH
9947: LD_INT 1
9949: PPUSH
9950: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
9954: LD_INT 41
9956: PPUSH
9957: LD_VAR 0 3
9961: PPUSH
9962: LD_INT 1
9964: PPUSH
9965: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
9969: LD_INT 40
9971: PPUSH
9972: LD_VAR 0 3
9976: PPUSH
9977: LD_INT 1
9979: PPUSH
9980: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9984: LD_INT 43
9986: PPUSH
9987: LD_VAR 0 3
9991: PPUSH
9992: LD_INT 1
9994: PPUSH
9995: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
9999: LD_INT 70
10001: PPUSH
10002: LD_VAR 0 3
10006: PPUSH
10007: LD_INT 1
10009: PPUSH
10010: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10014: LD_INT 51
10016: PPUSH
10017: LD_VAR 0 3
10021: PPUSH
10022: LD_INT 1
10024: PPUSH
10025: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10029: LD_INT 52
10031: PPUSH
10032: LD_VAR 0 3
10036: PPUSH
10037: LD_INT 1
10039: PPUSH
10040: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10044: LD_INT 6
10046: PPUSH
10047: LD_VAR 0 3
10051: PPUSH
10052: LD_INT 1
10054: PPUSH
10055: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10059: LD_INT 15
10061: PPUSH
10062: LD_VAR 0 3
10066: PPUSH
10067: LD_INT 1
10069: PPUSH
10070: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10074: LD_INT 7
10076: PPUSH
10077: LD_VAR 0 3
10081: PPUSH
10082: LD_INT 1
10084: PPUSH
10085: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10089: LD_INT 12
10091: PPUSH
10092: LD_VAR 0 3
10096: PPUSH
10097: LD_INT 1
10099: PPUSH
10100: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
10104: LD_INT 17
10106: PPUSH
10107: LD_VAR 0 3
10111: PPUSH
10112: LD_INT 1
10114: PPUSH
10115: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10119: LD_INT 18
10121: PPUSH
10122: LD_VAR 0 3
10126: PPUSH
10127: LD_INT 1
10129: PPUSH
10130: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10134: LD_INT 60
10136: PPUSH
10137: LD_VAR 0 3
10141: PPUSH
10142: LD_INT 1
10144: PPUSH
10145: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
10149: LD_INT 32
10151: PPUSH
10152: LD_VAR 0 3
10156: PPUSH
10157: LD_INT 1
10159: PPUSH
10160: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10164: LD_INT 9
10166: PPUSH
10167: LD_VAR 0 3
10171: PPUSH
10172: LD_INT 1
10174: PPUSH
10175: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
10179: LD_INT 57
10181: PPUSH
10182: LD_VAR 0 3
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10194: LD_INT 30
10196: PPUSH
10197: LD_VAR 0 3
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10209: LD_INT 37
10211: PPUSH
10212: LD_VAR 0 3
10216: PPUSH
10217: LD_INT 1
10219: PPUSH
10220: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
10224: LD_INT 63
10226: PPUSH
10227: LD_VAR 0 3
10231: PPUSH
10232: LD_INT 1
10234: PPUSH
10235: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
10239: LD_INT 3
10241: PPUSH
10242: LD_VAR 0 3
10246: PPUSH
10247: LD_INT 1
10249: PPUSH
10250: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
10254: LD_INT 4
10256: PPUSH
10257: LD_VAR 0 3
10261: PPUSH
10262: LD_INT 1
10264: PPUSH
10265: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10269: LD_INT 5
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10284: LD_INT 66
10286: PPUSH
10287: LD_VAR 0 3
10291: PPUSH
10292: LD_INT 1
10294: PPUSH
10295: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10299: LD_INT 21
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 1
10309: PPUSH
10310: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10314: LD_INT 22
10316: PPUSH
10317: LD_VAR 0 3
10321: PPUSH
10322: LD_INT 1
10324: PPUSH
10325: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
10329: LD_INT 19
10331: PPUSH
10332: LD_VAR 0 3
10336: PPUSH
10337: LD_INT 1
10339: PPUSH
10340: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10344: LD_INT 54
10346: PPUSH
10347: LD_VAR 0 3
10351: PPUSH
10352: LD_INT 1
10354: PPUSH
10355: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
10359: LD_INT 55
10361: PPUSH
10362: LD_VAR 0 3
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10374: LD_INT 0
10376: PPUSH
10377: LD_VAR 0 3
10381: PPUSH
10382: LD_INT 1
10384: PPUSH
10385: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10389: LD_INT 1
10391: PPUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 1
10399: PPUSH
10400: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10404: LD_INT 2
10406: PPUSH
10407: LD_VAR 0 3
10411: PPUSH
10412: LD_INT 1
10414: PPUSH
10415: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10419: LD_INT 3
10421: PPUSH
10422: LD_VAR 0 3
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10434: LD_INT 4
10436: PPUSH
10437: LD_VAR 0 3
10441: PPUSH
10442: LD_INT 1
10444: PPUSH
10445: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10449: LD_INT 5
10451: PPUSH
10452: LD_VAR 0 3
10456: PPUSH
10457: LD_INT 1
10459: PPUSH
10460: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10464: LD_INT 6
10466: PPUSH
10467: LD_VAR 0 3
10471: PPUSH
10472: LD_INT 1
10474: PPUSH
10475: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10479: LD_INT 7
10481: PPUSH
10482: LD_VAR 0 3
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10494: LD_INT 8
10496: PPUSH
10497: LD_VAR 0 3
10501: PPUSH
10502: LD_INT 1
10504: PPUSH
10505: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10509: LD_INT 10
10511: PPUSH
10512: LD_VAR 0 3
10516: PPUSH
10517: LD_INT 1
10519: PPUSH
10520: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10524: LD_INT 11
10526: PPUSH
10527: LD_VAR 0 3
10531: PPUSH
10532: LD_INT 1
10534: PPUSH
10535: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10539: LD_INT 12
10541: PPUSH
10542: LD_VAR 0 3
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10554: LD_INT 13
10556: PPUSH
10557: LD_VAR 0 3
10561: PPUSH
10562: LD_INT 1
10564: PPUSH
10565: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10569: LD_INT 14
10571: PPUSH
10572: LD_VAR 0 3
10576: PPUSH
10577: LD_INT 1
10579: PPUSH
10580: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10584: LD_INT 15
10586: PPUSH
10587: LD_VAR 0 3
10591: PPUSH
10592: LD_INT 1
10594: PPUSH
10595: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10599: LD_INT 16
10601: PPUSH
10602: LD_VAR 0 3
10606: PPUSH
10607: LD_INT 1
10609: PPUSH
10610: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10614: LD_INT 17
10616: PPUSH
10617: LD_VAR 0 3
10621: PPUSH
10622: LD_INT 1
10624: PPUSH
10625: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
10629: LD_INT 18
10631: PPUSH
10632: LD_VAR 0 3
10636: PPUSH
10637: LD_INT 1
10639: PPUSH
10640: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10644: LD_INT 19
10646: PPUSH
10647: LD_VAR 0 3
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10659: LD_INT 20
10661: PPUSH
10662: LD_VAR 0 3
10666: PPUSH
10667: LD_INT 1
10669: PPUSH
10670: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10674: LD_INT 21
10676: PPUSH
10677: LD_VAR 0 3
10681: PPUSH
10682: LD_INT 1
10684: PPUSH
10685: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10689: LD_INT 23
10691: PPUSH
10692: LD_VAR 0 3
10696: PPUSH
10697: LD_INT 1
10699: PPUSH
10700: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10704: LD_INT 26
10706: PPUSH
10707: LD_VAR 0 3
10711: PPUSH
10712: LD_INT 1
10714: PPUSH
10715: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10719: LD_INT 27
10721: PPUSH
10722: LD_VAR 0 3
10726: PPUSH
10727: LD_INT 1
10729: PPUSH
10730: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10734: LD_INT 28
10736: PPUSH
10737: LD_VAR 0 3
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10749: LD_INT 29
10751: PPUSH
10752: LD_VAR 0 3
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10764: LD_INT 30
10766: PPUSH
10767: LD_VAR 0 3
10771: PPUSH
10772: LD_INT 1
10774: PPUSH
10775: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10779: LD_INT 31
10781: PPUSH
10782: LD_VAR 0 3
10786: PPUSH
10787: LD_INT 1
10789: PPUSH
10790: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10794: LD_INT 32
10796: PPUSH
10797: LD_VAR 0 3
10801: PPUSH
10802: LD_INT 1
10804: PPUSH
10805: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
10809: LD_INT 33
10811: PPUSH
10812: LD_VAR 0 3
10816: PPUSH
10817: LD_INT 1
10819: PPUSH
10820: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10824: LD_INT 36
10826: PPUSH
10827: LD_VAR 0 3
10831: PPUSH
10832: LD_INT 1
10834: PPUSH
10835: CALL_OW 324
// end ; 6 :
10839: GO 11849
10841: LD_INT 6
10843: DOUBLE
10844: EQUAL
10845: IFTRUE 10849
10847: GO 11774
10849: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10850: LD_INT 35
10852: PPUSH
10853: LD_VAR 0 3
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10865: LD_INT 45
10867: PPUSH
10868: LD_VAR 0 3
10872: PPUSH
10873: LD_INT 1
10875: PPUSH
10876: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10880: LD_INT 46
10882: PPUSH
10883: LD_VAR 0 3
10887: PPUSH
10888: LD_INT 1
10890: PPUSH
10891: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10895: LD_INT 47
10897: PPUSH
10898: LD_VAR 0 3
10902: PPUSH
10903: LD_INT 1
10905: PPUSH
10906: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10910: LD_INT 1
10912: PPUSH
10913: LD_VAR 0 3
10917: PPUSH
10918: LD_INT 1
10920: PPUSH
10921: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10925: LD_INT 2
10927: PPUSH
10928: LD_VAR 0 3
10932: PPUSH
10933: LD_INT 1
10935: PPUSH
10936: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10940: LD_INT 11
10942: PPUSH
10943: LD_VAR 0 3
10947: PPUSH
10948: LD_INT 1
10950: PPUSH
10951: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10955: LD_INT 20
10957: PPUSH
10958: LD_VAR 0 3
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10970: LD_INT 48
10972: PPUSH
10973: LD_VAR 0 3
10977: PPUSH
10978: LD_INT 1
10980: PPUSH
10981: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10985: LD_INT 49
10987: PPUSH
10988: LD_VAR 0 3
10992: PPUSH
10993: LD_INT 1
10995: PPUSH
10996: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
11000: LD_INT 50
11002: PPUSH
11003: LD_VAR 0 3
11007: PPUSH
11008: LD_INT 1
11010: PPUSH
11011: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11015: LD_INT 69
11017: PPUSH
11018: LD_VAR 0 3
11022: PPUSH
11023: LD_INT 1
11025: PPUSH
11026: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11030: LD_INT 39
11032: PPUSH
11033: LD_VAR 0 3
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11045: LD_INT 34
11047: PPUSH
11048: LD_VAR 0 3
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11060: LD_INT 42
11062: PPUSH
11063: LD_VAR 0 3
11067: PPUSH
11068: LD_INT 1
11070: PPUSH
11071: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11075: LD_INT 44
11077: PPUSH
11078: LD_VAR 0 3
11082: PPUSH
11083: LD_INT 1
11085: PPUSH
11086: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11090: LD_INT 41
11092: PPUSH
11093: LD_VAR 0 3
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
11105: LD_INT 13
11107: PPUSH
11108: LD_VAR 0 3
11112: PPUSH
11113: LD_INT 1
11115: PPUSH
11116: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11120: LD_INT 40
11122: PPUSH
11123: LD_VAR 0 3
11127: PPUSH
11128: LD_INT 1
11130: PPUSH
11131: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11135: LD_INT 43
11137: PPUSH
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_INT 1
11145: PPUSH
11146: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11150: LD_INT 70
11152: PPUSH
11153: LD_VAR 0 3
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
11165: LD_INT 23
11167: PPUSH
11168: LD_VAR 0 3
11172: PPUSH
11173: LD_INT 1
11175: PPUSH
11176: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11180: LD_INT 51
11182: PPUSH
11183: LD_VAR 0 3
11187: PPUSH
11188: LD_INT 1
11190: PPUSH
11191: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11195: LD_INT 52
11197: PPUSH
11198: LD_VAR 0 3
11202: PPUSH
11203: LD_INT 1
11205: PPUSH
11206: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11210: LD_INT 6
11212: PPUSH
11213: LD_VAR 0 3
11217: PPUSH
11218: LD_INT 1
11220: PPUSH
11221: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11225: LD_INT 15
11227: PPUSH
11228: LD_VAR 0 3
11232: PPUSH
11233: LD_INT 1
11235: PPUSH
11236: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11240: LD_INT 7
11242: PPUSH
11243: LD_VAR 0 3
11247: PPUSH
11248: LD_INT 1
11250: PPUSH
11251: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11255: LD_INT 12
11257: PPUSH
11258: LD_VAR 0 3
11262: PPUSH
11263: LD_INT 1
11265: PPUSH
11266: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
11270: LD_INT 10
11272: PPUSH
11273: LD_VAR 0 3
11277: PPUSH
11278: LD_INT 1
11280: PPUSH
11281: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11285: LD_INT 17
11287: PPUSH
11288: LD_VAR 0 3
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11300: LD_INT 18
11302: PPUSH
11303: LD_VAR 0 3
11307: PPUSH
11308: LD_INT 1
11310: PPUSH
11311: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11315: LD_INT 60
11317: PPUSH
11318: LD_VAR 0 3
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
11330: LD_INT 61
11332: PPUSH
11333: LD_VAR 0 3
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11345: LD_INT 32
11347: PPUSH
11348: LD_VAR 0 3
11352: PPUSH
11353: LD_INT 1
11355: PPUSH
11356: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
11360: LD_INT 27
11362: PPUSH
11363: LD_VAR 0 3
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
11375: LD_INT 36
11377: PPUSH
11378: LD_VAR 0 3
11382: PPUSH
11383: LD_INT 1
11385: PPUSH
11386: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
11390: LD_INT 33
11392: PPUSH
11393: LD_VAR 0 3
11397: PPUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11405: LD_INT 9
11407: PPUSH
11408: LD_VAR 0 3
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
11420: LD_INT 38
11422: PPUSH
11423: LD_VAR 0 3
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11435: LD_INT 57
11437: PPUSH
11438: LD_VAR 0 3
11442: PPUSH
11443: LD_INT 1
11445: PPUSH
11446: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
11450: LD_INT 58
11452: PPUSH
11453: LD_VAR 0 3
11457: PPUSH
11458: LD_INT 1
11460: PPUSH
11461: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
11465: LD_INT 28
11467: PPUSH
11468: LD_VAR 0 3
11472: PPUSH
11473: LD_INT 1
11475: PPUSH
11476: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
11480: LD_INT 29
11482: PPUSH
11483: LD_VAR 0 3
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11495: LD_INT 30
11497: PPUSH
11498: LD_VAR 0 3
11502: PPUSH
11503: LD_INT 1
11505: PPUSH
11506: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11510: LD_INT 37
11512: PPUSH
11513: LD_VAR 0 3
11517: PPUSH
11518: LD_INT 1
11520: PPUSH
11521: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11525: LD_INT 63
11527: PPUSH
11528: LD_VAR 0 3
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
11540: LD_INT 64
11542: PPUSH
11543: LD_VAR 0 3
11547: PPUSH
11548: LD_INT 1
11550: PPUSH
11551: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11555: LD_INT 3
11557: PPUSH
11558: LD_VAR 0 3
11562: PPUSH
11563: LD_INT 1
11565: PPUSH
11566: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11570: LD_INT 4
11572: PPUSH
11573: LD_VAR 0 3
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11585: LD_INT 5
11587: PPUSH
11588: LD_VAR 0 3
11592: PPUSH
11593: LD_INT 1
11595: PPUSH
11596: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
11600: LD_INT 8
11602: PPUSH
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 1
11610: PPUSH
11611: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11615: LD_INT 66
11617: PPUSH
11618: LD_VAR 0 3
11622: PPUSH
11623: LD_INT 1
11625: PPUSH
11626: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
11630: LD_INT 67
11632: PPUSH
11633: LD_VAR 0 3
11637: PPUSH
11638: LD_INT 1
11640: PPUSH
11641: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11645: LD_INT 21
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: LD_INT 1
11655: PPUSH
11656: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11660: LD_INT 22
11662: PPUSH
11663: LD_VAR 0 3
11667: PPUSH
11668: LD_INT 1
11670: PPUSH
11671: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11675: LD_INT 19
11677: PPUSH
11678: LD_VAR 0 3
11682: PPUSH
11683: LD_INT 1
11685: PPUSH
11686: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
11690: LD_INT 26
11692: PPUSH
11693: LD_VAR 0 3
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11705: LD_INT 54
11707: PPUSH
11708: LD_VAR 0 3
11712: PPUSH
11713: LD_INT 1
11715: PPUSH
11716: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11720: LD_INT 55
11722: PPUSH
11723: LD_VAR 0 3
11727: PPUSH
11728: LD_INT 1
11730: PPUSH
11731: CALL_OW 322
// for i = 0 to 39 do
11735: LD_ADDR_VAR 0 4
11739: PUSH
11740: DOUBLE
11741: LD_INT 0
11743: DEC
11744: ST_TO_ADDR
11745: LD_INT 39
11747: PUSH
11748: FOR_TO
11749: IFFALSE 11770
// SetRestrict ( i , side , true ) ;
11751: LD_VAR 0 4
11755: PPUSH
11756: LD_VAR 0 3
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: CALL_OW 324
11768: GO 11748
11770: POP
11771: POP
// end ; else
11772: GO 11849
11774: POP
// begin for i = 1 to 73 do
11775: LD_ADDR_VAR 0 4
11779: PUSH
11780: DOUBLE
11781: LD_INT 1
11783: DEC
11784: ST_TO_ADDR
11785: LD_INT 73
11787: PUSH
11788: FOR_TO
11789: IFFALSE 11810
// SetTech ( i , side , state_enabled ) ;
11791: LD_VAR 0 4
11795: PPUSH
11796: LD_VAR 0 3
11800: PPUSH
11801: LD_INT 1
11803: PPUSH
11804: CALL_OW 322
11808: GO 11788
11810: POP
11811: POP
// for i = 0 to 39 do
11812: LD_ADDR_VAR 0 4
11816: PUSH
11817: DOUBLE
11818: LD_INT 0
11820: DEC
11821: ST_TO_ADDR
11822: LD_INT 39
11824: PUSH
11825: FOR_TO
11826: IFFALSE 11847
// SetRestrict ( i , side , true ) ;
11828: LD_VAR 0 4
11832: PPUSH
11833: LD_VAR 0 3
11837: PPUSH
11838: LD_INT 1
11840: PPUSH
11841: CALL_OW 324
11845: GO 11825
11847: POP
11848: POP
// end ; end ; end ;
11849: GO 7854
11851: POP
11852: POP
// end ; end_of_file
11853: LD_VAR 0 2
11857: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
11858: LD_INT 0
11860: PPUSH
11861: PPUSH
11862: PPUSH
11863: PPUSH
11864: PPUSH
11865: PPUSH
11866: PPUSH
11867: PPUSH
11868: PPUSH
// for i := 1 to 8 do
11869: LD_ADDR_VAR 0 2
11873: PUSH
11874: DOUBLE
11875: LD_INT 1
11877: DEC
11878: ST_TO_ADDR
11879: LD_INT 8
11881: PUSH
11882: FOR_TO
11883: IFFALSE 12267
// begin if Side_Positions [ i ] then
11885: LD_EXP 39
11889: PUSH
11890: LD_VAR 0 2
11894: ARRAY
11895: IFFALSE 12265
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
11897: LD_ADDR_VAR 0 7
11901: PUSH
11902: LD_INT 22
11904: PUSH
11905: LD_VAR 0 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 21
11916: PUSH
11917: LD_INT 1
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PPUSH
11928: CALL_OW 69
11932: PUSH
11933: LD_INT 0
11935: PLUS
11936: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11937: LD_ADDR_VAR 0 9
11941: PUSH
11942: LD_INT 22
11944: PUSH
11945: LD_VAR 0 2
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 2
11956: PUSH
11957: LD_INT 30
11959: PUSH
11960: LD_INT 0
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 30
11969: PUSH
11970: LD_INT 1
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PPUSH
11986: CALL_OW 69
11990: ST_TO_ADDR
// crates := 0 ;
11991: LD_ADDR_VAR 0 4
11995: PUSH
11996: LD_INT 0
11998: ST_TO_ADDR
// oil := 0 ;
11999: LD_ADDR_VAR 0 5
12003: PUSH
12004: LD_INT 0
12006: ST_TO_ADDR
// sib := 0 ;
12007: LD_ADDR_VAR 0 6
12011: PUSH
12012: LD_INT 0
12014: ST_TO_ADDR
// if bases then
12015: LD_VAR 0 9
12019: IFFALSE 12125
// begin for j in bases do
12021: LD_ADDR_VAR 0 3
12025: PUSH
12026: LD_VAR 0 9
12030: PUSH
12031: FOR_IN
12032: IFFALSE 12123
// begin base := GetBase ( j ) ;
12034: LD_ADDR_VAR 0 8
12038: PUSH
12039: LD_VAR 0 3
12043: PPUSH
12044: CALL_OW 274
12048: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
12049: LD_ADDR_VAR 0 4
12053: PUSH
12054: LD_VAR 0 4
12058: PUSH
12059: LD_VAR 0 8
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 275
12071: PLUS
12072: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
12073: LD_ADDR_VAR 0 5
12077: PUSH
12078: LD_VAR 0 5
12082: PUSH
12083: LD_VAR 0 8
12087: PPUSH
12088: LD_INT 2
12090: PPUSH
12091: CALL_OW 275
12095: PLUS
12096: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
12097: LD_ADDR_VAR 0 6
12101: PUSH
12102: LD_VAR 0 6
12106: PUSH
12107: LD_VAR 0 8
12111: PPUSH
12112: LD_INT 3
12114: PPUSH
12115: CALL_OW 275
12119: PLUS
12120: ST_TO_ADDR
// end ;
12121: GO 12031
12123: POP
12124: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
12125: LD_STRING setSpecText(
12127: PUSH
12128: LD_VAR 0 2
12132: STR
12133: PUSH
12134: LD_STRING ,
12136: STR
12137: PUSH
12138: LD_INT 2
12140: STR
12141: PUSH
12142: LD_STRING ,
12144: STR
12145: PUSH
12146: LD_VAR 0 4
12150: STR
12151: PUSH
12152: LD_STRING )
12154: STR
12155: PPUSH
12156: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
12160: LD_STRING setSpecText(
12162: PUSH
12163: LD_VAR 0 2
12167: STR
12168: PUSH
12169: LD_STRING ,
12171: STR
12172: PUSH
12173: LD_INT 3
12175: STR
12176: PUSH
12177: LD_STRING ,
12179: STR
12180: PUSH
12181: LD_VAR 0 5
12185: STR
12186: PUSH
12187: LD_STRING )
12189: STR
12190: PPUSH
12191: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
12195: LD_STRING setSpecText(
12197: PUSH
12198: LD_VAR 0 2
12202: STR
12203: PUSH
12204: LD_STRING ,
12206: STR
12207: PUSH
12208: LD_INT 4
12210: STR
12211: PUSH
12212: LD_STRING ,
12214: STR
12215: PUSH
12216: LD_VAR 0 6
12220: STR
12221: PUSH
12222: LD_STRING )
12224: STR
12225: PPUSH
12226: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
12230: LD_STRING setSpecText(
12232: PUSH
12233: LD_VAR 0 2
12237: STR
12238: PUSH
12239: LD_STRING ,
12241: STR
12242: PUSH
12243: LD_INT 5
12245: STR
12246: PUSH
12247: LD_STRING ,
12249: STR
12250: PUSH
12251: LD_VAR 0 7
12255: STR
12256: PUSH
12257: LD_STRING )
12259: STR
12260: PPUSH
12261: CALL_OW 559
// end ; end ;
12265: GO 11882
12267: POP
12268: POP
// end ;
12269: LD_VAR 0 1
12273: RET
// every 0 0$1 do
12274: GO 12276
12276: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
12277: LD_STRING setSpecLogoNumber(
12279: PUSH
12280: LD_INT 2
12282: STR
12283: PUSH
12284: LD_STRING ,
12286: STR
12287: PUSH
12288: LD_INT 1
12290: STR
12291: PUSH
12292: LD_STRING )
12294: STR
12295: PPUSH
12296: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
12300: LD_STRING setSpecLogoNumber(
12302: PUSH
12303: LD_INT 3
12305: STR
12306: PUSH
12307: LD_STRING ,
12309: STR
12310: PUSH
12311: LD_INT 2
12313: STR
12314: PUSH
12315: LD_STRING )
12317: STR
12318: PPUSH
12319: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
12323: LD_STRING setSpecLogoNumber(
12325: PUSH
12326: LD_INT 4
12328: STR
12329: PUSH
12330: LD_STRING ,
12332: STR
12333: PUSH
12334: LD_INT 3
12336: STR
12337: PUSH
12338: LD_STRING )
12340: STR
12341: PPUSH
12342: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
12346: LD_STRING setSpecLogoNumber(
12348: PUSH
12349: LD_INT 5
12351: STR
12352: PUSH
12353: LD_STRING ,
12355: STR
12356: PUSH
12357: LD_INT 4
12359: STR
12360: PUSH
12361: LD_STRING )
12363: STR
12364: PPUSH
12365: CALL_OW 559
// end ;
12369: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
12370: LD_INT 2
12372: PUSH
12373: LD_INT 30
12375: PUSH
12376: LD_INT 0
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 30
12385: PUSH
12386: LD_INT 1
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: PPUSH
12398: CALL_OW 69
12402: IFFALSE 12412
12404: GO 12406
12406: DISABLE
// begin enable ;
12407: ENABLE
// UpdateSpectatorBar ;
12408: CALL 11858 0 0
// end ; end_of_file
12412: END
// var respawn , inqueue ; export function init_respawning ; begin
12413: LD_INT 0
12415: PPUSH
// respawn := Rand ( 1 , 8 ) ;
12416: LD_ADDR_LOC 14
12420: PUSH
12421: LD_INT 1
12423: PPUSH
12424: LD_INT 8
12426: PPUSH
12427: CALL_OW 12
12431: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12432: LD_ADDR_LOC 15
12436: PUSH
12437: LD_INT 0
12439: PUSH
12440: LD_INT 0
12442: PUSH
12443: LD_INT 0
12445: PUSH
12446: LD_INT 0
12448: PUSH
12449: LD_INT 0
12451: PUSH
12452: LD_INT 0
12454: PUSH
12455: LD_INT 0
12457: PUSH
12458: LD_INT 0
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: ST_TO_ADDR
// end ;
12471: LD_VAR 0 1
12475: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
12476: GO 12478
12478: DISABLE
12479: LD_INT 0
12481: PPUSH
12482: PPUSH
12483: PPUSH
// begin if respawning_time_max = 0 then
12484: LD_EXP 30
12488: PUSH
12489: LD_INT 0
12491: EQUAL
12492: IFFALSE 12496
// exit ;
12494: GO 12904
// if respawn = 8 then
12496: LD_LOC 14
12500: PUSH
12501: LD_INT 8
12503: EQUAL
12504: IFFALSE 12516
// respawn := 1 else
12506: LD_ADDR_LOC 14
12510: PUSH
12511: LD_INT 1
12513: ST_TO_ADDR
12514: GO 12530
// respawn := respawn + 1 ;
12516: LD_ADDR_LOC 14
12520: PUSH
12521: LD_LOC 14
12525: PUSH
12526: LD_INT 1
12528: PLUS
12529: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
12530: LD_EXP 39
12534: PUSH
12535: LD_LOC 14
12539: ARRAY
12540: PUSH
12541: LD_LOC 15
12545: PUSH
12546: LD_LOC 14
12550: ARRAY
12551: NOT
12552: AND
12553: IFFALSE 12903
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
12555: LD_ADDR_VAR 0 1
12559: PUSH
12560: LD_INT 21
12562: PUSH
12563: LD_INT 1
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 22
12572: PUSH
12573: LD_LOC 14
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 3
12584: PUSH
12585: LD_INT 23
12587: PUSH
12588: LD_INT 0
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: PPUSH
12601: CALL_OW 69
12605: ST_TO_ADDR
// if n < number_of_people then
12606: LD_VAR 0 1
12610: PUSH
12611: LD_EXP 21
12615: LESS
12616: IFFALSE 12900
// begin aktresp := respawn ;
12618: LD_ADDR_VAR 0 3
12622: PUSH
12623: LD_LOC 14
12627: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
12628: LD_ADDR_LOC 15
12632: PUSH
12633: LD_LOC 15
12637: PPUSH
12638: LD_VAR 0 3
12642: PPUSH
12643: LD_INT 1
12645: PPUSH
12646: CALL_OW 1
12650: ST_TO_ADDR
// enable ;
12651: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
12652: LD_EXP 29
12656: PPUSH
12657: LD_EXP 30
12661: PPUSH
12662: CALL_OW 12
12666: PPUSH
12667: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
12671: LD_ADDR_LOC 15
12675: PUSH
12676: LD_LOC 15
12680: PPUSH
12681: LD_VAR 0 3
12685: PPUSH
12686: LD_INT 0
12688: PPUSH
12689: CALL_OW 1
12693: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_INT 21
12701: PUSH
12702: LD_INT 3
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 2
12711: PUSH
12712: LD_INT 30
12714: PUSH
12715: LD_INT 0
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 30
12724: PUSH
12725: LD_INT 1
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: PUSH
12737: LD_INT 50
12739: PUSH
12740: EMPTY
12741: LIST
12742: PUSH
12743: LD_INT 22
12745: PUSH
12746: LD_VAR 0 3
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: PPUSH
12761: CALL_OW 69
12765: ST_TO_ADDR
// if dep = 0 then
12766: LD_VAR 0 2
12770: PUSH
12771: LD_INT 0
12773: EQUAL
12774: IFFALSE 12778
// exit ;
12776: GO 12904
// hc_name :=  ;
12778: LD_ADDR_OWVAR 26
12782: PUSH
12783: LD_STRING 
12785: ST_TO_ADDR
// hc_importance := 0 ;
12786: LD_ADDR_OWVAR 32
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
12794: LD_INT 0
12796: PPUSH
12797: LD_INT 0
12799: PPUSH
12800: LD_EXP 22
12804: PUSH
12805: LD_INT 2
12807: DIV
12808: PPUSH
12809: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
12813: LD_ADDR_OWVAR 21
12817: PUSH
12818: LD_EXP 40
12822: PUSH
12823: LD_VAR 0 3
12827: ARRAY
12828: ST_TO_ADDR
// uc_side := aktresp ;
12829: LD_ADDR_OWVAR 20
12833: PUSH
12834: LD_VAR 0 3
12838: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
12839: LD_ADDR_VAR 0 2
12843: PUSH
12844: LD_VAR 0 2
12848: PUSH
12849: LD_INT 1
12851: PPUSH
12852: LD_VAR 0 2
12856: PPUSH
12857: CALL_OW 12
12861: ARRAY
12862: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
12863: CALL_OW 44
12867: PPUSH
12868: LD_VAR 0 2
12872: PPUSH
12873: CALL_OW 250
12877: PPUSH
12878: LD_VAR 0 2
12882: PPUSH
12883: CALL_OW 251
12887: PPUSH
12888: LD_INT 7
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL_OW 50
// end else
12898: GO 12901
// enable ;
12900: ENABLE
// end else
12901: GO 12904
// enable ;
12903: ENABLE
// end ; end_of_file
12904: PPOPN 3
12906: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
12907: LD_INT 0
12909: PPUSH
12910: PPUSH
12911: PPUSH
// BuildUpTime_Delay = 0 ;
12912: LD_ADDR_EXP 62
12916: PUSH
12917: LD_INT 0
12919: ST_TO_ADDR
// if not def_builduptime then
12920: LD_EXP 16
12924: NOT
12925: IFFALSE 12929
// exit ;
12927: GO 13112
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
12929: LD_ADDR_EXP 62
12933: PUSH
12934: LD_INT 8400
12936: PUSH
12937: LD_INT 2100
12939: PUSH
12940: LD_EXP 16
12944: MUL
12945: PLUS
12946: ST_TO_ADDR
// BuildUpTimeActive := true ;
12947: LD_ADDR_EXP 61
12951: PUSH
12952: LD_INT 1
12954: ST_TO_ADDR
// for i := 1 to 8 do
12955: LD_ADDR_VAR 0 2
12959: PUSH
12960: DOUBLE
12961: LD_INT 1
12963: DEC
12964: ST_TO_ADDR
12965: LD_INT 8
12967: PUSH
12968: FOR_TO
12969: IFFALSE 13110
// if Side_Positions [ i ] then
12971: LD_EXP 39
12975: PUSH
12976: LD_VAR 0 2
12980: ARRAY
12981: IFFALSE 13108
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
12983: LD_EXP 60
12987: PUSH
12988: LD_EXP 39
12992: PUSH
12993: LD_VAR 0 2
12997: ARRAY
12998: ARRAY
12999: PPUSH
13000: LD_INT 5
13002: PPUSH
13003: CALL_OW 424
// for j := 1 to 8 do
13007: LD_ADDR_VAR 0 3
13011: PUSH
13012: DOUBLE
13013: LD_INT 1
13015: DEC
13016: ST_TO_ADDR
13017: LD_INT 8
13019: PUSH
13020: FOR_TO
13021: IFFALSE 13106
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13023: LD_EXP 39
13027: PUSH
13028: LD_VAR 0 3
13032: ARRAY
13033: PUSH
13034: LD_EXP 36
13038: PUSH
13039: LD_VAR 0 2
13043: ARRAY
13044: PUSH
13045: LD_EXP 36
13049: PUSH
13050: LD_VAR 0 3
13054: ARRAY
13055: NONEQUAL
13056: PUSH
13057: LD_EXP 41
13061: NOT
13062: PUSH
13063: LD_VAR 0 2
13067: PUSH
13068: LD_VAR 0 3
13072: NONEQUAL
13073: AND
13074: OR
13075: AND
13076: IFFALSE 13104
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13078: LD_VAR 0 3
13082: PPUSH
13083: LD_EXP 60
13087: PUSH
13088: LD_EXP 39
13092: PUSH
13093: LD_VAR 0 2
13097: ARRAY
13098: ARRAY
13099: PPUSH
13100: CALL_OW 333
13104: GO 13020
13106: POP
13107: POP
// end ;
13108: GO 12968
13110: POP
13111: POP
// end ;
13112: LD_VAR 0 1
13116: RET
// export function EndBuildUp ; var i , j ; begin
13117: LD_INT 0
13119: PPUSH
13120: PPUSH
13121: PPUSH
// BuildUpTimeActive := false ;
13122: LD_ADDR_EXP 61
13126: PUSH
13127: LD_INT 0
13129: ST_TO_ADDR
// for i := 1 to 8 do
13130: LD_ADDR_VAR 0 2
13134: PUSH
13135: DOUBLE
13136: LD_INT 1
13138: DEC
13139: ST_TO_ADDR
13140: LD_INT 8
13142: PUSH
13143: FOR_TO
13144: IFFALSE 13285
// if Side_Positions [ i ] then
13146: LD_EXP 39
13150: PUSH
13151: LD_VAR 0 2
13155: ARRAY
13156: IFFALSE 13283
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
13158: LD_EXP 60
13162: PUSH
13163: LD_EXP 39
13167: PUSH
13168: LD_VAR 0 2
13172: ARRAY
13173: ARRAY
13174: PPUSH
13175: LD_INT 0
13177: PPUSH
13178: CALL_OW 424
// for j := 1 to 8 do
13182: LD_ADDR_VAR 0 3
13186: PUSH
13187: DOUBLE
13188: LD_INT 1
13190: DEC
13191: ST_TO_ADDR
13192: LD_INT 8
13194: PUSH
13195: FOR_TO
13196: IFFALSE 13281
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
13198: LD_EXP 39
13202: PUSH
13203: LD_VAR 0 3
13207: ARRAY
13208: PUSH
13209: LD_EXP 36
13213: PUSH
13214: LD_VAR 0 2
13218: ARRAY
13219: PUSH
13220: LD_EXP 36
13224: PUSH
13225: LD_VAR 0 3
13229: ARRAY
13230: NONEQUAL
13231: PUSH
13232: LD_EXP 41
13236: NOT
13237: PUSH
13238: LD_VAR 0 2
13242: PUSH
13243: LD_VAR 0 3
13247: NONEQUAL
13248: AND
13249: OR
13250: AND
13251: IFFALSE 13279
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
13253: LD_VAR 0 3
13257: PPUSH
13258: LD_EXP 60
13262: PUSH
13263: LD_EXP 39
13267: PUSH
13268: LD_VAR 0 2
13272: ARRAY
13273: ARRAY
13274: PPUSH
13275: CALL_OW 334
13279: GO 13195
13281: POP
13282: POP
// end ;
13283: GO 13143
13285: POP
13286: POP
// end ;
13287: LD_VAR 0 1
13291: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
13292: LD_EXP 61
13296: IFFALSE 13471
13298: GO 13300
13300: DISABLE
13301: LD_INT 0
13303: PPUSH
13304: PPUSH
// begin for i := 1 to 8 do
13305: LD_ADDR_VAR 0 1
13309: PUSH
13310: DOUBLE
13311: LD_INT 1
13313: DEC
13314: ST_TO_ADDR
13315: LD_INT 8
13317: PUSH
13318: FOR_TO
13319: IFFALSE 13468
// if Side_Positions [ i ] then
13321: LD_EXP 39
13325: PUSH
13326: LD_VAR 0 1
13330: ARRAY
13331: IFFALSE 13466
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
13333: LD_ADDR_VAR 0 2
13337: PUSH
13338: LD_EXP 60
13342: PUSH
13343: LD_EXP 39
13347: PUSH
13348: LD_VAR 0 1
13352: ARRAY
13353: ARRAY
13354: PPUSH
13355: LD_INT 2
13357: PUSH
13358: LD_INT 21
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 21
13370: PUSH
13371: LD_INT 2
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 22
13385: PUSH
13386: LD_OWVAR 2
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 70
13403: PUSH
13404: FOR_IN
13405: IFFALSE 13464
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
13407: LD_EXP 36
13411: PUSH
13412: LD_VAR 0 1
13416: ARRAY
13417: PUSH
13418: LD_EXP 36
13422: PUSH
13423: LD_OWVAR 2
13427: ARRAY
13428: NONEQUAL
13429: PUSH
13430: LD_EXP 41
13434: NOT
13435: PUSH
13436: LD_VAR 0 1
13440: PUSH
13441: LD_OWVAR 2
13445: NONEQUAL
13446: AND
13447: OR
13448: IFFALSE 13462
// ComMoveToArea ( un , BuildUpEscape ) ;
13450: LD_VAR 0 2
13454: PPUSH
13455: LD_INT 13
13457: PPUSH
13458: CALL_OW 113
13462: GO 13404
13464: POP
13465: POP
13466: GO 13318
13468: POP
13469: POP
// enable ;
13470: ENABLE
// end ;
13471: PPOPN 2
13473: END
// every 0 0$1 trigger def_builduptime do
13474: LD_EXP 16
13478: IFFALSE 13504
13480: GO 13482
13482: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
13483: LD_INT 8400
13485: PUSH
13486: LD_EXP 16
13490: PUSH
13491: LD_INT 2100
13493: MUL
13494: PLUS
13495: PPUSH
13496: CALL_OW 67
// EndBuildUp ;
13500: CALL 13117 0 0
// end ; end_of_file
13504: END
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
13505: LD_INT 0
13507: PPUSH
13508: PPUSH
// enable ( 98 ) ;
13509: LD_INT 98
13511: ENABLE_MARKED
// GameEnded = false ;
13512: LD_ADDR_LOC 17
13516: PUSH
13517: LD_INT 0
13519: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13520: LD_ADDR_LOC 16
13524: PUSH
13525: LD_INT 0
13527: PUSH
13528: LD_INT 0
13530: PUSH
13531: LD_INT 0
13533: PUSH
13534: LD_INT 0
13536: PUSH
13537: LD_INT 0
13539: PUSH
13540: LD_INT 0
13542: PUSH
13543: LD_INT 0
13545: PUSH
13546: LD_INT 0
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: LIST
13558: ST_TO_ADDR
// unfoged = false ;
13559: LD_ADDR_LOC 18
13563: PUSH
13564: LD_INT 0
13566: ST_TO_ADDR
// defeated_specs := [ ] ;
13567: LD_ADDR_LOC 19
13571: PUSH
13572: EMPTY
13573: ST_TO_ADDR
// for i = 1 to side_positions do
13574: LD_ADDR_VAR 0 2
13578: PUSH
13579: DOUBLE
13580: LD_INT 1
13582: DEC
13583: ST_TO_ADDR
13584: LD_EXP 39
13588: PUSH
13589: FOR_TO
13590: IFFALSE 13630
// if not side_positions [ i ] then
13592: LD_EXP 39
13596: PUSH
13597: LD_VAR 0 2
13601: ARRAY
13602: NOT
13603: IFFALSE 13628
// defeated = replace ( defeated , i , true ) ;
13605: LD_ADDR_LOC 16
13609: PUSH
13610: LD_LOC 16
13614: PPUSH
13615: LD_VAR 0 2
13619: PPUSH
13620: LD_INT 1
13622: PPUSH
13623: CALL_OW 1
13627: ST_TO_ADDR
13628: GO 13589
13630: POP
13631: POP
// end ;
13632: LD_VAR 0 1
13636: RET
// function CanWinLoose ; begin
13637: LD_INT 0
13639: PPUSH
// Result := true ;
13640: LD_ADDR_VAR 0 1
13644: PUSH
13645: LD_INT 1
13647: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
13648: CALL_OW 518
13652: PUSH
13653: CALL_OW 519
13657: PUSH
13658: LD_INT 0
13660: GREATER
13661: AND
13662: IFFALSE 13672
// Result := false ;
13664: LD_ADDR_VAR 0 1
13668: PUSH
13669: LD_INT 0
13671: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
13672: CALL_OW 531
13676: PUSH
13677: CALL_OW 519
13681: PUSH
13682: LD_INT 1
13684: GREATER
13685: AND
13686: IFFALSE 13696
// Result := false ;
13688: LD_ADDR_VAR 0 1
13692: PUSH
13693: LD_INT 0
13695: ST_TO_ADDR
// end ;
13696: LD_VAR 0 1
13700: RET
// export function HasPower ( i ) ; var k , h ; begin
13701: LD_INT 0
13703: PPUSH
13704: PPUSH
13705: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
13706: LD_VAR 0 1
13710: PPUSH
13711: CALL_OW 108
13715: NOT
13716: PUSH
13717: LD_EXP 38
13721: PUSH
13722: LD_VAR 0 1
13726: ARRAY
13727: NOT
13728: AND
13729: PUSH
13730: LD_OWVAR 4
13734: AND
13735: IFFALSE 13747
// begin result = false ;
13737: LD_ADDR_VAR 0 2
13741: PUSH
13742: LD_INT 0
13744: ST_TO_ADDR
// end else
13745: GO 14042
// case def_win_rules of 0 :
13747: LD_EXP 34
13751: PUSH
13752: LD_INT 0
13754: DOUBLE
13755: EQUAL
13756: IFTRUE 13760
13758: GO 13923
13760: POP
// if def_people_respawning then
13761: LD_EXP 11
13765: IFFALSE 13856
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
13767: LD_ADDR_VAR 0 2
13771: PUSH
13772: LD_INT 22
13774: PUSH
13775: LD_VAR 0 1
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 2
13786: PUSH
13787: LD_INT 21
13789: PUSH
13790: LD_INT 1
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 33
13799: PUSH
13800: LD_INT 3
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 33
13809: PUSH
13810: LD_INT 5
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 30
13819: PUSH
13820: LD_INT 0
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 30
13829: PUSH
13830: LD_INT 1
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PPUSH
13849: CALL_OW 69
13853: ST_TO_ADDR
13854: GO 13921
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
13856: LD_ADDR_VAR 0 2
13860: PUSH
13861: LD_INT 22
13863: PUSH
13864: LD_VAR 0 1
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 2
13875: PUSH
13876: LD_INT 21
13878: PUSH
13879: LD_INT 1
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 33
13888: PUSH
13889: LD_INT 3
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 33
13898: PUSH
13899: LD_INT 5
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: ST_TO_ADDR
13921: GO 14042
13923: LD_INT 1
13925: DOUBLE
13926: EQUAL
13927: IFTRUE 13931
13929: GO 13970
13931: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
13932: LD_ADDR_VAR 0 2
13936: PUSH
13937: LD_INT 22
13939: PUSH
13940: LD_VAR 0 1
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PUSH
13949: LD_INT 21
13951: PUSH
13952: LD_INT 1
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PPUSH
13963: CALL_OW 69
13967: ST_TO_ADDR
13968: GO 14042
13970: LD_INT 2
13972: DOUBLE
13973: EQUAL
13974: IFTRUE 13978
13976: GO 14041
13978: POP
// begin h = false ;
13979: LD_ADDR_VAR 0 4
13983: PUSH
13984: LD_INT 0
13986: ST_TO_ADDR
// for k in heroes [ i ] do
13987: LD_ADDR_VAR 0 3
13991: PUSH
13992: LD_EXP 50
13996: PUSH
13997: LD_VAR 0 1
14001: ARRAY
14002: PUSH
14003: FOR_IN
14004: IFFALSE 14027
// if IsLive ( k ) then
14006: LD_VAR 0 3
14010: PPUSH
14011: CALL_OW 300
14015: IFFALSE 14025
// h = true ;
14017: LD_ADDR_VAR 0 4
14021: PUSH
14022: LD_INT 1
14024: ST_TO_ADDR
14025: GO 14003
14027: POP
14028: POP
// Result := h ;
14029: LD_ADDR_VAR 0 2
14033: PUSH
14034: LD_VAR 0 4
14038: ST_TO_ADDR
// end ; end ;
14039: GO 14042
14041: POP
// end ;
14042: LD_VAR 0 2
14046: RET
// function AlliedSides ( i , j ) ; begin
14047: LD_INT 0
14049: PPUSH
// Result := false ;
14050: LD_ADDR_VAR 0 3
14054: PUSH
14055: LD_INT 0
14057: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
14058: LD_VAR 0 1
14062: PPUSH
14063: LD_VAR 0 2
14067: PPUSH
14068: CALL_OW 81
14072: PUSH
14073: LD_INT 1
14075: EQUAL
14076: PUSH
14077: LD_VAR 0 2
14081: PPUSH
14082: LD_VAR 0 1
14086: PPUSH
14087: CALL_OW 81
14091: PUSH
14092: LD_INT 1
14094: EQUAL
14095: AND
14096: PUSH
14097: LD_VAR 0 1
14101: PPUSH
14102: CALL_OW 83
14106: AND
14107: PUSH
14108: LD_VAR 0 2
14112: PPUSH
14113: CALL_OW 83
14117: AND
14118: IFFALSE 14128
// Result := true ;
14120: LD_ADDR_VAR 0 3
14124: PUSH
14125: LD_INT 1
14127: ST_TO_ADDR
// end ;
14128: LD_VAR 0 3
14132: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
14133: CALL 13637 0 0
14137: PUSH
14138: LD_LOC 17
14142: NOT
14143: AND
14144: IFFALSE 14160
14146: GO 14148
14148: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
14149: LD_ADDR_EXP 59
14153: PUSH
14154: LD_STRING #Player-Ended
14156: PUSH
14157: EMPTY
14158: LIST
14159: ST_TO_ADDR
14160: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
14161: CALL 13637 0 0
14165: PUSH
14166: LD_LOC 17
14170: AND
14171: IFFALSE 14180
14173: GO 14175
14175: DISABLE
// YouLostInMultiplayer ;
14176: CALL_OW 107
14180: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
14181: CALL 13637 0 0
14185: NOT
14186: PUSH
14187: CALL_OW 531
14191: NOT
14192: AND
14193: IFFALSE 14209
14195: GO 14197
14197: DISABLE
// WaitServerStrings = [ #server-wait ] ;
14198: LD_ADDR_EXP 59
14202: PUSH
14203: LD_STRING #server-wait
14205: PUSH
14206: EMPTY
14207: LIST
14208: ST_TO_ADDR
14209: END
// every 100 trigger IAmSpec do
14210: CALL_OW 531
14214: IFFALSE 14230
14216: GO 14218
14218: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
14219: LD_ADDR_EXP 59
14223: PUSH
14224: LD_STRING #Player-IAmSpec
14226: PUSH
14227: EMPTY
14228: LIST
14229: ST_TO_ADDR
14230: END
// every 100 trigger GameEnded and IAmSpec do
14231: LD_LOC 17
14235: PUSH
14236: CALL_OW 531
14240: AND
14241: IFFALSE 14250
14243: GO 14245
14245: DISABLE
// YouLostInMultiplayer ;
14246: CALL_OW 107
14250: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
14251: CALL 13637 0 0
14255: PUSH
14256: LD_LOC 17
14260: NOT
14261: AND
14262: IFFALSE 14278
14264: GO 14266
14266: DISABLE
// WaitServerStrings = [ $player-win ] ;
14267: LD_ADDR_EXP 59
14271: PUSH
14272: LD_STRING $player-win
14274: PUSH
14275: EMPTY
14276: LIST
14277: ST_TO_ADDR
14278: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
14279: CALL 13637 0 0
14283: PUSH
14284: LD_LOC 17
14288: AND
14289: IFFALSE 14313
14291: GO 14293
14293: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
14294: LD_EXP 40
14298: PUSH
14299: LD_OWVAR 7
14303: ARRAY
14304: PPUSH
14305: CALL 7492 0 1
// YouWinInMultiplayer ;
14309: CALL_OW 106
// end ;
14313: END
// every 100 trigger isEditor marked 401 do
14314: LD_OWVAR 84
14318: IFFALSE 14334
14320: GO 14322
14322: DISABLE
// Debug_Strings = [ You won ] ;
14323: LD_ADDR_OWVAR 48
14327: PUSH
14328: LD_STRING You won
14330: PUSH
14331: EMPTY
14332: LIST
14333: ST_TO_ADDR
14334: END
// every 100 trigger isEditor marked 400 do
14335: LD_OWVAR 84
14339: IFFALSE 14355
14341: GO 14343
14343: DISABLE
// Debug_Strings = [ You loss ] ;
14344: LD_ADDR_OWVAR 48
14348: PUSH
14349: LD_STRING You loss
14351: PUSH
14352: EMPTY
14353: LIST
14354: ST_TO_ADDR
14355: END
// every 100 marked 98 do var i , un ;
14356: GO 14358
14358: DISABLE
14359: LD_INT 0
14361: PPUSH
14362: PPUSH
// begin for i = 1 to side_positions do
14363: LD_ADDR_VAR 0 1
14367: PUSH
14368: DOUBLE
14369: LD_INT 1
14371: DEC
14372: ST_TO_ADDR
14373: LD_EXP 39
14377: PUSH
14378: FOR_TO
14379: IFFALSE 14466
// begin if side_positions [ i ] then
14381: LD_EXP 39
14385: PUSH
14386: LD_VAR 0 1
14390: ARRAY
14391: IFFALSE 14464
// if not HasPower ( i ) and not defeated [ i ] then
14393: LD_VAR 0 1
14397: PPUSH
14398: CALL 13701 0 1
14402: NOT
14403: PUSH
14404: LD_LOC 16
14408: PUSH
14409: LD_VAR 0 1
14413: ARRAY
14414: NOT
14415: AND
14416: IFFALSE 14464
// begin defeated = replace ( defeated , i , true ) ;
14418: LD_ADDR_LOC 16
14422: PUSH
14423: LD_LOC 16
14427: PPUSH
14428: LD_VAR 0 1
14432: PPUSH
14433: LD_INT 1
14435: PPUSH
14436: CALL_OW 1
14440: ST_TO_ADDR
// if i = mp_player_side then
14441: LD_VAR 0 1
14445: PUSH
14446: LD_OWVAR 7
14450: EQUAL
14451: IFFALSE 14464
// begin Multiplayer_Loose_Message ;
14453: CALL_OW 521
// SetPlayerSpectator ( ) ;
14457: CALL_OW 572
// enable ( 400 ) ;
14461: LD_INT 400
14463: ENABLE_MARKED
// end ; end ; end ;
14464: GO 14378
14466: POP
14467: POP
// DidGameEnd ;
14468: CALL 14483 0 0
// if not GameEnded then
14472: LD_LOC 17
14476: NOT
14477: IFFALSE 14480
// enable ;
14479: ENABLE
// end ;
14480: PPOPN 2
14482: END
// function DidGameEnd ; var i , k , enemy ; begin
14483: LD_INT 0
14485: PPUSH
14486: PPUSH
14487: PPUSH
14488: PPUSH
// enemy = [ ] ;
14489: LD_ADDR_VAR 0 4
14493: PUSH
14494: EMPTY
14495: ST_TO_ADDR
// for i = 1 to side_positions do
14496: LD_ADDR_VAR 0 2
14500: PUSH
14501: DOUBLE
14502: LD_INT 1
14504: DEC
14505: ST_TO_ADDR
14506: LD_EXP 39
14510: PUSH
14511: FOR_TO
14512: IFFALSE 14606
// if not defeated [ i ] then
14514: LD_LOC 16
14518: PUSH
14519: LD_VAR 0 2
14523: ARRAY
14524: NOT
14525: IFFALSE 14604
// for k = 1 to side_positions do
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: DOUBLE
14533: LD_INT 1
14535: DEC
14536: ST_TO_ADDR
14537: LD_EXP 39
14541: PUSH
14542: FOR_TO
14543: IFFALSE 14602
// if not defeated [ k ] then
14545: LD_LOC 16
14549: PUSH
14550: LD_VAR 0 3
14554: ARRAY
14555: NOT
14556: IFFALSE 14600
// if not AlliedSides ( i , k ) then
14558: LD_VAR 0 2
14562: PPUSH
14563: LD_VAR 0 3
14567: PPUSH
14568: CALL 14047 0 2
14572: NOT
14573: IFFALSE 14600
// enemy = enemy ^ [ i , k ] ;
14575: LD_ADDR_VAR 0 4
14579: PUSH
14580: LD_VAR 0 4
14584: PUSH
14585: LD_VAR 0 2
14589: PUSH
14590: LD_VAR 0 3
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: ADD
14599: ST_TO_ADDR
14600: GO 14542
14602: POP
14603: POP
14604: GO 14511
14606: POP
14607: POP
// if not enemy then
14608: LD_VAR 0 4
14612: NOT
14613: IFFALSE 14639
// begin GameEnded = true ;
14615: LD_ADDR_LOC 17
14619: PUSH
14620: LD_INT 1
14622: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
14623: LD_LOC 16
14627: PUSH
14628: LD_OWVAR 7
14632: ARRAY
14633: NOT
14634: IFFALSE 14639
// enable ( 401 ) ;
14636: LD_INT 401
14638: ENABLE_MARKED
// end ; end ;
14639: LD_VAR 0 1
14643: RET
// function unfog ; var k , friends ; begin
14644: LD_INT 0
14646: PPUSH
14647: PPUSH
14648: PPUSH
// for k = 1 to side_positions do
14649: LD_ADDR_VAR 0 2
14653: PUSH
14654: DOUBLE
14655: LD_INT 1
14657: DEC
14658: ST_TO_ADDR
14659: LD_EXP 39
14663: PUSH
14664: FOR_TO
14665: IFFALSE 14721
// if not defeated [ k ] then
14667: LD_LOC 16
14671: PUSH
14672: LD_VAR 0 2
14676: ARRAY
14677: NOT
14678: IFFALSE 14719
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
14680: LD_OWVAR 7
14684: PPUSH
14685: LD_VAR 0 2
14689: PPUSH
14690: CALL_OW 81
14694: PUSH
14695: LD_INT 1
14697: PUSH
14698: EMPTY
14699: LIST
14700: IN
14701: IFFALSE 14719
// friends = friends ^ k ;
14703: LD_ADDR_VAR 0 3
14707: PUSH
14708: LD_VAR 0 3
14712: PUSH
14713: LD_VAR 0 2
14717: ADD
14718: ST_TO_ADDR
14719: GO 14664
14721: POP
14722: POP
// if not friends then
14723: LD_VAR 0 3
14727: NOT
14728: IFFALSE 14742
// begin SetPlayerSpectator ( ) ;
14730: CALL_OW 572
// unfoged = true ;
14734: LD_ADDR_LOC 18
14738: PUSH
14739: LD_INT 1
14741: ST_TO_ADDR
// end ; end ;
14742: LD_VAR 0 1
14746: RET
// export function MakeGameEnd ; begin
14747: LD_INT 0
14749: PPUSH
// SetPlayerSpectator ( ) ;
14750: CALL_OW 572
// unfoged = true ;
14754: LD_ADDR_LOC 18
14758: PUSH
14759: LD_INT 1
14761: ST_TO_ADDR
// wait ( 0 0$5 ) ;
14762: LD_INT 175
14764: PPUSH
14765: CALL_OW 67
// GameEnded = true ;
14769: LD_ADDR_LOC 17
14773: PUSH
14774: LD_INT 1
14776: ST_TO_ADDR
// end ;
14777: LD_VAR 0 1
14781: RET
// export function GetGameEnded ; begin
14782: LD_INT 0
14784: PPUSH
// result = GameEnded ;
14785: LD_ADDR_VAR 0 1
14789: PUSH
14790: LD_LOC 17
14794: ST_TO_ADDR
// end ;
14795: LD_VAR 0 1
14799: RET
