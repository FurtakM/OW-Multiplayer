// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_amount_of_siberit , def_public_score , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , spect , def_spect , siberite_bomb_Delay , tech_level ; export Side_Teams , Teams ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function read_multiplayer_and_game_parameters ; var i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
// if Multiplayer then
   4: LD_OWVAR 4
   8: IFFALSE 72
// begin Game_Type := mp_game_type ;
  10: LD_ADDR_EXP 18
  14: PUSH
  15: LD_OWVAR 6
  19: ST_TO_ADDR
// Your_Side := mp_player_side ;
  20: LD_ADDR_OWVAR 2
  24: PUSH
  25: LD_OWVAR 7
  29: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  30: LD_ADDR_EXP 37
  34: PUSH
  35: LD_OWVAR 17
  39: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
  40: LD_ADDR_EXP 35
  44: PUSH
  45: LD_OWVAR 15
  49: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: LD_OWVAR 16
  59: ST_TO_ADDR
// Teams := mp_teams ;
  60: LD_ADDR_EXP 36
  64: PUSH
  65: LD_OWVAR 12
  69: ST_TO_ADDR
// end else
  70: GO 254
// begin Game_Type := 1 ;
  72: LD_ADDR_EXP 18
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// Your_Side := 1 ;
  80: LD_ADDR_OWVAR 2
  84: PUSH
  85: LD_INT 1
  87: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
  88: LD_ADDR_EXP 37
  92: PUSH
  93: LD_INT 1
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 3
 101: PUSH
 102: LD_INT 4
 104: PUSH
 105: LD_INT 5
 107: PUSH
 108: LD_INT 6
 110: PUSH
 111: LD_INT 0
 113: PUSH
 114: LD_INT 0
 116: PUSH
 117: EMPTY
 118: LIST
 119: LIST
 120: LIST
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: LIST
 126: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 127: LD_ADDR_EXP 35
 131: PUSH
 132: LD_INT 1
 134: PUSH
 135: LD_INT 2
 137: PUSH
 138: LD_INT 3
 140: PUSH
 141: LD_INT 4
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 6
 149: PUSH
 150: LD_INT 0
 152: PUSH
 153: LD_INT 0
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: LIST
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 0 , 0 ] ;
 166: LD_ADDR_EXP 38
 170: PUSH
 171: LD_INT 1
 173: PUSH
 174: LD_INT 2
 176: PUSH
 177: LD_INT 3
 179: PUSH
 180: LD_INT 1
 182: PUSH
 183: LD_INT 2
 185: PUSH
 186: LD_INT 3
 188: PUSH
 189: LD_INT 0
 191: PUSH
 192: LD_INT 0
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] ] ;
 205: LD_ADDR_EXP 36
 209: PUSH
 210: LD_INT 1
 212: PUSH
 213: EMPTY
 214: LIST
 215: PUSH
 216: LD_INT 2
 218: PUSH
 219: EMPTY
 220: LIST
 221: PUSH
 222: LD_INT 3
 224: PUSH
 225: EMPTY
 226: LIST
 227: PUSH
 228: LD_INT 4
 230: PUSH
 231: EMPTY
 232: LIST
 233: PUSH
 234: LD_INT 5
 236: PUSH
 237: EMPTY
 238: LIST
 239: PUSH
 240: LD_INT 6
 242: PUSH
 243: EMPTY
 244: LIST
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: LIST
 252: LIST
 253: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 254: LD_ADDR_EXP 39
 258: PUSH
 259: LD_EXP 35
 263: PUSH
 264: LD_INT 0
 266: PUSH
 267: EMPTY
 268: LIST
 269: DIFF
 270: PUSH
 271: LD_INT 1
 273: GREATER
 274: ST_TO_ADDR
// if Multiplayer then
 275: LD_OWVAR 4
 279: IFFALSE 517
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 281: LD_ADDR_EXP 1
 285: PUSH
 286: LD_INT 0
 288: PPUSH
 289: CALL_OW 426
 293: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 294: LD_ADDR_EXP 2
 298: PUSH
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 426
 306: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 307: LD_ADDR_EXP 3
 311: PUSH
 312: LD_INT 2
 314: PPUSH
 315: CALL_OW 426
 319: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 320: LD_ADDR_EXP 4
 324: PUSH
 325: LD_INT 3
 327: PPUSH
 328: CALL_OW 426
 332: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 333: LD_ADDR_EXP 5
 337: PUSH
 338: LD_INT 4
 340: PPUSH
 341: CALL_OW 426
 345: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 346: LD_ADDR_EXP 6
 350: PUSH
 351: LD_INT 5
 353: PPUSH
 354: CALL_OW 426
 358: ST_TO_ADDR
// def_extra_sib_deposits := GetMultiplayerSetting ( 6 ) ;
 359: LD_ADDR_EXP 7
 363: PUSH
 364: LD_INT 6
 366: PPUSH
 367: CALL_OW 426
 371: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 372: LD_ADDR_EXP 8
 376: PUSH
 377: LD_INT 10
 379: PPUSH
 380: CALL_OW 426
 384: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 385: LD_ADDR_EXP 9
 389: PUSH
 390: LD_INT 11
 392: PPUSH
 393: CALL_OW 426
 397: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 398: LD_ADDR_EXP 10
 402: PUSH
 403: LD_INT 12
 405: PPUSH
 406: CALL_OW 426
 410: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 411: LD_ADDR_EXP 11
 415: PUSH
 416: LD_INT 13
 418: PPUSH
 419: CALL_OW 426
 423: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 424: LD_ADDR_EXP 12
 428: PUSH
 429: LD_INT 14
 431: PPUSH
 432: CALL_OW 426
 436: ST_TO_ADDR
// def_amount_of_siberit := GetMultiplayerSetting ( 15 ) ;
 437: LD_ADDR_EXP 13
 441: PUSH
 442: LD_INT 15
 444: PPUSH
 445: CALL_OW 426
 449: ST_TO_ADDR
// def_public_score := GetMultiplayerSetting ( 16 ) ;
 450: LD_ADDR_EXP 14
 454: PUSH
 455: LD_INT 16
 457: PPUSH
 458: CALL_OW 426
 462: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 463: LD_ADDR_EXP 15
 467: PUSH
 468: LD_INT 17
 470: PPUSH
 471: CALL_OW 426
 475: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 476: LD_ADDR_EXP 16
 480: PUSH
 481: LD_INT 20
 483: PPUSH
 484: CALL_OW 426
 488: ST_TO_ADDR
// def_spect := GetMultiplayerSetting ( 22 ) ;
 489: LD_ADDR_EXP 32
 493: PUSH
 494: LD_INT 22
 496: PPUSH
 497: CALL_OW 426
 501: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 23 ) ;
 502: LD_ADDR_EXP 34
 506: PUSH
 507: LD_INT 23
 509: PPUSH
 510: CALL_OW 426
 514: ST_TO_ADDR
// end else
 515: GO 665
// begin Randomize ;
 517: CALL_OW 10
// def_base_level := 2 ;
 521: LD_ADDR_EXP 1
 525: PUSH
 526: LD_INT 2
 528: ST_TO_ADDR
// def_amount_of_people := 0 ;
 529: LD_ADDR_EXP 2
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// def_skill_level := 1 ;
 537: LD_ADDR_EXP 3
 541: PUSH
 542: LD_INT 1
 544: ST_TO_ADDR
// def_starting_resources := 2 ;
 545: LD_ADDR_EXP 4
 549: PUSH
 550: LD_INT 2
 552: ST_TO_ADDR
// def_shipments_density := 1 ;
 553: LD_ADDR_EXP 5
 557: PUSH
 558: LD_INT 1
 560: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 561: LD_ADDR_EXP 6
 565: PUSH
 566: LD_INT 0
 568: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 569: LD_ADDR_EXP 7
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// def_shared_vision := 1 ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: ST_TO_ADDR
// def_morale_flags := 1 ;
 585: LD_ADDR_EXP 9
 589: PUSH
 590: LD_INT 1
 592: ST_TO_ADDR
// def_siberite_detection := 1 ;
 593: LD_ADDR_EXP 10
 597: PUSH
 598: LD_INT 1
 600: ST_TO_ADDR
// def_people_respawning := 2 ;
 601: LD_ADDR_EXP 11
 605: PUSH
 606: LD_INT 2
 608: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 609: LD_ADDR_EXP 12
 613: PUSH
 614: LD_INT 3
 616: ST_TO_ADDR
// def_amount_of_siberit := 0 ;
 617: LD_ADDR_EXP 13
 621: PUSH
 622: LD_INT 0
 624: ST_TO_ADDR
// def_public_score := 0 ;
 625: LD_ADDR_EXP 14
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 633: LD_ADDR_EXP 15
 637: PUSH
 638: LD_INT 0
 640: ST_TO_ADDR
// def_builduptime := 1 ;
 641: LD_ADDR_EXP 16
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
// def_spect := 1 ;
 649: LD_ADDR_EXP 32
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// tech_level = 0 ;
 657: LD_ADDR_EXP 34
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// end ; if isSGUI then
 665: LD_OWVAR 83
 669: IFFALSE 677
// setMpTechs ( ) else
 671: CALL 8846 0 0
 675: GO 690
// SetMpTechLevel ( tech_level + 1 ) ;
 677: LD_EXP 34
 681: PUSH
 682: LD_INT 1
 684: PLUS
 685: PPUSH
 686: CALL 8993 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 690: LD_ADDR_EXP 19
 694: PUSH
 695: LD_INT 0
 697: PUSH
 698: LD_INT 1
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: PUSH
 709: LD_EXP 1
 713: PUSH
 714: LD_INT 1
 716: PLUS
 717: ARRAY
 718: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 719: LD_ADDR_EXP 20
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 3
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: PUSH
 738: LD_EXP 1
 742: PUSH
 743: LD_INT 1
 745: PLUS
 746: ARRAY
 747: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 748: LD_ADDR_EXP 21
 752: PUSH
 753: LD_INT 9
 755: PUSH
 756: LD_INT 12
 758: PUSH
 759: LD_INT 15
 761: PUSH
 762: LD_INT 24
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: LD_EXP 2
 775: PUSH
 776: LD_INT 1
 778: PLUS
 779: ARRAY
 780: ST_TO_ADDR
// skill_level := [ 2 , 3 , 5 , 6 ] [ def_skill_level + 1 ] ;
 781: LD_ADDR_EXP 22
 785: PUSH
 786: LD_INT 2
 788: PUSH
 789: LD_INT 3
 791: PUSH
 792: LD_INT 5
 794: PUSH
 795: LD_INT 6
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: LIST
 803: PUSH
 804: LD_EXP 3
 808: PUSH
 809: LD_INT 1
 811: PLUS
 812: ARRAY
 813: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 814: LD_ADDR_EXP 24
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: LD_INT 0
 824: PUSH
 825: LD_INT 0
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 30
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PUSH
 847: LD_INT 50
 849: PUSH
 850: LD_INT 20
 852: PUSH
 853: LD_INT 0
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: LIST
 860: PUSH
 861: LD_INT 80
 863: PUSH
 864: LD_INT 40
 866: PUSH
 867: LD_INT 20
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_EXP 4
 885: PUSH
 886: LD_INT 1
 888: PLUS
 889: ARRAY
 890: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 891: LD_ADDR_EXP 23
 895: PUSH
 896: LD_INT 10
 898: PUSH
 899: EMPTY
 900: LIST
 901: PUSH
 902: LD_INT 7
 904: PUSH
 905: LD_INT 14
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: LD_INT 6
 914: PUSH
 915: LD_INT 12
 917: PUSH
 918: LD_INT 18
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: LIST
 925: PUSH
 926: LD_INT 5
 928: PUSH
 929: LD_INT 10
 931: PUSH
 932: LD_INT 15
 934: PUSH
 935: LD_INT 20
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: LIST
 948: LIST
 949: PUSH
 950: LD_EXP 4
 954: PUSH
 955: LD_INT 1
 957: PLUS
 958: ARRAY
 959: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 , 50 ] [ def_shipments_density + 1 ] ;
 960: LD_ADDR_EXP 25
 964: PUSH
 965: LD_INT 150
 967: PUSH
 968: LD_INT 125
 970: PUSH
 971: LD_INT 100
 973: PUSH
 974: LD_INT 50
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: PUSH
 983: LD_EXP 5
 987: PUSH
 988: LD_INT 1
 990: PLUS
 991: ARRAY
 992: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
 993: LD_ADDR_EXP 29
 997: PUSH
 998: LD_INT 0
1000: PUSH
1001: LD_INT 10500
1003: PUSH
1004: LD_INT 6300
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_EXP 11
1016: PUSH
1017: LD_INT 1
1019: PLUS
1020: ARRAY
1021: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1022: LD_ADDR_EXP 30
1026: PUSH
1027: LD_INT 0
1029: PUSH
1030: LD_INT 31500
1032: PUSH
1033: LD_INT 10500
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_EXP 11
1045: PUSH
1046: LD_INT 1
1048: PLUS
1049: ARRAY
1050: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1051: LD_ADDR_EXP 27
1055: PUSH
1056: LD_INT 0
1058: PUSH
1059: LD_INT 1
1061: PUSH
1062: LD_INT 2
1064: PUSH
1065: LD_INT 3
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: PUSH
1074: LD_EXP 12
1078: PUSH
1079: LD_INT 1
1081: PLUS
1082: ARRAY
1083: ST_TO_ADDR
// amount_of_siberit := [ 30 , 50 , 80 , 100 , 130 , 150 , 200 ] [ def_amount_of_siberit + 1 ] ;
1084: LD_ADDR_EXP 28
1088: PUSH
1089: LD_INT 30
1091: PUSH
1092: LD_INT 50
1094: PUSH
1095: LD_INT 80
1097: PUSH
1098: LD_INT 100
1100: PUSH
1101: LD_INT 130
1103: PUSH
1104: LD_INT 150
1106: PUSH
1107: LD_INT 200
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: PUSH
1119: LD_EXP 13
1123: PUSH
1124: LD_INT 1
1126: PLUS
1127: ARRAY
1128: ST_TO_ADDR
// morale_decreasing_time := [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1129: LD_ADDR_EXP 26
1133: PUSH
1134: LD_INT 1
1136: NEG
1137: PUSH
1138: LD_INT 350
1140: PUSH
1141: LD_INT 700
1143: PUSH
1144: LD_INT 1400
1146: PUSH
1147: LD_INT 0
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_EXP 9
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ARRAY
1166: ST_TO_ADDR
// battle_flags_id := [ ] ;
1167: LD_ADDR_EXP 47
1171: PUSH
1172: EMPTY
1173: ST_TO_ADDR
// spect := [ 0 , 1 ] [ def_spect + 1 ] ;
1174: LD_ADDR_EXP 31
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_EXP 32
1193: PUSH
1194: LD_INT 1
1196: PLUS
1197: ARRAY
1198: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1199: LD_ADDR_EXP 33
1203: PUSH
1204: LD_INT 0
1206: PUSH
1207: LD_INT 1
1209: PUSH
1210: LD_INT 63000
1212: PUSH
1213: LD_INT 126000
1215: PUSH
1216: LD_INT 189000
1218: PUSH
1219: LD_INT 252000
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: PUSH
1230: LD_EXP 15
1234: PUSH
1235: LD_INT 1
1237: PLUS
1238: ARRAY
1239: ST_TO_ADDR
// end ;
1240: LD_VAR 0 1
1244: RET
// function init_map ; var i , j ; begin
1245: LD_INT 0
1247: PPUSH
1248: PPUSH
1249: PPUSH
// normal_oil_deposits_locations := [ [ 12 , 4 ] , [ 45 , 81 ] , [ 116 , 195 ] , [ 142 , 4 ] , [ 201 , 102 ] , [ 234 , 194 ] ] ;
1250: LD_ADDR_EXP 43
1254: PUSH
1255: LD_INT 12
1257: PUSH
1258: LD_INT 4
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: PUSH
1265: LD_INT 45
1267: PUSH
1268: LD_INT 81
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 116
1277: PUSH
1278: LD_INT 195
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 142
1287: PUSH
1288: LD_INT 4
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 201
1297: PUSH
1298: LD_INT 102
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 234
1307: PUSH
1308: LD_INT 194
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 12 , 4 ] , [ 16 , 25 ] ] , [ [ 45 , 81 ] , [ 60 , 102 ] ] , [ [ 116 , 195 ] , [ 92 , 167 ] ] , [ [ 142 , 4 ] , [ 167 , 24 ] ] , [ [ 201 , 102 ] , [ 190 , 77 ] ] , [ [ 234 , 194 ] , [ 237 , 171 ] ] ] ;
1323: LD_ADDR_EXP 44
1327: PUSH
1328: LD_INT 12
1330: PUSH
1331: LD_INT 4
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 16
1340: PUSH
1341: LD_INT 25
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 45
1354: PUSH
1355: LD_INT 81
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 60
1364: PUSH
1365: LD_INT 102
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 116
1378: PUSH
1379: LD_INT 195
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: LD_INT 92
1388: PUSH
1389: LD_INT 167
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 142
1402: PUSH
1403: LD_INT 4
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: LD_INT 167
1412: PUSH
1413: LD_INT 24
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: LD_INT 201
1426: PUSH
1427: LD_INT 102
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: LD_INT 190
1436: PUSH
1437: LD_INT 77
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: LD_INT 234
1450: PUSH
1451: LD_INT 194
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: PUSH
1458: LD_INT 237
1460: PUSH
1461: LD_INT 171
1463: PUSH
1464: EMPTY
1465: LIST
1466: LIST
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 10 , 10 ] , [ 51 , 93 ] , [ 102 , 187 ] , [ 158 , 6 ] , [ 203 , 93 ] , [ 252 , 194 ] ] ;
1480: LD_ADDR_EXP 45
1484: PUSH
1485: LD_INT 10
1487: PUSH
1488: LD_INT 10
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: LD_INT 93
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: PUSH
1505: LD_INT 102
1507: PUSH
1508: LD_INT 187
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: PUSH
1515: LD_INT 158
1517: PUSH
1518: LD_INT 6
1520: PUSH
1521: EMPTY
1522: LIST
1523: LIST
1524: PUSH
1525: LD_INT 203
1527: PUSH
1528: LD_INT 93
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: PUSH
1535: LD_INT 252
1537: PUSH
1538: LD_INT 194
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// extra_sib_deposits_locations := [ [ [ 10 , 10 ] , [ 36 , 10 ] ] , [ [ 51 , 93 ] , [ 47 , 72 ] ] , [ [ 102 , 187 ] , [ 93 , 175 ] ] , [ [ 158 , 6 ] , [ 147 , 5 ] ] , [ [ 203 , 93 ] , [ 173 , 71 ] ] , [ [ 252 , 194 ] , [ 243 , 177 ] ] ] ;
1553: LD_ADDR_EXP 46
1557: PUSH
1558: LD_INT 10
1560: PUSH
1561: LD_INT 10
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 36
1570: PUSH
1571: LD_INT 10
1573: PUSH
1574: EMPTY
1575: LIST
1576: LIST
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 51
1584: PUSH
1585: LD_INT 93
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 47
1594: PUSH
1595: LD_INT 72
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 102
1608: PUSH
1609: LD_INT 187
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 93
1618: PUSH
1619: LD_INT 175
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: LD_INT 158
1632: PUSH
1633: LD_INT 6
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 147
1642: PUSH
1643: LD_INT 5
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PUSH
1654: LD_INT 203
1656: PUSH
1657: LD_INT 93
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 173
1666: PUSH
1667: LD_INT 71
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 252
1680: PUSH
1681: LD_INT 194
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 243
1690: PUSH
1691: LD_INT 177
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: LIST
1709: ST_TO_ADDR
// depot_def := [ [ 23 , 15 , 2 ] , [ 56 , 85 , 1 ] , [ 110 , 177 , 3 ] , [ 157 , 13 , 3 ] , [ 187 , 87 , 5 ] , [ 231 , 181 , 5 ] ] ;
1710: LD_ADDR_EXP 40
1714: PUSH
1715: LD_INT 23
1717: PUSH
1718: LD_INT 15
1720: PUSH
1721: LD_INT 2
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 56
1731: PUSH
1732: LD_INT 85
1734: PUSH
1735: LD_INT 1
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: PUSH
1743: LD_INT 110
1745: PUSH
1746: LD_INT 177
1748: PUSH
1749: LD_INT 3
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 157
1759: PUSH
1760: LD_INT 13
1762: PUSH
1763: LD_INT 3
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 187
1773: PUSH
1774: LD_INT 87
1776: PUSH
1777: LD_INT 5
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PUSH
1785: LD_INT 231
1787: PUSH
1788: LD_INT 181
1790: PUSH
1791: LD_INT 5
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: ST_TO_ADDR
// start_def := [ [ 30 , 22 ] , [ 58 , 82 ] , [ 113 , 180 ] , [ 151 , 24 ] , [ 183 , 90 ] , [ 223 , 180 ] ] ;
1807: LD_ADDR_EXP 42
1811: PUSH
1812: LD_INT 30
1814: PUSH
1815: LD_INT 22
1817: PUSH
1818: EMPTY
1819: LIST
1820: LIST
1821: PUSH
1822: LD_INT 58
1824: PUSH
1825: LD_INT 82
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: LD_INT 113
1834: PUSH
1835: LD_INT 180
1837: PUSH
1838: EMPTY
1839: LIST
1840: LIST
1841: PUSH
1842: LD_INT 151
1844: PUSH
1845: LD_INT 24
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PUSH
1852: LD_INT 183
1854: PUSH
1855: LD_INT 90
1857: PUSH
1858: EMPTY
1859: LIST
1860: LIST
1861: PUSH
1862: LD_INT 223
1864: PUSH
1865: LD_INT 180
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PUSH
1872: EMPTY
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: ST_TO_ADDR
// breastworks_def := [ [ [ 33 , 12 , 5 ] , [ 42 , 29 , 4 ] , [ 36 , 20 , 4 ] ] , [ [ 72 , 91 , 4 ] , [ 65 , 78 , 4 ] , [ 75 , 100 , 3 ] ] , [ [ 102 , 165 , 3 ] , [ 122 , 176 , 4 ] , [ 120 , 184 , 4 ] ] , [ [ 134 , 16 , 1 ] , [ 132 , 5 , 1 ] , [ 157 , 27 , 5 ] ] , [ [ 172 , 77 , 1 ] , [ 175 , 96 , 1 ] , [ 192 , 104 , 1 ] ] , [ [ 216 , 179 , 1 ] , [ 208 , 160 , 2 ] , [ 208 , 171 , 2 ] ] ] ;
1880: LD_ADDR_EXP 41
1884: PUSH
1885: LD_INT 33
1887: PUSH
1888: LD_INT 12
1890: PUSH
1891: LD_INT 5
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_INT 42
1901: PUSH
1902: LD_INT 29
1904: PUSH
1905: LD_INT 4
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: PUSH
1913: LD_INT 36
1915: PUSH
1916: LD_INT 20
1918: PUSH
1919: LD_INT 4
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 72
1934: PUSH
1935: LD_INT 91
1937: PUSH
1938: LD_INT 4
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 65
1948: PUSH
1949: LD_INT 78
1951: PUSH
1952: LD_INT 4
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 75
1962: PUSH
1963: LD_INT 100
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: PUSH
1979: LD_INT 102
1981: PUSH
1982: LD_INT 165
1984: PUSH
1985: LD_INT 3
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: PUSH
1993: LD_INT 122
1995: PUSH
1996: LD_INT 176
1998: PUSH
1999: LD_INT 4
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 120
2009: PUSH
2010: LD_INT 184
2012: PUSH
2013: LD_INT 4
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 134
2028: PUSH
2029: LD_INT 16
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: PUSH
2040: LD_INT 132
2042: PUSH
2043: LD_INT 5
2045: PUSH
2046: LD_INT 1
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 157
2056: PUSH
2057: LD_INT 27
2059: PUSH
2060: LD_INT 5
2062: PUSH
2063: EMPTY
2064: LIST
2065: LIST
2066: LIST
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: PUSH
2073: LD_INT 172
2075: PUSH
2076: LD_INT 77
2078: PUSH
2079: LD_INT 1
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: LIST
2086: PUSH
2087: LD_INT 175
2089: PUSH
2090: LD_INT 96
2092: PUSH
2093: LD_INT 1
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: LIST
2100: PUSH
2101: LD_INT 192
2103: PUSH
2104: LD_INT 104
2106: PUSH
2107: LD_INT 1
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PUSH
2120: LD_INT 216
2122: PUSH
2123: LD_INT 179
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: LIST
2133: PUSH
2134: LD_INT 208
2136: PUSH
2137: LD_INT 160
2139: PUSH
2140: LD_INT 2
2142: PUSH
2143: EMPTY
2144: LIST
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 208
2150: PUSH
2151: LD_INT 171
2153: PUSH
2154: LD_INT 2
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// for i = 1 to 6 do
2175: LD_ADDR_VAR 0 2
2179: PUSH
2180: DOUBLE
2181: LD_INT 1
2183: DEC
2184: ST_TO_ADDR
2185: LD_INT 6
2187: PUSH
2188: FOR_TO
2189: IFFALSE 2286
// if def_extra_oil_deposits then
2191: LD_EXP 6
2195: IFFALSE 2247
// for j in extra_oil_deposits_locations [ i ] do
2197: LD_ADDR_VAR 0 3
2201: PUSH
2202: LD_EXP 44
2206: PUSH
2207: LD_VAR 0 2
2211: ARRAY
2212: PUSH
2213: FOR_IN
2214: IFFALSE 2243
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2216: LD_VAR 0 3
2220: PUSH
2221: LD_INT 1
2223: ARRAY
2224: PPUSH
2225: LD_VAR 0 3
2229: PUSH
2230: LD_INT 2
2232: ARRAY
2233: PPUSH
2234: LD_INT 2
2236: PPUSH
2237: CALL_OW 62
2241: GO 2213
2243: POP
2244: POP
2245: GO 2284
// CreateDepositXY ( normal_oil_deposits_locations [ i ] [ 1 ] , normal_oil_deposits_locations [ i ] [ 2 ] , mat_oil ) ;
2247: LD_EXP 43
2251: PUSH
2252: LD_VAR 0 2
2256: ARRAY
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PPUSH
2262: LD_EXP 43
2266: PUSH
2267: LD_VAR 0 2
2271: ARRAY
2272: PUSH
2273: LD_INT 2
2275: ARRAY
2276: PPUSH
2277: LD_INT 2
2279: PPUSH
2280: CALL_OW 62
2284: GO 2188
2286: POP
2287: POP
// if def_extra_sib_deposits then
2288: LD_EXP 7
2292: IFFALSE 2411
// for i = 1 to 6 do
2294: LD_ADDR_VAR 0 2
2298: PUSH
2299: DOUBLE
2300: LD_INT 1
2302: DEC
2303: ST_TO_ADDR
2304: LD_INT 6
2306: PUSH
2307: FOR_TO
2308: IFFALSE 2409
// if def_extra_sib_deposits = 2 then
2310: LD_EXP 7
2314: PUSH
2315: LD_INT 2
2317: EQUAL
2318: IFFALSE 2370
// for j in extra_sib_deposits_locations [ i ] do
2320: LD_ADDR_VAR 0 3
2324: PUSH
2325: LD_EXP 46
2329: PUSH
2330: LD_VAR 0 2
2334: ARRAY
2335: PUSH
2336: FOR_IN
2337: IFFALSE 2366
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2339: LD_VAR 0 3
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 2
2355: ARRAY
2356: PPUSH
2357: LD_INT 3
2359: PPUSH
2360: CALL_OW 62
2364: GO 2336
2366: POP
2367: POP
2368: GO 2407
// CreateDepositXY ( normal_sib_deposits_locations [ i ] [ 1 ] , normal_sib_deposits_locations [ i ] [ 2 ] , mat_siberit ) ;
2370: LD_EXP 45
2374: PUSH
2375: LD_VAR 0 2
2379: ARRAY
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: LD_EXP 45
2389: PUSH
2390: LD_VAR 0 2
2394: ARRAY
2395: PUSH
2396: LD_INT 2
2398: ARRAY
2399: PPUSH
2400: LD_INT 3
2402: PPUSH
2403: CALL_OW 62
2407: GO 2307
2409: POP
2410: POP
// end ;
2411: LD_VAR 0 1
2415: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2416: LD_INT 0
2418: PPUSH
2419: PPUSH
2420: PPUSH
// if not Team_Game then
2421: LD_EXP 39
2425: NOT
2426: IFFALSE 2524
// begin for i = 1 to 8 do
2428: LD_ADDR_VAR 0 2
2432: PUSH
2433: DOUBLE
2434: LD_INT 1
2436: DEC
2437: ST_TO_ADDR
2438: LD_INT 8
2440: PUSH
2441: FOR_TO
2442: IFFALSE 2520
// for j = 1 to 8 do
2444: LD_ADDR_VAR 0 3
2448: PUSH
2449: DOUBLE
2450: LD_INT 1
2452: DEC
2453: ST_TO_ADDR
2454: LD_INT 8
2456: PUSH
2457: FOR_TO
2458: IFFALSE 2516
// if i <> j then
2460: LD_VAR 0 2
2464: PUSH
2465: LD_VAR 0 3
2469: NONEQUAL
2470: IFFALSE 2494
// SetAttitude ( i , j , att_neutral , true ) else
2472: LD_VAR 0 2
2476: PPUSH
2477: LD_VAR 0 3
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: LD_INT 1
2487: PPUSH
2488: CALL_OW 80
2492: GO 2514
// SetAttitude ( i , j , att_friend , true ) ;
2494: LD_VAR 0 2
2498: PPUSH
2499: LD_VAR 0 3
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: LD_INT 1
2509: PPUSH
2510: CALL_OW 80
2514: GO 2457
2516: POP
2517: POP
2518: GO 2441
2520: POP
2521: POP
// end else
2522: GO 2699
// begin if def_shared_vision then
2524: LD_EXP 8
2528: IFFALSE 2593
// begin for i in Teams do
2530: LD_ADDR_VAR 0 2
2534: PUSH
2535: LD_EXP 36
2539: PUSH
2540: FOR_IN
2541: IFFALSE 2591
// for j = 2 to i do
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: DOUBLE
2549: LD_INT 2
2551: DEC
2552: ST_TO_ADDR
2553: LD_VAR 0 2
2557: PUSH
2558: FOR_TO
2559: IFFALSE 2587
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2561: LD_VAR 0 2
2565: PUSH
2566: LD_VAR 0 3
2570: ARRAY
2571: PPUSH
2572: LD_VAR 0 2
2576: PUSH
2577: LD_INT 1
2579: ARRAY
2580: PPUSH
2581: CALL_OW 343
2585: GO 2558
2587: POP
2588: POP
2589: GO 2540
2591: POP
2592: POP
// end ; for i = 1 to 8 do
2593: LD_ADDR_VAR 0 2
2597: PUSH
2598: DOUBLE
2599: LD_INT 1
2601: DEC
2602: ST_TO_ADDR
2603: LD_INT 8
2605: PUSH
2606: FOR_TO
2607: IFFALSE 2697
// for j = 1 to 8 do
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: DOUBLE
2615: LD_INT 1
2617: DEC
2618: ST_TO_ADDR
2619: LD_INT 8
2621: PUSH
2622: FOR_TO
2623: IFFALSE 2693
// if Side_Teams [ i ] = Side_Teams [ j ] then
2625: LD_EXP 35
2629: PUSH
2630: LD_VAR 0 2
2634: ARRAY
2635: PUSH
2636: LD_EXP 35
2640: PUSH
2641: LD_VAR 0 3
2645: ARRAY
2646: EQUAL
2647: IFFALSE 2671
// SetAttitude ( i , j , att_friend , true ) else
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_INT 1
2661: PPUSH
2662: LD_INT 1
2664: PPUSH
2665: CALL_OW 80
2669: GO 2691
// SetAttitude ( i , j , att_enemy , true ) ;
2671: LD_VAR 0 2
2675: PPUSH
2676: LD_VAR 0 3
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 1
2686: PPUSH
2687: CALL_OW 80
2691: GO 2622
2693: POP
2694: POP
2695: GO 2606
2697: POP
2698: POP
// end ; end ;
2699: LD_VAR 0 1
2703: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2704: LD_INT 0
2706: PPUSH
2707: PPUSH
2708: PPUSH
2709: PPUSH
// result := [ ] ;
2710: LD_ADDR_VAR 0 7
2714: PUSH
2715: EMPTY
2716: ST_TO_ADDR
// for i := 1 to count do
2717: LD_ADDR_VAR 0 8
2721: PUSH
2722: DOUBLE
2723: LD_INT 1
2725: DEC
2726: ST_TO_ADDR
2727: LD_VAR 0 1
2731: PUSH
2732: FOR_TO
2733: IFFALSE 3151
// begin uc_direction := Rand ( 0 , 5 ) ;
2735: LD_ADDR_OWVAR 24
2739: PUSH
2740: LD_INT 0
2742: PPUSH
2743: LD_INT 5
2745: PPUSH
2746: CALL_OW 12
2750: ST_TO_ADDR
// if commander then
2751: LD_LOC 1
2755: IFFALSE 2864
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2757: LD_ADDR_OWVAR 26
2761: PUSH
2762: LD_OWVAR 19
2766: PUSH
2767: LD_OWVAR 20
2771: ARRAY
2772: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2773: LD_INT 1
2775: PPUSH
2776: LD_INT 2
2778: PPUSH
2779: CALL_OW 12
2783: PPUSH
2784: LD_VAR 0 2
2788: PPUSH
2789: LD_EXP 22
2793: PUSH
2794: LD_INT 2
2796: PLUS
2797: PPUSH
2798: CALL_OW 380
// hc_importance := 105 ;
2802: LD_ADDR_OWVAR 32
2806: PUSH
2807: LD_INT 105
2809: ST_TO_ADDR
// commander := false ;
2810: LD_ADDR_LOC 1
2814: PUSH
2815: LD_INT 0
2817: ST_TO_ADDR
// if Multiplayer then
2818: LD_OWVAR 4
2822: IFFALSE 2862
// begin hc_gallery := MULTIAVATARS ;
2824: LD_ADDR_OWVAR 33
2828: PUSH
2829: LD_STRING MULTIAVATARS
2831: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2832: LD_ADDR_OWVAR 34
2836: PUSH
2837: LD_OWVAR 20
2841: PPUSH
2842: CALL_OW 525
2846: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2847: LD_ADDR_OWVAR 27
2851: PUSH
2852: LD_OWVAR 20
2856: PPUSH
2857: CALL_OW 526
2861: ST_TO_ADDR
// end ; end else
2862: GO 2927
// begin hc_name :=  ;
2864: LD_ADDR_OWVAR 26
2868: PUSH
2869: LD_STRING 
2871: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
2872: LD_INT 1
2874: PPUSH
2875: LD_INT 2
2877: PPUSH
2878: CALL_OW 12
2882: PPUSH
2883: LD_VAR 0 2
2887: PPUSH
2888: LD_EXP 22
2892: PPUSH
2893: CALL_OW 380
// hc_importance := 0 ;
2897: LD_ADDR_OWVAR 32
2901: PUSH
2902: LD_INT 0
2904: ST_TO_ADDR
// if Multiplayer then
2905: LD_OWVAR 4
2909: IFFALSE 2927
// begin hc_gallery :=  ;
2911: LD_ADDR_OWVAR 33
2915: PUSH
2916: LD_STRING 
2918: ST_TO_ADDR
// hc_face_number := 0 ;
2919: LD_ADDR_OWVAR 34
2923: PUSH
2924: LD_INT 0
2926: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
2927: LD_ADDR_VAR 0 10
2931: PUSH
2932: CALL_OW 44
2936: ST_TO_ADDR
// if global_defined then
2937: LD_LOC 3
2941: IFFALSE 3081
// begin if ( cl = class_soldier ) then
2943: LD_VAR 0 2
2947: PUSH
2948: LD_INT 1
2950: EQUAL
2951: IFFALSE 2971
// j := i + soldiers_created else
2953: LD_ADDR_VAR 0 9
2957: PUSH
2958: LD_VAR 0 8
2962: PUSH
2963: LD_LOC 4
2967: PLUS
2968: ST_TO_ADDR
2969: GO 2981
// j := i ;
2971: LD_ADDR_VAR 0 9
2975: PUSH
2976: LD_VAR 0 8
2980: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
2981: LD_LOC 2
2985: PUSH
2986: LD_VAR 0 2
2990: ARRAY
2991: PUSH
2992: LD_VAR 0 9
2996: ARRAY
2997: PPUSH
2998: LD_VAR 0 10
3002: PPUSH
3003: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3007: LD_VAR 0 10
3011: PPUSH
3012: LD_INT 2
3014: PPUSH
3015: LD_LOC 2
3019: PUSH
3020: LD_VAR 0 2
3024: ARRAY
3025: PUSH
3026: LD_VAR 0 9
3030: ARRAY
3031: PPUSH
3032: LD_INT 2
3034: PPUSH
3035: CALL_OW 260
3039: PPUSH
3040: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3044: LD_VAR 0 10
3048: PPUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_LOC 2
3056: PUSH
3057: LD_VAR 0 2
3061: ARRAY
3062: PUSH
3063: LD_VAR 0 9
3067: ARRAY
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: CALL_OW 260
3076: PPUSH
3077: CALL_OW 239
// end ; if building then
3081: LD_VAR 0 6
3085: IFFALSE 3103
// PlaceHumanInUnit ( un , building ) else
3087: LD_VAR 0 10
3091: PPUSH
3092: LD_VAR 0 6
3096: PPUSH
3097: CALL_OW 52
3101: GO 3130
// PlaceUnitXYR ( un , x , y , r , false ) ;
3103: LD_VAR 0 10
3107: PPUSH
3108: LD_VAR 0 3
3112: PPUSH
3113: LD_VAR 0 4
3117: PPUSH
3118: LD_VAR 0 5
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 50
// result := result ^ [ un ] ;
3130: LD_ADDR_VAR 0 7
3134: PUSH
3135: LD_VAR 0 7
3139: PUSH
3140: LD_VAR 0 10
3144: PUSH
3145: EMPTY
3146: LIST
3147: ADD
3148: ST_TO_ADDR
// end ;
3149: GO 2732
3151: POP
3152: POP
// if not global_defined then
3153: LD_LOC 3
3157: NOT
3158: IFFALSE 3236
// if ( global_units >= cl ) then
3160: LD_LOC 2
3164: PUSH
3165: LD_VAR 0 2
3169: GREATEREQUAL
3170: IFFALSE 3211
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3172: LD_ADDR_LOC 2
3176: PUSH
3177: LD_LOC 2
3181: PPUSH
3182: LD_VAR 0 2
3186: PPUSH
3187: LD_LOC 2
3191: PUSH
3192: LD_VAR 0 2
3196: ARRAY
3197: PUSH
3198: LD_VAR 0 7
3202: ADD
3203: PPUSH
3204: CALL_OW 1
3208: ST_TO_ADDR
3209: GO 3236
// global_units := Replace ( global_units , cl , result ) ;
3211: LD_ADDR_LOC 2
3215: PUSH
3216: LD_LOC 2
3220: PPUSH
3221: LD_VAR 0 2
3225: PPUSH
3226: LD_VAR 0 7
3230: PPUSH
3231: CALL_OW 1
3235: ST_TO_ADDR
// end ;
3236: LD_VAR 0 7
3240: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3241: LD_INT 0
3243: PPUSH
3244: PPUSH
3245: PPUSH
3246: PPUSH
3247: PPUSH
3248: PPUSH
3249: PPUSH
3250: PPUSH
3251: PPUSH
// if side in [ 0 , 9 ] then
3252: LD_VAR 0 1
3256: PUSH
3257: LD_INT 0
3259: PUSH
3260: LD_INT 9
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: IN
3267: IFFALSE 3271
// exit ;
3269: GO 4288
// pos := Side_Positions [ side ] ;
3271: LD_ADDR_VAR 0 3
3275: PUSH
3276: LD_EXP 37
3280: PUSH
3281: LD_VAR 0 1
3285: ARRAY
3286: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3287: LD_ADDR_OWVAR 21
3291: PUSH
3292: LD_EXP 38
3296: PUSH
3297: LD_VAR 0 1
3301: ARRAY
3302: ST_TO_ADDR
// uc_side := side ;
3303: LD_ADDR_OWVAR 20
3307: PUSH
3308: LD_VAR 0 1
3312: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3313: LD_ADDR_VAR 0 4
3317: PUSH
3318: LD_EXP 40
3322: PUSH
3323: LD_VAR 0 3
3327: ARRAY
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3333: LD_ADDR_VAR 0 5
3337: PUSH
3338: LD_EXP 40
3342: PUSH
3343: LD_VAR 0 3
3347: ARRAY
3348: PUSH
3349: LD_INT 2
3351: ARRAY
3352: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3353: LD_ADDR_VAR 0 6
3357: PUSH
3358: LD_EXP 40
3362: PUSH
3363: LD_VAR 0 3
3367: ARRAY
3368: PUSH
3369: LD_INT 3
3371: ARRAY
3372: ST_TO_ADDR
// if is_depot then
3373: LD_EXP 19
3377: IFFALSE 3510
// begin bc_type = b_depot ;
3379: LD_ADDR_OWVAR 42
3383: PUSH
3384: LD_INT 0
3386: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3387: LD_ADDR_VAR 0 10
3391: PUSH
3392: LD_VAR 0 4
3396: PPUSH
3397: LD_VAR 0 5
3401: PPUSH
3402: LD_VAR 0 6
3406: PPUSH
3407: CALL_OW 47
3411: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3412: LD_VAR 0 10
3416: PPUSH
3417: LD_STRING @
3419: PUSH
3420: LD_VAR 0 1
3424: STR
3425: PPUSH
3426: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3430: LD_VAR 0 10
3434: PPUSH
3435: CALL_OW 274
3439: PPUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_EXP 24
3447: PUSH
3448: LD_INT 1
3450: ARRAY
3451: PPUSH
3452: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3456: LD_VAR 0 10
3460: PPUSH
3461: CALL_OW 274
3465: PPUSH
3466: LD_INT 2
3468: PPUSH
3469: LD_EXP 24
3473: PUSH
3474: LD_INT 2
3476: ARRAY
3477: PPUSH
3478: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3482: LD_VAR 0 10
3486: PPUSH
3487: CALL_OW 274
3491: PPUSH
3492: LD_INT 3
3494: PPUSH
3495: LD_EXP 24
3499: PUSH
3500: LD_INT 3
3502: ARRAY
3503: PPUSH
3504: CALL_OW 277
// end else
3508: GO 3654
// begin for i := 1 to 3 do
3510: LD_ADDR_VAR 0 7
3514: PUSH
3515: DOUBLE
3516: LD_INT 1
3518: DEC
3519: ST_TO_ADDR
3520: LD_INT 3
3522: PUSH
3523: FOR_TO
3524: IFFALSE 3652
// begin r := starting_resources [ i ] ;
3526: LD_ADDR_VAR 0 8
3530: PUSH
3531: LD_EXP 24
3535: PUSH
3536: LD_VAR 0 7
3540: ARRAY
3541: ST_TO_ADDR
// while r >= 10 do
3542: LD_VAR 0 8
3546: PUSH
3547: LD_INT 10
3549: GREATEREQUAL
3550: IFFALSE 3650
// if r > 50 then
3552: LD_VAR 0 8
3556: PUSH
3557: LD_INT 50
3559: GREATER
3560: IFFALSE 3606
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3562: LD_VAR 0 7
3566: PPUSH
3567: LD_INT 5
3569: PPUSH
3570: LD_VAR 0 4
3574: PPUSH
3575: LD_VAR 0 5
3579: PPUSH
3580: LD_INT 4
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 60
// r := r - 50 ;
3590: LD_ADDR_VAR 0 8
3594: PUSH
3595: LD_VAR 0 8
3599: PUSH
3600: LD_INT 50
3602: MINUS
3603: ST_TO_ADDR
// end else
3604: GO 3648
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3606: LD_VAR 0 7
3610: PPUSH
3611: LD_VAR 0 8
3615: PUSH
3616: LD_INT 10
3618: DIV
3619: PPUSH
3620: LD_VAR 0 4
3624: PPUSH
3625: LD_VAR 0 5
3629: PPUSH
3630: LD_INT 4
3632: PPUSH
3633: LD_INT 0
3635: PPUSH
3636: CALL_OW 60
// r := 0 ;
3640: LD_ADDR_VAR 0 8
3644: PUSH
3645: LD_INT 0
3647: ST_TO_ADDR
// end ;
3648: GO 3542
// end ;
3650: GO 3523
3652: POP
3653: POP
// end ; for r in starting_crates do
3654: LD_ADDR_VAR 0 8
3658: PUSH
3659: LD_EXP 23
3663: PUSH
3664: FOR_IN
3665: IFFALSE 3697
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3667: LD_INT 1
3669: PPUSH
3670: LD_INT 5
3672: PPUSH
3673: LD_VAR 0 4
3677: PPUSH
3678: LD_VAR 0 5
3682: PPUSH
3683: LD_VAR 0 8
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 60
3695: GO 3664
3697: POP
3698: POP
// if def_morale_flags then
3699: LD_EXP 9
3703: IFFALSE 3842
// begin x := start_def [ pos ] [ 1 ] ;
3705: LD_ADDR_VAR 0 4
3709: PUSH
3710: LD_EXP 42
3714: PUSH
3715: LD_VAR 0 3
3719: ARRAY
3720: PUSH
3721: LD_INT 1
3723: ARRAY
3724: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3725: LD_ADDR_VAR 0 5
3729: PUSH
3730: LD_EXP 42
3734: PUSH
3735: LD_VAR 0 3
3739: ARRAY
3740: PUSH
3741: LD_INT 2
3743: ARRAY
3744: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3745: LD_VAR 0 4
3749: PPUSH
3750: LD_VAR 0 5
3754: PPUSH
3755: LD_INT 12
3757: PPUSH
3758: LD_INT 2
3760: PPUSH
3761: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3765: LD_ADDR_EXP 47
3769: PUSH
3770: LD_EXP 47
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: LD_VAR 0 4
3784: PPUSH
3785: LD_VAR 0 5
3789: PPUSH
3790: LD_INT 1
3792: PUSH
3793: LD_INT 100
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: LD_INT 2
3802: PUSH
3803: LD_INT 50
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: PUSH
3810: LD_INT 3
3812: PUSH
3813: LD_INT 20
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PUSH
3820: LD_INT 20
3822: PUSH
3823: LD_INT 100
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PUSH
3830: EMPTY
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: PPUSH
3836: CALL_OW 418
3840: ADD
3841: ST_TO_ADDR
// end ; commander := true ;
3842: LD_ADDR_LOC 1
3846: PUSH
3847: LD_INT 1
3849: ST_TO_ADDR
// soldiers_created := 0 ;
3850: LD_ADDR_LOC 4
3854: PUSH
3855: LD_INT 0
3857: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
3858: LD_ADDR_VAR 0 7
3862: PUSH
3863: DOUBLE
3864: LD_INT 1
3866: DEC
3867: ST_TO_ADDR
3868: LD_EXP 20
3872: PUSH
3873: FOR_TO
3874: IFFALSE 4027
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
3876: LD_ADDR_VAR 0 4
3880: PUSH
3881: LD_EXP 41
3885: PUSH
3886: LD_VAR 0 3
3890: ARRAY
3891: PUSH
3892: LD_VAR 0 7
3896: ARRAY
3897: PUSH
3898: LD_INT 1
3900: ARRAY
3901: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
3902: LD_ADDR_VAR 0 5
3906: PUSH
3907: LD_EXP 41
3911: PUSH
3912: LD_VAR 0 3
3916: ARRAY
3917: PUSH
3918: LD_VAR 0 7
3922: ARRAY
3923: PUSH
3924: LD_INT 2
3926: ARRAY
3927: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
3928: LD_ADDR_VAR 0 6
3932: PUSH
3933: LD_EXP 41
3937: PUSH
3938: LD_VAR 0 3
3942: ARRAY
3943: PUSH
3944: LD_VAR 0 7
3948: ARRAY
3949: PUSH
3950: LD_INT 3
3952: ARRAY
3953: ST_TO_ADDR
// bc_type := b_breastwork ;
3954: LD_ADDR_OWVAR 42
3958: PUSH
3959: LD_INT 31
3961: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3962: LD_ADDR_VAR 0 9
3966: PUSH
3967: LD_VAR 0 4
3971: PPUSH
3972: LD_VAR 0 5
3976: PPUSH
3977: LD_VAR 0 6
3981: PPUSH
3982: CALL_OW 47
3986: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
3987: LD_INT 1
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: LD_INT 0
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: LD_VAR 0 9
4006: PPUSH
4007: CALL 2704 0 6
// soldiers_created := soldiers_created + 1 ;
4011: LD_ADDR_LOC 4
4015: PUSH
4016: LD_LOC 4
4020: PUSH
4021: LD_INT 1
4023: PLUS
4024: ST_TO_ADDR
// end ;
4025: GO 3873
4027: POP
4028: POP
// x := start_def [ pos ] [ 1 ] ;
4029: LD_ADDR_VAR 0 4
4033: PUSH
4034: LD_EXP 42
4038: PUSH
4039: LD_VAR 0 3
4043: ARRAY
4044: PUSH
4045: LD_INT 1
4047: ARRAY
4048: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4049: LD_ADDR_VAR 0 5
4053: PUSH
4054: LD_EXP 42
4058: PUSH
4059: LD_VAR 0 3
4063: ARRAY
4064: PUSH
4065: LD_INT 2
4067: ARRAY
4068: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4069: LD_LOC 8
4073: PUSH
4074: LD_EXP 20
4078: MINUS
4079: PPUSH
4080: LD_INT 1
4082: PPUSH
4083: LD_VAR 0 4
4087: PPUSH
4088: LD_VAR 0 5
4092: PPUSH
4093: LD_INT 5
4095: PPUSH
4096: LD_INT 0
4098: PPUSH
4099: CALL 2704 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4103: LD_LOC 5
4107: PPUSH
4108: LD_INT 2
4110: PPUSH
4111: LD_VAR 0 4
4115: PPUSH
4116: LD_VAR 0 5
4120: PPUSH
4121: LD_INT 5
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL 2704 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4131: LD_LOC 7
4135: PPUSH
4136: LD_INT 3
4138: PPUSH
4139: LD_VAR 0 4
4143: PPUSH
4144: LD_VAR 0 5
4148: PPUSH
4149: LD_INT 5
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: CALL 2704 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4159: LD_LOC 6
4163: PPUSH
4164: LD_INT 4
4166: PPUSH
4167: LD_VAR 0 4
4171: PPUSH
4172: LD_VAR 0 5
4176: PPUSH
4177: LD_INT 5
4179: PPUSH
4180: LD_INT 0
4182: PPUSH
4183: CALL 2704 0 6
// if def_siberite_detection then
4187: LD_EXP 10
4191: IFFALSE 4208
// SetTech ( tech_SibDet , side , state_researched ) ;
4193: LD_INT 20
4195: PPUSH
4196: LD_VAR 0 1
4200: PPUSH
4201: LD_INT 2
4203: PPUSH
4204: CALL_OW 322
// if def_siberite_bomb = 1 then
4208: LD_EXP 15
4212: PUSH
4213: LD_INT 1
4215: EQUAL
4216: IFFALSE 4250
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4218: LD_INT 25
4220: PPUSH
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 1
4228: PPUSH
4229: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4233: LD_INT 73
4235: PPUSH
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 1
4243: PPUSH
4244: CALL_OW 322
// end else
4248: GO 4280
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4250: LD_INT 25
4252: PPUSH
4253: LD_VAR 0 1
4257: PPUSH
4258: LD_INT 0
4260: PPUSH
4261: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4265: LD_INT 73
4267: PPUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 0
4275: PPUSH
4276: CALL_OW 322
// end ; global_defined := true ;
4280: LD_ADDR_LOC 3
4284: PUSH
4285: LD_INT 1
4287: ST_TO_ADDR
// end ;
4288: LD_VAR 0 2
4292: RET
// every 0 0$1 do
4293: GO 4295
4295: DISABLE
// if ( def_siberite_bomb > 1 ) then
4296: LD_EXP 15
4300: PUSH
4301: LD_INT 1
4303: GREATER
4304: IFFALSE 4319
// begin wait ( siberite_bomb_Delay ) ;
4306: LD_EXP 33
4310: PPUSH
4311: CALL_OW 67
// EnableSibFiss ;
4315: CALL 4320 0 0
// end ;
4319: END
// function EnableSibFiss ; var i ; begin
4320: LD_INT 0
4322: PPUSH
4323: PPUSH
// for i := 1 to 8 do
4324: LD_ADDR_VAR 0 2
4328: PUSH
4329: DOUBLE
4330: LD_INT 1
4332: DEC
4333: ST_TO_ADDR
4334: LD_INT 8
4336: PUSH
4337: FOR_TO
4338: IFFALSE 4384
// if Side_Positions [ i ] then
4340: LD_EXP 37
4344: PUSH
4345: LD_VAR 0 2
4349: ARRAY
4350: IFFALSE 4382
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
4352: LD_INT 25
4354: PPUSH
4355: LD_VAR 0 2
4359: PPUSH
4360: LD_INT 1
4362: PPUSH
4363: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
4367: LD_INT 73
4369: PPUSH
4370: LD_VAR 0 2
4374: PPUSH
4375: LD_INT 1
4377: PPUSH
4378: CALL_OW 322
// end ;
4382: GO 4337
4384: POP
4385: POP
// end ;
4386: LD_VAR 0 1
4390: RET
// function prepare_sides ; var i ; begin
4391: LD_INT 0
4393: PPUSH
4394: PPUSH
// global_units := [ ] ;
4395: LD_ADDR_LOC 2
4399: PUSH
4400: EMPTY
4401: ST_TO_ADDR
// global_defined := false ;
4402: LD_ADDR_LOC 3
4406: PUSH
4407: LD_INT 0
4409: ST_TO_ADDR
// CountClassMembers ;
4410: CALL 4460 0 0
// for i := 1 to 8 do
4414: LD_ADDR_VAR 0 2
4418: PUSH
4419: DOUBLE
4420: LD_INT 1
4422: DEC
4423: ST_TO_ADDR
4424: LD_INT 8
4426: PUSH
4427: FOR_TO
4428: IFFALSE 4453
// if Side_Positions [ i ] then
4430: LD_EXP 37
4434: PUSH
4435: LD_VAR 0 2
4439: ARRAY
4440: IFFALSE 4451
// prepare_side ( i ) ;
4442: LD_VAR 0 2
4446: PPUSH
4447: CALL 3241 0 1
4451: GO 4427
4453: POP
4454: POP
// end ;
4455: LD_VAR 0 1
4459: RET
// function CountClassMembers ; var Mode ; begin
4460: LD_INT 0
4462: PPUSH
4463: PPUSH
// if No_Mechs then
4464: LD_EXP 17
4468: IFFALSE 4480
// Mode := 2 else
4470: LD_ADDR_VAR 0 2
4474: PUSH
4475: LD_INT 2
4477: ST_TO_ADDR
4478: GO 4488
// Mode := 1 ;
4480: LD_ADDR_VAR 0 2
4484: PUSH
4485: LD_INT 1
4487: ST_TO_ADDR
// neng := number_of_people ;
4488: LD_ADDR_LOC 5
4492: PUSH
4493: LD_EXP 21
4497: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4498: LD_ADDR_LOC 8
4502: PUSH
4503: LD_LOC 5
4507: PUSH
4508: LD_INT 4
4510: PUSH
4511: LD_INT 3
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: DIV
4524: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4525: LD_LOC 8
4529: PUSH
4530: LD_EXP 20
4534: LESS
4535: IFFALSE 4547
// nsol := number_of_breastworks ;
4537: LD_ADDR_LOC 8
4541: PUSH
4542: LD_EXP 20
4546: ST_TO_ADDR
// neng := neng - nsol ;
4547: LD_ADDR_LOC 5
4551: PUSH
4552: LD_LOC 5
4556: PUSH
4557: LD_LOC 8
4561: MINUS
4562: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4563: LD_ADDR_LOC 6
4567: PUSH
4568: LD_LOC 5
4572: PUSH
4573: LD_INT 3
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: DIV
4589: ST_TO_ADDR
// if ( nsci < 1 ) then
4590: LD_LOC 6
4594: PUSH
4595: LD_INT 1
4597: LESS
4598: IFFALSE 4608
// nsci := 1 ;
4600: LD_ADDR_LOC 6
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// neng := neng - nsci ;
4608: LD_ADDR_LOC 5
4612: PUSH
4613: LD_LOC 5
4617: PUSH
4618: LD_LOC 6
4622: MINUS
4623: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4624: LD_ADDR_LOC 7
4628: PUSH
4629: LD_LOC 5
4633: PUSH
4634: LD_INT 2
4636: DIV
4637: PUSH
4638: LD_INT 0
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: LD_VAR 0 2
4649: ARRAY
4650: ST_TO_ADDR
// neng := neng - nmech ;
4651: LD_ADDR_LOC 5
4655: PUSH
4656: LD_LOC 5
4660: PUSH
4661: LD_LOC 7
4665: MINUS
4666: ST_TO_ADDR
// if ( neng < 1 ) then
4667: LD_LOC 5
4671: PUSH
4672: LD_INT 1
4674: LESS
4675: IFFALSE 4685
// neng := 1 ;
4677: LD_ADDR_LOC 5
4681: PUSH
4682: LD_INT 1
4684: ST_TO_ADDR
// end ;
4685: LD_VAR 0 1
4689: RET
// function Init_Win_Condition ; begin
4690: LD_INT 0
4692: PPUSH
// if Team_Game then
4693: LD_EXP 39
4697: IFFALSE 4704
// enable ( 98 ) else
4699: LD_INT 98
4701: ENABLE_MARKED
4702: GO 4707
// enable ( 99 ) ;
4704: LD_INT 99
4706: ENABLE_MARKED
// case Game_Type of 3 :
4707: LD_EXP 18
4711: PUSH
4712: LD_INT 3
4714: DOUBLE
4715: EQUAL
4716: IFTRUE 4720
4718: GO 4726
4720: POP
// enable ( 100 ) ; end ;
4721: LD_INT 100
4723: ENABLE_MARKED
4724: GO 4727
4726: POP
// end ;
4727: LD_VAR 0 1
4731: RET
// starting begin disable ( 98 ) ;
4732: LD_INT 98
4734: DISABLE_MARKED
// disable ( 99 ) ;
4735: LD_INT 99
4737: DISABLE_MARKED
// disable ( 400 ) ;
4738: LD_INT 400
4740: DISABLE_MARKED
// disable ( 401 ) ;
4741: LD_INT 401
4743: DISABLE_MARKED
// mp_selectmsg := true ;
4744: LD_ADDR_OWVAR 13
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4752: CALL 0 0 0
// init_map ;
4756: CALL 1245 0 0
// init_respawning ;
4760: CALL 13570 0 0
// set_shared_visions_and_alliances ;
4764: CALL 2416 0 0
// prepare_sides ;
4768: CALL 4391 0 0
// ShowTimer ;
4772: CALL 7848 0 0
// music_nat := Side_Nations [ your_side ] ;
4776: LD_ADDR_OWVAR 71
4780: PUSH
4781: LD_EXP 38
4785: PUSH
4786: LD_OWVAR 2
4790: ARRAY
4791: ST_TO_ADDR
// if IAmSpec then
4792: CALL_OW 531
4796: IFFALSE 4832
// begin PlaceSeeing ( 0 , 0 , Your_Side , - 32767 ) ;
4798: LD_INT 0
4800: PPUSH
4801: LD_INT 0
4803: PPUSH
4804: LD_OWVAR 2
4808: PPUSH
4809: LD_INT 32767
4811: NEG
4812: PPUSH
4813: CALL_OW 330
// CenterNowOnXY ( 104 , 69 ) ;
4817: LD_INT 104
4819: PPUSH
4820: LD_INT 69
4822: PPUSH
4823: CALL_OW 86
// enable ( 400 ) ;
4827: LD_INT 400
4829: ENABLE_MARKED
// end else
4830: GO 4886
// begin ResetFog ;
4832: CALL_OW 335
// CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4836: LD_EXP 42
4840: PUSH
4841: LD_EXP 37
4845: PUSH
4846: LD_OWVAR 2
4850: ARRAY
4851: ARRAY
4852: PUSH
4853: LD_INT 1
4855: ARRAY
4856: PPUSH
4857: LD_EXP 42
4861: PUSH
4862: LD_EXP 37
4866: PUSH
4867: LD_OWVAR 2
4871: ARRAY
4872: ARRAY
4873: PUSH
4874: LD_INT 2
4876: ARRAY
4877: PPUSH
4878: CALL_OW 86
// Init_Win_Condition ;
4882: CALL 4690 0 0
// end ; AnimateTrees ( true ) ;
4886: LD_INT 1
4888: PPUSH
4889: CALL_OW 573
// InitApeman ;
4893: CALL 5705 0 0
// BuildUpAreas := [ BuildUp1 , BuildUp2 , BuildUp3 , BuildUp4 , BuildUp5 , BuildUp6 ] ;
4897: LD_ADDR_EXP 56
4901: PUSH
4902: LD_INT 7
4904: PUSH
4905: LD_INT 8
4907: PUSH
4908: LD_INT 9
4910: PUSH
4911: LD_INT 10
4913: PUSH
4914: LD_INT 11
4916: PUSH
4917: LD_INT 12
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: ST_TO_ADDR
// BeginBuildUp ;
4928: CALL 8009 0 0
// end ;
4932: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) = 0 and spect = 0 do
4933: LD_INT 22
4935: PUSH
4936: LD_OWVAR 2
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 2
4947: PUSH
4948: LD_INT 21
4950: PUSH
4951: LD_INT 1
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 33
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: LD_INT 33
4970: PUSH
4971: LD_INT 5
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 30
4980: PUSH
4981: LD_INT 0
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: LD_INT 30
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: PPUSH
5010: CALL_OW 69
5014: PUSH
5015: LD_INT 0
5017: EQUAL
5018: PUSH
5019: LD_EXP 31
5023: PUSH
5024: LD_INT 0
5026: EQUAL
5027: AND
5028: IFFALSE 5042
5030: GO 5032
5032: DISABLE
// begin fogoff ( your_side ) ;
5033: LD_OWVAR 2
5037: PPUSH
5038: CALL_OW 344
// end ; end_of_file
5042: END
// every 1 1$0 + 0 0$0.3 marked 10 do
5043: GO 5045
5045: DISABLE
// begin CreateCratesArea ( Rand ( 4 , 5 ) , MZBaseArea , true ) ;
5046: LD_INT 4
5048: PPUSH
5049: LD_INT 5
5051: PPUSH
5052: CALL_OW 12
5056: PPUSH
5057: LD_INT 14
5059: PPUSH
5060: LD_INT 1
5062: PPUSH
5063: CALL_OW 55
// enable ;
5067: ENABLE
// end ;
5068: END
// every 0 0$1 + 0 0$0.6 marked 10 do var i , amount ;
5069: GO 5071
5071: DISABLE
5072: LD_INT 0
5074: PPUSH
5075: PPUSH
// begin case tick of 1 .. 1 1$0 :
5076: LD_OWVAR 1
5080: PUSH
5081: LD_INT 1
5083: DOUBLE
5084: GREATEREQUAL
5085: IFFALSE 5093
5087: LD_INT 2100
5089: DOUBLE
5090: LESSEQUAL
5091: IFTRUE 5095
5093: GO 5123
5095: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5096: LD_EXP 25
5100: PUSH
5101: LD_INT 100
5103: DIVREAL
5104: PUSH
5105: LD_INT 350
5107: PPUSH
5108: LD_INT 1050
5110: PPUSH
5111: CALL_OW 12
5115: MUL
5116: PPUSH
5117: CALL_OW 67
5121: GO 5425
5123: LD_INT 2100
5125: PUSH
5126: LD_INT 1
5128: PLUS
5129: DOUBLE
5130: GREATEREQUAL
5131: IFFALSE 5139
5133: LD_INT 10500
5135: DOUBLE
5136: LESSEQUAL
5137: IFTRUE 5141
5139: GO 5169
5141: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$45 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5142: LD_EXP 25
5146: PUSH
5147: LD_INT 100
5149: DIVREAL
5150: PUSH
5151: LD_INT 1050
5153: PPUSH
5154: LD_INT 1575
5156: PPUSH
5157: CALL_OW 12
5161: MUL
5162: PPUSH
5163: CALL_OW 67
5167: GO 5425
5169: LD_INT 10500
5171: PUSH
5172: LD_INT 1
5174: PLUS
5175: DOUBLE
5176: GREATEREQUAL
5177: IFFALSE 5185
5179: LD_INT 21000
5181: DOUBLE
5182: LESSEQUAL
5183: IFTRUE 5187
5185: GO 5215
5187: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 1 1$0 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5188: LD_EXP 25
5192: PUSH
5193: LD_INT 100
5195: DIVREAL
5196: PUSH
5197: LD_INT 1575
5199: PPUSH
5200: LD_INT 2100
5202: PPUSH
5203: CALL_OW 12
5207: MUL
5208: PPUSH
5209: CALL_OW 67
5213: GO 5425
5215: LD_INT 21000
5217: PUSH
5218: LD_INT 1
5220: PLUS
5221: DOUBLE
5222: GREATEREQUAL
5223: IFFALSE 5231
5225: LD_INT 42000
5227: DOUBLE
5228: LESSEQUAL
5229: IFTRUE 5233
5231: GO 5261
5233: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$0 , 1 1$15 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5234: LD_EXP 25
5238: PUSH
5239: LD_INT 100
5241: DIVREAL
5242: PUSH
5243: LD_INT 2100
5245: PPUSH
5246: LD_INT 2625
5248: PPUSH
5249: CALL_OW 12
5253: MUL
5254: PPUSH
5255: CALL_OW 67
5259: GO 5425
5261: LD_INT 42000
5263: PUSH
5264: LD_INT 1
5266: PLUS
5267: DOUBLE
5268: GREATEREQUAL
5269: IFFALSE 5277
5271: LD_INT 63000
5273: DOUBLE
5274: LESSEQUAL
5275: IFTRUE 5279
5277: GO 5307
5279: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5280: LD_EXP 25
5284: PUSH
5285: LD_INT 100
5287: DIVREAL
5288: PUSH
5289: LD_INT 2625
5291: PPUSH
5292: LD_INT 3150
5294: PPUSH
5295: CALL_OW 12
5299: MUL
5300: PPUSH
5301: CALL_OW 67
5305: GO 5425
5307: LD_INT 63000
5309: PUSH
5310: LD_INT 1
5312: PLUS
5313: DOUBLE
5314: GREATEREQUAL
5315: IFFALSE 5323
5317: LD_INT 105000
5319: DOUBLE
5320: LESSEQUAL
5321: IFTRUE 5325
5323: GO 5353
5325: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5326: LD_EXP 25
5330: PUSH
5331: LD_INT 100
5333: DIVREAL
5334: PUSH
5335: LD_INT 3150
5337: PPUSH
5338: LD_INT 3675
5340: PPUSH
5341: CALL_OW 12
5345: MUL
5346: PPUSH
5347: CALL_OW 67
5351: GO 5425
5353: LD_INT 105000
5355: PUSH
5356: LD_INT 1
5358: PLUS
5359: DOUBLE
5360: GREATEREQUAL
5361: IFFALSE 5369
5363: LD_INT 630000
5365: DOUBLE
5366: LESSEQUAL
5367: IFTRUE 5371
5369: GO 5399
5371: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$45 , 2 2$0 ) ) ; else
5372: LD_EXP 25
5376: PUSH
5377: LD_INT 100
5379: DIVREAL
5380: PUSH
5381: LD_INT 3675
5383: PPUSH
5384: LD_INT 4200
5386: PPUSH
5387: CALL_OW 12
5391: MUL
5392: PPUSH
5393: CALL_OW 67
5397: GO 5425
5399: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5400: LD_EXP 25
5404: PUSH
5405: LD_INT 100
5407: DIVREAL
5408: PUSH
5409: LD_INT 4200
5411: PPUSH
5412: LD_INT 5250
5414: PPUSH
5415: CALL_OW 12
5419: MUL
5420: PPUSH
5421: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5425: LD_ADDR_VAR 0 2
5429: PUSH
5430: LD_INT 3
5432: PPUSH
5433: LD_INT 5
5435: PPUSH
5436: CALL_OW 12
5440: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5441: LD_ADDR_VAR 0 1
5445: PUSH
5446: LD_EXP 37
5450: PUSH
5451: LD_INT 0
5453: PUSH
5454: EMPTY
5455: LIST
5456: DIFF
5457: PUSH
5458: FOR_IN
5459: IFFALSE 5508
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5461: LD_VAR 0 2
5465: PPUSH
5466: LD_EXP 42
5470: PUSH
5471: LD_VAR 0 1
5475: ARRAY
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: LD_EXP 42
5485: PUSH
5486: LD_VAR 0 1
5490: ARRAY
5491: PUSH
5492: LD_INT 2
5494: ARRAY
5495: PPUSH
5496: LD_INT 20
5498: PPUSH
5499: LD_INT 1
5501: PPUSH
5502: CALL_OW 56
5506: GO 5458
5508: POP
5509: POP
// enable ;
5510: ENABLE
// end ; end_of_file
5511: PPOPN 2
5513: END
// every 20 20$00 trigger apemanNumber do
5514: LD_EXP 48
5518: IFFALSE 5551
5520: GO 5522
5522: DISABLE
// begin enable ;
5523: ENABLE
// if apeLevel >= 8 then
5524: LD_EXP 53
5528: PUSH
5529: LD_INT 8
5531: GREATEREQUAL
5532: IFFALSE 5537
// disable else
5534: DISABLE
5535: GO 5551
// apeLevel := apeLevel + 1 ;
5537: LD_ADDR_EXP 53
5541: PUSH
5542: LD_EXP 53
5546: PUSH
5547: LD_INT 1
5549: PLUS
5550: ST_TO_ADDR
// end ;
5551: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5552: LD_EXP 48
5556: PUSH
5557: LD_EXP 49
5561: LESS
5562: IFFALSE 5702
5564: GO 5566
5566: DISABLE
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
5571: PPUSH
5572: PPUSH
// begin enable ;
5573: ENABLE
// for i := 1 to apemanPos do
5574: LD_ADDR_VAR 0 1
5578: PUSH
5579: DOUBLE
5580: LD_INT 1
5582: DEC
5583: ST_TO_ADDR
5584: LD_EXP 51
5588: PUSH
5589: FOR_TO
5590: IFFALSE 5700
// begin if apemanPlayerCount [ i ] then
5592: LD_EXP 52
5596: PUSH
5597: LD_VAR 0 1
5601: ARRAY
5602: IFFALSE 5698
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5604: LD_EXP 52
5608: PUSH
5609: LD_VAR 0 1
5613: ARRAY
5614: PUSH
5615: LD_EXP 51
5619: PUSH
5620: LD_VAR 0 1
5624: ARRAY
5625: GREATER
5626: IFFALSE 5698
// begin ape := PrepareApeman ;
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: CALL 6213 0 0
5637: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5638: LD_VAR 0 2
5642: PPUSH
5643: LD_EXP 54
5647: PUSH
5648: LD_VAR 0 1
5652: ARRAY
5653: PPUSH
5654: LD_INT 0
5656: PPUSH
5657: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5661: LD_ADDR_EXP 51
5665: PUSH
5666: LD_EXP 51
5670: PPUSH
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_EXP 51
5680: PUSH
5681: LD_VAR 0 1
5685: ARRAY
5686: PUSH
5687: LD_VAR 0 2
5691: UNION
5692: PPUSH
5693: CALL_OW 1
5697: ST_TO_ADDR
// end ; end ; end ;
5698: GO 5589
5700: POP
5701: POP
// end ;
5702: PPOPN 4
5704: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
5709: PPUSH
5710: PPUSH
5711: PPUSH
5712: PPUSH
5713: PPUSH
// playersAmount := 0 ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_INT 0
5721: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , ] ;
5722: LD_ADDR_VAR 0 7
5726: PUSH
5727: LD_INT 3
5729: PUSH
5730: LD_INT 2
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: LD_INT 4
5738: PUSH
5739: LD_INT 6
5741: PUSH
5742: LD_INT 5
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5753: LD_ADDR_EXP 54
5757: PUSH
5758: LD_INT 0
5760: PUSH
5761: LD_INT 0
5763: PUSH
5764: LD_INT 0
5766: PUSH
5767: LD_INT 0
5769: PUSH
5770: LD_INT 0
5772: PUSH
5773: LD_INT 0
5775: PUSH
5776: LD_INT 0
5778: PUSH
5779: LD_INT 0
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: ST_TO_ADDR
// for j = 1 to Side_Positions do
5792: LD_ADDR_VAR 0 4
5796: PUSH
5797: DOUBLE
5798: LD_INT 1
5800: DEC
5801: ST_TO_ADDR
5802: LD_EXP 37
5806: PUSH
5807: FOR_TO
5808: IFFALSE 5875
// if Side_Positions [ j ] then
5810: LD_EXP 37
5814: PUSH
5815: LD_VAR 0 4
5819: ARRAY
5820: IFFALSE 5873
// begin playersAmount := playersAmount + 1 ;
5822: LD_ADDR_VAR 0 3
5826: PUSH
5827: LD_VAR 0 3
5831: PUSH
5832: LD_INT 1
5834: PLUS
5835: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5836: LD_ADDR_EXP 54
5840: PUSH
5841: LD_EXP 54
5845: PPUSH
5846: LD_VAR 0 4
5850: PPUSH
5851: LD_VAR 0 7
5855: PUSH
5856: LD_EXP 37
5860: PUSH
5861: LD_VAR 0 4
5865: ARRAY
5866: ARRAY
5867: PPUSH
5868: CALL_OW 1
5872: ST_TO_ADDR
// end ;
5873: GO 5807
5875: POP
5876: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5877: LD_ADDR_EXP 50
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_EXP 27
5889: MUL
5890: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5891: LD_ADDR_EXP 48
5895: PUSH
5896: LD_VAR 0 3
5900: PUSH
5901: LD_EXP 50
5905: MUL
5906: ST_TO_ADDR
// apemanLimit := apemanNumber ;
5907: LD_ADDR_EXP 49
5911: PUSH
5912: LD_EXP 48
5916: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5917: LD_ADDR_EXP 51
5921: PUSH
5922: LD_INT 0
5924: PUSH
5925: LD_INT 0
5927: PUSH
5928: LD_INT 0
5930: PUSH
5931: LD_INT 0
5933: PUSH
5934: LD_INT 0
5936: PUSH
5937: LD_INT 0
5939: PUSH
5940: LD_INT 0
5942: PUSH
5943: LD_INT 0
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5956: LD_ADDR_EXP 52
5960: PUSH
5961: LD_INT 0
5963: PUSH
5964: LD_INT 0
5966: PUSH
5967: LD_INT 0
5969: PUSH
5970: LD_INT 0
5972: PUSH
5973: LD_INT 0
5975: PUSH
5976: LD_INT 0
5978: PUSH
5979: LD_INT 0
5981: PUSH
5982: LD_INT 0
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: ST_TO_ADDR
// apeLevel := 1 ;
5995: LD_ADDR_EXP 53
5999: PUSH
6000: LD_INT 1
6002: ST_TO_ADDR
// if not apemanNumber then
6003: LD_EXP 48
6007: NOT
6008: IFFALSE 6012
// exit ;
6010: GO 6208
// for i := 1 to apemanPerPlayer do
6012: LD_ADDR_VAR 0 2
6016: PUSH
6017: DOUBLE
6018: LD_INT 1
6020: DEC
6021: ST_TO_ADDR
6022: LD_EXP 50
6026: PUSH
6027: FOR_TO
6028: IFFALSE 6206
// begin for j := 1 to Side_Positions do
6030: LD_ADDR_VAR 0 4
6034: PUSH
6035: DOUBLE
6036: LD_INT 1
6038: DEC
6039: ST_TO_ADDR
6040: LD_EXP 37
6044: PUSH
6045: FOR_TO
6046: IFFALSE 6202
// if Side_Positions [ j ] then
6048: LD_EXP 37
6052: PUSH
6053: LD_VAR 0 4
6057: ARRAY
6058: IFFALSE 6200
// begin pos := Side_Positions [ j ] ;
6060: LD_ADDR_VAR 0 6
6064: PUSH
6065: LD_EXP 37
6069: PUSH
6070: LD_VAR 0 4
6074: ARRAY
6075: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6076: LD_ADDR_EXP 52
6080: PUSH
6081: LD_EXP 52
6085: PPUSH
6086: LD_VAR 0 4
6090: PPUSH
6091: LD_EXP 52
6095: PUSH
6096: LD_VAR 0 4
6100: ARRAY
6101: PUSH
6102: LD_INT 1
6104: PLUS
6105: PPUSH
6106: CALL_OW 1
6110: ST_TO_ADDR
// ape := PrepareApeman ;
6111: LD_ADDR_VAR 0 5
6115: PUSH
6116: CALL 6213 0 0
6120: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6121: LD_ADDR_EXP 51
6125: PUSH
6126: LD_EXP 51
6130: PPUSH
6131: LD_VAR 0 4
6135: PPUSH
6136: LD_EXP 51
6140: PUSH
6141: LD_VAR 0 4
6145: ARRAY
6146: PPUSH
6147: LD_EXP 51
6151: PUSH
6152: LD_VAR 0 4
6156: ARRAY
6157: PUSH
6158: LD_INT 1
6160: PLUS
6161: PPUSH
6162: LD_VAR 0 5
6166: PPUSH
6167: CALL_OW 1
6171: PPUSH
6172: CALL_OW 1
6176: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6177: LD_VAR 0 5
6181: PPUSH
6182: LD_EXP 54
6186: PUSH
6187: LD_VAR 0 4
6191: ARRAY
6192: PPUSH
6193: LD_INT 0
6195: PPUSH
6196: CALL_OW 49
// end ;
6200: GO 6045
6202: POP
6203: POP
// end ;
6204: GO 6027
6206: POP
6207: POP
// end ;
6208: LD_VAR 0 1
6212: RET
// export function PrepareApeman ; var bonus ; begin
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
// uc_side := 0 ;
6217: LD_ADDR_OWVAR 20
6221: PUSH
6222: LD_INT 0
6224: ST_TO_ADDR
// uc_nation := 0 ;
6225: LD_ADDR_OWVAR 21
6229: PUSH
6230: LD_INT 0
6232: ST_TO_ADDR
// InitHc ;
6233: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6237: LD_ADDR_VAR 0 2
6241: PUSH
6242: LD_INT 1
6244: NEG
6245: PUSH
6246: LD_INT 0
6248: PUSH
6249: LD_INT 1
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_OWVAR 1
6261: PUSH
6262: LD_INT 3
6264: MOD
6265: PUSH
6266: LD_INT 1
6268: PLUS
6269: ARRAY
6270: ST_TO_ADDR
// hc_class := class_apeman ;
6271: LD_ADDR_OWVAR 28
6275: PUSH
6276: LD_INT 12
6278: ST_TO_ADDR
// hc_gallery :=  ;
6279: LD_ADDR_OWVAR 33
6283: PUSH
6284: LD_STRING 
6286: ST_TO_ADDR
// hc_name :=  ;
6287: LD_ADDR_OWVAR 26
6291: PUSH
6292: LD_STRING 
6294: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6295: LD_ADDR_OWVAR 31
6299: PUSH
6300: LD_EXP 53
6304: PUSH
6305: LD_VAR 0 2
6309: PLUS
6310: PUSH
6311: LD_EXP 53
6315: PUSH
6316: LD_VAR 0 2
6320: PLUS
6321: PUSH
6322: LD_EXP 53
6326: PUSH
6327: LD_VAR 0 2
6331: PLUS
6332: PUSH
6333: LD_EXP 53
6337: PUSH
6338: LD_VAR 0 2
6342: PLUS
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6350: LD_ADDR_OWVAR 35
6354: PUSH
6355: LD_INT 10
6357: PUSH
6358: LD_VAR 0 2
6362: MUL
6363: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6364: LD_ADDR_OWVAR 29
6368: PUSH
6369: LD_INT 12
6371: PUSH
6372: LD_INT 10
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: ST_TO_ADDR
// result := CreateHuman ;
6379: LD_ADDR_VAR 0 1
6383: PUSH
6384: CALL_OW 44
6388: ST_TO_ADDR
// end ;
6389: LD_VAR 0 1
6393: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6394: LD_INT 0
6396: PPUSH
6397: PPUSH
6398: PPUSH
// if not ape then
6399: LD_VAR 0 1
6403: NOT
6404: IFFALSE 6408
// exit ;
6406: GO 6533
// side := GetSide ( ape ) ;
6408: LD_ADDR_VAR 0 3
6412: PUSH
6413: LD_VAR 0 1
6417: PPUSH
6418: CALL_OW 255
6422: ST_TO_ADDR
// if not side then
6423: LD_VAR 0 3
6427: NOT
6428: IFFALSE 6482
// begin for i = 1 to apemanPos do
6430: LD_ADDR_VAR 0 4
6434: PUSH
6435: DOUBLE
6436: LD_INT 1
6438: DEC
6439: ST_TO_ADDR
6440: LD_EXP 51
6444: PUSH
6445: FOR_TO
6446: IFFALSE 6480
// if ape in apemanPos [ i ] then
6448: LD_VAR 0 1
6452: PUSH
6453: LD_EXP 51
6457: PUSH
6458: LD_VAR 0 4
6462: ARRAY
6463: IN
6464: IFFALSE 6478
// begin side := i ;
6466: LD_ADDR_VAR 0 3
6470: PUSH
6471: LD_VAR 0 4
6475: ST_TO_ADDR
// break ;
6476: GO 6480
// end ;
6478: GO 6445
6480: POP
6481: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6482: LD_ADDR_EXP 51
6486: PUSH
6487: LD_EXP 51
6491: PPUSH
6492: LD_VAR 0 3
6496: PPUSH
6497: LD_EXP 51
6501: PUSH
6502: LD_VAR 0 3
6506: ARRAY
6507: PUSH
6508: LD_VAR 0 1
6512: DIFF
6513: PPUSH
6514: CALL_OW 1
6518: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6519: LD_ADDR_EXP 48
6523: PUSH
6524: LD_EXP 48
6528: PUSH
6529: LD_INT 1
6531: MINUS
6532: ST_TO_ADDR
// end ; end_of_file
6533: LD_VAR 0 2
6537: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6538: LD_VAR 0 1
6542: PPUSH
6543: CALL_OW 266
6547: PUSH
6548: LD_INT 0
6550: PUSH
6551: LD_INT 1
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: IN
6558: IFFALSE 6583
// SetBName ( b , @ & GetSide ( b ) ) ;
6560: LD_VAR 0 1
6564: PPUSH
6565: LD_STRING @
6567: PUSH
6568: LD_VAR 0 1
6572: PPUSH
6573: CALL_OW 255
6577: STR
6578: PPUSH
6579: CALL_OW 500
// end ;
6583: PPOPN 2
6585: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6586: LD_VAR 0 1
6590: PPUSH
6591: CALL_OW 266
6595: PUSH
6596: LD_INT 0
6598: PUSH
6599: LD_INT 1
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: IN
6606: IFFALSE 6631
// SetBName ( b , @ & GetSide ( b ) ) ;
6608: LD_VAR 0 1
6612: PPUSH
6613: LD_STRING @
6615: PUSH
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 255
6625: STR
6626: PPUSH
6627: CALL_OW 500
// end ;
6631: PPOPN 3
6633: END
// on VehicleConstructed ( veh , fac ) do var side ;
6634: LD_INT 0
6636: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6637: LD_VAR 0 1
6641: PPUSH
6642: CALL_OW 263
6646: PUSH
6647: LD_INT 5
6649: EQUAL
6650: IFFALSE 6792
// begin side := GetSide ( veh ) ;
6652: LD_ADDR_VAR 0 3
6656: PUSH
6657: LD_VAR 0 1
6661: PPUSH
6662: CALL_OW 255
6666: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6667: LD_ADDR_EXP 51
6671: PUSH
6672: LD_EXP 51
6676: PPUSH
6677: LD_VAR 0 3
6681: PPUSH
6682: LD_EXP 51
6686: PUSH
6687: LD_VAR 0 3
6691: ARRAY
6692: PPUSH
6693: LD_INT 52
6695: PUSH
6696: EMPTY
6697: LIST
6698: PPUSH
6699: CALL_OW 72
6703: PUSH
6704: LD_INT 22
6706: PUSH
6707: LD_VAR 0 3
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: LD_INT 33
6721: PUSH
6722: LD_INT 5
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 25
6731: PUSH
6732: LD_INT 12
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 25
6741: PUSH
6742: LD_INT 15
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 25
6751: PUSH
6752: LD_INT 16
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 25
6761: PUSH
6762: LD_INT 17
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PPUSH
6781: CALL_OW 69
6785: UNION
6786: PPUSH
6787: CALL_OW 1
6791: ST_TO_ADDR
// end ; end ;
6792: PPOPN 3
6794: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6795: LD_INT 0
6797: PPUSH
6798: PPUSH
6799: PPUSH
6800: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6801: LD_VAR 0 1
6805: PPUSH
6806: CALL_OW 257
6810: PUSH
6811: LD_INT 12
6813: PUSH
6814: LD_INT 15
6816: PUSH
6817: LD_INT 17
6819: PUSH
6820: LD_INT 16
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: IN
6829: PUSH
6830: LD_VAR 0 1
6834: PPUSH
6835: CALL_OW 263
6839: PUSH
6840: LD_INT 5
6842: EQUAL
6843: OR
6844: IFFALSE 6855
// ApeKilled ( j ) ;
6846: LD_VAR 0 1
6850: PPUSH
6851: CALL 6394 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6855: LD_VAR 0 1
6859: PPUSH
6860: CALL_OW 266
6864: PUSH
6865: LD_INT 0
6867: PUSH
6868: LD_INT 1
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: IN
6875: IFFALSE 6957
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6877: LD_ADDR_VAR 0 4
6881: PUSH
6882: LD_EXP 37
6886: PUSH
6887: LD_VAR 0 1
6891: PPUSH
6892: CALL_OW 255
6896: ARRAY
6897: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
6898: LD_ADDR_VAR 0 2
6902: PUSH
6903: LD_EXP 42
6907: PUSH
6908: LD_VAR 0 4
6912: ARRAY
6913: PUSH
6914: LD_INT 1
6916: ARRAY
6917: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
6918: LD_ADDR_VAR 0 3
6922: PUSH
6923: LD_EXP 42
6927: PUSH
6928: LD_VAR 0 4
6932: ARRAY
6933: PUSH
6934: LD_INT 2
6936: ARRAY
6937: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
6938: LD_VAR 0 2
6942: PPUSH
6943: LD_VAR 0 3
6947: PPUSH
6948: CALL_OW 420
6952: PPUSH
6953: CALL_OW 419
// end ; end ;
6957: PPOPN 5
6959: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
6960: LD_VAR 0 1
6964: PPUSH
6965: LD_VAR 0 2
6969: PPUSH
6970: LD_VAR 0 3
6974: PPUSH
6975: LD_OWVAR 2
6979: PPUSH
6980: CALL 8607 0 4
6984: PPOPN 3
6986: END
// function CanWinLoose ; begin
6987: LD_INT 0
6989: PPUSH
// Result := true ;
6990: LD_ADDR_VAR 0 1
6994: PUSH
6995: LD_INT 1
6997: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
6998: CALL_OW 518
7002: PUSH
7003: CALL_OW 519
7007: PUSH
7008: LD_INT 0
7010: GREATER
7011: AND
7012: IFFALSE 7022
// Result := false ;
7014: LD_ADDR_VAR 0 1
7018: PUSH
7019: LD_INT 0
7021: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7022: CALL_OW 531
7026: PUSH
7027: CALL_OW 519
7031: PUSH
7032: LD_INT 1
7034: GREATER
7035: AND
7036: IFFALSE 7046
// Result := false ;
7038: LD_ADDR_VAR 0 1
7042: PUSH
7043: LD_INT 0
7045: ST_TO_ADDR
// end ;
7046: LD_VAR 0 1
7050: RET
// function HasPower ( i ) ; begin
7051: LD_INT 0
7053: PPUSH
// if def_people_respawning then
7054: LD_EXP 11
7058: IFFALSE 7149
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7060: LD_ADDR_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_VAR 0 1
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 2
7079: PUSH
7080: LD_INT 21
7082: PUSH
7083: LD_INT 1
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 33
7092: PUSH
7093: LD_INT 3
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 33
7102: PUSH
7103: LD_INT 5
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: LD_INT 30
7112: PUSH
7113: LD_INT 0
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: LD_INT 30
7122: PUSH
7123: LD_INT 1
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PPUSH
7142: CALL_OW 69
7146: ST_TO_ADDR
7147: GO 7214
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 2
7168: PUSH
7169: LD_INT 21
7171: PUSH
7172: LD_INT 1
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 33
7181: PUSH
7182: LD_INT 3
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 33
7191: PUSH
7192: LD_INT 5
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PPUSH
7209: CALL_OW 69
7213: ST_TO_ADDR
// end ;
7214: LD_VAR 0 2
7218: RET
// function AlliedSides ( i , j ) ; begin
7219: LD_INT 0
7221: PPUSH
// Result := false ;
7222: LD_ADDR_VAR 0 3
7226: PUSH
7227: LD_INT 0
7229: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_VAR 0 2
7239: PPUSH
7240: CALL_OW 81
7244: PUSH
7245: LD_INT 1
7247: EQUAL
7248: PUSH
7249: LD_VAR 0 2
7253: PPUSH
7254: LD_VAR 0 1
7258: PPUSH
7259: CALL_OW 81
7263: PUSH
7264: LD_INT 1
7266: EQUAL
7267: AND
7268: PUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 83
7278: AND
7279: PUSH
7280: LD_VAR 0 2
7284: PPUSH
7285: CALL_OW 83
7289: AND
7290: IFFALSE 7300
// Result := true ;
7292: LD_ADDR_VAR 0 3
7296: PUSH
7297: LD_INT 1
7299: ST_TO_ADDR
// end ;
7300: LD_VAR 0 3
7304: RET
// every 0 0$3 trigger CanWinLoose marked 400 do
7305: CALL 6987 0 0
7309: IFFALSE 7318
7311: GO 7313
7313: DISABLE
// YouLostInMultiplayer ;
7314: CALL_OW 107
7318: END
// every 0 0$3 trigger CanWinLoose marked 401 do
7319: CALL 6987 0 0
7323: IFFALSE 7347
7325: GO 7327
7327: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
7328: LD_EXP 38
7332: PUSH
7333: LD_OWVAR 2
7337: ARRAY
7338: PPUSH
7339: CALL 8649 0 1
// YouWinInMultiplayer ;
7343: CALL_OW 106
// end ;
7347: END
// every 0 0$3 marked 98 do var i , CanWin ;
7348: GO 7350
7350: DISABLE
7351: LD_INT 0
7353: PPUSH
7354: PPUSH
// begin if not HasPower ( your_side ) then
7355: LD_OWVAR 2
7359: PPUSH
7360: CALL 7051 0 1
7364: NOT
7365: IFFALSE 7376
// begin Multiplayer_Loose_Message ;
7367: CALL_OW 521
// enable ( 400 ) ;
7371: LD_INT 400
7373: ENABLE_MARKED
// end else
7374: GO 7509
// begin CanWin := true ;
7376: LD_ADDR_VAR 0 2
7380: PUSH
7381: LD_INT 1
7383: ST_TO_ADDR
// for i := 1 to 8 do
7384: LD_ADDR_VAR 0 1
7388: PUSH
7389: DOUBLE
7390: LD_INT 1
7392: DEC
7393: ST_TO_ADDR
7394: LD_INT 8
7396: PUSH
7397: FOR_TO
7398: IFFALSE 7495
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7400: LD_EXP 37
7404: PUSH
7405: LD_VAR 0 1
7409: ARRAY
7410: PUSH
7411: LD_VAR 0 1
7415: PPUSH
7416: CALL_OW 108
7420: AND
7421: PUSH
7422: LD_VAR 0 1
7426: PUSH
7427: LD_OWVAR 2
7431: NONEQUAL
7432: AND
7433: IFFALSE 7493
// if not Side_Teams [ i ] or ( Side_Teams [ i ] <> Side_Teams [ your_side ] ) then
7435: LD_EXP 35
7439: PUSH
7440: LD_VAR 0 1
7444: ARRAY
7445: NOT
7446: PUSH
7447: LD_EXP 35
7451: PUSH
7452: LD_VAR 0 1
7456: ARRAY
7457: PUSH
7458: LD_EXP 35
7462: PUSH
7463: LD_OWVAR 2
7467: ARRAY
7468: NONEQUAL
7469: OR
7470: IFFALSE 7493
// if HasPower ( i ) then
7472: LD_VAR 0 1
7476: PPUSH
7477: CALL 7051 0 1
7481: IFFALSE 7493
// begin CanWin := false ;
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_INT 0
7490: ST_TO_ADDR
// break ;
7491: GO 7495
// end ;
7493: GO 7397
7495: POP
7496: POP
// if CanWin then
7497: LD_VAR 0 2
7501: IFFALSE 7508
// enable ( 401 ) else
7503: LD_INT 401
7505: ENABLE_MARKED
7506: GO 7509
// enable ;
7508: ENABLE
// end ; end ;
7509: PPOPN 2
7511: END
// every 0 0$3 marked 99 do var i , CanWin ;
7512: GO 7514
7514: DISABLE
7515: LD_INT 0
7517: PPUSH
7518: PPUSH
// begin if not HasPower ( your_side ) then
7519: LD_OWVAR 2
7523: PPUSH
7524: CALL 7051 0 1
7528: NOT
7529: IFFALSE 7540
// begin Multiplayer_Loose_Message ;
7531: CALL_OW 521
// enable ( 400 ) ;
7535: LD_INT 400
7537: ENABLE_MARKED
// end else
7538: GO 7653
// begin CanWin := true ;
7540: LD_ADDR_VAR 0 2
7544: PUSH
7545: LD_INT 1
7547: ST_TO_ADDR
// for i := 1 to 8 do
7548: LD_ADDR_VAR 0 1
7552: PUSH
7553: DOUBLE
7554: LD_INT 1
7556: DEC
7557: ST_TO_ADDR
7558: LD_INT 8
7560: PUSH
7561: FOR_TO
7562: IFFALSE 7639
// if Side_Positions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
7564: LD_EXP 37
7568: PUSH
7569: LD_VAR 0 1
7573: ARRAY
7574: PUSH
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 108
7584: AND
7585: PUSH
7586: LD_VAR 0 1
7590: PUSH
7591: LD_OWVAR 2
7595: NONEQUAL
7596: AND
7597: IFFALSE 7637
// if not AlliedSides ( i , your_side ) then
7599: LD_VAR 0 1
7603: PPUSH
7604: LD_OWVAR 2
7608: PPUSH
7609: CALL 7219 0 2
7613: NOT
7614: IFFALSE 7637
// if HasPower ( i ) then
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL 7051 0 1
7625: IFFALSE 7637
// begin CanWin := false ;
7627: LD_ADDR_VAR 0 2
7631: PUSH
7632: LD_INT 0
7634: ST_TO_ADDR
// break ;
7635: GO 7639
// end ;
7637: GO 7561
7639: POP
7640: POP
// if CanWin then
7641: LD_VAR 0 2
7645: IFFALSE 7652
// enable ( 401 ) else
7647: LD_INT 401
7649: ENABLE_MARKED
7650: GO 7653
// enable ;
7652: ENABLE
// end ; end ; end_of_file
7653: PPOPN 2
7655: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7656: LD_INT 0
7658: PPUSH
7659: PPUSH
// for un in battle_flags_id do
7660: LD_ADDR_VAR 0 2
7664: PUSH
7665: LD_EXP 47
7669: PUSH
7670: FOR_IN
7671: IFFALSE 7746
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7673: LD_VAR 0 2
7677: PPUSH
7678: LD_INT 1
7680: PUSH
7681: LD_LOC 9
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 2
7692: PUSH
7693: LD_LOC 9
7697: PUSH
7698: LD_INT 2
7700: DIV
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 3
7708: PUSH
7709: LD_LOC 9
7713: PUSH
7714: LD_INT 5
7716: DIV
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 20
7724: PUSH
7725: LD_LOC 9
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL_OW 423
7744: GO 7670
7746: POP
7747: POP
// end ;
7748: LD_VAR 0 1
7752: RET
// every 1 do var un ;
7753: GO 7755
7755: DISABLE
7756: LD_INT 0
7758: PPUSH
// begin if not def_morale_flags then
7759: LD_EXP 9
7763: NOT
7764: IFFALSE 7768
// exit ;
7766: GO 7845
// if not morale_decreasing_time then
7768: LD_EXP 26
7772: NOT
7773: IFFALSE 7777
// exit ;
7775: GO 7845
// strength = 100 ;
7777: LD_ADDR_LOC 9
7781: PUSH
7782: LD_INT 100
7784: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7785: LD_EXP 26
7789: PPUSH
7790: CALL_OW 67
// strength := strength - 1 ;
7794: LD_ADDR_LOC 9
7798: PUSH
7799: LD_LOC 9
7803: PUSH
7804: LD_INT 1
7806: MINUS
7807: ST_TO_ADDR
// Update_Flags ;
7808: CALL 7656 0 0
// until not strength ;
7812: LD_LOC 9
7816: NOT
7817: IFFALSE 7785
// for un in battle_flags_id do
7819: LD_ADDR_VAR 0 1
7823: PUSH
7824: LD_EXP 47
7828: PUSH
7829: FOR_IN
7830: IFFALSE 7843
// KillBattleFlag ( un ) ;
7832: LD_VAR 0 1
7836: PPUSH
7837: CALL_OW 419
7841: GO 7829
7843: POP
7844: POP
// end ; end_of_file
7845: PPOPN 1
7847: END
// export ExtraStrings ; export function ShowTimer ; var AllStrings ; begin
7848: LD_INT 0
7850: PPUSH
7851: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7852: LD_ADDR_VAR 0 2
7856: PUSH
7857: LD_STRING #Multi1x1-Time
7859: PUSH
7860: LD_OWVAR 1
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7869: LD_INT 0
7871: PUSH
7872: LD_EXP 33
7876: PUSH
7877: LD_OWVAR 1
7881: MINUS
7882: LESSEQUAL
7883: IFFALSE 7914
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7885: LD_ADDR_VAR 0 2
7889: PUSH
7890: LD_VAR 0 2
7894: PUSH
7895: LD_STRING #allowedsibbomb
7897: PUSH
7898: LD_EXP 33
7902: PUSH
7903: LD_OWVAR 1
7907: MINUS
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: ADD
7913: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7914: LD_INT 0
7916: PUSH
7917: LD_EXP 58
7921: PUSH
7922: LD_OWVAR 1
7926: MINUS
7927: LESSEQUAL
7928: IFFALSE 7959
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7930: LD_ADDR_VAR 0 2
7934: PUSH
7935: LD_VAR 0 2
7939: PUSH
7940: LD_STRING #builduptime
7942: PUSH
7943: LD_EXP 58
7947: PUSH
7948: LD_OWVAR 1
7952: MINUS
7953: PUSH
7954: EMPTY
7955: LIST
7956: LIST
7957: ADD
7958: ST_TO_ADDR
// if ( ExtraStrings ) then
7959: LD_EXP 55
7963: IFFALSE 7985
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7965: LD_ADDR_VAR 0 2
7969: PUSH
7970: LD_VAR 0 2
7974: PUSH
7975: LD_STRING 
7977: ADD
7978: PUSH
7979: LD_EXP 55
7983: ADD
7984: ST_TO_ADDR
// Display_Strings := AllStrings ;
7985: LD_ADDR_OWVAR 47
7989: PUSH
7990: LD_VAR 0 2
7994: ST_TO_ADDR
// end ;
7995: LD_VAR 0 1
7999: RET
// every 0 0$1 do
8000: GO 8002
8002: DISABLE
// begin ShowTimer ;
8003: CALL 7848 0 0
// enable ;
8007: ENABLE
// end ; end_of_file
8008: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
8009: LD_INT 0
8011: PPUSH
8012: PPUSH
8013: PPUSH
// BuildUpTime_Delay = 0 ;
8014: LD_ADDR_EXP 58
8018: PUSH
8019: LD_INT 0
8021: ST_TO_ADDR
// if not def_builduptime then
8022: LD_EXP 16
8026: NOT
8027: IFFALSE 8031
// exit ;
8029: GO 8214
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
8031: LD_ADDR_EXP 58
8035: PUSH
8036: LD_INT 8400
8038: PUSH
8039: LD_INT 2100
8041: PUSH
8042: LD_EXP 16
8046: MUL
8047: PLUS
8048: ST_TO_ADDR
// BuildUpTimeActive := true ;
8049: LD_ADDR_EXP 57
8053: PUSH
8054: LD_INT 1
8056: ST_TO_ADDR
// for i := 1 to 8 do
8057: LD_ADDR_VAR 0 2
8061: PUSH
8062: DOUBLE
8063: LD_INT 1
8065: DEC
8066: ST_TO_ADDR
8067: LD_INT 8
8069: PUSH
8070: FOR_TO
8071: IFFALSE 8212
// if Side_Positions [ i ] then
8073: LD_EXP 37
8077: PUSH
8078: LD_VAR 0 2
8082: ARRAY
8083: IFFALSE 8210
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
8085: LD_EXP 56
8089: PUSH
8090: LD_EXP 37
8094: PUSH
8095: LD_VAR 0 2
8099: ARRAY
8100: ARRAY
8101: PPUSH
8102: LD_INT 5
8104: PPUSH
8105: CALL_OW 424
// for j := 1 to 8 do
8109: LD_ADDR_VAR 0 3
8113: PUSH
8114: DOUBLE
8115: LD_INT 1
8117: DEC
8118: ST_TO_ADDR
8119: LD_INT 8
8121: PUSH
8122: FOR_TO
8123: IFFALSE 8208
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8125: LD_EXP 37
8129: PUSH
8130: LD_VAR 0 3
8134: ARRAY
8135: PUSH
8136: LD_EXP 35
8140: PUSH
8141: LD_VAR 0 2
8145: ARRAY
8146: PUSH
8147: LD_EXP 35
8151: PUSH
8152: LD_VAR 0 3
8156: ARRAY
8157: NONEQUAL
8158: PUSH
8159: LD_EXP 39
8163: NOT
8164: PUSH
8165: LD_VAR 0 2
8169: PUSH
8170: LD_VAR 0 3
8174: NONEQUAL
8175: AND
8176: OR
8177: AND
8178: IFFALSE 8206
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8180: LD_VAR 0 3
8184: PPUSH
8185: LD_EXP 56
8189: PUSH
8190: LD_EXP 37
8194: PUSH
8195: LD_VAR 0 2
8199: ARRAY
8200: ARRAY
8201: PPUSH
8202: CALL_OW 333
8206: GO 8122
8208: POP
8209: POP
// end ;
8210: GO 8070
8212: POP
8213: POP
// end ;
8214: LD_VAR 0 1
8218: RET
// export function EndBuildUp ; var i , j ; begin
8219: LD_INT 0
8221: PPUSH
8222: PPUSH
8223: PPUSH
// BuildUpTimeActive := false ;
8224: LD_ADDR_EXP 57
8228: PUSH
8229: LD_INT 0
8231: ST_TO_ADDR
// for i := 1 to 8 do
8232: LD_ADDR_VAR 0 2
8236: PUSH
8237: DOUBLE
8238: LD_INT 1
8240: DEC
8241: ST_TO_ADDR
8242: LD_INT 8
8244: PUSH
8245: FOR_TO
8246: IFFALSE 8387
// if Side_Positions [ i ] then
8248: LD_EXP 37
8252: PUSH
8253: LD_VAR 0 2
8257: ARRAY
8258: IFFALSE 8385
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
8260: LD_EXP 56
8264: PUSH
8265: LD_EXP 37
8269: PUSH
8270: LD_VAR 0 2
8274: ARRAY
8275: ARRAY
8276: PPUSH
8277: LD_INT 0
8279: PPUSH
8280: CALL_OW 424
// for j := 1 to 8 do
8284: LD_ADDR_VAR 0 3
8288: PUSH
8289: DOUBLE
8290: LD_INT 1
8292: DEC
8293: ST_TO_ADDR
8294: LD_INT 8
8296: PUSH
8297: FOR_TO
8298: IFFALSE 8383
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8300: LD_EXP 37
8304: PUSH
8305: LD_VAR 0 3
8309: ARRAY
8310: PUSH
8311: LD_EXP 35
8315: PUSH
8316: LD_VAR 0 2
8320: ARRAY
8321: PUSH
8322: LD_EXP 35
8326: PUSH
8327: LD_VAR 0 3
8331: ARRAY
8332: NONEQUAL
8333: PUSH
8334: LD_EXP 39
8338: NOT
8339: PUSH
8340: LD_VAR 0 2
8344: PUSH
8345: LD_VAR 0 3
8349: NONEQUAL
8350: AND
8351: OR
8352: AND
8353: IFFALSE 8381
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8355: LD_VAR 0 3
8359: PPUSH
8360: LD_EXP 56
8364: PUSH
8365: LD_EXP 37
8369: PUSH
8370: LD_VAR 0 2
8374: ARRAY
8375: ARRAY
8376: PPUSH
8377: CALL_OW 334
8381: GO 8297
8383: POP
8384: POP
// end ;
8385: GO 8245
8387: POP
8388: POP
// end ;
8389: LD_VAR 0 1
8393: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
8394: LD_EXP 57
8398: IFFALSE 8573
8400: GO 8402
8402: DISABLE
8403: LD_INT 0
8405: PPUSH
8406: PPUSH
// begin for i := 1 to 8 do
8407: LD_ADDR_VAR 0 1
8411: PUSH
8412: DOUBLE
8413: LD_INT 1
8415: DEC
8416: ST_TO_ADDR
8417: LD_INT 8
8419: PUSH
8420: FOR_TO
8421: IFFALSE 8570
// if Side_Positions [ i ] then
8423: LD_EXP 37
8427: PUSH
8428: LD_VAR 0 1
8432: ARRAY
8433: IFFALSE 8568
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8435: LD_ADDR_VAR 0 2
8439: PUSH
8440: LD_EXP 56
8444: PUSH
8445: LD_EXP 37
8449: PUSH
8450: LD_VAR 0 1
8454: ARRAY
8455: ARRAY
8456: PPUSH
8457: LD_INT 2
8459: PUSH
8460: LD_INT 21
8462: PUSH
8463: LD_INT 1
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 21
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: PUSH
8485: LD_INT 22
8487: PUSH
8488: LD_OWVAR 2
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PPUSH
8501: CALL_OW 70
8505: PUSH
8506: FOR_IN
8507: IFFALSE 8566
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
8509: LD_EXP 35
8513: PUSH
8514: LD_VAR 0 1
8518: ARRAY
8519: PUSH
8520: LD_EXP 35
8524: PUSH
8525: LD_OWVAR 2
8529: ARRAY
8530: NONEQUAL
8531: PUSH
8532: LD_EXP 39
8536: NOT
8537: PUSH
8538: LD_VAR 0 1
8542: PUSH
8543: LD_OWVAR 2
8547: NONEQUAL
8548: AND
8549: OR
8550: IFFALSE 8564
// ComMoveToArea ( un , BuildUpEscape ) ;
8552: LD_VAR 0 2
8556: PPUSH
8557: LD_INT 13
8559: PPUSH
8560: CALL_OW 113
8564: GO 8506
8566: POP
8567: POP
8568: GO 8420
8570: POP
8571: POP
// enable ;
8572: ENABLE
// end ;
8573: PPOPN 2
8575: END
// every 0 0$1 trigger def_builduptime do
8576: LD_EXP 16
8580: IFFALSE 8606
8582: GO 8584
8584: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
8585: LD_INT 8400
8587: PUSH
8588: LD_EXP 16
8592: PUSH
8593: LD_INT 2100
8595: MUL
8596: PLUS
8597: PPUSH
8598: CALL_OW 67
// EndBuildUp ;
8602: CALL 8219 0 0
// end ; end_of_file
8606: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8607: LD_INT 0
8609: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8610: LD_VAR 0 1
8614: PPUSH
8615: CALL_OW 255
8619: PUSH
8620: LD_VAR 0 4
8624: EQUAL
8625: IFFALSE 8644
// begin SetAchievement ( ACH_RAD ) ;
8627: LD_STRING ACH_RAD
8629: PPUSH
8630: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8634: LD_STRING ACH_NL
8636: PPUSH
8637: LD_INT 1
8639: PPUSH
8640: CALL_OW 564
// end end ;
8644: LD_VAR 0 5
8648: RET
// export function SA_Win ( side ) ; begin
8649: LD_INT 0
8651: PPUSH
// case side of 1 :
8652: LD_VAR 0 1
8656: PUSH
8657: LD_INT 1
8659: DOUBLE
8660: EQUAL
8661: IFTRUE 8665
8663: GO 8678
8665: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8666: LD_STRING ACH_AH
8668: PPUSH
8669: LD_INT 1
8671: PPUSH
8672: CALL_OW 564
8676: GO 8841
8678: LD_INT 2
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8699
8686: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8687: LD_STRING ACH_E
8689: PPUSH
8690: LD_INT 1
8692: PPUSH
8693: CALL_OW 564
8697: GO 8841
8699: LD_INT 3
8701: DOUBLE
8702: EQUAL
8703: IFTRUE 8707
8705: GO 8720
8707: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8708: LD_STRING ACH_OOL
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: CALL_OW 564
8718: GO 8841
8720: LD_INT 1
8722: PUSH
8723: LD_INT 2
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: DOUBLE
8730: EQUAL
8731: IFTRUE 8735
8733: GO 8760
8735: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8736: LD_STRING ACH_AH
8738: PPUSH
8739: LD_REAL  5.00000000000000E-0001
8742: PPUSH
8743: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8747: LD_STRING ACH_E
8749: PPUSH
8750: LD_REAL  5.00000000000000E-0001
8753: PPUSH
8754: CALL_OW 564
// end ; [ 2 , 3 ] :
8758: GO 8841
8760: LD_INT 2
8762: PUSH
8763: LD_INT 3
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: DOUBLE
8770: EQUAL
8771: IFTRUE 8775
8773: GO 8800
8775: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8776: LD_STRING ACH_OOL
8778: PPUSH
8779: LD_REAL  5.00000000000000E-0001
8782: PPUSH
8783: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8787: LD_STRING ACH_E
8789: PPUSH
8790: LD_REAL  5.00000000000000E-0001
8793: PPUSH
8794: CALL_OW 564
// end ; [ 3 , 1 ] :
8798: GO 8841
8800: LD_INT 3
8802: PUSH
8803: LD_INT 1
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: DOUBLE
8810: EQUAL
8811: IFTRUE 8815
8813: GO 8840
8815: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8816: LD_STRING ACH_AH
8818: PPUSH
8819: LD_REAL  5.00000000000000E-0001
8822: PPUSH
8823: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8827: LD_STRING ACH_OOL
8829: PPUSH
8830: LD_REAL  5.00000000000000E-0001
8833: PPUSH
8834: CALL_OW 564
// end ; end ;
8838: GO 8841
8840: POP
// end ; end_of_file
8841: LD_VAR 0 2
8845: RET
// export function SetMpTechs ( ) ; var side , i ; begin
8846: LD_INT 0
8848: PPUSH
8849: PPUSH
8850: PPUSH
// for side = 1 to 8 do
8851: LD_ADDR_VAR 0 2
8855: PUSH
8856: DOUBLE
8857: LD_INT 1
8859: DEC
8860: ST_TO_ADDR
8861: LD_INT 8
8863: PUSH
8864: FOR_TO
8865: IFFALSE 8986
// begin for i = 1 to 72 do
8867: LD_ADDR_VAR 0 3
8871: PUSH
8872: DOUBLE
8873: LD_INT 1
8875: DEC
8876: ST_TO_ADDR
8877: LD_INT 72
8879: PUSH
8880: FOR_TO
8881: IFFALSE 8912
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
8883: LD_VAR 0 3
8887: PPUSH
8888: LD_VAR 0 2
8892: PPUSH
8893: LD_INT 0
8895: PPUSH
8896: LD_VAR 0 3
8900: PPUSH
8901: CALL_OW 565
8905: PPUSH
8906: CALL_OW 322
8910: GO 8880
8912: POP
8913: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
8914: LD_INT 73
8916: PPUSH
8917: LD_VAR 0 2
8921: PPUSH
8922: LD_INT 0
8924: PPUSH
8925: LD_INT 25
8927: PPUSH
8928: CALL_OW 565
8932: PPUSH
8933: CALL_OW 322
// for i = 0 to 40 do
8937: LD_ADDR_VAR 0 3
8941: PUSH
8942: DOUBLE
8943: LD_INT 0
8945: DEC
8946: ST_TO_ADDR
8947: LD_INT 40
8949: PUSH
8950: FOR_TO
8951: IFFALSE 8982
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
8953: LD_VAR 0 3
8957: PPUSH
8958: LD_VAR 0 2
8962: PPUSH
8963: LD_INT 1
8965: PPUSH
8966: LD_VAR 0 3
8970: PPUSH
8971: CALL_OW 565
8975: PPUSH
8976: CALL_OW 324
8980: GO 8950
8982: POP
8983: POP
// end ;
8984: GO 8864
8986: POP
8987: POP
// end ;
8988: LD_VAR 0 1
8992: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
8993: LD_INT 0
8995: PPUSH
8996: PPUSH
8997: PPUSH
// for side = 1 to 8 do
8998: LD_ADDR_VAR 0 3
9002: PUSH
9003: DOUBLE
9004: LD_INT 1
9006: DEC
9007: ST_TO_ADDR
9008: LD_INT 8
9010: PUSH
9011: FOR_TO
9012: IFFALSE 13008
// begin for i = 1 to 73 do
9014: LD_ADDR_VAR 0 4
9018: PUSH
9019: DOUBLE
9020: LD_INT 1
9022: DEC
9023: ST_TO_ADDR
9024: LD_INT 73
9026: PUSH
9027: FOR_TO
9028: IFFALSE 9049
// SetTech ( i , side , state_disabled ) ;
9030: LD_VAR 0 4
9034: PPUSH
9035: LD_VAR 0 3
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL_OW 322
9047: GO 9027
9049: POP
9050: POP
// for i = 0 to 40 do
9051: LD_ADDR_VAR 0 4
9055: PUSH
9056: DOUBLE
9057: LD_INT 0
9059: DEC
9060: ST_TO_ADDR
9061: LD_INT 40
9063: PUSH
9064: FOR_TO
9065: IFFALSE 9086
// SetRestrict ( i , side , false ) ;
9067: LD_VAR 0 4
9071: PPUSH
9072: LD_VAR 0 3
9076: PPUSH
9077: LD_INT 0
9079: PPUSH
9080: CALL_OW 324
9084: GO 9064
9086: POP
9087: POP
// case level of 1 :
9088: LD_VAR 0 1
9092: PUSH
9093: LD_INT 1
9095: DOUBLE
9096: EQUAL
9097: IFTRUE 9101
9099: GO 9254
9101: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9102: LD_INT 35
9104: PPUSH
9105: LD_VAR 0 3
9109: PPUSH
9110: LD_INT 1
9112: PPUSH
9113: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9117: LD_INT 45
9119: PPUSH
9120: LD_VAR 0 3
9124: PPUSH
9125: LD_INT 1
9127: PPUSH
9128: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9132: LD_INT 46
9134: PPUSH
9135: LD_VAR 0 3
9139: PPUSH
9140: LD_INT 1
9142: PPUSH
9143: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9147: LD_INT 47
9149: PPUSH
9150: LD_VAR 0 3
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9162: LD_INT 0
9164: PPUSH
9165: LD_VAR 0 3
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9177: LD_INT 2
9179: PPUSH
9180: LD_VAR 0 3
9184: PPUSH
9185: LD_INT 1
9187: PPUSH
9188: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9192: LD_INT 4
9194: PPUSH
9195: LD_VAR 0 3
9199: PPUSH
9200: LD_INT 1
9202: PPUSH
9203: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9207: LD_INT 6
9209: PPUSH
9210: LD_VAR 0 3
9214: PPUSH
9215: LD_INT 1
9217: PPUSH
9218: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9222: LD_INT 29
9224: PPUSH
9225: LD_VAR 0 3
9229: PPUSH
9230: LD_INT 1
9232: PPUSH
9233: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9237: LD_INT 31
9239: PPUSH
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_INT 1
9247: PPUSH
9248: CALL_OW 324
// end ; 2 :
9252: GO 13006
9254: LD_INT 2
9256: DOUBLE
9257: EQUAL
9258: IFTRUE 9262
9260: GO 9460
9262: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9263: LD_INT 35
9265: PPUSH
9266: LD_VAR 0 3
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9278: LD_INT 45
9280: PPUSH
9281: LD_VAR 0 3
9285: PPUSH
9286: LD_INT 1
9288: PPUSH
9289: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9293: LD_INT 46
9295: PPUSH
9296: LD_VAR 0 3
9300: PPUSH
9301: LD_INT 1
9303: PPUSH
9304: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9308: LD_INT 47
9310: PPUSH
9311: LD_VAR 0 3
9315: PPUSH
9316: LD_INT 1
9318: PPUSH
9319: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9323: LD_INT 1
9325: PPUSH
9326: LD_VAR 0 3
9330: PPUSH
9331: LD_INT 1
9333: PPUSH
9334: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9338: LD_INT 2
9340: PPUSH
9341: LD_VAR 0 3
9345: PPUSH
9346: LD_INT 1
9348: PPUSH
9349: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9353: LD_INT 11
9355: PPUSH
9356: LD_VAR 0 3
9360: PPUSH
9361: LD_INT 1
9363: PPUSH
9364: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9368: LD_INT 0
9370: PPUSH
9371: LD_VAR 0 3
9375: PPUSH
9376: LD_INT 1
9378: PPUSH
9379: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9383: LD_INT 2
9385: PPUSH
9386: LD_VAR 0 3
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9398: LD_INT 4
9400: PPUSH
9401: LD_VAR 0 3
9405: PPUSH
9406: LD_INT 1
9408: PPUSH
9409: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9413: LD_INT 6
9415: PPUSH
9416: LD_VAR 0 3
9420: PPUSH
9421: LD_INT 1
9423: PPUSH
9424: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9428: LD_INT 29
9430: PPUSH
9431: LD_VAR 0 3
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9443: LD_INT 31
9445: PPUSH
9446: LD_VAR 0 3
9450: PPUSH
9451: LD_INT 1
9453: PPUSH
9454: CALL_OW 324
// end ; 3 :
9458: GO 13006
9460: LD_INT 3
9462: DOUBLE
9463: EQUAL
9464: IFTRUE 9468
9466: GO 9921
9468: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9469: LD_INT 35
9471: PPUSH
9472: LD_VAR 0 3
9476: PPUSH
9477: LD_INT 1
9479: PPUSH
9480: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9484: LD_INT 45
9486: PPUSH
9487: LD_VAR 0 3
9491: PPUSH
9492: LD_INT 1
9494: PPUSH
9495: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9499: LD_INT 46
9501: PPUSH
9502: LD_VAR 0 3
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9514: LD_INT 47
9516: PPUSH
9517: LD_VAR 0 3
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9529: LD_INT 1
9531: PPUSH
9532: LD_VAR 0 3
9536: PPUSH
9537: LD_INT 1
9539: PPUSH
9540: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9544: LD_INT 2
9546: PPUSH
9547: LD_VAR 0 3
9551: PPUSH
9552: LD_INT 1
9554: PPUSH
9555: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9559: LD_INT 11
9561: PPUSH
9562: LD_VAR 0 3
9566: PPUSH
9567: LD_INT 1
9569: PPUSH
9570: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9574: LD_INT 48
9576: PPUSH
9577: LD_VAR 0 3
9581: PPUSH
9582: LD_INT 1
9584: PPUSH
9585: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9589: LD_INT 69
9591: PPUSH
9592: LD_VAR 0 3
9596: PPUSH
9597: LD_INT 1
9599: PPUSH
9600: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9604: LD_INT 39
9606: PPUSH
9607: LD_VAR 0 3
9611: PPUSH
9612: LD_INT 1
9614: PPUSH
9615: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9619: LD_INT 43
9621: PPUSH
9622: LD_VAR 0 3
9626: PPUSH
9627: LD_INT 1
9629: PPUSH
9630: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9634: LD_INT 51
9636: PPUSH
9637: LD_VAR 0 3
9641: PPUSH
9642: LD_INT 1
9644: PPUSH
9645: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9649: LD_INT 6
9651: PPUSH
9652: LD_VAR 0 3
9656: PPUSH
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9664: LD_INT 0
9666: PPUSH
9667: LD_VAR 0 3
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9679: LD_INT 2
9681: PPUSH
9682: LD_VAR 0 3
9686: PPUSH
9687: LD_INT 1
9689: PPUSH
9690: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9694: LD_INT 3
9696: PPUSH
9697: LD_VAR 0 3
9701: PPUSH
9702: LD_INT 1
9704: PPUSH
9705: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9709: LD_INT 4
9711: PPUSH
9712: LD_VAR 0 3
9716: PPUSH
9717: LD_INT 1
9719: PPUSH
9720: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9724: LD_INT 6
9726: PPUSH
9727: LD_VAR 0 3
9731: PPUSH
9732: LD_INT 1
9734: PPUSH
9735: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9739: LD_INT 7
9741: PPUSH
9742: LD_VAR 0 3
9746: PPUSH
9747: LD_INT 1
9749: PPUSH
9750: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9754: LD_INT 8
9756: PPUSH
9757: LD_VAR 0 3
9761: PPUSH
9762: LD_INT 1
9764: PPUSH
9765: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9769: LD_INT 10
9771: PPUSH
9772: LD_VAR 0 3
9776: PPUSH
9777: LD_INT 1
9779: PPUSH
9780: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9784: LD_INT 15
9786: PPUSH
9787: LD_VAR 0 3
9791: PPUSH
9792: LD_INT 1
9794: PPUSH
9795: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9799: LD_INT 16
9801: PPUSH
9802: LD_VAR 0 3
9806: PPUSH
9807: LD_INT 1
9809: PPUSH
9810: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9814: LD_INT 17
9816: PPUSH
9817: LD_VAR 0 3
9821: PPUSH
9822: LD_INT 1
9824: PPUSH
9825: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9829: LD_INT 20
9831: PPUSH
9832: LD_VAR 0 3
9836: PPUSH
9837: LD_INT 1
9839: PPUSH
9840: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9844: LD_INT 26
9846: PPUSH
9847: LD_VAR 0 3
9851: PPUSH
9852: LD_INT 1
9854: PPUSH
9855: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
9859: LD_INT 27
9861: PPUSH
9862: LD_VAR 0 3
9866: PPUSH
9867: LD_INT 1
9869: PPUSH
9870: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9874: LD_INT 29
9876: PPUSH
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_INT 1
9884: PPUSH
9885: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9889: LD_INT 31
9891: PPUSH
9892: LD_VAR 0 3
9896: PPUSH
9897: LD_INT 1
9899: PPUSH
9900: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
9904: LD_INT 32
9906: PPUSH
9907: LD_VAR 0 3
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: CALL_OW 324
// end ; 4 :
9919: GO 13006
9921: LD_INT 4
9923: DOUBLE
9924: EQUAL
9925: IFTRUE 9929
9927: GO 10877
9929: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9930: LD_INT 35
9932: PPUSH
9933: LD_VAR 0 3
9937: PPUSH
9938: LD_INT 1
9940: PPUSH
9941: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9945: LD_INT 45
9947: PPUSH
9948: LD_VAR 0 3
9952: PPUSH
9953: LD_INT 1
9955: PPUSH
9956: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9960: LD_INT 46
9962: PPUSH
9963: LD_VAR 0 3
9967: PPUSH
9968: LD_INT 1
9970: PPUSH
9971: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9975: LD_INT 47
9977: PPUSH
9978: LD_VAR 0 3
9982: PPUSH
9983: LD_INT 1
9985: PPUSH
9986: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9990: LD_INT 1
9992: PPUSH
9993: LD_VAR 0 3
9997: PPUSH
9998: LD_INT 1
10000: PPUSH
10001: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10005: LD_INT 2
10007: PPUSH
10008: LD_VAR 0 3
10012: PPUSH
10013: LD_INT 1
10015: PPUSH
10016: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10020: LD_INT 11
10022: PPUSH
10023: LD_VAR 0 3
10027: PPUSH
10028: LD_INT 1
10030: PPUSH
10031: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10035: LD_INT 20
10037: PPUSH
10038: LD_VAR 0 3
10042: PPUSH
10043: LD_INT 1
10045: PPUSH
10046: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10050: LD_INT 48
10052: PPUSH
10053: LD_VAR 0 3
10057: PPUSH
10058: LD_INT 1
10060: PPUSH
10061: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10065: LD_INT 49
10067: PPUSH
10068: LD_VAR 0 3
10072: PPUSH
10073: LD_INT 1
10075: PPUSH
10076: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10080: LD_INT 69
10082: PPUSH
10083: LD_VAR 0 3
10087: PPUSH
10088: LD_INT 1
10090: PPUSH
10091: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10095: LD_INT 39
10097: PPUSH
10098: LD_VAR 0 3
10102: PPUSH
10103: LD_INT 1
10105: PPUSH
10106: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10110: LD_INT 34
10112: PPUSH
10113: LD_VAR 0 3
10117: PPUSH
10118: LD_INT 1
10120: PPUSH
10121: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10125: LD_INT 42
10127: PPUSH
10128: LD_VAR 0 3
10132: PPUSH
10133: LD_INT 1
10135: PPUSH
10136: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10140: LD_INT 44
10142: PPUSH
10143: LD_VAR 0 3
10147: PPUSH
10148: LD_INT 1
10150: PPUSH
10151: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10155: LD_INT 41
10157: PPUSH
10158: LD_VAR 0 3
10162: PPUSH
10163: LD_INT 1
10165: PPUSH
10166: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10170: LD_INT 43
10172: PPUSH
10173: LD_VAR 0 3
10177: PPUSH
10178: LD_INT 1
10180: PPUSH
10181: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10185: LD_INT 70
10187: PPUSH
10188: LD_VAR 0 3
10192: PPUSH
10193: LD_INT 1
10195: PPUSH
10196: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10200: LD_INT 51
10202: PPUSH
10203: LD_VAR 0 3
10207: PPUSH
10208: LD_INT 1
10210: PPUSH
10211: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10215: LD_INT 52
10217: PPUSH
10218: LD_VAR 0 3
10222: PPUSH
10223: LD_INT 1
10225: PPUSH
10226: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10230: LD_INT 6
10232: PPUSH
10233: LD_VAR 0 3
10237: PPUSH
10238: LD_INT 1
10240: PPUSH
10241: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10245: LD_INT 15
10247: PPUSH
10248: LD_VAR 0 3
10252: PPUSH
10253: LD_INT 1
10255: PPUSH
10256: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10260: LD_INT 7
10262: PPUSH
10263: LD_VAR 0 3
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10275: LD_INT 12
10277: PPUSH
10278: LD_VAR 0 3
10282: PPUSH
10283: LD_INT 1
10285: PPUSH
10286: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10290: LD_INT 18
10292: PPUSH
10293: LD_VAR 0 3
10297: PPUSH
10298: LD_INT 1
10300: PPUSH
10301: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10305: LD_INT 60
10307: PPUSH
10308: LD_VAR 0 3
10312: PPUSH
10313: LD_INT 1
10315: PPUSH
10316: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10320: LD_INT 9
10322: PPUSH
10323: LD_VAR 0 3
10327: PPUSH
10328: LD_INT 1
10330: PPUSH
10331: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10335: LD_INT 30
10337: PPUSH
10338: LD_VAR 0 3
10342: PPUSH
10343: LD_INT 1
10345: PPUSH
10346: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10350: LD_INT 37
10352: PPUSH
10353: LD_VAR 0 3
10357: PPUSH
10358: LD_INT 1
10360: PPUSH
10361: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10365: LD_INT 5
10367: PPUSH
10368: LD_VAR 0 3
10372: PPUSH
10373: LD_INT 1
10375: PPUSH
10376: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10380: LD_INT 66
10382: PPUSH
10383: LD_VAR 0 3
10387: PPUSH
10388: LD_INT 1
10390: PPUSH
10391: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10395: LD_INT 21
10397: PPUSH
10398: LD_VAR 0 3
10402: PPUSH
10403: LD_INT 1
10405: PPUSH
10406: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10410: LD_INT 22
10412: PPUSH
10413: LD_VAR 0 3
10417: PPUSH
10418: LD_INT 1
10420: PPUSH
10421: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10425: LD_INT 54
10427: PPUSH
10428: LD_VAR 0 3
10432: PPUSH
10433: LD_INT 1
10435: PPUSH
10436: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10440: LD_INT 0
10442: PPUSH
10443: LD_VAR 0 3
10447: PPUSH
10448: LD_INT 1
10450: PPUSH
10451: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10455: LD_INT 1
10457: PPUSH
10458: LD_VAR 0 3
10462: PPUSH
10463: LD_INT 1
10465: PPUSH
10466: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10470: LD_INT 2
10472: PPUSH
10473: LD_VAR 0 3
10477: PPUSH
10478: LD_INT 1
10480: PPUSH
10481: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10485: LD_INT 3
10487: PPUSH
10488: LD_VAR 0 3
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10500: LD_INT 4
10502: PPUSH
10503: LD_VAR 0 3
10507: PPUSH
10508: LD_INT 1
10510: PPUSH
10511: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10515: LD_INT 5
10517: PPUSH
10518: LD_VAR 0 3
10522: PPUSH
10523: LD_INT 1
10525: PPUSH
10526: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10530: LD_INT 6
10532: PPUSH
10533: LD_VAR 0 3
10537: PPUSH
10538: LD_INT 1
10540: PPUSH
10541: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10545: LD_INT 7
10547: PPUSH
10548: LD_VAR 0 3
10552: PPUSH
10553: LD_INT 1
10555: PPUSH
10556: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10560: LD_INT 8
10562: PPUSH
10563: LD_VAR 0 3
10567: PPUSH
10568: LD_INT 1
10570: PPUSH
10571: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10575: LD_INT 10
10577: PPUSH
10578: LD_VAR 0 3
10582: PPUSH
10583: LD_INT 1
10585: PPUSH
10586: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10590: LD_INT 11
10592: PPUSH
10593: LD_VAR 0 3
10597: PPUSH
10598: LD_INT 1
10600: PPUSH
10601: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10605: LD_INT 12
10607: PPUSH
10608: LD_VAR 0 3
10612: PPUSH
10613: LD_INT 1
10615: PPUSH
10616: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10620: LD_INT 13
10622: PPUSH
10623: LD_VAR 0 3
10627: PPUSH
10628: LD_INT 1
10630: PPUSH
10631: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10635: LD_INT 14
10637: PPUSH
10638: LD_VAR 0 3
10642: PPUSH
10643: LD_INT 1
10645: PPUSH
10646: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10650: LD_INT 15
10652: PPUSH
10653: LD_VAR 0 3
10657: PPUSH
10658: LD_INT 1
10660: PPUSH
10661: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10665: LD_INT 16
10667: PPUSH
10668: LD_VAR 0 3
10672: PPUSH
10673: LD_INT 1
10675: PPUSH
10676: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10680: LD_INT 17
10682: PPUSH
10683: LD_VAR 0 3
10687: PPUSH
10688: LD_INT 1
10690: PPUSH
10691: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10695: LD_INT 19
10697: PPUSH
10698: LD_VAR 0 3
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10710: LD_INT 20
10712: PPUSH
10713: LD_VAR 0 3
10717: PPUSH
10718: LD_INT 1
10720: PPUSH
10721: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10725: LD_INT 21
10727: PPUSH
10728: LD_VAR 0 3
10732: PPUSH
10733: LD_INT 1
10735: PPUSH
10736: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10740: LD_INT 23
10742: PPUSH
10743: LD_VAR 0 3
10747: PPUSH
10748: LD_INT 1
10750: PPUSH
10751: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10755: LD_INT 26
10757: PPUSH
10758: LD_VAR 0 3
10762: PPUSH
10763: LD_INT 1
10765: PPUSH
10766: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10770: LD_INT 27
10772: PPUSH
10773: LD_VAR 0 3
10777: PPUSH
10778: LD_INT 1
10780: PPUSH
10781: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10785: LD_INT 28
10787: PPUSH
10788: LD_VAR 0 3
10792: PPUSH
10793: LD_INT 1
10795: PPUSH
10796: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10800: LD_INT 29
10802: PPUSH
10803: LD_VAR 0 3
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10815: LD_INT 30
10817: PPUSH
10818: LD_VAR 0 3
10822: PPUSH
10823: LD_INT 1
10825: PPUSH
10826: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10830: LD_INT 31
10832: PPUSH
10833: LD_VAR 0 3
10837: PPUSH
10838: LD_INT 1
10840: PPUSH
10841: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10845: LD_INT 32
10847: PPUSH
10848: LD_VAR 0 3
10852: PPUSH
10853: LD_INT 1
10855: PPUSH
10856: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
10860: LD_INT 36
10862: PPUSH
10863: LD_VAR 0 3
10867: PPUSH
10868: LD_INT 1
10870: PPUSH
10871: CALL_OW 324
// end ; 5 :
10875: GO 13006
10877: LD_INT 5
10879: DOUBLE
10880: EQUAL
10881: IFTRUE 10885
10883: GO 11998
10885: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10886: LD_INT 35
10888: PPUSH
10889: LD_VAR 0 3
10893: PPUSH
10894: LD_INT 1
10896: PPUSH
10897: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10901: LD_INT 45
10903: PPUSH
10904: LD_VAR 0 3
10908: PPUSH
10909: LD_INT 1
10911: PPUSH
10912: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10916: LD_INT 46
10918: PPUSH
10919: LD_VAR 0 3
10923: PPUSH
10924: LD_INT 1
10926: PPUSH
10927: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10931: LD_INT 47
10933: PPUSH
10934: LD_VAR 0 3
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10946: LD_INT 1
10948: PPUSH
10949: LD_VAR 0 3
10953: PPUSH
10954: LD_INT 1
10956: PPUSH
10957: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10961: LD_INT 2
10963: PPUSH
10964: LD_VAR 0 3
10968: PPUSH
10969: LD_INT 1
10971: PPUSH
10972: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10976: LD_INT 11
10978: PPUSH
10979: LD_VAR 0 3
10983: PPUSH
10984: LD_INT 1
10986: PPUSH
10987: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10991: LD_INT 20
10993: PPUSH
10994: LD_VAR 0 3
10998: PPUSH
10999: LD_INT 1
11001: PPUSH
11002: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11006: LD_INT 48
11008: PPUSH
11009: LD_VAR 0 3
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11021: LD_INT 49
11023: PPUSH
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_INT 1
11031: PPUSH
11032: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11036: LD_INT 69
11038: PPUSH
11039: LD_VAR 0 3
11043: PPUSH
11044: LD_INT 1
11046: PPUSH
11047: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11051: LD_INT 39
11053: PPUSH
11054: LD_VAR 0 3
11058: PPUSH
11059: LD_INT 1
11061: PPUSH
11062: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11066: LD_INT 34
11068: PPUSH
11069: LD_VAR 0 3
11073: PPUSH
11074: LD_INT 1
11076: PPUSH
11077: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11081: LD_INT 42
11083: PPUSH
11084: LD_VAR 0 3
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11096: LD_INT 44
11098: PPUSH
11099: LD_VAR 0 3
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11111: LD_INT 41
11113: PPUSH
11114: LD_VAR 0 3
11118: PPUSH
11119: LD_INT 1
11121: PPUSH
11122: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11126: LD_INT 40
11128: PPUSH
11129: LD_VAR 0 3
11133: PPUSH
11134: LD_INT 1
11136: PPUSH
11137: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11141: LD_INT 43
11143: PPUSH
11144: LD_VAR 0 3
11148: PPUSH
11149: LD_INT 1
11151: PPUSH
11152: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11156: LD_INT 70
11158: PPUSH
11159: LD_VAR 0 3
11163: PPUSH
11164: LD_INT 1
11166: PPUSH
11167: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11171: LD_INT 51
11173: PPUSH
11174: LD_VAR 0 3
11178: PPUSH
11179: LD_INT 1
11181: PPUSH
11182: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11186: LD_INT 52
11188: PPUSH
11189: LD_VAR 0 3
11193: PPUSH
11194: LD_INT 1
11196: PPUSH
11197: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11201: LD_INT 6
11203: PPUSH
11204: LD_VAR 0 3
11208: PPUSH
11209: LD_INT 1
11211: PPUSH
11212: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11216: LD_INT 15
11218: PPUSH
11219: LD_VAR 0 3
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11231: LD_INT 7
11233: PPUSH
11234: LD_VAR 0 3
11238: PPUSH
11239: LD_INT 1
11241: PPUSH
11242: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11246: LD_INT 12
11248: PPUSH
11249: LD_VAR 0 3
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11261: LD_INT 17
11263: PPUSH
11264: LD_VAR 0 3
11268: PPUSH
11269: LD_INT 1
11271: PPUSH
11272: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11276: LD_INT 18
11278: PPUSH
11279: LD_VAR 0 3
11283: PPUSH
11284: LD_INT 1
11286: PPUSH
11287: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11291: LD_INT 60
11293: PPUSH
11294: LD_VAR 0 3
11298: PPUSH
11299: LD_INT 1
11301: PPUSH
11302: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11306: LD_INT 32
11308: PPUSH
11309: LD_VAR 0 3
11313: PPUSH
11314: LD_INT 1
11316: PPUSH
11317: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11321: LD_INT 9
11323: PPUSH
11324: LD_VAR 0 3
11328: PPUSH
11329: LD_INT 1
11331: PPUSH
11332: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11336: LD_INT 57
11338: PPUSH
11339: LD_VAR 0 3
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11351: LD_INT 30
11353: PPUSH
11354: LD_VAR 0 3
11358: PPUSH
11359: LD_INT 1
11361: PPUSH
11362: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11366: LD_INT 37
11368: PPUSH
11369: LD_VAR 0 3
11373: PPUSH
11374: LD_INT 1
11376: PPUSH
11377: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11381: LD_INT 63
11383: PPUSH
11384: LD_VAR 0 3
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11396: LD_INT 3
11398: PPUSH
11399: LD_VAR 0 3
11403: PPUSH
11404: LD_INT 1
11406: PPUSH
11407: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11411: LD_INT 4
11413: PPUSH
11414: LD_VAR 0 3
11418: PPUSH
11419: LD_INT 1
11421: PPUSH
11422: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11426: LD_INT 5
11428: PPUSH
11429: LD_VAR 0 3
11433: PPUSH
11434: LD_INT 1
11436: PPUSH
11437: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11441: LD_INT 66
11443: PPUSH
11444: LD_VAR 0 3
11448: PPUSH
11449: LD_INT 1
11451: PPUSH
11452: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11456: LD_INT 21
11458: PPUSH
11459: LD_VAR 0 3
11463: PPUSH
11464: LD_INT 1
11466: PPUSH
11467: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11471: LD_INT 22
11473: PPUSH
11474: LD_VAR 0 3
11478: PPUSH
11479: LD_INT 1
11481: PPUSH
11482: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11486: LD_INT 19
11488: PPUSH
11489: LD_VAR 0 3
11493: PPUSH
11494: LD_INT 1
11496: PPUSH
11497: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11501: LD_INT 54
11503: PPUSH
11504: LD_VAR 0 3
11508: PPUSH
11509: LD_INT 1
11511: PPUSH
11512: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11516: LD_INT 55
11518: PPUSH
11519: LD_VAR 0 3
11523: PPUSH
11524: LD_INT 1
11526: PPUSH
11527: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11531: LD_INT 0
11533: PPUSH
11534: LD_VAR 0 3
11538: PPUSH
11539: LD_INT 1
11541: PPUSH
11542: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11546: LD_INT 1
11548: PPUSH
11549: LD_VAR 0 3
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11561: LD_INT 2
11563: PPUSH
11564: LD_VAR 0 3
11568: PPUSH
11569: LD_INT 1
11571: PPUSH
11572: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11576: LD_INT 3
11578: PPUSH
11579: LD_VAR 0 3
11583: PPUSH
11584: LD_INT 1
11586: PPUSH
11587: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11591: LD_INT 4
11593: PPUSH
11594: LD_VAR 0 3
11598: PPUSH
11599: LD_INT 1
11601: PPUSH
11602: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11606: LD_INT 5
11608: PPUSH
11609: LD_VAR 0 3
11613: PPUSH
11614: LD_INT 1
11616: PPUSH
11617: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11621: LD_INT 6
11623: PPUSH
11624: LD_VAR 0 3
11628: PPUSH
11629: LD_INT 1
11631: PPUSH
11632: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11636: LD_INT 7
11638: PPUSH
11639: LD_VAR 0 3
11643: PPUSH
11644: LD_INT 1
11646: PPUSH
11647: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11651: LD_INT 8
11653: PPUSH
11654: LD_VAR 0 3
11658: PPUSH
11659: LD_INT 1
11661: PPUSH
11662: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11666: LD_INT 10
11668: PPUSH
11669: LD_VAR 0 3
11673: PPUSH
11674: LD_INT 1
11676: PPUSH
11677: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11681: LD_INT 11
11683: PPUSH
11684: LD_VAR 0 3
11688: PPUSH
11689: LD_INT 1
11691: PPUSH
11692: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11696: LD_INT 12
11698: PPUSH
11699: LD_VAR 0 3
11703: PPUSH
11704: LD_INT 1
11706: PPUSH
11707: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11711: LD_INT 13
11713: PPUSH
11714: LD_VAR 0 3
11718: PPUSH
11719: LD_INT 1
11721: PPUSH
11722: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11726: LD_INT 14
11728: PPUSH
11729: LD_VAR 0 3
11733: PPUSH
11734: LD_INT 1
11736: PPUSH
11737: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11741: LD_INT 15
11743: PPUSH
11744: LD_VAR 0 3
11748: PPUSH
11749: LD_INT 1
11751: PPUSH
11752: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11756: LD_INT 16
11758: PPUSH
11759: LD_VAR 0 3
11763: PPUSH
11764: LD_INT 1
11766: PPUSH
11767: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11771: LD_INT 17
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: LD_INT 1
11781: PPUSH
11782: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11786: LD_INT 18
11788: PPUSH
11789: LD_VAR 0 3
11793: PPUSH
11794: LD_INT 1
11796: PPUSH
11797: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11801: LD_INT 19
11803: PPUSH
11804: LD_VAR 0 3
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11816: LD_INT 20
11818: PPUSH
11819: LD_VAR 0 3
11823: PPUSH
11824: LD_INT 1
11826: PPUSH
11827: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11831: LD_INT 21
11833: PPUSH
11834: LD_VAR 0 3
11838: PPUSH
11839: LD_INT 1
11841: PPUSH
11842: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11846: LD_INT 23
11848: PPUSH
11849: LD_VAR 0 3
11853: PPUSH
11854: LD_INT 1
11856: PPUSH
11857: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11861: LD_INT 26
11863: PPUSH
11864: LD_VAR 0 3
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11876: LD_INT 27
11878: PPUSH
11879: LD_VAR 0 3
11883: PPUSH
11884: LD_INT 1
11886: PPUSH
11887: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11891: LD_INT 28
11893: PPUSH
11894: LD_VAR 0 3
11898: PPUSH
11899: LD_INT 1
11901: PPUSH
11902: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11906: LD_INT 29
11908: PPUSH
11909: LD_VAR 0 3
11913: PPUSH
11914: LD_INT 1
11916: PPUSH
11917: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11921: LD_INT 30
11923: PPUSH
11924: LD_VAR 0 3
11928: PPUSH
11929: LD_INT 1
11931: PPUSH
11932: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11936: LD_INT 31
11938: PPUSH
11939: LD_VAR 0 3
11943: PPUSH
11944: LD_INT 1
11946: PPUSH
11947: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11951: LD_INT 32
11953: PPUSH
11954: LD_VAR 0 3
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
11966: LD_INT 33
11968: PPUSH
11969: LD_VAR 0 3
11973: PPUSH
11974: LD_INT 1
11976: PPUSH
11977: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11981: LD_INT 36
11983: PPUSH
11984: LD_VAR 0 3
11988: PPUSH
11989: LD_INT 1
11991: PPUSH
11992: CALL_OW 324
// end ; 6 :
11996: GO 13006
11998: LD_INT 6
12000: DOUBLE
12001: EQUAL
12002: IFTRUE 12006
12004: GO 12931
12006: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12007: LD_INT 35
12009: PPUSH
12010: LD_VAR 0 3
12014: PPUSH
12015: LD_INT 1
12017: PPUSH
12018: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12022: LD_INT 45
12024: PPUSH
12025: LD_VAR 0 3
12029: PPUSH
12030: LD_INT 1
12032: PPUSH
12033: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12037: LD_INT 46
12039: PPUSH
12040: LD_VAR 0 3
12044: PPUSH
12045: LD_INT 1
12047: PPUSH
12048: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12052: LD_INT 47
12054: PPUSH
12055: LD_VAR 0 3
12059: PPUSH
12060: LD_INT 1
12062: PPUSH
12063: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12067: LD_INT 1
12069: PPUSH
12070: LD_VAR 0 3
12074: PPUSH
12075: LD_INT 1
12077: PPUSH
12078: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12082: LD_INT 2
12084: PPUSH
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_INT 1
12092: PPUSH
12093: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12097: LD_INT 11
12099: PPUSH
12100: LD_VAR 0 3
12104: PPUSH
12105: LD_INT 1
12107: PPUSH
12108: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12112: LD_INT 20
12114: PPUSH
12115: LD_VAR 0 3
12119: PPUSH
12120: LD_INT 1
12122: PPUSH
12123: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12127: LD_INT 48
12129: PPUSH
12130: LD_VAR 0 3
12134: PPUSH
12135: LD_INT 1
12137: PPUSH
12138: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12142: LD_INT 49
12144: PPUSH
12145: LD_VAR 0 3
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12157: LD_INT 50
12159: PPUSH
12160: LD_VAR 0 3
12164: PPUSH
12165: LD_INT 1
12167: PPUSH
12168: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12172: LD_INT 69
12174: PPUSH
12175: LD_VAR 0 3
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12187: LD_INT 39
12189: PPUSH
12190: LD_VAR 0 3
12194: PPUSH
12195: LD_INT 1
12197: PPUSH
12198: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12202: LD_INT 34
12204: PPUSH
12205: LD_VAR 0 3
12209: PPUSH
12210: LD_INT 1
12212: PPUSH
12213: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12217: LD_INT 42
12219: PPUSH
12220: LD_VAR 0 3
12224: PPUSH
12225: LD_INT 1
12227: PPUSH
12228: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12232: LD_INT 44
12234: PPUSH
12235: LD_VAR 0 3
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12247: LD_INT 41
12249: PPUSH
12250: LD_VAR 0 3
12254: PPUSH
12255: LD_INT 1
12257: PPUSH
12258: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12262: LD_INT 13
12264: PPUSH
12265: LD_VAR 0 3
12269: PPUSH
12270: LD_INT 1
12272: PPUSH
12273: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12277: LD_INT 40
12279: PPUSH
12280: LD_VAR 0 3
12284: PPUSH
12285: LD_INT 1
12287: PPUSH
12288: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12292: LD_INT 43
12294: PPUSH
12295: LD_VAR 0 3
12299: PPUSH
12300: LD_INT 1
12302: PPUSH
12303: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12307: LD_INT 70
12309: PPUSH
12310: LD_VAR 0 3
12314: PPUSH
12315: LD_INT 1
12317: PPUSH
12318: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12322: LD_INT 23
12324: PPUSH
12325: LD_VAR 0 3
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12337: LD_INT 51
12339: PPUSH
12340: LD_VAR 0 3
12344: PPUSH
12345: LD_INT 1
12347: PPUSH
12348: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12352: LD_INT 52
12354: PPUSH
12355: LD_VAR 0 3
12359: PPUSH
12360: LD_INT 1
12362: PPUSH
12363: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12367: LD_INT 6
12369: PPUSH
12370: LD_VAR 0 3
12374: PPUSH
12375: LD_INT 1
12377: PPUSH
12378: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12382: LD_INT 15
12384: PPUSH
12385: LD_VAR 0 3
12389: PPUSH
12390: LD_INT 1
12392: PPUSH
12393: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12397: LD_INT 7
12399: PPUSH
12400: LD_VAR 0 3
12404: PPUSH
12405: LD_INT 1
12407: PPUSH
12408: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12412: LD_INT 12
12414: PPUSH
12415: LD_VAR 0 3
12419: PPUSH
12420: LD_INT 1
12422: PPUSH
12423: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12427: LD_INT 10
12429: PPUSH
12430: LD_VAR 0 3
12434: PPUSH
12435: LD_INT 1
12437: PPUSH
12438: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12442: LD_INT 17
12444: PPUSH
12445: LD_VAR 0 3
12449: PPUSH
12450: LD_INT 1
12452: PPUSH
12453: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12457: LD_INT 18
12459: PPUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12472: LD_INT 60
12474: PPUSH
12475: LD_VAR 0 3
12479: PPUSH
12480: LD_INT 1
12482: PPUSH
12483: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12487: LD_INT 61
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: LD_INT 1
12497: PPUSH
12498: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12502: LD_INT 32
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: LD_INT 1
12512: PPUSH
12513: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12517: LD_INT 27
12519: PPUSH
12520: LD_VAR 0 3
12524: PPUSH
12525: LD_INT 1
12527: PPUSH
12528: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12532: LD_INT 36
12534: PPUSH
12535: LD_VAR 0 3
12539: PPUSH
12540: LD_INT 1
12542: PPUSH
12543: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12547: LD_INT 33
12549: PPUSH
12550: LD_VAR 0 3
12554: PPUSH
12555: LD_INT 1
12557: PPUSH
12558: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12562: LD_INT 9
12564: PPUSH
12565: LD_VAR 0 3
12569: PPUSH
12570: LD_INT 1
12572: PPUSH
12573: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12577: LD_INT 38
12579: PPUSH
12580: LD_VAR 0 3
12584: PPUSH
12585: LD_INT 1
12587: PPUSH
12588: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12592: LD_INT 57
12594: PPUSH
12595: LD_VAR 0 3
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12607: LD_INT 58
12609: PPUSH
12610: LD_VAR 0 3
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12622: LD_INT 28
12624: PPUSH
12625: LD_VAR 0 3
12629: PPUSH
12630: LD_INT 1
12632: PPUSH
12633: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12637: LD_INT 29
12639: PPUSH
12640: LD_VAR 0 3
12644: PPUSH
12645: LD_INT 1
12647: PPUSH
12648: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12652: LD_INT 30
12654: PPUSH
12655: LD_VAR 0 3
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12667: LD_INT 37
12669: PPUSH
12670: LD_VAR 0 3
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12682: LD_INT 63
12684: PPUSH
12685: LD_VAR 0 3
12689: PPUSH
12690: LD_INT 1
12692: PPUSH
12693: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12697: LD_INT 64
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: LD_INT 1
12707: PPUSH
12708: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12712: LD_INT 3
12714: PPUSH
12715: LD_VAR 0 3
12719: PPUSH
12720: LD_INT 1
12722: PPUSH
12723: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12727: LD_INT 4
12729: PPUSH
12730: LD_VAR 0 3
12734: PPUSH
12735: LD_INT 1
12737: PPUSH
12738: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12742: LD_INT 5
12744: PPUSH
12745: LD_VAR 0 3
12749: PPUSH
12750: LD_INT 1
12752: PPUSH
12753: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12757: LD_INT 8
12759: PPUSH
12760: LD_VAR 0 3
12764: PPUSH
12765: LD_INT 1
12767: PPUSH
12768: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12772: LD_INT 66
12774: PPUSH
12775: LD_VAR 0 3
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12787: LD_INT 67
12789: PPUSH
12790: LD_VAR 0 3
12794: PPUSH
12795: LD_INT 1
12797: PPUSH
12798: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12802: LD_INT 21
12804: PPUSH
12805: LD_VAR 0 3
12809: PPUSH
12810: LD_INT 1
12812: PPUSH
12813: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12817: LD_INT 22
12819: PPUSH
12820: LD_VAR 0 3
12824: PPUSH
12825: LD_INT 1
12827: PPUSH
12828: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12832: LD_INT 19
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
12847: LD_INT 26
12849: PPUSH
12850: LD_VAR 0 3
12854: PPUSH
12855: LD_INT 1
12857: PPUSH
12858: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12862: LD_INT 54
12864: PPUSH
12865: LD_VAR 0 3
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12877: LD_INT 55
12879: PPUSH
12880: LD_VAR 0 3
12884: PPUSH
12885: LD_INT 1
12887: PPUSH
12888: CALL_OW 322
// for i = 0 to 39 do
12892: LD_ADDR_VAR 0 4
12896: PUSH
12897: DOUBLE
12898: LD_INT 0
12900: DEC
12901: ST_TO_ADDR
12902: LD_INT 39
12904: PUSH
12905: FOR_TO
12906: IFFALSE 12927
// SetRestrict ( i , side , true ) ;
12908: LD_VAR 0 4
12912: PPUSH
12913: LD_VAR 0 3
12917: PPUSH
12918: LD_INT 1
12920: PPUSH
12921: CALL_OW 324
12925: GO 12905
12927: POP
12928: POP
// end ; else
12929: GO 13006
12931: POP
// begin for i = 1 to 73 do
12932: LD_ADDR_VAR 0 4
12936: PUSH
12937: DOUBLE
12938: LD_INT 1
12940: DEC
12941: ST_TO_ADDR
12942: LD_INT 73
12944: PUSH
12945: FOR_TO
12946: IFFALSE 12967
// SetTech ( i , side , state_enabled ) ;
12948: LD_VAR 0 4
12952: PPUSH
12953: LD_VAR 0 3
12957: PPUSH
12958: LD_INT 1
12960: PPUSH
12961: CALL_OW 322
12965: GO 12945
12967: POP
12968: POP
// for i = 0 to 39 do
12969: LD_ADDR_VAR 0 4
12973: PUSH
12974: DOUBLE
12975: LD_INT 0
12977: DEC
12978: ST_TO_ADDR
12979: LD_INT 39
12981: PUSH
12982: FOR_TO
12983: IFFALSE 13004
// SetRestrict ( i , side , true ) ;
12985: LD_VAR 0 4
12989: PPUSH
12990: LD_VAR 0 3
12994: PPUSH
12995: LD_INT 1
12997: PPUSH
12998: CALL_OW 324
13002: GO 12982
13004: POP
13005: POP
// end ; end ; end ;
13006: GO 9011
13008: POP
13009: POP
// end ; end_of_file
13010: LD_VAR 0 2
13014: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13015: LD_INT 0
13017: PPUSH
13018: PPUSH
13019: PPUSH
13020: PPUSH
13021: PPUSH
13022: PPUSH
13023: PPUSH
13024: PPUSH
13025: PPUSH
// for i := 1 to 8 do
13026: LD_ADDR_VAR 0 2
13030: PUSH
13031: DOUBLE
13032: LD_INT 1
13034: DEC
13035: ST_TO_ADDR
13036: LD_INT 8
13038: PUSH
13039: FOR_TO
13040: IFFALSE 13424
// begin if Side_Positions [ i ] then
13042: LD_EXP 37
13046: PUSH
13047: LD_VAR 0 2
13051: ARRAY
13052: IFFALSE 13422
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13054: LD_ADDR_VAR 0 7
13058: PUSH
13059: LD_INT 22
13061: PUSH
13062: LD_VAR 0 2
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 21
13073: PUSH
13074: LD_INT 1
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PPUSH
13085: CALL_OW 69
13089: PUSH
13090: LD_INT 0
13092: PLUS
13093: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13094: LD_ADDR_VAR 0 9
13098: PUSH
13099: LD_INT 22
13101: PUSH
13102: LD_VAR 0 2
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 2
13113: PUSH
13114: LD_INT 30
13116: PUSH
13117: LD_INT 0
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 30
13126: PUSH
13127: LD_INT 1
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PPUSH
13143: CALL_OW 69
13147: ST_TO_ADDR
// crates := 0 ;
13148: LD_ADDR_VAR 0 4
13152: PUSH
13153: LD_INT 0
13155: ST_TO_ADDR
// oil := 0 ;
13156: LD_ADDR_VAR 0 5
13160: PUSH
13161: LD_INT 0
13163: ST_TO_ADDR
// sib := 0 ;
13164: LD_ADDR_VAR 0 6
13168: PUSH
13169: LD_INT 0
13171: ST_TO_ADDR
// if bases then
13172: LD_VAR 0 9
13176: IFFALSE 13282
// begin for j in bases do
13178: LD_ADDR_VAR 0 3
13182: PUSH
13183: LD_VAR 0 9
13187: PUSH
13188: FOR_IN
13189: IFFALSE 13280
// begin base := GetBase ( j ) ;
13191: LD_ADDR_VAR 0 8
13195: PUSH
13196: LD_VAR 0 3
13200: PPUSH
13201: CALL_OW 274
13205: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13206: LD_ADDR_VAR 0 4
13210: PUSH
13211: LD_VAR 0 4
13215: PUSH
13216: LD_VAR 0 8
13220: PPUSH
13221: LD_INT 1
13223: PPUSH
13224: CALL_OW 275
13228: PLUS
13229: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13230: LD_ADDR_VAR 0 5
13234: PUSH
13235: LD_VAR 0 5
13239: PUSH
13240: LD_VAR 0 8
13244: PPUSH
13245: LD_INT 2
13247: PPUSH
13248: CALL_OW 275
13252: PLUS
13253: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13254: LD_ADDR_VAR 0 6
13258: PUSH
13259: LD_VAR 0 6
13263: PUSH
13264: LD_VAR 0 8
13268: PPUSH
13269: LD_INT 3
13271: PPUSH
13272: CALL_OW 275
13276: PLUS
13277: ST_TO_ADDR
// end ;
13278: GO 13188
13280: POP
13281: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13282: LD_STRING setSpecText(
13284: PUSH
13285: LD_VAR 0 2
13289: STR
13290: PUSH
13291: LD_STRING ,
13293: STR
13294: PUSH
13295: LD_INT 2
13297: STR
13298: PUSH
13299: LD_STRING ,
13301: STR
13302: PUSH
13303: LD_VAR 0 4
13307: STR
13308: PUSH
13309: LD_STRING )
13311: STR
13312: PPUSH
13313: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13317: LD_STRING setSpecText(
13319: PUSH
13320: LD_VAR 0 2
13324: STR
13325: PUSH
13326: LD_STRING ,
13328: STR
13329: PUSH
13330: LD_INT 3
13332: STR
13333: PUSH
13334: LD_STRING ,
13336: STR
13337: PUSH
13338: LD_VAR 0 5
13342: STR
13343: PUSH
13344: LD_STRING )
13346: STR
13347: PPUSH
13348: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13352: LD_STRING setSpecText(
13354: PUSH
13355: LD_VAR 0 2
13359: STR
13360: PUSH
13361: LD_STRING ,
13363: STR
13364: PUSH
13365: LD_INT 4
13367: STR
13368: PUSH
13369: LD_STRING ,
13371: STR
13372: PUSH
13373: LD_VAR 0 6
13377: STR
13378: PUSH
13379: LD_STRING )
13381: STR
13382: PPUSH
13383: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13387: LD_STRING setSpecText(
13389: PUSH
13390: LD_VAR 0 2
13394: STR
13395: PUSH
13396: LD_STRING ,
13398: STR
13399: PUSH
13400: LD_INT 5
13402: STR
13403: PUSH
13404: LD_STRING ,
13406: STR
13407: PUSH
13408: LD_VAR 0 7
13412: STR
13413: PUSH
13414: LD_STRING )
13416: STR
13417: PPUSH
13418: CALL_OW 559
// end ; end ;
13422: GO 13039
13424: POP
13425: POP
// end ;
13426: LD_VAR 0 1
13430: RET
// every 0 0$1 do
13431: GO 13433
13433: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13434: LD_STRING setSpecLogoNumber(
13436: PUSH
13437: LD_INT 2
13439: STR
13440: PUSH
13441: LD_STRING ,
13443: STR
13444: PUSH
13445: LD_INT 1
13447: STR
13448: PUSH
13449: LD_STRING )
13451: STR
13452: PPUSH
13453: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13457: LD_STRING setSpecLogoNumber(
13459: PUSH
13460: LD_INT 3
13462: STR
13463: PUSH
13464: LD_STRING ,
13466: STR
13467: PUSH
13468: LD_INT 2
13470: STR
13471: PUSH
13472: LD_STRING )
13474: STR
13475: PPUSH
13476: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13480: LD_STRING setSpecLogoNumber(
13482: PUSH
13483: LD_INT 4
13485: STR
13486: PUSH
13487: LD_STRING ,
13489: STR
13490: PUSH
13491: LD_INT 3
13493: STR
13494: PUSH
13495: LD_STRING )
13497: STR
13498: PPUSH
13499: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13503: LD_STRING setSpecLogoNumber(
13505: PUSH
13506: LD_INT 5
13508: STR
13509: PUSH
13510: LD_STRING ,
13512: STR
13513: PUSH
13514: LD_INT 4
13516: STR
13517: PUSH
13518: LD_STRING )
13520: STR
13521: PPUSH
13522: CALL_OW 559
// end ;
13526: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13527: LD_INT 2
13529: PUSH
13530: LD_INT 30
13532: PUSH
13533: LD_INT 0
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 30
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: PPUSH
13555: CALL_OW 69
13559: IFFALSE 13569
13561: GO 13563
13563: DISABLE
// begin enable ;
13564: ENABLE
// UpdateSpectatorBar ;
13565: CALL 13015 0 0
// end ; end_of_file
13569: END
// var respawn , inqueue ; export function init_respawning ; begin
13570: LD_INT 0
13572: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13573: LD_ADDR_LOC 14
13577: PUSH
13578: LD_INT 1
13580: PPUSH
13581: LD_INT 8
13583: PPUSH
13584: CALL_OW 12
13588: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13589: LD_ADDR_LOC 15
13593: PUSH
13594: LD_INT 0
13596: PUSH
13597: LD_INT 0
13599: PUSH
13600: LD_INT 0
13602: PUSH
13603: LD_INT 0
13605: PUSH
13606: LD_INT 0
13608: PUSH
13609: LD_INT 0
13611: PUSH
13612: LD_INT 0
13614: PUSH
13615: LD_INT 0
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: ST_TO_ADDR
// end ;
13628: LD_VAR 0 1
13632: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13633: GO 13635
13635: DISABLE
13636: LD_INT 0
13638: PPUSH
13639: PPUSH
13640: PPUSH
// begin if respawning_time_max = 0 then
13641: LD_EXP 30
13645: PUSH
13646: LD_INT 0
13648: EQUAL
13649: IFFALSE 13653
// exit ;
13651: GO 14061
// if respawn = 8 then
13653: LD_LOC 14
13657: PUSH
13658: LD_INT 8
13660: EQUAL
13661: IFFALSE 13673
// respawn := 1 else
13663: LD_ADDR_LOC 14
13667: PUSH
13668: LD_INT 1
13670: ST_TO_ADDR
13671: GO 13687
// respawn := respawn + 1 ;
13673: LD_ADDR_LOC 14
13677: PUSH
13678: LD_LOC 14
13682: PUSH
13683: LD_INT 1
13685: PLUS
13686: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13687: LD_EXP 37
13691: PUSH
13692: LD_LOC 14
13696: ARRAY
13697: PUSH
13698: LD_LOC 15
13702: PUSH
13703: LD_LOC 14
13707: ARRAY
13708: NOT
13709: AND
13710: IFFALSE 14060
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13712: LD_ADDR_VAR 0 1
13716: PUSH
13717: LD_INT 21
13719: PUSH
13720: LD_INT 1
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: LD_INT 22
13729: PUSH
13730: LD_LOC 14
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 3
13741: PUSH
13742: LD_INT 23
13744: PUSH
13745: LD_INT 0
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 69
13762: ST_TO_ADDR
// if n < number_of_people then
13763: LD_VAR 0 1
13767: PUSH
13768: LD_EXP 21
13772: LESS
13773: IFFALSE 14057
// begin aktresp := respawn ;
13775: LD_ADDR_VAR 0 3
13779: PUSH
13780: LD_LOC 14
13784: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13785: LD_ADDR_LOC 15
13789: PUSH
13790: LD_LOC 15
13794: PPUSH
13795: LD_VAR 0 3
13799: PPUSH
13800: LD_INT 1
13802: PPUSH
13803: CALL_OW 1
13807: ST_TO_ADDR
// enable ;
13808: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13809: LD_EXP 29
13813: PPUSH
13814: LD_EXP 30
13818: PPUSH
13819: CALL_OW 12
13823: PPUSH
13824: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13828: LD_ADDR_LOC 15
13832: PUSH
13833: LD_LOC 15
13837: PPUSH
13838: LD_VAR 0 3
13842: PPUSH
13843: LD_INT 0
13845: PPUSH
13846: CALL_OW 1
13850: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
13851: LD_ADDR_VAR 0 2
13855: PUSH
13856: LD_INT 21
13858: PUSH
13859: LD_INT 3
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 2
13868: PUSH
13869: LD_INT 30
13871: PUSH
13872: LD_INT 0
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: LD_INT 30
13881: PUSH
13882: LD_INT 1
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 50
13896: PUSH
13897: EMPTY
13898: LIST
13899: PUSH
13900: LD_INT 22
13902: PUSH
13903: LD_VAR 0 3
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: PPUSH
13918: CALL_OW 69
13922: ST_TO_ADDR
// if dep = 0 then
13923: LD_VAR 0 2
13927: PUSH
13928: LD_INT 0
13930: EQUAL
13931: IFFALSE 13935
// exit ;
13933: GO 14061
// hc_name :=  ;
13935: LD_ADDR_OWVAR 26
13939: PUSH
13940: LD_STRING 
13942: ST_TO_ADDR
// hc_importance := 0 ;
13943: LD_ADDR_OWVAR 32
13947: PUSH
13948: LD_INT 0
13950: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
13951: LD_INT 0
13953: PPUSH
13954: LD_INT 0
13956: PPUSH
13957: LD_EXP 22
13961: PUSH
13962: LD_INT 2
13964: DIV
13965: PPUSH
13966: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
13970: LD_ADDR_OWVAR 21
13974: PUSH
13975: LD_EXP 38
13979: PUSH
13980: LD_VAR 0 3
13984: ARRAY
13985: ST_TO_ADDR
// uc_side := aktresp ;
13986: LD_ADDR_OWVAR 20
13990: PUSH
13991: LD_VAR 0 3
13995: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
13996: LD_ADDR_VAR 0 2
14000: PUSH
14001: LD_VAR 0 2
14005: PUSH
14006: LD_INT 1
14008: PPUSH
14009: LD_VAR 0 2
14013: PPUSH
14014: CALL_OW 12
14018: ARRAY
14019: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14020: CALL_OW 44
14024: PPUSH
14025: LD_VAR 0 2
14029: PPUSH
14030: CALL_OW 250
14034: PPUSH
14035: LD_VAR 0 2
14039: PPUSH
14040: CALL_OW 251
14044: PPUSH
14045: LD_INT 7
14047: PPUSH
14048: LD_INT 1
14050: PPUSH
14051: CALL_OW 50
// end else
14055: GO 14058
// enable ;
14057: ENABLE
// end else
14058: GO 14061
// enable ;
14060: ENABLE
// end ;
14061: PPOPN 3
14063: END
