// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 386: LD_ADDR_EXP 36
 390: PUSH
 391: LD_EXP 31
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: EMPTY
 400: LIST
 401: DIFF
 402: PUSH
 403: LD_INT 1
 405: GREATER
 406: ST_TO_ADDR
// if Multiplayer then
 407: LD_OWVAR 4
 411: IFFALSE 613
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 413: LD_ADDR_EXP 1
 417: PUSH
 418: LD_INT 0
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 426: LD_ADDR_EXP 2
 430: PUSH
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 439: LD_ADDR_EXP 3
 443: PUSH
 444: LD_INT 2
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 452: LD_ADDR_EXP 4
 456: PUSH
 457: LD_INT 3
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 465: LD_ADDR_EXP 5
 469: PUSH
 470: LD_INT 4
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 478: LD_ADDR_EXP 6
 482: PUSH
 483: LD_INT 5
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 491: LD_ADDR_EXP 7
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 499: LD_ADDR_EXP 8
 503: PUSH
 504: LD_INT 10
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 512: LD_ADDR_EXP 9
 516: PUSH
 517: LD_INT 11
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 525: LD_ADDR_EXP 10
 529: PUSH
 530: LD_INT 12
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 538: LD_ADDR_EXP 11
 542: PUSH
 543: LD_INT 13
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 551: LD_ADDR_EXP 12
 555: PUSH
 556: LD_INT 14
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 564: LD_ADDR_EXP 13
 568: PUSH
 569: LD_INT 17
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 577: LD_ADDR_EXP 14
 581: PUSH
 582: LD_INT 20
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_win_rules = 0 ;
 603: LD_ADDR_EXP 30
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// end else
 611: GO 745
// begin Randomize ;
 613: CALL_OW 10
// def_base_level := 2 ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 2
 624: ST_TO_ADDR
// def_amount_of_people := 2 ;
 625: LD_ADDR_EXP 2
 629: PUSH
 630: LD_INT 2
 632: ST_TO_ADDR
// def_skill_level := 1 ;
 633: LD_ADDR_EXP 3
 637: PUSH
 638: LD_INT 1
 640: ST_TO_ADDR
// def_starting_resources := 2 ;
 641: LD_ADDR_EXP 4
 645: PUSH
 646: LD_INT 2
 648: ST_TO_ADDR
// def_shipments_density := 50 ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_INT 50
 656: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 657: LD_ADDR_EXP 6
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 665: LD_ADDR_EXP 7
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_shared_vision := 1 ;
 673: LD_ADDR_EXP 8
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_morale_flags := 1 ;
 681: LD_ADDR_EXP 9
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_siberite_detection := 1 ;
 689: LD_ADDR_EXP 10
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_people_respawning := 2 ;
 697: LD_ADDR_EXP 11
 701: PUSH
 702: LD_INT 2
 704: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 705: LD_ADDR_EXP 12
 709: PUSH
 710: LD_INT 3
 712: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 713: LD_ADDR_EXP 13
 717: PUSH
 718: LD_INT 0
 720: ST_TO_ADDR
// def_builduptime := 1 ;
 721: LD_ADDR_EXP 14
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// tech_level = 4 ;
 729: LD_ADDR_VAR 0 3
 733: PUSH
 734: LD_INT 4
 736: ST_TO_ADDR
// def_win_rules = 0 ;
 737: LD_ADDR_EXP 30
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// end ; if isSGUI then
 745: LD_OWVAR 83
 749: IFFALSE 757
// setMpTechs ( ) else
 751: CALL 9258 0 0
 755: GO 770
// SetMpTechLevel ( tech_level + 1 ) ;
 757: LD_VAR 0 3
 761: PUSH
 762: LD_INT 1
 764: PLUS
 765: PPUSH
 766: CALL 9405 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 770: LD_ADDR_EXP 17
 774: PUSH
 775: LD_INT 0
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 1
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_EXP 1
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: ARRAY
 798: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 18
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 828: LD_ADDR_EXP 19
 832: PUSH
 833: LD_INT 9
 835: PUSH
 836: LD_INT 12
 838: PUSH
 839: LD_INT 15
 841: PUSH
 842: LD_INT 24
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: PUSH
 851: LD_EXP 2
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: ARRAY
 860: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 861: LD_ADDR_EXP 20
 865: PUSH
 866: LD_INT 2
 868: PUSH
 869: LD_INT 3
 871: PUSH
 872: LD_INT 4
 874: PUSH
 875: LD_INT 5
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_EXP 3
 888: PUSH
 889: LD_INT 1
 891: PLUS
 892: ARRAY
 893: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 894: LD_ADDR_EXP 22
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 30
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 50
 929: PUSH
 930: LD_INT 20
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 80
 943: PUSH
 944: LD_INT 40
 946: PUSH
 947: LD_INT 20
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: LD_EXP 4
 965: PUSH
 966: LD_INT 1
 968: PLUS
 969: ARRAY
 970: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 971: LD_ADDR_EXP 21
 975: PUSH
 976: LD_INT 10
 978: PUSH
 979: EMPTY
 980: LIST
 981: PUSH
 982: LD_INT 7
 984: PUSH
 985: LD_INT 14
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 6
 994: PUSH
 995: LD_INT 12
 997: PUSH
 998: LD_INT 18
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_INT 5
1008: PUSH
1009: LD_INT 10
1011: PUSH
1012: LD_INT 15
1014: PUSH
1015: LD_INT 20
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_EXP 4
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: ARRAY
1039: ST_TO_ADDR
// shipments_density := 150 - def_shipments_density ;
1040: LD_ADDR_EXP 23
1044: PUSH
1045: LD_INT 150
1047: PUSH
1048: LD_EXP 5
1052: MINUS
1053: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1054: LD_ADDR_EXP 27
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 10500
1064: PUSH
1065: LD_INT 6300
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: LIST
1072: PUSH
1073: LD_EXP 11
1077: PUSH
1078: LD_INT 1
1080: PLUS
1081: ARRAY
1082: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1083: LD_ADDR_EXP 28
1087: PUSH
1088: LD_INT 0
1090: PUSH
1091: LD_INT 31500
1093: PUSH
1094: LD_INT 10500
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: LIST
1101: PUSH
1102: LD_EXP 11
1106: PUSH
1107: LD_INT 1
1109: PLUS
1110: ARRAY
1111: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1112: LD_ADDR_EXP 25
1116: PUSH
1117: LD_INT 0
1119: PUSH
1120: LD_INT 1
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: LIST
1134: PUSH
1135: LD_EXP 12
1139: PUSH
1140: LD_INT 1
1142: PLUS
1143: ARRAY
1144: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1145: LD_ADDR_EXP 24
1149: PUSH
1150: LD_INT 1
1152: NEG
1153: PUSH
1154: LD_INT 350
1156: PUSH
1157: LD_INT 700
1159: PUSH
1160: LD_INT 1400
1162: PUSH
1163: LD_INT 0
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: LIST
1171: LIST
1172: PUSH
1173: LD_EXP 9
1177: PUSH
1178: LD_INT 1
1180: PLUS
1181: ARRAY
1182: ST_TO_ADDR
// battle_flags_id = [ ] ;
1183: LD_ADDR_EXP 44
1187: PUSH
1188: EMPTY
1189: ST_TO_ADDR
// if def_siberite_bomb = 0 then
1190: LD_EXP 13
1194: PUSH
1195: LD_INT 0
1197: EQUAL
1198: IFFALSE 1210
// siberite_bomb_Delay = 0 else
1200: LD_ADDR_EXP 29
1204: PUSH
1205: LD_INT 0
1207: ST_TO_ADDR
1208: GO 1232
// siberite_bomb_Delay = ( def_siberite_bomb - 1 ) * 10 10$0 + 1 ;
1210: LD_ADDR_EXP 29
1214: PUSH
1215: LD_EXP 13
1219: PUSH
1220: LD_INT 1
1222: MINUS
1223: PUSH
1224: LD_INT 21000
1226: MUL
1227: PUSH
1228: LD_INT 1
1230: PLUS
1231: ST_TO_ADDR
// end ;
1232: LD_VAR 0 1
1236: RET
// function init_map ; var i , j ; begin
1237: LD_INT 0
1239: PPUSH
1240: PPUSH
1241: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1242: LD_ADDR_EXP 40
1246: PUSH
1247: LD_INT 17
1249: PUSH
1250: LD_INT 4
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: LD_INT 72
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 157
1269: PUSH
1270: LD_INT 22
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: LD_INT 205
1279: PUSH
1280: LD_INT 111
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: LD_INT 221
1289: PUSH
1290: LD_INT 195
1292: PUSH
1293: EMPTY
1294: LIST
1295: LIST
1296: PUSH
1297: LD_INT 169
1299: PUSH
1300: LD_INT 196
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: LD_INT 93
1309: PUSH
1310: LD_INT 177
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: LD_INT 52
1319: PUSH
1320: LD_INT 92
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1337: LD_ADDR_EXP 41
1341: PUSH
1342: LD_INT 17
1344: PUSH
1345: LD_INT 4
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 16
1354: PUSH
1355: LD_INT 23
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 72
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 88
1378: PUSH
1379: LD_INT 28
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 157
1392: PUSH
1393: LD_INT 22
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 133
1402: PUSH
1403: LD_INT 12
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 205
1416: PUSH
1417: LD_INT 111
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: LD_INT 200
1426: PUSH
1427: LD_INT 95
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: LD_INT 221
1440: PUSH
1441: LD_INT 195
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: LD_INT 249
1450: PUSH
1451: LD_INT 190
1453: PUSH
1454: EMPTY
1455: LIST
1456: LIST
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 169
1464: PUSH
1465: LD_INT 196
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 180
1474: PUSH
1475: LD_INT 197
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 93
1488: PUSH
1489: LD_INT 177
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: LD_INT 114
1498: PUSH
1499: LD_INT 194
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 52
1512: PUSH
1513: LD_INT 92
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 58
1522: PUSH
1523: LD_INT 107
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1544: LD_ADDR_EXP 42
1548: PUSH
1549: LD_INT 12
1551: PUSH
1552: LD_INT 12
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 99
1561: PUSH
1562: LD_INT 19
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 139
1571: PUSH
1572: LD_INT 5
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 207
1581: PUSH
1582: LD_INT 100
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 244
1591: PUSH
1592: LD_INT 181
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 183
1601: PUSH
1602: LD_INT 196
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 117
1611: PUSH
1612: LD_INT 195
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 54
1621: PUSH
1622: LD_INT 104
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1639: LD_ADDR_EXP 43
1643: PUSH
1644: EMPTY
1645: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1646: LD_ADDR_EXP 37
1650: PUSH
1651: LD_INT 32
1653: PUSH
1654: LD_INT 24
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 87
1667: PUSH
1668: LD_INT 18
1670: PUSH
1671: LD_INT 3
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 146
1681: PUSH
1682: LD_INT 28
1684: PUSH
1685: LD_INT 3
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_INT 188
1695: PUSH
1696: LD_INT 103
1698: PUSH
1699: LD_INT 4
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 224
1709: PUSH
1710: LD_INT 180
1712: PUSH
1713: LD_INT 5
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 168
1723: PUSH
1724: LD_INT 180
1726: PUSH
1727: LD_INT 0
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 105
1737: PUSH
1738: LD_INT 170
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 71
1751: PUSH
1752: LD_INT 102
1754: PUSH
1755: LD_INT 1
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: LIST
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: ST_TO_ADDR
// for i in depot_def do
1773: LD_ADDR_VAR 0 2
1777: PUSH
1778: LD_EXP 37
1782: PUSH
1783: FOR_IN
1784: IFFALSE 1860
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1786: LD_ADDR_EXP 39
1790: PUSH
1791: LD_EXP 39
1795: PUSH
1796: LD_VAR 0 2
1800: PUSH
1801: LD_INT 1
1803: ARRAY
1804: PPUSH
1805: LD_VAR 0 2
1809: PUSH
1810: LD_INT 3
1812: ARRAY
1813: PPUSH
1814: LD_INT 4
1816: NEG
1817: PPUSH
1818: CALL_OW 272
1822: PUSH
1823: LD_VAR 0 2
1827: PUSH
1828: LD_INT 2
1830: ARRAY
1831: PPUSH
1832: LD_VAR 0 2
1836: PUSH
1837: LD_INT 3
1839: ARRAY
1840: PPUSH
1841: LD_INT 4
1843: NEG
1844: PPUSH
1845: CALL_OW 273
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: EMPTY
1855: LIST
1856: ADD
1857: ST_TO_ADDR
1858: GO 1783
1860: POP
1861: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
1862: LD_ADDR_EXP 38
1866: PUSH
1867: LD_INT 50
1869: PUSH
1870: LD_INT 40
1872: PUSH
1873: LD_INT 5
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 47
1883: PUSH
1884: LD_INT 17
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_INT 29
1897: PUSH
1898: LD_INT 39
1900: PUSH
1901: LD_INT 0
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 107
1916: PUSH
1917: LD_INT 27
1919: PUSH
1920: LD_INT 4
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 67
1930: PUSH
1931: LD_INT 10
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 91
1944: PUSH
1945: LD_INT 35
1947: PUSH
1948: LD_INT 0
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: PUSH
1961: LD_INT 165
1963: PUSH
1964: LD_INT 44
1966: PUSH
1967: LD_INT 5
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 123
1977: PUSH
1978: LD_INT 16
1980: PUSH
1981: LD_INT 2
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 141
1991: PUSH
1992: LD_INT 39
1994: PUSH
1995: LD_INT 0
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 179
2010: PUSH
2011: LD_INT 85
2013: PUSH
2014: LD_INT 3
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 172
2024: PUSH
2025: LD_INT 102
2027: PUSH
2028: LD_INT 1
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 196
2038: PUSH
2039: LD_INT 118
2041: PUSH
2042: LD_INT 5
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: PUSH
2055: LD_INT 210
2057: PUSH
2058: LD_INT 182
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 226
2071: PUSH
2072: LD_INT 164
2074: PUSH
2075: LD_INT 3
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 209
2085: PUSH
2086: LD_INT 164
2088: PUSH
2089: LD_INT 2
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: LIST
2101: PUSH
2102: LD_INT 156
2104: PUSH
2105: LD_INT 183
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 184
2118: PUSH
2119: LD_INT 184
2121: PUSH
2122: LD_INT 4
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 161
2132: PUSH
2133: LD_INT 166
2135: PUSH
2136: LD_INT 3
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: LIST
2148: PUSH
2149: LD_INT 86
2151: PUSH
2152: LD_INT 156
2154: PUSH
2155: LD_INT 2
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 124
2165: PUSH
2166: LD_INT 180
2168: PUSH
2169: LD_INT 4
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 106
2179: PUSH
2180: LD_INT 155
2182: PUSH
2183: LD_INT 3
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 87
2198: PUSH
2199: LD_INT 102
2201: PUSH
2202: LD_INT 4
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 63
2212: PUSH
2213: LD_INT 83
2215: PUSH
2216: LD_INT 3
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 79
2226: PUSH
2227: LD_INT 120
2229: PUSH
2230: LD_INT 0
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: ST_TO_ADDR
// for i = 1 to Side_Positions do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_EXP 34
2267: PUSH
2268: FOR_TO
2269: IFFALSE 2399
// begin if not Side_Positions [ i ] then
2271: LD_EXP 34
2275: PUSH
2276: LD_VAR 0 2
2280: ARRAY
2281: NOT
2282: IFFALSE 2286
// continue ;
2284: GO 2268
// if def_extra_oil_deposits then
2286: LD_EXP 6
2290: IFFALSE 2348
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2292: LD_ADDR_VAR 0 3
2296: PUSH
2297: LD_EXP 41
2301: PUSH
2302: LD_EXP 34
2306: PUSH
2307: LD_VAR 0 2
2311: ARRAY
2312: ARRAY
2313: PUSH
2314: FOR_IN
2315: IFFALSE 2344
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2317: LD_VAR 0 3
2321: PUSH
2322: LD_INT 1
2324: ARRAY
2325: PPUSH
2326: LD_VAR 0 3
2330: PUSH
2331: LD_INT 2
2333: ARRAY
2334: PPUSH
2335: LD_INT 2
2337: PPUSH
2338: CALL_OW 62
2342: GO 2314
2344: POP
2345: POP
2346: GO 2397
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2348: LD_EXP 40
2352: PUSH
2353: LD_EXP 34
2357: PUSH
2358: LD_VAR 0 2
2362: ARRAY
2363: ARRAY
2364: PUSH
2365: LD_INT 1
2367: ARRAY
2368: PPUSH
2369: LD_EXP 40
2373: PUSH
2374: LD_EXP 34
2378: PUSH
2379: LD_VAR 0 2
2383: ARRAY
2384: ARRAY
2385: PUSH
2386: LD_INT 2
2388: ARRAY
2389: PPUSH
2390: LD_INT 2
2392: PPUSH
2393: CALL_OW 62
// end ;
2397: GO 2268
2399: POP
2400: POP
// if def_extra_sib_deposits then
2401: LD_EXP 7
2405: IFFALSE 2559
// for i = 1 to Side_Positions do
2407: LD_ADDR_VAR 0 2
2411: PUSH
2412: DOUBLE
2413: LD_INT 1
2415: DEC
2416: ST_TO_ADDR
2417: LD_EXP 34
2421: PUSH
2422: FOR_TO
2423: IFFALSE 2557
// begin if not Side_Positions [ i ] then
2425: LD_EXP 34
2429: PUSH
2430: LD_VAR 0 2
2434: ARRAY
2435: NOT
2436: IFFALSE 2440
// continue ;
2438: GO 2422
// if def_extra_sib_deposits = 2 then
2440: LD_EXP 7
2444: PUSH
2445: LD_INT 2
2447: EQUAL
2448: IFFALSE 2506
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2450: LD_ADDR_VAR 0 3
2454: PUSH
2455: LD_EXP 43
2459: PUSH
2460: LD_EXP 34
2464: PUSH
2465: LD_VAR 0 2
2469: ARRAY
2470: ARRAY
2471: PUSH
2472: FOR_IN
2473: IFFALSE 2502
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: LD_VAR 0 3
2488: PUSH
2489: LD_INT 2
2491: ARRAY
2492: PPUSH
2493: LD_INT 3
2495: PPUSH
2496: CALL_OW 62
2500: GO 2472
2502: POP
2503: POP
2504: GO 2555
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2506: LD_EXP 42
2510: PUSH
2511: LD_EXP 34
2515: PUSH
2516: LD_VAR 0 2
2520: ARRAY
2521: ARRAY
2522: PUSH
2523: LD_INT 1
2525: ARRAY
2526: PPUSH
2527: LD_EXP 42
2531: PUSH
2532: LD_EXP 34
2536: PUSH
2537: LD_VAR 0 2
2541: ARRAY
2542: ARRAY
2543: PUSH
2544: LD_INT 2
2546: ARRAY
2547: PPUSH
2548: LD_INT 3
2550: PPUSH
2551: CALL_OW 62
// end ;
2555: GO 2422
2557: POP
2558: POP
// end ;
2559: LD_VAR 0 1
2563: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2564: LD_INT 0
2566: PPUSH
2567: PPUSH
2568: PPUSH
// if not Team_Game then
2569: LD_EXP 36
2573: NOT
2574: IFFALSE 2672
// begin for i = 1 to 8 do
2576: LD_ADDR_VAR 0 2
2580: PUSH
2581: DOUBLE
2582: LD_INT 1
2584: DEC
2585: ST_TO_ADDR
2586: LD_INT 8
2588: PUSH
2589: FOR_TO
2590: IFFALSE 2668
// for j = 1 to 8 do
2592: LD_ADDR_VAR 0 3
2596: PUSH
2597: DOUBLE
2598: LD_INT 1
2600: DEC
2601: ST_TO_ADDR
2602: LD_INT 8
2604: PUSH
2605: FOR_TO
2606: IFFALSE 2664
// if i <> j then
2608: LD_VAR 0 2
2612: PUSH
2613: LD_VAR 0 3
2617: NONEQUAL
2618: IFFALSE 2642
// SetAttitude ( i , j , att_neutral , true ) else
2620: LD_VAR 0 2
2624: PPUSH
2625: LD_VAR 0 3
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: LD_INT 1
2635: PPUSH
2636: CALL_OW 80
2640: GO 2662
// SetAttitude ( i , j , att_friend , true ) ;
2642: LD_VAR 0 2
2646: PPUSH
2647: LD_VAR 0 3
2651: PPUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: CALL_OW 80
2662: GO 2605
2664: POP
2665: POP
2666: GO 2589
2668: POP
2669: POP
// end else
2670: GO 2847
// begin if def_shared_vision then
2672: LD_EXP 8
2676: IFFALSE 2741
// begin for i in Teams do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: LD_EXP 32
2687: PUSH
2688: FOR_IN
2689: IFFALSE 2739
// for j = 2 to i do
2691: LD_ADDR_VAR 0 3
2695: PUSH
2696: DOUBLE
2697: LD_INT 2
2699: DEC
2700: ST_TO_ADDR
2701: LD_VAR 0 2
2705: PUSH
2706: FOR_TO
2707: IFFALSE 2735
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2709: LD_VAR 0 2
2713: PUSH
2714: LD_VAR 0 3
2718: ARRAY
2719: PPUSH
2720: LD_VAR 0 2
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: PPUSH
2729: CALL_OW 343
2733: GO 2706
2735: POP
2736: POP
2737: GO 2688
2739: POP
2740: POP
// end ; for i = 1 to 8 do
2741: LD_ADDR_VAR 0 2
2745: PUSH
2746: DOUBLE
2747: LD_INT 1
2749: DEC
2750: ST_TO_ADDR
2751: LD_INT 8
2753: PUSH
2754: FOR_TO
2755: IFFALSE 2845
// for j = 1 to 8 do
2757: LD_ADDR_VAR 0 3
2761: PUSH
2762: DOUBLE
2763: LD_INT 1
2765: DEC
2766: ST_TO_ADDR
2767: LD_INT 8
2769: PUSH
2770: FOR_TO
2771: IFFALSE 2841
// if Side_Teams [ i ] = Side_Teams [ j ] then
2773: LD_EXP 31
2777: PUSH
2778: LD_VAR 0 2
2782: ARRAY
2783: PUSH
2784: LD_EXP 31
2788: PUSH
2789: LD_VAR 0 3
2793: ARRAY
2794: EQUAL
2795: IFFALSE 2819
// SetAttitude ( i , j , att_friend , true ) else
2797: LD_VAR 0 2
2801: PPUSH
2802: LD_VAR 0 3
2806: PPUSH
2807: LD_INT 1
2809: PPUSH
2810: LD_INT 1
2812: PPUSH
2813: CALL_OW 80
2817: GO 2839
// SetAttitude ( i , j , att_enemy , true ) ;
2819: LD_VAR 0 2
2823: PPUSH
2824: LD_VAR 0 3
2828: PPUSH
2829: LD_INT 2
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 80
2839: GO 2770
2841: POP
2842: POP
2843: GO 2754
2845: POP
2846: POP
// end ; end ;
2847: LD_VAR 0 1
2851: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2852: LD_INT 0
2854: PPUSH
2855: PPUSH
2856: PPUSH
2857: PPUSH
// result := [ ] ;
2858: LD_ADDR_VAR 0 7
2862: PUSH
2863: EMPTY
2864: ST_TO_ADDR
// for i := 1 to count do
2865: LD_ADDR_VAR 0 8
2869: PUSH
2870: DOUBLE
2871: LD_INT 1
2873: DEC
2874: ST_TO_ADDR
2875: LD_VAR 0 1
2879: PUSH
2880: FOR_TO
2881: IFFALSE 3299
// begin uc_direction := Rand ( 0 , 5 ) ;
2883: LD_ADDR_OWVAR 24
2887: PUSH
2888: LD_INT 0
2890: PPUSH
2891: LD_INT 5
2893: PPUSH
2894: CALL_OW 12
2898: ST_TO_ADDR
// if commander then
2899: LD_LOC 1
2903: IFFALSE 3012
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2905: LD_ADDR_OWVAR 26
2909: PUSH
2910: LD_OWVAR 19
2914: PUSH
2915: LD_OWVAR 20
2919: ARRAY
2920: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2921: LD_INT 1
2923: PPUSH
2924: LD_INT 2
2926: PPUSH
2927: CALL_OW 12
2931: PPUSH
2932: LD_VAR 0 2
2936: PPUSH
2937: LD_EXP 20
2941: PUSH
2942: LD_INT 2
2944: PLUS
2945: PPUSH
2946: CALL_OW 380
// hc_importance := 105 ;
2950: LD_ADDR_OWVAR 32
2954: PUSH
2955: LD_INT 105
2957: ST_TO_ADDR
// commander := false ;
2958: LD_ADDR_LOC 1
2962: PUSH
2963: LD_INT 0
2965: ST_TO_ADDR
// if Multiplayer then
2966: LD_OWVAR 4
2970: IFFALSE 3010
// begin hc_gallery := MULTIAVATARS ;
2972: LD_ADDR_OWVAR 33
2976: PUSH
2977: LD_STRING MULTIAVATARS
2979: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2980: LD_ADDR_OWVAR 34
2984: PUSH
2985: LD_OWVAR 20
2989: PPUSH
2990: CALL_OW 525
2994: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
2995: LD_ADDR_OWVAR 27
2999: PUSH
3000: LD_OWVAR 20
3004: PPUSH
3005: CALL_OW 526
3009: ST_TO_ADDR
// end ; end else
3010: GO 3075
// begin hc_name :=  ;
3012: LD_ADDR_OWVAR 26
3016: PUSH
3017: LD_STRING 
3019: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3020: LD_INT 1
3022: PPUSH
3023: LD_INT 2
3025: PPUSH
3026: CALL_OW 12
3030: PPUSH
3031: LD_VAR 0 2
3035: PPUSH
3036: LD_EXP 20
3040: PPUSH
3041: CALL_OW 380
// hc_importance := 0 ;
3045: LD_ADDR_OWVAR 32
3049: PUSH
3050: LD_INT 0
3052: ST_TO_ADDR
// if Multiplayer then
3053: LD_OWVAR 4
3057: IFFALSE 3075
// begin hc_gallery :=  ;
3059: LD_ADDR_OWVAR 33
3063: PUSH
3064: LD_STRING 
3066: ST_TO_ADDR
// hc_face_number := 0 ;
3067: LD_ADDR_OWVAR 34
3071: PUSH
3072: LD_INT 0
3074: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3075: LD_ADDR_VAR 0 10
3079: PUSH
3080: CALL_OW 44
3084: ST_TO_ADDR
// if global_defined then
3085: LD_LOC 3
3089: IFFALSE 3229
// begin if ( cl = class_soldier ) then
3091: LD_VAR 0 2
3095: PUSH
3096: LD_INT 1
3098: EQUAL
3099: IFFALSE 3119
// j := i + soldiers_created else
3101: LD_ADDR_VAR 0 9
3105: PUSH
3106: LD_VAR 0 8
3110: PUSH
3111: LD_LOC 4
3115: PLUS
3116: ST_TO_ADDR
3117: GO 3129
// j := i ;
3119: LD_ADDR_VAR 0 9
3123: PUSH
3124: LD_VAR 0 8
3128: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3129: LD_LOC 2
3133: PUSH
3134: LD_VAR 0 2
3138: ARRAY
3139: PUSH
3140: LD_VAR 0 9
3144: ARRAY
3145: PPUSH
3146: LD_VAR 0 10
3150: PPUSH
3151: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3155: LD_VAR 0 10
3159: PPUSH
3160: LD_INT 2
3162: PPUSH
3163: LD_LOC 2
3167: PUSH
3168: LD_VAR 0 2
3172: ARRAY
3173: PUSH
3174: LD_VAR 0 9
3178: ARRAY
3179: PPUSH
3180: LD_INT 2
3182: PPUSH
3183: CALL_OW 260
3187: PPUSH
3188: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3192: LD_VAR 0 10
3196: PPUSH
3197: LD_INT 1
3199: PPUSH
3200: LD_LOC 2
3204: PUSH
3205: LD_VAR 0 2
3209: ARRAY
3210: PUSH
3211: LD_VAR 0 9
3215: ARRAY
3216: PPUSH
3217: LD_INT 1
3219: PPUSH
3220: CALL_OW 260
3224: PPUSH
3225: CALL_OW 239
// end ; if building then
3229: LD_VAR 0 6
3233: IFFALSE 3251
// PlaceHumanInUnit ( un , building ) else
3235: LD_VAR 0 10
3239: PPUSH
3240: LD_VAR 0 6
3244: PPUSH
3245: CALL_OW 52
3249: GO 3278
// PlaceUnitXYR ( un , x , y , r , false ) ;
3251: LD_VAR 0 10
3255: PPUSH
3256: LD_VAR 0 3
3260: PPUSH
3261: LD_VAR 0 4
3265: PPUSH
3266: LD_VAR 0 5
3270: PPUSH
3271: LD_INT 0
3273: PPUSH
3274: CALL_OW 50
// result := result ^ [ un ] ;
3278: LD_ADDR_VAR 0 7
3282: PUSH
3283: LD_VAR 0 7
3287: PUSH
3288: LD_VAR 0 10
3292: PUSH
3293: EMPTY
3294: LIST
3295: ADD
3296: ST_TO_ADDR
// end ;
3297: GO 2880
3299: POP
3300: POP
// if not global_defined then
3301: LD_LOC 3
3305: NOT
3306: IFFALSE 3384
// if ( global_units >= cl ) then
3308: LD_LOC 2
3312: PUSH
3313: LD_VAR 0 2
3317: GREATEREQUAL
3318: IFFALSE 3359
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3320: LD_ADDR_LOC 2
3324: PUSH
3325: LD_LOC 2
3329: PPUSH
3330: LD_VAR 0 2
3334: PPUSH
3335: LD_LOC 2
3339: PUSH
3340: LD_VAR 0 2
3344: ARRAY
3345: PUSH
3346: LD_VAR 0 7
3350: ADD
3351: PPUSH
3352: CALL_OW 1
3356: ST_TO_ADDR
3357: GO 3384
// global_units := Replace ( global_units , cl , result ) ;
3359: LD_ADDR_LOC 2
3363: PUSH
3364: LD_LOC 2
3368: PPUSH
3369: LD_VAR 0 2
3373: PPUSH
3374: LD_VAR 0 7
3378: PPUSH
3379: CALL_OW 1
3383: ST_TO_ADDR
// if commander then
3384: LD_LOC 1
3388: IFFALSE 3435
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3390: LD_ADDR_EXP 45
3394: PUSH
3395: LD_EXP 45
3399: PPUSH
3400: LD_OWVAR 20
3404: PPUSH
3405: LD_EXP 45
3409: PUSH
3410: LD_OWVAR 20
3414: ARRAY
3415: PUSH
3416: LD_VAR 0 10
3420: ADD
3421: PPUSH
3422: CALL_OW 1
3426: ST_TO_ADDR
// commander := false ;
3427: LD_ADDR_LOC 1
3431: PUSH
3432: LD_INT 0
3434: ST_TO_ADDR
// end ; end ;
3435: LD_VAR 0 7
3439: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3440: LD_INT 0
3442: PPUSH
3443: PPUSH
3444: PPUSH
3445: PPUSH
3446: PPUSH
3447: PPUSH
3448: PPUSH
3449: PPUSH
3450: PPUSH
// if side in [ 0 , 9 ] then
3451: LD_VAR 0 1
3455: PUSH
3456: LD_INT 0
3458: PUSH
3459: LD_INT 9
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: IN
3466: IFFALSE 3470
// exit ;
3468: GO 4520
// pos := Side_Positions [ side ] ;
3470: LD_ADDR_VAR 0 3
3474: PUSH
3475: LD_EXP 34
3479: PUSH
3480: LD_VAR 0 1
3484: ARRAY
3485: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3486: LD_ADDR_OWVAR 21
3490: PUSH
3491: LD_EXP 35
3495: PUSH
3496: LD_VAR 0 1
3500: ARRAY
3501: ST_TO_ADDR
// uc_side := side ;
3502: LD_ADDR_OWVAR 20
3506: PUSH
3507: LD_VAR 0 1
3511: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3512: LD_ADDR_VAR 0 4
3516: PUSH
3517: LD_EXP 37
3521: PUSH
3522: LD_VAR 0 3
3526: ARRAY
3527: PUSH
3528: LD_INT 1
3530: ARRAY
3531: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3532: LD_ADDR_VAR 0 5
3536: PUSH
3537: LD_EXP 37
3541: PUSH
3542: LD_VAR 0 3
3546: ARRAY
3547: PUSH
3548: LD_INT 2
3550: ARRAY
3551: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3552: LD_ADDR_VAR 0 6
3556: PUSH
3557: LD_EXP 37
3561: PUSH
3562: LD_VAR 0 3
3566: ARRAY
3567: PUSH
3568: LD_INT 3
3570: ARRAY
3571: ST_TO_ADDR
// if is_depot then
3572: LD_EXP 17
3576: IFFALSE 3709
// begin bc_type = b_depot ;
3578: LD_ADDR_OWVAR 42
3582: PUSH
3583: LD_INT 0
3585: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3586: LD_ADDR_VAR 0 10
3590: PUSH
3591: LD_VAR 0 4
3595: PPUSH
3596: LD_VAR 0 5
3600: PPUSH
3601: LD_VAR 0 6
3605: PPUSH
3606: CALL_OW 47
3610: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3611: LD_VAR 0 10
3615: PPUSH
3616: LD_STRING @
3618: PUSH
3619: LD_VAR 0 1
3623: STR
3624: PPUSH
3625: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3629: LD_VAR 0 10
3633: PPUSH
3634: CALL_OW 274
3638: PPUSH
3639: LD_INT 1
3641: PPUSH
3642: LD_EXP 22
3646: PUSH
3647: LD_INT 1
3649: ARRAY
3650: PPUSH
3651: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3655: LD_VAR 0 10
3659: PPUSH
3660: CALL_OW 274
3664: PPUSH
3665: LD_INT 2
3667: PPUSH
3668: LD_EXP 22
3672: PUSH
3673: LD_INT 2
3675: ARRAY
3676: PPUSH
3677: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3681: LD_VAR 0 10
3685: PPUSH
3686: CALL_OW 274
3690: PPUSH
3691: LD_INT 3
3693: PPUSH
3694: LD_EXP 22
3698: PUSH
3699: LD_INT 3
3701: ARRAY
3702: PPUSH
3703: CALL_OW 277
// end else
3707: GO 3853
// begin for i := 1 to 3 do
3709: LD_ADDR_VAR 0 7
3713: PUSH
3714: DOUBLE
3715: LD_INT 1
3717: DEC
3718: ST_TO_ADDR
3719: LD_INT 3
3721: PUSH
3722: FOR_TO
3723: IFFALSE 3851
// begin r := starting_resources [ i ] ;
3725: LD_ADDR_VAR 0 8
3729: PUSH
3730: LD_EXP 22
3734: PUSH
3735: LD_VAR 0 7
3739: ARRAY
3740: ST_TO_ADDR
// while r >= 10 do
3741: LD_VAR 0 8
3745: PUSH
3746: LD_INT 10
3748: GREATEREQUAL
3749: IFFALSE 3849
// if r > 50 then
3751: LD_VAR 0 8
3755: PUSH
3756: LD_INT 50
3758: GREATER
3759: IFFALSE 3805
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3761: LD_VAR 0 7
3765: PPUSH
3766: LD_INT 5
3768: PPUSH
3769: LD_VAR 0 4
3773: PPUSH
3774: LD_VAR 0 5
3778: PPUSH
3779: LD_INT 4
3781: PPUSH
3782: LD_INT 0
3784: PPUSH
3785: CALL_OW 60
// r := r - 50 ;
3789: LD_ADDR_VAR 0 8
3793: PUSH
3794: LD_VAR 0 8
3798: PUSH
3799: LD_INT 50
3801: MINUS
3802: ST_TO_ADDR
// end else
3803: GO 3847
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3805: LD_VAR 0 7
3809: PPUSH
3810: LD_VAR 0 8
3814: PUSH
3815: LD_INT 10
3817: DIV
3818: PPUSH
3819: LD_VAR 0 4
3823: PPUSH
3824: LD_VAR 0 5
3828: PPUSH
3829: LD_INT 4
3831: PPUSH
3832: LD_INT 0
3834: PPUSH
3835: CALL_OW 60
// r := 0 ;
3839: LD_ADDR_VAR 0 8
3843: PUSH
3844: LD_INT 0
3846: ST_TO_ADDR
// end ;
3847: GO 3741
// end ;
3849: GO 3722
3851: POP
3852: POP
// end ; for r in starting_crates do
3853: LD_ADDR_VAR 0 8
3857: PUSH
3858: LD_EXP 21
3862: PUSH
3863: FOR_IN
3864: IFFALSE 3896
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 5
3871: PPUSH
3872: LD_VAR 0 4
3876: PPUSH
3877: LD_VAR 0 5
3881: PPUSH
3882: LD_VAR 0 8
3886: PPUSH
3887: LD_INT 0
3889: PPUSH
3890: CALL_OW 60
3894: GO 3863
3896: POP
3897: POP
// if def_morale_flags then
3898: LD_EXP 9
3902: IFFALSE 4041
// begin x := start_def [ pos ] [ 1 ] ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_EXP 39
3913: PUSH
3914: LD_VAR 0 3
3918: ARRAY
3919: PUSH
3920: LD_INT 1
3922: ARRAY
3923: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3924: LD_ADDR_VAR 0 5
3928: PUSH
3929: LD_EXP 39
3933: PUSH
3934: LD_VAR 0 3
3938: ARRAY
3939: PUSH
3940: LD_INT 2
3942: ARRAY
3943: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3944: LD_VAR 0 4
3948: PPUSH
3949: LD_VAR 0 5
3953: PPUSH
3954: LD_INT 12
3956: PPUSH
3957: LD_INT 2
3959: PPUSH
3960: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3964: LD_ADDR_EXP 44
3968: PUSH
3969: LD_EXP 44
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: LD_VAR 0 4
3983: PPUSH
3984: LD_VAR 0 5
3988: PPUSH
3989: LD_INT 1
3991: PUSH
3992: LD_INT 100
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: LD_INT 50
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 20
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: LD_INT 20
4021: PUSH
4022: LD_INT 100
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: PPUSH
4035: CALL_OW 418
4039: ADD
4040: ST_TO_ADDR
// end ; commander := true ;
4041: LD_ADDR_LOC 1
4045: PUSH
4046: LD_INT 1
4048: ST_TO_ADDR
// soldiers_created := 0 ;
4049: LD_ADDR_LOC 4
4053: PUSH
4054: LD_INT 0
4056: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4057: LD_ADDR_VAR 0 7
4061: PUSH
4062: DOUBLE
4063: LD_INT 1
4065: DEC
4066: ST_TO_ADDR
4067: LD_EXP 18
4071: PUSH
4072: FOR_TO
4073: IFFALSE 4226
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4075: LD_ADDR_VAR 0 4
4079: PUSH
4080: LD_EXP 38
4084: PUSH
4085: LD_VAR 0 3
4089: ARRAY
4090: PUSH
4091: LD_VAR 0 7
4095: ARRAY
4096: PUSH
4097: LD_INT 1
4099: ARRAY
4100: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4101: LD_ADDR_VAR 0 5
4105: PUSH
4106: LD_EXP 38
4110: PUSH
4111: LD_VAR 0 3
4115: ARRAY
4116: PUSH
4117: LD_VAR 0 7
4121: ARRAY
4122: PUSH
4123: LD_INT 2
4125: ARRAY
4126: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4127: LD_ADDR_VAR 0 6
4131: PUSH
4132: LD_EXP 38
4136: PUSH
4137: LD_VAR 0 3
4141: ARRAY
4142: PUSH
4143: LD_VAR 0 7
4147: ARRAY
4148: PUSH
4149: LD_INT 3
4151: ARRAY
4152: ST_TO_ADDR
// bc_type := b_breastwork ;
4153: LD_ADDR_OWVAR 42
4157: PUSH
4158: LD_INT 31
4160: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4161: LD_ADDR_VAR 0 9
4165: PUSH
4166: LD_VAR 0 4
4170: PPUSH
4171: LD_VAR 0 5
4175: PPUSH
4176: LD_VAR 0 6
4180: PPUSH
4181: CALL_OW 47
4185: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4186: LD_INT 1
4188: PPUSH
4189: LD_INT 1
4191: PPUSH
4192: LD_INT 0
4194: PPUSH
4195: LD_INT 0
4197: PPUSH
4198: LD_INT 0
4200: PPUSH
4201: LD_VAR 0 9
4205: PPUSH
4206: CALL 2852 0 6
// soldiers_created := soldiers_created + 1 ;
4210: LD_ADDR_LOC 4
4214: PUSH
4215: LD_LOC 4
4219: PUSH
4220: LD_INT 1
4222: PLUS
4223: ST_TO_ADDR
// end ;
4224: GO 4072
4226: POP
4227: POP
// x := start_def [ pos ] [ 1 ] ;
4228: LD_ADDR_VAR 0 4
4232: PUSH
4233: LD_EXP 39
4237: PUSH
4238: LD_VAR 0 3
4242: ARRAY
4243: PUSH
4244: LD_INT 1
4246: ARRAY
4247: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4248: LD_ADDR_VAR 0 5
4252: PUSH
4253: LD_EXP 39
4257: PUSH
4258: LD_VAR 0 3
4262: ARRAY
4263: PUSH
4264: LD_INT 2
4266: ARRAY
4267: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4268: LD_LOC 8
4272: PUSH
4273: LD_EXP 18
4277: MINUS
4278: PPUSH
4279: LD_INT 1
4281: PPUSH
4282: LD_VAR 0 4
4286: PPUSH
4287: LD_VAR 0 5
4291: PPUSH
4292: LD_INT 5
4294: PPUSH
4295: LD_INT 0
4297: PPUSH
4298: CALL 2852 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4302: LD_LOC 5
4306: PPUSH
4307: LD_INT 2
4309: PPUSH
4310: LD_VAR 0 4
4314: PPUSH
4315: LD_VAR 0 5
4319: PPUSH
4320: LD_INT 5
4322: PPUSH
4323: LD_INT 0
4325: PPUSH
4326: CALL 2852 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4330: LD_LOC 7
4334: PPUSH
4335: LD_INT 3
4337: PPUSH
4338: LD_VAR 0 4
4342: PPUSH
4343: LD_VAR 0 5
4347: PPUSH
4348: LD_INT 5
4350: PPUSH
4351: LD_INT 0
4353: PPUSH
4354: CALL 2852 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4358: LD_LOC 6
4362: PPUSH
4363: LD_INT 4
4365: PPUSH
4366: LD_VAR 0 4
4370: PPUSH
4371: LD_VAR 0 5
4375: PPUSH
4376: LD_INT 5
4378: PPUSH
4379: LD_INT 0
4381: PPUSH
4382: CALL 2852 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4386: LD_EXP 10
4390: PUSH
4391: LD_INT 20
4393: PPUSH
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 321
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: AND
4408: IFFALSE 4425
// SetTech ( tech_SibDet , side , state_researched ) ;
4410: LD_INT 20
4412: PPUSH
4413: LD_VAR 0 1
4417: PPUSH
4418: LD_INT 2
4420: PPUSH
4421: CALL_OW 322
// if def_siberite_bomb = 1 then
4425: LD_EXP 13
4429: PUSH
4430: LD_INT 1
4432: EQUAL
4433: IFFALSE 4467
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4435: LD_INT 25
4437: PPUSH
4438: LD_VAR 0 1
4442: PPUSH
4443: LD_INT 1
4445: PPUSH
4446: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4450: LD_INT 73
4452: PPUSH
4453: LD_VAR 0 1
4457: PPUSH
4458: LD_INT 1
4460: PPUSH
4461: CALL_OW 322
// end else
4465: GO 4497
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4467: LD_INT 25
4469: PPUSH
4470: LD_VAR 0 1
4474: PPUSH
4475: LD_INT 0
4477: PPUSH
4478: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4482: LD_INT 73
4484: PPUSH
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_INT 0
4492: PPUSH
4493: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4497: LD_INT 24
4499: PPUSH
4500: LD_VAR 0 1
4504: PPUSH
4505: LD_INT 0
4507: PPUSH
4508: CALL_OW 322
// global_defined := true ;
4512: LD_ADDR_LOC 3
4516: PUSH
4517: LD_INT 1
4519: ST_TO_ADDR
// end ;
4520: LD_VAR 0 2
4524: RET
// function prepare_sides ; var i ; begin
4525: LD_INT 0
4527: PPUSH
4528: PPUSH
// global_units := [ ] ;
4529: LD_ADDR_LOC 2
4533: PUSH
4534: EMPTY
4535: ST_TO_ADDR
// global_defined := false ;
4536: LD_ADDR_LOC 3
4540: PUSH
4541: LD_INT 0
4543: ST_TO_ADDR
// CountClassMembers ;
4544: CALL 4594 0 0
// for i := 1 to 8 do
4548: LD_ADDR_VAR 0 2
4552: PUSH
4553: DOUBLE
4554: LD_INT 1
4556: DEC
4557: ST_TO_ADDR
4558: LD_INT 8
4560: PUSH
4561: FOR_TO
4562: IFFALSE 4587
// if Side_Positions [ i ] then
4564: LD_EXP 34
4568: PUSH
4569: LD_VAR 0 2
4573: ARRAY
4574: IFFALSE 4585
// prepare_side ( i ) ;
4576: LD_VAR 0 2
4580: PPUSH
4581: CALL 3440 0 1
4585: GO 4561
4587: POP
4588: POP
// end ;
4589: LD_VAR 0 1
4593: RET
// function CountClassMembers ; var Mode ; begin
4594: LD_INT 0
4596: PPUSH
4597: PPUSH
// if No_Mechs then
4598: LD_EXP 15
4602: IFFALSE 4614
// Mode := 2 else
4604: LD_ADDR_VAR 0 2
4608: PUSH
4609: LD_INT 2
4611: ST_TO_ADDR
4612: GO 4622
// Mode := 1 ;
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: LD_INT 1
4621: ST_TO_ADDR
// neng := number_of_people ;
4622: LD_ADDR_LOC 5
4626: PUSH
4627: LD_EXP 19
4631: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4632: LD_ADDR_LOC 8
4636: PUSH
4637: LD_LOC 5
4641: PUSH
4642: LD_INT 4
4644: PUSH
4645: LD_INT 3
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_VAR 0 2
4656: ARRAY
4657: DIV
4658: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4659: LD_LOC 8
4663: PUSH
4664: LD_EXP 18
4668: LESS
4669: IFFALSE 4681
// nsol := number_of_breastworks ;
4671: LD_ADDR_LOC 8
4675: PUSH
4676: LD_EXP 18
4680: ST_TO_ADDR
// neng := neng - nsol ;
4681: LD_ADDR_LOC 5
4685: PUSH
4686: LD_LOC 5
4690: PUSH
4691: LD_LOC 8
4695: MINUS
4696: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4697: LD_ADDR_LOC 6
4701: PUSH
4702: LD_LOC 5
4706: PUSH
4707: LD_INT 3
4709: PUSH
4710: LD_INT 2
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PUSH
4717: LD_VAR 0 2
4721: ARRAY
4722: DIV
4723: ST_TO_ADDR
// if ( nsci < 1 ) then
4724: LD_LOC 6
4728: PUSH
4729: LD_INT 1
4731: LESS
4732: IFFALSE 4742
// nsci := 1 ;
4734: LD_ADDR_LOC 6
4738: PUSH
4739: LD_INT 1
4741: ST_TO_ADDR
// neng := neng - nsci ;
4742: LD_ADDR_LOC 5
4746: PUSH
4747: LD_LOC 5
4751: PUSH
4752: LD_LOC 6
4756: MINUS
4757: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4758: LD_ADDR_LOC 7
4762: PUSH
4763: LD_LOC 5
4767: PUSH
4768: LD_INT 2
4770: DIV
4771: PUSH
4772: LD_INT 0
4774: PUSH
4775: EMPTY
4776: LIST
4777: LIST
4778: PUSH
4779: LD_VAR 0 2
4783: ARRAY
4784: ST_TO_ADDR
// neng := neng - nmech ;
4785: LD_ADDR_LOC 5
4789: PUSH
4790: LD_LOC 5
4794: PUSH
4795: LD_LOC 7
4799: MINUS
4800: ST_TO_ADDR
// if ( neng < 1 ) then
4801: LD_LOC 5
4805: PUSH
4806: LD_INT 1
4808: LESS
4809: IFFALSE 4819
// neng := 1 ;
4811: LD_ADDR_LOC 5
4815: PUSH
4816: LD_INT 1
4818: ST_TO_ADDR
// end ;
4819: LD_VAR 0 1
4823: RET
// starting begin disable ( 98 ) ;
4824: LD_INT 98
4826: DISABLE_MARKED
// disable ( 99 ) ;
4827: LD_INT 99
4829: DISABLE_MARKED
// disable ( 400 ) ;
4830: LD_INT 400
4832: DISABLE_MARKED
// disable ( 401 ) ;
4833: LD_INT 401
4835: DISABLE_MARKED
// mp_selectmsg := true ;
4836: LD_ADDR_OWVAR 13
4840: PUSH
4841: LD_INT 1
4843: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4844: CALL 68 0 0
// init_map ;
4848: CALL 1237 0 0
// init_respawning ;
4852: CALL 13982 0 0
// set_shared_visions_and_alliances ;
4856: CALL 2564 0 0
// ResetFog ;
4860: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4864: LD_OWVAR 2
4868: PPUSH
4869: CALL_OW 520
// AnimateTrees ( true ) ;
4873: LD_INT 1
4875: PPUSH
4876: CALL_OW 573
// prepare_sides ;
4880: CALL 4525 0 0
// Init_Win_Condition ;
4884: CALL 7963 0 0
// ShowTimer ;
4888: CALL 7541 0 0
// music_nat := Side_Nations [ your_side ] ;
4892: LD_ADDR_OWVAR 71
4896: PUSH
4897: LD_EXP 35
4901: PUSH
4902: LD_OWVAR 2
4906: ARRAY
4907: ST_TO_ADDR
// if IAmSpec then
4908: CALL_OW 531
4912: IFFALSE 4936
// begin fogoff ( true ) ;
4914: LD_INT 1
4916: PPUSH
4917: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4921: LD_INT 130
4923: PPUSH
4924: LD_INT 100
4926: PPUSH
4927: CALL_OW 86
// enable ( 400 ) ;
4931: LD_INT 400
4933: ENABLE_MARKED
// end else
4934: GO 4982
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4936: LD_EXP 39
4940: PUSH
4941: LD_EXP 34
4945: PUSH
4946: LD_OWVAR 2
4950: ARRAY
4951: ARRAY
4952: PUSH
4953: LD_INT 1
4955: ARRAY
4956: PPUSH
4957: LD_EXP 39
4961: PUSH
4962: LD_EXP 34
4966: PUSH
4967: LD_OWVAR 2
4971: ARRAY
4972: ARRAY
4973: PUSH
4974: LD_INT 2
4976: ARRAY
4977: PPUSH
4978: CALL_OW 86
// end ; InitApeman ;
4982: CALL 6059 0 0
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
4986: LD_ADDR_EXP 55
4990: PUSH
4991: LD_INT 9
4993: PUSH
4994: LD_INT 10
4996: PUSH
4997: LD_INT 11
4999: PUSH
5000: LD_INT 12
5002: PUSH
5003: LD_INT 13
5005: PUSH
5006: LD_INT 14
5008: PUSH
5009: LD_INT 15
5011: PUSH
5012: LD_INT 16
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: ST_TO_ADDR
// BeginBuildUp ;
5025: CALL 14476 0 0
// end ;
5029: END
// every 0 0$1 do
5030: GO 5032
5032: DISABLE
// if ( def_siberite_bomb > 1 ) then
5033: LD_EXP 13
5037: PUSH
5038: LD_INT 1
5040: GREATER
5041: IFFALSE 5056
// begin wait ( siberite_bomb_Delay ) ;
5043: LD_EXP 29
5047: PPUSH
5048: CALL_OW 67
// EnableSibFiss ;
5052: CALL 5057 0 0
// end ;
5056: END
// function EnableSibFiss ; var i ; begin
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
// for i := 1 to 8 do
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: DOUBLE
5067: LD_INT 1
5069: DEC
5070: ST_TO_ADDR
5071: LD_INT 8
5073: PUSH
5074: FOR_TO
5075: IFFALSE 5121
// if Side_Positions [ i ] then
5077: LD_EXP 34
5081: PUSH
5082: LD_VAR 0 2
5086: ARRAY
5087: IFFALSE 5119
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5089: LD_INT 25
5091: PPUSH
5092: LD_VAR 0 2
5096: PPUSH
5097: LD_INT 1
5099: PPUSH
5100: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5104: LD_INT 73
5106: PPUSH
5107: LD_VAR 0 2
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: CALL_OW 322
// end ;
5119: GO 5074
5121: POP
5122: POP
// end ; end_of_file
5123: LD_VAR 0 1
5127: RET
// every 0 0$25 + 0 0$1.0 do
5128: GO 5130
5130: DISABLE
// begin if GetResourceArea ( Between1 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5131: LD_INT 18
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: CALL_OW 287
5141: PUSH
5142: LD_INT 200
5144: PUSH
5145: LD_EXP 23
5149: MINUS
5150: PUSH
5151: LD_INT 50
5153: DIVREAL
5154: PUSH
5155: LD_INT 5
5157: MUL
5158: LESS
5159: IFFALSE 5182
// CreateCratesArea ( Rand ( 3 , 4 ) , Between1 , true ) ;
5161: LD_INT 3
5163: PPUSH
5164: LD_INT 4
5166: PPUSH
5167: CALL_OW 12
5171: PPUSH
5172: LD_INT 18
5174: PPUSH
5175: LD_INT 1
5177: PPUSH
5178: CALL_OW 55
// if GetResourceArea ( Between2 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5182: LD_INT 19
5184: PPUSH
5185: LD_INT 1
5187: PPUSH
5188: CALL_OW 287
5192: PUSH
5193: LD_INT 200
5195: PUSH
5196: LD_EXP 23
5200: MINUS
5201: PUSH
5202: LD_INT 50
5204: DIVREAL
5205: PUSH
5206: LD_INT 5
5208: MUL
5209: LESS
5210: IFFALSE 5233
// CreateCratesArea ( Rand ( 3 , 4 ) , Between2 , true ) ;
5212: LD_INT 3
5214: PPUSH
5215: LD_INT 4
5217: PPUSH
5218: CALL_OW 12
5222: PPUSH
5223: LD_INT 19
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: CALL_OW 55
// if GetResourceArea ( Between3 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5233: LD_INT 20
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL_OW 287
5243: PUSH
5244: LD_INT 200
5246: PUSH
5247: LD_EXP 23
5251: MINUS
5252: PUSH
5253: LD_INT 50
5255: DIVREAL
5256: PUSH
5257: LD_INT 5
5259: MUL
5260: LESS
5261: IFFALSE 5284
// CreateCratesArea ( Rand ( 3 , 4 ) , Between3 , true ) ;
5263: LD_INT 3
5265: PPUSH
5266: LD_INT 4
5268: PPUSH
5269: CALL_OW 12
5273: PPUSH
5274: LD_INT 20
5276: PPUSH
5277: LD_INT 1
5279: PPUSH
5280: CALL_OW 55
// if GetResourceArea ( Between4 , mat_cans ) < ( ( 200 - shipments_density ) / 50 * 5 ) then
5284: LD_INT 21
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: CALL_OW 287
5294: PUSH
5295: LD_INT 200
5297: PUSH
5298: LD_EXP 23
5302: MINUS
5303: PUSH
5304: LD_INT 50
5306: DIVREAL
5307: PUSH
5308: LD_INT 5
5310: MUL
5311: LESS
5312: IFFALSE 5335
// CreateCratesArea ( Rand ( 3 , 4 ) , Between4 , true ) ;
5314: LD_INT 3
5316: PPUSH
5317: LD_INT 4
5319: PPUSH
5320: CALL_OW 12
5324: PPUSH
5325: LD_INT 21
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: CALL_OW 55
// if GetResourceArea ( Center1 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5335: LD_INT 22
5337: PPUSH
5338: LD_INT 1
5340: PPUSH
5341: CALL_OW 287
5345: PUSH
5346: LD_INT 200
5348: PUSH
5349: LD_EXP 23
5353: MINUS
5354: PUSH
5355: LD_INT 25
5357: DIVREAL
5358: PUSH
5359: LD_INT 5
5361: MUL
5362: LESS
5363: IFFALSE 5378
// CreateCratesArea ( 5 , Center1 , true ) ;
5365: LD_INT 5
5367: PPUSH
5368: LD_INT 22
5370: PPUSH
5371: LD_INT 1
5373: PPUSH
5374: CALL_OW 55
// if GetResourceArea ( Center2 , mat_cans ) < ( ( 200 - shipments_density ) / 25 * 5 ) then
5378: LD_INT 23
5380: PPUSH
5381: LD_INT 1
5383: PPUSH
5384: CALL_OW 287
5388: PUSH
5389: LD_INT 200
5391: PUSH
5392: LD_EXP 23
5396: MINUS
5397: PUSH
5398: LD_INT 25
5400: DIVREAL
5401: PUSH
5402: LD_INT 5
5404: MUL
5405: LESS
5406: IFFALSE 5421
// CreateCratesArea ( 5 , Center2 , true ) ;
5408: LD_INT 5
5410: PPUSH
5411: LD_INT 23
5413: PPUSH
5414: LD_INT 1
5416: PPUSH
5417: CALL_OW 55
// enable ;
5421: ENABLE
// end ;
5422: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5423: GO 5425
5425: DISABLE
5426: LD_INT 0
5428: PPUSH
5429: PPUSH
// begin case tick of 1 .. 1 1$0 :
5430: LD_OWVAR 1
5434: PUSH
5435: LD_INT 1
5437: DOUBLE
5438: GREATEREQUAL
5439: IFFALSE 5447
5441: LD_INT 2100
5443: DOUBLE
5444: LESSEQUAL
5445: IFTRUE 5449
5447: GO 5477
5449: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$15 , 0 0$30 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5450: LD_EXP 23
5454: PUSH
5455: LD_INT 100
5457: DIVREAL
5458: PUSH
5459: LD_INT 525
5461: PPUSH
5462: LD_INT 1050
5464: PPUSH
5465: CALL_OW 12
5469: MUL
5470: PPUSH
5471: CALL_OW 67
5475: GO 5779
5477: LD_INT 2100
5479: PUSH
5480: LD_INT 1
5482: PLUS
5483: DOUBLE
5484: GREATEREQUAL
5485: IFFALSE 5493
5487: LD_INT 10500
5489: DOUBLE
5490: LESSEQUAL
5491: IFTRUE 5495
5493: GO 5523
5495: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$30 , 0 0$50 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5496: LD_EXP 23
5500: PUSH
5501: LD_INT 100
5503: DIVREAL
5504: PUSH
5505: LD_INT 1050
5507: PPUSH
5508: LD_INT 1750
5510: PPUSH
5511: CALL_OW 12
5515: MUL
5516: PPUSH
5517: CALL_OW 67
5521: GO 5779
5523: LD_INT 10500
5525: PUSH
5526: LD_INT 1
5528: PLUS
5529: DOUBLE
5530: GREATEREQUAL
5531: IFFALSE 5539
5533: LD_INT 21000
5535: DOUBLE
5536: LESSEQUAL
5537: IFTRUE 5541
5539: GO 5569
5541: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$00 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5542: LD_EXP 23
5546: PUSH
5547: LD_INT 100
5549: DIVREAL
5550: PUSH
5551: LD_INT 1750
5553: PPUSH
5554: LD_INT 2100
5556: PPUSH
5557: CALL_OW 12
5561: MUL
5562: PPUSH
5563: CALL_OW 67
5567: GO 5779
5569: LD_INT 21000
5571: PUSH
5572: LD_INT 1
5574: PLUS
5575: DOUBLE
5576: GREATEREQUAL
5577: IFFALSE 5585
5579: LD_INT 42000
5581: DOUBLE
5582: LESSEQUAL
5583: IFTRUE 5587
5585: GO 5615
5587: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$00 , 1 1$05 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5588: LD_EXP 23
5592: PUSH
5593: LD_INT 100
5595: DIVREAL
5596: PUSH
5597: LD_INT 2100
5599: PPUSH
5600: LD_INT 2275
5602: PPUSH
5603: CALL_OW 12
5607: MUL
5608: PPUSH
5609: CALL_OW 67
5613: GO 5779
5615: LD_INT 42000
5617: PUSH
5618: LD_INT 1
5620: PLUS
5621: DOUBLE
5622: GREATEREQUAL
5623: IFFALSE 5631
5625: LD_INT 63000
5627: DOUBLE
5628: LESSEQUAL
5629: IFTRUE 5633
5631: GO 5661
5633: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$10 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5634: LD_EXP 23
5638: PUSH
5639: LD_INT 100
5641: DIVREAL
5642: PUSH
5643: LD_INT 2275
5645: PPUSH
5646: LD_INT 2450
5648: PPUSH
5649: CALL_OW 12
5653: MUL
5654: PPUSH
5655: CALL_OW 67
5659: GO 5779
5661: LD_INT 63000
5663: PUSH
5664: LD_INT 1
5666: PLUS
5667: DOUBLE
5668: GREATEREQUAL
5669: IFFALSE 5677
5671: LD_INT 105000
5673: DOUBLE
5674: LESSEQUAL
5675: IFTRUE 5679
5677: GO 5707
5679: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5680: LD_EXP 23
5684: PUSH
5685: LD_INT 100
5687: DIVREAL
5688: PUSH
5689: LD_INT 2450
5691: PPUSH
5692: LD_INT 2800
5694: PPUSH
5695: CALL_OW 12
5699: MUL
5700: PPUSH
5701: CALL_OW 67
5705: GO 5779
5707: LD_INT 105000
5709: PUSH
5710: LD_INT 1
5712: PLUS
5713: DOUBLE
5714: GREATEREQUAL
5715: IFFALSE 5723
5717: LD_INT 630000
5719: DOUBLE
5720: LESSEQUAL
5721: IFTRUE 5725
5723: GO 5753
5725: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$40 ) ) ; else
5726: LD_EXP 23
5730: PUSH
5731: LD_INT 100
5733: DIVREAL
5734: PUSH
5735: LD_INT 2800
5737: PPUSH
5738: LD_INT 3500
5740: PPUSH
5741: CALL_OW 12
5745: MUL
5746: PPUSH
5747: CALL_OW 67
5751: GO 5779
5753: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$40 , 1 1$50 ) ) ; end ;
5754: LD_EXP 23
5758: PUSH
5759: LD_INT 100
5761: DIVREAL
5762: PUSH
5763: LD_INT 3500
5765: PPUSH
5766: LD_INT 3850
5768: PPUSH
5769: CALL_OW 12
5773: MUL
5774: PPUSH
5775: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5779: LD_ADDR_VAR 0 2
5783: PUSH
5784: LD_INT 3
5786: PPUSH
5787: LD_INT 5
5789: PPUSH
5790: CALL_OW 12
5794: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5795: LD_ADDR_VAR 0 1
5799: PUSH
5800: LD_EXP 34
5804: PUSH
5805: LD_INT 0
5807: PUSH
5808: EMPTY
5809: LIST
5810: DIFF
5811: PUSH
5812: FOR_IN
5813: IFFALSE 5862
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5815: LD_VAR 0 2
5819: PPUSH
5820: LD_EXP 39
5824: PUSH
5825: LD_VAR 0 1
5829: ARRAY
5830: PUSH
5831: LD_INT 1
5833: ARRAY
5834: PPUSH
5835: LD_EXP 39
5839: PUSH
5840: LD_VAR 0 1
5844: ARRAY
5845: PUSH
5846: LD_INT 2
5848: ARRAY
5849: PPUSH
5850: LD_INT 20
5852: PPUSH
5853: LD_INT 1
5855: PPUSH
5856: CALL_OW 56
5860: GO 5812
5862: POP
5863: POP
// enable ;
5864: ENABLE
// end ; end_of_file
5865: PPOPN 2
5867: END
// every 20 20$00 trigger apemanNumber do
5868: LD_EXP 46
5872: IFFALSE 5905
5874: GO 5876
5876: DISABLE
// begin enable ;
5877: ENABLE
// if apeLevel >= 8 then
5878: LD_EXP 51
5882: PUSH
5883: LD_INT 8
5885: GREATEREQUAL
5886: IFFALSE 5891
// disable else
5888: DISABLE
5889: GO 5905
// apeLevel := apeLevel + 1 ;
5891: LD_ADDR_EXP 51
5895: PUSH
5896: LD_EXP 51
5900: PUSH
5901: LD_INT 1
5903: PLUS
5904: ST_TO_ADDR
// end ;
5905: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5906: LD_EXP 46
5910: PUSH
5911: LD_EXP 47
5915: LESS
5916: IFFALSE 6056
5918: GO 5920
5920: DISABLE
5921: LD_INT 0
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
// begin enable ;
5927: ENABLE
// for i := 1 to apemanPos do
5928: LD_ADDR_VAR 0 1
5932: PUSH
5933: DOUBLE
5934: LD_INT 1
5936: DEC
5937: ST_TO_ADDR
5938: LD_EXP 49
5942: PUSH
5943: FOR_TO
5944: IFFALSE 6054
// begin if apemanPlayerCount [ i ] then
5946: LD_EXP 50
5950: PUSH
5951: LD_VAR 0 1
5955: ARRAY
5956: IFFALSE 6052
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5958: LD_EXP 50
5962: PUSH
5963: LD_VAR 0 1
5967: ARRAY
5968: PUSH
5969: LD_EXP 49
5973: PUSH
5974: LD_VAR 0 1
5978: ARRAY
5979: GREATER
5980: IFFALSE 6052
// begin ape := PrepareApeman ;
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: CALL 6575 0 0
5991: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5992: LD_VAR 0 2
5996: PPUSH
5997: LD_EXP 52
6001: PUSH
6002: LD_VAR 0 1
6006: ARRAY
6007: PPUSH
6008: LD_INT 0
6010: PPUSH
6011: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6015: LD_ADDR_EXP 49
6019: PUSH
6020: LD_EXP 49
6024: PPUSH
6025: LD_VAR 0 1
6029: PPUSH
6030: LD_EXP 49
6034: PUSH
6035: LD_VAR 0 1
6039: ARRAY
6040: PUSH
6041: LD_VAR 0 2
6045: UNION
6046: PPUSH
6047: CALL_OW 1
6051: ST_TO_ADDR
// end ; end ; end ;
6052: GO 5943
6054: POP
6055: POP
// end ;
6056: PPOPN 4
6058: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6059: LD_INT 0
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
6065: PPUSH
6066: PPUSH
6067: PPUSH
// playersAmount := 0 ;
6068: LD_ADDR_VAR 0 3
6072: PUSH
6073: LD_INT 0
6075: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6076: LD_ADDR_VAR 0 7
6080: PUSH
6081: LD_INT 1
6083: PUSH
6084: LD_INT 2
6086: PUSH
6087: LD_INT 3
6089: PUSH
6090: LD_INT 4
6092: PUSH
6093: LD_INT 5
6095: PUSH
6096: LD_INT 6
6098: PUSH
6099: LD_INT 7
6101: PUSH
6102: LD_INT 8
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6115: LD_ADDR_EXP 52
6119: PUSH
6120: LD_INT 0
6122: PUSH
6123: LD_INT 0
6125: PUSH
6126: LD_INT 0
6128: PUSH
6129: LD_INT 0
6131: PUSH
6132: LD_INT 0
6134: PUSH
6135: LD_INT 0
6137: PUSH
6138: LD_INT 0
6140: PUSH
6141: LD_INT 0
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: ST_TO_ADDR
// for j = 1 to Side_Positions do
6154: LD_ADDR_VAR 0 4
6158: PUSH
6159: DOUBLE
6160: LD_INT 1
6162: DEC
6163: ST_TO_ADDR
6164: LD_EXP 34
6168: PUSH
6169: FOR_TO
6170: IFFALSE 6237
// if Side_Positions [ j ] then
6172: LD_EXP 34
6176: PUSH
6177: LD_VAR 0 4
6181: ARRAY
6182: IFFALSE 6235
// begin playersAmount := playersAmount + 1 ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_VAR 0 3
6193: PUSH
6194: LD_INT 1
6196: PLUS
6197: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6198: LD_ADDR_EXP 52
6202: PUSH
6203: LD_EXP 52
6207: PPUSH
6208: LD_VAR 0 4
6212: PPUSH
6213: LD_VAR 0 7
6217: PUSH
6218: LD_EXP 34
6222: PUSH
6223: LD_VAR 0 4
6227: ARRAY
6228: ARRAY
6229: PPUSH
6230: CALL_OW 1
6234: ST_TO_ADDR
// end ;
6235: GO 6169
6237: POP
6238: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6239: LD_ADDR_EXP 48
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_EXP 25
6251: MUL
6252: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6253: LD_ADDR_EXP 46
6257: PUSH
6258: LD_VAR 0 3
6262: PUSH
6263: LD_EXP 48
6267: MUL
6268: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6269: LD_ADDR_EXP 47
6273: PUSH
6274: LD_EXP 46
6278: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6279: LD_ADDR_EXP 49
6283: PUSH
6284: LD_INT 0
6286: PUSH
6287: LD_INT 0
6289: PUSH
6290: LD_INT 0
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: LD_INT 0
6298: PUSH
6299: LD_INT 0
6301: PUSH
6302: LD_INT 0
6304: PUSH
6305: LD_INT 0
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6318: LD_ADDR_EXP 50
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: LD_INT 0
6328: PUSH
6329: LD_INT 0
6331: PUSH
6332: LD_INT 0
6334: PUSH
6335: LD_INT 0
6337: PUSH
6338: LD_INT 0
6340: PUSH
6341: LD_INT 0
6343: PUSH
6344: LD_INT 0
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
// apeLevel := 1 ;
6357: LD_ADDR_EXP 51
6361: PUSH
6362: LD_INT 1
6364: ST_TO_ADDR
// if not apemanNumber then
6365: LD_EXP 46
6369: NOT
6370: IFFALSE 6374
// exit ;
6372: GO 6570
// for i := 1 to apemanPerPlayer do
6374: LD_ADDR_VAR 0 2
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_EXP 48
6388: PUSH
6389: FOR_TO
6390: IFFALSE 6568
// begin for j := 1 to Side_Positions do
6392: LD_ADDR_VAR 0 4
6396: PUSH
6397: DOUBLE
6398: LD_INT 1
6400: DEC
6401: ST_TO_ADDR
6402: LD_EXP 34
6406: PUSH
6407: FOR_TO
6408: IFFALSE 6564
// if Side_Positions [ j ] then
6410: LD_EXP 34
6414: PUSH
6415: LD_VAR 0 4
6419: ARRAY
6420: IFFALSE 6562
// begin pos := Side_Positions [ j ] ;
6422: LD_ADDR_VAR 0 6
6426: PUSH
6427: LD_EXP 34
6431: PUSH
6432: LD_VAR 0 4
6436: ARRAY
6437: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6438: LD_ADDR_EXP 50
6442: PUSH
6443: LD_EXP 50
6447: PPUSH
6448: LD_VAR 0 4
6452: PPUSH
6453: LD_EXP 50
6457: PUSH
6458: LD_VAR 0 4
6462: ARRAY
6463: PUSH
6464: LD_INT 1
6466: PLUS
6467: PPUSH
6468: CALL_OW 1
6472: ST_TO_ADDR
// ape := PrepareApeman ;
6473: LD_ADDR_VAR 0 5
6477: PUSH
6478: CALL 6575 0 0
6482: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6483: LD_ADDR_EXP 49
6487: PUSH
6488: LD_EXP 49
6492: PPUSH
6493: LD_VAR 0 4
6497: PPUSH
6498: LD_EXP 49
6502: PUSH
6503: LD_VAR 0 4
6507: ARRAY
6508: PPUSH
6509: LD_EXP 49
6513: PUSH
6514: LD_VAR 0 4
6518: ARRAY
6519: PUSH
6520: LD_INT 1
6522: PLUS
6523: PPUSH
6524: LD_VAR 0 5
6528: PPUSH
6529: CALL_OW 1
6533: PPUSH
6534: CALL_OW 1
6538: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6539: LD_VAR 0 5
6543: PPUSH
6544: LD_EXP 52
6548: PUSH
6549: LD_VAR 0 4
6553: ARRAY
6554: PPUSH
6555: LD_INT 0
6557: PPUSH
6558: CALL_OW 49
// end ;
6562: GO 6407
6564: POP
6565: POP
// end ;
6566: GO 6389
6568: POP
6569: POP
// end ;
6570: LD_VAR 0 1
6574: RET
// export function PrepareApeman ; var bonus ; begin
6575: LD_INT 0
6577: PPUSH
6578: PPUSH
// uc_side := 0 ;
6579: LD_ADDR_OWVAR 20
6583: PUSH
6584: LD_INT 0
6586: ST_TO_ADDR
// uc_nation := 0 ;
6587: LD_ADDR_OWVAR 21
6591: PUSH
6592: LD_INT 0
6594: ST_TO_ADDR
// InitHc ;
6595: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6599: LD_ADDR_VAR 0 2
6603: PUSH
6604: LD_INT 1
6606: NEG
6607: PUSH
6608: LD_INT 0
6610: PUSH
6611: LD_INT 1
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_OWVAR 1
6623: PUSH
6624: LD_INT 3
6626: MOD
6627: PUSH
6628: LD_INT 1
6630: PLUS
6631: ARRAY
6632: ST_TO_ADDR
// hc_class := class_apeman ;
6633: LD_ADDR_OWVAR 28
6637: PUSH
6638: LD_INT 12
6640: ST_TO_ADDR
// hc_gallery :=  ;
6641: LD_ADDR_OWVAR 33
6645: PUSH
6646: LD_STRING 
6648: ST_TO_ADDR
// hc_name :=  ;
6649: LD_ADDR_OWVAR 26
6653: PUSH
6654: LD_STRING 
6656: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6657: LD_ADDR_OWVAR 31
6661: PUSH
6662: LD_EXP 51
6666: PUSH
6667: LD_VAR 0 2
6671: PLUS
6672: PUSH
6673: LD_EXP 51
6677: PUSH
6678: LD_VAR 0 2
6682: PLUS
6683: PUSH
6684: LD_EXP 51
6688: PUSH
6689: LD_VAR 0 2
6693: PLUS
6694: PUSH
6695: LD_EXP 51
6699: PUSH
6700: LD_VAR 0 2
6704: PLUS
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6712: LD_ADDR_OWVAR 35
6716: PUSH
6717: LD_INT 10
6719: PUSH
6720: LD_VAR 0 2
6724: MUL
6725: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6726: LD_ADDR_OWVAR 29
6730: PUSH
6731: LD_INT 12
6733: PUSH
6734: LD_INT 10
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: ST_TO_ADDR
// result := CreateHuman ;
6741: LD_ADDR_VAR 0 1
6745: PUSH
6746: CALL_OW 44
6750: ST_TO_ADDR
// end ;
6751: LD_VAR 0 1
6755: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6756: LD_INT 0
6758: PPUSH
6759: PPUSH
6760: PPUSH
// if not ape then
6761: LD_VAR 0 1
6765: NOT
6766: IFFALSE 6770
// exit ;
6768: GO 6895
// side := GetSide ( ape ) ;
6770: LD_ADDR_VAR 0 3
6774: PUSH
6775: LD_VAR 0 1
6779: PPUSH
6780: CALL_OW 255
6784: ST_TO_ADDR
// if not side then
6785: LD_VAR 0 3
6789: NOT
6790: IFFALSE 6844
// begin for i = 1 to apemanPos do
6792: LD_ADDR_VAR 0 4
6796: PUSH
6797: DOUBLE
6798: LD_INT 1
6800: DEC
6801: ST_TO_ADDR
6802: LD_EXP 49
6806: PUSH
6807: FOR_TO
6808: IFFALSE 6842
// if ape in apemanPos [ i ] then
6810: LD_VAR 0 1
6814: PUSH
6815: LD_EXP 49
6819: PUSH
6820: LD_VAR 0 4
6824: ARRAY
6825: IN
6826: IFFALSE 6840
// begin side := i ;
6828: LD_ADDR_VAR 0 3
6832: PUSH
6833: LD_VAR 0 4
6837: ST_TO_ADDR
// break ;
6838: GO 6842
// end ;
6840: GO 6807
6842: POP
6843: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6844: LD_ADDR_EXP 49
6848: PUSH
6849: LD_EXP 49
6853: PPUSH
6854: LD_VAR 0 3
6858: PPUSH
6859: LD_EXP 49
6863: PUSH
6864: LD_VAR 0 3
6868: ARRAY
6869: PUSH
6870: LD_VAR 0 1
6874: DIFF
6875: PPUSH
6876: CALL_OW 1
6880: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6881: LD_ADDR_EXP 46
6885: PUSH
6886: LD_EXP 46
6890: PUSH
6891: LD_INT 1
6893: MINUS
6894: ST_TO_ADDR
// end ; end_of_file
6895: LD_VAR 0 2
6899: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6900: LD_VAR 0 1
6904: PPUSH
6905: CALL_OW 266
6909: PUSH
6910: LD_INT 0
6912: PUSH
6913: LD_INT 1
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: IN
6920: IFFALSE 6945
// SetBName ( b , @ & GetSide ( b ) ) ;
6922: LD_VAR 0 1
6926: PPUSH
6927: LD_STRING @
6929: PUSH
6930: LD_VAR 0 1
6934: PPUSH
6935: CALL_OW 255
6939: STR
6940: PPUSH
6941: CALL_OW 500
// end ;
6945: PPOPN 2
6947: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6948: LD_VAR 0 1
6952: PPUSH
6953: CALL_OW 266
6957: PUSH
6958: LD_INT 0
6960: PUSH
6961: LD_INT 1
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: IN
6968: IFFALSE 6993
// SetBName ( b , @ & GetSide ( b ) ) ;
6970: LD_VAR 0 1
6974: PPUSH
6975: LD_STRING @
6977: PUSH
6978: LD_VAR 0 1
6982: PPUSH
6983: CALL_OW 255
6987: STR
6988: PPUSH
6989: CALL_OW 500
// end ;
6993: PPOPN 3
6995: END
// on VehicleConstructed ( veh , fac ) do var side ;
6996: LD_INT 0
6998: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 263
7008: PUSH
7009: LD_INT 5
7011: EQUAL
7012: IFFALSE 7154
// begin side := GetSide ( veh ) ;
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: CALL_OW 255
7028: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7029: LD_ADDR_EXP 49
7033: PUSH
7034: LD_EXP 49
7038: PPUSH
7039: LD_VAR 0 3
7043: PPUSH
7044: LD_EXP 49
7048: PUSH
7049: LD_VAR 0 3
7053: ARRAY
7054: PPUSH
7055: LD_INT 52
7057: PUSH
7058: EMPTY
7059: LIST
7060: PPUSH
7061: CALL_OW 72
7065: PUSH
7066: LD_INT 22
7068: PUSH
7069: LD_VAR 0 3
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: LD_INT 33
7083: PUSH
7084: LD_INT 5
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 25
7093: PUSH
7094: LD_INT 12
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 25
7103: PUSH
7104: LD_INT 15
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 16
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 25
7123: PUSH
7124: LD_INT 17
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PPUSH
7143: CALL_OW 69
7147: UNION
7148: PPUSH
7149: CALL_OW 1
7153: ST_TO_ADDR
// end ; end ;
7154: PPOPN 3
7156: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7157: LD_INT 0
7159: PPUSH
7160: PPUSH
7161: PPUSH
7162: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7163: LD_VAR 0 1
7167: PPUSH
7168: CALL_OW 257
7172: PUSH
7173: LD_INT 12
7175: PUSH
7176: LD_INT 15
7178: PUSH
7179: LD_INT 17
7181: PUSH
7182: LD_INT 16
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: IN
7191: PUSH
7192: LD_VAR 0 1
7196: PPUSH
7197: CALL_OW 263
7201: PUSH
7202: LD_INT 5
7204: EQUAL
7205: OR
7206: IFFALSE 7217
// ApeKilled ( j ) ;
7208: LD_VAR 0 1
7212: PPUSH
7213: CALL 6756 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7217: LD_VAR 0 1
7221: PPUSH
7222: CALL_OW 266
7226: PUSH
7227: LD_INT 0
7229: PUSH
7230: LD_INT 1
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: IN
7237: IFFALSE 7319
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7239: LD_ADDR_VAR 0 4
7243: PUSH
7244: LD_EXP 34
7248: PUSH
7249: LD_VAR 0 1
7253: PPUSH
7254: CALL_OW 255
7258: ARRAY
7259: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7260: LD_ADDR_VAR 0 2
7264: PUSH
7265: LD_EXP 39
7269: PUSH
7270: LD_VAR 0 4
7274: ARRAY
7275: PUSH
7276: LD_INT 1
7278: ARRAY
7279: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7280: LD_ADDR_VAR 0 3
7284: PUSH
7285: LD_EXP 39
7289: PUSH
7290: LD_VAR 0 4
7294: ARRAY
7295: PUSH
7296: LD_INT 2
7298: ARRAY
7299: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7300: LD_VAR 0 2
7304: PPUSH
7305: LD_VAR 0 3
7309: PPUSH
7310: CALL_OW 420
7314: PPUSH
7315: CALL_OW 419
// end ; end ;
7319: PPOPN 5
7321: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7322: LD_VAR 0 1
7326: PPUSH
7327: LD_VAR 0 2
7331: PPUSH
7332: LD_VAR 0 3
7336: PPUSH
7337: LD_OWVAR 2
7341: PPUSH
7342: CALL 7724 0 4
7346: PPOPN 3
7348: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7349: LD_INT 0
7351: PPUSH
7352: PPUSH
// for un in battle_flags_id do
7353: LD_ADDR_VAR 0 2
7357: PUSH
7358: LD_EXP 44
7362: PUSH
7363: FOR_IN
7364: IFFALSE 7439
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7366: LD_VAR 0 2
7370: PPUSH
7371: LD_INT 1
7373: PUSH
7374: LD_LOC 9
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: PUSH
7383: LD_INT 2
7385: PUSH
7386: LD_LOC 9
7390: PUSH
7391: LD_INT 2
7393: DIV
7394: PUSH
7395: EMPTY
7396: LIST
7397: LIST
7398: PUSH
7399: LD_INT 3
7401: PUSH
7402: LD_LOC 9
7406: PUSH
7407: LD_INT 5
7409: DIV
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 20
7417: PUSH
7418: LD_LOC 9
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: PPUSH
7433: CALL_OW 423
7437: GO 7363
7439: POP
7440: POP
// end ;
7441: LD_VAR 0 1
7445: RET
// every 1 do var un ;
7446: GO 7448
7448: DISABLE
7449: LD_INT 0
7451: PPUSH
// begin if not def_morale_flags then
7452: LD_EXP 9
7456: NOT
7457: IFFALSE 7461
// exit ;
7459: GO 7538
// if not morale_decreasing_time then
7461: LD_EXP 24
7465: NOT
7466: IFFALSE 7470
// exit ;
7468: GO 7538
// strength = 100 ;
7470: LD_ADDR_LOC 9
7474: PUSH
7475: LD_INT 100
7477: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7478: LD_EXP 24
7482: PPUSH
7483: CALL_OW 67
// strength := strength - 1 ;
7487: LD_ADDR_LOC 9
7491: PUSH
7492: LD_LOC 9
7496: PUSH
7497: LD_INT 1
7499: MINUS
7500: ST_TO_ADDR
// Update_Flags ;
7501: CALL 7349 0 0
// until not strength ;
7505: LD_LOC 9
7509: NOT
7510: IFFALSE 7478
// for un in battle_flags_id do
7512: LD_ADDR_VAR 0 1
7516: PUSH
7517: LD_EXP 44
7521: PUSH
7522: FOR_IN
7523: IFFALSE 7536
// KillBattleFlag ( un ) ;
7525: LD_VAR 0 1
7529: PPUSH
7530: CALL_OW 419
7534: GO 7522
7536: POP
7537: POP
// end ; end_of_file
7538: PPOPN 1
7540: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7541: LD_INT 0
7543: PPUSH
7544: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7545: LD_ADDR_VAR 0 2
7549: PUSH
7550: LD_STRING #Multi1x1-Time
7552: PUSH
7553: LD_OWVAR 1
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: ST_TO_ADDR
// if WaitServerStrings then
7562: LD_EXP 54
7566: IFFALSE 7584
// AllStrings = AllStrings ^ WaitServerStrings ;
7568: LD_ADDR_VAR 0 2
7572: PUSH
7573: LD_VAR 0 2
7577: PUSH
7578: LD_EXP 54
7582: ADD
7583: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7584: LD_INT 0
7586: PUSH
7587: LD_EXP 29
7591: PUSH
7592: LD_OWVAR 1
7596: MINUS
7597: LESSEQUAL
7598: IFFALSE 7629
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7600: LD_ADDR_VAR 0 2
7604: PUSH
7605: LD_VAR 0 2
7609: PUSH
7610: LD_STRING #allowedsibbomb
7612: PUSH
7613: LD_EXP 29
7617: PUSH
7618: LD_OWVAR 1
7622: MINUS
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: ADD
7628: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7629: LD_INT 0
7631: PUSH
7632: LD_EXP 57
7636: PUSH
7637: LD_OWVAR 1
7641: MINUS
7642: LESSEQUAL
7643: IFFALSE 7674
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7645: LD_ADDR_VAR 0 2
7649: PUSH
7650: LD_VAR 0 2
7654: PUSH
7655: LD_STRING #builduptime
7657: PUSH
7658: LD_EXP 57
7662: PUSH
7663: LD_OWVAR 1
7667: MINUS
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: ADD
7673: ST_TO_ADDR
// if ( ExtraStrings ) then
7674: LD_EXP 53
7678: IFFALSE 7700
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7680: LD_ADDR_VAR 0 2
7684: PUSH
7685: LD_VAR 0 2
7689: PUSH
7690: LD_STRING 
7692: ADD
7693: PUSH
7694: LD_EXP 53
7698: ADD
7699: ST_TO_ADDR
// Display_Strings := AllStrings ;
7700: LD_ADDR_OWVAR 47
7704: PUSH
7705: LD_VAR 0 2
7709: ST_TO_ADDR
// end ;
7710: LD_VAR 0 1
7714: RET
// every 0 0$1 do
7715: GO 7717
7717: DISABLE
// begin ShowTimer ;
7718: CALL 7541 0 0
// enable ;
7722: ENABLE
// end ; end_of_file
7723: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7724: LD_INT 0
7726: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7727: LD_VAR 0 1
7731: PPUSH
7732: CALL_OW 255
7736: PUSH
7737: LD_VAR 0 4
7741: EQUAL
7742: IFFALSE 7761
// begin SetAchievement ( ACH_RAD ) ;
7744: LD_STRING ACH_RAD
7746: PPUSH
7747: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7751: LD_STRING ACH_NL
7753: PPUSH
7754: LD_INT 1
7756: PPUSH
7757: CALL_OW 564
// end end ;
7761: LD_VAR 0 5
7765: RET
// export function SA_Win ( side ) ; begin
7766: LD_INT 0
7768: PPUSH
// case side of 1 :
7769: LD_VAR 0 1
7773: PUSH
7774: LD_INT 1
7776: DOUBLE
7777: EQUAL
7778: IFTRUE 7782
7780: GO 7795
7782: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7783: LD_STRING ACH_AH
7785: PPUSH
7786: LD_INT 1
7788: PPUSH
7789: CALL_OW 564
7793: GO 7958
7795: LD_INT 2
7797: DOUBLE
7798: EQUAL
7799: IFTRUE 7803
7801: GO 7816
7803: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7804: LD_STRING ACH_E
7806: PPUSH
7807: LD_INT 1
7809: PPUSH
7810: CALL_OW 564
7814: GO 7958
7816: LD_INT 3
7818: DOUBLE
7819: EQUAL
7820: IFTRUE 7824
7822: GO 7837
7824: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7825: LD_STRING ACH_OOL
7827: PPUSH
7828: LD_INT 1
7830: PPUSH
7831: CALL_OW 564
7835: GO 7958
7837: LD_INT 1
7839: PUSH
7840: LD_INT 2
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: DOUBLE
7847: EQUAL
7848: IFTRUE 7852
7850: GO 7877
7852: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7853: LD_STRING ACH_AH
7855: PPUSH
7856: LD_REAL  5.00000000000000E-0001
7859: PPUSH
7860: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7864: LD_STRING ACH_E
7866: PPUSH
7867: LD_REAL  5.00000000000000E-0001
7870: PPUSH
7871: CALL_OW 564
// end ; [ 2 , 3 ] :
7875: GO 7958
7877: LD_INT 2
7879: PUSH
7880: LD_INT 3
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: DOUBLE
7887: EQUAL
7888: IFTRUE 7892
7890: GO 7917
7892: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7893: LD_STRING ACH_OOL
7895: PPUSH
7896: LD_REAL  5.00000000000000E-0001
7899: PPUSH
7900: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7904: LD_STRING ACH_E
7906: PPUSH
7907: LD_REAL  5.00000000000000E-0001
7910: PPUSH
7911: CALL_OW 564
// end ; [ 3 , 1 ] :
7915: GO 7958
7917: LD_INT 3
7919: PUSH
7920: LD_INT 1
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7957
7932: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7933: LD_STRING ACH_AH
7935: PPUSH
7936: LD_REAL  5.00000000000000E-0001
7939: PPUSH
7940: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7944: LD_STRING ACH_OOL
7946: PPUSH
7947: LD_REAL  5.00000000000000E-0001
7950: PPUSH
7951: CALL_OW 564
// end ; end ;
7955: GO 7958
7957: POP
// end ; end_of_file
7958: LD_VAR 0 2
7962: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7963: LD_INT 0
7965: PPUSH
7966: PPUSH
// enable ( 98 ) ;
7967: LD_INT 98
7969: ENABLE_MARKED
// GameEnded = false ;
7970: LD_ADDR_LOC 15
7974: PUSH
7975: LD_INT 0
7977: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7978: LD_ADDR_LOC 14
7982: PUSH
7983: LD_INT 0
7985: PUSH
7986: LD_INT 0
7988: PUSH
7989: LD_INT 0
7991: PUSH
7992: LD_INT 0
7994: PUSH
7995: LD_INT 0
7997: PUSH
7998: LD_INT 0
8000: PUSH
8001: LD_INT 0
8003: PUSH
8004: LD_INT 0
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: ST_TO_ADDR
// unfoged = false ;
8017: LD_ADDR_LOC 16
8021: PUSH
8022: LD_INT 0
8024: ST_TO_ADDR
// defeated_specs := [ ] ;
8025: LD_ADDR_LOC 17
8029: PUSH
8030: EMPTY
8031: ST_TO_ADDR
// for i = 1 to side_positions do
8032: LD_ADDR_VAR 0 2
8036: PUSH
8037: DOUBLE
8038: LD_INT 1
8040: DEC
8041: ST_TO_ADDR
8042: LD_EXP 34
8046: PUSH
8047: FOR_TO
8048: IFFALSE 8088
// if not side_positions [ i ] then
8050: LD_EXP 34
8054: PUSH
8055: LD_VAR 0 2
8059: ARRAY
8060: NOT
8061: IFFALSE 8086
// defeated = replace ( defeated , i , true ) ;
8063: LD_ADDR_LOC 14
8067: PUSH
8068: LD_LOC 14
8072: PPUSH
8073: LD_VAR 0 2
8077: PPUSH
8078: LD_INT 1
8080: PPUSH
8081: CALL_OW 1
8085: ST_TO_ADDR
8086: GO 8047
8088: POP
8089: POP
// end ;
8090: LD_VAR 0 1
8094: RET
// function CanWinLoose ; begin
8095: LD_INT 0
8097: PPUSH
// Result := true ;
8098: LD_ADDR_VAR 0 1
8102: PUSH
8103: LD_INT 1
8105: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8106: CALL_OW 518
8110: PUSH
8111: CALL_OW 519
8115: PUSH
8116: LD_INT 0
8118: GREATER
8119: AND
8120: IFFALSE 8130
// Result := false ;
8122: LD_ADDR_VAR 0 1
8126: PUSH
8127: LD_INT 0
8129: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8130: CALL_OW 531
8134: PUSH
8135: CALL_OW 519
8139: PUSH
8140: LD_INT 1
8142: GREATER
8143: AND
8144: IFFALSE 8154
// Result := false ;
8146: LD_ADDR_VAR 0 1
8150: PUSH
8151: LD_INT 0
8153: ST_TO_ADDR
// end ;
8154: LD_VAR 0 1
8158: RET
// export function HasPower ( i ) ; var k , h ; begin
8159: LD_INT 0
8161: PPUSH
8162: PPUSH
8163: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
8164: LD_VAR 0 1
8168: PPUSH
8169: CALL_OW 108
8173: NOT
8174: PUSH
8175: LD_EXP 33
8179: PUSH
8180: LD_VAR 0 1
8184: ARRAY
8185: NOT
8186: AND
8187: PUSH
8188: LD_OWVAR 4
8192: AND
8193: IFFALSE 8205
// begin result = false ;
8195: LD_ADDR_VAR 0 2
8199: PUSH
8200: LD_INT 0
8202: ST_TO_ADDR
// end else
8203: GO 8500
// case def_win_rules of 0 :
8205: LD_EXP 30
8209: PUSH
8210: LD_INT 0
8212: DOUBLE
8213: EQUAL
8214: IFTRUE 8218
8216: GO 8381
8218: POP
// if def_people_respawning then
8219: LD_EXP 11
8223: IFFALSE 8314
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
8225: LD_ADDR_VAR 0 2
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_VAR 0 1
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: LD_INT 2
8244: PUSH
8245: LD_INT 21
8247: PUSH
8248: LD_INT 1
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: LD_INT 33
8257: PUSH
8258: LD_INT 3
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_INT 33
8267: PUSH
8268: LD_INT 5
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: LD_INT 30
8277: PUSH
8278: LD_INT 0
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: LD_INT 30
8287: PUSH
8288: LD_INT 1
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PPUSH
8307: CALL_OW 69
8311: ST_TO_ADDR
8312: GO 8379
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8314: LD_ADDR_VAR 0 2
8318: PUSH
8319: LD_INT 22
8321: PUSH
8322: LD_VAR 0 1
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: LD_INT 2
8333: PUSH
8334: LD_INT 21
8336: PUSH
8337: LD_INT 1
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: PUSH
8344: LD_INT 33
8346: PUSH
8347: LD_INT 3
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 33
8356: PUSH
8357: LD_INT 5
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PPUSH
8374: CALL_OW 69
8378: ST_TO_ADDR
8379: GO 8500
8381: LD_INT 1
8383: DOUBLE
8384: EQUAL
8385: IFTRUE 8389
8387: GO 8428
8389: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8390: LD_ADDR_VAR 0 2
8394: PUSH
8395: LD_INT 22
8397: PUSH
8398: LD_VAR 0 1
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 21
8409: PUSH
8410: LD_INT 1
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PPUSH
8421: CALL_OW 69
8425: ST_TO_ADDR
8426: GO 8500
8428: LD_INT 2
8430: DOUBLE
8431: EQUAL
8432: IFTRUE 8436
8434: GO 8499
8436: POP
// begin h = false ;
8437: LD_ADDR_VAR 0 4
8441: PUSH
8442: LD_INT 0
8444: ST_TO_ADDR
// for k in heroes [ i ] do
8445: LD_ADDR_VAR 0 3
8449: PUSH
8450: LD_EXP 45
8454: PUSH
8455: LD_VAR 0 1
8459: ARRAY
8460: PUSH
8461: FOR_IN
8462: IFFALSE 8485
// if IsLive ( k ) then
8464: LD_VAR 0 3
8468: PPUSH
8469: CALL_OW 300
8473: IFFALSE 8483
// h = true ;
8475: LD_ADDR_VAR 0 4
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
8483: GO 8461
8485: POP
8486: POP
// Result := h ;
8487: LD_ADDR_VAR 0 2
8491: PUSH
8492: LD_VAR 0 4
8496: ST_TO_ADDR
// end ; end ;
8497: GO 8500
8499: POP
// end ;
8500: LD_VAR 0 2
8504: RET
// function AlliedSides ( i , j ) ; begin
8505: LD_INT 0
8507: PPUSH
// Result := false ;
8508: LD_ADDR_VAR 0 3
8512: PUSH
8513: LD_INT 0
8515: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8516: LD_VAR 0 1
8520: PPUSH
8521: LD_VAR 0 2
8525: PPUSH
8526: CALL_OW 81
8530: PUSH
8531: LD_INT 1
8533: EQUAL
8534: PUSH
8535: LD_VAR 0 2
8539: PPUSH
8540: LD_VAR 0 1
8544: PPUSH
8545: CALL_OW 81
8549: PUSH
8550: LD_INT 1
8552: EQUAL
8553: AND
8554: PUSH
8555: LD_VAR 0 1
8559: PPUSH
8560: CALL_OW 83
8564: AND
8565: PUSH
8566: LD_VAR 0 2
8570: PPUSH
8571: CALL_OW 83
8575: AND
8576: IFFALSE 8586
// Result := true ;
8578: LD_ADDR_VAR 0 3
8582: PUSH
8583: LD_INT 1
8585: ST_TO_ADDR
// end ;
8586: LD_VAR 0 3
8590: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8591: CALL 8095 0 0
8595: PUSH
8596: LD_LOC 15
8600: NOT
8601: AND
8602: IFFALSE 8618
8604: GO 8606
8606: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8607: LD_ADDR_EXP 54
8611: PUSH
8612: LD_STRING #Player-Ended
8614: PUSH
8615: EMPTY
8616: LIST
8617: ST_TO_ADDR
8618: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8619: CALL 8095 0 0
8623: PUSH
8624: LD_LOC 15
8628: AND
8629: IFFALSE 8638
8631: GO 8633
8633: DISABLE
// YouLostInMultiplayer ;
8634: CALL_OW 107
8638: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8639: CALL 8095 0 0
8643: NOT
8644: PUSH
8645: CALL_OW 531
8649: NOT
8650: AND
8651: IFFALSE 8667
8653: GO 8655
8655: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8656: LD_ADDR_EXP 54
8660: PUSH
8661: LD_STRING #server-wait
8663: PUSH
8664: EMPTY
8665: LIST
8666: ST_TO_ADDR
8667: END
// every 100 trigger IAmSpec do
8668: CALL_OW 531
8672: IFFALSE 8688
8674: GO 8676
8676: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8677: LD_ADDR_EXP 54
8681: PUSH
8682: LD_STRING #Player-IAmSpec
8684: PUSH
8685: EMPTY
8686: LIST
8687: ST_TO_ADDR
8688: END
// every 100 trigger GameEnded and IAmSpec do
8689: LD_LOC 15
8693: PUSH
8694: CALL_OW 531
8698: AND
8699: IFFALSE 8708
8701: GO 8703
8703: DISABLE
// YouLostInMultiplayer ;
8704: CALL_OW 107
8708: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8709: CALL 8095 0 0
8713: PUSH
8714: LD_LOC 15
8718: NOT
8719: AND
8720: IFFALSE 8736
8722: GO 8724
8724: DISABLE
// WaitServerStrings = [ $player-win ] ;
8725: LD_ADDR_EXP 54
8729: PUSH
8730: LD_STRING $player-win
8732: PUSH
8733: EMPTY
8734: LIST
8735: ST_TO_ADDR
8736: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8737: CALL 8095 0 0
8741: PUSH
8742: LD_LOC 15
8746: AND
8747: IFFALSE 8771
8749: GO 8751
8751: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8752: LD_EXP 35
8756: PUSH
8757: LD_OWVAR 7
8761: ARRAY
8762: PPUSH
8763: CALL 7766 0 1
// YouWinInMultiplayer ;
8767: CALL_OW 106
// end ;
8771: END
// every 100 trigger isEditor marked 401 do
8772: LD_OWVAR 84
8776: IFFALSE 8792
8778: GO 8780
8780: DISABLE
// Debug_Strings = [ You won ] ;
8781: LD_ADDR_OWVAR 48
8785: PUSH
8786: LD_STRING You won
8788: PUSH
8789: EMPTY
8790: LIST
8791: ST_TO_ADDR
8792: END
// every 100 trigger isEditor marked 400 do
8793: LD_OWVAR 84
8797: IFFALSE 8813
8799: GO 8801
8801: DISABLE
// Debug_Strings = [ You loss ] ;
8802: LD_ADDR_OWVAR 48
8806: PUSH
8807: LD_STRING You loss
8809: PUSH
8810: EMPTY
8811: LIST
8812: ST_TO_ADDR
8813: END
// every 100 marked 98 do var i , un ;
8814: GO 8816
8816: DISABLE
8817: LD_INT 0
8819: PPUSH
8820: PPUSH
// begin for i = 1 to side_positions do
8821: LD_ADDR_VAR 0 1
8825: PUSH
8826: DOUBLE
8827: LD_INT 1
8829: DEC
8830: ST_TO_ADDR
8831: LD_EXP 34
8835: PUSH
8836: FOR_TO
8837: IFFALSE 8924
// begin if side_positions [ i ] then
8839: LD_EXP 34
8843: PUSH
8844: LD_VAR 0 1
8848: ARRAY
8849: IFFALSE 8922
// if not HasPower ( i ) and not defeated [ i ] then
8851: LD_VAR 0 1
8855: PPUSH
8856: CALL 8159 0 1
8860: NOT
8861: PUSH
8862: LD_LOC 14
8866: PUSH
8867: LD_VAR 0 1
8871: ARRAY
8872: NOT
8873: AND
8874: IFFALSE 8922
// begin defeated = replace ( defeated , i , true ) ;
8876: LD_ADDR_LOC 14
8880: PUSH
8881: LD_LOC 14
8885: PPUSH
8886: LD_VAR 0 1
8890: PPUSH
8891: LD_INT 1
8893: PPUSH
8894: CALL_OW 1
8898: ST_TO_ADDR
// if i = mp_player_side then
8899: LD_VAR 0 1
8903: PUSH
8904: LD_OWVAR 7
8908: EQUAL
8909: IFFALSE 8922
// begin Multiplayer_Loose_Message ;
8911: CALL_OW 521
// SetPlayerSpectator ( ) ;
8915: CALL_OW 572
// enable ( 400 ) ;
8919: LD_INT 400
8921: ENABLE_MARKED
// end ; end ; end ;
8922: GO 8836
8924: POP
8925: POP
// DidGameEnd ;
8926: CALL 8941 0 0
// if not GameEnded then
8930: LD_LOC 15
8934: NOT
8935: IFFALSE 8938
// enable ;
8937: ENABLE
// end ;
8938: PPOPN 2
8940: END
// function DidGameEnd ; var i , k , enemy ; begin
8941: LD_INT 0
8943: PPUSH
8944: PPUSH
8945: PPUSH
8946: PPUSH
// enemy = [ ] ;
8947: LD_ADDR_VAR 0 4
8951: PUSH
8952: EMPTY
8953: ST_TO_ADDR
// for i = 1 to side_positions do
8954: LD_ADDR_VAR 0 2
8958: PUSH
8959: DOUBLE
8960: LD_INT 1
8962: DEC
8963: ST_TO_ADDR
8964: LD_EXP 34
8968: PUSH
8969: FOR_TO
8970: IFFALSE 9064
// if not defeated [ i ] then
8972: LD_LOC 14
8976: PUSH
8977: LD_VAR 0 2
8981: ARRAY
8982: NOT
8983: IFFALSE 9062
// for k = 1 to side_positions do
8985: LD_ADDR_VAR 0 3
8989: PUSH
8990: DOUBLE
8991: LD_INT 1
8993: DEC
8994: ST_TO_ADDR
8995: LD_EXP 34
8999: PUSH
9000: FOR_TO
9001: IFFALSE 9060
// if not defeated [ k ] then
9003: LD_LOC 14
9007: PUSH
9008: LD_VAR 0 3
9012: ARRAY
9013: NOT
9014: IFFALSE 9058
// if not AlliedSides ( i , k ) then
9016: LD_VAR 0 2
9020: PPUSH
9021: LD_VAR 0 3
9025: PPUSH
9026: CALL 8505 0 2
9030: NOT
9031: IFFALSE 9058
// enemy = enemy ^ [ i , k ] ;
9033: LD_ADDR_VAR 0 4
9037: PUSH
9038: LD_VAR 0 4
9042: PUSH
9043: LD_VAR 0 2
9047: PUSH
9048: LD_VAR 0 3
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: ADD
9057: ST_TO_ADDR
9058: GO 9000
9060: POP
9061: POP
9062: GO 8969
9064: POP
9065: POP
// if not enemy then
9066: LD_VAR 0 4
9070: NOT
9071: IFFALSE 9097
// begin GameEnded = true ;
9073: LD_ADDR_LOC 15
9077: PUSH
9078: LD_INT 1
9080: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
9081: LD_LOC 14
9085: PUSH
9086: LD_OWVAR 7
9090: ARRAY
9091: NOT
9092: IFFALSE 9097
// enable ( 401 ) ;
9094: LD_INT 401
9096: ENABLE_MARKED
// end ; end ;
9097: LD_VAR 0 1
9101: RET
// function unfog ; var k , friends ; begin
9102: LD_INT 0
9104: PPUSH
9105: PPUSH
9106: PPUSH
// for k = 1 to side_positions do
9107: LD_ADDR_VAR 0 2
9111: PUSH
9112: DOUBLE
9113: LD_INT 1
9115: DEC
9116: ST_TO_ADDR
9117: LD_EXP 34
9121: PUSH
9122: FOR_TO
9123: IFFALSE 9179
// if not defeated [ k ] then
9125: LD_LOC 14
9129: PUSH
9130: LD_VAR 0 2
9134: ARRAY
9135: NOT
9136: IFFALSE 9177
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
9138: LD_OWVAR 7
9142: PPUSH
9143: LD_VAR 0 2
9147: PPUSH
9148: CALL_OW 81
9152: PUSH
9153: LD_INT 1
9155: PUSH
9156: EMPTY
9157: LIST
9158: IN
9159: IFFALSE 9177
// friends = friends ^ k ;
9161: LD_ADDR_VAR 0 3
9165: PUSH
9166: LD_VAR 0 3
9170: PUSH
9171: LD_VAR 0 2
9175: ADD
9176: ST_TO_ADDR
9177: GO 9122
9179: POP
9180: POP
// if not friends then
9181: LD_VAR 0 3
9185: NOT
9186: IFFALSE 9200
// begin SetPlayerSpectator ( ) ;
9188: CALL_OW 572
// unfoged = true ;
9192: LD_ADDR_LOC 16
9196: PUSH
9197: LD_INT 1
9199: ST_TO_ADDR
// end ; end ;
9200: LD_VAR 0 1
9204: RET
// export function MakeGameEnd ; begin
9205: LD_INT 0
9207: PPUSH
// SetPlayerSpectator ( ) ;
9208: CALL_OW 572
// unfoged = true ;
9212: LD_ADDR_LOC 16
9216: PUSH
9217: LD_INT 1
9219: ST_TO_ADDR
// wait ( 0 0$5 ) ;
9220: LD_INT 175
9222: PPUSH
9223: CALL_OW 67
// GameEnded = true ;
9227: LD_ADDR_LOC 15
9231: PUSH
9232: LD_INT 1
9234: ST_TO_ADDR
// end ;
9235: LD_VAR 0 1
9239: RET
// export function GetGameEnded ; begin
9240: LD_INT 0
9242: PPUSH
// result = GameEnded ;
9243: LD_ADDR_VAR 0 1
9247: PUSH
9248: LD_LOC 15
9252: ST_TO_ADDR
// end ; end_of_file
9253: LD_VAR 0 1
9257: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9258: LD_INT 0
9260: PPUSH
9261: PPUSH
9262: PPUSH
// for side = 1 to 8 do
9263: LD_ADDR_VAR 0 2
9267: PUSH
9268: DOUBLE
9269: LD_INT 1
9271: DEC
9272: ST_TO_ADDR
9273: LD_INT 8
9275: PUSH
9276: FOR_TO
9277: IFFALSE 9398
// begin for i = 1 to 72 do
9279: LD_ADDR_VAR 0 3
9283: PUSH
9284: DOUBLE
9285: LD_INT 1
9287: DEC
9288: ST_TO_ADDR
9289: LD_INT 72
9291: PUSH
9292: FOR_TO
9293: IFFALSE 9324
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9295: LD_VAR 0 3
9299: PPUSH
9300: LD_VAR 0 2
9304: PPUSH
9305: LD_INT 0
9307: PPUSH
9308: LD_VAR 0 3
9312: PPUSH
9313: CALL_OW 565
9317: PPUSH
9318: CALL_OW 322
9322: GO 9292
9324: POP
9325: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9326: LD_INT 73
9328: PPUSH
9329: LD_VAR 0 2
9333: PPUSH
9334: LD_INT 0
9336: PPUSH
9337: LD_INT 25
9339: PPUSH
9340: CALL_OW 565
9344: PPUSH
9345: CALL_OW 322
// for i = 0 to 40 do
9349: LD_ADDR_VAR 0 3
9353: PUSH
9354: DOUBLE
9355: LD_INT 0
9357: DEC
9358: ST_TO_ADDR
9359: LD_INT 40
9361: PUSH
9362: FOR_TO
9363: IFFALSE 9394
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9365: LD_VAR 0 3
9369: PPUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: LD_INT 1
9377: PPUSH
9378: LD_VAR 0 3
9382: PPUSH
9383: CALL_OW 565
9387: PPUSH
9388: CALL_OW 324
9392: GO 9362
9394: POP
9395: POP
// end ;
9396: GO 9276
9398: POP
9399: POP
// end ;
9400: LD_VAR 0 1
9404: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9405: LD_INT 0
9407: PPUSH
9408: PPUSH
9409: PPUSH
// for side = 1 to 8 do
9410: LD_ADDR_VAR 0 3
9414: PUSH
9415: DOUBLE
9416: LD_INT 1
9418: DEC
9419: ST_TO_ADDR
9420: LD_INT 8
9422: PUSH
9423: FOR_TO
9424: IFFALSE 13420
// begin for i = 1 to 73 do
9426: LD_ADDR_VAR 0 4
9430: PUSH
9431: DOUBLE
9432: LD_INT 1
9434: DEC
9435: ST_TO_ADDR
9436: LD_INT 73
9438: PUSH
9439: FOR_TO
9440: IFFALSE 9461
// SetTech ( i , side , state_disabled ) ;
9442: LD_VAR 0 4
9446: PPUSH
9447: LD_VAR 0 3
9451: PPUSH
9452: LD_INT 0
9454: PPUSH
9455: CALL_OW 322
9459: GO 9439
9461: POP
9462: POP
// for i = 0 to 40 do
9463: LD_ADDR_VAR 0 4
9467: PUSH
9468: DOUBLE
9469: LD_INT 0
9471: DEC
9472: ST_TO_ADDR
9473: LD_INT 40
9475: PUSH
9476: FOR_TO
9477: IFFALSE 9498
// SetRestrict ( i , side , false ) ;
9479: LD_VAR 0 4
9483: PPUSH
9484: LD_VAR 0 3
9488: PPUSH
9489: LD_INT 0
9491: PPUSH
9492: CALL_OW 324
9496: GO 9476
9498: POP
9499: POP
// case level of 1 :
9500: LD_VAR 0 1
9504: PUSH
9505: LD_INT 1
9507: DOUBLE
9508: EQUAL
9509: IFTRUE 9513
9511: GO 9666
9513: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9514: LD_INT 35
9516: PPUSH
9517: LD_VAR 0 3
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9529: LD_INT 45
9531: PPUSH
9532: LD_VAR 0 3
9536: PPUSH
9537: LD_INT 1
9539: PPUSH
9540: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9544: LD_INT 46
9546: PPUSH
9547: LD_VAR 0 3
9551: PPUSH
9552: LD_INT 1
9554: PPUSH
9555: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9559: LD_INT 47
9561: PPUSH
9562: LD_VAR 0 3
9566: PPUSH
9567: LD_INT 1
9569: PPUSH
9570: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9574: LD_INT 0
9576: PPUSH
9577: LD_VAR 0 3
9581: PPUSH
9582: LD_INT 1
9584: PPUSH
9585: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9589: LD_INT 2
9591: PPUSH
9592: LD_VAR 0 3
9596: PPUSH
9597: LD_INT 1
9599: PPUSH
9600: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9604: LD_INT 4
9606: PPUSH
9607: LD_VAR 0 3
9611: PPUSH
9612: LD_INT 1
9614: PPUSH
9615: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9619: LD_INT 6
9621: PPUSH
9622: LD_VAR 0 3
9626: PPUSH
9627: LD_INT 1
9629: PPUSH
9630: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9634: LD_INT 29
9636: PPUSH
9637: LD_VAR 0 3
9641: PPUSH
9642: LD_INT 1
9644: PPUSH
9645: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9649: LD_INT 31
9651: PPUSH
9652: LD_VAR 0 3
9656: PPUSH
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 324
// end ; 2 :
9664: GO 13418
9666: LD_INT 2
9668: DOUBLE
9669: EQUAL
9670: IFTRUE 9674
9672: GO 9872
9674: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9675: LD_INT 35
9677: PPUSH
9678: LD_VAR 0 3
9682: PPUSH
9683: LD_INT 1
9685: PPUSH
9686: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9690: LD_INT 45
9692: PPUSH
9693: LD_VAR 0 3
9697: PPUSH
9698: LD_INT 1
9700: PPUSH
9701: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9705: LD_INT 46
9707: PPUSH
9708: LD_VAR 0 3
9712: PPUSH
9713: LD_INT 1
9715: PPUSH
9716: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9720: LD_INT 47
9722: PPUSH
9723: LD_VAR 0 3
9727: PPUSH
9728: LD_INT 1
9730: PPUSH
9731: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9735: LD_INT 1
9737: PPUSH
9738: LD_VAR 0 3
9742: PPUSH
9743: LD_INT 1
9745: PPUSH
9746: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9750: LD_INT 2
9752: PPUSH
9753: LD_VAR 0 3
9757: PPUSH
9758: LD_INT 1
9760: PPUSH
9761: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9765: LD_INT 11
9767: PPUSH
9768: LD_VAR 0 3
9772: PPUSH
9773: LD_INT 1
9775: PPUSH
9776: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9780: LD_INT 0
9782: PPUSH
9783: LD_VAR 0 3
9787: PPUSH
9788: LD_INT 1
9790: PPUSH
9791: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9795: LD_INT 2
9797: PPUSH
9798: LD_VAR 0 3
9802: PPUSH
9803: LD_INT 1
9805: PPUSH
9806: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9810: LD_INT 4
9812: PPUSH
9813: LD_VAR 0 3
9817: PPUSH
9818: LD_INT 1
9820: PPUSH
9821: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9825: LD_INT 6
9827: PPUSH
9828: LD_VAR 0 3
9832: PPUSH
9833: LD_INT 1
9835: PPUSH
9836: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9840: LD_INT 29
9842: PPUSH
9843: LD_VAR 0 3
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9855: LD_INT 31
9857: PPUSH
9858: LD_VAR 0 3
9862: PPUSH
9863: LD_INT 1
9865: PPUSH
9866: CALL_OW 324
// end ; 3 :
9870: GO 13418
9872: LD_INT 3
9874: DOUBLE
9875: EQUAL
9876: IFTRUE 9880
9878: GO 10333
9880: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9881: LD_INT 35
9883: PPUSH
9884: LD_VAR 0 3
9888: PPUSH
9889: LD_INT 1
9891: PPUSH
9892: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9896: LD_INT 45
9898: PPUSH
9899: LD_VAR 0 3
9903: PPUSH
9904: LD_INT 1
9906: PPUSH
9907: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9911: LD_INT 46
9913: PPUSH
9914: LD_VAR 0 3
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9926: LD_INT 47
9928: PPUSH
9929: LD_VAR 0 3
9933: PPUSH
9934: LD_INT 1
9936: PPUSH
9937: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9941: LD_INT 1
9943: PPUSH
9944: LD_VAR 0 3
9948: PPUSH
9949: LD_INT 1
9951: PPUSH
9952: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9956: LD_INT 2
9958: PPUSH
9959: LD_VAR 0 3
9963: PPUSH
9964: LD_INT 1
9966: PPUSH
9967: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9971: LD_INT 11
9973: PPUSH
9974: LD_VAR 0 3
9978: PPUSH
9979: LD_INT 1
9981: PPUSH
9982: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9986: LD_INT 48
9988: PPUSH
9989: LD_VAR 0 3
9993: PPUSH
9994: LD_INT 1
9996: PPUSH
9997: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10001: LD_INT 69
10003: PPUSH
10004: LD_VAR 0 3
10008: PPUSH
10009: LD_INT 1
10011: PPUSH
10012: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10016: LD_INT 39
10018: PPUSH
10019: LD_VAR 0 3
10023: PPUSH
10024: LD_INT 1
10026: PPUSH
10027: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10031: LD_INT 43
10033: PPUSH
10034: LD_VAR 0 3
10038: PPUSH
10039: LD_INT 1
10041: PPUSH
10042: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10046: LD_INT 51
10048: PPUSH
10049: LD_VAR 0 3
10053: PPUSH
10054: LD_INT 1
10056: PPUSH
10057: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10061: LD_INT 6
10063: PPUSH
10064: LD_VAR 0 3
10068: PPUSH
10069: LD_INT 1
10071: PPUSH
10072: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10076: LD_INT 0
10078: PPUSH
10079: LD_VAR 0 3
10083: PPUSH
10084: LD_INT 1
10086: PPUSH
10087: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10091: LD_INT 2
10093: PPUSH
10094: LD_VAR 0 3
10098: PPUSH
10099: LD_INT 1
10101: PPUSH
10102: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10106: LD_INT 3
10108: PPUSH
10109: LD_VAR 0 3
10113: PPUSH
10114: LD_INT 1
10116: PPUSH
10117: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10121: LD_INT 4
10123: PPUSH
10124: LD_VAR 0 3
10128: PPUSH
10129: LD_INT 1
10131: PPUSH
10132: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10136: LD_INT 6
10138: PPUSH
10139: LD_VAR 0 3
10143: PPUSH
10144: LD_INT 1
10146: PPUSH
10147: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10151: LD_INT 7
10153: PPUSH
10154: LD_VAR 0 3
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10166: LD_INT 8
10168: PPUSH
10169: LD_VAR 0 3
10173: PPUSH
10174: LD_INT 1
10176: PPUSH
10177: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10181: LD_INT 10
10183: PPUSH
10184: LD_VAR 0 3
10188: PPUSH
10189: LD_INT 1
10191: PPUSH
10192: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10196: LD_INT 15
10198: PPUSH
10199: LD_VAR 0 3
10203: PPUSH
10204: LD_INT 1
10206: PPUSH
10207: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10211: LD_INT 16
10213: PPUSH
10214: LD_VAR 0 3
10218: PPUSH
10219: LD_INT 1
10221: PPUSH
10222: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10226: LD_INT 17
10228: PPUSH
10229: LD_VAR 0 3
10233: PPUSH
10234: LD_INT 1
10236: PPUSH
10237: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10241: LD_INT 20
10243: PPUSH
10244: LD_VAR 0 3
10248: PPUSH
10249: LD_INT 1
10251: PPUSH
10252: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10256: LD_INT 26
10258: PPUSH
10259: LD_VAR 0 3
10263: PPUSH
10264: LD_INT 1
10266: PPUSH
10267: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10271: LD_INT 27
10273: PPUSH
10274: LD_VAR 0 3
10278: PPUSH
10279: LD_INT 1
10281: PPUSH
10282: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10286: LD_INT 29
10288: PPUSH
10289: LD_VAR 0 3
10293: PPUSH
10294: LD_INT 1
10296: PPUSH
10297: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10301: LD_INT 31
10303: PPUSH
10304: LD_VAR 0 3
10308: PPUSH
10309: LD_INT 1
10311: PPUSH
10312: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10316: LD_INT 32
10318: PPUSH
10319: LD_VAR 0 3
10323: PPUSH
10324: LD_INT 1
10326: PPUSH
10327: CALL_OW 324
// end ; 4 :
10331: GO 13418
10333: LD_INT 4
10335: DOUBLE
10336: EQUAL
10337: IFTRUE 10341
10339: GO 11289
10341: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10342: LD_INT 35
10344: PPUSH
10345: LD_VAR 0 3
10349: PPUSH
10350: LD_INT 1
10352: PPUSH
10353: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10357: LD_INT 45
10359: PPUSH
10360: LD_VAR 0 3
10364: PPUSH
10365: LD_INT 1
10367: PPUSH
10368: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10372: LD_INT 46
10374: PPUSH
10375: LD_VAR 0 3
10379: PPUSH
10380: LD_INT 1
10382: PPUSH
10383: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10387: LD_INT 47
10389: PPUSH
10390: LD_VAR 0 3
10394: PPUSH
10395: LD_INT 1
10397: PPUSH
10398: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10402: LD_INT 1
10404: PPUSH
10405: LD_VAR 0 3
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10417: LD_INT 2
10419: PPUSH
10420: LD_VAR 0 3
10424: PPUSH
10425: LD_INT 1
10427: PPUSH
10428: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10432: LD_INT 11
10434: PPUSH
10435: LD_VAR 0 3
10439: PPUSH
10440: LD_INT 1
10442: PPUSH
10443: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10447: LD_INT 20
10449: PPUSH
10450: LD_VAR 0 3
10454: PPUSH
10455: LD_INT 1
10457: PPUSH
10458: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10462: LD_INT 48
10464: PPUSH
10465: LD_VAR 0 3
10469: PPUSH
10470: LD_INT 1
10472: PPUSH
10473: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10477: LD_INT 49
10479: PPUSH
10480: LD_VAR 0 3
10484: PPUSH
10485: LD_INT 1
10487: PPUSH
10488: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10492: LD_INT 69
10494: PPUSH
10495: LD_VAR 0 3
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10507: LD_INT 39
10509: PPUSH
10510: LD_VAR 0 3
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10522: LD_INT 34
10524: PPUSH
10525: LD_VAR 0 3
10529: PPUSH
10530: LD_INT 1
10532: PPUSH
10533: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10537: LD_INT 42
10539: PPUSH
10540: LD_VAR 0 3
10544: PPUSH
10545: LD_INT 1
10547: PPUSH
10548: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10552: LD_INT 44
10554: PPUSH
10555: LD_VAR 0 3
10559: PPUSH
10560: LD_INT 1
10562: PPUSH
10563: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10567: LD_INT 41
10569: PPUSH
10570: LD_VAR 0 3
10574: PPUSH
10575: LD_INT 1
10577: PPUSH
10578: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10582: LD_INT 43
10584: PPUSH
10585: LD_VAR 0 3
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10597: LD_INT 70
10599: PPUSH
10600: LD_VAR 0 3
10604: PPUSH
10605: LD_INT 1
10607: PPUSH
10608: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10612: LD_INT 51
10614: PPUSH
10615: LD_VAR 0 3
10619: PPUSH
10620: LD_INT 1
10622: PPUSH
10623: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10627: LD_INT 52
10629: PPUSH
10630: LD_VAR 0 3
10634: PPUSH
10635: LD_INT 1
10637: PPUSH
10638: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10642: LD_INT 6
10644: PPUSH
10645: LD_VAR 0 3
10649: PPUSH
10650: LD_INT 1
10652: PPUSH
10653: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10657: LD_INT 15
10659: PPUSH
10660: LD_VAR 0 3
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10672: LD_INT 7
10674: PPUSH
10675: LD_VAR 0 3
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10687: LD_INT 12
10689: PPUSH
10690: LD_VAR 0 3
10694: PPUSH
10695: LD_INT 1
10697: PPUSH
10698: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10702: LD_INT 18
10704: PPUSH
10705: LD_VAR 0 3
10709: PPUSH
10710: LD_INT 1
10712: PPUSH
10713: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10717: LD_INT 60
10719: PPUSH
10720: LD_VAR 0 3
10724: PPUSH
10725: LD_INT 1
10727: PPUSH
10728: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10732: LD_INT 9
10734: PPUSH
10735: LD_VAR 0 3
10739: PPUSH
10740: LD_INT 1
10742: PPUSH
10743: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10747: LD_INT 30
10749: PPUSH
10750: LD_VAR 0 3
10754: PPUSH
10755: LD_INT 1
10757: PPUSH
10758: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10762: LD_INT 37
10764: PPUSH
10765: LD_VAR 0 3
10769: PPUSH
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10777: LD_INT 5
10779: PPUSH
10780: LD_VAR 0 3
10784: PPUSH
10785: LD_INT 1
10787: PPUSH
10788: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10792: LD_INT 66
10794: PPUSH
10795: LD_VAR 0 3
10799: PPUSH
10800: LD_INT 1
10802: PPUSH
10803: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10807: LD_INT 21
10809: PPUSH
10810: LD_VAR 0 3
10814: PPUSH
10815: LD_INT 1
10817: PPUSH
10818: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10822: LD_INT 22
10824: PPUSH
10825: LD_VAR 0 3
10829: PPUSH
10830: LD_INT 1
10832: PPUSH
10833: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10837: LD_INT 54
10839: PPUSH
10840: LD_VAR 0 3
10844: PPUSH
10845: LD_INT 1
10847: PPUSH
10848: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10852: LD_INT 0
10854: PPUSH
10855: LD_VAR 0 3
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10867: LD_INT 1
10869: PPUSH
10870: LD_VAR 0 3
10874: PPUSH
10875: LD_INT 1
10877: PPUSH
10878: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10882: LD_INT 2
10884: PPUSH
10885: LD_VAR 0 3
10889: PPUSH
10890: LD_INT 1
10892: PPUSH
10893: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10897: LD_INT 3
10899: PPUSH
10900: LD_VAR 0 3
10904: PPUSH
10905: LD_INT 1
10907: PPUSH
10908: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10912: LD_INT 4
10914: PPUSH
10915: LD_VAR 0 3
10919: PPUSH
10920: LD_INT 1
10922: PPUSH
10923: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10927: LD_INT 5
10929: PPUSH
10930: LD_VAR 0 3
10934: PPUSH
10935: LD_INT 1
10937: PPUSH
10938: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10942: LD_INT 6
10944: PPUSH
10945: LD_VAR 0 3
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10957: LD_INT 7
10959: PPUSH
10960: LD_VAR 0 3
10964: PPUSH
10965: LD_INT 1
10967: PPUSH
10968: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10972: LD_INT 8
10974: PPUSH
10975: LD_VAR 0 3
10979: PPUSH
10980: LD_INT 1
10982: PPUSH
10983: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10987: LD_INT 10
10989: PPUSH
10990: LD_VAR 0 3
10994: PPUSH
10995: LD_INT 1
10997: PPUSH
10998: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11002: LD_INT 11
11004: PPUSH
11005: LD_VAR 0 3
11009: PPUSH
11010: LD_INT 1
11012: PPUSH
11013: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11017: LD_INT 12
11019: PPUSH
11020: LD_VAR 0 3
11024: PPUSH
11025: LD_INT 1
11027: PPUSH
11028: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11032: LD_INT 13
11034: PPUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: LD_INT 1
11042: PPUSH
11043: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11047: LD_INT 14
11049: PPUSH
11050: LD_VAR 0 3
11054: PPUSH
11055: LD_INT 1
11057: PPUSH
11058: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11062: LD_INT 15
11064: PPUSH
11065: LD_VAR 0 3
11069: PPUSH
11070: LD_INT 1
11072: PPUSH
11073: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11077: LD_INT 16
11079: PPUSH
11080: LD_VAR 0 3
11084: PPUSH
11085: LD_INT 1
11087: PPUSH
11088: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11092: LD_INT 17
11094: PPUSH
11095: LD_VAR 0 3
11099: PPUSH
11100: LD_INT 1
11102: PPUSH
11103: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11107: LD_INT 19
11109: PPUSH
11110: LD_VAR 0 3
11114: PPUSH
11115: LD_INT 1
11117: PPUSH
11118: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11122: LD_INT 20
11124: PPUSH
11125: LD_VAR 0 3
11129: PPUSH
11130: LD_INT 1
11132: PPUSH
11133: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11137: LD_INT 21
11139: PPUSH
11140: LD_VAR 0 3
11144: PPUSH
11145: LD_INT 1
11147: PPUSH
11148: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11152: LD_INT 23
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11167: LD_INT 26
11169: PPUSH
11170: LD_VAR 0 3
11174: PPUSH
11175: LD_INT 1
11177: PPUSH
11178: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11182: LD_INT 27
11184: PPUSH
11185: LD_VAR 0 3
11189: PPUSH
11190: LD_INT 1
11192: PPUSH
11193: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11197: LD_INT 28
11199: PPUSH
11200: LD_VAR 0 3
11204: PPUSH
11205: LD_INT 1
11207: PPUSH
11208: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11212: LD_INT 29
11214: PPUSH
11215: LD_VAR 0 3
11219: PPUSH
11220: LD_INT 1
11222: PPUSH
11223: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11227: LD_INT 30
11229: PPUSH
11230: LD_VAR 0 3
11234: PPUSH
11235: LD_INT 1
11237: PPUSH
11238: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11242: LD_INT 31
11244: PPUSH
11245: LD_VAR 0 3
11249: PPUSH
11250: LD_INT 1
11252: PPUSH
11253: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11257: LD_INT 32
11259: PPUSH
11260: LD_VAR 0 3
11264: PPUSH
11265: LD_INT 1
11267: PPUSH
11268: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11272: LD_INT 36
11274: PPUSH
11275: LD_VAR 0 3
11279: PPUSH
11280: LD_INT 1
11282: PPUSH
11283: CALL_OW 324
// end ; 5 :
11287: GO 13418
11289: LD_INT 5
11291: DOUBLE
11292: EQUAL
11293: IFTRUE 11297
11295: GO 12410
11297: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11298: LD_INT 35
11300: PPUSH
11301: LD_VAR 0 3
11305: PPUSH
11306: LD_INT 1
11308: PPUSH
11309: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11313: LD_INT 45
11315: PPUSH
11316: LD_VAR 0 3
11320: PPUSH
11321: LD_INT 1
11323: PPUSH
11324: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11328: LD_INT 46
11330: PPUSH
11331: LD_VAR 0 3
11335: PPUSH
11336: LD_INT 1
11338: PPUSH
11339: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11343: LD_INT 47
11345: PPUSH
11346: LD_VAR 0 3
11350: PPUSH
11351: LD_INT 1
11353: PPUSH
11354: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11358: LD_INT 1
11360: PPUSH
11361: LD_VAR 0 3
11365: PPUSH
11366: LD_INT 1
11368: PPUSH
11369: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11373: LD_INT 2
11375: PPUSH
11376: LD_VAR 0 3
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11388: LD_INT 11
11390: PPUSH
11391: LD_VAR 0 3
11395: PPUSH
11396: LD_INT 1
11398: PPUSH
11399: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11403: LD_INT 20
11405: PPUSH
11406: LD_VAR 0 3
11410: PPUSH
11411: LD_INT 1
11413: PPUSH
11414: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11418: LD_INT 48
11420: PPUSH
11421: LD_VAR 0 3
11425: PPUSH
11426: LD_INT 1
11428: PPUSH
11429: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11433: LD_INT 49
11435: PPUSH
11436: LD_VAR 0 3
11440: PPUSH
11441: LD_INT 1
11443: PPUSH
11444: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11448: LD_INT 69
11450: PPUSH
11451: LD_VAR 0 3
11455: PPUSH
11456: LD_INT 1
11458: PPUSH
11459: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11463: LD_INT 39
11465: PPUSH
11466: LD_VAR 0 3
11470: PPUSH
11471: LD_INT 1
11473: PPUSH
11474: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11478: LD_INT 34
11480: PPUSH
11481: LD_VAR 0 3
11485: PPUSH
11486: LD_INT 1
11488: PPUSH
11489: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11493: LD_INT 42
11495: PPUSH
11496: LD_VAR 0 3
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11508: LD_INT 44
11510: PPUSH
11511: LD_VAR 0 3
11515: PPUSH
11516: LD_INT 1
11518: PPUSH
11519: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11523: LD_INT 41
11525: PPUSH
11526: LD_VAR 0 3
11530: PPUSH
11531: LD_INT 1
11533: PPUSH
11534: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11538: LD_INT 40
11540: PPUSH
11541: LD_VAR 0 3
11545: PPUSH
11546: LD_INT 1
11548: PPUSH
11549: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11553: LD_INT 43
11555: PPUSH
11556: LD_VAR 0 3
11560: PPUSH
11561: LD_INT 1
11563: PPUSH
11564: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11568: LD_INT 70
11570: PPUSH
11571: LD_VAR 0 3
11575: PPUSH
11576: LD_INT 1
11578: PPUSH
11579: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11583: LD_INT 51
11585: PPUSH
11586: LD_VAR 0 3
11590: PPUSH
11591: LD_INT 1
11593: PPUSH
11594: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11598: LD_INT 52
11600: PPUSH
11601: LD_VAR 0 3
11605: PPUSH
11606: LD_INT 1
11608: PPUSH
11609: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11613: LD_INT 6
11615: PPUSH
11616: LD_VAR 0 3
11620: PPUSH
11621: LD_INT 1
11623: PPUSH
11624: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11628: LD_INT 15
11630: PPUSH
11631: LD_VAR 0 3
11635: PPUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11643: LD_INT 7
11645: PPUSH
11646: LD_VAR 0 3
11650: PPUSH
11651: LD_INT 1
11653: PPUSH
11654: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11658: LD_INT 12
11660: PPUSH
11661: LD_VAR 0 3
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11673: LD_INT 17
11675: PPUSH
11676: LD_VAR 0 3
11680: PPUSH
11681: LD_INT 1
11683: PPUSH
11684: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11688: LD_INT 18
11690: PPUSH
11691: LD_VAR 0 3
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11703: LD_INT 60
11705: PPUSH
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_INT 1
11713: PPUSH
11714: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11718: LD_INT 32
11720: PPUSH
11721: LD_VAR 0 3
11725: PPUSH
11726: LD_INT 1
11728: PPUSH
11729: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11733: LD_INT 9
11735: PPUSH
11736: LD_VAR 0 3
11740: PPUSH
11741: LD_INT 1
11743: PPUSH
11744: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11748: LD_INT 57
11750: PPUSH
11751: LD_VAR 0 3
11755: PPUSH
11756: LD_INT 1
11758: PPUSH
11759: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11763: LD_INT 30
11765: PPUSH
11766: LD_VAR 0 3
11770: PPUSH
11771: LD_INT 1
11773: PPUSH
11774: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11778: LD_INT 37
11780: PPUSH
11781: LD_VAR 0 3
11785: PPUSH
11786: LD_INT 1
11788: PPUSH
11789: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11793: LD_INT 63
11795: PPUSH
11796: LD_VAR 0 3
11800: PPUSH
11801: LD_INT 1
11803: PPUSH
11804: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11808: LD_INT 3
11810: PPUSH
11811: LD_VAR 0 3
11815: PPUSH
11816: LD_INT 1
11818: PPUSH
11819: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11823: LD_INT 4
11825: PPUSH
11826: LD_VAR 0 3
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11838: LD_INT 5
11840: PPUSH
11841: LD_VAR 0 3
11845: PPUSH
11846: LD_INT 1
11848: PPUSH
11849: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11853: LD_INT 66
11855: PPUSH
11856: LD_VAR 0 3
11860: PPUSH
11861: LD_INT 1
11863: PPUSH
11864: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11868: LD_INT 21
11870: PPUSH
11871: LD_VAR 0 3
11875: PPUSH
11876: LD_INT 1
11878: PPUSH
11879: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11883: LD_INT 22
11885: PPUSH
11886: LD_VAR 0 3
11890: PPUSH
11891: LD_INT 1
11893: PPUSH
11894: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11898: LD_INT 19
11900: PPUSH
11901: LD_VAR 0 3
11905: PPUSH
11906: LD_INT 1
11908: PPUSH
11909: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11913: LD_INT 54
11915: PPUSH
11916: LD_VAR 0 3
11920: PPUSH
11921: LD_INT 1
11923: PPUSH
11924: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11928: LD_INT 55
11930: PPUSH
11931: LD_VAR 0 3
11935: PPUSH
11936: LD_INT 1
11938: PPUSH
11939: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11943: LD_INT 0
11945: PPUSH
11946: LD_VAR 0 3
11950: PPUSH
11951: LD_INT 1
11953: PPUSH
11954: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11958: LD_INT 1
11960: PPUSH
11961: LD_VAR 0 3
11965: PPUSH
11966: LD_INT 1
11968: PPUSH
11969: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11973: LD_INT 2
11975: PPUSH
11976: LD_VAR 0 3
11980: PPUSH
11981: LD_INT 1
11983: PPUSH
11984: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11988: LD_INT 3
11990: PPUSH
11991: LD_VAR 0 3
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12003: LD_INT 4
12005: PPUSH
12006: LD_VAR 0 3
12010: PPUSH
12011: LD_INT 1
12013: PPUSH
12014: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12018: LD_INT 5
12020: PPUSH
12021: LD_VAR 0 3
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12033: LD_INT 6
12035: PPUSH
12036: LD_VAR 0 3
12040: PPUSH
12041: LD_INT 1
12043: PPUSH
12044: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12048: LD_INT 7
12050: PPUSH
12051: LD_VAR 0 3
12055: PPUSH
12056: LD_INT 1
12058: PPUSH
12059: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12063: LD_INT 8
12065: PPUSH
12066: LD_VAR 0 3
12070: PPUSH
12071: LD_INT 1
12073: PPUSH
12074: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12078: LD_INT 10
12080: PPUSH
12081: LD_VAR 0 3
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12093: LD_INT 11
12095: PPUSH
12096: LD_VAR 0 3
12100: PPUSH
12101: LD_INT 1
12103: PPUSH
12104: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12108: LD_INT 12
12110: PPUSH
12111: LD_VAR 0 3
12115: PPUSH
12116: LD_INT 1
12118: PPUSH
12119: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12123: LD_INT 13
12125: PPUSH
12126: LD_VAR 0 3
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12138: LD_INT 14
12140: PPUSH
12141: LD_VAR 0 3
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12153: LD_INT 15
12155: PPUSH
12156: LD_VAR 0 3
12160: PPUSH
12161: LD_INT 1
12163: PPUSH
12164: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12168: LD_INT 16
12170: PPUSH
12171: LD_VAR 0 3
12175: PPUSH
12176: LD_INT 1
12178: PPUSH
12179: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12183: LD_INT 17
12185: PPUSH
12186: LD_VAR 0 3
12190: PPUSH
12191: LD_INT 1
12193: PPUSH
12194: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12198: LD_INT 18
12200: PPUSH
12201: LD_VAR 0 3
12205: PPUSH
12206: LD_INT 1
12208: PPUSH
12209: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12213: LD_INT 19
12215: PPUSH
12216: LD_VAR 0 3
12220: PPUSH
12221: LD_INT 1
12223: PPUSH
12224: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12228: LD_INT 20
12230: PPUSH
12231: LD_VAR 0 3
12235: PPUSH
12236: LD_INT 1
12238: PPUSH
12239: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12243: LD_INT 21
12245: PPUSH
12246: LD_VAR 0 3
12250: PPUSH
12251: LD_INT 1
12253: PPUSH
12254: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12258: LD_INT 23
12260: PPUSH
12261: LD_VAR 0 3
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12273: LD_INT 26
12275: PPUSH
12276: LD_VAR 0 3
12280: PPUSH
12281: LD_INT 1
12283: PPUSH
12284: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12288: LD_INT 27
12290: PPUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12303: LD_INT 28
12305: PPUSH
12306: LD_VAR 0 3
12310: PPUSH
12311: LD_INT 1
12313: PPUSH
12314: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12318: LD_INT 29
12320: PPUSH
12321: LD_VAR 0 3
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12333: LD_INT 30
12335: PPUSH
12336: LD_VAR 0 3
12340: PPUSH
12341: LD_INT 1
12343: PPUSH
12344: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12348: LD_INT 31
12350: PPUSH
12351: LD_VAR 0 3
12355: PPUSH
12356: LD_INT 1
12358: PPUSH
12359: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12363: LD_INT 32
12365: PPUSH
12366: LD_VAR 0 3
12370: PPUSH
12371: LD_INT 1
12373: PPUSH
12374: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12378: LD_INT 33
12380: PPUSH
12381: LD_VAR 0 3
12385: PPUSH
12386: LD_INT 1
12388: PPUSH
12389: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12393: LD_INT 36
12395: PPUSH
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_INT 1
12403: PPUSH
12404: CALL_OW 324
// end ; 6 :
12408: GO 13418
12410: LD_INT 6
12412: DOUBLE
12413: EQUAL
12414: IFTRUE 12418
12416: GO 13343
12418: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12419: LD_INT 35
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: LD_INT 1
12429: PPUSH
12430: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12434: LD_INT 45
12436: PPUSH
12437: LD_VAR 0 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12449: LD_INT 46
12451: PPUSH
12452: LD_VAR 0 3
12456: PPUSH
12457: LD_INT 1
12459: PPUSH
12460: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12464: LD_INT 47
12466: PPUSH
12467: LD_VAR 0 3
12471: PPUSH
12472: LD_INT 1
12474: PPUSH
12475: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12479: LD_INT 1
12481: PPUSH
12482: LD_VAR 0 3
12486: PPUSH
12487: LD_INT 1
12489: PPUSH
12490: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12494: LD_INT 2
12496: PPUSH
12497: LD_VAR 0 3
12501: PPUSH
12502: LD_INT 1
12504: PPUSH
12505: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12509: LD_INT 11
12511: PPUSH
12512: LD_VAR 0 3
12516: PPUSH
12517: LD_INT 1
12519: PPUSH
12520: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12524: LD_INT 20
12526: PPUSH
12527: LD_VAR 0 3
12531: PPUSH
12532: LD_INT 1
12534: PPUSH
12535: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12539: LD_INT 48
12541: PPUSH
12542: LD_VAR 0 3
12546: PPUSH
12547: LD_INT 1
12549: PPUSH
12550: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12554: LD_INT 49
12556: PPUSH
12557: LD_VAR 0 3
12561: PPUSH
12562: LD_INT 1
12564: PPUSH
12565: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12569: LD_INT 50
12571: PPUSH
12572: LD_VAR 0 3
12576: PPUSH
12577: LD_INT 1
12579: PPUSH
12580: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12584: LD_INT 69
12586: PPUSH
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_INT 1
12594: PPUSH
12595: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12599: LD_INT 39
12601: PPUSH
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12614: LD_INT 34
12616: PPUSH
12617: LD_VAR 0 3
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12629: LD_INT 42
12631: PPUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: LD_INT 1
12639: PPUSH
12640: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12644: LD_INT 44
12646: PPUSH
12647: LD_VAR 0 3
12651: PPUSH
12652: LD_INT 1
12654: PPUSH
12655: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12659: LD_INT 41
12661: PPUSH
12662: LD_VAR 0 3
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12674: LD_INT 13
12676: PPUSH
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_INT 1
12684: PPUSH
12685: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12689: LD_INT 40
12691: PPUSH
12692: LD_VAR 0 3
12696: PPUSH
12697: LD_INT 1
12699: PPUSH
12700: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12704: LD_INT 43
12706: PPUSH
12707: LD_VAR 0 3
12711: PPUSH
12712: LD_INT 1
12714: PPUSH
12715: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12719: LD_INT 70
12721: PPUSH
12722: LD_VAR 0 3
12726: PPUSH
12727: LD_INT 1
12729: PPUSH
12730: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12734: LD_INT 23
12736: PPUSH
12737: LD_VAR 0 3
12741: PPUSH
12742: LD_INT 1
12744: PPUSH
12745: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12749: LD_INT 51
12751: PPUSH
12752: LD_VAR 0 3
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12764: LD_INT 52
12766: PPUSH
12767: LD_VAR 0 3
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12779: LD_INT 6
12781: PPUSH
12782: LD_VAR 0 3
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12794: LD_INT 15
12796: PPUSH
12797: LD_VAR 0 3
12801: PPUSH
12802: LD_INT 1
12804: PPUSH
12805: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12809: LD_INT 7
12811: PPUSH
12812: LD_VAR 0 3
12816: PPUSH
12817: LD_INT 1
12819: PPUSH
12820: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12824: LD_INT 12
12826: PPUSH
12827: LD_VAR 0 3
12831: PPUSH
12832: LD_INT 1
12834: PPUSH
12835: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12839: LD_INT 10
12841: PPUSH
12842: LD_VAR 0 3
12846: PPUSH
12847: LD_INT 1
12849: PPUSH
12850: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12854: LD_INT 17
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: LD_INT 1
12864: PPUSH
12865: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12869: LD_INT 18
12871: PPUSH
12872: LD_VAR 0 3
12876: PPUSH
12877: LD_INT 1
12879: PPUSH
12880: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12884: LD_INT 60
12886: PPUSH
12887: LD_VAR 0 3
12891: PPUSH
12892: LD_INT 1
12894: PPUSH
12895: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12899: LD_INT 61
12901: PPUSH
12902: LD_VAR 0 3
12906: PPUSH
12907: LD_INT 1
12909: PPUSH
12910: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12914: LD_INT 32
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: LD_INT 1
12924: PPUSH
12925: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12929: LD_INT 27
12931: PPUSH
12932: LD_VAR 0 3
12936: PPUSH
12937: LD_INT 1
12939: PPUSH
12940: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12944: LD_INT 36
12946: PPUSH
12947: LD_VAR 0 3
12951: PPUSH
12952: LD_INT 1
12954: PPUSH
12955: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12959: LD_INT 33
12961: PPUSH
12962: LD_VAR 0 3
12966: PPUSH
12967: LD_INT 1
12969: PPUSH
12970: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12974: LD_INT 9
12976: PPUSH
12977: LD_VAR 0 3
12981: PPUSH
12982: LD_INT 1
12984: PPUSH
12985: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12989: LD_INT 38
12991: PPUSH
12992: LD_VAR 0 3
12996: PPUSH
12997: LD_INT 1
12999: PPUSH
13000: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13004: LD_INT 57
13006: PPUSH
13007: LD_VAR 0 3
13011: PPUSH
13012: LD_INT 1
13014: PPUSH
13015: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13019: LD_INT 58
13021: PPUSH
13022: LD_VAR 0 3
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13034: LD_INT 28
13036: PPUSH
13037: LD_VAR 0 3
13041: PPUSH
13042: LD_INT 1
13044: PPUSH
13045: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13049: LD_INT 29
13051: PPUSH
13052: LD_VAR 0 3
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13064: LD_INT 30
13066: PPUSH
13067: LD_VAR 0 3
13071: PPUSH
13072: LD_INT 1
13074: PPUSH
13075: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13079: LD_INT 37
13081: PPUSH
13082: LD_VAR 0 3
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13094: LD_INT 63
13096: PPUSH
13097: LD_VAR 0 3
13101: PPUSH
13102: LD_INT 1
13104: PPUSH
13105: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13109: LD_INT 64
13111: PPUSH
13112: LD_VAR 0 3
13116: PPUSH
13117: LD_INT 1
13119: PPUSH
13120: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13124: LD_INT 3
13126: PPUSH
13127: LD_VAR 0 3
13131: PPUSH
13132: LD_INT 1
13134: PPUSH
13135: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13139: LD_INT 4
13141: PPUSH
13142: LD_VAR 0 3
13146: PPUSH
13147: LD_INT 1
13149: PPUSH
13150: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13154: LD_INT 5
13156: PPUSH
13157: LD_VAR 0 3
13161: PPUSH
13162: LD_INT 1
13164: PPUSH
13165: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13169: LD_INT 8
13171: PPUSH
13172: LD_VAR 0 3
13176: PPUSH
13177: LD_INT 1
13179: PPUSH
13180: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13184: LD_INT 66
13186: PPUSH
13187: LD_VAR 0 3
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13199: LD_INT 67
13201: PPUSH
13202: LD_VAR 0 3
13206: PPUSH
13207: LD_INT 1
13209: PPUSH
13210: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13214: LD_INT 21
13216: PPUSH
13217: LD_VAR 0 3
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13229: LD_INT 22
13231: PPUSH
13232: LD_VAR 0 3
13236: PPUSH
13237: LD_INT 1
13239: PPUSH
13240: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13244: LD_INT 19
13246: PPUSH
13247: LD_VAR 0 3
13251: PPUSH
13252: LD_INT 1
13254: PPUSH
13255: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13259: LD_INT 26
13261: PPUSH
13262: LD_VAR 0 3
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13274: LD_INT 54
13276: PPUSH
13277: LD_VAR 0 3
13281: PPUSH
13282: LD_INT 1
13284: PPUSH
13285: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13289: LD_INT 55
13291: PPUSH
13292: LD_VAR 0 3
13296: PPUSH
13297: LD_INT 1
13299: PPUSH
13300: CALL_OW 322
// for i = 0 to 39 do
13304: LD_ADDR_VAR 0 4
13308: PUSH
13309: DOUBLE
13310: LD_INT 0
13312: DEC
13313: ST_TO_ADDR
13314: LD_INT 39
13316: PUSH
13317: FOR_TO
13318: IFFALSE 13339
// SetRestrict ( i , side , true ) ;
13320: LD_VAR 0 4
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 324
13337: GO 13317
13339: POP
13340: POP
// end ; else
13341: GO 13418
13343: POP
// begin for i = 1 to 73 do
13344: LD_ADDR_VAR 0 4
13348: PUSH
13349: DOUBLE
13350: LD_INT 1
13352: DEC
13353: ST_TO_ADDR
13354: LD_INT 73
13356: PUSH
13357: FOR_TO
13358: IFFALSE 13379
// SetTech ( i , side , state_enabled ) ;
13360: LD_VAR 0 4
13364: PPUSH
13365: LD_VAR 0 3
13369: PPUSH
13370: LD_INT 1
13372: PPUSH
13373: CALL_OW 322
13377: GO 13357
13379: POP
13380: POP
// for i = 0 to 39 do
13381: LD_ADDR_VAR 0 4
13385: PUSH
13386: DOUBLE
13387: LD_INT 0
13389: DEC
13390: ST_TO_ADDR
13391: LD_INT 39
13393: PUSH
13394: FOR_TO
13395: IFFALSE 13416
// SetRestrict ( i , side , true ) ;
13397: LD_VAR 0 4
13401: PPUSH
13402: LD_VAR 0 3
13406: PPUSH
13407: LD_INT 1
13409: PPUSH
13410: CALL_OW 324
13414: GO 13394
13416: POP
13417: POP
// end ; end ; end ;
13418: GO 9423
13420: POP
13421: POP
// end ; end_of_file
13422: LD_VAR 0 2
13426: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13427: LD_INT 0
13429: PPUSH
13430: PPUSH
13431: PPUSH
13432: PPUSH
13433: PPUSH
13434: PPUSH
13435: PPUSH
13436: PPUSH
13437: PPUSH
// for i := 1 to 8 do
13438: LD_ADDR_VAR 0 2
13442: PUSH
13443: DOUBLE
13444: LD_INT 1
13446: DEC
13447: ST_TO_ADDR
13448: LD_INT 8
13450: PUSH
13451: FOR_TO
13452: IFFALSE 13836
// begin if Side_Positions [ i ] then
13454: LD_EXP 34
13458: PUSH
13459: LD_VAR 0 2
13463: ARRAY
13464: IFFALSE 13834
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13466: LD_ADDR_VAR 0 7
13470: PUSH
13471: LD_INT 22
13473: PUSH
13474: LD_VAR 0 2
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 21
13485: PUSH
13486: LD_INT 1
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PPUSH
13497: CALL_OW 69
13501: PUSH
13502: LD_INT 0
13504: PLUS
13505: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13506: LD_ADDR_VAR 0 9
13510: PUSH
13511: LD_INT 22
13513: PUSH
13514: LD_VAR 0 2
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: PUSH
13523: LD_INT 2
13525: PUSH
13526: LD_INT 30
13528: PUSH
13529: LD_INT 0
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 30
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PPUSH
13555: CALL_OW 69
13559: ST_TO_ADDR
// crates := 0 ;
13560: LD_ADDR_VAR 0 4
13564: PUSH
13565: LD_INT 0
13567: ST_TO_ADDR
// oil := 0 ;
13568: LD_ADDR_VAR 0 5
13572: PUSH
13573: LD_INT 0
13575: ST_TO_ADDR
// sib := 0 ;
13576: LD_ADDR_VAR 0 6
13580: PUSH
13581: LD_INT 0
13583: ST_TO_ADDR
// if bases then
13584: LD_VAR 0 9
13588: IFFALSE 13694
// begin for j in bases do
13590: LD_ADDR_VAR 0 3
13594: PUSH
13595: LD_VAR 0 9
13599: PUSH
13600: FOR_IN
13601: IFFALSE 13692
// begin base := GetBase ( j ) ;
13603: LD_ADDR_VAR 0 8
13607: PUSH
13608: LD_VAR 0 3
13612: PPUSH
13613: CALL_OW 274
13617: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13618: LD_ADDR_VAR 0 4
13622: PUSH
13623: LD_VAR 0 4
13627: PUSH
13628: LD_VAR 0 8
13632: PPUSH
13633: LD_INT 1
13635: PPUSH
13636: CALL_OW 275
13640: PLUS
13641: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13642: LD_ADDR_VAR 0 5
13646: PUSH
13647: LD_VAR 0 5
13651: PUSH
13652: LD_VAR 0 8
13656: PPUSH
13657: LD_INT 2
13659: PPUSH
13660: CALL_OW 275
13664: PLUS
13665: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13666: LD_ADDR_VAR 0 6
13670: PUSH
13671: LD_VAR 0 6
13675: PUSH
13676: LD_VAR 0 8
13680: PPUSH
13681: LD_INT 3
13683: PPUSH
13684: CALL_OW 275
13688: PLUS
13689: ST_TO_ADDR
// end ;
13690: GO 13600
13692: POP
13693: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13694: LD_STRING setSpecText(
13696: PUSH
13697: LD_VAR 0 2
13701: STR
13702: PUSH
13703: LD_STRING ,
13705: STR
13706: PUSH
13707: LD_INT 2
13709: STR
13710: PUSH
13711: LD_STRING ,
13713: STR
13714: PUSH
13715: LD_VAR 0 4
13719: STR
13720: PUSH
13721: LD_STRING )
13723: STR
13724: PPUSH
13725: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13729: LD_STRING setSpecText(
13731: PUSH
13732: LD_VAR 0 2
13736: STR
13737: PUSH
13738: LD_STRING ,
13740: STR
13741: PUSH
13742: LD_INT 3
13744: STR
13745: PUSH
13746: LD_STRING ,
13748: STR
13749: PUSH
13750: LD_VAR 0 5
13754: STR
13755: PUSH
13756: LD_STRING )
13758: STR
13759: PPUSH
13760: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13764: LD_STRING setSpecText(
13766: PUSH
13767: LD_VAR 0 2
13771: STR
13772: PUSH
13773: LD_STRING ,
13775: STR
13776: PUSH
13777: LD_INT 4
13779: STR
13780: PUSH
13781: LD_STRING ,
13783: STR
13784: PUSH
13785: LD_VAR 0 6
13789: STR
13790: PUSH
13791: LD_STRING )
13793: STR
13794: PPUSH
13795: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13799: LD_STRING setSpecText(
13801: PUSH
13802: LD_VAR 0 2
13806: STR
13807: PUSH
13808: LD_STRING ,
13810: STR
13811: PUSH
13812: LD_INT 5
13814: STR
13815: PUSH
13816: LD_STRING ,
13818: STR
13819: PUSH
13820: LD_VAR 0 7
13824: STR
13825: PUSH
13826: LD_STRING )
13828: STR
13829: PPUSH
13830: CALL_OW 559
// end ; end ;
13834: GO 13451
13836: POP
13837: POP
// end ;
13838: LD_VAR 0 1
13842: RET
// every 0 0$1 do
13843: GO 13845
13845: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13846: LD_STRING setSpecLogoNumber(
13848: PUSH
13849: LD_INT 2
13851: STR
13852: PUSH
13853: LD_STRING ,
13855: STR
13856: PUSH
13857: LD_INT 1
13859: STR
13860: PUSH
13861: LD_STRING )
13863: STR
13864: PPUSH
13865: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13869: LD_STRING setSpecLogoNumber(
13871: PUSH
13872: LD_INT 3
13874: STR
13875: PUSH
13876: LD_STRING ,
13878: STR
13879: PUSH
13880: LD_INT 2
13882: STR
13883: PUSH
13884: LD_STRING )
13886: STR
13887: PPUSH
13888: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13892: LD_STRING setSpecLogoNumber(
13894: PUSH
13895: LD_INT 4
13897: STR
13898: PUSH
13899: LD_STRING ,
13901: STR
13902: PUSH
13903: LD_INT 3
13905: STR
13906: PUSH
13907: LD_STRING )
13909: STR
13910: PPUSH
13911: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13915: LD_STRING setSpecLogoNumber(
13917: PUSH
13918: LD_INT 5
13920: STR
13921: PUSH
13922: LD_STRING ,
13924: STR
13925: PUSH
13926: LD_INT 4
13928: STR
13929: PUSH
13930: LD_STRING )
13932: STR
13933: PPUSH
13934: CALL_OW 559
// end ;
13938: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13939: LD_INT 2
13941: PUSH
13942: LD_INT 30
13944: PUSH
13945: LD_INT 0
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PUSH
13952: LD_INT 30
13954: PUSH
13955: LD_INT 1
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: LIST
13966: PPUSH
13967: CALL_OW 69
13971: IFFALSE 13981
13973: GO 13975
13975: DISABLE
// begin enable ;
13976: ENABLE
// UpdateSpectatorBar ;
13977: CALL 13427 0 0
// end ; end_of_file
13981: END
// var respawn , inqueue ; export function init_respawning ; begin
13982: LD_INT 0
13984: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13985: LD_ADDR_LOC 18
13989: PUSH
13990: LD_INT 1
13992: PPUSH
13993: LD_INT 8
13995: PPUSH
13996: CALL_OW 12
14000: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
14001: LD_ADDR_LOC 19
14005: PUSH
14006: LD_INT 0
14008: PUSH
14009: LD_INT 0
14011: PUSH
14012: LD_INT 0
14014: PUSH
14015: LD_INT 0
14017: PUSH
14018: LD_INT 0
14020: PUSH
14021: LD_INT 0
14023: PUSH
14024: LD_INT 0
14026: PUSH
14027: LD_INT 0
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: ST_TO_ADDR
// end ;
14040: LD_VAR 0 1
14044: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
14045: GO 14047
14047: DISABLE
14048: LD_INT 0
14050: PPUSH
14051: PPUSH
14052: PPUSH
// begin if respawning_time_max = 0 then
14053: LD_EXP 28
14057: PUSH
14058: LD_INT 0
14060: EQUAL
14061: IFFALSE 14065
// exit ;
14063: GO 14473
// if respawn = 8 then
14065: LD_LOC 18
14069: PUSH
14070: LD_INT 8
14072: EQUAL
14073: IFFALSE 14085
// respawn := 1 else
14075: LD_ADDR_LOC 18
14079: PUSH
14080: LD_INT 1
14082: ST_TO_ADDR
14083: GO 14099
// respawn := respawn + 1 ;
14085: LD_ADDR_LOC 18
14089: PUSH
14090: LD_LOC 18
14094: PUSH
14095: LD_INT 1
14097: PLUS
14098: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
14099: LD_EXP 34
14103: PUSH
14104: LD_LOC 18
14108: ARRAY
14109: PUSH
14110: LD_LOC 19
14114: PUSH
14115: LD_LOC 18
14119: ARRAY
14120: NOT
14121: AND
14122: IFFALSE 14472
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
14124: LD_ADDR_VAR 0 1
14128: PUSH
14129: LD_INT 21
14131: PUSH
14132: LD_INT 1
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 22
14141: PUSH
14142: LD_LOC 18
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 3
14153: PUSH
14154: LD_INT 23
14156: PUSH
14157: LD_INT 0
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: PPUSH
14170: CALL_OW 69
14174: ST_TO_ADDR
// if n < number_of_people then
14175: LD_VAR 0 1
14179: PUSH
14180: LD_EXP 19
14184: LESS
14185: IFFALSE 14469
// begin aktresp := respawn ;
14187: LD_ADDR_VAR 0 3
14191: PUSH
14192: LD_LOC 18
14196: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
14197: LD_ADDR_LOC 19
14201: PUSH
14202: LD_LOC 19
14206: PPUSH
14207: LD_VAR 0 3
14211: PPUSH
14212: LD_INT 1
14214: PPUSH
14215: CALL_OW 1
14219: ST_TO_ADDR
// enable ;
14220: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
14221: LD_EXP 27
14225: PPUSH
14226: LD_EXP 28
14230: PPUSH
14231: CALL_OW 12
14235: PPUSH
14236: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
14240: LD_ADDR_LOC 19
14244: PUSH
14245: LD_LOC 19
14249: PPUSH
14250: LD_VAR 0 3
14254: PPUSH
14255: LD_INT 0
14257: PPUSH
14258: CALL_OW 1
14262: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14263: LD_ADDR_VAR 0 2
14267: PUSH
14268: LD_INT 21
14270: PUSH
14271: LD_INT 3
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: LD_INT 2
14280: PUSH
14281: LD_INT 30
14283: PUSH
14284: LD_INT 0
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 30
14293: PUSH
14294: LD_INT 1
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 50
14308: PUSH
14309: EMPTY
14310: LIST
14311: PUSH
14312: LD_INT 22
14314: PUSH
14315: LD_VAR 0 3
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: PPUSH
14330: CALL_OW 69
14334: ST_TO_ADDR
// if dep = 0 then
14335: LD_VAR 0 2
14339: PUSH
14340: LD_INT 0
14342: EQUAL
14343: IFFALSE 14347
// exit ;
14345: GO 14473
// hc_name :=  ;
14347: LD_ADDR_OWVAR 26
14351: PUSH
14352: LD_STRING 
14354: ST_TO_ADDR
// hc_importance := 0 ;
14355: LD_ADDR_OWVAR 32
14359: PUSH
14360: LD_INT 0
14362: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14363: LD_INT 0
14365: PPUSH
14366: LD_INT 0
14368: PPUSH
14369: LD_EXP 20
14373: PUSH
14374: LD_INT 2
14376: DIV
14377: PPUSH
14378: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14382: LD_ADDR_OWVAR 21
14386: PUSH
14387: LD_EXP 35
14391: PUSH
14392: LD_VAR 0 3
14396: ARRAY
14397: ST_TO_ADDR
// uc_side := aktresp ;
14398: LD_ADDR_OWVAR 20
14402: PUSH
14403: LD_VAR 0 3
14407: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14408: LD_ADDR_VAR 0 2
14412: PUSH
14413: LD_VAR 0 2
14417: PUSH
14418: LD_INT 1
14420: PPUSH
14421: LD_VAR 0 2
14425: PPUSH
14426: CALL_OW 12
14430: ARRAY
14431: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14432: CALL_OW 44
14436: PPUSH
14437: LD_VAR 0 2
14441: PPUSH
14442: CALL_OW 250
14446: PPUSH
14447: LD_VAR 0 2
14451: PPUSH
14452: CALL_OW 251
14456: PPUSH
14457: LD_INT 7
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 50
// end else
14467: GO 14470
// enable ;
14469: ENABLE
// end else
14470: GO 14473
// enable ;
14472: ENABLE
// end ; end_of_file
14473: PPOPN 3
14475: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14476: LD_INT 0
14478: PPUSH
14479: PPUSH
14480: PPUSH
// BuildUpTime_Delay = 0 ;
14481: LD_ADDR_EXP 57
14485: PUSH
14486: LD_INT 0
14488: ST_TO_ADDR
// if not def_builduptime then
14489: LD_EXP 14
14493: NOT
14494: IFFALSE 14498
// exit ;
14496: GO 14681
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14498: LD_ADDR_EXP 57
14502: PUSH
14503: LD_INT 8400
14505: PUSH
14506: LD_INT 2100
14508: PUSH
14509: LD_EXP 14
14513: MUL
14514: PLUS
14515: ST_TO_ADDR
// BuildUpTimeActive := true ;
14516: LD_ADDR_EXP 56
14520: PUSH
14521: LD_INT 1
14523: ST_TO_ADDR
// for i := 1 to 8 do
14524: LD_ADDR_VAR 0 2
14528: PUSH
14529: DOUBLE
14530: LD_INT 1
14532: DEC
14533: ST_TO_ADDR
14534: LD_INT 8
14536: PUSH
14537: FOR_TO
14538: IFFALSE 14679
// if Side_Positions [ i ] then
14540: LD_EXP 34
14544: PUSH
14545: LD_VAR 0 2
14549: ARRAY
14550: IFFALSE 14677
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14552: LD_EXP 55
14556: PUSH
14557: LD_EXP 34
14561: PUSH
14562: LD_VAR 0 2
14566: ARRAY
14567: ARRAY
14568: PPUSH
14569: LD_INT 5
14571: PPUSH
14572: CALL_OW 424
// for j := 1 to 8 do
14576: LD_ADDR_VAR 0 3
14580: PUSH
14581: DOUBLE
14582: LD_INT 1
14584: DEC
14585: ST_TO_ADDR
14586: LD_INT 8
14588: PUSH
14589: FOR_TO
14590: IFFALSE 14675
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14592: LD_EXP 34
14596: PUSH
14597: LD_VAR 0 3
14601: ARRAY
14602: PUSH
14603: LD_EXP 31
14607: PUSH
14608: LD_VAR 0 2
14612: ARRAY
14613: PUSH
14614: LD_EXP 31
14618: PUSH
14619: LD_VAR 0 3
14623: ARRAY
14624: NONEQUAL
14625: PUSH
14626: LD_EXP 36
14630: NOT
14631: PUSH
14632: LD_VAR 0 2
14636: PUSH
14637: LD_VAR 0 3
14641: NONEQUAL
14642: AND
14643: OR
14644: AND
14645: IFFALSE 14673
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14647: LD_VAR 0 3
14651: PPUSH
14652: LD_EXP 55
14656: PUSH
14657: LD_EXP 34
14661: PUSH
14662: LD_VAR 0 2
14666: ARRAY
14667: ARRAY
14668: PPUSH
14669: CALL_OW 333
14673: GO 14589
14675: POP
14676: POP
// end ;
14677: GO 14537
14679: POP
14680: POP
// end ;
14681: LD_VAR 0 1
14685: RET
// export function EndBuildUp ; var i , j ; begin
14686: LD_INT 0
14688: PPUSH
14689: PPUSH
14690: PPUSH
// BuildUpTimeActive := false ;
14691: LD_ADDR_EXP 56
14695: PUSH
14696: LD_INT 0
14698: ST_TO_ADDR
// for i := 1 to 8 do
14699: LD_ADDR_VAR 0 2
14703: PUSH
14704: DOUBLE
14705: LD_INT 1
14707: DEC
14708: ST_TO_ADDR
14709: LD_INT 8
14711: PUSH
14712: FOR_TO
14713: IFFALSE 14854
// if Side_Positions [ i ] then
14715: LD_EXP 34
14719: PUSH
14720: LD_VAR 0 2
14724: ARRAY
14725: IFFALSE 14852
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14727: LD_EXP 55
14731: PUSH
14732: LD_EXP 34
14736: PUSH
14737: LD_VAR 0 2
14741: ARRAY
14742: ARRAY
14743: PPUSH
14744: LD_INT 0
14746: PPUSH
14747: CALL_OW 424
// for j := 1 to 8 do
14751: LD_ADDR_VAR 0 3
14755: PUSH
14756: DOUBLE
14757: LD_INT 1
14759: DEC
14760: ST_TO_ADDR
14761: LD_INT 8
14763: PUSH
14764: FOR_TO
14765: IFFALSE 14850
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14767: LD_EXP 34
14771: PUSH
14772: LD_VAR 0 3
14776: ARRAY
14777: PUSH
14778: LD_EXP 31
14782: PUSH
14783: LD_VAR 0 2
14787: ARRAY
14788: PUSH
14789: LD_EXP 31
14793: PUSH
14794: LD_VAR 0 3
14798: ARRAY
14799: NONEQUAL
14800: PUSH
14801: LD_EXP 36
14805: NOT
14806: PUSH
14807: LD_VAR 0 2
14811: PUSH
14812: LD_VAR 0 3
14816: NONEQUAL
14817: AND
14818: OR
14819: AND
14820: IFFALSE 14848
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14822: LD_VAR 0 3
14826: PPUSH
14827: LD_EXP 55
14831: PUSH
14832: LD_EXP 34
14836: PUSH
14837: LD_VAR 0 2
14841: ARRAY
14842: ARRAY
14843: PPUSH
14844: CALL_OW 334
14848: GO 14764
14850: POP
14851: POP
// end ;
14852: GO 14712
14854: POP
14855: POP
// end ;
14856: LD_VAR 0 1
14860: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14861: LD_EXP 56
14865: IFFALSE 15040
14867: GO 14869
14869: DISABLE
14870: LD_INT 0
14872: PPUSH
14873: PPUSH
// begin for i := 1 to 8 do
14874: LD_ADDR_VAR 0 1
14878: PUSH
14879: DOUBLE
14880: LD_INT 1
14882: DEC
14883: ST_TO_ADDR
14884: LD_INT 8
14886: PUSH
14887: FOR_TO
14888: IFFALSE 15037
// if Side_Positions [ i ] then
14890: LD_EXP 34
14894: PUSH
14895: LD_VAR 0 1
14899: ARRAY
14900: IFFALSE 15035
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14902: LD_ADDR_VAR 0 2
14906: PUSH
14907: LD_EXP 55
14911: PUSH
14912: LD_EXP 34
14916: PUSH
14917: LD_VAR 0 1
14921: ARRAY
14922: ARRAY
14923: PPUSH
14924: LD_INT 2
14926: PUSH
14927: LD_INT 21
14929: PUSH
14930: LD_INT 1
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 21
14939: PUSH
14940: LD_INT 2
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: LIST
14951: PUSH
14952: LD_INT 22
14954: PUSH
14955: LD_OWVAR 2
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PPUSH
14968: CALL_OW 70
14972: PUSH
14973: FOR_IN
14974: IFFALSE 15033
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14976: LD_EXP 31
14980: PUSH
14981: LD_VAR 0 1
14985: ARRAY
14986: PUSH
14987: LD_EXP 31
14991: PUSH
14992: LD_OWVAR 2
14996: ARRAY
14997: NONEQUAL
14998: PUSH
14999: LD_EXP 36
15003: NOT
15004: PUSH
15005: LD_VAR 0 1
15009: PUSH
15010: LD_OWVAR 2
15014: NONEQUAL
15015: AND
15016: OR
15017: IFFALSE 15031
// ComMoveToArea ( un , BuildUpEscape ) ;
15019: LD_VAR 0 2
15023: PPUSH
15024: LD_INT 17
15026: PPUSH
15027: CALL_OW 113
15031: GO 14973
15033: POP
15034: POP
15035: GO 14887
15037: POP
15038: POP
// enable ;
15039: ENABLE
// end ;
15040: PPOPN 2
15042: END
// every 0 0$1 trigger def_builduptime do
15043: LD_EXP 14
15047: IFFALSE 15073
15049: GO 15051
15051: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
15052: LD_INT 8400
15054: PUSH
15055: LD_EXP 14
15059: PUSH
15060: LD_INT 2100
15062: MUL
15063: PLUS
15064: PPUSH
15065: CALL_OW 67
// EndBuildUp ;
15069: CALL 14686 0 0
// end ;
15073: END
