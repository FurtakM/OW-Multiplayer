// export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , buildUpTime_Delay , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 40
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 19
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 16
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 20
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 18
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 17
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 40
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 19
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 16
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 20
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 18
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 17
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; for i := 1 to 8 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 8
 398: PUSH
 399: FOR_TO
 400: IFFALSE 487
// if Multiplayer_GetPlayerIsSpec ( i ) then
 402: LD_VAR 0 2
 406: PPUSH
 407: CALL_OW 530
 411: IFFALSE 485
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 413: LD_ADDR_EXP 19
 417: PUSH
 418: LD_EXP 19
 422: PPUSH
 423: LD_VAR 0 2
 427: PPUSH
 428: LD_INT 0
 430: PPUSH
 431: CALL_OW 1
 435: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 436: LD_ADDR_EXP 17
 440: PUSH
 441: LD_EXP 17
 445: PPUSH
 446: LD_EXP 16
 450: PUSH
 451: LD_VAR 0 2
 455: ARRAY
 456: PPUSH
 457: LD_EXP 17
 461: PUSH
 462: LD_EXP 16
 466: PUSH
 467: LD_VAR 0 2
 471: ARRAY
 472: ARRAY
 473: PUSH
 474: LD_VAR 0 2
 478: DIFF
 479: PPUSH
 480: CALL_OW 1
 484: ST_TO_ADDR
// end ;
 485: GO 399
 487: POP
 488: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 489: LD_ADDR_EXP 22
 493: PUSH
 494: LD_INT 0
 496: PUSH
 497: LD_INT 0
 499: PUSH
 500: LD_INT 0
 502: PUSH
 503: LD_INT 0
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: LD_INT 0
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: ST_TO_ADDR
// for i := 1 to 8 do
 520: LD_ADDR_VAR 0 2
 524: PUSH
 525: DOUBLE
 526: LD_INT 1
 528: DEC
 529: ST_TO_ADDR
 530: LD_INT 8
 532: PUSH
 533: FOR_TO
 534: IFFALSE 581
// if Side_Positions [ i ] then
 536: LD_EXP 19
 540: PUSH
 541: LD_VAR 0 2
 545: ARRAY
 546: IFFALSE 579
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 548: LD_ADDR_EXP 22
 552: PUSH
 553: LD_EXP 22
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_VAR 0 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 1
 578: ST_TO_ADDR
 579: GO 533
 581: POP
 582: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 583: LD_ADDR_EXP 21
 587: PUSH
 588: LD_EXP 16
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: EMPTY
 597: LIST
 598: DIFF
 599: PUSH
 600: LD_INT 1
 602: GREATER
 603: ST_TO_ADDR
// if Multiplayer then
 604: LD_OWVAR 4
 608: IFFALSE 810
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 610: LD_ADDR_EXP 42
 614: PUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 426
 622: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 623: LD_ADDR_EXP 43
 627: PUSH
 628: LD_INT 1
 630: PPUSH
 631: CALL_OW 426
 635: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 636: LD_ADDR_EXP 44
 640: PUSH
 641: LD_INT 2
 643: PPUSH
 644: CALL_OW 426
 648: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 649: LD_ADDR_EXP 45
 653: PUSH
 654: LD_INT 3
 656: PPUSH
 657: CALL_OW 426
 661: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 662: LD_ADDR_EXP 46
 666: PUSH
 667: LD_INT 4
 669: PPUSH
 670: CALL_OW 426
 674: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 675: LD_ADDR_EXP 47
 679: PUSH
 680: LD_INT 5
 682: PPUSH
 683: CALL_OW 426
 687: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 688: LD_ADDR_EXP 48
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 696: LD_ADDR_EXP 49
 700: PUSH
 701: LD_INT 10
 703: PPUSH
 704: CALL_OW 426
 708: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 709: LD_ADDR_EXP 50
 713: PUSH
 714: LD_INT 11
 716: PPUSH
 717: CALL_OW 426
 721: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 722: LD_ADDR_EXP 51
 726: PUSH
 727: LD_INT 12
 729: PPUSH
 730: CALL_OW 426
 734: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 735: LD_ADDR_EXP 52
 739: PUSH
 740: LD_INT 13
 742: PPUSH
 743: CALL_OW 426
 747: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 748: LD_ADDR_EXP 53
 752: PUSH
 753: LD_INT 14
 755: PPUSH
 756: CALL_OW 426
 760: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 761: LD_ADDR_EXP 54
 765: PUSH
 766: LD_INT 17
 768: PPUSH
 769: CALL_OW 426
 773: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 774: LD_ADDR_EXP 55
 778: PUSH
 779: LD_INT 20
 781: PPUSH
 782: CALL_OW 426
 786: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 787: LD_ADDR_VAR 0 3
 791: PUSH
 792: LD_INT 22
 794: PPUSH
 795: CALL_OW 426
 799: ST_TO_ADDR
// def_win_rules = 0 ;
 800: LD_ADDR_EXP 15
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// end else
 808: GO 942
// begin Randomize ;
 810: CALL_OW 10
// def_base_level := 2 ;
 814: LD_ADDR_EXP 42
 818: PUSH
 819: LD_INT 2
 821: ST_TO_ADDR
// def_amount_of_people := 0 ;
 822: LD_ADDR_EXP 43
 826: PUSH
 827: LD_INT 0
 829: ST_TO_ADDR
// def_skill_level := 1 ;
 830: LD_ADDR_EXP 44
 834: PUSH
 835: LD_INT 1
 837: ST_TO_ADDR
// def_starting_resources := 2 ;
 838: LD_ADDR_EXP 45
 842: PUSH
 843: LD_INT 2
 845: ST_TO_ADDR
// def_shipments_density := 1 ;
 846: LD_ADDR_EXP 46
 850: PUSH
 851: LD_INT 1
 853: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 854: LD_ADDR_EXP 47
 858: PUSH
 859: LD_INT 0
 861: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 862: LD_ADDR_EXP 48
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// def_shared_vision := 1 ;
 870: LD_ADDR_EXP 49
 874: PUSH
 875: LD_INT 1
 877: ST_TO_ADDR
// def_morale_flags := 1 ;
 878: LD_ADDR_EXP 50
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// def_siberite_detection := 1 ;
 886: LD_ADDR_EXP 51
 890: PUSH
 891: LD_INT 1
 893: ST_TO_ADDR
// def_people_respawning := 2 ;
 894: LD_ADDR_EXP 52
 898: PUSH
 899: LD_INT 2
 901: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 902: LD_ADDR_EXP 53
 906: PUSH
 907: LD_INT 3
 909: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 910: LD_ADDR_EXP 54
 914: PUSH
 915: LD_INT 0
 917: ST_TO_ADDR
// def_builduptime := 1 ;
 918: LD_ADDR_EXP 55
 922: PUSH
 923: LD_INT 1
 925: ST_TO_ADDR
// tech_level = 4 ;
 926: LD_ADDR_VAR 0 3
 930: PUSH
 931: LD_INT 4
 933: ST_TO_ADDR
// def_win_rules = 0 ;
 934: LD_ADDR_EXP 15
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// end ; if def_game_rules = 0 then
 942: LD_EXP 41
 946: PUSH
 947: LD_INT 0
 949: EQUAL
 950: IFFALSE 977
// begin if isSGUI then
 952: LD_OWVAR 83
 956: IFFALSE 964
// setMpTechs ( ) else
 958: CALL 13816 0 0
 962: GO 977
// begin SetMpTechLevel ( tech_level + 1 ) ;
 964: LD_VAR 0 3
 968: PUSH
 969: LD_INT 1
 971: PLUS
 972: PPUSH
 973: CALL 13963 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 977: LD_ADDR_EXP 1
 981: PUSH
 982: LD_INT 0
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 1
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_EXP 42
1000: PUSH
1001: LD_INT 1
1003: PLUS
1004: ARRAY
1005: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
1006: LD_ADDR_EXP 2
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: LD_INT 0
1016: PUSH
1017: LD_INT 3
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: PUSH
1025: LD_EXP 42
1029: PUSH
1030: LD_INT 1
1032: PLUS
1033: ARRAY
1034: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1035: LD_ADDR_EXP 3
1039: PUSH
1040: LD_INT 9
1042: PUSH
1043: LD_INT 12
1045: PUSH
1046: LD_INT 15
1048: PUSH
1049: LD_INT 24
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: PUSH
1058: LD_EXP 43
1062: PUSH
1063: LD_INT 1
1065: PLUS
1066: ARRAY
1067: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1068: LD_ADDR_EXP 4
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 3
1078: PUSH
1079: LD_INT 4
1081: PUSH
1082: LD_INT 5
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_EXP 44
1095: PUSH
1096: LD_INT 1
1098: PLUS
1099: ARRAY
1100: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1101: LD_ADDR_EXP 6
1105: PUSH
1106: LD_INT 0
1108: PUSH
1109: LD_INT 0
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 30
1122: PUSH
1123: LD_INT 0
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 50
1136: PUSH
1137: LD_INT 20
1139: PUSH
1140: LD_INT 0
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 80
1150: PUSH
1151: LD_INT 40
1153: PUSH
1154: LD_INT 20
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_EXP 45
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: ARRAY
1177: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1178: LD_ADDR_EXP 5
1182: PUSH
1183: LD_INT 10
1185: PUSH
1186: EMPTY
1187: LIST
1188: PUSH
1189: LD_INT 7
1191: PUSH
1192: LD_INT 14
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 6
1201: PUSH
1202: LD_INT 12
1204: PUSH
1205: LD_INT 18
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 5
1215: PUSH
1216: LD_INT 10
1218: PUSH
1219: LD_INT 15
1221: PUSH
1222: LD_INT 20
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: LD_EXP 45
1241: PUSH
1242: LD_INT 1
1244: PLUS
1245: ARRAY
1246: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 ] [ def_shipments_density + 1 ] ;
1247: LD_ADDR_EXP 7
1251: PUSH
1252: LD_INT 150
1254: PUSH
1255: LD_INT 125
1257: PUSH
1258: LD_INT 100
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: LD_EXP 46
1270: PUSH
1271: LD_INT 1
1273: PLUS
1274: ARRAY
1275: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1276: LD_ADDR_EXP 11
1280: PUSH
1281: LD_INT 0
1283: PUSH
1284: LD_INT 10500
1286: PUSH
1287: LD_INT 6300
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: PUSH
1295: LD_EXP 52
1299: PUSH
1300: LD_INT 1
1302: PLUS
1303: ARRAY
1304: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1305: LD_ADDR_EXP 12
1309: PUSH
1310: LD_INT 0
1312: PUSH
1313: LD_INT 31500
1315: PUSH
1316: LD_INT 10500
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PUSH
1324: LD_EXP 52
1328: PUSH
1329: LD_INT 1
1331: PLUS
1332: ARRAY
1333: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1334: LD_ADDR_EXP 9
1338: PUSH
1339: LD_INT 0
1341: PUSH
1342: LD_INT 1
1344: PUSH
1345: LD_INT 2
1347: PUSH
1348: LD_INT 3
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_EXP 53
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: ARRAY
1366: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1367: LD_ADDR_EXP 8
1371: PUSH
1372: LD_INT 1
1374: NEG
1375: PUSH
1376: LD_INT 350
1378: PUSH
1379: LD_INT 700
1381: PUSH
1382: LD_INT 1400
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: PUSH
1395: LD_EXP 50
1399: PUSH
1400: LD_INT 1
1402: PLUS
1403: ARRAY
1404: ST_TO_ADDR
// battle_flags_id = [ ] ;
1405: LD_ADDR_EXP 30
1409: PUSH
1410: EMPTY
1411: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1412: LD_ADDR_EXP 14
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: LD_INT 63000
1425: PUSH
1426: LD_INT 126000
1428: PUSH
1429: LD_INT 189000
1431: PUSH
1432: LD_INT 252000
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_EXP 54
1447: PUSH
1448: LD_INT 1
1450: PLUS
1451: ARRAY
1452: ST_TO_ADDR
// if def_builduptime = 0 then
1453: LD_EXP 55
1457: PUSH
1458: LD_INT 0
1460: EQUAL
1461: IFFALSE 1473
// buildUpTime_Delay = 0 else
1463: LD_ADDR_EXP 13
1467: PUSH
1468: LD_INT 0
1470: ST_TO_ADDR
1471: GO 1491
// buildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
1473: LD_ADDR_EXP 13
1477: PUSH
1478: LD_INT 8400
1480: PUSH
1481: LD_INT 2100
1483: PUSH
1484: LD_EXP 55
1488: MUL
1489: PLUS
1490: ST_TO_ADDR
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
1491: LD_ADDR_EXP 39
1495: PUSH
1496: LD_INT 9
1498: PUSH
1499: LD_INT 10
1501: PUSH
1502: LD_INT 11
1504: PUSH
1505: LD_INT 12
1507: PUSH
1508: LD_INT 13
1510: PUSH
1511: LD_INT 14
1513: PUSH
1514: LD_INT 15
1516: PUSH
1517: LD_INT 16
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: ST_TO_ADDR
// end ;
1530: LD_VAR 0 1
1534: RET
// function init_map ; var i , j ; begin
1535: LD_INT 0
1537: PPUSH
1538: PPUSH
1539: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1540: LD_ADDR_EXP 26
1544: PUSH
1545: LD_INT 17
1547: PUSH
1548: LD_INT 4
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: LD_INT 72
1557: PUSH
1558: LD_INT 5
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: LD_INT 157
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PUSH
1575: LD_INT 205
1577: PUSH
1578: LD_INT 111
1580: PUSH
1581: EMPTY
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 221
1587: PUSH
1588: LD_INT 195
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 169
1597: PUSH
1598: LD_INT 196
1600: PUSH
1601: EMPTY
1602: LIST
1603: LIST
1604: PUSH
1605: LD_INT 93
1607: PUSH
1608: LD_INT 177
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 52
1617: PUSH
1618: LD_INT 92
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1635: LD_ADDR_EXP 27
1639: PUSH
1640: LD_INT 17
1642: PUSH
1643: LD_INT 4
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 16
1652: PUSH
1653: LD_INT 23
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 72
1666: PUSH
1667: LD_INT 5
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 88
1676: PUSH
1677: LD_INT 28
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 157
1690: PUSH
1691: LD_INT 22
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 133
1700: PUSH
1701: LD_INT 12
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: PUSH
1712: LD_INT 205
1714: PUSH
1715: LD_INT 111
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 200
1724: PUSH
1725: LD_INT 95
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PUSH
1732: EMPTY
1733: LIST
1734: LIST
1735: PUSH
1736: LD_INT 221
1738: PUSH
1739: LD_INT 195
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 249
1748: PUSH
1749: LD_INT 190
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 169
1762: PUSH
1763: LD_INT 196
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 180
1772: PUSH
1773: LD_INT 197
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PUSH
1784: LD_INT 93
1786: PUSH
1787: LD_INT 177
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: LD_INT 114
1796: PUSH
1797: LD_INT 194
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: PUSH
1808: LD_INT 52
1810: PUSH
1811: LD_INT 92
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 58
1820: PUSH
1821: LD_INT 107
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PUSH
1832: EMPTY
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1842: LD_ADDR_EXP 28
1846: PUSH
1847: LD_INT 12
1849: PUSH
1850: LD_INT 12
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 99
1859: PUSH
1860: LD_INT 19
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: LD_INT 139
1869: PUSH
1870: LD_INT 5
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: PUSH
1877: LD_INT 207
1879: PUSH
1880: LD_INT 100
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 244
1889: PUSH
1890: LD_INT 181
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 183
1899: PUSH
1900: LD_INT 196
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PUSH
1907: LD_INT 117
1909: PUSH
1910: LD_INT 195
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 54
1919: PUSH
1920: LD_INT 104
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1937: LD_ADDR_EXP 29
1941: PUSH
1942: EMPTY
1943: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1944: LD_ADDR_EXP 23
1948: PUSH
1949: LD_INT 32
1951: PUSH
1952: LD_INT 24
1954: PUSH
1955: LD_INT 2
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: LIST
1962: PUSH
1963: LD_INT 87
1965: PUSH
1966: LD_INT 18
1968: PUSH
1969: LD_INT 3
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 146
1979: PUSH
1980: LD_INT 28
1982: PUSH
1983: LD_INT 3
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: LIST
1990: PUSH
1991: LD_INT 188
1993: PUSH
1994: LD_INT 103
1996: PUSH
1997: LD_INT 4
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: LIST
2004: PUSH
2005: LD_INT 224
2007: PUSH
2008: LD_INT 180
2010: PUSH
2011: LD_INT 5
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: LIST
2018: PUSH
2019: LD_INT 168
2021: PUSH
2022: LD_INT 180
2024: PUSH
2025: LD_INT 0
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 105
2035: PUSH
2036: LD_INT 170
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: LIST
2046: PUSH
2047: LD_INT 71
2049: PUSH
2050: LD_INT 102
2052: PUSH
2053: LD_INT 1
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: LIST
2065: LIST
2066: LIST
2067: LIST
2068: LIST
2069: LIST
2070: ST_TO_ADDR
// for i in depot_def do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: LD_EXP 23
2080: PUSH
2081: FOR_IN
2082: IFFALSE 2158
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
2084: LD_ADDR_EXP 25
2088: PUSH
2089: LD_EXP 25
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 3
2110: ARRAY
2111: PPUSH
2112: LD_INT 4
2114: NEG
2115: PPUSH
2116: CALL_OW 272
2120: PUSH
2121: LD_VAR 0 2
2125: PUSH
2126: LD_INT 2
2128: ARRAY
2129: PPUSH
2130: LD_VAR 0 2
2134: PUSH
2135: LD_INT 3
2137: ARRAY
2138: PPUSH
2139: LD_INT 4
2141: NEG
2142: PPUSH
2143: CALL_OW 273
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: EMPTY
2153: LIST
2154: ADD
2155: ST_TO_ADDR
2156: GO 2081
2158: POP
2159: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
2160: LD_ADDR_EXP 24
2164: PUSH
2165: LD_INT 50
2167: PUSH
2168: LD_INT 40
2170: PUSH
2171: LD_INT 5
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 47
2181: PUSH
2182: LD_INT 17
2184: PUSH
2185: LD_INT 4
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 29
2195: PUSH
2196: LD_INT 39
2198: PUSH
2199: LD_INT 0
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: LIST
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: PUSH
2212: LD_INT 107
2214: PUSH
2215: LD_INT 27
2217: PUSH
2218: LD_INT 4
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: PUSH
2226: LD_INT 67
2228: PUSH
2229: LD_INT 10
2231: PUSH
2232: LD_INT 1
2234: PUSH
2235: EMPTY
2236: LIST
2237: LIST
2238: LIST
2239: PUSH
2240: LD_INT 91
2242: PUSH
2243: LD_INT 35
2245: PUSH
2246: LD_INT 0
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 165
2261: PUSH
2262: LD_INT 44
2264: PUSH
2265: LD_INT 5
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 123
2275: PUSH
2276: LD_INT 16
2278: PUSH
2279: LD_INT 2
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 141
2289: PUSH
2290: LD_INT 39
2292: PUSH
2293: LD_INT 0
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 179
2308: PUSH
2309: LD_INT 85
2311: PUSH
2312: LD_INT 3
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 172
2322: PUSH
2323: LD_INT 102
2325: PUSH
2326: LD_INT 1
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: PUSH
2334: LD_INT 196
2336: PUSH
2337: LD_INT 118
2339: PUSH
2340: LD_INT 5
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: LIST
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: LIST
2352: PUSH
2353: LD_INT 210
2355: PUSH
2356: LD_INT 182
2358: PUSH
2359: LD_INT 1
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: LIST
2366: PUSH
2367: LD_INT 226
2369: PUSH
2370: LD_INT 164
2372: PUSH
2373: LD_INT 3
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: PUSH
2381: LD_INT 209
2383: PUSH
2384: LD_INT 164
2386: PUSH
2387: LD_INT 2
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: LIST
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: LIST
2399: PUSH
2400: LD_INT 156
2402: PUSH
2403: LD_INT 183
2405: PUSH
2406: LD_INT 1
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 184
2416: PUSH
2417: LD_INT 184
2419: PUSH
2420: LD_INT 4
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 161
2430: PUSH
2431: LD_INT 166
2433: PUSH
2434: LD_INT 3
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: PUSH
2447: LD_INT 86
2449: PUSH
2450: LD_INT 156
2452: PUSH
2453: LD_INT 2
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: LD_INT 124
2463: PUSH
2464: LD_INT 180
2466: PUSH
2467: LD_INT 4
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: PUSH
2475: LD_INT 106
2477: PUSH
2478: LD_INT 155
2480: PUSH
2481: LD_INT 3
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: LIST
2493: PUSH
2494: LD_INT 87
2496: PUSH
2497: LD_INT 102
2499: PUSH
2500: LD_INT 4
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 63
2510: PUSH
2511: LD_INT 83
2513: PUSH
2514: LD_INT 3
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: LIST
2521: PUSH
2522: LD_INT 79
2524: PUSH
2525: LD_INT 120
2527: PUSH
2528: LD_INT 0
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: PUSH
2541: EMPTY
2542: LIST
2543: LIST
2544: LIST
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: ST_TO_ADDR
// for i = 1 to Side_Positions do
2551: LD_ADDR_VAR 0 2
2555: PUSH
2556: DOUBLE
2557: LD_INT 1
2559: DEC
2560: ST_TO_ADDR
2561: LD_EXP 19
2565: PUSH
2566: FOR_TO
2567: IFFALSE 2697
// begin if not Side_Positions [ i ] then
2569: LD_EXP 19
2573: PUSH
2574: LD_VAR 0 2
2578: ARRAY
2579: NOT
2580: IFFALSE 2584
// continue ;
2582: GO 2566
// if def_extra_oil_deposits then
2584: LD_EXP 47
2588: IFFALSE 2646
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2590: LD_ADDR_VAR 0 3
2594: PUSH
2595: LD_EXP 27
2599: PUSH
2600: LD_EXP 19
2604: PUSH
2605: LD_VAR 0 2
2609: ARRAY
2610: ARRAY
2611: PUSH
2612: FOR_IN
2613: IFFALSE 2642
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2615: LD_VAR 0 3
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: LD_VAR 0 3
2628: PUSH
2629: LD_INT 2
2631: ARRAY
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: CALL_OW 62
2640: GO 2612
2642: POP
2643: POP
2644: GO 2695
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2646: LD_EXP 26
2650: PUSH
2651: LD_EXP 19
2655: PUSH
2656: LD_VAR 0 2
2660: ARRAY
2661: ARRAY
2662: PUSH
2663: LD_INT 1
2665: ARRAY
2666: PPUSH
2667: LD_EXP 26
2671: PUSH
2672: LD_EXP 19
2676: PUSH
2677: LD_VAR 0 2
2681: ARRAY
2682: ARRAY
2683: PUSH
2684: LD_INT 2
2686: ARRAY
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: CALL_OW 62
// end ;
2695: GO 2566
2697: POP
2698: POP
// if def_extra_sib_deposits then
2699: LD_EXP 48
2703: IFFALSE 2857
// for i = 1 to Side_Positions do
2705: LD_ADDR_VAR 0 2
2709: PUSH
2710: DOUBLE
2711: LD_INT 1
2713: DEC
2714: ST_TO_ADDR
2715: LD_EXP 19
2719: PUSH
2720: FOR_TO
2721: IFFALSE 2855
// begin if not Side_Positions [ i ] then
2723: LD_EXP 19
2727: PUSH
2728: LD_VAR 0 2
2732: ARRAY
2733: NOT
2734: IFFALSE 2738
// continue ;
2736: GO 2720
// if def_extra_sib_deposits = 2 then
2738: LD_EXP 48
2742: PUSH
2743: LD_INT 2
2745: EQUAL
2746: IFFALSE 2804
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2748: LD_ADDR_VAR 0 3
2752: PUSH
2753: LD_EXP 29
2757: PUSH
2758: LD_EXP 19
2762: PUSH
2763: LD_VAR 0 2
2767: ARRAY
2768: ARRAY
2769: PUSH
2770: FOR_IN
2771: IFFALSE 2800
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 1
2780: ARRAY
2781: PPUSH
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 2
2789: ARRAY
2790: PPUSH
2791: LD_INT 3
2793: PPUSH
2794: CALL_OW 62
2798: GO 2770
2800: POP
2801: POP
2802: GO 2853
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2804: LD_EXP 28
2808: PUSH
2809: LD_EXP 19
2813: PUSH
2814: LD_VAR 0 2
2818: ARRAY
2819: ARRAY
2820: PUSH
2821: LD_INT 1
2823: ARRAY
2824: PPUSH
2825: LD_EXP 28
2829: PUSH
2830: LD_EXP 19
2834: PUSH
2835: LD_VAR 0 2
2839: ARRAY
2840: ARRAY
2841: PUSH
2842: LD_INT 2
2844: ARRAY
2845: PPUSH
2846: LD_INT 3
2848: PPUSH
2849: CALL_OW 62
// end ;
2853: GO 2720
2855: POP
2856: POP
// end ;
2857: LD_VAR 0 1
2861: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2862: LD_INT 0
2864: PPUSH
2865: PPUSH
2866: PPUSH
// if not Team_Game then
2867: LD_EXP 21
2871: NOT
2872: IFFALSE 2970
// begin for i = 1 to 8 do
2874: LD_ADDR_VAR 0 2
2878: PUSH
2879: DOUBLE
2880: LD_INT 1
2882: DEC
2883: ST_TO_ADDR
2884: LD_INT 8
2886: PUSH
2887: FOR_TO
2888: IFFALSE 2966
// for j = 1 to 8 do
2890: LD_ADDR_VAR 0 3
2894: PUSH
2895: DOUBLE
2896: LD_INT 1
2898: DEC
2899: ST_TO_ADDR
2900: LD_INT 8
2902: PUSH
2903: FOR_TO
2904: IFFALSE 2962
// if i <> j then
2906: LD_VAR 0 2
2910: PUSH
2911: LD_VAR 0 3
2915: NONEQUAL
2916: IFFALSE 2940
// SetAttitude ( i , j , att_neutral , true ) else
2918: LD_VAR 0 2
2922: PPUSH
2923: LD_VAR 0 3
2927: PPUSH
2928: LD_INT 0
2930: PPUSH
2931: LD_INT 1
2933: PPUSH
2934: CALL_OW 80
2938: GO 2960
// SetAttitude ( i , j , att_friend , true ) ;
2940: LD_VAR 0 2
2944: PPUSH
2945: LD_VAR 0 3
2949: PPUSH
2950: LD_INT 1
2952: PPUSH
2953: LD_INT 1
2955: PPUSH
2956: CALL_OW 80
2960: GO 2903
2962: POP
2963: POP
2964: GO 2887
2966: POP
2967: POP
// end else
2968: GO 3145
// begin if def_shared_vision then
2970: LD_EXP 49
2974: IFFALSE 3039
// begin for i in Teams do
2976: LD_ADDR_VAR 0 2
2980: PUSH
2981: LD_EXP 17
2985: PUSH
2986: FOR_IN
2987: IFFALSE 3037
// for j = 2 to i do
2989: LD_ADDR_VAR 0 3
2993: PUSH
2994: DOUBLE
2995: LD_INT 2
2997: DEC
2998: ST_TO_ADDR
2999: LD_VAR 0 2
3003: PUSH
3004: FOR_TO
3005: IFFALSE 3033
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
3007: LD_VAR 0 2
3011: PUSH
3012: LD_VAR 0 3
3016: ARRAY
3017: PPUSH
3018: LD_VAR 0 2
3022: PUSH
3023: LD_INT 1
3025: ARRAY
3026: PPUSH
3027: CALL_OW 343
3031: GO 3004
3033: POP
3034: POP
3035: GO 2986
3037: POP
3038: POP
// end ; for i = 1 to 8 do
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: DOUBLE
3045: LD_INT 1
3047: DEC
3048: ST_TO_ADDR
3049: LD_INT 8
3051: PUSH
3052: FOR_TO
3053: IFFALSE 3143
// for j = 1 to 8 do
3055: LD_ADDR_VAR 0 3
3059: PUSH
3060: DOUBLE
3061: LD_INT 1
3063: DEC
3064: ST_TO_ADDR
3065: LD_INT 8
3067: PUSH
3068: FOR_TO
3069: IFFALSE 3139
// if Side_Teams [ i ] = Side_Teams [ j ] then
3071: LD_EXP 16
3075: PUSH
3076: LD_VAR 0 2
3080: ARRAY
3081: PUSH
3082: LD_EXP 16
3086: PUSH
3087: LD_VAR 0 3
3091: ARRAY
3092: EQUAL
3093: IFFALSE 3117
// SetAttitude ( i , j , att_friend , true ) else
3095: LD_VAR 0 2
3099: PPUSH
3100: LD_VAR 0 3
3104: PPUSH
3105: LD_INT 1
3107: PPUSH
3108: LD_INT 1
3110: PPUSH
3111: CALL_OW 80
3115: GO 3137
// SetAttitude ( i , j , att_enemy , true ) ;
3117: LD_VAR 0 2
3121: PPUSH
3122: LD_VAR 0 3
3126: PPUSH
3127: LD_INT 2
3129: PPUSH
3130: LD_INT 1
3132: PPUSH
3133: CALL_OW 80
3137: GO 3068
3139: POP
3140: POP
3141: GO 3052
3143: POP
3144: POP
// end ; end ;
3145: LD_VAR 0 1
3149: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3150: LD_INT 0
3152: PPUSH
3153: PPUSH
3154: PPUSH
3155: PPUSH
// result := [ ] ;
3156: LD_ADDR_VAR 0 7
3160: PUSH
3161: EMPTY
3162: ST_TO_ADDR
// for i := 1 to count do
3163: LD_ADDR_VAR 0 8
3167: PUSH
3168: DOUBLE
3169: LD_INT 1
3171: DEC
3172: ST_TO_ADDR
3173: LD_VAR 0 1
3177: PUSH
3178: FOR_TO
3179: IFFALSE 3597
// begin uc_direction := Rand ( 0 , 5 ) ;
3181: LD_ADDR_OWVAR 24
3185: PUSH
3186: LD_INT 0
3188: PPUSH
3189: LD_INT 5
3191: PPUSH
3192: CALL_OW 12
3196: ST_TO_ADDR
// if commander then
3197: LD_LOC 1
3201: IFFALSE 3310
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3203: LD_ADDR_OWVAR 26
3207: PUSH
3208: LD_OWVAR 19
3212: PUSH
3213: LD_OWVAR 20
3217: ARRAY
3218: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3219: LD_INT 1
3221: PPUSH
3222: LD_INT 2
3224: PPUSH
3225: CALL_OW 12
3229: PPUSH
3230: LD_VAR 0 2
3234: PPUSH
3235: LD_EXP 4
3239: PUSH
3240: LD_INT 2
3242: PLUS
3243: PPUSH
3244: CALL_OW 380
// hc_importance := 105 ;
3248: LD_ADDR_OWVAR 32
3252: PUSH
3253: LD_INT 105
3255: ST_TO_ADDR
// commander := false ;
3256: LD_ADDR_LOC 1
3260: PUSH
3261: LD_INT 0
3263: ST_TO_ADDR
// if Multiplayer then
3264: LD_OWVAR 4
3268: IFFALSE 3308
// begin hc_gallery := MULTIAVATARS ;
3270: LD_ADDR_OWVAR 33
3274: PUSH
3275: LD_STRING MULTIAVATARS
3277: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3278: LD_ADDR_OWVAR 34
3282: PUSH
3283: LD_OWVAR 20
3287: PPUSH
3288: CALL_OW 525
3292: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3293: LD_ADDR_OWVAR 27
3297: PUSH
3298: LD_OWVAR 20
3302: PPUSH
3303: CALL_OW 526
3307: ST_TO_ADDR
// end ; end else
3308: GO 3373
// begin hc_name :=  ;
3310: LD_ADDR_OWVAR 26
3314: PUSH
3315: LD_STRING 
3317: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3318: LD_INT 1
3320: PPUSH
3321: LD_INT 2
3323: PPUSH
3324: CALL_OW 12
3328: PPUSH
3329: LD_VAR 0 2
3333: PPUSH
3334: LD_EXP 4
3338: PPUSH
3339: CALL_OW 380
// hc_importance := 0 ;
3343: LD_ADDR_OWVAR 32
3347: PUSH
3348: LD_INT 0
3350: ST_TO_ADDR
// if Multiplayer then
3351: LD_OWVAR 4
3355: IFFALSE 3373
// begin hc_gallery :=  ;
3357: LD_ADDR_OWVAR 33
3361: PUSH
3362: LD_STRING 
3364: ST_TO_ADDR
// hc_face_number := 0 ;
3365: LD_ADDR_OWVAR 34
3369: PUSH
3370: LD_INT 0
3372: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3373: LD_ADDR_VAR 0 10
3377: PUSH
3378: CALL_OW 44
3382: ST_TO_ADDR
// if global_defined then
3383: LD_LOC 3
3387: IFFALSE 3527
// begin if ( cl = class_soldier ) then
3389: LD_VAR 0 2
3393: PUSH
3394: LD_INT 1
3396: EQUAL
3397: IFFALSE 3417
// j := i + soldiers_created else
3399: LD_ADDR_VAR 0 9
3403: PUSH
3404: LD_VAR 0 8
3408: PUSH
3409: LD_LOC 4
3413: PLUS
3414: ST_TO_ADDR
3415: GO 3427
// j := i ;
3417: LD_ADDR_VAR 0 9
3421: PUSH
3422: LD_VAR 0 8
3426: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3427: LD_LOC 2
3431: PUSH
3432: LD_VAR 0 2
3436: ARRAY
3437: PUSH
3438: LD_VAR 0 9
3442: ARRAY
3443: PPUSH
3444: LD_VAR 0 10
3448: PPUSH
3449: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3453: LD_VAR 0 10
3457: PPUSH
3458: LD_INT 2
3460: PPUSH
3461: LD_LOC 2
3465: PUSH
3466: LD_VAR 0 2
3470: ARRAY
3471: PUSH
3472: LD_VAR 0 9
3476: ARRAY
3477: PPUSH
3478: LD_INT 2
3480: PPUSH
3481: CALL_OW 260
3485: PPUSH
3486: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3490: LD_VAR 0 10
3494: PPUSH
3495: LD_INT 1
3497: PPUSH
3498: LD_LOC 2
3502: PUSH
3503: LD_VAR 0 2
3507: ARRAY
3508: PUSH
3509: LD_VAR 0 9
3513: ARRAY
3514: PPUSH
3515: LD_INT 1
3517: PPUSH
3518: CALL_OW 260
3522: PPUSH
3523: CALL_OW 239
// end ; if building then
3527: LD_VAR 0 6
3531: IFFALSE 3549
// PlaceHumanInUnit ( un , building ) else
3533: LD_VAR 0 10
3537: PPUSH
3538: LD_VAR 0 6
3542: PPUSH
3543: CALL_OW 52
3547: GO 3576
// PlaceUnitXYR ( un , x , y , r , false ) ;
3549: LD_VAR 0 10
3553: PPUSH
3554: LD_VAR 0 3
3558: PPUSH
3559: LD_VAR 0 4
3563: PPUSH
3564: LD_VAR 0 5
3568: PPUSH
3569: LD_INT 0
3571: PPUSH
3572: CALL_OW 50
// result := result ^ [ un ] ;
3576: LD_ADDR_VAR 0 7
3580: PUSH
3581: LD_VAR 0 7
3585: PUSH
3586: LD_VAR 0 10
3590: PUSH
3591: EMPTY
3592: LIST
3593: ADD
3594: ST_TO_ADDR
// end ;
3595: GO 3178
3597: POP
3598: POP
// if not global_defined then
3599: LD_LOC 3
3603: NOT
3604: IFFALSE 3682
// if ( global_units >= cl ) then
3606: LD_LOC 2
3610: PUSH
3611: LD_VAR 0 2
3615: GREATEREQUAL
3616: IFFALSE 3657
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3618: LD_ADDR_LOC 2
3622: PUSH
3623: LD_LOC 2
3627: PPUSH
3628: LD_VAR 0 2
3632: PPUSH
3633: LD_LOC 2
3637: PUSH
3638: LD_VAR 0 2
3642: ARRAY
3643: PUSH
3644: LD_VAR 0 7
3648: ADD
3649: PPUSH
3650: CALL_OW 1
3654: ST_TO_ADDR
3655: GO 3682
// global_units := Replace ( global_units , cl , result ) ;
3657: LD_ADDR_LOC 2
3661: PUSH
3662: LD_LOC 2
3666: PPUSH
3667: LD_VAR 0 2
3671: PPUSH
3672: LD_VAR 0 7
3676: PPUSH
3677: CALL_OW 1
3681: ST_TO_ADDR
// if commander then
3682: LD_LOC 1
3686: IFFALSE 3733
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3688: LD_ADDR_EXP 31
3692: PUSH
3693: LD_EXP 31
3697: PPUSH
3698: LD_OWVAR 20
3702: PPUSH
3703: LD_EXP 31
3707: PUSH
3708: LD_OWVAR 20
3712: ARRAY
3713: PUSH
3714: LD_VAR 0 10
3718: ADD
3719: PPUSH
3720: CALL_OW 1
3724: ST_TO_ADDR
// commander := false ;
3725: LD_ADDR_LOC 1
3729: PUSH
3730: LD_INT 0
3732: ST_TO_ADDR
// end ; end ;
3733: LD_VAR 0 7
3737: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// if side in [ 0 , 9 ] then
3749: LD_VAR 0 1
3753: PUSH
3754: LD_INT 0
3756: PUSH
3757: LD_INT 9
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: IN
3764: IFFALSE 3768
// exit ;
3766: GO 4818
// pos := Side_Positions [ side ] ;
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: LD_EXP 19
3777: PUSH
3778: LD_VAR 0 1
3782: ARRAY
3783: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3784: LD_ADDR_OWVAR 21
3788: PUSH
3789: LD_EXP 20
3793: PUSH
3794: LD_VAR 0 1
3798: ARRAY
3799: ST_TO_ADDR
// uc_side := side ;
3800: LD_ADDR_OWVAR 20
3804: PUSH
3805: LD_VAR 0 1
3809: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3810: LD_ADDR_VAR 0 4
3814: PUSH
3815: LD_EXP 23
3819: PUSH
3820: LD_VAR 0 3
3824: ARRAY
3825: PUSH
3826: LD_INT 1
3828: ARRAY
3829: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3830: LD_ADDR_VAR 0 5
3834: PUSH
3835: LD_EXP 23
3839: PUSH
3840: LD_VAR 0 3
3844: ARRAY
3845: PUSH
3846: LD_INT 2
3848: ARRAY
3849: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3850: LD_ADDR_VAR 0 6
3854: PUSH
3855: LD_EXP 23
3859: PUSH
3860: LD_VAR 0 3
3864: ARRAY
3865: PUSH
3866: LD_INT 3
3868: ARRAY
3869: ST_TO_ADDR
// if is_depot then
3870: LD_EXP 1
3874: IFFALSE 4007
// begin bc_type = b_depot ;
3876: LD_ADDR_OWVAR 42
3880: PUSH
3881: LD_INT 0
3883: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3884: LD_ADDR_VAR 0 10
3888: PUSH
3889: LD_VAR 0 4
3893: PPUSH
3894: LD_VAR 0 5
3898: PPUSH
3899: LD_VAR 0 6
3903: PPUSH
3904: CALL_OW 47
3908: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3909: LD_VAR 0 10
3913: PPUSH
3914: LD_STRING @
3916: PUSH
3917: LD_VAR 0 1
3921: STR
3922: PPUSH
3923: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3927: LD_VAR 0 10
3931: PPUSH
3932: CALL_OW 274
3936: PPUSH
3937: LD_INT 1
3939: PPUSH
3940: LD_EXP 6
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PPUSH
3949: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3953: LD_VAR 0 10
3957: PPUSH
3958: CALL_OW 274
3962: PPUSH
3963: LD_INT 2
3965: PPUSH
3966: LD_EXP 6
3970: PUSH
3971: LD_INT 2
3973: ARRAY
3974: PPUSH
3975: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3979: LD_VAR 0 10
3983: PPUSH
3984: CALL_OW 274
3988: PPUSH
3989: LD_INT 3
3991: PPUSH
3992: LD_EXP 6
3996: PUSH
3997: LD_INT 3
3999: ARRAY
4000: PPUSH
4001: CALL_OW 277
// end else
4005: GO 4151
// begin for i := 1 to 3 do
4007: LD_ADDR_VAR 0 7
4011: PUSH
4012: DOUBLE
4013: LD_INT 1
4015: DEC
4016: ST_TO_ADDR
4017: LD_INT 3
4019: PUSH
4020: FOR_TO
4021: IFFALSE 4149
// begin r := starting_resources [ i ] ;
4023: LD_ADDR_VAR 0 8
4027: PUSH
4028: LD_EXP 6
4032: PUSH
4033: LD_VAR 0 7
4037: ARRAY
4038: ST_TO_ADDR
// while r >= 10 do
4039: LD_VAR 0 8
4043: PUSH
4044: LD_INT 10
4046: GREATEREQUAL
4047: IFFALSE 4147
// if r > 50 then
4049: LD_VAR 0 8
4053: PUSH
4054: LD_INT 50
4056: GREATER
4057: IFFALSE 4103
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4059: LD_VAR 0 7
4063: PPUSH
4064: LD_INT 5
4066: PPUSH
4067: LD_VAR 0 4
4071: PPUSH
4072: LD_VAR 0 5
4076: PPUSH
4077: LD_INT 4
4079: PPUSH
4080: LD_INT 0
4082: PPUSH
4083: CALL_OW 60
// r := r - 50 ;
4087: LD_ADDR_VAR 0 8
4091: PUSH
4092: LD_VAR 0 8
4096: PUSH
4097: LD_INT 50
4099: MINUS
4100: ST_TO_ADDR
// end else
4101: GO 4145
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4103: LD_VAR 0 7
4107: PPUSH
4108: LD_VAR 0 8
4112: PUSH
4113: LD_INT 10
4115: DIV
4116: PPUSH
4117: LD_VAR 0 4
4121: PPUSH
4122: LD_VAR 0 5
4126: PPUSH
4127: LD_INT 4
4129: PPUSH
4130: LD_INT 0
4132: PPUSH
4133: CALL_OW 60
// r := 0 ;
4137: LD_ADDR_VAR 0 8
4141: PUSH
4142: LD_INT 0
4144: ST_TO_ADDR
// end ;
4145: GO 4039
// end ;
4147: GO 4020
4149: POP
4150: POP
// end ; for r in starting_crates do
4151: LD_ADDR_VAR 0 8
4155: PUSH
4156: LD_EXP 5
4160: PUSH
4161: FOR_IN
4162: IFFALSE 4194
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4164: LD_INT 1
4166: PPUSH
4167: LD_INT 5
4169: PPUSH
4170: LD_VAR 0 4
4174: PPUSH
4175: LD_VAR 0 5
4179: PPUSH
4180: LD_VAR 0 8
4184: PPUSH
4185: LD_INT 0
4187: PPUSH
4188: CALL_OW 60
4192: GO 4161
4194: POP
4195: POP
// if def_morale_flags then
4196: LD_EXP 50
4200: IFFALSE 4339
// begin x := start_def [ pos ] [ 1 ] ;
4202: LD_ADDR_VAR 0 4
4206: PUSH
4207: LD_EXP 25
4211: PUSH
4212: LD_VAR 0 3
4216: ARRAY
4217: PUSH
4218: LD_INT 1
4220: ARRAY
4221: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4222: LD_ADDR_VAR 0 5
4226: PUSH
4227: LD_EXP 25
4231: PUSH
4232: LD_VAR 0 3
4236: ARRAY
4237: PUSH
4238: LD_INT 2
4240: ARRAY
4241: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4242: LD_VAR 0 4
4246: PPUSH
4247: LD_VAR 0 5
4251: PPUSH
4252: LD_INT 12
4254: PPUSH
4255: LD_INT 2
4257: PPUSH
4258: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4262: LD_ADDR_EXP 30
4266: PUSH
4267: LD_EXP 30
4271: PUSH
4272: LD_VAR 0 1
4276: PPUSH
4277: LD_VAR 0 4
4281: PPUSH
4282: LD_VAR 0 5
4286: PPUSH
4287: LD_INT 1
4289: PUSH
4290: LD_INT 100
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: PUSH
4297: LD_INT 2
4299: PUSH
4300: LD_INT 50
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: PUSH
4307: LD_INT 3
4309: PUSH
4310: LD_INT 20
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: PUSH
4317: LD_INT 20
4319: PUSH
4320: LD_INT 100
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 418
4337: ADD
4338: ST_TO_ADDR
// end ; commander := true ;
4339: LD_ADDR_LOC 1
4343: PUSH
4344: LD_INT 1
4346: ST_TO_ADDR
// soldiers_created := 0 ;
4347: LD_ADDR_LOC 4
4351: PUSH
4352: LD_INT 0
4354: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4355: LD_ADDR_VAR 0 7
4359: PUSH
4360: DOUBLE
4361: LD_INT 1
4363: DEC
4364: ST_TO_ADDR
4365: LD_EXP 2
4369: PUSH
4370: FOR_TO
4371: IFFALSE 4524
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4373: LD_ADDR_VAR 0 4
4377: PUSH
4378: LD_EXP 24
4382: PUSH
4383: LD_VAR 0 3
4387: ARRAY
4388: PUSH
4389: LD_VAR 0 7
4393: ARRAY
4394: PUSH
4395: LD_INT 1
4397: ARRAY
4398: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4399: LD_ADDR_VAR 0 5
4403: PUSH
4404: LD_EXP 24
4408: PUSH
4409: LD_VAR 0 3
4413: ARRAY
4414: PUSH
4415: LD_VAR 0 7
4419: ARRAY
4420: PUSH
4421: LD_INT 2
4423: ARRAY
4424: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4425: LD_ADDR_VAR 0 6
4429: PUSH
4430: LD_EXP 24
4434: PUSH
4435: LD_VAR 0 3
4439: ARRAY
4440: PUSH
4441: LD_VAR 0 7
4445: ARRAY
4446: PUSH
4447: LD_INT 3
4449: ARRAY
4450: ST_TO_ADDR
// bc_type := b_breastwork ;
4451: LD_ADDR_OWVAR 42
4455: PUSH
4456: LD_INT 31
4458: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4459: LD_ADDR_VAR 0 9
4463: PUSH
4464: LD_VAR 0 4
4468: PPUSH
4469: LD_VAR 0 5
4473: PPUSH
4474: LD_VAR 0 6
4478: PPUSH
4479: CALL_OW 47
4483: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4484: LD_INT 1
4486: PPUSH
4487: LD_INT 1
4489: PPUSH
4490: LD_INT 0
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: LD_VAR 0 9
4503: PPUSH
4504: CALL 3150 0 6
// soldiers_created := soldiers_created + 1 ;
4508: LD_ADDR_LOC 4
4512: PUSH
4513: LD_LOC 4
4517: PUSH
4518: LD_INT 1
4520: PLUS
4521: ST_TO_ADDR
// end ;
4522: GO 4370
4524: POP
4525: POP
// x := start_def [ pos ] [ 1 ] ;
4526: LD_ADDR_VAR 0 4
4530: PUSH
4531: LD_EXP 25
4535: PUSH
4536: LD_VAR 0 3
4540: ARRAY
4541: PUSH
4542: LD_INT 1
4544: ARRAY
4545: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4546: LD_ADDR_VAR 0 5
4550: PUSH
4551: LD_EXP 25
4555: PUSH
4556: LD_VAR 0 3
4560: ARRAY
4561: PUSH
4562: LD_INT 2
4564: ARRAY
4565: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4566: LD_LOC 8
4570: PUSH
4571: LD_EXP 2
4575: MINUS
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: LD_VAR 0 4
4584: PPUSH
4585: LD_VAR 0 5
4589: PPUSH
4590: LD_INT 5
4592: PPUSH
4593: LD_INT 0
4595: PPUSH
4596: CALL 3150 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4600: LD_LOC 5
4604: PPUSH
4605: LD_INT 2
4607: PPUSH
4608: LD_VAR 0 4
4612: PPUSH
4613: LD_VAR 0 5
4617: PPUSH
4618: LD_INT 5
4620: PPUSH
4621: LD_INT 0
4623: PPUSH
4624: CALL 3150 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4628: LD_LOC 7
4632: PPUSH
4633: LD_INT 3
4635: PPUSH
4636: LD_VAR 0 4
4640: PPUSH
4641: LD_VAR 0 5
4645: PPUSH
4646: LD_INT 5
4648: PPUSH
4649: LD_INT 0
4651: PPUSH
4652: CALL 3150 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4656: LD_LOC 6
4660: PPUSH
4661: LD_INT 4
4663: PPUSH
4664: LD_VAR 0 4
4668: PPUSH
4669: LD_VAR 0 5
4673: PPUSH
4674: LD_INT 5
4676: PPUSH
4677: LD_INT 0
4679: PPUSH
4680: CALL 3150 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4684: LD_EXP 51
4688: PUSH
4689: LD_INT 20
4691: PPUSH
4692: LD_VAR 0 1
4696: PPUSH
4697: CALL_OW 321
4701: PUSH
4702: LD_INT 1
4704: EQUAL
4705: AND
4706: IFFALSE 4723
// SetTech ( tech_SibDet , side , state_researched ) ;
4708: LD_INT 20
4710: PPUSH
4711: LD_VAR 0 1
4715: PPUSH
4716: LD_INT 2
4718: PPUSH
4719: CALL_OW 322
// if def_siberite_bomb = 1 then
4723: LD_EXP 54
4727: PUSH
4728: LD_INT 1
4730: EQUAL
4731: IFFALSE 4765
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4733: LD_INT 25
4735: PPUSH
4736: LD_VAR 0 1
4740: PPUSH
4741: LD_INT 1
4743: PPUSH
4744: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4748: LD_INT 73
4750: PPUSH
4751: LD_VAR 0 1
4755: PPUSH
4756: LD_INT 1
4758: PPUSH
4759: CALL_OW 322
// end else
4763: GO 4795
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4765: LD_INT 25
4767: PPUSH
4768: LD_VAR 0 1
4772: PPUSH
4773: LD_INT 0
4775: PPUSH
4776: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4780: LD_INT 73
4782: PPUSH
4783: LD_VAR 0 1
4787: PPUSH
4788: LD_INT 0
4790: PPUSH
4791: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4795: LD_INT 24
4797: PPUSH
4798: LD_VAR 0 1
4802: PPUSH
4803: LD_INT 0
4805: PPUSH
4806: CALL_OW 322
// global_defined := true ;
4810: LD_ADDR_LOC 3
4814: PUSH
4815: LD_INT 1
4817: ST_TO_ADDR
// end ;
4818: LD_VAR 0 2
4822: RET
// function prepare_sides ; var i ; begin
4823: LD_INT 0
4825: PPUSH
4826: PPUSH
// global_units := [ ] ;
4827: LD_ADDR_LOC 2
4831: PUSH
4832: EMPTY
4833: ST_TO_ADDR
// global_defined := false ;
4834: LD_ADDR_LOC 3
4838: PUSH
4839: LD_INT 0
4841: ST_TO_ADDR
// CountClassMembers ;
4842: CALL 4892 0 0
// for i := 1 to 8 do
4846: LD_ADDR_VAR 0 2
4850: PUSH
4851: DOUBLE
4852: LD_INT 1
4854: DEC
4855: ST_TO_ADDR
4856: LD_INT 8
4858: PUSH
4859: FOR_TO
4860: IFFALSE 4885
// if Side_Positions [ i ] then
4862: LD_EXP 19
4866: PUSH
4867: LD_VAR 0 2
4871: ARRAY
4872: IFFALSE 4883
// prepare_side ( i ) ;
4874: LD_VAR 0 2
4878: PPUSH
4879: CALL 3738 0 1
4883: GO 4859
4885: POP
4886: POP
// end ;
4887: LD_VAR 0 1
4891: RET
// function CountClassMembers ; var Mode ; begin
4892: LD_INT 0
4894: PPUSH
4895: PPUSH
// if No_Mechs then
4896: LD_EXP 56
4900: IFFALSE 4912
// Mode := 2 else
4902: LD_ADDR_VAR 0 2
4906: PUSH
4907: LD_INT 2
4909: ST_TO_ADDR
4910: GO 4920
// Mode := 1 ;
4912: LD_ADDR_VAR 0 2
4916: PUSH
4917: LD_INT 1
4919: ST_TO_ADDR
// neng := number_of_people ;
4920: LD_ADDR_LOC 5
4924: PUSH
4925: LD_EXP 3
4929: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4930: LD_ADDR_LOC 8
4934: PUSH
4935: LD_LOC 5
4939: PUSH
4940: LD_INT 4
4942: PUSH
4943: LD_INT 3
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_VAR 0 2
4954: ARRAY
4955: DIV
4956: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4957: LD_LOC 8
4961: PUSH
4962: LD_EXP 2
4966: LESS
4967: IFFALSE 4979
// nsol := number_of_breastworks ;
4969: LD_ADDR_LOC 8
4973: PUSH
4974: LD_EXP 2
4978: ST_TO_ADDR
// neng := neng - nsol ;
4979: LD_ADDR_LOC 5
4983: PUSH
4984: LD_LOC 5
4988: PUSH
4989: LD_LOC 8
4993: MINUS
4994: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4995: LD_ADDR_LOC 6
4999: PUSH
5000: LD_LOC 5
5004: PUSH
5005: LD_INT 3
5007: PUSH
5008: LD_INT 2
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: LD_VAR 0 2
5019: ARRAY
5020: DIV
5021: ST_TO_ADDR
// if ( nsci < 1 ) then
5022: LD_LOC 6
5026: PUSH
5027: LD_INT 1
5029: LESS
5030: IFFALSE 5040
// nsci := 1 ;
5032: LD_ADDR_LOC 6
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// neng := neng - nsci ;
5040: LD_ADDR_LOC 5
5044: PUSH
5045: LD_LOC 5
5049: PUSH
5050: LD_LOC 6
5054: MINUS
5055: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5056: LD_ADDR_LOC 7
5060: PUSH
5061: LD_LOC 5
5065: PUSH
5066: LD_INT 2
5068: DIV
5069: PUSH
5070: LD_INT 0
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_VAR 0 2
5081: ARRAY
5082: ST_TO_ADDR
// neng := neng - nmech ;
5083: LD_ADDR_LOC 5
5087: PUSH
5088: LD_LOC 5
5092: PUSH
5093: LD_LOC 7
5097: MINUS
5098: ST_TO_ADDR
// if ( neng < 1 ) then
5099: LD_LOC 5
5103: PUSH
5104: LD_INT 1
5106: LESS
5107: IFFALSE 5117
// neng := 1 ;
5109: LD_ADDR_LOC 5
5113: PUSH
5114: LD_INT 1
5116: ST_TO_ADDR
// end ;
5117: LD_VAR 0 1
5121: RET
// starting begin disable ( 98 ) ;
5122: LD_INT 98
5124: DISABLE_MARKED
// disable ( 99 ) ;
5125: LD_INT 99
5127: DISABLE_MARKED
// disable ( 100 ) ;
5128: LD_INT 100
5130: DISABLE_MARKED
// disable ( 400 ) ;
5131: LD_INT 400
5133: DISABLE_MARKED
// disable ( 401 ) ;
5134: LD_INT 401
5136: DISABLE_MARKED
// disable ( 600 ) ;
5137: LD_INT 600
5139: DISABLE_MARKED
// mp_selectmsg := true ;
5140: LD_ADDR_OWVAR 13
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5148: CALL 68 0 0
// init_map ;
5152: CALL 1535 0 0
// init_respawning ;
5156: CALL 5864 0 0
// set_shared_visions_and_alliances ;
5160: CALL 2862 0 0
// ResetFog ;
5164: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5168: LD_OWVAR 2
5172: PPUSH
5173: CALL_OW 520
// prepare_sides ;
5177: CALL 4823 0 0
// Init_Win_Condition ;
5181: CALL 12590 0 0
// InitLimits ;
5185: CALL 11205 0 0
// ShowTimer ;
5189: CALL 12142 0 0
// music_nat := Side_Nations [ your_side ] ;
5193: LD_ADDR_OWVAR 71
5197: PUSH
5198: LD_EXP 20
5202: PUSH
5203: LD_OWVAR 2
5207: ARRAY
5208: ST_TO_ADDR
// if IAmSpec then
5209: CALL_OW 531
5213: IFFALSE 5237
// begin fogoff ( true ) ;
5215: LD_INT 1
5217: PPUSH
5218: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
5222: LD_INT 130
5224: PPUSH
5225: LD_INT 100
5227: PPUSH
5228: CALL_OW 86
// enable ( 400 ) ;
5232: LD_INT 400
5234: ENABLE_MARKED
// end else
5235: GO 5283
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5237: LD_EXP 25
5241: PUSH
5242: LD_EXP 19
5246: PUSH
5247: LD_OWVAR 2
5251: ARRAY
5252: ARRAY
5253: PUSH
5254: LD_INT 1
5256: ARRAY
5257: PPUSH
5258: LD_EXP 25
5262: PUSH
5263: LD_EXP 19
5267: PUSH
5268: LD_OWVAR 2
5272: ARRAY
5273: ARRAY
5274: PUSH
5275: LD_INT 2
5277: ARRAY
5278: PPUSH
5279: CALL_OW 86
// end ; InitApeman ;
5283: CALL 6649 0 0
// if def_builduptime then
5287: LD_EXP 55
5291: IFFALSE 5297
// BeginBuildUp ;
5293: CALL 8372 0 0
// end ;
5297: END
// every 0 0$1 do
5298: GO 5300
5300: DISABLE
// if ( def_siberite_bomb > 1 ) then
5301: LD_EXP 54
5305: PUSH
5306: LD_INT 1
5308: GREATER
5309: IFFALSE 5324
// begin wait ( siberite_bomb_Delay ) ;
5311: LD_EXP 14
5315: PPUSH
5316: CALL_OW 67
// EnableSibFiss ;
5320: CALL 5325 0 0
// end ;
5324: END
// function EnableSibFiss ; var i ; begin
5325: LD_INT 0
5327: PPUSH
5328: PPUSH
// for i := 1 to 8 do
5329: LD_ADDR_VAR 0 2
5333: PUSH
5334: DOUBLE
5335: LD_INT 1
5337: DEC
5338: ST_TO_ADDR
5339: LD_INT 8
5341: PUSH
5342: FOR_TO
5343: IFFALSE 5389
// if Side_Positions [ i ] then
5345: LD_EXP 19
5349: PUSH
5350: LD_VAR 0 2
5354: ARRAY
5355: IFFALSE 5387
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5357: LD_INT 25
5359: PPUSH
5360: LD_VAR 0 2
5364: PPUSH
5365: LD_INT 1
5367: PPUSH
5368: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5372: LD_INT 73
5374: PPUSH
5375: LD_VAR 0 2
5379: PPUSH
5380: LD_INT 1
5382: PPUSH
5383: CALL_OW 322
// end ;
5387: GO 5342
5389: POP
5390: POP
// end ; end_of_file
5391: LD_VAR 0 1
5395: RET
// every 1 1$0 + 0 0$0.3 do
5396: GO 5398
5398: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5399: LD_INT 4
5401: PPUSH
5402: LD_INT 5
5404: PPUSH
5405: CALL_OW 12
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: CALL_OW 57
// enable ;
5417: ENABLE
// end ;
5418: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5419: GO 5421
5421: DISABLE
5422: LD_INT 0
5424: PPUSH
5425: PPUSH
// begin case tick of 1 .. 1 1$0 :
5426: LD_OWVAR 1
5430: PUSH
5431: LD_INT 1
5433: DOUBLE
5434: GREATEREQUAL
5435: IFFALSE 5443
5437: LD_INT 2100
5439: DOUBLE
5440: LESSEQUAL
5441: IFTRUE 5445
5443: GO 5473
5445: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5446: LD_EXP 7
5450: PUSH
5451: LD_INT 100
5453: DIVREAL
5454: PUSH
5455: LD_INT 350
5457: PPUSH
5458: LD_INT 700
5460: PPUSH
5461: CALL_OW 12
5465: MUL
5466: PPUSH
5467: CALL_OW 67
5471: GO 5775
5473: LD_INT 2100
5475: PUSH
5476: LD_INT 1
5478: PLUS
5479: DOUBLE
5480: GREATEREQUAL
5481: IFFALSE 5489
5483: LD_INT 10500
5485: DOUBLE
5486: LESSEQUAL
5487: IFTRUE 5491
5489: GO 5519
5491: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5492: LD_EXP 7
5496: PUSH
5497: LD_INT 100
5499: DIVREAL
5500: PUSH
5501: LD_INT 700
5503: PPUSH
5504: LD_INT 1225
5506: PPUSH
5507: CALL_OW 12
5511: MUL
5512: PPUSH
5513: CALL_OW 67
5517: GO 5775
5519: LD_INT 10500
5521: PUSH
5522: LD_INT 1
5524: PLUS
5525: DOUBLE
5526: GREATEREQUAL
5527: IFFALSE 5535
5529: LD_INT 21000
5531: DOUBLE
5532: LESSEQUAL
5533: IFTRUE 5537
5535: GO 5565
5537: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5538: LD_EXP 7
5542: PUSH
5543: LD_INT 100
5545: DIVREAL
5546: PUSH
5547: LD_INT 1225
5549: PPUSH
5550: LD_INT 1750
5552: PPUSH
5553: CALL_OW 12
5557: MUL
5558: PPUSH
5559: CALL_OW 67
5563: GO 5775
5565: LD_INT 21000
5567: PUSH
5568: LD_INT 1
5570: PLUS
5571: DOUBLE
5572: GREATEREQUAL
5573: IFFALSE 5581
5575: LD_INT 42000
5577: DOUBLE
5578: LESSEQUAL
5579: IFTRUE 5583
5581: GO 5611
5583: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5584: LD_EXP 7
5588: PUSH
5589: LD_INT 100
5591: DIVREAL
5592: PUSH
5593: LD_INT 1750
5595: PPUSH
5596: LD_INT 2450
5598: PPUSH
5599: CALL_OW 12
5603: MUL
5604: PPUSH
5605: CALL_OW 67
5609: GO 5775
5611: LD_INT 42000
5613: PUSH
5614: LD_INT 1
5616: PLUS
5617: DOUBLE
5618: GREATEREQUAL
5619: IFFALSE 5627
5621: LD_INT 63000
5623: DOUBLE
5624: LESSEQUAL
5625: IFTRUE 5629
5627: GO 5657
5629: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5630: LD_EXP 7
5634: PUSH
5635: LD_INT 100
5637: DIVREAL
5638: PUSH
5639: LD_INT 2450
5641: PPUSH
5642: LD_INT 2800
5644: PPUSH
5645: CALL_OW 12
5649: MUL
5650: PPUSH
5651: CALL_OW 67
5655: GO 5775
5657: LD_INT 63000
5659: PUSH
5660: LD_INT 1
5662: PLUS
5663: DOUBLE
5664: GREATEREQUAL
5665: IFFALSE 5673
5667: LD_INT 105000
5669: DOUBLE
5670: LESSEQUAL
5671: IFTRUE 5675
5673: GO 5703
5675: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5676: LD_EXP 7
5680: PUSH
5681: LD_INT 100
5683: DIVREAL
5684: PUSH
5685: LD_INT 2800
5687: PPUSH
5688: LD_INT 3325
5690: PPUSH
5691: CALL_OW 12
5695: MUL
5696: PPUSH
5697: CALL_OW 67
5701: GO 5775
5703: LD_INT 105000
5705: PUSH
5706: LD_INT 1
5708: PLUS
5709: DOUBLE
5710: GREATEREQUAL
5711: IFFALSE 5719
5713: LD_INT 630000
5715: DOUBLE
5716: LESSEQUAL
5717: IFTRUE 5721
5719: GO 5749
5721: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
5722: LD_EXP 7
5726: PUSH
5727: LD_INT 100
5729: DIVREAL
5730: PUSH
5731: LD_INT 3325
5733: PPUSH
5734: LD_INT 4200
5736: PPUSH
5737: CALL_OW 12
5741: MUL
5742: PPUSH
5743: CALL_OW 67
5747: GO 5775
5749: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5750: LD_EXP 7
5754: PUSH
5755: LD_INT 100
5757: DIVREAL
5758: PUSH
5759: LD_INT 4200
5761: PPUSH
5762: LD_INT 5250
5764: PPUSH
5765: CALL_OW 12
5769: MUL
5770: PPUSH
5771: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5775: LD_ADDR_VAR 0 2
5779: PUSH
5780: LD_INT 3
5782: PPUSH
5783: LD_INT 5
5785: PPUSH
5786: CALL_OW 12
5790: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5791: LD_ADDR_VAR 0 1
5795: PUSH
5796: LD_EXP 19
5800: PUSH
5801: LD_INT 0
5803: PUSH
5804: EMPTY
5805: LIST
5806: DIFF
5807: PUSH
5808: FOR_IN
5809: IFFALSE 5858
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5811: LD_VAR 0 2
5815: PPUSH
5816: LD_EXP 25
5820: PUSH
5821: LD_VAR 0 1
5825: ARRAY
5826: PUSH
5827: LD_INT 1
5829: ARRAY
5830: PPUSH
5831: LD_EXP 25
5835: PUSH
5836: LD_VAR 0 1
5840: ARRAY
5841: PUSH
5842: LD_INT 2
5844: ARRAY
5845: PPUSH
5846: LD_INT 20
5848: PPUSH
5849: LD_INT 1
5851: PPUSH
5852: CALL_OW 56
5856: GO 5808
5858: POP
5859: POP
// enable ;
5860: ENABLE
// end ; end_of_file
5861: PPOPN 2
5863: END
// var respawn , inqueue ; export function init_respawning ; begin
5864: LD_INT 0
5866: PPUSH
// respawn := Rand ( 1 , 8 ) ;
5867: LD_ADDR_LOC 9
5871: PUSH
5872: LD_INT 1
5874: PPUSH
5875: LD_INT 8
5877: PPUSH
5878: CALL_OW 12
5882: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5883: LD_ADDR_LOC 10
5887: PUSH
5888: LD_INT 0
5890: PUSH
5891: LD_INT 0
5893: PUSH
5894: LD_INT 0
5896: PUSH
5897: LD_INT 0
5899: PUSH
5900: LD_INT 0
5902: PUSH
5903: LD_INT 0
5905: PUSH
5906: LD_INT 0
5908: PUSH
5909: LD_INT 0
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: ST_TO_ADDR
// end ;
5922: LD_VAR 0 1
5926: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5927: GO 5929
5929: DISABLE
5930: LD_INT 0
5932: PPUSH
5933: PPUSH
5934: PPUSH
5935: PPUSH
// begin if respawning_time_max = 0 then
5936: LD_EXP 12
5940: PUSH
5941: LD_INT 0
5943: EQUAL
5944: IFFALSE 5948
// exit ;
5946: GO 6455
// if respawn = 8 then
5948: LD_LOC 9
5952: PUSH
5953: LD_INT 8
5955: EQUAL
5956: IFFALSE 5968
// respawn := 1 else
5958: LD_ADDR_LOC 9
5962: PUSH
5963: LD_INT 1
5965: ST_TO_ADDR
5966: GO 5982
// respawn := respawn + 1 ;
5968: LD_ADDR_LOC 9
5972: PUSH
5973: LD_LOC 9
5977: PUSH
5978: LD_INT 1
5980: PLUS
5981: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5982: LD_EXP 19
5986: PUSH
5987: LD_LOC 9
5991: ARRAY
5992: PUSH
5993: LD_LOC 10
5997: PUSH
5998: LD_LOC 9
6002: ARRAY
6003: NOT
6004: AND
6005: IFFALSE 6454
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
6007: LD_ADDR_VAR 0 1
6011: PUSH
6012: LD_INT 21
6014: PUSH
6015: LD_INT 1
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 22
6024: PUSH
6025: LD_LOC 9
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 3
6036: PUSH
6037: LD_INT 23
6039: PUSH
6040: LD_INT 0
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PPUSH
6053: CALL_OW 69
6057: ST_TO_ADDR
// if n < number_of_people then
6058: LD_VAR 0 1
6062: PUSH
6063: LD_EXP 3
6067: LESS
6068: IFFALSE 6451
// begin aktresp := respawn ;
6070: LD_ADDR_VAR 0 3
6074: PUSH
6075: LD_LOC 9
6079: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
6080: LD_ADDR_LOC 10
6084: PUSH
6085: LD_LOC 10
6089: PPUSH
6090: LD_VAR 0 3
6094: PPUSH
6095: LD_INT 1
6097: PPUSH
6098: CALL_OW 1
6102: ST_TO_ADDR
// enable ;
6103: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6104: LD_EXP 11
6108: PPUSH
6109: LD_EXP 12
6113: PPUSH
6114: CALL_OW 12
6118: PPUSH
6119: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6123: LD_ADDR_LOC 10
6127: PUSH
6128: LD_LOC 10
6132: PPUSH
6133: LD_VAR 0 3
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 1
6145: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6146: LD_ADDR_VAR 0 2
6150: PUSH
6151: LD_INT 21
6153: PUSH
6154: LD_INT 3
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: LD_INT 30
6166: PUSH
6167: LD_INT 0
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: LD_INT 30
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 50
6191: PUSH
6192: EMPTY
6193: LIST
6194: PUSH
6195: LD_INT 22
6197: PUSH
6198: LD_VAR 0 3
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if building_list = 0 then
6218: LD_VAR 0 2
6222: PUSH
6223: LD_INT 0
6225: EQUAL
6226: IFFALSE 6271
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6228: LD_ADDR_VAR 0 2
6232: PUSH
6233: LD_INT 21
6235: PUSH
6236: LD_INT 3
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 50
6245: PUSH
6246: EMPTY
6247: LIST
6248: PUSH
6249: LD_INT 22
6251: PUSH
6252: LD_VAR 0 3
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: PPUSH
6266: CALL_OW 69
6270: ST_TO_ADDR
// if building_list = 0 then
6271: LD_VAR 0 2
6275: PUSH
6276: LD_INT 0
6278: EQUAL
6279: IFFALSE 6283
// exit ;
6281: GO 6455
// hc_name :=  ;
6283: LD_ADDR_OWVAR 26
6287: PUSH
6288: LD_STRING 
6290: ST_TO_ADDR
// hc_importance := 0 ;
6291: LD_ADDR_OWVAR 32
6295: PUSH
6296: LD_INT 0
6298: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6299: LD_INT 0
6301: PPUSH
6302: LD_INT 0
6304: PPUSH
6305: LD_EXP 4
6309: PUSH
6310: LD_INT 2
6312: DIV
6313: PPUSH
6314: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6318: LD_ADDR_OWVAR 21
6322: PUSH
6323: LD_EXP 20
6327: PUSH
6328: LD_VAR 0 3
6332: ARRAY
6333: ST_TO_ADDR
// uc_side := aktresp ;
6334: LD_ADDR_OWVAR 20
6338: PUSH
6339: LD_VAR 0 3
6343: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6344: LD_ADDR_VAR 0 4
6348: PUSH
6349: LD_VAR 0 2
6353: PUSH
6354: LD_INT 1
6356: PPUSH
6357: LD_VAR 0 2
6361: PUSH
6362: LD_INT 0
6364: PLUS
6365: PPUSH
6366: CALL_OW 12
6370: ARRAY
6371: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6372: LD_VAR 0 4
6376: PPUSH
6377: CALL_OW 266
6381: PUSH
6382: LD_INT 0
6384: PUSH
6385: LD_INT 1
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: IN
6392: IFFALSE 6404
// n = 25 else
6394: LD_ADDR_VAR 0 1
6398: PUSH
6399: LD_INT 25
6401: ST_TO_ADDR
6402: GO 6412
// n = 10 ;
6404: LD_ADDR_VAR 0 1
6408: PUSH
6409: LD_INT 10
6411: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6412: CALL_OW 44
6416: PPUSH
6417: LD_VAR 0 4
6421: PPUSH
6422: CALL_OW 250
6426: PPUSH
6427: LD_VAR 0 4
6431: PPUSH
6432: CALL_OW 251
6436: PPUSH
6437: LD_VAR 0 1
6441: PPUSH
6442: LD_INT 1
6444: PPUSH
6445: CALL_OW 50
// end else
6449: GO 6452
// enable ;
6451: ENABLE
// end else
6452: GO 6455
// enable ;
6454: ENABLE
// end ; end_of_file
6455: PPOPN 4
6457: END
// every 20 20$00 trigger apemanNumber do
6458: LD_EXP 32
6462: IFFALSE 6495
6464: GO 6466
6466: DISABLE
// begin enable ;
6467: ENABLE
// if apeLevel >= 8 then
6468: LD_EXP 37
6472: PUSH
6473: LD_INT 8
6475: GREATEREQUAL
6476: IFFALSE 6481
// disable else
6478: DISABLE
6479: GO 6495
// apeLevel := apeLevel + 1 ;
6481: LD_ADDR_EXP 37
6485: PUSH
6486: LD_EXP 37
6490: PUSH
6491: LD_INT 1
6493: PLUS
6494: ST_TO_ADDR
// end ;
6495: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6496: LD_EXP 32
6500: PUSH
6501: LD_EXP 33
6505: LESS
6506: IFFALSE 6646
6508: GO 6510
6510: DISABLE
6511: LD_INT 0
6513: PPUSH
6514: PPUSH
6515: PPUSH
6516: PPUSH
// begin enable ;
6517: ENABLE
// for i := 1 to apemanPos do
6518: LD_ADDR_VAR 0 1
6522: PUSH
6523: DOUBLE
6524: LD_INT 1
6526: DEC
6527: ST_TO_ADDR
6528: LD_EXP 35
6532: PUSH
6533: FOR_TO
6534: IFFALSE 6644
// begin if apemanPlayerCount [ i ] then
6536: LD_EXP 36
6540: PUSH
6541: LD_VAR 0 1
6545: ARRAY
6546: IFFALSE 6642
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6548: LD_EXP 36
6552: PUSH
6553: LD_VAR 0 1
6557: ARRAY
6558: PUSH
6559: LD_EXP 35
6563: PUSH
6564: LD_VAR 0 1
6568: ARRAY
6569: GREATER
6570: IFFALSE 6642
// begin ape := PrepareApeman ;
6572: LD_ADDR_VAR 0 2
6576: PUSH
6577: CALL 7165 0 0
6581: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6582: LD_VAR 0 2
6586: PPUSH
6587: LD_EXP 38
6591: PUSH
6592: LD_VAR 0 1
6596: ARRAY
6597: PPUSH
6598: LD_INT 0
6600: PPUSH
6601: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6605: LD_ADDR_EXP 35
6609: PUSH
6610: LD_EXP 35
6614: PPUSH
6615: LD_VAR 0 1
6619: PPUSH
6620: LD_EXP 35
6624: PUSH
6625: LD_VAR 0 1
6629: ARRAY
6630: PUSH
6631: LD_VAR 0 2
6635: UNION
6636: PPUSH
6637: CALL_OW 1
6641: ST_TO_ADDR
// end ; end ; end ;
6642: GO 6533
6644: POP
6645: POP
// end ;
6646: PPOPN 4
6648: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6649: LD_INT 0
6651: PPUSH
6652: PPUSH
6653: PPUSH
6654: PPUSH
6655: PPUSH
6656: PPUSH
6657: PPUSH
// playersAmount := 0 ;
6658: LD_ADDR_VAR 0 3
6662: PUSH
6663: LD_INT 0
6665: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6666: LD_ADDR_VAR 0 7
6670: PUSH
6671: LD_INT 1
6673: PUSH
6674: LD_INT 2
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: LD_INT 4
6682: PUSH
6683: LD_INT 5
6685: PUSH
6686: LD_INT 6
6688: PUSH
6689: LD_INT 7
6691: PUSH
6692: LD_INT 8
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6705: LD_ADDR_EXP 38
6709: PUSH
6710: LD_INT 0
6712: PUSH
6713: LD_INT 0
6715: PUSH
6716: LD_INT 0
6718: PUSH
6719: LD_INT 0
6721: PUSH
6722: LD_INT 0
6724: PUSH
6725: LD_INT 0
6727: PUSH
6728: LD_INT 0
6730: PUSH
6731: LD_INT 0
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: ST_TO_ADDR
// for j = 1 to Side_Positions do
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: DOUBLE
6750: LD_INT 1
6752: DEC
6753: ST_TO_ADDR
6754: LD_EXP 19
6758: PUSH
6759: FOR_TO
6760: IFFALSE 6827
// if Side_Positions [ j ] then
6762: LD_EXP 19
6766: PUSH
6767: LD_VAR 0 4
6771: ARRAY
6772: IFFALSE 6825
// begin playersAmount := playersAmount + 1 ;
6774: LD_ADDR_VAR 0 3
6778: PUSH
6779: LD_VAR 0 3
6783: PUSH
6784: LD_INT 1
6786: PLUS
6787: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6788: LD_ADDR_EXP 38
6792: PUSH
6793: LD_EXP 38
6797: PPUSH
6798: LD_VAR 0 4
6802: PPUSH
6803: LD_VAR 0 7
6807: PUSH
6808: LD_EXP 19
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: ARRAY
6819: PPUSH
6820: CALL_OW 1
6824: ST_TO_ADDR
// end ;
6825: GO 6759
6827: POP
6828: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6829: LD_ADDR_EXP 34
6833: PUSH
6834: LD_INT 3
6836: PUSH
6837: LD_EXP 9
6841: MUL
6842: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6843: LD_ADDR_EXP 32
6847: PUSH
6848: LD_VAR 0 3
6852: PUSH
6853: LD_EXP 34
6857: MUL
6858: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6859: LD_ADDR_EXP 33
6863: PUSH
6864: LD_EXP 32
6868: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6869: LD_ADDR_EXP 35
6873: PUSH
6874: LD_INT 0
6876: PUSH
6877: LD_INT 0
6879: PUSH
6880: LD_INT 0
6882: PUSH
6883: LD_INT 0
6885: PUSH
6886: LD_INT 0
6888: PUSH
6889: LD_INT 0
6891: PUSH
6892: LD_INT 0
6894: PUSH
6895: LD_INT 0
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6908: LD_ADDR_EXP 36
6912: PUSH
6913: LD_INT 0
6915: PUSH
6916: LD_INT 0
6918: PUSH
6919: LD_INT 0
6921: PUSH
6922: LD_INT 0
6924: PUSH
6925: LD_INT 0
6927: PUSH
6928: LD_INT 0
6930: PUSH
6931: LD_INT 0
6933: PUSH
6934: LD_INT 0
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: ST_TO_ADDR
// apeLevel := 1 ;
6947: LD_ADDR_EXP 37
6951: PUSH
6952: LD_INT 1
6954: ST_TO_ADDR
// if not apemanNumber then
6955: LD_EXP 32
6959: NOT
6960: IFFALSE 6964
// exit ;
6962: GO 7160
// for i := 1 to apemanPerPlayer do
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: DOUBLE
6970: LD_INT 1
6972: DEC
6973: ST_TO_ADDR
6974: LD_EXP 34
6978: PUSH
6979: FOR_TO
6980: IFFALSE 7158
// begin for j := 1 to Side_Positions do
6982: LD_ADDR_VAR 0 4
6986: PUSH
6987: DOUBLE
6988: LD_INT 1
6990: DEC
6991: ST_TO_ADDR
6992: LD_EXP 19
6996: PUSH
6997: FOR_TO
6998: IFFALSE 7154
// if Side_Positions [ j ] then
7000: LD_EXP 19
7004: PUSH
7005: LD_VAR 0 4
7009: ARRAY
7010: IFFALSE 7152
// begin pos := Side_Positions [ j ] ;
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_EXP 19
7021: PUSH
7022: LD_VAR 0 4
7026: ARRAY
7027: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
7028: LD_ADDR_EXP 36
7032: PUSH
7033: LD_EXP 36
7037: PPUSH
7038: LD_VAR 0 4
7042: PPUSH
7043: LD_EXP 36
7047: PUSH
7048: LD_VAR 0 4
7052: ARRAY
7053: PUSH
7054: LD_INT 1
7056: PLUS
7057: PPUSH
7058: CALL_OW 1
7062: ST_TO_ADDR
// ape := PrepareApeman ;
7063: LD_ADDR_VAR 0 5
7067: PUSH
7068: CALL 7165 0 0
7072: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7073: LD_ADDR_EXP 35
7077: PUSH
7078: LD_EXP 35
7082: PPUSH
7083: LD_VAR 0 4
7087: PPUSH
7088: LD_EXP 35
7092: PUSH
7093: LD_VAR 0 4
7097: ARRAY
7098: PPUSH
7099: LD_EXP 35
7103: PUSH
7104: LD_VAR 0 4
7108: ARRAY
7109: PUSH
7110: LD_INT 1
7112: PLUS
7113: PPUSH
7114: LD_VAR 0 5
7118: PPUSH
7119: CALL_OW 1
7123: PPUSH
7124: CALL_OW 1
7128: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7129: LD_VAR 0 5
7133: PPUSH
7134: LD_EXP 38
7138: PUSH
7139: LD_VAR 0 4
7143: ARRAY
7144: PPUSH
7145: LD_INT 0
7147: PPUSH
7148: CALL_OW 49
// end ;
7152: GO 6997
7154: POP
7155: POP
// end ;
7156: GO 6979
7158: POP
7159: POP
// end ;
7160: LD_VAR 0 1
7164: RET
// export function PrepareApeman ; var bonus ; begin
7165: LD_INT 0
7167: PPUSH
7168: PPUSH
// uc_side := 0 ;
7169: LD_ADDR_OWVAR 20
7173: PUSH
7174: LD_INT 0
7176: ST_TO_ADDR
// uc_nation := 0 ;
7177: LD_ADDR_OWVAR 21
7181: PUSH
7182: LD_INT 0
7184: ST_TO_ADDR
// InitHc ;
7185: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7189: LD_ADDR_VAR 0 2
7193: PUSH
7194: LD_INT 1
7196: NEG
7197: PUSH
7198: LD_INT 0
7200: PUSH
7201: LD_INT 1
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: PUSH
7209: LD_OWVAR 1
7213: PUSH
7214: LD_INT 3
7216: MOD
7217: PUSH
7218: LD_INT 1
7220: PLUS
7221: ARRAY
7222: ST_TO_ADDR
// hc_class := class_apeman ;
7223: LD_ADDR_OWVAR 28
7227: PUSH
7228: LD_INT 12
7230: ST_TO_ADDR
// hc_gallery :=  ;
7231: LD_ADDR_OWVAR 33
7235: PUSH
7236: LD_STRING 
7238: ST_TO_ADDR
// hc_name :=  ;
7239: LD_ADDR_OWVAR 26
7243: PUSH
7244: LD_STRING 
7246: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7247: LD_ADDR_OWVAR 31
7251: PUSH
7252: LD_EXP 37
7256: PUSH
7257: LD_VAR 0 2
7261: PLUS
7262: PUSH
7263: LD_EXP 37
7267: PUSH
7268: LD_VAR 0 2
7272: PLUS
7273: PUSH
7274: LD_EXP 37
7278: PUSH
7279: LD_VAR 0 2
7283: PLUS
7284: PUSH
7285: LD_EXP 37
7289: PUSH
7290: LD_VAR 0 2
7294: PLUS
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7302: LD_ADDR_OWVAR 35
7306: PUSH
7307: LD_INT 10
7309: PUSH
7310: LD_VAR 0 2
7314: MUL
7315: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7316: LD_ADDR_OWVAR 29
7320: PUSH
7321: LD_INT 12
7323: PUSH
7324: LD_INT 10
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: ST_TO_ADDR
// result := CreateHuman ;
7331: LD_ADDR_VAR 0 1
7335: PUSH
7336: CALL_OW 44
7340: ST_TO_ADDR
// end ;
7341: LD_VAR 0 1
7345: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7346: LD_INT 0
7348: PPUSH
7349: PPUSH
7350: PPUSH
// if not ape then
7351: LD_VAR 0 1
7355: NOT
7356: IFFALSE 7360
// exit ;
7358: GO 7485
// side := GetSide ( ape ) ;
7360: LD_ADDR_VAR 0 3
7364: PUSH
7365: LD_VAR 0 1
7369: PPUSH
7370: CALL_OW 255
7374: ST_TO_ADDR
// if not side then
7375: LD_VAR 0 3
7379: NOT
7380: IFFALSE 7434
// begin for i = 1 to apemanPos do
7382: LD_ADDR_VAR 0 4
7386: PUSH
7387: DOUBLE
7388: LD_INT 1
7390: DEC
7391: ST_TO_ADDR
7392: LD_EXP 35
7396: PUSH
7397: FOR_TO
7398: IFFALSE 7432
// if ape in apemanPos [ i ] then
7400: LD_VAR 0 1
7404: PUSH
7405: LD_EXP 35
7409: PUSH
7410: LD_VAR 0 4
7414: ARRAY
7415: IN
7416: IFFALSE 7430
// begin side := i ;
7418: LD_ADDR_VAR 0 3
7422: PUSH
7423: LD_VAR 0 4
7427: ST_TO_ADDR
// break ;
7428: GO 7432
// end ;
7430: GO 7397
7432: POP
7433: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7434: LD_ADDR_EXP 35
7438: PUSH
7439: LD_EXP 35
7443: PPUSH
7444: LD_VAR 0 3
7448: PPUSH
7449: LD_EXP 35
7453: PUSH
7454: LD_VAR 0 3
7458: ARRAY
7459: PUSH
7460: LD_VAR 0 1
7464: DIFF
7465: PPUSH
7466: CALL_OW 1
7470: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7471: LD_ADDR_EXP 32
7475: PUSH
7476: LD_EXP 32
7480: PUSH
7481: LD_INT 1
7483: MINUS
7484: ST_TO_ADDR
// end ; end_of_file
7485: LD_VAR 0 2
7489: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7490: LD_VAR 0 1
7494: PPUSH
7495: CALL_OW 266
7499: PUSH
7500: LD_INT 0
7502: PUSH
7503: LD_INT 1
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: IN
7510: IFFALSE 7535
// SetBName ( b , @ & GetSide ( b ) ) ;
7512: LD_VAR 0 1
7516: PPUSH
7517: LD_STRING @
7519: PUSH
7520: LD_VAR 0 1
7524: PPUSH
7525: CALL_OW 255
7529: STR
7530: PPUSH
7531: CALL_OW 500
// if def_game_rules then
7535: LD_EXP 41
7539: IFFALSE 7576
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7541: LD_VAR 0 1
7545: PPUSH
7546: LD_VAR 0 1
7550: PPUSH
7551: CALL_OW 266
7555: PPUSH
7556: LD_VAR 0 1
7560: PPUSH
7561: CALL_OW 255
7565: PPUSH
7566: LD_INT 0
7568: PPUSH
7569: LD_INT 1
7571: PPUSH
7572: CALL 11606 0 5
// end ;
7576: PPOPN 2
7578: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7579: LD_VAR 0 1
7583: PPUSH
7584: CALL_OW 266
7588: PUSH
7589: LD_INT 0
7591: PUSH
7592: LD_INT 1
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: IN
7599: IFFALSE 7624
// SetBName ( b , @ & GetSide ( b ) ) ;
7601: LD_VAR 0 1
7605: PPUSH
7606: LD_STRING @
7608: PUSH
7609: LD_VAR 0 1
7613: PPUSH
7614: CALL_OW 255
7618: STR
7619: PPUSH
7620: CALL_OW 500
// if def_game_rules then
7624: LD_EXP 41
7628: IFFALSE 7667
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7630: LD_VAR 0 1
7634: PPUSH
7635: LD_VAR 0 1
7639: PPUSH
7640: CALL_OW 266
7644: PPUSH
7645: LD_VAR 0 1
7649: PPUSH
7650: CALL_OW 255
7654: PPUSH
7655: LD_VAR 0 2
7659: PPUSH
7660: LD_INT 1
7662: PPUSH
7663: CALL 11606 0 5
// end ;
7667: PPOPN 3
7669: END
// on VehicleConstructed ( veh , fac ) do var side ;
7670: LD_INT 0
7672: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7673: LD_VAR 0 1
7677: PPUSH
7678: CALL_OW 263
7682: PUSH
7683: LD_INT 5
7685: EQUAL
7686: IFFALSE 7828
// begin side := GetSide ( veh ) ;
7688: LD_ADDR_VAR 0 3
7692: PUSH
7693: LD_VAR 0 1
7697: PPUSH
7698: CALL_OW 255
7702: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7703: LD_ADDR_EXP 35
7707: PUSH
7708: LD_EXP 35
7712: PPUSH
7713: LD_VAR 0 3
7717: PPUSH
7718: LD_EXP 35
7722: PUSH
7723: LD_VAR 0 3
7727: ARRAY
7728: PPUSH
7729: LD_INT 52
7731: PUSH
7732: EMPTY
7733: LIST
7734: PPUSH
7735: CALL_OW 72
7739: PUSH
7740: LD_INT 22
7742: PUSH
7743: LD_VAR 0 3
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: PUSH
7752: LD_INT 2
7754: PUSH
7755: LD_INT 33
7757: PUSH
7758: LD_INT 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 12
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 25
7777: PUSH
7778: LD_INT 15
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 25
7787: PUSH
7788: LD_INT 16
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: PUSH
7795: LD_INT 25
7797: PUSH
7798: LD_INT 17
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 69
7821: UNION
7822: PPUSH
7823: CALL_OW 1
7827: ST_TO_ADDR
// end ; end ;
7828: PPOPN 3
7830: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7831: LD_INT 0
7833: PPUSH
7834: PPUSH
7835: PPUSH
7836: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7837: LD_VAR 0 1
7841: PPUSH
7842: CALL_OW 257
7846: PUSH
7847: LD_INT 12
7849: PUSH
7850: LD_INT 15
7852: PUSH
7853: LD_INT 17
7855: PUSH
7856: LD_INT 16
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: IN
7865: PUSH
7866: LD_VAR 0 1
7870: PPUSH
7871: CALL_OW 263
7875: PUSH
7876: LD_INT 5
7878: EQUAL
7879: OR
7880: IFFALSE 7891
// ApeKilled ( j ) ;
7882: LD_VAR 0 1
7886: PPUSH
7887: CALL 7346 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7891: LD_VAR 0 1
7895: PPUSH
7896: CALL_OW 266
7900: PUSH
7901: LD_INT 0
7903: PUSH
7904: LD_INT 1
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: IN
7911: IFFALSE 7993
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7913: LD_ADDR_VAR 0 4
7917: PUSH
7918: LD_EXP 19
7922: PUSH
7923: LD_VAR 0 1
7927: PPUSH
7928: CALL_OW 255
7932: ARRAY
7933: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7934: LD_ADDR_VAR 0 2
7938: PUSH
7939: LD_EXP 25
7943: PUSH
7944: LD_VAR 0 4
7948: ARRAY
7949: PUSH
7950: LD_INT 1
7952: ARRAY
7953: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7954: LD_ADDR_VAR 0 3
7958: PUSH
7959: LD_EXP 25
7963: PUSH
7964: LD_VAR 0 4
7968: ARRAY
7969: PUSH
7970: LD_INT 2
7972: ARRAY
7973: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7974: LD_VAR 0 2
7978: PPUSH
7979: LD_VAR 0 3
7983: PPUSH
7984: CALL_OW 420
7988: PPUSH
7989: CALL_OW 419
// end ; if def_game_rules then
7993: LD_EXP 41
7997: IFFALSE 8096
// if ( GetType ( j ) = 3 ) then
7999: LD_VAR 0 1
8003: PPUSH
8004: CALL_OW 247
8008: PUSH
8009: LD_INT 3
8011: EQUAL
8012: IFFALSE 8052
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
8014: LD_VAR 0 1
8018: PPUSH
8019: LD_VAR 0 1
8023: PPUSH
8024: CALL_OW 266
8028: PPUSH
8029: LD_VAR 0 1
8033: PPUSH
8034: CALL_OW 255
8038: PPUSH
8039: LD_INT 0
8041: PPUSH
8042: LD_INT 1
8044: NEG
8045: PPUSH
8046: CALL 11606 0 5
8050: GO 8096
// if ( GetChassis ( j ) = 25 ) then
8052: LD_VAR 0 1
8056: PPUSH
8057: CALL_OW 265
8061: PUSH
8062: LD_INT 25
8064: EQUAL
8065: IFFALSE 8096
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8067: LD_VAR 0 1
8071: PPUSH
8072: LD_INT 37
8074: PPUSH
8075: LD_VAR 0 1
8079: PPUSH
8080: CALL_OW 255
8084: PPUSH
8085: LD_INT 0
8087: PPUSH
8088: LD_INT 1
8090: NEG
8091: PPUSH
8092: CALL 11606 0 5
// end ;
8096: PPOPN 5
8098: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8099: LD_EXP 41
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 265
8113: PUSH
8114: LD_INT 25
8116: EQUAL
8117: AND
8118: IFFALSE 8150
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8120: LD_VAR 0 1
8124: PPUSH
8125: LD_INT 37
8127: PPUSH
8128: LD_VAR 0 1
8132: PPUSH
8133: CALL_OW 255
8137: PPUSH
8138: LD_VAR 0 3
8142: PPUSH
8143: LD_INT 1
8145: PPUSH
8146: CALL 11606 0 5
// end ;
8150: PPOPN 4
8152: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8153: LD_VAR 0 1
8157: PPUSH
8158: LD_VAR 0 2
8162: PPUSH
8163: LD_VAR 0 3
8167: PPUSH
8168: LD_OWVAR 2
8172: PPUSH
8173: CALL 12351 0 4
8177: PPOPN 3
8179: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8180: LD_INT 0
8182: PPUSH
8183: PPUSH
// for un in battle_flags_id do
8184: LD_ADDR_VAR 0 2
8188: PUSH
8189: LD_EXP 30
8193: PUSH
8194: FOR_IN
8195: IFFALSE 8270
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8197: LD_VAR 0 2
8201: PPUSH
8202: LD_INT 1
8204: PUSH
8205: LD_LOC 11
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: PUSH
8214: LD_INT 2
8216: PUSH
8217: LD_LOC 11
8221: PUSH
8222: LD_INT 2
8224: DIV
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 3
8232: PUSH
8233: LD_LOC 11
8237: PUSH
8238: LD_INT 5
8240: DIV
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_INT 20
8248: PUSH
8249: LD_LOC 11
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: PPUSH
8264: CALL_OW 423
8268: GO 8194
8270: POP
8271: POP
// end ;
8272: LD_VAR 0 1
8276: RET
// every 1 do var un ;
8277: GO 8279
8279: DISABLE
8280: LD_INT 0
8282: PPUSH
// begin if not def_morale_flags then
8283: LD_EXP 50
8287: NOT
8288: IFFALSE 8292
// exit ;
8290: GO 8369
// if not morale_decreasing_time then
8292: LD_EXP 8
8296: NOT
8297: IFFALSE 8301
// exit ;
8299: GO 8369
// strength = 100 ;
8301: LD_ADDR_LOC 11
8305: PUSH
8306: LD_INT 100
8308: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8309: LD_EXP 8
8313: PPUSH
8314: CALL_OW 67
// strength := strength - 1 ;
8318: LD_ADDR_LOC 11
8322: PUSH
8323: LD_LOC 11
8327: PUSH
8328: LD_INT 1
8330: MINUS
8331: ST_TO_ADDR
// Update_Flags ;
8332: CALL 8180 0 0
// until not strength ;
8336: LD_LOC 11
8340: NOT
8341: IFFALSE 8309
// for un in battle_flags_id do
8343: LD_ADDR_VAR 0 1
8347: PUSH
8348: LD_EXP 30
8352: PUSH
8353: FOR_IN
8354: IFFALSE 8367
// KillBattleFlag ( un ) ;
8356: LD_VAR 0 1
8360: PPUSH
8361: CALL_OW 419
8365: GO 8353
8367: POP
8368: POP
// end ; end_of_file
8369: PPOPN 1
8371: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8372: LD_INT 0
8374: PPUSH
8375: PPUSH
8376: PPUSH
// enable ( 600 ) ;
8377: LD_INT 600
8379: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8380: LD_ADDR_VAR 0 2
8384: PUSH
8385: DOUBLE
8386: LD_INT 1
8388: DEC
8389: ST_TO_ADDR
8390: LD_EXP 39
8394: PUSH
8395: FOR_TO
8396: IFFALSE 8551
// if Position_Sides [ i ] then
8398: LD_EXP 22
8402: PUSH
8403: LD_VAR 0 2
8407: ARRAY
8408: IFFALSE 8549
// for j := 1 to 8 do
8410: LD_ADDR_VAR 0 3
8414: PUSH
8415: DOUBLE
8416: LD_INT 1
8418: DEC
8419: ST_TO_ADDR
8420: LD_INT 8
8422: PUSH
8423: FOR_TO
8424: IFFALSE 8547
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8426: LD_EXP 19
8430: PUSH
8431: LD_VAR 0 3
8435: ARRAY
8436: PUSH
8437: LD_EXP 16
8441: PUSH
8442: LD_EXP 22
8446: PUSH
8447: LD_VAR 0 2
8451: ARRAY
8452: ARRAY
8453: PUSH
8454: LD_EXP 16
8458: PUSH
8459: LD_VAR 0 3
8463: ARRAY
8464: NONEQUAL
8465: PUSH
8466: LD_EXP 21
8470: NOT
8471: PUSH
8472: LD_EXP 22
8476: PUSH
8477: LD_VAR 0 2
8481: ARRAY
8482: PUSH
8483: LD_VAR 0 3
8487: NONEQUAL
8488: AND
8489: OR
8490: AND
8491: IFFALSE 8515
// HideArea ( j , BuildUpAreas [ i ] ) else
8493: LD_VAR 0 3
8497: PPUSH
8498: LD_EXP 39
8502: PUSH
8503: LD_VAR 0 2
8507: ARRAY
8508: PPUSH
8509: CALL_OW 333
8513: GO 8545
// if ( j = your_side ) then
8515: LD_VAR 0 3
8519: PUSH
8520: LD_OWVAR 2
8524: EQUAL
8525: IFFALSE 8545
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8527: LD_EXP 39
8531: PUSH
8532: LD_VAR 0 2
8536: ARRAY
8537: PPUSH
8538: LD_INT 5
8540: PPUSH
8541: CALL_OW 424
8545: GO 8423
8547: POP
8548: POP
8549: GO 8395
8551: POP
8552: POP
// end ;
8553: LD_VAR 0 1
8557: RET
// export function EndBuildUp ; var i , j ; begin
8558: LD_INT 0
8560: PPUSH
8561: PPUSH
8562: PPUSH
// disable ( 600 ) ;
8563: LD_INT 600
8565: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
8566: LD_ADDR_VAR 0 2
8570: PUSH
8571: DOUBLE
8572: LD_INT 1
8574: DEC
8575: ST_TO_ADDR
8576: LD_EXP 39
8580: PUSH
8581: FOR_TO
8582: IFFALSE 8737
// if Position_Sides [ i ] then
8584: LD_EXP 22
8588: PUSH
8589: LD_VAR 0 2
8593: ARRAY
8594: IFFALSE 8735
// for j := 1 to 8 do
8596: LD_ADDR_VAR 0 3
8600: PUSH
8601: DOUBLE
8602: LD_INT 1
8604: DEC
8605: ST_TO_ADDR
8606: LD_INT 8
8608: PUSH
8609: FOR_TO
8610: IFFALSE 8733
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8612: LD_EXP 19
8616: PUSH
8617: LD_VAR 0 3
8621: ARRAY
8622: PUSH
8623: LD_EXP 16
8627: PUSH
8628: LD_EXP 22
8632: PUSH
8633: LD_VAR 0 2
8637: ARRAY
8638: ARRAY
8639: PUSH
8640: LD_EXP 16
8644: PUSH
8645: LD_VAR 0 3
8649: ARRAY
8650: NONEQUAL
8651: PUSH
8652: LD_EXP 21
8656: NOT
8657: PUSH
8658: LD_EXP 22
8662: PUSH
8663: LD_VAR 0 2
8667: ARRAY
8668: PUSH
8669: LD_VAR 0 3
8673: NONEQUAL
8674: AND
8675: OR
8676: AND
8677: IFFALSE 8701
// ShowArea ( j , BuildUpAreas [ i ] ) else
8679: LD_VAR 0 3
8683: PPUSH
8684: LD_EXP 39
8688: PUSH
8689: LD_VAR 0 2
8693: ARRAY
8694: PPUSH
8695: CALL_OW 334
8699: GO 8731
// if ( j = your_side ) then
8701: LD_VAR 0 3
8705: PUSH
8706: LD_OWVAR 2
8710: EQUAL
8711: IFFALSE 8731
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
8713: LD_EXP 39
8717: PUSH
8718: LD_VAR 0 2
8722: ARRAY
8723: PPUSH
8724: LD_INT 0
8726: PPUSH
8727: CALL_OW 424
8731: GO 8609
8733: POP
8734: POP
8735: GO 8581
8737: POP
8738: POP
// end ;
8739: LD_VAR 0 1
8743: RET
// every 5 marked 600 do var i , un ;
8744: GO 8746
8746: DISABLE
8747: LD_INT 0
8749: PPUSH
8750: PPUSH
// begin for i := 1 to BuildUpAreas do
8751: LD_ADDR_VAR 0 1
8755: PUSH
8756: DOUBLE
8757: LD_INT 1
8759: DEC
8760: ST_TO_ADDR
8761: LD_EXP 39
8765: PUSH
8766: FOR_TO
8767: IFFALSE 8922
// if Position_Sides [ i ] then
8769: LD_EXP 22
8773: PUSH
8774: LD_VAR 0 1
8778: ARRAY
8779: IFFALSE 8920
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8781: LD_ADDR_VAR 0 2
8785: PUSH
8786: LD_EXP 39
8790: PUSH
8791: LD_VAR 0 1
8795: ARRAY
8796: PPUSH
8797: LD_INT 2
8799: PUSH
8800: LD_INT 21
8802: PUSH
8803: LD_INT 1
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: LD_INT 21
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: LIST
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_OWVAR 2
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PPUSH
8841: CALL_OW 70
8845: PUSH
8846: FOR_IN
8847: IFFALSE 8918
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
8849: LD_EXP 16
8853: PUSH
8854: LD_EXP 22
8858: PUSH
8859: LD_VAR 0 1
8863: ARRAY
8864: ARRAY
8865: PUSH
8866: LD_EXP 16
8870: PUSH
8871: LD_OWVAR 2
8875: ARRAY
8876: NONEQUAL
8877: PUSH
8878: LD_EXP 21
8882: NOT
8883: PUSH
8884: LD_EXP 22
8888: PUSH
8889: LD_VAR 0 1
8893: ARRAY
8894: PUSH
8895: LD_OWVAR 2
8899: NONEQUAL
8900: AND
8901: OR
8902: IFFALSE 8916
// ComMoveToArea ( un , BuildUpEscape ) ;
8904: LD_VAR 0 2
8908: PPUSH
8909: LD_INT 17
8911: PPUSH
8912: CALL_OW 113
8916: GO 8846
8918: POP
8919: POP
8920: GO 8766
8922: POP
8923: POP
// enable ;
8924: ENABLE
// end ;
8925: PPOPN 2
8927: END
// every 5 5$00 do
8928: GO 8930
8930: DISABLE
// if ( def_builduptime = 1 ) then
8931: LD_EXP 55
8935: PUSH
8936: LD_INT 1
8938: EQUAL
8939: IFFALSE 8945
// EndBuildUp ;
8941: CALL 8558 0 0
8945: END
// every 10 10$00 do
8946: GO 8948
8948: DISABLE
// if ( def_builduptime = 2 ) then
8949: LD_EXP 55
8953: PUSH
8954: LD_INT 2
8956: EQUAL
8957: IFFALSE 8963
// EndBuildUp ;
8959: CALL 8558 0 0
8963: END
// every 15 15$00 do
8964: GO 8966
8966: DISABLE
// if ( def_builduptime = 3 ) then
8967: LD_EXP 55
8971: PUSH
8972: LD_INT 3
8974: EQUAL
8975: IFFALSE 8981
// EndBuildUp ; end_of_file
8977: CALL 8558 0 0
8981: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
8982: LD_INT 0
8984: PPUSH
8985: PPUSH
// if ( not IAmSpec ) then
8986: CALL_OW 531
8990: NOT
8991: IFFALSE 9007
// Result := Limits_Info ^  ;
8993: LD_ADDR_VAR 0 1
8997: PUSH
8998: LD_LOC 23
9002: PUSH
9003: LD_STRING 
9005: ADD
9006: ST_TO_ADDR
// for i := 1 to 8 do
9007: LD_ADDR_VAR 0 2
9011: PUSH
9012: DOUBLE
9013: LD_INT 1
9015: DEC
9016: ST_TO_ADDR
9017: LD_INT 8
9019: PUSH
9020: FOR_TO
9021: IFFALSE 9066
// if Cheaters [ i ] then
9023: LD_LOC 24
9027: PUSH
9028: LD_VAR 0 2
9032: ARRAY
9033: IFFALSE 9064
// Result := Result ^ [ #Cheater , i , i ] ;
9035: LD_ADDR_VAR 0 1
9039: PUSH
9040: LD_VAR 0 1
9044: PUSH
9045: LD_STRING #Cheater
9047: PUSH
9048: LD_VAR 0 2
9052: PUSH
9053: LD_VAR 0 2
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: ADD
9063: ST_TO_ADDR
9064: GO 9020
9066: POP
9067: POP
// end ;
9068: LD_VAR 0 1
9072: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9073: LD_INT 0
9075: PPUSH
9076: PPUSH
9077: PPUSH
9078: PPUSH
9079: PPUSH
// case Game_Type of 10 :
9080: LD_EXP 40
9084: PUSH
9085: LD_INT 10
9087: DOUBLE
9088: EQUAL
9089: IFTRUE 9093
9091: GO 9104
9093: POP
// def_game_rules := 1 ; 11 :
9094: LD_ADDR_EXP 41
9098: PUSH
9099: LD_INT 1
9101: ST_TO_ADDR
9102: GO 9124
9104: LD_INT 11
9106: DOUBLE
9107: EQUAL
9108: IFTRUE 9112
9110: GO 9123
9112: POP
// def_game_rules := 3 ; end ;
9113: LD_ADDR_EXP 41
9117: PUSH
9118: LD_INT 3
9120: ST_TO_ADDR
9121: GO 9124
9123: POP
// case def_game_rules of 0 :
9124: LD_EXP 41
9128: PUSH
9129: LD_INT 0
9131: DOUBLE
9132: EQUAL
9133: IFTRUE 9137
9135: GO 9142
9137: POP
// exit ; 1 :
9138: GO 11200
9140: GO 11100
9142: LD_INT 1
9144: DOUBLE
9145: EQUAL
9146: IFTRUE 9150
9148: GO 9366
9150: POP
// begin def_base_level := 2 ;
9151: LD_ADDR_EXP 42
9155: PUSH
9156: LD_INT 2
9158: ST_TO_ADDR
// def_amount_of_people := 2 ;
9159: LD_ADDR_EXP 43
9163: PUSH
9164: LD_INT 2
9166: ST_TO_ADDR
// def_skill_level := 1 ;
9167: LD_ADDR_EXP 44
9171: PUSH
9172: LD_INT 1
9174: ST_TO_ADDR
// def_starting_resources := 2 ;
9175: LD_ADDR_EXP 45
9179: PUSH
9180: LD_INT 2
9182: ST_TO_ADDR
// def_shipments_density := 1 ;
9183: LD_ADDR_EXP 46
9187: PUSH
9188: LD_INT 1
9190: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9191: LD_ADDR_EXP 47
9195: PUSH
9196: LD_INT 0
9198: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9199: LD_ADDR_EXP 48
9203: PUSH
9204: LD_INT 1
9206: ST_TO_ADDR
// def_shared_vision := 1 ;
9207: LD_ADDR_EXP 49
9211: PUSH
9212: LD_INT 1
9214: ST_TO_ADDR
// def_morale_flags := 3 ;
9215: LD_ADDR_EXP 50
9219: PUSH
9220: LD_INT 3
9222: ST_TO_ADDR
// def_siberite_detection := 1 ;
9223: LD_ADDR_EXP 51
9227: PUSH
9228: LD_INT 1
9230: ST_TO_ADDR
// def_people_respawning := 1 ;
9231: LD_ADDR_EXP 52
9235: PUSH
9236: LD_INT 1
9238: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9239: LD_ADDR_EXP 53
9243: PUSH
9244: LD_INT 1
9246: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9247: LD_ADDR_EXP 54
9251: PUSH
9252: LD_INT 0
9254: ST_TO_ADDR
// def_builduptime := 2 ;
9255: LD_ADDR_EXP 55
9259: PUSH
9260: LD_INT 2
9262: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9263: LD_ADDR_VAR 0 2
9267: PUSH
9268: EMPTY
9269: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9270: LD_ADDR_VAR 0 3
9274: PUSH
9275: EMPTY
9276: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9277: LD_ADDR_LOC 18
9281: PUSH
9282: EMPTY
9283: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9284: LD_ADDR_LOC 19
9288: PUSH
9289: EMPTY
9290: ST_TO_ADDR
// Banned_Controls := [ ] ;
9291: LD_ADDR_LOC 20
9295: PUSH
9296: EMPTY
9297: ST_TO_ADDR
// Banned_Engines := [ ] ;
9298: LD_ADDR_LOC 21
9302: PUSH
9303: EMPTY
9304: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9305: LD_ADDR_LOC 16
9309: PUSH
9310: LD_INT 37
9312: PUSH
9313: EMPTY
9314: LIST
9315: PUSH
9316: LD_INT 4
9318: PUSH
9319: LD_INT 5
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: LD_INT 31
9328: PUSH
9329: LD_INT 32
9331: PUSH
9332: LD_INT 33
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: LIST
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9345: LD_ADDR_LOC 17
9349: PUSH
9350: LD_INT 2
9352: PUSH
9353: LD_INT 2
9355: PUSH
9356: LD_INT 4
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: ST_TO_ADDR
// end ; 2 :
9364: GO 11100
9366: LD_INT 2
9368: DOUBLE
9369: EQUAL
9370: IFTRUE 9374
9372: GO 9583
9374: POP
// begin def_base_level := 1 ;
9375: LD_ADDR_EXP 42
9379: PUSH
9380: LD_INT 1
9382: ST_TO_ADDR
// def_amount_of_people := 2 ;
9383: LD_ADDR_EXP 43
9387: PUSH
9388: LD_INT 2
9390: ST_TO_ADDR
// def_skill_level := 3 ;
9391: LD_ADDR_EXP 44
9395: PUSH
9396: LD_INT 3
9398: ST_TO_ADDR
// def_starting_resources := 3 ;
9399: LD_ADDR_EXP 45
9403: PUSH
9404: LD_INT 3
9406: ST_TO_ADDR
// def_shipments_density := 2 ;
9407: LD_ADDR_EXP 46
9411: PUSH
9412: LD_INT 2
9414: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9415: LD_ADDR_EXP 47
9419: PUSH
9420: LD_INT 1
9422: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9423: LD_ADDR_EXP 48
9427: PUSH
9428: LD_INT 2
9430: ST_TO_ADDR
// def_shared_vision := 1 ;
9431: LD_ADDR_EXP 49
9435: PUSH
9436: LD_INT 1
9438: ST_TO_ADDR
// def_morale_flags := 0 ;
9439: LD_ADDR_EXP 50
9443: PUSH
9444: LD_INT 0
9446: ST_TO_ADDR
// def_siberite_detection := 1 ;
9447: LD_ADDR_EXP 51
9451: PUSH
9452: LD_INT 1
9454: ST_TO_ADDR
// def_people_respawning := 0 ;
9455: LD_ADDR_EXP 52
9459: PUSH
9460: LD_INT 0
9462: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9463: LD_ADDR_EXP 53
9467: PUSH
9468: LD_INT 0
9470: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9471: LD_ADDR_EXP 54
9475: PUSH
9476: LD_INT 0
9478: ST_TO_ADDR
// def_builduptime := 2 ;
9479: LD_ADDR_EXP 55
9483: PUSH
9484: LD_INT 2
9486: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9487: LD_ADDR_VAR 0 2
9491: PUSH
9492: LD_INT 1
9494: PUSH
9495: EMPTY
9496: LIST
9497: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9498: LD_ADDR_VAR 0 3
9502: PUSH
9503: EMPTY
9504: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9505: LD_ADDR_LOC 18
9509: PUSH
9510: EMPTY
9511: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9512: LD_ADDR_LOC 19
9516: PUSH
9517: EMPTY
9518: ST_TO_ADDR
// Banned_Controls := [ ] ;
9519: LD_ADDR_LOC 20
9523: PUSH
9524: EMPTY
9525: ST_TO_ADDR
// Banned_Engines := [ ] ;
9526: LD_ADDR_LOC 21
9530: PUSH
9531: EMPTY
9532: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9533: LD_ADDR_LOC 16
9537: PUSH
9538: LD_INT 4
9540: PUSH
9541: LD_INT 5
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PUSH
9548: LD_INT 31
9550: PUSH
9551: LD_INT 32
9553: PUSH
9554: LD_INT 33
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9566: LD_ADDR_LOC 17
9570: PUSH
9571: LD_INT 1
9573: PUSH
9574: LD_INT 2
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: ST_TO_ADDR
// end ; 3 :
9581: GO 11100
9583: LD_INT 3
9585: DOUBLE
9586: EQUAL
9587: IFTRUE 9591
9589: GO 9834
9591: POP
// begin def_base_level := 1 ;
9592: LD_ADDR_EXP 42
9596: PUSH
9597: LD_INT 1
9599: ST_TO_ADDR
// def_amount_of_people := 2 ;
9600: LD_ADDR_EXP 43
9604: PUSH
9605: LD_INT 2
9607: ST_TO_ADDR
// def_skill_level := 3 ;
9608: LD_ADDR_EXP 44
9612: PUSH
9613: LD_INT 3
9615: ST_TO_ADDR
// def_starting_resources := 3 ;
9616: LD_ADDR_EXP 45
9620: PUSH
9621: LD_INT 3
9623: ST_TO_ADDR
// def_shipments_density := 1 ;
9624: LD_ADDR_EXP 46
9628: PUSH
9629: LD_INT 1
9631: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9632: LD_ADDR_EXP 47
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9640: LD_ADDR_EXP 48
9644: PUSH
9645: LD_INT 1
9647: ST_TO_ADDR
// def_shared_vision := 1 ;
9648: LD_ADDR_EXP 49
9652: PUSH
9653: LD_INT 1
9655: ST_TO_ADDR
// def_morale_flags := 0 ;
9656: LD_ADDR_EXP 50
9660: PUSH
9661: LD_INT 0
9663: ST_TO_ADDR
// def_siberite_detection := 1 ;
9664: LD_ADDR_EXP 51
9668: PUSH
9669: LD_INT 1
9671: ST_TO_ADDR
// def_people_respawning := 0 ;
9672: LD_ADDR_EXP 52
9676: PUSH
9677: LD_INT 0
9679: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9680: LD_ADDR_EXP 53
9684: PUSH
9685: LD_INT 2
9687: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9688: LD_ADDR_EXP 54
9692: PUSH
9693: LD_INT 0
9695: ST_TO_ADDR
// def_builduptime := 1 ;
9696: LD_ADDR_EXP 55
9700: PUSH
9701: LD_INT 1
9703: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9704: LD_ADDR_VAR 0 2
9708: PUSH
9709: LD_INT 23
9711: PUSH
9712: EMPTY
9713: LIST
9714: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
9715: LD_ADDR_VAR 0 3
9719: PUSH
9720: LD_INT 2
9722: PUSH
9723: LD_INT 37
9725: PUSH
9726: LD_INT 32
9728: PUSH
9729: LD_INT 33
9731: PUSH
9732: LD_INT 36
9734: PUSH
9735: LD_INT 16
9737: PUSH
9738: LD_INT 23
9740: PUSH
9741: LD_INT 21
9743: PUSH
9744: LD_INT 18
9746: PUSH
9747: LD_INT 22
9749: PUSH
9750: LD_INT 20
9752: PUSH
9753: LD_INT 19
9755: PUSH
9756: LD_INT 25
9758: PUSH
9759: LD_INT 17
9761: PUSH
9762: LD_INT 24
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9782: LD_ADDR_LOC 18
9786: PUSH
9787: EMPTY
9788: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9789: LD_ADDR_LOC 19
9793: PUSH
9794: EMPTY
9795: ST_TO_ADDR
// Banned_Controls := [ ] ;
9796: LD_ADDR_LOC 20
9800: PUSH
9801: EMPTY
9802: ST_TO_ADDR
// Banned_Engines := [ ] ;
9803: LD_ADDR_LOC 21
9807: PUSH
9808: EMPTY
9809: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9810: LD_ADDR_LOC 16
9814: PUSH
9815: EMPTY
9816: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9817: LD_ADDR_LOC 17
9821: PUSH
9822: EMPTY
9823: ST_TO_ADDR
// No_Mechs := true ;
9824: LD_ADDR_EXP 56
9828: PUSH
9829: LD_INT 1
9831: ST_TO_ADDR
// end ; 4 :
9832: GO 11100
9834: LD_INT 4
9836: DOUBLE
9837: EQUAL
9838: IFTRUE 9842
9840: GO 10017
9842: POP
// begin def_base_level := 1 ;
9843: LD_ADDR_EXP 42
9847: PUSH
9848: LD_INT 1
9850: ST_TO_ADDR
// def_amount_of_people := 2 ;
9851: LD_ADDR_EXP 43
9855: PUSH
9856: LD_INT 2
9858: ST_TO_ADDR
// def_skill_level := 3 ;
9859: LD_ADDR_EXP 44
9863: PUSH
9864: LD_INT 3
9866: ST_TO_ADDR
// def_starting_resources := 3 ;
9867: LD_ADDR_EXP 45
9871: PUSH
9872: LD_INT 3
9874: ST_TO_ADDR
// def_shipments_density := 2 ;
9875: LD_ADDR_EXP 46
9879: PUSH
9880: LD_INT 2
9882: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9883: LD_ADDR_EXP 47
9887: PUSH
9888: LD_INT 1
9890: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9891: LD_ADDR_EXP 48
9895: PUSH
9896: LD_INT 2
9898: ST_TO_ADDR
// def_shared_vision := 1 ;
9899: LD_ADDR_EXP 49
9903: PUSH
9904: LD_INT 1
9906: ST_TO_ADDR
// def_morale_flags := 0 ;
9907: LD_ADDR_EXP 50
9911: PUSH
9912: LD_INT 0
9914: ST_TO_ADDR
// def_siberite_detection := 1 ;
9915: LD_ADDR_EXP 51
9919: PUSH
9920: LD_INT 1
9922: ST_TO_ADDR
// def_people_respawning := 0 ;
9923: LD_ADDR_EXP 52
9927: PUSH
9928: LD_INT 0
9930: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9931: LD_ADDR_EXP 53
9935: PUSH
9936: LD_INT 0
9938: ST_TO_ADDR
// def_siberite_bomb := 1 ;
9939: LD_ADDR_EXP 54
9943: PUSH
9944: LD_INT 1
9946: ST_TO_ADDR
// def_builduptime := 3 ;
9947: LD_ADDR_EXP 55
9951: PUSH
9952: LD_INT 3
9954: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9955: LD_ADDR_VAR 0 2
9959: PUSH
9960: LD_INT 1
9962: PUSH
9963: EMPTY
9964: LIST
9965: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9966: LD_ADDR_VAR 0 3
9970: PUSH
9971: EMPTY
9972: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9973: LD_ADDR_LOC 18
9977: PUSH
9978: EMPTY
9979: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9980: LD_ADDR_LOC 19
9984: PUSH
9985: EMPTY
9986: ST_TO_ADDR
// Banned_Controls := [ ] ;
9987: LD_ADDR_LOC 20
9991: PUSH
9992: EMPTY
9993: ST_TO_ADDR
// Banned_Engines := [ ] ;
9994: LD_ADDR_LOC 21
9998: PUSH
9999: EMPTY
10000: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10001: LD_ADDR_LOC 16
10005: PUSH
10006: EMPTY
10007: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10008: LD_ADDR_LOC 17
10012: PUSH
10013: EMPTY
10014: ST_TO_ADDR
// end ; 5 :
10015: GO 11100
10017: LD_INT 5
10019: DOUBLE
10020: EQUAL
10021: IFTRUE 10025
10023: GO 10274
10025: POP
// begin def_base_level := 0 ;
10026: LD_ADDR_EXP 42
10030: PUSH
10031: LD_INT 0
10033: ST_TO_ADDR
// def_amount_of_people := 0 ;
10034: LD_ADDR_EXP 43
10038: PUSH
10039: LD_INT 0
10041: ST_TO_ADDR
// def_skill_level := 0 ;
10042: LD_ADDR_EXP 44
10046: PUSH
10047: LD_INT 0
10049: ST_TO_ADDR
// def_starting_resources := 0 ;
10050: LD_ADDR_EXP 45
10054: PUSH
10055: LD_INT 0
10057: ST_TO_ADDR
// def_shipments_density := 0 ;
10058: LD_ADDR_EXP 46
10062: PUSH
10063: LD_INT 0
10065: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10066: LD_ADDR_EXP 47
10070: PUSH
10071: LD_INT 0
10073: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10074: LD_ADDR_EXP 48
10078: PUSH
10079: LD_INT 0
10081: ST_TO_ADDR
// def_shared_vision := 1 ;
10082: LD_ADDR_EXP 49
10086: PUSH
10087: LD_INT 1
10089: ST_TO_ADDR
// def_morale_flags := 0 ;
10090: LD_ADDR_EXP 50
10094: PUSH
10095: LD_INT 0
10097: ST_TO_ADDR
// def_siberite_detection := 0 ;
10098: LD_ADDR_EXP 51
10102: PUSH
10103: LD_INT 0
10105: ST_TO_ADDR
// def_people_respawning := 1 ;
10106: LD_ADDR_EXP 52
10110: PUSH
10111: LD_INT 1
10113: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10114: LD_ADDR_EXP 53
10118: PUSH
10119: LD_INT 1
10121: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10122: LD_ADDR_EXP 54
10126: PUSH
10127: LD_INT 0
10129: ST_TO_ADDR
// def_builduptime := 0 ;
10130: LD_ADDR_EXP 55
10134: PUSH
10135: LD_INT 0
10137: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10138: LD_ADDR_VAR 0 2
10142: PUSH
10143: LD_INT 10
10145: PUSH
10146: LD_INT 3
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10153: LD_ADDR_VAR 0 3
10157: PUSH
10158: LD_INT 12
10160: PUSH
10161: LD_INT 11
10163: PUSH
10164: LD_INT 14
10166: PUSH
10167: LD_INT 13
10169: PUSH
10170: LD_INT 5
10172: PUSH
10173: LD_INT 24
10175: PUSH
10176: LD_INT 21
10178: PUSH
10179: LD_INT 33
10181: PUSH
10182: LD_INT 36
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10196: LD_ADDR_LOC 18
10200: PUSH
10201: LD_INT 31
10203: PUSH
10204: EMPTY
10205: LIST
10206: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10207: LD_ADDR_LOC 19
10211: PUSH
10212: EMPTY
10213: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10214: LD_ADDR_LOC 20
10218: PUSH
10219: LD_INT 2
10221: PUSH
10222: EMPTY
10223: LIST
10224: ST_TO_ADDR
// Banned_Engines := [ ] ;
10225: LD_ADDR_LOC 21
10229: PUSH
10230: EMPTY
10231: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10232: LD_ADDR_LOC 16
10236: PUSH
10237: LD_INT 4
10239: PUSH
10240: EMPTY
10241: LIST
10242: PUSH
10243: LD_INT 31
10245: PUSH
10246: LD_INT 32
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10257: LD_ADDR_LOC 17
10261: PUSH
10262: LD_INT 1
10264: PUSH
10265: LD_INT 1
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: ST_TO_ADDR
// end ; 6 :
10272: GO 11100
10274: LD_INT 6
10276: DOUBLE
10277: EQUAL
10278: IFTRUE 10282
10280: GO 10485
10282: POP
// begin def_base_level := 1 ;
10283: LD_ADDR_EXP 42
10287: PUSH
10288: LD_INT 1
10290: ST_TO_ADDR
// def_amount_of_people := 2 ;
10291: LD_ADDR_EXP 43
10295: PUSH
10296: LD_INT 2
10298: ST_TO_ADDR
// def_skill_level := 3 ;
10299: LD_ADDR_EXP 44
10303: PUSH
10304: LD_INT 3
10306: ST_TO_ADDR
// def_starting_resources := 3 ;
10307: LD_ADDR_EXP 45
10311: PUSH
10312: LD_INT 3
10314: ST_TO_ADDR
// def_shipments_density := 1 ;
10315: LD_ADDR_EXP 46
10319: PUSH
10320: LD_INT 1
10322: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10323: LD_ADDR_EXP 47
10327: PUSH
10328: LD_INT 0
10330: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10331: LD_ADDR_EXP 48
10335: PUSH
10336: LD_INT 1
10338: ST_TO_ADDR
// def_shared_vision := 1 ;
10339: LD_ADDR_EXP 49
10343: PUSH
10344: LD_INT 1
10346: ST_TO_ADDR
// def_morale_flags := 0 ;
10347: LD_ADDR_EXP 50
10351: PUSH
10352: LD_INT 0
10354: ST_TO_ADDR
// def_siberite_detection := 1 ;
10355: LD_ADDR_EXP 51
10359: PUSH
10360: LD_INT 1
10362: ST_TO_ADDR
// def_people_respawning := 2 ;
10363: LD_ADDR_EXP 52
10367: PUSH
10368: LD_INT 2
10370: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10371: LD_ADDR_EXP 53
10375: PUSH
10376: LD_INT 1
10378: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10379: LD_ADDR_EXP 54
10383: PUSH
10384: LD_INT 0
10386: ST_TO_ADDR
// def_builduptime := 1 ;
10387: LD_ADDR_EXP 55
10391: PUSH
10392: LD_INT 1
10394: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10395: LD_ADDR_VAR 0 2
10399: PUSH
10400: LD_INT 23
10402: PUSH
10403: EMPTY
10404: LIST
10405: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10406: LD_ADDR_VAR 0 3
10410: PUSH
10411: LD_INT 2
10413: PUSH
10414: LD_INT 37
10416: PUSH
10417: LD_INT 31
10419: PUSH
10420: LD_INT 32
10422: PUSH
10423: LD_INT 33
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10433: LD_ADDR_LOC 18
10437: PUSH
10438: EMPTY
10439: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10440: LD_ADDR_LOC 19
10444: PUSH
10445: EMPTY
10446: ST_TO_ADDR
// Banned_Controls := [ ] ;
10447: LD_ADDR_LOC 20
10451: PUSH
10452: EMPTY
10453: ST_TO_ADDR
// Banned_Engines := [ ] ;
10454: LD_ADDR_LOC 21
10458: PUSH
10459: EMPTY
10460: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10461: LD_ADDR_LOC 16
10465: PUSH
10466: EMPTY
10467: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10468: LD_ADDR_LOC 17
10472: PUSH
10473: EMPTY
10474: ST_TO_ADDR
// No_Mechs := true ;
10475: LD_ADDR_EXP 56
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// end ; 7 :
10483: GO 11100
10485: LD_INT 7
10487: DOUBLE
10488: EQUAL
10489: IFTRUE 10493
10491: GO 10691
10493: POP
// begin def_base_level := 1 ;
10494: LD_ADDR_EXP 42
10498: PUSH
10499: LD_INT 1
10501: ST_TO_ADDR
// def_amount_of_people := 2 ;
10502: LD_ADDR_EXP 43
10506: PUSH
10507: LD_INT 2
10509: ST_TO_ADDR
// def_skill_level := 3 ;
10510: LD_ADDR_EXP 44
10514: PUSH
10515: LD_INT 3
10517: ST_TO_ADDR
// def_starting_resources := 3 ;
10518: LD_ADDR_EXP 45
10522: PUSH
10523: LD_INT 3
10525: ST_TO_ADDR
// def_shipments_density := 1 ;
10526: LD_ADDR_EXP 46
10530: PUSH
10531: LD_INT 1
10533: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10534: LD_ADDR_EXP 47
10538: PUSH
10539: LD_INT 1
10541: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10542: LD_ADDR_EXP 48
10546: PUSH
10547: LD_INT 2
10549: ST_TO_ADDR
// def_shared_vision := 1 ;
10550: LD_ADDR_EXP 49
10554: PUSH
10555: LD_INT 1
10557: ST_TO_ADDR
// def_morale_flags := 0 ;
10558: LD_ADDR_EXP 50
10562: PUSH
10563: LD_INT 0
10565: ST_TO_ADDR
// def_siberite_detection := 1 ;
10566: LD_ADDR_EXP 51
10570: PUSH
10571: LD_INT 1
10573: ST_TO_ADDR
// def_people_respawning := 0 ;
10574: LD_ADDR_EXP 52
10578: PUSH
10579: LD_INT 0
10581: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10582: LD_ADDR_EXP 53
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10590: LD_ADDR_EXP 54
10594: PUSH
10595: LD_INT 0
10597: ST_TO_ADDR
// def_builduptime := 3 ;
10598: LD_ADDR_EXP 55
10602: PUSH
10603: LD_INT 3
10605: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10606: LD_ADDR_VAR 0 2
10610: PUSH
10611: LD_INT 23
10613: PUSH
10614: EMPTY
10615: LIST
10616: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
10617: LD_ADDR_VAR 0 3
10621: PUSH
10622: LD_INT 37
10624: PUSH
10625: EMPTY
10626: LIST
10627: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10628: LD_ADDR_LOC 18
10632: PUSH
10633: EMPTY
10634: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10635: LD_ADDR_LOC 19
10639: PUSH
10640: EMPTY
10641: ST_TO_ADDR
// Banned_Controls := [ ] ;
10642: LD_ADDR_LOC 20
10646: PUSH
10647: EMPTY
10648: ST_TO_ADDR
// Banned_Engines := [ ] ;
10649: LD_ADDR_LOC 21
10653: PUSH
10654: EMPTY
10655: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10656: LD_ADDR_LOC 16
10660: PUSH
10661: LD_INT 31
10663: PUSH
10664: LD_INT 32
10666: PUSH
10667: LD_INT 33
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: EMPTY
10676: LIST
10677: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10678: LD_ADDR_LOC 17
10682: PUSH
10683: LD_INT 10
10685: PUSH
10686: EMPTY
10687: LIST
10688: ST_TO_ADDR
// end ; 8 :
10689: GO 11100
10691: LD_INT 8
10693: DOUBLE
10694: EQUAL
10695: IFTRUE 10699
10697: GO 11099
10699: POP
// begin def_base_level := 0 ;
10700: LD_ADDR_EXP 42
10704: PUSH
10705: LD_INT 0
10707: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
10708: LD_ADDR_EXP 43
10712: PUSH
10713: LD_INT 0
10715: PPUSH
10716: LD_INT 1
10718: PPUSH
10719: CALL_OW 12
10723: ST_TO_ADDR
// def_skill_level := 0 ;
10724: LD_ADDR_EXP 44
10728: PUSH
10729: LD_INT 0
10731: ST_TO_ADDR
// def_starting_resources := 2 ;
10732: LD_ADDR_EXP 45
10736: PUSH
10737: LD_INT 2
10739: ST_TO_ADDR
// def_shipments_density := 1 ;
10740: LD_ADDR_EXP 46
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10748: LD_ADDR_EXP 47
10752: PUSH
10753: LD_INT 0
10755: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10756: LD_ADDR_EXP 48
10760: PUSH
10761: LD_INT 0
10763: ST_TO_ADDR
// def_shared_vision := 1 ;
10764: LD_ADDR_EXP 49
10768: PUSH
10769: LD_INT 1
10771: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
10772: LD_ADDR_EXP 50
10776: PUSH
10777: LD_INT 0
10779: PPUSH
10780: LD_INT 2
10782: PPUSH
10783: CALL_OW 12
10787: ST_TO_ADDR
// def_siberite_detection := 0 ;
10788: LD_ADDR_EXP 51
10792: PUSH
10793: LD_INT 0
10795: ST_TO_ADDR
// def_people_respawning := 0 ;
10796: LD_ADDR_EXP 52
10800: PUSH
10801: LD_INT 0
10803: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10804: LD_ADDR_EXP 53
10808: PUSH
10809: LD_INT 2
10811: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10812: LD_ADDR_EXP 54
10816: PUSH
10817: LD_INT 0
10819: ST_TO_ADDR
// def_builduptime := 0 ;
10820: LD_ADDR_EXP 55
10824: PUSH
10825: LD_INT 0
10827: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
10828: LD_ADDR_VAR 0 2
10832: PUSH
10833: LD_INT 23
10835: PUSH
10836: LD_INT 20
10838: PUSH
10839: LD_INT 40
10841: PUSH
10842: LD_INT 47
10844: PUSH
10845: LD_INT 46
10847: PUSH
10848: LD_INT 39
10850: PUSH
10851: LD_INT 71
10853: PUSH
10854: LD_INT 34
10856: PUSH
10857: LD_INT 41
10859: PUSH
10860: LD_INT 44
10862: PUSH
10863: LD_INT 17
10865: PUSH
10866: LD_INT 16
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
10883: LD_ADDR_VAR 0 3
10887: PUSH
10888: LD_INT 37
10890: PUSH
10891: LD_INT 5
10893: PUSH
10894: LD_INT 13
10896: PUSH
10897: LD_INT 34
10899: PUSH
10900: LD_INT 12
10902: PUSH
10903: LD_INT 15
10905: PUSH
10906: LD_INT 11
10908: PUSH
10909: LD_INT 14
10911: PUSH
10912: LD_INT 29
10914: PUSH
10915: LD_INT 30
10917: PUSH
10918: LD_INT 28
10920: PUSH
10921: LD_INT 24
10923: PUSH
10924: LD_INT 25
10926: PUSH
10927: LD_INT 20
10929: PUSH
10930: LD_INT 21
10932: PUSH
10933: LD_INT 22
10935: PUSH
10936: LD_INT 36
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10958: LD_ADDR_LOC 18
10962: PUSH
10963: EMPTY
10964: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
10965: LD_ADDR_LOC 19
10969: PUSH
10970: LD_INT 14
10972: PUSH
10973: EMPTY
10974: LIST
10975: ST_TO_ADDR
// Banned_Controls := [ ] ;
10976: LD_ADDR_LOC 20
10980: PUSH
10981: EMPTY
10982: ST_TO_ADDR
// Banned_Engines := [ ] ;
10983: LD_ADDR_LOC 21
10987: PUSH
10988: EMPTY
10989: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
10990: LD_ADDR_LOC 16
10994: PUSH
10995: LD_INT 31
10997: PUSH
10998: LD_INT 32
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 4
11007: PUSH
11008: EMPTY
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
11015: LD_ADDR_LOC 17
11019: PUSH
11020: LD_INT 2
11022: PUSH
11023: LD_INT 1
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: ST_TO_ADDR
// for i := 1 to 8 do
11030: LD_ADDR_VAR 0 4
11034: PUSH
11035: DOUBLE
11036: LD_INT 1
11038: DEC
11039: ST_TO_ADDR
11040: LD_INT 8
11042: PUSH
11043: FOR_TO
11044: IFFALSE 11095
// if ( Side_Nations [ i ] = 3 ) then
11046: LD_EXP 20
11050: PUSH
11051: LD_VAR 0 4
11055: ARRAY
11056: PUSH
11057: LD_INT 3
11059: EQUAL
11060: IFFALSE 11093
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11062: LD_ADDR_EXP 20
11066: PUSH
11067: LD_EXP 20
11071: PPUSH
11072: LD_VAR 0 4
11076: PPUSH
11077: LD_INT 1
11079: PPUSH
11080: LD_INT 2
11082: PPUSH
11083: CALL_OW 12
11087: PPUSH
11088: CALL_OW 1
11092: ST_TO_ADDR
11093: GO 11043
11095: POP
11096: POP
// end ; end ;
11097: GO 11100
11099: POP
// for i := 1 to 8 do
11100: LD_ADDR_VAR 0 4
11104: PUSH
11105: DOUBLE
11106: LD_INT 1
11108: DEC
11109: ST_TO_ADDR
11110: LD_INT 8
11112: PUSH
11113: FOR_TO
11114: IFFALSE 11198
// if Side_Positions [ i ] then
11116: LD_EXP 19
11120: PUSH
11121: LD_VAR 0 4
11125: ARRAY
11126: IFFALSE 11196
// begin for j in Unavailable_Techs do
11128: LD_ADDR_VAR 0 5
11132: PUSH
11133: LD_VAR 0 2
11137: PUSH
11138: FOR_IN
11139: IFFALSE 11160
// SetTech ( j , i , 0 ) ;
11141: LD_VAR 0 5
11145: PPUSH
11146: LD_VAR 0 4
11150: PPUSH
11151: LD_INT 0
11153: PPUSH
11154: CALL_OW 322
11158: GO 11138
11160: POP
11161: POP
// for j in Unavailable_Builds do
11162: LD_ADDR_VAR 0 5
11166: PUSH
11167: LD_VAR 0 3
11171: PUSH
11172: FOR_IN
11173: IFFALSE 11194
// SetRestrict ( j , i , 0 ) ;
11175: LD_VAR 0 5
11179: PPUSH
11180: LD_VAR 0 4
11184: PPUSH
11185: LD_INT 0
11187: PPUSH
11188: CALL_OW 324
11192: GO 11172
11194: POP
11195: POP
// end ;
11196: GO 11113
11198: POP
11199: POP
// end ;
11200: LD_VAR 0 1
11204: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11205: LD_INT 0
11207: PPUSH
11208: PPUSH
11209: PPUSH
11210: PPUSH
11211: PPUSH
11212: PPUSH
11213: PPUSH
// for i := 1 to Restricted_Builds do
11214: LD_ADDR_VAR 0 2
11218: PUSH
11219: DOUBLE
11220: LD_INT 1
11222: DEC
11223: ST_TO_ADDR
11224: LD_LOC 16
11228: PUSH
11229: FOR_TO
11230: IFFALSE 11540
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11232: LD_LOC 16
11236: PUSH
11237: LD_VAR 0 2
11241: ARRAY
11242: PUSH
11243: LD_INT 1
11245: ARRAY
11246: PUSH
11247: LD_INT 31
11249: DOUBLE
11250: EQUAL
11251: IFTRUE 11267
11253: LD_INT 32
11255: DOUBLE
11256: EQUAL
11257: IFTRUE 11267
11259: LD_INT 33
11261: DOUBLE
11262: EQUAL
11263: IFTRUE 11267
11265: GO 11278
11267: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11268: LD_ADDR_VAR 0 6
11272: PUSH
11273: LD_STRING #Turrets
11275: ST_TO_ADDR
11276: GO 11323
11278: LD_INT 4
11280: DOUBLE
11281: EQUAL
11282: IFTRUE 11292
11284: LD_INT 5
11286: DOUBLE
11287: EQUAL
11288: IFTRUE 11292
11290: GO 11303
11292: POP
// btype := #Armouries ; b_Behemoth :
11293: LD_ADDR_VAR 0 6
11297: PUSH
11298: LD_STRING #Armouries
11300: ST_TO_ADDR
11301: GO 11323
11303: LD_INT 37
11305: DOUBLE
11306: EQUAL
11307: IFTRUE 11311
11309: GO 11322
11311: POP
// btype := #Behemoths ; end ;
11312: LD_ADDR_VAR 0 6
11316: PUSH
11317: LD_STRING #Behemoths
11319: ST_TO_ADDR
11320: GO 11323
11322: POP
// list := [ ] ;
11323: LD_ADDR_VAR 0 7
11327: PUSH
11328: EMPTY
11329: ST_TO_ADDR
// for j := 1 to 8 do
11330: LD_ADDR_VAR 0 3
11334: PUSH
11335: DOUBLE
11336: LD_INT 1
11338: DEC
11339: ST_TO_ADDR
11340: LD_INT 8
11342: PUSH
11343: FOR_TO
11344: IFFALSE 11437
// if Side_Positions [ j ] then
11346: LD_EXP 19
11350: PUSH
11351: LD_VAR 0 3
11355: ARRAY
11356: IFFALSE 11435
// begin amount := 0 ;
11358: LD_ADDR_VAR 0 5
11362: PUSH
11363: LD_INT 0
11365: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11366: LD_ADDR_VAR 0 4
11370: PUSH
11371: LD_LOC 16
11375: PUSH
11376: LD_VAR 0 2
11380: ARRAY
11381: PUSH
11382: FOR_IN
11383: IFFALSE 11431
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11385: LD_ADDR_VAR 0 5
11389: PUSH
11390: LD_VAR 0 5
11394: PUSH
11395: LD_INT 22
11397: PUSH
11398: LD_VAR 0 3
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 30
11409: PUSH
11410: LD_VAR 0 4
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PPUSH
11423: CALL_OW 69
11427: PLUS
11428: ST_TO_ADDR
11429: GO 11382
11431: POP
11432: POP
// break ;
11433: GO 11437
// end ;
11435: GO 11343
11437: POP
11438: POP
// list := [ ] ;
11439: LD_ADDR_VAR 0 7
11443: PUSH
11444: EMPTY
11445: ST_TO_ADDR
// for j := 1 to 8 do
11446: LD_ADDR_VAR 0 3
11450: PUSH
11451: DOUBLE
11452: LD_INT 1
11454: DEC
11455: ST_TO_ADDR
11456: LD_INT 8
11458: PUSH
11459: FOR_TO
11460: IFFALSE 11480
// list := list ^ amount ;
11462: LD_ADDR_VAR 0 7
11466: PUSH
11467: LD_VAR 0 7
11471: PUSH
11472: LD_VAR 0 5
11476: ADD
11477: ST_TO_ADDR
11478: GO 11459
11480: POP
11481: POP
// Already_Built := Already_Built ^ [ list ] ;
11482: LD_ADDR_LOC 22
11486: PUSH
11487: LD_LOC 22
11491: PUSH
11492: LD_VAR 0 7
11496: PUSH
11497: EMPTY
11498: LIST
11499: ADD
11500: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11501: LD_ADDR_LOC 23
11505: PUSH
11506: LD_LOC 23
11510: PUSH
11511: LD_VAR 0 6
11515: PUSH
11516: LD_VAR 0 5
11520: PUSH
11521: LD_LOC 17
11525: PUSH
11526: LD_VAR 0 2
11530: ARRAY
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: ADD
11537: ST_TO_ADDR
// end ;
11538: GO 11229
11540: POP
11541: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11542: LD_ADDR_LOC 24
11546: PUSH
11547: LD_INT 0
11549: PUSH
11550: LD_INT 0
11552: PUSH
11553: LD_INT 0
11555: PUSH
11556: LD_INT 0
11558: PUSH
11559: LD_INT 0
11561: PUSH
11562: LD_INT 0
11564: PUSH
11565: LD_INT 0
11567: PUSH
11568: LD_INT 0
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: ST_TO_ADDR
// if Limits_Info then
11581: LD_LOC 23
11585: IFFALSE 11601
// Limits_Info := #Limits ^ Limits_Info ;
11587: LD_ADDR_LOC 23
11591: PUSH
11592: LD_STRING #Limits
11594: PUSH
11595: LD_LOC 23
11599: ADD
11600: ST_TO_ADDR
// end ;
11601: LD_VAR 0 1
11605: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
11606: LD_INT 0
11608: PPUSH
11609: PPUSH
11610: PPUSH
11611: PPUSH
// for i := 1 to Restricted_Builds do
11612: LD_ADDR_VAR 0 7
11616: PUSH
11617: DOUBLE
11618: LD_INT 1
11620: DEC
11621: ST_TO_ADDR
11622: LD_LOC 16
11626: PUSH
11627: FOR_TO
11628: IFFALSE 12051
// if BType in Restricted_Builds [ i ] then
11630: LD_VAR 0 2
11634: PUSH
11635: LD_LOC 16
11639: PUSH
11640: LD_VAR 0 7
11644: ARRAY
11645: IN
11646: IFFALSE 12049
// begin if old_side then
11648: LD_VAR 0 4
11652: IFFALSE 11778
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
11654: LD_LOC 22
11658: PUSH
11659: LD_VAR 0 7
11663: ARRAY
11664: PUSH
11665: LD_VAR 0 3
11669: ARRAY
11670: PUSH
11671: LD_VAR 0 5
11675: PLUS
11676: PUSH
11677: LD_LOC 17
11681: PUSH
11682: LD_VAR 0 7
11686: ARRAY
11687: GREATER
11688: IFFALSE 11714
// begin SetSide ( un , old_side ) ;
11690: LD_VAR 0 1
11694: PPUSH
11695: LD_VAR 0 4
11699: PPUSH
11700: CALL_OW 235
// count := 0 ;
11704: LD_ADDR_VAR 0 5
11708: PUSH
11709: LD_INT 0
11711: ST_TO_ADDR
// end else
11712: GO 11778
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
11714: LD_ADDR_LOC 22
11718: PUSH
11719: LD_LOC 22
11723: PPUSH
11724: LD_VAR 0 7
11728: PPUSH
11729: LD_LOC 22
11733: PUSH
11734: LD_VAR 0 7
11738: ARRAY
11739: PPUSH
11740: LD_VAR 0 4
11744: PPUSH
11745: LD_LOC 22
11749: PUSH
11750: LD_VAR 0 7
11754: ARRAY
11755: PUSH
11756: LD_VAR 0 4
11760: ARRAY
11761: PUSH
11762: LD_VAR 0 5
11766: MINUS
11767: PPUSH
11768: CALL_OW 1
11772: PPUSH
11773: CALL_OW 1
11777: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
11778: LD_ADDR_LOC 22
11782: PUSH
11783: LD_LOC 22
11787: PPUSH
11788: LD_VAR 0 7
11792: PPUSH
11793: LD_LOC 22
11797: PUSH
11798: LD_VAR 0 7
11802: ARRAY
11803: PPUSH
11804: LD_VAR 0 3
11808: PPUSH
11809: LD_LOC 22
11813: PUSH
11814: LD_VAR 0 7
11818: ARRAY
11819: PUSH
11820: LD_VAR 0 3
11824: ARRAY
11825: PUSH
11826: LD_VAR 0 5
11830: PLUS
11831: PPUSH
11832: CALL_OW 1
11836: PPUSH
11837: CALL_OW 1
11841: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
11842: LD_VAR 0 5
11846: PUSH
11847: LD_INT 0
11849: NONEQUAL
11850: PUSH
11851: LD_VAR 0 3
11855: PUSH
11856: LD_OWVAR 2
11860: EQUAL
11861: AND
11862: IFFALSE 11905
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
11864: LD_ADDR_LOC 23
11868: PUSH
11869: LD_LOC 23
11873: PPUSH
11874: LD_INT 3
11876: PUSH
11877: LD_VAR 0 7
11881: MUL
11882: PPUSH
11883: LD_LOC 22
11887: PUSH
11888: LD_VAR 0 7
11892: ARRAY
11893: PUSH
11894: LD_VAR 0 3
11898: ARRAY
11899: PPUSH
11900: CALL_OW 1
11904: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
11905: LD_LOC 22
11909: PUSH
11910: LD_VAR 0 7
11914: ARRAY
11915: PUSH
11916: LD_VAR 0 3
11920: ARRAY
11921: PUSH
11922: LD_LOC 17
11926: PUSH
11927: LD_VAR 0 7
11931: ARRAY
11932: GREATER
11933: IFFALSE 11960
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
11935: LD_ADDR_LOC 24
11939: PUSH
11940: LD_LOC 24
11944: PPUSH
11945: LD_VAR 0 3
11949: PPUSH
11950: LD_INT 1
11952: PPUSH
11953: CALL_OW 1
11957: ST_TO_ADDR
// end else
11958: GO 12047
// begin for j := 1 to Restricted_Builds do
11960: LD_ADDR_VAR 0 8
11964: PUSH
11965: DOUBLE
11966: LD_INT 1
11968: DEC
11969: ST_TO_ADDR
11970: LD_LOC 16
11974: PUSH
11975: FOR_TO
11976: IFFALSE 12020
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
11978: LD_LOC 22
11982: PUSH
11983: LD_VAR 0 8
11987: ARRAY
11988: PUSH
11989: LD_VAR 0 3
11993: ARRAY
11994: PUSH
11995: LD_LOC 17
11999: PUSH
12000: LD_VAR 0 8
12004: ARRAY
12005: GREATER
12006: IFFALSE 12018
// begin Is_Cheater := true ;
12008: LD_ADDR_VAR 0 9
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// break ;
12016: GO 12020
// end ;
12018: GO 11975
12020: POP
12021: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
12022: LD_ADDR_LOC 24
12026: PUSH
12027: LD_LOC 24
12031: PPUSH
12032: LD_VAR 0 3
12036: PPUSH
12037: LD_VAR 0 9
12041: PPUSH
12042: CALL_OW 1
12046: ST_TO_ADDR
// end ; break ;
12047: GO 12051
// end ;
12049: GO 11627
12051: POP
12052: POP
// end ;
12053: LD_VAR 0 6
12057: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12058: LD_VAR 0 5
12062: PUSH
12063: LD_LOC 18
12067: IN
12068: PUSH
12069: LD_VAR 0 2
12073: PUSH
12074: LD_LOC 19
12078: IN
12079: OR
12080: PUSH
12081: LD_VAR 0 4
12085: PUSH
12086: LD_LOC 20
12090: IN
12091: OR
12092: PUSH
12093: LD_VAR 0 3
12097: PUSH
12098: LD_LOC 21
12102: IN
12103: OR
12104: IFFALSE 12115
// ComCancel ( factory ) ;
12106: LD_VAR 0 1
12110: PPUSH
12111: CALL_OW 127
// end ;
12115: PPOPN 5
12117: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12118: LD_VAR 0 2
12122: PUSH
12123: LD_LOC 18
12127: IN
12128: IFFALSE 12139
// ComCancel ( building ) ;
12130: LD_VAR 0 1
12134: PPUSH
12135: CALL_OW 127
// end ; end_of_file
12139: PPOPN 2
12141: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12142: LD_INT 0
12144: PPUSH
12145: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12146: LD_ADDR_VAR 0 2
12150: PUSH
12151: LD_STRING #Multi1x1-Time
12153: PUSH
12154: LD_OWVAR 1
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: ST_TO_ADDR
// if WaitServerStrings then
12163: LD_EXP 58
12167: IFFALSE 12185
// AllStrings = AllStrings ^ WaitServerStrings ;
12169: LD_ADDR_VAR 0 2
12173: PUSH
12174: LD_VAR 0 2
12178: PUSH
12179: LD_EXP 58
12183: ADD
12184: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12185: LD_INT 0
12187: PUSH
12188: LD_EXP 14
12192: PUSH
12193: LD_OWVAR 1
12197: MINUS
12198: LESSEQUAL
12199: IFFALSE 12230
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12201: LD_ADDR_VAR 0 2
12205: PUSH
12206: LD_VAR 0 2
12210: PUSH
12211: LD_STRING #allowedsibbomb
12213: PUSH
12214: LD_EXP 14
12218: PUSH
12219: LD_OWVAR 1
12223: MINUS
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: ADD
12229: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
12230: LD_INT 0
12232: PUSH
12233: LD_EXP 13
12237: PUSH
12238: LD_OWVAR 1
12242: MINUS
12243: LESSEQUAL
12244: IFFALSE 12275
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
12246: LD_ADDR_VAR 0 2
12250: PUSH
12251: LD_VAR 0 2
12255: PUSH
12256: LD_STRING #builduptime
12258: PUSH
12259: LD_EXP 13
12263: PUSH
12264: LD_OWVAR 1
12268: MINUS
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: ADD
12274: ST_TO_ADDR
// if ( ExtraStrings ) then
12275: LD_EXP 57
12279: IFFALSE 12301
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12281: LD_ADDR_VAR 0 2
12285: PUSH
12286: LD_VAR 0 2
12290: PUSH
12291: LD_STRING 
12293: ADD
12294: PUSH
12295: LD_EXP 57
12299: ADD
12300: ST_TO_ADDR
// if ( LimitsStrings ) then
12301: CALL 8982 0 0
12305: IFFALSE 12327
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12307: LD_ADDR_VAR 0 2
12311: PUSH
12312: LD_VAR 0 2
12316: PUSH
12317: LD_STRING 
12319: ADD
12320: PUSH
12321: CALL 8982 0 0
12325: ADD
12326: ST_TO_ADDR
// Display_Strings := AllStrings ;
12327: LD_ADDR_OWVAR 47
12331: PUSH
12332: LD_VAR 0 2
12336: ST_TO_ADDR
// end ;
12337: LD_VAR 0 1
12341: RET
// every 0 0$1 do
12342: GO 12344
12344: DISABLE
// begin ShowTimer ;
12345: CALL 12142 0 0
// enable ;
12349: ENABLE
// end ; end_of_file
12350: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12351: LD_INT 0
12353: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12354: LD_VAR 0 1
12358: PPUSH
12359: CALL_OW 255
12363: PUSH
12364: LD_VAR 0 4
12368: EQUAL
12369: IFFALSE 12388
// begin SetAchievement ( ACH_RAD ) ;
12371: LD_STRING ACH_RAD
12373: PPUSH
12374: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12378: LD_STRING ACH_NL
12380: PPUSH
12381: LD_INT 1
12383: PPUSH
12384: CALL_OW 564
// end end ;
12388: LD_VAR 0 5
12392: RET
// export function SA_Win ( side ) ; begin
12393: LD_INT 0
12395: PPUSH
// case side of 1 :
12396: LD_VAR 0 1
12400: PUSH
12401: LD_INT 1
12403: DOUBLE
12404: EQUAL
12405: IFTRUE 12409
12407: GO 12422
12409: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12410: LD_STRING ACH_AH
12412: PPUSH
12413: LD_INT 1
12415: PPUSH
12416: CALL_OW 564
12420: GO 12585
12422: LD_INT 2
12424: DOUBLE
12425: EQUAL
12426: IFTRUE 12430
12428: GO 12443
12430: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12431: LD_STRING ACH_E
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 564
12441: GO 12585
12443: LD_INT 3
12445: DOUBLE
12446: EQUAL
12447: IFTRUE 12451
12449: GO 12464
12451: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12452: LD_STRING ACH_OOL
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 564
12462: GO 12585
12464: LD_INT 1
12466: PUSH
12467: LD_INT 2
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: DOUBLE
12474: EQUAL
12475: IFTRUE 12479
12477: GO 12504
12479: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12480: LD_STRING ACH_AH
12482: PPUSH
12483: LD_REAL  5.00000000000000E-0001
12486: PPUSH
12487: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12491: LD_STRING ACH_E
12493: PPUSH
12494: LD_REAL  5.00000000000000E-0001
12497: PPUSH
12498: CALL_OW 564
// end ; [ 2 , 3 ] :
12502: GO 12585
12504: LD_INT 2
12506: PUSH
12507: LD_INT 3
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: DOUBLE
12514: EQUAL
12515: IFTRUE 12519
12517: GO 12544
12519: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12520: LD_STRING ACH_OOL
12522: PPUSH
12523: LD_REAL  5.00000000000000E-0001
12526: PPUSH
12527: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12531: LD_STRING ACH_E
12533: PPUSH
12534: LD_REAL  5.00000000000000E-0001
12537: PPUSH
12538: CALL_OW 564
// end ; [ 3 , 1 ] :
12542: GO 12585
12544: LD_INT 3
12546: PUSH
12547: LD_INT 1
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: DOUBLE
12554: EQUAL
12555: IFTRUE 12559
12557: GO 12584
12559: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12560: LD_STRING ACH_AH
12562: PPUSH
12563: LD_REAL  5.00000000000000E-0001
12566: PPUSH
12567: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12571: LD_STRING ACH_OOL
12573: PPUSH
12574: LD_REAL  5.00000000000000E-0001
12577: PPUSH
12578: CALL_OW 564
// end ; end ;
12582: GO 12585
12584: POP
// end ; end_of_file
12585: LD_VAR 0 2
12589: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
12590: LD_INT 0
12592: PPUSH
12593: PPUSH
// enable ( 98 ) ;
12594: LD_INT 98
12596: ENABLE_MARKED
// GameEnded = false ;
12597: LD_ADDR_LOC 26
12601: PUSH
12602: LD_INT 0
12604: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12605: LD_ADDR_LOC 25
12609: PUSH
12610: LD_INT 0
12612: PUSH
12613: LD_INT 0
12615: PUSH
12616: LD_INT 0
12618: PUSH
12619: LD_INT 0
12621: PUSH
12622: LD_INT 0
12624: PUSH
12625: LD_INT 0
12627: PUSH
12628: LD_INT 0
12630: PUSH
12631: LD_INT 0
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: ST_TO_ADDR
// unfoged = false ;
12644: LD_ADDR_LOC 27
12648: PUSH
12649: LD_INT 0
12651: ST_TO_ADDR
// for i = 1 to side_positions do
12652: LD_ADDR_VAR 0 2
12656: PUSH
12657: DOUBLE
12658: LD_INT 1
12660: DEC
12661: ST_TO_ADDR
12662: LD_EXP 19
12666: PUSH
12667: FOR_TO
12668: IFFALSE 12708
// if not side_positions [ i ] then
12670: LD_EXP 19
12674: PUSH
12675: LD_VAR 0 2
12679: ARRAY
12680: NOT
12681: IFFALSE 12706
// defaited = replace ( defaited , i , true ) ;
12683: LD_ADDR_LOC 25
12687: PUSH
12688: LD_LOC 25
12692: PPUSH
12693: LD_VAR 0 2
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: CALL_OW 1
12705: ST_TO_ADDR
12706: GO 12667
12708: POP
12709: POP
// end ;
12710: LD_VAR 0 1
12714: RET
// function CanWinLoose ; begin
12715: LD_INT 0
12717: PPUSH
// Result := true ;
12718: LD_ADDR_VAR 0 1
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12726: CALL_OW 518
12730: PUSH
12731: CALL_OW 519
12735: PUSH
12736: LD_INT 0
12738: GREATER
12739: AND
12740: IFFALSE 12750
// Result := false ;
12742: LD_ADDR_VAR 0 1
12746: PUSH
12747: LD_INT 0
12749: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12750: CALL_OW 531
12754: PUSH
12755: CALL_OW 519
12759: PUSH
12760: LD_INT 1
12762: GREATER
12763: AND
12764: IFFALSE 12774
// Result := false ;
12766: LD_ADDR_VAR 0 1
12770: PUSH
12771: LD_INT 0
12773: ST_TO_ADDR
// end ;
12774: LD_VAR 0 1
12778: RET
// export function HasPower ( i ) ; var k , h ; begin
12779: LD_INT 0
12781: PPUSH
12782: PPUSH
12783: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
12784: LD_VAR 0 1
12788: PPUSH
12789: CALL_OW 108
12793: NOT
12794: PUSH
12795: LD_EXP 18
12799: PUSH
12800: LD_VAR 0 1
12804: ARRAY
12805: NOT
12806: AND
12807: PUSH
12808: LD_OWVAR 4
12812: AND
12813: IFFALSE 12825
// begin result = false ;
12815: LD_ADDR_VAR 0 2
12819: PUSH
12820: LD_INT 0
12822: ST_TO_ADDR
// end else
12823: GO 13120
// case def_win_rules of 0 :
12825: LD_EXP 15
12829: PUSH
12830: LD_INT 0
12832: DOUBLE
12833: EQUAL
12834: IFTRUE 12838
12836: GO 13001
12838: POP
// if def_people_respawning then
12839: LD_EXP 52
12843: IFFALSE 12934
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
12845: LD_ADDR_VAR 0 2
12849: PUSH
12850: LD_INT 22
12852: PUSH
12853: LD_VAR 0 1
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 2
12864: PUSH
12865: LD_INT 21
12867: PUSH
12868: LD_INT 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 33
12877: PUSH
12878: LD_INT 3
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 33
12887: PUSH
12888: LD_INT 5
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 30
12897: PUSH
12898: LD_INT 0
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 30
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 69
12931: ST_TO_ADDR
12932: GO 12999
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
12934: LD_ADDR_VAR 0 2
12938: PUSH
12939: LD_INT 22
12941: PUSH
12942: LD_VAR 0 1
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 2
12953: PUSH
12954: LD_INT 21
12956: PUSH
12957: LD_INT 1
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 33
12966: PUSH
12967: LD_INT 3
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 33
12976: PUSH
12977: LD_INT 5
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 69
12998: ST_TO_ADDR
12999: GO 13120
13001: LD_INT 1
13003: DOUBLE
13004: EQUAL
13005: IFTRUE 13009
13007: GO 13048
13009: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
13010: LD_ADDR_VAR 0 2
13014: PUSH
13015: LD_INT 22
13017: PUSH
13018: LD_VAR 0 1
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 69
13045: ST_TO_ADDR
13046: GO 13120
13048: LD_INT 2
13050: DOUBLE
13051: EQUAL
13052: IFTRUE 13056
13054: GO 13119
13056: POP
// begin h = false ;
13057: LD_ADDR_VAR 0 4
13061: PUSH
13062: LD_INT 0
13064: ST_TO_ADDR
// for k in heroes [ i ] do
13065: LD_ADDR_VAR 0 3
13069: PUSH
13070: LD_EXP 31
13074: PUSH
13075: LD_VAR 0 1
13079: ARRAY
13080: PUSH
13081: FOR_IN
13082: IFFALSE 13105
// if IsLive ( k ) then
13084: LD_VAR 0 3
13088: PPUSH
13089: CALL_OW 300
13093: IFFALSE 13103
// h = true ;
13095: LD_ADDR_VAR 0 4
13099: PUSH
13100: LD_INT 1
13102: ST_TO_ADDR
13103: GO 13081
13105: POP
13106: POP
// Result := h ;
13107: LD_ADDR_VAR 0 2
13111: PUSH
13112: LD_VAR 0 4
13116: ST_TO_ADDR
// end ; end ;
13117: GO 13120
13119: POP
// end ;
13120: LD_VAR 0 2
13124: RET
// function AlliedSides ( i , j ) ; begin
13125: LD_INT 0
13127: PPUSH
// Result := false ;
13128: LD_ADDR_VAR 0 3
13132: PUSH
13133: LD_INT 0
13135: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13136: LD_VAR 0 1
13140: PPUSH
13141: LD_VAR 0 2
13145: PPUSH
13146: CALL_OW 81
13150: PUSH
13151: LD_INT 1
13153: EQUAL
13154: PUSH
13155: LD_VAR 0 2
13159: PPUSH
13160: LD_VAR 0 1
13164: PPUSH
13165: CALL_OW 81
13169: PUSH
13170: LD_INT 1
13172: EQUAL
13173: AND
13174: PUSH
13175: LD_VAR 0 1
13179: PPUSH
13180: CALL_OW 83
13184: AND
13185: PUSH
13186: LD_VAR 0 2
13190: PPUSH
13191: CALL_OW 83
13195: AND
13196: IFFALSE 13206
// Result := true ;
13198: LD_ADDR_VAR 0 3
13202: PUSH
13203: LD_INT 1
13205: ST_TO_ADDR
// end ;
13206: LD_VAR 0 3
13210: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
13211: CALL 12715 0 0
13215: PUSH
13216: LD_LOC 26
13220: NOT
13221: AND
13222: IFFALSE 13238
13224: GO 13226
13226: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
13227: LD_ADDR_EXP 58
13231: PUSH
13232: LD_STRING #Player-Ended
13234: PUSH
13235: EMPTY
13236: LIST
13237: ST_TO_ADDR
13238: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
13239: CALL 12715 0 0
13243: PUSH
13244: LD_LOC 26
13248: AND
13249: IFFALSE 13258
13251: GO 13253
13253: DISABLE
// YouLostInMultiplayer ;
13254: CALL_OW 107
13258: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
13259: CALL 12715 0 0
13263: NOT
13264: PUSH
13265: CALL_OW 531
13269: NOT
13270: AND
13271: IFFALSE 13287
13273: GO 13275
13275: DISABLE
// WaitServerStrings = [ #server-wait ] ;
13276: LD_ADDR_EXP 58
13280: PUSH
13281: LD_STRING #server-wait
13283: PUSH
13284: EMPTY
13285: LIST
13286: ST_TO_ADDR
13287: END
// every 100 trigger IAmSpec do
13288: CALL_OW 531
13292: IFFALSE 13308
13294: GO 13296
13296: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
13297: LD_ADDR_EXP 58
13301: PUSH
13302: LD_STRING #Player-IAmSpec
13304: PUSH
13305: EMPTY
13306: LIST
13307: ST_TO_ADDR
13308: END
// every 100 trigger GameEnded and IAmSpec do
13309: LD_LOC 26
13313: PUSH
13314: CALL_OW 531
13318: AND
13319: IFFALSE 13328
13321: GO 13323
13323: DISABLE
// YouLostInMultiplayer ;
13324: CALL_OW 107
13328: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
13329: CALL 12715 0 0
13333: PUSH
13334: LD_LOC 26
13338: NOT
13339: AND
13340: IFFALSE 13356
13342: GO 13344
13344: DISABLE
// WaitServerStrings = [ $player-win ] ;
13345: LD_ADDR_EXP 58
13349: PUSH
13350: LD_STRING $player-win
13352: PUSH
13353: EMPTY
13354: LIST
13355: ST_TO_ADDR
13356: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
13357: CALL 12715 0 0
13361: PUSH
13362: LD_LOC 26
13366: AND
13367: IFFALSE 13391
13369: GO 13371
13371: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
13372: LD_EXP 20
13376: PUSH
13377: LD_OWVAR 2
13381: ARRAY
13382: PPUSH
13383: CALL 12393 0 1
// YouWinInMultiplayer ;
13387: CALL_OW 106
// end ;
13391: END
// every 100 trigger isEditor marked 401 do
13392: LD_OWVAR 84
13396: IFFALSE 13412
13398: GO 13400
13400: DISABLE
// Debug_Strings = [ You won ] ;
13401: LD_ADDR_OWVAR 48
13405: PUSH
13406: LD_STRING You won
13408: PUSH
13409: EMPTY
13410: LIST
13411: ST_TO_ADDR
13412: END
// every 100 trigger isEditor marked 400 do
13413: LD_OWVAR 84
13417: IFFALSE 13433
13419: GO 13421
13421: DISABLE
// Debug_Strings = [ You loss ] ;
13422: LD_ADDR_OWVAR 48
13426: PUSH
13427: LD_STRING You loss
13429: PUSH
13430: EMPTY
13431: LIST
13432: ST_TO_ADDR
13433: END
// every 100 marked 98 do var i , un ;
13434: GO 13436
13436: DISABLE
13437: LD_INT 0
13439: PPUSH
13440: PPUSH
// begin for i = 1 to side_positions do
13441: LD_ADDR_VAR 0 1
13445: PUSH
13446: DOUBLE
13447: LD_INT 1
13449: DEC
13450: ST_TO_ADDR
13451: LD_EXP 19
13455: PUSH
13456: FOR_TO
13457: IFFALSE 13540
// if side_positions [ i ] then
13459: LD_EXP 19
13463: PUSH
13464: LD_VAR 0 1
13468: ARRAY
13469: IFFALSE 13538
// if not HasPower ( i ) and not Defaited [ i ] then
13471: LD_VAR 0 1
13475: PPUSH
13476: CALL 12779 0 1
13480: NOT
13481: PUSH
13482: LD_LOC 25
13486: PUSH
13487: LD_VAR 0 1
13491: ARRAY
13492: NOT
13493: AND
13494: IFFALSE 13538
// begin Defaited = replace ( Defaited , i , true ) ;
13496: LD_ADDR_LOC 25
13500: PUSH
13501: LD_LOC 25
13505: PPUSH
13506: LD_VAR 0 1
13510: PPUSH
13511: LD_INT 1
13513: PPUSH
13514: CALL_OW 1
13518: ST_TO_ADDR
// if i = your_side then
13519: LD_VAR 0 1
13523: PUSH
13524: LD_OWVAR 2
13528: EQUAL
13529: IFFALSE 13538
// begin Multiplayer_Loose_Message ;
13531: CALL_OW 521
// enable ( 400 ) ;
13535: LD_INT 400
13537: ENABLE_MARKED
// end ; end ;
13538: GO 13456
13540: POP
13541: POP
// if not Unfoged and defaited [ your_side ] then
13542: LD_LOC 27
13546: NOT
13547: PUSH
13548: LD_LOC 25
13552: PUSH
13553: LD_OWVAR 2
13557: ARRAY
13558: AND
13559: IFFALSE 13565
// Unfog ;
13561: CALL 13741 0 0
// DidGameEnd ;
13565: CALL 13580 0 0
// if not GameEnded then
13569: LD_LOC 26
13573: NOT
13574: IFFALSE 13577
// enable ;
13576: ENABLE
// end ;
13577: PPOPN 2
13579: END
// function DidGameEnd ; var i , k , enemy ; begin
13580: LD_INT 0
13582: PPUSH
13583: PPUSH
13584: PPUSH
13585: PPUSH
// enemy = [ ] ;
13586: LD_ADDR_VAR 0 4
13590: PUSH
13591: EMPTY
13592: ST_TO_ADDR
// for i = 1 to side_positions do
13593: LD_ADDR_VAR 0 2
13597: PUSH
13598: DOUBLE
13599: LD_INT 1
13601: DEC
13602: ST_TO_ADDR
13603: LD_EXP 19
13607: PUSH
13608: FOR_TO
13609: IFFALSE 13703
// if not defaited [ i ] then
13611: LD_LOC 25
13615: PUSH
13616: LD_VAR 0 2
13620: ARRAY
13621: NOT
13622: IFFALSE 13701
// for k = 1 to side_positions do
13624: LD_ADDR_VAR 0 3
13628: PUSH
13629: DOUBLE
13630: LD_INT 1
13632: DEC
13633: ST_TO_ADDR
13634: LD_EXP 19
13638: PUSH
13639: FOR_TO
13640: IFFALSE 13699
// if not defaited [ k ] then
13642: LD_LOC 25
13646: PUSH
13647: LD_VAR 0 3
13651: ARRAY
13652: NOT
13653: IFFALSE 13697
// if not AlliedSides ( i , k ) then
13655: LD_VAR 0 2
13659: PPUSH
13660: LD_VAR 0 3
13664: PPUSH
13665: CALL 13125 0 2
13669: NOT
13670: IFFALSE 13697
// enemy = enemy ^ [ i , k ] ;
13672: LD_ADDR_VAR 0 4
13676: PUSH
13677: LD_VAR 0 4
13681: PUSH
13682: LD_VAR 0 2
13686: PUSH
13687: LD_VAR 0 3
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: ADD
13696: ST_TO_ADDR
13697: GO 13639
13699: POP
13700: POP
13701: GO 13608
13703: POP
13704: POP
// if not enemy then
13705: LD_VAR 0 4
13709: NOT
13710: IFFALSE 13736
// begin GameEnded = true ;
13712: LD_ADDR_LOC 26
13716: PUSH
13717: LD_INT 1
13719: ST_TO_ADDR
// if not defaited [ your_side ] then
13720: LD_LOC 25
13724: PUSH
13725: LD_OWVAR 2
13729: ARRAY
13730: NOT
13731: IFFALSE 13736
// enable ( 401 ) ;
13733: LD_INT 401
13735: ENABLE_MARKED
// end ; end ;
13736: LD_VAR 0 1
13740: RET
// function unfog ; var k , friends ; begin
13741: LD_INT 0
13743: PPUSH
13744: PPUSH
13745: PPUSH
// SetPlayerSpectator ( ) ;
13746: CALL_OW 572
// unfoged = true ;
13750: LD_ADDR_LOC 27
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// end ;
13758: LD_VAR 0 1
13762: RET
// export function MakeGameEnd ; begin
13763: LD_INT 0
13765: PPUSH
// SetPlayerSpectator ( ) ;
13766: CALL_OW 572
// unfoged = true ;
13770: LD_ADDR_LOC 27
13774: PUSH
13775: LD_INT 1
13777: ST_TO_ADDR
// wait ( 0 0$5 ) ;
13778: LD_INT 175
13780: PPUSH
13781: CALL_OW 67
// GameEnded = true ;
13785: LD_ADDR_LOC 26
13789: PUSH
13790: LD_INT 1
13792: ST_TO_ADDR
// end ;
13793: LD_VAR 0 1
13797: RET
// export function GetGameEnded ; begin
13798: LD_INT 0
13800: PPUSH
// result = GameEnded ;
13801: LD_ADDR_VAR 0 1
13805: PUSH
13806: LD_LOC 26
13810: ST_TO_ADDR
// end ; end_of_file
13811: LD_VAR 0 1
13815: RET
// export function SetMpTechs ( ) ; var side , i ; begin
13816: LD_INT 0
13818: PPUSH
13819: PPUSH
13820: PPUSH
// for side = 1 to 8 do
13821: LD_ADDR_VAR 0 2
13825: PUSH
13826: DOUBLE
13827: LD_INT 1
13829: DEC
13830: ST_TO_ADDR
13831: LD_INT 8
13833: PUSH
13834: FOR_TO
13835: IFFALSE 13956
// begin for i = 1 to 72 do
13837: LD_ADDR_VAR 0 3
13841: PUSH
13842: DOUBLE
13843: LD_INT 1
13845: DEC
13846: ST_TO_ADDR
13847: LD_INT 72
13849: PUSH
13850: FOR_TO
13851: IFFALSE 13882
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
13853: LD_VAR 0 3
13857: PPUSH
13858: LD_VAR 0 2
13862: PPUSH
13863: LD_INT 0
13865: PPUSH
13866: LD_VAR 0 3
13870: PPUSH
13871: CALL_OW 565
13875: PPUSH
13876: CALL_OW 322
13880: GO 13850
13882: POP
13883: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
13884: LD_INT 73
13886: PPUSH
13887: LD_VAR 0 2
13891: PPUSH
13892: LD_INT 0
13894: PPUSH
13895: LD_INT 25
13897: PPUSH
13898: CALL_OW 565
13902: PPUSH
13903: CALL_OW 322
// for i = 0 to 40 do
13907: LD_ADDR_VAR 0 3
13911: PUSH
13912: DOUBLE
13913: LD_INT 0
13915: DEC
13916: ST_TO_ADDR
13917: LD_INT 40
13919: PUSH
13920: FOR_TO
13921: IFFALSE 13952
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
13923: LD_VAR 0 3
13927: PPUSH
13928: LD_VAR 0 2
13932: PPUSH
13933: LD_INT 1
13935: PPUSH
13936: LD_VAR 0 3
13940: PPUSH
13941: CALL_OW 565
13945: PPUSH
13946: CALL_OW 324
13950: GO 13920
13952: POP
13953: POP
// end ;
13954: GO 13834
13956: POP
13957: POP
// end ;
13958: LD_VAR 0 1
13962: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
13963: LD_INT 0
13965: PPUSH
13966: PPUSH
13967: PPUSH
// for side = 1 to 8 do
13968: LD_ADDR_VAR 0 3
13972: PUSH
13973: DOUBLE
13974: LD_INT 1
13976: DEC
13977: ST_TO_ADDR
13978: LD_INT 8
13980: PUSH
13981: FOR_TO
13982: IFFALSE 17978
// begin for i = 1 to 73 do
13984: LD_ADDR_VAR 0 4
13988: PUSH
13989: DOUBLE
13990: LD_INT 1
13992: DEC
13993: ST_TO_ADDR
13994: LD_INT 73
13996: PUSH
13997: FOR_TO
13998: IFFALSE 14019
// SetTech ( i , side , state_disabled ) ;
14000: LD_VAR 0 4
14004: PPUSH
14005: LD_VAR 0 3
14009: PPUSH
14010: LD_INT 0
14012: PPUSH
14013: CALL_OW 322
14017: GO 13997
14019: POP
14020: POP
// for i = 0 to 40 do
14021: LD_ADDR_VAR 0 4
14025: PUSH
14026: DOUBLE
14027: LD_INT 0
14029: DEC
14030: ST_TO_ADDR
14031: LD_INT 40
14033: PUSH
14034: FOR_TO
14035: IFFALSE 14056
// SetRestrict ( i , side , false ) ;
14037: LD_VAR 0 4
14041: PPUSH
14042: LD_VAR 0 3
14046: PPUSH
14047: LD_INT 0
14049: PPUSH
14050: CALL_OW 324
14054: GO 14034
14056: POP
14057: POP
// case level of 1 :
14058: LD_VAR 0 1
14062: PUSH
14063: LD_INT 1
14065: DOUBLE
14066: EQUAL
14067: IFTRUE 14071
14069: GO 14224
14071: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14072: LD_INT 35
14074: PPUSH
14075: LD_VAR 0 3
14079: PPUSH
14080: LD_INT 1
14082: PPUSH
14083: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14087: LD_INT 45
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: LD_INT 1
14097: PPUSH
14098: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14102: LD_INT 46
14104: PPUSH
14105: LD_VAR 0 3
14109: PPUSH
14110: LD_INT 1
14112: PPUSH
14113: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14117: LD_INT 47
14119: PPUSH
14120: LD_VAR 0 3
14124: PPUSH
14125: LD_INT 1
14127: PPUSH
14128: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14132: LD_INT 0
14134: PPUSH
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_INT 1
14142: PPUSH
14143: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14147: LD_INT 2
14149: PPUSH
14150: LD_VAR 0 3
14154: PPUSH
14155: LD_INT 1
14157: PPUSH
14158: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14162: LD_INT 4
14164: PPUSH
14165: LD_VAR 0 3
14169: PPUSH
14170: LD_INT 1
14172: PPUSH
14173: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14177: LD_INT 6
14179: PPUSH
14180: LD_VAR 0 3
14184: PPUSH
14185: LD_INT 1
14187: PPUSH
14188: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14192: LD_INT 29
14194: PPUSH
14195: LD_VAR 0 3
14199: PPUSH
14200: LD_INT 1
14202: PPUSH
14203: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14207: LD_INT 31
14209: PPUSH
14210: LD_VAR 0 3
14214: PPUSH
14215: LD_INT 1
14217: PPUSH
14218: CALL_OW 324
// end ; 2 :
14222: GO 17976
14224: LD_INT 2
14226: DOUBLE
14227: EQUAL
14228: IFTRUE 14232
14230: GO 14430
14232: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14233: LD_INT 35
14235: PPUSH
14236: LD_VAR 0 3
14240: PPUSH
14241: LD_INT 1
14243: PPUSH
14244: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14248: LD_INT 45
14250: PPUSH
14251: LD_VAR 0 3
14255: PPUSH
14256: LD_INT 1
14258: PPUSH
14259: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14263: LD_INT 46
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: LD_INT 1
14273: PPUSH
14274: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14278: LD_INT 47
14280: PPUSH
14281: LD_VAR 0 3
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14293: LD_INT 1
14295: PPUSH
14296: LD_VAR 0 3
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14308: LD_INT 2
14310: PPUSH
14311: LD_VAR 0 3
14315: PPUSH
14316: LD_INT 1
14318: PPUSH
14319: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14323: LD_INT 11
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14338: LD_INT 0
14340: PPUSH
14341: LD_VAR 0 3
14345: PPUSH
14346: LD_INT 1
14348: PPUSH
14349: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14353: LD_INT 2
14355: PPUSH
14356: LD_VAR 0 3
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14368: LD_INT 4
14370: PPUSH
14371: LD_VAR 0 3
14375: PPUSH
14376: LD_INT 1
14378: PPUSH
14379: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14383: LD_INT 6
14385: PPUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: LD_INT 1
14393: PPUSH
14394: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14398: LD_INT 29
14400: PPUSH
14401: LD_VAR 0 3
14405: PPUSH
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14413: LD_INT 31
14415: PPUSH
14416: LD_VAR 0 3
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 324
// end ; 3 :
14428: GO 17976
14430: LD_INT 3
14432: DOUBLE
14433: EQUAL
14434: IFTRUE 14438
14436: GO 14891
14438: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14439: LD_INT 35
14441: PPUSH
14442: LD_VAR 0 3
14446: PPUSH
14447: LD_INT 1
14449: PPUSH
14450: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14454: LD_INT 45
14456: PPUSH
14457: LD_VAR 0 3
14461: PPUSH
14462: LD_INT 1
14464: PPUSH
14465: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14469: LD_INT 46
14471: PPUSH
14472: LD_VAR 0 3
14476: PPUSH
14477: LD_INT 1
14479: PPUSH
14480: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14484: LD_INT 47
14486: PPUSH
14487: LD_VAR 0 3
14491: PPUSH
14492: LD_INT 1
14494: PPUSH
14495: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14499: LD_INT 1
14501: PPUSH
14502: LD_VAR 0 3
14506: PPUSH
14507: LD_INT 1
14509: PPUSH
14510: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14514: LD_INT 2
14516: PPUSH
14517: LD_VAR 0 3
14521: PPUSH
14522: LD_INT 1
14524: PPUSH
14525: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14529: LD_INT 11
14531: PPUSH
14532: LD_VAR 0 3
14536: PPUSH
14537: LD_INT 1
14539: PPUSH
14540: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14544: LD_INT 48
14546: PPUSH
14547: LD_VAR 0 3
14551: PPUSH
14552: LD_INT 1
14554: PPUSH
14555: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14559: LD_INT 69
14561: PPUSH
14562: LD_VAR 0 3
14566: PPUSH
14567: LD_INT 1
14569: PPUSH
14570: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14574: LD_INT 39
14576: PPUSH
14577: LD_VAR 0 3
14581: PPUSH
14582: LD_INT 1
14584: PPUSH
14585: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14589: LD_INT 43
14591: PPUSH
14592: LD_VAR 0 3
14596: PPUSH
14597: LD_INT 1
14599: PPUSH
14600: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14604: LD_INT 51
14606: PPUSH
14607: LD_VAR 0 3
14611: PPUSH
14612: LD_INT 1
14614: PPUSH
14615: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14619: LD_INT 6
14621: PPUSH
14622: LD_VAR 0 3
14626: PPUSH
14627: LD_INT 1
14629: PPUSH
14630: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14634: LD_INT 0
14636: PPUSH
14637: LD_VAR 0 3
14641: PPUSH
14642: LD_INT 1
14644: PPUSH
14645: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14649: LD_INT 2
14651: PPUSH
14652: LD_VAR 0 3
14656: PPUSH
14657: LD_INT 1
14659: PPUSH
14660: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14664: LD_INT 3
14666: PPUSH
14667: LD_VAR 0 3
14671: PPUSH
14672: LD_INT 1
14674: PPUSH
14675: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14679: LD_INT 4
14681: PPUSH
14682: LD_VAR 0 3
14686: PPUSH
14687: LD_INT 1
14689: PPUSH
14690: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14694: LD_INT 6
14696: PPUSH
14697: LD_VAR 0 3
14701: PPUSH
14702: LD_INT 1
14704: PPUSH
14705: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14709: LD_INT 7
14711: PPUSH
14712: LD_VAR 0 3
14716: PPUSH
14717: LD_INT 1
14719: PPUSH
14720: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14724: LD_INT 8
14726: PPUSH
14727: LD_VAR 0 3
14731: PPUSH
14732: LD_INT 1
14734: PPUSH
14735: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14739: LD_INT 10
14741: PPUSH
14742: LD_VAR 0 3
14746: PPUSH
14747: LD_INT 1
14749: PPUSH
14750: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14754: LD_INT 15
14756: PPUSH
14757: LD_VAR 0 3
14761: PPUSH
14762: LD_INT 1
14764: PPUSH
14765: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14769: LD_INT 16
14771: PPUSH
14772: LD_VAR 0 3
14776: PPUSH
14777: LD_INT 1
14779: PPUSH
14780: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14784: LD_INT 17
14786: PPUSH
14787: LD_VAR 0 3
14791: PPUSH
14792: LD_INT 1
14794: PPUSH
14795: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14799: LD_INT 20
14801: PPUSH
14802: LD_VAR 0 3
14806: PPUSH
14807: LD_INT 1
14809: PPUSH
14810: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14814: LD_INT 26
14816: PPUSH
14817: LD_VAR 0 3
14821: PPUSH
14822: LD_INT 1
14824: PPUSH
14825: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14829: LD_INT 27
14831: PPUSH
14832: LD_VAR 0 3
14836: PPUSH
14837: LD_INT 1
14839: PPUSH
14840: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14844: LD_INT 29
14846: PPUSH
14847: LD_VAR 0 3
14851: PPUSH
14852: LD_INT 1
14854: PPUSH
14855: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14859: LD_INT 31
14861: PPUSH
14862: LD_VAR 0 3
14866: PPUSH
14867: LD_INT 1
14869: PPUSH
14870: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14874: LD_INT 32
14876: PPUSH
14877: LD_VAR 0 3
14881: PPUSH
14882: LD_INT 1
14884: PPUSH
14885: CALL_OW 324
// end ; 4 :
14889: GO 17976
14891: LD_INT 4
14893: DOUBLE
14894: EQUAL
14895: IFTRUE 14899
14897: GO 15847
14899: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14900: LD_INT 35
14902: PPUSH
14903: LD_VAR 0 3
14907: PPUSH
14908: LD_INT 1
14910: PPUSH
14911: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14915: LD_INT 45
14917: PPUSH
14918: LD_VAR 0 3
14922: PPUSH
14923: LD_INT 1
14925: PPUSH
14926: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14930: LD_INT 46
14932: PPUSH
14933: LD_VAR 0 3
14937: PPUSH
14938: LD_INT 1
14940: PPUSH
14941: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14945: LD_INT 47
14947: PPUSH
14948: LD_VAR 0 3
14952: PPUSH
14953: LD_INT 1
14955: PPUSH
14956: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14960: LD_INT 1
14962: PPUSH
14963: LD_VAR 0 3
14967: PPUSH
14968: LD_INT 1
14970: PPUSH
14971: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14975: LD_INT 2
14977: PPUSH
14978: LD_VAR 0 3
14982: PPUSH
14983: LD_INT 1
14985: PPUSH
14986: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14990: LD_INT 11
14992: PPUSH
14993: LD_VAR 0 3
14997: PPUSH
14998: LD_INT 1
15000: PPUSH
15001: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15005: LD_INT 20
15007: PPUSH
15008: LD_VAR 0 3
15012: PPUSH
15013: LD_INT 1
15015: PPUSH
15016: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15020: LD_INT 48
15022: PPUSH
15023: LD_VAR 0 3
15027: PPUSH
15028: LD_INT 1
15030: PPUSH
15031: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15035: LD_INT 49
15037: PPUSH
15038: LD_VAR 0 3
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15050: LD_INT 69
15052: PPUSH
15053: LD_VAR 0 3
15057: PPUSH
15058: LD_INT 1
15060: PPUSH
15061: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15065: LD_INT 39
15067: PPUSH
15068: LD_VAR 0 3
15072: PPUSH
15073: LD_INT 1
15075: PPUSH
15076: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15080: LD_INT 34
15082: PPUSH
15083: LD_VAR 0 3
15087: PPUSH
15088: LD_INT 1
15090: PPUSH
15091: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15095: LD_INT 42
15097: PPUSH
15098: LD_VAR 0 3
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15110: LD_INT 44
15112: PPUSH
15113: LD_VAR 0 3
15117: PPUSH
15118: LD_INT 1
15120: PPUSH
15121: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15125: LD_INT 41
15127: PPUSH
15128: LD_VAR 0 3
15132: PPUSH
15133: LD_INT 1
15135: PPUSH
15136: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15140: LD_INT 43
15142: PPUSH
15143: LD_VAR 0 3
15147: PPUSH
15148: LD_INT 1
15150: PPUSH
15151: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15155: LD_INT 70
15157: PPUSH
15158: LD_VAR 0 3
15162: PPUSH
15163: LD_INT 1
15165: PPUSH
15166: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15170: LD_INT 51
15172: PPUSH
15173: LD_VAR 0 3
15177: PPUSH
15178: LD_INT 1
15180: PPUSH
15181: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15185: LD_INT 52
15187: PPUSH
15188: LD_VAR 0 3
15192: PPUSH
15193: LD_INT 1
15195: PPUSH
15196: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15200: LD_INT 6
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: LD_INT 1
15210: PPUSH
15211: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15215: LD_INT 15
15217: PPUSH
15218: LD_VAR 0 3
15222: PPUSH
15223: LD_INT 1
15225: PPUSH
15226: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15230: LD_INT 7
15232: PPUSH
15233: LD_VAR 0 3
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15245: LD_INT 12
15247: PPUSH
15248: LD_VAR 0 3
15252: PPUSH
15253: LD_INT 1
15255: PPUSH
15256: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15260: LD_INT 18
15262: PPUSH
15263: LD_VAR 0 3
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15275: LD_INT 60
15277: PPUSH
15278: LD_VAR 0 3
15282: PPUSH
15283: LD_INT 1
15285: PPUSH
15286: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15290: LD_INT 9
15292: PPUSH
15293: LD_VAR 0 3
15297: PPUSH
15298: LD_INT 1
15300: PPUSH
15301: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15305: LD_INT 30
15307: PPUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: LD_INT 1
15315: PPUSH
15316: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15320: LD_INT 37
15322: PPUSH
15323: LD_VAR 0 3
15327: PPUSH
15328: LD_INT 1
15330: PPUSH
15331: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15335: LD_INT 5
15337: PPUSH
15338: LD_VAR 0 3
15342: PPUSH
15343: LD_INT 1
15345: PPUSH
15346: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15350: LD_INT 66
15352: PPUSH
15353: LD_VAR 0 3
15357: PPUSH
15358: LD_INT 1
15360: PPUSH
15361: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15365: LD_INT 21
15367: PPUSH
15368: LD_VAR 0 3
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15380: LD_INT 22
15382: PPUSH
15383: LD_VAR 0 3
15387: PPUSH
15388: LD_INT 1
15390: PPUSH
15391: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15395: LD_INT 54
15397: PPUSH
15398: LD_VAR 0 3
15402: PPUSH
15403: LD_INT 1
15405: PPUSH
15406: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15410: LD_INT 0
15412: PPUSH
15413: LD_VAR 0 3
15417: PPUSH
15418: LD_INT 1
15420: PPUSH
15421: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15425: LD_INT 1
15427: PPUSH
15428: LD_VAR 0 3
15432: PPUSH
15433: LD_INT 1
15435: PPUSH
15436: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15440: LD_INT 2
15442: PPUSH
15443: LD_VAR 0 3
15447: PPUSH
15448: LD_INT 1
15450: PPUSH
15451: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15455: LD_INT 3
15457: PPUSH
15458: LD_VAR 0 3
15462: PPUSH
15463: LD_INT 1
15465: PPUSH
15466: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15470: LD_INT 4
15472: PPUSH
15473: LD_VAR 0 3
15477: PPUSH
15478: LD_INT 1
15480: PPUSH
15481: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15485: LD_INT 5
15487: PPUSH
15488: LD_VAR 0 3
15492: PPUSH
15493: LD_INT 1
15495: PPUSH
15496: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15500: LD_INT 6
15502: PPUSH
15503: LD_VAR 0 3
15507: PPUSH
15508: LD_INT 1
15510: PPUSH
15511: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15515: LD_INT 7
15517: PPUSH
15518: LD_VAR 0 3
15522: PPUSH
15523: LD_INT 1
15525: PPUSH
15526: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15530: LD_INT 8
15532: PPUSH
15533: LD_VAR 0 3
15537: PPUSH
15538: LD_INT 1
15540: PPUSH
15541: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15545: LD_INT 10
15547: PPUSH
15548: LD_VAR 0 3
15552: PPUSH
15553: LD_INT 1
15555: PPUSH
15556: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15560: LD_INT 11
15562: PPUSH
15563: LD_VAR 0 3
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15575: LD_INT 12
15577: PPUSH
15578: LD_VAR 0 3
15582: PPUSH
15583: LD_INT 1
15585: PPUSH
15586: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15590: LD_INT 13
15592: PPUSH
15593: LD_VAR 0 3
15597: PPUSH
15598: LD_INT 1
15600: PPUSH
15601: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15605: LD_INT 14
15607: PPUSH
15608: LD_VAR 0 3
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15620: LD_INT 15
15622: PPUSH
15623: LD_VAR 0 3
15627: PPUSH
15628: LD_INT 1
15630: PPUSH
15631: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15635: LD_INT 16
15637: PPUSH
15638: LD_VAR 0 3
15642: PPUSH
15643: LD_INT 1
15645: PPUSH
15646: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15650: LD_INT 17
15652: PPUSH
15653: LD_VAR 0 3
15657: PPUSH
15658: LD_INT 1
15660: PPUSH
15661: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15665: LD_INT 19
15667: PPUSH
15668: LD_VAR 0 3
15672: PPUSH
15673: LD_INT 1
15675: PPUSH
15676: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15680: LD_INT 20
15682: PPUSH
15683: LD_VAR 0 3
15687: PPUSH
15688: LD_INT 1
15690: PPUSH
15691: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15695: LD_INT 21
15697: PPUSH
15698: LD_VAR 0 3
15702: PPUSH
15703: LD_INT 1
15705: PPUSH
15706: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15710: LD_INT 23
15712: PPUSH
15713: LD_VAR 0 3
15717: PPUSH
15718: LD_INT 1
15720: PPUSH
15721: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15725: LD_INT 26
15727: PPUSH
15728: LD_VAR 0 3
15732: PPUSH
15733: LD_INT 1
15735: PPUSH
15736: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15740: LD_INT 27
15742: PPUSH
15743: LD_VAR 0 3
15747: PPUSH
15748: LD_INT 1
15750: PPUSH
15751: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15755: LD_INT 28
15757: PPUSH
15758: LD_VAR 0 3
15762: PPUSH
15763: LD_INT 1
15765: PPUSH
15766: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15770: LD_INT 29
15772: PPUSH
15773: LD_VAR 0 3
15777: PPUSH
15778: LD_INT 1
15780: PPUSH
15781: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15785: LD_INT 30
15787: PPUSH
15788: LD_VAR 0 3
15792: PPUSH
15793: LD_INT 1
15795: PPUSH
15796: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15800: LD_INT 31
15802: PPUSH
15803: LD_VAR 0 3
15807: PPUSH
15808: LD_INT 1
15810: PPUSH
15811: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15815: LD_INT 32
15817: PPUSH
15818: LD_VAR 0 3
15822: PPUSH
15823: LD_INT 1
15825: PPUSH
15826: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15830: LD_INT 36
15832: PPUSH
15833: LD_VAR 0 3
15837: PPUSH
15838: LD_INT 1
15840: PPUSH
15841: CALL_OW 324
// end ; 5 :
15845: GO 17976
15847: LD_INT 5
15849: DOUBLE
15850: EQUAL
15851: IFTRUE 15855
15853: GO 16968
15855: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15856: LD_INT 35
15858: PPUSH
15859: LD_VAR 0 3
15863: PPUSH
15864: LD_INT 1
15866: PPUSH
15867: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15871: LD_INT 45
15873: PPUSH
15874: LD_VAR 0 3
15878: PPUSH
15879: LD_INT 1
15881: PPUSH
15882: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15886: LD_INT 46
15888: PPUSH
15889: LD_VAR 0 3
15893: PPUSH
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15901: LD_INT 47
15903: PPUSH
15904: LD_VAR 0 3
15908: PPUSH
15909: LD_INT 1
15911: PPUSH
15912: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15916: LD_INT 1
15918: PPUSH
15919: LD_VAR 0 3
15923: PPUSH
15924: LD_INT 1
15926: PPUSH
15927: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15931: LD_INT 2
15933: PPUSH
15934: LD_VAR 0 3
15938: PPUSH
15939: LD_INT 1
15941: PPUSH
15942: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15946: LD_INT 11
15948: PPUSH
15949: LD_VAR 0 3
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15961: LD_INT 20
15963: PPUSH
15964: LD_VAR 0 3
15968: PPUSH
15969: LD_INT 1
15971: PPUSH
15972: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15976: LD_INT 48
15978: PPUSH
15979: LD_VAR 0 3
15983: PPUSH
15984: LD_INT 1
15986: PPUSH
15987: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15991: LD_INT 49
15993: PPUSH
15994: LD_VAR 0 3
15998: PPUSH
15999: LD_INT 1
16001: PPUSH
16002: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16006: LD_INT 69
16008: PPUSH
16009: LD_VAR 0 3
16013: PPUSH
16014: LD_INT 1
16016: PPUSH
16017: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16021: LD_INT 39
16023: PPUSH
16024: LD_VAR 0 3
16028: PPUSH
16029: LD_INT 1
16031: PPUSH
16032: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16036: LD_INT 34
16038: PPUSH
16039: LD_VAR 0 3
16043: PPUSH
16044: LD_INT 1
16046: PPUSH
16047: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16051: LD_INT 42
16053: PPUSH
16054: LD_VAR 0 3
16058: PPUSH
16059: LD_INT 1
16061: PPUSH
16062: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16066: LD_INT 44
16068: PPUSH
16069: LD_VAR 0 3
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16081: LD_INT 41
16083: PPUSH
16084: LD_VAR 0 3
16088: PPUSH
16089: LD_INT 1
16091: PPUSH
16092: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16096: LD_INT 40
16098: PPUSH
16099: LD_VAR 0 3
16103: PPUSH
16104: LD_INT 1
16106: PPUSH
16107: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16111: LD_INT 43
16113: PPUSH
16114: LD_VAR 0 3
16118: PPUSH
16119: LD_INT 1
16121: PPUSH
16122: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16126: LD_INT 70
16128: PPUSH
16129: LD_VAR 0 3
16133: PPUSH
16134: LD_INT 1
16136: PPUSH
16137: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16141: LD_INT 51
16143: PPUSH
16144: LD_VAR 0 3
16148: PPUSH
16149: LD_INT 1
16151: PPUSH
16152: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16156: LD_INT 52
16158: PPUSH
16159: LD_VAR 0 3
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16171: LD_INT 6
16173: PPUSH
16174: LD_VAR 0 3
16178: PPUSH
16179: LD_INT 1
16181: PPUSH
16182: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16186: LD_INT 15
16188: PPUSH
16189: LD_VAR 0 3
16193: PPUSH
16194: LD_INT 1
16196: PPUSH
16197: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16201: LD_INT 7
16203: PPUSH
16204: LD_VAR 0 3
16208: PPUSH
16209: LD_INT 1
16211: PPUSH
16212: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16216: LD_INT 12
16218: PPUSH
16219: LD_VAR 0 3
16223: PPUSH
16224: LD_INT 1
16226: PPUSH
16227: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16231: LD_INT 17
16233: PPUSH
16234: LD_VAR 0 3
16238: PPUSH
16239: LD_INT 1
16241: PPUSH
16242: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16246: LD_INT 18
16248: PPUSH
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_INT 1
16256: PPUSH
16257: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16261: LD_INT 60
16263: PPUSH
16264: LD_VAR 0 3
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16276: LD_INT 32
16278: PPUSH
16279: LD_VAR 0 3
16283: PPUSH
16284: LD_INT 1
16286: PPUSH
16287: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16291: LD_INT 9
16293: PPUSH
16294: LD_VAR 0 3
16298: PPUSH
16299: LD_INT 1
16301: PPUSH
16302: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16306: LD_INT 57
16308: PPUSH
16309: LD_VAR 0 3
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16321: LD_INT 30
16323: PPUSH
16324: LD_VAR 0 3
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16336: LD_INT 37
16338: PPUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: LD_INT 1
16346: PPUSH
16347: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16351: LD_INT 63
16353: PPUSH
16354: LD_VAR 0 3
16358: PPUSH
16359: LD_INT 1
16361: PPUSH
16362: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16366: LD_INT 3
16368: PPUSH
16369: LD_VAR 0 3
16373: PPUSH
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16381: LD_INT 4
16383: PPUSH
16384: LD_VAR 0 3
16388: PPUSH
16389: LD_INT 1
16391: PPUSH
16392: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16396: LD_INT 5
16398: PPUSH
16399: LD_VAR 0 3
16403: PPUSH
16404: LD_INT 1
16406: PPUSH
16407: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16411: LD_INT 66
16413: PPUSH
16414: LD_VAR 0 3
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16426: LD_INT 21
16428: PPUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16441: LD_INT 22
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 1
16451: PPUSH
16452: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16456: LD_INT 19
16458: PPUSH
16459: LD_VAR 0 3
16463: PPUSH
16464: LD_INT 1
16466: PPUSH
16467: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16471: LD_INT 54
16473: PPUSH
16474: LD_VAR 0 3
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16486: LD_INT 55
16488: PPUSH
16489: LD_VAR 0 3
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16501: LD_INT 0
16503: PPUSH
16504: LD_VAR 0 3
16508: PPUSH
16509: LD_INT 1
16511: PPUSH
16512: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16516: LD_INT 1
16518: PPUSH
16519: LD_VAR 0 3
16523: PPUSH
16524: LD_INT 1
16526: PPUSH
16527: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16531: LD_INT 2
16533: PPUSH
16534: LD_VAR 0 3
16538: PPUSH
16539: LD_INT 1
16541: PPUSH
16542: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16546: LD_INT 3
16548: PPUSH
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16561: LD_INT 4
16563: PPUSH
16564: LD_VAR 0 3
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16576: LD_INT 5
16578: PPUSH
16579: LD_VAR 0 3
16583: PPUSH
16584: LD_INT 1
16586: PPUSH
16587: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16591: LD_INT 6
16593: PPUSH
16594: LD_VAR 0 3
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16606: LD_INT 7
16608: PPUSH
16609: LD_VAR 0 3
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16621: LD_INT 8
16623: PPUSH
16624: LD_VAR 0 3
16628: PPUSH
16629: LD_INT 1
16631: PPUSH
16632: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16636: LD_INT 10
16638: PPUSH
16639: LD_VAR 0 3
16643: PPUSH
16644: LD_INT 1
16646: PPUSH
16647: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16651: LD_INT 11
16653: PPUSH
16654: LD_VAR 0 3
16658: PPUSH
16659: LD_INT 1
16661: PPUSH
16662: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16666: LD_INT 12
16668: PPUSH
16669: LD_VAR 0 3
16673: PPUSH
16674: LD_INT 1
16676: PPUSH
16677: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16681: LD_INT 13
16683: PPUSH
16684: LD_VAR 0 3
16688: PPUSH
16689: LD_INT 1
16691: PPUSH
16692: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16696: LD_INT 14
16698: PPUSH
16699: LD_VAR 0 3
16703: PPUSH
16704: LD_INT 1
16706: PPUSH
16707: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16711: LD_INT 15
16713: PPUSH
16714: LD_VAR 0 3
16718: PPUSH
16719: LD_INT 1
16721: PPUSH
16722: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16726: LD_INT 16
16728: PPUSH
16729: LD_VAR 0 3
16733: PPUSH
16734: LD_INT 1
16736: PPUSH
16737: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16741: LD_INT 17
16743: PPUSH
16744: LD_VAR 0 3
16748: PPUSH
16749: LD_INT 1
16751: PPUSH
16752: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
16756: LD_INT 18
16758: PPUSH
16759: LD_VAR 0 3
16763: PPUSH
16764: LD_INT 1
16766: PPUSH
16767: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16771: LD_INT 19
16773: PPUSH
16774: LD_VAR 0 3
16778: PPUSH
16779: LD_INT 1
16781: PPUSH
16782: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16786: LD_INT 20
16788: PPUSH
16789: LD_VAR 0 3
16793: PPUSH
16794: LD_INT 1
16796: PPUSH
16797: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16801: LD_INT 21
16803: PPUSH
16804: LD_VAR 0 3
16808: PPUSH
16809: LD_INT 1
16811: PPUSH
16812: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16816: LD_INT 23
16818: PPUSH
16819: LD_VAR 0 3
16823: PPUSH
16824: LD_INT 1
16826: PPUSH
16827: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16831: LD_INT 26
16833: PPUSH
16834: LD_VAR 0 3
16838: PPUSH
16839: LD_INT 1
16841: PPUSH
16842: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16846: LD_INT 27
16848: PPUSH
16849: LD_VAR 0 3
16853: PPUSH
16854: LD_INT 1
16856: PPUSH
16857: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16861: LD_INT 28
16863: PPUSH
16864: LD_VAR 0 3
16868: PPUSH
16869: LD_INT 1
16871: PPUSH
16872: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16876: LD_INT 29
16878: PPUSH
16879: LD_VAR 0 3
16883: PPUSH
16884: LD_INT 1
16886: PPUSH
16887: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16891: LD_INT 30
16893: PPUSH
16894: LD_VAR 0 3
16898: PPUSH
16899: LD_INT 1
16901: PPUSH
16902: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16906: LD_INT 31
16908: PPUSH
16909: LD_VAR 0 3
16913: PPUSH
16914: LD_INT 1
16916: PPUSH
16917: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16921: LD_INT 32
16923: PPUSH
16924: LD_VAR 0 3
16928: PPUSH
16929: LD_INT 1
16931: PPUSH
16932: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
16936: LD_INT 33
16938: PPUSH
16939: LD_VAR 0 3
16943: PPUSH
16944: LD_INT 1
16946: PPUSH
16947: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16951: LD_INT 36
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: LD_INT 1
16961: PPUSH
16962: CALL_OW 324
// end ; 6 :
16966: GO 17976
16968: LD_INT 6
16970: DOUBLE
16971: EQUAL
16972: IFTRUE 16976
16974: GO 17901
16976: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
16977: LD_INT 35
16979: PPUSH
16980: LD_VAR 0 3
16984: PPUSH
16985: LD_INT 1
16987: PPUSH
16988: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
16992: LD_INT 45
16994: PPUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: LD_INT 1
17002: PPUSH
17003: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17007: LD_INT 46
17009: PPUSH
17010: LD_VAR 0 3
17014: PPUSH
17015: LD_INT 1
17017: PPUSH
17018: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17022: LD_INT 47
17024: PPUSH
17025: LD_VAR 0 3
17029: PPUSH
17030: LD_INT 1
17032: PPUSH
17033: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17037: LD_INT 1
17039: PPUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_INT 1
17047: PPUSH
17048: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17052: LD_INT 2
17054: PPUSH
17055: LD_VAR 0 3
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17067: LD_INT 11
17069: PPUSH
17070: LD_VAR 0 3
17074: PPUSH
17075: LD_INT 1
17077: PPUSH
17078: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17082: LD_INT 20
17084: PPUSH
17085: LD_VAR 0 3
17089: PPUSH
17090: LD_INT 1
17092: PPUSH
17093: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17097: LD_INT 48
17099: PPUSH
17100: LD_VAR 0 3
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17112: LD_INT 49
17114: PPUSH
17115: LD_VAR 0 3
17119: PPUSH
17120: LD_INT 1
17122: PPUSH
17123: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17127: LD_INT 50
17129: PPUSH
17130: LD_VAR 0 3
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17142: LD_INT 69
17144: PPUSH
17145: LD_VAR 0 3
17149: PPUSH
17150: LD_INT 1
17152: PPUSH
17153: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17157: LD_INT 39
17159: PPUSH
17160: LD_VAR 0 3
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17172: LD_INT 34
17174: PPUSH
17175: LD_VAR 0 3
17179: PPUSH
17180: LD_INT 1
17182: PPUSH
17183: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17187: LD_INT 42
17189: PPUSH
17190: LD_VAR 0 3
17194: PPUSH
17195: LD_INT 1
17197: PPUSH
17198: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17202: LD_INT 44
17204: PPUSH
17205: LD_VAR 0 3
17209: PPUSH
17210: LD_INT 1
17212: PPUSH
17213: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17217: LD_INT 41
17219: PPUSH
17220: LD_VAR 0 3
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
17232: LD_INT 13
17234: PPUSH
17235: LD_VAR 0 3
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17247: LD_INT 40
17249: PPUSH
17250: LD_VAR 0 3
17254: PPUSH
17255: LD_INT 1
17257: PPUSH
17258: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17262: LD_INT 43
17264: PPUSH
17265: LD_VAR 0 3
17269: PPUSH
17270: LD_INT 1
17272: PPUSH
17273: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17277: LD_INT 70
17279: PPUSH
17280: LD_VAR 0 3
17284: PPUSH
17285: LD_INT 1
17287: PPUSH
17288: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
17292: LD_INT 23
17294: PPUSH
17295: LD_VAR 0 3
17299: PPUSH
17300: LD_INT 1
17302: PPUSH
17303: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17307: LD_INT 51
17309: PPUSH
17310: LD_VAR 0 3
17314: PPUSH
17315: LD_INT 1
17317: PPUSH
17318: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17322: LD_INT 52
17324: PPUSH
17325: LD_VAR 0 3
17329: PPUSH
17330: LD_INT 1
17332: PPUSH
17333: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17337: LD_INT 6
17339: PPUSH
17340: LD_VAR 0 3
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17352: LD_INT 15
17354: PPUSH
17355: LD_VAR 0 3
17359: PPUSH
17360: LD_INT 1
17362: PPUSH
17363: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17367: LD_INT 7
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: LD_INT 1
17377: PPUSH
17378: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17382: LD_INT 12
17384: PPUSH
17385: LD_VAR 0 3
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
17397: LD_INT 10
17399: PPUSH
17400: LD_VAR 0 3
17404: PPUSH
17405: LD_INT 1
17407: PPUSH
17408: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17412: LD_INT 17
17414: PPUSH
17415: LD_VAR 0 3
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17427: LD_INT 18
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_INT 1
17437: PPUSH
17438: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17442: LD_INT 60
17444: PPUSH
17445: LD_VAR 0 3
17449: PPUSH
17450: LD_INT 1
17452: PPUSH
17453: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
17457: LD_INT 61
17459: PPUSH
17460: LD_VAR 0 3
17464: PPUSH
17465: LD_INT 1
17467: PPUSH
17468: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17472: LD_INT 32
17474: PPUSH
17475: LD_VAR 0 3
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
17487: LD_INT 27
17489: PPUSH
17490: LD_VAR 0 3
17494: PPUSH
17495: LD_INT 1
17497: PPUSH
17498: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
17502: LD_INT 36
17504: PPUSH
17505: LD_VAR 0 3
17509: PPUSH
17510: LD_INT 1
17512: PPUSH
17513: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
17517: LD_INT 33
17519: PPUSH
17520: LD_VAR 0 3
17524: PPUSH
17525: LD_INT 1
17527: PPUSH
17528: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17532: LD_INT 9
17534: PPUSH
17535: LD_VAR 0 3
17539: PPUSH
17540: LD_INT 1
17542: PPUSH
17543: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
17547: LD_INT 38
17549: PPUSH
17550: LD_VAR 0 3
17554: PPUSH
17555: LD_INT 1
17557: PPUSH
17558: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17562: LD_INT 57
17564: PPUSH
17565: LD_VAR 0 3
17569: PPUSH
17570: LD_INT 1
17572: PPUSH
17573: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
17577: LD_INT 58
17579: PPUSH
17580: LD_VAR 0 3
17584: PPUSH
17585: LD_INT 1
17587: PPUSH
17588: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
17592: LD_INT 28
17594: PPUSH
17595: LD_VAR 0 3
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
17607: LD_INT 29
17609: PPUSH
17610: LD_VAR 0 3
17614: PPUSH
17615: LD_INT 1
17617: PPUSH
17618: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17622: LD_INT 30
17624: PPUSH
17625: LD_VAR 0 3
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17637: LD_INT 37
17639: PPUSH
17640: LD_VAR 0 3
17644: PPUSH
17645: LD_INT 1
17647: PPUSH
17648: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17652: LD_INT 63
17654: PPUSH
17655: LD_VAR 0 3
17659: PPUSH
17660: LD_INT 1
17662: PPUSH
17663: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
17667: LD_INT 64
17669: PPUSH
17670: LD_VAR 0 3
17674: PPUSH
17675: LD_INT 1
17677: PPUSH
17678: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17682: LD_INT 3
17684: PPUSH
17685: LD_VAR 0 3
17689: PPUSH
17690: LD_INT 1
17692: PPUSH
17693: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17697: LD_INT 4
17699: PPUSH
17700: LD_VAR 0 3
17704: PPUSH
17705: LD_INT 1
17707: PPUSH
17708: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17712: LD_INT 5
17714: PPUSH
17715: LD_VAR 0 3
17719: PPUSH
17720: LD_INT 1
17722: PPUSH
17723: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
17727: LD_INT 8
17729: PPUSH
17730: LD_VAR 0 3
17734: PPUSH
17735: LD_INT 1
17737: PPUSH
17738: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17742: LD_INT 66
17744: PPUSH
17745: LD_VAR 0 3
17749: PPUSH
17750: LD_INT 1
17752: PPUSH
17753: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
17757: LD_INT 67
17759: PPUSH
17760: LD_VAR 0 3
17764: PPUSH
17765: LD_INT 1
17767: PPUSH
17768: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17772: LD_INT 21
17774: PPUSH
17775: LD_VAR 0 3
17779: PPUSH
17780: LD_INT 1
17782: PPUSH
17783: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17787: LD_INT 22
17789: PPUSH
17790: LD_VAR 0 3
17794: PPUSH
17795: LD_INT 1
17797: PPUSH
17798: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17802: LD_INT 19
17804: PPUSH
17805: LD_VAR 0 3
17809: PPUSH
17810: LD_INT 1
17812: PPUSH
17813: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
17817: LD_INT 26
17819: PPUSH
17820: LD_VAR 0 3
17824: PPUSH
17825: LD_INT 1
17827: PPUSH
17828: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17832: LD_INT 54
17834: PPUSH
17835: LD_VAR 0 3
17839: PPUSH
17840: LD_INT 1
17842: PPUSH
17843: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17847: LD_INT 55
17849: PPUSH
17850: LD_VAR 0 3
17854: PPUSH
17855: LD_INT 1
17857: PPUSH
17858: CALL_OW 322
// for i = 0 to 39 do
17862: LD_ADDR_VAR 0 4
17866: PUSH
17867: DOUBLE
17868: LD_INT 0
17870: DEC
17871: ST_TO_ADDR
17872: LD_INT 39
17874: PUSH
17875: FOR_TO
17876: IFFALSE 17897
// SetRestrict ( i , side , true ) ;
17878: LD_VAR 0 4
17882: PPUSH
17883: LD_VAR 0 3
17887: PPUSH
17888: LD_INT 1
17890: PPUSH
17891: CALL_OW 324
17895: GO 17875
17897: POP
17898: POP
// end ; else
17899: GO 17976
17901: POP
// begin for i = 1 to 73 do
17902: LD_ADDR_VAR 0 4
17906: PUSH
17907: DOUBLE
17908: LD_INT 1
17910: DEC
17911: ST_TO_ADDR
17912: LD_INT 73
17914: PUSH
17915: FOR_TO
17916: IFFALSE 17937
// SetTech ( i , side , state_enabled ) ;
17918: LD_VAR 0 4
17922: PPUSH
17923: LD_VAR 0 3
17927: PPUSH
17928: LD_INT 1
17930: PPUSH
17931: CALL_OW 322
17935: GO 17915
17937: POP
17938: POP
// for i = 0 to 39 do
17939: LD_ADDR_VAR 0 4
17943: PUSH
17944: DOUBLE
17945: LD_INT 0
17947: DEC
17948: ST_TO_ADDR
17949: LD_INT 39
17951: PUSH
17952: FOR_TO
17953: IFFALSE 17974
// SetRestrict ( i , side , true ) ;
17955: LD_VAR 0 4
17959: PPUSH
17960: LD_VAR 0 3
17964: PPUSH
17965: LD_INT 1
17967: PPUSH
17968: CALL_OW 324
17972: GO 17952
17974: POP
17975: POP
// end ; end ; end ;
17976: GO 13981
17978: POP
17979: POP
// end ;
17980: LD_VAR 0 2
17984: RET
