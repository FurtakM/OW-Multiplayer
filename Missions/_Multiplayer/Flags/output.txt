// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 386: LD_ADDR_EXP 36
 390: PUSH
 391: LD_EXP 31
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: EMPTY
 400: LIST
 401: DIFF
 402: PUSH
 403: LD_INT 1
 405: GREATER
 406: ST_TO_ADDR
// if Multiplayer then
 407: LD_OWVAR 4
 411: IFFALSE 613
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 413: LD_ADDR_EXP 1
 417: PUSH
 418: LD_INT 0
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 426: LD_ADDR_EXP 2
 430: PUSH
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 439: LD_ADDR_EXP 3
 443: PUSH
 444: LD_INT 2
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 452: LD_ADDR_EXP 4
 456: PUSH
 457: LD_INT 3
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 465: LD_ADDR_EXP 5
 469: PUSH
 470: LD_INT 4
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 478: LD_ADDR_EXP 6
 482: PUSH
 483: LD_INT 5
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 491: LD_ADDR_EXP 7
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 499: LD_ADDR_EXP 8
 503: PUSH
 504: LD_INT 10
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 512: LD_ADDR_EXP 9
 516: PUSH
 517: LD_INT 11
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 525: LD_ADDR_EXP 10
 529: PUSH
 530: LD_INT 12
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 538: LD_ADDR_EXP 11
 542: PUSH
 543: LD_INT 13
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 551: LD_ADDR_EXP 12
 555: PUSH
 556: LD_INT 14
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 564: LD_ADDR_EXP 13
 568: PUSH
 569: LD_INT 17
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 577: LD_ADDR_EXP 14
 581: PUSH
 582: LD_INT 20
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_win_rules = 0 ;
 603: LD_ADDR_EXP 30
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// end else
 611: GO 745
// begin Randomize ;
 613: CALL_OW 10
// def_base_level := 2 ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 2
 624: ST_TO_ADDR
// def_amount_of_people := 0 ;
 625: LD_ADDR_EXP 2
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_skill_level := 1 ;
 633: LD_ADDR_EXP 3
 637: PUSH
 638: LD_INT 1
 640: ST_TO_ADDR
// def_starting_resources := 2 ;
 641: LD_ADDR_EXP 4
 645: PUSH
 646: LD_INT 2
 648: ST_TO_ADDR
// def_shipments_density := 1 ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 657: LD_ADDR_EXP 6
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 665: LD_ADDR_EXP 7
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_shared_vision := 1 ;
 673: LD_ADDR_EXP 8
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_morale_flags := 1 ;
 681: LD_ADDR_EXP 9
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_siberite_detection := 1 ;
 689: LD_ADDR_EXP 10
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_people_respawning := 2 ;
 697: LD_ADDR_EXP 11
 701: PUSH
 702: LD_INT 2
 704: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 705: LD_ADDR_EXP 12
 709: PUSH
 710: LD_INT 3
 712: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 713: LD_ADDR_EXP 13
 717: PUSH
 718: LD_INT 0
 720: ST_TO_ADDR
// def_builduptime := 1 ;
 721: LD_ADDR_EXP 14
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// tech_level = 4 ;
 729: LD_ADDR_VAR 0 3
 733: PUSH
 734: LD_INT 4
 736: ST_TO_ADDR
// def_win_rules = 0 ;
 737: LD_ADDR_EXP 30
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// end ; if isSGUI then
 745: LD_OWVAR 83
 749: IFFALSE 757
// setMpTechs ( ) else
 751: CALL 10116 0 0
 755: GO 770
// SetMpTechLevel ( tech_level + 1 ) ;
 757: LD_VAR 0 3
 761: PUSH
 762: LD_INT 1
 764: PLUS
 765: PPUSH
 766: CALL 10263 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 770: LD_ADDR_EXP 17
 774: PUSH
 775: LD_INT 0
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 1
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_EXP 1
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: ARRAY
 798: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 18
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 828: LD_ADDR_EXP 19
 832: PUSH
 833: LD_INT 9
 835: PUSH
 836: LD_INT 12
 838: PUSH
 839: LD_INT 15
 841: PUSH
 842: LD_INT 24
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: PUSH
 851: LD_EXP 2
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: ARRAY
 860: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 861: LD_ADDR_EXP 20
 865: PUSH
 866: LD_INT 2
 868: PUSH
 869: LD_INT 3
 871: PUSH
 872: LD_INT 4
 874: PUSH
 875: LD_INT 5
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_EXP 3
 888: PUSH
 889: LD_INT 1
 891: PLUS
 892: ARRAY
 893: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 894: LD_ADDR_EXP 22
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 30
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 50
 929: PUSH
 930: LD_INT 20
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 80
 943: PUSH
 944: LD_INT 40
 946: PUSH
 947: LD_INT 20
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: LD_EXP 4
 965: PUSH
 966: LD_INT 1
 968: PLUS
 969: ARRAY
 970: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 971: LD_ADDR_EXP 21
 975: PUSH
 976: LD_INT 10
 978: PUSH
 979: EMPTY
 980: LIST
 981: PUSH
 982: LD_INT 7
 984: PUSH
 985: LD_INT 14
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 6
 994: PUSH
 995: LD_INT 12
 997: PUSH
 998: LD_INT 18
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_INT 5
1008: PUSH
1009: LD_INT 10
1011: PUSH
1012: LD_INT 15
1014: PUSH
1015: LD_INT 20
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_EXP 4
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: ARRAY
1039: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 ] [ def_shipments_density + 1 ] ;
1040: LD_ADDR_EXP 23
1044: PUSH
1045: LD_INT 150
1047: PUSH
1048: LD_INT 125
1050: PUSH
1051: LD_INT 100
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_EXP 5
1063: PUSH
1064: LD_INT 1
1066: PLUS
1067: ARRAY
1068: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1069: LD_ADDR_EXP 27
1073: PUSH
1074: LD_INT 0
1076: PUSH
1077: LD_INT 10500
1079: PUSH
1080: LD_INT 6300
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_EXP 11
1092: PUSH
1093: LD_INT 1
1095: PLUS
1096: ARRAY
1097: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1098: LD_ADDR_EXP 28
1102: PUSH
1103: LD_INT 0
1105: PUSH
1106: LD_INT 31500
1108: PUSH
1109: LD_INT 10500
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: LD_EXP 11
1121: PUSH
1122: LD_INT 1
1124: PLUS
1125: ARRAY
1126: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1127: LD_ADDR_EXP 25
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: LD_INT 1
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: PUSH
1150: LD_EXP 12
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: ARRAY
1159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1160: LD_ADDR_EXP 24
1164: PUSH
1165: LD_INT 1
1167: NEG
1168: PUSH
1169: LD_INT 350
1171: PUSH
1172: LD_INT 700
1174: PUSH
1175: LD_INT 1400
1177: PUSH
1178: LD_INT 0
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_EXP 9
1192: PUSH
1193: LD_INT 1
1195: PLUS
1196: ARRAY
1197: ST_TO_ADDR
// battle_flags_id = [ ] ;
1198: LD_ADDR_EXP 44
1202: PUSH
1203: EMPTY
1204: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1205: LD_ADDR_EXP 29
1209: PUSH
1210: LD_INT 0
1212: PUSH
1213: LD_INT 1
1215: PUSH
1216: LD_INT 63000
1218: PUSH
1219: LD_INT 126000
1221: PUSH
1222: LD_INT 189000
1224: PUSH
1225: LD_INT 252000
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: PUSH
1236: LD_EXP 13
1240: PUSH
1241: LD_INT 1
1243: PLUS
1244: ARRAY
1245: ST_TO_ADDR
// end ;
1246: LD_VAR 0 1
1250: RET
// function init_map ; var i , j ; begin
1251: LD_INT 0
1253: PPUSH
1254: PPUSH
1255: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1256: LD_ADDR_EXP 40
1260: PUSH
1261: LD_INT 17
1263: PUSH
1264: LD_INT 4
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 72
1273: PUSH
1274: LD_INT 5
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 157
1283: PUSH
1284: LD_INT 22
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 205
1293: PUSH
1294: LD_INT 111
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 221
1303: PUSH
1304: LD_INT 195
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 169
1313: PUSH
1314: LD_INT 196
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 93
1323: PUSH
1324: LD_INT 177
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 52
1333: PUSH
1334: LD_INT 92
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1351: LD_ADDR_EXP 41
1355: PUSH
1356: LD_INT 17
1358: PUSH
1359: LD_INT 4
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 16
1368: PUSH
1369: LD_INT 23
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: PUSH
1380: LD_INT 72
1382: PUSH
1383: LD_INT 5
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 88
1392: PUSH
1393: LD_INT 28
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 157
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 133
1416: PUSH
1417: LD_INT 12
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 205
1430: PUSH
1431: LD_INT 111
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: LD_INT 200
1440: PUSH
1441: LD_INT 95
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 221
1454: PUSH
1455: LD_INT 195
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 249
1464: PUSH
1465: LD_INT 190
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 169
1478: PUSH
1479: LD_INT 196
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 180
1488: PUSH
1489: LD_INT 197
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 93
1502: PUSH
1503: LD_INT 177
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 114
1512: PUSH
1513: LD_INT 194
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 52
1526: PUSH
1527: LD_INT 92
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 58
1536: PUSH
1537: LD_INT 107
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1558: LD_ADDR_EXP 42
1562: PUSH
1563: LD_INT 12
1565: PUSH
1566: LD_INT 12
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 99
1575: PUSH
1576: LD_INT 19
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 139
1585: PUSH
1586: LD_INT 5
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 207
1595: PUSH
1596: LD_INT 100
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 244
1605: PUSH
1606: LD_INT 181
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 183
1615: PUSH
1616: LD_INT 196
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 117
1625: PUSH
1626: LD_INT 195
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 54
1635: PUSH
1636: LD_INT 104
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1653: LD_ADDR_EXP 43
1657: PUSH
1658: EMPTY
1659: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1660: LD_ADDR_EXP 37
1664: PUSH
1665: LD_INT 32
1667: PUSH
1668: LD_INT 24
1670: PUSH
1671: LD_INT 2
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 87
1681: PUSH
1682: LD_INT 18
1684: PUSH
1685: LD_INT 3
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_INT 146
1695: PUSH
1696: LD_INT 28
1698: PUSH
1699: LD_INT 3
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 188
1709: PUSH
1710: LD_INT 103
1712: PUSH
1713: LD_INT 4
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 224
1723: PUSH
1724: LD_INT 180
1726: PUSH
1727: LD_INT 5
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 168
1737: PUSH
1738: LD_INT 180
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 105
1751: PUSH
1752: LD_INT 170
1754: PUSH
1755: LD_INT 0
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 71
1765: PUSH
1766: LD_INT 102
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: ST_TO_ADDR
// for i in depot_def do
1787: LD_ADDR_VAR 0 2
1791: PUSH
1792: LD_EXP 37
1796: PUSH
1797: FOR_IN
1798: IFFALSE 1874
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1800: LD_ADDR_EXP 39
1804: PUSH
1805: LD_EXP 39
1809: PUSH
1810: LD_VAR 0 2
1814: PUSH
1815: LD_INT 1
1817: ARRAY
1818: PPUSH
1819: LD_VAR 0 2
1823: PUSH
1824: LD_INT 3
1826: ARRAY
1827: PPUSH
1828: LD_INT 4
1830: NEG
1831: PPUSH
1832: CALL_OW 272
1836: PUSH
1837: LD_VAR 0 2
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: LD_VAR 0 2
1850: PUSH
1851: LD_INT 3
1853: ARRAY
1854: PPUSH
1855: LD_INT 4
1857: NEG
1858: PPUSH
1859: CALL_OW 273
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: ADD
1871: ST_TO_ADDR
1872: GO 1797
1874: POP
1875: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
1876: LD_ADDR_EXP 38
1880: PUSH
1881: LD_INT 50
1883: PUSH
1884: LD_INT 40
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_INT 47
1897: PUSH
1898: LD_INT 17
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 29
1911: PUSH
1912: LD_INT 39
1914: PUSH
1915: LD_INT 0
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 107
1930: PUSH
1931: LD_INT 27
1933: PUSH
1934: LD_INT 4
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 67
1944: PUSH
1945: LD_INT 10
1947: PUSH
1948: LD_INT 1
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 91
1958: PUSH
1959: LD_INT 35
1961: PUSH
1962: LD_INT 0
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 165
1977: PUSH
1978: LD_INT 44
1980: PUSH
1981: LD_INT 5
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 123
1991: PUSH
1992: LD_INT 16
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 141
2005: PUSH
2006: LD_INT 39
2008: PUSH
2009: LD_INT 0
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 179
2024: PUSH
2025: LD_INT 85
2027: PUSH
2028: LD_INT 3
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 172
2038: PUSH
2039: LD_INT 102
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 196
2052: PUSH
2053: LD_INT 118
2055: PUSH
2056: LD_INT 5
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 210
2071: PUSH
2072: LD_INT 182
2074: PUSH
2075: LD_INT 1
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 226
2085: PUSH
2086: LD_INT 164
2088: PUSH
2089: LD_INT 3
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 209
2099: PUSH
2100: LD_INT 164
2102: PUSH
2103: LD_INT 2
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 156
2118: PUSH
2119: LD_INT 183
2121: PUSH
2122: LD_INT 1
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 184
2132: PUSH
2133: LD_INT 184
2135: PUSH
2136: LD_INT 4
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 161
2146: PUSH
2147: LD_INT 166
2149: PUSH
2150: LD_INT 3
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 86
2165: PUSH
2166: LD_INT 156
2168: PUSH
2169: LD_INT 2
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 124
2179: PUSH
2180: LD_INT 180
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 106
2193: PUSH
2194: LD_INT 155
2196: PUSH
2197: LD_INT 3
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 87
2212: PUSH
2213: LD_INT 102
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 63
2226: PUSH
2227: LD_INT 83
2229: PUSH
2230: LD_INT 3
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 79
2240: PUSH
2241: LD_INT 120
2243: PUSH
2244: LD_INT 0
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: ST_TO_ADDR
// for i = 1 to Side_Positions do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_EXP 34
2281: PUSH
2282: FOR_TO
2283: IFFALSE 2413
// begin if not Side_Positions [ i ] then
2285: LD_EXP 34
2289: PUSH
2290: LD_VAR 0 2
2294: ARRAY
2295: NOT
2296: IFFALSE 2300
// continue ;
2298: GO 2282
// if def_extra_oil_deposits then
2300: LD_EXP 6
2304: IFFALSE 2362
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_EXP 41
2315: PUSH
2316: LD_EXP 34
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: ARRAY
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2358
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2331: LD_VAR 0 3
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_VAR 0 3
2344: PUSH
2345: LD_INT 2
2347: ARRAY
2348: PPUSH
2349: LD_INT 2
2351: PPUSH
2352: CALL_OW 62
2356: GO 2328
2358: POP
2359: POP
2360: GO 2411
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2362: LD_EXP 40
2366: PUSH
2367: LD_EXP 34
2371: PUSH
2372: LD_VAR 0 2
2376: ARRAY
2377: ARRAY
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PPUSH
2383: LD_EXP 40
2387: PUSH
2388: LD_EXP 34
2392: PUSH
2393: LD_VAR 0 2
2397: ARRAY
2398: ARRAY
2399: PUSH
2400: LD_INT 2
2402: ARRAY
2403: PPUSH
2404: LD_INT 2
2406: PPUSH
2407: CALL_OW 62
// end ;
2411: GO 2282
2413: POP
2414: POP
// if def_extra_sib_deposits then
2415: LD_EXP 7
2419: IFFALSE 2573
// for i = 1 to Side_Positions do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_EXP 34
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2571
// begin if not Side_Positions [ i ] then
2439: LD_EXP 34
2443: PUSH
2444: LD_VAR 0 2
2448: ARRAY
2449: NOT
2450: IFFALSE 2454
// continue ;
2452: GO 2436
// if def_extra_sib_deposits = 2 then
2454: LD_EXP 7
2458: PUSH
2459: LD_INT 2
2461: EQUAL
2462: IFFALSE 2520
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2464: LD_ADDR_VAR 0 3
2468: PUSH
2469: LD_EXP 43
2473: PUSH
2474: LD_EXP 34
2478: PUSH
2479: LD_VAR 0 2
2483: ARRAY
2484: ARRAY
2485: PUSH
2486: FOR_IN
2487: IFFALSE 2516
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2489: LD_VAR 0 3
2493: PUSH
2494: LD_INT 1
2496: ARRAY
2497: PPUSH
2498: LD_VAR 0 3
2502: PUSH
2503: LD_INT 2
2505: ARRAY
2506: PPUSH
2507: LD_INT 3
2509: PPUSH
2510: CALL_OW 62
2514: GO 2486
2516: POP
2517: POP
2518: GO 2569
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2520: LD_EXP 42
2524: PUSH
2525: LD_EXP 34
2529: PUSH
2530: LD_VAR 0 2
2534: ARRAY
2535: ARRAY
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: LD_EXP 42
2545: PUSH
2546: LD_EXP 34
2550: PUSH
2551: LD_VAR 0 2
2555: ARRAY
2556: ARRAY
2557: PUSH
2558: LD_INT 2
2560: ARRAY
2561: PPUSH
2562: LD_INT 3
2564: PPUSH
2565: CALL_OW 62
// end ;
2569: GO 2436
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
2582: PPUSH
// if not Team_Game then
2583: LD_EXP 36
2587: NOT
2588: IFFALSE 2686
// begin for i = 1 to 8 do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_INT 8
2602: PUSH
2603: FOR_TO
2604: IFFALSE 2682
// for j = 1 to 8 do
2606: LD_ADDR_VAR 0 3
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 8
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2678
// if i <> j then
2622: LD_VAR 0 2
2626: PUSH
2627: LD_VAR 0 3
2631: NONEQUAL
2632: IFFALSE 2656
// SetAttitude ( i , j , att_neutral , true ) else
2634: LD_VAR 0 2
2638: PPUSH
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 0
2646: PPUSH
2647: LD_INT 1
2649: PPUSH
2650: CALL_OW 80
2654: GO 2676
// SetAttitude ( i , j , att_friend , true ) ;
2656: LD_VAR 0 2
2660: PPUSH
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 1
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 80
2676: GO 2619
2678: POP
2679: POP
2680: GO 2603
2682: POP
2683: POP
// end else
2684: GO 2861
// begin if def_shared_vision then
2686: LD_EXP 8
2690: IFFALSE 2755
// begin for i in Teams do
2692: LD_ADDR_VAR 0 2
2696: PUSH
2697: LD_EXP 32
2701: PUSH
2702: FOR_IN
2703: IFFALSE 2753
// for j = 2 to i do
2705: LD_ADDR_VAR 0 3
2709: PUSH
2710: DOUBLE
2711: LD_INT 2
2713: DEC
2714: ST_TO_ADDR
2715: LD_VAR 0 2
2719: PUSH
2720: FOR_TO
2721: IFFALSE 2749
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2723: LD_VAR 0 2
2727: PUSH
2728: LD_VAR 0 3
2732: ARRAY
2733: PPUSH
2734: LD_VAR 0 2
2738: PUSH
2739: LD_INT 1
2741: ARRAY
2742: PPUSH
2743: CALL_OW 343
2747: GO 2720
2749: POP
2750: POP
2751: GO 2702
2753: POP
2754: POP
// end ; for i = 1 to 8 do
2755: LD_ADDR_VAR 0 2
2759: PUSH
2760: DOUBLE
2761: LD_INT 1
2763: DEC
2764: ST_TO_ADDR
2765: LD_INT 8
2767: PUSH
2768: FOR_TO
2769: IFFALSE 2859
// for j = 1 to 8 do
2771: LD_ADDR_VAR 0 3
2775: PUSH
2776: DOUBLE
2777: LD_INT 1
2779: DEC
2780: ST_TO_ADDR
2781: LD_INT 8
2783: PUSH
2784: FOR_TO
2785: IFFALSE 2855
// if Side_Teams [ i ] = Side_Teams [ j ] then
2787: LD_EXP 31
2791: PUSH
2792: LD_VAR 0 2
2796: ARRAY
2797: PUSH
2798: LD_EXP 31
2802: PUSH
2803: LD_VAR 0 3
2807: ARRAY
2808: EQUAL
2809: IFFALSE 2833
// SetAttitude ( i , j , att_friend , true ) else
2811: LD_VAR 0 2
2815: PPUSH
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_INT 1
2823: PPUSH
2824: LD_INT 1
2826: PPUSH
2827: CALL_OW 80
2831: GO 2853
// SetAttitude ( i , j , att_enemy , true ) ;
2833: LD_VAR 0 2
2837: PPUSH
2838: LD_VAR 0 3
2842: PPUSH
2843: LD_INT 2
2845: PPUSH
2846: LD_INT 1
2848: PPUSH
2849: CALL_OW 80
2853: GO 2784
2855: POP
2856: POP
2857: GO 2768
2859: POP
2860: POP
// end ; end ;
2861: LD_VAR 0 1
2865: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2866: LD_INT 0
2868: PPUSH
2869: PPUSH
2870: PPUSH
2871: PPUSH
// result := [ ] ;
2872: LD_ADDR_VAR 0 7
2876: PUSH
2877: EMPTY
2878: ST_TO_ADDR
// for i := 1 to count do
2879: LD_ADDR_VAR 0 8
2883: PUSH
2884: DOUBLE
2885: LD_INT 1
2887: DEC
2888: ST_TO_ADDR
2889: LD_VAR 0 1
2893: PUSH
2894: FOR_TO
2895: IFFALSE 3313
// begin uc_direction := Rand ( 0 , 5 ) ;
2897: LD_ADDR_OWVAR 24
2901: PUSH
2902: LD_INT 0
2904: PPUSH
2905: LD_INT 5
2907: PPUSH
2908: CALL_OW 12
2912: ST_TO_ADDR
// if commander then
2913: LD_LOC 1
2917: IFFALSE 3026
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2919: LD_ADDR_OWVAR 26
2923: PUSH
2924: LD_OWVAR 19
2928: PUSH
2929: LD_OWVAR 20
2933: ARRAY
2934: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 2
2940: PPUSH
2941: CALL_OW 12
2945: PPUSH
2946: LD_VAR 0 2
2950: PPUSH
2951: LD_EXP 20
2955: PUSH
2956: LD_INT 2
2958: PLUS
2959: PPUSH
2960: CALL_OW 380
// hc_importance := 105 ;
2964: LD_ADDR_OWVAR 32
2968: PUSH
2969: LD_INT 105
2971: ST_TO_ADDR
// commander := false ;
2972: LD_ADDR_LOC 1
2976: PUSH
2977: LD_INT 0
2979: ST_TO_ADDR
// if Multiplayer then
2980: LD_OWVAR 4
2984: IFFALSE 3024
// begin hc_gallery := MULTIAVATARS ;
2986: LD_ADDR_OWVAR 33
2990: PUSH
2991: LD_STRING MULTIAVATARS
2993: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2994: LD_ADDR_OWVAR 34
2998: PUSH
2999: LD_OWVAR 20
3003: PPUSH
3004: CALL_OW 525
3008: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3009: LD_ADDR_OWVAR 27
3013: PUSH
3014: LD_OWVAR 20
3018: PPUSH
3019: CALL_OW 526
3023: ST_TO_ADDR
// end ; end else
3024: GO 3089
// begin hc_name :=  ;
3026: LD_ADDR_OWVAR 26
3030: PUSH
3031: LD_STRING 
3033: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3034: LD_INT 1
3036: PPUSH
3037: LD_INT 2
3039: PPUSH
3040: CALL_OW 12
3044: PPUSH
3045: LD_VAR 0 2
3049: PPUSH
3050: LD_EXP 20
3054: PPUSH
3055: CALL_OW 380
// hc_importance := 0 ;
3059: LD_ADDR_OWVAR 32
3063: PUSH
3064: LD_INT 0
3066: ST_TO_ADDR
// if Multiplayer then
3067: LD_OWVAR 4
3071: IFFALSE 3089
// begin hc_gallery :=  ;
3073: LD_ADDR_OWVAR 33
3077: PUSH
3078: LD_STRING 
3080: ST_TO_ADDR
// hc_face_number := 0 ;
3081: LD_ADDR_OWVAR 34
3085: PUSH
3086: LD_INT 0
3088: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3089: LD_ADDR_VAR 0 10
3093: PUSH
3094: CALL_OW 44
3098: ST_TO_ADDR
// if global_defined then
3099: LD_LOC 3
3103: IFFALSE 3243
// begin if ( cl = class_soldier ) then
3105: LD_VAR 0 2
3109: PUSH
3110: LD_INT 1
3112: EQUAL
3113: IFFALSE 3133
// j := i + soldiers_created else
3115: LD_ADDR_VAR 0 9
3119: PUSH
3120: LD_VAR 0 8
3124: PUSH
3125: LD_LOC 4
3129: PLUS
3130: ST_TO_ADDR
3131: GO 3143
// j := i ;
3133: LD_ADDR_VAR 0 9
3137: PUSH
3138: LD_VAR 0 8
3142: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3143: LD_LOC 2
3147: PUSH
3148: LD_VAR 0 2
3152: ARRAY
3153: PUSH
3154: LD_VAR 0 9
3158: ARRAY
3159: PPUSH
3160: LD_VAR 0 10
3164: PPUSH
3165: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3169: LD_VAR 0 10
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_LOC 2
3181: PUSH
3182: LD_VAR 0 2
3186: ARRAY
3187: PUSH
3188: LD_VAR 0 9
3192: ARRAY
3193: PPUSH
3194: LD_INT 2
3196: PPUSH
3197: CALL_OW 260
3201: PPUSH
3202: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3206: LD_VAR 0 10
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: LD_LOC 2
3218: PUSH
3219: LD_VAR 0 2
3223: ARRAY
3224: PUSH
3225: LD_VAR 0 9
3229: ARRAY
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL_OW 260
3238: PPUSH
3239: CALL_OW 239
// end ; if building then
3243: LD_VAR 0 6
3247: IFFALSE 3265
// PlaceHumanInUnit ( un , building ) else
3249: LD_VAR 0 10
3253: PPUSH
3254: LD_VAR 0 6
3258: PPUSH
3259: CALL_OW 52
3263: GO 3292
// PlaceUnitXYR ( un , x , y , r , false ) ;
3265: LD_VAR 0 10
3269: PPUSH
3270: LD_VAR 0 3
3274: PPUSH
3275: LD_VAR 0 4
3279: PPUSH
3280: LD_VAR 0 5
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 50
// result := result ^ [ un ] ;
3292: LD_ADDR_VAR 0 7
3296: PUSH
3297: LD_VAR 0 7
3301: PUSH
3302: LD_VAR 0 10
3306: PUSH
3307: EMPTY
3308: LIST
3309: ADD
3310: ST_TO_ADDR
// end ;
3311: GO 2894
3313: POP
3314: POP
// if not global_defined then
3315: LD_LOC 3
3319: NOT
3320: IFFALSE 3398
// if ( global_units >= cl ) then
3322: LD_LOC 2
3326: PUSH
3327: LD_VAR 0 2
3331: GREATEREQUAL
3332: IFFALSE 3373
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3334: LD_ADDR_LOC 2
3338: PUSH
3339: LD_LOC 2
3343: PPUSH
3344: LD_VAR 0 2
3348: PPUSH
3349: LD_LOC 2
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PUSH
3360: LD_VAR 0 7
3364: ADD
3365: PPUSH
3366: CALL_OW 1
3370: ST_TO_ADDR
3371: GO 3398
// global_units := Replace ( global_units , cl , result ) ;
3373: LD_ADDR_LOC 2
3377: PUSH
3378: LD_LOC 2
3382: PPUSH
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_VAR 0 7
3392: PPUSH
3393: CALL_OW 1
3397: ST_TO_ADDR
// if commander then
3398: LD_LOC 1
3402: IFFALSE 3449
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3404: LD_ADDR_EXP 45
3408: PUSH
3409: LD_EXP 45
3413: PPUSH
3414: LD_OWVAR 20
3418: PPUSH
3419: LD_EXP 45
3423: PUSH
3424: LD_OWVAR 20
3428: ARRAY
3429: PUSH
3430: LD_VAR 0 10
3434: ADD
3435: PPUSH
3436: CALL_OW 1
3440: ST_TO_ADDR
// commander := false ;
3441: LD_ADDR_LOC 1
3445: PUSH
3446: LD_INT 0
3448: ST_TO_ADDR
// end ; end ;
3449: LD_VAR 0 7
3453: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
// if side in [ 0 , 9 ] then
3465: LD_VAR 0 1
3469: PUSH
3470: LD_INT 0
3472: PUSH
3473: LD_INT 9
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: IN
3480: IFFALSE 3484
// exit ;
3482: GO 4534
// pos := Side_Positions [ side ] ;
3484: LD_ADDR_VAR 0 3
3488: PUSH
3489: LD_EXP 34
3493: PUSH
3494: LD_VAR 0 1
3498: ARRAY
3499: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3500: LD_ADDR_OWVAR 21
3504: PUSH
3505: LD_EXP 35
3509: PUSH
3510: LD_VAR 0 1
3514: ARRAY
3515: ST_TO_ADDR
// uc_side := side ;
3516: LD_ADDR_OWVAR 20
3520: PUSH
3521: LD_VAR 0 1
3525: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3526: LD_ADDR_VAR 0 4
3530: PUSH
3531: LD_EXP 37
3535: PUSH
3536: LD_VAR 0 3
3540: ARRAY
3541: PUSH
3542: LD_INT 1
3544: ARRAY
3545: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3546: LD_ADDR_VAR 0 5
3550: PUSH
3551: LD_EXP 37
3555: PUSH
3556: LD_VAR 0 3
3560: ARRAY
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3566: LD_ADDR_VAR 0 6
3570: PUSH
3571: LD_EXP 37
3575: PUSH
3576: LD_VAR 0 3
3580: ARRAY
3581: PUSH
3582: LD_INT 3
3584: ARRAY
3585: ST_TO_ADDR
// if is_depot then
3586: LD_EXP 17
3590: IFFALSE 3723
// begin bc_type = b_depot ;
3592: LD_ADDR_OWVAR 42
3596: PUSH
3597: LD_INT 0
3599: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3600: LD_ADDR_VAR 0 10
3604: PUSH
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_VAR 0 5
3614: PPUSH
3615: LD_VAR 0 6
3619: PPUSH
3620: CALL_OW 47
3624: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3625: LD_VAR 0 10
3629: PPUSH
3630: LD_STRING @
3632: PUSH
3633: LD_VAR 0 1
3637: STR
3638: PPUSH
3639: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3643: LD_VAR 0 10
3647: PPUSH
3648: CALL_OW 274
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_EXP 22
3660: PUSH
3661: LD_INT 1
3663: ARRAY
3664: PPUSH
3665: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3669: LD_VAR 0 10
3673: PPUSH
3674: CALL_OW 274
3678: PPUSH
3679: LD_INT 2
3681: PPUSH
3682: LD_EXP 22
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3695: LD_VAR 0 10
3699: PPUSH
3700: CALL_OW 274
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_EXP 22
3712: PUSH
3713: LD_INT 3
3715: ARRAY
3716: PPUSH
3717: CALL_OW 277
// end else
3721: GO 3867
// begin for i := 1 to 3 do
3723: LD_ADDR_VAR 0 7
3727: PUSH
3728: DOUBLE
3729: LD_INT 1
3731: DEC
3732: ST_TO_ADDR
3733: LD_INT 3
3735: PUSH
3736: FOR_TO
3737: IFFALSE 3865
// begin r := starting_resources [ i ] ;
3739: LD_ADDR_VAR 0 8
3743: PUSH
3744: LD_EXP 22
3748: PUSH
3749: LD_VAR 0 7
3753: ARRAY
3754: ST_TO_ADDR
// while r >= 10 do
3755: LD_VAR 0 8
3759: PUSH
3760: LD_INT 10
3762: GREATEREQUAL
3763: IFFALSE 3863
// if r > 50 then
3765: LD_VAR 0 8
3769: PUSH
3770: LD_INT 50
3772: GREATER
3773: IFFALSE 3819
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3775: LD_VAR 0 7
3779: PPUSH
3780: LD_INT 5
3782: PPUSH
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_VAR 0 5
3792: PPUSH
3793: LD_INT 4
3795: PPUSH
3796: LD_INT 0
3798: PPUSH
3799: CALL_OW 60
// r := r - 50 ;
3803: LD_ADDR_VAR 0 8
3807: PUSH
3808: LD_VAR 0 8
3812: PUSH
3813: LD_INT 50
3815: MINUS
3816: ST_TO_ADDR
// end else
3817: GO 3861
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3819: LD_VAR 0 7
3823: PPUSH
3824: LD_VAR 0 8
3828: PUSH
3829: LD_INT 10
3831: DIV
3832: PPUSH
3833: LD_VAR 0 4
3837: PPUSH
3838: LD_VAR 0 5
3842: PPUSH
3843: LD_INT 4
3845: PPUSH
3846: LD_INT 0
3848: PPUSH
3849: CALL_OW 60
// r := 0 ;
3853: LD_ADDR_VAR 0 8
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// end ;
3861: GO 3755
// end ;
3863: GO 3736
3865: POP
3866: POP
// end ; for r in starting_crates do
3867: LD_ADDR_VAR 0 8
3871: PUSH
3872: LD_EXP 21
3876: PUSH
3877: FOR_IN
3878: IFFALSE 3910
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3880: LD_INT 1
3882: PPUSH
3883: LD_INT 5
3885: PPUSH
3886: LD_VAR 0 4
3890: PPUSH
3891: LD_VAR 0 5
3895: PPUSH
3896: LD_VAR 0 8
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL_OW 60
3908: GO 3877
3910: POP
3911: POP
// if def_morale_flags then
3912: LD_EXP 9
3916: IFFALSE 4055
// begin x := start_def [ pos ] [ 1 ] ;
3918: LD_ADDR_VAR 0 4
3922: PUSH
3923: LD_EXP 39
3927: PUSH
3928: LD_VAR 0 3
3932: ARRAY
3933: PUSH
3934: LD_INT 1
3936: ARRAY
3937: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3938: LD_ADDR_VAR 0 5
3942: PUSH
3943: LD_EXP 39
3947: PUSH
3948: LD_VAR 0 3
3952: ARRAY
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3958: LD_VAR 0 4
3962: PPUSH
3963: LD_VAR 0 5
3967: PPUSH
3968: LD_INT 12
3970: PPUSH
3971: LD_INT 2
3973: PPUSH
3974: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3978: LD_ADDR_EXP 44
3982: PUSH
3983: LD_EXP 44
3987: PUSH
3988: LD_VAR 0 1
3992: PPUSH
3993: LD_VAR 0 4
3997: PPUSH
3998: LD_VAR 0 5
4002: PPUSH
4003: LD_INT 1
4005: PUSH
4006: LD_INT 100
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 50
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 3
4025: PUSH
4026: LD_INT 20
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: LD_INT 20
4035: PUSH
4036: LD_INT 100
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: PPUSH
4049: CALL_OW 418
4053: ADD
4054: ST_TO_ADDR
// end ; commander := true ;
4055: LD_ADDR_LOC 1
4059: PUSH
4060: LD_INT 1
4062: ST_TO_ADDR
// soldiers_created := 0 ;
4063: LD_ADDR_LOC 4
4067: PUSH
4068: LD_INT 0
4070: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4071: LD_ADDR_VAR 0 7
4075: PUSH
4076: DOUBLE
4077: LD_INT 1
4079: DEC
4080: ST_TO_ADDR
4081: LD_EXP 18
4085: PUSH
4086: FOR_TO
4087: IFFALSE 4240
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4089: LD_ADDR_VAR 0 4
4093: PUSH
4094: LD_EXP 38
4098: PUSH
4099: LD_VAR 0 3
4103: ARRAY
4104: PUSH
4105: LD_VAR 0 7
4109: ARRAY
4110: PUSH
4111: LD_INT 1
4113: ARRAY
4114: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4115: LD_ADDR_VAR 0 5
4119: PUSH
4120: LD_EXP 38
4124: PUSH
4125: LD_VAR 0 3
4129: ARRAY
4130: PUSH
4131: LD_VAR 0 7
4135: ARRAY
4136: PUSH
4137: LD_INT 2
4139: ARRAY
4140: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4141: LD_ADDR_VAR 0 6
4145: PUSH
4146: LD_EXP 38
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_VAR 0 7
4161: ARRAY
4162: PUSH
4163: LD_INT 3
4165: ARRAY
4166: ST_TO_ADDR
// bc_type := b_breastwork ;
4167: LD_ADDR_OWVAR 42
4171: PUSH
4172: LD_INT 31
4174: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4175: LD_ADDR_VAR 0 9
4179: PUSH
4180: LD_VAR 0 4
4184: PPUSH
4185: LD_VAR 0 5
4189: PPUSH
4190: LD_VAR 0 6
4194: PPUSH
4195: CALL_OW 47
4199: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4200: LD_INT 1
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: LD_INT 0
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: LD_VAR 0 9
4219: PPUSH
4220: CALL 2866 0 6
// soldiers_created := soldiers_created + 1 ;
4224: LD_ADDR_LOC 4
4228: PUSH
4229: LD_LOC 4
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: ST_TO_ADDR
// end ;
4238: GO 4086
4240: POP
4241: POP
// x := start_def [ pos ] [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_EXP 39
4251: PUSH
4252: LD_VAR 0 3
4256: ARRAY
4257: PUSH
4258: LD_INT 1
4260: ARRAY
4261: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4262: LD_ADDR_VAR 0 5
4266: PUSH
4267: LD_EXP 39
4271: PUSH
4272: LD_VAR 0 3
4276: ARRAY
4277: PUSH
4278: LD_INT 2
4280: ARRAY
4281: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4282: LD_LOC 8
4286: PUSH
4287: LD_EXP 18
4291: MINUS
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 4
4300: PPUSH
4301: LD_VAR 0 5
4305: PPUSH
4306: LD_INT 5
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL 2866 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4316: LD_LOC 5
4320: PPUSH
4321: LD_INT 2
4323: PPUSH
4324: LD_VAR 0 4
4328: PPUSH
4329: LD_VAR 0 5
4333: PPUSH
4334: LD_INT 5
4336: PPUSH
4337: LD_INT 0
4339: PPUSH
4340: CALL 2866 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4344: LD_LOC 7
4348: PPUSH
4349: LD_INT 3
4351: PPUSH
4352: LD_VAR 0 4
4356: PPUSH
4357: LD_VAR 0 5
4361: PPUSH
4362: LD_INT 5
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL 2866 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4372: LD_LOC 6
4376: PPUSH
4377: LD_INT 4
4379: PPUSH
4380: LD_VAR 0 4
4384: PPUSH
4385: LD_VAR 0 5
4389: PPUSH
4390: LD_INT 5
4392: PPUSH
4393: LD_INT 0
4395: PPUSH
4396: CALL 2866 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4400: LD_EXP 10
4404: PUSH
4405: LD_INT 20
4407: PPUSH
4408: LD_VAR 0 1
4412: PPUSH
4413: CALL_OW 321
4417: PUSH
4418: LD_INT 1
4420: EQUAL
4421: AND
4422: IFFALSE 4439
// SetTech ( tech_SibDet , side , state_researched ) ;
4424: LD_INT 20
4426: PPUSH
4427: LD_VAR 0 1
4431: PPUSH
4432: LD_INT 2
4434: PPUSH
4435: CALL_OW 322
// if def_siberite_bomb = 1 then
4439: LD_EXP 13
4443: PUSH
4444: LD_INT 1
4446: EQUAL
4447: IFFALSE 4481
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4449: LD_INT 25
4451: PPUSH
4452: LD_VAR 0 1
4456: PPUSH
4457: LD_INT 1
4459: PPUSH
4460: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4464: LD_INT 73
4466: PPUSH
4467: LD_VAR 0 1
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL_OW 322
// end else
4479: GO 4511
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4481: LD_INT 25
4483: PPUSH
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4496: LD_INT 73
4498: PPUSH
4499: LD_VAR 0 1
4503: PPUSH
4504: LD_INT 0
4506: PPUSH
4507: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4511: LD_INT 24
4513: PPUSH
4514: LD_VAR 0 1
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: CALL_OW 322
// global_defined := true ;
4526: LD_ADDR_LOC 3
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// end ;
4534: LD_VAR 0 2
4538: RET
// function prepare_sides ; var i ; begin
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
// global_units := [ ] ;
4543: LD_ADDR_LOC 2
4547: PUSH
4548: EMPTY
4549: ST_TO_ADDR
// global_defined := false ;
4550: LD_ADDR_LOC 3
4554: PUSH
4555: LD_INT 0
4557: ST_TO_ADDR
// CountClassMembers ;
4558: CALL 4608 0 0
// for i := 1 to 8 do
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: DOUBLE
4568: LD_INT 1
4570: DEC
4571: ST_TO_ADDR
4572: LD_INT 8
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4601
// if Side_Positions [ i ] then
4578: LD_EXP 34
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: IFFALSE 4599
// prepare_side ( i ) ;
4590: LD_VAR 0 2
4594: PPUSH
4595: CALL 3454 0 1
4599: GO 4575
4601: POP
4602: POP
// end ;
4603: LD_VAR 0 1
4607: RET
// function CountClassMembers ; var Mode ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
// if No_Mechs then
4612: LD_EXP 15
4616: IFFALSE 4628
// Mode := 2 else
4618: LD_ADDR_VAR 0 2
4622: PUSH
4623: LD_INT 2
4625: ST_TO_ADDR
4626: GO 4636
// Mode := 1 ;
4628: LD_ADDR_VAR 0 2
4632: PUSH
4633: LD_INT 1
4635: ST_TO_ADDR
// neng := number_of_people ;
4636: LD_ADDR_LOC 5
4640: PUSH
4641: LD_EXP 19
4645: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4646: LD_ADDR_LOC 8
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 4
4658: PUSH
4659: LD_INT 3
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4673: LD_LOC 8
4677: PUSH
4678: LD_EXP 18
4682: LESS
4683: IFFALSE 4695
// nsol := number_of_breastworks ;
4685: LD_ADDR_LOC 8
4689: PUSH
4690: LD_EXP 18
4694: ST_TO_ADDR
// neng := neng - nsol ;
4695: LD_ADDR_LOC 5
4699: PUSH
4700: LD_LOC 5
4704: PUSH
4705: LD_LOC 8
4709: MINUS
4710: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4711: LD_ADDR_LOC 6
4715: PUSH
4716: LD_LOC 5
4720: PUSH
4721: LD_INT 3
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_VAR 0 2
4735: ARRAY
4736: DIV
4737: ST_TO_ADDR
// if ( nsci < 1 ) then
4738: LD_LOC 6
4742: PUSH
4743: LD_INT 1
4745: LESS
4746: IFFALSE 4756
// nsci := 1 ;
4748: LD_ADDR_LOC 6
4752: PUSH
4753: LD_INT 1
4755: ST_TO_ADDR
// neng := neng - nsci ;
4756: LD_ADDR_LOC 5
4760: PUSH
4761: LD_LOC 5
4765: PUSH
4766: LD_LOC 6
4770: MINUS
4771: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4772: LD_ADDR_LOC 7
4776: PUSH
4777: LD_LOC 5
4781: PUSH
4782: LD_INT 2
4784: DIV
4785: PUSH
4786: LD_INT 0
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_VAR 0 2
4797: ARRAY
4798: ST_TO_ADDR
// neng := neng - nmech ;
4799: LD_ADDR_LOC 5
4803: PUSH
4804: LD_LOC 5
4808: PUSH
4809: LD_LOC 7
4813: MINUS
4814: ST_TO_ADDR
// if ( neng < 1 ) then
4815: LD_LOC 5
4819: PUSH
4820: LD_INT 1
4822: LESS
4823: IFFALSE 4833
// neng := 1 ;
4825: LD_ADDR_LOC 5
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// end ;
4833: LD_VAR 0 1
4837: RET
// starting begin disable ( 98 ) ;
4838: LD_INT 98
4840: DISABLE_MARKED
// disable ( 99 ) ;
4841: LD_INT 99
4843: DISABLE_MARKED
// disable ( 400 ) ;
4844: LD_INT 400
4846: DISABLE_MARKED
// disable ( 401 ) ;
4847: LD_INT 401
4849: DISABLE_MARKED
// mp_selectmsg := true ;
4850: LD_ADDR_OWVAR 13
4854: PUSH
4855: LD_INT 1
4857: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4858: CALL 68 0 0
// init_map ;
4862: CALL 1251 0 0
// init_respawning ;
4866: CALL 5603 0 0
// set_shared_visions_and_alliances ;
4870: CALL 2578 0 0
// ResetFog ;
4874: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4878: LD_OWVAR 2
4882: PPUSH
4883: CALL_OW 520
// prepare_sides ;
4887: CALL 4539 0 0
// Init_Win_Condition ;
4891: CALL 8890 0 0
// ShowTimer ;
4895: CALL 7870 0 0
// music_nat := Side_Nations [ your_side ] ;
4899: LD_ADDR_OWVAR 71
4903: PUSH
4904: LD_EXP 35
4908: PUSH
4909: LD_OWVAR 2
4913: ARRAY
4914: ST_TO_ADDR
// if IAmSpec then
4915: CALL_OW 531
4919: IFFALSE 4943
// begin fogoff ( true ) ;
4921: LD_INT 1
4923: PPUSH
4924: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4928: LD_INT 130
4930: PPUSH
4931: LD_INT 100
4933: PPUSH
4934: CALL_OW 86
// enable ( 400 ) ;
4938: LD_INT 400
4940: ENABLE_MARKED
// end else
4941: GO 4989
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4943: LD_EXP 39
4947: PUSH
4948: LD_EXP 34
4952: PUSH
4953: LD_OWVAR 2
4957: ARRAY
4958: ARRAY
4959: PUSH
4960: LD_INT 1
4962: ARRAY
4963: PPUSH
4964: LD_EXP 39
4968: PUSH
4969: LD_EXP 34
4973: PUSH
4974: LD_OWVAR 2
4978: ARRAY
4979: ARRAY
4980: PUSH
4981: LD_INT 2
4983: ARRAY
4984: PPUSH
4985: CALL_OW 86
// end ; InitApeman ;
4989: CALL 6388 0 0
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
4993: LD_ADDR_EXP 55
4997: PUSH
4998: LD_INT 9
5000: PUSH
5001: LD_INT 10
5003: PUSH
5004: LD_INT 11
5006: PUSH
5007: LD_INT 12
5009: PUSH
5010: LD_INT 13
5012: PUSH
5013: LD_INT 14
5015: PUSH
5016: LD_INT 15
5018: PUSH
5019: LD_INT 16
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: ST_TO_ADDR
// BeginBuildUp ;
5032: CALL 8053 0 0
// end ;
5036: END
// every 0 0$1 do
5037: GO 5039
5039: DISABLE
// if ( def_siberite_bomb > 1 ) then
5040: LD_EXP 13
5044: PUSH
5045: LD_INT 1
5047: GREATER
5048: IFFALSE 5063
// begin wait ( siberite_bomb_Delay ) ;
5050: LD_EXP 29
5054: PPUSH
5055: CALL_OW 67
// EnableSibFiss ;
5059: CALL 5064 0 0
// end ;
5063: END
// function EnableSibFiss ; var i ; begin
5064: LD_INT 0
5066: PPUSH
5067: PPUSH
// for i := 1 to 8 do
5068: LD_ADDR_VAR 0 2
5072: PUSH
5073: DOUBLE
5074: LD_INT 1
5076: DEC
5077: ST_TO_ADDR
5078: LD_INT 8
5080: PUSH
5081: FOR_TO
5082: IFFALSE 5128
// if Side_Positions [ i ] then
5084: LD_EXP 34
5088: PUSH
5089: LD_VAR 0 2
5093: ARRAY
5094: IFFALSE 5126
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5096: LD_INT 25
5098: PPUSH
5099: LD_VAR 0 2
5103: PPUSH
5104: LD_INT 1
5106: PPUSH
5107: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5111: LD_INT 73
5113: PPUSH
5114: LD_VAR 0 2
5118: PPUSH
5119: LD_INT 1
5121: PPUSH
5122: CALL_OW 322
// end ;
5126: GO 5081
5128: POP
5129: POP
// end ; end_of_file
5130: LD_VAR 0 1
5134: RET
// every 1 1$0 + 0 0$0.3 do
5135: GO 5137
5137: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5138: LD_INT 4
5140: PPUSH
5141: LD_INT 5
5143: PPUSH
5144: CALL_OW 12
5148: PPUSH
5149: LD_INT 1
5151: PPUSH
5152: CALL_OW 57
// enable ;
5156: ENABLE
// end ;
5157: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5158: GO 5160
5160: DISABLE
5161: LD_INT 0
5163: PPUSH
5164: PPUSH
// begin case tick of 1 .. 1 1$0 :
5165: LD_OWVAR 1
5169: PUSH
5170: LD_INT 1
5172: DOUBLE
5173: GREATEREQUAL
5174: IFFALSE 5182
5176: LD_INT 2100
5178: DOUBLE
5179: LESSEQUAL
5180: IFTRUE 5184
5182: GO 5212
5184: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5185: LD_EXP 23
5189: PUSH
5190: LD_INT 100
5192: DIVREAL
5193: PUSH
5194: LD_INT 350
5196: PPUSH
5197: LD_INT 700
5199: PPUSH
5200: CALL_OW 12
5204: MUL
5205: PPUSH
5206: CALL_OW 67
5210: GO 5514
5212: LD_INT 2100
5214: PUSH
5215: LD_INT 1
5217: PLUS
5218: DOUBLE
5219: GREATEREQUAL
5220: IFFALSE 5228
5222: LD_INT 10500
5224: DOUBLE
5225: LESSEQUAL
5226: IFTRUE 5230
5228: GO 5258
5230: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5231: LD_EXP 23
5235: PUSH
5236: LD_INT 100
5238: DIVREAL
5239: PUSH
5240: LD_INT 700
5242: PPUSH
5243: LD_INT 1225
5245: PPUSH
5246: CALL_OW 12
5250: MUL
5251: PPUSH
5252: CALL_OW 67
5256: GO 5514
5258: LD_INT 10500
5260: PUSH
5261: LD_INT 1
5263: PLUS
5264: DOUBLE
5265: GREATEREQUAL
5266: IFFALSE 5274
5268: LD_INT 21000
5270: DOUBLE
5271: LESSEQUAL
5272: IFTRUE 5276
5274: GO 5304
5276: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5277: LD_EXP 23
5281: PUSH
5282: LD_INT 100
5284: DIVREAL
5285: PUSH
5286: LD_INT 1225
5288: PPUSH
5289: LD_INT 1750
5291: PPUSH
5292: CALL_OW 12
5296: MUL
5297: PPUSH
5298: CALL_OW 67
5302: GO 5514
5304: LD_INT 21000
5306: PUSH
5307: LD_INT 1
5309: PLUS
5310: DOUBLE
5311: GREATEREQUAL
5312: IFFALSE 5320
5314: LD_INT 42000
5316: DOUBLE
5317: LESSEQUAL
5318: IFTRUE 5322
5320: GO 5350
5322: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5323: LD_EXP 23
5327: PUSH
5328: LD_INT 100
5330: DIVREAL
5331: PUSH
5332: LD_INT 1750
5334: PPUSH
5335: LD_INT 2450
5337: PPUSH
5338: CALL_OW 12
5342: MUL
5343: PPUSH
5344: CALL_OW 67
5348: GO 5514
5350: LD_INT 42000
5352: PUSH
5353: LD_INT 1
5355: PLUS
5356: DOUBLE
5357: GREATEREQUAL
5358: IFFALSE 5366
5360: LD_INT 63000
5362: DOUBLE
5363: LESSEQUAL
5364: IFTRUE 5368
5366: GO 5396
5368: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5369: LD_EXP 23
5373: PUSH
5374: LD_INT 100
5376: DIVREAL
5377: PUSH
5378: LD_INT 2450
5380: PPUSH
5381: LD_INT 2800
5383: PPUSH
5384: CALL_OW 12
5388: MUL
5389: PPUSH
5390: CALL_OW 67
5394: GO 5514
5396: LD_INT 63000
5398: PUSH
5399: LD_INT 1
5401: PLUS
5402: DOUBLE
5403: GREATEREQUAL
5404: IFFALSE 5412
5406: LD_INT 105000
5408: DOUBLE
5409: LESSEQUAL
5410: IFTRUE 5414
5412: GO 5442
5414: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5415: LD_EXP 23
5419: PUSH
5420: LD_INT 100
5422: DIVREAL
5423: PUSH
5424: LD_INT 2800
5426: PPUSH
5427: LD_INT 3325
5429: PPUSH
5430: CALL_OW 12
5434: MUL
5435: PPUSH
5436: CALL_OW 67
5440: GO 5514
5442: LD_INT 105000
5444: PUSH
5445: LD_INT 1
5447: PLUS
5448: DOUBLE
5449: GREATEREQUAL
5450: IFFALSE 5458
5452: LD_INT 630000
5454: DOUBLE
5455: LESSEQUAL
5456: IFTRUE 5460
5458: GO 5488
5460: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
5461: LD_EXP 23
5465: PUSH
5466: LD_INT 100
5468: DIVREAL
5469: PUSH
5470: LD_INT 3325
5472: PPUSH
5473: LD_INT 4200
5475: PPUSH
5476: CALL_OW 12
5480: MUL
5481: PPUSH
5482: CALL_OW 67
5486: GO 5514
5488: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5489: LD_EXP 23
5493: PUSH
5494: LD_INT 100
5496: DIVREAL
5497: PUSH
5498: LD_INT 4200
5500: PPUSH
5501: LD_INT 5250
5503: PPUSH
5504: CALL_OW 12
5508: MUL
5509: PPUSH
5510: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5514: LD_ADDR_VAR 0 2
5518: PUSH
5519: LD_INT 3
5521: PPUSH
5522: LD_INT 5
5524: PPUSH
5525: CALL_OW 12
5529: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5530: LD_ADDR_VAR 0 1
5534: PUSH
5535: LD_EXP 34
5539: PUSH
5540: LD_INT 0
5542: PUSH
5543: EMPTY
5544: LIST
5545: DIFF
5546: PUSH
5547: FOR_IN
5548: IFFALSE 5597
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5550: LD_VAR 0 2
5554: PPUSH
5555: LD_EXP 39
5559: PUSH
5560: LD_VAR 0 1
5564: ARRAY
5565: PUSH
5566: LD_INT 1
5568: ARRAY
5569: PPUSH
5570: LD_EXP 39
5574: PUSH
5575: LD_VAR 0 1
5579: ARRAY
5580: PUSH
5581: LD_INT 2
5583: ARRAY
5584: PPUSH
5585: LD_INT 20
5587: PPUSH
5588: LD_INT 1
5590: PPUSH
5591: CALL_OW 56
5595: GO 5547
5597: POP
5598: POP
// enable ;
5599: ENABLE
// end ; end_of_file
5600: PPOPN 2
5602: END
// var respawn , inqueue ; export function init_respawning ; begin
5603: LD_INT 0
5605: PPUSH
// respawn := Rand ( 1 , 8 ) ;
5606: LD_ADDR_LOC 9
5610: PUSH
5611: LD_INT 1
5613: PPUSH
5614: LD_INT 8
5616: PPUSH
5617: CALL_OW 12
5621: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5622: LD_ADDR_LOC 10
5626: PUSH
5627: LD_INT 0
5629: PUSH
5630: LD_INT 0
5632: PUSH
5633: LD_INT 0
5635: PUSH
5636: LD_INT 0
5638: PUSH
5639: LD_INT 0
5641: PUSH
5642: LD_INT 0
5644: PUSH
5645: LD_INT 0
5647: PUSH
5648: LD_INT 0
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: ST_TO_ADDR
// end ;
5661: LD_VAR 0 1
5665: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5666: GO 5668
5668: DISABLE
5669: LD_INT 0
5671: PPUSH
5672: PPUSH
5673: PPUSH
5674: PPUSH
// begin if respawning_time_max = 0 then
5675: LD_EXP 28
5679: PUSH
5680: LD_INT 0
5682: EQUAL
5683: IFFALSE 5687
// exit ;
5685: GO 6194
// if respawn = 8 then
5687: LD_LOC 9
5691: PUSH
5692: LD_INT 8
5694: EQUAL
5695: IFFALSE 5707
// respawn := 1 else
5697: LD_ADDR_LOC 9
5701: PUSH
5702: LD_INT 1
5704: ST_TO_ADDR
5705: GO 5721
// respawn := respawn + 1 ;
5707: LD_ADDR_LOC 9
5711: PUSH
5712: LD_LOC 9
5716: PUSH
5717: LD_INT 1
5719: PLUS
5720: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5721: LD_EXP 34
5725: PUSH
5726: LD_LOC 9
5730: ARRAY
5731: PUSH
5732: LD_LOC 10
5736: PUSH
5737: LD_LOC 9
5741: ARRAY
5742: NOT
5743: AND
5744: IFFALSE 6193
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: LD_INT 21
5753: PUSH
5754: LD_INT 1
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: LD_INT 22
5763: PUSH
5764: LD_LOC 9
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 3
5775: PUSH
5776: LD_INT 23
5778: PUSH
5779: LD_INT 0
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: PPUSH
5792: CALL_OW 69
5796: ST_TO_ADDR
// if n < number_of_people then
5797: LD_VAR 0 1
5801: PUSH
5802: LD_EXP 19
5806: LESS
5807: IFFALSE 6190
// begin aktresp := respawn ;
5809: LD_ADDR_VAR 0 3
5813: PUSH
5814: LD_LOC 9
5818: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5819: LD_ADDR_LOC 10
5823: PUSH
5824: LD_LOC 10
5828: PPUSH
5829: LD_VAR 0 3
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 1
5841: ST_TO_ADDR
// enable ;
5842: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5843: LD_EXP 27
5847: PPUSH
5848: LD_EXP 28
5852: PPUSH
5853: CALL_OW 12
5857: PPUSH
5858: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5862: LD_ADDR_LOC 10
5866: PUSH
5867: LD_LOC 10
5871: PPUSH
5872: LD_VAR 0 3
5876: PPUSH
5877: LD_INT 0
5879: PPUSH
5880: CALL_OW 1
5884: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5885: LD_ADDR_VAR 0 2
5889: PUSH
5890: LD_INT 21
5892: PUSH
5893: LD_INT 3
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 2
5902: PUSH
5903: LD_INT 30
5905: PUSH
5906: LD_INT 0
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: PUSH
5913: LD_INT 30
5915: PUSH
5916: LD_INT 1
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: LIST
5927: PUSH
5928: LD_INT 50
5930: PUSH
5931: EMPTY
5932: LIST
5933: PUSH
5934: LD_INT 22
5936: PUSH
5937: LD_VAR 0 3
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: PPUSH
5952: CALL_OW 69
5956: ST_TO_ADDR
// if building_list = 0 then
5957: LD_VAR 0 2
5961: PUSH
5962: LD_INT 0
5964: EQUAL
5965: IFFALSE 6010
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: LD_INT 21
5974: PUSH
5975: LD_INT 3
5977: PUSH
5978: EMPTY
5979: LIST
5980: LIST
5981: PUSH
5982: LD_INT 50
5984: PUSH
5985: EMPTY
5986: LIST
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_VAR 0 3
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: LIST
6004: PPUSH
6005: CALL_OW 69
6009: ST_TO_ADDR
// if building_list = 0 then
6010: LD_VAR 0 2
6014: PUSH
6015: LD_INT 0
6017: EQUAL
6018: IFFALSE 6022
// exit ;
6020: GO 6194
// hc_name :=  ;
6022: LD_ADDR_OWVAR 26
6026: PUSH
6027: LD_STRING 
6029: ST_TO_ADDR
// hc_importance := 0 ;
6030: LD_ADDR_OWVAR 32
6034: PUSH
6035: LD_INT 0
6037: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6038: LD_INT 0
6040: PPUSH
6041: LD_INT 0
6043: PPUSH
6044: LD_EXP 20
6048: PUSH
6049: LD_INT 2
6051: DIV
6052: PPUSH
6053: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6057: LD_ADDR_OWVAR 21
6061: PUSH
6062: LD_EXP 35
6066: PUSH
6067: LD_VAR 0 3
6071: ARRAY
6072: ST_TO_ADDR
// uc_side := aktresp ;
6073: LD_ADDR_OWVAR 20
6077: PUSH
6078: LD_VAR 0 3
6082: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6083: LD_ADDR_VAR 0 4
6087: PUSH
6088: LD_VAR 0 2
6092: PUSH
6093: LD_INT 1
6095: PPUSH
6096: LD_VAR 0 2
6100: PUSH
6101: LD_INT 0
6103: PLUS
6104: PPUSH
6105: CALL_OW 12
6109: ARRAY
6110: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6111: LD_VAR 0 4
6115: PPUSH
6116: CALL_OW 266
6120: PUSH
6121: LD_INT 0
6123: PUSH
6124: LD_INT 1
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: IN
6131: IFFALSE 6143
// n = 25 else
6133: LD_ADDR_VAR 0 1
6137: PUSH
6138: LD_INT 25
6140: ST_TO_ADDR
6141: GO 6151
// n = 10 ;
6143: LD_ADDR_VAR 0 1
6147: PUSH
6148: LD_INT 10
6150: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6151: CALL_OW 44
6155: PPUSH
6156: LD_VAR 0 4
6160: PPUSH
6161: CALL_OW 250
6165: PPUSH
6166: LD_VAR 0 4
6170: PPUSH
6171: CALL_OW 251
6175: PPUSH
6176: LD_VAR 0 1
6180: PPUSH
6181: LD_INT 1
6183: PPUSH
6184: CALL_OW 50
// end else
6188: GO 6191
// enable ;
6190: ENABLE
// end else
6191: GO 6194
// enable ;
6193: ENABLE
// end ; end_of_file
6194: PPOPN 4
6196: END
// every 20 20$00 trigger apemanNumber do
6197: LD_EXP 46
6201: IFFALSE 6234
6203: GO 6205
6205: DISABLE
// begin enable ;
6206: ENABLE
// if apeLevel >= 8 then
6207: LD_EXP 51
6211: PUSH
6212: LD_INT 8
6214: GREATEREQUAL
6215: IFFALSE 6220
// disable else
6217: DISABLE
6218: GO 6234
// apeLevel := apeLevel + 1 ;
6220: LD_ADDR_EXP 51
6224: PUSH
6225: LD_EXP 51
6229: PUSH
6230: LD_INT 1
6232: PLUS
6233: ST_TO_ADDR
// end ;
6234: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6235: LD_EXP 46
6239: PUSH
6240: LD_EXP 47
6244: LESS
6245: IFFALSE 6385
6247: GO 6249
6249: DISABLE
6250: LD_INT 0
6252: PPUSH
6253: PPUSH
6254: PPUSH
6255: PPUSH
// begin enable ;
6256: ENABLE
// for i := 1 to apemanPos do
6257: LD_ADDR_VAR 0 1
6261: PUSH
6262: DOUBLE
6263: LD_INT 1
6265: DEC
6266: ST_TO_ADDR
6267: LD_EXP 49
6271: PUSH
6272: FOR_TO
6273: IFFALSE 6383
// begin if apemanPlayerCount [ i ] then
6275: LD_EXP 50
6279: PUSH
6280: LD_VAR 0 1
6284: ARRAY
6285: IFFALSE 6381
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6287: LD_EXP 50
6291: PUSH
6292: LD_VAR 0 1
6296: ARRAY
6297: PUSH
6298: LD_EXP 49
6302: PUSH
6303: LD_VAR 0 1
6307: ARRAY
6308: GREATER
6309: IFFALSE 6381
// begin ape := PrepareApeman ;
6311: LD_ADDR_VAR 0 2
6315: PUSH
6316: CALL 6904 0 0
6320: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6321: LD_VAR 0 2
6325: PPUSH
6326: LD_EXP 52
6330: PUSH
6331: LD_VAR 0 1
6335: ARRAY
6336: PPUSH
6337: LD_INT 0
6339: PPUSH
6340: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6344: LD_ADDR_EXP 49
6348: PUSH
6349: LD_EXP 49
6353: PPUSH
6354: LD_VAR 0 1
6358: PPUSH
6359: LD_EXP 49
6363: PUSH
6364: LD_VAR 0 1
6368: ARRAY
6369: PUSH
6370: LD_VAR 0 2
6374: UNION
6375: PPUSH
6376: CALL_OW 1
6380: ST_TO_ADDR
// end ; end ; end ;
6381: GO 6272
6383: POP
6384: POP
// end ;
6385: PPOPN 4
6387: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
6392: PPUSH
6393: PPUSH
6394: PPUSH
6395: PPUSH
6396: PPUSH
// playersAmount := 0 ;
6397: LD_ADDR_VAR 0 3
6401: PUSH
6402: LD_INT 0
6404: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6405: LD_ADDR_VAR 0 7
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 3
6418: PUSH
6419: LD_INT 4
6421: PUSH
6422: LD_INT 5
6424: PUSH
6425: LD_INT 6
6427: PUSH
6428: LD_INT 7
6430: PUSH
6431: LD_INT 8
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6444: LD_ADDR_EXP 52
6448: PUSH
6449: LD_INT 0
6451: PUSH
6452: LD_INT 0
6454: PUSH
6455: LD_INT 0
6457: PUSH
6458: LD_INT 0
6460: PUSH
6461: LD_INT 0
6463: PUSH
6464: LD_INT 0
6466: PUSH
6467: LD_INT 0
6469: PUSH
6470: LD_INT 0
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: ST_TO_ADDR
// for j = 1 to Side_Positions do
6483: LD_ADDR_VAR 0 4
6487: PUSH
6488: DOUBLE
6489: LD_INT 1
6491: DEC
6492: ST_TO_ADDR
6493: LD_EXP 34
6497: PUSH
6498: FOR_TO
6499: IFFALSE 6566
// if Side_Positions [ j ] then
6501: LD_EXP 34
6505: PUSH
6506: LD_VAR 0 4
6510: ARRAY
6511: IFFALSE 6564
// begin playersAmount := playersAmount + 1 ;
6513: LD_ADDR_VAR 0 3
6517: PUSH
6518: LD_VAR 0 3
6522: PUSH
6523: LD_INT 1
6525: PLUS
6526: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6527: LD_ADDR_EXP 52
6531: PUSH
6532: LD_EXP 52
6536: PPUSH
6537: LD_VAR 0 4
6541: PPUSH
6542: LD_VAR 0 7
6546: PUSH
6547: LD_EXP 34
6551: PUSH
6552: LD_VAR 0 4
6556: ARRAY
6557: ARRAY
6558: PPUSH
6559: CALL_OW 1
6563: ST_TO_ADDR
// end ;
6564: GO 6498
6566: POP
6567: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6568: LD_ADDR_EXP 48
6572: PUSH
6573: LD_INT 3
6575: PUSH
6576: LD_EXP 25
6580: MUL
6581: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6582: LD_ADDR_EXP 46
6586: PUSH
6587: LD_VAR 0 3
6591: PUSH
6592: LD_EXP 48
6596: MUL
6597: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6598: LD_ADDR_EXP 47
6602: PUSH
6603: LD_EXP 46
6607: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6608: LD_ADDR_EXP 49
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: LD_INT 0
6618: PUSH
6619: LD_INT 0
6621: PUSH
6622: LD_INT 0
6624: PUSH
6625: LD_INT 0
6627: PUSH
6628: LD_INT 0
6630: PUSH
6631: LD_INT 0
6633: PUSH
6634: LD_INT 0
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6647: LD_ADDR_EXP 50
6651: PUSH
6652: LD_INT 0
6654: PUSH
6655: LD_INT 0
6657: PUSH
6658: LD_INT 0
6660: PUSH
6661: LD_INT 0
6663: PUSH
6664: LD_INT 0
6666: PUSH
6667: LD_INT 0
6669: PUSH
6670: LD_INT 0
6672: PUSH
6673: LD_INT 0
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: ST_TO_ADDR
// apeLevel := 1 ;
6686: LD_ADDR_EXP 51
6690: PUSH
6691: LD_INT 1
6693: ST_TO_ADDR
// if not apemanNumber then
6694: LD_EXP 46
6698: NOT
6699: IFFALSE 6703
// exit ;
6701: GO 6899
// for i := 1 to apemanPerPlayer do
6703: LD_ADDR_VAR 0 2
6707: PUSH
6708: DOUBLE
6709: LD_INT 1
6711: DEC
6712: ST_TO_ADDR
6713: LD_EXP 48
6717: PUSH
6718: FOR_TO
6719: IFFALSE 6897
// begin for j := 1 to Side_Positions do
6721: LD_ADDR_VAR 0 4
6725: PUSH
6726: DOUBLE
6727: LD_INT 1
6729: DEC
6730: ST_TO_ADDR
6731: LD_EXP 34
6735: PUSH
6736: FOR_TO
6737: IFFALSE 6893
// if Side_Positions [ j ] then
6739: LD_EXP 34
6743: PUSH
6744: LD_VAR 0 4
6748: ARRAY
6749: IFFALSE 6891
// begin pos := Side_Positions [ j ] ;
6751: LD_ADDR_VAR 0 6
6755: PUSH
6756: LD_EXP 34
6760: PUSH
6761: LD_VAR 0 4
6765: ARRAY
6766: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6767: LD_ADDR_EXP 50
6771: PUSH
6772: LD_EXP 50
6776: PPUSH
6777: LD_VAR 0 4
6781: PPUSH
6782: LD_EXP 50
6786: PUSH
6787: LD_VAR 0 4
6791: ARRAY
6792: PUSH
6793: LD_INT 1
6795: PLUS
6796: PPUSH
6797: CALL_OW 1
6801: ST_TO_ADDR
// ape := PrepareApeman ;
6802: LD_ADDR_VAR 0 5
6806: PUSH
6807: CALL 6904 0 0
6811: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6812: LD_ADDR_EXP 49
6816: PUSH
6817: LD_EXP 49
6821: PPUSH
6822: LD_VAR 0 4
6826: PPUSH
6827: LD_EXP 49
6831: PUSH
6832: LD_VAR 0 4
6836: ARRAY
6837: PPUSH
6838: LD_EXP 49
6842: PUSH
6843: LD_VAR 0 4
6847: ARRAY
6848: PUSH
6849: LD_INT 1
6851: PLUS
6852: PPUSH
6853: LD_VAR 0 5
6857: PPUSH
6858: CALL_OW 1
6862: PPUSH
6863: CALL_OW 1
6867: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6868: LD_VAR 0 5
6872: PPUSH
6873: LD_EXP 52
6877: PUSH
6878: LD_VAR 0 4
6882: ARRAY
6883: PPUSH
6884: LD_INT 0
6886: PPUSH
6887: CALL_OW 49
// end ;
6891: GO 6736
6893: POP
6894: POP
// end ;
6895: GO 6718
6897: POP
6898: POP
// end ;
6899: LD_VAR 0 1
6903: RET
// export function PrepareApeman ; var bonus ; begin
6904: LD_INT 0
6906: PPUSH
6907: PPUSH
// uc_side := 0 ;
6908: LD_ADDR_OWVAR 20
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// uc_nation := 0 ;
6916: LD_ADDR_OWVAR 21
6920: PUSH
6921: LD_INT 0
6923: ST_TO_ADDR
// InitHc ;
6924: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_INT 1
6935: NEG
6936: PUSH
6937: LD_INT 0
6939: PUSH
6940: LD_INT 1
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: LIST
6947: PUSH
6948: LD_OWVAR 1
6952: PUSH
6953: LD_INT 3
6955: MOD
6956: PUSH
6957: LD_INT 1
6959: PLUS
6960: ARRAY
6961: ST_TO_ADDR
// hc_class := class_apeman ;
6962: LD_ADDR_OWVAR 28
6966: PUSH
6967: LD_INT 12
6969: ST_TO_ADDR
// hc_gallery :=  ;
6970: LD_ADDR_OWVAR 33
6974: PUSH
6975: LD_STRING 
6977: ST_TO_ADDR
// hc_name :=  ;
6978: LD_ADDR_OWVAR 26
6982: PUSH
6983: LD_STRING 
6985: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6986: LD_ADDR_OWVAR 31
6990: PUSH
6991: LD_EXP 51
6995: PUSH
6996: LD_VAR 0 2
7000: PLUS
7001: PUSH
7002: LD_EXP 51
7006: PUSH
7007: LD_VAR 0 2
7011: PLUS
7012: PUSH
7013: LD_EXP 51
7017: PUSH
7018: LD_VAR 0 2
7022: PLUS
7023: PUSH
7024: LD_EXP 51
7028: PUSH
7029: LD_VAR 0 2
7033: PLUS
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7041: LD_ADDR_OWVAR 35
7045: PUSH
7046: LD_INT 10
7048: PUSH
7049: LD_VAR 0 2
7053: MUL
7054: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7055: LD_ADDR_OWVAR 29
7059: PUSH
7060: LD_INT 12
7062: PUSH
7063: LD_INT 10
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: ST_TO_ADDR
// result := CreateHuman ;
7070: LD_ADDR_VAR 0 1
7074: PUSH
7075: CALL_OW 44
7079: ST_TO_ADDR
// end ;
7080: LD_VAR 0 1
7084: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7085: LD_INT 0
7087: PPUSH
7088: PPUSH
7089: PPUSH
// if not ape then
7090: LD_VAR 0 1
7094: NOT
7095: IFFALSE 7099
// exit ;
7097: GO 7224
// side := GetSide ( ape ) ;
7099: LD_ADDR_VAR 0 3
7103: PUSH
7104: LD_VAR 0 1
7108: PPUSH
7109: CALL_OW 255
7113: ST_TO_ADDR
// if not side then
7114: LD_VAR 0 3
7118: NOT
7119: IFFALSE 7173
// begin for i = 1 to apemanPos do
7121: LD_ADDR_VAR 0 4
7125: PUSH
7126: DOUBLE
7127: LD_INT 1
7129: DEC
7130: ST_TO_ADDR
7131: LD_EXP 49
7135: PUSH
7136: FOR_TO
7137: IFFALSE 7171
// if ape in apemanPos [ i ] then
7139: LD_VAR 0 1
7143: PUSH
7144: LD_EXP 49
7148: PUSH
7149: LD_VAR 0 4
7153: ARRAY
7154: IN
7155: IFFALSE 7169
// begin side := i ;
7157: LD_ADDR_VAR 0 3
7161: PUSH
7162: LD_VAR 0 4
7166: ST_TO_ADDR
// break ;
7167: GO 7171
// end ;
7169: GO 7136
7171: POP
7172: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7173: LD_ADDR_EXP 49
7177: PUSH
7178: LD_EXP 49
7182: PPUSH
7183: LD_VAR 0 3
7187: PPUSH
7188: LD_EXP 49
7192: PUSH
7193: LD_VAR 0 3
7197: ARRAY
7198: PUSH
7199: LD_VAR 0 1
7203: DIFF
7204: PPUSH
7205: CALL_OW 1
7209: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7210: LD_ADDR_EXP 46
7214: PUSH
7215: LD_EXP 46
7219: PUSH
7220: LD_INT 1
7222: MINUS
7223: ST_TO_ADDR
// end ; end_of_file
7224: LD_VAR 0 2
7228: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7229: LD_VAR 0 1
7233: PPUSH
7234: CALL_OW 266
7238: PUSH
7239: LD_INT 0
7241: PUSH
7242: LD_INT 1
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: IN
7249: IFFALSE 7274
// SetBName ( b , @ & GetSide ( b ) ) ;
7251: LD_VAR 0 1
7255: PPUSH
7256: LD_STRING @
7258: PUSH
7259: LD_VAR 0 1
7263: PPUSH
7264: CALL_OW 255
7268: STR
7269: PPUSH
7270: CALL_OW 500
// end ;
7274: PPOPN 2
7276: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7277: LD_VAR 0 1
7281: PPUSH
7282: CALL_OW 266
7286: PUSH
7287: LD_INT 0
7289: PUSH
7290: LD_INT 1
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: IN
7297: IFFALSE 7322
// SetBName ( b , @ & GetSide ( b ) ) ;
7299: LD_VAR 0 1
7303: PPUSH
7304: LD_STRING @
7306: PUSH
7307: LD_VAR 0 1
7311: PPUSH
7312: CALL_OW 255
7316: STR
7317: PPUSH
7318: CALL_OW 500
// end ;
7322: PPOPN 3
7324: END
// on VehicleConstructed ( veh , fac ) do var side ;
7325: LD_INT 0
7327: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7328: LD_VAR 0 1
7332: PPUSH
7333: CALL_OW 263
7337: PUSH
7338: LD_INT 5
7340: EQUAL
7341: IFFALSE 7483
// begin side := GetSide ( veh ) ;
7343: LD_ADDR_VAR 0 3
7347: PUSH
7348: LD_VAR 0 1
7352: PPUSH
7353: CALL_OW 255
7357: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7358: LD_ADDR_EXP 49
7362: PUSH
7363: LD_EXP 49
7367: PPUSH
7368: LD_VAR 0 3
7372: PPUSH
7373: LD_EXP 49
7377: PUSH
7378: LD_VAR 0 3
7382: ARRAY
7383: PPUSH
7384: LD_INT 52
7386: PUSH
7387: EMPTY
7388: LIST
7389: PPUSH
7390: CALL_OW 72
7394: PUSH
7395: LD_INT 22
7397: PUSH
7398: LD_VAR 0 3
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: LD_INT 33
7412: PUSH
7413: LD_INT 5
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PUSH
7420: LD_INT 25
7422: PUSH
7423: LD_INT 12
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PUSH
7430: LD_INT 25
7432: PUSH
7433: LD_INT 15
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PUSH
7440: LD_INT 25
7442: PUSH
7443: LD_INT 16
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 25
7452: PUSH
7453: LD_INT 17
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PPUSH
7472: CALL_OW 69
7476: UNION
7477: PPUSH
7478: CALL_OW 1
7482: ST_TO_ADDR
// end ; end ;
7483: PPOPN 3
7485: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7486: LD_INT 0
7488: PPUSH
7489: PPUSH
7490: PPUSH
7491: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7492: LD_VAR 0 1
7496: PPUSH
7497: CALL_OW 257
7501: PUSH
7502: LD_INT 12
7504: PUSH
7505: LD_INT 15
7507: PUSH
7508: LD_INT 17
7510: PUSH
7511: LD_INT 16
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: IN
7520: PUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: CALL_OW 263
7530: PUSH
7531: LD_INT 5
7533: EQUAL
7534: OR
7535: IFFALSE 7546
// ApeKilled ( j ) ;
7537: LD_VAR 0 1
7541: PPUSH
7542: CALL 7085 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7546: LD_VAR 0 1
7550: PPUSH
7551: CALL_OW 266
7555: PUSH
7556: LD_INT 0
7558: PUSH
7559: LD_INT 1
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: IN
7566: IFFALSE 7648
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7568: LD_ADDR_VAR 0 4
7572: PUSH
7573: LD_EXP 34
7577: PUSH
7578: LD_VAR 0 1
7582: PPUSH
7583: CALL_OW 255
7587: ARRAY
7588: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7589: LD_ADDR_VAR 0 2
7593: PUSH
7594: LD_EXP 39
7598: PUSH
7599: LD_VAR 0 4
7603: ARRAY
7604: PUSH
7605: LD_INT 1
7607: ARRAY
7608: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7609: LD_ADDR_VAR 0 3
7613: PUSH
7614: LD_EXP 39
7618: PUSH
7619: LD_VAR 0 4
7623: ARRAY
7624: PUSH
7625: LD_INT 2
7627: ARRAY
7628: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7629: LD_VAR 0 2
7633: PPUSH
7634: LD_VAR 0 3
7638: PPUSH
7639: CALL_OW 420
7643: PPUSH
7644: CALL_OW 419
// end ; end ;
7648: PPOPN 5
7650: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7651: LD_VAR 0 1
7655: PPUSH
7656: LD_VAR 0 2
7660: PPUSH
7661: LD_VAR 0 3
7665: PPUSH
7666: LD_OWVAR 2
7670: PPUSH
7671: CALL 8651 0 4
7675: PPOPN 3
7677: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7678: LD_INT 0
7680: PPUSH
7681: PPUSH
// for un in battle_flags_id do
7682: LD_ADDR_VAR 0 2
7686: PUSH
7687: LD_EXP 44
7691: PUSH
7692: FOR_IN
7693: IFFALSE 7768
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7695: LD_VAR 0 2
7699: PPUSH
7700: LD_INT 1
7702: PUSH
7703: LD_LOC 11
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: LD_LOC 11
7719: PUSH
7720: LD_INT 2
7722: DIV
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: LD_LOC 11
7735: PUSH
7736: LD_INT 5
7738: DIV
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 20
7746: PUSH
7747: LD_LOC 11
7751: PUSH
7752: EMPTY
7753: LIST
7754: LIST
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: PPUSH
7762: CALL_OW 423
7766: GO 7692
7768: POP
7769: POP
// end ;
7770: LD_VAR 0 1
7774: RET
// every 1 do var un ;
7775: GO 7777
7777: DISABLE
7778: LD_INT 0
7780: PPUSH
// begin if not def_morale_flags then
7781: LD_EXP 9
7785: NOT
7786: IFFALSE 7790
// exit ;
7788: GO 7867
// if not morale_decreasing_time then
7790: LD_EXP 24
7794: NOT
7795: IFFALSE 7799
// exit ;
7797: GO 7867
// strength = 100 ;
7799: LD_ADDR_LOC 11
7803: PUSH
7804: LD_INT 100
7806: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7807: LD_EXP 24
7811: PPUSH
7812: CALL_OW 67
// strength := strength - 1 ;
7816: LD_ADDR_LOC 11
7820: PUSH
7821: LD_LOC 11
7825: PUSH
7826: LD_INT 1
7828: MINUS
7829: ST_TO_ADDR
// Update_Flags ;
7830: CALL 7678 0 0
// until not strength ;
7834: LD_LOC 11
7838: NOT
7839: IFFALSE 7807
// for un in battle_flags_id do
7841: LD_ADDR_VAR 0 1
7845: PUSH
7846: LD_EXP 44
7850: PUSH
7851: FOR_IN
7852: IFFALSE 7865
// KillBattleFlag ( un ) ;
7854: LD_VAR 0 1
7858: PPUSH
7859: CALL_OW 419
7863: GO 7851
7865: POP
7866: POP
// end ; end_of_file
7867: PPOPN 1
7869: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7870: LD_INT 0
7872: PPUSH
7873: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7874: LD_ADDR_VAR 0 2
7878: PUSH
7879: LD_STRING #Multi1x1-Time
7881: PUSH
7882: LD_OWVAR 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: ST_TO_ADDR
// if WaitServerStrings then
7891: LD_EXP 54
7895: IFFALSE 7913
// AllStrings = AllStrings ^ WaitServerStrings ;
7897: LD_ADDR_VAR 0 2
7901: PUSH
7902: LD_VAR 0 2
7906: PUSH
7907: LD_EXP 54
7911: ADD
7912: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7913: LD_INT 0
7915: PUSH
7916: LD_EXP 29
7920: PUSH
7921: LD_OWVAR 1
7925: MINUS
7926: LESSEQUAL
7927: IFFALSE 7958
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7929: LD_ADDR_VAR 0 2
7933: PUSH
7934: LD_VAR 0 2
7938: PUSH
7939: LD_STRING #allowedsibbomb
7941: PUSH
7942: LD_EXP 29
7946: PUSH
7947: LD_OWVAR 1
7951: MINUS
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: ADD
7957: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7958: LD_INT 0
7960: PUSH
7961: LD_EXP 57
7965: PUSH
7966: LD_OWVAR 1
7970: MINUS
7971: LESSEQUAL
7972: IFFALSE 8003
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7974: LD_ADDR_VAR 0 2
7978: PUSH
7979: LD_VAR 0 2
7983: PUSH
7984: LD_STRING #builduptime
7986: PUSH
7987: LD_EXP 57
7991: PUSH
7992: LD_OWVAR 1
7996: MINUS
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: ADD
8002: ST_TO_ADDR
// if ( ExtraStrings ) then
8003: LD_EXP 53
8007: IFFALSE 8029
// AllStrings := AllStrings ^  ^ ExtraStrings ;
8009: LD_ADDR_VAR 0 2
8013: PUSH
8014: LD_VAR 0 2
8018: PUSH
8019: LD_STRING 
8021: ADD
8022: PUSH
8023: LD_EXP 53
8027: ADD
8028: ST_TO_ADDR
// Display_Strings := AllStrings ;
8029: LD_ADDR_OWVAR 47
8033: PUSH
8034: LD_VAR 0 2
8038: ST_TO_ADDR
// end ;
8039: LD_VAR 0 1
8043: RET
// every 0 0$1 do
8044: GO 8046
8046: DISABLE
// begin ShowTimer ;
8047: CALL 7870 0 0
// enable ;
8051: ENABLE
// end ; end_of_file
8052: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
8053: LD_INT 0
8055: PPUSH
8056: PPUSH
8057: PPUSH
// BuildUpTime_Delay = 0 ;
8058: LD_ADDR_EXP 57
8062: PUSH
8063: LD_INT 0
8065: ST_TO_ADDR
// if not def_builduptime then
8066: LD_EXP 14
8070: NOT
8071: IFFALSE 8075
// exit ;
8073: GO 8258
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
8075: LD_ADDR_EXP 57
8079: PUSH
8080: LD_INT 8400
8082: PUSH
8083: LD_INT 2100
8085: PUSH
8086: LD_EXP 14
8090: MUL
8091: PLUS
8092: ST_TO_ADDR
// BuildUpTimeActive := true ;
8093: LD_ADDR_EXP 56
8097: PUSH
8098: LD_INT 1
8100: ST_TO_ADDR
// for i := 1 to 8 do
8101: LD_ADDR_VAR 0 2
8105: PUSH
8106: DOUBLE
8107: LD_INT 1
8109: DEC
8110: ST_TO_ADDR
8111: LD_INT 8
8113: PUSH
8114: FOR_TO
8115: IFFALSE 8256
// if Side_Positions [ i ] then
8117: LD_EXP 34
8121: PUSH
8122: LD_VAR 0 2
8126: ARRAY
8127: IFFALSE 8254
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
8129: LD_EXP 55
8133: PUSH
8134: LD_EXP 34
8138: PUSH
8139: LD_VAR 0 2
8143: ARRAY
8144: ARRAY
8145: PPUSH
8146: LD_INT 5
8148: PPUSH
8149: CALL_OW 424
// for j := 1 to 8 do
8153: LD_ADDR_VAR 0 3
8157: PUSH
8158: DOUBLE
8159: LD_INT 1
8161: DEC
8162: ST_TO_ADDR
8163: LD_INT 8
8165: PUSH
8166: FOR_TO
8167: IFFALSE 8252
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8169: LD_EXP 34
8173: PUSH
8174: LD_VAR 0 3
8178: ARRAY
8179: PUSH
8180: LD_EXP 31
8184: PUSH
8185: LD_VAR 0 2
8189: ARRAY
8190: PUSH
8191: LD_EXP 31
8195: PUSH
8196: LD_VAR 0 3
8200: ARRAY
8201: NONEQUAL
8202: PUSH
8203: LD_EXP 36
8207: NOT
8208: PUSH
8209: LD_VAR 0 2
8213: PUSH
8214: LD_VAR 0 3
8218: NONEQUAL
8219: AND
8220: OR
8221: AND
8222: IFFALSE 8250
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8224: LD_VAR 0 3
8228: PPUSH
8229: LD_EXP 55
8233: PUSH
8234: LD_EXP 34
8238: PUSH
8239: LD_VAR 0 2
8243: ARRAY
8244: ARRAY
8245: PPUSH
8246: CALL_OW 333
8250: GO 8166
8252: POP
8253: POP
// end ;
8254: GO 8114
8256: POP
8257: POP
// end ;
8258: LD_VAR 0 1
8262: RET
// export function EndBuildUp ; var i , j ; begin
8263: LD_INT 0
8265: PPUSH
8266: PPUSH
8267: PPUSH
// BuildUpTimeActive := false ;
8268: LD_ADDR_EXP 56
8272: PUSH
8273: LD_INT 0
8275: ST_TO_ADDR
// for i := 1 to 8 do
8276: LD_ADDR_VAR 0 2
8280: PUSH
8281: DOUBLE
8282: LD_INT 1
8284: DEC
8285: ST_TO_ADDR
8286: LD_INT 8
8288: PUSH
8289: FOR_TO
8290: IFFALSE 8431
// if Side_Positions [ i ] then
8292: LD_EXP 34
8296: PUSH
8297: LD_VAR 0 2
8301: ARRAY
8302: IFFALSE 8429
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
8304: LD_EXP 55
8308: PUSH
8309: LD_EXP 34
8313: PUSH
8314: LD_VAR 0 2
8318: ARRAY
8319: ARRAY
8320: PPUSH
8321: LD_INT 0
8323: PPUSH
8324: CALL_OW 424
// for j := 1 to 8 do
8328: LD_ADDR_VAR 0 3
8332: PUSH
8333: DOUBLE
8334: LD_INT 1
8336: DEC
8337: ST_TO_ADDR
8338: LD_INT 8
8340: PUSH
8341: FOR_TO
8342: IFFALSE 8427
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8344: LD_EXP 34
8348: PUSH
8349: LD_VAR 0 3
8353: ARRAY
8354: PUSH
8355: LD_EXP 31
8359: PUSH
8360: LD_VAR 0 2
8364: ARRAY
8365: PUSH
8366: LD_EXP 31
8370: PUSH
8371: LD_VAR 0 3
8375: ARRAY
8376: NONEQUAL
8377: PUSH
8378: LD_EXP 36
8382: NOT
8383: PUSH
8384: LD_VAR 0 2
8388: PUSH
8389: LD_VAR 0 3
8393: NONEQUAL
8394: AND
8395: OR
8396: AND
8397: IFFALSE 8425
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8399: LD_VAR 0 3
8403: PPUSH
8404: LD_EXP 55
8408: PUSH
8409: LD_EXP 34
8413: PUSH
8414: LD_VAR 0 2
8418: ARRAY
8419: ARRAY
8420: PPUSH
8421: CALL_OW 334
8425: GO 8341
8427: POP
8428: POP
// end ;
8429: GO 8289
8431: POP
8432: POP
// end ;
8433: LD_VAR 0 1
8437: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
8438: LD_EXP 56
8442: IFFALSE 8617
8444: GO 8446
8446: DISABLE
8447: LD_INT 0
8449: PPUSH
8450: PPUSH
// begin for i := 1 to 8 do
8451: LD_ADDR_VAR 0 1
8455: PUSH
8456: DOUBLE
8457: LD_INT 1
8459: DEC
8460: ST_TO_ADDR
8461: LD_INT 8
8463: PUSH
8464: FOR_TO
8465: IFFALSE 8614
// if Side_Positions [ i ] then
8467: LD_EXP 34
8471: PUSH
8472: LD_VAR 0 1
8476: ARRAY
8477: IFFALSE 8612
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8479: LD_ADDR_VAR 0 2
8483: PUSH
8484: LD_EXP 55
8488: PUSH
8489: LD_EXP 34
8493: PUSH
8494: LD_VAR 0 1
8498: ARRAY
8499: ARRAY
8500: PPUSH
8501: LD_INT 2
8503: PUSH
8504: LD_INT 21
8506: PUSH
8507: LD_INT 1
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: LD_INT 21
8516: PUSH
8517: LD_INT 2
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 22
8531: PUSH
8532: LD_OWVAR 2
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 70
8549: PUSH
8550: FOR_IN
8551: IFFALSE 8610
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
8553: LD_EXP 31
8557: PUSH
8558: LD_VAR 0 1
8562: ARRAY
8563: PUSH
8564: LD_EXP 31
8568: PUSH
8569: LD_OWVAR 2
8573: ARRAY
8574: NONEQUAL
8575: PUSH
8576: LD_EXP 36
8580: NOT
8581: PUSH
8582: LD_VAR 0 1
8586: PUSH
8587: LD_OWVAR 2
8591: NONEQUAL
8592: AND
8593: OR
8594: IFFALSE 8608
// ComMoveToArea ( un , BuildUpEscape ) ;
8596: LD_VAR 0 2
8600: PPUSH
8601: LD_INT 17
8603: PPUSH
8604: CALL_OW 113
8608: GO 8550
8610: POP
8611: POP
8612: GO 8464
8614: POP
8615: POP
// enable ;
8616: ENABLE
// end ;
8617: PPOPN 2
8619: END
// every 0 0$1 trigger def_builduptime do
8620: LD_EXP 14
8624: IFFALSE 8650
8626: GO 8628
8628: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
8629: LD_INT 8400
8631: PUSH
8632: LD_EXP 14
8636: PUSH
8637: LD_INT 2100
8639: MUL
8640: PLUS
8641: PPUSH
8642: CALL_OW 67
// EndBuildUp ;
8646: CALL 8263 0 0
// end ; end_of_file
8650: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8651: LD_INT 0
8653: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8654: LD_VAR 0 1
8658: PPUSH
8659: CALL_OW 255
8663: PUSH
8664: LD_VAR 0 4
8668: EQUAL
8669: IFFALSE 8688
// begin SetAchievement ( ACH_RAD ) ;
8671: LD_STRING ACH_RAD
8673: PPUSH
8674: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8678: LD_STRING ACH_NL
8680: PPUSH
8681: LD_INT 1
8683: PPUSH
8684: CALL_OW 564
// end end ;
8688: LD_VAR 0 5
8692: RET
// export function SA_Win ( side ) ; begin
8693: LD_INT 0
8695: PPUSH
// case side of 1 :
8696: LD_VAR 0 1
8700: PUSH
8701: LD_INT 1
8703: DOUBLE
8704: EQUAL
8705: IFTRUE 8709
8707: GO 8722
8709: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8710: LD_STRING ACH_AH
8712: PPUSH
8713: LD_INT 1
8715: PPUSH
8716: CALL_OW 564
8720: GO 8885
8722: LD_INT 2
8724: DOUBLE
8725: EQUAL
8726: IFTRUE 8730
8728: GO 8743
8730: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8731: LD_STRING ACH_E
8733: PPUSH
8734: LD_INT 1
8736: PPUSH
8737: CALL_OW 564
8741: GO 8885
8743: LD_INT 3
8745: DOUBLE
8746: EQUAL
8747: IFTRUE 8751
8749: GO 8764
8751: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8752: LD_STRING ACH_OOL
8754: PPUSH
8755: LD_INT 1
8757: PPUSH
8758: CALL_OW 564
8762: GO 8885
8764: LD_INT 1
8766: PUSH
8767: LD_INT 2
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: DOUBLE
8774: EQUAL
8775: IFTRUE 8779
8777: GO 8804
8779: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8780: LD_STRING ACH_AH
8782: PPUSH
8783: LD_REAL  5.00000000000000E-0001
8786: PPUSH
8787: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8791: LD_STRING ACH_E
8793: PPUSH
8794: LD_REAL  5.00000000000000E-0001
8797: PPUSH
8798: CALL_OW 564
// end ; [ 2 , 3 ] :
8802: GO 8885
8804: LD_INT 2
8806: PUSH
8807: LD_INT 3
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: DOUBLE
8814: EQUAL
8815: IFTRUE 8819
8817: GO 8844
8819: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8820: LD_STRING ACH_OOL
8822: PPUSH
8823: LD_REAL  5.00000000000000E-0001
8826: PPUSH
8827: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8831: LD_STRING ACH_E
8833: PPUSH
8834: LD_REAL  5.00000000000000E-0001
8837: PPUSH
8838: CALL_OW 564
// end ; [ 3 , 1 ] :
8842: GO 8885
8844: LD_INT 3
8846: PUSH
8847: LD_INT 1
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: DOUBLE
8854: EQUAL
8855: IFTRUE 8859
8857: GO 8884
8859: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8860: LD_STRING ACH_AH
8862: PPUSH
8863: LD_REAL  5.00000000000000E-0001
8866: PPUSH
8867: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8871: LD_STRING ACH_OOL
8873: PPUSH
8874: LD_REAL  5.00000000000000E-0001
8877: PPUSH
8878: CALL_OW 564
// end ; end ;
8882: GO 8885
8884: POP
// end ; end_of_file
8885: LD_VAR 0 2
8889: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
8890: LD_INT 0
8892: PPUSH
8893: PPUSH
// enable ( 98 ) ;
8894: LD_INT 98
8896: ENABLE_MARKED
// GameEnded = false ;
8897: LD_ADDR_LOC 17
8901: PUSH
8902: LD_INT 0
8904: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8905: LD_ADDR_LOC 16
8909: PUSH
8910: LD_INT 0
8912: PUSH
8913: LD_INT 0
8915: PUSH
8916: LD_INT 0
8918: PUSH
8919: LD_INT 0
8921: PUSH
8922: LD_INT 0
8924: PUSH
8925: LD_INT 0
8927: PUSH
8928: LD_INT 0
8930: PUSH
8931: LD_INT 0
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: ST_TO_ADDR
// unfoged = false ;
8944: LD_ADDR_LOC 18
8948: PUSH
8949: LD_INT 0
8951: ST_TO_ADDR
// for i = 1 to side_positions do
8952: LD_ADDR_VAR 0 2
8956: PUSH
8957: DOUBLE
8958: LD_INT 1
8960: DEC
8961: ST_TO_ADDR
8962: LD_EXP 34
8966: PUSH
8967: FOR_TO
8968: IFFALSE 9008
// if not side_positions [ i ] then
8970: LD_EXP 34
8974: PUSH
8975: LD_VAR 0 2
8979: ARRAY
8980: NOT
8981: IFFALSE 9006
// defaited = replace ( defaited , i , true ) ;
8983: LD_ADDR_LOC 16
8987: PUSH
8988: LD_LOC 16
8992: PPUSH
8993: LD_VAR 0 2
8997: PPUSH
8998: LD_INT 1
9000: PPUSH
9001: CALL_OW 1
9005: ST_TO_ADDR
9006: GO 8967
9008: POP
9009: POP
// end ;
9010: LD_VAR 0 1
9014: RET
// function CanWinLoose ; begin
9015: LD_INT 0
9017: PPUSH
// Result := true ;
9018: LD_ADDR_VAR 0 1
9022: PUSH
9023: LD_INT 1
9025: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
9026: CALL_OW 518
9030: PUSH
9031: CALL_OW 519
9035: PUSH
9036: LD_INT 0
9038: GREATER
9039: AND
9040: IFFALSE 9050
// Result := false ;
9042: LD_ADDR_VAR 0 1
9046: PUSH
9047: LD_INT 0
9049: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
9050: CALL_OW 531
9054: PUSH
9055: CALL_OW 519
9059: PUSH
9060: LD_INT 1
9062: GREATER
9063: AND
9064: IFFALSE 9074
// Result := false ;
9066: LD_ADDR_VAR 0 1
9070: PUSH
9071: LD_INT 0
9073: ST_TO_ADDR
// end ;
9074: LD_VAR 0 1
9078: RET
// export function HasPower ( i ) ; var k , h ; begin
9079: LD_INT 0
9081: PPUSH
9082: PPUSH
9083: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 108
9093: NOT
9094: PUSH
9095: LD_EXP 33
9099: PUSH
9100: LD_VAR 0 1
9104: ARRAY
9105: NOT
9106: AND
9107: PUSH
9108: LD_OWVAR 4
9112: AND
9113: IFFALSE 9125
// begin result = false ;
9115: LD_ADDR_VAR 0 2
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// end else
9123: GO 9420
// case def_win_rules of 0 :
9125: LD_EXP 30
9129: PUSH
9130: LD_INT 0
9132: DOUBLE
9133: EQUAL
9134: IFTRUE 9138
9136: GO 9301
9138: POP
// if def_people_respawning then
9139: LD_EXP 11
9143: IFFALSE 9234
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
9145: LD_ADDR_VAR 0 2
9149: PUSH
9150: LD_INT 22
9152: PUSH
9153: LD_VAR 0 1
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 2
9164: PUSH
9165: LD_INT 21
9167: PUSH
9168: LD_INT 1
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 33
9177: PUSH
9178: LD_INT 3
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 33
9187: PUSH
9188: LD_INT 5
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PUSH
9195: LD_INT 30
9197: PUSH
9198: LD_INT 0
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: LD_INT 30
9207: PUSH
9208: LD_INT 1
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PPUSH
9227: CALL_OW 69
9231: ST_TO_ADDR
9232: GO 9299
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
9234: LD_ADDR_VAR 0 2
9238: PUSH
9239: LD_INT 22
9241: PUSH
9242: LD_VAR 0 1
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PUSH
9251: LD_INT 2
9253: PUSH
9254: LD_INT 21
9256: PUSH
9257: LD_INT 1
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 33
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 33
9276: PUSH
9277: LD_INT 5
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PPUSH
9294: CALL_OW 69
9298: ST_TO_ADDR
9299: GO 9420
9301: LD_INT 1
9303: DOUBLE
9304: EQUAL
9305: IFTRUE 9309
9307: GO 9348
9309: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
9310: LD_ADDR_VAR 0 2
9314: PUSH
9315: LD_INT 22
9317: PUSH
9318: LD_VAR 0 1
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: PUSH
9327: LD_INT 21
9329: PUSH
9330: LD_INT 1
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PPUSH
9341: CALL_OW 69
9345: ST_TO_ADDR
9346: GO 9420
9348: LD_INT 2
9350: DOUBLE
9351: EQUAL
9352: IFTRUE 9356
9354: GO 9419
9356: POP
// begin h = false ;
9357: LD_ADDR_VAR 0 4
9361: PUSH
9362: LD_INT 0
9364: ST_TO_ADDR
// for k in heroes [ i ] do
9365: LD_ADDR_VAR 0 3
9369: PUSH
9370: LD_EXP 45
9374: PUSH
9375: LD_VAR 0 1
9379: ARRAY
9380: PUSH
9381: FOR_IN
9382: IFFALSE 9405
// if IsLive ( k ) then
9384: LD_VAR 0 3
9388: PPUSH
9389: CALL_OW 300
9393: IFFALSE 9403
// h = true ;
9395: LD_ADDR_VAR 0 4
9399: PUSH
9400: LD_INT 1
9402: ST_TO_ADDR
9403: GO 9381
9405: POP
9406: POP
// Result := h ;
9407: LD_ADDR_VAR 0 2
9411: PUSH
9412: LD_VAR 0 4
9416: ST_TO_ADDR
// end ; end ;
9417: GO 9420
9419: POP
// end ;
9420: LD_VAR 0 2
9424: RET
// function AlliedSides ( i , j ) ; begin
9425: LD_INT 0
9427: PPUSH
// Result := false ;
9428: LD_ADDR_VAR 0 3
9432: PUSH
9433: LD_INT 0
9435: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9436: LD_VAR 0 1
9440: PPUSH
9441: LD_VAR 0 2
9445: PPUSH
9446: CALL_OW 81
9450: PUSH
9451: LD_INT 1
9453: EQUAL
9454: PUSH
9455: LD_VAR 0 2
9459: PPUSH
9460: LD_VAR 0 1
9464: PPUSH
9465: CALL_OW 81
9469: PUSH
9470: LD_INT 1
9472: EQUAL
9473: AND
9474: PUSH
9475: LD_VAR 0 1
9479: PPUSH
9480: CALL_OW 83
9484: AND
9485: PUSH
9486: LD_VAR 0 2
9490: PPUSH
9491: CALL_OW 83
9495: AND
9496: IFFALSE 9506
// Result := true ;
9498: LD_ADDR_VAR 0 3
9502: PUSH
9503: LD_INT 1
9505: ST_TO_ADDR
// end ;
9506: LD_VAR 0 3
9510: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9511: CALL 9015 0 0
9515: PUSH
9516: LD_LOC 17
9520: NOT
9521: AND
9522: IFFALSE 9538
9524: GO 9526
9526: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9527: LD_ADDR_EXP 54
9531: PUSH
9532: LD_STRING #Player-Ended
9534: PUSH
9535: EMPTY
9536: LIST
9537: ST_TO_ADDR
9538: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9539: CALL 9015 0 0
9543: PUSH
9544: LD_LOC 17
9548: AND
9549: IFFALSE 9558
9551: GO 9553
9553: DISABLE
// YouLostInMultiplayer ;
9554: CALL_OW 107
9558: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9559: CALL 9015 0 0
9563: NOT
9564: PUSH
9565: CALL_OW 531
9569: NOT
9570: AND
9571: IFFALSE 9587
9573: GO 9575
9575: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9576: LD_ADDR_EXP 54
9580: PUSH
9581: LD_STRING #server-wait
9583: PUSH
9584: EMPTY
9585: LIST
9586: ST_TO_ADDR
9587: END
// every 100 trigger IAmSpec do
9588: CALL_OW 531
9592: IFFALSE 9608
9594: GO 9596
9596: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9597: LD_ADDR_EXP 54
9601: PUSH
9602: LD_STRING #Player-IAmSpec
9604: PUSH
9605: EMPTY
9606: LIST
9607: ST_TO_ADDR
9608: END
// every 100 trigger GameEnded and IAmSpec do
9609: LD_LOC 17
9613: PUSH
9614: CALL_OW 531
9618: AND
9619: IFFALSE 9628
9621: GO 9623
9623: DISABLE
// YouLostInMultiplayer ;
9624: CALL_OW 107
9628: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9629: CALL 9015 0 0
9633: PUSH
9634: LD_LOC 17
9638: NOT
9639: AND
9640: IFFALSE 9656
9642: GO 9644
9644: DISABLE
// WaitServerStrings = [ $player-win ] ;
9645: LD_ADDR_EXP 54
9649: PUSH
9650: LD_STRING $player-win
9652: PUSH
9653: EMPTY
9654: LIST
9655: ST_TO_ADDR
9656: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9657: CALL 9015 0 0
9661: PUSH
9662: LD_LOC 17
9666: AND
9667: IFFALSE 9691
9669: GO 9671
9671: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
9672: LD_EXP 35
9676: PUSH
9677: LD_OWVAR 2
9681: ARRAY
9682: PPUSH
9683: CALL 8693 0 1
// YouWinInMultiplayer ;
9687: CALL_OW 106
// end ;
9691: END
// every 100 trigger isEditor marked 401 do
9692: LD_OWVAR 84
9696: IFFALSE 9712
9698: GO 9700
9700: DISABLE
// Debug_Strings = [ You won ] ;
9701: LD_ADDR_OWVAR 48
9705: PUSH
9706: LD_STRING You won
9708: PUSH
9709: EMPTY
9710: LIST
9711: ST_TO_ADDR
9712: END
// every 100 trigger isEditor marked 400 do
9713: LD_OWVAR 84
9717: IFFALSE 9733
9719: GO 9721
9721: DISABLE
// Debug_Strings = [ You loss ] ;
9722: LD_ADDR_OWVAR 48
9726: PUSH
9727: LD_STRING You loss
9729: PUSH
9730: EMPTY
9731: LIST
9732: ST_TO_ADDR
9733: END
// every 100 marked 98 do var i , un ;
9734: GO 9736
9736: DISABLE
9737: LD_INT 0
9739: PPUSH
9740: PPUSH
// begin for i = 1 to side_positions do
9741: LD_ADDR_VAR 0 1
9745: PUSH
9746: DOUBLE
9747: LD_INT 1
9749: DEC
9750: ST_TO_ADDR
9751: LD_EXP 34
9755: PUSH
9756: FOR_TO
9757: IFFALSE 9840
// if side_positions [ i ] then
9759: LD_EXP 34
9763: PUSH
9764: LD_VAR 0 1
9768: ARRAY
9769: IFFALSE 9838
// if not HasPower ( i ) and not Defaited [ i ] then
9771: LD_VAR 0 1
9775: PPUSH
9776: CALL 9079 0 1
9780: NOT
9781: PUSH
9782: LD_LOC 16
9786: PUSH
9787: LD_VAR 0 1
9791: ARRAY
9792: NOT
9793: AND
9794: IFFALSE 9838
// begin Defaited = replace ( Defaited , i , true ) ;
9796: LD_ADDR_LOC 16
9800: PUSH
9801: LD_LOC 16
9805: PPUSH
9806: LD_VAR 0 1
9810: PPUSH
9811: LD_INT 1
9813: PPUSH
9814: CALL_OW 1
9818: ST_TO_ADDR
// if i = your_side then
9819: LD_VAR 0 1
9823: PUSH
9824: LD_OWVAR 2
9828: EQUAL
9829: IFFALSE 9838
// begin Multiplayer_Loose_Message ;
9831: CALL_OW 521
// enable ( 400 ) ;
9835: LD_INT 400
9837: ENABLE_MARKED
// end ; end ;
9838: GO 9756
9840: POP
9841: POP
// if not Unfoged and defaited [ your_side ] then
9842: LD_LOC 18
9846: NOT
9847: PUSH
9848: LD_LOC 16
9852: PUSH
9853: LD_OWVAR 2
9857: ARRAY
9858: AND
9859: IFFALSE 9865
// Unfog ;
9861: CALL 10041 0 0
// DidGameEnd ;
9865: CALL 9880 0 0
// if not GameEnded then
9869: LD_LOC 17
9873: NOT
9874: IFFALSE 9877
// enable ;
9876: ENABLE
// end ;
9877: PPOPN 2
9879: END
// function DidGameEnd ; var i , k , enemy ; begin
9880: LD_INT 0
9882: PPUSH
9883: PPUSH
9884: PPUSH
9885: PPUSH
// enemy = [ ] ;
9886: LD_ADDR_VAR 0 4
9890: PUSH
9891: EMPTY
9892: ST_TO_ADDR
// for i = 1 to side_positions do
9893: LD_ADDR_VAR 0 2
9897: PUSH
9898: DOUBLE
9899: LD_INT 1
9901: DEC
9902: ST_TO_ADDR
9903: LD_EXP 34
9907: PUSH
9908: FOR_TO
9909: IFFALSE 10003
// if not defaited [ i ] then
9911: LD_LOC 16
9915: PUSH
9916: LD_VAR 0 2
9920: ARRAY
9921: NOT
9922: IFFALSE 10001
// for k = 1 to side_positions do
9924: LD_ADDR_VAR 0 3
9928: PUSH
9929: DOUBLE
9930: LD_INT 1
9932: DEC
9933: ST_TO_ADDR
9934: LD_EXP 34
9938: PUSH
9939: FOR_TO
9940: IFFALSE 9999
// if not defaited [ k ] then
9942: LD_LOC 16
9946: PUSH
9947: LD_VAR 0 3
9951: ARRAY
9952: NOT
9953: IFFALSE 9997
// if not AlliedSides ( i , k ) then
9955: LD_VAR 0 2
9959: PPUSH
9960: LD_VAR 0 3
9964: PPUSH
9965: CALL 9425 0 2
9969: NOT
9970: IFFALSE 9997
// enemy = enemy ^ [ i , k ] ;
9972: LD_ADDR_VAR 0 4
9976: PUSH
9977: LD_VAR 0 4
9981: PUSH
9982: LD_VAR 0 2
9986: PUSH
9987: LD_VAR 0 3
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: ADD
9996: ST_TO_ADDR
9997: GO 9939
9999: POP
10000: POP
10001: GO 9908
10003: POP
10004: POP
// if not enemy then
10005: LD_VAR 0 4
10009: NOT
10010: IFFALSE 10036
// begin GameEnded = true ;
10012: LD_ADDR_LOC 17
10016: PUSH
10017: LD_INT 1
10019: ST_TO_ADDR
// if not defaited [ your_side ] then
10020: LD_LOC 16
10024: PUSH
10025: LD_OWVAR 2
10029: ARRAY
10030: NOT
10031: IFFALSE 10036
// enable ( 401 ) ;
10033: LD_INT 401
10035: ENABLE_MARKED
// end ; end ;
10036: LD_VAR 0 1
10040: RET
// function unfog ; var k , friends ; begin
10041: LD_INT 0
10043: PPUSH
10044: PPUSH
10045: PPUSH
// SetPlayerSpectator ( ) ;
10046: CALL_OW 572
// unfoged = true ;
10050: LD_ADDR_LOC 18
10054: PUSH
10055: LD_INT 1
10057: ST_TO_ADDR
// end ;
10058: LD_VAR 0 1
10062: RET
// export function MakeGameEnd ; begin
10063: LD_INT 0
10065: PPUSH
// SetPlayerSpectator ( ) ;
10066: CALL_OW 572
// unfoged = true ;
10070: LD_ADDR_LOC 18
10074: PUSH
10075: LD_INT 1
10077: ST_TO_ADDR
// wait ( 0 0$5 ) ;
10078: LD_INT 175
10080: PPUSH
10081: CALL_OW 67
// GameEnded = true ;
10085: LD_ADDR_LOC 17
10089: PUSH
10090: LD_INT 1
10092: ST_TO_ADDR
// end ;
10093: LD_VAR 0 1
10097: RET
// export function GetGameEnded ; begin
10098: LD_INT 0
10100: PPUSH
// result = GameEnded ;
10101: LD_ADDR_VAR 0 1
10105: PUSH
10106: LD_LOC 17
10110: ST_TO_ADDR
// end ; end_of_file
10111: LD_VAR 0 1
10115: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10116: LD_INT 0
10118: PPUSH
10119: PPUSH
10120: PPUSH
// for side = 1 to 8 do
10121: LD_ADDR_VAR 0 2
10125: PUSH
10126: DOUBLE
10127: LD_INT 1
10129: DEC
10130: ST_TO_ADDR
10131: LD_INT 8
10133: PUSH
10134: FOR_TO
10135: IFFALSE 10256
// begin for i = 1 to 72 do
10137: LD_ADDR_VAR 0 3
10141: PUSH
10142: DOUBLE
10143: LD_INT 1
10145: DEC
10146: ST_TO_ADDR
10147: LD_INT 72
10149: PUSH
10150: FOR_TO
10151: IFFALSE 10182
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
10153: LD_VAR 0 3
10157: PPUSH
10158: LD_VAR 0 2
10162: PPUSH
10163: LD_INT 0
10165: PPUSH
10166: LD_VAR 0 3
10170: PPUSH
10171: CALL_OW 565
10175: PPUSH
10176: CALL_OW 322
10180: GO 10150
10182: POP
10183: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
10184: LD_INT 73
10186: PPUSH
10187: LD_VAR 0 2
10191: PPUSH
10192: LD_INT 0
10194: PPUSH
10195: LD_INT 25
10197: PPUSH
10198: CALL_OW 565
10202: PPUSH
10203: CALL_OW 322
// for i = 0 to 40 do
10207: LD_ADDR_VAR 0 3
10211: PUSH
10212: DOUBLE
10213: LD_INT 0
10215: DEC
10216: ST_TO_ADDR
10217: LD_INT 40
10219: PUSH
10220: FOR_TO
10221: IFFALSE 10252
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
10223: LD_VAR 0 3
10227: PPUSH
10228: LD_VAR 0 2
10232: PPUSH
10233: LD_INT 1
10235: PPUSH
10236: LD_VAR 0 3
10240: PPUSH
10241: CALL_OW 565
10245: PPUSH
10246: CALL_OW 324
10250: GO 10220
10252: POP
10253: POP
// end ;
10254: GO 10134
10256: POP
10257: POP
// end ;
10258: LD_VAR 0 1
10262: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
10263: LD_INT 0
10265: PPUSH
10266: PPUSH
10267: PPUSH
// for side = 1 to 8 do
10268: LD_ADDR_VAR 0 3
10272: PUSH
10273: DOUBLE
10274: LD_INT 1
10276: DEC
10277: ST_TO_ADDR
10278: LD_INT 8
10280: PUSH
10281: FOR_TO
10282: IFFALSE 14278
// begin for i = 1 to 73 do
10284: LD_ADDR_VAR 0 4
10288: PUSH
10289: DOUBLE
10290: LD_INT 1
10292: DEC
10293: ST_TO_ADDR
10294: LD_INT 73
10296: PUSH
10297: FOR_TO
10298: IFFALSE 10319
// SetTech ( i , side , state_disabled ) ;
10300: LD_VAR 0 4
10304: PPUSH
10305: LD_VAR 0 3
10309: PPUSH
10310: LD_INT 0
10312: PPUSH
10313: CALL_OW 322
10317: GO 10297
10319: POP
10320: POP
// for i = 0 to 40 do
10321: LD_ADDR_VAR 0 4
10325: PUSH
10326: DOUBLE
10327: LD_INT 0
10329: DEC
10330: ST_TO_ADDR
10331: LD_INT 40
10333: PUSH
10334: FOR_TO
10335: IFFALSE 10356
// SetRestrict ( i , side , false ) ;
10337: LD_VAR 0 4
10341: PPUSH
10342: LD_VAR 0 3
10346: PPUSH
10347: LD_INT 0
10349: PPUSH
10350: CALL_OW 324
10354: GO 10334
10356: POP
10357: POP
// case level of 1 :
10358: LD_VAR 0 1
10362: PUSH
10363: LD_INT 1
10365: DOUBLE
10366: EQUAL
10367: IFTRUE 10371
10369: GO 10524
10371: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10372: LD_INT 35
10374: PPUSH
10375: LD_VAR 0 3
10379: PPUSH
10380: LD_INT 1
10382: PPUSH
10383: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10387: LD_INT 45
10389: PPUSH
10390: LD_VAR 0 3
10394: PPUSH
10395: LD_INT 1
10397: PPUSH
10398: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10402: LD_INT 46
10404: PPUSH
10405: LD_VAR 0 3
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10417: LD_INT 47
10419: PPUSH
10420: LD_VAR 0 3
10424: PPUSH
10425: LD_INT 1
10427: PPUSH
10428: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10432: LD_INT 0
10434: PPUSH
10435: LD_VAR 0 3
10439: PPUSH
10440: LD_INT 1
10442: PPUSH
10443: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10447: LD_INT 2
10449: PPUSH
10450: LD_VAR 0 3
10454: PPUSH
10455: LD_INT 1
10457: PPUSH
10458: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10462: LD_INT 4
10464: PPUSH
10465: LD_VAR 0 3
10469: PPUSH
10470: LD_INT 1
10472: PPUSH
10473: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10477: LD_INT 6
10479: PPUSH
10480: LD_VAR 0 3
10484: PPUSH
10485: LD_INT 1
10487: PPUSH
10488: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10492: LD_INT 29
10494: PPUSH
10495: LD_VAR 0 3
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10507: LD_INT 31
10509: PPUSH
10510: LD_VAR 0 3
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 324
// end ; 2 :
10522: GO 14276
10524: LD_INT 2
10526: DOUBLE
10527: EQUAL
10528: IFTRUE 10532
10530: GO 10730
10532: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10533: LD_INT 35
10535: PPUSH
10536: LD_VAR 0 3
10540: PPUSH
10541: LD_INT 1
10543: PPUSH
10544: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10548: LD_INT 45
10550: PPUSH
10551: LD_VAR 0 3
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10563: LD_INT 46
10565: PPUSH
10566: LD_VAR 0 3
10570: PPUSH
10571: LD_INT 1
10573: PPUSH
10574: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10578: LD_INT 47
10580: PPUSH
10581: LD_VAR 0 3
10585: PPUSH
10586: LD_INT 1
10588: PPUSH
10589: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10593: LD_INT 1
10595: PPUSH
10596: LD_VAR 0 3
10600: PPUSH
10601: LD_INT 1
10603: PPUSH
10604: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10608: LD_INT 2
10610: PPUSH
10611: LD_VAR 0 3
10615: PPUSH
10616: LD_INT 1
10618: PPUSH
10619: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10623: LD_INT 11
10625: PPUSH
10626: LD_VAR 0 3
10630: PPUSH
10631: LD_INT 1
10633: PPUSH
10634: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10638: LD_INT 0
10640: PPUSH
10641: LD_VAR 0 3
10645: PPUSH
10646: LD_INT 1
10648: PPUSH
10649: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10653: LD_INT 2
10655: PPUSH
10656: LD_VAR 0 3
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10668: LD_INT 4
10670: PPUSH
10671: LD_VAR 0 3
10675: PPUSH
10676: LD_INT 1
10678: PPUSH
10679: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10683: LD_INT 6
10685: PPUSH
10686: LD_VAR 0 3
10690: PPUSH
10691: LD_INT 1
10693: PPUSH
10694: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10698: LD_INT 29
10700: PPUSH
10701: LD_VAR 0 3
10705: PPUSH
10706: LD_INT 1
10708: PPUSH
10709: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10713: LD_INT 31
10715: PPUSH
10716: LD_VAR 0 3
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: CALL_OW 324
// end ; 3 :
10728: GO 14276
10730: LD_INT 3
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 11191
10738: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10739: LD_INT 35
10741: PPUSH
10742: LD_VAR 0 3
10746: PPUSH
10747: LD_INT 1
10749: PPUSH
10750: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10754: LD_INT 45
10756: PPUSH
10757: LD_VAR 0 3
10761: PPUSH
10762: LD_INT 1
10764: PPUSH
10765: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10769: LD_INT 46
10771: PPUSH
10772: LD_VAR 0 3
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10784: LD_INT 47
10786: PPUSH
10787: LD_VAR 0 3
10791: PPUSH
10792: LD_INT 1
10794: PPUSH
10795: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10799: LD_INT 1
10801: PPUSH
10802: LD_VAR 0 3
10806: PPUSH
10807: LD_INT 1
10809: PPUSH
10810: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10814: LD_INT 2
10816: PPUSH
10817: LD_VAR 0 3
10821: PPUSH
10822: LD_INT 1
10824: PPUSH
10825: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10829: LD_INT 11
10831: PPUSH
10832: LD_VAR 0 3
10836: PPUSH
10837: LD_INT 1
10839: PPUSH
10840: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10844: LD_INT 48
10846: PPUSH
10847: LD_VAR 0 3
10851: PPUSH
10852: LD_INT 1
10854: PPUSH
10855: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10859: LD_INT 69
10861: PPUSH
10862: LD_VAR 0 3
10866: PPUSH
10867: LD_INT 1
10869: PPUSH
10870: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10874: LD_INT 39
10876: PPUSH
10877: LD_VAR 0 3
10881: PPUSH
10882: LD_INT 1
10884: PPUSH
10885: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10889: LD_INT 43
10891: PPUSH
10892: LD_VAR 0 3
10896: PPUSH
10897: LD_INT 1
10899: PPUSH
10900: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10904: LD_INT 51
10906: PPUSH
10907: LD_VAR 0 3
10911: PPUSH
10912: LD_INT 1
10914: PPUSH
10915: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10919: LD_INT 6
10921: PPUSH
10922: LD_VAR 0 3
10926: PPUSH
10927: LD_INT 1
10929: PPUSH
10930: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10934: LD_INT 0
10936: PPUSH
10937: LD_VAR 0 3
10941: PPUSH
10942: LD_INT 1
10944: PPUSH
10945: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10949: LD_INT 2
10951: PPUSH
10952: LD_VAR 0 3
10956: PPUSH
10957: LD_INT 1
10959: PPUSH
10960: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10964: LD_INT 3
10966: PPUSH
10967: LD_VAR 0 3
10971: PPUSH
10972: LD_INT 1
10974: PPUSH
10975: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10979: LD_INT 4
10981: PPUSH
10982: LD_VAR 0 3
10986: PPUSH
10987: LD_INT 1
10989: PPUSH
10990: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10994: LD_INT 6
10996: PPUSH
10997: LD_VAR 0 3
11001: PPUSH
11002: LD_INT 1
11004: PPUSH
11005: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11009: LD_INT 7
11011: PPUSH
11012: LD_VAR 0 3
11016: PPUSH
11017: LD_INT 1
11019: PPUSH
11020: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11024: LD_INT 8
11026: PPUSH
11027: LD_VAR 0 3
11031: PPUSH
11032: LD_INT 1
11034: PPUSH
11035: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11039: LD_INT 10
11041: PPUSH
11042: LD_VAR 0 3
11046: PPUSH
11047: LD_INT 1
11049: PPUSH
11050: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11054: LD_INT 15
11056: PPUSH
11057: LD_VAR 0 3
11061: PPUSH
11062: LD_INT 1
11064: PPUSH
11065: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11069: LD_INT 16
11071: PPUSH
11072: LD_VAR 0 3
11076: PPUSH
11077: LD_INT 1
11079: PPUSH
11080: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11084: LD_INT 17
11086: PPUSH
11087: LD_VAR 0 3
11091: PPUSH
11092: LD_INT 1
11094: PPUSH
11095: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11099: LD_INT 20
11101: PPUSH
11102: LD_VAR 0 3
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11114: LD_INT 26
11116: PPUSH
11117: LD_VAR 0 3
11121: PPUSH
11122: LD_INT 1
11124: PPUSH
11125: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11129: LD_INT 27
11131: PPUSH
11132: LD_VAR 0 3
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11144: LD_INT 29
11146: PPUSH
11147: LD_VAR 0 3
11151: PPUSH
11152: LD_INT 1
11154: PPUSH
11155: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11159: LD_INT 31
11161: PPUSH
11162: LD_VAR 0 3
11166: PPUSH
11167: LD_INT 1
11169: PPUSH
11170: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11174: LD_INT 32
11176: PPUSH
11177: LD_VAR 0 3
11181: PPUSH
11182: LD_INT 1
11184: PPUSH
11185: CALL_OW 324
// end ; 4 :
11189: GO 14276
11191: LD_INT 4
11193: DOUBLE
11194: EQUAL
11195: IFTRUE 11199
11197: GO 12147
11199: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11200: LD_INT 35
11202: PPUSH
11203: LD_VAR 0 3
11207: PPUSH
11208: LD_INT 1
11210: PPUSH
11211: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11215: LD_INT 45
11217: PPUSH
11218: LD_VAR 0 3
11222: PPUSH
11223: LD_INT 1
11225: PPUSH
11226: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11230: LD_INT 46
11232: PPUSH
11233: LD_VAR 0 3
11237: PPUSH
11238: LD_INT 1
11240: PPUSH
11241: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11245: LD_INT 47
11247: PPUSH
11248: LD_VAR 0 3
11252: PPUSH
11253: LD_INT 1
11255: PPUSH
11256: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11260: LD_INT 1
11262: PPUSH
11263: LD_VAR 0 3
11267: PPUSH
11268: LD_INT 1
11270: PPUSH
11271: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11275: LD_INT 2
11277: PPUSH
11278: LD_VAR 0 3
11282: PPUSH
11283: LD_INT 1
11285: PPUSH
11286: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11290: LD_INT 11
11292: PPUSH
11293: LD_VAR 0 3
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11305: LD_INT 20
11307: PPUSH
11308: LD_VAR 0 3
11312: PPUSH
11313: LD_INT 1
11315: PPUSH
11316: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11320: LD_INT 48
11322: PPUSH
11323: LD_VAR 0 3
11327: PPUSH
11328: LD_INT 1
11330: PPUSH
11331: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11335: LD_INT 49
11337: PPUSH
11338: LD_VAR 0 3
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11350: LD_INT 69
11352: PPUSH
11353: LD_VAR 0 3
11357: PPUSH
11358: LD_INT 1
11360: PPUSH
11361: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11365: LD_INT 39
11367: PPUSH
11368: LD_VAR 0 3
11372: PPUSH
11373: LD_INT 1
11375: PPUSH
11376: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11380: LD_INT 34
11382: PPUSH
11383: LD_VAR 0 3
11387: PPUSH
11388: LD_INT 1
11390: PPUSH
11391: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11395: LD_INT 42
11397: PPUSH
11398: LD_VAR 0 3
11402: PPUSH
11403: LD_INT 1
11405: PPUSH
11406: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11410: LD_INT 44
11412: PPUSH
11413: LD_VAR 0 3
11417: PPUSH
11418: LD_INT 1
11420: PPUSH
11421: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11425: LD_INT 41
11427: PPUSH
11428: LD_VAR 0 3
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11440: LD_INT 43
11442: PPUSH
11443: LD_VAR 0 3
11447: PPUSH
11448: LD_INT 1
11450: PPUSH
11451: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11455: LD_INT 70
11457: PPUSH
11458: LD_VAR 0 3
11462: PPUSH
11463: LD_INT 1
11465: PPUSH
11466: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11470: LD_INT 51
11472: PPUSH
11473: LD_VAR 0 3
11477: PPUSH
11478: LD_INT 1
11480: PPUSH
11481: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11485: LD_INT 52
11487: PPUSH
11488: LD_VAR 0 3
11492: PPUSH
11493: LD_INT 1
11495: PPUSH
11496: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11500: LD_INT 6
11502: PPUSH
11503: LD_VAR 0 3
11507: PPUSH
11508: LD_INT 1
11510: PPUSH
11511: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11515: LD_INT 15
11517: PPUSH
11518: LD_VAR 0 3
11522: PPUSH
11523: LD_INT 1
11525: PPUSH
11526: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11530: LD_INT 7
11532: PPUSH
11533: LD_VAR 0 3
11537: PPUSH
11538: LD_INT 1
11540: PPUSH
11541: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11545: LD_INT 12
11547: PPUSH
11548: LD_VAR 0 3
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11560: LD_INT 18
11562: PPUSH
11563: LD_VAR 0 3
11567: PPUSH
11568: LD_INT 1
11570: PPUSH
11571: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11575: LD_INT 60
11577: PPUSH
11578: LD_VAR 0 3
11582: PPUSH
11583: LD_INT 1
11585: PPUSH
11586: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11590: LD_INT 9
11592: PPUSH
11593: LD_VAR 0 3
11597: PPUSH
11598: LD_INT 1
11600: PPUSH
11601: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11605: LD_INT 30
11607: PPUSH
11608: LD_VAR 0 3
11612: PPUSH
11613: LD_INT 1
11615: PPUSH
11616: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11620: LD_INT 37
11622: PPUSH
11623: LD_VAR 0 3
11627: PPUSH
11628: LD_INT 1
11630: PPUSH
11631: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11635: LD_INT 5
11637: PPUSH
11638: LD_VAR 0 3
11642: PPUSH
11643: LD_INT 1
11645: PPUSH
11646: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11650: LD_INT 66
11652: PPUSH
11653: LD_VAR 0 3
11657: PPUSH
11658: LD_INT 1
11660: PPUSH
11661: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11665: LD_INT 21
11667: PPUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_INT 1
11675: PPUSH
11676: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11680: LD_INT 22
11682: PPUSH
11683: LD_VAR 0 3
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11695: LD_INT 54
11697: PPUSH
11698: LD_VAR 0 3
11702: PPUSH
11703: LD_INT 1
11705: PPUSH
11706: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11710: LD_INT 0
11712: PPUSH
11713: LD_VAR 0 3
11717: PPUSH
11718: LD_INT 1
11720: PPUSH
11721: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11725: LD_INT 1
11727: PPUSH
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_INT 1
11735: PPUSH
11736: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11740: LD_INT 2
11742: PPUSH
11743: LD_VAR 0 3
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11755: LD_INT 3
11757: PPUSH
11758: LD_VAR 0 3
11762: PPUSH
11763: LD_INT 1
11765: PPUSH
11766: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11770: LD_INT 4
11772: PPUSH
11773: LD_VAR 0 3
11777: PPUSH
11778: LD_INT 1
11780: PPUSH
11781: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11785: LD_INT 5
11787: PPUSH
11788: LD_VAR 0 3
11792: PPUSH
11793: LD_INT 1
11795: PPUSH
11796: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11800: LD_INT 6
11802: PPUSH
11803: LD_VAR 0 3
11807: PPUSH
11808: LD_INT 1
11810: PPUSH
11811: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11815: LD_INT 7
11817: PPUSH
11818: LD_VAR 0 3
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11830: LD_INT 8
11832: PPUSH
11833: LD_VAR 0 3
11837: PPUSH
11838: LD_INT 1
11840: PPUSH
11841: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11845: LD_INT 10
11847: PPUSH
11848: LD_VAR 0 3
11852: PPUSH
11853: LD_INT 1
11855: PPUSH
11856: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11860: LD_INT 11
11862: PPUSH
11863: LD_VAR 0 3
11867: PPUSH
11868: LD_INT 1
11870: PPUSH
11871: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11875: LD_INT 12
11877: PPUSH
11878: LD_VAR 0 3
11882: PPUSH
11883: LD_INT 1
11885: PPUSH
11886: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11890: LD_INT 13
11892: PPUSH
11893: LD_VAR 0 3
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11905: LD_INT 14
11907: PPUSH
11908: LD_VAR 0 3
11912: PPUSH
11913: LD_INT 1
11915: PPUSH
11916: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11920: LD_INT 15
11922: PPUSH
11923: LD_VAR 0 3
11927: PPUSH
11928: LD_INT 1
11930: PPUSH
11931: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11935: LD_INT 16
11937: PPUSH
11938: LD_VAR 0 3
11942: PPUSH
11943: LD_INT 1
11945: PPUSH
11946: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11950: LD_INT 17
11952: PPUSH
11953: LD_VAR 0 3
11957: PPUSH
11958: LD_INT 1
11960: PPUSH
11961: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11965: LD_INT 19
11967: PPUSH
11968: LD_VAR 0 3
11972: PPUSH
11973: LD_INT 1
11975: PPUSH
11976: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11980: LD_INT 20
11982: PPUSH
11983: LD_VAR 0 3
11987: PPUSH
11988: LD_INT 1
11990: PPUSH
11991: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11995: LD_INT 21
11997: PPUSH
11998: LD_VAR 0 3
12002: PPUSH
12003: LD_INT 1
12005: PPUSH
12006: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12010: LD_INT 23
12012: PPUSH
12013: LD_VAR 0 3
12017: PPUSH
12018: LD_INT 1
12020: PPUSH
12021: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12025: LD_INT 26
12027: PPUSH
12028: LD_VAR 0 3
12032: PPUSH
12033: LD_INT 1
12035: PPUSH
12036: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12040: LD_INT 27
12042: PPUSH
12043: LD_VAR 0 3
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12055: LD_INT 28
12057: PPUSH
12058: LD_VAR 0 3
12062: PPUSH
12063: LD_INT 1
12065: PPUSH
12066: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12070: LD_INT 29
12072: PPUSH
12073: LD_VAR 0 3
12077: PPUSH
12078: LD_INT 1
12080: PPUSH
12081: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12085: LD_INT 30
12087: PPUSH
12088: LD_VAR 0 3
12092: PPUSH
12093: LD_INT 1
12095: PPUSH
12096: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12100: LD_INT 31
12102: PPUSH
12103: LD_VAR 0 3
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12115: LD_INT 32
12117: PPUSH
12118: LD_VAR 0 3
12122: PPUSH
12123: LD_INT 1
12125: PPUSH
12126: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12130: LD_INT 36
12132: PPUSH
12133: LD_VAR 0 3
12137: PPUSH
12138: LD_INT 1
12140: PPUSH
12141: CALL_OW 324
// end ; 5 :
12145: GO 14276
12147: LD_INT 5
12149: DOUBLE
12150: EQUAL
12151: IFTRUE 12155
12153: GO 13268
12155: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12156: LD_INT 35
12158: PPUSH
12159: LD_VAR 0 3
12163: PPUSH
12164: LD_INT 1
12166: PPUSH
12167: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12171: LD_INT 45
12173: PPUSH
12174: LD_VAR 0 3
12178: PPUSH
12179: LD_INT 1
12181: PPUSH
12182: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12186: LD_INT 46
12188: PPUSH
12189: LD_VAR 0 3
12193: PPUSH
12194: LD_INT 1
12196: PPUSH
12197: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12201: LD_INT 47
12203: PPUSH
12204: LD_VAR 0 3
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12216: LD_INT 1
12218: PPUSH
12219: LD_VAR 0 3
12223: PPUSH
12224: LD_INT 1
12226: PPUSH
12227: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12231: LD_INT 2
12233: PPUSH
12234: LD_VAR 0 3
12238: PPUSH
12239: LD_INT 1
12241: PPUSH
12242: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12246: LD_INT 11
12248: PPUSH
12249: LD_VAR 0 3
12253: PPUSH
12254: LD_INT 1
12256: PPUSH
12257: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12261: LD_INT 20
12263: PPUSH
12264: LD_VAR 0 3
12268: PPUSH
12269: LD_INT 1
12271: PPUSH
12272: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12276: LD_INT 48
12278: PPUSH
12279: LD_VAR 0 3
12283: PPUSH
12284: LD_INT 1
12286: PPUSH
12287: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12291: LD_INT 49
12293: PPUSH
12294: LD_VAR 0 3
12298: PPUSH
12299: LD_INT 1
12301: PPUSH
12302: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12306: LD_INT 69
12308: PPUSH
12309: LD_VAR 0 3
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12321: LD_INT 39
12323: PPUSH
12324: LD_VAR 0 3
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12336: LD_INT 34
12338: PPUSH
12339: LD_VAR 0 3
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12351: LD_INT 42
12353: PPUSH
12354: LD_VAR 0 3
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12366: LD_INT 44
12368: PPUSH
12369: LD_VAR 0 3
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12381: LD_INT 41
12383: PPUSH
12384: LD_VAR 0 3
12388: PPUSH
12389: LD_INT 1
12391: PPUSH
12392: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12396: LD_INT 40
12398: PPUSH
12399: LD_VAR 0 3
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12411: LD_INT 43
12413: PPUSH
12414: LD_VAR 0 3
12418: PPUSH
12419: LD_INT 1
12421: PPUSH
12422: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12426: LD_INT 70
12428: PPUSH
12429: LD_VAR 0 3
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12441: LD_INT 51
12443: PPUSH
12444: LD_VAR 0 3
12448: PPUSH
12449: LD_INT 1
12451: PPUSH
12452: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12456: LD_INT 52
12458: PPUSH
12459: LD_VAR 0 3
12463: PPUSH
12464: LD_INT 1
12466: PPUSH
12467: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12471: LD_INT 6
12473: PPUSH
12474: LD_VAR 0 3
12478: PPUSH
12479: LD_INT 1
12481: PPUSH
12482: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12486: LD_INT 15
12488: PPUSH
12489: LD_VAR 0 3
12493: PPUSH
12494: LD_INT 1
12496: PPUSH
12497: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12501: LD_INT 7
12503: PPUSH
12504: LD_VAR 0 3
12508: PPUSH
12509: LD_INT 1
12511: PPUSH
12512: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12516: LD_INT 12
12518: PPUSH
12519: LD_VAR 0 3
12523: PPUSH
12524: LD_INT 1
12526: PPUSH
12527: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12531: LD_INT 17
12533: PPUSH
12534: LD_VAR 0 3
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12546: LD_INT 18
12548: PPUSH
12549: LD_VAR 0 3
12553: PPUSH
12554: LD_INT 1
12556: PPUSH
12557: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12561: LD_INT 60
12563: PPUSH
12564: LD_VAR 0 3
12568: PPUSH
12569: LD_INT 1
12571: PPUSH
12572: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12576: LD_INT 32
12578: PPUSH
12579: LD_VAR 0 3
12583: PPUSH
12584: LD_INT 1
12586: PPUSH
12587: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12591: LD_INT 9
12593: PPUSH
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_INT 1
12601: PPUSH
12602: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12606: LD_INT 57
12608: PPUSH
12609: LD_VAR 0 3
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12621: LD_INT 30
12623: PPUSH
12624: LD_VAR 0 3
12628: PPUSH
12629: LD_INT 1
12631: PPUSH
12632: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12636: LD_INT 37
12638: PPUSH
12639: LD_VAR 0 3
12643: PPUSH
12644: LD_INT 1
12646: PPUSH
12647: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12651: LD_INT 63
12653: PPUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: LD_INT 1
12661: PPUSH
12662: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12666: LD_INT 3
12668: PPUSH
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 1
12676: PPUSH
12677: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12681: LD_INT 4
12683: PPUSH
12684: LD_VAR 0 3
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12696: LD_INT 5
12698: PPUSH
12699: LD_VAR 0 3
12703: PPUSH
12704: LD_INT 1
12706: PPUSH
12707: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12711: LD_INT 66
12713: PPUSH
12714: LD_VAR 0 3
12718: PPUSH
12719: LD_INT 1
12721: PPUSH
12722: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12726: LD_INT 21
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: LD_INT 1
12736: PPUSH
12737: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12741: LD_INT 22
12743: PPUSH
12744: LD_VAR 0 3
12748: PPUSH
12749: LD_INT 1
12751: PPUSH
12752: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12756: LD_INT 19
12758: PPUSH
12759: LD_VAR 0 3
12763: PPUSH
12764: LD_INT 1
12766: PPUSH
12767: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12771: LD_INT 54
12773: PPUSH
12774: LD_VAR 0 3
12778: PPUSH
12779: LD_INT 1
12781: PPUSH
12782: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12786: LD_INT 55
12788: PPUSH
12789: LD_VAR 0 3
12793: PPUSH
12794: LD_INT 1
12796: PPUSH
12797: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12801: LD_INT 0
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: LD_INT 1
12811: PPUSH
12812: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12816: LD_INT 1
12818: PPUSH
12819: LD_VAR 0 3
12823: PPUSH
12824: LD_INT 1
12826: PPUSH
12827: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12831: LD_INT 2
12833: PPUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12846: LD_INT 3
12848: PPUSH
12849: LD_VAR 0 3
12853: PPUSH
12854: LD_INT 1
12856: PPUSH
12857: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12861: LD_INT 4
12863: PPUSH
12864: LD_VAR 0 3
12868: PPUSH
12869: LD_INT 1
12871: PPUSH
12872: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12876: LD_INT 5
12878: PPUSH
12879: LD_VAR 0 3
12883: PPUSH
12884: LD_INT 1
12886: PPUSH
12887: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12891: LD_INT 6
12893: PPUSH
12894: LD_VAR 0 3
12898: PPUSH
12899: LD_INT 1
12901: PPUSH
12902: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12906: LD_INT 7
12908: PPUSH
12909: LD_VAR 0 3
12913: PPUSH
12914: LD_INT 1
12916: PPUSH
12917: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12921: LD_INT 8
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: LD_INT 1
12931: PPUSH
12932: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12936: LD_INT 10
12938: PPUSH
12939: LD_VAR 0 3
12943: PPUSH
12944: LD_INT 1
12946: PPUSH
12947: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12951: LD_INT 11
12953: PPUSH
12954: LD_VAR 0 3
12958: PPUSH
12959: LD_INT 1
12961: PPUSH
12962: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12966: LD_INT 12
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12981: LD_INT 13
12983: PPUSH
12984: LD_VAR 0 3
12988: PPUSH
12989: LD_INT 1
12991: PPUSH
12992: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12996: LD_INT 14
12998: PPUSH
12999: LD_VAR 0 3
13003: PPUSH
13004: LD_INT 1
13006: PPUSH
13007: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
13011: LD_INT 15
13013: PPUSH
13014: LD_VAR 0 3
13018: PPUSH
13019: LD_INT 1
13021: PPUSH
13022: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
13026: LD_INT 16
13028: PPUSH
13029: LD_VAR 0 3
13033: PPUSH
13034: LD_INT 1
13036: PPUSH
13037: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
13041: LD_INT 17
13043: PPUSH
13044: LD_VAR 0 3
13048: PPUSH
13049: LD_INT 1
13051: PPUSH
13052: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
13056: LD_INT 18
13058: PPUSH
13059: LD_VAR 0 3
13063: PPUSH
13064: LD_INT 1
13066: PPUSH
13067: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
13071: LD_INT 19
13073: PPUSH
13074: LD_VAR 0 3
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
13086: LD_INT 20
13088: PPUSH
13089: LD_VAR 0 3
13093: PPUSH
13094: LD_INT 1
13096: PPUSH
13097: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
13101: LD_INT 21
13103: PPUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 1
13111: PPUSH
13112: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13116: LD_INT 23
13118: PPUSH
13119: LD_VAR 0 3
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13131: LD_INT 26
13133: PPUSH
13134: LD_VAR 0 3
13138: PPUSH
13139: LD_INT 1
13141: PPUSH
13142: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13146: LD_INT 27
13148: PPUSH
13149: LD_VAR 0 3
13153: PPUSH
13154: LD_INT 1
13156: PPUSH
13157: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13161: LD_INT 28
13163: PPUSH
13164: LD_VAR 0 3
13168: PPUSH
13169: LD_INT 1
13171: PPUSH
13172: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13176: LD_INT 29
13178: PPUSH
13179: LD_VAR 0 3
13183: PPUSH
13184: LD_INT 1
13186: PPUSH
13187: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13191: LD_INT 30
13193: PPUSH
13194: LD_VAR 0 3
13198: PPUSH
13199: LD_INT 1
13201: PPUSH
13202: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13206: LD_INT 31
13208: PPUSH
13209: LD_VAR 0 3
13213: PPUSH
13214: LD_INT 1
13216: PPUSH
13217: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13221: LD_INT 32
13223: PPUSH
13224: LD_VAR 0 3
13228: PPUSH
13229: LD_INT 1
13231: PPUSH
13232: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
13236: LD_INT 33
13238: PPUSH
13239: LD_VAR 0 3
13243: PPUSH
13244: LD_INT 1
13246: PPUSH
13247: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13251: LD_INT 36
13253: PPUSH
13254: LD_VAR 0 3
13258: PPUSH
13259: LD_INT 1
13261: PPUSH
13262: CALL_OW 324
// end ; 6 :
13266: GO 14276
13268: LD_INT 6
13270: DOUBLE
13271: EQUAL
13272: IFTRUE 13276
13274: GO 14201
13276: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13277: LD_INT 35
13279: PPUSH
13280: LD_VAR 0 3
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13292: LD_INT 45
13294: PPUSH
13295: LD_VAR 0 3
13299: PPUSH
13300: LD_INT 1
13302: PPUSH
13303: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13307: LD_INT 46
13309: PPUSH
13310: LD_VAR 0 3
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13322: LD_INT 47
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 1
13332: PPUSH
13333: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13337: LD_INT 1
13339: PPUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 1
13347: PPUSH
13348: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13352: LD_INT 2
13354: PPUSH
13355: LD_VAR 0 3
13359: PPUSH
13360: LD_INT 1
13362: PPUSH
13363: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13367: LD_INT 11
13369: PPUSH
13370: LD_VAR 0 3
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13382: LD_INT 20
13384: PPUSH
13385: LD_VAR 0 3
13389: PPUSH
13390: LD_INT 1
13392: PPUSH
13393: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13397: LD_INT 48
13399: PPUSH
13400: LD_VAR 0 3
13404: PPUSH
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13412: LD_INT 49
13414: PPUSH
13415: LD_VAR 0 3
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13427: LD_INT 50
13429: PPUSH
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 1
13437: PPUSH
13438: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13442: LD_INT 69
13444: PPUSH
13445: LD_VAR 0 3
13449: PPUSH
13450: LD_INT 1
13452: PPUSH
13453: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13457: LD_INT 39
13459: PPUSH
13460: LD_VAR 0 3
13464: PPUSH
13465: LD_INT 1
13467: PPUSH
13468: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13472: LD_INT 34
13474: PPUSH
13475: LD_VAR 0 3
13479: PPUSH
13480: LD_INT 1
13482: PPUSH
13483: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13487: LD_INT 42
13489: PPUSH
13490: LD_VAR 0 3
13494: PPUSH
13495: LD_INT 1
13497: PPUSH
13498: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13502: LD_INT 44
13504: PPUSH
13505: LD_VAR 0 3
13509: PPUSH
13510: LD_INT 1
13512: PPUSH
13513: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13517: LD_INT 41
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 1
13527: PPUSH
13528: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13532: LD_INT 13
13534: PPUSH
13535: LD_VAR 0 3
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13547: LD_INT 40
13549: PPUSH
13550: LD_VAR 0 3
13554: PPUSH
13555: LD_INT 1
13557: PPUSH
13558: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13562: LD_INT 43
13564: PPUSH
13565: LD_VAR 0 3
13569: PPUSH
13570: LD_INT 1
13572: PPUSH
13573: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13577: LD_INT 70
13579: PPUSH
13580: LD_VAR 0 3
13584: PPUSH
13585: LD_INT 1
13587: PPUSH
13588: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13592: LD_INT 23
13594: PPUSH
13595: LD_VAR 0 3
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13607: LD_INT 51
13609: PPUSH
13610: LD_VAR 0 3
13614: PPUSH
13615: LD_INT 1
13617: PPUSH
13618: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13622: LD_INT 52
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13637: LD_INT 6
13639: PPUSH
13640: LD_VAR 0 3
13644: PPUSH
13645: LD_INT 1
13647: PPUSH
13648: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13652: LD_INT 15
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: LD_INT 1
13662: PPUSH
13663: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13667: LD_INT 7
13669: PPUSH
13670: LD_VAR 0 3
13674: PPUSH
13675: LD_INT 1
13677: PPUSH
13678: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13682: LD_INT 12
13684: PPUSH
13685: LD_VAR 0 3
13689: PPUSH
13690: LD_INT 1
13692: PPUSH
13693: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13697: LD_INT 10
13699: PPUSH
13700: LD_VAR 0 3
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13712: LD_INT 17
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: LD_INT 1
13722: PPUSH
13723: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13727: LD_INT 18
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: LD_INT 1
13737: PPUSH
13738: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13742: LD_INT 60
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_INT 1
13752: PPUSH
13753: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13757: LD_INT 61
13759: PPUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 1
13767: PPUSH
13768: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13772: LD_INT 32
13774: PPUSH
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 1
13782: PPUSH
13783: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13787: LD_INT 27
13789: PPUSH
13790: LD_VAR 0 3
13794: PPUSH
13795: LD_INT 1
13797: PPUSH
13798: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13802: LD_INT 36
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13817: LD_INT 33
13819: PPUSH
13820: LD_VAR 0 3
13824: PPUSH
13825: LD_INT 1
13827: PPUSH
13828: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13832: LD_INT 9
13834: PPUSH
13835: LD_VAR 0 3
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13847: LD_INT 38
13849: PPUSH
13850: LD_VAR 0 3
13854: PPUSH
13855: LD_INT 1
13857: PPUSH
13858: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13862: LD_INT 57
13864: PPUSH
13865: LD_VAR 0 3
13869: PPUSH
13870: LD_INT 1
13872: PPUSH
13873: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13877: LD_INT 58
13879: PPUSH
13880: LD_VAR 0 3
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13892: LD_INT 28
13894: PPUSH
13895: LD_VAR 0 3
13899: PPUSH
13900: LD_INT 1
13902: PPUSH
13903: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13907: LD_INT 29
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: LD_INT 1
13917: PPUSH
13918: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13922: LD_INT 30
13924: PPUSH
13925: LD_VAR 0 3
13929: PPUSH
13930: LD_INT 1
13932: PPUSH
13933: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13937: LD_INT 37
13939: PPUSH
13940: LD_VAR 0 3
13944: PPUSH
13945: LD_INT 1
13947: PPUSH
13948: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13952: LD_INT 63
13954: PPUSH
13955: LD_VAR 0 3
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13967: LD_INT 64
13969: PPUSH
13970: LD_VAR 0 3
13974: PPUSH
13975: LD_INT 1
13977: PPUSH
13978: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13982: LD_INT 3
13984: PPUSH
13985: LD_VAR 0 3
13989: PPUSH
13990: LD_INT 1
13992: PPUSH
13993: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13997: LD_INT 4
13999: PPUSH
14000: LD_VAR 0 3
14004: PPUSH
14005: LD_INT 1
14007: PPUSH
14008: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
14012: LD_INT 5
14014: PPUSH
14015: LD_VAR 0 3
14019: PPUSH
14020: LD_INT 1
14022: PPUSH
14023: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
14027: LD_INT 8
14029: PPUSH
14030: LD_VAR 0 3
14034: PPUSH
14035: LD_INT 1
14037: PPUSH
14038: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
14042: LD_INT 66
14044: PPUSH
14045: LD_VAR 0 3
14049: PPUSH
14050: LD_INT 1
14052: PPUSH
14053: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
14057: LD_INT 67
14059: PPUSH
14060: LD_VAR 0 3
14064: PPUSH
14065: LD_INT 1
14067: PPUSH
14068: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
14072: LD_INT 21
14074: PPUSH
14075: LD_VAR 0 3
14079: PPUSH
14080: LD_INT 1
14082: PPUSH
14083: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
14087: LD_INT 22
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: LD_INT 1
14097: PPUSH
14098: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
14102: LD_INT 19
14104: PPUSH
14105: LD_VAR 0 3
14109: PPUSH
14110: LD_INT 1
14112: PPUSH
14113: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14117: LD_INT 26
14119: PPUSH
14120: LD_VAR 0 3
14124: PPUSH
14125: LD_INT 1
14127: PPUSH
14128: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14132: LD_INT 54
14134: PPUSH
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_INT 1
14142: PPUSH
14143: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14147: LD_INT 55
14149: PPUSH
14150: LD_VAR 0 3
14154: PPUSH
14155: LD_INT 1
14157: PPUSH
14158: CALL_OW 322
// for i = 0 to 39 do
14162: LD_ADDR_VAR 0 4
14166: PUSH
14167: DOUBLE
14168: LD_INT 0
14170: DEC
14171: ST_TO_ADDR
14172: LD_INT 39
14174: PUSH
14175: FOR_TO
14176: IFFALSE 14197
// SetRestrict ( i , side , true ) ;
14178: LD_VAR 0 4
14182: PPUSH
14183: LD_VAR 0 3
14187: PPUSH
14188: LD_INT 1
14190: PPUSH
14191: CALL_OW 324
14195: GO 14175
14197: POP
14198: POP
// end ; else
14199: GO 14276
14201: POP
// begin for i = 1 to 73 do
14202: LD_ADDR_VAR 0 4
14206: PUSH
14207: DOUBLE
14208: LD_INT 1
14210: DEC
14211: ST_TO_ADDR
14212: LD_INT 73
14214: PUSH
14215: FOR_TO
14216: IFFALSE 14237
// SetTech ( i , side , state_enabled ) ;
14218: LD_VAR 0 4
14222: PPUSH
14223: LD_VAR 0 3
14227: PPUSH
14228: LD_INT 1
14230: PPUSH
14231: CALL_OW 322
14235: GO 14215
14237: POP
14238: POP
// for i = 0 to 39 do
14239: LD_ADDR_VAR 0 4
14243: PUSH
14244: DOUBLE
14245: LD_INT 0
14247: DEC
14248: ST_TO_ADDR
14249: LD_INT 39
14251: PUSH
14252: FOR_TO
14253: IFFALSE 14274
// SetRestrict ( i , side , true ) ;
14255: LD_VAR 0 4
14259: PPUSH
14260: LD_VAR 0 3
14264: PPUSH
14265: LD_INT 1
14267: PPUSH
14268: CALL_OW 324
14272: GO 14252
14274: POP
14275: POP
// end ; end ; end ;
14276: GO 10281
14278: POP
14279: POP
// end ;
14280: LD_VAR 0 2
14284: RET
