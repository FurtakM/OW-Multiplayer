// export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 39
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 15
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 17
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 16
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 39
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 15
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 17
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 16
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; for i := 1 to 8 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 8
 398: PUSH
 399: FOR_TO
 400: IFFALSE 487
// if Multiplayer_GetPlayerIsSpec ( i ) then
 402: LD_VAR 0 2
 406: PPUSH
 407: CALL_OW 530
 411: IFFALSE 485
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 413: LD_ADDR_EXP 18
 417: PUSH
 418: LD_EXP 18
 422: PPUSH
 423: LD_VAR 0 2
 427: PPUSH
 428: LD_INT 0
 430: PPUSH
 431: CALL_OW 1
 435: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 436: LD_ADDR_EXP 16
 440: PUSH
 441: LD_EXP 16
 445: PPUSH
 446: LD_EXP 15
 450: PUSH
 451: LD_VAR 0 2
 455: ARRAY
 456: PPUSH
 457: LD_EXP 16
 461: PUSH
 462: LD_EXP 15
 466: PUSH
 467: LD_VAR 0 2
 471: ARRAY
 472: ARRAY
 473: PUSH
 474: LD_VAR 0 2
 478: DIFF
 479: PPUSH
 480: CALL_OW 1
 484: ST_TO_ADDR
// end ;
 485: GO 399
 487: POP
 488: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 489: LD_ADDR_EXP 21
 493: PUSH
 494: LD_INT 0
 496: PUSH
 497: LD_INT 0
 499: PUSH
 500: LD_INT 0
 502: PUSH
 503: LD_INT 0
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: LD_INT 0
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: ST_TO_ADDR
// for i := 1 to 8 do
 520: LD_ADDR_VAR 0 2
 524: PUSH
 525: DOUBLE
 526: LD_INT 1
 528: DEC
 529: ST_TO_ADDR
 530: LD_INT 8
 532: PUSH
 533: FOR_TO
 534: IFFALSE 581
// if Side_Positions [ i ] then
 536: LD_EXP 18
 540: PUSH
 541: LD_VAR 0 2
 545: ARRAY
 546: IFFALSE 579
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 548: LD_ADDR_EXP 21
 552: PUSH
 553: LD_EXP 21
 557: PPUSH
 558: LD_EXP 18
 562: PUSH
 563: LD_VAR 0 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 1
 578: ST_TO_ADDR
 579: GO 533
 581: POP
 582: POP
// Team_Game := Side_Teams [ your_side ] ;
 583: LD_ADDR_EXP 20
 587: PUSH
 588: LD_EXP 15
 592: PUSH
 593: LD_OWVAR 2
 597: ARRAY
 598: ST_TO_ADDR
// if Multiplayer then
 599: LD_OWVAR 4
 603: IFFALSE 805
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 426
 617: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 618: LD_ADDR_EXP 42
 622: PUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL_OW 426
 630: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 631: LD_ADDR_EXP 43
 635: PUSH
 636: LD_INT 2
 638: PPUSH
 639: CALL_OW 426
 643: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 644: LD_ADDR_EXP 44
 648: PUSH
 649: LD_INT 3
 651: PPUSH
 652: CALL_OW 426
 656: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 657: LD_ADDR_EXP 45
 661: PUSH
 662: LD_INT 4
 664: PPUSH
 665: CALL_OW 426
 669: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 670: LD_ADDR_EXP 46
 674: PUSH
 675: LD_INT 5
 677: PPUSH
 678: CALL_OW 426
 682: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 683: LD_ADDR_EXP 47
 687: PUSH
 688: LD_INT 1
 690: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 691: LD_ADDR_EXP 48
 695: PUSH
 696: LD_INT 10
 698: PPUSH
 699: CALL_OW 426
 703: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 704: LD_ADDR_EXP 49
 708: PUSH
 709: LD_INT 11
 711: PPUSH
 712: CALL_OW 426
 716: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 717: LD_ADDR_EXP 50
 721: PUSH
 722: LD_INT 12
 724: PPUSH
 725: CALL_OW 426
 729: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 730: LD_ADDR_EXP 51
 734: PUSH
 735: LD_INT 13
 737: PPUSH
 738: CALL_OW 426
 742: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 743: LD_ADDR_EXP 52
 747: PUSH
 748: LD_INT 14
 750: PPUSH
 751: CALL_OW 426
 755: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 756: LD_ADDR_EXP 53
 760: PUSH
 761: LD_INT 17
 763: PPUSH
 764: CALL_OW 426
 768: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 769: LD_ADDR_EXP 54
 773: PUSH
 774: LD_INT 20
 776: PPUSH
 777: CALL_OW 426
 781: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 782: LD_ADDR_VAR 0 3
 786: PUSH
 787: LD_INT 22
 789: PPUSH
 790: CALL_OW 426
 794: ST_TO_ADDR
// def_win_rules = 0 ;
 795: LD_ADDR_EXP 14
 799: PUSH
 800: LD_INT 0
 802: ST_TO_ADDR
// end else
 803: GO 937
// begin Randomize ;
 805: CALL_OW 10
// def_base_level := 2 ;
 809: LD_ADDR_EXP 41
 813: PUSH
 814: LD_INT 2
 816: ST_TO_ADDR
// def_amount_of_people := 0 ;
 817: LD_ADDR_EXP 42
 821: PUSH
 822: LD_INT 0
 824: ST_TO_ADDR
// def_skill_level := 1 ;
 825: LD_ADDR_EXP 43
 829: PUSH
 830: LD_INT 1
 832: ST_TO_ADDR
// def_starting_resources := 2 ;
 833: LD_ADDR_EXP 44
 837: PUSH
 838: LD_INT 2
 840: ST_TO_ADDR
// def_shipments_density := 1 ;
 841: LD_ADDR_EXP 45
 845: PUSH
 846: LD_INT 1
 848: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 849: LD_ADDR_EXP 46
 853: PUSH
 854: LD_INT 0
 856: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 857: LD_ADDR_EXP 47
 861: PUSH
 862: LD_INT 1
 864: ST_TO_ADDR
// def_shared_vision := 1 ;
 865: LD_ADDR_EXP 48
 869: PUSH
 870: LD_INT 1
 872: ST_TO_ADDR
// def_morale_flags := 1 ;
 873: LD_ADDR_EXP 49
 877: PUSH
 878: LD_INT 1
 880: ST_TO_ADDR
// def_siberite_detection := 1 ;
 881: LD_ADDR_EXP 50
 885: PUSH
 886: LD_INT 1
 888: ST_TO_ADDR
// def_people_respawning := 2 ;
 889: LD_ADDR_EXP 51
 893: PUSH
 894: LD_INT 2
 896: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 897: LD_ADDR_EXP 52
 901: PUSH
 902: LD_INT 3
 904: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 905: LD_ADDR_EXP 53
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// def_builduptime := 1 ;
 913: LD_ADDR_EXP 54
 917: PUSH
 918: LD_INT 1
 920: ST_TO_ADDR
// tech_level = 4 ;
 921: LD_ADDR_VAR 0 3
 925: PUSH
 926: LD_INT 4
 928: ST_TO_ADDR
// def_win_rules = 0 ;
 929: LD_ADDR_EXP 14
 933: PUSH
 934: LD_INT 0
 936: ST_TO_ADDR
// end ; if def_game_rules = 0 then
 937: LD_EXP 40
 941: PUSH
 942: LD_INT 0
 944: EQUAL
 945: IFFALSE 972
// begin if isSGUI then
 947: LD_OWVAR 83
 951: IFFALSE 959
// setMpTechs ( ) else
 953: CALL 13846 0 0
 957: GO 972
// begin SetMpTechLevel ( tech_level + 1 ) ;
 959: LD_VAR 0 3
 963: PUSH
 964: LD_INT 1
 966: PLUS
 967: PPUSH
 968: CALL 13993 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 972: LD_ADDR_EXP 1
 976: PUSH
 977: LD_INT 0
 979: PUSH
 980: LD_INT 1
 982: PUSH
 983: LD_INT 1
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: LIST
 990: PUSH
 991: LD_EXP 41
 995: PUSH
 996: LD_INT 1
 998: PLUS
 999: ARRAY
1000: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
1001: LD_ADDR_EXP 2
1005: PUSH
1006: LD_INT 0
1008: PUSH
1009: LD_INT 0
1011: PUSH
1012: LD_INT 3
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_EXP 41
1024: PUSH
1025: LD_INT 1
1027: PLUS
1028: ARRAY
1029: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1030: LD_ADDR_EXP 3
1034: PUSH
1035: LD_INT 9
1037: PUSH
1038: LD_INT 12
1040: PUSH
1041: LD_INT 15
1043: PUSH
1044: LD_INT 24
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 42
1057: PUSH
1058: LD_INT 1
1060: PLUS
1061: ARRAY
1062: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1063: LD_ADDR_EXP 4
1067: PUSH
1068: LD_INT 2
1070: PUSH
1071: LD_INT 3
1073: PUSH
1074: LD_INT 4
1076: PUSH
1077: LD_INT 5
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: PUSH
1086: LD_EXP 43
1090: PUSH
1091: LD_INT 1
1093: PLUS
1094: ARRAY
1095: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1096: LD_ADDR_EXP 6
1100: PUSH
1101: LD_INT 0
1103: PUSH
1104: LD_INT 0
1106: PUSH
1107: LD_INT 0
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: LIST
1114: PUSH
1115: LD_INT 30
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 50
1131: PUSH
1132: LD_INT 20
1134: PUSH
1135: LD_INT 0
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 80
1145: PUSH
1146: LD_INT 40
1148: PUSH
1149: LD_INT 20
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PUSH
1163: LD_EXP 44
1167: PUSH
1168: LD_INT 1
1170: PLUS
1171: ARRAY
1172: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1173: LD_ADDR_EXP 5
1177: PUSH
1178: LD_INT 10
1180: PUSH
1181: EMPTY
1182: LIST
1183: PUSH
1184: LD_INT 7
1186: PUSH
1187: LD_INT 14
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 6
1196: PUSH
1197: LD_INT 12
1199: PUSH
1200: LD_INT 18
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 5
1210: PUSH
1211: LD_INT 10
1213: PUSH
1214: LD_INT 15
1216: PUSH
1217: LD_INT 20
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_EXP 44
1236: PUSH
1237: LD_INT 1
1239: PLUS
1240: ARRAY
1241: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 ] [ def_shipments_density + 1 ] ;
1242: LD_ADDR_EXP 7
1246: PUSH
1247: LD_INT 150
1249: PUSH
1250: LD_INT 125
1252: PUSH
1253: LD_INT 100
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: PUSH
1261: LD_EXP 45
1265: PUSH
1266: LD_INT 1
1268: PLUS
1269: ARRAY
1270: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1271: LD_ADDR_EXP 11
1275: PUSH
1276: LD_INT 0
1278: PUSH
1279: LD_INT 10500
1281: PUSH
1282: LD_INT 6300
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: PUSH
1290: LD_EXP 51
1294: PUSH
1295: LD_INT 1
1297: PLUS
1298: ARRAY
1299: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1300: LD_ADDR_EXP 12
1304: PUSH
1305: LD_INT 0
1307: PUSH
1308: LD_INT 31500
1310: PUSH
1311: LD_INT 10500
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: PUSH
1319: LD_EXP 51
1323: PUSH
1324: LD_INT 1
1326: PLUS
1327: ARRAY
1328: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1329: LD_ADDR_EXP 9
1333: PUSH
1334: LD_INT 0
1336: PUSH
1337: LD_INT 1
1339: PUSH
1340: LD_INT 2
1342: PUSH
1343: LD_INT 3
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: PUSH
1352: LD_EXP 52
1356: PUSH
1357: LD_INT 1
1359: PLUS
1360: ARRAY
1361: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1362: LD_ADDR_EXP 8
1366: PUSH
1367: LD_INT 1
1369: NEG
1370: PUSH
1371: LD_INT 350
1373: PUSH
1374: LD_INT 700
1376: PUSH
1377: LD_INT 1400
1379: PUSH
1380: LD_INT 0
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: PUSH
1390: LD_EXP 49
1394: PUSH
1395: LD_INT 1
1397: PLUS
1398: ARRAY
1399: ST_TO_ADDR
// battle_flags_id = [ ] ;
1400: LD_ADDR_EXP 29
1404: PUSH
1405: EMPTY
1406: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1407: LD_ADDR_EXP 13
1411: PUSH
1412: LD_INT 0
1414: PUSH
1415: LD_INT 1
1417: PUSH
1418: LD_INT 63000
1420: PUSH
1421: LD_INT 126000
1423: PUSH
1424: LD_INT 189000
1426: PUSH
1427: LD_INT 252000
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: PUSH
1438: LD_EXP 53
1442: PUSH
1443: LD_INT 1
1445: PLUS
1446: ARRAY
1447: ST_TO_ADDR
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
1448: LD_ADDR_EXP 38
1452: PUSH
1453: LD_INT 9
1455: PUSH
1456: LD_INT 10
1458: PUSH
1459: LD_INT 11
1461: PUSH
1462: LD_INT 12
1464: PUSH
1465: LD_INT 13
1467: PUSH
1468: LD_INT 14
1470: PUSH
1471: LD_INT 15
1473: PUSH
1474: LD_INT 16
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: LIST
1481: LIST
1482: LIST
1483: LIST
1484: LIST
1485: LIST
1486: ST_TO_ADDR
// end ;
1487: LD_VAR 0 1
1491: RET
// function init_map ; var i , j ; begin
1492: LD_INT 0
1494: PPUSH
1495: PPUSH
1496: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1497: LD_ADDR_EXP 25
1501: PUSH
1502: LD_INT 17
1504: PUSH
1505: LD_INT 4
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 72
1514: PUSH
1515: LD_INT 5
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 157
1524: PUSH
1525: LD_INT 22
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 205
1534: PUSH
1535: LD_INT 111
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: PUSH
1542: LD_INT 221
1544: PUSH
1545: LD_INT 195
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: PUSH
1552: LD_INT 169
1554: PUSH
1555: LD_INT 196
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 93
1564: PUSH
1565: LD_INT 177
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 52
1574: PUSH
1575: LD_INT 92
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: EMPTY
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1592: LD_ADDR_EXP 26
1596: PUSH
1597: LD_INT 17
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 16
1609: PUSH
1610: LD_INT 23
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: PUSH
1621: LD_INT 72
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: PUSH
1631: LD_INT 88
1633: PUSH
1634: LD_INT 28
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 157
1647: PUSH
1648: LD_INT 22
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 133
1657: PUSH
1658: LD_INT 12
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: PUSH
1669: LD_INT 205
1671: PUSH
1672: LD_INT 111
1674: PUSH
1675: EMPTY
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 200
1681: PUSH
1682: LD_INT 95
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: EMPTY
1690: LIST
1691: LIST
1692: PUSH
1693: LD_INT 221
1695: PUSH
1696: LD_INT 195
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PUSH
1703: LD_INT 249
1705: PUSH
1706: LD_INT 190
1708: PUSH
1709: EMPTY
1710: LIST
1711: LIST
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: LD_INT 169
1719: PUSH
1720: LD_INT 196
1722: PUSH
1723: EMPTY
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 180
1729: PUSH
1730: LD_INT 197
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 93
1743: PUSH
1744: LD_INT 177
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PUSH
1751: LD_INT 114
1753: PUSH
1754: LD_INT 194
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: PUSH
1765: LD_INT 52
1767: PUSH
1768: LD_INT 92
1770: PUSH
1771: EMPTY
1772: LIST
1773: LIST
1774: PUSH
1775: LD_INT 58
1777: PUSH
1778: LD_INT 107
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1799: LD_ADDR_EXP 27
1803: PUSH
1804: LD_INT 12
1806: PUSH
1807: LD_INT 12
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: PUSH
1814: LD_INT 99
1816: PUSH
1817: LD_INT 19
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 139
1826: PUSH
1827: LD_INT 5
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 207
1836: PUSH
1837: LD_INT 100
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: LD_INT 244
1846: PUSH
1847: LD_INT 181
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PUSH
1854: LD_INT 183
1856: PUSH
1857: LD_INT 196
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: LD_INT 117
1866: PUSH
1867: LD_INT 195
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 54
1876: PUSH
1877: LD_INT 104
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: LIST
1893: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1894: LD_ADDR_EXP 28
1898: PUSH
1899: EMPTY
1900: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1901: LD_ADDR_EXP 22
1905: PUSH
1906: LD_INT 32
1908: PUSH
1909: LD_INT 24
1911: PUSH
1912: LD_INT 2
1914: PUSH
1915: EMPTY
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: LD_INT 87
1922: PUSH
1923: LD_INT 18
1925: PUSH
1926: LD_INT 3
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 146
1936: PUSH
1937: LD_INT 28
1939: PUSH
1940: LD_INT 3
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: LIST
1947: PUSH
1948: LD_INT 188
1950: PUSH
1951: LD_INT 103
1953: PUSH
1954: LD_INT 4
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: LIST
1961: PUSH
1962: LD_INT 224
1964: PUSH
1965: LD_INT 180
1967: PUSH
1968: LD_INT 5
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 168
1978: PUSH
1979: LD_INT 180
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 105
1992: PUSH
1993: LD_INT 170
1995: PUSH
1996: LD_INT 0
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 71
2006: PUSH
2007: LD_INT 102
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: LIST
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: ST_TO_ADDR
// for i in depot_def do
2028: LD_ADDR_VAR 0 2
2032: PUSH
2033: LD_EXP 22
2037: PUSH
2038: FOR_IN
2039: IFFALSE 2115
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
2041: LD_ADDR_EXP 24
2045: PUSH
2046: LD_EXP 24
2050: PUSH
2051: LD_VAR 0 2
2055: PUSH
2056: LD_INT 1
2058: ARRAY
2059: PPUSH
2060: LD_VAR 0 2
2064: PUSH
2065: LD_INT 3
2067: ARRAY
2068: PPUSH
2069: LD_INT 4
2071: NEG
2072: PPUSH
2073: CALL_OW 272
2077: PUSH
2078: LD_VAR 0 2
2082: PUSH
2083: LD_INT 2
2085: ARRAY
2086: PPUSH
2087: LD_VAR 0 2
2091: PUSH
2092: LD_INT 3
2094: ARRAY
2095: PPUSH
2096: LD_INT 4
2098: NEG
2099: PPUSH
2100: CALL_OW 273
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: EMPTY
2110: LIST
2111: ADD
2112: ST_TO_ADDR
2113: GO 2038
2115: POP
2116: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
2117: LD_ADDR_EXP 23
2121: PUSH
2122: LD_INT 50
2124: PUSH
2125: LD_INT 40
2127: PUSH
2128: LD_INT 5
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: PUSH
2136: LD_INT 47
2138: PUSH
2139: LD_INT 17
2141: PUSH
2142: LD_INT 4
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_INT 29
2152: PUSH
2153: LD_INT 39
2155: PUSH
2156: LD_INT 0
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: PUSH
2169: LD_INT 107
2171: PUSH
2172: LD_INT 27
2174: PUSH
2175: LD_INT 4
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: PUSH
2183: LD_INT 67
2185: PUSH
2186: LD_INT 10
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 91
2199: PUSH
2200: LD_INT 35
2202: PUSH
2203: LD_INT 0
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 165
2218: PUSH
2219: LD_INT 44
2221: PUSH
2222: LD_INT 5
2224: PUSH
2225: EMPTY
2226: LIST
2227: LIST
2228: LIST
2229: PUSH
2230: LD_INT 123
2232: PUSH
2233: LD_INT 16
2235: PUSH
2236: LD_INT 2
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: LIST
2243: PUSH
2244: LD_INT 141
2246: PUSH
2247: LD_INT 39
2249: PUSH
2250: LD_INT 0
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: LIST
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: LD_INT 179
2265: PUSH
2266: LD_INT 85
2268: PUSH
2269: LD_INT 3
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 172
2279: PUSH
2280: LD_INT 102
2282: PUSH
2283: LD_INT 1
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 196
2293: PUSH
2294: LD_INT 118
2296: PUSH
2297: LD_INT 5
2299: PUSH
2300: EMPTY
2301: LIST
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: PUSH
2310: LD_INT 210
2312: PUSH
2313: LD_INT 182
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: LIST
2323: PUSH
2324: LD_INT 226
2326: PUSH
2327: LD_INT 164
2329: PUSH
2330: LD_INT 3
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: PUSH
2338: LD_INT 209
2340: PUSH
2341: LD_INT 164
2343: PUSH
2344: LD_INT 2
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: LD_INT 156
2359: PUSH
2360: LD_INT 183
2362: PUSH
2363: LD_INT 1
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: PUSH
2371: LD_INT 184
2373: PUSH
2374: LD_INT 184
2376: PUSH
2377: LD_INT 4
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: LIST
2384: PUSH
2385: LD_INT 161
2387: PUSH
2388: LD_INT 166
2390: PUSH
2391: LD_INT 3
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: LIST
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 86
2406: PUSH
2407: LD_INT 156
2409: PUSH
2410: LD_INT 2
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: LIST
2417: PUSH
2418: LD_INT 124
2420: PUSH
2421: LD_INT 180
2423: PUSH
2424: LD_INT 4
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: LIST
2431: PUSH
2432: LD_INT 106
2434: PUSH
2435: LD_INT 155
2437: PUSH
2438: LD_INT 3
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 87
2453: PUSH
2454: LD_INT 102
2456: PUSH
2457: LD_INT 4
2459: PUSH
2460: EMPTY
2461: LIST
2462: LIST
2463: LIST
2464: PUSH
2465: LD_INT 63
2467: PUSH
2468: LD_INT 83
2470: PUSH
2471: LD_INT 3
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: PUSH
2479: LD_INT 79
2481: PUSH
2482: LD_INT 120
2484: PUSH
2485: LD_INT 0
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: ST_TO_ADDR
// for i = 1 to Side_Positions do
2508: LD_ADDR_VAR 0 2
2512: PUSH
2513: DOUBLE
2514: LD_INT 1
2516: DEC
2517: ST_TO_ADDR
2518: LD_EXP 18
2522: PUSH
2523: FOR_TO
2524: IFFALSE 2654
// begin if not Side_Positions [ i ] then
2526: LD_EXP 18
2530: PUSH
2531: LD_VAR 0 2
2535: ARRAY
2536: NOT
2537: IFFALSE 2541
// continue ;
2539: GO 2523
// if def_extra_oil_deposits then
2541: LD_EXP 46
2545: IFFALSE 2603
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2547: LD_ADDR_VAR 0 3
2551: PUSH
2552: LD_EXP 26
2556: PUSH
2557: LD_EXP 18
2561: PUSH
2562: LD_VAR 0 2
2566: ARRAY
2567: ARRAY
2568: PUSH
2569: FOR_IN
2570: IFFALSE 2599
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2572: LD_VAR 0 3
2576: PUSH
2577: LD_INT 1
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 3
2585: PUSH
2586: LD_INT 2
2588: ARRAY
2589: PPUSH
2590: LD_INT 2
2592: PPUSH
2593: CALL_OW 62
2597: GO 2569
2599: POP
2600: POP
2601: GO 2652
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2603: LD_EXP 25
2607: PUSH
2608: LD_EXP 18
2612: PUSH
2613: LD_VAR 0 2
2617: ARRAY
2618: ARRAY
2619: PUSH
2620: LD_INT 1
2622: ARRAY
2623: PPUSH
2624: LD_EXP 25
2628: PUSH
2629: LD_EXP 18
2633: PUSH
2634: LD_VAR 0 2
2638: ARRAY
2639: ARRAY
2640: PUSH
2641: LD_INT 2
2643: ARRAY
2644: PPUSH
2645: LD_INT 2
2647: PPUSH
2648: CALL_OW 62
// end ;
2652: GO 2523
2654: POP
2655: POP
// if def_extra_sib_deposits then
2656: LD_EXP 47
2660: IFFALSE 2814
// for i = 1 to Side_Positions do
2662: LD_ADDR_VAR 0 2
2666: PUSH
2667: DOUBLE
2668: LD_INT 1
2670: DEC
2671: ST_TO_ADDR
2672: LD_EXP 18
2676: PUSH
2677: FOR_TO
2678: IFFALSE 2812
// begin if not Side_Positions [ i ] then
2680: LD_EXP 18
2684: PUSH
2685: LD_VAR 0 2
2689: ARRAY
2690: NOT
2691: IFFALSE 2695
// continue ;
2693: GO 2677
// if def_extra_sib_deposits = 2 then
2695: LD_EXP 47
2699: PUSH
2700: LD_INT 2
2702: EQUAL
2703: IFFALSE 2761
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2705: LD_ADDR_VAR 0 3
2709: PUSH
2710: LD_EXP 28
2714: PUSH
2715: LD_EXP 18
2719: PUSH
2720: LD_VAR 0 2
2724: ARRAY
2725: ARRAY
2726: PUSH
2727: FOR_IN
2728: IFFALSE 2757
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2730: LD_VAR 0 3
2734: PUSH
2735: LD_INT 1
2737: ARRAY
2738: PPUSH
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 2
2746: ARRAY
2747: PPUSH
2748: LD_INT 3
2750: PPUSH
2751: CALL_OW 62
2755: GO 2727
2757: POP
2758: POP
2759: GO 2810
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2761: LD_EXP 27
2765: PUSH
2766: LD_EXP 18
2770: PUSH
2771: LD_VAR 0 2
2775: ARRAY
2776: ARRAY
2777: PUSH
2778: LD_INT 1
2780: ARRAY
2781: PPUSH
2782: LD_EXP 27
2786: PUSH
2787: LD_EXP 18
2791: PUSH
2792: LD_VAR 0 2
2796: ARRAY
2797: ARRAY
2798: PUSH
2799: LD_INT 2
2801: ARRAY
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: CALL_OW 62
// end ;
2810: GO 2677
2812: POP
2813: POP
// end ;
2814: LD_VAR 0 1
2818: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2819: LD_INT 0
2821: PPUSH
2822: PPUSH
2823: PPUSH
// if not Team_Game then
2824: LD_EXP 20
2828: NOT
2829: IFFALSE 2927
// begin for i = 1 to 8 do
2831: LD_ADDR_VAR 0 2
2835: PUSH
2836: DOUBLE
2837: LD_INT 1
2839: DEC
2840: ST_TO_ADDR
2841: LD_INT 8
2843: PUSH
2844: FOR_TO
2845: IFFALSE 2923
// for j = 1 to 8 do
2847: LD_ADDR_VAR 0 3
2851: PUSH
2852: DOUBLE
2853: LD_INT 1
2855: DEC
2856: ST_TO_ADDR
2857: LD_INT 8
2859: PUSH
2860: FOR_TO
2861: IFFALSE 2919
// if i <> j then
2863: LD_VAR 0 2
2867: PUSH
2868: LD_VAR 0 3
2872: NONEQUAL
2873: IFFALSE 2897
// SetAttitude ( i , j , att_neutral , true ) else
2875: LD_VAR 0 2
2879: PPUSH
2880: LD_VAR 0 3
2884: PPUSH
2885: LD_INT 0
2887: PPUSH
2888: LD_INT 1
2890: PPUSH
2891: CALL_OW 80
2895: GO 2917
// SetAttitude ( i , j , att_friend , true ) ;
2897: LD_VAR 0 2
2901: PPUSH
2902: LD_VAR 0 3
2906: PPUSH
2907: LD_INT 1
2909: PPUSH
2910: LD_INT 1
2912: PPUSH
2913: CALL_OW 80
2917: GO 2860
2919: POP
2920: POP
2921: GO 2844
2923: POP
2924: POP
// end else
2925: GO 3102
// begin if def_shared_vision then
2927: LD_EXP 48
2931: IFFALSE 2996
// begin for i in Teams do
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: LD_EXP 16
2942: PUSH
2943: FOR_IN
2944: IFFALSE 2994
// for j = 2 to i do
2946: LD_ADDR_VAR 0 3
2950: PUSH
2951: DOUBLE
2952: LD_INT 2
2954: DEC
2955: ST_TO_ADDR
2956: LD_VAR 0 2
2960: PUSH
2961: FOR_TO
2962: IFFALSE 2990
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2964: LD_VAR 0 2
2968: PUSH
2969: LD_VAR 0 3
2973: ARRAY
2974: PPUSH
2975: LD_VAR 0 2
2979: PUSH
2980: LD_INT 1
2982: ARRAY
2983: PPUSH
2984: CALL_OW 343
2988: GO 2961
2990: POP
2991: POP
2992: GO 2943
2994: POP
2995: POP
// end ; for i = 1 to 8 do
2996: LD_ADDR_VAR 0 2
3000: PUSH
3001: DOUBLE
3002: LD_INT 1
3004: DEC
3005: ST_TO_ADDR
3006: LD_INT 8
3008: PUSH
3009: FOR_TO
3010: IFFALSE 3100
// for j = 1 to 8 do
3012: LD_ADDR_VAR 0 3
3016: PUSH
3017: DOUBLE
3018: LD_INT 1
3020: DEC
3021: ST_TO_ADDR
3022: LD_INT 8
3024: PUSH
3025: FOR_TO
3026: IFFALSE 3096
// if Side_Teams [ i ] = Side_Teams [ j ] then
3028: LD_EXP 15
3032: PUSH
3033: LD_VAR 0 2
3037: ARRAY
3038: PUSH
3039: LD_EXP 15
3043: PUSH
3044: LD_VAR 0 3
3048: ARRAY
3049: EQUAL
3050: IFFALSE 3074
// SetAttitude ( i , j , att_friend , true ) else
3052: LD_VAR 0 2
3056: PPUSH
3057: LD_VAR 0 3
3061: PPUSH
3062: LD_INT 1
3064: PPUSH
3065: LD_INT 1
3067: PPUSH
3068: CALL_OW 80
3072: GO 3094
// SetAttitude ( i , j , att_enemy , true ) ;
3074: LD_VAR 0 2
3078: PPUSH
3079: LD_VAR 0 3
3083: PPUSH
3084: LD_INT 2
3086: PPUSH
3087: LD_INT 1
3089: PPUSH
3090: CALL_OW 80
3094: GO 3025
3096: POP
3097: POP
3098: GO 3009
3100: POP
3101: POP
// end ; end ;
3102: LD_VAR 0 1
3106: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3107: LD_INT 0
3109: PPUSH
3110: PPUSH
3111: PPUSH
3112: PPUSH
// result := [ ] ;
3113: LD_ADDR_VAR 0 7
3117: PUSH
3118: EMPTY
3119: ST_TO_ADDR
// for i := 1 to count do
3120: LD_ADDR_VAR 0 8
3124: PUSH
3125: DOUBLE
3126: LD_INT 1
3128: DEC
3129: ST_TO_ADDR
3130: LD_VAR 0 1
3134: PUSH
3135: FOR_TO
3136: IFFALSE 3554
// begin uc_direction := Rand ( 0 , 5 ) ;
3138: LD_ADDR_OWVAR 24
3142: PUSH
3143: LD_INT 0
3145: PPUSH
3146: LD_INT 5
3148: PPUSH
3149: CALL_OW 12
3153: ST_TO_ADDR
// if commander then
3154: LD_LOC 1
3158: IFFALSE 3267
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3160: LD_ADDR_OWVAR 26
3164: PUSH
3165: LD_OWVAR 19
3169: PUSH
3170: LD_OWVAR 20
3174: ARRAY
3175: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3176: LD_INT 1
3178: PPUSH
3179: LD_INT 2
3181: PPUSH
3182: CALL_OW 12
3186: PPUSH
3187: LD_VAR 0 2
3191: PPUSH
3192: LD_EXP 4
3196: PUSH
3197: LD_INT 2
3199: PLUS
3200: PPUSH
3201: CALL_OW 380
// hc_importance := 105 ;
3205: LD_ADDR_OWVAR 32
3209: PUSH
3210: LD_INT 105
3212: ST_TO_ADDR
// commander := false ;
3213: LD_ADDR_LOC 1
3217: PUSH
3218: LD_INT 0
3220: ST_TO_ADDR
// if Multiplayer then
3221: LD_OWVAR 4
3225: IFFALSE 3265
// begin hc_gallery := MULTIAVATARS ;
3227: LD_ADDR_OWVAR 33
3231: PUSH
3232: LD_STRING MULTIAVATARS
3234: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3235: LD_ADDR_OWVAR 34
3239: PUSH
3240: LD_OWVAR 20
3244: PPUSH
3245: CALL_OW 525
3249: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3250: LD_ADDR_OWVAR 27
3254: PUSH
3255: LD_OWVAR 20
3259: PPUSH
3260: CALL_OW 526
3264: ST_TO_ADDR
// end ; end else
3265: GO 3330
// begin hc_name :=  ;
3267: LD_ADDR_OWVAR 26
3271: PUSH
3272: LD_STRING 
3274: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3275: LD_INT 1
3277: PPUSH
3278: LD_INT 2
3280: PPUSH
3281: CALL_OW 12
3285: PPUSH
3286: LD_VAR 0 2
3290: PPUSH
3291: LD_EXP 4
3295: PPUSH
3296: CALL_OW 380
// hc_importance := 0 ;
3300: LD_ADDR_OWVAR 32
3304: PUSH
3305: LD_INT 0
3307: ST_TO_ADDR
// if Multiplayer then
3308: LD_OWVAR 4
3312: IFFALSE 3330
// begin hc_gallery :=  ;
3314: LD_ADDR_OWVAR 33
3318: PUSH
3319: LD_STRING 
3321: ST_TO_ADDR
// hc_face_number := 0 ;
3322: LD_ADDR_OWVAR 34
3326: PUSH
3327: LD_INT 0
3329: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3330: LD_ADDR_VAR 0 10
3334: PUSH
3335: CALL_OW 44
3339: ST_TO_ADDR
// if global_defined then
3340: LD_LOC 3
3344: IFFALSE 3484
// begin if ( cl = class_soldier ) then
3346: LD_VAR 0 2
3350: PUSH
3351: LD_INT 1
3353: EQUAL
3354: IFFALSE 3374
// j := i + soldiers_created else
3356: LD_ADDR_VAR 0 9
3360: PUSH
3361: LD_VAR 0 8
3365: PUSH
3366: LD_LOC 4
3370: PLUS
3371: ST_TO_ADDR
3372: GO 3384
// j := i ;
3374: LD_ADDR_VAR 0 9
3378: PUSH
3379: LD_VAR 0 8
3383: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3384: LD_LOC 2
3388: PUSH
3389: LD_VAR 0 2
3393: ARRAY
3394: PUSH
3395: LD_VAR 0 9
3399: ARRAY
3400: PPUSH
3401: LD_VAR 0 10
3405: PPUSH
3406: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3410: LD_VAR 0 10
3414: PPUSH
3415: LD_INT 2
3417: PPUSH
3418: LD_LOC 2
3422: PUSH
3423: LD_VAR 0 2
3427: ARRAY
3428: PUSH
3429: LD_VAR 0 9
3433: ARRAY
3434: PPUSH
3435: LD_INT 2
3437: PPUSH
3438: CALL_OW 260
3442: PPUSH
3443: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3447: LD_VAR 0 10
3451: PPUSH
3452: LD_INT 1
3454: PPUSH
3455: LD_LOC 2
3459: PUSH
3460: LD_VAR 0 2
3464: ARRAY
3465: PUSH
3466: LD_VAR 0 9
3470: ARRAY
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: CALL_OW 260
3479: PPUSH
3480: CALL_OW 239
// end ; if building then
3484: LD_VAR 0 6
3488: IFFALSE 3506
// PlaceHumanInUnit ( un , building ) else
3490: LD_VAR 0 10
3494: PPUSH
3495: LD_VAR 0 6
3499: PPUSH
3500: CALL_OW 52
3504: GO 3533
// PlaceUnitXYR ( un , x , y , r , false ) ;
3506: LD_VAR 0 10
3510: PPUSH
3511: LD_VAR 0 3
3515: PPUSH
3516: LD_VAR 0 4
3520: PPUSH
3521: LD_VAR 0 5
3525: PPUSH
3526: LD_INT 0
3528: PPUSH
3529: CALL_OW 50
// result := result ^ [ un ] ;
3533: LD_ADDR_VAR 0 7
3537: PUSH
3538: LD_VAR 0 7
3542: PUSH
3543: LD_VAR 0 10
3547: PUSH
3548: EMPTY
3549: LIST
3550: ADD
3551: ST_TO_ADDR
// end ;
3552: GO 3135
3554: POP
3555: POP
// if not global_defined then
3556: LD_LOC 3
3560: NOT
3561: IFFALSE 3639
// if ( global_units >= cl ) then
3563: LD_LOC 2
3567: PUSH
3568: LD_VAR 0 2
3572: GREATEREQUAL
3573: IFFALSE 3614
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3575: LD_ADDR_LOC 2
3579: PUSH
3580: LD_LOC 2
3584: PPUSH
3585: LD_VAR 0 2
3589: PPUSH
3590: LD_LOC 2
3594: PUSH
3595: LD_VAR 0 2
3599: ARRAY
3600: PUSH
3601: LD_VAR 0 7
3605: ADD
3606: PPUSH
3607: CALL_OW 1
3611: ST_TO_ADDR
3612: GO 3639
// global_units := Replace ( global_units , cl , result ) ;
3614: LD_ADDR_LOC 2
3618: PUSH
3619: LD_LOC 2
3623: PPUSH
3624: LD_VAR 0 2
3628: PPUSH
3629: LD_VAR 0 7
3633: PPUSH
3634: CALL_OW 1
3638: ST_TO_ADDR
// if commander then
3639: LD_LOC 1
3643: IFFALSE 3690
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3645: LD_ADDR_EXP 30
3649: PUSH
3650: LD_EXP 30
3654: PPUSH
3655: LD_OWVAR 20
3659: PPUSH
3660: LD_EXP 30
3664: PUSH
3665: LD_OWVAR 20
3669: ARRAY
3670: PUSH
3671: LD_VAR 0 10
3675: ADD
3676: PPUSH
3677: CALL_OW 1
3681: ST_TO_ADDR
// commander := false ;
3682: LD_ADDR_LOC 1
3686: PUSH
3687: LD_INT 0
3689: ST_TO_ADDR
// end ; end ;
3690: LD_VAR 0 7
3694: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3695: LD_INT 0
3697: PPUSH
3698: PPUSH
3699: PPUSH
3700: PPUSH
3701: PPUSH
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
// pos := Side_Positions [ side ] ;
3706: LD_ADDR_VAR 0 3
3710: PUSH
3711: LD_EXP 18
3715: PUSH
3716: LD_VAR 0 1
3720: ARRAY
3721: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3722: LD_ADDR_OWVAR 21
3726: PUSH
3727: LD_EXP 19
3731: PUSH
3732: LD_VAR 0 1
3736: ARRAY
3737: ST_TO_ADDR
// uc_side := side ;
3738: LD_ADDR_OWVAR 20
3742: PUSH
3743: LD_VAR 0 1
3747: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3748: LD_ADDR_VAR 0 4
3752: PUSH
3753: LD_EXP 22
3757: PUSH
3758: LD_VAR 0 3
3762: ARRAY
3763: PUSH
3764: LD_INT 1
3766: ARRAY
3767: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3768: LD_ADDR_VAR 0 5
3772: PUSH
3773: LD_EXP 22
3777: PUSH
3778: LD_VAR 0 3
3782: ARRAY
3783: PUSH
3784: LD_INT 2
3786: ARRAY
3787: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3788: LD_ADDR_VAR 0 6
3792: PUSH
3793: LD_EXP 22
3797: PUSH
3798: LD_VAR 0 3
3802: ARRAY
3803: PUSH
3804: LD_INT 3
3806: ARRAY
3807: ST_TO_ADDR
// if is_depot then
3808: LD_EXP 1
3812: IFFALSE 3945
// begin bc_type = b_depot ;
3814: LD_ADDR_OWVAR 42
3818: PUSH
3819: LD_INT 0
3821: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3822: LD_ADDR_VAR 0 10
3826: PUSH
3827: LD_VAR 0 4
3831: PPUSH
3832: LD_VAR 0 5
3836: PPUSH
3837: LD_VAR 0 6
3841: PPUSH
3842: CALL_OW 47
3846: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3847: LD_VAR 0 10
3851: PPUSH
3852: LD_STRING @
3854: PUSH
3855: LD_VAR 0 1
3859: STR
3860: PPUSH
3861: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3865: LD_VAR 0 10
3869: PPUSH
3870: CALL_OW 274
3874: PPUSH
3875: LD_INT 1
3877: PPUSH
3878: LD_EXP 6
3882: PUSH
3883: LD_INT 1
3885: ARRAY
3886: PPUSH
3887: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3891: LD_VAR 0 10
3895: PPUSH
3896: CALL_OW 274
3900: PPUSH
3901: LD_INT 2
3903: PPUSH
3904: LD_EXP 6
3908: PUSH
3909: LD_INT 2
3911: ARRAY
3912: PPUSH
3913: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3917: LD_VAR 0 10
3921: PPUSH
3922: CALL_OW 274
3926: PPUSH
3927: LD_INT 3
3929: PPUSH
3930: LD_EXP 6
3934: PUSH
3935: LD_INT 3
3937: ARRAY
3938: PPUSH
3939: CALL_OW 277
// end else
3943: GO 4089
// begin for i := 1 to 3 do
3945: LD_ADDR_VAR 0 7
3949: PUSH
3950: DOUBLE
3951: LD_INT 1
3953: DEC
3954: ST_TO_ADDR
3955: LD_INT 3
3957: PUSH
3958: FOR_TO
3959: IFFALSE 4087
// begin r := starting_resources [ i ] ;
3961: LD_ADDR_VAR 0 8
3965: PUSH
3966: LD_EXP 6
3970: PUSH
3971: LD_VAR 0 7
3975: ARRAY
3976: ST_TO_ADDR
// while r >= 10 do
3977: LD_VAR 0 8
3981: PUSH
3982: LD_INT 10
3984: GREATEREQUAL
3985: IFFALSE 4085
// if r > 50 then
3987: LD_VAR 0 8
3991: PUSH
3992: LD_INT 50
3994: GREATER
3995: IFFALSE 4041
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3997: LD_VAR 0 7
4001: PPUSH
4002: LD_INT 5
4004: PPUSH
4005: LD_VAR 0 4
4009: PPUSH
4010: LD_VAR 0 5
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: LD_INT 0
4020: PPUSH
4021: CALL_OW 60
// r := r - 50 ;
4025: LD_ADDR_VAR 0 8
4029: PUSH
4030: LD_VAR 0 8
4034: PUSH
4035: LD_INT 50
4037: MINUS
4038: ST_TO_ADDR
// end else
4039: GO 4083
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4041: LD_VAR 0 7
4045: PPUSH
4046: LD_VAR 0 8
4050: PUSH
4051: LD_INT 10
4053: DIV
4054: PPUSH
4055: LD_VAR 0 4
4059: PPUSH
4060: LD_VAR 0 5
4064: PPUSH
4065: LD_INT 4
4067: PPUSH
4068: LD_INT 0
4070: PPUSH
4071: CALL_OW 60
// r := 0 ;
4075: LD_ADDR_VAR 0 8
4079: PUSH
4080: LD_INT 0
4082: ST_TO_ADDR
// end ;
4083: GO 3977
// end ;
4085: GO 3958
4087: POP
4088: POP
// end ; for r in starting_crates do
4089: LD_ADDR_VAR 0 8
4093: PUSH
4094: LD_EXP 5
4098: PUSH
4099: FOR_IN
4100: IFFALSE 4132
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4102: LD_INT 1
4104: PPUSH
4105: LD_INT 5
4107: PPUSH
4108: LD_VAR 0 4
4112: PPUSH
4113: LD_VAR 0 5
4117: PPUSH
4118: LD_VAR 0 8
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 60
4130: GO 4099
4132: POP
4133: POP
// if def_morale_flags then
4134: LD_EXP 49
4138: IFFALSE 4277
// begin x := start_def [ pos ] [ 1 ] ;
4140: LD_ADDR_VAR 0 4
4144: PUSH
4145: LD_EXP 24
4149: PUSH
4150: LD_VAR 0 3
4154: ARRAY
4155: PUSH
4156: LD_INT 1
4158: ARRAY
4159: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4160: LD_ADDR_VAR 0 5
4164: PUSH
4165: LD_EXP 24
4169: PUSH
4170: LD_VAR 0 3
4174: ARRAY
4175: PUSH
4176: LD_INT 2
4178: ARRAY
4179: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4180: LD_VAR 0 4
4184: PPUSH
4185: LD_VAR 0 5
4189: PPUSH
4190: LD_INT 12
4192: PPUSH
4193: LD_INT 2
4195: PPUSH
4196: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4200: LD_ADDR_EXP 29
4204: PUSH
4205: LD_EXP 29
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: LD_VAR 0 4
4219: PPUSH
4220: LD_VAR 0 5
4224: PPUSH
4225: LD_INT 1
4227: PUSH
4228: LD_INT 100
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PUSH
4235: LD_INT 2
4237: PUSH
4238: LD_INT 50
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PUSH
4245: LD_INT 3
4247: PUSH
4248: LD_INT 20
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PUSH
4255: LD_INT 20
4257: PUSH
4258: LD_INT 100
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: PPUSH
4271: CALL_OW 418
4275: ADD
4276: ST_TO_ADDR
// end ; commander := true ;
4277: LD_ADDR_LOC 1
4281: PUSH
4282: LD_INT 1
4284: ST_TO_ADDR
// soldiers_created := 0 ;
4285: LD_ADDR_LOC 4
4289: PUSH
4290: LD_INT 0
4292: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4293: LD_ADDR_VAR 0 7
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_EXP 2
4307: PUSH
4308: FOR_TO
4309: IFFALSE 4462
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4311: LD_ADDR_VAR 0 4
4315: PUSH
4316: LD_EXP 23
4320: PUSH
4321: LD_VAR 0 3
4325: ARRAY
4326: PUSH
4327: LD_VAR 0 7
4331: ARRAY
4332: PUSH
4333: LD_INT 1
4335: ARRAY
4336: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4337: LD_ADDR_VAR 0 5
4341: PUSH
4342: LD_EXP 23
4346: PUSH
4347: LD_VAR 0 3
4351: ARRAY
4352: PUSH
4353: LD_VAR 0 7
4357: ARRAY
4358: PUSH
4359: LD_INT 2
4361: ARRAY
4362: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4363: LD_ADDR_VAR 0 6
4367: PUSH
4368: LD_EXP 23
4372: PUSH
4373: LD_VAR 0 3
4377: ARRAY
4378: PUSH
4379: LD_VAR 0 7
4383: ARRAY
4384: PUSH
4385: LD_INT 3
4387: ARRAY
4388: ST_TO_ADDR
// bc_type := b_breastwork ;
4389: LD_ADDR_OWVAR 42
4393: PUSH
4394: LD_INT 31
4396: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4397: LD_ADDR_VAR 0 9
4401: PUSH
4402: LD_VAR 0 4
4406: PPUSH
4407: LD_VAR 0 5
4411: PPUSH
4412: LD_VAR 0 6
4416: PPUSH
4417: CALL_OW 47
4421: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4422: LD_INT 1
4424: PPUSH
4425: LD_INT 1
4427: PPUSH
4428: LD_INT 0
4430: PPUSH
4431: LD_INT 0
4433: PPUSH
4434: LD_INT 0
4436: PPUSH
4437: LD_VAR 0 9
4441: PPUSH
4442: CALL 3107 0 6
// soldiers_created := soldiers_created + 1 ;
4446: LD_ADDR_LOC 4
4450: PUSH
4451: LD_LOC 4
4455: PUSH
4456: LD_INT 1
4458: PLUS
4459: ST_TO_ADDR
// end ;
4460: GO 4308
4462: POP
4463: POP
// x := start_def [ pos ] [ 1 ] ;
4464: LD_ADDR_VAR 0 4
4468: PUSH
4469: LD_EXP 24
4473: PUSH
4474: LD_VAR 0 3
4478: ARRAY
4479: PUSH
4480: LD_INT 1
4482: ARRAY
4483: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4484: LD_ADDR_VAR 0 5
4488: PUSH
4489: LD_EXP 24
4493: PUSH
4494: LD_VAR 0 3
4498: ARRAY
4499: PUSH
4500: LD_INT 2
4502: ARRAY
4503: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4504: LD_LOC 8
4508: PUSH
4509: LD_EXP 2
4513: MINUS
4514: PPUSH
4515: LD_INT 1
4517: PPUSH
4518: LD_VAR 0 4
4522: PPUSH
4523: LD_VAR 0 5
4527: PPUSH
4528: LD_INT 5
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL 3107 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4538: LD_LOC 5
4542: PPUSH
4543: LD_INT 2
4545: PPUSH
4546: LD_VAR 0 4
4550: PPUSH
4551: LD_VAR 0 5
4555: PPUSH
4556: LD_INT 5
4558: PPUSH
4559: LD_INT 0
4561: PPUSH
4562: CALL 3107 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4566: LD_LOC 7
4570: PPUSH
4571: LD_INT 3
4573: PPUSH
4574: LD_VAR 0 4
4578: PPUSH
4579: LD_VAR 0 5
4583: PPUSH
4584: LD_INT 5
4586: PPUSH
4587: LD_INT 0
4589: PPUSH
4590: CALL 3107 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4594: LD_LOC 6
4598: PPUSH
4599: LD_INT 4
4601: PPUSH
4602: LD_VAR 0 4
4606: PPUSH
4607: LD_VAR 0 5
4611: PPUSH
4612: LD_INT 5
4614: PPUSH
4615: LD_INT 0
4617: PPUSH
4618: CALL 3107 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4622: LD_EXP 50
4626: PUSH
4627: LD_INT 20
4629: PPUSH
4630: LD_VAR 0 1
4634: PPUSH
4635: CALL_OW 321
4639: PUSH
4640: LD_INT 1
4642: EQUAL
4643: AND
4644: IFFALSE 4661
// SetTech ( tech_SibDet , side , state_researched ) ;
4646: LD_INT 20
4648: PPUSH
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_INT 2
4656: PPUSH
4657: CALL_OW 322
// if def_siberite_bomb = 1 then
4661: LD_EXP 53
4665: PUSH
4666: LD_INT 1
4668: EQUAL
4669: IFFALSE 4703
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4671: LD_INT 25
4673: PPUSH
4674: LD_VAR 0 1
4678: PPUSH
4679: LD_INT 1
4681: PPUSH
4682: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4686: LD_INT 73
4688: PPUSH
4689: LD_VAR 0 1
4693: PPUSH
4694: LD_INT 1
4696: PPUSH
4697: CALL_OW 322
// end else
4701: GO 4733
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4703: LD_INT 25
4705: PPUSH
4706: LD_VAR 0 1
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4718: LD_INT 73
4720: PPUSH
4721: LD_VAR 0 1
4725: PPUSH
4726: LD_INT 0
4728: PPUSH
4729: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4733: LD_INT 24
4735: PPUSH
4736: LD_VAR 0 1
4740: PPUSH
4741: LD_INT 0
4743: PPUSH
4744: CALL_OW 322
// global_defined := true ;
4748: LD_ADDR_LOC 3
4752: PUSH
4753: LD_INT 1
4755: ST_TO_ADDR
// end ;
4756: LD_VAR 0 2
4760: RET
// function prepare_sides ; var i ; begin
4761: LD_INT 0
4763: PPUSH
4764: PPUSH
// global_units := [ ] ;
4765: LD_ADDR_LOC 2
4769: PUSH
4770: EMPTY
4771: ST_TO_ADDR
// global_defined := false ;
4772: LD_ADDR_LOC 3
4776: PUSH
4777: LD_INT 0
4779: ST_TO_ADDR
// CountClassMembers ;
4780: CALL 4830 0 0
// for i := 1 to 8 do
4784: LD_ADDR_VAR 0 2
4788: PUSH
4789: DOUBLE
4790: LD_INT 1
4792: DEC
4793: ST_TO_ADDR
4794: LD_INT 8
4796: PUSH
4797: FOR_TO
4798: IFFALSE 4823
// if Side_Positions [ i ] then
4800: LD_EXP 18
4804: PUSH
4805: LD_VAR 0 2
4809: ARRAY
4810: IFFALSE 4821
// prepare_side ( i ) ;
4812: LD_VAR 0 2
4816: PPUSH
4817: CALL 3695 0 1
4821: GO 4797
4823: POP
4824: POP
// end ;
4825: LD_VAR 0 1
4829: RET
// function CountClassMembers ; var Mode ; begin
4830: LD_INT 0
4832: PPUSH
4833: PPUSH
// if No_Mechs then
4834: LD_EXP 55
4838: IFFALSE 4850
// Mode := 2 else
4840: LD_ADDR_VAR 0 2
4844: PUSH
4845: LD_INT 2
4847: ST_TO_ADDR
4848: GO 4858
// Mode := 1 ;
4850: LD_ADDR_VAR 0 2
4854: PUSH
4855: LD_INT 1
4857: ST_TO_ADDR
// neng := number_of_people ;
4858: LD_ADDR_LOC 5
4862: PUSH
4863: LD_EXP 3
4867: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4868: LD_ADDR_LOC 8
4872: PUSH
4873: LD_LOC 5
4877: PUSH
4878: LD_INT 4
4880: PUSH
4881: LD_INT 3
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_VAR 0 2
4892: ARRAY
4893: DIV
4894: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4895: LD_LOC 8
4899: PUSH
4900: LD_EXP 2
4904: LESS
4905: IFFALSE 4917
// nsol := number_of_breastworks ;
4907: LD_ADDR_LOC 8
4911: PUSH
4912: LD_EXP 2
4916: ST_TO_ADDR
// neng := neng - nsol ;
4917: LD_ADDR_LOC 5
4921: PUSH
4922: LD_LOC 5
4926: PUSH
4927: LD_LOC 8
4931: MINUS
4932: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4933: LD_ADDR_LOC 6
4937: PUSH
4938: LD_LOC 5
4942: PUSH
4943: LD_INT 3
4945: PUSH
4946: LD_INT 2
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: LD_VAR 0 2
4957: ARRAY
4958: DIV
4959: ST_TO_ADDR
// if ( nsci < 1 ) then
4960: LD_LOC 6
4964: PUSH
4965: LD_INT 1
4967: LESS
4968: IFFALSE 4978
// nsci := 1 ;
4970: LD_ADDR_LOC 6
4974: PUSH
4975: LD_INT 1
4977: ST_TO_ADDR
// neng := neng - nsci ;
4978: LD_ADDR_LOC 5
4982: PUSH
4983: LD_LOC 5
4987: PUSH
4988: LD_LOC 6
4992: MINUS
4993: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4994: LD_ADDR_LOC 7
4998: PUSH
4999: LD_LOC 5
5003: PUSH
5004: LD_INT 2
5006: DIV
5007: PUSH
5008: LD_INT 0
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: LD_VAR 0 2
5019: ARRAY
5020: ST_TO_ADDR
// neng := neng - nmech ;
5021: LD_ADDR_LOC 5
5025: PUSH
5026: LD_LOC 5
5030: PUSH
5031: LD_LOC 7
5035: MINUS
5036: ST_TO_ADDR
// if ( neng < 1 ) then
5037: LD_LOC 5
5041: PUSH
5042: LD_INT 1
5044: LESS
5045: IFFALSE 5055
// neng := 1 ;
5047: LD_ADDR_LOC 5
5051: PUSH
5052: LD_INT 1
5054: ST_TO_ADDR
// end ;
5055: LD_VAR 0 1
5059: RET
// starting begin disable ( 98 ) ;
5060: LD_INT 98
5062: DISABLE_MARKED
// disable ( 99 ) ;
5063: LD_INT 99
5065: DISABLE_MARKED
// disable ( 100 ) ;
5066: LD_INT 100
5068: DISABLE_MARKED
// disable ( 400 ) ;
5069: LD_INT 400
5071: DISABLE_MARKED
// disable ( 401 ) ;
5072: LD_INT 401
5074: DISABLE_MARKED
// disable ( 600 ) ;
5075: LD_INT 600
5077: DISABLE_MARKED
// mp_selectmsg := true ;
5078: LD_ADDR_OWVAR 13
5082: PUSH
5083: LD_INT 1
5085: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5086: CALL 68 0 0
// init_map ;
5090: CALL 1492 0 0
// init_respawning ;
5094: CALL 5802 0 0
// set_shared_visions_and_alliances ;
5098: CALL 2819 0 0
// ResetFog ;
5102: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5106: LD_OWVAR 2
5110: PPUSH
5111: CALL_OW 520
// prepare_sides ;
5115: CALL 4761 0 0
// Init_Win_Condition ;
5119: CALL 12483 0 0
// InitLimits ;
5123: CALL 11143 0 0
// ShowTimer ;
5127: CALL 12080 0 0
// music_nat := Side_Nations [ your_side ] ;
5131: LD_ADDR_OWVAR 71
5135: PUSH
5136: LD_EXP 19
5140: PUSH
5141: LD_OWVAR 2
5145: ARRAY
5146: ST_TO_ADDR
// if IAmSpec then
5147: CALL_OW 531
5151: IFFALSE 5175
// begin fogoff ( true ) ;
5153: LD_INT 1
5155: PPUSH
5156: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
5160: LD_INT 130
5162: PPUSH
5163: LD_INT 100
5165: PPUSH
5166: CALL_OW 86
// enable ( 400 ) ;
5170: LD_INT 400
5172: ENABLE_MARKED
// end else
5173: GO 5221
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5175: LD_EXP 24
5179: PUSH
5180: LD_EXP 18
5184: PUSH
5185: LD_OWVAR 2
5189: ARRAY
5190: ARRAY
5191: PUSH
5192: LD_INT 1
5194: ARRAY
5195: PPUSH
5196: LD_EXP 24
5200: PUSH
5201: LD_EXP 18
5205: PUSH
5206: LD_OWVAR 2
5210: ARRAY
5211: ARRAY
5212: PUSH
5213: LD_INT 2
5215: ARRAY
5216: PPUSH
5217: CALL_OW 86
// end ; InitApeman ;
5221: CALL 6587 0 0
// if def_builduptime then
5225: LD_EXP 54
5229: IFFALSE 5235
// BeginBuildUp ;
5231: CALL 8310 0 0
// end ;
5235: END
// every 0 0$1 do
5236: GO 5238
5238: DISABLE
// if ( def_siberite_bomb > 1 ) then
5239: LD_EXP 53
5243: PUSH
5244: LD_INT 1
5246: GREATER
5247: IFFALSE 5262
// begin wait ( siberite_bomb_Delay ) ;
5249: LD_EXP 13
5253: PPUSH
5254: CALL_OW 67
// EnableSibFiss ;
5258: CALL 5263 0 0
// end ;
5262: END
// function EnableSibFiss ; var i ; begin
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
// for i := 1 to 8 do
5267: LD_ADDR_VAR 0 2
5271: PUSH
5272: DOUBLE
5273: LD_INT 1
5275: DEC
5276: ST_TO_ADDR
5277: LD_INT 8
5279: PUSH
5280: FOR_TO
5281: IFFALSE 5327
// if Side_Positions [ i ] then
5283: LD_EXP 18
5287: PUSH
5288: LD_VAR 0 2
5292: ARRAY
5293: IFFALSE 5325
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5295: LD_INT 25
5297: PPUSH
5298: LD_VAR 0 2
5302: PPUSH
5303: LD_INT 1
5305: PPUSH
5306: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5310: LD_INT 73
5312: PPUSH
5313: LD_VAR 0 2
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 322
// end ;
5325: GO 5280
5327: POP
5328: POP
// end ; end_of_file
5329: LD_VAR 0 1
5333: RET
// every 1 1$0 + 0 0$0.3 do
5334: GO 5336
5336: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5337: LD_INT 4
5339: PPUSH
5340: LD_INT 5
5342: PPUSH
5343: CALL_OW 12
5347: PPUSH
5348: LD_INT 1
5350: PPUSH
5351: CALL_OW 57
// enable ;
5355: ENABLE
// end ;
5356: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5357: GO 5359
5359: DISABLE
5360: LD_INT 0
5362: PPUSH
5363: PPUSH
// begin case tick of 1 .. 1 1$0 :
5364: LD_OWVAR 1
5368: PUSH
5369: LD_INT 1
5371: DOUBLE
5372: GREATEREQUAL
5373: IFFALSE 5381
5375: LD_INT 2100
5377: DOUBLE
5378: LESSEQUAL
5379: IFTRUE 5383
5381: GO 5411
5383: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5384: LD_EXP 7
5388: PUSH
5389: LD_INT 100
5391: DIVREAL
5392: PUSH
5393: LD_INT 350
5395: PPUSH
5396: LD_INT 700
5398: PPUSH
5399: CALL_OW 12
5403: MUL
5404: PPUSH
5405: CALL_OW 67
5409: GO 5713
5411: LD_INT 2100
5413: PUSH
5414: LD_INT 1
5416: PLUS
5417: DOUBLE
5418: GREATEREQUAL
5419: IFFALSE 5427
5421: LD_INT 10500
5423: DOUBLE
5424: LESSEQUAL
5425: IFTRUE 5429
5427: GO 5457
5429: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5430: LD_EXP 7
5434: PUSH
5435: LD_INT 100
5437: DIVREAL
5438: PUSH
5439: LD_INT 700
5441: PPUSH
5442: LD_INT 1225
5444: PPUSH
5445: CALL_OW 12
5449: MUL
5450: PPUSH
5451: CALL_OW 67
5455: GO 5713
5457: LD_INT 10500
5459: PUSH
5460: LD_INT 1
5462: PLUS
5463: DOUBLE
5464: GREATEREQUAL
5465: IFFALSE 5473
5467: LD_INT 21000
5469: DOUBLE
5470: LESSEQUAL
5471: IFTRUE 5475
5473: GO 5503
5475: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5476: LD_EXP 7
5480: PUSH
5481: LD_INT 100
5483: DIVREAL
5484: PUSH
5485: LD_INT 1225
5487: PPUSH
5488: LD_INT 1750
5490: PPUSH
5491: CALL_OW 12
5495: MUL
5496: PPUSH
5497: CALL_OW 67
5501: GO 5713
5503: LD_INT 21000
5505: PUSH
5506: LD_INT 1
5508: PLUS
5509: DOUBLE
5510: GREATEREQUAL
5511: IFFALSE 5519
5513: LD_INT 42000
5515: DOUBLE
5516: LESSEQUAL
5517: IFTRUE 5521
5519: GO 5549
5521: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5522: LD_EXP 7
5526: PUSH
5527: LD_INT 100
5529: DIVREAL
5530: PUSH
5531: LD_INT 1750
5533: PPUSH
5534: LD_INT 2450
5536: PPUSH
5537: CALL_OW 12
5541: MUL
5542: PPUSH
5543: CALL_OW 67
5547: GO 5713
5549: LD_INT 42000
5551: PUSH
5552: LD_INT 1
5554: PLUS
5555: DOUBLE
5556: GREATEREQUAL
5557: IFFALSE 5565
5559: LD_INT 63000
5561: DOUBLE
5562: LESSEQUAL
5563: IFTRUE 5567
5565: GO 5595
5567: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5568: LD_EXP 7
5572: PUSH
5573: LD_INT 100
5575: DIVREAL
5576: PUSH
5577: LD_INT 2450
5579: PPUSH
5580: LD_INT 2800
5582: PPUSH
5583: CALL_OW 12
5587: MUL
5588: PPUSH
5589: CALL_OW 67
5593: GO 5713
5595: LD_INT 63000
5597: PUSH
5598: LD_INT 1
5600: PLUS
5601: DOUBLE
5602: GREATEREQUAL
5603: IFFALSE 5611
5605: LD_INT 105000
5607: DOUBLE
5608: LESSEQUAL
5609: IFTRUE 5613
5611: GO 5641
5613: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5614: LD_EXP 7
5618: PUSH
5619: LD_INT 100
5621: DIVREAL
5622: PUSH
5623: LD_INT 2800
5625: PPUSH
5626: LD_INT 3325
5628: PPUSH
5629: CALL_OW 12
5633: MUL
5634: PPUSH
5635: CALL_OW 67
5639: GO 5713
5641: LD_INT 105000
5643: PUSH
5644: LD_INT 1
5646: PLUS
5647: DOUBLE
5648: GREATEREQUAL
5649: IFFALSE 5657
5651: LD_INT 630000
5653: DOUBLE
5654: LESSEQUAL
5655: IFTRUE 5659
5657: GO 5687
5659: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
5660: LD_EXP 7
5664: PUSH
5665: LD_INT 100
5667: DIVREAL
5668: PUSH
5669: LD_INT 3325
5671: PPUSH
5672: LD_INT 4200
5674: PPUSH
5675: CALL_OW 12
5679: MUL
5680: PPUSH
5681: CALL_OW 67
5685: GO 5713
5687: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5688: LD_EXP 7
5692: PUSH
5693: LD_INT 100
5695: DIVREAL
5696: PUSH
5697: LD_INT 4200
5699: PPUSH
5700: LD_INT 5250
5702: PPUSH
5703: CALL_OW 12
5707: MUL
5708: PPUSH
5709: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5713: LD_ADDR_VAR 0 2
5717: PUSH
5718: LD_INT 3
5720: PPUSH
5721: LD_INT 5
5723: PPUSH
5724: CALL_OW 12
5728: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5729: LD_ADDR_VAR 0 1
5733: PUSH
5734: LD_EXP 18
5738: PUSH
5739: LD_INT 0
5741: PUSH
5742: EMPTY
5743: LIST
5744: DIFF
5745: PUSH
5746: FOR_IN
5747: IFFALSE 5796
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5749: LD_VAR 0 2
5753: PPUSH
5754: LD_EXP 24
5758: PUSH
5759: LD_VAR 0 1
5763: ARRAY
5764: PUSH
5765: LD_INT 1
5767: ARRAY
5768: PPUSH
5769: LD_EXP 24
5773: PUSH
5774: LD_VAR 0 1
5778: ARRAY
5779: PUSH
5780: LD_INT 2
5782: ARRAY
5783: PPUSH
5784: LD_INT 20
5786: PPUSH
5787: LD_INT 1
5789: PPUSH
5790: CALL_OW 56
5794: GO 5746
5796: POP
5797: POP
// enable ;
5798: ENABLE
// end ; end_of_file
5799: PPOPN 2
5801: END
// var respawn , inqueue ; export function init_respawning ; begin
5802: LD_INT 0
5804: PPUSH
// respawn := Rand ( 1 , 8 ) ;
5805: LD_ADDR_LOC 9
5809: PUSH
5810: LD_INT 1
5812: PPUSH
5813: LD_INT 8
5815: PPUSH
5816: CALL_OW 12
5820: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5821: LD_ADDR_LOC 10
5825: PUSH
5826: LD_INT 0
5828: PUSH
5829: LD_INT 0
5831: PUSH
5832: LD_INT 0
5834: PUSH
5835: LD_INT 0
5837: PUSH
5838: LD_INT 0
5840: PUSH
5841: LD_INT 0
5843: PUSH
5844: LD_INT 0
5846: PUSH
5847: LD_INT 0
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: ST_TO_ADDR
// end ;
5860: LD_VAR 0 1
5864: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5865: GO 5867
5867: DISABLE
5868: LD_INT 0
5870: PPUSH
5871: PPUSH
5872: PPUSH
5873: PPUSH
// begin if respawning_time_max = 0 then
5874: LD_EXP 12
5878: PUSH
5879: LD_INT 0
5881: EQUAL
5882: IFFALSE 5886
// exit ;
5884: GO 6393
// if respawn = 8 then
5886: LD_LOC 9
5890: PUSH
5891: LD_INT 8
5893: EQUAL
5894: IFFALSE 5906
// respawn := 1 else
5896: LD_ADDR_LOC 9
5900: PUSH
5901: LD_INT 1
5903: ST_TO_ADDR
5904: GO 5920
// respawn := respawn + 1 ;
5906: LD_ADDR_LOC 9
5910: PUSH
5911: LD_LOC 9
5915: PUSH
5916: LD_INT 1
5918: PLUS
5919: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5920: LD_EXP 18
5924: PUSH
5925: LD_LOC 9
5929: ARRAY
5930: PUSH
5931: LD_LOC 10
5935: PUSH
5936: LD_LOC 9
5940: ARRAY
5941: NOT
5942: AND
5943: IFFALSE 6392
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5945: LD_ADDR_VAR 0 1
5949: PUSH
5950: LD_INT 21
5952: PUSH
5953: LD_INT 1
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 22
5962: PUSH
5963: LD_LOC 9
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PUSH
5972: LD_INT 3
5974: PUSH
5975: LD_INT 23
5977: PUSH
5978: LD_INT 0
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: PPUSH
5991: CALL_OW 69
5995: ST_TO_ADDR
// if n < number_of_people then
5996: LD_VAR 0 1
6000: PUSH
6001: LD_EXP 3
6005: LESS
6006: IFFALSE 6389
// begin aktresp := respawn ;
6008: LD_ADDR_VAR 0 3
6012: PUSH
6013: LD_LOC 9
6017: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
6018: LD_ADDR_LOC 10
6022: PUSH
6023: LD_LOC 10
6027: PPUSH
6028: LD_VAR 0 3
6032: PPUSH
6033: LD_INT 1
6035: PPUSH
6036: CALL_OW 1
6040: ST_TO_ADDR
// enable ;
6041: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6042: LD_EXP 11
6046: PPUSH
6047: LD_EXP 12
6051: PPUSH
6052: CALL_OW 12
6056: PPUSH
6057: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6061: LD_ADDR_LOC 10
6065: PUSH
6066: LD_LOC 10
6070: PPUSH
6071: LD_VAR 0 3
6075: PPUSH
6076: LD_INT 0
6078: PPUSH
6079: CALL_OW 1
6083: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6084: LD_ADDR_VAR 0 2
6088: PUSH
6089: LD_INT 21
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 2
6101: PUSH
6102: LD_INT 30
6104: PUSH
6105: LD_INT 0
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 30
6114: PUSH
6115: LD_INT 1
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: LIST
6126: PUSH
6127: LD_INT 50
6129: PUSH
6130: EMPTY
6131: LIST
6132: PUSH
6133: LD_INT 22
6135: PUSH
6136: LD_VAR 0 3
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: PPUSH
6151: CALL_OW 69
6155: ST_TO_ADDR
// if building_list = 0 then
6156: LD_VAR 0 2
6160: PUSH
6161: LD_INT 0
6163: EQUAL
6164: IFFALSE 6209
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6166: LD_ADDR_VAR 0 2
6170: PUSH
6171: LD_INT 21
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 50
6183: PUSH
6184: EMPTY
6185: LIST
6186: PUSH
6187: LD_INT 22
6189: PUSH
6190: LD_VAR 0 3
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 69
6208: ST_TO_ADDR
// if building_list = 0 then
6209: LD_VAR 0 2
6213: PUSH
6214: LD_INT 0
6216: EQUAL
6217: IFFALSE 6221
// exit ;
6219: GO 6393
// hc_name :=  ;
6221: LD_ADDR_OWVAR 26
6225: PUSH
6226: LD_STRING 
6228: ST_TO_ADDR
// hc_importance := 0 ;
6229: LD_ADDR_OWVAR 32
6233: PUSH
6234: LD_INT 0
6236: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6237: LD_INT 0
6239: PPUSH
6240: LD_INT 0
6242: PPUSH
6243: LD_EXP 4
6247: PUSH
6248: LD_INT 2
6250: DIV
6251: PPUSH
6252: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6256: LD_ADDR_OWVAR 21
6260: PUSH
6261: LD_EXP 19
6265: PUSH
6266: LD_VAR 0 3
6270: ARRAY
6271: ST_TO_ADDR
// uc_side := aktresp ;
6272: LD_ADDR_OWVAR 20
6276: PUSH
6277: LD_VAR 0 3
6281: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6282: LD_ADDR_VAR 0 4
6286: PUSH
6287: LD_VAR 0 2
6291: PUSH
6292: LD_INT 1
6294: PPUSH
6295: LD_VAR 0 2
6299: PUSH
6300: LD_INT 0
6302: PLUS
6303: PPUSH
6304: CALL_OW 12
6308: ARRAY
6309: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6310: LD_VAR 0 4
6314: PPUSH
6315: CALL_OW 266
6319: PUSH
6320: LD_INT 0
6322: PUSH
6323: LD_INT 1
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: IN
6330: IFFALSE 6342
// n = 25 else
6332: LD_ADDR_VAR 0 1
6336: PUSH
6337: LD_INT 25
6339: ST_TO_ADDR
6340: GO 6350
// n = 10 ;
6342: LD_ADDR_VAR 0 1
6346: PUSH
6347: LD_INT 10
6349: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6350: CALL_OW 44
6354: PPUSH
6355: LD_VAR 0 4
6359: PPUSH
6360: CALL_OW 250
6364: PPUSH
6365: LD_VAR 0 4
6369: PPUSH
6370: CALL_OW 251
6374: PPUSH
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_INT 1
6382: PPUSH
6383: CALL_OW 50
// end else
6387: GO 6390
// enable ;
6389: ENABLE
// end else
6390: GO 6393
// enable ;
6392: ENABLE
// end ; end_of_file
6393: PPOPN 4
6395: END
// every 20 20$00 trigger apemanNumber do
6396: LD_EXP 31
6400: IFFALSE 6433
6402: GO 6404
6404: DISABLE
// begin enable ;
6405: ENABLE
// if apeLevel >= 8 then
6406: LD_EXP 36
6410: PUSH
6411: LD_INT 8
6413: GREATEREQUAL
6414: IFFALSE 6419
// disable else
6416: DISABLE
6417: GO 6433
// apeLevel := apeLevel + 1 ;
6419: LD_ADDR_EXP 36
6423: PUSH
6424: LD_EXP 36
6428: PUSH
6429: LD_INT 1
6431: PLUS
6432: ST_TO_ADDR
// end ;
6433: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6434: LD_EXP 31
6438: PUSH
6439: LD_EXP 32
6443: LESS
6444: IFFALSE 6584
6446: GO 6448
6448: DISABLE
6449: LD_INT 0
6451: PPUSH
6452: PPUSH
6453: PPUSH
6454: PPUSH
// begin enable ;
6455: ENABLE
// for i := 1 to apemanPos do
6456: LD_ADDR_VAR 0 1
6460: PUSH
6461: DOUBLE
6462: LD_INT 1
6464: DEC
6465: ST_TO_ADDR
6466: LD_EXP 34
6470: PUSH
6471: FOR_TO
6472: IFFALSE 6582
// begin if apemanPlayerCount [ i ] then
6474: LD_EXP 35
6478: PUSH
6479: LD_VAR 0 1
6483: ARRAY
6484: IFFALSE 6580
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6486: LD_EXP 35
6490: PUSH
6491: LD_VAR 0 1
6495: ARRAY
6496: PUSH
6497: LD_EXP 34
6501: PUSH
6502: LD_VAR 0 1
6506: ARRAY
6507: GREATER
6508: IFFALSE 6580
// begin ape := PrepareApeman ;
6510: LD_ADDR_VAR 0 2
6514: PUSH
6515: CALL 7103 0 0
6519: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6520: LD_VAR 0 2
6524: PPUSH
6525: LD_EXP 37
6529: PUSH
6530: LD_VAR 0 1
6534: ARRAY
6535: PPUSH
6536: LD_INT 0
6538: PPUSH
6539: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6543: LD_ADDR_EXP 34
6547: PUSH
6548: LD_EXP 34
6552: PPUSH
6553: LD_VAR 0 1
6557: PPUSH
6558: LD_EXP 34
6562: PUSH
6563: LD_VAR 0 1
6567: ARRAY
6568: PUSH
6569: LD_VAR 0 2
6573: UNION
6574: PPUSH
6575: CALL_OW 1
6579: ST_TO_ADDR
// end ; end ; end ;
6580: GO 6471
6582: POP
6583: POP
// end ;
6584: PPOPN 4
6586: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6587: LD_INT 0
6589: PPUSH
6590: PPUSH
6591: PPUSH
6592: PPUSH
6593: PPUSH
6594: PPUSH
6595: PPUSH
// playersAmount := 0 ;
6596: LD_ADDR_VAR 0 3
6600: PUSH
6601: LD_INT 0
6603: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6604: LD_ADDR_VAR 0 7
6608: PUSH
6609: LD_INT 1
6611: PUSH
6612: LD_INT 2
6614: PUSH
6615: LD_INT 3
6617: PUSH
6618: LD_INT 4
6620: PUSH
6621: LD_INT 5
6623: PUSH
6624: LD_INT 6
6626: PUSH
6627: LD_INT 7
6629: PUSH
6630: LD_INT 8
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6643: LD_ADDR_EXP 37
6647: PUSH
6648: LD_INT 0
6650: PUSH
6651: LD_INT 0
6653: PUSH
6654: LD_INT 0
6656: PUSH
6657: LD_INT 0
6659: PUSH
6660: LD_INT 0
6662: PUSH
6663: LD_INT 0
6665: PUSH
6666: LD_INT 0
6668: PUSH
6669: LD_INT 0
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: ST_TO_ADDR
// for j = 1 to Side_Positions do
6682: LD_ADDR_VAR 0 4
6686: PUSH
6687: DOUBLE
6688: LD_INT 1
6690: DEC
6691: ST_TO_ADDR
6692: LD_EXP 18
6696: PUSH
6697: FOR_TO
6698: IFFALSE 6765
// if Side_Positions [ j ] then
6700: LD_EXP 18
6704: PUSH
6705: LD_VAR 0 4
6709: ARRAY
6710: IFFALSE 6763
// begin playersAmount := playersAmount + 1 ;
6712: LD_ADDR_VAR 0 3
6716: PUSH
6717: LD_VAR 0 3
6721: PUSH
6722: LD_INT 1
6724: PLUS
6725: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6726: LD_ADDR_EXP 37
6730: PUSH
6731: LD_EXP 37
6735: PPUSH
6736: LD_VAR 0 4
6740: PPUSH
6741: LD_VAR 0 7
6745: PUSH
6746: LD_EXP 18
6750: PUSH
6751: LD_VAR 0 4
6755: ARRAY
6756: ARRAY
6757: PPUSH
6758: CALL_OW 1
6762: ST_TO_ADDR
// end ;
6763: GO 6697
6765: POP
6766: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6767: LD_ADDR_EXP 33
6771: PUSH
6772: LD_INT 3
6774: PUSH
6775: LD_EXP 9
6779: MUL
6780: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6781: LD_ADDR_EXP 31
6785: PUSH
6786: LD_VAR 0 3
6790: PUSH
6791: LD_EXP 33
6795: MUL
6796: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6797: LD_ADDR_EXP 32
6801: PUSH
6802: LD_EXP 31
6806: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6807: LD_ADDR_EXP 34
6811: PUSH
6812: LD_INT 0
6814: PUSH
6815: LD_INT 0
6817: PUSH
6818: LD_INT 0
6820: PUSH
6821: LD_INT 0
6823: PUSH
6824: LD_INT 0
6826: PUSH
6827: LD_INT 0
6829: PUSH
6830: LD_INT 0
6832: PUSH
6833: LD_INT 0
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6846: LD_ADDR_EXP 35
6850: PUSH
6851: LD_INT 0
6853: PUSH
6854: LD_INT 0
6856: PUSH
6857: LD_INT 0
6859: PUSH
6860: LD_INT 0
6862: PUSH
6863: LD_INT 0
6865: PUSH
6866: LD_INT 0
6868: PUSH
6869: LD_INT 0
6871: PUSH
6872: LD_INT 0
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: ST_TO_ADDR
// apeLevel := 1 ;
6885: LD_ADDR_EXP 36
6889: PUSH
6890: LD_INT 1
6892: ST_TO_ADDR
// if not apemanNumber then
6893: LD_EXP 31
6897: NOT
6898: IFFALSE 6902
// exit ;
6900: GO 7098
// for i := 1 to apemanPerPlayer do
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: DOUBLE
6908: LD_INT 1
6910: DEC
6911: ST_TO_ADDR
6912: LD_EXP 33
6916: PUSH
6917: FOR_TO
6918: IFFALSE 7096
// begin for j := 1 to Side_Positions do
6920: LD_ADDR_VAR 0 4
6924: PUSH
6925: DOUBLE
6926: LD_INT 1
6928: DEC
6929: ST_TO_ADDR
6930: LD_EXP 18
6934: PUSH
6935: FOR_TO
6936: IFFALSE 7092
// if Side_Positions [ j ] then
6938: LD_EXP 18
6942: PUSH
6943: LD_VAR 0 4
6947: ARRAY
6948: IFFALSE 7090
// begin pos := Side_Positions [ j ] ;
6950: LD_ADDR_VAR 0 6
6954: PUSH
6955: LD_EXP 18
6959: PUSH
6960: LD_VAR 0 4
6964: ARRAY
6965: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6966: LD_ADDR_EXP 35
6970: PUSH
6971: LD_EXP 35
6975: PPUSH
6976: LD_VAR 0 4
6980: PPUSH
6981: LD_EXP 35
6985: PUSH
6986: LD_VAR 0 4
6990: ARRAY
6991: PUSH
6992: LD_INT 1
6994: PLUS
6995: PPUSH
6996: CALL_OW 1
7000: ST_TO_ADDR
// ape := PrepareApeman ;
7001: LD_ADDR_VAR 0 5
7005: PUSH
7006: CALL 7103 0 0
7010: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7011: LD_ADDR_EXP 34
7015: PUSH
7016: LD_EXP 34
7020: PPUSH
7021: LD_VAR 0 4
7025: PPUSH
7026: LD_EXP 34
7030: PUSH
7031: LD_VAR 0 4
7035: ARRAY
7036: PPUSH
7037: LD_EXP 34
7041: PUSH
7042: LD_VAR 0 4
7046: ARRAY
7047: PUSH
7048: LD_INT 1
7050: PLUS
7051: PPUSH
7052: LD_VAR 0 5
7056: PPUSH
7057: CALL_OW 1
7061: PPUSH
7062: CALL_OW 1
7066: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7067: LD_VAR 0 5
7071: PPUSH
7072: LD_EXP 37
7076: PUSH
7077: LD_VAR 0 4
7081: ARRAY
7082: PPUSH
7083: LD_INT 0
7085: PPUSH
7086: CALL_OW 49
// end ;
7090: GO 6935
7092: POP
7093: POP
// end ;
7094: GO 6917
7096: POP
7097: POP
// end ;
7098: LD_VAR 0 1
7102: RET
// export function PrepareApeman ; var bonus ; begin
7103: LD_INT 0
7105: PPUSH
7106: PPUSH
// uc_side := 0 ;
7107: LD_ADDR_OWVAR 20
7111: PUSH
7112: LD_INT 0
7114: ST_TO_ADDR
// uc_nation := 0 ;
7115: LD_ADDR_OWVAR 21
7119: PUSH
7120: LD_INT 0
7122: ST_TO_ADDR
// InitHc ;
7123: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7127: LD_ADDR_VAR 0 2
7131: PUSH
7132: LD_INT 1
7134: NEG
7135: PUSH
7136: LD_INT 0
7138: PUSH
7139: LD_INT 1
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: PUSH
7147: LD_OWVAR 1
7151: PUSH
7152: LD_INT 3
7154: MOD
7155: PUSH
7156: LD_INT 1
7158: PLUS
7159: ARRAY
7160: ST_TO_ADDR
// hc_class := class_apeman ;
7161: LD_ADDR_OWVAR 28
7165: PUSH
7166: LD_INT 12
7168: ST_TO_ADDR
// hc_gallery :=  ;
7169: LD_ADDR_OWVAR 33
7173: PUSH
7174: LD_STRING 
7176: ST_TO_ADDR
// hc_name :=  ;
7177: LD_ADDR_OWVAR 26
7181: PUSH
7182: LD_STRING 
7184: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7185: LD_ADDR_OWVAR 31
7189: PUSH
7190: LD_EXP 36
7194: PUSH
7195: LD_VAR 0 2
7199: PLUS
7200: PUSH
7201: LD_EXP 36
7205: PUSH
7206: LD_VAR 0 2
7210: PLUS
7211: PUSH
7212: LD_EXP 36
7216: PUSH
7217: LD_VAR 0 2
7221: PLUS
7222: PUSH
7223: LD_EXP 36
7227: PUSH
7228: LD_VAR 0 2
7232: PLUS
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7240: LD_ADDR_OWVAR 35
7244: PUSH
7245: LD_INT 10
7247: PUSH
7248: LD_VAR 0 2
7252: MUL
7253: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7254: LD_ADDR_OWVAR 29
7258: PUSH
7259: LD_INT 12
7261: PUSH
7262: LD_INT 10
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: ST_TO_ADDR
// result := CreateHuman ;
7269: LD_ADDR_VAR 0 1
7273: PUSH
7274: CALL_OW 44
7278: ST_TO_ADDR
// end ;
7279: LD_VAR 0 1
7283: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7284: LD_INT 0
7286: PPUSH
7287: PPUSH
7288: PPUSH
// if not ape then
7289: LD_VAR 0 1
7293: NOT
7294: IFFALSE 7298
// exit ;
7296: GO 7423
// side := GetSide ( ape ) ;
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_VAR 0 1
7307: PPUSH
7308: CALL_OW 255
7312: ST_TO_ADDR
// if not side then
7313: LD_VAR 0 3
7317: NOT
7318: IFFALSE 7372
// begin for i = 1 to apemanPos do
7320: LD_ADDR_VAR 0 4
7324: PUSH
7325: DOUBLE
7326: LD_INT 1
7328: DEC
7329: ST_TO_ADDR
7330: LD_EXP 34
7334: PUSH
7335: FOR_TO
7336: IFFALSE 7370
// if ape in apemanPos [ i ] then
7338: LD_VAR 0 1
7342: PUSH
7343: LD_EXP 34
7347: PUSH
7348: LD_VAR 0 4
7352: ARRAY
7353: IN
7354: IFFALSE 7368
// begin side := i ;
7356: LD_ADDR_VAR 0 3
7360: PUSH
7361: LD_VAR 0 4
7365: ST_TO_ADDR
// break ;
7366: GO 7370
// end ;
7368: GO 7335
7370: POP
7371: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7372: LD_ADDR_EXP 34
7376: PUSH
7377: LD_EXP 34
7381: PPUSH
7382: LD_VAR 0 3
7386: PPUSH
7387: LD_EXP 34
7391: PUSH
7392: LD_VAR 0 3
7396: ARRAY
7397: PUSH
7398: LD_VAR 0 1
7402: DIFF
7403: PPUSH
7404: CALL_OW 1
7408: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7409: LD_ADDR_EXP 31
7413: PUSH
7414: LD_EXP 31
7418: PUSH
7419: LD_INT 1
7421: MINUS
7422: ST_TO_ADDR
// end ; end_of_file
7423: LD_VAR 0 2
7427: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 266
7437: PUSH
7438: LD_INT 0
7440: PUSH
7441: LD_INT 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: IN
7448: IFFALSE 7473
// SetBName ( b , @ & GetSide ( b ) ) ;
7450: LD_VAR 0 1
7454: PPUSH
7455: LD_STRING @
7457: PUSH
7458: LD_VAR 0 1
7462: PPUSH
7463: CALL_OW 255
7467: STR
7468: PPUSH
7469: CALL_OW 500
// if def_game_rules then
7473: LD_EXP 40
7477: IFFALSE 7514
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_VAR 0 1
7488: PPUSH
7489: CALL_OW 266
7493: PPUSH
7494: LD_VAR 0 1
7498: PPUSH
7499: CALL_OW 255
7503: PPUSH
7504: LD_INT 0
7506: PPUSH
7507: LD_INT 1
7509: PPUSH
7510: CALL 11544 0 5
// end ;
7514: PPOPN 2
7516: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7517: LD_VAR 0 1
7521: PPUSH
7522: CALL_OW 266
7526: PUSH
7527: LD_INT 0
7529: PUSH
7530: LD_INT 1
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: IN
7537: IFFALSE 7562
// SetBName ( b , @ & GetSide ( b ) ) ;
7539: LD_VAR 0 1
7543: PPUSH
7544: LD_STRING @
7546: PUSH
7547: LD_VAR 0 1
7551: PPUSH
7552: CALL_OW 255
7556: STR
7557: PPUSH
7558: CALL_OW 500
// if def_game_rules then
7562: LD_EXP 40
7566: IFFALSE 7605
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7568: LD_VAR 0 1
7572: PPUSH
7573: LD_VAR 0 1
7577: PPUSH
7578: CALL_OW 266
7582: PPUSH
7583: LD_VAR 0 1
7587: PPUSH
7588: CALL_OW 255
7592: PPUSH
7593: LD_VAR 0 2
7597: PPUSH
7598: LD_INT 1
7600: PPUSH
7601: CALL 11544 0 5
// end ;
7605: PPOPN 3
7607: END
// on VehicleConstructed ( veh , fac ) do var side ;
7608: LD_INT 0
7610: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7611: LD_VAR 0 1
7615: PPUSH
7616: CALL_OW 263
7620: PUSH
7621: LD_INT 5
7623: EQUAL
7624: IFFALSE 7766
// begin side := GetSide ( veh ) ;
7626: LD_ADDR_VAR 0 3
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: CALL_OW 255
7640: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7641: LD_ADDR_EXP 34
7645: PUSH
7646: LD_EXP 34
7650: PPUSH
7651: LD_VAR 0 3
7655: PPUSH
7656: LD_EXP 34
7660: PUSH
7661: LD_VAR 0 3
7665: ARRAY
7666: PPUSH
7667: LD_INT 52
7669: PUSH
7670: EMPTY
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: PUSH
7678: LD_INT 22
7680: PUSH
7681: LD_VAR 0 3
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 2
7692: PUSH
7693: LD_INT 33
7695: PUSH
7696: LD_INT 5
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 25
7705: PUSH
7706: LD_INT 12
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 25
7715: PUSH
7716: LD_INT 15
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PUSH
7723: LD_INT 25
7725: PUSH
7726: LD_INT 16
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: LD_INT 25
7735: PUSH
7736: LD_INT 17
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PPUSH
7755: CALL_OW 69
7759: UNION
7760: PPUSH
7761: CALL_OW 1
7765: ST_TO_ADDR
// end ; end ;
7766: PPOPN 3
7768: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7769: LD_INT 0
7771: PPUSH
7772: PPUSH
7773: PPUSH
7774: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7775: LD_VAR 0 1
7779: PPUSH
7780: CALL_OW 257
7784: PUSH
7785: LD_INT 12
7787: PUSH
7788: LD_INT 15
7790: PUSH
7791: LD_INT 17
7793: PUSH
7794: LD_INT 16
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: IN
7803: PUSH
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 263
7813: PUSH
7814: LD_INT 5
7816: EQUAL
7817: OR
7818: IFFALSE 7829
// ApeKilled ( j ) ;
7820: LD_VAR 0 1
7824: PPUSH
7825: CALL 7284 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7829: LD_VAR 0 1
7833: PPUSH
7834: CALL_OW 266
7838: PUSH
7839: LD_INT 0
7841: PUSH
7842: LD_INT 1
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: IN
7849: IFFALSE 7931
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7851: LD_ADDR_VAR 0 4
7855: PUSH
7856: LD_EXP 18
7860: PUSH
7861: LD_VAR 0 1
7865: PPUSH
7866: CALL_OW 255
7870: ARRAY
7871: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7872: LD_ADDR_VAR 0 2
7876: PUSH
7877: LD_EXP 24
7881: PUSH
7882: LD_VAR 0 4
7886: ARRAY
7887: PUSH
7888: LD_INT 1
7890: ARRAY
7891: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7892: LD_ADDR_VAR 0 3
7896: PUSH
7897: LD_EXP 24
7901: PUSH
7902: LD_VAR 0 4
7906: ARRAY
7907: PUSH
7908: LD_INT 2
7910: ARRAY
7911: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7912: LD_VAR 0 2
7916: PPUSH
7917: LD_VAR 0 3
7921: PPUSH
7922: CALL_OW 420
7926: PPUSH
7927: CALL_OW 419
// end ; if def_game_rules then
7931: LD_EXP 40
7935: IFFALSE 8034
// if ( GetType ( j ) = 3 ) then
7937: LD_VAR 0 1
7941: PPUSH
7942: CALL_OW 247
7946: PUSH
7947: LD_INT 3
7949: EQUAL
7950: IFFALSE 7990
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7952: LD_VAR 0 1
7956: PPUSH
7957: LD_VAR 0 1
7961: PPUSH
7962: CALL_OW 266
7966: PPUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 255
7976: PPUSH
7977: LD_INT 0
7979: PPUSH
7980: LD_INT 1
7982: NEG
7983: PPUSH
7984: CALL 11544 0 5
7988: GO 8034
// if ( GetChassis ( j ) = 25 ) then
7990: LD_VAR 0 1
7994: PPUSH
7995: CALL_OW 265
7999: PUSH
8000: LD_INT 25
8002: EQUAL
8003: IFFALSE 8034
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8005: LD_VAR 0 1
8009: PPUSH
8010: LD_INT 37
8012: PPUSH
8013: LD_VAR 0 1
8017: PPUSH
8018: CALL_OW 255
8022: PPUSH
8023: LD_INT 0
8025: PPUSH
8026: LD_INT 1
8028: NEG
8029: PPUSH
8030: CALL 11544 0 5
// end ;
8034: PPOPN 5
8036: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8037: LD_EXP 40
8041: PUSH
8042: LD_VAR 0 1
8046: PPUSH
8047: CALL_OW 265
8051: PUSH
8052: LD_INT 25
8054: EQUAL
8055: AND
8056: IFFALSE 8088
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8058: LD_VAR 0 1
8062: PPUSH
8063: LD_INT 37
8065: PPUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: CALL_OW 255
8075: PPUSH
8076: LD_VAR 0 3
8080: PPUSH
8081: LD_INT 1
8083: PPUSH
8084: CALL 11544 0 5
// end ;
8088: PPOPN 4
8090: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8091: LD_VAR 0 1
8095: PPUSH
8096: LD_VAR 0 2
8100: PPUSH
8101: LD_VAR 0 3
8105: PPUSH
8106: LD_OWVAR 2
8110: PPUSH
8111: CALL 12244 0 4
8115: PPOPN 3
8117: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8118: LD_INT 0
8120: PPUSH
8121: PPUSH
// for un in battle_flags_id do
8122: LD_ADDR_VAR 0 2
8126: PUSH
8127: LD_EXP 29
8131: PUSH
8132: FOR_IN
8133: IFFALSE 8208
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8135: LD_VAR 0 2
8139: PPUSH
8140: LD_INT 1
8142: PUSH
8143: LD_LOC 11
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: PUSH
8152: LD_INT 2
8154: PUSH
8155: LD_LOC 11
8159: PUSH
8160: LD_INT 2
8162: DIV
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 3
8170: PUSH
8171: LD_LOC 11
8175: PUSH
8176: LD_INT 5
8178: DIV
8179: PUSH
8180: EMPTY
8181: LIST
8182: LIST
8183: PUSH
8184: LD_INT 20
8186: PUSH
8187: LD_LOC 11
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: PPUSH
8202: CALL_OW 423
8206: GO 8132
8208: POP
8209: POP
// end ;
8210: LD_VAR 0 1
8214: RET
// every 1 do var un ;
8215: GO 8217
8217: DISABLE
8218: LD_INT 0
8220: PPUSH
// begin if not def_morale_flags then
8221: LD_EXP 49
8225: NOT
8226: IFFALSE 8230
// exit ;
8228: GO 8307
// if not morale_decreasing_time then
8230: LD_EXP 8
8234: NOT
8235: IFFALSE 8239
// exit ;
8237: GO 8307
// strength = 100 ;
8239: LD_ADDR_LOC 11
8243: PUSH
8244: LD_INT 100
8246: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8247: LD_EXP 8
8251: PPUSH
8252: CALL_OW 67
// strength := strength - 1 ;
8256: LD_ADDR_LOC 11
8260: PUSH
8261: LD_LOC 11
8265: PUSH
8266: LD_INT 1
8268: MINUS
8269: ST_TO_ADDR
// Update_Flags ;
8270: CALL 8118 0 0
// until not strength ;
8274: LD_LOC 11
8278: NOT
8279: IFFALSE 8247
// for un in battle_flags_id do
8281: LD_ADDR_VAR 0 1
8285: PUSH
8286: LD_EXP 29
8290: PUSH
8291: FOR_IN
8292: IFFALSE 8305
// KillBattleFlag ( un ) ;
8294: LD_VAR 0 1
8298: PPUSH
8299: CALL_OW 419
8303: GO 8291
8305: POP
8306: POP
// end ; end_of_file
8307: PPOPN 1
8309: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8310: LD_INT 0
8312: PPUSH
8313: PPUSH
8314: PPUSH
// enable ( 600 ) ;
8315: LD_INT 600
8317: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8318: LD_ADDR_VAR 0 2
8322: PUSH
8323: DOUBLE
8324: LD_INT 1
8326: DEC
8327: ST_TO_ADDR
8328: LD_EXP 38
8332: PUSH
8333: FOR_TO
8334: IFFALSE 8489
// if Position_Sides [ i ] then
8336: LD_EXP 21
8340: PUSH
8341: LD_VAR 0 2
8345: ARRAY
8346: IFFALSE 8487
// for j := 1 to 8 do
8348: LD_ADDR_VAR 0 3
8352: PUSH
8353: DOUBLE
8354: LD_INT 1
8356: DEC
8357: ST_TO_ADDR
8358: LD_INT 8
8360: PUSH
8361: FOR_TO
8362: IFFALSE 8485
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8364: LD_EXP 18
8368: PUSH
8369: LD_VAR 0 3
8373: ARRAY
8374: PUSH
8375: LD_EXP 15
8379: PUSH
8380: LD_EXP 21
8384: PUSH
8385: LD_VAR 0 2
8389: ARRAY
8390: ARRAY
8391: PUSH
8392: LD_EXP 15
8396: PUSH
8397: LD_VAR 0 3
8401: ARRAY
8402: NONEQUAL
8403: PUSH
8404: LD_EXP 20
8408: NOT
8409: PUSH
8410: LD_EXP 21
8414: PUSH
8415: LD_VAR 0 2
8419: ARRAY
8420: PUSH
8421: LD_VAR 0 3
8425: NONEQUAL
8426: AND
8427: OR
8428: AND
8429: IFFALSE 8453
// HideArea ( j , BuildUpAreas [ i ] ) else
8431: LD_VAR 0 3
8435: PPUSH
8436: LD_EXP 38
8440: PUSH
8441: LD_VAR 0 2
8445: ARRAY
8446: PPUSH
8447: CALL_OW 333
8451: GO 8483
// if ( j = your_side ) then
8453: LD_VAR 0 3
8457: PUSH
8458: LD_OWVAR 2
8462: EQUAL
8463: IFFALSE 8483
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8465: LD_EXP 38
8469: PUSH
8470: LD_VAR 0 2
8474: ARRAY
8475: PPUSH
8476: LD_INT 5
8478: PPUSH
8479: CALL_OW 424
8483: GO 8361
8485: POP
8486: POP
8487: GO 8333
8489: POP
8490: POP
// end ;
8491: LD_VAR 0 1
8495: RET
// export function EndBuildUp ; var i , j ; begin
8496: LD_INT 0
8498: PPUSH
8499: PPUSH
8500: PPUSH
// disable ( 600 ) ;
8501: LD_INT 600
8503: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
8504: LD_ADDR_VAR 0 2
8508: PUSH
8509: DOUBLE
8510: LD_INT 1
8512: DEC
8513: ST_TO_ADDR
8514: LD_EXP 38
8518: PUSH
8519: FOR_TO
8520: IFFALSE 8675
// if Position_Sides [ i ] then
8522: LD_EXP 21
8526: PUSH
8527: LD_VAR 0 2
8531: ARRAY
8532: IFFALSE 8673
// for j := 1 to 8 do
8534: LD_ADDR_VAR 0 3
8538: PUSH
8539: DOUBLE
8540: LD_INT 1
8542: DEC
8543: ST_TO_ADDR
8544: LD_INT 8
8546: PUSH
8547: FOR_TO
8548: IFFALSE 8671
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8550: LD_EXP 18
8554: PUSH
8555: LD_VAR 0 3
8559: ARRAY
8560: PUSH
8561: LD_EXP 15
8565: PUSH
8566: LD_EXP 21
8570: PUSH
8571: LD_VAR 0 2
8575: ARRAY
8576: ARRAY
8577: PUSH
8578: LD_EXP 15
8582: PUSH
8583: LD_VAR 0 3
8587: ARRAY
8588: NONEQUAL
8589: PUSH
8590: LD_EXP 20
8594: NOT
8595: PUSH
8596: LD_EXP 21
8600: PUSH
8601: LD_VAR 0 2
8605: ARRAY
8606: PUSH
8607: LD_VAR 0 3
8611: NONEQUAL
8612: AND
8613: OR
8614: AND
8615: IFFALSE 8639
// ShowArea ( j , BuildUpAreas [ i ] ) else
8617: LD_VAR 0 3
8621: PPUSH
8622: LD_EXP 38
8626: PUSH
8627: LD_VAR 0 2
8631: ARRAY
8632: PPUSH
8633: CALL_OW 334
8637: GO 8669
// if ( j = your_side ) then
8639: LD_VAR 0 3
8643: PUSH
8644: LD_OWVAR 2
8648: EQUAL
8649: IFFALSE 8669
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
8651: LD_EXP 38
8655: PUSH
8656: LD_VAR 0 2
8660: ARRAY
8661: PPUSH
8662: LD_INT 0
8664: PPUSH
8665: CALL_OW 424
8669: GO 8547
8671: POP
8672: POP
8673: GO 8519
8675: POP
8676: POP
// end ;
8677: LD_VAR 0 1
8681: RET
// every 5 marked 600 do var i , un ;
8682: GO 8684
8684: DISABLE
8685: LD_INT 0
8687: PPUSH
8688: PPUSH
// begin for i := 1 to BuildUpAreas do
8689: LD_ADDR_VAR 0 1
8693: PUSH
8694: DOUBLE
8695: LD_INT 1
8697: DEC
8698: ST_TO_ADDR
8699: LD_EXP 38
8703: PUSH
8704: FOR_TO
8705: IFFALSE 8860
// if Position_Sides [ i ] then
8707: LD_EXP 21
8711: PUSH
8712: LD_VAR 0 1
8716: ARRAY
8717: IFFALSE 8858
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8719: LD_ADDR_VAR 0 2
8723: PUSH
8724: LD_EXP 38
8728: PUSH
8729: LD_VAR 0 1
8733: ARRAY
8734: PPUSH
8735: LD_INT 2
8737: PUSH
8738: LD_INT 21
8740: PUSH
8741: LD_INT 1
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PUSH
8748: LD_INT 21
8750: PUSH
8751: LD_INT 2
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 22
8765: PUSH
8766: LD_OWVAR 2
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PPUSH
8779: CALL_OW 70
8783: PUSH
8784: FOR_IN
8785: IFFALSE 8856
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
8787: LD_EXP 15
8791: PUSH
8792: LD_EXP 21
8796: PUSH
8797: LD_VAR 0 1
8801: ARRAY
8802: ARRAY
8803: PUSH
8804: LD_EXP 15
8808: PUSH
8809: LD_OWVAR 2
8813: ARRAY
8814: NONEQUAL
8815: PUSH
8816: LD_EXP 20
8820: NOT
8821: PUSH
8822: LD_EXP 21
8826: PUSH
8827: LD_VAR 0 1
8831: ARRAY
8832: PUSH
8833: LD_OWVAR 2
8837: NONEQUAL
8838: AND
8839: OR
8840: IFFALSE 8854
// ComMoveToArea ( un , BuildUpEscape ) ;
8842: LD_VAR 0 2
8846: PPUSH
8847: LD_INT 17
8849: PPUSH
8850: CALL_OW 113
8854: GO 8784
8856: POP
8857: POP
8858: GO 8704
8860: POP
8861: POP
// enable ;
8862: ENABLE
// end ;
8863: PPOPN 2
8865: END
// every 5 5$00 do
8866: GO 8868
8868: DISABLE
// if ( def_builduptime = 1 ) then
8869: LD_EXP 54
8873: PUSH
8874: LD_INT 1
8876: EQUAL
8877: IFFALSE 8883
// EndBuildUp ;
8879: CALL 8496 0 0
8883: END
// every 10 10$00 do
8884: GO 8886
8886: DISABLE
// if ( def_builduptime = 2 ) then
8887: LD_EXP 54
8891: PUSH
8892: LD_INT 2
8894: EQUAL
8895: IFFALSE 8901
// EndBuildUp ;
8897: CALL 8496 0 0
8901: END
// every 15 15$00 do
8902: GO 8904
8904: DISABLE
// if ( def_builduptime = 3 ) then
8905: LD_EXP 54
8909: PUSH
8910: LD_INT 3
8912: EQUAL
8913: IFFALSE 8919
// EndBuildUp ; end_of_file
8915: CALL 8496 0 0
8919: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
8920: LD_INT 0
8922: PPUSH
8923: PPUSH
// if ( not IAmSpec ) then
8924: CALL_OW 531
8928: NOT
8929: IFFALSE 8945
// Result := Limits_Info ^  ;
8931: LD_ADDR_VAR 0 1
8935: PUSH
8936: LD_LOC 23
8940: PUSH
8941: LD_STRING 
8943: ADD
8944: ST_TO_ADDR
// for i := 1 to 8 do
8945: LD_ADDR_VAR 0 2
8949: PUSH
8950: DOUBLE
8951: LD_INT 1
8953: DEC
8954: ST_TO_ADDR
8955: LD_INT 8
8957: PUSH
8958: FOR_TO
8959: IFFALSE 9004
// if Cheaters [ i ] then
8961: LD_LOC 24
8965: PUSH
8966: LD_VAR 0 2
8970: ARRAY
8971: IFFALSE 9002
// Result := Result ^ [ #Cheater , i , i ] ;
8973: LD_ADDR_VAR 0 1
8977: PUSH
8978: LD_VAR 0 1
8982: PUSH
8983: LD_STRING #Cheater
8985: PUSH
8986: LD_VAR 0 2
8990: PUSH
8991: LD_VAR 0 2
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: ADD
9001: ST_TO_ADDR
9002: GO 8958
9004: POP
9005: POP
// end ;
9006: LD_VAR 0 1
9010: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9011: LD_INT 0
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
// case Game_Type of 10 :
9018: LD_EXP 39
9022: PUSH
9023: LD_INT 10
9025: DOUBLE
9026: EQUAL
9027: IFTRUE 9031
9029: GO 9042
9031: POP
// def_game_rules := 1 ; 11 :
9032: LD_ADDR_EXP 40
9036: PUSH
9037: LD_INT 1
9039: ST_TO_ADDR
9040: GO 9062
9042: LD_INT 11
9044: DOUBLE
9045: EQUAL
9046: IFTRUE 9050
9048: GO 9061
9050: POP
// def_game_rules := 3 ; end ;
9051: LD_ADDR_EXP 40
9055: PUSH
9056: LD_INT 3
9058: ST_TO_ADDR
9059: GO 9062
9061: POP
// case def_game_rules of 0 :
9062: LD_EXP 40
9066: PUSH
9067: LD_INT 0
9069: DOUBLE
9070: EQUAL
9071: IFTRUE 9075
9073: GO 9080
9075: POP
// exit ; 1 :
9076: GO 11138
9078: GO 11038
9080: LD_INT 1
9082: DOUBLE
9083: EQUAL
9084: IFTRUE 9088
9086: GO 9304
9088: POP
// begin def_base_level := 2 ;
9089: LD_ADDR_EXP 41
9093: PUSH
9094: LD_INT 2
9096: ST_TO_ADDR
// def_amount_of_people := 2 ;
9097: LD_ADDR_EXP 42
9101: PUSH
9102: LD_INT 2
9104: ST_TO_ADDR
// def_skill_level := 1 ;
9105: LD_ADDR_EXP 43
9109: PUSH
9110: LD_INT 1
9112: ST_TO_ADDR
// def_starting_resources := 2 ;
9113: LD_ADDR_EXP 44
9117: PUSH
9118: LD_INT 2
9120: ST_TO_ADDR
// def_shipments_density := 1 ;
9121: LD_ADDR_EXP 45
9125: PUSH
9126: LD_INT 1
9128: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9129: LD_ADDR_EXP 46
9133: PUSH
9134: LD_INT 0
9136: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9137: LD_ADDR_EXP 47
9141: PUSH
9142: LD_INT 1
9144: ST_TO_ADDR
// def_shared_vision := 1 ;
9145: LD_ADDR_EXP 48
9149: PUSH
9150: LD_INT 1
9152: ST_TO_ADDR
// def_morale_flags := 3 ;
9153: LD_ADDR_EXP 49
9157: PUSH
9158: LD_INT 3
9160: ST_TO_ADDR
// def_siberite_detection := 1 ;
9161: LD_ADDR_EXP 50
9165: PUSH
9166: LD_INT 1
9168: ST_TO_ADDR
// def_people_respawning := 1 ;
9169: LD_ADDR_EXP 51
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9177: LD_ADDR_EXP 52
9181: PUSH
9182: LD_INT 1
9184: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9185: LD_ADDR_EXP 53
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// def_builduptime := 2 ;
9193: LD_ADDR_EXP 54
9197: PUSH
9198: LD_INT 2
9200: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9201: LD_ADDR_VAR 0 2
9205: PUSH
9206: EMPTY
9207: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9208: LD_ADDR_VAR 0 3
9212: PUSH
9213: EMPTY
9214: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9215: LD_ADDR_LOC 18
9219: PUSH
9220: EMPTY
9221: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9222: LD_ADDR_LOC 19
9226: PUSH
9227: EMPTY
9228: ST_TO_ADDR
// Banned_Controls := [ ] ;
9229: LD_ADDR_LOC 20
9233: PUSH
9234: EMPTY
9235: ST_TO_ADDR
// Banned_Engines := [ ] ;
9236: LD_ADDR_LOC 21
9240: PUSH
9241: EMPTY
9242: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9243: LD_ADDR_LOC 16
9247: PUSH
9248: LD_INT 37
9250: PUSH
9251: EMPTY
9252: LIST
9253: PUSH
9254: LD_INT 4
9256: PUSH
9257: LD_INT 5
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 31
9266: PUSH
9267: LD_INT 32
9269: PUSH
9270: LD_INT 33
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: LIST
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: LIST
9282: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9283: LD_ADDR_LOC 17
9287: PUSH
9288: LD_INT 2
9290: PUSH
9291: LD_INT 2
9293: PUSH
9294: LD_INT 4
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: ST_TO_ADDR
// end ; 2 :
9302: GO 11038
9304: LD_INT 2
9306: DOUBLE
9307: EQUAL
9308: IFTRUE 9312
9310: GO 9521
9312: POP
// begin def_base_level := 1 ;
9313: LD_ADDR_EXP 41
9317: PUSH
9318: LD_INT 1
9320: ST_TO_ADDR
// def_amount_of_people := 2 ;
9321: LD_ADDR_EXP 42
9325: PUSH
9326: LD_INT 2
9328: ST_TO_ADDR
// def_skill_level := 3 ;
9329: LD_ADDR_EXP 43
9333: PUSH
9334: LD_INT 3
9336: ST_TO_ADDR
// def_starting_resources := 3 ;
9337: LD_ADDR_EXP 44
9341: PUSH
9342: LD_INT 3
9344: ST_TO_ADDR
// def_shipments_density := 2 ;
9345: LD_ADDR_EXP 45
9349: PUSH
9350: LD_INT 2
9352: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9353: LD_ADDR_EXP 46
9357: PUSH
9358: LD_INT 1
9360: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9361: LD_ADDR_EXP 47
9365: PUSH
9366: LD_INT 2
9368: ST_TO_ADDR
// def_shared_vision := 1 ;
9369: LD_ADDR_EXP 48
9373: PUSH
9374: LD_INT 1
9376: ST_TO_ADDR
// def_morale_flags := 0 ;
9377: LD_ADDR_EXP 49
9381: PUSH
9382: LD_INT 0
9384: ST_TO_ADDR
// def_siberite_detection := 1 ;
9385: LD_ADDR_EXP 50
9389: PUSH
9390: LD_INT 1
9392: ST_TO_ADDR
// def_people_respawning := 0 ;
9393: LD_ADDR_EXP 51
9397: PUSH
9398: LD_INT 0
9400: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9401: LD_ADDR_EXP 52
9405: PUSH
9406: LD_INT 0
9408: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9409: LD_ADDR_EXP 53
9413: PUSH
9414: LD_INT 0
9416: ST_TO_ADDR
// def_builduptime := 2 ;
9417: LD_ADDR_EXP 54
9421: PUSH
9422: LD_INT 2
9424: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9425: LD_ADDR_VAR 0 2
9429: PUSH
9430: LD_INT 1
9432: PUSH
9433: EMPTY
9434: LIST
9435: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9436: LD_ADDR_VAR 0 3
9440: PUSH
9441: EMPTY
9442: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9443: LD_ADDR_LOC 18
9447: PUSH
9448: EMPTY
9449: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9450: LD_ADDR_LOC 19
9454: PUSH
9455: EMPTY
9456: ST_TO_ADDR
// Banned_Controls := [ ] ;
9457: LD_ADDR_LOC 20
9461: PUSH
9462: EMPTY
9463: ST_TO_ADDR
// Banned_Engines := [ ] ;
9464: LD_ADDR_LOC 21
9468: PUSH
9469: EMPTY
9470: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9471: LD_ADDR_LOC 16
9475: PUSH
9476: LD_INT 4
9478: PUSH
9479: LD_INT 5
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 31
9488: PUSH
9489: LD_INT 32
9491: PUSH
9492: LD_INT 33
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9504: LD_ADDR_LOC 17
9508: PUSH
9509: LD_INT 1
9511: PUSH
9512: LD_INT 2
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: ST_TO_ADDR
// end ; 3 :
9519: GO 11038
9521: LD_INT 3
9523: DOUBLE
9524: EQUAL
9525: IFTRUE 9529
9527: GO 9772
9529: POP
// begin def_base_level := 1 ;
9530: LD_ADDR_EXP 41
9534: PUSH
9535: LD_INT 1
9537: ST_TO_ADDR
// def_amount_of_people := 2 ;
9538: LD_ADDR_EXP 42
9542: PUSH
9543: LD_INT 2
9545: ST_TO_ADDR
// def_skill_level := 3 ;
9546: LD_ADDR_EXP 43
9550: PUSH
9551: LD_INT 3
9553: ST_TO_ADDR
// def_starting_resources := 3 ;
9554: LD_ADDR_EXP 44
9558: PUSH
9559: LD_INT 3
9561: ST_TO_ADDR
// def_shipments_density := 1 ;
9562: LD_ADDR_EXP 45
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9570: LD_ADDR_EXP 46
9574: PUSH
9575: LD_INT 0
9577: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9578: LD_ADDR_EXP 47
9582: PUSH
9583: LD_INT 1
9585: ST_TO_ADDR
// def_shared_vision := 1 ;
9586: LD_ADDR_EXP 48
9590: PUSH
9591: LD_INT 1
9593: ST_TO_ADDR
// def_morale_flags := 0 ;
9594: LD_ADDR_EXP 49
9598: PUSH
9599: LD_INT 0
9601: ST_TO_ADDR
// def_siberite_detection := 1 ;
9602: LD_ADDR_EXP 50
9606: PUSH
9607: LD_INT 1
9609: ST_TO_ADDR
// def_people_respawning := 0 ;
9610: LD_ADDR_EXP 51
9614: PUSH
9615: LD_INT 0
9617: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9618: LD_ADDR_EXP 52
9622: PUSH
9623: LD_INT 2
9625: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9626: LD_ADDR_EXP 53
9630: PUSH
9631: LD_INT 0
9633: ST_TO_ADDR
// def_builduptime := 1 ;
9634: LD_ADDR_EXP 54
9638: PUSH
9639: LD_INT 1
9641: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9642: LD_ADDR_VAR 0 2
9646: PUSH
9647: LD_INT 23
9649: PUSH
9650: EMPTY
9651: LIST
9652: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
9653: LD_ADDR_VAR 0 3
9657: PUSH
9658: LD_INT 2
9660: PUSH
9661: LD_INT 37
9663: PUSH
9664: LD_INT 32
9666: PUSH
9667: LD_INT 33
9669: PUSH
9670: LD_INT 36
9672: PUSH
9673: LD_INT 16
9675: PUSH
9676: LD_INT 23
9678: PUSH
9679: LD_INT 21
9681: PUSH
9682: LD_INT 18
9684: PUSH
9685: LD_INT 22
9687: PUSH
9688: LD_INT 20
9690: PUSH
9691: LD_INT 19
9693: PUSH
9694: LD_INT 25
9696: PUSH
9697: LD_INT 17
9699: PUSH
9700: LD_INT 24
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9720: LD_ADDR_LOC 18
9724: PUSH
9725: EMPTY
9726: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9727: LD_ADDR_LOC 19
9731: PUSH
9732: EMPTY
9733: ST_TO_ADDR
// Banned_Controls := [ ] ;
9734: LD_ADDR_LOC 20
9738: PUSH
9739: EMPTY
9740: ST_TO_ADDR
// Banned_Engines := [ ] ;
9741: LD_ADDR_LOC 21
9745: PUSH
9746: EMPTY
9747: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9748: LD_ADDR_LOC 16
9752: PUSH
9753: EMPTY
9754: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9755: LD_ADDR_LOC 17
9759: PUSH
9760: EMPTY
9761: ST_TO_ADDR
// No_Mechs := true ;
9762: LD_ADDR_EXP 55
9766: PUSH
9767: LD_INT 1
9769: ST_TO_ADDR
// end ; 4 :
9770: GO 11038
9772: LD_INT 4
9774: DOUBLE
9775: EQUAL
9776: IFTRUE 9780
9778: GO 9955
9780: POP
// begin def_base_level := 1 ;
9781: LD_ADDR_EXP 41
9785: PUSH
9786: LD_INT 1
9788: ST_TO_ADDR
// def_amount_of_people := 2 ;
9789: LD_ADDR_EXP 42
9793: PUSH
9794: LD_INT 2
9796: ST_TO_ADDR
// def_skill_level := 3 ;
9797: LD_ADDR_EXP 43
9801: PUSH
9802: LD_INT 3
9804: ST_TO_ADDR
// def_starting_resources := 3 ;
9805: LD_ADDR_EXP 44
9809: PUSH
9810: LD_INT 3
9812: ST_TO_ADDR
// def_shipments_density := 2 ;
9813: LD_ADDR_EXP 45
9817: PUSH
9818: LD_INT 2
9820: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9821: LD_ADDR_EXP 46
9825: PUSH
9826: LD_INT 1
9828: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9829: LD_ADDR_EXP 47
9833: PUSH
9834: LD_INT 2
9836: ST_TO_ADDR
// def_shared_vision := 1 ;
9837: LD_ADDR_EXP 48
9841: PUSH
9842: LD_INT 1
9844: ST_TO_ADDR
// def_morale_flags := 0 ;
9845: LD_ADDR_EXP 49
9849: PUSH
9850: LD_INT 0
9852: ST_TO_ADDR
// def_siberite_detection := 1 ;
9853: LD_ADDR_EXP 50
9857: PUSH
9858: LD_INT 1
9860: ST_TO_ADDR
// def_people_respawning := 0 ;
9861: LD_ADDR_EXP 51
9865: PUSH
9866: LD_INT 0
9868: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9869: LD_ADDR_EXP 52
9873: PUSH
9874: LD_INT 0
9876: ST_TO_ADDR
// def_siberite_bomb := 1 ;
9877: LD_ADDR_EXP 53
9881: PUSH
9882: LD_INT 1
9884: ST_TO_ADDR
// def_builduptime := 3 ;
9885: LD_ADDR_EXP 54
9889: PUSH
9890: LD_INT 3
9892: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9893: LD_ADDR_VAR 0 2
9897: PUSH
9898: LD_INT 1
9900: PUSH
9901: EMPTY
9902: LIST
9903: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9904: LD_ADDR_VAR 0 3
9908: PUSH
9909: EMPTY
9910: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9911: LD_ADDR_LOC 18
9915: PUSH
9916: EMPTY
9917: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9918: LD_ADDR_LOC 19
9922: PUSH
9923: EMPTY
9924: ST_TO_ADDR
// Banned_Controls := [ ] ;
9925: LD_ADDR_LOC 20
9929: PUSH
9930: EMPTY
9931: ST_TO_ADDR
// Banned_Engines := [ ] ;
9932: LD_ADDR_LOC 21
9936: PUSH
9937: EMPTY
9938: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9939: LD_ADDR_LOC 16
9943: PUSH
9944: EMPTY
9945: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9946: LD_ADDR_LOC 17
9950: PUSH
9951: EMPTY
9952: ST_TO_ADDR
// end ; 5 :
9953: GO 11038
9955: LD_INT 5
9957: DOUBLE
9958: EQUAL
9959: IFTRUE 9963
9961: GO 10212
9963: POP
// begin def_base_level := 0 ;
9964: LD_ADDR_EXP 41
9968: PUSH
9969: LD_INT 0
9971: ST_TO_ADDR
// def_amount_of_people := 0 ;
9972: LD_ADDR_EXP 42
9976: PUSH
9977: LD_INT 0
9979: ST_TO_ADDR
// def_skill_level := 0 ;
9980: LD_ADDR_EXP 43
9984: PUSH
9985: LD_INT 0
9987: ST_TO_ADDR
// def_starting_resources := 0 ;
9988: LD_ADDR_EXP 44
9992: PUSH
9993: LD_INT 0
9995: ST_TO_ADDR
// def_shipments_density := 0 ;
9996: LD_ADDR_EXP 45
10000: PUSH
10001: LD_INT 0
10003: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10004: LD_ADDR_EXP 46
10008: PUSH
10009: LD_INT 0
10011: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10012: LD_ADDR_EXP 47
10016: PUSH
10017: LD_INT 0
10019: ST_TO_ADDR
// def_shared_vision := 1 ;
10020: LD_ADDR_EXP 48
10024: PUSH
10025: LD_INT 1
10027: ST_TO_ADDR
// def_morale_flags := 0 ;
10028: LD_ADDR_EXP 49
10032: PUSH
10033: LD_INT 0
10035: ST_TO_ADDR
// def_siberite_detection := 0 ;
10036: LD_ADDR_EXP 50
10040: PUSH
10041: LD_INT 0
10043: ST_TO_ADDR
// def_people_respawning := 1 ;
10044: LD_ADDR_EXP 51
10048: PUSH
10049: LD_INT 1
10051: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10052: LD_ADDR_EXP 52
10056: PUSH
10057: LD_INT 1
10059: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10060: LD_ADDR_EXP 53
10064: PUSH
10065: LD_INT 0
10067: ST_TO_ADDR
// def_builduptime := 0 ;
10068: LD_ADDR_EXP 54
10072: PUSH
10073: LD_INT 0
10075: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10076: LD_ADDR_VAR 0 2
10080: PUSH
10081: LD_INT 10
10083: PUSH
10084: LD_INT 3
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10091: LD_ADDR_VAR 0 3
10095: PUSH
10096: LD_INT 12
10098: PUSH
10099: LD_INT 11
10101: PUSH
10102: LD_INT 14
10104: PUSH
10105: LD_INT 13
10107: PUSH
10108: LD_INT 5
10110: PUSH
10111: LD_INT 24
10113: PUSH
10114: LD_INT 21
10116: PUSH
10117: LD_INT 33
10119: PUSH
10120: LD_INT 36
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10134: LD_ADDR_LOC 18
10138: PUSH
10139: LD_INT 31
10141: PUSH
10142: EMPTY
10143: LIST
10144: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10145: LD_ADDR_LOC 19
10149: PUSH
10150: EMPTY
10151: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10152: LD_ADDR_LOC 20
10156: PUSH
10157: LD_INT 2
10159: PUSH
10160: EMPTY
10161: LIST
10162: ST_TO_ADDR
// Banned_Engines := [ ] ;
10163: LD_ADDR_LOC 21
10167: PUSH
10168: EMPTY
10169: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10170: LD_ADDR_LOC 16
10174: PUSH
10175: LD_INT 4
10177: PUSH
10178: EMPTY
10179: LIST
10180: PUSH
10181: LD_INT 31
10183: PUSH
10184: LD_INT 32
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10195: LD_ADDR_LOC 17
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: LD_INT 1
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: ST_TO_ADDR
// end ; 6 :
10210: GO 11038
10212: LD_INT 6
10214: DOUBLE
10215: EQUAL
10216: IFTRUE 10220
10218: GO 10423
10220: POP
// begin def_base_level := 1 ;
10221: LD_ADDR_EXP 41
10225: PUSH
10226: LD_INT 1
10228: ST_TO_ADDR
// def_amount_of_people := 2 ;
10229: LD_ADDR_EXP 42
10233: PUSH
10234: LD_INT 2
10236: ST_TO_ADDR
// def_skill_level := 3 ;
10237: LD_ADDR_EXP 43
10241: PUSH
10242: LD_INT 3
10244: ST_TO_ADDR
// def_starting_resources := 3 ;
10245: LD_ADDR_EXP 44
10249: PUSH
10250: LD_INT 3
10252: ST_TO_ADDR
// def_shipments_density := 1 ;
10253: LD_ADDR_EXP 45
10257: PUSH
10258: LD_INT 1
10260: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10261: LD_ADDR_EXP 46
10265: PUSH
10266: LD_INT 0
10268: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10269: LD_ADDR_EXP 47
10273: PUSH
10274: LD_INT 1
10276: ST_TO_ADDR
// def_shared_vision := 1 ;
10277: LD_ADDR_EXP 48
10281: PUSH
10282: LD_INT 1
10284: ST_TO_ADDR
// def_morale_flags := 0 ;
10285: LD_ADDR_EXP 49
10289: PUSH
10290: LD_INT 0
10292: ST_TO_ADDR
// def_siberite_detection := 1 ;
10293: LD_ADDR_EXP 50
10297: PUSH
10298: LD_INT 1
10300: ST_TO_ADDR
// def_people_respawning := 2 ;
10301: LD_ADDR_EXP 51
10305: PUSH
10306: LD_INT 2
10308: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10309: LD_ADDR_EXP 52
10313: PUSH
10314: LD_INT 1
10316: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10317: LD_ADDR_EXP 53
10321: PUSH
10322: LD_INT 0
10324: ST_TO_ADDR
// def_builduptime := 1 ;
10325: LD_ADDR_EXP 54
10329: PUSH
10330: LD_INT 1
10332: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10333: LD_ADDR_VAR 0 2
10337: PUSH
10338: LD_INT 23
10340: PUSH
10341: EMPTY
10342: LIST
10343: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10344: LD_ADDR_VAR 0 3
10348: PUSH
10349: LD_INT 2
10351: PUSH
10352: LD_INT 37
10354: PUSH
10355: LD_INT 31
10357: PUSH
10358: LD_INT 32
10360: PUSH
10361: LD_INT 33
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10371: LD_ADDR_LOC 18
10375: PUSH
10376: EMPTY
10377: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10378: LD_ADDR_LOC 19
10382: PUSH
10383: EMPTY
10384: ST_TO_ADDR
// Banned_Controls := [ ] ;
10385: LD_ADDR_LOC 20
10389: PUSH
10390: EMPTY
10391: ST_TO_ADDR
// Banned_Engines := [ ] ;
10392: LD_ADDR_LOC 21
10396: PUSH
10397: EMPTY
10398: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10399: LD_ADDR_LOC 16
10403: PUSH
10404: EMPTY
10405: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10406: LD_ADDR_LOC 17
10410: PUSH
10411: EMPTY
10412: ST_TO_ADDR
// No_Mechs := true ;
10413: LD_ADDR_EXP 55
10417: PUSH
10418: LD_INT 1
10420: ST_TO_ADDR
// end ; 7 :
10421: GO 11038
10423: LD_INT 7
10425: DOUBLE
10426: EQUAL
10427: IFTRUE 10431
10429: GO 10629
10431: POP
// begin def_base_level := 1 ;
10432: LD_ADDR_EXP 41
10436: PUSH
10437: LD_INT 1
10439: ST_TO_ADDR
// def_amount_of_people := 2 ;
10440: LD_ADDR_EXP 42
10444: PUSH
10445: LD_INT 2
10447: ST_TO_ADDR
// def_skill_level := 3 ;
10448: LD_ADDR_EXP 43
10452: PUSH
10453: LD_INT 3
10455: ST_TO_ADDR
// def_starting_resources := 3 ;
10456: LD_ADDR_EXP 44
10460: PUSH
10461: LD_INT 3
10463: ST_TO_ADDR
// def_shipments_density := 1 ;
10464: LD_ADDR_EXP 45
10468: PUSH
10469: LD_INT 1
10471: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10472: LD_ADDR_EXP 46
10476: PUSH
10477: LD_INT 1
10479: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10480: LD_ADDR_EXP 47
10484: PUSH
10485: LD_INT 2
10487: ST_TO_ADDR
// def_shared_vision := 1 ;
10488: LD_ADDR_EXP 48
10492: PUSH
10493: LD_INT 1
10495: ST_TO_ADDR
// def_morale_flags := 0 ;
10496: LD_ADDR_EXP 49
10500: PUSH
10501: LD_INT 0
10503: ST_TO_ADDR
// def_siberite_detection := 1 ;
10504: LD_ADDR_EXP 50
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// def_people_respawning := 0 ;
10512: LD_ADDR_EXP 51
10516: PUSH
10517: LD_INT 0
10519: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10520: LD_ADDR_EXP 52
10524: PUSH
10525: LD_INT 1
10527: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10528: LD_ADDR_EXP 53
10532: PUSH
10533: LD_INT 0
10535: ST_TO_ADDR
// def_builduptime := 3 ;
10536: LD_ADDR_EXP 54
10540: PUSH
10541: LD_INT 3
10543: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10544: LD_ADDR_VAR 0 2
10548: PUSH
10549: LD_INT 23
10551: PUSH
10552: EMPTY
10553: LIST
10554: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
10555: LD_ADDR_VAR 0 3
10559: PUSH
10560: LD_INT 37
10562: PUSH
10563: EMPTY
10564: LIST
10565: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10566: LD_ADDR_LOC 18
10570: PUSH
10571: EMPTY
10572: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10573: LD_ADDR_LOC 19
10577: PUSH
10578: EMPTY
10579: ST_TO_ADDR
// Banned_Controls := [ ] ;
10580: LD_ADDR_LOC 20
10584: PUSH
10585: EMPTY
10586: ST_TO_ADDR
// Banned_Engines := [ ] ;
10587: LD_ADDR_LOC 21
10591: PUSH
10592: EMPTY
10593: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10594: LD_ADDR_LOC 16
10598: PUSH
10599: LD_INT 31
10601: PUSH
10602: LD_INT 32
10604: PUSH
10605: LD_INT 33
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: LIST
10612: PUSH
10613: EMPTY
10614: LIST
10615: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10616: LD_ADDR_LOC 17
10620: PUSH
10621: LD_INT 10
10623: PUSH
10624: EMPTY
10625: LIST
10626: ST_TO_ADDR
// end ; 8 :
10627: GO 11038
10629: LD_INT 8
10631: DOUBLE
10632: EQUAL
10633: IFTRUE 10637
10635: GO 11037
10637: POP
// begin def_base_level := 0 ;
10638: LD_ADDR_EXP 41
10642: PUSH
10643: LD_INT 0
10645: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
10646: LD_ADDR_EXP 42
10650: PUSH
10651: LD_INT 0
10653: PPUSH
10654: LD_INT 1
10656: PPUSH
10657: CALL_OW 12
10661: ST_TO_ADDR
// def_skill_level := 0 ;
10662: LD_ADDR_EXP 43
10666: PUSH
10667: LD_INT 0
10669: ST_TO_ADDR
// def_starting_resources := 2 ;
10670: LD_ADDR_EXP 44
10674: PUSH
10675: LD_INT 2
10677: ST_TO_ADDR
// def_shipments_density := 1 ;
10678: LD_ADDR_EXP 45
10682: PUSH
10683: LD_INT 1
10685: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10686: LD_ADDR_EXP 46
10690: PUSH
10691: LD_INT 0
10693: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10694: LD_ADDR_EXP 47
10698: PUSH
10699: LD_INT 0
10701: ST_TO_ADDR
// def_shared_vision := 1 ;
10702: LD_ADDR_EXP 48
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
10710: LD_ADDR_EXP 49
10714: PUSH
10715: LD_INT 0
10717: PPUSH
10718: LD_INT 2
10720: PPUSH
10721: CALL_OW 12
10725: ST_TO_ADDR
// def_siberite_detection := 0 ;
10726: LD_ADDR_EXP 50
10730: PUSH
10731: LD_INT 0
10733: ST_TO_ADDR
// def_people_respawning := 0 ;
10734: LD_ADDR_EXP 51
10738: PUSH
10739: LD_INT 0
10741: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10742: LD_ADDR_EXP 52
10746: PUSH
10747: LD_INT 2
10749: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10750: LD_ADDR_EXP 53
10754: PUSH
10755: LD_INT 0
10757: ST_TO_ADDR
// def_builduptime := 0 ;
10758: LD_ADDR_EXP 54
10762: PUSH
10763: LD_INT 0
10765: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
10766: LD_ADDR_VAR 0 2
10770: PUSH
10771: LD_INT 23
10773: PUSH
10774: LD_INT 20
10776: PUSH
10777: LD_INT 40
10779: PUSH
10780: LD_INT 47
10782: PUSH
10783: LD_INT 46
10785: PUSH
10786: LD_INT 39
10788: PUSH
10789: LD_INT 71
10791: PUSH
10792: LD_INT 34
10794: PUSH
10795: LD_INT 41
10797: PUSH
10798: LD_INT 44
10800: PUSH
10801: LD_INT 17
10803: PUSH
10804: LD_INT 16
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_INT 37
10828: PUSH
10829: LD_INT 5
10831: PUSH
10832: LD_INT 13
10834: PUSH
10835: LD_INT 34
10837: PUSH
10838: LD_INT 12
10840: PUSH
10841: LD_INT 15
10843: PUSH
10844: LD_INT 11
10846: PUSH
10847: LD_INT 14
10849: PUSH
10850: LD_INT 29
10852: PUSH
10853: LD_INT 30
10855: PUSH
10856: LD_INT 28
10858: PUSH
10859: LD_INT 24
10861: PUSH
10862: LD_INT 25
10864: PUSH
10865: LD_INT 20
10867: PUSH
10868: LD_INT 21
10870: PUSH
10871: LD_INT 22
10873: PUSH
10874: LD_INT 36
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10896: LD_ADDR_LOC 18
10900: PUSH
10901: EMPTY
10902: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
10903: LD_ADDR_LOC 19
10907: PUSH
10908: LD_INT 14
10910: PUSH
10911: EMPTY
10912: LIST
10913: ST_TO_ADDR
// Banned_Controls := [ ] ;
10914: LD_ADDR_LOC 20
10918: PUSH
10919: EMPTY
10920: ST_TO_ADDR
// Banned_Engines := [ ] ;
10921: LD_ADDR_LOC 21
10925: PUSH
10926: EMPTY
10927: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
10928: LD_ADDR_LOC 16
10932: PUSH
10933: LD_INT 31
10935: PUSH
10936: LD_INT 32
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 4
10945: PUSH
10946: EMPTY
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
10953: LD_ADDR_LOC 17
10957: PUSH
10958: LD_INT 2
10960: PUSH
10961: LD_INT 1
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: ST_TO_ADDR
// for i := 1 to 8 do
10968: LD_ADDR_VAR 0 4
10972: PUSH
10973: DOUBLE
10974: LD_INT 1
10976: DEC
10977: ST_TO_ADDR
10978: LD_INT 8
10980: PUSH
10981: FOR_TO
10982: IFFALSE 11033
// if ( Side_Nations [ i ] = 3 ) then
10984: LD_EXP 19
10988: PUSH
10989: LD_VAR 0 4
10993: ARRAY
10994: PUSH
10995: LD_INT 3
10997: EQUAL
10998: IFFALSE 11031
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11000: LD_ADDR_EXP 19
11004: PUSH
11005: LD_EXP 19
11009: PPUSH
11010: LD_VAR 0 4
11014: PPUSH
11015: LD_INT 1
11017: PPUSH
11018: LD_INT 2
11020: PPUSH
11021: CALL_OW 12
11025: PPUSH
11026: CALL_OW 1
11030: ST_TO_ADDR
11031: GO 10981
11033: POP
11034: POP
// end ; end ;
11035: GO 11038
11037: POP
// for i := 1 to 8 do
11038: LD_ADDR_VAR 0 4
11042: PUSH
11043: DOUBLE
11044: LD_INT 1
11046: DEC
11047: ST_TO_ADDR
11048: LD_INT 8
11050: PUSH
11051: FOR_TO
11052: IFFALSE 11136
// if Side_Positions [ i ] then
11054: LD_EXP 18
11058: PUSH
11059: LD_VAR 0 4
11063: ARRAY
11064: IFFALSE 11134
// begin for j in Unavailable_Techs do
11066: LD_ADDR_VAR 0 5
11070: PUSH
11071: LD_VAR 0 2
11075: PUSH
11076: FOR_IN
11077: IFFALSE 11098
// SetTech ( j , i , 0 ) ;
11079: LD_VAR 0 5
11083: PPUSH
11084: LD_VAR 0 4
11088: PPUSH
11089: LD_INT 0
11091: PPUSH
11092: CALL_OW 322
11096: GO 11076
11098: POP
11099: POP
// for j in Unavailable_Builds do
11100: LD_ADDR_VAR 0 5
11104: PUSH
11105: LD_VAR 0 3
11109: PUSH
11110: FOR_IN
11111: IFFALSE 11132
// SetRestrict ( j , i , 0 ) ;
11113: LD_VAR 0 5
11117: PPUSH
11118: LD_VAR 0 4
11122: PPUSH
11123: LD_INT 0
11125: PPUSH
11126: CALL_OW 324
11130: GO 11110
11132: POP
11133: POP
// end ;
11134: GO 11051
11136: POP
11137: POP
// end ;
11138: LD_VAR 0 1
11142: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11143: LD_INT 0
11145: PPUSH
11146: PPUSH
11147: PPUSH
11148: PPUSH
11149: PPUSH
11150: PPUSH
11151: PPUSH
// for i := 1 to Restricted_Builds do
11152: LD_ADDR_VAR 0 2
11156: PUSH
11157: DOUBLE
11158: LD_INT 1
11160: DEC
11161: ST_TO_ADDR
11162: LD_LOC 16
11166: PUSH
11167: FOR_TO
11168: IFFALSE 11478
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11170: LD_LOC 16
11174: PUSH
11175: LD_VAR 0 2
11179: ARRAY
11180: PUSH
11181: LD_INT 1
11183: ARRAY
11184: PUSH
11185: LD_INT 31
11187: DOUBLE
11188: EQUAL
11189: IFTRUE 11205
11191: LD_INT 32
11193: DOUBLE
11194: EQUAL
11195: IFTRUE 11205
11197: LD_INT 33
11199: DOUBLE
11200: EQUAL
11201: IFTRUE 11205
11203: GO 11216
11205: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11206: LD_ADDR_VAR 0 6
11210: PUSH
11211: LD_STRING #Turrets
11213: ST_TO_ADDR
11214: GO 11261
11216: LD_INT 4
11218: DOUBLE
11219: EQUAL
11220: IFTRUE 11230
11222: LD_INT 5
11224: DOUBLE
11225: EQUAL
11226: IFTRUE 11230
11228: GO 11241
11230: POP
// btype := #Armouries ; b_Behemoth :
11231: LD_ADDR_VAR 0 6
11235: PUSH
11236: LD_STRING #Armouries
11238: ST_TO_ADDR
11239: GO 11261
11241: LD_INT 37
11243: DOUBLE
11244: EQUAL
11245: IFTRUE 11249
11247: GO 11260
11249: POP
// btype := #Behemoths ; end ;
11250: LD_ADDR_VAR 0 6
11254: PUSH
11255: LD_STRING #Behemoths
11257: ST_TO_ADDR
11258: GO 11261
11260: POP
// list := [ ] ;
11261: LD_ADDR_VAR 0 7
11265: PUSH
11266: EMPTY
11267: ST_TO_ADDR
// for j := 1 to 8 do
11268: LD_ADDR_VAR 0 3
11272: PUSH
11273: DOUBLE
11274: LD_INT 1
11276: DEC
11277: ST_TO_ADDR
11278: LD_INT 8
11280: PUSH
11281: FOR_TO
11282: IFFALSE 11375
// if Side_Positions [ j ] then
11284: LD_EXP 18
11288: PUSH
11289: LD_VAR 0 3
11293: ARRAY
11294: IFFALSE 11373
// begin amount := 0 ;
11296: LD_ADDR_VAR 0 5
11300: PUSH
11301: LD_INT 0
11303: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11304: LD_ADDR_VAR 0 4
11308: PUSH
11309: LD_LOC 16
11313: PUSH
11314: LD_VAR 0 2
11318: ARRAY
11319: PUSH
11320: FOR_IN
11321: IFFALSE 11369
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11323: LD_ADDR_VAR 0 5
11327: PUSH
11328: LD_VAR 0 5
11332: PUSH
11333: LD_INT 22
11335: PUSH
11336: LD_VAR 0 3
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 30
11347: PUSH
11348: LD_VAR 0 4
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PPUSH
11361: CALL_OW 69
11365: PLUS
11366: ST_TO_ADDR
11367: GO 11320
11369: POP
11370: POP
// break ;
11371: GO 11375
// end ;
11373: GO 11281
11375: POP
11376: POP
// list := [ ] ;
11377: LD_ADDR_VAR 0 7
11381: PUSH
11382: EMPTY
11383: ST_TO_ADDR
// for j := 1 to 8 do
11384: LD_ADDR_VAR 0 3
11388: PUSH
11389: DOUBLE
11390: LD_INT 1
11392: DEC
11393: ST_TO_ADDR
11394: LD_INT 8
11396: PUSH
11397: FOR_TO
11398: IFFALSE 11418
// list := list ^ amount ;
11400: LD_ADDR_VAR 0 7
11404: PUSH
11405: LD_VAR 0 7
11409: PUSH
11410: LD_VAR 0 5
11414: ADD
11415: ST_TO_ADDR
11416: GO 11397
11418: POP
11419: POP
// Already_Built := Already_Built ^ [ list ] ;
11420: LD_ADDR_LOC 22
11424: PUSH
11425: LD_LOC 22
11429: PUSH
11430: LD_VAR 0 7
11434: PUSH
11435: EMPTY
11436: LIST
11437: ADD
11438: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11439: LD_ADDR_LOC 23
11443: PUSH
11444: LD_LOC 23
11448: PUSH
11449: LD_VAR 0 6
11453: PUSH
11454: LD_VAR 0 5
11458: PUSH
11459: LD_LOC 17
11463: PUSH
11464: LD_VAR 0 2
11468: ARRAY
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: ADD
11475: ST_TO_ADDR
// end ;
11476: GO 11167
11478: POP
11479: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11480: LD_ADDR_LOC 24
11484: PUSH
11485: LD_INT 0
11487: PUSH
11488: LD_INT 0
11490: PUSH
11491: LD_INT 0
11493: PUSH
11494: LD_INT 0
11496: PUSH
11497: LD_INT 0
11499: PUSH
11500: LD_INT 0
11502: PUSH
11503: LD_INT 0
11505: PUSH
11506: LD_INT 0
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: ST_TO_ADDR
// if Limits_Info then
11519: LD_LOC 23
11523: IFFALSE 11539
// Limits_Info := #Limits ^ Limits_Info ;
11525: LD_ADDR_LOC 23
11529: PUSH
11530: LD_STRING #Limits
11532: PUSH
11533: LD_LOC 23
11537: ADD
11538: ST_TO_ADDR
// end ;
11539: LD_VAR 0 1
11543: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
11544: LD_INT 0
11546: PPUSH
11547: PPUSH
11548: PPUSH
11549: PPUSH
// for i := 1 to Restricted_Builds do
11550: LD_ADDR_VAR 0 7
11554: PUSH
11555: DOUBLE
11556: LD_INT 1
11558: DEC
11559: ST_TO_ADDR
11560: LD_LOC 16
11564: PUSH
11565: FOR_TO
11566: IFFALSE 11989
// if BType in Restricted_Builds [ i ] then
11568: LD_VAR 0 2
11572: PUSH
11573: LD_LOC 16
11577: PUSH
11578: LD_VAR 0 7
11582: ARRAY
11583: IN
11584: IFFALSE 11987
// begin if old_side then
11586: LD_VAR 0 4
11590: IFFALSE 11716
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
11592: LD_LOC 22
11596: PUSH
11597: LD_VAR 0 7
11601: ARRAY
11602: PUSH
11603: LD_VAR 0 3
11607: ARRAY
11608: PUSH
11609: LD_VAR 0 5
11613: PLUS
11614: PUSH
11615: LD_LOC 17
11619: PUSH
11620: LD_VAR 0 7
11624: ARRAY
11625: GREATER
11626: IFFALSE 11652
// begin SetSide ( un , old_side ) ;
11628: LD_VAR 0 1
11632: PPUSH
11633: LD_VAR 0 4
11637: PPUSH
11638: CALL_OW 235
// count := 0 ;
11642: LD_ADDR_VAR 0 5
11646: PUSH
11647: LD_INT 0
11649: ST_TO_ADDR
// end else
11650: GO 11716
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
11652: LD_ADDR_LOC 22
11656: PUSH
11657: LD_LOC 22
11661: PPUSH
11662: LD_VAR 0 7
11666: PPUSH
11667: LD_LOC 22
11671: PUSH
11672: LD_VAR 0 7
11676: ARRAY
11677: PPUSH
11678: LD_VAR 0 4
11682: PPUSH
11683: LD_LOC 22
11687: PUSH
11688: LD_VAR 0 7
11692: ARRAY
11693: PUSH
11694: LD_VAR 0 4
11698: ARRAY
11699: PUSH
11700: LD_VAR 0 5
11704: MINUS
11705: PPUSH
11706: CALL_OW 1
11710: PPUSH
11711: CALL_OW 1
11715: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
11716: LD_ADDR_LOC 22
11720: PUSH
11721: LD_LOC 22
11725: PPUSH
11726: LD_VAR 0 7
11730: PPUSH
11731: LD_LOC 22
11735: PUSH
11736: LD_VAR 0 7
11740: ARRAY
11741: PPUSH
11742: LD_VAR 0 3
11746: PPUSH
11747: LD_LOC 22
11751: PUSH
11752: LD_VAR 0 7
11756: ARRAY
11757: PUSH
11758: LD_VAR 0 3
11762: ARRAY
11763: PUSH
11764: LD_VAR 0 5
11768: PLUS
11769: PPUSH
11770: CALL_OW 1
11774: PPUSH
11775: CALL_OW 1
11779: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
11780: LD_VAR 0 5
11784: PUSH
11785: LD_INT 0
11787: NONEQUAL
11788: PUSH
11789: LD_VAR 0 3
11793: PUSH
11794: LD_OWVAR 2
11798: EQUAL
11799: AND
11800: IFFALSE 11843
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
11802: LD_ADDR_LOC 23
11806: PUSH
11807: LD_LOC 23
11811: PPUSH
11812: LD_INT 3
11814: PUSH
11815: LD_VAR 0 7
11819: MUL
11820: PPUSH
11821: LD_LOC 22
11825: PUSH
11826: LD_VAR 0 7
11830: ARRAY
11831: PUSH
11832: LD_VAR 0 3
11836: ARRAY
11837: PPUSH
11838: CALL_OW 1
11842: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
11843: LD_LOC 22
11847: PUSH
11848: LD_VAR 0 7
11852: ARRAY
11853: PUSH
11854: LD_VAR 0 3
11858: ARRAY
11859: PUSH
11860: LD_LOC 17
11864: PUSH
11865: LD_VAR 0 7
11869: ARRAY
11870: GREATER
11871: IFFALSE 11898
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
11873: LD_ADDR_LOC 24
11877: PUSH
11878: LD_LOC 24
11882: PPUSH
11883: LD_VAR 0 3
11887: PPUSH
11888: LD_INT 1
11890: PPUSH
11891: CALL_OW 1
11895: ST_TO_ADDR
// end else
11896: GO 11985
// begin for j := 1 to Restricted_Builds do
11898: LD_ADDR_VAR 0 8
11902: PUSH
11903: DOUBLE
11904: LD_INT 1
11906: DEC
11907: ST_TO_ADDR
11908: LD_LOC 16
11912: PUSH
11913: FOR_TO
11914: IFFALSE 11958
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
11916: LD_LOC 22
11920: PUSH
11921: LD_VAR 0 8
11925: ARRAY
11926: PUSH
11927: LD_VAR 0 3
11931: ARRAY
11932: PUSH
11933: LD_LOC 17
11937: PUSH
11938: LD_VAR 0 8
11942: ARRAY
11943: GREATER
11944: IFFALSE 11956
// begin Is_Cheater := true ;
11946: LD_ADDR_VAR 0 9
11950: PUSH
11951: LD_INT 1
11953: ST_TO_ADDR
// break ;
11954: GO 11958
// end ;
11956: GO 11913
11958: POP
11959: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
11960: LD_ADDR_LOC 24
11964: PUSH
11965: LD_LOC 24
11969: PPUSH
11970: LD_VAR 0 3
11974: PPUSH
11975: LD_VAR 0 9
11979: PPUSH
11980: CALL_OW 1
11984: ST_TO_ADDR
// end ; break ;
11985: GO 11989
// end ;
11987: GO 11565
11989: POP
11990: POP
// end ;
11991: LD_VAR 0 6
11995: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
11996: LD_VAR 0 5
12000: PUSH
12001: LD_LOC 18
12005: IN
12006: PUSH
12007: LD_VAR 0 2
12011: PUSH
12012: LD_LOC 19
12016: IN
12017: OR
12018: PUSH
12019: LD_VAR 0 4
12023: PUSH
12024: LD_LOC 20
12028: IN
12029: OR
12030: PUSH
12031: LD_VAR 0 3
12035: PUSH
12036: LD_LOC 21
12040: IN
12041: OR
12042: IFFALSE 12053
// ComCancel ( factory ) ;
12044: LD_VAR 0 1
12048: PPUSH
12049: CALL_OW 127
// end ;
12053: PPOPN 5
12055: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12056: LD_VAR 0 2
12060: PUSH
12061: LD_LOC 18
12065: IN
12066: IFFALSE 12077
// ComCancel ( building ) ;
12068: LD_VAR 0 1
12072: PPUSH
12073: CALL_OW 127
// end ; end_of_file
12077: PPOPN 2
12079: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12080: LD_INT 0
12082: PPUSH
12083: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12084: LD_ADDR_VAR 0 2
12088: PUSH
12089: LD_STRING #Multi1x1-Time
12091: PUSH
12092: LD_OWVAR 1
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: ST_TO_ADDR
// if WaitServerStrings then
12101: LD_EXP 57
12105: IFFALSE 12123
// AllStrings = AllStrings ^ WaitServerStrings ;
12107: LD_ADDR_VAR 0 2
12111: PUSH
12112: LD_VAR 0 2
12116: PUSH
12117: LD_EXP 57
12121: ADD
12122: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12123: LD_INT 0
12125: PUSH
12126: LD_EXP 13
12130: PUSH
12131: LD_OWVAR 1
12135: MINUS
12136: LESSEQUAL
12137: IFFALSE 12168
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12139: LD_ADDR_VAR 0 2
12143: PUSH
12144: LD_VAR 0 2
12148: PUSH
12149: LD_STRING #allowedsibbomb
12151: PUSH
12152: LD_EXP 13
12156: PUSH
12157: LD_OWVAR 1
12161: MINUS
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: ADD
12167: ST_TO_ADDR
// if ( ExtraStrings ) then
12168: LD_EXP 56
12172: IFFALSE 12194
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12174: LD_ADDR_VAR 0 2
12178: PUSH
12179: LD_VAR 0 2
12183: PUSH
12184: LD_STRING 
12186: ADD
12187: PUSH
12188: LD_EXP 56
12192: ADD
12193: ST_TO_ADDR
// if ( LimitsStrings ) then
12194: CALL 8920 0 0
12198: IFFALSE 12220
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12200: LD_ADDR_VAR 0 2
12204: PUSH
12205: LD_VAR 0 2
12209: PUSH
12210: LD_STRING 
12212: ADD
12213: PUSH
12214: CALL 8920 0 0
12218: ADD
12219: ST_TO_ADDR
// Display_Strings := AllStrings ;
12220: LD_ADDR_OWVAR 47
12224: PUSH
12225: LD_VAR 0 2
12229: ST_TO_ADDR
// end ;
12230: LD_VAR 0 1
12234: RET
// every 0 0$1 do
12235: GO 12237
12237: DISABLE
// begin ShowTimer ;
12238: CALL 12080 0 0
// enable ;
12242: ENABLE
// end ; end_of_file
12243: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12244: LD_INT 0
12246: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12247: LD_VAR 0 1
12251: PPUSH
12252: CALL_OW 255
12256: PUSH
12257: LD_VAR 0 4
12261: EQUAL
12262: IFFALSE 12281
// begin SetAchievement ( ACH_RAD ) ;
12264: LD_STRING ACH_RAD
12266: PPUSH
12267: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12271: LD_STRING ACH_NL
12273: PPUSH
12274: LD_INT 1
12276: PPUSH
12277: CALL_OW 564
// end end ;
12281: LD_VAR 0 5
12285: RET
// export function SA_Win ( side ) ; begin
12286: LD_INT 0
12288: PPUSH
// case side of 1 :
12289: LD_VAR 0 1
12293: PUSH
12294: LD_INT 1
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12315
12302: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12303: LD_STRING ACH_AH
12305: PPUSH
12306: LD_INT 1
12308: PPUSH
12309: CALL_OW 564
12313: GO 12478
12315: LD_INT 2
12317: DOUBLE
12318: EQUAL
12319: IFTRUE 12323
12321: GO 12336
12323: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12324: LD_STRING ACH_E
12326: PPUSH
12327: LD_INT 1
12329: PPUSH
12330: CALL_OW 564
12334: GO 12478
12336: LD_INT 3
12338: DOUBLE
12339: EQUAL
12340: IFTRUE 12344
12342: GO 12357
12344: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12345: LD_STRING ACH_OOL
12347: PPUSH
12348: LD_INT 1
12350: PPUSH
12351: CALL_OW 564
12355: GO 12478
12357: LD_INT 1
12359: PUSH
12360: LD_INT 2
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: DOUBLE
12367: EQUAL
12368: IFTRUE 12372
12370: GO 12397
12372: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12373: LD_STRING ACH_AH
12375: PPUSH
12376: LD_REAL  5.00000000000000E-0001
12379: PPUSH
12380: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12384: LD_STRING ACH_E
12386: PPUSH
12387: LD_REAL  5.00000000000000E-0001
12390: PPUSH
12391: CALL_OW 564
// end ; [ 2 , 3 ] :
12395: GO 12478
12397: LD_INT 2
12399: PUSH
12400: LD_INT 3
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: DOUBLE
12407: EQUAL
12408: IFTRUE 12412
12410: GO 12437
12412: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12413: LD_STRING ACH_OOL
12415: PPUSH
12416: LD_REAL  5.00000000000000E-0001
12419: PPUSH
12420: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12424: LD_STRING ACH_E
12426: PPUSH
12427: LD_REAL  5.00000000000000E-0001
12430: PPUSH
12431: CALL_OW 564
// end ; [ 3 , 1 ] :
12435: GO 12478
12437: LD_INT 3
12439: PUSH
12440: LD_INT 1
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: DOUBLE
12447: EQUAL
12448: IFTRUE 12452
12450: GO 12477
12452: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12453: LD_STRING ACH_AH
12455: PPUSH
12456: LD_REAL  5.00000000000000E-0001
12459: PPUSH
12460: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12464: LD_STRING ACH_OOL
12466: PPUSH
12467: LD_REAL  5.00000000000000E-0001
12470: PPUSH
12471: CALL_OW 564
// end ; end ;
12475: GO 12478
12477: POP
// end ; end_of_file
12478: LD_VAR 0 2
12482: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
12483: LD_INT 0
12485: PPUSH
12486: PPUSH
// enable ( 98 ) ;
12487: LD_INT 98
12489: ENABLE_MARKED
// GameEnded = false ;
12490: LD_ADDR_LOC 26
12494: PUSH
12495: LD_INT 0
12497: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12498: LD_ADDR_LOC 25
12502: PUSH
12503: LD_INT 0
12505: PUSH
12506: LD_INT 0
12508: PUSH
12509: LD_INT 0
12511: PUSH
12512: LD_INT 0
12514: PUSH
12515: LD_INT 0
12517: PUSH
12518: LD_INT 0
12520: PUSH
12521: LD_INT 0
12523: PUSH
12524: LD_INT 0
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: ST_TO_ADDR
// unfoged = false ;
12537: LD_ADDR_LOC 27
12541: PUSH
12542: LD_INT 0
12544: ST_TO_ADDR
// for i = 1 to side_positions do
12545: LD_ADDR_VAR 0 2
12549: PUSH
12550: DOUBLE
12551: LD_INT 1
12553: DEC
12554: ST_TO_ADDR
12555: LD_EXP 18
12559: PUSH
12560: FOR_TO
12561: IFFALSE 12601
// if not side_positions [ i ] then
12563: LD_EXP 18
12567: PUSH
12568: LD_VAR 0 2
12572: ARRAY
12573: NOT
12574: IFFALSE 12599
// defaited = replace ( defaited , i , true ) ;
12576: LD_ADDR_LOC 25
12580: PUSH
12581: LD_LOC 25
12585: PPUSH
12586: LD_VAR 0 2
12590: PPUSH
12591: LD_INT 1
12593: PPUSH
12594: CALL_OW 1
12598: ST_TO_ADDR
12599: GO 12560
12601: POP
12602: POP
// end ;
12603: LD_VAR 0 1
12607: RET
// function CanWinLoose ; begin
12608: LD_INT 0
12610: PPUSH
// Result := true ;
12611: LD_ADDR_VAR 0 1
12615: PUSH
12616: LD_INT 1
12618: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12619: CALL_OW 518
12623: PUSH
12624: CALL_OW 519
12628: PUSH
12629: LD_INT 0
12631: GREATER
12632: AND
12633: IFFALSE 12643
// Result := false ;
12635: LD_ADDR_VAR 0 1
12639: PUSH
12640: LD_INT 0
12642: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12643: CALL_OW 531
12647: PUSH
12648: CALL_OW 519
12652: PUSH
12653: LD_INT 1
12655: GREATER
12656: AND
12657: IFFALSE 12667
// Result := false ;
12659: LD_ADDR_VAR 0 1
12663: PUSH
12664: LD_INT 0
12666: ST_TO_ADDR
// end ;
12667: LD_VAR 0 1
12671: RET
// export function HasPower ( i ) ; var k , h ; begin
12672: LD_INT 0
12674: PPUSH
12675: PPUSH
12676: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
12677: LD_VAR 0 1
12681: PPUSH
12682: CALL_OW 108
12686: NOT
12687: PUSH
12688: LD_EXP 17
12692: PUSH
12693: LD_VAR 0 1
12697: ARRAY
12698: NOT
12699: AND
12700: PUSH
12701: LD_OWVAR 4
12705: AND
12706: IFFALSE 12718
// begin result = false ;
12708: LD_ADDR_VAR 0 2
12712: PUSH
12713: LD_INT 0
12715: ST_TO_ADDR
// end else
12716: GO 13013
// case def_win_rules of 0 :
12718: LD_EXP 14
12722: PUSH
12723: LD_INT 0
12725: DOUBLE
12726: EQUAL
12727: IFTRUE 12731
12729: GO 12894
12731: POP
// if def_people_respawning then
12732: LD_EXP 51
12736: IFFALSE 12827
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
12738: LD_ADDR_VAR 0 2
12742: PUSH
12743: LD_INT 22
12745: PUSH
12746: LD_VAR 0 1
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 2
12757: PUSH
12758: LD_INT 21
12760: PUSH
12761: LD_INT 1
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 33
12770: PUSH
12771: LD_INT 3
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: LD_INT 33
12780: PUSH
12781: LD_INT 5
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 30
12790: PUSH
12791: LD_INT 0
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 30
12800: PUSH
12801: LD_INT 1
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PPUSH
12820: CALL_OW 69
12824: ST_TO_ADDR
12825: GO 12892
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
12827: LD_ADDR_VAR 0 2
12831: PUSH
12832: LD_INT 22
12834: PUSH
12835: LD_VAR 0 1
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 2
12846: PUSH
12847: LD_INT 21
12849: PUSH
12850: LD_INT 1
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 33
12859: PUSH
12860: LD_INT 3
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PUSH
12867: LD_INT 33
12869: PUSH
12870: LD_INT 5
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PPUSH
12887: CALL_OW 69
12891: ST_TO_ADDR
12892: GO 13013
12894: LD_INT 1
12896: DOUBLE
12897: EQUAL
12898: IFTRUE 12902
12900: GO 12941
12902: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
12903: LD_ADDR_VAR 0 2
12907: PUSH
12908: LD_INT 22
12910: PUSH
12911: LD_VAR 0 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 21
12922: PUSH
12923: LD_INT 1
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PPUSH
12934: CALL_OW 69
12938: ST_TO_ADDR
12939: GO 13013
12941: LD_INT 2
12943: DOUBLE
12944: EQUAL
12945: IFTRUE 12949
12947: GO 13012
12949: POP
// begin h = false ;
12950: LD_ADDR_VAR 0 4
12954: PUSH
12955: LD_INT 0
12957: ST_TO_ADDR
// for k in heroes [ i ] do
12958: LD_ADDR_VAR 0 3
12962: PUSH
12963: LD_EXP 30
12967: PUSH
12968: LD_VAR 0 1
12972: ARRAY
12973: PUSH
12974: FOR_IN
12975: IFFALSE 12998
// if IsLive ( k ) then
12977: LD_VAR 0 3
12981: PPUSH
12982: CALL_OW 300
12986: IFFALSE 12996
// h = true ;
12988: LD_ADDR_VAR 0 4
12992: PUSH
12993: LD_INT 1
12995: ST_TO_ADDR
12996: GO 12974
12998: POP
12999: POP
// Result := h ;
13000: LD_ADDR_VAR 0 2
13004: PUSH
13005: LD_VAR 0 4
13009: ST_TO_ADDR
// end ; end ;
13010: GO 13013
13012: POP
// end ;
13013: LD_VAR 0 2
13017: RET
// function AlliedSides ( i , j ) ; begin
13018: LD_INT 0
13020: PPUSH
// Result := false ;
13021: LD_ADDR_VAR 0 3
13025: PUSH
13026: LD_INT 0
13028: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13029: LD_VAR 0 1
13033: PPUSH
13034: LD_VAR 0 2
13038: PPUSH
13039: CALL_OW 81
13043: PUSH
13044: LD_INT 1
13046: EQUAL
13047: PUSH
13048: LD_VAR 0 2
13052: PPUSH
13053: LD_VAR 0 1
13057: PPUSH
13058: CALL_OW 81
13062: PUSH
13063: LD_INT 1
13065: EQUAL
13066: AND
13067: PUSH
13068: LD_VAR 0 1
13072: PPUSH
13073: CALL_OW 83
13077: AND
13078: PUSH
13079: LD_VAR 0 2
13083: PPUSH
13084: CALL_OW 83
13088: AND
13089: IFFALSE 13099
// Result := true ;
13091: LD_ADDR_VAR 0 3
13095: PUSH
13096: LD_INT 1
13098: ST_TO_ADDR
// end ;
13099: LD_VAR 0 3
13103: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
13104: CALL 12608 0 0
13108: PUSH
13109: LD_LOC 26
13113: NOT
13114: AND
13115: IFFALSE 13131
13117: GO 13119
13119: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
13120: LD_ADDR_EXP 57
13124: PUSH
13125: LD_STRING #Player-Ended
13127: PUSH
13128: EMPTY
13129: LIST
13130: ST_TO_ADDR
13131: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
13132: CALL 12608 0 0
13136: PUSH
13137: LD_LOC 26
13141: AND
13142: IFFALSE 13151
13144: GO 13146
13146: DISABLE
// YouLostInMultiplayer ;
13147: CALL_OW 107
13151: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
13152: CALL 12608 0 0
13156: NOT
13157: PUSH
13158: CALL_OW 531
13162: NOT
13163: AND
13164: IFFALSE 13180
13166: GO 13168
13168: DISABLE
// WaitServerStrings = [ #server-wait ] ;
13169: LD_ADDR_EXP 57
13173: PUSH
13174: LD_STRING #server-wait
13176: PUSH
13177: EMPTY
13178: LIST
13179: ST_TO_ADDR
13180: END
// every 100 trigger IAmSpec do
13181: CALL_OW 531
13185: IFFALSE 13201
13187: GO 13189
13189: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
13190: LD_ADDR_EXP 57
13194: PUSH
13195: LD_STRING #Player-IAmSpec
13197: PUSH
13198: EMPTY
13199: LIST
13200: ST_TO_ADDR
13201: END
// every 100 trigger GameEnded and IAmSpec do
13202: LD_LOC 26
13206: PUSH
13207: CALL_OW 531
13211: AND
13212: IFFALSE 13221
13214: GO 13216
13216: DISABLE
// YouLostInMultiplayer ;
13217: CALL_OW 107
13221: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
13222: CALL 12608 0 0
13226: PUSH
13227: LD_LOC 26
13231: NOT
13232: AND
13233: IFFALSE 13249
13235: GO 13237
13237: DISABLE
// WaitServerStrings = [ $player-win ] ;
13238: LD_ADDR_EXP 57
13242: PUSH
13243: LD_STRING $player-win
13245: PUSH
13246: EMPTY
13247: LIST
13248: ST_TO_ADDR
13249: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
13250: CALL 12608 0 0
13254: PUSH
13255: LD_LOC 26
13259: AND
13260: IFFALSE 13284
13262: GO 13264
13264: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
13265: LD_EXP 19
13269: PUSH
13270: LD_OWVAR 2
13274: ARRAY
13275: PPUSH
13276: CALL 12286 0 1
// YouWinInMultiplayer ;
13280: CALL_OW 106
// end ;
13284: END
// every 100 trigger isEditor marked 401 do
13285: LD_OWVAR 84
13289: IFFALSE 13305
13291: GO 13293
13293: DISABLE
// Debug_Strings = [ You won ] ;
13294: LD_ADDR_OWVAR 48
13298: PUSH
13299: LD_STRING You won
13301: PUSH
13302: EMPTY
13303: LIST
13304: ST_TO_ADDR
13305: END
// every 100 trigger isEditor marked 400 do
13306: LD_OWVAR 84
13310: IFFALSE 13326
13312: GO 13314
13314: DISABLE
// Debug_Strings = [ You loss ] ;
13315: LD_ADDR_OWVAR 48
13319: PUSH
13320: LD_STRING You loss
13322: PUSH
13323: EMPTY
13324: LIST
13325: ST_TO_ADDR
13326: END
// every 100 marked 98 do var i , un ;
13327: GO 13329
13329: DISABLE
13330: LD_INT 0
13332: PPUSH
13333: PPUSH
// begin for i = 1 to side_positions do
13334: LD_ADDR_VAR 0 1
13338: PUSH
13339: DOUBLE
13340: LD_INT 1
13342: DEC
13343: ST_TO_ADDR
13344: LD_EXP 18
13348: PUSH
13349: FOR_TO
13350: IFFALSE 13473
// if side_positions [ i ] then
13352: LD_EXP 18
13356: PUSH
13357: LD_VAR 0 1
13361: ARRAY
13362: IFFALSE 13471
// if not HasPower ( i ) and not Defaited [ i ] then
13364: LD_VAR 0 1
13368: PPUSH
13369: CALL 12672 0 1
13373: NOT
13374: PUSH
13375: LD_LOC 25
13379: PUSH
13380: LD_VAR 0 1
13384: ARRAY
13385: NOT
13386: AND
13387: IFFALSE 13471
// begin un = filterallunits ( [ f_side , i ] ) ;
13389: LD_ADDR_VAR 0 2
13393: PUSH
13394: LD_INT 22
13396: PUSH
13397: LD_VAR 0 1
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: ST_TO_ADDR
// if un then
13411: LD_VAR 0 2
13415: IFFALSE 13429
// SetSide ( un , 0 ) ;
13417: LD_VAR 0 2
13421: PPUSH
13422: LD_INT 0
13424: PPUSH
13425: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
13429: LD_ADDR_LOC 25
13433: PUSH
13434: LD_LOC 25
13438: PPUSH
13439: LD_VAR 0 1
13443: PPUSH
13444: LD_INT 1
13446: PPUSH
13447: CALL_OW 1
13451: ST_TO_ADDR
// if i = your_side then
13452: LD_VAR 0 1
13456: PUSH
13457: LD_OWVAR 2
13461: EQUAL
13462: IFFALSE 13471
// begin Multiplayer_Loose_Message ;
13464: CALL_OW 521
// enable ( 400 ) ;
13468: LD_INT 400
13470: ENABLE_MARKED
// end ; end ;
13471: GO 13349
13473: POP
13474: POP
// if not Unfoged and defaited [ your_side ] then
13475: LD_LOC 27
13479: NOT
13480: PUSH
13481: LD_LOC 25
13485: PUSH
13486: LD_OWVAR 2
13490: ARRAY
13491: AND
13492: IFFALSE 13498
// Unfog ;
13494: CALL 13684 0 0
// DidGameEnd ;
13498: CALL 13513 0 0
// if not GameEnded then
13502: LD_LOC 26
13506: NOT
13507: IFFALSE 13510
// enable ;
13509: ENABLE
// end ;
13510: PPOPN 2
13512: END
// function DidGameEnd ; var i , k , enemy ; begin
13513: LD_INT 0
13515: PPUSH
13516: PPUSH
13517: PPUSH
13518: PPUSH
// enemy = [ ] ;
13519: LD_ADDR_VAR 0 4
13523: PUSH
13524: EMPTY
13525: ST_TO_ADDR
// for i = 1 to side_positions do
13526: LD_ADDR_VAR 0 2
13530: PUSH
13531: DOUBLE
13532: LD_INT 1
13534: DEC
13535: ST_TO_ADDR
13536: LD_EXP 18
13540: PUSH
13541: FOR_TO
13542: IFFALSE 13646
// if not defaited [ i ] then
13544: LD_LOC 25
13548: PUSH
13549: LD_VAR 0 2
13553: ARRAY
13554: NOT
13555: IFFALSE 13644
// for k = 1 to side_positions do
13557: LD_ADDR_VAR 0 3
13561: PUSH
13562: DOUBLE
13563: LD_INT 1
13565: DEC
13566: ST_TO_ADDR
13567: LD_EXP 18
13571: PUSH
13572: FOR_TO
13573: IFFALSE 13642
// if not defaited [ k ] then
13575: LD_LOC 25
13579: PUSH
13580: LD_VAR 0 3
13584: ARRAY
13585: NOT
13586: IFFALSE 13640
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
13588: LD_VAR 0 2
13592: PPUSH
13593: LD_VAR 0 3
13597: PPUSH
13598: CALL_OW 81
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: LD_INT 0
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: IN
13613: IFFALSE 13640
// enemy = enemy ^ [ i , k ] ;
13615: LD_ADDR_VAR 0 4
13619: PUSH
13620: LD_VAR 0 4
13624: PUSH
13625: LD_VAR 0 2
13629: PUSH
13630: LD_VAR 0 3
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: ADD
13639: ST_TO_ADDR
13640: GO 13572
13642: POP
13643: POP
13644: GO 13541
13646: POP
13647: POP
// if not enemy then
13648: LD_VAR 0 4
13652: NOT
13653: IFFALSE 13679
// begin GameEnded = true ;
13655: LD_ADDR_LOC 26
13659: PUSH
13660: LD_INT 1
13662: ST_TO_ADDR
// if not defaited [ your_side ] then
13663: LD_LOC 25
13667: PUSH
13668: LD_OWVAR 2
13672: ARRAY
13673: NOT
13674: IFFALSE 13679
// enable ( 401 ) ;
13676: LD_INT 401
13678: ENABLE_MARKED
// end ; end ;
13679: LD_VAR 0 1
13683: RET
// function unfog ; var k , friends ; begin
13684: LD_INT 0
13686: PPUSH
13687: PPUSH
13688: PPUSH
// for k = 1 to side_positions do
13689: LD_ADDR_VAR 0 2
13693: PUSH
13694: DOUBLE
13695: LD_INT 1
13697: DEC
13698: ST_TO_ADDR
13699: LD_EXP 18
13703: PUSH
13704: FOR_TO
13705: IFFALSE 13761
// if not defaited [ k ] then
13707: LD_LOC 25
13711: PUSH
13712: LD_VAR 0 2
13716: ARRAY
13717: NOT
13718: IFFALSE 13759
// if GetAttitude ( your_side , k ) in [ att_friend ] then
13720: LD_OWVAR 2
13724: PPUSH
13725: LD_VAR 0 2
13729: PPUSH
13730: CALL_OW 81
13734: PUSH
13735: LD_INT 1
13737: PUSH
13738: EMPTY
13739: LIST
13740: IN
13741: IFFALSE 13759
// friends = friends ^ k ;
13743: LD_ADDR_VAR 0 3
13747: PUSH
13748: LD_VAR 0 3
13752: PUSH
13753: LD_VAR 0 2
13757: ADD
13758: ST_TO_ADDR
13759: GO 13704
13761: POP
13762: POP
// if not friends then
13763: LD_VAR 0 3
13767: NOT
13768: IFFALSE 13785
// begin fogoff ( true ) ;
13770: LD_INT 1
13772: PPUSH
13773: CALL_OW 344
// unfoged = true ;
13777: LD_ADDR_LOC 27
13781: PUSH
13782: LD_INT 1
13784: ST_TO_ADDR
// end ; end ;
13785: LD_VAR 0 1
13789: RET
// export function MakeGameEnd ; begin
13790: LD_INT 0
13792: PPUSH
// fogoff ( true ) ;
13793: LD_INT 1
13795: PPUSH
13796: CALL_OW 344
// unfoged = true ;
13800: LD_ADDR_LOC 27
13804: PUSH
13805: LD_INT 1
13807: ST_TO_ADDR
// wait ( 0 0$5 ) ;
13808: LD_INT 175
13810: PPUSH
13811: CALL_OW 67
// GameEnded = true ;
13815: LD_ADDR_LOC 26
13819: PUSH
13820: LD_INT 1
13822: ST_TO_ADDR
// end ;
13823: LD_VAR 0 1
13827: RET
// export function GetGameEnded ; begin
13828: LD_INT 0
13830: PPUSH
// result = GameEnded ;
13831: LD_ADDR_VAR 0 1
13835: PUSH
13836: LD_LOC 26
13840: ST_TO_ADDR
// end ; end_of_file
13841: LD_VAR 0 1
13845: RET
// export function SetMpTechs ( ) ; var side , i ; begin
13846: LD_INT 0
13848: PPUSH
13849: PPUSH
13850: PPUSH
// for side = 1 to 8 do
13851: LD_ADDR_VAR 0 2
13855: PUSH
13856: DOUBLE
13857: LD_INT 1
13859: DEC
13860: ST_TO_ADDR
13861: LD_INT 8
13863: PUSH
13864: FOR_TO
13865: IFFALSE 13986
// begin for i = 1 to 72 do
13867: LD_ADDR_VAR 0 3
13871: PUSH
13872: DOUBLE
13873: LD_INT 1
13875: DEC
13876: ST_TO_ADDR
13877: LD_INT 72
13879: PUSH
13880: FOR_TO
13881: IFFALSE 13912
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
13883: LD_VAR 0 3
13887: PPUSH
13888: LD_VAR 0 2
13892: PPUSH
13893: LD_INT 0
13895: PPUSH
13896: LD_VAR 0 3
13900: PPUSH
13901: CALL_OW 565
13905: PPUSH
13906: CALL_OW 322
13910: GO 13880
13912: POP
13913: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
13914: LD_INT 73
13916: PPUSH
13917: LD_VAR 0 2
13921: PPUSH
13922: LD_INT 0
13924: PPUSH
13925: LD_INT 25
13927: PPUSH
13928: CALL_OW 565
13932: PPUSH
13933: CALL_OW 322
// for i = 0 to 40 do
13937: LD_ADDR_VAR 0 3
13941: PUSH
13942: DOUBLE
13943: LD_INT 0
13945: DEC
13946: ST_TO_ADDR
13947: LD_INT 40
13949: PUSH
13950: FOR_TO
13951: IFFALSE 13982
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
13953: LD_VAR 0 3
13957: PPUSH
13958: LD_VAR 0 2
13962: PPUSH
13963: LD_INT 1
13965: PPUSH
13966: LD_VAR 0 3
13970: PPUSH
13971: CALL_OW 565
13975: PPUSH
13976: CALL_OW 324
13980: GO 13950
13982: POP
13983: POP
// end ;
13984: GO 13864
13986: POP
13987: POP
// end ;
13988: LD_VAR 0 1
13992: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
13993: LD_INT 0
13995: PPUSH
13996: PPUSH
13997: PPUSH
// for side = 1 to 8 do
13998: LD_ADDR_VAR 0 3
14002: PUSH
14003: DOUBLE
14004: LD_INT 1
14006: DEC
14007: ST_TO_ADDR
14008: LD_INT 8
14010: PUSH
14011: FOR_TO
14012: IFFALSE 18008
// begin for i = 1 to 73 do
14014: LD_ADDR_VAR 0 4
14018: PUSH
14019: DOUBLE
14020: LD_INT 1
14022: DEC
14023: ST_TO_ADDR
14024: LD_INT 73
14026: PUSH
14027: FOR_TO
14028: IFFALSE 14049
// SetTech ( i , side , state_disabled ) ;
14030: LD_VAR 0 4
14034: PPUSH
14035: LD_VAR 0 3
14039: PPUSH
14040: LD_INT 0
14042: PPUSH
14043: CALL_OW 322
14047: GO 14027
14049: POP
14050: POP
// for i = 0 to 40 do
14051: LD_ADDR_VAR 0 4
14055: PUSH
14056: DOUBLE
14057: LD_INT 0
14059: DEC
14060: ST_TO_ADDR
14061: LD_INT 40
14063: PUSH
14064: FOR_TO
14065: IFFALSE 14086
// SetRestrict ( i , side , false ) ;
14067: LD_VAR 0 4
14071: PPUSH
14072: LD_VAR 0 3
14076: PPUSH
14077: LD_INT 0
14079: PPUSH
14080: CALL_OW 324
14084: GO 14064
14086: POP
14087: POP
// case level of 1 :
14088: LD_VAR 0 1
14092: PUSH
14093: LD_INT 1
14095: DOUBLE
14096: EQUAL
14097: IFTRUE 14101
14099: GO 14254
14101: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14102: LD_INT 35
14104: PPUSH
14105: LD_VAR 0 3
14109: PPUSH
14110: LD_INT 1
14112: PPUSH
14113: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14117: LD_INT 45
14119: PPUSH
14120: LD_VAR 0 3
14124: PPUSH
14125: LD_INT 1
14127: PPUSH
14128: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14132: LD_INT 46
14134: PPUSH
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_INT 1
14142: PPUSH
14143: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14147: LD_INT 47
14149: PPUSH
14150: LD_VAR 0 3
14154: PPUSH
14155: LD_INT 1
14157: PPUSH
14158: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14162: LD_INT 0
14164: PPUSH
14165: LD_VAR 0 3
14169: PPUSH
14170: LD_INT 1
14172: PPUSH
14173: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14177: LD_INT 2
14179: PPUSH
14180: LD_VAR 0 3
14184: PPUSH
14185: LD_INT 1
14187: PPUSH
14188: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14192: LD_INT 4
14194: PPUSH
14195: LD_VAR 0 3
14199: PPUSH
14200: LD_INT 1
14202: PPUSH
14203: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14207: LD_INT 6
14209: PPUSH
14210: LD_VAR 0 3
14214: PPUSH
14215: LD_INT 1
14217: PPUSH
14218: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14222: LD_INT 29
14224: PPUSH
14225: LD_VAR 0 3
14229: PPUSH
14230: LD_INT 1
14232: PPUSH
14233: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14237: LD_INT 31
14239: PPUSH
14240: LD_VAR 0 3
14244: PPUSH
14245: LD_INT 1
14247: PPUSH
14248: CALL_OW 324
// end ; 2 :
14252: GO 18006
14254: LD_INT 2
14256: DOUBLE
14257: EQUAL
14258: IFTRUE 14262
14260: GO 14460
14262: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14263: LD_INT 35
14265: PPUSH
14266: LD_VAR 0 3
14270: PPUSH
14271: LD_INT 1
14273: PPUSH
14274: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14278: LD_INT 45
14280: PPUSH
14281: LD_VAR 0 3
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14293: LD_INT 46
14295: PPUSH
14296: LD_VAR 0 3
14300: PPUSH
14301: LD_INT 1
14303: PPUSH
14304: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14308: LD_INT 47
14310: PPUSH
14311: LD_VAR 0 3
14315: PPUSH
14316: LD_INT 1
14318: PPUSH
14319: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14323: LD_INT 1
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14338: LD_INT 2
14340: PPUSH
14341: LD_VAR 0 3
14345: PPUSH
14346: LD_INT 1
14348: PPUSH
14349: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14353: LD_INT 11
14355: PPUSH
14356: LD_VAR 0 3
14360: PPUSH
14361: LD_INT 1
14363: PPUSH
14364: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14368: LD_INT 0
14370: PPUSH
14371: LD_VAR 0 3
14375: PPUSH
14376: LD_INT 1
14378: PPUSH
14379: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14383: LD_INT 2
14385: PPUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: LD_INT 1
14393: PPUSH
14394: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14398: LD_INT 4
14400: PPUSH
14401: LD_VAR 0 3
14405: PPUSH
14406: LD_INT 1
14408: PPUSH
14409: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14413: LD_INT 6
14415: PPUSH
14416: LD_VAR 0 3
14420: PPUSH
14421: LD_INT 1
14423: PPUSH
14424: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14428: LD_INT 29
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: LD_INT 1
14438: PPUSH
14439: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14443: LD_INT 31
14445: PPUSH
14446: LD_VAR 0 3
14450: PPUSH
14451: LD_INT 1
14453: PPUSH
14454: CALL_OW 324
// end ; 3 :
14458: GO 18006
14460: LD_INT 3
14462: DOUBLE
14463: EQUAL
14464: IFTRUE 14468
14466: GO 14921
14468: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14469: LD_INT 35
14471: PPUSH
14472: LD_VAR 0 3
14476: PPUSH
14477: LD_INT 1
14479: PPUSH
14480: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14484: LD_INT 45
14486: PPUSH
14487: LD_VAR 0 3
14491: PPUSH
14492: LD_INT 1
14494: PPUSH
14495: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14499: LD_INT 46
14501: PPUSH
14502: LD_VAR 0 3
14506: PPUSH
14507: LD_INT 1
14509: PPUSH
14510: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14514: LD_INT 47
14516: PPUSH
14517: LD_VAR 0 3
14521: PPUSH
14522: LD_INT 1
14524: PPUSH
14525: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14529: LD_INT 1
14531: PPUSH
14532: LD_VAR 0 3
14536: PPUSH
14537: LD_INT 1
14539: PPUSH
14540: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14544: LD_INT 2
14546: PPUSH
14547: LD_VAR 0 3
14551: PPUSH
14552: LD_INT 1
14554: PPUSH
14555: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14559: LD_INT 11
14561: PPUSH
14562: LD_VAR 0 3
14566: PPUSH
14567: LD_INT 1
14569: PPUSH
14570: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14574: LD_INT 48
14576: PPUSH
14577: LD_VAR 0 3
14581: PPUSH
14582: LD_INT 1
14584: PPUSH
14585: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14589: LD_INT 69
14591: PPUSH
14592: LD_VAR 0 3
14596: PPUSH
14597: LD_INT 1
14599: PPUSH
14600: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14604: LD_INT 39
14606: PPUSH
14607: LD_VAR 0 3
14611: PPUSH
14612: LD_INT 1
14614: PPUSH
14615: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14619: LD_INT 43
14621: PPUSH
14622: LD_VAR 0 3
14626: PPUSH
14627: LD_INT 1
14629: PPUSH
14630: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14634: LD_INT 51
14636: PPUSH
14637: LD_VAR 0 3
14641: PPUSH
14642: LD_INT 1
14644: PPUSH
14645: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14649: LD_INT 6
14651: PPUSH
14652: LD_VAR 0 3
14656: PPUSH
14657: LD_INT 1
14659: PPUSH
14660: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14664: LD_INT 0
14666: PPUSH
14667: LD_VAR 0 3
14671: PPUSH
14672: LD_INT 1
14674: PPUSH
14675: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14679: LD_INT 2
14681: PPUSH
14682: LD_VAR 0 3
14686: PPUSH
14687: LD_INT 1
14689: PPUSH
14690: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14694: LD_INT 3
14696: PPUSH
14697: LD_VAR 0 3
14701: PPUSH
14702: LD_INT 1
14704: PPUSH
14705: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14709: LD_INT 4
14711: PPUSH
14712: LD_VAR 0 3
14716: PPUSH
14717: LD_INT 1
14719: PPUSH
14720: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14724: LD_INT 6
14726: PPUSH
14727: LD_VAR 0 3
14731: PPUSH
14732: LD_INT 1
14734: PPUSH
14735: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14739: LD_INT 7
14741: PPUSH
14742: LD_VAR 0 3
14746: PPUSH
14747: LD_INT 1
14749: PPUSH
14750: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14754: LD_INT 8
14756: PPUSH
14757: LD_VAR 0 3
14761: PPUSH
14762: LD_INT 1
14764: PPUSH
14765: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14769: LD_INT 10
14771: PPUSH
14772: LD_VAR 0 3
14776: PPUSH
14777: LD_INT 1
14779: PPUSH
14780: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14784: LD_INT 15
14786: PPUSH
14787: LD_VAR 0 3
14791: PPUSH
14792: LD_INT 1
14794: PPUSH
14795: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14799: LD_INT 16
14801: PPUSH
14802: LD_VAR 0 3
14806: PPUSH
14807: LD_INT 1
14809: PPUSH
14810: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14814: LD_INT 17
14816: PPUSH
14817: LD_VAR 0 3
14821: PPUSH
14822: LD_INT 1
14824: PPUSH
14825: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14829: LD_INT 20
14831: PPUSH
14832: LD_VAR 0 3
14836: PPUSH
14837: LD_INT 1
14839: PPUSH
14840: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14844: LD_INT 26
14846: PPUSH
14847: LD_VAR 0 3
14851: PPUSH
14852: LD_INT 1
14854: PPUSH
14855: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14859: LD_INT 27
14861: PPUSH
14862: LD_VAR 0 3
14866: PPUSH
14867: LD_INT 1
14869: PPUSH
14870: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14874: LD_INT 29
14876: PPUSH
14877: LD_VAR 0 3
14881: PPUSH
14882: LD_INT 1
14884: PPUSH
14885: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14889: LD_INT 31
14891: PPUSH
14892: LD_VAR 0 3
14896: PPUSH
14897: LD_INT 1
14899: PPUSH
14900: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14904: LD_INT 32
14906: PPUSH
14907: LD_VAR 0 3
14911: PPUSH
14912: LD_INT 1
14914: PPUSH
14915: CALL_OW 324
// end ; 4 :
14919: GO 18006
14921: LD_INT 4
14923: DOUBLE
14924: EQUAL
14925: IFTRUE 14929
14927: GO 15877
14929: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14930: LD_INT 35
14932: PPUSH
14933: LD_VAR 0 3
14937: PPUSH
14938: LD_INT 1
14940: PPUSH
14941: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14945: LD_INT 45
14947: PPUSH
14948: LD_VAR 0 3
14952: PPUSH
14953: LD_INT 1
14955: PPUSH
14956: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14960: LD_INT 46
14962: PPUSH
14963: LD_VAR 0 3
14967: PPUSH
14968: LD_INT 1
14970: PPUSH
14971: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14975: LD_INT 47
14977: PPUSH
14978: LD_VAR 0 3
14982: PPUSH
14983: LD_INT 1
14985: PPUSH
14986: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14990: LD_INT 1
14992: PPUSH
14993: LD_VAR 0 3
14997: PPUSH
14998: LD_INT 1
15000: PPUSH
15001: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15005: LD_INT 2
15007: PPUSH
15008: LD_VAR 0 3
15012: PPUSH
15013: LD_INT 1
15015: PPUSH
15016: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15020: LD_INT 11
15022: PPUSH
15023: LD_VAR 0 3
15027: PPUSH
15028: LD_INT 1
15030: PPUSH
15031: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15035: LD_INT 20
15037: PPUSH
15038: LD_VAR 0 3
15042: PPUSH
15043: LD_INT 1
15045: PPUSH
15046: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15050: LD_INT 48
15052: PPUSH
15053: LD_VAR 0 3
15057: PPUSH
15058: LD_INT 1
15060: PPUSH
15061: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15065: LD_INT 49
15067: PPUSH
15068: LD_VAR 0 3
15072: PPUSH
15073: LD_INT 1
15075: PPUSH
15076: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15080: LD_INT 69
15082: PPUSH
15083: LD_VAR 0 3
15087: PPUSH
15088: LD_INT 1
15090: PPUSH
15091: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15095: LD_INT 39
15097: PPUSH
15098: LD_VAR 0 3
15102: PPUSH
15103: LD_INT 1
15105: PPUSH
15106: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15110: LD_INT 34
15112: PPUSH
15113: LD_VAR 0 3
15117: PPUSH
15118: LD_INT 1
15120: PPUSH
15121: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15125: LD_INT 42
15127: PPUSH
15128: LD_VAR 0 3
15132: PPUSH
15133: LD_INT 1
15135: PPUSH
15136: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15140: LD_INT 44
15142: PPUSH
15143: LD_VAR 0 3
15147: PPUSH
15148: LD_INT 1
15150: PPUSH
15151: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15155: LD_INT 41
15157: PPUSH
15158: LD_VAR 0 3
15162: PPUSH
15163: LD_INT 1
15165: PPUSH
15166: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15170: LD_INT 43
15172: PPUSH
15173: LD_VAR 0 3
15177: PPUSH
15178: LD_INT 1
15180: PPUSH
15181: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15185: LD_INT 70
15187: PPUSH
15188: LD_VAR 0 3
15192: PPUSH
15193: LD_INT 1
15195: PPUSH
15196: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15200: LD_INT 51
15202: PPUSH
15203: LD_VAR 0 3
15207: PPUSH
15208: LD_INT 1
15210: PPUSH
15211: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15215: LD_INT 52
15217: PPUSH
15218: LD_VAR 0 3
15222: PPUSH
15223: LD_INT 1
15225: PPUSH
15226: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15230: LD_INT 6
15232: PPUSH
15233: LD_VAR 0 3
15237: PPUSH
15238: LD_INT 1
15240: PPUSH
15241: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15245: LD_INT 15
15247: PPUSH
15248: LD_VAR 0 3
15252: PPUSH
15253: LD_INT 1
15255: PPUSH
15256: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15260: LD_INT 7
15262: PPUSH
15263: LD_VAR 0 3
15267: PPUSH
15268: LD_INT 1
15270: PPUSH
15271: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15275: LD_INT 12
15277: PPUSH
15278: LD_VAR 0 3
15282: PPUSH
15283: LD_INT 1
15285: PPUSH
15286: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15290: LD_INT 18
15292: PPUSH
15293: LD_VAR 0 3
15297: PPUSH
15298: LD_INT 1
15300: PPUSH
15301: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15305: LD_INT 60
15307: PPUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: LD_INT 1
15315: PPUSH
15316: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15320: LD_INT 9
15322: PPUSH
15323: LD_VAR 0 3
15327: PPUSH
15328: LD_INT 1
15330: PPUSH
15331: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15335: LD_INT 30
15337: PPUSH
15338: LD_VAR 0 3
15342: PPUSH
15343: LD_INT 1
15345: PPUSH
15346: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15350: LD_INT 37
15352: PPUSH
15353: LD_VAR 0 3
15357: PPUSH
15358: LD_INT 1
15360: PPUSH
15361: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15365: LD_INT 5
15367: PPUSH
15368: LD_VAR 0 3
15372: PPUSH
15373: LD_INT 1
15375: PPUSH
15376: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15380: LD_INT 66
15382: PPUSH
15383: LD_VAR 0 3
15387: PPUSH
15388: LD_INT 1
15390: PPUSH
15391: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15395: LD_INT 21
15397: PPUSH
15398: LD_VAR 0 3
15402: PPUSH
15403: LD_INT 1
15405: PPUSH
15406: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15410: LD_INT 22
15412: PPUSH
15413: LD_VAR 0 3
15417: PPUSH
15418: LD_INT 1
15420: PPUSH
15421: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15425: LD_INT 54
15427: PPUSH
15428: LD_VAR 0 3
15432: PPUSH
15433: LD_INT 1
15435: PPUSH
15436: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15440: LD_INT 0
15442: PPUSH
15443: LD_VAR 0 3
15447: PPUSH
15448: LD_INT 1
15450: PPUSH
15451: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15455: LD_INT 1
15457: PPUSH
15458: LD_VAR 0 3
15462: PPUSH
15463: LD_INT 1
15465: PPUSH
15466: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15470: LD_INT 2
15472: PPUSH
15473: LD_VAR 0 3
15477: PPUSH
15478: LD_INT 1
15480: PPUSH
15481: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15485: LD_INT 3
15487: PPUSH
15488: LD_VAR 0 3
15492: PPUSH
15493: LD_INT 1
15495: PPUSH
15496: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15500: LD_INT 4
15502: PPUSH
15503: LD_VAR 0 3
15507: PPUSH
15508: LD_INT 1
15510: PPUSH
15511: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15515: LD_INT 5
15517: PPUSH
15518: LD_VAR 0 3
15522: PPUSH
15523: LD_INT 1
15525: PPUSH
15526: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15530: LD_INT 6
15532: PPUSH
15533: LD_VAR 0 3
15537: PPUSH
15538: LD_INT 1
15540: PPUSH
15541: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15545: LD_INT 7
15547: PPUSH
15548: LD_VAR 0 3
15552: PPUSH
15553: LD_INT 1
15555: PPUSH
15556: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15560: LD_INT 8
15562: PPUSH
15563: LD_VAR 0 3
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15575: LD_INT 10
15577: PPUSH
15578: LD_VAR 0 3
15582: PPUSH
15583: LD_INT 1
15585: PPUSH
15586: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15590: LD_INT 11
15592: PPUSH
15593: LD_VAR 0 3
15597: PPUSH
15598: LD_INT 1
15600: PPUSH
15601: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15605: LD_INT 12
15607: PPUSH
15608: LD_VAR 0 3
15612: PPUSH
15613: LD_INT 1
15615: PPUSH
15616: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15620: LD_INT 13
15622: PPUSH
15623: LD_VAR 0 3
15627: PPUSH
15628: LD_INT 1
15630: PPUSH
15631: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15635: LD_INT 14
15637: PPUSH
15638: LD_VAR 0 3
15642: PPUSH
15643: LD_INT 1
15645: PPUSH
15646: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15650: LD_INT 15
15652: PPUSH
15653: LD_VAR 0 3
15657: PPUSH
15658: LD_INT 1
15660: PPUSH
15661: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15665: LD_INT 16
15667: PPUSH
15668: LD_VAR 0 3
15672: PPUSH
15673: LD_INT 1
15675: PPUSH
15676: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15680: LD_INT 17
15682: PPUSH
15683: LD_VAR 0 3
15687: PPUSH
15688: LD_INT 1
15690: PPUSH
15691: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15695: LD_INT 19
15697: PPUSH
15698: LD_VAR 0 3
15702: PPUSH
15703: LD_INT 1
15705: PPUSH
15706: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15710: LD_INT 20
15712: PPUSH
15713: LD_VAR 0 3
15717: PPUSH
15718: LD_INT 1
15720: PPUSH
15721: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15725: LD_INT 21
15727: PPUSH
15728: LD_VAR 0 3
15732: PPUSH
15733: LD_INT 1
15735: PPUSH
15736: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15740: LD_INT 23
15742: PPUSH
15743: LD_VAR 0 3
15747: PPUSH
15748: LD_INT 1
15750: PPUSH
15751: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15755: LD_INT 26
15757: PPUSH
15758: LD_VAR 0 3
15762: PPUSH
15763: LD_INT 1
15765: PPUSH
15766: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15770: LD_INT 27
15772: PPUSH
15773: LD_VAR 0 3
15777: PPUSH
15778: LD_INT 1
15780: PPUSH
15781: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15785: LD_INT 28
15787: PPUSH
15788: LD_VAR 0 3
15792: PPUSH
15793: LD_INT 1
15795: PPUSH
15796: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15800: LD_INT 29
15802: PPUSH
15803: LD_VAR 0 3
15807: PPUSH
15808: LD_INT 1
15810: PPUSH
15811: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15815: LD_INT 30
15817: PPUSH
15818: LD_VAR 0 3
15822: PPUSH
15823: LD_INT 1
15825: PPUSH
15826: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15830: LD_INT 31
15832: PPUSH
15833: LD_VAR 0 3
15837: PPUSH
15838: LD_INT 1
15840: PPUSH
15841: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15845: LD_INT 32
15847: PPUSH
15848: LD_VAR 0 3
15852: PPUSH
15853: LD_INT 1
15855: PPUSH
15856: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15860: LD_INT 36
15862: PPUSH
15863: LD_VAR 0 3
15867: PPUSH
15868: LD_INT 1
15870: PPUSH
15871: CALL_OW 324
// end ; 5 :
15875: GO 18006
15877: LD_INT 5
15879: DOUBLE
15880: EQUAL
15881: IFTRUE 15885
15883: GO 16998
15885: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15886: LD_INT 35
15888: PPUSH
15889: LD_VAR 0 3
15893: PPUSH
15894: LD_INT 1
15896: PPUSH
15897: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15901: LD_INT 45
15903: PPUSH
15904: LD_VAR 0 3
15908: PPUSH
15909: LD_INT 1
15911: PPUSH
15912: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15916: LD_INT 46
15918: PPUSH
15919: LD_VAR 0 3
15923: PPUSH
15924: LD_INT 1
15926: PPUSH
15927: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15931: LD_INT 47
15933: PPUSH
15934: LD_VAR 0 3
15938: PPUSH
15939: LD_INT 1
15941: PPUSH
15942: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15946: LD_INT 1
15948: PPUSH
15949: LD_VAR 0 3
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15961: LD_INT 2
15963: PPUSH
15964: LD_VAR 0 3
15968: PPUSH
15969: LD_INT 1
15971: PPUSH
15972: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15976: LD_INT 11
15978: PPUSH
15979: LD_VAR 0 3
15983: PPUSH
15984: LD_INT 1
15986: PPUSH
15987: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15991: LD_INT 20
15993: PPUSH
15994: LD_VAR 0 3
15998: PPUSH
15999: LD_INT 1
16001: PPUSH
16002: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16006: LD_INT 48
16008: PPUSH
16009: LD_VAR 0 3
16013: PPUSH
16014: LD_INT 1
16016: PPUSH
16017: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16021: LD_INT 49
16023: PPUSH
16024: LD_VAR 0 3
16028: PPUSH
16029: LD_INT 1
16031: PPUSH
16032: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16036: LD_INT 69
16038: PPUSH
16039: LD_VAR 0 3
16043: PPUSH
16044: LD_INT 1
16046: PPUSH
16047: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16051: LD_INT 39
16053: PPUSH
16054: LD_VAR 0 3
16058: PPUSH
16059: LD_INT 1
16061: PPUSH
16062: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16066: LD_INT 34
16068: PPUSH
16069: LD_VAR 0 3
16073: PPUSH
16074: LD_INT 1
16076: PPUSH
16077: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16081: LD_INT 42
16083: PPUSH
16084: LD_VAR 0 3
16088: PPUSH
16089: LD_INT 1
16091: PPUSH
16092: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16096: LD_INT 44
16098: PPUSH
16099: LD_VAR 0 3
16103: PPUSH
16104: LD_INT 1
16106: PPUSH
16107: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16111: LD_INT 41
16113: PPUSH
16114: LD_VAR 0 3
16118: PPUSH
16119: LD_INT 1
16121: PPUSH
16122: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16126: LD_INT 40
16128: PPUSH
16129: LD_VAR 0 3
16133: PPUSH
16134: LD_INT 1
16136: PPUSH
16137: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16141: LD_INT 43
16143: PPUSH
16144: LD_VAR 0 3
16148: PPUSH
16149: LD_INT 1
16151: PPUSH
16152: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16156: LD_INT 70
16158: PPUSH
16159: LD_VAR 0 3
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16171: LD_INT 51
16173: PPUSH
16174: LD_VAR 0 3
16178: PPUSH
16179: LD_INT 1
16181: PPUSH
16182: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16186: LD_INT 52
16188: PPUSH
16189: LD_VAR 0 3
16193: PPUSH
16194: LD_INT 1
16196: PPUSH
16197: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16201: LD_INT 6
16203: PPUSH
16204: LD_VAR 0 3
16208: PPUSH
16209: LD_INT 1
16211: PPUSH
16212: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16216: LD_INT 15
16218: PPUSH
16219: LD_VAR 0 3
16223: PPUSH
16224: LD_INT 1
16226: PPUSH
16227: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16231: LD_INT 7
16233: PPUSH
16234: LD_VAR 0 3
16238: PPUSH
16239: LD_INT 1
16241: PPUSH
16242: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16246: LD_INT 12
16248: PPUSH
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_INT 1
16256: PPUSH
16257: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16261: LD_INT 17
16263: PPUSH
16264: LD_VAR 0 3
16268: PPUSH
16269: LD_INT 1
16271: PPUSH
16272: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16276: LD_INT 18
16278: PPUSH
16279: LD_VAR 0 3
16283: PPUSH
16284: LD_INT 1
16286: PPUSH
16287: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16291: LD_INT 60
16293: PPUSH
16294: LD_VAR 0 3
16298: PPUSH
16299: LD_INT 1
16301: PPUSH
16302: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16306: LD_INT 32
16308: PPUSH
16309: LD_VAR 0 3
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16321: LD_INT 9
16323: PPUSH
16324: LD_VAR 0 3
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16336: LD_INT 57
16338: PPUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: LD_INT 1
16346: PPUSH
16347: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16351: LD_INT 30
16353: PPUSH
16354: LD_VAR 0 3
16358: PPUSH
16359: LD_INT 1
16361: PPUSH
16362: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16366: LD_INT 37
16368: PPUSH
16369: LD_VAR 0 3
16373: PPUSH
16374: LD_INT 1
16376: PPUSH
16377: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16381: LD_INT 63
16383: PPUSH
16384: LD_VAR 0 3
16388: PPUSH
16389: LD_INT 1
16391: PPUSH
16392: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16396: LD_INT 3
16398: PPUSH
16399: LD_VAR 0 3
16403: PPUSH
16404: LD_INT 1
16406: PPUSH
16407: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16411: LD_INT 4
16413: PPUSH
16414: LD_VAR 0 3
16418: PPUSH
16419: LD_INT 1
16421: PPUSH
16422: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16426: LD_INT 5
16428: PPUSH
16429: LD_VAR 0 3
16433: PPUSH
16434: LD_INT 1
16436: PPUSH
16437: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16441: LD_INT 66
16443: PPUSH
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 1
16451: PPUSH
16452: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16456: LD_INT 21
16458: PPUSH
16459: LD_VAR 0 3
16463: PPUSH
16464: LD_INT 1
16466: PPUSH
16467: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16471: LD_INT 22
16473: PPUSH
16474: LD_VAR 0 3
16478: PPUSH
16479: LD_INT 1
16481: PPUSH
16482: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16486: LD_INT 19
16488: PPUSH
16489: LD_VAR 0 3
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16501: LD_INT 54
16503: PPUSH
16504: LD_VAR 0 3
16508: PPUSH
16509: LD_INT 1
16511: PPUSH
16512: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16516: LD_INT 55
16518: PPUSH
16519: LD_VAR 0 3
16523: PPUSH
16524: LD_INT 1
16526: PPUSH
16527: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16531: LD_INT 0
16533: PPUSH
16534: LD_VAR 0 3
16538: PPUSH
16539: LD_INT 1
16541: PPUSH
16542: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16546: LD_INT 1
16548: PPUSH
16549: LD_VAR 0 3
16553: PPUSH
16554: LD_INT 1
16556: PPUSH
16557: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16561: LD_INT 2
16563: PPUSH
16564: LD_VAR 0 3
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16576: LD_INT 3
16578: PPUSH
16579: LD_VAR 0 3
16583: PPUSH
16584: LD_INT 1
16586: PPUSH
16587: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16591: LD_INT 4
16593: PPUSH
16594: LD_VAR 0 3
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16606: LD_INT 5
16608: PPUSH
16609: LD_VAR 0 3
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16621: LD_INT 6
16623: PPUSH
16624: LD_VAR 0 3
16628: PPUSH
16629: LD_INT 1
16631: PPUSH
16632: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16636: LD_INT 7
16638: PPUSH
16639: LD_VAR 0 3
16643: PPUSH
16644: LD_INT 1
16646: PPUSH
16647: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16651: LD_INT 8
16653: PPUSH
16654: LD_VAR 0 3
16658: PPUSH
16659: LD_INT 1
16661: PPUSH
16662: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16666: LD_INT 10
16668: PPUSH
16669: LD_VAR 0 3
16673: PPUSH
16674: LD_INT 1
16676: PPUSH
16677: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16681: LD_INT 11
16683: PPUSH
16684: LD_VAR 0 3
16688: PPUSH
16689: LD_INT 1
16691: PPUSH
16692: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16696: LD_INT 12
16698: PPUSH
16699: LD_VAR 0 3
16703: PPUSH
16704: LD_INT 1
16706: PPUSH
16707: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16711: LD_INT 13
16713: PPUSH
16714: LD_VAR 0 3
16718: PPUSH
16719: LD_INT 1
16721: PPUSH
16722: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16726: LD_INT 14
16728: PPUSH
16729: LD_VAR 0 3
16733: PPUSH
16734: LD_INT 1
16736: PPUSH
16737: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16741: LD_INT 15
16743: PPUSH
16744: LD_VAR 0 3
16748: PPUSH
16749: LD_INT 1
16751: PPUSH
16752: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16756: LD_INT 16
16758: PPUSH
16759: LD_VAR 0 3
16763: PPUSH
16764: LD_INT 1
16766: PPUSH
16767: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16771: LD_INT 17
16773: PPUSH
16774: LD_VAR 0 3
16778: PPUSH
16779: LD_INT 1
16781: PPUSH
16782: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
16786: LD_INT 18
16788: PPUSH
16789: LD_VAR 0 3
16793: PPUSH
16794: LD_INT 1
16796: PPUSH
16797: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16801: LD_INT 19
16803: PPUSH
16804: LD_VAR 0 3
16808: PPUSH
16809: LD_INT 1
16811: PPUSH
16812: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16816: LD_INT 20
16818: PPUSH
16819: LD_VAR 0 3
16823: PPUSH
16824: LD_INT 1
16826: PPUSH
16827: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16831: LD_INT 21
16833: PPUSH
16834: LD_VAR 0 3
16838: PPUSH
16839: LD_INT 1
16841: PPUSH
16842: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16846: LD_INT 23
16848: PPUSH
16849: LD_VAR 0 3
16853: PPUSH
16854: LD_INT 1
16856: PPUSH
16857: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16861: LD_INT 26
16863: PPUSH
16864: LD_VAR 0 3
16868: PPUSH
16869: LD_INT 1
16871: PPUSH
16872: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16876: LD_INT 27
16878: PPUSH
16879: LD_VAR 0 3
16883: PPUSH
16884: LD_INT 1
16886: PPUSH
16887: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16891: LD_INT 28
16893: PPUSH
16894: LD_VAR 0 3
16898: PPUSH
16899: LD_INT 1
16901: PPUSH
16902: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16906: LD_INT 29
16908: PPUSH
16909: LD_VAR 0 3
16913: PPUSH
16914: LD_INT 1
16916: PPUSH
16917: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16921: LD_INT 30
16923: PPUSH
16924: LD_VAR 0 3
16928: PPUSH
16929: LD_INT 1
16931: PPUSH
16932: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16936: LD_INT 31
16938: PPUSH
16939: LD_VAR 0 3
16943: PPUSH
16944: LD_INT 1
16946: PPUSH
16947: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16951: LD_INT 32
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: LD_INT 1
16961: PPUSH
16962: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
16966: LD_INT 33
16968: PPUSH
16969: LD_VAR 0 3
16973: PPUSH
16974: LD_INT 1
16976: PPUSH
16977: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16981: LD_INT 36
16983: PPUSH
16984: LD_VAR 0 3
16988: PPUSH
16989: LD_INT 1
16991: PPUSH
16992: CALL_OW 324
// end ; 6 :
16996: GO 18006
16998: LD_INT 6
17000: DOUBLE
17001: EQUAL
17002: IFTRUE 17006
17004: GO 17931
17006: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17007: LD_INT 35
17009: PPUSH
17010: LD_VAR 0 3
17014: PPUSH
17015: LD_INT 1
17017: PPUSH
17018: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17022: LD_INT 45
17024: PPUSH
17025: LD_VAR 0 3
17029: PPUSH
17030: LD_INT 1
17032: PPUSH
17033: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17037: LD_INT 46
17039: PPUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_INT 1
17047: PPUSH
17048: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17052: LD_INT 47
17054: PPUSH
17055: LD_VAR 0 3
17059: PPUSH
17060: LD_INT 1
17062: PPUSH
17063: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17067: LD_INT 1
17069: PPUSH
17070: LD_VAR 0 3
17074: PPUSH
17075: LD_INT 1
17077: PPUSH
17078: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17082: LD_INT 2
17084: PPUSH
17085: LD_VAR 0 3
17089: PPUSH
17090: LD_INT 1
17092: PPUSH
17093: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17097: LD_INT 11
17099: PPUSH
17100: LD_VAR 0 3
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17112: LD_INT 20
17114: PPUSH
17115: LD_VAR 0 3
17119: PPUSH
17120: LD_INT 1
17122: PPUSH
17123: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17127: LD_INT 48
17129: PPUSH
17130: LD_VAR 0 3
17134: PPUSH
17135: LD_INT 1
17137: PPUSH
17138: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17142: LD_INT 49
17144: PPUSH
17145: LD_VAR 0 3
17149: PPUSH
17150: LD_INT 1
17152: PPUSH
17153: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17157: LD_INT 50
17159: PPUSH
17160: LD_VAR 0 3
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17172: LD_INT 69
17174: PPUSH
17175: LD_VAR 0 3
17179: PPUSH
17180: LD_INT 1
17182: PPUSH
17183: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17187: LD_INT 39
17189: PPUSH
17190: LD_VAR 0 3
17194: PPUSH
17195: LD_INT 1
17197: PPUSH
17198: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17202: LD_INT 34
17204: PPUSH
17205: LD_VAR 0 3
17209: PPUSH
17210: LD_INT 1
17212: PPUSH
17213: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17217: LD_INT 42
17219: PPUSH
17220: LD_VAR 0 3
17224: PPUSH
17225: LD_INT 1
17227: PPUSH
17228: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17232: LD_INT 44
17234: PPUSH
17235: LD_VAR 0 3
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17247: LD_INT 41
17249: PPUSH
17250: LD_VAR 0 3
17254: PPUSH
17255: LD_INT 1
17257: PPUSH
17258: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
17262: LD_INT 13
17264: PPUSH
17265: LD_VAR 0 3
17269: PPUSH
17270: LD_INT 1
17272: PPUSH
17273: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17277: LD_INT 40
17279: PPUSH
17280: LD_VAR 0 3
17284: PPUSH
17285: LD_INT 1
17287: PPUSH
17288: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17292: LD_INT 43
17294: PPUSH
17295: LD_VAR 0 3
17299: PPUSH
17300: LD_INT 1
17302: PPUSH
17303: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17307: LD_INT 70
17309: PPUSH
17310: LD_VAR 0 3
17314: PPUSH
17315: LD_INT 1
17317: PPUSH
17318: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
17322: LD_INT 23
17324: PPUSH
17325: LD_VAR 0 3
17329: PPUSH
17330: LD_INT 1
17332: PPUSH
17333: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17337: LD_INT 51
17339: PPUSH
17340: LD_VAR 0 3
17344: PPUSH
17345: LD_INT 1
17347: PPUSH
17348: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17352: LD_INT 52
17354: PPUSH
17355: LD_VAR 0 3
17359: PPUSH
17360: LD_INT 1
17362: PPUSH
17363: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17367: LD_INT 6
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: LD_INT 1
17377: PPUSH
17378: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17382: LD_INT 15
17384: PPUSH
17385: LD_VAR 0 3
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17397: LD_INT 7
17399: PPUSH
17400: LD_VAR 0 3
17404: PPUSH
17405: LD_INT 1
17407: PPUSH
17408: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17412: LD_INT 12
17414: PPUSH
17415: LD_VAR 0 3
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
17427: LD_INT 10
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_INT 1
17437: PPUSH
17438: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17442: LD_INT 17
17444: PPUSH
17445: LD_VAR 0 3
17449: PPUSH
17450: LD_INT 1
17452: PPUSH
17453: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17457: LD_INT 18
17459: PPUSH
17460: LD_VAR 0 3
17464: PPUSH
17465: LD_INT 1
17467: PPUSH
17468: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17472: LD_INT 60
17474: PPUSH
17475: LD_VAR 0 3
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
17487: LD_INT 61
17489: PPUSH
17490: LD_VAR 0 3
17494: PPUSH
17495: LD_INT 1
17497: PPUSH
17498: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17502: LD_INT 32
17504: PPUSH
17505: LD_VAR 0 3
17509: PPUSH
17510: LD_INT 1
17512: PPUSH
17513: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
17517: LD_INT 27
17519: PPUSH
17520: LD_VAR 0 3
17524: PPUSH
17525: LD_INT 1
17527: PPUSH
17528: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
17532: LD_INT 36
17534: PPUSH
17535: LD_VAR 0 3
17539: PPUSH
17540: LD_INT 1
17542: PPUSH
17543: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
17547: LD_INT 33
17549: PPUSH
17550: LD_VAR 0 3
17554: PPUSH
17555: LD_INT 1
17557: PPUSH
17558: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17562: LD_INT 9
17564: PPUSH
17565: LD_VAR 0 3
17569: PPUSH
17570: LD_INT 1
17572: PPUSH
17573: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
17577: LD_INT 38
17579: PPUSH
17580: LD_VAR 0 3
17584: PPUSH
17585: LD_INT 1
17587: PPUSH
17588: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17592: LD_INT 57
17594: PPUSH
17595: LD_VAR 0 3
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
17607: LD_INT 58
17609: PPUSH
17610: LD_VAR 0 3
17614: PPUSH
17615: LD_INT 1
17617: PPUSH
17618: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
17622: LD_INT 28
17624: PPUSH
17625: LD_VAR 0 3
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
17637: LD_INT 29
17639: PPUSH
17640: LD_VAR 0 3
17644: PPUSH
17645: LD_INT 1
17647: PPUSH
17648: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17652: LD_INT 30
17654: PPUSH
17655: LD_VAR 0 3
17659: PPUSH
17660: LD_INT 1
17662: PPUSH
17663: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17667: LD_INT 37
17669: PPUSH
17670: LD_VAR 0 3
17674: PPUSH
17675: LD_INT 1
17677: PPUSH
17678: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17682: LD_INT 63
17684: PPUSH
17685: LD_VAR 0 3
17689: PPUSH
17690: LD_INT 1
17692: PPUSH
17693: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
17697: LD_INT 64
17699: PPUSH
17700: LD_VAR 0 3
17704: PPUSH
17705: LD_INT 1
17707: PPUSH
17708: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17712: LD_INT 3
17714: PPUSH
17715: LD_VAR 0 3
17719: PPUSH
17720: LD_INT 1
17722: PPUSH
17723: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17727: LD_INT 4
17729: PPUSH
17730: LD_VAR 0 3
17734: PPUSH
17735: LD_INT 1
17737: PPUSH
17738: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17742: LD_INT 5
17744: PPUSH
17745: LD_VAR 0 3
17749: PPUSH
17750: LD_INT 1
17752: PPUSH
17753: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
17757: LD_INT 8
17759: PPUSH
17760: LD_VAR 0 3
17764: PPUSH
17765: LD_INT 1
17767: PPUSH
17768: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17772: LD_INT 66
17774: PPUSH
17775: LD_VAR 0 3
17779: PPUSH
17780: LD_INT 1
17782: PPUSH
17783: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
17787: LD_INT 67
17789: PPUSH
17790: LD_VAR 0 3
17794: PPUSH
17795: LD_INT 1
17797: PPUSH
17798: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17802: LD_INT 21
17804: PPUSH
17805: LD_VAR 0 3
17809: PPUSH
17810: LD_INT 1
17812: PPUSH
17813: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17817: LD_INT 22
17819: PPUSH
17820: LD_VAR 0 3
17824: PPUSH
17825: LD_INT 1
17827: PPUSH
17828: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17832: LD_INT 19
17834: PPUSH
17835: LD_VAR 0 3
17839: PPUSH
17840: LD_INT 1
17842: PPUSH
17843: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
17847: LD_INT 26
17849: PPUSH
17850: LD_VAR 0 3
17854: PPUSH
17855: LD_INT 1
17857: PPUSH
17858: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17862: LD_INT 54
17864: PPUSH
17865: LD_VAR 0 3
17869: PPUSH
17870: LD_INT 1
17872: PPUSH
17873: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17877: LD_INT 55
17879: PPUSH
17880: LD_VAR 0 3
17884: PPUSH
17885: LD_INT 1
17887: PPUSH
17888: CALL_OW 322
// for i = 0 to 39 do
17892: LD_ADDR_VAR 0 4
17896: PUSH
17897: DOUBLE
17898: LD_INT 0
17900: DEC
17901: ST_TO_ADDR
17902: LD_INT 39
17904: PUSH
17905: FOR_TO
17906: IFFALSE 17927
// SetRestrict ( i , side , true ) ;
17908: LD_VAR 0 4
17912: PPUSH
17913: LD_VAR 0 3
17917: PPUSH
17918: LD_INT 1
17920: PPUSH
17921: CALL_OW 324
17925: GO 17905
17927: POP
17928: POP
// end ; else
17929: GO 18006
17931: POP
// begin for i = 1 to 73 do
17932: LD_ADDR_VAR 0 4
17936: PUSH
17937: DOUBLE
17938: LD_INT 1
17940: DEC
17941: ST_TO_ADDR
17942: LD_INT 73
17944: PUSH
17945: FOR_TO
17946: IFFALSE 17967
// SetTech ( i , side , state_enabled ) ;
17948: LD_VAR 0 4
17952: PPUSH
17953: LD_VAR 0 3
17957: PPUSH
17958: LD_INT 1
17960: PPUSH
17961: CALL_OW 322
17965: GO 17945
17967: POP
17968: POP
// for i = 0 to 39 do
17969: LD_ADDR_VAR 0 4
17973: PUSH
17974: DOUBLE
17975: LD_INT 0
17977: DEC
17978: ST_TO_ADDR
17979: LD_INT 39
17981: PUSH
17982: FOR_TO
17983: IFFALSE 18004
// SetRestrict ( i , side , true ) ;
17985: LD_VAR 0 4
17989: PPUSH
17990: LD_VAR 0 3
17994: PPUSH
17995: LD_INT 1
17997: PPUSH
17998: CALL_OW 324
18002: GO 17982
18004: POP
18005: POP
// end ; end ; end ;
18006: GO 14011
18008: POP
18009: POP
// end ;
18010: LD_VAR 0 2
18014: RET
