// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 386: LD_ADDR_EXP 36
 390: PUSH
 391: LD_EXP 31
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: EMPTY
 400: LIST
 401: DIFF
 402: PUSH
 403: LD_INT 1
 405: GREATER
 406: ST_TO_ADDR
// if Multiplayer then
 407: LD_OWVAR 4
 411: IFFALSE 613
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 413: LD_ADDR_EXP 1
 417: PUSH
 418: LD_INT 0
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 426: LD_ADDR_EXP 2
 430: PUSH
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 439: LD_ADDR_EXP 3
 443: PUSH
 444: LD_INT 2
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 452: LD_ADDR_EXP 4
 456: PUSH
 457: LD_INT 3
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 465: LD_ADDR_EXP 5
 469: PUSH
 470: LD_INT 4
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 478: LD_ADDR_EXP 6
 482: PUSH
 483: LD_INT 5
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 491: LD_ADDR_EXP 7
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 499: LD_ADDR_EXP 8
 503: PUSH
 504: LD_INT 10
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 512: LD_ADDR_EXP 9
 516: PUSH
 517: LD_INT 11
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 525: LD_ADDR_EXP 10
 529: PUSH
 530: LD_INT 12
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 538: LD_ADDR_EXP 11
 542: PUSH
 543: LD_INT 13
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 551: LD_ADDR_EXP 12
 555: PUSH
 556: LD_INT 14
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 564: LD_ADDR_EXP 13
 568: PUSH
 569: LD_INT 17
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 577: LD_ADDR_EXP 14
 581: PUSH
 582: LD_INT 20
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_win_rules = 0 ;
 603: LD_ADDR_EXP 30
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// end else
 611: GO 745
// begin Randomize ;
 613: CALL_OW 10
// def_base_level := 2 ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 2
 624: ST_TO_ADDR
// def_amount_of_people := 0 ;
 625: LD_ADDR_EXP 2
 629: PUSH
 630: LD_INT 0
 632: ST_TO_ADDR
// def_skill_level := 1 ;
 633: LD_ADDR_EXP 3
 637: PUSH
 638: LD_INT 1
 640: ST_TO_ADDR
// def_starting_resources := 2 ;
 641: LD_ADDR_EXP 4
 645: PUSH
 646: LD_INT 2
 648: ST_TO_ADDR
// def_shipments_density := 1 ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 657: LD_ADDR_EXP 6
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 665: LD_ADDR_EXP 7
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_shared_vision := 1 ;
 673: LD_ADDR_EXP 8
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_morale_flags := 1 ;
 681: LD_ADDR_EXP 9
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_siberite_detection := 1 ;
 689: LD_ADDR_EXP 10
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_people_respawning := 2 ;
 697: LD_ADDR_EXP 11
 701: PUSH
 702: LD_INT 2
 704: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 705: LD_ADDR_EXP 12
 709: PUSH
 710: LD_INT 3
 712: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 713: LD_ADDR_EXP 13
 717: PUSH
 718: LD_INT 0
 720: ST_TO_ADDR
// def_builduptime := 1 ;
 721: LD_ADDR_EXP 14
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// tech_level = 4 ;
 729: LD_ADDR_VAR 0 3
 733: PUSH
 734: LD_INT 4
 736: ST_TO_ADDR
// def_win_rules = 0 ;
 737: LD_ADDR_EXP 30
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// end ; if isSGUI then
 745: LD_OWVAR 83
 749: IFFALSE 757
// setMpTechs ( ) else
 751: CALL 10013 0 0
 755: GO 770
// SetMpTechLevel ( tech_level + 1 ) ;
 757: LD_VAR 0 3
 761: PUSH
 762: LD_INT 1
 764: PLUS
 765: PPUSH
 766: CALL 10160 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 770: LD_ADDR_EXP 17
 774: PUSH
 775: LD_INT 0
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 1
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_EXP 1
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: ARRAY
 798: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 18
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 828: LD_ADDR_EXP 19
 832: PUSH
 833: LD_INT 9
 835: PUSH
 836: LD_INT 12
 838: PUSH
 839: LD_INT 15
 841: PUSH
 842: LD_INT 24
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: PUSH
 851: LD_EXP 2
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: ARRAY
 860: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 861: LD_ADDR_EXP 20
 865: PUSH
 866: LD_INT 2
 868: PUSH
 869: LD_INT 3
 871: PUSH
 872: LD_INT 4
 874: PUSH
 875: LD_INT 5
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_EXP 3
 888: PUSH
 889: LD_INT 1
 891: PLUS
 892: ARRAY
 893: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 894: LD_ADDR_EXP 22
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 30
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 50
 929: PUSH
 930: LD_INT 20
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 80
 943: PUSH
 944: LD_INT 40
 946: PUSH
 947: LD_INT 20
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: LD_EXP 4
 965: PUSH
 966: LD_INT 1
 968: PLUS
 969: ARRAY
 970: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 971: LD_ADDR_EXP 21
 975: PUSH
 976: LD_INT 10
 978: PUSH
 979: EMPTY
 980: LIST
 981: PUSH
 982: LD_INT 7
 984: PUSH
 985: LD_INT 14
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 6
 994: PUSH
 995: LD_INT 12
 997: PUSH
 998: LD_INT 18
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_INT 5
1008: PUSH
1009: LD_INT 10
1011: PUSH
1012: LD_INT 15
1014: PUSH
1015: LD_INT 20
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_EXP 4
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: ARRAY
1039: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 ] [ def_shipments_density + 1 ] ;
1040: LD_ADDR_EXP 23
1044: PUSH
1045: LD_INT 150
1047: PUSH
1048: LD_INT 125
1050: PUSH
1051: LD_INT 100
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_EXP 5
1063: PUSH
1064: LD_INT 1
1066: PLUS
1067: ARRAY
1068: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1069: LD_ADDR_EXP 27
1073: PUSH
1074: LD_INT 0
1076: PUSH
1077: LD_INT 10500
1079: PUSH
1080: LD_INT 6300
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_EXP 11
1092: PUSH
1093: LD_INT 1
1095: PLUS
1096: ARRAY
1097: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1098: LD_ADDR_EXP 28
1102: PUSH
1103: LD_INT 0
1105: PUSH
1106: LD_INT 31500
1108: PUSH
1109: LD_INT 10500
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: LD_EXP 11
1121: PUSH
1122: LD_INT 1
1124: PLUS
1125: ARRAY
1126: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1127: LD_ADDR_EXP 25
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: LD_INT 1
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: PUSH
1150: LD_EXP 12
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: ARRAY
1159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1160: LD_ADDR_EXP 24
1164: PUSH
1165: LD_INT 1
1167: NEG
1168: PUSH
1169: LD_INT 350
1171: PUSH
1172: LD_INT 700
1174: PUSH
1175: LD_INT 1400
1177: PUSH
1178: LD_INT 0
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_EXP 9
1192: PUSH
1193: LD_INT 1
1195: PLUS
1196: ARRAY
1197: ST_TO_ADDR
// battle_flags_id = [ ] ;
1198: LD_ADDR_EXP 44
1202: PUSH
1203: EMPTY
1204: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1205: LD_ADDR_EXP 29
1209: PUSH
1210: LD_INT 0
1212: PUSH
1213: LD_INT 1
1215: PUSH
1216: LD_INT 63000
1218: PUSH
1219: LD_INT 126000
1221: PUSH
1222: LD_INT 189000
1224: PUSH
1225: LD_INT 252000
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: PUSH
1236: LD_EXP 13
1240: PUSH
1241: LD_INT 1
1243: PLUS
1244: ARRAY
1245: ST_TO_ADDR
// end ;
1246: LD_VAR 0 1
1250: RET
// function init_map ; var i , j ; begin
1251: LD_INT 0
1253: PPUSH
1254: PPUSH
1255: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1256: LD_ADDR_EXP 40
1260: PUSH
1261: LD_INT 17
1263: PUSH
1264: LD_INT 4
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 72
1273: PUSH
1274: LD_INT 5
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 157
1283: PUSH
1284: LD_INT 22
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 205
1293: PUSH
1294: LD_INT 111
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 221
1303: PUSH
1304: LD_INT 195
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 169
1313: PUSH
1314: LD_INT 196
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 93
1323: PUSH
1324: LD_INT 177
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 52
1333: PUSH
1334: LD_INT 92
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1351: LD_ADDR_EXP 41
1355: PUSH
1356: LD_INT 17
1358: PUSH
1359: LD_INT 4
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 16
1368: PUSH
1369: LD_INT 23
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: PUSH
1380: LD_INT 72
1382: PUSH
1383: LD_INT 5
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 88
1392: PUSH
1393: LD_INT 28
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 157
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 133
1416: PUSH
1417: LD_INT 12
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 205
1430: PUSH
1431: LD_INT 111
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: LD_INT 200
1440: PUSH
1441: LD_INT 95
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 221
1454: PUSH
1455: LD_INT 195
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 249
1464: PUSH
1465: LD_INT 190
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 169
1478: PUSH
1479: LD_INT 196
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 180
1488: PUSH
1489: LD_INT 197
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 93
1502: PUSH
1503: LD_INT 177
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 114
1512: PUSH
1513: LD_INT 194
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 52
1526: PUSH
1527: LD_INT 92
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 58
1536: PUSH
1537: LD_INT 107
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1558: LD_ADDR_EXP 42
1562: PUSH
1563: LD_INT 12
1565: PUSH
1566: LD_INT 12
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 99
1575: PUSH
1576: LD_INT 19
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 139
1585: PUSH
1586: LD_INT 5
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 207
1595: PUSH
1596: LD_INT 100
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 244
1605: PUSH
1606: LD_INT 181
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 183
1615: PUSH
1616: LD_INT 196
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 117
1625: PUSH
1626: LD_INT 195
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 54
1635: PUSH
1636: LD_INT 104
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1653: LD_ADDR_EXP 43
1657: PUSH
1658: EMPTY
1659: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1660: LD_ADDR_EXP 37
1664: PUSH
1665: LD_INT 32
1667: PUSH
1668: LD_INT 24
1670: PUSH
1671: LD_INT 2
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 87
1681: PUSH
1682: LD_INT 18
1684: PUSH
1685: LD_INT 3
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_INT 146
1695: PUSH
1696: LD_INT 28
1698: PUSH
1699: LD_INT 3
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 188
1709: PUSH
1710: LD_INT 103
1712: PUSH
1713: LD_INT 4
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 224
1723: PUSH
1724: LD_INT 180
1726: PUSH
1727: LD_INT 5
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 168
1737: PUSH
1738: LD_INT 180
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 105
1751: PUSH
1752: LD_INT 170
1754: PUSH
1755: LD_INT 0
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 71
1765: PUSH
1766: LD_INT 102
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: ST_TO_ADDR
// for i in depot_def do
1787: LD_ADDR_VAR 0 2
1791: PUSH
1792: LD_EXP 37
1796: PUSH
1797: FOR_IN
1798: IFFALSE 1874
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1800: LD_ADDR_EXP 39
1804: PUSH
1805: LD_EXP 39
1809: PUSH
1810: LD_VAR 0 2
1814: PUSH
1815: LD_INT 1
1817: ARRAY
1818: PPUSH
1819: LD_VAR 0 2
1823: PUSH
1824: LD_INT 3
1826: ARRAY
1827: PPUSH
1828: LD_INT 4
1830: NEG
1831: PPUSH
1832: CALL_OW 272
1836: PUSH
1837: LD_VAR 0 2
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: LD_VAR 0 2
1850: PUSH
1851: LD_INT 3
1853: ARRAY
1854: PPUSH
1855: LD_INT 4
1857: NEG
1858: PPUSH
1859: CALL_OW 273
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: ADD
1871: ST_TO_ADDR
1872: GO 1797
1874: POP
1875: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
1876: LD_ADDR_EXP 38
1880: PUSH
1881: LD_INT 50
1883: PUSH
1884: LD_INT 40
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_INT 47
1897: PUSH
1898: LD_INT 17
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 29
1911: PUSH
1912: LD_INT 39
1914: PUSH
1915: LD_INT 0
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 107
1930: PUSH
1931: LD_INT 27
1933: PUSH
1934: LD_INT 4
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 67
1944: PUSH
1945: LD_INT 10
1947: PUSH
1948: LD_INT 1
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 91
1958: PUSH
1959: LD_INT 35
1961: PUSH
1962: LD_INT 0
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 165
1977: PUSH
1978: LD_INT 44
1980: PUSH
1981: LD_INT 5
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 123
1991: PUSH
1992: LD_INT 16
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 141
2005: PUSH
2006: LD_INT 39
2008: PUSH
2009: LD_INT 0
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 179
2024: PUSH
2025: LD_INT 85
2027: PUSH
2028: LD_INT 3
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 172
2038: PUSH
2039: LD_INT 102
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 196
2052: PUSH
2053: LD_INT 118
2055: PUSH
2056: LD_INT 5
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 210
2071: PUSH
2072: LD_INT 182
2074: PUSH
2075: LD_INT 1
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 226
2085: PUSH
2086: LD_INT 164
2088: PUSH
2089: LD_INT 3
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 209
2099: PUSH
2100: LD_INT 164
2102: PUSH
2103: LD_INT 2
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 156
2118: PUSH
2119: LD_INT 183
2121: PUSH
2122: LD_INT 1
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 184
2132: PUSH
2133: LD_INT 184
2135: PUSH
2136: LD_INT 4
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 161
2146: PUSH
2147: LD_INT 166
2149: PUSH
2150: LD_INT 3
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 86
2165: PUSH
2166: LD_INT 156
2168: PUSH
2169: LD_INT 2
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 124
2179: PUSH
2180: LD_INT 180
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 106
2193: PUSH
2194: LD_INT 155
2196: PUSH
2197: LD_INT 3
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 87
2212: PUSH
2213: LD_INT 102
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 63
2226: PUSH
2227: LD_INT 83
2229: PUSH
2230: LD_INT 3
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 79
2240: PUSH
2241: LD_INT 120
2243: PUSH
2244: LD_INT 0
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: ST_TO_ADDR
// for i = 1 to Side_Positions do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_EXP 34
2281: PUSH
2282: FOR_TO
2283: IFFALSE 2413
// begin if not Side_Positions [ i ] then
2285: LD_EXP 34
2289: PUSH
2290: LD_VAR 0 2
2294: ARRAY
2295: NOT
2296: IFFALSE 2300
// continue ;
2298: GO 2282
// if def_extra_oil_deposits then
2300: LD_EXP 6
2304: IFFALSE 2362
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_EXP 41
2315: PUSH
2316: LD_EXP 34
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: ARRAY
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2358
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2331: LD_VAR 0 3
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_VAR 0 3
2344: PUSH
2345: LD_INT 2
2347: ARRAY
2348: PPUSH
2349: LD_INT 2
2351: PPUSH
2352: CALL_OW 62
2356: GO 2328
2358: POP
2359: POP
2360: GO 2411
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2362: LD_EXP 40
2366: PUSH
2367: LD_EXP 34
2371: PUSH
2372: LD_VAR 0 2
2376: ARRAY
2377: ARRAY
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PPUSH
2383: LD_EXP 40
2387: PUSH
2388: LD_EXP 34
2392: PUSH
2393: LD_VAR 0 2
2397: ARRAY
2398: ARRAY
2399: PUSH
2400: LD_INT 2
2402: ARRAY
2403: PPUSH
2404: LD_INT 2
2406: PPUSH
2407: CALL_OW 62
// end ;
2411: GO 2282
2413: POP
2414: POP
// if def_extra_sib_deposits then
2415: LD_EXP 7
2419: IFFALSE 2573
// for i = 1 to Side_Positions do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_EXP 34
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2571
// begin if not Side_Positions [ i ] then
2439: LD_EXP 34
2443: PUSH
2444: LD_VAR 0 2
2448: ARRAY
2449: NOT
2450: IFFALSE 2454
// continue ;
2452: GO 2436
// if def_extra_sib_deposits = 2 then
2454: LD_EXP 7
2458: PUSH
2459: LD_INT 2
2461: EQUAL
2462: IFFALSE 2520
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2464: LD_ADDR_VAR 0 3
2468: PUSH
2469: LD_EXP 43
2473: PUSH
2474: LD_EXP 34
2478: PUSH
2479: LD_VAR 0 2
2483: ARRAY
2484: ARRAY
2485: PUSH
2486: FOR_IN
2487: IFFALSE 2516
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2489: LD_VAR 0 3
2493: PUSH
2494: LD_INT 1
2496: ARRAY
2497: PPUSH
2498: LD_VAR 0 3
2502: PUSH
2503: LD_INT 2
2505: ARRAY
2506: PPUSH
2507: LD_INT 3
2509: PPUSH
2510: CALL_OW 62
2514: GO 2486
2516: POP
2517: POP
2518: GO 2569
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2520: LD_EXP 42
2524: PUSH
2525: LD_EXP 34
2529: PUSH
2530: LD_VAR 0 2
2534: ARRAY
2535: ARRAY
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: LD_EXP 42
2545: PUSH
2546: LD_EXP 34
2550: PUSH
2551: LD_VAR 0 2
2555: ARRAY
2556: ARRAY
2557: PUSH
2558: LD_INT 2
2560: ARRAY
2561: PPUSH
2562: LD_INT 3
2564: PPUSH
2565: CALL_OW 62
// end ;
2569: GO 2436
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
2582: PPUSH
// if not Team_Game then
2583: LD_EXP 36
2587: NOT
2588: IFFALSE 2686
// begin for i = 1 to 8 do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_INT 8
2602: PUSH
2603: FOR_TO
2604: IFFALSE 2682
// for j = 1 to 8 do
2606: LD_ADDR_VAR 0 3
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 8
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2678
// if i <> j then
2622: LD_VAR 0 2
2626: PUSH
2627: LD_VAR 0 3
2631: NONEQUAL
2632: IFFALSE 2656
// SetAttitude ( i , j , att_neutral , true ) else
2634: LD_VAR 0 2
2638: PPUSH
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 0
2646: PPUSH
2647: LD_INT 1
2649: PPUSH
2650: CALL_OW 80
2654: GO 2676
// SetAttitude ( i , j , att_friend , true ) ;
2656: LD_VAR 0 2
2660: PPUSH
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 1
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 80
2676: GO 2619
2678: POP
2679: POP
2680: GO 2603
2682: POP
2683: POP
// end else
2684: GO 2861
// begin if def_shared_vision then
2686: LD_EXP 8
2690: IFFALSE 2755
// begin for i in Teams do
2692: LD_ADDR_VAR 0 2
2696: PUSH
2697: LD_EXP 32
2701: PUSH
2702: FOR_IN
2703: IFFALSE 2753
// for j = 2 to i do
2705: LD_ADDR_VAR 0 3
2709: PUSH
2710: DOUBLE
2711: LD_INT 2
2713: DEC
2714: ST_TO_ADDR
2715: LD_VAR 0 2
2719: PUSH
2720: FOR_TO
2721: IFFALSE 2749
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2723: LD_VAR 0 2
2727: PUSH
2728: LD_VAR 0 3
2732: ARRAY
2733: PPUSH
2734: LD_VAR 0 2
2738: PUSH
2739: LD_INT 1
2741: ARRAY
2742: PPUSH
2743: CALL_OW 343
2747: GO 2720
2749: POP
2750: POP
2751: GO 2702
2753: POP
2754: POP
// end ; for i = 1 to 8 do
2755: LD_ADDR_VAR 0 2
2759: PUSH
2760: DOUBLE
2761: LD_INT 1
2763: DEC
2764: ST_TO_ADDR
2765: LD_INT 8
2767: PUSH
2768: FOR_TO
2769: IFFALSE 2859
// for j = 1 to 8 do
2771: LD_ADDR_VAR 0 3
2775: PUSH
2776: DOUBLE
2777: LD_INT 1
2779: DEC
2780: ST_TO_ADDR
2781: LD_INT 8
2783: PUSH
2784: FOR_TO
2785: IFFALSE 2855
// if Side_Teams [ i ] = Side_Teams [ j ] then
2787: LD_EXP 31
2791: PUSH
2792: LD_VAR 0 2
2796: ARRAY
2797: PUSH
2798: LD_EXP 31
2802: PUSH
2803: LD_VAR 0 3
2807: ARRAY
2808: EQUAL
2809: IFFALSE 2833
// SetAttitude ( i , j , att_friend , true ) else
2811: LD_VAR 0 2
2815: PPUSH
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_INT 1
2823: PPUSH
2824: LD_INT 1
2826: PPUSH
2827: CALL_OW 80
2831: GO 2853
// SetAttitude ( i , j , att_enemy , true ) ;
2833: LD_VAR 0 2
2837: PPUSH
2838: LD_VAR 0 3
2842: PPUSH
2843: LD_INT 2
2845: PPUSH
2846: LD_INT 1
2848: PPUSH
2849: CALL_OW 80
2853: GO 2784
2855: POP
2856: POP
2857: GO 2768
2859: POP
2860: POP
// end ; end ;
2861: LD_VAR 0 1
2865: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2866: LD_INT 0
2868: PPUSH
2869: PPUSH
2870: PPUSH
2871: PPUSH
// result := [ ] ;
2872: LD_ADDR_VAR 0 7
2876: PUSH
2877: EMPTY
2878: ST_TO_ADDR
// for i := 1 to count do
2879: LD_ADDR_VAR 0 8
2883: PUSH
2884: DOUBLE
2885: LD_INT 1
2887: DEC
2888: ST_TO_ADDR
2889: LD_VAR 0 1
2893: PUSH
2894: FOR_TO
2895: IFFALSE 3313
// begin uc_direction := Rand ( 0 , 5 ) ;
2897: LD_ADDR_OWVAR 24
2901: PUSH
2902: LD_INT 0
2904: PPUSH
2905: LD_INT 5
2907: PPUSH
2908: CALL_OW 12
2912: ST_TO_ADDR
// if commander then
2913: LD_LOC 1
2917: IFFALSE 3026
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2919: LD_ADDR_OWVAR 26
2923: PUSH
2924: LD_OWVAR 19
2928: PUSH
2929: LD_OWVAR 20
2933: ARRAY
2934: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 2
2940: PPUSH
2941: CALL_OW 12
2945: PPUSH
2946: LD_VAR 0 2
2950: PPUSH
2951: LD_EXP 20
2955: PUSH
2956: LD_INT 2
2958: PLUS
2959: PPUSH
2960: CALL_OW 380
// hc_importance := 105 ;
2964: LD_ADDR_OWVAR 32
2968: PUSH
2969: LD_INT 105
2971: ST_TO_ADDR
// commander := false ;
2972: LD_ADDR_LOC 1
2976: PUSH
2977: LD_INT 0
2979: ST_TO_ADDR
// if Multiplayer then
2980: LD_OWVAR 4
2984: IFFALSE 3024
// begin hc_gallery := MULTIAVATARS ;
2986: LD_ADDR_OWVAR 33
2990: PUSH
2991: LD_STRING MULTIAVATARS
2993: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2994: LD_ADDR_OWVAR 34
2998: PUSH
2999: LD_OWVAR 20
3003: PPUSH
3004: CALL_OW 525
3008: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3009: LD_ADDR_OWVAR 27
3013: PUSH
3014: LD_OWVAR 20
3018: PPUSH
3019: CALL_OW 526
3023: ST_TO_ADDR
// end ; end else
3024: GO 3089
// begin hc_name :=  ;
3026: LD_ADDR_OWVAR 26
3030: PUSH
3031: LD_STRING 
3033: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3034: LD_INT 1
3036: PPUSH
3037: LD_INT 2
3039: PPUSH
3040: CALL_OW 12
3044: PPUSH
3045: LD_VAR 0 2
3049: PPUSH
3050: LD_EXP 20
3054: PPUSH
3055: CALL_OW 380
// hc_importance := 0 ;
3059: LD_ADDR_OWVAR 32
3063: PUSH
3064: LD_INT 0
3066: ST_TO_ADDR
// if Multiplayer then
3067: LD_OWVAR 4
3071: IFFALSE 3089
// begin hc_gallery :=  ;
3073: LD_ADDR_OWVAR 33
3077: PUSH
3078: LD_STRING 
3080: ST_TO_ADDR
// hc_face_number := 0 ;
3081: LD_ADDR_OWVAR 34
3085: PUSH
3086: LD_INT 0
3088: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3089: LD_ADDR_VAR 0 10
3093: PUSH
3094: CALL_OW 44
3098: ST_TO_ADDR
// if global_defined then
3099: LD_LOC 3
3103: IFFALSE 3243
// begin if ( cl = class_soldier ) then
3105: LD_VAR 0 2
3109: PUSH
3110: LD_INT 1
3112: EQUAL
3113: IFFALSE 3133
// j := i + soldiers_created else
3115: LD_ADDR_VAR 0 9
3119: PUSH
3120: LD_VAR 0 8
3124: PUSH
3125: LD_LOC 4
3129: PLUS
3130: ST_TO_ADDR
3131: GO 3143
// j := i ;
3133: LD_ADDR_VAR 0 9
3137: PUSH
3138: LD_VAR 0 8
3142: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3143: LD_LOC 2
3147: PUSH
3148: LD_VAR 0 2
3152: ARRAY
3153: PUSH
3154: LD_VAR 0 9
3158: ARRAY
3159: PPUSH
3160: LD_VAR 0 10
3164: PPUSH
3165: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3169: LD_VAR 0 10
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_LOC 2
3181: PUSH
3182: LD_VAR 0 2
3186: ARRAY
3187: PUSH
3188: LD_VAR 0 9
3192: ARRAY
3193: PPUSH
3194: LD_INT 2
3196: PPUSH
3197: CALL_OW 260
3201: PPUSH
3202: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3206: LD_VAR 0 10
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: LD_LOC 2
3218: PUSH
3219: LD_VAR 0 2
3223: ARRAY
3224: PUSH
3225: LD_VAR 0 9
3229: ARRAY
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL_OW 260
3238: PPUSH
3239: CALL_OW 239
// end ; if building then
3243: LD_VAR 0 6
3247: IFFALSE 3265
// PlaceHumanInUnit ( un , building ) else
3249: LD_VAR 0 10
3253: PPUSH
3254: LD_VAR 0 6
3258: PPUSH
3259: CALL_OW 52
3263: GO 3292
// PlaceUnitXYR ( un , x , y , r , false ) ;
3265: LD_VAR 0 10
3269: PPUSH
3270: LD_VAR 0 3
3274: PPUSH
3275: LD_VAR 0 4
3279: PPUSH
3280: LD_VAR 0 5
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 50
// result := result ^ [ un ] ;
3292: LD_ADDR_VAR 0 7
3296: PUSH
3297: LD_VAR 0 7
3301: PUSH
3302: LD_VAR 0 10
3306: PUSH
3307: EMPTY
3308: LIST
3309: ADD
3310: ST_TO_ADDR
// end ;
3311: GO 2894
3313: POP
3314: POP
// if not global_defined then
3315: LD_LOC 3
3319: NOT
3320: IFFALSE 3398
// if ( global_units >= cl ) then
3322: LD_LOC 2
3326: PUSH
3327: LD_VAR 0 2
3331: GREATEREQUAL
3332: IFFALSE 3373
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3334: LD_ADDR_LOC 2
3338: PUSH
3339: LD_LOC 2
3343: PPUSH
3344: LD_VAR 0 2
3348: PPUSH
3349: LD_LOC 2
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PUSH
3360: LD_VAR 0 7
3364: ADD
3365: PPUSH
3366: CALL_OW 1
3370: ST_TO_ADDR
3371: GO 3398
// global_units := Replace ( global_units , cl , result ) ;
3373: LD_ADDR_LOC 2
3377: PUSH
3378: LD_LOC 2
3382: PPUSH
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_VAR 0 7
3392: PPUSH
3393: CALL_OW 1
3397: ST_TO_ADDR
// if commander then
3398: LD_LOC 1
3402: IFFALSE 3449
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3404: LD_ADDR_EXP 45
3408: PUSH
3409: LD_EXP 45
3413: PPUSH
3414: LD_OWVAR 20
3418: PPUSH
3419: LD_EXP 45
3423: PUSH
3424: LD_OWVAR 20
3428: ARRAY
3429: PUSH
3430: LD_VAR 0 10
3434: ADD
3435: PPUSH
3436: CALL_OW 1
3440: ST_TO_ADDR
// commander := false ;
3441: LD_ADDR_LOC 1
3445: PUSH
3446: LD_INT 0
3448: ST_TO_ADDR
// end ; end ;
3449: LD_VAR 0 7
3453: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
// if side in [ 0 , 9 ] then
3465: LD_VAR 0 1
3469: PUSH
3470: LD_INT 0
3472: PUSH
3473: LD_INT 9
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: IN
3480: IFFALSE 3484
// exit ;
3482: GO 4534
// pos := Side_Positions [ side ] ;
3484: LD_ADDR_VAR 0 3
3488: PUSH
3489: LD_EXP 34
3493: PUSH
3494: LD_VAR 0 1
3498: ARRAY
3499: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3500: LD_ADDR_OWVAR 21
3504: PUSH
3505: LD_EXP 35
3509: PUSH
3510: LD_VAR 0 1
3514: ARRAY
3515: ST_TO_ADDR
// uc_side := side ;
3516: LD_ADDR_OWVAR 20
3520: PUSH
3521: LD_VAR 0 1
3525: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3526: LD_ADDR_VAR 0 4
3530: PUSH
3531: LD_EXP 37
3535: PUSH
3536: LD_VAR 0 3
3540: ARRAY
3541: PUSH
3542: LD_INT 1
3544: ARRAY
3545: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3546: LD_ADDR_VAR 0 5
3550: PUSH
3551: LD_EXP 37
3555: PUSH
3556: LD_VAR 0 3
3560: ARRAY
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3566: LD_ADDR_VAR 0 6
3570: PUSH
3571: LD_EXP 37
3575: PUSH
3576: LD_VAR 0 3
3580: ARRAY
3581: PUSH
3582: LD_INT 3
3584: ARRAY
3585: ST_TO_ADDR
// if is_depot then
3586: LD_EXP 17
3590: IFFALSE 3723
// begin bc_type = b_depot ;
3592: LD_ADDR_OWVAR 42
3596: PUSH
3597: LD_INT 0
3599: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3600: LD_ADDR_VAR 0 10
3604: PUSH
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_VAR 0 5
3614: PPUSH
3615: LD_VAR 0 6
3619: PPUSH
3620: CALL_OW 47
3624: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3625: LD_VAR 0 10
3629: PPUSH
3630: LD_STRING @
3632: PUSH
3633: LD_VAR 0 1
3637: STR
3638: PPUSH
3639: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3643: LD_VAR 0 10
3647: PPUSH
3648: CALL_OW 274
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_EXP 22
3660: PUSH
3661: LD_INT 1
3663: ARRAY
3664: PPUSH
3665: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3669: LD_VAR 0 10
3673: PPUSH
3674: CALL_OW 274
3678: PPUSH
3679: LD_INT 2
3681: PPUSH
3682: LD_EXP 22
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3695: LD_VAR 0 10
3699: PPUSH
3700: CALL_OW 274
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_EXP 22
3712: PUSH
3713: LD_INT 3
3715: ARRAY
3716: PPUSH
3717: CALL_OW 277
// end else
3721: GO 3867
// begin for i := 1 to 3 do
3723: LD_ADDR_VAR 0 7
3727: PUSH
3728: DOUBLE
3729: LD_INT 1
3731: DEC
3732: ST_TO_ADDR
3733: LD_INT 3
3735: PUSH
3736: FOR_TO
3737: IFFALSE 3865
// begin r := starting_resources [ i ] ;
3739: LD_ADDR_VAR 0 8
3743: PUSH
3744: LD_EXP 22
3748: PUSH
3749: LD_VAR 0 7
3753: ARRAY
3754: ST_TO_ADDR
// while r >= 10 do
3755: LD_VAR 0 8
3759: PUSH
3760: LD_INT 10
3762: GREATEREQUAL
3763: IFFALSE 3863
// if r > 50 then
3765: LD_VAR 0 8
3769: PUSH
3770: LD_INT 50
3772: GREATER
3773: IFFALSE 3819
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3775: LD_VAR 0 7
3779: PPUSH
3780: LD_INT 5
3782: PPUSH
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_VAR 0 5
3792: PPUSH
3793: LD_INT 4
3795: PPUSH
3796: LD_INT 0
3798: PPUSH
3799: CALL_OW 60
// r := r - 50 ;
3803: LD_ADDR_VAR 0 8
3807: PUSH
3808: LD_VAR 0 8
3812: PUSH
3813: LD_INT 50
3815: MINUS
3816: ST_TO_ADDR
// end else
3817: GO 3861
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3819: LD_VAR 0 7
3823: PPUSH
3824: LD_VAR 0 8
3828: PUSH
3829: LD_INT 10
3831: DIV
3832: PPUSH
3833: LD_VAR 0 4
3837: PPUSH
3838: LD_VAR 0 5
3842: PPUSH
3843: LD_INT 4
3845: PPUSH
3846: LD_INT 0
3848: PPUSH
3849: CALL_OW 60
// r := 0 ;
3853: LD_ADDR_VAR 0 8
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// end ;
3861: GO 3755
// end ;
3863: GO 3736
3865: POP
3866: POP
// end ; for r in starting_crates do
3867: LD_ADDR_VAR 0 8
3871: PUSH
3872: LD_EXP 21
3876: PUSH
3877: FOR_IN
3878: IFFALSE 3910
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3880: LD_INT 1
3882: PPUSH
3883: LD_INT 5
3885: PPUSH
3886: LD_VAR 0 4
3890: PPUSH
3891: LD_VAR 0 5
3895: PPUSH
3896: LD_VAR 0 8
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL_OW 60
3908: GO 3877
3910: POP
3911: POP
// if def_morale_flags then
3912: LD_EXP 9
3916: IFFALSE 4055
// begin x := start_def [ pos ] [ 1 ] ;
3918: LD_ADDR_VAR 0 4
3922: PUSH
3923: LD_EXP 39
3927: PUSH
3928: LD_VAR 0 3
3932: ARRAY
3933: PUSH
3934: LD_INT 1
3936: ARRAY
3937: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3938: LD_ADDR_VAR 0 5
3942: PUSH
3943: LD_EXP 39
3947: PUSH
3948: LD_VAR 0 3
3952: ARRAY
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3958: LD_VAR 0 4
3962: PPUSH
3963: LD_VAR 0 5
3967: PPUSH
3968: LD_INT 12
3970: PPUSH
3971: LD_INT 2
3973: PPUSH
3974: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3978: LD_ADDR_EXP 44
3982: PUSH
3983: LD_EXP 44
3987: PUSH
3988: LD_VAR 0 1
3992: PPUSH
3993: LD_VAR 0 4
3997: PPUSH
3998: LD_VAR 0 5
4002: PPUSH
4003: LD_INT 1
4005: PUSH
4006: LD_INT 100
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 50
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 3
4025: PUSH
4026: LD_INT 20
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: LD_INT 20
4035: PUSH
4036: LD_INT 100
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: PPUSH
4049: CALL_OW 418
4053: ADD
4054: ST_TO_ADDR
// end ; commander := true ;
4055: LD_ADDR_LOC 1
4059: PUSH
4060: LD_INT 1
4062: ST_TO_ADDR
// soldiers_created := 0 ;
4063: LD_ADDR_LOC 4
4067: PUSH
4068: LD_INT 0
4070: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4071: LD_ADDR_VAR 0 7
4075: PUSH
4076: DOUBLE
4077: LD_INT 1
4079: DEC
4080: ST_TO_ADDR
4081: LD_EXP 18
4085: PUSH
4086: FOR_TO
4087: IFFALSE 4240
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4089: LD_ADDR_VAR 0 4
4093: PUSH
4094: LD_EXP 38
4098: PUSH
4099: LD_VAR 0 3
4103: ARRAY
4104: PUSH
4105: LD_VAR 0 7
4109: ARRAY
4110: PUSH
4111: LD_INT 1
4113: ARRAY
4114: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4115: LD_ADDR_VAR 0 5
4119: PUSH
4120: LD_EXP 38
4124: PUSH
4125: LD_VAR 0 3
4129: ARRAY
4130: PUSH
4131: LD_VAR 0 7
4135: ARRAY
4136: PUSH
4137: LD_INT 2
4139: ARRAY
4140: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4141: LD_ADDR_VAR 0 6
4145: PUSH
4146: LD_EXP 38
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_VAR 0 7
4161: ARRAY
4162: PUSH
4163: LD_INT 3
4165: ARRAY
4166: ST_TO_ADDR
// bc_type := b_breastwork ;
4167: LD_ADDR_OWVAR 42
4171: PUSH
4172: LD_INT 31
4174: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4175: LD_ADDR_VAR 0 9
4179: PUSH
4180: LD_VAR 0 4
4184: PPUSH
4185: LD_VAR 0 5
4189: PPUSH
4190: LD_VAR 0 6
4194: PPUSH
4195: CALL_OW 47
4199: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4200: LD_INT 1
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: LD_INT 0
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: LD_VAR 0 9
4219: PPUSH
4220: CALL 2866 0 6
// soldiers_created := soldiers_created + 1 ;
4224: LD_ADDR_LOC 4
4228: PUSH
4229: LD_LOC 4
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: ST_TO_ADDR
// end ;
4238: GO 4086
4240: POP
4241: POP
// x := start_def [ pos ] [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_EXP 39
4251: PUSH
4252: LD_VAR 0 3
4256: ARRAY
4257: PUSH
4258: LD_INT 1
4260: ARRAY
4261: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4262: LD_ADDR_VAR 0 5
4266: PUSH
4267: LD_EXP 39
4271: PUSH
4272: LD_VAR 0 3
4276: ARRAY
4277: PUSH
4278: LD_INT 2
4280: ARRAY
4281: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4282: LD_LOC 8
4286: PUSH
4287: LD_EXP 18
4291: MINUS
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 4
4300: PPUSH
4301: LD_VAR 0 5
4305: PPUSH
4306: LD_INT 5
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL 2866 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4316: LD_LOC 5
4320: PPUSH
4321: LD_INT 2
4323: PPUSH
4324: LD_VAR 0 4
4328: PPUSH
4329: LD_VAR 0 5
4333: PPUSH
4334: LD_INT 5
4336: PPUSH
4337: LD_INT 0
4339: PPUSH
4340: CALL 2866 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4344: LD_LOC 7
4348: PPUSH
4349: LD_INT 3
4351: PPUSH
4352: LD_VAR 0 4
4356: PPUSH
4357: LD_VAR 0 5
4361: PPUSH
4362: LD_INT 5
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL 2866 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4372: LD_LOC 6
4376: PPUSH
4377: LD_INT 4
4379: PPUSH
4380: LD_VAR 0 4
4384: PPUSH
4385: LD_VAR 0 5
4389: PPUSH
4390: LD_INT 5
4392: PPUSH
4393: LD_INT 0
4395: PPUSH
4396: CALL 2866 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4400: LD_EXP 10
4404: PUSH
4405: LD_INT 20
4407: PPUSH
4408: LD_VAR 0 1
4412: PPUSH
4413: CALL_OW 321
4417: PUSH
4418: LD_INT 1
4420: EQUAL
4421: AND
4422: IFFALSE 4439
// SetTech ( tech_SibDet , side , state_researched ) ;
4424: LD_INT 20
4426: PPUSH
4427: LD_VAR 0 1
4431: PPUSH
4432: LD_INT 2
4434: PPUSH
4435: CALL_OW 322
// if def_siberite_bomb = 1 then
4439: LD_EXP 13
4443: PUSH
4444: LD_INT 1
4446: EQUAL
4447: IFFALSE 4481
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4449: LD_INT 25
4451: PPUSH
4452: LD_VAR 0 1
4456: PPUSH
4457: LD_INT 1
4459: PPUSH
4460: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4464: LD_INT 73
4466: PPUSH
4467: LD_VAR 0 1
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL_OW 322
// end else
4479: GO 4511
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4481: LD_INT 25
4483: PPUSH
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4496: LD_INT 73
4498: PPUSH
4499: LD_VAR 0 1
4503: PPUSH
4504: LD_INT 0
4506: PPUSH
4507: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4511: LD_INT 24
4513: PPUSH
4514: LD_VAR 0 1
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: CALL_OW 322
// global_defined := true ;
4526: LD_ADDR_LOC 3
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// end ;
4534: LD_VAR 0 2
4538: RET
// function prepare_sides ; var i ; begin
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
// global_units := [ ] ;
4543: LD_ADDR_LOC 2
4547: PUSH
4548: EMPTY
4549: ST_TO_ADDR
// global_defined := false ;
4550: LD_ADDR_LOC 3
4554: PUSH
4555: LD_INT 0
4557: ST_TO_ADDR
// CountClassMembers ;
4558: CALL 4608 0 0
// for i := 1 to 8 do
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: DOUBLE
4568: LD_INT 1
4570: DEC
4571: ST_TO_ADDR
4572: LD_INT 8
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4601
// if Side_Positions [ i ] then
4578: LD_EXP 34
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: IFFALSE 4599
// prepare_side ( i ) ;
4590: LD_VAR 0 2
4594: PPUSH
4595: CALL 3454 0 1
4599: GO 4575
4601: POP
4602: POP
// end ;
4603: LD_VAR 0 1
4607: RET
// function CountClassMembers ; var Mode ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
// if No_Mechs then
4612: LD_EXP 15
4616: IFFALSE 4628
// Mode := 2 else
4618: LD_ADDR_VAR 0 2
4622: PUSH
4623: LD_INT 2
4625: ST_TO_ADDR
4626: GO 4636
// Mode := 1 ;
4628: LD_ADDR_VAR 0 2
4632: PUSH
4633: LD_INT 1
4635: ST_TO_ADDR
// neng := number_of_people ;
4636: LD_ADDR_LOC 5
4640: PUSH
4641: LD_EXP 19
4645: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4646: LD_ADDR_LOC 8
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 4
4658: PUSH
4659: LD_INT 3
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4673: LD_LOC 8
4677: PUSH
4678: LD_EXP 18
4682: LESS
4683: IFFALSE 4695
// nsol := number_of_breastworks ;
4685: LD_ADDR_LOC 8
4689: PUSH
4690: LD_EXP 18
4694: ST_TO_ADDR
// neng := neng - nsol ;
4695: LD_ADDR_LOC 5
4699: PUSH
4700: LD_LOC 5
4704: PUSH
4705: LD_LOC 8
4709: MINUS
4710: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4711: LD_ADDR_LOC 6
4715: PUSH
4716: LD_LOC 5
4720: PUSH
4721: LD_INT 3
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_VAR 0 2
4735: ARRAY
4736: DIV
4737: ST_TO_ADDR
// if ( nsci < 1 ) then
4738: LD_LOC 6
4742: PUSH
4743: LD_INT 1
4745: LESS
4746: IFFALSE 4756
// nsci := 1 ;
4748: LD_ADDR_LOC 6
4752: PUSH
4753: LD_INT 1
4755: ST_TO_ADDR
// neng := neng - nsci ;
4756: LD_ADDR_LOC 5
4760: PUSH
4761: LD_LOC 5
4765: PUSH
4766: LD_LOC 6
4770: MINUS
4771: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4772: LD_ADDR_LOC 7
4776: PUSH
4777: LD_LOC 5
4781: PUSH
4782: LD_INT 2
4784: DIV
4785: PUSH
4786: LD_INT 0
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_VAR 0 2
4797: ARRAY
4798: ST_TO_ADDR
// neng := neng - nmech ;
4799: LD_ADDR_LOC 5
4803: PUSH
4804: LD_LOC 5
4808: PUSH
4809: LD_LOC 7
4813: MINUS
4814: ST_TO_ADDR
// if ( neng < 1 ) then
4815: LD_LOC 5
4819: PUSH
4820: LD_INT 1
4822: LESS
4823: IFFALSE 4833
// neng := 1 ;
4825: LD_ADDR_LOC 5
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// end ;
4833: LD_VAR 0 1
4837: RET
// starting begin disable ( 98 ) ;
4838: LD_INT 98
4840: DISABLE_MARKED
// disable ( 99 ) ;
4841: LD_INT 99
4843: DISABLE_MARKED
// disable ( 400 ) ;
4844: LD_INT 400
4846: DISABLE_MARKED
// disable ( 401 ) ;
4847: LD_INT 401
4849: DISABLE_MARKED
// mp_selectmsg := true ;
4850: LD_ADDR_OWVAR 13
4854: PUSH
4855: LD_INT 1
4857: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4858: CALL 68 0 0
// init_map ;
4862: CALL 1251 0 0
// init_respawning ;
4866: CALL 5610 0 0
// set_shared_visions_and_alliances ;
4870: CALL 2578 0 0
// ResetFog ;
4874: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4878: LD_OWVAR 2
4882: PPUSH
4883: CALL_OW 520
// AnimateTrees ( true ) ;
4887: LD_INT 1
4889: PPUSH
4890: CALL_OW 573
// prepare_sides ;
4894: CALL 4539 0 0
// Init_Win_Condition ;
4898: CALL 8844 0 0
// ShowTimer ;
4902: CALL 7824 0 0
// music_nat := Side_Nations [ your_side ] ;
4906: LD_ADDR_OWVAR 71
4910: PUSH
4911: LD_EXP 35
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ST_TO_ADDR
// if IAmSpec then
4922: CALL_OW 531
4926: IFFALSE 4950
// begin fogoff ( true ) ;
4928: LD_INT 1
4930: PPUSH
4931: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4935: LD_INT 130
4937: PPUSH
4938: LD_INT 100
4940: PPUSH
4941: CALL_OW 86
// enable ( 400 ) ;
4945: LD_INT 400
4947: ENABLE_MARKED
// end else
4948: GO 4996
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4950: LD_EXP 39
4954: PUSH
4955: LD_EXP 34
4959: PUSH
4960: LD_OWVAR 2
4964: ARRAY
4965: ARRAY
4966: PUSH
4967: LD_INT 1
4969: ARRAY
4970: PPUSH
4971: LD_EXP 39
4975: PUSH
4976: LD_EXP 34
4980: PUSH
4981: LD_OWVAR 2
4985: ARRAY
4986: ARRAY
4987: PUSH
4988: LD_INT 2
4990: ARRAY
4991: PPUSH
4992: CALL_OW 86
// end ; InitApeman ;
4996: CALL 6342 0 0
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
5000: LD_ADDR_EXP 55
5004: PUSH
5005: LD_INT 9
5007: PUSH
5008: LD_INT 10
5010: PUSH
5011: LD_INT 11
5013: PUSH
5014: LD_INT 12
5016: PUSH
5017: LD_INT 13
5019: PUSH
5020: LD_INT 14
5022: PUSH
5023: LD_INT 15
5025: PUSH
5026: LD_INT 16
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: ST_TO_ADDR
// BeginBuildUp ;
5039: CALL 8007 0 0
// end ;
5043: END
// every 0 0$1 do
5044: GO 5046
5046: DISABLE
// if ( def_siberite_bomb > 1 ) then
5047: LD_EXP 13
5051: PUSH
5052: LD_INT 1
5054: GREATER
5055: IFFALSE 5070
// begin wait ( siberite_bomb_Delay ) ;
5057: LD_EXP 29
5061: PPUSH
5062: CALL_OW 67
// EnableSibFiss ;
5066: CALL 5071 0 0
// end ;
5070: END
// function EnableSibFiss ; var i ; begin
5071: LD_INT 0
5073: PPUSH
5074: PPUSH
// for i := 1 to 8 do
5075: LD_ADDR_VAR 0 2
5079: PUSH
5080: DOUBLE
5081: LD_INT 1
5083: DEC
5084: ST_TO_ADDR
5085: LD_INT 8
5087: PUSH
5088: FOR_TO
5089: IFFALSE 5135
// if Side_Positions [ i ] then
5091: LD_EXP 34
5095: PUSH
5096: LD_VAR 0 2
5100: ARRAY
5101: IFFALSE 5133
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5103: LD_INT 25
5105: PPUSH
5106: LD_VAR 0 2
5110: PPUSH
5111: LD_INT 1
5113: PPUSH
5114: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5118: LD_INT 73
5120: PPUSH
5121: LD_VAR 0 2
5125: PPUSH
5126: LD_INT 1
5128: PPUSH
5129: CALL_OW 322
// end ;
5133: GO 5088
5135: POP
5136: POP
// end ; end_of_file
5137: LD_VAR 0 1
5141: RET
// every 1 1$0 + 0 0$0.3 do
5142: GO 5144
5144: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5145: LD_INT 4
5147: PPUSH
5148: LD_INT 5
5150: PPUSH
5151: CALL_OW 12
5155: PPUSH
5156: LD_INT 1
5158: PPUSH
5159: CALL_OW 57
// enable ;
5163: ENABLE
// end ;
5164: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5165: GO 5167
5167: DISABLE
5168: LD_INT 0
5170: PPUSH
5171: PPUSH
// begin case tick of 1 .. 1 1$0 :
5172: LD_OWVAR 1
5176: PUSH
5177: LD_INT 1
5179: DOUBLE
5180: GREATEREQUAL
5181: IFFALSE 5189
5183: LD_INT 2100
5185: DOUBLE
5186: LESSEQUAL
5187: IFTRUE 5191
5189: GO 5219
5191: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5192: LD_EXP 23
5196: PUSH
5197: LD_INT 100
5199: DIVREAL
5200: PUSH
5201: LD_INT 350
5203: PPUSH
5204: LD_INT 700
5206: PPUSH
5207: CALL_OW 12
5211: MUL
5212: PPUSH
5213: CALL_OW 67
5217: GO 5521
5219: LD_INT 2100
5221: PUSH
5222: LD_INT 1
5224: PLUS
5225: DOUBLE
5226: GREATEREQUAL
5227: IFFALSE 5235
5229: LD_INT 10500
5231: DOUBLE
5232: LESSEQUAL
5233: IFTRUE 5237
5235: GO 5265
5237: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5238: LD_EXP 23
5242: PUSH
5243: LD_INT 100
5245: DIVREAL
5246: PUSH
5247: LD_INT 700
5249: PPUSH
5250: LD_INT 1225
5252: PPUSH
5253: CALL_OW 12
5257: MUL
5258: PPUSH
5259: CALL_OW 67
5263: GO 5521
5265: LD_INT 10500
5267: PUSH
5268: LD_INT 1
5270: PLUS
5271: DOUBLE
5272: GREATEREQUAL
5273: IFFALSE 5281
5275: LD_INT 21000
5277: DOUBLE
5278: LESSEQUAL
5279: IFTRUE 5283
5281: GO 5311
5283: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$45 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5284: LD_EXP 23
5288: PUSH
5289: LD_INT 100
5291: DIVREAL
5292: PUSH
5293: LD_INT 1225
5295: PPUSH
5296: LD_INT 1575
5298: PPUSH
5299: CALL_OW 12
5303: MUL
5304: PPUSH
5305: CALL_OW 67
5309: GO 5521
5311: LD_INT 21000
5313: PUSH
5314: LD_INT 1
5316: PLUS
5317: DOUBLE
5318: GREATEREQUAL
5319: IFFALSE 5327
5321: LD_INT 42000
5323: DOUBLE
5324: LESSEQUAL
5325: IFTRUE 5329
5327: GO 5357
5329: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 0 0$55 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5330: LD_EXP 23
5334: PUSH
5335: LD_INT 100
5337: DIVREAL
5338: PUSH
5339: LD_INT 1575
5341: PPUSH
5342: LD_INT 1925
5344: PPUSH
5345: CALL_OW 12
5349: MUL
5350: PPUSH
5351: CALL_OW 67
5355: GO 5521
5357: LD_INT 42000
5359: PUSH
5360: LD_INT 1
5362: PLUS
5363: DOUBLE
5364: GREATEREQUAL
5365: IFFALSE 5373
5367: LD_INT 63000
5369: DOUBLE
5370: LESSEQUAL
5371: IFTRUE 5375
5373: GO 5403
5375: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$55 , 1 1$05 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5376: LD_EXP 23
5380: PUSH
5381: LD_INT 100
5383: DIVREAL
5384: PUSH
5385: LD_INT 1925
5387: PPUSH
5388: LD_INT 2275
5390: PPUSH
5391: CALL_OW 12
5395: MUL
5396: PPUSH
5397: CALL_OW 67
5401: GO 5521
5403: LD_INT 63000
5405: PUSH
5406: LD_INT 1
5408: PLUS
5409: DOUBLE
5410: GREATEREQUAL
5411: IFFALSE 5419
5413: LD_INT 105000
5415: DOUBLE
5416: LESSEQUAL
5417: IFTRUE 5421
5419: GO 5449
5421: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$15 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5422: LD_EXP 23
5426: PUSH
5427: LD_INT 100
5429: DIVREAL
5430: PUSH
5431: LD_INT 2275
5433: PPUSH
5434: LD_INT 2625
5436: PPUSH
5437: CALL_OW 12
5441: MUL
5442: PPUSH
5443: CALL_OW 67
5447: GO 5521
5449: LD_INT 105000
5451: PUSH
5452: LD_INT 1
5454: PLUS
5455: DOUBLE
5456: GREATEREQUAL
5457: IFFALSE 5465
5459: LD_INT 630000
5461: DOUBLE
5462: LESSEQUAL
5463: IFTRUE 5467
5465: GO 5495
5467: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; else
5468: LD_EXP 23
5472: PUSH
5473: LD_INT 100
5475: DIVREAL
5476: PUSH
5477: LD_INT 2625
5479: PPUSH
5480: LD_INT 3150
5482: PPUSH
5483: CALL_OW 12
5487: MUL
5488: PPUSH
5489: CALL_OW 67
5493: GO 5521
5495: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; end ;
5496: LD_EXP 23
5500: PUSH
5501: LD_INT 100
5503: DIVREAL
5504: PUSH
5505: LD_INT 3150
5507: PPUSH
5508: LD_INT 3675
5510: PPUSH
5511: CALL_OW 12
5515: MUL
5516: PPUSH
5517: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: LD_INT 3
5528: PPUSH
5529: LD_INT 5
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5537: LD_ADDR_VAR 0 1
5541: PUSH
5542: LD_EXP 34
5546: PUSH
5547: LD_INT 0
5549: PUSH
5550: EMPTY
5551: LIST
5552: DIFF
5553: PUSH
5554: FOR_IN
5555: IFFALSE 5604
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5557: LD_VAR 0 2
5561: PPUSH
5562: LD_EXP 39
5566: PUSH
5567: LD_VAR 0 1
5571: ARRAY
5572: PUSH
5573: LD_INT 1
5575: ARRAY
5576: PPUSH
5577: LD_EXP 39
5581: PUSH
5582: LD_VAR 0 1
5586: ARRAY
5587: PUSH
5588: LD_INT 2
5590: ARRAY
5591: PPUSH
5592: LD_INT 20
5594: PPUSH
5595: LD_INT 1
5597: PPUSH
5598: CALL_OW 56
5602: GO 5554
5604: POP
5605: POP
// enable ;
5606: ENABLE
// end ; end_of_file
5607: PPOPN 2
5609: END
// var respawn , inqueue ; export function init_respawning ; begin
5610: LD_INT 0
5612: PPUSH
// respawn := Rand ( 1 , 8 ) ;
5613: LD_ADDR_LOC 9
5617: PUSH
5618: LD_INT 1
5620: PPUSH
5621: LD_INT 8
5623: PPUSH
5624: CALL_OW 12
5628: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5629: LD_ADDR_LOC 10
5633: PUSH
5634: LD_INT 0
5636: PUSH
5637: LD_INT 0
5639: PUSH
5640: LD_INT 0
5642: PUSH
5643: LD_INT 0
5645: PUSH
5646: LD_INT 0
5648: PUSH
5649: LD_INT 0
5651: PUSH
5652: LD_INT 0
5654: PUSH
5655: LD_INT 0
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: ST_TO_ADDR
// end ;
5668: LD_VAR 0 1
5672: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5673: GO 5675
5675: DISABLE
5676: LD_INT 0
5678: PPUSH
5679: PPUSH
5680: PPUSH
5681: PPUSH
// begin if respawning_time_max = 0 then
5682: LD_EXP 28
5686: PUSH
5687: LD_INT 0
5689: EQUAL
5690: IFFALSE 5694
// exit ;
5692: GO 6148
// if respawn = 8 then
5694: LD_LOC 9
5698: PUSH
5699: LD_INT 8
5701: EQUAL
5702: IFFALSE 5714
// respawn := 1 else
5704: LD_ADDR_LOC 9
5708: PUSH
5709: LD_INT 1
5711: ST_TO_ADDR
5712: GO 5728
// respawn := respawn + 1 ;
5714: LD_ADDR_LOC 9
5718: PUSH
5719: LD_LOC 9
5723: PUSH
5724: LD_INT 1
5726: PLUS
5727: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5728: LD_EXP 34
5732: PUSH
5733: LD_LOC 9
5737: ARRAY
5738: PUSH
5739: LD_LOC 10
5743: PUSH
5744: LD_LOC 9
5748: ARRAY
5749: NOT
5750: AND
5751: IFFALSE 6147
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5753: LD_ADDR_VAR 0 1
5757: PUSH
5758: LD_INT 21
5760: PUSH
5761: LD_INT 1
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 22
5770: PUSH
5771: LD_LOC 9
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 3
5782: PUSH
5783: LD_INT 23
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: PPUSH
5799: CALL_OW 69
5803: ST_TO_ADDR
// if n < number_of_people then
5804: LD_VAR 0 1
5808: PUSH
5809: LD_EXP 19
5813: LESS
5814: IFFALSE 6144
// begin aktresp := respawn ;
5816: LD_ADDR_VAR 0 3
5820: PUSH
5821: LD_LOC 9
5825: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
5826: LD_ADDR_LOC 10
5830: PUSH
5831: LD_LOC 10
5835: PPUSH
5836: LD_VAR 0 3
5840: PPUSH
5841: LD_INT 1
5843: PPUSH
5844: CALL_OW 1
5848: ST_TO_ADDR
// enable ;
5849: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
5850: LD_EXP 27
5854: PPUSH
5855: LD_EXP 28
5859: PPUSH
5860: CALL_OW 12
5864: PPUSH
5865: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
5869: LD_ADDR_LOC 10
5873: PUSH
5874: LD_LOC 10
5878: PPUSH
5879: LD_VAR 0 3
5883: PPUSH
5884: LD_INT 0
5886: PPUSH
5887: CALL_OW 1
5891: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
5892: LD_ADDR_VAR 0 2
5896: PUSH
5897: LD_INT 21
5899: PUSH
5900: LD_INT 3
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 2
5909: PUSH
5910: LD_INT 30
5912: PUSH
5913: LD_INT 0
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PUSH
5920: LD_INT 30
5922: PUSH
5923: LD_INT 1
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 50
5937: PUSH
5938: EMPTY
5939: LIST
5940: PUSH
5941: LD_INT 22
5943: PUSH
5944: LD_VAR 0 3
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: LIST
5957: LIST
5958: PPUSH
5959: CALL_OW 69
5963: ST_TO_ADDR
// if building_list = 0 then
5964: LD_VAR 0 2
5968: PUSH
5969: LD_INT 0
5971: EQUAL
5972: IFFALSE 5976
// exit ;
5974: GO 6148
// hc_name :=  ;
5976: LD_ADDR_OWVAR 26
5980: PUSH
5981: LD_STRING 
5983: ST_TO_ADDR
// hc_importance := 0 ;
5984: LD_ADDR_OWVAR 32
5988: PUSH
5989: LD_INT 0
5991: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
5992: LD_INT 0
5994: PPUSH
5995: LD_INT 0
5997: PPUSH
5998: LD_EXP 20
6002: PUSH
6003: LD_INT 2
6005: DIV
6006: PPUSH
6007: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6011: LD_ADDR_OWVAR 21
6015: PUSH
6016: LD_EXP 35
6020: PUSH
6021: LD_VAR 0 3
6025: ARRAY
6026: ST_TO_ADDR
// uc_side := aktresp ;
6027: LD_ADDR_OWVAR 20
6031: PUSH
6032: LD_VAR 0 3
6036: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6037: LD_ADDR_VAR 0 4
6041: PUSH
6042: LD_VAR 0 2
6046: PUSH
6047: LD_INT 1
6049: PPUSH
6050: LD_VAR 0 2
6054: PUSH
6055: LD_INT 0
6057: PLUS
6058: PPUSH
6059: CALL_OW 12
6063: ARRAY
6064: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6065: LD_VAR 0 4
6069: PPUSH
6070: CALL_OW 266
6074: PUSH
6075: LD_INT 0
6077: PUSH
6078: LD_INT 1
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: IN
6085: IFFALSE 6097
// n = 25 else
6087: LD_ADDR_VAR 0 1
6091: PUSH
6092: LD_INT 25
6094: ST_TO_ADDR
6095: GO 6105
// n = 10 ;
6097: LD_ADDR_VAR 0 1
6101: PUSH
6102: LD_INT 10
6104: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6105: CALL_OW 44
6109: PPUSH
6110: LD_VAR 0 4
6114: PPUSH
6115: CALL_OW 250
6119: PPUSH
6120: LD_VAR 0 4
6124: PPUSH
6125: CALL_OW 251
6129: PPUSH
6130: LD_VAR 0 1
6134: PPUSH
6135: LD_INT 1
6137: PPUSH
6138: CALL_OW 50
// end else
6142: GO 6145
// enable ;
6144: ENABLE
// end else
6145: GO 6148
// enable ;
6147: ENABLE
// end ; end_of_file
6148: PPOPN 4
6150: END
// every 20 20$00 trigger apemanNumber do
6151: LD_EXP 46
6155: IFFALSE 6188
6157: GO 6159
6159: DISABLE
// begin enable ;
6160: ENABLE
// if apeLevel >= 8 then
6161: LD_EXP 51
6165: PUSH
6166: LD_INT 8
6168: GREATEREQUAL
6169: IFFALSE 6174
// disable else
6171: DISABLE
6172: GO 6188
// apeLevel := apeLevel + 1 ;
6174: LD_ADDR_EXP 51
6178: PUSH
6179: LD_EXP 51
6183: PUSH
6184: LD_INT 1
6186: PLUS
6187: ST_TO_ADDR
// end ;
6188: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6189: LD_EXP 46
6193: PUSH
6194: LD_EXP 47
6198: LESS
6199: IFFALSE 6339
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
// begin enable ;
6210: ENABLE
// for i := 1 to apemanPos do
6211: LD_ADDR_VAR 0 1
6215: PUSH
6216: DOUBLE
6217: LD_INT 1
6219: DEC
6220: ST_TO_ADDR
6221: LD_EXP 49
6225: PUSH
6226: FOR_TO
6227: IFFALSE 6337
// begin if apemanPlayerCount [ i ] then
6229: LD_EXP 50
6233: PUSH
6234: LD_VAR 0 1
6238: ARRAY
6239: IFFALSE 6335
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6241: LD_EXP 50
6245: PUSH
6246: LD_VAR 0 1
6250: ARRAY
6251: PUSH
6252: LD_EXP 49
6256: PUSH
6257: LD_VAR 0 1
6261: ARRAY
6262: GREATER
6263: IFFALSE 6335
// begin ape := PrepareApeman ;
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: CALL 6858 0 0
6274: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6275: LD_VAR 0 2
6279: PPUSH
6280: LD_EXP 52
6284: PUSH
6285: LD_VAR 0 1
6289: ARRAY
6290: PPUSH
6291: LD_INT 0
6293: PPUSH
6294: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6298: LD_ADDR_EXP 49
6302: PUSH
6303: LD_EXP 49
6307: PPUSH
6308: LD_VAR 0 1
6312: PPUSH
6313: LD_EXP 49
6317: PUSH
6318: LD_VAR 0 1
6322: ARRAY
6323: PUSH
6324: LD_VAR 0 2
6328: UNION
6329: PPUSH
6330: CALL_OW 1
6334: ST_TO_ADDR
// end ; end ; end ;
6335: GO 6226
6337: POP
6338: POP
// end ;
6339: PPOPN 4
6341: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6342: LD_INT 0
6344: PPUSH
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
6349: PPUSH
6350: PPUSH
// playersAmount := 0 ;
6351: LD_ADDR_VAR 0 3
6355: PUSH
6356: LD_INT 0
6358: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6359: LD_ADDR_VAR 0 7
6363: PUSH
6364: LD_INT 1
6366: PUSH
6367: LD_INT 2
6369: PUSH
6370: LD_INT 3
6372: PUSH
6373: LD_INT 4
6375: PUSH
6376: LD_INT 5
6378: PUSH
6379: LD_INT 6
6381: PUSH
6382: LD_INT 7
6384: PUSH
6385: LD_INT 8
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6398: LD_ADDR_EXP 52
6402: PUSH
6403: LD_INT 0
6405: PUSH
6406: LD_INT 0
6408: PUSH
6409: LD_INT 0
6411: PUSH
6412: LD_INT 0
6414: PUSH
6415: LD_INT 0
6417: PUSH
6418: LD_INT 0
6420: PUSH
6421: LD_INT 0
6423: PUSH
6424: LD_INT 0
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: ST_TO_ADDR
// for j = 1 to Side_Positions do
6437: LD_ADDR_VAR 0 4
6441: PUSH
6442: DOUBLE
6443: LD_INT 1
6445: DEC
6446: ST_TO_ADDR
6447: LD_EXP 34
6451: PUSH
6452: FOR_TO
6453: IFFALSE 6520
// if Side_Positions [ j ] then
6455: LD_EXP 34
6459: PUSH
6460: LD_VAR 0 4
6464: ARRAY
6465: IFFALSE 6518
// begin playersAmount := playersAmount + 1 ;
6467: LD_ADDR_VAR 0 3
6471: PUSH
6472: LD_VAR 0 3
6476: PUSH
6477: LD_INT 1
6479: PLUS
6480: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6481: LD_ADDR_EXP 52
6485: PUSH
6486: LD_EXP 52
6490: PPUSH
6491: LD_VAR 0 4
6495: PPUSH
6496: LD_VAR 0 7
6500: PUSH
6501: LD_EXP 34
6505: PUSH
6506: LD_VAR 0 4
6510: ARRAY
6511: ARRAY
6512: PPUSH
6513: CALL_OW 1
6517: ST_TO_ADDR
// end ;
6518: GO 6452
6520: POP
6521: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6522: LD_ADDR_EXP 48
6526: PUSH
6527: LD_INT 3
6529: PUSH
6530: LD_EXP 25
6534: MUL
6535: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6536: LD_ADDR_EXP 46
6540: PUSH
6541: LD_VAR 0 3
6545: PUSH
6546: LD_EXP 48
6550: MUL
6551: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6552: LD_ADDR_EXP 47
6556: PUSH
6557: LD_EXP 46
6561: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6562: LD_ADDR_EXP 49
6566: PUSH
6567: LD_INT 0
6569: PUSH
6570: LD_INT 0
6572: PUSH
6573: LD_INT 0
6575: PUSH
6576: LD_INT 0
6578: PUSH
6579: LD_INT 0
6581: PUSH
6582: LD_INT 0
6584: PUSH
6585: LD_INT 0
6587: PUSH
6588: LD_INT 0
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6601: LD_ADDR_EXP 50
6605: PUSH
6606: LD_INT 0
6608: PUSH
6609: LD_INT 0
6611: PUSH
6612: LD_INT 0
6614: PUSH
6615: LD_INT 0
6617: PUSH
6618: LD_INT 0
6620: PUSH
6621: LD_INT 0
6623: PUSH
6624: LD_INT 0
6626: PUSH
6627: LD_INT 0
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: ST_TO_ADDR
// apeLevel := 1 ;
6640: LD_ADDR_EXP 51
6644: PUSH
6645: LD_INT 1
6647: ST_TO_ADDR
// if not apemanNumber then
6648: LD_EXP 46
6652: NOT
6653: IFFALSE 6657
// exit ;
6655: GO 6853
// for i := 1 to apemanPerPlayer do
6657: LD_ADDR_VAR 0 2
6661: PUSH
6662: DOUBLE
6663: LD_INT 1
6665: DEC
6666: ST_TO_ADDR
6667: LD_EXP 48
6671: PUSH
6672: FOR_TO
6673: IFFALSE 6851
// begin for j := 1 to Side_Positions do
6675: LD_ADDR_VAR 0 4
6679: PUSH
6680: DOUBLE
6681: LD_INT 1
6683: DEC
6684: ST_TO_ADDR
6685: LD_EXP 34
6689: PUSH
6690: FOR_TO
6691: IFFALSE 6847
// if Side_Positions [ j ] then
6693: LD_EXP 34
6697: PUSH
6698: LD_VAR 0 4
6702: ARRAY
6703: IFFALSE 6845
// begin pos := Side_Positions [ j ] ;
6705: LD_ADDR_VAR 0 6
6709: PUSH
6710: LD_EXP 34
6714: PUSH
6715: LD_VAR 0 4
6719: ARRAY
6720: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6721: LD_ADDR_EXP 50
6725: PUSH
6726: LD_EXP 50
6730: PPUSH
6731: LD_VAR 0 4
6735: PPUSH
6736: LD_EXP 50
6740: PUSH
6741: LD_VAR 0 4
6745: ARRAY
6746: PUSH
6747: LD_INT 1
6749: PLUS
6750: PPUSH
6751: CALL_OW 1
6755: ST_TO_ADDR
// ape := PrepareApeman ;
6756: LD_ADDR_VAR 0 5
6760: PUSH
6761: CALL 6858 0 0
6765: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6766: LD_ADDR_EXP 49
6770: PUSH
6771: LD_EXP 49
6775: PPUSH
6776: LD_VAR 0 4
6780: PPUSH
6781: LD_EXP 49
6785: PUSH
6786: LD_VAR 0 4
6790: ARRAY
6791: PPUSH
6792: LD_EXP 49
6796: PUSH
6797: LD_VAR 0 4
6801: ARRAY
6802: PUSH
6803: LD_INT 1
6805: PLUS
6806: PPUSH
6807: LD_VAR 0 5
6811: PPUSH
6812: CALL_OW 1
6816: PPUSH
6817: CALL_OW 1
6821: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6822: LD_VAR 0 5
6826: PPUSH
6827: LD_EXP 52
6831: PUSH
6832: LD_VAR 0 4
6836: ARRAY
6837: PPUSH
6838: LD_INT 0
6840: PPUSH
6841: CALL_OW 49
// end ;
6845: GO 6690
6847: POP
6848: POP
// end ;
6849: GO 6672
6851: POP
6852: POP
// end ;
6853: LD_VAR 0 1
6857: RET
// export function PrepareApeman ; var bonus ; begin
6858: LD_INT 0
6860: PPUSH
6861: PPUSH
// uc_side := 0 ;
6862: LD_ADDR_OWVAR 20
6866: PUSH
6867: LD_INT 0
6869: ST_TO_ADDR
// uc_nation := 0 ;
6870: LD_ADDR_OWVAR 21
6874: PUSH
6875: LD_INT 0
6877: ST_TO_ADDR
// InitHc ;
6878: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6882: LD_ADDR_VAR 0 2
6886: PUSH
6887: LD_INT 1
6889: NEG
6890: PUSH
6891: LD_INT 0
6893: PUSH
6894: LD_INT 1
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: PUSH
6902: LD_OWVAR 1
6906: PUSH
6907: LD_INT 3
6909: MOD
6910: PUSH
6911: LD_INT 1
6913: PLUS
6914: ARRAY
6915: ST_TO_ADDR
// hc_class := class_apeman ;
6916: LD_ADDR_OWVAR 28
6920: PUSH
6921: LD_INT 12
6923: ST_TO_ADDR
// hc_gallery :=  ;
6924: LD_ADDR_OWVAR 33
6928: PUSH
6929: LD_STRING 
6931: ST_TO_ADDR
// hc_name :=  ;
6932: LD_ADDR_OWVAR 26
6936: PUSH
6937: LD_STRING 
6939: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6940: LD_ADDR_OWVAR 31
6944: PUSH
6945: LD_EXP 51
6949: PUSH
6950: LD_VAR 0 2
6954: PLUS
6955: PUSH
6956: LD_EXP 51
6960: PUSH
6961: LD_VAR 0 2
6965: PLUS
6966: PUSH
6967: LD_EXP 51
6971: PUSH
6972: LD_VAR 0 2
6976: PLUS
6977: PUSH
6978: LD_EXP 51
6982: PUSH
6983: LD_VAR 0 2
6987: PLUS
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6995: LD_ADDR_OWVAR 35
6999: PUSH
7000: LD_INT 10
7002: PUSH
7003: LD_VAR 0 2
7007: MUL
7008: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7009: LD_ADDR_OWVAR 29
7013: PUSH
7014: LD_INT 12
7016: PUSH
7017: LD_INT 10
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: ST_TO_ADDR
// result := CreateHuman ;
7024: LD_ADDR_VAR 0 1
7028: PUSH
7029: CALL_OW 44
7033: ST_TO_ADDR
// end ;
7034: LD_VAR 0 1
7038: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7039: LD_INT 0
7041: PPUSH
7042: PPUSH
7043: PPUSH
// if not ape then
7044: LD_VAR 0 1
7048: NOT
7049: IFFALSE 7053
// exit ;
7051: GO 7178
// side := GetSide ( ape ) ;
7053: LD_ADDR_VAR 0 3
7057: PUSH
7058: LD_VAR 0 1
7062: PPUSH
7063: CALL_OW 255
7067: ST_TO_ADDR
// if not side then
7068: LD_VAR 0 3
7072: NOT
7073: IFFALSE 7127
// begin for i = 1 to apemanPos do
7075: LD_ADDR_VAR 0 4
7079: PUSH
7080: DOUBLE
7081: LD_INT 1
7083: DEC
7084: ST_TO_ADDR
7085: LD_EXP 49
7089: PUSH
7090: FOR_TO
7091: IFFALSE 7125
// if ape in apemanPos [ i ] then
7093: LD_VAR 0 1
7097: PUSH
7098: LD_EXP 49
7102: PUSH
7103: LD_VAR 0 4
7107: ARRAY
7108: IN
7109: IFFALSE 7123
// begin side := i ;
7111: LD_ADDR_VAR 0 3
7115: PUSH
7116: LD_VAR 0 4
7120: ST_TO_ADDR
// break ;
7121: GO 7125
// end ;
7123: GO 7090
7125: POP
7126: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7127: LD_ADDR_EXP 49
7131: PUSH
7132: LD_EXP 49
7136: PPUSH
7137: LD_VAR 0 3
7141: PPUSH
7142: LD_EXP 49
7146: PUSH
7147: LD_VAR 0 3
7151: ARRAY
7152: PUSH
7153: LD_VAR 0 1
7157: DIFF
7158: PPUSH
7159: CALL_OW 1
7163: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7164: LD_ADDR_EXP 46
7168: PUSH
7169: LD_EXP 46
7173: PUSH
7174: LD_INT 1
7176: MINUS
7177: ST_TO_ADDR
// end ; end_of_file
7178: LD_VAR 0 2
7182: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7183: LD_VAR 0 1
7187: PPUSH
7188: CALL_OW 266
7192: PUSH
7193: LD_INT 0
7195: PUSH
7196: LD_INT 1
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: IN
7203: IFFALSE 7228
// SetBName ( b , @ & GetSide ( b ) ) ;
7205: LD_VAR 0 1
7209: PPUSH
7210: LD_STRING @
7212: PUSH
7213: LD_VAR 0 1
7217: PPUSH
7218: CALL_OW 255
7222: STR
7223: PPUSH
7224: CALL_OW 500
// end ;
7228: PPOPN 2
7230: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7231: LD_VAR 0 1
7235: PPUSH
7236: CALL_OW 266
7240: PUSH
7241: LD_INT 0
7243: PUSH
7244: LD_INT 1
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: IN
7251: IFFALSE 7276
// SetBName ( b , @ & GetSide ( b ) ) ;
7253: LD_VAR 0 1
7257: PPUSH
7258: LD_STRING @
7260: PUSH
7261: LD_VAR 0 1
7265: PPUSH
7266: CALL_OW 255
7270: STR
7271: PPUSH
7272: CALL_OW 500
// end ;
7276: PPOPN 3
7278: END
// on VehicleConstructed ( veh , fac ) do var side ;
7279: LD_INT 0
7281: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7282: LD_VAR 0 1
7286: PPUSH
7287: CALL_OW 263
7291: PUSH
7292: LD_INT 5
7294: EQUAL
7295: IFFALSE 7437
// begin side := GetSide ( veh ) ;
7297: LD_ADDR_VAR 0 3
7301: PUSH
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL_OW 255
7311: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7312: LD_ADDR_EXP 49
7316: PUSH
7317: LD_EXP 49
7321: PPUSH
7322: LD_VAR 0 3
7326: PPUSH
7327: LD_EXP 49
7331: PUSH
7332: LD_VAR 0 3
7336: ARRAY
7337: PPUSH
7338: LD_INT 52
7340: PUSH
7341: EMPTY
7342: LIST
7343: PPUSH
7344: CALL_OW 72
7348: PUSH
7349: LD_INT 22
7351: PUSH
7352: LD_VAR 0 3
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: LD_INT 2
7363: PUSH
7364: LD_INT 33
7366: PUSH
7367: LD_INT 5
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 25
7376: PUSH
7377: LD_INT 12
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 25
7386: PUSH
7387: LD_INT 15
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 25
7396: PUSH
7397: LD_INT 16
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: LD_INT 25
7406: PUSH
7407: LD_INT 17
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PPUSH
7426: CALL_OW 69
7430: UNION
7431: PPUSH
7432: CALL_OW 1
7436: ST_TO_ADDR
// end ; end ;
7437: PPOPN 3
7439: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7440: LD_INT 0
7442: PPUSH
7443: PPUSH
7444: PPUSH
7445: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7446: LD_VAR 0 1
7450: PPUSH
7451: CALL_OW 257
7455: PUSH
7456: LD_INT 12
7458: PUSH
7459: LD_INT 15
7461: PUSH
7462: LD_INT 17
7464: PUSH
7465: LD_INT 16
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: IN
7474: PUSH
7475: LD_VAR 0 1
7479: PPUSH
7480: CALL_OW 263
7484: PUSH
7485: LD_INT 5
7487: EQUAL
7488: OR
7489: IFFALSE 7500
// ApeKilled ( j ) ;
7491: LD_VAR 0 1
7495: PPUSH
7496: CALL 7039 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7500: LD_VAR 0 1
7504: PPUSH
7505: CALL_OW 266
7509: PUSH
7510: LD_INT 0
7512: PUSH
7513: LD_INT 1
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: IN
7520: IFFALSE 7602
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7522: LD_ADDR_VAR 0 4
7526: PUSH
7527: LD_EXP 34
7531: PUSH
7532: LD_VAR 0 1
7536: PPUSH
7537: CALL_OW 255
7541: ARRAY
7542: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7543: LD_ADDR_VAR 0 2
7547: PUSH
7548: LD_EXP 39
7552: PUSH
7553: LD_VAR 0 4
7557: ARRAY
7558: PUSH
7559: LD_INT 1
7561: ARRAY
7562: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7563: LD_ADDR_VAR 0 3
7567: PUSH
7568: LD_EXP 39
7572: PUSH
7573: LD_VAR 0 4
7577: ARRAY
7578: PUSH
7579: LD_INT 2
7581: ARRAY
7582: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7583: LD_VAR 0 2
7587: PPUSH
7588: LD_VAR 0 3
7592: PPUSH
7593: CALL_OW 420
7597: PPUSH
7598: CALL_OW 419
// end ; end ;
7602: PPOPN 5
7604: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7605: LD_VAR 0 1
7609: PPUSH
7610: LD_VAR 0 2
7614: PPUSH
7615: LD_VAR 0 3
7619: PPUSH
7620: LD_OWVAR 2
7624: PPUSH
7625: CALL 8605 0 4
7629: PPOPN 3
7631: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7632: LD_INT 0
7634: PPUSH
7635: PPUSH
// for un in battle_flags_id do
7636: LD_ADDR_VAR 0 2
7640: PUSH
7641: LD_EXP 44
7645: PUSH
7646: FOR_IN
7647: IFFALSE 7722
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7649: LD_VAR 0 2
7653: PPUSH
7654: LD_INT 1
7656: PUSH
7657: LD_LOC 11
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 2
7668: PUSH
7669: LD_LOC 11
7673: PUSH
7674: LD_INT 2
7676: DIV
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 3
7684: PUSH
7685: LD_LOC 11
7689: PUSH
7690: LD_INT 5
7692: DIV
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: LD_INT 20
7700: PUSH
7701: LD_LOC 11
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: PPUSH
7716: CALL_OW 423
7720: GO 7646
7722: POP
7723: POP
// end ;
7724: LD_VAR 0 1
7728: RET
// every 1 do var un ;
7729: GO 7731
7731: DISABLE
7732: LD_INT 0
7734: PPUSH
// begin if not def_morale_flags then
7735: LD_EXP 9
7739: NOT
7740: IFFALSE 7744
// exit ;
7742: GO 7821
// if not morale_decreasing_time then
7744: LD_EXP 24
7748: NOT
7749: IFFALSE 7753
// exit ;
7751: GO 7821
// strength = 100 ;
7753: LD_ADDR_LOC 11
7757: PUSH
7758: LD_INT 100
7760: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7761: LD_EXP 24
7765: PPUSH
7766: CALL_OW 67
// strength := strength - 1 ;
7770: LD_ADDR_LOC 11
7774: PUSH
7775: LD_LOC 11
7779: PUSH
7780: LD_INT 1
7782: MINUS
7783: ST_TO_ADDR
// Update_Flags ;
7784: CALL 7632 0 0
// until not strength ;
7788: LD_LOC 11
7792: NOT
7793: IFFALSE 7761
// for un in battle_flags_id do
7795: LD_ADDR_VAR 0 1
7799: PUSH
7800: LD_EXP 44
7804: PUSH
7805: FOR_IN
7806: IFFALSE 7819
// KillBattleFlag ( un ) ;
7808: LD_VAR 0 1
7812: PPUSH
7813: CALL_OW 419
7817: GO 7805
7819: POP
7820: POP
// end ; end_of_file
7821: PPOPN 1
7823: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7824: LD_INT 0
7826: PPUSH
7827: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7828: LD_ADDR_VAR 0 2
7832: PUSH
7833: LD_STRING #Multi1x1-Time
7835: PUSH
7836: LD_OWVAR 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: ST_TO_ADDR
// if WaitServerStrings then
7845: LD_EXP 54
7849: IFFALSE 7867
// AllStrings = AllStrings ^ WaitServerStrings ;
7851: LD_ADDR_VAR 0 2
7855: PUSH
7856: LD_VAR 0 2
7860: PUSH
7861: LD_EXP 54
7865: ADD
7866: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7867: LD_INT 0
7869: PUSH
7870: LD_EXP 29
7874: PUSH
7875: LD_OWVAR 1
7879: MINUS
7880: LESSEQUAL
7881: IFFALSE 7912
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7883: LD_ADDR_VAR 0 2
7887: PUSH
7888: LD_VAR 0 2
7892: PUSH
7893: LD_STRING #allowedsibbomb
7895: PUSH
7896: LD_EXP 29
7900: PUSH
7901: LD_OWVAR 1
7905: MINUS
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: ADD
7911: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7912: LD_INT 0
7914: PUSH
7915: LD_EXP 57
7919: PUSH
7920: LD_OWVAR 1
7924: MINUS
7925: LESSEQUAL
7926: IFFALSE 7957
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7928: LD_ADDR_VAR 0 2
7932: PUSH
7933: LD_VAR 0 2
7937: PUSH
7938: LD_STRING #builduptime
7940: PUSH
7941: LD_EXP 57
7945: PUSH
7946: LD_OWVAR 1
7950: MINUS
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: ADD
7956: ST_TO_ADDR
// if ( ExtraStrings ) then
7957: LD_EXP 53
7961: IFFALSE 7983
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7963: LD_ADDR_VAR 0 2
7967: PUSH
7968: LD_VAR 0 2
7972: PUSH
7973: LD_STRING 
7975: ADD
7976: PUSH
7977: LD_EXP 53
7981: ADD
7982: ST_TO_ADDR
// Display_Strings := AllStrings ;
7983: LD_ADDR_OWVAR 47
7987: PUSH
7988: LD_VAR 0 2
7992: ST_TO_ADDR
// end ;
7993: LD_VAR 0 1
7997: RET
// every 0 0$1 do
7998: GO 8000
8000: DISABLE
// begin ShowTimer ;
8001: CALL 7824 0 0
// enable ;
8005: ENABLE
// end ; end_of_file
8006: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
8007: LD_INT 0
8009: PPUSH
8010: PPUSH
8011: PPUSH
// BuildUpTime_Delay = 0 ;
8012: LD_ADDR_EXP 57
8016: PUSH
8017: LD_INT 0
8019: ST_TO_ADDR
// if not def_builduptime then
8020: LD_EXP 14
8024: NOT
8025: IFFALSE 8029
// exit ;
8027: GO 8212
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
8029: LD_ADDR_EXP 57
8033: PUSH
8034: LD_INT 8400
8036: PUSH
8037: LD_INT 2100
8039: PUSH
8040: LD_EXP 14
8044: MUL
8045: PLUS
8046: ST_TO_ADDR
// BuildUpTimeActive := true ;
8047: LD_ADDR_EXP 56
8051: PUSH
8052: LD_INT 1
8054: ST_TO_ADDR
// for i := 1 to 8 do
8055: LD_ADDR_VAR 0 2
8059: PUSH
8060: DOUBLE
8061: LD_INT 1
8063: DEC
8064: ST_TO_ADDR
8065: LD_INT 8
8067: PUSH
8068: FOR_TO
8069: IFFALSE 8210
// if Side_Positions [ i ] then
8071: LD_EXP 34
8075: PUSH
8076: LD_VAR 0 2
8080: ARRAY
8081: IFFALSE 8208
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
8083: LD_EXP 55
8087: PUSH
8088: LD_EXP 34
8092: PUSH
8093: LD_VAR 0 2
8097: ARRAY
8098: ARRAY
8099: PPUSH
8100: LD_INT 5
8102: PPUSH
8103: CALL_OW 424
// for j := 1 to 8 do
8107: LD_ADDR_VAR 0 3
8111: PUSH
8112: DOUBLE
8113: LD_INT 1
8115: DEC
8116: ST_TO_ADDR
8117: LD_INT 8
8119: PUSH
8120: FOR_TO
8121: IFFALSE 8206
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8123: LD_EXP 34
8127: PUSH
8128: LD_VAR 0 3
8132: ARRAY
8133: PUSH
8134: LD_EXP 31
8138: PUSH
8139: LD_VAR 0 2
8143: ARRAY
8144: PUSH
8145: LD_EXP 31
8149: PUSH
8150: LD_VAR 0 3
8154: ARRAY
8155: NONEQUAL
8156: PUSH
8157: LD_EXP 36
8161: NOT
8162: PUSH
8163: LD_VAR 0 2
8167: PUSH
8168: LD_VAR 0 3
8172: NONEQUAL
8173: AND
8174: OR
8175: AND
8176: IFFALSE 8204
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8178: LD_VAR 0 3
8182: PPUSH
8183: LD_EXP 55
8187: PUSH
8188: LD_EXP 34
8192: PUSH
8193: LD_VAR 0 2
8197: ARRAY
8198: ARRAY
8199: PPUSH
8200: CALL_OW 333
8204: GO 8120
8206: POP
8207: POP
// end ;
8208: GO 8068
8210: POP
8211: POP
// end ;
8212: LD_VAR 0 1
8216: RET
// export function EndBuildUp ; var i , j ; begin
8217: LD_INT 0
8219: PPUSH
8220: PPUSH
8221: PPUSH
// BuildUpTimeActive := false ;
8222: LD_ADDR_EXP 56
8226: PUSH
8227: LD_INT 0
8229: ST_TO_ADDR
// for i := 1 to 8 do
8230: LD_ADDR_VAR 0 2
8234: PUSH
8235: DOUBLE
8236: LD_INT 1
8238: DEC
8239: ST_TO_ADDR
8240: LD_INT 8
8242: PUSH
8243: FOR_TO
8244: IFFALSE 8385
// if Side_Positions [ i ] then
8246: LD_EXP 34
8250: PUSH
8251: LD_VAR 0 2
8255: ARRAY
8256: IFFALSE 8383
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
8258: LD_EXP 55
8262: PUSH
8263: LD_EXP 34
8267: PUSH
8268: LD_VAR 0 2
8272: ARRAY
8273: ARRAY
8274: PPUSH
8275: LD_INT 0
8277: PPUSH
8278: CALL_OW 424
// for j := 1 to 8 do
8282: LD_ADDR_VAR 0 3
8286: PUSH
8287: DOUBLE
8288: LD_INT 1
8290: DEC
8291: ST_TO_ADDR
8292: LD_INT 8
8294: PUSH
8295: FOR_TO
8296: IFFALSE 8381
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
8298: LD_EXP 34
8302: PUSH
8303: LD_VAR 0 3
8307: ARRAY
8308: PUSH
8309: LD_EXP 31
8313: PUSH
8314: LD_VAR 0 2
8318: ARRAY
8319: PUSH
8320: LD_EXP 31
8324: PUSH
8325: LD_VAR 0 3
8329: ARRAY
8330: NONEQUAL
8331: PUSH
8332: LD_EXP 36
8336: NOT
8337: PUSH
8338: LD_VAR 0 2
8342: PUSH
8343: LD_VAR 0 3
8347: NONEQUAL
8348: AND
8349: OR
8350: AND
8351: IFFALSE 8379
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
8353: LD_VAR 0 3
8357: PPUSH
8358: LD_EXP 55
8362: PUSH
8363: LD_EXP 34
8367: PUSH
8368: LD_VAR 0 2
8372: ARRAY
8373: ARRAY
8374: PPUSH
8375: CALL_OW 334
8379: GO 8295
8381: POP
8382: POP
// end ;
8383: GO 8243
8385: POP
8386: POP
// end ;
8387: LD_VAR 0 1
8391: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
8392: LD_EXP 56
8396: IFFALSE 8571
8398: GO 8400
8400: DISABLE
8401: LD_INT 0
8403: PPUSH
8404: PPUSH
// begin for i := 1 to 8 do
8405: LD_ADDR_VAR 0 1
8409: PUSH
8410: DOUBLE
8411: LD_INT 1
8413: DEC
8414: ST_TO_ADDR
8415: LD_INT 8
8417: PUSH
8418: FOR_TO
8419: IFFALSE 8568
// if Side_Positions [ i ] then
8421: LD_EXP 34
8425: PUSH
8426: LD_VAR 0 1
8430: ARRAY
8431: IFFALSE 8566
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8433: LD_ADDR_VAR 0 2
8437: PUSH
8438: LD_EXP 55
8442: PUSH
8443: LD_EXP 34
8447: PUSH
8448: LD_VAR 0 1
8452: ARRAY
8453: ARRAY
8454: PPUSH
8455: LD_INT 2
8457: PUSH
8458: LD_INT 21
8460: PUSH
8461: LD_INT 1
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: PUSH
8468: LD_INT 21
8470: PUSH
8471: LD_INT 2
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: LIST
8482: PUSH
8483: LD_INT 22
8485: PUSH
8486: LD_OWVAR 2
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PPUSH
8499: CALL_OW 70
8503: PUSH
8504: FOR_IN
8505: IFFALSE 8564
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
8507: LD_EXP 31
8511: PUSH
8512: LD_VAR 0 1
8516: ARRAY
8517: PUSH
8518: LD_EXP 31
8522: PUSH
8523: LD_OWVAR 2
8527: ARRAY
8528: NONEQUAL
8529: PUSH
8530: LD_EXP 36
8534: NOT
8535: PUSH
8536: LD_VAR 0 1
8540: PUSH
8541: LD_OWVAR 2
8545: NONEQUAL
8546: AND
8547: OR
8548: IFFALSE 8562
// ComMoveToArea ( un , BuildUpEscape ) ;
8550: LD_VAR 0 2
8554: PPUSH
8555: LD_INT 17
8557: PPUSH
8558: CALL_OW 113
8562: GO 8504
8564: POP
8565: POP
8566: GO 8418
8568: POP
8569: POP
// enable ;
8570: ENABLE
// end ;
8571: PPOPN 2
8573: END
// every 0 0$1 trigger def_builduptime do
8574: LD_EXP 14
8578: IFFALSE 8604
8580: GO 8582
8582: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
8583: LD_INT 8400
8585: PUSH
8586: LD_EXP 14
8590: PUSH
8591: LD_INT 2100
8593: MUL
8594: PLUS
8595: PPUSH
8596: CALL_OW 67
// EndBuildUp ;
8600: CALL 8217 0 0
// end ; end_of_file
8604: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
8605: LD_INT 0
8607: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
8608: LD_VAR 0 1
8612: PPUSH
8613: CALL_OW 255
8617: PUSH
8618: LD_VAR 0 4
8622: EQUAL
8623: IFFALSE 8642
// begin SetAchievement ( ACH_RAD ) ;
8625: LD_STRING ACH_RAD
8627: PPUSH
8628: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
8632: LD_STRING ACH_NL
8634: PPUSH
8635: LD_INT 1
8637: PPUSH
8638: CALL_OW 564
// end end ;
8642: LD_VAR 0 5
8646: RET
// export function SA_Win ( side ) ; begin
8647: LD_INT 0
8649: PPUSH
// case side of 1 :
8650: LD_VAR 0 1
8654: PUSH
8655: LD_INT 1
8657: DOUBLE
8658: EQUAL
8659: IFTRUE 8663
8661: GO 8676
8663: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
8664: LD_STRING ACH_AH
8666: PPUSH
8667: LD_INT 1
8669: PPUSH
8670: CALL_OW 564
8674: GO 8839
8676: LD_INT 2
8678: DOUBLE
8679: EQUAL
8680: IFTRUE 8684
8682: GO 8697
8684: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
8685: LD_STRING ACH_E
8687: PPUSH
8688: LD_INT 1
8690: PPUSH
8691: CALL_OW 564
8695: GO 8839
8697: LD_INT 3
8699: DOUBLE
8700: EQUAL
8701: IFTRUE 8705
8703: GO 8718
8705: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
8706: LD_STRING ACH_OOL
8708: PPUSH
8709: LD_INT 1
8711: PPUSH
8712: CALL_OW 564
8716: GO 8839
8718: LD_INT 1
8720: PUSH
8721: LD_INT 2
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: DOUBLE
8728: EQUAL
8729: IFTRUE 8733
8731: GO 8758
8733: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8734: LD_STRING ACH_AH
8736: PPUSH
8737: LD_REAL  5.00000000000000E-0001
8740: PPUSH
8741: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8745: LD_STRING ACH_E
8747: PPUSH
8748: LD_REAL  5.00000000000000E-0001
8751: PPUSH
8752: CALL_OW 564
// end ; [ 2 , 3 ] :
8756: GO 8839
8758: LD_INT 2
8760: PUSH
8761: LD_INT 3
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: DOUBLE
8768: EQUAL
8769: IFTRUE 8773
8771: GO 8798
8773: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
8774: LD_STRING ACH_OOL
8776: PPUSH
8777: LD_REAL  5.00000000000000E-0001
8780: PPUSH
8781: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
8785: LD_STRING ACH_E
8787: PPUSH
8788: LD_REAL  5.00000000000000E-0001
8791: PPUSH
8792: CALL_OW 564
// end ; [ 3 , 1 ] :
8796: GO 8839
8798: LD_INT 3
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: DOUBLE
8808: EQUAL
8809: IFTRUE 8813
8811: GO 8838
8813: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
8814: LD_STRING ACH_AH
8816: PPUSH
8817: LD_REAL  5.00000000000000E-0001
8820: PPUSH
8821: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
8825: LD_STRING ACH_OOL
8827: PPUSH
8828: LD_REAL  5.00000000000000E-0001
8831: PPUSH
8832: CALL_OW 564
// end ; end ;
8836: GO 8839
8838: POP
// end ; end_of_file
8839: LD_VAR 0 2
8843: RET
// var defaited , GameEnded ; export function Init_Win_Condition ; var i ; begin
8844: LD_INT 0
8846: PPUSH
8847: PPUSH
// enable ( 98 ) ;
8848: LD_INT 98
8850: ENABLE_MARKED
// GameEnded = false ;
8851: LD_ADDR_LOC 17
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8859: LD_ADDR_LOC 16
8863: PUSH
8864: LD_INT 0
8866: PUSH
8867: LD_INT 0
8869: PUSH
8870: LD_INT 0
8872: PUSH
8873: LD_INT 0
8875: PUSH
8876: LD_INT 0
8878: PUSH
8879: LD_INT 0
8881: PUSH
8882: LD_INT 0
8884: PUSH
8885: LD_INT 0
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: ST_TO_ADDR
// for i = 1 to side_positions do
8898: LD_ADDR_VAR 0 2
8902: PUSH
8903: DOUBLE
8904: LD_INT 1
8906: DEC
8907: ST_TO_ADDR
8908: LD_EXP 34
8912: PUSH
8913: FOR_TO
8914: IFFALSE 8954
// if not side_positions [ i ] then
8916: LD_EXP 34
8920: PUSH
8921: LD_VAR 0 2
8925: ARRAY
8926: NOT
8927: IFFALSE 8952
// defaited = replace ( defaited , i , true ) ;
8929: LD_ADDR_LOC 16
8933: PUSH
8934: LD_LOC 16
8938: PPUSH
8939: LD_VAR 0 2
8943: PPUSH
8944: LD_INT 1
8946: PPUSH
8947: CALL_OW 1
8951: ST_TO_ADDR
8952: GO 8913
8954: POP
8955: POP
// end ;
8956: LD_VAR 0 1
8960: RET
// function CanWinLoose ; begin
8961: LD_INT 0
8963: PPUSH
// Result := true ;
8964: LD_ADDR_VAR 0 1
8968: PUSH
8969: LD_INT 1
8971: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
8972: CALL_OW 518
8976: PUSH
8977: CALL_OW 519
8981: PUSH
8982: LD_INT 0
8984: GREATER
8985: AND
8986: IFFALSE 8996
// Result := false ;
8988: LD_ADDR_VAR 0 1
8992: PUSH
8993: LD_INT 0
8995: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
8996: CALL_OW 531
9000: PUSH
9001: CALL_OW 519
9005: PUSH
9006: LD_INT 1
9008: GREATER
9009: AND
9010: IFFALSE 9020
// Result := false ;
9012: LD_ADDR_VAR 0 1
9016: PUSH
9017: LD_INT 0
9019: ST_TO_ADDR
// end ;
9020: LD_VAR 0 1
9024: RET
// export function HasPower ( i ) ; var k , h ; begin
9025: LD_INT 0
9027: PPUSH
9028: PPUSH
9029: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
9030: LD_VAR 0 1
9034: PPUSH
9035: CALL_OW 108
9039: NOT
9040: PUSH
9041: LD_EXP 33
9045: PUSH
9046: LD_VAR 0 1
9050: ARRAY
9051: NOT
9052: AND
9053: PUSH
9054: LD_OWVAR 4
9058: AND
9059: IFFALSE 9071
// begin result = false ;
9061: LD_ADDR_VAR 0 2
9065: PUSH
9066: LD_INT 0
9068: ST_TO_ADDR
// end else
9069: GO 9366
// case def_win_rules of 0 :
9071: LD_EXP 30
9075: PUSH
9076: LD_INT 0
9078: DOUBLE
9079: EQUAL
9080: IFTRUE 9084
9082: GO 9247
9084: POP
// if def_people_respawning then
9085: LD_EXP 11
9089: IFFALSE 9180
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
9091: LD_ADDR_VAR 0 2
9095: PUSH
9096: LD_INT 22
9098: PUSH
9099: LD_VAR 0 1
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: LD_INT 2
9110: PUSH
9111: LD_INT 21
9113: PUSH
9114: LD_INT 1
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: LD_INT 33
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PUSH
9131: LD_INT 33
9133: PUSH
9134: LD_INT 5
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PUSH
9141: LD_INT 30
9143: PUSH
9144: LD_INT 0
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: LD_INT 30
9153: PUSH
9154: LD_INT 1
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PPUSH
9173: CALL_OW 69
9177: ST_TO_ADDR
9178: GO 9245
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
9180: LD_ADDR_VAR 0 2
9184: PUSH
9185: LD_INT 22
9187: PUSH
9188: LD_VAR 0 1
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: PUSH
9197: LD_INT 2
9199: PUSH
9200: LD_INT 21
9202: PUSH
9203: LD_INT 1
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 33
9212: PUSH
9213: LD_INT 3
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 33
9222: PUSH
9223: LD_INT 5
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PPUSH
9240: CALL_OW 69
9244: ST_TO_ADDR
9245: GO 9366
9247: LD_INT 1
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9294
9255: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
9256: LD_ADDR_VAR 0 2
9260: PUSH
9261: LD_INT 22
9263: PUSH
9264: LD_VAR 0 1
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 21
9275: PUSH
9276: LD_INT 1
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PPUSH
9287: CALL_OW 69
9291: ST_TO_ADDR
9292: GO 9366
9294: LD_INT 2
9296: DOUBLE
9297: EQUAL
9298: IFTRUE 9302
9300: GO 9365
9302: POP
// begin h = false ;
9303: LD_ADDR_VAR 0 4
9307: PUSH
9308: LD_INT 0
9310: ST_TO_ADDR
// for k in heroes [ i ] do
9311: LD_ADDR_VAR 0 3
9315: PUSH
9316: LD_EXP 45
9320: PUSH
9321: LD_VAR 0 1
9325: ARRAY
9326: PUSH
9327: FOR_IN
9328: IFFALSE 9351
// if IsLive ( k ) then
9330: LD_VAR 0 3
9334: PPUSH
9335: CALL_OW 300
9339: IFFALSE 9349
// h = true ;
9341: LD_ADDR_VAR 0 4
9345: PUSH
9346: LD_INT 1
9348: ST_TO_ADDR
9349: GO 9327
9351: POP
9352: POP
// Result := h ;
9353: LD_ADDR_VAR 0 2
9357: PUSH
9358: LD_VAR 0 4
9362: ST_TO_ADDR
// end ; end ;
9363: GO 9366
9365: POP
// end ;
9366: LD_VAR 0 2
9370: RET
// function AlliedSides ( i , j ) ; begin
9371: LD_INT 0
9373: PPUSH
// Result := false ;
9374: LD_ADDR_VAR 0 3
9378: PUSH
9379: LD_INT 0
9381: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
9382: LD_VAR 0 1
9386: PPUSH
9387: LD_VAR 0 2
9391: PPUSH
9392: CALL_OW 81
9396: PUSH
9397: LD_INT 1
9399: EQUAL
9400: PUSH
9401: LD_VAR 0 2
9405: PPUSH
9406: LD_VAR 0 1
9410: PPUSH
9411: CALL_OW 81
9415: PUSH
9416: LD_INT 1
9418: EQUAL
9419: AND
9420: PUSH
9421: LD_VAR 0 1
9425: PPUSH
9426: CALL_OW 83
9430: AND
9431: PUSH
9432: LD_VAR 0 2
9436: PPUSH
9437: CALL_OW 83
9441: AND
9442: IFFALSE 9452
// Result := true ;
9444: LD_ADDR_VAR 0 3
9448: PUSH
9449: LD_INT 1
9451: ST_TO_ADDR
// end ;
9452: LD_VAR 0 3
9456: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
9457: CALL 8961 0 0
9461: PUSH
9462: LD_LOC 17
9466: NOT
9467: AND
9468: IFFALSE 9484
9470: GO 9472
9472: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
9473: LD_ADDR_EXP 54
9477: PUSH
9478: LD_STRING #Player-Ended
9480: PUSH
9481: EMPTY
9482: LIST
9483: ST_TO_ADDR
9484: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
9485: CALL 8961 0 0
9489: PUSH
9490: LD_LOC 17
9494: AND
9495: IFFALSE 9504
9497: GO 9499
9499: DISABLE
// YouLostInMultiplayer ;
9500: CALL_OW 107
9504: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
9505: CALL 8961 0 0
9509: NOT
9510: PUSH
9511: CALL_OW 531
9515: NOT
9516: AND
9517: IFFALSE 9533
9519: GO 9521
9521: DISABLE
// WaitServerStrings = [ #server-wait ] ;
9522: LD_ADDR_EXP 54
9526: PUSH
9527: LD_STRING #server-wait
9529: PUSH
9530: EMPTY
9531: LIST
9532: ST_TO_ADDR
9533: END
// every 100 trigger IAmSpec do
9534: CALL_OW 531
9538: IFFALSE 9554
9540: GO 9542
9542: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
9543: LD_ADDR_EXP 54
9547: PUSH
9548: LD_STRING #Player-IAmSpec
9550: PUSH
9551: EMPTY
9552: LIST
9553: ST_TO_ADDR
9554: END
// every 100 trigger GameEnded and IAmSpec do
9555: LD_LOC 17
9559: PUSH
9560: CALL_OW 531
9564: AND
9565: IFFALSE 9574
9567: GO 9569
9569: DISABLE
// YouLostInMultiplayer ;
9570: CALL_OW 107
9574: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
9575: CALL 8961 0 0
9579: PUSH
9580: LD_LOC 17
9584: NOT
9585: AND
9586: IFFALSE 9602
9588: GO 9590
9590: DISABLE
// WaitServerStrings = [ $player-win ] ;
9591: LD_ADDR_EXP 54
9595: PUSH
9596: LD_STRING $player-win
9598: PUSH
9599: EMPTY
9600: LIST
9601: ST_TO_ADDR
9602: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
9603: CALL 8961 0 0
9607: PUSH
9608: LD_LOC 17
9612: AND
9613: IFFALSE 9637
9615: GO 9617
9617: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
9618: LD_EXP 35
9622: PUSH
9623: LD_OWVAR 7
9627: ARRAY
9628: PPUSH
9629: CALL 8647 0 1
// YouWinInMultiplayer ;
9633: CALL_OW 106
// end ;
9637: END
// every 100 trigger isEditor marked 401 do
9638: LD_OWVAR 84
9642: IFFALSE 9658
9644: GO 9646
9646: DISABLE
// Debug_Strings = [ You won ] ;
9647: LD_ADDR_OWVAR 48
9651: PUSH
9652: LD_STRING You won
9654: PUSH
9655: EMPTY
9656: LIST
9657: ST_TO_ADDR
9658: END
// every 100 trigger isEditor marked 400 do
9659: LD_OWVAR 84
9663: IFFALSE 9679
9665: GO 9667
9667: DISABLE
// Debug_Strings = [ You loss ] ;
9668: LD_ADDR_OWVAR 48
9672: PUSH
9673: LD_STRING You loss
9675: PUSH
9676: EMPTY
9677: LIST
9678: ST_TO_ADDR
9679: END
// every 100 marked 98 do var i , un ;
9680: GO 9682
9682: DISABLE
9683: LD_INT 0
9685: PPUSH
9686: PPUSH
// begin for i = 1 to side_positions do
9687: LD_ADDR_VAR 0 1
9691: PUSH
9692: DOUBLE
9693: LD_INT 1
9695: DEC
9696: ST_TO_ADDR
9697: LD_EXP 34
9701: PUSH
9702: FOR_TO
9703: IFFALSE 9790
// begin if side_positions [ i ] then
9705: LD_EXP 34
9709: PUSH
9710: LD_VAR 0 1
9714: ARRAY
9715: IFFALSE 9788
// if not HasPower ( i ) and not Defaited [ i ] then
9717: LD_VAR 0 1
9721: PPUSH
9722: CALL 9025 0 1
9726: NOT
9727: PUSH
9728: LD_LOC 16
9732: PUSH
9733: LD_VAR 0 1
9737: ARRAY
9738: NOT
9739: AND
9740: IFFALSE 9788
// begin Defaited = replace ( Defaited , i , true ) ;
9742: LD_ADDR_LOC 16
9746: PUSH
9747: LD_LOC 16
9751: PPUSH
9752: LD_VAR 0 1
9756: PPUSH
9757: LD_INT 1
9759: PPUSH
9760: CALL_OW 1
9764: ST_TO_ADDR
// if i = mp_player_side then
9765: LD_VAR 0 1
9769: PUSH
9770: LD_OWVAR 7
9774: EQUAL
9775: IFFALSE 9788
// begin Multiplayer_Loose_Message ;
9777: CALL_OW 521
// SetPlayerSpectator ( ) ;
9781: CALL_OW 572
// enable ( 400 ) ;
9785: LD_INT 400
9787: ENABLE_MARKED
// end ; end ; end ;
9788: GO 9702
9790: POP
9791: POP
// DidGameEnd ;
9792: CALL 9807 0 0
// if not GameEnded then
9796: LD_LOC 17
9800: NOT
9801: IFFALSE 9804
// enable ;
9803: ENABLE
// end ;
9804: PPOPN 2
9806: END
// function DidGameEnd ; var i , k , enemy ; begin
9807: LD_INT 0
9809: PPUSH
9810: PPUSH
9811: PPUSH
9812: PPUSH
// enemy = [ ] ;
9813: LD_ADDR_VAR 0 4
9817: PUSH
9818: EMPTY
9819: ST_TO_ADDR
// for i = 1 to side_positions do
9820: LD_ADDR_VAR 0 2
9824: PUSH
9825: DOUBLE
9826: LD_INT 1
9828: DEC
9829: ST_TO_ADDR
9830: LD_EXP 34
9834: PUSH
9835: FOR_TO
9836: IFFALSE 9930
// if not defaited [ i ] then
9838: LD_LOC 16
9842: PUSH
9843: LD_VAR 0 2
9847: ARRAY
9848: NOT
9849: IFFALSE 9928
// for k = 1 to side_positions do
9851: LD_ADDR_VAR 0 3
9855: PUSH
9856: DOUBLE
9857: LD_INT 1
9859: DEC
9860: ST_TO_ADDR
9861: LD_EXP 34
9865: PUSH
9866: FOR_TO
9867: IFFALSE 9926
// if not defaited [ k ] then
9869: LD_LOC 16
9873: PUSH
9874: LD_VAR 0 3
9878: ARRAY
9879: NOT
9880: IFFALSE 9924
// if not AlliedSides ( i , k ) then
9882: LD_VAR 0 2
9886: PPUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: CALL 9371 0 2
9896: NOT
9897: IFFALSE 9924
// enemy = enemy ^ [ i , k ] ;
9899: LD_ADDR_VAR 0 4
9903: PUSH
9904: LD_VAR 0 4
9908: PUSH
9909: LD_VAR 0 2
9913: PUSH
9914: LD_VAR 0 3
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: ADD
9923: ST_TO_ADDR
9924: GO 9866
9926: POP
9927: POP
9928: GO 9835
9930: POP
9931: POP
// if not enemy then
9932: LD_VAR 0 4
9936: NOT
9937: IFFALSE 9963
// begin GameEnded = true ;
9939: LD_ADDR_LOC 17
9943: PUSH
9944: LD_INT 1
9946: ST_TO_ADDR
// if not defaited [ mp_player_side ] then
9947: LD_LOC 16
9951: PUSH
9952: LD_OWVAR 7
9956: ARRAY
9957: NOT
9958: IFFALSE 9963
// enable ( 401 ) ;
9960: LD_INT 401
9962: ENABLE_MARKED
// end ; end ;
9963: LD_VAR 0 1
9967: RET
// export function MakeGameEnd ; begin
9968: LD_INT 0
9970: PPUSH
// SetPlayerSpectator ( ) ;
9971: CALL_OW 572
// wait ( 0 0$5 ) ;
9975: LD_INT 175
9977: PPUSH
9978: CALL_OW 67
// GameEnded = true ;
9982: LD_ADDR_LOC 17
9986: PUSH
9987: LD_INT 1
9989: ST_TO_ADDR
// end ;
9990: LD_VAR 0 1
9994: RET
// export function GetGameEnded ; begin
9995: LD_INT 0
9997: PPUSH
// result = GameEnded ;
9998: LD_ADDR_VAR 0 1
10002: PUSH
10003: LD_LOC 17
10007: ST_TO_ADDR
// end ; end_of_file
10008: LD_VAR 0 1
10012: RET
// export function SetMpTechs ( ) ; var side , i ; begin
10013: LD_INT 0
10015: PPUSH
10016: PPUSH
10017: PPUSH
// for side = 1 to 8 do
10018: LD_ADDR_VAR 0 2
10022: PUSH
10023: DOUBLE
10024: LD_INT 1
10026: DEC
10027: ST_TO_ADDR
10028: LD_INT 8
10030: PUSH
10031: FOR_TO
10032: IFFALSE 10153
// begin for i = 1 to 72 do
10034: LD_ADDR_VAR 0 3
10038: PUSH
10039: DOUBLE
10040: LD_INT 1
10042: DEC
10043: ST_TO_ADDR
10044: LD_INT 72
10046: PUSH
10047: FOR_TO
10048: IFFALSE 10079
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
10050: LD_VAR 0 3
10054: PPUSH
10055: LD_VAR 0 2
10059: PPUSH
10060: LD_INT 0
10062: PPUSH
10063: LD_VAR 0 3
10067: PPUSH
10068: CALL_OW 565
10072: PPUSH
10073: CALL_OW 322
10077: GO 10047
10079: POP
10080: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
10081: LD_INT 73
10083: PPUSH
10084: LD_VAR 0 2
10088: PPUSH
10089: LD_INT 0
10091: PPUSH
10092: LD_INT 25
10094: PPUSH
10095: CALL_OW 565
10099: PPUSH
10100: CALL_OW 322
// for i = 0 to 40 do
10104: LD_ADDR_VAR 0 3
10108: PUSH
10109: DOUBLE
10110: LD_INT 0
10112: DEC
10113: ST_TO_ADDR
10114: LD_INT 40
10116: PUSH
10117: FOR_TO
10118: IFFALSE 10149
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
10120: LD_VAR 0 3
10124: PPUSH
10125: LD_VAR 0 2
10129: PPUSH
10130: LD_INT 1
10132: PPUSH
10133: LD_VAR 0 3
10137: PPUSH
10138: CALL_OW 565
10142: PPUSH
10143: CALL_OW 324
10147: GO 10117
10149: POP
10150: POP
// end ;
10151: GO 10031
10153: POP
10154: POP
// end ;
10155: LD_VAR 0 1
10159: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
10160: LD_INT 0
10162: PPUSH
10163: PPUSH
10164: PPUSH
// for side = 1 to 8 do
10165: LD_ADDR_VAR 0 3
10169: PUSH
10170: DOUBLE
10171: LD_INT 1
10173: DEC
10174: ST_TO_ADDR
10175: LD_INT 8
10177: PUSH
10178: FOR_TO
10179: IFFALSE 14175
// begin for i = 1 to 73 do
10181: LD_ADDR_VAR 0 4
10185: PUSH
10186: DOUBLE
10187: LD_INT 1
10189: DEC
10190: ST_TO_ADDR
10191: LD_INT 73
10193: PUSH
10194: FOR_TO
10195: IFFALSE 10216
// SetTech ( i , side , state_disabled ) ;
10197: LD_VAR 0 4
10201: PPUSH
10202: LD_VAR 0 3
10206: PPUSH
10207: LD_INT 0
10209: PPUSH
10210: CALL_OW 322
10214: GO 10194
10216: POP
10217: POP
// for i = 0 to 40 do
10218: LD_ADDR_VAR 0 4
10222: PUSH
10223: DOUBLE
10224: LD_INT 0
10226: DEC
10227: ST_TO_ADDR
10228: LD_INT 40
10230: PUSH
10231: FOR_TO
10232: IFFALSE 10253
// SetRestrict ( i , side , false ) ;
10234: LD_VAR 0 4
10238: PPUSH
10239: LD_VAR 0 3
10243: PPUSH
10244: LD_INT 0
10246: PPUSH
10247: CALL_OW 324
10251: GO 10231
10253: POP
10254: POP
// case level of 1 :
10255: LD_VAR 0 1
10259: PUSH
10260: LD_INT 1
10262: DOUBLE
10263: EQUAL
10264: IFTRUE 10268
10266: GO 10421
10268: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10269: LD_INT 35
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10284: LD_INT 45
10286: PPUSH
10287: LD_VAR 0 3
10291: PPUSH
10292: LD_INT 1
10294: PPUSH
10295: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10299: LD_INT 46
10301: PPUSH
10302: LD_VAR 0 3
10306: PPUSH
10307: LD_INT 1
10309: PPUSH
10310: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10314: LD_INT 47
10316: PPUSH
10317: LD_VAR 0 3
10321: PPUSH
10322: LD_INT 1
10324: PPUSH
10325: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10329: LD_INT 0
10331: PPUSH
10332: LD_VAR 0 3
10336: PPUSH
10337: LD_INT 1
10339: PPUSH
10340: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10344: LD_INT 2
10346: PPUSH
10347: LD_VAR 0 3
10351: PPUSH
10352: LD_INT 1
10354: PPUSH
10355: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10359: LD_INT 4
10361: PPUSH
10362: LD_VAR 0 3
10366: PPUSH
10367: LD_INT 1
10369: PPUSH
10370: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10374: LD_INT 6
10376: PPUSH
10377: LD_VAR 0 3
10381: PPUSH
10382: LD_INT 1
10384: PPUSH
10385: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10389: LD_INT 29
10391: PPUSH
10392: LD_VAR 0 3
10396: PPUSH
10397: LD_INT 1
10399: PPUSH
10400: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10404: LD_INT 31
10406: PPUSH
10407: LD_VAR 0 3
10411: PPUSH
10412: LD_INT 1
10414: PPUSH
10415: CALL_OW 324
// end ; 2 :
10419: GO 14173
10421: LD_INT 2
10423: DOUBLE
10424: EQUAL
10425: IFTRUE 10429
10427: GO 10627
10429: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10430: LD_INT 35
10432: PPUSH
10433: LD_VAR 0 3
10437: PPUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10445: LD_INT 45
10447: PPUSH
10448: LD_VAR 0 3
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10460: LD_INT 46
10462: PPUSH
10463: LD_VAR 0 3
10467: PPUSH
10468: LD_INT 1
10470: PPUSH
10471: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10475: LD_INT 47
10477: PPUSH
10478: LD_VAR 0 3
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10490: LD_INT 1
10492: PPUSH
10493: LD_VAR 0 3
10497: PPUSH
10498: LD_INT 1
10500: PPUSH
10501: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10505: LD_INT 2
10507: PPUSH
10508: LD_VAR 0 3
10512: PPUSH
10513: LD_INT 1
10515: PPUSH
10516: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10520: LD_INT 11
10522: PPUSH
10523: LD_VAR 0 3
10527: PPUSH
10528: LD_INT 1
10530: PPUSH
10531: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10535: LD_INT 0
10537: PPUSH
10538: LD_VAR 0 3
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10550: LD_INT 2
10552: PPUSH
10553: LD_VAR 0 3
10557: PPUSH
10558: LD_INT 1
10560: PPUSH
10561: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10565: LD_INT 4
10567: PPUSH
10568: LD_VAR 0 3
10572: PPUSH
10573: LD_INT 1
10575: PPUSH
10576: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10580: LD_INT 6
10582: PPUSH
10583: LD_VAR 0 3
10587: PPUSH
10588: LD_INT 1
10590: PPUSH
10591: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10595: LD_INT 29
10597: PPUSH
10598: LD_VAR 0 3
10602: PPUSH
10603: LD_INT 1
10605: PPUSH
10606: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10610: LD_INT 31
10612: PPUSH
10613: LD_VAR 0 3
10617: PPUSH
10618: LD_INT 1
10620: PPUSH
10621: CALL_OW 324
// end ; 3 :
10625: GO 14173
10627: LD_INT 3
10629: DOUBLE
10630: EQUAL
10631: IFTRUE 10635
10633: GO 11088
10635: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10636: LD_INT 35
10638: PPUSH
10639: LD_VAR 0 3
10643: PPUSH
10644: LD_INT 1
10646: PPUSH
10647: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10651: LD_INT 45
10653: PPUSH
10654: LD_VAR 0 3
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10666: LD_INT 46
10668: PPUSH
10669: LD_VAR 0 3
10673: PPUSH
10674: LD_INT 1
10676: PPUSH
10677: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10681: LD_INT 47
10683: PPUSH
10684: LD_VAR 0 3
10688: PPUSH
10689: LD_INT 1
10691: PPUSH
10692: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10696: LD_INT 1
10698: PPUSH
10699: LD_VAR 0 3
10703: PPUSH
10704: LD_INT 1
10706: PPUSH
10707: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10711: LD_INT 2
10713: PPUSH
10714: LD_VAR 0 3
10718: PPUSH
10719: LD_INT 1
10721: PPUSH
10722: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10726: LD_INT 11
10728: PPUSH
10729: LD_VAR 0 3
10733: PPUSH
10734: LD_INT 1
10736: PPUSH
10737: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10741: LD_INT 48
10743: PPUSH
10744: LD_VAR 0 3
10748: PPUSH
10749: LD_INT 1
10751: PPUSH
10752: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10756: LD_INT 69
10758: PPUSH
10759: LD_VAR 0 3
10763: PPUSH
10764: LD_INT 1
10766: PPUSH
10767: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10771: LD_INT 39
10773: PPUSH
10774: LD_VAR 0 3
10778: PPUSH
10779: LD_INT 1
10781: PPUSH
10782: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10786: LD_INT 43
10788: PPUSH
10789: LD_VAR 0 3
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10801: LD_INT 51
10803: PPUSH
10804: LD_VAR 0 3
10808: PPUSH
10809: LD_INT 1
10811: PPUSH
10812: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10816: LD_INT 6
10818: PPUSH
10819: LD_VAR 0 3
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10831: LD_INT 0
10833: PPUSH
10834: LD_VAR 0 3
10838: PPUSH
10839: LD_INT 1
10841: PPUSH
10842: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10846: LD_INT 2
10848: PPUSH
10849: LD_VAR 0 3
10853: PPUSH
10854: LD_INT 1
10856: PPUSH
10857: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10861: LD_INT 3
10863: PPUSH
10864: LD_VAR 0 3
10868: PPUSH
10869: LD_INT 1
10871: PPUSH
10872: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10876: LD_INT 4
10878: PPUSH
10879: LD_VAR 0 3
10883: PPUSH
10884: LD_INT 1
10886: PPUSH
10887: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10891: LD_INT 6
10893: PPUSH
10894: LD_VAR 0 3
10898: PPUSH
10899: LD_INT 1
10901: PPUSH
10902: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10906: LD_INT 7
10908: PPUSH
10909: LD_VAR 0 3
10913: PPUSH
10914: LD_INT 1
10916: PPUSH
10917: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10921: LD_INT 8
10923: PPUSH
10924: LD_VAR 0 3
10928: PPUSH
10929: LD_INT 1
10931: PPUSH
10932: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10936: LD_INT 10
10938: PPUSH
10939: LD_VAR 0 3
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10951: LD_INT 15
10953: PPUSH
10954: LD_VAR 0 3
10958: PPUSH
10959: LD_INT 1
10961: PPUSH
10962: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10966: LD_INT 16
10968: PPUSH
10969: LD_VAR 0 3
10973: PPUSH
10974: LD_INT 1
10976: PPUSH
10977: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10981: LD_INT 17
10983: PPUSH
10984: LD_VAR 0 3
10988: PPUSH
10989: LD_INT 1
10991: PPUSH
10992: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10996: LD_INT 20
10998: PPUSH
10999: LD_VAR 0 3
11003: PPUSH
11004: LD_INT 1
11006: PPUSH
11007: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11011: LD_INT 26
11013: PPUSH
11014: LD_VAR 0 3
11018: PPUSH
11019: LD_INT 1
11021: PPUSH
11022: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11026: LD_INT 27
11028: PPUSH
11029: LD_VAR 0 3
11033: PPUSH
11034: LD_INT 1
11036: PPUSH
11037: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11041: LD_INT 29
11043: PPUSH
11044: LD_VAR 0 3
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11056: LD_INT 31
11058: PPUSH
11059: LD_VAR 0 3
11063: PPUSH
11064: LD_INT 1
11066: PPUSH
11067: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
11071: LD_INT 32
11073: PPUSH
11074: LD_VAR 0 3
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 324
// end ; 4 :
11086: GO 14173
11088: LD_INT 4
11090: DOUBLE
11091: EQUAL
11092: IFTRUE 11096
11094: GO 12044
11096: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11097: LD_INT 35
11099: PPUSH
11100: LD_VAR 0 3
11104: PPUSH
11105: LD_INT 1
11107: PPUSH
11108: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11112: LD_INT 45
11114: PPUSH
11115: LD_VAR 0 3
11119: PPUSH
11120: LD_INT 1
11122: PPUSH
11123: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11127: LD_INT 46
11129: PPUSH
11130: LD_VAR 0 3
11134: PPUSH
11135: LD_INT 1
11137: PPUSH
11138: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11142: LD_INT 47
11144: PPUSH
11145: LD_VAR 0 3
11149: PPUSH
11150: LD_INT 1
11152: PPUSH
11153: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11157: LD_INT 1
11159: PPUSH
11160: LD_VAR 0 3
11164: PPUSH
11165: LD_INT 1
11167: PPUSH
11168: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11172: LD_INT 2
11174: PPUSH
11175: LD_VAR 0 3
11179: PPUSH
11180: LD_INT 1
11182: PPUSH
11183: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11187: LD_INT 11
11189: PPUSH
11190: LD_VAR 0 3
11194: PPUSH
11195: LD_INT 1
11197: PPUSH
11198: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11202: LD_INT 20
11204: PPUSH
11205: LD_VAR 0 3
11209: PPUSH
11210: LD_INT 1
11212: PPUSH
11213: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11217: LD_INT 48
11219: PPUSH
11220: LD_VAR 0 3
11224: PPUSH
11225: LD_INT 1
11227: PPUSH
11228: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11232: LD_INT 49
11234: PPUSH
11235: LD_VAR 0 3
11239: PPUSH
11240: LD_INT 1
11242: PPUSH
11243: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11247: LD_INT 69
11249: PPUSH
11250: LD_VAR 0 3
11254: PPUSH
11255: LD_INT 1
11257: PPUSH
11258: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11262: LD_INT 39
11264: PPUSH
11265: LD_VAR 0 3
11269: PPUSH
11270: LD_INT 1
11272: PPUSH
11273: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11277: LD_INT 34
11279: PPUSH
11280: LD_VAR 0 3
11284: PPUSH
11285: LD_INT 1
11287: PPUSH
11288: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11292: LD_INT 42
11294: PPUSH
11295: LD_VAR 0 3
11299: PPUSH
11300: LD_INT 1
11302: PPUSH
11303: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11307: LD_INT 44
11309: PPUSH
11310: LD_VAR 0 3
11314: PPUSH
11315: LD_INT 1
11317: PPUSH
11318: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11322: LD_INT 41
11324: PPUSH
11325: LD_VAR 0 3
11329: PPUSH
11330: LD_INT 1
11332: PPUSH
11333: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11337: LD_INT 43
11339: PPUSH
11340: LD_VAR 0 3
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11352: LD_INT 70
11354: PPUSH
11355: LD_VAR 0 3
11359: PPUSH
11360: LD_INT 1
11362: PPUSH
11363: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11367: LD_INT 51
11369: PPUSH
11370: LD_VAR 0 3
11374: PPUSH
11375: LD_INT 1
11377: PPUSH
11378: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11382: LD_INT 52
11384: PPUSH
11385: LD_VAR 0 3
11389: PPUSH
11390: LD_INT 1
11392: PPUSH
11393: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11397: LD_INT 6
11399: PPUSH
11400: LD_VAR 0 3
11404: PPUSH
11405: LD_INT 1
11407: PPUSH
11408: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11412: LD_INT 15
11414: PPUSH
11415: LD_VAR 0 3
11419: PPUSH
11420: LD_INT 1
11422: PPUSH
11423: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11427: LD_INT 7
11429: PPUSH
11430: LD_VAR 0 3
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11442: LD_INT 12
11444: PPUSH
11445: LD_VAR 0 3
11449: PPUSH
11450: LD_INT 1
11452: PPUSH
11453: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11457: LD_INT 18
11459: PPUSH
11460: LD_VAR 0 3
11464: PPUSH
11465: LD_INT 1
11467: PPUSH
11468: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11472: LD_INT 60
11474: PPUSH
11475: LD_VAR 0 3
11479: PPUSH
11480: LD_INT 1
11482: PPUSH
11483: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11487: LD_INT 9
11489: PPUSH
11490: LD_VAR 0 3
11494: PPUSH
11495: LD_INT 1
11497: PPUSH
11498: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11502: LD_INT 30
11504: PPUSH
11505: LD_VAR 0 3
11509: PPUSH
11510: LD_INT 1
11512: PPUSH
11513: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11517: LD_INT 37
11519: PPUSH
11520: LD_VAR 0 3
11524: PPUSH
11525: LD_INT 1
11527: PPUSH
11528: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11532: LD_INT 5
11534: PPUSH
11535: LD_VAR 0 3
11539: PPUSH
11540: LD_INT 1
11542: PPUSH
11543: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11547: LD_INT 66
11549: PPUSH
11550: LD_VAR 0 3
11554: PPUSH
11555: LD_INT 1
11557: PPUSH
11558: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11562: LD_INT 21
11564: PPUSH
11565: LD_VAR 0 3
11569: PPUSH
11570: LD_INT 1
11572: PPUSH
11573: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11577: LD_INT 22
11579: PPUSH
11580: LD_VAR 0 3
11584: PPUSH
11585: LD_INT 1
11587: PPUSH
11588: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11592: LD_INT 54
11594: PPUSH
11595: LD_VAR 0 3
11599: PPUSH
11600: LD_INT 1
11602: PPUSH
11603: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11607: LD_INT 0
11609: PPUSH
11610: LD_VAR 0 3
11614: PPUSH
11615: LD_INT 1
11617: PPUSH
11618: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11622: LD_INT 1
11624: PPUSH
11625: LD_VAR 0 3
11629: PPUSH
11630: LD_INT 1
11632: PPUSH
11633: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11637: LD_INT 2
11639: PPUSH
11640: LD_VAR 0 3
11644: PPUSH
11645: LD_INT 1
11647: PPUSH
11648: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11652: LD_INT 3
11654: PPUSH
11655: LD_VAR 0 3
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11667: LD_INT 4
11669: PPUSH
11670: LD_VAR 0 3
11674: PPUSH
11675: LD_INT 1
11677: PPUSH
11678: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11682: LD_INT 5
11684: PPUSH
11685: LD_VAR 0 3
11689: PPUSH
11690: LD_INT 1
11692: PPUSH
11693: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11697: LD_INT 6
11699: PPUSH
11700: LD_VAR 0 3
11704: PPUSH
11705: LD_INT 1
11707: PPUSH
11708: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11712: LD_INT 7
11714: PPUSH
11715: LD_VAR 0 3
11719: PPUSH
11720: LD_INT 1
11722: PPUSH
11723: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11727: LD_INT 8
11729: PPUSH
11730: LD_VAR 0 3
11734: PPUSH
11735: LD_INT 1
11737: PPUSH
11738: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11742: LD_INT 10
11744: PPUSH
11745: LD_VAR 0 3
11749: PPUSH
11750: LD_INT 1
11752: PPUSH
11753: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11757: LD_INT 11
11759: PPUSH
11760: LD_VAR 0 3
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11772: LD_INT 12
11774: PPUSH
11775: LD_VAR 0 3
11779: PPUSH
11780: LD_INT 1
11782: PPUSH
11783: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11787: LD_INT 13
11789: PPUSH
11790: LD_VAR 0 3
11794: PPUSH
11795: LD_INT 1
11797: PPUSH
11798: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11802: LD_INT 14
11804: PPUSH
11805: LD_VAR 0 3
11809: PPUSH
11810: LD_INT 1
11812: PPUSH
11813: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11817: LD_INT 15
11819: PPUSH
11820: LD_VAR 0 3
11824: PPUSH
11825: LD_INT 1
11827: PPUSH
11828: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11832: LD_INT 16
11834: PPUSH
11835: LD_VAR 0 3
11839: PPUSH
11840: LD_INT 1
11842: PPUSH
11843: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11847: LD_INT 17
11849: PPUSH
11850: LD_VAR 0 3
11854: PPUSH
11855: LD_INT 1
11857: PPUSH
11858: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11862: LD_INT 19
11864: PPUSH
11865: LD_VAR 0 3
11869: PPUSH
11870: LD_INT 1
11872: PPUSH
11873: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11877: LD_INT 20
11879: PPUSH
11880: LD_VAR 0 3
11884: PPUSH
11885: LD_INT 1
11887: PPUSH
11888: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11892: LD_INT 21
11894: PPUSH
11895: LD_VAR 0 3
11899: PPUSH
11900: LD_INT 1
11902: PPUSH
11903: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
11907: LD_INT 23
11909: PPUSH
11910: LD_VAR 0 3
11914: PPUSH
11915: LD_INT 1
11917: PPUSH
11918: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
11922: LD_INT 26
11924: PPUSH
11925: LD_VAR 0 3
11929: PPUSH
11930: LD_INT 1
11932: PPUSH
11933: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
11937: LD_INT 27
11939: PPUSH
11940: LD_VAR 0 3
11944: PPUSH
11945: LD_INT 1
11947: PPUSH
11948: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
11952: LD_INT 28
11954: PPUSH
11955: LD_VAR 0 3
11959: PPUSH
11960: LD_INT 1
11962: PPUSH
11963: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
11967: LD_INT 29
11969: PPUSH
11970: LD_VAR 0 3
11974: PPUSH
11975: LD_INT 1
11977: PPUSH
11978: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
11982: LD_INT 30
11984: PPUSH
11985: LD_VAR 0 3
11989: PPUSH
11990: LD_INT 1
11992: PPUSH
11993: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
11997: LD_INT 31
11999: PPUSH
12000: LD_VAR 0 3
12004: PPUSH
12005: LD_INT 1
12007: PPUSH
12008: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12012: LD_INT 32
12014: PPUSH
12015: LD_VAR 0 3
12019: PPUSH
12020: LD_INT 1
12022: PPUSH
12023: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12027: LD_INT 36
12029: PPUSH
12030: LD_VAR 0 3
12034: PPUSH
12035: LD_INT 1
12037: PPUSH
12038: CALL_OW 324
// end ; 5 :
12042: GO 14173
12044: LD_INT 5
12046: DOUBLE
12047: EQUAL
12048: IFTRUE 12052
12050: GO 13165
12052: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12053: LD_INT 35
12055: PPUSH
12056: LD_VAR 0 3
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12068: LD_INT 45
12070: PPUSH
12071: LD_VAR 0 3
12075: PPUSH
12076: LD_INT 1
12078: PPUSH
12079: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12083: LD_INT 46
12085: PPUSH
12086: LD_VAR 0 3
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12098: LD_INT 47
12100: PPUSH
12101: LD_VAR 0 3
12105: PPUSH
12106: LD_INT 1
12108: PPUSH
12109: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12113: LD_INT 1
12115: PPUSH
12116: LD_VAR 0 3
12120: PPUSH
12121: LD_INT 1
12123: PPUSH
12124: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12128: LD_INT 2
12130: PPUSH
12131: LD_VAR 0 3
12135: PPUSH
12136: LD_INT 1
12138: PPUSH
12139: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12143: LD_INT 11
12145: PPUSH
12146: LD_VAR 0 3
12150: PPUSH
12151: LD_INT 1
12153: PPUSH
12154: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12158: LD_INT 20
12160: PPUSH
12161: LD_VAR 0 3
12165: PPUSH
12166: LD_INT 1
12168: PPUSH
12169: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12173: LD_INT 48
12175: PPUSH
12176: LD_VAR 0 3
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12188: LD_INT 49
12190: PPUSH
12191: LD_VAR 0 3
12195: PPUSH
12196: LD_INT 1
12198: PPUSH
12199: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12203: LD_INT 69
12205: PPUSH
12206: LD_VAR 0 3
12210: PPUSH
12211: LD_INT 1
12213: PPUSH
12214: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12218: LD_INT 39
12220: PPUSH
12221: LD_VAR 0 3
12225: PPUSH
12226: LD_INT 1
12228: PPUSH
12229: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12233: LD_INT 34
12235: PPUSH
12236: LD_VAR 0 3
12240: PPUSH
12241: LD_INT 1
12243: PPUSH
12244: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12248: LD_INT 42
12250: PPUSH
12251: LD_VAR 0 3
12255: PPUSH
12256: LD_INT 1
12258: PPUSH
12259: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12263: LD_INT 44
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: LD_INT 1
12273: PPUSH
12274: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12278: LD_INT 41
12280: PPUSH
12281: LD_VAR 0 3
12285: PPUSH
12286: LD_INT 1
12288: PPUSH
12289: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12293: LD_INT 40
12295: PPUSH
12296: LD_VAR 0 3
12300: PPUSH
12301: LD_INT 1
12303: PPUSH
12304: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12308: LD_INT 43
12310: PPUSH
12311: LD_VAR 0 3
12315: PPUSH
12316: LD_INT 1
12318: PPUSH
12319: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12323: LD_INT 70
12325: PPUSH
12326: LD_VAR 0 3
12330: PPUSH
12331: LD_INT 1
12333: PPUSH
12334: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12338: LD_INT 51
12340: PPUSH
12341: LD_VAR 0 3
12345: PPUSH
12346: LD_INT 1
12348: PPUSH
12349: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12353: LD_INT 52
12355: PPUSH
12356: LD_VAR 0 3
12360: PPUSH
12361: LD_INT 1
12363: PPUSH
12364: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12368: LD_INT 6
12370: PPUSH
12371: LD_VAR 0 3
12375: PPUSH
12376: LD_INT 1
12378: PPUSH
12379: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12383: LD_INT 15
12385: PPUSH
12386: LD_VAR 0 3
12390: PPUSH
12391: LD_INT 1
12393: PPUSH
12394: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12398: LD_INT 7
12400: PPUSH
12401: LD_VAR 0 3
12405: PPUSH
12406: LD_INT 1
12408: PPUSH
12409: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12413: LD_INT 12
12415: PPUSH
12416: LD_VAR 0 3
12420: PPUSH
12421: LD_INT 1
12423: PPUSH
12424: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12428: LD_INT 17
12430: PPUSH
12431: LD_VAR 0 3
12435: PPUSH
12436: LD_INT 1
12438: PPUSH
12439: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12443: LD_INT 18
12445: PPUSH
12446: LD_VAR 0 3
12450: PPUSH
12451: LD_INT 1
12453: PPUSH
12454: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12458: LD_INT 60
12460: PPUSH
12461: LD_VAR 0 3
12465: PPUSH
12466: LD_INT 1
12468: PPUSH
12469: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12473: LD_INT 32
12475: PPUSH
12476: LD_VAR 0 3
12480: PPUSH
12481: LD_INT 1
12483: PPUSH
12484: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12488: LD_INT 9
12490: PPUSH
12491: LD_VAR 0 3
12495: PPUSH
12496: LD_INT 1
12498: PPUSH
12499: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12503: LD_INT 57
12505: PPUSH
12506: LD_VAR 0 3
12510: PPUSH
12511: LD_INT 1
12513: PPUSH
12514: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12518: LD_INT 30
12520: PPUSH
12521: LD_VAR 0 3
12525: PPUSH
12526: LD_INT 1
12528: PPUSH
12529: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12533: LD_INT 37
12535: PPUSH
12536: LD_VAR 0 3
12540: PPUSH
12541: LD_INT 1
12543: PPUSH
12544: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12548: LD_INT 63
12550: PPUSH
12551: LD_VAR 0 3
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12563: LD_INT 3
12565: PPUSH
12566: LD_VAR 0 3
12570: PPUSH
12571: LD_INT 1
12573: PPUSH
12574: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12578: LD_INT 4
12580: PPUSH
12581: LD_VAR 0 3
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12593: LD_INT 5
12595: PPUSH
12596: LD_VAR 0 3
12600: PPUSH
12601: LD_INT 1
12603: PPUSH
12604: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12608: LD_INT 66
12610: PPUSH
12611: LD_VAR 0 3
12615: PPUSH
12616: LD_INT 1
12618: PPUSH
12619: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12623: LD_INT 21
12625: PPUSH
12626: LD_VAR 0 3
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12638: LD_INT 22
12640: PPUSH
12641: LD_VAR 0 3
12645: PPUSH
12646: LD_INT 1
12648: PPUSH
12649: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12653: LD_INT 19
12655: PPUSH
12656: LD_VAR 0 3
12660: PPUSH
12661: LD_INT 1
12663: PPUSH
12664: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
12668: LD_INT 54
12670: PPUSH
12671: LD_VAR 0 3
12675: PPUSH
12676: LD_INT 1
12678: PPUSH
12679: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
12683: LD_INT 55
12685: PPUSH
12686: LD_VAR 0 3
12690: PPUSH
12691: LD_INT 1
12693: PPUSH
12694: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
12698: LD_INT 0
12700: PPUSH
12701: LD_VAR 0 3
12705: PPUSH
12706: LD_INT 1
12708: PPUSH
12709: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
12713: LD_INT 1
12715: PPUSH
12716: LD_VAR 0 3
12720: PPUSH
12721: LD_INT 1
12723: PPUSH
12724: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
12728: LD_INT 2
12730: PPUSH
12731: LD_VAR 0 3
12735: PPUSH
12736: LD_INT 1
12738: PPUSH
12739: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
12743: LD_INT 3
12745: PPUSH
12746: LD_VAR 0 3
12750: PPUSH
12751: LD_INT 1
12753: PPUSH
12754: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
12758: LD_INT 4
12760: PPUSH
12761: LD_VAR 0 3
12765: PPUSH
12766: LD_INT 1
12768: PPUSH
12769: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
12773: LD_INT 5
12775: PPUSH
12776: LD_VAR 0 3
12780: PPUSH
12781: LD_INT 1
12783: PPUSH
12784: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
12788: LD_INT 6
12790: PPUSH
12791: LD_VAR 0 3
12795: PPUSH
12796: LD_INT 1
12798: PPUSH
12799: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
12803: LD_INT 7
12805: PPUSH
12806: LD_VAR 0 3
12810: PPUSH
12811: LD_INT 1
12813: PPUSH
12814: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
12818: LD_INT 8
12820: PPUSH
12821: LD_VAR 0 3
12825: PPUSH
12826: LD_INT 1
12828: PPUSH
12829: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
12833: LD_INT 10
12835: PPUSH
12836: LD_VAR 0 3
12840: PPUSH
12841: LD_INT 1
12843: PPUSH
12844: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
12848: LD_INT 11
12850: PPUSH
12851: LD_VAR 0 3
12855: PPUSH
12856: LD_INT 1
12858: PPUSH
12859: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
12863: LD_INT 12
12865: PPUSH
12866: LD_VAR 0 3
12870: PPUSH
12871: LD_INT 1
12873: PPUSH
12874: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
12878: LD_INT 13
12880: PPUSH
12881: LD_VAR 0 3
12885: PPUSH
12886: LD_INT 1
12888: PPUSH
12889: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
12893: LD_INT 14
12895: PPUSH
12896: LD_VAR 0 3
12900: PPUSH
12901: LD_INT 1
12903: PPUSH
12904: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
12908: LD_INT 15
12910: PPUSH
12911: LD_VAR 0 3
12915: PPUSH
12916: LD_INT 1
12918: PPUSH
12919: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
12923: LD_INT 16
12925: PPUSH
12926: LD_VAR 0 3
12930: PPUSH
12931: LD_INT 1
12933: PPUSH
12934: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
12938: LD_INT 17
12940: PPUSH
12941: LD_VAR 0 3
12945: PPUSH
12946: LD_INT 1
12948: PPUSH
12949: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
12953: LD_INT 18
12955: PPUSH
12956: LD_VAR 0 3
12960: PPUSH
12961: LD_INT 1
12963: PPUSH
12964: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
12968: LD_INT 19
12970: PPUSH
12971: LD_VAR 0 3
12975: PPUSH
12976: LD_INT 1
12978: PPUSH
12979: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
12983: LD_INT 20
12985: PPUSH
12986: LD_VAR 0 3
12990: PPUSH
12991: LD_INT 1
12993: PPUSH
12994: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
12998: LD_INT 21
13000: PPUSH
13001: LD_VAR 0 3
13005: PPUSH
13006: LD_INT 1
13008: PPUSH
13009: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
13013: LD_INT 23
13015: PPUSH
13016: LD_VAR 0 3
13020: PPUSH
13021: LD_INT 1
13023: PPUSH
13024: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
13028: LD_INT 26
13030: PPUSH
13031: LD_VAR 0 3
13035: PPUSH
13036: LD_INT 1
13038: PPUSH
13039: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
13043: LD_INT 27
13045: PPUSH
13046: LD_VAR 0 3
13050: PPUSH
13051: LD_INT 1
13053: PPUSH
13054: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
13058: LD_INT 28
13060: PPUSH
13061: LD_VAR 0 3
13065: PPUSH
13066: LD_INT 1
13068: PPUSH
13069: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
13073: LD_INT 29
13075: PPUSH
13076: LD_VAR 0 3
13080: PPUSH
13081: LD_INT 1
13083: PPUSH
13084: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
13088: LD_INT 30
13090: PPUSH
13091: LD_VAR 0 3
13095: PPUSH
13096: LD_INT 1
13098: PPUSH
13099: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
13103: LD_INT 31
13105: PPUSH
13106: LD_VAR 0 3
13110: PPUSH
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
13118: LD_INT 32
13120: PPUSH
13121: LD_VAR 0 3
13125: PPUSH
13126: LD_INT 1
13128: PPUSH
13129: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
13133: LD_INT 33
13135: PPUSH
13136: LD_VAR 0 3
13140: PPUSH
13141: LD_INT 1
13143: PPUSH
13144: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
13148: LD_INT 36
13150: PPUSH
13151: LD_VAR 0 3
13155: PPUSH
13156: LD_INT 1
13158: PPUSH
13159: CALL_OW 324
// end ; 6 :
13163: GO 14173
13165: LD_INT 6
13167: DOUBLE
13168: EQUAL
13169: IFTRUE 13173
13171: GO 14098
13173: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
13174: LD_INT 35
13176: PPUSH
13177: LD_VAR 0 3
13181: PPUSH
13182: LD_INT 1
13184: PPUSH
13185: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
13189: LD_INT 45
13191: PPUSH
13192: LD_VAR 0 3
13196: PPUSH
13197: LD_INT 1
13199: PPUSH
13200: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
13204: LD_INT 46
13206: PPUSH
13207: LD_VAR 0 3
13211: PPUSH
13212: LD_INT 1
13214: PPUSH
13215: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
13219: LD_INT 47
13221: PPUSH
13222: LD_VAR 0 3
13226: PPUSH
13227: LD_INT 1
13229: PPUSH
13230: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
13234: LD_INT 1
13236: PPUSH
13237: LD_VAR 0 3
13241: PPUSH
13242: LD_INT 1
13244: PPUSH
13245: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
13249: LD_INT 2
13251: PPUSH
13252: LD_VAR 0 3
13256: PPUSH
13257: LD_INT 1
13259: PPUSH
13260: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
13264: LD_INT 11
13266: PPUSH
13267: LD_VAR 0 3
13271: PPUSH
13272: LD_INT 1
13274: PPUSH
13275: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
13279: LD_INT 20
13281: PPUSH
13282: LD_VAR 0 3
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
13294: LD_INT 48
13296: PPUSH
13297: LD_VAR 0 3
13301: PPUSH
13302: LD_INT 1
13304: PPUSH
13305: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
13309: LD_INT 49
13311: PPUSH
13312: LD_VAR 0 3
13316: PPUSH
13317: LD_INT 1
13319: PPUSH
13320: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
13324: LD_INT 50
13326: PPUSH
13327: LD_VAR 0 3
13331: PPUSH
13332: LD_INT 1
13334: PPUSH
13335: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
13339: LD_INT 69
13341: PPUSH
13342: LD_VAR 0 3
13346: PPUSH
13347: LD_INT 1
13349: PPUSH
13350: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
13354: LD_INT 39
13356: PPUSH
13357: LD_VAR 0 3
13361: PPUSH
13362: LD_INT 1
13364: PPUSH
13365: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
13369: LD_INT 34
13371: PPUSH
13372: LD_VAR 0 3
13376: PPUSH
13377: LD_INT 1
13379: PPUSH
13380: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
13384: LD_INT 42
13386: PPUSH
13387: LD_VAR 0 3
13391: PPUSH
13392: LD_INT 1
13394: PPUSH
13395: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
13399: LD_INT 44
13401: PPUSH
13402: LD_VAR 0 3
13406: PPUSH
13407: LD_INT 1
13409: PPUSH
13410: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
13414: LD_INT 41
13416: PPUSH
13417: LD_VAR 0 3
13421: PPUSH
13422: LD_INT 1
13424: PPUSH
13425: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
13429: LD_INT 13
13431: PPUSH
13432: LD_VAR 0 3
13436: PPUSH
13437: LD_INT 1
13439: PPUSH
13440: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
13444: LD_INT 40
13446: PPUSH
13447: LD_VAR 0 3
13451: PPUSH
13452: LD_INT 1
13454: PPUSH
13455: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
13459: LD_INT 43
13461: PPUSH
13462: LD_VAR 0 3
13466: PPUSH
13467: LD_INT 1
13469: PPUSH
13470: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
13474: LD_INT 70
13476: PPUSH
13477: LD_VAR 0 3
13481: PPUSH
13482: LD_INT 1
13484: PPUSH
13485: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
13489: LD_INT 23
13491: PPUSH
13492: LD_VAR 0 3
13496: PPUSH
13497: LD_INT 1
13499: PPUSH
13500: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
13504: LD_INT 51
13506: PPUSH
13507: LD_VAR 0 3
13511: PPUSH
13512: LD_INT 1
13514: PPUSH
13515: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
13519: LD_INT 52
13521: PPUSH
13522: LD_VAR 0 3
13526: PPUSH
13527: LD_INT 1
13529: PPUSH
13530: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
13534: LD_INT 6
13536: PPUSH
13537: LD_VAR 0 3
13541: PPUSH
13542: LD_INT 1
13544: PPUSH
13545: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
13549: LD_INT 15
13551: PPUSH
13552: LD_VAR 0 3
13556: PPUSH
13557: LD_INT 1
13559: PPUSH
13560: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
13564: LD_INT 7
13566: PPUSH
13567: LD_VAR 0 3
13571: PPUSH
13572: LD_INT 1
13574: PPUSH
13575: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
13579: LD_INT 12
13581: PPUSH
13582: LD_VAR 0 3
13586: PPUSH
13587: LD_INT 1
13589: PPUSH
13590: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
13594: LD_INT 10
13596: PPUSH
13597: LD_VAR 0 3
13601: PPUSH
13602: LD_INT 1
13604: PPUSH
13605: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
13609: LD_INT 17
13611: PPUSH
13612: LD_VAR 0 3
13616: PPUSH
13617: LD_INT 1
13619: PPUSH
13620: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
13624: LD_INT 18
13626: PPUSH
13627: LD_VAR 0 3
13631: PPUSH
13632: LD_INT 1
13634: PPUSH
13635: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
13639: LD_INT 60
13641: PPUSH
13642: LD_VAR 0 3
13646: PPUSH
13647: LD_INT 1
13649: PPUSH
13650: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
13654: LD_INT 61
13656: PPUSH
13657: LD_VAR 0 3
13661: PPUSH
13662: LD_INT 1
13664: PPUSH
13665: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
13669: LD_INT 32
13671: PPUSH
13672: LD_VAR 0 3
13676: PPUSH
13677: LD_INT 1
13679: PPUSH
13680: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
13684: LD_INT 27
13686: PPUSH
13687: LD_VAR 0 3
13691: PPUSH
13692: LD_INT 1
13694: PPUSH
13695: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
13699: LD_INT 36
13701: PPUSH
13702: LD_VAR 0 3
13706: PPUSH
13707: LD_INT 1
13709: PPUSH
13710: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
13714: LD_INT 33
13716: PPUSH
13717: LD_VAR 0 3
13721: PPUSH
13722: LD_INT 1
13724: PPUSH
13725: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
13729: LD_INT 9
13731: PPUSH
13732: LD_VAR 0 3
13736: PPUSH
13737: LD_INT 1
13739: PPUSH
13740: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
13744: LD_INT 38
13746: PPUSH
13747: LD_VAR 0 3
13751: PPUSH
13752: LD_INT 1
13754: PPUSH
13755: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
13759: LD_INT 57
13761: PPUSH
13762: LD_VAR 0 3
13766: PPUSH
13767: LD_INT 1
13769: PPUSH
13770: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
13774: LD_INT 58
13776: PPUSH
13777: LD_VAR 0 3
13781: PPUSH
13782: LD_INT 1
13784: PPUSH
13785: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
13789: LD_INT 28
13791: PPUSH
13792: LD_VAR 0 3
13796: PPUSH
13797: LD_INT 1
13799: PPUSH
13800: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
13804: LD_INT 29
13806: PPUSH
13807: LD_VAR 0 3
13811: PPUSH
13812: LD_INT 1
13814: PPUSH
13815: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
13819: LD_INT 30
13821: PPUSH
13822: LD_VAR 0 3
13826: PPUSH
13827: LD_INT 1
13829: PPUSH
13830: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
13834: LD_INT 37
13836: PPUSH
13837: LD_VAR 0 3
13841: PPUSH
13842: LD_INT 1
13844: PPUSH
13845: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
13849: LD_INT 63
13851: PPUSH
13852: LD_VAR 0 3
13856: PPUSH
13857: LD_INT 1
13859: PPUSH
13860: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
13864: LD_INT 64
13866: PPUSH
13867: LD_VAR 0 3
13871: PPUSH
13872: LD_INT 1
13874: PPUSH
13875: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
13879: LD_INT 3
13881: PPUSH
13882: LD_VAR 0 3
13886: PPUSH
13887: LD_INT 1
13889: PPUSH
13890: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
13894: LD_INT 4
13896: PPUSH
13897: LD_VAR 0 3
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
13909: LD_INT 5
13911: PPUSH
13912: LD_VAR 0 3
13916: PPUSH
13917: LD_INT 1
13919: PPUSH
13920: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
13924: LD_INT 8
13926: PPUSH
13927: LD_VAR 0 3
13931: PPUSH
13932: LD_INT 1
13934: PPUSH
13935: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
13939: LD_INT 66
13941: PPUSH
13942: LD_VAR 0 3
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
13954: LD_INT 67
13956: PPUSH
13957: LD_VAR 0 3
13961: PPUSH
13962: LD_INT 1
13964: PPUSH
13965: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
13969: LD_INT 21
13971: PPUSH
13972: LD_VAR 0 3
13976: PPUSH
13977: LD_INT 1
13979: PPUSH
13980: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
13984: LD_INT 22
13986: PPUSH
13987: LD_VAR 0 3
13991: PPUSH
13992: LD_INT 1
13994: PPUSH
13995: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
13999: LD_INT 19
14001: PPUSH
14002: LD_VAR 0 3
14006: PPUSH
14007: LD_INT 1
14009: PPUSH
14010: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
14014: LD_INT 26
14016: PPUSH
14017: LD_VAR 0 3
14021: PPUSH
14022: LD_INT 1
14024: PPUSH
14025: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
14029: LD_INT 54
14031: PPUSH
14032: LD_VAR 0 3
14036: PPUSH
14037: LD_INT 1
14039: PPUSH
14040: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
14044: LD_INT 55
14046: PPUSH
14047: LD_VAR 0 3
14051: PPUSH
14052: LD_INT 1
14054: PPUSH
14055: CALL_OW 322
// for i = 0 to 39 do
14059: LD_ADDR_VAR 0 4
14063: PUSH
14064: DOUBLE
14065: LD_INT 0
14067: DEC
14068: ST_TO_ADDR
14069: LD_INT 39
14071: PUSH
14072: FOR_TO
14073: IFFALSE 14094
// SetRestrict ( i , side , true ) ;
14075: LD_VAR 0 4
14079: PPUSH
14080: LD_VAR 0 3
14084: PPUSH
14085: LD_INT 1
14087: PPUSH
14088: CALL_OW 324
14092: GO 14072
14094: POP
14095: POP
// end ; else
14096: GO 14173
14098: POP
// begin for i = 1 to 73 do
14099: LD_ADDR_VAR 0 4
14103: PUSH
14104: DOUBLE
14105: LD_INT 1
14107: DEC
14108: ST_TO_ADDR
14109: LD_INT 73
14111: PUSH
14112: FOR_TO
14113: IFFALSE 14134
// SetTech ( i , side , state_enabled ) ;
14115: LD_VAR 0 4
14119: PPUSH
14120: LD_VAR 0 3
14124: PPUSH
14125: LD_INT 1
14127: PPUSH
14128: CALL_OW 322
14132: GO 14112
14134: POP
14135: POP
// for i = 0 to 39 do
14136: LD_ADDR_VAR 0 4
14140: PUSH
14141: DOUBLE
14142: LD_INT 0
14144: DEC
14145: ST_TO_ADDR
14146: LD_INT 39
14148: PUSH
14149: FOR_TO
14150: IFFALSE 14171
// SetRestrict ( i , side , true ) ;
14152: LD_VAR 0 4
14156: PPUSH
14157: LD_VAR 0 3
14161: PPUSH
14162: LD_INT 1
14164: PPUSH
14165: CALL_OW 324
14169: GO 14149
14171: POP
14172: POP
// end ; end ; end ;
14173: GO 10178
14175: POP
14176: POP
// end ; end_of_file
14177: LD_VAR 0 2
14181: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , bases ; begin
14182: LD_INT 0
14184: PPUSH
14185: PPUSH
14186: PPUSH
14187: PPUSH
14188: PPUSH
14189: PPUSH
14190: PPUSH
14191: PPUSH
// for i := 1 to 8 do
14192: LD_ADDR_VAR 0 2
14196: PUSH
14197: DOUBLE
14198: LD_INT 1
14200: DEC
14201: ST_TO_ADDR
14202: LD_INT 8
14204: PUSH
14205: FOR_TO
14206: IFFALSE 14682
// begin if Side_Positions [ i ] then
14208: LD_EXP 34
14212: PUSH
14213: LD_VAR 0 2
14217: ARRAY
14218: IFFALSE 14680
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
14220: LD_ADDR_VAR 0 7
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_VAR 0 2
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 21
14239: PUSH
14240: LD_INT 1
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PPUSH
14251: CALL_OW 69
14255: PUSH
14256: LD_INT 0
14258: PLUS
14259: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14260: LD_ADDR_VAR 0 8
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_VAR 0 2
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 2
14279: PUSH
14280: LD_INT 30
14282: PUSH
14283: LD_INT 0
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: LD_INT 30
14292: PUSH
14293: LD_INT 1
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: LIST
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 69
14313: ST_TO_ADDR
// crates := 0 ;
14314: LD_ADDR_VAR 0 4
14318: PUSH
14319: LD_INT 0
14321: ST_TO_ADDR
// oil := 0 ;
14322: LD_ADDR_VAR 0 5
14326: PUSH
14327: LD_INT 0
14329: ST_TO_ADDR
// sib := 0 ;
14330: LD_ADDR_VAR 0 6
14334: PUSH
14335: LD_INT 0
14337: ST_TO_ADDR
// if bases then
14338: LD_VAR 0 8
14342: IFFALSE 14448
// begin for j in bases do
14344: LD_ADDR_VAR 0 3
14348: PUSH
14349: LD_VAR 0 8
14353: PUSH
14354: FOR_IN
14355: IFFALSE 14446
// begin crates := crates + GetResourceType ( GetBase ( j ) , mat_cans ) ;
14357: LD_ADDR_VAR 0 4
14361: PUSH
14362: LD_VAR 0 4
14366: PUSH
14367: LD_VAR 0 3
14371: PPUSH
14372: CALL_OW 274
14376: PPUSH
14377: LD_INT 1
14379: PPUSH
14380: CALL_OW 275
14384: PLUS
14385: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( j ) , mat_oil ) ;
14386: LD_ADDR_VAR 0 5
14390: PUSH
14391: LD_VAR 0 5
14395: PUSH
14396: LD_VAR 0 3
14400: PPUSH
14401: CALL_OW 274
14405: PPUSH
14406: LD_INT 2
14408: PPUSH
14409: CALL_OW 275
14413: PLUS
14414: ST_TO_ADDR
// sib := sib + GetResourceType ( GetBase ( j ) , mat_siberit ) ;
14415: LD_ADDR_VAR 0 6
14419: PUSH
14420: LD_VAR 0 6
14424: PUSH
14425: LD_VAR 0 3
14429: PPUSH
14430: CALL_OW 274
14434: PPUSH
14435: LD_INT 3
14437: PPUSH
14438: CALL_OW 275
14442: PLUS
14443: ST_TO_ADDR
// end ;
14444: GO 14354
14446: POP
14447: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
14448: LD_STRING setSpecText(
14450: PUSH
14451: LD_VAR 0 2
14455: STR
14456: PUSH
14457: LD_STRING ,
14459: STR
14460: PUSH
14461: LD_INT 2
14463: STR
14464: PUSH
14465: LD_STRING ,
14467: STR
14468: PUSH
14469: LD_VAR 0 4
14473: STR
14474: PUSH
14475: LD_STRING )
14477: STR
14478: PPUSH
14479: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
14483: LD_STRING setSpecText(
14485: PUSH
14486: LD_VAR 0 2
14490: STR
14491: PUSH
14492: LD_STRING ,
14494: STR
14495: PUSH
14496: LD_INT 3
14498: STR
14499: PUSH
14500: LD_STRING ,
14502: STR
14503: PUSH
14504: LD_VAR 0 5
14508: STR
14509: PUSH
14510: LD_STRING )
14512: STR
14513: PPUSH
14514: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
14518: LD_STRING setSpecText(
14520: PUSH
14521: LD_VAR 0 2
14525: STR
14526: PUSH
14527: LD_STRING ,
14529: STR
14530: PUSH
14531: LD_INT 4
14533: STR
14534: PUSH
14535: LD_STRING ,
14537: STR
14538: PUSH
14539: LD_VAR 0 6
14543: STR
14544: PUSH
14545: LD_STRING )
14547: STR
14548: PPUSH
14549: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
14553: LD_STRING setSpecText(
14555: PUSH
14556: LD_VAR 0 2
14560: STR
14561: PUSH
14562: LD_STRING ,
14564: STR
14565: PUSH
14566: LD_INT 5
14568: STR
14569: PUSH
14570: LD_STRING ,
14572: STR
14573: PUSH
14574: LD_VAR 0 7
14578: STR
14579: PUSH
14580: LD_STRING )
14582: STR
14583: PPUSH
14584: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
14588: LD_STRING setSpecLogoNumber(
14590: PUSH
14591: LD_INT 2
14593: STR
14594: PUSH
14595: LD_STRING ,
14597: STR
14598: PUSH
14599: LD_INT 1
14601: STR
14602: PUSH
14603: LD_STRING )
14605: STR
14606: PPUSH
14607: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
14611: LD_STRING setSpecLogoNumber(
14613: PUSH
14614: LD_INT 3
14616: STR
14617: PUSH
14618: LD_STRING ,
14620: STR
14621: PUSH
14622: LD_INT 2
14624: STR
14625: PUSH
14626: LD_STRING )
14628: STR
14629: PPUSH
14630: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
14634: LD_STRING setSpecLogoNumber(
14636: PUSH
14637: LD_INT 4
14639: STR
14640: PUSH
14641: LD_STRING ,
14643: STR
14644: PUSH
14645: LD_INT 3
14647: STR
14648: PUSH
14649: LD_STRING )
14651: STR
14652: PPUSH
14653: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
14657: LD_STRING setSpecLogoNumber(
14659: PUSH
14660: LD_INT 5
14662: STR
14663: PUSH
14664: LD_STRING ,
14666: STR
14667: PUSH
14668: LD_INT 4
14670: STR
14671: PUSH
14672: LD_STRING )
14674: STR
14675: PPUSH
14676: CALL_OW 559
// end ; end ;
14680: GO 14205
14682: POP
14683: POP
// end ;
14684: LD_VAR 0 1
14688: RET
// every 20 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
14689: LD_INT 2
14691: PUSH
14692: LD_INT 30
14694: PUSH
14695: LD_INT 0
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 30
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: PPUSH
14717: CALL_OW 69
14721: IFFALSE 14731
14723: GO 14725
14725: DISABLE
// begin enable ;
14726: ENABLE
// UpdateSpectatorBar ;
14727: CALL 14182 0 0
// end ;
14731: END
