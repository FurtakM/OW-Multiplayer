// export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 39
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 15
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 17
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 16
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 39
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 15
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 17
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 16
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; for i := 1 to 8 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 8
 398: PUSH
 399: FOR_TO
 400: IFFALSE 487
// if Multiplayer_GetPlayerIsSpec ( i ) then
 402: LD_VAR 0 2
 406: PPUSH
 407: CALL_OW 530
 411: IFFALSE 485
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 413: LD_ADDR_EXP 18
 417: PUSH
 418: LD_EXP 18
 422: PPUSH
 423: LD_VAR 0 2
 427: PPUSH
 428: LD_INT 0
 430: PPUSH
 431: CALL_OW 1
 435: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 436: LD_ADDR_EXP 16
 440: PUSH
 441: LD_EXP 16
 445: PPUSH
 446: LD_EXP 15
 450: PUSH
 451: LD_VAR 0 2
 455: ARRAY
 456: PPUSH
 457: LD_EXP 16
 461: PUSH
 462: LD_EXP 15
 466: PUSH
 467: LD_VAR 0 2
 471: ARRAY
 472: ARRAY
 473: PUSH
 474: LD_VAR 0 2
 478: DIFF
 479: PPUSH
 480: CALL_OW 1
 484: ST_TO_ADDR
// end ;
 485: GO 399
 487: POP
 488: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 489: LD_ADDR_EXP 21
 493: PUSH
 494: LD_INT 0
 496: PUSH
 497: LD_INT 0
 499: PUSH
 500: LD_INT 0
 502: PUSH
 503: LD_INT 0
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: LD_INT 0
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: ST_TO_ADDR
// for i := 1 to 8 do
 520: LD_ADDR_VAR 0 2
 524: PUSH
 525: DOUBLE
 526: LD_INT 1
 528: DEC
 529: ST_TO_ADDR
 530: LD_INT 8
 532: PUSH
 533: FOR_TO
 534: IFFALSE 581
// if Side_Positions [ i ] then
 536: LD_EXP 18
 540: PUSH
 541: LD_VAR 0 2
 545: ARRAY
 546: IFFALSE 579
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 548: LD_ADDR_EXP 21
 552: PUSH
 553: LD_EXP 21
 557: PPUSH
 558: LD_EXP 18
 562: PUSH
 563: LD_VAR 0 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 1
 578: ST_TO_ADDR
 579: GO 533
 581: POP
 582: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 583: LD_ADDR_EXP 20
 587: PUSH
 588: LD_EXP 15
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: EMPTY
 597: LIST
 598: DIFF
 599: PUSH
 600: LD_INT 1
 602: GREATER
 603: ST_TO_ADDR
// if Multiplayer then
 604: LD_OWVAR 4
 608: IFFALSE 810
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 610: LD_ADDR_EXP 41
 614: PUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 426
 622: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 623: LD_ADDR_EXP 42
 627: PUSH
 628: LD_INT 1
 630: PPUSH
 631: CALL_OW 426
 635: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 636: LD_ADDR_EXP 43
 640: PUSH
 641: LD_INT 2
 643: PPUSH
 644: CALL_OW 426
 648: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 649: LD_ADDR_EXP 44
 653: PUSH
 654: LD_INT 3
 656: PPUSH
 657: CALL_OW 426
 661: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 662: LD_ADDR_EXP 45
 666: PUSH
 667: LD_INT 4
 669: PPUSH
 670: CALL_OW 426
 674: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 675: LD_ADDR_EXP 46
 679: PUSH
 680: LD_INT 5
 682: PPUSH
 683: CALL_OW 426
 687: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 688: LD_ADDR_EXP 47
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 696: LD_ADDR_EXP 48
 700: PUSH
 701: LD_INT 10
 703: PPUSH
 704: CALL_OW 426
 708: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 709: LD_ADDR_EXP 49
 713: PUSH
 714: LD_INT 11
 716: PPUSH
 717: CALL_OW 426
 721: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 722: LD_ADDR_EXP 50
 726: PUSH
 727: LD_INT 12
 729: PPUSH
 730: CALL_OW 426
 734: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 735: LD_ADDR_EXP 51
 739: PUSH
 740: LD_INT 13
 742: PPUSH
 743: CALL_OW 426
 747: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 748: LD_ADDR_EXP 52
 752: PUSH
 753: LD_INT 14
 755: PPUSH
 756: CALL_OW 426
 760: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 761: LD_ADDR_EXP 53
 765: PUSH
 766: LD_INT 17
 768: PPUSH
 769: CALL_OW 426
 773: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 774: LD_ADDR_EXP 54
 778: PUSH
 779: LD_INT 20
 781: PPUSH
 782: CALL_OW 426
 786: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 787: LD_ADDR_VAR 0 3
 791: PUSH
 792: LD_INT 22
 794: PPUSH
 795: CALL_OW 426
 799: ST_TO_ADDR
// def_win_rules = 0 ;
 800: LD_ADDR_EXP 14
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// end else
 808: GO 942
// begin Randomize ;
 810: CALL_OW 10
// def_base_level := 2 ;
 814: LD_ADDR_EXP 41
 818: PUSH
 819: LD_INT 2
 821: ST_TO_ADDR
// def_amount_of_people := 0 ;
 822: LD_ADDR_EXP 42
 826: PUSH
 827: LD_INT 0
 829: ST_TO_ADDR
// def_skill_level := 1 ;
 830: LD_ADDR_EXP 43
 834: PUSH
 835: LD_INT 1
 837: ST_TO_ADDR
// def_starting_resources := 2 ;
 838: LD_ADDR_EXP 44
 842: PUSH
 843: LD_INT 2
 845: ST_TO_ADDR
// def_shipments_density := 1 ;
 846: LD_ADDR_EXP 45
 850: PUSH
 851: LD_INT 1
 853: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 854: LD_ADDR_EXP 46
 858: PUSH
 859: LD_INT 0
 861: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 862: LD_ADDR_EXP 47
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// def_shared_vision := 1 ;
 870: LD_ADDR_EXP 48
 874: PUSH
 875: LD_INT 1
 877: ST_TO_ADDR
// def_morale_flags := 1 ;
 878: LD_ADDR_EXP 49
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// def_siberite_detection := 1 ;
 886: LD_ADDR_EXP 50
 890: PUSH
 891: LD_INT 1
 893: ST_TO_ADDR
// def_people_respawning := 2 ;
 894: LD_ADDR_EXP 51
 898: PUSH
 899: LD_INT 2
 901: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 902: LD_ADDR_EXP 52
 906: PUSH
 907: LD_INT 3
 909: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 910: LD_ADDR_EXP 53
 914: PUSH
 915: LD_INT 0
 917: ST_TO_ADDR
// def_builduptime := 1 ;
 918: LD_ADDR_EXP 54
 922: PUSH
 923: LD_INT 1
 925: ST_TO_ADDR
// tech_level = 4 ;
 926: LD_ADDR_VAR 0 3
 930: PUSH
 931: LD_INT 4
 933: ST_TO_ADDR
// def_win_rules = 0 ;
 934: LD_ADDR_EXP 14
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// end ; if def_game_rules = 0 then
 942: LD_EXP 40
 946: PUSH
 947: LD_INT 0
 949: EQUAL
 950: IFFALSE 977
// begin if isSGUI then
 952: LD_OWVAR 83
 956: IFFALSE 964
// setMpTechs ( ) else
 958: CALL 13851 0 0
 962: GO 977
// begin SetMpTechLevel ( tech_level + 1 ) ;
 964: LD_VAR 0 3
 968: PUSH
 969: LD_INT 1
 971: PLUS
 972: PPUSH
 973: CALL 13998 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 977: LD_ADDR_EXP 1
 981: PUSH
 982: LD_INT 0
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 1
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_EXP 41
1000: PUSH
1001: LD_INT 1
1003: PLUS
1004: ARRAY
1005: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
1006: LD_ADDR_EXP 2
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: LD_INT 0
1016: PUSH
1017: LD_INT 3
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: PUSH
1025: LD_EXP 41
1029: PUSH
1030: LD_INT 1
1032: PLUS
1033: ARRAY
1034: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1035: LD_ADDR_EXP 3
1039: PUSH
1040: LD_INT 9
1042: PUSH
1043: LD_INT 12
1045: PUSH
1046: LD_INT 15
1048: PUSH
1049: LD_INT 24
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: PUSH
1058: LD_EXP 42
1062: PUSH
1063: LD_INT 1
1065: PLUS
1066: ARRAY
1067: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1068: LD_ADDR_EXP 4
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 3
1078: PUSH
1079: LD_INT 4
1081: PUSH
1082: LD_INT 5
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_EXP 43
1095: PUSH
1096: LD_INT 1
1098: PLUS
1099: ARRAY
1100: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1101: LD_ADDR_EXP 6
1105: PUSH
1106: LD_INT 0
1108: PUSH
1109: LD_INT 0
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 30
1122: PUSH
1123: LD_INT 0
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 50
1136: PUSH
1137: LD_INT 20
1139: PUSH
1140: LD_INT 0
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 80
1150: PUSH
1151: LD_INT 40
1153: PUSH
1154: LD_INT 20
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: ARRAY
1177: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1178: LD_ADDR_EXP 5
1182: PUSH
1183: LD_INT 10
1185: PUSH
1186: EMPTY
1187: LIST
1188: PUSH
1189: LD_INT 7
1191: PUSH
1192: LD_INT 14
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 6
1201: PUSH
1202: LD_INT 12
1204: PUSH
1205: LD_INT 18
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 5
1215: PUSH
1216: LD_INT 10
1218: PUSH
1219: LD_INT 15
1221: PUSH
1222: LD_INT 20
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: LD_EXP 44
1241: PUSH
1242: LD_INT 1
1244: PLUS
1245: ARRAY
1246: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 ] [ def_shipments_density + 1 ] ;
1247: LD_ADDR_EXP 7
1251: PUSH
1252: LD_INT 150
1254: PUSH
1255: LD_INT 125
1257: PUSH
1258: LD_INT 100
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: LD_EXP 45
1270: PUSH
1271: LD_INT 1
1273: PLUS
1274: ARRAY
1275: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1276: LD_ADDR_EXP 11
1280: PUSH
1281: LD_INT 0
1283: PUSH
1284: LD_INT 10500
1286: PUSH
1287: LD_INT 6300
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: PUSH
1295: LD_EXP 51
1299: PUSH
1300: LD_INT 1
1302: PLUS
1303: ARRAY
1304: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1305: LD_ADDR_EXP 12
1309: PUSH
1310: LD_INT 0
1312: PUSH
1313: LD_INT 31500
1315: PUSH
1316: LD_INT 10500
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PUSH
1324: LD_EXP 51
1328: PUSH
1329: LD_INT 1
1331: PLUS
1332: ARRAY
1333: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1334: LD_ADDR_EXP 9
1338: PUSH
1339: LD_INT 0
1341: PUSH
1342: LD_INT 1
1344: PUSH
1345: LD_INT 2
1347: PUSH
1348: LD_INT 3
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_EXP 52
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: ARRAY
1366: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1367: LD_ADDR_EXP 8
1371: PUSH
1372: LD_INT 1
1374: NEG
1375: PUSH
1376: LD_INT 350
1378: PUSH
1379: LD_INT 700
1381: PUSH
1382: LD_INT 1400
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: PUSH
1395: LD_EXP 49
1399: PUSH
1400: LD_INT 1
1402: PLUS
1403: ARRAY
1404: ST_TO_ADDR
// battle_flags_id = [ ] ;
1405: LD_ADDR_EXP 29
1409: PUSH
1410: EMPTY
1411: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1412: LD_ADDR_EXP 13
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: LD_INT 63000
1425: PUSH
1426: LD_INT 126000
1428: PUSH
1429: LD_INT 189000
1431: PUSH
1432: LD_INT 252000
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_EXP 53
1447: PUSH
1448: LD_INT 1
1450: PLUS
1451: ARRAY
1452: ST_TO_ADDR
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
1453: LD_ADDR_EXP 38
1457: PUSH
1458: LD_INT 9
1460: PUSH
1461: LD_INT 10
1463: PUSH
1464: LD_INT 11
1466: PUSH
1467: LD_INT 12
1469: PUSH
1470: LD_INT 13
1472: PUSH
1473: LD_INT 14
1475: PUSH
1476: LD_INT 15
1478: PUSH
1479: LD_INT 16
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: ST_TO_ADDR
// end ;
1492: LD_VAR 0 1
1496: RET
// function init_map ; var i , j ; begin
1497: LD_INT 0
1499: PPUSH
1500: PPUSH
1501: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1502: LD_ADDR_EXP 25
1506: PUSH
1507: LD_INT 17
1509: PUSH
1510: LD_INT 4
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 72
1519: PUSH
1520: LD_INT 5
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PUSH
1527: LD_INT 157
1529: PUSH
1530: LD_INT 22
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 205
1539: PUSH
1540: LD_INT 111
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 221
1549: PUSH
1550: LD_INT 195
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: LD_INT 169
1559: PUSH
1560: LD_INT 196
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 93
1569: PUSH
1570: LD_INT 177
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 52
1579: PUSH
1580: LD_INT 92
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1597: LD_ADDR_EXP 26
1601: PUSH
1602: LD_INT 17
1604: PUSH
1605: LD_INT 4
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 16
1614: PUSH
1615: LD_INT 23
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 72
1628: PUSH
1629: LD_INT 5
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 88
1638: PUSH
1639: LD_INT 28
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 157
1652: PUSH
1653: LD_INT 22
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 133
1662: PUSH
1663: LD_INT 12
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 205
1676: PUSH
1677: LD_INT 111
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 200
1686: PUSH
1687: LD_INT 95
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 221
1700: PUSH
1701: LD_INT 195
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 249
1710: PUSH
1711: LD_INT 190
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 169
1724: PUSH
1725: LD_INT 196
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PUSH
1732: LD_INT 180
1734: PUSH
1735: LD_INT 197
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 93
1748: PUSH
1749: LD_INT 177
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 114
1758: PUSH
1759: LD_INT 194
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 52
1772: PUSH
1773: LD_INT 92
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 58
1782: PUSH
1783: LD_INT 107
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1804: LD_ADDR_EXP 27
1808: PUSH
1809: LD_INT 12
1811: PUSH
1812: LD_INT 12
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 99
1821: PUSH
1822: LD_INT 19
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 139
1831: PUSH
1832: LD_INT 5
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 207
1841: PUSH
1842: LD_INT 100
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 244
1851: PUSH
1852: LD_INT 181
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 183
1861: PUSH
1862: LD_INT 196
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 117
1871: PUSH
1872: LD_INT 195
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: LD_INT 54
1881: PUSH
1882: LD_INT 104
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1899: LD_ADDR_EXP 28
1903: PUSH
1904: EMPTY
1905: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1906: LD_ADDR_EXP 22
1910: PUSH
1911: LD_INT 32
1913: PUSH
1914: LD_INT 24
1916: PUSH
1917: LD_INT 2
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 87
1927: PUSH
1928: LD_INT 18
1930: PUSH
1931: LD_INT 3
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 146
1941: PUSH
1942: LD_INT 28
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 188
1955: PUSH
1956: LD_INT 103
1958: PUSH
1959: LD_INT 4
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 224
1969: PUSH
1970: LD_INT 180
1972: PUSH
1973: LD_INT 5
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 168
1983: PUSH
1984: LD_INT 180
1986: PUSH
1987: LD_INT 0
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: PUSH
1995: LD_INT 105
1997: PUSH
1998: LD_INT 170
2000: PUSH
2001: LD_INT 0
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 71
2011: PUSH
2012: LD_INT 102
2014: PUSH
2015: LD_INT 1
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: ST_TO_ADDR
// for i in depot_def do
2033: LD_ADDR_VAR 0 2
2037: PUSH
2038: LD_EXP 22
2042: PUSH
2043: FOR_IN
2044: IFFALSE 2120
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
2046: LD_ADDR_EXP 24
2050: PUSH
2051: LD_EXP 24
2055: PUSH
2056: LD_VAR 0 2
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: LD_VAR 0 2
2069: PUSH
2070: LD_INT 3
2072: ARRAY
2073: PPUSH
2074: LD_INT 4
2076: NEG
2077: PPUSH
2078: CALL_OW 272
2082: PUSH
2083: LD_VAR 0 2
2087: PUSH
2088: LD_INT 2
2090: ARRAY
2091: PPUSH
2092: LD_VAR 0 2
2096: PUSH
2097: LD_INT 3
2099: ARRAY
2100: PPUSH
2101: LD_INT 4
2103: NEG
2104: PPUSH
2105: CALL_OW 273
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: EMPTY
2115: LIST
2116: ADD
2117: ST_TO_ADDR
2118: GO 2043
2120: POP
2121: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
2122: LD_ADDR_EXP 23
2126: PUSH
2127: LD_INT 50
2129: PUSH
2130: LD_INT 40
2132: PUSH
2133: LD_INT 5
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: PUSH
2141: LD_INT 47
2143: PUSH
2144: LD_INT 17
2146: PUSH
2147: LD_INT 4
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 29
2157: PUSH
2158: LD_INT 39
2160: PUSH
2161: LD_INT 0
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: PUSH
2174: LD_INT 107
2176: PUSH
2177: LD_INT 27
2179: PUSH
2180: LD_INT 4
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_INT 67
2190: PUSH
2191: LD_INT 10
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: PUSH
2202: LD_INT 91
2204: PUSH
2205: LD_INT 35
2207: PUSH
2208: LD_INT 0
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: LIST
2220: PUSH
2221: LD_INT 165
2223: PUSH
2224: LD_INT 44
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 123
2237: PUSH
2238: LD_INT 16
2240: PUSH
2241: LD_INT 2
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 141
2251: PUSH
2252: LD_INT 39
2254: PUSH
2255: LD_INT 0
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 179
2270: PUSH
2271: LD_INT 85
2273: PUSH
2274: LD_INT 3
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 172
2284: PUSH
2285: LD_INT 102
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 196
2298: PUSH
2299: LD_INT 118
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: PUSH
2315: LD_INT 210
2317: PUSH
2318: LD_INT 182
2320: PUSH
2321: LD_INT 1
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 226
2331: PUSH
2332: LD_INT 164
2334: PUSH
2335: LD_INT 3
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 209
2345: PUSH
2346: LD_INT 164
2348: PUSH
2349: LD_INT 2
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 156
2364: PUSH
2365: LD_INT 183
2367: PUSH
2368: LD_INT 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: LIST
2375: PUSH
2376: LD_INT 184
2378: PUSH
2379: LD_INT 184
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: LIST
2389: PUSH
2390: LD_INT 161
2392: PUSH
2393: LD_INT 166
2395: PUSH
2396: LD_INT 3
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 86
2411: PUSH
2412: LD_INT 156
2414: PUSH
2415: LD_INT 2
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 124
2425: PUSH
2426: LD_INT 180
2428: PUSH
2429: LD_INT 4
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 106
2439: PUSH
2440: LD_INT 155
2442: PUSH
2443: LD_INT 3
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 87
2458: PUSH
2459: LD_INT 102
2461: PUSH
2462: LD_INT 4
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: LIST
2469: PUSH
2470: LD_INT 63
2472: PUSH
2473: LD_INT 83
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 79
2486: PUSH
2487: LD_INT 120
2489: PUSH
2490: LD_INT 0
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: LIST
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: ST_TO_ADDR
// for i = 1 to Side_Positions do
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: DOUBLE
2519: LD_INT 1
2521: DEC
2522: ST_TO_ADDR
2523: LD_EXP 18
2527: PUSH
2528: FOR_TO
2529: IFFALSE 2659
// begin if not Side_Positions [ i ] then
2531: LD_EXP 18
2535: PUSH
2536: LD_VAR 0 2
2540: ARRAY
2541: NOT
2542: IFFALSE 2546
// continue ;
2544: GO 2528
// if def_extra_oil_deposits then
2546: LD_EXP 46
2550: IFFALSE 2608
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: LD_EXP 26
2561: PUSH
2562: LD_EXP 18
2566: PUSH
2567: LD_VAR 0 2
2571: ARRAY
2572: ARRAY
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2604
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2577: LD_VAR 0 3
2581: PUSH
2582: LD_INT 1
2584: ARRAY
2585: PPUSH
2586: LD_VAR 0 3
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: CALL_OW 62
2602: GO 2574
2604: POP
2605: POP
2606: GO 2657
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2608: LD_EXP 25
2612: PUSH
2613: LD_EXP 18
2617: PUSH
2618: LD_VAR 0 2
2622: ARRAY
2623: ARRAY
2624: PUSH
2625: LD_INT 1
2627: ARRAY
2628: PPUSH
2629: LD_EXP 25
2633: PUSH
2634: LD_EXP 18
2638: PUSH
2639: LD_VAR 0 2
2643: ARRAY
2644: ARRAY
2645: PUSH
2646: LD_INT 2
2648: ARRAY
2649: PPUSH
2650: LD_INT 2
2652: PPUSH
2653: CALL_OW 62
// end ;
2657: GO 2528
2659: POP
2660: POP
// if def_extra_sib_deposits then
2661: LD_EXP 47
2665: IFFALSE 2819
// for i = 1 to Side_Positions do
2667: LD_ADDR_VAR 0 2
2671: PUSH
2672: DOUBLE
2673: LD_INT 1
2675: DEC
2676: ST_TO_ADDR
2677: LD_EXP 18
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2817
// begin if not Side_Positions [ i ] then
2685: LD_EXP 18
2689: PUSH
2690: LD_VAR 0 2
2694: ARRAY
2695: NOT
2696: IFFALSE 2700
// continue ;
2698: GO 2682
// if def_extra_sib_deposits = 2 then
2700: LD_EXP 47
2704: PUSH
2705: LD_INT 2
2707: EQUAL
2708: IFFALSE 2766
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2710: LD_ADDR_VAR 0 3
2714: PUSH
2715: LD_EXP 28
2719: PUSH
2720: LD_EXP 18
2724: PUSH
2725: LD_VAR 0 2
2729: ARRAY
2730: ARRAY
2731: PUSH
2732: FOR_IN
2733: IFFALSE 2762
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2735: LD_VAR 0 3
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PPUSH
2744: LD_VAR 0 3
2748: PUSH
2749: LD_INT 2
2751: ARRAY
2752: PPUSH
2753: LD_INT 3
2755: PPUSH
2756: CALL_OW 62
2760: GO 2732
2762: POP
2763: POP
2764: GO 2815
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2766: LD_EXP 27
2770: PUSH
2771: LD_EXP 18
2775: PUSH
2776: LD_VAR 0 2
2780: ARRAY
2781: ARRAY
2782: PUSH
2783: LD_INT 1
2785: ARRAY
2786: PPUSH
2787: LD_EXP 27
2791: PUSH
2792: LD_EXP 18
2796: PUSH
2797: LD_VAR 0 2
2801: ARRAY
2802: ARRAY
2803: PUSH
2804: LD_INT 2
2806: ARRAY
2807: PPUSH
2808: LD_INT 3
2810: PPUSH
2811: CALL_OW 62
// end ;
2815: GO 2682
2817: POP
2818: POP
// end ;
2819: LD_VAR 0 1
2823: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2824: LD_INT 0
2826: PPUSH
2827: PPUSH
2828: PPUSH
// if not Team_Game then
2829: LD_EXP 20
2833: NOT
2834: IFFALSE 2932
// begin for i = 1 to 8 do
2836: LD_ADDR_VAR 0 2
2840: PUSH
2841: DOUBLE
2842: LD_INT 1
2844: DEC
2845: ST_TO_ADDR
2846: LD_INT 8
2848: PUSH
2849: FOR_TO
2850: IFFALSE 2928
// for j = 1 to 8 do
2852: LD_ADDR_VAR 0 3
2856: PUSH
2857: DOUBLE
2858: LD_INT 1
2860: DEC
2861: ST_TO_ADDR
2862: LD_INT 8
2864: PUSH
2865: FOR_TO
2866: IFFALSE 2924
// if i <> j then
2868: LD_VAR 0 2
2872: PUSH
2873: LD_VAR 0 3
2877: NONEQUAL
2878: IFFALSE 2902
// SetAttitude ( i , j , att_neutral , true ) else
2880: LD_VAR 0 2
2884: PPUSH
2885: LD_VAR 0 3
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: CALL_OW 80
2900: GO 2922
// SetAttitude ( i , j , att_friend , true ) ;
2902: LD_VAR 0 2
2906: PPUSH
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 1
2914: PPUSH
2915: LD_INT 1
2917: PPUSH
2918: CALL_OW 80
2922: GO 2865
2924: POP
2925: POP
2926: GO 2849
2928: POP
2929: POP
// end else
2930: GO 3107
// begin if def_shared_vision then
2932: LD_EXP 48
2936: IFFALSE 3001
// begin for i in Teams do
2938: LD_ADDR_VAR 0 2
2942: PUSH
2943: LD_EXP 16
2947: PUSH
2948: FOR_IN
2949: IFFALSE 2999
// for j = 2 to i do
2951: LD_ADDR_VAR 0 3
2955: PUSH
2956: DOUBLE
2957: LD_INT 2
2959: DEC
2960: ST_TO_ADDR
2961: LD_VAR 0 2
2965: PUSH
2966: FOR_TO
2967: IFFALSE 2995
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2969: LD_VAR 0 2
2973: PUSH
2974: LD_VAR 0 3
2978: ARRAY
2979: PPUSH
2980: LD_VAR 0 2
2984: PUSH
2985: LD_INT 1
2987: ARRAY
2988: PPUSH
2989: CALL_OW 343
2993: GO 2966
2995: POP
2996: POP
2997: GO 2948
2999: POP
3000: POP
// end ; for i = 1 to 8 do
3001: LD_ADDR_VAR 0 2
3005: PUSH
3006: DOUBLE
3007: LD_INT 1
3009: DEC
3010: ST_TO_ADDR
3011: LD_INT 8
3013: PUSH
3014: FOR_TO
3015: IFFALSE 3105
// for j = 1 to 8 do
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: DOUBLE
3023: LD_INT 1
3025: DEC
3026: ST_TO_ADDR
3027: LD_INT 8
3029: PUSH
3030: FOR_TO
3031: IFFALSE 3101
// if Side_Teams [ i ] = Side_Teams [ j ] then
3033: LD_EXP 15
3037: PUSH
3038: LD_VAR 0 2
3042: ARRAY
3043: PUSH
3044: LD_EXP 15
3048: PUSH
3049: LD_VAR 0 3
3053: ARRAY
3054: EQUAL
3055: IFFALSE 3079
// SetAttitude ( i , j , att_friend , true ) else
3057: LD_VAR 0 2
3061: PPUSH
3062: LD_VAR 0 3
3066: PPUSH
3067: LD_INT 1
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 80
3077: GO 3099
// SetAttitude ( i , j , att_enemy , true ) ;
3079: LD_VAR 0 2
3083: PPUSH
3084: LD_VAR 0 3
3088: PPUSH
3089: LD_INT 2
3091: PPUSH
3092: LD_INT 1
3094: PPUSH
3095: CALL_OW 80
3099: GO 3030
3101: POP
3102: POP
3103: GO 3014
3105: POP
3106: POP
// end ; end ;
3107: LD_VAR 0 1
3111: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3112: LD_INT 0
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
// result := [ ] ;
3118: LD_ADDR_VAR 0 7
3122: PUSH
3123: EMPTY
3124: ST_TO_ADDR
// for i := 1 to count do
3125: LD_ADDR_VAR 0 8
3129: PUSH
3130: DOUBLE
3131: LD_INT 1
3133: DEC
3134: ST_TO_ADDR
3135: LD_VAR 0 1
3139: PUSH
3140: FOR_TO
3141: IFFALSE 3559
// begin uc_direction := Rand ( 0 , 5 ) ;
3143: LD_ADDR_OWVAR 24
3147: PUSH
3148: LD_INT 0
3150: PPUSH
3151: LD_INT 5
3153: PPUSH
3154: CALL_OW 12
3158: ST_TO_ADDR
// if commander then
3159: LD_LOC 1
3163: IFFALSE 3272
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3165: LD_ADDR_OWVAR 26
3169: PUSH
3170: LD_OWVAR 19
3174: PUSH
3175: LD_OWVAR 20
3179: ARRAY
3180: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3181: LD_INT 1
3183: PPUSH
3184: LD_INT 2
3186: PPUSH
3187: CALL_OW 12
3191: PPUSH
3192: LD_VAR 0 2
3196: PPUSH
3197: LD_EXP 4
3201: PUSH
3202: LD_INT 2
3204: PLUS
3205: PPUSH
3206: CALL_OW 380
// hc_importance := 105 ;
3210: LD_ADDR_OWVAR 32
3214: PUSH
3215: LD_INT 105
3217: ST_TO_ADDR
// commander := false ;
3218: LD_ADDR_LOC 1
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// if Multiplayer then
3226: LD_OWVAR 4
3230: IFFALSE 3270
// begin hc_gallery := MULTIAVATARS ;
3232: LD_ADDR_OWVAR 33
3236: PUSH
3237: LD_STRING MULTIAVATARS
3239: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3240: LD_ADDR_OWVAR 34
3244: PUSH
3245: LD_OWVAR 20
3249: PPUSH
3250: CALL_OW 525
3254: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3255: LD_ADDR_OWVAR 27
3259: PUSH
3260: LD_OWVAR 20
3264: PPUSH
3265: CALL_OW 526
3269: ST_TO_ADDR
// end ; end else
3270: GO 3335
// begin hc_name :=  ;
3272: LD_ADDR_OWVAR 26
3276: PUSH
3277: LD_STRING 
3279: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 2
3285: PPUSH
3286: CALL_OW 12
3290: PPUSH
3291: LD_VAR 0 2
3295: PPUSH
3296: LD_EXP 4
3300: PPUSH
3301: CALL_OW 380
// hc_importance := 0 ;
3305: LD_ADDR_OWVAR 32
3309: PUSH
3310: LD_INT 0
3312: ST_TO_ADDR
// if Multiplayer then
3313: LD_OWVAR 4
3317: IFFALSE 3335
// begin hc_gallery :=  ;
3319: LD_ADDR_OWVAR 33
3323: PUSH
3324: LD_STRING 
3326: ST_TO_ADDR
// hc_face_number := 0 ;
3327: LD_ADDR_OWVAR 34
3331: PUSH
3332: LD_INT 0
3334: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3335: LD_ADDR_VAR 0 10
3339: PUSH
3340: CALL_OW 44
3344: ST_TO_ADDR
// if global_defined then
3345: LD_LOC 3
3349: IFFALSE 3489
// begin if ( cl = class_soldier ) then
3351: LD_VAR 0 2
3355: PUSH
3356: LD_INT 1
3358: EQUAL
3359: IFFALSE 3379
// j := i + soldiers_created else
3361: LD_ADDR_VAR 0 9
3365: PUSH
3366: LD_VAR 0 8
3370: PUSH
3371: LD_LOC 4
3375: PLUS
3376: ST_TO_ADDR
3377: GO 3389
// j := i ;
3379: LD_ADDR_VAR 0 9
3383: PUSH
3384: LD_VAR 0 8
3388: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3389: LD_LOC 2
3393: PUSH
3394: LD_VAR 0 2
3398: ARRAY
3399: PUSH
3400: LD_VAR 0 9
3404: ARRAY
3405: PPUSH
3406: LD_VAR 0 10
3410: PPUSH
3411: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3415: LD_VAR 0 10
3419: PPUSH
3420: LD_INT 2
3422: PPUSH
3423: LD_LOC 2
3427: PUSH
3428: LD_VAR 0 2
3432: ARRAY
3433: PUSH
3434: LD_VAR 0 9
3438: ARRAY
3439: PPUSH
3440: LD_INT 2
3442: PPUSH
3443: CALL_OW 260
3447: PPUSH
3448: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3452: LD_VAR 0 10
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_LOC 2
3464: PUSH
3465: LD_VAR 0 2
3469: ARRAY
3470: PUSH
3471: LD_VAR 0 9
3475: ARRAY
3476: PPUSH
3477: LD_INT 1
3479: PPUSH
3480: CALL_OW 260
3484: PPUSH
3485: CALL_OW 239
// end ; if building then
3489: LD_VAR 0 6
3493: IFFALSE 3511
// PlaceHumanInUnit ( un , building ) else
3495: LD_VAR 0 10
3499: PPUSH
3500: LD_VAR 0 6
3504: PPUSH
3505: CALL_OW 52
3509: GO 3538
// PlaceUnitXYR ( un , x , y , r , false ) ;
3511: LD_VAR 0 10
3515: PPUSH
3516: LD_VAR 0 3
3520: PPUSH
3521: LD_VAR 0 4
3525: PPUSH
3526: LD_VAR 0 5
3530: PPUSH
3531: LD_INT 0
3533: PPUSH
3534: CALL_OW 50
// result := result ^ [ un ] ;
3538: LD_ADDR_VAR 0 7
3542: PUSH
3543: LD_VAR 0 7
3547: PUSH
3548: LD_VAR 0 10
3552: PUSH
3553: EMPTY
3554: LIST
3555: ADD
3556: ST_TO_ADDR
// end ;
3557: GO 3140
3559: POP
3560: POP
// if not global_defined then
3561: LD_LOC 3
3565: NOT
3566: IFFALSE 3644
// if ( global_units >= cl ) then
3568: LD_LOC 2
3572: PUSH
3573: LD_VAR 0 2
3577: GREATEREQUAL
3578: IFFALSE 3619
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3580: LD_ADDR_LOC 2
3584: PUSH
3585: LD_LOC 2
3589: PPUSH
3590: LD_VAR 0 2
3594: PPUSH
3595: LD_LOC 2
3599: PUSH
3600: LD_VAR 0 2
3604: ARRAY
3605: PUSH
3606: LD_VAR 0 7
3610: ADD
3611: PPUSH
3612: CALL_OW 1
3616: ST_TO_ADDR
3617: GO 3644
// global_units := Replace ( global_units , cl , result ) ;
3619: LD_ADDR_LOC 2
3623: PUSH
3624: LD_LOC 2
3628: PPUSH
3629: LD_VAR 0 2
3633: PPUSH
3634: LD_VAR 0 7
3638: PPUSH
3639: CALL_OW 1
3643: ST_TO_ADDR
// if commander then
3644: LD_LOC 1
3648: IFFALSE 3695
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3650: LD_ADDR_EXP 30
3654: PUSH
3655: LD_EXP 30
3659: PPUSH
3660: LD_OWVAR 20
3664: PPUSH
3665: LD_EXP 30
3669: PUSH
3670: LD_OWVAR 20
3674: ARRAY
3675: PUSH
3676: LD_VAR 0 10
3680: ADD
3681: PPUSH
3682: CALL_OW 1
3686: ST_TO_ADDR
// commander := false ;
3687: LD_ADDR_LOC 1
3691: PUSH
3692: LD_INT 0
3694: ST_TO_ADDR
// end ; end ;
3695: LD_VAR 0 7
3699: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3700: LD_INT 0
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
// pos := Side_Positions [ side ] ;
3711: LD_ADDR_VAR 0 3
3715: PUSH
3716: LD_EXP 18
3720: PUSH
3721: LD_VAR 0 1
3725: ARRAY
3726: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3727: LD_ADDR_OWVAR 21
3731: PUSH
3732: LD_EXP 19
3736: PUSH
3737: LD_VAR 0 1
3741: ARRAY
3742: ST_TO_ADDR
// uc_side := side ;
3743: LD_ADDR_OWVAR 20
3747: PUSH
3748: LD_VAR 0 1
3752: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3753: LD_ADDR_VAR 0 4
3757: PUSH
3758: LD_EXP 22
3762: PUSH
3763: LD_VAR 0 3
3767: ARRAY
3768: PUSH
3769: LD_INT 1
3771: ARRAY
3772: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3773: LD_ADDR_VAR 0 5
3777: PUSH
3778: LD_EXP 22
3782: PUSH
3783: LD_VAR 0 3
3787: ARRAY
3788: PUSH
3789: LD_INT 2
3791: ARRAY
3792: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3793: LD_ADDR_VAR 0 6
3797: PUSH
3798: LD_EXP 22
3802: PUSH
3803: LD_VAR 0 3
3807: ARRAY
3808: PUSH
3809: LD_INT 3
3811: ARRAY
3812: ST_TO_ADDR
// if is_depot then
3813: LD_EXP 1
3817: IFFALSE 3950
// begin bc_type = b_depot ;
3819: LD_ADDR_OWVAR 42
3823: PUSH
3824: LD_INT 0
3826: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3827: LD_ADDR_VAR 0 10
3831: PUSH
3832: LD_VAR 0 4
3836: PPUSH
3837: LD_VAR 0 5
3841: PPUSH
3842: LD_VAR 0 6
3846: PPUSH
3847: CALL_OW 47
3851: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3852: LD_VAR 0 10
3856: PPUSH
3857: LD_STRING @
3859: PUSH
3860: LD_VAR 0 1
3864: STR
3865: PPUSH
3866: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3870: LD_VAR 0 10
3874: PPUSH
3875: CALL_OW 274
3879: PPUSH
3880: LD_INT 1
3882: PPUSH
3883: LD_EXP 6
3887: PUSH
3888: LD_INT 1
3890: ARRAY
3891: PPUSH
3892: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3896: LD_VAR 0 10
3900: PPUSH
3901: CALL_OW 274
3905: PPUSH
3906: LD_INT 2
3908: PPUSH
3909: LD_EXP 6
3913: PUSH
3914: LD_INT 2
3916: ARRAY
3917: PPUSH
3918: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3922: LD_VAR 0 10
3926: PPUSH
3927: CALL_OW 274
3931: PPUSH
3932: LD_INT 3
3934: PPUSH
3935: LD_EXP 6
3939: PUSH
3940: LD_INT 3
3942: ARRAY
3943: PPUSH
3944: CALL_OW 277
// end else
3948: GO 4094
// begin for i := 1 to 3 do
3950: LD_ADDR_VAR 0 7
3954: PUSH
3955: DOUBLE
3956: LD_INT 1
3958: DEC
3959: ST_TO_ADDR
3960: LD_INT 3
3962: PUSH
3963: FOR_TO
3964: IFFALSE 4092
// begin r := starting_resources [ i ] ;
3966: LD_ADDR_VAR 0 8
3970: PUSH
3971: LD_EXP 6
3975: PUSH
3976: LD_VAR 0 7
3980: ARRAY
3981: ST_TO_ADDR
// while r >= 10 do
3982: LD_VAR 0 8
3986: PUSH
3987: LD_INT 10
3989: GREATEREQUAL
3990: IFFALSE 4090
// if r > 50 then
3992: LD_VAR 0 8
3996: PUSH
3997: LD_INT 50
3999: GREATER
4000: IFFALSE 4046
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4002: LD_VAR 0 7
4006: PPUSH
4007: LD_INT 5
4009: PPUSH
4010: LD_VAR 0 4
4014: PPUSH
4015: LD_VAR 0 5
4019: PPUSH
4020: LD_INT 4
4022: PPUSH
4023: LD_INT 0
4025: PPUSH
4026: CALL_OW 60
// r := r - 50 ;
4030: LD_ADDR_VAR 0 8
4034: PUSH
4035: LD_VAR 0 8
4039: PUSH
4040: LD_INT 50
4042: MINUS
4043: ST_TO_ADDR
// end else
4044: GO 4088
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4046: LD_VAR 0 7
4050: PPUSH
4051: LD_VAR 0 8
4055: PUSH
4056: LD_INT 10
4058: DIV
4059: PPUSH
4060: LD_VAR 0 4
4064: PPUSH
4065: LD_VAR 0 5
4069: PPUSH
4070: LD_INT 4
4072: PPUSH
4073: LD_INT 0
4075: PPUSH
4076: CALL_OW 60
// r := 0 ;
4080: LD_ADDR_VAR 0 8
4084: PUSH
4085: LD_INT 0
4087: ST_TO_ADDR
// end ;
4088: GO 3982
// end ;
4090: GO 3963
4092: POP
4093: POP
// end ; for r in starting_crates do
4094: LD_ADDR_VAR 0 8
4098: PUSH
4099: LD_EXP 5
4103: PUSH
4104: FOR_IN
4105: IFFALSE 4137
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4107: LD_INT 1
4109: PPUSH
4110: LD_INT 5
4112: PPUSH
4113: LD_VAR 0 4
4117: PPUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_VAR 0 8
4127: PPUSH
4128: LD_INT 0
4130: PPUSH
4131: CALL_OW 60
4135: GO 4104
4137: POP
4138: POP
// if def_morale_flags then
4139: LD_EXP 49
4143: IFFALSE 4282
// begin x := start_def [ pos ] [ 1 ] ;
4145: LD_ADDR_VAR 0 4
4149: PUSH
4150: LD_EXP 24
4154: PUSH
4155: LD_VAR 0 3
4159: ARRAY
4160: PUSH
4161: LD_INT 1
4163: ARRAY
4164: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4165: LD_ADDR_VAR 0 5
4169: PUSH
4170: LD_EXP 24
4174: PUSH
4175: LD_VAR 0 3
4179: ARRAY
4180: PUSH
4181: LD_INT 2
4183: ARRAY
4184: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4185: LD_VAR 0 4
4189: PPUSH
4190: LD_VAR 0 5
4194: PPUSH
4195: LD_INT 12
4197: PPUSH
4198: LD_INT 2
4200: PPUSH
4201: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4205: LD_ADDR_EXP 29
4209: PUSH
4210: LD_EXP 29
4214: PUSH
4215: LD_VAR 0 1
4219: PPUSH
4220: LD_VAR 0 4
4224: PPUSH
4225: LD_VAR 0 5
4229: PPUSH
4230: LD_INT 1
4232: PUSH
4233: LD_INT 100
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 2
4242: PUSH
4243: LD_INT 50
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 3
4252: PUSH
4253: LD_INT 20
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PUSH
4260: LD_INT 20
4262: PUSH
4263: LD_INT 100
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: PPUSH
4276: CALL_OW 418
4280: ADD
4281: ST_TO_ADDR
// end ; commander := true ;
4282: LD_ADDR_LOC 1
4286: PUSH
4287: LD_INT 1
4289: ST_TO_ADDR
// soldiers_created := 0 ;
4290: LD_ADDR_LOC 4
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4298: LD_ADDR_VAR 0 7
4302: PUSH
4303: DOUBLE
4304: LD_INT 1
4306: DEC
4307: ST_TO_ADDR
4308: LD_EXP 2
4312: PUSH
4313: FOR_TO
4314: IFFALSE 4467
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4316: LD_ADDR_VAR 0 4
4320: PUSH
4321: LD_EXP 23
4325: PUSH
4326: LD_VAR 0 3
4330: ARRAY
4331: PUSH
4332: LD_VAR 0 7
4336: ARRAY
4337: PUSH
4338: LD_INT 1
4340: ARRAY
4341: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4342: LD_ADDR_VAR 0 5
4346: PUSH
4347: LD_EXP 23
4351: PUSH
4352: LD_VAR 0 3
4356: ARRAY
4357: PUSH
4358: LD_VAR 0 7
4362: ARRAY
4363: PUSH
4364: LD_INT 2
4366: ARRAY
4367: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4368: LD_ADDR_VAR 0 6
4372: PUSH
4373: LD_EXP 23
4377: PUSH
4378: LD_VAR 0 3
4382: ARRAY
4383: PUSH
4384: LD_VAR 0 7
4388: ARRAY
4389: PUSH
4390: LD_INT 3
4392: ARRAY
4393: ST_TO_ADDR
// bc_type := b_breastwork ;
4394: LD_ADDR_OWVAR 42
4398: PUSH
4399: LD_INT 31
4401: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4402: LD_ADDR_VAR 0 9
4406: PUSH
4407: LD_VAR 0 4
4411: PPUSH
4412: LD_VAR 0 5
4416: PPUSH
4417: LD_VAR 0 6
4421: PPUSH
4422: CALL_OW 47
4426: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4427: LD_INT 1
4429: PPUSH
4430: LD_INT 1
4432: PPUSH
4433: LD_INT 0
4435: PPUSH
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: LD_VAR 0 9
4446: PPUSH
4447: CALL 3112 0 6
// soldiers_created := soldiers_created + 1 ;
4451: LD_ADDR_LOC 4
4455: PUSH
4456: LD_LOC 4
4460: PUSH
4461: LD_INT 1
4463: PLUS
4464: ST_TO_ADDR
// end ;
4465: GO 4313
4467: POP
4468: POP
// x := start_def [ pos ] [ 1 ] ;
4469: LD_ADDR_VAR 0 4
4473: PUSH
4474: LD_EXP 24
4478: PUSH
4479: LD_VAR 0 3
4483: ARRAY
4484: PUSH
4485: LD_INT 1
4487: ARRAY
4488: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4489: LD_ADDR_VAR 0 5
4493: PUSH
4494: LD_EXP 24
4498: PUSH
4499: LD_VAR 0 3
4503: ARRAY
4504: PUSH
4505: LD_INT 2
4507: ARRAY
4508: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4509: LD_LOC 8
4513: PUSH
4514: LD_EXP 2
4518: MINUS
4519: PPUSH
4520: LD_INT 1
4522: PPUSH
4523: LD_VAR 0 4
4527: PPUSH
4528: LD_VAR 0 5
4532: PPUSH
4533: LD_INT 5
4535: PPUSH
4536: LD_INT 0
4538: PPUSH
4539: CALL 3112 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4543: LD_LOC 5
4547: PPUSH
4548: LD_INT 2
4550: PPUSH
4551: LD_VAR 0 4
4555: PPUSH
4556: LD_VAR 0 5
4560: PPUSH
4561: LD_INT 5
4563: PPUSH
4564: LD_INT 0
4566: PPUSH
4567: CALL 3112 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4571: LD_LOC 7
4575: PPUSH
4576: LD_INT 3
4578: PPUSH
4579: LD_VAR 0 4
4583: PPUSH
4584: LD_VAR 0 5
4588: PPUSH
4589: LD_INT 5
4591: PPUSH
4592: LD_INT 0
4594: PPUSH
4595: CALL 3112 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4599: LD_LOC 6
4603: PPUSH
4604: LD_INT 4
4606: PPUSH
4607: LD_VAR 0 4
4611: PPUSH
4612: LD_VAR 0 5
4616: PPUSH
4617: LD_INT 5
4619: PPUSH
4620: LD_INT 0
4622: PPUSH
4623: CALL 3112 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4627: LD_EXP 50
4631: PUSH
4632: LD_INT 20
4634: PPUSH
4635: LD_VAR 0 1
4639: PPUSH
4640: CALL_OW 321
4644: PUSH
4645: LD_INT 1
4647: EQUAL
4648: AND
4649: IFFALSE 4666
// SetTech ( tech_SibDet , side , state_researched ) ;
4651: LD_INT 20
4653: PPUSH
4654: LD_VAR 0 1
4658: PPUSH
4659: LD_INT 2
4661: PPUSH
4662: CALL_OW 322
// if def_siberite_bomb = 1 then
4666: LD_EXP 53
4670: PUSH
4671: LD_INT 1
4673: EQUAL
4674: IFFALSE 4708
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4676: LD_INT 25
4678: PPUSH
4679: LD_VAR 0 1
4683: PPUSH
4684: LD_INT 1
4686: PPUSH
4687: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4691: LD_INT 73
4693: PPUSH
4694: LD_VAR 0 1
4698: PPUSH
4699: LD_INT 1
4701: PPUSH
4702: CALL_OW 322
// end else
4706: GO 4738
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4708: LD_INT 25
4710: PPUSH
4711: LD_VAR 0 1
4715: PPUSH
4716: LD_INT 0
4718: PPUSH
4719: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4723: LD_INT 73
4725: PPUSH
4726: LD_VAR 0 1
4730: PPUSH
4731: LD_INT 0
4733: PPUSH
4734: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4738: LD_INT 24
4740: PPUSH
4741: LD_VAR 0 1
4745: PPUSH
4746: LD_INT 0
4748: PPUSH
4749: CALL_OW 322
// global_defined := true ;
4753: LD_ADDR_LOC 3
4757: PUSH
4758: LD_INT 1
4760: ST_TO_ADDR
// end ;
4761: LD_VAR 0 2
4765: RET
// function prepare_sides ; var i ; begin
4766: LD_INT 0
4768: PPUSH
4769: PPUSH
// global_units := [ ] ;
4770: LD_ADDR_LOC 2
4774: PUSH
4775: EMPTY
4776: ST_TO_ADDR
// global_defined := false ;
4777: LD_ADDR_LOC 3
4781: PUSH
4782: LD_INT 0
4784: ST_TO_ADDR
// CountClassMembers ;
4785: CALL 4835 0 0
// for i := 1 to 8 do
4789: LD_ADDR_VAR 0 2
4793: PUSH
4794: DOUBLE
4795: LD_INT 1
4797: DEC
4798: ST_TO_ADDR
4799: LD_INT 8
4801: PUSH
4802: FOR_TO
4803: IFFALSE 4828
// if Side_Positions [ i ] then
4805: LD_EXP 18
4809: PUSH
4810: LD_VAR 0 2
4814: ARRAY
4815: IFFALSE 4826
// prepare_side ( i ) ;
4817: LD_VAR 0 2
4821: PPUSH
4822: CALL 3700 0 1
4826: GO 4802
4828: POP
4829: POP
// end ;
4830: LD_VAR 0 1
4834: RET
// function CountClassMembers ; var Mode ; begin
4835: LD_INT 0
4837: PPUSH
4838: PPUSH
// if No_Mechs then
4839: LD_EXP 55
4843: IFFALSE 4855
// Mode := 2 else
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: LD_INT 2
4852: ST_TO_ADDR
4853: GO 4863
// Mode := 1 ;
4855: LD_ADDR_VAR 0 2
4859: PUSH
4860: LD_INT 1
4862: ST_TO_ADDR
// neng := number_of_people ;
4863: LD_ADDR_LOC 5
4867: PUSH
4868: LD_EXP 3
4872: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4873: LD_ADDR_LOC 8
4877: PUSH
4878: LD_LOC 5
4882: PUSH
4883: LD_INT 4
4885: PUSH
4886: LD_INT 3
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_VAR 0 2
4897: ARRAY
4898: DIV
4899: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4900: LD_LOC 8
4904: PUSH
4905: LD_EXP 2
4909: LESS
4910: IFFALSE 4922
// nsol := number_of_breastworks ;
4912: LD_ADDR_LOC 8
4916: PUSH
4917: LD_EXP 2
4921: ST_TO_ADDR
// neng := neng - nsol ;
4922: LD_ADDR_LOC 5
4926: PUSH
4927: LD_LOC 5
4931: PUSH
4932: LD_LOC 8
4936: MINUS
4937: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4938: LD_ADDR_LOC 6
4942: PUSH
4943: LD_LOC 5
4947: PUSH
4948: LD_INT 3
4950: PUSH
4951: LD_INT 2
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_VAR 0 2
4962: ARRAY
4963: DIV
4964: ST_TO_ADDR
// if ( nsci < 1 ) then
4965: LD_LOC 6
4969: PUSH
4970: LD_INT 1
4972: LESS
4973: IFFALSE 4983
// nsci := 1 ;
4975: LD_ADDR_LOC 6
4979: PUSH
4980: LD_INT 1
4982: ST_TO_ADDR
// neng := neng - nsci ;
4983: LD_ADDR_LOC 5
4987: PUSH
4988: LD_LOC 5
4992: PUSH
4993: LD_LOC 6
4997: MINUS
4998: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4999: LD_ADDR_LOC 7
5003: PUSH
5004: LD_LOC 5
5008: PUSH
5009: LD_INT 2
5011: DIV
5012: PUSH
5013: LD_INT 0
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_VAR 0 2
5024: ARRAY
5025: ST_TO_ADDR
// neng := neng - nmech ;
5026: LD_ADDR_LOC 5
5030: PUSH
5031: LD_LOC 5
5035: PUSH
5036: LD_LOC 7
5040: MINUS
5041: ST_TO_ADDR
// if ( neng < 1 ) then
5042: LD_LOC 5
5046: PUSH
5047: LD_INT 1
5049: LESS
5050: IFFALSE 5060
// neng := 1 ;
5052: LD_ADDR_LOC 5
5056: PUSH
5057: LD_INT 1
5059: ST_TO_ADDR
// end ;
5060: LD_VAR 0 1
5064: RET
// starting begin disable ( 98 ) ;
5065: LD_INT 98
5067: DISABLE_MARKED
// disable ( 99 ) ;
5068: LD_INT 99
5070: DISABLE_MARKED
// disable ( 100 ) ;
5071: LD_INT 100
5073: DISABLE_MARKED
// disable ( 400 ) ;
5074: LD_INT 400
5076: DISABLE_MARKED
// disable ( 401 ) ;
5077: LD_INT 401
5079: DISABLE_MARKED
// disable ( 600 ) ;
5080: LD_INT 600
5082: DISABLE_MARKED
// mp_selectmsg := true ;
5083: LD_ADDR_OWVAR 13
5087: PUSH
5088: LD_INT 1
5090: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5091: CALL 68 0 0
// init_map ;
5095: CALL 1497 0 0
// init_respawning ;
5099: CALL 5807 0 0
// set_shared_visions_and_alliances ;
5103: CALL 2824 0 0
// ResetFog ;
5107: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5111: LD_OWVAR 2
5115: PPUSH
5116: CALL_OW 520
// prepare_sides ;
5120: CALL 4766 0 0
// Init_Win_Condition ;
5124: CALL 12488 0 0
// InitLimits ;
5128: CALL 11148 0 0
// ShowTimer ;
5132: CALL 12085 0 0
// music_nat := Side_Nations [ your_side ] ;
5136: LD_ADDR_OWVAR 71
5140: PUSH
5141: LD_EXP 19
5145: PUSH
5146: LD_OWVAR 2
5150: ARRAY
5151: ST_TO_ADDR
// if IAmSpec then
5152: CALL_OW 531
5156: IFFALSE 5180
// begin fogoff ( true ) ;
5158: LD_INT 1
5160: PPUSH
5161: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
5165: LD_INT 130
5167: PPUSH
5168: LD_INT 100
5170: PPUSH
5171: CALL_OW 86
// enable ( 400 ) ;
5175: LD_INT 400
5177: ENABLE_MARKED
// end else
5178: GO 5226
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5180: LD_EXP 24
5184: PUSH
5185: LD_EXP 18
5189: PUSH
5190: LD_OWVAR 2
5194: ARRAY
5195: ARRAY
5196: PUSH
5197: LD_INT 1
5199: ARRAY
5200: PPUSH
5201: LD_EXP 24
5205: PUSH
5206: LD_EXP 18
5210: PUSH
5211: LD_OWVAR 2
5215: ARRAY
5216: ARRAY
5217: PUSH
5218: LD_INT 2
5220: ARRAY
5221: PPUSH
5222: CALL_OW 86
// end ; InitApeman ;
5226: CALL 6592 0 0
// if def_builduptime then
5230: LD_EXP 54
5234: IFFALSE 5240
// BeginBuildUp ;
5236: CALL 8315 0 0
// end ;
5240: END
// every 0 0$1 do
5241: GO 5243
5243: DISABLE
// if ( def_siberite_bomb > 1 ) then
5244: LD_EXP 53
5248: PUSH
5249: LD_INT 1
5251: GREATER
5252: IFFALSE 5267
// begin wait ( siberite_bomb_Delay ) ;
5254: LD_EXP 13
5258: PPUSH
5259: CALL_OW 67
// EnableSibFiss ;
5263: CALL 5268 0 0
// end ;
5267: END
// function EnableSibFiss ; var i ; begin
5268: LD_INT 0
5270: PPUSH
5271: PPUSH
// for i := 1 to 8 do
5272: LD_ADDR_VAR 0 2
5276: PUSH
5277: DOUBLE
5278: LD_INT 1
5280: DEC
5281: ST_TO_ADDR
5282: LD_INT 8
5284: PUSH
5285: FOR_TO
5286: IFFALSE 5332
// if Side_Positions [ i ] then
5288: LD_EXP 18
5292: PUSH
5293: LD_VAR 0 2
5297: ARRAY
5298: IFFALSE 5330
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5300: LD_INT 25
5302: PPUSH
5303: LD_VAR 0 2
5307: PPUSH
5308: LD_INT 1
5310: PPUSH
5311: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5315: LD_INT 73
5317: PPUSH
5318: LD_VAR 0 2
5322: PPUSH
5323: LD_INT 1
5325: PPUSH
5326: CALL_OW 322
// end ;
5330: GO 5285
5332: POP
5333: POP
// end ; end_of_file
5334: LD_VAR 0 1
5338: RET
// every 1 1$0 + 0 0$0.3 do
5339: GO 5341
5341: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5342: LD_INT 4
5344: PPUSH
5345: LD_INT 5
5347: PPUSH
5348: CALL_OW 12
5352: PPUSH
5353: LD_INT 1
5355: PPUSH
5356: CALL_OW 57
// enable ;
5360: ENABLE
// end ;
5361: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5362: GO 5364
5364: DISABLE
5365: LD_INT 0
5367: PPUSH
5368: PPUSH
// begin case tick of 1 .. 1 1$0 :
5369: LD_OWVAR 1
5373: PUSH
5374: LD_INT 1
5376: DOUBLE
5377: GREATEREQUAL
5378: IFFALSE 5386
5380: LD_INT 2100
5382: DOUBLE
5383: LESSEQUAL
5384: IFTRUE 5388
5386: GO 5416
5388: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5389: LD_EXP 7
5393: PUSH
5394: LD_INT 100
5396: DIVREAL
5397: PUSH
5398: LD_INT 350
5400: PPUSH
5401: LD_INT 700
5403: PPUSH
5404: CALL_OW 12
5408: MUL
5409: PPUSH
5410: CALL_OW 67
5414: GO 5718
5416: LD_INT 2100
5418: PUSH
5419: LD_INT 1
5421: PLUS
5422: DOUBLE
5423: GREATEREQUAL
5424: IFFALSE 5432
5426: LD_INT 10500
5428: DOUBLE
5429: LESSEQUAL
5430: IFTRUE 5434
5432: GO 5462
5434: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5435: LD_EXP 7
5439: PUSH
5440: LD_INT 100
5442: DIVREAL
5443: PUSH
5444: LD_INT 700
5446: PPUSH
5447: LD_INT 1225
5449: PPUSH
5450: CALL_OW 12
5454: MUL
5455: PPUSH
5456: CALL_OW 67
5460: GO 5718
5462: LD_INT 10500
5464: PUSH
5465: LD_INT 1
5467: PLUS
5468: DOUBLE
5469: GREATEREQUAL
5470: IFFALSE 5478
5472: LD_INT 21000
5474: DOUBLE
5475: LESSEQUAL
5476: IFTRUE 5480
5478: GO 5508
5480: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5481: LD_EXP 7
5485: PUSH
5486: LD_INT 100
5488: DIVREAL
5489: PUSH
5490: LD_INT 1225
5492: PPUSH
5493: LD_INT 1750
5495: PPUSH
5496: CALL_OW 12
5500: MUL
5501: PPUSH
5502: CALL_OW 67
5506: GO 5718
5508: LD_INT 21000
5510: PUSH
5511: LD_INT 1
5513: PLUS
5514: DOUBLE
5515: GREATEREQUAL
5516: IFFALSE 5524
5518: LD_INT 42000
5520: DOUBLE
5521: LESSEQUAL
5522: IFTRUE 5526
5524: GO 5554
5526: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5527: LD_EXP 7
5531: PUSH
5532: LD_INT 100
5534: DIVREAL
5535: PUSH
5536: LD_INT 1750
5538: PPUSH
5539: LD_INT 2450
5541: PPUSH
5542: CALL_OW 12
5546: MUL
5547: PPUSH
5548: CALL_OW 67
5552: GO 5718
5554: LD_INT 42000
5556: PUSH
5557: LD_INT 1
5559: PLUS
5560: DOUBLE
5561: GREATEREQUAL
5562: IFFALSE 5570
5564: LD_INT 63000
5566: DOUBLE
5567: LESSEQUAL
5568: IFTRUE 5572
5570: GO 5600
5572: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5573: LD_EXP 7
5577: PUSH
5578: LD_INT 100
5580: DIVREAL
5581: PUSH
5582: LD_INT 2450
5584: PPUSH
5585: LD_INT 2800
5587: PPUSH
5588: CALL_OW 12
5592: MUL
5593: PPUSH
5594: CALL_OW 67
5598: GO 5718
5600: LD_INT 63000
5602: PUSH
5603: LD_INT 1
5605: PLUS
5606: DOUBLE
5607: GREATEREQUAL
5608: IFFALSE 5616
5610: LD_INT 105000
5612: DOUBLE
5613: LESSEQUAL
5614: IFTRUE 5618
5616: GO 5646
5618: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5619: LD_EXP 7
5623: PUSH
5624: LD_INT 100
5626: DIVREAL
5627: PUSH
5628: LD_INT 2800
5630: PPUSH
5631: LD_INT 3325
5633: PPUSH
5634: CALL_OW 12
5638: MUL
5639: PPUSH
5640: CALL_OW 67
5644: GO 5718
5646: LD_INT 105000
5648: PUSH
5649: LD_INT 1
5651: PLUS
5652: DOUBLE
5653: GREATEREQUAL
5654: IFFALSE 5662
5656: LD_INT 630000
5658: DOUBLE
5659: LESSEQUAL
5660: IFTRUE 5664
5662: GO 5692
5664: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
5665: LD_EXP 7
5669: PUSH
5670: LD_INT 100
5672: DIVREAL
5673: PUSH
5674: LD_INT 3325
5676: PPUSH
5677: LD_INT 4200
5679: PPUSH
5680: CALL_OW 12
5684: MUL
5685: PPUSH
5686: CALL_OW 67
5690: GO 5718
5692: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5693: LD_EXP 7
5697: PUSH
5698: LD_INT 100
5700: DIVREAL
5701: PUSH
5702: LD_INT 4200
5704: PPUSH
5705: LD_INT 5250
5707: PPUSH
5708: CALL_OW 12
5712: MUL
5713: PPUSH
5714: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5718: LD_ADDR_VAR 0 2
5722: PUSH
5723: LD_INT 3
5725: PPUSH
5726: LD_INT 5
5728: PPUSH
5729: CALL_OW 12
5733: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5734: LD_ADDR_VAR 0 1
5738: PUSH
5739: LD_EXP 18
5743: PUSH
5744: LD_INT 0
5746: PUSH
5747: EMPTY
5748: LIST
5749: DIFF
5750: PUSH
5751: FOR_IN
5752: IFFALSE 5801
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5754: LD_VAR 0 2
5758: PPUSH
5759: LD_EXP 24
5763: PUSH
5764: LD_VAR 0 1
5768: ARRAY
5769: PUSH
5770: LD_INT 1
5772: ARRAY
5773: PPUSH
5774: LD_EXP 24
5778: PUSH
5779: LD_VAR 0 1
5783: ARRAY
5784: PUSH
5785: LD_INT 2
5787: ARRAY
5788: PPUSH
5789: LD_INT 20
5791: PPUSH
5792: LD_INT 1
5794: PPUSH
5795: CALL_OW 56
5799: GO 5751
5801: POP
5802: POP
// enable ;
5803: ENABLE
// end ; end_of_file
5804: PPOPN 2
5806: END
// var respawn , inqueue ; export function init_respawning ; begin
5807: LD_INT 0
5809: PPUSH
// respawn := Rand ( 1 , 8 ) ;
5810: LD_ADDR_LOC 9
5814: PUSH
5815: LD_INT 1
5817: PPUSH
5818: LD_INT 8
5820: PPUSH
5821: CALL_OW 12
5825: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5826: LD_ADDR_LOC 10
5830: PUSH
5831: LD_INT 0
5833: PUSH
5834: LD_INT 0
5836: PUSH
5837: LD_INT 0
5839: PUSH
5840: LD_INT 0
5842: PUSH
5843: LD_INT 0
5845: PUSH
5846: LD_INT 0
5848: PUSH
5849: LD_INT 0
5851: PUSH
5852: LD_INT 0
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: ST_TO_ADDR
// end ;
5865: LD_VAR 0 1
5869: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5870: GO 5872
5872: DISABLE
5873: LD_INT 0
5875: PPUSH
5876: PPUSH
5877: PPUSH
5878: PPUSH
// begin if respawning_time_max = 0 then
5879: LD_EXP 12
5883: PUSH
5884: LD_INT 0
5886: EQUAL
5887: IFFALSE 5891
// exit ;
5889: GO 6398
// if respawn = 8 then
5891: LD_LOC 9
5895: PUSH
5896: LD_INT 8
5898: EQUAL
5899: IFFALSE 5911
// respawn := 1 else
5901: LD_ADDR_LOC 9
5905: PUSH
5906: LD_INT 1
5908: ST_TO_ADDR
5909: GO 5925
// respawn := respawn + 1 ;
5911: LD_ADDR_LOC 9
5915: PUSH
5916: LD_LOC 9
5920: PUSH
5921: LD_INT 1
5923: PLUS
5924: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5925: LD_EXP 18
5929: PUSH
5930: LD_LOC 9
5934: ARRAY
5935: PUSH
5936: LD_LOC 10
5940: PUSH
5941: LD_LOC 9
5945: ARRAY
5946: NOT
5947: AND
5948: IFFALSE 6397
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5950: LD_ADDR_VAR 0 1
5954: PUSH
5955: LD_INT 21
5957: PUSH
5958: LD_INT 1
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PUSH
5965: LD_INT 22
5967: PUSH
5968: LD_LOC 9
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 3
5979: PUSH
5980: LD_INT 23
5982: PUSH
5983: LD_INT 0
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 69
6000: ST_TO_ADDR
// if n < number_of_people then
6001: LD_VAR 0 1
6005: PUSH
6006: LD_EXP 3
6010: LESS
6011: IFFALSE 6394
// begin aktresp := respawn ;
6013: LD_ADDR_VAR 0 3
6017: PUSH
6018: LD_LOC 9
6022: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
6023: LD_ADDR_LOC 10
6027: PUSH
6028: LD_LOC 10
6032: PPUSH
6033: LD_VAR 0 3
6037: PPUSH
6038: LD_INT 1
6040: PPUSH
6041: CALL_OW 1
6045: ST_TO_ADDR
// enable ;
6046: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6047: LD_EXP 11
6051: PPUSH
6052: LD_EXP 12
6056: PPUSH
6057: CALL_OW 12
6061: PPUSH
6062: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6066: LD_ADDR_LOC 10
6070: PUSH
6071: LD_LOC 10
6075: PPUSH
6076: LD_VAR 0 3
6080: PPUSH
6081: LD_INT 0
6083: PPUSH
6084: CALL_OW 1
6088: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6089: LD_ADDR_VAR 0 2
6093: PUSH
6094: LD_INT 21
6096: PUSH
6097: LD_INT 3
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 2
6106: PUSH
6107: LD_INT 30
6109: PUSH
6110: LD_INT 0
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 30
6119: PUSH
6120: LD_INT 1
6122: PUSH
6123: EMPTY
6124: LIST
6125: LIST
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: LIST
6131: PUSH
6132: LD_INT 50
6134: PUSH
6135: EMPTY
6136: LIST
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_VAR 0 3
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: PPUSH
6156: CALL_OW 69
6160: ST_TO_ADDR
// if building_list = 0 then
6161: LD_VAR 0 2
6165: PUSH
6166: LD_INT 0
6168: EQUAL
6169: IFFALSE 6214
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6171: LD_ADDR_VAR 0 2
6175: PUSH
6176: LD_INT 21
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 50
6188: PUSH
6189: EMPTY
6190: LIST
6191: PUSH
6192: LD_INT 22
6194: PUSH
6195: LD_VAR 0 3
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: PPUSH
6209: CALL_OW 69
6213: ST_TO_ADDR
// if building_list = 0 then
6214: LD_VAR 0 2
6218: PUSH
6219: LD_INT 0
6221: EQUAL
6222: IFFALSE 6226
// exit ;
6224: GO 6398
// hc_name :=  ;
6226: LD_ADDR_OWVAR 26
6230: PUSH
6231: LD_STRING 
6233: ST_TO_ADDR
// hc_importance := 0 ;
6234: LD_ADDR_OWVAR 32
6238: PUSH
6239: LD_INT 0
6241: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6242: LD_INT 0
6244: PPUSH
6245: LD_INT 0
6247: PPUSH
6248: LD_EXP 4
6252: PUSH
6253: LD_INT 2
6255: DIV
6256: PPUSH
6257: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6261: LD_ADDR_OWVAR 21
6265: PUSH
6266: LD_EXP 19
6270: PUSH
6271: LD_VAR 0 3
6275: ARRAY
6276: ST_TO_ADDR
// uc_side := aktresp ;
6277: LD_ADDR_OWVAR 20
6281: PUSH
6282: LD_VAR 0 3
6286: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6287: LD_ADDR_VAR 0 4
6291: PUSH
6292: LD_VAR 0 2
6296: PUSH
6297: LD_INT 1
6299: PPUSH
6300: LD_VAR 0 2
6304: PUSH
6305: LD_INT 0
6307: PLUS
6308: PPUSH
6309: CALL_OW 12
6313: ARRAY
6314: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6315: LD_VAR 0 4
6319: PPUSH
6320: CALL_OW 266
6324: PUSH
6325: LD_INT 0
6327: PUSH
6328: LD_INT 1
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: IN
6335: IFFALSE 6347
// n = 25 else
6337: LD_ADDR_VAR 0 1
6341: PUSH
6342: LD_INT 25
6344: ST_TO_ADDR
6345: GO 6355
// n = 10 ;
6347: LD_ADDR_VAR 0 1
6351: PUSH
6352: LD_INT 10
6354: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6355: CALL_OW 44
6359: PPUSH
6360: LD_VAR 0 4
6364: PPUSH
6365: CALL_OW 250
6369: PPUSH
6370: LD_VAR 0 4
6374: PPUSH
6375: CALL_OW 251
6379: PPUSH
6380: LD_VAR 0 1
6384: PPUSH
6385: LD_INT 1
6387: PPUSH
6388: CALL_OW 50
// end else
6392: GO 6395
// enable ;
6394: ENABLE
// end else
6395: GO 6398
// enable ;
6397: ENABLE
// end ; end_of_file
6398: PPOPN 4
6400: END
// every 20 20$00 trigger apemanNumber do
6401: LD_EXP 31
6405: IFFALSE 6438
6407: GO 6409
6409: DISABLE
// begin enable ;
6410: ENABLE
// if apeLevel >= 8 then
6411: LD_EXP 36
6415: PUSH
6416: LD_INT 8
6418: GREATEREQUAL
6419: IFFALSE 6424
// disable else
6421: DISABLE
6422: GO 6438
// apeLevel := apeLevel + 1 ;
6424: LD_ADDR_EXP 36
6428: PUSH
6429: LD_EXP 36
6433: PUSH
6434: LD_INT 1
6436: PLUS
6437: ST_TO_ADDR
// end ;
6438: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6439: LD_EXP 31
6443: PUSH
6444: LD_EXP 32
6448: LESS
6449: IFFALSE 6589
6451: GO 6453
6453: DISABLE
6454: LD_INT 0
6456: PPUSH
6457: PPUSH
6458: PPUSH
6459: PPUSH
// begin enable ;
6460: ENABLE
// for i := 1 to apemanPos do
6461: LD_ADDR_VAR 0 1
6465: PUSH
6466: DOUBLE
6467: LD_INT 1
6469: DEC
6470: ST_TO_ADDR
6471: LD_EXP 34
6475: PUSH
6476: FOR_TO
6477: IFFALSE 6587
// begin if apemanPlayerCount [ i ] then
6479: LD_EXP 35
6483: PUSH
6484: LD_VAR 0 1
6488: ARRAY
6489: IFFALSE 6585
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6491: LD_EXP 35
6495: PUSH
6496: LD_VAR 0 1
6500: ARRAY
6501: PUSH
6502: LD_EXP 34
6506: PUSH
6507: LD_VAR 0 1
6511: ARRAY
6512: GREATER
6513: IFFALSE 6585
// begin ape := PrepareApeman ;
6515: LD_ADDR_VAR 0 2
6519: PUSH
6520: CALL 7108 0 0
6524: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6525: LD_VAR 0 2
6529: PPUSH
6530: LD_EXP 37
6534: PUSH
6535: LD_VAR 0 1
6539: ARRAY
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6548: LD_ADDR_EXP 34
6552: PUSH
6553: LD_EXP 34
6557: PPUSH
6558: LD_VAR 0 1
6562: PPUSH
6563: LD_EXP 34
6567: PUSH
6568: LD_VAR 0 1
6572: ARRAY
6573: PUSH
6574: LD_VAR 0 2
6578: UNION
6579: PPUSH
6580: CALL_OW 1
6584: ST_TO_ADDR
// end ; end ; end ;
6585: GO 6476
6587: POP
6588: POP
// end ;
6589: PPOPN 4
6591: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6592: LD_INT 0
6594: PPUSH
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
6599: PPUSH
6600: PPUSH
// playersAmount := 0 ;
6601: LD_ADDR_VAR 0 3
6605: PUSH
6606: LD_INT 0
6608: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6609: LD_ADDR_VAR 0 7
6613: PUSH
6614: LD_INT 1
6616: PUSH
6617: LD_INT 2
6619: PUSH
6620: LD_INT 3
6622: PUSH
6623: LD_INT 4
6625: PUSH
6626: LD_INT 5
6628: PUSH
6629: LD_INT 6
6631: PUSH
6632: LD_INT 7
6634: PUSH
6635: LD_INT 8
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6648: LD_ADDR_EXP 37
6652: PUSH
6653: LD_INT 0
6655: PUSH
6656: LD_INT 0
6658: PUSH
6659: LD_INT 0
6661: PUSH
6662: LD_INT 0
6664: PUSH
6665: LD_INT 0
6667: PUSH
6668: LD_INT 0
6670: PUSH
6671: LD_INT 0
6673: PUSH
6674: LD_INT 0
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: ST_TO_ADDR
// for j = 1 to Side_Positions do
6687: LD_ADDR_VAR 0 4
6691: PUSH
6692: DOUBLE
6693: LD_INT 1
6695: DEC
6696: ST_TO_ADDR
6697: LD_EXP 18
6701: PUSH
6702: FOR_TO
6703: IFFALSE 6770
// if Side_Positions [ j ] then
6705: LD_EXP 18
6709: PUSH
6710: LD_VAR 0 4
6714: ARRAY
6715: IFFALSE 6768
// begin playersAmount := playersAmount + 1 ;
6717: LD_ADDR_VAR 0 3
6721: PUSH
6722: LD_VAR 0 3
6726: PUSH
6727: LD_INT 1
6729: PLUS
6730: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6731: LD_ADDR_EXP 37
6735: PUSH
6736: LD_EXP 37
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_VAR 0 7
6750: PUSH
6751: LD_EXP 18
6755: PUSH
6756: LD_VAR 0 4
6760: ARRAY
6761: ARRAY
6762: PPUSH
6763: CALL_OW 1
6767: ST_TO_ADDR
// end ;
6768: GO 6702
6770: POP
6771: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6772: LD_ADDR_EXP 33
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: LD_EXP 9
6784: MUL
6785: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6786: LD_ADDR_EXP 31
6790: PUSH
6791: LD_VAR 0 3
6795: PUSH
6796: LD_EXP 33
6800: MUL
6801: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6802: LD_ADDR_EXP 32
6806: PUSH
6807: LD_EXP 31
6811: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6812: LD_ADDR_EXP 34
6816: PUSH
6817: LD_INT 0
6819: PUSH
6820: LD_INT 0
6822: PUSH
6823: LD_INT 0
6825: PUSH
6826: LD_INT 0
6828: PUSH
6829: LD_INT 0
6831: PUSH
6832: LD_INT 0
6834: PUSH
6835: LD_INT 0
6837: PUSH
6838: LD_INT 0
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6851: LD_ADDR_EXP 35
6855: PUSH
6856: LD_INT 0
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: LD_INT 0
6864: PUSH
6865: LD_INT 0
6867: PUSH
6868: LD_INT 0
6870: PUSH
6871: LD_INT 0
6873: PUSH
6874: LD_INT 0
6876: PUSH
6877: LD_INT 0
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: ST_TO_ADDR
// apeLevel := 1 ;
6890: LD_ADDR_EXP 36
6894: PUSH
6895: LD_INT 1
6897: ST_TO_ADDR
// if not apemanNumber then
6898: LD_EXP 31
6902: NOT
6903: IFFALSE 6907
// exit ;
6905: GO 7103
// for i := 1 to apemanPerPlayer do
6907: LD_ADDR_VAR 0 2
6911: PUSH
6912: DOUBLE
6913: LD_INT 1
6915: DEC
6916: ST_TO_ADDR
6917: LD_EXP 33
6921: PUSH
6922: FOR_TO
6923: IFFALSE 7101
// begin for j := 1 to Side_Positions do
6925: LD_ADDR_VAR 0 4
6929: PUSH
6930: DOUBLE
6931: LD_INT 1
6933: DEC
6934: ST_TO_ADDR
6935: LD_EXP 18
6939: PUSH
6940: FOR_TO
6941: IFFALSE 7097
// if Side_Positions [ j ] then
6943: LD_EXP 18
6947: PUSH
6948: LD_VAR 0 4
6952: ARRAY
6953: IFFALSE 7095
// begin pos := Side_Positions [ j ] ;
6955: LD_ADDR_VAR 0 6
6959: PUSH
6960: LD_EXP 18
6964: PUSH
6965: LD_VAR 0 4
6969: ARRAY
6970: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6971: LD_ADDR_EXP 35
6975: PUSH
6976: LD_EXP 35
6980: PPUSH
6981: LD_VAR 0 4
6985: PPUSH
6986: LD_EXP 35
6990: PUSH
6991: LD_VAR 0 4
6995: ARRAY
6996: PUSH
6997: LD_INT 1
6999: PLUS
7000: PPUSH
7001: CALL_OW 1
7005: ST_TO_ADDR
// ape := PrepareApeman ;
7006: LD_ADDR_VAR 0 5
7010: PUSH
7011: CALL 7108 0 0
7015: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7016: LD_ADDR_EXP 34
7020: PUSH
7021: LD_EXP 34
7025: PPUSH
7026: LD_VAR 0 4
7030: PPUSH
7031: LD_EXP 34
7035: PUSH
7036: LD_VAR 0 4
7040: ARRAY
7041: PPUSH
7042: LD_EXP 34
7046: PUSH
7047: LD_VAR 0 4
7051: ARRAY
7052: PUSH
7053: LD_INT 1
7055: PLUS
7056: PPUSH
7057: LD_VAR 0 5
7061: PPUSH
7062: CALL_OW 1
7066: PPUSH
7067: CALL_OW 1
7071: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7072: LD_VAR 0 5
7076: PPUSH
7077: LD_EXP 37
7081: PUSH
7082: LD_VAR 0 4
7086: ARRAY
7087: PPUSH
7088: LD_INT 0
7090: PPUSH
7091: CALL_OW 49
// end ;
7095: GO 6940
7097: POP
7098: POP
// end ;
7099: GO 6922
7101: POP
7102: POP
// end ;
7103: LD_VAR 0 1
7107: RET
// export function PrepareApeman ; var bonus ; begin
7108: LD_INT 0
7110: PPUSH
7111: PPUSH
// uc_side := 0 ;
7112: LD_ADDR_OWVAR 20
7116: PUSH
7117: LD_INT 0
7119: ST_TO_ADDR
// uc_nation := 0 ;
7120: LD_ADDR_OWVAR 21
7124: PUSH
7125: LD_INT 0
7127: ST_TO_ADDR
// InitHc ;
7128: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7132: LD_ADDR_VAR 0 2
7136: PUSH
7137: LD_INT 1
7139: NEG
7140: PUSH
7141: LD_INT 0
7143: PUSH
7144: LD_INT 1
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: PUSH
7152: LD_OWVAR 1
7156: PUSH
7157: LD_INT 3
7159: MOD
7160: PUSH
7161: LD_INT 1
7163: PLUS
7164: ARRAY
7165: ST_TO_ADDR
// hc_class := class_apeman ;
7166: LD_ADDR_OWVAR 28
7170: PUSH
7171: LD_INT 12
7173: ST_TO_ADDR
// hc_gallery :=  ;
7174: LD_ADDR_OWVAR 33
7178: PUSH
7179: LD_STRING 
7181: ST_TO_ADDR
// hc_name :=  ;
7182: LD_ADDR_OWVAR 26
7186: PUSH
7187: LD_STRING 
7189: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7190: LD_ADDR_OWVAR 31
7194: PUSH
7195: LD_EXP 36
7199: PUSH
7200: LD_VAR 0 2
7204: PLUS
7205: PUSH
7206: LD_EXP 36
7210: PUSH
7211: LD_VAR 0 2
7215: PLUS
7216: PUSH
7217: LD_EXP 36
7221: PUSH
7222: LD_VAR 0 2
7226: PLUS
7227: PUSH
7228: LD_EXP 36
7232: PUSH
7233: LD_VAR 0 2
7237: PLUS
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7245: LD_ADDR_OWVAR 35
7249: PUSH
7250: LD_INT 10
7252: PUSH
7253: LD_VAR 0 2
7257: MUL
7258: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7259: LD_ADDR_OWVAR 29
7263: PUSH
7264: LD_INT 12
7266: PUSH
7267: LD_INT 10
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: ST_TO_ADDR
// result := CreateHuman ;
7274: LD_ADDR_VAR 0 1
7278: PUSH
7279: CALL_OW 44
7283: ST_TO_ADDR
// end ;
7284: LD_VAR 0 1
7288: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7289: LD_INT 0
7291: PPUSH
7292: PPUSH
7293: PPUSH
// if not ape then
7294: LD_VAR 0 1
7298: NOT
7299: IFFALSE 7303
// exit ;
7301: GO 7428
// side := GetSide ( ape ) ;
7303: LD_ADDR_VAR 0 3
7307: PUSH
7308: LD_VAR 0 1
7312: PPUSH
7313: CALL_OW 255
7317: ST_TO_ADDR
// if not side then
7318: LD_VAR 0 3
7322: NOT
7323: IFFALSE 7377
// begin for i = 1 to apemanPos do
7325: LD_ADDR_VAR 0 4
7329: PUSH
7330: DOUBLE
7331: LD_INT 1
7333: DEC
7334: ST_TO_ADDR
7335: LD_EXP 34
7339: PUSH
7340: FOR_TO
7341: IFFALSE 7375
// if ape in apemanPos [ i ] then
7343: LD_VAR 0 1
7347: PUSH
7348: LD_EXP 34
7352: PUSH
7353: LD_VAR 0 4
7357: ARRAY
7358: IN
7359: IFFALSE 7373
// begin side := i ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: LD_VAR 0 4
7370: ST_TO_ADDR
// break ;
7371: GO 7375
// end ;
7373: GO 7340
7375: POP
7376: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7377: LD_ADDR_EXP 34
7381: PUSH
7382: LD_EXP 34
7386: PPUSH
7387: LD_VAR 0 3
7391: PPUSH
7392: LD_EXP 34
7396: PUSH
7397: LD_VAR 0 3
7401: ARRAY
7402: PUSH
7403: LD_VAR 0 1
7407: DIFF
7408: PPUSH
7409: CALL_OW 1
7413: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7414: LD_ADDR_EXP 31
7418: PUSH
7419: LD_EXP 31
7423: PUSH
7424: LD_INT 1
7426: MINUS
7427: ST_TO_ADDR
// end ; end_of_file
7428: LD_VAR 0 2
7432: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7433: LD_VAR 0 1
7437: PPUSH
7438: CALL_OW 266
7442: PUSH
7443: LD_INT 0
7445: PUSH
7446: LD_INT 1
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: IN
7453: IFFALSE 7478
// SetBName ( b , @ & GetSide ( b ) ) ;
7455: LD_VAR 0 1
7459: PPUSH
7460: LD_STRING @
7462: PUSH
7463: LD_VAR 0 1
7467: PPUSH
7468: CALL_OW 255
7472: STR
7473: PPUSH
7474: CALL_OW 500
// if def_game_rules then
7478: LD_EXP 40
7482: IFFALSE 7519
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7484: LD_VAR 0 1
7488: PPUSH
7489: LD_VAR 0 1
7493: PPUSH
7494: CALL_OW 266
7498: PPUSH
7499: LD_VAR 0 1
7503: PPUSH
7504: CALL_OW 255
7508: PPUSH
7509: LD_INT 0
7511: PPUSH
7512: LD_INT 1
7514: PPUSH
7515: CALL 11549 0 5
// end ;
7519: PPOPN 2
7521: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 266
7531: PUSH
7532: LD_INT 0
7534: PUSH
7535: LD_INT 1
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: IN
7542: IFFALSE 7567
// SetBName ( b , @ & GetSide ( b ) ) ;
7544: LD_VAR 0 1
7548: PPUSH
7549: LD_STRING @
7551: PUSH
7552: LD_VAR 0 1
7556: PPUSH
7557: CALL_OW 255
7561: STR
7562: PPUSH
7563: CALL_OW 500
// if def_game_rules then
7567: LD_EXP 40
7571: IFFALSE 7610
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7573: LD_VAR 0 1
7577: PPUSH
7578: LD_VAR 0 1
7582: PPUSH
7583: CALL_OW 266
7587: PPUSH
7588: LD_VAR 0 1
7592: PPUSH
7593: CALL_OW 255
7597: PPUSH
7598: LD_VAR 0 2
7602: PPUSH
7603: LD_INT 1
7605: PPUSH
7606: CALL 11549 0 5
// end ;
7610: PPOPN 3
7612: END
// on VehicleConstructed ( veh , fac ) do var side ;
7613: LD_INT 0
7615: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL_OW 263
7625: PUSH
7626: LD_INT 5
7628: EQUAL
7629: IFFALSE 7771
// begin side := GetSide ( veh ) ;
7631: LD_ADDR_VAR 0 3
7635: PUSH
7636: LD_VAR 0 1
7640: PPUSH
7641: CALL_OW 255
7645: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7646: LD_ADDR_EXP 34
7650: PUSH
7651: LD_EXP 34
7655: PPUSH
7656: LD_VAR 0 3
7660: PPUSH
7661: LD_EXP 34
7665: PUSH
7666: LD_VAR 0 3
7670: ARRAY
7671: PPUSH
7672: LD_INT 52
7674: PUSH
7675: EMPTY
7676: LIST
7677: PPUSH
7678: CALL_OW 72
7682: PUSH
7683: LD_INT 22
7685: PUSH
7686: LD_VAR 0 3
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 33
7700: PUSH
7701: LD_INT 5
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 25
7710: PUSH
7711: LD_INT 12
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 25
7720: PUSH
7721: LD_INT 15
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 25
7730: PUSH
7731: LD_INT 16
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 25
7740: PUSH
7741: LD_INT 17
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PPUSH
7760: CALL_OW 69
7764: UNION
7765: PPUSH
7766: CALL_OW 1
7770: ST_TO_ADDR
// end ; end ;
7771: PPOPN 3
7773: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7774: LD_INT 0
7776: PPUSH
7777: PPUSH
7778: PPUSH
7779: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7780: LD_VAR 0 1
7784: PPUSH
7785: CALL_OW 257
7789: PUSH
7790: LD_INT 12
7792: PUSH
7793: LD_INT 15
7795: PUSH
7796: LD_INT 17
7798: PUSH
7799: LD_INT 16
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: IN
7808: PUSH
7809: LD_VAR 0 1
7813: PPUSH
7814: CALL_OW 263
7818: PUSH
7819: LD_INT 5
7821: EQUAL
7822: OR
7823: IFFALSE 7834
// ApeKilled ( j ) ;
7825: LD_VAR 0 1
7829: PPUSH
7830: CALL 7289 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 266
7843: PUSH
7844: LD_INT 0
7846: PUSH
7847: LD_INT 1
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: IN
7854: IFFALSE 7936
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7856: LD_ADDR_VAR 0 4
7860: PUSH
7861: LD_EXP 18
7865: PUSH
7866: LD_VAR 0 1
7870: PPUSH
7871: CALL_OW 255
7875: ARRAY
7876: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7877: LD_ADDR_VAR 0 2
7881: PUSH
7882: LD_EXP 24
7886: PUSH
7887: LD_VAR 0 4
7891: ARRAY
7892: PUSH
7893: LD_INT 1
7895: ARRAY
7896: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7897: LD_ADDR_VAR 0 3
7901: PUSH
7902: LD_EXP 24
7906: PUSH
7907: LD_VAR 0 4
7911: ARRAY
7912: PUSH
7913: LD_INT 2
7915: ARRAY
7916: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7917: LD_VAR 0 2
7921: PPUSH
7922: LD_VAR 0 3
7926: PPUSH
7927: CALL_OW 420
7931: PPUSH
7932: CALL_OW 419
// end ; if def_game_rules then
7936: LD_EXP 40
7940: IFFALSE 8039
// if ( GetType ( j ) = 3 ) then
7942: LD_VAR 0 1
7946: PPUSH
7947: CALL_OW 247
7951: PUSH
7952: LD_INT 3
7954: EQUAL
7955: IFFALSE 7995
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7957: LD_VAR 0 1
7961: PPUSH
7962: LD_VAR 0 1
7966: PPUSH
7967: CALL_OW 266
7971: PPUSH
7972: LD_VAR 0 1
7976: PPUSH
7977: CALL_OW 255
7981: PPUSH
7982: LD_INT 0
7984: PPUSH
7985: LD_INT 1
7987: NEG
7988: PPUSH
7989: CALL 11549 0 5
7993: GO 8039
// if ( GetChassis ( j ) = 25 ) then
7995: LD_VAR 0 1
7999: PPUSH
8000: CALL_OW 265
8004: PUSH
8005: LD_INT 25
8007: EQUAL
8008: IFFALSE 8039
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8010: LD_VAR 0 1
8014: PPUSH
8015: LD_INT 37
8017: PPUSH
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 255
8027: PPUSH
8028: LD_INT 0
8030: PPUSH
8031: LD_INT 1
8033: NEG
8034: PPUSH
8035: CALL 11549 0 5
// end ;
8039: PPOPN 5
8041: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8042: LD_EXP 40
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: CALL_OW 265
8056: PUSH
8057: LD_INT 25
8059: EQUAL
8060: AND
8061: IFFALSE 8093
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8063: LD_VAR 0 1
8067: PPUSH
8068: LD_INT 37
8070: PPUSH
8071: LD_VAR 0 1
8075: PPUSH
8076: CALL_OW 255
8080: PPUSH
8081: LD_VAR 0 3
8085: PPUSH
8086: LD_INT 1
8088: PPUSH
8089: CALL 11549 0 5
// end ;
8093: PPOPN 4
8095: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8096: LD_VAR 0 1
8100: PPUSH
8101: LD_VAR 0 2
8105: PPUSH
8106: LD_VAR 0 3
8110: PPUSH
8111: LD_OWVAR 2
8115: PPUSH
8116: CALL 12249 0 4
8120: PPOPN 3
8122: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8123: LD_INT 0
8125: PPUSH
8126: PPUSH
// for un in battle_flags_id do
8127: LD_ADDR_VAR 0 2
8131: PUSH
8132: LD_EXP 29
8136: PUSH
8137: FOR_IN
8138: IFFALSE 8213
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8140: LD_VAR 0 2
8144: PPUSH
8145: LD_INT 1
8147: PUSH
8148: LD_LOC 11
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_INT 2
8159: PUSH
8160: LD_LOC 11
8164: PUSH
8165: LD_INT 2
8167: DIV
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: LD_LOC 11
8180: PUSH
8181: LD_INT 5
8183: DIV
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 20
8191: PUSH
8192: LD_LOC 11
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: PPUSH
8207: CALL_OW 423
8211: GO 8137
8213: POP
8214: POP
// end ;
8215: LD_VAR 0 1
8219: RET
// every 1 do var un ;
8220: GO 8222
8222: DISABLE
8223: LD_INT 0
8225: PPUSH
// begin if not def_morale_flags then
8226: LD_EXP 49
8230: NOT
8231: IFFALSE 8235
// exit ;
8233: GO 8312
// if not morale_decreasing_time then
8235: LD_EXP 8
8239: NOT
8240: IFFALSE 8244
// exit ;
8242: GO 8312
// strength = 100 ;
8244: LD_ADDR_LOC 11
8248: PUSH
8249: LD_INT 100
8251: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8252: LD_EXP 8
8256: PPUSH
8257: CALL_OW 67
// strength := strength - 1 ;
8261: LD_ADDR_LOC 11
8265: PUSH
8266: LD_LOC 11
8270: PUSH
8271: LD_INT 1
8273: MINUS
8274: ST_TO_ADDR
// Update_Flags ;
8275: CALL 8123 0 0
// until not strength ;
8279: LD_LOC 11
8283: NOT
8284: IFFALSE 8252
// for un in battle_flags_id do
8286: LD_ADDR_VAR 0 1
8290: PUSH
8291: LD_EXP 29
8295: PUSH
8296: FOR_IN
8297: IFFALSE 8310
// KillBattleFlag ( un ) ;
8299: LD_VAR 0 1
8303: PPUSH
8304: CALL_OW 419
8308: GO 8296
8310: POP
8311: POP
// end ; end_of_file
8312: PPOPN 1
8314: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8315: LD_INT 0
8317: PPUSH
8318: PPUSH
8319: PPUSH
// enable ( 600 ) ;
8320: LD_INT 600
8322: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8323: LD_ADDR_VAR 0 2
8327: PUSH
8328: DOUBLE
8329: LD_INT 1
8331: DEC
8332: ST_TO_ADDR
8333: LD_EXP 38
8337: PUSH
8338: FOR_TO
8339: IFFALSE 8494
// if Position_Sides [ i ] then
8341: LD_EXP 21
8345: PUSH
8346: LD_VAR 0 2
8350: ARRAY
8351: IFFALSE 8492
// for j := 1 to 8 do
8353: LD_ADDR_VAR 0 3
8357: PUSH
8358: DOUBLE
8359: LD_INT 1
8361: DEC
8362: ST_TO_ADDR
8363: LD_INT 8
8365: PUSH
8366: FOR_TO
8367: IFFALSE 8490
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8369: LD_EXP 18
8373: PUSH
8374: LD_VAR 0 3
8378: ARRAY
8379: PUSH
8380: LD_EXP 15
8384: PUSH
8385: LD_EXP 21
8389: PUSH
8390: LD_VAR 0 2
8394: ARRAY
8395: ARRAY
8396: PUSH
8397: LD_EXP 15
8401: PUSH
8402: LD_VAR 0 3
8406: ARRAY
8407: NONEQUAL
8408: PUSH
8409: LD_EXP 20
8413: NOT
8414: PUSH
8415: LD_EXP 21
8419: PUSH
8420: LD_VAR 0 2
8424: ARRAY
8425: PUSH
8426: LD_VAR 0 3
8430: NONEQUAL
8431: AND
8432: OR
8433: AND
8434: IFFALSE 8458
// HideArea ( j , BuildUpAreas [ i ] ) else
8436: LD_VAR 0 3
8440: PPUSH
8441: LD_EXP 38
8445: PUSH
8446: LD_VAR 0 2
8450: ARRAY
8451: PPUSH
8452: CALL_OW 333
8456: GO 8488
// if ( j = your_side ) then
8458: LD_VAR 0 3
8462: PUSH
8463: LD_OWVAR 2
8467: EQUAL
8468: IFFALSE 8488
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8470: LD_EXP 38
8474: PUSH
8475: LD_VAR 0 2
8479: ARRAY
8480: PPUSH
8481: LD_INT 5
8483: PPUSH
8484: CALL_OW 424
8488: GO 8366
8490: POP
8491: POP
8492: GO 8338
8494: POP
8495: POP
// end ;
8496: LD_VAR 0 1
8500: RET
// export function EndBuildUp ; var i , j ; begin
8501: LD_INT 0
8503: PPUSH
8504: PPUSH
8505: PPUSH
// disable ( 600 ) ;
8506: LD_INT 600
8508: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
8509: LD_ADDR_VAR 0 2
8513: PUSH
8514: DOUBLE
8515: LD_INT 1
8517: DEC
8518: ST_TO_ADDR
8519: LD_EXP 38
8523: PUSH
8524: FOR_TO
8525: IFFALSE 8680
// if Position_Sides [ i ] then
8527: LD_EXP 21
8531: PUSH
8532: LD_VAR 0 2
8536: ARRAY
8537: IFFALSE 8678
// for j := 1 to 8 do
8539: LD_ADDR_VAR 0 3
8543: PUSH
8544: DOUBLE
8545: LD_INT 1
8547: DEC
8548: ST_TO_ADDR
8549: LD_INT 8
8551: PUSH
8552: FOR_TO
8553: IFFALSE 8676
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8555: LD_EXP 18
8559: PUSH
8560: LD_VAR 0 3
8564: ARRAY
8565: PUSH
8566: LD_EXP 15
8570: PUSH
8571: LD_EXP 21
8575: PUSH
8576: LD_VAR 0 2
8580: ARRAY
8581: ARRAY
8582: PUSH
8583: LD_EXP 15
8587: PUSH
8588: LD_VAR 0 3
8592: ARRAY
8593: NONEQUAL
8594: PUSH
8595: LD_EXP 20
8599: NOT
8600: PUSH
8601: LD_EXP 21
8605: PUSH
8606: LD_VAR 0 2
8610: ARRAY
8611: PUSH
8612: LD_VAR 0 3
8616: NONEQUAL
8617: AND
8618: OR
8619: AND
8620: IFFALSE 8644
// ShowArea ( j , BuildUpAreas [ i ] ) else
8622: LD_VAR 0 3
8626: PPUSH
8627: LD_EXP 38
8631: PUSH
8632: LD_VAR 0 2
8636: ARRAY
8637: PPUSH
8638: CALL_OW 334
8642: GO 8674
// if ( j = your_side ) then
8644: LD_VAR 0 3
8648: PUSH
8649: LD_OWVAR 2
8653: EQUAL
8654: IFFALSE 8674
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
8656: LD_EXP 38
8660: PUSH
8661: LD_VAR 0 2
8665: ARRAY
8666: PPUSH
8667: LD_INT 0
8669: PPUSH
8670: CALL_OW 424
8674: GO 8552
8676: POP
8677: POP
8678: GO 8524
8680: POP
8681: POP
// end ;
8682: LD_VAR 0 1
8686: RET
// every 5 marked 600 do var i , un ;
8687: GO 8689
8689: DISABLE
8690: LD_INT 0
8692: PPUSH
8693: PPUSH
// begin for i := 1 to BuildUpAreas do
8694: LD_ADDR_VAR 0 1
8698: PUSH
8699: DOUBLE
8700: LD_INT 1
8702: DEC
8703: ST_TO_ADDR
8704: LD_EXP 38
8708: PUSH
8709: FOR_TO
8710: IFFALSE 8865
// if Position_Sides [ i ] then
8712: LD_EXP 21
8716: PUSH
8717: LD_VAR 0 1
8721: ARRAY
8722: IFFALSE 8863
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_EXP 38
8733: PUSH
8734: LD_VAR 0 1
8738: ARRAY
8739: PPUSH
8740: LD_INT 2
8742: PUSH
8743: LD_INT 21
8745: PUSH
8746: LD_INT 1
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 21
8755: PUSH
8756: LD_INT 2
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 22
8770: PUSH
8771: LD_OWVAR 2
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PPUSH
8784: CALL_OW 70
8788: PUSH
8789: FOR_IN
8790: IFFALSE 8861
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
8792: LD_EXP 15
8796: PUSH
8797: LD_EXP 21
8801: PUSH
8802: LD_VAR 0 1
8806: ARRAY
8807: ARRAY
8808: PUSH
8809: LD_EXP 15
8813: PUSH
8814: LD_OWVAR 2
8818: ARRAY
8819: NONEQUAL
8820: PUSH
8821: LD_EXP 20
8825: NOT
8826: PUSH
8827: LD_EXP 21
8831: PUSH
8832: LD_VAR 0 1
8836: ARRAY
8837: PUSH
8838: LD_OWVAR 2
8842: NONEQUAL
8843: AND
8844: OR
8845: IFFALSE 8859
// ComMoveToArea ( un , BuildUpEscape ) ;
8847: LD_VAR 0 2
8851: PPUSH
8852: LD_INT 17
8854: PPUSH
8855: CALL_OW 113
8859: GO 8789
8861: POP
8862: POP
8863: GO 8709
8865: POP
8866: POP
// enable ;
8867: ENABLE
// end ;
8868: PPOPN 2
8870: END
// every 5 5$00 do
8871: GO 8873
8873: DISABLE
// if ( def_builduptime = 1 ) then
8874: LD_EXP 54
8878: PUSH
8879: LD_INT 1
8881: EQUAL
8882: IFFALSE 8888
// EndBuildUp ;
8884: CALL 8501 0 0
8888: END
// every 10 10$00 do
8889: GO 8891
8891: DISABLE
// if ( def_builduptime = 2 ) then
8892: LD_EXP 54
8896: PUSH
8897: LD_INT 2
8899: EQUAL
8900: IFFALSE 8906
// EndBuildUp ;
8902: CALL 8501 0 0
8906: END
// every 15 15$00 do
8907: GO 8909
8909: DISABLE
// if ( def_builduptime = 3 ) then
8910: LD_EXP 54
8914: PUSH
8915: LD_INT 3
8917: EQUAL
8918: IFFALSE 8924
// EndBuildUp ; end_of_file
8920: CALL 8501 0 0
8924: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
8925: LD_INT 0
8927: PPUSH
8928: PPUSH
// if ( not IAmSpec ) then
8929: CALL_OW 531
8933: NOT
8934: IFFALSE 8950
// Result := Limits_Info ^  ;
8936: LD_ADDR_VAR 0 1
8940: PUSH
8941: LD_LOC 23
8945: PUSH
8946: LD_STRING 
8948: ADD
8949: ST_TO_ADDR
// for i := 1 to 8 do
8950: LD_ADDR_VAR 0 2
8954: PUSH
8955: DOUBLE
8956: LD_INT 1
8958: DEC
8959: ST_TO_ADDR
8960: LD_INT 8
8962: PUSH
8963: FOR_TO
8964: IFFALSE 9009
// if Cheaters [ i ] then
8966: LD_LOC 24
8970: PUSH
8971: LD_VAR 0 2
8975: ARRAY
8976: IFFALSE 9007
// Result := Result ^ [ #Cheater , i , i ] ;
8978: LD_ADDR_VAR 0 1
8982: PUSH
8983: LD_VAR 0 1
8987: PUSH
8988: LD_STRING #Cheater
8990: PUSH
8991: LD_VAR 0 2
8995: PUSH
8996: LD_VAR 0 2
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: ADD
9006: ST_TO_ADDR
9007: GO 8963
9009: POP
9010: POP
// end ;
9011: LD_VAR 0 1
9015: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9016: LD_INT 0
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
// case Game_Type of 10 :
9023: LD_EXP 39
9027: PUSH
9028: LD_INT 10
9030: DOUBLE
9031: EQUAL
9032: IFTRUE 9036
9034: GO 9047
9036: POP
// def_game_rules := 1 ; 11 :
9037: LD_ADDR_EXP 40
9041: PUSH
9042: LD_INT 1
9044: ST_TO_ADDR
9045: GO 9067
9047: LD_INT 11
9049: DOUBLE
9050: EQUAL
9051: IFTRUE 9055
9053: GO 9066
9055: POP
// def_game_rules := 3 ; end ;
9056: LD_ADDR_EXP 40
9060: PUSH
9061: LD_INT 3
9063: ST_TO_ADDR
9064: GO 9067
9066: POP
// case def_game_rules of 0 :
9067: LD_EXP 40
9071: PUSH
9072: LD_INT 0
9074: DOUBLE
9075: EQUAL
9076: IFTRUE 9080
9078: GO 9085
9080: POP
// exit ; 1 :
9081: GO 11143
9083: GO 11043
9085: LD_INT 1
9087: DOUBLE
9088: EQUAL
9089: IFTRUE 9093
9091: GO 9309
9093: POP
// begin def_base_level := 2 ;
9094: LD_ADDR_EXP 41
9098: PUSH
9099: LD_INT 2
9101: ST_TO_ADDR
// def_amount_of_people := 2 ;
9102: LD_ADDR_EXP 42
9106: PUSH
9107: LD_INT 2
9109: ST_TO_ADDR
// def_skill_level := 1 ;
9110: LD_ADDR_EXP 43
9114: PUSH
9115: LD_INT 1
9117: ST_TO_ADDR
// def_starting_resources := 2 ;
9118: LD_ADDR_EXP 44
9122: PUSH
9123: LD_INT 2
9125: ST_TO_ADDR
// def_shipments_density := 1 ;
9126: LD_ADDR_EXP 45
9130: PUSH
9131: LD_INT 1
9133: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9134: LD_ADDR_EXP 46
9138: PUSH
9139: LD_INT 0
9141: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9142: LD_ADDR_EXP 47
9146: PUSH
9147: LD_INT 1
9149: ST_TO_ADDR
// def_shared_vision := 1 ;
9150: LD_ADDR_EXP 48
9154: PUSH
9155: LD_INT 1
9157: ST_TO_ADDR
// def_morale_flags := 3 ;
9158: LD_ADDR_EXP 49
9162: PUSH
9163: LD_INT 3
9165: ST_TO_ADDR
// def_siberite_detection := 1 ;
9166: LD_ADDR_EXP 50
9170: PUSH
9171: LD_INT 1
9173: ST_TO_ADDR
// def_people_respawning := 1 ;
9174: LD_ADDR_EXP 51
9178: PUSH
9179: LD_INT 1
9181: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9182: LD_ADDR_EXP 52
9186: PUSH
9187: LD_INT 1
9189: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9190: LD_ADDR_EXP 53
9194: PUSH
9195: LD_INT 0
9197: ST_TO_ADDR
// def_builduptime := 2 ;
9198: LD_ADDR_EXP 54
9202: PUSH
9203: LD_INT 2
9205: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9206: LD_ADDR_VAR 0 2
9210: PUSH
9211: EMPTY
9212: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9213: LD_ADDR_VAR 0 3
9217: PUSH
9218: EMPTY
9219: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9220: LD_ADDR_LOC 18
9224: PUSH
9225: EMPTY
9226: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9227: LD_ADDR_LOC 19
9231: PUSH
9232: EMPTY
9233: ST_TO_ADDR
// Banned_Controls := [ ] ;
9234: LD_ADDR_LOC 20
9238: PUSH
9239: EMPTY
9240: ST_TO_ADDR
// Banned_Engines := [ ] ;
9241: LD_ADDR_LOC 21
9245: PUSH
9246: EMPTY
9247: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9248: LD_ADDR_LOC 16
9252: PUSH
9253: LD_INT 37
9255: PUSH
9256: EMPTY
9257: LIST
9258: PUSH
9259: LD_INT 4
9261: PUSH
9262: LD_INT 5
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 31
9271: PUSH
9272: LD_INT 32
9274: PUSH
9275: LD_INT 33
9277: PUSH
9278: EMPTY
9279: LIST
9280: LIST
9281: LIST
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: LIST
9287: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9288: LD_ADDR_LOC 17
9292: PUSH
9293: LD_INT 2
9295: PUSH
9296: LD_INT 2
9298: PUSH
9299: LD_INT 4
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: LIST
9306: ST_TO_ADDR
// end ; 2 :
9307: GO 11043
9309: LD_INT 2
9311: DOUBLE
9312: EQUAL
9313: IFTRUE 9317
9315: GO 9526
9317: POP
// begin def_base_level := 1 ;
9318: LD_ADDR_EXP 41
9322: PUSH
9323: LD_INT 1
9325: ST_TO_ADDR
// def_amount_of_people := 2 ;
9326: LD_ADDR_EXP 42
9330: PUSH
9331: LD_INT 2
9333: ST_TO_ADDR
// def_skill_level := 3 ;
9334: LD_ADDR_EXP 43
9338: PUSH
9339: LD_INT 3
9341: ST_TO_ADDR
// def_starting_resources := 3 ;
9342: LD_ADDR_EXP 44
9346: PUSH
9347: LD_INT 3
9349: ST_TO_ADDR
// def_shipments_density := 2 ;
9350: LD_ADDR_EXP 45
9354: PUSH
9355: LD_INT 2
9357: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9358: LD_ADDR_EXP 46
9362: PUSH
9363: LD_INT 1
9365: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9366: LD_ADDR_EXP 47
9370: PUSH
9371: LD_INT 2
9373: ST_TO_ADDR
// def_shared_vision := 1 ;
9374: LD_ADDR_EXP 48
9378: PUSH
9379: LD_INT 1
9381: ST_TO_ADDR
// def_morale_flags := 0 ;
9382: LD_ADDR_EXP 49
9386: PUSH
9387: LD_INT 0
9389: ST_TO_ADDR
// def_siberite_detection := 1 ;
9390: LD_ADDR_EXP 50
9394: PUSH
9395: LD_INT 1
9397: ST_TO_ADDR
// def_people_respawning := 0 ;
9398: LD_ADDR_EXP 51
9402: PUSH
9403: LD_INT 0
9405: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9406: LD_ADDR_EXP 52
9410: PUSH
9411: LD_INT 0
9413: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9414: LD_ADDR_EXP 53
9418: PUSH
9419: LD_INT 0
9421: ST_TO_ADDR
// def_builduptime := 2 ;
9422: LD_ADDR_EXP 54
9426: PUSH
9427: LD_INT 2
9429: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: LD_INT 1
9437: PUSH
9438: EMPTY
9439: LIST
9440: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9441: LD_ADDR_VAR 0 3
9445: PUSH
9446: EMPTY
9447: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9448: LD_ADDR_LOC 18
9452: PUSH
9453: EMPTY
9454: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9455: LD_ADDR_LOC 19
9459: PUSH
9460: EMPTY
9461: ST_TO_ADDR
// Banned_Controls := [ ] ;
9462: LD_ADDR_LOC 20
9466: PUSH
9467: EMPTY
9468: ST_TO_ADDR
// Banned_Engines := [ ] ;
9469: LD_ADDR_LOC 21
9473: PUSH
9474: EMPTY
9475: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9476: LD_ADDR_LOC 16
9480: PUSH
9481: LD_INT 4
9483: PUSH
9484: LD_INT 5
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 31
9493: PUSH
9494: LD_INT 32
9496: PUSH
9497: LD_INT 33
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9509: LD_ADDR_LOC 17
9513: PUSH
9514: LD_INT 1
9516: PUSH
9517: LD_INT 2
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: ST_TO_ADDR
// end ; 3 :
9524: GO 11043
9526: LD_INT 3
9528: DOUBLE
9529: EQUAL
9530: IFTRUE 9534
9532: GO 9777
9534: POP
// begin def_base_level := 1 ;
9535: LD_ADDR_EXP 41
9539: PUSH
9540: LD_INT 1
9542: ST_TO_ADDR
// def_amount_of_people := 2 ;
9543: LD_ADDR_EXP 42
9547: PUSH
9548: LD_INT 2
9550: ST_TO_ADDR
// def_skill_level := 3 ;
9551: LD_ADDR_EXP 43
9555: PUSH
9556: LD_INT 3
9558: ST_TO_ADDR
// def_starting_resources := 3 ;
9559: LD_ADDR_EXP 44
9563: PUSH
9564: LD_INT 3
9566: ST_TO_ADDR
// def_shipments_density := 1 ;
9567: LD_ADDR_EXP 45
9571: PUSH
9572: LD_INT 1
9574: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9575: LD_ADDR_EXP 46
9579: PUSH
9580: LD_INT 0
9582: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9583: LD_ADDR_EXP 47
9587: PUSH
9588: LD_INT 1
9590: ST_TO_ADDR
// def_shared_vision := 1 ;
9591: LD_ADDR_EXP 48
9595: PUSH
9596: LD_INT 1
9598: ST_TO_ADDR
// def_morale_flags := 0 ;
9599: LD_ADDR_EXP 49
9603: PUSH
9604: LD_INT 0
9606: ST_TO_ADDR
// def_siberite_detection := 1 ;
9607: LD_ADDR_EXP 50
9611: PUSH
9612: LD_INT 1
9614: ST_TO_ADDR
// def_people_respawning := 0 ;
9615: LD_ADDR_EXP 51
9619: PUSH
9620: LD_INT 0
9622: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9623: LD_ADDR_EXP 52
9627: PUSH
9628: LD_INT 2
9630: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9631: LD_ADDR_EXP 53
9635: PUSH
9636: LD_INT 0
9638: ST_TO_ADDR
// def_builduptime := 1 ;
9639: LD_ADDR_EXP 54
9643: PUSH
9644: LD_INT 1
9646: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9647: LD_ADDR_VAR 0 2
9651: PUSH
9652: LD_INT 23
9654: PUSH
9655: EMPTY
9656: LIST
9657: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
9658: LD_ADDR_VAR 0 3
9662: PUSH
9663: LD_INT 2
9665: PUSH
9666: LD_INT 37
9668: PUSH
9669: LD_INT 32
9671: PUSH
9672: LD_INT 33
9674: PUSH
9675: LD_INT 36
9677: PUSH
9678: LD_INT 16
9680: PUSH
9681: LD_INT 23
9683: PUSH
9684: LD_INT 21
9686: PUSH
9687: LD_INT 18
9689: PUSH
9690: LD_INT 22
9692: PUSH
9693: LD_INT 20
9695: PUSH
9696: LD_INT 19
9698: PUSH
9699: LD_INT 25
9701: PUSH
9702: LD_INT 17
9704: PUSH
9705: LD_INT 24
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9725: LD_ADDR_LOC 18
9729: PUSH
9730: EMPTY
9731: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9732: LD_ADDR_LOC 19
9736: PUSH
9737: EMPTY
9738: ST_TO_ADDR
// Banned_Controls := [ ] ;
9739: LD_ADDR_LOC 20
9743: PUSH
9744: EMPTY
9745: ST_TO_ADDR
// Banned_Engines := [ ] ;
9746: LD_ADDR_LOC 21
9750: PUSH
9751: EMPTY
9752: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9753: LD_ADDR_LOC 16
9757: PUSH
9758: EMPTY
9759: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9760: LD_ADDR_LOC 17
9764: PUSH
9765: EMPTY
9766: ST_TO_ADDR
// No_Mechs := true ;
9767: LD_ADDR_EXP 55
9771: PUSH
9772: LD_INT 1
9774: ST_TO_ADDR
// end ; 4 :
9775: GO 11043
9777: LD_INT 4
9779: DOUBLE
9780: EQUAL
9781: IFTRUE 9785
9783: GO 9960
9785: POP
// begin def_base_level := 1 ;
9786: LD_ADDR_EXP 41
9790: PUSH
9791: LD_INT 1
9793: ST_TO_ADDR
// def_amount_of_people := 2 ;
9794: LD_ADDR_EXP 42
9798: PUSH
9799: LD_INT 2
9801: ST_TO_ADDR
// def_skill_level := 3 ;
9802: LD_ADDR_EXP 43
9806: PUSH
9807: LD_INT 3
9809: ST_TO_ADDR
// def_starting_resources := 3 ;
9810: LD_ADDR_EXP 44
9814: PUSH
9815: LD_INT 3
9817: ST_TO_ADDR
// def_shipments_density := 2 ;
9818: LD_ADDR_EXP 45
9822: PUSH
9823: LD_INT 2
9825: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9826: LD_ADDR_EXP 46
9830: PUSH
9831: LD_INT 1
9833: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9834: LD_ADDR_EXP 47
9838: PUSH
9839: LD_INT 2
9841: ST_TO_ADDR
// def_shared_vision := 1 ;
9842: LD_ADDR_EXP 48
9846: PUSH
9847: LD_INT 1
9849: ST_TO_ADDR
// def_morale_flags := 0 ;
9850: LD_ADDR_EXP 49
9854: PUSH
9855: LD_INT 0
9857: ST_TO_ADDR
// def_siberite_detection := 1 ;
9858: LD_ADDR_EXP 50
9862: PUSH
9863: LD_INT 1
9865: ST_TO_ADDR
// def_people_respawning := 0 ;
9866: LD_ADDR_EXP 51
9870: PUSH
9871: LD_INT 0
9873: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9874: LD_ADDR_EXP 52
9878: PUSH
9879: LD_INT 0
9881: ST_TO_ADDR
// def_siberite_bomb := 1 ;
9882: LD_ADDR_EXP 53
9886: PUSH
9887: LD_INT 1
9889: ST_TO_ADDR
// def_builduptime := 3 ;
9890: LD_ADDR_EXP 54
9894: PUSH
9895: LD_INT 3
9897: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9898: LD_ADDR_VAR 0 2
9902: PUSH
9903: LD_INT 1
9905: PUSH
9906: EMPTY
9907: LIST
9908: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9909: LD_ADDR_VAR 0 3
9913: PUSH
9914: EMPTY
9915: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9916: LD_ADDR_LOC 18
9920: PUSH
9921: EMPTY
9922: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9923: LD_ADDR_LOC 19
9927: PUSH
9928: EMPTY
9929: ST_TO_ADDR
// Banned_Controls := [ ] ;
9930: LD_ADDR_LOC 20
9934: PUSH
9935: EMPTY
9936: ST_TO_ADDR
// Banned_Engines := [ ] ;
9937: LD_ADDR_LOC 21
9941: PUSH
9942: EMPTY
9943: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9944: LD_ADDR_LOC 16
9948: PUSH
9949: EMPTY
9950: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9951: LD_ADDR_LOC 17
9955: PUSH
9956: EMPTY
9957: ST_TO_ADDR
// end ; 5 :
9958: GO 11043
9960: LD_INT 5
9962: DOUBLE
9963: EQUAL
9964: IFTRUE 9968
9966: GO 10217
9968: POP
// begin def_base_level := 0 ;
9969: LD_ADDR_EXP 41
9973: PUSH
9974: LD_INT 0
9976: ST_TO_ADDR
// def_amount_of_people := 0 ;
9977: LD_ADDR_EXP 42
9981: PUSH
9982: LD_INT 0
9984: ST_TO_ADDR
// def_skill_level := 0 ;
9985: LD_ADDR_EXP 43
9989: PUSH
9990: LD_INT 0
9992: ST_TO_ADDR
// def_starting_resources := 0 ;
9993: LD_ADDR_EXP 44
9997: PUSH
9998: LD_INT 0
10000: ST_TO_ADDR
// def_shipments_density := 0 ;
10001: LD_ADDR_EXP 45
10005: PUSH
10006: LD_INT 0
10008: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10009: LD_ADDR_EXP 46
10013: PUSH
10014: LD_INT 0
10016: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10017: LD_ADDR_EXP 47
10021: PUSH
10022: LD_INT 0
10024: ST_TO_ADDR
// def_shared_vision := 1 ;
10025: LD_ADDR_EXP 48
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// def_morale_flags := 0 ;
10033: LD_ADDR_EXP 49
10037: PUSH
10038: LD_INT 0
10040: ST_TO_ADDR
// def_siberite_detection := 0 ;
10041: LD_ADDR_EXP 50
10045: PUSH
10046: LD_INT 0
10048: ST_TO_ADDR
// def_people_respawning := 1 ;
10049: LD_ADDR_EXP 51
10053: PUSH
10054: LD_INT 1
10056: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10057: LD_ADDR_EXP 52
10061: PUSH
10062: LD_INT 1
10064: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10065: LD_ADDR_EXP 53
10069: PUSH
10070: LD_INT 0
10072: ST_TO_ADDR
// def_builduptime := 0 ;
10073: LD_ADDR_EXP 54
10077: PUSH
10078: LD_INT 0
10080: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: LD_INT 10
10088: PUSH
10089: LD_INT 3
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10096: LD_ADDR_VAR 0 3
10100: PUSH
10101: LD_INT 12
10103: PUSH
10104: LD_INT 11
10106: PUSH
10107: LD_INT 14
10109: PUSH
10110: LD_INT 13
10112: PUSH
10113: LD_INT 5
10115: PUSH
10116: LD_INT 24
10118: PUSH
10119: LD_INT 21
10121: PUSH
10122: LD_INT 33
10124: PUSH
10125: LD_INT 36
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10139: LD_ADDR_LOC 18
10143: PUSH
10144: LD_INT 31
10146: PUSH
10147: EMPTY
10148: LIST
10149: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10150: LD_ADDR_LOC 19
10154: PUSH
10155: EMPTY
10156: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10157: LD_ADDR_LOC 20
10161: PUSH
10162: LD_INT 2
10164: PUSH
10165: EMPTY
10166: LIST
10167: ST_TO_ADDR
// Banned_Engines := [ ] ;
10168: LD_ADDR_LOC 21
10172: PUSH
10173: EMPTY
10174: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10175: LD_ADDR_LOC 16
10179: PUSH
10180: LD_INT 4
10182: PUSH
10183: EMPTY
10184: LIST
10185: PUSH
10186: LD_INT 31
10188: PUSH
10189: LD_INT 32
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10200: LD_ADDR_LOC 17
10204: PUSH
10205: LD_INT 1
10207: PUSH
10208: LD_INT 1
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: ST_TO_ADDR
// end ; 6 :
10215: GO 11043
10217: LD_INT 6
10219: DOUBLE
10220: EQUAL
10221: IFTRUE 10225
10223: GO 10428
10225: POP
// begin def_base_level := 1 ;
10226: LD_ADDR_EXP 41
10230: PUSH
10231: LD_INT 1
10233: ST_TO_ADDR
// def_amount_of_people := 2 ;
10234: LD_ADDR_EXP 42
10238: PUSH
10239: LD_INT 2
10241: ST_TO_ADDR
// def_skill_level := 3 ;
10242: LD_ADDR_EXP 43
10246: PUSH
10247: LD_INT 3
10249: ST_TO_ADDR
// def_starting_resources := 3 ;
10250: LD_ADDR_EXP 44
10254: PUSH
10255: LD_INT 3
10257: ST_TO_ADDR
// def_shipments_density := 1 ;
10258: LD_ADDR_EXP 45
10262: PUSH
10263: LD_INT 1
10265: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10266: LD_ADDR_EXP 46
10270: PUSH
10271: LD_INT 0
10273: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10274: LD_ADDR_EXP 47
10278: PUSH
10279: LD_INT 1
10281: ST_TO_ADDR
// def_shared_vision := 1 ;
10282: LD_ADDR_EXP 48
10286: PUSH
10287: LD_INT 1
10289: ST_TO_ADDR
// def_morale_flags := 0 ;
10290: LD_ADDR_EXP 49
10294: PUSH
10295: LD_INT 0
10297: ST_TO_ADDR
// def_siberite_detection := 1 ;
10298: LD_ADDR_EXP 50
10302: PUSH
10303: LD_INT 1
10305: ST_TO_ADDR
// def_people_respawning := 2 ;
10306: LD_ADDR_EXP 51
10310: PUSH
10311: LD_INT 2
10313: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10314: LD_ADDR_EXP 52
10318: PUSH
10319: LD_INT 1
10321: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10322: LD_ADDR_EXP 53
10326: PUSH
10327: LD_INT 0
10329: ST_TO_ADDR
// def_builduptime := 1 ;
10330: LD_ADDR_EXP 54
10334: PUSH
10335: LD_INT 1
10337: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10338: LD_ADDR_VAR 0 2
10342: PUSH
10343: LD_INT 23
10345: PUSH
10346: EMPTY
10347: LIST
10348: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10349: LD_ADDR_VAR 0 3
10353: PUSH
10354: LD_INT 2
10356: PUSH
10357: LD_INT 37
10359: PUSH
10360: LD_INT 31
10362: PUSH
10363: LD_INT 32
10365: PUSH
10366: LD_INT 33
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10376: LD_ADDR_LOC 18
10380: PUSH
10381: EMPTY
10382: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10383: LD_ADDR_LOC 19
10387: PUSH
10388: EMPTY
10389: ST_TO_ADDR
// Banned_Controls := [ ] ;
10390: LD_ADDR_LOC 20
10394: PUSH
10395: EMPTY
10396: ST_TO_ADDR
// Banned_Engines := [ ] ;
10397: LD_ADDR_LOC 21
10401: PUSH
10402: EMPTY
10403: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10404: LD_ADDR_LOC 16
10408: PUSH
10409: EMPTY
10410: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10411: LD_ADDR_LOC 17
10415: PUSH
10416: EMPTY
10417: ST_TO_ADDR
// No_Mechs := true ;
10418: LD_ADDR_EXP 55
10422: PUSH
10423: LD_INT 1
10425: ST_TO_ADDR
// end ; 7 :
10426: GO 11043
10428: LD_INT 7
10430: DOUBLE
10431: EQUAL
10432: IFTRUE 10436
10434: GO 10634
10436: POP
// begin def_base_level := 1 ;
10437: LD_ADDR_EXP 41
10441: PUSH
10442: LD_INT 1
10444: ST_TO_ADDR
// def_amount_of_people := 2 ;
10445: LD_ADDR_EXP 42
10449: PUSH
10450: LD_INT 2
10452: ST_TO_ADDR
// def_skill_level := 3 ;
10453: LD_ADDR_EXP 43
10457: PUSH
10458: LD_INT 3
10460: ST_TO_ADDR
// def_starting_resources := 3 ;
10461: LD_ADDR_EXP 44
10465: PUSH
10466: LD_INT 3
10468: ST_TO_ADDR
// def_shipments_density := 1 ;
10469: LD_ADDR_EXP 45
10473: PUSH
10474: LD_INT 1
10476: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10477: LD_ADDR_EXP 46
10481: PUSH
10482: LD_INT 1
10484: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10485: LD_ADDR_EXP 47
10489: PUSH
10490: LD_INT 2
10492: ST_TO_ADDR
// def_shared_vision := 1 ;
10493: LD_ADDR_EXP 48
10497: PUSH
10498: LD_INT 1
10500: ST_TO_ADDR
// def_morale_flags := 0 ;
10501: LD_ADDR_EXP 49
10505: PUSH
10506: LD_INT 0
10508: ST_TO_ADDR
// def_siberite_detection := 1 ;
10509: LD_ADDR_EXP 50
10513: PUSH
10514: LD_INT 1
10516: ST_TO_ADDR
// def_people_respawning := 0 ;
10517: LD_ADDR_EXP 51
10521: PUSH
10522: LD_INT 0
10524: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10525: LD_ADDR_EXP 52
10529: PUSH
10530: LD_INT 1
10532: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10533: LD_ADDR_EXP 53
10537: PUSH
10538: LD_INT 0
10540: ST_TO_ADDR
// def_builduptime := 3 ;
10541: LD_ADDR_EXP 54
10545: PUSH
10546: LD_INT 3
10548: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10549: LD_ADDR_VAR 0 2
10553: PUSH
10554: LD_INT 23
10556: PUSH
10557: EMPTY
10558: LIST
10559: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
10560: LD_ADDR_VAR 0 3
10564: PUSH
10565: LD_INT 37
10567: PUSH
10568: EMPTY
10569: LIST
10570: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10571: LD_ADDR_LOC 18
10575: PUSH
10576: EMPTY
10577: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10578: LD_ADDR_LOC 19
10582: PUSH
10583: EMPTY
10584: ST_TO_ADDR
// Banned_Controls := [ ] ;
10585: LD_ADDR_LOC 20
10589: PUSH
10590: EMPTY
10591: ST_TO_ADDR
// Banned_Engines := [ ] ;
10592: LD_ADDR_LOC 21
10596: PUSH
10597: EMPTY
10598: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10599: LD_ADDR_LOC 16
10603: PUSH
10604: LD_INT 31
10606: PUSH
10607: LD_INT 32
10609: PUSH
10610: LD_INT 33
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: PUSH
10618: EMPTY
10619: LIST
10620: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10621: LD_ADDR_LOC 17
10625: PUSH
10626: LD_INT 10
10628: PUSH
10629: EMPTY
10630: LIST
10631: ST_TO_ADDR
// end ; 8 :
10632: GO 11043
10634: LD_INT 8
10636: DOUBLE
10637: EQUAL
10638: IFTRUE 10642
10640: GO 11042
10642: POP
// begin def_base_level := 0 ;
10643: LD_ADDR_EXP 41
10647: PUSH
10648: LD_INT 0
10650: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
10651: LD_ADDR_EXP 42
10655: PUSH
10656: LD_INT 0
10658: PPUSH
10659: LD_INT 1
10661: PPUSH
10662: CALL_OW 12
10666: ST_TO_ADDR
// def_skill_level := 0 ;
10667: LD_ADDR_EXP 43
10671: PUSH
10672: LD_INT 0
10674: ST_TO_ADDR
// def_starting_resources := 2 ;
10675: LD_ADDR_EXP 44
10679: PUSH
10680: LD_INT 2
10682: ST_TO_ADDR
// def_shipments_density := 1 ;
10683: LD_ADDR_EXP 45
10687: PUSH
10688: LD_INT 1
10690: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10691: LD_ADDR_EXP 46
10695: PUSH
10696: LD_INT 0
10698: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10699: LD_ADDR_EXP 47
10703: PUSH
10704: LD_INT 0
10706: ST_TO_ADDR
// def_shared_vision := 1 ;
10707: LD_ADDR_EXP 48
10711: PUSH
10712: LD_INT 1
10714: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
10715: LD_ADDR_EXP 49
10719: PUSH
10720: LD_INT 0
10722: PPUSH
10723: LD_INT 2
10725: PPUSH
10726: CALL_OW 12
10730: ST_TO_ADDR
// def_siberite_detection := 0 ;
10731: LD_ADDR_EXP 50
10735: PUSH
10736: LD_INT 0
10738: ST_TO_ADDR
// def_people_respawning := 0 ;
10739: LD_ADDR_EXP 51
10743: PUSH
10744: LD_INT 0
10746: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10747: LD_ADDR_EXP 52
10751: PUSH
10752: LD_INT 2
10754: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10755: LD_ADDR_EXP 53
10759: PUSH
10760: LD_INT 0
10762: ST_TO_ADDR
// def_builduptime := 0 ;
10763: LD_ADDR_EXP 54
10767: PUSH
10768: LD_INT 0
10770: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
10771: LD_ADDR_VAR 0 2
10775: PUSH
10776: LD_INT 23
10778: PUSH
10779: LD_INT 20
10781: PUSH
10782: LD_INT 40
10784: PUSH
10785: LD_INT 47
10787: PUSH
10788: LD_INT 46
10790: PUSH
10791: LD_INT 39
10793: PUSH
10794: LD_INT 71
10796: PUSH
10797: LD_INT 34
10799: PUSH
10800: LD_INT 41
10802: PUSH
10803: LD_INT 44
10805: PUSH
10806: LD_INT 17
10808: PUSH
10809: LD_INT 16
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
10826: LD_ADDR_VAR 0 3
10830: PUSH
10831: LD_INT 37
10833: PUSH
10834: LD_INT 5
10836: PUSH
10837: LD_INT 13
10839: PUSH
10840: LD_INT 34
10842: PUSH
10843: LD_INT 12
10845: PUSH
10846: LD_INT 15
10848: PUSH
10849: LD_INT 11
10851: PUSH
10852: LD_INT 14
10854: PUSH
10855: LD_INT 29
10857: PUSH
10858: LD_INT 30
10860: PUSH
10861: LD_INT 28
10863: PUSH
10864: LD_INT 24
10866: PUSH
10867: LD_INT 25
10869: PUSH
10870: LD_INT 20
10872: PUSH
10873: LD_INT 21
10875: PUSH
10876: LD_INT 22
10878: PUSH
10879: LD_INT 36
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10901: LD_ADDR_LOC 18
10905: PUSH
10906: EMPTY
10907: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
10908: LD_ADDR_LOC 19
10912: PUSH
10913: LD_INT 14
10915: PUSH
10916: EMPTY
10917: LIST
10918: ST_TO_ADDR
// Banned_Controls := [ ] ;
10919: LD_ADDR_LOC 20
10923: PUSH
10924: EMPTY
10925: ST_TO_ADDR
// Banned_Engines := [ ] ;
10926: LD_ADDR_LOC 21
10930: PUSH
10931: EMPTY
10932: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
10933: LD_ADDR_LOC 16
10937: PUSH
10938: LD_INT 31
10940: PUSH
10941: LD_INT 32
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PUSH
10948: LD_INT 4
10950: PUSH
10951: EMPTY
10952: LIST
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
10958: LD_ADDR_LOC 17
10962: PUSH
10963: LD_INT 2
10965: PUSH
10966: LD_INT 1
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: ST_TO_ADDR
// for i := 1 to 8 do
10973: LD_ADDR_VAR 0 4
10977: PUSH
10978: DOUBLE
10979: LD_INT 1
10981: DEC
10982: ST_TO_ADDR
10983: LD_INT 8
10985: PUSH
10986: FOR_TO
10987: IFFALSE 11038
// if ( Side_Nations [ i ] = 3 ) then
10989: LD_EXP 19
10993: PUSH
10994: LD_VAR 0 4
10998: ARRAY
10999: PUSH
11000: LD_INT 3
11002: EQUAL
11003: IFFALSE 11036
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11005: LD_ADDR_EXP 19
11009: PUSH
11010: LD_EXP 19
11014: PPUSH
11015: LD_VAR 0 4
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: LD_INT 2
11025: PPUSH
11026: CALL_OW 12
11030: PPUSH
11031: CALL_OW 1
11035: ST_TO_ADDR
11036: GO 10986
11038: POP
11039: POP
// end ; end ;
11040: GO 11043
11042: POP
// for i := 1 to 8 do
11043: LD_ADDR_VAR 0 4
11047: PUSH
11048: DOUBLE
11049: LD_INT 1
11051: DEC
11052: ST_TO_ADDR
11053: LD_INT 8
11055: PUSH
11056: FOR_TO
11057: IFFALSE 11141
// if Side_Positions [ i ] then
11059: LD_EXP 18
11063: PUSH
11064: LD_VAR 0 4
11068: ARRAY
11069: IFFALSE 11139
// begin for j in Unavailable_Techs do
11071: LD_ADDR_VAR 0 5
11075: PUSH
11076: LD_VAR 0 2
11080: PUSH
11081: FOR_IN
11082: IFFALSE 11103
// SetTech ( j , i , 0 ) ;
11084: LD_VAR 0 5
11088: PPUSH
11089: LD_VAR 0 4
11093: PPUSH
11094: LD_INT 0
11096: PPUSH
11097: CALL_OW 322
11101: GO 11081
11103: POP
11104: POP
// for j in Unavailable_Builds do
11105: LD_ADDR_VAR 0 5
11109: PUSH
11110: LD_VAR 0 3
11114: PUSH
11115: FOR_IN
11116: IFFALSE 11137
// SetRestrict ( j , i , 0 ) ;
11118: LD_VAR 0 5
11122: PPUSH
11123: LD_VAR 0 4
11127: PPUSH
11128: LD_INT 0
11130: PPUSH
11131: CALL_OW 324
11135: GO 11115
11137: POP
11138: POP
// end ;
11139: GO 11056
11141: POP
11142: POP
// end ;
11143: LD_VAR 0 1
11147: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11148: LD_INT 0
11150: PPUSH
11151: PPUSH
11152: PPUSH
11153: PPUSH
11154: PPUSH
11155: PPUSH
11156: PPUSH
// for i := 1 to Restricted_Builds do
11157: LD_ADDR_VAR 0 2
11161: PUSH
11162: DOUBLE
11163: LD_INT 1
11165: DEC
11166: ST_TO_ADDR
11167: LD_LOC 16
11171: PUSH
11172: FOR_TO
11173: IFFALSE 11483
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11175: LD_LOC 16
11179: PUSH
11180: LD_VAR 0 2
11184: ARRAY
11185: PUSH
11186: LD_INT 1
11188: ARRAY
11189: PUSH
11190: LD_INT 31
11192: DOUBLE
11193: EQUAL
11194: IFTRUE 11210
11196: LD_INT 32
11198: DOUBLE
11199: EQUAL
11200: IFTRUE 11210
11202: LD_INT 33
11204: DOUBLE
11205: EQUAL
11206: IFTRUE 11210
11208: GO 11221
11210: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11211: LD_ADDR_VAR 0 6
11215: PUSH
11216: LD_STRING #Turrets
11218: ST_TO_ADDR
11219: GO 11266
11221: LD_INT 4
11223: DOUBLE
11224: EQUAL
11225: IFTRUE 11235
11227: LD_INT 5
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 11246
11235: POP
// btype := #Armouries ; b_Behemoth :
11236: LD_ADDR_VAR 0 6
11240: PUSH
11241: LD_STRING #Armouries
11243: ST_TO_ADDR
11244: GO 11266
11246: LD_INT 37
11248: DOUBLE
11249: EQUAL
11250: IFTRUE 11254
11252: GO 11265
11254: POP
// btype := #Behemoths ; end ;
11255: LD_ADDR_VAR 0 6
11259: PUSH
11260: LD_STRING #Behemoths
11262: ST_TO_ADDR
11263: GO 11266
11265: POP
// list := [ ] ;
11266: LD_ADDR_VAR 0 7
11270: PUSH
11271: EMPTY
11272: ST_TO_ADDR
// for j := 1 to 8 do
11273: LD_ADDR_VAR 0 3
11277: PUSH
11278: DOUBLE
11279: LD_INT 1
11281: DEC
11282: ST_TO_ADDR
11283: LD_INT 8
11285: PUSH
11286: FOR_TO
11287: IFFALSE 11380
// if Side_Positions [ j ] then
11289: LD_EXP 18
11293: PUSH
11294: LD_VAR 0 3
11298: ARRAY
11299: IFFALSE 11378
// begin amount := 0 ;
11301: LD_ADDR_VAR 0 5
11305: PUSH
11306: LD_INT 0
11308: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11309: LD_ADDR_VAR 0 4
11313: PUSH
11314: LD_LOC 16
11318: PUSH
11319: LD_VAR 0 2
11323: ARRAY
11324: PUSH
11325: FOR_IN
11326: IFFALSE 11374
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11328: LD_ADDR_VAR 0 5
11332: PUSH
11333: LD_VAR 0 5
11337: PUSH
11338: LD_INT 22
11340: PUSH
11341: LD_VAR 0 3
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 30
11352: PUSH
11353: LD_VAR 0 4
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: PPUSH
11366: CALL_OW 69
11370: PLUS
11371: ST_TO_ADDR
11372: GO 11325
11374: POP
11375: POP
// break ;
11376: GO 11380
// end ;
11378: GO 11286
11380: POP
11381: POP
// list := [ ] ;
11382: LD_ADDR_VAR 0 7
11386: PUSH
11387: EMPTY
11388: ST_TO_ADDR
// for j := 1 to 8 do
11389: LD_ADDR_VAR 0 3
11393: PUSH
11394: DOUBLE
11395: LD_INT 1
11397: DEC
11398: ST_TO_ADDR
11399: LD_INT 8
11401: PUSH
11402: FOR_TO
11403: IFFALSE 11423
// list := list ^ amount ;
11405: LD_ADDR_VAR 0 7
11409: PUSH
11410: LD_VAR 0 7
11414: PUSH
11415: LD_VAR 0 5
11419: ADD
11420: ST_TO_ADDR
11421: GO 11402
11423: POP
11424: POP
// Already_Built := Already_Built ^ [ list ] ;
11425: LD_ADDR_LOC 22
11429: PUSH
11430: LD_LOC 22
11434: PUSH
11435: LD_VAR 0 7
11439: PUSH
11440: EMPTY
11441: LIST
11442: ADD
11443: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11444: LD_ADDR_LOC 23
11448: PUSH
11449: LD_LOC 23
11453: PUSH
11454: LD_VAR 0 6
11458: PUSH
11459: LD_VAR 0 5
11463: PUSH
11464: LD_LOC 17
11468: PUSH
11469: LD_VAR 0 2
11473: ARRAY
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: ADD
11480: ST_TO_ADDR
// end ;
11481: GO 11172
11483: POP
11484: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11485: LD_ADDR_LOC 24
11489: PUSH
11490: LD_INT 0
11492: PUSH
11493: LD_INT 0
11495: PUSH
11496: LD_INT 0
11498: PUSH
11499: LD_INT 0
11501: PUSH
11502: LD_INT 0
11504: PUSH
11505: LD_INT 0
11507: PUSH
11508: LD_INT 0
11510: PUSH
11511: LD_INT 0
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: ST_TO_ADDR
// if Limits_Info then
11524: LD_LOC 23
11528: IFFALSE 11544
// Limits_Info := #Limits ^ Limits_Info ;
11530: LD_ADDR_LOC 23
11534: PUSH
11535: LD_STRING #Limits
11537: PUSH
11538: LD_LOC 23
11542: ADD
11543: ST_TO_ADDR
// end ;
11544: LD_VAR 0 1
11548: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
11549: LD_INT 0
11551: PPUSH
11552: PPUSH
11553: PPUSH
11554: PPUSH
// for i := 1 to Restricted_Builds do
11555: LD_ADDR_VAR 0 7
11559: PUSH
11560: DOUBLE
11561: LD_INT 1
11563: DEC
11564: ST_TO_ADDR
11565: LD_LOC 16
11569: PUSH
11570: FOR_TO
11571: IFFALSE 11994
// if BType in Restricted_Builds [ i ] then
11573: LD_VAR 0 2
11577: PUSH
11578: LD_LOC 16
11582: PUSH
11583: LD_VAR 0 7
11587: ARRAY
11588: IN
11589: IFFALSE 11992
// begin if old_side then
11591: LD_VAR 0 4
11595: IFFALSE 11721
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
11597: LD_LOC 22
11601: PUSH
11602: LD_VAR 0 7
11606: ARRAY
11607: PUSH
11608: LD_VAR 0 3
11612: ARRAY
11613: PUSH
11614: LD_VAR 0 5
11618: PLUS
11619: PUSH
11620: LD_LOC 17
11624: PUSH
11625: LD_VAR 0 7
11629: ARRAY
11630: GREATER
11631: IFFALSE 11657
// begin SetSide ( un , old_side ) ;
11633: LD_VAR 0 1
11637: PPUSH
11638: LD_VAR 0 4
11642: PPUSH
11643: CALL_OW 235
// count := 0 ;
11647: LD_ADDR_VAR 0 5
11651: PUSH
11652: LD_INT 0
11654: ST_TO_ADDR
// end else
11655: GO 11721
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
11657: LD_ADDR_LOC 22
11661: PUSH
11662: LD_LOC 22
11666: PPUSH
11667: LD_VAR 0 7
11671: PPUSH
11672: LD_LOC 22
11676: PUSH
11677: LD_VAR 0 7
11681: ARRAY
11682: PPUSH
11683: LD_VAR 0 4
11687: PPUSH
11688: LD_LOC 22
11692: PUSH
11693: LD_VAR 0 7
11697: ARRAY
11698: PUSH
11699: LD_VAR 0 4
11703: ARRAY
11704: PUSH
11705: LD_VAR 0 5
11709: MINUS
11710: PPUSH
11711: CALL_OW 1
11715: PPUSH
11716: CALL_OW 1
11720: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
11721: LD_ADDR_LOC 22
11725: PUSH
11726: LD_LOC 22
11730: PPUSH
11731: LD_VAR 0 7
11735: PPUSH
11736: LD_LOC 22
11740: PUSH
11741: LD_VAR 0 7
11745: ARRAY
11746: PPUSH
11747: LD_VAR 0 3
11751: PPUSH
11752: LD_LOC 22
11756: PUSH
11757: LD_VAR 0 7
11761: ARRAY
11762: PUSH
11763: LD_VAR 0 3
11767: ARRAY
11768: PUSH
11769: LD_VAR 0 5
11773: PLUS
11774: PPUSH
11775: CALL_OW 1
11779: PPUSH
11780: CALL_OW 1
11784: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
11785: LD_VAR 0 5
11789: PUSH
11790: LD_INT 0
11792: NONEQUAL
11793: PUSH
11794: LD_VAR 0 3
11798: PUSH
11799: LD_OWVAR 2
11803: EQUAL
11804: AND
11805: IFFALSE 11848
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
11807: LD_ADDR_LOC 23
11811: PUSH
11812: LD_LOC 23
11816: PPUSH
11817: LD_INT 3
11819: PUSH
11820: LD_VAR 0 7
11824: MUL
11825: PPUSH
11826: LD_LOC 22
11830: PUSH
11831: LD_VAR 0 7
11835: ARRAY
11836: PUSH
11837: LD_VAR 0 3
11841: ARRAY
11842: PPUSH
11843: CALL_OW 1
11847: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
11848: LD_LOC 22
11852: PUSH
11853: LD_VAR 0 7
11857: ARRAY
11858: PUSH
11859: LD_VAR 0 3
11863: ARRAY
11864: PUSH
11865: LD_LOC 17
11869: PUSH
11870: LD_VAR 0 7
11874: ARRAY
11875: GREATER
11876: IFFALSE 11903
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
11878: LD_ADDR_LOC 24
11882: PUSH
11883: LD_LOC 24
11887: PPUSH
11888: LD_VAR 0 3
11892: PPUSH
11893: LD_INT 1
11895: PPUSH
11896: CALL_OW 1
11900: ST_TO_ADDR
// end else
11901: GO 11990
// begin for j := 1 to Restricted_Builds do
11903: LD_ADDR_VAR 0 8
11907: PUSH
11908: DOUBLE
11909: LD_INT 1
11911: DEC
11912: ST_TO_ADDR
11913: LD_LOC 16
11917: PUSH
11918: FOR_TO
11919: IFFALSE 11963
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
11921: LD_LOC 22
11925: PUSH
11926: LD_VAR 0 8
11930: ARRAY
11931: PUSH
11932: LD_VAR 0 3
11936: ARRAY
11937: PUSH
11938: LD_LOC 17
11942: PUSH
11943: LD_VAR 0 8
11947: ARRAY
11948: GREATER
11949: IFFALSE 11961
// begin Is_Cheater := true ;
11951: LD_ADDR_VAR 0 9
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// break ;
11959: GO 11963
// end ;
11961: GO 11918
11963: POP
11964: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
11965: LD_ADDR_LOC 24
11969: PUSH
11970: LD_LOC 24
11974: PPUSH
11975: LD_VAR 0 3
11979: PPUSH
11980: LD_VAR 0 9
11984: PPUSH
11985: CALL_OW 1
11989: ST_TO_ADDR
// end ; break ;
11990: GO 11994
// end ;
11992: GO 11570
11994: POP
11995: POP
// end ;
11996: LD_VAR 0 6
12000: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12001: LD_VAR 0 5
12005: PUSH
12006: LD_LOC 18
12010: IN
12011: PUSH
12012: LD_VAR 0 2
12016: PUSH
12017: LD_LOC 19
12021: IN
12022: OR
12023: PUSH
12024: LD_VAR 0 4
12028: PUSH
12029: LD_LOC 20
12033: IN
12034: OR
12035: PUSH
12036: LD_VAR 0 3
12040: PUSH
12041: LD_LOC 21
12045: IN
12046: OR
12047: IFFALSE 12058
// ComCancel ( factory ) ;
12049: LD_VAR 0 1
12053: PPUSH
12054: CALL_OW 127
// end ;
12058: PPOPN 5
12060: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12061: LD_VAR 0 2
12065: PUSH
12066: LD_LOC 18
12070: IN
12071: IFFALSE 12082
// ComCancel ( building ) ;
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 127
// end ; end_of_file
12082: PPOPN 2
12084: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12085: LD_INT 0
12087: PPUSH
12088: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12089: LD_ADDR_VAR 0 2
12093: PUSH
12094: LD_STRING #Multi1x1-Time
12096: PUSH
12097: LD_OWVAR 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: ST_TO_ADDR
// if WaitServerStrings then
12106: LD_EXP 57
12110: IFFALSE 12128
// AllStrings = AllStrings ^ WaitServerStrings ;
12112: LD_ADDR_VAR 0 2
12116: PUSH
12117: LD_VAR 0 2
12121: PUSH
12122: LD_EXP 57
12126: ADD
12127: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12128: LD_INT 0
12130: PUSH
12131: LD_EXP 13
12135: PUSH
12136: LD_OWVAR 1
12140: MINUS
12141: LESSEQUAL
12142: IFFALSE 12173
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12144: LD_ADDR_VAR 0 2
12148: PUSH
12149: LD_VAR 0 2
12153: PUSH
12154: LD_STRING #allowedsibbomb
12156: PUSH
12157: LD_EXP 13
12161: PUSH
12162: LD_OWVAR 1
12166: MINUS
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: ADD
12172: ST_TO_ADDR
// if ( ExtraStrings ) then
12173: LD_EXP 56
12177: IFFALSE 12199
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12179: LD_ADDR_VAR 0 2
12183: PUSH
12184: LD_VAR 0 2
12188: PUSH
12189: LD_STRING 
12191: ADD
12192: PUSH
12193: LD_EXP 56
12197: ADD
12198: ST_TO_ADDR
// if ( LimitsStrings ) then
12199: CALL 8925 0 0
12203: IFFALSE 12225
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12205: LD_ADDR_VAR 0 2
12209: PUSH
12210: LD_VAR 0 2
12214: PUSH
12215: LD_STRING 
12217: ADD
12218: PUSH
12219: CALL 8925 0 0
12223: ADD
12224: ST_TO_ADDR
// Display_Strings := AllStrings ;
12225: LD_ADDR_OWVAR 47
12229: PUSH
12230: LD_VAR 0 2
12234: ST_TO_ADDR
// end ;
12235: LD_VAR 0 1
12239: RET
// every 0 0$1 do
12240: GO 12242
12242: DISABLE
// begin ShowTimer ;
12243: CALL 12085 0 0
// enable ;
12247: ENABLE
// end ; end_of_file
12248: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12249: LD_INT 0
12251: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12252: LD_VAR 0 1
12256: PPUSH
12257: CALL_OW 255
12261: PUSH
12262: LD_VAR 0 4
12266: EQUAL
12267: IFFALSE 12286
// begin SetAchievement ( ACH_RAD ) ;
12269: LD_STRING ACH_RAD
12271: PPUSH
12272: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12276: LD_STRING ACH_NL
12278: PPUSH
12279: LD_INT 1
12281: PPUSH
12282: CALL_OW 564
// end end ;
12286: LD_VAR 0 5
12290: RET
// export function SA_Win ( side ) ; begin
12291: LD_INT 0
12293: PPUSH
// case side of 1 :
12294: LD_VAR 0 1
12298: PUSH
12299: LD_INT 1
12301: DOUBLE
12302: EQUAL
12303: IFTRUE 12307
12305: GO 12320
12307: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12308: LD_STRING ACH_AH
12310: PPUSH
12311: LD_INT 1
12313: PPUSH
12314: CALL_OW 564
12318: GO 12483
12320: LD_INT 2
12322: DOUBLE
12323: EQUAL
12324: IFTRUE 12328
12326: GO 12341
12328: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12329: LD_STRING ACH_E
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: CALL_OW 564
12339: GO 12483
12341: LD_INT 3
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12362
12349: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12350: LD_STRING ACH_OOL
12352: PPUSH
12353: LD_INT 1
12355: PPUSH
12356: CALL_OW 564
12360: GO 12483
12362: LD_INT 1
12364: PUSH
12365: LD_INT 2
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: DOUBLE
12372: EQUAL
12373: IFTRUE 12377
12375: GO 12402
12377: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12378: LD_STRING ACH_AH
12380: PPUSH
12381: LD_REAL  5.00000000000000E-0001
12384: PPUSH
12385: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12389: LD_STRING ACH_E
12391: PPUSH
12392: LD_REAL  5.00000000000000E-0001
12395: PPUSH
12396: CALL_OW 564
// end ; [ 2 , 3 ] :
12400: GO 12483
12402: LD_INT 2
12404: PUSH
12405: LD_INT 3
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: DOUBLE
12412: EQUAL
12413: IFTRUE 12417
12415: GO 12442
12417: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12418: LD_STRING ACH_OOL
12420: PPUSH
12421: LD_REAL  5.00000000000000E-0001
12424: PPUSH
12425: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12429: LD_STRING ACH_E
12431: PPUSH
12432: LD_REAL  5.00000000000000E-0001
12435: PPUSH
12436: CALL_OW 564
// end ; [ 3 , 1 ] :
12440: GO 12483
12442: LD_INT 3
12444: PUSH
12445: LD_INT 1
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: DOUBLE
12452: EQUAL
12453: IFTRUE 12457
12455: GO 12482
12457: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12458: LD_STRING ACH_AH
12460: PPUSH
12461: LD_REAL  5.00000000000000E-0001
12464: PPUSH
12465: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12469: LD_STRING ACH_OOL
12471: PPUSH
12472: LD_REAL  5.00000000000000E-0001
12475: PPUSH
12476: CALL_OW 564
// end ; end ;
12480: GO 12483
12482: POP
// end ; end_of_file
12483: LD_VAR 0 2
12487: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
12488: LD_INT 0
12490: PPUSH
12491: PPUSH
// enable ( 98 ) ;
12492: LD_INT 98
12494: ENABLE_MARKED
// GameEnded = false ;
12495: LD_ADDR_LOC 26
12499: PUSH
12500: LD_INT 0
12502: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12503: LD_ADDR_LOC 25
12507: PUSH
12508: LD_INT 0
12510: PUSH
12511: LD_INT 0
12513: PUSH
12514: LD_INT 0
12516: PUSH
12517: LD_INT 0
12519: PUSH
12520: LD_INT 0
12522: PUSH
12523: LD_INT 0
12525: PUSH
12526: LD_INT 0
12528: PUSH
12529: LD_INT 0
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: ST_TO_ADDR
// unfoged = false ;
12542: LD_ADDR_LOC 27
12546: PUSH
12547: LD_INT 0
12549: ST_TO_ADDR
// for i = 1 to side_positions do
12550: LD_ADDR_VAR 0 2
12554: PUSH
12555: DOUBLE
12556: LD_INT 1
12558: DEC
12559: ST_TO_ADDR
12560: LD_EXP 18
12564: PUSH
12565: FOR_TO
12566: IFFALSE 12606
// if not side_positions [ i ] then
12568: LD_EXP 18
12572: PUSH
12573: LD_VAR 0 2
12577: ARRAY
12578: NOT
12579: IFFALSE 12604
// defaited = replace ( defaited , i , true ) ;
12581: LD_ADDR_LOC 25
12585: PUSH
12586: LD_LOC 25
12590: PPUSH
12591: LD_VAR 0 2
12595: PPUSH
12596: LD_INT 1
12598: PPUSH
12599: CALL_OW 1
12603: ST_TO_ADDR
12604: GO 12565
12606: POP
12607: POP
// end ;
12608: LD_VAR 0 1
12612: RET
// function CanWinLoose ; begin
12613: LD_INT 0
12615: PPUSH
// Result := true ;
12616: LD_ADDR_VAR 0 1
12620: PUSH
12621: LD_INT 1
12623: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12624: CALL_OW 518
12628: PUSH
12629: CALL_OW 519
12633: PUSH
12634: LD_INT 0
12636: GREATER
12637: AND
12638: IFFALSE 12648
// Result := false ;
12640: LD_ADDR_VAR 0 1
12644: PUSH
12645: LD_INT 0
12647: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12648: CALL_OW 531
12652: PUSH
12653: CALL_OW 519
12657: PUSH
12658: LD_INT 1
12660: GREATER
12661: AND
12662: IFFALSE 12672
// Result := false ;
12664: LD_ADDR_VAR 0 1
12668: PUSH
12669: LD_INT 0
12671: ST_TO_ADDR
// end ;
12672: LD_VAR 0 1
12676: RET
// export function HasPower ( i ) ; var k , h ; begin
12677: LD_INT 0
12679: PPUSH
12680: PPUSH
12681: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
12682: LD_VAR 0 1
12686: PPUSH
12687: CALL_OW 108
12691: NOT
12692: PUSH
12693: LD_EXP 17
12697: PUSH
12698: LD_VAR 0 1
12702: ARRAY
12703: NOT
12704: AND
12705: PUSH
12706: LD_OWVAR 4
12710: AND
12711: IFFALSE 12723
// begin result = false ;
12713: LD_ADDR_VAR 0 2
12717: PUSH
12718: LD_INT 0
12720: ST_TO_ADDR
// end else
12721: GO 13018
// case def_win_rules of 0 :
12723: LD_EXP 14
12727: PUSH
12728: LD_INT 0
12730: DOUBLE
12731: EQUAL
12732: IFTRUE 12736
12734: GO 12899
12736: POP
// if def_people_respawning then
12737: LD_EXP 51
12741: IFFALSE 12832
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
12743: LD_ADDR_VAR 0 2
12747: PUSH
12748: LD_INT 22
12750: PUSH
12751: LD_VAR 0 1
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 2
12762: PUSH
12763: LD_INT 21
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 33
12775: PUSH
12776: LD_INT 3
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: LD_INT 33
12785: PUSH
12786: LD_INT 5
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 30
12795: PUSH
12796: LD_INT 0
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 30
12805: PUSH
12806: LD_INT 1
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PPUSH
12825: CALL_OW 69
12829: ST_TO_ADDR
12830: GO 12897
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
12832: LD_ADDR_VAR 0 2
12836: PUSH
12837: LD_INT 22
12839: PUSH
12840: LD_VAR 0 1
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PUSH
12849: LD_INT 2
12851: PUSH
12852: LD_INT 21
12854: PUSH
12855: LD_INT 1
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 33
12864: PUSH
12865: LD_INT 3
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 33
12874: PUSH
12875: LD_INT 5
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PPUSH
12892: CALL_OW 69
12896: ST_TO_ADDR
12897: GO 13018
12899: LD_INT 1
12901: DOUBLE
12902: EQUAL
12903: IFTRUE 12907
12905: GO 12946
12907: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
12908: LD_ADDR_VAR 0 2
12912: PUSH
12913: LD_INT 22
12915: PUSH
12916: LD_VAR 0 1
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 21
12927: PUSH
12928: LD_INT 1
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PPUSH
12939: CALL_OW 69
12943: ST_TO_ADDR
12944: GO 13018
12946: LD_INT 2
12948: DOUBLE
12949: EQUAL
12950: IFTRUE 12954
12952: GO 13017
12954: POP
// begin h = false ;
12955: LD_ADDR_VAR 0 4
12959: PUSH
12960: LD_INT 0
12962: ST_TO_ADDR
// for k in heroes [ i ] do
12963: LD_ADDR_VAR 0 3
12967: PUSH
12968: LD_EXP 30
12972: PUSH
12973: LD_VAR 0 1
12977: ARRAY
12978: PUSH
12979: FOR_IN
12980: IFFALSE 13003
// if IsLive ( k ) then
12982: LD_VAR 0 3
12986: PPUSH
12987: CALL_OW 300
12991: IFFALSE 13001
// h = true ;
12993: LD_ADDR_VAR 0 4
12997: PUSH
12998: LD_INT 1
13000: ST_TO_ADDR
13001: GO 12979
13003: POP
13004: POP
// Result := h ;
13005: LD_ADDR_VAR 0 2
13009: PUSH
13010: LD_VAR 0 4
13014: ST_TO_ADDR
// end ; end ;
13015: GO 13018
13017: POP
// end ;
13018: LD_VAR 0 2
13022: RET
// function AlliedSides ( i , j ) ; begin
13023: LD_INT 0
13025: PPUSH
// Result := false ;
13026: LD_ADDR_VAR 0 3
13030: PUSH
13031: LD_INT 0
13033: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13034: LD_VAR 0 1
13038: PPUSH
13039: LD_VAR 0 2
13043: PPUSH
13044: CALL_OW 81
13048: PUSH
13049: LD_INT 1
13051: EQUAL
13052: PUSH
13053: LD_VAR 0 2
13057: PPUSH
13058: LD_VAR 0 1
13062: PPUSH
13063: CALL_OW 81
13067: PUSH
13068: LD_INT 1
13070: EQUAL
13071: AND
13072: PUSH
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 83
13082: AND
13083: PUSH
13084: LD_VAR 0 2
13088: PPUSH
13089: CALL_OW 83
13093: AND
13094: IFFALSE 13104
// Result := true ;
13096: LD_ADDR_VAR 0 3
13100: PUSH
13101: LD_INT 1
13103: ST_TO_ADDR
// end ;
13104: LD_VAR 0 3
13108: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
13109: CALL 12613 0 0
13113: PUSH
13114: LD_LOC 26
13118: NOT
13119: AND
13120: IFFALSE 13136
13122: GO 13124
13124: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
13125: LD_ADDR_EXP 57
13129: PUSH
13130: LD_STRING #Player-Ended
13132: PUSH
13133: EMPTY
13134: LIST
13135: ST_TO_ADDR
13136: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
13137: CALL 12613 0 0
13141: PUSH
13142: LD_LOC 26
13146: AND
13147: IFFALSE 13156
13149: GO 13151
13151: DISABLE
// YouLostInMultiplayer ;
13152: CALL_OW 107
13156: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
13157: CALL 12613 0 0
13161: NOT
13162: PUSH
13163: CALL_OW 531
13167: NOT
13168: AND
13169: IFFALSE 13185
13171: GO 13173
13173: DISABLE
// WaitServerStrings = [ #server-wait ] ;
13174: LD_ADDR_EXP 57
13178: PUSH
13179: LD_STRING #server-wait
13181: PUSH
13182: EMPTY
13183: LIST
13184: ST_TO_ADDR
13185: END
// every 100 trigger IAmSpec do
13186: CALL_OW 531
13190: IFFALSE 13206
13192: GO 13194
13194: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
13195: LD_ADDR_EXP 57
13199: PUSH
13200: LD_STRING #Player-IAmSpec
13202: PUSH
13203: EMPTY
13204: LIST
13205: ST_TO_ADDR
13206: END
// every 100 trigger GameEnded and IAmSpec do
13207: LD_LOC 26
13211: PUSH
13212: CALL_OW 531
13216: AND
13217: IFFALSE 13226
13219: GO 13221
13221: DISABLE
// YouLostInMultiplayer ;
13222: CALL_OW 107
13226: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
13227: CALL 12613 0 0
13231: PUSH
13232: LD_LOC 26
13236: NOT
13237: AND
13238: IFFALSE 13254
13240: GO 13242
13242: DISABLE
// WaitServerStrings = [ $player-win ] ;
13243: LD_ADDR_EXP 57
13247: PUSH
13248: LD_STRING $player-win
13250: PUSH
13251: EMPTY
13252: LIST
13253: ST_TO_ADDR
13254: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
13255: CALL 12613 0 0
13259: PUSH
13260: LD_LOC 26
13264: AND
13265: IFFALSE 13289
13267: GO 13269
13269: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
13270: LD_EXP 19
13274: PUSH
13275: LD_OWVAR 2
13279: ARRAY
13280: PPUSH
13281: CALL 12291 0 1
// YouWinInMultiplayer ;
13285: CALL_OW 106
// end ;
13289: END
// every 100 trigger isEditor marked 401 do
13290: LD_OWVAR 84
13294: IFFALSE 13310
13296: GO 13298
13298: DISABLE
// Debug_Strings = [ You won ] ;
13299: LD_ADDR_OWVAR 48
13303: PUSH
13304: LD_STRING You won
13306: PUSH
13307: EMPTY
13308: LIST
13309: ST_TO_ADDR
13310: END
// every 100 trigger isEditor marked 400 do
13311: LD_OWVAR 84
13315: IFFALSE 13331
13317: GO 13319
13319: DISABLE
// Debug_Strings = [ You loss ] ;
13320: LD_ADDR_OWVAR 48
13324: PUSH
13325: LD_STRING You loss
13327: PUSH
13328: EMPTY
13329: LIST
13330: ST_TO_ADDR
13331: END
// every 100 marked 98 do var i , un ;
13332: GO 13334
13334: DISABLE
13335: LD_INT 0
13337: PPUSH
13338: PPUSH
// begin for i = 1 to side_positions do
13339: LD_ADDR_VAR 0 1
13343: PUSH
13344: DOUBLE
13345: LD_INT 1
13347: DEC
13348: ST_TO_ADDR
13349: LD_EXP 18
13353: PUSH
13354: FOR_TO
13355: IFFALSE 13478
// if side_positions [ i ] then
13357: LD_EXP 18
13361: PUSH
13362: LD_VAR 0 1
13366: ARRAY
13367: IFFALSE 13476
// if not HasPower ( i ) and not Defaited [ i ] then
13369: LD_VAR 0 1
13373: PPUSH
13374: CALL 12677 0 1
13378: NOT
13379: PUSH
13380: LD_LOC 25
13384: PUSH
13385: LD_VAR 0 1
13389: ARRAY
13390: NOT
13391: AND
13392: IFFALSE 13476
// begin un = filterallunits ( [ f_side , i ] ) ;
13394: LD_ADDR_VAR 0 2
13398: PUSH
13399: LD_INT 22
13401: PUSH
13402: LD_VAR 0 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PPUSH
13411: CALL_OW 69
13415: ST_TO_ADDR
// if un then
13416: LD_VAR 0 2
13420: IFFALSE 13434
// SetSide ( un , 0 ) ;
13422: LD_VAR 0 2
13426: PPUSH
13427: LD_INT 0
13429: PPUSH
13430: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
13434: LD_ADDR_LOC 25
13438: PUSH
13439: LD_LOC 25
13443: PPUSH
13444: LD_VAR 0 1
13448: PPUSH
13449: LD_INT 1
13451: PPUSH
13452: CALL_OW 1
13456: ST_TO_ADDR
// if i = your_side then
13457: LD_VAR 0 1
13461: PUSH
13462: LD_OWVAR 2
13466: EQUAL
13467: IFFALSE 13476
// begin Multiplayer_Loose_Message ;
13469: CALL_OW 521
// enable ( 400 ) ;
13473: LD_INT 400
13475: ENABLE_MARKED
// end ; end ;
13476: GO 13354
13478: POP
13479: POP
// if not Unfoged and defaited [ your_side ] then
13480: LD_LOC 27
13484: NOT
13485: PUSH
13486: LD_LOC 25
13490: PUSH
13491: LD_OWVAR 2
13495: ARRAY
13496: AND
13497: IFFALSE 13503
// Unfog ;
13499: CALL 13689 0 0
// DidGameEnd ;
13503: CALL 13518 0 0
// if not GameEnded then
13507: LD_LOC 26
13511: NOT
13512: IFFALSE 13515
// enable ;
13514: ENABLE
// end ;
13515: PPOPN 2
13517: END
// function DidGameEnd ; var i , k , enemy ; begin
13518: LD_INT 0
13520: PPUSH
13521: PPUSH
13522: PPUSH
13523: PPUSH
// enemy = [ ] ;
13524: LD_ADDR_VAR 0 4
13528: PUSH
13529: EMPTY
13530: ST_TO_ADDR
// for i = 1 to side_positions do
13531: LD_ADDR_VAR 0 2
13535: PUSH
13536: DOUBLE
13537: LD_INT 1
13539: DEC
13540: ST_TO_ADDR
13541: LD_EXP 18
13545: PUSH
13546: FOR_TO
13547: IFFALSE 13651
// if not defaited [ i ] then
13549: LD_LOC 25
13553: PUSH
13554: LD_VAR 0 2
13558: ARRAY
13559: NOT
13560: IFFALSE 13649
// for k = 1 to side_positions do
13562: LD_ADDR_VAR 0 3
13566: PUSH
13567: DOUBLE
13568: LD_INT 1
13570: DEC
13571: ST_TO_ADDR
13572: LD_EXP 18
13576: PUSH
13577: FOR_TO
13578: IFFALSE 13647
// if not defaited [ k ] then
13580: LD_LOC 25
13584: PUSH
13585: LD_VAR 0 3
13589: ARRAY
13590: NOT
13591: IFFALSE 13645
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
13593: LD_VAR 0 2
13597: PPUSH
13598: LD_VAR 0 3
13602: PPUSH
13603: CALL_OW 81
13607: PUSH
13608: LD_INT 2
13610: PUSH
13611: LD_INT 0
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: IN
13618: IFFALSE 13645
// enemy = enemy ^ [ i , k ] ;
13620: LD_ADDR_VAR 0 4
13624: PUSH
13625: LD_VAR 0 4
13629: PUSH
13630: LD_VAR 0 2
13634: PUSH
13635: LD_VAR 0 3
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: ADD
13644: ST_TO_ADDR
13645: GO 13577
13647: POP
13648: POP
13649: GO 13546
13651: POP
13652: POP
// if not enemy then
13653: LD_VAR 0 4
13657: NOT
13658: IFFALSE 13684
// begin GameEnded = true ;
13660: LD_ADDR_LOC 26
13664: PUSH
13665: LD_INT 1
13667: ST_TO_ADDR
// if not defaited [ your_side ] then
13668: LD_LOC 25
13672: PUSH
13673: LD_OWVAR 2
13677: ARRAY
13678: NOT
13679: IFFALSE 13684
// enable ( 401 ) ;
13681: LD_INT 401
13683: ENABLE_MARKED
// end ; end ;
13684: LD_VAR 0 1
13688: RET
// function unfog ; var k , friends ; begin
13689: LD_INT 0
13691: PPUSH
13692: PPUSH
13693: PPUSH
// for k = 1 to side_positions do
13694: LD_ADDR_VAR 0 2
13698: PUSH
13699: DOUBLE
13700: LD_INT 1
13702: DEC
13703: ST_TO_ADDR
13704: LD_EXP 18
13708: PUSH
13709: FOR_TO
13710: IFFALSE 13766
// if not defaited [ k ] then
13712: LD_LOC 25
13716: PUSH
13717: LD_VAR 0 2
13721: ARRAY
13722: NOT
13723: IFFALSE 13764
// if GetAttitude ( your_side , k ) in [ att_friend ] then
13725: LD_OWVAR 2
13729: PPUSH
13730: LD_VAR 0 2
13734: PPUSH
13735: CALL_OW 81
13739: PUSH
13740: LD_INT 1
13742: PUSH
13743: EMPTY
13744: LIST
13745: IN
13746: IFFALSE 13764
// friends = friends ^ k ;
13748: LD_ADDR_VAR 0 3
13752: PUSH
13753: LD_VAR 0 3
13757: PUSH
13758: LD_VAR 0 2
13762: ADD
13763: ST_TO_ADDR
13764: GO 13709
13766: POP
13767: POP
// if not friends then
13768: LD_VAR 0 3
13772: NOT
13773: IFFALSE 13790
// begin fogoff ( true ) ;
13775: LD_INT 1
13777: PPUSH
13778: CALL_OW 344
// unfoged = true ;
13782: LD_ADDR_LOC 27
13786: PUSH
13787: LD_INT 1
13789: ST_TO_ADDR
// end ; end ;
13790: LD_VAR 0 1
13794: RET
// export function MakeGameEnd ; begin
13795: LD_INT 0
13797: PPUSH
// fogoff ( true ) ;
13798: LD_INT 1
13800: PPUSH
13801: CALL_OW 344
// unfoged = true ;
13805: LD_ADDR_LOC 27
13809: PUSH
13810: LD_INT 1
13812: ST_TO_ADDR
// wait ( 0 0$5 ) ;
13813: LD_INT 175
13815: PPUSH
13816: CALL_OW 67
// GameEnded = true ;
13820: LD_ADDR_LOC 26
13824: PUSH
13825: LD_INT 1
13827: ST_TO_ADDR
// end ;
13828: LD_VAR 0 1
13832: RET
// export function GetGameEnded ; begin
13833: LD_INT 0
13835: PPUSH
// result = GameEnded ;
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_LOC 26
13845: ST_TO_ADDR
// end ; end_of_file
13846: LD_VAR 0 1
13850: RET
// export function SetMpTechs ( ) ; var side , i ; begin
13851: LD_INT 0
13853: PPUSH
13854: PPUSH
13855: PPUSH
// for side = 1 to 8 do
13856: LD_ADDR_VAR 0 2
13860: PUSH
13861: DOUBLE
13862: LD_INT 1
13864: DEC
13865: ST_TO_ADDR
13866: LD_INT 8
13868: PUSH
13869: FOR_TO
13870: IFFALSE 13991
// begin for i = 1 to 72 do
13872: LD_ADDR_VAR 0 3
13876: PUSH
13877: DOUBLE
13878: LD_INT 1
13880: DEC
13881: ST_TO_ADDR
13882: LD_INT 72
13884: PUSH
13885: FOR_TO
13886: IFFALSE 13917
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
13888: LD_VAR 0 3
13892: PPUSH
13893: LD_VAR 0 2
13897: PPUSH
13898: LD_INT 0
13900: PPUSH
13901: LD_VAR 0 3
13905: PPUSH
13906: CALL_OW 565
13910: PPUSH
13911: CALL_OW 322
13915: GO 13885
13917: POP
13918: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
13919: LD_INT 73
13921: PPUSH
13922: LD_VAR 0 2
13926: PPUSH
13927: LD_INT 0
13929: PPUSH
13930: LD_INT 25
13932: PPUSH
13933: CALL_OW 565
13937: PPUSH
13938: CALL_OW 322
// for i = 0 to 40 do
13942: LD_ADDR_VAR 0 3
13946: PUSH
13947: DOUBLE
13948: LD_INT 0
13950: DEC
13951: ST_TO_ADDR
13952: LD_INT 40
13954: PUSH
13955: FOR_TO
13956: IFFALSE 13987
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
13958: LD_VAR 0 3
13962: PPUSH
13963: LD_VAR 0 2
13967: PPUSH
13968: LD_INT 1
13970: PPUSH
13971: LD_VAR 0 3
13975: PPUSH
13976: CALL_OW 565
13980: PPUSH
13981: CALL_OW 324
13985: GO 13955
13987: POP
13988: POP
// end ;
13989: GO 13869
13991: POP
13992: POP
// end ;
13993: LD_VAR 0 1
13997: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
13998: LD_INT 0
14000: PPUSH
14001: PPUSH
14002: PPUSH
// for side = 1 to 8 do
14003: LD_ADDR_VAR 0 3
14007: PUSH
14008: DOUBLE
14009: LD_INT 1
14011: DEC
14012: ST_TO_ADDR
14013: LD_INT 8
14015: PUSH
14016: FOR_TO
14017: IFFALSE 18013
// begin for i = 1 to 73 do
14019: LD_ADDR_VAR 0 4
14023: PUSH
14024: DOUBLE
14025: LD_INT 1
14027: DEC
14028: ST_TO_ADDR
14029: LD_INT 73
14031: PUSH
14032: FOR_TO
14033: IFFALSE 14054
// SetTech ( i , side , state_disabled ) ;
14035: LD_VAR 0 4
14039: PPUSH
14040: LD_VAR 0 3
14044: PPUSH
14045: LD_INT 0
14047: PPUSH
14048: CALL_OW 322
14052: GO 14032
14054: POP
14055: POP
// for i = 0 to 40 do
14056: LD_ADDR_VAR 0 4
14060: PUSH
14061: DOUBLE
14062: LD_INT 0
14064: DEC
14065: ST_TO_ADDR
14066: LD_INT 40
14068: PUSH
14069: FOR_TO
14070: IFFALSE 14091
// SetRestrict ( i , side , false ) ;
14072: LD_VAR 0 4
14076: PPUSH
14077: LD_VAR 0 3
14081: PPUSH
14082: LD_INT 0
14084: PPUSH
14085: CALL_OW 324
14089: GO 14069
14091: POP
14092: POP
// case level of 1 :
14093: LD_VAR 0 1
14097: PUSH
14098: LD_INT 1
14100: DOUBLE
14101: EQUAL
14102: IFTRUE 14106
14104: GO 14259
14106: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14107: LD_INT 35
14109: PPUSH
14110: LD_VAR 0 3
14114: PPUSH
14115: LD_INT 1
14117: PPUSH
14118: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14122: LD_INT 45
14124: PPUSH
14125: LD_VAR 0 3
14129: PPUSH
14130: LD_INT 1
14132: PPUSH
14133: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14137: LD_INT 46
14139: PPUSH
14140: LD_VAR 0 3
14144: PPUSH
14145: LD_INT 1
14147: PPUSH
14148: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14152: LD_INT 47
14154: PPUSH
14155: LD_VAR 0 3
14159: PPUSH
14160: LD_INT 1
14162: PPUSH
14163: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14167: LD_INT 0
14169: PPUSH
14170: LD_VAR 0 3
14174: PPUSH
14175: LD_INT 1
14177: PPUSH
14178: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14182: LD_INT 2
14184: PPUSH
14185: LD_VAR 0 3
14189: PPUSH
14190: LD_INT 1
14192: PPUSH
14193: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14197: LD_INT 4
14199: PPUSH
14200: LD_VAR 0 3
14204: PPUSH
14205: LD_INT 1
14207: PPUSH
14208: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14212: LD_INT 6
14214: PPUSH
14215: LD_VAR 0 3
14219: PPUSH
14220: LD_INT 1
14222: PPUSH
14223: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14227: LD_INT 29
14229: PPUSH
14230: LD_VAR 0 3
14234: PPUSH
14235: LD_INT 1
14237: PPUSH
14238: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14242: LD_INT 31
14244: PPUSH
14245: LD_VAR 0 3
14249: PPUSH
14250: LD_INT 1
14252: PPUSH
14253: CALL_OW 324
// end ; 2 :
14257: GO 18011
14259: LD_INT 2
14261: DOUBLE
14262: EQUAL
14263: IFTRUE 14267
14265: GO 14465
14267: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14268: LD_INT 35
14270: PPUSH
14271: LD_VAR 0 3
14275: PPUSH
14276: LD_INT 1
14278: PPUSH
14279: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14283: LD_INT 45
14285: PPUSH
14286: LD_VAR 0 3
14290: PPUSH
14291: LD_INT 1
14293: PPUSH
14294: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14298: LD_INT 46
14300: PPUSH
14301: LD_VAR 0 3
14305: PPUSH
14306: LD_INT 1
14308: PPUSH
14309: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14313: LD_INT 47
14315: PPUSH
14316: LD_VAR 0 3
14320: PPUSH
14321: LD_INT 1
14323: PPUSH
14324: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14328: LD_INT 1
14330: PPUSH
14331: LD_VAR 0 3
14335: PPUSH
14336: LD_INT 1
14338: PPUSH
14339: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14343: LD_INT 2
14345: PPUSH
14346: LD_VAR 0 3
14350: PPUSH
14351: LD_INT 1
14353: PPUSH
14354: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14358: LD_INT 11
14360: PPUSH
14361: LD_VAR 0 3
14365: PPUSH
14366: LD_INT 1
14368: PPUSH
14369: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14373: LD_INT 0
14375: PPUSH
14376: LD_VAR 0 3
14380: PPUSH
14381: LD_INT 1
14383: PPUSH
14384: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14388: LD_INT 2
14390: PPUSH
14391: LD_VAR 0 3
14395: PPUSH
14396: LD_INT 1
14398: PPUSH
14399: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14403: LD_INT 4
14405: PPUSH
14406: LD_VAR 0 3
14410: PPUSH
14411: LD_INT 1
14413: PPUSH
14414: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14418: LD_INT 6
14420: PPUSH
14421: LD_VAR 0 3
14425: PPUSH
14426: LD_INT 1
14428: PPUSH
14429: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14433: LD_INT 29
14435: PPUSH
14436: LD_VAR 0 3
14440: PPUSH
14441: LD_INT 1
14443: PPUSH
14444: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14448: LD_INT 31
14450: PPUSH
14451: LD_VAR 0 3
14455: PPUSH
14456: LD_INT 1
14458: PPUSH
14459: CALL_OW 324
// end ; 3 :
14463: GO 18011
14465: LD_INT 3
14467: DOUBLE
14468: EQUAL
14469: IFTRUE 14473
14471: GO 14926
14473: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14474: LD_INT 35
14476: PPUSH
14477: LD_VAR 0 3
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14489: LD_INT 45
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: LD_INT 1
14499: PPUSH
14500: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14504: LD_INT 46
14506: PPUSH
14507: LD_VAR 0 3
14511: PPUSH
14512: LD_INT 1
14514: PPUSH
14515: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14519: LD_INT 47
14521: PPUSH
14522: LD_VAR 0 3
14526: PPUSH
14527: LD_INT 1
14529: PPUSH
14530: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14534: LD_INT 1
14536: PPUSH
14537: LD_VAR 0 3
14541: PPUSH
14542: LD_INT 1
14544: PPUSH
14545: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14549: LD_INT 2
14551: PPUSH
14552: LD_VAR 0 3
14556: PPUSH
14557: LD_INT 1
14559: PPUSH
14560: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14564: LD_INT 11
14566: PPUSH
14567: LD_VAR 0 3
14571: PPUSH
14572: LD_INT 1
14574: PPUSH
14575: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14579: LD_INT 48
14581: PPUSH
14582: LD_VAR 0 3
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14594: LD_INT 69
14596: PPUSH
14597: LD_VAR 0 3
14601: PPUSH
14602: LD_INT 1
14604: PPUSH
14605: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14609: LD_INT 39
14611: PPUSH
14612: LD_VAR 0 3
14616: PPUSH
14617: LD_INT 1
14619: PPUSH
14620: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14624: LD_INT 43
14626: PPUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_INT 1
14634: PPUSH
14635: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14639: LD_INT 51
14641: PPUSH
14642: LD_VAR 0 3
14646: PPUSH
14647: LD_INT 1
14649: PPUSH
14650: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14654: LD_INT 6
14656: PPUSH
14657: LD_VAR 0 3
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14669: LD_INT 0
14671: PPUSH
14672: LD_VAR 0 3
14676: PPUSH
14677: LD_INT 1
14679: PPUSH
14680: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14684: LD_INT 2
14686: PPUSH
14687: LD_VAR 0 3
14691: PPUSH
14692: LD_INT 1
14694: PPUSH
14695: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14699: LD_INT 3
14701: PPUSH
14702: LD_VAR 0 3
14706: PPUSH
14707: LD_INT 1
14709: PPUSH
14710: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14714: LD_INT 4
14716: PPUSH
14717: LD_VAR 0 3
14721: PPUSH
14722: LD_INT 1
14724: PPUSH
14725: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14729: LD_INT 6
14731: PPUSH
14732: LD_VAR 0 3
14736: PPUSH
14737: LD_INT 1
14739: PPUSH
14740: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14744: LD_INT 7
14746: PPUSH
14747: LD_VAR 0 3
14751: PPUSH
14752: LD_INT 1
14754: PPUSH
14755: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14759: LD_INT 8
14761: PPUSH
14762: LD_VAR 0 3
14766: PPUSH
14767: LD_INT 1
14769: PPUSH
14770: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14774: LD_INT 10
14776: PPUSH
14777: LD_VAR 0 3
14781: PPUSH
14782: LD_INT 1
14784: PPUSH
14785: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14789: LD_INT 15
14791: PPUSH
14792: LD_VAR 0 3
14796: PPUSH
14797: LD_INT 1
14799: PPUSH
14800: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14804: LD_INT 16
14806: PPUSH
14807: LD_VAR 0 3
14811: PPUSH
14812: LD_INT 1
14814: PPUSH
14815: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14819: LD_INT 17
14821: PPUSH
14822: LD_VAR 0 3
14826: PPUSH
14827: LD_INT 1
14829: PPUSH
14830: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14834: LD_INT 20
14836: PPUSH
14837: LD_VAR 0 3
14841: PPUSH
14842: LD_INT 1
14844: PPUSH
14845: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14849: LD_INT 26
14851: PPUSH
14852: LD_VAR 0 3
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14864: LD_INT 27
14866: PPUSH
14867: LD_VAR 0 3
14871: PPUSH
14872: LD_INT 1
14874: PPUSH
14875: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14879: LD_INT 29
14881: PPUSH
14882: LD_VAR 0 3
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14894: LD_INT 31
14896: PPUSH
14897: LD_VAR 0 3
14901: PPUSH
14902: LD_INT 1
14904: PPUSH
14905: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14909: LD_INT 32
14911: PPUSH
14912: LD_VAR 0 3
14916: PPUSH
14917: LD_INT 1
14919: PPUSH
14920: CALL_OW 324
// end ; 4 :
14924: GO 18011
14926: LD_INT 4
14928: DOUBLE
14929: EQUAL
14930: IFTRUE 14934
14932: GO 15882
14934: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14935: LD_INT 35
14937: PPUSH
14938: LD_VAR 0 3
14942: PPUSH
14943: LD_INT 1
14945: PPUSH
14946: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14950: LD_INT 45
14952: PPUSH
14953: LD_VAR 0 3
14957: PPUSH
14958: LD_INT 1
14960: PPUSH
14961: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14965: LD_INT 46
14967: PPUSH
14968: LD_VAR 0 3
14972: PPUSH
14973: LD_INT 1
14975: PPUSH
14976: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14980: LD_INT 47
14982: PPUSH
14983: LD_VAR 0 3
14987: PPUSH
14988: LD_INT 1
14990: PPUSH
14991: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14995: LD_INT 1
14997: PPUSH
14998: LD_VAR 0 3
15002: PPUSH
15003: LD_INT 1
15005: PPUSH
15006: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15010: LD_INT 2
15012: PPUSH
15013: LD_VAR 0 3
15017: PPUSH
15018: LD_INT 1
15020: PPUSH
15021: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15025: LD_INT 11
15027: PPUSH
15028: LD_VAR 0 3
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15040: LD_INT 20
15042: PPUSH
15043: LD_VAR 0 3
15047: PPUSH
15048: LD_INT 1
15050: PPUSH
15051: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15055: LD_INT 48
15057: PPUSH
15058: LD_VAR 0 3
15062: PPUSH
15063: LD_INT 1
15065: PPUSH
15066: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15070: LD_INT 49
15072: PPUSH
15073: LD_VAR 0 3
15077: PPUSH
15078: LD_INT 1
15080: PPUSH
15081: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15085: LD_INT 69
15087: PPUSH
15088: LD_VAR 0 3
15092: PPUSH
15093: LD_INT 1
15095: PPUSH
15096: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15100: LD_INT 39
15102: PPUSH
15103: LD_VAR 0 3
15107: PPUSH
15108: LD_INT 1
15110: PPUSH
15111: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15115: LD_INT 34
15117: PPUSH
15118: LD_VAR 0 3
15122: PPUSH
15123: LD_INT 1
15125: PPUSH
15126: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15130: LD_INT 42
15132: PPUSH
15133: LD_VAR 0 3
15137: PPUSH
15138: LD_INT 1
15140: PPUSH
15141: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15145: LD_INT 44
15147: PPUSH
15148: LD_VAR 0 3
15152: PPUSH
15153: LD_INT 1
15155: PPUSH
15156: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15160: LD_INT 41
15162: PPUSH
15163: LD_VAR 0 3
15167: PPUSH
15168: LD_INT 1
15170: PPUSH
15171: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15175: LD_INT 43
15177: PPUSH
15178: LD_VAR 0 3
15182: PPUSH
15183: LD_INT 1
15185: PPUSH
15186: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15190: LD_INT 70
15192: PPUSH
15193: LD_VAR 0 3
15197: PPUSH
15198: LD_INT 1
15200: PPUSH
15201: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15205: LD_INT 51
15207: PPUSH
15208: LD_VAR 0 3
15212: PPUSH
15213: LD_INT 1
15215: PPUSH
15216: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15220: LD_INT 52
15222: PPUSH
15223: LD_VAR 0 3
15227: PPUSH
15228: LD_INT 1
15230: PPUSH
15231: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15235: LD_INT 6
15237: PPUSH
15238: LD_VAR 0 3
15242: PPUSH
15243: LD_INT 1
15245: PPUSH
15246: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15250: LD_INT 15
15252: PPUSH
15253: LD_VAR 0 3
15257: PPUSH
15258: LD_INT 1
15260: PPUSH
15261: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15265: LD_INT 7
15267: PPUSH
15268: LD_VAR 0 3
15272: PPUSH
15273: LD_INT 1
15275: PPUSH
15276: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15280: LD_INT 12
15282: PPUSH
15283: LD_VAR 0 3
15287: PPUSH
15288: LD_INT 1
15290: PPUSH
15291: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15295: LD_INT 18
15297: PPUSH
15298: LD_VAR 0 3
15302: PPUSH
15303: LD_INT 1
15305: PPUSH
15306: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15310: LD_INT 60
15312: PPUSH
15313: LD_VAR 0 3
15317: PPUSH
15318: LD_INT 1
15320: PPUSH
15321: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15325: LD_INT 9
15327: PPUSH
15328: LD_VAR 0 3
15332: PPUSH
15333: LD_INT 1
15335: PPUSH
15336: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15340: LD_INT 30
15342: PPUSH
15343: LD_VAR 0 3
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15355: LD_INT 37
15357: PPUSH
15358: LD_VAR 0 3
15362: PPUSH
15363: LD_INT 1
15365: PPUSH
15366: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15370: LD_INT 5
15372: PPUSH
15373: LD_VAR 0 3
15377: PPUSH
15378: LD_INT 1
15380: PPUSH
15381: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15385: LD_INT 66
15387: PPUSH
15388: LD_VAR 0 3
15392: PPUSH
15393: LD_INT 1
15395: PPUSH
15396: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15400: LD_INT 21
15402: PPUSH
15403: LD_VAR 0 3
15407: PPUSH
15408: LD_INT 1
15410: PPUSH
15411: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15415: LD_INT 22
15417: PPUSH
15418: LD_VAR 0 3
15422: PPUSH
15423: LD_INT 1
15425: PPUSH
15426: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15430: LD_INT 54
15432: PPUSH
15433: LD_VAR 0 3
15437: PPUSH
15438: LD_INT 1
15440: PPUSH
15441: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15445: LD_INT 0
15447: PPUSH
15448: LD_VAR 0 3
15452: PPUSH
15453: LD_INT 1
15455: PPUSH
15456: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15460: LD_INT 1
15462: PPUSH
15463: LD_VAR 0 3
15467: PPUSH
15468: LD_INT 1
15470: PPUSH
15471: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15475: LD_INT 2
15477: PPUSH
15478: LD_VAR 0 3
15482: PPUSH
15483: LD_INT 1
15485: PPUSH
15486: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15490: LD_INT 3
15492: PPUSH
15493: LD_VAR 0 3
15497: PPUSH
15498: LD_INT 1
15500: PPUSH
15501: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15505: LD_INT 4
15507: PPUSH
15508: LD_VAR 0 3
15512: PPUSH
15513: LD_INT 1
15515: PPUSH
15516: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15520: LD_INT 5
15522: PPUSH
15523: LD_VAR 0 3
15527: PPUSH
15528: LD_INT 1
15530: PPUSH
15531: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15535: LD_INT 6
15537: PPUSH
15538: LD_VAR 0 3
15542: PPUSH
15543: LD_INT 1
15545: PPUSH
15546: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15550: LD_INT 7
15552: PPUSH
15553: LD_VAR 0 3
15557: PPUSH
15558: LD_INT 1
15560: PPUSH
15561: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15565: LD_INT 8
15567: PPUSH
15568: LD_VAR 0 3
15572: PPUSH
15573: LD_INT 1
15575: PPUSH
15576: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15580: LD_INT 10
15582: PPUSH
15583: LD_VAR 0 3
15587: PPUSH
15588: LD_INT 1
15590: PPUSH
15591: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15595: LD_INT 11
15597: PPUSH
15598: LD_VAR 0 3
15602: PPUSH
15603: LD_INT 1
15605: PPUSH
15606: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15610: LD_INT 12
15612: PPUSH
15613: LD_VAR 0 3
15617: PPUSH
15618: LD_INT 1
15620: PPUSH
15621: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15625: LD_INT 13
15627: PPUSH
15628: LD_VAR 0 3
15632: PPUSH
15633: LD_INT 1
15635: PPUSH
15636: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15640: LD_INT 14
15642: PPUSH
15643: LD_VAR 0 3
15647: PPUSH
15648: LD_INT 1
15650: PPUSH
15651: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15655: LD_INT 15
15657: PPUSH
15658: LD_VAR 0 3
15662: PPUSH
15663: LD_INT 1
15665: PPUSH
15666: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15670: LD_INT 16
15672: PPUSH
15673: LD_VAR 0 3
15677: PPUSH
15678: LD_INT 1
15680: PPUSH
15681: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15685: LD_INT 17
15687: PPUSH
15688: LD_VAR 0 3
15692: PPUSH
15693: LD_INT 1
15695: PPUSH
15696: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15700: LD_INT 19
15702: PPUSH
15703: LD_VAR 0 3
15707: PPUSH
15708: LD_INT 1
15710: PPUSH
15711: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15715: LD_INT 20
15717: PPUSH
15718: LD_VAR 0 3
15722: PPUSH
15723: LD_INT 1
15725: PPUSH
15726: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15730: LD_INT 21
15732: PPUSH
15733: LD_VAR 0 3
15737: PPUSH
15738: LD_INT 1
15740: PPUSH
15741: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15745: LD_INT 23
15747: PPUSH
15748: LD_VAR 0 3
15752: PPUSH
15753: LD_INT 1
15755: PPUSH
15756: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15760: LD_INT 26
15762: PPUSH
15763: LD_VAR 0 3
15767: PPUSH
15768: LD_INT 1
15770: PPUSH
15771: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15775: LD_INT 27
15777: PPUSH
15778: LD_VAR 0 3
15782: PPUSH
15783: LD_INT 1
15785: PPUSH
15786: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15790: LD_INT 28
15792: PPUSH
15793: LD_VAR 0 3
15797: PPUSH
15798: LD_INT 1
15800: PPUSH
15801: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15805: LD_INT 29
15807: PPUSH
15808: LD_VAR 0 3
15812: PPUSH
15813: LD_INT 1
15815: PPUSH
15816: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15820: LD_INT 30
15822: PPUSH
15823: LD_VAR 0 3
15827: PPUSH
15828: LD_INT 1
15830: PPUSH
15831: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15835: LD_INT 31
15837: PPUSH
15838: LD_VAR 0 3
15842: PPUSH
15843: LD_INT 1
15845: PPUSH
15846: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15850: LD_INT 32
15852: PPUSH
15853: LD_VAR 0 3
15857: PPUSH
15858: LD_INT 1
15860: PPUSH
15861: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15865: LD_INT 36
15867: PPUSH
15868: LD_VAR 0 3
15872: PPUSH
15873: LD_INT 1
15875: PPUSH
15876: CALL_OW 324
// end ; 5 :
15880: GO 18011
15882: LD_INT 5
15884: DOUBLE
15885: EQUAL
15886: IFTRUE 15890
15888: GO 17003
15890: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15891: LD_INT 35
15893: PPUSH
15894: LD_VAR 0 3
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15906: LD_INT 45
15908: PPUSH
15909: LD_VAR 0 3
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15921: LD_INT 46
15923: PPUSH
15924: LD_VAR 0 3
15928: PPUSH
15929: LD_INT 1
15931: PPUSH
15932: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15936: LD_INT 47
15938: PPUSH
15939: LD_VAR 0 3
15943: PPUSH
15944: LD_INT 1
15946: PPUSH
15947: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15951: LD_INT 1
15953: PPUSH
15954: LD_VAR 0 3
15958: PPUSH
15959: LD_INT 1
15961: PPUSH
15962: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15966: LD_INT 2
15968: PPUSH
15969: LD_VAR 0 3
15973: PPUSH
15974: LD_INT 1
15976: PPUSH
15977: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15981: LD_INT 11
15983: PPUSH
15984: LD_VAR 0 3
15988: PPUSH
15989: LD_INT 1
15991: PPUSH
15992: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15996: LD_INT 20
15998: PPUSH
15999: LD_VAR 0 3
16003: PPUSH
16004: LD_INT 1
16006: PPUSH
16007: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16011: LD_INT 48
16013: PPUSH
16014: LD_VAR 0 3
16018: PPUSH
16019: LD_INT 1
16021: PPUSH
16022: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16026: LD_INT 49
16028: PPUSH
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16041: LD_INT 69
16043: PPUSH
16044: LD_VAR 0 3
16048: PPUSH
16049: LD_INT 1
16051: PPUSH
16052: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16056: LD_INT 39
16058: PPUSH
16059: LD_VAR 0 3
16063: PPUSH
16064: LD_INT 1
16066: PPUSH
16067: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16071: LD_INT 34
16073: PPUSH
16074: LD_VAR 0 3
16078: PPUSH
16079: LD_INT 1
16081: PPUSH
16082: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16086: LD_INT 42
16088: PPUSH
16089: LD_VAR 0 3
16093: PPUSH
16094: LD_INT 1
16096: PPUSH
16097: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16101: LD_INT 44
16103: PPUSH
16104: LD_VAR 0 3
16108: PPUSH
16109: LD_INT 1
16111: PPUSH
16112: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16116: LD_INT 41
16118: PPUSH
16119: LD_VAR 0 3
16123: PPUSH
16124: LD_INT 1
16126: PPUSH
16127: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16131: LD_INT 40
16133: PPUSH
16134: LD_VAR 0 3
16138: PPUSH
16139: LD_INT 1
16141: PPUSH
16142: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16146: LD_INT 43
16148: PPUSH
16149: LD_VAR 0 3
16153: PPUSH
16154: LD_INT 1
16156: PPUSH
16157: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16161: LD_INT 70
16163: PPUSH
16164: LD_VAR 0 3
16168: PPUSH
16169: LD_INT 1
16171: PPUSH
16172: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16176: LD_INT 51
16178: PPUSH
16179: LD_VAR 0 3
16183: PPUSH
16184: LD_INT 1
16186: PPUSH
16187: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16191: LD_INT 52
16193: PPUSH
16194: LD_VAR 0 3
16198: PPUSH
16199: LD_INT 1
16201: PPUSH
16202: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16206: LD_INT 6
16208: PPUSH
16209: LD_VAR 0 3
16213: PPUSH
16214: LD_INT 1
16216: PPUSH
16217: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16221: LD_INT 15
16223: PPUSH
16224: LD_VAR 0 3
16228: PPUSH
16229: LD_INT 1
16231: PPUSH
16232: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16236: LD_INT 7
16238: PPUSH
16239: LD_VAR 0 3
16243: PPUSH
16244: LD_INT 1
16246: PPUSH
16247: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16251: LD_INT 12
16253: PPUSH
16254: LD_VAR 0 3
16258: PPUSH
16259: LD_INT 1
16261: PPUSH
16262: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16266: LD_INT 17
16268: PPUSH
16269: LD_VAR 0 3
16273: PPUSH
16274: LD_INT 1
16276: PPUSH
16277: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16281: LD_INT 18
16283: PPUSH
16284: LD_VAR 0 3
16288: PPUSH
16289: LD_INT 1
16291: PPUSH
16292: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16296: LD_INT 60
16298: PPUSH
16299: LD_VAR 0 3
16303: PPUSH
16304: LD_INT 1
16306: PPUSH
16307: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16311: LD_INT 32
16313: PPUSH
16314: LD_VAR 0 3
16318: PPUSH
16319: LD_INT 1
16321: PPUSH
16322: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16326: LD_INT 9
16328: PPUSH
16329: LD_VAR 0 3
16333: PPUSH
16334: LD_INT 1
16336: PPUSH
16337: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16341: LD_INT 57
16343: PPUSH
16344: LD_VAR 0 3
16348: PPUSH
16349: LD_INT 1
16351: PPUSH
16352: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16356: LD_INT 30
16358: PPUSH
16359: LD_VAR 0 3
16363: PPUSH
16364: LD_INT 1
16366: PPUSH
16367: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16371: LD_INT 37
16373: PPUSH
16374: LD_VAR 0 3
16378: PPUSH
16379: LD_INT 1
16381: PPUSH
16382: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16386: LD_INT 63
16388: PPUSH
16389: LD_VAR 0 3
16393: PPUSH
16394: LD_INT 1
16396: PPUSH
16397: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16401: LD_INT 3
16403: PPUSH
16404: LD_VAR 0 3
16408: PPUSH
16409: LD_INT 1
16411: PPUSH
16412: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16416: LD_INT 4
16418: PPUSH
16419: LD_VAR 0 3
16423: PPUSH
16424: LD_INT 1
16426: PPUSH
16427: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16431: LD_INT 5
16433: PPUSH
16434: LD_VAR 0 3
16438: PPUSH
16439: LD_INT 1
16441: PPUSH
16442: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16446: LD_INT 66
16448: PPUSH
16449: LD_VAR 0 3
16453: PPUSH
16454: LD_INT 1
16456: PPUSH
16457: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16461: LD_INT 21
16463: PPUSH
16464: LD_VAR 0 3
16468: PPUSH
16469: LD_INT 1
16471: PPUSH
16472: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16476: LD_INT 22
16478: PPUSH
16479: LD_VAR 0 3
16483: PPUSH
16484: LD_INT 1
16486: PPUSH
16487: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16491: LD_INT 19
16493: PPUSH
16494: LD_VAR 0 3
16498: PPUSH
16499: LD_INT 1
16501: PPUSH
16502: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16506: LD_INT 54
16508: PPUSH
16509: LD_VAR 0 3
16513: PPUSH
16514: LD_INT 1
16516: PPUSH
16517: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16521: LD_INT 55
16523: PPUSH
16524: LD_VAR 0 3
16528: PPUSH
16529: LD_INT 1
16531: PPUSH
16532: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16536: LD_INT 0
16538: PPUSH
16539: LD_VAR 0 3
16543: PPUSH
16544: LD_INT 1
16546: PPUSH
16547: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16551: LD_INT 1
16553: PPUSH
16554: LD_VAR 0 3
16558: PPUSH
16559: LD_INT 1
16561: PPUSH
16562: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16566: LD_INT 2
16568: PPUSH
16569: LD_VAR 0 3
16573: PPUSH
16574: LD_INT 1
16576: PPUSH
16577: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16581: LD_INT 3
16583: PPUSH
16584: LD_VAR 0 3
16588: PPUSH
16589: LD_INT 1
16591: PPUSH
16592: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16596: LD_INT 4
16598: PPUSH
16599: LD_VAR 0 3
16603: PPUSH
16604: LD_INT 1
16606: PPUSH
16607: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16611: LD_INT 5
16613: PPUSH
16614: LD_VAR 0 3
16618: PPUSH
16619: LD_INT 1
16621: PPUSH
16622: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16626: LD_INT 6
16628: PPUSH
16629: LD_VAR 0 3
16633: PPUSH
16634: LD_INT 1
16636: PPUSH
16637: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16641: LD_INT 7
16643: PPUSH
16644: LD_VAR 0 3
16648: PPUSH
16649: LD_INT 1
16651: PPUSH
16652: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16656: LD_INT 8
16658: PPUSH
16659: LD_VAR 0 3
16663: PPUSH
16664: LD_INT 1
16666: PPUSH
16667: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16671: LD_INT 10
16673: PPUSH
16674: LD_VAR 0 3
16678: PPUSH
16679: LD_INT 1
16681: PPUSH
16682: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16686: LD_INT 11
16688: PPUSH
16689: LD_VAR 0 3
16693: PPUSH
16694: LD_INT 1
16696: PPUSH
16697: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16701: LD_INT 12
16703: PPUSH
16704: LD_VAR 0 3
16708: PPUSH
16709: LD_INT 1
16711: PPUSH
16712: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16716: LD_INT 13
16718: PPUSH
16719: LD_VAR 0 3
16723: PPUSH
16724: LD_INT 1
16726: PPUSH
16727: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16731: LD_INT 14
16733: PPUSH
16734: LD_VAR 0 3
16738: PPUSH
16739: LD_INT 1
16741: PPUSH
16742: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16746: LD_INT 15
16748: PPUSH
16749: LD_VAR 0 3
16753: PPUSH
16754: LD_INT 1
16756: PPUSH
16757: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16761: LD_INT 16
16763: PPUSH
16764: LD_VAR 0 3
16768: PPUSH
16769: LD_INT 1
16771: PPUSH
16772: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16776: LD_INT 17
16778: PPUSH
16779: LD_VAR 0 3
16783: PPUSH
16784: LD_INT 1
16786: PPUSH
16787: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
16791: LD_INT 18
16793: PPUSH
16794: LD_VAR 0 3
16798: PPUSH
16799: LD_INT 1
16801: PPUSH
16802: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16806: LD_INT 19
16808: PPUSH
16809: LD_VAR 0 3
16813: PPUSH
16814: LD_INT 1
16816: PPUSH
16817: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16821: LD_INT 20
16823: PPUSH
16824: LD_VAR 0 3
16828: PPUSH
16829: LD_INT 1
16831: PPUSH
16832: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16836: LD_INT 21
16838: PPUSH
16839: LD_VAR 0 3
16843: PPUSH
16844: LD_INT 1
16846: PPUSH
16847: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16851: LD_INT 23
16853: PPUSH
16854: LD_VAR 0 3
16858: PPUSH
16859: LD_INT 1
16861: PPUSH
16862: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16866: LD_INT 26
16868: PPUSH
16869: LD_VAR 0 3
16873: PPUSH
16874: LD_INT 1
16876: PPUSH
16877: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16881: LD_INT 27
16883: PPUSH
16884: LD_VAR 0 3
16888: PPUSH
16889: LD_INT 1
16891: PPUSH
16892: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16896: LD_INT 28
16898: PPUSH
16899: LD_VAR 0 3
16903: PPUSH
16904: LD_INT 1
16906: PPUSH
16907: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16911: LD_INT 29
16913: PPUSH
16914: LD_VAR 0 3
16918: PPUSH
16919: LD_INT 1
16921: PPUSH
16922: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16926: LD_INT 30
16928: PPUSH
16929: LD_VAR 0 3
16933: PPUSH
16934: LD_INT 1
16936: PPUSH
16937: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16941: LD_INT 31
16943: PPUSH
16944: LD_VAR 0 3
16948: PPUSH
16949: LD_INT 1
16951: PPUSH
16952: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16956: LD_INT 32
16958: PPUSH
16959: LD_VAR 0 3
16963: PPUSH
16964: LD_INT 1
16966: PPUSH
16967: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
16971: LD_INT 33
16973: PPUSH
16974: LD_VAR 0 3
16978: PPUSH
16979: LD_INT 1
16981: PPUSH
16982: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
16986: LD_INT 36
16988: PPUSH
16989: LD_VAR 0 3
16993: PPUSH
16994: LD_INT 1
16996: PPUSH
16997: CALL_OW 324
// end ; 6 :
17001: GO 18011
17003: LD_INT 6
17005: DOUBLE
17006: EQUAL
17007: IFTRUE 17011
17009: GO 17936
17011: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17012: LD_INT 35
17014: PPUSH
17015: LD_VAR 0 3
17019: PPUSH
17020: LD_INT 1
17022: PPUSH
17023: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17027: LD_INT 45
17029: PPUSH
17030: LD_VAR 0 3
17034: PPUSH
17035: LD_INT 1
17037: PPUSH
17038: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17042: LD_INT 46
17044: PPUSH
17045: LD_VAR 0 3
17049: PPUSH
17050: LD_INT 1
17052: PPUSH
17053: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17057: LD_INT 47
17059: PPUSH
17060: LD_VAR 0 3
17064: PPUSH
17065: LD_INT 1
17067: PPUSH
17068: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17072: LD_INT 1
17074: PPUSH
17075: LD_VAR 0 3
17079: PPUSH
17080: LD_INT 1
17082: PPUSH
17083: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17087: LD_INT 2
17089: PPUSH
17090: LD_VAR 0 3
17094: PPUSH
17095: LD_INT 1
17097: PPUSH
17098: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17102: LD_INT 11
17104: PPUSH
17105: LD_VAR 0 3
17109: PPUSH
17110: LD_INT 1
17112: PPUSH
17113: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17117: LD_INT 20
17119: PPUSH
17120: LD_VAR 0 3
17124: PPUSH
17125: LD_INT 1
17127: PPUSH
17128: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17132: LD_INT 48
17134: PPUSH
17135: LD_VAR 0 3
17139: PPUSH
17140: LD_INT 1
17142: PPUSH
17143: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17147: LD_INT 49
17149: PPUSH
17150: LD_VAR 0 3
17154: PPUSH
17155: LD_INT 1
17157: PPUSH
17158: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17162: LD_INT 50
17164: PPUSH
17165: LD_VAR 0 3
17169: PPUSH
17170: LD_INT 1
17172: PPUSH
17173: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17177: LD_INT 69
17179: PPUSH
17180: LD_VAR 0 3
17184: PPUSH
17185: LD_INT 1
17187: PPUSH
17188: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17192: LD_INT 39
17194: PPUSH
17195: LD_VAR 0 3
17199: PPUSH
17200: LD_INT 1
17202: PPUSH
17203: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17207: LD_INT 34
17209: PPUSH
17210: LD_VAR 0 3
17214: PPUSH
17215: LD_INT 1
17217: PPUSH
17218: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17222: LD_INT 42
17224: PPUSH
17225: LD_VAR 0 3
17229: PPUSH
17230: LD_INT 1
17232: PPUSH
17233: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17237: LD_INT 44
17239: PPUSH
17240: LD_VAR 0 3
17244: PPUSH
17245: LD_INT 1
17247: PPUSH
17248: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17252: LD_INT 41
17254: PPUSH
17255: LD_VAR 0 3
17259: PPUSH
17260: LD_INT 1
17262: PPUSH
17263: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
17267: LD_INT 13
17269: PPUSH
17270: LD_VAR 0 3
17274: PPUSH
17275: LD_INT 1
17277: PPUSH
17278: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17282: LD_INT 40
17284: PPUSH
17285: LD_VAR 0 3
17289: PPUSH
17290: LD_INT 1
17292: PPUSH
17293: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17297: LD_INT 43
17299: PPUSH
17300: LD_VAR 0 3
17304: PPUSH
17305: LD_INT 1
17307: PPUSH
17308: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17312: LD_INT 70
17314: PPUSH
17315: LD_VAR 0 3
17319: PPUSH
17320: LD_INT 1
17322: PPUSH
17323: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
17327: LD_INT 23
17329: PPUSH
17330: LD_VAR 0 3
17334: PPUSH
17335: LD_INT 1
17337: PPUSH
17338: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17342: LD_INT 51
17344: PPUSH
17345: LD_VAR 0 3
17349: PPUSH
17350: LD_INT 1
17352: PPUSH
17353: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17357: LD_INT 52
17359: PPUSH
17360: LD_VAR 0 3
17364: PPUSH
17365: LD_INT 1
17367: PPUSH
17368: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17372: LD_INT 6
17374: PPUSH
17375: LD_VAR 0 3
17379: PPUSH
17380: LD_INT 1
17382: PPUSH
17383: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17387: LD_INT 15
17389: PPUSH
17390: LD_VAR 0 3
17394: PPUSH
17395: LD_INT 1
17397: PPUSH
17398: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17402: LD_INT 7
17404: PPUSH
17405: LD_VAR 0 3
17409: PPUSH
17410: LD_INT 1
17412: PPUSH
17413: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17417: LD_INT 12
17419: PPUSH
17420: LD_VAR 0 3
17424: PPUSH
17425: LD_INT 1
17427: PPUSH
17428: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
17432: LD_INT 10
17434: PPUSH
17435: LD_VAR 0 3
17439: PPUSH
17440: LD_INT 1
17442: PPUSH
17443: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17447: LD_INT 17
17449: PPUSH
17450: LD_VAR 0 3
17454: PPUSH
17455: LD_INT 1
17457: PPUSH
17458: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17462: LD_INT 18
17464: PPUSH
17465: LD_VAR 0 3
17469: PPUSH
17470: LD_INT 1
17472: PPUSH
17473: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17477: LD_INT 60
17479: PPUSH
17480: LD_VAR 0 3
17484: PPUSH
17485: LD_INT 1
17487: PPUSH
17488: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
17492: LD_INT 61
17494: PPUSH
17495: LD_VAR 0 3
17499: PPUSH
17500: LD_INT 1
17502: PPUSH
17503: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17507: LD_INT 32
17509: PPUSH
17510: LD_VAR 0 3
17514: PPUSH
17515: LD_INT 1
17517: PPUSH
17518: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
17522: LD_INT 27
17524: PPUSH
17525: LD_VAR 0 3
17529: PPUSH
17530: LD_INT 1
17532: PPUSH
17533: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
17537: LD_INT 36
17539: PPUSH
17540: LD_VAR 0 3
17544: PPUSH
17545: LD_INT 1
17547: PPUSH
17548: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
17552: LD_INT 33
17554: PPUSH
17555: LD_VAR 0 3
17559: PPUSH
17560: LD_INT 1
17562: PPUSH
17563: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17567: LD_INT 9
17569: PPUSH
17570: LD_VAR 0 3
17574: PPUSH
17575: LD_INT 1
17577: PPUSH
17578: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
17582: LD_INT 38
17584: PPUSH
17585: LD_VAR 0 3
17589: PPUSH
17590: LD_INT 1
17592: PPUSH
17593: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17597: LD_INT 57
17599: PPUSH
17600: LD_VAR 0 3
17604: PPUSH
17605: LD_INT 1
17607: PPUSH
17608: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
17612: LD_INT 58
17614: PPUSH
17615: LD_VAR 0 3
17619: PPUSH
17620: LD_INT 1
17622: PPUSH
17623: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
17627: LD_INT 28
17629: PPUSH
17630: LD_VAR 0 3
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
17642: LD_INT 29
17644: PPUSH
17645: LD_VAR 0 3
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17657: LD_INT 30
17659: PPUSH
17660: LD_VAR 0 3
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17672: LD_INT 37
17674: PPUSH
17675: LD_VAR 0 3
17679: PPUSH
17680: LD_INT 1
17682: PPUSH
17683: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17687: LD_INT 63
17689: PPUSH
17690: LD_VAR 0 3
17694: PPUSH
17695: LD_INT 1
17697: PPUSH
17698: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
17702: LD_INT 64
17704: PPUSH
17705: LD_VAR 0 3
17709: PPUSH
17710: LD_INT 1
17712: PPUSH
17713: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17717: LD_INT 3
17719: PPUSH
17720: LD_VAR 0 3
17724: PPUSH
17725: LD_INT 1
17727: PPUSH
17728: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17732: LD_INT 4
17734: PPUSH
17735: LD_VAR 0 3
17739: PPUSH
17740: LD_INT 1
17742: PPUSH
17743: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17747: LD_INT 5
17749: PPUSH
17750: LD_VAR 0 3
17754: PPUSH
17755: LD_INT 1
17757: PPUSH
17758: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
17762: LD_INT 8
17764: PPUSH
17765: LD_VAR 0 3
17769: PPUSH
17770: LD_INT 1
17772: PPUSH
17773: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17777: LD_INT 66
17779: PPUSH
17780: LD_VAR 0 3
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
17792: LD_INT 67
17794: PPUSH
17795: LD_VAR 0 3
17799: PPUSH
17800: LD_INT 1
17802: PPUSH
17803: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17807: LD_INT 21
17809: PPUSH
17810: LD_VAR 0 3
17814: PPUSH
17815: LD_INT 1
17817: PPUSH
17818: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17822: LD_INT 22
17824: PPUSH
17825: LD_VAR 0 3
17829: PPUSH
17830: LD_INT 1
17832: PPUSH
17833: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17837: LD_INT 19
17839: PPUSH
17840: LD_VAR 0 3
17844: PPUSH
17845: LD_INT 1
17847: PPUSH
17848: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
17852: LD_INT 26
17854: PPUSH
17855: LD_VAR 0 3
17859: PPUSH
17860: LD_INT 1
17862: PPUSH
17863: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17867: LD_INT 54
17869: PPUSH
17870: LD_VAR 0 3
17874: PPUSH
17875: LD_INT 1
17877: PPUSH
17878: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17882: LD_INT 55
17884: PPUSH
17885: LD_VAR 0 3
17889: PPUSH
17890: LD_INT 1
17892: PPUSH
17893: CALL_OW 322
// for i = 0 to 39 do
17897: LD_ADDR_VAR 0 4
17901: PUSH
17902: DOUBLE
17903: LD_INT 0
17905: DEC
17906: ST_TO_ADDR
17907: LD_INT 39
17909: PUSH
17910: FOR_TO
17911: IFFALSE 17932
// SetRestrict ( i , side , true ) ;
17913: LD_VAR 0 4
17917: PPUSH
17918: LD_VAR 0 3
17922: PPUSH
17923: LD_INT 1
17925: PPUSH
17926: CALL_OW 324
17930: GO 17910
17932: POP
17933: POP
// end ; else
17934: GO 18011
17936: POP
// begin for i = 1 to 73 do
17937: LD_ADDR_VAR 0 4
17941: PUSH
17942: DOUBLE
17943: LD_INT 1
17945: DEC
17946: ST_TO_ADDR
17947: LD_INT 73
17949: PUSH
17950: FOR_TO
17951: IFFALSE 17972
// SetTech ( i , side , state_enabled ) ;
17953: LD_VAR 0 4
17957: PPUSH
17958: LD_VAR 0 3
17962: PPUSH
17963: LD_INT 1
17965: PPUSH
17966: CALL_OW 322
17970: GO 17950
17972: POP
17973: POP
// for i = 0 to 39 do
17974: LD_ADDR_VAR 0 4
17978: PUSH
17979: DOUBLE
17980: LD_INT 0
17982: DEC
17983: ST_TO_ADDR
17984: LD_INT 39
17986: PUSH
17987: FOR_TO
17988: IFFALSE 18009
// SetRestrict ( i , side , true ) ;
17990: LD_VAR 0 4
17994: PPUSH
17995: LD_VAR 0 3
17999: PPUSH
18000: LD_INT 1
18002: PPUSH
18003: CALL_OW 324
18007: GO 17987
18009: POP
18010: POP
// end ; end ; end ;
18011: GO 14016
18013: POP
18014: POP
// end ;
18015: LD_VAR 0 2
18019: RET
