// export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export Position_Sides ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 39
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 18
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 15
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 19
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 17
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 16
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 39
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 18
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 15
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 19
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 17
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 16
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; for i := 1 to 8 do
 386: LD_ADDR_VAR 0 2
 390: PUSH
 391: DOUBLE
 392: LD_INT 1
 394: DEC
 395: ST_TO_ADDR
 396: LD_INT 8
 398: PUSH
 399: FOR_TO
 400: IFFALSE 487
// if Multiplayer_GetPlayerIsSpec ( i ) then
 402: LD_VAR 0 2
 406: PPUSH
 407: CALL_OW 530
 411: IFFALSE 485
// begin Side_Positions := Replace ( Side_Positions , i , 0 ) ;
 413: LD_ADDR_EXP 18
 417: PUSH
 418: LD_EXP 18
 422: PPUSH
 423: LD_VAR 0 2
 427: PPUSH
 428: LD_INT 0
 430: PPUSH
 431: CALL_OW 1
 435: ST_TO_ADDR
// Teams := Replace ( Teams , Side_Teams [ i ] , Teams [ Side_Teams [ i ] ] diff i ) ;
 436: LD_ADDR_EXP 16
 440: PUSH
 441: LD_EXP 16
 445: PPUSH
 446: LD_EXP 15
 450: PUSH
 451: LD_VAR 0 2
 455: ARRAY
 456: PPUSH
 457: LD_EXP 16
 461: PUSH
 462: LD_EXP 15
 466: PUSH
 467: LD_VAR 0 2
 471: ARRAY
 472: ARRAY
 473: PUSH
 474: LD_VAR 0 2
 478: DIFF
 479: PPUSH
 480: CALL_OW 1
 484: ST_TO_ADDR
// end ;
 485: GO 399
 487: POP
 488: POP
// Position_Sides := [ 0 , 0 , 0 , 0 , 0 , 0 ] ;
 489: LD_ADDR_EXP 21
 493: PUSH
 494: LD_INT 0
 496: PUSH
 497: LD_INT 0
 499: PUSH
 500: LD_INT 0
 502: PUSH
 503: LD_INT 0
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: LD_INT 0
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: ST_TO_ADDR
// for i := 1 to 8 do
 520: LD_ADDR_VAR 0 2
 524: PUSH
 525: DOUBLE
 526: LD_INT 1
 528: DEC
 529: ST_TO_ADDR
 530: LD_INT 8
 532: PUSH
 533: FOR_TO
 534: IFFALSE 581
// if Side_Positions [ i ] then
 536: LD_EXP 18
 540: PUSH
 541: LD_VAR 0 2
 545: ARRAY
 546: IFFALSE 579
// Position_Sides := Replace ( Position_Sides , Side_Positions [ i ] , i ) ;
 548: LD_ADDR_EXP 21
 552: PUSH
 553: LD_EXP 21
 557: PPUSH
 558: LD_EXP 18
 562: PUSH
 563: LD_VAR 0 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 1
 578: ST_TO_ADDR
 579: GO 533
 581: POP
 582: POP
// Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 583: LD_ADDR_EXP 20
 587: PUSH
 588: LD_EXP 15
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: EMPTY
 597: LIST
 598: DIFF
 599: PUSH
 600: LD_INT 1
 602: GREATER
 603: ST_TO_ADDR
// if Multiplayer then
 604: LD_OWVAR 4
 608: IFFALSE 810
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 610: LD_ADDR_EXP 41
 614: PUSH
 615: LD_INT 0
 617: PPUSH
 618: CALL_OW 426
 622: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 623: LD_ADDR_EXP 42
 627: PUSH
 628: LD_INT 1
 630: PPUSH
 631: CALL_OW 426
 635: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 636: LD_ADDR_EXP 43
 640: PUSH
 641: LD_INT 2
 643: PPUSH
 644: CALL_OW 426
 648: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 649: LD_ADDR_EXP 44
 653: PUSH
 654: LD_INT 3
 656: PPUSH
 657: CALL_OW 426
 661: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 662: LD_ADDR_EXP 45
 666: PUSH
 667: LD_INT 4
 669: PPUSH
 670: CALL_OW 426
 674: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 675: LD_ADDR_EXP 46
 679: PUSH
 680: LD_INT 5
 682: PPUSH
 683: CALL_OW 426
 687: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 688: LD_ADDR_EXP 47
 692: PUSH
 693: LD_INT 1
 695: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 696: LD_ADDR_EXP 48
 700: PUSH
 701: LD_INT 10
 703: PPUSH
 704: CALL_OW 426
 708: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 709: LD_ADDR_EXP 49
 713: PUSH
 714: LD_INT 11
 716: PPUSH
 717: CALL_OW 426
 721: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 722: LD_ADDR_EXP 50
 726: PUSH
 727: LD_INT 12
 729: PPUSH
 730: CALL_OW 426
 734: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 735: LD_ADDR_EXP 51
 739: PUSH
 740: LD_INT 13
 742: PPUSH
 743: CALL_OW 426
 747: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 748: LD_ADDR_EXP 52
 752: PUSH
 753: LD_INT 14
 755: PPUSH
 756: CALL_OW 426
 760: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 761: LD_ADDR_EXP 53
 765: PUSH
 766: LD_INT 17
 768: PPUSH
 769: CALL_OW 426
 773: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 774: LD_ADDR_EXP 54
 778: PUSH
 779: LD_INT 20
 781: PPUSH
 782: CALL_OW 426
 786: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 787: LD_ADDR_VAR 0 3
 791: PUSH
 792: LD_INT 22
 794: PPUSH
 795: CALL_OW 426
 799: ST_TO_ADDR
// def_win_rules = 0 ;
 800: LD_ADDR_EXP 14
 804: PUSH
 805: LD_INT 0
 807: ST_TO_ADDR
// end else
 808: GO 942
// begin Randomize ;
 810: CALL_OW 10
// def_base_level := 2 ;
 814: LD_ADDR_EXP 41
 818: PUSH
 819: LD_INT 2
 821: ST_TO_ADDR
// def_amount_of_people := 0 ;
 822: LD_ADDR_EXP 42
 826: PUSH
 827: LD_INT 0
 829: ST_TO_ADDR
// def_skill_level := 1 ;
 830: LD_ADDR_EXP 43
 834: PUSH
 835: LD_INT 1
 837: ST_TO_ADDR
// def_starting_resources := 2 ;
 838: LD_ADDR_EXP 44
 842: PUSH
 843: LD_INT 2
 845: ST_TO_ADDR
// def_shipments_density := 1 ;
 846: LD_ADDR_EXP 45
 850: PUSH
 851: LD_INT 1
 853: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 854: LD_ADDR_EXP 46
 858: PUSH
 859: LD_INT 0
 861: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 862: LD_ADDR_EXP 47
 866: PUSH
 867: LD_INT 1
 869: ST_TO_ADDR
// def_shared_vision := 1 ;
 870: LD_ADDR_EXP 48
 874: PUSH
 875: LD_INT 1
 877: ST_TO_ADDR
// def_morale_flags := 1 ;
 878: LD_ADDR_EXP 49
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// def_siberite_detection := 1 ;
 886: LD_ADDR_EXP 50
 890: PUSH
 891: LD_INT 1
 893: ST_TO_ADDR
// def_people_respawning := 2 ;
 894: LD_ADDR_EXP 51
 898: PUSH
 899: LD_INT 2
 901: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 902: LD_ADDR_EXP 52
 906: PUSH
 907: LD_INT 3
 909: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 910: LD_ADDR_EXP 53
 914: PUSH
 915: LD_INT 0
 917: ST_TO_ADDR
// def_builduptime := 1 ;
 918: LD_ADDR_EXP 54
 922: PUSH
 923: LD_INT 1
 925: ST_TO_ADDR
// tech_level = 4 ;
 926: LD_ADDR_VAR 0 3
 930: PUSH
 931: LD_INT 4
 933: ST_TO_ADDR
// def_win_rules = 0 ;
 934: LD_ADDR_EXP 14
 938: PUSH
 939: LD_INT 0
 941: ST_TO_ADDR
// end ; if def_game_rules = 0 then
 942: LD_EXP 40
 946: PUSH
 947: LD_INT 0
 949: EQUAL
 950: IFFALSE 977
// begin if isSGUI then
 952: LD_OWVAR 83
 956: IFFALSE 964
// setMpTechs ( ) else
 958: CALL 13870 0 0
 962: GO 977
// begin SetMpTechLevel ( tech_level + 1 ) ;
 964: LD_VAR 0 3
 968: PUSH
 969: LD_INT 1
 971: PLUS
 972: PPUSH
 973: CALL 14017 0 1
// end ; end ; is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 977: LD_ADDR_EXP 1
 981: PUSH
 982: LD_INT 0
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 1
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: LD_EXP 41
1000: PUSH
1001: LD_INT 1
1003: PLUS
1004: ARRAY
1005: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
1006: LD_ADDR_EXP 2
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: LD_INT 0
1016: PUSH
1017: LD_INT 3
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: PUSH
1025: LD_EXP 41
1029: PUSH
1030: LD_INT 1
1032: PLUS
1033: ARRAY
1034: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
1035: LD_ADDR_EXP 3
1039: PUSH
1040: LD_INT 9
1042: PUSH
1043: LD_INT 12
1045: PUSH
1046: LD_INT 15
1048: PUSH
1049: LD_INT 24
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: PUSH
1058: LD_EXP 42
1062: PUSH
1063: LD_INT 1
1065: PLUS
1066: ARRAY
1067: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
1068: LD_ADDR_EXP 4
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 3
1078: PUSH
1079: LD_INT 4
1081: PUSH
1082: LD_INT 5
1084: PUSH
1085: EMPTY
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: PUSH
1091: LD_EXP 43
1095: PUSH
1096: LD_INT 1
1098: PLUS
1099: ARRAY
1100: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
1101: LD_ADDR_EXP 6
1105: PUSH
1106: LD_INT 0
1108: PUSH
1109: LD_INT 0
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 30
1122: PUSH
1123: LD_INT 0
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 50
1136: PUSH
1137: LD_INT 20
1139: PUSH
1140: LD_INT 0
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: LD_INT 80
1150: PUSH
1151: LD_INT 40
1153: PUSH
1154: LD_INT 20
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: ARRAY
1177: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
1178: LD_ADDR_EXP 5
1182: PUSH
1183: LD_INT 10
1185: PUSH
1186: EMPTY
1187: LIST
1188: PUSH
1189: LD_INT 7
1191: PUSH
1192: LD_INT 14
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 6
1201: PUSH
1202: LD_INT 12
1204: PUSH
1205: LD_INT 18
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: PUSH
1213: LD_INT 5
1215: PUSH
1216: LD_INT 10
1218: PUSH
1219: LD_INT 15
1221: PUSH
1222: LD_INT 20
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: PUSH
1231: EMPTY
1232: LIST
1233: LIST
1234: LIST
1235: LIST
1236: PUSH
1237: LD_EXP 44
1241: PUSH
1242: LD_INT 1
1244: PLUS
1245: ARRAY
1246: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 ] [ def_shipments_density + 1 ] ;
1247: LD_ADDR_EXP 7
1251: PUSH
1252: LD_INT 150
1254: PUSH
1255: LD_INT 125
1257: PUSH
1258: LD_INT 100
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: LD_EXP 45
1270: PUSH
1271: LD_INT 1
1273: PLUS
1274: ARRAY
1275: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1276: LD_ADDR_EXP 11
1280: PUSH
1281: LD_INT 0
1283: PUSH
1284: LD_INT 10500
1286: PUSH
1287: LD_INT 6300
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: PUSH
1295: LD_EXP 51
1299: PUSH
1300: LD_INT 1
1302: PLUS
1303: ARRAY
1304: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1305: LD_ADDR_EXP 12
1309: PUSH
1310: LD_INT 0
1312: PUSH
1313: LD_INT 31500
1315: PUSH
1316: LD_INT 10500
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: LIST
1323: PUSH
1324: LD_EXP 51
1328: PUSH
1329: LD_INT 1
1331: PLUS
1332: ARRAY
1333: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1334: LD_ADDR_EXP 9
1338: PUSH
1339: LD_INT 0
1341: PUSH
1342: LD_INT 1
1344: PUSH
1345: LD_INT 2
1347: PUSH
1348: LD_INT 3
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: PUSH
1357: LD_EXP 52
1361: PUSH
1362: LD_INT 1
1364: PLUS
1365: ARRAY
1366: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1367: LD_ADDR_EXP 8
1371: PUSH
1372: LD_INT 1
1374: NEG
1375: PUSH
1376: LD_INT 350
1378: PUSH
1379: LD_INT 700
1381: PUSH
1382: LD_INT 1400
1384: PUSH
1385: LD_INT 0
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: PUSH
1395: LD_EXP 49
1399: PUSH
1400: LD_INT 1
1402: PLUS
1403: ARRAY
1404: ST_TO_ADDR
// battle_flags_id = [ ] ;
1405: LD_ADDR_EXP 29
1409: PUSH
1410: EMPTY
1411: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1412: LD_ADDR_EXP 13
1416: PUSH
1417: LD_INT 0
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: LD_INT 63000
1425: PUSH
1426: LD_INT 126000
1428: PUSH
1429: LD_INT 189000
1431: PUSH
1432: LD_INT 252000
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: PUSH
1443: LD_EXP 53
1447: PUSH
1448: LD_INT 1
1450: PLUS
1451: ARRAY
1452: ST_TO_ADDR
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
1453: LD_ADDR_EXP 38
1457: PUSH
1458: LD_INT 9
1460: PUSH
1461: LD_INT 10
1463: PUSH
1464: LD_INT 11
1466: PUSH
1467: LD_INT 12
1469: PUSH
1470: LD_INT 13
1472: PUSH
1473: LD_INT 14
1475: PUSH
1476: LD_INT 15
1478: PUSH
1479: LD_INT 16
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: ST_TO_ADDR
// end ;
1492: LD_VAR 0 1
1496: RET
// function init_map ; var i , j ; begin
1497: LD_INT 0
1499: PPUSH
1500: PPUSH
1501: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1502: LD_ADDR_EXP 25
1506: PUSH
1507: LD_INT 17
1509: PUSH
1510: LD_INT 4
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: LD_INT 72
1519: PUSH
1520: LD_INT 5
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PUSH
1527: LD_INT 157
1529: PUSH
1530: LD_INT 22
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 205
1539: PUSH
1540: LD_INT 111
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 221
1549: PUSH
1550: LD_INT 195
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PUSH
1557: LD_INT 169
1559: PUSH
1560: LD_INT 196
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 93
1569: PUSH
1570: LD_INT 177
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 52
1579: PUSH
1580: LD_INT 92
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1597: LD_ADDR_EXP 26
1601: PUSH
1602: LD_INT 17
1604: PUSH
1605: LD_INT 4
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 16
1614: PUSH
1615: LD_INT 23
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: LD_INT 72
1628: PUSH
1629: LD_INT 5
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 88
1638: PUSH
1639: LD_INT 28
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 157
1652: PUSH
1653: LD_INT 22
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 133
1662: PUSH
1663: LD_INT 12
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: PUSH
1674: LD_INT 205
1676: PUSH
1677: LD_INT 111
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: PUSH
1684: LD_INT 200
1686: PUSH
1687: LD_INT 95
1689: PUSH
1690: EMPTY
1691: LIST
1692: LIST
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: LD_INT 221
1700: PUSH
1701: LD_INT 195
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: PUSH
1708: LD_INT 249
1710: PUSH
1711: LD_INT 190
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: PUSH
1722: LD_INT 169
1724: PUSH
1725: LD_INT 196
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: PUSH
1732: LD_INT 180
1734: PUSH
1735: LD_INT 197
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 93
1748: PUSH
1749: LD_INT 177
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 114
1758: PUSH
1759: LD_INT 194
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 52
1772: PUSH
1773: LD_INT 92
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 58
1782: PUSH
1783: LD_INT 107
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1804: LD_ADDR_EXP 27
1808: PUSH
1809: LD_INT 12
1811: PUSH
1812: LD_INT 12
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: LD_INT 99
1821: PUSH
1822: LD_INT 19
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PUSH
1829: LD_INT 139
1831: PUSH
1832: LD_INT 5
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: PUSH
1839: LD_INT 207
1841: PUSH
1842: LD_INT 100
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 244
1851: PUSH
1852: LD_INT 181
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 183
1861: PUSH
1862: LD_INT 196
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 117
1871: PUSH
1872: LD_INT 195
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: LD_INT 54
1881: PUSH
1882: LD_INT 104
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: PUSH
1889: EMPTY
1890: LIST
1891: LIST
1892: LIST
1893: LIST
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1899: LD_ADDR_EXP 28
1903: PUSH
1904: EMPTY
1905: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1906: LD_ADDR_EXP 22
1910: PUSH
1911: LD_INT 32
1913: PUSH
1914: LD_INT 24
1916: PUSH
1917: LD_INT 2
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 87
1927: PUSH
1928: LD_INT 18
1930: PUSH
1931: LD_INT 3
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 146
1941: PUSH
1942: LD_INT 28
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 188
1955: PUSH
1956: LD_INT 103
1958: PUSH
1959: LD_INT 4
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 224
1969: PUSH
1970: LD_INT 180
1972: PUSH
1973: LD_INT 5
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PUSH
1981: LD_INT 168
1983: PUSH
1984: LD_INT 180
1986: PUSH
1987: LD_INT 0
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: LIST
1994: PUSH
1995: LD_INT 105
1997: PUSH
1998: LD_INT 170
2000: PUSH
2001: LD_INT 0
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: PUSH
2009: LD_INT 71
2011: PUSH
2012: LD_INT 102
2014: PUSH
2015: LD_INT 1
2017: PUSH
2018: EMPTY
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: ST_TO_ADDR
// for i in depot_def do
2033: LD_ADDR_VAR 0 2
2037: PUSH
2038: LD_EXP 22
2042: PUSH
2043: FOR_IN
2044: IFFALSE 2120
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
2046: LD_ADDR_EXP 24
2050: PUSH
2051: LD_EXP 24
2055: PUSH
2056: LD_VAR 0 2
2060: PUSH
2061: LD_INT 1
2063: ARRAY
2064: PPUSH
2065: LD_VAR 0 2
2069: PUSH
2070: LD_INT 3
2072: ARRAY
2073: PPUSH
2074: LD_INT 4
2076: NEG
2077: PPUSH
2078: CALL_OW 272
2082: PUSH
2083: LD_VAR 0 2
2087: PUSH
2088: LD_INT 2
2090: ARRAY
2091: PPUSH
2092: LD_VAR 0 2
2096: PUSH
2097: LD_INT 3
2099: ARRAY
2100: PPUSH
2101: LD_INT 4
2103: NEG
2104: PPUSH
2105: CALL_OW 273
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: EMPTY
2115: LIST
2116: ADD
2117: ST_TO_ADDR
2118: GO 2043
2120: POP
2121: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
2122: LD_ADDR_EXP 23
2126: PUSH
2127: LD_INT 50
2129: PUSH
2130: LD_INT 40
2132: PUSH
2133: LD_INT 5
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: PUSH
2141: LD_INT 47
2143: PUSH
2144: LD_INT 17
2146: PUSH
2147: LD_INT 4
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 29
2157: PUSH
2158: LD_INT 39
2160: PUSH
2161: LD_INT 0
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: PUSH
2174: LD_INT 107
2176: PUSH
2177: LD_INT 27
2179: PUSH
2180: LD_INT 4
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: LIST
2187: PUSH
2188: LD_INT 67
2190: PUSH
2191: LD_INT 10
2193: PUSH
2194: LD_INT 1
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: PUSH
2202: LD_INT 91
2204: PUSH
2205: LD_INT 35
2207: PUSH
2208: LD_INT 0
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: LIST
2220: PUSH
2221: LD_INT 165
2223: PUSH
2224: LD_INT 44
2226: PUSH
2227: LD_INT 5
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 123
2237: PUSH
2238: LD_INT 16
2240: PUSH
2241: LD_INT 2
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 141
2251: PUSH
2252: LD_INT 39
2254: PUSH
2255: LD_INT 0
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: PUSH
2268: LD_INT 179
2270: PUSH
2271: LD_INT 85
2273: PUSH
2274: LD_INT 3
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: LIST
2281: PUSH
2282: LD_INT 172
2284: PUSH
2285: LD_INT 102
2287: PUSH
2288: LD_INT 1
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: LIST
2295: PUSH
2296: LD_INT 196
2298: PUSH
2299: LD_INT 118
2301: PUSH
2302: LD_INT 5
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: LIST
2314: PUSH
2315: LD_INT 210
2317: PUSH
2318: LD_INT 182
2320: PUSH
2321: LD_INT 1
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 226
2331: PUSH
2332: LD_INT 164
2334: PUSH
2335: LD_INT 3
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 209
2345: PUSH
2346: LD_INT 164
2348: PUSH
2349: LD_INT 2
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: LIST
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 156
2364: PUSH
2365: LD_INT 183
2367: PUSH
2368: LD_INT 1
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: LIST
2375: PUSH
2376: LD_INT 184
2378: PUSH
2379: LD_INT 184
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: LIST
2389: PUSH
2390: LD_INT 161
2392: PUSH
2393: LD_INT 166
2395: PUSH
2396: LD_INT 3
2398: PUSH
2399: EMPTY
2400: LIST
2401: LIST
2402: LIST
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 86
2411: PUSH
2412: LD_INT 156
2414: PUSH
2415: LD_INT 2
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 124
2425: PUSH
2426: LD_INT 180
2428: PUSH
2429: LD_INT 4
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 106
2439: PUSH
2440: LD_INT 155
2442: PUSH
2443: LD_INT 3
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: PUSH
2456: LD_INT 87
2458: PUSH
2459: LD_INT 102
2461: PUSH
2462: LD_INT 4
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: LIST
2469: PUSH
2470: LD_INT 63
2472: PUSH
2473: LD_INT 83
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: EMPTY
2480: LIST
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 79
2486: PUSH
2487: LD_INT 120
2489: PUSH
2490: LD_INT 0
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: LIST
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: LIST
2512: ST_TO_ADDR
// for i = 1 to Side_Positions do
2513: LD_ADDR_VAR 0 2
2517: PUSH
2518: DOUBLE
2519: LD_INT 1
2521: DEC
2522: ST_TO_ADDR
2523: LD_EXP 18
2527: PUSH
2528: FOR_TO
2529: IFFALSE 2659
// begin if not Side_Positions [ i ] then
2531: LD_EXP 18
2535: PUSH
2536: LD_VAR 0 2
2540: ARRAY
2541: NOT
2542: IFFALSE 2546
// continue ;
2544: GO 2528
// if def_extra_oil_deposits then
2546: LD_EXP 46
2550: IFFALSE 2608
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2552: LD_ADDR_VAR 0 3
2556: PUSH
2557: LD_EXP 26
2561: PUSH
2562: LD_EXP 18
2566: PUSH
2567: LD_VAR 0 2
2571: ARRAY
2572: ARRAY
2573: PUSH
2574: FOR_IN
2575: IFFALSE 2604
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2577: LD_VAR 0 3
2581: PUSH
2582: LD_INT 1
2584: ARRAY
2585: PPUSH
2586: LD_VAR 0 3
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: CALL_OW 62
2602: GO 2574
2604: POP
2605: POP
2606: GO 2657
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2608: LD_EXP 25
2612: PUSH
2613: LD_EXP 18
2617: PUSH
2618: LD_VAR 0 2
2622: ARRAY
2623: ARRAY
2624: PUSH
2625: LD_INT 1
2627: ARRAY
2628: PPUSH
2629: LD_EXP 25
2633: PUSH
2634: LD_EXP 18
2638: PUSH
2639: LD_VAR 0 2
2643: ARRAY
2644: ARRAY
2645: PUSH
2646: LD_INT 2
2648: ARRAY
2649: PPUSH
2650: LD_INT 2
2652: PPUSH
2653: CALL_OW 62
// end ;
2657: GO 2528
2659: POP
2660: POP
// if def_extra_sib_deposits then
2661: LD_EXP 47
2665: IFFALSE 2819
// for i = 1 to Side_Positions do
2667: LD_ADDR_VAR 0 2
2671: PUSH
2672: DOUBLE
2673: LD_INT 1
2675: DEC
2676: ST_TO_ADDR
2677: LD_EXP 18
2681: PUSH
2682: FOR_TO
2683: IFFALSE 2817
// begin if not Side_Positions [ i ] then
2685: LD_EXP 18
2689: PUSH
2690: LD_VAR 0 2
2694: ARRAY
2695: NOT
2696: IFFALSE 2700
// continue ;
2698: GO 2682
// if def_extra_sib_deposits = 2 then
2700: LD_EXP 47
2704: PUSH
2705: LD_INT 2
2707: EQUAL
2708: IFFALSE 2766
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2710: LD_ADDR_VAR 0 3
2714: PUSH
2715: LD_EXP 28
2719: PUSH
2720: LD_EXP 18
2724: PUSH
2725: LD_VAR 0 2
2729: ARRAY
2730: ARRAY
2731: PUSH
2732: FOR_IN
2733: IFFALSE 2762
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2735: LD_VAR 0 3
2739: PUSH
2740: LD_INT 1
2742: ARRAY
2743: PPUSH
2744: LD_VAR 0 3
2748: PUSH
2749: LD_INT 2
2751: ARRAY
2752: PPUSH
2753: LD_INT 3
2755: PPUSH
2756: CALL_OW 62
2760: GO 2732
2762: POP
2763: POP
2764: GO 2815
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2766: LD_EXP 27
2770: PUSH
2771: LD_EXP 18
2775: PUSH
2776: LD_VAR 0 2
2780: ARRAY
2781: ARRAY
2782: PUSH
2783: LD_INT 1
2785: ARRAY
2786: PPUSH
2787: LD_EXP 27
2791: PUSH
2792: LD_EXP 18
2796: PUSH
2797: LD_VAR 0 2
2801: ARRAY
2802: ARRAY
2803: PUSH
2804: LD_INT 2
2806: ARRAY
2807: PPUSH
2808: LD_INT 3
2810: PPUSH
2811: CALL_OW 62
// end ;
2815: GO 2682
2817: POP
2818: POP
// end ;
2819: LD_VAR 0 1
2823: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2824: LD_INT 0
2826: PPUSH
2827: PPUSH
2828: PPUSH
// if not Team_Game then
2829: LD_EXP 20
2833: NOT
2834: IFFALSE 2932
// begin for i = 1 to 8 do
2836: LD_ADDR_VAR 0 2
2840: PUSH
2841: DOUBLE
2842: LD_INT 1
2844: DEC
2845: ST_TO_ADDR
2846: LD_INT 8
2848: PUSH
2849: FOR_TO
2850: IFFALSE 2928
// for j = 1 to 8 do
2852: LD_ADDR_VAR 0 3
2856: PUSH
2857: DOUBLE
2858: LD_INT 1
2860: DEC
2861: ST_TO_ADDR
2862: LD_INT 8
2864: PUSH
2865: FOR_TO
2866: IFFALSE 2924
// if i <> j then
2868: LD_VAR 0 2
2872: PUSH
2873: LD_VAR 0 3
2877: NONEQUAL
2878: IFFALSE 2902
// SetAttitude ( i , j , att_neutral , true ) else
2880: LD_VAR 0 2
2884: PPUSH
2885: LD_VAR 0 3
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: LD_INT 1
2895: PPUSH
2896: CALL_OW 80
2900: GO 2922
// SetAttitude ( i , j , att_friend , true ) ;
2902: LD_VAR 0 2
2906: PPUSH
2907: LD_VAR 0 3
2911: PPUSH
2912: LD_INT 1
2914: PPUSH
2915: LD_INT 1
2917: PPUSH
2918: CALL_OW 80
2922: GO 2865
2924: POP
2925: POP
2926: GO 2849
2928: POP
2929: POP
// end else
2930: GO 3107
// begin if def_shared_vision then
2932: LD_EXP 48
2936: IFFALSE 3001
// begin for i in Teams do
2938: LD_ADDR_VAR 0 2
2942: PUSH
2943: LD_EXP 16
2947: PUSH
2948: FOR_IN
2949: IFFALSE 2999
// for j = 2 to i do
2951: LD_ADDR_VAR 0 3
2955: PUSH
2956: DOUBLE
2957: LD_INT 2
2959: DEC
2960: ST_TO_ADDR
2961: LD_VAR 0 2
2965: PUSH
2966: FOR_TO
2967: IFFALSE 2995
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2969: LD_VAR 0 2
2973: PUSH
2974: LD_VAR 0 3
2978: ARRAY
2979: PPUSH
2980: LD_VAR 0 2
2984: PUSH
2985: LD_INT 1
2987: ARRAY
2988: PPUSH
2989: CALL_OW 343
2993: GO 2966
2995: POP
2996: POP
2997: GO 2948
2999: POP
3000: POP
// end ; for i = 1 to 8 do
3001: LD_ADDR_VAR 0 2
3005: PUSH
3006: DOUBLE
3007: LD_INT 1
3009: DEC
3010: ST_TO_ADDR
3011: LD_INT 8
3013: PUSH
3014: FOR_TO
3015: IFFALSE 3105
// for j = 1 to 8 do
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: DOUBLE
3023: LD_INT 1
3025: DEC
3026: ST_TO_ADDR
3027: LD_INT 8
3029: PUSH
3030: FOR_TO
3031: IFFALSE 3101
// if Side_Teams [ i ] = Side_Teams [ j ] then
3033: LD_EXP 15
3037: PUSH
3038: LD_VAR 0 2
3042: ARRAY
3043: PUSH
3044: LD_EXP 15
3048: PUSH
3049: LD_VAR 0 3
3053: ARRAY
3054: EQUAL
3055: IFFALSE 3079
// SetAttitude ( i , j , att_friend , true ) else
3057: LD_VAR 0 2
3061: PPUSH
3062: LD_VAR 0 3
3066: PPUSH
3067: LD_INT 1
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 80
3077: GO 3099
// SetAttitude ( i , j , att_enemy , true ) ;
3079: LD_VAR 0 2
3083: PPUSH
3084: LD_VAR 0 3
3088: PPUSH
3089: LD_INT 2
3091: PPUSH
3092: LD_INT 1
3094: PPUSH
3095: CALL_OW 80
3099: GO 3030
3101: POP
3102: POP
3103: GO 3014
3105: POP
3106: POP
// end ; end ;
3107: LD_VAR 0 1
3111: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
3112: LD_INT 0
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
// result := [ ] ;
3118: LD_ADDR_VAR 0 7
3122: PUSH
3123: EMPTY
3124: ST_TO_ADDR
// for i := 1 to count do
3125: LD_ADDR_VAR 0 8
3129: PUSH
3130: DOUBLE
3131: LD_INT 1
3133: DEC
3134: ST_TO_ADDR
3135: LD_VAR 0 1
3139: PUSH
3140: FOR_TO
3141: IFFALSE 3559
// begin uc_direction := Rand ( 0 , 5 ) ;
3143: LD_ADDR_OWVAR 24
3147: PUSH
3148: LD_INT 0
3150: PPUSH
3151: LD_INT 5
3153: PPUSH
3154: CALL_OW 12
3158: ST_TO_ADDR
// if commander then
3159: LD_LOC 1
3163: IFFALSE 3272
// begin hc_name := mp_sides_players_names [ uc_side ] ;
3165: LD_ADDR_OWVAR 26
3169: PUSH
3170: LD_OWVAR 19
3174: PUSH
3175: LD_OWVAR 20
3179: ARRAY
3180: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
3181: LD_INT 1
3183: PPUSH
3184: LD_INT 2
3186: PPUSH
3187: CALL_OW 12
3191: PPUSH
3192: LD_VAR 0 2
3196: PPUSH
3197: LD_EXP 4
3201: PUSH
3202: LD_INT 2
3204: PLUS
3205: PPUSH
3206: CALL_OW 380
// hc_importance := 105 ;
3210: LD_ADDR_OWVAR 32
3214: PUSH
3215: LD_INT 105
3217: ST_TO_ADDR
// commander := false ;
3218: LD_ADDR_LOC 1
3222: PUSH
3223: LD_INT 0
3225: ST_TO_ADDR
// if Multiplayer then
3226: LD_OWVAR 4
3230: IFFALSE 3270
// begin hc_gallery := MULTIAVATARS ;
3232: LD_ADDR_OWVAR 33
3236: PUSH
3237: LD_STRING MULTIAVATARS
3239: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
3240: LD_ADDR_OWVAR 34
3244: PUSH
3245: LD_OWVAR 20
3249: PPUSH
3250: CALL_OW 525
3254: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3255: LD_ADDR_OWVAR 27
3259: PUSH
3260: LD_OWVAR 20
3264: PPUSH
3265: CALL_OW 526
3269: ST_TO_ADDR
// end ; end else
3270: GO 3335
// begin hc_name :=  ;
3272: LD_ADDR_OWVAR 26
3276: PUSH
3277: LD_STRING 
3279: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3280: LD_INT 1
3282: PPUSH
3283: LD_INT 2
3285: PPUSH
3286: CALL_OW 12
3290: PPUSH
3291: LD_VAR 0 2
3295: PPUSH
3296: LD_EXP 4
3300: PPUSH
3301: CALL_OW 380
// hc_importance := 0 ;
3305: LD_ADDR_OWVAR 32
3309: PUSH
3310: LD_INT 0
3312: ST_TO_ADDR
// if Multiplayer then
3313: LD_OWVAR 4
3317: IFFALSE 3335
// begin hc_gallery :=  ;
3319: LD_ADDR_OWVAR 33
3323: PUSH
3324: LD_STRING 
3326: ST_TO_ADDR
// hc_face_number := 0 ;
3327: LD_ADDR_OWVAR 34
3331: PUSH
3332: LD_INT 0
3334: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3335: LD_ADDR_VAR 0 10
3339: PUSH
3340: CALL_OW 44
3344: ST_TO_ADDR
// if global_defined then
3345: LD_LOC 3
3349: IFFALSE 3489
// begin if ( cl = class_soldier ) then
3351: LD_VAR 0 2
3355: PUSH
3356: LD_INT 1
3358: EQUAL
3359: IFFALSE 3379
// j := i + soldiers_created else
3361: LD_ADDR_VAR 0 9
3365: PUSH
3366: LD_VAR 0 8
3370: PUSH
3371: LD_LOC 4
3375: PLUS
3376: ST_TO_ADDR
3377: GO 3389
// j := i ;
3379: LD_ADDR_VAR 0 9
3383: PUSH
3384: LD_VAR 0 8
3388: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3389: LD_LOC 2
3393: PUSH
3394: LD_VAR 0 2
3398: ARRAY
3399: PUSH
3400: LD_VAR 0 9
3404: ARRAY
3405: PPUSH
3406: LD_VAR 0 10
3410: PPUSH
3411: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3415: LD_VAR 0 10
3419: PPUSH
3420: LD_INT 2
3422: PPUSH
3423: LD_LOC 2
3427: PUSH
3428: LD_VAR 0 2
3432: ARRAY
3433: PUSH
3434: LD_VAR 0 9
3438: ARRAY
3439: PPUSH
3440: LD_INT 2
3442: PPUSH
3443: CALL_OW 260
3447: PPUSH
3448: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3452: LD_VAR 0 10
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_LOC 2
3464: PUSH
3465: LD_VAR 0 2
3469: ARRAY
3470: PUSH
3471: LD_VAR 0 9
3475: ARRAY
3476: PPUSH
3477: LD_INT 1
3479: PPUSH
3480: CALL_OW 260
3484: PPUSH
3485: CALL_OW 239
// end ; if building then
3489: LD_VAR 0 6
3493: IFFALSE 3511
// PlaceHumanInUnit ( un , building ) else
3495: LD_VAR 0 10
3499: PPUSH
3500: LD_VAR 0 6
3504: PPUSH
3505: CALL_OW 52
3509: GO 3538
// PlaceUnitXYR ( un , x , y , r , false ) ;
3511: LD_VAR 0 10
3515: PPUSH
3516: LD_VAR 0 3
3520: PPUSH
3521: LD_VAR 0 4
3525: PPUSH
3526: LD_VAR 0 5
3530: PPUSH
3531: LD_INT 0
3533: PPUSH
3534: CALL_OW 50
// result := result ^ [ un ] ;
3538: LD_ADDR_VAR 0 7
3542: PUSH
3543: LD_VAR 0 7
3547: PUSH
3548: LD_VAR 0 10
3552: PUSH
3553: EMPTY
3554: LIST
3555: ADD
3556: ST_TO_ADDR
// end ;
3557: GO 3140
3559: POP
3560: POP
// if not global_defined then
3561: LD_LOC 3
3565: NOT
3566: IFFALSE 3644
// if ( global_units >= cl ) then
3568: LD_LOC 2
3572: PUSH
3573: LD_VAR 0 2
3577: GREATEREQUAL
3578: IFFALSE 3619
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3580: LD_ADDR_LOC 2
3584: PUSH
3585: LD_LOC 2
3589: PPUSH
3590: LD_VAR 0 2
3594: PPUSH
3595: LD_LOC 2
3599: PUSH
3600: LD_VAR 0 2
3604: ARRAY
3605: PUSH
3606: LD_VAR 0 7
3610: ADD
3611: PPUSH
3612: CALL_OW 1
3616: ST_TO_ADDR
3617: GO 3644
// global_units := Replace ( global_units , cl , result ) ;
3619: LD_ADDR_LOC 2
3623: PUSH
3624: LD_LOC 2
3628: PPUSH
3629: LD_VAR 0 2
3633: PPUSH
3634: LD_VAR 0 7
3638: PPUSH
3639: CALL_OW 1
3643: ST_TO_ADDR
// if commander then
3644: LD_LOC 1
3648: IFFALSE 3695
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3650: LD_ADDR_EXP 30
3654: PUSH
3655: LD_EXP 30
3659: PPUSH
3660: LD_OWVAR 20
3664: PPUSH
3665: LD_EXP 30
3669: PUSH
3670: LD_OWVAR 20
3674: ARRAY
3675: PUSH
3676: LD_VAR 0 10
3680: ADD
3681: PPUSH
3682: CALL_OW 1
3686: ST_TO_ADDR
// commander := false ;
3687: LD_ADDR_LOC 1
3691: PUSH
3692: LD_INT 0
3694: ST_TO_ADDR
// end ; end ;
3695: LD_VAR 0 7
3699: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3700: LD_INT 0
3702: PPUSH
3703: PPUSH
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
// if side in [ 0 , 9 ] then
3711: LD_VAR 0 1
3715: PUSH
3716: LD_INT 0
3718: PUSH
3719: LD_INT 9
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: IN
3726: IFFALSE 3730
// exit ;
3728: GO 4780
// pos := Side_Positions [ side ] ;
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: LD_EXP 18
3739: PUSH
3740: LD_VAR 0 1
3744: ARRAY
3745: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3746: LD_ADDR_OWVAR 21
3750: PUSH
3751: LD_EXP 19
3755: PUSH
3756: LD_VAR 0 1
3760: ARRAY
3761: ST_TO_ADDR
// uc_side := side ;
3762: LD_ADDR_OWVAR 20
3766: PUSH
3767: LD_VAR 0 1
3771: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3772: LD_ADDR_VAR 0 4
3776: PUSH
3777: LD_EXP 22
3781: PUSH
3782: LD_VAR 0 3
3786: ARRAY
3787: PUSH
3788: LD_INT 1
3790: ARRAY
3791: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3792: LD_ADDR_VAR 0 5
3796: PUSH
3797: LD_EXP 22
3801: PUSH
3802: LD_VAR 0 3
3806: ARRAY
3807: PUSH
3808: LD_INT 2
3810: ARRAY
3811: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3812: LD_ADDR_VAR 0 6
3816: PUSH
3817: LD_EXP 22
3821: PUSH
3822: LD_VAR 0 3
3826: ARRAY
3827: PUSH
3828: LD_INT 3
3830: ARRAY
3831: ST_TO_ADDR
// if is_depot then
3832: LD_EXP 1
3836: IFFALSE 3969
// begin bc_type = b_depot ;
3838: LD_ADDR_OWVAR 42
3842: PUSH
3843: LD_INT 0
3845: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3846: LD_ADDR_VAR 0 10
3850: PUSH
3851: LD_VAR 0 4
3855: PPUSH
3856: LD_VAR 0 5
3860: PPUSH
3861: LD_VAR 0 6
3865: PPUSH
3866: CALL_OW 47
3870: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3871: LD_VAR 0 10
3875: PPUSH
3876: LD_STRING @
3878: PUSH
3879: LD_VAR 0 1
3883: STR
3884: PPUSH
3885: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3889: LD_VAR 0 10
3893: PPUSH
3894: CALL_OW 274
3898: PPUSH
3899: LD_INT 1
3901: PPUSH
3902: LD_EXP 6
3906: PUSH
3907: LD_INT 1
3909: ARRAY
3910: PPUSH
3911: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3915: LD_VAR 0 10
3919: PPUSH
3920: CALL_OW 274
3924: PPUSH
3925: LD_INT 2
3927: PPUSH
3928: LD_EXP 6
3932: PUSH
3933: LD_INT 2
3935: ARRAY
3936: PPUSH
3937: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3941: LD_VAR 0 10
3945: PPUSH
3946: CALL_OW 274
3950: PPUSH
3951: LD_INT 3
3953: PPUSH
3954: LD_EXP 6
3958: PUSH
3959: LD_INT 3
3961: ARRAY
3962: PPUSH
3963: CALL_OW 277
// end else
3967: GO 4113
// begin for i := 1 to 3 do
3969: LD_ADDR_VAR 0 7
3973: PUSH
3974: DOUBLE
3975: LD_INT 1
3977: DEC
3978: ST_TO_ADDR
3979: LD_INT 3
3981: PUSH
3982: FOR_TO
3983: IFFALSE 4111
// begin r := starting_resources [ i ] ;
3985: LD_ADDR_VAR 0 8
3989: PUSH
3990: LD_EXP 6
3994: PUSH
3995: LD_VAR 0 7
3999: ARRAY
4000: ST_TO_ADDR
// while r >= 10 do
4001: LD_VAR 0 8
4005: PUSH
4006: LD_INT 10
4008: GREATEREQUAL
4009: IFFALSE 4109
// if r > 50 then
4011: LD_VAR 0 8
4015: PUSH
4016: LD_INT 50
4018: GREATER
4019: IFFALSE 4065
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
4021: LD_VAR 0 7
4025: PPUSH
4026: LD_INT 5
4028: PPUSH
4029: LD_VAR 0 4
4033: PPUSH
4034: LD_VAR 0 5
4038: PPUSH
4039: LD_INT 4
4041: PPUSH
4042: LD_INT 0
4044: PPUSH
4045: CALL_OW 60
// r := r - 50 ;
4049: LD_ADDR_VAR 0 8
4053: PUSH
4054: LD_VAR 0 8
4058: PUSH
4059: LD_INT 50
4061: MINUS
4062: ST_TO_ADDR
// end else
4063: GO 4107
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
4065: LD_VAR 0 7
4069: PPUSH
4070: LD_VAR 0 8
4074: PUSH
4075: LD_INT 10
4077: DIV
4078: PPUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_VAR 0 5
4088: PPUSH
4089: LD_INT 4
4091: PPUSH
4092: LD_INT 0
4094: PPUSH
4095: CALL_OW 60
// r := 0 ;
4099: LD_ADDR_VAR 0 8
4103: PUSH
4104: LD_INT 0
4106: ST_TO_ADDR
// end ;
4107: GO 4001
// end ;
4109: GO 3982
4111: POP
4112: POP
// end ; for r in starting_crates do
4113: LD_ADDR_VAR 0 8
4117: PUSH
4118: LD_EXP 5
4122: PUSH
4123: FOR_IN
4124: IFFALSE 4156
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
4126: LD_INT 1
4128: PPUSH
4129: LD_INT 5
4131: PPUSH
4132: LD_VAR 0 4
4136: PPUSH
4137: LD_VAR 0 5
4141: PPUSH
4142: LD_VAR 0 8
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: CALL_OW 60
4154: GO 4123
4156: POP
4157: POP
// if def_morale_flags then
4158: LD_EXP 49
4162: IFFALSE 4301
// begin x := start_def [ pos ] [ 1 ] ;
4164: LD_ADDR_VAR 0 4
4168: PUSH
4169: LD_EXP 24
4173: PUSH
4174: LD_VAR 0 3
4178: ARRAY
4179: PUSH
4180: LD_INT 1
4182: ARRAY
4183: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4184: LD_ADDR_VAR 0 5
4188: PUSH
4189: LD_EXP 24
4193: PUSH
4194: LD_VAR 0 3
4198: ARRAY
4199: PUSH
4200: LD_INT 2
4202: ARRAY
4203: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4204: LD_VAR 0 4
4208: PPUSH
4209: LD_VAR 0 5
4213: PPUSH
4214: LD_INT 12
4216: PPUSH
4217: LD_INT 2
4219: PPUSH
4220: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
4224: LD_ADDR_EXP 29
4228: PUSH
4229: LD_EXP 29
4233: PUSH
4234: LD_VAR 0 1
4238: PPUSH
4239: LD_VAR 0 4
4243: PPUSH
4244: LD_VAR 0 5
4248: PPUSH
4249: LD_INT 1
4251: PUSH
4252: LD_INT 100
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: LD_INT 2
4261: PUSH
4262: LD_INT 50
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: LD_INT 3
4271: PUSH
4272: LD_INT 20
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PUSH
4279: LD_INT 20
4281: PUSH
4282: LD_INT 100
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: PUSH
4289: EMPTY
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: PPUSH
4295: CALL_OW 418
4299: ADD
4300: ST_TO_ADDR
// end ; commander := true ;
4301: LD_ADDR_LOC 1
4305: PUSH
4306: LD_INT 1
4308: ST_TO_ADDR
// soldiers_created := 0 ;
4309: LD_ADDR_LOC 4
4313: PUSH
4314: LD_INT 0
4316: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4317: LD_ADDR_VAR 0 7
4321: PUSH
4322: DOUBLE
4323: LD_INT 1
4325: DEC
4326: ST_TO_ADDR
4327: LD_EXP 2
4331: PUSH
4332: FOR_TO
4333: IFFALSE 4486
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4335: LD_ADDR_VAR 0 4
4339: PUSH
4340: LD_EXP 23
4344: PUSH
4345: LD_VAR 0 3
4349: ARRAY
4350: PUSH
4351: LD_VAR 0 7
4355: ARRAY
4356: PUSH
4357: LD_INT 1
4359: ARRAY
4360: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4361: LD_ADDR_VAR 0 5
4365: PUSH
4366: LD_EXP 23
4370: PUSH
4371: LD_VAR 0 3
4375: ARRAY
4376: PUSH
4377: LD_VAR 0 7
4381: ARRAY
4382: PUSH
4383: LD_INT 2
4385: ARRAY
4386: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4387: LD_ADDR_VAR 0 6
4391: PUSH
4392: LD_EXP 23
4396: PUSH
4397: LD_VAR 0 3
4401: ARRAY
4402: PUSH
4403: LD_VAR 0 7
4407: ARRAY
4408: PUSH
4409: LD_INT 3
4411: ARRAY
4412: ST_TO_ADDR
// bc_type := b_breastwork ;
4413: LD_ADDR_OWVAR 42
4417: PUSH
4418: LD_INT 31
4420: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4421: LD_ADDR_VAR 0 9
4425: PUSH
4426: LD_VAR 0 4
4430: PPUSH
4431: LD_VAR 0 5
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL_OW 47
4445: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4446: LD_INT 1
4448: PPUSH
4449: LD_INT 1
4451: PPUSH
4452: LD_INT 0
4454: PPUSH
4455: LD_INT 0
4457: PPUSH
4458: LD_INT 0
4460: PPUSH
4461: LD_VAR 0 9
4465: PPUSH
4466: CALL 3112 0 6
// soldiers_created := soldiers_created + 1 ;
4470: LD_ADDR_LOC 4
4474: PUSH
4475: LD_LOC 4
4479: PUSH
4480: LD_INT 1
4482: PLUS
4483: ST_TO_ADDR
// end ;
4484: GO 4332
4486: POP
4487: POP
// x := start_def [ pos ] [ 1 ] ;
4488: LD_ADDR_VAR 0 4
4492: PUSH
4493: LD_EXP 24
4497: PUSH
4498: LD_VAR 0 3
4502: ARRAY
4503: PUSH
4504: LD_INT 1
4506: ARRAY
4507: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4508: LD_ADDR_VAR 0 5
4512: PUSH
4513: LD_EXP 24
4517: PUSH
4518: LD_VAR 0 3
4522: ARRAY
4523: PUSH
4524: LD_INT 2
4526: ARRAY
4527: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4528: LD_LOC 8
4532: PUSH
4533: LD_EXP 2
4537: MINUS
4538: PPUSH
4539: LD_INT 1
4541: PPUSH
4542: LD_VAR 0 4
4546: PPUSH
4547: LD_VAR 0 5
4551: PPUSH
4552: LD_INT 5
4554: PPUSH
4555: LD_INT 0
4557: PPUSH
4558: CALL 3112 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4562: LD_LOC 5
4566: PPUSH
4567: LD_INT 2
4569: PPUSH
4570: LD_VAR 0 4
4574: PPUSH
4575: LD_VAR 0 5
4579: PPUSH
4580: LD_INT 5
4582: PPUSH
4583: LD_INT 0
4585: PPUSH
4586: CALL 3112 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4590: LD_LOC 7
4594: PPUSH
4595: LD_INT 3
4597: PPUSH
4598: LD_VAR 0 4
4602: PPUSH
4603: LD_VAR 0 5
4607: PPUSH
4608: LD_INT 5
4610: PPUSH
4611: LD_INT 0
4613: PPUSH
4614: CALL 3112 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4618: LD_LOC 6
4622: PPUSH
4623: LD_INT 4
4625: PPUSH
4626: LD_VAR 0 4
4630: PPUSH
4631: LD_VAR 0 5
4635: PPUSH
4636: LD_INT 5
4638: PPUSH
4639: LD_INT 0
4641: PPUSH
4642: CALL 3112 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4646: LD_EXP 50
4650: PUSH
4651: LD_INT 20
4653: PPUSH
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL_OW 321
4663: PUSH
4664: LD_INT 1
4666: EQUAL
4667: AND
4668: IFFALSE 4685
// SetTech ( tech_SibDet , side , state_researched ) ;
4670: LD_INT 20
4672: PPUSH
4673: LD_VAR 0 1
4677: PPUSH
4678: LD_INT 2
4680: PPUSH
4681: CALL_OW 322
// if def_siberite_bomb = 1 then
4685: LD_EXP 53
4689: PUSH
4690: LD_INT 1
4692: EQUAL
4693: IFFALSE 4727
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4695: LD_INT 25
4697: PPUSH
4698: LD_VAR 0 1
4702: PPUSH
4703: LD_INT 1
4705: PPUSH
4706: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4710: LD_INT 73
4712: PPUSH
4713: LD_VAR 0 1
4717: PPUSH
4718: LD_INT 1
4720: PPUSH
4721: CALL_OW 322
// end else
4725: GO 4757
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4727: LD_INT 25
4729: PPUSH
4730: LD_VAR 0 1
4734: PPUSH
4735: LD_INT 0
4737: PPUSH
4738: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4742: LD_INT 73
4744: PPUSH
4745: LD_VAR 0 1
4749: PPUSH
4750: LD_INT 0
4752: PPUSH
4753: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4757: LD_INT 24
4759: PPUSH
4760: LD_VAR 0 1
4764: PPUSH
4765: LD_INT 0
4767: PPUSH
4768: CALL_OW 322
// global_defined := true ;
4772: LD_ADDR_LOC 3
4776: PUSH
4777: LD_INT 1
4779: ST_TO_ADDR
// end ;
4780: LD_VAR 0 2
4784: RET
// function prepare_sides ; var i ; begin
4785: LD_INT 0
4787: PPUSH
4788: PPUSH
// global_units := [ ] ;
4789: LD_ADDR_LOC 2
4793: PUSH
4794: EMPTY
4795: ST_TO_ADDR
// global_defined := false ;
4796: LD_ADDR_LOC 3
4800: PUSH
4801: LD_INT 0
4803: ST_TO_ADDR
// CountClassMembers ;
4804: CALL 4854 0 0
// for i := 1 to 8 do
4808: LD_ADDR_VAR 0 2
4812: PUSH
4813: DOUBLE
4814: LD_INT 1
4816: DEC
4817: ST_TO_ADDR
4818: LD_INT 8
4820: PUSH
4821: FOR_TO
4822: IFFALSE 4847
// if Side_Positions [ i ] then
4824: LD_EXP 18
4828: PUSH
4829: LD_VAR 0 2
4833: ARRAY
4834: IFFALSE 4845
// prepare_side ( i ) ;
4836: LD_VAR 0 2
4840: PPUSH
4841: CALL 3700 0 1
4845: GO 4821
4847: POP
4848: POP
// end ;
4849: LD_VAR 0 1
4853: RET
// function CountClassMembers ; var Mode ; begin
4854: LD_INT 0
4856: PPUSH
4857: PPUSH
// if No_Mechs then
4858: LD_EXP 55
4862: IFFALSE 4874
// Mode := 2 else
4864: LD_ADDR_VAR 0 2
4868: PUSH
4869: LD_INT 2
4871: ST_TO_ADDR
4872: GO 4882
// Mode := 1 ;
4874: LD_ADDR_VAR 0 2
4878: PUSH
4879: LD_INT 1
4881: ST_TO_ADDR
// neng := number_of_people ;
4882: LD_ADDR_LOC 5
4886: PUSH
4887: LD_EXP 3
4891: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4892: LD_ADDR_LOC 8
4896: PUSH
4897: LD_LOC 5
4901: PUSH
4902: LD_INT 4
4904: PUSH
4905: LD_INT 3
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: LD_VAR 0 2
4916: ARRAY
4917: DIV
4918: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4919: LD_LOC 8
4923: PUSH
4924: LD_EXP 2
4928: LESS
4929: IFFALSE 4941
// nsol := number_of_breastworks ;
4931: LD_ADDR_LOC 8
4935: PUSH
4936: LD_EXP 2
4940: ST_TO_ADDR
// neng := neng - nsol ;
4941: LD_ADDR_LOC 5
4945: PUSH
4946: LD_LOC 5
4950: PUSH
4951: LD_LOC 8
4955: MINUS
4956: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4957: LD_ADDR_LOC 6
4961: PUSH
4962: LD_LOC 5
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: LD_INT 2
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_VAR 0 2
4981: ARRAY
4982: DIV
4983: ST_TO_ADDR
// if ( nsci < 1 ) then
4984: LD_LOC 6
4988: PUSH
4989: LD_INT 1
4991: LESS
4992: IFFALSE 5002
// nsci := 1 ;
4994: LD_ADDR_LOC 6
4998: PUSH
4999: LD_INT 1
5001: ST_TO_ADDR
// neng := neng - nsci ;
5002: LD_ADDR_LOC 5
5006: PUSH
5007: LD_LOC 5
5011: PUSH
5012: LD_LOC 6
5016: MINUS
5017: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
5018: LD_ADDR_LOC 7
5022: PUSH
5023: LD_LOC 5
5027: PUSH
5028: LD_INT 2
5030: DIV
5031: PUSH
5032: LD_INT 0
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_VAR 0 2
5043: ARRAY
5044: ST_TO_ADDR
// neng := neng - nmech ;
5045: LD_ADDR_LOC 5
5049: PUSH
5050: LD_LOC 5
5054: PUSH
5055: LD_LOC 7
5059: MINUS
5060: ST_TO_ADDR
// if ( neng < 1 ) then
5061: LD_LOC 5
5065: PUSH
5066: LD_INT 1
5068: LESS
5069: IFFALSE 5079
// neng := 1 ;
5071: LD_ADDR_LOC 5
5075: PUSH
5076: LD_INT 1
5078: ST_TO_ADDR
// end ;
5079: LD_VAR 0 1
5083: RET
// starting begin disable ( 98 ) ;
5084: LD_INT 98
5086: DISABLE_MARKED
// disable ( 99 ) ;
5087: LD_INT 99
5089: DISABLE_MARKED
// disable ( 100 ) ;
5090: LD_INT 100
5092: DISABLE_MARKED
// disable ( 400 ) ;
5093: LD_INT 400
5095: DISABLE_MARKED
// disable ( 401 ) ;
5096: LD_INT 401
5098: DISABLE_MARKED
// disable ( 600 ) ;
5099: LD_INT 600
5101: DISABLE_MARKED
// mp_selectmsg := true ;
5102: LD_ADDR_OWVAR 13
5106: PUSH
5107: LD_INT 1
5109: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
5110: CALL 68 0 0
// init_map ;
5114: CALL 1497 0 0
// init_respawning ;
5118: CALL 5826 0 0
// set_shared_visions_and_alliances ;
5122: CALL 2824 0 0
// ResetFog ;
5126: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
5130: LD_OWVAR 2
5134: PPUSH
5135: CALL_OW 520
// prepare_sides ;
5139: CALL 4785 0 0
// Init_Win_Condition ;
5143: CALL 12507 0 0
// InitLimits ;
5147: CALL 11167 0 0
// ShowTimer ;
5151: CALL 12104 0 0
// music_nat := Side_Nations [ your_side ] ;
5155: LD_ADDR_OWVAR 71
5159: PUSH
5160: LD_EXP 19
5164: PUSH
5165: LD_OWVAR 2
5169: ARRAY
5170: ST_TO_ADDR
// if IAmSpec then
5171: CALL_OW 531
5175: IFFALSE 5199
// begin fogoff ( true ) ;
5177: LD_INT 1
5179: PPUSH
5180: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
5184: LD_INT 130
5186: PPUSH
5187: LD_INT 100
5189: PPUSH
5190: CALL_OW 86
// enable ( 400 ) ;
5194: LD_INT 400
5196: ENABLE_MARKED
// end else
5197: GO 5245
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
5199: LD_EXP 24
5203: PUSH
5204: LD_EXP 18
5208: PUSH
5209: LD_OWVAR 2
5213: ARRAY
5214: ARRAY
5215: PUSH
5216: LD_INT 1
5218: ARRAY
5219: PPUSH
5220: LD_EXP 24
5224: PUSH
5225: LD_EXP 18
5229: PUSH
5230: LD_OWVAR 2
5234: ARRAY
5235: ARRAY
5236: PUSH
5237: LD_INT 2
5239: ARRAY
5240: PPUSH
5241: CALL_OW 86
// end ; InitApeman ;
5245: CALL 6611 0 0
// if def_builduptime then
5249: LD_EXP 54
5253: IFFALSE 5259
// BeginBuildUp ;
5255: CALL 8334 0 0
// end ;
5259: END
// every 0 0$1 do
5260: GO 5262
5262: DISABLE
// if ( def_siberite_bomb > 1 ) then
5263: LD_EXP 53
5267: PUSH
5268: LD_INT 1
5270: GREATER
5271: IFFALSE 5286
// begin wait ( siberite_bomb_Delay ) ;
5273: LD_EXP 13
5277: PPUSH
5278: CALL_OW 67
// EnableSibFiss ;
5282: CALL 5287 0 0
// end ;
5286: END
// function EnableSibFiss ; var i ; begin
5287: LD_INT 0
5289: PPUSH
5290: PPUSH
// for i := 1 to 8 do
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: DOUBLE
5297: LD_INT 1
5299: DEC
5300: ST_TO_ADDR
5301: LD_INT 8
5303: PUSH
5304: FOR_TO
5305: IFFALSE 5351
// if Side_Positions [ i ] then
5307: LD_EXP 18
5311: PUSH
5312: LD_VAR 0 2
5316: ARRAY
5317: IFFALSE 5349
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5319: LD_INT 25
5321: PPUSH
5322: LD_VAR 0 2
5326: PPUSH
5327: LD_INT 1
5329: PPUSH
5330: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5334: LD_INT 73
5336: PPUSH
5337: LD_VAR 0 2
5341: PPUSH
5342: LD_INT 1
5344: PPUSH
5345: CALL_OW 322
// end ;
5349: GO 5304
5351: POP
5352: POP
// end ; end_of_file
5353: LD_VAR 0 1
5357: RET
// every 1 1$0 + 0 0$0.3 do
5358: GO 5360
5360: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5361: LD_INT 4
5363: PPUSH
5364: LD_INT 5
5366: PPUSH
5367: CALL_OW 12
5371: PPUSH
5372: LD_INT 1
5374: PPUSH
5375: CALL_OW 57
// enable ;
5379: ENABLE
// end ;
5380: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5381: GO 5383
5383: DISABLE
5384: LD_INT 0
5386: PPUSH
5387: PPUSH
// begin case tick of 1 .. 1 1$0 :
5388: LD_OWVAR 1
5392: PUSH
5393: LD_INT 1
5395: DOUBLE
5396: GREATEREQUAL
5397: IFFALSE 5405
5399: LD_INT 2100
5401: DOUBLE
5402: LESSEQUAL
5403: IFTRUE 5407
5405: GO 5435
5407: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5408: LD_EXP 7
5412: PUSH
5413: LD_INT 100
5415: DIVREAL
5416: PUSH
5417: LD_INT 350
5419: PPUSH
5420: LD_INT 700
5422: PPUSH
5423: CALL_OW 12
5427: MUL
5428: PPUSH
5429: CALL_OW 67
5433: GO 5737
5435: LD_INT 2100
5437: PUSH
5438: LD_INT 1
5440: PLUS
5441: DOUBLE
5442: GREATEREQUAL
5443: IFFALSE 5451
5445: LD_INT 10500
5447: DOUBLE
5448: LESSEQUAL
5449: IFTRUE 5453
5451: GO 5481
5453: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5454: LD_EXP 7
5458: PUSH
5459: LD_INT 100
5461: DIVREAL
5462: PUSH
5463: LD_INT 700
5465: PPUSH
5466: LD_INT 1225
5468: PPUSH
5469: CALL_OW 12
5473: MUL
5474: PPUSH
5475: CALL_OW 67
5479: GO 5737
5481: LD_INT 10500
5483: PUSH
5484: LD_INT 1
5486: PLUS
5487: DOUBLE
5488: GREATEREQUAL
5489: IFFALSE 5497
5491: LD_INT 21000
5493: DOUBLE
5494: LESSEQUAL
5495: IFTRUE 5499
5497: GO 5527
5499: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$50 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5500: LD_EXP 7
5504: PUSH
5505: LD_INT 100
5507: DIVREAL
5508: PUSH
5509: LD_INT 1225
5511: PPUSH
5512: LD_INT 1750
5514: PPUSH
5515: CALL_OW 12
5519: MUL
5520: PPUSH
5521: CALL_OW 67
5525: GO 5737
5527: LD_INT 21000
5529: PUSH
5530: LD_INT 1
5532: PLUS
5533: DOUBLE
5534: GREATEREQUAL
5535: IFFALSE 5543
5537: LD_INT 42000
5539: DOUBLE
5540: LESSEQUAL
5541: IFTRUE 5545
5543: GO 5573
5545: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$50 , 1 1$10 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5546: LD_EXP 7
5550: PUSH
5551: LD_INT 100
5553: DIVREAL
5554: PUSH
5555: LD_INT 1750
5557: PPUSH
5558: LD_INT 2450
5560: PPUSH
5561: CALL_OW 12
5565: MUL
5566: PPUSH
5567: CALL_OW 67
5571: GO 5737
5573: LD_INT 42000
5575: PUSH
5576: LD_INT 1
5578: PLUS
5579: DOUBLE
5580: GREATEREQUAL
5581: IFFALSE 5589
5583: LD_INT 63000
5585: DOUBLE
5586: LESSEQUAL
5587: IFTRUE 5591
5589: GO 5619
5591: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$10 , 1 1$20 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5592: LD_EXP 7
5596: PUSH
5597: LD_INT 100
5599: DIVREAL
5600: PUSH
5601: LD_INT 2450
5603: PPUSH
5604: LD_INT 2800
5606: PPUSH
5607: CALL_OW 12
5611: MUL
5612: PPUSH
5613: CALL_OW 67
5617: GO 5737
5619: LD_INT 63000
5621: PUSH
5622: LD_INT 1
5624: PLUS
5625: DOUBLE
5626: GREATEREQUAL
5627: IFFALSE 5635
5629: LD_INT 105000
5631: DOUBLE
5632: LESSEQUAL
5633: IFTRUE 5637
5635: GO 5665
5637: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$20 , 1 1$35 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5638: LD_EXP 7
5642: PUSH
5643: LD_INT 100
5645: DIVREAL
5646: PUSH
5647: LD_INT 2800
5649: PPUSH
5650: LD_INT 3325
5652: PPUSH
5653: CALL_OW 12
5657: MUL
5658: PPUSH
5659: CALL_OW 67
5663: GO 5737
5665: LD_INT 105000
5667: PUSH
5668: LD_INT 1
5670: PLUS
5671: DOUBLE
5672: GREATEREQUAL
5673: IFFALSE 5681
5675: LD_INT 630000
5677: DOUBLE
5678: LESSEQUAL
5679: IFTRUE 5683
5681: GO 5711
5683: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$35 , 2 2$0 ) ) ; else
5684: LD_EXP 7
5688: PUSH
5689: LD_INT 100
5691: DIVREAL
5692: PUSH
5693: LD_INT 3325
5695: PPUSH
5696: LD_INT 4200
5698: PPUSH
5699: CALL_OW 12
5703: MUL
5704: PPUSH
5705: CALL_OW 67
5709: GO 5737
5711: POP
// Wait ( shipments_density / 100 * Rand ( 2 2$0 , 2 2$30 ) ) ; end ;
5712: LD_EXP 7
5716: PUSH
5717: LD_INT 100
5719: DIVREAL
5720: PUSH
5721: LD_INT 4200
5723: PPUSH
5724: LD_INT 5250
5726: PPUSH
5727: CALL_OW 12
5731: MUL
5732: PPUSH
5733: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5737: LD_ADDR_VAR 0 2
5741: PUSH
5742: LD_INT 3
5744: PPUSH
5745: LD_INT 5
5747: PPUSH
5748: CALL_OW 12
5752: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5753: LD_ADDR_VAR 0 1
5757: PUSH
5758: LD_EXP 18
5762: PUSH
5763: LD_INT 0
5765: PUSH
5766: EMPTY
5767: LIST
5768: DIFF
5769: PUSH
5770: FOR_IN
5771: IFFALSE 5820
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5773: LD_VAR 0 2
5777: PPUSH
5778: LD_EXP 24
5782: PUSH
5783: LD_VAR 0 1
5787: ARRAY
5788: PUSH
5789: LD_INT 1
5791: ARRAY
5792: PPUSH
5793: LD_EXP 24
5797: PUSH
5798: LD_VAR 0 1
5802: ARRAY
5803: PUSH
5804: LD_INT 2
5806: ARRAY
5807: PPUSH
5808: LD_INT 20
5810: PPUSH
5811: LD_INT 1
5813: PPUSH
5814: CALL_OW 56
5818: GO 5770
5820: POP
5821: POP
// enable ;
5822: ENABLE
// end ; end_of_file
5823: PPOPN 2
5825: END
// var respawn , inqueue ; export function init_respawning ; begin
5826: LD_INT 0
5828: PPUSH
// respawn := Rand ( 1 , 8 ) ;
5829: LD_ADDR_LOC 9
5833: PUSH
5834: LD_INT 1
5836: PPUSH
5837: LD_INT 8
5839: PPUSH
5840: CALL_OW 12
5844: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5845: LD_ADDR_LOC 10
5849: PUSH
5850: LD_INT 0
5852: PUSH
5853: LD_INT 0
5855: PUSH
5856: LD_INT 0
5858: PUSH
5859: LD_INT 0
5861: PUSH
5862: LD_INT 0
5864: PUSH
5865: LD_INT 0
5867: PUSH
5868: LD_INT 0
5870: PUSH
5871: LD_INT 0
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: ST_TO_ADDR
// end ;
5884: LD_VAR 0 1
5888: RET
// every 0 0$1 + 0 0$0.5 do var n , building_list , aktresp , b ;
5889: GO 5891
5891: DISABLE
5892: LD_INT 0
5894: PPUSH
5895: PPUSH
5896: PPUSH
5897: PPUSH
// begin if respawning_time_max = 0 then
5898: LD_EXP 12
5902: PUSH
5903: LD_INT 0
5905: EQUAL
5906: IFFALSE 5910
// exit ;
5908: GO 6417
// if respawn = 8 then
5910: LD_LOC 9
5914: PUSH
5915: LD_INT 8
5917: EQUAL
5918: IFFALSE 5930
// respawn := 1 else
5920: LD_ADDR_LOC 9
5924: PUSH
5925: LD_INT 1
5927: ST_TO_ADDR
5928: GO 5944
// respawn := respawn + 1 ;
5930: LD_ADDR_LOC 9
5934: PUSH
5935: LD_LOC 9
5939: PUSH
5940: LD_INT 1
5942: PLUS
5943: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
5944: LD_EXP 18
5948: PUSH
5949: LD_LOC 9
5953: ARRAY
5954: PUSH
5955: LD_LOC 10
5959: PUSH
5960: LD_LOC 9
5964: ARRAY
5965: NOT
5966: AND
5967: IFFALSE 6416
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
5969: LD_ADDR_VAR 0 1
5973: PUSH
5974: LD_INT 21
5976: PUSH
5977: LD_INT 1
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: LD_INT 22
5986: PUSH
5987: LD_LOC 9
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 3
5998: PUSH
5999: LD_INT 23
6001: PUSH
6002: LD_INT 0
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: PPUSH
6015: CALL_OW 69
6019: ST_TO_ADDR
// if n < number_of_people then
6020: LD_VAR 0 1
6024: PUSH
6025: LD_EXP 3
6029: LESS
6030: IFFALSE 6413
// begin aktresp := respawn ;
6032: LD_ADDR_VAR 0 3
6036: PUSH
6037: LD_LOC 9
6041: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
6042: LD_ADDR_LOC 10
6046: PUSH
6047: LD_LOC 10
6051: PPUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: LD_INT 1
6059: PPUSH
6060: CALL_OW 1
6064: ST_TO_ADDR
// enable ;
6065: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
6066: LD_EXP 11
6070: PPUSH
6071: LD_EXP 12
6075: PPUSH
6076: CALL_OW 12
6080: PPUSH
6081: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
6085: LD_ADDR_LOC 10
6089: PUSH
6090: LD_LOC 10
6094: PPUSH
6095: LD_VAR 0 3
6099: PPUSH
6100: LD_INT 0
6102: PPUSH
6103: CALL_OW 1
6107: ST_TO_ADDR
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 21
6115: PUSH
6116: LD_INT 3
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 2
6125: PUSH
6126: LD_INT 30
6128: PUSH
6129: LD_INT 0
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 30
6138: PUSH
6139: LD_INT 1
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: PUSH
6151: LD_INT 50
6153: PUSH
6154: EMPTY
6155: LIST
6156: PUSH
6157: LD_INT 22
6159: PUSH
6160: LD_VAR 0 3
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: ST_TO_ADDR
// if building_list = 0 then
6180: LD_VAR 0 2
6184: PUSH
6185: LD_INT 0
6187: EQUAL
6188: IFFALSE 6233
// building_list = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
6190: LD_ADDR_VAR 0 2
6194: PUSH
6195: LD_INT 21
6197: PUSH
6198: LD_INT 3
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: LD_INT 50
6207: PUSH
6208: EMPTY
6209: LIST
6210: PUSH
6211: LD_INT 22
6213: PUSH
6214: LD_VAR 0 3
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: PPUSH
6228: CALL_OW 69
6232: ST_TO_ADDR
// if building_list = 0 then
6233: LD_VAR 0 2
6237: PUSH
6238: LD_INT 0
6240: EQUAL
6241: IFFALSE 6245
// exit ;
6243: GO 6417
// hc_name :=  ;
6245: LD_ADDR_OWVAR 26
6249: PUSH
6250: LD_STRING 
6252: ST_TO_ADDR
// hc_importance := 0 ;
6253: LD_ADDR_OWVAR 32
6257: PUSH
6258: LD_INT 0
6260: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
6261: LD_INT 0
6263: PPUSH
6264: LD_INT 0
6266: PPUSH
6267: LD_EXP 4
6271: PUSH
6272: LD_INT 2
6274: DIV
6275: PPUSH
6276: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
6280: LD_ADDR_OWVAR 21
6284: PUSH
6285: LD_EXP 19
6289: PUSH
6290: LD_VAR 0 3
6294: ARRAY
6295: ST_TO_ADDR
// uc_side := aktresp ;
6296: LD_ADDR_OWVAR 20
6300: PUSH
6301: LD_VAR 0 3
6305: ST_TO_ADDR
// b := building_list [ Rand ( 1 , building_list + 0 ) ] ;
6306: LD_ADDR_VAR 0 4
6310: PUSH
6311: LD_VAR 0 2
6315: PUSH
6316: LD_INT 1
6318: PPUSH
6319: LD_VAR 0 2
6323: PUSH
6324: LD_INT 0
6326: PLUS
6327: PPUSH
6328: CALL_OW 12
6332: ARRAY
6333: ST_TO_ADDR
// if GetBType ( b ) in [ b_depot , b_warehouse ] then
6334: LD_VAR 0 4
6338: PPUSH
6339: CALL_OW 266
6343: PUSH
6344: LD_INT 0
6346: PUSH
6347: LD_INT 1
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: IN
6354: IFFALSE 6366
// n = 25 else
6356: LD_ADDR_VAR 0 1
6360: PUSH
6361: LD_INT 25
6363: ST_TO_ADDR
6364: GO 6374
// n = 10 ;
6366: LD_ADDR_VAR 0 1
6370: PUSH
6371: LD_INT 10
6373: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( b ) , GetY ( b ) , n , true ) ;
6374: CALL_OW 44
6378: PPUSH
6379: LD_VAR 0 4
6383: PPUSH
6384: CALL_OW 250
6388: PPUSH
6389: LD_VAR 0 4
6393: PPUSH
6394: CALL_OW 251
6398: PPUSH
6399: LD_VAR 0 1
6403: PPUSH
6404: LD_INT 1
6406: PPUSH
6407: CALL_OW 50
// end else
6411: GO 6414
// enable ;
6413: ENABLE
// end else
6414: GO 6417
// enable ;
6416: ENABLE
// end ; end_of_file
6417: PPOPN 4
6419: END
// every 20 20$00 trigger apemanNumber do
6420: LD_EXP 31
6424: IFFALSE 6457
6426: GO 6428
6428: DISABLE
// begin enable ;
6429: ENABLE
// if apeLevel >= 8 then
6430: LD_EXP 36
6434: PUSH
6435: LD_INT 8
6437: GREATEREQUAL
6438: IFFALSE 6443
// disable else
6440: DISABLE
6441: GO 6457
// apeLevel := apeLevel + 1 ;
6443: LD_ADDR_EXP 36
6447: PUSH
6448: LD_EXP 36
6452: PUSH
6453: LD_INT 1
6455: PLUS
6456: ST_TO_ADDR
// end ;
6457: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
6458: LD_EXP 31
6462: PUSH
6463: LD_EXP 32
6467: LESS
6468: IFFALSE 6608
6470: GO 6472
6472: DISABLE
6473: LD_INT 0
6475: PPUSH
6476: PPUSH
6477: PPUSH
6478: PPUSH
// begin enable ;
6479: ENABLE
// for i := 1 to apemanPos do
6480: LD_ADDR_VAR 0 1
6484: PUSH
6485: DOUBLE
6486: LD_INT 1
6488: DEC
6489: ST_TO_ADDR
6490: LD_EXP 34
6494: PUSH
6495: FOR_TO
6496: IFFALSE 6606
// begin if apemanPlayerCount [ i ] then
6498: LD_EXP 35
6502: PUSH
6503: LD_VAR 0 1
6507: ARRAY
6508: IFFALSE 6604
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
6510: LD_EXP 35
6514: PUSH
6515: LD_VAR 0 1
6519: ARRAY
6520: PUSH
6521: LD_EXP 34
6525: PUSH
6526: LD_VAR 0 1
6530: ARRAY
6531: GREATER
6532: IFFALSE 6604
// begin ape := PrepareApeman ;
6534: LD_ADDR_VAR 0 2
6538: PUSH
6539: CALL 7127 0 0
6543: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
6544: LD_VAR 0 2
6548: PPUSH
6549: LD_EXP 37
6553: PUSH
6554: LD_VAR 0 1
6558: ARRAY
6559: PPUSH
6560: LD_INT 0
6562: PPUSH
6563: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
6567: LD_ADDR_EXP 34
6571: PUSH
6572: LD_EXP 34
6576: PPUSH
6577: LD_VAR 0 1
6581: PPUSH
6582: LD_EXP 34
6586: PUSH
6587: LD_VAR 0 1
6591: ARRAY
6592: PUSH
6593: LD_VAR 0 2
6597: UNION
6598: PPUSH
6599: CALL_OW 1
6603: ST_TO_ADDR
// end ; end ; end ;
6604: GO 6495
6606: POP
6607: POP
// end ;
6608: PPOPN 4
6610: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
6611: LD_INT 0
6613: PPUSH
6614: PPUSH
6615: PPUSH
6616: PPUSH
6617: PPUSH
6618: PPUSH
6619: PPUSH
// playersAmount := 0 ;
6620: LD_ADDR_VAR 0 3
6624: PUSH
6625: LD_INT 0
6627: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
6628: LD_ADDR_VAR 0 7
6632: PUSH
6633: LD_INT 1
6635: PUSH
6636: LD_INT 2
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: LD_INT 5
6647: PUSH
6648: LD_INT 6
6650: PUSH
6651: LD_INT 7
6653: PUSH
6654: LD_INT 8
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6667: LD_ADDR_EXP 37
6671: PUSH
6672: LD_INT 0
6674: PUSH
6675: LD_INT 0
6677: PUSH
6678: LD_INT 0
6680: PUSH
6681: LD_INT 0
6683: PUSH
6684: LD_INT 0
6686: PUSH
6687: LD_INT 0
6689: PUSH
6690: LD_INT 0
6692: PUSH
6693: LD_INT 0
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: ST_TO_ADDR
// for j = 1 to Side_Positions do
6706: LD_ADDR_VAR 0 4
6710: PUSH
6711: DOUBLE
6712: LD_INT 1
6714: DEC
6715: ST_TO_ADDR
6716: LD_EXP 18
6720: PUSH
6721: FOR_TO
6722: IFFALSE 6789
// if Side_Positions [ j ] then
6724: LD_EXP 18
6728: PUSH
6729: LD_VAR 0 4
6733: ARRAY
6734: IFFALSE 6787
// begin playersAmount := playersAmount + 1 ;
6736: LD_ADDR_VAR 0 3
6740: PUSH
6741: LD_VAR 0 3
6745: PUSH
6746: LD_INT 1
6748: PLUS
6749: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
6750: LD_ADDR_EXP 37
6754: PUSH
6755: LD_EXP 37
6759: PPUSH
6760: LD_VAR 0 4
6764: PPUSH
6765: LD_VAR 0 7
6769: PUSH
6770: LD_EXP 18
6774: PUSH
6775: LD_VAR 0 4
6779: ARRAY
6780: ARRAY
6781: PPUSH
6782: CALL_OW 1
6786: ST_TO_ADDR
// end ;
6787: GO 6721
6789: POP
6790: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
6791: LD_ADDR_EXP 33
6795: PUSH
6796: LD_INT 3
6798: PUSH
6799: LD_EXP 9
6803: MUL
6804: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
6805: LD_ADDR_EXP 31
6809: PUSH
6810: LD_VAR 0 3
6814: PUSH
6815: LD_EXP 33
6819: MUL
6820: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6821: LD_ADDR_EXP 32
6825: PUSH
6826: LD_EXP 31
6830: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6831: LD_ADDR_EXP 34
6835: PUSH
6836: LD_INT 0
6838: PUSH
6839: LD_INT 0
6841: PUSH
6842: LD_INT 0
6844: PUSH
6845: LD_INT 0
6847: PUSH
6848: LD_INT 0
6850: PUSH
6851: LD_INT 0
6853: PUSH
6854: LD_INT 0
6856: PUSH
6857: LD_INT 0
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6870: LD_ADDR_EXP 35
6874: PUSH
6875: LD_INT 0
6877: PUSH
6878: LD_INT 0
6880: PUSH
6881: LD_INT 0
6883: PUSH
6884: LD_INT 0
6886: PUSH
6887: LD_INT 0
6889: PUSH
6890: LD_INT 0
6892: PUSH
6893: LD_INT 0
6895: PUSH
6896: LD_INT 0
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: ST_TO_ADDR
// apeLevel := 1 ;
6909: LD_ADDR_EXP 36
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// if not apemanNumber then
6917: LD_EXP 31
6921: NOT
6922: IFFALSE 6926
// exit ;
6924: GO 7122
// for i := 1 to apemanPerPlayer do
6926: LD_ADDR_VAR 0 2
6930: PUSH
6931: DOUBLE
6932: LD_INT 1
6934: DEC
6935: ST_TO_ADDR
6936: LD_EXP 33
6940: PUSH
6941: FOR_TO
6942: IFFALSE 7120
// begin for j := 1 to Side_Positions do
6944: LD_ADDR_VAR 0 4
6948: PUSH
6949: DOUBLE
6950: LD_INT 1
6952: DEC
6953: ST_TO_ADDR
6954: LD_EXP 18
6958: PUSH
6959: FOR_TO
6960: IFFALSE 7116
// if Side_Positions [ j ] then
6962: LD_EXP 18
6966: PUSH
6967: LD_VAR 0 4
6971: ARRAY
6972: IFFALSE 7114
// begin pos := Side_Positions [ j ] ;
6974: LD_ADDR_VAR 0 6
6978: PUSH
6979: LD_EXP 18
6983: PUSH
6984: LD_VAR 0 4
6988: ARRAY
6989: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6990: LD_ADDR_EXP 35
6994: PUSH
6995: LD_EXP 35
6999: PPUSH
7000: LD_VAR 0 4
7004: PPUSH
7005: LD_EXP 35
7009: PUSH
7010: LD_VAR 0 4
7014: ARRAY
7015: PUSH
7016: LD_INT 1
7018: PLUS
7019: PPUSH
7020: CALL_OW 1
7024: ST_TO_ADDR
// ape := PrepareApeman ;
7025: LD_ADDR_VAR 0 5
7029: PUSH
7030: CALL 7127 0 0
7034: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
7035: LD_ADDR_EXP 34
7039: PUSH
7040: LD_EXP 34
7044: PPUSH
7045: LD_VAR 0 4
7049: PPUSH
7050: LD_EXP 34
7054: PUSH
7055: LD_VAR 0 4
7059: ARRAY
7060: PPUSH
7061: LD_EXP 34
7065: PUSH
7066: LD_VAR 0 4
7070: ARRAY
7071: PUSH
7072: LD_INT 1
7074: PLUS
7075: PPUSH
7076: LD_VAR 0 5
7080: PPUSH
7081: CALL_OW 1
7085: PPUSH
7086: CALL_OW 1
7090: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
7091: LD_VAR 0 5
7095: PPUSH
7096: LD_EXP 37
7100: PUSH
7101: LD_VAR 0 4
7105: ARRAY
7106: PPUSH
7107: LD_INT 0
7109: PPUSH
7110: CALL_OW 49
// end ;
7114: GO 6959
7116: POP
7117: POP
// end ;
7118: GO 6941
7120: POP
7121: POP
// end ;
7122: LD_VAR 0 1
7126: RET
// export function PrepareApeman ; var bonus ; begin
7127: LD_INT 0
7129: PPUSH
7130: PPUSH
// uc_side := 0 ;
7131: LD_ADDR_OWVAR 20
7135: PUSH
7136: LD_INT 0
7138: ST_TO_ADDR
// uc_nation := 0 ;
7139: LD_ADDR_OWVAR 21
7143: PUSH
7144: LD_INT 0
7146: ST_TO_ADDR
// InitHc ;
7147: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
7151: LD_ADDR_VAR 0 2
7155: PUSH
7156: LD_INT 1
7158: NEG
7159: PUSH
7160: LD_INT 0
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: PUSH
7171: LD_OWVAR 1
7175: PUSH
7176: LD_INT 3
7178: MOD
7179: PUSH
7180: LD_INT 1
7182: PLUS
7183: ARRAY
7184: ST_TO_ADDR
// hc_class := class_apeman ;
7185: LD_ADDR_OWVAR 28
7189: PUSH
7190: LD_INT 12
7192: ST_TO_ADDR
// hc_gallery :=  ;
7193: LD_ADDR_OWVAR 33
7197: PUSH
7198: LD_STRING 
7200: ST_TO_ADDR
// hc_name :=  ;
7201: LD_ADDR_OWVAR 26
7205: PUSH
7206: LD_STRING 
7208: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
7209: LD_ADDR_OWVAR 31
7213: PUSH
7214: LD_EXP 36
7218: PUSH
7219: LD_VAR 0 2
7223: PLUS
7224: PUSH
7225: LD_EXP 36
7229: PUSH
7230: LD_VAR 0 2
7234: PLUS
7235: PUSH
7236: LD_EXP 36
7240: PUSH
7241: LD_VAR 0 2
7245: PLUS
7246: PUSH
7247: LD_EXP 36
7251: PUSH
7252: LD_VAR 0 2
7256: PLUS
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
7264: LD_ADDR_OWVAR 35
7268: PUSH
7269: LD_INT 10
7271: PUSH
7272: LD_VAR 0 2
7276: MUL
7277: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
7278: LD_ADDR_OWVAR 29
7282: PUSH
7283: LD_INT 12
7285: PUSH
7286: LD_INT 10
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: ST_TO_ADDR
// result := CreateHuman ;
7293: LD_ADDR_VAR 0 1
7297: PUSH
7298: CALL_OW 44
7302: ST_TO_ADDR
// end ;
7303: LD_VAR 0 1
7307: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
7308: LD_INT 0
7310: PPUSH
7311: PPUSH
7312: PPUSH
// if not ape then
7313: LD_VAR 0 1
7317: NOT
7318: IFFALSE 7322
// exit ;
7320: GO 7447
// side := GetSide ( ape ) ;
7322: LD_ADDR_VAR 0 3
7326: PUSH
7327: LD_VAR 0 1
7331: PPUSH
7332: CALL_OW 255
7336: ST_TO_ADDR
// if not side then
7337: LD_VAR 0 3
7341: NOT
7342: IFFALSE 7396
// begin for i = 1 to apemanPos do
7344: LD_ADDR_VAR 0 4
7348: PUSH
7349: DOUBLE
7350: LD_INT 1
7352: DEC
7353: ST_TO_ADDR
7354: LD_EXP 34
7358: PUSH
7359: FOR_TO
7360: IFFALSE 7394
// if ape in apemanPos [ i ] then
7362: LD_VAR 0 1
7366: PUSH
7367: LD_EXP 34
7371: PUSH
7372: LD_VAR 0 4
7376: ARRAY
7377: IN
7378: IFFALSE 7392
// begin side := i ;
7380: LD_ADDR_VAR 0 3
7384: PUSH
7385: LD_VAR 0 4
7389: ST_TO_ADDR
// break ;
7390: GO 7394
// end ;
7392: GO 7359
7394: POP
7395: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
7396: LD_ADDR_EXP 34
7400: PUSH
7401: LD_EXP 34
7405: PPUSH
7406: LD_VAR 0 3
7410: PPUSH
7411: LD_EXP 34
7415: PUSH
7416: LD_VAR 0 3
7420: ARRAY
7421: PUSH
7422: LD_VAR 0 1
7426: DIFF
7427: PPUSH
7428: CALL_OW 1
7432: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
7433: LD_ADDR_EXP 31
7437: PUSH
7438: LD_EXP 31
7442: PUSH
7443: LD_INT 1
7445: MINUS
7446: ST_TO_ADDR
// end ; end_of_file
7447: LD_VAR 0 2
7451: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 266
7461: PUSH
7462: LD_INT 0
7464: PUSH
7465: LD_INT 1
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: IN
7472: IFFALSE 7497
// SetBName ( b , @ & GetSide ( b ) ) ;
7474: LD_VAR 0 1
7478: PPUSH
7479: LD_STRING @
7481: PUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: CALL_OW 255
7491: STR
7492: PPUSH
7493: CALL_OW 500
// if def_game_rules then
7497: LD_EXP 40
7501: IFFALSE 7538
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , 0 , 1 ) ;
7503: LD_VAR 0 1
7507: PPUSH
7508: LD_VAR 0 1
7512: PPUSH
7513: CALL_OW 266
7517: PPUSH
7518: LD_VAR 0 1
7522: PPUSH
7523: CALL_OW 255
7527: PPUSH
7528: LD_INT 0
7530: PPUSH
7531: LD_INT 1
7533: PPUSH
7534: CALL 11568 0 5
// end ;
7538: PPOPN 2
7540: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
7541: LD_VAR 0 1
7545: PPUSH
7546: CALL_OW 266
7550: PUSH
7551: LD_INT 0
7553: PUSH
7554: LD_INT 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: IN
7561: IFFALSE 7586
// SetBName ( b , @ & GetSide ( b ) ) ;
7563: LD_VAR 0 1
7567: PPUSH
7568: LD_STRING @
7570: PUSH
7571: LD_VAR 0 1
7575: PPUSH
7576: CALL_OW 255
7580: STR
7581: PPUSH
7582: CALL_OW 500
// if def_game_rules then
7586: LD_EXP 40
7590: IFFALSE 7629
// ExecuteLimits ( b , GetBType ( b ) , GetSide ( b ) , o , 1 ) ;
7592: LD_VAR 0 1
7596: PPUSH
7597: LD_VAR 0 1
7601: PPUSH
7602: CALL_OW 266
7606: PPUSH
7607: LD_VAR 0 1
7611: PPUSH
7612: CALL_OW 255
7616: PPUSH
7617: LD_VAR 0 2
7621: PPUSH
7622: LD_INT 1
7624: PPUSH
7625: CALL 11568 0 5
// end ;
7629: PPOPN 3
7631: END
// on VehicleConstructed ( veh , fac ) do var side ;
7632: LD_INT 0
7634: PPUSH
// begin if GetControl ( veh ) = control_apeman then
7635: LD_VAR 0 1
7639: PPUSH
7640: CALL_OW 263
7644: PUSH
7645: LD_INT 5
7647: EQUAL
7648: IFFALSE 7790
// begin side := GetSide ( veh ) ;
7650: LD_ADDR_VAR 0 3
7654: PUSH
7655: LD_VAR 0 1
7659: PPUSH
7660: CALL_OW 255
7664: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
7665: LD_ADDR_EXP 34
7669: PUSH
7670: LD_EXP 34
7674: PPUSH
7675: LD_VAR 0 3
7679: PPUSH
7680: LD_EXP 34
7684: PUSH
7685: LD_VAR 0 3
7689: ARRAY
7690: PPUSH
7691: LD_INT 52
7693: PUSH
7694: EMPTY
7695: LIST
7696: PPUSH
7697: CALL_OW 72
7701: PUSH
7702: LD_INT 22
7704: PUSH
7705: LD_VAR 0 3
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 2
7716: PUSH
7717: LD_INT 33
7719: PUSH
7720: LD_INT 5
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 25
7729: PUSH
7730: LD_INT 12
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 25
7739: PUSH
7740: LD_INT 15
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 25
7749: PUSH
7750: LD_INT 16
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 25
7759: PUSH
7760: LD_INT 17
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PPUSH
7779: CALL_OW 69
7783: UNION
7784: PPUSH
7785: CALL_OW 1
7789: ST_TO_ADDR
// end ; end ;
7790: PPOPN 3
7792: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
7793: LD_INT 0
7795: PPUSH
7796: PPUSH
7797: PPUSH
7798: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
7799: LD_VAR 0 1
7803: PPUSH
7804: CALL_OW 257
7808: PUSH
7809: LD_INT 12
7811: PUSH
7812: LD_INT 15
7814: PUSH
7815: LD_INT 17
7817: PUSH
7818: LD_INT 16
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: IN
7827: PUSH
7828: LD_VAR 0 1
7832: PPUSH
7833: CALL_OW 263
7837: PUSH
7838: LD_INT 5
7840: EQUAL
7841: OR
7842: IFFALSE 7853
// ApeKilled ( j ) ;
7844: LD_VAR 0 1
7848: PPUSH
7849: CALL 7308 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
7853: LD_VAR 0 1
7857: PPUSH
7858: CALL_OW 266
7862: PUSH
7863: LD_INT 0
7865: PUSH
7866: LD_INT 1
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: IN
7873: IFFALSE 7955
// begin pos := Side_Positions [ GetSide ( j ) ] ;
7875: LD_ADDR_VAR 0 4
7879: PUSH
7880: LD_EXP 18
7884: PUSH
7885: LD_VAR 0 1
7889: PPUSH
7890: CALL_OW 255
7894: ARRAY
7895: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7896: LD_ADDR_VAR 0 2
7900: PUSH
7901: LD_EXP 24
7905: PUSH
7906: LD_VAR 0 4
7910: ARRAY
7911: PUSH
7912: LD_INT 1
7914: ARRAY
7915: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7916: LD_ADDR_VAR 0 3
7920: PUSH
7921: LD_EXP 24
7925: PUSH
7926: LD_VAR 0 4
7930: ARRAY
7931: PUSH
7932: LD_INT 2
7934: ARRAY
7935: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7936: LD_VAR 0 2
7940: PPUSH
7941: LD_VAR 0 3
7945: PPUSH
7946: CALL_OW 420
7950: PPUSH
7951: CALL_OW 419
// end ; if def_game_rules then
7955: LD_EXP 40
7959: IFFALSE 8058
// if ( GetType ( j ) = 3 ) then
7961: LD_VAR 0 1
7965: PPUSH
7966: CALL_OW 247
7970: PUSH
7971: LD_INT 3
7973: EQUAL
7974: IFFALSE 8014
// ExecuteLimits ( j , GetBType ( j ) , GetSide ( j ) , 0 , - 1 ) else
7976: LD_VAR 0 1
7980: PPUSH
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 266
7990: PPUSH
7991: LD_VAR 0 1
7995: PPUSH
7996: CALL_OW 255
8000: PPUSH
8001: LD_INT 0
8003: PPUSH
8004: LD_INT 1
8006: NEG
8007: PPUSH
8008: CALL 11568 0 5
8012: GO 8058
// if ( GetChassis ( j ) = 25 ) then
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 265
8023: PUSH
8024: LD_INT 25
8026: EQUAL
8027: IFFALSE 8058
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , 0 , - 1 ) ;
8029: LD_VAR 0 1
8033: PPUSH
8034: LD_INT 37
8036: PPUSH
8037: LD_VAR 0 1
8041: PPUSH
8042: CALL_OW 255
8046: PPUSH
8047: LD_INT 0
8049: PPUSH
8050: LD_INT 1
8052: NEG
8053: PPUSH
8054: CALL 11568 0 5
// end ;
8058: PPOPN 5
8060: END
// on VehicleCaptured ( j , i1 , o , i2 ) do begin if def_game_rules and ( GetChassis ( j ) = 25 ) then
8061: LD_EXP 40
8065: PUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: CALL_OW 265
8075: PUSH
8076: LD_INT 25
8078: EQUAL
8079: AND
8080: IFFALSE 8112
// ExecuteLimits ( j , b_behemoth , GetSide ( j ) , o , 1 ) ;
8082: LD_VAR 0 1
8086: PPUSH
8087: LD_INT 37
8089: PPUSH
8090: LD_VAR 0 1
8094: PPUSH
8095: CALL_OW 255
8099: PPUSH
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_INT 1
8107: PPUSH
8108: CALL 11568 0 5
// end ;
8112: PPOPN 4
8114: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
8115: LD_VAR 0 1
8119: PPUSH
8120: LD_VAR 0 2
8124: PPUSH
8125: LD_VAR 0 3
8129: PPUSH
8130: LD_OWVAR 2
8134: PPUSH
8135: CALL 12268 0 4
8139: PPOPN 3
8141: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
8142: LD_INT 0
8144: PPUSH
8145: PPUSH
// for un in battle_flags_id do
8146: LD_ADDR_VAR 0 2
8150: PUSH
8151: LD_EXP 29
8155: PUSH
8156: FOR_IN
8157: IFFALSE 8232
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
8159: LD_VAR 0 2
8163: PPUSH
8164: LD_INT 1
8166: PUSH
8167: LD_LOC 11
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 2
8178: PUSH
8179: LD_LOC 11
8183: PUSH
8184: LD_INT 2
8186: DIV
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PUSH
8192: LD_INT 3
8194: PUSH
8195: LD_LOC 11
8199: PUSH
8200: LD_INT 5
8202: DIV
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PUSH
8208: LD_INT 20
8210: PUSH
8211: LD_LOC 11
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: PUSH
8220: EMPTY
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 423
8230: GO 8156
8232: POP
8233: POP
// end ;
8234: LD_VAR 0 1
8238: RET
// every 1 do var un ;
8239: GO 8241
8241: DISABLE
8242: LD_INT 0
8244: PPUSH
// begin if not def_morale_flags then
8245: LD_EXP 49
8249: NOT
8250: IFFALSE 8254
// exit ;
8252: GO 8331
// if not morale_decreasing_time then
8254: LD_EXP 8
8258: NOT
8259: IFFALSE 8263
// exit ;
8261: GO 8331
// strength = 100 ;
8263: LD_ADDR_LOC 11
8267: PUSH
8268: LD_INT 100
8270: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
8271: LD_EXP 8
8275: PPUSH
8276: CALL_OW 67
// strength := strength - 1 ;
8280: LD_ADDR_LOC 11
8284: PUSH
8285: LD_LOC 11
8289: PUSH
8290: LD_INT 1
8292: MINUS
8293: ST_TO_ADDR
// Update_Flags ;
8294: CALL 8142 0 0
// until not strength ;
8298: LD_LOC 11
8302: NOT
8303: IFFALSE 8271
// for un in battle_flags_id do
8305: LD_ADDR_VAR 0 1
8309: PUSH
8310: LD_EXP 29
8314: PUSH
8315: FOR_IN
8316: IFFALSE 8329
// KillBattleFlag ( un ) ;
8318: LD_VAR 0 1
8322: PPUSH
8323: CALL_OW 419
8327: GO 8315
8329: POP
8330: POP
// end ; end_of_file
8331: PPOPN 1
8333: END
// export BuildUpAreas ; export function BeginBuildUp ; var i , j ; begin
8334: LD_INT 0
8336: PPUSH
8337: PPUSH
8338: PPUSH
// enable ( 600 ) ;
8339: LD_INT 600
8341: ENABLE_MARKED
// for i := 1 to BuildUpAreas do
8342: LD_ADDR_VAR 0 2
8346: PUSH
8347: DOUBLE
8348: LD_INT 1
8350: DEC
8351: ST_TO_ADDR
8352: LD_EXP 38
8356: PUSH
8357: FOR_TO
8358: IFFALSE 8513
// if Position_Sides [ i ] then
8360: LD_EXP 21
8364: PUSH
8365: LD_VAR 0 2
8369: ARRAY
8370: IFFALSE 8511
// for j := 1 to 8 do
8372: LD_ADDR_VAR 0 3
8376: PUSH
8377: DOUBLE
8378: LD_INT 1
8380: DEC
8381: ST_TO_ADDR
8382: LD_INT 8
8384: PUSH
8385: FOR_TO
8386: IFFALSE 8509
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8388: LD_EXP 18
8392: PUSH
8393: LD_VAR 0 3
8397: ARRAY
8398: PUSH
8399: LD_EXP 15
8403: PUSH
8404: LD_EXP 21
8408: PUSH
8409: LD_VAR 0 2
8413: ARRAY
8414: ARRAY
8415: PUSH
8416: LD_EXP 15
8420: PUSH
8421: LD_VAR 0 3
8425: ARRAY
8426: NONEQUAL
8427: PUSH
8428: LD_EXP 20
8432: NOT
8433: PUSH
8434: LD_EXP 21
8438: PUSH
8439: LD_VAR 0 2
8443: ARRAY
8444: PUSH
8445: LD_VAR 0 3
8449: NONEQUAL
8450: AND
8451: OR
8452: AND
8453: IFFALSE 8477
// HideArea ( j , BuildUpAreas [ i ] ) else
8455: LD_VAR 0 3
8459: PPUSH
8460: LD_EXP 38
8464: PUSH
8465: LD_VAR 0 2
8469: ARRAY
8470: PPUSH
8471: CALL_OW 333
8475: GO 8507
// if ( j = your_side ) then
8477: LD_VAR 0 3
8481: PUSH
8482: LD_OWVAR 2
8486: EQUAL
8487: IFFALSE 8507
// SetAreaMapShow ( BuildUpAreas [ i ] , 5 ) ;
8489: LD_EXP 38
8493: PUSH
8494: LD_VAR 0 2
8498: ARRAY
8499: PPUSH
8500: LD_INT 5
8502: PPUSH
8503: CALL_OW 424
8507: GO 8385
8509: POP
8510: POP
8511: GO 8357
8513: POP
8514: POP
// end ;
8515: LD_VAR 0 1
8519: RET
// export function EndBuildUp ; var i , j ; begin
8520: LD_INT 0
8522: PPUSH
8523: PPUSH
8524: PPUSH
// disable ( 600 ) ;
8525: LD_INT 600
8527: DISABLE_MARKED
// for i := 1 to BuildUpAreas do
8528: LD_ADDR_VAR 0 2
8532: PUSH
8533: DOUBLE
8534: LD_INT 1
8536: DEC
8537: ST_TO_ADDR
8538: LD_EXP 38
8542: PUSH
8543: FOR_TO
8544: IFFALSE 8699
// if Position_Sides [ i ] then
8546: LD_EXP 21
8550: PUSH
8551: LD_VAR 0 2
8555: ARRAY
8556: IFFALSE 8697
// for j := 1 to 8 do
8558: LD_ADDR_VAR 0 3
8562: PUSH
8563: DOUBLE
8564: LD_INT 1
8566: DEC
8567: ST_TO_ADDR
8568: LD_INT 8
8570: PUSH
8571: FOR_TO
8572: IFFALSE 8695
// if Side_Positions [ j ] and ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> j ) ) then
8574: LD_EXP 18
8578: PUSH
8579: LD_VAR 0 3
8583: ARRAY
8584: PUSH
8585: LD_EXP 15
8589: PUSH
8590: LD_EXP 21
8594: PUSH
8595: LD_VAR 0 2
8599: ARRAY
8600: ARRAY
8601: PUSH
8602: LD_EXP 15
8606: PUSH
8607: LD_VAR 0 3
8611: ARRAY
8612: NONEQUAL
8613: PUSH
8614: LD_EXP 20
8618: NOT
8619: PUSH
8620: LD_EXP 21
8624: PUSH
8625: LD_VAR 0 2
8629: ARRAY
8630: PUSH
8631: LD_VAR 0 3
8635: NONEQUAL
8636: AND
8637: OR
8638: AND
8639: IFFALSE 8663
// ShowArea ( j , BuildUpAreas [ i ] ) else
8641: LD_VAR 0 3
8645: PPUSH
8646: LD_EXP 38
8650: PUSH
8651: LD_VAR 0 2
8655: ARRAY
8656: PPUSH
8657: CALL_OW 334
8661: GO 8693
// if ( j = your_side ) then
8663: LD_VAR 0 3
8667: PUSH
8668: LD_OWVAR 2
8672: EQUAL
8673: IFFALSE 8693
// SetAreaMapShow ( BuildUpAreas [ i ] , 0 ) ;
8675: LD_EXP 38
8679: PUSH
8680: LD_VAR 0 2
8684: ARRAY
8685: PPUSH
8686: LD_INT 0
8688: PPUSH
8689: CALL_OW 424
8693: GO 8571
8695: POP
8696: POP
8697: GO 8543
8699: POP
8700: POP
// end ;
8701: LD_VAR 0 1
8705: RET
// every 5 marked 600 do var i , un ;
8706: GO 8708
8708: DISABLE
8709: LD_INT 0
8711: PPUSH
8712: PPUSH
// begin for i := 1 to BuildUpAreas do
8713: LD_ADDR_VAR 0 1
8717: PUSH
8718: DOUBLE
8719: LD_INT 1
8721: DEC
8722: ST_TO_ADDR
8723: LD_EXP 38
8727: PUSH
8728: FOR_TO
8729: IFFALSE 8884
// if Position_Sides [ i ] then
8731: LD_EXP 21
8735: PUSH
8736: LD_VAR 0 1
8740: ARRAY
8741: IFFALSE 8882
// for un in FilterUnitsInArea ( BuildUpAreas [ i ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
8743: LD_ADDR_VAR 0 2
8747: PUSH
8748: LD_EXP 38
8752: PUSH
8753: LD_VAR 0 1
8757: ARRAY
8758: PPUSH
8759: LD_INT 2
8761: PUSH
8762: LD_INT 21
8764: PUSH
8765: LD_INT 1
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: LD_INT 21
8774: PUSH
8775: LD_INT 2
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: LIST
8786: PUSH
8787: LD_INT 22
8789: PUSH
8790: LD_OWVAR 2
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PPUSH
8803: CALL_OW 70
8807: PUSH
8808: FOR_IN
8809: IFFALSE 8880
// if ( ( Side_Teams [ Position_Sides [ i ] ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( Position_Sides [ i ] <> Your_Side ) ) then
8811: LD_EXP 15
8815: PUSH
8816: LD_EXP 21
8820: PUSH
8821: LD_VAR 0 1
8825: ARRAY
8826: ARRAY
8827: PUSH
8828: LD_EXP 15
8832: PUSH
8833: LD_OWVAR 2
8837: ARRAY
8838: NONEQUAL
8839: PUSH
8840: LD_EXP 20
8844: NOT
8845: PUSH
8846: LD_EXP 21
8850: PUSH
8851: LD_VAR 0 1
8855: ARRAY
8856: PUSH
8857: LD_OWVAR 2
8861: NONEQUAL
8862: AND
8863: OR
8864: IFFALSE 8878
// ComMoveToArea ( un , BuildUpEscape ) ;
8866: LD_VAR 0 2
8870: PPUSH
8871: LD_INT 17
8873: PPUSH
8874: CALL_OW 113
8878: GO 8808
8880: POP
8881: POP
8882: GO 8728
8884: POP
8885: POP
// enable ;
8886: ENABLE
// end ;
8887: PPOPN 2
8889: END
// every 5 5$00 do
8890: GO 8892
8892: DISABLE
// if ( def_builduptime = 1 ) then
8893: LD_EXP 54
8897: PUSH
8898: LD_INT 1
8900: EQUAL
8901: IFFALSE 8907
// EndBuildUp ;
8903: CALL 8520 0 0
8907: END
// every 10 10$00 do
8908: GO 8910
8910: DISABLE
// if ( def_builduptime = 2 ) then
8911: LD_EXP 54
8915: PUSH
8916: LD_INT 2
8918: EQUAL
8919: IFFALSE 8925
// EndBuildUp ;
8921: CALL 8520 0 0
8925: END
// every 15 15$00 do
8926: GO 8928
8928: DISABLE
// if ( def_builduptime = 3 ) then
8929: LD_EXP 54
8933: PUSH
8934: LD_INT 3
8936: EQUAL
8937: IFFALSE 8943
// EndBuildUp ; end_of_file
8939: CALL 8520 0 0
8943: END
// export Game_Type , def_game_rules ; export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs ; var Restricted_Builds , Restricted_Builds_Amount ; var Banned_Weapons , Banned_Chassis , Banned_Controls , Banned_Engines ; var Already_Built ; var Limits_Info , Cheaters ; export function LimitsStrings ; var i ; begin
8944: LD_INT 0
8946: PPUSH
8947: PPUSH
// if ( not IAmSpec ) then
8948: CALL_OW 531
8952: NOT
8953: IFFALSE 8969
// Result := Limits_Info ^  ;
8955: LD_ADDR_VAR 0 1
8959: PUSH
8960: LD_LOC 23
8964: PUSH
8965: LD_STRING 
8967: ADD
8968: ST_TO_ADDR
// for i := 1 to 8 do
8969: LD_ADDR_VAR 0 2
8973: PUSH
8974: DOUBLE
8975: LD_INT 1
8977: DEC
8978: ST_TO_ADDR
8979: LD_INT 8
8981: PUSH
8982: FOR_TO
8983: IFFALSE 9028
// if Cheaters [ i ] then
8985: LD_LOC 24
8989: PUSH
8990: LD_VAR 0 2
8994: ARRAY
8995: IFFALSE 9026
// Result := Result ^ [ #Cheater , i , i ] ;
8997: LD_ADDR_VAR 0 1
9001: PUSH
9002: LD_VAR 0 1
9006: PUSH
9007: LD_STRING #Cheater
9009: PUSH
9010: LD_VAR 0 2
9014: PUSH
9015: LD_VAR 0 2
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: LIST
9024: ADD
9025: ST_TO_ADDR
9026: GO 8982
9028: POP
9029: POP
// end ;
9030: LD_VAR 0 1
9034: RET
// export function InitGameRules ; var Unavailable_Techs , Unavailable_Builds ; var i , j ; begin
9035: LD_INT 0
9037: PPUSH
9038: PPUSH
9039: PPUSH
9040: PPUSH
9041: PPUSH
// case Game_Type of 10 :
9042: LD_EXP 39
9046: PUSH
9047: LD_INT 10
9049: DOUBLE
9050: EQUAL
9051: IFTRUE 9055
9053: GO 9066
9055: POP
// def_game_rules := 1 ; 11 :
9056: LD_ADDR_EXP 40
9060: PUSH
9061: LD_INT 1
9063: ST_TO_ADDR
9064: GO 9086
9066: LD_INT 11
9068: DOUBLE
9069: EQUAL
9070: IFTRUE 9074
9072: GO 9085
9074: POP
// def_game_rules := 3 ; end ;
9075: LD_ADDR_EXP 40
9079: PUSH
9080: LD_INT 3
9082: ST_TO_ADDR
9083: GO 9086
9085: POP
// case def_game_rules of 0 :
9086: LD_EXP 40
9090: PUSH
9091: LD_INT 0
9093: DOUBLE
9094: EQUAL
9095: IFTRUE 9099
9097: GO 9104
9099: POP
// exit ; 1 :
9100: GO 11162
9102: GO 11062
9104: LD_INT 1
9106: DOUBLE
9107: EQUAL
9108: IFTRUE 9112
9110: GO 9328
9112: POP
// begin def_base_level := 2 ;
9113: LD_ADDR_EXP 41
9117: PUSH
9118: LD_INT 2
9120: ST_TO_ADDR
// def_amount_of_people := 2 ;
9121: LD_ADDR_EXP 42
9125: PUSH
9126: LD_INT 2
9128: ST_TO_ADDR
// def_skill_level := 1 ;
9129: LD_ADDR_EXP 43
9133: PUSH
9134: LD_INT 1
9136: ST_TO_ADDR
// def_starting_resources := 2 ;
9137: LD_ADDR_EXP 44
9141: PUSH
9142: LD_INT 2
9144: ST_TO_ADDR
// def_shipments_density := 1 ;
9145: LD_ADDR_EXP 45
9149: PUSH
9150: LD_INT 1
9152: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9153: LD_ADDR_EXP 46
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9161: LD_ADDR_EXP 47
9165: PUSH
9166: LD_INT 1
9168: ST_TO_ADDR
// def_shared_vision := 1 ;
9169: LD_ADDR_EXP 48
9173: PUSH
9174: LD_INT 1
9176: ST_TO_ADDR
// def_morale_flags := 3 ;
9177: LD_ADDR_EXP 49
9181: PUSH
9182: LD_INT 3
9184: ST_TO_ADDR
// def_siberite_detection := 1 ;
9185: LD_ADDR_EXP 50
9189: PUSH
9190: LD_INT 1
9192: ST_TO_ADDR
// def_people_respawning := 1 ;
9193: LD_ADDR_EXP 51
9197: PUSH
9198: LD_INT 1
9200: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
9201: LD_ADDR_EXP 52
9205: PUSH
9206: LD_INT 1
9208: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9209: LD_ADDR_EXP 53
9213: PUSH
9214: LD_INT 0
9216: ST_TO_ADDR
// def_builduptime := 2 ;
9217: LD_ADDR_EXP 54
9221: PUSH
9222: LD_INT 2
9224: ST_TO_ADDR
// Unavailable_Techs := [ ] ;
9225: LD_ADDR_VAR 0 2
9229: PUSH
9230: EMPTY
9231: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9232: LD_ADDR_VAR 0 3
9236: PUSH
9237: EMPTY
9238: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9239: LD_ADDR_LOC 18
9243: PUSH
9244: EMPTY
9245: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9246: LD_ADDR_LOC 19
9250: PUSH
9251: EMPTY
9252: ST_TO_ADDR
// Banned_Controls := [ ] ;
9253: LD_ADDR_LOC 20
9257: PUSH
9258: EMPTY
9259: ST_TO_ADDR
// Banned_Engines := [ ] ;
9260: LD_ADDR_LOC 21
9264: PUSH
9265: EMPTY
9266: ST_TO_ADDR
// Restricted_Builds := [ [ b_Behemoth ] , [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9267: LD_ADDR_LOC 16
9271: PUSH
9272: LD_INT 37
9274: PUSH
9275: EMPTY
9276: LIST
9277: PUSH
9278: LD_INT 4
9280: PUSH
9281: LD_INT 5
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 31
9290: PUSH
9291: LD_INT 32
9293: PUSH
9294: LD_INT 33
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: LIST
9306: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 2 , 4 ] ;
9307: LD_ADDR_LOC 17
9311: PUSH
9312: LD_INT 2
9314: PUSH
9315: LD_INT 2
9317: PUSH
9318: LD_INT 4
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: ST_TO_ADDR
// end ; 2 :
9326: GO 11062
9328: LD_INT 2
9330: DOUBLE
9331: EQUAL
9332: IFTRUE 9336
9334: GO 9545
9336: POP
// begin def_base_level := 1 ;
9337: LD_ADDR_EXP 41
9341: PUSH
9342: LD_INT 1
9344: ST_TO_ADDR
// def_amount_of_people := 2 ;
9345: LD_ADDR_EXP 42
9349: PUSH
9350: LD_INT 2
9352: ST_TO_ADDR
// def_skill_level := 3 ;
9353: LD_ADDR_EXP 43
9357: PUSH
9358: LD_INT 3
9360: ST_TO_ADDR
// def_starting_resources := 3 ;
9361: LD_ADDR_EXP 44
9365: PUSH
9366: LD_INT 3
9368: ST_TO_ADDR
// def_shipments_density := 2 ;
9369: LD_ADDR_EXP 45
9373: PUSH
9374: LD_INT 2
9376: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9377: LD_ADDR_EXP 46
9381: PUSH
9382: LD_INT 1
9384: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9385: LD_ADDR_EXP 47
9389: PUSH
9390: LD_INT 2
9392: ST_TO_ADDR
// def_shared_vision := 1 ;
9393: LD_ADDR_EXP 48
9397: PUSH
9398: LD_INT 1
9400: ST_TO_ADDR
// def_morale_flags := 0 ;
9401: LD_ADDR_EXP 49
9405: PUSH
9406: LD_INT 0
9408: ST_TO_ADDR
// def_siberite_detection := 1 ;
9409: LD_ADDR_EXP 50
9413: PUSH
9414: LD_INT 1
9416: ST_TO_ADDR
// def_people_respawning := 0 ;
9417: LD_ADDR_EXP 51
9421: PUSH
9422: LD_INT 0
9424: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9425: LD_ADDR_EXP 52
9429: PUSH
9430: LD_INT 0
9432: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9433: LD_ADDR_EXP 53
9437: PUSH
9438: LD_INT 0
9440: ST_TO_ADDR
// def_builduptime := 2 ;
9441: LD_ADDR_EXP 54
9445: PUSH
9446: LD_INT 2
9448: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9449: LD_ADDR_VAR 0 2
9453: PUSH
9454: LD_INT 1
9456: PUSH
9457: EMPTY
9458: LIST
9459: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9460: LD_ADDR_VAR 0 3
9464: PUSH
9465: EMPTY
9466: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9467: LD_ADDR_LOC 18
9471: PUSH
9472: EMPTY
9473: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9474: LD_ADDR_LOC 19
9478: PUSH
9479: EMPTY
9480: ST_TO_ADDR
// Banned_Controls := [ ] ;
9481: LD_ADDR_LOC 20
9485: PUSH
9486: EMPTY
9487: ST_TO_ADDR
// Banned_Engines := [ ] ;
9488: LD_ADDR_LOC 21
9492: PUSH
9493: EMPTY
9494: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury , b_Barracks ] , [ b_Breastwork , b_Bunker , b_Turret ] ] ;
9495: LD_ADDR_LOC 16
9499: PUSH
9500: LD_INT 4
9502: PUSH
9503: LD_INT 5
9505: PUSH
9506: EMPTY
9507: LIST
9508: LIST
9509: PUSH
9510: LD_INT 31
9512: PUSH
9513: LD_INT 32
9515: PUSH
9516: LD_INT 33
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: LIST
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 2 ] ;
9528: LD_ADDR_LOC 17
9532: PUSH
9533: LD_INT 1
9535: PUSH
9536: LD_INT 2
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: ST_TO_ADDR
// end ; 3 :
9543: GO 11062
9545: LD_INT 3
9547: DOUBLE
9548: EQUAL
9549: IFTRUE 9553
9551: GO 9796
9553: POP
// begin def_base_level := 1 ;
9554: LD_ADDR_EXP 41
9558: PUSH
9559: LD_INT 1
9561: ST_TO_ADDR
// def_amount_of_people := 2 ;
9562: LD_ADDR_EXP 42
9566: PUSH
9567: LD_INT 2
9569: ST_TO_ADDR
// def_skill_level := 3 ;
9570: LD_ADDR_EXP 43
9574: PUSH
9575: LD_INT 3
9577: ST_TO_ADDR
// def_starting_resources := 3 ;
9578: LD_ADDR_EXP 44
9582: PUSH
9583: LD_INT 3
9585: ST_TO_ADDR
// def_shipments_density := 1 ;
9586: LD_ADDR_EXP 45
9590: PUSH
9591: LD_INT 1
9593: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
9594: LD_ADDR_EXP 46
9598: PUSH
9599: LD_INT 0
9601: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
9602: LD_ADDR_EXP 47
9606: PUSH
9607: LD_INT 1
9609: ST_TO_ADDR
// def_shared_vision := 1 ;
9610: LD_ADDR_EXP 48
9614: PUSH
9615: LD_INT 1
9617: ST_TO_ADDR
// def_morale_flags := 0 ;
9618: LD_ADDR_EXP 49
9622: PUSH
9623: LD_INT 0
9625: ST_TO_ADDR
// def_siberite_detection := 1 ;
9626: LD_ADDR_EXP 50
9630: PUSH
9631: LD_INT 1
9633: ST_TO_ADDR
// def_people_respawning := 0 ;
9634: LD_ADDR_EXP 51
9638: PUSH
9639: LD_INT 0
9641: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
9642: LD_ADDR_EXP 52
9646: PUSH
9647: LD_INT 2
9649: ST_TO_ADDR
// def_siberite_bomb := 0 ;
9650: LD_ADDR_EXP 53
9654: PUSH
9655: LD_INT 0
9657: ST_TO_ADDR
// def_builduptime := 1 ;
9658: LD_ADDR_EXP 54
9662: PUSH
9663: LD_INT 1
9665: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
9666: LD_ADDR_VAR 0 2
9670: PUSH
9671: LD_INT 23
9673: PUSH
9674: EMPTY
9675: LIST
9676: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Bunker , b_Turret , b_Control_Tower , b_ext_track , b_ext_stitch , b_ext_siberium , b_ext_rocket , b_ext_radio , b_ext_radar , b_ext_noncombat , b_ext_laser , b_ext_gun , b_ext_computer ] ;
9677: LD_ADDR_VAR 0 3
9681: PUSH
9682: LD_INT 2
9684: PUSH
9685: LD_INT 37
9687: PUSH
9688: LD_INT 32
9690: PUSH
9691: LD_INT 33
9693: PUSH
9694: LD_INT 36
9696: PUSH
9697: LD_INT 16
9699: PUSH
9700: LD_INT 23
9702: PUSH
9703: LD_INT 21
9705: PUSH
9706: LD_INT 18
9708: PUSH
9709: LD_INT 22
9711: PUSH
9712: LD_INT 20
9714: PUSH
9715: LD_INT 19
9717: PUSH
9718: LD_INT 25
9720: PUSH
9721: LD_INT 17
9723: PUSH
9724: LD_INT 24
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9744: LD_ADDR_LOC 18
9748: PUSH
9749: EMPTY
9750: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9751: LD_ADDR_LOC 19
9755: PUSH
9756: EMPTY
9757: ST_TO_ADDR
// Banned_Controls := [ ] ;
9758: LD_ADDR_LOC 20
9762: PUSH
9763: EMPTY
9764: ST_TO_ADDR
// Banned_Engines := [ ] ;
9765: LD_ADDR_LOC 21
9769: PUSH
9770: EMPTY
9771: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9772: LD_ADDR_LOC 16
9776: PUSH
9777: EMPTY
9778: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9779: LD_ADDR_LOC 17
9783: PUSH
9784: EMPTY
9785: ST_TO_ADDR
// No_Mechs := true ;
9786: LD_ADDR_EXP 55
9790: PUSH
9791: LD_INT 1
9793: ST_TO_ADDR
// end ; 4 :
9794: GO 11062
9796: LD_INT 4
9798: DOUBLE
9799: EQUAL
9800: IFTRUE 9804
9802: GO 9979
9804: POP
// begin def_base_level := 1 ;
9805: LD_ADDR_EXP 41
9809: PUSH
9810: LD_INT 1
9812: ST_TO_ADDR
// def_amount_of_people := 2 ;
9813: LD_ADDR_EXP 42
9817: PUSH
9818: LD_INT 2
9820: ST_TO_ADDR
// def_skill_level := 3 ;
9821: LD_ADDR_EXP 43
9825: PUSH
9826: LD_INT 3
9828: ST_TO_ADDR
// def_starting_resources := 3 ;
9829: LD_ADDR_EXP 44
9833: PUSH
9834: LD_INT 3
9836: ST_TO_ADDR
// def_shipments_density := 2 ;
9837: LD_ADDR_EXP 45
9841: PUSH
9842: LD_INT 2
9844: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
9845: LD_ADDR_EXP 46
9849: PUSH
9850: LD_INT 1
9852: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
9853: LD_ADDR_EXP 47
9857: PUSH
9858: LD_INT 2
9860: ST_TO_ADDR
// def_shared_vision := 1 ;
9861: LD_ADDR_EXP 48
9865: PUSH
9866: LD_INT 1
9868: ST_TO_ADDR
// def_morale_flags := 0 ;
9869: LD_ADDR_EXP 49
9873: PUSH
9874: LD_INT 0
9876: ST_TO_ADDR
// def_siberite_detection := 1 ;
9877: LD_ADDR_EXP 50
9881: PUSH
9882: LD_INT 1
9884: ST_TO_ADDR
// def_people_respawning := 0 ;
9885: LD_ADDR_EXP 51
9889: PUSH
9890: LD_INT 0
9892: ST_TO_ADDR
// def_amount_of_apemen := 0 ;
9893: LD_ADDR_EXP 52
9897: PUSH
9898: LD_INT 0
9900: ST_TO_ADDR
// def_siberite_bomb := 1 ;
9901: LD_ADDR_EXP 53
9905: PUSH
9906: LD_INT 1
9908: ST_TO_ADDR
// def_builduptime := 3 ;
9909: LD_ADDR_EXP 54
9913: PUSH
9914: LD_INT 3
9916: ST_TO_ADDR
// Unavailable_Techs := [ tech_ApeLang ] ;
9917: LD_ADDR_VAR 0 2
9921: PUSH
9922: LD_INT 1
9924: PUSH
9925: EMPTY
9926: LIST
9927: ST_TO_ADDR
// Unavailable_Builds := [ ] ;
9928: LD_ADDR_VAR 0 3
9932: PUSH
9933: EMPTY
9934: ST_TO_ADDR
// Banned_Weapons := [ ] ;
9935: LD_ADDR_LOC 18
9939: PUSH
9940: EMPTY
9941: ST_TO_ADDR
// Banned_Chassis := [ ] ;
9942: LD_ADDR_LOC 19
9946: PUSH
9947: EMPTY
9948: ST_TO_ADDR
// Banned_Controls := [ ] ;
9949: LD_ADDR_LOC 20
9953: PUSH
9954: EMPTY
9955: ST_TO_ADDR
// Banned_Engines := [ ] ;
9956: LD_ADDR_LOC 21
9960: PUSH
9961: EMPTY
9962: ST_TO_ADDR
// Restricted_Builds := [ ] ;
9963: LD_ADDR_LOC 16
9967: PUSH
9968: EMPTY
9969: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
9970: LD_ADDR_LOC 17
9974: PUSH
9975: EMPTY
9976: ST_TO_ADDR
// end ; 5 :
9977: GO 11062
9979: LD_INT 5
9981: DOUBLE
9982: EQUAL
9983: IFTRUE 9987
9985: GO 10236
9987: POP
// begin def_base_level := 0 ;
9988: LD_ADDR_EXP 41
9992: PUSH
9993: LD_INT 0
9995: ST_TO_ADDR
// def_amount_of_people := 0 ;
9996: LD_ADDR_EXP 42
10000: PUSH
10001: LD_INT 0
10003: ST_TO_ADDR
// def_skill_level := 0 ;
10004: LD_ADDR_EXP 43
10008: PUSH
10009: LD_INT 0
10011: ST_TO_ADDR
// def_starting_resources := 0 ;
10012: LD_ADDR_EXP 44
10016: PUSH
10017: LD_INT 0
10019: ST_TO_ADDR
// def_shipments_density := 0 ;
10020: LD_ADDR_EXP 45
10024: PUSH
10025: LD_INT 0
10027: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10028: LD_ADDR_EXP 46
10032: PUSH
10033: LD_INT 0
10035: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10036: LD_ADDR_EXP 47
10040: PUSH
10041: LD_INT 0
10043: ST_TO_ADDR
// def_shared_vision := 1 ;
10044: LD_ADDR_EXP 48
10048: PUSH
10049: LD_INT 1
10051: ST_TO_ADDR
// def_morale_flags := 0 ;
10052: LD_ADDR_EXP 49
10056: PUSH
10057: LD_INT 0
10059: ST_TO_ADDR
// def_siberite_detection := 0 ;
10060: LD_ADDR_EXP 50
10064: PUSH
10065: LD_INT 0
10067: ST_TO_ADDR
// def_people_respawning := 1 ;
10068: LD_ADDR_EXP 51
10072: PUSH
10073: LD_INT 1
10075: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10076: LD_ADDR_EXP 52
10080: PUSH
10081: LD_INT 1
10083: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10084: LD_ADDR_EXP 53
10088: PUSH
10089: LD_INT 0
10091: ST_TO_ADDR
// def_builduptime := 0 ;
10092: LD_ADDR_EXP 54
10096: PUSH
10097: LD_INT 0
10099: ST_TO_ADDR
// Unavailable_Techs := [ tech_Laser , tech_ApeNeural ] ;
10100: LD_ADDR_VAR 0 2
10104: PUSH
10105: LD_INT 10
10107: PUSH
10108: LD_INT 3
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: ST_TO_ADDR
// Unavailable_Builds := [ b_Lab_Computer , b_Lab_Siberium , b_Lab_Spacetime , b_Lab_Biological , b_Barracks , b_ext_Computer , b_ext_Siberium , b_Turret , b_Control_Tower ] ;
10115: LD_ADDR_VAR 0 3
10119: PUSH
10120: LD_INT 12
10122: PUSH
10123: LD_INT 11
10125: PUSH
10126: LD_INT 14
10128: PUSH
10129: LD_INT 13
10131: PUSH
10132: LD_INT 5
10134: PUSH
10135: LD_INT 24
10137: PUSH
10138: LD_INT 21
10140: PUSH
10141: LD_INT 33
10143: PUSH
10144: LD_INT 36
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: ST_TO_ADDR
// Banned_Weapons := [ ar_Control_Tower ] ;
10158: LD_ADDR_LOC 18
10162: PUSH
10163: LD_INT 31
10165: PUSH
10166: EMPTY
10167: LIST
10168: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10169: LD_ADDR_LOC 19
10173: PUSH
10174: EMPTY
10175: ST_TO_ADDR
// Banned_Controls := [ control_Remote ] ;
10176: LD_ADDR_LOC 20
10180: PUSH
10181: LD_INT 2
10183: PUSH
10184: EMPTY
10185: LIST
10186: ST_TO_ADDR
// Banned_Engines := [ ] ;
10187: LD_ADDR_LOC 21
10191: PUSH
10192: EMPTY
10193: ST_TO_ADDR
// Restricted_Builds := [ [ b_Armoury ] , [ b_Breastwork , b_Bunker ] ] ;
10194: LD_ADDR_LOC 16
10198: PUSH
10199: LD_INT 4
10201: PUSH
10202: EMPTY
10203: LIST
10204: PUSH
10205: LD_INT 31
10207: PUSH
10208: LD_INT 32
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: ST_TO_ADDR
// Restricted_Builds_Amount := [ 1 , 1 ] ;
10219: LD_ADDR_LOC 17
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: LD_INT 1
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: ST_TO_ADDR
// end ; 6 :
10234: GO 11062
10236: LD_INT 6
10238: DOUBLE
10239: EQUAL
10240: IFTRUE 10244
10242: GO 10447
10244: POP
// begin def_base_level := 1 ;
10245: LD_ADDR_EXP 41
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// def_amount_of_people := 2 ;
10253: LD_ADDR_EXP 42
10257: PUSH
10258: LD_INT 2
10260: ST_TO_ADDR
// def_skill_level := 3 ;
10261: LD_ADDR_EXP 43
10265: PUSH
10266: LD_INT 3
10268: ST_TO_ADDR
// def_starting_resources := 3 ;
10269: LD_ADDR_EXP 44
10273: PUSH
10274: LD_INT 3
10276: ST_TO_ADDR
// def_shipments_density := 1 ;
10277: LD_ADDR_EXP 45
10281: PUSH
10282: LD_INT 1
10284: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10285: LD_ADDR_EXP 46
10289: PUSH
10290: LD_INT 0
10292: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
10293: LD_ADDR_EXP 47
10297: PUSH
10298: LD_INT 1
10300: ST_TO_ADDR
// def_shared_vision := 1 ;
10301: LD_ADDR_EXP 48
10305: PUSH
10306: LD_INT 1
10308: ST_TO_ADDR
// def_morale_flags := 0 ;
10309: LD_ADDR_EXP 49
10313: PUSH
10314: LD_INT 0
10316: ST_TO_ADDR
// def_siberite_detection := 1 ;
10317: LD_ADDR_EXP 50
10321: PUSH
10322: LD_INT 1
10324: ST_TO_ADDR
// def_people_respawning := 2 ;
10325: LD_ADDR_EXP 51
10329: PUSH
10330: LD_INT 2
10332: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10333: LD_ADDR_EXP 52
10337: PUSH
10338: LD_INT 1
10340: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10341: LD_ADDR_EXP 53
10345: PUSH
10346: LD_INT 0
10348: ST_TO_ADDR
// def_builduptime := 1 ;
10349: LD_ADDR_EXP 54
10353: PUSH
10354: LD_INT 1
10356: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10357: LD_ADDR_VAR 0 2
10361: PUSH
10362: LD_INT 23
10364: PUSH
10365: EMPTY
10366: LIST
10367: ST_TO_ADDR
// Unavailable_Builds := [ b_Workshop , b_Behemoth , b_Breastwork , b_Bunker , b_Turret ] ;
10368: LD_ADDR_VAR 0 3
10372: PUSH
10373: LD_INT 2
10375: PUSH
10376: LD_INT 37
10378: PUSH
10379: LD_INT 31
10381: PUSH
10382: LD_INT 32
10384: PUSH
10385: LD_INT 33
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10395: LD_ADDR_LOC 18
10399: PUSH
10400: EMPTY
10401: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10402: LD_ADDR_LOC 19
10406: PUSH
10407: EMPTY
10408: ST_TO_ADDR
// Banned_Controls := [ ] ;
10409: LD_ADDR_LOC 20
10413: PUSH
10414: EMPTY
10415: ST_TO_ADDR
// Banned_Engines := [ ] ;
10416: LD_ADDR_LOC 21
10420: PUSH
10421: EMPTY
10422: ST_TO_ADDR
// Restricted_Builds := [ ] ;
10423: LD_ADDR_LOC 16
10427: PUSH
10428: EMPTY
10429: ST_TO_ADDR
// Restricted_Builds_Amount := [ ] ;
10430: LD_ADDR_LOC 17
10434: PUSH
10435: EMPTY
10436: ST_TO_ADDR
// No_Mechs := true ;
10437: LD_ADDR_EXP 55
10441: PUSH
10442: LD_INT 1
10444: ST_TO_ADDR
// end ; 7 :
10445: GO 11062
10447: LD_INT 7
10449: DOUBLE
10450: EQUAL
10451: IFTRUE 10455
10453: GO 10653
10455: POP
// begin def_base_level := 1 ;
10456: LD_ADDR_EXP 41
10460: PUSH
10461: LD_INT 1
10463: ST_TO_ADDR
// def_amount_of_people := 2 ;
10464: LD_ADDR_EXP 42
10468: PUSH
10469: LD_INT 2
10471: ST_TO_ADDR
// def_skill_level := 3 ;
10472: LD_ADDR_EXP 43
10476: PUSH
10477: LD_INT 3
10479: ST_TO_ADDR
// def_starting_resources := 3 ;
10480: LD_ADDR_EXP 44
10484: PUSH
10485: LD_INT 3
10487: ST_TO_ADDR
// def_shipments_density := 1 ;
10488: LD_ADDR_EXP 45
10492: PUSH
10493: LD_INT 1
10495: ST_TO_ADDR
// def_extra_oil_deposits := 1 ;
10496: LD_ADDR_EXP 46
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
// def_extra_sib_deposits := 2 ;
10504: LD_ADDR_EXP 47
10508: PUSH
10509: LD_INT 2
10511: ST_TO_ADDR
// def_shared_vision := 1 ;
10512: LD_ADDR_EXP 48
10516: PUSH
10517: LD_INT 1
10519: ST_TO_ADDR
// def_morale_flags := 0 ;
10520: LD_ADDR_EXP 49
10524: PUSH
10525: LD_INT 0
10527: ST_TO_ADDR
// def_siberite_detection := 1 ;
10528: LD_ADDR_EXP 50
10532: PUSH
10533: LD_INT 1
10535: ST_TO_ADDR
// def_people_respawning := 0 ;
10536: LD_ADDR_EXP 51
10540: PUSH
10541: LD_INT 0
10543: ST_TO_ADDR
// def_amount_of_apemen := 1 ;
10544: LD_ADDR_EXP 52
10548: PUSH
10549: LD_INT 1
10551: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10552: LD_ADDR_EXP 53
10556: PUSH
10557: LD_INT 0
10559: ST_TO_ADDR
// def_builduptime := 3 ;
10560: LD_ADDR_EXP 54
10564: PUSH
10565: LD_INT 3
10567: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth ] ;
10568: LD_ADDR_VAR 0 2
10572: PUSH
10573: LD_INT 23
10575: PUSH
10576: EMPTY
10577: LIST
10578: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth ] ;
10579: LD_ADDR_VAR 0 3
10583: PUSH
10584: LD_INT 37
10586: PUSH
10587: EMPTY
10588: LIST
10589: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10590: LD_ADDR_LOC 18
10594: PUSH
10595: EMPTY
10596: ST_TO_ADDR
// Banned_Chassis := [ ] ;
10597: LD_ADDR_LOC 19
10601: PUSH
10602: EMPTY
10603: ST_TO_ADDR
// Banned_Controls := [ ] ;
10604: LD_ADDR_LOC 20
10608: PUSH
10609: EMPTY
10610: ST_TO_ADDR
// Banned_Engines := [ ] ;
10611: LD_ADDR_LOC 21
10615: PUSH
10616: EMPTY
10617: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker , b_Turret ] ] ;
10618: LD_ADDR_LOC 16
10622: PUSH
10623: LD_INT 31
10625: PUSH
10626: LD_INT 32
10628: PUSH
10629: LD_INT 33
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: PUSH
10637: EMPTY
10638: LIST
10639: ST_TO_ADDR
// Restricted_Builds_Amount := [ 10 ] ;
10640: LD_ADDR_LOC 17
10644: PUSH
10645: LD_INT 10
10647: PUSH
10648: EMPTY
10649: LIST
10650: ST_TO_ADDR
// end ; 8 :
10651: GO 11062
10653: LD_INT 8
10655: DOUBLE
10656: EQUAL
10657: IFTRUE 10661
10659: GO 11061
10661: POP
// begin def_base_level := 0 ;
10662: LD_ADDR_EXP 41
10666: PUSH
10667: LD_INT 0
10669: ST_TO_ADDR
// def_amount_of_people := Rand ( 0 , 1 ) ;
10670: LD_ADDR_EXP 42
10674: PUSH
10675: LD_INT 0
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: CALL_OW 12
10685: ST_TO_ADDR
// def_skill_level := 0 ;
10686: LD_ADDR_EXP 43
10690: PUSH
10691: LD_INT 0
10693: ST_TO_ADDR
// def_starting_resources := 2 ;
10694: LD_ADDR_EXP 44
10698: PUSH
10699: LD_INT 2
10701: ST_TO_ADDR
// def_shipments_density := 1 ;
10702: LD_ADDR_EXP 45
10706: PUSH
10707: LD_INT 1
10709: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
10710: LD_ADDR_EXP 46
10714: PUSH
10715: LD_INT 0
10717: ST_TO_ADDR
// def_extra_sib_deposits := 0 ;
10718: LD_ADDR_EXP 47
10722: PUSH
10723: LD_INT 0
10725: ST_TO_ADDR
// def_shared_vision := 1 ;
10726: LD_ADDR_EXP 48
10730: PUSH
10731: LD_INT 1
10733: ST_TO_ADDR
// def_morale_flags := Rand ( 0 , 2 ) ;
10734: LD_ADDR_EXP 49
10738: PUSH
10739: LD_INT 0
10741: PPUSH
10742: LD_INT 2
10744: PPUSH
10745: CALL_OW 12
10749: ST_TO_ADDR
// def_siberite_detection := 0 ;
10750: LD_ADDR_EXP 50
10754: PUSH
10755: LD_INT 0
10757: ST_TO_ADDR
// def_people_respawning := 0 ;
10758: LD_ADDR_EXP 51
10762: PUSH
10763: LD_INT 0
10765: ST_TO_ADDR
// def_amount_of_apemen := 2 ;
10766: LD_ADDR_EXP 52
10770: PUSH
10771: LD_INT 2
10773: ST_TO_ADDR
// def_siberite_bomb := 0 ;
10774: LD_ADDR_EXP 53
10778: PUSH
10779: LD_INT 0
10781: ST_TO_ADDR
// def_builduptime := 0 ;
10782: LD_ADDR_EXP 54
10786: PUSH
10787: LD_INT 0
10789: ST_TO_ADDR
// Unavailable_Techs := [ tech_Behemoth , tech_SibDet , tech_Rocket , tech_OilEng , tech_OilPow , tech_Gun , tech_AdvRocket , tech_AdvMet , tech_Mortar , tech_Bazooka , tech_HidCam , tech_PartInvis ] ;
10790: LD_ADDR_VAR 0 2
10794: PUSH
10795: LD_INT 23
10797: PUSH
10798: LD_INT 20
10800: PUSH
10801: LD_INT 40
10803: PUSH
10804: LD_INT 47
10806: PUSH
10807: LD_INT 46
10809: PUSH
10810: LD_INT 39
10812: PUSH
10813: LD_INT 71
10815: PUSH
10816: LD_INT 34
10818: PUSH
10819: LD_INT 41
10821: PUSH
10822: LD_INT 44
10824: PUSH
10825: LD_INT 17
10827: PUSH
10828: LD_INT 16
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: ST_TO_ADDR
// Unavailable_Builds := [ b_Behemoth , b_Barracks , b_Lab_Biological , b_Teleport , b_Lab_Computer , b_Lab_Opto , b_Lab_Siberium , b_Lab_Spacetime , b_Oil_Mine , b_Siberite_Mine , b_Siberite_Power , b_Ext_Computer , b_Ext_Laser , b_Ext_Radar , b_Ext_Siberium , b_Ext_Radio , b_Control_Tower ] ;
10845: LD_ADDR_VAR 0 3
10849: PUSH
10850: LD_INT 37
10852: PUSH
10853: LD_INT 5
10855: PUSH
10856: LD_INT 13
10858: PUSH
10859: LD_INT 34
10861: PUSH
10862: LD_INT 12
10864: PUSH
10865: LD_INT 15
10867: PUSH
10868: LD_INT 11
10870: PUSH
10871: LD_INT 14
10873: PUSH
10874: LD_INT 29
10876: PUSH
10877: LD_INT 30
10879: PUSH
10880: LD_INT 28
10882: PUSH
10883: LD_INT 24
10885: PUSH
10886: LD_INT 25
10888: PUSH
10889: LD_INT 20
10891: PUSH
10892: LD_INT 21
10894: PUSH
10895: LD_INT 22
10897: PUSH
10898: LD_INT 36
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: ST_TO_ADDR
// Banned_Weapons := [ ] ;
10920: LD_ADDR_LOC 18
10924: PUSH
10925: EMPTY
10926: ST_TO_ADDR
// Banned_Chassis := [ ar_half_tracked ] ;
10927: LD_ADDR_LOC 19
10931: PUSH
10932: LD_INT 14
10934: PUSH
10935: EMPTY
10936: LIST
10937: ST_TO_ADDR
// Banned_Controls := [ ] ;
10938: LD_ADDR_LOC 20
10942: PUSH
10943: EMPTY
10944: ST_TO_ADDR
// Banned_Engines := [ ] ;
10945: LD_ADDR_LOC 21
10949: PUSH
10950: EMPTY
10951: ST_TO_ADDR
// Restricted_Builds := [ [ b_Breastwork , b_Bunker ] , [ b_Armoury ] ] ;
10952: LD_ADDR_LOC 16
10956: PUSH
10957: LD_INT 31
10959: PUSH
10960: LD_INT 32
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 4
10969: PUSH
10970: EMPTY
10971: LIST
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: ST_TO_ADDR
// Restricted_Builds_Amount := [ 2 , 1 ] ;
10977: LD_ADDR_LOC 17
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: LD_INT 1
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: ST_TO_ADDR
// for i := 1 to 8 do
10992: LD_ADDR_VAR 0 4
10996: PUSH
10997: DOUBLE
10998: LD_INT 1
11000: DEC
11001: ST_TO_ADDR
11002: LD_INT 8
11004: PUSH
11005: FOR_TO
11006: IFFALSE 11057
// if ( Side_Nations [ i ] = 3 ) then
11008: LD_EXP 19
11012: PUSH
11013: LD_VAR 0 4
11017: ARRAY
11018: PUSH
11019: LD_INT 3
11021: EQUAL
11022: IFFALSE 11055
// Side_Nations := Replace ( Side_Nations , i , Rand ( 1 , 2 ) ) ;
11024: LD_ADDR_EXP 19
11028: PUSH
11029: LD_EXP 19
11033: PPUSH
11034: LD_VAR 0 4
11038: PPUSH
11039: LD_INT 1
11041: PPUSH
11042: LD_INT 2
11044: PPUSH
11045: CALL_OW 12
11049: PPUSH
11050: CALL_OW 1
11054: ST_TO_ADDR
11055: GO 11005
11057: POP
11058: POP
// end ; end ;
11059: GO 11062
11061: POP
// for i := 1 to 8 do
11062: LD_ADDR_VAR 0 4
11066: PUSH
11067: DOUBLE
11068: LD_INT 1
11070: DEC
11071: ST_TO_ADDR
11072: LD_INT 8
11074: PUSH
11075: FOR_TO
11076: IFFALSE 11160
// if Side_Positions [ i ] then
11078: LD_EXP 18
11082: PUSH
11083: LD_VAR 0 4
11087: ARRAY
11088: IFFALSE 11158
// begin for j in Unavailable_Techs do
11090: LD_ADDR_VAR 0 5
11094: PUSH
11095: LD_VAR 0 2
11099: PUSH
11100: FOR_IN
11101: IFFALSE 11122
// SetTech ( j , i , 0 ) ;
11103: LD_VAR 0 5
11107: PPUSH
11108: LD_VAR 0 4
11112: PPUSH
11113: LD_INT 0
11115: PPUSH
11116: CALL_OW 322
11120: GO 11100
11122: POP
11123: POP
// for j in Unavailable_Builds do
11124: LD_ADDR_VAR 0 5
11128: PUSH
11129: LD_VAR 0 3
11133: PUSH
11134: FOR_IN
11135: IFFALSE 11156
// SetRestrict ( j , i , 0 ) ;
11137: LD_VAR 0 5
11141: PPUSH
11142: LD_VAR 0 4
11146: PPUSH
11147: LD_INT 0
11149: PPUSH
11150: CALL_OW 324
11154: GO 11134
11156: POP
11157: POP
// end ;
11158: GO 11075
11160: POP
11161: POP
// end ;
11162: LD_VAR 0 1
11166: RET
// export function InitLimits ; var i , j , k , amount , btype , list ; begin
11167: LD_INT 0
11169: PPUSH
11170: PPUSH
11171: PPUSH
11172: PPUSH
11173: PPUSH
11174: PPUSH
11175: PPUSH
// for i := 1 to Restricted_Builds do
11176: LD_ADDR_VAR 0 2
11180: PUSH
11181: DOUBLE
11182: LD_INT 1
11184: DEC
11185: ST_TO_ADDR
11186: LD_LOC 16
11190: PUSH
11191: FOR_TO
11192: IFFALSE 11502
// begin case Restricted_Builds [ i ] [ 1 ] of b_Breastwork , b_Bunker , b_Turret :
11194: LD_LOC 16
11198: PUSH
11199: LD_VAR 0 2
11203: ARRAY
11204: PUSH
11205: LD_INT 1
11207: ARRAY
11208: PUSH
11209: LD_INT 31
11211: DOUBLE
11212: EQUAL
11213: IFTRUE 11229
11215: LD_INT 32
11217: DOUBLE
11218: EQUAL
11219: IFTRUE 11229
11221: LD_INT 33
11223: DOUBLE
11224: EQUAL
11225: IFTRUE 11229
11227: GO 11240
11229: POP
// btype := #Turrets ; b_Armoury , b_Barracks :
11230: LD_ADDR_VAR 0 6
11234: PUSH
11235: LD_STRING #Turrets
11237: ST_TO_ADDR
11238: GO 11285
11240: LD_INT 4
11242: DOUBLE
11243: EQUAL
11244: IFTRUE 11254
11246: LD_INT 5
11248: DOUBLE
11249: EQUAL
11250: IFTRUE 11254
11252: GO 11265
11254: POP
// btype := #Armouries ; b_Behemoth :
11255: LD_ADDR_VAR 0 6
11259: PUSH
11260: LD_STRING #Armouries
11262: ST_TO_ADDR
11263: GO 11285
11265: LD_INT 37
11267: DOUBLE
11268: EQUAL
11269: IFTRUE 11273
11271: GO 11284
11273: POP
// btype := #Behemoths ; end ;
11274: LD_ADDR_VAR 0 6
11278: PUSH
11279: LD_STRING #Behemoths
11281: ST_TO_ADDR
11282: GO 11285
11284: POP
// list := [ ] ;
11285: LD_ADDR_VAR 0 7
11289: PUSH
11290: EMPTY
11291: ST_TO_ADDR
// for j := 1 to 8 do
11292: LD_ADDR_VAR 0 3
11296: PUSH
11297: DOUBLE
11298: LD_INT 1
11300: DEC
11301: ST_TO_ADDR
11302: LD_INT 8
11304: PUSH
11305: FOR_TO
11306: IFFALSE 11399
// if Side_Positions [ j ] then
11308: LD_EXP 18
11312: PUSH
11313: LD_VAR 0 3
11317: ARRAY
11318: IFFALSE 11397
// begin amount := 0 ;
11320: LD_ADDR_VAR 0 5
11324: PUSH
11325: LD_INT 0
11327: ST_TO_ADDR
// for k in Restricted_Builds [ i ] do
11328: LD_ADDR_VAR 0 4
11332: PUSH
11333: LD_LOC 16
11337: PUSH
11338: LD_VAR 0 2
11342: ARRAY
11343: PUSH
11344: FOR_IN
11345: IFFALSE 11393
// amount := amount + FilterAllUnits ( [ [ f_side , j ] , [ f_btype , k ] ] ) ;
11347: LD_ADDR_VAR 0 5
11351: PUSH
11352: LD_VAR 0 5
11356: PUSH
11357: LD_INT 22
11359: PUSH
11360: LD_VAR 0 3
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 30
11371: PUSH
11372: LD_VAR 0 4
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PPUSH
11385: CALL_OW 69
11389: PLUS
11390: ST_TO_ADDR
11391: GO 11344
11393: POP
11394: POP
// break ;
11395: GO 11399
// end ;
11397: GO 11305
11399: POP
11400: POP
// list := [ ] ;
11401: LD_ADDR_VAR 0 7
11405: PUSH
11406: EMPTY
11407: ST_TO_ADDR
// for j := 1 to 8 do
11408: LD_ADDR_VAR 0 3
11412: PUSH
11413: DOUBLE
11414: LD_INT 1
11416: DEC
11417: ST_TO_ADDR
11418: LD_INT 8
11420: PUSH
11421: FOR_TO
11422: IFFALSE 11442
// list := list ^ amount ;
11424: LD_ADDR_VAR 0 7
11428: PUSH
11429: LD_VAR 0 7
11433: PUSH
11434: LD_VAR 0 5
11438: ADD
11439: ST_TO_ADDR
11440: GO 11421
11442: POP
11443: POP
// Already_Built := Already_Built ^ [ list ] ;
11444: LD_ADDR_LOC 22
11448: PUSH
11449: LD_LOC 22
11453: PUSH
11454: LD_VAR 0 7
11458: PUSH
11459: EMPTY
11460: LIST
11461: ADD
11462: ST_TO_ADDR
// Limits_Info := Limits_Info ^ [ btype , amount , Restricted_Builds_Amount [ i ] ] ;
11463: LD_ADDR_LOC 23
11467: PUSH
11468: LD_LOC 23
11472: PUSH
11473: LD_VAR 0 6
11477: PUSH
11478: LD_VAR 0 5
11482: PUSH
11483: LD_LOC 17
11487: PUSH
11488: LD_VAR 0 2
11492: ARRAY
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: LIST
11498: ADD
11499: ST_TO_ADDR
// end ;
11500: GO 11191
11502: POP
11503: POP
// Cheaters := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
11504: LD_ADDR_LOC 24
11508: PUSH
11509: LD_INT 0
11511: PUSH
11512: LD_INT 0
11514: PUSH
11515: LD_INT 0
11517: PUSH
11518: LD_INT 0
11520: PUSH
11521: LD_INT 0
11523: PUSH
11524: LD_INT 0
11526: PUSH
11527: LD_INT 0
11529: PUSH
11530: LD_INT 0
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: ST_TO_ADDR
// if Limits_Info then
11543: LD_LOC 23
11547: IFFALSE 11563
// Limits_Info := #Limits ^ Limits_Info ;
11549: LD_ADDR_LOC 23
11553: PUSH
11554: LD_STRING #Limits
11556: PUSH
11557: LD_LOC 23
11561: ADD
11562: ST_TO_ADDR
// end ;
11563: LD_VAR 0 1
11567: RET
// export function ExecuteLimits ( un , BType , side , old_side , count ) ; var i , j , Is_Cheater ; begin
11568: LD_INT 0
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
// for i := 1 to Restricted_Builds do
11574: LD_ADDR_VAR 0 7
11578: PUSH
11579: DOUBLE
11580: LD_INT 1
11582: DEC
11583: ST_TO_ADDR
11584: LD_LOC 16
11588: PUSH
11589: FOR_TO
11590: IFFALSE 12013
// if BType in Restricted_Builds [ i ] then
11592: LD_VAR 0 2
11596: PUSH
11597: LD_LOC 16
11601: PUSH
11602: LD_VAR 0 7
11606: ARRAY
11607: IN
11608: IFFALSE 12011
// begin if old_side then
11610: LD_VAR 0 4
11614: IFFALSE 11740
// if Already_Built [ i ] [ side ] + count > Restricted_Builds_Amount [ i ] then
11616: LD_LOC 22
11620: PUSH
11621: LD_VAR 0 7
11625: ARRAY
11626: PUSH
11627: LD_VAR 0 3
11631: ARRAY
11632: PUSH
11633: LD_VAR 0 5
11637: PLUS
11638: PUSH
11639: LD_LOC 17
11643: PUSH
11644: LD_VAR 0 7
11648: ARRAY
11649: GREATER
11650: IFFALSE 11676
// begin SetSide ( un , old_side ) ;
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_VAR 0 4
11661: PPUSH
11662: CALL_OW 235
// count := 0 ;
11666: LD_ADDR_VAR 0 5
11670: PUSH
11671: LD_INT 0
11673: ST_TO_ADDR
// end else
11674: GO 11740
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , old_side , Already_Built [ i ] [ old_side ] - count ) ) ;
11676: LD_ADDR_LOC 22
11680: PUSH
11681: LD_LOC 22
11685: PPUSH
11686: LD_VAR 0 7
11690: PPUSH
11691: LD_LOC 22
11695: PUSH
11696: LD_VAR 0 7
11700: ARRAY
11701: PPUSH
11702: LD_VAR 0 4
11706: PPUSH
11707: LD_LOC 22
11711: PUSH
11712: LD_VAR 0 7
11716: ARRAY
11717: PUSH
11718: LD_VAR 0 4
11722: ARRAY
11723: PUSH
11724: LD_VAR 0 5
11728: MINUS
11729: PPUSH
11730: CALL_OW 1
11734: PPUSH
11735: CALL_OW 1
11739: ST_TO_ADDR
// Already_Built := Replace ( Already_Built , i , Replace ( Already_Built [ i ] , side , Already_Built [ i ] [ side ] + count ) ) ;
11740: LD_ADDR_LOC 22
11744: PUSH
11745: LD_LOC 22
11749: PPUSH
11750: LD_VAR 0 7
11754: PPUSH
11755: LD_LOC 22
11759: PUSH
11760: LD_VAR 0 7
11764: ARRAY
11765: PPUSH
11766: LD_VAR 0 3
11770: PPUSH
11771: LD_LOC 22
11775: PUSH
11776: LD_VAR 0 7
11780: ARRAY
11781: PUSH
11782: LD_VAR 0 3
11786: ARRAY
11787: PUSH
11788: LD_VAR 0 5
11792: PLUS
11793: PPUSH
11794: CALL_OW 1
11798: PPUSH
11799: CALL_OW 1
11803: ST_TO_ADDR
// if count <> 0 and ( side = your_side ) then
11804: LD_VAR 0 5
11808: PUSH
11809: LD_INT 0
11811: NONEQUAL
11812: PUSH
11813: LD_VAR 0 3
11817: PUSH
11818: LD_OWVAR 2
11822: EQUAL
11823: AND
11824: IFFALSE 11867
// Limits_Info := Replace ( Limits_Info , 3 * i , Already_Built [ i ] [ side ] ) ;
11826: LD_ADDR_LOC 23
11830: PUSH
11831: LD_LOC 23
11835: PPUSH
11836: LD_INT 3
11838: PUSH
11839: LD_VAR 0 7
11843: MUL
11844: PPUSH
11845: LD_LOC 22
11849: PUSH
11850: LD_VAR 0 7
11854: ARRAY
11855: PUSH
11856: LD_VAR 0 3
11860: ARRAY
11861: PPUSH
11862: CALL_OW 1
11866: ST_TO_ADDR
// if Already_Built [ i ] [ side ] > Restricted_Builds_Amount [ i ] then
11867: LD_LOC 22
11871: PUSH
11872: LD_VAR 0 7
11876: ARRAY
11877: PUSH
11878: LD_VAR 0 3
11882: ARRAY
11883: PUSH
11884: LD_LOC 17
11888: PUSH
11889: LD_VAR 0 7
11893: ARRAY
11894: GREATER
11895: IFFALSE 11922
// begin Cheaters := Replace ( Cheaters , side , 1 ) ;
11897: LD_ADDR_LOC 24
11901: PUSH
11902: LD_LOC 24
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: LD_INT 1
11914: PPUSH
11915: CALL_OW 1
11919: ST_TO_ADDR
// end else
11920: GO 12009
// begin for j := 1 to Restricted_Builds do
11922: LD_ADDR_VAR 0 8
11926: PUSH
11927: DOUBLE
11928: LD_INT 1
11930: DEC
11931: ST_TO_ADDR
11932: LD_LOC 16
11936: PUSH
11937: FOR_TO
11938: IFFALSE 11982
// if Already_Built [ j ] [ side ] > Restricted_Builds_Amount [ j ] then
11940: LD_LOC 22
11944: PUSH
11945: LD_VAR 0 8
11949: ARRAY
11950: PUSH
11951: LD_VAR 0 3
11955: ARRAY
11956: PUSH
11957: LD_LOC 17
11961: PUSH
11962: LD_VAR 0 8
11966: ARRAY
11967: GREATER
11968: IFFALSE 11980
// begin Is_Cheater := true ;
11970: LD_ADDR_VAR 0 9
11974: PUSH
11975: LD_INT 1
11977: ST_TO_ADDR
// break ;
11978: GO 11982
// end ;
11980: GO 11937
11982: POP
11983: POP
// Cheaters := Replace ( Cheaters , side , Is_Cheater ) ;
11984: LD_ADDR_LOC 24
11988: PUSH
11989: LD_LOC 24
11993: PPUSH
11994: LD_VAR 0 3
11998: PPUSH
11999: LD_VAR 0 9
12003: PPUSH
12004: CALL_OW 1
12008: ST_TO_ADDR
// end ; break ;
12009: GO 12013
// end ;
12011: GO 11589
12013: POP
12014: POP
// end ;
12015: LD_VAR 0 6
12019: RET
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do begin if ( weapon in Banned_Weapons ) or ( chassis in Banned_Chassis ) or ( control in Banned_Controls ) or ( engine in Banned_Engines ) then
12020: LD_VAR 0 5
12024: PUSH
12025: LD_LOC 18
12029: IN
12030: PUSH
12031: LD_VAR 0 2
12035: PUSH
12036: LD_LOC 19
12040: IN
12041: OR
12042: PUSH
12043: LD_VAR 0 4
12047: PUSH
12048: LD_LOC 20
12052: IN
12053: OR
12054: PUSH
12055: LD_VAR 0 3
12059: PUSH
12060: LD_LOC 21
12064: IN
12065: OR
12066: IFFALSE 12077
// ComCancel ( factory ) ;
12068: LD_VAR 0 1
12072: PPUSH
12073: CALL_OW 127
// end ;
12077: PPOPN 5
12079: END
// on WeaponPlaced ( building , weapon ) do begin if ( weapon in Banned_Weapons ) then
12080: LD_VAR 0 2
12084: PUSH
12085: LD_LOC 18
12089: IN
12090: IFFALSE 12101
// ComCancel ( building ) ;
12092: LD_VAR 0 1
12096: PPUSH
12097: CALL_OW 127
// end ; end_of_file
12101: PPOPN 2
12103: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
12104: LD_INT 0
12106: PPUSH
12107: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
12108: LD_ADDR_VAR 0 2
12112: PUSH
12113: LD_STRING #Multi1x1-Time
12115: PUSH
12116: LD_OWVAR 1
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: ST_TO_ADDR
// if WaitServerStrings then
12125: LD_EXP 57
12129: IFFALSE 12147
// AllStrings = AllStrings ^ WaitServerStrings ;
12131: LD_ADDR_VAR 0 2
12135: PUSH
12136: LD_VAR 0 2
12140: PUSH
12141: LD_EXP 57
12145: ADD
12146: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
12147: LD_INT 0
12149: PUSH
12150: LD_EXP 13
12154: PUSH
12155: LD_OWVAR 1
12159: MINUS
12160: LESSEQUAL
12161: IFFALSE 12192
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
12163: LD_ADDR_VAR 0 2
12167: PUSH
12168: LD_VAR 0 2
12172: PUSH
12173: LD_STRING #allowedsibbomb
12175: PUSH
12176: LD_EXP 13
12180: PUSH
12181: LD_OWVAR 1
12185: MINUS
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: ADD
12191: ST_TO_ADDR
// if ( ExtraStrings ) then
12192: LD_EXP 56
12196: IFFALSE 12218
// AllStrings := AllStrings ^  ^ ExtraStrings ;
12198: LD_ADDR_VAR 0 2
12202: PUSH
12203: LD_VAR 0 2
12207: PUSH
12208: LD_STRING 
12210: ADD
12211: PUSH
12212: LD_EXP 56
12216: ADD
12217: ST_TO_ADDR
// if ( LimitsStrings ) then
12218: CALL 8944 0 0
12222: IFFALSE 12244
// AllStrings := AllStrings ^  ^ LimitsStrings ;
12224: LD_ADDR_VAR 0 2
12228: PUSH
12229: LD_VAR 0 2
12233: PUSH
12234: LD_STRING 
12236: ADD
12237: PUSH
12238: CALL 8944 0 0
12242: ADD
12243: ST_TO_ADDR
// Display_Strings := AllStrings ;
12244: LD_ADDR_OWVAR 47
12248: PUSH
12249: LD_VAR 0 2
12253: ST_TO_ADDR
// end ;
12254: LD_VAR 0 1
12258: RET
// every 0 0$1 do
12259: GO 12261
12261: DISABLE
// begin ShowTimer ;
12262: CALL 12104 0 0
// enable ;
12266: ENABLE
// end ; end_of_file
12267: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
12268: LD_INT 0
12270: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
12271: LD_VAR 0 1
12275: PPUSH
12276: CALL_OW 255
12280: PUSH
12281: LD_VAR 0 4
12285: EQUAL
12286: IFFALSE 12305
// begin SetAchievement ( ACH_RAD ) ;
12288: LD_STRING ACH_RAD
12290: PPUSH
12291: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
12295: LD_STRING ACH_NL
12297: PPUSH
12298: LD_INT 1
12300: PPUSH
12301: CALL_OW 564
// end end ;
12305: LD_VAR 0 5
12309: RET
// export function SA_Win ( side ) ; begin
12310: LD_INT 0
12312: PPUSH
// case side of 1 :
12313: LD_VAR 0 1
12317: PUSH
12318: LD_INT 1
12320: DOUBLE
12321: EQUAL
12322: IFTRUE 12326
12324: GO 12339
12326: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
12327: LD_STRING ACH_AH
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL_OW 564
12337: GO 12502
12339: LD_INT 2
12341: DOUBLE
12342: EQUAL
12343: IFTRUE 12347
12345: GO 12360
12347: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
12348: LD_STRING ACH_E
12350: PPUSH
12351: LD_INT 1
12353: PPUSH
12354: CALL_OW 564
12358: GO 12502
12360: LD_INT 3
12362: DOUBLE
12363: EQUAL
12364: IFTRUE 12368
12366: GO 12381
12368: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
12369: LD_STRING ACH_OOL
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: CALL_OW 564
12379: GO 12502
12381: LD_INT 1
12383: PUSH
12384: LD_INT 2
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: DOUBLE
12391: EQUAL
12392: IFTRUE 12396
12394: GO 12421
12396: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12397: LD_STRING ACH_AH
12399: PPUSH
12400: LD_REAL  5.00000000000000E-0001
12403: PPUSH
12404: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12408: LD_STRING ACH_E
12410: PPUSH
12411: LD_REAL  5.00000000000000E-0001
12414: PPUSH
12415: CALL_OW 564
// end ; [ 2 , 3 ] :
12419: GO 12502
12421: LD_INT 2
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: DOUBLE
12431: EQUAL
12432: IFTRUE 12436
12434: GO 12461
12436: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
12437: LD_STRING ACH_OOL
12439: PPUSH
12440: LD_REAL  5.00000000000000E-0001
12443: PPUSH
12444: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
12448: LD_STRING ACH_E
12450: PPUSH
12451: LD_REAL  5.00000000000000E-0001
12454: PPUSH
12455: CALL_OW 564
// end ; [ 3 , 1 ] :
12459: GO 12502
12461: LD_INT 3
12463: PUSH
12464: LD_INT 1
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: DOUBLE
12471: EQUAL
12472: IFTRUE 12476
12474: GO 12501
12476: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
12477: LD_STRING ACH_AH
12479: PPUSH
12480: LD_REAL  5.00000000000000E-0001
12483: PPUSH
12484: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
12488: LD_STRING ACH_OOL
12490: PPUSH
12491: LD_REAL  5.00000000000000E-0001
12494: PPUSH
12495: CALL_OW 564
// end ; end ;
12499: GO 12502
12501: POP
// end ; end_of_file
12502: LD_VAR 0 2
12506: RET
// var defaited , GameEnded , unfoged ; export function Init_Win_Condition ; var i ; begin
12507: LD_INT 0
12509: PPUSH
12510: PPUSH
// enable ( 98 ) ;
12511: LD_INT 98
12513: ENABLE_MARKED
// GameEnded = false ;
12514: LD_ADDR_LOC 26
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// defaited = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
12522: LD_ADDR_LOC 25
12526: PUSH
12527: LD_INT 0
12529: PUSH
12530: LD_INT 0
12532: PUSH
12533: LD_INT 0
12535: PUSH
12536: LD_INT 0
12538: PUSH
12539: LD_INT 0
12541: PUSH
12542: LD_INT 0
12544: PUSH
12545: LD_INT 0
12547: PUSH
12548: LD_INT 0
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: ST_TO_ADDR
// unfoged = false ;
12561: LD_ADDR_LOC 27
12565: PUSH
12566: LD_INT 0
12568: ST_TO_ADDR
// for i = 1 to side_positions do
12569: LD_ADDR_VAR 0 2
12573: PUSH
12574: DOUBLE
12575: LD_INT 1
12577: DEC
12578: ST_TO_ADDR
12579: LD_EXP 18
12583: PUSH
12584: FOR_TO
12585: IFFALSE 12625
// if not side_positions [ i ] then
12587: LD_EXP 18
12591: PUSH
12592: LD_VAR 0 2
12596: ARRAY
12597: NOT
12598: IFFALSE 12623
// defaited = replace ( defaited , i , true ) ;
12600: LD_ADDR_LOC 25
12604: PUSH
12605: LD_LOC 25
12609: PPUSH
12610: LD_VAR 0 2
12614: PPUSH
12615: LD_INT 1
12617: PPUSH
12618: CALL_OW 1
12622: ST_TO_ADDR
12623: GO 12584
12625: POP
12626: POP
// end ;
12627: LD_VAR 0 1
12631: RET
// function CanWinLoose ; begin
12632: LD_INT 0
12634: PPUSH
// Result := true ;
12635: LD_ADDR_VAR 0 1
12639: PUSH
12640: LD_INT 1
12642: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
12643: CALL_OW 518
12647: PUSH
12648: CALL_OW 519
12652: PUSH
12653: LD_INT 0
12655: GREATER
12656: AND
12657: IFFALSE 12667
// Result := false ;
12659: LD_ADDR_VAR 0 1
12663: PUSH
12664: LD_INT 0
12666: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12667: CALL_OW 531
12671: PUSH
12672: CALL_OW 519
12676: PUSH
12677: LD_INT 1
12679: GREATER
12680: AND
12681: IFFALSE 12691
// Result := false ;
12683: LD_ADDR_VAR 0 1
12687: PUSH
12688: LD_INT 0
12690: ST_TO_ADDR
// end ;
12691: LD_VAR 0 1
12695: RET
// export function HasPower ( i ) ; var k , h ; begin
12696: LD_INT 0
12698: PPUSH
12699: PPUSH
12700: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
12701: LD_VAR 0 1
12705: PPUSH
12706: CALL_OW 108
12710: NOT
12711: PUSH
12712: LD_EXP 17
12716: PUSH
12717: LD_VAR 0 1
12721: ARRAY
12722: NOT
12723: AND
12724: PUSH
12725: LD_OWVAR 4
12729: AND
12730: IFFALSE 12742
// begin result = false ;
12732: LD_ADDR_VAR 0 2
12736: PUSH
12737: LD_INT 0
12739: ST_TO_ADDR
// end else
12740: GO 13037
// case def_win_rules of 0 :
12742: LD_EXP 14
12746: PUSH
12747: LD_INT 0
12749: DOUBLE
12750: EQUAL
12751: IFTRUE 12755
12753: GO 12918
12755: POP
// if def_people_respawning then
12756: LD_EXP 51
12760: IFFALSE 12851
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
12762: LD_ADDR_VAR 0 2
12766: PUSH
12767: LD_INT 22
12769: PUSH
12770: LD_VAR 0 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 2
12781: PUSH
12782: LD_INT 21
12784: PUSH
12785: LD_INT 1
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: PUSH
12792: LD_INT 33
12794: PUSH
12795: LD_INT 3
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 33
12804: PUSH
12805: LD_INT 5
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 30
12814: PUSH
12815: LD_INT 0
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 30
12824: PUSH
12825: LD_INT 1
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PPUSH
12844: CALL_OW 69
12848: ST_TO_ADDR
12849: GO 12916
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
12851: LD_ADDR_VAR 0 2
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_VAR 0 1
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: LD_INT 2
12870: PUSH
12871: LD_INT 21
12873: PUSH
12874: LD_INT 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 33
12883: PUSH
12884: LD_INT 3
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 33
12893: PUSH
12894: LD_INT 5
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PPUSH
12911: CALL_OW 69
12915: ST_TO_ADDR
12916: GO 13037
12918: LD_INT 1
12920: DOUBLE
12921: EQUAL
12922: IFTRUE 12926
12924: GO 12965
12926: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
12927: LD_ADDR_VAR 0 2
12931: PUSH
12932: LD_INT 22
12934: PUSH
12935: LD_VAR 0 1
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 21
12946: PUSH
12947: LD_INT 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PPUSH
12958: CALL_OW 69
12962: ST_TO_ADDR
12963: GO 13037
12965: LD_INT 2
12967: DOUBLE
12968: EQUAL
12969: IFTRUE 12973
12971: GO 13036
12973: POP
// begin h = false ;
12974: LD_ADDR_VAR 0 4
12978: PUSH
12979: LD_INT 0
12981: ST_TO_ADDR
// for k in heroes [ i ] do
12982: LD_ADDR_VAR 0 3
12986: PUSH
12987: LD_EXP 30
12991: PUSH
12992: LD_VAR 0 1
12996: ARRAY
12997: PUSH
12998: FOR_IN
12999: IFFALSE 13022
// if IsLive ( k ) then
13001: LD_VAR 0 3
13005: PPUSH
13006: CALL_OW 300
13010: IFFALSE 13020
// h = true ;
13012: LD_ADDR_VAR 0 4
13016: PUSH
13017: LD_INT 1
13019: ST_TO_ADDR
13020: GO 12998
13022: POP
13023: POP
// Result := h ;
13024: LD_ADDR_VAR 0 2
13028: PUSH
13029: LD_VAR 0 4
13033: ST_TO_ADDR
// end ; end ;
13034: GO 13037
13036: POP
// end ;
13037: LD_VAR 0 2
13041: RET
// function AlliedSides ( i , j ) ; begin
13042: LD_INT 0
13044: PPUSH
// Result := false ;
13045: LD_ADDR_VAR 0 3
13049: PUSH
13050: LD_INT 0
13052: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
13053: LD_VAR 0 1
13057: PPUSH
13058: LD_VAR 0 2
13062: PPUSH
13063: CALL_OW 81
13067: PUSH
13068: LD_INT 1
13070: EQUAL
13071: PUSH
13072: LD_VAR 0 2
13076: PPUSH
13077: LD_VAR 0 1
13081: PPUSH
13082: CALL_OW 81
13086: PUSH
13087: LD_INT 1
13089: EQUAL
13090: AND
13091: PUSH
13092: LD_VAR 0 1
13096: PPUSH
13097: CALL_OW 83
13101: AND
13102: PUSH
13103: LD_VAR 0 2
13107: PPUSH
13108: CALL_OW 83
13112: AND
13113: IFFALSE 13123
// Result := true ;
13115: LD_ADDR_VAR 0 3
13119: PUSH
13120: LD_INT 1
13122: ST_TO_ADDR
// end ;
13123: LD_VAR 0 3
13127: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
13128: CALL 12632 0 0
13132: PUSH
13133: LD_LOC 26
13137: NOT
13138: AND
13139: IFFALSE 13155
13141: GO 13143
13143: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
13144: LD_ADDR_EXP 57
13148: PUSH
13149: LD_STRING #Player-Ended
13151: PUSH
13152: EMPTY
13153: LIST
13154: ST_TO_ADDR
13155: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
13156: CALL 12632 0 0
13160: PUSH
13161: LD_LOC 26
13165: AND
13166: IFFALSE 13175
13168: GO 13170
13170: DISABLE
// YouLostInMultiplayer ;
13171: CALL_OW 107
13175: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
13176: CALL 12632 0 0
13180: NOT
13181: PUSH
13182: CALL_OW 531
13186: NOT
13187: AND
13188: IFFALSE 13204
13190: GO 13192
13192: DISABLE
// WaitServerStrings = [ #server-wait ] ;
13193: LD_ADDR_EXP 57
13197: PUSH
13198: LD_STRING #server-wait
13200: PUSH
13201: EMPTY
13202: LIST
13203: ST_TO_ADDR
13204: END
// every 100 trigger IAmSpec do
13205: CALL_OW 531
13209: IFFALSE 13225
13211: GO 13213
13213: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
13214: LD_ADDR_EXP 57
13218: PUSH
13219: LD_STRING #Player-IAmSpec
13221: PUSH
13222: EMPTY
13223: LIST
13224: ST_TO_ADDR
13225: END
// every 100 trigger GameEnded and IAmSpec do
13226: LD_LOC 26
13230: PUSH
13231: CALL_OW 531
13235: AND
13236: IFFALSE 13245
13238: GO 13240
13240: DISABLE
// YouLostInMultiplayer ;
13241: CALL_OW 107
13245: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
13246: CALL 12632 0 0
13250: PUSH
13251: LD_LOC 26
13255: NOT
13256: AND
13257: IFFALSE 13273
13259: GO 13261
13261: DISABLE
// WaitServerStrings = [ $player-win ] ;
13262: LD_ADDR_EXP 57
13266: PUSH
13267: LD_STRING $player-win
13269: PUSH
13270: EMPTY
13271: LIST
13272: ST_TO_ADDR
13273: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
13274: CALL 12632 0 0
13278: PUSH
13279: LD_LOC 26
13283: AND
13284: IFFALSE 13308
13286: GO 13288
13288: DISABLE
// begin SA_Win ( Side_Nations [ Your_side ] ) ;
13289: LD_EXP 19
13293: PUSH
13294: LD_OWVAR 2
13298: ARRAY
13299: PPUSH
13300: CALL 12310 0 1
// YouWinInMultiplayer ;
13304: CALL_OW 106
// end ;
13308: END
// every 100 trigger isEditor marked 401 do
13309: LD_OWVAR 84
13313: IFFALSE 13329
13315: GO 13317
13317: DISABLE
// Debug_Strings = [ You won ] ;
13318: LD_ADDR_OWVAR 48
13322: PUSH
13323: LD_STRING You won
13325: PUSH
13326: EMPTY
13327: LIST
13328: ST_TO_ADDR
13329: END
// every 100 trigger isEditor marked 400 do
13330: LD_OWVAR 84
13334: IFFALSE 13350
13336: GO 13338
13338: DISABLE
// Debug_Strings = [ You loss ] ;
13339: LD_ADDR_OWVAR 48
13343: PUSH
13344: LD_STRING You loss
13346: PUSH
13347: EMPTY
13348: LIST
13349: ST_TO_ADDR
13350: END
// every 100 marked 98 do var i , un ;
13351: GO 13353
13353: DISABLE
13354: LD_INT 0
13356: PPUSH
13357: PPUSH
// begin for i = 1 to side_positions do
13358: LD_ADDR_VAR 0 1
13362: PUSH
13363: DOUBLE
13364: LD_INT 1
13366: DEC
13367: ST_TO_ADDR
13368: LD_EXP 18
13372: PUSH
13373: FOR_TO
13374: IFFALSE 13497
// if side_positions [ i ] then
13376: LD_EXP 18
13380: PUSH
13381: LD_VAR 0 1
13385: ARRAY
13386: IFFALSE 13495
// if not HasPower ( i ) and not Defaited [ i ] then
13388: LD_VAR 0 1
13392: PPUSH
13393: CALL 12696 0 1
13397: NOT
13398: PUSH
13399: LD_LOC 25
13403: PUSH
13404: LD_VAR 0 1
13408: ARRAY
13409: NOT
13410: AND
13411: IFFALSE 13495
// begin un = filterallunits ( [ f_side , i ] ) ;
13413: LD_ADDR_VAR 0 2
13417: PUSH
13418: LD_INT 22
13420: PUSH
13421: LD_VAR 0 1
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PPUSH
13430: CALL_OW 69
13434: ST_TO_ADDR
// if un then
13435: LD_VAR 0 2
13439: IFFALSE 13453
// SetSide ( un , 0 ) ;
13441: LD_VAR 0 2
13445: PPUSH
13446: LD_INT 0
13448: PPUSH
13449: CALL_OW 235
// Defaited = replace ( Defaited , i , true ) ;
13453: LD_ADDR_LOC 25
13457: PUSH
13458: LD_LOC 25
13462: PPUSH
13463: LD_VAR 0 1
13467: PPUSH
13468: LD_INT 1
13470: PPUSH
13471: CALL_OW 1
13475: ST_TO_ADDR
// if i = your_side then
13476: LD_VAR 0 1
13480: PUSH
13481: LD_OWVAR 2
13485: EQUAL
13486: IFFALSE 13495
// begin Multiplayer_Loose_Message ;
13488: CALL_OW 521
// enable ( 400 ) ;
13492: LD_INT 400
13494: ENABLE_MARKED
// end ; end ;
13495: GO 13373
13497: POP
13498: POP
// if not Unfoged and defaited [ your_side ] then
13499: LD_LOC 27
13503: NOT
13504: PUSH
13505: LD_LOC 25
13509: PUSH
13510: LD_OWVAR 2
13514: ARRAY
13515: AND
13516: IFFALSE 13522
// Unfog ;
13518: CALL 13708 0 0
// DidGameEnd ;
13522: CALL 13537 0 0
// if not GameEnded then
13526: LD_LOC 26
13530: NOT
13531: IFFALSE 13534
// enable ;
13533: ENABLE
// end ;
13534: PPOPN 2
13536: END
// function DidGameEnd ; var i , k , enemy ; begin
13537: LD_INT 0
13539: PPUSH
13540: PPUSH
13541: PPUSH
13542: PPUSH
// enemy = [ ] ;
13543: LD_ADDR_VAR 0 4
13547: PUSH
13548: EMPTY
13549: ST_TO_ADDR
// for i = 1 to side_positions do
13550: LD_ADDR_VAR 0 2
13554: PUSH
13555: DOUBLE
13556: LD_INT 1
13558: DEC
13559: ST_TO_ADDR
13560: LD_EXP 18
13564: PUSH
13565: FOR_TO
13566: IFFALSE 13670
// if not defaited [ i ] then
13568: LD_LOC 25
13572: PUSH
13573: LD_VAR 0 2
13577: ARRAY
13578: NOT
13579: IFFALSE 13668
// for k = 1 to side_positions do
13581: LD_ADDR_VAR 0 3
13585: PUSH
13586: DOUBLE
13587: LD_INT 1
13589: DEC
13590: ST_TO_ADDR
13591: LD_EXP 18
13595: PUSH
13596: FOR_TO
13597: IFFALSE 13666
// if not defaited [ k ] then
13599: LD_LOC 25
13603: PUSH
13604: LD_VAR 0 3
13608: ARRAY
13609: NOT
13610: IFFALSE 13664
// if GetAttitude ( i , k ) in [ att_enemy , att_neutral ] then
13612: LD_VAR 0 2
13616: PPUSH
13617: LD_VAR 0 3
13621: PPUSH
13622: CALL_OW 81
13626: PUSH
13627: LD_INT 2
13629: PUSH
13630: LD_INT 0
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: IN
13637: IFFALSE 13664
// enemy = enemy ^ [ i , k ] ;
13639: LD_ADDR_VAR 0 4
13643: PUSH
13644: LD_VAR 0 4
13648: PUSH
13649: LD_VAR 0 2
13653: PUSH
13654: LD_VAR 0 3
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: ADD
13663: ST_TO_ADDR
13664: GO 13596
13666: POP
13667: POP
13668: GO 13565
13670: POP
13671: POP
// if not enemy then
13672: LD_VAR 0 4
13676: NOT
13677: IFFALSE 13703
// begin GameEnded = true ;
13679: LD_ADDR_LOC 26
13683: PUSH
13684: LD_INT 1
13686: ST_TO_ADDR
// if not defaited [ your_side ] then
13687: LD_LOC 25
13691: PUSH
13692: LD_OWVAR 2
13696: ARRAY
13697: NOT
13698: IFFALSE 13703
// enable ( 401 ) ;
13700: LD_INT 401
13702: ENABLE_MARKED
// end ; end ;
13703: LD_VAR 0 1
13707: RET
// function unfog ; var k , friends ; begin
13708: LD_INT 0
13710: PPUSH
13711: PPUSH
13712: PPUSH
// for k = 1 to side_positions do
13713: LD_ADDR_VAR 0 2
13717: PUSH
13718: DOUBLE
13719: LD_INT 1
13721: DEC
13722: ST_TO_ADDR
13723: LD_EXP 18
13727: PUSH
13728: FOR_TO
13729: IFFALSE 13785
// if not defaited [ k ] then
13731: LD_LOC 25
13735: PUSH
13736: LD_VAR 0 2
13740: ARRAY
13741: NOT
13742: IFFALSE 13783
// if GetAttitude ( your_side , k ) in [ att_friend ] then
13744: LD_OWVAR 2
13748: PPUSH
13749: LD_VAR 0 2
13753: PPUSH
13754: CALL_OW 81
13758: PUSH
13759: LD_INT 1
13761: PUSH
13762: EMPTY
13763: LIST
13764: IN
13765: IFFALSE 13783
// friends = friends ^ k ;
13767: LD_ADDR_VAR 0 3
13771: PUSH
13772: LD_VAR 0 3
13776: PUSH
13777: LD_VAR 0 2
13781: ADD
13782: ST_TO_ADDR
13783: GO 13728
13785: POP
13786: POP
// if not friends then
13787: LD_VAR 0 3
13791: NOT
13792: IFFALSE 13809
// begin fogoff ( true ) ;
13794: LD_INT 1
13796: PPUSH
13797: CALL_OW 344
// unfoged = true ;
13801: LD_ADDR_LOC 27
13805: PUSH
13806: LD_INT 1
13808: ST_TO_ADDR
// end ; end ;
13809: LD_VAR 0 1
13813: RET
// export function MakeGameEnd ; begin
13814: LD_INT 0
13816: PPUSH
// fogoff ( true ) ;
13817: LD_INT 1
13819: PPUSH
13820: CALL_OW 344
// unfoged = true ;
13824: LD_ADDR_LOC 27
13828: PUSH
13829: LD_INT 1
13831: ST_TO_ADDR
// wait ( 0 0$5 ) ;
13832: LD_INT 175
13834: PPUSH
13835: CALL_OW 67
// GameEnded = true ;
13839: LD_ADDR_LOC 26
13843: PUSH
13844: LD_INT 1
13846: ST_TO_ADDR
// end ;
13847: LD_VAR 0 1
13851: RET
// export function GetGameEnded ; begin
13852: LD_INT 0
13854: PPUSH
// result = GameEnded ;
13855: LD_ADDR_VAR 0 1
13859: PUSH
13860: LD_LOC 26
13864: ST_TO_ADDR
// end ; end_of_file
13865: LD_VAR 0 1
13869: RET
// export function SetMpTechs ( ) ; var side , i ; begin
13870: LD_INT 0
13872: PPUSH
13873: PPUSH
13874: PPUSH
// for side = 1 to 8 do
13875: LD_ADDR_VAR 0 2
13879: PUSH
13880: DOUBLE
13881: LD_INT 1
13883: DEC
13884: ST_TO_ADDR
13885: LD_INT 8
13887: PUSH
13888: FOR_TO
13889: IFFALSE 14010
// begin for i = 1 to 72 do
13891: LD_ADDR_VAR 0 3
13895: PUSH
13896: DOUBLE
13897: LD_INT 1
13899: DEC
13900: ST_TO_ADDR
13901: LD_INT 72
13903: PUSH
13904: FOR_TO
13905: IFFALSE 13936
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
13907: LD_VAR 0 3
13911: PPUSH
13912: LD_VAR 0 2
13916: PPUSH
13917: LD_INT 0
13919: PPUSH
13920: LD_VAR 0 3
13924: PPUSH
13925: CALL_OW 565
13929: PPUSH
13930: CALL_OW 322
13934: GO 13904
13936: POP
13937: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
13938: LD_INT 73
13940: PPUSH
13941: LD_VAR 0 2
13945: PPUSH
13946: LD_INT 0
13948: PPUSH
13949: LD_INT 25
13951: PPUSH
13952: CALL_OW 565
13956: PPUSH
13957: CALL_OW 322
// for i = 0 to 40 do
13961: LD_ADDR_VAR 0 3
13965: PUSH
13966: DOUBLE
13967: LD_INT 0
13969: DEC
13970: ST_TO_ADDR
13971: LD_INT 40
13973: PUSH
13974: FOR_TO
13975: IFFALSE 14006
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
13977: LD_VAR 0 3
13981: PPUSH
13982: LD_VAR 0 2
13986: PPUSH
13987: LD_INT 1
13989: PPUSH
13990: LD_VAR 0 3
13994: PPUSH
13995: CALL_OW 565
13999: PPUSH
14000: CALL_OW 324
14004: GO 13974
14006: POP
14007: POP
// end ;
14008: GO 13888
14010: POP
14011: POP
// end ;
14012: LD_VAR 0 1
14016: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
14017: LD_INT 0
14019: PPUSH
14020: PPUSH
14021: PPUSH
// for side = 1 to 8 do
14022: LD_ADDR_VAR 0 3
14026: PUSH
14027: DOUBLE
14028: LD_INT 1
14030: DEC
14031: ST_TO_ADDR
14032: LD_INT 8
14034: PUSH
14035: FOR_TO
14036: IFFALSE 18032
// begin for i = 1 to 73 do
14038: LD_ADDR_VAR 0 4
14042: PUSH
14043: DOUBLE
14044: LD_INT 1
14046: DEC
14047: ST_TO_ADDR
14048: LD_INT 73
14050: PUSH
14051: FOR_TO
14052: IFFALSE 14073
// SetTech ( i , side , state_disabled ) ;
14054: LD_VAR 0 4
14058: PPUSH
14059: LD_VAR 0 3
14063: PPUSH
14064: LD_INT 0
14066: PPUSH
14067: CALL_OW 322
14071: GO 14051
14073: POP
14074: POP
// for i = 0 to 40 do
14075: LD_ADDR_VAR 0 4
14079: PUSH
14080: DOUBLE
14081: LD_INT 0
14083: DEC
14084: ST_TO_ADDR
14085: LD_INT 40
14087: PUSH
14088: FOR_TO
14089: IFFALSE 14110
// SetRestrict ( i , side , false ) ;
14091: LD_VAR 0 4
14095: PPUSH
14096: LD_VAR 0 3
14100: PPUSH
14101: LD_INT 0
14103: PPUSH
14104: CALL_OW 324
14108: GO 14088
14110: POP
14111: POP
// case level of 1 :
14112: LD_VAR 0 1
14116: PUSH
14117: LD_INT 1
14119: DOUBLE
14120: EQUAL
14121: IFTRUE 14125
14123: GO 14278
14125: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14126: LD_INT 35
14128: PPUSH
14129: LD_VAR 0 3
14133: PPUSH
14134: LD_INT 1
14136: PPUSH
14137: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14141: LD_INT 45
14143: PPUSH
14144: LD_VAR 0 3
14148: PPUSH
14149: LD_INT 1
14151: PPUSH
14152: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14156: LD_INT 46
14158: PPUSH
14159: LD_VAR 0 3
14163: PPUSH
14164: LD_INT 1
14166: PPUSH
14167: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14171: LD_INT 47
14173: PPUSH
14174: LD_VAR 0 3
14178: PPUSH
14179: LD_INT 1
14181: PPUSH
14182: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14186: LD_INT 0
14188: PPUSH
14189: LD_VAR 0 3
14193: PPUSH
14194: LD_INT 1
14196: PPUSH
14197: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14201: LD_INT 2
14203: PPUSH
14204: LD_VAR 0 3
14208: PPUSH
14209: LD_INT 1
14211: PPUSH
14212: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14216: LD_INT 4
14218: PPUSH
14219: LD_VAR 0 3
14223: PPUSH
14224: LD_INT 1
14226: PPUSH
14227: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14231: LD_INT 6
14233: PPUSH
14234: LD_VAR 0 3
14238: PPUSH
14239: LD_INT 1
14241: PPUSH
14242: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14246: LD_INT 29
14248: PPUSH
14249: LD_VAR 0 3
14253: PPUSH
14254: LD_INT 1
14256: PPUSH
14257: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14261: LD_INT 31
14263: PPUSH
14264: LD_VAR 0 3
14268: PPUSH
14269: LD_INT 1
14271: PPUSH
14272: CALL_OW 324
// end ; 2 :
14276: GO 18030
14278: LD_INT 2
14280: DOUBLE
14281: EQUAL
14282: IFTRUE 14286
14284: GO 14484
14286: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14287: LD_INT 35
14289: PPUSH
14290: LD_VAR 0 3
14294: PPUSH
14295: LD_INT 1
14297: PPUSH
14298: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14302: LD_INT 45
14304: PPUSH
14305: LD_VAR 0 3
14309: PPUSH
14310: LD_INT 1
14312: PPUSH
14313: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14317: LD_INT 46
14319: PPUSH
14320: LD_VAR 0 3
14324: PPUSH
14325: LD_INT 1
14327: PPUSH
14328: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14332: LD_INT 47
14334: PPUSH
14335: LD_VAR 0 3
14339: PPUSH
14340: LD_INT 1
14342: PPUSH
14343: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14347: LD_INT 1
14349: PPUSH
14350: LD_VAR 0 3
14354: PPUSH
14355: LD_INT 1
14357: PPUSH
14358: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14362: LD_INT 2
14364: PPUSH
14365: LD_VAR 0 3
14369: PPUSH
14370: LD_INT 1
14372: PPUSH
14373: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14377: LD_INT 11
14379: PPUSH
14380: LD_VAR 0 3
14384: PPUSH
14385: LD_INT 1
14387: PPUSH
14388: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14392: LD_INT 0
14394: PPUSH
14395: LD_VAR 0 3
14399: PPUSH
14400: LD_INT 1
14402: PPUSH
14403: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14407: LD_INT 2
14409: PPUSH
14410: LD_VAR 0 3
14414: PPUSH
14415: LD_INT 1
14417: PPUSH
14418: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14422: LD_INT 4
14424: PPUSH
14425: LD_VAR 0 3
14429: PPUSH
14430: LD_INT 1
14432: PPUSH
14433: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14437: LD_INT 6
14439: PPUSH
14440: LD_VAR 0 3
14444: PPUSH
14445: LD_INT 1
14447: PPUSH
14448: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14452: LD_INT 29
14454: PPUSH
14455: LD_VAR 0 3
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14467: LD_INT 31
14469: PPUSH
14470: LD_VAR 0 3
14474: PPUSH
14475: LD_INT 1
14477: PPUSH
14478: CALL_OW 324
// end ; 3 :
14482: GO 18030
14484: LD_INT 3
14486: DOUBLE
14487: EQUAL
14488: IFTRUE 14492
14490: GO 14945
14492: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14493: LD_INT 35
14495: PPUSH
14496: LD_VAR 0 3
14500: PPUSH
14501: LD_INT 1
14503: PPUSH
14504: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14508: LD_INT 45
14510: PPUSH
14511: LD_VAR 0 3
14515: PPUSH
14516: LD_INT 1
14518: PPUSH
14519: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14523: LD_INT 46
14525: PPUSH
14526: LD_VAR 0 3
14530: PPUSH
14531: LD_INT 1
14533: PPUSH
14534: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14538: LD_INT 47
14540: PPUSH
14541: LD_VAR 0 3
14545: PPUSH
14546: LD_INT 1
14548: PPUSH
14549: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
14553: LD_INT 1
14555: PPUSH
14556: LD_VAR 0 3
14560: PPUSH
14561: LD_INT 1
14563: PPUSH
14564: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
14568: LD_INT 2
14570: PPUSH
14571: LD_VAR 0 3
14575: PPUSH
14576: LD_INT 1
14578: PPUSH
14579: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
14583: LD_INT 11
14585: PPUSH
14586: LD_VAR 0 3
14590: PPUSH
14591: LD_INT 1
14593: PPUSH
14594: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
14598: LD_INT 48
14600: PPUSH
14601: LD_VAR 0 3
14605: PPUSH
14606: LD_INT 1
14608: PPUSH
14609: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
14613: LD_INT 69
14615: PPUSH
14616: LD_VAR 0 3
14620: PPUSH
14621: LD_INT 1
14623: PPUSH
14624: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
14628: LD_INT 39
14630: PPUSH
14631: LD_VAR 0 3
14635: PPUSH
14636: LD_INT 1
14638: PPUSH
14639: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
14643: LD_INT 43
14645: PPUSH
14646: LD_VAR 0 3
14650: PPUSH
14651: LD_INT 1
14653: PPUSH
14654: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
14658: LD_INT 51
14660: PPUSH
14661: LD_VAR 0 3
14665: PPUSH
14666: LD_INT 1
14668: PPUSH
14669: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
14673: LD_INT 6
14675: PPUSH
14676: LD_VAR 0 3
14680: PPUSH
14681: LD_INT 1
14683: PPUSH
14684: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
14688: LD_INT 0
14690: PPUSH
14691: LD_VAR 0 3
14695: PPUSH
14696: LD_INT 1
14698: PPUSH
14699: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
14703: LD_INT 2
14705: PPUSH
14706: LD_VAR 0 3
14710: PPUSH
14711: LD_INT 1
14713: PPUSH
14714: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
14718: LD_INT 3
14720: PPUSH
14721: LD_VAR 0 3
14725: PPUSH
14726: LD_INT 1
14728: PPUSH
14729: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
14733: LD_INT 4
14735: PPUSH
14736: LD_VAR 0 3
14740: PPUSH
14741: LD_INT 1
14743: PPUSH
14744: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
14748: LD_INT 6
14750: PPUSH
14751: LD_VAR 0 3
14755: PPUSH
14756: LD_INT 1
14758: PPUSH
14759: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
14763: LD_INT 7
14765: PPUSH
14766: LD_VAR 0 3
14770: PPUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
14778: LD_INT 8
14780: PPUSH
14781: LD_VAR 0 3
14785: PPUSH
14786: LD_INT 1
14788: PPUSH
14789: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
14793: LD_INT 10
14795: PPUSH
14796: LD_VAR 0 3
14800: PPUSH
14801: LD_INT 1
14803: PPUSH
14804: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
14808: LD_INT 15
14810: PPUSH
14811: LD_VAR 0 3
14815: PPUSH
14816: LD_INT 1
14818: PPUSH
14819: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
14823: LD_INT 16
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: LD_INT 1
14833: PPUSH
14834: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
14838: LD_INT 17
14840: PPUSH
14841: LD_VAR 0 3
14845: PPUSH
14846: LD_INT 1
14848: PPUSH
14849: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
14853: LD_INT 20
14855: PPUSH
14856: LD_VAR 0 3
14860: PPUSH
14861: LD_INT 1
14863: PPUSH
14864: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
14868: LD_INT 26
14870: PPUSH
14871: LD_VAR 0 3
14875: PPUSH
14876: LD_INT 1
14878: PPUSH
14879: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
14883: LD_INT 27
14885: PPUSH
14886: LD_VAR 0 3
14890: PPUSH
14891: LD_INT 1
14893: PPUSH
14894: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
14898: LD_INT 29
14900: PPUSH
14901: LD_VAR 0 3
14905: PPUSH
14906: LD_INT 1
14908: PPUSH
14909: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
14913: LD_INT 31
14915: PPUSH
14916: LD_VAR 0 3
14920: PPUSH
14921: LD_INT 1
14923: PPUSH
14924: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
14928: LD_INT 32
14930: PPUSH
14931: LD_VAR 0 3
14935: PPUSH
14936: LD_INT 1
14938: PPUSH
14939: CALL_OW 324
// end ; 4 :
14943: GO 18030
14945: LD_INT 4
14947: DOUBLE
14948: EQUAL
14949: IFTRUE 14953
14951: GO 15901
14953: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
14954: LD_INT 35
14956: PPUSH
14957: LD_VAR 0 3
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
14969: LD_INT 45
14971: PPUSH
14972: LD_VAR 0 3
14976: PPUSH
14977: LD_INT 1
14979: PPUSH
14980: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
14984: LD_INT 46
14986: PPUSH
14987: LD_VAR 0 3
14991: PPUSH
14992: LD_INT 1
14994: PPUSH
14995: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
14999: LD_INT 47
15001: PPUSH
15002: LD_VAR 0 3
15006: PPUSH
15007: LD_INT 1
15009: PPUSH
15010: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15014: LD_INT 1
15016: PPUSH
15017: LD_VAR 0 3
15021: PPUSH
15022: LD_INT 1
15024: PPUSH
15025: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15029: LD_INT 2
15031: PPUSH
15032: LD_VAR 0 3
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
15044: LD_INT 11
15046: PPUSH
15047: LD_VAR 0 3
15051: PPUSH
15052: LD_INT 1
15054: PPUSH
15055: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
15059: LD_INT 20
15061: PPUSH
15062: LD_VAR 0 3
15066: PPUSH
15067: LD_INT 1
15069: PPUSH
15070: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
15074: LD_INT 48
15076: PPUSH
15077: LD_VAR 0 3
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
15089: LD_INT 49
15091: PPUSH
15092: LD_VAR 0 3
15096: PPUSH
15097: LD_INT 1
15099: PPUSH
15100: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
15104: LD_INT 69
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: LD_INT 1
15114: PPUSH
15115: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
15119: LD_INT 39
15121: PPUSH
15122: LD_VAR 0 3
15126: PPUSH
15127: LD_INT 1
15129: PPUSH
15130: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
15134: LD_INT 34
15136: PPUSH
15137: LD_VAR 0 3
15141: PPUSH
15142: LD_INT 1
15144: PPUSH
15145: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
15149: LD_INT 42
15151: PPUSH
15152: LD_VAR 0 3
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
15164: LD_INT 44
15166: PPUSH
15167: LD_VAR 0 3
15171: PPUSH
15172: LD_INT 1
15174: PPUSH
15175: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
15179: LD_INT 41
15181: PPUSH
15182: LD_VAR 0 3
15186: PPUSH
15187: LD_INT 1
15189: PPUSH
15190: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
15194: LD_INT 43
15196: PPUSH
15197: LD_VAR 0 3
15201: PPUSH
15202: LD_INT 1
15204: PPUSH
15205: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
15209: LD_INT 70
15211: PPUSH
15212: LD_VAR 0 3
15216: PPUSH
15217: LD_INT 1
15219: PPUSH
15220: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
15224: LD_INT 51
15226: PPUSH
15227: LD_VAR 0 3
15231: PPUSH
15232: LD_INT 1
15234: PPUSH
15235: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
15239: LD_INT 52
15241: PPUSH
15242: LD_VAR 0 3
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
15254: LD_INT 6
15256: PPUSH
15257: LD_VAR 0 3
15261: PPUSH
15262: LD_INT 1
15264: PPUSH
15265: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
15269: LD_INT 15
15271: PPUSH
15272: LD_VAR 0 3
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
15284: LD_INT 7
15286: PPUSH
15287: LD_VAR 0 3
15291: PPUSH
15292: LD_INT 1
15294: PPUSH
15295: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
15299: LD_INT 12
15301: PPUSH
15302: LD_VAR 0 3
15306: PPUSH
15307: LD_INT 1
15309: PPUSH
15310: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
15314: LD_INT 18
15316: PPUSH
15317: LD_VAR 0 3
15321: PPUSH
15322: LD_INT 1
15324: PPUSH
15325: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
15329: LD_INT 60
15331: PPUSH
15332: LD_VAR 0 3
15336: PPUSH
15337: LD_INT 1
15339: PPUSH
15340: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
15344: LD_INT 9
15346: PPUSH
15347: LD_VAR 0 3
15351: PPUSH
15352: LD_INT 1
15354: PPUSH
15355: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
15359: LD_INT 30
15361: PPUSH
15362: LD_VAR 0 3
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
15374: LD_INT 37
15376: PPUSH
15377: LD_VAR 0 3
15381: PPUSH
15382: LD_INT 1
15384: PPUSH
15385: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
15389: LD_INT 5
15391: PPUSH
15392: LD_VAR 0 3
15396: PPUSH
15397: LD_INT 1
15399: PPUSH
15400: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
15404: LD_INT 66
15406: PPUSH
15407: LD_VAR 0 3
15411: PPUSH
15412: LD_INT 1
15414: PPUSH
15415: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
15419: LD_INT 21
15421: PPUSH
15422: LD_VAR 0 3
15426: PPUSH
15427: LD_INT 1
15429: PPUSH
15430: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
15434: LD_INT 22
15436: PPUSH
15437: LD_VAR 0 3
15441: PPUSH
15442: LD_INT 1
15444: PPUSH
15445: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
15449: LD_INT 54
15451: PPUSH
15452: LD_VAR 0 3
15456: PPUSH
15457: LD_INT 1
15459: PPUSH
15460: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
15464: LD_INT 0
15466: PPUSH
15467: LD_VAR 0 3
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
15479: LD_INT 1
15481: PPUSH
15482: LD_VAR 0 3
15486: PPUSH
15487: LD_INT 1
15489: PPUSH
15490: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
15494: LD_INT 2
15496: PPUSH
15497: LD_VAR 0 3
15501: PPUSH
15502: LD_INT 1
15504: PPUSH
15505: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
15509: LD_INT 3
15511: PPUSH
15512: LD_VAR 0 3
15516: PPUSH
15517: LD_INT 1
15519: PPUSH
15520: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
15524: LD_INT 4
15526: PPUSH
15527: LD_VAR 0 3
15531: PPUSH
15532: LD_INT 1
15534: PPUSH
15535: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
15539: LD_INT 5
15541: PPUSH
15542: LD_VAR 0 3
15546: PPUSH
15547: LD_INT 1
15549: PPUSH
15550: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
15554: LD_INT 6
15556: PPUSH
15557: LD_VAR 0 3
15561: PPUSH
15562: LD_INT 1
15564: PPUSH
15565: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
15569: LD_INT 7
15571: PPUSH
15572: LD_VAR 0 3
15576: PPUSH
15577: LD_INT 1
15579: PPUSH
15580: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
15584: LD_INT 8
15586: PPUSH
15587: LD_VAR 0 3
15591: PPUSH
15592: LD_INT 1
15594: PPUSH
15595: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
15599: LD_INT 10
15601: PPUSH
15602: LD_VAR 0 3
15606: PPUSH
15607: LD_INT 1
15609: PPUSH
15610: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
15614: LD_INT 11
15616: PPUSH
15617: LD_VAR 0 3
15621: PPUSH
15622: LD_INT 1
15624: PPUSH
15625: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
15629: LD_INT 12
15631: PPUSH
15632: LD_VAR 0 3
15636: PPUSH
15637: LD_INT 1
15639: PPUSH
15640: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
15644: LD_INT 13
15646: PPUSH
15647: LD_VAR 0 3
15651: PPUSH
15652: LD_INT 1
15654: PPUSH
15655: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
15659: LD_INT 14
15661: PPUSH
15662: LD_VAR 0 3
15666: PPUSH
15667: LD_INT 1
15669: PPUSH
15670: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
15674: LD_INT 15
15676: PPUSH
15677: LD_VAR 0 3
15681: PPUSH
15682: LD_INT 1
15684: PPUSH
15685: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
15689: LD_INT 16
15691: PPUSH
15692: LD_VAR 0 3
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
15704: LD_INT 17
15706: PPUSH
15707: LD_VAR 0 3
15711: PPUSH
15712: LD_INT 1
15714: PPUSH
15715: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
15719: LD_INT 19
15721: PPUSH
15722: LD_VAR 0 3
15726: PPUSH
15727: LD_INT 1
15729: PPUSH
15730: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
15734: LD_INT 20
15736: PPUSH
15737: LD_VAR 0 3
15741: PPUSH
15742: LD_INT 1
15744: PPUSH
15745: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
15749: LD_INT 21
15751: PPUSH
15752: LD_VAR 0 3
15756: PPUSH
15757: LD_INT 1
15759: PPUSH
15760: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
15764: LD_INT 23
15766: PPUSH
15767: LD_VAR 0 3
15771: PPUSH
15772: LD_INT 1
15774: PPUSH
15775: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
15779: LD_INT 26
15781: PPUSH
15782: LD_VAR 0 3
15786: PPUSH
15787: LD_INT 1
15789: PPUSH
15790: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
15794: LD_INT 27
15796: PPUSH
15797: LD_VAR 0 3
15801: PPUSH
15802: LD_INT 1
15804: PPUSH
15805: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
15809: LD_INT 28
15811: PPUSH
15812: LD_VAR 0 3
15816: PPUSH
15817: LD_INT 1
15819: PPUSH
15820: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
15824: LD_INT 29
15826: PPUSH
15827: LD_VAR 0 3
15831: PPUSH
15832: LD_INT 1
15834: PPUSH
15835: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
15839: LD_INT 30
15841: PPUSH
15842: LD_VAR 0 3
15846: PPUSH
15847: LD_INT 1
15849: PPUSH
15850: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
15854: LD_INT 31
15856: PPUSH
15857: LD_VAR 0 3
15861: PPUSH
15862: LD_INT 1
15864: PPUSH
15865: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
15869: LD_INT 32
15871: PPUSH
15872: LD_VAR 0 3
15876: PPUSH
15877: LD_INT 1
15879: PPUSH
15880: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
15884: LD_INT 36
15886: PPUSH
15887: LD_VAR 0 3
15891: PPUSH
15892: LD_INT 1
15894: PPUSH
15895: CALL_OW 324
// end ; 5 :
15899: GO 18030
15901: LD_INT 5
15903: DOUBLE
15904: EQUAL
15905: IFTRUE 15909
15907: GO 17022
15909: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
15910: LD_INT 35
15912: PPUSH
15913: LD_VAR 0 3
15917: PPUSH
15918: LD_INT 1
15920: PPUSH
15921: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
15925: LD_INT 45
15927: PPUSH
15928: LD_VAR 0 3
15932: PPUSH
15933: LD_INT 1
15935: PPUSH
15936: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
15940: LD_INT 46
15942: PPUSH
15943: LD_VAR 0 3
15947: PPUSH
15948: LD_INT 1
15950: PPUSH
15951: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
15955: LD_INT 47
15957: PPUSH
15958: LD_VAR 0 3
15962: PPUSH
15963: LD_INT 1
15965: PPUSH
15966: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
15970: LD_INT 1
15972: PPUSH
15973: LD_VAR 0 3
15977: PPUSH
15978: LD_INT 1
15980: PPUSH
15981: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
15985: LD_INT 2
15987: PPUSH
15988: LD_VAR 0 3
15992: PPUSH
15993: LD_INT 1
15995: PPUSH
15996: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
16000: LD_INT 11
16002: PPUSH
16003: LD_VAR 0 3
16007: PPUSH
16008: LD_INT 1
16010: PPUSH
16011: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
16015: LD_INT 20
16017: PPUSH
16018: LD_VAR 0 3
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
16030: LD_INT 48
16032: PPUSH
16033: LD_VAR 0 3
16037: PPUSH
16038: LD_INT 1
16040: PPUSH
16041: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
16045: LD_INT 49
16047: PPUSH
16048: LD_VAR 0 3
16052: PPUSH
16053: LD_INT 1
16055: PPUSH
16056: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
16060: LD_INT 69
16062: PPUSH
16063: LD_VAR 0 3
16067: PPUSH
16068: LD_INT 1
16070: PPUSH
16071: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
16075: LD_INT 39
16077: PPUSH
16078: LD_VAR 0 3
16082: PPUSH
16083: LD_INT 1
16085: PPUSH
16086: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
16090: LD_INT 34
16092: PPUSH
16093: LD_VAR 0 3
16097: PPUSH
16098: LD_INT 1
16100: PPUSH
16101: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
16105: LD_INT 42
16107: PPUSH
16108: LD_VAR 0 3
16112: PPUSH
16113: LD_INT 1
16115: PPUSH
16116: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
16120: LD_INT 44
16122: PPUSH
16123: LD_VAR 0 3
16127: PPUSH
16128: LD_INT 1
16130: PPUSH
16131: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
16135: LD_INT 41
16137: PPUSH
16138: LD_VAR 0 3
16142: PPUSH
16143: LD_INT 1
16145: PPUSH
16146: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
16150: LD_INT 40
16152: PPUSH
16153: LD_VAR 0 3
16157: PPUSH
16158: LD_INT 1
16160: PPUSH
16161: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
16165: LD_INT 43
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: LD_INT 1
16175: PPUSH
16176: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
16180: LD_INT 70
16182: PPUSH
16183: LD_VAR 0 3
16187: PPUSH
16188: LD_INT 1
16190: PPUSH
16191: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
16195: LD_INT 51
16197: PPUSH
16198: LD_VAR 0 3
16202: PPUSH
16203: LD_INT 1
16205: PPUSH
16206: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
16210: LD_INT 52
16212: PPUSH
16213: LD_VAR 0 3
16217: PPUSH
16218: LD_INT 1
16220: PPUSH
16221: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
16225: LD_INT 6
16227: PPUSH
16228: LD_VAR 0 3
16232: PPUSH
16233: LD_INT 1
16235: PPUSH
16236: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
16240: LD_INT 15
16242: PPUSH
16243: LD_VAR 0 3
16247: PPUSH
16248: LD_INT 1
16250: PPUSH
16251: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
16255: LD_INT 7
16257: PPUSH
16258: LD_VAR 0 3
16262: PPUSH
16263: LD_INT 1
16265: PPUSH
16266: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
16270: LD_INT 12
16272: PPUSH
16273: LD_VAR 0 3
16277: PPUSH
16278: LD_INT 1
16280: PPUSH
16281: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
16285: LD_INT 17
16287: PPUSH
16288: LD_VAR 0 3
16292: PPUSH
16293: LD_INT 1
16295: PPUSH
16296: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
16300: LD_INT 18
16302: PPUSH
16303: LD_VAR 0 3
16307: PPUSH
16308: LD_INT 1
16310: PPUSH
16311: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
16315: LD_INT 60
16317: PPUSH
16318: LD_VAR 0 3
16322: PPUSH
16323: LD_INT 1
16325: PPUSH
16326: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
16330: LD_INT 32
16332: PPUSH
16333: LD_VAR 0 3
16337: PPUSH
16338: LD_INT 1
16340: PPUSH
16341: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
16345: LD_INT 9
16347: PPUSH
16348: LD_VAR 0 3
16352: PPUSH
16353: LD_INT 1
16355: PPUSH
16356: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
16360: LD_INT 57
16362: PPUSH
16363: LD_VAR 0 3
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
16375: LD_INT 30
16377: PPUSH
16378: LD_VAR 0 3
16382: PPUSH
16383: LD_INT 1
16385: PPUSH
16386: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
16390: LD_INT 37
16392: PPUSH
16393: LD_VAR 0 3
16397: PPUSH
16398: LD_INT 1
16400: PPUSH
16401: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
16405: LD_INT 63
16407: PPUSH
16408: LD_VAR 0 3
16412: PPUSH
16413: LD_INT 1
16415: PPUSH
16416: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
16420: LD_INT 3
16422: PPUSH
16423: LD_VAR 0 3
16427: PPUSH
16428: LD_INT 1
16430: PPUSH
16431: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
16435: LD_INT 4
16437: PPUSH
16438: LD_VAR 0 3
16442: PPUSH
16443: LD_INT 1
16445: PPUSH
16446: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
16450: LD_INT 5
16452: PPUSH
16453: LD_VAR 0 3
16457: PPUSH
16458: LD_INT 1
16460: PPUSH
16461: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
16465: LD_INT 66
16467: PPUSH
16468: LD_VAR 0 3
16472: PPUSH
16473: LD_INT 1
16475: PPUSH
16476: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
16480: LD_INT 21
16482: PPUSH
16483: LD_VAR 0 3
16487: PPUSH
16488: LD_INT 1
16490: PPUSH
16491: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
16495: LD_INT 22
16497: PPUSH
16498: LD_VAR 0 3
16502: PPUSH
16503: LD_INT 1
16505: PPUSH
16506: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
16510: LD_INT 19
16512: PPUSH
16513: LD_VAR 0 3
16517: PPUSH
16518: LD_INT 1
16520: PPUSH
16521: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
16525: LD_INT 54
16527: PPUSH
16528: LD_VAR 0 3
16532: PPUSH
16533: LD_INT 1
16535: PPUSH
16536: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
16540: LD_INT 55
16542: PPUSH
16543: LD_VAR 0 3
16547: PPUSH
16548: LD_INT 1
16550: PPUSH
16551: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
16555: LD_INT 0
16557: PPUSH
16558: LD_VAR 0 3
16562: PPUSH
16563: LD_INT 1
16565: PPUSH
16566: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
16570: LD_INT 1
16572: PPUSH
16573: LD_VAR 0 3
16577: PPUSH
16578: LD_INT 1
16580: PPUSH
16581: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
16585: LD_INT 2
16587: PPUSH
16588: LD_VAR 0 3
16592: PPUSH
16593: LD_INT 1
16595: PPUSH
16596: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
16600: LD_INT 3
16602: PPUSH
16603: LD_VAR 0 3
16607: PPUSH
16608: LD_INT 1
16610: PPUSH
16611: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
16615: LD_INT 4
16617: PPUSH
16618: LD_VAR 0 3
16622: PPUSH
16623: LD_INT 1
16625: PPUSH
16626: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
16630: LD_INT 5
16632: PPUSH
16633: LD_VAR 0 3
16637: PPUSH
16638: LD_INT 1
16640: PPUSH
16641: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
16645: LD_INT 6
16647: PPUSH
16648: LD_VAR 0 3
16652: PPUSH
16653: LD_INT 1
16655: PPUSH
16656: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
16660: LD_INT 7
16662: PPUSH
16663: LD_VAR 0 3
16667: PPUSH
16668: LD_INT 1
16670: PPUSH
16671: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
16675: LD_INT 8
16677: PPUSH
16678: LD_VAR 0 3
16682: PPUSH
16683: LD_INT 1
16685: PPUSH
16686: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
16690: LD_INT 10
16692: PPUSH
16693: LD_VAR 0 3
16697: PPUSH
16698: LD_INT 1
16700: PPUSH
16701: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
16705: LD_INT 11
16707: PPUSH
16708: LD_VAR 0 3
16712: PPUSH
16713: LD_INT 1
16715: PPUSH
16716: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
16720: LD_INT 12
16722: PPUSH
16723: LD_VAR 0 3
16727: PPUSH
16728: LD_INT 1
16730: PPUSH
16731: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
16735: LD_INT 13
16737: PPUSH
16738: LD_VAR 0 3
16742: PPUSH
16743: LD_INT 1
16745: PPUSH
16746: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
16750: LD_INT 14
16752: PPUSH
16753: LD_VAR 0 3
16757: PPUSH
16758: LD_INT 1
16760: PPUSH
16761: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
16765: LD_INT 15
16767: PPUSH
16768: LD_VAR 0 3
16772: PPUSH
16773: LD_INT 1
16775: PPUSH
16776: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
16780: LD_INT 16
16782: PPUSH
16783: LD_VAR 0 3
16787: PPUSH
16788: LD_INT 1
16790: PPUSH
16791: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
16795: LD_INT 17
16797: PPUSH
16798: LD_VAR 0 3
16802: PPUSH
16803: LD_INT 1
16805: PPUSH
16806: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
16810: LD_INT 18
16812: PPUSH
16813: LD_VAR 0 3
16817: PPUSH
16818: LD_INT 1
16820: PPUSH
16821: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
16825: LD_INT 19
16827: PPUSH
16828: LD_VAR 0 3
16832: PPUSH
16833: LD_INT 1
16835: PPUSH
16836: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
16840: LD_INT 20
16842: PPUSH
16843: LD_VAR 0 3
16847: PPUSH
16848: LD_INT 1
16850: PPUSH
16851: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
16855: LD_INT 21
16857: PPUSH
16858: LD_VAR 0 3
16862: PPUSH
16863: LD_INT 1
16865: PPUSH
16866: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
16870: LD_INT 23
16872: PPUSH
16873: LD_VAR 0 3
16877: PPUSH
16878: LD_INT 1
16880: PPUSH
16881: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
16885: LD_INT 26
16887: PPUSH
16888: LD_VAR 0 3
16892: PPUSH
16893: LD_INT 1
16895: PPUSH
16896: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
16900: LD_INT 27
16902: PPUSH
16903: LD_VAR 0 3
16907: PPUSH
16908: LD_INT 1
16910: PPUSH
16911: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
16915: LD_INT 28
16917: PPUSH
16918: LD_VAR 0 3
16922: PPUSH
16923: LD_INT 1
16925: PPUSH
16926: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
16930: LD_INT 29
16932: PPUSH
16933: LD_VAR 0 3
16937: PPUSH
16938: LD_INT 1
16940: PPUSH
16941: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
16945: LD_INT 30
16947: PPUSH
16948: LD_VAR 0 3
16952: PPUSH
16953: LD_INT 1
16955: PPUSH
16956: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
16960: LD_INT 31
16962: PPUSH
16963: LD_VAR 0 3
16967: PPUSH
16968: LD_INT 1
16970: PPUSH
16971: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
16975: LD_INT 32
16977: PPUSH
16978: LD_VAR 0 3
16982: PPUSH
16983: LD_INT 1
16985: PPUSH
16986: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
16990: LD_INT 33
16992: PPUSH
16993: LD_VAR 0 3
16997: PPUSH
16998: LD_INT 1
17000: PPUSH
17001: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
17005: LD_INT 36
17007: PPUSH
17008: LD_VAR 0 3
17012: PPUSH
17013: LD_INT 1
17015: PPUSH
17016: CALL_OW 324
// end ; 6 :
17020: GO 18030
17022: LD_INT 6
17024: DOUBLE
17025: EQUAL
17026: IFTRUE 17030
17028: GO 17955
17030: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
17031: LD_INT 35
17033: PPUSH
17034: LD_VAR 0 3
17038: PPUSH
17039: LD_INT 1
17041: PPUSH
17042: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
17046: LD_INT 45
17048: PPUSH
17049: LD_VAR 0 3
17053: PPUSH
17054: LD_INT 1
17056: PPUSH
17057: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
17061: LD_INT 46
17063: PPUSH
17064: LD_VAR 0 3
17068: PPUSH
17069: LD_INT 1
17071: PPUSH
17072: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
17076: LD_INT 47
17078: PPUSH
17079: LD_VAR 0 3
17083: PPUSH
17084: LD_INT 1
17086: PPUSH
17087: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
17091: LD_INT 1
17093: PPUSH
17094: LD_VAR 0 3
17098: PPUSH
17099: LD_INT 1
17101: PPUSH
17102: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
17106: LD_INT 2
17108: PPUSH
17109: LD_VAR 0 3
17113: PPUSH
17114: LD_INT 1
17116: PPUSH
17117: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
17121: LD_INT 11
17123: PPUSH
17124: LD_VAR 0 3
17128: PPUSH
17129: LD_INT 1
17131: PPUSH
17132: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
17136: LD_INT 20
17138: PPUSH
17139: LD_VAR 0 3
17143: PPUSH
17144: LD_INT 1
17146: PPUSH
17147: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
17151: LD_INT 48
17153: PPUSH
17154: LD_VAR 0 3
17158: PPUSH
17159: LD_INT 1
17161: PPUSH
17162: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
17166: LD_INT 49
17168: PPUSH
17169: LD_VAR 0 3
17173: PPUSH
17174: LD_INT 1
17176: PPUSH
17177: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
17181: LD_INT 50
17183: PPUSH
17184: LD_VAR 0 3
17188: PPUSH
17189: LD_INT 1
17191: PPUSH
17192: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
17196: LD_INT 69
17198: PPUSH
17199: LD_VAR 0 3
17203: PPUSH
17204: LD_INT 1
17206: PPUSH
17207: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
17211: LD_INT 39
17213: PPUSH
17214: LD_VAR 0 3
17218: PPUSH
17219: LD_INT 1
17221: PPUSH
17222: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
17226: LD_INT 34
17228: PPUSH
17229: LD_VAR 0 3
17233: PPUSH
17234: LD_INT 1
17236: PPUSH
17237: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
17241: LD_INT 42
17243: PPUSH
17244: LD_VAR 0 3
17248: PPUSH
17249: LD_INT 1
17251: PPUSH
17252: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
17256: LD_INT 44
17258: PPUSH
17259: LD_VAR 0 3
17263: PPUSH
17264: LD_INT 1
17266: PPUSH
17267: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
17271: LD_INT 41
17273: PPUSH
17274: LD_VAR 0 3
17278: PPUSH
17279: LD_INT 1
17281: PPUSH
17282: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
17286: LD_INT 13
17288: PPUSH
17289: LD_VAR 0 3
17293: PPUSH
17294: LD_INT 1
17296: PPUSH
17297: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
17301: LD_INT 40
17303: PPUSH
17304: LD_VAR 0 3
17308: PPUSH
17309: LD_INT 1
17311: PPUSH
17312: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
17316: LD_INT 43
17318: PPUSH
17319: LD_VAR 0 3
17323: PPUSH
17324: LD_INT 1
17326: PPUSH
17327: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
17331: LD_INT 70
17333: PPUSH
17334: LD_VAR 0 3
17338: PPUSH
17339: LD_INT 1
17341: PPUSH
17342: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
17346: LD_INT 23
17348: PPUSH
17349: LD_VAR 0 3
17353: PPUSH
17354: LD_INT 1
17356: PPUSH
17357: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
17361: LD_INT 51
17363: PPUSH
17364: LD_VAR 0 3
17368: PPUSH
17369: LD_INT 1
17371: PPUSH
17372: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
17376: LD_INT 52
17378: PPUSH
17379: LD_VAR 0 3
17383: PPUSH
17384: LD_INT 1
17386: PPUSH
17387: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
17391: LD_INT 6
17393: PPUSH
17394: LD_VAR 0 3
17398: PPUSH
17399: LD_INT 1
17401: PPUSH
17402: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
17406: LD_INT 15
17408: PPUSH
17409: LD_VAR 0 3
17413: PPUSH
17414: LD_INT 1
17416: PPUSH
17417: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
17421: LD_INT 7
17423: PPUSH
17424: LD_VAR 0 3
17428: PPUSH
17429: LD_INT 1
17431: PPUSH
17432: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
17436: LD_INT 12
17438: PPUSH
17439: LD_VAR 0 3
17443: PPUSH
17444: LD_INT 1
17446: PPUSH
17447: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
17451: LD_INT 10
17453: PPUSH
17454: LD_VAR 0 3
17458: PPUSH
17459: LD_INT 1
17461: PPUSH
17462: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
17466: LD_INT 17
17468: PPUSH
17469: LD_VAR 0 3
17473: PPUSH
17474: LD_INT 1
17476: PPUSH
17477: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
17481: LD_INT 18
17483: PPUSH
17484: LD_VAR 0 3
17488: PPUSH
17489: LD_INT 1
17491: PPUSH
17492: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
17496: LD_INT 60
17498: PPUSH
17499: LD_VAR 0 3
17503: PPUSH
17504: LD_INT 1
17506: PPUSH
17507: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
17511: LD_INT 61
17513: PPUSH
17514: LD_VAR 0 3
17518: PPUSH
17519: LD_INT 1
17521: PPUSH
17522: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
17526: LD_INT 32
17528: PPUSH
17529: LD_VAR 0 3
17533: PPUSH
17534: LD_INT 1
17536: PPUSH
17537: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
17541: LD_INT 27
17543: PPUSH
17544: LD_VAR 0 3
17548: PPUSH
17549: LD_INT 1
17551: PPUSH
17552: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
17556: LD_INT 36
17558: PPUSH
17559: LD_VAR 0 3
17563: PPUSH
17564: LD_INT 1
17566: PPUSH
17567: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
17571: LD_INT 33
17573: PPUSH
17574: LD_VAR 0 3
17578: PPUSH
17579: LD_INT 1
17581: PPUSH
17582: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
17586: LD_INT 9
17588: PPUSH
17589: LD_VAR 0 3
17593: PPUSH
17594: LD_INT 1
17596: PPUSH
17597: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
17601: LD_INT 38
17603: PPUSH
17604: LD_VAR 0 3
17608: PPUSH
17609: LD_INT 1
17611: PPUSH
17612: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
17616: LD_INT 57
17618: PPUSH
17619: LD_VAR 0 3
17623: PPUSH
17624: LD_INT 1
17626: PPUSH
17627: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
17631: LD_INT 58
17633: PPUSH
17634: LD_VAR 0 3
17638: PPUSH
17639: LD_INT 1
17641: PPUSH
17642: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
17646: LD_INT 28
17648: PPUSH
17649: LD_VAR 0 3
17653: PPUSH
17654: LD_INT 1
17656: PPUSH
17657: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
17661: LD_INT 29
17663: PPUSH
17664: LD_VAR 0 3
17668: PPUSH
17669: LD_INT 1
17671: PPUSH
17672: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
17676: LD_INT 30
17678: PPUSH
17679: LD_VAR 0 3
17683: PPUSH
17684: LD_INT 1
17686: PPUSH
17687: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
17691: LD_INT 37
17693: PPUSH
17694: LD_VAR 0 3
17698: PPUSH
17699: LD_INT 1
17701: PPUSH
17702: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
17706: LD_INT 63
17708: PPUSH
17709: LD_VAR 0 3
17713: PPUSH
17714: LD_INT 1
17716: PPUSH
17717: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
17721: LD_INT 64
17723: PPUSH
17724: LD_VAR 0 3
17728: PPUSH
17729: LD_INT 1
17731: PPUSH
17732: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
17736: LD_INT 3
17738: PPUSH
17739: LD_VAR 0 3
17743: PPUSH
17744: LD_INT 1
17746: PPUSH
17747: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
17751: LD_INT 4
17753: PPUSH
17754: LD_VAR 0 3
17758: PPUSH
17759: LD_INT 1
17761: PPUSH
17762: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
17766: LD_INT 5
17768: PPUSH
17769: LD_VAR 0 3
17773: PPUSH
17774: LD_INT 1
17776: PPUSH
17777: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
17781: LD_INT 8
17783: PPUSH
17784: LD_VAR 0 3
17788: PPUSH
17789: LD_INT 1
17791: PPUSH
17792: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
17796: LD_INT 66
17798: PPUSH
17799: LD_VAR 0 3
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
17811: LD_INT 67
17813: PPUSH
17814: LD_VAR 0 3
17818: PPUSH
17819: LD_INT 1
17821: PPUSH
17822: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
17826: LD_INT 21
17828: PPUSH
17829: LD_VAR 0 3
17833: PPUSH
17834: LD_INT 1
17836: PPUSH
17837: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
17841: LD_INT 22
17843: PPUSH
17844: LD_VAR 0 3
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
17856: LD_INT 19
17858: PPUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: LD_INT 1
17866: PPUSH
17867: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
17871: LD_INT 26
17873: PPUSH
17874: LD_VAR 0 3
17878: PPUSH
17879: LD_INT 1
17881: PPUSH
17882: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
17886: LD_INT 54
17888: PPUSH
17889: LD_VAR 0 3
17893: PPUSH
17894: LD_INT 1
17896: PPUSH
17897: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
17901: LD_INT 55
17903: PPUSH
17904: LD_VAR 0 3
17908: PPUSH
17909: LD_INT 1
17911: PPUSH
17912: CALL_OW 322
// for i = 0 to 39 do
17916: LD_ADDR_VAR 0 4
17920: PUSH
17921: DOUBLE
17922: LD_INT 0
17924: DEC
17925: ST_TO_ADDR
17926: LD_INT 39
17928: PUSH
17929: FOR_TO
17930: IFFALSE 17951
// SetRestrict ( i , side , true ) ;
17932: LD_VAR 0 4
17936: PPUSH
17937: LD_VAR 0 3
17941: PPUSH
17942: LD_INT 1
17944: PPUSH
17945: CALL_OW 324
17949: GO 17929
17951: POP
17952: POP
// end ; else
17953: GO 18030
17955: POP
// begin for i = 1 to 73 do
17956: LD_ADDR_VAR 0 4
17960: PUSH
17961: DOUBLE
17962: LD_INT 1
17964: DEC
17965: ST_TO_ADDR
17966: LD_INT 73
17968: PUSH
17969: FOR_TO
17970: IFFALSE 17991
// SetTech ( i , side , state_enabled ) ;
17972: LD_VAR 0 4
17976: PPUSH
17977: LD_VAR 0 3
17981: PPUSH
17982: LD_INT 1
17984: PPUSH
17985: CALL_OW 322
17989: GO 17969
17991: POP
17992: POP
// for i = 0 to 39 do
17993: LD_ADDR_VAR 0 4
17997: PUSH
17998: DOUBLE
17999: LD_INT 0
18001: DEC
18002: ST_TO_ADDR
18003: LD_INT 39
18005: PUSH
18006: FOR_TO
18007: IFFALSE 18028
// SetRestrict ( i , side , true ) ;
18009: LD_VAR 0 4
18013: PPUSH
18014: LD_VAR 0 3
18018: PPUSH
18019: LD_INT 1
18021: PPUSH
18022: CALL_OW 324
18026: GO 18006
18028: POP
18029: POP
// end ; end ; end ;
18030: GO 14035
18032: POP
18033: POP
// end ;
18034: LD_VAR 0 2
18038: RET
