// export def_base_level , def_amount_of_people , def_skill_level , def_starting_resources , def_shipments_density , def_extra_oil_deposits , def_extra_sib_deposits , def_shared_vision , def_morale_flags , def_siberite_detection , def_people_respawning , def_amount_of_apemen , def_siberite_bomb , def_builduptime ; export No_Mechs , Game_Type ; export is_depot , number_of_breastworks , number_of_people , skill_level , starting_crates , starting_resources , shipments_density , morale_decreasing_time , amount_of_apemen , amount_of_siberit , respawning_time_min , respawning_time_max , siberite_bomb_Delay , def_win_rules ; export Side_Teams , Teams , Side_Comps ; export Side_Positions , Side_Nations , Team_Game ; export depot_def , breastworks_def , start_def , normal_oil_deposits_locations , extra_oil_deposits_locations , normal_sib_deposits_locations , extra_sib_deposits_locations , battle_flags_id ; export heroes ; var commander ; var global_units , global_defined , soldiers_created ; var neng , nsci , nmech , nsol ; function mp_sides_comps ; var c , i ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
// c = [ ] ;
   5: LD_ADDR_VAR 0 2
   9: PUSH
  10: EMPTY
  11: ST_TO_ADDR
// for i = 1 to 8 do
  12: LD_ADDR_VAR 0 3
  16: PUSH
  17: DOUBLE
  18: LD_INT 1
  20: DEC
  21: ST_TO_ADDR
  22: LD_INT 8
  24: PUSH
  25: FOR_TO
  26: IFFALSE 51
// c = c ^ Multiplayer_GetPlayerIsComp ( i ) ;
  28: LD_ADDR_VAR 0 2
  32: PUSH
  33: LD_VAR 0 2
  37: PUSH
  38: LD_VAR 0 3
  42: PPUSH
  43: CALL_OW 532
  47: ADD
  48: ST_TO_ADDR
  49: GO 25
  51: POP
  52: POP
// result = c ;
  53: LD_ADDR_VAR 0 1
  57: PUSH
  58: LD_VAR 0 2
  62: ST_TO_ADDR
// end ;
  63: LD_VAR 0 1
  67: RET
// function read_multiplayer_and_game_parameters ; var i , tech_level ; begin
  68: LD_INT 0
  70: PPUSH
  71: PPUSH
  72: PPUSH
// if Multiplayer then
  73: LD_OWVAR 4
  77: IFFALSE 151
// begin Game_Type := mp_game_type ;
  79: LD_ADDR_EXP 16
  83: PUSH
  84: LD_OWVAR 6
  88: ST_TO_ADDR
// Your_Side := mp_player_side ;
  89: LD_ADDR_OWVAR 2
  93: PUSH
  94: LD_OWVAR 7
  98: ST_TO_ADDR
// Side_Positions := mp_sides_positions ;
  99: LD_ADDR_EXP 34
 103: PUSH
 104: LD_OWVAR 17
 108: ST_TO_ADDR
// Side_Teams := mp_sides_teams ;
 109: LD_ADDR_EXP 31
 113: PUSH
 114: LD_OWVAR 15
 118: ST_TO_ADDR
// Side_Nations := mp_sides_nations ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_OWVAR 16
 128: ST_TO_ADDR
// Side_Comps = mp_sides_comps ;
 129: LD_ADDR_EXP 33
 133: PUSH
 134: CALL 0 0 0
 138: ST_TO_ADDR
// Teams := mp_teams ;
 139: LD_ADDR_EXP 32
 143: PUSH
 144: LD_OWVAR 12
 148: ST_TO_ADDR
// end else
 149: GO 386
// begin Game_Type := 1 ;
 151: LD_ADDR_EXP 16
 155: PUSH
 156: LD_INT 1
 158: ST_TO_ADDR
// Your_Side := 1 ;
 159: LD_ADDR_OWVAR 2
 163: PUSH
 164: LD_INT 1
 166: ST_TO_ADDR
// Side_Positions := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 167: LD_ADDR_EXP 34
 171: PUSH
 172: LD_INT 1
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: LD_INT 3
 180: PUSH
 181: LD_INT 4
 183: PUSH
 184: LD_INT 5
 186: PUSH
 187: LD_INT 6
 189: PUSH
 190: LD_INT 7
 192: PUSH
 193: LD_INT 8
 195: PUSH
 196: EMPTY
 197: LIST
 198: LIST
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: LIST
 204: LIST
 205: ST_TO_ADDR
// Side_Teams := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
 206: LD_ADDR_EXP 31
 210: PUSH
 211: LD_INT 1
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: LD_INT 3
 219: PUSH
 220: LD_INT 4
 222: PUSH
 223: LD_INT 5
 225: PUSH
 226: LD_INT 6
 228: PUSH
 229: LD_INT 7
 231: PUSH
 232: LD_INT 8
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: LIST
 241: LIST
 242: LIST
 243: LIST
 244: ST_TO_ADDR
// Side_Nations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 245: LD_ADDR_EXP 35
 249: PUSH
 250: LD_INT 1
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: LD_INT 3
 258: PUSH
 259: LD_INT 1
 261: PUSH
 262: LD_INT 2
 264: PUSH
 265: LD_INT 3
 267: PUSH
 268: LD_INT 1
 270: PUSH
 271: LD_INT 2
 273: PUSH
 274: EMPTY
 275: LIST
 276: LIST
 277: LIST
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: LIST
 283: ST_TO_ADDR
// Side_Comps = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 284: LD_ADDR_EXP 33
 288: PUSH
 289: LD_INT 0
 291: PUSH
 292: LD_INT 0
 294: PUSH
 295: LD_INT 0
 297: PUSH
 298: LD_INT 0
 300: PUSH
 301: LD_INT 0
 303: PUSH
 304: LD_INT 0
 306: PUSH
 307: LD_INT 0
 309: PUSH
 310: LD_INT 0
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// Teams := [ [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] , [ 5 ] , [ 6 ] , [ 7 ] , [ 8 ] ] ;
 323: LD_ADDR_EXP 32
 327: PUSH
 328: LD_INT 1
 330: PUSH
 331: EMPTY
 332: LIST
 333: PUSH
 334: LD_INT 2
 336: PUSH
 337: EMPTY
 338: LIST
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: EMPTY
 344: LIST
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: EMPTY
 350: LIST
 351: PUSH
 352: LD_INT 5
 354: PUSH
 355: EMPTY
 356: LIST
 357: PUSH
 358: LD_INT 6
 360: PUSH
 361: EMPTY
 362: LIST
 363: PUSH
 364: LD_INT 7
 366: PUSH
 367: EMPTY
 368: LIST
 369: PUSH
 370: LD_INT 8
 372: PUSH
 373: EMPTY
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: LIST
 382: LIST
 383: LIST
 384: LIST
 385: ST_TO_ADDR
// end ; Team_Game := ( Side_Teams diff [ 0 ] ) > 1 ;
 386: LD_ADDR_EXP 36
 390: PUSH
 391: LD_EXP 31
 395: PUSH
 396: LD_INT 0
 398: PUSH
 399: EMPTY
 400: LIST
 401: DIFF
 402: PUSH
 403: LD_INT 1
 405: GREATER
 406: ST_TO_ADDR
// if Multiplayer then
 407: LD_OWVAR 4
 411: IFFALSE 613
// begin def_base_level := GetMultiplayerSetting ( 0 ) ;
 413: LD_ADDR_EXP 1
 417: PUSH
 418: LD_INT 0
 420: PPUSH
 421: CALL_OW 426
 425: ST_TO_ADDR
// def_amount_of_people := GetMultiplayerSetting ( 1 ) ;
 426: LD_ADDR_EXP 2
 430: PUSH
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 426
 438: ST_TO_ADDR
// def_skill_level := GetMultiplayerSetting ( 2 ) ;
 439: LD_ADDR_EXP 3
 443: PUSH
 444: LD_INT 2
 446: PPUSH
 447: CALL_OW 426
 451: ST_TO_ADDR
// def_starting_resources := GetMultiplayerSetting ( 3 ) ;
 452: LD_ADDR_EXP 4
 456: PUSH
 457: LD_INT 3
 459: PPUSH
 460: CALL_OW 426
 464: ST_TO_ADDR
// def_shipments_density := GetMultiplayerSetting ( 4 ) ;
 465: LD_ADDR_EXP 5
 469: PUSH
 470: LD_INT 4
 472: PPUSH
 473: CALL_OW 426
 477: ST_TO_ADDR
// def_extra_oil_deposits := GetMultiplayerSetting ( 5 ) ;
 478: LD_ADDR_EXP 6
 482: PUSH
 483: LD_INT 5
 485: PPUSH
 486: CALL_OW 426
 490: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 491: LD_ADDR_EXP 7
 495: PUSH
 496: LD_INT 1
 498: ST_TO_ADDR
// def_shared_vision := GetMultiplayerSetting ( 10 ) ;
 499: LD_ADDR_EXP 8
 503: PUSH
 504: LD_INT 10
 506: PPUSH
 507: CALL_OW 426
 511: ST_TO_ADDR
// def_morale_flags := GetMultiplayerSetting ( 11 ) ;
 512: LD_ADDR_EXP 9
 516: PUSH
 517: LD_INT 11
 519: PPUSH
 520: CALL_OW 426
 524: ST_TO_ADDR
// def_siberite_detection := GetMultiplayerSetting ( 12 ) ;
 525: LD_ADDR_EXP 10
 529: PUSH
 530: LD_INT 12
 532: PPUSH
 533: CALL_OW 426
 537: ST_TO_ADDR
// def_people_respawning := GetMultiplayerSetting ( 13 ) ;
 538: LD_ADDR_EXP 11
 542: PUSH
 543: LD_INT 13
 545: PPUSH
 546: CALL_OW 426
 550: ST_TO_ADDR
// def_amount_of_apemen := GetMultiplayerSetting ( 14 ) ;
 551: LD_ADDR_EXP 12
 555: PUSH
 556: LD_INT 14
 558: PPUSH
 559: CALL_OW 426
 563: ST_TO_ADDR
// def_siberite_bomb := GetMultiplayerSetting ( 17 ) ;
 564: LD_ADDR_EXP 13
 568: PUSH
 569: LD_INT 17
 571: PPUSH
 572: CALL_OW 426
 576: ST_TO_ADDR
// def_builduptime := GetMultiplayerSetting ( 20 ) ;
 577: LD_ADDR_EXP 14
 581: PUSH
 582: LD_INT 20
 584: PPUSH
 585: CALL_OW 426
 589: ST_TO_ADDR
// tech_level = GetMultiplayerSetting ( 22 ) ;
 590: LD_ADDR_VAR 0 3
 594: PUSH
 595: LD_INT 22
 597: PPUSH
 598: CALL_OW 426
 602: ST_TO_ADDR
// def_win_rules = 0 ;
 603: LD_ADDR_EXP 30
 607: PUSH
 608: LD_INT 0
 610: ST_TO_ADDR
// end else
 611: GO 745
// begin Randomize ;
 613: CALL_OW 10
// def_base_level := 2 ;
 617: LD_ADDR_EXP 1
 621: PUSH
 622: LD_INT 2
 624: ST_TO_ADDR
// def_amount_of_people := 2 ;
 625: LD_ADDR_EXP 2
 629: PUSH
 630: LD_INT 2
 632: ST_TO_ADDR
// def_skill_level := 1 ;
 633: LD_ADDR_EXP 3
 637: PUSH
 638: LD_INT 1
 640: ST_TO_ADDR
// def_starting_resources := 2 ;
 641: LD_ADDR_EXP 4
 645: PUSH
 646: LD_INT 2
 648: ST_TO_ADDR
// def_shipments_density := 1 ;
 649: LD_ADDR_EXP 5
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// def_extra_oil_deposits := 0 ;
 657: LD_ADDR_EXP 6
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// def_extra_sib_deposits := 1 ;
 665: LD_ADDR_EXP 7
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// def_shared_vision := 1 ;
 673: LD_ADDR_EXP 8
 677: PUSH
 678: LD_INT 1
 680: ST_TO_ADDR
// def_morale_flags := 1 ;
 681: LD_ADDR_EXP 9
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// def_siberite_detection := 1 ;
 689: LD_ADDR_EXP 10
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// def_people_respawning := 2 ;
 697: LD_ADDR_EXP 11
 701: PUSH
 702: LD_INT 2
 704: ST_TO_ADDR
// def_amount_of_apemen := 3 ;
 705: LD_ADDR_EXP 12
 709: PUSH
 710: LD_INT 3
 712: ST_TO_ADDR
// def_siberite_bomb := 0 ;
 713: LD_ADDR_EXP 13
 717: PUSH
 718: LD_INT 0
 720: ST_TO_ADDR
// def_builduptime := 1 ;
 721: LD_ADDR_EXP 14
 725: PUSH
 726: LD_INT 1
 728: ST_TO_ADDR
// tech_level = 4 ;
 729: LD_ADDR_VAR 0 3
 733: PUSH
 734: LD_INT 4
 736: ST_TO_ADDR
// def_win_rules = 0 ;
 737: LD_ADDR_EXP 30
 741: PUSH
 742: LD_INT 0
 744: ST_TO_ADDR
// end ; if isSGUI then
 745: LD_OWVAR 83
 749: IFFALSE 757
// setMpTechs ( ) else
 751: CALL 9000 0 0
 755: GO 770
// SetMpTechLevel ( tech_level + 1 ) ;
 757: LD_VAR 0 3
 761: PUSH
 762: LD_INT 1
 764: PLUS
 765: PPUSH
 766: CALL 9147 0 1
// is_depot := [ 0 , 1 , 1 ] [ def_base_level + 1 ] ;
 770: LD_ADDR_EXP 17
 774: PUSH
 775: LD_INT 0
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 1
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: LIST
 788: PUSH
 789: LD_EXP 1
 793: PUSH
 794: LD_INT 1
 796: PLUS
 797: ARRAY
 798: ST_TO_ADDR
// number_of_breastworks := [ 0 , 0 , 3 ] [ def_base_level + 1 ] ;
 799: LD_ADDR_EXP 18
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: PUSH
 818: LD_EXP 1
 822: PUSH
 823: LD_INT 1
 825: PLUS
 826: ARRAY
 827: ST_TO_ADDR
// number_of_people := [ 9 , 12 , 15 , 24 ] [ def_amount_of_people + 1 ] ;
 828: LD_ADDR_EXP 19
 832: PUSH
 833: LD_INT 9
 835: PUSH
 836: LD_INT 12
 838: PUSH
 839: LD_INT 15
 841: PUSH
 842: LD_INT 24
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: PUSH
 851: LD_EXP 2
 855: PUSH
 856: LD_INT 1
 858: PLUS
 859: ARRAY
 860: ST_TO_ADDR
// skill_level := [ 2 , 3 , 4 , 5 ] [ def_skill_level + 1 ] ;
 861: LD_ADDR_EXP 20
 865: PUSH
 866: LD_INT 2
 868: PUSH
 869: LD_INT 3
 871: PUSH
 872: LD_INT 4
 874: PUSH
 875: LD_INT 5
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: LD_EXP 3
 888: PUSH
 889: LD_INT 1
 891: PLUS
 892: ARRAY
 893: ST_TO_ADDR
// starting_resources := [ [ 0 , 0 , 0 ] , [ 30 , 0 , 0 ] , [ 50 , 20 , 0 ] , [ 80 , 40 , 20 ] ] [ def_starting_resources + 1 ] ;
 894: LD_ADDR_EXP 22
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 0
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: LIST
 912: PUSH
 913: LD_INT 30
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 0
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: PUSH
 927: LD_INT 50
 929: PUSH
 930: LD_INT 20
 932: PUSH
 933: LD_INT 0
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 80
 943: PUSH
 944: LD_INT 40
 946: PUSH
 947: LD_INT 20
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: PUSH
 961: LD_EXP 4
 965: PUSH
 966: LD_INT 1
 968: PLUS
 969: ARRAY
 970: ST_TO_ADDR
// starting_crates := [ [ 10 ] , [ 7 , 14 ] , [ 6 , 12 , 18 ] , [ 5 , 10 , 15 , 20 ] ] [ def_starting_resources + 1 ] ;
 971: LD_ADDR_EXP 21
 975: PUSH
 976: LD_INT 10
 978: PUSH
 979: EMPTY
 980: LIST
 981: PUSH
 982: LD_INT 7
 984: PUSH
 985: LD_INT 14
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 6
 994: PUSH
 995: LD_INT 12
 997: PUSH
 998: LD_INT 18
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: LIST
1005: PUSH
1006: LD_INT 5
1008: PUSH
1009: LD_INT 10
1011: PUSH
1012: LD_INT 15
1014: PUSH
1015: LD_INT 20
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_EXP 4
1034: PUSH
1035: LD_INT 1
1037: PLUS
1038: ARRAY
1039: ST_TO_ADDR
// shipments_density := [ 150 , 125 , 100 ] [ def_shipments_density + 1 ] ;
1040: LD_ADDR_EXP 23
1044: PUSH
1045: LD_INT 150
1047: PUSH
1048: LD_INT 125
1050: PUSH
1051: LD_INT 100
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_EXP 5
1063: PUSH
1064: LD_INT 1
1066: PLUS
1067: ARRAY
1068: ST_TO_ADDR
// respawning_time_min := [ 0 0$0 , 5 5$00 , 3 3$0 ] [ def_people_respawning + 1 ] ;
1069: LD_ADDR_EXP 27
1073: PUSH
1074: LD_INT 0
1076: PUSH
1077: LD_INT 10500
1079: PUSH
1080: LD_INT 6300
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_EXP 11
1092: PUSH
1093: LD_INT 1
1095: PLUS
1096: ARRAY
1097: ST_TO_ADDR
// respawning_time_max := [ 0 0$0 , 15 15$00 , 5 5$0 ] [ def_people_respawning + 1 ] ;
1098: LD_ADDR_EXP 28
1102: PUSH
1103: LD_INT 0
1105: PUSH
1106: LD_INT 31500
1108: PUSH
1109: LD_INT 10500
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: LIST
1116: PUSH
1117: LD_EXP 11
1121: PUSH
1122: LD_INT 1
1124: PLUS
1125: ARRAY
1126: ST_TO_ADDR
// amount_of_apemen := [ 0 , 1 , 2 , 3 ] [ def_amount_of_apemen + 1 ] ;
1127: LD_ADDR_EXP 25
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: LD_INT 1
1137: PUSH
1138: LD_INT 2
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: LIST
1148: LIST
1149: PUSH
1150: LD_EXP 12
1154: PUSH
1155: LD_INT 1
1157: PLUS
1158: ARRAY
1159: ST_TO_ADDR
// morale_decreasing_time = [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] [ def_morale_flags + 1 ] ;
1160: LD_ADDR_EXP 24
1164: PUSH
1165: LD_INT 1
1167: NEG
1168: PUSH
1169: LD_INT 350
1171: PUSH
1172: LD_INT 700
1174: PUSH
1175: LD_INT 1400
1177: PUSH
1178: LD_INT 0
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: LIST
1185: LIST
1186: LIST
1187: PUSH
1188: LD_EXP 9
1192: PUSH
1193: LD_INT 1
1195: PLUS
1196: ARRAY
1197: ST_TO_ADDR
// battle_flags_id = [ ] ;
1198: LD_ADDR_EXP 44
1202: PUSH
1203: EMPTY
1204: ST_TO_ADDR
// siberite_bomb_Delay := [ 0 , 1 , 30 30$00 , 60 60$00 , 90 90$00 , 120 120$00 ] [ def_siberite_bomb + 1 ] ;
1205: LD_ADDR_EXP 29
1209: PUSH
1210: LD_INT 0
1212: PUSH
1213: LD_INT 1
1215: PUSH
1216: LD_INT 63000
1218: PUSH
1219: LD_INT 126000
1221: PUSH
1222: LD_INT 189000
1224: PUSH
1225: LD_INT 252000
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: PUSH
1236: LD_EXP 13
1240: PUSH
1241: LD_INT 1
1243: PLUS
1244: ARRAY
1245: ST_TO_ADDR
// end ;
1246: LD_VAR 0 1
1250: RET
// function init_map ; var i , j ; begin
1251: LD_INT 0
1253: PPUSH
1254: PPUSH
1255: PPUSH
// normal_oil_deposits_locations := [ [ 17 , 4 ] , [ 72 , 5 ] , [ 157 , 22 ] , [ 205 , 111 ] , [ 221 , 195 ] , [ 169 , 196 ] , [ 93 , 177 ] , [ 52 , 92 ] ] ;
1256: LD_ADDR_EXP 40
1260: PUSH
1261: LD_INT 17
1263: PUSH
1264: LD_INT 4
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 72
1273: PUSH
1274: LD_INT 5
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: LD_INT 157
1283: PUSH
1284: LD_INT 22
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 205
1293: PUSH
1294: LD_INT 111
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 221
1303: PUSH
1304: LD_INT 195
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: LD_INT 169
1313: PUSH
1314: LD_INT 196
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 93
1323: PUSH
1324: LD_INT 177
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 52
1333: PUSH
1334: LD_INT 92
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: ST_TO_ADDR
// extra_oil_deposits_locations := [ [ [ 17 , 4 ] , [ 16 , 23 ] ] , [ [ 72 , 5 ] , [ 88 , 28 ] ] , [ [ 157 , 22 ] , [ 133 , 12 ] ] , [ [ 205 , 111 ] , [ 200 , 95 ] ] , [ [ 221 , 195 ] , [ 249 , 190 ] ] , [ [ 169 , 196 ] , [ 180 , 197 ] ] , [ [ 93 , 177 ] , [ 114 , 194 ] ] , [ [ 52 , 92 ] , [ 58 , 107 ] ] ] ;
1351: LD_ADDR_EXP 41
1355: PUSH
1356: LD_INT 17
1358: PUSH
1359: LD_INT 4
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 16
1368: PUSH
1369: LD_INT 23
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: PUSH
1380: LD_INT 72
1382: PUSH
1383: LD_INT 5
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: PUSH
1390: LD_INT 88
1392: PUSH
1393: LD_INT 28
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: LD_INT 157
1406: PUSH
1407: LD_INT 22
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 133
1416: PUSH
1417: LD_INT 12
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 205
1430: PUSH
1431: LD_INT 111
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: LD_INT 200
1440: PUSH
1441: LD_INT 95
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 221
1454: PUSH
1455: LD_INT 195
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 249
1464: PUSH
1465: LD_INT 190
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: EMPTY
1473: LIST
1474: LIST
1475: PUSH
1476: LD_INT 169
1478: PUSH
1479: LD_INT 196
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: PUSH
1486: LD_INT 180
1488: PUSH
1489: LD_INT 197
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 93
1502: PUSH
1503: LD_INT 177
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 114
1512: PUSH
1513: LD_INT 194
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: LD_INT 52
1526: PUSH
1527: LD_INT 92
1529: PUSH
1530: EMPTY
1531: LIST
1532: LIST
1533: PUSH
1534: LD_INT 58
1536: PUSH
1537: LD_INT 107
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: ST_TO_ADDR
// normal_sib_deposits_locations := [ [ 12 , 12 ] , [ 99 , 19 ] , [ 139 , 5 ] , [ 207 , 100 ] , [ 244 , 181 ] , [ 183 , 196 ] , [ 117 , 195 ] , [ 54 , 104 ] ] ;
1558: LD_ADDR_EXP 42
1562: PUSH
1563: LD_INT 12
1565: PUSH
1566: LD_INT 12
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 99
1575: PUSH
1576: LD_INT 19
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PUSH
1583: LD_INT 139
1585: PUSH
1586: LD_INT 5
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 207
1595: PUSH
1596: LD_INT 100
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 244
1605: PUSH
1606: LD_INT 181
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 183
1615: PUSH
1616: LD_INT 196
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 117
1625: PUSH
1626: LD_INT 195
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PUSH
1633: LD_INT 54
1635: PUSH
1636: LD_INT 104
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: ST_TO_ADDR
// extra_sib_deposits_locations := [ ] ;
1653: LD_ADDR_EXP 43
1657: PUSH
1658: EMPTY
1659: ST_TO_ADDR
// depot_def := [ [ 32 , 24 , 2 ] , [ 87 , 18 , 3 ] , [ 146 , 28 , 3 ] , [ 188 , 103 , 4 ] , [ 224 , 180 , 5 ] , [ 168 , 180 , 0 ] , [ 105 , 170 , 0 ] , [ 71 , 102 , 1 ] ] ;
1660: LD_ADDR_EXP 37
1664: PUSH
1665: LD_INT 32
1667: PUSH
1668: LD_INT 24
1670: PUSH
1671: LD_INT 2
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: LIST
1678: PUSH
1679: LD_INT 87
1681: PUSH
1682: LD_INT 18
1684: PUSH
1685: LD_INT 3
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: LIST
1692: PUSH
1693: LD_INT 146
1695: PUSH
1696: LD_INT 28
1698: PUSH
1699: LD_INT 3
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_INT 188
1709: PUSH
1710: LD_INT 103
1712: PUSH
1713: LD_INT 4
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 224
1723: PUSH
1724: LD_INT 180
1726: PUSH
1727: LD_INT 5
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: LIST
1734: PUSH
1735: LD_INT 168
1737: PUSH
1738: LD_INT 180
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: PUSH
1749: LD_INT 105
1751: PUSH
1752: LD_INT 170
1754: PUSH
1755: LD_INT 0
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: LIST
1762: PUSH
1763: LD_INT 71
1765: PUSH
1766: LD_INT 102
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: ST_TO_ADDR
// for i in depot_def do
1787: LD_ADDR_VAR 0 2
1791: PUSH
1792: LD_EXP 37
1796: PUSH
1797: FOR_IN
1798: IFFALSE 1874
// start_def := start_def ^ [ [ ShiftX ( i [ 1 ] , i [ 3 ] , - 4 ) , ShiftY ( i [ 2 ] , i [ 3 ] , - 4 ) ] ] ;
1800: LD_ADDR_EXP 39
1804: PUSH
1805: LD_EXP 39
1809: PUSH
1810: LD_VAR 0 2
1814: PUSH
1815: LD_INT 1
1817: ARRAY
1818: PPUSH
1819: LD_VAR 0 2
1823: PUSH
1824: LD_INT 3
1826: ARRAY
1827: PPUSH
1828: LD_INT 4
1830: NEG
1831: PPUSH
1832: CALL_OW 272
1836: PUSH
1837: LD_VAR 0 2
1841: PUSH
1842: LD_INT 2
1844: ARRAY
1845: PPUSH
1846: LD_VAR 0 2
1850: PUSH
1851: LD_INT 3
1853: ARRAY
1854: PPUSH
1855: LD_INT 4
1857: NEG
1858: PPUSH
1859: CALL_OW 273
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: ADD
1871: ST_TO_ADDR
1872: GO 1797
1874: POP
1875: POP
// breastworks_def := [ [ [ 50 , 40 , 5 ] , [ 47 , 17 , 4 ] , [ 29 , 39 , 0 ] ] , [ [ 107 , 27 , 4 ] , [ 67 , 10 , 1 ] , [ 91 , 35 , 0 ] ] , [ [ 165 , 44 , 5 ] , [ 123 , 16 , 2 ] , [ 141 , 39 , 0 ] ] , [ [ 179 , 85 , 3 ] , [ 172 , 102 , 1 ] , [ 196 , 118 , 5 ] ] , [ [ 210 , 182 , 1 ] , [ 226 , 164 , 3 ] , [ 209 , 164 , 2 ] ] , [ [ 156 , 183 , 1 ] , [ 184 , 184 , 4 ] , [ 161 , 166 , 3 ] ] , [ [ 86 , 156 , 2 ] , [ 124 , 180 , 4 ] , [ 106 , 155 , 3 ] ] , [ [ 87 , 102 , 4 ] , [ 63 , 83 , 3 ] , [ 79 , 120 , 0 ] ] ] ;
1876: LD_ADDR_EXP 38
1880: PUSH
1881: LD_INT 50
1883: PUSH
1884: LD_INT 40
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_INT 47
1897: PUSH
1898: LD_INT 17
1900: PUSH
1901: LD_INT 4
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: PUSH
1909: LD_INT 29
1911: PUSH
1912: LD_INT 39
1914: PUSH
1915: LD_INT 0
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 107
1930: PUSH
1931: LD_INT 27
1933: PUSH
1934: LD_INT 4
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 67
1944: PUSH
1945: LD_INT 10
1947: PUSH
1948: LD_INT 1
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 91
1958: PUSH
1959: LD_INT 35
1961: PUSH
1962: LD_INT 0
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: LIST
1974: PUSH
1975: LD_INT 165
1977: PUSH
1978: LD_INT 44
1980: PUSH
1981: LD_INT 5
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: PUSH
1989: LD_INT 123
1991: PUSH
1992: LD_INT 16
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: LIST
2002: PUSH
2003: LD_INT 141
2005: PUSH
2006: LD_INT 39
2008: PUSH
2009: LD_INT 0
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: LIST
2021: PUSH
2022: LD_INT 179
2024: PUSH
2025: LD_INT 85
2027: PUSH
2028: LD_INT 3
2030: PUSH
2031: EMPTY
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_INT 172
2038: PUSH
2039: LD_INT 102
2041: PUSH
2042: LD_INT 1
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: PUSH
2050: LD_INT 196
2052: PUSH
2053: LD_INT 118
2055: PUSH
2056: LD_INT 5
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PUSH
2064: EMPTY
2065: LIST
2066: LIST
2067: LIST
2068: PUSH
2069: LD_INT 210
2071: PUSH
2072: LD_INT 182
2074: PUSH
2075: LD_INT 1
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 226
2085: PUSH
2086: LD_INT 164
2088: PUSH
2089: LD_INT 3
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: LIST
2096: PUSH
2097: LD_INT 209
2099: PUSH
2100: LD_INT 164
2102: PUSH
2103: LD_INT 2
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: LIST
2115: PUSH
2116: LD_INT 156
2118: PUSH
2119: LD_INT 183
2121: PUSH
2122: LD_INT 1
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 184
2132: PUSH
2133: LD_INT 184
2135: PUSH
2136: LD_INT 4
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 161
2146: PUSH
2147: LD_INT 166
2149: PUSH
2150: LD_INT 3
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 86
2165: PUSH
2166: LD_INT 156
2168: PUSH
2169: LD_INT 2
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 124
2179: PUSH
2180: LD_INT 180
2182: PUSH
2183: LD_INT 4
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_INT 106
2193: PUSH
2194: LD_INT 155
2196: PUSH
2197: LD_INT 3
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 87
2212: PUSH
2213: LD_INT 102
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: LIST
2223: PUSH
2224: LD_INT 63
2226: PUSH
2227: LD_INT 83
2229: PUSH
2230: LD_INT 3
2232: PUSH
2233: EMPTY
2234: LIST
2235: LIST
2236: LIST
2237: PUSH
2238: LD_INT 79
2240: PUSH
2241: LD_INT 120
2243: PUSH
2244: LD_INT 0
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: ST_TO_ADDR
// for i = 1 to Side_Positions do
2267: LD_ADDR_VAR 0 2
2271: PUSH
2272: DOUBLE
2273: LD_INT 1
2275: DEC
2276: ST_TO_ADDR
2277: LD_EXP 34
2281: PUSH
2282: FOR_TO
2283: IFFALSE 2413
// begin if not Side_Positions [ i ] then
2285: LD_EXP 34
2289: PUSH
2290: LD_VAR 0 2
2294: ARRAY
2295: NOT
2296: IFFALSE 2300
// continue ;
2298: GO 2282
// if def_extra_oil_deposits then
2300: LD_EXP 6
2304: IFFALSE 2362
// for j in extra_oil_deposits_locations [ Side_Positions [ i ] ] do
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: LD_EXP 41
2315: PUSH
2316: LD_EXP 34
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: ARRAY
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2358
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) else
2331: LD_VAR 0 3
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_VAR 0 3
2344: PUSH
2345: LD_INT 2
2347: ARRAY
2348: PPUSH
2349: LD_INT 2
2351: PPUSH
2352: CALL_OW 62
2356: GO 2328
2358: POP
2359: POP
2360: GO 2411
// CreateDepositXY ( normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_oil_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_oil ) ;
2362: LD_EXP 40
2366: PUSH
2367: LD_EXP 34
2371: PUSH
2372: LD_VAR 0 2
2376: ARRAY
2377: ARRAY
2378: PUSH
2379: LD_INT 1
2381: ARRAY
2382: PPUSH
2383: LD_EXP 40
2387: PUSH
2388: LD_EXP 34
2392: PUSH
2393: LD_VAR 0 2
2397: ARRAY
2398: ARRAY
2399: PUSH
2400: LD_INT 2
2402: ARRAY
2403: PPUSH
2404: LD_INT 2
2406: PPUSH
2407: CALL_OW 62
// end ;
2411: GO 2282
2413: POP
2414: POP
// if def_extra_sib_deposits then
2415: LD_EXP 7
2419: IFFALSE 2573
// for i = 1 to Side_Positions do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_EXP 34
2435: PUSH
2436: FOR_TO
2437: IFFALSE 2571
// begin if not Side_Positions [ i ] then
2439: LD_EXP 34
2443: PUSH
2444: LD_VAR 0 2
2448: ARRAY
2449: NOT
2450: IFFALSE 2454
// continue ;
2452: GO 2436
// if def_extra_sib_deposits = 2 then
2454: LD_EXP 7
2458: PUSH
2459: LD_INT 2
2461: EQUAL
2462: IFFALSE 2520
// for j in extra_sib_deposits_locations [ Side_Positions [ i ] ] do
2464: LD_ADDR_VAR 0 3
2468: PUSH
2469: LD_EXP 43
2473: PUSH
2474: LD_EXP 34
2478: PUSH
2479: LD_VAR 0 2
2483: ARRAY
2484: ARRAY
2485: PUSH
2486: FOR_IN
2487: IFFALSE 2516
// CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) else
2489: LD_VAR 0 3
2493: PUSH
2494: LD_INT 1
2496: ARRAY
2497: PPUSH
2498: LD_VAR 0 3
2502: PUSH
2503: LD_INT 2
2505: ARRAY
2506: PPUSH
2507: LD_INT 3
2509: PPUSH
2510: CALL_OW 62
2514: GO 2486
2516: POP
2517: POP
2518: GO 2569
// CreateDepositXY ( normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 1 ] , normal_sib_deposits_locations [ Side_Positions [ i ] ] [ 2 ] , mat_siberit ) ;
2520: LD_EXP 42
2524: PUSH
2525: LD_EXP 34
2529: PUSH
2530: LD_VAR 0 2
2534: ARRAY
2535: ARRAY
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: LD_EXP 42
2545: PUSH
2546: LD_EXP 34
2550: PUSH
2551: LD_VAR 0 2
2555: ARRAY
2556: ARRAY
2557: PUSH
2558: LD_INT 2
2560: ARRAY
2561: PPUSH
2562: LD_INT 3
2564: PPUSH
2565: CALL_OW 62
// end ;
2569: GO 2436
2571: POP
2572: POP
// end ;
2573: LD_VAR 0 1
2577: RET
// function set_shared_visions_and_alliances ; var i , j ; begin
2578: LD_INT 0
2580: PPUSH
2581: PPUSH
2582: PPUSH
// if not Team_Game then
2583: LD_EXP 36
2587: NOT
2588: IFFALSE 2686
// begin for i = 1 to 8 do
2590: LD_ADDR_VAR 0 2
2594: PUSH
2595: DOUBLE
2596: LD_INT 1
2598: DEC
2599: ST_TO_ADDR
2600: LD_INT 8
2602: PUSH
2603: FOR_TO
2604: IFFALSE 2682
// for j = 1 to 8 do
2606: LD_ADDR_VAR 0 3
2610: PUSH
2611: DOUBLE
2612: LD_INT 1
2614: DEC
2615: ST_TO_ADDR
2616: LD_INT 8
2618: PUSH
2619: FOR_TO
2620: IFFALSE 2678
// if i <> j then
2622: LD_VAR 0 2
2626: PUSH
2627: LD_VAR 0 3
2631: NONEQUAL
2632: IFFALSE 2656
// SetAttitude ( i , j , att_neutral , true ) else
2634: LD_VAR 0 2
2638: PPUSH
2639: LD_VAR 0 3
2643: PPUSH
2644: LD_INT 0
2646: PPUSH
2647: LD_INT 1
2649: PPUSH
2650: CALL_OW 80
2654: GO 2676
// SetAttitude ( i , j , att_friend , true ) ;
2656: LD_VAR 0 2
2660: PPUSH
2661: LD_VAR 0 3
2665: PPUSH
2666: LD_INT 1
2668: PPUSH
2669: LD_INT 1
2671: PPUSH
2672: CALL_OW 80
2676: GO 2619
2678: POP
2679: POP
2680: GO 2603
2682: POP
2683: POP
// end else
2684: GO 2861
// begin if def_shared_vision then
2686: LD_EXP 8
2690: IFFALSE 2755
// begin for i in Teams do
2692: LD_ADDR_VAR 0 2
2696: PUSH
2697: LD_EXP 32
2701: PUSH
2702: FOR_IN
2703: IFFALSE 2753
// for j = 2 to i do
2705: LD_ADDR_VAR 0 3
2709: PUSH
2710: DOUBLE
2711: LD_INT 2
2713: DEC
2714: ST_TO_ADDR
2715: LD_VAR 0 2
2719: PUSH
2720: FOR_TO
2721: IFFALSE 2749
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
2723: LD_VAR 0 2
2727: PUSH
2728: LD_VAR 0 3
2732: ARRAY
2733: PPUSH
2734: LD_VAR 0 2
2738: PUSH
2739: LD_INT 1
2741: ARRAY
2742: PPUSH
2743: CALL_OW 343
2747: GO 2720
2749: POP
2750: POP
2751: GO 2702
2753: POP
2754: POP
// end ; for i = 1 to 8 do
2755: LD_ADDR_VAR 0 2
2759: PUSH
2760: DOUBLE
2761: LD_INT 1
2763: DEC
2764: ST_TO_ADDR
2765: LD_INT 8
2767: PUSH
2768: FOR_TO
2769: IFFALSE 2859
// for j = 1 to 8 do
2771: LD_ADDR_VAR 0 3
2775: PUSH
2776: DOUBLE
2777: LD_INT 1
2779: DEC
2780: ST_TO_ADDR
2781: LD_INT 8
2783: PUSH
2784: FOR_TO
2785: IFFALSE 2855
// if Side_Teams [ i ] = Side_Teams [ j ] then
2787: LD_EXP 31
2791: PUSH
2792: LD_VAR 0 2
2796: ARRAY
2797: PUSH
2798: LD_EXP 31
2802: PUSH
2803: LD_VAR 0 3
2807: ARRAY
2808: EQUAL
2809: IFFALSE 2833
// SetAttitude ( i , j , att_friend , true ) else
2811: LD_VAR 0 2
2815: PPUSH
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_INT 1
2823: PPUSH
2824: LD_INT 1
2826: PPUSH
2827: CALL_OW 80
2831: GO 2853
// SetAttitude ( i , j , att_enemy , true ) ;
2833: LD_VAR 0 2
2837: PPUSH
2838: LD_VAR 0 3
2842: PPUSH
2843: LD_INT 2
2845: PPUSH
2846: LD_INT 1
2848: PPUSH
2849: CALL_OW 80
2853: GO 2784
2855: POP
2856: POP
2857: GO 2768
2859: POP
2860: POP
// end ; end ;
2861: LD_VAR 0 1
2865: RET
// function prepare_people ( count , cl , x , y , r , building ) ; var i , j , un ; begin
2866: LD_INT 0
2868: PPUSH
2869: PPUSH
2870: PPUSH
2871: PPUSH
// result := [ ] ;
2872: LD_ADDR_VAR 0 7
2876: PUSH
2877: EMPTY
2878: ST_TO_ADDR
// for i := 1 to count do
2879: LD_ADDR_VAR 0 8
2883: PUSH
2884: DOUBLE
2885: LD_INT 1
2887: DEC
2888: ST_TO_ADDR
2889: LD_VAR 0 1
2893: PUSH
2894: FOR_TO
2895: IFFALSE 3313
// begin uc_direction := Rand ( 0 , 5 ) ;
2897: LD_ADDR_OWVAR 24
2901: PUSH
2902: LD_INT 0
2904: PPUSH
2905: LD_INT 5
2907: PPUSH
2908: CALL_OW 12
2912: ST_TO_ADDR
// if commander then
2913: LD_LOC 1
2917: IFFALSE 3026
// begin hc_name := mp_sides_players_names [ uc_side ] ;
2919: LD_ADDR_OWVAR 26
2923: PUSH
2924: LD_OWVAR 19
2928: PUSH
2929: LD_OWVAR 20
2933: ARRAY
2934: ST_TO_ADDR
// PrepareHuman ( Rand ( 1 , 2 ) , cl , skill_level + 2 ) ;
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 2
2940: PPUSH
2941: CALL_OW 12
2945: PPUSH
2946: LD_VAR 0 2
2950: PPUSH
2951: LD_EXP 20
2955: PUSH
2956: LD_INT 2
2958: PLUS
2959: PPUSH
2960: CALL_OW 380
// hc_importance := 105 ;
2964: LD_ADDR_OWVAR 32
2968: PUSH
2969: LD_INT 105
2971: ST_TO_ADDR
// commander := false ;
2972: LD_ADDR_LOC 1
2976: PUSH
2977: LD_INT 0
2979: ST_TO_ADDR
// if Multiplayer then
2980: LD_OWVAR 4
2984: IFFALSE 3024
// begin hc_gallery := MULTIAVATARS ;
2986: LD_ADDR_OWVAR 33
2990: PUSH
2991: LD_STRING MULTIAVATARS
2993: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( uc_side ) ;
2994: LD_ADDR_OWVAR 34
2998: PUSH
2999: LD_OWVAR 20
3003: PPUSH
3004: CALL_OW 525
3008: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( uc_side ) ;
3009: LD_ADDR_OWVAR 27
3013: PUSH
3014: LD_OWVAR 20
3018: PPUSH
3019: CALL_OW 526
3023: ST_TO_ADDR
// end ; end else
3024: GO 3089
// begin hc_name :=  ;
3026: LD_ADDR_OWVAR 26
3030: PUSH
3031: LD_STRING 
3033: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , cl , skill_level ) ;
3034: LD_INT 1
3036: PPUSH
3037: LD_INT 2
3039: PPUSH
3040: CALL_OW 12
3044: PPUSH
3045: LD_VAR 0 2
3049: PPUSH
3050: LD_EXP 20
3054: PPUSH
3055: CALL_OW 380
// hc_importance := 0 ;
3059: LD_ADDR_OWVAR 32
3063: PUSH
3064: LD_INT 0
3066: ST_TO_ADDR
// if Multiplayer then
3067: LD_OWVAR 4
3071: IFFALSE 3089
// begin hc_gallery :=  ;
3073: LD_ADDR_OWVAR 33
3077: PUSH
3078: LD_STRING 
3080: ST_TO_ADDR
// hc_face_number := 0 ;
3081: LD_ADDR_OWVAR 34
3085: PUSH
3086: LD_INT 0
3088: ST_TO_ADDR
// end ; end ; un := CreateHuman ;
3089: LD_ADDR_VAR 0 10
3093: PUSH
3094: CALL_OW 44
3098: ST_TO_ADDR
// if global_defined then
3099: LD_LOC 3
3103: IFFALSE 3243
// begin if ( cl = class_soldier ) then
3105: LD_VAR 0 2
3109: PUSH
3110: LD_INT 1
3112: EQUAL
3113: IFFALSE 3133
// j := i + soldiers_created else
3115: LD_ADDR_VAR 0 9
3119: PUSH
3120: LD_VAR 0 8
3124: PUSH
3125: LD_LOC 4
3129: PLUS
3130: ST_TO_ADDR
3131: GO 3143
// j := i ;
3133: LD_ADDR_VAR 0 9
3137: PUSH
3138: LD_VAR 0 8
3142: ST_TO_ADDR
// CopySkills ( global_units [ cl ] [ j ] , un ) ;
3143: LD_LOC 2
3147: PUSH
3148: LD_VAR 0 2
3152: ARRAY
3153: PUSH
3154: LD_VAR 0 9
3158: ARRAY
3159: PPUSH
3160: LD_VAR 0 10
3164: PPUSH
3165: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( global_units [ cl ] [ j ] , attr_speed ) ) ;
3169: LD_VAR 0 10
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_LOC 2
3181: PUSH
3182: LD_VAR 0 2
3186: ARRAY
3187: PUSH
3188: LD_VAR 0 9
3192: ARRAY
3193: PPUSH
3194: LD_INT 2
3196: PPUSH
3197: CALL_OW 260
3201: PPUSH
3202: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( global_units [ cl ] [ j ] , attr_stamina ) ) ;
3206: LD_VAR 0 10
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: LD_LOC 2
3218: PUSH
3219: LD_VAR 0 2
3223: ARRAY
3224: PUSH
3225: LD_VAR 0 9
3229: ARRAY
3230: PPUSH
3231: LD_INT 1
3233: PPUSH
3234: CALL_OW 260
3238: PPUSH
3239: CALL_OW 239
// end ; if building then
3243: LD_VAR 0 6
3247: IFFALSE 3265
// PlaceHumanInUnit ( un , building ) else
3249: LD_VAR 0 10
3253: PPUSH
3254: LD_VAR 0 6
3258: PPUSH
3259: CALL_OW 52
3263: GO 3292
// PlaceUnitXYR ( un , x , y , r , false ) ;
3265: LD_VAR 0 10
3269: PPUSH
3270: LD_VAR 0 3
3274: PPUSH
3275: LD_VAR 0 4
3279: PPUSH
3280: LD_VAR 0 5
3284: PPUSH
3285: LD_INT 0
3287: PPUSH
3288: CALL_OW 50
// result := result ^ [ un ] ;
3292: LD_ADDR_VAR 0 7
3296: PUSH
3297: LD_VAR 0 7
3301: PUSH
3302: LD_VAR 0 10
3306: PUSH
3307: EMPTY
3308: LIST
3309: ADD
3310: ST_TO_ADDR
// end ;
3311: GO 2894
3313: POP
3314: POP
// if not global_defined then
3315: LD_LOC 3
3319: NOT
3320: IFFALSE 3398
// if ( global_units >= cl ) then
3322: LD_LOC 2
3326: PUSH
3327: LD_VAR 0 2
3331: GREATEREQUAL
3332: IFFALSE 3373
// global_units := Replace ( global_units , cl , global_units [ cl ] ^ result ) else
3334: LD_ADDR_LOC 2
3338: PUSH
3339: LD_LOC 2
3343: PPUSH
3344: LD_VAR 0 2
3348: PPUSH
3349: LD_LOC 2
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PUSH
3360: LD_VAR 0 7
3364: ADD
3365: PPUSH
3366: CALL_OW 1
3370: ST_TO_ADDR
3371: GO 3398
// global_units := Replace ( global_units , cl , result ) ;
3373: LD_ADDR_LOC 2
3377: PUSH
3378: LD_LOC 2
3382: PPUSH
3383: LD_VAR 0 2
3387: PPUSH
3388: LD_VAR 0 7
3392: PPUSH
3393: CALL_OW 1
3397: ST_TO_ADDR
// if commander then
3398: LD_LOC 1
3402: IFFALSE 3449
// begin heroes = replace ( heroes , uc_side , heroes [ uc_side ] ^ un ) ;
3404: LD_ADDR_EXP 45
3408: PUSH
3409: LD_EXP 45
3413: PPUSH
3414: LD_OWVAR 20
3418: PPUSH
3419: LD_EXP 45
3423: PUSH
3424: LD_OWVAR 20
3428: ARRAY
3429: PUSH
3430: LD_VAR 0 10
3434: ADD
3435: PPUSH
3436: CALL_OW 1
3440: ST_TO_ADDR
// commander := false ;
3441: LD_ADDR_LOC 1
3445: PUSH
3446: LD_INT 0
3448: ST_TO_ADDR
// end ; end ;
3449: LD_VAR 0 7
3453: RET
// function prepare_side ( side ) ; var pos , x , y , dir , i , r , br , dep ; begin
3454: LD_INT 0
3456: PPUSH
3457: PPUSH
3458: PPUSH
3459: PPUSH
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
3464: PPUSH
// if side in [ 0 , 9 ] then
3465: LD_VAR 0 1
3469: PUSH
3470: LD_INT 0
3472: PUSH
3473: LD_INT 9
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: IN
3480: IFFALSE 3484
// exit ;
3482: GO 4534
// pos := Side_Positions [ side ] ;
3484: LD_ADDR_VAR 0 3
3488: PUSH
3489: LD_EXP 34
3493: PUSH
3494: LD_VAR 0 1
3498: ARRAY
3499: ST_TO_ADDR
// uc_nation := Side_Nations [ side ] ;
3500: LD_ADDR_OWVAR 21
3504: PUSH
3505: LD_EXP 35
3509: PUSH
3510: LD_VAR 0 1
3514: ARRAY
3515: ST_TO_ADDR
// uc_side := side ;
3516: LD_ADDR_OWVAR 20
3520: PUSH
3521: LD_VAR 0 1
3525: ST_TO_ADDR
// x := depot_def [ pos ] [ 1 ] ;
3526: LD_ADDR_VAR 0 4
3530: PUSH
3531: LD_EXP 37
3535: PUSH
3536: LD_VAR 0 3
3540: ARRAY
3541: PUSH
3542: LD_INT 1
3544: ARRAY
3545: ST_TO_ADDR
// y := depot_def [ pos ] [ 2 ] ;
3546: LD_ADDR_VAR 0 5
3550: PUSH
3551: LD_EXP 37
3555: PUSH
3556: LD_VAR 0 3
3560: ARRAY
3561: PUSH
3562: LD_INT 2
3564: ARRAY
3565: ST_TO_ADDR
// dir := depot_def [ pos ] [ 3 ] ;
3566: LD_ADDR_VAR 0 6
3570: PUSH
3571: LD_EXP 37
3575: PUSH
3576: LD_VAR 0 3
3580: ARRAY
3581: PUSH
3582: LD_INT 3
3584: ARRAY
3585: ST_TO_ADDR
// if is_depot then
3586: LD_EXP 17
3590: IFFALSE 3723
// begin bc_type = b_depot ;
3592: LD_ADDR_OWVAR 42
3596: PUSH
3597: LD_INT 0
3599: ST_TO_ADDR
// dep := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
3600: LD_ADDR_VAR 0 10
3604: PUSH
3605: LD_VAR 0 4
3609: PPUSH
3610: LD_VAR 0 5
3614: PPUSH
3615: LD_VAR 0 6
3619: PPUSH
3620: CALL_OW 47
3624: ST_TO_ADDR
// SetBName ( dep , @ & side ) ;
3625: LD_VAR 0 10
3629: PPUSH
3630: LD_STRING @
3632: PUSH
3633: LD_VAR 0 1
3637: STR
3638: PPUSH
3639: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_cans , starting_resources [ mat_cans ] ) ;
3643: LD_VAR 0 10
3647: PPUSH
3648: CALL_OW 274
3652: PPUSH
3653: LD_INT 1
3655: PPUSH
3656: LD_EXP 22
3660: PUSH
3661: LD_INT 1
3663: ARRAY
3664: PPUSH
3665: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , starting_resources [ mat_oil ] ) ;
3669: LD_VAR 0 10
3673: PPUSH
3674: CALL_OW 274
3678: PPUSH
3679: LD_INT 2
3681: PPUSH
3682: LD_EXP 22
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: PPUSH
3691: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_siberit , starting_resources [ mat_siberit ] ) ;
3695: LD_VAR 0 10
3699: PPUSH
3700: CALL_OW 274
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_EXP 22
3712: PUSH
3713: LD_INT 3
3715: ARRAY
3716: PPUSH
3717: CALL_OW 277
// end else
3721: GO 3867
// begin for i := 1 to 3 do
3723: LD_ADDR_VAR 0 7
3727: PUSH
3728: DOUBLE
3729: LD_INT 1
3731: DEC
3732: ST_TO_ADDR
3733: LD_INT 3
3735: PUSH
3736: FOR_TO
3737: IFFALSE 3865
// begin r := starting_resources [ i ] ;
3739: LD_ADDR_VAR 0 8
3743: PUSH
3744: LD_EXP 22
3748: PUSH
3749: LD_VAR 0 7
3753: ARRAY
3754: ST_TO_ADDR
// while r >= 10 do
3755: LD_VAR 0 8
3759: PUSH
3760: LD_INT 10
3762: GREATEREQUAL
3763: IFFALSE 3863
// if r > 50 then
3765: LD_VAR 0 8
3769: PUSH
3770: LD_INT 50
3772: GREATER
3773: IFFALSE 3819
// begin CreateResourcesXYR ( i , 5 , x , y , 4 , false ) ;
3775: LD_VAR 0 7
3779: PPUSH
3780: LD_INT 5
3782: PPUSH
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_VAR 0 5
3792: PPUSH
3793: LD_INT 4
3795: PPUSH
3796: LD_INT 0
3798: PPUSH
3799: CALL_OW 60
// r := r - 50 ;
3803: LD_ADDR_VAR 0 8
3807: PUSH
3808: LD_VAR 0 8
3812: PUSH
3813: LD_INT 50
3815: MINUS
3816: ST_TO_ADDR
// end else
3817: GO 3861
// begin CreateResourcesXYR ( i , r div 10 , x , y , 4 , false ) ;
3819: LD_VAR 0 7
3823: PPUSH
3824: LD_VAR 0 8
3828: PUSH
3829: LD_INT 10
3831: DIV
3832: PPUSH
3833: LD_VAR 0 4
3837: PPUSH
3838: LD_VAR 0 5
3842: PPUSH
3843: LD_INT 4
3845: PPUSH
3846: LD_INT 0
3848: PPUSH
3849: CALL_OW 60
// r := 0 ;
3853: LD_ADDR_VAR 0 8
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// end ;
3861: GO 3755
// end ;
3863: GO 3736
3865: POP
3866: POP
// end ; for r in starting_crates do
3867: LD_ADDR_VAR 0 8
3871: PUSH
3872: LD_EXP 21
3876: PUSH
3877: FOR_IN
3878: IFFALSE 3910
// CreateResourcesXYR ( mat_cans , 5 , x , y , r , false ) ;
3880: LD_INT 1
3882: PPUSH
3883: LD_INT 5
3885: PPUSH
3886: LD_VAR 0 4
3890: PPUSH
3891: LD_VAR 0 5
3895: PPUSH
3896: LD_VAR 0 8
3900: PPUSH
3901: LD_INT 0
3903: PPUSH
3904: CALL_OW 60
3908: GO 3877
3910: POP
3911: POP
// if def_morale_flags then
3912: LD_EXP 9
3916: IFFALSE 4055
// begin x := start_def [ pos ] [ 1 ] ;
3918: LD_ADDR_VAR 0 4
3922: PUSH
3923: LD_EXP 39
3927: PUSH
3928: LD_VAR 0 3
3932: ARRAY
3933: PUSH
3934: LD_INT 1
3936: ARRAY
3937: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
3938: LD_ADDR_VAR 0 5
3942: PUSH
3943: LD_EXP 39
3947: PUSH
3948: LD_VAR 0 3
3952: ARRAY
3953: PUSH
3954: LD_INT 2
3956: ARRAY
3957: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
3958: LD_VAR 0 4
3962: PPUSH
3963: LD_VAR 0 5
3967: PPUSH
3968: LD_INT 12
3970: PPUSH
3971: LD_INT 2
3973: PPUSH
3974: CALL_OW 349
// battle_flags_id := battle_flags_id ^ SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 50 ] , [ bfo_defend_bonus_building , 20 ] , [ bfo_height , 100 ] ] ) ;
3978: LD_ADDR_EXP 44
3982: PUSH
3983: LD_EXP 44
3987: PUSH
3988: LD_VAR 0 1
3992: PPUSH
3993: LD_VAR 0 4
3997: PPUSH
3998: LD_VAR 0 5
4002: PPUSH
4003: LD_INT 1
4005: PUSH
4006: LD_INT 100
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 50
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 3
4025: PUSH
4026: LD_INT 20
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: LD_INT 20
4035: PUSH
4036: LD_INT 100
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: LIST
4048: PPUSH
4049: CALL_OW 418
4053: ADD
4054: ST_TO_ADDR
// end ; commander := true ;
4055: LD_ADDR_LOC 1
4059: PUSH
4060: LD_INT 1
4062: ST_TO_ADDR
// soldiers_created := 0 ;
4063: LD_ADDR_LOC 4
4067: PUSH
4068: LD_INT 0
4070: ST_TO_ADDR
// for i := 1 to number_of_breastworks do
4071: LD_ADDR_VAR 0 7
4075: PUSH
4076: DOUBLE
4077: LD_INT 1
4079: DEC
4080: ST_TO_ADDR
4081: LD_EXP 18
4085: PUSH
4086: FOR_TO
4087: IFFALSE 4240
// begin x := breastworks_def [ pos ] [ i ] [ 1 ] ;
4089: LD_ADDR_VAR 0 4
4093: PUSH
4094: LD_EXP 38
4098: PUSH
4099: LD_VAR 0 3
4103: ARRAY
4104: PUSH
4105: LD_VAR 0 7
4109: ARRAY
4110: PUSH
4111: LD_INT 1
4113: ARRAY
4114: ST_TO_ADDR
// y := breastworks_def [ pos ] [ i ] [ 2 ] ;
4115: LD_ADDR_VAR 0 5
4119: PUSH
4120: LD_EXP 38
4124: PUSH
4125: LD_VAR 0 3
4129: ARRAY
4130: PUSH
4131: LD_VAR 0 7
4135: ARRAY
4136: PUSH
4137: LD_INT 2
4139: ARRAY
4140: ST_TO_ADDR
// dir := breastworks_def [ pos ] [ i ] [ 3 ] ;
4141: LD_ADDR_VAR 0 6
4145: PUSH
4146: LD_EXP 38
4150: PUSH
4151: LD_VAR 0 3
4155: ARRAY
4156: PUSH
4157: LD_VAR 0 7
4161: ARRAY
4162: PUSH
4163: LD_INT 3
4165: ARRAY
4166: ST_TO_ADDR
// bc_type := b_breastwork ;
4167: LD_ADDR_OWVAR 42
4171: PUSH
4172: LD_INT 31
4174: ST_TO_ADDR
// br := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
4175: LD_ADDR_VAR 0 9
4179: PUSH
4180: LD_VAR 0 4
4184: PPUSH
4185: LD_VAR 0 5
4189: PPUSH
4190: LD_VAR 0 6
4194: PPUSH
4195: CALL_OW 47
4199: ST_TO_ADDR
// prepare_people ( 1 , class_soldier , 0 , 0 , 0 , br ) ;
4200: LD_INT 1
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: LD_INT 0
4208: PPUSH
4209: LD_INT 0
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: LD_VAR 0 9
4219: PPUSH
4220: CALL 2866 0 6
// soldiers_created := soldiers_created + 1 ;
4224: LD_ADDR_LOC 4
4228: PUSH
4229: LD_LOC 4
4233: PUSH
4234: LD_INT 1
4236: PLUS
4237: ST_TO_ADDR
// end ;
4238: GO 4086
4240: POP
4241: POP
// x := start_def [ pos ] [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_EXP 39
4251: PUSH
4252: LD_VAR 0 3
4256: ARRAY
4257: PUSH
4258: LD_INT 1
4260: ARRAY
4261: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
4262: LD_ADDR_VAR 0 5
4266: PUSH
4267: LD_EXP 39
4271: PUSH
4272: LD_VAR 0 3
4276: ARRAY
4277: PUSH
4278: LD_INT 2
4280: ARRAY
4281: ST_TO_ADDR
// prepare_people ( nsol - number_of_breastworks , class_soldier , x , y , 5 , 0 ) ;
4282: LD_LOC 8
4286: PUSH
4287: LD_EXP 18
4291: MINUS
4292: PPUSH
4293: LD_INT 1
4295: PPUSH
4296: LD_VAR 0 4
4300: PPUSH
4301: LD_VAR 0 5
4305: PPUSH
4306: LD_INT 5
4308: PPUSH
4309: LD_INT 0
4311: PPUSH
4312: CALL 2866 0 6
// prepare_people ( neng , class_engineer , x , y , 5 , 0 ) ;
4316: LD_LOC 5
4320: PPUSH
4321: LD_INT 2
4323: PPUSH
4324: LD_VAR 0 4
4328: PPUSH
4329: LD_VAR 0 5
4333: PPUSH
4334: LD_INT 5
4336: PPUSH
4337: LD_INT 0
4339: PPUSH
4340: CALL 2866 0 6
// prepare_people ( nmech , class_mechanic , x , y , 5 , 0 ) ;
4344: LD_LOC 7
4348: PPUSH
4349: LD_INT 3
4351: PPUSH
4352: LD_VAR 0 4
4356: PPUSH
4357: LD_VAR 0 5
4361: PPUSH
4362: LD_INT 5
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL 2866 0 6
// prepare_people ( nsci , class_scientistic , x , y , 5 , 0 ) ;
4372: LD_LOC 6
4376: PPUSH
4377: LD_INT 4
4379: PPUSH
4380: LD_VAR 0 4
4384: PPUSH
4385: LD_VAR 0 5
4389: PPUSH
4390: LD_INT 5
4392: PPUSH
4393: LD_INT 0
4395: PPUSH
4396: CALL 2866 0 6
// if def_siberite_detection and GetTech ( tech_sibdet , side ) = state_enabled then
4400: LD_EXP 10
4404: PUSH
4405: LD_INT 20
4407: PPUSH
4408: LD_VAR 0 1
4412: PPUSH
4413: CALL_OW 321
4417: PUSH
4418: LD_INT 1
4420: EQUAL
4421: AND
4422: IFFALSE 4439
// SetTech ( tech_SibDet , side , state_researched ) ;
4424: LD_INT 20
4426: PPUSH
4427: LD_VAR 0 1
4431: PPUSH
4432: LD_INT 2
4434: PPUSH
4435: CALL_OW 322
// if def_siberite_bomb = 1 then
4439: LD_EXP 13
4443: PUSH
4444: LD_INT 1
4446: EQUAL
4447: IFFALSE 4481
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
4449: LD_INT 25
4451: PPUSH
4452: LD_VAR 0 1
4456: PPUSH
4457: LD_INT 1
4459: PPUSH
4460: CALL_OW 322
// SetTech ( 73 , side , state_enabled ) ;
4464: LD_INT 73
4466: PPUSH
4467: LD_VAR 0 1
4471: PPUSH
4472: LD_INT 1
4474: PPUSH
4475: CALL_OW 322
// end else
4479: GO 4511
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
4481: LD_INT 25
4483: PPUSH
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_INT 0
4491: PPUSH
4492: CALL_OW 322
// SetTech ( 73 , side , state_disabled ) ;
4496: LD_INT 73
4498: PPUSH
4499: LD_VAR 0 1
4503: PPUSH
4504: LD_INT 0
4506: PPUSH
4507: CALL_OW 322
// end ; SetTech ( tech_artifact , side , state_disabled ) ;
4511: LD_INT 24
4513: PPUSH
4514: LD_VAR 0 1
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: CALL_OW 322
// global_defined := true ;
4526: LD_ADDR_LOC 3
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// end ;
4534: LD_VAR 0 2
4538: RET
// function prepare_sides ; var i ; begin
4539: LD_INT 0
4541: PPUSH
4542: PPUSH
// global_units := [ ] ;
4543: LD_ADDR_LOC 2
4547: PUSH
4548: EMPTY
4549: ST_TO_ADDR
// global_defined := false ;
4550: LD_ADDR_LOC 3
4554: PUSH
4555: LD_INT 0
4557: ST_TO_ADDR
// CountClassMembers ;
4558: CALL 4608 0 0
// for i := 1 to 8 do
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: DOUBLE
4568: LD_INT 1
4570: DEC
4571: ST_TO_ADDR
4572: LD_INT 8
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4601
// if Side_Positions [ i ] then
4578: LD_EXP 34
4582: PUSH
4583: LD_VAR 0 2
4587: ARRAY
4588: IFFALSE 4599
// prepare_side ( i ) ;
4590: LD_VAR 0 2
4594: PPUSH
4595: CALL 3454 0 1
4599: GO 4575
4601: POP
4602: POP
// end ;
4603: LD_VAR 0 1
4607: RET
// function CountClassMembers ; var Mode ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
// if No_Mechs then
4612: LD_EXP 15
4616: IFFALSE 4628
// Mode := 2 else
4618: LD_ADDR_VAR 0 2
4622: PUSH
4623: LD_INT 2
4625: ST_TO_ADDR
4626: GO 4636
// Mode := 1 ;
4628: LD_ADDR_VAR 0 2
4632: PUSH
4633: LD_INT 1
4635: ST_TO_ADDR
// neng := number_of_people ;
4636: LD_ADDR_LOC 5
4640: PUSH
4641: LD_EXP 19
4645: ST_TO_ADDR
// nsol := neng div [ 4 , 3 ] [ Mode ] ;
4646: LD_ADDR_LOC 8
4650: PUSH
4651: LD_LOC 5
4655: PUSH
4656: LD_INT 4
4658: PUSH
4659: LD_INT 3
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: PUSH
4666: LD_VAR 0 2
4670: ARRAY
4671: DIV
4672: ST_TO_ADDR
// if ( nsol < number_of_breastworks ) then
4673: LD_LOC 8
4677: PUSH
4678: LD_EXP 18
4682: LESS
4683: IFFALSE 4695
// nsol := number_of_breastworks ;
4685: LD_ADDR_LOC 8
4689: PUSH
4690: LD_EXP 18
4694: ST_TO_ADDR
// neng := neng - nsol ;
4695: LD_ADDR_LOC 5
4699: PUSH
4700: LD_LOC 5
4704: PUSH
4705: LD_LOC 8
4709: MINUS
4710: ST_TO_ADDR
// nsci := neng div [ 3 , 2 ] [ Mode ] ;
4711: LD_ADDR_LOC 6
4715: PUSH
4716: LD_LOC 5
4720: PUSH
4721: LD_INT 3
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_VAR 0 2
4735: ARRAY
4736: DIV
4737: ST_TO_ADDR
// if ( nsci < 1 ) then
4738: LD_LOC 6
4742: PUSH
4743: LD_INT 1
4745: LESS
4746: IFFALSE 4756
// nsci := 1 ;
4748: LD_ADDR_LOC 6
4752: PUSH
4753: LD_INT 1
4755: ST_TO_ADDR
// neng := neng - nsci ;
4756: LD_ADDR_LOC 5
4760: PUSH
4761: LD_LOC 5
4765: PUSH
4766: LD_LOC 6
4770: MINUS
4771: ST_TO_ADDR
// nmech := [ neng div 2 , 0 ] [ Mode ] ;
4772: LD_ADDR_LOC 7
4776: PUSH
4777: LD_LOC 5
4781: PUSH
4782: LD_INT 2
4784: DIV
4785: PUSH
4786: LD_INT 0
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_VAR 0 2
4797: ARRAY
4798: ST_TO_ADDR
// neng := neng - nmech ;
4799: LD_ADDR_LOC 5
4803: PUSH
4804: LD_LOC 5
4808: PUSH
4809: LD_LOC 7
4813: MINUS
4814: ST_TO_ADDR
// if ( neng < 1 ) then
4815: LD_LOC 5
4819: PUSH
4820: LD_INT 1
4822: LESS
4823: IFFALSE 4833
// neng := 1 ;
4825: LD_ADDR_LOC 5
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// end ;
4833: LD_VAR 0 1
4837: RET
// starting begin disable ( 98 ) ;
4838: LD_INT 98
4840: DISABLE_MARKED
// disable ( 99 ) ;
4841: LD_INT 99
4843: DISABLE_MARKED
// disable ( 400 ) ;
4844: LD_INT 400
4846: DISABLE_MARKED
// disable ( 401 ) ;
4847: LD_INT 401
4849: DISABLE_MARKED
// mp_selectmsg := true ;
4850: LD_ADDR_OWVAR 13
4854: PUSH
4855: LD_INT 1
4857: ST_TO_ADDR
// read_multiplayer_and_game_parameters ;
4858: CALL 68 0 0
// init_map ;
4862: CALL 1251 0 0
// init_respawning ;
4866: CALL 13724 0 0
// set_shared_visions_and_alliances ;
4870: CALL 2578 0 0
// ResetFog ;
4874: CALL_OW 335
// ClearAllFogForSide ( your_side ) ;
4878: LD_OWVAR 2
4882: PPUSH
4883: CALL_OW 520
// AnimateTrees ( true ) ;
4887: LD_INT 1
4889: PPUSH
4890: CALL_OW 573
// prepare_sides ;
4894: CALL 4539 0 0
// Init_Win_Condition ;
4898: CALL 7705 0 0
// ShowTimer ;
4902: CALL 7283 0 0
// music_nat := Side_Nations [ your_side ] ;
4906: LD_ADDR_OWVAR 71
4910: PUSH
4911: LD_EXP 35
4915: PUSH
4916: LD_OWVAR 2
4920: ARRAY
4921: ST_TO_ADDR
// if IAmSpec then
4922: CALL_OW 531
4926: IFFALSE 4950
// begin fogoff ( true ) ;
4928: LD_INT 1
4930: PPUSH
4931: CALL_OW 344
// CenterNowOnXY ( 130 , 100 ) ;
4935: LD_INT 130
4937: PPUSH
4938: LD_INT 100
4940: PPUSH
4941: CALL_OW 86
// enable ( 400 ) ;
4945: LD_INT 400
4947: ENABLE_MARKED
// end else
4948: GO 4996
// begin CenterNowOnXY ( start_def [ Side_Positions [ your_side ] ] [ 1 ] , start_def [ Side_Positions [ your_side ] ] [ 2 ] ) ;
4950: LD_EXP 39
4954: PUSH
4955: LD_EXP 34
4959: PUSH
4960: LD_OWVAR 2
4964: ARRAY
4965: ARRAY
4966: PUSH
4967: LD_INT 1
4969: ARRAY
4970: PPUSH
4971: LD_EXP 39
4975: PUSH
4976: LD_EXP 34
4980: PUSH
4981: LD_OWVAR 2
4985: ARRAY
4986: ARRAY
4987: PUSH
4988: LD_INT 2
4990: ARRAY
4991: PPUSH
4992: CALL_OW 86
// end ; InitApeman ;
4996: CALL 5801 0 0
// BuildUpAreas := [ bt1 , bt2 , bt3 , bt4 , bt5 , bt6 , bt7 , bt8 ] ;
5000: LD_ADDR_EXP 55
5004: PUSH
5005: LD_INT 9
5007: PUSH
5008: LD_INT 10
5010: PUSH
5011: LD_INT 11
5013: PUSH
5014: LD_INT 12
5016: PUSH
5017: LD_INT 13
5019: PUSH
5020: LD_INT 14
5022: PUSH
5023: LD_INT 15
5025: PUSH
5026: LD_INT 16
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: ST_TO_ADDR
// BeginBuildUp ;
5039: CALL 14218 0 0
// end ;
5043: END
// every 0 0$1 do
5044: GO 5046
5046: DISABLE
// if ( def_siberite_bomb > 1 ) then
5047: LD_EXP 13
5051: PUSH
5052: LD_INT 1
5054: GREATER
5055: IFFALSE 5070
// begin wait ( siberite_bomb_Delay ) ;
5057: LD_EXP 29
5061: PPUSH
5062: CALL_OW 67
// EnableSibFiss ;
5066: CALL 5071 0 0
// end ;
5070: END
// function EnableSibFiss ; var i ; begin
5071: LD_INT 0
5073: PPUSH
5074: PPUSH
// for i := 1 to 8 do
5075: LD_ADDR_VAR 0 2
5079: PUSH
5080: DOUBLE
5081: LD_INT 1
5083: DEC
5084: ST_TO_ADDR
5085: LD_INT 8
5087: PUSH
5088: FOR_TO
5089: IFFALSE 5135
// if Side_Positions [ i ] then
5091: LD_EXP 34
5095: PUSH
5096: LD_VAR 0 2
5100: ARRAY
5101: IFFALSE 5133
// begin SetTech ( tech_SibFiss , i , state_enabled ) ;
5103: LD_INT 25
5105: PPUSH
5106: LD_VAR 0 2
5110: PPUSH
5111: LD_INT 1
5113: PPUSH
5114: CALL_OW 322
// SetTech ( 73 , i , state_enabled ) ;
5118: LD_INT 73
5120: PPUSH
5121: LD_VAR 0 2
5125: PPUSH
5126: LD_INT 1
5128: PPUSH
5129: CALL_OW 322
// end ;
5133: GO 5088
5135: POP
5136: POP
// end ; end_of_file
5137: LD_VAR 0 1
5141: RET
// every 1 1$0 + 0 0$0.3 do
5142: GO 5144
5144: DISABLE
// begin CreateCratesAnywhere ( Rand ( 4 , 5 ) , true ) ;
5145: LD_INT 4
5147: PPUSH
5148: LD_INT 5
5150: PPUSH
5151: CALL_OW 12
5155: PPUSH
5156: LD_INT 1
5158: PPUSH
5159: CALL_OW 57
// enable ;
5163: ENABLE
// end ;
5164: END
// every 0 0$1 + 0 0$0.6 do var i , amount ;
5165: GO 5167
5167: DISABLE
5168: LD_INT 0
5170: PPUSH
5171: PPUSH
// begin case tick of 1 .. 1 1$0 :
5172: LD_OWVAR 1
5176: PUSH
5177: LD_INT 1
5179: DOUBLE
5180: GREATEREQUAL
5181: IFFALSE 5189
5183: LD_INT 2100
5185: DOUBLE
5186: LESSEQUAL
5187: IFTRUE 5191
5189: GO 5219
5191: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$10 , 0 0$20 ) ) ; 1 1$0 + 1 .. 5 5$0 :
5192: LD_EXP 23
5196: PUSH
5197: LD_INT 100
5199: DIVREAL
5200: PUSH
5201: LD_INT 350
5203: PPUSH
5204: LD_INT 700
5206: PPUSH
5207: CALL_OW 12
5211: MUL
5212: PPUSH
5213: CALL_OW 67
5217: GO 5521
5219: LD_INT 2100
5221: PUSH
5222: LD_INT 1
5224: PLUS
5225: DOUBLE
5226: GREATEREQUAL
5227: IFFALSE 5235
5229: LD_INT 10500
5231: DOUBLE
5232: LESSEQUAL
5233: IFTRUE 5237
5235: GO 5265
5237: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$20 , 0 0$35 ) ) ; 5 5$0 + 1 .. 10 10$0 :
5238: LD_EXP 23
5242: PUSH
5243: LD_INT 100
5245: DIVREAL
5246: PUSH
5247: LD_INT 700
5249: PPUSH
5250: LD_INT 1225
5252: PPUSH
5253: CALL_OW 12
5257: MUL
5258: PPUSH
5259: CALL_OW 67
5263: GO 5521
5265: LD_INT 10500
5267: PUSH
5268: LD_INT 1
5270: PLUS
5271: DOUBLE
5272: GREATEREQUAL
5273: IFFALSE 5281
5275: LD_INT 21000
5277: DOUBLE
5278: LESSEQUAL
5279: IFTRUE 5283
5281: GO 5311
5283: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$35 , 0 0$45 ) ) ; 10 10$0 + 1 .. 20 20$0 :
5284: LD_EXP 23
5288: PUSH
5289: LD_INT 100
5291: DIVREAL
5292: PUSH
5293: LD_INT 1225
5295: PPUSH
5296: LD_INT 1575
5298: PPUSH
5299: CALL_OW 12
5303: MUL
5304: PPUSH
5305: CALL_OW 67
5309: GO 5521
5311: LD_INT 21000
5313: PUSH
5314: LD_INT 1
5316: PLUS
5317: DOUBLE
5318: GREATEREQUAL
5319: IFFALSE 5327
5321: LD_INT 42000
5323: DOUBLE
5324: LESSEQUAL
5325: IFTRUE 5329
5327: GO 5357
5329: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$45 , 0 0$55 ) ) ; 20 20$0 + 1 .. 30 30$0 :
5330: LD_EXP 23
5334: PUSH
5335: LD_INT 100
5337: DIVREAL
5338: PUSH
5339: LD_INT 1575
5341: PPUSH
5342: LD_INT 1925
5344: PPUSH
5345: CALL_OW 12
5349: MUL
5350: PPUSH
5351: CALL_OW 67
5355: GO 5521
5357: LD_INT 42000
5359: PUSH
5360: LD_INT 1
5362: PLUS
5363: DOUBLE
5364: GREATEREQUAL
5365: IFFALSE 5373
5367: LD_INT 63000
5369: DOUBLE
5370: LESSEQUAL
5371: IFTRUE 5375
5373: GO 5403
5375: POP
// Wait ( shipments_density / 100 * Rand ( 0 0$55 , 1 1$05 ) ) ; 30 30$0 + 1 .. 50 50$0 :
5376: LD_EXP 23
5380: PUSH
5381: LD_INT 100
5383: DIVREAL
5384: PUSH
5385: LD_INT 1925
5387: PPUSH
5388: LD_INT 2275
5390: PPUSH
5391: CALL_OW 12
5395: MUL
5396: PPUSH
5397: CALL_OW 67
5401: GO 5521
5403: LD_INT 63000
5405: PUSH
5406: LD_INT 1
5408: PLUS
5409: DOUBLE
5410: GREATEREQUAL
5411: IFFALSE 5419
5413: LD_INT 105000
5415: DOUBLE
5416: LESSEQUAL
5417: IFTRUE 5421
5419: GO 5449
5421: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$05 , 1 1$15 ) ) ; 50 50$0 + 1 .. 300 300$0 :
5422: LD_EXP 23
5426: PUSH
5427: LD_INT 100
5429: DIVREAL
5430: PUSH
5431: LD_INT 2275
5433: PPUSH
5434: LD_INT 2625
5436: PPUSH
5437: CALL_OW 12
5441: MUL
5442: PPUSH
5443: CALL_OW 67
5447: GO 5521
5449: LD_INT 105000
5451: PUSH
5452: LD_INT 1
5454: PLUS
5455: DOUBLE
5456: GREATEREQUAL
5457: IFFALSE 5465
5459: LD_INT 630000
5461: DOUBLE
5462: LESSEQUAL
5463: IFTRUE 5467
5465: GO 5495
5467: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$15 , 1 1$30 ) ) ; else
5468: LD_EXP 23
5472: PUSH
5473: LD_INT 100
5475: DIVREAL
5476: PUSH
5477: LD_INT 2625
5479: PPUSH
5480: LD_INT 3150
5482: PPUSH
5483: CALL_OW 12
5487: MUL
5488: PPUSH
5489: CALL_OW 67
5493: GO 5521
5495: POP
// Wait ( shipments_density / 100 * Rand ( 1 1$30 , 1 1$45 ) ) ; end ;
5496: LD_EXP 23
5500: PUSH
5501: LD_INT 100
5503: DIVREAL
5504: PUSH
5505: LD_INT 3150
5507: PPUSH
5508: LD_INT 3675
5510: PPUSH
5511: CALL_OW 12
5515: MUL
5516: PPUSH
5517: CALL_OW 67
// amount := Rand ( 3 , 5 ) ;
5521: LD_ADDR_VAR 0 2
5525: PUSH
5526: LD_INT 3
5528: PPUSH
5529: LD_INT 5
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// for i in ( Side_Positions diff [ 0 ] ) do
5537: LD_ADDR_VAR 0 1
5541: PUSH
5542: LD_EXP 34
5546: PUSH
5547: LD_INT 0
5549: PUSH
5550: EMPTY
5551: LIST
5552: DIFF
5553: PUSH
5554: FOR_IN
5555: IFFALSE 5604
// CreateCratesXYR ( amount , start_def [ i ] [ 1 ] , start_def [ i ] [ 2 ] , 20 , true ) ;
5557: LD_VAR 0 2
5561: PPUSH
5562: LD_EXP 39
5566: PUSH
5567: LD_VAR 0 1
5571: ARRAY
5572: PUSH
5573: LD_INT 1
5575: ARRAY
5576: PPUSH
5577: LD_EXP 39
5581: PUSH
5582: LD_VAR 0 1
5586: ARRAY
5587: PUSH
5588: LD_INT 2
5590: ARRAY
5591: PPUSH
5592: LD_INT 20
5594: PPUSH
5595: LD_INT 1
5597: PPUSH
5598: CALL_OW 56
5602: GO 5554
5604: POP
5605: POP
// enable ;
5606: ENABLE
// end ; end_of_file
5607: PPOPN 2
5609: END
// every 20 20$00 trigger apemanNumber do
5610: LD_EXP 46
5614: IFFALSE 5647
5616: GO 5618
5618: DISABLE
// begin enable ;
5619: ENABLE
// if apeLevel >= 8 then
5620: LD_EXP 51
5624: PUSH
5625: LD_INT 8
5627: GREATEREQUAL
5628: IFFALSE 5633
// disable else
5630: DISABLE
5631: GO 5647
// apeLevel := apeLevel + 1 ;
5633: LD_ADDR_EXP 51
5637: PUSH
5638: LD_EXP 51
5642: PUSH
5643: LD_INT 1
5645: PLUS
5646: ST_TO_ADDR
// end ;
5647: END
// every 2 2$30 trigger apemanNumber < apemanLimit do var i , ape , pos , j ;
5648: LD_EXP 46
5652: PUSH
5653: LD_EXP 47
5657: LESS
5658: IFFALSE 5798
5660: GO 5662
5662: DISABLE
5663: LD_INT 0
5665: PPUSH
5666: PPUSH
5667: PPUSH
5668: PPUSH
// begin enable ;
5669: ENABLE
// for i := 1 to apemanPos do
5670: LD_ADDR_VAR 0 1
5674: PUSH
5675: DOUBLE
5676: LD_INT 1
5678: DEC
5679: ST_TO_ADDR
5680: LD_EXP 49
5684: PUSH
5685: FOR_TO
5686: IFFALSE 5796
// begin if apemanPlayerCount [ i ] then
5688: LD_EXP 50
5692: PUSH
5693: LD_VAR 0 1
5697: ARRAY
5698: IFFALSE 5794
// begin if apemanPlayerCount [ i ] > apemanPos [ i ] then
5700: LD_EXP 50
5704: PUSH
5705: LD_VAR 0 1
5709: ARRAY
5710: PUSH
5711: LD_EXP 49
5715: PUSH
5716: LD_VAR 0 1
5720: ARRAY
5721: GREATER
5722: IFFALSE 5794
// begin ape := PrepareApeman ;
5724: LD_ADDR_VAR 0 2
5728: PUSH
5729: CALL 6317 0 0
5733: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ i ] , false ) ;
5734: LD_VAR 0 2
5738: PPUSH
5739: LD_EXP 52
5743: PUSH
5744: LD_VAR 0 1
5748: ARRAY
5749: PPUSH
5750: LD_INT 0
5752: PPUSH
5753: CALL_OW 49
// apemanPos := Replace ( apemanPos , i , apemanPos [ i ] union ape ) ;
5757: LD_ADDR_EXP 49
5761: PUSH
5762: LD_EXP 49
5766: PPUSH
5767: LD_VAR 0 1
5771: PPUSH
5772: LD_EXP 49
5776: PUSH
5777: LD_VAR 0 1
5781: ARRAY
5782: PUSH
5783: LD_VAR 0 2
5787: UNION
5788: PPUSH
5789: CALL_OW 1
5793: ST_TO_ADDR
// end ; end ; end ;
5794: GO 5685
5796: POP
5797: POP
// end ;
5798: PPOPN 4
5800: END
// export apemanNumber , apemanLimit , apemanPerPlayer , apemanPos , apemanPlayerCount , apeLevel , apeAreas ; export function InitApeman ; var i , playersAmount , j , ape , pos , _apeAreas ; begin
5801: LD_INT 0
5803: PPUSH
5804: PPUSH
5805: PPUSH
5806: PPUSH
5807: PPUSH
5808: PPUSH
5809: PPUSH
// playersAmount := 0 ;
5810: LD_ADDR_VAR 0 3
5814: PUSH
5815: LD_INT 0
5817: ST_TO_ADDR
// _apeAreas := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea , ] ;
5818: LD_ADDR_VAR 0 7
5822: PUSH
5823: LD_INT 1
5825: PUSH
5826: LD_INT 2
5828: PUSH
5829: LD_INT 3
5831: PUSH
5832: LD_INT 4
5834: PUSH
5835: LD_INT 5
5837: PUSH
5838: LD_INT 6
5840: PUSH
5841: LD_INT 7
5843: PUSH
5844: LD_INT 8
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: ST_TO_ADDR
// apeAreas := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
5857: LD_ADDR_EXP 52
5861: PUSH
5862: LD_INT 0
5864: PUSH
5865: LD_INT 0
5867: PUSH
5868: LD_INT 0
5870: PUSH
5871: LD_INT 0
5873: PUSH
5874: LD_INT 0
5876: PUSH
5877: LD_INT 0
5879: PUSH
5880: LD_INT 0
5882: PUSH
5883: LD_INT 0
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: ST_TO_ADDR
// for j = 1 to Side_Positions do
5896: LD_ADDR_VAR 0 4
5900: PUSH
5901: DOUBLE
5902: LD_INT 1
5904: DEC
5905: ST_TO_ADDR
5906: LD_EXP 34
5910: PUSH
5911: FOR_TO
5912: IFFALSE 5979
// if Side_Positions [ j ] then
5914: LD_EXP 34
5918: PUSH
5919: LD_VAR 0 4
5923: ARRAY
5924: IFFALSE 5977
// begin playersAmount := playersAmount + 1 ;
5926: LD_ADDR_VAR 0 3
5930: PUSH
5931: LD_VAR 0 3
5935: PUSH
5936: LD_INT 1
5938: PLUS
5939: ST_TO_ADDR
// apeAreas := Replace ( apeAreas , j , _apeAreas [ Side_Positions [ j ] ] ) ;
5940: LD_ADDR_EXP 52
5944: PUSH
5945: LD_EXP 52
5949: PPUSH
5950: LD_VAR 0 4
5954: PPUSH
5955: LD_VAR 0 7
5959: PUSH
5960: LD_EXP 34
5964: PUSH
5965: LD_VAR 0 4
5969: ARRAY
5970: ARRAY
5971: PPUSH
5972: CALL_OW 1
5976: ST_TO_ADDR
// end ;
5977: GO 5911
5979: POP
5980: POP
// apemanPerPlayer := 3 * amount_of_apemen ;
5981: LD_ADDR_EXP 48
5985: PUSH
5986: LD_INT 3
5988: PUSH
5989: LD_EXP 25
5993: MUL
5994: ST_TO_ADDR
// apemanNumber := playersAmount * apemanPerPlayer ;
5995: LD_ADDR_EXP 46
5999: PUSH
6000: LD_VAR 0 3
6004: PUSH
6005: LD_EXP 48
6009: MUL
6010: ST_TO_ADDR
// apemanLimit := apemanNumber ;
6011: LD_ADDR_EXP 47
6015: PUSH
6016: LD_EXP 46
6020: ST_TO_ADDR
// apemanPos := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6021: LD_ADDR_EXP 49
6025: PUSH
6026: LD_INT 0
6028: PUSH
6029: LD_INT 0
6031: PUSH
6032: LD_INT 0
6034: PUSH
6035: LD_INT 0
6037: PUSH
6038: LD_INT 0
6040: PUSH
6041: LD_INT 0
6043: PUSH
6044: LD_INT 0
6046: PUSH
6047: LD_INT 0
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: ST_TO_ADDR
// apemanPlayerCount := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6060: LD_ADDR_EXP 50
6064: PUSH
6065: LD_INT 0
6067: PUSH
6068: LD_INT 0
6070: PUSH
6071: LD_INT 0
6073: PUSH
6074: LD_INT 0
6076: PUSH
6077: LD_INT 0
6079: PUSH
6080: LD_INT 0
6082: PUSH
6083: LD_INT 0
6085: PUSH
6086: LD_INT 0
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: ST_TO_ADDR
// apeLevel := 1 ;
6099: LD_ADDR_EXP 51
6103: PUSH
6104: LD_INT 1
6106: ST_TO_ADDR
// if not apemanNumber then
6107: LD_EXP 46
6111: NOT
6112: IFFALSE 6116
// exit ;
6114: GO 6312
// for i := 1 to apemanPerPlayer do
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: DOUBLE
6122: LD_INT 1
6124: DEC
6125: ST_TO_ADDR
6126: LD_EXP 48
6130: PUSH
6131: FOR_TO
6132: IFFALSE 6310
// begin for j := 1 to Side_Positions do
6134: LD_ADDR_VAR 0 4
6138: PUSH
6139: DOUBLE
6140: LD_INT 1
6142: DEC
6143: ST_TO_ADDR
6144: LD_EXP 34
6148: PUSH
6149: FOR_TO
6150: IFFALSE 6306
// if Side_Positions [ j ] then
6152: LD_EXP 34
6156: PUSH
6157: LD_VAR 0 4
6161: ARRAY
6162: IFFALSE 6304
// begin pos := Side_Positions [ j ] ;
6164: LD_ADDR_VAR 0 6
6168: PUSH
6169: LD_EXP 34
6173: PUSH
6174: LD_VAR 0 4
6178: ARRAY
6179: ST_TO_ADDR
// apemanPlayerCount := Replace ( apemanPlayerCount , j , apemanPlayerCount [ j ] + 1 ) ;
6180: LD_ADDR_EXP 50
6184: PUSH
6185: LD_EXP 50
6189: PPUSH
6190: LD_VAR 0 4
6194: PPUSH
6195: LD_EXP 50
6199: PUSH
6200: LD_VAR 0 4
6204: ARRAY
6205: PUSH
6206: LD_INT 1
6208: PLUS
6209: PPUSH
6210: CALL_OW 1
6214: ST_TO_ADDR
// ape := PrepareApeman ;
6215: LD_ADDR_VAR 0 5
6219: PUSH
6220: CALL 6317 0 0
6224: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , j , Replace ( apemanPos [ j ] , apemanPos [ j ] + 1 , ape ) ) ;
6225: LD_ADDR_EXP 49
6229: PUSH
6230: LD_EXP 49
6234: PPUSH
6235: LD_VAR 0 4
6239: PPUSH
6240: LD_EXP 49
6244: PUSH
6245: LD_VAR 0 4
6249: ARRAY
6250: PPUSH
6251: LD_EXP 49
6255: PUSH
6256: LD_VAR 0 4
6260: ARRAY
6261: PUSH
6262: LD_INT 1
6264: PLUS
6265: PPUSH
6266: LD_VAR 0 5
6270: PPUSH
6271: CALL_OW 1
6275: PPUSH
6276: CALL_OW 1
6280: ST_TO_ADDR
// PlaceUnitArea ( ape , apeAreas [ j ] , false ) ;
6281: LD_VAR 0 5
6285: PPUSH
6286: LD_EXP 52
6290: PUSH
6291: LD_VAR 0 4
6295: ARRAY
6296: PPUSH
6297: LD_INT 0
6299: PPUSH
6300: CALL_OW 49
// end ;
6304: GO 6149
6306: POP
6307: POP
// end ;
6308: GO 6131
6310: POP
6311: POP
// end ;
6312: LD_VAR 0 1
6316: RET
// export function PrepareApeman ; var bonus ; begin
6317: LD_INT 0
6319: PPUSH
6320: PPUSH
// uc_side := 0 ;
6321: LD_ADDR_OWVAR 20
6325: PUSH
6326: LD_INT 0
6328: ST_TO_ADDR
// uc_nation := 0 ;
6329: LD_ADDR_OWVAR 21
6333: PUSH
6334: LD_INT 0
6336: ST_TO_ADDR
// InitHc ;
6337: CALL_OW 19
// bonus := [ - 1 , 0 , 1 ] [ tick mod 3 + 1 ] ;
6341: LD_ADDR_VAR 0 2
6345: PUSH
6346: LD_INT 1
6348: NEG
6349: PUSH
6350: LD_INT 0
6352: PUSH
6353: LD_INT 1
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: PUSH
6361: LD_OWVAR 1
6365: PUSH
6366: LD_INT 3
6368: MOD
6369: PUSH
6370: LD_INT 1
6372: PLUS
6373: ARRAY
6374: ST_TO_ADDR
// hc_class := class_apeman ;
6375: LD_ADDR_OWVAR 28
6379: PUSH
6380: LD_INT 12
6382: ST_TO_ADDR
// hc_gallery :=  ;
6383: LD_ADDR_OWVAR 33
6387: PUSH
6388: LD_STRING 
6390: ST_TO_ADDR
// hc_name :=  ;
6391: LD_ADDR_OWVAR 26
6395: PUSH
6396: LD_STRING 
6398: ST_TO_ADDR
// hc_skills := [ apeLevel + bonus , apeLevel + bonus , apeLevel + bonus , apeLevel + bonus ] ;
6399: LD_ADDR_OWVAR 31
6403: PUSH
6404: LD_EXP 51
6408: PUSH
6409: LD_VAR 0 2
6413: PLUS
6414: PUSH
6415: LD_EXP 51
6419: PUSH
6420: LD_VAR 0 2
6424: PLUS
6425: PUSH
6426: LD_EXP 51
6430: PUSH
6431: LD_VAR 0 2
6435: PLUS
6436: PUSH
6437: LD_EXP 51
6441: PUSH
6442: LD_VAR 0 2
6446: PLUS
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: ST_TO_ADDR
// hc_agressivity := 10 * bonus ;
6454: LD_ADDR_OWVAR 35
6458: PUSH
6459: LD_INT 10
6461: PUSH
6462: LD_VAR 0 2
6466: MUL
6467: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
6468: LD_ADDR_OWVAR 29
6472: PUSH
6473: LD_INT 12
6475: PUSH
6476: LD_INT 10
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: ST_TO_ADDR
// result := CreateHuman ;
6483: LD_ADDR_VAR 0 1
6487: PUSH
6488: CALL_OW 44
6492: ST_TO_ADDR
// end ;
6493: LD_VAR 0 1
6497: RET
// export function ApeKilled ( ape ) ; var side , i ; begin
6498: LD_INT 0
6500: PPUSH
6501: PPUSH
6502: PPUSH
// if not ape then
6503: LD_VAR 0 1
6507: NOT
6508: IFFALSE 6512
// exit ;
6510: GO 6637
// side := GetSide ( ape ) ;
6512: LD_ADDR_VAR 0 3
6516: PUSH
6517: LD_VAR 0 1
6521: PPUSH
6522: CALL_OW 255
6526: ST_TO_ADDR
// if not side then
6527: LD_VAR 0 3
6531: NOT
6532: IFFALSE 6586
// begin for i = 1 to apemanPos do
6534: LD_ADDR_VAR 0 4
6538: PUSH
6539: DOUBLE
6540: LD_INT 1
6542: DEC
6543: ST_TO_ADDR
6544: LD_EXP 49
6548: PUSH
6549: FOR_TO
6550: IFFALSE 6584
// if ape in apemanPos [ i ] then
6552: LD_VAR 0 1
6556: PUSH
6557: LD_EXP 49
6561: PUSH
6562: LD_VAR 0 4
6566: ARRAY
6567: IN
6568: IFFALSE 6582
// begin side := i ;
6570: LD_ADDR_VAR 0 3
6574: PUSH
6575: LD_VAR 0 4
6579: ST_TO_ADDR
// break ;
6580: GO 6584
// end ;
6582: GO 6549
6584: POP
6585: POP
// end ; apemanPos := Replace ( apemanPos , side , apemanPos [ side ] diff ape ) ;
6586: LD_ADDR_EXP 49
6590: PUSH
6591: LD_EXP 49
6595: PPUSH
6596: LD_VAR 0 3
6600: PPUSH
6601: LD_EXP 49
6605: PUSH
6606: LD_VAR 0 3
6610: ARRAY
6611: PUSH
6612: LD_VAR 0 1
6616: DIFF
6617: PPUSH
6618: CALL_OW 1
6622: ST_TO_ADDR
// apemanNumber := apemanNumber - 1 ;
6623: LD_ADDR_EXP 46
6627: PUSH
6628: LD_EXP 46
6632: PUSH
6633: LD_INT 1
6635: MINUS
6636: ST_TO_ADDR
// end ; end_of_file
6637: LD_VAR 0 2
6641: RET
// on BuildingStarted ( b , u ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6642: LD_VAR 0 1
6646: PPUSH
6647: CALL_OW 266
6651: PUSH
6652: LD_INT 0
6654: PUSH
6655: LD_INT 1
6657: PUSH
6658: EMPTY
6659: LIST
6660: LIST
6661: IN
6662: IFFALSE 6687
// SetBName ( b , @ & GetSide ( b ) ) ;
6664: LD_VAR 0 1
6668: PPUSH
6669: LD_STRING @
6671: PUSH
6672: LD_VAR 0 1
6676: PPUSH
6677: CALL_OW 255
6681: STR
6682: PPUSH
6683: CALL_OW 500
// end ;
6687: PPOPN 2
6689: END
// on BuildingCaptured ( b , o , e ) do begin if GetBType ( b ) in [ b_depot , b_warehouse ] then
6690: LD_VAR 0 1
6694: PPUSH
6695: CALL_OW 266
6699: PUSH
6700: LD_INT 0
6702: PUSH
6703: LD_INT 1
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: IN
6710: IFFALSE 6735
// SetBName ( b , @ & GetSide ( b ) ) ;
6712: LD_VAR 0 1
6716: PPUSH
6717: LD_STRING @
6719: PUSH
6720: LD_VAR 0 1
6724: PPUSH
6725: CALL_OW 255
6729: STR
6730: PPUSH
6731: CALL_OW 500
// end ;
6735: PPOPN 3
6737: END
// on VehicleConstructed ( veh , fac ) do var side ;
6738: LD_INT 0
6740: PPUSH
// begin if GetControl ( veh ) = control_apeman then
6741: LD_VAR 0 1
6745: PPUSH
6746: CALL_OW 263
6750: PUSH
6751: LD_INT 5
6753: EQUAL
6754: IFFALSE 6896
// begin side := GetSide ( veh ) ;
6756: LD_ADDR_VAR 0 3
6760: PUSH
6761: LD_VAR 0 1
6765: PPUSH
6766: CALL_OW 255
6770: ST_TO_ADDR
// apemanPos := Replace ( apemanPos , side , UnitFilter ( apemanPos [ side ] , [ f_placed ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_control , control_apeman ] , [ f_class , class_apeman ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] ] ] ) ) ;
6771: LD_ADDR_EXP 49
6775: PUSH
6776: LD_EXP 49
6780: PPUSH
6781: LD_VAR 0 3
6785: PPUSH
6786: LD_EXP 49
6790: PUSH
6791: LD_VAR 0 3
6795: ARRAY
6796: PPUSH
6797: LD_INT 52
6799: PUSH
6800: EMPTY
6801: LIST
6802: PPUSH
6803: CALL_OW 72
6807: PUSH
6808: LD_INT 22
6810: PUSH
6811: LD_VAR 0 3
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: LD_INT 2
6822: PUSH
6823: LD_INT 33
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 25
6835: PUSH
6836: LD_INT 12
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 25
6845: PUSH
6846: LD_INT 15
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 25
6855: PUSH
6856: LD_INT 16
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: LD_INT 25
6865: PUSH
6866: LD_INT 17
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PPUSH
6885: CALL_OW 69
6889: UNION
6890: PPUSH
6891: CALL_OW 1
6895: ST_TO_ADDR
// end ; end ;
6896: PPOPN 3
6898: END
// on UnitDestroyed ( j ) do var x , y , pos , dir ;
6899: LD_INT 0
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
// begin if GetClass ( j ) in [ class_apeman , class_apeman_soldier , class_apeman_kamikaze , class_apeman_engineer ] or GetControl ( j ) = control_apeman then
6905: LD_VAR 0 1
6909: PPUSH
6910: CALL_OW 257
6914: PUSH
6915: LD_INT 12
6917: PUSH
6918: LD_INT 15
6920: PUSH
6921: LD_INT 17
6923: PUSH
6924: LD_INT 16
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: IN
6933: PUSH
6934: LD_VAR 0 1
6938: PPUSH
6939: CALL_OW 263
6943: PUSH
6944: LD_INT 5
6946: EQUAL
6947: OR
6948: IFFALSE 6959
// ApeKilled ( j ) ;
6950: LD_VAR 0 1
6954: PPUSH
6955: CALL 6498 0 1
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
6959: LD_VAR 0 1
6963: PPUSH
6964: CALL_OW 266
6968: PUSH
6969: LD_INT 0
6971: PUSH
6972: LD_INT 1
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: IN
6979: IFFALSE 7061
// begin pos := Side_Positions [ GetSide ( j ) ] ;
6981: LD_ADDR_VAR 0 4
6985: PUSH
6986: LD_EXP 34
6990: PUSH
6991: LD_VAR 0 1
6995: PPUSH
6996: CALL_OW 255
7000: ARRAY
7001: ST_TO_ADDR
// x := start_def [ pos ] [ 1 ] ;
7002: LD_ADDR_VAR 0 2
7006: PUSH
7007: LD_EXP 39
7011: PUSH
7012: LD_VAR 0 4
7016: ARRAY
7017: PUSH
7018: LD_INT 1
7020: ARRAY
7021: ST_TO_ADDR
// y := start_def [ pos ] [ 2 ] ;
7022: LD_ADDR_VAR 0 3
7026: PUSH
7027: LD_EXP 39
7031: PUSH
7032: LD_VAR 0 4
7036: ARRAY
7037: PUSH
7038: LD_INT 2
7040: ARRAY
7041: ST_TO_ADDR
// KillBattleFlag ( FindBattleFlag ( x , y ) ) ;
7042: LD_VAR 0 2
7046: PPUSH
7047: LD_VAR 0 3
7051: PPUSH
7052: CALL_OW 420
7056: PPUSH
7057: CALL_OW 419
// end ; end ;
7061: PPOPN 5
7063: END
// on siberiterocketexploded ( un , x , y ) do SA_OnSiberiteRocketExploded ( un , x , y , Your_Side ) ; end_of_file
7064: LD_VAR 0 1
7068: PPUSH
7069: LD_VAR 0 2
7073: PPUSH
7074: LD_VAR 0 3
7078: PPUSH
7079: LD_OWVAR 2
7083: PPUSH
7084: CALL 7466 0 4
7088: PPOPN 3
7090: END
// var strength , lastxwin , lastywin , lastxlost , lastylost ; function Update_Flags ; var un ; begin
7091: LD_INT 0
7093: PPUSH
7094: PPUSH
// for un in battle_flags_id do
7095: LD_ADDR_VAR 0 2
7099: PUSH
7100: LD_EXP 44
7104: PUSH
7105: FOR_IN
7106: IFFALSE 7181
// ChangeBattleFlagOptions ( un , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength div 2 ] , [ bfo_defend_bonus_building , strength div 5 ] , [ bfo_height , strength ] ] ) ;
7108: LD_VAR 0 2
7112: PPUSH
7113: LD_INT 1
7115: PUSH
7116: LD_LOC 9
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 2
7127: PUSH
7128: LD_LOC 9
7132: PUSH
7133: LD_INT 2
7135: DIV
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 3
7143: PUSH
7144: LD_LOC 9
7148: PUSH
7149: LD_INT 5
7151: DIV
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 20
7159: PUSH
7160: LD_LOC 9
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: PPUSH
7175: CALL_OW 423
7179: GO 7105
7181: POP
7182: POP
// end ;
7183: LD_VAR 0 1
7187: RET
// every 1 do var un ;
7188: GO 7190
7190: DISABLE
7191: LD_INT 0
7193: PPUSH
// begin if not def_morale_flags then
7194: LD_EXP 9
7198: NOT
7199: IFFALSE 7203
// exit ;
7201: GO 7280
// if not morale_decreasing_time then
7203: LD_EXP 24
7207: NOT
7208: IFFALSE 7212
// exit ;
7210: GO 7280
// strength = 100 ;
7212: LD_ADDR_LOC 9
7216: PUSH
7217: LD_INT 100
7219: ST_TO_ADDR
// repeat wait ( morale_decreasing_time ) ;
7220: LD_EXP 24
7224: PPUSH
7225: CALL_OW 67
// strength := strength - 1 ;
7229: LD_ADDR_LOC 9
7233: PUSH
7234: LD_LOC 9
7238: PUSH
7239: LD_INT 1
7241: MINUS
7242: ST_TO_ADDR
// Update_Flags ;
7243: CALL 7091 0 0
// until not strength ;
7247: LD_LOC 9
7251: NOT
7252: IFFALSE 7220
// for un in battle_flags_id do
7254: LD_ADDR_VAR 0 1
7258: PUSH
7259: LD_EXP 44
7263: PUSH
7264: FOR_IN
7265: IFFALSE 7278
// KillBattleFlag ( un ) ;
7267: LD_VAR 0 1
7271: PPUSH
7272: CALL_OW 419
7276: GO 7264
7278: POP
7279: POP
// end ; end_of_file
7280: PPOPN 1
7282: END
// export ExtraStrings ; export WaitServerStrings ; export function ShowTimer ; var AllStrings ; begin
7283: LD_INT 0
7285: PPUSH
7286: PPUSH
// AllStrings := [ #Multi1x1-Time , tick ] ;
7287: LD_ADDR_VAR 0 2
7291: PUSH
7292: LD_STRING #Multi1x1-Time
7294: PUSH
7295: LD_OWVAR 1
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: ST_TO_ADDR
// if WaitServerStrings then
7304: LD_EXP 54
7308: IFFALSE 7326
// AllStrings = AllStrings ^ WaitServerStrings ;
7310: LD_ADDR_VAR 0 2
7314: PUSH
7315: LD_VAR 0 2
7319: PUSH
7320: LD_EXP 54
7324: ADD
7325: ST_TO_ADDR
// if 0 <= siberite_bomb_Delay - tick then
7326: LD_INT 0
7328: PUSH
7329: LD_EXP 29
7333: PUSH
7334: LD_OWVAR 1
7338: MINUS
7339: LESSEQUAL
7340: IFFALSE 7371
// AllStrings := AllStrings ^ [ #allowedsibbomb , siberite_bomb_Delay - tick ] ;
7342: LD_ADDR_VAR 0 2
7346: PUSH
7347: LD_VAR 0 2
7351: PUSH
7352: LD_STRING #allowedsibbomb
7354: PUSH
7355: LD_EXP 29
7359: PUSH
7360: LD_OWVAR 1
7364: MINUS
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: ADD
7370: ST_TO_ADDR
// if 0 <= buildUpTime_Delay - tick then
7371: LD_INT 0
7373: PUSH
7374: LD_EXP 57
7378: PUSH
7379: LD_OWVAR 1
7383: MINUS
7384: LESSEQUAL
7385: IFFALSE 7416
// AllStrings := AllStrings ^ [ #builduptime , buildUpTime_Delay - tick ] ;
7387: LD_ADDR_VAR 0 2
7391: PUSH
7392: LD_VAR 0 2
7396: PUSH
7397: LD_STRING #builduptime
7399: PUSH
7400: LD_EXP 57
7404: PUSH
7405: LD_OWVAR 1
7409: MINUS
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: ADD
7415: ST_TO_ADDR
// if ( ExtraStrings ) then
7416: LD_EXP 53
7420: IFFALSE 7442
// AllStrings := AllStrings ^  ^ ExtraStrings ;
7422: LD_ADDR_VAR 0 2
7426: PUSH
7427: LD_VAR 0 2
7431: PUSH
7432: LD_STRING 
7434: ADD
7435: PUSH
7436: LD_EXP 53
7440: ADD
7441: ST_TO_ADDR
// Display_Strings := AllStrings ;
7442: LD_ADDR_OWVAR 47
7446: PUSH
7447: LD_VAR 0 2
7451: ST_TO_ADDR
// end ;
7452: LD_VAR 0 1
7456: RET
// every 0 0$1 do
7457: GO 7459
7459: DISABLE
// begin ShowTimer ;
7460: CALL 7283 0 0
// enable ;
7464: ENABLE
// end ; end_of_file
7465: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle , target_x , target_y , requestSide ) ; begin
7466: LD_INT 0
7468: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = requestSide then
7469: LD_VAR 0 1
7473: PPUSH
7474: CALL_OW 255
7478: PUSH
7479: LD_VAR 0 4
7483: EQUAL
7484: IFFALSE 7503
// begin SetAchievement ( ACH_RAD ) ;
7486: LD_STRING ACH_RAD
7488: PPUSH
7489: CALL_OW 543
// SetAchievementEx ( ACH_NL , 1 ) ;
7493: LD_STRING ACH_NL
7495: PPUSH
7496: LD_INT 1
7498: PPUSH
7499: CALL_OW 564
// end end ;
7503: LD_VAR 0 5
7507: RET
// export function SA_Win ( side ) ; begin
7508: LD_INT 0
7510: PPUSH
// case side of 1 :
7511: LD_VAR 0 1
7515: PUSH
7516: LD_INT 1
7518: DOUBLE
7519: EQUAL
7520: IFTRUE 7524
7522: GO 7537
7524: POP
// SetAchievementEx ( ACH_AH , 1 ) ; 2 :
7525: LD_STRING ACH_AH
7527: PPUSH
7528: LD_INT 1
7530: PPUSH
7531: CALL_OW 564
7535: GO 7700
7537: LD_INT 2
7539: DOUBLE
7540: EQUAL
7541: IFTRUE 7545
7543: GO 7558
7545: POP
// SetAchievementEx ( ACH_E , 1 ) ; 3 :
7546: LD_STRING ACH_E
7548: PPUSH
7549: LD_INT 1
7551: PPUSH
7552: CALL_OW 564
7556: GO 7700
7558: LD_INT 3
7560: DOUBLE
7561: EQUAL
7562: IFTRUE 7566
7564: GO 7579
7566: POP
// SetAchievementEx ( ACH_OOL , 1 ) ; [ 1 , 2 ] :
7567: LD_STRING ACH_OOL
7569: PPUSH
7570: LD_INT 1
7572: PPUSH
7573: CALL_OW 564
7577: GO 7700
7579: LD_INT 1
7581: PUSH
7582: LD_INT 2
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: DOUBLE
7589: EQUAL
7590: IFTRUE 7594
7592: GO 7619
7594: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7595: LD_STRING ACH_AH
7597: PPUSH
7598: LD_REAL  5.00000000000000E-0001
7601: PPUSH
7602: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7606: LD_STRING ACH_E
7608: PPUSH
7609: LD_REAL  5.00000000000000E-0001
7612: PPUSH
7613: CALL_OW 564
// end ; [ 2 , 3 ] :
7617: GO 7700
7619: LD_INT 2
7621: PUSH
7622: LD_INT 3
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: DOUBLE
7629: EQUAL
7630: IFTRUE 7634
7632: GO 7659
7634: POP
// begin SetAchievementEx ( ACH_OOL , 0.5 ) ;
7635: LD_STRING ACH_OOL
7637: PPUSH
7638: LD_REAL  5.00000000000000E-0001
7641: PPUSH
7642: CALL_OW 564
// SetAchievementEx ( ACH_E , 0.5 ) ;
7646: LD_STRING ACH_E
7648: PPUSH
7649: LD_REAL  5.00000000000000E-0001
7652: PPUSH
7653: CALL_OW 564
// end ; [ 3 , 1 ] :
7657: GO 7700
7659: LD_INT 3
7661: PUSH
7662: LD_INT 1
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: DOUBLE
7669: EQUAL
7670: IFTRUE 7674
7672: GO 7699
7674: POP
// begin SetAchievementEx ( ACH_AH , 0.5 ) ;
7675: LD_STRING ACH_AH
7677: PPUSH
7678: LD_REAL  5.00000000000000E-0001
7681: PPUSH
7682: CALL_OW 564
// SetAchievementEx ( ACH_OOL , 0.5 ) ;
7686: LD_STRING ACH_OOL
7688: PPUSH
7689: LD_REAL  5.00000000000000E-0001
7692: PPUSH
7693: CALL_OW 564
// end ; end ;
7697: GO 7700
7699: POP
// end ; end_of_file
7700: LD_VAR 0 2
7704: RET
// var defeated , GameEnded , unfoged , defeated_specs ; export function Init_Win_Condition ; var i ; begin
7705: LD_INT 0
7707: PPUSH
7708: PPUSH
// enable ( 98 ) ;
7709: LD_INT 98
7711: ENABLE_MARKED
// GameEnded = false ;
7712: LD_ADDR_LOC 15
7716: PUSH
7717: LD_INT 0
7719: ST_TO_ADDR
// defeated = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7720: LD_ADDR_LOC 14
7724: PUSH
7725: LD_INT 0
7727: PUSH
7728: LD_INT 0
7730: PUSH
7731: LD_INT 0
7733: PUSH
7734: LD_INT 0
7736: PUSH
7737: LD_INT 0
7739: PUSH
7740: LD_INT 0
7742: PUSH
7743: LD_INT 0
7745: PUSH
7746: LD_INT 0
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: ST_TO_ADDR
// unfoged = false ;
7759: LD_ADDR_LOC 16
7763: PUSH
7764: LD_INT 0
7766: ST_TO_ADDR
// defeated_specs := [ ] ;
7767: LD_ADDR_LOC 17
7771: PUSH
7772: EMPTY
7773: ST_TO_ADDR
// for i = 1 to side_positions do
7774: LD_ADDR_VAR 0 2
7778: PUSH
7779: DOUBLE
7780: LD_INT 1
7782: DEC
7783: ST_TO_ADDR
7784: LD_EXP 34
7788: PUSH
7789: FOR_TO
7790: IFFALSE 7830
// if not side_positions [ i ] then
7792: LD_EXP 34
7796: PUSH
7797: LD_VAR 0 2
7801: ARRAY
7802: NOT
7803: IFFALSE 7828
// defeated = replace ( defeated , i , true ) ;
7805: LD_ADDR_LOC 14
7809: PUSH
7810: LD_LOC 14
7814: PPUSH
7815: LD_VAR 0 2
7819: PPUSH
7820: LD_INT 1
7822: PPUSH
7823: CALL_OW 1
7827: ST_TO_ADDR
7828: GO 7789
7830: POP
7831: POP
// end ;
7832: LD_VAR 0 1
7836: RET
// function CanWinLoose ; begin
7837: LD_INT 0
7839: PPUSH
// Result := true ;
7840: LD_ADDR_VAR 0 1
7844: PUSH
7845: LD_INT 1
7847: ST_TO_ADDR
// if IAmServer and PlayerCount > 0 then
7848: CALL_OW 518
7852: PUSH
7853: CALL_OW 519
7857: PUSH
7858: LD_INT 0
7860: GREATER
7861: AND
7862: IFFALSE 7872
// Result := false ;
7864: LD_ADDR_VAR 0 1
7868: PUSH
7869: LD_INT 0
7871: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
7872: CALL_OW 531
7876: PUSH
7877: CALL_OW 519
7881: PUSH
7882: LD_INT 1
7884: GREATER
7885: AND
7886: IFFALSE 7896
// Result := false ;
7888: LD_ADDR_VAR 0 1
7892: PUSH
7893: LD_INT 0
7895: ST_TO_ADDR
// end ;
7896: LD_VAR 0 1
7900: RET
// export function HasPower ( i ) ; var k , h ; begin
7901: LD_INT 0
7903: PPUSH
7904: PPUSH
7905: PPUSH
// if not MultiplayerSideAlive ( i ) and not Side_Comps [ i ] and MultiPlayer then
7906: LD_VAR 0 1
7910: PPUSH
7911: CALL_OW 108
7915: NOT
7916: PUSH
7917: LD_EXP 33
7921: PUSH
7922: LD_VAR 0 1
7926: ARRAY
7927: NOT
7928: AND
7929: PUSH
7930: LD_OWVAR 4
7934: AND
7935: IFFALSE 7947
// begin result = false ;
7937: LD_ADDR_VAR 0 2
7941: PUSH
7942: LD_INT 0
7944: ST_TO_ADDR
// end else
7945: GO 8242
// case def_win_rules of 0 :
7947: LD_EXP 30
7951: PUSH
7952: LD_INT 0
7954: DOUBLE
7955: EQUAL
7956: IFTRUE 7960
7958: GO 8123
7960: POP
// if def_people_respawning then
7961: LD_EXP 11
7965: IFFALSE 8056
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) else
7967: LD_ADDR_VAR 0 2
7971: PUSH
7972: LD_INT 22
7974: PUSH
7975: LD_VAR 0 1
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: LD_INT 2
7986: PUSH
7987: LD_INT 21
7989: PUSH
7990: LD_INT 1
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 33
7999: PUSH
8000: LD_INT 3
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 33
8009: PUSH
8010: LD_INT 5
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 30
8019: PUSH
8020: LD_INT 0
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 30
8029: PUSH
8030: LD_INT 1
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PPUSH
8049: CALL_OW 69
8053: ST_TO_ADDR
8054: GO 8121
// Result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ; 1 :
8056: LD_ADDR_VAR 0 2
8060: PUSH
8061: LD_INT 22
8063: PUSH
8064: LD_VAR 0 1
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 2
8075: PUSH
8076: LD_INT 21
8078: PUSH
8079: LD_INT 1
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 33
8088: PUSH
8089: LD_INT 3
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 33
8098: PUSH
8099: LD_INT 5
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: PPUSH
8116: CALL_OW 69
8120: ST_TO_ADDR
8121: GO 8242
8123: LD_INT 1
8125: DOUBLE
8126: EQUAL
8127: IFTRUE 8131
8129: GO 8170
8131: POP
// Result = FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ; 2 :
8132: LD_ADDR_VAR 0 2
8136: PUSH
8137: LD_INT 22
8139: PUSH
8140: LD_VAR 0 1
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: PUSH
8149: LD_INT 21
8151: PUSH
8152: LD_INT 1
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PPUSH
8163: CALL_OW 69
8167: ST_TO_ADDR
8168: GO 8242
8170: LD_INT 2
8172: DOUBLE
8173: EQUAL
8174: IFTRUE 8178
8176: GO 8241
8178: POP
// begin h = false ;
8179: LD_ADDR_VAR 0 4
8183: PUSH
8184: LD_INT 0
8186: ST_TO_ADDR
// for k in heroes [ i ] do
8187: LD_ADDR_VAR 0 3
8191: PUSH
8192: LD_EXP 45
8196: PUSH
8197: LD_VAR 0 1
8201: ARRAY
8202: PUSH
8203: FOR_IN
8204: IFFALSE 8227
// if IsLive ( k ) then
8206: LD_VAR 0 3
8210: PPUSH
8211: CALL_OW 300
8215: IFFALSE 8225
// h = true ;
8217: LD_ADDR_VAR 0 4
8221: PUSH
8222: LD_INT 1
8224: ST_TO_ADDR
8225: GO 8203
8227: POP
8228: POP
// Result := h ;
8229: LD_ADDR_VAR 0 2
8233: PUSH
8234: LD_VAR 0 4
8238: ST_TO_ADDR
// end ; end ;
8239: GO 8242
8241: POP
// end ;
8242: LD_VAR 0 2
8246: RET
// function AlliedSides ( i , j ) ; begin
8247: LD_INT 0
8249: PPUSH
// Result := false ;
8250: LD_ADDR_VAR 0 3
8254: PUSH
8255: LD_INT 0
8257: ST_TO_ADDR
// if ( GetAttitude ( i , j ) = att_friend ) and ( GetAttitude ( j , i ) = att_friend ) and GetAlliedVictory ( i ) and GetAlliedVictory ( j ) then
8258: LD_VAR 0 1
8262: PPUSH
8263: LD_VAR 0 2
8267: PPUSH
8268: CALL_OW 81
8272: PUSH
8273: LD_INT 1
8275: EQUAL
8276: PUSH
8277: LD_VAR 0 2
8281: PPUSH
8282: LD_VAR 0 1
8286: PPUSH
8287: CALL_OW 81
8291: PUSH
8292: LD_INT 1
8294: EQUAL
8295: AND
8296: PUSH
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 83
8306: AND
8307: PUSH
8308: LD_VAR 0 2
8312: PPUSH
8313: CALL_OW 83
8317: AND
8318: IFFALSE 8328
// Result := true ;
8320: LD_ADDR_VAR 0 3
8324: PUSH
8325: LD_INT 1
8327: ST_TO_ADDR
// end ;
8328: LD_VAR 0 3
8332: RET
// every 100 trigger CanWinLoose and not GameEnded marked 400 do
8333: CALL 7837 0 0
8337: PUSH
8338: LD_LOC 15
8342: NOT
8343: AND
8344: IFFALSE 8360
8346: GO 8348
8348: DISABLE
// WaitServerStrings = [ #Player-Ended ] ;
8349: LD_ADDR_EXP 54
8353: PUSH
8354: LD_STRING #Player-Ended
8356: PUSH
8357: EMPTY
8358: LIST
8359: ST_TO_ADDR
8360: END
// every 100 trigger CanWinLoose and GameEnded marked 400 do
8361: CALL 7837 0 0
8365: PUSH
8366: LD_LOC 15
8370: AND
8371: IFFALSE 8380
8373: GO 8375
8375: DISABLE
// YouLostInMultiplayer ;
8376: CALL_OW 107
8380: END
// every 100 trigger not CanWinLoose and not IAmSpec marked 400 do
8381: CALL 7837 0 0
8385: NOT
8386: PUSH
8387: CALL_OW 531
8391: NOT
8392: AND
8393: IFFALSE 8409
8395: GO 8397
8397: DISABLE
// WaitServerStrings = [ #server-wait ] ;
8398: LD_ADDR_EXP 54
8402: PUSH
8403: LD_STRING #server-wait
8405: PUSH
8406: EMPTY
8407: LIST
8408: ST_TO_ADDR
8409: END
// every 100 trigger IAmSpec do
8410: CALL_OW 531
8414: IFFALSE 8430
8416: GO 8418
8418: DISABLE
// WaitServerStrings = [ #Player-IAmSpec ] ;
8419: LD_ADDR_EXP 54
8423: PUSH
8424: LD_STRING #Player-IAmSpec
8426: PUSH
8427: EMPTY
8428: LIST
8429: ST_TO_ADDR
8430: END
// every 100 trigger GameEnded and IAmSpec do
8431: LD_LOC 15
8435: PUSH
8436: CALL_OW 531
8440: AND
8441: IFFALSE 8450
8443: GO 8445
8445: DISABLE
// YouLostInMultiplayer ;
8446: CALL_OW 107
8450: END
// every 100 trigger CanWinLoose and not GameEnded marked 401 do
8451: CALL 7837 0 0
8455: PUSH
8456: LD_LOC 15
8460: NOT
8461: AND
8462: IFFALSE 8478
8464: GO 8466
8466: DISABLE
// WaitServerStrings = [ $player-win ] ;
8467: LD_ADDR_EXP 54
8471: PUSH
8472: LD_STRING $player-win
8474: PUSH
8475: EMPTY
8476: LIST
8477: ST_TO_ADDR
8478: END
// every 100 trigger CanWinLoose and GameEnded marked 401 do
8479: CALL 7837 0 0
8483: PUSH
8484: LD_LOC 15
8488: AND
8489: IFFALSE 8513
8491: GO 8493
8493: DISABLE
// begin SA_Win ( Side_Nations [ mp_player_side ] ) ;
8494: LD_EXP 35
8498: PUSH
8499: LD_OWVAR 7
8503: ARRAY
8504: PPUSH
8505: CALL 7508 0 1
// YouWinInMultiplayer ;
8509: CALL_OW 106
// end ;
8513: END
// every 100 trigger isEditor marked 401 do
8514: LD_OWVAR 84
8518: IFFALSE 8534
8520: GO 8522
8522: DISABLE
// Debug_Strings = [ You won ] ;
8523: LD_ADDR_OWVAR 48
8527: PUSH
8528: LD_STRING You won
8530: PUSH
8531: EMPTY
8532: LIST
8533: ST_TO_ADDR
8534: END
// every 100 trigger isEditor marked 400 do
8535: LD_OWVAR 84
8539: IFFALSE 8555
8541: GO 8543
8543: DISABLE
// Debug_Strings = [ You loss ] ;
8544: LD_ADDR_OWVAR 48
8548: PUSH
8549: LD_STRING You loss
8551: PUSH
8552: EMPTY
8553: LIST
8554: ST_TO_ADDR
8555: END
// every 100 marked 98 do var i , un ;
8556: GO 8558
8558: DISABLE
8559: LD_INT 0
8561: PPUSH
8562: PPUSH
// begin for i = 1 to side_positions do
8563: LD_ADDR_VAR 0 1
8567: PUSH
8568: DOUBLE
8569: LD_INT 1
8571: DEC
8572: ST_TO_ADDR
8573: LD_EXP 34
8577: PUSH
8578: FOR_TO
8579: IFFALSE 8666
// begin if side_positions [ i ] then
8581: LD_EXP 34
8585: PUSH
8586: LD_VAR 0 1
8590: ARRAY
8591: IFFALSE 8664
// if not HasPower ( i ) and not defeated [ i ] then
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL 7901 0 1
8602: NOT
8603: PUSH
8604: LD_LOC 14
8608: PUSH
8609: LD_VAR 0 1
8613: ARRAY
8614: NOT
8615: AND
8616: IFFALSE 8664
// begin defeated = replace ( defeated , i , true ) ;
8618: LD_ADDR_LOC 14
8622: PUSH
8623: LD_LOC 14
8627: PPUSH
8628: LD_VAR 0 1
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: CALL_OW 1
8640: ST_TO_ADDR
// if i = mp_player_side then
8641: LD_VAR 0 1
8645: PUSH
8646: LD_OWVAR 7
8650: EQUAL
8651: IFFALSE 8664
// begin Multiplayer_Loose_Message ;
8653: CALL_OW 521
// SetPlayerSpectator ( ) ;
8657: CALL_OW 572
// enable ( 400 ) ;
8661: LD_INT 400
8663: ENABLE_MARKED
// end ; end ; end ;
8664: GO 8578
8666: POP
8667: POP
// DidGameEnd ;
8668: CALL 8683 0 0
// if not GameEnded then
8672: LD_LOC 15
8676: NOT
8677: IFFALSE 8680
// enable ;
8679: ENABLE
// end ;
8680: PPOPN 2
8682: END
// function DidGameEnd ; var i , k , enemy ; begin
8683: LD_INT 0
8685: PPUSH
8686: PPUSH
8687: PPUSH
8688: PPUSH
// enemy = [ ] ;
8689: LD_ADDR_VAR 0 4
8693: PUSH
8694: EMPTY
8695: ST_TO_ADDR
// for i = 1 to side_positions do
8696: LD_ADDR_VAR 0 2
8700: PUSH
8701: DOUBLE
8702: LD_INT 1
8704: DEC
8705: ST_TO_ADDR
8706: LD_EXP 34
8710: PUSH
8711: FOR_TO
8712: IFFALSE 8806
// if not defeated [ i ] then
8714: LD_LOC 14
8718: PUSH
8719: LD_VAR 0 2
8723: ARRAY
8724: NOT
8725: IFFALSE 8804
// for k = 1 to side_positions do
8727: LD_ADDR_VAR 0 3
8731: PUSH
8732: DOUBLE
8733: LD_INT 1
8735: DEC
8736: ST_TO_ADDR
8737: LD_EXP 34
8741: PUSH
8742: FOR_TO
8743: IFFALSE 8802
// if not defeated [ k ] then
8745: LD_LOC 14
8749: PUSH
8750: LD_VAR 0 3
8754: ARRAY
8755: NOT
8756: IFFALSE 8800
// if not AlliedSides ( i , k ) then
8758: LD_VAR 0 2
8762: PPUSH
8763: LD_VAR 0 3
8767: PPUSH
8768: CALL 8247 0 2
8772: NOT
8773: IFFALSE 8800
// enemy = enemy ^ [ i , k ] ;
8775: LD_ADDR_VAR 0 4
8779: PUSH
8780: LD_VAR 0 4
8784: PUSH
8785: LD_VAR 0 2
8789: PUSH
8790: LD_VAR 0 3
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: ADD
8799: ST_TO_ADDR
8800: GO 8742
8802: POP
8803: POP
8804: GO 8711
8806: POP
8807: POP
// if not enemy then
8808: LD_VAR 0 4
8812: NOT
8813: IFFALSE 8839
// begin GameEnded = true ;
8815: LD_ADDR_LOC 15
8819: PUSH
8820: LD_INT 1
8822: ST_TO_ADDR
// if not defeated [ mp_player_side ] then
8823: LD_LOC 14
8827: PUSH
8828: LD_OWVAR 7
8832: ARRAY
8833: NOT
8834: IFFALSE 8839
// enable ( 401 ) ;
8836: LD_INT 401
8838: ENABLE_MARKED
// end ; end ;
8839: LD_VAR 0 1
8843: RET
// function unfog ; var k , friends ; begin
8844: LD_INT 0
8846: PPUSH
8847: PPUSH
8848: PPUSH
// for k = 1 to side_positions do
8849: LD_ADDR_VAR 0 2
8853: PUSH
8854: DOUBLE
8855: LD_INT 1
8857: DEC
8858: ST_TO_ADDR
8859: LD_EXP 34
8863: PUSH
8864: FOR_TO
8865: IFFALSE 8921
// if not defeated [ k ] then
8867: LD_LOC 14
8871: PUSH
8872: LD_VAR 0 2
8876: ARRAY
8877: NOT
8878: IFFALSE 8919
// if GetAttitude ( mp_player_side , k ) in [ att_friend ] then
8880: LD_OWVAR 7
8884: PPUSH
8885: LD_VAR 0 2
8889: PPUSH
8890: CALL_OW 81
8894: PUSH
8895: LD_INT 1
8897: PUSH
8898: EMPTY
8899: LIST
8900: IN
8901: IFFALSE 8919
// friends = friends ^ k ;
8903: LD_ADDR_VAR 0 3
8907: PUSH
8908: LD_VAR 0 3
8912: PUSH
8913: LD_VAR 0 2
8917: ADD
8918: ST_TO_ADDR
8919: GO 8864
8921: POP
8922: POP
// if not friends then
8923: LD_VAR 0 3
8927: NOT
8928: IFFALSE 8942
// begin SetPlayerSpectator ( ) ;
8930: CALL_OW 572
// unfoged = true ;
8934: LD_ADDR_LOC 16
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
// end ; end ;
8942: LD_VAR 0 1
8946: RET
// export function MakeGameEnd ; begin
8947: LD_INT 0
8949: PPUSH
// SetPlayerSpectator ( ) ;
8950: CALL_OW 572
// unfoged = true ;
8954: LD_ADDR_LOC 16
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// wait ( 0 0$5 ) ;
8962: LD_INT 175
8964: PPUSH
8965: CALL_OW 67
// GameEnded = true ;
8969: LD_ADDR_LOC 15
8973: PUSH
8974: LD_INT 1
8976: ST_TO_ADDR
// end ;
8977: LD_VAR 0 1
8981: RET
// export function GetGameEnded ; begin
8982: LD_INT 0
8984: PPUSH
// result = GameEnded ;
8985: LD_ADDR_VAR 0 1
8989: PUSH
8990: LD_LOC 15
8994: ST_TO_ADDR
// end ; end_of_file
8995: LD_VAR 0 1
8999: RET
// export function SetMpTechs ( ) ; var side , i ; begin
9000: LD_INT 0
9002: PPUSH
9003: PPUSH
9004: PPUSH
// for side = 1 to 8 do
9005: LD_ADDR_VAR 0 2
9009: PUSH
9010: DOUBLE
9011: LD_INT 1
9013: DEC
9014: ST_TO_ADDR
9015: LD_INT 8
9017: PUSH
9018: FOR_TO
9019: IFFALSE 9140
// begin for i = 1 to 72 do
9021: LD_ADDR_VAR 0 3
9025: PUSH
9026: DOUBLE
9027: LD_INT 1
9029: DEC
9030: ST_TO_ADDR
9031: LD_INT 72
9033: PUSH
9034: FOR_TO
9035: IFFALSE 9066
// SetTech ( i , side , GetRestrictions ( false , i ) ) ;
9037: LD_VAR 0 3
9041: PPUSH
9042: LD_VAR 0 2
9046: PPUSH
9047: LD_INT 0
9049: PPUSH
9050: LD_VAR 0 3
9054: PPUSH
9055: CALL_OW 565
9059: PPUSH
9060: CALL_OW 322
9064: GO 9034
9066: POP
9067: POP
// SetTech ( 73 , side , GetRestrictions ( false , 25 ) ) ;
9068: LD_INT 73
9070: PPUSH
9071: LD_VAR 0 2
9075: PPUSH
9076: LD_INT 0
9078: PPUSH
9079: LD_INT 25
9081: PPUSH
9082: CALL_OW 565
9086: PPUSH
9087: CALL_OW 322
// for i = 0 to 40 do
9091: LD_ADDR_VAR 0 3
9095: PUSH
9096: DOUBLE
9097: LD_INT 0
9099: DEC
9100: ST_TO_ADDR
9101: LD_INT 40
9103: PUSH
9104: FOR_TO
9105: IFFALSE 9136
// SetRestrict ( i , side , GetRestrictions ( true , i ) ) ;
9107: LD_VAR 0 3
9111: PPUSH
9112: LD_VAR 0 2
9116: PPUSH
9117: LD_INT 1
9119: PPUSH
9120: LD_VAR 0 3
9124: PPUSH
9125: CALL_OW 565
9129: PPUSH
9130: CALL_OW 324
9134: GO 9104
9136: POP
9137: POP
// end ;
9138: GO 9018
9140: POP
9141: POP
// end ;
9142: LD_VAR 0 1
9146: RET
// export function SetMpTechLevel ( level ) ; var side , i ; begin
9147: LD_INT 0
9149: PPUSH
9150: PPUSH
9151: PPUSH
// for side = 1 to 8 do
9152: LD_ADDR_VAR 0 3
9156: PUSH
9157: DOUBLE
9158: LD_INT 1
9160: DEC
9161: ST_TO_ADDR
9162: LD_INT 8
9164: PUSH
9165: FOR_TO
9166: IFFALSE 13162
// begin for i = 1 to 73 do
9168: LD_ADDR_VAR 0 4
9172: PUSH
9173: DOUBLE
9174: LD_INT 1
9176: DEC
9177: ST_TO_ADDR
9178: LD_INT 73
9180: PUSH
9181: FOR_TO
9182: IFFALSE 9203
// SetTech ( i , side , state_disabled ) ;
9184: LD_VAR 0 4
9188: PPUSH
9189: LD_VAR 0 3
9193: PPUSH
9194: LD_INT 0
9196: PPUSH
9197: CALL_OW 322
9201: GO 9181
9203: POP
9204: POP
// for i = 0 to 40 do
9205: LD_ADDR_VAR 0 4
9209: PUSH
9210: DOUBLE
9211: LD_INT 0
9213: DEC
9214: ST_TO_ADDR
9215: LD_INT 40
9217: PUSH
9218: FOR_TO
9219: IFFALSE 9240
// SetRestrict ( i , side , false ) ;
9221: LD_VAR 0 4
9225: PPUSH
9226: LD_VAR 0 3
9230: PPUSH
9231: LD_INT 0
9233: PPUSH
9234: CALL_OW 324
9238: GO 9218
9240: POP
9241: POP
// case level of 1 :
9242: LD_VAR 0 1
9246: PUSH
9247: LD_INT 1
9249: DOUBLE
9250: EQUAL
9251: IFTRUE 9255
9253: GO 9408
9255: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9256: LD_INT 35
9258: PPUSH
9259: LD_VAR 0 3
9263: PPUSH
9264: LD_INT 1
9266: PPUSH
9267: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9271: LD_INT 45
9273: PPUSH
9274: LD_VAR 0 3
9278: PPUSH
9279: LD_INT 1
9281: PPUSH
9282: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9286: LD_INT 46
9288: PPUSH
9289: LD_VAR 0 3
9293: PPUSH
9294: LD_INT 1
9296: PPUSH
9297: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9301: LD_INT 47
9303: PPUSH
9304: LD_VAR 0 3
9308: PPUSH
9309: LD_INT 1
9311: PPUSH
9312: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9316: LD_INT 0
9318: PPUSH
9319: LD_VAR 0 3
9323: PPUSH
9324: LD_INT 1
9326: PPUSH
9327: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9331: LD_INT 2
9333: PPUSH
9334: LD_VAR 0 3
9338: PPUSH
9339: LD_INT 1
9341: PPUSH
9342: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9346: LD_INT 4
9348: PPUSH
9349: LD_VAR 0 3
9353: PPUSH
9354: LD_INT 1
9356: PPUSH
9357: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9361: LD_INT 6
9363: PPUSH
9364: LD_VAR 0 3
9368: PPUSH
9369: LD_INT 1
9371: PPUSH
9372: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9376: LD_INT 29
9378: PPUSH
9379: LD_VAR 0 3
9383: PPUSH
9384: LD_INT 1
9386: PPUSH
9387: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9391: LD_INT 31
9393: PPUSH
9394: LD_VAR 0 3
9398: PPUSH
9399: LD_INT 1
9401: PPUSH
9402: CALL_OW 324
// end ; 2 :
9406: GO 13160
9408: LD_INT 2
9410: DOUBLE
9411: EQUAL
9412: IFTRUE 9416
9414: GO 9614
9416: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9417: LD_INT 35
9419: PPUSH
9420: LD_VAR 0 3
9424: PPUSH
9425: LD_INT 1
9427: PPUSH
9428: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9432: LD_INT 45
9434: PPUSH
9435: LD_VAR 0 3
9439: PPUSH
9440: LD_INT 1
9442: PPUSH
9443: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9447: LD_INT 46
9449: PPUSH
9450: LD_VAR 0 3
9454: PPUSH
9455: LD_INT 1
9457: PPUSH
9458: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9462: LD_INT 47
9464: PPUSH
9465: LD_VAR 0 3
9469: PPUSH
9470: LD_INT 1
9472: PPUSH
9473: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9477: LD_INT 1
9479: PPUSH
9480: LD_VAR 0 3
9484: PPUSH
9485: LD_INT 1
9487: PPUSH
9488: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9492: LD_INT 2
9494: PPUSH
9495: LD_VAR 0 3
9499: PPUSH
9500: LD_INT 1
9502: PPUSH
9503: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9507: LD_INT 11
9509: PPUSH
9510: LD_VAR 0 3
9514: PPUSH
9515: LD_INT 1
9517: PPUSH
9518: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9522: LD_INT 0
9524: PPUSH
9525: LD_VAR 0 3
9529: PPUSH
9530: LD_INT 1
9532: PPUSH
9533: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9537: LD_INT 2
9539: PPUSH
9540: LD_VAR 0 3
9544: PPUSH
9545: LD_INT 1
9547: PPUSH
9548: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9552: LD_INT 4
9554: PPUSH
9555: LD_VAR 0 3
9559: PPUSH
9560: LD_INT 1
9562: PPUSH
9563: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9567: LD_INT 6
9569: PPUSH
9570: LD_VAR 0 3
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
9582: LD_INT 29
9584: PPUSH
9585: LD_VAR 0 3
9589: PPUSH
9590: LD_INT 1
9592: PPUSH
9593: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
9597: LD_INT 31
9599: PPUSH
9600: LD_VAR 0 3
9604: PPUSH
9605: LD_INT 1
9607: PPUSH
9608: CALL_OW 324
// end ; 3 :
9612: GO 13160
9614: LD_INT 3
9616: DOUBLE
9617: EQUAL
9618: IFTRUE 9622
9620: GO 10075
9622: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
9623: LD_INT 35
9625: PPUSH
9626: LD_VAR 0 3
9630: PPUSH
9631: LD_INT 1
9633: PPUSH
9634: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
9638: LD_INT 45
9640: PPUSH
9641: LD_VAR 0 3
9645: PPUSH
9646: LD_INT 1
9648: PPUSH
9649: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
9653: LD_INT 46
9655: PPUSH
9656: LD_VAR 0 3
9660: PPUSH
9661: LD_INT 1
9663: PPUSH
9664: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
9668: LD_INT 47
9670: PPUSH
9671: LD_VAR 0 3
9675: PPUSH
9676: LD_INT 1
9678: PPUSH
9679: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
9683: LD_INT 1
9685: PPUSH
9686: LD_VAR 0 3
9690: PPUSH
9691: LD_INT 1
9693: PPUSH
9694: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
9698: LD_INT 2
9700: PPUSH
9701: LD_VAR 0 3
9705: PPUSH
9706: LD_INT 1
9708: PPUSH
9709: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
9713: LD_INT 11
9715: PPUSH
9716: LD_VAR 0 3
9720: PPUSH
9721: LD_INT 1
9723: PPUSH
9724: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
9728: LD_INT 48
9730: PPUSH
9731: LD_VAR 0 3
9735: PPUSH
9736: LD_INT 1
9738: PPUSH
9739: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
9743: LD_INT 69
9745: PPUSH
9746: LD_VAR 0 3
9750: PPUSH
9751: LD_INT 1
9753: PPUSH
9754: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
9758: LD_INT 39
9760: PPUSH
9761: LD_VAR 0 3
9765: PPUSH
9766: LD_INT 1
9768: PPUSH
9769: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
9773: LD_INT 43
9775: PPUSH
9776: LD_VAR 0 3
9780: PPUSH
9781: LD_INT 1
9783: PPUSH
9784: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
9788: LD_INT 51
9790: PPUSH
9791: LD_VAR 0 3
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
9803: LD_INT 6
9805: PPUSH
9806: LD_VAR 0 3
9810: PPUSH
9811: LD_INT 1
9813: PPUSH
9814: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
9818: LD_INT 0
9820: PPUSH
9821: LD_VAR 0 3
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
9833: LD_INT 2
9835: PPUSH
9836: LD_VAR 0 3
9840: PPUSH
9841: LD_INT 1
9843: PPUSH
9844: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
9848: LD_INT 3
9850: PPUSH
9851: LD_VAR 0 3
9855: PPUSH
9856: LD_INT 1
9858: PPUSH
9859: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
9863: LD_INT 4
9865: PPUSH
9866: LD_VAR 0 3
9870: PPUSH
9871: LD_INT 1
9873: PPUSH
9874: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
9878: LD_INT 6
9880: PPUSH
9881: LD_VAR 0 3
9885: PPUSH
9886: LD_INT 1
9888: PPUSH
9889: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
9893: LD_INT 7
9895: PPUSH
9896: LD_VAR 0 3
9900: PPUSH
9901: LD_INT 1
9903: PPUSH
9904: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
9908: LD_INT 8
9910: PPUSH
9911: LD_VAR 0 3
9915: PPUSH
9916: LD_INT 1
9918: PPUSH
9919: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
9923: LD_INT 10
9925: PPUSH
9926: LD_VAR 0 3
9930: PPUSH
9931: LD_INT 1
9933: PPUSH
9934: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
9938: LD_INT 15
9940: PPUSH
9941: LD_VAR 0 3
9945: PPUSH
9946: LD_INT 1
9948: PPUSH
9949: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
9953: LD_INT 16
9955: PPUSH
9956: LD_VAR 0 3
9960: PPUSH
9961: LD_INT 1
9963: PPUSH
9964: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
9968: LD_INT 17
9970: PPUSH
9971: LD_VAR 0 3
9975: PPUSH
9976: LD_INT 1
9978: PPUSH
9979: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
9983: LD_INT 20
9985: PPUSH
9986: LD_VAR 0 3
9990: PPUSH
9991: LD_INT 1
9993: PPUSH
9994: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
9998: LD_INT 26
10000: PPUSH
10001: LD_VAR 0 3
10005: PPUSH
10006: LD_INT 1
10008: PPUSH
10009: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10013: LD_INT 27
10015: PPUSH
10016: LD_VAR 0 3
10020: PPUSH
10021: LD_INT 1
10023: PPUSH
10024: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10028: LD_INT 29
10030: PPUSH
10031: LD_VAR 0 3
10035: PPUSH
10036: LD_INT 1
10038: PPUSH
10039: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10043: LD_INT 31
10045: PPUSH
10046: LD_VAR 0 3
10050: PPUSH
10051: LD_INT 1
10053: PPUSH
10054: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10058: LD_INT 32
10060: PPUSH
10061: LD_VAR 0 3
10065: PPUSH
10066: LD_INT 1
10068: PPUSH
10069: CALL_OW 324
// end ; 4 :
10073: GO 13160
10075: LD_INT 4
10077: DOUBLE
10078: EQUAL
10079: IFTRUE 10083
10081: GO 11031
10083: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
10084: LD_INT 35
10086: PPUSH
10087: LD_VAR 0 3
10091: PPUSH
10092: LD_INT 1
10094: PPUSH
10095: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
10099: LD_INT 45
10101: PPUSH
10102: LD_VAR 0 3
10106: PPUSH
10107: LD_INT 1
10109: PPUSH
10110: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
10114: LD_INT 46
10116: PPUSH
10117: LD_VAR 0 3
10121: PPUSH
10122: LD_INT 1
10124: PPUSH
10125: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
10129: LD_INT 47
10131: PPUSH
10132: LD_VAR 0 3
10136: PPUSH
10137: LD_INT 1
10139: PPUSH
10140: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
10144: LD_INT 1
10146: PPUSH
10147: LD_VAR 0 3
10151: PPUSH
10152: LD_INT 1
10154: PPUSH
10155: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
10159: LD_INT 2
10161: PPUSH
10162: LD_VAR 0 3
10166: PPUSH
10167: LD_INT 1
10169: PPUSH
10170: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
10174: LD_INT 11
10176: PPUSH
10177: LD_VAR 0 3
10181: PPUSH
10182: LD_INT 1
10184: PPUSH
10185: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
10189: LD_INT 20
10191: PPUSH
10192: LD_VAR 0 3
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
10204: LD_INT 48
10206: PPUSH
10207: LD_VAR 0 3
10211: PPUSH
10212: LD_INT 1
10214: PPUSH
10215: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
10219: LD_INT 49
10221: PPUSH
10222: LD_VAR 0 3
10226: PPUSH
10227: LD_INT 1
10229: PPUSH
10230: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
10234: LD_INT 69
10236: PPUSH
10237: LD_VAR 0 3
10241: PPUSH
10242: LD_INT 1
10244: PPUSH
10245: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
10249: LD_INT 39
10251: PPUSH
10252: LD_VAR 0 3
10256: PPUSH
10257: LD_INT 1
10259: PPUSH
10260: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
10264: LD_INT 34
10266: PPUSH
10267: LD_VAR 0 3
10271: PPUSH
10272: LD_INT 1
10274: PPUSH
10275: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
10279: LD_INT 42
10281: PPUSH
10282: LD_VAR 0 3
10286: PPUSH
10287: LD_INT 1
10289: PPUSH
10290: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
10294: LD_INT 44
10296: PPUSH
10297: LD_VAR 0 3
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
10309: LD_INT 41
10311: PPUSH
10312: LD_VAR 0 3
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
10324: LD_INT 43
10326: PPUSH
10327: LD_VAR 0 3
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
10339: LD_INT 70
10341: PPUSH
10342: LD_VAR 0 3
10346: PPUSH
10347: LD_INT 1
10349: PPUSH
10350: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
10354: LD_INT 51
10356: PPUSH
10357: LD_VAR 0 3
10361: PPUSH
10362: LD_INT 1
10364: PPUSH
10365: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
10369: LD_INT 52
10371: PPUSH
10372: LD_VAR 0 3
10376: PPUSH
10377: LD_INT 1
10379: PPUSH
10380: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
10384: LD_INT 6
10386: PPUSH
10387: LD_VAR 0 3
10391: PPUSH
10392: LD_INT 1
10394: PPUSH
10395: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
10399: LD_INT 15
10401: PPUSH
10402: LD_VAR 0 3
10406: PPUSH
10407: LD_INT 1
10409: PPUSH
10410: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
10414: LD_INT 7
10416: PPUSH
10417: LD_VAR 0 3
10421: PPUSH
10422: LD_INT 1
10424: PPUSH
10425: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
10429: LD_INT 12
10431: PPUSH
10432: LD_VAR 0 3
10436: PPUSH
10437: LD_INT 1
10439: PPUSH
10440: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
10444: LD_INT 18
10446: PPUSH
10447: LD_VAR 0 3
10451: PPUSH
10452: LD_INT 1
10454: PPUSH
10455: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
10459: LD_INT 60
10461: PPUSH
10462: LD_VAR 0 3
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
10474: LD_INT 9
10476: PPUSH
10477: LD_VAR 0 3
10481: PPUSH
10482: LD_INT 1
10484: PPUSH
10485: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
10489: LD_INT 30
10491: PPUSH
10492: LD_VAR 0 3
10496: PPUSH
10497: LD_INT 1
10499: PPUSH
10500: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
10504: LD_INT 37
10506: PPUSH
10507: LD_VAR 0 3
10511: PPUSH
10512: LD_INT 1
10514: PPUSH
10515: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
10519: LD_INT 5
10521: PPUSH
10522: LD_VAR 0 3
10526: PPUSH
10527: LD_INT 1
10529: PPUSH
10530: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
10534: LD_INT 66
10536: PPUSH
10537: LD_VAR 0 3
10541: PPUSH
10542: LD_INT 1
10544: PPUSH
10545: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
10549: LD_INT 21
10551: PPUSH
10552: LD_VAR 0 3
10556: PPUSH
10557: LD_INT 1
10559: PPUSH
10560: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
10564: LD_INT 22
10566: PPUSH
10567: LD_VAR 0 3
10571: PPUSH
10572: LD_INT 1
10574: PPUSH
10575: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
10579: LD_INT 54
10581: PPUSH
10582: LD_VAR 0 3
10586: PPUSH
10587: LD_INT 1
10589: PPUSH
10590: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
10594: LD_INT 0
10596: PPUSH
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 1
10604: PPUSH
10605: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
10609: LD_INT 1
10611: PPUSH
10612: LD_VAR 0 3
10616: PPUSH
10617: LD_INT 1
10619: PPUSH
10620: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
10624: LD_INT 2
10626: PPUSH
10627: LD_VAR 0 3
10631: PPUSH
10632: LD_INT 1
10634: PPUSH
10635: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
10639: LD_INT 3
10641: PPUSH
10642: LD_VAR 0 3
10646: PPUSH
10647: LD_INT 1
10649: PPUSH
10650: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
10654: LD_INT 4
10656: PPUSH
10657: LD_VAR 0 3
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
10669: LD_INT 5
10671: PPUSH
10672: LD_VAR 0 3
10676: PPUSH
10677: LD_INT 1
10679: PPUSH
10680: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
10684: LD_INT 6
10686: PPUSH
10687: LD_VAR 0 3
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
10699: LD_INT 7
10701: PPUSH
10702: LD_VAR 0 3
10706: PPUSH
10707: LD_INT 1
10709: PPUSH
10710: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
10714: LD_INT 8
10716: PPUSH
10717: LD_VAR 0 3
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
10729: LD_INT 10
10731: PPUSH
10732: LD_VAR 0 3
10736: PPUSH
10737: LD_INT 1
10739: PPUSH
10740: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
10744: LD_INT 11
10746: PPUSH
10747: LD_VAR 0 3
10751: PPUSH
10752: LD_INT 1
10754: PPUSH
10755: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
10759: LD_INT 12
10761: PPUSH
10762: LD_VAR 0 3
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
10774: LD_INT 13
10776: PPUSH
10777: LD_VAR 0 3
10781: PPUSH
10782: LD_INT 1
10784: PPUSH
10785: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
10789: LD_INT 14
10791: PPUSH
10792: LD_VAR 0 3
10796: PPUSH
10797: LD_INT 1
10799: PPUSH
10800: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
10804: LD_INT 15
10806: PPUSH
10807: LD_VAR 0 3
10811: PPUSH
10812: LD_INT 1
10814: PPUSH
10815: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
10819: LD_INT 16
10821: PPUSH
10822: LD_VAR 0 3
10826: PPUSH
10827: LD_INT 1
10829: PPUSH
10830: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
10834: LD_INT 17
10836: PPUSH
10837: LD_VAR 0 3
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
10849: LD_INT 19
10851: PPUSH
10852: LD_VAR 0 3
10856: PPUSH
10857: LD_INT 1
10859: PPUSH
10860: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
10864: LD_INT 20
10866: PPUSH
10867: LD_VAR 0 3
10871: PPUSH
10872: LD_INT 1
10874: PPUSH
10875: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
10879: LD_INT 21
10881: PPUSH
10882: LD_VAR 0 3
10886: PPUSH
10887: LD_INT 1
10889: PPUSH
10890: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
10894: LD_INT 23
10896: PPUSH
10897: LD_VAR 0 3
10901: PPUSH
10902: LD_INT 1
10904: PPUSH
10905: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
10909: LD_INT 26
10911: PPUSH
10912: LD_VAR 0 3
10916: PPUSH
10917: LD_INT 1
10919: PPUSH
10920: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
10924: LD_INT 27
10926: PPUSH
10927: LD_VAR 0 3
10931: PPUSH
10932: LD_INT 1
10934: PPUSH
10935: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
10939: LD_INT 28
10941: PPUSH
10942: LD_VAR 0 3
10946: PPUSH
10947: LD_INT 1
10949: PPUSH
10950: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
10954: LD_INT 29
10956: PPUSH
10957: LD_VAR 0 3
10961: PPUSH
10962: LD_INT 1
10964: PPUSH
10965: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
10969: LD_INT 30
10971: PPUSH
10972: LD_VAR 0 3
10976: PPUSH
10977: LD_INT 1
10979: PPUSH
10980: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
10984: LD_INT 31
10986: PPUSH
10987: LD_VAR 0 3
10991: PPUSH
10992: LD_INT 1
10994: PPUSH
10995: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
10999: LD_INT 32
11001: PPUSH
11002: LD_VAR 0 3
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
11014: LD_INT 36
11016: PPUSH
11017: LD_VAR 0 3
11021: PPUSH
11022: LD_INT 1
11024: PPUSH
11025: CALL_OW 324
// end ; 5 :
11029: GO 13160
11031: LD_INT 5
11033: DOUBLE
11034: EQUAL
11035: IFTRUE 11039
11037: GO 12152
11039: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
11040: LD_INT 35
11042: PPUSH
11043: LD_VAR 0 3
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
11055: LD_INT 45
11057: PPUSH
11058: LD_VAR 0 3
11062: PPUSH
11063: LD_INT 1
11065: PPUSH
11066: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
11070: LD_INT 46
11072: PPUSH
11073: LD_VAR 0 3
11077: PPUSH
11078: LD_INT 1
11080: PPUSH
11081: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
11085: LD_INT 47
11087: PPUSH
11088: LD_VAR 0 3
11092: PPUSH
11093: LD_INT 1
11095: PPUSH
11096: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
11100: LD_INT 1
11102: PPUSH
11103: LD_VAR 0 3
11107: PPUSH
11108: LD_INT 1
11110: PPUSH
11111: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
11115: LD_INT 2
11117: PPUSH
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 1
11125: PPUSH
11126: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
11130: LD_INT 11
11132: PPUSH
11133: LD_VAR 0 3
11137: PPUSH
11138: LD_INT 1
11140: PPUSH
11141: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
11145: LD_INT 20
11147: PPUSH
11148: LD_VAR 0 3
11152: PPUSH
11153: LD_INT 1
11155: PPUSH
11156: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
11160: LD_INT 48
11162: PPUSH
11163: LD_VAR 0 3
11167: PPUSH
11168: LD_INT 1
11170: PPUSH
11171: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
11175: LD_INT 49
11177: PPUSH
11178: LD_VAR 0 3
11182: PPUSH
11183: LD_INT 1
11185: PPUSH
11186: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
11190: LD_INT 69
11192: PPUSH
11193: LD_VAR 0 3
11197: PPUSH
11198: LD_INT 1
11200: PPUSH
11201: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
11205: LD_INT 39
11207: PPUSH
11208: LD_VAR 0 3
11212: PPUSH
11213: LD_INT 1
11215: PPUSH
11216: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
11220: LD_INT 34
11222: PPUSH
11223: LD_VAR 0 3
11227: PPUSH
11228: LD_INT 1
11230: PPUSH
11231: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
11235: LD_INT 42
11237: PPUSH
11238: LD_VAR 0 3
11242: PPUSH
11243: LD_INT 1
11245: PPUSH
11246: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
11250: LD_INT 44
11252: PPUSH
11253: LD_VAR 0 3
11257: PPUSH
11258: LD_INT 1
11260: PPUSH
11261: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
11265: LD_INT 41
11267: PPUSH
11268: LD_VAR 0 3
11272: PPUSH
11273: LD_INT 1
11275: PPUSH
11276: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
11280: LD_INT 40
11282: PPUSH
11283: LD_VAR 0 3
11287: PPUSH
11288: LD_INT 1
11290: PPUSH
11291: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
11295: LD_INT 43
11297: PPUSH
11298: LD_VAR 0 3
11302: PPUSH
11303: LD_INT 1
11305: PPUSH
11306: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
11310: LD_INT 70
11312: PPUSH
11313: LD_VAR 0 3
11317: PPUSH
11318: LD_INT 1
11320: PPUSH
11321: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
11325: LD_INT 51
11327: PPUSH
11328: LD_VAR 0 3
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
11340: LD_INT 52
11342: PPUSH
11343: LD_VAR 0 3
11347: PPUSH
11348: LD_INT 1
11350: PPUSH
11351: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
11355: LD_INT 6
11357: PPUSH
11358: LD_VAR 0 3
11362: PPUSH
11363: LD_INT 1
11365: PPUSH
11366: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
11370: LD_INT 15
11372: PPUSH
11373: LD_VAR 0 3
11377: PPUSH
11378: LD_INT 1
11380: PPUSH
11381: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
11385: LD_INT 7
11387: PPUSH
11388: LD_VAR 0 3
11392: PPUSH
11393: LD_INT 1
11395: PPUSH
11396: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
11400: LD_INT 12
11402: PPUSH
11403: LD_VAR 0 3
11407: PPUSH
11408: LD_INT 1
11410: PPUSH
11411: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
11415: LD_INT 17
11417: PPUSH
11418: LD_VAR 0 3
11422: PPUSH
11423: LD_INT 1
11425: PPUSH
11426: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
11430: LD_INT 18
11432: PPUSH
11433: LD_VAR 0 3
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
11445: LD_INT 60
11447: PPUSH
11448: LD_VAR 0 3
11452: PPUSH
11453: LD_INT 1
11455: PPUSH
11456: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
11460: LD_INT 32
11462: PPUSH
11463: LD_VAR 0 3
11467: PPUSH
11468: LD_INT 1
11470: PPUSH
11471: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
11475: LD_INT 9
11477: PPUSH
11478: LD_VAR 0 3
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
11490: LD_INT 57
11492: PPUSH
11493: LD_VAR 0 3
11497: PPUSH
11498: LD_INT 1
11500: PPUSH
11501: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
11505: LD_INT 30
11507: PPUSH
11508: LD_VAR 0 3
11512: PPUSH
11513: LD_INT 1
11515: PPUSH
11516: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
11520: LD_INT 37
11522: PPUSH
11523: LD_VAR 0 3
11527: PPUSH
11528: LD_INT 1
11530: PPUSH
11531: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
11535: LD_INT 63
11537: PPUSH
11538: LD_VAR 0 3
11542: PPUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
11550: LD_INT 3
11552: PPUSH
11553: LD_VAR 0 3
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
11565: LD_INT 4
11567: PPUSH
11568: LD_VAR 0 3
11572: PPUSH
11573: LD_INT 1
11575: PPUSH
11576: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
11580: LD_INT 5
11582: PPUSH
11583: LD_VAR 0 3
11587: PPUSH
11588: LD_INT 1
11590: PPUSH
11591: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
11595: LD_INT 66
11597: PPUSH
11598: LD_VAR 0 3
11602: PPUSH
11603: LD_INT 1
11605: PPUSH
11606: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
11610: LD_INT 21
11612: PPUSH
11613: LD_VAR 0 3
11617: PPUSH
11618: LD_INT 1
11620: PPUSH
11621: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
11625: LD_INT 22
11627: PPUSH
11628: LD_VAR 0 3
11632: PPUSH
11633: LD_INT 1
11635: PPUSH
11636: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
11640: LD_INT 19
11642: PPUSH
11643: LD_VAR 0 3
11647: PPUSH
11648: LD_INT 1
11650: PPUSH
11651: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
11655: LD_INT 54
11657: PPUSH
11658: LD_VAR 0 3
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
11670: LD_INT 55
11672: PPUSH
11673: LD_VAR 0 3
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 322
// SetRestrict ( b_depot , side , true ) ;
11685: LD_INT 0
11687: PPUSH
11688: LD_VAR 0 3
11692: PPUSH
11693: LD_INT 1
11695: PPUSH
11696: CALL_OW 324
// SetRestrict ( b_warehouse , side , true ) ;
11700: LD_INT 1
11702: PPUSH
11703: LD_VAR 0 3
11707: PPUSH
11708: LD_INT 1
11710: PPUSH
11711: CALL_OW 324
// SetRestrict ( b_workshop , side , true ) ;
11715: LD_INT 2
11717: PPUSH
11718: LD_VAR 0 3
11722: PPUSH
11723: LD_INT 1
11725: PPUSH
11726: CALL_OW 324
// SetRestrict ( b_factory , side , true ) ;
11730: LD_INT 3
11732: PPUSH
11733: LD_VAR 0 3
11737: PPUSH
11738: LD_INT 1
11740: PPUSH
11741: CALL_OW 324
// SetRestrict ( b_armoury , side , true ) ;
11745: LD_INT 4
11747: PPUSH
11748: LD_VAR 0 3
11752: PPUSH
11753: LD_INT 1
11755: PPUSH
11756: CALL_OW 324
// SetRestrict ( b_barracks , side , true ) ;
11760: LD_INT 5
11762: PPUSH
11763: LD_VAR 0 3
11767: PPUSH
11768: LD_INT 1
11770: PPUSH
11771: CALL_OW 324
// SetRestrict ( b_lab , side , true ) ;
11775: LD_INT 6
11777: PPUSH
11778: LD_VAR 0 3
11782: PPUSH
11783: LD_INT 1
11785: PPUSH
11786: CALL_OW 324
// SetRestrict ( b_lab_half , side , true ) ;
11790: LD_INT 7
11792: PPUSH
11793: LD_VAR 0 3
11797: PPUSH
11798: LD_INT 1
11800: PPUSH
11801: CALL_OW 324
// SetRestrict ( b_lab_full , side , true ) ;
11805: LD_INT 8
11807: PPUSH
11808: LD_VAR 0 3
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 324
// SetRestrict ( b_lab_weapon , side , true ) ;
11820: LD_INT 10
11822: PPUSH
11823: LD_VAR 0 3
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 324
// SetRestrict ( b_lab_siberium , side , true ) ;
11835: LD_INT 11
11837: PPUSH
11838: LD_VAR 0 3
11842: PPUSH
11843: LD_INT 1
11845: PPUSH
11846: CALL_OW 324
// SetRestrict ( b_lab_computer , side , true ) ;
11850: LD_INT 12
11852: PPUSH
11853: LD_VAR 0 3
11857: PPUSH
11858: LD_INT 1
11860: PPUSH
11861: CALL_OW 324
// SetRestrict ( b_lab_biological , side , true ) ;
11865: LD_INT 13
11867: PPUSH
11868: LD_VAR 0 3
11872: PPUSH
11873: LD_INT 1
11875: PPUSH
11876: CALL_OW 324
// SetRestrict ( b_lab_spacetime , side , true ) ;
11880: LD_INT 14
11882: PPUSH
11883: LD_VAR 0 3
11887: PPUSH
11888: LD_INT 1
11890: PPUSH
11891: CALL_OW 324
// SetRestrict ( b_lab_opto , side , true ) ;
11895: LD_INT 15
11897: PPUSH
11898: LD_VAR 0 3
11902: PPUSH
11903: LD_INT 1
11905: PPUSH
11906: CALL_OW 324
// SetRestrict ( b_ext_track , side , true ) ;
11910: LD_INT 16
11912: PPUSH
11913: LD_VAR 0 3
11917: PPUSH
11918: LD_INT 1
11920: PPUSH
11921: CALL_OW 324
// SetRestrict ( b_ext_gun , side , true ) ;
11925: LD_INT 17
11927: PPUSH
11928: LD_VAR 0 3
11932: PPUSH
11933: LD_INT 1
11935: PPUSH
11936: CALL_OW 324
// SetRestrict ( b_ext_rocket , side , true ) ;
11940: LD_INT 18
11942: PPUSH
11943: LD_VAR 0 3
11947: PPUSH
11948: LD_INT 1
11950: PPUSH
11951: CALL_OW 324
// SetRestrict ( b_ext_noncombat , side , true ) ;
11955: LD_INT 19
11957: PPUSH
11958: LD_VAR 0 3
11962: PPUSH
11963: LD_INT 1
11965: PPUSH
11966: CALL_OW 324
// SetRestrict ( b_ext_radar , side , true ) ;
11970: LD_INT 20
11972: PPUSH
11973: LD_VAR 0 3
11977: PPUSH
11978: LD_INT 1
11980: PPUSH
11981: CALL_OW 324
// SetRestrict ( b_ext_siberium , side , true ) ;
11985: LD_INT 21
11987: PPUSH
11988: LD_VAR 0 3
11992: PPUSH
11993: LD_INT 1
11995: PPUSH
11996: CALL_OW 324
// SetRestrict ( b_ext_stitch , side , true ) ;
12000: LD_INT 23
12002: PPUSH
12003: LD_VAR 0 3
12007: PPUSH
12008: LD_INT 1
12010: PPUSH
12011: CALL_OW 324
// SetRestrict ( b_oil_power , side , true ) ;
12015: LD_INT 26
12017: PPUSH
12018: LD_VAR 0 3
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: CALL_OW 324
// SetRestrict ( b_solar_power , side , true ) ;
12030: LD_INT 27
12032: PPUSH
12033: LD_VAR 0 3
12037: PPUSH
12038: LD_INT 1
12040: PPUSH
12041: CALL_OW 324
// SetRestrict ( b_siberite_power , side , true ) ;
12045: LD_INT 28
12047: PPUSH
12048: LD_VAR 0 3
12052: PPUSH
12053: LD_INT 1
12055: PPUSH
12056: CALL_OW 324
// SetRestrict ( b_oil_mine , side , true ) ;
12060: LD_INT 29
12062: PPUSH
12063: LD_VAR 0 3
12067: PPUSH
12068: LD_INT 1
12070: PPUSH
12071: CALL_OW 324
// SetRestrict ( b_siberite_mine , side , true ) ;
12075: LD_INT 30
12077: PPUSH
12078: LD_VAR 0 3
12082: PPUSH
12083: LD_INT 1
12085: PPUSH
12086: CALL_OW 324
// SetRestrict ( b_breastwork , side , true ) ;
12090: LD_INT 31
12092: PPUSH
12093: LD_VAR 0 3
12097: PPUSH
12098: LD_INT 1
12100: PPUSH
12101: CALL_OW 324
// SetRestrict ( b_bunker , side , true ) ;
12105: LD_INT 32
12107: PPUSH
12108: LD_VAR 0 3
12112: PPUSH
12113: LD_INT 1
12115: PPUSH
12116: CALL_OW 324
// SetRestrict ( b_turret , side , true ) ;
12120: LD_INT 33
12122: PPUSH
12123: LD_VAR 0 3
12127: PPUSH
12128: LD_INT 1
12130: PPUSH
12131: CALL_OW 324
// SetRestrict ( b_control_tower , side , true ) ;
12135: LD_INT 36
12137: PPUSH
12138: LD_VAR 0 3
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: CALL_OW 324
// end ; 6 :
12150: GO 13160
12152: LD_INT 6
12154: DOUBLE
12155: EQUAL
12156: IFTRUE 12160
12158: GO 13085
12160: POP
// begin SetTech ( tech_solpow , side , state_enabled ) ;
12161: LD_INT 35
12163: PPUSH
12164: LD_VAR 0 3
12168: PPUSH
12169: LD_INT 1
12171: PPUSH
12172: CALL_OW 322
// SetTech ( tech_soleng , side , state_enabled ) ;
12176: LD_INT 45
12178: PPUSH
12179: LD_VAR 0 3
12183: PPUSH
12184: LD_INT 1
12186: PPUSH
12187: CALL_OW 322
// SetTech ( tech_oilpow , side , state_enabled ) ;
12191: LD_INT 46
12193: PPUSH
12194: LD_VAR 0 3
12198: PPUSH
12199: LD_INT 1
12201: PPUSH
12202: CALL_OW 322
// SetTech ( tech_oileng , side , state_enabled ) ;
12206: LD_INT 47
12208: PPUSH
12209: LD_VAR 0 3
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: CALL_OW 322
// SetTech ( tech_apelang , side , state_enabled ) ;
12221: LD_INT 1
12223: PPUSH
12224: LD_VAR 0 3
12228: PPUSH
12229: LD_INT 1
12231: PPUSH
12232: CALL_OW 322
// SetTech ( tech_apepsych , side , state_enabled ) ;
12236: LD_INT 2
12238: PPUSH
12239: LD_VAR 0 3
12243: PPUSH
12244: LD_INT 1
12246: PPUSH
12247: CALL_OW 322
// SetTech ( tech_apeagres , side , state_enabled ) ;
12251: LD_INT 11
12253: PPUSH
12254: LD_VAR 0 3
12258: PPUSH
12259: LD_INT 1
12261: PPUSH
12262: CALL_OW 322
// SetTech ( tech_sibdet , side , state_enabled ) ;
12266: LD_INT 20
12268: PPUSH
12269: LD_VAR 0 3
12273: PPUSH
12274: LD_INT 1
12276: PPUSH
12277: CALL_OW 322
// SetTech ( tech_tech1 , side , state_enabled ) ;
12281: LD_INT 48
12283: PPUSH
12284: LD_VAR 0 3
12288: PPUSH
12289: LD_INT 1
12291: PPUSH
12292: CALL_OW 322
// SetTech ( tech_tech2 , side , state_enabled ) ;
12296: LD_INT 49
12298: PPUSH
12299: LD_VAR 0 3
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: CALL_OW 322
// SetTech ( tech_tech3 , side , state_enabled ) ;
12311: LD_INT 50
12313: PPUSH
12314: LD_VAR 0 3
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: CALL_OW 322
// SetTech ( tech_gatling , side , state_enabled ) ;
12326: LD_INT 69
12328: PPUSH
12329: LD_VAR 0 3
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 322
// SetTech ( tech_gun , side , state_enabled ) ;
12341: LD_INT 39
12343: PPUSH
12344: LD_VAR 0 3
12348: PPUSH
12349: LD_INT 1
12351: PPUSH
12352: CALL_OW 322
// SetTech ( tech_advmet , side , state_enabled ) ;
12356: LD_INT 34
12358: PPUSH
12359: LD_VAR 0 3
12363: PPUSH
12364: LD_INT 1
12366: PPUSH
12367: CALL_OW 322
// SetTech ( tech_explos , side , state_enabled ) ;
12371: LD_INT 42
12373: PPUSH
12374: LD_VAR 0 3
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: CALL_OW 322
// SetTech ( tech_bazooka , side , state_enabled ) ;
12386: LD_INT 44
12388: PPUSH
12389: LD_VAR 0 3
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 322
// SetTech ( tech_mortar , side , state_enabled ) ;
12401: LD_INT 41
12403: PPUSH
12404: LD_VAR 0 3
12408: PPUSH
12409: LD_INT 1
12411: PPUSH
12412: CALL_OW 322
// SetTech ( tech_soporific , side , state_enabled ) ;
12416: LD_INT 13
12418: PPUSH
12419: LD_VAR 0 3
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 322
// SetTech ( tech_rocket , side , state_enabled ) ;
12431: LD_INT 40
12433: PPUSH
12434: LD_VAR 0 3
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 322
// SetTech ( tech_selfdest , side , state_enabled ) ;
12446: LD_INT 43
12448: PPUSH
12449: LD_VAR 0 3
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 322
// SetTech ( tech_flame , side , state_enabled ) ;
12461: LD_INT 70
12463: PPUSH
12464: LD_VAR 0 3
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 322
// SetTech ( tech_behemoth , side , state_enabled ) ;
12476: LD_INT 23
12478: PPUSH
12479: LD_VAR 0 3
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 322
// SetTech ( tech_weap1 , side , state_enabled ) ;
12491: LD_INT 51
12493: PPUSH
12494: LD_VAR 0 3
12498: PPUSH
12499: LD_INT 1
12501: PPUSH
12502: CALL_OW 322
// SetTech ( tech_weap2 , side , state_enabled ) ;
12506: LD_INT 52
12508: PPUSH
12509: LD_VAR 0 3
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: CALL_OW 322
// SetTech ( tech_radar , side , state_enabled ) ;
12521: LD_INT 6
12523: PPUSH
12524: LD_VAR 0 3
12528: PPUSH
12529: LD_INT 1
12531: PPUSH
12532: CALL_OW 322
// SetTech ( tech_remcont , side , state_enabled ) ;
12536: LD_INT 15
12538: PPUSH
12539: LD_VAR 0 3
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: CALL_OW 322
// SetTech ( tech_matdet , side , state_enabled ) ;
12551: LD_INT 7
12553: PPUSH
12554: LD_VAR 0 3
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: CALL_OW 322
// SetTech ( tech_lassight , side , state_enabled ) ;
12566: LD_INT 12
12568: PPUSH
12569: LD_VAR 0 3
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: CALL_OW 322
// SetTech ( tech_laser , side , state_enabled ) ;
12581: LD_INT 10
12583: PPUSH
12584: LD_VAR 0 3
12588: PPUSH
12589: LD_INT 1
12591: PPUSH
12592: CALL_OW 322
// SetTech ( tech_hidcam , side , state_enabled ) ;
12596: LD_INT 17
12598: PPUSH
12599: LD_VAR 0 3
12603: PPUSH
12604: LD_INT 1
12606: PPUSH
12607: CALL_OW 322
// SetTech ( tech_remcharge , side , state_enabled ) ;
12611: LD_INT 18
12613: PPUSH
12614: LD_VAR 0 3
12618: PPUSH
12619: LD_INT 1
12621: PPUSH
12622: CALL_OW 322
// SetTech ( tech_opto1 , side , state_enabled ) ;
12626: LD_INT 60
12628: PPUSH
12629: LD_VAR 0 3
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: CALL_OW 322
// SetTech ( tech_opto2 , side , state_enabled ) ;
12641: LD_INT 61
12643: PPUSH
12644: LD_VAR 0 3
12648: PPUSH
12649: LD_INT 1
12651: PPUSH
12652: CALL_OW 322
// SetTech ( tech_ai , side , state_enabled ) ;
12656: LD_INT 32
12658: PPUSH
12659: LD_VAR 0 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 322
// SetTech ( tech_advai , side , state_enabled ) ;
12671: LD_INT 27
12673: PPUSH
12674: LD_VAR 0 3
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 322
// SetTech ( tech_advchassis , side , state_enabled ) ;
12686: LD_INT 36
12688: PPUSH
12689: LD_VAR 0 3
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: CALL_OW 322
// SetTech ( tech_virus , side , state_enabled ) ;
12701: LD_INT 33
12703: PPUSH
12704: LD_VAR 0 3
12708: PPUSH
12709: LD_INT 1
12711: PPUSH
12712: CALL_OW 322
// SetTech ( tech_matpred , side , state_enabled ) ;
12716: LD_INT 9
12718: PPUSH
12719: LD_VAR 0 3
12723: PPUSH
12724: LD_INT 1
12726: PPUSH
12727: CALL_OW 322
// SetTech ( tech_targteleport , side , state_enabled ) ;
12731: LD_INT 38
12733: PPUSH
12734: LD_VAR 0 3
12738: PPUSH
12739: LD_INT 1
12741: PPUSH
12742: CALL_OW 322
// SetTech ( tech_comp1 , side , state_enabled ) ;
12746: LD_INT 57
12748: PPUSH
12749: LD_VAR 0 3
12753: PPUSH
12754: LD_INT 1
12756: PPUSH
12757: CALL_OW 322
// SetTech ( tech_comp2 , side , state_enabled ) ;
12761: LD_INT 58
12763: PPUSH
12764: LD_VAR 0 3
12768: PPUSH
12769: LD_INT 1
12771: PPUSH
12772: CALL_OW 322
// SetTech ( tech_taurad , side , state_enabled ) ;
12776: LD_INT 28
12778: PPUSH
12779: LD_VAR 0 3
12783: PPUSH
12784: LD_INT 1
12786: PPUSH
12787: CALL_OW 322
// SetTech ( tech_spacanom , side , state_enabled ) ;
12791: LD_INT 29
12793: PPUSH
12794: LD_VAR 0 3
12798: PPUSH
12799: LD_INT 1
12801: PPUSH
12802: CALL_OW 322
// SetTech ( tech_taufield , side , state_enabled ) ;
12806: LD_INT 30
12808: PPUSH
12809: LD_VAR 0 3
12813: PPUSH
12814: LD_INT 1
12816: PPUSH
12817: CALL_OW 322
// SetTech ( tech_limteleport , side , state_enabled ) ;
12821: LD_INT 37
12823: PPUSH
12824: LD_VAR 0 3
12828: PPUSH
12829: LD_INT 1
12831: PPUSH
12832: CALL_OW 322
// SetTech ( tech_st1 , side , state_enabled ) ;
12836: LD_INT 63
12838: PPUSH
12839: LD_VAR 0 3
12843: PPUSH
12844: LD_INT 1
12846: PPUSH
12847: CALL_OW 322
// SetTech ( tech_st2 , side , state_enabled ) ;
12851: LD_INT 64
12853: PPUSH
12854: LD_VAR 0 3
12858: PPUSH
12859: LD_INT 1
12861: PPUSH
12862: CALL_OW 322
// SetTech ( tech_apeneural , side , state_enabled ) ;
12866: LD_INT 3
12868: PPUSH
12869: LD_VAR 0 3
12873: PPUSH
12874: LD_INT 1
12876: PPUSH
12877: CALL_OW 322
// SetTech ( tech_apebrain , side , state_enabled ) ;
12881: LD_INT 4
12883: PPUSH
12884: LD_VAR 0 3
12888: PPUSH
12889: LD_INT 1
12891: PPUSH
12892: CALL_OW 322
// SetTech ( tech_stimdrugs , side , state_enabled ) ;
12896: LD_INT 5
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_INT 1
12906: PPUSH
12907: CALL_OW 322
// SetTech ( tech_biodet , side , state_enabled ) ;
12911: LD_INT 8
12913: PPUSH
12914: LD_VAR 0 3
12918: PPUSH
12919: LD_INT 1
12921: PPUSH
12922: CALL_OW 322
// SetTech ( tech_bio1 , side , state_enabled ) ;
12926: LD_INT 66
12928: PPUSH
12929: LD_VAR 0 3
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: CALL_OW 322
// SetTech ( tech_bio2 , side , state_enabled ) ;
12941: LD_INT 67
12943: PPUSH
12944: LD_VAR 0 3
12948: PPUSH
12949: LD_INT 1
12951: PPUSH
12952: CALL_OW 322
// SetTech ( tech_sibpow , side , state_enabled ) ;
12956: LD_INT 21
12958: PPUSH
12959: LD_VAR 0 3
12963: PPUSH
12964: LD_INT 1
12966: PPUSH
12967: CALL_OW 322
// SetTech ( tech_sibeng , side , state_enabled ) ;
12971: LD_INT 22
12973: PPUSH
12974: LD_VAR 0 3
12978: PPUSH
12979: LD_INT 1
12981: PPUSH
12982: CALL_OW 322
// SetTech ( tech_sibloc , side , state_enabled ) ;
12986: LD_INT 19
12988: PPUSH
12989: LD_VAR 0 3
12993: PPUSH
12994: LD_INT 1
12996: PPUSH
12997: CALL_OW 322
// SetTech ( tech_sibcontam , side , state_enabled ) ;
13001: LD_INT 26
13003: PPUSH
13004: LD_VAR 0 3
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: CALL_OW 322
// SetTech ( tech_sib1 , side , state_enabled ) ;
13016: LD_INT 54
13018: PPUSH
13019: LD_VAR 0 3
13023: PPUSH
13024: LD_INT 1
13026: PPUSH
13027: CALL_OW 322
// SetTech ( tech_sib2 , side , state_enabled ) ;
13031: LD_INT 55
13033: PPUSH
13034: LD_VAR 0 3
13038: PPUSH
13039: LD_INT 1
13041: PPUSH
13042: CALL_OW 322
// for i = 0 to 39 do
13046: LD_ADDR_VAR 0 4
13050: PUSH
13051: DOUBLE
13052: LD_INT 0
13054: DEC
13055: ST_TO_ADDR
13056: LD_INT 39
13058: PUSH
13059: FOR_TO
13060: IFFALSE 13081
// SetRestrict ( i , side , true ) ;
13062: LD_VAR 0 4
13066: PPUSH
13067: LD_VAR 0 3
13071: PPUSH
13072: LD_INT 1
13074: PPUSH
13075: CALL_OW 324
13079: GO 13059
13081: POP
13082: POP
// end ; else
13083: GO 13160
13085: POP
// begin for i = 1 to 73 do
13086: LD_ADDR_VAR 0 4
13090: PUSH
13091: DOUBLE
13092: LD_INT 1
13094: DEC
13095: ST_TO_ADDR
13096: LD_INT 73
13098: PUSH
13099: FOR_TO
13100: IFFALSE 13121
// SetTech ( i , side , state_enabled ) ;
13102: LD_VAR 0 4
13106: PPUSH
13107: LD_VAR 0 3
13111: PPUSH
13112: LD_INT 1
13114: PPUSH
13115: CALL_OW 322
13119: GO 13099
13121: POP
13122: POP
// for i = 0 to 39 do
13123: LD_ADDR_VAR 0 4
13127: PUSH
13128: DOUBLE
13129: LD_INT 0
13131: DEC
13132: ST_TO_ADDR
13133: LD_INT 39
13135: PUSH
13136: FOR_TO
13137: IFFALSE 13158
// SetRestrict ( i , side , true ) ;
13139: LD_VAR 0 4
13143: PPUSH
13144: LD_VAR 0 3
13148: PPUSH
13149: LD_INT 1
13151: PPUSH
13152: CALL_OW 324
13156: GO 13136
13158: POP
13159: POP
// end ; end ; end ;
13160: GO 9165
13162: POP
13163: POP
// end ; end_of_file
13164: LD_VAR 0 2
13168: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
13169: LD_INT 0
13171: PPUSH
13172: PPUSH
13173: PPUSH
13174: PPUSH
13175: PPUSH
13176: PPUSH
13177: PPUSH
13178: PPUSH
13179: PPUSH
// for i := 1 to 8 do
13180: LD_ADDR_VAR 0 2
13184: PUSH
13185: DOUBLE
13186: LD_INT 1
13188: DEC
13189: ST_TO_ADDR
13190: LD_INT 8
13192: PUSH
13193: FOR_TO
13194: IFFALSE 13578
// begin if Side_Positions [ i ] then
13196: LD_EXP 34
13200: PUSH
13201: LD_VAR 0 2
13205: ARRAY
13206: IFFALSE 13576
// begin people := FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) + 0 ;
13208: LD_ADDR_VAR 0 7
13212: PUSH
13213: LD_INT 22
13215: PUSH
13216: LD_VAR 0 2
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 21
13227: PUSH
13228: LD_INT 1
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: PPUSH
13239: CALL_OW 69
13243: PUSH
13244: LD_INT 0
13246: PLUS
13247: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13248: LD_ADDR_VAR 0 9
13252: PUSH
13253: LD_INT 22
13255: PUSH
13256: LD_VAR 0 2
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 2
13267: PUSH
13268: LD_INT 30
13270: PUSH
13271: LD_INT 0
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 30
13280: PUSH
13281: LD_INT 1
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PPUSH
13297: CALL_OW 69
13301: ST_TO_ADDR
// crates := 0 ;
13302: LD_ADDR_VAR 0 4
13306: PUSH
13307: LD_INT 0
13309: ST_TO_ADDR
// oil := 0 ;
13310: LD_ADDR_VAR 0 5
13314: PUSH
13315: LD_INT 0
13317: ST_TO_ADDR
// sib := 0 ;
13318: LD_ADDR_VAR 0 6
13322: PUSH
13323: LD_INT 0
13325: ST_TO_ADDR
// if bases then
13326: LD_VAR 0 9
13330: IFFALSE 13436
// begin for j in bases do
13332: LD_ADDR_VAR 0 3
13336: PUSH
13337: LD_VAR 0 9
13341: PUSH
13342: FOR_IN
13343: IFFALSE 13434
// begin base := GetBase ( j ) ;
13345: LD_ADDR_VAR 0 8
13349: PUSH
13350: LD_VAR 0 3
13354: PPUSH
13355: CALL_OW 274
13359: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
13360: LD_ADDR_VAR 0 4
13364: PUSH
13365: LD_VAR 0 4
13369: PUSH
13370: LD_VAR 0 8
13374: PPUSH
13375: LD_INT 1
13377: PPUSH
13378: CALL_OW 275
13382: PLUS
13383: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
13384: LD_ADDR_VAR 0 5
13388: PUSH
13389: LD_VAR 0 5
13393: PUSH
13394: LD_VAR 0 8
13398: PPUSH
13399: LD_INT 2
13401: PPUSH
13402: CALL_OW 275
13406: PLUS
13407: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
13408: LD_ADDR_VAR 0 6
13412: PUSH
13413: LD_VAR 0 6
13417: PUSH
13418: LD_VAR 0 8
13422: PPUSH
13423: LD_INT 3
13425: PPUSH
13426: CALL_OW 275
13430: PLUS
13431: ST_TO_ADDR
// end ;
13432: GO 13342
13434: POP
13435: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
13436: LD_STRING setSpecText(
13438: PUSH
13439: LD_VAR 0 2
13443: STR
13444: PUSH
13445: LD_STRING ,
13447: STR
13448: PUSH
13449: LD_INT 2
13451: STR
13452: PUSH
13453: LD_STRING ,
13455: STR
13456: PUSH
13457: LD_VAR 0 4
13461: STR
13462: PUSH
13463: LD_STRING )
13465: STR
13466: PPUSH
13467: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
13471: LD_STRING setSpecText(
13473: PUSH
13474: LD_VAR 0 2
13478: STR
13479: PUSH
13480: LD_STRING ,
13482: STR
13483: PUSH
13484: LD_INT 3
13486: STR
13487: PUSH
13488: LD_STRING ,
13490: STR
13491: PUSH
13492: LD_VAR 0 5
13496: STR
13497: PUSH
13498: LD_STRING )
13500: STR
13501: PPUSH
13502: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
13506: LD_STRING setSpecText(
13508: PUSH
13509: LD_VAR 0 2
13513: STR
13514: PUSH
13515: LD_STRING ,
13517: STR
13518: PUSH
13519: LD_INT 4
13521: STR
13522: PUSH
13523: LD_STRING ,
13525: STR
13526: PUSH
13527: LD_VAR 0 6
13531: STR
13532: PUSH
13533: LD_STRING )
13535: STR
13536: PPUSH
13537: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
13541: LD_STRING setSpecText(
13543: PUSH
13544: LD_VAR 0 2
13548: STR
13549: PUSH
13550: LD_STRING ,
13552: STR
13553: PUSH
13554: LD_INT 5
13556: STR
13557: PUSH
13558: LD_STRING ,
13560: STR
13561: PUSH
13562: LD_VAR 0 7
13566: STR
13567: PUSH
13568: LD_STRING )
13570: STR
13571: PPUSH
13572: CALL_OW 559
// end ; end ;
13576: GO 13193
13578: POP
13579: POP
// end ;
13580: LD_VAR 0 1
13584: RET
// every 0 0$1 do
13585: GO 13587
13587: DISABLE
// begin ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
13588: LD_STRING setSpecLogoNumber(
13590: PUSH
13591: LD_INT 2
13593: STR
13594: PUSH
13595: LD_STRING ,
13597: STR
13598: PUSH
13599: LD_INT 1
13601: STR
13602: PUSH
13603: LD_STRING )
13605: STR
13606: PPUSH
13607: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
13611: LD_STRING setSpecLogoNumber(
13613: PUSH
13614: LD_INT 3
13616: STR
13617: PUSH
13618: LD_STRING ,
13620: STR
13621: PUSH
13622: LD_INT 2
13624: STR
13625: PUSH
13626: LD_STRING )
13628: STR
13629: PPUSH
13630: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
13634: LD_STRING setSpecLogoNumber(
13636: PUSH
13637: LD_INT 4
13639: STR
13640: PUSH
13641: LD_STRING ,
13643: STR
13644: PUSH
13645: LD_INT 3
13647: STR
13648: PUSH
13649: LD_STRING )
13651: STR
13652: PPUSH
13653: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
13657: LD_STRING setSpecLogoNumber(
13659: PUSH
13660: LD_INT 5
13662: STR
13663: PUSH
13664: LD_STRING ,
13666: STR
13667: PUSH
13668: LD_INT 4
13670: STR
13671: PUSH
13672: LD_STRING )
13674: STR
13675: PPUSH
13676: CALL_OW 559
// end ;
13680: END
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
13681: LD_INT 2
13683: PUSH
13684: LD_INT 30
13686: PUSH
13687: LD_INT 0
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 30
13696: PUSH
13697: LD_INT 1
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: PPUSH
13709: CALL_OW 69
13713: IFFALSE 13723
13715: GO 13717
13717: DISABLE
// begin enable ;
13718: ENABLE
// UpdateSpectatorBar ;
13719: CALL 13169 0 0
// end ; end_of_file
13723: END
// var respawn , inqueue ; export function init_respawning ; begin
13724: LD_INT 0
13726: PPUSH
// respawn := Rand ( 1 , 8 ) ;
13727: LD_ADDR_LOC 18
13731: PUSH
13732: LD_INT 1
13734: PPUSH
13735: LD_INT 8
13737: PPUSH
13738: CALL_OW 12
13742: ST_TO_ADDR
// inqueue := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
13743: LD_ADDR_LOC 19
13747: PUSH
13748: LD_INT 0
13750: PUSH
13751: LD_INT 0
13753: PUSH
13754: LD_INT 0
13756: PUSH
13757: LD_INT 0
13759: PUSH
13760: LD_INT 0
13762: PUSH
13763: LD_INT 0
13765: PUSH
13766: LD_INT 0
13768: PUSH
13769: LD_INT 0
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: ST_TO_ADDR
// end ;
13782: LD_VAR 0 1
13786: RET
// every 0 0$1 + 0 0$0.5 do var n , dep , aktresp ;
13787: GO 13789
13789: DISABLE
13790: LD_INT 0
13792: PPUSH
13793: PPUSH
13794: PPUSH
// begin if respawning_time_max = 0 then
13795: LD_EXP 28
13799: PUSH
13800: LD_INT 0
13802: EQUAL
13803: IFFALSE 13807
// exit ;
13805: GO 14215
// if respawn = 8 then
13807: LD_LOC 18
13811: PUSH
13812: LD_INT 8
13814: EQUAL
13815: IFFALSE 13827
// respawn := 1 else
13817: LD_ADDR_LOC 18
13821: PUSH
13822: LD_INT 1
13824: ST_TO_ADDR
13825: GO 13841
// respawn := respawn + 1 ;
13827: LD_ADDR_LOC 18
13831: PUSH
13832: LD_LOC 18
13836: PUSH
13837: LD_INT 1
13839: PLUS
13840: ST_TO_ADDR
// if Side_Positions [ respawn ] and not inqueue [ respawn ] then
13841: LD_EXP 34
13845: PUSH
13846: LD_LOC 18
13850: ARRAY
13851: PUSH
13852: LD_LOC 19
13856: PUSH
13857: LD_LOC 18
13861: ARRAY
13862: NOT
13863: AND
13864: IFFALSE 14214
// begin n := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , respawn ] , f_not , [ f_nation , nation_nature ] ] ) ;
13866: LD_ADDR_VAR 0 1
13870: PUSH
13871: LD_INT 21
13873: PUSH
13874: LD_INT 1
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 22
13883: PUSH
13884: LD_LOC 18
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 3
13895: PUSH
13896: LD_INT 23
13898: PUSH
13899: LD_INT 0
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: PPUSH
13912: CALL_OW 69
13916: ST_TO_ADDR
// if n < number_of_people then
13917: LD_VAR 0 1
13921: PUSH
13922: LD_EXP 19
13926: LESS
13927: IFFALSE 14211
// begin aktresp := respawn ;
13929: LD_ADDR_VAR 0 3
13933: PUSH
13934: LD_LOC 18
13938: ST_TO_ADDR
// inqueue := Replace ( inqueue , aktresp , true ) ;
13939: LD_ADDR_LOC 19
13943: PUSH
13944: LD_LOC 19
13948: PPUSH
13949: LD_VAR 0 3
13953: PPUSH
13954: LD_INT 1
13956: PPUSH
13957: CALL_OW 1
13961: ST_TO_ADDR
// enable ;
13962: ENABLE
// wait ( rand ( respawning_time_min , respawning_time_max ) ) ;
13963: LD_EXP 27
13967: PPUSH
13968: LD_EXP 28
13972: PPUSH
13973: CALL_OW 12
13977: PPUSH
13978: CALL_OW 67
// inqueue := Replace ( inqueue , aktresp , false ) ;
13982: LD_ADDR_LOC 19
13986: PUSH
13987: LD_LOC 19
13991: PPUSH
13992: LD_VAR 0 3
13996: PPUSH
13997: LD_INT 0
13999: PPUSH
14000: CALL_OW 1
14004: ST_TO_ADDR
// dep = FilterAllUnits ( [ [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] , [ f_ok ] , [ f_side , aktresp ] ] ) ;
14005: LD_ADDR_VAR 0 2
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 3
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 2
14022: PUSH
14023: LD_INT 30
14025: PUSH
14026: LD_INT 0
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 30
14035: PUSH
14036: LD_INT 1
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 50
14050: PUSH
14051: EMPTY
14052: LIST
14053: PUSH
14054: LD_INT 22
14056: PUSH
14057: LD_VAR 0 3
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: PPUSH
14072: CALL_OW 69
14076: ST_TO_ADDR
// if dep = 0 then
14077: LD_VAR 0 2
14081: PUSH
14082: LD_INT 0
14084: EQUAL
14085: IFFALSE 14089
// exit ;
14087: GO 14215
// hc_name :=  ;
14089: LD_ADDR_OWVAR 26
14093: PUSH
14094: LD_STRING 
14096: ST_TO_ADDR
// hc_importance := 0 ;
14097: LD_ADDR_OWVAR 32
14101: PUSH
14102: LD_INT 0
14104: ST_TO_ADDR
// PrepareHuman ( 0 , 0 , skill_level div 2 ) ;
14105: LD_INT 0
14107: PPUSH
14108: LD_INT 0
14110: PPUSH
14111: LD_EXP 20
14115: PUSH
14116: LD_INT 2
14118: DIV
14119: PPUSH
14120: CALL_OW 380
// uc_nation := Side_Nations [ aktresp ] ;
14124: LD_ADDR_OWVAR 21
14128: PUSH
14129: LD_EXP 35
14133: PUSH
14134: LD_VAR 0 3
14138: ARRAY
14139: ST_TO_ADDR
// uc_side := aktresp ;
14140: LD_ADDR_OWVAR 20
14144: PUSH
14145: LD_VAR 0 3
14149: ST_TO_ADDR
// dep := dep [ Rand ( 1 , dep ) ] ;
14150: LD_ADDR_VAR 0 2
14154: PUSH
14155: LD_VAR 0 2
14159: PUSH
14160: LD_INT 1
14162: PPUSH
14163: LD_VAR 0 2
14167: PPUSH
14168: CALL_OW 12
14172: ARRAY
14173: ST_TO_ADDR
// PlaceUnitXYR ( CreateHuman , GetX ( dep ) , GetY ( dep ) , 7 , true ) ;
14174: CALL_OW 44
14178: PPUSH
14179: LD_VAR 0 2
14183: PPUSH
14184: CALL_OW 250
14188: PPUSH
14189: LD_VAR 0 2
14193: PPUSH
14194: CALL_OW 251
14198: PPUSH
14199: LD_INT 7
14201: PPUSH
14202: LD_INT 1
14204: PPUSH
14205: CALL_OW 50
// end else
14209: GO 14212
// enable ;
14211: ENABLE
// end else
14212: GO 14215
// enable ;
14214: ENABLE
// end ; end_of_file
14215: PPOPN 3
14217: END
// export BuildUpAreas ; export BuildUpTimeActive ; export BuildUpTime_Delay ; export function BeginBuildUp ; var i , j ; begin
14218: LD_INT 0
14220: PPUSH
14221: PPUSH
14222: PPUSH
// BuildUpTime_Delay = 0 ;
14223: LD_ADDR_EXP 57
14227: PUSH
14228: LD_INT 0
14230: ST_TO_ADDR
// if not def_builduptime then
14231: LD_EXP 14
14235: NOT
14236: IFFALSE 14240
// exit ;
14238: GO 14423
// BuildUpTime_Delay := 4 4$00 + 1 1$00 * def_builduptime ;
14240: LD_ADDR_EXP 57
14244: PUSH
14245: LD_INT 8400
14247: PUSH
14248: LD_INT 2100
14250: PUSH
14251: LD_EXP 14
14255: MUL
14256: PLUS
14257: ST_TO_ADDR
// BuildUpTimeActive := true ;
14258: LD_ADDR_EXP 56
14262: PUSH
14263: LD_INT 1
14265: ST_TO_ADDR
// for i := 1 to 8 do
14266: LD_ADDR_VAR 0 2
14270: PUSH
14271: DOUBLE
14272: LD_INT 1
14274: DEC
14275: ST_TO_ADDR
14276: LD_INT 8
14278: PUSH
14279: FOR_TO
14280: IFFALSE 14421
// if Side_Positions [ i ] then
14282: LD_EXP 34
14286: PUSH
14287: LD_VAR 0 2
14291: ARRAY
14292: IFFALSE 14419
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 5 ) ;
14294: LD_EXP 55
14298: PUSH
14299: LD_EXP 34
14303: PUSH
14304: LD_VAR 0 2
14308: ARRAY
14309: ARRAY
14310: PPUSH
14311: LD_INT 5
14313: PPUSH
14314: CALL_OW 424
// for j := 1 to 8 do
14318: LD_ADDR_VAR 0 3
14322: PUSH
14323: DOUBLE
14324: LD_INT 1
14326: DEC
14327: ST_TO_ADDR
14328: LD_INT 8
14330: PUSH
14331: FOR_TO
14332: IFFALSE 14417
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14334: LD_EXP 34
14338: PUSH
14339: LD_VAR 0 3
14343: ARRAY
14344: PUSH
14345: LD_EXP 31
14349: PUSH
14350: LD_VAR 0 2
14354: ARRAY
14355: PUSH
14356: LD_EXP 31
14360: PUSH
14361: LD_VAR 0 3
14365: ARRAY
14366: NONEQUAL
14367: PUSH
14368: LD_EXP 36
14372: NOT
14373: PUSH
14374: LD_VAR 0 2
14378: PUSH
14379: LD_VAR 0 3
14383: NONEQUAL
14384: AND
14385: OR
14386: AND
14387: IFFALSE 14415
// HideArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14389: LD_VAR 0 3
14393: PPUSH
14394: LD_EXP 55
14398: PUSH
14399: LD_EXP 34
14403: PUSH
14404: LD_VAR 0 2
14408: ARRAY
14409: ARRAY
14410: PPUSH
14411: CALL_OW 333
14415: GO 14331
14417: POP
14418: POP
// end ;
14419: GO 14279
14421: POP
14422: POP
// end ;
14423: LD_VAR 0 1
14427: RET
// export function EndBuildUp ; var i , j ; begin
14428: LD_INT 0
14430: PPUSH
14431: PPUSH
14432: PPUSH
// BuildUpTimeActive := false ;
14433: LD_ADDR_EXP 56
14437: PUSH
14438: LD_INT 0
14440: ST_TO_ADDR
// for i := 1 to 8 do
14441: LD_ADDR_VAR 0 2
14445: PUSH
14446: DOUBLE
14447: LD_INT 1
14449: DEC
14450: ST_TO_ADDR
14451: LD_INT 8
14453: PUSH
14454: FOR_TO
14455: IFFALSE 14596
// if Side_Positions [ i ] then
14457: LD_EXP 34
14461: PUSH
14462: LD_VAR 0 2
14466: ARRAY
14467: IFFALSE 14594
// begin SetAreaMapShow ( BuildUpAreas [ Side_Positions [ i ] ] , 0 ) ;
14469: LD_EXP 55
14473: PUSH
14474: LD_EXP 34
14478: PUSH
14479: LD_VAR 0 2
14483: ARRAY
14484: ARRAY
14485: PPUSH
14486: LD_INT 0
14488: PPUSH
14489: CALL_OW 424
// for j := 1 to 8 do
14493: LD_ADDR_VAR 0 3
14497: PUSH
14498: DOUBLE
14499: LD_INT 1
14501: DEC
14502: ST_TO_ADDR
14503: LD_INT 8
14505: PUSH
14506: FOR_TO
14507: IFFALSE 14592
// if Side_Positions [ j ] and ( ( Side_Teams [ i ] <> Side_Teams [ j ] ) or ( not Team_Game ) and ( i <> j ) ) then
14509: LD_EXP 34
14513: PUSH
14514: LD_VAR 0 3
14518: ARRAY
14519: PUSH
14520: LD_EXP 31
14524: PUSH
14525: LD_VAR 0 2
14529: ARRAY
14530: PUSH
14531: LD_EXP 31
14535: PUSH
14536: LD_VAR 0 3
14540: ARRAY
14541: NONEQUAL
14542: PUSH
14543: LD_EXP 36
14547: NOT
14548: PUSH
14549: LD_VAR 0 2
14553: PUSH
14554: LD_VAR 0 3
14558: NONEQUAL
14559: AND
14560: OR
14561: AND
14562: IFFALSE 14590
// ShowArea ( j , BuildUpAreas [ Side_Positions [ i ] ] ) ;
14564: LD_VAR 0 3
14568: PPUSH
14569: LD_EXP 55
14573: PUSH
14574: LD_EXP 34
14578: PUSH
14579: LD_VAR 0 2
14583: ARRAY
14584: ARRAY
14585: PPUSH
14586: CALL_OW 334
14590: GO 14506
14592: POP
14593: POP
// end ;
14594: GO 14454
14596: POP
14597: POP
// end ;
14598: LD_VAR 0 1
14602: RET
// every 5 trigger BuildUpTimeActive do var i , un ;
14603: LD_EXP 56
14607: IFFALSE 14782
14609: GO 14611
14611: DISABLE
14612: LD_INT 0
14614: PPUSH
14615: PPUSH
// begin for i := 1 to 8 do
14616: LD_ADDR_VAR 0 1
14620: PUSH
14621: DOUBLE
14622: LD_INT 1
14624: DEC
14625: ST_TO_ADDR
14626: LD_INT 8
14628: PUSH
14629: FOR_TO
14630: IFFALSE 14779
// if Side_Positions [ i ] then
14632: LD_EXP 34
14636: PUSH
14637: LD_VAR 0 1
14641: ARRAY
14642: IFFALSE 14777
// for un in FilterUnitsInArea ( BuildUpAreas [ Side_Positions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , Your_Side ] ] ) do
14644: LD_ADDR_VAR 0 2
14648: PUSH
14649: LD_EXP 55
14653: PUSH
14654: LD_EXP 34
14658: PUSH
14659: LD_VAR 0 1
14663: ARRAY
14664: ARRAY
14665: PPUSH
14666: LD_INT 2
14668: PUSH
14669: LD_INT 21
14671: PUSH
14672: LD_INT 1
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 21
14681: PUSH
14682: LD_INT 2
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: PUSH
14694: LD_INT 22
14696: PUSH
14697: LD_OWVAR 2
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PPUSH
14710: CALL_OW 70
14714: PUSH
14715: FOR_IN
14716: IFFALSE 14775
// if ( ( Side_Teams [ i ] <> Side_Teams [ Your_Side ] ) or ( not Team_Game ) and ( i <> Your_Side ) ) then
14718: LD_EXP 31
14722: PUSH
14723: LD_VAR 0 1
14727: ARRAY
14728: PUSH
14729: LD_EXP 31
14733: PUSH
14734: LD_OWVAR 2
14738: ARRAY
14739: NONEQUAL
14740: PUSH
14741: LD_EXP 36
14745: NOT
14746: PUSH
14747: LD_VAR 0 1
14751: PUSH
14752: LD_OWVAR 2
14756: NONEQUAL
14757: AND
14758: OR
14759: IFFALSE 14773
// ComMoveToArea ( un , BuildUpEscape ) ;
14761: LD_VAR 0 2
14765: PPUSH
14766: LD_INT 17
14768: PPUSH
14769: CALL_OW 113
14773: GO 14715
14775: POP
14776: POP
14777: GO 14629
14779: POP
14780: POP
// enable ;
14781: ENABLE
// end ;
14782: PPOPN 2
14784: END
// every 0 0$1 trigger def_builduptime do
14785: LD_EXP 14
14789: IFFALSE 14815
14791: GO 14793
14793: DISABLE
// begin wait ( 4 4$00 + ( def_builduptime * 1 1$00 ) ) ;
14794: LD_INT 8400
14796: PUSH
14797: LD_EXP 14
14801: PUSH
14802: LD_INT 2100
14804: MUL
14805: PLUS
14806: PPUSH
14807: CALL_OW 67
// EndBuildUp ;
14811: CALL 14428 0 0
// end ;
14815: END
